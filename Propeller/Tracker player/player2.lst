00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/Tracker player/player2.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 30 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 17 F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E0 14 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 76 62 FD | 	cogid	arg01
00614 084 03 76 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 31 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 77 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 79 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 7B 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 7D 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 30 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 7A 56 F0 |         shr	arg03, #1 wc
00688 0a1 3B 79 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 76 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 78 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 7A 56 F0 |         shr	arg03, #1 wc
00698 0a5 3B 79 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 76 06 C1 |  if_c   add	arg01, #2
006a0 0a7 3C 79 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 3B 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 7A 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 3D 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 78 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 85 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 85 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 6D D9 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 DA 62 FD |        getqx   muldivb_
00740 0cf 19 D8 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 6C D9 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 6D DB 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 6C D9 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 6D DB 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 30 06 F6 |     mov result1, #0
00778 0dd 00 32 06 F6 |     mov result2, #0
0077c 0de 3B 07 02 F6 |     mov abortchain, arg01
00780 0df 3B 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 76 06 F1 |     add arg01, #4
00788 0e1 3B F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 76 06 F1 |     add arg01, #4
00790 0e3 3B 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 76 06 F1 |     add arg01, #4
00798 0e5 3B B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 3C 77 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 3B F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 76 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 76 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 3C 31 02 F6 |     mov result1, arg02
007d4 0f4 01 32 06 F6 |     mov result2, #1
007d8 0f5 3B 79 02 FB |     rdlong arg02, arg01
007dc 0f6 04 76 06 F1 |     add arg01, #4
007e0 0f7 3B F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 76 06 F1 |     add arg01, #4
007e8 0f9 3B 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 76 06 F1 |     add arg01, #4
007f0 0fb 3B B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 76 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 7A 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 28 3C 02 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 30 4C 02 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 B4 F3 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 FC F2 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a F4 33 02 00 | 	long	@__system__dat_
00830 10b             | ptr__audio019_spin2_dat__
00830 10b E4 28 02 00 | 	long	@_audio019_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 0C F5 00 00 | 	long	@_dat_
00838 10d             | ptr__ff_cc_dat__
00838 10d A8 3A 02 00 | 	long	@_ff_cc_dat_
0083c 10e             | ptr__hng030rm_spin2_dat__
0083c 10e 48 ED 01 00 | 	long	@_hng030rm_spin2_dat_
00840 10f             | ptr__hng030rm_spin2_putchar_
00840 10f 10 25 00 00 | 	long	@_hng030rm_spin2_putchar
00844 110             | ptr__hng030rm_spin2_putpixel1_
00844 110 1C 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
00848 111             | ptr__hng030rm_spin2_putpixel2_
00848 111 08 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
0084c 112             | ptr__hng030rm_spin2_putpixel4_
0084c 112 F4 20 00 00 | 	long	@_hng030rm_spin2_putpixel4
00850 113             | ptr__hng030rm_spin2_putpixel8_
00850 113 E0 21 00 00 | 	long	@_hng030rm_spin2_putpixel8
00854 114             | ptr__retrocog_spin2_serialcog_
00854 114 6C 36 00 00 | 	long	@_retrocog_spin2_serialcog
00858 115             | ptr__shell_c_dat__
00858 115 AC 11 02 00 | 	long	@_shell_c_dat_
0085c 116             | ptr__trackerplayer_spin2_dat__
0085c 116 C0 17 02 00 | 	long	@_trackerplayer_spin2_dat_
00860 117             | ptr_stackspace_
00860 117 DC 5D 02 00 | 	long	@stackspace
00864 118             | result1
00864 118 00 00 00 00 | 	long	0
00868 119             | result2
00868 119 00 00 00 00 | 	long	0
0086c 11a             | result3
0086c 11a 00 00 00 00 | 	long	0
00870 11b             | COG_BSS_START
00870 11b             | 	fit	480
00870                 | 	orgh
00870                 | hubentry
00870                 | 
00870                 | ' 
00870                 | ' function startvideo(mode=64, pin=0) 'todo return a cog#
00870                 | _startvideo
00870     EC 2B B0 FD | 	call	#_hng030rm_spin2_start
00874     00 76 06 F6 | 	mov	arg01, #0
00878     00 78 06 F6 | 	mov	arg02, #0
0087c     00 7A 06 F6 | 	mov	arg03, #0
00880     54 1A B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00884                 | ' v030.start(mode,pin)
00884                 | ' v030.setbordercolor(0,0,0)
00884                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00884     07 77 02 F6 | 	mov	arg01, objptr
00888     0F 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
0088c     F8 5B B0 FD | 	call	#__system___make_methodptr
00890     00 34 06 F6 | 	mov	result3, #0
00894     00 32 06 F6 | 	mov	result2, #0
00898     18 79 02 F6 | 	mov	arg02, result1
0089c     00 7A 06 F6 | 	mov	arg03, #0
008a0     00 7C 06 F6 | 	mov	arg04, #0
008a4     00 76 06 F6 | 	mov	arg01, #0
008a8     50 62 B0 FD | 	call	#__system___basic_open
008ac     00 30 06 F6 | 	mov	result1, #0
008b0                 | _startvideo_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' function addr(byref v as any)
008b4                 | _addr
008b4     00 5A 05 F6 | 	mov	COUNT_, #0
008b8     B0 00 A0 FD | 	call	#pushregs_
008bc     08 F0 07 F1 | 	add	ptra, #8
008c0     04 5E 05 F1 | 	add	fp, #4
008c4     AF 76 62 FC | 	wrlong	arg01, fp
008c8                 | ' 
008c8                 | ' return(cast(ulong,@v))
008c8     3B 31 02 F6 | 	mov	result1, arg01
008cc     04 5E 85 F1 | 	sub	fp, #4
008d0     AF F0 03 F6 | 	mov	ptra, fp
008d4     BF 00 A0 FD | 	call	#popregs_
008d8                 | _addr_ret
008d8     2D 00 64 FD | 	ret
008dc                 | 
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | '     return (char *) &tempname1;
008dc                 | _test
008dc     01 5A 05 F6 | 	mov	COUNT_, #1
008e0     B0 00 A0 FD | 	call	#pushregs_
008e4     1D 78 06 F6 | 	mov	arg02, #29
008e8                 | ' 
008e8                 | ' ''---------- Set the (x,y) position of cursor
008e8                 | ' 
008e8                 | ' cursor_x:=x
008e8     34 0E 06 F1 | 	add	objptr, #52
008ec     07 0B 48 FC | 	wrbyte	#5, objptr
008f0                 | ' cursor_y:=y
008f0     01 0E 06 F1 | 	add	objptr, #1
008f4     07 3B 48 FC | 	wrbyte	#29, objptr
008f8     02 00 00 FF 
008fc     D2 0F 06 F1 | 	add	objptr, ##1490
00900     07 85 C2 FA | 	rdbyte	local01, objptr
00904     02 84 66 F0 | 	shl	local01, #2
00908     01 00 00 FF 
0090c     65 0E 06 F1 | 	add	objptr, ##613
00910     07 85 02 F1 | 	add	local01, objptr
00914     42 77 02 FB | 	rdlong	arg01, local01
00918     04 00 00 FF 
0091c     6C 0E 86 F1 | 	sub	objptr, ##2156
00920     78 1D B0 FD | 	call	#_hng030rm_spin2_write
00924     04 00 00 FF 
00928     F8 0E 06 F1 | 	add	objptr, ##2296
0092c     07 77 02 FB | 	rdlong	arg01, objptr
00930     04 00 00 FF 
00934     F8 0E 86 F1 | 	sub	objptr, ##2296
00938     60 1D B0 FD | 	call	#_hng030rm_spin2_write
0093c                 | ' 
0093c                 | ' ''---------- Set the (x,y) position of cursor
0093c                 | ' 
0093c                 | ' cursor_x:=x
0093c     34 0E 06 F1 | 	add	objptr, #52
00940     07 03 48 FC | 	wrbyte	#1, objptr
00944                 | ' cursor_y:=y
00944     01 0E 06 F1 | 	add	objptr, #1
00948     07 3B 48 FC | 	wrbyte	#29, objptr
0094c     02 00 00 FF 
00950     FA 0F 06 F1 | 	add	objptr, ##1530
00954     07 77 02 FB | 	rdlong	arg01, objptr
00958     10 0E 06 F1 | 	add	objptr, #16
0095c     07 85 02 FB | 	rdlong	local01, objptr
00960     03 00 00 FF 
00964     3F 0E 86 F1 | 	sub	objptr, ##1599
00968     42 77 02 F1 | 	add	arg01, local01
0096c     03 78 06 F6 | 	mov	arg02, #3
00970     50 20 B0 FD | 	call	#_hng030rm_spin2_inttostr2
00974     18 77 02 F6 | 	mov	arg01, result1
00978     20 1D B0 FD | 	call	#_hng030rm_spin2_write
0097c     1D 78 06 F6 | 	mov	arg02, #29
00980                 | ' 
00980                 | ' ''---------- Set the (x,y) position of cursor
00980                 | ' 
00980                 | ' cursor_x:=x
00980     34 0E 06 F1 | 	add	objptr, #52
00984     07 41 48 FC | 	wrbyte	#32, objptr
00988                 | ' cursor_y:=y
00988     01 0E 06 F1 | 	add	objptr, #1
0098c     07 3B 48 FC | 	wrbyte	#29, objptr
00990     02 00 00 FF 
00994     D3 0F 06 F1 | 	add	objptr, ##1491
00998     07 85 C2 FA | 	rdbyte	local01, objptr
0099c     02 84 66 F0 | 	shl	local01, #2
009a0     01 00 00 FF 
009a4     64 0E 06 F1 | 	add	objptr, ##612
009a8     07 85 02 F1 | 	add	local01, objptr
009ac     42 77 02 FB | 	rdlong	arg01, local01
009b0     04 00 00 FF 
009b4     6C 0E 86 F1 | 	sub	objptr, ##2156
009b8     E0 1C B0 FD | 	call	#_hng030rm_spin2_write
009bc     04 00 00 FF 
009c0     F8 0E 06 F1 | 	add	objptr, ##2296
009c4     07 77 02 FB | 	rdlong	arg01, objptr
009c8     04 00 00 FF 
009cc     F8 0E 86 F1 | 	sub	objptr, ##2296
009d0     C8 1C B0 FD | 	call	#_hng030rm_spin2_write
009d4                 | ' 
009d4                 | ' ''---------- Set the (x,y) position of cursor
009d4                 | ' 
009d4                 | ' cursor_x:=x
009d4     34 0E 06 F1 | 	add	objptr, #52
009d8     07 39 48 FC | 	wrbyte	#28, objptr
009dc                 | ' cursor_y:=y
009dc     01 0E 06 F1 | 	add	objptr, #1
009e0     07 3B 48 FC | 	wrbyte	#29, objptr
009e4     02 00 00 FF 
009e8     FE 0F 06 F1 | 	add	objptr, ##1534
009ec     07 77 02 FB | 	rdlong	arg01, objptr
009f0     10 0E 06 F1 | 	add	objptr, #16
009f4     07 85 02 FB | 	rdlong	local01, objptr
009f8     03 00 00 FF 
009fc     43 0E 86 F1 | 	sub	objptr, ##1603
00a00     42 77 02 F1 | 	add	arg01, local01
00a04     03 78 06 F6 | 	mov	arg02, #3
00a08     B8 1F B0 FD | 	call	#_hng030rm_spin2_inttostr2
00a0c     18 77 02 F6 | 	mov	arg01, result1
00a10     88 1C B0 FD | 	call	#_hng030rm_spin2_write
00a14     1D 78 06 F6 | 	mov	arg02, #29
00a18                 | ' 
00a18                 | ' ''---------- Set the (x,y) position of cursor
00a18                 | ' 
00a18                 | ' cursor_x:=x
00a18     34 0E 06 F1 | 	add	objptr, #52
00a1c     07 79 48 FC | 	wrbyte	#60, objptr
00a20                 | ' cursor_y:=y
00a20     01 0E 06 F1 | 	add	objptr, #1
00a24     07 3B 48 FC | 	wrbyte	#29, objptr
00a28     02 00 00 FF 
00a2c     D4 0F 06 F1 | 	add	objptr, ##1492
00a30     07 85 C2 FA | 	rdbyte	local01, objptr
00a34     02 84 66 F0 | 	shl	local01, #2
00a38     01 00 00 FF 
00a3c     63 0E 06 F1 | 	add	objptr, ##611
00a40     07 85 02 F1 | 	add	local01, objptr
00a44     42 77 02 FB | 	rdlong	arg01, local01
00a48     04 00 00 FF 
00a4c     6C 0E 86 F1 | 	sub	objptr, ##2156
00a50     48 1C B0 FD | 	call	#_hng030rm_spin2_write
00a54     04 00 00 FF 
00a58     F8 0E 06 F1 | 	add	objptr, ##2296
00a5c     07 77 02 FB | 	rdlong	arg01, objptr
00a60     04 00 00 FF 
00a64     F8 0E 86 F1 | 	sub	objptr, ##2296
00a68     30 1C B0 FD | 	call	#_hng030rm_spin2_write
00a6c                 | ' 
00a6c                 | ' ''---------- Set the (x,y) position of cursor
00a6c                 | ' 
00a6c                 | ' cursor_x:=x
00a6c     34 0E 06 F1 | 	add	objptr, #52
00a70     07 71 48 FC | 	wrbyte	#56, objptr
00a74                 | ' cursor_y:=y
00a74     01 0E 06 F1 | 	add	objptr, #1
00a78     07 3B 48 FC | 	wrbyte	#29, objptr
00a7c     03 00 00 FF 
00a80     02 0E 06 F1 | 	add	objptr, ##1538
00a84     07 77 02 FB | 	rdlong	arg01, objptr
00a88     10 0E 06 F1 | 	add	objptr, #16
00a8c     07 85 02 FB | 	rdlong	local01, objptr
00a90     03 00 00 FF 
00a94     47 0E 86 F1 | 	sub	objptr, ##1607
00a98     42 77 02 F1 | 	add	arg01, local01
00a9c     03 78 06 F6 | 	mov	arg02, #3
00aa0     20 1F B0 FD | 	call	#_hng030rm_spin2_inttostr2
00aa4     18 77 02 F6 | 	mov	arg01, result1
00aa8     F0 1B B0 FD | 	call	#_hng030rm_spin2_write
00aac                 | ' 
00aac                 | ' ''---------- Set the (x,y) position of cursor
00aac                 | ' 
00aac                 | ' cursor_x:=x
00aac     34 0E 06 F1 | 	add	objptr, #52
00ab0     07 A9 48 FC | 	wrbyte	#84, objptr
00ab4                 | ' cursor_y:=y
00ab4     01 0E 06 F1 | 	add	objptr, #1
00ab8     07 3B 48 FC | 	wrbyte	#29, objptr
00abc     03 00 00 FF 
00ac0     06 0E 06 F1 | 	add	objptr, ##1542
00ac4     07 77 02 FB | 	rdlong	arg01, objptr
00ac8     10 0E 06 F1 | 	add	objptr, #16
00acc     07 85 02 FB | 	rdlong	local01, objptr
00ad0     03 00 00 FF 
00ad4     4B 0E 86 F1 | 	sub	objptr, ##1611
00ad8     42 77 02 F1 | 	add	arg01, local01
00adc     03 78 06 F6 | 	mov	arg02, #3
00ae0     E0 1E B0 FD | 	call	#_hng030rm_spin2_inttostr2
00ae4     18 77 02 F6 | 	mov	arg01, result1
00ae8     B0 1B B0 FD | 	call	#_hng030rm_spin2_write
00aec     1D 78 06 F6 | 	mov	arg02, #29
00af0                 | ' 
00af0                 | ' ''---------- Set the (x,y) position of cursor
00af0                 | ' 
00af0                 | ' cursor_x:=x
00af0     34 0E 06 F1 | 	add	objptr, #52
00af4     07 B1 48 FC | 	wrbyte	#88, objptr
00af8                 | ' cursor_y:=y
00af8     01 0E 06 F1 | 	add	objptr, #1
00afc     07 3B 48 FC | 	wrbyte	#29, objptr
00b00     02 00 00 FF 
00b04     D5 0F 06 F1 | 	add	objptr, ##1493
00b08     07 85 C2 FA | 	rdbyte	local01, objptr
00b0c     02 84 66 F0 | 	shl	local01, #2
00b10     01 00 00 FF 
00b14     62 0E 06 F1 | 	add	objptr, ##610
00b18     07 85 02 F1 | 	add	local01, objptr
00b1c     42 77 02 FB | 	rdlong	arg01, local01
00b20     04 00 00 FF 
00b24     6C 0E 86 F1 | 	sub	objptr, ##2156
00b28     70 1B B0 FD | 	call	#_hng030rm_spin2_write
00b2c     04 00 00 FF 
00b30     F8 0E 06 F1 | 	add	objptr, ##2296
00b34     07 77 02 FB | 	rdlong	arg01, objptr
00b38     04 00 00 FF 
00b3c     F8 0E 86 F1 | 	sub	objptr, ##2296
00b40     58 1B B0 FD | 	call	#_hng030rm_spin2_write
00b44     AF F0 03 F6 | 	mov	ptra, fp
00b48     BF 00 A0 FD | 	call	#popregs_
00b4c                 | _test_ret
00b4c     2D 00 64 FD | 	ret
00b50                 | 
00b50                 | '     return (char *) &tempname1;
00b50                 | '     return (char *) &tempname1;
00b50                 | '     return (char *) &tempname1;
00b50                 | _getinfo
00b50     0F 5A 05 F6 | 	mov	COUNT_, #15
00b54     B0 00 A0 FD | 	call	#pushregs_
00b58     3B 85 02 F6 | 	mov	local01, arg01
00b5c     3C 87 02 F6 | 	mov	local02, arg02
00b60     04 78 06 F6 | 	mov	arg02, #4
00b64                 | ' 
00b64                 | ' ''---------- Set the (x,y) position of cursor
00b64                 | ' 
00b64                 | ' cursor_x:=x
00b64     34 0E 06 F1 | 	add	objptr, #52
00b68     07 03 48 FC | 	wrbyte	#1, objptr
00b6c                 | ' cursor_y:=y
00b6c     01 0E 06 F1 | 	add	objptr, #1
00b70     07 09 48 FC | 	wrbyte	#4, objptr
00b74     35 0E 86 F1 | 	sub	objptr, #53
00b78                 | '     return (char *) &tempname1;
00b78                 | '     return (char *) &tempname1;
00b78     00 76 06 F6 | 	mov	arg01, #0
00b7c     6C 78 B0 FD | 	call	#__system___getiolock_0223
00b80     18 77 02 F6 | 	mov	arg01, result1
00b84     40 59 B0 FD | 	call	#__system___lockmem
00b88     00 30 06 F6 | 	mov	result1, #0
00b8c     7A 00 00 FF 
00b90     6D 78 06 F6 | 	mov	arg02, ##@LR__0944
00b94     00 76 06 F6 | 	mov	arg01, #0
00b98     00 7A 06 F6 | 	mov	arg03, #0
00b9c     5C 60 B0 FD | 	call	#__system___basic_print_string
00ba0     00 76 06 F6 | 	mov	arg01, #0
00ba4     0A 78 06 F6 | 	mov	arg02, #10
00ba8     00 7A 06 F6 | 	mov	arg03, #0
00bac     00 60 B0 FD | 	call	#__system___basic_print_char
00bb0     01 30 06 F6 | 	mov	result1, #1
00bb4     00 76 06 F6 | 	mov	arg01, #0
00bb8     30 78 B0 FD | 	call	#__system___getiolock_0223
00bbc     18 01 68 FC | 	wrlong	#0, result1
00bc0     00 30 06 F6 | 	mov	result1, #0
00bc4                 | '     return (char *) &tempname1;
00bc4                 | '     return (char *) &tempname1;
00bc4     00 88 06 F6 | 	mov	local03, #0
00bc8                 | LR__0001
00bc8     44 8B 02 F6 | 	mov	local04, local03
00bcc     02 8A 66 F0 | 	shl	local04, #2
00bd0     04 00 00 FF 
00bd4     6C 0E 06 F1 | 	add	objptr, ##2156
00bd8     07 8B 02 F1 | 	add	local04, objptr
00bdc     7A 00 00 FF 
00be0     D6 8C 06 F6 | 	mov	local05, ##@LR__0945
00be4     44 77 02 F6 | 	mov	arg01, local03
00be8     02 78 06 F6 | 	mov	arg02, #2
00bec     04 00 00 FF 
00bf0     6C 0E 86 F1 | 	sub	objptr, ##2156
00bf4     0A 7A 06 F6 | 	mov	arg03, #10
00bf8     10 65 B0 FD | 	call	#__system__Number_S
00bfc     18 79 02 F6 | 	mov	arg02, result1
00c00     46 77 02 F6 | 	mov	arg01, local05
00c04     F8 58 B0 FD | 	call	#__system___string_concat
00c08     18 8F 02 F6 | 	mov	local06, result1
00c0c     13 76 06 F6 | 	mov	arg01, #19
00c10     79 00 00 FF 
00c14     EE 79 06 F6 | 	mov	arg02, ##@LR__0932
00c18     BC 65 B0 FD | 	call	#__system__String_S
00c1c     18 79 02 F6 | 	mov	arg02, result1
00c20     47 77 02 F6 | 	mov	arg01, local06
00c24     D8 58 B0 FD | 	call	#__system___string_concat
00c28     45 31 62 FC | 	wrlong	result1, local04
00c2c     01 88 06 F1 | 	add	local03, #1
00c30     20 88 5E F2 | 	cmps	local03, #32 wcz
00c34     90 FF 9F CD |  if_b	jmp	#LR__0001
00c38                 | '     return (char *) &tempname1;
00c38     01 88 06 F6 | 	mov	local03, #1
00c3c     01 86 06 F1 | 	add	local02, #1
00c40                 | LR__0002
00c40     43 89 5A F2 | 	cmps	local03, local02 wcz
00c44     54 08 90 3D |  if_ae	jmp	#LR__0007
00c48                 | '     return (char *) &tempname1;
00c48     00 90 06 F6 | 	mov	local07, #0
00c4c                 | LR__0003
00c4c     44 77 02 F6 | 	mov	arg01, local03
00c50     02 76 66 F0 | 	shl	arg01, #2
00c54     04 00 00 FF 
00c58     6C 0E 06 F1 | 	add	objptr, ##2156
00c5c     07 77 02 F1 | 	add	arg01, objptr
00c60     04 00 00 FF 
00c64     6C 0E 86 F1 | 	sub	objptr, ##2156
00c68     48 FC BF FD | 	call	#_addr
00c6c                 | ' asm
00c6c     18 93 02 FB | 	rdlong	local08, result1
00c70                 | ' return r
00c70     08 00 00 FF 
00c74     90 0F 06 F1 | 	add	objptr, ##4496
00c78     07 93 62 FC | 	wrlong	local08, objptr
00c7c     42 77 02 F6 | 	mov	arg01, local01
00c80     14 76 06 F1 | 	add	arg01, #20
00c84     44 95 02 F6 | 	mov	local09, local03
00c88     01 94 86 F1 | 	sub	local09, #1
00c8c     4A 97 02 F6 | 	mov	local10, local09
00c90     04 96 66 F0 | 	shl	local10, #4
00c94     4A 97 82 F1 | 	sub	local10, local09
00c98     01 96 66 F0 | 	shl	local10, #1
00c9c     4B 77 02 F1 | 	add	arg01, local10
00ca0     48 77 02 F1 | 	add	arg01, local07
00ca4                 | ' asm
00ca4     3B 31 C2 FA | 	rdbyte	result1, arg01
00ca8                 | ' return r
00ca8     18 99 02 F6 | 	mov	local11, result1
00cac     07 98 46 F7 | 	zerox	local11, #7
00cb0     04 0E 06 F1 | 	add	objptr, #4
00cb4     07 99 62 FC | 	wrlong	local11, objptr
00cb8                 | '     return (char *) &tempname1;
00cb8                 | '     return (char *) &tempname1;
00cb8                 | '     return (char *) &tempname1;
00cb8     08 00 00 FF 
00cbc     94 0F 86 F1 | 	sub	objptr, ##4500
00cc0     20 98 5E F2 | 	cmps	local11, #32 wcz
00cc4     24 00 90 CD |  if_b	jmp	#LR__0004
00cc8     08 00 00 FF 
00ccc     90 0F 06 F1 | 	add	objptr, ##4496
00cd0     07 77 02 FB | 	rdlong	arg01, objptr
00cd4     48 77 02 F1 | 	add	arg01, local07
00cd8     04 0E 06 F1 | 	add	objptr, #4
00cdc     07 79 02 FB | 	rdlong	arg02, objptr
00ce0     08 00 00 FF 
00ce4     94 0F 86 F1 | 	sub	objptr, ##4500
00ce8                 | ' asm
00ce8     3B 79 42 FC | 	wrbyte	arg02, arg01
00cec                 | LR__0004
00cec     01 90 06 F1 | 	add	local07, #1
00cf0     16 90 5E F2 | 	cmps	local07, #22 wcz
00cf4     54 FF 9F CD |  if_b	jmp	#LR__0003
00cf8     42 77 02 F6 | 	mov	arg01, local01
00cfc     14 76 06 F1 | 	add	arg01, #20
00d00     44 97 02 F6 | 	mov	local10, local03
00d04     01 96 86 F1 | 	sub	local10, #1
00d08     4B 8D 02 F6 | 	mov	local05, local10
00d0c     04 8C 66 F0 | 	shl	local05, #4
00d10     4B 8D 82 F1 | 	sub	local05, local10
00d14     01 8C 66 F0 | 	shl	local05, #1
00d18     46 77 02 F1 | 	add	arg01, local05
00d1c     16 76 06 F1 | 	add	arg01, #22
00d20                 | ' asm
00d20     3B 9B C2 FA | 	rdbyte	local12, arg01
00d24                 | ' return r
00d24     07 9A 46 F7 | 	zerox	local12, #7
00d28     08 9A 66 F0 | 	shl	local12, #8
00d2c     42 77 02 F6 | 	mov	arg01, local01
00d30     14 76 06 F1 | 	add	arg01, #20
00d34     44 9D 02 F6 | 	mov	local13, local03
00d38     01 9C 86 F1 | 	sub	local13, #1
00d3c     4E 9F 02 F6 | 	mov	local14, local13
00d40     04 9E 66 F0 | 	shl	local14, #4
00d44     4E 9F 82 F1 | 	sub	local14, local13
00d48     01 9E 66 F0 | 	shl	local14, #1
00d4c     4F 77 02 F1 | 	add	arg01, local14
00d50     17 76 06 F1 | 	add	arg01, #23
00d54                 | ' asm
00d54     3B 8F C2 FA | 	rdbyte	local06, arg01
00d58                 | ' return r
00d58     07 8E 46 F7 | 	zerox	local06, #7
00d5c     47 9B 02 F1 | 	add	local12, local06
00d60     01 9A 66 F0 | 	shl	local12, #1
00d64     08 00 00 FF 
00d68     98 0F 06 F1 | 	add	objptr, ##4504
00d6c     07 9B 62 FC | 	wrlong	local12, objptr
00d70     42 77 02 F6 | 	mov	arg01, local01
00d74     14 76 06 F1 | 	add	arg01, #20
00d78     44 97 02 F6 | 	mov	local10, local03
00d7c     01 96 86 F1 | 	sub	local10, #1
00d80     4B 8D 02 F6 | 	mov	local05, local10
00d84     04 8C 66 F0 | 	shl	local05, #4
00d88     4B 8D 82 F1 | 	sub	local05, local10
00d8c     01 8C 66 F0 | 	shl	local05, #1
00d90     46 77 02 F1 | 	add	arg01, local05
00d94     1A 76 06 F1 | 	add	arg01, #26
00d98                 | ' asm
00d98     3B 9B C2 FA | 	rdbyte	local12, arg01
00d9c                 | ' return r
00d9c     07 9A 46 F7 | 	zerox	local12, #7
00da0     08 9A 66 F0 | 	shl	local12, #8
00da4     42 77 02 F6 | 	mov	arg01, local01
00da8     14 76 06 F1 | 	add	arg01, #20
00dac     44 9D 02 F6 | 	mov	local13, local03
00db0     01 9C 86 F1 | 	sub	local13, #1
00db4     4E 9F 02 F6 | 	mov	local14, local13
00db8     04 9E 66 F0 | 	shl	local14, #4
00dbc     4E 9F 82 F1 | 	sub	local14, local13
00dc0     01 9E 66 F0 | 	shl	local14, #1
00dc4     4F 77 02 F1 | 	add	arg01, local14
00dc8     1B 76 06 F1 | 	add	arg01, #27
00dcc                 | ' asm
00dcc     3B 8F C2 FA | 	rdbyte	local06, arg01
00dd0                 | ' return r
00dd0     07 8E 46 F7 | 	zerox	local06, #7
00dd4     47 9B 02 F1 | 	add	local12, local06
00dd8     01 9A 66 F0 | 	shl	local12, #1
00ddc     04 0E 06 F1 | 	add	objptr, #4
00de0     07 9B 62 FC | 	wrlong	local12, objptr
00de4     42 77 02 F6 | 	mov	arg01, local01
00de8     14 76 06 F1 | 	add	arg01, #20
00dec     44 97 02 F6 | 	mov	local10, local03
00df0     01 96 86 F1 | 	sub	local10, #1
00df4     4B 8D 02 F6 | 	mov	local05, local10
00df8     04 8C 66 F0 | 	shl	local05, #4
00dfc     4B 8D 82 F1 | 	sub	local05, local10
00e00     01 8C 66 F0 | 	shl	local05, #1
00e04     46 77 02 F1 | 	add	arg01, local05
00e08     1C 76 06 F1 | 	add	arg01, #28
00e0c                 | ' asm
00e0c     3B 9B C2 FA | 	rdbyte	local12, arg01
00e10                 | ' return r
00e10     07 9A 46 F7 | 	zerox	local12, #7
00e14     08 9A 66 F0 | 	shl	local12, #8
00e18     42 77 02 F6 | 	mov	arg01, local01
00e1c     14 76 06 F1 | 	add	arg01, #20
00e20     44 9D 02 F6 | 	mov	local13, local03
00e24     01 9C 86 F1 | 	sub	local13, #1
00e28     4E 9F 02 F6 | 	mov	local14, local13
00e2c     04 9E 66 F0 | 	shl	local14, #4
00e30     4E 9F 82 F1 | 	sub	local14, local13
00e34     01 9E 66 F0 | 	shl	local14, #1
00e38     4F 77 02 F1 | 	add	arg01, local14
00e3c     1D 76 06 F1 | 	add	arg01, #29
00e40                 | ' asm
00e40     3B 8F C2 FA | 	rdbyte	local06, arg01
00e44                 | ' return r
00e44     07 8E 46 F7 | 	zerox	local06, #7
00e48     47 9B 02 F1 | 	add	local12, local06
00e4c     01 9A 66 F0 | 	shl	local12, #1
00e50     04 0E 06 F1 | 	add	objptr, #4
00e54     07 9B 62 FC | 	wrlong	local12, objptr
00e58     42 77 02 F6 | 	mov	arg01, local01
00e5c     14 76 06 F1 | 	add	arg01, #20
00e60     44 95 02 F6 | 	mov	local09, local03
00e64     01 94 86 F1 | 	sub	local09, #1
00e68     4A 97 02 F6 | 	mov	local10, local09
00e6c     04 96 66 F0 | 	shl	local10, #4
00e70     4A 97 82 F1 | 	sub	local10, local09
00e74     01 96 66 F0 | 	shl	local10, #1
00e78     4B 77 02 F1 | 	add	arg01, local10
00e7c     18 76 06 F1 | 	add	arg01, #24
00e80                 | ' asm
00e80     3B 99 C2 FA | 	rdbyte	local11, arg01
00e84                 | ' return r
00e84     07 98 46 F7 | 	zerox	local11, #7
00e88     04 0E 06 F1 | 	add	objptr, #4
00e8c     07 99 62 FC | 	wrlong	local11, objptr
00e90     42 77 02 F6 | 	mov	arg01, local01
00e94     14 76 06 F1 | 	add	arg01, #20
00e98     44 95 02 F6 | 	mov	local09, local03
00e9c     01 94 86 F1 | 	sub	local09, #1
00ea0     4A 97 02 F6 | 	mov	local10, local09
00ea4     04 96 66 F0 | 	shl	local10, #4
00ea8     4A 97 82 F1 | 	sub	local10, local09
00eac     01 96 66 F0 | 	shl	local10, #1
00eb0     4B 77 02 F1 | 	add	arg01, local10
00eb4     19 76 06 F1 | 	add	arg01, #25
00eb8                 | ' asm
00eb8     3B 31 C2 FA | 	rdbyte	result1, arg01
00ebc                 | ' return r
00ebc     18 99 02 F6 | 	mov	local11, result1
00ec0     07 98 46 F7 | 	zerox	local11, #7
00ec4     04 0E 06 F1 | 	add	objptr, #4
00ec8     07 99 62 FC | 	wrlong	local11, objptr
00ecc     08 00 00 FF 
00ed0     A8 0F 86 F1 | 	sub	objptr, ##4520
00ed4                 | '     return (char *) &tempname1;
00ed4                 | '     return (char *) &tempname1;
00ed4                 | '     return (char *) &tempname1;
00ed4                 | '     return (char *) &tempname1;
00ed4                 | '     return (char *) &tempname1;
00ed4                 | '     return (char *) &tempname1;
00ed4     10 88 5E F2 | 	cmps	local03, #16 wcz
00ed8     D8 02 90 3D |  if_ae	jmp	#LR__0005
00edc     05 78 06 F6 | 	mov	arg02, #5
00ee0     44 79 02 F1 | 	add	arg02, local03
00ee4                 | ' 
00ee4                 | ' ''---------- Set the (x,y) position of cursor
00ee4                 | ' 
00ee4                 | ' cursor_x:=x
00ee4     34 0E 06 F1 | 	add	objptr, #52
00ee8     07 03 48 FC | 	wrbyte	#1, objptr
00eec                 | ' cursor_y:=y
00eec     01 0E 06 F1 | 	add	objptr, #1
00ef0     07 79 42 FC | 	wrbyte	arg02, objptr
00ef4     35 0E 86 F1 | 	sub	objptr, #53
00ef8     00 76 06 F6 | 	mov	arg01, #0
00efc     EC 74 B0 FD | 	call	#__system___getiolock_0223
00f00     18 77 02 F6 | 	mov	arg01, result1
00f04     C0 55 B0 FD | 	call	#__system___lockmem
00f08     00 30 06 F6 | 	mov	result1, #0
00f0c     44 A1 02 F6 | 	mov	local15, local03
00f10     02 A0 66 F0 | 	shl	local15, #2
00f14     04 00 00 FF 
00f18     6C 0E 06 F1 | 	add	objptr, ##2156
00f1c     07 A1 02 F1 | 	add	local15, objptr
00f20     50 79 02 FB | 	rdlong	arg02, local15
00f24     00 76 06 F6 | 	mov	arg01, #0
00f28     00 7A 06 F6 | 	mov	arg03, #0
00f2c     04 00 00 FF 
00f30     6C 0E 86 F1 | 	sub	objptr, ##2156
00f34     C4 5C B0 FD | 	call	#__system___basic_print_string
00f38     00 76 06 F6 | 	mov	arg01, #0
00f3c     0A 78 06 F6 | 	mov	arg02, #10
00f40     00 7A 06 F6 | 	mov	arg03, #0
00f44     68 5C B0 FD | 	call	#__system___basic_print_char
00f48     01 30 06 F6 | 	mov	result1, #1
00f4c     00 76 06 F6 | 	mov	arg01, #0
00f50     98 74 B0 FD | 	call	#__system___getiolock_0223
00f54     18 01 68 FC | 	wrlong	#0, result1
00f58     00 30 06 F6 | 	mov	result1, #0
00f5c     05 78 06 F6 | 	mov	arg02, #5
00f60     44 79 02 F1 | 	add	arg02, local03
00f64                 | ' 
00f64                 | ' ''---------- Set the (x,y) position of cursor
00f64                 | ' 
00f64                 | ' cursor_x:=x
00f64     34 0E 06 F1 | 	add	objptr, #52
00f68     07 31 48 FC | 	wrbyte	#24, objptr
00f6c                 | ' cursor_y:=y
00f6c     01 0E 06 F1 | 	add	objptr, #1
00f70     07 79 42 FC | 	wrbyte	arg02, objptr
00f74     35 0E 86 F1 | 	sub	objptr, #53
00f78     00 76 06 F6 | 	mov	arg01, #0
00f7c     6C 74 B0 FD | 	call	#__system___getiolock_0223
00f80     18 77 02 F6 | 	mov	arg01, result1
00f84     40 55 B0 FD | 	call	#__system___lockmem
00f88     00 30 06 F6 | 	mov	result1, #0
00f8c     08 00 00 FF 
00f90     98 0F 06 F1 | 	add	objptr, ##4504
00f94     07 79 02 FB | 	rdlong	arg02, objptr
00f98     08 00 00 FF 
00f9c     98 0F 86 F1 | 	sub	objptr, ##4504
00fa0     00 76 06 F6 | 	mov	arg01, #0
00fa4     00 7A 06 F6 | 	mov	arg03, #0
00fa8     0A 7C 06 F6 | 	mov	arg04, #10
00fac     94 5C B0 FD | 	call	#__system___basic_print_integer
00fb0     00 76 06 F6 | 	mov	arg01, #0
00fb4     0A 78 06 F6 | 	mov	arg02, #10
00fb8     00 7A 06 F6 | 	mov	arg03, #0
00fbc     F0 5B B0 FD | 	call	#__system___basic_print_char
00fc0     01 30 06 F6 | 	mov	result1, #1
00fc4     00 76 06 F6 | 	mov	arg01, #0
00fc8     20 74 B0 FD | 	call	#__system___getiolock_0223
00fcc     18 01 68 FC | 	wrlong	#0, result1
00fd0     00 30 06 F6 | 	mov	result1, #0
00fd4     05 78 06 F6 | 	mov	arg02, #5
00fd8     44 79 02 F1 | 	add	arg02, local03
00fdc                 | ' 
00fdc                 | ' ''---------- Set the (x,y) position of cursor
00fdc                 | ' 
00fdc                 | ' cursor_x:=x
00fdc     34 0E 06 F1 | 	add	objptr, #52
00fe0     07 3F 48 FC | 	wrbyte	#31, objptr
00fe4                 | ' cursor_y:=y
00fe4     01 0E 06 F1 | 	add	objptr, #1
00fe8     07 79 42 FC | 	wrbyte	arg02, objptr
00fec     35 0E 86 F1 | 	sub	objptr, #53
00ff0     00 76 06 F6 | 	mov	arg01, #0
00ff4     F4 73 B0 FD | 	call	#__system___getiolock_0223
00ff8     18 77 02 F6 | 	mov	arg01, result1
00ffc     C8 54 B0 FD | 	call	#__system___lockmem
01000     00 30 06 F6 | 	mov	result1, #0
01004     08 00 00 FF 
01008     A4 0F 06 F1 | 	add	objptr, ##4516
0100c     07 79 02 FB | 	rdlong	arg02, objptr
01010     08 00 00 FF 
01014     A4 0F 86 F1 | 	sub	objptr, ##4516
01018     00 76 06 F6 | 	mov	arg01, #0
0101c     00 7A 06 F6 | 	mov	arg03, #0
01020     0A 7C 06 F6 | 	mov	arg04, #10
01024     1C 5C B0 FD | 	call	#__system___basic_print_integer
01028     00 76 06 F6 | 	mov	arg01, #0
0102c     0A 78 06 F6 | 	mov	arg02, #10
01030     00 7A 06 F6 | 	mov	arg03, #0
01034     78 5B B0 FD | 	call	#__system___basic_print_char
01038     01 30 06 F6 | 	mov	result1, #1
0103c     00 76 06 F6 | 	mov	arg01, #0
01040     A8 73 B0 FD | 	call	#__system___getiolock_0223
01044     18 01 68 FC | 	wrlong	#0, result1
01048     00 30 06 F6 | 	mov	result1, #0
0104c     05 78 06 F6 | 	mov	arg02, #5
01050     44 79 02 F1 | 	add	arg02, local03
01054                 | ' 
01054                 | ' ''---------- Set the (x,y) position of cursor
01054                 | ' 
01054                 | ' cursor_x:=x
01054     34 0E 06 F1 | 	add	objptr, #52
01058     07 45 48 FC | 	wrbyte	#34, objptr
0105c                 | ' cursor_y:=y
0105c     01 0E 06 F1 | 	add	objptr, #1
01060     07 79 42 FC | 	wrbyte	arg02, objptr
01064     35 0E 86 F1 | 	sub	objptr, #53
01068     00 76 06 F6 | 	mov	arg01, #0
0106c     7C 73 B0 FD | 	call	#__system___getiolock_0223
01070     18 77 02 F6 | 	mov	arg01, result1
01074     50 54 B0 FD | 	call	#__system___lockmem
01078     00 30 06 F6 | 	mov	result1, #0
0107c     08 00 00 FF 
01080     A8 0F 06 F1 | 	add	objptr, ##4520
01084     07 79 02 FB | 	rdlong	arg02, objptr
01088     08 00 00 FF 
0108c     A8 0F 86 F1 | 	sub	objptr, ##4520
01090     00 76 06 F6 | 	mov	arg01, #0
01094     00 7A 06 F6 | 	mov	arg03, #0
01098     0A 7C 06 F6 | 	mov	arg04, #10
0109c     A4 5B B0 FD | 	call	#__system___basic_print_integer
010a0     00 76 06 F6 | 	mov	arg01, #0
010a4     0A 78 06 F6 | 	mov	arg02, #10
010a8     00 7A 06 F6 | 	mov	arg03, #0
010ac     00 5B B0 FD | 	call	#__system___basic_print_char
010b0     01 30 06 F6 | 	mov	result1, #1
010b4     00 76 06 F6 | 	mov	arg01, #0
010b8     30 73 B0 FD | 	call	#__system___getiolock_0223
010bc     18 01 68 FC | 	wrlong	#0, result1
010c0     00 30 06 F6 | 	mov	result1, #0
010c4     05 78 06 F6 | 	mov	arg02, #5
010c8     44 79 02 F1 | 	add	arg02, local03
010cc                 | ' 
010cc                 | ' ''---------- Set the (x,y) position of cursor
010cc                 | ' 
010cc                 | ' cursor_x:=x
010cc     34 0E 06 F1 | 	add	objptr, #52
010d0     07 4B 48 FC | 	wrbyte	#37, objptr
010d4                 | ' cursor_y:=y
010d4     01 0E 06 F1 | 	add	objptr, #1
010d8     07 79 42 FC | 	wrbyte	arg02, objptr
010dc     35 0E 86 F1 | 	sub	objptr, #53
010e0     00 76 06 F6 | 	mov	arg01, #0
010e4     04 73 B0 FD | 	call	#__system___getiolock_0223
010e8     18 77 02 F6 | 	mov	arg01, result1
010ec     D8 53 B0 FD | 	call	#__system___lockmem
010f0     00 30 06 F6 | 	mov	result1, #0
010f4     08 00 00 FF 
010f8     9C 0F 06 F1 | 	add	objptr, ##4508
010fc     07 79 02 FB | 	rdlong	arg02, objptr
01100     08 00 00 FF 
01104     9C 0F 86 F1 | 	sub	objptr, ##4508
01108     00 76 06 F6 | 	mov	arg01, #0
0110c     00 7A 06 F6 | 	mov	arg03, #0
01110     0A 7C 06 F6 | 	mov	arg04, #10
01114     2C 5B B0 FD | 	call	#__system___basic_print_integer
01118     00 76 06 F6 | 	mov	arg01, #0
0111c     0A 78 06 F6 | 	mov	arg02, #10
01120     00 7A 06 F6 | 	mov	arg03, #0
01124     88 5A B0 FD | 	call	#__system___basic_print_char
01128     01 30 06 F6 | 	mov	result1, #1
0112c     00 76 06 F6 | 	mov	arg01, #0
01130     B8 72 B0 FD | 	call	#__system___getiolock_0223
01134     18 01 68 FC | 	wrlong	#0, result1
01138     00 30 06 F6 | 	mov	result1, #0
0113c     05 78 06 F6 | 	mov	arg02, #5
01140     44 79 02 F1 | 	add	arg02, local03
01144                 | ' 
01144                 | ' ''---------- Set the (x,y) position of cursor
01144                 | ' 
01144                 | ' cursor_x:=x
01144     34 0E 06 F1 | 	add	objptr, #52
01148     07 57 48 FC | 	wrbyte	#43, objptr
0114c                 | ' cursor_y:=y
0114c     01 0E 06 F1 | 	add	objptr, #1
01150     07 79 42 FC | 	wrbyte	arg02, objptr
01154     35 0E 86 F1 | 	sub	objptr, #53
01158     00 76 06 F6 | 	mov	arg01, #0
0115c     8C 72 B0 FD | 	call	#__system___getiolock_0223
01160     18 77 02 F6 | 	mov	arg01, result1
01164     60 53 B0 FD | 	call	#__system___lockmem
01168     00 30 06 F6 | 	mov	result1, #0
0116c     08 00 00 FF 
01170     A0 0F 06 F1 | 	add	objptr, ##4512
01174     07 79 02 FB | 	rdlong	arg02, objptr
01178     08 00 00 FF 
0117c     A0 0F 86 F1 | 	sub	objptr, ##4512
01180     00 76 06 F6 | 	mov	arg01, #0
01184     00 7A 06 F6 | 	mov	arg03, #0
01188     0A 7C 06 F6 | 	mov	arg04, #10
0118c     B4 5A B0 FD | 	call	#__system___basic_print_integer
01190     00 76 06 F6 | 	mov	arg01, #0
01194     0A 78 06 F6 | 	mov	arg02, #10
01198     00 7A 06 F6 | 	mov	arg03, #0
0119c     10 5A B0 FD | 	call	#__system___basic_print_char
011a0     01 30 06 F6 | 	mov	result1, #1
011a4     00 76 06 F6 | 	mov	arg01, #0
011a8     40 72 B0 FD | 	call	#__system___getiolock_0223
011ac     18 01 68 FC | 	wrlong	#0, result1
011b0     00 30 06 F6 | 	mov	result1, #0
011b4                 | LR__0005
011b4                 | '     return (char *) &tempname1;
011b4     10 88 5E F2 | 	cmps	local03, #16 wcz
011b8     D8 02 90 CD |  if_b	jmp	#LR__0006
011bc     44 79 02 F6 | 	mov	arg02, local03
011c0     0B 78 86 F1 | 	sub	arg02, #11
011c4                 | ' 
011c4                 | ' ''---------- Set the (x,y) position of cursor
011c4                 | ' 
011c4                 | ' cursor_x:=x
011c4     34 0E 06 F1 | 	add	objptr, #52
011c8     07 73 48 FC | 	wrbyte	#57, objptr
011cc                 | ' cursor_y:=y
011cc     01 0E 06 F1 | 	add	objptr, #1
011d0     07 79 42 FC | 	wrbyte	arg02, objptr
011d4     35 0E 86 F1 | 	sub	objptr, #53
011d8     00 76 06 F6 | 	mov	arg01, #0
011dc     0C 72 B0 FD | 	call	#__system___getiolock_0223
011e0     18 77 02 F6 | 	mov	arg01, result1
011e4     E0 52 B0 FD | 	call	#__system___lockmem
011e8     00 30 06 F6 | 	mov	result1, #0
011ec     44 A1 02 F6 | 	mov	local15, local03
011f0     02 A0 66 F0 | 	shl	local15, #2
011f4     04 00 00 FF 
011f8     6C 0E 06 F1 | 	add	objptr, ##2156
011fc     07 A1 02 F1 | 	add	local15, objptr
01200     50 79 02 FB | 	rdlong	arg02, local15
01204     00 76 06 F6 | 	mov	arg01, #0
01208     00 7A 06 F6 | 	mov	arg03, #0
0120c     04 00 00 FF 
01210     6C 0E 86 F1 | 	sub	objptr, ##2156
01214     E4 59 B0 FD | 	call	#__system___basic_print_string
01218     00 76 06 F6 | 	mov	arg01, #0
0121c     0A 78 06 F6 | 	mov	arg02, #10
01220     00 7A 06 F6 | 	mov	arg03, #0
01224     88 59 B0 FD | 	call	#__system___basic_print_char
01228     01 30 06 F6 | 	mov	result1, #1
0122c     00 76 06 F6 | 	mov	arg01, #0
01230     B8 71 B0 FD | 	call	#__system___getiolock_0223
01234     18 01 68 FC | 	wrlong	#0, result1
01238     00 30 06 F6 | 	mov	result1, #0
0123c     44 79 02 F6 | 	mov	arg02, local03
01240     0B 78 86 F1 | 	sub	arg02, #11
01244                 | ' 
01244                 | ' ''---------- Set the (x,y) position of cursor
01244                 | ' 
01244                 | ' cursor_x:=x
01244     34 0E 06 F1 | 	add	objptr, #52
01248     07 A1 48 FC | 	wrbyte	#80, objptr
0124c                 | ' cursor_y:=y
0124c     01 0E 06 F1 | 	add	objptr, #1
01250     07 79 42 FC | 	wrbyte	arg02, objptr
01254     35 0E 86 F1 | 	sub	objptr, #53
01258     00 76 06 F6 | 	mov	arg01, #0
0125c     8C 71 B0 FD | 	call	#__system___getiolock_0223
01260     18 77 02 F6 | 	mov	arg01, result1
01264     60 52 B0 FD | 	call	#__system___lockmem
01268     00 30 06 F6 | 	mov	result1, #0
0126c     08 00 00 FF 
01270     98 0F 06 F1 | 	add	objptr, ##4504
01274     07 79 02 FB | 	rdlong	arg02, objptr
01278     08 00 00 FF 
0127c     98 0F 86 F1 | 	sub	objptr, ##4504
01280     00 76 06 F6 | 	mov	arg01, #0
01284     00 7A 06 F6 | 	mov	arg03, #0
01288     0A 7C 06 F6 | 	mov	arg04, #10
0128c     B4 59 B0 FD | 	call	#__system___basic_print_integer
01290     00 76 06 F6 | 	mov	arg01, #0
01294     0A 78 06 F6 | 	mov	arg02, #10
01298     00 7A 06 F6 | 	mov	arg03, #0
0129c     10 59 B0 FD | 	call	#__system___basic_print_char
012a0     01 30 06 F6 | 	mov	result1, #1
012a4     00 76 06 F6 | 	mov	arg01, #0
012a8     40 71 B0 FD | 	call	#__system___getiolock_0223
012ac     18 01 68 FC | 	wrlong	#0, result1
012b0     00 30 06 F6 | 	mov	result1, #0
012b4     44 79 02 F6 | 	mov	arg02, local03
012b8     0B 78 86 F1 | 	sub	arg02, #11
012bc                 | ' 
012bc                 | ' ''---------- Set the (x,y) position of cursor
012bc                 | ' 
012bc                 | ' cursor_x:=x
012bc     34 0E 06 F1 | 	add	objptr, #52
012c0     07 AF 48 FC | 	wrbyte	#87, objptr
012c4                 | ' cursor_y:=y
012c4     01 0E 06 F1 | 	add	objptr, #1
012c8     07 79 42 FC | 	wrbyte	arg02, objptr
012cc     35 0E 86 F1 | 	sub	objptr, #53
012d0     00 76 06 F6 | 	mov	arg01, #0
012d4     14 71 B0 FD | 	call	#__system___getiolock_0223
012d8     18 77 02 F6 | 	mov	arg01, result1
012dc     E8 51 B0 FD | 	call	#__system___lockmem
012e0     00 30 06 F6 | 	mov	result1, #0
012e4     08 00 00 FF 
012e8     A4 0F 06 F1 | 	add	objptr, ##4516
012ec     07 79 02 FB | 	rdlong	arg02, objptr
012f0     08 00 00 FF 
012f4     A4 0F 86 F1 | 	sub	objptr, ##4516
012f8     00 76 06 F6 | 	mov	arg01, #0
012fc     00 7A 06 F6 | 	mov	arg03, #0
01300     0A 7C 06 F6 | 	mov	arg04, #10
01304     3C 59 B0 FD | 	call	#__system___basic_print_integer
01308     00 76 06 F6 | 	mov	arg01, #0
0130c     0A 78 06 F6 | 	mov	arg02, #10
01310     00 7A 06 F6 | 	mov	arg03, #0
01314     98 58 B0 FD | 	call	#__system___basic_print_char
01318     01 30 06 F6 | 	mov	result1, #1
0131c     00 76 06 F6 | 	mov	arg01, #0
01320     C8 70 B0 FD | 	call	#__system___getiolock_0223
01324     18 01 68 FC | 	wrlong	#0, result1
01328     00 30 06 F6 | 	mov	result1, #0
0132c     44 79 02 F6 | 	mov	arg02, local03
01330     0B 78 86 F1 | 	sub	arg02, #11
01334                 | ' 
01334                 | ' ''---------- Set the (x,y) position of cursor
01334                 | ' 
01334                 | ' cursor_x:=x
01334     34 0E 06 F1 | 	add	objptr, #52
01338     07 B5 48 FC | 	wrbyte	#90, objptr
0133c                 | ' cursor_y:=y
0133c     01 0E 06 F1 | 	add	objptr, #1
01340     07 79 42 FC | 	wrbyte	arg02, objptr
01344     35 0E 86 F1 | 	sub	objptr, #53
01348     00 76 06 F6 | 	mov	arg01, #0
0134c     9C 70 B0 FD | 	call	#__system___getiolock_0223
01350     18 77 02 F6 | 	mov	arg01, result1
01354     70 51 B0 FD | 	call	#__system___lockmem
01358     00 30 06 F6 | 	mov	result1, #0
0135c     08 00 00 FF 
01360     A8 0F 06 F1 | 	add	objptr, ##4520
01364     07 79 02 FB | 	rdlong	arg02, objptr
01368     08 00 00 FF 
0136c     A8 0F 86 F1 | 	sub	objptr, ##4520
01370     00 76 06 F6 | 	mov	arg01, #0
01374     00 7A 06 F6 | 	mov	arg03, #0
01378     0A 7C 06 F6 | 	mov	arg04, #10
0137c     C4 58 B0 FD | 	call	#__system___basic_print_integer
01380     00 76 06 F6 | 	mov	arg01, #0
01384     0A 78 06 F6 | 	mov	arg02, #10
01388     00 7A 06 F6 | 	mov	arg03, #0
0138c     20 58 B0 FD | 	call	#__system___basic_print_char
01390     01 30 06 F6 | 	mov	result1, #1
01394     00 76 06 F6 | 	mov	arg01, #0
01398     50 70 B0 FD | 	call	#__system___getiolock_0223
0139c     18 01 68 FC | 	wrlong	#0, result1
013a0     00 30 06 F6 | 	mov	result1, #0
013a4     44 79 02 F6 | 	mov	arg02, local03
013a8     0B 78 86 F1 | 	sub	arg02, #11
013ac                 | ' 
013ac                 | ' ''---------- Set the (x,y) position of cursor
013ac                 | ' 
013ac                 | ' cursor_x:=x
013ac     34 0E 06 F1 | 	add	objptr, #52
013b0     07 BB 48 FC | 	wrbyte	#93, objptr
013b4                 | ' cursor_y:=y
013b4     01 0E 06 F1 | 	add	objptr, #1
013b8     07 79 42 FC | 	wrbyte	arg02, objptr
013bc     35 0E 86 F1 | 	sub	objptr, #53
013c0     00 76 06 F6 | 	mov	arg01, #0
013c4     24 70 B0 FD | 	call	#__system___getiolock_0223
013c8     18 77 02 F6 | 	mov	arg01, result1
013cc     F8 50 B0 FD | 	call	#__system___lockmem
013d0     00 30 06 F6 | 	mov	result1, #0
013d4     08 00 00 FF 
013d8     9C 0F 06 F1 | 	add	objptr, ##4508
013dc     07 79 02 FB | 	rdlong	arg02, objptr
013e0     08 00 00 FF 
013e4     9C 0F 86 F1 | 	sub	objptr, ##4508
013e8     00 76 06 F6 | 	mov	arg01, #0
013ec     00 7A 06 F6 | 	mov	arg03, #0
013f0     0A 7C 06 F6 | 	mov	arg04, #10
013f4     4C 58 B0 FD | 	call	#__system___basic_print_integer
013f8     00 76 06 F6 | 	mov	arg01, #0
013fc     0A 78 06 F6 | 	mov	arg02, #10
01400     00 7A 06 F6 | 	mov	arg03, #0
01404     A8 57 B0 FD | 	call	#__system___basic_print_char
01408     01 30 06 F6 | 	mov	result1, #1
0140c     00 76 06 F6 | 	mov	arg01, #0
01410     D8 6F B0 FD | 	call	#__system___getiolock_0223
01414     18 01 68 FC | 	wrlong	#0, result1
01418     00 30 06 F6 | 	mov	result1, #0
0141c     44 79 02 F6 | 	mov	arg02, local03
01420     0B 78 86 F1 | 	sub	arg02, #11
01424                 | ' 
01424                 | ' ''---------- Set the (x,y) position of cursor
01424                 | ' 
01424                 | ' cursor_x:=x
01424     34 0E 06 F1 | 	add	objptr, #52
01428     07 C7 48 FC | 	wrbyte	#99, objptr
0142c                 | ' cursor_y:=y
0142c     01 0E 06 F1 | 	add	objptr, #1
01430     07 79 42 FC | 	wrbyte	arg02, objptr
01434     35 0E 86 F1 | 	sub	objptr, #53
01438     00 76 06 F6 | 	mov	arg01, #0
0143c     AC 6F B0 FD | 	call	#__system___getiolock_0223
01440     18 77 02 F6 | 	mov	arg01, result1
01444     80 50 B0 FD | 	call	#__system___lockmem
01448     00 30 06 F6 | 	mov	result1, #0
0144c     08 00 00 FF 
01450     A0 0F 06 F1 | 	add	objptr, ##4512
01454     07 79 02 FB | 	rdlong	arg02, objptr
01458     08 00 00 FF 
0145c     A0 0F 86 F1 | 	sub	objptr, ##4512
01460     00 76 06 F6 | 	mov	arg01, #0
01464     00 7A 06 F6 | 	mov	arg03, #0
01468     0A 7C 06 F6 | 	mov	arg04, #10
0146c     D4 57 B0 FD | 	call	#__system___basic_print_integer
01470     00 76 06 F6 | 	mov	arg01, #0
01474     0A 78 06 F6 | 	mov	arg02, #10
01478     00 7A 06 F6 | 	mov	arg03, #0
0147c     30 57 B0 FD | 	call	#__system___basic_print_char
01480     01 30 06 F6 | 	mov	result1, #1
01484     00 76 06 F6 | 	mov	arg01, #0
01488     60 6F B0 FD | 	call	#__system___getiolock_0223
0148c     18 01 68 FC | 	wrlong	#0, result1
01490     00 30 06 F6 | 	mov	result1, #0
01494                 | LR__0006
01494     01 88 06 F1 | 	add	local03, #1
01498     A4 F7 9F FD | 	jmp	#LR__0002
0149c                 | LR__0007
0149c                 | '     return (char *) &tempname1;
0149c     00 76 06 F6 | 	mov	arg01, #0
014a0     48 6F B0 FD | 	call	#__system___getiolock_0223
014a4     18 77 02 F6 | 	mov	arg01, result1
014a8     1C 50 B0 FD | 	call	#__system___lockmem
014ac     00 30 06 F6 | 	mov	result1, #0
014b0     00 76 06 F6 | 	mov	arg01, #0
014b4     0A 78 06 F6 | 	mov	arg02, #10
014b8     00 7A 06 F6 | 	mov	arg03, #0
014bc     F0 56 B0 FD | 	call	#__system___basic_print_char
014c0     01 30 06 F6 | 	mov	result1, #1
014c4     00 76 06 F6 | 	mov	arg01, #0
014c8     20 6F B0 FD | 	call	#__system___getiolock_0223
014cc     18 01 68 FC | 	wrlong	#0, result1
014d0     00 30 06 F6 | 	mov	result1, #0
014d4     AF F0 03 F6 | 	mov	ptra, fp
014d8     BF 00 A0 FD | 	call	#popregs_
014dc                 | _getinfo_ret
014dc     2D 00 64 FD | 	ret
014e0                 | 
014e0                 | _program
014e0     0C 5A 05 F6 | 	mov	COUNT_, #12
014e4     B0 00 A0 FD | 	call	#pushregs_
014e8     EC 0E 06 F1 | 	add	objptr, #236
014ec     2C 21 B0 FD | 	call	#_retrocog_spin2_start
014f0     02 00 00 FF 
014f4     40 0E 06 F1 | 	add	objptr, ##1088
014f8     07 31 62 FC | 	wrlong	result1, objptr
014fc                 | ' c=rm.start()
014fc                 | ' return c
014fc     02 00 00 FF 
01500     2C 0F 86 F1 | 	sub	objptr, ##1324
01504     40 76 06 F6 | 	mov	arg01, #64
01508     00 78 06 F6 | 	mov	arg02, #0
0150c     60 F3 BF FD | 	call	#_startvideo
01510     64 76 06 F6 | 	mov	arg01, #100
01514     79 00 00 FF 
01518     EE 79 06 F6 | 	mov	arg02, ##@LR__0932
0151c     B8 5C B0 FD | 	call	#__system__String_S
01520     02 00 00 FF 
01524     34 0F 06 F1 | 	add	objptr, ##1332
01528     07 31 62 FC | 	wrlong	result1, objptr
0152c     02 00 00 FF 
01530     34 0F 86 F1 | 	sub	objptr, ##1332
01534     7A 00 00 FF 
01538     D8 84 06 F6 | 	mov	local01, ##@LR__0946
0153c     3D 76 06 F6 | 	mov	arg01, #61
01540     3C 78 06 F6 | 	mov	arg02, #60
01544     3B 7A 06 F6 | 	mov	arg03, #59
01548     3A 7C 06 F6 | 	mov	arg04, #58
0154c     34 67 B0 FD | 	call	#__system___vfs_open_sdcardx
01550     18 79 02 F6 | 	mov	arg02, result1
01554     42 77 02 F6 | 	mov	arg01, local01
01558     04 52 B0 FD | 	call	#__system___mount
0155c     7A 00 00 FF 
01560     DC 76 06 F6 | 	mov	arg01, ##@LR__0947
01564     C8 69 B0 FD | 	call	#__system__chdir
01568     9A 76 06 F6 | 	mov	arg01, #154
0156c     93 78 06 F6 | 	mov	arg02, #147
01570     88 0D B0 FD | 	call	#_hng030rm_spin2_cls
01574     02 00 00 FF 
01578     34 0F 06 F1 | 	add	objptr, ##1332
0157c     38 28 B0 FD | 	call	#_shell_c_cwd2
01580     07 31 62 FC | 	wrlong	result1, objptr
01584     02 00 00 FF 
01588     34 0F 86 F1 | 	sub	objptr, ##1332
0158c                 | '     return (char *) &tempname1;
0158c                 | '     return (char *) &tempname1;
0158c                 | '     return (char *) &tempname1;
0158c                 | '     return (char *) &tempname1;
0158c                 | '     return (char *) &tempname1;
0158c                 | '     return (char *) &tempname1;
0158c                 | '     return (char *) &tempname1;
0158c                 | '     return (char *) &tempname1;
0158c     00 76 06 F6 | 	mov	arg01, #0
01590     58 6E B0 FD | 	call	#__system___getiolock_0223
01594     18 77 02 F6 | 	mov	arg01, result1
01598     2C 4F B0 FD | 	call	#__system___lockmem
0159c     00 30 06 F6 | 	mov	result1, #0
015a0     02 00 00 FF 
015a4     34 0F 06 F1 | 	add	objptr, ##1332
015a8     07 79 02 FB | 	rdlong	arg02, objptr
015ac     02 00 00 FF 
015b0     34 0F 86 F1 | 	sub	objptr, ##1332
015b4     00 76 06 F6 | 	mov	arg01, #0
015b8     00 7A 06 F6 | 	mov	arg03, #0
015bc     3C 56 B0 FD | 	call	#__system___basic_print_string
015c0     00 76 06 F6 | 	mov	arg01, #0
015c4     0A 78 06 F6 | 	mov	arg02, #10
015c8     00 7A 06 F6 | 	mov	arg03, #0
015cc     E0 55 B0 FD | 	call	#__system___basic_print_char
015d0     01 30 06 F6 | 	mov	result1, #1
015d4     00 76 06 F6 | 	mov	arg01, #0
015d8     10 6E B0 FD | 	call	#__system___getiolock_0223
015dc     18 01 68 FC | 	wrlong	#0, result1
015e0     00 30 06 F6 | 	mov	result1, #0
015e4     02 00 00 FF 
015e8     34 0F 06 F1 | 	add	objptr, ##1332
015ec     07 77 02 FB | 	rdlong	arg01, objptr
015f0     02 00 00 FF 
015f4     34 0F 86 F1 | 	sub	objptr, ##1332
015f8     64 78 06 F6 | 	mov	arg02, #100
015fc     78 68 B0 FD | 	call	#__system__getcwd
01600                 | '     return (char *) &tempname1;
01600                 | '     return (char *) &tempname1;
01600                 | '     return (char *) &tempname1;
01600     00 76 06 F6 | 	mov	arg01, #0
01604     E4 6D B0 FD | 	call	#__system___getiolock_0223
01608     18 77 02 F6 | 	mov	arg01, result1
0160c     B8 4E B0 FD | 	call	#__system___lockmem
01610     00 30 06 F6 | 	mov	result1, #0
01614     02 00 00 FF 
01618     34 0F 06 F1 | 	add	objptr, ##1332
0161c     07 79 02 FB | 	rdlong	arg02, objptr
01620     02 00 00 FF 
01624     34 0F 86 F1 | 	sub	objptr, ##1332
01628     00 76 06 F6 | 	mov	arg01, #0
0162c     00 7A 06 F6 | 	mov	arg03, #0
01630     C8 55 B0 FD | 	call	#__system___basic_print_string
01634     00 76 06 F6 | 	mov	arg01, #0
01638     0A 78 06 F6 | 	mov	arg02, #10
0163c     00 7A 06 F6 | 	mov	arg03, #0
01640     6C 55 B0 FD | 	call	#__system___basic_print_char
01644     01 30 06 F6 | 	mov	result1, #1
01648     00 76 06 F6 | 	mov	arg01, #0
0164c     9C 6D B0 FD | 	call	#__system___getiolock_0223
01650     18 01 68 FC | 	wrlong	#0, result1
01654     00 30 06 F6 | 	mov	result1, #0
01658     09 00 00 FF 
0165c     88 77 06 F6 | 	mov	arg01, ##5000
01660     2C 50 B0 FD | 	call	#__system___waitms
01664     9A 76 06 F6 | 	mov	arg01, #154
01668     93 78 06 F6 | 	mov	arg02, #147
0166c     8C 0C B0 FD | 	call	#_hng030rm_spin2_cls
01670     02 00 00 FF 
01674     38 0F 06 F1 | 	add	objptr, ##1336
01678     07 01 69 FC | 	wrlong	#128, objptr
0167c     04 0E 06 F1 | 	add	objptr, #4
01680     07 7B 68 FC | 	wrlong	#61, objptr
01684     04 0E 06 F1 | 	add	objptr, #4
01688     07 79 68 FC | 	wrlong	#60, objptr
0168c     04 0E 06 F1 | 	add	objptr, #4
01690     07 77 68 FC | 	wrlong	#59, objptr
01694     04 0E 06 F1 | 	add	objptr, #4
01698     07 75 68 FC | 	wrlong	#58, objptr
0169c     04 0E 06 F1 | 	add	objptr, #4
016a0     07 07 68 FC | 	wrlong	#3, objptr
016a4     7A 00 00 FF 
016a8     E0 86 06 F6 | 	mov	local02, ##@LR__0948
016ac     01 00 00 FF 
016b0     AC 0F 06 F1 | 	add	objptr, ##940
016b4     07 87 62 FC | 	wrlong	local02, objptr
016b8     04 00 00 FF 
016bc     F8 0E 86 F1 | 	sub	objptr, ##2296
016c0     0C 77 02 F6 | 	mov	arg01, ptr__dat__
016c4     EC F1 BF FD | 	call	#_addr
016c8     04 00 00 FF 
016cc     FC 0E 06 F1 | 	add	objptr, ##2300
016d0     07 31 62 FC | 	wrlong	result1, objptr
016d4     18 77 02 F6 | 	mov	arg01, result1
016d8     00 78 06 F6 | 	mov	arg02, #0
016dc     01 00 00 FF 
016e0     AC 0F 86 F1 | 	sub	objptr, ##940
016e4     04 27 B0 FD | 	call	#_trackerplayer_spin2_initModule
016e8     01 78 06 F6 | 	mov	arg02, #1
016ec                 | ' 
016ec                 | ' ''---------- Set the (x,y) position of cursor
016ec                 | ' 
016ec                 | ' cursor_x:=x
016ec     02 00 00 FF 
016f0     1C 0F 86 F1 | 	sub	objptr, ##1308
016f4     07 03 48 FC | 	wrbyte	#1, objptr
016f8                 | ' cursor_y:=y
016f8     01 0E 06 F1 | 	add	objptr, #1
016fc     07 03 48 FC | 	wrbyte	#1, objptr
01700                 | '     return (char *) &tempname1;
01700                 | '     return (char *) &tempname1;
01700                 | '     return (char *) &tempname1;
01700                 | '     return (char *) &tempname1;
01700                 | '     return (char *) &tempname1;
01700                 | '     return (char *) &tempname1;
01700                 | '     return (char *) &tempname1;
01700     04 00 00 FF 
01704     C7 0E 06 F1 | 	add	objptr, ##2247
01708     07 89 02 FB | 	rdlong	local03, objptr
0170c     44 8B 02 F6 | 	mov	local04, local03
01710     04 00 00 FF 
01714     FC 0E 86 F1 | 	sub	objptr, ##2300
01718     14 8A 06 F1 | 	add	local04, #20
0171c                 | LR__0008
0171c     45 89 5A F2 | 	cmps	local03, local04 wcz
01720     40 00 90 3D |  if_ae	jmp	#LR__0009
01724     00 76 06 F6 | 	mov	arg01, #0
01728     C0 6C B0 FD | 	call	#__system___getiolock_0223
0172c     18 77 02 F6 | 	mov	arg01, result1
01730     94 4D B0 FD | 	call	#__system___lockmem
01734                 | ' asm
01734     44 31 C2 FA | 	rdbyte	result1, local03
01738                 | ' return r
01738     18 79 02 F6 | 	mov	arg02, result1
0173c     07 78 46 F7 | 	zerox	arg02, #7
01740     00 76 06 F6 | 	mov	arg01, #0
01744     00 7A 06 F6 | 	mov	arg03, #0
01748     64 54 B0 FD | 	call	#__system___basic_print_char
0174c     00 76 06 F6 | 	mov	arg01, #0
01750     98 6C B0 FD | 	call	#__system___getiolock_0223
01754     18 01 68 FC | 	wrlong	#0, result1
01758     00 30 06 F6 | 	mov	result1, #0
0175c     01 88 06 F1 | 	add	local03, #1
01760     B8 FF 9F FD | 	jmp	#LR__0008
01764                 | LR__0009
01764     04 00 00 FF 
01768     00 0F 06 F1 | 	add	objptr, ##2304
0176c     07 1F 68 FC | 	wrlong	#15, objptr
01770                 | '     return (char *) &tempname1;
01770     00 86 06 F6 | 	mov	local02, #0
01774     04 0E 86 F1 | 	sub	objptr, #4
01778     07 77 02 FB | 	rdlong	arg01, objptr
0177c     02 00 00 FF 
01780     38 76 06 F1 | 	add	arg01, ##1080
01784                 | ' asm
01784     3B 85 C2 FA | 	rdbyte	local01, arg01
01788                 | ' return r
01788     07 84 46 F7 | 	zerox	local01, #7
0178c     4D 84 0E F2 | 	cmp	local01, #77 wz
01790     01 86 66 A6 |  if_e	neg	local02, #1
01794     00 8C 06 F6 | 	mov	local05, #0
01798     07 77 02 FB | 	rdlong	arg01, objptr
0179c     04 00 00 FF 
017a0     FC 0E 86 F1 | 	sub	objptr, ##2300
017a4     02 00 00 FF 
017a8     3A 76 06 F1 | 	add	arg01, ##1082
017ac                 | ' asm
017ac     3B 31 C2 FA | 	rdbyte	result1, arg01
017b0                 | ' return r
017b0     18 8F 02 F6 | 	mov	local06, result1
017b4     07 8E 46 F7 | 	zerox	local06, #7
017b8     4B 8E 0E F2 | 	cmp	local06, #75 wz
017bc     01 8C 66 A6 |  if_e	neg	local05, #1
017c0     46 87 CA F7 | 	test	local02, local05 wz
017c4     04 00 00 5F 
017c8     00 0F 06 51 |  if_ne	add	objptr, ##2304
017cc     07 3F 68 5C |  if_ne	wrlong	#31, objptr
017d0     04 00 00 5F 
017d4     00 0F 86 51 |  if_ne	sub	objptr, ##2304
017d8     02 78 06 F6 | 	mov	arg02, #2
017dc                 | ' 
017dc                 | ' ''---------- Set the (x,y) position of cursor
017dc                 | ' 
017dc                 | ' cursor_x:=x
017dc     34 0E 06 F1 | 	add	objptr, #52
017e0     07 03 48 FC | 	wrbyte	#1, objptr
017e4                 | ' cursor_y:=y
017e4     01 0E 06 F1 | 	add	objptr, #1
017e8     07 05 48 FC | 	wrbyte	#2, objptr
017ec     35 0E 86 F1 | 	sub	objptr, #53
017f0                 | '     return (char *) &tempname1;
017f0     00 76 06 F6 | 	mov	arg01, #0
017f4     F4 6B B0 FD | 	call	#__system___getiolock_0223
017f8     18 77 02 F6 | 	mov	arg01, result1
017fc     C8 4C B0 FD | 	call	#__system___lockmem
01800     00 30 06 F6 | 	mov	result1, #0
01804     04 00 00 FF 
01808     00 0F 06 F1 | 	add	objptr, ##2304
0180c     07 79 02 FB | 	rdlong	arg02, objptr
01810     04 00 00 FF 
01814     00 0F 86 F1 | 	sub	objptr, ##2304
01818     00 76 06 F6 | 	mov	arg01, #0
0181c     00 7A 06 F6 | 	mov	arg03, #0
01820     0A 7C 06 F6 | 	mov	arg04, #10
01824     1C 54 B0 FD | 	call	#__system___basic_print_integer
01828     7A 00 00 FF 
0182c     F7 78 06 F6 | 	mov	arg02, ##@LR__0949
01830     00 76 06 F6 | 	mov	arg01, #0
01834     00 7A 06 F6 | 	mov	arg03, #0
01838     C0 53 B0 FD | 	call	#__system___basic_print_string
0183c     7A 00 00 FF 
01840     F9 78 06 F6 | 	mov	arg02, ##@LR__0950
01844     00 76 06 F6 | 	mov	arg01, #0
01848     00 7A 06 F6 | 	mov	arg03, #0
0184c     AC 53 B0 FD | 	call	#__system___basic_print_string
01850     00 76 06 F6 | 	mov	arg01, #0
01854     0A 78 06 F6 | 	mov	arg02, #10
01858     00 7A 06 F6 | 	mov	arg03, #0
0185c     50 53 B0 FD | 	call	#__system___basic_print_char
01860     01 30 06 F6 | 	mov	result1, #1
01864     00 76 06 F6 | 	mov	arg01, #0
01868     80 6B B0 FD | 	call	#__system___getiolock_0223
0186c     18 01 68 FC | 	wrlong	#0, result1
01870     00 30 06 F6 | 	mov	result1, #0
01874     04 00 00 FF 
01878     FC 0E 06 F1 | 	add	objptr, ##2300
0187c     07 77 02 FB | 	rdlong	arg01, objptr
01880     04 0E 06 F1 | 	add	objptr, #4
01884     07 79 02 FB | 	rdlong	arg02, objptr
01888     04 00 00 FF 
0188c     00 0F 86 F1 | 	sub	objptr, ##2304
01890     BC F2 BF FD | 	call	#_getinfo
01894     03 00 00 FF 
01898     4C 0F 06 F1 | 	add	objptr, ##1868
0189c     B4 47 B0 FD | 	call	#_audio019_spin2_start
018a0     19 85 02 F6 | 	mov	local01, result2
018a4     A4 0F 06 F1 | 	add	objptr, #420
018a8     07 31 62 FC | 	wrlong	result1, objptr
018ac     04 0E 06 F1 | 	add	objptr, #4
018b0     07 85 62 FC | 	wrlong	local01, objptr
018b4     10 0E 06 F1 | 	add	objptr, #16
018b8     07 01 68 FC | 	wrlong	#0, objptr
018bc     04 0E 06 F1 | 	add	objptr, #4
018c0     07 01 68 FC | 	wrlong	#0, objptr
018c4     04 0E 06 F1 | 	add	objptr, #4
018c8     07 01 68 FC | 	wrlong	#0, objptr
018cc     04 0E 06 F1 | 	add	objptr, #4
018d0     07 01 68 FC | 	wrlong	#0, objptr
018d4     04 00 00 FF 
018d8     F4 0E 86 F1 | 	sub	objptr, ##2292
018dc     07 87 02 FB | 	rdlong	local02, objptr
018e0     08 00 00 FF 
018e4     6C 0F 06 F1 | 	add	objptr, ##4460
018e8     07 87 62 FC | 	wrlong	local02, objptr
018ec     08 00 00 FF 
018f0     88 0F 86 F1 | 	sub	objptr, ##4488
018f4                 | '     return (char *) &tempname1;
018f4                 | '     return (char *) &tempname1;
018f4     00 88 06 F6 | 	mov	local03, #0
018f8     50 E7 9F FE | 	loc	pa,	#(@LR__0011-@LR__0010)
018fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
01900                 | LR__0010
01900     44 85 02 F6 | 	mov	local01, local03
01904     02 84 66 F0 | 	shl	local01, #2
01908     04 00 00 FF 
0190c     14 0F 06 F1 | 	add	objptr, ##2324
01910     07 85 02 F1 | 	add	local01, objptr
01914     04 00 00 FF 
01918     74 0E 06 F1 | 	add	objptr, ##2164
0191c     07 77 02 FB | 	rdlong	arg01, objptr
01920     08 00 00 FF 
01924     88 0F 86 F1 | 	sub	objptr, ##4488
01928     44 91 02 F6 | 	mov	local07, local03
0192c     02 90 66 F0 | 	shl	local07, #2
01930     48 77 02 F1 | 	add	arg01, local07
01934                 | ' asm
01934     3B 31 02 FB | 	rdlong	result1, arg01
01938                 | ' return r
01938     42 31 62 FC | 	wrlong	result1, local01
0193c     01 88 06 F1 | 	add	local03, #1
01940     01 00 00 FF 
01944     1C 88 5E F2 | 	cmps	local03, ##540 wcz
01948     B4 FF 9F CD |  if_b	jmp	#LR__0010
0194c                 | LR__0011
0194c                 | '     return (char *) &tempname1;
0194c                 | '     return (char *) &tempname1;
0194c                 | LR__0012
0194c     01 76 06 F6 | 	mov	arg01, #1
01950     10 09 B0 FD | 	call	#_hng030rm_spin2_waitvbl
01954     02 00 00 FF 
01958     50 0F 06 F1 | 	add	objptr, ##1360
0195c     6C 2B B0 FD | 	call	#_trackerplayer_spin2_tick
01960     02 00 00 FF 
01964     50 0F 86 F1 | 	sub	objptr, ##1360
01968     1B 30 62 FD | 	getrnd	result1
0196c     18 D9 02 F6 | 	mov	muldiva_, result1
01970     01 00 00 FF 
01974     1C DA 06 F6 | 	mov	muldivb_, ##540
01978     CC 00 A0 FD | 	call	#unsdivide_
0197c     08 00 00 FF 
01980     8C 0F 06 F1 | 	add	objptr, ##4492
01984     07 D9 62 FC | 	wrlong	muldiva_, objptr
01988                 | '     return (char *) &tempname1;
01988                 | '     return (char *) &tempname1;
01988                 | '     return (char *) &tempname1;
01988                 | '     return (char *) &tempname1;
01988     05 00 00 FF 
0198c     46 0E 86 F1 | 	sub	objptr, ##2630
01990     07 87 C2 FA | 	rdbyte	local02, objptr
01994     BE 0F 06 F1 | 	add	objptr, #446
01998     07 93 02 FB | 	rdlong	local08, objptr
0199c     04 00 00 FF 
019a0     04 0F 86 F1 | 	sub	objptr, ##2308
019a4     49 87 0A F2 | 	cmp	local02, local08 wz
019a8     8C 00 90 AD |  if_e	jmp	#LR__0013
019ac     03 00 00 FF 
019b0     46 0F 06 F1 | 	add	objptr, ##1862
019b4     07 87 C2 FA | 	rdbyte	local02, objptr
019b8     BE 0F 06 F1 | 	add	objptr, #446
019bc     07 87 62 FC | 	wrlong	local02, objptr
019c0     10 0E 86 F1 | 	sub	objptr, #16
019c4     07 77 02 FB | 	rdlong	arg01, objptr
019c8     08 76 06 F1 | 	add	arg01, #8
019cc     01 00 00 FF 
019d0     FD 0E 86 F1 | 	sub	objptr, ##765
019d4     07 79 02 FB | 	rdlong	arg02, objptr
019d8     1E 78 26 F4 | 	bith	arg02, #30
019dc                 | ' asm
019dc     3B 79 62 FC | 	wrlong	arg02, arg01
019e0     01 00 00 FF 
019e4     FD 0E 06 F1 | 	add	objptr, ##765
019e8     07 77 02 FB | 	rdlong	arg01, objptr
019ec     0C 76 06 F1 | 	add	arg01, #12
019f0     01 00 00 FF 
019f4     E9 0E 86 F1 | 	sub	objptr, ##745
019f8     07 79 E2 FA | 	rdword	arg02, objptr
019fc     08 0E 06 F1 | 	add	objptr, #8
01a00     07 91 02 FB | 	rdlong	local07, objptr
01a04     48 79 82 F1 | 	sub	arg02, local07
01a08                 | ' asm
01a08     3B 79 62 FC | 	wrlong	arg02, arg01
01a0c     01 00 00 FF 
01a10     E1 0E 06 F1 | 	add	objptr, ##737
01a14     07 77 02 FB | 	rdlong	arg01, objptr
01a18     10 76 06 F1 | 	add	arg01, #16
01a1c     01 00 00 FF 
01a20     E9 0E 86 F1 | 	sub	objptr, ##745
01a24     07 79 E2 FA | 	rdword	arg02, objptr
01a28     03 00 00 FF 
01a2c     0B 0E 86 F1 | 	sub	objptr, ##1547
01a30     0F 78 46 F7 | 	zerox	arg02, #15
01a34                 | ' asm
01a34     3B 79 62 FC | 	wrlong	arg02, arg01
01a38                 | LR__0013
01a38     04 00 00 FF 
01a3c     F4 0E 06 F1 | 	add	objptr, ##2292
01a40     07 77 02 FB | 	rdlong	arg01, objptr
01a44     14 76 06 F1 | 	add	arg01, #20
01a48     01 00 00 FF 
01a4c     A5 0E 86 F1 | 	sub	objptr, ##677
01a50     07 95 02 FB | 	rdlong	local09, objptr
01a54     10 0E 06 F1 | 	add	objptr, #16
01a58     07 91 02 FB | 	rdlong	local07, objptr
01a5c     48 95 02 F1 | 	add	local09, local07
01a60     27 0F 86 F1 | 	sub	objptr, #295
01a64     07 97 02 FB | 	rdlong	local10, objptr
01a68     4B 95 02 FD | 	qmul	local09, local10
01a6c     18 78 62 FD | 	getqx	arg02
01a70                 | ' asm
01a70     3B 79 52 FC | 	wrword	arg02, arg01
01a74     01 00 00 FF 
01a78     BC 0F 06 F1 | 	add	objptr, ##956
01a7c     07 77 02 FB | 	rdlong	arg01, objptr
01a80     16 76 06 F1 | 	add	arg01, #22
01a84                 | ' asm
01a84     0C 00 80 FF 
01a88     3B 01 58 FC | 	wrword	##6144, arg01
01a8c     07 77 02 FB | 	rdlong	arg01, objptr
01a90     18 76 06 F1 | 	add	arg01, #24
01a94     01 00 00 FF 
01a98     C5 0E 86 F1 | 	sub	objptr, ##709
01a9c     07 79 02 FB | 	rdlong	arg02, objptr
01aa0     10 0E 06 F1 | 	add	objptr, #16
01aa4     07 91 02 FB | 	rdlong	local07, objptr
01aa8     48 79 02 F1 | 	add	arg02, local07
01aac                 | ' asm
01aac     3B 79 52 FC | 	wrword	arg02, arg01
01ab0     01 00 00 FF 
01ab4     B5 0E 06 F1 | 	add	objptr, ##693
01ab8     07 77 02 FB | 	rdlong	arg01, objptr
01abc     1A 76 06 F1 | 	add	arg01, #26
01ac0                 | ' asm
01ac0     3B 03 58 FC | 	wrword	#1, arg01
01ac4                 | '     return (char *) &tempname1;
01ac4                 | '     return (char *) &tempname1;
01ac4                 | '     return (char *) &tempname1;
01ac4                 | '     return (char *) &tempname1;
01ac4                 | '     return (char *) &tempname1;
01ac4                 | '     return (char *) &tempname1;
01ac4                 | '     return (char *) &tempname1;
01ac4                 | '     return (char *) &tempname1;
01ac4                 | '     return (char *) &tempname1;
01ac4     AD 0F 86 F1 | 	sub	objptr, #429
01ac8     07 87 C2 FA | 	rdbyte	local02, objptr
01acc     C1 0F 06 F1 | 	add	objptr, #449
01ad0     07 93 02 FB | 	rdlong	local08, objptr
01ad4     04 00 00 FF 
01ad8     08 0F 86 F1 | 	sub	objptr, ##2312
01adc     49 87 0A F2 | 	cmp	local02, local08 wz
01ae0     9C 00 90 AD |  if_e	jmp	#LR__0014
01ae4     03 00 00 FF 
01ae8     47 0F 06 F1 | 	add	objptr, ##1863
01aec     07 87 C2 FA | 	rdbyte	local02, objptr
01af0     C1 0F 06 F1 | 	add	objptr, #449
01af4     07 87 62 FC | 	wrlong	local02, objptr
01af8     14 0E 86 F1 | 	sub	objptr, #20
01afc     07 77 02 FB | 	rdlong	arg01, objptr
01b00     28 76 06 F1 | 	add	arg01, #40
01b04     01 00 00 FF 
01b08     F9 0E 86 F1 | 	sub	objptr, ##761
01b0c     07 79 02 FB | 	rdlong	arg02, objptr
01b10     1E 78 26 F4 | 	bith	arg02, #30
01b14                 | ' asm
01b14     3B 79 62 FC | 	wrlong	arg02, arg01
01b18     20 76 06 F6 | 	mov	arg01, #32
01b1c     01 00 00 FF 
01b20     F9 0E 06 F1 | 	add	objptr, ##761
01b24     07 85 02 FB | 	rdlong	local01, objptr
01b28     42 77 02 F1 | 	add	arg01, local01
01b2c     0C 76 06 F1 | 	add	arg01, #12
01b30     01 00 00 FF 
01b34     E7 0E 86 F1 | 	sub	objptr, ##743
01b38     07 79 E2 FA | 	rdword	arg02, objptr
01b3c     0A 0E 06 F1 | 	add	objptr, #10
01b40     07 8D 02 FB | 	rdlong	local05, objptr
01b44     46 79 82 F1 | 	sub	arg02, local05
01b48                 | ' asm
01b48     3B 79 62 FC | 	wrlong	arg02, arg01
01b4c     20 76 06 F6 | 	mov	arg01, #32
01b50     01 00 00 FF 
01b54     DD 0E 06 F1 | 	add	objptr, ##733
01b58     07 85 02 FB | 	rdlong	local01, objptr
01b5c     42 77 02 F1 | 	add	arg01, local01
01b60     10 76 06 F1 | 	add	arg01, #16
01b64     01 00 00 FF 
01b68     E7 0E 86 F1 | 	sub	objptr, ##743
01b6c     07 79 E2 FA | 	rdword	arg02, objptr
01b70     03 00 00 FF 
01b74     0D 0E 86 F1 | 	sub	objptr, ##1549
01b78     0F 78 46 F7 | 	zerox	arg02, #15
01b7c                 | ' asm
01b7c     3B 79 62 FC | 	wrlong	arg02, arg01
01b80                 | LR__0014
01b80     20 76 06 F6 | 	mov	arg01, #32
01b84     04 00 00 FF 
01b88     F4 0E 06 F1 | 	add	objptr, ##2292
01b8c     07 85 02 FB | 	rdlong	local01, objptr
01b90     42 77 02 F1 | 	add	arg01, local01
01b94     14 76 06 F1 | 	add	arg01, #20
01b98     01 00 00 FF 
01b9c     A1 0E 86 F1 | 	sub	objptr, ##673
01ba0     07 99 02 FB | 	rdlong	local11, objptr
01ba4     10 0E 06 F1 | 	add	objptr, #16
01ba8     07 8D 02 FB | 	rdlong	local05, objptr
01bac     46 99 02 F1 | 	add	local11, local05
01bb0     2B 0F 86 F1 | 	sub	objptr, #299
01bb4     07 9B 02 FB | 	rdlong	local12, objptr
01bb8     4D 99 02 FD | 	qmul	local11, local12
01bbc     18 78 62 FD | 	getqx	arg02
01bc0                 | ' asm
01bc0     3B 79 52 FC | 	wrword	arg02, arg01
01bc4     20 76 06 F6 | 	mov	arg01, #32
01bc8     01 00 00 FF 
01bcc     BC 0F 06 F1 | 	add	objptr, ##956
01bd0     07 85 02 FB | 	rdlong	local01, objptr
01bd4     42 77 02 F1 | 	add	arg01, local01
01bd8     16 76 06 F1 | 	add	arg01, #22
01bdc                 | ' asm
01bdc     14 00 80 FF 
01be0     3B 01 58 FC | 	wrword	##10240, arg01
01be4     20 76 06 F6 | 	mov	arg01, #32
01be8     07 85 02 FB | 	rdlong	local01, objptr
01bec     42 77 02 F1 | 	add	arg01, local01
01bf0     18 76 06 F1 | 	add	arg01, #24
01bf4     01 00 00 FF 
01bf8     C1 0E 86 F1 | 	sub	objptr, ##705
01bfc     07 79 02 FB | 	rdlong	arg02, objptr
01c00     10 0E 06 F1 | 	add	objptr, #16
01c04     07 8D 02 FB | 	rdlong	local05, objptr
01c08     46 79 02 F1 | 	add	arg02, local05
01c0c                 | ' asm
01c0c     3B 79 52 FC | 	wrword	arg02, arg01
01c10     20 76 06 F6 | 	mov	arg01, #32
01c14     01 00 00 FF 
01c18     B1 0E 06 F1 | 	add	objptr, ##689
01c1c     07 85 02 FB | 	rdlong	local01, objptr
01c20     42 77 02 F1 | 	add	arg01, local01
01c24     1A 76 06 F1 | 	add	arg01, #26
01c28                 | ' asm
01c28     3B 03 58 FC | 	wrword	#1, arg01
01c2c                 | '     return (char *) &tempname1;
01c2c                 | '     return (char *) &tempname1;
01c2c                 | '     return (char *) &tempname1;
01c2c                 | '     return (char *) &tempname1;
01c2c                 | '     return (char *) &tempname1;
01c2c                 | '     return (char *) &tempname1;
01c2c                 | '     return (char *) &tempname1;
01c2c     AC 0F 86 F1 | 	sub	objptr, #428
01c30     07 87 C2 FA | 	rdbyte	local02, objptr
01c34     C4 0F 06 F1 | 	add	objptr, #452
01c38     07 93 02 FB | 	rdlong	local08, objptr
01c3c     04 00 00 FF 
01c40     0C 0F 86 F1 | 	sub	objptr, ##2316
01c44     49 87 0A F2 | 	cmp	local02, local08 wz
01c48     9C 00 90 AD |  if_e	jmp	#LR__0015
01c4c     03 00 00 FF 
01c50     48 0F 06 F1 | 	add	objptr, ##1864
01c54     07 87 C2 FA | 	rdbyte	local02, objptr
01c58     C4 0F 06 F1 | 	add	objptr, #452
01c5c     07 87 62 FC | 	wrlong	local02, objptr
01c60     18 0E 86 F1 | 	sub	objptr, #24
01c64     07 77 02 FB | 	rdlong	arg01, objptr
01c68     48 76 06 F1 | 	add	arg01, #72
01c6c     01 00 00 FF 
01c70     F5 0E 86 F1 | 	sub	objptr, ##757
01c74     07 79 02 FB | 	rdlong	arg02, objptr
01c78     1E 78 26 F4 | 	bith	arg02, #30
01c7c                 | ' asm
01c7c     3B 79 62 FC | 	wrlong	arg02, arg01
01c80     40 76 06 F6 | 	mov	arg01, #64
01c84     01 00 00 FF 
01c88     F5 0E 06 F1 | 	add	objptr, ##757
01c8c     07 85 02 FB | 	rdlong	local01, objptr
01c90     42 77 02 F1 | 	add	arg01, local01
01c94     0C 76 06 F1 | 	add	arg01, #12
01c98     01 00 00 FF 
01c9c     E5 0E 86 F1 | 	sub	objptr, ##741
01ca0     07 79 E2 FA | 	rdword	arg02, objptr
01ca4     0C 0E 06 F1 | 	add	objptr, #12
01ca8     07 8D 02 FB | 	rdlong	local05, objptr
01cac     46 79 82 F1 | 	sub	arg02, local05
01cb0                 | ' asm
01cb0     3B 79 62 FC | 	wrlong	arg02, arg01
01cb4     40 76 06 F6 | 	mov	arg01, #64
01cb8     01 00 00 FF 
01cbc     D9 0E 06 F1 | 	add	objptr, ##729
01cc0     07 85 02 FB | 	rdlong	local01, objptr
01cc4     42 77 02 F1 | 	add	arg01, local01
01cc8     10 76 06 F1 | 	add	arg01, #16
01ccc     01 00 00 FF 
01cd0     E5 0E 86 F1 | 	sub	objptr, ##741
01cd4     07 79 E2 FA | 	rdword	arg02, objptr
01cd8     03 00 00 FF 
01cdc     0F 0E 86 F1 | 	sub	objptr, ##1551
01ce0     0F 78 46 F7 | 	zerox	arg02, #15
01ce4                 | ' asm
01ce4     3B 79 62 FC | 	wrlong	arg02, arg01
01ce8                 | LR__0015
01ce8     40 76 06 F6 | 	mov	arg01, #64
01cec     04 00 00 FF 
01cf0     F4 0E 06 F1 | 	add	objptr, ##2292
01cf4     07 85 02 FB | 	rdlong	local01, objptr
01cf8     42 77 02 F1 | 	add	arg01, local01
01cfc     14 76 06 F1 | 	add	arg01, #20
01d00     01 00 00 FF 
01d04     9D 0E 86 F1 | 	sub	objptr, ##669
01d08     07 99 02 FB | 	rdlong	local11, objptr
01d0c     10 0E 06 F1 | 	add	objptr, #16
01d10     07 8D 02 FB | 	rdlong	local05, objptr
01d14     46 99 02 F1 | 	add	local11, local05
01d18     2F 0F 86 F1 | 	sub	objptr, #303
01d1c     07 9B 02 FB | 	rdlong	local12, objptr
01d20     4D 99 02 FD | 	qmul	local11, local12
01d24     18 78 62 FD | 	getqx	arg02
01d28                 | ' asm
01d28     3B 79 52 FC | 	wrword	arg02, arg01
01d2c     40 76 06 F6 | 	mov	arg01, #64
01d30     01 00 00 FF 
01d34     BC 0F 06 F1 | 	add	objptr, ##956
01d38     07 85 02 FB | 	rdlong	local01, objptr
01d3c     42 77 02 F1 | 	add	arg01, local01
01d40     16 76 06 F1 | 	add	arg01, #22
01d44                 | ' asm
01d44     14 00 80 FF 
01d48     3B 01 58 FC | 	wrword	##10240, arg01
01d4c     40 76 06 F6 | 	mov	arg01, #64
01d50     07 85 02 FB | 	rdlong	local01, objptr
01d54     42 77 02 F1 | 	add	arg01, local01
01d58     18 76 06 F1 | 	add	arg01, #24
01d5c     01 00 00 FF 
01d60     BD 0E 86 F1 | 	sub	objptr, ##701
01d64     07 79 02 FB | 	rdlong	arg02, objptr
01d68     10 0E 06 F1 | 	add	objptr, #16
01d6c     07 8D 02 FB | 	rdlong	local05, objptr
01d70     46 79 02 F1 | 	add	arg02, local05
01d74                 | ' asm
01d74     3B 79 52 FC | 	wrword	arg02, arg01
01d78     40 76 06 F6 | 	mov	arg01, #64
01d7c     01 00 00 FF 
01d80     AD 0E 06 F1 | 	add	objptr, ##685
01d84     07 85 02 FB | 	rdlong	local01, objptr
01d88     42 77 02 F1 | 	add	arg01, local01
01d8c     1A 76 06 F1 | 	add	arg01, #26
01d90                 | ' asm
01d90     3B 03 58 FC | 	wrword	#1, arg01
01d94                 | '     return (char *) &tempname1;
01d94                 | '     return (char *) &tempname1;
01d94                 | '     return (char *) &tempname1;
01d94                 | '     return (char *) &tempname1;
01d94                 | '     return (char *) &tempname1;
01d94                 | '     return (char *) &tempname1;
01d94                 | '     return (char *) &tempname1;
01d94     AB 0F 86 F1 | 	sub	objptr, #427
01d98     07 87 C2 FA | 	rdbyte	local02, objptr
01d9c     C7 0F 06 F1 | 	add	objptr, #455
01da0     07 93 02 FB | 	rdlong	local08, objptr
01da4     04 00 00 FF 
01da8     10 0F 86 F1 | 	sub	objptr, ##2320
01dac     49 87 0A F2 | 	cmp	local02, local08 wz
01db0     9C 00 90 AD |  if_e	jmp	#LR__0016
01db4     03 00 00 FF 
01db8     49 0F 06 F1 | 	add	objptr, ##1865
01dbc     07 87 C2 FA | 	rdbyte	local02, objptr
01dc0     C7 0F 06 F1 | 	add	objptr, #455
01dc4     07 87 62 FC | 	wrlong	local02, objptr
01dc8     1C 0E 86 F1 | 	sub	objptr, #28
01dcc     07 77 02 FB | 	rdlong	arg01, objptr
01dd0     68 76 06 F1 | 	add	arg01, #104
01dd4     01 00 00 FF 
01dd8     F1 0E 86 F1 | 	sub	objptr, ##753
01ddc     07 79 02 FB | 	rdlong	arg02, objptr
01de0     1E 78 26 F4 | 	bith	arg02, #30
01de4                 | ' asm
01de4     3B 79 62 FC | 	wrlong	arg02, arg01
01de8     60 76 06 F6 | 	mov	arg01, #96
01dec     01 00 00 FF 
01df0     F1 0E 06 F1 | 	add	objptr, ##753
01df4     07 85 02 FB | 	rdlong	local01, objptr
01df8     42 77 02 F1 | 	add	arg01, local01
01dfc     0C 76 06 F1 | 	add	arg01, #12
01e00     01 00 00 FF 
01e04     E3 0E 86 F1 | 	sub	objptr, ##739
01e08     07 79 E2 FA | 	rdword	arg02, objptr
01e0c     0E 0E 06 F1 | 	add	objptr, #14
01e10     07 8D 02 FB | 	rdlong	local05, objptr
01e14     46 79 82 F1 | 	sub	arg02, local05
01e18                 | ' asm
01e18     3B 79 62 FC | 	wrlong	arg02, arg01
01e1c     60 76 06 F6 | 	mov	arg01, #96
01e20     01 00 00 FF 
01e24     D5 0E 06 F1 | 	add	objptr, ##725
01e28     07 85 02 FB | 	rdlong	local01, objptr
01e2c     42 77 02 F1 | 	add	arg01, local01
01e30     10 76 06 F1 | 	add	arg01, #16
01e34     01 00 00 FF 
01e38     E3 0E 86 F1 | 	sub	objptr, ##739
01e3c     07 79 E2 FA | 	rdword	arg02, objptr
01e40     03 00 00 FF 
01e44     11 0E 86 F1 | 	sub	objptr, ##1553
01e48     0F 78 46 F7 | 	zerox	arg02, #15
01e4c                 | ' asm
01e4c     3B 79 62 FC | 	wrlong	arg02, arg01
01e50                 | LR__0016
01e50     60 76 06 F6 | 	mov	arg01, #96
01e54     04 00 00 FF 
01e58     F4 0E 06 F1 | 	add	objptr, ##2292
01e5c     07 85 02 FB | 	rdlong	local01, objptr
01e60     42 77 02 F1 | 	add	arg01, local01
01e64     14 76 06 F1 | 	add	arg01, #20
01e68     01 00 00 FF 
01e6c     99 0E 86 F1 | 	sub	objptr, ##665
01e70     07 99 02 FB | 	rdlong	local11, objptr
01e74     10 0E 06 F1 | 	add	objptr, #16
01e78     07 8D 02 FB | 	rdlong	local05, objptr
01e7c     46 99 02 F1 | 	add	local11, local05
01e80     33 0F 86 F1 | 	sub	objptr, #307
01e84     07 9B 02 FB | 	rdlong	local12, objptr
01e88     4D 99 02 FD | 	qmul	local11, local12
01e8c     18 78 62 FD | 	getqx	arg02
01e90                 | ' asm
01e90     3B 79 52 FC | 	wrword	arg02, arg01
01e94     60 76 06 F6 | 	mov	arg01, #96
01e98     01 00 00 FF 
01e9c     BC 0F 06 F1 | 	add	objptr, ##956
01ea0     07 85 02 FB | 	rdlong	local01, objptr
01ea4     42 77 02 F1 | 	add	arg01, local01
01ea8     16 76 06 F1 | 	add	arg01, #22
01eac                 | ' asm
01eac     0C 00 80 FF 
01eb0     3B 01 58 FC | 	wrword	##6144, arg01
01eb4     60 76 06 F6 | 	mov	arg01, #96
01eb8     07 85 02 FB | 	rdlong	local01, objptr
01ebc     42 77 02 F1 | 	add	arg01, local01
01ec0     18 76 06 F1 | 	add	arg01, #24
01ec4     01 00 00 FF 
01ec8     B9 0E 86 F1 | 	sub	objptr, ##697
01ecc     07 79 02 FB | 	rdlong	arg02, objptr
01ed0     10 0E 06 F1 | 	add	objptr, #16
01ed4     07 8D 02 FB | 	rdlong	local05, objptr
01ed8     46 79 02 F1 | 	add	arg02, local05
01edc                 | ' asm
01edc     3B 79 52 FC | 	wrword	arg02, arg01
01ee0     60 76 06 F6 | 	mov	arg01, #96
01ee4     01 00 00 FF 
01ee8     A9 0E 06 F1 | 	add	objptr, ##681
01eec     07 85 02 FB | 	rdlong	local01, objptr
01ef0     04 00 00 FF 
01ef4     F4 0E 86 F1 | 	sub	objptr, ##2292
01ef8     42 77 02 F1 | 	add	arg01, local01
01efc     1A 76 06 F1 | 	add	arg01, #26
01f00     01 78 06 F6 | 	mov	arg02, #1
01f04                 | ' asm
01f04     3B 03 58 FC | 	wrword	#1, arg01
01f08     D0 E9 BF FD | 	call	#_test
01f0c     3C FA 9F FD | 	jmp	#LR__0012
01f10     AF F0 03 F6 | 	mov	ptra, fp
01f14     BF 00 A0 FD | 	call	#popregs_
01f18                 | _program_ret
01f18     2D 00 64 FD | 	ret
01f1c                 | 
01f1c                 | ' 
01f1c                 | ' 
01f1c                 | ' ''---------- putpixel - put a pixel on the screen
01f1c                 | ' 
01f1c                 | ' pub putpixel1(x,y,c) |byte b
01f1c                 | _hng030rm_spin2_putpixel1
01f1c                 | ' 
01f1c                 | ' 
01f1c                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01f1c     00 36 06 F6 | 	mov	_var01, #0
01f20     00 76 5E F2 | 	cmps	arg01, #0 wcz
01f24     01 36 66 36 |  if_ae	neg	_var01, #1
01f28     00 38 06 F6 | 	mov	_var02, #0
01f2c     90 0E 06 F1 | 	add	objptr, #144
01f30     07 3B 02 FB | 	rdlong	_var03, objptr
01f34     05 3A 66 F0 | 	shl	_var03, #5
01f38     1D 77 5A F2 | 	cmps	arg01, _var03 wcz
01f3c     01 38 66 C6 |  if_b	neg	_var02, #1
01f40     1C 37 02 F5 | 	and	_var01, _var02
01f44     00 3C 06 F6 | 	mov	_var04, #0
01f48     00 78 5E F2 | 	cmps	arg02, #0 wcz
01f4c     01 3C 66 36 |  if_ae	neg	_var04, #1
01f50     1E 37 02 F5 | 	and	_var01, _var04
01f54     00 3E 06 F6 | 	mov	_var05, #0
01f58     04 0E 06 F1 | 	add	objptr, #4
01f5c     07 41 02 FB | 	rdlong	_var06, objptr
01f60     94 0E 86 F1 | 	sub	objptr, #148
01f64     20 79 5A F2 | 	cmps	arg02, _var06 wcz
01f68     01 3E 66 C6 |  if_b	neg	_var05, #1
01f6c     1F 37 CA F7 | 	test	_var01, _var05 wz
01f70     90 00 90 AD |  if_e	jmp	#LR__0019
01f74                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01f74     07 37 02 FB | 	rdlong	_var01, objptr
01f78     90 0E 06 F1 | 	add	objptr, #144
01f7c     07 39 02 FB | 	rdlong	_var02, objptr
01f80     90 0E 86 F1 | 	sub	objptr, #144
01f84     02 38 66 F0 | 	shl	_var02, #2
01f88     3C 39 02 FD | 	qmul	_var02, arg02
01f8c     18 42 62 FD | 	getqx	_var07
01f90     21 37 02 F1 | 	add	_var01, _var07
01f94     3B 3D 02 F6 | 	mov	_var04, arg01
01f98     03 3C 46 F0 | 	shr	_var04, #3
01f9c     1E 37 02 F1 | 	add	_var01, _var04
01fa0     1B 45 C2 FA | 	rdbyte	_var08, _var01
01fa4                 | '     if (c==0)
01fa4     00 7A 0E F2 | 	cmp	arg03, #0 wz
01fa8     18 00 90 5D |  if_ne	jmp	#LR__0017
01fac                 | '       b:=b & !(1<<(x//8))
01fac     3B 3B 52 F6 | 	abs	_var03, arg01 wc
01fb0     07 3A 06 F5 | 	and	_var03, #7
01fb4     1D 3B 62 C6 |  if_b	neg	_var03, _var03
01fb8     1D 39 C2 F9 | 	decod	_var02, _var03
01fbc     1C 45 22 F5 | 	andn	_var08, _var02
01fc0                 | '     else
01fc0     14 00 90 FD | 	jmp	#LR__0018
01fc4                 | LR__0017
01fc4                 | '       b:=b |(1<<(x//8))
01fc4     3B 3B 52 F6 | 	abs	_var03, arg01 wc
01fc8     07 3A 06 F5 | 	and	_var03, #7
01fcc     1D 3B 62 C6 |  if_b	neg	_var03, _var03
01fd0     1D 39 C2 F9 | 	decod	_var02, _var03
01fd4     1C 45 42 F5 | 	or	_var08, _var02
01fd8                 | LR__0018
01fd8                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01fd8     07 37 02 FB | 	rdlong	_var01, objptr
01fdc     90 0E 06 F1 | 	add	objptr, #144
01fe0     07 39 02 FB | 	rdlong	_var02, objptr
01fe4     90 0E 86 F1 | 	sub	objptr, #144
01fe8     02 38 66 F0 | 	shl	_var02, #2
01fec     3C 39 02 FD | 	qmul	_var02, arg02
01ff0     18 42 62 FD | 	getqx	_var07
01ff4     21 37 02 F1 | 	add	_var01, _var07
01ff8     03 76 46 F0 | 	shr	arg01, #3
01ffc     3B 37 02 F1 | 	add	_var01, arg01
02000     1B 45 42 FC | 	wrbyte	_var08, _var01
02004                 | LR__0019
02004                 | _hng030rm_spin2_putpixel1_ret
02004     2D 00 64 FD | 	ret
02008                 | 
02008                 | ' 
02008                 | ' 
02008                 | ' pub putpixel2(x,y,c) |byte b
02008                 | _hng030rm_spin2_putpixel2
02008                 | ' 
02008                 | ' 
02008                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02008     00 36 06 F6 | 	mov	_var01, #0
0200c     00 76 5E F2 | 	cmps	arg01, #0 wcz
02010     01 36 66 36 |  if_ae	neg	_var01, #1
02014     00 38 06 F6 | 	mov	_var02, #0
02018     90 0E 06 F1 | 	add	objptr, #144
0201c     07 3B 02 FB | 	rdlong	_var03, objptr
02020     04 3A 66 F0 | 	shl	_var03, #4
02024     1D 77 5A F2 | 	cmps	arg01, _var03 wcz
02028     01 38 66 C6 |  if_b	neg	_var02, #1
0202c     1C 37 02 F5 | 	and	_var01, _var02
02030     00 3C 06 F6 | 	mov	_var04, #0
02034     00 78 5E F2 | 	cmps	arg02, #0 wcz
02038     01 3C 66 36 |  if_ae	neg	_var04, #1
0203c     1E 37 02 F5 | 	and	_var01, _var04
02040     00 3E 06 F6 | 	mov	_var05, #0
02044     04 0E 06 F1 | 	add	objptr, #4
02048     07 41 02 FB | 	rdlong	_var06, objptr
0204c     94 0E 86 F1 | 	sub	objptr, #148
02050     20 79 5A F2 | 	cmps	arg02, _var06 wcz
02054     01 3E 66 C6 |  if_b	neg	_var05, #1
02058     1F 37 CA F7 | 	test	_var01, _var05 wz
0205c     90 00 90 AD |  if_e	jmp	#LR__0020
02060                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02060     07 37 02 FB | 	rdlong	_var01, objptr
02064     90 0E 06 F1 | 	add	objptr, #144
02068     07 39 02 FB | 	rdlong	_var02, objptr
0206c     90 0E 86 F1 | 	sub	objptr, #144
02070     02 38 66 F0 | 	shl	_var02, #2
02074     3C 39 02 FD | 	qmul	_var02, arg02
02078     18 42 62 FD | 	getqx	_var07
0207c     21 37 02 F1 | 	add	_var01, _var07
02080     3B 3D 02 F6 | 	mov	_var04, arg01
02084     02 3C 46 F0 | 	shr	_var04, #2
02088     1E 37 02 F1 | 	add	_var01, _var04
0208c     1B 45 C2 FA | 	rdbyte	_var08, _var01
02090                 | '     b:=b & !(%11<<((x//4)<<1))
02090     3B 3B 52 F6 | 	abs	_var03, arg01 wc
02094     03 3A 06 F5 | 	and	_var03, #3
02098     1D 3B 62 C6 |  if_b	neg	_var03, _var03
0209c     01 3A 66 F0 | 	shl	_var03, #1
020a0     03 38 06 F6 | 	mov	_var02, #3
020a4     1D 39 62 F0 | 	shl	_var02, _var03
020a8     1C 45 22 F5 | 	andn	_var08, _var02
020ac                 | '     b:=b |(c<<((x//4)<<1))
020ac     3B 3B 52 F6 | 	abs	_var03, arg01 wc
020b0     03 3A 06 F5 | 	and	_var03, #3
020b4     1D 3B 62 C6 |  if_b	neg	_var03, _var03
020b8     01 3A 66 F0 | 	shl	_var03, #1
020bc     1D 7B 62 F0 | 	shl	arg03, _var03
020c0     3D 45 42 F5 | 	or	_var08, arg03
020c4                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
020c4     07 37 02 FB | 	rdlong	_var01, objptr
020c8     90 0E 06 F1 | 	add	objptr, #144
020cc     07 39 02 FB | 	rdlong	_var02, objptr
020d0     90 0E 86 F1 | 	sub	objptr, #144
020d4     02 38 66 F0 | 	shl	_var02, #2
020d8     3C 39 02 FD | 	qmul	_var02, arg02
020dc     18 42 62 FD | 	getqx	_var07
020e0     21 37 02 F1 | 	add	_var01, _var07
020e4     02 76 46 F0 | 	shr	arg01, #2
020e8     3B 37 02 F1 | 	add	_var01, arg01
020ec     1B 45 42 FC | 	wrbyte	_var08, _var01
020f0                 | LR__0020
020f0                 | _hng030rm_spin2_putpixel2_ret
020f0     2D 00 64 FD | 	ret
020f4                 | 
020f4                 | ' 
020f4                 | ' 
020f4                 | ' pub putpixel4(x,y,c) |byte b
020f4                 | _hng030rm_spin2_putpixel4
020f4                 | ' 
020f4                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
020f4     00 36 06 F6 | 	mov	_var01, #0
020f8     00 76 5E F2 | 	cmps	arg01, #0 wcz
020fc     01 36 66 36 |  if_ae	neg	_var01, #1
02100     00 38 06 F6 | 	mov	_var02, #0
02104     90 0E 06 F1 | 	add	objptr, #144
02108     07 3B 02 FB | 	rdlong	_var03, objptr
0210c     04 3A 66 F0 | 	shl	_var03, #4
02110     1D 77 5A F2 | 	cmps	arg01, _var03 wcz
02114     01 38 66 C6 |  if_b	neg	_var02, #1
02118     1C 37 02 F5 | 	and	_var01, _var02
0211c     00 3C 06 F6 | 	mov	_var04, #0
02120     00 78 5E F2 | 	cmps	arg02, #0 wcz
02124     01 3C 66 36 |  if_ae	neg	_var04, #1
02128     1E 37 02 F5 | 	and	_var01, _var04
0212c     00 3E 06 F6 | 	mov	_var05, #0
02130     04 0E 06 F1 | 	add	objptr, #4
02134     07 41 02 FB | 	rdlong	_var06, objptr
02138     94 0E 86 F1 | 	sub	objptr, #148
0213c     20 79 5A F2 | 	cmps	arg02, _var06 wcz
02140     01 3E 66 C6 |  if_b	neg	_var05, #1
02144     1F 37 CA F7 | 	test	_var01, _var05 wz
02148     90 00 90 AD |  if_e	jmp	#LR__0021
0214c                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
0214c     07 37 02 FB | 	rdlong	_var01, objptr
02150     90 0E 06 F1 | 	add	objptr, #144
02154     07 39 02 FB | 	rdlong	_var02, objptr
02158     90 0E 86 F1 | 	sub	objptr, #144
0215c     02 38 66 F0 | 	shl	_var02, #2
02160     3C 39 02 FD | 	qmul	_var02, arg02
02164     18 42 62 FD | 	getqx	_var07
02168     21 37 02 F1 | 	add	_var01, _var07
0216c     3B 3D 02 F6 | 	mov	_var04, arg01
02170     01 3C 46 F0 | 	shr	_var04, #1
02174     1E 37 02 F1 | 	add	_var01, _var04
02178     1B 45 C2 FA | 	rdbyte	_var08, _var01
0217c                 | '     b:=b & !(%1111<<((x//2)<<2))
0217c     3B 3B 52 F6 | 	abs	_var03, arg01 wc
02180     01 3A 06 F5 | 	and	_var03, #1
02184     1D 3B 62 C6 |  if_b	neg	_var03, _var03
02188     02 3A 66 F0 | 	shl	_var03, #2
0218c     0F 38 06 F6 | 	mov	_var02, #15
02190     1D 39 62 F0 | 	shl	_var02, _var03
02194     1C 45 22 F5 | 	andn	_var08, _var02
02198                 | '     b:=b |(c<<((x//2)<<2))
02198     3B 3B 52 F6 | 	abs	_var03, arg01 wc
0219c     01 3A 06 F5 | 	and	_var03, #1
021a0     1D 3B 62 C6 |  if_b	neg	_var03, _var03
021a4     02 3A 66 F0 | 	shl	_var03, #2
021a8     1D 7B 62 F0 | 	shl	arg03, _var03
021ac     3D 45 42 F5 | 	or	_var08, arg03
021b0                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
021b0     07 37 02 FB | 	rdlong	_var01, objptr
021b4     90 0E 06 F1 | 	add	objptr, #144
021b8     07 39 02 FB | 	rdlong	_var02, objptr
021bc     90 0E 86 F1 | 	sub	objptr, #144
021c0     02 38 66 F0 | 	shl	_var02, #2
021c4     3C 39 02 FD | 	qmul	_var02, arg02
021c8     18 42 62 FD | 	getqx	_var07
021cc     21 37 02 F1 | 	add	_var01, _var07
021d0     01 76 46 F0 | 	shr	arg01, #1
021d4     3B 37 02 F1 | 	add	_var01, arg01
021d8     1B 45 42 FC | 	wrbyte	_var08, _var01
021dc                 | LR__0021
021dc                 | _hng030rm_spin2_putpixel4_ret
021dc     2D 00 64 FD | 	ret
021e0                 | 
021e0                 | ' 
021e0                 | ' 
021e0                 | ' pub putpixel8(x,y,c)
021e0                 | _hng030rm_spin2_putpixel8
021e0                 | ' 
021e0                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
021e0     00 36 06 F6 | 	mov	_var01, #0
021e4     00 76 5E F2 | 	cmps	arg01, #0 wcz
021e8     01 36 66 36 |  if_ae	neg	_var01, #1
021ec     00 38 06 F6 | 	mov	_var02, #0
021f0     90 0E 06 F1 | 	add	objptr, #144
021f4     07 3B 02 FB | 	rdlong	_var03, objptr
021f8     02 3A 66 F0 | 	shl	_var03, #2
021fc     1D 77 5A F2 | 	cmps	arg01, _var03 wcz
02200     01 38 66 C6 |  if_b	neg	_var02, #1
02204     1C 37 02 F5 | 	and	_var01, _var02
02208     00 3C 06 F6 | 	mov	_var04, #0
0220c     00 78 5E F2 | 	cmps	arg02, #0 wcz
02210     01 3C 66 36 |  if_ae	neg	_var04, #1
02214     1E 37 02 F5 | 	and	_var01, _var04
02218     00 3E 06 F6 | 	mov	_var05, #0
0221c     04 0E 06 F1 | 	add	objptr, #4
02220     07 41 02 FB | 	rdlong	_var06, objptr
02224     94 0E 86 F1 | 	sub	objptr, #148
02228     20 79 5A F2 | 	cmps	arg02, _var06 wcz
0222c     01 3E 66 C6 |  if_b	neg	_var05, #1
02230     1F 37 CA F7 | 	test	_var01, _var05 wz
02234     28 00 90 AD |  if_e	jmp	#LR__0022
02238                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02238     07 37 02 FB | 	rdlong	_var01, objptr
0223c     90 0E 06 F1 | 	add	objptr, #144
02240     07 39 02 FB | 	rdlong	_var02, objptr
02244     90 0E 86 F1 | 	sub	objptr, #144
02248     02 38 66 F0 | 	shl	_var02, #2
0224c     3C 39 02 FD | 	qmul	_var02, arg02
02250     18 42 62 FD | 	getqx	_var07
02254     21 37 02 F1 | 	add	_var01, _var07
02258     3B 37 02 F1 | 	add	_var01, arg01
0225c     1B 7B 42 FC | 	wrbyte	arg03, _var01
02260                 | LR__0022
02260                 | _hng030rm_spin2_putpixel8_ret
02260     2D 00 64 FD | 	ret
02264                 | 
02264                 | ' 
02264                 | ' '*************************************************************************
02264                 | ' '                                                                        *
02264                 | ' '  VBlank functions                                                      *
02264                 | ' '                                                                        *
02264                 | ' '*************************************************************************
02264                 | ' 
02264                 | ' pub waitvbl(amount) | i
02264                 | _hng030rm_spin2_waitvbl
02264     04 5A 05 F6 | 	mov	COUNT_, #4
02268     B0 00 A0 FD | 	call	#pushregs_
0226c     3B 85 02 F6 | 	mov	local01, arg01
02270                 | ' 
02270                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
02270                 | ' 
02270                 | ' repeat i from 1 to amount
02270     01 86 06 F6 | 	mov	local02, #1
02274     01 84 5E F2 | 	cmps	local01, #1 wcz
02278     01 88 06 16 |  if_a	mov	local03, #1
0227c     01 88 66 E6 |  if_be	neg	local03, #1
02280     44 85 02 F1 | 	add	local01, local03
02284                 | LR__0023
02284                 | '   repeat until vblank==0
02284                 | LR__0024
02284     40 0E 06 F1 | 	add	objptr, #64
02288     07 8B 0A FB | 	rdlong	local04, objptr wz
0228c     40 0E 86 F1 | 	sub	objptr, #64
02290     0C 00 90 AD |  if_e	jmp	#LR__0025
02294                 | '     waitus(100)
02294     64 76 06 F6 | 	mov	arg01, #100
02298     70 44 B0 FD | 	call	#__system___waitus
0229c     E4 FF 9F FD | 	jmp	#LR__0024
022a0                 | LR__0025
022a0                 | '   repeat until vblank==1
022a0                 | LR__0026
022a0     40 0E 06 F1 | 	add	objptr, #64
022a4     07 8B 02 FB | 	rdlong	local04, objptr
022a8     40 0E 86 F1 | 	sub	objptr, #64
022ac     01 8A 0E F2 | 	cmp	local04, #1 wz
022b0     0C 00 90 AD |  if_e	jmp	#LR__0027
022b4                 | '     waitus(100)
022b4     64 76 06 F6 | 	mov	arg01, #100
022b8     50 44 B0 FD | 	call	#__system___waitus
022bc     E0 FF 9F FD | 	jmp	#LR__0026
022c0                 | LR__0027
022c0     44 87 02 F1 | 	add	local02, local03
022c4     42 87 0A F2 | 	cmp	local02, local01 wz
022c8     B8 FF 9F 5D |  if_ne	jmp	#LR__0023
022cc     AF F0 03 F6 | 	mov	ptra, fp
022d0     BF 00 A0 FD | 	call	#popregs_
022d4                 | _hng030rm_spin2_waitvbl_ret
022d4     2D 00 64 FD | 	ret
022d8                 | 
022d8                 | ' 
022d8                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
022d8                 | ' 
022d8                 | ' pub setbordercolor(r,g,b) | color
022d8                 | _hng030rm_spin2_setbordercolor
022d8                 | ' 
022d8                 | ' color:=r<<24+g<<16+b<<8
022d8     18 76 66 F0 | 	shl	arg01, #24
022dc     10 78 66 F0 | 	shl	arg02, #16
022e0     3C 77 02 F1 | 	add	arg01, arg02
022e4     08 7A 66 F0 | 	shl	arg03, #8
022e8     3D 77 02 F1 | 	add	arg01, arg03
022ec                 | ' bordercolor:=color
022ec     2C 0E 06 F1 | 	add	objptr, #44
022f0     07 77 62 FC | 	wrlong	arg01, objptr
022f4     2C 0E 86 F1 | 	sub	objptr, #44
022f8                 | _hng030rm_spin2_setbordercolor_ret
022f8     2D 00 64 FD | 	ret
022fc                 | 
022fc                 | ' 
022fc                 | ' 
022fc                 | ' '*************************************************************************
022fc                 | ' '                                                                        *
022fc                 | ' '  Text functions                                                        *
022fc                 | ' '                                                                        *
022fc                 | ' '*************************************************************************
022fc                 | ' 
022fc                 | ' ''---------- Clear the screen, set its foreground/background color
022fc                 | ' 
022fc                 | ' pub cls(fc,bc)   :c
022fc                 | _hng030rm_spin2_cls
022fc     06 5A 05 F6 | 	mov	COUNT_, #6
02300     B0 00 A0 FD | 	call	#pushregs_
02304     3B 85 02 F6 | 	mov	local01, arg01
02308     3C 87 02 F6 | 	mov	local02, arg02
0230c                 | ' 
0230c                 | ' if (graphmode<512)
0230c     C4 0E 06 F1 | 	add	objptr, #196
02310     07 89 02 FB | 	rdlong	local03, objptr
02314     C4 0E 86 F1 | 	sub	objptr, #196
02318     01 00 00 FF 
0231c     00 88 5E F2 | 	cmps	local03, ##512 wcz
02320     34 00 90 3D |  if_ae	jmp	#LR__0028
02324                 | '   c:=fc<<24+bc<<16+$20
02324     42 8B 02 F6 | 	mov	local04, local01
02328     18 8A 66 F0 | 	shl	local04, #24
0232c     43 8D 02 F6 | 	mov	local05, local02
02330     10 8C 66 F0 | 	shl	local05, #16
02334     46 8B 02 F1 | 	add	local04, local05
02338     20 8A 06 F1 | 	add	local04, #32
0233c                 | '   longfill(buf_ptr,c,buflen)
0233c     07 77 02 FB | 	rdlong	arg01, objptr
02340     30 0E 06 F1 | 	add	objptr, #48
02344     07 7B 02 FB | 	rdlong	arg03, objptr
02348     30 0E 86 F1 | 	sub	objptr, #48
0234c     45 79 02 F6 | 	mov	arg02, local04
02350     A8 00 A0 FD | 	call	#\builtin_longfill_
02354                 | ' else
02354     AC 00 90 FD | 	jmp	#LR__0034
02358                 | LR__0028
02358                 | '   if (graphmode & 48) ==48
02358     C4 0E 06 F1 | 	add	objptr, #196
0235c     07 89 02 FB | 	rdlong	local03, objptr
02360     C4 0E 86 F1 | 	sub	objptr, #196
02364     30 88 06 F5 | 	and	local03, #48
02368     30 88 0E F2 | 	cmp	local03, #48 wz
0236c                 | '     c:=bc
0236c     43 8B 02 A6 |  if_e	mov	local04, local02
02370     74 00 90 AD |  if_e	jmp	#LR__0033
02374                 | '   elseif (graphmode & 48) ==32
02374     C4 0E 06 F1 | 	add	objptr, #196
02378     07 89 02 FB | 	rdlong	local03, objptr
0237c     C4 0E 86 F1 | 	sub	objptr, #196
02380     30 88 06 F5 | 	and	local03, #48
02384     20 88 0E F2 | 	cmp	local03, #32 wz
02388     10 00 90 5D |  if_ne	jmp	#LR__0029
0238c                 | '     c:=bc<<4+bc
0238c     43 8B 02 F6 | 	mov	local04, local02
02390     04 8A 66 F0 | 	shl	local04, #4
02394     43 8B 02 F1 | 	add	local04, local02
02398     4C 00 90 FD | 	jmp	#LR__0032
0239c                 | LR__0029
0239c                 | '   elseif (graphmode & 48) ==16
0239c     C4 0E 06 F1 | 	add	objptr, #196
023a0     07 89 02 FB | 	rdlong	local03, objptr
023a4     C4 0E 86 F1 | 	sub	objptr, #196
023a8     30 88 06 F5 | 	and	local03, #48
023ac     10 88 0E F2 | 	cmp	local03, #16 wz
023b0     28 00 90 5D |  if_ne	jmp	#LR__0030
023b4                 | '     c:=bc<<6+bc<<4+bc<<2+bc
023b4     43 8B 02 F6 | 	mov	local04, local02
023b8     06 8A 66 F0 | 	shl	local04, #6
023bc     43 8D 02 F6 | 	mov	local05, local02
023c0     04 8C 66 F0 | 	shl	local05, #4
023c4     46 8B 02 F1 | 	add	local04, local05
023c8     43 8F 02 F6 | 	mov	local06, local02
023cc     02 8E 66 F0 | 	shl	local06, #2
023d0     47 8B 02 F1 | 	add	local04, local06
023d4     43 8B 02 F1 | 	add	local04, local02
023d8                 | '   else
023d8     0C 00 90 FD | 	jmp	#LR__0031
023dc                 | LR__0030
023dc                 | '     if bc==1
023dc     01 86 0E F2 | 	cmp	local02, #1 wz
023e0                 | '       c:=255
023e0     FF 8A 06 A6 |  if_e	mov	local04, #255
023e4                 | '     else
023e4                 | '       c:=0
023e4     00 8A 06 56 |  if_ne	mov	local04, #0
023e8                 | LR__0031
023e8                 | LR__0032
023e8                 | LR__0033
023e8                 | '   bytefill(buf_ptr,c,buflen*4)
023e8     07 77 02 FB | 	rdlong	arg01, objptr
023ec     30 0E 06 F1 | 	add	objptr, #48
023f0     07 7B 02 FB | 	rdlong	arg03, objptr
023f4     30 0E 86 F1 | 	sub	objptr, #48
023f8     02 7A 66 F0 | 	shl	arg03, #2
023fc     45 79 02 F6 | 	mov	arg02, local04
02400     A0 00 A0 FD | 	call	#\builtin_bytefill_
02404                 | LR__0034
02404                 | ' setwritecolors(fc,bc)
02404                 | ' 
02404                 | ' 
02404                 | ' write_color:=ff
02404     38 0E 06 F1 | 	add	objptr, #56
02408     07 85 62 FC | 	wrlong	local01, objptr
0240c                 | ' write_background:=bb
0240c     04 0E 06 F1 | 	add	objptr, #4
02410     07 87 62 FC | 	wrlong	local02, objptr
02414                 | ' cursor_x:=0
02414     08 0E 86 F1 | 	sub	objptr, #8
02418     07 01 48 FC | 	wrbyte	#0, objptr
0241c                 | ' cursor_y:=0
0241c     01 0E 06 F1 | 	add	objptr, #1
02420     07 01 48 FC | 	wrbyte	#0, objptr
02424     35 0E 86 F1 | 	sub	objptr, #53
02428     45 31 02 F6 | 	mov	result1, local04
0242c     AF F0 03 F6 | 	mov	ptra, fp
02430     BF 00 A0 FD | 	call	#popregs_
02434                 | _hng030rm_spin2_cls_ret
02434     2D 00 64 FD | 	ret
02438                 | 
02438                 | ' 
02438                 | ' ''--------- Output a string at position x,y without changing colors
02438                 | ' 
02438                 | ' pub outtextxy(x,y,text) | iii
02438                 | _hng030rm_spin2_outtextxy
02438     0F 5A 05 F6 | 	mov	COUNT_, #15
0243c     B0 00 A0 FD | 	call	#pushregs_
02440     3B 85 02 F6 | 	mov	local01, arg01
02444                 | ' 
02444                 | ' repeat iii from 0 to strsize(text)-1
02444     00 86 06 F6 | 	mov	local02, #0
02448     3D 77 02 F6 | 	mov	arg01, arg03
0244c     00 88 06 F6 | 	mov	local03, #0
02450     BC DB 9F FE | 	loc	pa,	#(@LR__0036-@LR__0035)
02454     93 00 A0 FD | 	call	#FCACHE_LOAD_
02458                 | LR__0035
02458     3B 8B CA FA | 	rdbyte	local04, arg01 wz
0245c     01 88 06 51 |  if_ne	add	local03, #1
02460     01 76 06 51 |  if_ne	add	arg01, #1
02464     F0 FF 9F 5D |  if_ne	jmp	#LR__0035
02468                 | LR__0036
02468     44 31 02 F6 | 	mov	result1, local03
0246c     18 8D 02 F6 | 	mov	local05, result1
02470     01 8C 86 F1 | 	sub	local05, #1
02474     00 8C 5E F2 | 	cmps	local05, #0 wcz
02478     01 8E 06 16 |  if_a	mov	local06, #1
0247c     01 8E 66 E6 |  if_be	neg	local06, #1
02480     47 8D 02 F1 | 	add	local05, local06
02484     F0 DB 9F FE | 	loc	pa,	#(@LR__0038-@LR__0037)
02488     93 00 A0 FD | 	call	#FCACHE_LOAD_
0248c                 | LR__0037
0248c                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
0248c     07 91 02 FB | 	rdlong	local07, objptr
02490     90 0E 06 F1 | 	add	objptr, #144
02494     07 93 02 FB | 	rdlong	local08, objptr
02498     90 0E 86 F1 | 	sub	objptr, #144
0249c     3C 93 02 FD | 	qmul	local08, arg02
024a0     18 94 62 FD | 	getqx	local09
024a4     42 95 02 F1 | 	add	local09, local01
024a8     43 95 02 F1 | 	add	local09, local02
024ac     02 94 66 F0 | 	shl	local09, #2
024b0     4A 91 02 F1 | 	add	local07, local09
024b4     48 97 02 FB | 	rdlong	local10, local07
024b8     FF 96 26 F5 | 	andn	local10, #255
024bc     3D 99 02 F6 | 	mov	local11, arg03
024c0     43 99 02 F1 | 	add	local11, local02
024c4     4C 9B C2 FA | 	rdbyte	local12, local11
024c8     4D 97 42 F5 | 	or	local10, local12
024cc     07 9D 02 FB | 	rdlong	local13, objptr
024d0     90 0E 06 F1 | 	add	objptr, #144
024d4     07 9F 02 FB | 	rdlong	local14, objptr
024d8     90 0E 86 F1 | 	sub	objptr, #144
024dc     3C 9F 02 FD | 	qmul	local14, arg02
024e0     18 A0 62 FD | 	getqx	local15
024e4     42 A1 02 F1 | 	add	local15, local01
024e8     43 A1 02 F1 | 	add	local15, local02
024ec     02 A0 66 F0 | 	shl	local15, #2
024f0     50 9D 02 F1 | 	add	local13, local15
024f4     4E 97 62 FC | 	wrlong	local10, local13
024f8     47 87 02 F1 | 	add	local02, local06
024fc     46 87 0A F2 | 	cmp	local02, local05 wz
02500     88 FF 9F 5D |  if_ne	jmp	#LR__0037
02504                 | LR__0038
02504     AF F0 03 F6 | 	mov	ptra, fp
02508     BF 00 A0 FD | 	call	#popregs_
0250c                 | _hng030rm_spin2_outtextxy_ret
0250c     2D 00 64 FD | 	ret
02510                 | 
02510                 | ' 
02510                 | ' ''---------- Output a char at the cursor position, move the cursor
02510                 | ' 
02510                 | ' pub putchar(achar) | c,x,y
02510                 | _hng030rm_spin2_putchar
02510     0F 5A 05 F6 | 	mov	COUNT_, #15
02514     B0 00 A0 FD | 	call	#pushregs_
02518     3B 85 02 F6 | 	mov	local01, arg01
0251c                 | ' 
0251c                 | ' if achar==10
0251c     0A 84 0E F2 | 	cmp	local01, #10 wz
02520     08 00 90 5D |  if_ne	jmp	#LR__0039
02524                 | '   crlf()
02524     34 04 B0 FD | 	call	#_hng030rm_spin2_crlf
02528                 | ' else  
02528     64 01 90 FD | 	jmp	#LR__0042
0252c                 | LR__0039
0252c                 | '   x:=cursor_x
0252c     34 0E 06 F1 | 	add	objptr, #52
02530     07 87 C2 FA | 	rdbyte	local02, objptr
02534                 | '   y:=cursor_y
02534     01 0E 06 F1 | 	add	objptr, #1
02538     07 89 C2 FA | 	rdbyte	local03, objptr
0253c                 | '   c:=write_color<<24+write_background<<16
0253c     03 0E 06 F1 | 	add	objptr, #3
02540     07 8B 02 FB | 	rdlong	local04, objptr
02544     18 8A 66 F0 | 	shl	local04, #24
02548     04 0E 06 F1 | 	add	objptr, #4
0254c     07 8D 02 FB | 	rdlong	local05, objptr
02550     3C 0E 86 F1 | 	sub	objptr, #60
02554     10 8C 66 F0 | 	shl	local05, #16
02558     46 8B 02 F1 | 	add	local04, local05
0255c                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
0255c     07 8F 02 FB | 	rdlong	local06, objptr
02560     90 0E 06 F1 | 	add	objptr, #144
02564     07 91 02 FB | 	rdlong	local07, objptr
02568     90 0E 86 F1 | 	sub	objptr, #144
0256c     44 91 02 FD | 	qmul	local07, local03
02570     18 92 62 FD | 	getqx	local08
02574     43 93 02 F1 | 	add	local08, local02
02578     02 92 66 F0 | 	shl	local08, #2
0257c     49 8F 02 F1 | 	add	local06, local08
02580     47 95 02 FB | 	rdlong	local09, local06
02584     7F 00 00 FF 
02588     FF 95 06 F5 | 	and	local09, ##65535
0258c     45 95 42 F5 | 	or	local09, local04
02590     07 97 02 FB | 	rdlong	local10, objptr
02594     90 0E 06 F1 | 	add	objptr, #144
02598     07 99 02 FB | 	rdlong	local11, objptr
0259c     90 0E 86 F1 | 	sub	objptr, #144
025a0     44 99 02 FD | 	qmul	local11, local03
025a4     18 9A 62 FD | 	getqx	local12
025a8     43 9B 02 F1 | 	add	local12, local02
025ac     02 9A 66 F0 | 	shl	local12, #2
025b0     4D 97 02 F1 | 	add	local10, local12
025b4     4B 95 62 FC | 	wrlong	local09, local10
025b8                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
025b8     07 8F 02 FB | 	rdlong	local06, objptr
025bc     90 0E 06 F1 | 	add	objptr, #144
025c0     07 91 02 FB | 	rdlong	local07, objptr
025c4     90 0E 86 F1 | 	sub	objptr, #144
025c8     44 91 02 FD | 	qmul	local07, local03
025cc     18 92 62 FD | 	getqx	local08
025d0     43 93 02 F1 | 	add	local08, local02
025d4     02 92 66 F0 | 	shl	local08, #2
025d8     49 8F 02 F1 | 	add	local06, local08
025dc     47 95 02 FB | 	rdlong	local09, local06
025e0     FF 94 26 F5 | 	andn	local09, #255
025e4     42 97 02 F6 | 	mov	local10, local01
025e8     FF 96 06 F5 | 	and	local10, #255
025ec     4B 95 42 F5 | 	or	local09, local10
025f0     07 9D 02 FB | 	rdlong	local13, objptr
025f4     90 0E 06 F1 | 	add	objptr, #144
025f8     07 9F 02 FB | 	rdlong	local14, objptr
025fc     44 9F 02 FD | 	qmul	local14, local03
02600     18 A0 62 FD | 	getqx	local15
02604     43 A1 02 F1 | 	add	local15, local02
02608     02 A0 66 F0 | 	shl	local15, #2
0260c     50 9D 02 F1 | 	add	local13, local15
02610     4E 95 62 FC | 	wrlong	local09, local13
02614                 | '   cursor_x+=1
02614     5C 0E 86 F1 | 	sub	objptr, #92
02618     07 95 C2 FA | 	rdbyte	local09, objptr
0261c     01 94 06 F1 | 	add	local09, #1
02620     07 95 42 FC | 	wrbyte	local09, objptr
02624                 | '   if cursor_x==cpl
02624     07 95 C2 FA | 	rdbyte	local09, objptr
02628     5C 0E 06 F1 | 	add	objptr, #92
0262c     07 8D 02 FB | 	rdlong	local05, objptr
02630     90 0E 86 F1 | 	sub	objptr, #144
02634     46 95 0A F2 | 	cmp	local09, local05 wz
02638     54 00 90 5D |  if_ne	jmp	#LR__0041
0263c                 | '     cursor_x:=0
0263c     34 0E 06 F1 | 	add	objptr, #52
02640     07 01 48 FC | 	wrbyte	#0, objptr
02644                 | '     cursor_y+=1
02644     01 0E 06 F1 | 	add	objptr, #1
02648     07 95 C2 FA | 	rdbyte	local09, objptr
0264c     01 94 06 F1 | 	add	local09, #1
02650     07 95 42 FC | 	wrbyte	local09, objptr
02654                 | '     if cursor_y>lines-1
02654     5F 0E 06 F1 | 	add	objptr, #95
02658     07 95 02 FB | 	rdlong	local09, objptr
0265c     01 94 86 F1 | 	sub	local09, #1
02660     5F 0E 86 F1 | 	sub	objptr, #95
02664     07 8D C2 FA | 	rdbyte	local05, objptr
02668     35 0E 86 F1 | 	sub	objptr, #53
0266c     4A 8D 5A F2 | 	cmps	local05, local09 wcz
02670     1C 00 90 ED |  if_be	jmp	#LR__0040
02674                 | '       scrollup()
02674     10 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
02678                 | '       cursor_y:=lines-1
02678     94 0E 06 F1 | 	add	objptr, #148
0267c     07 95 02 FB | 	rdlong	local09, objptr
02680     01 94 86 F1 | 	sub	local09, #1
02684     5F 0E 86 F1 | 	sub	objptr, #95
02688     07 95 42 FC | 	wrbyte	local09, objptr
0268c     35 0E 86 F1 | 	sub	objptr, #53
02690                 | LR__0040
02690                 | LR__0041
02690                 | LR__0042
02690     AF F0 03 F6 | 	mov	ptra, fp
02694     BF 00 A0 FD | 	call	#popregs_
02698                 | _hng030rm_spin2_putchar_ret
02698     2D 00 64 FD | 	ret
0269c                 | 
0269c                 | ' 
0269c                 | ' ''--------- Output a string at the cursor position, move the cursor
0269c                 | ' 
0269c                 | ' pub write(text) | iii,c,ncx,ncy
0269c                 | _hng030rm_spin2_write
0269c     17 5A 05 F6 | 	mov	COUNT_, #23
026a0     B0 00 A0 FD | 	call	#pushregs_
026a4     3B 85 02 F6 | 	mov	local01, arg01
026a8                 | ' 
026a8                 | ' c:=write_color<<24+write_background<<16
026a8     38 0E 06 F1 | 	add	objptr, #56
026ac     07 87 02 FB | 	rdlong	local02, objptr
026b0     18 86 66 F0 | 	shl	local02, #24
026b4     04 0E 06 F1 | 	add	objptr, #4
026b8     07 89 02 FB | 	rdlong	local03, objptr
026bc     10 88 66 F0 | 	shl	local03, #16
026c0     44 87 02 F1 | 	add	local02, local03
026c4                 | ' 'debug(uhex_long(write_color))
026c4                 | ' ncy:=cursor_y
026c4     07 0E 86 F1 | 	sub	objptr, #7
026c8     07 8B C2 FA | 	rdbyte	local04, objptr
026cc                 | ' ncx:=cursor_x+strsize(text)
026cc     01 0E 86 F1 | 	sub	objptr, #1
026d0     07 8D C2 FA | 	rdbyte	local05, objptr
026d4     34 0E 86 F1 | 	sub	objptr, #52
026d8     42 77 02 F6 | 	mov	arg01, local01
026dc     00 8E 06 F6 | 	mov	local06, #0
026e0     2C D9 9F FE | 	loc	pa,	#(@LR__0044-@LR__0043)
026e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
026e8                 | LR__0043
026e8     3B 91 CA FA | 	rdbyte	local07, arg01 wz
026ec     01 8E 06 51 |  if_ne	add	local06, #1
026f0     01 76 06 51 |  if_ne	add	arg01, #1
026f4     F0 FF 9F 5D |  if_ne	jmp	#LR__0043
026f8                 | LR__0044
026f8     47 31 02 F6 | 	mov	result1, local06
026fc     47 8D 02 F1 | 	add	local05, local06
02700     46 93 02 F6 | 	mov	local08, local05
02704     28 D9 9F FE | 	loc	pa,	#(@LR__0046-@LR__0045)
02708     93 00 A0 FD | 	call	#FCACHE_LOAD_
0270c                 | ' repeat while ncx>cpl-1
0270c                 | LR__0045
0270c     90 0E 06 F1 | 	add	objptr, #144
02710     07 8D 02 FB | 	rdlong	local05, objptr
02714     90 0E 86 F1 | 	sub	objptr, #144
02718     01 8C 86 F1 | 	sub	local05, #1
0271c     46 93 5A F2 | 	cmps	local08, local05 wcz
02720     18 00 90 ED |  if_be	jmp	#LR__0047
02724                 | '   ncx-=cpl
02724     90 0E 06 F1 | 	add	objptr, #144
02728     07 95 02 FB | 	rdlong	local09, objptr
0272c     90 0E 86 F1 | 	sub	objptr, #144
02730     4A 93 82 F1 | 	sub	local08, local09
02734                 | '   ncy+=1
02734     01 8A 06 F1 | 	add	local04, #1
02738     D0 FF 9F FD | 	jmp	#LR__0045
0273c                 | LR__0046
0273c                 | LR__0047
0273c                 | ' repeat while ncy>lines-1
0273c                 | LR__0048
0273c     94 0E 06 F1 | 	add	objptr, #148
02740     07 8D 02 FB | 	rdlong	local05, objptr
02744     94 0E 86 F1 | 	sub	objptr, #148
02748     01 8C 86 F1 | 	sub	local05, #1
0274c     46 8B 5A F2 | 	cmps	local04, local05 wcz
02750     20 00 90 ED |  if_be	jmp	#LR__0049
02754                 | '   ncy-=1
02754     01 8A 86 F1 | 	sub	local04, #1
02758                 | '   scrollup()
02758     2C 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
0275c                 | '   cursor_y-=1
0275c     35 0E 06 F1 | 	add	objptr, #53
02760     07 8D C2 FA | 	rdbyte	local05, objptr
02764     01 8C 86 F1 | 	sub	local05, #1
02768     07 8D 42 FC | 	wrbyte	local05, objptr
0276c     35 0E 86 F1 | 	sub	objptr, #53
02770     C8 FF 9F FD | 	jmp	#LR__0048
02774                 | LR__0049
02774                 | ' 
02774                 | ' repeat iii from 0 to strsize(text)-1
02774     00 96 06 F6 | 	mov	local10, #0
02778     42 77 02 F6 | 	mov	arg01, local01
0277c     00 8E 06 F6 | 	mov	local06, #0
02780     8C D8 9F FE | 	loc	pa,	#(@LR__0051-@LR__0050)
02784     93 00 A0 FD | 	call	#FCACHE_LOAD_
02788                 | LR__0050
02788     3B 91 CA FA | 	rdbyte	local07, arg01 wz
0278c     01 8E 06 51 |  if_ne	add	local06, #1
02790     01 76 06 51 |  if_ne	add	arg01, #1
02794     F0 FF 9F 5D |  if_ne	jmp	#LR__0050
02798                 | LR__0051
02798     47 31 02 F6 | 	mov	result1, local06
0279c     18 99 02 F6 | 	mov	local11, result1
027a0     01 98 86 F1 | 	sub	local11, #1
027a4     00 98 5E F2 | 	cmps	local11, #0 wcz
027a8     01 9A 06 16 |  if_a	mov	local12, #1
027ac     01 9A 66 E6 |  if_be	neg	local12, #1
027b0     4D 99 02 F1 | 	add	local11, local12
027b4     D8 D8 9F FE | 	loc	pa,	#(@LR__0053-@LR__0052)
027b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
027bc                 | LR__0052
027bc                 | ' 
027bc                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
027bc     07 9D 02 FB | 	rdlong	local13, objptr
027c0     90 0E 06 F1 | 	add	objptr, #144
027c4     07 9F 02 FB | 	rdlong	local14, objptr
027c8     5B 0E 86 F1 | 	sub	objptr, #91
027cc     07 A1 C2 FA | 	rdbyte	local15, objptr
027d0     50 9F 02 FD | 	qmul	local14, local15
027d4     18 A2 62 FD | 	getqx	local16
027d8     01 0E 86 F1 | 	sub	objptr, #1
027dc     07 A5 C2 FA | 	rdbyte	local17, objptr
027e0     34 0E 86 F1 | 	sub	objptr, #52
027e4     52 A3 02 F1 | 	add	local16, local17
027e8     4B A3 02 F1 | 	add	local16, local10
027ec     02 A2 66 F0 | 	shl	local16, #2
027f0     51 9D 02 F1 | 	add	local13, local16
027f4     4E A7 02 FB | 	rdlong	local18, local13
027f8     7F 00 00 FF 
027fc     FF A7 06 F5 | 	and	local18, ##65535
02800     43 A7 42 F5 | 	or	local18, local02
02804     07 A9 02 FB | 	rdlong	local19, objptr
02808     90 0E 06 F1 | 	add	objptr, #144
0280c     07 AB 02 FB | 	rdlong	local20, objptr
02810     5B 0E 86 F1 | 	sub	objptr, #91
02814     07 AD C2 FA | 	rdbyte	local21, objptr
02818     56 AB 02 FD | 	qmul	local20, local21
0281c     18 AE 62 FD | 	getqx	local22
02820     01 0E 86 F1 | 	sub	objptr, #1
02824     07 B1 C2 FA | 	rdbyte	local23, objptr
02828     34 0E 86 F1 | 	sub	objptr, #52
0282c     58 AF 02 F1 | 	add	local22, local23
02830     4B AF 02 F1 | 	add	local22, local10
02834     02 AE 66 F0 | 	shl	local22, #2
02838     57 A9 02 F1 | 	add	local19, local22
0283c     54 A7 62 FC | 	wrlong	local18, local19
02840     4D 97 02 F1 | 	add	local10, local12
02844     4C 97 0A F2 | 	cmp	local10, local11 wz
02848     70 FF 9F 5D |  if_ne	jmp	#LR__0052
0284c                 | LR__0053
0284c                 | ' 
0284c                 | ' outtextxy(cursor_x,cursor_y,text)
0284c     34 0E 06 F1 | 	add	objptr, #52
02850     07 77 C2 FA | 	rdbyte	arg01, objptr
02854     01 0E 06 F1 | 	add	objptr, #1
02858     07 79 C2 FA | 	rdbyte	arg02, objptr
0285c     35 0E 86 F1 | 	sub	objptr, #53
02860     42 7B 02 F6 | 	mov	arg03, local01
02864     D0 FB BF FD | 	call	#_hng030rm_spin2_outtextxy
02868                 | ' 
02868                 | ' cursor_x:=ncx
02868     34 0E 06 F1 | 	add	objptr, #52
0286c     07 93 42 FC | 	wrbyte	local08, objptr
02870                 | ' cursor_y:=ncy
02870     01 0E 06 F1 | 	add	objptr, #1
02874     07 8B 42 FC | 	wrbyte	local04, objptr
02878     35 0E 86 F1 | 	sub	objptr, #53
0287c     AF F0 03 F6 | 	mov	ptra, fp
02880     BF 00 A0 FD | 	call	#popregs_
02884                 | _hng030rm_spin2_write_ret
02884     2D 00 64 FD | 	ret
02888                 | 
02888                 | ' 
02888                 | ' ''-----------  Scroll the screen one line up
02888                 | ' 
02888                 | ' pub scrollup() | i
02888                 | _hng030rm_spin2_scrollup
02888     0C 5A 05 F6 | 	mov	COUNT_, #12
0288c     B0 00 A0 FD | 	call	#pushregs_
02890                 | ' 
02890                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02890     07 77 02 FB | 	rdlong	arg01, objptr
02894     3B 79 02 F6 | 	mov	arg02, arg01
02898     90 0E 06 F1 | 	add	objptr, #144
0289c     07 85 02 FB | 	rdlong	local01, objptr
028a0     02 84 66 F0 | 	shl	local01, #2
028a4     42 79 02 F1 | 	add	arg02, local01
028a8     60 0E 86 F1 | 	sub	objptr, #96
028ac     07 7B 02 FB | 	rdlong	arg03, objptr
028b0     60 0E 06 F1 | 	add	objptr, #96
028b4     07 87 02 FB | 	rdlong	local02, objptr
028b8     90 0E 86 F1 | 	sub	objptr, #144
028bc     43 7B 82 F1 | 	sub	arg03, local02
028c0     FC 3A B0 FD | 	call	#__system__longmove
028c4                 | ' repeat i from buflen-cpl to buflen-1
028c4     30 0E 06 F1 | 	add	objptr, #48
028c8     07 89 02 FB | 	rdlong	local03, objptr
028cc     60 0E 06 F1 | 	add	objptr, #96
028d0     07 85 02 FB | 	rdlong	local01, objptr
028d4     42 89 82 F1 | 	sub	local03, local01
028d8     60 0E 86 F1 | 	sub	objptr, #96
028dc     07 8B 02 FB | 	rdlong	local04, objptr
028e0     01 8A 86 F1 | 	sub	local04, #1
028e4     07 8D 02 FB | 	rdlong	local05, objptr
028e8     60 0E 06 F1 | 	add	objptr, #96
028ec     07 8F 02 FB | 	rdlong	local06, objptr
028f0     90 0E 86 F1 | 	sub	objptr, #144
028f4     47 8D 82 F1 | 	sub	local05, local06
028f8     46 8B 5A F2 | 	cmps	local04, local05 wcz
028fc     01 90 06 16 |  if_a	mov	local07, #1
02900     01 90 66 E6 |  if_be	neg	local07, #1
02904     48 8B 02 F1 | 	add	local04, local07
02908     34 D7 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
0290c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02910                 | LR__0054
02910                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
02910     07 93 02 FB | 	rdlong	local08, objptr
02914     44 95 02 F6 | 	mov	local09, local03
02918     02 94 66 F0 | 	shl	local09, #2
0291c     4A 93 02 F1 | 	add	local08, local09
02920     49 97 02 FB | 	rdlong	local10, local08
02924     80 FF 7F FF 
02928     00 96 06 F5 | 	and	local10, ##-65536
0292c     20 96 46 F5 | 	or	local10, #32
02930     07 99 02 FB | 	rdlong	local11, objptr
02934     44 9B 02 F6 | 	mov	local12, local03
02938     02 9A 66 F0 | 	shl	local12, #2
0293c     4D 99 02 F1 | 	add	local11, local12
02940     4C 97 62 FC | 	wrlong	local10, local11
02944     48 89 02 F1 | 	add	local03, local07
02948     45 89 0A F2 | 	cmp	local03, local04 wz
0294c     C0 FF 9F 5D |  if_ne	jmp	#LR__0054
02950                 | LR__0055
02950     AF F0 03 F6 | 	mov	ptra, fp
02954     BF 00 A0 FD | 	call	#popregs_
02958                 | _hng030rm_spin2_scrollup_ret
02958     2D 00 64 FD | 	ret
0295c                 | 
0295c                 | ' 
0295c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed
0295c                 | ' 
0295c                 | ' pub crlf()
0295c                 | _hng030rm_spin2_crlf
0295c     02 5A 05 F6 | 	mov	COUNT_, #2
02960     B0 00 A0 FD | 	call	#pushregs_
02964                 | ' 
02964                 | ' cursor_x:=0
02964     34 0E 06 F1 | 	add	objptr, #52
02968     07 01 48 FC | 	wrbyte	#0, objptr
0296c                 | ' cursor_y+=1
0296c     01 0E 06 F1 | 	add	objptr, #1
02970     07 85 C2 FA | 	rdbyte	local01, objptr
02974     01 84 06 F1 | 	add	local01, #1
02978     07 85 42 FC | 	wrbyte	local01, objptr
0297c                 | ' if cursor_y>lines-1
0297c     5F 0E 06 F1 | 	add	objptr, #95
02980     07 85 02 FB | 	rdlong	local01, objptr
02984     01 84 86 F1 | 	sub	local01, #1
02988     5F 0E 86 F1 | 	sub	objptr, #95
0298c     07 87 C2 FA | 	rdbyte	local02, objptr
02990     35 0E 86 F1 | 	sub	objptr, #53
02994     42 87 5A F2 | 	cmps	local02, local01 wcz
02998     1C 00 90 ED |  if_be	jmp	#LR__0056
0299c                 | '   scrollup()
0299c     E8 FE BF FD | 	call	#_hng030rm_spin2_scrollup
029a0                 | '   cursor_y:=lines-1
029a0     94 0E 06 F1 | 	add	objptr, #148
029a4     07 85 02 FB | 	rdlong	local01, objptr
029a8     01 84 86 F1 | 	sub	local01, #1
029ac     5F 0E 86 F1 | 	sub	objptr, #95
029b0     07 85 42 FC | 	wrbyte	local01, objptr
029b4     35 0E 86 F1 | 	sub	objptr, #53
029b8                 | LR__0056
029b8     AF F0 03 F6 | 	mov	ptra, fp
029bc     BF 00 A0 FD | 	call	#popregs_
029c0                 | _hng030rm_spin2_crlf_ret
029c0     2D 00 64 FD | 	ret
029c4                 | 
029c4                 | ' 
029c4                 | ' 
029c4                 | ' 
029c4                 | ' pub inttostr2(i,d):result |q,pos,k,j
029c4                 | _hng030rm_spin2_inttostr2
029c4                 | ' 
029c4                 | ' j:=i
029c4                 | ' pos:=d-1
029c4     3C 37 02 F6 | 	mov	_var01, arg02
029c8     01 36 86 F1 | 	sub	_var01, #1
029cc                 | ' k:=0
029cc                 | ' 
029cc                 | ' n_string[d]:=0
029cc     3C 39 02 F6 | 	mov	_var02, arg02
029d0     44 0E 06 F1 | 	add	objptr, #68
029d4     07 3B 02 F6 | 	mov	_var03, objptr
029d8     07 39 02 F1 | 	add	_var02, objptr
029dc     1C 01 48 FC | 	wrbyte	#0, _var02
029e0                 | ' repeat k from 0 to d-1
029e0     00 3C 06 F6 | 	mov	_var04, #0
029e4     01 78 86 F1 | 	sub	arg02, #1
029e8     3C 3F 02 F6 | 	mov	_var05, arg02
029ec     00 3E 5E F2 | 	cmps	_var05, #0 wcz
029f0     44 0E 86 F1 | 	sub	objptr, #68
029f4     01 3A 06 16 |  if_a	mov	_var03, #1
029f8     01 3A 66 E6 |  if_be	neg	_var03, #1
029fc     1D 3F 02 F1 | 	add	_var05, _var03
02a00     1C D6 9F FE | 	loc	pa,	#(@LR__0058-@LR__0057)
02a04     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a08                 | LR__0057
02a08                 | '   n_string[k]:=48
02a08     1E 41 02 F6 | 	mov	_var06, _var04
02a0c     44 0E 06 F1 | 	add	objptr, #68
02a10     07 41 02 F1 | 	add	_var06, objptr
02a14     20 61 48 FC | 	wrbyte	#48, _var06
02a18     1D 3D 02 F1 | 	add	_var04, _var03
02a1c     1F 3D 0A F2 | 	cmp	_var04, _var05 wz
02a20     44 0E 86 F1 | 	sub	objptr, #68
02a24     E0 FF 9F 5D |  if_ne	jmp	#LR__0057
02a28                 | LR__0058
02a28                 | ' 
02a28                 | ' if (j<>0)
02a28     00 76 0E F2 | 	cmp	arg01, #0 wz
02a2c     40 00 90 AD |  if_e	jmp	#LR__0061
02a30                 | ' 
02a30                 | '   repeat while (pos>-1)
02a30                 | LR__0059
02a30     FF FF 7F FF 
02a34     FF 37 5E F2 | 	cmps	_var01, ##-1 wcz
02a38     34 00 90 ED |  if_be	jmp	#LR__0060
02a3c                 | '     q:=j+//10
02a3c     3B D9 02 F6 | 	mov	muldiva_, arg01
02a40     0A DA 06 F6 | 	mov	muldivb_, #10
02a44     CC 00 A0 FD | 	call	#unsdivide_
02a48                 | '     q:=48+q
02a48     30 42 06 F6 | 	mov	_var07, #48
02a4c     6C 43 02 F1 | 	add	_var07, muldiva_
02a50                 | '     n_string[pos]:=q
02a50     1B 79 02 F6 | 	mov	arg02, _var01
02a54     44 0E 06 F1 | 	add	objptr, #68
02a58     07 79 02 F1 | 	add	arg02, objptr
02a5c     3C 43 42 FC | 	wrbyte	_var07, arg02
02a60                 | '     j:=j+/10
02a60     6D 77 02 F6 | 	mov	arg01, muldivb_
02a64                 | '     pos-=1
02a64     01 36 86 F1 | 	sub	_var01, #1
02a68     44 0E 86 F1 | 	sub	objptr, #68
02a6c     C0 FF 9F FD | 	jmp	#LR__0059
02a70                 | LR__0060
02a70                 | LR__0061
02a70                 | ' 
02a70                 | ' 
02a70                 | ' q:=@n_string
02a70     44 0E 06 F1 | 	add	objptr, #68
02a74     07 31 02 F6 | 	mov	result1, objptr
02a78     44 0E 86 F1 | 	sub	objptr, #68
02a7c                 | ' return q
02a7c                 | _hng030rm_spin2_inttostr2_ret
02a7c     2D 00 64 FD | 	ret
02a80                 | 
02a80                 | ' 
02a80                 | ' 
02a80                 | ' 
02a80                 | ' '*************************************************************************
02a80                 | ' '                                                                        *
02a80                 | ' '  Mode setting and driver start                                                          *
02a80                 | ' '                                                                        *
02a80                 | ' '*************************************************************************
02a80                 | ' 
02a80                 | ' ''---------  Set the graphics mode
02a80                 | ' 
02a80                 | ' 
02a80                 | ' 
02a80                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02a80                 | _hng030rm_spin2_setmode
02a80     0A 5A 05 F6 | 	mov	COUNT_, #10
02a84     B0 00 A0 FD | 	call	#pushregs_
02a88     3B 85 02 F6 | 	mov	local01, arg01
02a8c                 | ' 
02a8c                 | ' '' mode:tn_bb_cc_vv_hh
02a8c                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02a8c                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02a8c                 | ' 
02a8c                 | ' if mode==(512+192+48)
02a8c     01 00 00 FF 
02a90     F0 84 0E F2 | 	cmp	local01, ##752 wz
02a94                 | '   return 'no RAM
02a94     C8 05 90 AD |  if_e	jmp	#LR__0084
02a98                 | ' 
02a98                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02a98     42 87 02 F6 | 	mov	local02, local01
02a9c     06 86 46 F0 | 	shr	local02, #6
02aa0     07 86 06 F5 | 	and	local02, #7
02aa4     08 86 26 F3 | 	fle	local02, #8
02aa8     43 89 02 F6 | 	mov	local03, local02
02aac     30 88 62 FD | 	jmprel	local03
02ab0                 | LR__0062
02ab0     20 00 90 FD | 	jmp	#LR__0063
02ab4     48 00 90 FD | 	jmp	#LR__0064
02ab8     70 00 90 FD | 	jmp	#LR__0065
02abc     98 00 90 FD | 	jmp	#LR__0066
02ac0     C0 00 90 FD | 	jmp	#LR__0067
02ac4     E8 00 90 FD | 	jmp	#LR__0068
02ac8     10 01 90 FD | 	jmp	#LR__0069
02acc     38 01 90 FD | 	jmp	#LR__0070
02ad0     70 01 90 FD | 	jmp	#LR__0071
02ad4                 | LR__0063
02ad4                 | ' 
02ad4                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02ad4     50 0E 06 F1 | 	add	objptr, #80
02ad8     07 77 02 F6 | 	mov	arg01, objptr
02adc     50 0E 86 F1 | 	sub	objptr, #80
02ae0     0E 00 00 FF 
02ae4     58 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02ae8     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02aec     0E 00 00 FF 
02af0     58 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
02af4     10 7A 06 F6 | 	mov	arg03, #16
02af8     C4 38 B0 FD | 	call	#__system__longmove
02afc     44 01 90 FD | 	jmp	#LR__0071
02b00                 | LR__0064
02b00                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02b00     50 0E 06 F1 | 	add	objptr, #80
02b04     07 77 02 F6 | 	mov	arg01, objptr
02b08     50 0E 86 F1 | 	sub	objptr, #80
02b0c     0E 00 00 FF 
02b10     98 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02b14     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b18     0E 00 00 FF 
02b1c     98 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02b20     10 7A 06 F6 | 	mov	arg03, #16
02b24     98 38 B0 FD | 	call	#__system__longmove
02b28     18 01 90 FD | 	jmp	#LR__0071
02b2c                 | LR__0065
02b2c                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02b2c     50 0E 06 F1 | 	add	objptr, #80
02b30     07 77 02 F6 | 	mov	arg01, objptr
02b34     50 0E 86 F1 | 	sub	objptr, #80
02b38     0E 00 00 FF 
02b3c     D8 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02b40     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b44     0E 00 00 FF 
02b48     D8 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02b4c     10 7A 06 F6 | 	mov	arg03, #16
02b50     6C 38 B0 FD | 	call	#__system__longmove
02b54     EC 00 90 FD | 	jmp	#LR__0071
02b58                 | LR__0066
02b58                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02b58     50 0E 06 F1 | 	add	objptr, #80
02b5c     07 77 02 F6 | 	mov	arg01, objptr
02b60     50 0E 86 F1 | 	sub	objptr, #80
02b64     0E 00 00 FF 
02b68     18 1D 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02b6c     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b70     0E 00 00 FF 
02b74     18 1D 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02b78     10 7A 06 F6 | 	mov	arg03, #16
02b7c     40 38 B0 FD | 	call	#__system__longmove
02b80     C0 00 90 FD | 	jmp	#LR__0071
02b84                 | LR__0067
02b84                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02b84     50 0E 06 F1 | 	add	objptr, #80
02b88     07 77 02 F6 | 	mov	arg01, objptr
02b8c     50 0E 86 F1 | 	sub	objptr, #80
02b90     0E 00 00 FF 
02b94     58 1D 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02b98     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02b9c     0E 00 00 FF 
02ba0     58 1D 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02ba4     10 7A 06 F6 | 	mov	arg03, #16
02ba8     14 38 B0 FD | 	call	#__system__longmove
02bac     94 00 90 FD | 	jmp	#LR__0071
02bb0                 | LR__0068
02bb0                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02bb0     50 0E 06 F1 | 	add	objptr, #80
02bb4     07 77 02 F6 | 	mov	arg01, objptr
02bb8     50 0E 86 F1 | 	sub	objptr, #80
02bbc     0E 00 00 FF 
02bc0     98 1D 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02bc4     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02bc8     0E 00 00 FF 
02bcc     98 1D 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02bd0     10 7A 06 F6 | 	mov	arg03, #16
02bd4     E8 37 B0 FD | 	call	#__system__longmove
02bd8     68 00 90 FD | 	jmp	#LR__0071
02bdc                 | LR__0069
02bdc                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02bdc     50 0E 06 F1 | 	add	objptr, #80
02be0     07 77 02 F6 | 	mov	arg01, objptr
02be4     50 0E 86 F1 | 	sub	objptr, #80
02be8     0E 00 00 FF 
02bec     D8 1D 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02bf0     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02bf4     0E 00 00 FF 
02bf8     D8 1D 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02bfc     10 7A 06 F6 | 	mov	arg03, #16
02c00     BC 37 B0 FD | 	call	#__system__longmove
02c04     3C 00 90 FD | 	jmp	#LR__0071
02c08                 | LR__0070
02c08                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02c08     50 0E 06 F1 | 	add	objptr, #80
02c0c     07 8B 02 F6 | 	mov	local04, objptr
02c10     45 8D 02 F6 | 	mov	local05, local04
02c14     0F 00 00 FF 
02c18     18 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02c1c     0E 8F 02 F6 | 	mov	local06, ptr__hng030rm_spin2_dat__
02c20     47 91 02 F6 | 	mov	local07, local06
02c24     10 92 06 F6 | 	mov	local08, #16
02c28     46 77 02 F6 | 	mov	arg01, local05
02c2c     48 79 02 F6 | 	mov	arg02, local07
02c30     10 7A 06 F6 | 	mov	arg03, #16
02c34     50 0E 86 F1 | 	sub	objptr, #80
02c38     0F 00 00 FF 
02c3c     18 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02c40     7C 37 B0 FD | 	call	#__system__longmove
02c44                 | LR__0071
02c44                 | ' 
02c44                 | ' ' 4-bit graphics: do nothing with timings :)
02c44                 | ' if mode<512
02c44     01 00 00 FF 
02c48     00 84 5E F2 | 	cmps	local01, ##512 wcz
02c4c     1C 00 90 3D |  if_ae	jmp	#LR__0072
02c50                 | '   palette_ptr:=@ataripalette
02c50     0C 00 00 FF 
02c54     58 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c58     18 0E 06 F1 | 	add	objptr, #24
02c5c     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02c60     18 0E 86 F1 | 	sub	objptr, #24
02c64     0C 00 00 FF 
02c68     58 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c6c                 | LR__0072
02c6c                 | ' 
02c6c                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02c6c     42 87 02 F6 | 	mov	local02, local01
02c70     01 00 00 FF 
02c74     30 86 06 F5 | 	and	local02, ##560
02c78     01 00 00 FF 
02c7c     30 86 0E F2 | 	cmp	local02, ##560 wz
02c80     44 00 90 5D |  if_ne	jmp	#LR__0073
02c84                 | '   timings[5]:=4
02c84     64 0E 06 F1 | 	add	objptr, #100
02c88     07 09 68 FC | 	wrlong	#4, objptr
02c8c                 | '   timings[11]:=timings[11]<<1
02c8c     18 0E 06 F1 | 	add	objptr, #24
02c90     07 87 02 FB | 	rdlong	local02, objptr
02c94     01 86 66 F0 | 	shl	local02, #1
02c98     07 87 62 FC | 	wrlong	local02, objptr
02c9c                 | '   putpixel:=p8
02c9c     6C 0E 06 F1 | 	add	objptr, #108
02ca0     07 87 02 FB | 	rdlong	local02, objptr
02ca4     10 0E 86 F1 | 	sub	objptr, #16
02ca8     07 87 62 FC | 	wrlong	local02, objptr
02cac                 | '   palette_ptr:=@ataripalette
02cac     0C 00 00 FF 
02cb0     58 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02cb4     C0 0E 86 F1 | 	sub	objptr, #192
02cb8     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02cbc     18 0E 86 F1 | 	sub	objptr, #24
02cc0     0C 00 00 FF 
02cc4     58 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02cc8                 | LR__0073
02cc8                 | ' 
02cc8                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02cc8     42 87 02 F6 | 	mov	local02, local01
02ccc     01 00 00 FF 
02cd0     30 86 06 F5 | 	and	local02, ##560
02cd4     01 00 00 FF 
02cd8     10 86 0E F2 | 	cmp	local02, ##528 wz
02cdc     44 00 90 5D |  if_ne	jmp	#LR__0074
02ce0                 | '   timings[5]:=16
02ce0     64 0E 06 F1 | 	add	objptr, #100
02ce4     07 21 68 FC | 	wrlong	#16, objptr
02ce8                 | '   timings[11]:=timings[11]>>1
02ce8     18 0E 06 F1 | 	add	objptr, #24
02cec     07 87 02 FB | 	rdlong	local02, objptr
02cf0     01 86 46 F0 | 	shr	local02, #1
02cf4     07 87 62 FC | 	wrlong	local02, objptr
02cf8                 | '   putpixel:=p2
02cf8     64 0E 06 F1 | 	add	objptr, #100
02cfc     07 87 02 FB | 	rdlong	local02, objptr
02d00     08 0E 86 F1 | 	sub	objptr, #8
02d04     07 87 62 FC | 	wrlong	local02, objptr
02d08                 | '   palette_ptr:=@fourcolors
02d08     0C 00 00 FF 
02d0c     08 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02d10     C0 0E 86 F1 | 	sub	objptr, #192
02d14     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02d18     18 0E 86 F1 | 	sub	objptr, #24
02d1c     0C 00 00 FF 
02d20     08 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02d24                 | LR__0074
02d24                 | ' 
02d24                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02d24     42 87 02 F6 | 	mov	local02, local01
02d28     01 00 00 FF 
02d2c     30 86 06 F5 | 	and	local02, ##560
02d30     01 00 00 FF 
02d34     00 86 0E F2 | 	cmp	local02, ##512 wz
02d38     44 00 90 5D |  if_ne	jmp	#LR__0075
02d3c                 | '   timings[5]:=32
02d3c     64 0E 06 F1 | 	add	objptr, #100
02d40     07 41 68 FC | 	wrlong	#32, objptr
02d44                 | '   timings[11]:=timings[11]>>2
02d44     18 0E 06 F1 | 	add	objptr, #24
02d48     07 87 02 FB | 	rdlong	local02, objptr
02d4c     02 86 46 F0 | 	shr	local02, #2
02d50     07 87 62 FC | 	wrlong	local02, objptr
02d54                 | '   putpixel:=p1
02d54     60 0E 06 F1 | 	add	objptr, #96
02d58     07 87 02 FB | 	rdlong	local02, objptr
02d5c     04 0E 86 F1 | 	sub	objptr, #4
02d60     07 87 62 FC | 	wrlong	local02, objptr
02d64                 | '   palette_ptr:=@twocolors
02d64     0C 00 00 FF 
02d68     00 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02d6c     C0 0E 86 F1 | 	sub	objptr, #192
02d70     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02d74     18 0E 86 F1 | 	sub	objptr, #24
02d78     0C 00 00 FF 
02d7c     00 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02d80                 | LR__0075
02d80                 | ' 
02d80                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02d80     42 87 02 F6 | 	mov	local02, local01
02d84     01 00 00 FF 
02d88     30 86 06 F5 | 	and	local02, ##560
02d8c     01 00 00 FF 
02d90     20 86 0E F2 | 	cmp	local02, ##544 wz
02d94     2C 00 90 5D |  if_ne	jmp	#LR__0076
02d98                 | '   putpixel:=p4
02d98     E4 0E 06 F1 | 	add	objptr, #228
02d9c     07 87 02 FB | 	rdlong	local02, objptr
02da0     0C 0E 86 F1 | 	sub	objptr, #12
02da4     07 87 62 FC | 	wrlong	local02, objptr
02da8                 | '   palette_ptr:=@vga16
02da8     0C 00 00 FF 
02dac     18 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02db0     C0 0E 86 F1 | 	sub	objptr, #192
02db4     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02db8     18 0E 86 F1 | 	sub	objptr, #24
02dbc     0C 00 00 FF 
02dc0     18 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02dc4                 | LR__0076
02dc4                 | ' 
02dc4                 | ' repeat i from 0 to 4
02dc4     00 94 06 F6 | 	mov	local09, #0
02dc8     90 D2 9F FE | 	loc	pa,	#(@LR__0078-@LR__0077)
02dcc     93 00 A0 FD | 	call	#FCACHE_LOAD_
02dd0                 | LR__0077
02dd0                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02dd0     4A 8B 02 F6 | 	mov	local04, local09
02dd4     02 8A 66 F0 | 	shl	local04, #2
02dd8     50 0E 06 F1 | 	add	objptr, #80
02ddc     07 8D 02 F6 | 	mov	local05, objptr
02de0     07 8B 02 F1 | 	add	local04, objptr
02de4     2C 0E 86 F1 | 	sub	objptr, #44
02de8     07 91 02 FB | 	rdlong	local07, objptr
02dec     48 8F 02 F6 | 	mov	local06, local07
02df0     11 8E 66 F0 | 	shl	local06, #17
02df4     45 87 02 FB | 	rdlong	local02, local04
02df8     47 87 02 F1 | 	add	local02, local06
02dfc     80 40 38 FF 
02e00     00 86 06 F1 | 	add	local02, ##1887502336
02e04     4A 93 02 F6 | 	mov	local08, local09
02e08     02 92 66 F0 | 	shl	local08, #2
02e0c     2C 0E 06 F1 | 	add	objptr, #44
02e10     07 97 02 F6 | 	mov	local10, objptr
02e14     07 93 02 F1 | 	add	local08, objptr
02e18     49 87 62 FC | 	wrlong	local02, local08
02e1c     01 94 06 F1 | 	add	local09, #1
02e20     05 94 5E F2 | 	cmps	local09, #5 wcz
02e24     50 0E 86 F1 | 	sub	objptr, #80
02e28     A4 FF 9F CD |  if_b	jmp	#LR__0077
02e2c                 | LR__0078
02e2c                 | ' timings[5]:=timings[5]+hdmibase<<17
02e2c     24 0E 06 F1 | 	add	objptr, #36
02e30     07 8B 02 FB | 	rdlong	local04, objptr
02e34     11 8A 66 F0 | 	shl	local04, #17
02e38     40 0E 06 F1 | 	add	objptr, #64
02e3c     07 8F 02 FB | 	rdlong	local06, objptr
02e40     47 87 02 F6 | 	mov	local02, local06
02e44     45 87 02 F1 | 	add	local02, local04
02e48     07 87 62 FC | 	wrlong	local02, objptr
02e4c                 | ' clkfreq:=timings[13]
02e4c     20 0E 06 F1 | 	add	objptr, #32
02e50     07 87 02 FB | 	rdlong	local02, objptr
02e54     14 86 66 FC | 	wrlong	local02, #20
02e58                 | ' hubset(timings[14])
02e58     04 0E 06 F1 | 	add	objptr, #4
02e5c     07 77 02 FB | 	rdlong	arg01, objptr
02e60     88 0E 86 F1 | 	sub	objptr, #136
02e64     00 76 62 FD | 	hubset	arg01
02e68                 | ' waitms(1)
02e68     01 76 06 F6 | 	mov	arg01, #1
02e6c     20 38 B0 FD | 	call	#__system___waitms
02e70                 | ' 
02e70                 | ' 
02e70                 | ' xzoom:=1<<(mode & 3)
02e70     42 8B 02 F6 | 	mov	local04, local01
02e74     03 8A 06 F5 | 	and	local04, #3
02e78     45 87 C2 F9 | 	decod	local02, local04
02e7c     CC 0E 06 F1 | 	add	objptr, #204
02e80     07 87 62 FC | 	wrlong	local02, objptr
02e84                 | ' 
02e84                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02e84     43 8B 02 F6 | 	mov	local04, local02
02e88     CC 0E 86 F1 | 	sub	objptr, #204
02e8c     08 8A 0E F2 | 	cmp	local04, #8 wz
02e90     24 00 90 5D |  if_ne	jmp	#LR__0079
02e94     42 8D 02 F6 | 	mov	local05, local01
02e98     04 8C 46 F0 | 	shr	local05, #4
02e9c     03 8C 06 F5 | 	and	local05, #3
02ea0     03 8C 0E F2 | 	cmp	local05, #3 wz
02ea4     10 00 90 AD |  if_e	jmp	#LR__0079
02ea8                 | '   xzoom:=4
02ea8     04 86 06 F6 | 	mov	local02, #4
02eac     CC 0E 06 F1 | 	add	objptr, #204
02eb0     07 09 68 FC | 	wrlong	#4, objptr
02eb4     CC 0E 86 F1 | 	sub	objptr, #204
02eb8                 | LR__0079
02eb8                 | ' 
02eb8                 | ' yzoom:=1<<((mode>>2) & 3)
02eb8     42 8B 02 F6 | 	mov	local04, local01
02ebc     02 8A 46 F0 | 	shr	local04, #2
02ec0     03 8A 06 F5 | 	and	local04, #3
02ec4     45 87 C2 F9 | 	decod	local02, local04
02ec8     D0 0E 06 F1 | 	add	objptr, #208
02ecc     07 87 62 FC | 	wrlong	local02, objptr
02ed0                 | ' azoom:=xzoom*yzoom
02ed0     04 0E 86 F1 | 	sub	objptr, #4
02ed4     07 8B 02 FB | 	rdlong	local04, objptr
02ed8     04 0E 06 F1 | 	add	objptr, #4
02edc     07 8F 02 FB | 	rdlong	local06, objptr
02ee0     47 8B 02 FD | 	qmul	local04, local06
02ee4     18 86 62 FD | 	getqx	local02
02ee8     04 0E 06 F1 | 	add	objptr, #4
02eec     07 87 62 FC | 	wrlong	local02, objptr
02ef0                 | ' 
02ef0                 | ' cpl:=timings[11]
02ef0     58 0E 86 F1 | 	sub	objptr, #88
02ef4     07 87 02 FB | 	rdlong	local02, objptr
02ef8     14 0E 06 F1 | 	add	objptr, #20
02efc     07 87 62 FC | 	wrlong	local02, objptr
02f00     90 0E 86 F1 | 	sub	objptr, #144
02f04                 | ' if (mode<512)
02f04     01 00 00 FF 
02f08     00 84 5E F2 | 	cmps	local01, ##512 wcz
02f0c     60 00 90 3D |  if_ae	jmp	#LR__0080
02f10                 | '   lines:=(timings[12]>>4)+/yzoom
02f10     80 0E 06 F1 | 	add	objptr, #128
02f14     07 D9 02 FB | 	rdlong	muldiva_, objptr
02f18     04 D8 46 F0 | 	shr	muldiva_, #4
02f1c     50 0E 06 F1 | 	add	objptr, #80
02f20     07 DB 02 FB | 	rdlong	muldivb_, objptr
02f24     D0 0E 86 F1 | 	sub	objptr, #208
02f28     CC 00 A0 FD | 	call	#unsdivide_
02f2c     94 0E 06 F1 | 	add	objptr, #148
02f30     07 DB 62 FC | 	wrlong	muldivb_, objptr
02f34                 | '   if ((timings[12]>>4)+//yzoom) <>0
02f34     14 0E 86 F1 | 	sub	objptr, #20
02f38     07 D9 02 FB | 	rdlong	muldiva_, objptr
02f3c     04 D8 46 F0 | 	shr	muldiva_, #4
02f40     50 0E 06 F1 | 	add	objptr, #80
02f44     07 DB 02 FB | 	rdlong	muldivb_, objptr
02f48     D0 0E 86 F1 | 	sub	objptr, #208
02f4c     CC 00 A0 FD | 	call	#unsdivide_
02f50     00 D8 0E F2 | 	cmp	muldiva_, #0 wz
02f54     AC 00 90 AD |  if_e	jmp	#LR__0083
02f58                 | '     lines +=1
02f58     94 0E 06 F1 | 	add	objptr, #148
02f5c     07 87 02 FB | 	rdlong	local02, objptr
02f60     01 86 06 F1 | 	add	local02, #1
02f64     07 87 62 FC | 	wrlong	local02, objptr
02f68     94 0E 86 F1 | 	sub	objptr, #148
02f6c                 | ' 
02f6c                 | ' else
02f6c     94 00 90 FD | 	jmp	#LR__0083
02f70                 | LR__0080
02f70                 | '   lines:=timings[12]/yzoom
02f70     80 0E 06 F1 | 	add	objptr, #128
02f74     07 D9 02 FB | 	rdlong	muldiva_, objptr
02f78     50 0E 06 F1 | 	add	objptr, #80
02f7c     07 DB 02 FB | 	rdlong	muldivb_, objptr
02f80     D0 0E 86 F1 | 	sub	objptr, #208
02f84     D0 00 A0 FD | 	call	#divide_
02f88     94 0E 06 F1 | 	add	objptr, #148
02f8c     07 DB 62 FC | 	wrlong	muldivb_, objptr
02f90                 | '   if cpl//xzoom==0
02f90     04 0E 86 F1 | 	sub	objptr, #4
02f94     07 D9 02 FB | 	rdlong	muldiva_, objptr
02f98     3C 0E 06 F1 | 	add	objptr, #60
02f9c     07 DB 02 FB | 	rdlong	muldivb_, objptr
02fa0     CC 0E 86 F1 | 	sub	objptr, #204
02fa4     D0 00 A0 FD | 	call	#divide_
02fa8     00 D8 0E F2 | 	cmp	muldiva_, #0 wz
02fac     28 00 90 5D |  if_ne	jmp	#LR__0081
02fb0                 | '     cpl:=cpl/xzoom
02fb0     90 0E 06 F1 | 	add	objptr, #144
02fb4     07 D9 02 FB | 	rdlong	muldiva_, objptr
02fb8     3C 0E 06 F1 | 	add	objptr, #60
02fbc     07 DB 02 FB | 	rdlong	muldivb_, objptr
02fc0     CC 0E 86 F1 | 	sub	objptr, #204
02fc4     D0 00 A0 FD | 	call	#divide_
02fc8     90 0E 06 F1 | 	add	objptr, #144
02fcc     07 DB 62 FC | 	wrlong	muldivb_, objptr
02fd0     90 0E 86 F1 | 	sub	objptr, #144
02fd4                 | '   else
02fd4     2C 00 90 FD | 	jmp	#LR__0082
02fd8                 | LR__0081
02fd8                 | '     cpl:=cpl/xzoom+1
02fd8     90 0E 06 F1 | 	add	objptr, #144
02fdc     07 D9 02 FB | 	rdlong	muldiva_, objptr
02fe0     3C 0E 06 F1 | 	add	objptr, #60
02fe4     07 DB 02 FB | 	rdlong	muldivb_, objptr
02fe8     CC 0E 86 F1 | 	sub	objptr, #204
02fec     D0 00 A0 FD | 	call	#divide_
02ff0     6D 87 02 F6 | 	mov	local02, muldivb_
02ff4     01 86 06 F1 | 	add	local02, #1
02ff8     90 0E 06 F1 | 	add	objptr, #144
02ffc     07 87 62 FC | 	wrlong	local02, objptr
03000     90 0E 86 F1 | 	sub	objptr, #144
03004                 | LR__0082
03004                 | LR__0083
03004                 | ' 
03004                 | ' buflen:=(cpl*lines)
03004     90 0E 06 F1 | 	add	objptr, #144
03008     07 8B 02 FB | 	rdlong	local04, objptr
0300c     04 0E 06 F1 | 	add	objptr, #4
03010     07 8F 02 FB | 	rdlong	local06, objptr
03014     47 8B 02 FD | 	qmul	local04, local06
03018     18 86 62 FD | 	getqx	local02
0301c     64 0E 86 F1 | 	sub	objptr, #100
03020     07 87 62 FC | 	wrlong	local02, objptr
03024                 | ' buf_ptr:=$80000-4*buflen
03024     43 8B 02 F6 | 	mov	local04, local02
03028     30 0E 86 F1 | 	sub	objptr, #48
0302c     02 8A 66 F0 | 	shl	local04, #2
03030     13 86 C6 F9 | 	decod	local02, #19
03034     45 87 82 F1 | 	sub	local02, local04
03038     07 87 62 FC | 	wrlong	local02, objptr
0303c                 | ' mode_ptr:=@timings
0303c     50 0E 06 F1 | 	add	objptr, #80
03040     07 87 02 F6 | 	mov	local02, objptr
03044     3C 0E 86 F1 | 	sub	objptr, #60
03048     07 87 62 FC | 	wrlong	local02, objptr
0304c                 | ' graphmode:=mode
0304c     B0 0E 06 F1 | 	add	objptr, #176
03050     07 85 62 FC | 	wrlong	local01, objptr
03054     C4 0E 86 F1 | 	sub	objptr, #196
03058                 | ' makedl(mode)
03058     42 77 02 F6 | 	mov	arg01, local01
0305c     0C 00 B0 FD | 	call	#_hng030rm_spin2_makedl
03060                 | LR__0084
03060     AF F0 03 F6 | 	mov	ptra, fp
03064     BF 00 A0 FD | 	call	#popregs_
03068                 | _hng030rm_spin2_setmode_ret
03068     2D 00 64 FD | 	ret
0306c                 | 
0306c                 | ' 
0306c                 | ' 
0306c                 | ' 
0306c                 | ' 
0306c                 | ' '---------- Make a display list
0306c                 | ' 
0306c                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
0306c                 | _hng030rm_spin2_makedl
0306c                 | ' 
0306c                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
0306c                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
0306c                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
0306c                 | ' 
0306c                 | ' '   0 - display a up/down border line
0306c                 | ' 
0306c                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
0306c                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
0306c                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
0306c                 | ' '    nnnn - font line to display, 0..15
0306c                 | ' '    llllll - character line, determines the cursor Y position
0306c                 | ' 
0306c                 | ' 
0306c                 | ' if (mode &256==0)
0306c     00 77 CE F7 | 	test	arg01, #256 wz
03070     1C 00 90 5D |  if_ne	jmp	#LR__0085
03074                 | '   dl_ptr:=buf_ptr-4*576
03074     07 37 02 FB | 	rdlong	_var01, objptr
03078     04 00 00 FF 
0307c     00 37 86 F1 | 	sub	_var01, ##2304
03080     1C 0E 06 F1 | 	add	objptr, #28
03084     07 37 62 FC | 	wrlong	_var01, objptr
03088     1C 0E 86 F1 | 	sub	objptr, #28
0308c                 | ' else
0308c     18 00 90 FD | 	jmp	#LR__0086
03090                 | LR__0085
03090                 | '   dl_ptr:=buf_ptr-4*496
03090     07 37 02 FB | 	rdlong	_var01, objptr
03094     03 00 00 FF 
03098     C0 37 86 F1 | 	sub	_var01, ##1984
0309c     1C 0E 06 F1 | 	add	objptr, #28
030a0     07 37 62 FC | 	wrlong	_var01, objptr
030a4     1C 0E 86 F1 | 	sub	objptr, #28
030a8                 | LR__0086
030a8                 | '  ' dl_ptr:=buf_ptr-4*540
030a8                 | ' 
030a8                 | ' vzoom:=((mode>>2) & 3)
030a8     3B 39 02 F6 | 	mov	_var02, arg01
030ac     02 38 46 F0 | 	shr	_var02, #2
030b0     03 38 06 F5 | 	and	_var02, #3
030b4                 | ' 
030b4                 | ' 
030b4                 | ' if mode<512 '' text modes
030b4     01 00 00 FF 
030b8     00 76 5E F2 | 	cmps	arg01, ##512 wcz
030bc     E8 01 90 3D |  if_ae	jmp	#LR__0094
030c0                 | ' 
030c0                 | '   if timings[6]>0 'borders
030c0     68 0E 06 F1 | 	add	objptr, #104
030c4     07 37 02 FB | 	rdlong	_var01, objptr
030c8     68 0E 86 F1 | 	sub	objptr, #104
030cc     00 36 5E F2 | 	cmps	_var01, #0 wcz
030d0     D4 00 90 ED |  if_be	jmp	#LR__0091
030d4                 | '     repeat i from 0 to timings[6]-1 '0 to -1
030d4     00 3A 06 F6 | 	mov	_var03, #0
030d8     68 0E 06 F1 | 	add	objptr, #104
030dc     07 3D 02 FB | 	rdlong	_var04, objptr
030e0     68 0E 86 F1 | 	sub	objptr, #104
030e4     01 3C 86 F1 | 	sub	_var04, #1
030e8     00 3C 5E F2 | 	cmps	_var04, #0 wcz
030ec     01 3E 06 16 |  if_a	mov	_var05, #1
030f0     01 3E 66 E6 |  if_be	neg	_var05, #1
030f4     1F 41 02 F6 | 	mov	_var06, _var05
030f8     1F 3D 02 F1 | 	add	_var04, _var05
030fc     28 CF 9F FE | 	loc	pa,	#(@LR__0088-@LR__0087)
03100     93 00 A0 FD | 	call	#FCACHE_LOAD_
03104                 | LR__0087
03104                 | '       long[dl_ptr+4*i]:=$0
03104     1C 0E 06 F1 | 	add	objptr, #28
03108     07 43 02 FB | 	rdlong	_var07, objptr
0310c     1C 0E 86 F1 | 	sub	objptr, #28
03110     1D 45 02 F6 | 	mov	_var08, _var03
03114     02 44 66 F0 | 	shl	_var08, #2
03118     22 43 02 F1 | 	add	_var07, _var08
0311c     21 01 68 FC | 	wrlong	#0, _var07
03120     20 3B 02 F1 | 	add	_var03, _var06
03124     1E 3B 0A F2 | 	cmp	_var03, _var04 wz
03128     D8 FF 9F 5D |  if_ne	jmp	#LR__0087
0312c                 | LR__0088
0312c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
0312c     68 0E 06 F1 | 	add	objptr, #104
03130     07 3B 02 FB | 	rdlong	_var03, objptr
03134     18 0E 06 F1 | 	add	objptr, #24
03138     07 3F 02 FB | 	rdlong	_var05, objptr
0313c     1F 3B 02 F1 | 	add	_var03, _var05
03140     0C 0E 06 F1 | 	add	objptr, #12
03144     07 47 02 FB | 	rdlong	_var09, objptr
03148     01 46 86 F1 | 	sub	_var09, #1
0314c     24 0E 86 F1 | 	sub	objptr, #36
03150     07 49 02 FB | 	rdlong	_var10, objptr
03154     18 0E 06 F1 | 	add	objptr, #24
03158     07 4B 02 FB | 	rdlong	_var11, objptr
0315c     80 0E 86 F1 | 	sub	objptr, #128
03160     25 49 02 F1 | 	add	_var10, _var11
03164     24 47 5A F2 | 	cmps	_var09, _var10 wcz
03168     01 44 06 16 |  if_a	mov	_var08, #1
0316c     01 44 66 E6 |  if_be	neg	_var08, #1
03170     22 4D 02 F6 | 	mov	_var12, _var08
03174     22 47 02 F1 | 	add	_var09, _var08
03178     AC CE 9F FE | 	loc	pa,	#(@LR__0090-@LR__0089)
0317c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03180                 | LR__0089
03180                 | '       long[dl_ptr+4*i]:=$0
03180     1C 0E 06 F1 | 	add	objptr, #28
03184     07 4F 02 FB | 	rdlong	_var13, objptr
03188     1C 0E 86 F1 | 	sub	objptr, #28
0318c     1D 51 02 F6 | 	mov	_var14, _var03
03190     02 50 66 F0 | 	shl	_var14, #2
03194     28 4F 02 F1 | 	add	_var13, _var14
03198     27 01 68 FC | 	wrlong	#0, _var13
0319c     26 3B 02 F1 | 	add	_var03, _var12
031a0     23 3B 0A F2 | 	cmp	_var03, _var09 wz
031a4     D8 FF 9F 5D |  if_ne	jmp	#LR__0089
031a8                 | LR__0090
031a8                 | LR__0091
031a8                 | '   lpc:=16<<vzoom
031a8     10 52 06 F6 | 	mov	_var15, #16
031ac     1C 53 62 F0 | 	shl	_var15, _var02
031b0                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
031b0     68 0E 06 F1 | 	add	objptr, #104
031b4     07 3B 02 FB | 	rdlong	_var03, objptr
031b8     1D 55 02 F6 | 	mov	_var16, _var03
031bc     18 0E 06 F1 | 	add	objptr, #24
031c0     07 57 02 FB | 	rdlong	_var17, objptr
031c4     2B 55 02 F1 | 	add	_var16, _var17
031c8     01 54 86 F1 | 	sub	_var16, #1
031cc     18 0E 86 F1 | 	sub	objptr, #24
031d0     07 45 02 FB | 	rdlong	_var08, objptr
031d4     68 0E 86 F1 | 	sub	objptr, #104
031d8     22 55 5A F2 | 	cmps	_var16, _var08 wcz
031dc     01 58 06 16 |  if_a	mov	_var18, #1
031e0     01 58 66 E6 |  if_be	neg	_var18, #1
031e4     2C 5B 02 F6 | 	mov	_var19, _var18
031e8     2C 55 02 F1 | 	add	_var16, _var18
031ec     C4 CE 9F FE | 	loc	pa,	#(@LR__0093-@LR__0092)
031f0     93 00 A0 FD | 	call	#FCACHE_LOAD_
031f4                 | LR__0092
031f4                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
031f4     1D D9 02 F6 | 	mov	muldiva_, _var03
031f8     68 0E 06 F1 | 	add	objptr, #104
031fc     07 5D 02 FB | 	rdlong	_var20, objptr
03200     68 0E 86 F1 | 	sub	objptr, #104
03204     2E D9 82 F1 | 	sub	muldiva_, _var20
03208     29 DB 02 F6 | 	mov	muldivb_, _var15
0320c     CC 00 A0 FD | 	call	#unsdivide_
03210     1C D9 42 F0 | 	shr	muldiva_, _var02
03214     6C 5F 02 F6 | 	mov	_var21, muldiva_
03218                 | '     charline:=(i-timings[6])+/lpc
03218     1D D9 02 F6 | 	mov	muldiva_, _var03
0321c     68 0E 06 F1 | 	add	objptr, #104
03220     07 61 02 FB | 	rdlong	_var22, objptr
03224     68 0E 86 F1 | 	sub	objptr, #104
03228     30 D9 82 F1 | 	sub	muldiva_, _var22
0322c     29 DB 02 F6 | 	mov	muldivb_, _var15
03230     CC 00 A0 FD | 	call	#unsdivide_
03234     6D 63 02 F6 | 	mov	_var23, muldivb_
03238                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
03238     07 4B 02 FB | 	rdlong	_var11, objptr
0323c     90 0E 06 F1 | 	add	objptr, #144
03240     07 5D 02 FB | 	rdlong	_var20, objptr
03244     31 5D 02 FD | 	qmul	_var20, _var23
03248     18 64 62 FD | 	getqx	_var24
0324c     02 64 66 F0 | 	shl	_var24, #2
03250     32 4B 02 F1 | 	add	_var11, _var24
03254     3B 51 02 F6 | 	mov	_var14, arg01
03258     03 50 06 F5 | 	and	_var14, #3
0325c     28 4B 02 F1 | 	add	_var11, _var14
03260                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03260     0C 4A 66 F0 | 	shl	_var11, #12
03264     2F 61 02 F6 | 	mov	_var22, _var21
03268     08 60 66 F0 | 	shl	_var22, #8
0326c     30 4B 02 F1 | 	add	_var11, _var22
03270     31 5D 02 F6 | 	mov	_var20, _var23
03274     02 5C 66 F0 | 	shl	_var20, #2
03278     2E 4B 02 F1 | 	add	_var11, _var20
0327c     01 4A 06 F1 | 	add	_var11, #1
03280     74 0E 86 F1 | 	sub	objptr, #116
03284     07 4F 02 FB | 	rdlong	_var13, objptr
03288     1C 0E 86 F1 | 	sub	objptr, #28
0328c     1D 51 02 F6 | 	mov	_var14, _var03
03290     02 50 66 F0 | 	shl	_var14, #2
03294     28 4F 02 F1 | 	add	_var13, _var14
03298     27 4B 62 FC | 	wrlong	_var11, _var13
0329c     2D 3B 02 F1 | 	add	_var03, _var19
032a0     2A 3B 0A F2 | 	cmp	_var03, _var16 wz
032a4     4C FF 9F 5D |  if_ne	jmp	#LR__0092
032a8                 | LR__0093
032a8                 | LR__0094
032a8                 | ' 
032a8                 | ' 
032a8                 | ' 
032a8                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
032a8     01 00 00 FF 
032ac     00 76 5E F2 | 	cmps	arg01, ##512 wcz
032b0     A8 01 90 CD |  if_b	jmp	#LR__0102
032b4                 | ' 
032b4                 | '   if timings[6]>0 'borders
032b4     68 0E 06 F1 | 	add	objptr, #104
032b8     07 37 02 FB | 	rdlong	_var01, objptr
032bc     68 0E 86 F1 | 	sub	objptr, #104
032c0     00 36 5E F2 | 	cmps	_var01, #0 wcz
032c4     D4 00 90 ED |  if_be	jmp	#LR__0099
032c8                 | '     repeat i from 0 to timings[6]-1 '0 to -1
032c8     00 3A 06 F6 | 	mov	_var03, #0
032cc     68 0E 06 F1 | 	add	objptr, #104
032d0     07 67 02 FB | 	rdlong	_var25, objptr
032d4     68 0E 86 F1 | 	sub	objptr, #104
032d8     01 66 86 F1 | 	sub	_var25, #1
032dc     00 66 5E F2 | 	cmps	_var25, #0 wcz
032e0     01 3E 06 16 |  if_a	mov	_var05, #1
032e4     01 3E 66 E6 |  if_be	neg	_var05, #1
032e8     1F 69 02 F6 | 	mov	_var26, _var05
032ec     1F 67 02 F1 | 	add	_var25, _var05
032f0     34 CD 9F FE | 	loc	pa,	#(@LR__0096-@LR__0095)
032f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
032f8                 | LR__0095
032f8                 | '       long[dl_ptr+4*i]:=$0
032f8     1C 0E 06 F1 | 	add	objptr, #28
032fc     07 43 02 FB | 	rdlong	_var07, objptr
03300     1C 0E 86 F1 | 	sub	objptr, #28
03304     1D 45 02 F6 | 	mov	_var08, _var03
03308     02 44 66 F0 | 	shl	_var08, #2
0330c     22 43 02 F1 | 	add	_var07, _var08
03310     21 01 68 FC | 	wrlong	#0, _var07
03314     34 3B 02 F1 | 	add	_var03, _var26
03318     33 3B 0A F2 | 	cmp	_var03, _var25 wz
0331c     D8 FF 9F 5D |  if_ne	jmp	#LR__0095
03320                 | LR__0096
03320                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03320     68 0E 06 F1 | 	add	objptr, #104
03324     07 3B 02 FB | 	rdlong	_var03, objptr
03328     18 0E 06 F1 | 	add	objptr, #24
0332c     07 3F 02 FB | 	rdlong	_var05, objptr
03330     1F 3B 02 F1 | 	add	_var03, _var05
03334     0C 0E 06 F1 | 	add	objptr, #12
03338     07 6B 02 FB | 	rdlong	_var27, objptr
0333c     01 6A 86 F1 | 	sub	_var27, #1
03340     24 0E 86 F1 | 	sub	objptr, #36
03344     07 49 02 FB | 	rdlong	_var10, objptr
03348     18 0E 06 F1 | 	add	objptr, #24
0334c     07 4B 02 FB | 	rdlong	_var11, objptr
03350     80 0E 86 F1 | 	sub	objptr, #128
03354     25 49 02 F1 | 	add	_var10, _var11
03358     24 6B 5A F2 | 	cmps	_var27, _var10 wcz
0335c     01 44 06 16 |  if_a	mov	_var08, #1
03360     01 44 66 E6 |  if_be	neg	_var08, #1
03364     22 6D 02 F6 | 	mov	_var28, _var08
03368     22 6B 02 F1 | 	add	_var27, _var08
0336c     B8 CC 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
03370     93 00 A0 FD | 	call	#FCACHE_LOAD_
03374                 | LR__0097
03374                 | '       long[dl_ptr+4*i]:=$0
03374     1C 0E 06 F1 | 	add	objptr, #28
03378     07 4F 02 FB | 	rdlong	_var13, objptr
0337c     1C 0E 86 F1 | 	sub	objptr, #28
03380     1D 51 02 F6 | 	mov	_var14, _var03
03384     02 50 66 F0 | 	shl	_var14, #2
03388     28 4F 02 F1 | 	add	_var13, _var14
0338c     27 01 68 FC | 	wrlong	#0, _var13
03390     36 3B 02 F1 | 	add	_var03, _var28
03394     35 3B 0A F2 | 	cmp	_var03, _var27 wz
03398     D8 FF 9F 5D |  if_ne	jmp	#LR__0097
0339c                 | LR__0098
0339c                 | LR__0099
0339c                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
0339c     68 0E 06 F1 | 	add	objptr, #104
033a0     07 3B 02 FB | 	rdlong	_var03, objptr
033a4     1D 6F 02 F6 | 	mov	_var29, _var03
033a8     18 0E 06 F1 | 	add	objptr, #24
033ac     07 57 02 FB | 	rdlong	_var17, objptr
033b0     2B 6F 02 F1 | 	add	_var29, _var17
033b4     01 6E 86 F1 | 	sub	_var29, #1
033b8     18 0E 86 F1 | 	sub	objptr, #24
033bc     07 45 02 FB | 	rdlong	_var08, objptr
033c0     68 0E 86 F1 | 	sub	objptr, #104
033c4     22 6F 5A F2 | 	cmps	_var29, _var08 wcz
033c8     01 58 06 16 |  if_a	mov	_var18, #1
033cc     01 58 66 E6 |  if_be	neg	_var18, #1
033d0     2C 71 02 F6 | 	mov	_var30, _var18
033d4     2C 6F 02 F1 | 	add	_var29, _var18
033d8     A0 CC 9F FE | 	loc	pa,	#(@LR__0101-@LR__0100)
033dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
033e0                 | LR__0100
033e0                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
033e0     07 4B 02 FB | 	rdlong	_var11, objptr
033e4     1D 61 02 F6 | 	mov	_var22, _var03
033e8     68 0E 06 F1 | 	add	objptr, #104
033ec     07 5D 02 FB | 	rdlong	_var20, objptr
033f0     2E 61 82 F1 | 	sub	_var22, _var20
033f4     1C 61 42 F0 | 	shr	_var22, _var02
033f8     28 0E 06 F1 | 	add	objptr, #40
033fc     07 51 02 FB | 	rdlong	_var14, objptr
03400     30 51 02 FD | 	qmul	_var14, _var22
03404     18 72 62 FD | 	getqx	_var31
03408     02 72 66 F0 | 	shl	_var31, #2
0340c     39 4B 02 F1 | 	add	_var11, _var31
03410     3B 75 02 F6 | 	mov	_var32, arg01
03414     03 74 06 F5 | 	and	_var32, #3
03418     3A 4B 02 F1 | 	add	_var11, _var32
0341c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
0341c     0C 4A 66 F0 | 	shl	_var11, #12
03420     02 4A 06 F1 | 	add	_var11, #2
03424     3B 61 02 F6 | 	mov	_var22, arg01
03428     30 60 06 F5 | 	and	_var22, #48
0342c     02 60 46 F0 | 	shr	_var22, #2
03430     30 4B 02 F1 | 	add	_var11, _var22
03434     74 0E 86 F1 | 	sub	objptr, #116
03438     07 5D 02 FB | 	rdlong	_var20, objptr
0343c     1C 0E 86 F1 | 	sub	objptr, #28
03440     1D 65 02 F6 | 	mov	_var24, _var03
03444     02 64 66 F0 | 	shl	_var24, #2
03448     32 5D 02 F1 | 	add	_var20, _var24
0344c     2E 4B 62 FC | 	wrlong	_var11, _var20
03450     38 3B 02 F1 | 	add	_var03, _var30
03454     37 3B 0A F2 | 	cmp	_var03, _var29 wz
03458     84 FF 9F 5D |  if_ne	jmp	#LR__0100
0345c                 | LR__0101
0345c                 | LR__0102
0345c                 | _hng030rm_spin2_makedl_ret
0345c     2D 00 64 FD | 	ret
03460                 | 
03460                 | '       
03460                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
03460                 | ' 
03460                 | ' pub start(mode,base):result
03460                 | _hng030rm_spin2_start
03460     04 5A 05 F6 | 	mov	COUNT_, #4
03464     B0 00 A0 FD | 	call	#pushregs_
03468     3B 85 02 F6 | 	mov	local01, arg01
0346c                 | ' 
0346c                 | ' ' initialize pointers and variables
0346c                 | ' 
0346c                 | ' border_ptr:=@bordercolor
0346c     2C 0E 06 F1 | 	add	objptr, #44
03470     07 87 02 F6 | 	mov	local02, objptr
03474     24 0E 86 F1 | 	sub	objptr, #36
03478     07 87 62 FC | 	wrlong	local02, objptr
0347c                 | ' font_ptr:=@st_font
0347c     08 00 00 FF 
03480     00 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
03484     04 0E 86 F1 | 	sub	objptr, #4
03488     07 1D 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
0348c                 | ' hdmibase:=base
0348c     20 0E 06 F1 | 	add	objptr, #32
03490     07 79 62 FC | 	wrlong	arg02, objptr
03494     24 0E 86 F1 | 	sub	objptr, #36
03498                 | ' p1:=@putpixel1
03498     07 77 02 F6 | 	mov	arg01, objptr
0349c     10 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
034a0     08 00 00 FF 
034a4     00 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
034a8     DC 2F B0 FD | 	call	#__system___make_methodptr
034ac     18 89 02 F6 | 	mov	local03, result1
034b0     DC 0E 06 F1 | 	add	objptr, #220
034b4     07 89 62 FC | 	wrlong	local03, objptr
034b8     DC 0E 86 F1 | 	sub	objptr, #220
034bc                 | ' p2:=@putpixel2
034bc     07 77 02 F6 | 	mov	arg01, objptr
034c0     11 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
034c4     C0 2F B0 FD | 	call	#__system___make_methodptr
034c8     18 89 02 F6 | 	mov	local03, result1
034cc     E0 0E 06 F1 | 	add	objptr, #224
034d0     07 89 62 FC | 	wrlong	local03, objptr
034d4     E0 0E 86 F1 | 	sub	objptr, #224
034d8                 | ' p4:=@putpixel4
034d8     07 77 02 F6 | 	mov	arg01, objptr
034dc     12 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
034e0     A4 2F B0 FD | 	call	#__system___make_methodptr
034e4     18 89 02 F6 | 	mov	local03, result1
034e8     E4 0E 06 F1 | 	add	objptr, #228
034ec     07 89 62 FC | 	wrlong	local03, objptr
034f0     E4 0E 86 F1 | 	sub	objptr, #228
034f4                 | ' p8:=@putpixel8
034f4     07 77 02 F6 | 	mov	arg01, objptr
034f8     13 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
034fc     88 2F B0 FD | 	call	#__system___make_methodptr
03500     18 89 02 F6 | 	mov	local03, result1
03504     E8 0E 06 F1 | 	add	objptr, #232
03508     07 89 62 FC | 	wrlong	local03, objptr
0350c     E8 0E 86 F1 | 	sub	objptr, #232
03510                 | ' 
03510                 | ' 
03510                 | ' ' the mode has to be set here to enable computing the buffer length
03510                 | ' 
03510                 | ' setmode(mode)
03510     42 77 02 F6 | 	mov	arg01, local01
03514     68 F5 BF FD | 	call	#_hng030rm_spin2_setmode
03518                 | ' 
03518                 | ' vblank_ptr:=@vblank
03518     40 0E 06 F1 | 	add	objptr, #64
0351c     07 87 02 F6 | 	mov	local02, objptr
03520     34 0E 86 F1 | 	sub	objptr, #52
03524     07 87 62 FC | 	wrlong	local02, objptr
03528                 | ' cursor_ptr:=@cursor_x
03528     28 0E 06 F1 | 	add	objptr, #40
0352c     07 87 02 F6 | 	mov	local02, objptr
03530     24 0E 86 F1 | 	sub	objptr, #36
03534     07 87 62 FC | 	wrlong	local02, objptr
03538                 | ' 
03538                 | ' fontnum_ptr:=@fontnum
03538     88 0E 06 F1 | 	add	objptr, #136
0353c     07 87 02 F6 | 	mov	local02, objptr
03540     78 0E 86 F1 | 	sub	objptr, #120
03544     07 87 62 FC | 	wrlong	local02, objptr
03548                 | ' 
03548                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
03548     78 0E 06 F1 | 	add	objptr, #120
0354c     07 01 68 FC | 	wrlong	#0, objptr
03550                 | ' bytemove(@colors,@vgacolors,16)
03550     1C 0E 06 F1 | 	add	objptr, #28
03554     07 77 02 F6 | 	mov	arg01, objptr
03558     B4 0E 86 F1 | 	sub	objptr, #180
0355c     0F 00 00 FF 
03560     58 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
03564     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03568     0F 00 00 FF 
0356c     58 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
03570     10 7A 06 F6 | 	mov	arg03, #16
03574     B8 2D B0 FD | 	call	#__system____builtin_memmove
03578                 | ' 
03578                 | ' ' initialize a cursor
03578                 | ' 
03578                 | ' cursor_x:=0
03578     34 0E 06 F1 | 	add	objptr, #52
0357c     07 01 48 FC | 	wrbyte	#0, objptr
03580                 | ' cursor_y:=0
03580     01 0E 06 F1 | 	add	objptr, #1
03584     07 01 48 FC | 	wrbyte	#0, objptr
03588                 | ' cursor_sh:=14
03588     01 0E 06 F1 | 	add	objptr, #1
0358c     07 1D 48 FC | 	wrbyte	#14, objptr
03590     36 0E 86 F1 | 	sub	objptr, #54
03594                 | ' 
03594                 | ' 
03594                 | ' ' start the cog
03594                 | ' 
03594                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
03594     0F 00 00 FF 
03598     68 1C 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
0359c     0E 79 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
035a0     0F 00 00 FF 
035a4     68 1C 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
035a8     07 7B 02 F6 | 	mov	arg03, objptr
035ac     10 76 06 F6 | 	mov	arg01, #16
035b0     28 7A 62 FD | 	setq	arg03
035b4     3C 77 F2 FC | 	coginit	arg01, arg02 wc
035b8     01 76 66 C6 |  if_b	neg	arg01, #1
035bc     3B 31 02 F6 | 	mov	result1, arg01
035c0     18 8B 02 F6 | 	mov	local04, result1
035c4     28 0E 06 F1 | 	add	objptr, #40
035c8     07 8B 62 FC | 	wrlong	local04, objptr
035cc     28 0E 86 F1 | 	sub	objptr, #40
035d0                 | ' waitms(20)
035d0     14 76 06 F6 | 	mov	arg01, #20
035d4     B8 30 B0 FD | 	call	#__system___waitms
035d8                 | ' 
035d8                 | ' ' clear the screen and set the colors to green on black
035d8                 | ' 
035d8                 | ' cls(c_green,c_black)
035d8     C7 76 06 F6 | 	mov	arg01, #199
035dc     00 78 06 F6 | 	mov	arg02, #0
035e0     18 ED BF FD | 	call	#_hng030rm_spin2_cls
035e4                 | ' setbordercolor(0,0,128)
035e4     00 76 06 F6 | 	mov	arg01, #0
035e8     00 78 06 F6 | 	mov	arg02, #0
035ec     80 7A 06 F6 | 	mov	arg03, #128
035f0     E4 EC BF FD | 	call	#_hng030rm_spin2_setbordercolor
035f4                 | ' setwritecolors(c_green,c_black)
035f4                 | ' 
035f4                 | ' 
035f4                 | ' write_color:=ff
035f4     38 0E 06 F1 | 	add	objptr, #56
035f8     07 8F 69 FC | 	wrlong	#199, objptr
035fc                 | ' write_background:=bb
035fc     04 0E 06 F1 | 	add	objptr, #4
03600     07 01 68 FC | 	wrlong	#0, objptr
03604                 | ' 
03604                 | ' return cog
03604     14 0E 86 F1 | 	sub	objptr, #20
03608     07 31 02 FB | 	rdlong	result1, objptr
0360c     28 0E 86 F1 | 	sub	objptr, #40
03610     AF F0 03 F6 | 	mov	ptra, fp
03614     BF 00 A0 FD | 	call	#popregs_
03618                 | _hng030rm_spin2_start_ret
03618     2D 00 64 FD | 	ret
0361c                 | 
0361c                 | ' 'this is the object and not a program
0361c                 | ' 
0361c                 | ' pub start() :cog
0361c                 | _retrocog_spin2_start
0361c     02 5A 05 F6 | 	mov	COUNT_, #2
03620     B0 00 A0 FD | 	call	#pushregs_
03624                 | ' 
03624                 | ' cog:=cogspin(16,serialcog(),@serialstack)
03624     07 85 02 F6 | 	mov	local01, objptr
03628     01 00 00 FF 
0362c     40 0F 06 F1 | 	add	objptr, ##832
03630     07 87 02 F6 | 	mov	local02, objptr
03634     43 85 62 FC | 	wrlong	local01, local02
03638     04 86 06 F1 | 	add	local02, #4
0363c     43 29 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
03640     07 7B 02 F6 | 	mov	arg03, objptr
03644     01 00 00 FF 
03648     40 0F 86 F1 | 	sub	objptr, ##832
0364c     10 76 06 F6 | 	mov	arg01, #16
03650     28 7A 62 FD | 	setq	arg03
03654     04 77 F2 FC | 	coginit	arg01, entryptr__ wc
03658     01 76 66 C6 |  if_b	neg	arg01, #1
0365c     3B 31 02 F6 | 	mov	result1, arg01
03660                 | ' return cog
03660     AF F0 03 F6 | 	mov	ptra, fp
03664     BF 00 A0 FD | 	call	#popregs_
03668                 | _retrocog_spin2_start_ret
03668     2D 00 64 FD | 	ret
0366c                 | 
0366c                 | ' 
0366c                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
0366c                 | _retrocog_spin2_serialcog
0366c     0C 5A 05 F6 | 	mov	COUNT_, #12
03670     B0 00 A0 FD | 	call	#pushregs_
03674                 | ' 
03674                 | ' 'start serial and midi
03674                 | ' 
03674                 | ' serial_start(rxpin, txpin, baudrate)
03674     20 76 06 F6 | 	mov	arg01, #32
03678     21 78 06 F6 | 	mov	arg02, #33
0367c     A6 0E 00 FF 
03680     00 7A 06 F6 | 	mov	arg03, ##1920000
03684     AC 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03688                 | ' serial_start(midiin,midiout,mbaudrate)
03688     1D 76 06 F6 | 	mov	arg01, #29
0368c     1E 78 06 F6 | 	mov	arg02, #30
03690     3D 00 00 FF 
03694     12 7A 06 F6 | 	mov	arg03, ##31250
03698     98 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0369c                 | ' serial_start(srxpin,stxpin,sbaudrate)
0369c     42 0F 00 FF 
036a0     80 84 06 F6 | 	mov	local01, ##2000000
036a4     3F 76 06 F6 | 	mov	arg01, #63
036a8     3E 78 06 F6 | 	mov	arg02, #62
036ac     42 0F 00 FF 
036b0     80 7A 06 F6 | 	mov	arg03, ##2000000
036b4     7C 05 B0 FD | 	call	#_retrocog_spin2_serial_start
036b8                 | ' 
036b8                 | ' mb:=(-1)
036b8     01 86 66 F6 | 	neg	local02, #1
036bc                 | ' b:=(-1)
036bc     01 88 66 F6 | 	neg	local03, #1
036c0                 | ' 
036c0                 | ' mousefront:=0
036c0     00 8A 06 F6 | 	mov	local04, #0
036c4     08 0E 06 F1 | 	add	objptr, #8
036c8     07 01 68 FC | 	wrlong	#0, objptr
036cc                 | ' mousetail:=0
036cc     04 0E 06 F1 | 	add	objptr, #4
036d0     07 01 68 FC | 	wrlong	#0, objptr
036d4     0C 0E 86 F1 | 	sub	objptr, #12
036d8                 | ' kbdfront:=0
036d8     07 01 68 FC | 	wrlong	#0, objptr
036dc                 | ' kbdtail:=0
036dc     04 0E 06 F1 | 	add	objptr, #4
036e0     07 01 68 FC | 	wrlong	#0, objptr
036e4                 | ' midifront:=0
036e4     0C 0E 06 F1 | 	add	objptr, #12
036e8     07 01 68 FC | 	wrlong	#0, objptr
036ec                 | ' miditail:=0
036ec     04 0E 06 F1 | 	add	objptr, #4
036f0     07 01 68 FC | 	wrlong	#0, objptr
036f4                 | ' serialfront:=0
036f4     04 0E 06 F1 | 	add	objptr, #4
036f8     07 01 68 FC | 	wrlong	#0, objptr
036fc                 | ' serialtail:=0
036fc     04 0E 06 F1 | 	add	objptr, #4
03700     07 01 68 FC | 	wrlong	#0, objptr
03704                 | ' long[$30]:=0
03704     30 00 6C FC | 	wrlong	#0, #48
03708                 | ' long[$34]:=0
03708     34 00 6C FC | 	wrlong	#0, #52
0370c                 | ' long[$38]:=0
0370c     38 00 6C FC | 	wrlong	#0, #56
03710     1C 0E 86 F1 | 	sub	objptr, #28
03714                 | ' long[$3C]:=0
03714     3C 00 6C FC | 	wrlong	#0, #60
03718                 | ' 
03718                 | ' repeat
03718                 | LR__0103
03718                 | ' 
03718                 | ' '  repeat 
03718                 | '   rr:=rxcheck(rxpin)
03718     20 76 06 F6 | 	mov	arg01, #32
0371c     90 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03720     18 8D 02 F6 | 	mov	local05, result1
03724                 | '   mrr:=rxcheck(midiin)
03724     1D 76 06 F6 | 	mov	arg01, #29
03728     84 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
0372c     18 8F 02 F6 | 	mov	local06, result1
03730                 | '   srr:=rxcheck(srxpin)
03730     3F 8A 06 F6 | 	mov	local04, #63
03734     3F 76 06 F6 | 	mov	arg01, #63
03738     74 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
0373c     18 91 02 F6 | 	mov	local07, result1
03740     48 93 02 F6 | 	mov	local08, local07
03744                 | ' 
03744                 | ' '  until rr>=0 || mrr>=0  || srr>=0
03744                 | ' 
03744                 | '   
03744                 | ' ' midi. Must be >= $80 for a command
03744                 | ' '$80-$8F - 3 bytes note off. note, velocity
03744                 | ' '$90-$9F - 3 bytes note on, note, velocity
03744                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
03744                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
03744                 | ' '$C0-$CF - 2 bytes program change
03744                 | ' '$D0-$DF - 2 bytes mono aftertouch
03744                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
03744                 | ' '$F0-$FF - 1 byte
03744                 | '   
03744                 | '   if srr>=0
03744     00 92 5E F2 | 	cmps	local08, #0 wcz
03748     78 00 90 CD |  if_b	jmp	#LR__0105
0374c                 | '   
0374c                 | '     if serialfront<>((serialtail-1) //32)
0374c     1C 0E 06 F1 | 	add	objptr, #28
03750     07 91 02 FB | 	rdlong	local07, objptr
03754     48 8B 02 F6 | 	mov	local04, local07
03758     01 8A 86 F1 | 	sub	local04, #1
0375c     45 85 52 F6 | 	abs	local01, local04 wc
03760     1F 84 06 F5 | 	and	local01, #31
03764     42 85 62 C6 |  if_b	neg	local01, local01
03768     04 0E 86 F1 | 	sub	objptr, #4
0376c     07 95 02 FB | 	rdlong	local09, objptr
03770     18 0E 86 F1 | 	sub	objptr, #24
03774     4A 97 02 F6 | 	mov	local10, local09
03778     42 97 0A F2 | 	cmp	local10, local01 wz
0377c     44 00 90 AD |  if_e	jmp	#LR__0104
03780                 | '       serialbuf[serialfront]:=srr
03780     18 0E 06 F1 | 	add	objptr, #24
03784     07 8B 02 FB | 	rdlong	local04, objptr
03788     01 00 00 FF 
0378c     08 0F 06 F1 | 	add	objptr, ##776
03790     07 8B 02 F1 | 	add	local04, objptr
03794     45 93 42 FC | 	wrbyte	local08, local04
03798                 | '       serialfront+=1
03798     01 00 00 FF 
0379c     08 0F 86 F1 | 	sub	objptr, ##776
037a0     07 85 02 FB | 	rdlong	local01, objptr
037a4     01 84 06 F1 | 	add	local01, #1
037a8     07 85 62 FC | 	wrlong	local01, objptr
037ac                 | '       serialfront:=serialfront // 32
037ac     42 91 02 F6 | 	mov	local07, local01
037b0     48 8B 52 F6 | 	abs	local04, local07 wc
037b4     1F 8A 06 F5 | 	and	local04, #31
037b8     45 8B 62 C6 |  if_b	neg	local04, local04
037bc     07 8B 62 FC | 	wrlong	local04, objptr
037c0     18 0E 86 F1 | 	sub	objptr, #24
037c4                 | LR__0104
037c4                 | LR__0105
037c4                 | '     
037c4                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
037c4     80 8E 5E F2 | 	cmps	local06, #128 wcz
037c8     08 00 90 CD |  if_b	jmp	#LR__0106
037cc     BF 8E 5E F2 | 	cmps	local06, #191 wcz
037d0     10 00 90 ED |  if_be	jmp	#LR__0107
037d4                 | LR__0106
037d4     E0 8E 5E F2 | 	cmps	local06, #224 wcz
037d8     18 00 90 CD |  if_b	jmp	#LR__0108
037dc     EF 8E 5E F2 | 	cmps	local06, #239 wcz
037e0     10 00 90 1D |  if_a	jmp	#LR__0108
037e4                 | LR__0107
037e4                 | '     mb:=2
037e4     02 86 06 F6 | 	mov	local02, #2
037e8                 | '     midireport:=mrr<<24
037e8     47 8B 02 F6 | 	mov	local04, local06
037ec     18 8A 66 F0 | 	shl	local04, #24
037f0     45 99 02 F6 | 	mov	local11, local04
037f4                 | LR__0108
037f4                 | ' 
037f4                 | '   if (mrr>=$C0) && (mrr<=$DF)
037f4     C0 8E 5E F2 | 	cmps	local06, #192 wcz
037f8     18 00 90 CD |  if_b	jmp	#LR__0109
037fc     DF 8E 5E F2 | 	cmps	local06, #223 wcz
03800     10 00 90 1D |  if_a	jmp	#LR__0109
03804                 | '     mb:=1
03804     01 86 06 F6 | 	mov	local02, #1
03808                 | '     midireport:=mrr<<24
03808     47 8B 02 F6 | 	mov	local04, local06
0380c     18 8A 66 F0 | 	shl	local04, #24
03810     45 99 02 F6 | 	mov	local11, local04
03814                 | LR__0109
03814                 | '   
03814                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
03814     F0 8E 5E F2 | 	cmps	local06, #240 wcz
03818                 | '     mb:=4
03818     04 86 06 36 |  if_ae	mov	local02, #4
0381c                 | '     midireport:=mrr<<24  
0381c     47 99 02 36 |  if_ae	mov	local11, local06
03820     18 98 66 30 |  if_ae	shl	local11, #24
03824                 | '   
03824                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
03824     80 8E 5E F2 | 	cmps	local06, #128 wcz
03828     44 00 90 3D |  if_ae	jmp	#LR__0111
0382c     00 86 5E F2 | 	cmps	local02, #0 wcz
03830     3C 00 90 ED |  if_be	jmp	#LR__0111
03834     00 8E 5E F2 | 	cmps	local06, #0 wcz
03838     34 00 90 CD |  if_b	jmp	#LR__0111
0383c                 | '     
0383c                 | '     mb--
0383c     43 8B 02 F6 | 	mov	local04, local02
03840     43 91 02 F6 | 	mov	local07, local02
03844     01 90 86 F1 | 	sub	local07, #1
03848     48 87 02 F6 | 	mov	local02, local07
0384c                 | '     if mb<3
0384c     03 86 5E F2 | 	cmps	local02, #3 wcz
03850     1C 00 90 3D |  if_ae	jmp	#LR__0110
03854                 | '       midireport+=mrr<<(mb<<3)
03854     4C 8B 02 F6 | 	mov	local04, local11
03858     47 91 02 F6 | 	mov	local07, local06
0385c     43 85 02 F6 | 	mov	local01, local02
03860     03 84 66 F0 | 	shl	local01, #3
03864     42 91 62 F0 | 	shl	local07, local01
03868     48 8B 02 F1 | 	add	local04, local07
0386c     45 99 02 F6 | 	mov	local11, local04
03870                 | LR__0110
03870                 | LR__0111
03870                 | '   
03870                 | '   if mb==0
03870     00 86 0E F2 | 	cmp	local02, #0 wz
03874     80 00 90 5D |  if_ne	jmp	#LR__0113
03878                 | '     
03878                 | '     if midifront<>((miditail-1) //32)
03878     14 0E 06 F1 | 	add	objptr, #20
0387c     07 91 02 FB | 	rdlong	local07, objptr
03880     48 8B 02 F6 | 	mov	local04, local07
03884     01 8A 86 F1 | 	sub	local04, #1
03888     45 85 52 F6 | 	abs	local01, local04 wc
0388c     1F 84 06 F5 | 	and	local01, #31
03890     42 85 62 C6 |  if_b	neg	local01, local01
03894     04 0E 86 F1 | 	sub	objptr, #4
03898     07 95 02 FB | 	rdlong	local09, objptr
0389c     10 0E 86 F1 | 	sub	objptr, #16
038a0     4A 97 02 F6 | 	mov	local10, local09
038a4     42 97 0A F2 | 	cmp	local10, local01 wz
038a8     48 00 90 AD |  if_e	jmp	#LR__0112
038ac                 | '       midibuf[midifront]:=midireport
038ac     10 0E 06 F1 | 	add	objptr, #16
038b0     07 8B 02 FB | 	rdlong	local04, objptr
038b4     02 8A 66 F0 | 	shl	local04, #2
038b8     01 00 00 FF 
038bc     90 0E 06 F1 | 	add	objptr, ##656
038c0     07 8B 02 F1 | 	add	local04, objptr
038c4     45 99 62 FC | 	wrlong	local11, local04
038c8                 | '       midifront+=1
038c8     01 00 00 FF 
038cc     90 0E 86 F1 | 	sub	objptr, ##656
038d0     07 85 02 FB | 	rdlong	local01, objptr
038d4     01 84 06 F1 | 	add	local01, #1
038d8     07 85 62 FC | 	wrlong	local01, objptr
038dc                 | '       midifront:=midifront // 32
038dc     42 91 02 F6 | 	mov	local07, local01
038e0     48 8B 52 F6 | 	abs	local04, local07 wc
038e4     1F 8A 06 F5 | 	and	local04, #31
038e8     45 8B 62 C6 |  if_b	neg	local04, local04
038ec     07 8B 62 FC | 	wrlong	local04, objptr
038f0     10 0E 86 F1 | 	sub	objptr, #16
038f4                 | LR__0112
038f4                 | '     mb:=(-1)
038f4     01 86 66 F6 | 	neg	local02, #1
038f8                 | LR__0113
038f8                 | ' 
038f8                 | ' 'Keyboard and mouse
038f8                 | ' 
038f8                 | '   if (rr>=$80) && (rr<>$FF)
038f8     80 8C 5E F2 | 	cmps	local05, #128 wcz
038fc     18 00 90 CD |  if_b	jmp	#LR__0114
03900     FF 8C 0E F2 | 	cmp	local05, #255 wz
03904     10 00 90 AD |  if_e	jmp	#LR__0114
03908                 | '     b:=3
03908     03 88 06 F6 | 	mov	local03, #3
0390c                 | '     kbmreport:=rr<<24
0390c     46 8B 02 F6 | 	mov	local04, local05
03910     18 8A 66 F0 | 	shl	local04, #24
03914     45 9B 02 F6 | 	mov	local12, local04
03918                 | LR__0114
03918                 | '   
03918                 | '   if (rr<$80) && (b>0) && (rr>=0)
03918     80 8C 5E F2 | 	cmps	local05, #128 wcz
0391c     30 00 90 3D |  if_ae	jmp	#LR__0115
03920     00 88 5E F2 | 	cmps	local03, #0 wcz
03924     28 00 90 ED |  if_be	jmp	#LR__0115
03928     00 8C 5E F2 | 	cmps	local05, #0 wcz
0392c     20 00 90 CD |  if_b	jmp	#LR__0115
03930                 | '     b--
03930     01 88 86 F1 | 	sub	local03, #1
03934                 | '     kbmreport+=rr<<(b<<3)  
03934     4D 8B 02 F6 | 	mov	local04, local12
03938     46 91 02 F6 | 	mov	local07, local05
0393c     44 85 02 F6 | 	mov	local01, local03
03940     03 84 66 F0 | 	shl	local01, #3
03944     42 91 62 F0 | 	shl	local07, local01
03948     48 8B 02 F1 | 	add	local04, local07
0394c     45 9B 02 F6 | 	mov	local12, local04
03950                 | LR__0115
03950                 | '   
03950                 | '   if (rr==$FF)
03950     FF 8C 0E F2 | 	cmp	local05, #255 wz
03954                 | '     b:=0   
03954     00 88 06 A6 |  if_e	mov	local03, #0
03958                 | ' 
03958                 | '   if b==0  
03958     00 88 0E F2 | 	cmp	local03, #0 wz
0395c     0C 01 90 5D |  if_ne	jmp	#LR__0120
03960                 | '  
03960                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03960     00 00 40 FF 
03964     00 9A 1E F2 | 	cmp	local12, ##-2147483648 wcz
03968     80 00 90 CD |  if_b	jmp	#LR__0117
0396c     00 80 43 FF 
03970     00 9A 1E F2 | 	cmp	local12, ##-2030043136 wcz
03974     74 00 90 3D |  if_ae	jmp	#LR__0117
03978                 | '       if mousefront<>((mousetail-1) //128)
03978     0C 0E 06 F1 | 	add	objptr, #12
0397c     07 91 02 FB | 	rdlong	local07, objptr
03980     48 8B 02 F6 | 	mov	local04, local07
03984     01 8A 86 F1 | 	sub	local04, #1
03988     45 85 52 F6 | 	abs	local01, local04 wc
0398c     7F 84 06 F5 | 	and	local01, #127
03990     42 85 62 C6 |  if_b	neg	local01, local01
03994     04 0E 86 F1 | 	sub	objptr, #4
03998     07 95 02 FB | 	rdlong	local09, objptr
0399c     08 0E 86 F1 | 	sub	objptr, #8
039a0     4A 97 02 F6 | 	mov	local10, local09
039a4     42 97 0A F2 | 	cmp	local10, local01 wz
039a8     40 00 90 AD |  if_e	jmp	#LR__0116
039ac                 | '         mousebuf[mousefront]:=kbmreport
039ac     08 0E 06 F1 | 	add	objptr, #8
039b0     07 8B 02 FB | 	rdlong	local04, objptr
039b4     02 8A 66 F0 | 	shl	local04, #2
039b8     98 0E 06 F1 | 	add	objptr, #152
039bc     07 8B 02 F1 | 	add	local04, objptr
039c0     45 9B 62 FC | 	wrlong	local12, local04
039c4                 | '         mousefront+=1
039c4     98 0E 86 F1 | 	sub	objptr, #152
039c8     07 85 02 FB | 	rdlong	local01, objptr
039cc     01 84 06 F1 | 	add	local01, #1
039d0     07 85 62 FC | 	wrlong	local01, objptr
039d4                 | '         mousefront:=mousefront // 128
039d4     42 91 02 F6 | 	mov	local07, local01
039d8     48 8B 52 F6 | 	abs	local04, local07 wc
039dc     7F 8A 06 F5 | 	and	local04, #127
039e0     45 8B 62 C6 |  if_b	neg	local04, local04
039e4     07 8B 62 FC | 	wrlong	local04, objptr
039e8     08 0E 86 F1 | 	sub	objptr, #8
039ec                 | LR__0116
039ec                 | LR__0117
039ec                 | '     b:=(-1)
039ec     01 88 66 F6 | 	neg	local03, #1
039f0                 | ' 
039f0                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
039f0     00 80 43 FF 
039f4     00 9A 1E F2 | 	cmp	local12, ##-2030043136 wcz
039f8     6C 00 90 CD |  if_b	jmp	#LR__0119
039fc     00 00 45 FF 
03a00     00 9A 1E F2 | 	cmp	local12, ##-1979711488 wcz
03a04     60 00 90 3D |  if_ae	jmp	#LR__0119
03a08                 | '       if kbdfront<>((kbdtail-1) //32)
03a08     04 0E 06 F1 | 	add	objptr, #4
03a0c     07 91 02 FB | 	rdlong	local07, objptr
03a10     04 0E 86 F1 | 	sub	objptr, #4
03a14     48 8B 02 F6 | 	mov	local04, local07
03a18     01 8A 86 F1 | 	sub	local04, #1
03a1c     45 85 52 F6 | 	abs	local01, local04 wc
03a20     1F 84 06 F5 | 	and	local01, #31
03a24     42 85 62 C6 |  if_b	neg	local01, local01
03a28     07 97 02 FB | 	rdlong	local10, objptr
03a2c     42 97 0A F2 | 	cmp	local10, local01 wz
03a30     34 00 90 AD |  if_e	jmp	#LR__0118
03a34                 | '         kbdbuf[kbdfront]:=kbmreport
03a34     07 8B 02 FB | 	rdlong	local04, objptr
03a38     02 8A 66 F0 | 	shl	local04, #2
03a3c     20 0E 06 F1 | 	add	objptr, #32
03a40     07 8B 02 F1 | 	add	local04, objptr
03a44     45 9B 62 FC | 	wrlong	local12, local04
03a48                 | '         kbdfront+=1
03a48     20 0E 86 F1 | 	sub	objptr, #32
03a4c     07 91 02 FB | 	rdlong	local07, objptr
03a50     01 90 06 F1 | 	add	local07, #1
03a54     07 91 62 FC | 	wrlong	local07, objptr
03a58                 | '         kbdfront:=kbdfront // 32
03a58     48 8B 52 F6 | 	abs	local04, local07 wc
03a5c     1F 8A 06 F5 | 	and	local04, #31
03a60     45 8B 62 C6 |  if_b	neg	local04, local04
03a64     07 8B 62 FC | 	wrlong	local04, objptr
03a68                 | LR__0118
03a68                 | LR__0119
03a68                 | '     b:=(-1)
03a68     01 88 66 F6 | 	neg	local03, #1
03a6c                 | LR__0120
03a6c                 | ' 
03a6c                 | ' 
03a6c                 | '   if long[$30]==0
03a6c     30 8A 0E FB | 	rdlong	local04, #48 wz
03a70     5C 00 90 5D |  if_ne	jmp	#LR__0122
03a74                 | '     if kbdfront<>kbdtail
03a74     07 8B 02 FB | 	rdlong	local04, objptr
03a78     04 0E 06 F1 | 	add	objptr, #4
03a7c     07 85 02 FB | 	rdlong	local01, objptr
03a80     04 0E 86 F1 | 	sub	objptr, #4
03a84     42 8B 0A F2 | 	cmp	local04, local01 wz
03a88     44 00 90 AD |  if_e	jmp	#LR__0121
03a8c                 | '       long[$30]:=kbdbuf[kbdtail]
03a8c     04 0E 06 F1 | 	add	objptr, #4
03a90     07 8B 02 FB | 	rdlong	local04, objptr
03a94     02 8A 66 F0 | 	shl	local04, #2
03a98     1C 0E 06 F1 | 	add	objptr, #28
03a9c     07 8B 02 F1 | 	add	local04, objptr
03aa0     45 97 02 FB | 	rdlong	local10, local04
03aa4     30 96 66 FC | 	wrlong	local10, #48
03aa8                 | '       kbdtail++
03aa8     1C 0E 86 F1 | 	sub	objptr, #28
03aac     07 97 02 FB | 	rdlong	local10, objptr
03ab0     4B 85 02 F6 | 	mov	local01, local10
03ab4     01 84 06 F1 | 	add	local01, #1
03ab8     07 85 62 FC | 	wrlong	local01, objptr
03abc                 | '       kbdtail:= kbdtail // 32
03abc     42 8B 52 F6 | 	abs	local04, local01 wc
03ac0     1F 8A 06 F5 | 	and	local04, #31
03ac4     45 8B 62 C6 |  if_b	neg	local04, local04
03ac8     07 8B 62 FC | 	wrlong	local04, objptr
03acc     04 0E 86 F1 | 	sub	objptr, #4
03ad0                 | LR__0121
03ad0                 | LR__0122
03ad0                 | '       
03ad0                 | '   if long[$34]==0
03ad0     34 8A 0E FB | 	rdlong	local04, #52 wz
03ad4     64 00 90 5D |  if_ne	jmp	#LR__0124
03ad8                 | '     if mousefront<>mousetail
03ad8     08 0E 06 F1 | 	add	objptr, #8
03adc     07 8B 02 FB | 	rdlong	local04, objptr
03ae0     04 0E 06 F1 | 	add	objptr, #4
03ae4     07 97 02 FB | 	rdlong	local10, objptr
03ae8     0C 0E 86 F1 | 	sub	objptr, #12
03aec     4B 85 02 F6 | 	mov	local01, local10
03af0     42 8B 0A F2 | 	cmp	local04, local01 wz
03af4     44 00 90 AD |  if_e	jmp	#LR__0123
03af8                 | '       long[$34]:=mousebuf[mousetail]
03af8     0C 0E 06 F1 | 	add	objptr, #12
03afc     07 8B 02 FB | 	rdlong	local04, objptr
03b00     02 8A 66 F0 | 	shl	local04, #2
03b04     94 0E 06 F1 | 	add	objptr, #148
03b08     07 8B 02 F1 | 	add	local04, objptr
03b0c     45 97 02 FB | 	rdlong	local10, local04
03b10     34 96 66 FC | 	wrlong	local10, #52
03b14                 | '       mousetail++
03b14     94 0E 86 F1 | 	sub	objptr, #148
03b18     07 97 02 FB | 	rdlong	local10, objptr
03b1c     4B 85 02 F6 | 	mov	local01, local10
03b20     01 84 06 F1 | 	add	local01, #1
03b24     07 85 62 FC | 	wrlong	local01, objptr
03b28                 | '       mousetail:= mousetail // 128
03b28     42 8B 52 F6 | 	abs	local04, local01 wc
03b2c     7F 8A 06 F5 | 	and	local04, #127
03b30     45 8B 62 C6 |  if_b	neg	local04, local04
03b34     07 8B 62 FC | 	wrlong	local04, objptr
03b38     0C 0E 86 F1 | 	sub	objptr, #12
03b3c                 | LR__0123
03b3c                 | LR__0124
03b3c                 | ' 
03b3c                 | '       
03b3c                 | '   if long[$38]==0
03b3c     38 8A 0E FB | 	rdlong	local04, #56 wz
03b40     6C 00 90 5D |  if_ne	jmp	#LR__0126
03b44                 | '     if midifront<>miditail
03b44     10 0E 06 F1 | 	add	objptr, #16
03b48     07 8B 02 FB | 	rdlong	local04, objptr
03b4c     04 0E 06 F1 | 	add	objptr, #4
03b50     07 97 02 FB | 	rdlong	local10, objptr
03b54     14 0E 86 F1 | 	sub	objptr, #20
03b58     4B 85 02 F6 | 	mov	local01, local10
03b5c     42 8B 0A F2 | 	cmp	local04, local01 wz
03b60     4C 00 90 AD |  if_e	jmp	#LR__0125
03b64                 | '       long[$38]:=midibuf[miditail]
03b64     14 0E 06 F1 | 	add	objptr, #20
03b68     07 8B 02 FB | 	rdlong	local04, objptr
03b6c     02 8A 66 F0 | 	shl	local04, #2
03b70     01 00 00 FF 
03b74     8C 0E 06 F1 | 	add	objptr, ##652
03b78     07 8B 02 F1 | 	add	local04, objptr
03b7c     45 97 02 FB | 	rdlong	local10, local04
03b80     38 96 66 FC | 	wrlong	local10, #56
03b84                 | '       miditail++
03b84     01 00 00 FF 
03b88     8C 0E 86 F1 | 	sub	objptr, ##652
03b8c     07 97 02 FB | 	rdlong	local10, objptr
03b90     4B 85 02 F6 | 	mov	local01, local10
03b94     01 84 06 F1 | 	add	local01, #1
03b98     07 85 62 FC | 	wrlong	local01, objptr
03b9c                 | '       miditail:= miditail // 32
03b9c     42 8B 52 F6 | 	abs	local04, local01 wc
03ba0     1F 8A 06 F5 | 	and	local04, #31
03ba4     45 8B 62 C6 |  if_b	neg	local04, local04
03ba8     07 8B 62 FC | 	wrlong	local04, objptr
03bac     14 0E 86 F1 | 	sub	objptr, #20
03bb0                 | LR__0125
03bb0                 | LR__0126
03bb0                 | '       
03bb0                 | '   if long[$3c]==0
03bb0     3C 8A 0E FB | 	rdlong	local04, #60 wz
03bb4     60 FB 9F 5D |  if_ne	jmp	#LR__0103
03bb8                 | '     if serialfront<>serialtail
03bb8     18 0E 06 F1 | 	add	objptr, #24
03bbc     07 8B 02 FB | 	rdlong	local04, objptr
03bc0     04 0E 06 F1 | 	add	objptr, #4
03bc4     07 97 02 FB | 	rdlong	local10, objptr
03bc8     1C 0E 86 F1 | 	sub	objptr, #28
03bcc     4B 85 02 F6 | 	mov	local01, local10
03bd0     42 8B 0A F2 | 	cmp	local04, local01 wz
03bd4     40 FB 9F AD |  if_e	jmp	#LR__0103
03bd8                 | '       byte[$3c]:=255
03bd8     3C FE 4D FC | 	wrbyte	#255, #60
03bdc                 | '       byte[$3D]:=serialbuf[serialtail]
03bdc     1C 0E 06 F1 | 	add	objptr, #28
03be0     07 8B 02 FB | 	rdlong	local04, objptr
03be4     01 00 00 FF 
03be8     04 0F 06 F1 | 	add	objptr, ##772
03bec     07 8B 02 F1 | 	add	local04, objptr
03bf0     45 97 C2 FA | 	rdbyte	local10, local04
03bf4     3D 96 46 FC | 	wrbyte	local10, #61
03bf8                 | '       serialtail++
03bf8     01 00 00 FF 
03bfc     04 0F 86 F1 | 	sub	objptr, ##772
03c00     07 97 02 FB | 	rdlong	local10, objptr
03c04     4B 85 02 F6 | 	mov	local01, local10
03c08     01 84 06 F1 | 	add	local01, #1
03c0c     07 85 62 FC | 	wrlong	local01, objptr
03c10                 | '       serialtail:= serialtail // 32
03c10     42 8B 52 F6 | 	abs	local04, local01 wc
03c14     1F 8A 06 F5 | 	and	local04, #31
03c18     45 8B 62 C6 |  if_b	neg	local04, local04
03c1c     07 8B 62 FC | 	wrlong	local04, objptr
03c20     1C 0E 86 F1 | 	sub	objptr, #28
03c24     F0 FA 9F FD | 	jmp	#LR__0103
03c28     AF F0 03 F6 | 	mov	ptra, fp
03c2c     BF 00 A0 FD | 	call	#popregs_
03c30                 | _retrocog_spin2_serialcog_ret
03c30     2D 00 64 FD | 	ret
03c34                 | 
03c34                 | '       
03c34                 | ' 
03c34                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03c34                 | ' 
03c34                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03c34                 | _retrocog_spin2_serial_start
03c34     04 5A 05 F6 | 	mov	COUNT_, #4
03c38     B0 00 A0 FD | 	call	#pushregs_
03c3c     3B 85 02 F6 | 	mov	local01, arg01
03c40     3C 87 02 F6 | 	mov	local02, arg02
03c44                 | ' 
03c44                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03c44     14 76 06 FB | 	rdlong	arg01, #20
03c48     10 78 C6 F9 | 	decod	arg02, #16
03c4c     3C 77 02 FD | 	qmul	arg01, arg02
03c50     19 88 62 FD | 	getqy	local03
03c54     18 8A 62 FD | 	getqx	local04
03c58     28 88 62 FD | 	setq	local03
03c5c     3D 8B 12 FD | 	qdiv	local04, arg03
03c60     18 30 62 FD | 	getqx	result1
03c64     18 7B 02 F6 | 	mov	arg03, result1
03c68     FE FF 7F FF 
03c6c     00 7A 06 F5 | 	and	arg03, ##-1024
03c70                 | ' bitmode |= 7                                                  ' set bits (8)
03c70     07 7A 46 F5 | 	or	arg03, #7
03c74                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03c74     40 84 62 FD | 	dirl	local01
03c78     08 00 80 FF 
03c7c     42 7D 08 FC | 	wrpin	##4158, local01
03c80     42 7B 12 FC | 	wxpin	arg03, local01
03c84     42 01 28 FC | 	wypin	#0, local01
03c88     41 84 62 FD | 	dirh	local01
03c8c                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03c8c     40 86 62 FD | 	dirl	local02
03c90     43 F9 08 FC | 	wrpin	#124, local02
03c94     43 7B 12 FC | 	wxpin	arg03, local02
03c98     43 01 28 FC | 	wypin	#0, local02
03c9c     41 86 62 FD | 	dirh	local02
03ca0                 | ' pinhigh(rxpin)
03ca0     59 84 62 FD | 	drvh	local01
03ca4     AF F0 03 F6 | 	mov	ptra, fp
03ca8     BF 00 A0 FD | 	call	#popregs_
03cac                 | _retrocog_spin2_serial_start_ret
03cac     2D 00 64 FD | 	ret
03cb0                 | 
03cb0                 | ' 
03cb0                 | ' pub rxcheck(pin) : rxbyte | check
03cb0                 | _retrocog_spin2_rxcheck
03cb0     03 5A 05 F6 | 	mov	COUNT_, #3
03cb4     B0 00 A0 FD | 	call	#pushregs_
03cb8     3B 85 02 F6 | 	mov	local01, arg01
03cbc                 | ' 
03cbc                 | ' '' Check for serial input
03cbc                 | ' '' -- returns -1 if nothing available
03cbc                 | ' 
03cbc                 | '   rxbyte := -1
03cbc     01 86 66 F6 | 	neg	local02, #1
03cc0                 | '   check := pinr(pin)
03cc0     42 77 02 F6 | 	mov	arg01, local01
03cc4     A8 29 B0 FD | 	call	#__system___pinread
03cc8     18 89 0A F6 | 	mov	local03, result1 wz
03ccc                 | '   if (check)
03ccc                 | '     rxbyte := rdpin(pin) >> 24
03ccc     00 86 06 56 |  if_ne	mov	local02, #0
03cd0     42 87 8A 5A |  if_ne	rdpin	local02, local01
03cd4     18 86 46 50 |  if_ne	shr	local02, #24
03cd8     43 31 02 F6 | 	mov	result1, local02
03cdc     AF F0 03 F6 | 	mov	ptra, fp
03ce0     BF 00 A0 FD | 	call	#popregs_
03ce4                 | _retrocog_spin2_rxcheck_ret
03ce4     2D 00 64 FD | 	ret
03ce8                 | 
03ce8                 | _shell_c_getcwd
03ce8     06 5A 05 F6 | 	mov	COUNT_, #6
03cec     B0 00 A0 FD | 	call	#pushregs_
03cf0     3B 85 02 F6 | 	mov	local01, arg01
03cf4     3C 87 02 F6 | 	mov	local02, arg02
03cf8     02 00 00 FF 
03cfc     14 2A 06 F1 | 	add	ptr__shell_c_dat__, ##1044
03d00     15 77 02 F6 | 	mov	arg01, ptr__shell_c_dat__
03d04     02 00 00 FF 
03d08     14 2A 86 F1 | 	sub	ptr__shell_c_dat__, ##1044
03d0c     00 88 06 F6 | 	mov	local03, #0
03d10     FC C2 9F FE | 	loc	pa,	#(@LR__0128-@LR__0127)
03d14     93 00 A0 FD | 	call	#FCACHE_LOAD_
03d18                 | LR__0127
03d18     3B 8B CA FA | 	rdbyte	local04, arg01 wz
03d1c     01 88 06 51 |  if_ne	add	local03, #1
03d20     01 76 06 51 |  if_ne	add	arg01, #1
03d24     F0 FF 9F 5D |  if_ne	jmp	#LR__0127
03d28                 | LR__0128
03d28     44 31 02 F6 | 	mov	result1, local03
03d2c     02 8C 06 F6 | 	mov	local05, #2
03d30     18 8D 02 F1 | 	add	local05, result1
03d34     43 8D 1A F2 | 	cmp	local05, local02 wcz
03d38     1C 00 90 ED |  if_be	jmp	#LR__0129
03d3c     01 00 00 FF 
03d40     40 14 06 F1 | 	add	ptr___system__dat__, ##576
03d44     0A 05 68 FC | 	wrlong	#2, ptr___system__dat__
03d48     01 00 00 FF 
03d4c     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
03d50                 | '         _seterror( 2 );
03d50                 | '         return  (0) ;
03d50     00 30 06 F6 | 	mov	result1, #0
03d54     54 00 90 FD | 	jmp	#LR__0132
03d58                 | LR__0129
03d58     02 00 00 FF 
03d5c     14 2A 06 F1 | 	add	ptr__shell_c_dat__, ##1044
03d60     15 8F C2 FA | 	rdbyte	local06, ptr__shell_c_dat__
03d64     02 00 00 FF 
03d68     14 2A 86 F1 | 	sub	ptr__shell_c_dat__, ##1044
03d6c     07 8E 46 F7 | 	zerox	local06, #7
03d70     2F 8E 0E F2 | 	cmp	local06, #47 wz
03d74     20 00 90 5D |  if_ne	jmp	#LR__0130
03d78     02 00 00 FF 
03d7c     14 2A 06 F1 | 	add	ptr__shell_c_dat__, ##1044
03d80     15 79 02 F6 | 	mov	arg02, ptr__shell_c_dat__
03d84     02 00 00 FF 
03d88     14 2A 86 F1 | 	sub	ptr__shell_c_dat__, ##1044
03d8c     42 77 02 F6 | 	mov	arg01, local01
03d90     A4 26 B0 FD | 	call	#__system____builtin_strcpy
03d94     10 00 90 FD | 	jmp	#LR__0131
03d98                 | LR__0130
03d98     7A 00 00 FF 
03d9c     08 79 06 F6 | 	mov	arg02, ##@LR__0951
03da0     42 77 02 F6 | 	mov	arg01, local01
03da4     90 26 B0 FD | 	call	#__system____builtin_strcpy
03da8                 | LR__0131
03da8                 | '         __builtin_strcpy(buf, "/") ;
03da8                 | '     }
03da8                 | '     return buf;
03da8     42 31 02 F6 | 	mov	result1, local01
03dac                 | LR__0132
03dac     AF F0 03 F6 | 	mov	ptra, fp
03db0     BF 00 A0 FD | 	call	#popregs_
03db4                 | _shell_c_getcwd_ret
03db4     2D 00 64 FD | 	ret
03db8                 | 
03db8                 | _shell_c_cwd2
03db8     01 00 00 FF 
03dbc     00 2A 06 F1 | 	add	ptr__shell_c_dat__, ##512
03dc0     15 77 02 F6 | 	mov	arg01, ptr__shell_c_dat__
03dc4     01 00 00 FF 
03dc8     00 2A 86 F1 | 	sub	ptr__shell_c_dat__, ##512
03dcc     64 78 06 F6 | 	mov	arg02, #100
03dd0     14 FF BF FD | 	call	#_shell_c_getcwd
03dd4                 | '     getcwd(tempname1,100);
03dd4                 | '     return (char *) &tempname1;
03dd4     01 00 00 FF 
03dd8     00 2A 06 F1 | 	add	ptr__shell_c_dat__, ##512
03ddc     15 31 02 F6 | 	mov	result1, ptr__shell_c_dat__
03de0     01 00 00 FF 
03de4     00 2A 86 F1 | 	sub	ptr__shell_c_dat__, ##512
03de8                 | _shell_c_cwd2_ret
03de8     2D 00 64 FD | 	ret
03dec                 | 
03dec                 | _trackerplayer_spin2_initModule
03dec     0B 5A 05 F6 | 	mov	COUNT_, #11
03df0     B0 00 A0 FD | 	call	#pushregs_
03df4     30 F0 07 F1 | 	add	ptra, #48
03df8     AF 76 62 FC | 	wrlong	arg01, fp
03dfc     04 5E 05 F1 | 	add	fp, #4
03e00     AF 78 62 FC | 	wrlong	arg02, fp
03e04     04 5E 85 F1 | 	sub	fp, #4
03e08                 | ' 
03e08                 | '   ' Set some data pointers
03e08                 | '   magicFour      := hubPtr + 1080
03e08     AF 84 02 FB | 	rdlong	local01, fp
03e0c     02 00 00 FF 
03e10     38 84 06 F1 | 	add	local01, ##1080
03e14     9D 0E 06 F1 | 	add	objptr, #157
03e18     07 85 62 FC | 	wrlong	local01, objptr
03e1c                 | '   nameStr        := hubPtr
03e1c     AF 84 02 FB | 	rdlong	local01, fp
03e20     97 0E 86 F1 | 	sub	objptr, #151
03e24     07 85 62 FC | 	wrlong	local01, objptr
03e28                 | '   samplesInfoLut := hubPtr + 20
03e28     AF 84 02 FB | 	rdlong	local01, fp
03e2c     14 84 06 F1 | 	add	local01, #20
03e30     04 0E 06 F1 | 	add	objptr, #4
03e34     07 85 62 FC | 	wrlong	local01, objptr
03e38                 | ' 
03e38                 | '   ' Is this a 31 sample module?
03e38                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03e38     93 0E 06 F1 | 	add	objptr, #147
03e3c     07 85 02 FB | 	rdlong	local01, objptr
03e40     9D 0E 86 F1 | 	sub	objptr, #157
03e44     42 87 C2 FA | 	rdbyte	local02, local01
03e48     4D 86 0E F2 | 	cmp	local02, #77 wz
03e4c     4C 01 90 5D |  if_ne	jmp	#LR__0136
03e50     9D 0E 06 F1 | 	add	objptr, #157
03e54     07 89 02 FB | 	rdlong	local03, objptr
03e58     9D 0E 86 F1 | 	sub	objptr, #157
03e5c     02 88 06 F1 | 	add	local03, #2
03e60     44 8B C2 FA | 	rdbyte	local04, local03
03e64     4B 8A 0E F2 | 	cmp	local04, #75 wz
03e68     30 01 90 5D |  if_ne	jmp	#LR__0136
03e6c                 | '     songLength          := byte[hubPtr + 950]
03e6c     AF 84 02 FB | 	rdlong	local01, fp
03e70     01 00 00 FF 
03e74     B6 85 06 F1 | 	add	local01, ##950
03e78     42 8D C2 FA | 	rdbyte	local05, local01
03e7c     9A 0E 06 F1 | 	add	objptr, #154
03e80     07 8D 42 FC | 	wrbyte	local05, objptr
03e84                 | '     unknown1            := byte[hubPtr + 951]
03e84     AF 84 02 FB | 	rdlong	local01, fp
03e88     01 00 00 FF 
03e8c     B7 85 06 F1 | 	add	local01, ##951
03e90     42 8D C2 FA | 	rdbyte	local05, local01
03e94     02 0E 06 F1 | 	add	objptr, #2
03e98     07 8D 42 FC | 	wrbyte	local05, objptr
03e9c                 | '     songPositionsLut    :=      hubPtr + 952
03e9c     AF 84 02 FB | 	rdlong	local01, fp
03ea0     01 00 00 FF 
03ea4     B8 85 06 F1 | 	add	local01, ##952
03ea8     06 0E 86 F1 | 	sub	objptr, #6
03eac     07 85 62 FC | 	wrlong	local01, objptr
03eb0                 | '     patternsData        :=      hubPtr + 1084
03eb0     AF 84 02 FB | 	rdlong	local01, fp
03eb4     02 00 00 FF 
03eb8     3C 84 06 F1 | 	add	local01, ##1084
03ebc     04 0E 86 F1 | 	sub	objptr, #4
03ec0     07 85 62 FC | 	wrlong	local01, objptr
03ec4                 | '     numberOfInstruments := 31
03ec4     14 0E 06 F1 | 	add	objptr, #20
03ec8     07 3F 48 FC | 	wrbyte	#31, objptr
03ecc                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03ecc     0B 0E 86 F1 | 	sub	objptr, #11
03ed0     07 01 48 FC | 	wrbyte	#0, objptr
03ed4     9B 0E 86 F1 | 	sub	objptr, #155
03ed8                 | '     repeat i from 952 to 1079
03ed8     08 5E 05 F1 | 	add	fp, #8
03edc     01 00 80 FF 
03ee0     AF 70 6B FC | 	wrlong	##952, fp
03ee4     08 5E 85 F1 | 	sub	fp, #8
03ee8     84 C1 9F FE | 	loc	pa,	#(@LR__0135-@LR__0133)
03eec     93 00 A0 FD | 	call	#FCACHE_LOAD_
03ef0                 | LR__0133
03ef0                 | '       if byte[hubPtr][i] > numberOfPatterns
03ef0     AF 8E 02 FB | 	rdlong	local06, fp
03ef4     08 5E 05 F1 | 	add	fp, #8
03ef8     AF 86 02 FB | 	rdlong	local02, fp
03efc     08 5E 85 F1 | 	sub	fp, #8
03f00     47 87 02 F1 | 	add	local02, local06
03f04     43 8B C2 FA | 	rdbyte	local04, local02
03f08     9B 0E 06 F1 | 	add	objptr, #155
03f0c     07 91 C2 FA | 	rdbyte	local07, objptr
03f10     9B 0E 86 F1 | 	sub	objptr, #155
03f14     48 8B 5A F2 | 	cmps	local04, local07 wcz
03f18     24 00 90 ED |  if_be	jmp	#LR__0134
03f1c                 | '         numberOfPatterns := byte[hubPtr][i]
03f1c     AF 8E 02 FB | 	rdlong	local06, fp
03f20     08 5E 05 F1 | 	add	fp, #8
03f24     AF 86 02 FB | 	rdlong	local02, fp
03f28     08 5E 85 F1 | 	sub	fp, #8
03f2c     47 87 02 F1 | 	add	local02, local06
03f30     43 8B C2 FA | 	rdbyte	local04, local02
03f34     9B 0E 06 F1 | 	add	objptr, #155
03f38     07 8B 42 FC | 	wrbyte	local04, objptr
03f3c     9B 0E 86 F1 | 	sub	objptr, #155
03f40                 | LR__0134
03f40     08 5E 05 F1 | 	add	fp, #8
03f44     AF 8C 02 FB | 	rdlong	local05, fp
03f48     01 8C 06 F1 | 	add	local05, #1
03f4c     AF 8C 62 FC | 	wrlong	local05, fp
03f50     08 5E 85 F1 | 	sub	fp, #8
03f54     02 00 00 FF 
03f58     38 8C 5E F2 | 	cmps	local05, ##1080 wcz
03f5c     90 FF 9F CD |  if_b	jmp	#LR__0133
03f60                 | LR__0135
03f60                 | '     numberOfPatterns++
03f60     9B 0E 06 F1 | 	add	objptr, #155
03f64     07 8D C2 FA | 	rdbyte	local05, objptr
03f68     07 87 C2 FA | 	rdbyte	local02, objptr
03f6c     01 86 06 F1 | 	add	local02, #1
03f70     07 87 42 FC | 	wrbyte	local02, objptr
03f74                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03f74     09 0E 86 F1 | 	sub	objptr, #9
03f78     07 85 02 FB | 	rdlong	local01, objptr
03f7c     09 0E 06 F1 | 	add	objptr, #9
03f80     07 87 C2 FA | 	rdbyte	local02, objptr
03f84     0A 86 66 F0 | 	shl	local02, #10
03f88     43 85 02 F1 | 	add	local01, local02
03f8c     8D 0E 86 F1 | 	sub	objptr, #141
03f90     07 85 62 FC | 	wrlong	local01, objptr
03f94     0E 0E 86 F1 | 	sub	objptr, #14
03f98                 | ' 
03f98                 | '   ' This must be an oldschool 15 sample soundtracker module
03f98                 | '   else
03f98     1C 01 90 FD | 	jmp	#LR__0140
03f9c                 | LR__0136
03f9c                 | '     songLength          := byte[hubPtr + 470]
03f9c     AF 84 02 FB | 	rdlong	local01, fp
03fa0     D6 85 06 F1 | 	add	local01, #470
03fa4     42 8D C2 FA | 	rdbyte	local05, local01
03fa8     9A 0E 06 F1 | 	add	objptr, #154
03fac     07 8D 42 FC | 	wrbyte	local05, objptr
03fb0                 | '     unknown1            := byte[hubPtr + 471]
03fb0     AF 84 02 FB | 	rdlong	local01, fp
03fb4     D7 85 06 F1 | 	add	local01, #471
03fb8     42 8D C2 FA | 	rdbyte	local05, local01
03fbc     02 0E 06 F1 | 	add	objptr, #2
03fc0     07 8D 42 FC | 	wrbyte	local05, objptr
03fc4                 | '     songPositionsLut    :=      hubPtr + 472
03fc4     AF 84 02 FB | 	rdlong	local01, fp
03fc8     D8 85 06 F1 | 	add	local01, #472
03fcc     06 0E 86 F1 | 	sub	objptr, #6
03fd0     07 85 62 FC | 	wrlong	local01, objptr
03fd4                 | '     patternsData        :=      hubPtr + 600
03fd4     AF 84 02 FB | 	rdlong	local01, fp
03fd8     01 00 00 FF 
03fdc     58 84 06 F1 | 	add	local01, ##600
03fe0     04 0E 86 F1 | 	sub	objptr, #4
03fe4     07 85 62 FC | 	wrlong	local01, objptr
03fe8                 | '     numberOfInstruments := 15
03fe8     14 0E 06 F1 | 	add	objptr, #20
03fec     07 1F 48 FC | 	wrbyte	#15, objptr
03ff0                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03ff0     0B 0E 86 F1 | 	sub	objptr, #11
03ff4     07 01 48 FC | 	wrbyte	#0, objptr
03ff8     9B 0E 86 F1 | 	sub	objptr, #155
03ffc                 | '     repeat i from 472 to 599
03ffc     08 5E 05 F1 | 	add	fp, #8
04000     AF B0 6B FC | 	wrlong	#472, fp
04004     08 5E 85 F1 | 	sub	fp, #8
04008     64 C0 9F FE | 	loc	pa,	#(@LR__0139-@LR__0137)
0400c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04010                 | LR__0137
04010                 | '       if byte[hubPtr][i] > numberOfPatterns
04010     AF 8E 02 FB | 	rdlong	local06, fp
04014     08 5E 05 F1 | 	add	fp, #8
04018     AF 86 02 FB | 	rdlong	local02, fp
0401c     08 5E 85 F1 | 	sub	fp, #8
04020     47 87 02 F1 | 	add	local02, local06
04024     43 8B C2 FA | 	rdbyte	local04, local02
04028     9B 0E 06 F1 | 	add	objptr, #155
0402c     07 91 C2 FA | 	rdbyte	local07, objptr
04030     9B 0E 86 F1 | 	sub	objptr, #155
04034     48 8B 5A F2 | 	cmps	local04, local07 wcz
04038     24 00 90 ED |  if_be	jmp	#LR__0138
0403c                 | '         numberOfPatterns := byte[hubPtr][i]
0403c     AF 8E 02 FB | 	rdlong	local06, fp
04040     08 5E 05 F1 | 	add	fp, #8
04044     AF 86 02 FB | 	rdlong	local02, fp
04048     08 5E 85 F1 | 	sub	fp, #8
0404c     47 87 02 F1 | 	add	local02, local06
04050     43 8B C2 FA | 	rdbyte	local04, local02
04054     9B 0E 06 F1 | 	add	objptr, #155
04058     07 8B 42 FC | 	wrbyte	local04, objptr
0405c     9B 0E 86 F1 | 	sub	objptr, #155
04060                 | LR__0138
04060     08 5E 05 F1 | 	add	fp, #8
04064     AF 8C 02 FB | 	rdlong	local05, fp
04068     01 8C 06 F1 | 	add	local05, #1
0406c     AF 8C 62 FC | 	wrlong	local05, fp
04070     08 5E 85 F1 | 	sub	fp, #8
04074     01 00 00 FF 
04078     58 8C 5E F2 | 	cmps	local05, ##600 wcz
0407c     90 FF 9F CD |  if_b	jmp	#LR__0137
04080                 | LR__0139
04080                 | '     numberOfPatterns++
04080     9B 0E 06 F1 | 	add	objptr, #155
04084     07 8D C2 FA | 	rdbyte	local05, objptr
04088     07 87 C2 FA | 	rdbyte	local02, objptr
0408c     01 86 06 F1 | 	add	local02, #1
04090     07 87 42 FC | 	wrbyte	local02, objptr
04094                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
04094     09 0E 86 F1 | 	sub	objptr, #9
04098     07 85 02 FB | 	rdlong	local01, objptr
0409c     09 0E 06 F1 | 	add	objptr, #9
040a0     07 87 C2 FA | 	rdbyte	local02, objptr
040a4     0A 86 66 F0 | 	shl	local02, #10
040a8     43 85 02 F1 | 	add	local01, local02
040ac     8D 0E 86 F1 | 	sub	objptr, #141
040b0     07 85 62 FC | 	wrlong	local01, objptr
040b4     0E 0E 86 F1 | 	sub	objptr, #14
040b8                 | LR__0140
040b8                 | ' 
040b8                 | '   ' Iterate through all samples and fill in the sample pointer LUT
040b8                 | '   tmpPtr := sampleDataPtr
040b8     0E 0E 06 F1 | 	add	objptr, #14
040bc     07 85 02 FB | 	rdlong	local01, objptr
040c0     0C 5E 05 F1 | 	add	fp, #12
040c4     AF 84 62 FC | 	wrlong	local01, fp
040c8                 | '   repeat i from 1 to numberOfInstruments
040c8     04 5E 85 F1 | 	sub	fp, #4
040cc     AF 02 68 FC | 	wrlong	#1, fp
040d0     08 5E 85 F1 | 	sub	fp, #8
040d4     98 0E 06 F1 | 	add	objptr, #152
040d8     07 87 C2 FA | 	rdbyte	local02, objptr
040dc     01 86 5E F2 | 	cmps	local02, #1 wcz
040e0     01 8C 06 16 |  if_a	mov	local05, #1
040e4     01 8C 66 E6 |  if_be	neg	local05, #1
040e8     46 93 02 F6 | 	mov	local08, local05
040ec     07 95 C2 FA | 	rdbyte	local09, objptr
040f0     A6 0E 86 F1 | 	sub	objptr, #166
040f4     49 95 02 F1 | 	add	local09, local08
040f8                 | LR__0141
040f8                 | '     samplesPtrLut[i-1] := tmpPtr
040f8     08 5E 05 F1 | 	add	fp, #8
040fc     AF 96 02 FB | 	rdlong	local10, fp
04100     01 96 86 F1 | 	sub	local10, #1
04104     02 96 66 F0 | 	shl	local10, #2
04108     12 0E 06 F1 | 	add	objptr, #18
0410c     07 97 02 F1 | 	add	local10, objptr
04110     04 5E 05 F1 | 	add	fp, #4
04114     AF 98 02 FB | 	rdlong	local11, fp
04118     4B 99 62 FC | 	wrlong	local11, local10
0411c                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
0411c     04 5E 85 F1 | 	sub	fp, #4
04120     AF 76 02 FB | 	rdlong	arg01, fp
04124     1C 5E 05 F1 | 	add	fp, #28
04128     AF 78 02 F6 | 	mov	arg02, fp
0412c     14 5E 85 F1 | 	sub	fp, #20
04130     AF 7A 02 F6 | 	mov	arg03, fp
04134     04 5E 05 F1 | 	add	fp, #4
04138     AF 7C 02 F6 | 	mov	arg04, fp
0413c     04 5E 05 F1 | 	add	fp, #4
04140     AF 7E 02 F6 | 	mov	arg05, fp
04144     04 5E 05 F1 | 	add	fp, #4
04148     AF 80 02 F6 | 	mov	arg06, fp
0414c     04 5E 05 F1 | 	add	fp, #4
04150     AF 82 02 F6 | 	mov	arg07, fp
04154     20 5E 85 F1 | 	sub	fp, #32
04158     12 0E 86 F1 | 	sub	objptr, #18
0415c     F0 06 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
04160                 | '     tmpPtr += samLength
04160     0C 5E 05 F1 | 	add	fp, #12
04164     AF 90 02 FB | 	rdlong	local07, fp
04168     04 5E 05 F1 | 	add	fp, #4
0416c     AF 96 02 FB | 	rdlong	local10, fp
04170     4B 91 02 F1 | 	add	local07, local10
04174     04 5E 85 F1 | 	sub	fp, #4
04178     AF 90 62 FC | 	wrlong	local07, fp
0417c     04 5E 85 F1 | 	sub	fp, #4
04180     AF 90 02 FB | 	rdlong	local07, fp
04184     49 91 02 F1 | 	add	local07, local08
04188     AF 90 62 FC | 	wrlong	local07, fp
0418c     08 5E 85 F1 | 	sub	fp, #8
04190     4A 91 0A F2 | 	cmp	local07, local09 wz
04194     60 FF 9F 5D |  if_ne	jmp	#LR__0141
04198                 | ' 
04198                 | '   ' Below this point, all play routine variables are resest to their default values
04198                 | '   tickCounter                 := 0
04198     A1 0E 06 F1 | 	add	objptr, #161
0419c     07 01 48 FC | 	wrbyte	#0, objptr
041a0                 | '   patternRow                  := 0
041a0     01 0E 06 F1 | 	add	objptr, #1
041a4     07 01 48 FC | 	wrbyte	#0, objptr
041a8                 | '   songPosition                := startPattern
041a8     04 5E 05 F1 | 	add	fp, #4
041ac     AF 84 02 FB | 	rdlong	local01, fp
041b0     04 5E 85 F1 | 	sub	fp, #4
041b4     01 0E 06 F1 | 	add	objptr, #1
041b8     07 85 42 FC | 	wrbyte	local01, objptr
041bc                 | '   currentSongSpeed            := 6
041bc     01 0E 06 F1 | 	add	objptr, #1
041c0     07 0D 48 FC | 	wrbyte	#6, objptr
041c4                 | '   patternDelay                := 0
041c4     01 0E 06 F1 | 	add	objptr, #1
041c8     07 01 48 FC | 	wrbyte	#0, objptr
041cc                 | '   ticksPerMinute              := 50 * 60
041cc     02 0F 06 F1 | 	add	objptr, #258
041d0     05 00 80 FF 
041d4     07 71 6B FC | 	wrlong	##3000, objptr
041d8     A7 0F 86 F1 | 	sub	objptr, #423
041dc                 | '   cyclesToWait                := systemClock / 50
041dc     07 D9 02 FB | 	rdlong	muldiva_, objptr
041e0     32 DA 06 F6 | 	mov	muldivb_, #50
041e4     D0 00 A0 FD | 	call	#divide_
041e8     AB 0F 06 F1 | 	add	objptr, #427
041ec     07 DB 62 FC | 	wrlong	muldivb_, objptr
041f0                 | '   sampleNumber_memory         := 0
041f0     35 0E 06 F1 | 	add	objptr, #53
041f4     07 01 48 FC | 	wrbyte	#0, objptr
041f8                 | '   lpFilter                    := 0
041f8     25 0E 86 F1 | 	sub	objptr, #37
041fc     07 01 48 FC | 	wrbyte	#0, objptr
04200                 | '   cmdD_memoryX                := 0
04200     29 0E 06 F1 | 	add	objptr, #41
04204     07 01 48 FC | 	wrbyte	#0, objptr
04208                 | '   cmdD_memoryY                := 0
04208     01 0E 06 F1 | 	add	objptr, #1
0420c     07 01 48 FC | 	wrbyte	#0, objptr
04210                 | '   cmdD_updatePosition         := false
04210     01 0E 06 F1 | 	add	objptr, #1
04214     07 01 48 FC | 	wrbyte	#0, objptr
04218                 | '   cmdB_memoryZ                := 0
04218     01 0E 06 F1 | 	add	objptr, #1
0421c     07 01 48 FC | 	wrbyte	#0, objptr
04220                 | '   cmdB_updatePosition         := false
04220     01 0E 06 F1 | 	add	objptr, #1
04224     07 01 48 FC | 	wrbyte	#0, objptr
04228                 | '   cmdE6_updatePositionCommon  := false
04228     0D 0E 06 F1 | 	add	objptr, #13
0422c     07 01 48 FC | 	wrbyte	#0, objptr
04230     F5 0F 86 F1 | 	sub	objptr, #501
04234                 | ' 
04234                 | '   repeat i from 0 to LAST_CHANNEL
04234     08 5E 05 F1 | 	add	fp, #8
04238     AF 00 68 FC | 	wrlong	#0, fp
0423c     08 5E 85 F1 | 	sub	fp, #8
04240                 | LR__0142
04240                 | ' 
04240                 | '     currRepeatPoint[i]        := 0
04240     08 5E 05 F1 | 	add	fp, #8
04244     AF 88 02 FB | 	rdlong	local03, fp
04248     01 88 66 F0 | 	shl	local03, #1
0424c     D7 0E 06 F1 | 	add	objptr, #215
04250     07 89 02 F1 | 	add	local03, objptr
04254     44 01 58 FC | 	wrword	#0, local03
04258                 | '     currSampleLength[i]       := 4
04258     AF 88 02 FB | 	rdlong	local03, fp
0425c     01 88 66 F0 | 	shl	local03, #1
04260     1C 0E 86 F1 | 	sub	objptr, #28
04264     07 89 02 F1 | 	add	local03, objptr
04268     44 09 58 FC | 	wrword	#4, local03
0426c                 | '     currSamplePtr[i]          := @null
0426c     AF 86 02 FB | 	rdlong	local02, fp
04270     02 86 66 F0 | 	shl	local02, #2
04274     14 0E 86 F1 | 	sub	objptr, #20
04278     07 87 02 F1 | 	add	local02, objptr
0427c     43 2D 62 FC | 	wrlong	ptr__trackerplayer_spin2_dat__, local02
04280                 | '     currSampleNr[i]           := 0
04280     AF 8C 02 FB | 	rdlong	local05, fp
04284     10 0E 06 F1 | 	add	objptr, #16
04288     07 8D 02 F1 | 	add	local05, objptr
0428c     46 01 48 FC | 	wrbyte	#0, local05
04290                 | '     currRepeatLength[i]       := 1
04290     AF 8C 02 FB | 	rdlong	local05, fp
04294     02 8C 66 F0 | 	shl	local05, #2
04298     0C 0E 06 F1 | 	add	objptr, #12
0429c     07 8D 02 F1 | 	add	local05, objptr
042a0     46 03 68 FC | 	wrlong	#1, local05
042a4                 | '     currPeriod[i]             := 400
042a4     AF 8C 02 FB | 	rdlong	local05, fp
042a8     02 8C 66 F0 | 	shl	local05, #2
042ac     1C 0E 06 F1 | 	add	objptr, #28
042b0     07 8D 02 F1 | 	add	local05, objptr
042b4     46 21 6B FC | 	wrlong	#400, local05
042b8                 | '     lastSetPeriod[i]          := 400
042b8     AF 8C 02 FB | 	rdlong	local05, fp
042bc     02 8C 66 F0 | 	shl	local05, #2
042c0     48 0E 06 F1 | 	add	objptr, #72
042c4     07 8D 02 F1 | 	add	local05, objptr
042c8     46 21 6B FC | 	wrlong	#400, local05
042cc                 | '     lastSetSamplePtr[i]       := 0
042cc     AF 8C 02 FB | 	rdlong	local05, fp
042d0     02 8C 66 F0 | 	shl	local05, #2
042d4     10 0E 06 F1 | 	add	objptr, #16
042d8     07 8D 02 F1 | 	add	local05, objptr
042dc     46 01 68 FC | 	wrlong	#0, local05
042e0                 | '     lastSetSampleNr[i]        := 0
042e0     AF 8C 02 FB | 	rdlong	local05, fp
042e4     02 8C 66 F0 | 	shl	local05, #2
042e8     10 0E 06 F1 | 	add	objptr, #16
042ec     07 8D 02 F1 | 	add	local05, objptr
042f0     46 01 68 FC | 	wrlong	#0, local05
042f4                 | '     lastSetSampleLength[i]    := 0
042f4     AF 8C 02 FB | 	rdlong	local05, fp
042f8     02 8C 66 F0 | 	shl	local05, #2
042fc     10 0E 06 F1 | 	add	objptr, #16
04300     07 8D 02 F1 | 	add	local05, objptr
04304     46 01 68 FC | 	wrlong	#0, local05
04308                 | '     lastSetRepeatLength[i]    := 0
04308     AF 8C 02 FB | 	rdlong	local05, fp
0430c     02 8C 66 F0 | 	shl	local05, #2
04310     10 0E 06 F1 | 	add	objptr, #16
04314     07 8D 02 F1 | 	add	local05, objptr
04318     46 01 68 FC | 	wrlong	#0, local05
0431c                 | '     lastSetRepeatPoint[i]     := 0
0431c     AF 8C 02 FB | 	rdlong	local05, fp
04320     02 8C 66 F0 | 	shl	local05, #2
04324     10 0E 06 F1 | 	add	objptr, #16
04328     07 8D 02 F1 | 	add	local05, objptr
0432c     46 01 68 FC | 	wrlong	#0, local05
04330                 | '     currVolume[i]             := 0
04330     AF 8C 02 FB | 	rdlong	local05, fp
04334     02 8C 66 F0 | 	shl	local05, #2
04338     78 0E 86 F1 | 	sub	objptr, #120
0433c     07 8D 02 F1 | 	add	local05, objptr
04340     46 01 68 FC | 	wrlong	#0, local05
04344                 | '     currPanning[i]            := 0
04344     AF 88 02 FB | 	rdlong	local03, fp
04348     01 88 66 F0 | 	shl	local03, #1
0434c     20 0E 06 F1 | 	add	objptr, #32
04350     07 89 02 F1 | 	add	local03, objptr
04354     44 01 58 FC | 	wrword	#0, local03
04358                 | '     cmd3_memoryZ[i]           := 0
04358     AF 8C 02 FB | 	rdlong	local05, fp
0435c     A9 0E 06 F1 | 	add	objptr, #169
04360     07 8D 02 F1 | 	add	local05, objptr
04364     46 01 48 FC | 	wrbyte	#0, local05
04368                 | '     cmd4_memoryY[i]           := 0
04368     AF 8C 02 FB | 	rdlong	local05, fp
0436c     04 0E 06 F1 | 	add	objptr, #4
04370     07 8D 02 F1 | 	add	local05, objptr
04374     46 01 48 FC | 	wrbyte	#0, local05
04378                 | '     cmd4_memoryX[i]           := 0
04378     AF 8C 02 FB | 	rdlong	local05, fp
0437c     04 0E 06 F1 | 	add	objptr, #4
04380     07 8D 02 F1 | 	add	local05, objptr
04384     46 01 48 FC | 	wrbyte	#0, local05
04388                 | '     cmd7_memoryY[i]           := 0
04388     AF 8C 02 FB | 	rdlong	local05, fp
0438c     04 0E 06 F1 | 	add	objptr, #4
04390     07 8D 02 F1 | 	add	local05, objptr
04394     46 01 48 FC | 	wrbyte	#0, local05
04398                 | '     cmd7_memoryX[i]           := 0
04398     AF 8C 02 FB | 	rdlong	local05, fp
0439c     04 0E 06 F1 | 	add	objptr, #4
043a0     07 8D 02 F1 | 	add	local05, objptr
043a4     46 01 48 FC | 	wrbyte	#0, local05
043a8                 | '     cmd9_memoryZ[i]           := 0
043a8     AF 8C 02 FB | 	rdlong	local05, fp
043ac     04 0E 06 F1 | 	add	objptr, #4
043b0     07 8D 02 F1 | 	add	local05, objptr
043b4     46 01 48 FC | 	wrbyte	#0, local05
043b8                 | '     cmdE6_memory[i]           := 0
043b8     AF 8C 02 FB | 	rdlong	local05, fp
043bc     0D 0E 06 F1 | 	add	objptr, #13
043c0     07 8D 02 F1 | 	add	local05, objptr
043c4     46 01 48 FC | 	wrbyte	#0, local05
043c8                 | '     cmdE6_counter[i]          := 0
043c8     AF 8C 02 FB | 	rdlong	local05, fp
043cc     04 0E 06 F1 | 	add	objptr, #4
043d0     07 8D 02 F1 | 	add	local05, objptr
043d4     46 01 48 FC | 	wrbyte	#0, local05
043d8                 | '     cmdE6_updatePosition[i]   := false
043d8     AF 8C 02 FB | 	rdlong	local05, fp
043dc     04 0E 06 F1 | 	add	objptr, #4
043e0     07 8D 02 F1 | 	add	local05, objptr
043e4     46 01 48 FC | 	wrbyte	#0, local05
043e8                 | '     sampleNumber_memory[i]    := 0
043e8     AF 8C 02 FB | 	rdlong	local05, fp
043ec     11 0E 86 F1 | 	sub	objptr, #17
043f0     07 8D 02 F1 | 	add	local05, objptr
043f4     46 01 48 FC | 	wrbyte	#0, local05
043f8                 | '     vibratoPos[i]             := 0
043f8     AF 8C 02 FB | 	rdlong	local05, fp
043fc     59 0E 86 F1 | 	sub	objptr, #89
04400     07 8D 02 F1 | 	add	local05, objptr
04404     46 01 48 FC | 	wrbyte	#0, local05
04408                 | '     portamentoPeriodMemory[i] := 0
04408     AF 8C 02 FB | 	rdlong	local05, fp
0440c     02 8C 66 F0 | 	shl	local05, #2
04410     10 0E 06 F1 | 	add	objptr, #16
04414     07 8D 02 F1 | 	add	local05, objptr
04418     46 01 68 FC | 	wrlong	#0, local05
0441c                 | '     portaGlissando[i]         := 0
0441c     AF 8C 02 FB | 	rdlong	local05, fp
04420     25 0E 06 F1 | 	add	objptr, #37
04424     07 8D 02 F1 | 	add	local05, objptr
04428     46 01 48 FC | 	wrbyte	#0, local05
0442c                 | '     vibratoType[i]            := 0
0442c     AF 8C 02 FB | 	rdlong	local05, fp
04430     04 0E 06 F1 | 	add	objptr, #4
04434     07 8D 02 F1 | 	add	local05, objptr
04438     46 01 48 FC | 	wrbyte	#0, local05
0443c                 | '     tremoloType[i]            := 0
0443c     AF 8C 02 FB | 	rdlong	local05, fp
04440     04 0E 06 F1 | 	add	objptr, #4
04444     07 8D 02 F1 | 	add	local05, objptr
04448     46 01 48 FC | 	wrbyte	#0, local05
0444c                 | '     tremoloPos[i]             := 0
0444c     AF 8C 02 FB | 	rdlong	local05, fp
04450     39 0E 86 F1 | 	sub	objptr, #57
04454     07 8D 02 F1 | 	add	local05, objptr
04458     46 01 48 FC | 	wrbyte	#0, local05
0445c                 | '     deltaVolume[i]            := 0
0445c     AF 8C 02 FB | 	rdlong	local05, fp
04460     02 8C 66 F0 | 	shl	local05, #2
04464     7C 0E 86 F1 | 	sub	objptr, #124
04468     07 8D 02 F1 | 	add	local05, objptr
0446c     46 01 68 FC | 	wrlong	#0, local05
04470                 | '     deltaPeriod[i]            := 0
04470     AF 8C 02 FB | 	rdlong	local05, fp
04474     02 8C 66 F0 | 	shl	local05, #2
04478     20 0E 86 F1 | 	sub	objptr, #32
0447c     07 8D 02 F1 | 	add	local05, objptr
04480     46 01 68 FC | 	wrlong	#0, local05
04484                 | '     resetTremolo[i]           := 0
04484     AF 8C 02 FB | 	rdlong	local05, fp
04488     A0 0E 06 F1 | 	add	objptr, #160
0448c     07 8D 02 F1 | 	add	local05, objptr
04490     46 01 48 FC | 	wrbyte	#0, local05
04494                 | '     resetVibrato[i]           := 0
04494     AF 8C 02 FB | 	rdlong	local05, fp
04498     04 0E 06 F1 | 	add	objptr, #4
0449c     07 8D 02 F1 | 	add	local05, objptr
044a0     46 01 48 FC | 	wrbyte	#0, local05
044a4     AF 8C 02 FB | 	rdlong	local05, fp
044a8     01 8C 06 F1 | 	add	local05, #1
044ac     AF 8C 62 FC | 	wrlong	local05, fp
044b0     08 5E 85 F1 | 	sub	fp, #8
044b4     04 8C 5E F2 | 	cmps	local05, #4 wcz
044b8     93 0F 86 F1 | 	sub	objptr, #403
044bc     80 FD 9F CD |  if_b	jmp	#LR__0142
044c0     AF F0 03 F6 | 	mov	ptra, fp
044c4     BF 00 A0 FD | 	call	#popregs_
044c8                 | _trackerplayer_spin2_initModule_ret
044c8     2D 00 64 FD | 	ret
044cc                 | 
044cc                 | ' 
044cc                 | ' 
044cc                 | ' ' This routine needs to be ticked X number of times per second
044cc                 | ' ' in order to advance the tracker play routine
044cc                 | ' '
044cc                 | ' PUB tick() | channel, sampleNumber, period, effect, i
044cc                 | _trackerplayer_spin2_tick
044cc     05 5A 05 F6 | 	mov	COUNT_, #5
044d0     B0 00 A0 FD | 	call	#pushregs_
044d4     14 F0 07 F1 | 	add	ptra, #20
044d8                 | ' 
044d8                 | '   if currentSongSpeed == 0
044d8     A4 0E 06 F1 | 	add	objptr, #164
044dc     07 85 CA FA | 	rdbyte	local01, objptr wz
044e0     A4 0E 86 F1 | 	sub	objptr, #164
044e4                 | '     return
044e4     88 02 90 AD |  if_e	jmp	#LR__0154
044e8                 | ' 
044e8                 | '   ' Iterate over the channels and process everything
044e8                 | '   repeat channel from 0 to LAST_CHANNEL
044e8     AF 00 68 FC | 	wrlong	#0, fp
044ec                 | LR__0143
044ec                 | ' 
044ec                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
044ec     AF 76 02 FB | 	rdlong	arg01, fp
044f0     A3 0E 06 F1 | 	add	objptr, #163
044f4     07 79 C2 FA | 	rdbyte	arg02, objptr
044f8     01 0E 86 F1 | 	sub	objptr, #1
044fc     07 7B C2 FA | 	rdbyte	arg03, objptr
04500     A2 0E 86 F1 | 	sub	objptr, #162
04504     04 5E 05 F1 | 	add	fp, #4
04508     AF 7C 02 F6 | 	mov	arg04, fp
0450c     04 5E 05 F1 | 	add	fp, #4
04510     AF 7E 02 F6 | 	mov	arg05, fp
04514     04 5E 05 F1 | 	add	fp, #4
04518     AF 80 02 F6 | 	mov	arg06, fp
0451c     0C 5E 85 F1 | 	sub	fp, #12
04520     28 04 B0 FD | 	call	#_trackerplayer_spin2_getNoteData
04524                 | '     processChannel(channel, sampleNumber, period, effect)
04524     AF 76 02 FB | 	rdlong	arg01, fp
04528     04 5E 05 F1 | 	add	fp, #4
0452c     AF 78 02 FB | 	rdlong	arg02, fp
04530     04 5E 05 F1 | 	add	fp, #4
04534     AF 7A 02 FB | 	rdlong	arg03, fp
04538     04 5E 05 F1 | 	add	fp, #4
0453c     AF 7C 02 FB | 	rdlong	arg04, fp
04540     0C 5E 85 F1 | 	sub	fp, #12
04544     CC 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
04548     AF 86 02 FB | 	rdlong	local02, fp
0454c     01 86 06 F1 | 	add	local02, #1
04550     AF 86 62 FC | 	wrlong	local02, fp
04554     04 86 5E F2 | 	cmps	local02, #4 wcz
04558     90 FF 9F CD |  if_b	jmp	#LR__0143
0455c                 | ' 
0455c                 | '   ' Incrementation the main counter that drives the whole play routine
0455c                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
0455c     A1 0E 06 F1 | 	add	objptr, #161
04560     07 85 C2 FA | 	rdbyte	local01, objptr
04564     01 84 06 F1 | 	add	local01, #1
04568     07 85 42 FC | 	wrbyte	local01, objptr
0456c     03 0E 06 F1 | 	add	objptr, #3
04570     07 89 C2 FA | 	rdbyte	local03, objptr
04574     01 0E 06 F1 | 	add	objptr, #1
04578     07 8B C2 FA | 	rdbyte	local04, objptr
0457c     45 89 02 F1 | 	add	local03, local04
04580     04 0E 86 F1 | 	sub	objptr, #4
04584     07 8D C2 FA | 	rdbyte	local05, objptr
04588     A1 0E 86 F1 | 	sub	objptr, #161
0458c     44 8D 5A F2 | 	cmps	local05, local03 wcz
04590                 | '     tickCounter := 0
04590     A1 0E 06 31 |  if_ae	add	objptr, #161
04594     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04598     A1 0E 86 31 |  if_ae	sub	objptr, #161
0459c                 | ' 
0459c                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
0459c                 | '   if tickCounter == 0
0459c     A1 0E 06 F1 | 	add	objptr, #161
045a0     07 85 CA FA | 	rdbyte	local01, objptr wz
045a4     A1 0E 86 F1 | 	sub	objptr, #161
045a8     C4 01 90 5D |  if_ne	jmp	#LR__0153
045ac                 | ' 
045ac                 | '     ' Handle the "pattern repeat" command, "E6"
045ac                 | '     if cmdE6_updatePositionCommon
045ac     F5 0F 06 F1 | 	add	objptr, #501
045b0     07 85 CA FA | 	rdbyte	local01, objptr wz
045b4     F5 0F 86 F1 | 	sub	objptr, #501
045b8     8C 00 90 AD |  if_e	jmp	#LR__0147
045bc                 | '       repeat i from 0 to LAST_CHANNEL
045bc     10 5E 05 F1 | 	add	fp, #16
045c0     AF 00 68 FC | 	wrlong	#0, fp
045c4     10 5E 85 F1 | 	sub	fp, #16
045c8     A8 BA 9F FE | 	loc	pa,	#(@LR__0146-@LR__0144)
045cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
045d0                 | LR__0144
045d0                 | '         if cmdE6_updatePosition[i]
045d0     10 5E 05 F1 | 	add	fp, #16
045d4     AF 86 02 FB | 	rdlong	local02, fp
045d8     10 5E 85 F1 | 	sub	fp, #16
045dc     F1 0F 06 F1 | 	add	objptr, #497
045e0     07 87 02 F1 | 	add	local02, objptr
045e4     43 8B CA FA | 	rdbyte	local04, local02 wz
045e8     F1 0F 86 F1 | 	sub	objptr, #497
045ec     24 00 90 AD |  if_e	jmp	#LR__0145
045f0                 | '           patternRow := cmdE6_memory[i]
045f0     10 5E 05 F1 | 	add	fp, #16
045f4     AF 86 02 FB | 	rdlong	local02, fp
045f8     10 5E 85 F1 | 	sub	fp, #16
045fc     E9 0F 06 F1 | 	add	objptr, #489
04600     07 87 02 F1 | 	add	local02, objptr
04604     43 8B C2 FA | 	rdbyte	local04, local02
04608     47 0F 86 F1 | 	sub	objptr, #327
0460c     07 8B 42 FC | 	wrbyte	local04, objptr
04610     A2 0E 86 F1 | 	sub	objptr, #162
04614                 | LR__0145
04614                 | '         cmdE6_updatePosition[i] := false
04614     10 5E 05 F1 | 	add	fp, #16
04618     AF 86 02 FB | 	rdlong	local02, fp
0461c     F1 0F 06 F1 | 	add	objptr, #497
04620     07 87 02 F1 | 	add	local02, objptr
04624     43 01 48 FC | 	wrbyte	#0, local02
04628     AF 86 02 FB | 	rdlong	local02, fp
0462c     01 86 06 F1 | 	add	local02, #1
04630     AF 86 62 FC | 	wrlong	local02, fp
04634     10 5E 85 F1 | 	sub	fp, #16
04638     04 86 5E F2 | 	cmps	local02, #4 wcz
0463c     F1 0F 86 F1 | 	sub	objptr, #497
04640     8C FF 9F CD |  if_b	jmp	#LR__0144
04644                 | LR__0146
04644     CC 00 90 FD | 	jmp	#LR__0151
04648                 | LR__0147
04648                 | ' 
04648                 | '     ' Handle the "skip to next pattern with offset command", "D"
04648                 | '     elseif cmdD_updatePosition
04648     E6 0F 06 F1 | 	add	objptr, #486
0464c     07 85 CA FA | 	rdbyte	local01, objptr wz
04650     E6 0F 86 F1 | 	sub	objptr, #486
04654     64 00 90 AD |  if_e	jmp	#LR__0148
04658                 | '       if ++songPosition >= songLength
04658     A3 0E 06 F1 | 	add	objptr, #163
0465c     07 85 C2 FA | 	rdbyte	local01, objptr
04660     01 84 06 F1 | 	add	local01, #1
04664     07 85 42 FC | 	wrbyte	local01, objptr
04668     07 89 C2 FA | 	rdbyte	local03, objptr
0466c     09 0E 86 F1 | 	sub	objptr, #9
04670     07 8B C2 FA | 	rdbyte	local04, objptr
04674     9A 0E 86 F1 | 	sub	objptr, #154
04678     45 89 5A F2 | 	cmps	local03, local04 wcz
0467c                 | '         songPosition := 0
0467c     A3 0E 06 31 |  if_ae	add	objptr, #163
04680     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04684     A3 0E 86 31 |  if_ae	sub	objptr, #163
04688                 | ' 
04688                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
04688     E4 0F 06 F1 | 	add	objptr, #484
0468c     07 89 C2 FA | 	rdbyte	local03, objptr
04690     44 85 02 F6 | 	mov	local01, local03
04694     02 84 66 F0 | 	shl	local01, #2
04698     44 85 02 F1 | 	add	local01, local03
0469c     01 84 66 F0 | 	shl	local01, #1
046a0     01 0E 06 F1 | 	add	objptr, #1
046a4     07 8B C2 FA | 	rdbyte	local04, objptr
046a8     45 85 02 F1 | 	add	local01, local04
046ac     43 0F 86 F1 | 	sub	objptr, #323
046b0     07 85 42 FC | 	wrbyte	local01, objptr
046b4     A2 0E 86 F1 | 	sub	objptr, #162
046b8                 | ' 
046b8                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
046b8                 | '     else
046b8     58 00 90 FD | 	jmp	#LR__0150
046bc                 | LR__0148
046bc                 | '       if ++patternRow >= PATTERN_LENGTH
046bc     A2 0E 06 F1 | 	add	objptr, #162
046c0     07 85 C2 FA | 	rdbyte	local01, objptr
046c4     01 84 06 F1 | 	add	local01, #1
046c8     07 85 42 FC | 	wrbyte	local01, objptr
046cc     07 89 C2 FA | 	rdbyte	local03, objptr
046d0     A2 0E 86 F1 | 	sub	objptr, #162
046d4     40 88 5E F2 | 	cmps	local03, #64 wcz
046d8     38 00 90 CD |  if_b	jmp	#LR__0149
046dc                 | '         patternRow := 0
046dc     A2 0E 06 F1 | 	add	objptr, #162
046e0     07 01 48 FC | 	wrbyte	#0, objptr
046e4                 | ' 
046e4                 | '         if ++songPosition >= songLength
046e4     01 0E 06 F1 | 	add	objptr, #1
046e8     07 85 C2 FA | 	rdbyte	local01, objptr
046ec     01 84 06 F1 | 	add	local01, #1
046f0     07 85 42 FC | 	wrbyte	local01, objptr
046f4     07 89 C2 FA | 	rdbyte	local03, objptr
046f8     09 0E 86 F1 | 	sub	objptr, #9
046fc     07 8B C2 FA | 	rdbyte	local04, objptr
04700     9A 0E 86 F1 | 	sub	objptr, #154
04704     45 89 5A F2 | 	cmps	local03, local04 wcz
04708                 | '           songPosition := 0
04708     A3 0E 06 31 |  if_ae	add	objptr, #163
0470c     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04710     A3 0E 86 31 |  if_ae	sub	objptr, #163
04714                 | LR__0149
04714                 | LR__0150
04714                 | LR__0151
04714                 | ' 
04714                 | '     ' Handle "jump to song position" command, "B"
04714                 | '     if cmdB_updatePosition
04714     E8 0F 06 F1 | 	add	objptr, #488
04718     07 85 CA FA | 	rdbyte	local01, objptr wz
0471c     E8 0F 86 F1 | 	sub	objptr, #488
04720     28 00 90 AD |  if_e	jmp	#LR__0152
04724                 | ' 
04724                 | '       songPosition := cmdB_memoryZ
04724     E7 0F 06 F1 | 	add	objptr, #487
04728     07 85 C2 FA | 	rdbyte	local01, objptr
0472c     44 0F 86 F1 | 	sub	objptr, #324
04730     07 85 42 FC | 	wrbyte	local01, objptr
04734                 | ' 
04734                 | '       ifnot cmdD_updatePosition
04734     43 0F 06 F1 | 	add	objptr, #323
04738     07 85 CA FA | 	rdbyte	local01, objptr wz
0473c     E6 0F 86 F1 | 	sub	objptr, #486
04740                 | '         patternRow := 0
04740     A2 0E 06 A1 |  if_e	add	objptr, #162
04744     07 01 48 AC |  if_e	wrbyte	#0, objptr
04748     A2 0E 86 A1 |  if_e	sub	objptr, #162
0474c                 | LR__0152
0474c                 | ' 
0474c                 | '     ' We need to be sure that all positioning commands are reset for the next tick
0474c                 | '     cmdE6_updatePositionCommon := false
0474c     F5 0F 06 F1 | 	add	objptr, #501
04750     07 01 48 FC | 	wrbyte	#0, objptr
04754                 | '     cmdB_updatePosition := false
04754     0D 0E 86 F1 | 	sub	objptr, #13
04758     07 01 48 FC | 	wrbyte	#0, objptr
0475c                 | '     cmdD_updatePosition := false
0475c     02 0E 86 F1 | 	sub	objptr, #2
04760     07 01 48 FC | 	wrbyte	#0, objptr
04764                 | '     patternDelay := 0
04764     41 0F 86 F1 | 	sub	objptr, #321
04768     07 01 48 FC | 	wrbyte	#0, objptr
0476c     A5 0E 86 F1 | 	sub	objptr, #165
04770                 | LR__0153
04770                 | LR__0154
04770     AF F0 03 F6 | 	mov	ptra, fp
04774     BF 00 A0 FD | 	call	#popregs_
04778                 | _trackerplayer_spin2_tick_ret
04778     2D 00 64 FD | 	ret
0477c                 | 
0477c                 | ' 
0477c                 | ' 
0477c                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
0477c                 | _trackerplayer_spin2_amigaPeriodToNote
0477c                 | ' 
0477c                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
0477c     00 36 06 F6 | 	mov	_var01, #0
04780     C8 B8 9F FE | 	loc	pa,	#(@LR__0156-@LR__0155)
04784     93 00 A0 FD | 	call	#FCACHE_LOAD_
04788                 | LR__0155
04788                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
04788     06 00 00 FF 
0478c     A4 2C 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04790     16 39 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
04794     3C 3B 02 F6 | 	mov	_var03, arg02
04798     03 3A 66 F0 | 	shl	_var03, #3
0479c     3C 3B 02 F1 | 	add	_var03, arg02
047a0     03 3A 66 F0 | 	shl	_var03, #3
047a4     1D 39 02 F1 | 	add	_var02, _var03
047a8     1B 3D 02 F6 | 	mov	_var04, _var01
047ac     01 3C 66 F0 | 	shl	_var04, #1
047b0     1C 3D 02 F1 | 	add	_var04, _var02
047b4     1E 3F E2 FA | 	rdword	_var05, _var04
047b8     3B 3F 5A F2 | 	cmps	_var05, arg01 wcz
047bc                 | '       quit
047bc     06 00 00 FF 
047c0     A4 2C 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
047c4     0C 00 90 ED |  if_be	jmp	#LR__0157
047c8     01 36 06 F1 | 	add	_var01, #1
047cc     24 36 5E F2 | 	cmps	_var01, #36 wcz
047d0     B4 FF 9F CD |  if_b	jmp	#LR__0155
047d4                 | LR__0156
047d4                 | LR__0157
047d4                 | ' 
047d4                 | '   return i
047d4     1B 31 02 F6 | 	mov	result1, _var01
047d8                 | _trackerplayer_spin2_amigaPeriodToNote_ret
047d8     2D 00 64 FD | 	ret
047dc                 | 
047dc                 | ' 
047dc                 | ' 
047dc                 | ' PRI retunePeriod(period, fTune) | noteNumber
047dc                 | _trackerplayer_spin2_retunePeriod
047dc     06 5A 05 F6 | 	mov	COUNT_, #6
047e0     B0 00 A0 FD | 	call	#pushregs_
047e4     3B 85 02 F6 | 	mov	local01, arg01
047e8     3C 87 02 F6 | 	mov	local02, arg02
047ec                 | ' 
047ec                 | '   if period > 0 and fTune < 16
047ec     00 84 5E F2 | 	cmps	local01, #0 wcz
047f0     50 00 90 ED |  if_be	jmp	#LR__0158
047f4     10 86 5E F2 | 	cmps	local02, #16 wcz
047f8     48 00 90 3D |  if_ae	jmp	#LR__0158
047fc                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
047fc     42 77 E2 FA | 	rdword	arg01, local01
04800     00 78 06 F6 | 	mov	arg02, #0
04804     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
04808     18 89 02 F6 | 	mov	local03, result1
0480c                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
0480c     06 00 00 FF 
04810     A4 2C 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04814     16 8B 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
04818     43 8D 02 F6 | 	mov	local05, local02
0481c     03 8C 66 F0 | 	shl	local05, #3
04820     43 8D 02 F1 | 	add	local05, local02
04824     03 8C 66 F0 | 	shl	local05, #3
04828     46 8B 02 F1 | 	add	local04, local05
0482c     01 88 66 F0 | 	shl	local03, #1
04830     45 89 02 F1 | 	add	local03, local04
04834     44 8F E2 FA | 	rdword	local06, local03
04838     42 8F 52 FC | 	wrword	local06, local01
0483c     06 00 00 FF 
04840     A4 2C 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04844                 | LR__0158
04844     AF F0 03 F6 | 	mov	ptra, fp
04848     BF 00 A0 FD | 	call	#popregs_
0484c                 | _trackerplayer_spin2_retunePeriod_ret
0484c     2D 00 64 FD | 	ret
04850                 | 
04850                 | ' 
04850                 | ' 
04850                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
04850                 | _trackerplayer_spin2_getSampleInfo
04850     3B 37 0A F6 | 	mov	_var01, arg01 wz
04854                 | ' 
04854                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
04854     08 00 90 AD |  if_e	jmp	#LR__0159
04858     1F 36 5E F2 | 	cmps	_var01, #31 wcz
0485c     08 00 90 ED |  if_be	jmp	#LR__0160
04860                 | LR__0159
04860                 | '     long[samplePtr] := 0
04860     3C 01 68 FC | 	wrlong	#0, arg02
04864                 | '     return
04864     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
04868                 | LR__0160
04868                 | ' 
04868                 | '   sampleNumber--
04868     01 36 86 F1 | 	sub	_var01, #1
0486c                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
0486c     0A 0E 06 F1 | 	add	objptr, #10
04870     07 39 02 FB | 	rdlong	_var02, objptr
04874     1B 3B 02 F6 | 	mov	_var03, _var01
04878     04 3A 66 F0 | 	shl	_var03, #4
0487c     1B 3B 82 F1 | 	sub	_var03, _var01
04880     01 3A 66 F0 | 	shl	_var03, #1
04884     1D 39 02 F1 | 	add	_var02, _var03
04888                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
04888     1C 3D 02 F6 | 	mov	_var04, _var02
0488c     16 3C 06 F1 | 	add	_var04, #22
04890     1E 3F C2 FA | 	rdbyte	_var05, _var04
04894     08 3E 66 F0 | 	shl	_var05, #8
04898     1C 3B 02 F6 | 	mov	_var03, _var02
0489c     17 3A 06 F1 | 	add	_var03, #23
048a0     1D 41 C2 FA | 	rdbyte	_var06, _var03
048a4     20 3F 42 F5 | 	or	_var05, _var06
048a8     01 3E 66 F0 | 	shl	_var05, #1
048ac     3D 3F 62 FC | 	wrlong	_var05, arg03
048b0                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
048b0     1C 3F 02 F6 | 	mov	_var05, _var02
048b4     18 3E 06 F1 | 	add	_var05, #24
048b8     1F 3D C2 FA | 	rdbyte	_var04, _var05
048bc     3E 3D 62 FC | 	wrlong	_var04, arg04
048c0                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
048c0     1C 3F 02 F6 | 	mov	_var05, _var02
048c4     19 3E 06 F1 | 	add	_var05, #25
048c8     1F 3D C2 FA | 	rdbyte	_var04, _var05
048cc     3F 3D 62 FC | 	wrlong	_var04, arg05
048d0                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
048d0     1C 3D 02 F6 | 	mov	_var04, _var02
048d4     1A 3C 06 F1 | 	add	_var04, #26
048d8     1E 3F C2 FA | 	rdbyte	_var05, _var04
048dc     08 3E 66 F0 | 	shl	_var05, #8
048e0     1C 3B 02 F6 | 	mov	_var03, _var02
048e4     1B 3A 06 F1 | 	add	_var03, #27
048e8     1D 41 C2 FA | 	rdbyte	_var06, _var03
048ec     20 3F 42 F5 | 	or	_var05, _var06
048f0     01 3E 66 F0 | 	shl	_var05, #1
048f4     40 3F 62 FC | 	wrlong	_var05, arg06
048f8                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
048f8     1C 3D 02 F6 | 	mov	_var04, _var02
048fc     1C 3C 06 F1 | 	add	_var04, #28
04900     1E 3F C2 FA | 	rdbyte	_var05, _var04
04904     08 3E 66 F0 | 	shl	_var05, #8
04908     1D 38 06 F1 | 	add	_var02, #29
0490c     1C 41 C2 FA | 	rdbyte	_var06, _var02
04910     20 3F 42 F5 | 	or	_var05, _var06
04914     01 3E 66 F0 | 	shl	_var05, #1
04918     41 3F 62 FC | 	wrlong	_var05, arg07
0491c                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
0491c     02 36 66 F0 | 	shl	_var01, #2
04920     08 0E 06 F1 | 	add	objptr, #8
04924     07 37 02 F1 | 	add	_var01, objptr
04928     1B 3B 02 FB | 	rdlong	_var03, _var01
0492c     3C 3B 62 FC | 	wrlong	_var03, arg02
04930                 | ' 
04930                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
04930     41 3F 02 FB | 	rdlong	_var05, arg07
04934     02 3E 0E F2 | 	cmp	_var05, #2 wz
04938     12 0E 86 F1 | 	sub	objptr, #18
0493c     08 00 90 5D |  if_ne	jmp	#LR__0161
04940     40 3D 0A FB | 	rdlong	_var04, arg06 wz
04944                 | '     long[repeatLength] := 1
04944     41 03 68 AC |  if_e	wrlong	#1, arg07
04948                 | LR__0161
04948                 | _trackerplayer_spin2_getSampleInfo_ret
04948     2D 00 64 FD | 	ret
0494c                 | 
0494c                 | ' 
0494c                 | ' 
0494c                 | ' PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr
0494c                 | _trackerplayer_spin2_getNoteData
0494c                 | ' 
0494c                 | '   ' Get the note data for a specific channel/song position/pattern row
0494c                 | '   patternNumber := byte[songPositionsLut][position & 127]
0494c     96 0E 06 F1 | 	add	objptr, #150
04950     07 37 02 FB | 	rdlong	_var01, objptr
04954     7F 78 06 F5 | 	and	arg02, #127
04958     1B 79 02 F1 | 	add	arg02, _var01
0495c     3C 39 C2 FA | 	rdbyte	_var02, arg02
04960                 | '   patternPtr    := patternsData + (patternNumber << 10)
04960     04 0E 86 F1 | 	sub	objptr, #4
04964     07 3B 02 FB | 	rdlong	_var03, objptr
04968     92 0E 86 F1 | 	sub	objptr, #146
0496c     0A 38 66 F0 | 	shl	_var02, #10
04970     1C 3B 02 F1 | 	add	_var03, _var02
04974                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
04974     3F 7A 06 F5 | 	and	arg03, #63
04978     04 7A 66 F0 | 	shl	arg03, #4
0497c     3D 3B 02 F1 | 	add	_var03, arg03
04980     03 76 06 F5 | 	and	arg01, #3
04984     02 76 66 F0 | 	shl	arg01, #2
04988     3B 3B 02 F1 | 	add	_var03, arg01
0498c                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
0498c     1D 3D C2 FA | 	rdbyte	_var04, _var03
04990     18 3C 66 F0 | 	shl	_var04, #24
04994     01 3A 06 F1 | 	add	_var03, #1
04998     1D 3F C2 FA | 	rdbyte	_var05, _var03
0499c     10 3E 66 F0 | 	shl	_var05, #16
049a0     1F 3D 42 F5 | 	or	_var04, _var05
049a4     01 3A 06 F1 | 	add	_var03, #1
049a8     1D 41 C2 FA | 	rdbyte	_var06, _var03
049ac     08 40 66 F0 | 	shl	_var06, #8
049b0     20 3D 42 F5 | 	or	_var04, _var06
049b4     01 3A 06 F1 | 	add	_var03, #1
049b8     1D 43 C2 FA | 	rdbyte	_var07, _var03
049bc     21 3D 42 F5 | 	or	_var04, _var07
049c0                 | ' 
049c0                 | '   ' Extract the different sub parts from the data
049c0                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
049c0     1E 45 02 F6 | 	mov	_var08, _var04
049c4     0C 44 46 F0 | 	shr	_var08, #12
049c8     0F 44 06 F5 | 	and	_var08, #15
049cc     1E 3F 02 F6 | 	mov	_var05, _var04
049d0     18 3E 46 F0 | 	shr	_var05, #24
049d4     F0 3E 06 F5 | 	and	_var05, #240
049d8     1F 45 42 F5 | 	or	_var08, _var05
049dc     3E 45 62 FC | 	wrlong	_var08, arg04
049e0                 | '   long[period]       :=  (data >> 16) & $FFF
049e0     1E 45 02 F6 | 	mov	_var08, _var04
049e4     10 44 46 F0 | 	shr	_var08, #16
049e8     07 00 00 FF 
049ec     FF 45 06 F5 | 	and	_var08, ##4095
049f0     3F 45 62 FC | 	wrlong	_var08, arg05
049f4                 | '   long[effect]       :=   data & $FFF
049f4     07 00 00 FF 
049f8     FF 3D 06 F5 | 	and	_var04, ##4095
049fc     40 3D 62 FC | 	wrlong	_var04, arg06
04a00                 | _trackerplayer_spin2_getNoteData_ret
04a00     2D 00 64 FD | 	ret
04a04                 | 
04a04                 | ' 
04a04                 | ' 
04a04                 | ' PRI triggerNote(channel)
04a04                 | _trackerplayer_spin2_triggerNote
04a04                 | ' 
04a04                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
04a04     3B 37 02 F6 | 	mov	_var01, arg01
04a08     02 36 66 F0 | 	shl	_var01, #2
04a0c     47 0F 06 F1 | 	add	objptr, #327
04a10     07 37 02 F1 | 	add	_var01, objptr
04a14     3B 39 02 F6 | 	mov	_var02, arg01
04a18     90 0E 86 F1 | 	sub	objptr, #144
04a1c     1B 3B 02 FB | 	rdlong	_var03, _var01
04a20     07 39 02 F1 | 	add	_var02, objptr
04a24     1C 3B 42 FC | 	wrbyte	_var03, _var02
04a28                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
04a28     3B 37 02 F6 | 	mov	_var01, arg01
04a2c     02 36 66 F0 | 	shl	_var01, #2
04a30     80 0E 06 F1 | 	add	objptr, #128
04a34     07 37 02 F1 | 	add	_var01, objptr
04a38     3B 39 02 F6 | 	mov	_var02, arg01
04a3c     02 38 66 F0 | 	shl	_var02, #2
04a40     90 0E 86 F1 | 	sub	objptr, #144
04a44     1B 3B 02 FB | 	rdlong	_var03, _var01
04a48     07 39 02 F1 | 	add	_var02, objptr
04a4c     1C 3B 62 FC | 	wrlong	_var03, _var02
04a50                 | '   currPeriod[channel]       := lastSetPeriod[channel]
04a50     3B 37 02 F6 | 	mov	_var01, arg01
04a54     02 36 66 F0 | 	shl	_var01, #2
04a58     80 0E 06 F1 | 	add	objptr, #128
04a5c     07 37 02 F1 | 	add	_var01, objptr
04a60     3B 39 02 F6 | 	mov	_var02, arg01
04a64     02 38 66 F0 | 	shl	_var02, #2
04a68     48 0E 86 F1 | 	sub	objptr, #72
04a6c     1B 3B 02 FB | 	rdlong	_var03, _var01
04a70     07 39 02 F1 | 	add	_var02, objptr
04a74     1C 3B 62 FC | 	wrlong	_var03, _var02
04a78                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
04a78     3B 37 02 F6 | 	mov	_var01, arg01
04a7c     02 36 66 F0 | 	shl	_var01, #2
04a80     78 0E 06 F1 | 	add	objptr, #120
04a84     07 37 02 F1 | 	add	_var01, objptr
04a88     3B 3D 02 F6 | 	mov	_var04, arg01
04a8c     01 3C 66 F0 | 	shl	_var04, #1
04a90     9C 0E 86 F1 | 	sub	objptr, #156
04a94     1B 3F 02 FB | 	rdlong	_var05, _var01
04a98     07 3D 02 F1 | 	add	_var04, objptr
04a9c     1E 3F 52 FC | 	wrword	_var05, _var04
04aa0                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04aa0     3B 37 02 F6 | 	mov	_var01, arg01
04aa4     02 36 66 F0 | 	shl	_var01, #2
04aa8     AC 0E 06 F1 | 	add	objptr, #172
04aac     07 37 02 F1 | 	add	_var01, objptr
04ab0     3B 39 02 F6 | 	mov	_var02, arg01
04ab4     02 38 66 F0 | 	shl	_var02, #2
04ab8     A4 0E 86 F1 | 	sub	objptr, #164
04abc     1B 3B 02 FB | 	rdlong	_var03, _var01
04ac0     07 39 02 F1 | 	add	_var02, objptr
04ac4     1C 3B 62 FC | 	wrlong	_var03, _var02
04ac8                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
04ac8     3B 37 02 F6 | 	mov	_var01, arg01
04acc     02 36 66 F0 | 	shl	_var01, #2
04ad0     B4 0E 06 F1 | 	add	objptr, #180
04ad4     07 37 02 F1 | 	add	_var01, objptr
04ad8     3B 3D 02 F6 | 	mov	_var04, arg01
04adc     01 3C 66 F0 | 	shl	_var04, #1
04ae0     A0 0E 86 F1 | 	sub	objptr, #160
04ae4     1B 3F 02 FB | 	rdlong	_var05, _var01
04ae8     07 3D 02 F1 | 	add	_var04, objptr
04aec     1E 3F 52 FC | 	wrword	_var05, _var04
04af0                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
04af0     3B 41 02 F6 | 	mov	_var06, arg01
04af4     1F 0F 06 F1 | 	add	objptr, #287
04af8     07 41 02 F1 | 	add	_var06, objptr
04afc     20 37 C2 FA | 	rdbyte	_var01, _var06
04b00     01 36 06 F1 | 	add	_var01, #1
04b04     07 77 02 F1 | 	add	arg01, objptr
04b08     3B 37 42 FC | 	wrbyte	_var01, arg01
04b0c     F6 0F 86 F1 | 	sub	objptr, #502
04b10                 | _trackerplayer_spin2_triggerNote_ret
04b10     2D 00 64 FD | 	ret
04b14                 | 
04b14                 | ' 
04b14                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
04b14                 | _trackerplayer_spin2_processChannel
04b14     0F 5A 05 F6 | 	mov	COUNT_, #15
04b18     B0 00 A0 FD | 	call	#pushregs_
04b1c     24 F0 07 F1 | 	add	ptra, #36
04b20     AF 76 62 FC | 	wrlong	arg01, fp
04b24     04 5E 05 F1 | 	add	fp, #4
04b28     AF 78 62 FC | 	wrlong	arg02, fp
04b2c     04 5E 05 F1 | 	add	fp, #4
04b30     AF 7A 62 FC | 	wrlong	arg03, fp
04b34     04 5E 05 F1 | 	add	fp, #4
04b38     AF 7C 62 FC | 	wrlong	arg04, fp
04b3c     0C 5E 85 F1 | 	sub	fp, #12
04b40                 | ' 
04b40                 | '   channel := channel & 3
04b40     AF 84 02 FB | 	rdlong	local01, fp
04b44     03 84 06 F5 | 	and	local01, #3
04b48     AF 84 62 FC | 	wrlong	local01, fp
04b4c                 | '   cmd     := (effect >> 8) & $F
04b4c     0C 5E 05 F1 | 	add	fp, #12
04b50     AF 84 02 FB | 	rdlong	local01, fp
04b54     08 84 46 F0 | 	shr	local01, #8
04b58     0F 84 06 F5 | 	and	local01, #15
04b5c     BA 0F 06 F1 | 	add	objptr, #442
04b60     07 85 42 FC | 	wrbyte	local01, objptr
04b64                 | '   x       := (effect >> 4) & $F
04b64     AF 84 02 FB | 	rdlong	local01, fp
04b68     04 84 46 F0 | 	shr	local01, #4
04b6c     0F 84 06 F5 | 	and	local01, #15
04b70     03 0E 86 F1 | 	sub	objptr, #3
04b74     07 85 42 FC | 	wrbyte	local01, objptr
04b78                 | '   y       := (effect     ) & $F
04b78     AF 84 02 FB | 	rdlong	local01, fp
04b7c     0F 84 06 F5 | 	and	local01, #15
04b80     01 0E 06 F1 | 	add	objptr, #1
04b84     07 85 42 FC | 	wrbyte	local01, objptr
04b88                 | '   z       := (effect     ) & $FF
04b88     AF 84 02 FB | 	rdlong	local01, fp
04b8c     0C 5E 85 F1 | 	sub	fp, #12
04b90     FF 84 06 F5 | 	and	local01, #255
04b94     01 0E 06 F1 | 	add	objptr, #1
04b98     07 85 42 FC | 	wrbyte	local01, objptr
04b9c                 | ' 
04b9c                 | '   ' Handle everything that executes on "tick zero"
04b9c                 | '   if tickCounter == 0
04b9c     18 0F 86 F1 | 	sub	objptr, #280
04ba0     07 85 CA FA | 	rdbyte	local01, objptr wz
04ba4     A1 0E 86 F1 | 	sub	objptr, #161
04ba8     F8 03 90 5D |  if_ne	jmp	#LR__0172
04bac                 | ' 
04bac                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
04bac                 | '     deltaPeriod[channel] := 0
04bac     AF 84 02 FB | 	rdlong	local01, fp
04bb0     02 84 66 F0 | 	shl	local01, #2
04bb4     EF 0E 06 F1 | 	add	objptr, #239
04bb8     07 85 02 F1 | 	add	local01, objptr
04bbc     42 01 68 FC | 	wrlong	#0, local01
04bc0                 | '     deltaVolume[channel] := 0
04bc0     AF 84 02 FB | 	rdlong	local01, fp
04bc4     02 84 66 F0 | 	shl	local01, #2
04bc8     20 0E 06 F1 | 	add	objptr, #32
04bcc     07 85 02 F1 | 	add	local01, objptr
04bd0     42 01 68 FC | 	wrlong	#0, local01
04bd4                 | ' 
04bd4                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
04bd4                 | '     if sampleNumber > 0
04bd4     04 5E 05 F1 | 	add	fp, #4
04bd8     AF 84 02 FB | 	rdlong	local01, fp
04bdc     04 5E 85 F1 | 	sub	fp, #4
04be0     00 84 5E F2 | 	cmps	local01, #0 wcz
04be4     0F 0F 86 F1 | 	sub	objptr, #271
04be8     20 00 90 ED |  if_be	jmp	#LR__0162
04bec                 | '       sampleNumber_memory[channel] := sampleNumber
04bec     AF 84 02 FB | 	rdlong	local01, fp
04bf0     E0 0F 06 F1 | 	add	objptr, #480
04bf4     07 85 02 F1 | 	add	local01, objptr
04bf8     04 5E 05 F1 | 	add	fp, #4
04bfc     AF 86 02 FB | 	rdlong	local02, fp
04c00     04 5E 85 F1 | 	sub	fp, #4
04c04     42 87 42 FC | 	wrbyte	local02, local01
04c08     E0 0F 86 F1 | 	sub	objptr, #480
04c0c                 | LR__0162
04c0c                 | ' 
04c0c                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
04c0c                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
04c0c     AF 84 02 FB | 	rdlong	local01, fp
04c10     E0 0F 06 F1 | 	add	objptr, #480
04c14     07 85 02 F1 | 	add	local01, objptr
04c18     42 77 C2 FA | 	rdbyte	arg01, local01
04c1c     20 5E 05 F1 | 	add	fp, #32
04c20     AF 78 02 F6 | 	mov	arg02, fp
04c24     10 5E 85 F1 | 	sub	fp, #16
04c28     AF 88 02 F6 | 	mov	local03, fp
04c2c     31 0E 86 F1 | 	sub	objptr, #49
04c30     07 8B 02 F6 | 	mov	local04, objptr
04c34     45 8D 02 F6 | 	mov	local05, local04
04c38     04 5E 05 F1 | 	add	fp, #4
04c3c     AF 8E 02 F6 | 	mov	local06, fp
04c40     47 91 02 F6 | 	mov	local07, local06
04c44     04 5E 05 F1 | 	add	fp, #4
04c48     AF 92 02 F6 | 	mov	local08, fp
04c4c     49 95 02 F6 | 	mov	local09, local08
04c50     04 5E 05 F1 | 	add	fp, #4
04c54     AF 96 02 F6 | 	mov	local10, fp
04c58     4B 99 02 F6 | 	mov	local11, local10
04c5c     44 7B 02 F6 | 	mov	arg03, local03
04c60     46 7D 02 F6 | 	mov	arg04, local05
04c64     48 7F 02 F6 | 	mov	arg05, local07
04c68     4A 81 02 F6 | 	mov	arg06, local09
04c6c     4C 83 02 F6 | 	mov	arg07, local11
04c70     AF 0F 86 F1 | 	sub	objptr, #431
04c74     1C 5E 85 F1 | 	sub	fp, #28
04c78     D4 FB BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
04c7c                 | ' 
04c7c                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
04c7c                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
04c7c                 | '     if sampleNumber > 0
04c7c     04 5E 05 F1 | 	add	fp, #4
04c80     AF 84 02 FB | 	rdlong	local01, fp
04c84     04 5E 85 F1 | 	sub	fp, #4
04c88     00 84 5E F2 | 	cmps	local01, #0 wcz
04c8c     24 00 90 ED |  if_be	jmp	#LR__0163
04c90                 | '       currVolume[channel] := volume
04c90     AF 84 02 FB | 	rdlong	local01, fp
04c94     02 84 66 F0 | 	shl	local01, #2
04c98     FF 0E 06 F1 | 	add	objptr, #255
04c9c     07 85 02 F1 | 	add	local01, objptr
04ca0     14 5E 05 F1 | 	add	fp, #20
04ca4     AF 86 02 FB | 	rdlong	local02, fp
04ca8     14 5E 85 F1 | 	sub	fp, #20
04cac     42 87 62 FC | 	wrlong	local02, local01
04cb0     FF 0E 86 F1 | 	sub	objptr, #255
04cb4                 | LR__0163
04cb4                 | ' 
04cb4                 | '     ' Handle all commands that executes on "zero tick"
04cb4                 | '     sampleOffset := 0
04cb4     B3 0F 06 F1 | 	add	objptr, #435
04cb8     07 01 68 FC | 	wrlong	#0, objptr
04cbc     B3 0F 86 F1 | 	sub	objptr, #435
04cc0                 | '     handleZeroTickCommands(channel)
04cc0     AF 76 02 FB | 	rdlong	arg01, fp
04cc4     98 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
04cc8                 | ' 
04cc8                 | '     ' Prepare sample data for triggering (now or later)
04cc8                 | '     if period > 0
04cc8     08 5E 05 F1 | 	add	fp, #8
04ccc     AF 84 02 FB | 	rdlong	local01, fp
04cd0     08 5E 85 F1 | 	sub	fp, #8
04cd4     00 84 5E F2 | 	cmps	local01, #0 wcz
04cd8     D0 02 90 ED |  if_be	jmp	#LR__0173
04cdc                 | ' 
04cdc                 | '       retunePeriod(@period, fineTune)
04cdc     08 5E 05 F1 | 	add	fp, #8
04ce0     AF 76 02 F6 | 	mov	arg01, fp
04ce4     08 5E 85 F1 | 	sub	fp, #8
04ce8     AF 0F 06 F1 | 	add	objptr, #431
04cec     07 79 02 FB | 	rdlong	arg02, objptr
04cf0     AF 0F 86 F1 | 	sub	objptr, #431
04cf4     E4 FA BF FD | 	call	#_trackerplayer_spin2_retunePeriod
04cf8                 | '       currFineTune[channel]        := fineTune
04cf8     AF 84 02 FB | 	rdlong	local01, fp
04cfc     D3 0E 06 F1 | 	add	objptr, #211
04d00     07 85 02 F1 | 	add	local01, objptr
04d04     DC 0E 06 F1 | 	add	objptr, #220
04d08     07 87 02 FB | 	rdlong	local02, objptr
04d0c     42 87 42 FC | 	wrbyte	local02, local01
04d10                 | '       lastSetPeriod[channel]       := period
04d10     AF 84 02 FB | 	rdlong	local01, fp
04d14     02 84 66 F0 | 	shl	local01, #2
04d18     88 0E 86 F1 | 	sub	objptr, #136
04d1c     07 85 02 F1 | 	add	local01, objptr
04d20     08 5E 05 F1 | 	add	fp, #8
04d24     AF 86 02 FB | 	rdlong	local02, fp
04d28     42 87 62 FC | 	wrlong	local02, local01
04d2c     08 5E 85 F1 | 	sub	fp, #8
04d30                 | '       lastSetRepeatLength[channel] := repeatLength
04d30     AF 84 02 FB | 	rdlong	local01, fp
04d34     02 84 66 F0 | 	shl	local01, #2
04d38     40 0E 06 F1 | 	add	objptr, #64
04d3c     07 85 02 F1 | 	add	local01, objptr
04d40     1C 5E 05 F1 | 	add	fp, #28
04d44     AF 86 02 FB | 	rdlong	local02, fp
04d48     42 87 62 FC | 	wrlong	local02, local01
04d4c     1C 5E 85 F1 | 	sub	fp, #28
04d50                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04d50     AF 84 02 FB | 	rdlong	local01, fp
04d54     02 84 66 F0 | 	shl	local01, #2
04d58     10 0E 06 F1 | 	add	objptr, #16
04d5c     07 85 02 F1 | 	add	local01, objptr
04d60     18 5E 05 F1 | 	add	fp, #24
04d64     AF 86 02 FB | 	rdlong	local02, fp
04d68     42 87 62 FC | 	wrlong	local02, local01
04d6c                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
04d6c     08 5E 05 F1 | 	add	fp, #8
04d70     AF 84 02 FB | 	rdlong	local01, fp
04d74     20 5E 85 F1 | 	sub	fp, #32
04d78     3C 0E 06 F1 | 	add	objptr, #60
04d7c     07 87 02 FB | 	rdlong	local02, objptr
04d80     43 85 02 F1 | 	add	local01, local02
04d84     AF 9A 02 FB | 	rdlong	local12, fp
04d88     02 9A 66 F0 | 	shl	local12, #2
04d8c     7C 0E 86 F1 | 	sub	objptr, #124
04d90     07 9D 02 F6 | 	mov	local13, objptr
04d94     07 9B 02 F1 | 	add	local12, objptr
04d98     4D 85 62 FC | 	wrlong	local01, local12
04d9c                 | '       lastSetSampleNr[channel]     := sampleNumber
04d9c     AF 84 02 FB | 	rdlong	local01, fp
04da0     02 84 66 F0 | 	shl	local01, #2
04da4     10 0E 06 F1 | 	add	objptr, #16
04da8     07 85 02 F1 | 	add	local01, objptr
04dac     04 5E 05 F1 | 	add	fp, #4
04db0     AF 86 02 FB | 	rdlong	local02, fp
04db4     42 87 62 FC | 	wrlong	local02, local01
04db8                 | ' 
04db8                 | '       ' This calculates the correct sample length in all situations
04db8                 | '       if repeatLength > 2
04db8     18 5E 05 F1 | 	add	fp, #24
04dbc     AF 84 02 FB | 	rdlong	local01, fp
04dc0     1C 5E 85 F1 | 	sub	fp, #28
04dc4     02 84 5E F2 | 	cmps	local01, #2 wcz
04dc8     47 0F 86 F1 | 	sub	objptr, #327
04dcc     20 00 90 ED |  if_be	jmp	#LR__0164
04dd0                 | '         sampleLength := repeatPoint + repeatLength
04dd0     18 5E 05 F1 | 	add	fp, #24
04dd4     AF 84 02 FB | 	rdlong	local01, fp
04dd8     04 5E 05 F1 | 	add	fp, #4
04ddc     AF 86 02 FB | 	rdlong	local02, fp
04de0     43 85 02 F1 | 	add	local01, local02
04de4     0C 5E 85 F1 | 	sub	fp, #12
04de8     AF 84 62 FC | 	wrlong	local01, fp
04dec     10 5E 85 F1 | 	sub	fp, #16
04df0                 | LR__0164
04df0                 | ' 
04df0                 | '       if sampleLength - sampleOffset < 1
04df0     10 5E 05 F1 | 	add	fp, #16
04df4     AF 84 02 FB | 	rdlong	local01, fp
04df8     10 5E 85 F1 | 	sub	fp, #16
04dfc     B3 0F 06 F1 | 	add	objptr, #435
04e00     07 87 02 FB | 	rdlong	local02, objptr
04e04     B3 0F 86 F1 | 	sub	objptr, #435
04e08     43 85 82 F1 | 	sub	local01, local02
04e0c     01 84 5E F2 | 	cmps	local01, #1 wcz
04e10     1C 00 90 3D |  if_ae	jmp	#LR__0165
04e14                 | '         lastSetSampleLength[channel] := 1
04e14     AF 84 02 FB | 	rdlong	local01, fp
04e18     02 84 66 F0 | 	shl	local01, #2
04e1c     57 0F 06 F1 | 	add	objptr, #343
04e20     07 85 02 F1 | 	add	local01, objptr
04e24     42 03 68 FC | 	wrlong	#1, local01
04e28                 | '       else
04e28     57 0F 86 F1 | 	sub	objptr, #343
04e2c     34 00 90 FD | 	jmp	#LR__0166
04e30                 | LR__0165
04e30                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04e30     10 5E 05 F1 | 	add	fp, #16
04e34     AF 84 02 FB | 	rdlong	local01, fp
04e38     10 5E 85 F1 | 	sub	fp, #16
04e3c     B3 0F 06 F1 | 	add	objptr, #435
04e40     07 87 02 FB | 	rdlong	local02, objptr
04e44     43 85 82 F1 | 	sub	local01, local02
04e48     AF 9A 02 FB | 	rdlong	local12, fp
04e4c     02 9A 66 F0 | 	shl	local12, #2
04e50     5C 0E 86 F1 | 	sub	objptr, #92
04e54     07 9D 02 F6 | 	mov	local13, objptr
04e58     07 9B 02 F1 | 	add	local12, objptr
04e5c     4D 85 62 FC | 	wrlong	local01, local12
04e60     57 0F 86 F1 | 	sub	objptr, #343
04e64                 | LR__0166
04e64                 | ' 
04e64                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04e64                 | '       if sampleOffset > sampleLength
04e64     B3 0F 06 F1 | 	add	objptr, #435
04e68     07 85 02 FB | 	rdlong	local01, objptr
04e6c     B3 0F 86 F1 | 	sub	objptr, #435
04e70     10 5E 05 F1 | 	add	fp, #16
04e74     AF 86 02 FB | 	rdlong	local02, fp
04e78     10 5E 85 F1 | 	sub	fp, #16
04e7c     43 85 5A F2 | 	cmps	local01, local02 wcz
04e80     54 00 90 ED |  if_be	jmp	#LR__0167
04e84                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04e84     20 5E 05 F1 | 	add	fp, #32
04e88     AF 84 02 FB | 	rdlong	local01, fp
04e8c     08 5E 85 F1 | 	sub	fp, #8
04e90     AF 86 02 FB | 	rdlong	local02, fp
04e94     18 5E 85 F1 | 	sub	fp, #24
04e98     43 85 02 F1 | 	add	local01, local02
04e9c     AF 9A 02 FB | 	rdlong	local12, fp
04ea0     02 9A 66 F0 | 	shl	local12, #2
04ea4     37 0F 06 F1 | 	add	objptr, #311
04ea8     07 9D 02 F6 | 	mov	local13, objptr
04eac     07 9B 02 F1 | 	add	local12, objptr
04eb0     4D 85 62 FC | 	wrlong	local01, local12
04eb4                 | '         lastSetSampleLength[channel] := repeatLength
04eb4     AF 84 02 FB | 	rdlong	local01, fp
04eb8     02 84 66 F0 | 	shl	local01, #2
04ebc     20 0E 06 F1 | 	add	objptr, #32
04ec0     07 85 02 F1 | 	add	local01, objptr
04ec4     1C 5E 05 F1 | 	add	fp, #28
04ec8     AF 86 02 FB | 	rdlong	local02, fp
04ecc     1C 5E 85 F1 | 	sub	fp, #28
04ed0     42 87 62 FC | 	wrlong	local02, local01
04ed4     57 0F 86 F1 | 	sub	objptr, #343
04ed8                 | LR__0167
04ed8                 | ' 
04ed8                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04ed8                 | '       ifnot cmd == $3 || cmd == $5
04ed8     BA 0F 06 F1 | 	add	objptr, #442
04edc     07 85 C2 FA | 	rdbyte	local01, objptr
04ee0     BA 0F 86 F1 | 	sub	objptr, #442
04ee4     03 84 0E F2 | 	cmp	local01, #3 wz
04ee8     54 00 90 AD |  if_e	jmp	#LR__0170
04eec     BA 0F 06 F1 | 	add	objptr, #442
04ef0     07 9F C2 FA | 	rdbyte	local14, objptr
04ef4     BA 0F 86 F1 | 	sub	objptr, #442
04ef8     4F 87 02 F6 | 	mov	local02, local14
04efc     05 86 0E F2 | 	cmp	local02, #5 wz
04f00     3C 00 90 AD |  if_e	jmp	#LR__0170
04f04                 | '         ifnot cmd == $E && x == $D
04f04     BA 0F 06 F1 | 	add	objptr, #442
04f08     07 A1 C2 FA | 	rdbyte	local15, objptr
04f0c     BA 0F 86 F1 | 	sub	objptr, #442
04f10     50 85 02 F6 | 	mov	local01, local15
04f14     0E 84 0E F2 | 	cmp	local01, #14 wz
04f18     18 00 90 5D |  if_ne	jmp	#LR__0168
04f1c     B7 0F 06 F1 | 	add	objptr, #439
04f20     07 9F C2 FA | 	rdbyte	local14, objptr
04f24     B7 0F 86 F1 | 	sub	objptr, #439
04f28     4F 87 02 F6 | 	mov	local02, local14
04f2c     0D 86 0E F2 | 	cmp	local02, #13 wz
04f30     0C 00 90 AD |  if_e	jmp	#LR__0169
04f34                 | LR__0168
04f34                 | '           triggerNote(channel)
04f34     AF 84 02 FB | 	rdlong	local01, fp
04f38     42 77 02 F6 | 	mov	arg01, local01
04f3c     C4 FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04f40                 | LR__0169
04f40                 | LR__0170
04f40                 | ' 
04f40                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04f40                 | '       if resetTremolo[channel] > 0
04f40     AF 84 02 FB | 	rdlong	local01, fp
04f44     8F 0F 06 F1 | 	add	objptr, #399
04f48     07 85 02 F1 | 	add	local01, objptr
04f4c     42 87 C2 FA | 	rdbyte	local02, local01
04f50     00 86 5E F2 | 	cmps	local02, #0 wcz
04f54     8F 0F 86 F1 | 	sub	objptr, #399
04f58     14 00 90 ED |  if_be	jmp	#LR__0171
04f5c                 | '         tremoloPos[channel] := 0
04f5c     AF 84 02 FB | 	rdlong	local01, fp
04f60     8B 0F 06 F1 | 	add	objptr, #395
04f64     07 85 02 F1 | 	add	local01, objptr
04f68     42 01 48 FC | 	wrbyte	#0, local01
04f6c     8B 0F 86 F1 | 	sub	objptr, #395
04f70                 | LR__0171
04f70                 | ' 
04f70                 | '       if resetVibrato[channel] > 0
04f70     AF 84 02 FB | 	rdlong	local01, fp
04f74     93 0F 06 F1 | 	add	objptr, #403
04f78     07 85 02 F1 | 	add	local01, objptr
04f7c     42 87 C2 FA | 	rdbyte	local02, local01
04f80     00 86 5E F2 | 	cmps	local02, #0 wcz
04f84     93 0F 86 F1 | 	sub	objptr, #403
04f88     20 00 90 ED |  if_be	jmp	#LR__0173
04f8c                 | '         vibratoPos[channel] := 0
04f8c     AF 84 02 FB | 	rdlong	local01, fp
04f90     87 0F 06 F1 | 	add	objptr, #391
04f94     07 85 02 F1 | 	add	local01, objptr
04f98     42 01 48 FC | 	wrbyte	#0, local01
04f9c     87 0F 86 F1 | 	sub	objptr, #391
04fa0                 | ' 
04fa0                 | '   else
04fa0     08 00 90 FD | 	jmp	#LR__0173
04fa4                 | LR__0172
04fa4                 | '     ' Handle commands that executes on all "non zero ticks"
04fa4                 | '     handleNonZeroTickCommands(channel)
04fa4     AF 76 02 FB | 	rdlong	arg01, fp
04fa8     14 05 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04fac                 | LR__0173
04fac                 | ' 
04fac                 | '   ' Handle commands that executes on every tick
04fac                 | '   handleEveryTickCommands(channel)
04fac     AF 76 02 FB | 	rdlong	arg01, fp
04fb0     70 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04fb4                 | ' 
04fb4                 | '   ' Handle boundaries that should be kept
04fb4                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04fb4     AF A0 02 FB | 	rdlong	local15, fp
04fb8     02 A0 66 F0 | 	shl	local15, #2
04fbc     DF 0E 06 F1 | 	add	objptr, #223
04fc0     07 A1 02 F1 | 	add	local15, objptr
04fc4     50 85 02 FB | 	rdlong	local01, local15
04fc8     01 00 00 FF 
04fcc     58 85 66 F3 | 	fles	local01, ##856
04fd0     AF 9E 02 FB | 	rdlong	local14, fp
04fd4     02 9E 66 F0 | 	shl	local14, #2
04fd8     07 9F 02 F1 | 	add	local14, objptr
04fdc     4F 85 62 FC | 	wrlong	local01, local14
04fe0                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04fe0     AF A0 02 FB | 	rdlong	local15, fp
04fe4     02 A0 66 F0 | 	shl	local15, #2
04fe8     07 A1 02 F1 | 	add	local15, objptr
04fec     50 85 02 FB | 	rdlong	local01, local15
04ff0     71 84 46 F3 | 	fges	local01, #113
04ff4     AF 9E 02 FB | 	rdlong	local14, fp
04ff8     02 9E 66 F0 | 	shl	local14, #2
04ffc     07 9F 02 F1 | 	add	local14, objptr
05000     4F 85 62 FC | 	wrlong	local01, local14
05004                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
05004     AF A0 02 FB | 	rdlong	local15, fp
05008     02 A0 66 F0 | 	shl	local15, #2
0500c     20 0E 06 F1 | 	add	objptr, #32
05010     07 A1 02 F1 | 	add	local15, objptr
05014     50 85 02 FB | 	rdlong	local01, local15
05018     40 84 66 F3 | 	fles	local01, #64
0501c     AF 9E 02 FB | 	rdlong	local14, fp
05020     02 9E 66 F0 | 	shl	local14, #2
05024     07 9F 02 F1 | 	add	local14, objptr
05028     4F 85 62 FC | 	wrlong	local01, local14
0502c                 | '   currVolume[channel] #>= MINIMUM_VOLUME
0502c     AF A0 02 FB | 	rdlong	local15, fp
05030     02 A0 66 F0 | 	shl	local15, #2
05034     07 A1 02 F1 | 	add	local15, objptr
05038     50 85 02 FB | 	rdlong	local01, local15
0503c     00 84 46 F3 | 	fges	local01, #0
05040     AF 9E 02 FB | 	rdlong	local14, fp
05044     02 9E 66 F0 | 	shl	local14, #2
05048     07 9F 02 F1 | 	add	local14, objptr
0504c     4F 85 62 FC | 	wrlong	local01, local14
05050     FF 0E 86 F1 | 	sub	objptr, #255
05054     AF F0 03 F6 | 	mov	ptra, fp
05058     BF 00 A0 FD | 	call	#popregs_
0505c                 | _trackerplayer_spin2_processChannel_ret
0505c     2D 00 64 FD | 	ret
05060                 | 
05060                 | ' 
05060                 | ' 
05060                 | ' ' Handle all commands that executes on tick zero
05060                 | ' '
05060                 | ' PRI handleZeroTickCommands(channel)
05060                 | _trackerplayer_spin2_handleZeroTickCommands
05060     3B 37 02 F6 | 	mov	_var01, arg01
05064                 | ' 
05064                 | '   CASE_FAST cmd
05064     BA 0F 06 F1 | 	add	objptr, #442
05068     07 39 C2 FA | 	rdbyte	_var02, objptr
0506c     BA 0F 86 F1 | 	sub	objptr, #442
05070     1C 3B 02 F6 | 	mov	_var03, _var02
05074     09 3A 86 F1 | 	sub	_var03, #9
05078     07 3A 26 F3 | 	fle	_var03, #7
0507c     1D 3D 02 F6 | 	mov	_var04, _var03
05080     30 3C 62 FD | 	jmprel	_var04
05084                 | LR__0174
05084     1C 00 90 FD | 	jmp	#LR__0175
05088     30 04 90 FD | 	jmp	#LR__0198
0508c     64 00 90 FD | 	jmp	#LR__0177
05090     84 00 90 FD | 	jmp	#LR__0178
05094     A0 00 90 FD | 	jmp	#LR__0179
05098     D0 00 90 FD | 	jmp	#LR__0180
0509c     9C 03 90 FD | 	jmp	#LR__0195
050a0     18 04 90 FD | 	jmp	#LR__0198
050a4                 | LR__0175
050a4                 | ' 
050a4                 | '     $9:                          ' Set sample offset
050a4                 | '       if z > 0
050a4     B9 0F 06 F1 | 	add	objptr, #441
050a8     07 3F C2 FA | 	rdbyte	_var05, objptr
050ac     B9 0F 86 F1 | 	sub	objptr, #441
050b0     00 3E 5E F2 | 	cmps	_var05, #0 wcz
050b4     1C 00 90 ED |  if_be	jmp	#LR__0176
050b8                 | '         cmd9_memoryZ[channel] := z
050b8     1B 3F 02 F6 | 	mov	_var05, _var01
050bc     DC 0F 06 F1 | 	add	objptr, #476
050c0     07 3F 02 F1 | 	add	_var05, objptr
050c4     23 0E 86 F1 | 	sub	objptr, #35
050c8     07 41 C2 FA | 	rdbyte	_var06, objptr
050cc     B9 0F 86 F1 | 	sub	objptr, #441
050d0     1F 41 42 FC | 	wrbyte	_var06, _var05
050d4                 | LR__0176
050d4                 | ' 
050d4                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
050d4     DC 0F 06 F1 | 	add	objptr, #476
050d8     07 37 02 F1 | 	add	_var01, objptr
050dc     1B 3F C2 FA | 	rdbyte	_var05, _var01
050e0     08 3E 66 F0 | 	shl	_var05, #8
050e4     29 0E 86 F1 | 	sub	objptr, #41
050e8     07 3F 62 FC | 	wrlong	_var05, objptr
050ec     B3 0F 86 F1 | 	sub	objptr, #435
050f0     C8 03 90 FD | 	jmp	#LR__0198
050f4                 | LR__0177
050f4                 | ' 
050f4                 | '     $B:                          ' Jump position
050f4                 | '       cmdB_memoryZ := z
050f4     B9 0F 06 F1 | 	add	objptr, #441
050f8     07 3F C2 FA | 	rdbyte	_var05, objptr
050fc     2E 0E 06 F1 | 	add	objptr, #46
05100     07 3F 42 FC | 	wrbyte	_var05, objptr
05104                 | '       cmdB_updatePosition := true
05104     01 0E 06 F1 | 	add	objptr, #1
05108     FF FF FF FF 
0510c     07 FF 4B FC | 	wrbyte	##-1, objptr
05110     E8 0F 86 F1 | 	sub	objptr, #488
05114     A4 03 90 FD | 	jmp	#LR__0198
05118                 | LR__0178
05118                 | ' 
05118                 | '     $C:                          ' Set volume
05118                 | '       currVolume[channel] := z
05118     02 36 66 F0 | 	shl	_var01, #2
0511c     FF 0E 06 F1 | 	add	objptr, #255
05120     07 37 02 F1 | 	add	_var01, objptr
05124     BA 0E 06 F1 | 	add	objptr, #186
05128     07 41 C2 FA | 	rdbyte	_var06, objptr
0512c     B9 0F 86 F1 | 	sub	objptr, #441
05130     1B 41 62 FC | 	wrlong	_var06, _var01
05134     84 03 90 FD | 	jmp	#LR__0198
05138                 | LR__0179
05138                 | ' 
05138                 | '     $D:                          ' Pattern break
05138                 | '       cmdD_memoryX := x
05138     B7 0F 06 F1 | 	add	objptr, #439
0513c     07 3F C2 FA | 	rdbyte	_var05, objptr
05140     2D 0E 06 F1 | 	add	objptr, #45
05144     07 3F 42 FC | 	wrbyte	_var05, objptr
05148                 | '       cmdD_memoryY := y
05148     2C 0E 86 F1 | 	sub	objptr, #44
0514c     07 3F C2 FA | 	rdbyte	_var05, objptr
05150     2D 0E 06 F1 | 	add	objptr, #45
05154     07 3F 42 FC | 	wrbyte	_var05, objptr
05158                 | '       cmdD_updatePosition := true
05158     01 0E 06 F1 | 	add	objptr, #1
0515c     FF FF FF FF 
05160     07 FF 4B FC | 	wrbyte	##-1, objptr
05164     E6 0F 86 F1 | 	sub	objptr, #486
05168     50 03 90 FD | 	jmp	#LR__0198
0516c                 | LR__0180
0516c                 | ' 
0516c                 | '     $E:                          ' Handle "E commands" that execute on tick zero
0516c                 | ' 
0516c                 | '       CASE_FAST x
0516c     B7 0F 06 F1 | 	add	objptr, #439
05170     07 43 C2 FA | 	rdbyte	_var07, objptr
05174     B7 0F 86 F1 | 	sub	objptr, #439
05178     21 3F 02 F6 | 	mov	_var05, _var07
0517c     0F 3E 26 F3 | 	fle	_var05, #15
05180     1F 45 02 F6 | 	mov	_var08, _var05
05184     30 44 62 FD | 	jmprel	_var08
05188                 | LR__0181
05188     3C 00 90 FD | 	jmp	#LR__0182
0518c     58 00 90 FD | 	jmp	#LR__0183
05190     8C 00 90 FD | 	jmp	#LR__0184
05194     C0 00 90 FD | 	jmp	#LR__0185
05198     DC 00 90 FD | 	jmp	#LR__0186
0519c     14 01 90 FD | 	jmp	#LR__0187
051a0     28 01 90 FD | 	jmp	#LR__0188
051a4     C0 01 90 FD | 	jmp	#LR__0191
051a8     10 03 90 FD | 	jmp	#LR__0198
051ac     0C 03 90 FD | 	jmp	#LR__0198
051b0     F0 01 90 FD | 	jmp	#LR__0192
051b4     24 02 90 FD | 	jmp	#LR__0193
051b8     00 03 90 FD | 	jmp	#LR__0198
051bc     FC 02 90 FD | 	jmp	#LR__0198
051c0     50 02 90 FD | 	jmp	#LR__0194
051c4     F4 02 90 FD | 	jmp	#LR__0198
051c8                 | LR__0182
051c8                 | ' 
051c8                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
051c8     B8 0F 06 F1 | 	add	objptr, #440
051cc     07 41 C2 FA | 	rdbyte	_var06, objptr
051d0     20 41 22 F6 | 	not	_var06, _var06
051d4     01 40 06 F5 | 	and	_var06, #1
051d8     03 0E 06 F1 | 	add	objptr, #3
051dc     07 41 42 FC | 	wrbyte	_var06, objptr
051e0     BB 0F 86 F1 | 	sub	objptr, #443
051e4     D4 02 90 FD | 	jmp	#LR__0198
051e8                 | LR__0183
051e8                 | ' 
051e8                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
051e8     1B 47 02 F6 | 	mov	_var09, _var01
051ec     02 46 66 F0 | 	shl	_var09, #2
051f0     DF 0E 06 F1 | 	add	objptr, #223
051f4     07 47 02 F1 | 	add	_var09, objptr
051f8     23 41 02 FB | 	rdlong	_var06, _var09
051fc     D9 0E 06 F1 | 	add	objptr, #217
05200     07 49 C2 FA | 	rdbyte	_var10, objptr
05204     24 41 82 F1 | 	sub	_var06, _var10
05208     02 36 66 F0 | 	shl	_var01, #2
0520c     D9 0E 86 F1 | 	sub	objptr, #217
05210     07 37 02 F1 | 	add	_var01, objptr
05214     1B 41 62 FC | 	wrlong	_var06, _var01
05218     DF 0E 86 F1 | 	sub	objptr, #223
0521c     9C 02 90 FD | 	jmp	#LR__0198
05220                 | LR__0184
05220                 | ' 
05220                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
05220     1B 47 02 F6 | 	mov	_var09, _var01
05224     02 46 66 F0 | 	shl	_var09, #2
05228     DF 0E 06 F1 | 	add	objptr, #223
0522c     07 47 02 F1 | 	add	_var09, objptr
05230     23 41 02 FB | 	rdlong	_var06, _var09
05234     D9 0E 06 F1 | 	add	objptr, #217
05238     07 49 C2 FA | 	rdbyte	_var10, objptr
0523c     24 41 02 F1 | 	add	_var06, _var10
05240     02 36 66 F0 | 	shl	_var01, #2
05244     D9 0E 86 F1 | 	sub	objptr, #217
05248     07 37 02 F1 | 	add	_var01, objptr
0524c     1B 41 62 FC | 	wrlong	_var06, _var01
05250     DF 0E 86 F1 | 	sub	objptr, #223
05254     64 02 90 FD | 	jmp	#LR__0198
05258                 | LR__0185
05258                 | ' 
05258                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
05258     B8 0F 06 F1 | 	add	objptr, #440
0525c     07 41 C2 FA | 	rdbyte	_var06, objptr
05260     01 40 06 F5 | 	and	_var06, #1
05264     04 0E 06 F1 | 	add	objptr, #4
05268     07 37 02 F1 | 	add	_var01, objptr
0526c     1B 41 42 FC | 	wrbyte	_var06, _var01
05270     BC 0F 86 F1 | 	sub	objptr, #444
05274     44 02 90 FD | 	jmp	#LR__0198
05278                 | LR__0186
05278                 | ' 
05278                 | '         $4:                                      ' Set vibrato waveform type
05278                 | '           vibratoType[channel]  := y & 3
05278     B8 0F 06 F1 | 	add	objptr, #440
0527c     07 41 C2 FA | 	rdbyte	_var06, objptr
05280     03 40 06 F5 | 	and	_var06, #3
05284     1B 4B 02 F6 | 	mov	_var11, _var01
05288     08 0E 06 F1 | 	add	objptr, #8
0528c     07 4B 02 F1 | 	add	_var11, objptr
05290     25 41 42 FC | 	wrbyte	_var06, _var11
05294                 | '           resetVibrato[channel] := y & 4
05294     08 0E 86 F1 | 	sub	objptr, #8
05298     07 41 C2 FA | 	rdbyte	_var06, objptr
0529c     04 40 06 F5 | 	and	_var06, #4
052a0     25 0E 86 F1 | 	sub	objptr, #37
052a4     07 37 02 F1 | 	add	_var01, objptr
052a8     1B 41 42 FC | 	wrbyte	_var06, _var01
052ac     93 0F 86 F1 | 	sub	objptr, #403
052b0     08 02 90 FD | 	jmp	#LR__0198
052b4                 | LR__0187
052b4                 | ' 
052b4                 | '         $5: fineTune := y                        ' Set finetune
052b4     B8 0F 06 F1 | 	add	objptr, #440
052b8     07 41 C2 FA | 	rdbyte	_var06, objptr
052bc     09 0E 86 F1 | 	sub	objptr, #9
052c0     07 41 62 FC | 	wrlong	_var06, objptr
052c4     AF 0F 86 F1 | 	sub	objptr, #431
052c8     F0 01 90 FD | 	jmp	#LR__0198
052cc                 | LR__0188
052cc                 | ' 
052cc                 | '         $6:                                      ' Pattern looping
052cc                 | '           if y == 0
052cc     B8 0F 06 F1 | 	add	objptr, #440
052d0     07 41 CA FA | 	rdbyte	_var06, objptr wz
052d4     B8 0F 86 F1 | 	sub	objptr, #440
052d8     1C 00 90 5D |  if_ne	jmp	#LR__0189
052dc                 | '             cmdE6_memory[channel] := patternRow
052dc     E9 0F 06 F1 | 	add	objptr, #489
052e0     07 37 02 F1 | 	add	_var01, objptr
052e4     47 0F 86 F1 | 	sub	objptr, #327
052e8     07 4B C2 FA | 	rdbyte	_var11, objptr
052ec     A2 0E 86 F1 | 	sub	objptr, #162
052f0     1B 4B 42 FC | 	wrbyte	_var11, _var01
052f4                 | '           else
052f4     C4 01 90 FD | 	jmp	#LR__0198
052f8                 | LR__0189
052f8                 | '             if ++cmdE6_counter[channel] <= y
052f8     1B 47 02 F6 | 	mov	_var09, _var01
052fc     ED 0F 06 F1 | 	add	objptr, #493
05300     07 47 02 F1 | 	add	_var09, objptr
05304     23 41 C2 FA | 	rdbyte	_var06, _var09
05308     01 40 06 F1 | 	add	_var06, #1
0530c     1B 49 02 F6 | 	mov	_var10, _var01
05310     07 49 02 F1 | 	add	_var10, objptr
05314     24 41 42 FC | 	wrbyte	_var06, _var10
05318     24 4D C2 FA | 	rdbyte	_var12, _var10
0531c     35 0E 86 F1 | 	sub	objptr, #53
05320     07 4F C2 FA | 	rdbyte	_var13, objptr
05324     B8 0F 86 F1 | 	sub	objptr, #440
05328     27 4D 5A F2 | 	cmps	_var12, _var13 wcz
0532c     24 00 90 1D |  if_a	jmp	#LR__0190
05330                 | '               cmdE6_updatePosition[channel] := true
05330     F1 0F 06 F1 | 	add	objptr, #497
05334     07 37 02 F1 | 	add	_var01, objptr
05338     FF FF FF FF 
0533c     1B FF 4B FC | 	wrbyte	##-1, _var01
05340                 | '               cmdE6_updatePositionCommon    := true
05340     04 0E 06 F1 | 	add	objptr, #4
05344     FF FF FF FF 
05348     07 FF 4B FC | 	wrbyte	##-1, objptr
0534c     F5 0F 86 F1 | 	sub	objptr, #501
05350                 | '             else
05350     68 01 90 FD | 	jmp	#LR__0198
05354                 | LR__0190
05354                 | '               cmdE6_counter[channel] := 0
05354     ED 0F 06 F1 | 	add	objptr, #493
05358     07 37 02 F1 | 	add	_var01, objptr
0535c     1B 01 48 FC | 	wrbyte	#0, _var01
05360     ED 0F 86 F1 | 	sub	objptr, #493
05364     54 01 90 FD | 	jmp	#LR__0198
05368                 | LR__0191
05368                 | ' 
05368                 | '         $7:                                      ' Set tremolo waveform type
05368                 | '           tremoloType[channel] := y & 3
05368     B8 0F 06 F1 | 	add	objptr, #440
0536c     07 41 C2 FA | 	rdbyte	_var06, objptr
05370     03 40 06 F5 | 	and	_var06, #3
05374     1B 4B 02 F6 | 	mov	_var11, _var01
05378     0C 0E 06 F1 | 	add	objptr, #12
0537c     07 4B 02 F1 | 	add	_var11, objptr
05380     25 41 42 FC | 	wrbyte	_var06, _var11
05384                 | '           resetTremolo[channel] := y & 4
05384     0C 0E 86 F1 | 	sub	objptr, #12
05388     07 41 C2 FA | 	rdbyte	_var06, objptr
0538c     04 40 06 F5 | 	and	_var06, #4
05390     29 0E 86 F1 | 	sub	objptr, #41
05394     07 37 02 F1 | 	add	_var01, objptr
05398     1B 41 42 FC | 	wrbyte	_var06, _var01
0539c     8F 0F 86 F1 | 	sub	objptr, #399
053a0     18 01 90 FD | 	jmp	#LR__0198
053a4                 | LR__0192
053a4                 | ' 
053a4                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
053a4     1B 47 02 F6 | 	mov	_var09, _var01
053a8     02 46 66 F0 | 	shl	_var09, #2
053ac     FF 0E 06 F1 | 	add	objptr, #255
053b0     07 47 02 F1 | 	add	_var09, objptr
053b4     23 41 02 FB | 	rdlong	_var06, _var09
053b8     B9 0E 06 F1 | 	add	objptr, #185
053bc     07 49 C2 FA | 	rdbyte	_var10, objptr
053c0     24 41 02 F1 | 	add	_var06, _var10
053c4     02 36 66 F0 | 	shl	_var01, #2
053c8     B9 0E 86 F1 | 	sub	objptr, #185
053cc     07 37 02 F1 | 	add	_var01, objptr
053d0     1B 41 62 FC | 	wrlong	_var06, _var01
053d4     FF 0E 86 F1 | 	sub	objptr, #255
053d8     E0 00 90 FD | 	jmp	#LR__0198
053dc                 | LR__0193
053dc                 | ' 
053dc                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
053dc     1B 47 02 F6 | 	mov	_var09, _var01
053e0     02 46 66 F0 | 	shl	_var09, #2
053e4     FF 0E 06 F1 | 	add	objptr, #255
053e8     07 47 02 F1 | 	add	_var09, objptr
053ec     23 41 02 FB | 	rdlong	_var06, _var09
053f0     B9 0E 06 F1 | 	add	objptr, #185
053f4     07 49 C2 FA | 	rdbyte	_var10, objptr
053f8     24 41 82 F1 | 	sub	_var06, _var10
053fc     02 36 66 F0 | 	shl	_var01, #2
05400     B9 0E 86 F1 | 	sub	objptr, #185
05404     07 37 02 F1 | 	add	_var01, objptr
05408     1B 41 62 FC | 	wrlong	_var06, _var01
0540c     FF 0E 86 F1 | 	sub	objptr, #255
05410     A8 00 90 FD | 	jmp	#LR__0198
05414                 | LR__0194
05414                 | ' 
05414                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
05414     B8 0F 06 F1 | 	add	objptr, #440
05418     07 47 C2 FA | 	rdbyte	_var09, objptr
0541c     14 0F 86 F1 | 	sub	objptr, #276
05420     07 49 C2 FA | 	rdbyte	_var10, objptr
05424     24 47 02 FD | 	qmul	_var09, _var10
05428     18 40 62 FD | 	getqx	_var06
0542c     01 0E 06 F1 | 	add	objptr, #1
05430     07 41 42 FC | 	wrbyte	_var06, objptr
05434     A5 0E 86 F1 | 	sub	objptr, #165
05438     80 00 90 FD | 	jmp	#LR__0198
0543c                 | LR__0195
0543c                 | ' 
0543c                 | '     $F:                          ' Set speed
0543c                 | '       if z < 32
0543c     B9 0F 06 F1 | 	add	objptr, #441
05440     07 3F C2 FA | 	rdbyte	_var05, objptr
05444     B9 0F 86 F1 | 	sub	objptr, #441
05448     20 3E 5E F2 | 	cmps	_var05, #32 wcz
0544c     18 00 90 3D |  if_ae	jmp	#LR__0196
05450                 | '         currentSongSpeed := z
05450     B9 0F 06 F1 | 	add	objptr, #441
05454     07 3F C2 FA | 	rdbyte	_var05, objptr
05458     15 0F 86 F1 | 	sub	objptr, #277
0545c     07 3F 42 FC | 	wrbyte	_var05, objptr
05460     A4 0E 86 F1 | 	sub	objptr, #164
05464                 | '       else
05464     54 00 90 FD | 	jmp	#LR__0197
05468                 | LR__0196
05468                 | '         ticksPerMinute := z * 24
05468     B9 0F 06 F1 | 	add	objptr, #441
0546c     07 43 C2 FA | 	rdbyte	_var07, objptr
05470     21 3F 02 F6 | 	mov	_var05, _var07
05474     01 3E 66 F0 | 	shl	_var05, #1
05478     21 3F 02 F1 | 	add	_var05, _var07
0547c     03 3E 66 F0 | 	shl	_var05, #3
05480     12 0E 86 F1 | 	sub	objptr, #18
05484     07 3F 62 FC | 	wrlong	_var05, objptr
05488     A7 0F 86 F1 | 	sub	objptr, #423
0548c                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
0548c     07 D9 02 FB | 	rdlong	muldiva_, objptr
05490     A7 0F 06 F1 | 	add	objptr, #423
05494     07 DB 02 FB | 	rdlong	muldivb_, objptr
05498     A7 0F 86 F1 | 	sub	objptr, #423
0549c     D0 00 A0 FD | 	call	#divide_
054a0     6D 41 02 F6 | 	mov	_var06, muldivb_
054a4     04 40 66 F0 | 	shl	_var06, #4
054a8     6D 41 82 F1 | 	sub	_var06, muldivb_
054ac     02 40 66 F0 | 	shl	_var06, #2
054b0     AB 0F 06 F1 | 	add	objptr, #427
054b4     07 41 62 FC | 	wrlong	_var06, objptr
054b8     AB 0F 86 F1 | 	sub	objptr, #427
054bc                 | LR__0197
054bc                 | LR__0198
054bc                 | _trackerplayer_spin2_handleZeroTickCommands_ret
054bc     2D 00 64 FD | 	ret
054c0                 | 
054c0                 | ' 
054c0                 | ' 
054c0                 | ' ' Handle all commands that executes on "non zero ticks"
054c0                 | ' '
054c0                 | ' PRI handleNonZeroTickCommands(channel)
054c0                 | _trackerplayer_spin2_handleNonZeroTickCommands
054c0     0A 5A 05 F6 | 	mov	COUNT_, #10
054c4     B0 00 A0 FD | 	call	#pushregs_
054c8     3B 85 02 F6 | 	mov	local01, arg01
054cc                 | ' 
054cc                 | '   CASE_FAST cmd
054cc     BA 0F 06 F1 | 	add	objptr, #442
054d0     07 87 C2 FA | 	rdbyte	local02, objptr
054d4     BA 0F 86 F1 | 	sub	objptr, #442
054d8     43 89 02 F6 | 	mov	local03, local02
054dc     01 88 86 F1 | 	sub	local03, #1
054e0     0E 88 26 F3 | 	fle	local03, #14
054e4     44 8B 02 F6 | 	mov	local04, local03
054e8     30 8A 62 FD | 	jmprel	local04
054ec                 | LR__0199
054ec     38 00 90 FD | 	jmp	#LR__0200
054f0     A0 00 90 FD | 	jmp	#LR__0201
054f4     D4 00 90 FD | 	jmp	#LR__0202
054f8     1C 02 90 FD | 	jmp	#LR__0212
054fc     20 01 90 FD | 	jmp	#LR__0204
05500     48 01 90 FD | 	jmp	#LR__0205
05504     50 01 90 FD | 	jmp	#LR__0206
05508     0C 02 90 FD | 	jmp	#LR__0212
0550c     08 02 90 FD | 	jmp	#LR__0212
05510     B0 01 90 FD | 	jmp	#LR__0209
05514     00 02 90 FD | 	jmp	#LR__0212
05518     FC 01 90 FD | 	jmp	#LR__0212
0551c     F8 01 90 FD | 	jmp	#LR__0212
05520     AC 01 90 FD | 	jmp	#LR__0210
05524     F0 01 90 FD | 	jmp	#LR__0212
05528                 | LR__0200
05528                 | ' 
05528                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
05528     42 8D 02 F6 | 	mov	local05, local01
0552c     02 8C 66 F0 | 	shl	local05, #2
05530     DF 0E 06 F1 | 	add	objptr, #223
05534     07 8D 02 F1 | 	add	local05, objptr
05538     46 8F 02 FB | 	rdlong	local06, local05
0553c     DA 0E 06 F1 | 	add	objptr, #218
05540     07 91 C2 FA | 	rdbyte	local07, objptr
05544     48 8F 82 F1 | 	sub	local06, local07
05548     42 93 02 F6 | 	mov	local08, local01
0554c     02 92 66 F0 | 	shl	local08, #2
05550     DA 0E 86 F1 | 	sub	objptr, #218
05554     07 93 02 F1 | 	add	local08, objptr
05558     49 8F 62 FC | 	wrlong	local06, local08
0555c                 | ' 
0555c                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
0555c                 | '       if currPeriod[channel] < 0
0555c     42 8F 02 F6 | 	mov	local06, local01
05560     02 8E 66 F0 | 	shl	local06, #2
05564     07 8F 02 F1 | 	add	local06, objptr
05568     47 95 02 FB | 	rdlong	local09, local06
0556c     00 94 5E F2 | 	cmps	local09, #0 wcz
05570     DF 0E 86 F1 | 	sub	objptr, #223
05574     A0 01 90 3D |  if_ae	jmp	#LR__0212
05578                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05578     02 84 66 F0 | 	shl	local01, #2
0557c     DF 0E 06 F1 | 	add	objptr, #223
05580     07 85 02 F1 | 	add	local01, objptr
05584     01 00 80 FF 
05588     42 B1 6A FC | 	wrlong	##856, local01
0558c     DF 0E 86 F1 | 	sub	objptr, #223
05590     84 01 90 FD | 	jmp	#LR__0212
05594                 | LR__0201
05594                 | ' 
05594                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
05594     42 8D 02 F6 | 	mov	local05, local01
05598     02 8C 66 F0 | 	shl	local05, #2
0559c     DF 0E 06 F1 | 	add	objptr, #223
055a0     07 8D 02 F1 | 	add	local05, objptr
055a4     46 8F 02 FB | 	rdlong	local06, local05
055a8     DA 0E 06 F1 | 	add	objptr, #218
055ac     07 91 C2 FA | 	rdbyte	local07, objptr
055b0     48 8F 02 F1 | 	add	local06, local07
055b4     02 84 66 F0 | 	shl	local01, #2
055b8     DA 0E 86 F1 | 	sub	objptr, #218
055bc     07 85 02 F1 | 	add	local01, objptr
055c0     42 8F 62 FC | 	wrlong	local06, local01
055c4     DF 0E 86 F1 | 	sub	objptr, #223
055c8     4C 01 90 FD | 	jmp	#LR__0212
055cc                 | LR__0202
055cc                 | ' 
055cc                 | '     $3:                                 ' Slide to note (portamento)
055cc                 | '       if z > 0
055cc     B9 0F 06 F1 | 	add	objptr, #441
055d0     07 8F C2 FA | 	rdbyte	local06, objptr
055d4     B9 0F 86 F1 | 	sub	objptr, #441
055d8     00 8E 5E F2 | 	cmps	local06, #0 wcz
055dc     1C 00 90 ED |  if_be	jmp	#LR__0203
055e0                 | '         cmd3_memoryZ[channel] := z
055e0     42 8F 02 F6 | 	mov	local06, local01
055e4     C8 0F 06 F1 | 	add	objptr, #456
055e8     07 8F 02 F1 | 	add	local06, objptr
055ec     0F 0E 86 F1 | 	sub	objptr, #15
055f0     07 95 C2 FA | 	rdbyte	local09, objptr
055f4     B9 0F 86 F1 | 	sub	objptr, #441
055f8     47 95 42 FC | 	wrbyte	local09, local06
055fc                 | LR__0203
055fc                 | ' 
055fc                 | '       doPortamento(channel, lastSetPeriod[channel])
055fc     42 8D 02 F6 | 	mov	local05, local01
05600     02 8C 66 F0 | 	shl	local05, #2
05604     27 0F 06 F1 | 	add	objptr, #295
05608     07 8D 02 F1 | 	add	local05, objptr
0560c     46 79 02 FB | 	rdlong	arg02, local05
05610     42 77 02 F6 | 	mov	arg01, local01
05614     27 0F 86 F1 | 	sub	objptr, #295
05618     74 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
0561c     F8 00 90 FD | 	jmp	#LR__0212
05620                 | LR__0204
05620                 | ' 
05620                 | '     $5:                                 ' Volume slide + portamento
05620                 | '       doVolumeSlide(channel)
05620     42 77 02 F6 | 	mov	arg01, local01
05624     94 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05628                 | '       doPortamento(channel, lastSetPeriod[channel])
05628     42 8D 02 F6 | 	mov	local05, local01
0562c     02 8C 66 F0 | 	shl	local05, #2
05630     27 0F 06 F1 | 	add	objptr, #295
05634     07 8D 02 F1 | 	add	local05, objptr
05638     46 79 02 FB | 	rdlong	arg02, local05
0563c     42 77 02 F6 | 	mov	arg01, local01
05640     27 0F 86 F1 | 	sub	objptr, #295
05644     48 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05648     CC 00 90 FD | 	jmp	#LR__0212
0564c                 | LR__0205
0564c                 | ' 
0564c                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
0564c     42 77 02 F6 | 	mov	arg01, local01
05650     68 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05654     C0 00 90 FD | 	jmp	#LR__0212
05658                 | LR__0206
05658                 | ' 
05658                 | '     $7:                                 ' Tremolo
05658                 | '       if x > 0
05658     B7 0F 06 F1 | 	add	objptr, #439
0565c     07 8F C2 FA | 	rdbyte	local06, objptr
05660     B7 0F 86 F1 | 	sub	objptr, #439
05664     00 8E 5E F2 | 	cmps	local06, #0 wcz
05668     1C 00 90 ED |  if_be	jmp	#LR__0207
0566c                 | '         cmd7_memoryX[channel] := x
0566c     42 8F 02 F6 | 	mov	local06, local01
05670     D8 0F 06 F1 | 	add	objptr, #472
05674     07 8F 02 F1 | 	add	local06, objptr
05678     21 0E 86 F1 | 	sub	objptr, #33
0567c     07 95 C2 FA | 	rdbyte	local09, objptr
05680     B7 0F 86 F1 | 	sub	objptr, #439
05684     47 95 42 FC | 	wrbyte	local09, local06
05688                 | LR__0207
05688                 | '       if y > 0
05688     B8 0F 06 F1 | 	add	objptr, #440
0568c     07 8F C2 FA | 	rdbyte	local06, objptr
05690     B8 0F 86 F1 | 	sub	objptr, #440
05694     00 8E 5E F2 | 	cmps	local06, #0 wcz
05698     1C 00 90 ED |  if_be	jmp	#LR__0208
0569c                 | '         cmd7_memoryY[channel] := y
0569c     42 8F 02 F6 | 	mov	local06, local01
056a0     D4 0F 06 F1 | 	add	objptr, #468
056a4     07 8F 02 F1 | 	add	local06, objptr
056a8     1C 0E 86 F1 | 	sub	objptr, #28
056ac     07 95 C2 FA | 	rdbyte	local09, objptr
056b0     B8 0F 86 F1 | 	sub	objptr, #440
056b4     47 95 42 FC | 	wrbyte	local09, local06
056b8                 | LR__0208
056b8                 | ' 
056b8                 | '       doTremolo(channel)
056b8     42 77 02 F6 | 	mov	arg01, local01
056bc     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
056c0     54 00 90 FD | 	jmp	#LR__0212
056c4                 | LR__0209
056c4                 | ' 
056c4                 | '     $A: doVolumeSlide(channel)          ' Volume slide
056c4     42 77 02 F6 | 	mov	arg01, local01
056c8     F0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
056cc     48 00 90 FD | 	jmp	#LR__0212
056d0                 | LR__0210
056d0                 | ' 
056d0                 | '     $E:                                 ' Retrig every Y ticks
056d0                 | '       if (x == $9) && ((tickcounter // y) == 0)
056d0     B7 0F 06 F1 | 	add	objptr, #439
056d4     07 8D C2 FA | 	rdbyte	local05, objptr
056d8     B7 0F 86 F1 | 	sub	objptr, #439
056dc     09 8C 0E F2 | 	cmp	local05, #9 wz
056e0     34 00 90 5D |  if_ne	jmp	#LR__0211
056e4     A1 0E 06 F1 | 	add	objptr, #161
056e8     07 91 C2 FA | 	rdbyte	local07, objptr
056ec     48 D9 02 F6 | 	mov	muldiva_, local07
056f0     17 0F 06 F1 | 	add	objptr, #279
056f4     07 97 C2 FA | 	rdbyte	local10, objptr
056f8     B8 0F 86 F1 | 	sub	objptr, #440
056fc     4B DB 02 F6 | 	mov	muldivb_, local10
05700     D0 00 A0 FD | 	call	#divide_
05704     6C 95 0A F6 | 	mov	local09, muldiva_ wz
05708     0C 00 90 5D |  if_ne	jmp	#LR__0211
0570c                 | '         triggerNote(channel)
0570c     42 8F 02 F6 | 	mov	local06, local01
05710     47 77 02 F6 | 	mov	arg01, local06
05714     EC F2 BF FD | 	call	#_trackerplayer_spin2_triggerNote
05718                 | LR__0211
05718                 | LR__0212
05718     AF F0 03 F6 | 	mov	ptra, fp
0571c     BF 00 A0 FD | 	call	#popregs_
05720                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
05720     2D 00 64 FD | 	ret
05724                 | 
05724                 | ' 
05724                 | ' 
05724                 | ' ' Handle all commands that executes on every tick
05724                 | ' '
05724                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
05724                 | _trackerplayer_spin2_handleEveryTickCommands
05724     12 5A 05 F6 | 	mov	COUNT_, #18
05728     B0 00 A0 FD | 	call	#pushregs_
0572c     3B 85 02 F6 | 	mov	local01, arg01
05730                 | ' 
05730                 | '   CASE_FAST cmd
05730     BA 0F 06 F1 | 	add	objptr, #442
05734     07 87 C2 FA | 	rdbyte	local02, objptr
05738     BA 0F 86 F1 | 	sub	objptr, #442
0573c     43 89 02 F6 | 	mov	local03, local02
05740     0F 88 26 F3 | 	fle	local03, #15
05744     44 8B 02 F6 | 	mov	local04, local03
05748     30 8A 62 FD | 	jmprel	local04
0574c                 | LR__0213
0574c     3C 00 90 FD | 	jmp	#LR__0214
05750     68 03 90 FD | 	jmp	#LR__0228
05754     64 03 90 FD | 	jmp	#LR__0228
05758     60 03 90 FD | 	jmp	#LR__0228
0575c     E8 01 90 FD | 	jmp	#LR__0217
05760     58 03 90 FD | 	jmp	#LR__0228
05764     4C 02 90 FD | 	jmp	#LR__0220
05768     50 03 90 FD | 	jmp	#LR__0228
0576c     4C 03 90 FD | 	jmp	#LR__0228
05770     48 03 90 FD | 	jmp	#LR__0228
05774     44 03 90 FD | 	jmp	#LR__0228
05778     40 03 90 FD | 	jmp	#LR__0228
0577c     3C 03 90 FD | 	jmp	#LR__0228
05780     38 03 90 FD | 	jmp	#LR__0228
05784     38 02 90 FD | 	jmp	#LR__0221
05788     30 03 90 FD | 	jmp	#LR__0228
0578c                 | LR__0214
0578c                 | ' 
0578c                 | '     $0:                                 ' Arpeggio
0578c                 | '       arpCounter := tickCounter // 3
0578c     A1 0E 06 F1 | 	add	objptr, #161
05790     07 D9 C2 FA | 	rdbyte	muldiva_, objptr
05794     A1 0E 86 F1 | 	sub	objptr, #161
05798     03 DA 06 F6 | 	mov	muldivb_, #3
0579c     D0 00 A0 FD | 	call	#divide_
057a0     6C 8D 02 F6 | 	mov	local05, muldiva_
057a4                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
057a4     42 8F 02 F6 | 	mov	local06, local01
057a8     02 8E 66 F0 | 	shl	local06, #2
057ac     DF 0E 06 F1 | 	add	objptr, #223
057b0     07 8F 02 F1 | 	add	local06, objptr
057b4     47 77 02 FB | 	rdlong	arg01, local06
057b8     42 91 02 F6 | 	mov	local07, local01
057bc     0C 0E 86 F1 | 	sub	objptr, #12
057c0     07 91 02 F1 | 	add	local07, objptr
057c4     48 79 C2 FA | 	rdbyte	arg02, local07
057c8     D3 0E 86 F1 | 	sub	objptr, #211
057cc     AC EF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
057d0     18 93 02 F6 | 	mov	local08, result1
057d4     49 95 02 F6 | 	mov	local09, local08
057d8     24 92 5E F2 | 	cmps	local08, #36 wcz
057dc     DC 02 90 3D |  if_ae	jmp	#LR__0228
057e0                 | '         if arpCounter == 1 and x > 0
057e0     01 8C 0E F2 | 	cmp	local05, #1 wz
057e4     8C 00 90 5D |  if_ne	jmp	#LR__0215
057e8     B7 0F 06 F1 | 	add	objptr, #439
057ec     07 8F C2 FA | 	rdbyte	local06, objptr
057f0     B7 0F 86 F1 | 	sub	objptr, #439
057f4     00 8E 5E F2 | 	cmps	local06, #0 wcz
057f8     78 00 90 ED |  if_be	jmp	#LR__0215
057fc                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
057fc     4A 97 02 F6 | 	mov	local10, local09
05800     B7 0F 06 F1 | 	add	objptr, #439
05804     07 91 C2 FA | 	rdbyte	local07, objptr
05808     48 99 02 F6 | 	mov	local11, local07
0580c     48 97 02 F1 | 	add	local10, local07
05810     4B 9B 02 F6 | 	mov	local12, local10
05814     4D 77 02 F6 | 	mov	arg01, local12
05818                 | ' 
05818                 | '   return word[@periodTable][noteNumber]
05818     06 00 00 FF 
0581c     A4 2C 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05820     01 76 66 F0 | 	shl	arg01, #1
05824     16 77 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
05828     3B 31 E2 FA | 	rdword	result1, arg01
0582c     06 00 00 FF 
05830     A4 2C 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05834     18 9D 02 F6 | 	mov	local13, result1
05838     42 9F 02 F6 | 	mov	local14, local01
0583c     02 9E 66 F0 | 	shl	local14, #2
05840     D8 0E 86 F1 | 	sub	objptr, #216
05844     07 A1 02 F6 | 	mov	local15, objptr
05848     07 9F 02 F1 | 	add	local14, objptr
0584c     4E 8F 02 F6 | 	mov	local06, local13
05850     4F A3 02 FB | 	rdlong	local16, local14
05854     51 8F 82 F1 | 	sub	local06, local16
05858     42 A5 02 F6 | 	mov	local17, local01
0585c     02 A4 66 F0 | 	shl	local17, #2
05860     10 0E 06 F1 | 	add	objptr, #16
05864     07 A7 02 F6 | 	mov	local18, objptr
05868     07 A5 02 F1 | 	add	local17, objptr
0586c     52 8F 62 FC | 	wrlong	local06, local17
05870     EF 0E 86 F1 | 	sub	objptr, #239
05874                 | LR__0215
05874                 | '         if arpCounter == 2 and y > 0
05874     02 8C 0E F2 | 	cmp	local05, #2 wz
05878     8C 00 90 5D |  if_ne	jmp	#LR__0216
0587c     B8 0F 06 F1 | 	add	objptr, #440
05880     07 8F C2 FA | 	rdbyte	local06, objptr
05884     B8 0F 86 F1 | 	sub	objptr, #440
05888     00 8E 5E F2 | 	cmps	local06, #0 wcz
0588c     78 00 90 ED |  if_be	jmp	#LR__0216
05890                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
05890     4A 97 02 F6 | 	mov	local10, local09
05894     B8 0F 06 F1 | 	add	objptr, #440
05898     07 91 C2 FA | 	rdbyte	local07, objptr
0589c     48 99 02 F6 | 	mov	local11, local07
058a0     48 97 02 F1 | 	add	local10, local07
058a4     4B 9B 02 F6 | 	mov	local12, local10
058a8     4D 77 02 F6 | 	mov	arg01, local12
058ac                 | ' 
058ac                 | '   return word[@periodTable][noteNumber]
058ac     06 00 00 FF 
058b0     A4 2C 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
058b4     01 76 66 F0 | 	shl	arg01, #1
058b8     16 77 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
058bc     3B 31 E2 FA | 	rdword	result1, arg01
058c0     06 00 00 FF 
058c4     A4 2C 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
058c8     18 9D 02 F6 | 	mov	local13, result1
058cc     42 9F 02 F6 | 	mov	local14, local01
058d0     02 9E 66 F0 | 	shl	local14, #2
058d4     D9 0E 86 F1 | 	sub	objptr, #217
058d8     07 A1 02 F6 | 	mov	local15, objptr
058dc     07 9F 02 F1 | 	add	local14, objptr
058e0     4E 8F 02 F6 | 	mov	local06, local13
058e4     4F A3 02 FB | 	rdlong	local16, local14
058e8     51 8F 82 F1 | 	sub	local06, local16
058ec     42 A5 02 F6 | 	mov	local17, local01
058f0     02 A4 66 F0 | 	shl	local17, #2
058f4     10 0E 06 F1 | 	add	objptr, #16
058f8     07 A7 02 F6 | 	mov	local18, objptr
058fc     07 A5 02 F1 | 	add	local17, objptr
05900     52 8F 62 FC | 	wrlong	local06, local17
05904     EF 0E 86 F1 | 	sub	objptr, #239
05908                 | LR__0216
05908                 | '         if arpCounter == 0 and (x + y) > 0
05908     00 8C 0E F2 | 	cmp	local05, #0 wz
0590c     AC 01 90 5D |  if_ne	jmp	#LR__0228
05910     B7 0F 06 F1 | 	add	objptr, #439
05914     07 8F C2 FA | 	rdbyte	local06, objptr
05918     01 0E 06 F1 | 	add	objptr, #1
0591c     07 91 C2 FA | 	rdbyte	local07, objptr
05920     B8 0F 86 F1 | 	sub	objptr, #440
05924     48 8F 02 F1 | 	add	local06, local07
05928     00 8E 5E F2 | 	cmps	local06, #0 wcz
0592c     8C 01 90 ED |  if_be	jmp	#LR__0228
05930                 | '           deltaPeriod[channel] := 0
05930     02 84 66 F0 | 	shl	local01, #2
05934     EF 0E 06 F1 | 	add	objptr, #239
05938     07 85 02 F1 | 	add	local01, objptr
0593c     42 01 68 FC | 	wrlong	#0, local01
05940     EF 0E 86 F1 | 	sub	objptr, #239
05944     74 01 90 FD | 	jmp	#LR__0228
05948                 | LR__0217
05948                 | ' 
05948                 | '     $4:                                 ' Vibrato
05948                 | '       if x > 0
05948     B7 0F 06 F1 | 	add	objptr, #439
0594c     07 8F C2 FA | 	rdbyte	local06, objptr
05950     B7 0F 86 F1 | 	sub	objptr, #439
05954     00 8E 5E F2 | 	cmps	local06, #0 wcz
05958     1C 00 90 ED |  if_be	jmp	#LR__0218
0595c                 | '         cmd4_memoryX[channel] := x
0595c     42 8F 02 F6 | 	mov	local06, local01
05960     D0 0F 06 F1 | 	add	objptr, #464
05964     07 8F 02 F1 | 	add	local06, objptr
05968     19 0E 86 F1 | 	sub	objptr, #25
0596c     07 99 C2 FA | 	rdbyte	local11, objptr
05970     B7 0F 86 F1 | 	sub	objptr, #439
05974     47 99 42 FC | 	wrbyte	local11, local06
05978                 | LR__0218
05978                 | '       if y > 0
05978     B8 0F 06 F1 | 	add	objptr, #440
0597c     07 8F C2 FA | 	rdbyte	local06, objptr
05980     B8 0F 86 F1 | 	sub	objptr, #440
05984     00 8E 5E F2 | 	cmps	local06, #0 wcz
05988     1C 00 90 ED |  if_be	jmp	#LR__0219
0598c                 | '         cmd4_memoryY[channel] := y
0598c     42 8F 02 F6 | 	mov	local06, local01
05990     CC 0F 06 F1 | 	add	objptr, #460
05994     07 8F 02 F1 | 	add	local06, objptr
05998     14 0E 86 F1 | 	sub	objptr, #20
0599c     07 99 C2 FA | 	rdbyte	local11, objptr
059a0     B8 0F 86 F1 | 	sub	objptr, #440
059a4     47 99 42 FC | 	wrbyte	local11, local06
059a8                 | LR__0219
059a8                 | ' 
059a8                 | '       doVibrato(channel)
059a8     42 77 02 F6 | 	mov	arg01, local01
059ac     7C 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
059b0     08 01 90 FD | 	jmp	#LR__0228
059b4                 | LR__0220
059b4                 | ' 
059b4                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
059b4     42 77 02 F6 | 	mov	arg01, local01
059b8     70 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
059bc     FC 00 90 FD | 	jmp	#LR__0228
059c0                 | LR__0221
059c0                 | ' 
059c0                 | '     $E:
059c0                 | '       if x == $C                        ' Cut note after Y ticks
059c0     B7 0F 06 F1 | 	add	objptr, #439
059c4     07 8F C2 FA | 	rdbyte	local06, objptr
059c8     B7 0F 86 F1 | 	sub	objptr, #439
059cc     0C 8E 0E F2 | 	cmp	local06, #12 wz
059d0     34 00 90 5D |  if_ne	jmp	#LR__0222
059d4                 | '         if tickcounter == y
059d4     A1 0E 06 F1 | 	add	objptr, #161
059d8     07 8F C2 FA | 	rdbyte	local06, objptr
059dc     17 0F 06 F1 | 	add	objptr, #279
059e0     07 99 C2 FA | 	rdbyte	local11, objptr
059e4     B8 0F 86 F1 | 	sub	objptr, #440
059e8     4C 8F 0A F2 | 	cmp	local06, local11 wz
059ec     CC 00 90 5D |  if_ne	jmp	#LR__0227
059f0                 | '           currVolume[channel] := 0
059f0     02 84 66 F0 | 	shl	local01, #2
059f4     FF 0E 06 F1 | 	add	objptr, #255
059f8     07 85 02 F1 | 	add	local01, objptr
059fc     42 01 68 FC | 	wrlong	#0, local01
05a00     FF 0E 86 F1 | 	sub	objptr, #255
05a04     B4 00 90 FD | 	jmp	#LR__0227
05a08                 | LR__0222
05a08                 | ' 
05a08                 | '       elseif x == $D                    ' Delay note Y ticks
05a08     B7 0F 06 F1 | 	add	objptr, #439
05a0c     07 8F C2 FA | 	rdbyte	local06, objptr
05a10     B7 0F 86 F1 | 	sub	objptr, #439
05a14     0D 8E 0E F2 | 	cmp	local06, #13 wz
05a18     A0 00 90 5D |  if_ne	jmp	#LR__0226
05a1c                 | '         if tickcounter == y
05a1c     A1 0E 06 F1 | 	add	objptr, #161
05a20     07 8F C2 FA | 	rdbyte	local06, objptr
05a24     17 0F 06 F1 | 	add	objptr, #279
05a28     07 99 C2 FA | 	rdbyte	local11, objptr
05a2c     B8 0F 86 F1 | 	sub	objptr, #440
05a30     4C 8F 0A F2 | 	cmp	local06, local11 wz
05a34     0C 00 90 5D |  if_ne	jmp	#LR__0223
05a38                 | '           triggerNote(channel)
05a38     42 77 02 F6 | 	mov	arg01, local01
05a3c     C4 EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
05a40     78 00 90 FD | 	jmp	#LR__0225
05a44                 | LR__0223
05a44                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
05a44                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
05a44     B8 0F 06 F1 | 	add	objptr, #440
05a48     07 8F C2 FA | 	rdbyte	local06, objptr
05a4c     14 0F 86 F1 | 	sub	objptr, #276
05a50     07 99 C2 FA | 	rdbyte	local11, objptr
05a54     A4 0E 86 F1 | 	sub	objptr, #164
05a58     4C 8F 5A F2 | 	cmps	local06, local11 wcz
05a5c     5C 00 90 CD |  if_b	jmp	#LR__0224
05a60     A4 0E 06 F1 | 	add	objptr, #164
05a64     07 9D C2 FA | 	rdbyte	local13, objptr
05a68     4E 9B 02 F6 | 	mov	local12, local13
05a6c     01 9A 86 F1 | 	sub	local12, #1
05a70     03 0E 86 F1 | 	sub	objptr, #3
05a74     07 A1 C2 FA | 	rdbyte	local15, objptr
05a78     A1 0E 86 F1 | 	sub	objptr, #161
05a7c     50 9F 02 F6 | 	mov	local14, local15
05a80     4D 9F 0A F2 | 	cmp	local14, local12 wz
05a84     34 00 90 5D |  if_ne	jmp	#LR__0224
05a88                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
05a88     42 8F 02 F6 | 	mov	local06, local01
05a8c     02 8E 66 F0 | 	shl	local06, #2
05a90     27 0F 06 F1 | 	add	objptr, #295
05a94     07 97 02 F6 | 	mov	local10, objptr
05a98     07 8F 02 F1 | 	add	local06, objptr
05a9c     42 99 02 F6 | 	mov	local11, local01
05aa0     02 98 66 F0 | 	shl	local11, #2
05aa4     48 0E 86 F1 | 	sub	objptr, #72
05aa8     07 91 02 F6 | 	mov	local07, objptr
05aac     47 9B 02 FB | 	rdlong	local12, local06
05ab0     48 99 02 F1 | 	add	local11, local07
05ab4     4C 9B 62 FC | 	wrlong	local12, local11
05ab8     DF 0E 86 F1 | 	sub	objptr, #223
05abc                 | LR__0224
05abc                 | LR__0225
05abc                 | LR__0226
05abc                 | LR__0227
05abc                 | LR__0228
05abc     AF F0 03 F6 | 	mov	ptra, fp
05ac0     BF 00 A0 FD | 	call	#popregs_
05ac4                 | _trackerplayer_spin2_handleEveryTickCommands_ret
05ac4     2D 00 64 FD | 	ret
05ac8                 | 
05ac8                 | ' 
05ac8                 | ' 
05ac8                 | ' PRI doTremolo(channel) | depth, sineWave, speed
05ac8                 | _trackerplayer_spin2_doTremolo
05ac8     3B 37 02 F6 | 	mov	_var01, arg01
05acc                 | ' 
05acc                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
05acc     05 00 00 FF 
05ad0     A4 2D 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05ad4     16 39 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05ad8     1B 3B 02 F6 | 	mov	_var03, _var01
05adc     8B 0F 06 F1 | 	add	objptr, #395
05ae0     07 3B 02 F1 | 	add	_var03, objptr
05ae4     1D 3D C2 FA | 	rdbyte	_var04, _var03
05ae8     02 3C 66 F0 | 	shl	_var04, #2
05aec     1C 3D 02 F1 | 	add	_var04, _var02
05af0     1E 3F 02 FB | 	rdlong	_var05, _var04
05af4                 | '   depth    := cmd7_memoryY[channel]
05af4     1B 41 02 F6 | 	mov	_var06, _var01
05af8     49 0E 06 F1 | 	add	objptr, #73
05afc     07 41 02 F1 | 	add	_var06, objptr
05b00     20 43 C2 FA | 	rdbyte	_var07, _var06
05b04                 | '   speed    := cmd7_memoryX[channel]
05b04     1B 41 02 F6 | 	mov	_var06, _var01
05b08     04 0E 06 F1 | 	add	objptr, #4
05b0c     07 41 02 F1 | 	add	_var06, objptr
05b10     20 45 C2 FA | 	rdbyte	_var08, _var06
05b14                 | ' 
05b14                 | '   CASE_FAST vibratoType[channel]
05b14     1B 3B 02 F6 | 	mov	_var03, _var01
05b18     18 0E 86 F1 | 	sub	objptr, #24
05b1c     07 47 02 F6 | 	mov	_var09, objptr
05b20     07 3B 02 F1 | 	add	_var03, objptr
05b24     1D 41 C2 FA | 	rdbyte	_var06, _var03
05b28     03 40 26 F3 | 	fle	_var06, #3
05b2c     20 49 02 F6 | 	mov	_var10, _var06
05b30     05 00 00 FF 
05b34     A4 2D 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05b38     C0 0F 86 F1 | 	sub	objptr, #448
05b3c     30 48 62 FD | 	jmprel	_var10
05b40                 | LR__0229
05b40     0C 00 90 FD | 	jmp	#LR__0230
05b44     30 00 90 FD | 	jmp	#LR__0231
05b48     6C 00 90 FD | 	jmp	#LR__0232
05b4c     B4 00 90 FD | 	jmp	#LR__0233
05b50                 | LR__0230
05b50                 | ' 
05b50                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
05b50     1F 43 02 FD | 	qmul	_var07, _var05
05b54     18 3C 62 FD | 	getqx	_var04
05b58     06 3C C6 F0 | 	sar	_var04, #6
05b5c     1B 4B 02 F6 | 	mov	_var11, _var01
05b60     02 4A 66 F0 | 	shl	_var11, #2
05b64     0F 0F 06 F1 | 	add	objptr, #271
05b68     07 4B 02 F1 | 	add	_var11, objptr
05b6c     25 3D 62 FC | 	wrlong	_var04, _var11
05b70     0F 0F 86 F1 | 	sub	objptr, #271
05b74     8C 00 90 FD | 	jmp	#LR__0233
05b78                 | LR__0231
05b78                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
05b78     1B 4B 02 F6 | 	mov	_var11, _var01
05b7c     8B 0F 06 F1 | 	add	objptr, #395
05b80     07 4B 02 F1 | 	add	_var11, objptr
05b84     25 39 C2 FA | 	rdbyte	_var02, _var11
05b88     03 38 66 F0 | 	shl	_var02, #3
05b8c     1C 43 02 FD | 	qmul	_var07, _var02
05b90     18 3C 62 FD | 	getqx	_var04
05b94     00 3D 86 F1 | 	sub	_var04, #256
05b98     06 3C C6 F0 | 	sar	_var04, #6
05b9c     1B 4D 02 F6 | 	mov	_var12, _var01
05ba0     02 4C 66 F0 | 	shl	_var12, #2
05ba4     7C 0E 86 F1 | 	sub	objptr, #124
05ba8     07 4D 02 F1 | 	add	_var12, objptr
05bac     26 3D 62 FC | 	wrlong	_var04, _var12
05bb0     0F 0F 86 F1 | 	sub	objptr, #271
05bb4     4C 00 90 FD | 	jmp	#LR__0233
05bb8                 | LR__0232
05bb8                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
05bb8     1B 4B 02 F6 | 	mov	_var11, _var01
05bbc     8B 0F 06 F1 | 	add	objptr, #395
05bc0     07 4F 02 F6 | 	mov	_var13, objptr
05bc4     07 4B 02 F1 | 	add	_var11, objptr
05bc8     25 39 C2 FA | 	rdbyte	_var02, _var11
05bcc     20 38 06 F5 | 	and	_var02, #32
05bd0     04 38 66 F0 | 	shl	_var02, #4
05bd4     1C 43 02 FD | 	qmul	_var07, _var02
05bd8     18 50 62 FD | 	getqx	_var14
05bdc     28 3D 02 F6 | 	mov	_var04, _var14
05be0     00 3D 86 F1 | 	sub	_var04, #256
05be4     06 3C C6 F0 | 	sar	_var04, #6
05be8     1B 4D 02 F6 | 	mov	_var12, _var01
05bec     02 4C 66 F0 | 	shl	_var12, #2
05bf0     7C 0E 86 F1 | 	sub	objptr, #124
05bf4     07 53 02 F6 | 	mov	_var15, objptr
05bf8     07 4D 02 F1 | 	add	_var12, objptr
05bfc     26 3D 62 FC | 	wrlong	_var04, _var12
05c00     0F 0F 86 F1 | 	sub	objptr, #271
05c04                 | LR__0233
05c04                 | ' 
05c04                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05c04     1B 3B 02 F6 | 	mov	_var03, _var01
05c08     8B 0F 06 F1 | 	add	objptr, #395
05c0c     07 3B 02 F1 | 	add	_var03, objptr
05c10     1D 41 C2 FA | 	rdbyte	_var06, _var03
05c14     22 41 02 F1 | 	add	_var06, _var08
05c18     3F 40 06 F5 | 	and	_var06, #63
05c1c     07 37 02 F1 | 	add	_var01, objptr
05c20     1B 41 42 FC | 	wrbyte	_var06, _var01
05c24     8B 0F 86 F1 | 	sub	objptr, #395
05c28                 | _trackerplayer_spin2_doTremolo_ret
05c28     2D 00 64 FD | 	ret
05c2c                 | 
05c2c                 | ' 
05c2c                 | ' 
05c2c                 | ' PRI doVibrato(channel) | depth, sineWave, speed
05c2c                 | _trackerplayer_spin2_doVibrato
05c2c     3B 37 02 F6 | 	mov	_var01, arg01
05c30                 | ' 
05c30                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05c30     05 00 00 FF 
05c34     A4 2D 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05c38     16 39 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05c3c     1B 3B 02 F6 | 	mov	_var03, _var01
05c40     87 0F 06 F1 | 	add	objptr, #391
05c44     07 3B 02 F1 | 	add	_var03, objptr
05c48     1D 3D C2 FA | 	rdbyte	_var04, _var03
05c4c     02 3C 66 F0 | 	shl	_var04, #2
05c50     1C 3D 02 F1 | 	add	_var04, _var02
05c54     1E 3F 02 FB | 	rdlong	_var05, _var04
05c58                 | '   depth    := cmd4_memoryY[channel]
05c58     1B 41 02 F6 | 	mov	_var06, _var01
05c5c     45 0E 06 F1 | 	add	objptr, #69
05c60     07 41 02 F1 | 	add	_var06, objptr
05c64     20 43 C2 FA | 	rdbyte	_var07, _var06
05c68                 | '   speed    := cmd4_memoryX[channel]
05c68     1B 41 02 F6 | 	mov	_var06, _var01
05c6c     04 0E 06 F1 | 	add	objptr, #4
05c70     07 41 02 F1 | 	add	_var06, objptr
05c74     20 45 C2 FA | 	rdbyte	_var08, _var06
05c78                 | ' 
05c78                 | '   CASE_FAST vibratoType[channel]
05c78     1B 3B 02 F6 | 	mov	_var03, _var01
05c7c     10 0E 86 F1 | 	sub	objptr, #16
05c80     07 47 02 F6 | 	mov	_var09, objptr
05c84     07 3B 02 F1 | 	add	_var03, objptr
05c88     1D 41 C2 FA | 	rdbyte	_var06, _var03
05c8c     03 40 26 F3 | 	fle	_var06, #3
05c90     20 49 02 F6 | 	mov	_var10, _var06
05c94     05 00 00 FF 
05c98     A4 2D 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05c9c     C0 0F 86 F1 | 	sub	objptr, #448
05ca0     30 48 62 FD | 	jmprel	_var10
05ca4                 | LR__0234
05ca4     0C 00 90 FD | 	jmp	#LR__0235
05ca8     30 00 90 FD | 	jmp	#LR__0236
05cac     6C 00 90 FD | 	jmp	#LR__0237
05cb0     B4 00 90 FD | 	jmp	#LR__0238
05cb4                 | LR__0235
05cb4                 | ' 
05cb4                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
05cb4     1F 43 02 FD | 	qmul	_var07, _var05
05cb8     18 3C 62 FD | 	getqx	_var04
05cbc     07 3C C6 F0 | 	sar	_var04, #7
05cc0     1B 4B 02 F6 | 	mov	_var11, _var01
05cc4     02 4A 66 F0 | 	shl	_var11, #2
05cc8     EF 0E 06 F1 | 	add	objptr, #239
05ccc     07 4B 02 F1 | 	add	_var11, objptr
05cd0     25 3D 62 FC | 	wrlong	_var04, _var11
05cd4     EF 0E 86 F1 | 	sub	objptr, #239
05cd8     8C 00 90 FD | 	jmp	#LR__0238
05cdc                 | LR__0236
05cdc                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
05cdc     1B 4B 02 F6 | 	mov	_var11, _var01
05ce0     87 0F 06 F1 | 	add	objptr, #391
05ce4     07 4B 02 F1 | 	add	_var11, objptr
05ce8     25 39 C2 FA | 	rdbyte	_var02, _var11
05cec     03 38 66 F0 | 	shl	_var02, #3
05cf0     1C 43 02 FD | 	qmul	_var07, _var02
05cf4     18 3C 62 FD | 	getqx	_var04
05cf8     00 3D 86 F1 | 	sub	_var04, #256
05cfc     07 3C C6 F0 | 	sar	_var04, #7
05d00     1B 4D 02 F6 | 	mov	_var12, _var01
05d04     02 4C 66 F0 | 	shl	_var12, #2
05d08     98 0E 86 F1 | 	sub	objptr, #152
05d0c     07 4D 02 F1 | 	add	_var12, objptr
05d10     26 3D 62 FC | 	wrlong	_var04, _var12
05d14     EF 0E 86 F1 | 	sub	objptr, #239
05d18     4C 00 90 FD | 	jmp	#LR__0238
05d1c                 | LR__0237
05d1c                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
05d1c     1B 4B 02 F6 | 	mov	_var11, _var01
05d20     87 0F 06 F1 | 	add	objptr, #391
05d24     07 4F 02 F6 | 	mov	_var13, objptr
05d28     07 4B 02 F1 | 	add	_var11, objptr
05d2c     25 39 C2 FA | 	rdbyte	_var02, _var11
05d30     20 38 06 F5 | 	and	_var02, #32
05d34     04 38 66 F0 | 	shl	_var02, #4
05d38     1C 43 02 FD | 	qmul	_var07, _var02
05d3c     18 50 62 FD | 	getqx	_var14
05d40     28 3D 02 F6 | 	mov	_var04, _var14
05d44     00 3D 86 F1 | 	sub	_var04, #256
05d48     07 3C C6 F0 | 	sar	_var04, #7
05d4c     1B 4D 02 F6 | 	mov	_var12, _var01
05d50     02 4C 66 F0 | 	shl	_var12, #2
05d54     98 0E 86 F1 | 	sub	objptr, #152
05d58     07 53 02 F6 | 	mov	_var15, objptr
05d5c     07 4D 02 F1 | 	add	_var12, objptr
05d60     26 3D 62 FC | 	wrlong	_var04, _var12
05d64     EF 0E 86 F1 | 	sub	objptr, #239
05d68                 | LR__0238
05d68                 | ' 
05d68                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05d68     1B 3B 02 F6 | 	mov	_var03, _var01
05d6c     87 0F 06 F1 | 	add	objptr, #391
05d70     07 3B 02 F1 | 	add	_var03, objptr
05d74     1D 41 C2 FA | 	rdbyte	_var06, _var03
05d78     22 41 02 F1 | 	add	_var06, _var08
05d7c     3F 40 06 F5 | 	and	_var06, #63
05d80     07 37 02 F1 | 	add	_var01, objptr
05d84     1B 41 42 FC | 	wrbyte	_var06, _var01
05d88     87 0F 86 F1 | 	sub	objptr, #391
05d8c                 | _trackerplayer_spin2_doVibrato_ret
05d8c     2D 00 64 FD | 	ret
05d90                 | 
05d90                 | ' 
05d90                 | ' 
05d90                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05d90                 | _trackerplayer_spin2_doPortamento
05d90                 | ' 
05d90                 | '   if period == currPeriod[channel]
05d90     3B 37 02 F6 | 	mov	_var01, arg01
05d94     02 36 66 F0 | 	shl	_var01, #2
05d98     DF 0E 06 F1 | 	add	objptr, #223
05d9c     07 39 02 F6 | 	mov	_var02, objptr
05da0     07 37 02 F1 | 	add	_var01, objptr
05da4     1B 3B 02 FB | 	rdlong	_var03, _var01
05da8     1D 79 0A F2 | 	cmp	arg02, _var03 wz
05dac                 | '     return
05dac     DF 0E 86 F1 | 	sub	objptr, #223
05db0     04 02 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
05db4                 | ' 
05db4                 | '   if period > 0
05db4     00 78 5E F2 | 	cmps	arg02, #0 wcz
05db8     1C 00 90 ED |  if_be	jmp	#LR__0239
05dbc                 | '     portamentoPeriodMemory[channel] := period
05dbc     3B 37 02 F6 | 	mov	_var01, arg01
05dc0     02 36 66 F0 | 	shl	_var01, #2
05dc4     97 0F 06 F1 | 	add	objptr, #407
05dc8     07 37 02 F1 | 	add	_var01, objptr
05dcc     1B 79 62 FC | 	wrlong	arg02, _var01
05dd0                 | '   else
05dd0     97 0F 86 F1 | 	sub	objptr, #407
05dd4     18 00 90 FD | 	jmp	#LR__0240
05dd8                 | LR__0239
05dd8                 | '     period := portamentoPeriodMemory[channel]
05dd8     3B 37 02 F6 | 	mov	_var01, arg01
05ddc     02 36 66 F0 | 	shl	_var01, #2
05de0     97 0F 06 F1 | 	add	objptr, #407
05de4     07 37 02 F1 | 	add	_var01, objptr
05de8     1B 79 02 FB | 	rdlong	arg02, _var01
05dec     97 0F 86 F1 | 	sub	objptr, #407
05df0                 | LR__0240
05df0                 | ' 
05df0                 | '   if period > currPeriod[channel]
05df0     3B 37 02 F6 | 	mov	_var01, arg01
05df4     02 36 66 F0 | 	shl	_var01, #2
05df8     DF 0E 06 F1 | 	add	objptr, #223
05dfc     07 37 02 F1 | 	add	_var01, objptr
05e00     1B 3B 02 FB | 	rdlong	_var03, _var01
05e04     1D 79 5A F2 | 	cmps	arg02, _var03 wcz
05e08     DF 0E 86 F1 | 	sub	objptr, #223
05e0c     68 00 90 ED |  if_be	jmp	#LR__0241
05e10                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05e10     3B 39 02 F6 | 	mov	_var02, arg01
05e14     02 38 66 F0 | 	shl	_var02, #2
05e18     DF 0E 06 F1 | 	add	objptr, #223
05e1c     07 39 02 F1 | 	add	_var02, objptr
05e20     3B 3D 02 F6 | 	mov	_var04, arg01
05e24     E9 0E 06 F1 | 	add	objptr, #233
05e28     1C 37 02 FB | 	rdlong	_var01, _var02
05e2c     07 3D 02 F1 | 	add	_var04, objptr
05e30     1E 3F C2 FA | 	rdbyte	_var05, _var04
05e34     1F 37 02 F1 | 	add	_var01, _var05
05e38     3B 41 02 F6 | 	mov	_var06, arg01
05e3c     02 40 66 F0 | 	shl	_var06, #2
05e40     E9 0E 86 F1 | 	sub	objptr, #233
05e44     07 41 02 F1 | 	add	_var06, objptr
05e48     20 37 62 FC | 	wrlong	_var01, _var06
05e4c                 | '     currPeriod[channel] <#= period
05e4c     3B 39 02 F6 | 	mov	_var02, arg01
05e50     02 38 66 F0 | 	shl	_var02, #2
05e54     07 39 02 F1 | 	add	_var02, objptr
05e58     1C 37 02 FB | 	rdlong	_var01, _var02
05e5c     3C 37 62 F3 | 	fles	_var01, arg02
05e60     3B 3D 02 F6 | 	mov	_var04, arg01
05e64     02 3C 66 F0 | 	shl	_var04, #2
05e68     07 3D 02 F1 | 	add	_var04, objptr
05e6c     1E 37 62 FC | 	wrlong	_var01, _var04
05e70     DF 0E 86 F1 | 	sub	objptr, #223
05e74     84 00 90 FD | 	jmp	#LR__0243
05e78                 | LR__0241
05e78                 | ' 
05e78                 | '   elseif period < currPeriod[channel]
05e78     3B 37 02 F6 | 	mov	_var01, arg01
05e7c     02 36 66 F0 | 	shl	_var01, #2
05e80     DF 0E 06 F1 | 	add	objptr, #223
05e84     07 37 02 F1 | 	add	_var01, objptr
05e88     1B 3B 02 FB | 	rdlong	_var03, _var01
05e8c     1D 79 5A F2 | 	cmps	arg02, _var03 wcz
05e90     DF 0E 86 F1 | 	sub	objptr, #223
05e94     64 00 90 3D |  if_ae	jmp	#LR__0242
05e98                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05e98     3B 39 02 F6 | 	mov	_var02, arg01
05e9c     02 38 66 F0 | 	shl	_var02, #2
05ea0     DF 0E 06 F1 | 	add	objptr, #223
05ea4     07 39 02 F1 | 	add	_var02, objptr
05ea8     3B 3D 02 F6 | 	mov	_var04, arg01
05eac     E9 0E 06 F1 | 	add	objptr, #233
05eb0     1C 37 02 FB | 	rdlong	_var01, _var02
05eb4     07 3D 02 F1 | 	add	_var04, objptr
05eb8     1E 3F C2 FA | 	rdbyte	_var05, _var04
05ebc     1F 37 82 F1 | 	sub	_var01, _var05
05ec0     3B 41 02 F6 | 	mov	_var06, arg01
05ec4     02 40 66 F0 | 	shl	_var06, #2
05ec8     E9 0E 86 F1 | 	sub	objptr, #233
05ecc     07 41 02 F1 | 	add	_var06, objptr
05ed0     20 37 62 FC | 	wrlong	_var01, _var06
05ed4                 | '     currPeriod[channel] #>= period
05ed4     3B 39 02 F6 | 	mov	_var02, arg01
05ed8     02 38 66 F0 | 	shl	_var02, #2
05edc     07 39 02 F1 | 	add	_var02, objptr
05ee0     1C 37 02 FB | 	rdlong	_var01, _var02
05ee4     3C 37 42 F3 | 	fges	_var01, arg02
05ee8     3B 3D 02 F6 | 	mov	_var04, arg01
05eec     02 3C 66 F0 | 	shl	_var04, #2
05ef0     07 3D 02 F1 | 	add	_var04, objptr
05ef4     1E 37 62 FC | 	wrlong	_var01, _var04
05ef8     DF 0E 86 F1 | 	sub	objptr, #223
05efc                 | LR__0242
05efc                 | LR__0243
05efc                 | ' 
05efc                 | '   ' Handle glissando if activated
05efc                 | '   if portaGlissando[channel] > 0
05efc     3B 37 02 F6 | 	mov	_var01, arg01
05f00     BC 0F 06 F1 | 	add	objptr, #444
05f04     07 37 02 F1 | 	add	_var01, objptr
05f08     1B 3B C2 FA | 	rdbyte	_var03, _var01
05f0c     00 3A 5E F2 | 	cmps	_var03, #0 wcz
05f10     BC 0F 86 F1 | 	sub	objptr, #444
05f14     A0 00 90 ED |  if_be	jmp	#LR__0246
05f18                 | ' 
05f18                 | '     tempPeriod := currPeriod[channel]
05f18     3B 37 02 F6 | 	mov	_var01, arg01
05f1c     02 36 66 F0 | 	shl	_var01, #2
05f20     DF 0E 06 F1 | 	add	objptr, #223
05f24     07 37 02 F1 | 	add	_var01, objptr
05f28     1B 43 02 FB | 	rdlong	_var07, _var01
05f2c                 | ' 
05f2c                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05f2c     00 44 06 F6 | 	mov	_var08, #0
05f30     DF 0E 86 F1 | 	sub	objptr, #223
05f34     2C A1 9F FE | 	loc	pa,	#(@LR__0245-@LR__0244)
05f38     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f3c                 | LR__0244
05f3c                 | ' 
05f3c                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05f3c     06 00 00 FF 
05f40     A4 2C 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05f44     16 47 02 F6 | 	mov	_var09, ptr__trackerplayer_spin2_dat__
05f48     3B 3B 02 F6 | 	mov	_var03, arg01
05f4c     D3 0E 06 F1 | 	add	objptr, #211
05f50     07 3B 02 F1 | 	add	_var03, objptr
05f54     1D 3F C2 FA | 	rdbyte	_var05, _var03
05f58     1F 49 02 F6 | 	mov	_var10, _var05
05f5c     03 48 66 F0 | 	shl	_var10, #3
05f60     1F 49 02 F1 | 	add	_var10, _var05
05f64     03 48 66 F0 | 	shl	_var10, #3
05f68     24 47 02 F1 | 	add	_var09, _var10
05f6c     22 4B 02 F6 | 	mov	_var11, _var08
05f70     01 4A 66 F0 | 	shl	_var11, #1
05f74     23 4B 02 F1 | 	add	_var11, _var09
05f78     25 4D E2 FA | 	rdword	_var12, _var11
05f7c                 | '       if tempPeriod >= periodStep
05f7c     26 43 5A F2 | 	cmps	_var07, _var12 wcz
05f80                 | '         i += 1000
05f80     06 00 00 FF 
05f84     A4 2C 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05f88     D3 0E 86 F1 | 	sub	objptr, #211
05f8c     01 00 00 3F 
05f90     E8 45 06 31 |  if_ae	add	_var08, ##1000
05f94     01 44 06 F1 | 	add	_var08, #1
05f98     24 44 5E F2 | 	cmps	_var08, #36 wcz
05f9c     9C FF 9F CD |  if_b	jmp	#LR__0244
05fa0                 | LR__0245
05fa0                 | ' 
05fa0                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05fa0     21 4D 82 F1 | 	sub	_var12, _var07
05fa4     02 76 66 F0 | 	shl	arg01, #2
05fa8     EF 0E 06 F1 | 	add	objptr, #239
05fac     07 77 02 F1 | 	add	arg01, objptr
05fb0     3B 4D 62 FC | 	wrlong	_var12, arg01
05fb4     EF 0E 86 F1 | 	sub	objptr, #239
05fb8                 | LR__0246
05fb8                 | _trackerplayer_spin2_doPortamento_ret
05fb8     2D 00 64 FD | 	ret
05fbc                 | 
05fbc                 | ' 
05fbc                 | ' 
05fbc                 | ' PRI doVolumeSlide(channel)
05fbc                 | _trackerplayer_spin2_doVolumeSlide
05fbc                 | ' 
05fbc                 | '   if x > 0
05fbc     B7 0F 06 F1 | 	add	objptr, #439
05fc0     07 37 C2 FA | 	rdbyte	_var01, objptr
05fc4     B7 0F 86 F1 | 	sub	objptr, #439
05fc8     00 36 5E F2 | 	cmps	_var01, #0 wcz
05fcc     38 00 90 ED |  if_be	jmp	#LR__0247
05fd0                 | '     currVolume[channel] += x
05fd0     3B 39 02 F6 | 	mov	_var02, arg01
05fd4     02 38 66 F0 | 	shl	_var02, #2
05fd8     FF 0E 06 F1 | 	add	objptr, #255
05fdc     07 39 02 F1 | 	add	_var02, objptr
05fe0     1C 37 02 FB | 	rdlong	_var01, _var02
05fe4     B8 0E 06 F1 | 	add	objptr, #184
05fe8     07 3B C2 FA | 	rdbyte	_var03, objptr
05fec     1D 37 02 F1 | 	add	_var01, _var03
05ff0     3B 3D 02 F6 | 	mov	_var04, arg01
05ff4     02 3C 66 F0 | 	shl	_var04, #2
05ff8     B8 0E 86 F1 | 	sub	objptr, #184
05ffc     07 3D 02 F1 | 	add	_var04, objptr
06000     1E 37 62 FC | 	wrlong	_var01, _var04
06004     FF 0E 86 F1 | 	sub	objptr, #255
06008                 | LR__0247
06008                 | '   if y > 0
06008     B8 0F 06 F1 | 	add	objptr, #440
0600c     07 37 C2 FA | 	rdbyte	_var01, objptr
06010     B8 0F 86 F1 | 	sub	objptr, #440
06014     00 36 5E F2 | 	cmps	_var01, #0 wcz
06018     34 00 90 ED |  if_be	jmp	#LR__0248
0601c                 | '     currVolume[channel] -= y
0601c     3B 39 02 F6 | 	mov	_var02, arg01
06020     02 38 66 F0 | 	shl	_var02, #2
06024     FF 0E 06 F1 | 	add	objptr, #255
06028     07 39 02 F1 | 	add	_var02, objptr
0602c     1C 37 02 FB | 	rdlong	_var01, _var02
06030     B9 0E 06 F1 | 	add	objptr, #185
06034     07 3B C2 FA | 	rdbyte	_var03, objptr
06038     1D 37 82 F1 | 	sub	_var01, _var03
0603c     02 76 66 F0 | 	shl	arg01, #2
06040     B9 0E 86 F1 | 	sub	objptr, #185
06044     07 77 02 F1 | 	add	arg01, objptr
06048     3B 37 62 FC | 	wrlong	_var01, arg01
0604c     FF 0E 86 F1 | 	sub	objptr, #255
06050                 | LR__0248
06050                 | _trackerplayer_spin2_doVolumeSlide_ret
06050     2D 00 64 FD | 	ret
06054                 | 
06054                 | ' 
06054                 | ' 
06054                 | ' '--------------------------------------------------------------
06054                 | ' '---------- Init the variables, start the cog. ----------------
06054                 | ' '--------------------------------------------------------------
06054                 | ' 
06054                 | ' pub start() :cog,base | iii
06054                 | _audio019_spin2_start
06054     07 5A 05 F6 | 	mov	COUNT_, #7
06058     B0 00 A0 FD | 	call	#pushregs_
0605c                 | ' 
0605c                 | ' base:=@channel1[0]
0605c     07 85 02 F6 | 	mov	local01, objptr
06060                 | ' 
06060                 | ' repeat iii from 0 to 7
06060     00 86 06 F6 | 	mov	local02, #0
06064     A4 A0 9F FE | 	loc	pa,	#(@LR__0250-@LR__0249)
06068     93 00 A0 FD | 	call	#FCACHE_LOAD_
0606c                 | LR__0249
0606c                 | '   long [base+32*iii]:=0
0606c     42 89 02 F6 | 	mov	local03, local01
06070     43 8B 02 F6 | 	mov	local04, local02
06074     05 8A 66 F0 | 	shl	local04, #5
06078     45 89 02 F1 | 	add	local03, local04
0607c     44 01 68 FC | 	wrlong	#0, local03
06080                 | '   long [base+32*iii+4]:=0
06080     42 89 02 F6 | 	mov	local03, local01
06084     43 8B 02 F6 | 	mov	local04, local02
06088     05 8A 66 F0 | 	shl	local04, #5
0608c     45 89 02 F1 | 	add	local03, local04
06090     04 88 06 F1 | 	add	local03, #4
06094     44 01 68 FC | 	wrlong	#0, local03
06098                 | '   long[base+32*iii+12]:=0
06098     42 89 02 F6 | 	mov	local03, local01
0609c     43 8B 02 F6 | 	mov	local04, local02
060a0     05 8A 66 F0 | 	shl	local04, #5
060a4     45 89 02 F1 | 	add	local03, local04
060a8     0C 88 06 F1 | 	add	local03, #12
060ac     44 01 68 FC | 	wrlong	#0, local03
060b0                 | '   long[base+32*iii+16]:=2 
060b0     42 89 02 F6 | 	mov	local03, local01
060b4     43 8B 02 F6 | 	mov	local04, local02
060b8     05 8A 66 F0 | 	shl	local04, #5
060bc     45 89 02 F1 | 	add	local03, local04
060c0     10 88 06 F1 | 	add	local03, #16
060c4     44 05 68 FC | 	wrlong	#2, local03
060c8                 | '   word[base+32*iii+20]:=0
060c8     42 89 02 F6 | 	mov	local03, local01
060cc     43 8B 02 F6 | 	mov	local04, local02
060d0     05 8A 66 F0 | 	shl	local04, #5
060d4     45 89 02 F1 | 	add	local03, local04
060d8     14 88 06 F1 | 	add	local03, #20
060dc     44 01 58 FC | 	wrword	#0, local03
060e0                 | '   word[base+32*iii+22]:=8192
060e0     42 89 02 F6 | 	mov	local03, local01
060e4     43 8B 02 F6 | 	mov	local04, local02
060e8     05 8A 66 F0 | 	shl	local04, #5
060ec     45 89 02 F1 | 	add	local03, local04
060f0     16 88 06 F1 | 	add	local03, #22
060f4     10 00 80 FF 
060f8     44 01 58 FC | 	wrword	##8192, local03
060fc                 | '   word[base+32*iii+24]:=100+2*iii
060fc     43 8B 02 F6 | 	mov	local04, local02
06100     01 8A 66 F0 | 	shl	local04, #1
06104     64 88 06 F6 | 	mov	local03, #100
06108     45 89 02 F1 | 	add	local03, local04
0610c     42 8D 02 F6 | 	mov	local05, local01
06110     43 8F 02 F6 | 	mov	local06, local02
06114     05 8E 66 F0 | 	shl	local06, #5
06118     47 8D 02 F1 | 	add	local05, local06
0611c     18 8C 06 F1 | 	add	local05, #24
06120     46 89 52 FC | 	wrword	local03, local05
06124                 | '   word[base+32*iii+26]:=2
06124     42 89 02 F6 | 	mov	local03, local01
06128     43 8B 02 F6 | 	mov	local04, local02
0612c     05 8A 66 F0 | 	shl	local04, #5
06130     45 89 02 F1 | 	add	local03, local04
06134     1A 88 06 F1 | 	add	local03, #26
06138     44 05 58 FC | 	wrword	#2, local03
0613c                 | '   long [base+32*iii+8]:=@null | $C0000000
0613c     01 00 00 FF 
06140     F8 16 06 F1 | 	add	ptr__audio019_spin2_dat__, ##760
06144     0B 89 02 F6 | 	mov	local03, ptr__audio019_spin2_dat__
06148     3E 88 26 F4 | 	bith	local03, #62
0614c     42 8D 02 F6 | 	mov	local05, local01
06150     43 8F 02 F6 | 	mov	local06, local02
06154     05 8E 66 F0 | 	shl	local06, #5
06158     47 8D 02 F1 | 	add	local05, local06
0615c     08 8C 06 F1 | 	add	local05, #8
06160     46 89 62 FC | 	wrlong	local03, local05
06164     01 86 06 F1 | 	add	local02, #1
06168     08 86 5E F2 | 	cmps	local02, #8 wcz
0616c     01 00 00 FF 
06170     F8 16 86 F1 | 	sub	ptr__audio019_spin2_dat__, ##760
06174     F4 FE 9F CD |  if_b	jmp	#LR__0249
06178                 | LR__0250
06178                 | '   
06178                 | ' cog:=coginit(16,@audio,@channel1)
06178     0B 79 02 F6 | 	mov	arg02, ptr__audio019_spin2_dat__
0617c     07 7B 02 F6 | 	mov	arg03, objptr
06180     10 76 06 F6 | 	mov	arg01, #16
06184     28 7A 62 FD | 	setq	arg03
06188     3C 77 F2 FC | 	coginit	arg01, arg02 wc
0618c     01 76 66 C6 |  if_b	neg	arg01, #1
06190     3B 31 02 F6 | 	mov	result1, arg01
06194     18 91 02 F6 | 	mov	local07, result1
06198                 | ' waitms(100)
06198     64 76 06 F6 | 	mov	arg01, #100
0619c     F0 04 B0 FD | 	call	#__system___waitms
061a0                 | ' return cog,base
061a0     42 33 02 F6 | 	mov	result2, local01
061a4     48 31 02 F6 | 	mov	result1, local07
061a8     AF F0 03 F6 | 	mov	ptra, fp
061ac     BF 00 A0 FD | 	call	#popregs_
061b0                 | _audio019_spin2_start_ret
061b0     2D 00 64 FD | 	ret
061b4                 | hubexit
061b4     81 00 80 FD | 	jmp	#cogexit
061b8                 | 
061b8                 | __system___setbaud
061b8     14 D8 06 FB | 	rdlong	muldiva_, #20
061bc     3B DB 02 F6 | 	mov	muldivb_, arg01
061c0     D0 00 A0 FD | 	call	#divide_
061c4     40 7C 64 FD | 	dirl	#62
061c8     40 7E 64 FD | 	dirl	#63
061cc     0A DB 62 FC | 	wrlong	muldivb_, ptr___system__dat__
061d0     10 DA 66 F0 | 	shl	muldivb_, #16
061d4     07 78 06 F6 | 	mov	arg02, #7
061d8     6D 79 02 F1 | 	add	arg02, muldivb_
061dc     3E F8 0C FC | 	wrpin	#124, #62
061e0     3E 78 16 FC | 	wxpin	arg02, #62
061e4     3F 7C 0C FC | 	wrpin	#62, #63
061e8     14 78 06 F1 | 	add	arg02, #20
061ec     3F 78 16 FC | 	wxpin	arg02, #63
061f0     41 7C 64 FD | 	dirh	#62
061f4     41 7E 64 FD | 	dirh	#63
061f8                 | __system___setbaud_ret
061f8     2D 00 64 FD | 	ret
061fc                 | 
061fc                 | __system___txraw
061fc     02 5A 05 F6 | 	mov	COUNT_, #2
06200     B0 00 A0 FD | 	call	#pushregs_
06204     3B 85 02 F6 | 	mov	local01, arg01
06208     0A 87 0A FB | 	rdlong	local02, ptr___system__dat__ wz
0620c     0C 00 90 5D |  if_ne	jmp	#LR__0251
06210     E1 00 00 FF 
06214     00 76 06 F6 | 	mov	arg01, ##115200
06218     9C FF BF FD | 	call	#__system___setbaud
0621c                 | LR__0251
0621c     3E 84 26 FC | 	wypin	local01, #62
06220     1F 02 64 FD | 	waitx	#1
06224     E0 9D 9F FE | 	loc	pa,	#(@LR__0253-@LR__0252)
06228     93 00 A0 FD | 	call	#FCACHE_LOAD_
0622c                 | LR__0252
0622c     40 7C 74 FD | 	testp	#62 wc
06230     F8 FF 9F 3D |  if_nc	jmp	#LR__0252
06234                 | LR__0253
06234     01 30 06 F6 | 	mov	result1, #1
06238     AF F0 03 F6 | 	mov	ptra, fp
0623c     BF 00 A0 FD | 	call	#popregs_
06240                 | __system___txraw_ret
06240     2D 00 64 FD | 	ret
06244                 | 
06244                 | __system___rxraw
06244     0B 5A 05 F6 | 	mov	COUNT_, #11
06248     B0 00 A0 FD | 	call	#pushregs_
0624c     3B 85 02 F6 | 	mov	local01, arg01
06250     0A 87 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06254     0C 00 90 5D |  if_ne	jmp	#LR__0254
06258     E1 00 00 FF 
0625c     00 76 06 F6 | 	mov	arg01, ##115200
06260     54 FF BF FD | 	call	#__system___setbaud
06264                 | LR__0254
06264     00 84 0E F2 | 	cmp	local01, #0 wz
06268     18 00 90 AD |  if_e	jmp	#LR__0255
0626c     1A 88 62 FD | 	getct	local03
06270     14 8A 06 FB | 	rdlong	local04, #20
06274     0A 8A 46 F0 | 	shr	local04, #10
06278     45 85 02 FD | 	qmul	local01, local04
0627c     18 8C 62 FD | 	getqx	local05
06280     46 89 02 F1 | 	add	local03, local05
06284                 | LR__0255
06284     01 8E 66 F6 | 	neg	local06, #1
06288     00 90 06 F6 | 	mov	local07, #0
0628c     04 14 06 F1 | 	add	ptr___system__dat__, #4
06290     0A 93 02 FB | 	rdlong	local08, ptr___system__dat__
06294     04 14 86 F1 | 	sub	ptr___system__dat__, #4
06298                 | LR__0256
06298     08 92 16 F4 | 	testb	local08, #8 wc
0629c     09 92 76 F4 | 	testbn	local08, #9 andc
062a0     0A 92 46 F0 | 	shr	local08, #10
062a4     01 90 06 C6 |  if_b	mov	local07, #1
062a8     10 00 90 CD |  if_b	jmp	#LR__0257
062ac     40 7E 6C FD | 	testp	#63 wz
062b0     01 90 06 A6 |  if_e	mov	local07, #1
062b4     3F 92 8E AA |  if_e	rdpin	local08, #63
062b8     04 92 46 A0 |  if_e	shr	local08, #4
062bc                 | LR__0257
062bc     00 86 06 F6 | 	mov	local02, #0
062c0     00 90 0E F2 | 	cmp	local07, #0 wz
062c4     01 86 66 56 |  if_ne	neg	local02, #1
062c8     00 94 06 F6 | 	mov	local09, #0
062cc     00 8A 06 F6 | 	mov	local04, #0
062d0     00 84 0E F2 | 	cmp	local01, #0 wz
062d4     01 8A 66 56 |  if_ne	neg	local04, #1
062d8     00 8C 06 F6 | 	mov	local05, #0
062dc     00 96 06 F6 | 	mov	local10, #0
062e0     1A 98 62 FD | 	getct	local11
062e4     44 99 82 F1 | 	sub	local11, local03
062e8     00 98 5E F2 | 	cmps	local11, #0 wcz
062ec     01 96 66 C6 |  if_b	neg	local10, #1
062f0     00 96 0E F2 | 	cmp	local10, #0 wz
062f4     01 8C 66 56 |  if_ne	neg	local05, #1
062f8     46 8B CA F7 | 	test	local04, local05 wz
062fc     01 94 66 56 |  if_ne	neg	local09, #1
06300     4A 87 4A F5 | 	or	local02, local09 wz
06304     90 FF 9F AD |  if_e	jmp	#LR__0256
06308     00 90 0E F2 | 	cmp	local07, #0 wz
0630c     49 8F 02 56 |  if_ne	mov	local06, local08
06310     FF 8E 06 55 |  if_ne	and	local06, #255
06314     04 14 06 F1 | 	add	ptr___system__dat__, #4
06318     0A 93 62 FC | 	wrlong	local08, ptr___system__dat__
0631c     04 14 86 F1 | 	sub	ptr___system__dat__, #4
06320     47 31 02 F6 | 	mov	result1, local06
06324     AF F0 03 F6 | 	mov	ptra, fp
06328     BF 00 A0 FD | 	call	#popregs_
0632c                 | __system___rxraw_ret
0632c     2D 00 64 FD | 	ret
06330                 | 
06330                 | __system____builtin_memmove
06330     3B 37 02 F6 | 	mov	_var01, arg01
06334     3C 77 5A F2 | 	cmps	arg01, arg02 wcz
06338     50 00 90 3D |  if_ae	jmp	#LR__0265
0633c     E0 9C 9F FE | 	loc	pa,	#(@LR__0259-@LR__0258)
06340     93 00 A0 FD | 	call	#FCACHE_LOAD_
06344                 | LR__0258
06344     03 7A 5E F2 | 	cmps	arg03, #3 wcz
06348     18 00 90 ED |  if_be	jmp	#LR__0260
0634c     3C 39 02 FB | 	rdlong	_var02, arg02
06350     3B 39 62 FC | 	wrlong	_var02, arg01
06354     04 76 06 F1 | 	add	arg01, #4
06358     04 78 06 F1 | 	add	arg02, #4
0635c     04 7A 86 F1 | 	sub	arg03, #4
06360     E0 FF 9F FD | 	jmp	#LR__0258
06364                 | LR__0259
06364                 | LR__0260
06364     3D 3B 0A F6 | 	mov	_var03, arg03 wz
06368     4C 00 90 AD |  if_e	jmp	#LR__0271
0636c     A4 9C 9F FE | 	loc	pa,	#(@LR__0263-@LR__0261)
06370     93 00 A0 FD | 	call	#FCACHE_LOAD_
06374                 | LR__0261
06374     1D 09 D8 FC | 	rep	@LR__0264, _var03
06378                 | LR__0262
06378     3C 39 C2 FA | 	rdbyte	_var02, arg02
0637c     3B 39 42 FC | 	wrbyte	_var02, arg01
06380     01 76 06 F1 | 	add	arg01, #1
06384     01 78 06 F1 | 	add	arg02, #1
06388                 | LR__0263
06388                 | LR__0264
06388     2C 00 90 FD | 	jmp	#LR__0271
0638c                 | LR__0265
0638c     3D 77 02 F1 | 	add	arg01, arg03
06390     3D 79 02 F1 | 	add	arg02, arg03
06394     3D 3D 0A F6 | 	mov	_var04, arg03 wz
06398     1C 00 90 AD |  if_e	jmp	#LR__0270
0639c     74 9C 9F FE | 	loc	pa,	#(@LR__0268-@LR__0266)
063a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
063a4                 | LR__0266
063a4     1E 09 D8 FC | 	rep	@LR__0269, _var04
063a8                 | LR__0267
063a8     01 76 86 F1 | 	sub	arg01, #1
063ac     01 78 86 F1 | 	sub	arg02, #1
063b0     3C 39 C2 FA | 	rdbyte	_var02, arg02
063b4     3B 39 42 FC | 	wrbyte	_var02, arg01
063b8                 | LR__0268
063b8                 | LR__0269
063b8                 | LR__0270
063b8                 | LR__0271
063b8     1B 31 02 F6 | 	mov	result1, _var01
063bc                 | __system____builtin_memmove_ret
063bc     2D 00 64 FD | 	ret
063c0                 | 
063c0                 | __system__longmove
063c0     3B 37 02 F6 | 	mov	_var01, arg01
063c4     3C 77 5A F2 | 	cmps	arg01, arg02 wcz
063c8     28 00 90 3D |  if_ae	jmp	#LR__0276
063cc     3D 39 0A F6 | 	mov	_var02, arg03 wz
063d0     5C 00 90 AD |  if_e	jmp	#LR__0282
063d4     3C 9C 9F FE | 	loc	pa,	#(@LR__0274-@LR__0272)
063d8     93 00 A0 FD | 	call	#FCACHE_LOAD_
063dc                 | LR__0272
063dc     1C 09 D8 FC | 	rep	@LR__0275, _var02
063e0                 | LR__0273
063e0     3C 3B 02 FB | 	rdlong	_var03, arg02
063e4     3B 3B 62 FC | 	wrlong	_var03, arg01
063e8     04 76 06 F1 | 	add	arg01, #4
063ec     04 78 06 F1 | 	add	arg02, #4
063f0                 | LR__0274
063f0                 | LR__0275
063f0     3C 00 90 FD | 	jmp	#LR__0282
063f4                 | LR__0276
063f4     3D 3D 02 F6 | 	mov	_var04, arg03
063f8     02 3C 66 F0 | 	shl	_var04, #2
063fc     1E 77 02 F1 | 	add	arg01, _var04
06400     3D 3D 02 F6 | 	mov	_var04, arg03
06404     02 3C 66 F0 | 	shl	_var04, #2
06408     1E 79 02 F1 | 	add	arg02, _var04
0640c     3D 3F 0A F6 | 	mov	_var05, arg03 wz
06410     1C 00 90 AD |  if_e	jmp	#LR__0281
06414     FC 9B 9F FE | 	loc	pa,	#(@LR__0279-@LR__0277)
06418     93 00 A0 FD | 	call	#FCACHE_LOAD_
0641c                 | LR__0277
0641c     1F 09 D8 FC | 	rep	@LR__0280, _var05
06420                 | LR__0278
06420     04 76 86 F1 | 	sub	arg01, #4
06424     04 78 86 F1 | 	sub	arg02, #4
06428     3C 3B 02 FB | 	rdlong	_var03, arg02
0642c     3B 3B 62 FC | 	wrlong	_var03, arg01
06430                 | LR__0279
06430                 | LR__0280
06430                 | LR__0281
06430                 | LR__0282
06430     1B 31 02 F6 | 	mov	result1, _var01
06434                 | __system__longmove_ret
06434     2D 00 64 FD | 	ret
06438                 | 
06438                 | __system____builtin_strcpy
06438     3B 37 02 F6 | 	mov	_var01, arg01
0643c     D4 9B 9F FE | 	loc	pa,	#(@LR__0284-@LR__0283)
06440     93 00 A0 FD | 	call	#FCACHE_LOAD_
06444                 | LR__0283
06444     3C 39 CA FA | 	rdbyte	_var02, arg02 wz
06448     3B 39 42 FC | 	wrbyte	_var02, arg01
0644c     01 78 06 F1 | 	add	arg02, #1
06450     01 76 06 F1 | 	add	arg01, #1
06454     EC FF 9F 5D |  if_ne	jmp	#LR__0283
06458                 | LR__0284
06458     1B 31 02 F6 | 	mov	result1, _var01
0645c                 | __system____builtin_strcpy_ret
0645c     2D 00 64 FD | 	ret
06460                 | 
06460                 | __system____topofstack
06460     00 5A 05 F6 | 	mov	COUNT_, #0
06464     B0 00 A0 FD | 	call	#pushregs_
06468     08 F0 07 F1 | 	add	ptra, #8
0646c     04 5E 05 F1 | 	add	fp, #4
06470     AF 76 62 FC | 	wrlong	arg01, fp
06474     AF 30 02 F6 | 	mov	result1, fp
06478     04 5E 85 F1 | 	sub	fp, #4
0647c     AF F0 03 F6 | 	mov	ptra, fp
06480     BF 00 A0 FD | 	call	#popregs_
06484                 | __system____topofstack_ret
06484     2D 00 64 FD | 	ret
06488                 | 
06488                 | __system___make_methodptr
06488     04 5A 05 F6 | 	mov	COUNT_, #4
0648c     B0 00 A0 FD | 	call	#pushregs_
06490     3B 85 02 F6 | 	mov	local01, arg01
06494     3C 87 02 F6 | 	mov	local02, arg02
06498     08 76 06 F6 | 	mov	arg01, #8
0649c     C8 10 B0 FD | 	call	#__system___gc_alloc_managed
064a0     18 89 0A F6 | 	mov	local03, result1 wz
064a4     10 00 90 AD |  if_e	jmp	#LR__0285
064a8     44 85 62 FC | 	wrlong	local01, local03
064ac     44 8B 02 F6 | 	mov	local04, local03
064b0     04 8A 06 F1 | 	add	local04, #4
064b4     45 87 62 FC | 	wrlong	local02, local04
064b8                 | LR__0285
064b8     44 31 02 F6 | 	mov	result1, local03
064bc     AF F0 03 F6 | 	mov	ptra, fp
064c0     BF 00 A0 FD | 	call	#popregs_
064c4                 | __system___make_methodptr_ret
064c4     2D 00 64 FD | 	ret
064c8                 | 
064c8                 | __system___lockmem
064c8     02 5A 05 F6 | 	mov	COUNT_, #2
064cc     B0 00 A0 FD | 	call	#pushregs_
064d0     01 30 62 FD | 	cogid	result1
064d4     18 85 02 F6 | 	mov	local01, result1
064d8     00 85 06 F1 | 	add	local01, #256
064dc                 | LR__0286
064dc     3B 87 0A FB | 	rdlong	local02, arg01 wz
064e0     3B 85 62 AC |  if_e	wrlong	local01, arg01
064e4     3B 87 02 AB |  if_e	rdlong	local02, arg01
064e8     3B 87 02 AB |  if_e	rdlong	local02, arg01
064ec     42 87 0A F2 | 	cmp	local02, local01 wz
064f0     E8 FF 9F 5D |  if_ne	jmp	#LR__0286
064f4     AF F0 03 F6 | 	mov	ptra, fp
064f8     BF 00 A0 FD | 	call	#popregs_
064fc                 | __system___lockmem_ret
064fc     2D 00 64 FD | 	ret
06500                 | 
06500                 | __system___string_concat
06500     07 5A 05 F6 | 	mov	COUNT_, #7
06504     B0 00 A0 FD | 	call	#pushregs_
06508     3B 85 02 F6 | 	mov	local01, arg01
0650c     3C 87 02 F6 | 	mov	local02, arg02
06510     42 77 02 F6 | 	mov	arg01, local01
06514     00 88 06 F6 | 	mov	local03, #0
06518     F4 9A 9F FE | 	loc	pa,	#(@LR__0288-@LR__0287)
0651c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06520                 | LR__0287
06520     3B 8B CA FA | 	rdbyte	local04, arg01 wz
06524     01 88 06 51 |  if_ne	add	local03, #1
06528     01 76 06 51 |  if_ne	add	arg01, #1
0652c     F0 FF 9F 5D |  if_ne	jmp	#LR__0287
06530                 | LR__0288
06530     44 8D 02 F6 | 	mov	local05, local03
06534     43 77 02 F6 | 	mov	arg01, local02
06538     00 88 06 F6 | 	mov	local03, #0
0653c     D0 9A 9F FE | 	loc	pa,	#(@LR__0290-@LR__0289)
06540     93 00 A0 FD | 	call	#FCACHE_LOAD_
06544                 | LR__0289
06544     3B 8B CA FA | 	rdbyte	local04, arg01 wz
06548     01 88 06 51 |  if_ne	add	local03, #1
0654c     01 76 06 51 |  if_ne	add	arg01, #1
06550     F0 FF 9F 5D |  if_ne	jmp	#LR__0289
06554                 | LR__0290
06554     44 31 02 F6 | 	mov	result1, local03
06558     18 8F 02 F6 | 	mov	local06, result1
0655c     46 77 02 F6 | 	mov	arg01, local05
06560     47 77 02 F1 | 	add	arg01, local06
06564     01 76 06 F1 | 	add	arg01, #1
06568     FC 0F B0 FD | 	call	#__system___gc_alloc_managed
0656c     18 91 0A F6 | 	mov	local07, result1 wz
06570     28 00 90 AD |  if_e	jmp	#LR__0291
06574     48 77 02 F6 | 	mov	arg01, local07
06578     42 79 02 F6 | 	mov	arg02, local01
0657c     46 7B 02 F6 | 	mov	arg03, local05
06580     AC FD BF FD | 	call	#__system____builtin_memmove
06584     48 77 02 F6 | 	mov	arg01, local07
06588     46 77 02 F1 | 	add	arg01, local05
0658c     01 8E 06 F1 | 	add	local06, #1
06590     43 79 02 F6 | 	mov	arg02, local02
06594     47 7B 02 F6 | 	mov	arg03, local06
06598     94 FD BF FD | 	call	#__system____builtin_memmove
0659c                 | LR__0291
0659c     48 31 02 F6 | 	mov	result1, local07
065a0     AF F0 03 F6 | 	mov	ptra, fp
065a4     BF 00 A0 FD | 	call	#popregs_
065a8                 | __system___string_concat_ret
065a8     2D 00 64 FD | 	ret
065ac                 | 
065ac                 | __system___tx
065ac     02 5A 05 F6 | 	mov	COUNT_, #2
065b0     B0 00 A0 FD | 	call	#pushregs_
065b4     3B 85 02 F6 | 	mov	local01, arg01
065b8     0A 84 0E F2 | 	cmp	local01, #10 wz
065bc     20 00 90 5D |  if_ne	jmp	#LR__0292
065c0     08 14 06 F1 | 	add	ptr___system__dat__, #8
065c4     0A 87 02 FB | 	rdlong	local02, ptr___system__dat__
065c8     08 14 86 F1 | 	sub	ptr___system__dat__, #8
065cc     02 86 CE F7 | 	test	local02, #2 wz
065d0     0C 00 90 AD |  if_e	jmp	#LR__0292
065d4     0D 86 06 F6 | 	mov	local02, #13
065d8     0D 76 06 F6 | 	mov	arg01, #13
065dc     1C FC BF FD | 	call	#__system___txraw
065e0                 | LR__0292
065e0     42 77 02 F6 | 	mov	arg01, local01
065e4     14 FC BF FD | 	call	#__system___txraw
065e8     AF F0 03 F6 | 	mov	ptra, fp
065ec     BF 00 A0 FD | 	call	#popregs_
065f0                 | __system___tx_ret
065f0     2D 00 64 FD | 	ret
065f4                 | 
065f4                 | __system___rx
065f4     02 5A 05 F6 | 	mov	COUNT_, #2
065f8     B0 00 A0 FD | 	call	#pushregs_
065fc                 | LR__0293
065fc     00 76 06 F6 | 	mov	arg01, #0
06600     40 FC BF FD | 	call	#__system___rxraw
06604     18 85 02 F6 | 	mov	local01, result1
06608     FF FF 7F FF 
0660c     FF 85 0E F2 | 	cmp	local01, ##-1 wz
06610     E8 FF 9F AD |  if_e	jmp	#LR__0293
06614     0D 84 0E F2 | 	cmp	local01, #13 wz
06618     14 00 90 5D |  if_ne	jmp	#LR__0294
0661c     08 14 06 F1 | 	add	ptr___system__dat__, #8
06620     0A 87 02 FB | 	rdlong	local02, ptr___system__dat__
06624     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06628     02 86 CE F7 | 	test	local02, #2 wz
0662c     0A 84 06 56 |  if_ne	mov	local01, #10
06630                 | LR__0294
06630     08 14 06 F1 | 	add	ptr___system__dat__, #8
06634     0A 87 02 FB | 	rdlong	local02, ptr___system__dat__
06638     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0663c     01 86 CE F7 | 	test	local02, #1 wz
06640     1C 00 90 AD |  if_e	jmp	#LR__0297
06644     7F 84 0E F2 | 	cmp	local01, #127 wz
06648     0C 00 90 5D |  if_ne	jmp	#LR__0295
0664c     08 76 06 F6 | 	mov	arg01, #8
06650     58 FF BF FD | 	call	#__system___tx
06654     08 00 90 FD | 	jmp	#LR__0296
06658                 | LR__0295
06658     42 77 02 F6 | 	mov	arg01, local01
0665c     4C FF BF FD | 	call	#__system___tx
06660                 | LR__0296
06660                 | LR__0297
06660     42 31 02 F6 | 	mov	result1, local01
06664     AF F0 03 F6 | 	mov	ptra, fp
06668     BF 00 A0 FD | 	call	#popregs_
0666c                 | __system___rx_ret
0666c     2D 00 64 FD | 	ret
06670                 | 
06670                 | __system___pinread
06670     20 76 CE F7 | 	test	arg01, #32 wz
06674     FF 37 02 56 |  if_ne	mov	_var01, inb
06678     FE 37 02 A6 |  if_e	mov	_var01, ina
0667c     3B 37 42 F0 | 	shr	_var01, arg01
06680     06 76 46 F0 | 	shr	arg01, #6
06684     3B 37 42 F7 | 	zerox	_var01, arg01
06688     1B 31 02 F6 | 	mov	result1, _var01
0668c                 | __system___pinread_ret
0668c     2D 00 64 FD | 	ret
06690                 | 
06690                 | __system___waitms
06690     03 5A 05 F6 | 	mov	COUNT_, #3
06694     B0 00 A0 FD | 	call	#pushregs_
06698     3B 85 02 F6 | 	mov	local01, arg01
0669c     14 86 06 FB | 	rdlong	local02, #20
066a0     74 99 9F FE | 	loc	pa,	#(@LR__0299-@LR__0298)
066a4     93 00 A0 FD | 	call	#FCACHE_LOAD_
066a8                 | LR__0298
066a8     01 00 00 FF 
066ac     E8 85 5E F2 | 	cmps	local01, ##1000 wcz
066b0     1F 86 62 1D |  if_a	waitx	local02
066b4     01 00 00 1F 
066b8     E8 85 86 11 |  if_a	sub	local01, ##1000
066bc     E8 FF 9F 1D |  if_a	jmp	#LR__0298
066c0                 | LR__0299
066c0     0C 14 06 F1 | 	add	ptr___system__dat__, #12
066c4     0A 89 0A FB | 	rdlong	local03, ptr___system__dat__ wz
066c8     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
066cc     20 00 90 5D |  if_ne	jmp	#LR__0300
066d0     43 D9 02 F6 | 	mov	muldiva_, local02
066d4     01 00 00 FF 
066d8     E8 DB 06 F6 | 	mov	muldivb_, ##1000
066dc     CC 00 A0 FD | 	call	#unsdivide_
066e0     6D 89 02 F6 | 	mov	local03, muldivb_
066e4     0C 14 06 F1 | 	add	ptr___system__dat__, #12
066e8     0A DB 62 FC | 	wrlong	muldivb_, ptr___system__dat__
066ec     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
066f0                 | LR__0300
066f0     00 84 5E F2 | 	cmps	local01, #0 wcz
066f4     44 85 02 1D |  if_a	qmul	local01, local03
066f8     18 76 62 1D |  if_a	getqx	arg01
066fc     1F 76 62 1D |  if_a	waitx	arg01
06700     AF F0 03 F6 | 	mov	ptra, fp
06704     BF 00 A0 FD | 	call	#popregs_
06708                 | __system___waitms_ret
06708     2D 00 64 FD | 	ret
0670c                 | 
0670c                 | __system___waitus
0670c     02 5A 05 F6 | 	mov	COUNT_, #2
06710     B0 00 A0 FD | 	call	#pushregs_
06714     3B 85 02 F6 | 	mov	local01, arg01
06718     10 14 06 F1 | 	add	ptr___system__dat__, #16
0671c     0A 87 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06720     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06724     20 00 90 5D |  if_ne	jmp	#LR__0301
06728     14 D8 06 FB | 	rdlong	muldiva_, #20
0672c     A1 07 00 FF 
06730     40 DA 06 F6 | 	mov	muldivb_, ##1000000
06734     CC 00 A0 FD | 	call	#unsdivide_
06738     6D 87 02 F6 | 	mov	local02, muldivb_
0673c     10 14 06 F1 | 	add	ptr___system__dat__, #16
06740     0A DB 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06744     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06748                 | LR__0301
06748     43 85 02 FD | 	qmul	local01, local02
0674c     18 76 62 FD | 	getqx	arg01
06750     1F 76 62 FD | 	waitx	arg01
06754     AF F0 03 F6 | 	mov	ptra, fp
06758     BF 00 A0 FD | 	call	#popregs_
0675c                 | __system___waitus_ret
0675c     2D 00 64 FD | 	ret
06760                 | 
06760                 | __system___mount
06760     0B 5A 05 F6 | 	mov	COUNT_, #11
06764     B0 00 A0 FD | 	call	#pushregs_
06768     3B 85 02 F6 | 	mov	local01, arg01
0676c     3C 87 02 F6 | 	mov	local02, arg02
06770     01 88 66 F6 | 	neg	local03, #1
06774     42 8B C2 FA | 	rdbyte	local04, local01
06778     2F 8A 0E F2 | 	cmp	local04, #47 wz
0677c     1C 00 90 AD |  if_e	jmp	#LR__0302
06780     01 00 00 FF 
06784     40 14 06 F1 | 	add	ptr___system__dat__, ##576
06788     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
0678c     01 00 00 FF 
06790     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
06794     01 30 66 F6 | 	neg	result1, #1
06798     38 01 90 FD | 	jmp	#LR__0313
0679c                 | LR__0302
0679c     00 8C 06 F6 | 	mov	local05, #0
067a0                 | LR__0303
067a0     04 8C 5E F2 | 	cmps	local05, #4 wcz
067a4     B0 00 90 3D |  if_ae	jmp	#LR__0309
067a8     46 8B 02 F6 | 	mov	local04, local05
067ac     02 8A 66 F0 | 	shl	local04, #2
067b0     18 14 06 F1 | 	add	ptr___system__dat__, #24
067b4     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
067b8     45 8F 0A FB | 	rdlong	local06, local04 wz
067bc     18 14 86 F1 | 	sub	ptr___system__dat__, #24
067c0     0C 00 90 5D |  if_ne	jmp	#LR__0304
067c4     00 88 5E F2 | 	cmps	local03, #0 wcz
067c8     46 89 02 C6 |  if_b	mov	local03, local05
067cc     80 00 90 CD |  if_b	jmp	#LR__0308
067d0                 | LR__0304
067d0     46 8B 02 F6 | 	mov	local04, local05
067d4     02 8A 66 F0 | 	shl	local04, #2
067d8     18 14 06 F1 | 	add	ptr___system__dat__, #24
067dc     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
067e0     45 77 02 FB | 	rdlong	arg01, local04
067e4     18 14 86 F1 | 	sub	ptr___system__dat__, #24
067e8     00 90 06 F6 | 	mov	local07, #0
067ec     20 98 9F FE | 	loc	pa,	#(@LR__0306-@LR__0305)
067f0     93 00 A0 FD | 	call	#FCACHE_LOAD_
067f4                 | LR__0305
067f4     3B 93 CA FA | 	rdbyte	local08, arg01 wz
067f8     01 90 06 51 |  if_ne	add	local07, #1
067fc     01 76 06 51 |  if_ne	add	arg01, #1
06800     F0 FF 9F 5D |  if_ne	jmp	#LR__0305
06804                 | LR__0306
06804     48 31 02 F6 | 	mov	result1, local07
06808     18 95 02 F6 | 	mov	local09, result1
0680c     4A 97 02 F6 | 	mov	local10, local09
06810     42 97 02 F1 | 	add	local10, local01
06814     4B 8B C2 FA | 	rdbyte	local04, local10
06818     2F 8A 0E F2 | 	cmp	local04, #47 wz
0681c     30 00 90 5D |  if_ne	jmp	#LR__0307
06820     42 77 02 F6 | 	mov	arg01, local01
06824     46 99 02 F6 | 	mov	local11, local05
06828     02 98 66 F0 | 	shl	local11, #2
0682c     18 14 06 F1 | 	add	ptr___system__dat__, #24
06830     0A 99 02 F1 | 	add	local11, ptr___system__dat__
06834     4C 79 02 FB | 	rdlong	arg02, local11
06838     4A 7B 02 F6 | 	mov	arg03, local09
0683c     18 14 86 F1 | 	sub	ptr___system__dat__, #24
06840     10 19 B0 FD | 	call	#__system__strncmp
06844     00 30 0E F2 | 	cmp	result1, #0 wz
06848     46 89 02 A6 |  if_e	mov	local03, local05
0684c     08 00 90 AD |  if_e	jmp	#LR__0309
06850                 | LR__0307
06850                 | LR__0308
06850     01 8C 06 F1 | 	add	local05, #1
06854     48 FF 9F FD | 	jmp	#LR__0303
06858                 | LR__0309
06858     FF FF 7F FF 
0685c     FF 89 0E F2 | 	cmp	local03, ##-1 wz
06860     1C 00 90 5D |  if_ne	jmp	#LR__0310
06864     01 00 00 FF 
06868     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0686c     0A 17 68 FC | 	wrlong	#11, ptr___system__dat__
06870     01 00 00 FF 
06874     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
06878     01 30 66 F6 | 	neg	result1, #1
0687c     54 00 90 FD | 	jmp	#LR__0313
06880                 | LR__0310
06880     44 8D 02 F6 | 	mov	local05, local03
06884     46 8B 02 F6 | 	mov	local04, local05
06888     02 8A 66 F0 | 	shl	local04, #2
0688c     28 14 06 F1 | 	add	ptr___system__dat__, #40
06890     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
06894     45 87 62 FC | 	wrlong	local02, local04
06898     00 86 0E F2 | 	cmp	local02, #0 wz
0689c     28 14 86 F1 | 	sub	ptr___system__dat__, #40
068a0     18 00 90 5D |  if_ne	jmp	#LR__0311
068a4     02 8C 66 F0 | 	shl	local05, #2
068a8     18 14 06 F1 | 	add	ptr___system__dat__, #24
068ac     0A 8D 02 F1 | 	add	local05, ptr___system__dat__
068b0     46 01 68 FC | 	wrlong	#0, local05
068b4     18 14 86 F1 | 	sub	ptr___system__dat__, #24
068b8     14 00 90 FD | 	jmp	#LR__0312
068bc                 | LR__0311
068bc     02 8C 66 F0 | 	shl	local05, #2
068c0     18 14 06 F1 | 	add	ptr___system__dat__, #24
068c4     0A 8D 02 F1 | 	add	local05, ptr___system__dat__
068c8     46 85 62 FC | 	wrlong	local01, local05
068cc     18 14 86 F1 | 	sub	ptr___system__dat__, #24
068d0                 | LR__0312
068d0     00 30 06 F6 | 	mov	result1, #0
068d4                 | LR__0313
068d4     AF F0 03 F6 | 	mov	ptra, fp
068d8     BF 00 A0 FD | 	call	#popregs_
068dc                 | __system___mount_ret
068dc     2D 00 64 FD | 	ret
068e0                 | 
068e0                 | __system____getvfsforfile
068e0     12 5A 05 F6 | 	mov	COUNT_, #18
068e4     B0 00 A0 FD | 	call	#pushregs_
068e8     3B 85 02 F6 | 	mov	local01, arg01
068ec     3C 87 02 F6 | 	mov	local02, arg02
068f0     3D 89 02 F6 | 	mov	local03, arg03
068f4     43 8B C2 FA | 	rdbyte	local04, local02
068f8     2F 8A 0E F2 | 	cmp	local04, #47 wz
068fc     14 00 90 5D |  if_ne	jmp	#LR__0314
06900     42 77 02 F6 | 	mov	arg01, local01
06904     43 79 02 F6 | 	mov	arg02, local02
06908     00 7B 06 F6 | 	mov	arg03, #256
0690c     74 17 B0 FD | 	call	#__system__strncpy
06910     6C 00 90 FD | 	jmp	#LR__0317
06914                 | LR__0314
06914     38 14 06 F1 | 	add	ptr___system__dat__, #56
06918     0A 79 02 F6 | 	mov	arg02, ptr___system__dat__
0691c     38 14 86 F1 | 	sub	ptr___system__dat__, #56
06920     42 77 02 F6 | 	mov	arg01, local01
06924     00 7B 06 F6 | 	mov	arg03, #256
06928     58 17 B0 FD | 	call	#__system__strncpy
0692c     18 8D 02 F6 | 	mov	local05, result1
06930     43 8B CA FA | 	rdbyte	local04, local02 wz
06934     48 00 90 AD |  if_e	jmp	#LR__0316
06938     43 8F C2 FA | 	rdbyte	local06, local02
0693c     2E 8E 0E F2 | 	cmp	local06, #46 wz
06940     18 00 90 5D |  if_ne	jmp	#LR__0315
06944     01 86 06 F1 | 	add	local02, #1
06948     43 91 C2 FA | 	rdbyte	local07, local02
0694c     01 86 86 F1 | 	sub	local02, #1
06950     48 93 02 F6 | 	mov	local08, local07
06954     07 92 4E F7 | 	zerox	local08, #7 wz
06958     24 00 90 AD |  if_e	jmp	#LR__0316
0695c                 | LR__0315
0695c     79 00 00 FF 
06960     EC 79 06 F6 | 	mov	arg02, ##@LR__0931
06964     42 77 02 F6 | 	mov	arg01, local01
06968     00 7B 06 F6 | 	mov	arg03, #256
0696c     60 17 B0 FD | 	call	#__system__strncat
06970     42 77 02 F6 | 	mov	arg01, local01
06974     43 79 02 F6 | 	mov	arg02, local02
06978     00 7B 06 F6 | 	mov	arg03, #256
0697c     50 17 B0 FD | 	call	#__system__strncat
06980                 | LR__0316
06980                 | LR__0317
06980     00 94 06 F6 | 	mov	local09, #0
06984                 | LR__0318
06984     04 94 5E F2 | 	cmps	local09, #4 wcz
06988     50 01 90 3D |  if_ae	jmp	#LR__0329
0698c     4A 8B 02 F6 | 	mov	local04, local09
06990     02 8A 66 F0 | 	shl	local04, #2
06994     18 14 06 F1 | 	add	ptr___system__dat__, #24
06998     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
0699c     45 93 0A FB | 	rdlong	local08, local04 wz
069a0     18 14 86 F1 | 	sub	ptr___system__dat__, #24
069a4     2C 01 90 AD |  if_e	jmp	#LR__0328
069a8     4A 8B 02 F6 | 	mov	local04, local09
069ac     02 8A 66 F0 | 	shl	local04, #2
069b0     18 14 06 F1 | 	add	ptr___system__dat__, #24
069b4     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
069b8     45 77 02 FB | 	rdlong	arg01, local04
069bc     18 14 86 F1 | 	sub	ptr___system__dat__, #24
069c0     00 96 06 F6 | 	mov	local10, #0
069c4     48 96 9F FE | 	loc	pa,	#(@LR__0320-@LR__0319)
069c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
069cc                 | LR__0319
069cc     3B 99 CA FA | 	rdbyte	local11, arg01 wz
069d0     01 96 06 51 |  if_ne	add	local10, #1
069d4     01 76 06 51 |  if_ne	add	arg01, #1
069d8     F0 FF 9F 5D |  if_ne	jmp	#LR__0319
069dc                 | LR__0320
069dc     4B 31 02 F6 | 	mov	result1, local10
069e0     18 9B 02 F6 | 	mov	local12, result1
069e4     4D 8F 02 F6 | 	mov	local06, local12
069e8     42 8F 02 F1 | 	add	local06, local01
069ec     47 8B C2 FA | 	rdbyte	local04, local06
069f0     2F 8A 0E F2 | 	cmp	local04, #47 wz
069f4     10 00 90 AD |  if_e	jmp	#LR__0321
069f8     4D 8D 02 F6 | 	mov	local05, local12
069fc     42 8D 02 F1 | 	add	local05, local01
06a00     46 91 CA FA | 	rdbyte	local07, local05 wz
06a04     CC 00 90 5D |  if_ne	jmp	#LR__0327
06a08                 | LR__0321
06a08     42 77 02 F6 | 	mov	arg01, local01
06a0c     4A 9D 02 F6 | 	mov	local13, local09
06a10     02 9C 66 F0 | 	shl	local13, #2
06a14     18 14 06 F1 | 	add	ptr___system__dat__, #24
06a18     0A 9D 02 F1 | 	add	local13, ptr___system__dat__
06a1c     4E 79 02 FB | 	rdlong	arg02, local13
06a20     4D 7B 02 F6 | 	mov	arg03, local12
06a24     18 14 86 F1 | 	sub	ptr___system__dat__, #24
06a28     28 17 B0 FD | 	call	#__system__strncmp
06a2c     18 9F 0A F6 | 	mov	local14, result1 wz
06a30     A0 00 90 5D |  if_ne	jmp	#LR__0327
06a34     4A 8B 02 F6 | 	mov	local04, local09
06a38     02 8A 66 F0 | 	shl	local04, #2
06a3c     28 14 06 F1 | 	add	ptr___system__dat__, #40
06a40     0A 8B 02 F1 | 	add	local04, ptr___system__dat__
06a44     45 A1 02 FB | 	rdlong	local15, local04
06a48     28 14 86 F1 | 	sub	ptr___system__dat__, #40
06a4c     FC 95 9F FE | 	loc	pa,	#(@LR__0324-@LR__0322)
06a50     93 00 A0 FD | 	call	#FCACHE_LOAD_
06a54                 | LR__0322
06a54     4D 93 02 F6 | 	mov	local08, local12
06a58     01 92 06 F1 | 	add	local08, #1
06a5c     42 93 02 F1 | 	add	local08, local01
06a60     49 8B C2 FA | 	rdbyte	local04, local08
06a64     2E 8A 0E F2 | 	cmp	local04, #46 wz
06a68     34 00 90 5D |  if_ne	jmp	#LR__0325
06a6c     4D A3 02 F6 | 	mov	local16, local12
06a70     02 A2 06 F1 | 	add	local16, #2
06a74     42 A3 02 F1 | 	add	local16, local01
06a78     51 8D C2 FA | 	rdbyte	local05, local16
06a7c     2F 8C 0E F2 | 	cmp	local05, #47 wz
06a80     14 00 90 AD |  if_e	jmp	#LR__0323
06a84     4D A5 02 F6 | 	mov	local17, local12
06a88     02 A4 06 F1 | 	add	local17, #2
06a8c     42 A5 02 F1 | 	add	local17, local01
06a90     52 A7 CA FA | 	rdbyte	local18, local17 wz
06a94     08 00 90 5D |  if_ne	jmp	#LR__0325
06a98                 | LR__0323
06a98     01 9A 06 F1 | 	add	local12, #1
06a9c     B4 FF 9F FD | 	jmp	#LR__0322
06aa0                 | LR__0324
06aa0                 | LR__0325
06aa0     00 88 0E F2 | 	cmp	local03, #0 wz
06aa4     10 00 90 AD |  if_e	jmp	#LR__0326
06aa8     44 77 02 F6 | 	mov	arg01, local03
06aac     42 79 02 F6 | 	mov	arg02, local01
06ab0     00 7B 06 F6 | 	mov	arg03, #256
06ab4     CC 15 B0 FD | 	call	#__system__strncpy
06ab8                 | LR__0326
06ab8     42 77 02 F6 | 	mov	arg01, local01
06abc     42 79 02 F6 | 	mov	arg02, local01
06ac0     4D 79 02 F1 | 	add	arg02, local12
06ac4     01 78 06 F1 | 	add	arg02, #1
06ac8     6C F9 BF FD | 	call	#__system____builtin_strcpy
06acc     50 31 02 F6 | 	mov	result1, local15
06ad0     1C 00 90 FD | 	jmp	#LR__0330
06ad4                 | LR__0327
06ad4                 | LR__0328
06ad4     01 94 06 F1 | 	add	local09, #1
06ad8     A8 FE 9F FD | 	jmp	#LR__0318
06adc                 | LR__0329
06adc     01 00 00 FF 
06ae0     3C 14 06 F1 | 	add	ptr___system__dat__, ##572
06ae4     0A 31 02 FB | 	rdlong	result1, ptr___system__dat__
06ae8     01 00 00 FF 
06aec     3C 14 86 F1 | 	sub	ptr___system__dat__, ##572
06af0                 | LR__0330
06af0     AF F0 03 F6 | 	mov	ptra, fp
06af4     BF 00 A0 FD | 	call	#popregs_
06af8                 | __system____getvfsforfile_ret
06af8     2D 00 64 FD | 	ret
06afc                 | 
06afc                 | __system___basic_open
06afc     05 5A 05 F6 | 	mov	COUNT_, #5
06b00     B0 00 A0 FD | 	call	#pushregs_
06b04     3C 85 02 F6 | 	mov	local01, arg02
06b08     3D 87 02 F6 | 	mov	local02, arg03
06b0c     3E 89 02 F6 | 	mov	local03, arg04
06b10     3C 15 B0 FD | 	call	#__system____getftab
06b14     18 8B 0A F6 | 	mov	local04, result1 wz
06b18     18 00 90 5D |  if_ne	jmp	#LR__0331
06b1c     03 77 02 F6 | 	mov	arg01, abortchain
06b20     0C 78 06 F6 | 	mov	arg02, #12
06b24     01 7A 06 F6 | 	mov	arg03, #1
06b28     F0 00 A0 FD | 	call	#__longjmp
06b2c     01 30 66 F6 | 	neg	result1, #1
06b30     70 00 90 FD | 	jmp	#LR__0335
06b34                 | LR__0331
06b34     00 84 0E F2 | 	cmp	local01, #0 wz
06b38     48 00 90 AD |  if_e	jmp	#LR__0333
06b3c     04 76 06 F6 | 	mov	arg01, #4
06b40     24 0A B0 FD | 	call	#__system___gc_alloc_managed
06b44     18 8D 0A F6 | 	mov	local05, result1 wz
06b48     18 00 90 5D |  if_ne	jmp	#LR__0332
06b4c     03 77 02 F6 | 	mov	arg01, abortchain
06b50     07 78 06 F6 | 	mov	arg02, #7
06b54     01 7A 06 F6 | 	mov	arg03, #1
06b58     F0 00 A0 FD | 	call	#__longjmp
06b5c     01 30 66 F6 | 	neg	result1, #1
06b60     40 00 90 FD | 	jmp	#LR__0335
06b64                 | LR__0332
06b64     46 85 62 FC | 	wrlong	local01, local05
06b68     08 79 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
06b6c     46 77 02 F6 | 	mov	arg01, local05
06b70     14 F9 BF FD | 	call	#__system___make_methodptr
06b74     18 8A 06 F1 | 	add	local04, #24
06b78     45 31 62 FC | 	wrlong	result1, local04
06b7c     18 8A 86 F1 | 	sub	local04, #24
06b80     0C 00 90 FD | 	jmp	#LR__0334
06b84                 | LR__0333
06b84     18 8A 06 F1 | 	add	local04, #24
06b88     45 85 62 FC | 	wrlong	local01, local04
06b8c     18 8A 86 F1 | 	sub	local04, #24
06b90                 | LR__0334
06b90     1C 8A 06 F1 | 	add	local04, #28
06b94     45 87 62 FC | 	wrlong	local02, local04
06b98     04 8A 06 F1 | 	add	local04, #4
06b9c     45 89 62 FC | 	wrlong	local03, local04
06ba0     00 30 06 F6 | 	mov	result1, #0
06ba4                 | LR__0335
06ba4     AF F0 03 F6 | 	mov	ptra, fp
06ba8     BF 00 A0 FD | 	call	#popregs_
06bac                 | __system___basic_open_ret
06bac     2D 00 64 FD | 	ret
06bb0                 | 
06bb0                 | __system___basic_print_char
06bb0     05 5A 05 F6 | 	mov	COUNT_, #5
06bb4     B0 00 A0 FD | 	call	#pushregs_
06bb8     3C 85 02 F6 | 	mov	local01, arg02
06bbc     E4 17 B0 FD | 	call	#__system___gettxfunc
06bc0     18 87 0A F6 | 	mov	local02, result1 wz
06bc4     00 30 06 A6 |  if_e	mov	result1, #0
06bc8     24 00 90 AD |  if_e	jmp	#LR__0336
06bcc     43 89 02 FB | 	rdlong	local03, local02
06bd0     04 86 06 F1 | 	add	local02, #4
06bd4     43 8B 02 FB | 	rdlong	local04, local02
06bd8     42 77 02 F6 | 	mov	arg01, local01
06bdc     07 8D 02 F6 | 	mov	local05, objptr
06be0     44 0F 02 F6 | 	mov	objptr, local03
06be4     2D 8A 62 FD | 	call	local04
06be8     46 0F 02 F6 | 	mov	objptr, local05
06bec     01 30 06 F6 | 	mov	result1, #1
06bf0                 | LR__0336
06bf0     AF F0 03 F6 | 	mov	ptra, fp
06bf4     BF 00 A0 FD | 	call	#popregs_
06bf8                 | __system___basic_print_char_ret
06bf8     2D 00 64 FD | 	ret
06bfc                 | 
06bfc                 | __system___basic_print_string
06bfc     03 5A 05 F6 | 	mov	COUNT_, #3
06c00     B0 00 A0 FD | 	call	#pushregs_
06c04     3C 85 02 F6 | 	mov	local01, arg02
06c08     3D 87 02 F6 | 	mov	local02, arg03
06c0c     94 17 B0 FD | 	call	#__system___gettxfunc
06c10     18 89 0A F6 | 	mov	local03, result1 wz
06c14     00 30 06 A6 |  if_e	mov	result1, #0
06c18     1C 00 90 AD |  if_e	jmp	#LR__0337
06c1c     00 84 0E F2 | 	cmp	local01, #0 wz
06c20     00 30 06 A6 |  if_e	mov	result1, #0
06c24     10 00 90 AD |  if_e	jmp	#LR__0337
06c28     44 77 02 F6 | 	mov	arg01, local03
06c2c     43 79 02 F6 | 	mov	arg02, local02
06c30     42 7B 02 F6 | 	mov	arg03, local01
06c34     B0 00 B0 FD | 	call	#__system___fmtstr
06c38                 | LR__0337
06c38     AF F0 03 F6 | 	mov	ptra, fp
06c3c     BF 00 A0 FD | 	call	#popregs_
06c40                 | __system___basic_print_string_ret
06c40     2D 00 64 FD | 	ret
06c44                 | 
06c44                 | __system___basic_print_integer
06c44     04 5A 05 F6 | 	mov	COUNT_, #4
06c48     B0 00 A0 FD | 	call	#pushregs_
06c4c     3C 85 02 F6 | 	mov	local01, arg02
06c50     3D 87 02 F6 | 	mov	local02, arg03
06c54     3E 89 02 F6 | 	mov	local03, arg04
06c58     48 17 B0 FD | 	call	#__system___gettxfunc
06c5c     18 8B 0A F6 | 	mov	local04, result1 wz
06c60     00 30 06 A6 |  if_e	mov	result1, #0
06c64     14 00 90 AD |  if_e	jmp	#LR__0338
06c68     45 77 02 F6 | 	mov	arg01, local04
06c6c     43 79 02 F6 | 	mov	arg02, local02
06c70     42 7B 02 F6 | 	mov	arg03, local01
06c74     44 7D 02 F6 | 	mov	arg04, local03
06c78     64 01 B0 FD | 	call	#__system___fmtnum
06c7c                 | LR__0338
06c7c     AF F0 03 F6 | 	mov	ptra, fp
06c80     BF 00 A0 FD | 	call	#popregs_
06c84                 | __system___basic_print_integer_ret
06c84     2D 00 64 FD | 	ret
06c88                 | 
06c88                 | __system___fmtchar
06c88     00 5A 05 F6 | 	mov	COUNT_, #0
06c8c     B0 00 A0 FD | 	call	#pushregs_
06c90     14 F0 07 F1 | 	add	ptra, #20
06c94     04 5E 05 F1 | 	add	fp, #4
06c98     AF 76 62 FC | 	wrlong	arg01, fp
06c9c     04 5E 05 F1 | 	add	fp, #4
06ca0     AF 78 62 FC | 	wrlong	arg02, fp
06ca4     04 5E 05 F1 | 	add	fp, #4
06ca8     AF 7A 62 FC | 	wrlong	arg03, fp
06cac     04 5E 05 F1 | 	add	fp, #4
06cb0     AF 7A 42 FC | 	wrbyte	arg03, fp
06cb4     01 5E 05 F1 | 	add	fp, #1
06cb8     AF 00 48 FC | 	wrbyte	#0, fp
06cbc     0D 5E 85 F1 | 	sub	fp, #13
06cc0     AF 76 02 FB | 	rdlong	arg01, fp
06cc4     04 5E 05 F1 | 	add	fp, #4
06cc8     AF 78 02 FB | 	rdlong	arg02, fp
06ccc     08 5E 05 F1 | 	add	fp, #8
06cd0     AF 7A 02 F6 | 	mov	arg03, fp
06cd4     10 5E 85 F1 | 	sub	fp, #16
06cd8     0C 00 B0 FD | 	call	#__system___fmtstr
06cdc     AF F0 03 F6 | 	mov	ptra, fp
06ce0     BF 00 A0 FD | 	call	#popregs_
06ce4                 | __system___fmtchar_ret
06ce4     2D 00 64 FD | 	ret
06ce8                 | 
06ce8                 | __system___fmtstr
06ce8     0E 5A 05 F6 | 	mov	COUNT_, #14
06cec     B0 00 A0 FD | 	call	#pushregs_
06cf0     3B 85 02 F6 | 	mov	local01, arg01
06cf4     3C 87 02 F6 | 	mov	local02, arg02
06cf8     3D 89 02 F6 | 	mov	local03, arg03
06cfc     43 8B 02 F6 | 	mov	local04, local02
06d00     FF 8A 06 F5 | 	and	local04, #255
06d04     44 77 02 F6 | 	mov	arg01, local03
06d08     00 8C 06 F6 | 	mov	local05, #0
06d0c     00 93 9F FE | 	loc	pa,	#(@LR__0340-@LR__0339)
06d10     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d14                 | LR__0339
06d14     3B 8F CA FA | 	rdbyte	local06, arg01 wz
06d18     01 8C 06 51 |  if_ne	add	local05, #1
06d1c     01 76 06 51 |  if_ne	add	arg01, #1
06d20     F0 FF 9F 5D |  if_ne	jmp	#LR__0339
06d24                 | LR__0340
06d24     46 31 02 F6 | 	mov	result1, local05
06d28     18 91 02 F6 | 	mov	local07, result1
06d2c     00 8A 0E F2 | 	cmp	local04, #0 wz
06d30     04 00 90 AD |  if_e	jmp	#LR__0341
06d34     45 91 7A F3 | 	fles	local07, local04 wcz
06d38                 | LR__0341
06d38     42 77 02 F6 | 	mov	arg01, local01
06d3c     43 79 02 F6 | 	mov	arg02, local02
06d40     48 7B 02 F6 | 	mov	arg03, local07
06d44     02 7C 06 F6 | 	mov	arg04, #2
06d48     08 15 B0 FD | 	call	#__system___fmtpad
06d4c     18 93 02 F6 | 	mov	local08, result1
06d50     00 92 5E F2 | 	cmps	local08, #0 wcz
06d54     49 31 02 C6 |  if_b	mov	result1, local08
06d58     78 00 90 CD |  if_b	jmp	#LR__0344
06d5c     00 94 06 F6 | 	mov	local09, #0
06d60                 | LR__0342
06d60     48 95 5A F2 | 	cmps	local09, local07 wcz
06d64     44 00 90 3D |  if_ae	jmp	#LR__0343
06d68     42 97 02 F6 | 	mov	local10, local01
06d6c     4B 99 02 FB | 	rdlong	local11, local10
06d70     04 96 06 F1 | 	add	local10, #4
06d74     4B 9B 02 FB | 	rdlong	local12, local10
06d78     44 77 C2 FA | 	rdbyte	arg01, local03
06d7c     07 9D 02 F6 | 	mov	local13, objptr
06d80     4C 0F 02 F6 | 	mov	objptr, local11
06d84     01 88 06 F1 | 	add	local03, #1
06d88     2D 9A 62 FD | 	call	local12
06d8c     4E 0F 02 F6 | 	mov	objptr, local13
06d90     18 9F 02 F6 | 	mov	local14, result1
06d94     00 9E 5E F2 | 	cmps	local14, #0 wcz
06d98     4F 31 02 C6 |  if_b	mov	result1, local14
06d9c     34 00 90 CD |  if_b	jmp	#LR__0344
06da0     4F 93 02 F1 | 	add	local08, local14
06da4     01 94 06 F1 | 	add	local09, #1
06da8     B4 FF 9F FD | 	jmp	#LR__0342
06dac                 | LR__0343
06dac     42 77 02 F6 | 	mov	arg01, local01
06db0     43 79 02 F6 | 	mov	arg02, local02
06db4     48 7B 02 F6 | 	mov	arg03, local07
06db8     01 7C 06 F6 | 	mov	arg04, #1
06dbc     94 14 B0 FD | 	call	#__system___fmtpad
06dc0     18 9F 02 F6 | 	mov	local14, result1
06dc4     00 9E 5E F2 | 	cmps	local14, #0 wcz
06dc8     4F 31 02 C6 |  if_b	mov	result1, local14
06dcc     4F 93 02 31 |  if_ae	add	local08, local14
06dd0     49 31 02 36 |  if_ae	mov	result1, local08
06dd4                 | LR__0344
06dd4     AF F0 03 F6 | 	mov	ptra, fp
06dd8     BF 00 A0 FD | 	call	#popregs_
06ddc                 | __system___fmtstr_ret
06ddc     2D 00 64 FD | 	ret
06de0                 | 
06de0                 | __system___fmtnum
06de0     07 5A 05 F6 | 	mov	COUNT_, #7
06de4     B0 00 A0 FD | 	call	#pushregs_
06de8     70 F0 07 F1 | 	add	ptra, #112
06dec     04 5E 05 F1 | 	add	fp, #4
06df0     AF 76 62 FC | 	wrlong	arg01, fp
06df4     04 5E 05 F1 | 	add	fp, #4
06df8     AF 78 62 FC | 	wrlong	arg02, fp
06dfc     04 5E 05 F1 | 	add	fp, #4
06e00     AF 7A 62 FC | 	wrlong	arg03, fp
06e04     04 5E 05 F1 | 	add	fp, #4
06e08     AF 7C 62 FC | 	wrlong	arg04, fp
06e0c     04 5E 05 F1 | 	add	fp, #4
06e10     AF 84 02 F6 | 	mov	local01, fp
06e14     44 5E 05 F1 | 	add	fp, #68
06e18     AF 84 62 FC | 	wrlong	local01, fp
06e1c     04 5E 05 F1 | 	add	fp, #4
06e20     AF 00 68 FC | 	wrlong	#0, fp
06e24     54 5E 85 F1 | 	sub	fp, #84
06e28     AF 84 02 FB | 	rdlong	local01, fp
06e2c     10 84 46 F0 | 	shr	local01, #16
06e30     3F 84 06 F5 | 	and	local01, #63
06e34     58 5E 05 F1 | 	add	fp, #88
06e38     AF 84 62 FC | 	wrlong	local01, fp
06e3c     58 5E 85 F1 | 	sub	fp, #88
06e40     AF 84 02 FB | 	rdlong	local01, fp
06e44     FF 84 06 F5 | 	and	local01, #255
06e48     5C 5E 05 F1 | 	add	fp, #92
06e4c     AF 84 62 FC | 	wrlong	local01, fp
06e50     5C 5E 85 F1 | 	sub	fp, #92
06e54     AF 84 02 FB | 	rdlong	local01, fp
06e58     1A 84 46 F0 | 	shr	local01, #26
06e5c     03 84 06 F5 | 	and	local01, #3
06e60     60 5E 05 F1 | 	add	fp, #96
06e64     AF 84 62 FC | 	wrlong	local01, fp
06e68     08 5E 85 F1 | 	sub	fp, #8
06e6c     AF 84 02 FB | 	rdlong	local01, fp
06e70     60 5E 85 F1 | 	sub	fp, #96
06e74     00 84 5E F2 | 	cmps	local01, #0 wcz
06e78     14 00 90 ED |  if_be	jmp	#LR__0345
06e7c     60 5E 05 F1 | 	add	fp, #96
06e80     AF 84 02 FB | 	rdlong	local01, fp
06e84     01 84 86 F1 | 	sub	local01, #1
06e88     AF 84 62 FC | 	wrlong	local01, fp
06e8c     60 5E 85 F1 | 	sub	fp, #96
06e90                 | LR__0345
06e90     64 5E 05 F1 | 	add	fp, #100
06e94     AF 86 02 FB | 	rdlong	local02, fp
06e98     64 5E 85 F1 | 	sub	fp, #100
06e9c     40 86 5E F2 | 	cmps	local02, #64 wcz
06ea0     14 00 90 1D |  if_a	jmp	#LR__0346
06ea4     64 5E 05 F1 | 	add	fp, #100
06ea8     AF 88 02 FB | 	rdlong	local03, fp
06eac     64 5E 85 F1 | 	sub	fp, #100
06eb0     44 8B 0A F6 | 	mov	local04, local03 wz
06eb4     0C 00 90 5D |  if_ne	jmp	#LR__0347
06eb8                 | LR__0346
06eb8     64 5E 05 F1 | 	add	fp, #100
06ebc     AF 80 68 FC | 	wrlong	#64, fp
06ec0     64 5E 85 F1 | 	sub	fp, #100
06ec4                 | LR__0347
06ec4     68 5E 05 F1 | 	add	fp, #104
06ec8     AF 84 02 FB | 	rdlong	local01, fp
06ecc     68 5E 85 F1 | 	sub	fp, #104
06ed0     03 84 0E F2 | 	cmp	local01, #3 wz
06ed4     10 00 90 5D |  if_ne	jmp	#LR__0348
06ed8     68 5E 05 F1 | 	add	fp, #104
06edc     AF 00 68 FC | 	wrlong	#0, fp
06ee0     68 5E 85 F1 | 	sub	fp, #104
06ee4     30 00 90 FD | 	jmp	#LR__0350
06ee8                 | LR__0348
06ee8     0C 5E 05 F1 | 	add	fp, #12
06eec     AF 84 02 FB | 	rdlong	local01, fp
06ef0     0C 5E 85 F1 | 	sub	fp, #12
06ef4     00 84 5E F2 | 	cmps	local01, #0 wcz
06ef8     1C 00 90 3D |  if_ae	jmp	#LR__0349
06efc     68 5E 05 F1 | 	add	fp, #104
06f00     AF 08 68 FC | 	wrlong	#4, fp
06f04     5C 5E 85 F1 | 	sub	fp, #92
06f08     AF 84 02 FB | 	rdlong	local01, fp
06f0c     42 85 62 F6 | 	neg	local01, local01
06f10     AF 84 62 FC | 	wrlong	local01, fp
06f14     0C 5E 85 F1 | 	sub	fp, #12
06f18                 | LR__0349
06f18                 | LR__0350
06f18     68 5E 05 F1 | 	add	fp, #104
06f1c     AF 84 0A FB | 	rdlong	local01, fp wz
06f20     68 5E 85 F1 | 	sub	fp, #104
06f24     EC 00 90 AD |  if_e	jmp	#LR__0357
06f28     5C 5E 05 F1 | 	add	fp, #92
06f2c     AF 8A 02 FB | 	rdlong	local04, fp
06f30     01 8A 06 F1 | 	add	local04, #1
06f34     AF 8A 62 FC | 	wrlong	local04, fp
06f38     04 5E 05 F1 | 	add	fp, #4
06f3c     AF 84 02 FB | 	rdlong	local01, fp
06f40     04 5E 05 F1 | 	add	fp, #4
06f44     AF 8A 02 FB | 	rdlong	local04, fp
06f48     64 5E 85 F1 | 	sub	fp, #100
06f4c     45 85 0A F2 | 	cmp	local01, local04 wz
06f50     3C 00 90 5D |  if_ne	jmp	#LR__0352
06f54     60 5E 05 F1 | 	add	fp, #96
06f58     AF 8A 02 FB | 	rdlong	local04, fp
06f5c     01 8A 86 F1 | 	sub	local04, #1
06f60     AF 8A 62 FC | 	wrlong	local04, fp
06f64     AF 84 0A FB | 	rdlong	local01, fp wz
06f68     60 5E 85 F1 | 	sub	fp, #96
06f6c     20 00 90 5D |  if_ne	jmp	#LR__0351
06f70     04 5E 05 F1 | 	add	fp, #4
06f74     AF 76 02 FB | 	rdlong	arg01, fp
06f78     04 5E 05 F1 | 	add	fp, #4
06f7c     AF 78 02 FB | 	rdlong	arg02, fp
06f80     08 5E 85 F1 | 	sub	fp, #8
06f84     23 7A 06 F6 | 	mov	arg03, #35
06f88     FC FC BF FD | 	call	#__system___fmtchar
06f8c     70 01 90 FD | 	jmp	#LR__0362
06f90                 | LR__0351
06f90                 | LR__0352
06f90     68 5E 05 F1 | 	add	fp, #104
06f94     AF 84 02 FB | 	rdlong	local01, fp
06f98     68 5E 85 F1 | 	sub	fp, #104
06f9c     02 84 0E F2 | 	cmp	local01, #2 wz
06fa0     20 00 90 5D |  if_ne	jmp	#LR__0353
06fa4     58 5E 05 F1 | 	add	fp, #88
06fa8     AF 84 02 FB | 	rdlong	local01, fp
06fac     42 8B 02 F6 | 	mov	local04, local01
06fb0     01 8A 06 F1 | 	add	local04, #1
06fb4     AF 8A 62 FC | 	wrlong	local04, fp
06fb8     58 5E 85 F1 | 	sub	fp, #88
06fbc     42 41 48 FC | 	wrbyte	#32, local01
06fc0     50 00 90 FD | 	jmp	#LR__0356
06fc4                 | LR__0353
06fc4     68 5E 05 F1 | 	add	fp, #104
06fc8     AF 84 02 FB | 	rdlong	local01, fp
06fcc     68 5E 85 F1 | 	sub	fp, #104
06fd0     04 84 0E F2 | 	cmp	local01, #4 wz
06fd4     20 00 90 5D |  if_ne	jmp	#LR__0354
06fd8     58 5E 05 F1 | 	add	fp, #88
06fdc     AF 84 02 FB | 	rdlong	local01, fp
06fe0     42 8B 02 F6 | 	mov	local04, local01
06fe4     01 8A 06 F1 | 	add	local04, #1
06fe8     AF 8A 62 FC | 	wrlong	local04, fp
06fec     58 5E 85 F1 | 	sub	fp, #88
06ff0     42 5B 48 FC | 	wrbyte	#45, local01
06ff4     1C 00 90 FD | 	jmp	#LR__0355
06ff8                 | LR__0354
06ff8     58 5E 05 F1 | 	add	fp, #88
06ffc     AF 84 02 FB | 	rdlong	local01, fp
07000     42 8B 02 F6 | 	mov	local04, local01
07004     01 8A 06 F1 | 	add	local04, #1
07008     AF 8A 62 FC | 	wrlong	local04, fp
0700c     58 5E 85 F1 | 	sub	fp, #88
07010     42 57 48 FC | 	wrbyte	#43, local01
07014                 | LR__0355
07014                 | LR__0356
07014                 | LR__0357
07014     58 5E 05 F1 | 	add	fp, #88
07018     AF 76 02 FB | 	rdlong	arg01, fp
0701c     4C 5E 85 F1 | 	sub	fp, #76
07020     AF 78 02 FB | 	rdlong	arg02, fp
07024     04 5E 05 F1 | 	add	fp, #4
07028     AF 7A 02 FB | 	rdlong	arg03, fp
0702c     50 5E 05 F1 | 	add	fp, #80
07030     AF 7C 02 FB | 	rdlong	arg04, fp
07034     00 8C 06 F6 | 	mov	local05, #0
07038     58 5E 85 F1 | 	sub	fp, #88
0703c     AF 8E 02 FB | 	rdlong	local06, fp
07040     08 5E 85 F1 | 	sub	fp, #8
07044     1D 8E 2E F4 | 	testbn	local06, #29 wz
07048     01 8C 06 56 |  if_ne	mov	local05, #1
0704c     46 7F 02 F6 | 	mov	arg05, local05
07050     C4 12 B0 FD | 	call	#__system___uitoa
07054     18 91 02 F6 | 	mov	local07, result1
07058     5C 5E 05 F1 | 	add	fp, #92
0705c     AF 84 02 FB | 	rdlong	local01, fp
07060     48 85 02 F1 | 	add	local01, local07
07064     AF 84 62 FC | 	wrlong	local01, fp
07068     08 5E 05 F1 | 	add	fp, #8
0706c     AF 8A 02 FB | 	rdlong	local04, fp
07070     64 5E 85 F1 | 	sub	fp, #100
07074     45 85 5A F2 | 	cmps	local01, local04 wcz
07078     64 00 90 ED |  if_be	jmp	#LR__0361
0707c     C0 8F 9F FE | 	loc	pa,	#(@LR__0359-@LR__0358)
07080     93 00 A0 FD | 	call	#FCACHE_LOAD_
07084                 | LR__0358
07084     64 5E 05 F1 | 	add	fp, #100
07088     AF 84 02 FB | 	rdlong	local01, fp
0708c     42 8B 02 F6 | 	mov	local04, local01
07090     01 8A 86 F1 | 	sub	local04, #1
07094     AF 8A 62 FC | 	wrlong	local04, fp
07098     64 5E 85 F1 | 	sub	fp, #100
0709c     00 84 5E F2 | 	cmps	local01, #0 wcz
070a0     20 00 90 ED |  if_be	jmp	#LR__0360
070a4     58 5E 05 F1 | 	add	fp, #88
070a8     AF 84 02 FB | 	rdlong	local01, fp
070ac     42 8B 02 F6 | 	mov	local04, local01
070b0     01 8A 06 F1 | 	add	local04, #1
070b4     AF 8A 62 FC | 	wrlong	local04, fp
070b8     58 5E 85 F1 | 	sub	fp, #88
070bc     42 47 48 FC | 	wrbyte	#35, local01
070c0     C0 FF 9F FD | 	jmp	#LR__0358
070c4                 | LR__0359
070c4                 | LR__0360
070c4     58 5E 05 F1 | 	add	fp, #88
070c8     AF 84 02 FB | 	rdlong	local01, fp
070cc     42 8B 02 F6 | 	mov	local04, local01
070d0     01 8A 06 F1 | 	add	local04, #1
070d4     AF 8A 62 FC | 	wrlong	local04, fp
070d8     58 5E 85 F1 | 	sub	fp, #88
070dc     42 01 48 FC | 	wrbyte	#0, local01
070e0                 | LR__0361
070e0     04 5E 05 F1 | 	add	fp, #4
070e4     AF 76 02 FB | 	rdlong	arg01, fp
070e8     04 5E 05 F1 | 	add	fp, #4
070ec     AF 78 02 FB | 	rdlong	arg02, fp
070f0     0C 5E 05 F1 | 	add	fp, #12
070f4     AF 7A 02 F6 | 	mov	arg03, fp
070f8     14 5E 85 F1 | 	sub	fp, #20
070fc     E8 FB BF FD | 	call	#__system___fmtstr
07100                 | LR__0362
07100     AF F0 03 F6 | 	mov	ptra, fp
07104     BF 00 A0 FD | 	call	#popregs_
07108                 | __system___fmtnum_ret
07108     2D 00 64 FD | 	ret
0710c                 | 
0710c                 | __system__Number_S
0710c     09 5A 05 F6 | 	mov	COUNT_, #9
07110     B0 00 A0 FD | 	call	#pushregs_
07114     3B 85 02 F6 | 	mov	local01, arg01
07118     3C 87 0A F6 | 	mov	local02, arg02 wz
0711c     3D 89 02 F6 | 	mov	local03, arg03
07120     40 00 90 5D |  if_ne	jmp	#LR__0365
07124     01 86 06 F6 | 	mov	local02, #1
07128     44 8B 02 F6 | 	mov	local04, local03
0712c     01 8C 06 F6 | 	mov	local05, #1
07130                 | LR__0363
07130     00 8E 06 F6 | 	mov	local06, #0
07134     42 8B 1A F2 | 	cmp	local04, local01 wcz
07138     01 8E 66 E6 |  if_be	neg	local06, #1
0713c     00 90 06 F6 | 	mov	local07, #0
07140     45 8D 1A F2 | 	cmp	local05, local04 wcz
07144     01 90 66 C6 |  if_b	neg	local07, #1
07148     48 8F CA F7 | 	test	local06, local07 wz
0714c     14 00 90 AD |  if_e	jmp	#LR__0364
07150     45 8D 02 F6 | 	mov	local05, local04
07154     44 8B 02 FD | 	qmul	local04, local03
07158     18 8A 62 FD | 	getqx	local04
0715c     01 86 06 F1 | 	add	local02, #1
07160     CC FF 9F FD | 	jmp	#LR__0363
07164                 | LR__0364
07164                 | LR__0365
07164     20 86 3E F3 | 	fle	local02, #32 wcz
07168     43 77 02 F6 | 	mov	arg01, local02
0716c     02 76 06 F1 | 	add	arg01, #2
07170     F4 03 B0 FD | 	call	#__system___gc_alloc_managed
07174     18 93 02 F6 | 	mov	local08, result1
07178     43 91 02 F6 | 	mov	local07, local02
0717c     49 91 02 F1 | 	add	local07, local08
07180     48 01 48 FC | 	wrbyte	#0, local07
07184     B4 8E 9F FE | 	loc	pa,	#(@LR__0367-@LR__0366)
07188     93 00 A0 FD | 	call	#FCACHE_LOAD_
0718c                 | LR__0366
0718c     00 86 1E F2 | 	cmp	local02, #0 wcz
07190     34 00 90 ED |  if_be	jmp	#LR__0368
07194     01 86 86 F1 | 	sub	local02, #1
07198     42 D9 02 F6 | 	mov	muldiva_, local01
0719c     44 DB 02 F6 | 	mov	muldivb_, local03
071a0     CC 00 A0 FD | 	call	#unsdivide_
071a4     6C 95 02 F6 | 	mov	local09, muldiva_
071a8     6D 85 02 F6 | 	mov	local01, muldivb_
071ac     0A 94 1E F2 | 	cmp	local09, #10 wcz
071b0     30 94 06 C1 |  if_b	add	local09, #48
071b4     37 94 06 31 |  if_ae	add	local09, #55
071b8     43 91 02 F6 | 	mov	local07, local02
071bc     49 91 02 F1 | 	add	local07, local08
071c0     48 95 42 FC | 	wrbyte	local09, local07
071c4     C4 FF 9F FD | 	jmp	#LR__0366
071c8                 | LR__0367
071c8                 | LR__0368
071c8     49 31 02 F6 | 	mov	result1, local08
071cc     AF F0 03 F6 | 	mov	ptra, fp
071d0     BF 00 A0 FD | 	call	#popregs_
071d4                 | __system__Number_S_ret
071d4     2D 00 64 FD | 	ret
071d8                 | 
071d8                 | __system__String_S
071d8     05 5A 05 F6 | 	mov	COUNT_, #5
071dc     B0 00 A0 FD | 	call	#pushregs_
071e0     3B 85 02 F6 | 	mov	local01, arg01
071e4     3C 87 02 F6 | 	mov	local02, arg02
071e8     43 77 02 F6 | 	mov	arg01, local02
071ec     00 88 06 F6 | 	mov	local03, #0
071f0     1C 8E 9F FE | 	loc	pa,	#(@LR__0370-@LR__0369)
071f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
071f8                 | LR__0369
071f8     3B 8B CA FA | 	rdbyte	local04, arg01 wz
071fc     01 88 06 51 |  if_ne	add	local03, #1
07200     01 76 06 51 |  if_ne	add	arg01, #1
07204     F0 FF 9F 5D |  if_ne	jmp	#LR__0369
07208                 | LR__0370
07208     44 31 0A F6 | 	mov	result1, local03 wz
0720c     79 00 00 AF 
07210     F0 31 06 A6 |  if_e	mov	result1, ##@LR__0933
07214     4C 00 90 AD |  if_e	jmp	#LR__0372
07218     00 84 5E F2 | 	cmps	local01, #0 wcz
0721c     79 00 00 EF 
07220     F1 31 06 E6 |  if_be	mov	result1, ##@LR__0934
07224     3C 00 90 ED |  if_be	jmp	#LR__0372
07228     42 77 02 F6 | 	mov	arg01, local01
0722c     02 76 06 F1 | 	add	arg01, #2
07230     34 03 B0 FD | 	call	#__system___gc_alloc_managed
07234     18 8D 0A F6 | 	mov	local05, result1 wz
07238     24 00 90 AD |  if_e	jmp	#LR__0371
0723c     43 79 C2 FA | 	rdbyte	arg02, local02
07240     46 77 02 F6 | 	mov	arg01, local05
07244     42 7B 02 F6 | 	mov	arg03, local01
07248     A0 00 A0 FD | 	call	#\builtin_bytefill_
0724c     01 84 06 F1 | 	add	local01, #1
07250     46 85 02 F1 | 	add	local01, local05
07254     42 01 48 FC | 	wrbyte	#0, local01
07258     46 31 02 F6 | 	mov	result1, local05
0725c     04 00 90 FD | 	jmp	#LR__0372
07260                 | LR__0371
07260     46 31 02 F6 | 	mov	result1, local05
07264                 | LR__0372
07264     AF F0 03 F6 | 	mov	ptra, fp
07268     BF 00 A0 FD | 	call	#popregs_
0726c                 | __system__String_S_ret
0726c     2D 00 64 FD | 	ret
07270                 | 
07270                 | __system___gc_ptrs
07270     04 5A 05 F6 | 	mov	COUNT_, #4
07274     B0 00 A0 FD | 	call	#pushregs_
07278     02 85 02 F6 | 	mov	local01, __heap_ptr
0727c     42 87 02 F6 | 	mov	local02, local01
07280     07 00 00 FF 
07284     F8 87 06 F1 | 	add	local02, ##4088
07288     42 89 0A FB | 	rdlong	local03, local01 wz
0728c     74 00 90 5D |  if_ne	jmp	#LR__0373
07290     43 8B 02 F6 | 	mov	local04, local02
07294     42 8B 82 F1 | 	sub	local04, local01
07298     42 03 58 FC | 	wrword	#1, local01
0729c     42 89 02 F6 | 	mov	local03, local01
072a0     02 88 06 F1 | 	add	local03, #2
072a4     36 00 80 FF 
072a8     44 21 59 FC | 	wrword	##27792, local03
072ac     42 89 02 F6 | 	mov	local03, local01
072b0     04 88 06 F1 | 	add	local03, #4
072b4     44 01 58 FC | 	wrword	#0, local03
072b8     42 89 02 F6 | 	mov	local03, local01
072bc     06 88 06 F1 | 	add	local03, #6
072c0     44 03 58 FC | 	wrword	#1, local03
072c4     10 84 06 F1 | 	add	local01, #16
072c8     45 89 52 F6 | 	abs	local03, local04 wc
072cc     04 88 46 F0 | 	shr	local03, #4
072d0     44 89 62 C6 |  if_b	neg	local03, local03
072d4     42 89 52 FC | 	wrword	local03, local01
072d8     42 89 02 F6 | 	mov	local03, local01
072dc     02 88 06 F1 | 	add	local03, #2
072e0     36 00 80 FF 
072e4     44 1F 59 FC | 	wrword	##27791, local03
072e8     42 89 02 F6 | 	mov	local03, local01
072ec     04 88 06 F1 | 	add	local03, #4
072f0     44 01 58 FC | 	wrword	#0, local03
072f4     42 89 02 F6 | 	mov	local03, local01
072f8     06 88 06 F1 | 	add	local03, #6
072fc     44 01 58 FC | 	wrword	#0, local03
07300     10 84 86 F1 | 	sub	local01, #16
07304                 | LR__0373
07304     43 33 02 F6 | 	mov	result2, local02
07308     42 31 02 F6 | 	mov	result1, local01
0730c     AF F0 03 F6 | 	mov	ptra, fp
07310     BF 00 A0 FD | 	call	#popregs_
07314                 | __system___gc_ptrs_ret
07314     2D 00 64 FD | 	ret
07318                 | 
07318                 | __system___gc_nextBlockPtr
07318     02 5A 05 F6 | 	mov	COUNT_, #2
0731c     B0 00 A0 FD | 	call	#pushregs_
07320     3B 85 02 F6 | 	mov	local01, arg01
07324     42 87 EA FA | 	rdword	local02, local01 wz
07328     10 00 90 5D |  if_ne	jmp	#LR__0374
0732c     79 00 00 FF 
07330     F2 77 06 F6 | 	mov	arg01, ##@LR__0935
07334     FC 01 B0 FD | 	call	#__system___gc_errmsg
07338     0C 00 90 FD | 	jmp	#LR__0375
0733c                 | LR__0374
0733c     42 31 02 F6 | 	mov	result1, local01
07340     04 86 66 F0 | 	shl	local02, #4
07344     43 31 02 F1 | 	add	result1, local02
07348                 | LR__0375
07348     AF F0 03 F6 | 	mov	ptra, fp
0734c     BF 00 A0 FD | 	call	#popregs_
07350                 | __system___gc_nextBlockPtr_ret
07350     2D 00 64 FD | 	ret
07354                 | 
07354                 | __system___gc_tryalloc
07354     0E 5A 05 F6 | 	mov	COUNT_, #14
07358     B0 00 A0 FD | 	call	#pushregs_
0735c     3B 85 02 F6 | 	mov	local01, arg01
07360     3C 87 02 F6 | 	mov	local02, arg02
07364     08 FF BF FD | 	call	#__system___gc_ptrs
07368     18 89 02 F6 | 	mov	local03, result1
0736c     19 8B 02 F6 | 	mov	local04, result2
07370     44 8D 02 F6 | 	mov	local05, local03
07374     00 8E 06 F6 | 	mov	local06, #0
07378     D8 8C 9F FE | 	loc	pa,	#(@LR__0377-@LR__0376)
0737c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07380                 | LR__0376
07380     46 91 02 F6 | 	mov	local07, local05
07384     44 93 02 F6 | 	mov	local08, local03
07388     46 95 02 F6 | 	mov	local09, local05
0738c     06 94 06 F1 | 	add	local09, #6
07390     4A 97 E2 FA | 	rdword	local10, local09
07394     49 77 02 F6 | 	mov	arg01, local08
07398     4B 79 0A F6 | 	mov	arg02, local10 wz
0739c     00 30 06 A6 |  if_e	mov	result1, #0
073a0     04 78 66 50 |  if_ne	shl	arg02, #4
073a4     3C 77 02 51 |  if_ne	add	arg01, arg02
073a8     3B 31 02 56 |  if_ne	mov	result1, arg01
073ac     18 99 02 F6 | 	mov	local11, result1
073b0     4C 8D 0A F6 | 	mov	local05, local11 wz
073b4     46 93 02 56 |  if_ne	mov	local08, local05
073b8     49 8F E2 5A |  if_ne	rdword	local06, local08
073bc     00 8C 0E F2 | 	cmp	local05, #0 wz
073c0     10 00 90 AD |  if_e	jmp	#LR__0378
073c4     45 8D 5A F2 | 	cmps	local05, local04 wcz
073c8     08 00 90 3D |  if_ae	jmp	#LR__0378
073cc     47 85 5A F2 | 	cmps	local01, local06 wcz
073d0     AC FF 9F 1D |  if_a	jmp	#LR__0376
073d4                 | LR__0377
073d4                 | LR__0378
073d4     00 8C 0E F2 | 	cmp	local05, #0 wz
073d8     46 31 02 A6 |  if_e	mov	result1, local05
073dc     48 01 90 AD |  if_e	jmp	#LR__0381
073e0     46 93 02 F6 | 	mov	local08, local05
073e4     06 92 06 F1 | 	add	local08, #6
073e8     49 9B E2 FA | 	rdword	local12, local08
073ec     47 85 5A F2 | 	cmps	local01, local06 wcz
073f0     C8 00 90 3D |  if_ae	jmp	#LR__0380
073f4     46 85 52 FC | 	wrword	local01, local05
073f8     46 77 02 F6 | 	mov	arg01, local05
073fc     42 95 02 F6 | 	mov	local09, local01
07400     04 94 66 F0 | 	shl	local09, #4
07404     4A 77 02 F1 | 	add	arg01, local09
07408     47 93 02 F6 | 	mov	local08, local06
0740c     42 93 82 F1 | 	sub	local08, local01
07410     3B 93 52 FC | 	wrword	local08, arg01
07414     3B 93 02 F6 | 	mov	local08, arg01
07418     02 92 06 F1 | 	add	local08, #2
0741c     36 00 80 FF 
07420     49 1F 59 FC | 	wrword	##27791, local08
07424     46 79 0A F6 | 	mov	arg02, local05 wz
07428     00 30 06 A6 |  if_e	mov	result1, #0
0742c     44 79 82 51 |  if_ne	sub	arg02, local03
07430     04 78 46 50 |  if_ne	shr	arg02, #4
07434     3C 31 02 56 |  if_ne	mov	result1, arg02
07438     3B 99 02 F6 | 	mov	local11, arg01
0743c     04 98 06 F1 | 	add	local11, #4
07440     4C 31 52 FC | 	wrword	result1, local11
07444     46 93 02 F6 | 	mov	local08, local05
07448     06 92 06 F1 | 	add	local08, #6
0744c     3B 95 02 F6 | 	mov	local09, arg01
07450     49 97 E2 FA | 	rdword	local10, local08
07454     06 94 06 F1 | 	add	local09, #6
07458     4A 97 52 FC | 	wrword	local10, local09
0745c     3B 9D 02 F6 | 	mov	local13, arg01
07460     4E 79 0A F6 | 	mov	arg02, local13 wz
07464     00 30 06 A6 |  if_e	mov	result1, #0
07468     44 79 82 51 |  if_ne	sub	arg02, local03
0746c     04 78 46 50 |  if_ne	shr	arg02, #4
07470     3C 31 02 56 |  if_ne	mov	result1, arg02
07474     18 9B 02 F6 | 	mov	local12, result1
07478     9C FE BF FD | 	call	#__system___gc_nextBlockPtr
0747c     18 9F 0A F6 | 	mov	local14, result1 wz
07480     38 00 90 AD |  if_e	jmp	#LR__0379
07484     45 9F 5A F2 | 	cmps	local14, local04 wcz
07488     30 00 90 3D |  if_ae	jmp	#LR__0379
0748c     44 93 02 F6 | 	mov	local08, local03
07490     4E 95 02 F6 | 	mov	local09, local13
07494     49 77 02 F6 | 	mov	arg01, local08
07498     4A 79 0A F6 | 	mov	arg02, local09 wz
0749c     00 30 06 A6 |  if_e	mov	result1, #0
074a0     3B 79 82 51 |  if_ne	sub	arg02, arg01
074a4     04 78 46 50 |  if_ne	shr	arg02, #4
074a8     3C 31 02 56 |  if_ne	mov	result1, arg02
074ac     18 97 02 F6 | 	mov	local10, result1
074b0     4F 99 02 F6 | 	mov	local11, local14
074b4     04 98 06 F1 | 	add	local11, #4
074b8     4C 97 52 FC | 	wrword	local10, local11
074bc                 | LR__0379
074bc                 | LR__0380
074bc     06 90 06 F1 | 	add	local07, #6
074c0     48 9B 52 FC | 	wrword	local12, local07
074c4     36 00 00 FF 
074c8     80 92 06 F6 | 	mov	local08, ##27776
074cc     43 93 42 F5 | 	or	local08, local02
074d0     01 30 62 FD | 	cogid	result1
074d4     18 93 42 F5 | 	or	local08, result1
074d8     46 97 02 F6 | 	mov	local10, local05
074dc     02 96 06 F1 | 	add	local10, #2
074e0     4B 93 52 FC | 	wrword	local08, local10
074e4     44 93 02 F6 | 	mov	local08, local03
074e8     08 92 06 F1 | 	add	local08, #8
074ec     46 95 02 F6 | 	mov	local09, local05
074f0     49 97 E2 FA | 	rdword	local10, local08
074f4     06 94 06 F1 | 	add	local09, #6
074f8     4A 97 52 FC | 	wrword	local10, local09
074fc     46 79 0A F6 | 	mov	arg02, local05 wz
07500     00 30 06 A6 |  if_e	mov	result1, #0
07504     44 79 82 51 |  if_ne	sub	arg02, local03
07508     04 78 46 50 |  if_ne	shr	arg02, #4
0750c     3C 31 02 56 |  if_ne	mov	result1, arg02
07510     08 88 06 F1 | 	add	local03, #8
07514     44 31 52 FC | 	wrword	result1, local03
07518     46 31 02 F6 | 	mov	result1, local05
0751c     08 30 06 F1 | 	add	result1, #8
07520     00 C0 31 FF 
07524     00 30 46 F5 | 	or	result1, ##1669332992
07528                 | LR__0381
07528     AF F0 03 F6 | 	mov	ptra, fp
0752c     BF 00 A0 FD | 	call	#popregs_
07530                 | __system___gc_tryalloc_ret
07530     2D 00 64 FD | 	ret
07534                 | 
07534                 | __system___gc_errmsg
07534     02 5A 05 F6 | 	mov	COUNT_, #2
07538     B0 00 A0 FD | 	call	#pushregs_
0753c     3B 85 02 F6 | 	mov	local01, arg01
07540                 | LR__0382
07540     42 87 CA FA | 	rdbyte	local02, local01 wz
07544     01 84 06 F1 | 	add	local01, #1
07548     0C 00 90 AD |  if_e	jmp	#LR__0383
0754c     43 77 02 F6 | 	mov	arg01, local02
07550     58 F0 BF FD | 	call	#__system___tx
07554     E8 FF 9F FD | 	jmp	#LR__0382
07558                 | LR__0383
07558     00 30 06 F6 | 	mov	result1, #0
0755c     AF F0 03 F6 | 	mov	ptra, fp
07560     BF 00 A0 FD | 	call	#popregs_
07564                 | __system___gc_errmsg_ret
07564     2D 00 64 FD | 	ret
07568                 | 
07568                 | __system___gc_alloc_managed
07568     02 5A 05 F6 | 	mov	COUNT_, #2
0756c     B0 00 A0 FD | 	call	#pushregs_
07570     3B 85 02 F6 | 	mov	local01, arg01
07574     00 78 06 F6 | 	mov	arg02, #0
07578     30 00 B0 FD | 	call	#__system___gc_doalloc
0757c     18 87 0A F6 | 	mov	local02, result1 wz
07580     18 00 90 5D |  if_ne	jmp	#LR__0384
07584     00 84 5E F2 | 	cmps	local01, #0 wcz
07588     10 00 90 ED |  if_be	jmp	#LR__0384
0758c     7A 00 00 FF 
07590     0E 76 06 F6 | 	mov	arg01, ##@LR__0936
07594     9C FF BF FD | 	call	#__system___gc_errmsg
07598     04 00 90 FD | 	jmp	#LR__0385
0759c                 | LR__0384
0759c     43 31 02 F6 | 	mov	result1, local02
075a0                 | LR__0385
075a0     AF F0 03 F6 | 	mov	ptra, fp
075a4     BF 00 A0 FD | 	call	#popregs_
075a8                 | __system___gc_alloc_managed_ret
075a8     2D 00 64 FD | 	ret
075ac                 | 
075ac                 | __system___gc_doalloc
075ac     06 5A 05 F6 | 	mov	COUNT_, #6
075b0     B0 00 A0 FD | 	call	#pushregs_
075b4     3B 85 0A F6 | 	mov	local01, arg01 wz
075b8     3C 87 02 F6 | 	mov	local02, arg02
075bc     00 30 06 A6 |  if_e	mov	result1, #0
075c0     94 00 90 AD |  if_e	jmp	#LR__0393
075c4     17 84 06 F1 | 	add	local01, #23
075c8     0F 84 26 F5 | 	andn	local01, #15
075cc     04 84 46 F0 | 	shr	local01, #4
075d0     14 14 06 F1 | 	add	ptr___system__dat__, #20
075d4     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
075d8     14 14 86 F1 | 	sub	ptr___system__dat__, #20
075dc     E8 EE BF FD | 	call	#__system___lockmem
075e0     42 77 02 F6 | 	mov	arg01, local01
075e4     43 79 02 F6 | 	mov	arg02, local02
075e8     68 FD BF FD | 	call	#__system___gc_tryalloc
075ec     18 89 0A F6 | 	mov	local03, result1 wz
075f0     14 00 90 5D |  if_ne	jmp	#LR__0386
075f4     8C 03 B0 FD | 	call	#__system___gc_docollect
075f8     42 77 02 F6 | 	mov	arg01, local01
075fc     43 79 02 F6 | 	mov	arg02, local02
07600     50 FD BF FD | 	call	#__system___gc_tryalloc
07604     18 89 02 F6 | 	mov	local03, result1
07608                 | LR__0386
07608     14 14 06 F1 | 	add	ptr___system__dat__, #20
0760c     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
07610     14 14 86 F1 | 	sub	ptr___system__dat__, #20
07614     3B 01 68 FC | 	wrlong	#0, arg01
07618     00 88 0E F2 | 	cmp	local03, #0 wz
0761c     34 00 90 AD |  if_e	jmp	#LR__0392
07620     04 84 66 F0 | 	shl	local01, #4
07624     08 84 86 F1 | 	sub	local01, #8
07628     42 8B 52 F6 | 	abs	local04, local01 wc
0762c     02 8A 46 F0 | 	shr	local04, #2
07630     45 8B 62 C6 |  if_b	neg	local04, local04
07634     45 8D 0A F6 | 	mov	local05, local04 wz
07638     44 8F 02 F6 | 	mov	local06, local03
0763c     14 00 90 AD |  if_e	jmp	#LR__0391
07640     C8 89 9F FE | 	loc	pa,	#(@LR__0389-@LR__0387)
07644     93 00 A0 FD | 	call	#FCACHE_LOAD_
07648                 | LR__0387
07648     46 05 D8 FC | 	rep	@LR__0390, local05
0764c                 | LR__0388
0764c     47 01 68 FC | 	wrlong	#0, local06
07650     04 8E 06 F1 | 	add	local06, #4
07654                 | LR__0389
07654                 | LR__0390
07654                 | LR__0391
07654                 | LR__0392
07654     44 31 02 F6 | 	mov	result1, local03
07658                 | LR__0393
07658     AF F0 03 F6 | 	mov	ptra, fp
0765c     BF 00 A0 FD | 	call	#popregs_
07660                 | __system___gc_doalloc_ret
07660     2D 00 64 FD | 	ret
07664                 | 
07664                 | __system___gc_isvalidptr
07664     3D 37 02 F6 | 	mov	_var01, arg03
07668     1B 39 02 F6 | 	mov	_var02, _var01
0766c     00 F8 7F FF 
07670     00 38 06 F5 | 	and	_var02, ##-1048576
07674     00 C0 31 FF 
07678     00 38 0E F2 | 	cmp	_var02, ##1669332992 wz
0767c     00 30 06 56 |  if_ne	mov	result1, #0
07680     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
07684     08 36 86 F1 | 	sub	_var01, #8
07688     00 F8 7F FF 
0768c     00 36 26 F5 | 	andn	_var01, ##-1048576
07690     3B 37 5A F2 | 	cmps	_var01, arg01 wcz
07694     08 00 90 CD |  if_b	jmp	#LR__0394
07698     3C 37 5A F2 | 	cmps	_var01, arg02 wcz
0769c     08 00 90 CD |  if_b	jmp	#LR__0395
076a0                 | LR__0394
076a0     00 30 06 F6 | 	mov	result1, #0
076a4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
076a8                 | LR__0395
076a8     1B 39 02 F6 | 	mov	_var02, _var01
076ac     3B 39 62 F5 | 	xor	_var02, arg01
076b0     0F 38 0E F5 | 	and	_var02, #15 wz
076b4     00 30 06 56 |  if_ne	mov	result1, #0
076b8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
076bc     1B 39 02 F6 | 	mov	_var02, _var01
076c0     02 38 06 F1 | 	add	_var02, #2
076c4     1C 39 E2 FA | 	rdword	_var02, _var02
076c8     7F 00 00 FF 
076cc     C0 39 06 F5 | 	and	_var02, ##65472
076d0     36 00 00 FF 
076d4     80 38 0E F2 | 	cmp	_var02, ##27776 wz
076d8     00 30 06 56 |  if_ne	mov	result1, #0
076dc     1B 31 02 A6 |  if_e	mov	result1, _var01
076e0                 | __system___gc_isvalidptr_ret
076e0     2D 00 64 FD | 	ret
076e4                 | 
076e4                 | __system___gc_free
076e4     01 5A 05 F6 | 	mov	COUNT_, #1
076e8     B0 00 A0 FD | 	call	#pushregs_
076ec     3B 85 02 F6 | 	mov	local01, arg01
076f0     7C FB BF FD | 	call	#__system___gc_ptrs
076f4     18 77 02 F6 | 	mov	arg01, result1
076f8     19 79 02 F6 | 	mov	arg02, result2
076fc     42 7B 02 F6 | 	mov	arg03, local01
07700     60 FF BF FD | 	call	#__system___gc_isvalidptr
07704     18 85 0A F6 | 	mov	local01, result1 wz
07708     28 00 90 AD |  if_e	jmp	#LR__0396
0770c     14 14 06 F1 | 	add	ptr___system__dat__, #20
07710     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
07714     14 14 86 F1 | 	sub	ptr___system__dat__, #20
07718     AC ED BF FD | 	call	#__system___lockmem
0771c     42 77 02 F6 | 	mov	arg01, local01
07720     1C 00 B0 FD | 	call	#__system___gc_dofree
07724     14 14 06 F1 | 	add	ptr___system__dat__, #20
07728     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
0772c     14 14 86 F1 | 	sub	ptr___system__dat__, #20
07730     3B 01 68 FC | 	wrlong	#0, arg01
07734                 | LR__0396
07734     AF F0 03 F6 | 	mov	ptra, fp
07738     BF 00 A0 FD | 	call	#popregs_
0773c                 | __system___gc_free_ret
0773c     2D 00 64 FD | 	ret
07740                 | 
07740                 | __system___gc_dofree
07740     0D 5A 05 F6 | 	mov	COUNT_, #13
07744     B0 00 A0 FD | 	call	#pushregs_
07748     3B 85 02 F6 | 	mov	local01, arg01
0774c     20 FB BF FD | 	call	#__system___gc_ptrs
07750     18 87 02 F6 | 	mov	local02, result1
07754     19 89 02 F6 | 	mov	local03, result2
07758     42 8B 02 F6 | 	mov	local04, local01
0775c     02 8A 06 F1 | 	add	local04, #2
07760     36 00 80 FF 
07764     45 1F 59 FC | 	wrword	##27791, local04
07768     42 8D 02 F6 | 	mov	local05, local01
0776c     42 77 02 F6 | 	mov	arg01, local01
07770     A4 FB BF FD | 	call	#__system___gc_nextBlockPtr
07774     18 8F 02 F6 | 	mov	local06, result1
07778     D0 88 9F FE | 	loc	pa,	#(@LR__0398-@LR__0397)
0777c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07780                 | LR__0397
07780     04 8C 06 F1 | 	add	local05, #4
07784     46 79 EA FA | 	rdword	arg02, local05 wz
07788     43 77 02 F6 | 	mov	arg01, local02
0778c     00 30 06 A6 |  if_e	mov	result1, #0
07790     04 78 66 50 |  if_ne	shl	arg02, #4
07794     3C 77 02 51 |  if_ne	add	arg01, arg02
07798     3B 31 02 56 |  if_ne	mov	result1, arg01
0779c     18 8D 0A F6 | 	mov	local05, result1 wz
077a0     28 00 90 AD |  if_e	jmp	#LR__0399
077a4     46 77 02 F6 | 	mov	arg01, local05
077a8     00 90 06 F6 | 	mov	local07, #0
077ac     02 76 06 F1 | 	add	arg01, #2
077b0     3B 93 E2 FA | 	rdword	local08, arg01
077b4     36 00 00 FF 
077b8     8F 92 0E F2 | 	cmp	local08, ##27791 wz
077bc     01 90 66 A6 |  if_e	neg	local07, #1
077c0     48 31 02 F6 | 	mov	result1, local07
077c4     18 95 0A F6 | 	mov	local09, result1 wz
077c8     B4 FF 9F AD |  if_e	jmp	#LR__0397
077cc                 | LR__0398
077cc                 | LR__0399
077cc     00 8C 0E F2 | 	cmp	local05, #0 wz
077d0     43 8D 02 A6 |  if_e	mov	local05, local02
077d4     46 8B 02 F6 | 	mov	local04, local05
077d8     06 8A 06 F1 | 	add	local04, #6
077dc     42 95 02 F6 | 	mov	local09, local01
077e0     45 97 E2 FA | 	rdword	local10, local04
077e4     06 94 06 F1 | 	add	local09, #6
077e8     4A 97 52 FC | 	wrword	local10, local09
077ec     42 79 0A F6 | 	mov	arg02, local01 wz
077f0     00 30 06 A6 |  if_e	mov	result1, #0
077f4     43 79 82 51 |  if_ne	sub	arg02, local02
077f8     04 78 46 50 |  if_ne	shr	arg02, #4
077fc     3C 31 02 56 |  if_ne	mov	result1, arg02
07800     18 97 02 F6 | 	mov	local10, result1
07804     46 99 02 F6 | 	mov	local11, local05
07808     06 98 06 F1 | 	add	local11, #6
0780c     4C 97 52 FC | 	wrword	local10, local11
07810     43 8D 0A F2 | 	cmp	local05, local02 wz
07814     84 00 90 AD |  if_e	jmp	#LR__0402
07818     46 77 02 F6 | 	mov	arg01, local05
0781c     F8 FA BF FD | 	call	#__system___gc_nextBlockPtr
07820     42 31 0A F2 | 	cmp	result1, local01 wz
07824     74 00 90 5D |  if_ne	jmp	#LR__0401
07828     46 8B E2 FA | 	rdword	local04, local05
0782c     42 99 E2 FA | 	rdword	local11, local01
07830     4C 8B 02 F1 | 	add	local04, local11
07834     46 8B 52 FC | 	wrword	local04, local05
07838     42 8B 02 F6 | 	mov	local04, local01
0783c     02 8A 06 F1 | 	add	local04, #2
07840     45 01 58 FC | 	wrword	#0, local04
07844     42 77 02 F6 | 	mov	arg01, local01
07848     CC FA BF FD | 	call	#__system___gc_nextBlockPtr
0784c     18 8F 02 F6 | 	mov	local06, result1
07850     44 8F 5A F2 | 	cmps	local06, local03 wcz
07854     20 00 90 3D |  if_ae	jmp	#LR__0400
07858     46 79 0A F6 | 	mov	arg02, local05 wz
0785c     00 30 06 A6 |  if_e	mov	result1, #0
07860     43 79 82 51 |  if_ne	sub	arg02, local02
07864     04 78 46 50 |  if_ne	shr	arg02, #4
07868     3C 31 02 56 |  if_ne	mov	result1, arg02
0786c     47 99 02 F6 | 	mov	local11, local06
07870     04 98 06 F1 | 	add	local11, #4
07874     4C 31 52 FC | 	wrword	result1, local11
07878                 | LR__0400
07878     42 8B 02 F6 | 	mov	local04, local01
0787c     06 8A 06 F1 | 	add	local04, #6
07880     46 95 02 F6 | 	mov	local09, local05
07884     45 97 E2 FA | 	rdword	local10, local04
07888     06 94 06 F1 | 	add	local09, #6
0788c     4A 97 52 FC | 	wrword	local10, local09
07890     06 84 06 F1 | 	add	local01, #6
07894     42 01 58 FC | 	wrword	#0, local01
07898     46 85 02 F6 | 	mov	local01, local05
0789c                 | LR__0401
0789c                 | LR__0402
0789c     42 77 02 F6 | 	mov	arg01, local01
078a0     74 FA BF FD | 	call	#__system___gc_nextBlockPtr
078a4     18 9B 0A F6 | 	mov	local12, result1 wz
078a8     C8 00 90 AD |  if_e	jmp	#LR__0404
078ac     44 9B 5A F2 | 	cmps	local12, local03 wcz
078b0     C0 00 90 3D |  if_ae	jmp	#LR__0404
078b4     4D 77 02 F6 | 	mov	arg01, local12
078b8     00 90 06 F6 | 	mov	local07, #0
078bc     02 76 06 F1 | 	add	arg01, #2
078c0     3B 93 E2 FA | 	rdword	local08, arg01
078c4     36 00 00 FF 
078c8     8F 92 0E F2 | 	cmp	local08, ##27791 wz
078cc     01 90 66 A6 |  if_e	neg	local07, #1
078d0     48 31 0A F6 | 	mov	result1, local07 wz
078d4     9C 00 90 AD |  if_e	jmp	#LR__0404
078d8     42 8D 02 F6 | 	mov	local05, local01
078dc     46 8B E2 FA | 	rdword	local04, local05
078e0     4D 85 02 F6 | 	mov	local01, local12
078e4     42 99 E2 FA | 	rdword	local11, local01
078e8     4C 8B 02 F1 | 	add	local04, local11
078ec     46 9D 02 F6 | 	mov	local13, local05
078f0     4E 8B 52 FC | 	wrword	local04, local13
078f4     42 8B 02 F6 | 	mov	local04, local01
078f8     06 8A 06 F1 | 	add	local04, #6
078fc     46 95 02 F6 | 	mov	local09, local05
07900     45 97 E2 FA | 	rdword	local10, local04
07904     06 94 06 F1 | 	add	local09, #6
07908     4A 97 52 FC | 	wrword	local10, local09
0790c     42 8B 02 F6 | 	mov	local04, local01
07910     02 8A 06 F1 | 	add	local04, #2
07914     45 55 59 FC | 	wrword	#170, local04
07918     42 8B 02 F6 | 	mov	local04, local01
0791c     06 8A 06 F1 | 	add	local04, #6
07920     45 01 58 FC | 	wrword	#0, local04
07924     42 8B 02 F6 | 	mov	local04, local01
07928     45 77 02 F6 | 	mov	arg01, local04
0792c     E8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07930     18 95 02 F6 | 	mov	local09, result1
07934     4A 8F 0A F6 | 	mov	local06, local09 wz
07938     38 00 90 AD |  if_e	jmp	#LR__0403
0793c     44 8F 5A F2 | 	cmps	local06, local03 wcz
07940     30 00 90 3D |  if_ae	jmp	#LR__0403
07944     43 8B 02 F6 | 	mov	local04, local02
07948     46 95 02 F6 | 	mov	local09, local05
0794c     45 77 02 F6 | 	mov	arg01, local04
07950     4A 79 0A F6 | 	mov	arg02, local09 wz
07954     00 30 06 A6 |  if_e	mov	result1, #0
07958     3B 79 82 51 |  if_ne	sub	arg02, arg01
0795c     04 78 46 50 |  if_ne	shr	arg02, #4
07960     3C 31 02 56 |  if_ne	mov	result1, arg02
07964     18 97 02 F6 | 	mov	local10, result1
07968     47 99 02 F6 | 	mov	local11, local06
0796c     04 98 06 F1 | 	add	local11, #4
07970     4C 97 52 FC | 	wrword	local10, local11
07974                 | LR__0403
07974                 | LR__0404
07974     47 31 02 F6 | 	mov	result1, local06
07978     AF F0 03 F6 | 	mov	ptra, fp
0797c     BF 00 A0 FD | 	call	#popregs_
07980                 | __system___gc_dofree_ret
07980     2D 00 64 FD | 	ret
07984                 | 
07984                 | __system___gc_docollect
07984     09 5A 05 F6 | 	mov	COUNT_, #9
07988     B0 00 A0 FD | 	call	#pushregs_
0798c     E0 F8 BF FD | 	call	#__system___gc_ptrs
07990     19 85 02 F6 | 	mov	local01, result2
07994     18 87 02 F6 | 	mov	local02, result1
07998     43 77 02 F6 | 	mov	arg01, local02
0799c     78 F9 BF FD | 	call	#__system___gc_nextBlockPtr
079a0     18 89 0A F6 | 	mov	local03, result1 wz
079a4     01 30 62 FD | 	cogid	result1
079a8     18 8B 02 F6 | 	mov	local04, result1
079ac     34 00 90 AD |  if_e	jmp	#LR__0406
079b0                 | LR__0405
079b0     42 89 5A F2 | 	cmps	local03, local01 wcz
079b4     2C 00 90 3D |  if_ae	jmp	#LR__0406
079b8     44 8D 02 F6 | 	mov	local05, local03
079bc     02 8C 06 F1 | 	add	local05, #2
079c0     46 8F E2 FA | 	rdword	local06, local05
079c4     20 8E 26 F5 | 	andn	local06, #32
079c8     44 91 02 F6 | 	mov	local07, local03
079cc     02 90 06 F1 | 	add	local07, #2
079d0     48 8F 52 FC | 	wrword	local06, local07
079d4     44 77 02 F6 | 	mov	arg01, local03
079d8     3C F9 BF FD | 	call	#__system___gc_nextBlockPtr
079dc     18 89 0A F6 | 	mov	local03, result1 wz
079e0     CC FF 9F 5D |  if_ne	jmp	#LR__0405
079e4                 | LR__0406
079e4     00 8E 06 F6 | 	mov	local06, #0
079e8     00 76 06 F6 | 	mov	arg01, #0
079ec     70 EA BF FD | 	call	#__system____topofstack
079f0     18 91 02 F6 | 	mov	local07, result1
079f4     47 77 02 F6 | 	mov	arg01, local06
079f8     48 79 02 F6 | 	mov	arg02, local07
079fc     A0 00 B0 FD | 	call	#__system___gc_markhub
07a00     34 01 B0 FD | 	call	#__system___gc_markcog
07a04     43 77 02 F6 | 	mov	arg01, local02
07a08     0C F9 BF FD | 	call	#__system___gc_nextBlockPtr
07a0c     18 93 0A F6 | 	mov	local08, result1 wz
07a10     10 00 90 5D |  if_ne	jmp	#LR__0407
07a14     7A 00 00 FF 
07a18     2B 76 06 F6 | 	mov	arg01, ##@LR__0937
07a1c     14 FB BF FD | 	call	#__system___gc_errmsg
07a20     70 00 90 FD | 	jmp	#LR__0413
07a24                 | LR__0407
07a24                 | LR__0408
07a24     49 89 02 F6 | 	mov	local03, local08
07a28     44 77 02 F6 | 	mov	arg01, local03
07a2c     E8 F8 BF FD | 	call	#__system___gc_nextBlockPtr
07a30     18 93 02 F6 | 	mov	local08, result1
07a34     44 8F 02 F6 | 	mov	local06, local03
07a38     02 8E 06 F1 | 	add	local06, #2
07a3c     47 95 E2 FA | 	rdword	local09, local06
07a40     20 94 CE F7 | 	test	local09, #32 wz
07a44     3C 00 90 5D |  if_ne	jmp	#LR__0411
07a48     4A 8D 02 F6 | 	mov	local05, local09
07a4c     10 8C 0E F5 | 	and	local05, #16 wz
07a50     30 00 90 5D |  if_ne	jmp	#LR__0411
07a54     4A 8F 02 F6 | 	mov	local06, local09
07a58     0F 8E 06 F5 | 	and	local06, #15
07a5c     47 95 02 F6 | 	mov	local09, local06
07a60     45 95 0A F2 | 	cmp	local09, local04 wz
07a64     08 00 90 AD |  if_e	jmp	#LR__0409
07a68     0E 94 0E F2 | 	cmp	local09, #14 wz
07a6c     14 00 90 5D |  if_ne	jmp	#LR__0410
07a70                 | LR__0409
07a70     44 8F 02 F6 | 	mov	local06, local03
07a74     47 77 02 F6 | 	mov	arg01, local06
07a78     C4 FC BF FD | 	call	#__system___gc_dofree
07a7c     18 8D 02 F6 | 	mov	local05, result1
07a80     46 93 02 F6 | 	mov	local08, local05
07a84                 | LR__0410
07a84                 | LR__0411
07a84     00 92 0E F2 | 	cmp	local08, #0 wz
07a88     08 00 90 AD |  if_e	jmp	#LR__0412
07a8c     42 93 5A F2 | 	cmps	local08, local01 wcz
07a90     90 FF 9F CD |  if_b	jmp	#LR__0408
07a94                 | LR__0412
07a94                 | LR__0413
07a94     AF F0 03 F6 | 	mov	ptra, fp
07a98     BF 00 A0 FD | 	call	#popregs_
07a9c                 | __system___gc_docollect_ret
07a9c     2D 00 64 FD | 	ret
07aa0                 | 
07aa0                 | __system___gc_markhub
07aa0     0A 5A 05 F6 | 	mov	COUNT_, #10
07aa4     B0 00 A0 FD | 	call	#pushregs_
07aa8     3B 85 02 F6 | 	mov	local01, arg01
07aac     3C 87 02 F6 | 	mov	local02, arg02
07ab0     BC F7 BF FD | 	call	#__system___gc_ptrs
07ab4     18 89 02 F6 | 	mov	local03, result1
07ab8     19 8B 02 F6 | 	mov	local04, result2
07abc                 | LR__0414
07abc     43 85 5A F2 | 	cmps	local01, local02 wcz
07ac0     68 00 90 3D |  if_ae	jmp	#LR__0415
07ac4     42 7B 02 FB | 	rdlong	arg03, local01
07ac8     04 84 06 F1 | 	add	local01, #4
07acc     44 77 02 F6 | 	mov	arg01, local03
07ad0     45 79 02 F6 | 	mov	arg02, local04
07ad4     8C FB BF FD | 	call	#__system___gc_isvalidptr
07ad8     18 8D 0A F6 | 	mov	local05, result1 wz
07adc     DC FF 9F AD |  if_e	jmp	#LR__0414
07ae0     46 77 02 F6 | 	mov	arg01, local05
07ae4     00 8E 06 F6 | 	mov	local06, #0
07ae8     02 76 06 F1 | 	add	arg01, #2
07aec     3B 91 E2 FA | 	rdword	local07, arg01
07af0     36 00 00 FF 
07af4     8F 90 0E F2 | 	cmp	local07, ##27791 wz
07af8     01 8E 66 A6 |  if_e	neg	local06, #1
07afc     47 31 02 F6 | 	mov	result1, local06
07b00     18 93 0A F6 | 	mov	local08, result1 wz
07b04     B4 FF 9F 5D |  if_ne	jmp	#LR__0414
07b08     46 95 02 F6 | 	mov	local09, local05
07b0c     02 94 06 F1 | 	add	local09, #2
07b10     4A 97 E2 FA | 	rdword	local10, local09
07b14     0F 96 26 F5 | 	andn	local10, #15
07b18     2E 96 46 F5 | 	or	local10, #46
07b1c     46 95 02 F6 | 	mov	local09, local05
07b20     02 94 06 F1 | 	add	local09, #2
07b24     4A 97 52 FC | 	wrword	local10, local09
07b28     90 FF 9F FD | 	jmp	#LR__0414
07b2c                 | LR__0415
07b2c     AF F0 03 F6 | 	mov	ptra, fp
07b30     BF 00 A0 FD | 	call	#popregs_
07b34                 | __system___gc_markhub_ret
07b34     2D 00 64 FD | 	ret
07b38                 | 
07b38                 | __system___gc_markcog
07b38     06 5A 05 F6 | 	mov	COUNT_, #6
07b3c     B0 00 A0 FD | 	call	#pushregs_
07b40     2C F7 BF FD | 	call	#__system___gc_ptrs
07b44     18 85 02 F6 | 	mov	local01, result1
07b48     19 87 02 F6 | 	mov	local02, result2
07b4c     00 88 06 F6 | 	mov	local03, #0
07b50                 | LR__0416
07b50     F0 8B 06 F6 | 	mov	local04, #496
07b54     44 8B 82 F1 | 	sub	local04, local03
07b58     F0 8B 06 F1 | 	add	local04, #496
07b5c                 | 	'.live	local04
07b5c     00 8A 96 F9 | 	alts	local04, #0
07b60     45 8D 02 F6 | 	mov	local05, local04
07b64     42 77 02 F6 | 	mov	arg01, local01
07b68     43 79 02 F6 | 	mov	arg02, local02
07b6c     46 7B 02 F6 | 	mov	arg03, local05
07b70     F0 FA BF FD | 	call	#__system___gc_isvalidptr
07b74     18 8D 0A F6 | 	mov	local05, result1 wz
07b78     18 00 90 AD |  if_e	jmp	#LR__0417
07b7c     46 8F 02 F6 | 	mov	local06, local05
07b80     02 8E 06 F1 | 	add	local06, #2
07b84     47 8B E2 FA | 	rdword	local04, local06
07b88     20 8A 46 F5 | 	or	local04, #32
07b8c     02 8C 06 F1 | 	add	local05, #2
07b90     46 8B 52 FC | 	wrword	local04, local05
07b94                 | LR__0417
07b94     01 88 06 F1 | 	add	local03, #1
07b98     F0 89 5E F2 | 	cmps	local03, #496 wcz
07b9c     B0 FF 9F CD |  if_b	jmp	#LR__0416
07ba0     AF F0 03 F6 | 	mov	ptra, fp
07ba4     BF 00 A0 FD | 	call	#popregs_
07ba8                 | __system___gc_markcog_ret
07ba8     2D 00 64 FD | 	ret
07bac                 | 
07bac                 | __system___closeraw
07bac     06 5A 05 F6 | 	mov	COUNT_, #6
07bb0     B0 00 A0 FD | 	call	#pushregs_
07bb4     3B 85 02 F6 | 	mov	local01, arg01
07bb8     00 86 06 F6 | 	mov	local02, #0
07bbc     08 84 06 F1 | 	add	local01, #8
07bc0     42 89 0A FB | 	rdlong	local03, local01 wz
07bc4     08 84 86 F1 | 	sub	local01, #8
07bc8     1C 00 90 5D |  if_ne	jmp	#LR__0418
07bcc     01 00 00 FF 
07bd0     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07bd4     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07bd8     01 00 00 FF 
07bdc     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07be0     01 30 66 F6 | 	neg	result1, #1
07be4     90 00 90 FD | 	jmp	#LR__0421
07be8                 | LR__0418
07be8     28 84 06 F1 | 	add	local01, #40
07bec     42 89 0A FB | 	rdlong	local03, local01 wz
07bf0     28 84 86 F1 | 	sub	local01, #40
07bf4     2C 00 90 AD |  if_e	jmp	#LR__0419
07bf8     28 84 06 F1 | 	add	local01, #40
07bfc     42 89 02 FB | 	rdlong	local03, local01
07c00     28 84 86 F1 | 	sub	local01, #40
07c04     44 8B 02 FB | 	rdlong	local04, local03
07c08     04 88 06 F1 | 	add	local03, #4
07c0c     44 8D 02 FB | 	rdlong	local05, local03
07c10     42 77 02 F6 | 	mov	arg01, local01
07c14     07 8F 02 F6 | 	mov	local06, objptr
07c18     45 0F 02 F6 | 	mov	objptr, local04
07c1c     2D 8C 62 FD | 	call	local05
07c20     47 0F 02 F6 | 	mov	objptr, local06
07c24                 | LR__0419
07c24     20 84 06 F1 | 	add	local01, #32
07c28     42 89 0A FB | 	rdlong	local03, local01 wz
07c2c     20 84 86 F1 | 	sub	local01, #32
07c30     30 00 90 AD |  if_e	jmp	#LR__0420
07c34     20 84 06 F1 | 	add	local01, #32
07c38     42 89 02 FB | 	rdlong	local03, local01
07c3c     20 84 86 F1 | 	sub	local01, #32
07c40     44 8B 02 FB | 	rdlong	local04, local03
07c44     04 88 06 F1 | 	add	local03, #4
07c48     44 8D 02 FB | 	rdlong	local05, local03
07c4c     42 77 02 F6 | 	mov	arg01, local01
07c50     07 8F 02 F6 | 	mov	local06, objptr
07c54     45 0F 02 F6 | 	mov	objptr, local04
07c58     2D 8C 62 FD | 	call	local05
07c5c     47 0F 02 F6 | 	mov	objptr, local06
07c60     18 87 02 F6 | 	mov	local02, result1
07c64                 | LR__0420
07c64     42 77 02 F6 | 	mov	arg01, local01
07c68     00 78 06 F6 | 	mov	arg02, #0
07c6c     30 7A 06 F6 | 	mov	arg03, #48
07c70     A0 00 A0 FD | 	call	#\builtin_bytefill_
07c74     43 31 02 F6 | 	mov	result1, local02
07c78                 | LR__0421
07c78     AF F0 03 F6 | 	mov	ptra, fp
07c7c     BF 00 A0 FD | 	call	#popregs_
07c80                 | __system___closeraw_ret
07c80     2D 00 64 FD | 	ret
07c84                 | 
07c84                 | __system___vfs_open_sdcardx
07c84     06 5A 05 F6 | 	mov	COUNT_, #6
07c88     B0 00 A0 FD | 	call	#pushregs_
07c8c     01 00 00 FF 
07c90     44 14 06 F1 | 	add	ptr___system__dat__, ##580
07c94     3B 85 02 F6 | 	mov	local01, arg01
07c98     3C 87 02 F6 | 	mov	local02, arg02
07c9c     3D 89 02 F6 | 	mov	local03, arg03
07ca0     3E 7F 02 F6 | 	mov	arg05, arg04
07ca4     00 76 06 F6 | 	mov	arg01, #0
07ca8     42 79 02 F6 | 	mov	arg02, local01
07cac     43 7B 02 F6 | 	mov	arg03, local02
07cb0     44 7D 02 F6 | 	mov	arg04, local03
07cb4     07 8B 02 F6 | 	mov	local04, objptr
07cb8     0A 0F 02 F6 | 	mov	objptr, ptr___system__dat__
07cbc     01 00 00 FF 
07cc0     44 14 86 F1 | 	sub	ptr___system__dat__, ##580
07cc4     EC 0F B0 FD | 	call	#_ff_cc_disk_setpins
07cc8     45 0F 02 F6 | 	mov	objptr, local04
07ccc     18 8D 0A F6 | 	mov	local05, result1 wz
07cd0     38 00 90 5D |  if_ne	jmp	#LR__0422
07cd4     01 00 00 FF 
07cd8     44 14 06 F1 | 	add	ptr___system__dat__, ##580
07cdc     0A 8F 02 F6 | 	mov	local06, ptr___system__dat__
07ce0     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
07ce4     01 00 00 FF 
07ce8     44 14 86 F1 | 	sub	ptr___system__dat__, ##580
07cec     7A 00 00 FF 
07cf0     44 78 06 F6 | 	mov	arg02, ##@LR__0938
07cf4     00 7A 06 F6 | 	mov	arg03, #0
07cf8     07 8B 02 F6 | 	mov	local04, objptr
07cfc     47 0F 02 F6 | 	mov	objptr, local06
07d00     E4 34 B0 FD | 	call	#_ff_cc_f_mount
07d04     45 0F 02 F6 | 	mov	objptr, local04
07d08     18 8D 02 F6 | 	mov	local05, result1
07d0c                 | LR__0422
07d0c     00 8C 0E F2 | 	cmp	local05, #0 wz
07d10     20 00 90 AD |  if_e	jmp	#LR__0423
07d14     46 77 6A F6 | 	neg	arg01, local05 wz
07d18     01 00 00 FF 
07d1c     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07d20     0A 77 62 FC | 	wrlong	arg01, ptr___system__dat__
07d24     01 00 00 FF 
07d28     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07d2c     00 30 06 F6 | 	mov	result1, #0
07d30     0C 00 90 FD | 	jmp	#LR__0424
07d34                 | LR__0423
07d34                 | ' get_vfs()
07d34                 | ' {
07d34                 | '     return &fat_vfs;
07d34     B4 1A 06 F1 | 	add	ptr__ff_cc_dat__, #180
07d38     0D 31 02 F6 | 	mov	result1, ptr__ff_cc_dat__
07d3c     B4 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #180
07d40                 | LR__0424
07d40     AF F0 03 F6 | 	mov	ptra, fp
07d44     BF 00 A0 FD | 	call	#popregs_
07d48                 | __system___vfs_open_sdcardx_ret
07d48     2D 00 64 FD | 	ret
07d4c                 | 
07d4c                 | __system____default_getc
07d4c                 | __system____default_getc_ret
07d4c     2D 00 64 FD | 	ret
07d50                 | 
07d50                 | __system____default_putc
07d50                 | __system____default_putc_ret
07d50     2D 00 64 FD | 	ret
07d54                 | 
07d54                 | __system____default_putc_terminal
07d54                 | __system____default_putc_terminal_ret
07d54     2D 00 64 FD | 	ret
07d58                 | 
07d58                 | __system____default_flush
07d58                 | __system____default_flush_ret
07d58     2D 00 64 FD | 	ret
07d5c                 | 
07d5c                 | __system__stat
07d5c     09 5A 05 F6 | 	mov	COUNT_, #9
07d60     B0 00 A0 FD | 	call	#pushregs_
07d64     3B 85 02 F6 | 	mov	local01, arg01
07d68     3C 87 02 F6 | 	mov	local02, arg02
07d6c     38 15 06 F1 | 	add	ptr___system__dat__, #312
07d70     0A 31 02 F6 | 	mov	result1, ptr___system__dat__
07d74     38 15 86 F1 | 	sub	ptr___system__dat__, #312
07d78     18 89 02 F6 | 	mov	local03, result1
07d7c     44 77 02 F6 | 	mov	arg01, local03
07d80     42 79 02 F6 | 	mov	arg02, local01
07d84     00 7A 06 F6 | 	mov	arg03, #0
07d88     54 EB BF FD | 	call	#__system____getvfsforfile
07d8c     18 8B 0A F6 | 	mov	local04, result1 wz
07d90     14 00 90 AD |  if_e	jmp	#LR__0425
07d94     2C 8A 06 F1 | 	add	local04, #44
07d98     45 8D 02 FB | 	rdlong	local05, local04
07d9c     2C 8A 86 F1 | 	sub	local04, #44
07da0     46 8F 0A F6 | 	mov	local06, local05 wz
07da4     1C 00 90 5D |  if_ne	jmp	#LR__0426
07da8                 | LR__0425
07da8     01 00 00 FF 
07dac     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07db0     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
07db4     01 00 00 FF 
07db8     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07dbc     01 30 66 F6 | 	neg	result1, #1
07dc0     44 00 90 FD | 	jmp	#LR__0427
07dc4                 | LR__0426
07dc4     43 77 02 F6 | 	mov	arg01, local02
07dc8     00 78 06 F6 | 	mov	arg02, #0
07dcc     30 7A 06 F6 | 	mov	arg03, #48
07dd0     3B 91 02 F6 | 	mov	local07, arg01
07dd4     A0 00 A0 FD | 	call	#\builtin_bytefill_
07dd8     48 31 02 F6 | 	mov	result1, local07
07ddc     2C 8A 06 F1 | 	add	local04, #44
07de0     45 8F 02 FB | 	rdlong	local06, local04
07de4     47 8D 02 FB | 	rdlong	local05, local06
07de8     04 8E 06 F1 | 	add	local06, #4
07dec     47 93 02 FB | 	rdlong	local08, local06
07df0     44 77 02 F6 | 	mov	arg01, local03
07df4     43 79 02 F6 | 	mov	arg02, local02
07df8     07 95 02 F6 | 	mov	local09, objptr
07dfc     46 0F 02 F6 | 	mov	objptr, local05
07e00     2D 92 62 FD | 	call	local08
07e04     4A 0F 02 F6 | 	mov	objptr, local09
07e08                 | LR__0427
07e08     AF F0 03 F6 | 	mov	ptra, fp
07e0c     BF 00 A0 FD | 	call	#popregs_
07e10                 | __system__stat_ret
07e10     2D 00 64 FD | 	ret
07e14                 | 
07e14                 | __system__close
07e14     01 5A 05 F6 | 	mov	COUNT_, #1
07e18     B0 00 A0 FD | 	call	#pushregs_
07e1c     3B 85 02 F6 | 	mov	local01, arg01
07e20     0A 84 1E F2 | 	cmp	local01, #10 wcz
07e24     1C 00 90 CD |  if_b	jmp	#LR__0428
07e28     01 00 00 FF 
07e2c     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07e30     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07e34     01 00 00 FF 
07e38     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07e3c     01 30 66 F6 | 	neg	result1, #1
07e40     28 00 90 FD | 	jmp	#LR__0429
07e44                 | LR__0428
07e44     42 77 02 F6 | 	mov	arg01, local01
07e48     01 76 66 F0 | 	shl	arg01, #1
07e4c     42 77 02 F1 | 	add	arg01, local01
07e50     04 76 66 F0 | 	shl	arg01, #4
07e54     02 00 00 FF 
07e58     74 14 06 F1 | 	add	ptr___system__dat__, ##1140
07e5c     0A 77 02 F1 | 	add	arg01, ptr___system__dat__
07e60     02 00 00 FF 
07e64     74 14 86 F1 | 	sub	ptr___system__dat__, ##1140
07e68     40 FD BF FD | 	call	#__system___closeraw
07e6c                 | LR__0429
07e6c     AF F0 03 F6 | 	mov	ptra, fp
07e70     BF 00 A0 FD | 	call	#popregs_
07e74                 | __system__close_ret
07e74     2D 00 64 FD | 	ret
07e78                 | 
07e78                 | __system__getcwd
07e78     06 5A 05 F6 | 	mov	COUNT_, #6
07e7c     B0 00 A0 FD | 	call	#pushregs_
07e80     3B 85 02 F6 | 	mov	local01, arg01
07e84     3C 87 02 F6 | 	mov	local02, arg02
07e88     38 14 06 F1 | 	add	ptr___system__dat__, #56
07e8c     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
07e90     38 14 86 F1 | 	sub	ptr___system__dat__, #56
07e94     00 88 06 F6 | 	mov	local03, #0
07e98     74 81 9F FE | 	loc	pa,	#(@LR__0431-@LR__0430)
07e9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07ea0                 | LR__0430
07ea0     3B 8B CA FA | 	rdbyte	local04, arg01 wz
07ea4     01 88 06 51 |  if_ne	add	local03, #1
07ea8     01 76 06 51 |  if_ne	add	arg01, #1
07eac     F0 FF 9F 5D |  if_ne	jmp	#LR__0430
07eb0                 | LR__0431
07eb0     44 31 02 F6 | 	mov	result1, local03
07eb4     02 8C 06 F6 | 	mov	local05, #2
07eb8     18 8D 02 F1 | 	add	local05, result1
07ebc     43 8D 1A F2 | 	cmp	local05, local02 wcz
07ec0     1C 00 90 ED |  if_be	jmp	#LR__0432
07ec4     01 00 00 FF 
07ec8     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07ecc     0A 05 68 FC | 	wrlong	#2, ptr___system__dat__
07ed0     01 00 00 FF 
07ed4     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07ed8     00 30 06 F6 | 	mov	result1, #0
07edc     44 00 90 FD | 	jmp	#LR__0435
07ee0                 | LR__0432
07ee0     38 14 06 F1 | 	add	ptr___system__dat__, #56
07ee4     0A 8F C2 FA | 	rdbyte	local06, ptr___system__dat__
07ee8     38 14 86 F1 | 	sub	ptr___system__dat__, #56
07eec     07 8E 46 F7 | 	zerox	local06, #7
07ef0     2F 8E 0E F2 | 	cmp	local06, #47 wz
07ef4     18 00 90 5D |  if_ne	jmp	#LR__0433
07ef8     38 14 06 F1 | 	add	ptr___system__dat__, #56
07efc     0A 79 02 F6 | 	mov	arg02, ptr___system__dat__
07f00     38 14 86 F1 | 	sub	ptr___system__dat__, #56
07f04     42 77 02 F6 | 	mov	arg01, local01
07f08     2C E5 BF FD | 	call	#__system____builtin_strcpy
07f0c     10 00 90 FD | 	jmp	#LR__0434
07f10                 | LR__0433
07f10     7A 00 00 FF 
07f14     46 78 06 F6 | 	mov	arg02, ##@LR__0939
07f18     42 77 02 F6 | 	mov	arg01, local01
07f1c     18 E5 BF FD | 	call	#__system____builtin_strcpy
07f20                 | LR__0434
07f20     42 31 02 F6 | 	mov	result1, local01
07f24                 | LR__0435
07f24     AF F0 03 F6 | 	mov	ptra, fp
07f28     BF 00 A0 FD | 	call	#popregs_
07f2c                 | __system__getcwd_ret
07f2c     2D 00 64 FD | 	ret
07f30                 | 
07f30                 | __system__chdir
07f30     02 5A 05 F6 | 	mov	COUNT_, #2
07f34     B0 00 A0 FD | 	call	#pushregs_
07f38     40 F0 07 F1 | 	add	ptra, #64
07f3c     04 5E 05 F1 | 	add	fp, #4
07f40     AF 76 62 FC | 	wrlong	arg01, fp
07f44     04 5E 05 F1 | 	add	fp, #4
07f48     AF 78 02 F6 | 	mov	arg02, fp
07f4c     08 5E 85 F1 | 	sub	fp, #8
07f50     08 FE BF FD | 	call	#__system__stat
07f54     3C 5E 05 F1 | 	add	fp, #60
07f58     AF 30 62 FC | 	wrlong	result1, fp
07f5c     AF 84 0A FB | 	rdlong	local01, fp wz
07f60     3C 5E 85 F1 | 	sub	fp, #60
07f64     10 00 90 AD |  if_e	jmp	#LR__0436
07f68     3C 5E 05 F1 | 	add	fp, #60
07f6c     AF 30 02 FB | 	rdlong	result1, fp
07f70     3C 5E 85 F1 | 	sub	fp, #60
07f74     CC 00 90 FD | 	jmp	#LR__0440
07f78                 | LR__0436
07f78     10 5E 05 F1 | 	add	fp, #16
07f7c     AF 84 02 FB | 	rdlong	local01, fp
07f80     10 5E 85 F1 | 	sub	fp, #16
07f84     78 00 00 FF 
07f88     00 84 06 F5 | 	and	local01, ##61440
07f8c     08 00 00 FF 
07f90     00 84 0E F2 | 	cmp	local01, ##4096 wz
07f94     1C 00 90 AD |  if_e	jmp	#LR__0437
07f98     01 00 00 FF 
07f9c     40 14 06 F1 | 	add	ptr___system__dat__, ##576
07fa0     0A 1B 68 FC | 	wrlong	#13, ptr___system__dat__
07fa4     01 00 00 FF 
07fa8     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
07fac     01 30 66 F6 | 	neg	result1, #1
07fb0     90 00 90 FD | 	jmp	#LR__0440
07fb4                 | LR__0437
07fb4     04 5E 05 F1 | 	add	fp, #4
07fb8     AF 86 02 FB | 	rdlong	local02, fp
07fbc     04 5E 85 F1 | 	sub	fp, #4
07fc0     43 85 C2 FA | 	rdbyte	local01, local02
07fc4     2F 84 0E F2 | 	cmp	local01, #47 wz
07fc8     24 00 90 5D |  if_ne	jmp	#LR__0438
07fcc     38 14 06 F1 | 	add	ptr___system__dat__, #56
07fd0     0A 77 02 F6 | 	mov	arg01, ptr___system__dat__
07fd4     38 14 86 F1 | 	sub	ptr___system__dat__, #56
07fd8     04 5E 05 F1 | 	add	fp, #4
07fdc     AF 78 02 FB | 	rdlong	arg02, fp
07fe0     04 5E 85 F1 | 	sub	fp, #4
07fe4     00 7B 06 F6 | 	mov	arg03, #256
07fe8     98 00 B0 FD | 	call	#__system__strncpy
07fec     50 00 90 FD | 	jmp	#LR__0439
07ff0                 | LR__0438
07ff0     38 15 06 F1 | 	add	ptr___system__dat__, #312
07ff4     0A 31 02 F6 | 	mov	result1, ptr___system__dat__
07ff8     38 5E 05 F1 | 	add	fp, #56
07ffc     AF 30 62 FC | 	wrlong	result1, fp
08000     18 77 02 F6 | 	mov	arg01, result1
08004     38 5E 85 F1 | 	sub	fp, #56
08008     00 15 86 F1 | 	sub	ptr___system__dat__, #256
0800c     0A 79 02 F6 | 	mov	arg02, ptr___system__dat__
08010     38 14 86 F1 | 	sub	ptr___system__dat__, #56
08014     00 7B 06 F6 | 	mov	arg03, #256
08018     68 00 B0 FD | 	call	#__system__strncpy
0801c     38 5E 05 F1 | 	add	fp, #56
08020     AF 76 02 FB | 	rdlong	arg01, fp
08024     34 5E 85 F1 | 	sub	fp, #52
08028     AF 78 02 FB | 	rdlong	arg02, fp
0802c     04 5E 85 F1 | 	sub	fp, #4
08030     38 14 06 F1 | 	add	ptr___system__dat__, #56
08034     0A 7B 02 F6 | 	mov	arg03, ptr___system__dat__
08038     38 14 86 F1 | 	sub	ptr___system__dat__, #56
0803c     A0 E8 BF FD | 	call	#__system____getvfsforfile
08040                 | LR__0439
08040     00 30 06 F6 | 	mov	result1, #0
08044                 | LR__0440
08044     AF F0 03 F6 | 	mov	ptra, fp
08048     BF 00 A0 FD | 	call	#popregs_
0804c                 | __system__chdir_ret
0804c     2D 00 64 FD | 	ret
08050                 | 
08050                 | __system____getftab
08050     0A 76 1E F2 | 	cmp	arg01, #10 wcz
08054     00 30 06 36 |  if_ae	mov	result1, #0
08058     24 00 90 3D |  if_ae	jmp	#__system____getftab_ret
0805c     3B 31 02 F6 | 	mov	result1, arg01
08060     01 30 66 F0 | 	shl	result1, #1
08064     3B 31 02 F1 | 	add	result1, arg01
08068     04 30 66 F0 | 	shl	result1, #4
0806c     02 00 00 FF 
08070     74 14 06 F1 | 	add	ptr___system__dat__, ##1140
08074     0A 31 02 F1 | 	add	result1, ptr___system__dat__
08078     02 00 00 FF 
0807c     74 14 86 F1 | 	sub	ptr___system__dat__, ##1140
08080                 | __system____getftab_ret
08080     2D 00 64 FD | 	ret
08084                 | 
08084                 | __system__strncpy
08084     3B 37 02 F6 | 	mov	_var01, arg01
08088                 | LR__0441
08088     01 7A 86 F1 | 	sub	arg03, #1
0808c     00 7A 5E F2 | 	cmps	arg03, #0 wcz
08090     18 00 90 CD |  if_b	jmp	#LR__0442
08094     3C 39 C2 FA | 	rdbyte	_var02, arg02
08098     1B 39 42 FC | 	wrbyte	_var02, _var01
0809c     01 78 06 F1 | 	add	arg02, #1
080a0     1B 3B CA FA | 	rdbyte	_var03, _var01 wz
080a4     01 36 06 F1 | 	add	_var01, #1
080a8     DC FF 9F 5D |  if_ne	jmp	#LR__0441
080ac                 | LR__0442
080ac     64 7F 9F FE | 	loc	pa,	#(@LR__0444-@LR__0443)
080b0     93 00 A0 FD | 	call	#FCACHE_LOAD_
080b4                 | LR__0443
080b4     01 7A 86 F1 | 	sub	arg03, #1
080b8     00 7A 5E F2 | 	cmps	arg03, #0 wcz
080bc     1B 01 48 3C |  if_ae	wrbyte	#0, _var01
080c0     01 36 06 31 |  if_ae	add	_var01, #1
080c4     EC FF 9F 3D |  if_ae	jmp	#LR__0443
080c8                 | LR__0444
080c8     3B 31 02 F6 | 	mov	result1, arg01
080cc                 | __system__strncpy_ret
080cc     2D 00 64 FD | 	ret
080d0                 | 
080d0                 | __system__strncat
080d0     3B 37 02 F6 | 	mov	_var01, arg01
080d4     3C 39 02 F6 | 	mov	_var02, arg02
080d8     3D 3B 02 F6 | 	mov	_var03, arg03
080dc     1C 3D 0A F6 | 	mov	_var04, _var02 wz
080e0     68 00 90 AD |  if_e	jmp	#LR__0449
080e4     00 3A 1E F2 | 	cmp	_var03, #0 wcz
080e8     60 00 90 ED |  if_be	jmp	#LR__0449
080ec     1B 3F 02 F6 | 	mov	_var05, _var01
080f0     58 7F 9F FE | 	loc	pa,	#(@LR__0447-@LR__0445)
080f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
080f8                 | LR__0445
080f8     1F 41 CA FA | 	rdbyte	_var06, _var05 wz
080fc     01 3E 06 51 |  if_ne	add	_var05, #1
08100     F4 FF 9F 5D |  if_ne	jmp	#LR__0445
08104     1D 43 02 F6 | 	mov	_var07, _var03
08108                 | LR__0446
08108     1E 45 02 F6 | 	mov	_var08, _var04
0810c     1E 47 02 F6 | 	mov	_var09, _var04
08110     01 46 06 F1 | 	add	_var09, #1
08114     23 3D 02 F6 | 	mov	_var04, _var09
08118     22 49 C2 FA | 	rdbyte	_var10, _var08
0811c     24 41 02 F6 | 	mov	_var06, _var10
08120     07 40 4E F7 | 	zerox	_var06, #7 wz
08124     1C 00 90 AD |  if_e	jmp	#LR__0448
08128     21 4B 02 F6 | 	mov	_var11, _var07
0812c     01 4A 86 F1 | 	sub	_var11, #1
08130     25 43 02 F6 | 	mov	_var07, _var11
08134     00 42 5E F2 | 	cmps	_var07, #0 wcz
08138     1F 49 42 3C |  if_ae	wrbyte	_var10, _var05
0813c     01 3E 06 31 |  if_ae	add	_var05, #1
08140     C4 FF 9F 3D |  if_ae	jmp	#LR__0446
08144                 | LR__0447
08144                 | LR__0448
08144     00 40 06 F6 | 	mov	_var06, #0
08148     1F 01 48 FC | 	wrbyte	#0, _var05
0814c                 | LR__0449
0814c     1B 31 02 F6 | 	mov	result1, _var01
08150                 | __system__strncat_ret
08150     2D 00 64 FD | 	ret
08154                 | 
08154                 | __system__strncmp
08154     3B 37 0A F6 | 	mov	_var01, arg01 wz
08158     3C 39 02 F6 | 	mov	_var02, arg02
0815c     3D 3B 02 F6 | 	mov	_var03, arg03
08160     14 00 90 5D |  if_ne	jmp	#LR__0450
08164     00 38 0E F2 | 	cmp	_var02, #0 wz
08168     01 3C 66 56 |  if_ne	neg	_var04, #1
0816c     00 3C 06 A6 |  if_e	mov	_var04, #0
08170     1E 31 02 F6 | 	mov	result1, _var04
08174     8C 00 90 FD | 	jmp	#__system__strncmp_ret
08178                 | LR__0450
08178     00 38 0E F2 | 	cmp	_var02, #0 wz
0817c     01 30 06 A6 |  if_e	mov	result1, #1
08180     80 00 90 AD |  if_e	jmp	#__system__strncmp_ret
08184     1D 3F 02 F6 | 	mov	_var05, _var03
08188     B4 7E 9F FE | 	loc	pa,	#(@LR__0452-@LR__0451)
0818c     93 00 A0 FD | 	call	#FCACHE_LOAD_
08190                 | LR__0451
08190     1B 41 C2 FA | 	rdbyte	_var06, _var01
08194     1C 43 02 F6 | 	mov	_var07, _var02
08198     1C 45 02 F6 | 	mov	_var08, _var02
0819c     01 44 06 F1 | 	add	_var08, #1
081a0     22 39 02 F6 | 	mov	_var02, _var08
081a4     21 47 C2 FA | 	rdbyte	_var09, _var07
081a8     1F 3D 02 F6 | 	mov	_var04, _var05
081ac     01 3C 86 F1 | 	sub	_var04, #1
081b0     1E 3F 02 F6 | 	mov	_var05, _var04
081b4     00 3E 5E F2 | 	cmps	_var05, #0 wcz
081b8     01 36 06 F1 | 	add	_var01, #1
081bc     10 00 90 CD |  if_b	jmp	#LR__0453
081c0     00 40 0E F2 | 	cmp	_var06, #0 wz
081c4     08 00 90 AD |  if_e	jmp	#LR__0453
081c8     23 41 0A F2 | 	cmp	_var06, _var09 wz
081cc     C0 FF 9F AD |  if_e	jmp	#LR__0451
081d0                 | LR__0452
081d0                 | LR__0453
081d0     00 3E 5E F2 | 	cmps	_var05, #0 wcz
081d4     00 30 06 C6 |  if_b	mov	result1, #0
081d8     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
081dc     23 41 0A F2 | 	cmp	_var06, _var09 wz
081e0     00 30 06 A6 |  if_e	mov	result1, #0
081e4     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
081e8     00 40 0E F2 | 	cmp	_var06, #0 wz
081ec     01 30 66 A6 |  if_e	neg	result1, #1
081f0     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
081f4     00 46 0E F2 | 	cmp	_var09, #0 wz
081f8     01 30 06 A6 |  if_e	mov	result1, #1
081fc     20 31 02 56 |  if_ne	mov	result1, _var06
08200     23 31 82 51 |  if_ne	sub	result1, _var09
08204                 | __system__strncmp_ret
08204     2D 00 64 FD | 	ret
08208                 | 
08208                 | __system___strrev
08208     3B 37 CA FA | 	rdbyte	_var01, arg01 wz
0820c     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
08210     3B 39 02 F6 | 	mov	_var02, arg01
08214     F4 7D 9F FE | 	loc	pa,	#(@LR__0455-@LR__0454)
08218     93 00 A0 FD | 	call	#FCACHE_LOAD_
0821c                 | LR__0454
0821c     1C 37 CA FA | 	rdbyte	_var01, _var02 wz
08220     01 38 06 51 |  if_ne	add	_var02, #1
08224     F4 FF 9F 5D |  if_ne	jmp	#LR__0454
08228                 | LR__0455
08228     01 38 86 F1 | 	sub	_var02, #1
0822c                 | LR__0456
0822c     3B 39 5A F2 | 	cmps	_var02, arg01 wcz
08230     1C 00 90 ED |  if_be	jmp	#LR__0457
08234     3B 3B C2 FA | 	rdbyte	_var03, arg01
08238     1C 3D C2 FA | 	rdbyte	_var04, _var02
0823c     3B 3D 42 FC | 	wrbyte	_var04, arg01
08240     1C 3B 42 FC | 	wrbyte	_var03, _var02
08244     01 76 06 F1 | 	add	arg01, #1
08248     01 38 86 F1 | 	sub	_var02, #1
0824c     DC FF 9F FD | 	jmp	#LR__0456
08250                 | LR__0457
08250                 | __system___strrev_ret
08250     2D 00 64 FD | 	ret
08254                 | 
08254                 | __system___fmtpad
08254     0C 5A 05 F6 | 	mov	COUNT_, #12
08258     B0 00 A0 FD | 	call	#pushregs_
0825c     3B 85 02 F6 | 	mov	local01, arg01
08260     3C 87 02 F6 | 	mov	local02, arg02
08264     3E 89 02 F6 | 	mov	local03, arg04
08268     43 8B EA F8 | 	getbyte	local04, local02, #1
0826c     16 86 46 F0 | 	shr	local02, #22
08270     03 86 0E F5 | 	and	local02, #3 wz
08274     00 8C 06 F6 | 	mov	local05, #0
08278     01 86 06 A6 |  if_e	mov	local02, #1
0827c     44 87 CA F7 | 	test	local02, local03 wz
08280     00 30 06 A6 |  if_e	mov	result1, #0
08284     84 00 90 AD |  if_e	jmp	#LR__0461
08288     3D 8B 82 F1 | 	sub	local04, arg03
0828c     45 8F 02 F6 | 	mov	local06, local04
08290     00 8E 5E F2 | 	cmps	local06, #0 wcz
08294     00 30 06 E6 |  if_be	mov	result1, #0
08298     70 00 90 ED |  if_be	jmp	#LR__0461
0829c     03 86 0E F2 | 	cmp	local02, #3 wz
082a0     18 00 90 5D |  if_ne	jmp	#LR__0458
082a4     01 88 0E F2 | 	cmp	local03, #1 wz
082a8     6E 90 62 FD | 	wrz	local07
082ac     48 8F 02 F1 | 	add	local06, local07
082b0     47 8F 52 F6 | 	abs	local06, local06 wc
082b4     01 8E 46 F0 | 	shr	local06, #1
082b8     47 8F 62 C6 |  if_b	neg	local06, local06
082bc                 | LR__0458
082bc     00 92 06 F6 | 	mov	local08, #0
082c0                 | LR__0459
082c0     47 93 5A F2 | 	cmps	local08, local06 wcz
082c4     40 00 90 3D |  if_ae	jmp	#LR__0460
082c8     42 95 02 F6 | 	mov	local09, local01
082cc     4A 91 02 FB | 	rdlong	local07, local09
082d0     04 94 06 F1 | 	add	local09, #4
082d4     4A 97 02 FB | 	rdlong	local10, local09
082d8     20 76 06 F6 | 	mov	arg01, #32
082dc     07 99 02 F6 | 	mov	local11, objptr
082e0     48 0F 02 F6 | 	mov	objptr, local07
082e4     2D 96 62 FD | 	call	local10
082e8     4C 0F 02 F6 | 	mov	objptr, local11
082ec     18 9B 02 F6 | 	mov	local12, result1
082f0     00 9A 5E F2 | 	cmps	local12, #0 wcz
082f4     4D 31 02 C6 |  if_b	mov	result1, local12
082f8     10 00 90 CD |  if_b	jmp	#LR__0461
082fc     4D 8D 02 F1 | 	add	local05, local12
08300     01 92 06 F1 | 	add	local08, #1
08304     B8 FF 9F FD | 	jmp	#LR__0459
08308                 | LR__0460
08308     46 31 02 F6 | 	mov	result1, local05
0830c                 | LR__0461
0830c     AF F0 03 F6 | 	mov	ptra, fp
08310     BF 00 A0 FD | 	call	#popregs_
08314                 | __system___fmtpad_ret
08314     2D 00 64 FD | 	ret
08318                 | 
08318                 | __system___uitoa
08318     09 5A 05 F6 | 	mov	COUNT_, #9
0831c     B0 00 A0 FD | 	call	#pushregs_
08320     3B 85 02 F6 | 	mov	local01, arg01
08324     3C 87 02 F6 | 	mov	local02, arg02
08328     3D 89 02 F6 | 	mov	local03, arg03
0832c     3E 8B 02 F6 | 	mov	local04, arg04
08330     3F 8D 0A F6 | 	mov	local05, arg05 wz
08334     42 8F 02 F6 | 	mov	local06, local01
08338     00 90 06 F6 | 	mov	local07, #0
0833c     37 92 06 56 |  if_ne	mov	local08, #55
08340     57 92 06 A6 |  if_e	mov	local08, #87
08344                 | LR__0462
08344     43 D9 02 F6 | 	mov	muldiva_, local02
08348     44 DB 02 F6 | 	mov	muldivb_, local03
0834c     CC 00 A0 FD | 	call	#unsdivide_
08350     6C 95 02 F6 | 	mov	local09, muldiva_
08354     0A 94 1E F2 | 	cmp	local09, #10 wcz
08358     30 94 06 C1 |  if_b	add	local09, #48
0835c     49 95 02 31 |  if_ae	add	local09, local08
08360     47 95 42 FC | 	wrbyte	local09, local06
08364     43 D9 02 F6 | 	mov	muldiva_, local02
08368     44 DB 02 F6 | 	mov	muldivb_, local03
0836c     01 8E 06 F1 | 	add	local06, #1
08370     CC 00 A0 FD | 	call	#unsdivide_
08374     6D 87 0A F6 | 	mov	local02, muldivb_ wz
08378     01 90 06 F1 | 	add	local07, #1
0837c     C4 FF 9F 5D |  if_ne	jmp	#LR__0462
08380     45 91 1A F2 | 	cmp	local07, local04 wcz
08384     BC FF 9F CD |  if_b	jmp	#LR__0462
08388     47 01 48 FC | 	wrbyte	#0, local06
0838c     42 77 02 F6 | 	mov	arg01, local01
08390     74 FE BF FD | 	call	#__system___strrev
08394     48 31 02 F6 | 	mov	result1, local07
08398     AF F0 03 F6 | 	mov	ptra, fp
0839c     BF 00 A0 FD | 	call	#popregs_
083a0                 | __system___uitoa_ret
083a0     2D 00 64 FD | 	ret
083a4                 | 
083a4                 | __system___gettxfunc
083a4     03 5A 05 F6 | 	mov	COUNT_, #3
083a8     B0 00 A0 FD | 	call	#pushregs_
083ac     A0 FC BF FD | 	call	#__system____getftab
083b0     18 85 0A F6 | 	mov	local01, result1 wz
083b4     14 00 90 AD |  if_e	jmp	#LR__0463
083b8     08 84 06 F1 | 	add	local01, #8
083bc     42 87 02 FB | 	rdlong	local02, local01
083c0     08 84 86 F1 | 	sub	local01, #8
083c4     43 89 0A F6 | 	mov	local03, local02 wz
083c8     08 00 90 5D |  if_ne	jmp	#LR__0464
083cc                 | LR__0463
083cc     00 30 06 F6 | 	mov	result1, #0
083d0     0C 00 90 FD | 	jmp	#LR__0465
083d4                 | LR__0464
083d4     42 77 02 F6 | 	mov	arg01, local01
083d8     09 79 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
083dc     A8 E0 BF FD | 	call	#__system___make_methodptr
083e0                 | LR__0465
083e0     AF F0 03 F6 | 	mov	ptra, fp
083e4     BF 00 A0 FD | 	call	#popregs_
083e8                 | __system___gettxfunc_ret
083e8     2D 00 64 FD | 	ret
083ec                 | 
083ec                 | __system___getiolock_0223
083ec     03 5A 05 F6 | 	mov	COUNT_, #3
083f0     B0 00 A0 FD | 	call	#pushregs_
083f4     58 FC BF FD | 	call	#__system____getftab
083f8     18 85 0A F6 | 	mov	local01, result1 wz
083fc     14 00 90 AD |  if_e	jmp	#LR__0466
08400     08 84 06 F1 | 	add	local01, #8
08404     42 87 02 FB | 	rdlong	local02, local01
08408     08 84 86 F1 | 	sub	local01, #8
0840c     43 89 0A F6 | 	mov	local03, local02 wz
08410     18 00 90 5D |  if_ne	jmp	#LR__0467
08414                 | LR__0466
08414     01 00 00 FF 
08418     38 14 06 F1 | 	add	ptr___system__dat__, ##568
0841c     0A 31 02 F6 | 	mov	result1, ptr___system__dat__
08420     01 00 00 FF 
08424     38 14 86 F1 | 	sub	ptr___system__dat__, ##568
08428     08 00 90 FD | 	jmp	#LR__0468
0842c                 | LR__0467
0842c     0C 84 06 F1 | 	add	local01, #12
08430     42 31 02 F6 | 	mov	result1, local01
08434                 | LR__0468
08434     AF F0 03 F6 | 	mov	ptra, fp
08438     BF 00 A0 FD | 	call	#popregs_
0843c                 | __system___getiolock_0223_ret
0843c     2D 00 64 FD | 	ret
08440                 | 
08440                 | __system___rxtxioctl_0619
08440     02 5A 05 F6 | 	mov	COUNT_, #2
08444     B0 00 A0 FD | 	call	#pushregs_
08448     3C 85 02 F6 | 	mov	local01, arg02
0844c     3D 87 02 F6 | 	mov	local02, arg03
08450     00 85 0E F2 | 	cmp	local01, #256 wz
08454     0C 00 90 AD |  if_e	jmp	#LR__0469
08458     01 85 0E F2 | 	cmp	local01, #257 wz
0845c     1C 00 90 AD |  if_e	jmp	#LR__0470
08460     30 00 90 FD | 	jmp	#LR__0471
08464                 | LR__0469
08464     08 14 06 F1 | 	add	ptr___system__dat__, #8
08468     0A 31 02 FB | 	rdlong	result1, ptr___system__dat__
0846c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
08470     43 31 62 FC | 	wrlong	result1, local02
08474     00 30 06 F6 | 	mov	result1, #0
08478     30 00 90 FD | 	jmp	#LR__0472
0847c                 | LR__0470
0847c     43 77 02 FB | 	rdlong	arg01, local02
08480     08 14 06 F1 | 	add	ptr___system__dat__, #8
08484     0A 77 62 FC | 	wrlong	arg01, ptr___system__dat__
08488     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0848c     00 30 06 F6 | 	mov	result1, #0
08490     18 00 90 FD | 	jmp	#LR__0472
08494                 | LR__0471
08494     01 00 00 FF 
08498     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0849c     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
084a0     01 00 00 FF 
084a4     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
084a8     01 30 66 F6 | 	neg	result1, #1
084ac                 | LR__0472
084ac     AF F0 03 F6 | 	mov	ptra, fp
084b0     BF 00 A0 FD | 	call	#popregs_
084b4                 | __system___rxtxioctl_0619_ret
084b4     2D 00 64 FD | 	ret
084b8                 | 
084b8                 | __system____dummy_flush_0620
084b8     00 30 06 F6 | 	mov	result1, #0
084bc                 | __system____dummy_flush_0620_ret
084bc     2D 00 64 FD | 	ret
084c0                 | 
084c0                 | _ff_cc_disk_initialize
084c0     08 5A 05 F6 | 	mov	COUNT_, #8
084c4     B0 00 A0 FD | 	call	#pushregs_
084c8     30 F0 07 F1 | 	add	ptra, #48
084cc     04 5E 05 F1 | 	add	fp, #4
084d0     AF 76 42 FC | 	wrbyte	arg01, fp
084d4     70 1B 06 F1 | 	add	ptr__ff_cc_dat__, #368
084d8     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
084dc     1C 5E 05 F1 | 	add	fp, #28
084e0     AF 84 62 FC | 	wrlong	local01, fp
084e4     04 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #4
084e8     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
084ec     04 5E 05 F1 | 	add	fp, #4
084f0     AF 84 62 FC | 	wrlong	local01, fp
084f4     08 1A 06 F1 | 	add	ptr__ff_cc_dat__, #8
084f8     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
084fc     04 5E 05 F1 | 	add	fp, #4
08500     AF 84 62 FC | 	wrlong	local01, fp
08504     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
08508     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0850c     78 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #376
08510     04 5E 05 F1 | 	add	fp, #4
08514     AF 84 62 FC | 	wrlong	local01, fp
08518     28 5E 85 F1 | 	sub	fp, #40
0851c     AF 84 CA FA | 	rdbyte	local01, fp wz
08520     04 5E 85 F1 | 	sub	fp, #4
08524                 | ' #line 420 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/sdmm.cc"
08524                 | '             return RES_NOTRDY;
08524     03 30 06 56 |  if_ne	mov	result1, #3
08528     2C 03 90 5D |  if_ne	jmp	#LR__0486
0852c     13 00 00 FF 
08530     10 77 06 F6 | 	mov	arg01, ##10000
08534     D4 E1 BF FD | 	call	#__system___waitus
08538     20 5E 05 F1 | 	add	fp, #32
0853c     AF 76 02 FB | 	rdlong	arg01, fp
08540     41 76 62 FD | 	dirh	arg01
08544     59 76 62 FD | 	drvh	arg01
08548     1F 20 64 FD | 	waitx	#16
0854c     04 5E 05 F1 | 	add	fp, #4
08550     AF 76 02 FB | 	rdlong	arg01, fp
08554     41 76 62 FD | 	dirh	arg01
08558     58 76 62 FD | 	drvl	arg01
0855c     1F 20 64 FD | 	waitx	#16
08560     04 5E 05 F1 | 	add	fp, #4
08564     AF 76 02 FB | 	rdlong	arg01, fp
08568     41 76 62 FD | 	dirh	arg01
0856c     04 5E 05 F1 | 	add	fp, #4
08570     AF 76 02 FB | 	rdlong	arg01, fp
08574     50 76 62 FD | 	fltl	arg01
08578                 | '         }
08578                 | ' 
08578                 | ' 	dly_us(10000);
08578                 | ' 	_dirh(PIN_SS) ;  (_pinh(PIN_SS), (_waitx(16)) ) ;
08578                 | ' 	_dirh(PIN_CLK) ;  (_pinl(PIN_CLK), (_waitx(16)) ) ;
08578                 | ' 	_dirh(PIN_DI) ;
08578                 | ' 	_fltl(PIN_DO) ;
08578                 | ' 
08578                 | ' 	for (n = 100; n; n--) rcvr_mmc(buf, 1);
08578     24 5E 85 F1 | 	sub	fp, #36
0857c     AF C8 48 FC | 	wrbyte	#100, fp
08580     08 5E 85 F1 | 	sub	fp, #8
08584                 | LR__0473
08584     08 5E 05 F1 | 	add	fp, #8
08588     AF 86 CA FA | 	rdbyte	local02, fp wz
0858c     08 5E 85 F1 | 	sub	fp, #8
08590     34 00 90 AD |  if_e	jmp	#LR__0474
08594     14 5E 05 F1 | 	add	fp, #20
08598     AF 76 02 F6 | 	mov	arg01, fp
0859c     14 5E 85 F1 | 	sub	fp, #20
085a0     01 78 06 F6 | 	mov	arg02, #1
085a4     38 65 B0 FD | 	call	#_ff_cc_rcvr_mmc_0711
085a8     08 5E 05 F1 | 	add	fp, #8
085ac     AF 88 C2 FA | 	rdbyte	local03, fp
085b0     AF 8A C2 FA | 	rdbyte	local04, fp
085b4     45 8D 02 F6 | 	mov	local05, local04
085b8     01 8C 86 F1 | 	sub	local05, #1
085bc     AF 8C 42 FC | 	wrbyte	local05, fp
085c0     08 5E 85 F1 | 	sub	fp, #8
085c4     BC FF 9F FD | 	jmp	#LR__0473
085c8                 | LR__0474
085c8     0C 5E 05 F1 | 	add	fp, #12
085cc     AF 00 48 FC | 	wrbyte	#0, fp
085d0     0C 5E 85 F1 | 	sub	fp, #12
085d4     00 76 06 F6 | 	mov	arg01, #0
085d8     00 78 06 F6 | 	mov	arg02, #0
085dc     D8 69 B0 FD | 	call	#_ff_cc_send_cmd_0732
085e0     18 85 02 F6 | 	mov	local01, result1
085e4     07 84 46 F7 | 	zerox	local01, #7
085e8     01 84 0E F2 | 	cmp	local01, #1 wz
085ec     20 02 90 5D |  if_ne	jmp	#LR__0485
085f0     08 76 06 F6 | 	mov	arg01, #8
085f4     AA 79 06 F6 | 	mov	arg02, #426
085f8     BC 69 B0 FD | 	call	#_ff_cc_send_cmd_0732
085fc     18 85 02 F6 | 	mov	local01, result1
08600     07 84 46 F7 | 	zerox	local01, #7
08604     01 84 0E F2 | 	cmp	local01, #1 wz
08608     04 01 90 5D |  if_ne	jmp	#LR__0477
0860c     14 5E 05 F1 | 	add	fp, #20
08610     AF 76 02 F6 | 	mov	arg01, fp
08614     14 5E 85 F1 | 	sub	fp, #20
08618     04 78 06 F6 | 	mov	arg02, #4
0861c     C0 64 B0 FD | 	call	#_ff_cc_rcvr_mmc_0711
08620     16 5E 05 F1 | 	add	fp, #22
08624     AF 84 C2 FA | 	rdbyte	local01, fp
08628     16 5E 85 F1 | 	sub	fp, #22
0862c     07 84 46 F7 | 	zerox	local01, #7
08630     01 84 0E F2 | 	cmp	local01, #1 wz
08634     D8 01 90 5D |  if_ne	jmp	#LR__0484
08638     17 5E 05 F1 | 	add	fp, #23
0863c     AF 8E C2 FA | 	rdbyte	local06, fp
08640     17 5E 85 F1 | 	sub	fp, #23
08644     07 8E 46 F7 | 	zerox	local06, #7
08648     AA 8E 0E F2 | 	cmp	local06, #170 wz
0864c     C0 01 90 5D |  if_ne	jmp	#LR__0484
08650                 | ' 				for (tmr = 1000; tmr; tmr--) {
08650     18 5E 05 F1 | 	add	fp, #24
08654     01 00 80 FF 
08658     AF D0 6B FC | 	wrlong	##1000, fp
0865c     18 5E 85 F1 | 	sub	fp, #24
08660                 | LR__0475
08660     18 5E 05 F1 | 	add	fp, #24
08664     AF 8E 0A FB | 	rdlong	local06, fp wz
08668     18 5E 85 F1 | 	sub	fp, #24
0866c     3C 00 90 AD |  if_e	jmp	#LR__0476
08670     A9 76 06 F6 | 	mov	arg01, #169
08674     1E 78 C6 F9 | 	decod	arg02, #30
08678     3C 69 B0 FD | 	call	#_ff_cc_send_cmd_0732
0867c     18 91 02 F6 | 	mov	local07, result1
08680     07 90 4E F7 | 	zerox	local07, #7 wz
08684     24 00 90 AD |  if_e	jmp	#LR__0476
08688     01 00 00 FF 
0868c     E8 77 06 F6 | 	mov	arg01, ##1000
08690     78 E0 BF FD | 	call	#__system___waitus
08694     18 5E 05 F1 | 	add	fp, #24
08698     AF 8C 02 FB | 	rdlong	local05, fp
0869c     01 8C 86 F1 | 	sub	local05, #1
086a0     AF 8C 62 FC | 	wrlong	local05, fp
086a4     18 5E 85 F1 | 	sub	fp, #24
086a8     B4 FF 9F FD | 	jmp	#LR__0475
086ac                 | LR__0476
086ac     18 5E 05 F1 | 	add	fp, #24
086b0     AF 86 02 FB | 	rdlong	local02, fp
086b4     18 5E 85 F1 | 	sub	fp, #24
086b8     43 85 0A F6 | 	mov	local01, local02 wz
086bc     50 01 90 AD |  if_e	jmp	#LR__0484
086c0     3A 76 06 F6 | 	mov	arg01, #58
086c4     00 78 06 F6 | 	mov	arg02, #0
086c8     EC 68 B0 FD | 	call	#_ff_cc_send_cmd_0732
086cc     18 8F 02 F6 | 	mov	local06, result1
086d0     07 8E 4E F7 | 	zerox	local06, #7 wz
086d4     38 01 90 5D |  if_ne	jmp	#LR__0484
086d8     14 5E 05 F1 | 	add	fp, #20
086dc     AF 76 02 F6 | 	mov	arg01, fp
086e0     14 5E 85 F1 | 	sub	fp, #20
086e4     04 78 06 F6 | 	mov	arg02, #4
086e8     F4 63 B0 FD | 	call	#_ff_cc_rcvr_mmc_0711
086ec     14 5E 05 F1 | 	add	fp, #20
086f0     AF 86 C2 FA | 	rdbyte	local02, fp
086f4     40 86 CE F7 | 	test	local02, #64 wz
086f8     0C 84 06 56 |  if_ne	mov	local01, #12
086fc     04 84 06 A6 |  if_e	mov	local01, #4
08700     08 5E 85 F1 | 	sub	fp, #8
08704     AF 84 42 FC | 	wrbyte	local01, fp
08708     0C 5E 85 F1 | 	sub	fp, #12
0870c     00 01 90 FD | 	jmp	#LR__0484
08710                 | LR__0477
08710     A9 76 06 F6 | 	mov	arg01, #169
08714     00 78 06 F6 | 	mov	arg02, #0
08718     9C 68 B0 FD | 	call	#_ff_cc_send_cmd_0732
0871c     18 85 02 F6 | 	mov	local01, result1
08720     07 84 46 F7 | 	zerox	local01, #7
08724     01 84 1E F2 | 	cmp	local01, #1 wcz
08728     18 00 90 1D |  if_a	jmp	#LR__0478
0872c     0C 5E 05 F1 | 	add	fp, #12
08730     AF 04 48 FC | 	wrbyte	#2, fp
08734     04 5E 05 F1 | 	add	fp, #4
08738     AF 52 49 FC | 	wrbyte	#169, fp
0873c     10 5E 85 F1 | 	sub	fp, #16
08740     14 00 90 FD | 	jmp	#LR__0479
08744                 | LR__0478
08744     0C 5E 05 F1 | 	add	fp, #12
08748     AF 02 48 FC | 	wrbyte	#1, fp
0874c     04 5E 05 F1 | 	add	fp, #4
08750     AF 02 48 FC | 	wrbyte	#1, fp
08754     10 5E 85 F1 | 	sub	fp, #16
08758                 | LR__0479
08758                 | ' 				ty =  0x01 ; cmd =  (1) ;
08758                 | ' 			}
08758                 | ' 			for (tmr = 1000; tmr; tmr--) {
08758     18 5E 05 F1 | 	add	fp, #24
0875c     01 00 80 FF 
08760     AF D0 6B FC | 	wrlong	##1000, fp
08764     18 5E 85 F1 | 	sub	fp, #24
08768                 | LR__0480
08768     18 5E 05 F1 | 	add	fp, #24
0876c     AF 86 0A FB | 	rdlong	local02, fp wz
08770     18 5E 85 F1 | 	sub	fp, #24
08774     54 00 90 AD |  if_e	jmp	#LR__0481
08778     10 5E 05 F1 | 	add	fp, #16
0877c     AF 76 C2 FA | 	rdbyte	arg01, fp
08780     10 5E 85 F1 | 	sub	fp, #16
08784     00 8A 06 F6 | 	mov	local04, #0
08788     00 78 06 F6 | 	mov	arg02, #0
0878c     28 68 B0 FD | 	call	#_ff_cc_send_cmd_0732
08790     18 93 02 F6 | 	mov	local08, result1
08794     49 91 02 F6 | 	mov	local07, local08
08798     07 90 4E F7 | 	zerox	local07, #7 wz
0879c     2C 00 90 AD |  if_e	jmp	#LR__0481
087a0     01 00 00 FF 
087a4     E8 77 06 F6 | 	mov	arg01, ##1000
087a8     60 DF BF FD | 	call	#__system___waitus
087ac     18 5E 05 F1 | 	add	fp, #24
087b0     AF 88 02 FB | 	rdlong	local03, fp
087b4     44 8B 02 F6 | 	mov	local04, local03
087b8     45 8D 02 F6 | 	mov	local05, local04
087bc     01 8C 86 F1 | 	sub	local05, #1
087c0     AF 8C 62 FC | 	wrlong	local05, fp
087c4     18 5E 85 F1 | 	sub	fp, #24
087c8     9C FF 9F FD | 	jmp	#LR__0480
087cc                 | LR__0481
087cc     18 5E 05 F1 | 	add	fp, #24
087d0     AF 86 02 FB | 	rdlong	local02, fp
087d4     18 5E 85 F1 | 	sub	fp, #24
087d8     43 85 0A F6 | 	mov	local01, local02 wz
087dc     24 00 90 AD |  if_e	jmp	#LR__0482
087e0     10 90 06 F6 | 	mov	local07, #16
087e4     09 88 C6 F9 | 	decod	local03, #9
087e8     10 76 06 F6 | 	mov	arg01, #16
087ec     09 78 C6 F9 | 	decod	arg02, #9
087f0     C4 67 B0 FD | 	call	#_ff_cc_send_cmd_0732
087f4     18 8D 02 F6 | 	mov	local05, result1
087f8     46 8F 02 F6 | 	mov	local06, local05
087fc     07 8E 4E F7 | 	zerox	local06, #7 wz
08800     0C 00 90 AD |  if_e	jmp	#LR__0483
08804                 | LR__0482
08804     0C 5E 05 F1 | 	add	fp, #12
08808     AF 00 48 FC | 	wrbyte	#0, fp
0880c     0C 5E 85 F1 | 	sub	fp, #12
08810                 | LR__0483
08810                 | LR__0484
08810                 | LR__0485
08810     0C 5E 05 F1 | 	add	fp, #12
08814     AF 84 C2 FA | 	rdbyte	local01, fp
08818     7D 1B 06 F1 | 	add	ptr__ff_cc_dat__, #381
0881c     0D 85 42 FC | 	wrbyte	local01, ptr__ff_cc_dat__
08820     AF 86 CA FA | 	rdbyte	local02, fp wz
08824     00 84 06 56 |  if_ne	mov	local01, #0
08828     01 84 06 A6 |  if_e	mov	local01, #1
0882c     10 5E 05 F1 | 	add	fp, #16
08830     AF 84 42 FC | 	wrbyte	local01, fp
08834     AF 84 C2 FA | 	rdbyte	local01, fp
08838     1C 5E 85 F1 | 	sub	fp, #28
0883c     01 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #1
08840     0D 85 42 FC | 	wrbyte	local01, ptr__ff_cc_dat__
08844     7C 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #380
08848     DC 64 B0 FD | 	call	#_ff_cc_deselect_0720
0884c                 | ' 
0884c                 | '                             ty = 0;
0884c                 | '                         }
0884c                 | ' 		}
0884c                 | ' 	}
0884c                 | ' #line 467 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/sdmm.cc"
0884c                 | ' 	CardType = ty;
0884c                 | ' 	s = ty ? 0 :  0x01 ;
0884c                 | ' 	Stat = s;
0884c                 | ' 
0884c                 | ' 	deselect();
0884c                 | ' 
0884c                 | ' 	return s;
0884c     1C 5E 05 F1 | 	add	fp, #28
08850     AF 30 C2 FA | 	rdbyte	result1, fp
08854     1C 5E 85 F1 | 	sub	fp, #28
08858                 | LR__0486
08858     AF F0 03 F6 | 	mov	ptra, fp
0885c     BF 00 A0 FD | 	call	#popregs_
08860                 | _ff_cc_disk_initialize_ret
08860     2D 00 64 FD | 	ret
08864                 | 
08864                 | _ff_cc_disk_read
08864     05 5A 05 F6 | 	mov	COUNT_, #5
08868     B0 00 A0 FD | 	call	#pushregs_
0886c     3C 85 02 F6 | 	mov	local01, arg02
08870     3E 87 02 F6 | 	mov	local02, arg04
08874     3D 89 02 F6 | 	mov	local03, arg03
08878     00 76 0E F2 | 	cmp	arg01, #0 wz
0887c     01 30 06 56 |  if_ne	mov	result1, #1
08880                 | ' 
08880                 | ' 	return Stat;
08880     7C 1B 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
08884     0D 31 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
08888     7C 1B 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
0888c     18 8B 02 F6 | 	mov	local04, result1
08890     07 8A 46 F7 | 	zerox	local04, #7
08894     01 8A CE F7 | 	test	local04, #1 wz
08898     03 30 06 56 |  if_ne	mov	result1, #3
0889c     88 00 90 5D |  if_ne	jmp	#LR__0490
088a0     7D 1B 06 F1 | 	add	ptr__ff_cc_dat__, #381
088a4     0D 8B C2 FA | 	rdbyte	local04, ptr__ff_cc_dat__
088a8     7D 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #381
088ac     07 8A 46 F7 | 	zerox	local04, #7
088b0     08 8A 0E F5 | 	and	local04, #8 wz
088b4     09 88 66 A0 |  if_e	shl	local03, #9
088b8     01 86 1E F2 | 	cmp	local02, #1 wcz
088bc     12 8A 06 16 |  if_a	mov	local04, #18
088c0     11 8A 06 E6 |  if_be	mov	local04, #17
088c4     45 8D 02 F6 | 	mov	local05, local04
088c8     46 77 02 F6 | 	mov	arg01, local05
088cc     44 79 02 F6 | 	mov	arg02, local03
088d0     E4 66 B0 FD | 	call	#_ff_cc_send_cmd_0732
088d4     18 8B 02 F6 | 	mov	local04, result1
088d8     07 8A 4E F7 | 	zerox	local04, #7 wz
088dc     34 00 90 5D |  if_ne	jmp	#LR__0489
088e0                 | ' 		do {
088e0                 | LR__0487
088e0     42 77 02 F6 | 	mov	arg01, local01
088e4     09 78 C6 F9 | 	decod	arg02, #9
088e8     18 65 B0 FD | 	call	#_ff_cc_rcvr_datablock_0726
088ec     00 30 0E F2 | 	cmp	result1, #0 wz
088f0     01 00 00 5F 
088f4     00 84 06 51 |  if_ne	add	local01, ##512
088f8     F9 87 6E 5B |  if_ne	djnz	local02, #LR__0487
088fc     07 8C 46 F7 | 	zerox	local05, #7
08900     12 8C 0E F2 | 	cmp	local05, #18 wz
08904     0C 00 90 5D |  if_ne	jmp	#LR__0488
08908     0C 76 06 F6 | 	mov	arg01, #12
0890c     00 78 06 F6 | 	mov	arg02, #0
08910     A4 66 B0 FD | 	call	#_ff_cc_send_cmd_0732
08914                 | LR__0488
08914                 | LR__0489
08914     10 64 B0 FD | 	call	#_ff_cc_deselect_0720
08918                 | ' 	}
08918                 | ' 	deselect();
08918                 | ' 
08918                 | ' 	return count ? RES_ERROR : RES_OK;
08918     00 86 0E F2 | 	cmp	local02, #0 wz
0891c     01 8A 06 56 |  if_ne	mov	local04, #1
08920     00 8A 06 A6 |  if_e	mov	local04, #0
08924     45 31 02 F6 | 	mov	result1, local04
08928                 | LR__0490
08928     AF F0 03 F6 | 	mov	ptra, fp
0892c     BF 00 A0 FD | 	call	#popregs_
08930                 | _ff_cc_disk_read_ret
08930     2D 00 64 FD | 	ret
08934                 | 
08934                 | _ff_cc_disk_write
08934     07 5A 05 F6 | 	mov	COUNT_, #7
08938     B0 00 A0 FD | 	call	#pushregs_
0893c     3B 85 0A F6 | 	mov	local01, arg01 wz
08940     3C 87 02 F6 | 	mov	local02, arg02
08944     3D 89 02 F6 | 	mov	local03, arg03
08948     3E 8B 02 F6 | 	mov	local04, arg04
0894c     44 8D 02 F6 | 	mov	local05, local03
08950     01 30 06 56 |  if_ne	mov	result1, #1
08954                 | ' 
08954                 | ' 	return Stat;
08954     7C 1B 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
08958     0D 31 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
0895c     7C 1B 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
08960     18 8F 02 F6 | 	mov	local06, result1
08964     07 8E 46 F7 | 	zerox	local06, #7
08968     01 8E CE F7 | 	test	local06, #1 wz
0896c     03 30 06 56 |  if_ne	mov	result1, #3
08970     D0 00 90 5D |  if_ne	jmp	#LR__0496
08974     7D 1B 06 F1 | 	add	ptr__ff_cc_dat__, #381
08978     0D 8F C2 FA | 	rdbyte	local06, ptr__ff_cc_dat__
0897c     7D 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #381
08980     07 8E 46 F7 | 	zerox	local06, #7
08984     08 8E CE F7 | 	test	local06, #8 wz
08988     09 8C 66 A0 |  if_e	shl	local05, #9
0898c     01 8A 0E F2 | 	cmp	local04, #1 wz
08990     30 00 90 5D |  if_ne	jmp	#LR__0491
08994     46 79 02 F6 | 	mov	arg02, local05
08998     18 76 06 F6 | 	mov	arg01, #24
0899c     18 66 B0 FD | 	call	#_ff_cc_send_cmd_0732
089a0     18 8F 02 F6 | 	mov	local06, result1
089a4     07 8E 4E F7 | 	zerox	local06, #7 wz
089a8     84 00 90 5D |  if_ne	jmp	#LR__0495
089ac     43 77 02 F6 | 	mov	arg01, local02
089b0     FE 78 06 F6 | 	mov	arg02, #254
089b4     2C 65 B0 FD | 	call	#_ff_cc_xmit_datablock_0728
089b8     18 91 0A F6 | 	mov	local07, result1 wz
089bc     00 8A 06 56 |  if_ne	mov	local04, #0
089c0     6C 00 90 FD | 	jmp	#LR__0495
089c4                 | LR__0491
089c4     7D 1B 06 F1 | 	add	ptr__ff_cc_dat__, #381
089c8     0D 8F C2 FA | 	rdbyte	local06, ptr__ff_cc_dat__
089cc     7D 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #381
089d0     07 8E 46 F7 | 	zerox	local06, #7
089d4     06 8E CE F7 | 	test	local06, #6 wz
089d8     0C 00 90 AD |  if_e	jmp	#LR__0492
089dc     97 76 06 F6 | 	mov	arg01, #151
089e0     45 79 02 F6 | 	mov	arg02, local04
089e4     D0 65 B0 FD | 	call	#_ff_cc_send_cmd_0732
089e8                 | LR__0492
089e8     46 79 02 F6 | 	mov	arg02, local05
089ec     19 76 06 F6 | 	mov	arg01, #25
089f0     C4 65 B0 FD | 	call	#_ff_cc_send_cmd_0732
089f4     18 8F 02 F6 | 	mov	local06, result1
089f8     07 8E 4E F7 | 	zerox	local06, #7 wz
089fc     30 00 90 5D |  if_ne	jmp	#LR__0494
08a00                 | ' 			do {
08a00                 | LR__0493
08a00     43 77 02 F6 | 	mov	arg01, local02
08a04     FC 78 06 F6 | 	mov	arg02, #252
08a08     D8 64 B0 FD | 	call	#_ff_cc_xmit_datablock_0728
08a0c     00 30 0E F2 | 	cmp	result1, #0 wz
08a10     01 00 00 5F 
08a14     00 86 06 51 |  if_ne	add	local02, ##512
08a18     F9 8B 6E 5B |  if_ne	djnz	local04, #LR__0493
08a1c     00 76 06 F6 | 	mov	arg01, #0
08a20     FD 78 06 F6 | 	mov	arg02, #253
08a24     BC 64 B0 FD | 	call	#_ff_cc_xmit_datablock_0728
08a28     00 30 0E F2 | 	cmp	result1, #0 wz
08a2c     01 8A 06 A6 |  if_e	mov	local04, #1
08a30                 | LR__0494
08a30                 | LR__0495
08a30     F4 62 B0 FD | 	call	#_ff_cc_deselect_0720
08a34                 | ' 				count = 1;
08a34                 | ' 		}
08a34                 | ' 	}
08a34                 | ' 	deselect();
08a34                 | ' 
08a34                 | ' 	return count ? RES_ERROR : RES_OK;
08a34     00 8A 0E F2 | 	cmp	local04, #0 wz
08a38     01 8E 06 56 |  if_ne	mov	local06, #1
08a3c     00 8E 06 A6 |  if_e	mov	local06, #0
08a40     47 31 02 F6 | 	mov	result1, local06
08a44                 | LR__0496
08a44     AF F0 03 F6 | 	mov	ptra, fp
08a48     BF 00 A0 FD | 	call	#popregs_
08a4c                 | _ff_cc_disk_write_ret
08a4c     2D 00 64 FD | 	ret
08a50                 | 
08a50                 | _ff_cc_disk_ioctl
08a50     07 5A 05 F6 | 	mov	COUNT_, #7
08a54     B0 00 A0 FD | 	call	#pushregs_
08a58     30 F0 07 F1 | 	add	ptra, #48
08a5c     04 5E 05 F1 | 	add	fp, #4
08a60     AF 76 42 FC | 	wrbyte	arg01, fp
08a64     04 5E 05 F1 | 	add	fp, #4
08a68     AF 78 42 FC | 	wrbyte	arg02, fp
08a6c     04 5E 05 F1 | 	add	fp, #4
08a70     AF 7A 62 FC | 	wrlong	arg03, fp
08a74     08 5E 85 F1 | 	sub	fp, #8
08a78     AF 84 C2 FA | 	rdbyte	local01, fp
08a7c     04 5E 85 F1 | 	sub	fp, #4
08a80     42 87 02 F6 | 	mov	local02, local01
08a84     43 77 0A F6 | 	mov	arg01, local02 wz
08a88     01 30 06 56 |  if_ne	mov	result1, #1
08a8c                 | ' 
08a8c                 | ' 	return Stat;
08a8c     7C 1B 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
08a90     0D 31 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
08a94     7C 1B 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
08a98     18 89 02 F6 | 	mov	local03, result1
08a9c     44 8B 02 F6 | 	mov	local04, local03
08aa0     07 8A 46 F7 | 	zerox	local04, #7
08aa4     01 8A CE F7 | 	test	local04, #1 wz
08aa8     03 30 06 56 |  if_ne	mov	result1, #3
08aac     F8 01 90 5D |  if_ne	jmp	#LR__0505
08ab0     10 5E 05 F1 | 	add	fp, #16
08ab4     AF 02 68 FC | 	wrlong	#1, fp
08ab8                 | ' 
08ab8                 | ' 	res = RES_ERROR;
08ab8                 | ' 	switch (ctrl) {
08ab8     08 5E 85 F1 | 	sub	fp, #8
08abc     AF 8A C2 FA | 	rdbyte	local04, fp
08ac0     08 5E 85 F1 | 	sub	fp, #8
08ac4     45 8D 02 F6 | 	mov	local05, local04
08ac8     07 8C 46 F7 | 	zerox	local05, #7
08acc     04 8C 26 F3 | 	fle	local05, #4
08ad0     30 8C 62 FD | 	jmprel	local05
08ad4                 | LR__0497
08ad4     10 00 90 FD | 	jmp	#LR__0498
08ad8     24 00 90 FD | 	jmp	#LR__0499
08adc     A8 01 90 FD | 	jmp	#LR__0503
08ae0     88 01 90 FD | 	jmp	#LR__0502
08ae4     A0 01 90 FD | 	jmp	#LR__0503
08ae8                 | LR__0498
08ae8     B8 62 B0 FD | 	call	#_ff_cc_select_0723
08aec     00 30 0E F2 | 	cmp	result1, #0 wz
08af0     10 5E 05 51 |  if_ne	add	fp, #16
08af4     AF 00 68 5C |  if_ne	wrlong	#0, fp
08af8     10 5E 85 51 |  if_ne	sub	fp, #16
08afc                 | ' 			break;
08afc     98 01 90 FD | 	jmp	#LR__0504
08b00                 | LR__0499
08b00     09 76 06 F6 | 	mov	arg01, #9
08b04     00 78 06 F6 | 	mov	arg02, #0
08b08     AC 64 B0 FD | 	call	#_ff_cc_send_cmd_0732
08b0c     18 87 02 F6 | 	mov	local02, result1
08b10     07 86 4E F7 | 	zerox	local02, #7 wz
08b14     80 01 90 5D |  if_ne	jmp	#LR__0504
08b18     18 5E 05 F1 | 	add	fp, #24
08b1c     AF 76 02 F6 | 	mov	arg01, fp
08b20     18 5E 85 F1 | 	sub	fp, #24
08b24     10 78 06 F6 | 	mov	arg02, #16
08b28     D8 62 B0 FD | 	call	#_ff_cc_rcvr_datablock_0726
08b2c     18 8F 0A F6 | 	mov	local06, result1 wz
08b30     64 01 90 AD |  if_e	jmp	#LR__0504
08b34     18 5E 05 F1 | 	add	fp, #24
08b38     AF 86 C2 FA | 	rdbyte	local02, fp
08b3c     18 5E 85 F1 | 	sub	fp, #24
08b40     07 86 46 F7 | 	zerox	local02, #7
08b44     06 86 46 F0 | 	shr	local02, #6
08b48     01 86 0E F2 | 	cmp	local02, #1 wz
08b4c     5C 00 90 5D |  if_ne	jmp	#LR__0500
08b50     21 5E 05 F1 | 	add	fp, #33
08b54     AF 86 C2 FA | 	rdbyte	local02, fp
08b58     01 5E 85 F1 | 	sub	fp, #1
08b5c     AF 88 C2 FA | 	rdbyte	local03, fp
08b60     0F 88 46 F7 | 	zerox	local03, #15
08b64     08 88 66 F0 | 	shl	local03, #8
08b68     44 87 02 F1 | 	add	local02, local03
08b6c     01 5E 85 F1 | 	sub	fp, #1
08b70     AF 90 C2 FA | 	rdbyte	local07, fp
08b74     3F 90 06 F5 | 	and	local07, #63
08b78     10 90 66 F0 | 	shl	local07, #16
08b7c     48 87 02 F1 | 	add	local02, local07
08b80     01 86 06 F1 | 	add	local02, #1
08b84     09 5E 05 F1 | 	add	fp, #9
08b88     AF 86 62 FC | 	wrlong	local02, fp
08b8c     1C 5E 85 F1 | 	sub	fp, #28
08b90     AF 84 02 FB | 	rdlong	local01, fp
08b94     1C 5E 05 F1 | 	add	fp, #28
08b98     AF 88 02 FB | 	rdlong	local03, fp
08b9c     28 5E 85 F1 | 	sub	fp, #40
08ba0     0A 88 66 F0 | 	shl	local03, #10
08ba4     42 89 62 FC | 	wrlong	local03, local01
08ba8     B0 00 90 FD | 	jmp	#LR__0501
08bac                 | LR__0500
08bac     1D 5E 05 F1 | 	add	fp, #29
08bb0     AF 86 C2 FA | 	rdbyte	local02, fp
08bb4     0F 86 06 F5 | 	and	local02, #15
08bb8     05 5E 05 F1 | 	add	fp, #5
08bbc     AF 88 C2 FA | 	rdbyte	local03, fp
08bc0     80 88 06 F5 | 	and	local03, #128
08bc4     07 88 C6 F0 | 	sar	local03, #7
08bc8     44 87 02 F1 | 	add	local02, local03
08bcc     01 5E 85 F1 | 	sub	fp, #1
08bd0     AF 90 C2 FA | 	rdbyte	local07, fp
08bd4     03 90 06 F5 | 	and	local07, #3
08bd8     01 90 66 F0 | 	shl	local07, #1
08bdc     48 87 02 F1 | 	add	local02, local07
08be0     02 86 06 F1 | 	add	local02, #2
08be4     0D 5E 85 F1 | 	sub	fp, #13
08be8     AF 86 42 FC | 	wrbyte	local02, fp
08bec     0C 5E 05 F1 | 	add	fp, #12
08bf0     AF 86 C2 FA | 	rdbyte	local02, fp
08bf4     06 86 46 F0 | 	shr	local02, #6
08bf8     01 5E 85 F1 | 	sub	fp, #1
08bfc     AF 88 C2 FA | 	rdbyte	local03, fp
08c00     0F 88 46 F7 | 	zerox	local03, #15
08c04     02 88 66 F0 | 	shl	local03, #2
08c08     44 87 02 F1 | 	add	local02, local03
08c0c     01 5E 85 F1 | 	sub	fp, #1
08c10     AF 90 C2 FA | 	rdbyte	local07, fp
08c14     03 90 06 F5 | 	and	local07, #3
08c18     0F 90 46 F7 | 	zerox	local07, #15
08c1c     0A 90 66 F0 | 	shl	local07, #10
08c20     48 87 02 F1 | 	add	local02, local07
08c24     01 86 06 F1 | 	add	local02, #1
08c28     0A 5E 05 F1 | 	add	fp, #10
08c2c     AF 86 62 FC | 	wrlong	local02, fp
08c30     1C 5E 85 F1 | 	sub	fp, #28
08c34     AF 84 02 FB | 	rdlong	local01, fp
08c38     1C 5E 05 F1 | 	add	fp, #28
08c3c     AF 88 02 FB | 	rdlong	local03, fp
08c40     14 5E 85 F1 | 	sub	fp, #20
08c44     AF 90 C2 FA | 	rdbyte	local07, fp
08c48     14 5E 85 F1 | 	sub	fp, #20
08c4c     07 90 46 F7 | 	zerox	local07, #7
08c50     09 90 86 F1 | 	sub	local07, #9
08c54     48 89 62 F0 | 	shl	local03, local07
08c58     42 89 62 FC | 	wrlong	local03, local01
08c5c                 | LR__0501
08c5c     10 5E 05 F1 | 	add	fp, #16
08c60     AF 00 68 FC | 	wrlong	#0, fp
08c64     10 5E 85 F1 | 	sub	fp, #16
08c68                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
08c68                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
08c68                 | ' 					*(LBA_t*)buff = cs << (n - 9);
08c68                 | ' 				}
08c68                 | ' 				res = RES_OK;
08c68                 | ' 			}
08c68                 | ' 			break;
08c68     2C 00 90 FD | 	jmp	#LR__0504
08c6c                 | LR__0502
08c6c     0C 5E 05 F1 | 	add	fp, #12
08c70     AF 86 02 FB | 	rdlong	local02, fp
08c74     43 01 69 FC | 	wrlong	#128, local02
08c78     04 5E 05 F1 | 	add	fp, #4
08c7c     AF 00 68 FC | 	wrlong	#0, fp
08c80     10 5E 85 F1 | 	sub	fp, #16
08c84                 | ' 			*(DWORD*)buff = 128;
08c84                 | ' 			res = RES_OK;
08c84                 | ' 			break;
08c84     10 00 90 FD | 	jmp	#LR__0504
08c88                 | LR__0503
08c88     04 86 06 F6 | 	mov	local02, #4
08c8c     10 5E 05 F1 | 	add	fp, #16
08c90     AF 08 68 FC | 	wrlong	#4, fp
08c94     10 5E 85 F1 | 	sub	fp, #16
08c98                 | LR__0504
08c98     8C 60 B0 FD | 	call	#_ff_cc_deselect_0720
08c9c                 | ' 			res = RES_PARERR;
08c9c                 | ' 	}
08c9c                 | ' 
08c9c                 | ' 	deselect();
08c9c                 | ' 
08c9c                 | ' 	return res;
08c9c     10 5E 05 F1 | 	add	fp, #16
08ca0     AF 30 02 FB | 	rdlong	result1, fp
08ca4     10 5E 85 F1 | 	sub	fp, #16
08ca8                 | LR__0505
08ca8     AF F0 03 F6 | 	mov	ptra, fp
08cac     BF 00 A0 FD | 	call	#popregs_
08cb0                 | _ff_cc_disk_ioctl_ret
08cb0     2D 00 64 FD | 	ret
08cb4                 | 
08cb4                 | _ff_cc_disk_setpins
08cb4     00 76 0E F2 | 	cmp	arg01, #0 wz
08cb8     01 30 66 56 |  if_ne	neg	result1, #1
08cbc     28 00 90 5D |  if_ne	jmp	#_ff_cc_disk_setpins_ret
08cc0     6C 1B 06 F1 | 	add	ptr__ff_cc_dat__, #364
08cc4     0D 79 62 FC | 	wrlong	arg02, ptr__ff_cc_dat__
08cc8     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
08ccc     0D 7B 62 FC | 	wrlong	arg03, ptr__ff_cc_dat__
08cd0     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
08cd4     0D 7D 62 FC | 	wrlong	arg04, ptr__ff_cc_dat__
08cd8     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
08cdc     0D 7F 62 FC | 	wrlong	arg05, ptr__ff_cc_dat__
08ce0     78 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #376
08ce4     00 30 06 F6 | 	mov	result1, #0
08ce8                 | _ff_cc_disk_setpins_ret
08ce8     2D 00 64 FD | 	ret
08cec                 | 
08cec                 | _ff_cc_ld_word_0253
08cec     01 76 06 F1 | 	add	arg01, #1
08cf0     3B 31 C2 FA | 	rdbyte	result1, arg01
08cf4     01 76 86 F1 | 	sub	arg01, #1
08cf8     07 30 46 F7 | 	zerox	result1, #7
08cfc     0F 30 46 F7 | 	zerox	result1, #15
08d00     08 30 66 F0 | 	shl	result1, #8
08d04     3B 37 C2 FA | 	rdbyte	_var01, arg01
08d08     1B 31 42 F5 | 	or	result1, _var01
08d0c                 | ' {
08d0c                 | ' 	WORD rv;
08d0c                 | ' 
08d0c                 | ' 	rv = ptr[1];
08d0c                 | ' 	rv = rv << 8 | ptr[0];
08d0c                 | ' 	return rv;
08d0c                 | _ff_cc_ld_word_0253_ret
08d0c     2D 00 64 FD | 	ret
08d10                 | 
08d10                 | _ff_cc_ld_dword_0255
08d10     03 76 06 F1 | 	add	arg01, #3
08d14     3B 31 C2 FA | 	rdbyte	result1, arg01
08d18     08 30 66 F0 | 	shl	result1, #8
08d1c     01 76 86 F1 | 	sub	arg01, #1
08d20     3B 37 C2 FA | 	rdbyte	_var01, arg01
08d24     1B 31 42 F5 | 	or	result1, _var01
08d28     08 30 66 F0 | 	shl	result1, #8
08d2c     01 76 86 F1 | 	sub	arg01, #1
08d30     3B 37 C2 FA | 	rdbyte	_var01, arg01
08d34     01 76 86 F1 | 	sub	arg01, #1
08d38     07 36 46 F7 | 	zerox	_var01, #7
08d3c     1B 31 42 F5 | 	or	result1, _var01
08d40     08 30 66 F0 | 	shl	result1, #8
08d44     3B 37 C2 FA | 	rdbyte	_var01, arg01
08d48     1B 31 42 F5 | 	or	result1, _var01
08d4c                 | ' {
08d4c                 | ' 	DWORD rv;
08d4c                 | ' 
08d4c                 | ' 	rv = ptr[3];
08d4c                 | ' 	rv = rv << 8 | ptr[2];
08d4c                 | ' 	rv = rv << 8 | ptr[1];
08d4c                 | ' 	rv = rv << 8 | ptr[0];
08d4c                 | ' 	return rv;
08d4c                 | _ff_cc_ld_dword_0255_ret
08d4c     2D 00 64 FD | 	ret
08d50                 | 
08d50                 | _ff_cc_st_word_0256
08d50     3C 37 02 F6 | 	mov	_var01, arg02
08d54     0F 36 46 F7 | 	zerox	_var01, #15
08d58     3B 37 42 FC | 	wrbyte	_var01, arg01
08d5c     0F 78 46 F7 | 	zerox	arg02, #15
08d60     08 78 46 F0 | 	shr	arg02, #8
08d64     01 76 06 F1 | 	add	arg01, #1
08d68     0F 78 46 F7 | 	zerox	arg02, #15
08d6c     3B 79 42 FC | 	wrbyte	arg02, arg01
08d70                 | _ff_cc_st_word_0256_ret
08d70     2D 00 64 FD | 	ret
08d74                 | 
08d74                 | _ff_cc_st_dword_0257
08d74     3B 79 42 FC | 	wrbyte	arg02, arg01
08d78     08 78 46 F0 | 	shr	arg02, #8
08d7c     01 76 06 F1 | 	add	arg01, #1
08d80     3B 79 42 FC | 	wrbyte	arg02, arg01
08d84     08 78 46 F0 | 	shr	arg02, #8
08d88     01 76 06 F1 | 	add	arg01, #1
08d8c     3B 79 42 FC | 	wrbyte	arg02, arg01
08d90     08 78 46 F0 | 	shr	arg02, #8
08d94     01 76 06 F1 | 	add	arg01, #1
08d98     3B 79 42 FC | 	wrbyte	arg02, arg01
08d9c                 | _ff_cc_st_dword_0257_ret
08d9c     2D 00 64 FD | 	ret
08da0                 | 
08da0                 | _ff_cc_mem_cpy_0260
08da0     00 7A 0E F2 | 	cmp	arg03, #0 wz
08da4     24 00 90 AD |  if_e	jmp	#LR__0510
08da8                 | ' 		do {
08da8     70 72 9F FE | 	loc	pa,	#(@LR__0508-@LR__0506)
08dac     93 00 A0 FD | 	call	#FCACHE_LOAD_
08db0                 | LR__0506
08db0     3D 0D D8 FC | 	rep	@LR__0509, arg03
08db4                 | LR__0507
08db4     3C 37 02 F6 | 	mov	_var01, arg02
08db8     01 36 06 F1 | 	add	_var01, #1
08dbc     3C 39 C2 FA | 	rdbyte	_var02, arg02
08dc0     1B 79 02 F6 | 	mov	arg02, _var01
08dc4     3B 39 42 FC | 	wrbyte	_var02, arg01
08dc8     01 76 06 F1 | 	add	arg01, #1
08dcc                 | LR__0508
08dcc                 | LR__0509
08dcc                 | LR__0510
08dcc                 | _ff_cc_mem_cpy_0260_ret
08dcc     2D 00 64 FD | 	ret
08dd0                 | 
08dd0                 | _ff_cc_mem_cmp_0266
08dd0     54 72 9F FE | 	loc	pa,	#(@LR__0512-@LR__0511)
08dd4     93 00 A0 FD | 	call	#FCACHE_LOAD_
08dd8                 | ' 
08dd8                 | ' 	do {
08dd8                 | LR__0511
08dd8     3B 37 C2 FA | 	rdbyte	_var01, arg01
08ddc     3C 39 C2 FA | 	rdbyte	_var02, arg02
08de0     1C 37 82 F1 | 	sub	_var01, _var02
08de4     01 7A 86 F1 | 	sub	arg03, #1
08de8     3D 7B 0A F6 | 	mov	arg03, arg03 wz
08dec     01 76 06 F1 | 	add	arg01, #1
08df0     01 78 06 F1 | 	add	arg02, #1
08df4     08 00 90 AD |  if_e	jmp	#LR__0513
08df8     00 36 0E F2 | 	cmp	_var01, #0 wz
08dfc     D8 FF 9F AD |  if_e	jmp	#LR__0511
08e00                 | LR__0512
08e00                 | LR__0513
08e00                 | ' 
08e00                 | ' 	return r;
08e00     1B 31 02 F6 | 	mov	result1, _var01
08e04                 | _ff_cc_mem_cmp_0266_ret
08e04     2D 00 64 FD | 	ret
08e08                 | 
08e08                 | _ff_cc_chk_chr_0267
08e08     0C 72 9F FE | 	loc	pa,	#(@LR__0515-@LR__0514)
08e0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
08e10                 | ' {
08e10                 | ' 	while (*str && *str != chr) str++;
08e10                 | LR__0514
08e10     3B 37 CA FA | 	rdbyte	_var01, arg01 wz
08e14     10 00 90 AD |  if_e	jmp	#LR__0516
08e18     3B 39 C2 FA | 	rdbyte	_var02, arg01
08e1c     3C 39 0A F2 | 	cmp	_var02, arg02 wz
08e20     01 76 06 51 |  if_ne	add	arg01, #1
08e24     E8 FF 9F 5D |  if_ne	jmp	#LR__0514
08e28                 | LR__0515
08e28                 | LR__0516
08e28                 | ' 	return *str;
08e28     3B 31 C2 FA | 	rdbyte	result1, arg01
08e2c                 | _ff_cc_chk_chr_0267_ret
08e2c     2D 00 64 FD | 	ret
08e30                 | 
08e30                 | _ff_cc_sync_window_0271
08e30     06 5A 05 F6 | 	mov	COUNT_, #6
08e34     B0 00 A0 FD | 	call	#pushregs_
08e38     3B 85 02 F6 | 	mov	local01, arg01
08e3c     00 86 06 F6 | 	mov	local02, #0
08e40     03 84 06 F1 | 	add	local01, #3
08e44     42 89 CA FA | 	rdbyte	local03, local01 wz
08e48     03 84 86 F1 | 	sub	local01, #3
08e4c     A8 00 90 AD |  if_e	jmp	#LR__0519
08e50     01 84 06 F1 | 	add	local01, #1
08e54     42 77 C2 FA | 	rdbyte	arg01, local01
08e58     2F 84 06 F1 | 	add	local01, #47
08e5c     42 79 02 F6 | 	mov	arg02, local01
08e60     04 84 86 F1 | 	sub	local01, #4
08e64     42 7B 02 FB | 	rdlong	arg03, local01
08e68     2C 84 86 F1 | 	sub	local01, #44
08e6c     01 7C 06 F6 | 	mov	arg04, #1
08e70     C0 FA BF FD | 	call	#_ff_cc_disk_write
08e74     00 30 0E F2 | 	cmp	result1, #0 wz
08e78     78 00 90 5D |  if_ne	jmp	#LR__0517
08e7c     03 84 06 F1 | 	add	local01, #3
08e80     42 01 48 FC | 	wrbyte	#0, local01
08e84     29 84 06 F1 | 	add	local01, #41
08e88     42 89 02 FB | 	rdlong	local03, local01
08e8c     0C 84 86 F1 | 	sub	local01, #12
08e90     42 8B 02 FB | 	rdlong	local04, local01
08e94     45 89 82 F1 | 	sub	local03, local04
08e98     08 84 86 F1 | 	sub	local01, #8
08e9c     42 8D 02 FB | 	rdlong	local05, local01
08ea0     18 84 86 F1 | 	sub	local01, #24
08ea4     46 89 1A F2 | 	cmp	local03, local05 wcz
08ea8     4C 00 90 3D |  if_ae	jmp	#LR__0518
08eac     02 84 06 F1 | 	add	local01, #2
08eb0     42 89 C2 FA | 	rdbyte	local03, local01
08eb4     02 84 86 F1 | 	sub	local01, #2
08eb8     07 88 46 F7 | 	zerox	local03, #7
08ebc     02 88 0E F2 | 	cmp	local03, #2 wz
08ec0     34 00 90 5D |  if_ne	jmp	#LR__0518
08ec4     01 84 06 F1 | 	add	local01, #1
08ec8     42 77 C2 FA | 	rdbyte	arg01, local01
08ecc     2F 84 06 F1 | 	add	local01, #47
08ed0     42 79 02 F6 | 	mov	arg02, local01
08ed4     04 84 86 F1 | 	sub	local01, #4
08ed8     42 7B 02 FB | 	rdlong	arg03, local01
08edc     14 84 86 F1 | 	sub	local01, #20
08ee0     42 8F 02 FB | 	rdlong	local06, local01
08ee4     47 7B 02 F1 | 	add	arg03, local06
08ee8     01 7C 06 F6 | 	mov	arg04, #1
08eec     44 FA BF FD | 	call	#_ff_cc_disk_write
08ef0     04 00 90 FD | 	jmp	#LR__0518
08ef4                 | LR__0517
08ef4     01 86 06 F6 | 	mov	local02, #1
08ef8                 | LR__0518
08ef8                 | LR__0519
08ef8                 | ' 			res = FR_DISK_ERR;
08ef8                 | ' 		}
08ef8                 | ' 	}
08ef8                 | ' 	return res;
08ef8     43 31 02 F6 | 	mov	result1, local02
08efc     AF F0 03 F6 | 	mov	ptra, fp
08f00     BF 00 A0 FD | 	call	#popregs_
08f04                 | _ff_cc_sync_window_0271_ret
08f04     2D 00 64 FD | 	ret
08f08                 | 
08f08                 | _ff_cc_move_window_0273
08f08     04 5A 05 F6 | 	mov	COUNT_, #4
08f0c     B0 00 A0 FD | 	call	#pushregs_
08f10     3B 85 02 F6 | 	mov	local01, arg01
08f14     3C 87 02 F6 | 	mov	local02, arg02
08f18     00 88 06 F6 | 	mov	local03, #0
08f1c     2C 84 06 F1 | 	add	local01, #44
08f20     42 8B 02 FB | 	rdlong	local04, local01
08f24     2C 84 86 F1 | 	sub	local01, #44
08f28     45 87 0A F2 | 	cmp	local02, local04 wz
08f2c     44 00 90 AD |  if_e	jmp	#LR__0521
08f30     42 77 02 F6 | 	mov	arg01, local01
08f34     F8 FE BF FD | 	call	#_ff_cc_sync_window_0271
08f38     18 89 0A F6 | 	mov	local03, result1 wz
08f3c     34 00 90 5D |  if_ne	jmp	#LR__0520
08f40     01 84 06 F1 | 	add	local01, #1
08f44     42 77 C2 FA | 	rdbyte	arg01, local01
08f48     2F 84 06 F1 | 	add	local01, #47
08f4c     42 79 02 F6 | 	mov	arg02, local01
08f50     30 84 86 F1 | 	sub	local01, #48
08f54     43 7B 02 F6 | 	mov	arg03, local02
08f58     01 7C 06 F6 | 	mov	arg04, #1
08f5c     04 F9 BF FD | 	call	#_ff_cc_disk_read
08f60     00 30 0E F2 | 	cmp	result1, #0 wz
08f64     01 86 66 56 |  if_ne	neg	local02, #1
08f68     01 88 06 56 |  if_ne	mov	local03, #1
08f6c     2C 84 06 F1 | 	add	local01, #44
08f70     42 87 62 FC | 	wrlong	local02, local01
08f74                 | LR__0520
08f74                 | LR__0521
08f74                 | ' 				sect = (LBA_t)0 - 1;
08f74                 | ' 				res = FR_DISK_ERR;
08f74                 | ' 			}
08f74                 | ' 			fs->winsect = sect;
08f74                 | ' 		}
08f74                 | ' 	}
08f74                 | ' 	return res;
08f74     44 31 02 F6 | 	mov	result1, local03
08f78     AF F0 03 F6 | 	mov	ptra, fp
08f7c     BF 00 A0 FD | 	call	#popregs_
08f80                 | _ff_cc_move_window_0273_ret
08f80     2D 00 64 FD | 	ret
08f84                 | 
08f84                 | _ff_cc_sync_fs_0275
08f84     0A 5A 05 F6 | 	mov	COUNT_, #10
08f88     B0 00 A0 FD | 	call	#pushregs_
08f8c     3B 85 02 F6 | 	mov	local01, arg01
08f90     9C FE BF FD | 	call	#_ff_cc_sync_window_0271
08f94     18 87 0A F6 | 	mov	local02, result1 wz
08f98     54 01 90 5D |  if_ne	jmp	#LR__0527
08f9c     42 89 C2 FA | 	rdbyte	local03, local01
08fa0     03 88 0E F2 | 	cmp	local03, #3 wz
08fa4     2C 01 90 5D |  if_ne	jmp	#LR__0526
08fa8     04 84 06 F1 | 	add	local01, #4
08fac     42 8B C2 FA | 	rdbyte	local04, local01
08fb0     04 84 86 F1 | 	sub	local01, #4
08fb4     07 8A 46 F7 | 	zerox	local04, #7
08fb8     01 8A 0E F2 | 	cmp	local04, #1 wz
08fbc     14 01 90 5D |  if_ne	jmp	#LR__0526
08fc0     30 84 06 F1 | 	add	local01, #48
08fc4     42 77 02 F6 | 	mov	arg01, local01
08fc8     30 84 86 F1 | 	sub	local01, #48
08fcc     00 78 06 F6 | 	mov	arg02, #0
08fd0     09 7A C6 F9 | 	decod	arg03, #9
08fd4                 | ' {
08fd4                 | ' 	BYTE *d = (BYTE*)dst;
08fd4                 | ' 
08fd4                 | ' 	do {
08fd4     34 70 9F FE | 	loc	pa,	#(@LR__0524-@LR__0522)
08fd8     93 00 A0 FD | 	call	#FCACHE_LOAD_
08fdc                 | LR__0522
08fdc     3D 05 D8 FC | 	rep	@LR__0525, arg03
08fe0                 | LR__0523
08fe0     3B 79 42 FC | 	wrbyte	arg02, arg01
08fe4     01 76 06 F1 | 	add	arg01, #1
08fe8                 | LR__0524
08fe8                 | LR__0525
08fe8     30 84 06 F1 | 	add	local01, #48
08fec     42 77 02 F6 | 	mov	arg01, local01
08ff0     30 84 86 F1 | 	sub	local01, #48
08ff4     FE 77 06 F1 | 	add	arg01, #510
08ff8     55 00 00 FF 
08ffc     55 78 06 F6 | 	mov	arg02, ##43605
09000     4C FD BF FD | 	call	#_ff_cc_st_word_0256
09004     30 84 06 F1 | 	add	local01, #48
09008     42 77 02 F6 | 	mov	arg01, local01
0900c     30 84 86 F1 | 	sub	local01, #48
09010     A9 B0 20 FF 
09014     52 78 06 F6 | 	mov	arg02, ##1096897106
09018     58 FD BF FD | 	call	#_ff_cc_st_dword_0257
0901c     30 84 06 F1 | 	add	local01, #48
09020     42 77 02 F6 | 	mov	arg01, local01
09024     30 84 86 F1 | 	sub	local01, #48
09028     E4 77 06 F1 | 	add	arg01, #484
0902c     B9 A0 30 FF 
09030     72 78 06 F6 | 	mov	arg02, ##1631679090
09034     3C FD BF FD | 	call	#_ff_cc_st_dword_0257
09038     30 84 06 F1 | 	add	local01, #48
0903c     42 77 02 F6 | 	mov	arg01, local01
09040     E8 77 06 F1 | 	add	arg01, #488
09044     20 84 86 F1 | 	sub	local01, #32
09048     42 79 02 FB | 	rdlong	arg02, local01
0904c     10 84 86 F1 | 	sub	local01, #16
09050     20 FD BF FD | 	call	#_ff_cc_st_dword_0257
09054     30 84 06 F1 | 	add	local01, #48
09058     42 77 02 F6 | 	mov	arg01, local01
0905c     EC 77 06 F1 | 	add	arg01, #492
09060     24 84 86 F1 | 	sub	local01, #36
09064     42 79 02 FB | 	rdlong	arg02, local01
09068     0C 84 86 F1 | 	sub	local01, #12
0906c     04 FD BF FD | 	call	#_ff_cc_st_dword_0257
09070     1C 84 06 F1 | 	add	local01, #28
09074     42 89 02 FB | 	rdlong	local03, local01
09078     01 88 06 F1 | 	add	local03, #1
0907c     10 84 06 F1 | 	add	local01, #16
09080     42 89 62 FC | 	wrlong	local03, local01
09084     2B 84 86 F1 | 	sub	local01, #43
09088     42 8B C2 FA | 	rdbyte	local04, local01
0908c     2F 84 06 F1 | 	add	local01, #47
09090     42 8D 02 F6 | 	mov	local05, local01
09094     46 8F 02 F6 | 	mov	local06, local05
09098     04 84 86 F1 | 	sub	local01, #4
0909c     42 91 02 FB | 	rdlong	local07, local01
090a0     2C 84 86 F1 | 	sub	local01, #44
090a4     48 93 02 F6 | 	mov	local08, local07
090a8     01 94 06 F6 | 	mov	local09, #1
090ac     45 77 02 F6 | 	mov	arg01, local04
090b0     47 79 02 F6 | 	mov	arg02, local06
090b4     49 7B 02 F6 | 	mov	arg03, local08
090b8     01 7C 06 F6 | 	mov	arg04, #1
090bc     74 F8 BF FD | 	call	#_ff_cc_disk_write
090c0     18 97 02 F6 | 	mov	local10, result1
090c4     00 88 06 F6 | 	mov	local03, #0
090c8     04 84 06 F1 | 	add	local01, #4
090cc     42 01 48 FC | 	wrbyte	#0, local01
090d0     04 84 86 F1 | 	sub	local01, #4
090d4                 | LR__0526
090d4     01 84 06 F1 | 	add	local01, #1
090d8     42 77 C2 FA | 	rdbyte	arg01, local01
090dc     00 78 06 F6 | 	mov	arg02, #0
090e0     00 7A 06 F6 | 	mov	arg03, #0
090e4     68 F9 BF FD | 	call	#_ff_cc_disk_ioctl
090e8     00 30 0E F2 | 	cmp	result1, #0 wz
090ec     01 86 06 56 |  if_ne	mov	local02, #1
090f0                 | LR__0527
090f0                 | ' 	}
090f0                 | ' 
090f0                 | ' 	return res;
090f0     43 31 02 F6 | 	mov	result1, local02
090f4     AF F0 03 F6 | 	mov	ptra, fp
090f8     BF 00 A0 FD | 	call	#popregs_
090fc                 | _ff_cc_sync_fs_0275_ret
090fc     2D 00 64 FD | 	ret
09100                 | 
09100                 | _ff_cc_clst2sect_0276
09100     02 78 86 F1 | 	sub	arg02, #2
09104     14 76 06 F1 | 	add	arg01, #20
09108     3B 37 02 FB | 	rdlong	_var01, arg01
0910c     14 76 86 F1 | 	sub	arg01, #20
09110     02 36 86 F1 | 	sub	_var01, #2
09114     1B 79 1A F2 | 	cmp	arg02, _var01 wcz
09118     00 30 06 36 |  if_ae	mov	result1, #0
0911c     1C 00 90 3D |  if_ae	jmp	#_ff_cc_clst2sect_0276_ret
09120                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
09120     0A 76 06 F1 | 	add	arg01, #10
09124     3B 39 E2 FA | 	rdword	_var02, arg01
09128     3C 39 02 FD | 	qmul	_var02, arg02
0912c     18 3A 62 FD | 	getqx	_var03
09130     1E 76 06 F1 | 	add	arg01, #30
09134     3B 31 02 FB | 	rdlong	result1, arg01
09138     1D 31 02 F1 | 	add	result1, _var03
0913c                 | _ff_cc_clst2sect_0276_ret
0913c     2D 00 64 FD | 	ret
09140                 | 
09140                 | _ff_cc_get_fat_0281
09140     0C 5A 05 F6 | 	mov	COUNT_, #12
09144     B0 00 A0 FD | 	call	#pushregs_
09148     3B 85 02 F6 | 	mov	local01, arg01
0914c     3C 87 02 F6 | 	mov	local02, arg02
09150     42 89 02 FB | 	rdlong	local03, local01
09154     02 86 1E F2 | 	cmp	local02, #2 wcz
09158     18 00 90 CD |  if_b	jmp	#LR__0528
0915c     14 88 06 F1 | 	add	local03, #20
09160     44 8B 02 FB | 	rdlong	local04, local03
09164     14 88 86 F1 | 	sub	local03, #20
09168     45 8D 02 F6 | 	mov	local05, local04
0916c     46 87 1A F2 | 	cmp	local02, local05 wcz
09170     08 00 90 CD |  if_b	jmp	#LR__0529
09174                 | LR__0528
09174     01 8E 06 F6 | 	mov	local06, #1
09178     7C 01 90 FD | 	jmp	#LR__0536
0917c                 | LR__0529
0917c     01 8E 66 F6 | 	neg	local06, #1
09180                 | ' 		val = 0xFFFFFFFF;
09180                 | ' 
09180                 | ' 		switch (fs->fs_type) {
09180     44 91 C2 FA | 	rdbyte	local07, local03
09184     01 90 86 F1 | 	sub	local07, #1
09188     03 90 26 F3 | 	fle	local07, #3
0918c     30 90 62 FD | 	jmprel	local07
09190                 | LR__0530
09190     0C 00 90 FD | 	jmp	#LR__0531
09194     BC 00 90 FD | 	jmp	#LR__0532
09198     04 01 90 FD | 	jmp	#LR__0533
0919c     54 01 90 FD | 	jmp	#LR__0534
091a0                 | LR__0531
091a0     43 93 02 F6 | 	mov	local08, local02
091a4     43 8B 02 F6 | 	mov	local04, local02
091a8     01 8A 46 F0 | 	shr	local04, #1
091ac     45 93 02 F1 | 	add	local08, local04
091b0     44 77 02 F6 | 	mov	arg01, local03
091b4     49 95 02 F6 | 	mov	local09, local08
091b8     09 94 46 F0 | 	shr	local09, #9
091bc     20 88 06 F1 | 	add	local03, #32
091c0     44 79 02 FB | 	rdlong	arg02, local03
091c4     20 88 86 F1 | 	sub	local03, #32
091c8     4A 79 02 F1 | 	add	arg02, local09
091cc     38 FD BF FD | 	call	#_ff_cc_move_window_0273
091d0     00 30 0E F2 | 	cmp	result1, #0 wz
091d4     20 01 90 5D |  if_ne	jmp	#LR__0535
091d8     49 97 02 F6 | 	mov	local10, local08
091dc     FF 97 06 F5 | 	and	local10, #511
091e0     30 88 06 F1 | 	add	local03, #48
091e4     44 97 02 F1 | 	add	local10, local03
091e8     4B 99 C2 FA | 	rdbyte	local11, local10
091ec     30 88 86 F1 | 	sub	local03, #48
091f0     44 77 02 F6 | 	mov	arg01, local03
091f4     01 92 06 F1 | 	add	local08, #1
091f8     49 95 02 F6 | 	mov	local09, local08
091fc     09 94 46 F0 | 	shr	local09, #9
09200     20 88 06 F1 | 	add	local03, #32
09204     44 79 02 FB | 	rdlong	arg02, local03
09208     20 88 86 F1 | 	sub	local03, #32
0920c     4A 79 02 F1 | 	add	arg02, local09
09210     F4 FC BF FD | 	call	#_ff_cc_move_window_0273
09214     00 30 0E F2 | 	cmp	result1, #0 wz
09218     DC 00 90 5D |  if_ne	jmp	#LR__0535
0921c     FF 93 06 F5 | 	and	local08, #511
09220     30 88 06 F1 | 	add	local03, #48
09224     44 93 02 F1 | 	add	local08, local03
09228     49 8B C2 FA | 	rdbyte	local04, local08
0922c     08 8A 66 F0 | 	shl	local04, #8
09230     45 99 42 F5 | 	or	local11, local04
09234     01 86 CE F7 | 	test	local02, #1 wz
09238     04 98 46 50 |  if_ne	shr	local11, #4
0923c     4C 8D 02 56 |  if_ne	mov	local05, local11
09240     07 00 00 AF 
09244     FF 99 06 A5 |  if_e	and	local11, ##4095
09248     4C 8D 02 A6 |  if_e	mov	local05, local11
0924c     46 8F 02 F6 | 	mov	local06, local05
09250                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
09250                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
09250                 | ' 			break;
09250     A4 00 90 FD | 	jmp	#LR__0535
09254                 | LR__0532
09254     44 77 02 F6 | 	mov	arg01, local03
09258     43 95 02 F6 | 	mov	local09, local02
0925c     08 94 46 F0 | 	shr	local09, #8
09260     20 88 06 F1 | 	add	local03, #32
09264     44 79 02 FB | 	rdlong	arg02, local03
09268     20 88 86 F1 | 	sub	local03, #32
0926c     4A 79 02 F1 | 	add	arg02, local09
09270     94 FC BF FD | 	call	#_ff_cc_move_window_0273
09274     00 30 0E F2 | 	cmp	result1, #0 wz
09278     7C 00 90 5D |  if_ne	jmp	#LR__0535
0927c     30 88 06 F1 | 	add	local03, #48
09280     01 86 66 F0 | 	shl	local02, #1
09284     FF 87 06 F5 | 	and	local02, #511
09288     43 89 02 F1 | 	add	local03, local02
0928c     44 77 02 F6 | 	mov	arg01, local03
09290     58 FA BF FD | 	call	#_ff_cc_ld_word_0253
09294     0F 30 46 F7 | 	zerox	result1, #15
09298     18 8F 02 F6 | 	mov	local06, result1
0929c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
0929c                 | ' 			break;
0929c     58 00 90 FD | 	jmp	#LR__0535
092a0                 | LR__0533
092a0     44 77 02 F6 | 	mov	arg01, local03
092a4     43 95 02 F6 | 	mov	local09, local02
092a8     07 94 46 F0 | 	shr	local09, #7
092ac     20 88 06 F1 | 	add	local03, #32
092b0     44 79 02 FB | 	rdlong	arg02, local03
092b4     20 88 86 F1 | 	sub	local03, #32
092b8     4A 79 02 F1 | 	add	arg02, local09
092bc     48 FC BF FD | 	call	#_ff_cc_move_window_0273
092c0     00 30 0E F2 | 	cmp	result1, #0 wz
092c4     30 00 90 5D |  if_ne	jmp	#LR__0535
092c8     30 88 06 F1 | 	add	local03, #48
092cc     44 77 02 F6 | 	mov	arg01, local03
092d0     43 9B 02 F6 | 	mov	local12, local02
092d4     02 9A 66 F0 | 	shl	local12, #2
092d8     FF 9B 06 F5 | 	and	local12, #511
092dc     4D 77 02 F1 | 	add	arg01, local12
092e0     2C FA BF FD | 	call	#_ff_cc_ld_dword_0255
092e4     18 8F 02 F6 | 	mov	local06, result1
092e8     FF FF 07 FF 
092ec     FF 8F 06 F5 | 	and	local06, ##268435455
092f0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
092f0                 | ' 			break;
092f0     04 00 90 FD | 	jmp	#LR__0535
092f4                 | LR__0534
092f4     01 8E 06 F6 | 	mov	local06, #1
092f8                 | LR__0535
092f8                 | LR__0536
092f8                 | ' 			val = 1;
092f8                 | ' 		}
092f8                 | ' 	}
092f8                 | ' 
092f8                 | ' 	return val;
092f8     47 31 02 F6 | 	mov	result1, local06
092fc     AF F0 03 F6 | 	mov	ptra, fp
09300     BF 00 A0 FD | 	call	#popregs_
09304                 | _ff_cc_get_fat_0281_ret
09304     2D 00 64 FD | 	ret
09308                 | 
09308                 | _ff_cc_put_fat_0285
09308     10 5A 05 F6 | 	mov	COUNT_, #16
0930c     B0 00 A0 FD | 	call	#pushregs_
09310     3B 85 02 F6 | 	mov	local01, arg01
09314     3C 87 02 F6 | 	mov	local02, arg02
09318     3D 89 02 F6 | 	mov	local03, arg03
0931c     02 8A 06 F6 | 	mov	local04, #2
09320     02 86 1E F2 | 	cmp	local02, #2 wcz
09324     D0 02 90 CD |  if_b	jmp	#LR__0546
09328     14 84 06 F1 | 	add	local01, #20
0932c     42 8D 02 FB | 	rdlong	local05, local01
09330     14 84 86 F1 | 	sub	local01, #20
09334     46 8F 02 F6 | 	mov	local06, local05
09338     47 87 1A F2 | 	cmp	local02, local06 wcz
0933c     B8 02 90 3D |  if_ae	jmp	#LR__0546
09340                 | ' 		switch (fs->fs_type) {
09340     42 91 C2 FA | 	rdbyte	local07, local01
09344     01 90 86 F1 | 	sub	local07, #1
09348     03 90 26 F3 | 	fle	local07, #3
0934c     30 90 62 FD | 	jmprel	local07
09350                 | LR__0537
09350     0C 00 90 FD | 	jmp	#LR__0538
09354     54 01 90 FD | 	jmp	#LR__0543
09358     D8 01 90 FD | 	jmp	#LR__0544
0935c     98 02 90 FD | 	jmp	#LR__0545
09360                 | LR__0538
09360     43 93 02 F6 | 	mov	local08, local02
09364     43 8D 02 F6 | 	mov	local05, local02
09368     01 8C 46 F0 | 	shr	local05, #1
0936c     46 93 02 F1 | 	add	local08, local05
09370     42 8F 02 F6 | 	mov	local06, local01
09374     49 95 02 F6 | 	mov	local09, local08
09378     09 94 46 F0 | 	shr	local09, #9
0937c     20 84 06 F1 | 	add	local01, #32
09380     42 97 02 FB | 	rdlong	local10, local01
09384     20 84 86 F1 | 	sub	local01, #32
09388     4B 8D 02 F6 | 	mov	local05, local10
0938c     4A 8D 02 F1 | 	add	local05, local09
09390     46 99 02 F6 | 	mov	local11, local05
09394     47 77 02 F6 | 	mov	arg01, local06
09398     4C 79 02 F6 | 	mov	arg02, local11
0939c     68 FB BF FD | 	call	#_ff_cc_move_window_0273
093a0     18 9B 02 F6 | 	mov	local12, result1
093a4     4D 8B 0A F6 | 	mov	local04, local12 wz
093a8     4C 02 90 5D |  if_ne	jmp	#LR__0545
093ac     30 84 06 F1 | 	add	local01, #48
093b0     42 9D 02 F6 | 	mov	local13, local01
093b4     49 9B 02 F6 | 	mov	local12, local08
093b8     FF 9B 06 F5 | 	and	local12, #511
093bc     4D 9D 02 F1 | 	add	local13, local12
093c0     01 86 CE F7 | 	test	local02, #1 wz
093c4     30 84 86 F1 | 	sub	local01, #48
093c8     01 92 06 F1 | 	add	local08, #1
093cc     1C 00 90 AD |  if_e	jmp	#LR__0539
093d0     4E 8F C2 FA | 	rdbyte	local06, local13
093d4     0F 8E 06 F5 | 	and	local06, #15
093d8     44 97 02 F6 | 	mov	local10, local03
093dc     07 96 46 F7 | 	zerox	local10, #7
093e0     04 96 66 F0 | 	shl	local10, #4
093e4     4B 8F 42 F5 | 	or	local06, local10
093e8     04 00 90 FD | 	jmp	#LR__0540
093ec                 | LR__0539
093ec     44 8F 02 F6 | 	mov	local06, local03
093f0                 | LR__0540
093f0     4E 8F 42 FC | 	wrbyte	local06, local13
093f4     03 84 06 F1 | 	add	local01, #3
093f8     42 03 48 FC | 	wrbyte	#1, local01
093fc     03 84 86 F1 | 	sub	local01, #3
09400     42 8F 02 F6 | 	mov	local06, local01
09404     49 95 02 F6 | 	mov	local09, local08
09408     09 94 46 F0 | 	shr	local09, #9
0940c     20 84 06 F1 | 	add	local01, #32
09410     42 97 02 FB | 	rdlong	local10, local01
09414     20 84 86 F1 | 	sub	local01, #32
09418     4B 8D 02 F6 | 	mov	local05, local10
0941c     4A 8D 02 F1 | 	add	local05, local09
09420     46 99 02 F6 | 	mov	local11, local05
09424     47 77 02 F6 | 	mov	arg01, local06
09428     4C 79 02 F6 | 	mov	arg02, local11
0942c     D8 FA BF FD | 	call	#_ff_cc_move_window_0273
09430     18 9B 02 F6 | 	mov	local12, result1
09434     4D 8B 0A F6 | 	mov	local04, local12 wz
09438     BC 01 90 5D |  if_ne	jmp	#LR__0545
0943c     30 84 06 F1 | 	add	local01, #48
09440     42 9D 02 F6 | 	mov	local13, local01
09444     49 95 02 F6 | 	mov	local09, local08
09448     FF 95 06 F5 | 	and	local09, #511
0944c     4A 97 02 F6 | 	mov	local10, local09
09450     4A 9D 02 F1 | 	add	local13, local09
09454     43 8D 02 F6 | 	mov	local05, local02
09458     01 8C 0E F5 | 	and	local05, #1 wz
0945c     30 84 86 F1 | 	sub	local01, #48
09460     10 00 90 AD |  if_e	jmp	#LR__0541
09464     44 95 02 F6 | 	mov	local09, local03
09468     04 94 46 F0 | 	shr	local09, #4
0946c     4A 8F 02 F6 | 	mov	local06, local09
09470     20 00 90 FD | 	jmp	#LR__0542
09474                 | LR__0541
09474     4E 97 C2 FA | 	rdbyte	local10, local13
09478     F0 96 06 F5 | 	and	local10, #240
0947c     44 99 02 F6 | 	mov	local11, local03
09480     08 98 46 F0 | 	shr	local11, #8
09484     07 98 46 F7 | 	zerox	local11, #7
09488     0F 98 06 F5 | 	and	local11, #15
0948c     4C 97 42 F5 | 	or	local10, local11
09490     4B 8F 02 F6 | 	mov	local06, local10
09494                 | LR__0542
09494     4E 8F 42 FC | 	wrbyte	local06, local13
09498     01 8E 06 F6 | 	mov	local06, #1
0949c     03 84 06 F1 | 	add	local01, #3
094a0     42 03 48 FC | 	wrbyte	#1, local01
094a4     03 84 86 F1 | 	sub	local01, #3
094a8                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
094a8                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
094a8                 | ' 			fs->wflag = 1;
094a8                 | ' 			break;
094a8     4C 01 90 FD | 	jmp	#LR__0545
094ac                 | LR__0543
094ac     42 8F 02 F6 | 	mov	local06, local01
094b0     43 95 02 F6 | 	mov	local09, local02
094b4     08 94 46 F0 | 	shr	local09, #8
094b8     20 84 06 F1 | 	add	local01, #32
094bc     42 97 02 FB | 	rdlong	local10, local01
094c0     20 84 86 F1 | 	sub	local01, #32
094c4     4B 8D 02 F6 | 	mov	local05, local10
094c8     4A 8D 02 F1 | 	add	local05, local09
094cc     46 99 02 F6 | 	mov	local11, local05
094d0     47 77 02 F6 | 	mov	arg01, local06
094d4     4C 79 02 F6 | 	mov	arg02, local11
094d8     2C FA BF FD | 	call	#_ff_cc_move_window_0273
094dc     18 9B 02 F6 | 	mov	local12, result1
094e0     4D 8B 0A F6 | 	mov	local04, local12 wz
094e4     10 01 90 5D |  if_ne	jmp	#LR__0545
094e8     30 84 06 F1 | 	add	local01, #48
094ec     42 8D 02 F6 | 	mov	local05, local01
094f0     43 95 02 F6 | 	mov	local09, local02
094f4     01 94 66 F0 | 	shl	local09, #1
094f8     4A 97 02 F6 | 	mov	local10, local09
094fc     FF 97 06 F5 | 	and	local10, #511
09500     4B 99 02 F6 | 	mov	local11, local10
09504     46 9B 02 F6 | 	mov	local12, local05
09508     4C 9B 02 F1 | 	add	local12, local11
0950c     44 9F 02 F6 | 	mov	local14, local03
09510     4D 77 02 F6 | 	mov	arg01, local12
09514     4F 79 02 F6 | 	mov	arg02, local14
09518     30 84 86 F1 | 	sub	local01, #48
0951c     30 F8 BF FD | 	call	#_ff_cc_st_word_0256
09520     01 8E 06 F6 | 	mov	local06, #1
09524     03 84 06 F1 | 	add	local01, #3
09528     42 03 48 FC | 	wrbyte	#1, local01
0952c     03 84 86 F1 | 	sub	local01, #3
09530                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
09530                 | ' 			fs->wflag = 1;
09530                 | ' 			break;
09530     C4 00 90 FD | 	jmp	#LR__0545
09534                 | LR__0544
09534     42 8F 02 F6 | 	mov	local06, local01
09538     43 95 02 F6 | 	mov	local09, local02
0953c     07 94 46 F0 | 	shr	local09, #7
09540     20 84 06 F1 | 	add	local01, #32
09544     42 97 02 FB | 	rdlong	local10, local01
09548     20 84 86 F1 | 	sub	local01, #32
0954c     4B 8D 02 F6 | 	mov	local05, local10
09550     4A 8D 02 F1 | 	add	local05, local09
09554     46 99 02 F6 | 	mov	local11, local05
09558     47 77 02 F6 | 	mov	arg01, local06
0955c     4C 79 02 F6 | 	mov	arg02, local11
09560     A4 F9 BF FD | 	call	#_ff_cc_move_window_0273
09564     18 9B 02 F6 | 	mov	local12, result1
09568     4D 8B 0A F6 | 	mov	local04, local12 wz
0956c     88 00 90 5D |  if_ne	jmp	#LR__0545
09570     FF FF 07 FF 
09574     FF 89 06 F5 | 	and	local03, ##268435455
09578     30 84 06 F1 | 	add	local01, #48
0957c     42 A1 02 F6 | 	mov	local15, local01
09580     43 9F 02 F6 | 	mov	local14, local02
09584     02 9E 66 F0 | 	shl	local14, #2
09588     FF 9F 06 F5 | 	and	local14, #511
0958c     4F A1 02 F1 | 	add	local15, local14
09590     50 77 02 F6 | 	mov	arg01, local15
09594     30 84 86 F1 | 	sub	local01, #48
09598     74 F7 BF FD | 	call	#_ff_cc_ld_dword_0255
0959c     18 A3 02 F6 | 	mov	local16, result1
095a0     51 8D 02 F6 | 	mov	local05, local16
095a4     00 00 78 FF 
095a8     00 8C 06 F5 | 	and	local05, ##-268435456
095ac     46 89 42 F5 | 	or	local03, local05
095b0     30 84 06 F1 | 	add	local01, #48
095b4     42 8D 02 F6 | 	mov	local05, local01
095b8     43 95 02 F6 | 	mov	local09, local02
095bc     02 94 66 F0 | 	shl	local09, #2
095c0     4A 97 02 F6 | 	mov	local10, local09
095c4     FF 97 06 F5 | 	and	local10, #511
095c8     4B 99 02 F6 | 	mov	local11, local10
095cc     46 9B 02 F6 | 	mov	local12, local05
095d0     4C 9B 02 F1 | 	add	local12, local11
095d4     44 9F 02 F6 | 	mov	local14, local03
095d8     4D 77 02 F6 | 	mov	arg01, local12
095dc     4F 79 02 F6 | 	mov	arg02, local14
095e0     30 84 86 F1 | 	sub	local01, #48
095e4     8C F7 BF FD | 	call	#_ff_cc_st_dword_0257
095e8     01 8E 06 F6 | 	mov	local06, #1
095ec     03 84 06 F1 | 	add	local01, #3
095f0     42 03 48 FC | 	wrbyte	#1, local01
095f4     03 84 86 F1 | 	sub	local01, #3
095f8                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
095f8                 | ' 			}
095f8                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
095f8                 | ' 			fs->wflag = 1;
095f8                 | ' 			break;
095f8                 | LR__0545
095f8                 | LR__0546
095f8                 | ' 		}
095f8                 | ' 	}
095f8                 | ' 	return res;
095f8     45 31 02 F6 | 	mov	result1, local04
095fc     AF F0 03 F6 | 	mov	ptra, fp
09600     BF 00 A0 FD | 	call	#popregs_
09604                 | _ff_cc_put_fat_0285_ret
09604     2D 00 64 FD | 	ret
09608                 | 
09608                 | _ff_cc_remove_chain_0289
09608     09 5A 05 F6 | 	mov	COUNT_, #9
0960c     B0 00 A0 FD | 	call	#pushregs_
09610     3B 85 02 F6 | 	mov	local01, arg01
09614     3C 87 02 F6 | 	mov	local02, arg02
09618     3D 89 02 F6 | 	mov	local03, arg03
0961c     42 8B 02 FB | 	rdlong	local04, local01
09620     02 86 1E F2 | 	cmp	local02, #2 wcz
09624     14 00 90 CD |  if_b	jmp	#LR__0547
09628     14 8A 06 F1 | 	add	local04, #20
0962c     45 8D 02 FB | 	rdlong	local05, local04
09630     14 8A 86 F1 | 	sub	local04, #20
09634     46 87 1A F2 | 	cmp	local02, local05 wcz
09638     08 00 90 CD |  if_b	jmp	#LR__0548
0963c                 | LR__0547
0963c     02 30 06 F6 | 	mov	result1, #2
09640     D0 00 90 FD | 	jmp	#LR__0553
09644                 | LR__0548
09644     00 88 0E F2 | 	cmp	local03, #0 wz
09648     1C 00 90 AD |  if_e	jmp	#LR__0549
0964c     45 77 02 F6 | 	mov	arg01, local04
09650     44 79 02 F6 | 	mov	arg02, local03
09654     01 7A 66 F6 | 	neg	arg03, #1
09658     AC FC BF FD | 	call	#_ff_cc_put_fat_0285
0965c     18 8F 0A F6 | 	mov	local06, result1 wz
09660     47 31 02 56 |  if_ne	mov	result1, local06
09664     AC 00 90 5D |  if_ne	jmp	#LR__0553
09668                 | LR__0549
09668                 | ' 	}
09668                 | ' 
09668                 | ' 
09668                 | ' 	do {
09668                 | LR__0550
09668     43 79 02 F6 | 	mov	arg02, local02
0966c     42 77 02 F6 | 	mov	arg01, local01
09670     CC FA BF FD | 	call	#_ff_cc_get_fat_0281
09674     18 91 0A F6 | 	mov	local07, result1 wz
09678     94 00 90 AD |  if_e	jmp	#LR__0552
0967c     01 90 0E F2 | 	cmp	local07, #1 wz
09680     02 30 06 A6 |  if_e	mov	result1, #2
09684     8C 00 90 AD |  if_e	jmp	#LR__0553
09688     FF FF 7F FF 
0968c     FF 91 0E F2 | 	cmp	local07, ##-1 wz
09690     01 30 06 A6 |  if_e	mov	result1, #1
09694     7C 00 90 AD |  if_e	jmp	#LR__0553
09698     45 77 02 F6 | 	mov	arg01, local04
0969c     43 79 02 F6 | 	mov	arg02, local02
096a0     00 7A 06 F6 | 	mov	arg03, #0
096a4     60 FC BF FD | 	call	#_ff_cc_put_fat_0285
096a8     18 8F 0A F6 | 	mov	local06, result1 wz
096ac     47 31 02 56 |  if_ne	mov	result1, local06
096b0     60 00 90 5D |  if_ne	jmp	#LR__0553
096b4     14 8A 06 F1 | 	add	local04, #20
096b8     45 8D 02 FB | 	rdlong	local05, local04
096bc     02 8C 86 F1 | 	sub	local05, #2
096c0     04 8A 86 F1 | 	sub	local04, #4
096c4     45 93 02 FB | 	rdlong	local08, local04
096c8     10 8A 86 F1 | 	sub	local04, #16
096cc     46 93 1A F2 | 	cmp	local08, local05 wcz
096d0     24 00 90 3D |  if_ae	jmp	#LR__0551
096d4     10 8A 06 F1 | 	add	local04, #16
096d8     45 95 02 FB | 	rdlong	local09, local04
096dc     01 94 06 F1 | 	add	local09, #1
096e0     45 95 62 FC | 	wrlong	local09, local04
096e4     0C 8A 86 F1 | 	sub	local04, #12
096e8     45 8D C2 FA | 	rdbyte	local05, local04
096ec     01 8C 46 F5 | 	or	local05, #1
096f0     45 8D 42 FC | 	wrbyte	local05, local04
096f4     04 8A 86 F1 | 	sub	local04, #4
096f8                 | LR__0551
096f8     48 87 02 F6 | 	mov	local02, local07
096fc     14 8A 06 F1 | 	add	local04, #20
09700     45 8D 02 FB | 	rdlong	local05, local04
09704     14 8A 86 F1 | 	sub	local04, #20
09708     46 87 1A F2 | 	cmp	local02, local05 wcz
0970c     58 FF 9F CD |  if_b	jmp	#LR__0550
09710                 | LR__0552
09710                 | ' #line 1531 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
09710                 | ' 	return FR_OK;
09710     00 30 06 F6 | 	mov	result1, #0
09714                 | LR__0553
09714     AF F0 03 F6 | 	mov	ptra, fp
09718     BF 00 A0 FD | 	call	#popregs_
0971c                 | _ff_cc_remove_chain_0289_ret
0971c     2D 00 64 FD | 	ret
09720                 | 
09720                 | _ff_cc_create_chain_0295
09720     0B 5A 05 F6 | 	mov	COUNT_, #11
09724     B0 00 A0 FD | 	call	#pushregs_
09728     3B 85 02 F6 | 	mov	local01, arg01
0972c     3C 87 0A F6 | 	mov	local02, arg02 wz
09730     42 89 02 FB | 	rdlong	local03, local01
09734     2C 00 90 5D |  if_ne	jmp	#LR__0555
09738     0C 88 06 F1 | 	add	local03, #12
0973c     44 8B 0A FB | 	rdlong	local04, local03 wz
09740     0C 88 86 F1 | 	sub	local03, #12
09744     14 00 90 AD |  if_e	jmp	#LR__0554
09748     14 88 06 F1 | 	add	local03, #20
0974c     44 8D 02 FB | 	rdlong	local05, local03
09750     14 88 86 F1 | 	sub	local03, #20
09754     46 8B 1A F2 | 	cmp	local04, local05 wcz
09758     50 00 90 CD |  if_b	jmp	#LR__0556
0975c                 | LR__0554
0975c     01 8A 06 F6 | 	mov	local04, #1
09760     48 00 90 FD | 	jmp	#LR__0556
09764                 | LR__0555
09764     42 77 02 F6 | 	mov	arg01, local01
09768     43 79 02 F6 | 	mov	arg02, local02
0976c     D0 F9 BF FD | 	call	#_ff_cc_get_fat_0281
09770     18 8F 02 F6 | 	mov	local06, result1
09774     02 8E 1E F2 | 	cmp	local06, #2 wcz
09778     01 30 06 C6 |  if_b	mov	result1, #1
0977c     F4 01 90 CD |  if_b	jmp	#LR__0572
09780     FF FF 7F FF 
09784     FF 8F 0E F2 | 	cmp	local06, ##-1 wz
09788     47 31 02 A6 |  if_e	mov	result1, local06
0978c     E4 01 90 AD |  if_e	jmp	#LR__0572
09790     14 88 06 F1 | 	add	local03, #20
09794     44 8D 02 FB | 	rdlong	local05, local03
09798     14 88 86 F1 | 	sub	local03, #20
0979c     46 8F 1A F2 | 	cmp	local06, local05 wcz
097a0     47 31 02 C6 |  if_b	mov	result1, local06
097a4     CC 01 90 CD |  if_b	jmp	#LR__0572
097a8     43 8B 02 F6 | 	mov	local04, local02
097ac                 | LR__0556
097ac     10 88 06 F1 | 	add	local03, #16
097b0     44 8D 0A FB | 	rdlong	local05, local03 wz
097b4     10 88 86 F1 | 	sub	local03, #16
097b8     00 30 06 A6 |  if_e	mov	result1, #0
097bc     B4 01 90 AD |  if_e	jmp	#LR__0572
097c0     00 90 06 F6 | 	mov	local07, #0
097c4     43 8B 0A F2 | 	cmp	local04, local02 wz
097c8     80 00 90 5D |  if_ne	jmp	#LR__0561
097cc     45 91 02 F6 | 	mov	local07, local04
097d0     01 90 06 F1 | 	add	local07, #1
097d4     14 88 06 F1 | 	add	local03, #20
097d8     44 8D 02 FB | 	rdlong	local05, local03
097dc     14 88 86 F1 | 	sub	local03, #20
097e0     46 91 1A F2 | 	cmp	local07, local05 wcz
097e4     02 90 06 36 |  if_ae	mov	local07, #2
097e8     42 8D 02 F6 | 	mov	local05, local01
097ec     48 79 02 F6 | 	mov	arg02, local07
097f0     46 77 02 F6 | 	mov	arg01, local05
097f4     48 F9 BF FD | 	call	#_ff_cc_get_fat_0281
097f8     18 8F 02 F6 | 	mov	local06, result1
097fc     01 8E 0E F2 | 	cmp	local06, #1 wz
09800     0C 00 90 AD |  if_e	jmp	#LR__0557
09804     FF FF 7F FF 
09808     FF 8F 0E F2 | 	cmp	local06, ##-1 wz
0980c     08 00 90 5D |  if_ne	jmp	#LR__0558
09810                 | LR__0557
09810     47 31 02 F6 | 	mov	result1, local06
09814     5C 01 90 FD | 	jmp	#LR__0572
09818                 | LR__0558
09818     00 8E 0E F2 | 	cmp	local06, #0 wz
0981c     2C 00 90 AD |  if_e	jmp	#LR__0560
09820     0C 88 06 F1 | 	add	local03, #12
09824     44 8F 02 FB | 	rdlong	local06, local03
09828     0C 88 86 F1 | 	sub	local03, #12
0982c     02 8E 1E F2 | 	cmp	local06, #2 wcz
09830     14 00 90 CD |  if_b	jmp	#LR__0559
09834     14 88 06 F1 | 	add	local03, #20
09838     44 8D 02 FB | 	rdlong	local05, local03
0983c     14 88 86 F1 | 	sub	local03, #20
09840     46 8F 1A F2 | 	cmp	local06, local05 wcz
09844     47 8B 02 C6 |  if_b	mov	local04, local06
09848                 | LR__0559
09848     00 90 06 F6 | 	mov	local07, #0
0984c                 | LR__0560
0984c                 | LR__0561
0984c     00 90 0E F2 | 	cmp	local07, #0 wz
09850     70 00 90 5D |  if_ne	jmp	#LR__0567
09854     45 91 02 F6 | 	mov	local07, local04
09858                 | ' 			ncl = scl;
09858                 | ' 			for (;;) {
09858                 | LR__0562
09858     01 90 06 F1 | 	add	local07, #1
0985c     14 88 06 F1 | 	add	local03, #20
09860     44 8D 02 FB | 	rdlong	local05, local03
09864     14 88 86 F1 | 	sub	local03, #20
09868     46 91 1A F2 | 	cmp	local07, local05 wcz
0986c     10 00 90 CD |  if_b	jmp	#LR__0563
09870     02 90 06 F6 | 	mov	local07, #2
09874     45 91 1A F2 | 	cmp	local07, local04 wcz
09878     00 30 06 16 |  if_a	mov	result1, #0
0987c     F4 00 90 1D |  if_a	jmp	#LR__0572
09880                 | LR__0563
09880     42 8D 02 F6 | 	mov	local05, local01
09884     48 79 02 F6 | 	mov	arg02, local07
09888     46 77 02 F6 | 	mov	arg01, local05
0988c     B0 F8 BF FD | 	call	#_ff_cc_get_fat_0281
09890     18 8F 0A F6 | 	mov	local06, result1 wz
09894     2C 00 90 AD |  if_e	jmp	#LR__0566
09898     01 8E 0E F2 | 	cmp	local06, #1 wz
0989c     0C 00 90 AD |  if_e	jmp	#LR__0564
098a0     FF FF 7F FF 
098a4     FF 8F 0E F2 | 	cmp	local06, ##-1 wz
098a8     08 00 90 5D |  if_ne	jmp	#LR__0565
098ac                 | LR__0564
098ac     47 31 02 F6 | 	mov	result1, local06
098b0     C0 00 90 FD | 	jmp	#LR__0572
098b4                 | LR__0565
098b4     45 91 0A F2 | 	cmp	local07, local04 wz
098b8     00 30 06 A6 |  if_e	mov	result1, #0
098bc     B4 00 90 AD |  if_e	jmp	#LR__0572
098c0     94 FF 9F FD | 	jmp	#LR__0562
098c4                 | LR__0566
098c4                 | LR__0567
098c4     44 77 02 F6 | 	mov	arg01, local03
098c8     48 79 02 F6 | 	mov	arg02, local07
098cc     01 7A 66 F6 | 	neg	arg03, #1
098d0     34 FA BF FD | 	call	#_ff_cc_put_fat_0285
098d4     18 93 0A F6 | 	mov	local08, result1 wz
098d8     2C 00 90 5D |  if_ne	jmp	#LR__0568
098dc     00 86 0E F2 | 	cmp	local02, #0 wz
098e0     24 00 90 AD |  if_e	jmp	#LR__0568
098e4     44 8D 02 F6 | 	mov	local05, local03
098e8     43 95 02 F6 | 	mov	local09, local02
098ec     48 97 02 F6 | 	mov	local10, local07
098f0     46 77 02 F6 | 	mov	arg01, local05
098f4     4A 79 02 F6 | 	mov	arg02, local09
098f8     4B 7B 02 F6 | 	mov	arg03, local10
098fc     08 FA BF FD | 	call	#_ff_cc_put_fat_0285
09900     18 99 02 F6 | 	mov	local11, result1
09904     4C 93 02 F6 | 	mov	local08, local11
09908                 | LR__0568
09908     00 92 0E F2 | 	cmp	local08, #0 wz
0990c     50 00 90 5D |  if_ne	jmp	#LR__0570
09910     0C 88 06 F1 | 	add	local03, #12
09914     44 91 62 FC | 	wrlong	local07, local03
09918     08 88 06 F1 | 	add	local03, #8
0991c     44 8D 02 FB | 	rdlong	local05, local03
09920     02 8C 86 F1 | 	sub	local05, #2
09924     04 88 86 F1 | 	sub	local03, #4
09928     44 97 02 FB | 	rdlong	local10, local03
0992c     10 88 86 F1 | 	sub	local03, #16
09930     46 97 1A F2 | 	cmp	local10, local05 wcz
09934     14 00 90 1D |  if_a	jmp	#LR__0569
09938     10 88 06 F1 | 	add	local03, #16
0993c     44 97 02 FB | 	rdlong	local10, local03
09940     01 96 86 F1 | 	sub	local10, #1
09944     44 97 62 FC | 	wrlong	local10, local03
09948     10 88 86 F1 | 	sub	local03, #16
0994c                 | LR__0569
0994c     04 88 06 F1 | 	add	local03, #4
09950     44 8D C2 FA | 	rdbyte	local05, local03
09954     01 8C 46 F5 | 	or	local05, #1
09958     44 8D 42 FC | 	wrbyte	local05, local03
0995c     10 00 90 FD | 	jmp	#LR__0571
09960                 | LR__0570
09960     01 92 0E F2 | 	cmp	local08, #1 wz
09964     01 8C 66 A6 |  if_e	neg	local05, #1
09968     01 8C 06 56 |  if_ne	mov	local05, #1
0996c     46 91 02 F6 | 	mov	local07, local05
09970                 | LR__0571
09970                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
09970                 | ' 	}
09970                 | ' 
09970                 | ' 	return ncl;
09970     48 31 02 F6 | 	mov	result1, local07
09974                 | LR__0572
09974     AF F0 03 F6 | 	mov	ptra, fp
09978     BF 00 A0 FD | 	call	#popregs_
0997c                 | _ff_cc_create_chain_0295_ret
0997c     2D 00 64 FD | 	ret
09980                 | 
09980                 | _ff_cc_dir_clear_0300
09980     07 5A 05 F6 | 	mov	COUNT_, #7
09984     B0 00 A0 FD | 	call	#pushregs_
09988     3B 85 02 F6 | 	mov	local01, arg01
0998c     3C 87 02 F6 | 	mov	local02, arg02
09990     42 77 02 F6 | 	mov	arg01, local01
09994     98 F4 BF FD | 	call	#_ff_cc_sync_window_0271
09998     00 30 0E F2 | 	cmp	result1, #0 wz
0999c     01 30 06 56 |  if_ne	mov	result1, #1
099a0     AC 00 90 5D |  if_ne	jmp	#LR__0579
099a4     42 77 02 F6 | 	mov	arg01, local01
099a8     43 79 02 F6 | 	mov	arg02, local02
099ac     50 F7 BF FD | 	call	#_ff_cc_clst2sect_0276
099b0     18 89 02 F6 | 	mov	local03, result1
099b4     2C 84 06 F1 | 	add	local01, #44
099b8     42 89 62 FC | 	wrlong	local03, local01
099bc     04 84 06 F1 | 	add	local01, #4
099c0     42 77 02 F6 | 	mov	arg01, local01
099c4     30 84 86 F1 | 	sub	local01, #48
099c8     00 78 06 F6 | 	mov	arg02, #0
099cc     09 7A C6 F9 | 	decod	arg03, #9
099d0                 | ' {
099d0                 | ' 	BYTE *d = (BYTE*)dst;
099d0                 | ' 
099d0                 | ' 	do {
099d0     38 66 9F FE | 	loc	pa,	#(@LR__0575-@LR__0573)
099d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
099d8                 | LR__0573
099d8     3D 05 D8 FC | 	rep	@LR__0576, arg03
099dc                 | LR__0574
099dc     3B 79 42 FC | 	wrbyte	arg02, arg01
099e0     01 76 06 F1 | 	add	arg01, #1
099e4                 | LR__0575
099e4                 | LR__0576
099e4     30 84 06 F1 | 	add	local01, #48
099e8     42 8B 02 F6 | 	mov	local04, local01
099ec                 | ' #line 1698 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
099ec                 | ' 	{
099ec                 | ' 		ibuf = fs->win; szb = 1;
099ec                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
099ec     00 8C 06 F6 | 	mov	local05, #0
099f0     30 84 86 F1 | 	sub	local01, #48
099f4                 | LR__0577
099f4     0A 84 06 F1 | 	add	local01, #10
099f8     42 8F E2 FA | 	rdword	local06, local01
099fc     0A 84 86 F1 | 	sub	local01, #10
09a00     0F 8E 46 F7 | 	zerox	local06, #15
09a04     47 8D 1A F2 | 	cmp	local05, local06 wcz
09a08     2C 00 90 3D |  if_ae	jmp	#LR__0578
09a0c     01 84 06 F1 | 	add	local01, #1
09a10     42 77 C2 FA | 	rdbyte	arg01, local01
09a14     01 84 86 F1 | 	sub	local01, #1
09a18     45 79 02 F6 | 	mov	arg02, local04
09a1c     44 7B 02 F6 | 	mov	arg03, local03
09a20     46 7B 02 F1 | 	add	arg03, local05
09a24     01 7C 06 F6 | 	mov	arg04, #1
09a28     08 EF BF FD | 	call	#_ff_cc_disk_write
09a2c     00 30 0E F2 | 	cmp	result1, #0 wz
09a30     01 8C 06 A1 |  if_e	add	local05, #1
09a34     BC FF 9F AD |  if_e	jmp	#LR__0577
09a38                 | LR__0578
09a38                 | ' 	}
09a38                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
09a38     0A 84 06 F1 | 	add	local01, #10
09a3c     42 91 E2 FA | 	rdword	local07, local01
09a40     48 8D 0A F2 | 	cmp	local05, local07 wz
09a44     00 8E 06 A6 |  if_e	mov	local06, #0
09a48     01 8E 06 56 |  if_ne	mov	local06, #1
09a4c     47 31 02 F6 | 	mov	result1, local06
09a50                 | LR__0579
09a50     AF F0 03 F6 | 	mov	ptra, fp
09a54     BF 00 A0 FD | 	call	#popregs_
09a58                 | _ff_cc_dir_clear_0300_ret
09a58     2D 00 64 FD | 	ret
09a5c                 | 
09a5c                 | _ff_cc_dir_sdi_0304
09a5c     08 5A 05 F6 | 	mov	COUNT_, #8
09a60     B0 00 A0 FD | 	call	#pushregs_
09a64     3B 85 02 F6 | 	mov	local01, arg01
09a68     3C 87 02 F6 | 	mov	local02, arg02
09a6c     42 89 02 FB | 	rdlong	local03, local01
09a70     00 10 00 FF 
09a74     00 86 1E F2 | 	cmp	local02, ##2097152 wcz
09a78     08 00 90 3D |  if_ae	jmp	#LR__0580
09a7c     1F 86 CE F7 | 	test	local02, #31 wz
09a80     08 00 90 AD |  if_e	jmp	#LR__0581
09a84                 | LR__0580
09a84                 | ' 		return FR_INT_ERR;
09a84     02 30 06 F6 | 	mov	result1, #2
09a88     50 01 90 FD | 	jmp	#LR__0589
09a8c                 | LR__0581
09a8c     10 84 06 F1 | 	add	local01, #16
09a90     42 87 62 FC | 	wrlong	local02, local01
09a94     08 84 86 F1 | 	sub	local01, #8
09a98     42 8B 0A FB | 	rdlong	local04, local01 wz
09a9c     08 84 86 F1 | 	sub	local01, #8
09aa0     1C 00 90 5D |  if_ne	jmp	#LR__0582
09aa4     44 8D C2 FA | 	rdbyte	local05, local03
09aa8     03 8C 1E F2 | 	cmp	local05, #3 wcz
09aac     10 00 90 CD |  if_b	jmp	#LR__0582
09ab0     24 88 06 F1 | 	add	local03, #36
09ab4     44 8D 02 FB | 	rdlong	local05, local03
09ab8     24 88 86 F1 | 	sub	local03, #36
09abc     46 8B 02 F6 | 	mov	local04, local05
09ac0                 | LR__0582
09ac0     00 8A 0E F2 | 	cmp	local04, #0 wz
09ac4     40 00 90 5D |  if_ne	jmp	#LR__0583
09ac8     43 8D 02 F6 | 	mov	local05, local02
09acc     05 8C 46 F0 | 	shr	local05, #5
09ad0     08 88 06 F1 | 	add	local03, #8
09ad4     44 8F E2 FA | 	rdword	local06, local03
09ad8     08 88 86 F1 | 	sub	local03, #8
09adc     0F 8E 46 F7 | 	zerox	local06, #15
09ae0     47 8D 1A F2 | 	cmp	local05, local06 wcz
09ae4     02 30 06 36 |  if_ae	mov	result1, #2
09ae8     F0 00 90 3D |  if_ae	jmp	#LR__0589
09aec     24 88 06 F1 | 	add	local03, #36
09af0     44 8D 02 FB | 	rdlong	local05, local03
09af4     24 88 86 F1 | 	sub	local03, #36
09af8     18 84 06 F1 | 	add	local01, #24
09afc     42 8D 62 FC | 	wrlong	local05, local01
09b00     18 84 86 F1 | 	sub	local01, #24
09b04     80 00 90 FD | 	jmp	#LR__0588
09b08                 | LR__0583
09b08     0A 88 06 F1 | 	add	local03, #10
09b0c     44 91 E2 FA | 	rdword	local07, local03
09b10     0A 88 86 F1 | 	sub	local03, #10
09b14     0F 90 46 F7 | 	zerox	local07, #15
09b18     09 90 66 F0 | 	shl	local07, #9
09b1c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
09b1c                 | ' 		while (ofs >= csz) {
09b1c                 | LR__0584
09b1c     48 87 1A F2 | 	cmp	local02, local07 wcz
09b20     4C 00 90 CD |  if_b	jmp	#LR__0587
09b24     42 77 02 F6 | 	mov	arg01, local01
09b28     45 79 02 F6 | 	mov	arg02, local04
09b2c     10 F6 BF FD | 	call	#_ff_cc_get_fat_0281
09b30     18 8B 02 F6 | 	mov	local04, result1
09b34     FF FF 7F FF 
09b38     FF 8B 0E F2 | 	cmp	local04, ##-1 wz
09b3c     01 30 06 A6 |  if_e	mov	result1, #1
09b40     98 00 90 AD |  if_e	jmp	#LR__0589
09b44     02 8A 1E F2 | 	cmp	local04, #2 wcz
09b48     14 00 90 CD |  if_b	jmp	#LR__0585
09b4c     14 88 06 F1 | 	add	local03, #20
09b50     44 8D 02 FB | 	rdlong	local05, local03
09b54     14 88 86 F1 | 	sub	local03, #20
09b58     46 8B 1A F2 | 	cmp	local04, local05 wcz
09b5c     08 00 90 CD |  if_b	jmp	#LR__0586
09b60                 | LR__0585
09b60     02 30 06 F6 | 	mov	result1, #2
09b64     74 00 90 FD | 	jmp	#LR__0589
09b68                 | LR__0586
09b68     48 87 82 F1 | 	sub	local02, local07
09b6c     AC FF 9F FD | 	jmp	#LR__0584
09b70                 | LR__0587
09b70     44 77 02 F6 | 	mov	arg01, local03
09b74     45 79 02 F6 | 	mov	arg02, local04
09b78     84 F5 BF FD | 	call	#_ff_cc_clst2sect_0276
09b7c     18 84 06 F1 | 	add	local01, #24
09b80     42 31 62 FC | 	wrlong	result1, local01
09b84     18 84 86 F1 | 	sub	local01, #24
09b88                 | LR__0588
09b88     14 84 06 F1 | 	add	local01, #20
09b8c     42 8B 62 FC | 	wrlong	local04, local01
09b90     04 84 06 F1 | 	add	local01, #4
09b94     42 8D 0A FB | 	rdlong	local05, local01 wz
09b98     18 84 86 F1 | 	sub	local01, #24
09b9c     02 30 06 A6 |  if_e	mov	result1, #2
09ba0     38 00 90 AD |  if_e	jmp	#LR__0589
09ba4     43 8F 02 F6 | 	mov	local06, local02
09ba8     09 8E 46 F0 | 	shr	local06, #9
09bac     18 84 06 F1 | 	add	local01, #24
09bb0     42 8D 02 FB | 	rdlong	local05, local01
09bb4     47 8D 02 F1 | 	add	local05, local06
09bb8     42 8D 62 FC | 	wrlong	local05, local01
09bbc     30 88 06 F1 | 	add	local03, #48
09bc0     44 8D 02 F6 | 	mov	local05, local03
09bc4     43 93 02 F6 | 	mov	local08, local02
09bc8     FF 93 06 F5 | 	and	local08, #511
09bcc     49 8D 02 F1 | 	add	local05, local08
09bd0     04 84 06 F1 | 	add	local01, #4
09bd4     42 8D 62 FC | 	wrlong	local05, local01
09bd8                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
09bd8                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
09bd8                 | ' 
09bd8                 | ' 	return FR_OK;
09bd8     00 30 06 F6 | 	mov	result1, #0
09bdc                 | LR__0589
09bdc     AF F0 03 F6 | 	mov	ptra, fp
09be0     BF 00 A0 FD | 	call	#popregs_
09be4                 | _ff_cc_dir_sdi_0304_ret
09be4     2D 00 64 FD | 	ret
09be8                 | 
09be8                 | _ff_cc_dir_next_0308
09be8     09 5A 05 F6 | 	mov	COUNT_, #9
09bec     B0 00 A0 FD | 	call	#pushregs_
09bf0     3B 85 02 F6 | 	mov	local01, arg01
09bf4     3C 87 02 F6 | 	mov	local02, arg02
09bf8     42 89 02 FB | 	rdlong	local03, local01
09bfc     10 84 06 F1 | 	add	local01, #16
09c00     42 8B 02 FB | 	rdlong	local04, local01
09c04     10 84 86 F1 | 	sub	local01, #16
09c08     20 8A 06 F1 | 	add	local04, #32
09c0c     00 10 00 FF 
09c10     00 8A 1E F2 | 	cmp	local04, ##2097152 wcz
09c14     18 84 06 31 |  if_ae	add	local01, #24
09c18     42 01 68 3C |  if_ae	wrlong	#0, local01
09c1c     18 84 86 31 |  if_ae	sub	local01, #24
09c20     18 84 06 F1 | 	add	local01, #24
09c24     42 8D 0A FB | 	rdlong	local05, local01 wz
09c28     18 84 86 F1 | 	sub	local01, #24
09c2c     04 30 06 A6 |  if_e	mov	result1, #4
09c30     7C 01 90 AD |  if_e	jmp	#LR__0596
09c34     FF 8B CE F7 | 	test	local04, #511 wz
09c38     4C 01 90 5D |  if_ne	jmp	#LR__0595
09c3c     18 84 06 F1 | 	add	local01, #24
09c40     42 8F 02 FB | 	rdlong	local06, local01
09c44     01 8E 06 F1 | 	add	local06, #1
09c48     42 8F 62 FC | 	wrlong	local06, local01
09c4c     04 84 86 F1 | 	sub	local01, #4
09c50     42 8D 0A FB | 	rdlong	local05, local01 wz
09c54     14 84 86 F1 | 	sub	local01, #20
09c58     30 00 90 5D |  if_ne	jmp	#LR__0590
09c5c     45 8D 02 F6 | 	mov	local05, local04
09c60     05 8C 46 F0 | 	shr	local05, #5
09c64     08 88 06 F1 | 	add	local03, #8
09c68     44 91 E2 FA | 	rdword	local07, local03
09c6c     08 88 86 F1 | 	sub	local03, #8
09c70     0F 90 46 F7 | 	zerox	local07, #15
09c74     48 8D 1A F2 | 	cmp	local05, local07 wcz
09c78     0C 01 90 CD |  if_b	jmp	#LR__0594
09c7c     18 84 06 F1 | 	add	local01, #24
09c80     42 01 68 FC | 	wrlong	#0, local01
09c84                 | ' 				dp->sect = 0; return FR_NO_FILE;
09c84     04 30 06 F6 | 	mov	result1, #4
09c88     24 01 90 FD | 	jmp	#LR__0596
09c8c                 | LR__0590
09c8c     45 8D 02 F6 | 	mov	local05, local04
09c90     09 8C 46 F0 | 	shr	local05, #9
09c94     0A 88 06 F1 | 	add	local03, #10
09c98     44 91 E2 FA | 	rdword	local07, local03
09c9c     0A 88 86 F1 | 	sub	local03, #10
09ca0     0F 90 46 F7 | 	zerox	local07, #15
09ca4     01 90 86 F1 | 	sub	local07, #1
09ca8     48 8D CA F7 | 	test	local05, local07 wz
09cac     D8 00 90 5D |  if_ne	jmp	#LR__0593
09cb0     42 77 02 F6 | 	mov	arg01, local01
09cb4     14 84 06 F1 | 	add	local01, #20
09cb8     42 79 02 FB | 	rdlong	arg02, local01
09cbc     14 84 86 F1 | 	sub	local01, #20
09cc0     7C F4 BF FD | 	call	#_ff_cc_get_fat_0281
09cc4     18 93 02 F6 | 	mov	local08, result1
09cc8     01 92 1E F2 | 	cmp	local08, #1 wcz
09ccc     02 30 06 E6 |  if_be	mov	result1, #2
09cd0     DC 00 90 ED |  if_be	jmp	#LR__0596
09cd4     FF FF 7F FF 
09cd8     FF 93 0E F2 | 	cmp	local08, ##-1 wz
09cdc     01 30 06 A6 |  if_e	mov	result1, #1
09ce0     CC 00 90 AD |  if_e	jmp	#LR__0596
09ce4     14 88 06 F1 | 	add	local03, #20
09ce8     44 8D 02 FB | 	rdlong	local05, local03
09cec     14 88 86 F1 | 	sub	local03, #20
09cf0     46 93 1A F2 | 	cmp	local08, local05 wcz
09cf4     6C 00 90 CD |  if_b	jmp	#LR__0592
09cf8     00 86 0E F2 | 	cmp	local02, #0 wz
09cfc     10 00 90 5D |  if_ne	jmp	#LR__0591
09d00     18 84 06 F1 | 	add	local01, #24
09d04     42 01 68 FC | 	wrlong	#0, local01
09d08                 | ' 						dp->sect = 0; return FR_NO_FILE;
09d08     04 30 06 F6 | 	mov	result1, #4
09d0c     A0 00 90 FD | 	jmp	#LR__0596
09d10                 | LR__0591
09d10     42 77 02 F6 | 	mov	arg01, local01
09d14     14 84 06 F1 | 	add	local01, #20
09d18     42 79 02 FB | 	rdlong	arg02, local01
09d1c     14 84 86 F1 | 	sub	local01, #20
09d20     FC F9 BF FD | 	call	#_ff_cc_create_chain_0295
09d24     18 93 0A F6 | 	mov	local08, result1 wz
09d28     07 30 06 A6 |  if_e	mov	result1, #7
09d2c     80 00 90 AD |  if_e	jmp	#LR__0596
09d30     01 92 0E F2 | 	cmp	local08, #1 wz
09d34     02 30 06 A6 |  if_e	mov	result1, #2
09d38     74 00 90 AD |  if_e	jmp	#LR__0596
09d3c     FF FF 7F FF 
09d40     FF 93 0E F2 | 	cmp	local08, ##-1 wz
09d44     01 30 06 A6 |  if_e	mov	result1, #1
09d48     64 00 90 AD |  if_e	jmp	#LR__0596
09d4c     44 77 02 F6 | 	mov	arg01, local03
09d50     49 79 02 F6 | 	mov	arg02, local08
09d54     28 FC BF FD | 	call	#_ff_cc_dir_clear_0300
09d58     00 30 0E F2 | 	cmp	result1, #0 wz
09d5c     01 30 06 56 |  if_ne	mov	result1, #1
09d60     4C 00 90 5D |  if_ne	jmp	#LR__0596
09d64                 | LR__0592
09d64     14 84 06 F1 | 	add	local01, #20
09d68     42 93 62 FC | 	wrlong	local08, local01
09d6c     14 84 86 F1 | 	sub	local01, #20
09d70     44 77 02 F6 | 	mov	arg01, local03
09d74     49 79 02 F6 | 	mov	arg02, local08
09d78     84 F3 BF FD | 	call	#_ff_cc_clst2sect_0276
09d7c     18 84 06 F1 | 	add	local01, #24
09d80     42 31 62 FC | 	wrlong	result1, local01
09d84     18 84 86 F1 | 	sub	local01, #24
09d88                 | LR__0593
09d88                 | LR__0594
09d88                 | LR__0595
09d88     10 84 06 F1 | 	add	local01, #16
09d8c     42 8B 62 FC | 	wrlong	local04, local01
09d90     30 88 06 F1 | 	add	local03, #48
09d94     44 8D 02 F6 | 	mov	local05, local03
09d98     45 95 02 F6 | 	mov	local09, local04
09d9c     FF 95 06 F5 | 	and	local09, #511
09da0     4A 8D 02 F1 | 	add	local05, local09
09da4     0C 84 06 F1 | 	add	local01, #12
09da8     42 8D 62 FC | 	wrlong	local05, local01
09dac                 | ' #line 1802 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
09dac                 | ' 				}
09dac                 | ' 				dp->clust = clst;
09dac                 | ' 				dp->sect = clst2sect(fs, clst);
09dac                 | ' 			}
09dac                 | ' 		}
09dac                 | ' 	}
09dac                 | ' 	dp->dptr = ofs;
09dac                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
09dac                 | ' 
09dac                 | ' 	return FR_OK;
09dac     00 30 06 F6 | 	mov	result1, #0
09db0                 | LR__0596
09db0     AF F0 03 F6 | 	mov	ptra, fp
09db4     BF 00 A0 FD | 	call	#popregs_
09db8                 | _ff_cc_dir_next_0308_ret
09db8     2D 00 64 FD | 	ret
09dbc                 | 
09dbc                 | _ff_cc_dir_alloc_0312
09dbc     0B 5A 05 F6 | 	mov	COUNT_, #11
09dc0     B0 00 A0 FD | 	call	#pushregs_
09dc4     3B 85 02 F6 | 	mov	local01, arg01
09dc8     3C 87 02 F6 | 	mov	local02, arg02
09dcc     42 89 02 FB | 	rdlong	local03, local01
09dd0     42 77 02 F6 | 	mov	arg01, local01
09dd4     00 78 06 F6 | 	mov	arg02, #0
09dd8     80 FC BF FD | 	call	#_ff_cc_dir_sdi_0304
09ddc     18 8B 0A F6 | 	mov	local04, result1 wz
09de0     88 00 90 5D |  if_ne	jmp	#LR__0602
09de4     00 8C 06 F6 | 	mov	local05, #0
09de8                 | ' 		n = 0;
09de8                 | ' 		do {
09de8                 | LR__0597
09de8     44 77 02 F6 | 	mov	arg01, local03
09dec     18 84 06 F1 | 	add	local01, #24
09df0     42 79 02 FB | 	rdlong	arg02, local01
09df4     18 84 86 F1 | 	sub	local01, #24
09df8     0C F1 BF FD | 	call	#_ff_cc_move_window_0273
09dfc     18 8F 02 F6 | 	mov	local06, result1
09e00     47 8B 0A F6 | 	mov	local04, local06 wz
09e04     64 00 90 5D |  if_ne	jmp	#LR__0601
09e08     1C 84 06 F1 | 	add	local01, #28
09e0c     42 91 02 FB | 	rdlong	local07, local01
09e10     1C 84 86 F1 | 	sub	local01, #28
09e14     48 93 C2 FA | 	rdbyte	local08, local07
09e18     E5 92 0E F2 | 	cmp	local08, #229 wz
09e1c     18 00 90 AD |  if_e	jmp	#LR__0598
09e20     1C 84 06 F1 | 	add	local01, #28
09e24     42 95 02 FB | 	rdlong	local09, local01
09e28     1C 84 86 F1 | 	sub	local01, #28
09e2c     4A 97 02 F6 | 	mov	local10, local09
09e30     4B 8F CA FA | 	rdbyte	local06, local10 wz
09e34     10 00 90 5D |  if_ne	jmp	#LR__0599
09e38                 | LR__0598
09e38     01 8C 06 F1 | 	add	local05, #1
09e3c     43 8D 0A F2 | 	cmp	local05, local02 wz
09e40     28 00 90 AD |  if_e	jmp	#LR__0601
09e44     04 00 90 FD | 	jmp	#LR__0600
09e48                 | LR__0599
09e48     00 8C 06 F6 | 	mov	local05, #0
09e4c                 | LR__0600
09e4c     42 93 02 F6 | 	mov	local08, local01
09e50     01 90 06 F6 | 	mov	local07, #1
09e54     49 77 02 F6 | 	mov	arg01, local08
09e58     01 78 06 F6 | 	mov	arg02, #1
09e5c     88 FD BF FD | 	call	#_ff_cc_dir_next_0308
09e60     18 99 02 F6 | 	mov	local11, result1
09e64     4C 8B 0A F6 | 	mov	local04, local11 wz
09e68     7C FF 9F AD |  if_e	jmp	#LR__0597
09e6c                 | LR__0601
09e6c                 | LR__0602
09e6c     04 8A 0E F2 | 	cmp	local04, #4 wz
09e70     07 8A 06 A6 |  if_e	mov	local04, #7
09e74                 | ' 	return res;
09e74     45 31 02 F6 | 	mov	result1, local04
09e78     AF F0 03 F6 | 	mov	ptra, fp
09e7c     BF 00 A0 FD | 	call	#popregs_
09e80                 | _ff_cc_dir_alloc_0312_ret
09e80     2D 00 64 FD | 	ret
09e84                 | 
09e84                 | _ff_cc_ld_clust_0314
09e84     04 5A 05 F6 | 	mov	COUNT_, #4
09e88     B0 00 A0 FD | 	call	#pushregs_
09e8c     3B 85 02 F6 | 	mov	local01, arg01
09e90     3C 87 02 F6 | 	mov	local02, arg02
09e94     43 77 02 F6 | 	mov	arg01, local02
09e98     1A 76 06 F1 | 	add	arg01, #26
09e9c     4C EE BF FD | 	call	#_ff_cc_ld_word_0253
09ea0     18 89 02 F6 | 	mov	local03, result1
09ea4     0F 88 46 F7 | 	zerox	local03, #15
09ea8     42 8B C2 FA | 	rdbyte	local04, local01
09eac     03 8A 0E F2 | 	cmp	local04, #3 wz
09eb0     18 00 90 5D |  if_ne	jmp	#LR__0603
09eb4     14 86 06 F1 | 	add	local02, #20
09eb8     43 77 02 F6 | 	mov	arg01, local02
09ebc     2C EE BF FD | 	call	#_ff_cc_ld_word_0253
09ec0     0F 30 46 F7 | 	zerox	result1, #15
09ec4     10 30 66 F0 | 	shl	result1, #16
09ec8     18 89 42 F5 | 	or	local03, result1
09ecc                 | LR__0603
09ecc                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
09ecc                 | ' 	}
09ecc                 | ' 
09ecc                 | ' 	return cl;
09ecc     44 31 02 F6 | 	mov	result1, local03
09ed0     AF F0 03 F6 | 	mov	ptra, fp
09ed4     BF 00 A0 FD | 	call	#popregs_
09ed8                 | _ff_cc_ld_clust_0314_ret
09ed8     2D 00 64 FD | 	ret
09edc                 | 
09edc                 | _ff_cc_st_clust_0315
09edc     04 5A 05 F6 | 	mov	COUNT_, #4
09ee0     B0 00 A0 FD | 	call	#pushregs_
09ee4     3B 85 02 F6 | 	mov	local01, arg01
09ee8     3C 87 02 F6 | 	mov	local02, arg02
09eec     3D 89 02 F6 | 	mov	local03, arg03
09ef0     43 77 02 F6 | 	mov	arg01, local02
09ef4     1A 76 06 F1 | 	add	arg01, #26
09ef8     44 79 02 F6 | 	mov	arg02, local03
09efc     50 EE BF FD | 	call	#_ff_cc_st_word_0256
09f00     42 8B C2 FA | 	rdbyte	local04, local01
09f04     03 8A 0E F2 | 	cmp	local04, #3 wz
09f08     14 00 90 5D |  if_ne	jmp	#LR__0604
09f0c     14 86 06 F1 | 	add	local02, #20
09f10     10 88 46 F0 | 	shr	local03, #16
09f14     43 77 02 F6 | 	mov	arg01, local02
09f18     44 79 02 F6 | 	mov	arg02, local03
09f1c     30 EE BF FD | 	call	#_ff_cc_st_word_0256
09f20                 | LR__0604
09f20     AF F0 03 F6 | 	mov	ptra, fp
09f24     BF 00 A0 FD | 	call	#popregs_
09f28                 | _ff_cc_st_clust_0315_ret
09f28     2D 00 64 FD | 	ret
09f2c                 | 
09f2c                 | _ff_cc_dir_read_0320
09f2c     0B 5A 05 F6 | 	mov	COUNT_, #11
09f30     B0 00 A0 FD | 	call	#pushregs_
09f34     3B 85 02 F6 | 	mov	local01, arg01
09f38     3C 87 02 F6 | 	mov	local02, arg02
09f3c     04 88 06 F6 | 	mov	local03, #4
09f40     42 8B 02 FB | 	rdlong	local04, local01
09f44                 | ' )
09f44                 | ' {
09f44                 | ' 	FRESULT res = FR_NO_FILE;
09f44                 | ' 	FATFS *fs = dp->obj.fs;
09f44                 | ' 	BYTE attr, b;
09f44                 | ' #line 2376 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
09f44                 | ' 	while (dp->sect) {
09f44                 | LR__0605
09f44     18 84 06 F1 | 	add	local01, #24
09f48     42 8D 0A FB | 	rdlong	local05, local01 wz
09f4c     18 84 86 F1 | 	sub	local01, #24
09f50     C0 00 90 AD |  if_e	jmp	#LR__0607
09f54     45 77 02 F6 | 	mov	arg01, local04
09f58     18 84 06 F1 | 	add	local01, #24
09f5c     42 79 02 FB | 	rdlong	arg02, local01
09f60     18 84 86 F1 | 	sub	local01, #24
09f64     A0 EF BF FD | 	call	#_ff_cc_move_window_0273
09f68     18 89 0A F6 | 	mov	local03, result1 wz
09f6c     A4 00 90 5D |  if_ne	jmp	#LR__0607
09f70     1C 84 06 F1 | 	add	local01, #28
09f74     42 8D 02 FB | 	rdlong	local05, local01
09f78     1C 84 86 F1 | 	sub	local01, #28
09f7c     46 8F C2 FA | 	rdbyte	local06, local05
09f80     47 8D 02 F6 | 	mov	local05, local06
09f84     07 8C 4E F7 | 	zerox	local05, #7 wz
09f88     04 88 06 A6 |  if_e	mov	local03, #4
09f8c                 | ' 			res = FR_NO_FILE; break;
09f8c     84 00 90 AD |  if_e	jmp	#LR__0607
09f90     1C 84 06 F1 | 	add	local01, #28
09f94     42 91 02 FB | 	rdlong	local07, local01
09f98     0B 90 06 F1 | 	add	local07, #11
09f9c     48 93 C2 FA | 	rdbyte	local08, local07
09fa0     3F 92 06 F5 | 	and	local08, #63
09fa4     16 84 86 F1 | 	sub	local01, #22
09fa8     42 93 42 FC | 	wrbyte	local08, local01
09fac     06 84 86 F1 | 	sub	local01, #6
09fb0     47 8D 02 F6 | 	mov	local05, local06
09fb4     07 8C 46 F7 | 	zerox	local05, #7
09fb8     E5 8C 0E F2 | 	cmp	local05, #229 wz
09fbc     40 00 90 AD |  if_e	jmp	#LR__0606
09fc0     47 91 02 F6 | 	mov	local07, local06
09fc4     07 90 46 F7 | 	zerox	local07, #7
09fc8     2E 90 0E F2 | 	cmp	local07, #46 wz
09fcc     30 00 90 AD |  if_e	jmp	#LR__0606
09fd0     49 95 02 F6 | 	mov	local09, local08
09fd4     07 94 46 F7 | 	zerox	local09, #7
09fd8     0F 94 0E F2 | 	cmp	local09, #15 wz
09fdc     20 00 90 AD |  if_e	jmp	#LR__0606
09fe0     00 96 06 F6 | 	mov	local10, #0
09fe4     49 99 02 F6 | 	mov	local11, local08
09fe8     07 98 46 F7 | 	zerox	local11, #7
09fec     20 98 26 F5 | 	andn	local11, #32
09ff0     08 98 0E F2 | 	cmp	local11, #8 wz
09ff4     01 96 06 A6 |  if_e	mov	local10, #1
09ff8     43 97 0A F2 | 	cmp	local10, local02 wz
09ffc                 | ' 				break;
09ffc     14 00 90 AD |  if_e	jmp	#LR__0607
0a000                 | LR__0606
0a000     42 77 02 F6 | 	mov	arg01, local01
0a004     00 78 06 F6 | 	mov	arg02, #0
0a008     DC FB BF FD | 	call	#_ff_cc_dir_next_0308
0a00c     18 89 0A F6 | 	mov	local03, result1 wz
0a010     30 FF 9F AD |  if_e	jmp	#LR__0605
0a014                 | LR__0607
0a014     00 88 0E F2 | 	cmp	local03, #0 wz
0a018     18 84 06 51 |  if_ne	add	local01, #24
0a01c     42 01 68 5C |  if_ne	wrlong	#0, local01
0a020                 | ' 	return res;
0a020     44 31 02 F6 | 	mov	result1, local03
0a024     AF F0 03 F6 | 	mov	ptra, fp
0a028     BF 00 A0 FD | 	call	#popregs_
0a02c                 | _ff_cc_dir_read_0320_ret
0a02c     2D 00 64 FD | 	ret
0a030                 | 
0a030                 | _ff_cc_dir_find_0324
0a030     0E 5A 05 F6 | 	mov	COUNT_, #14
0a034     B0 00 A0 FD | 	call	#pushregs_
0a038     3B 85 02 F6 | 	mov	local01, arg01
0a03c     42 87 02 FB | 	rdlong	local02, local01
0a040     42 77 02 F6 | 	mov	arg01, local01
0a044     00 78 06 F6 | 	mov	arg02, #0
0a048     10 FA BF FD | 	call	#_ff_cc_dir_sdi_0304
0a04c     00 30 0E F2 | 	cmp	result1, #0 wz
0a050     D8 00 90 5D |  if_ne	jmp	#LR__0611
0a054                 | ' #line 2479 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a054                 | ' 	do {
0a054                 | LR__0608
0a054     43 77 02 F6 | 	mov	arg01, local02
0a058     18 84 06 F1 | 	add	local01, #24
0a05c     42 79 02 FB | 	rdlong	arg02, local01
0a060     18 84 86 F1 | 	sub	local01, #24
0a064     A0 EE BF FD | 	call	#_ff_cc_move_window_0273
0a068     18 89 0A F6 | 	mov	local03, result1 wz
0a06c     B8 00 90 5D |  if_ne	jmp	#LR__0610
0a070     1C 84 06 F1 | 	add	local01, #28
0a074     42 8B 02 FB | 	rdlong	local04, local01
0a078     1C 84 86 F1 | 	sub	local01, #28
0a07c     45 8D C2 FA | 	rdbyte	local05, local04
0a080     46 8B 02 F6 | 	mov	local04, local05
0a084     07 8A 4E F7 | 	zerox	local04, #7 wz
0a088     04 88 06 A6 |  if_e	mov	local03, #4
0a08c     98 00 90 AD |  if_e	jmp	#LR__0610
0a090     1C 84 06 F1 | 	add	local01, #28
0a094     42 8F 02 FB | 	rdlong	local06, local01
0a098     0B 8E 06 F1 | 	add	local06, #11
0a09c     47 8B C2 FA | 	rdbyte	local04, local06
0a0a0     3F 8A 06 F5 | 	and	local04, #63
0a0a4     16 84 86 F1 | 	sub	local01, #22
0a0a8     42 8B 42 FC | 	wrbyte	local04, local01
0a0ac     16 84 06 F1 | 	add	local01, #22
0a0b0     42 8F 02 FB | 	rdlong	local06, local01
0a0b4     1C 84 86 F1 | 	sub	local01, #28
0a0b8     0B 8E 06 F1 | 	add	local06, #11
0a0bc     47 91 C2 FA | 	rdbyte	local07, local06
0a0c0     48 8B 02 F6 | 	mov	local04, local07
0a0c4     07 8A 46 F7 | 	zerox	local04, #7
0a0c8     08 8A CE F7 | 	test	local04, #8 wz
0a0cc     38 00 90 5D |  if_ne	jmp	#LR__0609
0a0d0     1C 84 06 F1 | 	add	local01, #28
0a0d4     42 93 02 FB | 	rdlong	local08, local01
0a0d8     49 95 02 F6 | 	mov	local09, local08
0a0dc     04 84 06 F1 | 	add	local01, #4
0a0e0     42 97 02 F6 | 	mov	local10, local01
0a0e4     4B 99 02 F6 | 	mov	local11, local10
0a0e8     0B 9A 06 F6 | 	mov	local12, #11
0a0ec     4A 77 02 F6 | 	mov	arg01, local09
0a0f0     4C 79 02 F6 | 	mov	arg02, local11
0a0f4     0B 7A 06 F6 | 	mov	arg03, #11
0a0f8     20 84 86 F1 | 	sub	local01, #32
0a0fc     D0 EC BF FD | 	call	#_ff_cc_mem_cmp_0266
0a100     18 9D 0A F6 | 	mov	local13, result1 wz
0a104     20 00 90 AD |  if_e	jmp	#LR__0610
0a108                 | LR__0609
0a108     42 8B 02 F6 | 	mov	local04, local01
0a10c     00 8E 06 F6 | 	mov	local06, #0
0a110     45 77 02 F6 | 	mov	arg01, local04
0a114     00 78 06 F6 | 	mov	arg02, #0
0a118     CC FA BF FD | 	call	#_ff_cc_dir_next_0308
0a11c     18 9F 02 F6 | 	mov	local14, result1
0a120     4F 89 0A F6 | 	mov	local03, local14 wz
0a124     2C FF 9F AD |  if_e	jmp	#LR__0608
0a128                 | LR__0610
0a128                 | ' 
0a128                 | ' 	return res;
0a128     44 31 02 F6 | 	mov	result1, local03
0a12c                 | LR__0611
0a12c     AF F0 03 F6 | 	mov	ptra, fp
0a130     BF 00 A0 FD | 	call	#popregs_
0a134                 | _ff_cc_dir_find_0324_ret
0a134     2D 00 64 FD | 	ret
0a138                 | 
0a138                 | _ff_cc_dir_register_0327
0a138     03 5A 05 F6 | 	mov	COUNT_, #3
0a13c     B0 00 A0 FD | 	call	#pushregs_
0a140     3B 85 02 F6 | 	mov	local01, arg01
0a144     42 87 02 FB | 	rdlong	local02, local01
0a148     42 77 02 F6 | 	mov	arg01, local01
0a14c     01 78 06 F6 | 	mov	arg02, #1
0a150     68 FC BF FD | 	call	#_ff_cc_dir_alloc_0312
0a154     18 89 0A F6 | 	mov	local03, result1 wz
0a158     60 00 90 5D |  if_ne	jmp	#LR__0617
0a15c     18 84 06 F1 | 	add	local01, #24
0a160     42 79 02 FB | 	rdlong	arg02, local01
0a164     18 84 86 F1 | 	sub	local01, #24
0a168     43 77 02 F6 | 	mov	arg01, local02
0a16c     98 ED BF FD | 	call	#_ff_cc_move_window_0273
0a170     18 89 0A F6 | 	mov	local03, result1 wz
0a174     44 00 90 5D |  if_ne	jmp	#LR__0616
0a178     1C 84 06 F1 | 	add	local01, #28
0a17c     42 77 02 FB | 	rdlong	arg01, local01
0a180     1C 84 86 F1 | 	sub	local01, #28
0a184     00 78 06 F6 | 	mov	arg02, #0
0a188                 | ' {
0a188                 | ' 	BYTE *d = (BYTE*)dst;
0a188                 | ' 
0a188                 | ' 	do {
0a188     80 5E 9F FE | 	loc	pa,	#(@LR__0614-@LR__0612)
0a18c     93 00 A0 FD | 	call	#FCACHE_LOAD_
0a190                 | LR__0612
0a190     20 04 DC FC | 	rep	@LR__0615, #32
0a194                 | LR__0613
0a194     3B 79 42 FC | 	wrbyte	arg02, arg01
0a198     01 76 06 F1 | 	add	arg01, #1
0a19c                 | LR__0614
0a19c                 | LR__0615
0a19c     1C 84 06 F1 | 	add	local01, #28
0a1a0     42 77 02 FB | 	rdlong	arg01, local01
0a1a4     04 84 06 F1 | 	add	local01, #4
0a1a8     42 79 02 F6 | 	mov	arg02, local01
0a1ac     0B 7A 06 F6 | 	mov	arg03, #11
0a1b0     EC EB BF FD | 	call	#_ff_cc_mem_cpy_0260
0a1b4     03 86 06 F1 | 	add	local02, #3
0a1b8     43 03 48 FC | 	wrbyte	#1, local02
0a1bc                 | LR__0616
0a1bc                 | LR__0617
0a1bc                 | ' 			mem_set(dp->dir, 0,  32 );
0a1bc                 | ' 			mem_cpy(dp->dir +  0 , dp->fn, 11);
0a1bc                 | ' #line 2613 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a1bc                 | ' 			fs->wflag = 1;
0a1bc                 | ' 		}
0a1bc                 | ' 	}
0a1bc                 | ' 
0a1bc                 | ' 	return res;
0a1bc     44 31 02 F6 | 	mov	result1, local03
0a1c0     AF F0 03 F6 | 	mov	ptra, fp
0a1c4     BF 00 A0 FD | 	call	#popregs_
0a1c8                 | _ff_cc_dir_register_0327_ret
0a1c8     2D 00 64 FD | 	ret
0a1cc                 | 
0a1cc                 | _ff_cc_dir_remove_0330
0a1cc     04 5A 05 F6 | 	mov	COUNT_, #4
0a1d0     B0 00 A0 FD | 	call	#pushregs_
0a1d4     3B 85 02 F6 | 	mov	local01, arg01
0a1d8     42 87 02 FB | 	rdlong	local02, local01
0a1dc     18 84 06 F1 | 	add	local01, #24
0a1e0     42 79 02 FB | 	rdlong	arg02, local01
0a1e4     18 84 86 F1 | 	sub	local01, #24
0a1e8     43 77 02 F6 | 	mov	arg01, local02
0a1ec     18 ED BF FD | 	call	#_ff_cc_move_window_0273
0a1f0     18 89 0A F6 | 	mov	local03, result1 wz
0a1f4     14 00 90 5D |  if_ne	jmp	#LR__0618
0a1f8     1C 84 06 F1 | 	add	local01, #28
0a1fc     42 8B 02 FB | 	rdlong	local04, local01
0a200     45 CB 49 FC | 	wrbyte	#229, local04
0a204     03 86 06 F1 | 	add	local02, #3
0a208     43 03 48 FC | 	wrbyte	#1, local02
0a20c                 | LR__0618
0a20c                 | ' 		dp->dir[ 0 ] =  0xE5 ;
0a20c                 | ' 		fs->wflag = 1;
0a20c                 | ' 	}
0a20c                 | ' 
0a20c                 | ' 
0a20c                 | ' 	return res;
0a20c     44 31 02 F6 | 	mov	result1, local03
0a210     AF F0 03 F6 | 	mov	ptra, fp
0a214     BF 00 A0 FD | 	call	#popregs_
0a218                 | _ff_cc_dir_remove_0330_ret
0a218     2D 00 64 FD | 	ret
0a21c                 | 
0a21c                 | _ff_cc_get_fileinfo_0334
0a21c     0B 5A 05 F6 | 	mov	COUNT_, #11
0a220     B0 00 A0 FD | 	call	#pushregs_
0a224     3B 85 02 F6 | 	mov	local01, arg01
0a228     3C 87 02 F6 | 	mov	local02, arg02
0a22c     0C 86 06 F1 | 	add	local02, #12
0a230     43 01 48 FC | 	wrbyte	#0, local02
0a234     0C 86 86 F1 | 	sub	local02, #12
0a238     18 84 06 F1 | 	add	local01, #24
0a23c     42 89 02 FB | 	rdlong	local03, local01
0a240     18 84 86 F1 | 	sub	local01, #24
0a244     44 8B 0A F6 | 	mov	local04, local03 wz
0a248     00 01 90 AD |  if_e	jmp	#LR__0622
0a24c     00 8C 06 F6 | 	mov	local05, #0
0a250     00 8E 06 F6 | 	mov	local06, #0
0a254                 | ' #line 2755 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a254                 | ' 	si = di = 0;
0a254                 | ' 	while (si < 11) {
0a254                 | LR__0619
0a254     0B 8E 1E F2 | 	cmp	local06, #11 wcz
0a258     78 00 90 3D |  if_ae	jmp	#LR__0621
0a25c     1C 84 06 F1 | 	add	local01, #28
0a260     42 91 02 FB | 	rdlong	local07, local01
0a264     1C 84 86 F1 | 	sub	local01, #28
0a268     47 93 02 F6 | 	mov	local08, local06
0a26c     48 93 02 F1 | 	add	local08, local07
0a270     49 95 C2 FA | 	rdbyte	local09, local08
0a274     4A 8B 02 F6 | 	mov	local04, local09
0a278     07 8A 46 F7 | 	zerox	local04, #7
0a27c     20 8A 0E F2 | 	cmp	local04, #32 wz
0a280     01 8E 06 F1 | 	add	local06, #1
0a284     CC FF 9F AD |  if_e	jmp	#LR__0619
0a288     4A 8B 02 F6 | 	mov	local04, local09
0a28c     07 8A 46 F7 | 	zerox	local04, #7
0a290     05 8A 0E F2 | 	cmp	local04, #5 wz
0a294     E5 94 06 A6 |  if_e	mov	local09, #229
0a298     09 8E 0E F2 | 	cmp	local06, #9 wz
0a29c     18 00 90 5D |  if_ne	jmp	#LR__0620
0a2a0     46 97 02 F6 | 	mov	local10, local05
0a2a4     0C 86 06 F1 | 	add	local02, #12
0a2a8     43 97 02 F1 | 	add	local10, local02
0a2ac     4B 5D 48 FC | 	wrbyte	#46, local10
0a2b0     01 8C 06 F1 | 	add	local05, #1
0a2b4     0C 86 86 F1 | 	sub	local02, #12
0a2b8                 | LR__0620
0a2b8     46 97 02 F6 | 	mov	local10, local05
0a2bc     0C 86 06 F1 | 	add	local02, #12
0a2c0     43 97 02 F1 | 	add	local10, local02
0a2c4     4B 95 42 FC | 	wrbyte	local09, local10
0a2c8     01 8C 06 F1 | 	add	local05, #1
0a2cc     0C 86 86 F1 | 	sub	local02, #12
0a2d0     80 FF 9F FD | 	jmp	#LR__0619
0a2d4                 | LR__0621
0a2d4     0C 86 06 F1 | 	add	local02, #12
0a2d8     43 8D 02 F1 | 	add	local05, local02
0a2dc     46 01 48 FC | 	wrbyte	#0, local05
0a2e0     1C 84 06 F1 | 	add	local01, #28
0a2e4     42 8B 02 FB | 	rdlong	local04, local01
0a2e8     0B 8A 06 F1 | 	add	local04, #11
0a2ec     45 97 C2 FA | 	rdbyte	local10, local04
0a2f0     04 86 86 F1 | 	sub	local02, #4
0a2f4     43 97 42 FC | 	wrbyte	local10, local02
0a2f8     08 86 86 F1 | 	sub	local02, #8
0a2fc     42 77 02 FB | 	rdlong	arg01, local01
0a300     1C 84 86 F1 | 	sub	local01, #28
0a304     1C 76 06 F1 | 	add	arg01, #28
0a308     04 EA BF FD | 	call	#_ff_cc_ld_dword_0255
0a30c     43 31 62 FC | 	wrlong	result1, local02
0a310     1C 84 06 F1 | 	add	local01, #28
0a314     42 77 02 FB | 	rdlong	arg01, local01
0a318     1C 84 86 F1 | 	sub	local01, #28
0a31c     16 76 06 F1 | 	add	arg01, #22
0a320     C8 E9 BF FD | 	call	#_ff_cc_ld_word_0253
0a324     18 99 02 F6 | 	mov	local11, result1
0a328     06 86 06 F1 | 	add	local02, #6
0a32c     43 99 52 FC | 	wrword	local11, local02
0a330     06 86 86 F1 | 	sub	local02, #6
0a334     1C 84 06 F1 | 	add	local01, #28
0a338     42 77 02 FB | 	rdlong	arg01, local01
0a33c     18 76 06 F1 | 	add	arg01, #24
0a340     A8 E9 BF FD | 	call	#_ff_cc_ld_word_0253
0a344     04 86 06 F1 | 	add	local02, #4
0a348     43 31 52 FC | 	wrword	result1, local02
0a34c                 | LR__0622
0a34c     AF F0 03 F6 | 	mov	ptra, fp
0a350     BF 00 A0 FD | 	call	#popregs_
0a354                 | _ff_cc_get_fileinfo_0334_ret
0a354     2D 00 64 FD | 	ret
0a358                 | 
0a358                 | _ff_cc_create_name_0342
0a358     0E 5A 05 F6 | 	mov	COUNT_, #14
0a35c     B0 00 A0 FD | 	call	#pushregs_
0a360     3B 85 02 F6 | 	mov	local01, arg01
0a364     3C 87 02 F6 | 	mov	local02, arg02
0a368     43 89 02 FB | 	rdlong	local03, local02
0a36c     20 84 06 F1 | 	add	local01, #32
0a370     42 8B 02 F6 | 	mov	local04, local01
0a374     45 77 02 F6 | 	mov	arg01, local04
0a378     20 78 06 F6 | 	mov	arg02, #32
0a37c     0B 7A 06 F6 | 	mov	arg03, #11
0a380     20 84 86 F1 | 	sub	local01, #32
0a384                 | ' {
0a384                 | ' 	BYTE *d = (BYTE*)dst;
0a384                 | ' 
0a384                 | ' 	do {
0a384     84 5C 9F FE | 	loc	pa,	#(@LR__0625-@LR__0623)
0a388     93 00 A0 FD | 	call	#FCACHE_LOAD_
0a38c                 | LR__0623
0a38c     0B 04 DC FC | 	rep	@LR__0626, #11
0a390                 | LR__0624
0a390     3B 79 42 FC | 	wrbyte	arg02, arg01
0a394     01 76 06 F1 | 	add	arg01, #1
0a398                 | LR__0625
0a398                 | LR__0626
0a398     00 8C 06 F6 | 	mov	local05, #0
0a39c     00 8E 06 F6 | 	mov	local06, #0
0a3a0     08 90 06 F6 | 	mov	local07, #8
0a3a4                 | ' 
0a3a4                 | ' 
0a3a4                 | ' 	p = *path; sfn = dp->fn;
0a3a4                 | ' 	mem_set(sfn, ' ', 11);
0a3a4                 | ' 	si = i = 0; ni = 8;
0a3a4                 | ' #line 3011 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a3a4                 | ' 	for (;;) {
0a3a4                 | LR__0627
0a3a4     47 93 02 F6 | 	mov	local08, local06
0a3a8     44 93 02 F1 | 	add	local08, local03
0a3ac     49 95 C2 FA | 	rdbyte	local09, local08
0a3b0     4A 97 02 F6 | 	mov	local10, local09
0a3b4     07 96 46 F7 | 	zerox	local10, #7
0a3b8     20 96 1E F2 | 	cmp	local10, #32 wcz
0a3bc     01 8E 06 F1 | 	add	local06, #1
0a3c0     A4 01 90 ED |  if_be	jmp	#LR__0641
0a3c4     4A 97 02 F6 | 	mov	local10, local09
0a3c8     07 96 46 F7 | 	zerox	local10, #7
0a3cc     2F 96 0E F2 | 	cmp	local10, #47 wz
0a3d0     10 00 90 AD |  if_e	jmp	#LR__0628
0a3d4     4A 99 02 F6 | 	mov	local11, local09
0a3d8     07 98 46 F7 | 	zerox	local11, #7
0a3dc     5C 98 0E F2 | 	cmp	local11, #92 wz
0a3e0     30 00 90 5D |  if_ne	jmp	#LR__0631
0a3e4                 | LR__0628
0a3e4                 | ' 			while (p[si] == '/' || p[si] == '\\') si++;
0a3e4                 | LR__0629
0a3e4     47 99 02 F6 | 	mov	local11, local06
0a3e8     44 99 02 F1 | 	add	local11, local03
0a3ec     4C 97 C2 FA | 	rdbyte	local10, local11
0a3f0     2F 96 0E F2 | 	cmp	local10, #47 wz
0a3f4     14 00 90 AD |  if_e	jmp	#LR__0630
0a3f8     47 9B 02 F6 | 	mov	local12, local06
0a3fc     44 9B 02 F1 | 	add	local12, local03
0a400     4D 9D C2 FA | 	rdbyte	local13, local12
0a404     5C 9C 0E F2 | 	cmp	local13, #92 wz
0a408     5C 01 90 5D |  if_ne	jmp	#LR__0641
0a40c                 | LR__0630
0a40c     01 8E 06 F1 | 	add	local06, #1
0a410     D0 FF 9F FD | 	jmp	#LR__0629
0a414                 | ' 			break;
0a414                 | LR__0631
0a414     4A 97 02 F6 | 	mov	local10, local09
0a418     07 96 46 F7 | 	zerox	local10, #7
0a41c     2E 96 0E F2 | 	cmp	local10, #46 wz
0a420     08 00 90 AD |  if_e	jmp	#LR__0632
0a424     48 8D 1A F2 | 	cmp	local05, local07 wcz
0a428     28 00 90 CD |  if_b	jmp	#LR__0635
0a42c                 | LR__0632
0a42c     0B 90 0E F2 | 	cmp	local07, #11 wz
0a430     0C 00 90 AD |  if_e	jmp	#LR__0633
0a434     07 94 46 F7 | 	zerox	local09, #7
0a438     2E 94 0E F2 | 	cmp	local09, #46 wz
0a43c     08 00 90 AD |  if_e	jmp	#LR__0634
0a440                 | LR__0633
0a440     06 30 06 F6 | 	mov	result1, #6
0a444     60 01 90 FD | 	jmp	#LR__0642
0a448                 | LR__0634
0a448     08 8C 06 F6 | 	mov	local05, #8
0a44c     0B 90 06 F6 | 	mov	local07, #11
0a450                 | ' 			i = 8; ni = 11;
0a450                 | ' 			continue;
0a450     50 FF 9F FD | 	jmp	#LR__0627
0a454                 | LR__0635
0a454     4A 97 02 F6 | 	mov	local10, local09
0a458     07 96 46 F7 | 	zerox	local10, #7
0a45c     80 96 1E F2 | 	cmp	local10, #128 wcz
0a460     18 00 90 CD |  if_b	jmp	#LR__0636
0a464     07 94 46 F7 | 	zerox	local09, #7
0a468     7F 94 06 F5 | 	and	local09, #127
0a46c     06 1A 06 F1 | 	add	ptr__ff_cc_dat__, #6
0a470     0D 95 02 F1 | 	add	local09, ptr__ff_cc_dat__
0a474     4A 95 C2 FA | 	rdbyte	local09, local09
0a478     06 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #6
0a47c                 | LR__0636
0a47c     4A 77 02 F6 | 	mov	arg01, local09
0a480     07 76 4E F7 | 	zerox	arg01, #7 wz
0a484     00 30 06 56 |  if_ne	mov	result1, #0
0a488                 | ' 
0a488                 | ' 	return 0;
0a488     00 30 06 A6 |  if_e	mov	result1, #0
0a48c     00 30 0E F2 | 	cmp	result1, #0 wz
0a490     68 00 90 AD |  if_e	jmp	#LR__0639
0a494     47 93 02 F6 | 	mov	local08, local06
0a498     44 9D 02 F6 | 	mov	local13, local03
0a49c     44 93 02 F1 | 	add	local08, local03
0a4a0     49 9F C2 FA | 	rdbyte	local14, local08
0a4a4     4F 77 02 F6 | 	mov	arg01, local14
0a4a8     01 8E 06 F1 | 	add	local06, #1
0a4ac     07 76 4E F7 | 	zerox	arg01, #7 wz
0a4b0     00 30 06 56 |  if_ne	mov	result1, #0
0a4b4                 | ' 
0a4b4                 | ' 	return 0;
0a4b4     00 30 06 A6 |  if_e	mov	result1, #0
0a4b8     18 99 0A F6 | 	mov	local11, result1 wz
0a4bc     10 00 90 AD |  if_e	jmp	#LR__0637
0a4c0     48 93 02 F6 | 	mov	local08, local07
0a4c4     01 92 86 F1 | 	sub	local08, #1
0a4c8     49 8D 1A F2 | 	cmp	local05, local08 wcz
0a4cc     08 00 90 CD |  if_b	jmp	#LR__0638
0a4d0                 | LR__0637
0a4d0     06 30 06 F6 | 	mov	result1, #6
0a4d4     D0 00 90 FD | 	jmp	#LR__0642
0a4d8                 | LR__0638
0a4d8     46 93 02 F6 | 	mov	local08, local05
0a4dc     45 93 02 F1 | 	add	local08, local04
0a4e0     49 95 42 FC | 	wrbyte	local09, local08
0a4e4     01 8C 06 F1 | 	add	local05, #1
0a4e8     46 93 02 F6 | 	mov	local08, local05
0a4ec     45 93 02 F1 | 	add	local08, local04
0a4f0     49 9F 42 FC | 	wrbyte	local14, local08
0a4f4     01 8C 06 F1 | 	add	local05, #1
0a4f8     A8 FE 9F FD | 	jmp	#LR__0627
0a4fc                 | LR__0639
0a4fc     7A 00 00 FF 
0a500     48 76 06 F6 | 	mov	arg01, ##@LR__0940
0a504     4A 93 02 F6 | 	mov	local08, local09
0a508     07 92 46 F7 | 	zerox	local08, #7
0a50c     49 9D 02 F6 | 	mov	local13, local08
0a510     4E 79 02 F6 | 	mov	arg02, local13
0a514     F0 E8 BF FD | 	call	#_ff_cc_chk_chr_0267
0a518     18 9B 0A F6 | 	mov	local12, result1 wz
0a51c     06 30 06 56 |  if_ne	mov	result1, #6
0a520     84 00 90 5D |  if_ne	jmp	#LR__0642
0a524     4A 97 02 F6 | 	mov	local10, local09
0a528     07 96 46 F7 | 	zerox	local10, #7
0a52c     61 96 1E F2 | 	cmp	local10, #97 wcz
0a530     20 00 90 CD |  if_b	jmp	#LR__0640
0a534     4A 99 02 F6 | 	mov	local11, local09
0a538     07 98 46 F7 | 	zerox	local11, #7
0a53c     7A 98 1E F2 | 	cmp	local11, #122 wcz
0a540     10 00 90 1D |  if_a	jmp	#LR__0640
0a544     4A 97 02 F6 | 	mov	local10, local09
0a548     07 96 46 F7 | 	zerox	local10, #7
0a54c     20 96 86 F1 | 	sub	local10, #32
0a550     4B 95 02 F6 | 	mov	local09, local10
0a554                 | LR__0640
0a554     46 93 02 F6 | 	mov	local08, local05
0a558     45 93 02 F1 | 	add	local08, local04
0a55c     49 95 42 FC | 	wrbyte	local09, local08
0a560     01 8C 06 F1 | 	add	local05, #1
0a564     3C FE 9F FD | 	jmp	#LR__0627
0a568                 | LR__0641
0a568     47 89 02 F1 | 	add	local03, local06
0a56c     43 89 62 FC | 	wrlong	local03, local02
0a570     00 8C 0E F2 | 	cmp	local05, #0 wz
0a574     06 30 06 A6 |  if_e	mov	result1, #6
0a578     2C 00 90 AD |  if_e	jmp	#LR__0642
0a57c     45 97 C2 FA | 	rdbyte	local10, local04
0a580     E5 96 0E F2 | 	cmp	local10, #229 wz
0a584     45 0B 48 AC |  if_e	wrbyte	#5, local04
0a588     4A 99 02 F6 | 	mov	local11, local09
0a58c     07 98 46 F7 | 	zerox	local11, #7
0a590     20 98 1E F2 | 	cmp	local11, #32 wcz
0a594     04 96 06 E6 |  if_be	mov	local10, #4
0a598     00 96 06 16 |  if_a	mov	local10, #0
0a59c     0B 8A 06 F1 | 	add	local04, #11
0a5a0     45 97 42 FC | 	wrbyte	local10, local04
0a5a4                 | ' 	sfn[ 11 ] = (c <= ' ') ?  0x04  : 0;
0a5a4                 | ' 
0a5a4                 | ' 	return FR_OK;
0a5a4     00 30 06 F6 | 	mov	result1, #0
0a5a8                 | LR__0642
0a5a8     AF F0 03 F6 | 	mov	ptra, fp
0a5ac     BF 00 A0 FD | 	call	#popregs_
0a5b0                 | _ff_cc_create_name_0342_ret
0a5b0     2D 00 64 FD | 	ret
0a5b4                 | 
0a5b4                 | _ff_cc_follow_path_0346
0a5b4     07 5A 05 F6 | 	mov	COUNT_, #7
0a5b8     B0 00 A0 FD | 	call	#pushregs_
0a5bc     18 F0 07 F1 | 	add	ptra, #24
0a5c0     04 5E 05 F1 | 	add	fp, #4
0a5c4     AF 76 62 FC | 	wrlong	arg01, fp
0a5c8     04 5E 05 F1 | 	add	fp, #4
0a5cc     AF 78 62 FC | 	wrlong	arg02, fp
0a5d0     04 5E 85 F1 | 	sub	fp, #4
0a5d4     AF 84 02 FB | 	rdlong	local01, fp
0a5d8     42 87 02 FB | 	rdlong	local02, local01
0a5dc     10 5E 05 F1 | 	add	fp, #16
0a5e0     AF 86 62 FC | 	wrlong	local02, fp
0a5e4     14 5E 85 F1 | 	sub	fp, #20
0a5e8     5C 5A 9F FE | 	loc	pa,	#(@LR__0645-@LR__0643)
0a5ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
0a5f0                 | ' )
0a5f0                 | ' {
0a5f0                 | ' 	FRESULT res;
0a5f0                 | ' 	BYTE ns;
0a5f0                 | ' 	FATFS *fs = dp->obj.fs;
0a5f0                 | ' #line 3075 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a5f0                 | ' 	{
0a5f0                 | ' 		while (*path == '/' || *path == '\\') path++;
0a5f0                 | LR__0643
0a5f0     08 5E 05 F1 | 	add	fp, #8
0a5f4     AF 88 02 FB | 	rdlong	local03, fp
0a5f8     08 5E 85 F1 | 	sub	fp, #8
0a5fc     44 85 C2 FA | 	rdbyte	local01, local03
0a600     2F 84 0E F2 | 	cmp	local01, #47 wz
0a604     18 00 90 AD |  if_e	jmp	#LR__0644
0a608     08 5E 05 F1 | 	add	fp, #8
0a60c     AF 8A 02 FB | 	rdlong	local04, fp
0a610     08 5E 85 F1 | 	sub	fp, #8
0a614     45 8D C2 FA | 	rdbyte	local05, local04
0a618     5C 8C 0E F2 | 	cmp	local05, #92 wz
0a61c     18 00 90 5D |  if_ne	jmp	#LR__0646
0a620                 | LR__0644
0a620     08 5E 05 F1 | 	add	fp, #8
0a624     AF 86 02 FB | 	rdlong	local02, fp
0a628     01 86 06 F1 | 	add	local02, #1
0a62c     AF 86 62 FC | 	wrlong	local02, fp
0a630     08 5E 85 F1 | 	sub	fp, #8
0a634     B8 FF 9F FD | 	jmp	#LR__0643
0a638                 | LR__0645
0a638                 | LR__0646
0a638     04 5E 05 F1 | 	add	fp, #4
0a63c     AF 84 02 FB | 	rdlong	local01, fp
0a640     08 84 06 F1 | 	add	local01, #8
0a644     42 01 68 FC | 	wrlong	#0, local01
0a648     04 5E 05 F1 | 	add	fp, #4
0a64c     AF 88 02 FB | 	rdlong	local03, fp
0a650     08 5E 85 F1 | 	sub	fp, #8
0a654     44 85 C2 FA | 	rdbyte	local01, local03
0a658     20 84 1E F2 | 	cmp	local01, #32 wcz
0a65c     30 00 90 3D |  if_ae	jmp	#LR__0647
0a660     04 5E 05 F1 | 	add	fp, #4
0a664     AF 84 02 FB | 	rdlong	local01, fp
0a668     2B 84 06 F1 | 	add	local01, #43
0a66c     42 01 49 FC | 	wrbyte	#128, local01
0a670     AF 76 02 FB | 	rdlong	arg01, fp
0a674     04 5E 85 F1 | 	sub	fp, #4
0a678     00 78 06 F6 | 	mov	arg02, #0
0a67c     DC F3 BF FD | 	call	#_ff_cc_dir_sdi_0304
0a680     0C 5E 05 F1 | 	add	fp, #12
0a684     AF 30 62 FC | 	wrlong	result1, fp
0a688     0C 5E 85 F1 | 	sub	fp, #12
0a68c     30 01 90 FD | 	jmp	#LR__0652
0a690                 | LR__0647
0a690                 | ' 		for (;;) {
0a690                 | LR__0648
0a690     04 5E 05 F1 | 	add	fp, #4
0a694     AF 76 02 FB | 	rdlong	arg01, fp
0a698     04 5E 05 F1 | 	add	fp, #4
0a69c     AF 78 02 F6 | 	mov	arg02, fp
0a6a0     08 5E 85 F1 | 	sub	fp, #8
0a6a4     B0 FC BF FD | 	call	#_ff_cc_create_name_0342
0a6a8     18 8B 02 F6 | 	mov	local04, result1
0a6ac     0C 5E 05 F1 | 	add	fp, #12
0a6b0     AF 8A 62 FC | 	wrlong	local04, fp
0a6b4     AF 84 0A FB | 	rdlong	local01, fp wz
0a6b8     0C 5E 85 F1 | 	sub	fp, #12
0a6bc     00 01 90 5D |  if_ne	jmp	#LR__0651
0a6c0     04 5E 05 F1 | 	add	fp, #4
0a6c4     AF 76 02 FB | 	rdlong	arg01, fp
0a6c8     04 5E 85 F1 | 	sub	fp, #4
0a6cc     60 F9 BF FD | 	call	#_ff_cc_dir_find_0324
0a6d0     0C 5E 05 F1 | 	add	fp, #12
0a6d4     AF 30 62 FC | 	wrlong	result1, fp
0a6d8     08 5E 85 F1 | 	sub	fp, #8
0a6dc     AF 84 02 FB | 	rdlong	local01, fp
0a6e0     2B 84 06 F1 | 	add	local01, #43
0a6e4     42 87 C2 FA | 	rdbyte	local02, local01
0a6e8     0C 5E 05 F1 | 	add	fp, #12
0a6ec     AF 86 42 FC | 	wrbyte	local02, fp
0a6f0     04 5E 85 F1 | 	sub	fp, #4
0a6f4     AF 84 0A FB | 	rdlong	local01, fp wz
0a6f8     0C 5E 85 F1 | 	sub	fp, #12
0a6fc     38 00 90 AD |  if_e	jmp	#LR__0649
0a700     0C 5E 05 F1 | 	add	fp, #12
0a704     AF 84 02 FB | 	rdlong	local01, fp
0a708     0C 5E 85 F1 | 	sub	fp, #12
0a70c     04 84 0E F2 | 	cmp	local01, #4 wz
0a710     AC 00 90 5D |  if_ne	jmp	#LR__0651
0a714     10 5E 05 F1 | 	add	fp, #16
0a718     AF 84 C2 FA | 	rdbyte	local01, fp
0a71c     10 5E 85 F1 | 	sub	fp, #16
0a720     07 84 46 F7 | 	zerox	local01, #7
0a724     04 84 CE F7 | 	test	local01, #4 wz
0a728     0C 5E 05 A1 |  if_e	add	fp, #12
0a72c     AF 0A 68 AC |  if_e	wrlong	#5, fp
0a730     0C 5E 85 A1 |  if_e	sub	fp, #12
0a734                 | ' 					}
0a734                 | ' 				}
0a734                 | ' 				break;
0a734     88 00 90 FD | 	jmp	#LR__0651
0a738                 | LR__0649
0a738     10 5E 05 F1 | 	add	fp, #16
0a73c     AF 84 C2 FA | 	rdbyte	local01, fp
0a740     10 5E 85 F1 | 	sub	fp, #16
0a744     07 84 46 F7 | 	zerox	local01, #7
0a748     04 84 CE F7 | 	test	local01, #4 wz
0a74c     70 00 90 5D |  if_ne	jmp	#LR__0651
0a750     04 5E 05 F1 | 	add	fp, #4
0a754     AF 88 02 FB | 	rdlong	local03, fp
0a758     04 5E 85 F1 | 	sub	fp, #4
0a75c     06 88 06 F1 | 	add	local03, #6
0a760     44 85 C2 FA | 	rdbyte	local01, local03
0a764     10 84 CE F7 | 	test	local01, #16 wz
0a768     10 00 90 5D |  if_ne	jmp	#LR__0650
0a76c     0C 5E 05 F1 | 	add	fp, #12
0a770     AF 0A 68 FC | 	wrlong	#5, fp
0a774     0C 5E 85 F1 | 	sub	fp, #12
0a778                 | ' 				res = FR_NO_PATH; break;
0a778     44 00 90 FD | 	jmp	#LR__0651
0a77c                 | LR__0650
0a77c     04 5E 05 F1 | 	add	fp, #4
0a780     AF 84 02 FB | 	rdlong	local01, fp
0a784     10 5E 05 F1 | 	add	fp, #16
0a788     AF 76 02 FB | 	rdlong	arg01, fp
0a78c     3B 79 02 F6 | 	mov	arg02, arg01
0a790     30 78 06 F1 | 	add	arg02, #48
0a794     10 5E 85 F1 | 	sub	fp, #16
0a798     AF 8E 02 FB | 	rdlong	local06, fp
0a79c     04 5E 85 F1 | 	sub	fp, #4
0a7a0     10 8E 06 F1 | 	add	local06, #16
0a7a4     47 91 02 FB | 	rdlong	local07, local06
0a7a8     FF 91 06 F5 | 	and	local07, #511
0a7ac     48 79 02 F1 | 	add	arg02, local07
0a7b0     D0 F6 BF FD | 	call	#_ff_cc_ld_clust_0314
0a7b4     08 84 06 F1 | 	add	local01, #8
0a7b8     42 31 62 FC | 	wrlong	result1, local01
0a7bc     D0 FE 9F FD | 	jmp	#LR__0648
0a7c0                 | LR__0651
0a7c0                 | LR__0652
0a7c0                 | ' 			}
0a7c0                 | ' #line 3131 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a7c0                 | ' 			{
0a7c0                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
0a7c0                 | ' 			}
0a7c0                 | ' 		}
0a7c0                 | ' 	}
0a7c0                 | ' 
0a7c0                 | ' 	return res;
0a7c0     0C 5E 05 F1 | 	add	fp, #12
0a7c4     AF 30 02 FB | 	rdlong	result1, fp
0a7c8     0C 5E 85 F1 | 	sub	fp, #12
0a7cc     AF F0 03 F6 | 	mov	ptra, fp
0a7d0     BF 00 A0 FD | 	call	#popregs_
0a7d4                 | _ff_cc_follow_path_0346_ret
0a7d4     2D 00 64 FD | 	ret
0a7d8                 | 
0a7d8                 | _ff_cc_get_ldnumber_0352
0a7d8     3B 37 02 F6 | 	mov	_var01, arg01
0a7dc     01 38 66 F6 | 	neg	_var02, #1
0a7e0     1B 3B 0A FB | 	rdlong	_var03, _var01 wz
0a7e4     1D 3D 02 F6 | 	mov	_var04, _var03
0a7e8     01 30 66 A6 |  if_e	neg	result1, #1
0a7ec     8C 00 90 AD |  if_e	jmp	#_ff_cc_get_ldnumber_0352_ret
0a7f0     34 58 9F FE | 	loc	pa,	#(@LR__0654-@LR__0653)
0a7f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
0a7f8                 | ' 	do tc = *tt++; while ((UINT)tc >= ( 0  ? ' ' : '!') && tc != ':');
0a7f8                 | LR__0653
0a7f8     1E 3F C2 FA | 	rdbyte	_var05, _var04
0a7fc     1F 41 02 F6 | 	mov	_var06, _var05
0a800     07 40 46 F7 | 	zerox	_var06, #7
0a804     21 40 1E F2 | 	cmp	_var06, #33 wcz
0a808     01 3C 06 F1 | 	add	_var04, #1
0a80c     10 00 90 CD |  if_b	jmp	#LR__0655
0a810     1F 43 02 F6 | 	mov	_var07, _var05
0a814     07 42 46 F7 | 	zerox	_var07, #7
0a818     3A 42 0E F2 | 	cmp	_var07, #58 wz
0a81c     D8 FF 9F 5D |  if_ne	jmp	#LR__0653
0a820                 | LR__0654
0a820                 | LR__0655
0a820     1F 41 02 F6 | 	mov	_var06, _var05
0a824     07 40 46 F7 | 	zerox	_var06, #7
0a828     3A 40 0E F2 | 	cmp	_var06, #58 wz
0a82c     48 00 90 5D |  if_ne	jmp	#LR__0657
0a830     01 44 06 F6 | 	mov	_var08, #1
0a834     1D 41 C2 FA | 	rdbyte	_var06, _var03
0a838     30 40 1E F2 | 	cmp	_var06, #48 wcz
0a83c     24 00 90 CD |  if_b	jmp	#LR__0656
0a840     1D 43 C2 FA | 	rdbyte	_var07, _var03
0a844     39 42 1E F2 | 	cmp	_var07, #57 wcz
0a848     18 00 90 1D |  if_a	jmp	#LR__0656
0a84c     1D 47 02 F6 | 	mov	_var09, _var03
0a850     02 46 06 F1 | 	add	_var09, #2
0a854     1E 47 0A F2 | 	cmp	_var09, _var04 wz
0a858     1D 41 C2 AA |  if_e	rdbyte	_var06, _var03
0a85c     30 40 86 A1 |  if_e	sub	_var06, #48
0a860     20 45 02 A6 |  if_e	mov	_var08, _var06
0a864                 | LR__0656
0a864     01 44 5E F2 | 	cmps	_var08, #1 wcz
0a868     22 39 02 C6 |  if_b	mov	_var02, _var08
0a86c     1B 3D 62 CC |  if_b	wrlong	_var04, _var01
0a870                 | ' 			vol = i;
0a870                 | ' 			*path = tt;
0a870                 | ' 		}
0a870                 | ' 		return vol;
0a870     1C 31 02 F6 | 	mov	result1, _var02
0a874     04 00 90 FD | 	jmp	#_ff_cc_get_ldnumber_0352_ret
0a878                 | LR__0657
0a878                 | ' 	}
0a878                 | ' #line 3209 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0a878                 | ' 	vol = 0;
0a878                 | ' 
0a878                 | ' 	return vol;
0a878     00 30 06 F6 | 	mov	result1, #0
0a87c                 | _ff_cc_get_ldnumber_0352_ret
0a87c     2D 00 64 FD | 	ret
0a880                 | 
0a880                 | _ff_cc_check_fs_0353
0a880     08 5A 05 F6 | 	mov	COUNT_, #8
0a884     B0 00 A0 FD | 	call	#pushregs_
0a888     3B 85 02 F6 | 	mov	local01, arg01
0a88c     3C 87 02 F6 | 	mov	local02, arg02
0a890     03 84 06 F1 | 	add	local01, #3
0a894     42 01 48 FC | 	wrbyte	#0, local01
0a898     29 84 06 F1 | 	add	local01, #41
0a89c     FF FF FF FF 
0a8a0     42 FF 6B FC | 	wrlong	##-1, local01
0a8a4     2C 84 86 F1 | 	sub	local01, #44
0a8a8     42 77 02 F6 | 	mov	arg01, local01
0a8ac     43 79 02 F6 | 	mov	arg02, local02
0a8b0     54 E6 BF FD | 	call	#_ff_cc_move_window_0273
0a8b4     00 30 0E F2 | 	cmp	result1, #0 wz
0a8b8     04 30 06 56 |  if_ne	mov	result1, #4
0a8bc     D8 00 90 5D |  if_ne	jmp	#LR__0660
0a8c0     30 84 06 F1 | 	add	local01, #48
0a8c4     42 77 02 F6 | 	mov	arg01, local01
0a8c8     FE 77 06 F1 | 	add	arg01, #510
0a8cc     30 84 86 F1 | 	sub	local01, #48
0a8d0     18 E4 BF FD | 	call	#_ff_cc_ld_word_0253
0a8d4     18 89 02 F6 | 	mov	local03, result1
0a8d8     0F 88 46 F7 | 	zerox	local03, #15
0a8dc     55 00 00 FF 
0a8e0     55 88 0E F2 | 	cmp	local03, ##43605 wz
0a8e4     03 30 06 56 |  if_ne	mov	result1, #3
0a8e8     AC 00 90 5D |  if_ne	jmp	#LR__0660
0a8ec     30 84 06 F1 | 	add	local01, #48
0a8f0     42 8B C2 FA | 	rdbyte	local04, local01
0a8f4     30 84 86 F1 | 	sub	local01, #48
0a8f8     45 89 02 F6 | 	mov	local03, local04
0a8fc     07 88 46 F7 | 	zerox	local03, #7
0a900     E9 88 0E F2 | 	cmp	local03, #233 wz
0a904     38 00 90 AD |  if_e	jmp	#LR__0658
0a908     30 84 06 F1 | 	add	local01, #48
0a90c     42 8D C2 FA | 	rdbyte	local05, local01
0a910     30 84 86 F1 | 	sub	local01, #48
0a914     46 8F 02 F6 | 	mov	local06, local05
0a918     07 8E 46 F7 | 	zerox	local06, #7
0a91c     EB 8E 0E F2 | 	cmp	local06, #235 wz
0a920     1C 00 90 AD |  if_e	jmp	#LR__0658
0a924     30 84 06 F1 | 	add	local01, #48
0a928     42 91 C2 FA | 	rdbyte	local07, local01
0a92c     30 84 86 F1 | 	sub	local01, #48
0a930     48 93 02 F6 | 	mov	local08, local07
0a934     07 92 46 F7 | 	zerox	local08, #7
0a938     E8 92 0E F2 | 	cmp	local08, #232 wz
0a93c     54 00 90 5D |  if_ne	jmp	#LR__0659
0a940                 | LR__0658
0a940     30 84 06 F1 | 	add	local01, #48
0a944     42 77 02 F6 | 	mov	arg01, local01
0a948     30 84 86 F1 | 	sub	local01, #48
0a94c     36 76 06 F1 | 	add	arg01, #54
0a950     7A 00 00 FF 
0a954     63 78 06 F6 | 	mov	arg02, ##@LR__0942
0a958     03 7A 06 F6 | 	mov	arg03, #3
0a95c     70 E4 BF FD | 	call	#_ff_cc_mem_cmp_0266
0a960     00 30 0E F2 | 	cmp	result1, #0 wz
0a964     00 30 06 A6 |  if_e	mov	result1, #0
0a968     2C 00 90 AD |  if_e	jmp	#LR__0660
0a96c     30 84 06 F1 | 	add	local01, #48
0a970     42 77 02 F6 | 	mov	arg01, local01
0a974     52 76 06 F1 | 	add	arg01, #82
0a978     7A 00 00 FF 
0a97c     67 78 06 F6 | 	mov	arg02, ##@LR__0943
0a980     05 7A 06 F6 | 	mov	arg03, #5
0a984     48 E4 BF FD | 	call	#_ff_cc_mem_cmp_0266
0a988     00 30 0E F2 | 	cmp	result1, #0 wz
0a98c     00 30 06 A6 |  if_e	mov	result1, #0
0a990     04 00 90 AD |  if_e	jmp	#LR__0660
0a994                 | LR__0659
0a994                 | ' 	}
0a994                 | ' 	return 2;
0a994     02 30 06 F6 | 	mov	result1, #2
0a998                 | LR__0660
0a998     AF F0 03 F6 | 	mov	ptra, fp
0a99c     BF 00 A0 FD | 	call	#popregs_
0a9a0                 | _ff_cc_check_fs_0353_ret
0a9a0     2D 00 64 FD | 	ret
0a9a4                 | 
0a9a4                 | _ff_cc_find_volume_0357
0a9a4     0D 5A 05 F6 | 	mov	COUNT_, #13
0a9a8     B0 00 A0 FD | 	call	#pushregs_
0a9ac     24 F0 07 F1 | 	add	ptra, #36
0a9b0     3B 85 02 F6 | 	mov	local01, arg01
0a9b4     3C 87 02 F6 | 	mov	local02, arg02
0a9b8     42 89 02 F6 | 	mov	local03, local01
0a9bc     44 77 02 F6 | 	mov	arg01, local03
0a9c0     00 78 06 F6 | 	mov	arg02, #0
0a9c4     B8 FE BF FD | 	call	#_ff_cc_check_fs_0353
0a9c8     18 8B 02 F6 | 	mov	local04, result1
0a9cc     02 8A 0E F2 | 	cmp	local04, #2 wz
0a9d0     18 00 90 AD |  if_e	jmp	#LR__0662
0a9d4     03 8A 1E F2 | 	cmp	local04, #3 wcz
0a9d8     08 00 90 3D |  if_ae	jmp	#LR__0661
0a9dc     00 86 0E F2 | 	cmp	local02, #0 wz
0a9e0     08 00 90 5D |  if_ne	jmp	#LR__0662
0a9e4                 | LR__0661
0a9e4     45 31 02 F6 | 	mov	result1, local04
0a9e8     F8 00 90 FD | 	jmp	#LR__0669
0a9ec                 | LR__0662
0a9ec                 | ' 	for (i = 0; i < 4; i++) {
0a9ec     00 8C 06 F6 | 	mov	local05, #0
0a9f0                 | LR__0663
0a9f0     04 8C 1E F2 | 	cmp	local05, #4 wcz
0a9f4     50 00 90 3D |  if_ae	jmp	#LR__0664
0a9f8     46 89 02 F6 | 	mov	local03, local05
0a9fc     02 88 66 F0 | 	shl	local03, #2
0aa00     14 5E 05 F1 | 	add	fp, #20
0aa04     AF 88 02 F1 | 	add	local03, fp
0aa08     30 84 06 F1 | 	add	local01, #48
0aa0c     42 8F 02 F6 | 	mov	local06, local01
0aa10     BE 8F 06 F1 | 	add	local06, #446
0aa14     46 91 02 F6 | 	mov	local07, local05
0aa18     04 90 66 F0 | 	shl	local07, #4
0aa1c     48 93 02 F6 | 	mov	local08, local07
0aa20     48 8F 02 F1 | 	add	local06, local07
0aa24     08 8E 06 F1 | 	add	local06, #8
0aa28     47 77 02 F6 | 	mov	arg01, local06
0aa2c     14 5E 85 F1 | 	sub	fp, #20
0aa30     30 84 86 F1 | 	sub	local01, #48
0aa34     D8 E2 BF FD | 	call	#_ff_cc_ld_dword_0255
0aa38     18 95 02 F6 | 	mov	local09, result1
0aa3c     44 95 62 FC | 	wrlong	local09, local03
0aa40     01 8C 06 F1 | 	add	local05, #1
0aa44     A8 FF 9F FD | 	jmp	#LR__0663
0aa48                 | LR__0664
0aa48     00 86 0E F2 | 	cmp	local02, #0 wz
0aa4c     43 89 02 56 |  if_ne	mov	local03, local02
0aa50     01 88 86 51 |  if_ne	sub	local03, #1
0aa54     00 88 06 A6 |  if_e	mov	local03, #0
0aa58     44 8D 02 F6 | 	mov	local05, local03
0aa5c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
0aa5c                 | ' 	}
0aa5c                 | ' 	i = part ? part - 1 : 0;
0aa5c                 | ' 	do {
0aa5c                 | LR__0665
0aa5c     46 97 02 F6 | 	mov	local10, local05
0aa60     02 96 66 F0 | 	shl	local10, #2
0aa64     14 5E 05 F1 | 	add	fp, #20
0aa68     AF 98 02 F6 | 	mov	local11, fp
0aa6c     AF 96 02 F1 | 	add	local10, fp
0aa70     4B 9B 0A FB | 	rdlong	local12, local10 wz
0aa74     14 5E 85 F1 | 	sub	fp, #20
0aa78     38 00 90 AD |  if_e	jmp	#LR__0666
0aa7c     42 91 02 F6 | 	mov	local07, local01
0aa80     46 93 02 F6 | 	mov	local08, local05
0aa84     02 92 66 F0 | 	shl	local08, #2
0aa88     14 5E 05 F1 | 	add	fp, #20
0aa8c     AF 8E 02 F6 | 	mov	local06, fp
0aa90     AF 92 02 F1 | 	add	local08, fp
0aa94     49 95 02 FB | 	rdlong	local09, local08
0aa98     48 77 02 F6 | 	mov	arg01, local07
0aa9c     4A 79 02 F6 | 	mov	arg02, local09
0aaa0     14 5E 85 F1 | 	sub	fp, #20
0aaa4     D8 FD BF FD | 	call	#_ff_cc_check_fs_0353
0aaa8     18 9D 02 F6 | 	mov	local13, result1
0aaac     4E 89 02 F6 | 	mov	local03, local13
0aab0     04 00 90 FD | 	jmp	#LR__0667
0aab4                 | LR__0666
0aab4     03 88 06 F6 | 	mov	local03, #3
0aab8                 | LR__0667
0aab8     44 8B 02 F6 | 	mov	local04, local03
0aabc     00 86 0E F2 | 	cmp	local02, #0 wz
0aac0     1C 00 90 5D |  if_ne	jmp	#LR__0668
0aac4     02 8A 1E F2 | 	cmp	local04, #2 wcz
0aac8     14 00 90 CD |  if_b	jmp	#LR__0668
0aacc     46 89 02 F6 | 	mov	local03, local05
0aad0     01 88 06 F1 | 	add	local03, #1
0aad4     44 8D 02 F6 | 	mov	local05, local03
0aad8     04 8C 1E F2 | 	cmp	local05, #4 wcz
0aadc     7C FF 9F CD |  if_b	jmp	#LR__0665
0aae0                 | LR__0668
0aae0                 | ' 	return fmt;
0aae0     45 31 02 F6 | 	mov	result1, local04
0aae4                 | LR__0669
0aae4     AF F0 03 F6 | 	mov	ptra, fp
0aae8     BF 00 A0 FD | 	call	#popregs_
0aaec                 | _ff_cc_find_volume_0357_ret
0aaec     2D 00 64 FD | 	ret
0aaf0                 | 
0aaf0                 | _ff_cc_mount_volume_0369
0aaf0     1B 5A 05 F6 | 	mov	COUNT_, #27
0aaf4     B0 00 A0 FD | 	call	#pushregs_
0aaf8     3B 85 02 F6 | 	mov	local01, arg01
0aafc     3C 87 02 F6 | 	mov	local02, arg02
0ab00     3D 89 02 F6 | 	mov	local03, arg03
0ab04     43 01 68 FC | 	wrlong	#0, local02
0ab08     42 77 02 F6 | 	mov	arg01, local01
0ab0c     C8 FC BF FD | 	call	#_ff_cc_get_ldnumber_0352
0ab10     18 8B 02 F6 | 	mov	local04, result1
0ab14     00 8A 5E F2 | 	cmps	local04, #0 wcz
0ab18     0B 30 06 C6 |  if_b	mov	result1, #11
0ab1c     04 06 90 CD |  if_b	jmp	#LR__0685
0ab20     45 8D 02 F6 | 	mov	local05, local04
0ab24     02 8C 66 F0 | 	shl	local05, #2
0ab28     0D 8D 02 F1 | 	add	local05, ptr__ff_cc_dat__
0ab2c     46 8F 0A FB | 	rdlong	local06, local05 wz
0ab30     0C 30 06 A6 |  if_e	mov	result1, #12
0ab34     EC 05 90 AD |  if_e	jmp	#LR__0685
0ab38     43 8F 62 FC | 	wrlong	local06, local02
0ab3c     07 88 46 F7 | 	zerox	local03, #7
0ab40     FE 88 06 F5 | 	and	local03, #254
0ab44     47 8D CA FA | 	rdbyte	local05, local06 wz
0ab48     4C 00 90 AD |  if_e	jmp	#LR__0672
0ab4c     01 8E 06 F1 | 	add	local06, #1
0ab50     47 77 CA FA | 	rdbyte	arg01, local06 wz
0ab54     01 8E 86 F1 | 	sub	local06, #1
0ab58     01 30 06 56 |  if_ne	mov	result1, #1
0ab5c                 | ' 
0ab5c                 | ' 	return Stat;
0ab5c     7C 1B 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
0ab60     0D 31 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
0ab64     7C 1B 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
0ab68     18 8D 02 F6 | 	mov	local05, result1
0ab6c     07 8C 46 F7 | 	zerox	local05, #7
0ab70     01 8C CE F7 | 	test	local05, #1 wz
0ab74     20 00 90 5D |  if_ne	jmp	#LR__0671
0ab78     00 88 0E F2 | 	cmp	local03, #0 wz
0ab7c     10 00 90 AD |  if_e	jmp	#LR__0670
0ab80     07 30 46 F7 | 	zerox	result1, #7
0ab84     04 30 0E F5 | 	and	result1, #4 wz
0ab88                 | ' 				return FR_WRITE_PROTECTED;
0ab88     0A 30 06 56 |  if_ne	mov	result1, #10
0ab8c     94 05 90 5D |  if_ne	jmp	#LR__0685
0ab90                 | LR__0670
0ab90                 | ' 			}
0ab90                 | ' 			return FR_OK;
0ab90     00 30 06 F6 | 	mov	result1, #0
0ab94     8C 05 90 FD | 	jmp	#LR__0685
0ab98                 | LR__0671
0ab98                 | LR__0672
0ab98     47 01 48 FC | 	wrbyte	#0, local06
0ab9c     01 8E 06 F1 | 	add	local06, #1
0aba0     47 8B 42 FC | 	wrbyte	local04, local06
0aba4     47 77 C2 FA | 	rdbyte	arg01, local06
0aba8     01 8E 86 F1 | 	sub	local06, #1
0abac     10 D9 BF FD | 	call	#_ff_cc_disk_initialize
0abb0     18 91 02 F6 | 	mov	local07, result1
0abb4     48 8D 02 F6 | 	mov	local05, local07
0abb8     07 8C 46 F7 | 	zerox	local05, #7
0abbc     01 8C CE F7 | 	test	local05, #1 wz
0abc0                 | ' 		return FR_NOT_READY;
0abc0     03 30 06 56 |  if_ne	mov	result1, #3
0abc4     5C 05 90 5D |  if_ne	jmp	#LR__0685
0abc8     00 88 0E F2 | 	cmp	local03, #0 wz
0abcc     14 00 90 AD |  if_e	jmp	#LR__0673
0abd0     48 8D 02 F6 | 	mov	local05, local07
0abd4     07 8C 46 F7 | 	zerox	local05, #7
0abd8     04 8C CE F7 | 	test	local05, #4 wz
0abdc                 | ' 		return FR_WRITE_PROTECTED;
0abdc     0A 30 06 56 |  if_ne	mov	result1, #10
0abe0     40 05 90 5D |  if_ne	jmp	#LR__0685
0abe4                 | LR__0673
0abe4     47 77 02 F6 | 	mov	arg01, local06
0abe8     00 78 06 F6 | 	mov	arg02, #0
0abec     B4 FD BF FD | 	call	#_ff_cc_find_volume_0357
0abf0     18 93 02 F6 | 	mov	local08, result1
0abf4     04 92 0E F2 | 	cmp	local08, #4 wz
0abf8     01 30 06 A6 |  if_e	mov	result1, #1
0abfc     24 05 90 AD |  if_e	jmp	#LR__0685
0ac00     02 92 1E F2 | 	cmp	local08, #2 wcz
0ac04     0D 30 06 36 |  if_ae	mov	result1, #13
0ac08     18 05 90 3D |  if_ae	jmp	#LR__0685
0ac0c     2C 8E 06 F1 | 	add	local06, #44
0ac10     47 95 02 FB | 	rdlong	local09, local06
0ac14     04 8E 06 F1 | 	add	local06, #4
0ac18     47 77 02 F6 | 	mov	arg01, local06
0ac1c     30 8E 86 F1 | 	sub	local06, #48
0ac20     0B 76 06 F1 | 	add	arg01, #11
0ac24     C4 E0 BF FD | 	call	#_ff_cc_ld_word_0253
0ac28     18 8D 02 F6 | 	mov	local05, result1
0ac2c     0F 8C 46 F7 | 	zerox	local05, #15
0ac30     01 00 00 FF 
0ac34     00 8C 0E F2 | 	cmp	local05, ##512 wz
0ac38     0D 30 06 56 |  if_ne	mov	result1, #13
0ac3c     E4 04 90 5D |  if_ne	jmp	#LR__0685
0ac40     30 8E 06 F1 | 	add	local06, #48
0ac44     47 77 02 F6 | 	mov	arg01, local06
0ac48     30 8E 86 F1 | 	sub	local06, #48
0ac4c     16 76 06 F1 | 	add	arg01, #22
0ac50     98 E0 BF FD | 	call	#_ff_cc_ld_word_0253
0ac54     18 97 02 F6 | 	mov	local10, result1
0ac58     0F 96 4E F7 | 	zerox	local10, #15 wz
0ac5c     18 00 90 5D |  if_ne	jmp	#LR__0674
0ac60     30 8E 06 F1 | 	add	local06, #48
0ac64     47 77 02 F6 | 	mov	arg01, local06
0ac68     30 8E 86 F1 | 	sub	local06, #48
0ac6c     24 76 06 F1 | 	add	arg01, #36
0ac70     9C E0 BF FD | 	call	#_ff_cc_ld_dword_0255
0ac74     18 97 02 F6 | 	mov	local10, result1
0ac78                 | LR__0674
0ac78     18 8E 06 F1 | 	add	local06, #24
0ac7c     47 97 62 FC | 	wrlong	local10, local06
0ac80     28 8E 06 F1 | 	add	local06, #40
0ac84     47 8D C2 FA | 	rdbyte	local05, local06
0ac88     3E 8E 86 F1 | 	sub	local06, #62
0ac8c     47 8D 42 FC | 	wrbyte	local05, local06
0ac90     47 8D C2 FA | 	rdbyte	local05, local06
0ac94     02 8E 86 F1 | 	sub	local06, #2
0ac98     07 8C 46 F7 | 	zerox	local05, #7
0ac9c     01 8C 0E F2 | 	cmp	local05, #1 wz
0aca0     1C 00 90 AD |  if_e	jmp	#LR__0675
0aca4     02 8E 06 F1 | 	add	local06, #2
0aca8     47 99 C2 FA | 	rdbyte	local11, local06
0acac     02 8E 86 F1 | 	sub	local06, #2
0acb0     07 98 46 F7 | 	zerox	local11, #7
0acb4     02 98 0E F2 | 	cmp	local11, #2 wz
0acb8     0D 30 06 56 |  if_ne	mov	result1, #13
0acbc     64 04 90 5D |  if_ne	jmp	#LR__0685
0acc0                 | LR__0675
0acc0     02 8E 06 F1 | 	add	local06, #2
0acc4     47 8D C2 FA | 	rdbyte	local05, local06
0acc8     46 97 02 FD | 	qmul	local10, local05
0accc     18 96 62 FD | 	getqx	local10
0acd0     3B 8E 06 F1 | 	add	local06, #59
0acd4     47 8D C2 FA | 	rdbyte	local05, local06
0acd8     33 8E 86 F1 | 	sub	local06, #51
0acdc     47 8D 52 FC | 	wrword	local05, local06
0ace0     47 8D E2 FA | 	rdword	local05, local06
0ace4     0A 8E 86 F1 | 	sub	local06, #10
0ace8     0F 8C 4E F7 | 	zerox	local05, #15 wz
0acec     20 00 90 AD |  if_e	jmp	#LR__0676
0acf0     0A 8E 06 F1 | 	add	local06, #10
0acf4     47 99 E2 FA | 	rdword	local11, local06
0acf8     47 9B E2 FA | 	rdword	local12, local06
0acfc     0A 8E 86 F1 | 	sub	local06, #10
0ad00     0F 9A 46 F7 | 	zerox	local12, #15
0ad04     01 9A 86 F1 | 	sub	local12, #1
0ad08     4D 99 CA F7 | 	test	local11, local12 wz
0ad0c     08 00 90 AD |  if_e	jmp	#LR__0677
0ad10                 | LR__0676
0ad10     0D 30 06 F6 | 	mov	result1, #13
0ad14     0C 04 90 FD | 	jmp	#LR__0685
0ad18                 | LR__0677
0ad18     30 8E 06 F1 | 	add	local06, #48
0ad1c     47 77 02 F6 | 	mov	arg01, local06
0ad20     30 8E 86 F1 | 	sub	local06, #48
0ad24     11 76 06 F1 | 	add	arg01, #17
0ad28     C0 DF BF FD | 	call	#_ff_cc_ld_word_0253
0ad2c     08 8E 06 F1 | 	add	local06, #8
0ad30     47 31 52 FC | 	wrword	result1, local06
0ad34     47 8D E2 FA | 	rdword	local05, local06
0ad38     08 8E 86 F1 | 	sub	local06, #8
0ad3c     0F 8C 46 F7 | 	zerox	local05, #15
0ad40     46 99 52 F6 | 	abs	local11, local05 wc
0ad44     0F 98 06 F5 | 	and	local11, #15
0ad48     4C 99 62 C6 |  if_b	neg	local11, local11
0ad4c     00 98 0E F2 | 	cmp	local11, #0 wz
0ad50     0D 30 06 56 |  if_ne	mov	result1, #13
0ad54     CC 03 90 5D |  if_ne	jmp	#LR__0685
0ad58     30 8E 06 F1 | 	add	local06, #48
0ad5c     47 77 02 F6 | 	mov	arg01, local06
0ad60     30 8E 86 F1 | 	sub	local06, #48
0ad64     13 76 06 F1 | 	add	arg01, #19
0ad68     80 DF BF FD | 	call	#_ff_cc_ld_word_0253
0ad6c     18 9D 02 F6 | 	mov	local13, result1
0ad70     0F 9C 4E F7 | 	zerox	local13, #15 wz
0ad74     18 00 90 5D |  if_ne	jmp	#LR__0678
0ad78     30 8E 06 F1 | 	add	local06, #48
0ad7c     47 77 02 F6 | 	mov	arg01, local06
0ad80     30 8E 86 F1 | 	sub	local06, #48
0ad84     20 76 06 F1 | 	add	arg01, #32
0ad88     84 DF BF FD | 	call	#_ff_cc_ld_dword_0255
0ad8c     18 9D 02 F6 | 	mov	local13, result1
0ad90                 | LR__0678
0ad90     30 8E 06 F1 | 	add	local06, #48
0ad94     47 77 02 F6 | 	mov	arg01, local06
0ad98     30 8E 86 F1 | 	sub	local06, #48
0ad9c     0E 76 06 F1 | 	add	arg01, #14
0ada0     48 DF BF FD | 	call	#_ff_cc_ld_word_0253
0ada4     18 9F 02 F6 | 	mov	local14, result1
0ada8     4F 8D 02 F6 | 	mov	local05, local14
0adac     0F 8C 4E F7 | 	zerox	local05, #15 wz
0adb0     0D 30 06 A6 |  if_e	mov	result1, #13
0adb4     6C 03 90 AD |  if_e	jmp	#LR__0685
0adb8     4F A1 02 F6 | 	mov	local15, local14
0adbc     0F A0 46 F7 | 	zerox	local15, #15
0adc0     4B A1 02 F1 | 	add	local15, local10
0adc4     08 8E 06 F1 | 	add	local06, #8
0adc8     47 A3 E2 FA | 	rdword	local16, local06
0adcc     08 8E 86 F1 | 	sub	local06, #8
0add0     0F A2 46 F7 | 	zerox	local16, #15
0add4     51 A5 52 F6 | 	abs	local17, local16 wc
0add8     04 A4 46 F0 | 	shr	local17, #4
0addc     52 A5 62 C6 |  if_b	neg	local17, local17
0ade0     52 A1 02 F1 | 	add	local15, local17
0ade4     50 9D 1A F2 | 	cmp	local13, local15 wcz
0ade8     0D 30 06 C6 |  if_b	mov	result1, #13
0adec     34 03 90 CD |  if_b	jmp	#LR__0685
0adf0     4E D9 02 F6 | 	mov	muldiva_, local13
0adf4     50 D9 82 F1 | 	sub	muldiva_, local15
0adf8     0A 8E 06 F1 | 	add	local06, #10
0adfc     47 DB E2 FA | 	rdword	muldivb_, local06
0ae00     0A 8E 86 F1 | 	sub	local06, #10
0ae04     0F DA 46 F7 | 	zerox	muldivb_, #15
0ae08     CC 00 A0 FD | 	call	#unsdivide_
0ae0c     6D A7 0A F6 | 	mov	local18, muldivb_ wz
0ae10     0D 30 06 A6 |  if_e	mov	result1, #13
0ae14     0C 03 90 AD |  if_e	jmp	#LR__0685
0ae18     00 92 06 F6 | 	mov	local08, #0
0ae1c     FF FF 07 FF 
0ae20     F5 A7 1E F2 | 	cmp	local18, ##268435445 wcz
0ae24     03 92 06 E6 |  if_be	mov	local08, #3
0ae28     7F 00 00 FF 
0ae2c     F5 A7 1E F2 | 	cmp	local18, ##65525 wcz
0ae30     02 92 06 E6 |  if_be	mov	local08, #2
0ae34     07 00 00 FF 
0ae38     F5 A7 1E F2 | 	cmp	local18, ##4085 wcz
0ae3c     01 92 06 E6 |  if_be	mov	local08, #1
0ae40     00 92 0E F2 | 	cmp	local08, #0 wz
0ae44     0D 30 06 A6 |  if_e	mov	result1, #13
0ae48     D8 02 90 AD |  if_e	jmp	#LR__0685
0ae4c     53 8D 02 F6 | 	mov	local05, local18
0ae50     02 8C 06 F1 | 	add	local05, #2
0ae54     14 8E 06 F1 | 	add	local06, #20
0ae58     47 8D 62 FC | 	wrlong	local05, local06
0ae5c     08 8E 06 F1 | 	add	local06, #8
0ae60     47 95 62 FC | 	wrlong	local09, local06
0ae64     4A 8D 02 F6 | 	mov	local05, local09
0ae68     4F A3 02 F6 | 	mov	local16, local14
0ae6c     0F A2 46 F7 | 	zerox	local16, #15
0ae70     51 8D 02 F1 | 	add	local05, local16
0ae74     04 8E 06 F1 | 	add	local06, #4
0ae78     47 8D 62 FC | 	wrlong	local05, local06
0ae7c     4A 8D 02 F6 | 	mov	local05, local09
0ae80     50 8D 02 F1 | 	add	local05, local15
0ae84     08 8E 06 F1 | 	add	local06, #8
0ae88     47 8D 62 FC | 	wrlong	local05, local06
0ae8c     28 8E 86 F1 | 	sub	local06, #40
0ae90     03 92 0E F2 | 	cmp	local08, #3 wz
0ae94     6C 00 90 5D |  if_ne	jmp	#LR__0679
0ae98     30 8E 06 F1 | 	add	local06, #48
0ae9c     47 77 02 F6 | 	mov	arg01, local06
0aea0     30 8E 86 F1 | 	sub	local06, #48
0aea4     2A 76 06 F1 | 	add	arg01, #42
0aea8     40 DE BF FD | 	call	#_ff_cc_ld_word_0253
0aeac     18 8D 02 F6 | 	mov	local05, result1
0aeb0     0F 8C 4E F7 | 	zerox	local05, #15 wz
0aeb4     0D 30 06 56 |  if_ne	mov	result1, #13
0aeb8     68 02 90 5D |  if_ne	jmp	#LR__0685
0aebc     08 8E 06 F1 | 	add	local06, #8
0aec0     47 8D E2 FA | 	rdword	local05, local06
0aec4     08 8E 86 F1 | 	sub	local06, #8
0aec8     0F 8C 4E F7 | 	zerox	local05, #15 wz
0aecc     0D 30 06 56 |  if_ne	mov	result1, #13
0aed0     50 02 90 5D |  if_ne	jmp	#LR__0685
0aed4     30 8E 06 F1 | 	add	local06, #48
0aed8     47 77 02 F6 | 	mov	arg01, local06
0aedc     30 8E 86 F1 | 	sub	local06, #48
0aee0     2C 76 06 F1 | 	add	arg01, #44
0aee4     28 DE BF FD | 	call	#_ff_cc_ld_dword_0255
0aee8     24 8E 06 F1 | 	add	local06, #36
0aeec     47 31 62 FC | 	wrlong	result1, local06
0aef0     10 8E 86 F1 | 	sub	local06, #16
0aef4     47 A9 02 FB | 	rdlong	local19, local06
0aef8     14 8E 86 F1 | 	sub	local06, #20
0aefc     02 A8 66 F0 | 	shl	local19, #2
0af00     74 00 90 FD | 	jmp	#LR__0682
0af04                 | LR__0679
0af04     08 8E 06 F1 | 	add	local06, #8
0af08     47 8D E2 FA | 	rdword	local05, local06
0af0c     08 8E 86 F1 | 	sub	local06, #8
0af10     0F 8C 4E F7 | 	zerox	local05, #15 wz
0af14     0D 30 06 A6 |  if_e	mov	result1, #13
0af18     08 02 90 AD |  if_e	jmp	#LR__0685
0af1c     20 8E 06 F1 | 	add	local06, #32
0af20     47 8D 02 FB | 	rdlong	local05, local06
0af24     4B 8D 02 F1 | 	add	local05, local10
0af28     04 8E 06 F1 | 	add	local06, #4
0af2c     47 8D 62 FC | 	wrlong	local05, local06
0af30     24 8E 86 F1 | 	sub	local06, #36
0af34     02 92 0E F2 | 	cmp	local08, #2 wz
0af38     14 00 90 5D |  if_ne	jmp	#LR__0680
0af3c     14 8E 06 F1 | 	add	local06, #20
0af40     47 8D 02 FB | 	rdlong	local05, local06
0af44     14 8E 86 F1 | 	sub	local06, #20
0af48     01 8C 66 F0 | 	shl	local05, #1
0af4c     24 00 90 FD | 	jmp	#LR__0681
0af50                 | LR__0680
0af50     14 8E 06 F1 | 	add	local06, #20
0af54     47 AB 02 FB | 	rdlong	local20, local06
0af58     55 8D 02 F6 | 	mov	local05, local20
0af5c     01 8C 66 F0 | 	shl	local05, #1
0af60     55 8D 02 F1 | 	add	local05, local20
0af64     01 8C 46 F0 | 	shr	local05, #1
0af68     14 8E 86 F1 | 	sub	local06, #20
0af6c     01 AA CE F7 | 	test	local20, #1 wz
0af70     01 8C 06 51 |  if_ne	add	local05, #1
0af74                 | LR__0681
0af74     46 A9 02 F6 | 	mov	local19, local05
0af78                 | LR__0682
0af78     54 A3 02 F6 | 	mov	local16, local19
0af7c     FF A3 06 F1 | 	add	local16, #511
0af80     09 A2 46 F0 | 	shr	local16, #9
0af84     18 8E 06 F1 | 	add	local06, #24
0af88     47 99 02 FB | 	rdlong	local11, local06
0af8c     18 8E 86 F1 | 	sub	local06, #24
0af90     51 99 1A F2 | 	cmp	local11, local16 wcz
0af94     0D 30 06 C6 |  if_b	mov	result1, #13
0af98     88 01 90 CD |  if_b	jmp	#LR__0685
0af9c     10 8E 06 F1 | 	add	local06, #16
0afa0     FF FF FF FF 
0afa4     47 FF 6B FC | 	wrlong	##-1, local06
0afa8     04 8E 86 F1 | 	sub	local06, #4
0afac     FF FF FF FF 
0afb0     47 FF 6B FC | 	wrlong	##-1, local06
0afb4     08 8E 86 F1 | 	sub	local06, #8
0afb8     47 01 49 FC | 	wrbyte	#128, local06
0afbc     04 8E 86 F1 | 	sub	local06, #4
0afc0     03 92 0E F2 | 	cmp	local08, #3 wz
0afc4     34 01 90 5D |  if_ne	jmp	#LR__0684
0afc8     30 8E 06 F1 | 	add	local06, #48
0afcc     47 77 02 F6 | 	mov	arg01, local06
0afd0     30 8E 86 F1 | 	sub	local06, #48
0afd4     30 76 06 F1 | 	add	arg01, #48
0afd8     10 DD BF FD | 	call	#_ff_cc_ld_word_0253
0afdc     18 8D 02 F6 | 	mov	local05, result1
0afe0     0F 8C 46 F7 | 	zerox	local05, #15
0afe4     01 8C 0E F2 | 	cmp	local05, #1 wz
0afe8     10 01 90 5D |  if_ne	jmp	#LR__0684
0afec     47 AD 02 F6 | 	mov	local21, local06
0aff0     4A AF 02 F6 | 	mov	local22, local09
0aff4     01 AE 06 F1 | 	add	local22, #1
0aff8     57 B1 02 F6 | 	mov	local23, local22
0affc     56 77 02 F6 | 	mov	arg01, local21
0b000     58 79 02 F6 | 	mov	arg02, local23
0b004     00 DF BF FD | 	call	#_ff_cc_move_window_0273
0b008     18 B3 0A F6 | 	mov	local24, result1 wz
0b00c     EC 00 90 5D |  if_ne	jmp	#LR__0684
0b010     04 8E 06 F1 | 	add	local06, #4
0b014     47 01 48 FC | 	wrbyte	#0, local06
0b018     2C 8E 06 F1 | 	add	local06, #44
0b01c     47 99 02 F6 | 	mov	local11, local06
0b020     4C A3 02 F6 | 	mov	local16, local11
0b024     FE A3 06 F1 | 	add	local16, #510
0b028     51 A5 02 F6 | 	mov	local17, local16
0b02c     52 77 02 F6 | 	mov	arg01, local17
0b030     30 8E 86 F1 | 	sub	local06, #48
0b034     B4 DC BF FD | 	call	#_ff_cc_ld_word_0253
0b038     18 9B 02 F6 | 	mov	local12, result1
0b03c     4D 8D 02 F6 | 	mov	local05, local12
0b040     0F 8C 46 F7 | 	zerox	local05, #15
0b044     55 00 00 FF 
0b048     55 8C 0E F2 | 	cmp	local05, ##43605 wz
0b04c     AC 00 90 5D |  if_ne	jmp	#LR__0683
0b050     30 8E 06 F1 | 	add	local06, #48
0b054     47 AF 02 F6 | 	mov	local22, local06
0b058     57 AD 02 F6 | 	mov	local21, local22
0b05c     56 B1 02 F6 | 	mov	local23, local21
0b060     58 77 02 F6 | 	mov	arg01, local23
0b064     30 8E 86 F1 | 	sub	local06, #48
0b068     A4 DC BF FD | 	call	#_ff_cc_ld_dword_0255
0b06c     18 B3 02 F6 | 	mov	local24, result1
0b070     A9 B0 20 FF 
0b074     52 B2 0E F2 | 	cmp	local24, ##1096897106 wz
0b078     80 00 90 5D |  if_ne	jmp	#LR__0683
0b07c     30 8E 06 F1 | 	add	local06, #48
0b080     47 B5 02 F6 | 	mov	local25, local06
0b084     5A AB 02 F6 | 	mov	local20, local25
0b088     E4 AB 06 F1 | 	add	local20, #484
0b08c     55 B7 02 F6 | 	mov	local26, local20
0b090     5B 77 02 F6 | 	mov	arg01, local26
0b094     30 8E 86 F1 | 	sub	local06, #48
0b098     74 DC BF FD | 	call	#_ff_cc_ld_dword_0255
0b09c     18 B9 02 F6 | 	mov	local27, result1
0b0a0     B9 A0 30 FF 
0b0a4     72 B8 0E F2 | 	cmp	local27, ##1631679090 wz
0b0a8     50 00 90 5D |  if_ne	jmp	#LR__0683
0b0ac     30 8E 06 F1 | 	add	local06, #48
0b0b0     47 77 02 F6 | 	mov	arg01, local06
0b0b4     30 8E 86 F1 | 	sub	local06, #48
0b0b8     E8 77 06 F1 | 	add	arg01, #488
0b0bc     50 DC BF FD | 	call	#_ff_cc_ld_dword_0255
0b0c0     18 A5 02 F6 | 	mov	local17, result1
0b0c4     10 8E 06 F1 | 	add	local06, #16
0b0c8     47 A5 62 FC | 	wrlong	local17, local06
0b0cc     20 8E 06 F1 | 	add	local06, #32
0b0d0     47 A3 02 F6 | 	mov	local16, local06
0b0d4     51 8D 02 F6 | 	mov	local05, local16
0b0d8     EC 8D 06 F1 | 	add	local05, #492
0b0dc     46 99 02 F6 | 	mov	local11, local05
0b0e0     4C 77 02 F6 | 	mov	arg01, local11
0b0e4     30 8E 86 F1 | 	sub	local06, #48
0b0e8     24 DC BF FD | 	call	#_ff_cc_ld_dword_0255
0b0ec     18 A5 02 F6 | 	mov	local17, result1
0b0f0     0C 8E 06 F1 | 	add	local06, #12
0b0f4     47 A5 62 FC | 	wrlong	local17, local06
0b0f8     0C 8E 86 F1 | 	sub	local06, #12
0b0fc                 | LR__0683
0b0fc                 | LR__0684
0b0fc     47 93 42 FC | 	wrbyte	local08, local06
0b100     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
0b104     0D 8D E2 FA | 	rdword	local05, ptr__ff_cc_dat__
0b108     01 8C 06 F1 | 	add	local05, #1
0b10c     0D 8D 52 FC | 	wrword	local05, ptr__ff_cc_dat__
0b110     0D 99 E2 FA | 	rdword	local11, ptr__ff_cc_dat__
0b114     04 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #4
0b118     06 8E 06 F1 | 	add	local06, #6
0b11c     47 99 52 FC | 	wrword	local11, local06
0b120                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
0b120                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
0b120                 | ' 			{
0b120                 | ' 
0b120                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
0b120                 | ' 
0b120                 | ' 
0b120                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
0b120                 | ' 
0b120                 | ' 			}
0b120                 | ' 		}
0b120                 | ' 
0b120                 | ' 
0b120                 | ' 	}
0b120                 | ' 
0b120                 | ' 	fs->fs_type = (BYTE)fmt;
0b120                 | ' 	fs->id = ++Fsid;
0b120                 | ' #line 3589 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0b120                 | ' 	return FR_OK;
0b120     00 30 06 F6 | 	mov	result1, #0
0b124                 | LR__0685
0b124     AF F0 03 F6 | 	mov	ptra, fp
0b128     BF 00 A0 FD | 	call	#popregs_
0b12c                 | _ff_cc_mount_volume_0369_ret
0b12c     2D 00 64 FD | 	ret
0b130                 | 
0b130                 | _ff_cc_validate_0371
0b130     0B 5A 05 F6 | 	mov	COUNT_, #11
0b134     B0 00 A0 FD | 	call	#pushregs_
0b138     3B 85 0A F6 | 	mov	local01, arg01 wz
0b13c     3C 87 02 F6 | 	mov	local02, arg02
0b140     09 88 06 F6 | 	mov	local03, #9
0b144     80 00 90 AD |  if_e	jmp	#LR__0686
0b148     42 8B 0A FB | 	rdlong	local04, local01 wz
0b14c     78 00 90 AD |  if_e	jmp	#LR__0686
0b150     42 8D 02 FB | 	rdlong	local05, local01
0b154     46 8F CA FA | 	rdbyte	local06, local05 wz
0b158     6C 00 90 AD |  if_e	jmp	#LR__0686
0b15c     04 84 06 F1 | 	add	local01, #4
0b160     42 91 E2 FA | 	rdword	local07, local01
0b164     04 84 86 F1 | 	sub	local01, #4
0b168     0F 90 46 F7 | 	zerox	local07, #15
0b16c     42 93 02 FB | 	rdlong	local08, local01
0b170     06 92 06 F1 | 	add	local08, #6
0b174     49 95 E2 FA | 	rdword	local09, local08
0b178     06 92 86 F1 | 	sub	local08, #6
0b17c     4A 97 02 F6 | 	mov	local10, local09
0b180     0F 96 46 F7 | 	zerox	local10, #15
0b184     4B 91 0A F2 | 	cmp	local07, local10 wz
0b188     3C 00 90 5D |  if_ne	jmp	#LR__0686
0b18c     42 8D 02 FB | 	rdlong	local05, local01
0b190     01 8C 06 F1 | 	add	local05, #1
0b194     46 91 C2 FA | 	rdbyte	local07, local05
0b198     01 8C 86 F1 | 	sub	local05, #1
0b19c     48 8F 02 F6 | 	mov	local06, local07
0b1a0     47 77 0A F6 | 	mov	arg01, local06 wz
0b1a4     01 30 06 56 |  if_ne	mov	result1, #1
0b1a8                 | ' 
0b1a8                 | ' 	return Stat;
0b1a8     7C 1B 06 A1 |  if_e	add	ptr__ff_cc_dat__, #380
0b1ac     0D 31 C2 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
0b1b0     7C 1B 86 A1 |  if_e	sub	ptr__ff_cc_dat__, #380
0b1b4     18 99 02 F6 | 	mov	local11, result1
0b1b8     4C 8B 02 F6 | 	mov	local04, local11
0b1bc     07 8A 46 F7 | 	zerox	local04, #7
0b1c0     01 8A 0E F5 | 	and	local04, #1 wz
0b1c4     00 88 06 A6 |  if_e	mov	local03, #0
0b1c8                 | LR__0686
0b1c8     00 88 0E F2 | 	cmp	local03, #0 wz
0b1cc     42 8B 02 AB |  if_e	rdlong	local04, local01
0b1d0     00 8A 06 56 |  if_ne	mov	local04, #0
0b1d4     43 8B 62 FC | 	wrlong	local04, local02
0b1d8                 | ' 			res = FR_OK;
0b1d8                 | ' 		}
0b1d8                 | ' 
0b1d8                 | ' 	}
0b1d8                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
0b1d8                 | ' 	return res;
0b1d8     44 31 02 F6 | 	mov	result1, local03
0b1dc     AF F0 03 F6 | 	mov	ptra, fp
0b1e0     BF 00 A0 FD | 	call	#popregs_
0b1e4                 | _ff_cc_validate_0371_ret
0b1e4     2D 00 64 FD | 	ret
0b1e8                 | 
0b1e8                 | _ff_cc_f_mount
0b1e8     02 5A 05 F6 | 	mov	COUNT_, #2
0b1ec     B0 00 A0 FD | 	call	#pushregs_
0b1f0     20 F0 07 F1 | 	add	ptra, #32
0b1f4     04 5E 05 F1 | 	add	fp, #4
0b1f8     AF 76 62 FC | 	wrlong	arg01, fp
0b1fc     04 5E 05 F1 | 	add	fp, #4
0b200     AF 78 62 FC | 	wrlong	arg02, fp
0b204     04 5E 05 F1 | 	add	fp, #4
0b208     AF 7A 42 FC | 	wrbyte	arg03, fp
0b20c     04 5E 85 F1 | 	sub	fp, #4
0b210     AF 84 02 FB | 	rdlong	local01, fp
0b214     14 5E 05 F1 | 	add	fp, #20
0b218     AF 84 62 FC | 	wrlong	local01, fp
0b21c     AF 76 02 F6 | 	mov	arg01, fp
0b220     1C 5E 85 F1 | 	sub	fp, #28
0b224     B0 F5 BF FD | 	call	#_ff_cc_get_ldnumber_0352
0b228     14 5E 05 F1 | 	add	fp, #20
0b22c     AF 30 62 FC | 	wrlong	result1, fp
0b230     18 85 02 F6 | 	mov	local01, result1
0b234     14 5E 85 F1 | 	sub	fp, #20
0b238     00 84 5E F2 | 	cmps	local01, #0 wcz
0b23c     0B 30 06 C6 |  if_b	mov	result1, #11
0b240     B4 00 90 CD |  if_b	jmp	#LR__0689
0b244     14 5E 05 F1 | 	add	fp, #20
0b248     AF 84 02 FB | 	rdlong	local01, fp
0b24c     02 84 66 F0 | 	shl	local01, #2
0b250     0D 85 02 F1 | 	add	local01, ptr__ff_cc_dat__
0b254     42 87 02 FB | 	rdlong	local02, local01
0b258     04 5E 85 F1 | 	sub	fp, #4
0b25c     AF 86 62 FC | 	wrlong	local02, fp
0b260     AF 84 0A FB | 	rdlong	local01, fp wz
0b264     10 5E 85 F1 | 	sub	fp, #16
0b268     10 00 90 AD |  if_e	jmp	#LR__0687
0b26c     10 5E 05 F1 | 	add	fp, #16
0b270     AF 84 02 FB | 	rdlong	local01, fp
0b274     10 5E 85 F1 | 	sub	fp, #16
0b278     42 01 48 FC | 	wrbyte	#0, local01
0b27c                 | LR__0687
0b27c     04 5E 05 F1 | 	add	fp, #4
0b280     AF 84 0A FB | 	rdlong	local01, fp wz
0b284     04 5E 85 F1 | 	sub	fp, #4
0b288     10 00 90 AD |  if_e	jmp	#LR__0688
0b28c     04 5E 05 F1 | 	add	fp, #4
0b290     AF 84 02 FB | 	rdlong	local01, fp
0b294     04 5E 85 F1 | 	sub	fp, #4
0b298     42 01 48 FC | 	wrbyte	#0, local01
0b29c                 | LR__0688
0b29c     14 5E 05 F1 | 	add	fp, #20
0b2a0     AF 84 02 FB | 	rdlong	local01, fp
0b2a4     02 84 66 F0 | 	shl	local01, #2
0b2a8     0D 85 02 F1 | 	add	local01, ptr__ff_cc_dat__
0b2ac     10 5E 85 F1 | 	sub	fp, #16
0b2b0     AF 86 02 FB | 	rdlong	local02, fp
0b2b4     42 87 62 FC | 	wrlong	local02, local01
0b2b8     08 5E 05 F1 | 	add	fp, #8
0b2bc     AF 84 C2 FA | 	rdbyte	local01, fp
0b2c0     0C 5E 85 F1 | 	sub	fp, #12
0b2c4     07 84 4E F7 | 	zerox	local01, #7 wz
0b2c8     00 30 06 A6 |  if_e	mov	result1, #0
0b2cc     28 00 90 AD |  if_e	jmp	#LR__0689
0b2d0     08 5E 05 F1 | 	add	fp, #8
0b2d4     AF 76 02 F6 | 	mov	arg01, fp
0b2d8     04 5E 85 F1 | 	sub	fp, #4
0b2dc     AF 78 02 F6 | 	mov	arg02, fp
0b2e0     04 5E 85 F1 | 	sub	fp, #4
0b2e4     00 7A 06 F6 | 	mov	arg03, #0
0b2e8     04 F8 BF FD | 	call	#_ff_cc_mount_volume_0369
0b2ec     18 5E 05 F1 | 	add	fp, #24
0b2f0     AF 30 62 FC | 	wrlong	result1, fp
0b2f4                 | ' 
0b2f4                 | ' 	res = mount_volume(&path, &fs, 0);
0b2f4                 | ' 	return res ;
0b2f4     18 5E 85 F1 | 	sub	fp, #24
0b2f8                 | LR__0689
0b2f8     AF F0 03 F6 | 	mov	ptra, fp
0b2fc     BF 00 A0 FD | 	call	#popregs_
0b300                 | _ff_cc_f_mount_ret
0b300     2D 00 64 FD | 	ret
0b304                 | 
0b304                 | _ff_cc_f_open
0b304     10 5A 05 F6 | 	mov	COUNT_, #16
0b308     B0 00 A0 FD | 	call	#pushregs_
0b30c     58 F0 07 F1 | 	add	ptra, #88
0b310     04 5E 05 F1 | 	add	fp, #4
0b314     AF 76 62 FC | 	wrlong	arg01, fp
0b318     04 5E 05 F1 | 	add	fp, #4
0b31c     AF 78 62 FC | 	wrlong	arg02, fp
0b320     04 5E 05 F1 | 	add	fp, #4
0b324     AF 7A 42 FC | 	wrbyte	arg03, fp
0b328     08 5E 85 F1 | 	sub	fp, #8
0b32c     AF 84 0A FB | 	rdlong	local01, fp wz
0b330     04 5E 85 F1 | 	sub	fp, #4
0b334     09 30 06 A6 |  if_e	mov	result1, #9
0b338     FC 06 90 AD |  if_e	jmp	#LR__0713
0b33c     0C 5E 05 F1 | 	add	fp, #12
0b340     AF 84 C2 FA | 	rdbyte	local01, fp
0b344     3F 84 06 F5 | 	and	local01, #63
0b348     AF 84 42 FC | 	wrbyte	local01, fp
0b34c     04 5E 85 F1 | 	sub	fp, #4
0b350     AF 76 02 F6 | 	mov	arg01, fp
0b354     38 5E 05 F1 | 	add	fp, #56
0b358     AF 78 02 F6 | 	mov	arg02, fp
0b35c     34 5E 85 F1 | 	sub	fp, #52
0b360     AF 86 C2 FA | 	rdbyte	local02, fp
0b364     0C 5E 85 F1 | 	sub	fp, #12
0b368     43 7B 02 F6 | 	mov	arg03, local02
0b36c     80 F7 BF FD | 	call	#_ff_cc_mount_volume_0369
0b370     18 89 02 F6 | 	mov	local03, result1
0b374     10 5E 05 F1 | 	add	fp, #16
0b378     AF 88 62 FC | 	wrlong	local03, fp
0b37c     AF 84 0A FB | 	rdlong	local01, fp wz
0b380     10 5E 85 F1 | 	sub	fp, #16
0b384     84 06 90 5D |  if_ne	jmp	#LR__0711
0b388     40 5E 05 F1 | 	add	fp, #64
0b38c     AF 84 02 FB | 	rdlong	local01, fp
0b390     2C 5E 85 F1 | 	sub	fp, #44
0b394     AF 84 62 FC | 	wrlong	local01, fp
0b398     AF 76 02 F6 | 	mov	arg01, fp
0b39c     0C 5E 85 F1 | 	sub	fp, #12
0b3a0     AF 8A 02 FB | 	rdlong	local04, fp
0b3a4     08 5E 85 F1 | 	sub	fp, #8
0b3a8     45 8D 02 F6 | 	mov	local05, local04
0b3ac     46 79 02 F6 | 	mov	arg02, local05
0b3b0     00 F2 BF FD | 	call	#_ff_cc_follow_path_0346
0b3b4     18 8F 02 F6 | 	mov	local06, result1
0b3b8     10 5E 05 F1 | 	add	fp, #16
0b3bc     AF 8E 62 FC | 	wrlong	local06, fp
0b3c0     AF 84 0A FB | 	rdlong	local01, fp wz
0b3c4     10 5E 85 F1 | 	sub	fp, #16
0b3c8     20 00 90 5D |  if_ne	jmp	#LR__0690
0b3cc     3F 5E 05 F1 | 	add	fp, #63
0b3d0     AF 84 C2 FA | 	rdbyte	local01, fp
0b3d4     3F 5E 85 F1 | 	sub	fp, #63
0b3d8     07 84 46 F7 | 	zerox	local01, #7
0b3dc     80 84 CE F7 | 	test	local01, #128 wz
0b3e0     10 5E 05 51 |  if_ne	add	fp, #16
0b3e4     AF 0C 68 5C |  if_ne	wrlong	#6, fp
0b3e8     10 5E 85 51 |  if_ne	sub	fp, #16
0b3ec                 | LR__0690
0b3ec     0C 5E 05 F1 | 	add	fp, #12
0b3f0     AF 84 C2 FA | 	rdbyte	local01, fp
0b3f4     0C 5E 85 F1 | 	sub	fp, #12
0b3f8     07 84 46 F7 | 	zerox	local01, #7
0b3fc     1C 84 CE F7 | 	test	local01, #28 wz
0b400     04 02 90 AD |  if_e	jmp	#LR__0696
0b404     10 5E 05 F1 | 	add	fp, #16
0b408     AF 84 0A FB | 	rdlong	local01, fp wz
0b40c     10 5E 85 F1 | 	sub	fp, #16
0b410     48 00 90 AD |  if_e	jmp	#LR__0692
0b414     10 5E 05 F1 | 	add	fp, #16
0b418     AF 84 02 FB | 	rdlong	local01, fp
0b41c     10 5E 85 F1 | 	sub	fp, #16
0b420     04 84 0E F2 | 	cmp	local01, #4 wz
0b424     1C 00 90 5D |  if_ne	jmp	#LR__0691
0b428     14 5E 05 F1 | 	add	fp, #20
0b42c     AF 76 02 F6 | 	mov	arg01, fp
0b430     14 5E 85 F1 | 	sub	fp, #20
0b434     00 ED BF FD | 	call	#_ff_cc_dir_register_0327
0b438     10 5E 05 F1 | 	add	fp, #16
0b43c     AF 30 62 FC | 	wrlong	result1, fp
0b440     10 5E 85 F1 | 	sub	fp, #16
0b444                 | LR__0691
0b444     0C 5E 05 F1 | 	add	fp, #12
0b448     AF 84 C2 FA | 	rdbyte	local01, fp
0b44c     08 84 46 F5 | 	or	local01, #8
0b450     AF 84 42 FC | 	wrbyte	local01, fp
0b454     0C 5E 85 F1 | 	sub	fp, #12
0b458     48 00 90 FD | 	jmp	#LR__0695
0b45c                 | LR__0692
0b45c     1A 5E 05 F1 | 	add	fp, #26
0b460     AF 84 C2 FA | 	rdbyte	local01, fp
0b464     1A 5E 85 F1 | 	sub	fp, #26
0b468     07 84 46 F7 | 	zerox	local01, #7
0b46c     11 84 CE F7 | 	test	local01, #17 wz
0b470     10 00 90 AD |  if_e	jmp	#LR__0693
0b474     10 5E 05 F1 | 	add	fp, #16
0b478     AF 0E 68 FC | 	wrlong	#7, fp
0b47c     10 5E 85 F1 | 	sub	fp, #16
0b480     20 00 90 FD | 	jmp	#LR__0694
0b484                 | LR__0693
0b484     0C 5E 05 F1 | 	add	fp, #12
0b488     AF 84 C2 FA | 	rdbyte	local01, fp
0b48c     0C 5E 85 F1 | 	sub	fp, #12
0b490     07 84 46 F7 | 	zerox	local01, #7
0b494     04 84 CE F7 | 	test	local01, #4 wz
0b498     10 5E 05 51 |  if_ne	add	fp, #16
0b49c     AF 10 68 5C |  if_ne	wrlong	#8, fp
0b4a0     10 5E 85 51 |  if_ne	sub	fp, #16
0b4a4                 | LR__0694
0b4a4                 | LR__0695
0b4a4     10 5E 05 F1 | 	add	fp, #16
0b4a8     AF 84 0A FB | 	rdlong	local01, fp wz
0b4ac     10 5E 85 F1 | 	sub	fp, #16
0b4b0     D4 01 90 5D |  if_ne	jmp	#LR__0701
0b4b4     0C 5E 05 F1 | 	add	fp, #12
0b4b8     AF 8C C2 FA | 	rdbyte	local05, fp
0b4bc     0C 5E 85 F1 | 	sub	fp, #12
0b4c0     07 8C 46 F7 | 	zerox	local05, #7
0b4c4     08 8C CE F7 | 	test	local05, #8 wz
0b4c8     BC 01 90 AD |  if_e	jmp	#LR__0701
0b4cc     40 5E 05 F1 | 	add	fp, #64
0b4d0     AF 76 02 FB | 	rdlong	arg01, fp
0b4d4     10 5E 85 F1 | 	sub	fp, #16
0b4d8     AF 78 02 FB | 	rdlong	arg02, fp
0b4dc     30 5E 85 F1 | 	sub	fp, #48
0b4e0     A0 E9 BF FD | 	call	#_ff_cc_ld_clust_0314
0b4e4     18 8F 02 F6 | 	mov	local06, result1
0b4e8     44 5E 05 F1 | 	add	fp, #68
0b4ec     AF 8E 62 FC | 	wrlong	local06, fp
0b4f0     14 5E 85 F1 | 	sub	fp, #20
0b4f4     AF 76 02 FB | 	rdlong	arg01, fp
0b4f8     30 5E 85 F1 | 	sub	fp, #48
0b4fc     0E 76 06 F1 | 	add	arg01, #14
0b500     80 10 27 FF 
0b504     00 78 06 F6 | 	mov	arg02, ##1310785536
0b508     68 D8 BF FD | 	call	#_ff_cc_st_dword_0257
0b50c     30 5E 05 F1 | 	add	fp, #48
0b510     AF 84 02 FB | 	rdlong	local01, fp
0b514     0B 84 06 F1 | 	add	local01, #11
0b518     42 41 48 FC | 	wrbyte	#32, local01
0b51c     10 5E 05 F1 | 	add	fp, #16
0b520     AF 76 02 FB | 	rdlong	arg01, fp
0b524     10 5E 85 F1 | 	sub	fp, #16
0b528     AF 78 02 FB | 	rdlong	arg02, fp
0b52c     30 5E 85 F1 | 	sub	fp, #48
0b530     00 7A 06 F6 | 	mov	arg03, #0
0b534     A4 E9 BF FD | 	call	#_ff_cc_st_clust_0315
0b538     30 5E 05 F1 | 	add	fp, #48
0b53c     AF 76 02 FB | 	rdlong	arg01, fp
0b540     30 5E 85 F1 | 	sub	fp, #48
0b544     1C 76 06 F1 | 	add	arg01, #28
0b548     00 78 06 F6 | 	mov	arg02, #0
0b54c     24 D8 BF FD | 	call	#_ff_cc_st_dword_0257
0b550     40 5E 05 F1 | 	add	fp, #64
0b554     AF 84 02 FB | 	rdlong	local01, fp
0b558     03 84 06 F1 | 	add	local01, #3
0b55c     42 03 48 FC | 	wrbyte	#1, local01
0b560     04 5E 05 F1 | 	add	fp, #4
0b564     AF 90 02 FB | 	rdlong	local07, fp
0b568     44 5E 85 F1 | 	sub	fp, #68
0b56c     48 85 0A F6 | 	mov	local01, local07 wz
0b570     14 01 90 AD |  if_e	jmp	#LR__0701
0b574     40 5E 05 F1 | 	add	fp, #64
0b578     AF 84 02 FB | 	rdlong	local01, fp
0b57c     2C 84 06 F1 | 	add	local01, #44
0b580     42 8D 02 FB | 	rdlong	local05, local01
0b584     10 5E 05 F1 | 	add	fp, #16
0b588     AF 8C 62 FC | 	wrlong	local05, fp
0b58c     3C 5E 85 F1 | 	sub	fp, #60
0b590     AF 76 02 F6 | 	mov	arg01, fp
0b594     30 5E 05 F1 | 	add	fp, #48
0b598     AF 78 02 FB | 	rdlong	arg02, fp
0b59c     44 5E 85 F1 | 	sub	fp, #68
0b5a0     00 7A 06 F6 | 	mov	arg03, #0
0b5a4     60 E0 BF FD | 	call	#_ff_cc_remove_chain_0289
0b5a8     18 91 02 F6 | 	mov	local07, result1
0b5ac     10 5E 05 F1 | 	add	fp, #16
0b5b0     AF 90 62 FC | 	wrlong	local07, fp
0b5b4     10 5E 85 F1 | 	sub	fp, #16
0b5b8     48 85 0A F6 | 	mov	local01, local07 wz
0b5bc     C8 00 90 5D |  if_ne	jmp	#LR__0701
0b5c0     40 5E 05 F1 | 	add	fp, #64
0b5c4     AF 76 02 FB | 	rdlong	arg01, fp
0b5c8     10 5E 05 F1 | 	add	fp, #16
0b5cc     AF 78 02 FB | 	rdlong	arg02, fp
0b5d0     50 5E 85 F1 | 	sub	fp, #80
0b5d4     30 D9 BF FD | 	call	#_ff_cc_move_window_0273
0b5d8     18 8F 02 F6 | 	mov	local06, result1
0b5dc     10 5E 05 F1 | 	add	fp, #16
0b5e0     AF 8E 62 FC | 	wrlong	local06, fp
0b5e4     30 5E 05 F1 | 	add	fp, #48
0b5e8     AF 84 02 FB | 	rdlong	local01, fp
0b5ec     04 5E 05 F1 | 	add	fp, #4
0b5f0     AF 8C 02 FB | 	rdlong	local05, fp
0b5f4     44 5E 85 F1 | 	sub	fp, #68
0b5f8     01 8C 86 F1 | 	sub	local05, #1
0b5fc     0C 84 06 F1 | 	add	local01, #12
0b600     42 8D 62 FC | 	wrlong	local05, local01
0b604     80 00 90 FD | 	jmp	#LR__0701
0b608                 | LR__0696
0b608     10 5E 05 F1 | 	add	fp, #16
0b60c     AF 84 0A FB | 	rdlong	local01, fp wz
0b610     10 5E 85 F1 | 	sub	fp, #16
0b614     70 00 90 5D |  if_ne	jmp	#LR__0700
0b618     1A 5E 05 F1 | 	add	fp, #26
0b61c     AF 84 C2 FA | 	rdbyte	local01, fp
0b620     1A 5E 85 F1 | 	sub	fp, #26
0b624     07 84 46 F7 | 	zerox	local01, #7
0b628     10 84 CE F7 | 	test	local01, #16 wz
0b62c     10 00 90 AD |  if_e	jmp	#LR__0697
0b630     10 5E 05 F1 | 	add	fp, #16
0b634     AF 08 68 FC | 	wrlong	#4, fp
0b638     10 5E 85 F1 | 	sub	fp, #16
0b63c     48 00 90 FD | 	jmp	#LR__0699
0b640                 | LR__0697
0b640     0C 5E 05 F1 | 	add	fp, #12
0b644     AF 90 C2 FA | 	rdbyte	local07, fp
0b648     0C 5E 85 F1 | 	sub	fp, #12
0b64c     48 85 02 F6 | 	mov	local01, local07
0b650     07 84 46 F7 | 	zerox	local01, #7
0b654     02 84 CE F7 | 	test	local01, #2 wz
0b658     2C 00 90 AD |  if_e	jmp	#LR__0698
0b65c     1A 5E 05 F1 | 	add	fp, #26
0b660     AF 8A C2 FA | 	rdbyte	local04, fp
0b664     1A 5E 85 F1 | 	sub	fp, #26
0b668     45 8D 02 F6 | 	mov	local05, local04
0b66c     07 8C 46 F7 | 	zerox	local05, #7
0b670     01 8C 0E F5 | 	and	local05, #1 wz
0b674     10 00 90 AD |  if_e	jmp	#LR__0698
0b678     07 84 06 F6 | 	mov	local01, #7
0b67c     10 5E 05 F1 | 	add	fp, #16
0b680     AF 0E 68 FC | 	wrlong	#7, fp
0b684     10 5E 85 F1 | 	sub	fp, #16
0b688                 | LR__0698
0b688                 | LR__0699
0b688                 | LR__0700
0b688                 | LR__0701
0b688     10 5E 05 F1 | 	add	fp, #16
0b68c     AF 84 0A FB | 	rdlong	local01, fp wz
0b690     10 5E 85 F1 | 	sub	fp, #16
0b694     68 00 90 5D |  if_ne	jmp	#LR__0703
0b698     0C 5E 05 F1 | 	add	fp, #12
0b69c     AF 84 C2 FA | 	rdbyte	local01, fp
0b6a0     0C 5E 85 F1 | 	sub	fp, #12
0b6a4     07 84 46 F7 | 	zerox	local01, #7
0b6a8     08 84 CE F7 | 	test	local01, #8 wz
0b6ac     14 00 90 AD |  if_e	jmp	#LR__0702
0b6b0     0C 5E 05 F1 | 	add	fp, #12
0b6b4     AF 84 C2 FA | 	rdbyte	local01, fp
0b6b8     40 84 46 F5 | 	or	local01, #64
0b6bc     AF 84 42 FC | 	wrbyte	local01, fp
0b6c0     0C 5E 85 F1 | 	sub	fp, #12
0b6c4                 | LR__0702
0b6c4     04 5E 05 F1 | 	add	fp, #4
0b6c8     AF 84 02 FB | 	rdlong	local01, fp
0b6cc     3C 5E 05 F1 | 	add	fp, #60
0b6d0     AF 8C 02 FB | 	rdlong	local05, fp
0b6d4     2C 8C 06 F1 | 	add	local05, #44
0b6d8     46 8F 02 FB | 	rdlong	local06, local05
0b6dc     20 84 06 F1 | 	add	local01, #32
0b6e0     42 8F 62 FC | 	wrlong	local06, local01
0b6e4     3C 5E 85 F1 | 	sub	fp, #60
0b6e8     AF 84 02 FB | 	rdlong	local01, fp
0b6ec     2C 5E 05 F1 | 	add	fp, #44
0b6f0     AF 8C 02 FB | 	rdlong	local05, fp
0b6f4     30 5E 85 F1 | 	sub	fp, #48
0b6f8     24 84 06 F1 | 	add	local01, #36
0b6fc     42 8D 62 FC | 	wrlong	local05, local01
0b700                 | LR__0703
0b700     10 5E 05 F1 | 	add	fp, #16
0b704     AF 84 0A FB | 	rdlong	local01, fp wz
0b708     10 5E 85 F1 | 	sub	fp, #16
0b70c     FC 02 90 5D |  if_ne	jmp	#LR__0710
0b710     04 5E 05 F1 | 	add	fp, #4
0b714     AF 84 02 FB | 	rdlong	local01, fp
0b718     3C 5E 05 F1 | 	add	fp, #60
0b71c     AF 76 02 FB | 	rdlong	arg01, fp
0b720     10 5E 85 F1 | 	sub	fp, #16
0b724     AF 78 02 FB | 	rdlong	arg02, fp
0b728     30 5E 85 F1 | 	sub	fp, #48
0b72c     54 E7 BF FD | 	call	#_ff_cc_ld_clust_0314
0b730     18 89 02 F6 | 	mov	local03, result1
0b734     08 84 06 F1 | 	add	local01, #8
0b738     42 89 62 FC | 	wrlong	local03, local01
0b73c     04 5E 05 F1 | 	add	fp, #4
0b740     AF 84 02 FB | 	rdlong	local01, fp
0b744     2C 5E 05 F1 | 	add	fp, #44
0b748     AF 76 02 FB | 	rdlong	arg01, fp
0b74c     30 5E 85 F1 | 	sub	fp, #48
0b750     1C 76 06 F1 | 	add	arg01, #28
0b754     B8 D5 BF FD | 	call	#_ff_cc_ld_dword_0255
0b758     0C 84 06 F1 | 	add	local01, #12
0b75c     42 31 62 FC | 	wrlong	result1, local01
0b760     04 5E 05 F1 | 	add	fp, #4
0b764     AF 84 02 FB | 	rdlong	local01, fp
0b768     3C 5E 05 F1 | 	add	fp, #60
0b76c     AF 8C 02 FB | 	rdlong	local05, fp
0b770     42 8D 62 FC | 	wrlong	local05, local01
0b774     3C 5E 85 F1 | 	sub	fp, #60
0b778     AF 84 02 FB | 	rdlong	local01, fp
0b77c     3C 5E 05 F1 | 	add	fp, #60
0b780     AF 8C 02 FB | 	rdlong	local05, fp
0b784     06 8C 06 F1 | 	add	local05, #6
0b788     46 8F E2 FA | 	rdword	local06, local05
0b78c     04 84 06 F1 | 	add	local01, #4
0b790     42 8F 52 FC | 	wrword	local06, local01
0b794     3C 5E 85 F1 | 	sub	fp, #60
0b798     AF 84 02 FB | 	rdlong	local01, fp
0b79c     08 5E 05 F1 | 	add	fp, #8
0b7a0     AF 8C C2 FA | 	rdbyte	local05, fp
0b7a4     10 84 06 F1 | 	add	local01, #16
0b7a8     42 8D 42 FC | 	wrbyte	local05, local01
0b7ac     08 5E 85 F1 | 	sub	fp, #8
0b7b0     AF 84 02 FB | 	rdlong	local01, fp
0b7b4     11 84 06 F1 | 	add	local01, #17
0b7b8     42 01 48 FC | 	wrbyte	#0, local01
0b7bc     AF 84 02 FB | 	rdlong	local01, fp
0b7c0     1C 84 06 F1 | 	add	local01, #28
0b7c4     42 01 68 FC | 	wrlong	#0, local01
0b7c8     AF 84 02 FB | 	rdlong	local01, fp
0b7cc     14 84 06 F1 | 	add	local01, #20
0b7d0     42 01 68 FC | 	wrlong	#0, local01
0b7d4     08 5E 05 F1 | 	add	fp, #8
0b7d8     AF 84 C2 FA | 	rdbyte	local01, fp
0b7dc     0C 5E 85 F1 | 	sub	fp, #12
0b7e0     07 84 46 F7 | 	zerox	local01, #7
0b7e4     20 84 CE F7 | 	test	local01, #32 wz
0b7e8     20 02 90 AD |  if_e	jmp	#LR__0709
0b7ec     04 5E 05 F1 | 	add	fp, #4
0b7f0     AF 8C 02 FB | 	rdlong	local05, fp
0b7f4     04 5E 85 F1 | 	sub	fp, #4
0b7f8     0C 8C 06 F1 | 	add	local05, #12
0b7fc     46 87 02 FB | 	rdlong	local02, local05
0b800     00 86 1E F2 | 	cmp	local02, #0 wcz
0b804     04 02 90 ED |  if_be	jmp	#LR__0709
0b808     04 5E 05 F1 | 	add	fp, #4
0b80c     AF 84 02 FB | 	rdlong	local01, fp
0b810     42 8D 02 F6 | 	mov	local05, local01
0b814     0C 8C 06 F1 | 	add	local05, #12
0b818     46 8F 02 FB | 	rdlong	local06, local05
0b81c     14 84 06 F1 | 	add	local01, #20
0b820     42 8F 62 FC | 	wrlong	local06, local01
0b824     3C 5E 05 F1 | 	add	fp, #60
0b828     AF 90 02 FB | 	rdlong	local07, fp
0b82c     0A 90 06 F1 | 	add	local07, #10
0b830     48 8F E2 FA | 	rdword	local06, local07
0b834     09 8E 66 F0 | 	shl	local06, #9
0b838     08 5E 05 F1 | 	add	fp, #8
0b83c     AF 8E 62 FC | 	wrlong	local06, fp
0b840     44 5E 85 F1 | 	sub	fp, #68
0b844     AF 84 02 FB | 	rdlong	local01, fp
0b848     08 84 06 F1 | 	add	local01, #8
0b84c     42 8D 02 FB | 	rdlong	local05, local01
0b850     48 5E 05 F1 | 	add	fp, #72
0b854     AF 8C 62 FC | 	wrlong	local05, fp
0b858                 | ' 				fp->fptr = fp->obj.objsize;
0b858                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
0b858                 | ' 				clst = fp->obj.sclust;
0b858                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
0b858     48 5E 85 F1 | 	sub	fp, #72
0b85c     AF 84 02 FB | 	rdlong	local01, fp
0b860     0C 84 06 F1 | 	add	local01, #12
0b864     42 8D 02 FB | 	rdlong	local05, local01
0b868     50 5E 05 F1 | 	add	fp, #80
0b86c     AF 8C 62 FC | 	wrlong	local05, fp
0b870     54 5E 85 F1 | 	sub	fp, #84
0b874                 | LR__0704
0b874     10 5E 05 F1 | 	add	fp, #16
0b878     AF 8E 02 FB | 	rdlong	local06, fp
0b87c     10 5E 85 F1 | 	sub	fp, #16
0b880     47 8B 0A F6 | 	mov	local04, local06 wz
0b884     B0 00 90 5D |  if_ne	jmp	#LR__0705
0b888     54 5E 05 F1 | 	add	fp, #84
0b88c     AF 88 02 FB | 	rdlong	local03, fp
0b890     44 87 02 F6 | 	mov	local02, local03
0b894     0C 5E 85 F1 | 	sub	fp, #12
0b898     AF 92 02 FB | 	rdlong	local08, fp
0b89c     48 5E 85 F1 | 	sub	fp, #72
0b8a0     49 95 02 F6 | 	mov	local09, local08
0b8a4     4A 87 1A F2 | 	cmp	local02, local09 wcz
0b8a8     8C 00 90 ED |  if_be	jmp	#LR__0705
0b8ac     04 5E 05 F1 | 	add	fp, #4
0b8b0     AF 76 02 FB | 	rdlong	arg01, fp
0b8b4     48 5E 05 F1 | 	add	fp, #72
0b8b8     AF 96 02 FB | 	rdlong	local10, fp
0b8bc     4C 5E 85 F1 | 	sub	fp, #76
0b8c0     4B 99 02 F6 | 	mov	local11, local10
0b8c4     4C 79 02 F6 | 	mov	arg02, local11
0b8c8     74 D8 BF FD | 	call	#_ff_cc_get_fat_0281
0b8cc     18 9B 02 F6 | 	mov	local12, result1
0b8d0     4C 5E 05 F1 | 	add	fp, #76
0b8d4     AF 9A 62 FC | 	wrlong	local12, fp
0b8d8     4C 5E 85 F1 | 	sub	fp, #76
0b8dc     01 9A 1E F2 | 	cmp	local12, #1 wcz
0b8e0     10 5E 05 E1 |  if_be	add	fp, #16
0b8e4     AF 04 68 EC |  if_be	wrlong	#2, fp
0b8e8     10 5E 85 E1 |  if_be	sub	fp, #16
0b8ec     4C 5E 05 F1 | 	add	fp, #76
0b8f0     AF 9C 02 FB | 	rdlong	local13, fp
0b8f4     4C 5E 85 F1 | 	sub	fp, #76
0b8f8     FF FF 7F FF 
0b8fc     FF 9D 0E F2 | 	cmp	local13, ##-1 wz
0b900     10 5E 05 A1 |  if_e	add	fp, #16
0b904     AF 02 68 AC |  if_e	wrlong	#1, fp
0b908     10 5E 85 A1 |  if_e	sub	fp, #16
0b90c     54 5E 05 F1 | 	add	fp, #84
0b910     AF 9E 02 FB | 	rdlong	local14, fp
0b914     4F 9D 02 F6 | 	mov	local13, local14
0b918     0C 5E 85 F1 | 	sub	fp, #12
0b91c     AF A0 02 FB | 	rdlong	local15, fp
0b920     50 A3 02 F6 | 	mov	local16, local15
0b924     51 9D 82 F1 | 	sub	local13, local16
0b928     0C 5E 05 F1 | 	add	fp, #12
0b92c     AF 9C 62 FC | 	wrlong	local13, fp
0b930     54 5E 85 F1 | 	sub	fp, #84
0b934     3C FF 9F FD | 	jmp	#LR__0704
0b938                 | LR__0705
0b938     04 5E 05 F1 | 	add	fp, #4
0b93c     AF 84 02 FB | 	rdlong	local01, fp
0b940     48 5E 05 F1 | 	add	fp, #72
0b944     AF 8C 02 FB | 	rdlong	local05, fp
0b948     18 84 06 F1 | 	add	local01, #24
0b94c     42 8D 62 FC | 	wrlong	local05, local01
0b950     3C 5E 85 F1 | 	sub	fp, #60
0b954     AF 90 02 FB | 	rdlong	local07, fp
0b958     10 5E 85 F1 | 	sub	fp, #16
0b95c     48 85 0A F6 | 	mov	local01, local07 wz
0b960     A8 00 90 5D |  if_ne	jmp	#LR__0708
0b964     54 5E 05 F1 | 	add	fp, #84
0b968     AF 8E 02 FB | 	rdlong	local06, fp
0b96c     54 5E 85 F1 | 	sub	fp, #84
0b970     47 8B 02 F6 | 	mov	local04, local06
0b974     45 8D 02 F6 | 	mov	local05, local04
0b978     FF 8D 0E F5 | 	and	local05, #511 wz
0b97c     8C 00 90 AD |  if_e	jmp	#LR__0708
0b980     40 5E 05 F1 | 	add	fp, #64
0b984     AF 76 02 FB | 	rdlong	arg01, fp
0b988     0C 5E 05 F1 | 	add	fp, #12
0b98c     AF 8A 02 FB | 	rdlong	local04, fp
0b990     4C 5E 85 F1 | 	sub	fp, #76
0b994     45 8D 02 F6 | 	mov	local05, local04
0b998     46 79 02 F6 | 	mov	arg02, local05
0b99c     60 D7 BF FD | 	call	#_ff_cc_clst2sect_0276
0b9a0     18 8F 02 F6 | 	mov	local06, result1
0b9a4     50 5E 05 F1 | 	add	fp, #80
0b9a8     AF 8E 62 FC | 	wrlong	local06, fp
0b9ac     AF 90 0A FB | 	rdlong	local07, fp wz
0b9b0     50 5E 85 F1 | 	sub	fp, #80
0b9b4     14 00 90 5D |  if_ne	jmp	#LR__0706
0b9b8     02 84 06 F6 | 	mov	local01, #2
0b9bc     10 5E 05 F1 | 	add	fp, #16
0b9c0     AF 04 68 FC | 	wrlong	#2, fp
0b9c4     10 5E 85 F1 | 	sub	fp, #16
0b9c8     40 00 90 FD | 	jmp	#LR__0707
0b9cc                 | LR__0706
0b9cc     04 5E 05 F1 | 	add	fp, #4
0b9d0     AF 90 02 FB | 	rdlong	local07, fp
0b9d4     48 85 02 F6 | 	mov	local01, local07
0b9d8     4C 5E 05 F1 | 	add	fp, #76
0b9dc     AF 8A 02 FB | 	rdlong	local04, fp
0b9e0     45 8D 02 F6 | 	mov	local05, local04
0b9e4     04 5E 05 F1 | 	add	fp, #4
0b9e8     AF 88 02 FB | 	rdlong	local03, fp
0b9ec     54 5E 85 F1 | 	sub	fp, #84
0b9f0     44 87 02 F6 | 	mov	local02, local03
0b9f4     43 8F 02 F6 | 	mov	local06, local02
0b9f8     09 8E 46 F0 | 	shr	local06, #9
0b9fc     47 8D 02 F1 | 	add	local05, local06
0ba00     1C 84 06 F1 | 	add	local01, #28
0ba04     42 8D 62 FC | 	wrlong	local05, local01
0ba08     1C 84 86 F1 | 	sub	local01, #28
0ba0c                 | LR__0707
0ba0c                 | LR__0708
0ba0c                 | LR__0709
0ba0c                 | LR__0710
0ba0c                 | LR__0711
0ba0c     10 5E 05 F1 | 	add	fp, #16
0ba10     AF 84 0A FB | 	rdlong	local01, fp wz
0ba14     10 5E 85 F1 | 	sub	fp, #16
0ba18     10 00 90 AD |  if_e	jmp	#LR__0712
0ba1c     04 5E 05 F1 | 	add	fp, #4
0ba20     AF 84 02 FB | 	rdlong	local01, fp
0ba24     04 5E 85 F1 | 	sub	fp, #4
0ba28     42 01 68 FC | 	wrlong	#0, local01
0ba2c                 | LR__0712
0ba2c                 | ' 
0ba2c                 | ' 	return res ;
0ba2c     10 5E 05 F1 | 	add	fp, #16
0ba30     AF 30 02 FB | 	rdlong	result1, fp
0ba34     10 5E 85 F1 | 	sub	fp, #16
0ba38                 | LR__0713
0ba38     AF F0 03 F6 | 	mov	ptra, fp
0ba3c     BF 00 A0 FD | 	call	#popregs_
0ba40                 | _ff_cc_f_open_ret
0ba40     2D 00 64 FD | 	ret
0ba44                 | 
0ba44                 | _ff_cc_f_read
0ba44     19 5A 05 F6 | 	mov	COUNT_, #25
0ba48     B0 00 A0 FD | 	call	#pushregs_
0ba4c     38 F0 07 F1 | 	add	ptra, #56
0ba50     04 5E 05 F1 | 	add	fp, #4
0ba54     AF 76 62 FC | 	wrlong	arg01, fp
0ba58     04 5E 05 F1 | 	add	fp, #4
0ba5c     AF 78 62 FC | 	wrlong	arg02, fp
0ba60     04 5E 05 F1 | 	add	fp, #4
0ba64     AF 7A 62 FC | 	wrlong	arg03, fp
0ba68     04 5E 05 F1 | 	add	fp, #4
0ba6c     AF 7C 62 FC | 	wrlong	arg04, fp
0ba70     18 5E 05 F1 | 	add	fp, #24
0ba74     AF 00 68 FC | 	wrlong	#0, fp
0ba78     20 5E 85 F1 | 	sub	fp, #32
0ba7c     AF 84 02 FB | 	rdlong	local01, fp
0ba80     2C 5E 05 F1 | 	add	fp, #44
0ba84     AF 84 62 FC | 	wrlong	local01, fp
0ba88     24 5E 85 F1 | 	sub	fp, #36
0ba8c     AF 84 02 FB | 	rdlong	local01, fp
0ba90     42 01 68 FC | 	wrlong	#0, local01
0ba94     0C 5E 85 F1 | 	sub	fp, #12
0ba98     AF 76 02 FB | 	rdlong	arg01, fp
0ba9c     14 5E 05 F1 | 	add	fp, #20
0baa0     AF 78 02 F6 | 	mov	arg02, fp
0baa4     18 5E 85 F1 | 	sub	fp, #24
0baa8     84 F6 BF FD | 	call	#_ff_cc_validate_0371
0baac     14 5E 05 F1 | 	add	fp, #20
0bab0     AF 30 62 FC | 	wrlong	result1, fp
0bab4     18 87 02 F6 | 	mov	local02, result1
0bab8     14 5E 85 F1 | 	sub	fp, #20
0babc     43 85 0A F6 | 	mov	local01, local02 wz
0bac0     2C 00 90 5D |  if_ne	jmp	#LR__0714
0bac4     04 5E 05 F1 | 	add	fp, #4
0bac8     AF 88 02 FB | 	rdlong	local03, fp
0bacc     11 88 06 F1 | 	add	local03, #17
0bad0     44 8B C2 FA | 	rdbyte	local04, local03
0bad4     45 8D 02 F6 | 	mov	local05, local04
0bad8     07 8C 46 F7 | 	zerox	local05, #7
0badc     10 5E 05 F1 | 	add	fp, #16
0bae0     AF 8C 62 FC | 	wrlong	local05, fp
0bae4     14 5E 85 F1 | 	sub	fp, #20
0bae8     46 8F 0A F6 | 	mov	local06, local05 wz
0baec     10 00 90 AD |  if_e	jmp	#LR__0715
0baf0                 | LR__0714
0baf0     14 5E 05 F1 | 	add	fp, #20
0baf4     AF 30 02 FB | 	rdlong	result1, fp
0baf8     14 5E 85 F1 | 	sub	fp, #20
0bafc     84 05 90 FD | 	jmp	#LR__0733
0bb00                 | LR__0715
0bb00     04 5E 05 F1 | 	add	fp, #4
0bb04     AF 86 02 FB | 	rdlong	local02, fp
0bb08     04 5E 85 F1 | 	sub	fp, #4
0bb0c     10 86 06 F1 | 	add	local02, #16
0bb10     43 85 C2 FA | 	rdbyte	local01, local02
0bb14     01 84 CE F7 | 	test	local01, #1 wz
0bb18     07 30 06 A6 |  if_e	mov	result1, #7
0bb1c     64 05 90 AD |  if_e	jmp	#LR__0733
0bb20     04 5E 05 F1 | 	add	fp, #4
0bb24     AF 86 02 FB | 	rdlong	local02, fp
0bb28     43 89 02 F6 | 	mov	local03, local02
0bb2c     0C 86 06 F1 | 	add	local02, #12
0bb30     43 85 02 FB | 	rdlong	local01, local02
0bb34     14 88 06 F1 | 	add	local03, #20
0bb38     44 8F 02 FB | 	rdlong	local06, local03
0bb3c     47 85 82 F1 | 	sub	local01, local06
0bb40     20 5E 05 F1 | 	add	fp, #32
0bb44     AF 84 62 FC | 	wrlong	local01, fp
0bb48     18 5E 85 F1 | 	sub	fp, #24
0bb4c     AF 84 02 FB | 	rdlong	local01, fp
0bb50     18 5E 05 F1 | 	add	fp, #24
0bb54     AF 90 02 FB | 	rdlong	local07, fp
0bb58     24 5E 85 F1 | 	sub	fp, #36
0bb5c     48 85 1A F2 | 	cmp	local01, local07 wcz
0bb60     14 00 90 ED |  if_be	jmp	#LR__0716
0bb64     24 5E 05 F1 | 	add	fp, #36
0bb68     AF 84 02 FB | 	rdlong	local01, fp
0bb6c     18 5E 85 F1 | 	sub	fp, #24
0bb70     AF 84 62 FC | 	wrlong	local01, fp
0bb74     0C 5E 85 F1 | 	sub	fp, #12
0bb78                 | LR__0716
0bb78                 | ' 
0bb78                 | ' 	for ( ; btr;
0bb78                 | LR__0717
0bb78     0C 5E 05 F1 | 	add	fp, #12
0bb7c     AF 86 02 FB | 	rdlong	local02, fp
0bb80     0C 5E 85 F1 | 	sub	fp, #12
0bb84     43 85 0A F6 | 	mov	local01, local02 wz
0bb88     F4 04 90 AD |  if_e	jmp	#LR__0732
0bb8c     04 5E 05 F1 | 	add	fp, #4
0bb90     AF 90 02 FB | 	rdlong	local07, fp
0bb94     04 5E 85 F1 | 	sub	fp, #4
0bb98     14 90 06 F1 | 	add	local07, #20
0bb9c     48 93 02 FB | 	rdlong	local08, local07
0bba0     FF 93 CE F7 | 	test	local08, #511 wz
0bba4     64 03 90 5D |  if_ne	jmp	#LR__0728
0bba8     04 5E 05 F1 | 	add	fp, #4
0bbac     AF 88 02 FB | 	rdlong	local03, fp
0bbb0     14 88 06 F1 | 	add	local03, #20
0bbb4     44 91 02 FB | 	rdlong	local07, local03
0bbb8     09 90 46 F0 | 	shr	local07, #9
0bbbc     14 5E 05 F1 | 	add	fp, #20
0bbc0     AF 94 02 FB | 	rdlong	local09, fp
0bbc4     4A 97 02 F6 | 	mov	local10, local09
0bbc8     0A 96 06 F1 | 	add	local10, #10
0bbcc     4B 99 E2 FA | 	rdword	local11, local10
0bbd0     4C 8D 02 F6 | 	mov	local05, local11
0bbd4     0F 8C 46 F7 | 	zerox	local05, #15
0bbd8     01 8C 86 F1 | 	sub	local05, #1
0bbdc     46 91 02 F5 | 	and	local07, local05
0bbe0     18 5E 05 F1 | 	add	fp, #24
0bbe4     AF 90 62 FC | 	wrlong	local07, fp
0bbe8     AF 90 0A FB | 	rdlong	local07, fp wz
0bbec     30 5E 85 F1 | 	sub	fp, #48
0bbf0     E0 00 90 5D |  if_ne	jmp	#LR__0722
0bbf4     04 5E 05 F1 | 	add	fp, #4
0bbf8     AF 90 02 FB | 	rdlong	local07, fp
0bbfc     04 5E 85 F1 | 	sub	fp, #4
0bc00     14 90 06 F1 | 	add	local07, #20
0bc04     48 93 0A FB | 	rdlong	local08, local07 wz
0bc08     20 00 90 5D |  if_ne	jmp	#LR__0718
0bc0c     04 5E 05 F1 | 	add	fp, #4
0bc10     AF 90 02 FB | 	rdlong	local07, fp
0bc14     08 90 06 F1 | 	add	local07, #8
0bc18     48 93 02 FB | 	rdlong	local08, local07
0bc1c     18 5E 05 F1 | 	add	fp, #24
0bc20     AF 92 62 FC | 	wrlong	local08, fp
0bc24     1C 5E 85 F1 | 	sub	fp, #28
0bc28     28 00 90 FD | 	jmp	#LR__0719
0bc2c                 | LR__0718
0bc2c     04 5E 05 F1 | 	add	fp, #4
0bc30     AF 76 02 FB | 	rdlong	arg01, fp
0bc34     3B 8F 02 F6 | 	mov	local06, arg01
0bc38     04 5E 85 F1 | 	sub	fp, #4
0bc3c     18 8E 06 F1 | 	add	local06, #24
0bc40     47 79 02 FB | 	rdlong	arg02, local06
0bc44     F8 D4 BF FD | 	call	#_ff_cc_get_fat_0281
0bc48     1C 5E 05 F1 | 	add	fp, #28
0bc4c     AF 30 62 FC | 	wrlong	result1, fp
0bc50     1C 5E 85 F1 | 	sub	fp, #28
0bc54                 | LR__0719
0bc54     1C 5E 05 F1 | 	add	fp, #28
0bc58     AF 90 02 FB | 	rdlong	local07, fp
0bc5c     1C 5E 85 F1 | 	sub	fp, #28
0bc60     02 90 1E F2 | 	cmp	local07, #2 wcz
0bc64     1C 00 90 3D |  if_ae	jmp	#LR__0720
0bc68     04 5E 05 F1 | 	add	fp, #4
0bc6c     AF 90 02 FB | 	rdlong	local07, fp
0bc70     04 5E 85 F1 | 	sub	fp, #4
0bc74     11 90 06 F1 | 	add	local07, #17
0bc78     48 05 48 FC | 	wrbyte	#2, local07
0bc7c     02 30 06 F6 | 	mov	result1, #2
0bc80     00 04 90 FD | 	jmp	#LR__0733
0bc84                 | LR__0720
0bc84     1C 5E 05 F1 | 	add	fp, #28
0bc88     AF 90 02 FB | 	rdlong	local07, fp
0bc8c     1C 5E 85 F1 | 	sub	fp, #28
0bc90     FF FF 7F FF 
0bc94     FF 91 0E F2 | 	cmp	local07, ##-1 wz
0bc98     1C 00 90 5D |  if_ne	jmp	#LR__0721
0bc9c     04 5E 05 F1 | 	add	fp, #4
0bca0     AF 90 02 FB | 	rdlong	local07, fp
0bca4     04 5E 85 F1 | 	sub	fp, #4
0bca8     11 90 06 F1 | 	add	local07, #17
0bcac     48 03 48 FC | 	wrbyte	#1, local07
0bcb0     01 30 06 F6 | 	mov	result1, #1
0bcb4     CC 03 90 FD | 	jmp	#LR__0733
0bcb8                 | LR__0721
0bcb8     04 5E 05 F1 | 	add	fp, #4
0bcbc     AF 90 02 FB | 	rdlong	local07, fp
0bcc0     18 5E 05 F1 | 	add	fp, #24
0bcc4     AF 92 02 FB | 	rdlong	local08, fp
0bcc8     1C 5E 85 F1 | 	sub	fp, #28
0bccc     18 90 06 F1 | 	add	local07, #24
0bcd0     48 93 62 FC | 	wrlong	local08, local07
0bcd4                 | LR__0722
0bcd4     18 5E 05 F1 | 	add	fp, #24
0bcd8     AF 76 02 FB | 	rdlong	arg01, fp
0bcdc     14 5E 85 F1 | 	sub	fp, #20
0bce0     AF 92 02 FB | 	rdlong	local08, fp
0bce4     04 5E 85 F1 | 	sub	fp, #4
0bce8     18 92 06 F1 | 	add	local08, #24
0bcec     49 79 02 FB | 	rdlong	arg02, local08
0bcf0     0C D4 BF FD | 	call	#_ff_cc_clst2sect_0276
0bcf4     20 5E 05 F1 | 	add	fp, #32
0bcf8     AF 30 62 FC | 	wrlong	result1, fp
0bcfc     AF 90 0A FB | 	rdlong	local07, fp wz
0bd00     20 5E 85 F1 | 	sub	fp, #32
0bd04     1C 00 90 5D |  if_ne	jmp	#LR__0723
0bd08     04 5E 05 F1 | 	add	fp, #4
0bd0c     AF 90 02 FB | 	rdlong	local07, fp
0bd10     04 5E 85 F1 | 	sub	fp, #4
0bd14     11 90 06 F1 | 	add	local07, #17
0bd18     48 05 48 FC | 	wrbyte	#2, local07
0bd1c     02 30 06 F6 | 	mov	result1, #2
0bd20     60 03 90 FD | 	jmp	#LR__0733
0bd24                 | LR__0723
0bd24     20 5E 05 F1 | 	add	fp, #32
0bd28     AF 90 02 FB | 	rdlong	local07, fp
0bd2c     10 5E 05 F1 | 	add	fp, #16
0bd30     AF 92 02 FB | 	rdlong	local08, fp
0bd34     49 91 02 F1 | 	add	local07, local08
0bd38     10 5E 85 F1 | 	sub	fp, #16
0bd3c     AF 90 62 FC | 	wrlong	local07, fp
0bd40     14 5E 85 F1 | 	sub	fp, #20
0bd44     AF 90 02 FB | 	rdlong	local07, fp
0bd48     09 90 46 F0 | 	shr	local07, #9
0bd4c     20 5E 05 F1 | 	add	fp, #32
0bd50     AF 90 62 FC | 	wrlong	local07, fp
0bd54     2C 5E 85 F1 | 	sub	fp, #44
0bd58     00 90 1E F2 | 	cmp	local07, #0 wcz
0bd5c     90 01 90 ED |  if_be	jmp	#LR__0727
0bd60     30 5E 05 F1 | 	add	fp, #48
0bd64     AF 90 02 FB | 	rdlong	local07, fp
0bd68     04 5E 85 F1 | 	sub	fp, #4
0bd6c     AF 92 02 FB | 	rdlong	local08, fp
0bd70     49 91 02 F1 | 	add	local07, local08
0bd74     14 5E 85 F1 | 	sub	fp, #20
0bd78     AF 8C 02 FB | 	rdlong	local05, fp
0bd7c     18 5E 85 F1 | 	sub	fp, #24
0bd80     0A 8C 06 F1 | 	add	local05, #10
0bd84     46 8F E2 FA | 	rdword	local06, local05
0bd88     47 91 1A F2 | 	cmp	local07, local06 wcz
0bd8c     28 00 90 ED |  if_be	jmp	#LR__0724
0bd90     18 5E 05 F1 | 	add	fp, #24
0bd94     AF 88 02 FB | 	rdlong	local03, fp
0bd98     0A 88 06 F1 | 	add	local03, #10
0bd9c     44 91 E2 FA | 	rdword	local07, local03
0bda0     18 5E 05 F1 | 	add	fp, #24
0bda4     AF 8E 02 FB | 	rdlong	local06, fp
0bda8     47 91 82 F1 | 	sub	local07, local06
0bdac     04 5E 85 F1 | 	sub	fp, #4
0bdb0     AF 90 62 FC | 	wrlong	local07, fp
0bdb4     2C 5E 85 F1 | 	sub	fp, #44
0bdb8                 | LR__0724
0bdb8     18 5E 05 F1 | 	add	fp, #24
0bdbc     AF 90 02 FB | 	rdlong	local07, fp
0bdc0     01 90 06 F1 | 	add	local07, #1
0bdc4     48 77 C2 FA | 	rdbyte	arg01, local07
0bdc8     1C 5E 05 F1 | 	add	fp, #28
0bdcc     AF 78 02 FB | 	rdlong	arg02, fp
0bdd0     14 5E 85 F1 | 	sub	fp, #20
0bdd4     AF 7A 02 FB | 	rdlong	arg03, fp
0bdd8     0C 5E 05 F1 | 	add	fp, #12
0bddc     AF 7C 02 FB | 	rdlong	arg04, fp
0bde0     2C 5E 85 F1 | 	sub	fp, #44
0bde4     7C CA BF FD | 	call	#_ff_cc_disk_read
0bde8     00 30 0E F2 | 	cmp	result1, #0 wz
0bdec     1C 00 90 AD |  if_e	jmp	#LR__0725
0bdf0     04 5E 05 F1 | 	add	fp, #4
0bdf4     AF 90 02 FB | 	rdlong	local07, fp
0bdf8     04 5E 85 F1 | 	sub	fp, #4
0bdfc     11 90 06 F1 | 	add	local07, #17
0be00     48 03 48 FC | 	wrbyte	#1, local07
0be04     01 30 06 F6 | 	mov	result1, #1
0be08     78 02 90 FD | 	jmp	#LR__0733
0be0c                 | LR__0725
0be0c     18 5E 05 F1 | 	add	fp, #24
0be10     AF 90 02 FB | 	rdlong	local07, fp
0be14     18 5E 85 F1 | 	sub	fp, #24
0be18     03 90 06 F1 | 	add	local07, #3
0be1c     48 93 CA FA | 	rdbyte	local08, local07 wz
0be20     B0 00 90 AD |  if_e	jmp	#LR__0726
0be24     18 5E 05 F1 | 	add	fp, #24
0be28     AF 8C 02 FB | 	rdlong	local05, fp
0be2c     2C 8C 06 F1 | 	add	local05, #44
0be30     46 8F 02 FB | 	rdlong	local06, local05
0be34     08 5E 05 F1 | 	add	fp, #8
0be38     AF 98 02 FB | 	rdlong	local11, fp
0be3c     4C 8F 82 F1 | 	sub	local06, local11
0be40     0C 5E 05 F1 | 	add	fp, #12
0be44     AF 9A 02 FB | 	rdlong	local12, fp
0be48     2C 5E 85 F1 | 	sub	fp, #44
0be4c     4D 8F 1A F2 | 	cmp	local06, local12 wcz
0be50     80 00 90 3D |  if_ae	jmp	#LR__0726
0be54     34 5E 05 F1 | 	add	fp, #52
0be58     AF 88 02 FB | 	rdlong	local03, fp
0be5c     44 91 02 F6 | 	mov	local07, local03
0be60     1C 5E 85 F1 | 	sub	fp, #28
0be64     AF 8E 02 FB | 	rdlong	local06, fp
0be68     47 8B 02 F6 | 	mov	local04, local06
0be6c     2C 8A 06 F1 | 	add	local04, #44
0be70     45 8D 02 FB | 	rdlong	local05, local04
0be74     2C 8A 86 F1 | 	sub	local04, #44
0be78     46 93 02 F6 | 	mov	local08, local05
0be7c     08 5E 05 F1 | 	add	fp, #8
0be80     AF 94 02 FB | 	rdlong	local09, fp
0be84     4A 97 02 F6 | 	mov	local10, local09
0be88     4B 93 82 F1 | 	sub	local08, local10
0be8c     49 99 02 F6 | 	mov	local11, local08
0be90     09 98 66 F0 | 	shl	local11, #9
0be94     4C 9D 02 F6 | 	mov	local13, local11
0be98     4C 91 02 F1 | 	add	local07, local11
0be9c     48 9B 02 F6 | 	mov	local12, local07
0bea0     08 5E 85 F1 | 	sub	fp, #8
0bea4     AF 9E 02 FB | 	rdlong	local14, fp
0bea8     18 5E 85 F1 | 	sub	fp, #24
0beac     4F A1 02 F6 | 	mov	local15, local14
0beb0     30 A0 06 F1 | 	add	local15, #48
0beb4     50 A3 02 F6 | 	mov	local16, local15
0beb8     51 A5 02 F6 | 	mov	local17, local16
0bebc     09 A6 C6 F9 | 	decod	local18, #9
0bec0     4D 77 02 F6 | 	mov	arg01, local12
0bec4     52 79 02 F6 | 	mov	arg02, local17
0bec8     09 7A C6 F9 | 	decod	arg03, #9
0becc     30 A0 86 F1 | 	sub	local15, #48
0bed0     CC CE BF FD | 	call	#_ff_cc_mem_cpy_0260
0bed4                 | LR__0726
0bed4     2C 5E 05 F1 | 	add	fp, #44
0bed8     AF 90 02 FB | 	rdlong	local07, fp
0bedc     09 90 66 F0 | 	shl	local07, #9
0bee0     04 5E 85 F1 | 	sub	fp, #4
0bee4     AF 90 62 FC | 	wrlong	local07, fp
0bee8     28 5E 85 F1 | 	sub	fp, #40
0beec                 | ' 					mem_cpy(rbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ), fs->win,  ((UINT) 512 ) );
0beec                 | ' 				}
0beec                 | ' #line 3949 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0beec                 | ' 				rcnt =  ((UINT) 512 )  * cc;
0beec                 | ' 				continue;
0beec     E8 00 90 FD | 	jmp	#LR__0731
0bef0                 | LR__0727
0bef0     04 5E 05 F1 | 	add	fp, #4
0bef4     AF 90 02 FB | 	rdlong	local07, fp
0bef8     1C 5E 05 F1 | 	add	fp, #28
0befc     AF 92 02 FB | 	rdlong	local08, fp
0bf00     20 5E 85 F1 | 	sub	fp, #32
0bf04     1C 90 06 F1 | 	add	local07, #28
0bf08     48 93 62 FC | 	wrlong	local08, local07
0bf0c                 | LR__0728
0bf0c     04 5E 05 F1 | 	add	fp, #4
0bf10     AF 88 02 FB | 	rdlong	local03, fp
0bf14     14 88 06 F1 | 	add	local03, #20
0bf18     44 8B 02 FB | 	rdlong	local04, local03
0bf1c     FF 8B 06 F5 | 	and	local04, #511
0bf20     09 90 C6 F9 | 	decod	local07, #9
0bf24     45 91 82 F1 | 	sub	local07, local04
0bf28     24 5E 05 F1 | 	add	fp, #36
0bf2c     AF 90 62 FC | 	wrlong	local07, fp
0bf30     1C 5E 85 F1 | 	sub	fp, #28
0bf34     AF 92 02 FB | 	rdlong	local08, fp
0bf38     0C 5E 85 F1 | 	sub	fp, #12
0bf3c     49 91 1A F2 | 	cmp	local07, local08 wcz
0bf40     14 00 90 ED |  if_be	jmp	#LR__0729
0bf44     0C 5E 05 F1 | 	add	fp, #12
0bf48     AF 90 02 FB | 	rdlong	local07, fp
0bf4c     1C 5E 05 F1 | 	add	fp, #28
0bf50     AF 90 62 FC | 	wrlong	local07, fp
0bf54     28 5E 85 F1 | 	sub	fp, #40
0bf58                 | LR__0729
0bf58     18 5E 05 F1 | 	add	fp, #24
0bf5c     AF 76 02 FB | 	rdlong	arg01, fp
0bf60     14 5E 85 F1 | 	sub	fp, #20
0bf64     AF 92 02 FB | 	rdlong	local08, fp
0bf68     04 5E 85 F1 | 	sub	fp, #4
0bf6c     1C 92 06 F1 | 	add	local08, #28
0bf70     49 79 02 FB | 	rdlong	arg02, local08
0bf74     90 CF BF FD | 	call	#_ff_cc_move_window_0273
0bf78     00 30 0E F2 | 	cmp	result1, #0 wz
0bf7c     1C 00 90 AD |  if_e	jmp	#LR__0730
0bf80     04 5E 05 F1 | 	add	fp, #4
0bf84     AF 90 02 FB | 	rdlong	local07, fp
0bf88     04 5E 85 F1 | 	sub	fp, #4
0bf8c     11 90 06 F1 | 	add	local07, #17
0bf90     48 03 48 FC | 	wrbyte	#1, local07
0bf94     01 30 06 F6 | 	mov	result1, #1
0bf98     E8 00 90 FD | 	jmp	#LR__0733
0bf9c                 | LR__0730
0bf9c     34 5E 05 F1 | 	add	fp, #52
0bfa0     AF 76 02 FB | 	rdlong	arg01, fp
0bfa4     1C 5E 85 F1 | 	sub	fp, #28
0bfa8     AF 78 02 FB | 	rdlong	arg02, fp
0bfac     30 78 06 F1 | 	add	arg02, #48
0bfb0     14 5E 85 F1 | 	sub	fp, #20
0bfb4     AF 96 02 FB | 	rdlong	local10, fp
0bfb8     14 96 06 F1 | 	add	local10, #20
0bfbc     4B A1 02 FB | 	rdlong	local15, local10
0bfc0     FF A1 06 F5 | 	and	local15, #511
0bfc4     50 79 02 F1 | 	add	arg02, local15
0bfc8     24 5E 05 F1 | 	add	fp, #36
0bfcc     AF 7A 02 FB | 	rdlong	arg03, fp
0bfd0     28 5E 85 F1 | 	sub	fp, #40
0bfd4     C8 CD BF FD | 	call	#_ff_cc_mem_cpy_0260
0bfd8                 | LR__0731
0bfd8     0C 5E 05 F1 | 	add	fp, #12
0bfdc     AF 90 02 FB | 	rdlong	local07, fp
0bfe0     1C 5E 05 F1 | 	add	fp, #28
0bfe4     AF 8A 02 FB | 	rdlong	local04, fp
0bfe8     45 91 82 F1 | 	sub	local07, local04
0bfec     1C 5E 85 F1 | 	sub	fp, #28
0bff0     AF 90 62 FC | 	wrlong	local07, fp
0bff4     04 5E 05 F1 | 	add	fp, #4
0bff8     AF 8E 02 FB | 	rdlong	local06, fp
0bffc     47 97 02 FB | 	rdlong	local10, local06
0c000     18 5E 05 F1 | 	add	fp, #24
0c004     AF 9A 02 FB | 	rdlong	local12, fp
0c008     4D 9D 02 F6 | 	mov	local13, local12
0c00c     4D 97 02 F1 | 	add	local10, local12
0c010     47 97 62 FC | 	wrlong	local10, local06
0c014     0C 5E 05 F1 | 	add	fp, #12
0c018     AF 9E 02 FB | 	rdlong	local14, fp
0c01c     4F A1 02 F6 | 	mov	local15, local14
0c020     0C 5E 85 F1 | 	sub	fp, #12
0c024     AF A4 02 FB | 	rdlong	local17, fp
0c028     52 A3 02 F6 | 	mov	local16, local17
0c02c     52 A1 02 F1 | 	add	local15, local17
0c030     0C 5E 05 F1 | 	add	fp, #12
0c034     AF A0 62 FC | 	wrlong	local15, fp
0c038     30 5E 85 F1 | 	sub	fp, #48
0c03c     AF A8 02 FB | 	rdlong	local19, fp
0c040     54 A7 02 F6 | 	mov	local18, local19
0c044     54 AB 02 F6 | 	mov	local20, local19
0c048     55 AD 02 F6 | 	mov	local21, local20
0c04c     14 AC 06 F1 | 	add	local21, #20
0c050     56 AF 02 FB | 	rdlong	local22, local21
0c054     14 AC 86 F1 | 	sub	local21, #20
0c058     57 B1 02 F6 | 	mov	local23, local22
0c05c     24 5E 05 F1 | 	add	fp, #36
0c060     AF B2 02 FB | 	rdlong	local24, fp
0c064     28 5E 85 F1 | 	sub	fp, #40
0c068     59 B5 02 F6 | 	mov	local25, local24
0c06c     59 B1 02 F1 | 	add	local23, local24
0c070     14 A6 06 F1 | 	add	local18, #20
0c074     53 B1 62 FC | 	wrlong	local23, local18
0c078     14 A6 86 F1 | 	sub	local18, #20
0c07c     F8 FA 9F FD | 	jmp	#LR__0717
0c080                 | LR__0732
0c080                 | ' 		mem_cpy(rbuff, fs->win + fp->fptr %  ((UINT) 512 ) , rcnt);
0c080                 | ' #line 3973 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0c080                 | ' 	}
0c080                 | ' 
0c080                 | ' 	return FR_OK ;
0c080     00 30 06 F6 | 	mov	result1, #0
0c084                 | LR__0733
0c084     AF F0 03 F6 | 	mov	ptra, fp
0c088     BF 00 A0 FD | 	call	#popregs_
0c08c                 | _ff_cc_f_read_ret
0c08c     2D 00 64 FD | 	ret
0c090                 | 
0c090                 | _ff_cc_f_write
0c090     2A 5A 05 F6 | 	mov	COUNT_, #42
0c094     B0 00 A0 FD | 	call	#pushregs_
0c098     34 F0 07 F1 | 	add	ptra, #52
0c09c     04 5E 05 F1 | 	add	fp, #4
0c0a0     AF 76 62 FC | 	wrlong	arg01, fp
0c0a4     04 5E 05 F1 | 	add	fp, #4
0c0a8     AF 78 62 FC | 	wrlong	arg02, fp
0c0ac     04 5E 05 F1 | 	add	fp, #4
0c0b0     AF 7A 62 FC | 	wrlong	arg03, fp
0c0b4     04 5E 05 F1 | 	add	fp, #4
0c0b8     AF 7C 62 FC | 	wrlong	arg04, fp
0c0bc     14 5E 05 F1 | 	add	fp, #20
0c0c0     AF 00 68 FC | 	wrlong	#0, fp
0c0c4     1C 5E 85 F1 | 	sub	fp, #28
0c0c8     AF 84 02 FB | 	rdlong	local01, fp
0c0cc     28 5E 05 F1 | 	add	fp, #40
0c0d0     AF 84 62 FC | 	wrlong	local01, fp
0c0d4     20 5E 85 F1 | 	sub	fp, #32
0c0d8     AF 84 02 FB | 	rdlong	local01, fp
0c0dc     42 01 68 FC | 	wrlong	#0, local01
0c0e0     0C 5E 85 F1 | 	sub	fp, #12
0c0e4     AF 76 02 FB | 	rdlong	arg01, fp
0c0e8     14 5E 05 F1 | 	add	fp, #20
0c0ec     AF 78 02 F6 | 	mov	arg02, fp
0c0f0     18 5E 85 F1 | 	sub	fp, #24
0c0f4     38 F0 BF FD | 	call	#_ff_cc_validate_0371
0c0f8     14 5E 05 F1 | 	add	fp, #20
0c0fc     AF 30 62 FC | 	wrlong	result1, fp
0c100     18 87 02 F6 | 	mov	local02, result1
0c104     14 5E 85 F1 | 	sub	fp, #20
0c108     43 85 0A F6 | 	mov	local01, local02 wz
0c10c     24 00 90 5D |  if_ne	jmp	#LR__0734
0c110     04 5E 05 F1 | 	add	fp, #4
0c114     AF 88 02 FB | 	rdlong	local03, fp
0c118     11 88 06 F1 | 	add	local03, #17
0c11c     44 8B C2 FA | 	rdbyte	local04, local03
0c120     10 5E 05 F1 | 	add	fp, #16
0c124     AF 8A 62 FC | 	wrlong	local04, fp
0c128     14 5E 85 F1 | 	sub	fp, #20
0c12c     45 8D 0A F6 | 	mov	local05, local04 wz
0c130     10 00 90 AD |  if_e	jmp	#LR__0735
0c134                 | LR__0734
0c134     14 5E 05 F1 | 	add	fp, #20
0c138     AF 30 02 FB | 	rdlong	result1, fp
0c13c     14 5E 85 F1 | 	sub	fp, #20
0c140     6C 07 90 FD | 	jmp	#LR__0759
0c144                 | LR__0735
0c144     04 5E 05 F1 | 	add	fp, #4
0c148     AF 86 02 FB | 	rdlong	local02, fp
0c14c     04 5E 85 F1 | 	sub	fp, #4
0c150     10 86 06 F1 | 	add	local02, #16
0c154     43 85 C2 FA | 	rdbyte	local01, local02
0c158     02 84 CE F7 | 	test	local01, #2 wz
0c15c     07 30 06 A6 |  if_e	mov	result1, #7
0c160     4C 07 90 AD |  if_e	jmp	#LR__0759
0c164     04 5E 05 F1 | 	add	fp, #4
0c168     AF 8E 02 FB | 	rdlong	local06, fp
0c16c     47 91 02 F6 | 	mov	local07, local06
0c170     14 90 06 F1 | 	add	local07, #20
0c174     48 89 02 FB | 	rdlong	local03, local07
0c178     08 5E 05 F1 | 	add	fp, #8
0c17c     AF 92 02 FB | 	rdlong	local08, fp
0c180     49 8B 02 F6 | 	mov	local04, local08
0c184     49 89 02 F1 | 	add	local03, local08
0c188     08 5E 85 F1 | 	sub	fp, #8
0c18c     AF 94 02 FB | 	rdlong	local09, fp
0c190     04 5E 85 F1 | 	sub	fp, #4
0c194     4A 97 02 F6 | 	mov	local10, local09
0c198     14 96 06 F1 | 	add	local10, #20
0c19c     4B 99 02 FB | 	rdlong	local11, local10
0c1a0     14 96 86 F1 | 	sub	local10, #20
0c1a4     4C 9B 02 F6 | 	mov	local12, local11
0c1a8     4D 89 1A F2 | 	cmp	local03, local12 wcz
0c1ac     24 00 90 3D |  if_ae	jmp	#LR__0736
0c1b0     04 5E 05 F1 | 	add	fp, #4
0c1b4     AF 86 02 FB | 	rdlong	local02, fp
0c1b8     01 84 66 F6 | 	neg	local01, #1
0c1bc     14 86 06 F1 | 	add	local02, #20
0c1c0     43 89 02 FB | 	rdlong	local03, local02
0c1c4     44 85 82 F1 | 	sub	local01, local03
0c1c8     08 5E 05 F1 | 	add	fp, #8
0c1cc     AF 84 62 FC | 	wrlong	local01, fp
0c1d0     0C 5E 85 F1 | 	sub	fp, #12
0c1d4                 | LR__0736
0c1d4                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
0c1d4                 | ' 	}
0c1d4                 | ' 
0c1d4                 | ' 	for ( ; btw;
0c1d4                 | LR__0737
0c1d4     0C 5E 05 F1 | 	add	fp, #12
0c1d8     AF 86 02 FB | 	rdlong	local02, fp
0c1dc     0C 5E 85 F1 | 	sub	fp, #12
0c1e0     43 85 0A F6 | 	mov	local01, local02 wz
0c1e4     A0 06 90 AD |  if_e	jmp	#LR__0758
0c1e8     04 5E 05 F1 | 	add	fp, #4
0c1ec     AF 9C 02 FB | 	rdlong	local13, fp
0c1f0     04 5E 85 F1 | 	sub	fp, #4
0c1f4     14 9C 06 F1 | 	add	local13, #20
0c1f8     4E 91 02 FB | 	rdlong	local07, local13
0c1fc     FF 91 CE F7 | 	test	local07, #511 wz
0c200     64 04 90 5D |  if_ne	jmp	#LR__0752
0c204     04 5E 05 F1 | 	add	fp, #4
0c208     AF 88 02 FB | 	rdlong	local03, fp
0c20c     14 88 06 F1 | 	add	local03, #20
0c210     44 9D 02 FB | 	rdlong	local13, local03
0c214     09 9C 46 F0 | 	shr	local13, #9
0c218     14 5E 05 F1 | 	add	fp, #20
0c21c     AF 92 02 FB | 	rdlong	local08, fp
0c220     0A 92 06 F1 | 	add	local08, #10
0c224     49 95 E2 FA | 	rdword	local09, local08
0c228     4A 8B 02 F6 | 	mov	local04, local09
0c22c     0F 8A 46 F7 | 	zerox	local04, #15
0c230     01 8A 86 F1 | 	sub	local04, #1
0c234     45 9D 02 F5 | 	and	local13, local04
0c238     14 5E 05 F1 | 	add	fp, #20
0c23c     AF 9C 62 FC | 	wrlong	local13, fp
0c240     AF 9C 0A FB | 	rdlong	local13, fp wz
0c244     2C 5E 85 F1 | 	sub	fp, #44
0c248     4C 01 90 5D |  if_ne	jmp	#LR__0743
0c24c     04 5E 05 F1 | 	add	fp, #4
0c250     AF 9C 02 FB | 	rdlong	local13, fp
0c254     04 5E 85 F1 | 	sub	fp, #4
0c258     14 9C 06 F1 | 	add	local13, #20
0c25c     4E 91 0A FB | 	rdlong	local07, local13 wz
0c260     48 00 90 5D |  if_ne	jmp	#LR__0738
0c264     04 5E 05 F1 | 	add	fp, #4
0c268     AF 9C 02 FB | 	rdlong	local13, fp
0c26c     08 9C 06 F1 | 	add	local13, #8
0c270     4E 91 02 FB | 	rdlong	local07, local13
0c274     18 5E 05 F1 | 	add	fp, #24
0c278     AF 90 62 FC | 	wrlong	local07, fp
0c27c     AF 9C 0A FB | 	rdlong	local13, fp wz
0c280     1C 5E 85 F1 | 	sub	fp, #28
0c284     50 00 90 5D |  if_ne	jmp	#LR__0739
0c288     04 5E 05 F1 | 	add	fp, #4
0c28c     AF 76 02 FB | 	rdlong	arg01, fp
0c290     04 5E 85 F1 | 	sub	fp, #4
0c294     00 78 06 F6 | 	mov	arg02, #0
0c298     84 D4 BF FD | 	call	#_ff_cc_create_chain_0295
0c29c     1C 5E 05 F1 | 	add	fp, #28
0c2a0     AF 30 62 FC | 	wrlong	result1, fp
0c2a4     1C 5E 85 F1 | 	sub	fp, #28
0c2a8     2C 00 90 FD | 	jmp	#LR__0739
0c2ac                 | LR__0738
0c2ac     04 5E 05 F1 | 	add	fp, #4
0c2b0     AF 76 02 FB | 	rdlong	arg01, fp
0c2b4     3B 8D 02 F6 | 	mov	local05, arg01
0c2b8     04 5E 85 F1 | 	sub	fp, #4
0c2bc     18 8C 06 F1 | 	add	local05, #24
0c2c0     46 79 02 FB | 	rdlong	arg02, local05
0c2c4     58 D4 BF FD | 	call	#_ff_cc_create_chain_0295
0c2c8     18 95 02 F6 | 	mov	local09, result1
0c2cc     1C 5E 05 F1 | 	add	fp, #28
0c2d0     AF 94 62 FC | 	wrlong	local09, fp
0c2d4     1C 5E 85 F1 | 	sub	fp, #28
0c2d8                 | LR__0739
0c2d8     1C 5E 05 F1 | 	add	fp, #28
0c2dc     AF 9C 0A FB | 	rdlong	local13, fp wz
0c2e0     1C 5E 85 F1 | 	sub	fp, #28
0c2e4     A0 05 90 AD |  if_e	jmp	#LR__0758
0c2e8     1C 5E 05 F1 | 	add	fp, #28
0c2ec     AF 9C 02 FB | 	rdlong	local13, fp
0c2f0     1C 5E 85 F1 | 	sub	fp, #28
0c2f4     01 9C 0E F2 | 	cmp	local13, #1 wz
0c2f8     1C 00 90 5D |  if_ne	jmp	#LR__0740
0c2fc     04 5E 05 F1 | 	add	fp, #4
0c300     AF 9C 02 FB | 	rdlong	local13, fp
0c304     04 5E 85 F1 | 	sub	fp, #4
0c308     11 9C 06 F1 | 	add	local13, #17
0c30c     4E 05 48 FC | 	wrbyte	#2, local13
0c310     02 30 06 F6 | 	mov	result1, #2
0c314     98 05 90 FD | 	jmp	#LR__0759
0c318                 | LR__0740
0c318     1C 5E 05 F1 | 	add	fp, #28
0c31c     AF 9C 02 FB | 	rdlong	local13, fp
0c320     1C 5E 85 F1 | 	sub	fp, #28
0c324     FF FF 7F FF 
0c328     FF 9D 0E F2 | 	cmp	local13, ##-1 wz
0c32c     1C 00 90 5D |  if_ne	jmp	#LR__0741
0c330     04 5E 05 F1 | 	add	fp, #4
0c334     AF 9C 02 FB | 	rdlong	local13, fp
0c338     04 5E 85 F1 | 	sub	fp, #4
0c33c     11 9C 06 F1 | 	add	local13, #17
0c340     4E 03 48 FC | 	wrbyte	#1, local13
0c344     01 30 06 F6 | 	mov	result1, #1
0c348     64 05 90 FD | 	jmp	#LR__0759
0c34c                 | LR__0741
0c34c     04 5E 05 F1 | 	add	fp, #4
0c350     AF 9C 02 FB | 	rdlong	local13, fp
0c354     18 5E 05 F1 | 	add	fp, #24
0c358     AF 90 02 FB | 	rdlong	local07, fp
0c35c     18 9C 06 F1 | 	add	local13, #24
0c360     4E 91 62 FC | 	wrlong	local07, local13
0c364     18 5E 85 F1 | 	sub	fp, #24
0c368     AF 9C 02 FB | 	rdlong	local13, fp
0c36c     04 5E 85 F1 | 	sub	fp, #4
0c370     08 9C 06 F1 | 	add	local13, #8
0c374     4E 91 0A FB | 	rdlong	local07, local13 wz
0c378     1C 00 90 5D |  if_ne	jmp	#LR__0742
0c37c     04 5E 05 F1 | 	add	fp, #4
0c380     AF 9C 02 FB | 	rdlong	local13, fp
0c384     18 5E 05 F1 | 	add	fp, #24
0c388     AF 90 02 FB | 	rdlong	local07, fp
0c38c     1C 5E 85 F1 | 	sub	fp, #28
0c390     08 9C 06 F1 | 	add	local13, #8
0c394     4E 91 62 FC | 	wrlong	local07, local13
0c398                 | LR__0742
0c398                 | LR__0743
0c398     18 5E 05 F1 | 	add	fp, #24
0c39c     AF 9C 02 FB | 	rdlong	local13, fp
0c3a0     14 5E 85 F1 | 	sub	fp, #20
0c3a4     AF 90 02 FB | 	rdlong	local07, fp
0c3a8     04 5E 85 F1 | 	sub	fp, #4
0c3ac     2C 9C 06 F1 | 	add	local13, #44
0c3b0     4E 8D 02 FB | 	rdlong	local05, local13
0c3b4     1C 90 06 F1 | 	add	local07, #28
0c3b8     48 93 02 FB | 	rdlong	local08, local07
0c3bc     49 8D 0A F2 | 	cmp	local05, local08 wz
0c3c0     34 00 90 5D |  if_ne	jmp	#LR__0744
0c3c4     18 5E 05 F1 | 	add	fp, #24
0c3c8     AF 76 02 FB | 	rdlong	arg01, fp
0c3cc     18 5E 85 F1 | 	sub	fp, #24
0c3d0     5C CA BF FD | 	call	#_ff_cc_sync_window_0271
0c3d4     00 30 0E F2 | 	cmp	result1, #0 wz
0c3d8     1C 00 90 AD |  if_e	jmp	#LR__0744
0c3dc     04 5E 05 F1 | 	add	fp, #4
0c3e0     AF 9C 02 FB | 	rdlong	local13, fp
0c3e4     04 5E 85 F1 | 	sub	fp, #4
0c3e8     11 9C 06 F1 | 	add	local13, #17
0c3ec     4E 03 48 FC | 	wrbyte	#1, local13
0c3f0     01 30 06 F6 | 	mov	result1, #1
0c3f4     B8 04 90 FD | 	jmp	#LR__0759
0c3f8                 | LR__0744
0c3f8     18 5E 05 F1 | 	add	fp, #24
0c3fc     AF 76 02 FB | 	rdlong	arg01, fp
0c400     14 5E 85 F1 | 	sub	fp, #20
0c404     AF 90 02 FB | 	rdlong	local07, fp
0c408     04 5E 85 F1 | 	sub	fp, #4
0c40c     18 90 06 F1 | 	add	local07, #24
0c410     48 79 02 FB | 	rdlong	arg02, local07
0c414     E8 CC BF FD | 	call	#_ff_cc_clst2sect_0276
0c418     20 5E 05 F1 | 	add	fp, #32
0c41c     AF 30 62 FC | 	wrlong	result1, fp
0c420     AF 9C 0A FB | 	rdlong	local13, fp wz
0c424     20 5E 85 F1 | 	sub	fp, #32
0c428     1C 00 90 5D |  if_ne	jmp	#LR__0745
0c42c     04 5E 05 F1 | 	add	fp, #4
0c430     AF 9C 02 FB | 	rdlong	local13, fp
0c434     04 5E 85 F1 | 	sub	fp, #4
0c438     11 9C 06 F1 | 	add	local13, #17
0c43c     4E 05 48 FC | 	wrbyte	#2, local13
0c440     02 30 06 F6 | 	mov	result1, #2
0c444     68 04 90 FD | 	jmp	#LR__0759
0c448                 | LR__0745
0c448     20 5E 05 F1 | 	add	fp, #32
0c44c     AF 9C 02 FB | 	rdlong	local13, fp
0c450     0C 5E 05 F1 | 	add	fp, #12
0c454     AF 90 02 FB | 	rdlong	local07, fp
0c458     48 9D 02 F1 | 	add	local13, local07
0c45c     0C 5E 85 F1 | 	sub	fp, #12
0c460     AF 9C 62 FC | 	wrlong	local13, fp
0c464     14 5E 85 F1 | 	sub	fp, #20
0c468     AF 9C 02 FB | 	rdlong	local13, fp
0c46c     09 9C 46 F0 | 	shr	local13, #9
0c470     1C 5E 05 F1 | 	add	fp, #28
0c474     AF 9C 62 FC | 	wrlong	local13, fp
0c478     28 5E 85 F1 | 	sub	fp, #40
0c47c     00 9C 1E F2 | 	cmp	local13, #0 wcz
0c480     50 01 90 ED |  if_be	jmp	#LR__0749
0c484     2C 5E 05 F1 | 	add	fp, #44
0c488     AF 9C 02 FB | 	rdlong	local13, fp
0c48c     04 5E 85 F1 | 	sub	fp, #4
0c490     AF 90 02 FB | 	rdlong	local07, fp
0c494     48 9D 02 F1 | 	add	local13, local07
0c498     10 5E 85 F1 | 	sub	fp, #16
0c49c     AF 8A 02 FB | 	rdlong	local04, fp
0c4a0     18 5E 85 F1 | 	sub	fp, #24
0c4a4     0A 8A 06 F1 | 	add	local04, #10
0c4a8     45 8D E2 FA | 	rdword	local05, local04
0c4ac     46 9D 1A F2 | 	cmp	local13, local05 wcz
0c4b0     28 00 90 ED |  if_be	jmp	#LR__0746
0c4b4     18 5E 05 F1 | 	add	fp, #24
0c4b8     AF 88 02 FB | 	rdlong	local03, fp
0c4bc     0A 88 06 F1 | 	add	local03, #10
0c4c0     44 9D E2 FA | 	rdword	local13, local03
0c4c4     14 5E 05 F1 | 	add	fp, #20
0c4c8     AF 8C 02 FB | 	rdlong	local05, fp
0c4cc     46 9D 82 F1 | 	sub	local13, local05
0c4d0     04 5E 85 F1 | 	sub	fp, #4
0c4d4     AF 9C 62 FC | 	wrlong	local13, fp
0c4d8     28 5E 85 F1 | 	sub	fp, #40
0c4dc                 | LR__0746
0c4dc     18 5E 05 F1 | 	add	fp, #24
0c4e0     AF 9C 02 FB | 	rdlong	local13, fp
0c4e4     01 9C 06 F1 | 	add	local13, #1
0c4e8     4E 77 C2 FA | 	rdbyte	arg01, local13
0c4ec     18 5E 05 F1 | 	add	fp, #24
0c4f0     AF 78 02 FB | 	rdlong	arg02, fp
0c4f4     10 5E 85 F1 | 	sub	fp, #16
0c4f8     AF 7A 02 FB | 	rdlong	arg03, fp
0c4fc     08 5E 05 F1 | 	add	fp, #8
0c500     AF 7C 02 FB | 	rdlong	arg04, fp
0c504     28 5E 85 F1 | 	sub	fp, #40
0c508     28 C4 BF FD | 	call	#_ff_cc_disk_write
0c50c     00 30 0E F2 | 	cmp	result1, #0 wz
0c510     1C 00 90 AD |  if_e	jmp	#LR__0747
0c514     04 5E 05 F1 | 	add	fp, #4
0c518     AF 9C 02 FB | 	rdlong	local13, fp
0c51c     04 5E 85 F1 | 	sub	fp, #4
0c520     11 9C 06 F1 | 	add	local13, #17
0c524     4E 03 48 FC | 	wrbyte	#1, local13
0c528     01 30 06 F6 | 	mov	result1, #1
0c52c     80 03 90 FD | 	jmp	#LR__0759
0c530                 | LR__0747
0c530     18 5E 05 F1 | 	add	fp, #24
0c534     AF 88 02 FB | 	rdlong	local03, fp
0c538     2C 88 06 F1 | 	add	local03, #44
0c53c     44 9D 02 FB | 	rdlong	local13, local03
0c540     08 5E 05 F1 | 	add	fp, #8
0c544     AF 8C 02 FB | 	rdlong	local05, fp
0c548     46 9D 82 F1 | 	sub	local13, local05
0c54c     08 5E 05 F1 | 	add	fp, #8
0c550     AF 92 02 FB | 	rdlong	local08, fp
0c554     28 5E 85 F1 | 	sub	fp, #40
0c558     49 9D 1A F2 | 	cmp	local13, local08 wcz
0c55c     58 00 90 3D |  if_ae	jmp	#LR__0748
0c560     18 5E 05 F1 | 	add	fp, #24
0c564     AF 76 02 FB | 	rdlong	arg01, fp
0c568     30 76 06 F1 | 	add	arg01, #48
0c56c     18 5E 05 F1 | 	add	fp, #24
0c570     AF 78 02 FB | 	rdlong	arg02, fp
0c574     18 5E 85 F1 | 	sub	fp, #24
0c578     AF 96 02 FB | 	rdlong	local10, fp
0c57c     2C 96 06 F1 | 	add	local10, #44
0c580     4B 9F 02 FB | 	rdlong	local14, local10
0c584     08 5E 05 F1 | 	add	fp, #8
0c588     AF 98 02 FB | 	rdlong	local11, fp
0c58c     20 5E 85 F1 | 	sub	fp, #32
0c590     4C 9F 82 F1 | 	sub	local14, local11
0c594     09 9E 66 F0 | 	shl	local14, #9
0c598     4F 79 02 F1 | 	add	arg02, local14
0c59c     09 7A C6 F9 | 	decod	arg03, #9
0c5a0     FC C7 BF FD | 	call	#_ff_cc_mem_cpy_0260
0c5a4     18 5E 05 F1 | 	add	fp, #24
0c5a8     AF 9C 02 FB | 	rdlong	local13, fp
0c5ac     18 5E 85 F1 | 	sub	fp, #24
0c5b0     03 9C 06 F1 | 	add	local13, #3
0c5b4     4E 01 48 FC | 	wrbyte	#0, local13
0c5b8                 | LR__0748
0c5b8     28 5E 05 F1 | 	add	fp, #40
0c5bc     AF 9C 02 FB | 	rdlong	local13, fp
0c5c0     09 9C 66 F0 | 	shl	local13, #9
0c5c4     04 5E 85 F1 | 	sub	fp, #4
0c5c8     AF 9C 62 FC | 	wrlong	local13, fp
0c5cc     24 5E 85 F1 | 	sub	fp, #36
0c5d0                 | ' 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ),  ((UINT) 512 ) );
0c5d0                 | ' 					fs->wflag = 0;
0c5d0                 | ' 				}
0c5d0                 | ' #line 4067 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0c5d0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
0c5d0                 | ' 				continue;
0c5d0     74 01 90 FD | 	jmp	#LR__0755
0c5d4                 | LR__0749
0c5d4     04 5E 05 F1 | 	add	fp, #4
0c5d8     AF 9C 02 FB | 	rdlong	local13, fp
0c5dc     4E 91 02 F6 | 	mov	local07, local13
0c5e0     04 5E 85 F1 | 	sub	fp, #4
0c5e4     14 9C 06 F1 | 	add	local13, #20
0c5e8     4E 8D 02 FB | 	rdlong	local05, local13
0c5ec     0C 90 06 F1 | 	add	local07, #12
0c5f0     48 93 02 FB | 	rdlong	local08, local07
0c5f4     49 8D 1A F2 | 	cmp	local05, local08 wcz
0c5f8     50 00 90 CD |  if_b	jmp	#LR__0751
0c5fc     18 5E 05 F1 | 	add	fp, #24
0c600     AF 76 02 FB | 	rdlong	arg01, fp
0c604     18 5E 85 F1 | 	sub	fp, #24
0c608     24 C8 BF FD | 	call	#_ff_cc_sync_window_0271
0c60c     00 30 0E F2 | 	cmp	result1, #0 wz
0c610     1C 00 90 AD |  if_e	jmp	#LR__0750
0c614     04 5E 05 F1 | 	add	fp, #4
0c618     AF 9C 02 FB | 	rdlong	local13, fp
0c61c     04 5E 85 F1 | 	sub	fp, #4
0c620     11 9C 06 F1 | 	add	local13, #17
0c624     4E 03 48 FC | 	wrbyte	#1, local13
0c628     01 30 06 F6 | 	mov	result1, #1
0c62c     80 02 90 FD | 	jmp	#LR__0759
0c630                 | LR__0750
0c630     18 5E 05 F1 | 	add	fp, #24
0c634     AF 9C 02 FB | 	rdlong	local13, fp
0c638     08 5E 05 F1 | 	add	fp, #8
0c63c     AF 90 02 FB | 	rdlong	local07, fp
0c640     20 5E 85 F1 | 	sub	fp, #32
0c644     2C 9C 06 F1 | 	add	local13, #44
0c648     4E 91 62 FC | 	wrlong	local07, local13
0c64c                 | LR__0751
0c64c     04 5E 05 F1 | 	add	fp, #4
0c650     AF 9C 02 FB | 	rdlong	local13, fp
0c654     1C 5E 05 F1 | 	add	fp, #28
0c658     AF 90 02 FB | 	rdlong	local07, fp
0c65c     20 5E 85 F1 | 	sub	fp, #32
0c660     1C 9C 06 F1 | 	add	local13, #28
0c664     4E 91 62 FC | 	wrlong	local07, local13
0c668                 | LR__0752
0c668     04 5E 05 F1 | 	add	fp, #4
0c66c     AF 88 02 FB | 	rdlong	local03, fp
0c670     14 88 06 F1 | 	add	local03, #20
0c674     44 8F 02 FB | 	rdlong	local06, local03
0c678     FF 8F 06 F5 | 	and	local06, #511
0c67c     09 9C C6 F9 | 	decod	local13, #9
0c680     47 9D 82 F1 | 	sub	local13, local06
0c684     20 5E 05 F1 | 	add	fp, #32
0c688     AF 9C 62 FC | 	wrlong	local13, fp
0c68c     18 5E 85 F1 | 	sub	fp, #24
0c690     AF 90 02 FB | 	rdlong	local07, fp
0c694     0C 5E 85 F1 | 	sub	fp, #12
0c698     48 9D 1A F2 | 	cmp	local13, local07 wcz
0c69c     14 00 90 ED |  if_be	jmp	#LR__0753
0c6a0     0C 5E 05 F1 | 	add	fp, #12
0c6a4     AF 9C 02 FB | 	rdlong	local13, fp
0c6a8     18 5E 05 F1 | 	add	fp, #24
0c6ac     AF 9C 62 FC | 	wrlong	local13, fp
0c6b0     24 5E 85 F1 | 	sub	fp, #36
0c6b4                 | LR__0753
0c6b4     18 5E 05 F1 | 	add	fp, #24
0c6b8     AF 76 02 FB | 	rdlong	arg01, fp
0c6bc     14 5E 85 F1 | 	sub	fp, #20
0c6c0     AF 90 02 FB | 	rdlong	local07, fp
0c6c4     04 5E 85 F1 | 	sub	fp, #4
0c6c8     1C 90 06 F1 | 	add	local07, #28
0c6cc     48 79 02 FB | 	rdlong	arg02, local07
0c6d0     34 C8 BF FD | 	call	#_ff_cc_move_window_0273
0c6d4     00 30 0E F2 | 	cmp	result1, #0 wz
0c6d8     1C 00 90 AD |  if_e	jmp	#LR__0754
0c6dc     04 5E 05 F1 | 	add	fp, #4
0c6e0     AF 9C 02 FB | 	rdlong	local13, fp
0c6e4     04 5E 85 F1 | 	sub	fp, #4
0c6e8     11 9C 06 F1 | 	add	local13, #17
0c6ec     4E 03 48 FC | 	wrbyte	#1, local13
0c6f0     01 30 06 F6 | 	mov	result1, #1
0c6f4     B8 01 90 FD | 	jmp	#LR__0759
0c6f8                 | LR__0754
0c6f8     18 5E 05 F1 | 	add	fp, #24
0c6fc     AF 76 02 FB | 	rdlong	arg01, fp
0c700     30 76 06 F1 | 	add	arg01, #48
0c704     14 5E 85 F1 | 	sub	fp, #20
0c708     AF 8C 02 FB | 	rdlong	local05, fp
0c70c     14 8C 06 F1 | 	add	local05, #20
0c710     46 9B 02 FB | 	rdlong	local12, local05
0c714     FF 9B 06 F5 | 	and	local12, #511
0c718     4D 77 02 F1 | 	add	arg01, local12
0c71c     2C 5E 05 F1 | 	add	fp, #44
0c720     AF 78 02 FB | 	rdlong	arg02, fp
0c724     0C 5E 85 F1 | 	sub	fp, #12
0c728     AF 7A 02 FB | 	rdlong	arg03, fp
0c72c     24 5E 85 F1 | 	sub	fp, #36
0c730     6C C6 BF FD | 	call	#_ff_cc_mem_cpy_0260
0c734     18 5E 05 F1 | 	add	fp, #24
0c738     AF 9C 02 FB | 	rdlong	local13, fp
0c73c     18 5E 85 F1 | 	sub	fp, #24
0c740     03 9C 06 F1 | 	add	local13, #3
0c744     4E 03 48 FC | 	wrbyte	#1, local13
0c748                 | LR__0755
0c748     0C 5E 05 F1 | 	add	fp, #12
0c74c     AF 9C 02 FB | 	rdlong	local13, fp
0c750     18 5E 05 F1 | 	add	fp, #24
0c754     AF 8E 02 FB | 	rdlong	local06, fp
0c758     47 9D 82 F1 | 	sub	local13, local06
0c75c     18 5E 85 F1 | 	sub	fp, #24
0c760     AF 9C 62 FC | 	wrlong	local13, fp
0c764     04 5E 05 F1 | 	add	fp, #4
0c768     AF 8C 02 FB | 	rdlong	local05, fp
0c76c     46 97 02 F6 | 	mov	local10, local05
0c770     4B 93 02 FB | 	rdlong	local08, local10
0c774     14 5E 05 F1 | 	add	fp, #20
0c778     AF 98 02 FB | 	rdlong	local11, fp
0c77c     4C 9B 02 F6 | 	mov	local12, local11
0c780     4C 93 02 F1 | 	add	local08, local11
0c784     46 93 62 FC | 	wrlong	local08, local05
0c788     0C 5E 05 F1 | 	add	fp, #12
0c78c     AF A0 02 FB | 	rdlong	local15, fp
0c790     50 A3 02 F6 | 	mov	local16, local15
0c794     0C 5E 85 F1 | 	sub	fp, #12
0c798     AF A4 02 FB | 	rdlong	local17, fp
0c79c     52 9F 02 F6 | 	mov	local14, local17
0c7a0     52 A3 02 F1 | 	add	local16, local17
0c7a4     0C 5E 05 F1 | 	add	fp, #12
0c7a8     AF A2 62 FC | 	wrlong	local16, fp
0c7ac     2C 5E 85 F1 | 	sub	fp, #44
0c7b0     AF A6 02 FB | 	rdlong	local18, fp
0c7b4     53 A9 02 F6 | 	mov	local19, local18
0c7b8     53 AB 02 F6 | 	mov	local20, local18
0c7bc     55 AD 02 F6 | 	mov	local21, local20
0c7c0     14 AC 06 F1 | 	add	local21, #20
0c7c4     56 AF 02 FB | 	rdlong	local22, local21
0c7c8     14 AC 86 F1 | 	sub	local21, #20
0c7cc     57 B1 02 F6 | 	mov	local23, local22
0c7d0     20 5E 05 F1 | 	add	fp, #32
0c7d4     AF B2 02 FB | 	rdlong	local24, fp
0c7d8     59 B5 02 F6 | 	mov	local25, local24
0c7dc     59 B1 02 F1 | 	add	local23, local24
0c7e0     14 A8 06 F1 | 	add	local19, #20
0c7e4     54 B1 62 FC | 	wrlong	local23, local19
0c7e8     14 A8 86 F1 | 	sub	local19, #20
0c7ec     20 5E 85 F1 | 	sub	fp, #32
0c7f0     AF B6 02 FB | 	rdlong	local26, fp
0c7f4     5B B9 02 F6 | 	mov	local27, local26
0c7f8     5B BB 02 F6 | 	mov	local28, local26
0c7fc     5D BD 02 F6 | 	mov	local29, local28
0c800     5B BF 02 F6 | 	mov	local30, local26
0c804     04 5E 85 F1 | 	sub	fp, #4
0c808     5F C1 02 F6 | 	mov	local31, local30
0c80c     14 BC 06 F1 | 	add	local29, #20
0c810     5E C3 02 FB | 	rdlong	local32, local29
0c814     14 BC 86 F1 | 	sub	local29, #20
0c818     61 C5 02 F6 | 	mov	local33, local32
0c81c     0C C0 06 F1 | 	add	local31, #12
0c820     60 C7 02 FB | 	rdlong	local34, local31
0c824     0C C0 86 F1 | 	sub	local31, #12
0c828     63 C9 02 F6 | 	mov	local35, local34
0c82c     64 C5 1A F2 | 	cmp	local33, local35 wcz
0c830     24 00 90 ED |  if_be	jmp	#LR__0756
0c834     04 5E 05 F1 | 	add	fp, #4
0c838     AF CA 02 FB | 	rdlong	local36, fp
0c83c     04 5E 85 F1 | 	sub	fp, #4
0c840     65 CD 02 F6 | 	mov	local37, local36
0c844     14 CC 06 F1 | 	add	local37, #20
0c848     66 CF 02 FB | 	rdlong	local38, local37
0c84c     14 CC 86 F1 | 	sub	local37, #20
0c850     67 D1 02 F6 | 	mov	local39, local38
0c854     20 00 90 FD | 	jmp	#LR__0757
0c858                 | LR__0756
0c858     04 5E 05 F1 | 	add	fp, #4
0c85c     AF D2 02 FB | 	rdlong	local40, fp
0c860     04 5E 85 F1 | 	sub	fp, #4
0c864     69 D5 02 F6 | 	mov	local41, local40
0c868     0C D4 06 F1 | 	add	local41, #12
0c86c     6A D7 02 FB | 	rdlong	local42, local41
0c870     0C D4 86 F1 | 	sub	local41, #12
0c874     6B D1 02 F6 | 	mov	local39, local42
0c878                 | LR__0757
0c878     0C B8 06 F1 | 	add	local27, #12
0c87c     5C D1 62 FC | 	wrlong	local39, local27
0c880     0C B8 86 F1 | 	sub	local27, #12
0c884     4C F9 9F FD | 	jmp	#LR__0737
0c888                 | LR__0758
0c888     04 5E 05 F1 | 	add	fp, #4
0c88c     AF 84 02 FB | 	rdlong	local01, fp
0c890     42 89 02 F6 | 	mov	local03, local01
0c894     04 5E 85 F1 | 	sub	fp, #4
0c898     10 88 06 F1 | 	add	local03, #16
0c89c     44 9D C2 FA | 	rdbyte	local13, local03
0c8a0     40 9C 46 F5 | 	or	local13, #64
0c8a4     10 84 06 F1 | 	add	local01, #16
0c8a8     42 9D 42 FC | 	wrbyte	local13, local01
0c8ac                 | ' 		mem_cpy(fs->win + fp->fptr %  ((UINT) 512 ) , wbuff, wcnt);
0c8ac                 | ' 		fs->wflag = 1;
0c8ac                 | ' #line 4094 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0c8ac                 | ' 	}
0c8ac                 | ' 
0c8ac                 | ' 	fp->flag |=  0x40 ;
0c8ac                 | ' 
0c8ac                 | ' 	return FR_OK ;
0c8ac     00 30 06 F6 | 	mov	result1, #0
0c8b0                 | LR__0759
0c8b0     AF F0 03 F6 | 	mov	ptra, fp
0c8b4     BF 00 A0 FD | 	call	#popregs_
0c8b8                 | _ff_cc_f_write_ret
0c8b8     2D 00 64 FD | 	ret
0c8bc                 | 
0c8bc                 | _ff_cc_f_sync
0c8bc     06 5A 05 F6 | 	mov	COUNT_, #6
0c8c0     B0 00 A0 FD | 	call	#pushregs_
0c8c4     18 F0 07 F1 | 	add	ptra, #24
0c8c8     04 5E 05 F1 | 	add	fp, #4
0c8cc     AF 76 62 FC | 	wrlong	arg01, fp
0c8d0     08 5E 05 F1 | 	add	fp, #8
0c8d4     AF 78 02 F6 | 	mov	arg02, fp
0c8d8     0C 5E 85 F1 | 	sub	fp, #12
0c8dc     50 E8 BF FD | 	call	#_ff_cc_validate_0371
0c8e0     18 85 02 F6 | 	mov	local01, result1
0c8e4     08 5E 05 F1 | 	add	fp, #8
0c8e8     AF 84 62 FC | 	wrlong	local01, fp
0c8ec     AF 86 0A FB | 	rdlong	local02, fp wz
0c8f0     08 5E 85 F1 | 	sub	fp, #8
0c8f4     58 01 90 5D |  if_ne	jmp	#LR__0762
0c8f8     04 5E 05 F1 | 	add	fp, #4
0c8fc     AF 88 02 FB | 	rdlong	local03, fp
0c900     04 5E 85 F1 | 	sub	fp, #4
0c904     10 88 06 F1 | 	add	local03, #16
0c908     44 87 C2 FA | 	rdbyte	local02, local03
0c90c     40 86 CE F7 | 	test	local02, #64 wz
0c910     3C 01 90 AD |  if_e	jmp	#LR__0761
0c914     10 5E 05 F1 | 	add	fp, #16
0c918     80 10 A7 FF 
0c91c     AF 00 68 FC | 	wrlong	##1310785536, fp
0c920     04 5E 85 F1 | 	sub	fp, #4
0c924     AF 76 02 FB | 	rdlong	arg01, fp
0c928     08 5E 85 F1 | 	sub	fp, #8
0c92c     AF 8A 02 FB | 	rdlong	local04, fp
0c930     04 5E 85 F1 | 	sub	fp, #4
0c934     20 8A 06 F1 | 	add	local04, #32
0c938     45 79 02 FB | 	rdlong	arg02, local04
0c93c     C8 C5 BF FD | 	call	#_ff_cc_move_window_0273
0c940     08 5E 05 F1 | 	add	fp, #8
0c944     AF 30 62 FC | 	wrlong	result1, fp
0c948     AF 86 0A FB | 	rdlong	local02, fp wz
0c94c     08 5E 85 F1 | 	sub	fp, #8
0c950     FC 00 90 5D |  if_ne	jmp	#LR__0760
0c954     04 5E 05 F1 | 	add	fp, #4
0c958     AF 86 02 FB | 	rdlong	local02, fp
0c95c     24 86 06 F1 | 	add	local02, #36
0c960     43 87 02 FB | 	rdlong	local02, local02
0c964     10 5E 05 F1 | 	add	fp, #16
0c968     AF 86 62 FC | 	wrlong	local02, fp
0c96c     43 8D 02 F6 | 	mov	local05, local02
0c970     0B 8C 06 F1 | 	add	local05, #11
0c974     46 8B C2 FA | 	rdbyte	local04, local05
0c978     20 8A 46 F5 | 	or	local04, #32
0c97c     0B 86 06 F1 | 	add	local02, #11
0c980     43 8B 42 FC | 	wrbyte	local04, local02
0c984     10 5E 85 F1 | 	sub	fp, #16
0c988     AF 86 02 FB | 	rdlong	local02, fp
0c98c     43 77 02 FB | 	rdlong	arg01, local02
0c990     10 5E 05 F1 | 	add	fp, #16
0c994     AF 78 02 FB | 	rdlong	arg02, fp
0c998     10 5E 85 F1 | 	sub	fp, #16
0c99c     AF 8E 02 FB | 	rdlong	local06, fp
0c9a0     04 5E 85 F1 | 	sub	fp, #4
0c9a4     08 8E 06 F1 | 	add	local06, #8
0c9a8     47 7B 02 FB | 	rdlong	arg03, local06
0c9ac     2C D5 BF FD | 	call	#_ff_cc_st_clust_0315
0c9b0     14 5E 05 F1 | 	add	fp, #20
0c9b4     AF 76 02 FB | 	rdlong	arg01, fp
0c9b8     1C 76 06 F1 | 	add	arg01, #28
0c9bc     10 5E 85 F1 | 	sub	fp, #16
0c9c0     AF 8C 02 FB | 	rdlong	local05, fp
0c9c4     04 5E 85 F1 | 	sub	fp, #4
0c9c8     0C 8C 06 F1 | 	add	local05, #12
0c9cc     46 79 02 FB | 	rdlong	arg02, local05
0c9d0     A0 C3 BF FD | 	call	#_ff_cc_st_dword_0257
0c9d4     14 5E 05 F1 | 	add	fp, #20
0c9d8     AF 76 02 FB | 	rdlong	arg01, fp
0c9dc     16 76 06 F1 | 	add	arg01, #22
0c9e0     04 5E 85 F1 | 	sub	fp, #4
0c9e4     AF 78 02 FB | 	rdlong	arg02, fp
0c9e8     10 5E 85 F1 | 	sub	fp, #16
0c9ec     84 C3 BF FD | 	call	#_ff_cc_st_dword_0257
0c9f0     14 5E 05 F1 | 	add	fp, #20
0c9f4     AF 76 02 FB | 	rdlong	arg01, fp
0c9f8     14 5E 85 F1 | 	sub	fp, #20
0c9fc     12 76 06 F1 | 	add	arg01, #18
0ca00     00 78 06 F6 | 	mov	arg02, #0
0ca04     48 C3 BF FD | 	call	#_ff_cc_st_word_0256
0ca08     0C 5E 05 F1 | 	add	fp, #12
0ca0c     AF 86 02 FB | 	rdlong	local02, fp
0ca10     03 86 06 F1 | 	add	local02, #3
0ca14     43 03 48 FC | 	wrbyte	#1, local02
0ca18     AF 76 02 FB | 	rdlong	arg01, fp
0ca1c     0C 5E 85 F1 | 	sub	fp, #12
0ca20     60 C5 BF FD | 	call	#_ff_cc_sync_fs_0275
0ca24     08 5E 05 F1 | 	add	fp, #8
0ca28     AF 30 62 FC | 	wrlong	result1, fp
0ca2c     04 5E 85 F1 | 	sub	fp, #4
0ca30     AF 86 02 FB | 	rdlong	local02, fp
0ca34     43 8D 02 F6 | 	mov	local05, local02
0ca38     04 5E 85 F1 | 	sub	fp, #4
0ca3c     10 8C 06 F1 | 	add	local05, #16
0ca40     46 8B C2 FA | 	rdbyte	local04, local05
0ca44     BF 8A 06 F5 | 	and	local04, #191
0ca48     10 86 06 F1 | 	add	local02, #16
0ca4c     43 8B 42 FC | 	wrbyte	local04, local02
0ca50                 | LR__0760
0ca50                 | LR__0761
0ca50                 | LR__0762
0ca50                 | ' 					dir = fp->dir_ptr;
0ca50                 | ' 					dir[ 11 ] |=  0x20 ;
0ca50                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
0ca50                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
0ca50                 | ' 					st_dword(dir +  22 , tm);
0ca50                 | ' 					st_word(dir +  18 , 0);
0ca50                 | ' 					fs->wflag = 1;
0ca50                 | ' 					res = sync_fs(fs);
0ca50                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
0ca50                 | ' 				}
0ca50                 | ' 			}
0ca50                 | ' 		}
0ca50                 | ' 	}
0ca50                 | ' 
0ca50                 | ' 	return res ;
0ca50     08 5E 05 F1 | 	add	fp, #8
0ca54     AF 30 02 FB | 	rdlong	result1, fp
0ca58     08 5E 85 F1 | 	sub	fp, #8
0ca5c     AF F0 03 F6 | 	mov	ptra, fp
0ca60     BF 00 A0 FD | 	call	#popregs_
0ca64                 | _ff_cc_f_sync_ret
0ca64     2D 00 64 FD | 	ret
0ca68                 | 
0ca68                 | _ff_cc_f_close
0ca68     02 5A 05 F6 | 	mov	COUNT_, #2
0ca6c     B0 00 A0 FD | 	call	#pushregs_
0ca70     10 F0 07 F1 | 	add	ptra, #16
0ca74     04 5E 05 F1 | 	add	fp, #4
0ca78     AF 76 62 FC | 	wrlong	arg01, fp
0ca7c     04 5E 85 F1 | 	sub	fp, #4
0ca80     38 FE BF FD | 	call	#_ff_cc_f_sync
0ca84     08 5E 05 F1 | 	add	fp, #8
0ca88     AF 30 62 FC | 	wrlong	result1, fp
0ca8c     AF 84 0A FB | 	rdlong	local01, fp wz
0ca90     08 5E 85 F1 | 	sub	fp, #8
0ca94     40 00 90 5D |  if_ne	jmp	#LR__0764
0ca98     04 5E 05 F1 | 	add	fp, #4
0ca9c     AF 76 02 FB | 	rdlong	arg01, fp
0caa0     08 5E 05 F1 | 	add	fp, #8
0caa4     AF 78 02 F6 | 	mov	arg02, fp
0caa8     0C 5E 85 F1 | 	sub	fp, #12
0caac     80 E6 BF FD | 	call	#_ff_cc_validate_0371
0cab0     18 87 02 F6 | 	mov	local02, result1
0cab4     08 5E 05 F1 | 	add	fp, #8
0cab8     AF 86 62 FC | 	wrlong	local02, fp
0cabc     AF 84 0A FB | 	rdlong	local01, fp wz
0cac0     08 5E 85 F1 | 	sub	fp, #8
0cac4     10 00 90 5D |  if_ne	jmp	#LR__0763
0cac8     04 5E 05 F1 | 	add	fp, #4
0cacc     AF 84 02 FB | 	rdlong	local01, fp
0cad0     04 5E 85 F1 | 	sub	fp, #4
0cad4     42 01 68 FC | 	wrlong	#0, local01
0cad8                 | LR__0763
0cad8                 | LR__0764
0cad8                 | ' 
0cad8                 | ' 
0cad8                 | ' 
0cad8                 | ' 
0cad8                 | ' 			fp->obj.fs = 0;
0cad8                 | ' #line 4212 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0cad8                 | ' 		}
0cad8                 | ' 	}
0cad8                 | ' 	return res;
0cad8     08 5E 05 F1 | 	add	fp, #8
0cadc     AF 30 02 FB | 	rdlong	result1, fp
0cae0     08 5E 85 F1 | 	sub	fp, #8
0cae4     AF F0 03 F6 | 	mov	ptra, fp
0cae8     BF 00 A0 FD | 	call	#popregs_
0caec                 | _ff_cc_f_close_ret
0caec     2D 00 64 FD | 	ret
0caf0                 | 
0caf0                 | _ff_cc_f_lseek
0caf0     0B 5A 05 F6 | 	mov	COUNT_, #11
0caf4     B0 00 A0 FD | 	call	#pushregs_
0caf8     24 F0 07 F1 | 	add	ptra, #36
0cafc     04 5E 05 F1 | 	add	fp, #4
0cb00     AF 76 62 FC | 	wrlong	arg01, fp
0cb04     04 5E 05 F1 | 	add	fp, #4
0cb08     AF 78 62 FC | 	wrlong	arg02, fp
0cb0c     04 5E 85 F1 | 	sub	fp, #4
0cb10     AF 76 02 FB | 	rdlong	arg01, fp
0cb14     0C 5E 05 F1 | 	add	fp, #12
0cb18     AF 78 02 F6 | 	mov	arg02, fp
0cb1c     10 5E 85 F1 | 	sub	fp, #16
0cb20     0C E6 BF FD | 	call	#_ff_cc_validate_0371
0cb24     18 85 02 F6 | 	mov	local01, result1
0cb28     0C 5E 05 F1 | 	add	fp, #12
0cb2c     AF 84 62 FC | 	wrlong	local01, fp
0cb30     AF 86 0A FB | 	rdlong	local02, fp wz
0cb34     0C 5E 85 F1 | 	sub	fp, #12
0cb38     1C 00 90 5D |  if_ne	jmp	#LR__0765
0cb3c     04 5E 05 F1 | 	add	fp, #4
0cb40     AF 88 02 FB | 	rdlong	local03, fp
0cb44     11 88 06 F1 | 	add	local03, #17
0cb48     44 87 C2 FA | 	rdbyte	local02, local03
0cb4c     08 5E 05 F1 | 	add	fp, #8
0cb50     AF 86 62 FC | 	wrlong	local02, fp
0cb54     0C 5E 85 F1 | 	sub	fp, #12
0cb58                 | LR__0765
0cb58     0C 5E 05 F1 | 	add	fp, #12
0cb5c     AF 86 0A FB | 	rdlong	local02, fp wz
0cb60     0C 5E 85 F1 | 	sub	fp, #12
0cb64     10 00 90 AD |  if_e	jmp	#LR__0766
0cb68     0C 5E 05 F1 | 	add	fp, #12
0cb6c     AF 30 02 FB | 	rdlong	result1, fp
0cb70     0C 5E 85 F1 | 	sub	fp, #12
0cb74     A0 05 90 FD | 	jmp	#LR__0786
0cb78                 | LR__0766
0cb78     04 5E 05 F1 | 	add	fp, #4
0cb7c     AF 86 02 FB | 	rdlong	local02, fp
0cb80     04 5E 05 F1 | 	add	fp, #4
0cb84     AF 8A 02 FB | 	rdlong	local04, fp
0cb88     08 5E 85 F1 | 	sub	fp, #8
0cb8c     0C 86 06 F1 | 	add	local02, #12
0cb90     43 8D 02 FB | 	rdlong	local05, local02
0cb94     46 8F 02 F6 | 	mov	local06, local05
0cb98     47 8B 1A F2 | 	cmp	local04, local06 wcz
0cb9c     50 00 90 ED |  if_be	jmp	#LR__0767
0cba0     04 5E 05 F1 | 	add	fp, #4
0cba4     AF 90 02 FB | 	rdlong	local07, fp
0cba8     04 5E 85 F1 | 	sub	fp, #4
0cbac     48 93 02 F6 | 	mov	local08, local07
0cbb0     10 92 06 F1 | 	add	local08, #16
0cbb4     49 95 C2 FA | 	rdbyte	local09, local08
0cbb8     10 92 86 F1 | 	sub	local08, #16
0cbbc     4A 85 02 F6 | 	mov	local01, local09
0cbc0     07 84 46 F7 | 	zerox	local01, #7
0cbc4     02 84 0E F5 | 	and	local01, #2 wz
0cbc8     24 00 90 5D |  if_ne	jmp	#LR__0767
0cbcc     04 5E 05 F1 | 	add	fp, #4
0cbd0     AF 88 02 FB | 	rdlong	local03, fp
0cbd4     44 87 02 F6 | 	mov	local02, local03
0cbd8     0C 86 06 F1 | 	add	local02, #12
0cbdc     43 97 02 FB | 	rdlong	local10, local02
0cbe0     0C 86 86 F1 | 	sub	local02, #12
0cbe4     04 5E 05 F1 | 	add	fp, #4
0cbe8     AF 96 62 FC | 	wrlong	local10, fp
0cbec     08 5E 85 F1 | 	sub	fp, #8
0cbf0                 | LR__0767
0cbf0     04 5E 05 F1 | 	add	fp, #4
0cbf4     AF 86 02 FB | 	rdlong	local02, fp
0cbf8     14 86 06 F1 | 	add	local02, #20
0cbfc     43 97 02 FB | 	rdlong	local10, local02
0cc00     1C 5E 05 F1 | 	add	fp, #28
0cc04     AF 96 62 FC | 	wrlong	local10, fp
0cc08     1C 5E 85 F1 | 	sub	fp, #28
0cc0c     AF 86 02 FB | 	rdlong	local02, fp
0cc10     18 5E 05 F1 | 	add	fp, #24
0cc14     AF 00 68 FC | 	wrlong	#0, fp
0cc18     14 86 06 F1 | 	add	local02, #20
0cc1c     43 01 68 FC | 	wrlong	#0, local02
0cc20     14 5E 85 F1 | 	sub	fp, #20
0cc24     AF 86 02 FB | 	rdlong	local02, fp
0cc28     08 5E 85 F1 | 	sub	fp, #8
0cc2c     00 86 1E F2 | 	cmp	local02, #0 wcz
0cc30     FC 03 90 ED |  if_be	jmp	#LR__0783
0cc34     10 5E 05 F1 | 	add	fp, #16
0cc38     AF 88 02 FB | 	rdlong	local03, fp
0cc3c     0A 88 06 F1 | 	add	local03, #10
0cc40     44 8F E2 FA | 	rdword	local06, local03
0cc44     09 8E 66 F0 | 	shl	local06, #9
0cc48     08 5E 05 F1 | 	add	fp, #8
0cc4c     AF 8E 62 FC | 	wrlong	local06, fp
0cc50     08 5E 05 F1 | 	add	fp, #8
0cc54     AF 86 02 FB | 	rdlong	local02, fp
0cc58     20 5E 85 F1 | 	sub	fp, #32
0cc5c     00 86 1E F2 | 	cmp	local02, #0 wcz
0cc60     BC 00 90 ED |  if_be	jmp	#LR__0768
0cc64     08 5E 05 F1 | 	add	fp, #8
0cc68     AF D8 02 FB | 	rdlong	muldiva_, fp
0cc6c     01 D8 86 F1 | 	sub	muldiva_, #1
0cc70     10 5E 05 F1 | 	add	fp, #16
0cc74     AF DA 02 FB | 	rdlong	muldivb_, fp
0cc78     18 5E 85 F1 | 	sub	fp, #24
0cc7c     CC 00 A0 FD | 	call	#unsdivide_
0cc80     6D 8F 02 F6 | 	mov	local06, muldivb_
0cc84     20 5E 05 F1 | 	add	fp, #32
0cc88     AF D8 02 FB | 	rdlong	muldiva_, fp
0cc8c     01 D8 86 F1 | 	sub	muldiva_, #1
0cc90     08 5E 85 F1 | 	sub	fp, #8
0cc94     AF 94 02 FB | 	rdlong	local09, fp
0cc98     18 5E 85 F1 | 	sub	fp, #24
0cc9c     4A DB 02 F6 | 	mov	muldivb_, local09
0cca0     CC 00 A0 FD | 	call	#unsdivide_
0cca4     6D 91 02 F6 | 	mov	local07, muldivb_
0cca8     48 8F 1A F2 | 	cmp	local06, local07 wcz
0ccac     70 00 90 CD |  if_b	jmp	#LR__0768
0ccb0     04 5E 05 F1 | 	add	fp, #4
0ccb4     AF 86 02 FB | 	rdlong	local02, fp
0ccb8     1C 5E 05 F1 | 	add	fp, #28
0ccbc     AF 96 02 FB | 	rdlong	local10, fp
0ccc0     01 96 86 F1 | 	sub	local10, #1
0ccc4     08 5E 85 F1 | 	sub	fp, #8
0ccc8     AF 8E 02 FB | 	rdlong	local06, fp
0cccc     01 8E 86 F1 | 	sub	local06, #1
0ccd0     47 97 22 F5 | 	andn	local10, local06
0ccd4     14 86 06 F1 | 	add	local02, #20
0ccd8     43 97 62 FC | 	wrlong	local10, local02
0ccdc     10 5E 85 F1 | 	sub	fp, #16
0cce0     AF 86 02 FB | 	rdlong	local02, fp
0cce4     04 5E 85 F1 | 	sub	fp, #4
0cce8     AF 96 02 FB | 	rdlong	local10, fp
0ccec     14 96 06 F1 | 	add	local10, #20
0ccf0     4B 8F 02 FB | 	rdlong	local06, local10
0ccf4     47 87 82 F1 | 	sub	local02, local06
0ccf8     04 5E 05 F1 | 	add	fp, #4
0ccfc     AF 86 62 FC | 	wrlong	local02, fp
0cd00     04 5E 85 F1 | 	sub	fp, #4
0cd04     AF 86 02 FB | 	rdlong	local02, fp
0cd08     18 86 06 F1 | 	add	local02, #24
0cd0c     43 97 02 FB | 	rdlong	local10, local02
0cd10     10 5E 05 F1 | 	add	fp, #16
0cd14     AF 96 62 FC | 	wrlong	local10, fp
0cd18     14 5E 85 F1 | 	sub	fp, #20
0cd1c     D4 00 90 FD | 	jmp	#LR__0772
0cd20                 | LR__0768
0cd20     04 5E 05 F1 | 	add	fp, #4
0cd24     AF 86 02 FB | 	rdlong	local02, fp
0cd28     08 86 06 F1 | 	add	local02, #8
0cd2c     43 97 02 FB | 	rdlong	local10, local02
0cd30     10 5E 05 F1 | 	add	fp, #16
0cd34     AF 96 62 FC | 	wrlong	local10, fp
0cd38     AF 86 0A FB | 	rdlong	local02, fp wz
0cd3c     14 5E 85 F1 | 	sub	fp, #20
0cd40     94 00 90 5D |  if_ne	jmp	#LR__0771
0cd44     04 5E 05 F1 | 	add	fp, #4
0cd48     AF 76 02 FB | 	rdlong	arg01, fp
0cd4c     04 5E 85 F1 | 	sub	fp, #4
0cd50     00 78 06 F6 | 	mov	arg02, #0
0cd54     C8 C9 BF FD | 	call	#_ff_cc_create_chain_0295
0cd58     14 5E 05 F1 | 	add	fp, #20
0cd5c     AF 30 62 FC | 	wrlong	result1, fp
0cd60     14 5E 85 F1 | 	sub	fp, #20
0cd64     01 30 0E F2 | 	cmp	result1, #1 wz
0cd68     1C 00 90 5D |  if_ne	jmp	#LR__0769
0cd6c     04 5E 05 F1 | 	add	fp, #4
0cd70     AF 86 02 FB | 	rdlong	local02, fp
0cd74     04 5E 85 F1 | 	sub	fp, #4
0cd78     11 86 06 F1 | 	add	local02, #17
0cd7c     43 05 48 FC | 	wrbyte	#2, local02
0cd80     02 30 06 F6 | 	mov	result1, #2
0cd84     90 03 90 FD | 	jmp	#LR__0786
0cd88                 | LR__0769
0cd88     14 5E 05 F1 | 	add	fp, #20
0cd8c     AF 86 02 FB | 	rdlong	local02, fp
0cd90     14 5E 85 F1 | 	sub	fp, #20
0cd94     FF FF 7F FF 
0cd98     FF 87 0E F2 | 	cmp	local02, ##-1 wz
0cd9c     1C 00 90 5D |  if_ne	jmp	#LR__0770
0cda0     04 5E 05 F1 | 	add	fp, #4
0cda4     AF 86 02 FB | 	rdlong	local02, fp
0cda8     04 5E 85 F1 | 	sub	fp, #4
0cdac     11 86 06 F1 | 	add	local02, #17
0cdb0     43 03 48 FC | 	wrbyte	#1, local02
0cdb4     01 30 06 F6 | 	mov	result1, #1
0cdb8     5C 03 90 FD | 	jmp	#LR__0786
0cdbc                 | LR__0770
0cdbc     04 5E 05 F1 | 	add	fp, #4
0cdc0     AF 86 02 FB | 	rdlong	local02, fp
0cdc4     10 5E 05 F1 | 	add	fp, #16
0cdc8     AF 96 02 FB | 	rdlong	local10, fp
0cdcc     14 5E 85 F1 | 	sub	fp, #20
0cdd0     08 86 06 F1 | 	add	local02, #8
0cdd4     43 97 62 FC | 	wrlong	local10, local02
0cdd8                 | LR__0771
0cdd8     04 5E 05 F1 | 	add	fp, #4
0cddc     AF 86 02 FB | 	rdlong	local02, fp
0cde0     10 5E 05 F1 | 	add	fp, #16
0cde4     AF 96 02 FB | 	rdlong	local10, fp
0cde8     14 5E 85 F1 | 	sub	fp, #20
0cdec     18 86 06 F1 | 	add	local02, #24
0cdf0     43 97 62 FC | 	wrlong	local10, local02
0cdf4                 | LR__0772
0cdf4     14 5E 05 F1 | 	add	fp, #20
0cdf8     AF 86 0A FB | 	rdlong	local02, fp wz
0cdfc     14 5E 85 F1 | 	sub	fp, #20
0ce00     2C 02 90 AD |  if_e	jmp	#LR__0782
0ce04                 | ' 				while (ofs > bcs) {
0ce04                 | LR__0773
0ce04     08 5E 05 F1 | 	add	fp, #8
0ce08     AF 86 02 FB | 	rdlong	local02, fp
0ce0c     10 5E 05 F1 | 	add	fp, #16
0ce10     AF 96 02 FB | 	rdlong	local10, fp
0ce14     18 5E 85 F1 | 	sub	fp, #24
0ce18     4B 87 1A F2 | 	cmp	local02, local10 wcz
0ce1c     6C 01 90 ED |  if_be	jmp	#LR__0779
0ce20     08 5E 05 F1 | 	add	fp, #8
0ce24     AF 86 02 FB | 	rdlong	local02, fp
0ce28     10 5E 05 F1 | 	add	fp, #16
0ce2c     AF 96 02 FB | 	rdlong	local10, fp
0ce30     4B 87 82 F1 | 	sub	local02, local10
0ce34     10 5E 85 F1 | 	sub	fp, #16
0ce38     AF 86 62 FC | 	wrlong	local02, fp
0ce3c     04 5E 85 F1 | 	sub	fp, #4
0ce40     AF 86 02 FB | 	rdlong	local02, fp
0ce44     43 8B 02 F6 | 	mov	local04, local02
0ce48     14 8A 06 F1 | 	add	local04, #20
0ce4c     45 8D 02 FB | 	rdlong	local05, local04
0ce50     46 97 02 F6 | 	mov	local10, local05
0ce54     14 5E 05 F1 | 	add	fp, #20
0ce58     AF 92 02 FB | 	rdlong	local08, fp
0ce5c     49 97 02 F1 | 	add	local10, local08
0ce60     14 86 06 F1 | 	add	local02, #20
0ce64     43 97 62 FC | 	wrlong	local10, local02
0ce68     14 5E 85 F1 | 	sub	fp, #20
0ce6c     AF 88 02 FB | 	rdlong	local03, fp
0ce70     04 5E 85 F1 | 	sub	fp, #4
0ce74     10 88 06 F1 | 	add	local03, #16
0ce78     44 87 C2 FA | 	rdbyte	local02, local03
0ce7c     02 86 CE F7 | 	test	local02, #2 wz
0ce80     3C 00 90 AD |  if_e	jmp	#LR__0774
0ce84     04 5E 05 F1 | 	add	fp, #4
0ce88     AF 76 02 FB | 	rdlong	arg01, fp
0ce8c     10 5E 05 F1 | 	add	fp, #16
0ce90     AF 78 02 FB | 	rdlong	arg02, fp
0ce94     14 5E 85 F1 | 	sub	fp, #20
0ce98     84 C8 BF FD | 	call	#_ff_cc_create_chain_0295
0ce9c     14 5E 05 F1 | 	add	fp, #20
0cea0     AF 30 62 FC | 	wrlong	result1, fp
0cea4     AF 86 0A FB | 	rdlong	local02, fp wz
0cea8     14 5E 85 F1 | 	sub	fp, #20
0ceac     34 00 90 5D |  if_ne	jmp	#LR__0775
0ceb0     08 5E 05 F1 | 	add	fp, #8
0ceb4     AF 00 68 FC | 	wrlong	#0, fp
0ceb8     08 5E 85 F1 | 	sub	fp, #8
0cebc                 | ' 							ofs = 0; break;
0cebc     CC 00 90 FD | 	jmp	#LR__0779
0cec0                 | LR__0774
0cec0     04 5E 05 F1 | 	add	fp, #4
0cec4     AF 76 02 FB | 	rdlong	arg01, fp
0cec8     10 5E 05 F1 | 	add	fp, #16
0cecc     AF 78 02 FB | 	rdlong	arg02, fp
0ced0     14 5E 85 F1 | 	sub	fp, #20
0ced4     68 C2 BF FD | 	call	#_ff_cc_get_fat_0281
0ced8     14 5E 05 F1 | 	add	fp, #20
0cedc     AF 30 62 FC | 	wrlong	result1, fp
0cee0     14 5E 85 F1 | 	sub	fp, #20
0cee4                 | LR__0775
0cee4     14 5E 05 F1 | 	add	fp, #20
0cee8     AF 86 02 FB | 	rdlong	local02, fp
0ceec     14 5E 85 F1 | 	sub	fp, #20
0cef0     FF FF 7F FF 
0cef4     FF 87 0E F2 | 	cmp	local02, ##-1 wz
0cef8     1C 00 90 5D |  if_ne	jmp	#LR__0776
0cefc     04 5E 05 F1 | 	add	fp, #4
0cf00     AF 86 02 FB | 	rdlong	local02, fp
0cf04     04 5E 85 F1 | 	sub	fp, #4
0cf08     11 86 06 F1 | 	add	local02, #17
0cf0c     43 03 48 FC | 	wrbyte	#1, local02
0cf10     01 30 06 F6 | 	mov	result1, #1
0cf14     00 02 90 FD | 	jmp	#LR__0786
0cf18                 | LR__0776
0cf18     14 5E 05 F1 | 	add	fp, #20
0cf1c     AF 86 02 FB | 	rdlong	local02, fp
0cf20     14 5E 85 F1 | 	sub	fp, #20
0cf24     01 86 1E F2 | 	cmp	local02, #1 wcz
0cf28     24 00 90 ED |  if_be	jmp	#LR__0777
0cf2c     10 5E 05 F1 | 	add	fp, #16
0cf30     AF 96 02 FB | 	rdlong	local10, fp
0cf34     04 5E 05 F1 | 	add	fp, #4
0cf38     AF 8E 02 FB | 	rdlong	local06, fp
0cf3c     14 5E 85 F1 | 	sub	fp, #20
0cf40     14 96 06 F1 | 	add	local10, #20
0cf44     4B 85 02 FB | 	rdlong	local01, local10
0cf48     42 8F 1A F2 | 	cmp	local06, local01 wcz
0cf4c     1C 00 90 CD |  if_b	jmp	#LR__0778
0cf50                 | LR__0777
0cf50     04 5E 05 F1 | 	add	fp, #4
0cf54     AF 86 02 FB | 	rdlong	local02, fp
0cf58     04 5E 85 F1 | 	sub	fp, #4
0cf5c     11 86 06 F1 | 	add	local02, #17
0cf60     43 05 48 FC | 	wrbyte	#2, local02
0cf64     02 30 06 F6 | 	mov	result1, #2
0cf68     AC 01 90 FD | 	jmp	#LR__0786
0cf6c                 | LR__0778
0cf6c     04 5E 05 F1 | 	add	fp, #4
0cf70     AF 86 02 FB | 	rdlong	local02, fp
0cf74     10 5E 05 F1 | 	add	fp, #16
0cf78     AF 96 02 FB | 	rdlong	local10, fp
0cf7c     14 5E 85 F1 | 	sub	fp, #20
0cf80     18 86 06 F1 | 	add	local02, #24
0cf84     43 97 62 FC | 	wrlong	local10, local02
0cf88     78 FE 9F FD | 	jmp	#LR__0773
0cf8c                 | LR__0779
0cf8c     04 5E 05 F1 | 	add	fp, #4
0cf90     AF 86 02 FB | 	rdlong	local02, fp
0cf94     43 8B 02 F6 | 	mov	local04, local02
0cf98     14 8A 06 F1 | 	add	local04, #20
0cf9c     45 97 02 FB | 	rdlong	local10, local04
0cfa0     04 5E 05 F1 | 	add	fp, #4
0cfa4     AF 84 02 FB | 	rdlong	local01, fp
0cfa8     42 97 02 F1 | 	add	local10, local01
0cfac     14 86 06 F1 | 	add	local02, #20
0cfb0     43 97 62 FC | 	wrlong	local10, local02
0cfb4     AF 86 02 FB | 	rdlong	local02, fp
0cfb8     08 5E 85 F1 | 	sub	fp, #8
0cfbc     FF 87 CE F7 | 	test	local02, #511 wz
0cfc0     6C 00 90 AD |  if_e	jmp	#LR__0781
0cfc4     10 5E 05 F1 | 	add	fp, #16
0cfc8     AF 76 02 FB | 	rdlong	arg01, fp
0cfcc     04 5E 05 F1 | 	add	fp, #4
0cfd0     AF 78 02 FB | 	rdlong	arg02, fp
0cfd4     14 5E 85 F1 | 	sub	fp, #20
0cfd8     24 C1 BF FD | 	call	#_ff_cc_clst2sect_0276
0cfdc     1C 5E 05 F1 | 	add	fp, #28
0cfe0     AF 30 62 FC | 	wrlong	result1, fp
0cfe4     AF 86 0A FB | 	rdlong	local02, fp wz
0cfe8     1C 5E 85 F1 | 	sub	fp, #28
0cfec     1C 00 90 5D |  if_ne	jmp	#LR__0780
0cff0     04 5E 05 F1 | 	add	fp, #4
0cff4     AF 86 02 FB | 	rdlong	local02, fp
0cff8     04 5E 85 F1 | 	sub	fp, #4
0cffc     11 86 06 F1 | 	add	local02, #17
0d000     43 05 48 FC | 	wrbyte	#2, local02
0d004     02 30 06 F6 | 	mov	result1, #2
0d008     0C 01 90 FD | 	jmp	#LR__0786
0d00c                 | LR__0780
0d00c     1C 5E 05 F1 | 	add	fp, #28
0d010     AF 86 02 FB | 	rdlong	local02, fp
0d014     14 5E 85 F1 | 	sub	fp, #20
0d018     AF 96 02 FB | 	rdlong	local10, fp
0d01c     09 96 46 F0 | 	shr	local10, #9
0d020     4B 87 02 F1 | 	add	local02, local10
0d024     14 5E 05 F1 | 	add	fp, #20
0d028     AF 86 62 FC | 	wrlong	local02, fp
0d02c     1C 5E 85 F1 | 	sub	fp, #28
0d030                 | LR__0781
0d030                 | LR__0782
0d030                 | LR__0783
0d030     04 5E 05 F1 | 	add	fp, #4
0d034     AF 86 02 FB | 	rdlong	local02, fp
0d038     43 97 02 F6 | 	mov	local10, local02
0d03c     04 5E 85 F1 | 	sub	fp, #4
0d040     14 86 06 F1 | 	add	local02, #20
0d044     43 8F 02 FB | 	rdlong	local06, local02
0d048     0C 96 06 F1 | 	add	local10, #12
0d04c     4B 85 02 FB | 	rdlong	local01, local10
0d050     42 8F 1A F2 | 	cmp	local06, local01 wcz
0d054     3C 00 90 ED |  if_be	jmp	#LR__0784
0d058     04 5E 05 F1 | 	add	fp, #4
0d05c     AF 86 02 FB | 	rdlong	local02, fp
0d060     43 97 02 F6 | 	mov	local10, local02
0d064     14 96 06 F1 | 	add	local10, #20
0d068     4B 8F 02 FB | 	rdlong	local06, local10
0d06c     0C 86 06 F1 | 	add	local02, #12
0d070     43 8F 62 FC | 	wrlong	local06, local02
0d074     AF 86 02 FB | 	rdlong	local02, fp
0d078     43 8B 02 F6 | 	mov	local04, local02
0d07c     04 5E 85 F1 | 	sub	fp, #4
0d080     10 8A 06 F1 | 	add	local04, #16
0d084     45 97 C2 FA | 	rdbyte	local10, local04
0d088     40 96 46 F5 | 	or	local10, #64
0d08c     10 86 06 F1 | 	add	local02, #16
0d090     43 97 42 FC | 	wrbyte	local10, local02
0d094                 | LR__0784
0d094     04 5E 05 F1 | 	add	fp, #4
0d098     AF 86 02 FB | 	rdlong	local02, fp
0d09c     04 5E 85 F1 | 	sub	fp, #4
0d0a0     14 86 06 F1 | 	add	local02, #20
0d0a4     43 8F 02 FB | 	rdlong	local06, local02
0d0a8     47 8B 02 F6 | 	mov	local04, local06
0d0ac     FF 8B CE F7 | 	test	local04, #511 wz
0d0b0     58 00 90 AD |  if_e	jmp	#LR__0785
0d0b4     04 5E 05 F1 | 	add	fp, #4
0d0b8     AF 84 02 FB | 	rdlong	local01, fp
0d0bc     42 8D 02 F6 | 	mov	local05, local01
0d0c0     18 5E 05 F1 | 	add	fp, #24
0d0c4     AF 90 02 FB | 	rdlong	local07, fp
0d0c8     1C 5E 85 F1 | 	sub	fp, #28
0d0cc     48 93 02 F6 | 	mov	local08, local07
0d0d0     1C 8C 06 F1 | 	add	local05, #28
0d0d4     46 99 02 FB | 	rdlong	local11, local05
0d0d8     1C 8C 86 F1 | 	sub	local05, #28
0d0dc     4C 95 02 F6 | 	mov	local09, local11
0d0e0     4A 93 0A F2 | 	cmp	local08, local09 wz
0d0e4     24 00 90 AD |  if_e	jmp	#LR__0785
0d0e8     04 5E 05 F1 | 	add	fp, #4
0d0ec     AF 88 02 FB | 	rdlong	local03, fp
0d0f0     44 87 02 F6 | 	mov	local02, local03
0d0f4     18 5E 05 F1 | 	add	fp, #24
0d0f8     AF 96 02 FB | 	rdlong	local10, fp
0d0fc     1C 5E 85 F1 | 	sub	fp, #28
0d100     1C 86 06 F1 | 	add	local02, #28
0d104     43 97 62 FC | 	wrlong	local10, local02
0d108     1C 86 86 F1 | 	sub	local02, #28
0d10c                 | LR__0785
0d10c                 | ' #line 4553 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0d10c                 | ' 			fp->sect = nsect;
0d10c                 | ' 		}
0d10c                 | ' 	}
0d10c                 | ' 
0d10c                 | ' 	return res ;
0d10c     0C 5E 05 F1 | 	add	fp, #12
0d110     AF 30 02 FB | 	rdlong	result1, fp
0d114     0C 5E 85 F1 | 	sub	fp, #12
0d118                 | LR__0786
0d118     AF F0 03 F6 | 	mov	ptra, fp
0d11c     BF 00 A0 FD | 	call	#popregs_
0d120                 | _ff_cc_f_lseek_ret
0d120     2D 00 64 FD | 	ret
0d124                 | 
0d124                 | _ff_cc_f_opendir
0d124     05 5A 05 F6 | 	mov	COUNT_, #5
0d128     B0 00 A0 FD | 	call	#pushregs_
0d12c     14 F0 07 F1 | 	add	ptra, #20
0d130     04 5E 05 F1 | 	add	fp, #4
0d134     AF 76 62 FC | 	wrlong	arg01, fp
0d138     04 5E 05 F1 | 	add	fp, #4
0d13c     AF 78 62 FC | 	wrlong	arg02, fp
0d140     04 5E 85 F1 | 	sub	fp, #4
0d144     AF 84 0A FB | 	rdlong	local01, fp wz
0d148     04 5E 85 F1 | 	sub	fp, #4
0d14c     09 30 06 A6 |  if_e	mov	result1, #9
0d150     84 01 90 AD |  if_e	jmp	#LR__0794
0d154     08 5E 05 F1 | 	add	fp, #8
0d158     AF 76 02 F6 | 	mov	arg01, fp
0d15c     08 5E 05 F1 | 	add	fp, #8
0d160     AF 78 02 F6 | 	mov	arg02, fp
0d164     10 5E 85 F1 | 	sub	fp, #16
0d168     00 7A 06 F6 | 	mov	arg03, #0
0d16c     80 D9 BF FD | 	call	#_ff_cc_mount_volume_0369
0d170     18 87 02 F6 | 	mov	local02, result1
0d174     0C 5E 05 F1 | 	add	fp, #12
0d178     AF 86 62 FC | 	wrlong	local02, fp
0d17c     AF 84 0A FB | 	rdlong	local01, fp wz
0d180     0C 5E 85 F1 | 	sub	fp, #12
0d184     24 01 90 5D |  if_ne	jmp	#LR__0792
0d188     04 5E 05 F1 | 	add	fp, #4
0d18c     AF 84 02 FB | 	rdlong	local01, fp
0d190     0C 5E 05 F1 | 	add	fp, #12
0d194     AF 88 02 FB | 	rdlong	local03, fp
0d198     42 89 62 FC | 	wrlong	local03, local01
0d19c     0C 5E 85 F1 | 	sub	fp, #12
0d1a0     AF 76 02 FB | 	rdlong	arg01, fp
0d1a4     04 5E 05 F1 | 	add	fp, #4
0d1a8     AF 78 02 FB | 	rdlong	arg02, fp
0d1ac     08 5E 85 F1 | 	sub	fp, #8
0d1b0     00 D4 BF FD | 	call	#_ff_cc_follow_path_0346
0d1b4     0C 5E 05 F1 | 	add	fp, #12
0d1b8     AF 30 62 FC | 	wrlong	result1, fp
0d1bc     AF 84 0A FB | 	rdlong	local01, fp wz
0d1c0     0C 5E 85 F1 | 	sub	fp, #12
0d1c4     C8 00 90 5D |  if_ne	jmp	#LR__0791
0d1c8     04 5E 05 F1 | 	add	fp, #4
0d1cc     AF 8A 02 FB | 	rdlong	local04, fp
0d1d0     04 5E 85 F1 | 	sub	fp, #4
0d1d4     2B 8A 06 F1 | 	add	local04, #43
0d1d8     45 85 C2 FA | 	rdbyte	local01, local04
0d1dc     80 84 CE F7 | 	test	local01, #128 wz
0d1e0     5C 00 90 5D |  if_ne	jmp	#LR__0789
0d1e4     04 5E 05 F1 | 	add	fp, #4
0d1e8     AF 8A 02 FB | 	rdlong	local04, fp
0d1ec     04 5E 85 F1 | 	sub	fp, #4
0d1f0     06 8A 06 F1 | 	add	local04, #6
0d1f4     45 85 C2 FA | 	rdbyte	local01, local04
0d1f8     10 84 CE F7 | 	test	local01, #16 wz
0d1fc     34 00 90 AD |  if_e	jmp	#LR__0787
0d200     04 5E 05 F1 | 	add	fp, #4
0d204     AF 84 02 FB | 	rdlong	local01, fp
0d208     0C 5E 05 F1 | 	add	fp, #12
0d20c     AF 76 02 FB | 	rdlong	arg01, fp
0d210     0C 5E 85 F1 | 	sub	fp, #12
0d214     AF 8C 02 FB | 	rdlong	local05, fp
0d218     04 5E 85 F1 | 	sub	fp, #4
0d21c     1C 8C 06 F1 | 	add	local05, #28
0d220     46 79 02 FB | 	rdlong	arg02, local05
0d224     5C CC BF FD | 	call	#_ff_cc_ld_clust_0314
0d228     08 84 06 F1 | 	add	local01, #8
0d22c     42 31 62 FC | 	wrlong	result1, local01
0d230     0C 00 90 FD | 	jmp	#LR__0788
0d234                 | LR__0787
0d234     0C 5E 05 F1 | 	add	fp, #12
0d238     AF 0A 68 FC | 	wrlong	#5, fp
0d23c     0C 5E 85 F1 | 	sub	fp, #12
0d240                 | LR__0788
0d240                 | LR__0789
0d240     0C 5E 05 F1 | 	add	fp, #12
0d244     AF 84 0A FB | 	rdlong	local01, fp wz
0d248     0C 5E 85 F1 | 	sub	fp, #12
0d24c     40 00 90 5D |  if_ne	jmp	#LR__0790
0d250     04 5E 05 F1 | 	add	fp, #4
0d254     AF 84 02 FB | 	rdlong	local01, fp
0d258     0C 5E 05 F1 | 	add	fp, #12
0d25c     AF 88 02 FB | 	rdlong	local03, fp
0d260     06 88 06 F1 | 	add	local03, #6
0d264     44 8D E2 FA | 	rdword	local05, local03
0d268     04 84 06 F1 | 	add	local01, #4
0d26c     42 8D 52 FC | 	wrword	local05, local01
0d270     0C 5E 85 F1 | 	sub	fp, #12
0d274     AF 76 02 FB | 	rdlong	arg01, fp
0d278     04 5E 85 F1 | 	sub	fp, #4
0d27c     00 78 06 F6 | 	mov	arg02, #0
0d280     D8 C7 BF FD | 	call	#_ff_cc_dir_sdi_0304
0d284     0C 5E 05 F1 | 	add	fp, #12
0d288     AF 30 62 FC | 	wrlong	result1, fp
0d28c     0C 5E 85 F1 | 	sub	fp, #12
0d290                 | LR__0790
0d290                 | LR__0791
0d290     0C 5E 05 F1 | 	add	fp, #12
0d294     AF 84 02 FB | 	rdlong	local01, fp
0d298     0C 5E 85 F1 | 	sub	fp, #12
0d29c     04 84 0E F2 | 	cmp	local01, #4 wz
0d2a0     0C 5E 05 A1 |  if_e	add	fp, #12
0d2a4     AF 0A 68 AC |  if_e	wrlong	#5, fp
0d2a8     0C 5E 85 A1 |  if_e	sub	fp, #12
0d2ac                 | LR__0792
0d2ac     0C 5E 05 F1 | 	add	fp, #12
0d2b0     AF 84 0A FB | 	rdlong	local01, fp wz
0d2b4     0C 5E 85 F1 | 	sub	fp, #12
0d2b8     10 00 90 AD |  if_e	jmp	#LR__0793
0d2bc     04 5E 05 F1 | 	add	fp, #4
0d2c0     AF 84 02 FB | 	rdlong	local01, fp
0d2c4     04 5E 85 F1 | 	sub	fp, #4
0d2c8     42 01 68 FC | 	wrlong	#0, local01
0d2cc                 | LR__0793
0d2cc                 | ' 
0d2cc                 | ' 	return res ;
0d2cc     0C 5E 05 F1 | 	add	fp, #12
0d2d0     AF 30 02 FB | 	rdlong	result1, fp
0d2d4     0C 5E 85 F1 | 	sub	fp, #12
0d2d8                 | LR__0794
0d2d8     AF F0 03 F6 | 	mov	ptra, fp
0d2dc     BF 00 A0 FD | 	call	#popregs_
0d2e0                 | _ff_cc_f_opendir_ret
0d2e0     2D 00 64 FD | 	ret
0d2e4                 | 
0d2e4                 | _ff_cc_f_closedir
0d2e4     02 5A 05 F6 | 	mov	COUNT_, #2
0d2e8     B0 00 A0 FD | 	call	#pushregs_
0d2ec     10 F0 07 F1 | 	add	ptra, #16
0d2f0     04 5E 05 F1 | 	add	fp, #4
0d2f4     AF 76 62 FC | 	wrlong	arg01, fp
0d2f8     08 5E 05 F1 | 	add	fp, #8
0d2fc     AF 78 02 F6 | 	mov	arg02, fp
0d300     0C 5E 85 F1 | 	sub	fp, #12
0d304     28 DE BF FD | 	call	#_ff_cc_validate_0371
0d308     18 85 02 F6 | 	mov	local01, result1
0d30c     08 5E 05 F1 | 	add	fp, #8
0d310     AF 84 62 FC | 	wrlong	local01, fp
0d314     AF 86 0A FB | 	rdlong	local02, fp wz
0d318     08 5E 85 F1 | 	sub	fp, #8
0d31c     10 00 90 5D |  if_ne	jmp	#LR__0795
0d320     04 5E 05 F1 | 	add	fp, #4
0d324     AF 86 02 FB | 	rdlong	local02, fp
0d328     04 5E 85 F1 | 	sub	fp, #4
0d32c     43 01 68 FC | 	wrlong	#0, local02
0d330                 | LR__0795
0d330                 | ' 
0d330                 | ' 
0d330                 | ' 
0d330                 | ' 
0d330                 | ' 		dp->obj.fs = 0;
0d330                 | ' #line 4652 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0d330                 | ' 	}
0d330                 | ' 	return res;
0d330     08 5E 05 F1 | 	add	fp, #8
0d334     AF 30 02 FB | 	rdlong	result1, fp
0d338     08 5E 85 F1 | 	sub	fp, #8
0d33c     AF F0 03 F6 | 	mov	ptra, fp
0d340     BF 00 A0 FD | 	call	#popregs_
0d344                 | _ff_cc_f_closedir_ret
0d344     2D 00 64 FD | 	ret
0d348                 | 
0d348                 | _ff_cc_f_readdir
0d348     02 5A 05 F6 | 	mov	COUNT_, #2
0d34c     B0 00 A0 FD | 	call	#pushregs_
0d350     14 F0 07 F1 | 	add	ptra, #20
0d354     04 5E 05 F1 | 	add	fp, #4
0d358     AF 76 62 FC | 	wrlong	arg01, fp
0d35c     04 5E 05 F1 | 	add	fp, #4
0d360     AF 78 62 FC | 	wrlong	arg02, fp
0d364     04 5E 85 F1 | 	sub	fp, #4
0d368     AF 76 02 FB | 	rdlong	arg01, fp
0d36c     0C 5E 05 F1 | 	add	fp, #12
0d370     AF 78 02 F6 | 	mov	arg02, fp
0d374     10 5E 85 F1 | 	sub	fp, #16
0d378     B4 DD BF FD | 	call	#_ff_cc_validate_0371
0d37c     18 85 02 F6 | 	mov	local01, result1
0d380     0C 5E 05 F1 | 	add	fp, #12
0d384     AF 84 62 FC | 	wrlong	local01, fp
0d388     AF 86 0A FB | 	rdlong	local02, fp wz
0d38c     0C 5E 85 F1 | 	sub	fp, #12
0d390     BC 00 90 5D |  if_ne	jmp	#LR__0799
0d394     08 5E 05 F1 | 	add	fp, #8
0d398     AF 86 0A FB | 	rdlong	local02, fp wz
0d39c     08 5E 85 F1 | 	sub	fp, #8
0d3a0     24 00 90 5D |  if_ne	jmp	#LR__0796
0d3a4     04 5E 05 F1 | 	add	fp, #4
0d3a8     AF 76 02 FB | 	rdlong	arg01, fp
0d3ac     04 5E 85 F1 | 	sub	fp, #4
0d3b0     00 78 06 F6 | 	mov	arg02, #0
0d3b4     A4 C6 BF FD | 	call	#_ff_cc_dir_sdi_0304
0d3b8     0C 5E 05 F1 | 	add	fp, #12
0d3bc     AF 30 62 FC | 	wrlong	result1, fp
0d3c0     0C 5E 85 F1 | 	sub	fp, #12
0d3c4     88 00 90 FD | 	jmp	#LR__0798
0d3c8                 | LR__0796
0d3c8     04 5E 05 F1 | 	add	fp, #4
0d3cc     AF 76 02 FB | 	rdlong	arg01, fp
0d3d0     04 5E 85 F1 | 	sub	fp, #4
0d3d4     00 78 06 F6 | 	mov	arg02, #0
0d3d8     50 CB BF FD | 	call	#_ff_cc_dir_read_0320
0d3dc     0C 5E 05 F1 | 	add	fp, #12
0d3e0     AF 30 62 FC | 	wrlong	result1, fp
0d3e4     0C 5E 85 F1 | 	sub	fp, #12
0d3e8     04 30 0E F2 | 	cmp	result1, #4 wz
0d3ec     0C 5E 05 A1 |  if_e	add	fp, #12
0d3f0     AF 00 68 AC |  if_e	wrlong	#0, fp
0d3f4     0C 5E 85 A1 |  if_e	sub	fp, #12
0d3f8     0C 5E 05 F1 | 	add	fp, #12
0d3fc     AF 86 0A FB | 	rdlong	local02, fp wz
0d400     0C 5E 85 F1 | 	sub	fp, #12
0d404     48 00 90 5D |  if_ne	jmp	#LR__0797
0d408     04 5E 05 F1 | 	add	fp, #4
0d40c     AF 76 02 FB | 	rdlong	arg01, fp
0d410     04 5E 05 F1 | 	add	fp, #4
0d414     AF 78 02 FB | 	rdlong	arg02, fp
0d418     08 5E 85 F1 | 	sub	fp, #8
0d41c     FC CD BF FD | 	call	#_ff_cc_get_fileinfo_0334
0d420     04 5E 05 F1 | 	add	fp, #4
0d424     AF 76 02 FB | 	rdlong	arg01, fp
0d428     04 5E 85 F1 | 	sub	fp, #4
0d42c     00 78 06 F6 | 	mov	arg02, #0
0d430     B4 C7 BF FD | 	call	#_ff_cc_dir_next_0308
0d434     0C 5E 05 F1 | 	add	fp, #12
0d438     AF 30 62 FC | 	wrlong	result1, fp
0d43c     0C 5E 85 F1 | 	sub	fp, #12
0d440     04 30 0E F2 | 	cmp	result1, #4 wz
0d444     0C 5E 05 A1 |  if_e	add	fp, #12
0d448     AF 00 68 AC |  if_e	wrlong	#0, fp
0d44c     0C 5E 85 A1 |  if_e	sub	fp, #12
0d450                 | LR__0797
0d450                 | LR__0798
0d450                 | LR__0799
0d450                 | ' 			}
0d450                 | ' 			;
0d450                 | ' 		}
0d450                 | ' 	}
0d450                 | ' 	return res ;
0d450     0C 5E 05 F1 | 	add	fp, #12
0d454     AF 30 02 FB | 	rdlong	result1, fp
0d458     0C 5E 85 F1 | 	sub	fp, #12
0d45c     AF F0 03 F6 | 	mov	ptra, fp
0d460     BF 00 A0 FD | 	call	#popregs_
0d464                 | _ff_cc_f_readdir_ret
0d464     2D 00 64 FD | 	ret
0d468                 | 
0d468                 | _ff_cc_f_stat
0d468     03 5A 05 F6 | 	mov	COUNT_, #3
0d46c     B0 00 A0 FD | 	call	#pushregs_
0d470     3C F0 07 F1 | 	add	ptra, #60
0d474     04 5E 05 F1 | 	add	fp, #4
0d478     AF 76 62 FC | 	wrlong	arg01, fp
0d47c     04 5E 05 F1 | 	add	fp, #4
0d480     AF 78 62 FC | 	wrlong	arg02, fp
0d484     04 5E 85 F1 | 	sub	fp, #4
0d488     AF 76 02 F6 | 	mov	arg01, fp
0d48c     0C 5E 05 F1 | 	add	fp, #12
0d490     AF 78 02 F6 | 	mov	arg02, fp
0d494     10 5E 85 F1 | 	sub	fp, #16
0d498     00 7A 06 F6 | 	mov	arg03, #0
0d49c     50 D6 BF FD | 	call	#_ff_cc_mount_volume_0369
0d4a0     18 85 02 F6 | 	mov	local01, result1
0d4a4     0C 5E 05 F1 | 	add	fp, #12
0d4a8     AF 84 62 FC | 	wrlong	local01, fp
0d4ac     AF 86 0A FB | 	rdlong	local02, fp wz
0d4b0     0C 5E 85 F1 | 	sub	fp, #12
0d4b4     80 00 90 5D |  if_ne	jmp	#LR__0804
0d4b8     10 5E 05 F1 | 	add	fp, #16
0d4bc     AF 76 02 F6 | 	mov	arg01, fp
0d4c0     0C 5E 85 F1 | 	sub	fp, #12
0d4c4     AF 78 02 FB | 	rdlong	arg02, fp
0d4c8     04 5E 85 F1 | 	sub	fp, #4
0d4cc     E4 D0 BF FD | 	call	#_ff_cc_follow_path_0346
0d4d0     18 89 02 F6 | 	mov	local03, result1
0d4d4     0C 5E 05 F1 | 	add	fp, #12
0d4d8     AF 88 62 FC | 	wrlong	local03, fp
0d4dc     AF 86 0A FB | 	rdlong	local02, fp wz
0d4e0     0C 5E 85 F1 | 	sub	fp, #12
0d4e4     50 00 90 5D |  if_ne	jmp	#LR__0803
0d4e8     3B 5E 05 F1 | 	add	fp, #59
0d4ec     AF 86 C2 FA | 	rdbyte	local02, fp
0d4f0     3B 5E 85 F1 | 	sub	fp, #59
0d4f4     07 86 46 F7 | 	zerox	local02, #7
0d4f8     80 86 CE F7 | 	test	local02, #128 wz
0d4fc     10 00 90 AD |  if_e	jmp	#LR__0800
0d500     0C 5E 05 F1 | 	add	fp, #12
0d504     AF 0C 68 FC | 	wrlong	#6, fp
0d508     0C 5E 85 F1 | 	sub	fp, #12
0d50c     28 00 90 FD | 	jmp	#LR__0802
0d510                 | LR__0800
0d510     08 5E 05 F1 | 	add	fp, #8
0d514     AF 86 0A FB | 	rdlong	local02, fp wz
0d518     08 5E 85 F1 | 	sub	fp, #8
0d51c     18 00 90 AD |  if_e	jmp	#LR__0801
0d520     10 5E 05 F1 | 	add	fp, #16
0d524     AF 76 02 F6 | 	mov	arg01, fp
0d528     08 5E 85 F1 | 	sub	fp, #8
0d52c     AF 78 02 FB | 	rdlong	arg02, fp
0d530     08 5E 85 F1 | 	sub	fp, #8
0d534     E4 CC BF FD | 	call	#_ff_cc_get_fileinfo_0334
0d538                 | LR__0801
0d538                 | LR__0802
0d538                 | LR__0803
0d538                 | LR__0804
0d538                 | ' 			}
0d538                 | ' 		}
0d538                 | ' 		;
0d538                 | ' 	}
0d538                 | ' 
0d538                 | ' 	return res ;
0d538     0C 5E 05 F1 | 	add	fp, #12
0d53c     AF 30 02 FB | 	rdlong	result1, fp
0d540     0C 5E 85 F1 | 	sub	fp, #12
0d544     AF F0 03 F6 | 	mov	ptra, fp
0d548     BF 00 A0 FD | 	call	#popregs_
0d54c                 | _ff_cc_f_stat_ret
0d54c     2D 00 64 FD | 	ret
0d550                 | 
0d550                 | _ff_cc_f_unlink
0d550     06 5A 05 F6 | 	mov	COUNT_, #6
0d554     B0 00 A0 FD | 	call	#pushregs_
0d558     6C F0 07 F1 | 	add	ptra, #108
0d55c     04 5E 05 F1 | 	add	fp, #4
0d560     AF 76 62 FC | 	wrlong	arg01, fp
0d564     60 5E 05 F1 | 	add	fp, #96
0d568     AF 00 68 FC | 	wrlong	#0, fp
0d56c     60 5E 85 F1 | 	sub	fp, #96
0d570     AF 76 02 F6 | 	mov	arg01, fp
0d574     64 5E 05 F1 | 	add	fp, #100
0d578     AF 78 02 F6 | 	mov	arg02, fp
0d57c     68 5E 85 F1 | 	sub	fp, #104
0d580     02 7A 06 F6 | 	mov	arg03, #2
0d584     68 D5 BF FD | 	call	#_ff_cc_mount_volume_0369
0d588     18 85 02 F6 | 	mov	local01, result1
0d58c     08 5E 05 F1 | 	add	fp, #8
0d590     AF 84 62 FC | 	wrlong	local01, fp
0d594     AF 86 0A FB | 	rdlong	local02, fp wz
0d598     08 5E 85 F1 | 	sub	fp, #8
0d59c     18 02 90 5D |  if_ne	jmp	#LR__0814
0d5a0     68 5E 05 F1 | 	add	fp, #104
0d5a4     AF 86 02 FB | 	rdlong	local02, fp
0d5a8     5C 5E 85 F1 | 	sub	fp, #92
0d5ac     AF 86 62 FC | 	wrlong	local02, fp
0d5b0     AF 76 02 F6 | 	mov	arg01, fp
0d5b4     08 5E 85 F1 | 	sub	fp, #8
0d5b8     AF 78 02 FB | 	rdlong	arg02, fp
0d5bc     04 5E 85 F1 | 	sub	fp, #4
0d5c0     F0 CF BF FD | 	call	#_ff_cc_follow_path_0346
0d5c4     18 89 02 F6 | 	mov	local03, result1
0d5c8     08 5E 05 F1 | 	add	fp, #8
0d5cc     AF 88 62 FC | 	wrlong	local03, fp
0d5d0     AF 86 0A FB | 	rdlong	local02, fp wz
0d5d4     08 5E 85 F1 | 	sub	fp, #8
0d5d8     DC 01 90 5D |  if_ne	jmp	#LR__0813
0d5dc     37 5E 05 F1 | 	add	fp, #55
0d5e0     AF 86 C2 FA | 	rdbyte	local02, fp
0d5e4     37 5E 85 F1 | 	sub	fp, #55
0d5e8     07 86 46 F7 | 	zerox	local02, #7
0d5ec     80 86 CE F7 | 	test	local02, #128 wz
0d5f0     10 00 90 AD |  if_e	jmp	#LR__0805
0d5f4     08 5E 05 F1 | 	add	fp, #8
0d5f8     AF 0C 68 FC | 	wrlong	#6, fp
0d5fc     08 5E 85 F1 | 	sub	fp, #8
0d600     20 00 90 FD | 	jmp	#LR__0806
0d604                 | LR__0805
0d604     12 5E 05 F1 | 	add	fp, #18
0d608     AF 86 C2 FA | 	rdbyte	local02, fp
0d60c     12 5E 85 F1 | 	sub	fp, #18
0d610     07 86 46 F7 | 	zerox	local02, #7
0d614     01 86 CE F7 | 	test	local02, #1 wz
0d618     08 5E 05 51 |  if_ne	add	fp, #8
0d61c     AF 0E 68 5C |  if_ne	wrlong	#7, fp
0d620     08 5E 85 51 |  if_ne	sub	fp, #8
0d624                 | LR__0806
0d624     08 5E 05 F1 | 	add	fp, #8
0d628     AF 86 0A FB | 	rdlong	local02, fp wz
0d62c     08 5E 85 F1 | 	sub	fp, #8
0d630     D4 00 90 5D |  if_ne	jmp	#LR__0809
0d634     68 5E 05 F1 | 	add	fp, #104
0d638     AF 76 02 FB | 	rdlong	arg01, fp
0d63c     40 5E 85 F1 | 	sub	fp, #64
0d640     AF 78 02 FB | 	rdlong	arg02, fp
0d644     28 5E 85 F1 | 	sub	fp, #40
0d648     38 C8 BF FD | 	call	#_ff_cc_ld_clust_0314
0d64c     18 89 02 F6 | 	mov	local03, result1
0d650     64 5E 05 F1 | 	add	fp, #100
0d654     AF 88 62 FC | 	wrlong	local03, fp
0d658     52 5E 85 F1 | 	sub	fp, #82
0d65c     AF 86 C2 FA | 	rdbyte	local02, fp
0d660     12 5E 85 F1 | 	sub	fp, #18
0d664     07 86 46 F7 | 	zerox	local02, #7
0d668     10 86 CE F7 | 	test	local02, #16 wz
0d66c     98 00 90 AD |  if_e	jmp	#LR__0808
0d670     68 5E 05 F1 | 	add	fp, #104
0d674     AF 86 02 FB | 	rdlong	local02, fp
0d678     30 5E 85 F1 | 	sub	fp, #48
0d67c     AF 86 62 FC | 	wrlong	local02, fp
0d680     2C 5E 05 F1 | 	add	fp, #44
0d684     AF 86 02 FB | 	rdlong	local02, fp
0d688     24 5E 85 F1 | 	sub	fp, #36
0d68c     AF 86 62 FC | 	wrlong	local02, fp
0d690     08 5E 85 F1 | 	sub	fp, #8
0d694     AF 76 02 F6 | 	mov	arg01, fp
0d698     38 5E 85 F1 | 	sub	fp, #56
0d69c     00 78 06 F6 | 	mov	arg02, #0
0d6a0     B8 C3 BF FD | 	call	#_ff_cc_dir_sdi_0304
0d6a4     18 8B 02 F6 | 	mov	local04, result1
0d6a8     08 5E 05 F1 | 	add	fp, #8
0d6ac     AF 8A 62 FC | 	wrlong	local04, fp
0d6b0     AF 86 0A FB | 	rdlong	local02, fp wz
0d6b4     08 5E 85 F1 | 	sub	fp, #8
0d6b8     4C 00 90 5D |  if_ne	jmp	#LR__0807
0d6bc     38 5E 05 F1 | 	add	fp, #56
0d6c0     AF 76 02 F6 | 	mov	arg01, fp
0d6c4     38 5E 85 F1 | 	sub	fp, #56
0d6c8     00 78 06 F6 | 	mov	arg02, #0
0d6cc     5C C8 BF FD | 	call	#_ff_cc_dir_read_0320
0d6d0     08 5E 05 F1 | 	add	fp, #8
0d6d4     AF 30 62 FC | 	wrlong	result1, fp
0d6d8     AF 86 0A FB | 	rdlong	local02, fp wz
0d6dc     08 5E 85 F1 | 	sub	fp, #8
0d6e0     08 5E 05 A1 |  if_e	add	fp, #8
0d6e4     AF 0E 68 AC |  if_e	wrlong	#7, fp
0d6e8     08 5E 85 A1 |  if_e	sub	fp, #8
0d6ec     08 5E 05 F1 | 	add	fp, #8
0d6f0     AF 86 02 FB | 	rdlong	local02, fp
0d6f4     08 5E 85 F1 | 	sub	fp, #8
0d6f8     04 86 0E F2 | 	cmp	local02, #4 wz
0d6fc     08 5E 05 A1 |  if_e	add	fp, #8
0d700     AF 00 68 AC |  if_e	wrlong	#0, fp
0d704     08 5E 85 A1 |  if_e	sub	fp, #8
0d708                 | LR__0807
0d708                 | LR__0808
0d708                 | LR__0809
0d708     08 5E 05 F1 | 	add	fp, #8
0d70c     AF 86 0A FB | 	rdlong	local02, fp wz
0d710     08 5E 85 F1 | 	sub	fp, #8
0d714     A0 00 90 5D |  if_ne	jmp	#LR__0812
0d718     0C 5E 05 F1 | 	add	fp, #12
0d71c     AF 76 02 F6 | 	mov	arg01, fp
0d720     0C 5E 85 F1 | 	sub	fp, #12
0d724     A4 CA BF FD | 	call	#_ff_cc_dir_remove_0330
0d728     08 5E 05 F1 | 	add	fp, #8
0d72c     AF 30 62 FC | 	wrlong	result1, fp
0d730     AF 86 0A FB | 	rdlong	local02, fp wz
0d734     08 5E 85 F1 | 	sub	fp, #8
0d738     50 00 90 5D |  if_ne	jmp	#LR__0810
0d73c     64 5E 05 F1 | 	add	fp, #100
0d740     AF 8C 0A FB | 	rdlong	local05, fp wz
0d744     64 5E 85 F1 | 	sub	fp, #100
0d748     40 00 90 AD |  if_e	jmp	#LR__0810
0d74c     0C 5E 05 F1 | 	add	fp, #12
0d750     AF 86 02 F6 | 	mov	local02, fp
0d754     43 8F 02 F6 | 	mov	local06, local02
0d758     58 5E 05 F1 | 	add	fp, #88
0d75c     AF 8A 02 FB | 	rdlong	local04, fp
0d760     64 5E 85 F1 | 	sub	fp, #100
0d764     45 8D 02 F6 | 	mov	local05, local04
0d768     00 88 06 F6 | 	mov	local03, #0
0d76c     47 77 02 F6 | 	mov	arg01, local06
0d770     46 79 02 F6 | 	mov	arg02, local05
0d774     00 7A 06 F6 | 	mov	arg03, #0
0d778     8C BE BF FD | 	call	#_ff_cc_remove_chain_0289
0d77c     18 85 02 F6 | 	mov	local01, result1
0d780     08 5E 05 F1 | 	add	fp, #8
0d784     AF 84 62 FC | 	wrlong	local01, fp
0d788     08 5E 85 F1 | 	sub	fp, #8
0d78c                 | LR__0810
0d78c     08 5E 05 F1 | 	add	fp, #8
0d790     AF 86 0A FB | 	rdlong	local02, fp wz
0d794     08 5E 85 F1 | 	sub	fp, #8
0d798     1C 00 90 5D |  if_ne	jmp	#LR__0811
0d79c     68 5E 05 F1 | 	add	fp, #104
0d7a0     AF 76 02 FB | 	rdlong	arg01, fp
0d7a4     68 5E 85 F1 | 	sub	fp, #104
0d7a8     D8 B7 BF FD | 	call	#_ff_cc_sync_fs_0275
0d7ac     08 5E 05 F1 | 	add	fp, #8
0d7b0     AF 30 62 FC | 	wrlong	result1, fp
0d7b4     08 5E 85 F1 | 	sub	fp, #8
0d7b8                 | LR__0811
0d7b8                 | LR__0812
0d7b8                 | LR__0813
0d7b8                 | LR__0814
0d7b8                 | ' 			}
0d7b8                 | ' 		}
0d7b8                 | ' 		;
0d7b8                 | ' 	}
0d7b8                 | ' 
0d7b8                 | ' 	return res ;
0d7b8     08 5E 05 F1 | 	add	fp, #8
0d7bc     AF 30 02 FB | 	rdlong	result1, fp
0d7c0     08 5E 85 F1 | 	sub	fp, #8
0d7c4     AF F0 03 F6 | 	mov	ptra, fp
0d7c8     BF 00 A0 FD | 	call	#popregs_
0d7cc                 | _ff_cc_f_unlink_ret
0d7cc     2D 00 64 FD | 	ret
0d7d0                 | 
0d7d0                 | _ff_cc_f_mkdir
0d7d0     06 5A 05 F6 | 	mov	COUNT_, #6
0d7d4     B0 00 A0 FD | 	call	#pushregs_
0d7d8     58 F0 07 F1 | 	add	ptra, #88
0d7dc     04 5E 05 F1 | 	add	fp, #4
0d7e0     AF 76 62 FC | 	wrlong	arg01, fp
0d7e4     AF 76 02 F6 | 	mov	arg01, fp
0d7e8     44 5E 05 F1 | 	add	fp, #68
0d7ec     AF 78 02 F6 | 	mov	arg02, fp
0d7f0     48 5E 85 F1 | 	sub	fp, #72
0d7f4     02 7A 06 F6 | 	mov	arg03, #2
0d7f8     F4 D2 BF FD | 	call	#_ff_cc_mount_volume_0369
0d7fc     18 85 02 F6 | 	mov	local01, result1
0d800     08 5E 05 F1 | 	add	fp, #8
0d804     AF 84 62 FC | 	wrlong	local01, fp
0d808     AF 86 0A FB | 	rdlong	local02, fp wz
0d80c     08 5E 85 F1 | 	sub	fp, #8
0d810     04 03 90 5D |  if_ne	jmp	#LR__0824
0d814     48 5E 05 F1 | 	add	fp, #72
0d818     AF 86 02 FB | 	rdlong	local02, fp
0d81c     3C 5E 85 F1 | 	sub	fp, #60
0d820     AF 86 62 FC | 	wrlong	local02, fp
0d824     AF 76 02 F6 | 	mov	arg01, fp
0d828     08 5E 85 F1 | 	sub	fp, #8
0d82c     AF 88 02 FB | 	rdlong	local03, fp
0d830     04 5E 85 F1 | 	sub	fp, #4
0d834     44 79 02 F6 | 	mov	arg02, local03
0d838     78 CD BF FD | 	call	#_ff_cc_follow_path_0346
0d83c     18 8B 02 F6 | 	mov	local04, result1
0d840     08 5E 05 F1 | 	add	fp, #8
0d844     AF 8A 62 FC | 	wrlong	local04, fp
0d848     45 8D 02 F6 | 	mov	local05, local04
0d84c     08 5E 85 F1 | 	sub	fp, #8
0d850     46 87 0A F6 | 	mov	local02, local05 wz
0d854     08 5E 05 A1 |  if_e	add	fp, #8
0d858     AF 10 68 AC |  if_e	wrlong	#8, fp
0d85c     08 5E 85 A1 |  if_e	sub	fp, #8
0d860     08 5E 05 F1 | 	add	fp, #8
0d864     AF 86 02 FB | 	rdlong	local02, fp
0d868     08 5E 85 F1 | 	sub	fp, #8
0d86c     04 86 0E F2 | 	cmp	local02, #4 wz
0d870     A4 02 90 5D |  if_ne	jmp	#LR__0823
0d874     48 5E 05 F1 | 	add	fp, #72
0d878     AF 86 02 FB | 	rdlong	local02, fp
0d87c     10 5E 85 F1 | 	sub	fp, #16
0d880     AF 86 62 FC | 	wrlong	local02, fp
0d884     AF 76 02 F6 | 	mov	arg01, fp
0d888     38 5E 85 F1 | 	sub	fp, #56
0d88c     00 78 06 F6 | 	mov	arg02, #0
0d890     8C BE BF FD | 	call	#_ff_cc_create_chain_0295
0d894     18 8F 02 F6 | 	mov	local06, result1
0d898     4C 5E 05 F1 | 	add	fp, #76
0d89c     AF 8E 62 FC | 	wrlong	local06, fp
0d8a0     44 5E 85 F1 | 	sub	fp, #68
0d8a4     AF 00 68 FC | 	wrlong	#0, fp
0d8a8     44 5E 05 F1 | 	add	fp, #68
0d8ac     AF 86 0A FB | 	rdlong	local02, fp wz
0d8b0     4C 5E 85 F1 | 	sub	fp, #76
0d8b4     08 5E 05 A1 |  if_e	add	fp, #8
0d8b8     AF 0E 68 AC |  if_e	wrlong	#7, fp
0d8bc     08 5E 85 A1 |  if_e	sub	fp, #8
0d8c0     4C 5E 05 F1 | 	add	fp, #76
0d8c4     AF 86 02 FB | 	rdlong	local02, fp
0d8c8     4C 5E 85 F1 | 	sub	fp, #76
0d8cc     01 86 0E F2 | 	cmp	local02, #1 wz
0d8d0     08 5E 05 A1 |  if_e	add	fp, #8
0d8d4     AF 04 68 AC |  if_e	wrlong	#2, fp
0d8d8     08 5E 85 A1 |  if_e	sub	fp, #8
0d8dc     4C 5E 05 F1 | 	add	fp, #76
0d8e0     AF 86 02 FB | 	rdlong	local02, fp
0d8e4     4C 5E 85 F1 | 	sub	fp, #76
0d8e8     FF FF 7F FF 
0d8ec     FF 87 0E F2 | 	cmp	local02, ##-1 wz
0d8f0     08 5E 05 A1 |  if_e	add	fp, #8
0d8f4     AF 02 68 AC |  if_e	wrlong	#1, fp
0d8f8     08 5E 85 A1 |  if_e	sub	fp, #8
0d8fc     54 5E 05 F1 | 	add	fp, #84
0d900     80 10 A7 FF 
0d904     AF 00 68 FC | 	wrlong	##1310785536, fp
0d908     4C 5E 85 F1 | 	sub	fp, #76
0d90c     AF 86 0A FB | 	rdlong	local02, fp wz
0d910     08 5E 85 F1 | 	sub	fp, #8
0d914     48 01 90 5D |  if_ne	jmp	#LR__0820
0d918     48 5E 05 F1 | 	add	fp, #72
0d91c     AF 76 02 FB | 	rdlong	arg01, fp
0d920     04 5E 05 F1 | 	add	fp, #4
0d924     AF 8E 02 FB | 	rdlong	local06, fp
0d928     4C 5E 85 F1 | 	sub	fp, #76
0d92c     47 89 02 F6 | 	mov	local03, local06
0d930     44 79 02 F6 | 	mov	arg02, local03
0d934     48 C0 BF FD | 	call	#_ff_cc_dir_clear_0300
0d938     18 8B 02 F6 | 	mov	local04, result1
0d93c     08 5E 05 F1 | 	add	fp, #8
0d940     AF 8A 62 FC | 	wrlong	local04, fp
0d944     45 8D 02 F6 | 	mov	local05, local04
0d948     08 5E 85 F1 | 	sub	fp, #8
0d94c     46 87 0A F6 | 	mov	local02, local05 wz
0d950     0C 01 90 5D |  if_ne	jmp	#LR__0819
0d954     48 5E 05 F1 | 	add	fp, #72
0d958     AF 76 02 FB | 	rdlong	arg01, fp
0d95c     48 5E 85 F1 | 	sub	fp, #72
0d960     30 76 06 F1 | 	add	arg01, #48
0d964     20 78 06 F6 | 	mov	arg02, #32
0d968     0B 7A 06 F6 | 	mov	arg03, #11
0d96c                 | ' {
0d96c                 | ' 	BYTE *d = (BYTE*)dst;
0d96c                 | ' 
0d96c                 | ' 	do {
0d96c     9C 26 9F FE | 	loc	pa,	#(@LR__0817-@LR__0815)
0d970     93 00 A0 FD | 	call	#FCACHE_LOAD_
0d974                 | LR__0815
0d974     0B 04 DC FC | 	rep	@LR__0818, #11
0d978                 | LR__0816
0d978     3B 79 42 FC | 	wrbyte	arg02, arg01
0d97c     01 76 06 F1 | 	add	arg01, #1
0d980                 | LR__0817
0d980                 | LR__0818
0d980     48 5E 05 F1 | 	add	fp, #72
0d984     AF 86 02 FB | 	rdlong	local02, fp
0d988     30 86 06 F1 | 	add	local02, #48
0d98c     43 5D 48 FC | 	wrbyte	#46, local02
0d990     AF 86 02 FB | 	rdlong	local02, fp
0d994     3B 86 06 F1 | 	add	local02, #59
0d998     43 21 48 FC | 	wrbyte	#16, local02
0d99c     AF 76 02 FB | 	rdlong	arg01, fp
0d9a0     46 76 06 F1 | 	add	arg01, #70
0d9a4     0C 5E 05 F1 | 	add	fp, #12
0d9a8     AF 78 02 FB | 	rdlong	arg02, fp
0d9ac     54 5E 85 F1 | 	sub	fp, #84
0d9b0     C0 B3 BF FD | 	call	#_ff_cc_st_dword_0257
0d9b4     48 5E 05 F1 | 	add	fp, #72
0d9b8     AF 76 02 FB | 	rdlong	arg01, fp
0d9bc     3B 79 02 F6 | 	mov	arg02, arg01
0d9c0     30 78 06 F1 | 	add	arg02, #48
0d9c4     04 5E 05 F1 | 	add	fp, #4
0d9c8     AF 7A 02 FB | 	rdlong	arg03, fp
0d9cc     4C 5E 85 F1 | 	sub	fp, #76
0d9d0     08 C5 BF FD | 	call	#_ff_cc_st_clust_0315
0d9d4     48 5E 05 F1 | 	add	fp, #72
0d9d8     AF 76 02 FB | 	rdlong	arg01, fp
0d9dc     50 76 06 F1 | 	add	arg01, #80
0d9e0     AF 78 02 FB | 	rdlong	arg02, fp
0d9e4     48 5E 85 F1 | 	sub	fp, #72
0d9e8     30 78 06 F1 | 	add	arg02, #48
0d9ec     20 7A 06 F6 | 	mov	arg03, #32
0d9f0     AC B3 BF FD | 	call	#_ff_cc_mem_cpy_0260
0d9f4     48 5E 05 F1 | 	add	fp, #72
0d9f8     AF 86 02 FB | 	rdlong	local02, fp
0d9fc     51 86 06 F1 | 	add	local02, #81
0da00     43 5D 48 FC | 	wrbyte	#46, local02
0da04     34 5E 85 F1 | 	sub	fp, #52
0da08     AF 86 02 FB | 	rdlong	local02, fp
0da0c     3C 5E 05 F1 | 	add	fp, #60
0da10     AF 86 62 FC | 	wrlong	local02, fp
0da14     08 5E 85 F1 | 	sub	fp, #8
0da18     AF 76 02 FB | 	rdlong	arg01, fp
0da1c     3B 79 02 F6 | 	mov	arg02, arg01
0da20     50 78 06 F1 | 	add	arg02, #80
0da24     08 5E 05 F1 | 	add	fp, #8
0da28     AF 7A 02 FB | 	rdlong	arg03, fp
0da2c     50 5E 85 F1 | 	sub	fp, #80
0da30     A8 C4 BF FD | 	call	#_ff_cc_st_clust_0315
0da34     48 5E 05 F1 | 	add	fp, #72
0da38     AF 86 02 FB | 	rdlong	local02, fp
0da3c     03 86 06 F1 | 	add	local02, #3
0da40     43 03 48 FC | 	wrbyte	#1, local02
0da44     3C 5E 85 F1 | 	sub	fp, #60
0da48     AF 76 02 F6 | 	mov	arg01, fp
0da4c     0C 5E 85 F1 | 	sub	fp, #12
0da50     E4 C6 BF FD | 	call	#_ff_cc_dir_register_0327
0da54     08 5E 05 F1 | 	add	fp, #8
0da58     AF 30 62 FC | 	wrlong	result1, fp
0da5c     08 5E 85 F1 | 	sub	fp, #8
0da60                 | LR__0819
0da60                 | LR__0820
0da60     08 5E 05 F1 | 	add	fp, #8
0da64     AF 86 0A FB | 	rdlong	local02, fp wz
0da68     08 5E 85 F1 | 	sub	fp, #8
0da6c     8C 00 90 5D |  if_ne	jmp	#LR__0821
0da70     28 5E 05 F1 | 	add	fp, #40
0da74     AF 76 02 FB | 	rdlong	arg01, fp
0da78     16 76 06 F1 | 	add	arg01, #22
0da7c     2C 5E 05 F1 | 	add	fp, #44
0da80     AF 78 02 FB | 	rdlong	arg02, fp
0da84     54 5E 85 F1 | 	sub	fp, #84
0da88     E8 B2 BF FD | 	call	#_ff_cc_st_dword_0257
0da8c     48 5E 05 F1 | 	add	fp, #72
0da90     AF 76 02 FB | 	rdlong	arg01, fp
0da94     20 5E 85 F1 | 	sub	fp, #32
0da98     AF 78 02 FB | 	rdlong	arg02, fp
0da9c     24 5E 05 F1 | 	add	fp, #36
0daa0     AF 7A 02 FB | 	rdlong	arg03, fp
0daa4     4C 5E 85 F1 | 	sub	fp, #76
0daa8     30 C4 BF FD | 	call	#_ff_cc_st_clust_0315
0daac     28 5E 05 F1 | 	add	fp, #40
0dab0     AF 86 02 FB | 	rdlong	local02, fp
0dab4     0B 86 06 F1 | 	add	local02, #11
0dab8     43 21 48 FC | 	wrbyte	#16, local02
0dabc     20 5E 05 F1 | 	add	fp, #32
0dac0     AF 86 02 FB | 	rdlong	local02, fp
0dac4     03 86 06 F1 | 	add	local02, #3
0dac8     43 03 48 FC | 	wrbyte	#1, local02
0dacc     40 5E 85 F1 | 	sub	fp, #64
0dad0     AF 86 0A FB | 	rdlong	local02, fp wz
0dad4     08 5E 85 F1 | 	sub	fp, #8
0dad8     3C 00 90 5D |  if_ne	jmp	#LR__0822
0dadc     48 5E 05 F1 | 	add	fp, #72
0dae0     AF 76 02 FB | 	rdlong	arg01, fp
0dae4     48 5E 85 F1 | 	sub	fp, #72
0dae8     98 B4 BF FD | 	call	#_ff_cc_sync_fs_0275
0daec     08 5E 05 F1 | 	add	fp, #8
0daf0     AF 30 62 FC | 	wrlong	result1, fp
0daf4     08 5E 85 F1 | 	sub	fp, #8
0daf8     1C 00 90 FD | 	jmp	#LR__0822
0dafc                 | LR__0821
0dafc     38 5E 05 F1 | 	add	fp, #56
0db00     AF 76 02 F6 | 	mov	arg01, fp
0db04     14 5E 05 F1 | 	add	fp, #20
0db08     AF 78 02 FB | 	rdlong	arg02, fp
0db0c     4C 5E 85 F1 | 	sub	fp, #76
0db10     00 7A 06 F6 | 	mov	arg03, #0
0db14     F0 BA BF FD | 	call	#_ff_cc_remove_chain_0289
0db18                 | LR__0822
0db18                 | LR__0823
0db18                 | LR__0824
0db18                 | ' 				remove_chain(&sobj, dcl, 0);
0db18                 | ' 			}
0db18                 | ' 		}
0db18                 | ' 		;
0db18                 | ' 	}
0db18                 | ' 
0db18                 | ' 	return res ;
0db18     08 5E 05 F1 | 	add	fp, #8
0db1c     AF 30 02 FB | 	rdlong	result1, fp
0db20     08 5E 85 F1 | 	sub	fp, #8
0db24     AF F0 03 F6 | 	mov	ptra, fp
0db28     BF 00 A0 FD | 	call	#popregs_
0db2c                 | _ff_cc_f_mkdir_ret
0db2c     2D 00 64 FD | 	ret
0db30                 | 
0db30                 | _ff_cc_f_rename
0db30     09 5A 05 F6 | 	mov	COUNT_, #9
0db34     B0 00 A0 FD | 	call	#pushregs_
0db38     94 F0 07 F1 | 	add	ptra, #148
0db3c     04 5E 05 F1 | 	add	fp, #4
0db40     AF 76 62 FC | 	wrlong	arg01, fp
0db44     04 5E 05 F1 | 	add	fp, #4
0db48     AF 78 62 FC | 	wrlong	arg02, fp
0db4c     AF 76 02 F6 | 	mov	arg01, fp
0db50     08 5E 85 F1 | 	sub	fp, #8
0db54     80 CC BF FD | 	call	#_ff_cc_get_ldnumber_0352
0db58     04 5E 05 F1 | 	add	fp, #4
0db5c     AF 76 02 F6 | 	mov	arg01, fp
0db60     64 5E 05 F1 | 	add	fp, #100
0db64     AF 78 02 F6 | 	mov	arg02, fp
0db68     68 5E 85 F1 | 	sub	fp, #104
0db6c     02 7A 06 F6 | 	mov	arg03, #2
0db70     7C CF BF FD | 	call	#_ff_cc_mount_volume_0369
0db74     18 85 02 F6 | 	mov	local01, result1
0db78     0C 5E 05 F1 | 	add	fp, #12
0db7c     AF 84 62 FC | 	wrlong	local01, fp
0db80     AF 86 0A FB | 	rdlong	local02, fp wz
0db84     0C 5E 85 F1 | 	sub	fp, #12
0db88     B8 03 90 5D |  if_ne	jmp	#LR__0839
0db8c     68 5E 05 F1 | 	add	fp, #104
0db90     AF 86 02 FB | 	rdlong	local02, fp
0db94     58 5E 85 F1 | 	sub	fp, #88
0db98     AF 86 62 FC | 	wrlong	local02, fp
0db9c     AF 76 02 F6 | 	mov	arg01, fp
0dba0     0C 5E 85 F1 | 	sub	fp, #12
0dba4     AF 78 02 FB | 	rdlong	arg02, fp
0dba8     04 5E 85 F1 | 	sub	fp, #4
0dbac     04 CA BF FD | 	call	#_ff_cc_follow_path_0346
0dbb0     18 89 02 F6 | 	mov	local03, result1
0dbb4     0C 5E 05 F1 | 	add	fp, #12
0dbb8     AF 88 62 FC | 	wrlong	local03, fp
0dbbc     AF 8A 0A FB | 	rdlong	local04, fp wz
0dbc0     0C 5E 85 F1 | 	sub	fp, #12
0dbc4     2C 00 90 5D |  if_ne	jmp	#LR__0825
0dbc8     3B 5E 05 F1 | 	add	fp, #59
0dbcc     AF 8C C2 FA | 	rdbyte	local05, fp
0dbd0     3B 5E 85 F1 | 	sub	fp, #59
0dbd4     46 8F 02 F6 | 	mov	local06, local05
0dbd8     07 8E 46 F7 | 	zerox	local06, #7
0dbdc     A0 8E 0E F5 | 	and	local06, #160 wz
0dbe0     10 00 90 AD |  if_e	jmp	#LR__0825
0dbe4     06 86 06 F6 | 	mov	local02, #6
0dbe8     0C 5E 05 F1 | 	add	fp, #12
0dbec     AF 0C 68 FC | 	wrlong	#6, fp
0dbf0     0C 5E 85 F1 | 	sub	fp, #12
0dbf4                 | LR__0825
0dbf4     0C 5E 05 F1 | 	add	fp, #12
0dbf8     AF 86 0A FB | 	rdlong	local02, fp wz
0dbfc     0C 5E 85 F1 | 	sub	fp, #12
0dc00     40 03 90 5D |  if_ne	jmp	#LR__0838
0dc04     6C 5E 05 F1 | 	add	fp, #108
0dc08     AF 76 02 F6 | 	mov	arg01, fp
0dc0c     40 5E 85 F1 | 	sub	fp, #64
0dc10     AF 78 02 FB | 	rdlong	arg02, fp
0dc14     2C 5E 85 F1 | 	sub	fp, #44
0dc18     20 7A 06 F6 | 	mov	arg03, #32
0dc1c     80 B1 BF FD | 	call	#_ff_cc_mem_cpy_0260
0dc20     3C 5E 05 F1 | 	add	fp, #60
0dc24     AF 76 02 F6 | 	mov	arg01, fp
0dc28     2C 5E 85 F1 | 	sub	fp, #44
0dc2c     AF 78 02 F6 | 	mov	arg02, fp
0dc30     10 5E 85 F1 | 	sub	fp, #16
0dc34     2C 7A 06 F6 | 	mov	arg03, #44
0dc38     64 B1 BF FD | 	call	#_ff_cc_mem_cpy_0260
0dc3c     3C 5E 05 F1 | 	add	fp, #60
0dc40     AF 76 02 F6 | 	mov	arg01, fp
0dc44     34 5E 85 F1 | 	sub	fp, #52
0dc48     AF 78 02 FB | 	rdlong	arg02, fp
0dc4c     08 5E 85 F1 | 	sub	fp, #8
0dc50     60 C9 BF FD | 	call	#_ff_cc_follow_path_0346
0dc54     0C 5E 05 F1 | 	add	fp, #12
0dc58     AF 30 62 FC | 	wrlong	result1, fp
0dc5c     AF 86 0A FB | 	rdlong	local02, fp wz
0dc60     0C 5E 85 F1 | 	sub	fp, #12
0dc64     4C 00 90 5D |  if_ne	jmp	#LR__0828
0dc68     44 5E 05 F1 | 	add	fp, #68
0dc6c     AF 8A 02 FB | 	rdlong	local04, fp
0dc70     2C 5E 85 F1 | 	sub	fp, #44
0dc74     AF 8C 02 FB | 	rdlong	local05, fp
0dc78     18 5E 85 F1 | 	sub	fp, #24
0dc7c     46 8B 0A F2 | 	cmp	local04, local05 wz
0dc80     20 00 90 5D |  if_ne	jmp	#LR__0826
0dc84     4C 5E 05 F1 | 	add	fp, #76
0dc88     AF 84 02 FB | 	rdlong	local01, fp
0dc8c     2C 5E 85 F1 | 	sub	fp, #44
0dc90     AF 90 02 FB | 	rdlong	local07, fp
0dc94     20 5E 85 F1 | 	sub	fp, #32
0dc98     48 85 0A F2 | 	cmp	local01, local07 wz
0dc9c     04 86 06 A6 |  if_e	mov	local02, #4
0dca0     04 00 90 AD |  if_e	jmp	#LR__0827
0dca4                 | LR__0826
0dca4     08 86 06 F6 | 	mov	local02, #8
0dca8                 | LR__0827
0dca8     0C 5E 05 F1 | 	add	fp, #12
0dcac     AF 86 62 FC | 	wrlong	local02, fp
0dcb0     0C 5E 85 F1 | 	sub	fp, #12
0dcb4                 | LR__0828
0dcb4     0C 5E 05 F1 | 	add	fp, #12
0dcb8     AF 86 02 FB | 	rdlong	local02, fp
0dcbc     0C 5E 85 F1 | 	sub	fp, #12
0dcc0     04 86 0E F2 | 	cmp	local02, #4 wz
0dcc4     28 02 90 5D |  if_ne	jmp	#LR__0835
0dcc8     3C 5E 05 F1 | 	add	fp, #60
0dccc     AF 76 02 F6 | 	mov	arg01, fp
0dcd0     3C 5E 85 F1 | 	sub	fp, #60
0dcd4     60 C4 BF FD | 	call	#_ff_cc_dir_register_0327
0dcd8     0C 5E 05 F1 | 	add	fp, #12
0dcdc     AF 30 62 FC | 	wrlong	result1, fp
0dce0     AF 86 0A FB | 	rdlong	local02, fp wz
0dce4     0C 5E 85 F1 | 	sub	fp, #12
0dce8     04 02 90 5D |  if_ne	jmp	#LR__0834
0dcec     58 5E 05 F1 | 	add	fp, #88
0dcf0     AF 76 02 FB | 	rdlong	arg01, fp
0dcf4     34 5E 05 F1 | 	add	fp, #52
0dcf8     AF 76 62 FC | 	wrlong	arg01, fp
0dcfc     0D 76 06 F1 | 	add	arg01, #13
0dd00     20 5E 85 F1 | 	sub	fp, #32
0dd04     AF 78 02 F6 | 	mov	arg02, fp
0dd08     6C 5E 85 F1 | 	sub	fp, #108
0dd0c     0D 78 06 F1 | 	add	arg02, #13
0dd10     13 7A 06 F6 | 	mov	arg03, #19
0dd14     88 B0 BF FD | 	call	#_ff_cc_mem_cpy_0260
0dd18     8C 5E 05 F1 | 	add	fp, #140
0dd1c     AF 86 02 FB | 	rdlong	local02, fp
0dd20     15 5E 85 F1 | 	sub	fp, #21
0dd24     AF 8E C2 FA | 	rdbyte	local06, fp
0dd28     0B 86 06 F1 | 	add	local02, #11
0dd2c     43 8F 42 FC | 	wrbyte	local06, local02
0dd30     15 5E 05 F1 | 	add	fp, #21
0dd34     AF 8A 02 FB | 	rdlong	local04, fp
0dd38     8C 5E 85 F1 | 	sub	fp, #140
0dd3c     0B 8A 06 F1 | 	add	local04, #11
0dd40     45 87 C2 FA | 	rdbyte	local02, local04
0dd44     10 86 CE F7 | 	test	local02, #16 wz
0dd48     24 00 90 5D |  if_ne	jmp	#LR__0829
0dd4c     8C 5E 05 F1 | 	add	fp, #140
0dd50     AF 86 02 FB | 	rdlong	local02, fp
0dd54     43 8D 02 F6 | 	mov	local05, local02
0dd58     8C 5E 85 F1 | 	sub	fp, #140
0dd5c     0B 8C 06 F1 | 	add	local05, #11
0dd60     46 8F C2 FA | 	rdbyte	local06, local05
0dd64     20 8E 46 F5 | 	or	local06, #32
0dd68     0B 86 06 F1 | 	add	local02, #11
0dd6c     43 8F 42 FC | 	wrbyte	local06, local02
0dd70                 | LR__0829
0dd70     68 5E 05 F1 | 	add	fp, #104
0dd74     AF 86 02 FB | 	rdlong	local02, fp
0dd78     03 86 06 F1 | 	add	local02, #3
0dd7c     43 03 48 FC | 	wrbyte	#1, local02
0dd80     24 5E 05 F1 | 	add	fp, #36
0dd84     AF 8A 02 FB | 	rdlong	local04, fp
0dd88     8C 5E 85 F1 | 	sub	fp, #140
0dd8c     0B 8A 06 F1 | 	add	local04, #11
0dd90     45 87 C2 FA | 	rdbyte	local02, local04
0dd94     10 86 CE F7 | 	test	local02, #16 wz
0dd98     54 01 90 AD |  if_e	jmp	#LR__0833
0dd9c     18 5E 05 F1 | 	add	fp, #24
0dda0     AF 88 02 FB | 	rdlong	local03, fp
0dda4     2C 5E 05 F1 | 	add	fp, #44
0dda8     AF 92 02 FB | 	rdlong	local08, fp
0ddac     44 5E 85 F1 | 	sub	fp, #68
0ddb0     49 89 0A F2 | 	cmp	local03, local08 wz
0ddb4     38 01 90 AD |  if_e	jmp	#LR__0833
0ddb8     68 5E 05 F1 | 	add	fp, #104
0ddbc     AF 86 02 FB | 	rdlong	local02, fp
0ddc0     43 8D 02 F6 | 	mov	local05, local02
0ddc4     46 8F 02 F6 | 	mov	local06, local05
0ddc8     24 5E 05 F1 | 	add	fp, #36
0ddcc     AF 84 02 FB | 	rdlong	local01, fp
0ddd0     8C 5E 85 F1 | 	sub	fp, #140
0ddd4     42 89 02 F6 | 	mov	local03, local01
0ddd8     47 77 02 F6 | 	mov	arg01, local06
0dddc     44 79 02 F6 | 	mov	arg02, local03
0dde0     A0 C0 BF FD | 	call	#_ff_cc_ld_clust_0314
0dde4     18 93 02 F6 | 	mov	local08, result1
0dde8     43 77 02 F6 | 	mov	arg01, local02
0ddec     49 79 02 F6 | 	mov	arg02, local08
0ddf0     0C B3 BF FD | 	call	#_ff_cc_clst2sect_0276
0ddf4     18 95 02 F6 | 	mov	local09, result1
0ddf8     90 5E 05 F1 | 	add	fp, #144
0ddfc     AF 94 62 FC | 	wrlong	local09, fp
0de00     AF 8A 0A FB | 	rdlong	local04, fp wz
0de04     90 5E 85 F1 | 	sub	fp, #144
0de08     14 00 90 5D |  if_ne	jmp	#LR__0830
0de0c     02 86 06 F6 | 	mov	local02, #2
0de10     0C 5E 05 F1 | 	add	fp, #12
0de14     AF 04 68 FC | 	wrlong	#2, fp
0de18     0C 5E 85 F1 | 	sub	fp, #12
0de1c     D0 00 90 FD | 	jmp	#LR__0832
0de20                 | LR__0830
0de20     68 5E 05 F1 | 	add	fp, #104
0de24     AF 76 02 FB | 	rdlong	arg01, fp
0de28     28 5E 05 F1 | 	add	fp, #40
0de2c     AF 78 02 FB | 	rdlong	arg02, fp
0de30     90 5E 85 F1 | 	sub	fp, #144
0de34     D0 B0 BF FD | 	call	#_ff_cc_move_window_0273
0de38     18 89 02 F6 | 	mov	local03, result1
0de3c     0C 5E 05 F1 | 	add	fp, #12
0de40     AF 88 62 FC | 	wrlong	local03, fp
0de44     5C 5E 05 F1 | 	add	fp, #92
0de48     AF 8E 02 FB | 	rdlong	local06, fp
0de4c     47 8D 02 F6 | 	mov	local05, local06
0de50     30 8C 06 F1 | 	add	local05, #48
0de54     46 87 02 F6 | 	mov	local02, local05
0de58     20 86 06 F1 | 	add	local02, #32
0de5c     24 5E 05 F1 | 	add	fp, #36
0de60     AF 86 62 FC | 	wrlong	local02, fp
0de64     80 5E 85 F1 | 	sub	fp, #128
0de68     AF 8A 02 FB | 	rdlong	local04, fp
0de6c     0C 5E 85 F1 | 	sub	fp, #12
0de70     45 87 0A F6 | 	mov	local02, local04 wz
0de74     78 00 90 5D |  if_ne	jmp	#LR__0831
0de78     8C 5E 05 F1 | 	add	fp, #140
0de7c     AF 88 02 FB | 	rdlong	local03, fp
0de80     8C 5E 85 F1 | 	sub	fp, #140
0de84     44 8D 02 F6 | 	mov	local05, local03
0de88     01 8C 06 F1 | 	add	local05, #1
0de8c     46 85 C2 FA | 	rdbyte	local01, local05
0de90     01 8C 86 F1 | 	sub	local05, #1
0de94     42 8F 02 F6 | 	mov	local06, local01
0de98     07 8E 46 F7 | 	zerox	local06, #7
0de9c     2E 8E 0E F2 | 	cmp	local06, #46 wz
0dea0     4C 00 90 5D |  if_ne	jmp	#LR__0831
0dea4     68 5E 05 F1 | 	add	fp, #104
0dea8     AF 76 02 FB | 	rdlong	arg01, fp
0deac     24 5E 05 F1 | 	add	fp, #36
0deb0     AF 8C 02 FB | 	rdlong	local05, fp
0deb4     48 5E 85 F1 | 	sub	fp, #72
0deb8     AF 84 02 FB | 	rdlong	local01, fp
0debc     44 5E 85 F1 | 	sub	fp, #68
0dec0     42 89 02 F6 | 	mov	local03, local01
0dec4     46 79 02 F6 | 	mov	arg02, local05
0dec8     44 7B 02 F6 | 	mov	arg03, local03
0decc     0C C0 BF FD | 	call	#_ff_cc_st_clust_0315
0ded0     68 5E 05 F1 | 	add	fp, #104
0ded4     AF 8A 02 FB | 	rdlong	local04, fp
0ded8     68 5E 85 F1 | 	sub	fp, #104
0dedc     45 87 02 F6 | 	mov	local02, local04
0dee0     01 8E 06 F6 | 	mov	local06, #1
0dee4     03 86 06 F1 | 	add	local02, #3
0dee8     43 03 48 FC | 	wrbyte	#1, local02
0deec     03 86 86 F1 | 	sub	local02, #3
0def0                 | LR__0831
0def0                 | LR__0832
0def0                 | LR__0833
0def0                 | LR__0834
0def0                 | LR__0835
0def0     0C 5E 05 F1 | 	add	fp, #12
0def4     AF 86 0A FB | 	rdlong	local02, fp wz
0def8     0C 5E 85 F1 | 	sub	fp, #12
0defc     44 00 90 5D |  if_ne	jmp	#LR__0837
0df00     10 5E 05 F1 | 	add	fp, #16
0df04     AF 76 02 F6 | 	mov	arg01, fp
0df08     10 5E 85 F1 | 	sub	fp, #16
0df0c     BC C2 BF FD | 	call	#_ff_cc_dir_remove_0330
0df10     18 8F 02 F6 | 	mov	local06, result1
0df14     0C 5E 05 F1 | 	add	fp, #12
0df18     AF 8E 62 FC | 	wrlong	local06, fp
0df1c     AF 86 0A FB | 	rdlong	local02, fp wz
0df20     0C 5E 85 F1 | 	sub	fp, #12
0df24     1C 00 90 5D |  if_ne	jmp	#LR__0836
0df28     68 5E 05 F1 | 	add	fp, #104
0df2c     AF 76 02 FB | 	rdlong	arg01, fp
0df30     68 5E 85 F1 | 	sub	fp, #104
0df34     4C B0 BF FD | 	call	#_ff_cc_sync_fs_0275
0df38     0C 5E 05 F1 | 	add	fp, #12
0df3c     AF 30 62 FC | 	wrlong	result1, fp
0df40     0C 5E 85 F1 | 	sub	fp, #12
0df44                 | LR__0836
0df44                 | LR__0837
0df44                 | LR__0838
0df44                 | LR__0839
0df44                 | ' 					res = sync_fs(fs);
0df44                 | ' 				}
0df44                 | ' 			}
0df44                 | ' 
0df44                 | ' 		}
0df44                 | ' 		;
0df44                 | ' 	}
0df44                 | ' 
0df44                 | ' 	return res ;
0df44     0C 5E 05 F1 | 	add	fp, #12
0df48     AF 30 02 FB | 	rdlong	result1, fp
0df4c     0C 5E 85 F1 | 	sub	fp, #12
0df50     AF F0 03 F6 | 	mov	ptra, fp
0df54     BF 00 A0 FD | 	call	#popregs_
0df58                 | _ff_cc_f_rename_ret
0df58     2D 00 64 FD | 	ret
0df5c                 | 
0df5c                 | _ff_cc_stat
0df5c     09 5A 05 F6 | 	mov	COUNT_, #9
0df60     B0 00 A0 FD | 	call	#pushregs_
0df64     3B 85 02 F6 | 	mov	local01, arg01
0df68     3C 87 02 F6 | 	mov	local02, arg02
0df6c     38 15 06 F1 | 	add	ptr___system__dat__, #312
0df70     0A 31 02 F6 | 	mov	result1, ptr___system__dat__
0df74     38 15 86 F1 | 	sub	ptr___system__dat__, #312
0df78     18 89 02 F6 | 	mov	local03, result1
0df7c     44 77 02 F6 | 	mov	arg01, local03
0df80     42 79 02 F6 | 	mov	arg02, local01
0df84     00 7A 06 F6 | 	mov	arg03, #0
0df88     54 89 BF FD | 	call	#__system____getvfsforfile
0df8c     18 8B 0A F6 | 	mov	local04, result1 wz
0df90     14 00 90 AD |  if_e	jmp	#LR__0840
0df94     2C 8A 06 F1 | 	add	local04, #44
0df98     45 8D 02 FB | 	rdlong	local05, local04
0df9c     2C 8A 86 F1 | 	sub	local04, #44
0dfa0     46 8F 0A F6 | 	mov	local06, local05 wz
0dfa4     1C 00 90 5D |  if_ne	jmp	#LR__0841
0dfa8                 | LR__0840
0dfa8                 | ' #line 19 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0dfa8                 | '         return _seterror( 16 );
0dfa8     01 00 00 FF 
0dfac     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0dfb0     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
0dfb4     01 00 00 FF 
0dfb8     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0dfbc     01 30 66 F6 | 	neg	result1, #1
0dfc0     44 00 90 FD | 	jmp	#LR__0842
0dfc4                 | LR__0841
0dfc4     43 77 02 F6 | 	mov	arg01, local02
0dfc8     00 78 06 F6 | 	mov	arg02, #0
0dfcc     30 7A 06 F6 | 	mov	arg03, #48
0dfd0     3B 91 02 F6 | 	mov	local07, arg01
0dfd4     A0 00 A0 FD | 	call	#\builtin_bytefill_
0dfd8     48 31 02 F6 | 	mov	result1, local07
0dfdc     2C 8A 06 F1 | 	add	local04, #44
0dfe0     45 8F 02 FB | 	rdlong	local06, local04
0dfe4     47 8D 02 FB | 	rdlong	local05, local06
0dfe8     04 8E 06 F1 | 	add	local06, #4
0dfec     47 93 02 FB | 	rdlong	local08, local06
0dff0     44 77 02 F6 | 	mov	arg01, local03
0dff4     43 79 02 F6 | 	mov	arg02, local02
0dff8     07 95 02 F6 | 	mov	local09, objptr
0dffc     46 0F 02 F6 | 	mov	objptr, local05
0e000     2D 92 62 FD | 	call	local08
0e004     4A 0F 02 F6 | 	mov	objptr, local09
0e008                 | ' #line 29 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0e008                 | '     r = v->stat(name, buf);
0e008                 | ' #line 33 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/libc/unix/stat.c"
0e008                 | '     return r;
0e008                 | LR__0842
0e008     AF F0 03 F6 | 	mov	ptra, fp
0e00c     BF 00 A0 FD | 	call	#popregs_
0e010                 | _ff_cc_stat_ret
0e010     2D 00 64 FD | 	ret
0e014                 | 
0e014                 | _ff_cc__set_dos_error_0498
0e014     03 5A 05 F6 | 	mov	COUNT_, #3
0e018     B0 00 A0 FD | 	call	#pushregs_
0e01c     3B 85 02 F6 | 	mov	local01, arg01
0e020                 | ' #line 6871 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0e020                 | '     switch (derr) {
0e020     42 87 02 F6 | 	mov	local02, local01
0e024     14 86 26 F3 | 	fle	local02, #20
0e028     30 86 62 FD | 	jmprel	local02
0e02c                 | LR__0843
0e02c     50 00 90 FD | 	jmp	#LR__0844
0e030     84 00 90 FD | 	jmp	#LR__0858
0e034     80 00 90 FD | 	jmp	#LR__0859
0e038     7C 00 90 FD | 	jmp	#LR__0860
0e03c     48 00 90 FD | 	jmp	#LR__0845
0e040     44 00 90 FD | 	jmp	#LR__0846
0e044     40 00 90 FD | 	jmp	#LR__0847
0e048     44 00 90 FD | 	jmp	#LR__0848
0e04c     48 00 90 FD | 	jmp	#LR__0850
0e050     54 00 90 FD | 	jmp	#LR__0853
0e054     38 00 90 FD | 	jmp	#LR__0849
0e058     4C 00 90 FD | 	jmp	#LR__0854
0e05c     48 00 90 FD | 	jmp	#LR__0855
0e060     44 00 90 FD | 	jmp	#LR__0856
0e064     50 00 90 FD | 	jmp	#LR__0861
0e068     4C 00 90 FD | 	jmp	#LR__0861
0e06c     48 00 90 FD | 	jmp	#LR__0861
0e070     2C 00 90 FD | 	jmp	#LR__0851
0e074     38 00 90 FD | 	jmp	#LR__0857
0e078     2C 00 90 FD | 	jmp	#LR__0852
0e07c     38 00 90 FD | 	jmp	#LR__0861
0e080                 | LR__0844
0e080     00 88 06 F6 | 	mov	local03, #0
0e084                 | '         r = 0;
0e084                 | '         break;
0e084     34 00 90 FD | 	jmp	#LR__0862
0e088                 | LR__0845
0e088                 | LR__0846
0e088                 | LR__0847
0e088     04 88 06 F6 | 	mov	local03, #4
0e08c                 | '         r =  4 ;
0e08c                 | '         break;
0e08c     2C 00 90 FD | 	jmp	#LR__0862
0e090                 | LR__0848
0e090                 | LR__0849
0e090     06 88 06 F6 | 	mov	local03, #6
0e094                 | '         r =  6 ;
0e094                 | '         break;
0e094     24 00 90 FD | 	jmp	#LR__0862
0e098                 | LR__0850
0e098     09 88 06 F6 | 	mov	local03, #9
0e09c                 | '         r =  9 ;
0e09c                 | '         break;
0e09c     1C 00 90 FD | 	jmp	#LR__0862
0e0a0                 | LR__0851
0e0a0     07 88 06 F6 | 	mov	local03, #7
0e0a4                 | '         r =  7 ;
0e0a4                 | '         break;
0e0a4     14 00 90 FD | 	jmp	#LR__0862
0e0a8                 | LR__0852
0e0a8                 | LR__0853
0e0a8                 | LR__0854
0e0a8                 | LR__0855
0e0a8                 | LR__0856
0e0a8     0A 88 06 F6 | 	mov	local03, #10
0e0ac                 | '         r =  10 ;
0e0ac                 | '         break;
0e0ac     0C 00 90 FD | 	jmp	#LR__0862
0e0b0                 | LR__0857
0e0b0     0B 88 06 F6 | 	mov	local03, #11
0e0b4                 | '         r =  11 ;
0e0b4                 | '         break;
0e0b4     04 00 90 FD | 	jmp	#LR__0862
0e0b8                 | LR__0858
0e0b8                 | LR__0859
0e0b8                 | LR__0860
0e0b8                 | LR__0861
0e0b8     0C 88 06 F6 | 	mov	local03, #12
0e0bc                 | '         r =  12 ;
0e0bc                 | '         break;
0e0bc                 | LR__0862
0e0bc                 | '     }
0e0bc                 | '     return _seterror(r);
0e0bc     01 00 00 FF 
0e0c0     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e0c4     0A 89 62 FC | 	wrlong	local03, ptr___system__dat__
0e0c8     01 00 00 FF 
0e0cc     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e0d0     00 88 0E F2 | 	cmp	local03, #0 wz
0e0d4     01 30 66 56 |  if_ne	neg	result1, #1
0e0d8     00 30 06 A6 |  if_e	mov	result1, #0
0e0dc     AF F0 03 F6 | 	mov	ptra, fp
0e0e0     BF 00 A0 FD | 	call	#popregs_
0e0e4                 | _ff_cc__set_dos_error_0498_ret
0e0e4     2D 00 64 FD | 	ret
0e0e8                 | 
0e0e8                 | _ff_cc_v_creat_0502
0e0e8     04 5A 05 F6 | 	mov	COUNT_, #4
0e0ec     B0 00 A0 FD | 	call	#pushregs_
0e0f0     3B 85 02 F6 | 	mov	local01, arg01
0e0f4     3C 87 02 F6 | 	mov	local02, arg02
0e0f8     02 00 00 FF 
0e0fc     34 76 06 F6 | 	mov	arg01, ##1076
0e100                 | '     return _gc_alloc(size);
0e100     10 78 06 F6 | 	mov	arg02, #16
0e104     A4 94 BF FD | 	call	#__system___gc_doalloc
0e108     18 89 0A F6 | 	mov	local03, result1 wz
0e10c     1C 00 90 5D |  if_ne	jmp	#LR__0863
0e110                 | '       return _seterror( 7 );
0e110     01 00 00 FF 
0e114     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e118     0A 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0e11c     01 00 00 FF 
0e120     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e124     01 30 66 F6 | 	neg	result1, #1
0e128     58 00 90 FD | 	jmp	#LR__0865
0e12c                 | LR__0863
0e12c     44 77 02 F6 | 	mov	arg01, local03
0e130     00 78 06 F6 | 	mov	arg02, #0
0e134     02 00 00 FF 
0e138     34 7A 06 F6 | 	mov	arg03, ##1076
0e13c     C0 10 B0 FD | 	call	#_ff_cc_memset
0e140     02 00 00 FF 
0e144     0C 88 06 F1 | 	add	local03, ##1036
0e148     44 77 02 F6 | 	mov	arg01, local03
0e14c     02 00 00 FF 
0e150     0C 88 86 F1 | 	sub	local03, ##1036
0e154     43 79 02 F6 | 	mov	arg02, local02
0e158     07 7A 06 F6 | 	mov	arg03, #7
0e15c     A4 D1 BF FD | 	call	#_ff_cc_f_open
0e160     18 8B 0A F6 | 	mov	local04, result1 wz
0e164     14 00 90 AD |  if_e	jmp	#LR__0864
0e168     44 77 02 F6 | 	mov	arg01, local03
0e16c                 | '     return _gc_free(ptr);
0e16c     74 95 BF FD | 	call	#__system___gc_free
0e170                 | '     free(f);
0e170                 | '     return _set_dos_error(r);
0e170     45 77 02 F6 | 	mov	arg01, local04
0e174     9C FE BF FD | 	call	#_ff_cc__set_dos_error_0498
0e178     08 00 90 FD | 	jmp	#LR__0865
0e17c                 | LR__0864
0e17c     42 89 62 FC | 	wrlong	local03, local01
0e180                 | '   }
0e180                 | '   fil->vfsdata = f;
0e180                 | '   return 0;
0e180     00 30 06 F6 | 	mov	result1, #0
0e184                 | LR__0865
0e184     AF F0 03 F6 | 	mov	ptra, fp
0e188     BF 00 A0 FD | 	call	#popregs_
0e18c                 | _ff_cc_v_creat_0502_ret
0e18c     2D 00 64 FD | 	ret
0e190                 | 
0e190                 | _ff_cc_v_close_0505
0e190     02 5A 05 F6 | 	mov	COUNT_, #2
0e194     B0 00 A0 FD | 	call	#pushregs_
0e198     3B 85 02 FB | 	rdlong	local01, arg01
0e19c     02 00 00 FF 
0e1a0     0C 84 06 F1 | 	add	local01, ##1036
0e1a4     42 77 02 F6 | 	mov	arg01, local01
0e1a8     02 00 00 FF 
0e1ac     0C 84 86 F1 | 	sub	local01, ##1036
0e1b0     B4 E8 BF FD | 	call	#_ff_cc_f_close
0e1b4     18 87 02 F6 | 	mov	local02, result1
0e1b8     42 77 02 F6 | 	mov	arg01, local01
0e1bc                 | '     return _gc_free(ptr);
0e1bc     24 95 BF FD | 	call	#__system___gc_free
0e1c0                 | '     FAT_FIL *f = fil->vfsdata;
0e1c0                 | '     r=f_close(&f->fil);
0e1c0                 | '     free(f);
0e1c0                 | '     return _set_dos_error(r);
0e1c0     43 77 02 F6 | 	mov	arg01, local02
0e1c4     4C FE BF FD | 	call	#_ff_cc__set_dos_error_0498
0e1c8     AF F0 03 F6 | 	mov	ptra, fp
0e1cc     BF 00 A0 FD | 	call	#popregs_
0e1d0                 | _ff_cc_v_close_0505_ret
0e1d0     2D 00 64 FD | 	ret
0e1d4                 | 
0e1d4                 | _ff_cc_v_opendir_0508
0e1d4     04 5A 05 F6 | 	mov	COUNT_, #4
0e1d8     B0 00 A0 FD | 	call	#pushregs_
0e1dc     3B 85 02 F6 | 	mov	local01, arg01
0e1e0     3C 87 02 F6 | 	mov	local02, arg02
0e1e4     2C 76 06 F6 | 	mov	arg01, #44
0e1e8                 | '     return _gc_alloc(size);
0e1e8     10 78 06 F6 | 	mov	arg02, #16
0e1ec     BC 93 BF FD | 	call	#__system___gc_doalloc
0e1f0     18 89 0A F6 | 	mov	local03, result1 wz
0e1f4     1C 00 90 5D |  if_ne	jmp	#LR__0866
0e1f8                 | ' #line 6955 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0e1f8                 | '       return _seterror( 7 );
0e1f8     01 00 00 FF 
0e1fc     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e200     0A 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0e204     01 00 00 FF 
0e208     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e20c     01 30 66 F6 | 	neg	result1, #1
0e210     34 00 90 FD | 	jmp	#LR__0868
0e214                 | LR__0866
0e214     44 77 02 F6 | 	mov	arg01, local03
0e218     43 79 02 F6 | 	mov	arg02, local02
0e21c     04 EF BF FD | 	call	#_ff_cc_f_opendir
0e220     18 8B 0A F6 | 	mov	local04, result1 wz
0e224     14 00 90 AD |  if_e	jmp	#LR__0867
0e228     44 77 02 F6 | 	mov	arg01, local03
0e22c                 | '     return _gc_free(ptr);
0e22c     B4 94 BF FD | 	call	#__system___gc_free
0e230                 | '         free(f);
0e230                 | '         return _set_dos_error(r);
0e230     45 77 02 F6 | 	mov	arg01, local04
0e234     DC FD BF FD | 	call	#_ff_cc__set_dos_error_0498
0e238     0C 00 90 FD | 	jmp	#LR__0868
0e23c                 | LR__0867
0e23c     04 84 06 F1 | 	add	local01, #4
0e240     42 89 62 FC | 	wrlong	local03, local01
0e244                 | '     }
0e244                 | '     dir->vfsdata = f;
0e244                 | '     return 0;
0e244     00 30 06 F6 | 	mov	result1, #0
0e248                 | LR__0868
0e248     AF F0 03 F6 | 	mov	ptra, fp
0e24c     BF 00 A0 FD | 	call	#popregs_
0e250                 | _ff_cc_v_opendir_0508_ret
0e250     2D 00 64 FD | 	ret
0e254                 | 
0e254                 | _ff_cc_v_closedir_0511
0e254     02 5A 05 F6 | 	mov	COUNT_, #2
0e258     B0 00 A0 FD | 	call	#pushregs_
0e25c     04 76 06 F1 | 	add	arg01, #4
0e260     3B 85 02 FB | 	rdlong	local01, arg01
0e264     42 77 02 F6 | 	mov	arg01, local01
0e268     78 F0 BF FD | 	call	#_ff_cc_f_closedir
0e26c     18 87 02 F6 | 	mov	local02, result1
0e270     42 77 02 F6 | 	mov	arg01, local01
0e274                 | '     return _gc_free(ptr);
0e274     6C 94 BF FD | 	call	#__system___gc_free
0e278     00 86 0E F2 | 	cmp	local02, #0 wz
0e27c     08 00 90 AD |  if_e	jmp	#LR__0869
0e280     43 77 02 F6 | 	mov	arg01, local02
0e284     8C FD BF FD | 	call	#_ff_cc__set_dos_error_0498
0e288                 | LR__0869
0e288                 | '     return r;
0e288     43 31 02 F6 | 	mov	result1, local02
0e28c     AF F0 03 F6 | 	mov	ptra, fp
0e290     BF 00 A0 FD | 	call	#popregs_
0e294                 | _ff_cc_v_closedir_0511_ret
0e294     2D 00 64 FD | 	ret
0e298                 | 
0e298                 | _ff_cc_v_readdir_0514
0e298     02 5A 05 F6 | 	mov	COUNT_, #2
0e29c     B0 00 A0 FD | 	call	#pushregs_
0e2a0     2C F0 07 F1 | 	add	ptra, #44
0e2a4     04 5E 05 F1 | 	add	fp, #4
0e2a8     AF 76 62 FC | 	wrlong	arg01, fp
0e2ac     04 5E 05 F1 | 	add	fp, #4
0e2b0     AF 78 62 FC | 	wrlong	arg02, fp
0e2b4     04 5E 85 F1 | 	sub	fp, #4
0e2b8     AF 84 02 FB | 	rdlong	local01, fp
0e2bc     04 84 06 F1 | 	add	local01, #4
0e2c0     42 77 02 FB | 	rdlong	arg01, local01
0e2c4     08 5E 05 F1 | 	add	fp, #8
0e2c8     AF 78 02 F6 | 	mov	arg02, fp
0e2cc     0C 5E 85 F1 | 	sub	fp, #12
0e2d0     74 F0 BF FD | 	call	#_ff_cc_f_readdir
0e2d4     18 87 02 F6 | 	mov	local02, result1
0e2d8     28 5E 05 F1 | 	add	fp, #40
0e2dc     AF 86 62 FC | 	wrlong	local02, fp
0e2e0     AF 84 0A FB | 	rdlong	local01, fp wz
0e2e4     28 5E 85 F1 | 	sub	fp, #40
0e2e8     14 00 90 AD |  if_e	jmp	#LR__0870
0e2ec                 | '         return _set_dos_error(r);
0e2ec     28 5E 05 F1 | 	add	fp, #40
0e2f0     AF 76 02 FB | 	rdlong	arg01, fp
0e2f4     28 5E 85 F1 | 	sub	fp, #40
0e2f8     18 FD BF FD | 	call	#_ff_cc__set_dos_error_0498
0e2fc     34 00 90 FD | 	jmp	#LR__0871
0e300                 | LR__0870
0e300     18 5E 05 F1 | 	add	fp, #24
0e304     AF 84 C2 FA | 	rdbyte	local01, fp
0e308     18 5E 85 F1 | 	sub	fp, #24
0e30c     07 84 4E F7 | 	zerox	local01, #7 wz
0e310                 | '         return -1;
0e310     01 30 66 A6 |  if_e	neg	result1, #1
0e314     1C 00 90 AD |  if_e	jmp	#LR__0871
0e318     08 5E 05 F1 | 	add	fp, #8
0e31c     AF 76 02 FB | 	rdlong	arg01, fp
0e320     10 5E 05 F1 | 	add	fp, #16
0e324     AF 78 02 F6 | 	mov	arg02, fp
0e328     18 5E 85 F1 | 	sub	fp, #24
0e32c     9C 0E B0 FD | 	call	#_ff_cc_strcpy
0e330                 | '     }
0e330                 | ' 
0e330                 | ' 
0e330                 | ' 
0e330                 | ' 
0e330                 | '     strcpy(ent->d_name, finfo.fname);
0e330                 | ' 
0e330                 | '     return 0;
0e330     00 30 06 F6 | 	mov	result1, #0
0e334                 | LR__0871
0e334     AF F0 03 F6 | 	mov	ptra, fp
0e338     BF 00 A0 FD | 	call	#popregs_
0e33c                 | _ff_cc_v_readdir_0514_ret
0e33c     2D 00 64 FD | 	ret
0e340                 | 
0e340                 | _ff_cc_unixtime_0522
0e340     3C 37 02 F6 | 	mov	_var01, arg02
0e344     0B 36 46 F0 | 	shr	_var01, #11
0e348     1F 36 06 F5 | 	and	_var01, #31
0e34c     3C 39 02 F6 | 	mov	_var02, arg02
0e350     05 38 46 F0 | 	shr	_var02, #5
0e354     3F 38 06 F5 | 	and	_var02, #63
0e358     1F 78 06 F5 | 	and	arg02, #31
0e35c     01 78 66 F0 | 	shl	arg02, #1
0e360     1C 3B 02 F6 | 	mov	_var03, _var02
0e364     04 3A 66 F0 | 	shl	_var03, #4
0e368     1C 3B 82 F1 | 	sub	_var03, _var02
0e36c     02 3A 66 F0 | 	shl	_var03, #2
0e370     1D 79 02 F1 | 	add	arg02, _var03
0e374     07 00 00 FF 
0e378     10 36 06 FD | 	qmul	_var01, ##3600
0e37c     18 3C 62 FD | 	getqx	_var04
0e380     1E 79 02 F1 | 	add	arg02, _var04
0e384                 | ' 
0e384                 | '     t = second + minute*60 + hour * 3600;
0e384                 | '     return t;
0e384     3C 31 02 F6 | 	mov	result1, arg02
0e388                 | _ff_cc_unixtime_0522_ret
0e388     2D 00 64 FD | 	ret
0e38c                 | 
0e38c                 | _ff_cc_v_stat_0526
0e38c     08 5A 05 F6 | 	mov	COUNT_, #8
0e390     B0 00 A0 FD | 	call	#pushregs_
0e394     30 F0 07 F1 | 	add	ptra, #48
0e398     04 5E 05 F1 | 	add	fp, #4
0e39c     AF 76 62 FC | 	wrlong	arg01, fp
0e3a0     04 5E 05 F1 | 	add	fp, #4
0e3a4     AF 78 62 FC | 	wrlong	arg02, fp
0e3a8     3C 77 02 F6 | 	mov	arg01, arg02
0e3ac     08 5E 85 F1 | 	sub	fp, #8
0e3b0     00 78 06 F6 | 	mov	arg02, #0
0e3b4     30 7A 06 F6 | 	mov	arg03, #48
0e3b8     44 0E B0 FD | 	call	#_ff_cc_memset
0e3bc     04 5E 05 F1 | 	add	fp, #4
0e3c0     AF 84 02 FB | 	rdlong	local01, fp
0e3c4     04 5E 85 F1 | 	sub	fp, #4
0e3c8     42 87 CA FA | 	rdbyte	local02, local01 wz
0e3cc     30 00 90 AD |  if_e	jmp	#LR__0872
0e3d0     04 5E 05 F1 | 	add	fp, #4
0e3d4     AF 88 02 FB | 	rdlong	local03, fp
0e3d8     04 5E 85 F1 | 	sub	fp, #4
0e3dc     44 8B C2 FA | 	rdbyte	local04, local03
0e3e0     2E 8A 0E F2 | 	cmp	local04, #46 wz
0e3e4     30 00 90 5D |  if_ne	jmp	#LR__0873
0e3e8     04 5E 05 F1 | 	add	fp, #4
0e3ec     AF 8C 02 FB | 	rdlong	local05, fp
0e3f0     04 5E 85 F1 | 	sub	fp, #4
0e3f4     01 8C 06 F1 | 	add	local05, #1
0e3f8     46 8F CA FA | 	rdbyte	local06, local05 wz
0e3fc     18 00 90 5D |  if_ne	jmp	#LR__0873
0e400                 | LR__0872
0e400     18 5E 05 F1 | 	add	fp, #24
0e404     AF 20 48 FC | 	wrbyte	#16, fp
0e408     0C 5E 85 F1 | 	sub	fp, #12
0e40c     AF 00 68 FC | 	wrlong	#0, fp
0e410     0C 5E 85 F1 | 	sub	fp, #12
0e414     24 00 90 FD | 	jmp	#LR__0874
0e418                 | LR__0873
0e418     04 5E 05 F1 | 	add	fp, #4
0e41c     AF 76 02 FB | 	rdlong	arg01, fp
0e420     0C 5E 05 F1 | 	add	fp, #12
0e424     AF 78 02 F6 | 	mov	arg02, fp
0e428     10 5E 85 F1 | 	sub	fp, #16
0e42c     38 F0 BF FD | 	call	#_ff_cc_f_stat
0e430     0C 5E 05 F1 | 	add	fp, #12
0e434     AF 30 62 FC | 	wrlong	result1, fp
0e438     0C 5E 85 F1 | 	sub	fp, #12
0e43c                 | LR__0874
0e43c     0C 5E 05 F1 | 	add	fp, #12
0e440     AF 86 0A FB | 	rdlong	local02, fp wz
0e444     0C 5E 85 F1 | 	sub	fp, #12
0e448     14 00 90 AD |  if_e	jmp	#LR__0875
0e44c                 | '         return _set_dos_error(r);
0e44c     0C 5E 05 F1 | 	add	fp, #12
0e450     AF 76 02 FB | 	rdlong	arg01, fp
0e454     0C 5E 85 F1 | 	sub	fp, #12
0e458     B8 FB BF FD | 	call	#_ff_cc__set_dos_error_0498
0e45c     24 01 90 FD | 	jmp	#LR__0878
0e460                 | LR__0875
0e460     2C 5E 05 F1 | 	add	fp, #44
0e464     AF 48 6A FC | 	wrlong	#292, fp
0e468     14 5E 85 F1 | 	sub	fp, #20
0e46c     AF 86 C2 FA | 	rdbyte	local02, fp
0e470     18 5E 85 F1 | 	sub	fp, #24
0e474     07 86 46 F7 | 	zerox	local02, #7
0e478     01 86 CE F7 | 	test	local02, #1 wz
0e47c     14 00 90 AD |  if_e	jmp	#LR__0876
0e480     2C 5E 05 F1 | 	add	fp, #44
0e484     AF 86 02 FB | 	rdlong	local02, fp
0e488     92 86 46 F5 | 	or	local02, #146
0e48c     AF 86 62 FC | 	wrlong	local02, fp
0e490     2C 5E 85 F1 | 	sub	fp, #44
0e494                 | LR__0876
0e494     18 5E 05 F1 | 	add	fp, #24
0e498     AF 86 C2 FA | 	rdbyte	local02, fp
0e49c     18 5E 85 F1 | 	sub	fp, #24
0e4a0     07 86 46 F7 | 	zerox	local02, #7
0e4a4     10 86 CE F7 | 	test	local02, #16 wz
0e4a8     18 00 90 AD |  if_e	jmp	#LR__0877
0e4ac     2C 5E 05 F1 | 	add	fp, #44
0e4b0     AF 86 02 FB | 	rdlong	local02, fp
0e4b4     08 00 00 FF 
0e4b8     49 86 46 F5 | 	or	local02, ##4169
0e4bc     AF 86 62 FC | 	wrlong	local02, fp
0e4c0     2C 5E 85 F1 | 	sub	fp, #44
0e4c4                 | LR__0877
0e4c4     08 5E 05 F1 | 	add	fp, #8
0e4c8     AF 86 02 FB | 	rdlong	local02, fp
0e4cc     24 5E 05 F1 | 	add	fp, #36
0e4d0     AF 90 02 FB | 	rdlong	local07, fp
0e4d4     08 86 06 F1 | 	add	local02, #8
0e4d8     43 91 62 FC | 	wrlong	local07, local02
0e4dc     24 5E 85 F1 | 	sub	fp, #36
0e4e0     AF 86 02 FB | 	rdlong	local02, fp
0e4e4     0C 86 06 F1 | 	add	local02, #12
0e4e8     43 03 68 FC | 	wrlong	#1, local02
0e4ec     AF 86 02 FB | 	rdlong	local02, fp
0e4f0     08 5E 05 F1 | 	add	fp, #8
0e4f4     AF 90 02 FB | 	rdlong	local07, fp
0e4f8     18 86 06 F1 | 	add	local02, #24
0e4fc     43 91 62 FC | 	wrlong	local07, local02
0e500     08 5E 85 F1 | 	sub	fp, #8
0e504     AF 86 02 FB | 	rdlong	local02, fp
0e508     1C 86 06 F1 | 	add	local02, #28
0e50c     01 00 80 FF 
0e510     43 01 68 FC | 	wrlong	##512, local02
0e514     AF 86 02 FB | 	rdlong	local02, fp
0e518     43 91 02 F6 | 	mov	local07, local02
0e51c     18 90 06 F1 | 	add	local07, #24
0e520     48 93 02 FB | 	rdlong	local08, local07
0e524     49 89 52 F6 | 	abs	local03, local08 wc
0e528     09 88 46 F0 | 	shr	local03, #9
0e52c     44 89 62 C6 |  if_b	neg	local03, local03
0e530     20 86 06 F1 | 	add	local02, #32
0e534     43 89 62 FC | 	wrlong	local03, local02
0e538     AF 86 02 FB | 	rdlong	local02, fp
0e53c     43 91 02 F6 | 	mov	local07, local02
0e540     43 89 02 F6 | 	mov	local03, local02
0e544     0C 5E 05 F1 | 	add	fp, #12
0e548     AF 76 E2 FA | 	rdword	arg01, fp
0e54c     02 5E 05 F1 | 	add	fp, #2
0e550     AF 78 E2 FA | 	rdword	arg02, fp
0e554     16 5E 85 F1 | 	sub	fp, #22
0e558     0F 78 46 F7 | 	zerox	arg02, #15
0e55c     E0 FD BF FD | 	call	#_ff_cc_unixtime_0522
0e560     2C 88 06 F1 | 	add	local03, #44
0e564     44 31 62 FC | 	wrlong	result1, local03
0e568     28 90 06 F1 | 	add	local07, #40
0e56c     48 31 62 FC | 	wrlong	result1, local07
0e570     24 86 06 F1 | 	add	local02, #36
0e574     43 31 62 FC | 	wrlong	result1, local02
0e578                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
0e578                 | '     }
0e578                 | '     buf->st_mode = mode;
0e578                 | '     buf->st_nlink = 1;
0e578                 | '     buf->st_size = finfo.fsize;
0e578                 | '     buf->st_blksize = 512;
0e578                 | '     buf->st_blocks = buf->st_size / 512;
0e578                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
0e578                 | ' #line 7053 "C:/Users/Piotr/Downloads/flexprop5.9.6/flexprop/include/filesys/fatfs/ff.cc"
0e578                 | '     return r;
0e578     0C 5E 05 F1 | 	add	fp, #12
0e57c     AF 30 02 FB | 	rdlong	result1, fp
0e580     0C 5E 85 F1 | 	sub	fp, #12
0e584                 | LR__0878
0e584     AF F0 03 F6 | 	mov	ptra, fp
0e588     BF 00 A0 FD | 	call	#popregs_
0e58c                 | _ff_cc_v_stat_0526_ret
0e58c     2D 00 64 FD | 	ret
0e590                 | 
0e590                 | _ff_cc_v_read_0530
0e590     04 5A 05 F6 | 	mov	COUNT_, #4
0e594     B0 00 A0 FD | 	call	#pushregs_
0e598     1C F0 07 F1 | 	add	ptra, #28
0e59c     04 5E 05 F1 | 	add	fp, #4
0e5a0     AF 76 62 FC | 	wrlong	arg01, fp
0e5a4     04 5E 05 F1 | 	add	fp, #4
0e5a8     AF 78 62 FC | 	wrlong	arg02, fp
0e5ac     04 5E 05 F1 | 	add	fp, #4
0e5b0     AF 7A 62 FC | 	wrlong	arg03, fp
0e5b4     08 5E 85 F1 | 	sub	fp, #8
0e5b8     AF 84 02 FB | 	rdlong	local01, fp
0e5bc     42 87 02 FB | 	rdlong	local02, local01
0e5c0     0C 5E 05 F1 | 	add	fp, #12
0e5c4     AF 86 62 FC | 	wrlong	local02, fp
0e5c8     AF 84 0A FB | 	rdlong	local01, fp wz
0e5cc     10 5E 85 F1 | 	sub	fp, #16
0e5d0     1C 00 90 5D |  if_ne	jmp	#LR__0879
0e5d4                 | '         return _seterror( 5 );
0e5d4     01 00 00 FF 
0e5d8     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e5dc     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0e5e0     01 00 00 FF 
0e5e4     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e5e8     01 30 66 F6 | 	neg	result1, #1
0e5ec     BC 00 90 FD | 	jmp	#LR__0882
0e5f0                 | LR__0879
0e5f0     10 5E 05 F1 | 	add	fp, #16
0e5f4     AF 76 02 FB | 	rdlong	arg01, fp
0e5f8     02 00 00 FF 
0e5fc     0C 76 06 F1 | 	add	arg01, ##1036
0e600     08 5E 85 F1 | 	sub	fp, #8
0e604     AF 78 02 FB | 	rdlong	arg02, fp
0e608     04 5E 05 F1 | 	add	fp, #4
0e60c     AF 7A 02 FB | 	rdlong	arg03, fp
0e610     0C 5E 05 F1 | 	add	fp, #12
0e614     AF 7C 02 F6 | 	mov	arg04, fp
0e618     18 5E 85 F1 | 	sub	fp, #24
0e61c     24 D4 BF FD | 	call	#_ff_cc_f_read
0e620     18 89 02 F6 | 	mov	local03, result1
0e624     14 5E 05 F1 | 	add	fp, #20
0e628     AF 88 62 FC | 	wrlong	local03, fp
0e62c     AF 84 0A FB | 	rdlong	local01, fp wz
0e630     14 5E 85 F1 | 	sub	fp, #20
0e634     34 00 90 AD |  if_e	jmp	#LR__0880
0e638     04 5E 05 F1 | 	add	fp, #4
0e63c     AF 84 02 FB | 	rdlong	local01, fp
0e640     42 8B 02 F6 | 	mov	local04, local01
0e644     08 8A 06 F1 | 	add	local04, #8
0e648     45 87 02 FB | 	rdlong	local02, local04
0e64c     20 86 46 F5 | 	or	local02, #32
0e650     08 84 06 F1 | 	add	local01, #8
0e654     42 87 62 FC | 	wrlong	local02, local01
0e658                 | '         fil->state |=  (0x20) ;
0e658                 | '         return _set_dos_error(r);
0e658     10 5E 05 F1 | 	add	fp, #16
0e65c     AF 76 02 FB | 	rdlong	arg01, fp
0e660     14 5E 85 F1 | 	sub	fp, #20
0e664     AC F9 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e668     40 00 90 FD | 	jmp	#LR__0882
0e66c                 | LR__0880
0e66c     18 5E 05 F1 | 	add	fp, #24
0e670     AF 84 0A FB | 	rdlong	local01, fp wz
0e674     18 5E 85 F1 | 	sub	fp, #24
0e678     24 00 90 5D |  if_ne	jmp	#LR__0881
0e67c     04 5E 05 F1 | 	add	fp, #4
0e680     AF 84 02 FB | 	rdlong	local01, fp
0e684     42 8B 02 F6 | 	mov	local04, local01
0e688     04 5E 85 F1 | 	sub	fp, #4
0e68c     08 8A 06 F1 | 	add	local04, #8
0e690     45 87 02 FB | 	rdlong	local02, local04
0e694     10 86 46 F5 | 	or	local02, #16
0e698     08 84 06 F1 | 	add	local01, #8
0e69c     42 87 62 FC | 	wrlong	local02, local01
0e6a0                 | LR__0881
0e6a0                 | '         fil->state |=  (0x10) ;
0e6a0                 | '     }
0e6a0                 | '     return x;
0e6a0     18 5E 05 F1 | 	add	fp, #24
0e6a4     AF 30 02 FB | 	rdlong	result1, fp
0e6a8     18 5E 85 F1 | 	sub	fp, #24
0e6ac                 | LR__0882
0e6ac     AF F0 03 F6 | 	mov	ptra, fp
0e6b0     BF 00 A0 FD | 	call	#popregs_
0e6b4                 | _ff_cc_v_read_0530_ret
0e6b4     2D 00 64 FD | 	ret
0e6b8                 | 
0e6b8                 | _ff_cc_v_write_0534
0e6b8     04 5A 05 F6 | 	mov	COUNT_, #4
0e6bc     B0 00 A0 FD | 	call	#pushregs_
0e6c0     1C F0 07 F1 | 	add	ptra, #28
0e6c4     04 5E 05 F1 | 	add	fp, #4
0e6c8     AF 76 62 FC | 	wrlong	arg01, fp
0e6cc     04 5E 05 F1 | 	add	fp, #4
0e6d0     AF 78 62 FC | 	wrlong	arg02, fp
0e6d4     04 5E 05 F1 | 	add	fp, #4
0e6d8     AF 7A 62 FC | 	wrlong	arg03, fp
0e6dc     08 5E 85 F1 | 	sub	fp, #8
0e6e0     AF 84 02 FB | 	rdlong	local01, fp
0e6e4     42 87 02 FB | 	rdlong	local02, local01
0e6e8     0C 5E 05 F1 | 	add	fp, #12
0e6ec     AF 86 62 FC | 	wrlong	local02, fp
0e6f0     AF 84 0A FB | 	rdlong	local01, fp wz
0e6f4     10 5E 85 F1 | 	sub	fp, #16
0e6f8     1C 00 90 5D |  if_ne	jmp	#LR__0883
0e6fc                 | '         return _seterror( 5 );
0e6fc     01 00 00 FF 
0e700     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e704     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0e708     01 00 00 FF 
0e70c     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e710     01 30 66 F6 | 	neg	result1, #1
0e714     88 00 90 FD | 	jmp	#LR__0885
0e718                 | LR__0883
0e718     10 5E 05 F1 | 	add	fp, #16
0e71c     AF 76 02 FB | 	rdlong	arg01, fp
0e720     02 00 00 FF 
0e724     0C 76 06 F1 | 	add	arg01, ##1036
0e728     08 5E 85 F1 | 	sub	fp, #8
0e72c     AF 78 02 FB | 	rdlong	arg02, fp
0e730     04 5E 05 F1 | 	add	fp, #4
0e734     AF 7A 02 FB | 	rdlong	arg03, fp
0e738     0C 5E 05 F1 | 	add	fp, #12
0e73c     AF 7C 02 F6 | 	mov	arg04, fp
0e740     18 5E 85 F1 | 	sub	fp, #24
0e744     48 D9 BF FD | 	call	#_ff_cc_f_write
0e748     18 89 02 F6 | 	mov	local03, result1
0e74c     14 5E 05 F1 | 	add	fp, #20
0e750     AF 88 62 FC | 	wrlong	local03, fp
0e754     AF 84 0A FB | 	rdlong	local01, fp wz
0e758     14 5E 85 F1 | 	sub	fp, #20
0e75c     34 00 90 AD |  if_e	jmp	#LR__0884
0e760     04 5E 05 F1 | 	add	fp, #4
0e764     AF 84 02 FB | 	rdlong	local01, fp
0e768     42 8B 02 F6 | 	mov	local04, local01
0e76c     08 8A 06 F1 | 	add	local04, #8
0e770     45 87 02 FB | 	rdlong	local02, local04
0e774     20 86 46 F5 | 	or	local02, #32
0e778     08 84 06 F1 | 	add	local01, #8
0e77c     42 87 62 FC | 	wrlong	local02, local01
0e780                 | '         fil->state |=  (0x20) ;
0e780                 | '         return _set_dos_error(r);
0e780     10 5E 05 F1 | 	add	fp, #16
0e784     AF 76 02 FB | 	rdlong	arg01, fp
0e788     14 5E 85 F1 | 	sub	fp, #20
0e78c     84 F8 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e790     0C 00 90 FD | 	jmp	#LR__0885
0e794                 | LR__0884
0e794                 | '     }
0e794                 | '     return x;
0e794     18 5E 05 F1 | 	add	fp, #24
0e798     AF 30 02 FB | 	rdlong	result1, fp
0e79c     18 5E 85 F1 | 	sub	fp, #24
0e7a0                 | LR__0885
0e7a0     AF F0 03 F6 | 	mov	ptra, fp
0e7a4     BF 00 A0 FD | 	call	#popregs_
0e7a8                 | _ff_cc_v_write_0534_ret
0e7a8     2D 00 64 FD | 	ret
0e7ac                 | 
0e7ac                 | _ff_cc_v_lseek_0538
0e7ac     05 5A 05 F6 | 	mov	COUNT_, #5
0e7b0     B0 00 A0 FD | 	call	#pushregs_
0e7b4     3C 85 02 F6 | 	mov	local01, arg02
0e7b8     3D 87 02 F6 | 	mov	local02, arg03
0e7bc     3B 89 02 FB | 	rdlong	local03, arg01
0e7c0     02 00 00 FF 
0e7c4     0C 88 0E F1 | 	add	local03, ##1036 wz
0e7c8     1C 00 90 5D |  if_ne	jmp	#LR__0886
0e7cc                 | '         return _seterror( 5 );
0e7cc     01 00 00 FF 
0e7d0     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e7d4     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0e7d8     01 00 00 FF 
0e7dc     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e7e0     01 30 66 F6 | 	neg	result1, #1
0e7e4     58 00 90 FD | 	jmp	#LR__0891
0e7e8                 | LR__0886
0e7e8     00 86 0E F2 | 	cmp	local02, #0 wz
0e7ec     2C 00 90 AD |  if_e	jmp	#LR__0889
0e7f0     01 86 0E F2 | 	cmp	local02, #1 wz
0e7f4     14 00 90 5D |  if_ne	jmp	#LR__0887
0e7f8     14 88 06 F1 | 	add	local03, #20
0e7fc     44 8B 02 FB | 	rdlong	local04, local03
0e800     14 88 86 F1 | 	sub	local03, #20
0e804     45 85 02 F1 | 	add	local01, local04
0e808     10 00 90 FD | 	jmp	#LR__0888
0e80c                 | LR__0887
0e80c     0C 88 06 F1 | 	add	local03, #12
0e810     44 8B 02 FB | 	rdlong	local04, local03
0e814     0C 88 86 F1 | 	sub	local03, #12
0e818     45 85 02 F1 | 	add	local01, local04
0e81c                 | LR__0888
0e81c                 | LR__0889
0e81c     44 77 02 F6 | 	mov	arg01, local03
0e820     42 79 02 F6 | 	mov	arg02, local01
0e824     C8 E2 BF FD | 	call	#_ff_cc_f_lseek
0e828     18 8D 0A F6 | 	mov	local05, result1 wz
0e82c     0C 00 90 AD |  if_e	jmp	#LR__0890
0e830                 | '         return _set_dos_error(result);
0e830     46 77 02 F6 | 	mov	arg01, local05
0e834     DC F7 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e838     04 00 90 FD | 	jmp	#LR__0891
0e83c                 | LR__0890
0e83c                 | '     }
0e83c                 | '     return offset;
0e83c     42 31 02 F6 | 	mov	result1, local01
0e840                 | LR__0891
0e840     AF F0 03 F6 | 	mov	ptra, fp
0e844     BF 00 A0 FD | 	call	#popregs_
0e848                 | _ff_cc_v_lseek_0538_ret
0e848     2D 00 64 FD | 	ret
0e84c                 | 
0e84c                 | _ff_cc_v_ioctl
0e84c                 | ' {
0e84c                 | '     return _seterror( 10 );
0e84c     01 00 00 FF 
0e850     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e854     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
0e858     01 00 00 FF 
0e85c     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e860     01 30 66 F6 | 	neg	result1, #1
0e864                 | _ff_cc_v_ioctl_ret
0e864     2D 00 64 FD | 	ret
0e868                 | 
0e868                 | _ff_cc_v_mkdir
0e868     64 EF BF FD | 	call	#_ff_cc_f_mkdir
0e86c     18 77 02 F6 | 	mov	arg01, result1
0e870                 | ' 
0e870                 | '     r = f_mkdir(name);
0e870                 | '     return _set_dos_error(r);
0e870     A0 F7 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e874                 | _ff_cc_v_mkdir_ret
0e874     2D 00 64 FD | 	ret
0e878                 | 
0e878                 | _ff_cc_v_remove
0e878     D4 EC BF FD | 	call	#_ff_cc_f_unlink
0e87c     18 77 02 F6 | 	mov	arg01, result1
0e880                 | ' 
0e880                 | '     r = f_unlink(name);
0e880                 | '     return _set_dos_error(r);
0e880     90 F7 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e884                 | _ff_cc_v_remove_ret
0e884     2D 00 64 FD | 	ret
0e888                 | 
0e888                 | _ff_cc_v_rmdir_0542
0e888     C4 EC BF FD | 	call	#_ff_cc_f_unlink
0e88c     18 77 02 F6 | 	mov	arg01, result1
0e890                 | ' 
0e890                 | '     r = f_unlink(name);
0e890                 | '     return _set_dos_error(r);
0e890     80 F7 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e894                 | _ff_cc_v_rmdir_0542_ret
0e894     2D 00 64 FD | 	ret
0e898                 | 
0e898                 | _ff_cc_v_rename_0544
0e898     94 F2 BF FD | 	call	#_ff_cc_f_rename
0e89c     18 77 02 F6 | 	mov	arg01, result1
0e8a0                 | '     return _set_dos_error(r);
0e8a0     70 F7 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e8a4                 | _ff_cc_v_rename_0544_ret
0e8a4     2D 00 64 FD | 	ret
0e8a8                 | 
0e8a8                 | _ff_cc_v_open_0548
0e8a8     0A 5A 05 F6 | 	mov	COUNT_, #10
0e8ac     B0 00 A0 FD | 	call	#pushregs_
0e8b0     3B 85 02 F6 | 	mov	local01, arg01
0e8b4     3C 87 02 F6 | 	mov	local02, arg02
0e8b8     3D 89 02 F6 | 	mov	local03, arg03
0e8bc     02 00 00 FF 
0e8c0     34 76 06 F6 | 	mov	arg01, ##1076
0e8c4                 | '     return _gc_alloc(size);
0e8c4     10 78 06 F6 | 	mov	arg02, #16
0e8c8     E0 8C BF FD | 	call	#__system___gc_doalloc
0e8cc     18 8B 0A F6 | 	mov	local04, result1 wz
0e8d0     1C 00 90 5D |  if_ne	jmp	#LR__0892
0e8d4                 | '       return _seterror( 7 );
0e8d4     01 00 00 FF 
0e8d8     40 14 06 F1 | 	add	ptr___system__dat__, ##576
0e8dc     0A 0F 68 FC | 	wrlong	#7, ptr___system__dat__
0e8e0     01 00 00 FF 
0e8e4     40 14 86 F1 | 	sub	ptr___system__dat__, ##576
0e8e8     01 30 66 F6 | 	neg	result1, #1
0e8ec     A8 00 90 FD | 	jmp	#LR__0899
0e8f0                 | LR__0892
0e8f0     45 8D 02 F6 | 	mov	local05, local04
0e8f4     00 8E 06 F6 | 	mov	local06, #0
0e8f8     02 00 00 FF 
0e8fc     34 90 06 F6 | 	mov	local07, ##1076
0e900     46 77 02 F6 | 	mov	arg01, local05
0e904     00 78 06 F6 | 	mov	arg02, #0
0e908     02 00 00 FF 
0e90c     34 7A 06 F6 | 	mov	arg03, ##1076
0e910     EC 08 B0 FD | 	call	#_ff_cc_memset
0e914                 | '   switch (flags & 3) {
0e914     44 93 02 F6 | 	mov	local08, local03
0e918     03 92 0E F5 | 	and	local08, #3 wz
0e91c     0C 00 90 AD |  if_e	jmp	#LR__0893
0e920     01 92 0E F2 | 	cmp	local08, #1 wz
0e924     0C 00 90 AD |  if_e	jmp	#LR__0894
0e928     10 00 90 FD | 	jmp	#LR__0895
0e92c                 | LR__0893
0e92c     01 94 06 F6 | 	mov	local09, #1
0e930                 | '       fs_flags =  0x01 ;
0e930                 | '       break;
0e930     0C 00 90 FD | 	jmp	#LR__0896
0e934                 | LR__0894
0e934     02 94 06 F6 | 	mov	local09, #2
0e938                 | '       fs_flags =  0x02 ;
0e938                 | '       break;
0e938     04 00 90 FD | 	jmp	#LR__0896
0e93c                 | LR__0895
0e93c     03 94 06 F6 | 	mov	local09, #3
0e940                 | '       fs_flags =  0x01  |  0x02 ;
0e940                 | '       break;
0e940                 | LR__0896
0e940     08 88 CE F7 | 	test	local03, #8 wz
0e944     18 94 46 55 |  if_ne	or	local09, #24
0e948     08 00 90 5D |  if_ne	jmp	#LR__0897
0e94c     20 88 CE F7 | 	test	local03, #32 wz
0e950     30 94 46 55 |  if_ne	or	local09, #48
0e954                 | LR__0897
0e954     02 00 00 FF 
0e958     0C 8A 06 F1 | 	add	local04, ##1036
0e95c     45 77 02 F6 | 	mov	arg01, local04
0e960     02 00 00 FF 
0e964     0C 8A 86 F1 | 	sub	local04, ##1036
0e968     43 79 02 F6 | 	mov	arg02, local02
0e96c     4A 7B 02 F6 | 	mov	arg03, local09
0e970     90 C9 BF FD | 	call	#_ff_cc_f_open
0e974     18 97 0A F6 | 	mov	local10, result1 wz
0e978     14 00 90 AD |  if_e	jmp	#LR__0898
0e97c     45 77 02 F6 | 	mov	arg01, local04
0e980                 | '     return _gc_free(ptr);
0e980     60 8D BF FD | 	call	#__system___gc_free
0e984                 | '     free(f);
0e984                 | '     return _set_dos_error(r);
0e984     4B 77 02 F6 | 	mov	arg01, local10
0e988     88 F6 BF FD | 	call	#_ff_cc__set_dos_error_0498
0e98c     08 00 90 FD | 	jmp	#LR__0899
0e990                 | LR__0898
0e990     42 8B 62 FC | 	wrlong	local04, local01
0e994                 | '   }
0e994                 | '   fil->vfsdata = f;
0e994                 | '   return 0;
0e994     00 30 06 F6 | 	mov	result1, #0
0e998                 | LR__0899
0e998     AF F0 03 F6 | 	mov	ptra, fp
0e99c     BF 00 A0 FD | 	call	#popregs_
0e9a0                 | _ff_cc_v_open_0548_ret
0e9a0     2D 00 64 FD | 	ret
0e9a4                 | 
0e9a4                 | _ff_cc_xmit_mmc_0705
0e9a4     04 5A 05 F6 | 	mov	COUNT_, #4
0e9a8     B0 00 A0 FD | 	call	#pushregs_
0e9ac     6C 1B 06 F1 | 	add	ptr__ff_cc_dat__, #364
0e9b0     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0e9b4     08 1A 06 F1 | 	add	ptr__ff_cc_dat__, #8
0e9b8     0D 87 02 FB | 	rdlong	local02, ptr__ff_cc_dat__
0e9bc     74 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #372
0e9c0     48 17 9F FE | 	loc	pa,	#(@LR__0901-@LR__0900)
0e9c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
0e9c8                 | ' 
0e9c8                 | ' 	do {
0e9c8                 | LR__0900
0e9c8     3B 89 C2 FA | 	rdbyte	local03, arg01
0e9cc     44 8B 02 F6 | 	mov	local04, local03
0e9d0     07 8A 46 F7 | 	zerox	local04, #7
0e9d4     80 8A CE F7 | 	test	local04, #128 wz
0e9d8     01 76 06 F1 | 	add	arg01, #1
0e9dc     5D 86 62 FD | 	drvnz	local02
0e9e0     59 84 62 FD | 	drvh	local01
0e9e4     1F 20 64 FD | 	waitx	#16
0e9e8     58 84 62 FD | 	drvl	local01
0e9ec     1F 20 64 FD | 	waitx	#16
0e9f0     44 8B 02 F6 | 	mov	local04, local03
0e9f4     07 8A 46 F7 | 	zerox	local04, #7
0e9f8     40 8A CE F7 | 	test	local04, #64 wz
0e9fc     5D 86 62 FD | 	drvnz	local02
0ea00     59 84 62 FD | 	drvh	local01
0ea04     1F 20 64 FD | 	waitx	#16
0ea08     58 84 62 FD | 	drvl	local01
0ea0c     1F 20 64 FD | 	waitx	#16
0ea10     44 8B 02 F6 | 	mov	local04, local03
0ea14     07 8A 46 F7 | 	zerox	local04, #7
0ea18     20 8A CE F7 | 	test	local04, #32 wz
0ea1c     5D 86 62 FD | 	drvnz	local02
0ea20     59 84 62 FD | 	drvh	local01
0ea24     1F 20 64 FD | 	waitx	#16
0ea28     58 84 62 FD | 	drvl	local01
0ea2c     1F 20 64 FD | 	waitx	#16
0ea30     44 8B 02 F6 | 	mov	local04, local03
0ea34     07 8A 46 F7 | 	zerox	local04, #7
0ea38     10 8A CE F7 | 	test	local04, #16 wz
0ea3c     5D 86 62 FD | 	drvnz	local02
0ea40     59 84 62 FD | 	drvh	local01
0ea44     1F 20 64 FD | 	waitx	#16
0ea48     58 84 62 FD | 	drvl	local01
0ea4c     1F 20 64 FD | 	waitx	#16
0ea50     44 8B 02 F6 | 	mov	local04, local03
0ea54     07 8A 46 F7 | 	zerox	local04, #7
0ea58     08 8A CE F7 | 	test	local04, #8 wz
0ea5c     5D 86 62 FD | 	drvnz	local02
0ea60     59 84 62 FD | 	drvh	local01
0ea64     1F 20 64 FD | 	waitx	#16
0ea68     58 84 62 FD | 	drvl	local01
0ea6c     1F 20 64 FD | 	waitx	#16
0ea70     44 8B 02 F6 | 	mov	local04, local03
0ea74     07 8A 46 F7 | 	zerox	local04, #7
0ea78     04 8A CE F7 | 	test	local04, #4 wz
0ea7c     5D 86 62 FD | 	drvnz	local02
0ea80     59 84 62 FD | 	drvh	local01
0ea84     1F 20 64 FD | 	waitx	#16
0ea88     58 84 62 FD | 	drvl	local01
0ea8c     1F 20 64 FD | 	waitx	#16
0ea90     44 8B 02 F6 | 	mov	local04, local03
0ea94     07 8A 46 F7 | 	zerox	local04, #7
0ea98     02 8A CE F7 | 	test	local04, #2 wz
0ea9c     5D 86 62 FD | 	drvnz	local02
0eaa0     59 84 62 FD | 	drvh	local01
0eaa4     1F 20 64 FD | 	waitx	#16
0eaa8     58 84 62 FD | 	drvl	local01
0eaac     1F 20 64 FD | 	waitx	#16
0eab0     07 88 46 F7 | 	zerox	local03, #7
0eab4     01 88 CE F7 | 	test	local03, #1 wz
0eab8     5D 86 62 FD | 	drvnz	local02
0eabc     59 84 62 FD | 	drvh	local01
0eac0     1F 20 64 FD | 	waitx	#16
0eac4     58 84 62 FD | 	drvl	local01
0eac8     1F 20 64 FD | 	waitx	#16
0eacc     01 78 8E F1 | 	sub	arg02, #1 wz
0ead0     F4 FE 9F 5D |  if_ne	jmp	#LR__0900
0ead4                 | LR__0901
0ead4     AF F0 03 F6 | 	mov	ptra, fp
0ead8     BF 00 A0 FD | 	call	#popregs_
0eadc                 | _ff_cc_xmit_mmc_0705_ret
0eadc     2D 00 64 FD | 	ret
0eae0                 | 
0eae0                 | _ff_cc_rcvr_mmc_0711
0eae0     04 5A 05 F6 | 	mov	COUNT_, #4
0eae4     B0 00 A0 FD | 	call	#pushregs_
0eae8     3B 85 02 F6 | 	mov	local01, arg01
0eaec     6C 1B 06 F1 | 	add	ptr__ff_cc_dat__, #364
0eaf0     0D 87 02 FB | 	rdlong	local02, ptr__ff_cc_dat__
0eaf4     08 1A 06 F1 | 	add	ptr__ff_cc_dat__, #8
0eaf8     0D 77 02 FB | 	rdlong	arg01, ptr__ff_cc_dat__
0eafc     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
0eb00     0D 89 02 FB | 	rdlong	local03, ptr__ff_cc_dat__
0eb04     78 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #376
0eb08     59 76 62 FD | 	drvh	arg01
0eb0c     5C 16 9F FE | 	loc	pa,	#(@LR__0903-@LR__0902)
0eb10     93 00 A0 FD | 	call	#FCACHE_LOAD_
0eb14                 | ' 
0eb14                 | ' 	(_pinh(PIN_DI)) ;
0eb14                 | ' 
0eb14                 | ' 	do {
0eb14                 | LR__0902
0eb14     00 8A 06 F6 | 	mov	local04, #0
0eb18     1F 10 64 FD | 	waitx	#8
0eb1c     40 88 72 FD | 	testp	local03 wc
0eb20     6C 30 62 FD | 	wrc	result1
0eb24     01 30 CE F7 | 	test	result1, #1 wz
0eb28     01 8A 06 56 |  if_ne	mov	local04, #1
0eb2c     59 86 62 FD | 	drvh	local02
0eb30     1F 20 64 FD | 	waitx	#16
0eb34     58 86 62 FD | 	drvl	local02
0eb38     1F 20 64 FD | 	waitx	#16
0eb3c     07 8A 46 F7 | 	zerox	local04, #7
0eb40     01 8A 66 F0 | 	shl	local04, #1
0eb44     1F 10 64 FD | 	waitx	#8
0eb48     40 88 72 FD | 	testp	local03 wc
0eb4c     6C 30 62 FD | 	wrc	result1
0eb50     01 30 CE F7 | 	test	result1, #1 wz
0eb54     01 8A 06 51 |  if_ne	add	local04, #1
0eb58     59 86 62 FD | 	drvh	local02
0eb5c     1F 20 64 FD | 	waitx	#16
0eb60     58 86 62 FD | 	drvl	local02
0eb64     1F 20 64 FD | 	waitx	#16
0eb68     07 8A 46 F7 | 	zerox	local04, #7
0eb6c     01 8A 66 F0 | 	shl	local04, #1
0eb70     1F 10 64 FD | 	waitx	#8
0eb74     40 88 72 FD | 	testp	local03 wc
0eb78     6C 30 62 FD | 	wrc	result1
0eb7c     01 30 CE F7 | 	test	result1, #1 wz
0eb80     01 8A 06 51 |  if_ne	add	local04, #1
0eb84     59 86 62 FD | 	drvh	local02
0eb88     1F 20 64 FD | 	waitx	#16
0eb8c     58 86 62 FD | 	drvl	local02
0eb90     1F 20 64 FD | 	waitx	#16
0eb94     07 8A 46 F7 | 	zerox	local04, #7
0eb98     01 8A 66 F0 | 	shl	local04, #1
0eb9c     1F 10 64 FD | 	waitx	#8
0eba0     40 88 72 FD | 	testp	local03 wc
0eba4     6C 30 62 FD | 	wrc	result1
0eba8     01 30 CE F7 | 	test	result1, #1 wz
0ebac     01 8A 06 51 |  if_ne	add	local04, #1
0ebb0     59 86 62 FD | 	drvh	local02
0ebb4     1F 20 64 FD | 	waitx	#16
0ebb8     58 86 62 FD | 	drvl	local02
0ebbc     1F 20 64 FD | 	waitx	#16
0ebc0     07 8A 46 F7 | 	zerox	local04, #7
0ebc4     01 8A 66 F0 | 	shl	local04, #1
0ebc8     1F 10 64 FD | 	waitx	#8
0ebcc     40 88 72 FD | 	testp	local03 wc
0ebd0     6C 30 62 FD | 	wrc	result1
0ebd4     01 30 CE F7 | 	test	result1, #1 wz
0ebd8     01 8A 06 51 |  if_ne	add	local04, #1
0ebdc     59 86 62 FD | 	drvh	local02
0ebe0     1F 20 64 FD | 	waitx	#16
0ebe4     58 86 62 FD | 	drvl	local02
0ebe8     1F 20 64 FD | 	waitx	#16
0ebec     07 8A 46 F7 | 	zerox	local04, #7
0ebf0     01 8A 66 F0 | 	shl	local04, #1
0ebf4     1F 10 64 FD | 	waitx	#8
0ebf8     40 88 72 FD | 	testp	local03 wc
0ebfc     6C 30 62 FD | 	wrc	result1
0ec00     01 30 CE F7 | 	test	result1, #1 wz
0ec04     01 8A 06 51 |  if_ne	add	local04, #1
0ec08     59 86 62 FD | 	drvh	local02
0ec0c     1F 20 64 FD | 	waitx	#16
0ec10     58 86 62 FD | 	drvl	local02
0ec14     1F 20 64 FD | 	waitx	#16
0ec18     07 8A 46 F7 | 	zerox	local04, #7
0ec1c     01 8A 66 F0 | 	shl	local04, #1
0ec20     1F 10 64 FD | 	waitx	#8
0ec24     40 88 72 FD | 	testp	local03 wc
0ec28     6C 30 62 FD | 	wrc	result1
0ec2c     01 30 CE F7 | 	test	result1, #1 wz
0ec30     01 8A 06 51 |  if_ne	add	local04, #1
0ec34     59 86 62 FD | 	drvh	local02
0ec38     1F 20 64 FD | 	waitx	#16
0ec3c     58 86 62 FD | 	drvl	local02
0ec40     1F 20 64 FD | 	waitx	#16
0ec44     07 8A 46 F7 | 	zerox	local04, #7
0ec48     01 8A 66 F0 | 	shl	local04, #1
0ec4c     1F 10 64 FD | 	waitx	#8
0ec50     40 88 72 FD | 	testp	local03 wc
0ec54     6C 30 62 FD | 	wrc	result1
0ec58     01 30 CE F7 | 	test	result1, #1 wz
0ec5c     01 8A 06 51 |  if_ne	add	local04, #1
0ec60     59 86 62 FD | 	drvh	local02
0ec64     1F 20 64 FD | 	waitx	#16
0ec68     58 86 62 FD | 	drvl	local02
0ec6c     1F 20 64 FD | 	waitx	#16
0ec70     42 8B 42 FC | 	wrbyte	local04, local01
0ec74     01 78 8E F1 | 	sub	arg02, #1 wz
0ec78     01 84 06 F1 | 	add	local01, #1
0ec7c     94 FE 9F 5D |  if_ne	jmp	#LR__0902
0ec80                 | LR__0903
0ec80     AF F0 03 F6 | 	mov	ptra, fp
0ec84     BF 00 A0 FD | 	call	#popregs_
0ec88                 | _ff_cc_rcvr_mmc_0711_ret
0ec88     2D 00 64 FD | 	ret
0ec8c                 | 
0ec8c                 | _ff_cc_wait_ready_0714
0ec8c     04 5A 05 F6 | 	mov	COUNT_, #4
0ec90     B0 00 A0 FD | 	call	#pushregs_
0ec94     0C F0 07 F1 | 	add	ptra, #12
0ec98                 | ' {
0ec98                 | ' 	BYTE d;
0ec98                 | ' 	UINT tmr;
0ec98                 | ' 
0ec98                 | ' 
0ec98                 | ' 	for (tmr = 5000; tmr; tmr--) {
0ec98     08 5E 05 F1 | 	add	fp, #8
0ec9c     09 00 80 FF 
0eca0     AF 10 6B FC | 	wrlong	##5000, fp
0eca4     08 5E 85 F1 | 	sub	fp, #8
0eca8                 | LR__0904
0eca8     08 5E 05 F1 | 	add	fp, #8
0ecac     AF 84 0A FB | 	rdlong	local01, fp wz
0ecb0     08 5E 85 F1 | 	sub	fp, #8
0ecb4     4C 00 90 AD |  if_e	jmp	#LR__0905
0ecb8     04 5E 05 F1 | 	add	fp, #4
0ecbc     AF 76 02 F6 | 	mov	arg01, fp
0ecc0     04 5E 85 F1 | 	sub	fp, #4
0ecc4     01 78 06 F6 | 	mov	arg02, #1
0ecc8     14 FE BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0eccc     04 5E 05 F1 | 	add	fp, #4
0ecd0     AF 86 C2 FA | 	rdbyte	local02, fp
0ecd4     04 5E 85 F1 | 	sub	fp, #4
0ecd8     07 86 46 F7 | 	zerox	local02, #7
0ecdc     FF 86 0E F2 | 	cmp	local02, #255 wz
0ece0     20 00 90 AD |  if_e	jmp	#LR__0905
0ece4     64 76 06 F6 | 	mov	arg01, #100
0ece8     20 7A BF FD | 	call	#__system___waitus
0ecec     08 5E 05 F1 | 	add	fp, #8
0ecf0     AF 88 02 FB | 	rdlong	local03, fp
0ecf4     01 88 86 F1 | 	sub	local03, #1
0ecf8     AF 88 62 FC | 	wrlong	local03, fp
0ecfc     08 5E 85 F1 | 	sub	fp, #8
0ed00     A4 FF 9F FD | 	jmp	#LR__0904
0ed04                 | LR__0905
0ed04                 | ' 		dly_us(100);
0ed04                 | ' 	}
0ed04                 | ' 
0ed04                 | ' 	return tmr ? 1 : 0;
0ed04     08 5E 05 F1 | 	add	fp, #8
0ed08     AF 84 0A FB | 	rdlong	local01, fp wz
0ed0c     08 5E 85 F1 | 	sub	fp, #8
0ed10     01 8A 06 56 |  if_ne	mov	local04, #1
0ed14     00 8A 06 A6 |  if_e	mov	local04, #0
0ed18     45 31 02 F6 | 	mov	result1, local04
0ed1c     AF F0 03 F6 | 	mov	ptra, fp
0ed20     BF 00 A0 FD | 	call	#popregs_
0ed24                 | _ff_cc_wait_ready_0714_ret
0ed24     2D 00 64 FD | 	ret
0ed28                 | 
0ed28                 | _ff_cc_deselect_0720
0ed28     01 5A 05 F6 | 	mov	COUNT_, #1
0ed2c     B0 00 A0 FD | 	call	#pushregs_
0ed30     14 F0 07 F1 | 	add	ptra, #20
0ed34     70 1B 06 F1 | 	add	ptr__ff_cc_dat__, #368
0ed38     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0ed3c     04 5E 05 F1 | 	add	fp, #4
0ed40     AF 84 62 FC | 	wrlong	local01, fp
0ed44     04 1A 86 F1 | 	sub	ptr__ff_cc_dat__, #4
0ed48     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0ed4c     04 5E 05 F1 | 	add	fp, #4
0ed50     AF 84 62 FC | 	wrlong	local01, fp
0ed54     08 1A 06 F1 | 	add	ptr__ff_cc_dat__, #8
0ed58     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0ed5c     04 5E 05 F1 | 	add	fp, #4
0ed60     AF 84 62 FC | 	wrlong	local01, fp
0ed64     04 1A 06 F1 | 	add	ptr__ff_cc_dat__, #4
0ed68     0D 85 02 FB | 	rdlong	local01, ptr__ff_cc_dat__
0ed6c     78 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #376
0ed70     04 5E 05 F1 | 	add	fp, #4
0ed74     AF 84 62 FC | 	wrlong	local01, fp
0ed78     0C 5E 85 F1 | 	sub	fp, #12
0ed7c     AF 76 02 FB | 	rdlong	arg01, fp
0ed80     04 5E 85 F1 | 	sub	fp, #4
0ed84     59 76 62 FD | 	drvh	arg01
0ed88     1F 20 64 FD | 	waitx	#16
0ed8c     AF 76 02 F6 | 	mov	arg01, fp
0ed90     01 78 06 F6 | 	mov	arg02, #1
0ed94     48 FD BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0ed98     AF F0 03 F6 | 	mov	ptra, fp
0ed9c     BF 00 A0 FD | 	call	#popregs_
0eda0                 | _ff_cc_deselect_0720_ret
0eda0     2D 00 64 FD | 	ret
0eda4                 | 
0eda4                 | _ff_cc_select_0723
0eda4     00 5A 05 F6 | 	mov	COUNT_, #0
0eda8     B0 00 A0 FD | 	call	#pushregs_
0edac     0C F0 07 F1 | 	add	ptra, #12
0edb0     70 1B 06 F1 | 	add	ptr__ff_cc_dat__, #368
0edb4     0D 77 02 FB | 	rdlong	arg01, ptr__ff_cc_dat__
0edb8     70 1B 86 F1 | 	sub	ptr__ff_cc_dat__, #368
0edbc     08 5E 05 F1 | 	add	fp, #8
0edc0     AF 76 62 FC | 	wrlong	arg01, fp
0edc4     58 76 62 FD | 	drvl	arg01
0edc8     1F 20 64 FD | 	waitx	#16
0edcc     04 5E 85 F1 | 	sub	fp, #4
0edd0     AF 76 02 F6 | 	mov	arg01, fp
0edd4     04 5E 85 F1 | 	sub	fp, #4
0edd8     01 78 06 F6 | 	mov	arg02, #1
0eddc     00 FD BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0ede0     A8 FE BF FD | 	call	#_ff_cc_wait_ready_0714
0ede4     00 30 0E F2 | 	cmp	result1, #0 wz
0ede8     01 30 06 56 |  if_ne	mov	result1, #1
0edec     08 00 90 5D |  if_ne	jmp	#LR__0906
0edf0     34 FF BF FD | 	call	#_ff_cc_deselect_0720
0edf4                 | ' 
0edf4                 | ' 	deselect();
0edf4                 | ' 	return 0;
0edf4     00 30 06 F6 | 	mov	result1, #0
0edf8                 | LR__0906
0edf8     AF F0 03 F6 | 	mov	ptra, fp
0edfc     BF 00 A0 FD | 	call	#popregs_
0ee00                 | _ff_cc_select_0723_ret
0ee00     2D 00 64 FD | 	ret
0ee04                 | 
0ee04                 | _ff_cc_rcvr_datablock_0726
0ee04     04 5A 05 F6 | 	mov	COUNT_, #4
0ee08     B0 00 A0 FD | 	call	#pushregs_
0ee0c     14 F0 07 F1 | 	add	ptra, #20
0ee10     04 5E 05 F1 | 	add	fp, #4
0ee14     AF 76 62 FC | 	wrlong	arg01, fp
0ee18     04 5E 05 F1 | 	add	fp, #4
0ee1c     AF 78 62 FC | 	wrlong	arg02, fp
0ee20                 | ' 	BYTE *buff,
0ee20                 | ' 	UINT btr
0ee20                 | ' )
0ee20                 | ' {
0ee20                 | ' 	BYTE d[2];
0ee20                 | ' 	UINT tmr;
0ee20                 | ' 
0ee20                 | ' 
0ee20                 | ' 	for (tmr = 1000; tmr; tmr--) {
0ee20     08 5E 05 F1 | 	add	fp, #8
0ee24     01 00 80 FF 
0ee28     AF D0 6B FC | 	wrlong	##1000, fp
0ee2c     10 5E 85 F1 | 	sub	fp, #16
0ee30                 | LR__0907
0ee30     10 5E 05 F1 | 	add	fp, #16
0ee34     AF 84 0A FB | 	rdlong	local01, fp wz
0ee38     10 5E 85 F1 | 	sub	fp, #16
0ee3c     4C 00 90 AD |  if_e	jmp	#LR__0908
0ee40     0C 5E 05 F1 | 	add	fp, #12
0ee44     AF 76 02 F6 | 	mov	arg01, fp
0ee48     0C 5E 85 F1 | 	sub	fp, #12
0ee4c     01 78 06 F6 | 	mov	arg02, #1
0ee50     8C FC BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0ee54     0C 5E 05 F1 | 	add	fp, #12
0ee58     AF 86 C2 FA | 	rdbyte	local02, fp
0ee5c     0C 5E 85 F1 | 	sub	fp, #12
0ee60     07 86 46 F7 | 	zerox	local02, #7
0ee64     FF 86 0E F2 | 	cmp	local02, #255 wz
0ee68     20 00 90 5D |  if_ne	jmp	#LR__0908
0ee6c     64 76 06 F6 | 	mov	arg01, #100
0ee70     98 78 BF FD | 	call	#__system___waitus
0ee74     10 5E 05 F1 | 	add	fp, #16
0ee78     AF 88 02 FB | 	rdlong	local03, fp
0ee7c     01 88 86 F1 | 	sub	local03, #1
0ee80     AF 88 62 FC | 	wrlong	local03, fp
0ee84     10 5E 85 F1 | 	sub	fp, #16
0ee88     A4 FF 9F FD | 	jmp	#LR__0907
0ee8c                 | LR__0908
0ee8c     0C 5E 05 F1 | 	add	fp, #12
0ee90     AF 8A C2 FA | 	rdbyte	local04, fp
0ee94     0C 5E 85 F1 | 	sub	fp, #12
0ee98     07 8A 46 F7 | 	zerox	local04, #7
0ee9c     FE 8A 0E F2 | 	cmp	local04, #254 wz
0eea0     00 30 06 56 |  if_ne	mov	result1, #0
0eea4     30 00 90 5D |  if_ne	jmp	#LR__0909
0eea8     04 5E 05 F1 | 	add	fp, #4
0eeac     AF 76 02 FB | 	rdlong	arg01, fp
0eeb0     04 5E 05 F1 | 	add	fp, #4
0eeb4     AF 78 02 FB | 	rdlong	arg02, fp
0eeb8     08 5E 85 F1 | 	sub	fp, #8
0eebc     20 FC BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0eec0     0C 5E 05 F1 | 	add	fp, #12
0eec4     AF 76 02 F6 | 	mov	arg01, fp
0eec8     0C 5E 85 F1 | 	sub	fp, #12
0eecc     02 78 06 F6 | 	mov	arg02, #2
0eed0     0C FC BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0eed4                 | ' 
0eed4                 | ' 	rcvr_mmc(buff, btr);
0eed4                 | ' 	rcvr_mmc(d, 2);
0eed4                 | ' 
0eed4                 | ' 	return 1;
0eed4     01 30 06 F6 | 	mov	result1, #1
0eed8                 | LR__0909
0eed8     AF F0 03 F6 | 	mov	ptra, fp
0eedc     BF 00 A0 FD | 	call	#popregs_
0eee0                 | _ff_cc_rcvr_datablock_0726_ret
0eee0     2D 00 64 FD | 	ret
0eee4                 | 
0eee4                 | _ff_cc_xmit_datablock_0728
0eee4     01 5A 05 F6 | 	mov	COUNT_, #1
0eee8     B0 00 A0 FD | 	call	#pushregs_
0eeec     10 F0 07 F1 | 	add	ptra, #16
0eef0     04 5E 05 F1 | 	add	fp, #4
0eef4     AF 76 62 FC | 	wrlong	arg01, fp
0eef8     04 5E 05 F1 | 	add	fp, #4
0eefc     AF 78 42 FC | 	wrbyte	arg02, fp
0ef00     08 5E 85 F1 | 	sub	fp, #8
0ef04     84 FD BF FD | 	call	#_ff_cc_wait_ready_0714
0ef08     00 30 0E F2 | 	cmp	result1, #0 wz
0ef0c     00 30 06 A6 |  if_e	mov	result1, #0
0ef10     98 00 90 AD |  if_e	jmp	#LR__0911
0ef14     08 5E 05 F1 | 	add	fp, #8
0ef18     AF 84 C2 FA | 	rdbyte	local01, fp
0ef1c     04 5E 05 F1 | 	add	fp, #4
0ef20     AF 84 42 FC | 	wrbyte	local01, fp
0ef24     AF 76 02 F6 | 	mov	arg01, fp
0ef28     0C 5E 85 F1 | 	sub	fp, #12
0ef2c     01 78 06 F6 | 	mov	arg02, #1
0ef30     70 FA BF FD | 	call	#_ff_cc_xmit_mmc_0705
0ef34     08 5E 05 F1 | 	add	fp, #8
0ef38     AF 84 C2 FA | 	rdbyte	local01, fp
0ef3c     08 5E 85 F1 | 	sub	fp, #8
0ef40     07 84 46 F7 | 	zerox	local01, #7
0ef44     FD 84 0E F2 | 	cmp	local01, #253 wz
0ef48     5C 00 90 AD |  if_e	jmp	#LR__0910
0ef4c     04 5E 05 F1 | 	add	fp, #4
0ef50     AF 76 02 FB | 	rdlong	arg01, fp
0ef54     04 5E 85 F1 | 	sub	fp, #4
0ef58     09 78 C6 F9 | 	decod	arg02, #9
0ef5c     44 FA BF FD | 	call	#_ff_cc_xmit_mmc_0705
0ef60     0C 5E 05 F1 | 	add	fp, #12
0ef64     AF 76 02 F6 | 	mov	arg01, fp
0ef68     0C 5E 85 F1 | 	sub	fp, #12
0ef6c     02 78 06 F6 | 	mov	arg02, #2
0ef70     6C FB BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0ef74     0C 5E 05 F1 | 	add	fp, #12
0ef78     AF 76 02 F6 | 	mov	arg01, fp
0ef7c     0C 5E 85 F1 | 	sub	fp, #12
0ef80     01 78 06 F6 | 	mov	arg02, #1
0ef84     58 FB BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0ef88     0C 5E 05 F1 | 	add	fp, #12
0ef8c     AF 84 C2 FA | 	rdbyte	local01, fp
0ef90     0C 5E 85 F1 | 	sub	fp, #12
0ef94     07 84 46 F7 | 	zerox	local01, #7
0ef98     1F 84 06 F5 | 	and	local01, #31
0ef9c     05 84 0E F2 | 	cmp	local01, #5 wz
0efa0                 | ' 			return 0;
0efa0     00 30 06 56 |  if_ne	mov	result1, #0
0efa4     04 00 90 5D |  if_ne	jmp	#LR__0911
0efa8                 | LR__0910
0efa8                 | ' 	}
0efa8                 | ' 
0efa8                 | ' 	return 1;
0efa8     01 30 06 F6 | 	mov	result1, #1
0efac                 | LR__0911
0efac     AF F0 03 F6 | 	mov	ptra, fp
0efb0     BF 00 A0 FD | 	call	#popregs_
0efb4                 | _ff_cc_xmit_datablock_0728_ret
0efb4     2D 00 64 FD | 	ret
0efb8                 | 
0efb8                 | _ff_cc_send_cmd_0732
0efb8     05 5A 05 F6 | 	mov	COUNT_, #5
0efbc     B0 00 A0 FD | 	call	#pushregs_
0efc0     1C F0 07 F1 | 	add	ptra, #28
0efc4                 | _ff_cc_send_cmd_0732_enter
0efc4     04 5E 05 F1 | 	add	fp, #4
0efc8     AF 76 42 FC | 	wrbyte	arg01, fp
0efcc     04 5E 05 F1 | 	add	fp, #4
0efd0     AF 78 62 FC | 	wrlong	arg02, fp
0efd4     04 5E 85 F1 | 	sub	fp, #4
0efd8     AF 84 C2 FA | 	rdbyte	local01, fp
0efdc     04 5E 85 F1 | 	sub	fp, #4
0efe0     07 84 46 F7 | 	zerox	local01, #7
0efe4     80 84 CE F7 | 	test	local01, #128 wz
0efe8     4C 00 90 AD |  if_e	jmp	#LR__0913
0efec     04 5E 05 F1 | 	add	fp, #4
0eff0     AF 84 C2 FA | 	rdbyte	local01, fp
0eff4     7F 84 06 F5 | 	and	local01, #127
0eff8     AF 84 42 FC | 	wrbyte	local01, fp
0effc     04 5E 85 F1 | 	sub	fp, #4
0f000     37 76 06 F6 | 	mov	arg01, #55
0f004     00 78 06 F6 | 	mov	arg02, #0
0f008     AC FF BF FD | 	call	#_ff_cc_send_cmd_0732
0f00c     0C 5E 05 F1 | 	add	fp, #12
0f010     AF 30 42 FC | 	wrbyte	result1, fp
0f014     AF 84 C2 FA | 	rdbyte	local01, fp
0f018     0C 5E 85 F1 | 	sub	fp, #12
0f01c     07 84 46 F7 | 	zerox	local01, #7
0f020     01 84 1E F2 | 	cmp	local01, #1 wcz
0f024     10 00 90 ED |  if_be	jmp	#LR__0912
0f028     0C 5E 05 F1 | 	add	fp, #12
0f02c     AF 30 C2 FA | 	rdbyte	result1, fp
0f030     0C 5E 85 F1 | 	sub	fp, #12
0f034     88 01 90 FD | 	jmp	#LR__0918
0f038                 | LR__0912
0f038                 | LR__0913
0f038     04 5E 05 F1 | 	add	fp, #4
0f03c     AF 84 C2 FA | 	rdbyte	local01, fp
0f040     04 5E 85 F1 | 	sub	fp, #4
0f044     07 84 46 F7 | 	zerox	local01, #7
0f048     0C 84 0E F2 | 	cmp	local01, #12 wz
0f04c     14 00 90 AD |  if_e	jmp	#LR__0914
0f050     D4 FC BF FD | 	call	#_ff_cc_deselect_0720
0f054     4C FD BF FD | 	call	#_ff_cc_select_0723
0f058     00 30 0E F2 | 	cmp	result1, #0 wz
0f05c     FF 30 06 A6 |  if_e	mov	result1, #255
0f060     5C 01 90 AD |  if_e	jmp	#LR__0918
0f064                 | LR__0914
0f064     04 5E 05 F1 | 	add	fp, #4
0f068     AF 86 C2 FA | 	rdbyte	local02, fp
0f06c     40 84 06 F6 | 	mov	local01, #64
0f070     43 85 42 F5 | 	or	local01, local02
0f074     10 5E 05 F1 | 	add	fp, #16
0f078     AF 84 42 FC | 	wrbyte	local01, fp
0f07c     0C 5E 85 F1 | 	sub	fp, #12
0f080     AF 84 02 FB | 	rdlong	local01, fp
0f084     18 84 46 F0 | 	shr	local01, #24
0f088     0D 5E 05 F1 | 	add	fp, #13
0f08c     AF 84 42 FC | 	wrbyte	local01, fp
0f090     0D 5E 85 F1 | 	sub	fp, #13
0f094     AF 84 02 FB | 	rdlong	local01, fp
0f098     10 84 46 F0 | 	shr	local01, #16
0f09c     0E 5E 05 F1 | 	add	fp, #14
0f0a0     AF 84 42 FC | 	wrbyte	local01, fp
0f0a4     0E 5E 85 F1 | 	sub	fp, #14
0f0a8     AF 84 02 FB | 	rdlong	local01, fp
0f0ac     08 84 46 F0 | 	shr	local01, #8
0f0b0     0F 5E 05 F1 | 	add	fp, #15
0f0b4     AF 84 42 FC | 	wrbyte	local01, fp
0f0b8     0F 5E 85 F1 | 	sub	fp, #15
0f0bc     AF 84 02 FB | 	rdlong	local01, fp
0f0c0     10 5E 05 F1 | 	add	fp, #16
0f0c4     AF 84 42 FC | 	wrbyte	local01, fp
0f0c8     0C 5E 85 F1 | 	sub	fp, #12
0f0cc     AF 02 48 FC | 	wrbyte	#1, fp
0f0d0     08 5E 85 F1 | 	sub	fp, #8
0f0d4     AF 84 C2 FA | 	rdbyte	local01, fp
0f0d8     04 5E 85 F1 | 	sub	fp, #4
0f0dc     07 84 4E F7 | 	zerox	local01, #7 wz
0f0e0     0C 5E 05 A1 |  if_e	add	fp, #12
0f0e4     AF 2A 49 AC |  if_e	wrbyte	#149, fp
0f0e8     0C 5E 85 A1 |  if_e	sub	fp, #12
0f0ec     04 5E 05 F1 | 	add	fp, #4
0f0f0     AF 84 C2 FA | 	rdbyte	local01, fp
0f0f4     04 5E 85 F1 | 	sub	fp, #4
0f0f8     07 84 46 F7 | 	zerox	local01, #7
0f0fc     08 84 0E F2 | 	cmp	local01, #8 wz
0f100     0C 5E 05 A1 |  if_e	add	fp, #12
0f104     AF 0E 49 AC |  if_e	wrbyte	#135, fp
0f108     0C 5E 85 A1 |  if_e	sub	fp, #12
0f10c     0C 5E 05 F1 | 	add	fp, #12
0f110     AF 84 C2 FA | 	rdbyte	local01, fp
0f114     0D 5E 05 F1 | 	add	fp, #13
0f118     AF 84 42 FC | 	wrbyte	local01, fp
0f11c     05 5E 85 F1 | 	sub	fp, #5
0f120     AF 76 02 F6 | 	mov	arg01, fp
0f124     14 5E 85 F1 | 	sub	fp, #20
0f128     06 78 06 F6 | 	mov	arg02, #6
0f12c     74 F8 BF FD | 	call	#_ff_cc_xmit_mmc_0705
0f130     04 5E 05 F1 | 	add	fp, #4
0f134     AF 84 C2 FA | 	rdbyte	local01, fp
0f138     04 5E 85 F1 | 	sub	fp, #4
0f13c     07 84 46 F7 | 	zerox	local01, #7
0f140     0C 84 0E F2 | 	cmp	local01, #12 wz
0f144     14 00 90 5D |  if_ne	jmp	#LR__0915
0f148     10 5E 05 F1 | 	add	fp, #16
0f14c     AF 76 02 F6 | 	mov	arg01, fp
0f150     10 5E 85 F1 | 	sub	fp, #16
0f154     01 78 06 F6 | 	mov	arg02, #1
0f158     84 F9 BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0f15c                 | LR__0915
0f15c     0C 5E 05 F1 | 	add	fp, #12
0f160     AF 14 48 FC | 	wrbyte	#10, fp
0f164     0C 5E 85 F1 | 	sub	fp, #12
0f168                 | ' 	n = 10;
0f168                 | ' 	do
0f168                 | LR__0916
0f168     10 5E 05 F1 | 	add	fp, #16
0f16c     AF 76 02 F6 | 	mov	arg01, fp
0f170     10 5E 85 F1 | 	sub	fp, #16
0f174     01 78 06 F6 | 	mov	arg02, #1
0f178     64 F9 BF FD | 	call	#_ff_cc_rcvr_mmc_0711
0f17c     10 5E 05 F1 | 	add	fp, #16
0f180     AF 84 C2 FA | 	rdbyte	local01, fp
0f184     10 5E 85 F1 | 	sub	fp, #16
0f188     07 84 46 F7 | 	zerox	local01, #7
0f18c     80 84 CE F7 | 	test	local01, #128 wz
0f190     20 00 90 AD |  if_e	jmp	#LR__0917
0f194     0C 5E 05 F1 | 	add	fp, #12
0f198     AF 88 C2 FA | 	rdbyte	local03, fp
0f19c     01 88 86 F1 | 	sub	local03, #1
0f1a0     AF 88 42 FC | 	wrbyte	local03, fp
0f1a4     AF 8A C2 FA | 	rdbyte	local04, fp
0f1a8     0C 5E 85 F1 | 	sub	fp, #12
0f1ac     45 8D 0A F6 | 	mov	local05, local04 wz
0f1b0     B4 FF 9F 5D |  if_ne	jmp	#LR__0916
0f1b4                 | LR__0917
0f1b4                 | ' 
0f1b4                 | ' 	return d;
0f1b4     10 5E 05 F1 | 	add	fp, #16
0f1b8     AF 30 C2 FA | 	rdbyte	result1, fp
0f1bc     10 5E 85 F1 | 	sub	fp, #16
0f1c0                 | LR__0918
0f1c0     AF F0 03 F6 | 	mov	ptra, fp
0f1c4     BF 00 A0 FD | 	call	#popregs_
0f1c8                 | _ff_cc_send_cmd_0732_ret
0f1c8     2D 00 64 FD | 	ret
0f1cc                 | 
0f1cc                 | _ff_cc_strcpy
0f1cc     3B 37 02 F6 | 	mov	_var01, arg01
0f1d0     00 78 0E F2 | 	cmp	arg02, #0 wz
0f1d4     3B 31 02 A6 |  if_e	mov	result1, arg01
0f1d8     20 00 90 AD |  if_e	jmp	#_ff_cc_strcpy_ret
0f1dc     34 0E 9F FE | 	loc	pa,	#(@LR__0920-@LR__0919)
0f1e0     93 00 A0 FD | 	call	#FCACHE_LOAD_
0f1e4                 | '         do {
0f1e4                 | LR__0919
0f1e4     3C 39 CA FA | 	rdbyte	_var02, arg02 wz
0f1e8     1B 39 42 FC | 	wrbyte	_var02, _var01
0f1ec     01 78 06 F1 | 	add	arg02, #1
0f1f0     01 36 06 F1 | 	add	_var01, #1
0f1f4     EC FF 9F 5D |  if_ne	jmp	#LR__0919
0f1f8                 | LR__0920
0f1f8                 | ' 	return(dst);
0f1f8     3B 31 02 F6 | 	mov	result1, arg01
0f1fc                 | _ff_cc_strcpy_ret
0f1fc     2D 00 64 FD | 	ret
0f200                 | 
0f200                 | _ff_cc_memset
0f200     3B 37 02 F6 | 	mov	_var01, arg01
0f204     3C 39 02 F6 | 	mov	_var02, arg02
0f208     3D 3B 02 F6 | 	mov	_var03, arg03
0f20c     1B 3D 02 F6 | 	mov	_var04, _var01
0f210     03 3E 06 F6 | 	mov	_var05, #3
0f214     1B 3F CA F7 | 	test	_var05, _var01 wz
0f218     70 00 90 5D |  if_ne	jmp	#LR__0924
0f21c     04 3A 1E F2 | 	cmp	_var03, #4 wcz
0f220     68 00 90 ED |  if_be	jmp	#LR__0924
0f224     1B 41 02 F6 | 	mov	_var06, _var01
0f228     FF 38 06 F5 | 	and	_var02, #255
0f22c     1C 3F 02 F6 | 	mov	_var05, _var02
0f230     18 3E 66 F0 | 	shl	_var05, #24
0f234     1C 43 02 F6 | 	mov	_var07, _var02
0f238     10 42 66 F0 | 	shl	_var07, #16
0f23c     21 3F 42 F5 | 	or	_var05, _var07
0f240     1C 45 02 F6 | 	mov	_var08, _var02
0f244     08 44 66 F0 | 	shl	_var08, #8
0f248     22 3F 42 F5 | 	or	_var05, _var08
0f24c     1C 3F 42 F5 | 	or	_var05, _var02
0f250     1F 47 02 F6 | 	mov	_var09, _var05
0f254     D4 0D 9F FE | 	loc	pa,	#(@LR__0922-@LR__0921)
0f258     93 00 A0 FD | 	call	#FCACHE_LOAD_
0f25c                 | '     {
0f25c                 | '       uint32_t lc;
0f25c                 | '       uint32_t *dstl = dest_p;
0f25c                 | '       c &= 0xff;
0f25c                 | '       lc = (c<<24)|(c<<16)|(c<<8)|c;
0f25c                 | '       while (n >= sizeof(uint32_t))
0f25c                 | LR__0921
0f25c     04 3A 1E F2 | 	cmp	_var03, #4 wcz
0f260     24 00 90 CD |  if_b	jmp	#LR__0923
0f264     20 3F 02 F6 | 	mov	_var05, _var06
0f268     20 43 02 F6 | 	mov	_var07, _var06
0f26c     04 42 06 F1 | 	add	_var07, #4
0f270     21 41 02 F6 | 	mov	_var06, _var07
0f274     1F 47 62 FC | 	wrlong	_var09, _var05
0f278     1D 3F 02 F6 | 	mov	_var05, _var03
0f27c     04 3E 86 F1 | 	sub	_var05, #4
0f280     1F 3B 02 F6 | 	mov	_var03, _var05
0f284     D4 FF 9F FD | 	jmp	#LR__0921
0f288                 | LR__0922
0f288                 | LR__0923
0f288     20 37 02 F6 | 	mov	_var01, _var06
0f28c                 | LR__0924
0f28c     88 0D 9F FE | 	loc	pa,	#(@LR__0926-@LR__0925)
0f290     93 00 A0 FD | 	call	#FCACHE_LOAD_
0f294                 | ' 	}
0f294                 | '       dest_p = dstl;
0f294                 | '     }
0f294                 | ' 
0f294                 | '   dst = dest_p;
0f294                 | '   while (n > 0) {
0f294                 | LR__0925
0f294     00 3A 1E F2 | 	cmp	_var03, #0 wcz
0f298     10 00 90 ED |  if_be	jmp	#LR__0927
0f29c     1B 39 42 FC | 	wrbyte	_var02, _var01
0f2a0     01 3A 86 F1 | 	sub	_var03, #1
0f2a4     01 36 06 F1 | 	add	_var01, #1
0f2a8     E8 FF 9F FD | 	jmp	#LR__0925
0f2ac                 | LR__0926
0f2ac                 | LR__0927
0f2ac                 | '     *dst++ = c;
0f2ac                 | '     --n;
0f2ac                 | '   }
0f2ac                 | ' 
0f2ac                 | '   return orig_dest;
0f2ac     1E 31 02 F6 | 	mov	result1, _var04
0f2b0                 | _ff_cc_memset_ret
0f2b0     2D 00 64 FD | 	ret
0f2b4                 | 
0f2b4                 | ' 	
0f2b4                 | ' 	FUNCTION pfunc(c as integer) as integer
0f2b4                 | ___strs_cl_pfunc
0f2b4                 | ' 		if (i < 16) then
0f2b4     04 0E 06 F1 | 	add	objptr, #4
0f2b8     07 37 02 FB | 	rdlong	_var01, objptr
0f2bc     04 0E 86 F1 | 	sub	objptr, #4
0f2c0     10 36 5E F2 | 	cmps	_var01, #16 wcz
0f2c4     2C 00 90 3D |  if_ae	jmp	#LR__0928
0f2c8     07 39 02 FB | 	rdlong	_var02, objptr
0f2cc     04 0E 06 F1 | 	add	objptr, #4
0f2d0     07 3B 02 FB | 	rdlong	_var03, objptr
0f2d4     1C 3B 02 F1 | 	add	_var03, _var02
0f2d8     1D 77 42 FC | 	wrbyte	arg01, _var03
0f2dc     07 37 02 FB | 	rdlong	_var01, objptr
0f2e0     01 36 06 F1 | 	add	_var01, #1
0f2e4     07 37 62 FC | 	wrlong	_var01, objptr
0f2e8     04 0E 86 F1 | 	sub	objptr, #4
0f2ec                 | ' 			p(i) = c
0f2ec                 | ' 			i = i+1
0f2ec                 | ' 			return 1
0f2ec     01 30 06 F6 | 	mov	result1, #1
0f2f0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
0f2f4                 | LR__0928
0f2f4                 | ' 			return -1
0f2f4     01 30 66 F6 | 	neg	result1, #1
0f2f8                 | ___strs_cl_pfunc_ret
0f2f8     2D 00 64 FD | 	ret
0f2fc                 | 
0f2fc                 | __struct__s_vfs_file_t_putchar
0f2fc     04 5A 05 F6 | 	mov	COUNT_, #4
0f300     B0 00 A0 FD | 	call	#pushregs_
0f304     18 0E 06 F1 | 	add	objptr, #24
0f308     07 85 0A FB | 	rdlong	local01, objptr wz
0f30c     18 0E 86 F1 | 	sub	objptr, #24
0f310     00 30 06 A6 |  if_e	mov	result1, #0
0f314     3C 00 90 AD |  if_e	jmp	#LR__0929
0f318     18 0E 06 F1 | 	add	objptr, #24
0f31c     07 85 02 FB | 	rdlong	local01, objptr
0f320     18 0E 86 F1 | 	sub	objptr, #24
0f324     42 87 02 FB | 	rdlong	local02, local01
0f328     04 84 06 F1 | 	add	local01, #4
0f32c     42 89 02 FB | 	rdlong	local03, local01
0f330     07 79 02 F6 | 	mov	arg02, objptr
0f334     07 8B 02 F6 | 	mov	local04, objptr
0f338     43 0F 02 F6 | 	mov	objptr, local02
0f33c     2D 88 62 FD | 	call	local03
0f340     45 0F 02 F6 | 	mov	objptr, local04
0f344     00 30 5E F2 | 	cmps	result1, #0 wcz
0f348     00 84 06 C6 |  if_b	mov	local01, #0
0f34c     01 84 06 36 |  if_ae	mov	local01, #1
0f350     42 31 02 F6 | 	mov	result1, local01
0f354                 | LR__0929
0f354     AF F0 03 F6 | 	mov	ptra, fp
0f358     BF 00 A0 FD | 	call	#popregs_
0f35c                 | __struct__s_vfs_file_t_putchar_ret
0f35c     2D 00 64 FD | 	ret
0f360                 | 
0f360                 | __struct__s_vfs_file_t_getchar
0f360     04 5A 05 F6 | 	mov	COUNT_, #4
0f364     B0 00 A0 FD | 	call	#pushregs_
0f368     1C 0E 06 F1 | 	add	objptr, #28
0f36c     07 85 0A FB | 	rdlong	local01, objptr wz
0f370     1C 0E 86 F1 | 	sub	objptr, #28
0f374     01 30 66 A6 |  if_e	neg	result1, #1
0f378     2C 00 90 AD |  if_e	jmp	#LR__0930
0f37c                 | '         return getcf(__this);
0f37c     1C 0E 06 F1 | 	add	objptr, #28
0f380     07 85 02 FB | 	rdlong	local01, objptr
0f384     1C 0E 86 F1 | 	sub	objptr, #28
0f388     42 87 02 FB | 	rdlong	local02, local01
0f38c     04 84 06 F1 | 	add	local01, #4
0f390     42 89 02 FB | 	rdlong	local03, local01
0f394     07 77 02 F6 | 	mov	arg01, objptr
0f398     07 8B 02 F6 | 	mov	local04, objptr
0f39c     43 0F 02 F6 | 	mov	objptr, local02
0f3a0     2D 88 62 FD | 	call	local03
0f3a4     45 0F 02 F6 | 	mov	objptr, local04
0f3a8                 | LR__0930
0f3a8     AF F0 03 F6 | 	mov	ptra, fp
0f3ac     BF 00 A0 FD | 	call	#popregs_
0f3b0                 | __struct__s_vfs_file_t_getchar_ret
0f3b0     2D 00 64 FD | 	ret
0f3b4                 | 
0f3b4                 | __struct___bas_wrap_sender_tx
0f3b4     04 5A 05 F6 | 	mov	COUNT_, #4
0f3b8     B0 00 A0 FD | 	call	#pushregs_
0f3bc     07 85 02 FB | 	rdlong	local01, objptr
0f3c0     42 87 02 FB | 	rdlong	local02, local01
0f3c4     04 84 06 F1 | 	add	local01, #4
0f3c8     42 89 02 FB | 	rdlong	local03, local01
0f3cc     07 8B 02 F6 | 	mov	local04, objptr
0f3d0     43 0F 02 F6 | 	mov	objptr, local02
0f3d4     2D 88 62 FD | 	call	local03
0f3d8     45 0F 02 F6 | 	mov	objptr, local04
0f3dc     01 30 06 F6 | 	mov	result1, #1
0f3e0     AF F0 03 F6 | 	mov	ptra, fp
0f3e4     BF 00 A0 FD | 	call	#popregs_
0f3e8                 | __struct___bas_wrap_sender_tx_ret
0f3e8     2D 00 64 FD | 	ret
0f3ec                 | 
0f3ec                 | LR__0931
0f3ec     2F          | 	byte	"/"
0f3ed     00          | 	byte	0
0f3ee                 | LR__0932
0f3ee     20          | 	byte	" "
0f3ef     00          | 	byte	0
0f3f0                 | LR__0933
0f3f0                 | 	byte	
0f3f0     00          | 	byte	0
0f3f1                 | LR__0934
0f3f1                 | 	byte	
0f3f1     00          | 	byte	0
0f3f2                 | LR__0935
0f3f2     20 21 21 21 
0f3f6     20 63 6F 72 
0f3fa     72 75 70 74 
0f3fe     65 64 20 68 
0f402     65 61 70 3F 
0f406     3F 3F 20 21 
0f40a     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
0f40d     00          | 	byte	0
0f40e                 | LR__0936
0f40e     20 21 21 21 
0f412     20 6F 75 74 
0f416     20 6F 66 20 
0f41a     68 65 61 70 
0f41e     20 6D 65 6D 
0f422     6F 72 79 20 
0f426     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
0f42a     00          | 	byte	0
0f42b                 | LR__0937
0f42b     20 21 21 21 
0f42f     20 63 6F 72 
0f433     72 75 70 74 
0f437     65 64 20 68 
0f43b     65 61 70 20 
0f43f     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0f443     00          | 	byte	0
0f444                 | LR__0938
0f444     00          | 	byte	0
0f445     00          | 	byte	0
0f446                 | LR__0939
0f446     2F          | 	byte	"/"
0f447     00          | 	byte	0
0f448                 | LR__0940
0f448     22 2A 2B 2C 
0f44c     3A 3B 3C 3D 
0f450     3E 3F 5B 5D 
0f454     7C 7F       | 	byte	34,"*+,:;<=>?[]|",127
0f456     00          | 	byte	0
0f457                 | LR__0941
0f457     EB 76 90 45 
0f45b     58 46 41 54 
0f45f     20 20 20    | 	byte	-21,"v",-112,"EXFAT   "
0f462     00          | 	byte	0
0f463                 | LR__0942
0f463     46 41 54    | 	byte	"FAT"
0f466     00          | 	byte	0
0f467                 | LR__0943
0f467     46 41 54 33 
0f46b     32          | 	byte	"FAT32"
0f46c     00          | 	byte	0
0f46d                 | LR__0944
0f46d     4E 61 6D 65 
0f471     20 20 20 20 
0f475     20 20 20 20 
0f479     20 20 20 20 
0f47d     20 20 20 20 
0f481     20 20 20 6C 
0f485     65 6E 20 20 
0f489     20 66 74 20 
0f48d     76 6F 6C 20 
0f491     72 65 70 20 
0f495     20 20 72 2E 
0f499     6C 65 6E 20 
0f49d     20 20 20 20 
0f4a1     20 20 20 20 
0f4a5     4E 61 6D 65 
0f4a9     20 20 20 20 
0f4ad     20 20 20 20 
0f4b1     20 20 20 20 
0f4b5     20 20 20 20 
0f4b9     20 20 20 6C 
0f4bd     65 6E 20 20 
0f4c1     20 66 74 20 
0f4c5     76 6F 6C 20 
0f4c9     72 65 70 20 
0f4cd     20 20 72 2E 
0f4d1     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
0f4d5     00          | 	byte	0
0f4d6                 | LR__0945
0f4d6     53          | 	byte	"S"
0f4d7     00          | 	byte	0
0f4d8                 | LR__0946
0f4d8     2F 73 64    | 	byte	"/sd"
0f4db     00          | 	byte	0
0f4dc                 | LR__0947
0f4dc     2F 73 64    | 	byte	"/sd"
0f4df     00          | 	byte	0
0f4e0                 | LR__0948
0f4e0     20 20 20 20 
0f4e4     20 20 20 20 
0f4e8     20 20 20 20 
0f4ec     20 20 20 20 
0f4f0     20 20 20 20 
0f4f4     20 20       | 	byte	"                      "
0f4f6     00          | 	byte	0
0f4f7                 | LR__0949
0f4f7     20          | 	byte	" "
0f4f8     00          | 	byte	0
0f4f9                 | LR__0950
0f4f9     73 61 6D 70 
0f4fd     6C 65 73 20 
0f501     6D 6F 64 75 
0f505     6C 65       | 	byte	"samples module"
0f507     00          | 	byte	0
0f508                 | LR__0951
0f508     2F          | 	byte	"/"
0f509     00          | 	byte	0
0f50a     00 00       | 	alignl
0f50c                 | _dat_
0f50c     23 23 20 62 
0f510     61 6C 6C 61 
0f514     64 61 20 23 
0f518     23 00 00 00 |     return (char *) &tempname1;
0f51c     00 00 00 00 
0f520     78 74 64 20 
0f524     2F 20 75 6E 
0f528     69 6F 6E 20 | 	byte	$00, $00, $00, $00, $78, $74, $64, $20, $2f, $20, $75, $6e, $69, $6f, $6e, $20
0f52c     28 63 69 61 
0f530     29 00 00 00 
0f534     00 00 0A ED 
0f538     00 40 0A 66 | 	byte	$28, $63, $69, $61, $29, $00, $00, $00, $00, $00, $0a, $ed, $00, $40, $0a, $66
0f53c     00 87 2A 2A 
0f540     20 31 38 2E 
0f544     30 31 2E 31 
0f548     39 39 32 20 | 	byte	$00, $87, $2a, $2a, $20, $31, $38, $2e, $30, $31, $2e, $31, $39, $39, $32, $20
0f54c     2A 2A 00 00 
0f550     00 00 00 00 
0f554     09 FE 00 40 
0f558     07 A3 02 5A | 	byte	$2a, $2a, $00, $00, $00, $00, $00, $00, $09, $fe, $00, $40, $07, $a3, $02, $5a
0f55c     00 00 00 00 
0f560     00 00 00 00 
0f564     00 00 00 00 
0f568     00 00 00 00 
0f56c     00 00 00 00 
0f570     00 00       | 	byte	$00[22]
0f572     05 07 00 40 
0f576     00 00 00 01 
0f57a     00 00 00 00 
0f57e     00 00 00 00 | 	byte	$05, $07, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0f582     00 00 00 00 
0f586     00 00 00 00 
0f58a     00 00 00 00 
0f58e     00 00       | 	byte	$00[14]
0f590     03 2A 00 40 
0f594     02 C5 00 65 
0f598     00 00 00 00 
0f59c     00 00 00 00 | 	byte	$03, $2a, $00, $40, $02, $c5, $00, $65, $00, $00, $00, $00, $00, $00, $00, $00
0f5a0     00 00 00 00 
0f5a4     00 00 00 00 
0f5a8     00 00 00 00 
0f5ac     00 00       | 	byte	$00[14]
0f5ae     0A 01 00 30 
0f5b2     03 55 06 AC 
0f5b6     00 00 00 00 
0f5ba     00 00 00 00 | 	byte	$0a, $01, $00, $30, $03, $55, $06, $ac, $00, $00, $00, $00, $00, $00, $00, $00
0f5be     00 00 00 00 
0f5c2     00 00 00 00 
0f5c6     00 00 00 00 
0f5ca     00 00       | 	byte	$00[14]
0f5cc     09 AA 00 30 
0f5d0     03 F4 05 B6 
0f5d4     00 00 00 00 
0f5d8     00 00 00 00 | 	byte	$09, $aa, $00, $30, $03, $f4, $05, $b6, $00, $00, $00, $00, $00, $00, $00, $00
0f5dc     00 00 00 00 
0f5e0     00 00 00 00 
0f5e4     00 00 00 00 
0f5e8     00 00       | 	byte	$00[14]
0f5ea     01 E6 00 40 
0f5ee     01 97 00 4F 
0f5f2     00 00 00 00 
0f5f6     00 00 00 00 | 	byte	$01, $e6, $00, $40, $01, $97, $00, $4f, $00, $00, $00, $00, $00, $00, $00, $00
0f5fa     00 00 00 00 
0f5fe     00 00 00 00 
0f602     00 00 00 00 
0f606     00 00 00 00 
0f60a     00 00 00 00 
0f60e     00          | 	byte	$00[21]
0f60f     01 00 00 00 
0f613     00 00 00 00 
0f617     00 00 00 00 
0f61b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f61f     00 00 00 00 
0f623     00 00 00    | 	byte	$00[7]
0f626     08 FB 00 40 
0f62a     01 EA 07 11 
0f62e     00 00 00 00 
0f632     00 00 00 00 | 	byte	$08, $fb, $00, $40, $01, $ea, $07, $11, $00, $00, $00, $00, $00, $00, $00, $00
0f636     00 00 00 00 
0f63a     00 00 00 00 
0f63e     00 00 00 00 
0f642     00 00       | 	byte	$00[14]
0f644     04 5E 00 40 
0f648     00 00 00 01 
0f64c     00 00 00 00 
0f650     00 00 00 00 | 	byte	$04, $5e, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0f654     00 00 00 00 
0f658     00 00 00 00 
0f65c     00 00 00 00 
0f660     00 00       | 	byte	$00[14]
0f662     08 EC 00 40 
0f666     03 5C 05 90 
0f66a     00 00 00 00 
0f66e     00 00 00 00 | 	byte	$08, $ec, $00, $40, $03, $5c, $05, $90, $00, $00, $00, $00, $00, $00, $00, $00
0f672     00 00 00 00 
0f676     00 00 00 00 
0f67a     00 00 00 00 
0f67e     00 00 00 00 
0f682     00 00 00 00 
0f686     00          | 	byte	$00[21]
0f687     01 00 00 00 
0f68b     00 00 00 00 
0f68f     00 00 00 00 
0f693     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f697     00 00 00 00 
0f69b     00 00 00    | 	byte	$00[7]
0f69e     07 0E 00 30 
0f6a2     00 00 00 01 
0f6a6     00 00 00 00 
0f6aa     00 00 00 00 | 	byte	$07, $0e, $00, $30, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0f6ae     00 00 00 00 
0f6b2     00 00 00 00 
0f6b6     00 00 00 00 
0f6ba     00 00 00 00 
0f6be     00 00 00 00 
0f6c2     00          | 	byte	$00[21]
0f6c3     01 00 00 00 
0f6c7     00 00 00 00 
0f6cb     00 00 00 00 
0f6cf     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f6d3     00 00 00 00 
0f6d7     00 00 00 00 
0f6db     00 00 00 00 
0f6df     00 00       | 	byte	$00[14]
0f6e1     01 00 00 00 
0f6e5     00 00 00 00 
0f6e9     00 00 00 00 
0f6ed     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f6f1     00 00 00 00 
0f6f5     00 00 00 00 
0f6f9     00 00 00 00 
0f6fd     00 00       | 	byte	$00[14]
0f6ff     01 00 00 00 
0f703     00 00 00 00 
0f707     00 00 00 00 
0f70b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f70f     00 00 00 00 
0f713     00 00 00 00 
0f717     00 00 00 00 
0f71b     00 00       | 	byte	$00[14]
0f71d     01 00 00 00 
0f721     00 00 00 00 
0f725     00 00 00 00 
0f729     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f72d     00 00 00 00 
0f731     00 00 00 00 
0f735     00 00 00 00 
0f739     00 00       | 	byte	$00[14]
0f73b     01 00 00 00 
0f73f     00 00 00 00 
0f743     00 00 00 00 
0f747     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f74b     00 00 00 00 
0f74f     00 00 00 00 
0f753     00 00 00 00 
0f757     00 00       | 	byte	$00[14]
0f759     01 00 00 00 
0f75d     00 00 00 00 
0f761     00 00 00 00 
0f765     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f769     00 00 00 00 
0f76d     00 00 00 00 
0f771     00 00 00 00 
0f775     00 00       | 	byte	$00[14]
0f777     01 00 00 00 
0f77b     00 00 00 00 
0f77f     00 00 00 00 
0f783     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f787     00 00 00 00 
0f78b     00 00 00 00 
0f78f     00 00 00 00 
0f793     00 00       | 	byte	$00[14]
0f795     01 00 00 00 
0f799     00 00 00 00 
0f79d     00 00 00 00 
0f7a1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f7a5     00 00 00 00 
0f7a9     00 00 00 00 
0f7ad     00 00 00 00 
0f7b1     00 00       | 	byte	$00[14]
0f7b3     01 00 00 00 
0f7b7     00 00 00 00 
0f7bb     00 00 00 00 
0f7bf     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f7c3     00 00 00 00 
0f7c7     00 00 00 00 
0f7cb     00 00 00 00 
0f7cf     00 00       | 	byte	$00[14]
0f7d1     01 00 00 00 
0f7d5     00 00 00 00 
0f7d9     00 00 00 00 
0f7dd     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f7e1     00 00 00 00 
0f7e5     00 00 00 00 
0f7e9     00 00 00 00 
0f7ed     00 00       | 	byte	$00[14]
0f7ef     01 00 00 00 
0f7f3     00 00 00 00 
0f7f7     00 00 00 00 
0f7fb     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f7ff     00 00 00 00 
0f803     00 00 00 00 
0f807     00 00 00 00 
0f80b     00 00       | 	byte	$00[14]
0f80d     01 00 00 00 
0f811     00 00 00 00 
0f815     00 00 00 00 
0f819     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f81d     00 00 00 00 
0f821     00 00 00 00 
0f825     00 00 00 00 
0f829     00 00       | 	byte	$00[14]
0f82b     01 00 00 00 
0f82f     00 00 00 00 
0f833     00 00 00 00 
0f837     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f83b     00 00 00 00 
0f83f     00 00 00 00 
0f843     00 00 00 00 
0f847     00 00       | 	byte	$00[14]
0f849     01 00 00 00 
0f84d     00 00 00 00 
0f851     00 00 00 00 
0f855     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f859     00 00 00 00 
0f85d     00 00 00 00 
0f861     00 00 00 00 
0f865     00 00       | 	byte	$00[14]
0f867     01 00 00 00 
0f86b     00 00 00 00 
0f86f     00 00 00 00 
0f873     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f877     00 00 00 00 
0f87b     00 00 00 00 
0f87f     00 00 00 00 
0f883     00 00       | 	byte	$00[14]
0f885     01 00 00 00 
0f889     00 00 00 00 
0f88d     00 00 00 00 
0f891     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f895     00 00 00 00 
0f899     00 00 00 00 
0f89d     00 00 00 00 
0f8a1     00 00       | 	byte	$00[14]
0f8a3     01 00 00 00 
0f8a7     00 00 00 00 
0f8ab     00 00 00 00 
0f8af     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0f8b3     00 00 00 00 
0f8b7     00 00 00 00 
0f8bb     00 00 00 00 
0f8bf     00 00       | 	byte	$00[14]
0f8c1     01 19 7F 00 
0f8c5     01 02 04 03 
0f8c9     05 06 07 03 
0f8cd     08 09 0A 0B | 	byte	$01, $19, $7f, $00, $01, $02, $04, $03, $05, $06, $07, $03, $08, $09, $0a, $0b
0f8d1     0C 0D 0E 0F 
0f8d5     0C 0D 10 11 
0f8d9     12 14 12 13 
0f8dd     00 00 00 00 | 	byte	$0c, $0d, $0e, $0f, $0c, $0d, $10, $11, $12, $14, $12, $13, $00, $00, $00, $00
0f8e1     00 00 00 00 
      ...             
0f93d     00 00 00 00 
0f941     00 00 00    | 	byte	$00[99]
0f944     4D 2E 4B 2E 
0f948     01 7D 1C 10 
0f94c     00 00 0F 05 
0f950     00 00 0F 73 | 	byte	$4d, $2e, $4b, $2e, $01, $7d, $1c, $10, $00, $00, $0f, $05, $00, $00, $0f, $73
0f954     00 00 0C 00 
0f958     00 00 00 00 
0f95c     00 00 0C 00 
0f960     00 00 00 00 | 	byte	$00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00
0f964     00 00 00 00 
      ...             
0f98c     00 00 00 00 
0f990     00 00 00 00 | 	byte	$00[48]
0f994     01 7D 1C 10 
0f998     01 53 1C 18 
0f99c     00 00 00 00 
0f9a0     00 00 00 00 | 	byte	$01, $7d, $1c, $10, $01, $53, $1c, $18, $00, $00, $00, $00, $00, $00, $00, $00
0f9a4     00 00 00 00 
0f9a8     00 00       | 	byte	$00[6]
0f9aa     0C 10 00 00 
0f9ae     00 00 00 00 
0f9b2     00 00 01 40 
0f9b6     1C 20 00 00 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $1c, $20, $00, $00
0f9ba     00 00 00 00 
0f9be     00 00 00 00 
0f9c2     00 00 00 00 
0f9c6     00 00 00    | 	byte	$00[15]
0f9c9     FE 1C 30 00 
0f9cd     00 00 00 00 
0f9d1     00 00 00 00 
0f9d5     00 0C 18 00 | 	byte	$fe, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $18, $00
0f9d9     00 00 00 00 
0f9dd     00 00 00 00 
0f9e1     00 00 00 00 
0f9e5     00 00 00 00 
0f9e9     00          | 	byte	$00[17]
0f9ea     0C 20 00 00 
0f9ee     00 00 00 00 
0f9f2     00 00 01 1D 
0f9f6     10 00 00 00 | 	byte	$0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $00
0f9fa     00 00 00 00 
0f9fe     00 00 00 00 
0fa02     00 00 00 00 
0fa06     00 00 00    | 	byte	$00[15]
0fa09     BE 10 00 00 
0fa0d     00 00 00 00 
0fa11     00 00 00 01 
0fa15     7D 10 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00
0fa19     00 00 00 00 
0fa1d     00 00 00 00 
0fa21     00 00 00 00 
0fa25     00 00 00 00 | 	byte	$00[16]
0fa29     BE 1A 06 00 
0fa2d     00 00 00 00 
0fa31     00 00 00 00 
0fa35     00 00 00 00 | 	byte	$be, $1a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fa39     A0 0E 93 00 
0fa3d     00 00 00 00 
0fa41     00 00 00 00 
0fa45     00 00 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fa49     7F 10 00 00 
0fa4d     00 00 00 00 
0fa51     00 00 00 00 
0fa55     00 00 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fa59     00 00 00 00 
0fa5d     00 00 00 00 
0fa61     00 00 00 00 | 	byte	$00[12]
0fa65     BE 1C 20 00 
0fa69     8F 10 00 00 
0fa6d     00 00 00 00 
0fa71     00 00 00 01 | 	byte	$be, $1c, $20, $00, $8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0fa75     AC 1C 30 00 
0fa79     00 00 00 00 
0fa7d     00 00 00 00 
0fa81     00 00 00 00 | 	byte	$ac, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fa85     00 00 00 00 
0fa89     A0 0E 93 00 
0fa8d     00 00 00 00 
0fa91     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fa95     00 00 00 00 
0fa99     A0 10 00 00 
0fa9d     00 00 00 00 
0faa1     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0faa5     00 00 00 00 
0faa9     AA 10 00 00 
0faad     00 00 00 00 
0fab1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fab5     00 00 00 00 
0fab9     00          | 	byte	$00[5]
0faba     0A 06 00 00 
0fabe     00 00 00 00 
0fac2     00 00 00 00 
0fac6     00 00 00 BE | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0faca     10 00 00 00 
0face     00 00 00 00 
0fad2     00 00 01 7D 
0fad6     10 00 00 00 | 	byte	$10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
0fada     00 00 00 00 
0fade     00 00 00 00 
0fae2     00 00 00 00 
0fae6     00 00 00    | 	byte	$00[15]
0fae9     FE 10 00 00 
0faed     00 00 00 00 
0faf1     00 00 00 00 
0faf5     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0faf9     00 00 00 00 
0fafd     00 00 00 00 
0fb01     00 00 00 00 
0fb05     00 00 00 00 
0fb09     00 00 00 00 
0fb0d     00 00 00 00 
0fb11     00 00 00 00 | 	byte	$00[28]
0fb15     BE 10 00 00 
0fb19     FE 1C 20 00 
0fb1d     00 00 00 00 
0fb21     00 00 00 00 | 	byte	$be, $10, $00, $00, $fe, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fb25     00 00 00 00 
0fb29     AA 10 00 00 
0fb2d     00 00 00 00 
0fb31     00 00 00 01 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0fb35     AC 10 00 00 
0fb39     00 00 00 00 
0fb3d     00 00 00 00 
0fb41     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fb45     00 00 00 00 
0fb49     D6 10 00 00 
0fb4d     00 00 00 00 
0fb51     00 00 00 00 | 	byte	$00, $00, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fb55     00 00 00 00 
      ...             
0fb6d     00 00 00 00 
0fb71     00 00 00 00 | 	byte	$00[32]
0fb75     AA 10 00 00 
0fb79     00 00 00 00 
0fb7d     00 00 00 00 
0fb81     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fb85     00 00 00 00 
0fb89     A0 10 00 00 
0fb8d     00 00 00 00 
0fb91     00 00 00 01 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0fb95     E0 1C 30 00 
0fb99     00 00 00 00 
0fb9d     00 00 00 00 
0fba1     00 00 00 00 | 	byte	$e0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fba5     00 00 00 00 
0fba9     AA 10 00 00 
0fbad     00 00 00 00 
0fbb1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fbb5     00 00 00 00 
0fbb9     00 00 00 00 
0fbbd     00 00 00 00 
0fbc1     00 00 00 00 | 	byte	$00[16]
0fbc5     BE 10 00 00 
0fbc9     AA 10 00 00 
0fbcd     00 00 00 00 
0fbd1     00 00 00 01 | 	byte	$be, $10, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0fbd5     AC 10 00 00 
0fbd9     00 00 00 00 
0fbdd     00 00 00 00 
0fbe1     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fbe5     00 00 00 00 
0fbe9     BE 14 C1 00 
0fbed     00 00 00 00 
0fbf1     00 00 00 01 | 	byte	$00, $00, $00, $00, $be, $14, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $01
0fbf5     7D 10 00 00 
0fbf9     00 06 02 00 
0fbfd     00 00 00 00 
0fc01     00 00 00 00 | 	byte	$7d, $10, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fc05     00 0A 02 00 
0fc09     00 06 02 00 
0fc0d     00 00 00 00 
0fc11     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fc15     00 0A 02 00 
0fc19     00 06 02 00 
0fc1d     00 00 00 00 
0fc21     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fc25     00 0A 02 00 
0fc29     A0 10 00 00 
0fc2d     00 00 00 00 
0fc31     00 00 00 00 | 	byte	$00, $0a, $02, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fc35     00 0A 02 00 
0fc39     8F 1D 01 00 
0fc3d     00 00 00 00 
0fc41     00 00 00 00 | 	byte	$00, $0a, $02, $00, $8f, $1d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fc45     00 0A 02 00 
0fc49     00 00 00 00 
0fc4d     00 00 00 00 
0fc51     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0fc55     00 00 00 00 
      ...             
0fd45     00 00 00 00 
0fd49     00          | 	byte	$00[245]
0fd4a     0B 01 00 00 
0fd4e     00 00 00 00 
0fd52     00 00 00 00 
0fd56     00 00 00 7F | 	byte	$0b, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0fd5a     1F 05 00 BE 
0fd5e     2A 02 00 00 
0fd62     00 00 01 7D 
0fd66     10 00 00 00 | 	byte	$1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
0fd6a     00 00 00 00 
0fd6e     0A 02 00 00 
0fd72     00 00 00 00 
0fd76     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0fd7a     10 00 00 00 
0fd7e     0A 02 00 00 
0fd82     00 00 00 00 
0fd86     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0fd8a     1C 20 00 00 
0fd8e     0A 02 00 00 
0fd92     00 00 00 00 
0fd96     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0fd9a     10 00 00 BE 
0fd9e     0A 02 00 00 
0fda2     00 00 00 00 
0fda6     0A 02 00 00 | 	byte	$10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0fdaa     00 00 00 00 
0fdae     0A 02 00 00 
0fdb2     00 00 00 00 
0fdb6     0A 02 00 F0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0
0fdba     40 00 00 F0 
0fdbe     2A 02 00 00 
0fdc2     00 00 01 E0 
0fdc6     10 00 00 00 | 	byte	$40, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
0fdca     00 00 00 00 
0fdce     0A 02 00 00 
0fdd2     00 00 00 00 
0fdd6     00 00 00 D6 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0fdda     4A 06 00 00 
0fdde     0A 02 00 00 
0fde2     00 00 00 00 
0fde6     00 00 00 F0 | 	byte	$4a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
0fdea     0E 93 00 00 
0fdee     0A 02 00 00 
0fdf2     00 00 00 00 
0fdf6     00 00 00 F0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
0fdfa     40 00 00 00 
0fdfe     0A 02 00 00 
0fe02     00 00 00 00 
0fe06     0A 02 00 00 | 	byte	$40, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0fe0a     00 00 00 00 
0fe0e     0A 02 00 00 
0fe12     00 00 00 F0 
0fe16     1A 02 00 7F | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f
0fe1a     10 00 00 BE 
0fe1e     2A 02 00 00 
0fe22     00 00 01 7D 
0fe26     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
0fe2a     00 00 00 00 
0fe2e     0A 02 00 00 
0fe32     00 00 00 00 
0fe36     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0fe3a     10 00 00 00 
0fe3e     0A 02 00 00 
0fe42     00 00 00 00 
0fe46     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0fe4a     1C 20 00 00 
0fe4e     0A 02 00 00 
0fe52     00 00 00 00 
0fe56     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0fe5a     10 00 00 BE 
0fe5e     00 00 00 00 
0fe62     00 00 01 7D 
0fe66     10 00 00 AA | 	byte	$10, $00, $00, $be, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa
0fe6a     1C 30 00 BE 
0fe6e     0E 93 00 00 
0fe72     00 00 00 00 
0fe76     00 00 00 A0 | 	byte	$1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0fe7a     10 00 00 D6 
0fe7e     2A 02 00 00 
0fe82     00 00 01 AC 
0fe86     10 00 00 A0 | 	byte	$10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $a0
0fe8a     1C 30 00 00 
0fe8e     0A 02 00 00 
0fe92     00 00 00 00 
0fe96     00 00 00 AA | 	byte	$1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0fe9a     10 00 00 00 
0fe9e     0A 02 00 00 
0fea2     00 00 00 00 
0fea6     00 00 00 BE | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0feaa     10 00 00 D6 
0feae     2C 20 00 00 
0feb2     00 00 00 00 
0feb6     00 00 00 AA | 	byte	$10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0feba     10 00 00 D6 
0febe     2A 04 00 00 
0fec2     00 00 00 00 
0fec6     0A 02 00 00 | 	byte	$10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0feca     00 00 00 00 
0fece     0A 04 00 00 
0fed2     00 00 00 00 
0fed6     0A 02 00 A0 | 	byte	$00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0
0feda     10 00 00 F0 
0fede     2A 02 00 00 
0fee2     00 00 01 E0 
0fee6     10 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
0feea     0C 20 00 00 
0feee     0A 02 00 00 
0fef2     00 00 00 00 
0fef6     00 00 00 A0 | 	byte	$0c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0fefa     0E 93 00 00 
0fefe     0A 02 00 00 
0ff02     00 00 00 00 
0ff06     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0ff0a     1C 20 00 00 
0ff0e     0A 02 00 00 
0ff12     00 00 00 F0 
0ff16     10 00 00 A0 | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0
0ff1a     10 00 00 F0 
0ff1e     2A 02 00 00 
0ff22     00 00 00 00 
0ff26     00 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ff2a     00 00 00 00 
0ff2e     0A 02 00 00 
0ff32     00 00 00 00 
0ff36     00 00 00 AA | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0ff3a     10 00 00 D6 
0ff3e     2A 01 00 00 
0ff42     00 00 01 AC 
0ff46     10 00 00 00 | 	byte	$10, $00, $00, $d6, $2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00
0ff4a     0C 20 00 00 
0ff4e     0A 01 00 00 
0ff52     00 00 00 00 
0ff56     00 00 00 AA | 	byte	$0c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0ff5a     0E 93 00 00 
0ff5e     0A 01 00 00 
0ff62     00 00 00 00 
0ff66     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0ff6a     10 00 00 00 
0ff6e     0A 01 00 00 
0ff72     00 00 00 00 
0ff76     00 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0ff7a     10 00 00 00 
0ff7e     0A 01 00 00 
0ff82     00 00 01 AC 
0ff86     10 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
0ff8a     1C 20 00 00 
0ff8e     0A 01 00 00 
0ff92     00 00 00 00 
0ff96     00 00 00 AA | 	byte	$1c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0ff9a     10 00 00 BE 
0ff9e     2A 01 00 00 
0ffa2     00 00 01 7D 
0ffa6     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
0ffaa     00 00 00 00 
0ffae     0A 01 00 00 
0ffb2     00 00 00 00 
0ffb6     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0ffba     10 00 01 7D 
0ffbe     2A 01 00 00 
0ffc2     00 00 00 00 
0ffc6     00 00 00 00 | 	byte	$10, $00, $01, $7d, $2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ffca     00 00 00 D6 
0ffce     2C 38 00 00 
0ffd2     00 00 01 AC 
0ffd6     10 00 00 AA | 	byte	$00, $00, $00, $d6, $2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
0ffda     10 00 00 00 
0ffde     0A 06 00 00 
0ffe2     00 00 00 00 
0ffe6     00 00 00 00 | 	byte	$10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ffea     00 00 00 D6 
0ffee     0E 93 00 00 
0fff2     00 00 00 00 
0fff6     00 00 00 BE | 	byte	$00, $00, $00, $d6, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0fffa     10 00 00 BE 
0fffe     2C 30 00 00 
10002     00 00 01 7D 
10006     10 00 00 00 | 	byte	$10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
1000a     00 00 00 00 
1000e     0A 02 00 00 
10012     00 00 00 00 
10016     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1001a     00 00 00 00 
1001e     0A 02 00 00 
10022     00 00 00 00 
10026     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1002a     00 00 00 00 
1002e     0A 02 00 00 
10032     00 00 00 00 
10036     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
1003a     10 00 00 00 
1003e     0A 02 00 00 
10042     00 00 00 00 
10046     00 00 00 8F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f
1004a     1D 00 00 00 
1004e     0A 02 00 00 
10052     00 00 00 00 
10056     00 00 00 00 | 	byte	$1d, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1005a     00 00 00 00 
      ...             
10142     00 00 00 00 
10146     00 00 00    | 	byte	$00[239]
10149     7F 1F 05 00 
1014d     BE 2A 02 00 
10151     00 00 00 01 
10155     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00
10159     00 00 00 00 
1015d     00          | 	byte	$00[5]
1015e     0A 02 00 00 
10162     00 00 00 00 
10166     00 00 00 A0 
1016a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1016e     0A 02 00 00 
10172     00 00 00 00 
10176     00 00 00 7F 
1017a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
1017e     0A 02 00 00 
10182     00 00 00 00 
10186     00 00 00 BE 
1018a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
1018e     0A 02 00 00 
10192     00 00 00 00 
10196     0A 02 00 00 
1019a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
1019e     0A 02 00 00 
101a2     00 00 00 00 
101a6     0A 02 00 F0 
101aa     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
101ae     2A 02 00 00 
101b2     00 00 01 E0 
101b6     10 00 00 00 
101ba     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
101be     0A 02 00 00 
101c2     00 00 00 00 
101c6     00 00 00 D6 
101ca     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
101ce     0A 02 00 00 
101d2     00 00 00 00 
101d6     00 00 00 F0 
101da     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
101de     0A 02 00 00 
101e2     00 00 00 00 
101e6     00 00 00 F0 
101ea     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
101ee     0A 02 00 00 
101f2     00 00 00 00 
101f6     0A 02 00 00 
101fa     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
101fe     0A 02 00 00 
10202     00 00 00 F0 
10206     1A 02 00 7F 
1020a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
1020e     2A 02 00 00 
10212     00 00 01 7D 
10216     10 00 00 00 
1021a     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
1021e     0A 02 00 00 
10222     00 00 00 00 
10226     00 00 00 A0 
1022a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1022e     0A 02 00 00 
10232     00 00 00 00 
10236     00 00 00 7F 
1023a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
1023e     0A 02 00 00 
10242     00 00 00 00 
10246     00 00 00 BE 
1024a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
1024e     00 00 00 00 
10252     00 00       | 	byte	$00[6]
10254     01 7D 10 00 
10258     00 AA 1C 30 
1025c     00 BE 0E 93 
10260     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
10264     00 00 00 00 
10268     00          | 	byte	$00[5]
10269     A0 10 00 00 
1026d     D6 2A 02 00 
10271     00 00 00 01 
10275     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00
10279     A0 1C 30 00 
1027d     00 0A 02 00 
10281     00 00 00 00 
10285     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10289     AA 10 00 00 
1028d     00 0A 02 00 
10291     00 00 00 00 
10295     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10299     BE 10 00 00 
1029d     D6 2C 20 00 
102a1     00 00 00 00 
102a5     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
102a9     AA 10 00 00 
102ad     D6 2A 04 00 
102b1     00 00 00 00 
102b5     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
102b9     00 00 00 00 
102bd     00          | 	byte	$00[5]
102be     0A 04 00 00 
102c2     00 00 00 00 
102c6     0A 02 00 A0 
102ca     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
102ce     2A 02 00 00 
102d2     00 00 01 E0 
102d6     10 00 00 00 
102da     0C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
102de     0A 02 00 00 
102e2     00 00 00 00 
102e6     00 00 00 A0 
102ea     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
102ee     0A 02 00 00 
102f2     00 00 00 00 
102f6     00 00 00 A0 
102fa     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
102fe     0A 02 00 00 
10302     00 00 00 F0 
10306     10 00 00 A0 
1030a     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
1030e     2A 02 00 00 
10312     00 00 00 00 
10316     00 00 00 00 
1031a     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1031e     0A 02 00 00 
10322     00 00 00 00 
10326     00 00 00 8F 
1032a     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
1032e     2A 01 00 00 
10332     00 00 01 AC 
10336     10 00 00 00 
1033a     0C 20 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
1033e     0A 01 00 00 
10342     00 00 00 00 
10346     00 00 00 8F 
1034a     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
1034e     0A 01 00 00 
10352     00 00 00 00 
10356     00 00 00 A0 
1035a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1035e     0A 01 00 00 
10362     00 00 00 00 
10366     00 00 00 8F 
1036a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
1036e     0A 01 00 00 
10372     00 00 01 AC 
10376     10 00 00 00 
1037a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
1037e     0A 01 00 00 
10382     00 00 00 00 
10386     00 00 00 BE 
1038a     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
1038e     2A 01 00 00 
10392     00 00 01 7D 
10396     10 00 00 00 
1039a     00 00 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
1039e     0A 01 00 00 
103a2     00 00 00 00 
103a6     00 00 00 A0 
103aa     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
103ae     2A 01 00 00 
103b2     00 00 00 00 
103b6     00 00 00 00 
103ba     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
103be     2C 38 00 00 
103c2     00 00 01 AC 
103c6     10 00 00 AA 
103ca     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
103ce     0A 06 00 00 
103d2     00 00 00 00 
103d6     00 00 00 00 
103da     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
103de     0E 93 00 00 
103e2     00 00 00 00 
103e6     00 00 00 BE 
103ea     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
103ee     2C 30 01 7D 
103f2     2A 02 01 7D 
103f6     10 00 00 00 
103fa     00 00 00 00 | 	byte	$2c, $30, $01, $7d, $2a, $02, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
103fe     0A 02 00 00 
10402     0A 02 00 00 
10406     00 00 00 00 
1040a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1040e     0A 02 00 00 
10412     0A 02 00 00 
10416     00 00 00 BE 
1041a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $be, $1c, $20, $00, $00
1041e     0A 02 00 00 
10422     0A 02 00 00 
10426     00 00 00 A0 
1042a     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
1042e     0A 02 00 00 
10432     0A 02 00 00 
10436     00 00 00 8F 
1043a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
1043e     0A 02 00 00 
10442     0A 02 00 00 
10446     0D 00 00 00 
1044a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
1044e     00 00 00 00 
      ...             
10542     00 00 00 00 
10546     00 00 00    | 	byte	$00[251]
10549     7F 1F 05 00 
1054d     BE 2A 02 00 
10551     CA 50 00 01 
10555     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
10559     7F 1C 30 00 
1055d     00 0A 02 00 
10561     00 00 00 00 
10565     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10569     A0 10 00 00 
1056d     00 0A 02 00 
10571     00 00 00 00 
10575     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10579     7F 1C 30 00 
1057d     00 0A 02 00 
10581     00 00 00 00 
10585     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10589     BE 10 00 00 
1058d     BE 0A 02 00 
10591     00 00 00 00 
10595     00 0A 02 00 | 	byte	$be, $10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
10599     A0 1C 30 00 
1059d     00 0A 02 00 
105a1     00 00 00 00 
105a5     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
105a9     F0 40 00 00 
105ad     F0 2A 02 00 
105b1     FE 60 00 01 
105b5     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $f0, $2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
105b9     00 00 00 00 
105bd     00          | 	byte	$00[5]
105be     0A 02 00 00 
105c2     00 00 00 00 
105c6     00 00 00 D6 
105ca     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
105ce     0A 02 00 00 
105d2     00 00 00 00 
105d6     00 00 00 D6 
105da     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $0e, $93, $00, $00
105de     0A 02 00 00 
105e2     00 00 00 00 
105e6     00 00 00 F0 
105ea     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
105ee     0A 02 00 00 
105f2     00 00 00 00 
105f6     0A 02 00 00 
105fa     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
105fe     0A 02 00 00 
10602     00 00 00 F0 
10606     1A 02 00 7F 
1060a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
1060e     2A 02 00 CA 
10612     50 00 01 7D 
10616     10 00 00 00 
1061a     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
1061e     0A 02 00 00 
10622     00 00 00 00 
10626     00 00 00 A0 
1062a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1062e     0A 02 00 00 
10632     00 00 00 00 
10636     00 00 00 7F 
1063a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
1063e     0A 02 00 00 
10642     00 00 00 00 
10646     00 00 00 BE 
1064a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
1064e     00 00 00 00 
10652     00 00       | 	byte	$00[6]
10654     01 7D 10 00 
10658     00 AA 1C 30 
1065c     00 BE 0E 93 
10660     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
10664     00 00 00 00 
10668     00          | 	byte	$00[5]
10669     A0 10 00 00 
1066d     D6 2A 02 00 
10671     E2 60 00 01 
10675     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
10679     A0 1C 30 00 
1067d     00 0A 02 00 
10681     00 00 00 00 
10685     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10689     AA 10 00 00 
1068d     00 0A 02 00 
10691     00 00 00 00 
10695     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10699     BE 10 00 00 
1069d     D6 2C 20 00 
106a1     00 00 00 00 
106a5     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
106a9     AA 10 00 00 
106ad     D6 2A 04 00 
106b1     00 00 00 00 
106b5     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
106b9     00 00 00 00 
106bd     00          | 	byte	$00[5]
106be     0A 04 00 00 
106c2     00 00 00 00 
106c6     0A 02 00 A0 
106ca     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
106ce     2A 02 00 FE 
106d2     60 00 01 E0 
106d6     10 00 00 00 
106da     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
106de     0A 02 00 00 
106e2     00 00 00 00 
106e6     00 00 00 A0 
106ea     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
106ee     0A 02 00 00 
106f2     00 00 00 00 
106f6     00 00 00 A0 
106fa     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
106fe     0A 02 00 00 
10702     00 00 00 F0 
10706     10 00 00 A0 
1070a     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
1070e     2A 02 00 00 
10712     00 00 00 00 
10716     00 00 00 00 
1071a     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1071e     0A 02 00 00 
10722     00 00 00 00 
10726     00 00 00 AA 
1072a     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $d6
1072e     2A 01 00 E2 
10732     60 00 01 AC 
10736     10 00 00 00 
1073a     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
1073e     0A 01 00 00 
10742     00 00 00 00 
10746     00 00 00 AA 
1074a     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
1074e     0A 01 00 00 
10752     00 00 00 00 
10756     00 00 00 BE 
1075a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
1075e     0A 01 00 00 
10762     00 00 00 00 
10766     00 00 00 AA 
1076a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
1076e     0A 01 00 00 
10772     00 00 01 AC 
10776     10 00 00 00 
1077a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
1077e     0A 01 00 00 
10782     00 00 00 00 
10786     00 00 00 BE 
1078a     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
1078e     2A 01 00 CA 
10792     50 00 01 7D 
10796     10 00 00 00 
1079a     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
1079e     0A 01 00 00 
107a2     00 00 00 00 
107a6     00 00 00 A0 
107aa     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
107ae     2A 01 00 00 
107b2     00 00 00 00 
107b6     00 00 00 00 
107ba     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
107be     2C 38 00 00 
107c2     00 00 01 AC 
107c6     10 00 00 AA 
107ca     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
107ce     0A 06 00 00 
107d2     00 00 00 00 
107d6     00 00 00 AA 
107da     1E 93 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $d6
107de     0E 93 00 00 
107e2     00 00 00 00 
107e6     00 00 00 BE 
107ea     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
107ee     2C 30 00 00 
107f2     00 00 01 7D 
107f6     10 00 00 00 
107fa     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
107fe     0A 02 00 00 
10802     00 00 00 00 
10806     00 00 00 00 
1080a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1080e     0A 02 00 00 
10812     00 00 00 00 
10816     00 00 00 00 
1081a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1081e     0A 02 00 00 
10822     00 00 00 00 
10826     00 00 00 00 
1082a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1082e     0A 02 00 00 
10832     00 00 00 00 
10836     00 00 00 00 
1083a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1083e     0A 02 00 00 
10842     00 00 00 00 
10846     0D 00 00 00 
1084a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
1084e     00 00 00 00 
      ...             
10942     00 00 00 00 
10946     00 00 00    | 	byte	$00[251]
10949     7F 1F 05 00 
1094d     BE 2A 02 00 
10951     CA 5C 10 01 
10955     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $5c, $10, $01, $7d, $10, $00, $00
10959     00 00 00 00 
1095d     00          | 	byte	$00[5]
1095e     0A 02 00 00 
10962     0A 10 00 00 
10966     00 00 00 A0 
1096a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1096e     0A 02 00 00 
10972     0A 10 00 00 
10976     00 00 00 7F 
1097a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
1097e     0A 02 00 00 
10982     0A 10 00 00 
10986     00 00 00 BE 
1098a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
1098e     0A 02 00 00 
10992     0A 10 00 00 
10996     0A 02 00 00 
1099a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
1099e     0A 02 00 00 
109a2     0A 10 00 00 
109a6     0A 02 00 F0 
109aa     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
109ae     2A 02 00 FE 
109b2     6C 20 01 E0 
109b6     10 00 00 00 
109ba     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $6c, $20, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
109be     0A 02 00 00 
109c2     0A 10 00 00 
109c6     00 00 00 D6 
109ca     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
109ce     0A 02 00 00 
109d2     0A 10 00 00 
109d6     00 00 00 F0 
109da     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
109de     0A 02 00 00 
109e2     0A 10 00 00 
109e6     00 00 00 F0 
109ea     40 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
109ee     0A 02 00 00 
109f2     0A 10 00 00 
109f6     0A 02 00 00 
109fa     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
109fe     0A 02 00 00 
10a02     0A 10 00 F0 
10a06     1A 02 00 7F 
10a0a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
10a0e     2A 02 00 CA 
10a12     50 00 01 7D 
10a16     10 00 00 00 
10a1a     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10a1e     0A 02 00 00 
10a22     00 00 00 00 
10a26     00 00 00 A0 
10a2a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
10a2e     0A 02 00 00 
10a32     00 00 00 00 
10a36     00 00 00 7F 
10a3a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
10a3e     0A 02 00 00 
10a42     00 00 00 00 
10a46     00 00 00 BE 
10a4a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
10a4e     00 00 00 00 
10a52     00 00       | 	byte	$00[6]
10a54     01 7D 10 00 
10a58     00 AA 1C 30 
10a5c     00 BE 0E 93 
10a60     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
10a64     00 00 00 00 
10a68     00          | 	byte	$00[5]
10a69     A0 10 00 00 
10a6d     D6 2A 02 00 
10a71     E2 60 00 01 
10a75     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
10a79     A0 1C 30 00 
10a7d     00 0A 02 00 
10a81     00 00 00 00 
10a85     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10a89     AA 10 00 00 
10a8d     00 0A 02 00 
10a91     00 00 00 00 
10a95     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10a99     BE 10 00 00 
10a9d     D6 2C 20 00 
10aa1     00 00 00 00 
10aa5     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
10aa9     AA 10 00 00 
10aad     D6 2A 04 00 
10ab1     00 00 00 00 
10ab5     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
10ab9     00 00 00 00 
10abd     00          | 	byte	$00[5]
10abe     0A 04 00 00 
10ac2     00 00 00 00 
10ac6     0A 02 00 A0 
10aca     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
10ace     2A 02 00 FE 
10ad2     60 00 01 E0 
10ad6     10 00 00 00 
10ada     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
10ade     0A 02 00 00 
10ae2     00 00 00 00 
10ae6     00 00 00 A0 
10aea     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
10aee     0A 02 00 00 
10af2     00 00 00 00 
10af6     00 00 00 A0 
10afa     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
10afe     0A 02 00 00 
10b02     00 00 00 F0 
10b06     10 00 00 A0 
10b0a     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
10b0e     2A 02 00 00 
10b12     00 00 00 00 
10b16     00 00 00 00 
10b1a     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10b1e     0A 02 00 00 
10b22     00 00 00 00 
10b26     00 00 00 8F 
10b2a     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
10b2e     2A 01 00 E2 
10b32     60 00 01 AC 
10b36     10 00 00 00 
10b3a     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
10b3e     0A 01 00 00 
10b42     00 00 00 00 
10b46     00 00 00 8F 
10b4a     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
10b4e     0A 01 00 00 
10b52     00 00 00 00 
10b56     00 00 00 A0 
10b5a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
10b5e     0A 01 00 00 
10b62     00 00 00 00 
10b66     00 00 00 8F 
10b6a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
10b6e     0A 01 00 00 
10b72     00 00 01 AC 
10b76     10 00 00 00 
10b7a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
10b7e     0A 01 00 00 
10b82     00 00 00 00 
10b86     00 00 00 BE 
10b8a     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
10b8e     2A 01 00 CA 
10b92     50 00 01 7D 
10b96     10 00 00 00 
10b9a     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10b9e     0A 01 00 00 
10ba2     00 00 00 00 
10ba6     00 00 00 A0 
10baa     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
10bae     2A 01 00 00 
10bb2     00 00 00 00 
10bb6     00 00 00 00 
10bba     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
10bbe     2C 38 00 00 
10bc2     00 00 01 AC 
10bc6     10 00 00 8F 
10bca     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
10bce     0A 06 00 00 
10bd2     00 00 00 00 
10bd6     00 00 00 00 
10bda     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
10bde     0E 93 00 00 
10be2     00 00 00 00 
10be6     00 00 00 7F 
10bea     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
10bee     2C 30 00 00 
10bf2     00 00 01 7D 
10bf6     10 00 00 00 
10bfa     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10bfe     0A 02 00 00 
10c02     00 00 00 00 
10c06     00 00 00 00 
10c0a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10c0e     0A 02 00 00 
10c12     00 00 00 00 
10c16     00 00 00 00 
10c1a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10c1e     0A 02 00 00 
10c22     00 00 00 00 
10c26     00 00 00 A0 
10c2a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
10c2e     0A 02 00 00 
10c32     00 00 00 00 
10c36     00 00 00 8F 
10c3a     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
10c3e     0A 02 00 00 
10c42     00 00 00 00 
10c46     0D 00 00 00 
10c4a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
10c4e     00 00 00 00 
      ...             
10d42     00 00 00 00 
10d46     00 00 00    | 	byte	$00[251]
10d49     7F 1F 05 00 
10d4d     BE 2A 02 00 
10d51     CA 50 00 01 
10d55     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
10d59     00 0A 06 00 
10d5d     00 0A 02 00 
10d61     00 00 00 00 
10d65     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10d69     7F 0E 93 00 
10d6d     00 0A 02 00 
10d71     00 00 00 00 
10d75     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10d79     8F 1C 30 00 
10d7d     00 0A 02 00 
10d81     00 00 00 00 
10d85     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10d89     BE 10 00 00 
10d8d     BE 2A 02 00 
10d91     00 00 00 00 
10d95     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
10d99     00 00 00 00 
10d9d     00          | 	byte	$00[5]
10d9e     0A 02 00 00 
10da2     00 00 00 00 
10da6     00 00 00 7F 
10daa     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
10dae     0A 02 00 00 
10db2     00 00 01 40 
10db6     10 00 00 00 
10dba     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
10dbe     0A 02 00 00 
10dc2     00 00 00 00 
10dc6     00 00 00 F0 
10dca     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
10dce     2A 02 00 00 
10dd2     00 00 00 00 
10dd6     00 00 00 F0 
10dda     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
10dde     2C 20 00 00 
10de2     00 00 01 40 
10de6     1A 08 00 FE 
10dea     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
10dee     2A 02 00 00 
10df2     00 00 01 40 
10df6     10 00 00 FE 
10dfa     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
10dfe     0A 02 00 00 
10e02     00 00 01 1D 
10e06     1C 20 00 8F 
10e0a     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
10e0e     2A 02 00 E2 
10e12     60 00 01 1D 
10e16     10 00 00 8F 
10e1a     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
10e1e     0A 02 00 00 
10e22     00 00 00 00 
10e26     0A 06 00 A0 
10e2a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
10e2e     0A 02 00 00 
10e32     00 00 01 1D 
10e36     0E 93 00 8F 
10e3a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
10e3e     0A 02 00 00 
10e42     00 00 01 1D 
10e46     10 00 00 AA 
10e4a     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
10e4e     2A 08 00 00 
10e52     00 00 01 40 
10e56     1A 08 00 A0 
10e5a     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
10e5e     2C 30 00 00 
10e62     00 00 00 00 
10e66     0A 08 00 BE 
10e6a     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
10e6e     2A 02 00 CA 
10e72     50 00 01 7D 
10e76     10 00 00 BE 
10e7a     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
10e7e     0A 02 00 00 
10e82     00 00 00 00 
10e86     00 00 00 A0 
10e8a     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
10e8e     0A 02 00 00 
10e92     00 00 00 00 
10e96     00 00 00 A0 
10e9a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
10e9e     0A 02 00 00 
10ea2     00 00 00 00 
10ea6     00 00 00 8F 
10eaa     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
10eae     0A 02 00 00 
10eb2     00 00 00 00 
10eb6     00 00 00 A0 
10eba     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
10ebe     0A 02 00 00 
10ec2     00 00 00 00 
10ec6     00 00 00 7F 
10eca     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
10ece     2A 02 00 00 
10ed2     00 00 01 7D 
10ed6     10 00 00 7F 
10eda     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $00
10ede     0A 02 00 00 
10ee2     00 00 00 00 
10ee6     00 00 00 8F 
10eea     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
10eee     0A 02 00 00 
10ef2     00 00 00 00 
10ef6     00 00 00 8F 
10efa     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
10efe     0A 02 00 00 
10f02     00 00 00 00 
10f06     00 00 00 A0 
10f0a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
10f0e     2A 02 00 00 
10f12     00 00 00 00 
10f16     00 00 00 A0 
10f1a     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
10f1e     0A 02 00 00 
10f22     00 00 00 00 
10f26     00 00 00 F0 
10f2a     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $f0
10f2e     2A 02 00 FE 
10f32     60 00 01 E0 
10f36     10 00 00 F0 
10f3a     4C 30 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
10f3e     0A 02 00 00 
10f42     00 00 00 00 
10f46     00 00 00 7F 
10f4a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
10f4e     0A 02 00 00 
10f52     00 00 00 00 
10f56     00 00 00 7F 
10f5a     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
10f5e     0A 02 00 00 
10f62     00 00 00 00 
10f66     00 00 00 8F 
10f6a     1A 06 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $f0
10f6e     2A 02 00 00 
10f72     00 00 00 00 
10f76     00 00 00 7F 
10f7a     0E 93 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
10f7e     0A 02 00 00 
10f82     00 00 00 00 
10f86     00 00 00 7F 
10f8a     1A 01 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $be
10f8e     2A 02 00 CA 
10f92     50 00 01 7D 
10f96     10 00 00 00 
10f9a     0A 01 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $00
10f9e     0A 02 00 00 
10fa2     00 00 00 00 
10fa6     00 00 00 00 
10faa     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00
10fae     0A 02 00 00 
10fb2     00 00 01 40 
10fb6     10 00 00 00 
10fba     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $00
10fbe     0A 02 00 00 
10fc2     00 00 00 00 
10fc6     00 00 00 00 
10fca     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10fce     0A 02 00 00 
10fd2     00 00 01 53 
10fd6     19 02 00 00 
10fda     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $00, $00, $00, $00
10fde     0A 02 00 00 
10fe2     00 00 00 00 
10fe6     00 00 00 7F 
10fea     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
10fee     2A 02 00 00 
10ff2     00 00 01 7D 
10ff6     10 00 00 00 
10ffa     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
10ffe     0A 02 00 00 
11002     00 00 00 00 
11006     00 00 00 A0 
1100a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1100e     0A 02 00 00 
11012     00 00 00 00 
11016     00 00 00 A0 
1101a     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
1101e     0A 02 00 00 
11022     00 00 00 00 
11026     00 00 00 8F 
1102a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
1102e     0A 02 00 00 
11032     00 00 00 00 
11036     00 00 00 A0 
1103a     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
1103e     0A 02 00 00 
11042     00 00 00 00 
11046     0D 00 00 00 
1104a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
1104e     00 00 00 00 
      ...             
11142     00 00 00 00 
11146     00 00 00    | 	byte	$00[251]
11149     7F 1F 05 00 
1114d     BE 2A 02 00 
11151     CA 50 00 01 
11155     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
11159     00 0A 06 00 
1115d     00 0A 02 00 
11161     00 00 00 00 
11165     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
11169     7F 0E 93 00 
1116d     00 0A 02 00 
11171     00 00 00 00 
11175     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
11179     8F 1C 30 00 
1117d     00 0A 02 00 
11181     00 00 00 00 
11185     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
11189     BE 10 00 00 
1118d     BE 2A 02 00 
11191     00 00 00 00 
11195     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
11199     00 00 00 00 
1119d     00          | 	byte	$00[5]
1119e     0A 02 00 00 
111a2     00 00 00 00 
111a6     00 00 00 7F 
111aa     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
111ae     0A 02 00 00 
111b2     00 00 01 40 
111b6     10 00 00 00 
111ba     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
111be     0A 02 00 00 
111c2     00 00 00 00 
111c6     00 00 00 F0 
111ca     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
111ce     2A 02 00 00 
111d2     00 00 00 00 
111d6     00 00 00 F0 
111da     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
111de     2C 20 00 00 
111e2     00 00 01 40 
111e6     1A 08 00 FE 
111ea     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
111ee     2A 02 00 00 
111f2     00 00 01 40 
111f6     10 00 00 FE 
111fa     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
111fe     0A 02 00 00 
11202     00 00 01 1D 
11206     1C 20 00 8F 
1120a     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
1120e     2A 02 00 E2 
11212     60 00 01 1D 
11216     10 00 00 8F 
1121a     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
1121e     0A 02 00 00 
11222     00 00 00 00 
11226     0A 06 00 A0 
1122a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
1122e     0A 02 00 00 
11232     00 00 01 1D 
11236     0E 93 00 8F 
1123a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
1123e     0A 02 00 00 
11242     00 00 01 1D 
11246     10 00 00 AA 
1124a     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
1124e     2A 08 00 00 
11252     00 00 01 40 
11256     1A 08 00 A0 
1125a     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
1125e     2C 30 00 00 
11262     00 00 00 00 
11266     0A 08 00 BE 
1126a     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
1126e     2A 02 00 CA 
11272     50 00 01 7D 
11276     10 00 00 BE 
1127a     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
1127e     0A 02 00 00 
11282     00 00 00 00 
11286     00 00 00 7F 
1128a     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $00
1128e     0A 02 00 00 
11292     00 00 00 00 
11296     00 00 00 7F 
1129a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
1129e     0A 02 00 00 
112a2     00 00 00 00 
112a6     00 00 00 8F 
112aa     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
112ae     0A 02 00 00 
112b2     00 00 00 00 
112b6     00 00 00 7F 
112ba     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
112be     0A 02 00 00 
112c2     00 00 00 00 
112c6     00 00 00 A0 
112ca     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
112ce     2A 02 00 00 
112d2     00 00 01 7D 
112d6     10 00 00 A0 
112da     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
112de     0A 02 00 00 
112e2     00 00 00 00 
112e6     00 00 00 AA 
112ea     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
112ee     0A 02 00 00 
112f2     00 00 00 00 
112f6     00 00 00 AA 
112fa     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1c, $30, $00, $00
112fe     0A 02 00 00 
11302     00 00 00 00 
11306     00 00 00 BE 
1130a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
1130e     2A 02 00 00 
11312     00 00 00 00 
11316     00 00 00 BE 
1131a     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1c, $30, $00, $00
1131e     0A 02 00 00 
11322     00 00 00 00 
11326     00 00 00 D6 
1132a     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $10, $00, $00, $d6
1132e     2A 02 00 E2 
11332     60 00 01 AC 
11336     10 00 00 D6 
1133a     1C 30 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $d6, $1c, $30, $00, $00
1133e     0A 02 00 00 
11342     00 00 00 00 
11346     00 00 00 FE 
1134a     1A 04 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $1a, $04, $00, $00
1134e     0A 02 00 00 
11352     00 00 00 00 
11356     00 00 00 FE 
1135a     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $0e, $93, $00, $00
1135e     0A 02 00 00 
11362     00 00 00 00 
11366     00 00 00 A0 
1136a     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $d6
1136e     2A 02 00 00 
11372     00 00 01 AC 
11376     1C 30 00 A0 
1137a     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $ac, $1c, $30, $00, $a0, $1c, $30, $00, $00
1137e     0A 02 00 00 
11382     00 00 00 00 
11386     00 00 00 BE 
1138a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
1138e     2A 02 00 CA 
11392     50 00 01 7D 
11396     10 00 00 00 
1139a     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
1139e     0A 02 00 00 
113a2     00 00 00 00 
113a6     00 00 00 00 
113aa     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
113ae     0A 02 00 00 
113b2     00 00 00 00 
113b6     00 00 00 00 
113ba     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
113be     0A 02 00 00 
113c2     00 00 00 00 
113c6     00 00 00 BE 
113ca     1A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1a, $02, $00, $00
113ce     0A 02 00 00 
113d2     00 00 01 AC 
113d6     19 02 00 00 
113da     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $ac, $19, $02, $00, $00, $0a, $02, $00, $00
113de     0A 02 00 00 
113e2     00 00 00 00 
113e6     00 00 00 00 
113ea     0A 02 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $be
113ee     2A 02 00 00 
113f2     00 00 01 7D 
113f6     10 00 00 00 
113fa     0A 02 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $0a, $02, $00, $00
113fe     0A 02 00 00 
11402     00 00 00 00 
11406     00 00 00 00 
1140a     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
1140e     0A 02 00 00 
11412     00 00 00 00 
11416     00 00 00 00 
1141a     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
1141e     0A 02 00 00 
11422     00 00 00 00 
11426     00 00 00 A0 
1142a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1142e     0A 02 00 00 
11432     00 00 00 00 
11436     00 00 00 8F 
1143a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
1143e     0A 02 00 00 
11442     00 00 00 00 
11446     0D 00 00 00 
1144a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
1144e     00 00 00 00 
      ...             
11542     00 00 00 00 
11546     00 00 00    | 	byte	$00[251]
11549     7F 1F 05 00 
1154d     BE 2A 02 00 
11551     CA 50 00 01 
11555     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
11559     00 00 00 00 
1155d     00          | 	byte	$00[5]
1155e     0A 02 00 00 
11562     00 00 00 00 
11566     00 00 00 A0 
1156a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1156e     0A 02 00 00 
11572     00 00 00 00 
11576     00 00 00 7F 
1157a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
1157e     0A 02 00 00 
11582     00 00 00 00 
11586     00 00 00 BE 
1158a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
1158e     0A 02 00 00 
11592     00 00 00 00 
11596     0A 02 00 00 
1159a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
1159e     0A 02 00 00 
115a2     00 00 00 00 
115a6     0A 02 00 F0 
115aa     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
115ae     2A 02 00 FE 
115b2     60 00 01 E0 
115b6     10 00 00 00 
115ba     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
115be     0A 02 00 00 
115c2     00 00 00 00 
115c6     00 00 00 D6 
115ca     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
115ce     0A 02 00 00 
115d2     00 00 00 00 
115d6     00 00 00 F0 
115da     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
115de     0A 02 00 00 
115e2     00 00 00 00 
115e6     00 00 00 F0 
115ea     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
115ee     0A 02 00 00 
115f2     00 00 00 00 
115f6     0A 02 00 00 
115fa     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
115fe     0A 02 00 00 
11602     00 00 00 F0 
11606     1A 02 00 7F 
1160a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
1160e     2A 02 00 CA 
11612     50 00 01 7D 
11616     10 00 00 00 
1161a     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
1161e     0A 02 00 00 
11622     00 00 00 00 
11626     00 00 00 A0 
1162a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1162e     0A 02 00 00 
11632     00 00 00 00 
11636     00 00 00 7F 
1163a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
1163e     0A 02 00 00 
11642     00 00 00 00 
11646     00 00 00 BE 
1164a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
1164e     00 00 00 00 
11652     00 00       | 	byte	$00[6]
11654     01 7D 10 00 
11658     00 AA 1C 30 
1165c     00 BE 0E 93 
11660     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
11664     00 00 00 00 
11668     00          | 	byte	$00[5]
11669     A0 10 00 00 
1166d     D6 2A 02 00 
11671     E2 60 00 01 
11675     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
11679     A0 1C 30 00 
1167d     00 0A 02 00 
11681     00 00 00 00 
11685     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
11689     AA 10 00 00 
1168d     00 0A 02 00 
11691     00 00 00 00 
11695     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
11699     BE 10 00 00 
1169d     D6 2C 20 00 
116a1     00 00 00 00 
116a5     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
116a9     AA 10 00 00 
116ad     D6 2A 04 00 
116b1     00 00 00 00 
116b5     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
116b9     00 00 00 00 
116bd     00          | 	byte	$00[5]
116be     0A 04 00 00 
116c2     00 00 00 00 
116c6     0A 02 00 A0 
116ca     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
116ce     2A 02 00 FE 
116d2     60 00 01 E0 
116d6     10 00 00 00 
116da     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
116de     0A 02 00 00 
116e2     00 00 00 00 
116e6     00 00 00 A0 
116ea     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
116ee     0A 02 00 00 
116f2     00 00 00 00 
116f6     00 00 00 A0 
116fa     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
116fe     0A 02 00 00 
11702     00 00 00 F0 
11706     10 00 00 A0 
1170a     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
1170e     2A 02 00 00 
11712     00 00 00 00 
11716     00 00 00 00 
1171a     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1171e     0A 02 00 00 
11722     00 00 00 00 
11726     00 00 00 8F 
1172a     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
1172e     2A 01 00 E2 
11732     60 00 01 AC 
11736     10 00 00 00 
1173a     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
1173e     0A 01 00 00 
11742     00 00 00 00 
11746     00 00 00 8F 
1174a     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
1174e     0A 01 00 00 
11752     00 00 00 00 
11756     00 00 00 A0 
1175a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1175e     0A 01 00 00 
11762     00 00 00 00 
11766     00 00 00 8F 
1176a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
1176e     0A 01 00 00 
11772     00 00 01 AC 
11776     10 00 00 00 
1177a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
1177e     0A 01 00 00 
11782     00 00 00 00 
11786     00 00 00 BE 
1178a     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
1178e     2A 01 00 CA 
11792     50 00 01 7D 
11796     10 00 00 00 
1179a     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
1179e     0A 01 00 00 
117a2     00 00 00 00 
117a6     00 00 00 A0 
117aa     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
117ae     2A 01 00 00 
117b2     00 00 00 00 
117b6     00 00 00 00 
117ba     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
117be     2C 38 00 00 
117c2     00 00 01 AC 
117c6     10 00 00 8F 
117ca     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
117ce     0A 06 00 00 
117d2     00 00 00 00 
117d6     00 00 00 00 
117da     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
117de     0E 93 00 00 
117e2     00 00 00 00 
117e6     00 00 00 7F 
117ea     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
117ee     2C 30 00 00 
117f2     00 00 01 7D 
117f6     10 00 00 00 
117fa     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
117fe     0A 02 00 00 
11802     00 00 00 00 
11806     00 00 00 00 
1180a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1180e     0A 02 00 00 
11812     00 00 00 00 
11816     00 00 00 00 
1181a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1181e     0A 02 00 00 
11822     00 00 00 00 
11826     00 00 00 A0 
1182a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
1182e     0A 02 00 00 
11832     00 00 00 00 
11836     00 00 00 8F 
1183a     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
1183e     0A 02 00 00 
11842     00 00 00 00 
11846     0D 00 00 00 
1184a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
1184e     00 00 00 00 
      ...             
11942     00 00 00 00 
11946     00 00 00    | 	byte	$00[251]
11949     7F 1F 05 01 
1194d     1D 71 08 00 
11951     CA 50 00 01 
11955     7D 10 00 00 | 	byte	$7f, $1f, $05, $01, $1d, $71, $08, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
11959     00 0A 06 01 
1195d     0D 73 F0 00 
11961     00 00 00 00 
11965     00 00 00 00 | 	byte	$00, $0a, $06, $01, $0d, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
11969     7F 0E 93 00 
1196d     00 04 A1 00 
11971     00 00 00 00 
11975     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
11979     8F 1C 30 00 
1197d     00 04 A1 00 
11981     00 00 00 00 
11985     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
11989     BE 10 00 00 
1198d     00 04 B2 00 
11991     00 00 00 00 
11995     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00
11999     00 00 00 00 
1199d     00          | 	byte	$00[5]
1199e     04 B2 00 00 
119a2     00 00 00 00 
119a6     00 00 00 7F 
119aa     10 00 00 00 | 	byte	$04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
119ae     04 C2 00 00 
119b2     00 00 01 40 
119b6     10 00 00 00 
119ba     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
119be     04 C2 00 00 
119c2     00 00 00 00 
119c6     00 00 00 F0 
119ca     40 00 00 CA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $ca
119ce     70 00 00 00 
119d2     00 00 00 00 
119d6     00 00 00 F0 
119da     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $00
119de     0C 18 00 00 
119e2     00 00 01 40 
119e6     1A 08 00 FE 
119ea     40 00 00 E2 | 	byte	$0c, $18, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $e2
119ee     70 00 00 00 
119f2     00 00 01 40 
119f6     10 00 00 FE 
119fa     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
119fe     0C 18 00 00 
11a02     00 00 01 1D 
11a06     1C 20 00 8F 
11a0a     10 00 01 1D | 	byte	$0c, $18, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $01, $1d
11a0e     71 08 00 E2 
11a12     60 00 01 1D 
11a16     10 00 00 8F 
11a1a     1C 20 01 0D | 	byte	$71, $08, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $01, $0d
11a1e     73 F0 00 00 
11a22     00 00 00 00 
11a26     0A 06 00 A0 
11a2a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
11a2e     04 C2 00 00 
11a32     00 00 01 1D 
11a36     0E 93 00 8F 
11a3a     1C 20 01 0D | 	byte	$04, $c2, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $01, $0d
11a3e     74 C4 00 00 
11a42     00 00 01 1D 
11a46     10 00 00 AA 
11a4a     10 00 01 2E | 	byte	$74, $c4, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $01, $2e
11a4e     73 F0 00 00 
11a52     00 00 01 40 
11a56     1A 08 00 A0 
11a5a     1C 20 01 0D | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $01, $0d
11a5e     7C 18 00 00 
11a62     00 00 00 00 
11a66     0A 08 00 BE 
11a6a     10 00 01 1D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
11a6e     71 04 00 CA 
11a72     50 00 01 7D 
11a76     10 00 00 BE 
11a7a     1C 20 01 0D | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
11a7e     73 F0 00 00 
11a82     00 00 00 00 
11a86     00 00 00 A0 
11a8a     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $aa
11a8e     74 C1 00 00 
11a92     00 00 00 00 
11a96     00 00 00 A0 
11a9a     10 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
11a9e     04 C1 00 00 
11aa2     00 00 00 00 
11aa6     00 00 00 8F 
11aaa     10 00 00 BE | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $be
11aae     71 04 00 00 
11ab2     00 00 00 00 
11ab6     00 00 00 A0 
11aba     1C 20 00 B4 | 	byte	$71, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $b4
11abe     73 F0 00 00 
11ac2     00 00 00 00 
11ac6     00 00 00 7F 
11aca     10 00 00 D6 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
11ace     71 02 00 00 
11ad2     00 00 01 7D 
11ad6     10 00 00 7F 
11ada     1C 30 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $ca
11ade     73 F0 00 00 
11ae2     00 00 00 00 
11ae6     00 00 00 8F 
11aea     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
11aee     04 C1 00 00 
11af2     00 00 00 00 
11af6     00 00 00 8F 
11afa     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
11afe     04 C1 00 00 
11b02     00 00 00 00 
11b06     00 00 00 A0 
11b0a     10 00 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
11b0e     70 00 00 00 
11b12     00 00 00 00 
11b16     00 00 00 A0 
11b1a     1C 30 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $ca
11b1e     73 F0 00 00 
11b22     00 00 00 00 
11b26     00 00 00 F0 
11b2a     40 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $e2
11b2e     73 F0 00 FE 
11b32     60 00 01 E0 
11b36     10 00 00 F0 
11b3a     4C 30 00 00 | 	byte	$73, $f0, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
11b3e     04 C1 00 00 
11b42     00 00 00 00 
11b46     00 00 00 7F 
11b4a     10 00 01 0D | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
11b4e     73 F0 00 00 
11b52     00 00 00 00 
11b56     00 00 00 7F 
11b5a     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
11b5e     04 C1 00 00 
11b62     00 00 00 00 
11b66     00 00 00 8F 
11b6a     1A 06 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $e2
11b6e     73 F0 00 00 
11b72     00 00 00 00 
11b76     00 00 00 7F 
11b7a     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
11b7e     04 C1 00 00 
11b82     00 00 00 00 
11b86     00 00 00 7F 
11b8a     1A 01 00 D6 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $d6
11b8e     71 04 00 CA 
11b92     50 00 01 7D 
11b96     10 00 00 00 
11b9a     0A 01 00 CA | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $ca
11b9e     73 F0 00 00 
11ba2     00 00 00 00 
11ba6     00 00 00 00 
11baa     0A 01 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $e2
11bae     73 F0 00 00 
11bb2     00 00 01 40 
11bb6     10 00 00 00 
11bba     0A 01 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $ca
11bbe     7C 18 00 00 
11bc2     00 00 00 00 
11bc6     00 00 00 00 
11bca     0A 01 01 0D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $01, $0d
11bce     70 00 00 00 
11bd2     00 00 01 53 
11bd6     19 02 00 00 
11bda     0A 01 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $0a, $01, $00, $e2
11bde     7C 18 00 00 
11be2     00 00 00 00 
11be6     00 00 00 7F 
11bea     10 00 00 D6 | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
11bee     71 04 00 00 
11bf2     00 00 01 7D 
11bf6     10 00 00 00 
11bfa     00 00 00 CA | 	byte	$71, $04, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
11bfe     73 F0 00 00 
11c02     00 00 00 00 
11c06     00 00 00 A0 
11c0a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
11c0e     04 C2 00 00 
11c12     00 00 00 00 
11c16     00 00 00 A0 
11c1a     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
11c1e     06 01 00 00 
11c22     00 00 00 00 
11c26     00 00 00 8F 
11c2a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
11c2e     06 01 00 00 
11c32     00 00 00 00 
11c36     00 00 00 A0 
11c3a     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
11c3e     06 01 00 00 
11c42     00 00 00 00 
11c46     0D 00 00 00 
11c4a     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
11c4e     00 00 00 00 
      ...             
11d42     00 00 00 00 
11d46     00 00 00    | 	byte	$00[251]
11d49     7F 1F 05 00 
11d4d     B4 71 03 00 
11d51     CA 50 00 01 
11d55     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $b4, $71, $03, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
11d59     00 0A 06 00 
11d5d     AA 73 F0 00 
11d61     00 00 00 00 
11d65     00 00 00 00 | 	byte	$00, $0a, $06, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
11d69     7F 0E 93 00 
11d6d     00 04 C2 00 
11d71     00 00 00 00 
11d75     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
11d79     8F 1C 30 00 
11d7d     00 04 C2 00 
11d81     00 00 00 00 
11d85     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
11d89     BE 10 00 00 
11d8d     00 04 C2 00 
11d91     00 00 00 00 
11d95     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
11d99     00 00 00 00 
11d9d     00          | 	byte	$00[5]
11d9e     04 C2 00 00 
11da2     00 00 00 00 
11da6     00 00 00 7F 
11daa     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $aa
11dae     74 C1 00 00 
11db2     00 00 01 40 
11db6     10 00 00 00 
11dba     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
11dbe     04 C2 00 00 
11dc2     00 00 00 00 
11dc6     00 00 00 F0 
11dca     40 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
11dce     04 C2 00 00 
11dd2     00 00 00 00 
11dd6     00 00 00 F0 
11dda     4C 20 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $b4
11dde     73 F0 00 00 
11de2     00 00 01 40 
11de6     1A 08 00 FE 
11dea     40 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $aa
11dee     73 F0 00 00 
11df2     00 00 01 40 
11df6     10 00 00 FE 
11dfa     4C 20 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $b4
11dfe     73 F0 00 00 
11e02     00 00 01 1D 
11e06     1C 20 00 8F 
11e0a     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $ca
11e0e     73 F0 00 E2 
11e12     60 00 01 1D 
11e16     10 00 00 8F 
11e1a     1C 20 00 00 | 	byte	$73, $f0, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
11e1e     04 C1 00 00 
11e22     00 00 00 00 
11e26     0A 06 00 A0 
11e2a     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
11e2e     02 06 00 00 
11e32     00 00 01 1D 
11e36     0E 93 00 8F 
11e3a     1C 20 00 CA | 	byte	$02, $06, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $ca
11e3e     73 F0 00 00 
11e42     00 00 01 1D 
11e46     10 00 00 AA 
11e4a     10 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $e2
11e4e     70 00 00 00 
11e52     00 00 01 40 
11e56     1A 08 00 A0 
11e5a     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $ca
11e5e     7C 20 00 00 
11e62     00 00 00 00 
11e66     0A 08 00 BE 
11e6a     10 00 01 1D | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
11e6e     71 06 00 CA 
11e72     50 00 01 7D 
11e76     10 00 00 BE 
11e7a     1C 20 01 0D | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
11e7e     73 F0 00 00 
11e82     00 00 00 00 
11e86     00 00 00 7F 
11e8a     1E 93 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $ca
11e8e     70 00 00 00 
11e92     00 00 00 00 
11e96     00 00 00 7F 
11e9a     10 00 01 0D | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
11e9e     7C 20 00 00 
11ea2     00 00 00 00 
11ea6     00 00 00 8F 
11eaa     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
11eae     70 00 00 00 
11eb2     00 00 00 00 
11eb6     00 00 00 7F 
11eba     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $ca
11ebe     7C 20 00 00 
11ec2     00 00 00 00 
11ec6     00 00 00 A0 
11eca     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $aa
11ece     70 00 00 00 
11ed2     00 00 01 7D 
11ed6     10 00 00 A0 
11eda     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
11ede     00 00 00 00 
11ee2     00 00 00 00 
11ee6     00 00 00    | 	byte	$00[11]
11ee9     AA 10 00 00 
11eed     B4 70 00 00 
11ef1     00 00 00 00 
11ef5     00 00 00 00 | 	byte	$aa, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11ef9     AA 1C 30 00 
11efd     AA 7C 20 00 
11f01     00 00 00 00 
11f05     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f09     BE 10 00 00 
11f0d     AA 70 00 00 
11f11     00 00 00 00 
11f15     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f19     BE 1C 30 00 
11f1d     B4 7C 20 00 
11f21     00 00 00 00 
11f25     00 00 00 00 | 	byte	$be, $1c, $30, $00, $b4, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f29     D6 10 00 00 
11f2d     97 70 00 00 
11f31     E2 60 00 01 
11f35     AC 10 00 00 | 	byte	$d6, $10, $00, $00, $97, $70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
11f39     D6 1C 30 00 
11f3d     AA 7C 20 00 
11f41     00 00 00 00 
11f45     00 00 00 00 | 	byte	$d6, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f49     FE 1A 04 00 
11f4d     AA 70 00 00 
11f51     00 00 00 00 
11f55     00 00 00 00 | 	byte	$fe, $1a, $04, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f59     FE 0E 93 00 
11f5d     97 7C 20 00 
11f61     00 00 00 00 
11f65     00 00 00 00 | 	byte	$fe, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f69     A0 10 00 00 
11f6d     B4 70 00 00 
11f71     00 00 00 01 
11f75     AC 1C 30 00 | 	byte	$a0, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $01, $ac, $1c, $30, $00
11f79     A0 1C 30 00 
11f7d     AA 7C 20 00 
11f81     00 00 00 00 
11f85     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
11f89     BE 10 00 00 
11f8d     AA 70 00 00 
11f91     CA 50 00 01 
11f95     7D 10 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
11f99     00 00 00 00 
11f9d     B4 73 F0 00 
11fa1     00 00 00 00 
11fa5     00 00 00 00 | 	byte	$00, $00, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
11fa9     00 00 00 00 
11fad     CA 73 F0 00 
11fb1     00 00 00 00 
11fb5     00 00 00 00 | 	byte	$00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
11fb9     00 00 00 00 
11fbd     00 00 00 00 
11fc1     00 00 00 00 
11fc5     00 00 00 00 | 	byte	$00[16]
11fc9     BE 1A 02 00 
11fcd     F0 71 0A 00 
11fd1     00 0F 03 01 
11fd5     AC 19 02 00 | 	byte	$be, $1a, $02, $00, $f0, $71, $0a, $00, $00, $0f, $03, $01, $ac, $19, $02, $00
11fd9     00 0A 02 00 
11fdd     E2 73 F0 00 
11fe1     00 0F 02 00 
11fe5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $e2, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
11fe9     00 0A 02 00 
11fed     00 0C 10 00 
11ff1     00 0F 03 00 
11ff5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $0c, $10, $00, $00, $0f, $03, $00, $00, $00, $00, $00
11ff9     00 0A 02 00 
11ffd     00 00 00 00 
12001     00 0F 02 00 
12005     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
12009     00 0A 02 00 
1200d     D6 71 0A 00 
12011     00 0F 03 01 
12015     7D 10 00 00 | 	byte	$00, $0a, $02, $00, $d6, $71, $0a, $00, $00, $0f, $03, $01, $7d, $10, $00, $00
12019     00 0A 02 00 
1201d     CA 73 F0 00 
12021     00 0F 02 00 
12025     00 00 00 00 | 	byte	$00, $0a, $02, $00, $ca, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
12029     00 0A 02 00 
1202d     00 04 C2 00 
12031     00 0F 03 00 
12035     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $04, $c2, $00, $00, $0f, $03, $00, $00, $00, $00, $00
12039     00 0A 02 00 
1203d     00 06 02 00 
12041     00 0F 02 00 
12045     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
12049     00 0A 02 00 
1204d     00 06 02 00 
12051     00 0F 03 00 
12055     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
12059     00 0A 02 00 
1205d     00 06 02 00 
12061     00 0F 02 00 
12065     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
12069     00 0A 02 00 
1206d     00 06 02 00 
12071     00 0F 03 00 
12075     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
12079     00 0A 02 00 
1207d     00 06 02 00 
12081     00 0F 02 00 
12085     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
12089     A0 10 00 00 
1208d     AA 70 00 00 
12091     00 0F 03 00 
12095     00 00 00 00 | 	byte	$a0, $10, $00, $00, $aa, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
12099     A0 1C 30 00 
1209d     00 00 00 00 
120a1     00 0F 02 00 
120a5     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
120a9     8F 10 00 00 
120ad     97 70 00 00 
120b1     00 0F 03 00 
120b5     00 00 00 00 | 	byte	$8f, $10, $00, $00, $97, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
120b9     00 00 00 00 
120bd     00 00 00 00 
120c1     00          | 	byte	$00[9]
120c2     0F 02 00 00 
120c6     0D 00 00 00 
120ca     00 00 00 00 
120ce     00 00 00 00 | 	byte	$0f, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
120d2     00 00 00 00 
      ...             
12142     00 00 00 00 
12146     00 00 00    | 	byte	$00[119]
12149     7F 1F 05 00 
1214d     8F 71 02 00 
12151     CA 50 00 01 
12155     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
12159     00 00 00 00 
1215d     87 73 F0 00 
12161     00 00 00 00 
12165     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
12169     A0 10 00 00 
1216d     00 04 C1 00 
12171     00 00 00 00 
12175     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
12179     7F 1C 20 00 
1217d     00 04 C1 00 
12181     00 00 00 00 
12185     00 00 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
12189     BE 10 00 00 
1218d     00 04 C1 00 
12191     00 00 00 00 
12195     00 0A 02 00 | 	byte	$be, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00
12199     00 00 00 00 
1219d     00          | 	byte	$00[5]
1219e     04 C1 00 00 
121a2     00 00 00 00 
121a6     0A 02 00 F0 
121aa     40 00 00 97 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $97
121ae     70 00 00 FE 
121b2     60 00 01 E0 
121b6     10 00 00 00 
121ba     00 00 00 AA | 	byte	$70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $aa
121be     73 F0 00 00 
121c2     00 00 00 00 
121c6     00 00 00 D6 
121ca     4A 06 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $97
121ce     73 F0 00 00 
121d2     00 00 00 00 
121d6     00 00 00 F0 
121da     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
121de     0C 10 00 00 
121e2     00 00 00 00 
121e6     00 00 00 F0 
121ea     40 00 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $aa
121ee     73 F0 00 00 
121f2     00 00 00 00 
121f6     0A 02 00 00 
121fa     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
121fe     0C 10 00 00 
12202     00 00 00 F0 
12206     1A 02 00 7F 
1220a     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
1220e     71 06 00 CA 
12212     50 00 01 7D 
12216     10 00 00 00 
1221a     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
1221e     73 F0 00 00 
12222     00 00 00 00 
12226     00 00 00 A0 
1222a     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
1222e     70 00 00 00 
12232     00 00 00 00 
12236     00 00 00 7F 
1223a     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
1223e     7C 20 00 00 
12242     00 00 00 00 
12246     00 00 00 BE 
1224a     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
1224e     70 00 00 00 
12252     00 00 01 7D 
12256     10 00 00 AA 
1225a     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
1225e     7C 20 00 00 
12262     00 00 00 00 
12266     00 00 00 A0 
1226a     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
1226e     70 00 00 E2 
12272     60 00 01 AC 
12276     10 00 00 A0 
1227a     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
1227e     0C 10 00 00 
12282     00 00 00 00 
12286     00 00 00 AA 
1228a     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
1228e     73 F0 00 00 
12292     00 00 00 00 
12296     00 00 00 BE 
1229a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
1229e     0C 10 00 00 
122a2     00 00 00 00 
122a6     00 00 00 AA 
122aa     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
122ae     70 00 00 00 
122b2     00 00 00 00 
122b6     0A 02 00 00 
122ba     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
122be     7C 20 00 00 
122c2     00 00 00 00 
122c6     0A 02 00 A0 
122ca     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
122ce     74 C1 00 FE 
122d2     60 00 01 E0 
122d6     10 00 00 00 
122da     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
122de     04 C1 00 00 
122e2     00 00 00 00 
122e6     00 00 00 A0 
122ea     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
122ee     04 C2 00 00 
122f2     00 00 00 00 
122f6     00 00 00 A0 
122fa     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
122fe     04 C2 00 00 
12302     00 00 00 F0 
12306     10 00 00 A0 
1230a     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
1230e     73 F0 00 00 
12312     00 00 00 00 
12316     00 00 00 00 
1231a     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
1231e     70 00 00 00 
12322     00 00 00 00 
12326     00 00 00 8F 
1232a     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $a0
1232e     71 04 00 E2 
12332     60 00 01 AC 
12336     10 00 00 00 
1233a     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
1233e     73 F0 00 00 
12342     00 00 00 00 
12346     00 00 00 8F 
1234a     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
1234e     73 F0 00 00 
12352     00 00 00 00 
12356     00 00 00 A0 
1235a     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $97
1235e     7C 20 00 00 
12362     00 00 00 00 
12366     00 00 00 8F 
1236a     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
1236e     70 00 00 00 
12372     00 00 01 AC 
12376     10 00 00 00 
1237a     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
1237e     7C 20 00 00 
12382     00 00 00 00 
12386     00 00 00 BE 
1238a     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
1238e     70 00 00 CA 
12392     50 00 01 7D 
12396     10 00 00 00 
1239a     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
1239e     7C 20 00 00 
123a2     00 00 00 00 
123a6     00 00 00 A0 
123aa     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
123ae     70 00 00 00 
123b2     00 00 00 00 
123b6     00 00 00 00 
123ba     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
123be     70 00 00 00 
123c2     00 00 01 AC 
123c6     10 00 00 8F 
123ca     1F 03 00 F0 | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $1f, $03, $00, $f0
123ce     71 08 00 00 
123d2     00 00 00 00 
123d6     00 00 00 00 
123da     0F 02 00 E2 | 	byte	$71, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $e2
123de     73 F0 00 00 
123e2     00 00 00 00 
123e6     00 00 00 00 
123ea     0F 05 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $05, $00, $00
123ee     0C 10 00 00 
123f2     00 00 00 00 
123f6     00 00 00 7F 
123fa     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
123fe     71 06 00 00 
12402     00 00 01 7D 
12406     10 00 00 00 
1240a     00 00 00 CA | 	byte	$71, $06, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
1240e     73 F0 00 00 
12412     00 00 00 00 
12416     00 00 00 00 
1241a     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1241e     04 C1 00 00 
12422     00 00 00 00 
12426     00 00 00 00 
1242a     00 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1242e     06 02 00 00 
12432     00 00 00 00 
12436     00 00 00 A0 
1243a     1C 20 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
1243e     06 02 00 00 
12442     00 00 00 00 
12446     00 00 00 8F 
1244a     1C 30 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
1244e     06 02 00 00 
12452     00 00 00 00 
12456     0D 00 00 00 
1245a     00 00 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
1245e     00 00 00 00 
      ...             
12542     00 00 00 00 
12546     00 00 00    | 	byte	$00[235]
12549     7F 1F 05 00 
1254d     8F 71 04 00 
12551     CA 50 00 01 
12555     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
12559     7F 1C 30 00 
1255d     87 73 F0 00 
12561     00 00 00 00 
12565     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
12569     A0 10 00 00 
1256d     00 04 C1 00 
12571     00 00 00 00 
12575     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
12579     7F 1C 30 00 
1257d     00 04 C1 00 
12581     00 00 00 00 
12585     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
12589     BE 10 00 00 
1258d     AA 70 00 00 
12591     00 00 00 00 
12595     00 0A 02 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00
12599     A0 1C 30 00 
1259d     87 7C 20 00 
125a1     00 00 00 00 
125a5     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00
125a9     F0 40 00 00 
125ad     97 70 00 00 
125b1     FE 60 00 01 
125b5     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
125b9     00 00 00 00 
125bd     AA 73 F0 00 
125c1     00 00 00 00 
125c5     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
125c9     D6 4A 06 00 
125cd     97 73 F0 00 
125d1     00 00 00 00 
125d5     00 00 00 00 | 	byte	$d6, $4a, $06, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
125d9     D6 0E 93 00 
125dd     00 0C 10 00 
125e1     00 00 00 00 
125e5     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
125e9     F0 40 00 00 
125ed     AA 73 F0 00 
125f1     00 00 00 00 
125f5     00 0A 02 00 | 	byte	$f0, $40, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00
125f9     00 00 00 00 
125fd     00          | 	byte	$00[5]
125fe     0C 10 00 00 
12602     00 00 00 F0 
12606     1A 02 00 7F 
1260a     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
1260e     71 06 00 CA 
12612     50 00 01 7D 
12616     10 00 00 00 
1261a     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
1261e     73 F0 00 00 
12622     00 00 00 00 
12626     00 00 00 A0 
1262a     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
1262e     70 00 00 00 
12632     00 00 00 00 
12636     00 00 00 7F 
1263a     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
1263e     7C 20 00 00 
12642     00 00 00 00 
12646     00 00 00 BE 
1264a     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
1264e     70 00 00 00 
12652     00 00 01 7D 
12656     10 00 00 AA 
1265a     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
1265e     7C 20 00 00 
12662     00 00 00 00 
12666     00 00 00 A0 
1266a     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
1266e     70 00 00 E2 
12672     60 00 01 AC 
12676     10 00 00 A0 
1267a     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
1267e     0C 10 00 00 
12682     00 00 00 00 
12686     00 00 00 AA 
1268a     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
1268e     73 F0 00 00 
12692     00 00 00 00 
12696     00 00 00 BE 
1269a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
1269e     0C 10 00 00 
126a2     00 00 00 00 
126a6     00 00 00 AA 
126aa     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
126ae     70 00 00 00 
126b2     00 00 00 00 
126b6     0A 02 00 00 
126ba     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
126be     7C 20 00 00 
126c2     00 00 00 00 
126c6     0A 02 00 A0 
126ca     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
126ce     74 C1 00 FE 
126d2     60 00 01 E0 
126d6     10 00 00 00 
126da     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
126de     04 C1 00 00 
126e2     00 00 00 00 
126e6     00 00 00 A0 
126ea     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
126ee     04 C2 00 00 
126f2     00 00 00 00 
126f6     00 00 00 A0 
126fa     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
126fe     04 C2 00 00 
12702     00 00 00 F0 
12706     10 00 00 A0 
1270a     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
1270e     73 F0 00 00 
12712     00 00 00 00 
12716     00 00 00 00 
1271a     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
1271e     70 00 00 00 
12722     00 00 00 00 
12726     00 00 00 AA 
1272a     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $a0
1272e     71 04 00 E2 
12732     60 00 01 AC 
12736     10 00 00 00 
1273a     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
1273e     73 F0 00 00 
12742     00 00 00 00 
12746     00 00 00 AA 
1274a     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $aa
1274e     73 F0 00 00 
12752     00 00 00 00 
12756     00 00 00 BE 
1275a     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
1275e     7C 20 00 00 
12762     00 00 00 00 
12766     00 00 00 AA 
1276a     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
1276e     70 00 00 00 
12772     00 00 01 AC 
12776     10 00 00 00 
1277a     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
1277e     7C 20 00 00 
12782     00 00 00 00 
12786     00 00 00 BE 
1278a     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
1278e     70 00 00 CA 
12792     50 00 01 7D 
12796     10 00 00 00 
1279a     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
1279e     7C 20 00 00 
127a2     00 00 00 00 
127a6     0F 06 00 A0 
127aa     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0f, $06, $00, $a0, $10, $00, $00, $e2
127ae     70 00 00 00 
127b2     00 00 00 00 
127b6     00 00 00 00 
127ba     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
127be     70 00 00 00 
127c2     00 00 00 00 
127c6     00 00 00 00 
127ca     00 00 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e2
127ce     74 C2 00 00 
127d2     00 00 01 AC 
127d6     10 00 00 AA 
127da     10 00 00 00 | 	byte	$74, $c2, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
127de     04 C2 00 00 
127e2     00 00 00 00 
127e6     0F 07 00 AA 
127ea     1E 94 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $0f, $07, $00, $aa, $1e, $94, $00, $00
127ee     0C 10 00 00 
127f2     00 00 00 00 
127f6     0F 08 00 BE 
127fa     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $0f, $08, $00, $be, $10, $00, $00, $d6
127fe     71 02 00 00 
12802     00 00 01 7D 
12806     1F 0A 00 00 
1280a     04 A1 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $1f, $0a, $00, $00, $04, $a1, $00, $ca
1280e     73 F0 00 00 
12812     00 00 00 00 
12816     04 A2 00 00 
1281a     06 02 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $04, $a2, $00, $00, $06, $02, $00, $00
1281e     04 C1 00 00 
12822     0F 02 00 00 
12826     06 02 00 00 
1282a     06 02 00 00 | 	byte	$04, $c1, $00, $00, $0f, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
1282e     06 02 00 00 
12832     0E 60 00 00 
12836     06 02 00 00 
1283a     06 02 00 00 | 	byte	$06, $02, $00, $00, $0e, $60, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
1283e     06 02 00 00 
12842     0A 02 00 00 
12846     06 02 00 00 
1284a     06 02 00 00 | 	byte	$06, $02, $00, $00, $0a, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
1284e     06 02 00 00 
12852     0E 6F 00 00 
12856     06 02 00 BE 
1285a     3C 20 00 AA | 	byte	$06, $02, $00, $00, $0e, $6f, $00, $00, $06, $02, $00, $be, $3c, $20, $00, $aa
1285e     7F 05 00 00 
12862     00 00 00 00 
12866     06 02 00 BE 
1286a     3C 30 00 97 | 	byte	$7f, $05, $00, $00, $00, $00, $00, $00, $06, $02, $00, $be, $3c, $30, $00, $97
1286e     73 F0 00 00 
12872     0D 00 00 00 
12876     06 02 00 00 
1287a     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00
1287e     00 00 00 00 
      ...             
12942     00 00 00 00 
12946     00 00 00    | 	byte	$00[203]
12949     7F 1F 05 00 
1294d     8F 71 04 00 
12951     CA 90 00 00 
12955     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
12959     00 00 00 00 
1295d     87 73 F0 00 
12961     00 00 00 00 
12965     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
12969     A0 10 00 00 
1296d     00 04 C2 00 
12971     00 00 00 00 
12975     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12979     7F 1C 20 00 
1297d     00 04 C2 00 
12981     00 00 00 00 
12985     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12989     BE 10 00 00 
1298d     97 73 F0 00 
12991     00 00 00 00 
12995     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
12999     00 00 00 00 
1299d     AA 73 F0 00 
129a1     00 00 00 00 
129a5     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
129a9     F0 40 00 00 
129ad     97 70 00 00 
129b1     FE B0 00 00 
129b5     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
129b9     00 00 00 00 
129bd     AA 7C 20 00 
129c1     00 00 00 00 
129c5     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
129c9     D6 4A 06 00 
129cd     AA 70 00 00 
129d1     00 00 00 00 
129d5     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
129d9     F0 0E 93 00 
129dd     97 7C 20 00 
129e1     00 00 00 00 
129e5     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
129e9     F0 40 00 00 
129ed     B4 70 00 00 
129f1     00 00 00 00 
129f5     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
129f9     00 00 00 00 
129fd     AA 7C 20 00 
12a01     00 00 00 00 
12a05     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12a09     7F 10 00 00 
12a0d     CA 74 C1 00 
12a11     CA 90 00 00 
12a15     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $ca, $74, $c1, $00, $ca, $90, $00, $00, $be, $30, $00, $00
12a19     00 00 00 00 
12a1d     00          | 	byte	$00[5]
12a1e     06 01 00 00 
12a22     00 00 00 00 
12a26     00 00 00 A0 
12a2a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
12a2e     06 01 00 00 
12a32     00 00 00 BE 
12a36     A0 00 00 7F 
12a3a     1C 20 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
12a3e     06 01 00 00 
12a42     00 00 00 BE 
12a46     A0 00 00 BE 
12a4a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
12a4e     06 01 00 00 
12a52     00 00 00 BE 
12a56     3C 20 00 AA 
12a5a     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $1c, $30, $00, $00
12a5e     06 01 00 00 
12a62     00 00 00 BE 
12a66     A0 00 00 A0 
12a6a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
12a6e     06 01 00 E2 
12a72     B0 00 00 BE 
12a76     D0 00 00 A0 
12a7a     1C 30 00 00 | 	byte	$06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
12a7e     06 01 00 00 
12a82     00 00 00 00 
12a86     00 00 00 AA 
12a8a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
12a8e     06 01 00 00 
12a92     00 00 00 BE 
12a96     A0 00 00 BE 
12a9a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
12a9e     06 01 00 00 
12aa2     00 00 00 00 
12aa6     00 00 00 AA 
12aaa     10 00 00 B4 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
12aae     70 00 00 00 
12ab2     00 00 00 BE 
12ab6     30 00 00 00 
12aba     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $ca
12abe     7C 20 00 00 
12ac2     00 00 00 BE 
12ac6     A0 00 00 A0 
12aca     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
12ace     71 04 00 FE 
12ad2     B0 00 00 BE 
12ad6     30 00 00 00 
12ada     0C 20 00 AA | 	byte	$71, $04, $00, $fe, $b0, $00, $00, $be, $30, $00, $00, $00, $0c, $20, $00, $aa
12ade     73 F0 00 00 
12ae2     00 00 00 00 
12ae6     00 00 00 A0 
12aea     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
12aee     04 C1 00 00 
12af2     00 00 00 BE 
12af6     A0 00 00 A0 
12afa     1C 20 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $1c, $20, $00, $00
12afe     04 C1 00 00 
12b02     00 00 00 BE 
12b06     A0 00 00 A0 
12b0a     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
12b0e     70 00 00 00 
12b12     00 00 00 BE 
12b16     3C 20 00 00 
12b1a     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $aa
12b1e     73 F0 00 00 
12b22     00 00 00 BE 
12b26     A0 00 00 8F 
12b2a     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $97
12b2e     73 F0 00 E2 
12b32     B0 00 00 BE 
12b36     D0 00 00 00 
12b3a     0C 20 00 00 | 	byte	$73, $f0, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00, $0c, $20, $00, $00
12b3e     0C 10 00 00 
12b42     00 00 00 00 
12b46     00 00 00 8F 
12b4a     1E 93 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
12b4e     73 F0 00 00 
12b52     00 00 00 BE 
12b56     A0 00 00 A0 
12b5a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
12b5e     0C 10 00 00 
12b62     00 00 00 00 
12b66     00 00 00 8F 
12b6a     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
12b6e     74 C1 00 00 
12b72     00 00 00 BE 
12b76     30 00 00 00 
12b7a     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
12b7e     04 C1 00 00 
12b82     00 00 00 BE 
12b86     A0 00 00 BE 
12b8a     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $aa
12b8e     70 00 00 CA 
12b92     90 00 00 BE 
12b96     30 00 00 00 
12b9a     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $b4
12b9e     73 F0 00 00 
12ba2     00 00 00 00 
12ba6     00 00 00 A0 
12baa     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $ca
12bae     73 F0 00 00 
12bb2     00 00 00 BE 
12bb6     A0 00 00 00 
12bba     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
12bbe     04 C1 00 00 
12bc2     00 00 00 BE 
12bc6     A0 00 00 8F 
12bca     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
12bce     06 01 00 00 
12bd2     00 00 00 BE 
12bd6     3C 20 00 00 
12bda     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
12bde     06 01 00 00 
12be2     00 00 00 BE 
12be6     A0 00 00 7F 
12bea     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $00
12bee     06 01 00 00 
12bf2     00 00 00 BE 
12bf6     D0 00 00 00 
12bfa     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
12bfe     04 C2 00 00 
12c02     00 00 00 00 
12c06     00 00 00 00 
12c0a     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
12c0e     06 01 00 00 
12c12     00 00 00 BE 
12c16     A0 00 00 00 
12c1a     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
12c1e     06 01 00 00 
12c22     00 00 00 00 
12c26     00 00 00 A0 
12c2a     1C 20 00 AA | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $aa
12c2e     70 00 00 00 
12c32     00 00 00 BE 
12c36     30 00 00 8F 
12c3a     1C 30 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $97
12c3e     73 F0 00 00 
12c42     0D 00 00 BE 
12c46     A0 00 00 00 
12c4a     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
12c4e     00 00 00 00 
      ...             
12d42     00 00 00 00 
12d46     00 00 00    | 	byte	$00[251]
12d49     7F 1F 05 00 
12d4d     87 74 C2 00 
12d51     CA 90 00 00 
12d55     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $87, $74, $c2, $00, $ca, $90, $00, $00, $be, $30, $00, $00
12d59     7F 1C 30 00 
12d5d     00 04 C2 00 
12d61     00 00 00 00 
12d65     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
12d69     A0 10 00 00 
12d6d     00 04 C2 00 
12d71     00 00 00 00 
12d75     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12d79     7F 1C 30 00 
12d7d     00 04 C2 00 
12d81     00 00 00 00 
12d85     BE A0 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12d89     BE 10 00 00 
12d8d     97 73 F0 00 
12d91     00 00 00 00 
12d95     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
12d99     A0 1C 30 00 
12d9d     87 73 F0 00 
12da1     00 00 00 00 
12da5     BE A0 00 00 | 	byte	$a0, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12da9     F0 40 00 00 
12dad     7F 70 00 00 
12db1     FE B0 00 00 
12db5     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $7f, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
12db9     00 00 00 00 
12dbd     87 7C 20 00 
12dc1     00 00 00 00 
12dc5     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
12dc9     D6 4A 06 00 
12dcd     87 70 00 00 
12dd1     00 00 00 00 
12dd5     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $87, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12dd9     D6 0E 93 00 
12ddd     7F 7C 20 00 
12de1     00 00 00 00 
12de5     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $7f, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
12de9     F0 40 00 00 
12ded     97 70 00 00 
12df1     00 00 00 00 
12df5     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
12df9     00 00 00 00 
12dfd     87 7C 20 00 
12e01     00 00 00 00 
12e05     BE A0 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12e09     7F 10 00 00 
12e0d     8F 71 04 00 
12e11     CA 90 00 00 
12e15     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
12e19     00 00 00 00 
12e1d     87 73 F0 00 
12e21     00 00 00 00 
12e25     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
12e29     A0 10 00 00 
12e2d     00 04 C2 00 
12e31     00 00 00 00 
12e35     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12e39     7F 1C 20 00 
12e3d     00 06 01 00 
12e41     00 00 00 00 
12e45     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12e49     BE 10 00 00 
12e4d     00 06 01 00 
12e51     00 00 00 00 
12e55     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00
12e59     AA 1C 30 00 
12e5d     00 06 01 00 
12e61     00 00 00 00 
12e65     BE A0 00 00 | 	byte	$aa, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12e69     A0 10 00 00 
12e6d     00 06 01 00 
12e71     E2 B0 00 00 
12e75     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00
12e79     A0 1C 30 00 
12e7d     00 06 01 00 
12e81     00 00 00 00 
12e85     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
12e89     AA 10 00 00 
12e8d     B4 71 03 00 
12e91     00 00 00 00 
12e95     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $b4, $71, $03, $00, $00, $00, $00, $00, $be, $a0, $00, $00
12e99     BE 10 00 00 
12e9d     AA 73 F0 00 
12ea1     00 00 00 00 
12ea5     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
12ea9     AA 10 00 00 
12ead     B4 73 F0 00 
12eb1     00 00 00 00 
12eb5     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00
12eb9     00 00 00 00 
12ebd     00 00 00 00 
12ec1     00 00 00 00 | 	byte	$00[12]
12ec5     BE A0 00 00 
12ec9     A0 10 00 00 
12ecd     D6 71 06 00 
12ed1     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $71, $06, $00, $fe, $b0, $00, $00
12ed5     BE 30 00 00 
12ed9     00 0C 20 00 
12edd     CA 73 F0 00 
12ee1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
12ee5     00 00 00 00 
12ee9     A0 0E 93 00 
12eed     00 04 C2 00 
12ef1     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00
12ef5     BE A0 00 00 
12ef9     A0 1C 20 00 
12efd     00 04 C2 00 
12f01     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00
12f05     BE A0 00 00 
12f09     A0 10 00 00 
12f0d     B4 73 F0 00 
12f11     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00
12f15     BE 3C 20 00 
12f19     00 00 00 00 
12f1d     CA 73 F0 00 
12f21     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
12f25     BE A0 00 00 
12f29     AA 10 00 00 
12f2d     E2 74 C2 00 
12f31     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $e2, $b0, $00, $00
12f35     BE D0 00 00 
12f39     00 0C 20 00 
12f3d     00 06 01 00 
12f41     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00
12f45     00 00 00 00 
12f49     AA 1E 93 01 
12f4d     0D 74 C2 00 
12f51     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $01, $0d, $74, $c2, $00, $00, $00, $00, $00
12f55     BE A0 00 00 
12f59     BE 10 00 00 
12f5d     00 0C 10 00 
12f61     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
12f65     00 00 00 00 
12f69     AA 10 00 00 
12f6d     E2 74 C2 00 
12f71     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $00, $00, $00, $00
12f75     BE 30 00 00 
12f79     00 00 00 00 
12f7d     00 0C 10 00 
12f81     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
12f85     BE A0 00 00 
12f89     BE 10 00 00 
12f8d     D6 71 08 00 
12f91     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $71, $08, $00, $ca, $90, $00, $00
12f95     BE 30 00 00 
12f99     00 00 00 00 
12f9d     CA 73 F0 00 
12fa1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
12fa5     00 00 00 00 
12fa9     A0 10 00 00 
12fad     00 04 C2 00 
12fb1     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00
12fb5     BE A0 00 00 
12fb9     00 00 00 00 
12fbd     00 06 01 00 
12fc1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
12fc5     BE A0 00 00 
12fc9     AA 10 00 00 
12fcd     00 06 01 00 
12fd1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
12fd5     BE 3C 20 00 
12fd9     AA 1E 93 00 
12fdd     00 06 01 00 
12fe1     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00
12fe5     BE A0 00 00 
12fe9     BE 10 00 00 
12fed     00 06 01 00 
12ff1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
12ff5     BE D0 00 00 
12ff9     00 04 A1 00 
12ffd     00 06 01 00 
13001     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00
13005     BE A0 00 00 
13009     00 06 01 00 
1300d     00 06 01 00 
13011     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
13015     BE AC 20 00 
13019     00 06 01 00 
1301d     00 06 01 00 
13021     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
13025     BE 3C 20 00 
13029     00 06 01 00 
1302d     00 06 01 00 
13031     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
13035     BE D0 00 00 
13039     00 06 01 00 
1303d     00 06 01 00 
13041     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00
13045     00 00 00 00 
      ...             
13141     00 00 00 00 
13145     00 00 00 00 | 	byte	$00[260]
13149     BE 10 00 00 
1314d     00 06 01 00 
13151     CA 90 00 00 
13155     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00
13159     00 00 00 00 
1315d     00          | 	byte	$00[5]
1315e     06 01 00 00 
13162     00 00 00 00 
13166     00 00 00 A0 
1316a     1E 93 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
1316e     06 01 00 00 
13172     00 00 00 BE 
13176     A0 00 00 8F 
1317a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
1317e     06 01 00 00 
13182     00 00 00 BE 
13186     A0 00 00 A0 
1318a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
1318e     06 01 00 00 
13192     00 00 00 BE 
13196     3C 20 00 AA 
1319a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
1319e     06 01 00 00 
131a2     00 00 00 BE 
131a6     A0 00 00 A0 
131aa     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
131ae     06 01 00 00 
131b2     00 00 00 BE 
131b6     D0 00 00 A0 
131ba     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
131be     06 01 00 00 
131c2     00 00 00 00 
131c6     00 00 00 AA 
131ca     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
131ce     06 01 00 00 
131d2     00 00 00 BE 
131d6     A0 00 00 AA 
131da     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
131de     06 01 00 00 
131e2     00 00 00 00 
131e6     00 00 00 BE 
131ea     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
131ee     06 01 00 00 
131f2     00 00 00 BE 
131f6     30 00 00 BE 
131fa     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
131fe     0C 00 00 00 
13202     00 00 00 BE 
13206     A0 00 00 AA 
1320a     10 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
1320e     00 00 01 0D 
13212     B0 00 00 BE 
13216     30 00 00 00 
1321a     00 00 00 00 | 	byte	$00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
1321e     00 00 00 00 
13222     00 00 00 00 
13226     00 00 00    | 	byte	$00[11]
13229     AA 1E 93 00 
1322d     00 00 00 00 
13231     00 00 00 00 
13235     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13239     A0 10 00 00 
1323d     00 00 00 00 
13241     00 00 00 00 
13245     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13249     AA 10 00 00 
1324d     00 00 00 00 
13251     00 00 00 00 
13255     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
13259     BE 10 00 00 
1325d     00 00 00 00 
13261     00 00 00 00 
13265     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13269     AA 10 00 00 
1326d     00 00 00 00 
13271     00 00 00 00 
13275     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
13279     00 04 82 00 
1327d     00 00 00 00 
13281     00 00 00 00 
13285     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13289     00 06 01 00 
1328d     00 00 00 00 
13291     00 00 00 00 
13295     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13299     00 06 01 00 
1329d     00 00 00 00 
132a1     00 00 00 00 
132a5     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
132a9     00 06 01 00 
132ad     00 00 00 00 
132b1     00 00 00 00 
132b5     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
132b9     00 06 01 00 
132bd     00 00 00 00 
132c1     00 00 00 00 
132c5     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
132c9     A0 10 00 00 
132cd     00 00 00 00 
132d1     CA 90 00 00 
132d5     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
132d9     00 00 00 00 
132dd     00 00 00 00 
132e1     00 00 00 00 
132e5     00 00 00 00 | 	byte	$00[16]
132e9     BE 1E 93 00 
132ed     00 00 00 00 
132f1     00 00 00 00 
132f5     BE A0 00 00 | 	byte	$be, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
132f9     A0 10 00 00 
132fd     00 00 00 00 
13301     00 00 00 00 
13305     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13309     8F 10 00 00 
1330d     00 00 00 00 
13311     00 00 00 00 
13315     BE 3C 20 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
13319     A0 10 00 00 
1331d     00 00 00 00 
13321     00 00 00 00 
13325     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13329     7F 10 00 00 
1332d     00 00 00 00 
13331     00 00 00 00 
13335     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
13339     7F 1C 30 00 
1333d     00 00 00 00 
13341     00 00 00 00 
13345     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13349     BE 40 00 00 
1334d     00 00 00 00 
13351     00 00 00 00 
13355     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13359     BE 4A 08 00 
1335d     00 00 00 00 
13361     00 00 00 00 
13365     00 00 00 00 | 	byte	$be, $4a, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13369     D6 40 00 00 
1336d     00 00 00 00 
13371     00 00 00 00 
13375     BE 30 00 00 | 	byte	$d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
13379     BE 40 00 00 
1337d     00 00 00 00 
13381     00 00 00 00 
13385     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13389     7F 10 00 00 
1338d     00 00 00 01 
13391     0D B0 00 00 
13395     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
13399     7F 1C 30 00 
1339d     00 00 00 00 
133a1     00 00 00 00 
133a5     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
133a9     7F 1E 93 00 
133ad     00 00 00 00 
133b1     00 00 00 00 
133b5     BE A0 00 00 | 	byte	$7f, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
133b9     F0 40 00 00 
133bd     00 00 00 00 
133c1     00 00 00 00 
133c5     BE A0 00 00 | 	byte	$f0, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
133c9     7F 10 00 00 
133cd     00 00 00 00 
133d1     00 00 00 00 
133d5     BE 3C 20 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
133d9     8F 10 00 00 
133dd     00 00 00 00 
133e1     00 00 00 00 
133e5     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
133e9     7F 10 00 00 
133ed     00 00 00 00 
133f1     00 00 00 00 
133f5     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
133f9     00 04 81 00 
133fd     00 00 00 00 
13401     00 00 00 00 
13405     00 00 00 00 | 	byte	$00, $04, $81, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13409     00 06 01 00 
1340d     00 00 00 00 
13411     00 00 00 00 
13415     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13419     00 06 01 00 
1341d     00 00 00 00 
13421     00 00 00 00 
13425     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13429     00 06 01 00 
1342d     00 00 00 00 
13431     00 00 00 00 
13435     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
13439     00 06 01 00 
1343d     00 0D 00 00 
13441     00 00 00 00 
13445     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13449     00 00 00 00 
      ...             
13541     00 00 00 00 
13545     00 00 00 00 | 	byte	$00[256]
13549     BE 10 00 00 
1354d     00 00 00 00 
13551     CA 90 00 00 
13555     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
13559     00 00 00 00 
1355d     00 00 00 00 
13561     00 00 00 00 
13565     00 00 00 00 | 	byte	$00[16]
13569     A0 1E 93 00 
1356d     00 00 00 00 
13571     00 00 00 00 
13575     BE A0 00 00 | 	byte	$a0, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13579     8F 10 00 00 
1357d     00 00 00 00 
13581     00 00 00 00 
13585     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13589     A0 10 00 00 
1358d     00 00 00 00 
13591     00 00 00 00 
13595     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
13599     AA 10 00 00 
1359d     00 00 00 00 
135a1     00 00 00 00 
135a5     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
135a9     A0 10 00 00 
135ad     00 00 00 00 
135b1     00 00 00 00 
135b5     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
135b9     A0 1C 30 00 
135bd     00 00 00 00 
135c1     00 00 00 00 
135c5     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
135c9     AA 10 00 00 
135cd     00 00 00 00 
135d1     00 00 00 00 
135d5     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
135d9     AA 1C 30 00 
135dd     00 00 00 00 
135e1     00 00 00 00 
135e5     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
135e9     BE 10 00 00 
135ed     00 00 00 00 
135f1     00 00 00 00 
135f5     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
135f9     BE 1C 30 00 
135fd     00 00 00 00 
13601     00 00 00 00 
13605     BE A0 00 00 | 	byte	$be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13609     AA 10 00 00 
1360d     00 00 00 01 
13611     0D B0 00 00 
13615     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
13619     00 00 00 00 
1361d     00 00 00 00 
13621     00 00 00 00 
13625     00 00 00 00 | 	byte	$00[16]
13629     AA 1E 93 00 
1362d     00 00 00 00 
13631     00 00 00 00 
13635     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13639     A0 10 00 00 
1363d     00 00 00 00 
13641     00 00 00 00 
13645     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13649     AA 10 00 00 
1364d     00 00 00 00 
13651     00 00 00 00 
13655     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
13659     BE 10 00 00 
1365d     00 00 00 00 
13661     00 00 00 00 
13665     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13669     AA 10 00 00 
1366d     00 00 00 00 
13671     00 00 00 00 
13675     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
13679     00 04 82 00 
1367d     00 00 00 00 
13681     00 00 00 00 
13685     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13689     00 06 01 00 
1368d     00 00 00 00 
13691     00 00 00 00 
13695     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13699     00 06 01 00 
1369d     00 00 00 00 
136a1     00 00 00 00 
136a5     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
136a9     00 06 01 00 
136ad     00 00 00 00 
136b1     00 00 00 00 
136b5     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
136b9     00 06 01 00 
136bd     00 00 00 00 
136c1     00 00 00 00 
136c5     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
136c9     A0 10 00 00 
136cd     00 00 00 00 
136d1     FE B0 00 00 
136d5     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
136d9     00 0C 20 00 
136dd     00 00 00 00 
136e1     00 00 00 00 
136e5     00 00 00 00 | 	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
136e9     A0 0E 93 00 
136ed     00 00 00 00 
136f1     00 00 00 00 
136f5     BE A0 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
136f9     A0 1C 20 00 
136fd     00 00 00 00 
13701     00 00 00 00 
13705     BE A0 00 00 | 	byte	$a0, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
13709     A0 10 00 00 
1370d     00 00 00 00 
13711     00 00 00 00 
13715     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
13719     00 00 00 00 
1371d     00 00 00 00 
13721     00 00 00 00 | 	byte	$00[12]
13725     BE A0 00 00 
13729     AA 10 00 00 
1372d     00 00 00 00 
13731     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $e2, $b0, $00, $00
13735     BE D0 00 00 
13739     00 0C 20 00 
1373d     00 00 00 00 
13741     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
13745     00 00 00 00 
13749     AA 1E 93 00 
1374d     00 00 00 00 
13751     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
13755     BE A0 00 00 
13759     BE 10 00 00 
1375d     00 00 00 00 
13761     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13765     00 00 00 00 
13769     AA 10 00 00 
1376d     00 00 00 00 
13771     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13775     BE 30 00 00 
13779     00 00 00 00 
1377d     00 00 00 00 
13781     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13785     BE A0 00 00 
13789     BE 10 00 00 
1378d     00 00 00 00 
13791     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00
13795     BE 30 00 00 
13799     00 00 00 00 
1379d     00 00 00 00 
137a1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
137a5     00 00 00 00 
137a9     A0 10 00 00 
137ad     00 00 00 00 
137b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
137b5     BE A0 00 00 
137b9     00 00 00 00 
137bd     00 00 00 00 
137c1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
137c5     BE A0 00 00 
137c9     AA 10 00 00 
137cd     00 00 00 00 
137d1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
137d5     BE 3C 20 00 
137d9     AA 1E 93 00 
137dd     00 00 00 00 
137e1     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
137e5     BE A0 00 00 
137e9     BE 10 00 00 
137ed     00 00 00 00 
137f1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
137f5     BE D0 00 00 
137f9     00 04 A1 00 
137fd     00 00 00 00 
13801     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
13805     BE A0 00 00 
13809     00 06 01 00 
1380d     00 00 00 00 
13811     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
13815     BE AC 20 00 
13819     00 06 01 00 
1381d     00 00 00 00 
13821     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
13825     BE 3C 20 00 
13829     00 06 01 00 
1382d     AA 70 00 00 
13831     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $aa, $70, $00, $00, $00, $00, $00, $00
13835     BE D0 00 00 
13839     00 06 01 00 
1383d     97 73 F0 00 
13841     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $97, $73, $f0, $00, $00, $0d, $00, $00
13845     00 00 00 00 
      ...             
13941     00 00 00 00 
13945     00 00 00 00 | 	byte	$00[260]
13949     BE 10 00 00 
1394d     CA 70 00 00 
13951     CA 90 00 00 
13955     BE 30 00 00 | 	byte	$be, $10, $00, $00, $ca, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
13959     00 00 00 00 
1395d     00          | 	byte	$00[5]
1395e     04 C2 00 00 
13962     00 00 00 00 
13966     00 00 00 A0 
1396a     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
1396e     04 C2 00 00 
13972     00 00 00 BE 
13976     A0 00 00 8F 
1397a     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $aa
1397e     70 00 00 00 
13982     00 00 00 BE 
13986     A0 00 00 A0 
1398a     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
1398e     73 F0 00 00 
13992     00 00 00 BE 
13996     3C 20 00 AA 
1399a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
1399e     0C 10 00 00 
139a2     00 00 00 BE 
139a6     A0 00 00 A0 
139aa     10 00 00 8F | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $8f
139ae     71 04 00 00 
139b2     00 00 00 BE 
139b6     D0 00 00 A0 
139ba     1C 30 00 87 | 	byte	$71, $04, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $87
139be     73 F0 00 00 
139c2     00 00 00 00 
139c6     00 00 00 AA 
139ca     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
139ce     04 C2 00 00 
139d2     00 00 00 BE 
139d6     A0 00 00 AA 
139da     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
139de     04 C2 00 00 
139e2     00 00 00 00 
139e6     00 00 00 BE 
139ea     10 00 00 97 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
139ee     70 00 00 00 
139f2     00 00 00 BE 
139f6     30 00 00 BE 
139fa     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
139fe     00 00 00 00 
13a02     00 00 00    | 	byte	$00[7]
13a05     BE A0 00 00 
13a09     AA 10 00 00 
13a0d     8F 71 03 01 
13a11     0D B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $8f, $71, $03, $01, $0d, $b0, $00, $00
13a15     BE 30 00 00 
13a19     00 00 00 00 
13a1d     87 73 F0 00 
13a21     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00
13a25     00 00 00 00 
13a29     AA 1E 93 00 
13a2d     00 04 C1 00 
13a31     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00
13a35     BE A0 00 00 
13a39     A0 10 00 00 
13a3d     00 06 01 00 
13a41     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
13a45     BE A0 00 00 
13a49     AA 10 00 00 
13a4d     00 06 01 00 
13a51     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
13a55     BE 3C 20 00 
13a59     BE 10 00 00 
13a5d     00 06 01 00 
13a61     00 00 00 00 | 	byte	$be, $3c, $20, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
13a65     BE A0 00 00 
13a69     AA 10 00 00 
13a6d     00 04 A2 00 
13a71     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $04, $a2, $00, $00, $00, $00, $00
13a75     BE D0 00 00 
13a79     00 04 82 00 
13a7d     00 06 01 00 
13a81     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $06, $01, $00, $00, $00, $00, $00
13a85     00 00 00 00 
13a89     00          | 	byte	$00[5]
13a8a     06 01 00 00 
13a8e     06 01 00 00 
13a92     00 00 00 BE 
13a96     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
13a9a     06 01 00 00 
13a9e     06 01 00 00 
13aa2     00 00 00 00 
13aa6     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13aaa     06 01 00 00 
13aae     06 01 00 00 
13ab2     00 00 00 BE 
13ab6     30 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
13aba     06 01 00 00 
13abe     06 01 00 00 
13ac2     00 00 00 BE 
13ac6     A0 00 00 A0 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
13aca     10 00 00 AA 
13ace     70 00 00 CA 
13ad2     90 00 00 BE 
13ad6     30 00 00 00 | 	byte	$10, $00, $00, $aa, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
13ada     00 00 00 00 
13ade     04 C2 00 00 
13ae2     00 00 00 00 
13ae6     00 00 00 BE | 	byte	$00, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
13aea     1E 93 00 00 
13aee     04 C2 00 00 
13af2     00 00 00 BE 
13af6     A0 00 00 A0 | 	byte	$1e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
13afa     10 00 00 B4 
13afe     73 F0 00 00 
13b02     00 00 00 BE 
13b06     A0 00 00 8F | 	byte	$10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f
13b0a     10 00 00 CA 
13b0e     73 F0 00 00 
13b12     00 00 00 BE 
13b16     3C 20 00 A0 | 	byte	$10, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $a0
13b1a     10 00 00 00 
13b1e     0C 10 00 00 
13b22     00 00 00 BE 
13b26     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
13b2a     10 00 00 BE 
13b2e     71 06 00 00 
13b32     00 00 00 BE 
13b36     D0 00 00 7F | 	byte	$10, $00, $00, $be, $71, $06, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $7f
13b3a     1C 30 00 B4 
13b3e     73 F0 00 00 
13b42     00 00 00 00 
13b46     00 00 00 BE | 	byte	$1c, $30, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
13b4a     40 00 00 CA 
13b4e     70 00 00 00 
13b52     00 00 00 BE 
13b56     A0 00 00 BE | 	byte	$40, $00, $00, $ca, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13b5a     4A 08 00 AA 
13b5e     73 F0 00 00 
13b62     00 00 00 00 
13b66     00 00 00 D6 | 	byte	$4a, $08, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
13b6a     40 00 00 97 
13b6e     73 F0 00 00 
13b72     00 00 00 BE 
13b76     30 00 00 BE | 	byte	$40, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be
13b7a     40 00 00 00 
13b7e     0C 10 00 00 
13b82     00 00 00 BE 
13b86     A0 00 00 7F | 	byte	$40, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
13b8a     10 00 00 8F 
13b8e     71 02 01 0D 
13b92     B0 00 00 BE 
13b96     30 00 00 7F | 	byte	$10, $00, $00, $8f, $71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $7f
13b9a     1C 30 00 87 
13b9e     73 F0 00 00 
13ba2     00 00 00 00 
13ba6     00 00 00 7F | 	byte	$1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
13baa     1E 93 00 00 
13bae     04 C1 00 00 
13bb2     00 00 00 BE 
13bb6     A0 00 00 F0 | 	byte	$1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0
13bba     40 00 00 00 
13bbe     04 C1 00 00 
13bc2     00 00 00 BE 
13bc6     A0 00 00 7F | 	byte	$40, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
13bca     10 00 00 7F 
13bce     73 F0 00 00 
13bd2     00 00 00 BE 
13bd6     3C 20 00 8F | 	byte	$10, $00, $00, $7f, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $8f
13bda     10 00 00 00 
13bde     0C 10 00 00 
13be2     00 00 00 BE 
13be6     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
13bea     10 00 00 8F 
13bee     71 03 00 00 
13bf2     00 00 00 BE 
13bf6     D0 00 00 00 | 	byte	$10, $00, $00, $8f, $71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
13bfa     04 81 00 87 
13bfe     73 F0 00 00 
13c02     00 00 00 00 
13c06     00 00 00 00 | 	byte	$04, $81, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13c0a     06 01 00 00 
13c0e     04 C1 00 00 
13c12     00 00 00 BE 
13c16     A0 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
13c1a     06 01 00 00 
13c1e     06 01 00 00 
13c22     00 00 00 00 
13c26     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13c2a     06 01 00 00 
13c2e     04 C2 00 00 
13c32     00 00 00 BE 
13c36     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
13c3a     06 01 00 00 
13c3e     06 01 00 00 
13c42     0D 00 00 BE 
13c46     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00
13c4a     00 00 00 00 
      ...             
13d42     00 00 00 00 
13d46     00 00 00    | 	byte	$00[255]
13d49     A0 10 00 00 
13d4d     7F 74 C1 00 
13d51     FE B0 00 00 
13d55     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $7f, $74, $c1, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
13d59     00 00 00 00 
13d5d     00          | 	byte	$00[5]
13d5e     04 C2 00 00 
13d62     00 00 00 00 
13d66     00 00 00 A0 
13d6a     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
13d6e     04 C2 00 00 
13d72     00 00 00 BE 
13d76     A0 00 00 8F 
13d7a     10 00 00 87 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $87
13d7e     70 00 00 00 
13d82     00 00 00 BE 
13d86     A0 00 00 A0 
13d8a     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
13d8e     73 F0 00 00 
13d92     00 00 00 BE 
13d96     3C 20 00 AA 
13d9a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
13d9e     0C 10 00 00 
13da2     00 00 00 BE 
13da6     A0 00 00 A0 
13daa     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $a0
13dae     71 03 00 00 
13db2     00 00 00 BE 
13db6     D0 00 00 A0 
13dba     1C 30 00 97 | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $97
13dbe     73 F0 00 00 
13dc2     00 00 00 00 
13dc6     00 00 00 AA 
13dca     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
13dce     04 C1 00 00 
13dd2     00 00 00 BE 
13dd6     A0 00 00 AA 
13dda     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
13dde     04 C1 00 00 
13de2     00 00 00 00 
13de6     00 00 00 BE 
13dea     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $aa
13dee     73 F0 00 00 
13df2     00 00 00 BE 
13df6     30 00 00 BE 
13dfa     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
13dfe     0C 10 00 00 
13e02     00 00 00 BE 
13e06     A0 00 00 AA 
13e0a     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $a0
13e0e     71 02 01 0D 
13e12     B0 00 00 BE 
13e16     30 00 00 00 
13e1a     00 00 00 97 | 	byte	$71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $97
13e1e     73 F0 00 00 
13e22     00 00 00 00 
13e26     00 00 00 AA 
13e2a     1E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
13e2e     04 C1 00 00 
13e32     00 00 00 BE 
13e36     A0 00 00 A0 
13e3a     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
13e3e     04 C1 00 00 
13e42     00 00 00 BE 
13e46     A0 00 00 AA 
13e4a     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $b4
13e4e     71 03 00 00 
13e52     00 00 00 BE 
13e56     3C 20 00 BE 
13e5a     10 00 00 AA | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $be, $10, $00, $00, $aa
13e5e     7C 10 00 00 
13e62     00 00 00 BE 
13e66     A0 00 00 AA 
13e6a     10 00 00 00 | 	byte	$7c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
13e6e     00 00 00 00 
13e72     00 00 00    | 	byte	$00[7]
13e75     BE D0 00 00 
13e79     00 04 82 00 
13e7d     00 00 00 00 
13e81     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00
13e85     00 00 00 00 
13e89     00          | 	byte	$00[5]
13e8a     06 01 00 B4 
13e8e     74 C2 00 00 
13e92     00 00 00 BE 
13e96     A0 00 00 00 | 	byte	$06, $01, $00, $b4, $74, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
13e9a     06 01 00 00 
13e9e     04 C2 00 00 
13ea2     00 00 00 00 
13ea6     00 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13eaa     06 01 00 00 
13eae     04 C2 00 00 
13eb2     00 00 00 BE 
13eb6     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
13eba     06 01 00 00 
13ebe     04 C2 00 00 
13ec2     00 00 00 BE 
13ec6     A0 00 00 BE | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13eca     10 00 00 D6 
13ece     71 04 00 CA 
13ed2     90 00 00 BE 
13ed6     30 00 00 00 | 	byte	$10, $00, $00, $d6, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
13eda     0C 20 00 CA 
13ede     73 F0 00 00 
13ee2     00 00 00 00 
13ee6     00 00 00 BE | 	byte	$0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
13eea     0E 93 00 00 
13eee     04 C2 00 00 
13ef2     00 00 00 BE 
13ef6     A0 00 00 BE | 	byte	$0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13efa     1C 20 00 00 
13efe     06 01 00 00 
13f02     00 00 00 BE 
13f06     A0 00 00 BE | 	byte	$1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13f0a     10 00 00 00 
13f0e     06 01 00 00 
13f12     00 00 00 BE 
13f16     3C 20 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
13f1a     00 00 00 00 
13f1e     06 01 00 00 
13f22     00 00 00 BE 
13f26     A0 00 00 D6 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
13f2a     10 00 00 00 
13f2e     06 01 00 E2 
13f32     B0 00 00 BE 
13f36     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00
13f3a     0C 20 00 00 
13f3e     06 01 00 00 
13f42     00 00 00 00 
13f46     00 00 00 D6 | 	byte	$0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
13f4a     1E 93 00 00 
13f4e     06 01 00 00 
13f52     00 00 00 BE 
13f56     A0 00 00 D6 | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
13f5a     10 00 00 00 
13f5e     06 01 00 00 
13f62     00 00 00 00 
13f66     00 00 00 D6 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
13f6a     10 00 00 00 
13f6e     06 01 00 00 
13f72     00 00 00 BE 
13f76     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
13f7a     00 00 00 00 
13f7e     06 01 00 00 
13f82     00 00 00 BE 
13f86     A0 00 00 BE | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13f8a     10 00 00 00 
13f8e     06 01 00 CA 
13f92     90 00 00 BE 
13f96     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
13f9a     00 00 00 00 
13f9e     06 01 00 00 
13fa2     00 00 00 00 
13fa6     00 00 00 A0 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
13faa     10 00 00 00 
13fae     06 01 00 00 
13fb2     00 00 00 BE 
13fb6     A0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
13fba     00 00 00 00 
13fbe     06 01 00 00 
13fc2     00 00 00 BE 
13fc6     A0 00 00 AA | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa
13fca     10 00 00 00 
13fce     06 01 00 00 
13fd2     00 00 00 BE 
13fd6     3C 20 00 AA | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa
13fda     1E 93 00 00 
13fde     06 01 00 00 
13fe2     00 00 00 BE 
13fe6     A0 00 00 BE | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
13fea     10 00 00 00 
13fee     06 01 00 00 
13ff2     00 00 00 BE 
13ff6     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
13ffa     04 A1 00 00 
13ffe     06 01 00 00 
14002     00 00 00 BE 
14006     A0 00 00 00 | 	byte	$04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
1400a     06 01 00 00 
1400e     06 01 00 00 
14012     00 00 00 BE 
14016     AC 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $ac, $20, $00, $00
1401a     06 01 00 00 
1401e     06 01 00 00 
14022     00 00 00 BE 
14026     3C 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
1402a     06 01 00 00 
1402e     06 01 00 00 
14032     00 00 00 BE 
14036     D0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
1403a     06 01 00 00 
1403e     06 01 00 00 
14042     0D 00 00 00 
14046     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
1404a     00 00 00 00 
      ...             
14142     00 00 00 00 
14146     00 00 00    | 	byte	$00[255]
14149     7F 1F 05 00 
1414d     BE 20 00 00 
14151     CA 90 00 00 
14155     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
14159     00 00 00 00 
1415d     00          | 	byte	$00[5]
1415e     0A 02 00 00 
14162     00 00 00 00 
14166     00 00 00 A0 
1416a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1416e     0A 02 00 00 
14172     00 00 00 BE 
14176     A0 00 00 7F 
1417a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
1417e     0A 02 00 00 
14182     00 00 00 BE 
14186     A0 00 00 BE 
1418a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
1418e     0A 02 00 00 
14192     00 00 00 BE 
14196     3C 20 00 00 
1419a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
1419e     0A 02 00 00 
141a2     00 00 00 BE 
141a6     A0 00 00 F0 
141aa     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
141ae     20 00 00 FE 
141b2     B0 00 00 BE 
141b6     D0 00 00 00 
141ba     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
141be     00 00 00 00 
141c2     00 00 00 00 
141c6     00 00 00    | 	byte	$00[11]
141c9     D6 4A 06 00 
141cd     BE 2E 93 00 
141d1     00 00 00 00 
141d5     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
141d9     F0 0E 93 00 
141dd     BE 20 00 00 
141e1     00 00 00 00 
141e5     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
141e9     F0 40 00 00 
141ed     D6 20 00 00 
141f1     00 00 00 00 
141f5     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
141f9     00 00 00 00 
141fd     00          | 	byte	$00[5]
141fe     0C 20 00 00 
14202     00 00 00 BE 
14206     A0 00 00 7F 
1420a     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
1420e     20 00 00 CA 
14212     90 00 00 BE 
14216     30 00 00 00 
1421a     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
1421e     0A 02 00 00 
14222     00 00 00 00 
14226     00 00 00 A0 
1422a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1422e     0A 02 00 00 
14232     00 00 00 BE 
14236     A0 00 00 7F 
1423a     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
1423e     0A 02 00 00 
14242     00 00 00 BE 
14246     A0 00 00 BE 
1424a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
1424e     00 00 00 00 
14252     00 00 00    | 	byte	$00[7]
14255     BE 3C 20 00 
14259     AA 1C 30 00 
1425d     BE 0E 93 00 
14261     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
14265     BE A0 00 00 
14269     A0 10 00 00 
1426d     D6 20 00 00 
14271     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14275     BE D0 00 00 
14279     A0 1C 30 00 
1427d     00 0A 02 00 
14281     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14285     00 00 00 00 
14289     AA 10 00 00 
1428d     00 0A 02 00 
14291     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14295     BE A0 00 00 
14299     BE 10 00 00 
1429d     D6 2C 20 00 
142a1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
142a5     00 00 00 00 
142a9     AA 10 00 00 
142ad     D6 2A 04 00 
142b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
142b5     BE 30 00 00 
142b9     00 00 00 00 
142bd     00 0A 04 00 
142c1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
142c5     BE A0 00 00 
142c9     A0 10 00 00 
142cd     F0 20 00 00 
142d1     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
142d5     BE 30 00 00 
142d9     00 0C 20 00 
142dd     00 00 00 00 
142e1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
142e5     00 00 00 00 
142e9     A0 0E 93 00 
142ed     F0 20 00 00 
142f1     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
142f5     BE A0 00 00 
142f9     A0 1C 20 00 
142fd     F0 2C 30 00 
14301     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
14305     BE A0 00 00 
14309     A0 10 00 00 
1430d     F0 20 00 00 
14311     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
14315     BE 3C 20 00 
14319     00 00 00 00 
1431d     00 00 00 00 
14321     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14325     BE A0 00 00 
14329     8F 10 00 00 
1432d     D6 20 00 00 
14331     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14335     BE D0 00 00 
14339     00 0C 20 00 
1433d     00 00 00 00 
14341     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
14345     00 00 00 00 
14349     8F 1E 93 00 
1434d     D6 20 00 00 
14351     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14355     BE A0 00 00 
14359     A0 10 00 00 
1435d     BE 2C 30 00 
14361     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
14365     00 00 00 00 
14369     8F 10 00 00 
1436d     D6 20 00 00 
14371     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14375     BE 30 00 00 
14379     00 00 00 00 
1437d     00 00 00 00 
14381     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14385     BE A0 00 00 
14389     BE 10 00 00 
1438d     BE 20 00 00 
14391     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $be, $20, $00, $00, $ca, $90, $00, $00
14395     BE 30 00 00 
14399     00 00 00 00 
1439d     BE 2C 30 00 
143a1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
143a5     00 00 00 00 
143a9     A0 10 00 01 
143ad     7D 20 00 00 
143b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
143b5     BE A0 00 00 
143b9     00 00 00 00 
143bd     BE 2C 30 00 
143c1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
143c5     BE A0 00 00 
143c9     8F 10 00 00 
143cd     00 0A 06 00 
143d1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00
143d5     BE 3C 20 00 
143d9     00 00 00 00 
143dd     BE 0E 93 00 
143e1     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $be, $0e, $93, $00, $00, $00, $00, $00
143e5     BE A0 00 00 
143e9     7F 10 00 00 
143ed     BE 2C 30 00 
143f1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $7f, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
143f5     BE D0 00 00 
143f9     00 00 00 00 
143fd     00 0A 02 00 
14401     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14405     00 00 00 00 
14409     00 00 00 00 
1440d     00          | 	byte	$00[9]
1440e     0A 02 00 00 
14412     00 00 00 BE 
14416     A0 00 00 00 
1441a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
1441e     0A 02 00 00 
14422     00 00 00 00 
14426     00 00 00 A0 
1442a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
1442e     0A 02 00 00 
14432     00 00 00 BE 
14436     30 00 00 8F 
1443a     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $00
1443e     0A 02 00 00 
14442     0D 00 00 BE 
14446     A0 00 00 00 
1444a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
1444e     00 00 00 00 
      ...             
14542     00 00 00 00 
14546     00 00 00    | 	byte	$00[251]
14549     7F 1F 05 00 
1454d     BE 20 00 00 
14551     CA 90 00 00 
14555     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
14559     00 00 00 00 
1455d     00          | 	byte	$00[5]
1455e     0A 02 00 00 
14562     00 00 00 00 
14566     00 00 00 A0 
1456a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1456e     0A 02 00 00 
14572     00 00 00 BE 
14576     A0 00 00 7F 
1457a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
1457e     0A 02 00 00 
14582     00 00 00 BE 
14586     A0 00 00 BE 
1458a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
1458e     0A 02 00 00 
14592     00 00 00 BE 
14596     3C 20 00 00 
1459a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
1459e     0A 02 00 00 
145a2     00 00 00 BE 
145a6     A0 00 00 F0 
145aa     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
145ae     20 00 00 FE 
145b2     B0 00 00 BE 
145b6     D0 00 00 00 
145ba     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
145be     00 00 00 00 
145c2     00 00 00 00 
145c6     00 00 00    | 	byte	$00[11]
145c9     D6 4A 06 00 
145cd     BE 2E 93 00 
145d1     00 00 00 00 
145d5     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
145d9     F0 0E 93 00 
145dd     BE 20 00 00 
145e1     00 00 00 00 
145e5     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
145e9     F0 40 00 00 
145ed     D6 20 00 00 
145f1     00 00 00 00 
145f5     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
145f9     00 00 00 00 
145fd     00          | 	byte	$00[5]
145fe     0C 20 00 00 
14602     00 00 00 BE 
14606     A0 00 00 7F 
1460a     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
1460e     20 00 00 CA 
14612     90 00 00 BE 
14616     30 00 00 00 
1461a     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
1461e     0A 02 00 00 
14622     00 00 00 00 
14626     00 00 00 A0 
1462a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1462e     0A 02 00 00 
14632     00 00 00 BE 
14636     A0 00 00 7F 
1463a     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
1463e     0A 02 00 00 
14642     00 00 00 BE 
14646     A0 00 00 BE 
1464a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
1464e     00 00 00 00 
14652     00 00 00    | 	byte	$00[7]
14655     BE 3C 20 00 
14659     AA 1C 30 00 
1465d     BE 0E 93 00 
14661     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
14665     BE A0 00 00 
14669     A0 10 00 00 
1466d     D6 20 00 00 
14671     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14675     BE D0 00 00 
14679     A0 1C 30 00 
1467d     00 0A 02 00 
14681     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14685     00 00 00 00 
14689     AA 10 00 00 
1468d     00 0A 02 00 
14691     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14695     BE A0 00 00 
14699     BE 10 00 00 
1469d     D6 2C 20 00 
146a1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
146a5     00 00 00 00 
146a9     AA 10 00 00 
146ad     D6 2A 04 00 
146b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
146b5     BE 30 00 00 
146b9     00 00 00 00 
146bd     00 0A 04 00 
146c1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
146c5     BE A0 00 00 
146c9     A0 10 00 00 
146cd     F0 20 00 00 
146d1     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
146d5     BE 30 00 00 
146d9     00 0C 20 00 
146dd     00 00 00 00 
146e1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
146e5     00 00 00 00 
146e9     A0 0E 93 00 
146ed     F0 20 00 00 
146f1     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
146f5     BE A0 00 00 
146f9     A0 1C 20 00 
146fd     F0 2C 30 00 
14701     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
14705     BE A0 00 00 
14709     A0 10 00 00 
1470d     F0 20 00 00 
14711     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
14715     BE 3C 20 00 
14719     00 00 00 00 
1471d     00 00 00 00 
14721     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14725     BE A0 00 00 
14729     8F 10 00 00 
1472d     D6 20 00 00 
14731     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14735     BE D0 00 00 
14739     00 0C 20 00 
1473d     00 00 00 00 
14741     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
14745     00 00 00 00 
14749     8F 1E 93 00 
1474d     D6 20 00 00 
14751     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14755     BE A0 00 00 
14759     A0 10 00 00 
1475d     BE 2C 30 00 
14761     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
14765     00 00 00 00 
14769     8F 10 00 00 
1476d     D6 20 00 00 
14771     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14775     BE 30 00 00 
14779     00 00 00 00 
1477d     00 00 00 00 
14781     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14785     BE A0 00 00 
14789     BE 10 00 01 
1478d     1D 20 00 00 
14791     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
14795     BE 30 00 00 
14799     BE 1C 30 00 
1479d     00 00 00 00 
147a1     00 00 00 00 | 	byte	$be, $30, $00, $00, $be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
147a5     00 00 00 00 
147a9     BE 10 00 00 
147ad     00 00 00 00 
147b1     00 0F 06 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $0f, $06, $00
147b5     BE A0 00 00 
147b9     BE 1C 30 01 
147bd     1D 2C 30 00 
147c1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1c, $30, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
147c5     BE A0 00 00 
147c9     D6 10 00 00 
147cd     00 00 00 00 
147d1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
147d5     BE 3C 20 00 
147d9     BE 1E D4 00 
147dd     00 00 00 00 
147e1     00 0F 07 00 | 	byte	$be, $3c, $20, $00, $be, $1e, $d4, $00, $00, $00, $00, $00, $00, $0f, $07, $00
147e5     BE A0 00 00 
147e9     BE 10 00 01 
147ed     1D 0C 20 00 
147f1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
147f5     BE D0 00 00 
147f9     00 0A 01 00 
147fd     00 00 00 00 
14801     00 0A 01 00 | 	byte	$be, $d0, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00
14805     00 00 00 00 
14809     00          | 	byte	$00[5]
1480a     0A 01 00 00 
1480e     00 00 00 00 
14812     0A 01 00 00 
14816     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1481a     0A 01 01 1D 
1481e     0C 10 00 00 
14822     0A 01 00 00 
14826     00 00 00 00 | 	byte	$0a, $01, $01, $1d, $0c, $10, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1482a     0A 01 00 00 
1482e     00 00 00 00 
14832     0A 01 00 00 
14836     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1483a     0A 01 00 00 
1483e     00 00 00 00 
14842     0A 01 00 00 
14846     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1484a     0A 01 00 00 
1484e     0C 00 00 00 
14852     0A 01 00 00 
14856     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0c, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1485a     0A 01 00 00 
1485e     0E 60 00 00 
14862     0A 01 00 00 
14866     0F 02 00 00 | 	byte	$0a, $01, $00, $00, $0e, $60, $00, $00, $0a, $01, $00, $00, $0f, $02, $00, $00
1486a     0A 01 00 00 
1486e     0E 6F 00 00 
14872     0A 01 00 00 
14876     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0e, $6f, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
1487a     0C 00 00 00 
1487e     00 00 00 00 
14882     0C 00 00 00 
14886     00 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00
1488a     0F 1F 00 00 
1488e     00 00 00 00 
14892     00 00 00 00 
14896     00 00 00 00 | 	byte	$0f, $1f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1489a     00 00 00 00 
      ...             
14942     00 00 00 00 
14946     00 00 00    | 	byte	$00[175]
14949     7F 1F 05 00 
1494d     BE 20 00 00 
14951     CA 90 00 00 
14955     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
14959     00 00 00 00 
1495d     00          | 	byte	$00[5]
1495e     0A 02 00 00 
14962     00 00 00 00 
14966     00 00 00 A0 
1496a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
1496e     0A 02 00 00 
14972     00 00 00 BE 
14976     A0 00 00 7F 
1497a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
1497e     0A 02 00 00 
14982     00 00 00 BE 
14986     A0 00 00 BE 
1498a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
1498e     0A 02 00 00 
14992     00 00 00 BE 
14996     3C 20 00 00 
1499a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
1499e     0A 02 00 00 
149a2     00 00 00 BE 
149a6     A0 00 00 F0 
149aa     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
149ae     20 00 00 FE 
149b2     B0 00 00 BE 
149b6     D0 00 00 00 
149ba     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
149be     00 00 00 00 
149c2     00 00 00 00 
149c6     00 00 00    | 	byte	$00[11]
149c9     D6 4A 06 00 
149cd     BE 2E 93 00 
149d1     00 00 00 00 
149d5     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
149d9     F0 0E 93 00 
149dd     BE 20 00 00 
149e1     00 00 00 00 
149e5     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
149e9     F0 40 00 00 
149ed     D6 20 00 00 
149f1     00 00 00 00 
149f5     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
149f9     00 00 00 00 
149fd     00          | 	byte	$00[5]
149fe     0C 20 00 00 
14a02     00 00 00 BE 
14a06     A0 00 00 7F 
14a0a     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
14a0e     20 00 00 CA 
14a12     90 00 00 BE 
14a16     30 00 00 00 
14a1a     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
14a1e     0A 02 00 00 
14a22     00 00 00 00 
14a26     00 00 00 A0 
14a2a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
14a2e     0A 02 00 00 
14a32     00 00 00 BE 
14a36     A0 00 00 7F 
14a3a     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
14a3e     0A 02 00 00 
14a42     00 00 00 BE 
14a46     A0 00 00 BE 
14a4a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
14a4e     00 00 00 00 
14a52     00 00 00    | 	byte	$00[7]
14a55     BE 3C 20 00 
14a59     AA 1C 30 00 
14a5d     BE 0E 93 00 
14a61     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
14a65     BE A0 00 00 
14a69     A0 10 00 00 
14a6d     D6 20 00 00 
14a71     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14a75     BE D0 00 00 
14a79     A0 1C 30 00 
14a7d     00 0A 02 00 
14a81     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14a85     00 00 00 00 
14a89     AA 10 00 00 
14a8d     00 0A 02 00 
14a91     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
14a95     BE A0 00 00 
14a99     BE 10 00 00 
14a9d     D6 2C 20 00 
14aa1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
14aa5     00 00 00 00 
14aa9     AA 10 00 00 
14aad     D6 2A 04 00 
14ab1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
14ab5     BE 30 00 00 
14ab9     00 00 00 00 
14abd     00 0A 04 00 
14ac1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
14ac5     BE A0 00 00 
14ac9     A0 10 00 00 
14acd     F0 20 00 00 
14ad1     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
14ad5     BE 30 00 00 
14ad9     00 0C 20 00 
14add     00 00 00 00 
14ae1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
14ae5     00 00 00 00 
14ae9     A0 0E 93 00 
14aed     F0 20 00 00 
14af1     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
14af5     BE A0 00 00 
14af9     A0 1C 20 00 
14afd     F0 2C 30 00 
14b01     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
14b05     BE A0 00 00 
14b09     A0 10 00 00 
14b0d     F0 20 00 00 
14b11     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
14b15     BE 3C 20 00 
14b19     00 00 00 00 
14b1d     00 00 00 00 
14b21     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14b25     BE A0 00 00 
14b29     8F 10 00 00 
14b2d     D6 20 00 00 
14b31     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
14b35     BE D0 00 00 
14b39     00 0C 20 00 
14b3d     00 00 00 00 
14b41     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
14b45     00 00 00 00 
14b49     8F 1E 93 00 
14b4d     D6 20 00 00 
14b51     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14b55     BE A0 00 00 
14b59     A0 10 00 00 
14b5d     BE 2C 30 00 
14b61     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
14b65     00 00 00 00 
14b69     8F 10 00 00 
14b6d     D6 20 00 00 
14b71     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
14b75     BE 30 00 00 
14b79     00 00 00 00 
14b7d     00 00 00 00 
14b81     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14b85     BE A0 00 00 
14b89     BE 10 00 01 
14b8d     1D 20 00 00 
14b91     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
14b95     BE 30 00 00 
14b99     00 00 00 00 
14b9d     00 00 00 00 
14ba1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14ba5     00 00 00 00 
14ba9     BE 10 00 00 
14bad     00 00 00 00 
14bb1     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14bb5     BE A0 00 00 
14bb9     00 00 00 01 
14bbd     1D 2C 30 00 
14bc1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
14bc5     BE A0 00 00 
14bc9     D6 10 00 00 
14bcd     00 00 00 00 
14bd1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14bd5     BE 3C 20 00 
14bd9     00 00 00 00 
14bdd     00 00 00 00 
14be1     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14be5     BE A0 00 00 
14be9     BE 10 00 01 
14bed     1D 0C 20 00 
14bf1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
14bf5     BE D0 00 00 
14bf9     00 00 00 00 
14bfd     00 00 00 00 
14c01     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14c05     00 00 00 00 
14c09     BE 10 00 00 
14c0d     00 00 00 00 
14c11     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14c15     BE A0 00 00 
14c19     BE 1E D3 01 
14c1d     1D 0C 10 00 
14c21     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1e, $d3, $01, $1d, $0c, $10, $00, $00, $00, $00, $00
14c25     BE AC 20 00 
14c29     A0 10 00 00 
14c2d     00 00 00 00 
14c31     00 00 00 00 | 	byte	$be, $ac, $20, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14c35     BE 30 00 00 
14c39     00 00 00 00 
14c3d     00 00 00 00 
14c41     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14c45     BE AD 00 00 
14c49     00 00 00 00 
14c4d     00 00 00 00 
14c51     00 00 00 00 | 	byte	$be, $ad, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14c55     00 00 00 00 
      ...             
14d45     00 00 00 00 
14d49     00          | 	byte	$00[245]
14d4a     08 09 06 07 
14d4e     06 08 09 08 
14d52     09 0C 0A 09 
14d56     0C 0E 0D 07 | 	byte	$08, $09, $06, $07, $06, $08, $09, $08, $09, $0c, $0a, $09, $0c, $0e, $0d, $07
14d5a     07 07 0A 0C 
14d5e     0A 09 0A 08 
14d62     0A 09 0A 0C 
14d66     0E 0E 0D 0E | 	byte	$07, $07, $0a, $0c, $0a, $09, $0a, $08, $0a, $09, $0a, $0c, $0e, $0e, $0d, $0e
14d6a     0D 0E 0C 0C 
14d6e     12 04 1B 08 
14d72     04 08 13 21 
14d76     FF 09 09 13 | 	byte	$0d, $0e, $0c, $0c, $12, $04, $1b, $08, $04, $08, $13, $21, $ff, $09, $09, $13
14d7a     F7 FF F1 FD 
14d7e     09 FE 08 08 
14d82     F3 FF FF 00 
14d86     13 25 13 15 | 	byte	$f7, $ff, $f1, $fd, $09, $fe, $08, $08, $f3, $ff, $ff, $00, $13, $25, $13, $15
14d8a     22 12 2B 31 
14d8e     00 F7 FF 30 
14d92     18 38 26 31 
14d96     12 4C 15 1B | 	byte	$22, $12, $2b, $31, $00, $f7, $ff, $30, $18, $38, $26, $31, $12, $4c, $15, $1b
14d9a     13 25 26 1C 
14d9e     01 1B 13 FF 
14da2     ED EC EB E0 
14da6     DB D4 C7 C6 | 	byte	$13, $25, $26, $1c, $01, $1b, $13, $ff, $ed, $ec, $eb, $e0, $db, $d4, $c7, $c6
14daa     D0 D9 F6 E4 
14dae     CF FF ED DE 
14db2     FF C7 C1 D9 
14db6     F6 E4 F6 F2 | 	byte	$d0, $d9, $f6, $e4, $cf, $ff, $ed, $de, $ff, $c7, $c1, $d9, $f6, $e4, $f6, $f2
14dba     F0 F6 FF E4 
14dbe     E7 F9 DF EC 
14dc2     0C 09 12 2E 
14dc6     26 12 1B 36 | 	byte	$f0, $f6, $ff, $e4, $e7, $f9, $df, $ec, $0c, $09, $12, $2e, $26, $12, $1b, $36
14dca     1C 34 3C 18 
14dce     2E 26 1B 39 
14dd2     25 4B 39 38 
14dd6     4C 4B 5B 4C | 	byte	$1c, $34, $3c, $18, $2e, $26, $1b, $39, $25, $4b, $39, $38, $4c, $4b, $5b, $4c
14dda     2B 33 48 1C 
14dde     2E 39 2A 34 
14de2     34 32 1E 1C 
14de6     22 18 12 25 | 	byte	$2b, $33, $48, $1c, $2e, $39, $2a, $34, $34, $32, $1e, $1c, $22, $18, $12, $25
14dea     09 25 30 00 
14dee     E2 FA 00 CF 
14df2     EA C8 E2 FF 
14df6     F7 E5 ED E2 | 	byte	$09, $25, $30, $00, $e2, $fa, $00, $cf, $ea, $c8, $e2, $ff, $f7, $e5, $ed, $e2
14dfa     FD F6 F2 D0 
14dfe     CF E2 E4 B0 
14e02     D9 DA C6 E0 
14e06     D5 BC CD C9 | 	byte	$fd, $f6, $f2, $d0, $cf, $e2, $e4, $b0, $d9, $da, $c6, $e0, $d5, $bc, $cd, $c9
14e0a     CF F6 E8 F6 
14e0e     20 2A 46 4C 
14e12     26 20 2C 18 
14e16     1A 13 16 26 | 	byte	$cf, $f6, $e8, $f6, $20, $2a, $46, $4c, $26, $20, $2c, $18, $1a, $13, $16, $26
14e1a     2E 48 39 3D 
14e1e     4C 36 42 4E 
14e22     39 2A 42 46 
14e26     39 33 2B 1C | 	byte	$2e, $48, $39, $3d, $4c, $36, $42, $4e, $39, $2a, $42, $46, $39, $33, $2b, $1c
14e2a     1E 00 DA C6 
14e2e     F3 EE EC F2 
14e32     DB F1 FC 02 
14e36     ED F6 F0 DA | 	byte	$1e, $00, $da, $c6, $f3, $ee, $ec, $f2, $db, $f1, $fc, $02, $ed, $f6, $f0, $da
14e3a     DA C0 CF D5 
14e3e     C9 C4 BD B8 
14e42     C1 C0 A6 C6 
14e46     CE C6 CD C6 | 	byte	$da, $c0, $cf, $d5, $c9, $c4, $bd, $b8, $c1, $c0, $a6, $c6, $ce, $c6, $cd, $c6
14e4a     EC EE FA 09 
14e4e     F9 12 33 13 
14e52     FD FD 12 20 
14e56     25 25 3A 3F | 	byte	$ec, $ee, $fa, $09, $f9, $12, $33, $13, $fd, $fd, $12, $20, $25, $25, $3a, $3f
14e5a     49 4C 3E 4B 
14e5e     51 39 42 56 
14e62     26 2E 3D 26 
14e66     20 2E 38 4B | 	byte	$49, $4c, $3e, $4b, $51, $39, $42, $56, $26, $2e, $3d, $26, $20, $2e, $38, $4b
14e6a     43 26 28 38 
14e6e     45 39 2C 3A 
14e72     3A 36 32 18 
14e76     00 12 0E 09 | 	byte	$43, $26, $28, $38, $45, $39, $2c, $3a, $3a, $36, $32, $18, $00, $12, $0e, $09
14e7a     00 FF 12 2C 
14e7e     20 33 43 2B 
14e82     2A 26 09 00 
14e86     FF 00 F8 12 | 	byte	$00, $ff, $12, $2c, $20, $33, $43, $2b, $2a, $26, $09, $00, $ff, $00, $f8, $12
14e8a     00 DA EC FE 
14e8e     F2 F0 F0 DA 
14e92     F6 16 0C 08 
14e96     1B 1A 18 12 | 	byte	$00, $da, $ec, $fe, $f2, $f0, $f0, $da, $f6, $16, $0c, $08, $1b, $1a, $18, $12
14e9a     13 F7 EC F0 
14e9e     EA F1 F0 E6 
14ea2     F1 0D 0A 06 
14ea6     14 13 20 21 | 	byte	$13, $f7, $ec, $f0, $ea, $f1, $f0, $e6, $f1, $0d, $0a, $06, $14, $13, $20, $21
14eaa     13 12 25 2D 
14eae     21 09 ED F6 
14eb2     F2 DA D4 D0 
14eb6     D9 DA D2 E2 | 	byte	$13, $12, $25, $2d, $21, $09, $ed, $f6, $f2, $da, $d4, $d0, $d9, $da, $d2, $e2
14eba     EB FD 00 ED 
14ebe     E4 EA DC CF 
14ec2     D6 DA D0 CF 
14ec6     C8 BD BA CF | 	byte	$eb, $fd, $00, $ed, $e4, $ea, $dc, $cf, $d6, $da, $d0, $cf, $c8, $bd, $ba, $cf
14eca     CC B4 B2 CF 
14ece     D6 D9 E4 DE 
14ed2     FF 10 04 19 
14ed6     1C 13 10 0F | 	byte	$cc, $b4, $b2, $cf, $d6, $d9, $e4, $de, $ff, $10, $04, $19, $1c, $13, $10, $0f
14eda     0F 19 28 26 
14ede     36 44 3E 46 
14ee2     5E 58 49 4B 
14ee6     52 45 39 2B | 	byte	$0f, $19, $28, $26, $36, $44, $3e, $46, $5e, $58, $49, $4b, $52, $45, $39, $2b
14eea     20 38 40 30 
14eee     32 26 21 2D 
14ef2     28 13 16 2B 
14ef6     33 30 30 1C | 	byte	$20, $38, $40, $30, $32, $26, $21, $2d, $28, $13, $16, $2b, $33, $30, $30, $1c
14efa     10 16 13 00 
14efe     FF 00 E1 F1 
14f02     06 01 0A 25 
14f06     30 30 26 13 | 	byte	$10, $16, $13, $00, $ff, $00, $e1, $f1, $06, $01, $0a, $25, $30, $30, $26, $13
14f0a     0E 14 20 13 
14f0e     00 FD 02 02 
14f12     00 01 F9 F8 
14f16     FA FF 0D 13 | 	byte	$0e, $14, $20, $13, $00, $fd, $02, $02, $00, $01, $f9, $f8, $fa, $ff, $0d, $13
14f1a     1B 33 3F 4A 
14f1e     3E 27 2E 32 
14f22     1F 09 FE FF 
14f26     12 10 09 01 | 	byte	$1b, $33, $3f, $4a, $3e, $27, $2e, $32, $1f, $09, $fe, $ff, $12, $10, $09, $01
14f2a     0D 21 1F 13 
14f2e     14 1B 2A 2B 
14f32     26 1F 26 13 
14f36     02 FA F9 ED | 	byte	$0d, $21, $1f, $13, $14, $1b, $2a, $2b, $26, $1f, $26, $13, $02, $fa, $f9, $ed
14f3a     DB D9 D0 CA 
14f3e     E1 E5 DF F1 
14f42     F9 F8 F6 E4 
14f46     E2 F4 ED D0 | 	byte	$db, $d9, $d0, $ca, $e1, $e5, $df, $f1, $f9, $f8, $f6, $e4, $e2, $f4, $ed, $d0
14f4a     C4 CD C9 C3 
14f4e     BD B4 BA C2 
14f52     C1 BE C1 C1 
14f56     C6 E0 E8 EC | 	byte	$c4, $cd, $c9, $c3, $bd, $b4, $ba, $c2, $c1, $be, $c1, $c1, $c6, $e0, $e8, $ec
14f5a     FF 07 02 00 
14f5e     F2 F6 06 00 
14f62     F3 FF 14 20 
14f66     26 2A 2E 46 | 	byte	$ff, $07, $02, $00, $f2, $f6, $06, $00, $f3, $ff, $14, $20, $26, $2a, $2e, $46
14f6a     58 4C 30 2C 
14f6e     2C 28 2D 26 
14f72     13 25 38 2B 
14f76     22 21 18 1B | 	byte	$58, $4c, $30, $2c, $2c, $28, $2d, $26, $13, $25, $38, $2b, $22, $21, $18, $1b
14f7a     25 24 26 26 
14f7e     26 27 26 1C 
14f82     0E 04 02 FC 
14f86     E6 D5 DE FF | 	byte	$25, $24, $26, $26, $26, $27, $26, $1c, $0e, $04, $02, $fc, $e6, $d5, $de, $ff
14f8a     18 18 1B 1C 
14f8e     12 20 1C 0E 
14f92     0D 04 F7 FD 
14f96     04 FD FC 04 | 	byte	$18, $18, $1b, $1c, $12, $20, $1c, $0e, $0d, $04, $f7, $fd, $04, $fd, $fc, $04
14f9a     04 00 FD FE 
14f9e     08 25 32 2D 
14fa2     36 4B 54 56 
14fa6     4C 34 2D 28 | 	byte	$04, $00, $fd, $fe, $08, $25, $32, $2d, $36, $4b, $54, $56, $4c, $34, $2d, $28
14faa     21 13 09 12 
14fae     18 14 1F 1E 
14fb2     20 24 20 24 
14fb6     26 26 21 1C | 	byte	$21, $13, $09, $12, $18, $14, $1f, $1e, $20, $24, $20, $24, $26, $26, $21, $1c
14fba     13 14 13 00 
14fbe     F2 E4 E1 DC 
14fc2     C7 C6 CF E2 
14fc6     EE E4 DC EB | 	byte	$13, $14, $13, $00, $f2, $e4, $e1, $dc, $c7, $c6, $cf, $e2, $ee, $e4, $dc, $eb
14fca     F0 ED F1 EB 
14fce     E5 E5 E4 DA 
14fd2     CD C4 C4 CF 
14fd6     D0 C8 CF D5 | 	byte	$f0, $ed, $f1, $eb, $e5, $e5, $e4, $da, $cd, $c4, $c4, $cf, $d0, $c8, $cf, $d5
14fda     D4 CF D6 EA 
14fde     F6 07 06 06 
14fe2     19 1F 10 0D 
14fe6     10 12 18 13 | 	byte	$d4, $cf, $d6, $ea, $f6, $07, $06, $06, $19, $1f, $10, $0d, $10, $12, $18, $13
14fea     04 0D 20 38 
14fee     42 40 40 45 
14ff2     44 3C 2D 21 
14ff6     1E 24 2A 26 | 	byte	$04, $0d, $20, $38, $42, $40, $40, $45, $44, $3c, $2d, $21, $1e, $24, $2a, $26
14ffa     1F 20 19 16 
14ffe     25 1C 0D 19 
15002     26 26 1A 13 
15006     0F 1E 1F 13 | 	byte	$1f, $20, $19, $16, $25, $1c, $0d, $19, $26, $26, $1a, $13, $0f, $1e, $1f, $13
1500a     F7 E6 DA D4 
1500e     E1 ED EE F7 
15012     FD FF 0F 13 
15016     0A 09 02 F8 | 	byte	$f7, $e6, $da, $d4, $e1, $ed, $ee, $f7, $fd, $ff, $0f, $13, $0a, $09, $02, $f8
1501a     E8 E2 F3 FE 
1501e     00 F6 E6 E4 
15022     F1 FC F7 FE 
15026     0D 1B 2E 38 | 	byte	$e8, $e2, $f3, $fe, $00, $f6, $e6, $e4, $f1, $fc, $f7, $fe, $0d, $1b, $2e, $38
1502a     42 48 46 43 
1502e     36 2D 26 20 
15032     21 1A 1B 27 
15036     26 21 2E 36 | 	byte	$42, $48, $46, $43, $36, $2d, $26, $20, $21, $1a, $1b, $27, $26, $21, $2e, $36
1503a     3A 3A 31 2E 
1503e     38 31 26 1B 
15042     18 16 0E 00 
15046     E6 DA DB E1 | 	byte	$3a, $3a, $31, $2e, $38, $31, $26, $1b, $18, $16, $0e, $00, $e6, $da, $db, $e1
1504a     DE DC D9 DB 
1504e     EC ED E4 E7 
15052     F1 F0 F1 E8 
15056     DA D9 DA C8 | 	byte	$de, $dc, $d9, $db, $ec, $ed, $e4, $e7, $f1, $f0, $f1, $e8, $da, $d9, $da, $c8
1505a     C6 CD CF CC 
1505e     C8 CD D6 DE 
15062     E4 E6 F1 08 
15066     18 13 0E 12 | 	byte	$c6, $cd, $cf, $cc, $c8, $cd, $d6, $de, $e4, $e6, $f1, $08, $18, $13, $0e, $12
1506a     22 28 27 26 
1506e     16 19 20 21 
15072     20 2E 3C 44 
15076     50 52 4C 3F | 	byte	$22, $28, $27, $26, $16, $19, $20, $21, $20, $2e, $3c, $44, $50, $52, $4c, $3f
1507a     37 38 38 32 
1507e     26 20 2D 30 
15082     26 1A 19 22 
15086     26 26 1C 18 | 	byte	$37, $38, $38, $32, $26, $20, $2d, $30, $26, $1a, $19, $22, $26, $26, $1c, $18
1508a     18 20 2A 28 
1508e     1E 0E 01 F7 
15092     ED E6 E6 EB 
15096     F1 F4 F3 FF | 	byte	$18, $20, $2a, $28, $1e, $0e, $01, $f7, $ed, $e6, $e6, $eb, $f1, $f4, $f3, $ff
1509a     08 16 15 04 
1509e     F4 F2 F1 F1 
150a2     EE EA E6 E6 
150a6     E7 EB E5 E1 | 	byte	$08, $16, $15, $04, $f4, $f2, $f1, $f1, $ee, $ea, $e6, $e6, $e7, $eb, $e5, $e1
150aa     EB EC EE FD 
150ae     0F 1E 2D 33 
150b2     32 30 26 1C 
150b6     16 18 13 09 | 	byte	$eb, $ec, $ee, $fd, $0f, $1e, $2d, $33, $32, $30, $26, $1c, $16, $18, $13, $09
150ba     03 08 0E 18 
150be     1F 20 20 27 
150c2     2C 2D 26 1B 
150c6     1E 1F 18 0E | 	byte	$03, $08, $0e, $18, $1f, $20, $20, $27, $2c, $2d, $26, $1b, $1e, $1f, $18, $0e
150ca     00 ED ED EA 
150ce     DF DA D9 E6 
150d2     DE D8 D6 DE 
150d6     E5 EC EE ED | 	byte	$00, $ed, $ed, $ea, $df, $da, $d9, $e6, $de, $d8, $d6, $de, $e5, $ec, $ee, $ed
150da     F1 ED DF D8 
150de     D9 DB D0 C8 
150e2     CC CF D3 D5 
150e6     CE CF E0 EE | 	byte	$f1, $ed, $df, $d8, $d9, $db, $d0, $c8, $cc, $cf, $d3, $d5, $ce, $cf, $e0, $ee
150ea     F8 FF 03 0A 
150ee     16 1F 20 20 
150f2     22 26 2B 28 
150f6     21 1E 25 33 | 	byte	$f8, $ff, $03, $0a, $16, $1f, $20, $20, $22, $26, $2b, $28, $21, $1e, $25, $33
150fa     46 48 46 4F 
150fe     56 51 4C 3C 
15102     34 36 34 30 
15106     2C 27 24 26 | 	byte	$46, $48, $46, $4f, $56, $51, $4c, $3c, $34, $36, $34, $30, $2c, $27, $24, $26
1510a     30 30 27 1C 
1510e     18 1B 24 26 
15112     22 27 27 1C 
15116     0C 00 F8 FC | 	byte	$30, $30, $27, $1c, $18, $1b, $24, $26, $22, $27, $27, $1c, $0c, $00, $f8, $fc
1511a     F4 EB EC F1 
1511e     FD 0D 16 10 
15122     0A 0D 09 02 
15126     FD F8 F8 F8 | 	byte	$f4, $eb, $ec, $f1, $fd, $0d, $16, $10, $0a, $0d, $09, $02, $fd, $f8, $f8, $f8
1512a     F2 F1 F3 F3 
1512e     ED EC F0 EE 
15132     F3 FF 0D 20 
15136     30 32 2D 28 | 	byte	$f2, $f1, $f3, $f3, $ed, $ec, $f0, $ee, $f3, $ff, $0d, $20, $30, $32, $2d, $28
1513a     2A 2D 26 18 
1513e     06 02 07 07 
15142     08 09 10 1C 
15146     24 1F 15 18 | 	byte	$2a, $2d, $26, $18, $06, $02, $07, $07, $08, $09, $10, $1c, $24, $1f, $15, $18
1514a     20 1F 15 10 
1514e     0A 04 FC ED 
15152     DE DF DF DA 
15156     D2 D2 D2 CC | 	byte	$20, $1f, $15, $10, $0a, $04, $fc, $ed, $de, $df, $df, $da, $d2, $d2, $d2, $cc
1515a     C4 C9 D6 DF 
1515e     DC D8 D9 DE 
15162     E1 DA CD C7 
15166     C7 C6 C4 C1 | 	byte	$c4, $c9, $d6, $df, $dc, $d8, $d9, $de, $e1, $da, $cd, $c7, $c7, $c6, $c4, $c1
1516a     BD BC C6 CD 
1516e     D5 DC E2 EC 
15172     FC 02 03 07 
15176     10 1F 26 21 | 	byte	$bd, $bc, $c6, $cd, $d5, $dc, $e2, $ec, $fc, $02, $03, $07, $10, $1f, $26, $21
1517a     18 16 1B 21 
1517e     27 2A 31 3D 
15182     4B 50 51 50 
15186     4C 49 4A 43 | 	byte	$18, $16, $1b, $21, $27, $2a, $31, $3d, $4b, $50, $51, $50, $4c, $49, $4a, $43
1518a     39 30 2A 32 
1518e     3A 34 30 34 
15192     34 2D 28 2A 
15196     31 37 39 32 | 	byte	$39, $30, $2a, $32, $3a, $34, $30, $34, $34, $2d, $28, $2a, $31, $37, $39, $32
1519a     27 22 1F 1C 
1519e     13 00 F4 F4 
151a2     F9 FD 03 0D 
151a6     18 19 18 15 | 	byte	$27, $22, $1f, $1c, $13, $00, $f4, $f4, $f9, $fd, $03, $0d, $18, $19, $18, $15
151aa     14 0C 06 01 
151ae     FD F9 F7 F7 
151b2     F9 F9 F7 F2 
151b6     E8 E6 F3 08 | 	byte	$14, $0c, $06, $01, $fd, $f9, $f7, $f7, $f9, $f9, $f7, $f2, $e8, $e6, $f3, $08
151ba     16 20 26 27 
151be     33 3A 34 2B 
151c2     26 22 18 0E 
151c6     06 06 0D 19 | 	byte	$16, $20, $26, $27, $33, $3a, $34, $2b, $26, $22, $18, $0e, $06, $06, $0d, $19
151ca     18 19 20 24 
151ce     26 26 26 26 
151d2     24 1C 13 0A 
151d6     02 F7 ED EA | 	byte	$18, $19, $20, $24, $26, $26, $26, $26, $24, $1c, $13, $0a, $02, $f7, $ed, $ea
151da     EB E8 DF D3 
151de     D0 D3 D6 D8 
151e2     D9 DA DC E2 
151e6     E6 E7 E1 DA | 	byte	$eb, $e8, $df, $d3, $d0, $d3, $d6, $d8, $d9, $da, $dc, $e2, $e6, $e7, $e1, $da
151ea     D6 D8 D5 CC 
151ee     C3 C0 C4 C6 
151f2     C3 C4 CF E0 
151f6     EB ED EA EC | 	byte	$d6, $d8, $d5, $cc, $c3, $c0, $c4, $c6, $c3, $c4, $cf, $e0, $eb, $ed, $ea, $ec
151fa     F9 03 0E 10 
151fe     0F 13 13 0F 
15202     0E 0F 0F 16 
15206     24 2E 31 33 | 	byte	$f9, $03, $0e, $10, $0f, $13, $13, $0f, $0e, $0f, $0f, $16, $24, $2e, $31, $33
1520a     3A 44 44 3E 
1520e     34 2B 27 24 
15212     1F 1E 22 27 
15216     26 22 1C 19 | 	byte	$3a, $44, $44, $3e, $34, $2b, $27, $24, $1f, $1e, $22, $27, $26, $22, $1c, $19
1521a     20 2A 2B 26 
1521e     26 28 27 27 
15222     1F 15 0A 02 
15226     F9 F4 F1 F9 | 	byte	$20, $2a, $2b, $26, $26, $28, $27, $27, $1f, $15, $0a, $02, $f9, $f4, $f1, $f9
1522a     03 0E 14 1B 
1522e     1F 1F 1C 18 
15232     13 0A 07 00 
15236     FF 06 08 00 | 	byte	$03, $0e, $14, $1b, $1f, $1f, $1c, $18, $13, $0a, $07, $00, $ff, $06, $08, $00
1523a     F4 F0 F1 FA 
1523e     03 0A 15 24 
15242     30 34 36 3C 
15246     40 43 39 2B | 	byte	$f4, $f0, $f1, $fa, $03, $0a, $15, $24, $30, $34, $36, $3c, $40, $43, $39, $2b
1524a     24 1E 18 18 
1524e     19 1C 1F 20 
15252     24 2A 2E 30 
15256     2D 2E 2C 27 | 	byte	$24, $1e, $18, $18, $19, $1c, $1f, $20, $24, $2a, $2e, $30, $2d, $2e, $2c, $27
1525a     1C 0E 04 00 
1525e     FD F7 EE E5 
15262     DF DA D9 D9 
15266     D6 D0 D2 DC | 	byte	$1c, $0e, $04, $00, $fd, $f7, $ee, $e5, $df, $da, $d9, $d9, $d6, $d0, $d2, $dc
1526a     E1 E0 E1 E2 
1526e     E6 E6 E0 D8 
15272     D3 D0 CC C4 
15276     BC BC C6 CF | 	byte	$e1, $e0, $e1, $e2, $e6, $e6, $e0, $d8, $d3, $d0, $cc, $c4, $bc, $bc, $c6, $cf
1527a     D9 E2 E6 E7 
1527e     EB F6 FF 01 
15282     06 0D 16 19 
15286     15 0F 0F 14 | 	byte	$d9, $e2, $e6, $e7, $eb, $f6, $ff, $01, $06, $0d, $16, $19, $15, $0f, $0f, $14
1528a     18 19 1B 22 
1528e     2E 38 43 44 
15292     44 44 3D 30 
15296     24 1C 21 26 | 	byte	$18, $19, $1b, $22, $2e, $38, $43, $44, $44, $44, $3d, $30, $24, $1c, $21, $26
1529a     26 22 1C 1B 
1529e     1E 22 26 1F 
152a2     1E 24 27 25 
152a6     26 21 1C 15 | 	byte	$26, $22, $1c, $1b, $1e, $22, $26, $1f, $1e, $24, $27, $25, $26, $21, $1c, $15
152aa     0C 00 F4 F0 
152ae     F0 F1 FA FF 
152b2     07 0A 10 16 
152b6     18 13 04 FC | 	byte	$0c, $00, $f4, $f0, $f0, $f1, $fa, $ff, $07, $0a, $10, $16, $18, $13, $04, $fc
152ba     FC FD FC F7 
152be     F2 F0 EA E5 
152c2     E6 EA F2 FA 
152c6     03 0A 15 22 | 	byte	$fc, $fd, $fc, $f7, $f2, $f0, $ea, $e5, $e6, $ea, $f2, $fa, $03, $0a, $15, $22
152ca     2B 33 37 34 
152ce     2D 22 1C 1C 
152d2     18 14 12 15 
152d6     1A 1F 20 24 | 	byte	$2b, $33, $37, $34, $2d, $22, $1c, $1c, $18, $14, $12, $15, $1a, $1f, $20, $24
152da     27 30 34 36 
152de     34 27 1C 18 
152e2     13 0F 04 FA 
152e6     F6 F3 EE E7 | 	byte	$27, $30, $34, $36, $34, $27, $1c, $18, $13, $0f, $04, $fa, $f6, $f3, $ee, $e7
152ea     E0 DE E0 E1 
152ee     E0 DF E7 EE 
152f2     F4 F2 F0 EE 
152f6     ED EC E8 DF | 	byte	$e0, $de, $e0, $e1, $e0, $df, $e7, $ee, $f4, $f2, $f0, $ee, $ed, $ec, $e8, $df
152fa     D3 C8 C6 CC 
152fe     D2 D6 D9 E0 
15302     EC F1 F3 F7 
15306     FD 04 0D 12 | 	byte	$d3, $c8, $c6, $cc, $d2, $d6, $d9, $e0, $ec, $f1, $f3, $f7, $fd, $04, $0d, $12
1530a     13 13 15 19 
1530e     18 14 13 18 
15312     1B 20 2A 33 
15316     40 46 4A 43 | 	byte	$13, $13, $15, $19, $18, $14, $13, $18, $1b, $20, $2a, $33, $40, $46, $4a, $43
1531a     32 2B 28 28 
1531e     26 20 19 19 
15322     1B 1A 19 1A 
15326     1B 19 1B 1F | 	byte	$32, $2b, $28, $28, $26, $20, $19, $19, $1b, $1a, $19, $1a, $1b, $19, $1b, $1f
1532a     21 21 22 21 
1532e     1C 15 09 00 
15332     F3 F2 F2 F1 
15336     F1 F7 FF 0A | 	byte	$21, $21, $22, $21, $1c, $15, $09, $00, $f3, $f2, $f2, $f1, $f1, $f7, $ff, $0a
1533a     10 13 10 0E 
1533e     09 04 00 00 
15342     FE F9 F2 E8 
15346     E7 E7 E8 EB | 	byte	$10, $13, $10, $0e, $09, $04, $00, $00, $fe, $f9, $f2, $e8, $e7, $e7, $e8, $eb
1534a     F2 F6 FD 02 
1534e     10 20 2C 30 
15352     32 31 2D 26 
15356     20 19 13 0F | 	byte	$f2, $f6, $fd, $02, $10, $20, $2c, $30, $32, $31, $2d, $26, $20, $19, $13, $0f
1535a     0E 10 14 13 
1535e     14 1B 27 2E 
15362     30 2B 26 22 
15366     20 18 09 04 | 	byte	$0e, $10, $14, $13, $14, $1b, $27, $2e, $30, $2b, $26, $22, $20, $18, $09, $04
1536a     FE F9 F1 E7 
1536e     E4 E1 DF DA 
15372     D3 D0 D2 D8 
15376     DC DF E0 E0 | 	byte	$fe, $f9, $f1, $e7, $e4, $e1, $df, $da, $d3, $d0, $d2, $d8, $dc, $df, $e0, $e0
1537a     E5 EC EE E8 
1537e     DC D3 CC C7 
15382     C3 C3 C8 CF 
15386     D8 DE E2 E7 | 	byte	$e5, $ec, $ee, $e8, $dc, $d3, $cc, $c7, $c3, $c3, $c8, $cf, $d8, $de, $e2, $e7
1538a     F1 FA FF 04 
1538e     09 10 16 1A 
15392     1B 1C 1E 1E 
15396     1C 1C 1C 25 | 	byte	$f1, $fa, $ff, $04, $09, $10, $16, $1a, $1b, $1c, $1e, $1e, $1c, $1c, $1c, $25
1539a     33 43 4F 4F 
1539e     4C 49 48 45 
153a2     3D 37 31 2B 
153a6     2A 2B 2B 26 | 	byte	$33, $43, $4f, $4f, $4c, $49, $48, $45, $3d, $37, $31, $2b, $2a, $2b, $2b, $26
153aa     25 27 27 28 
153ae     27 28 2D 32 
153b2     31 2C 26 1A 
153b6     13 0A 00 F7 | 	byte	$25, $27, $27, $28, $27, $28, $2d, $32, $31, $2c, $26, $1a, $13, $0a, $00, $f7
153ba     F2 F2 F4 F7 
153be     FF 08 0F 10 
153c2     0C 09 09 04 
153c6     04 02 FD F4 | 	byte	$f2, $f2, $f4, $f7, $ff, $08, $0f, $10, $0c, $09, $09, $04, $04, $02, $fd, $f4
153ca     ED E5 E4 E5 
153ce     E6 E6 E6 EA 
153d2     F3 FC 08 16 
153d6     20 28 2C 30 | 	byte	$ed, $e5, $e4, $e5, $e6, $e6, $e6, $ea, $f3, $fc, $08, $16, $20, $28, $2c, $30
153da     2E 28 1F 18 
153de     16 18 13 0C 
153e2     0A 0F 18 21 
153e6     26 28 2C 2E | 	byte	$2e, $28, $1f, $18, $16, $18, $13, $0c, $0a, $0f, $18, $21, $26, $28, $2c, $2e
153ea     2D 2B 21 1E 
153ee     16 0E 04 FA 
153f2     F3 EE EC E8 
153f6     DF D8 D9 DA | 	byte	$2d, $2b, $21, $1e, $16, $0e, $04, $fa, $f3, $ee, $ec, $e8, $df, $d8, $d9, $da
153fa     D9 D8 D5 D8 
153fe     DE E2 EA EB 
15402     EA EA E4 D5 
15406     CC C3 C0 C1 | 	byte	$d9, $d8, $d5, $d8, $de, $e2, $ea, $eb, $ea, $ea, $e4, $d5, $cc, $c3, $c0, $c1
1540a     C6 C9 CE D4 
1540e     DB E5 E8 ED 
15412     F4 FC 02 06 
15416     0A 10 16 18 | 	byte	$c6, $c9, $ce, $d4, $db, $e5, $e8, $ed, $f4, $fc, $02, $06, $0a, $10, $16, $18
1541a     18 13 0C 0C 
1541e     16 20 2A 34 
15422     3C 3D 42 44 
15426     43 3D 36 33 | 	byte	$18, $13, $0c, $0c, $16, $20, $2a, $34, $3c, $3d, $42, $44, $43, $3d, $36, $33
1542a     31 2B 26 21 
1542e     22 25 24 21 
15432     1F 20 25 2B 
15436     2D 30 31 30 | 	byte	$31, $2b, $26, $21, $22, $25, $24, $21, $1f, $20, $25, $2b, $2d, $30, $31, $30
1543a     2B 26 1C 13 
1543e     0A 01 F9 F7 
15442     F9 FF 08 0F 
15446     13 14 13 15 | 	byte	$2b, $26, $1c, $13, $0a, $01, $f9, $f7, $f9, $ff, $08, $0f, $13, $14, $13, $15
1544a     18 19 18 10 
1544e     09 00 FC F6 
15452     F4 F3 F2 ED 
15456     EE F3 FD 06 | 	byte	$18, $19, $18, $10, $09, $00, $fc, $f6, $f4, $f3, $f2, $ed, $ee, $f3, $fd, $06
1545a     0D 1A 25 32 
1545e     36 34 32 31 
15462     30 2B 26 1A 
15466     13 12 13 14 | 	byte	$0d, $1a, $25, $32, $36, $34, $32, $31, $30, $2b, $26, $1a, $13, $12, $13, $14
1546a     18 20 26 2C 
1546e     2E 2D 2C 2C 
15472     2C 26 18 0C 
15476     04 00 F9 F0 | 	byte	$18, $20, $26, $2c, $2e, $2d, $2c, $2c, $2c, $26, $18, $0c, $04, $00, $f9, $f0
1547a     E5 DF DA D6 
1547e     D5 D0 CD CD 
15482     CD CE D0 D6 
15486     DF E5 E7 E1 | 	byte	$e5, $df, $da, $d6, $d5, $d0, $cd, $cd, $cd, $ce, $d0, $d6, $df, $e5, $e7, $e1
1548a     DA CE C7 C2 
1548e     BD BB BB C1 
15492     CA CE D2 D9 
15496     E5 EC F0 F4 | 	byte	$da, $ce, $c7, $c2, $bd, $bb, $bb, $c1, $ca, $ce, $d2, $d9, $e5, $ec, $f0, $f4
1549a     F8 FD 08 12 
1549e     18 14 13 0C 
154a2     0C 13 1A 20 
154a6     27 2E 38 3F | 	byte	$f8, $fd, $08, $12, $18, $14, $13, $0c, $0c, $13, $1a, $20, $27, $2e, $38, $3f
154aa     43 42 40 42 
154ae     3E 39 30 2B 
154b2     28 27 26 1E 
154b6     1C 1C 1F 1F | 	byte	$43, $42, $40, $42, $3e, $39, $30, $2b, $28, $27, $26, $1e, $1c, $1c, $1f, $1f
154ba     21 25 2A 2D 
154be     2E 2C 2A 26 
154c2     1B 15 09 FD 
154c6     F4 F4 F7 FA | 	byte	$21, $25, $2a, $2d, $2e, $2c, $2a, $26, $1b, $15, $09, $fd, $f4, $f4, $f7, $fa
154ca     FF 02 06 09 
154ce     0C 12 14 15 
154d2     13 09 01 FD 
154d6     FC F9 F3 ED | 	byte	$ff, $02, $06, $09, $0c, $12, $14, $15, $13, $09, $01, $fd, $fc, $f9, $f3, $ed
154da     EA EC EB EB 
154de     EE F8 06 12 
154e2     1E 26 2C 31 
154e6     34 36 30 2B | 	byte	$ea, $ec, $eb, $eb, $ee, $f8, $06, $12, $1e, $26, $2c, $31, $34, $36, $30, $2b
154ea     26 21 18 14 
154ee     15 16 20 26 
154f2     2A 2C 33 3C 
154f6     3D 3C 34 30 | 	byte	$26, $21, $18, $14, $15, $16, $20, $26, $2a, $2c, $33, $3c, $3d, $3c, $34, $30
154fa     26 20 19 0E 
154fe     04 00 F8 F0 
15502     EA E6 E2 E1 
15506     DC D5 D2 D4 | 	byte	$26, $20, $19, $0e, $04, $00, $f8, $f0, $ea, $e6, $e2, $e1, $dc, $d5, $d2, $d4
1550a     D9 E5 EC EC 
1550e     ED EB E6 DA 
15512     D0 C9 C7 C8 
15516     C3 C3 C9 CE | 	byte	$d9, $e5, $ec, $ec, $ed, $eb, $e6, $da, $d0, $c9, $c7, $c8, $c3, $c3, $c9, $ce
1551a     D4 DE E4 E8 
1551e     EA EC F3 FE 
15522     07 0A 0C 09 
15526     08 09 07 07 | 	byte	$d4, $de, $e4, $e8, $ea, $ec, $f3, $fe, $07, $0a, $0c, $09, $08, $09, $07, $07
1552a     0A 14 1E 24 
1552e     27 2E 36 39 
15532     3C 36 33 30 
15536     2A 26 20 1C | 	byte	$0a, $14, $1e, $24, $27, $2e, $36, $39, $3c, $36, $33, $30, $2a, $26, $20, $1c
1553a     15 14 13 12 
1553e     0E 10 18 1A 
15542     21 24 25 27 
15546     27 26 1F 13 | 	byte	$15, $14, $13, $12, $0e, $10, $18, $1a, $21, $24, $25, $27, $27, $26, $1f, $13
1554a     07 00 F9 F7 
1554e     FA FC FE FF 
15552     03 09 12 16 
15556     19 18 14 14 | 	byte	$07, $00, $f9, $f7, $fa, $fc, $fe, $ff, $03, $09, $12, $16, $19, $18, $14, $14
1555a     0F 07 02 FD 
1555e     FA F7 F2 ED 
15562     E8 EC F4 FD 
15566     04 0F 16 24 | 	byte	$0f, $07, $02, $fd, $fa, $f7, $f2, $ed, $e8, $ec, $f4, $fd, $04, $0f, $16, $24
1556a     2B 30 33 34 
1556e     34 30 28 1E 
15572     18 14 18 13 
15576     13 16 1F 25 | 	byte	$2b, $30, $33, $34, $34, $30, $28, $1e, $18, $14, $18, $13, $13, $16, $1f, $25
1557a     2D 32 36 36 
1557e     32 30 26 1C 
15582     14 0D 06 FD 
15586     F0 ED E8 E7 | 	byte	$2d, $32, $36, $36, $32, $30, $26, $1c, $14, $0d, $06, $fd, $f0, $ed, $e8, $e7
1558a     E1 DB D6 D0 
1558e     D0 D2 D6 DC 
15592     E7 EE F0 EA 
15596     E4 DF DA D4 | 	byte	$e1, $db, $d6, $d0, $d0, $d2, $d6, $dc, $e7, $ee, $f0, $ea, $e4, $df, $da, $d4
1559a     CE C9 C3 C7 
1559e     CD D4 DC E1 
155a2     E5 E7 F0 F6 
155a6     FF 09 10 14 | 	byte	$ce, $c9, $c3, $c7, $cd, $d4, $dc, $e1, $e5, $e7, $f0, $f6, $ff, $09, $10, $14
155aa     1A 18 13 12 
155ae     13 14 16 1E 
155b2     22 2A 31 3C 
155b6     3F 43 43 40 | 	byte	$1a, $18, $13, $12, $13, $14, $16, $1e, $22, $2a, $31, $3c, $3f, $43, $43, $40
155ba     3E 39 34 31 
155be     2C 26 21 1C 
155c2     18 13 14 19 
155c6     19 1B 1F 22 | 	byte	$3e, $39, $34, $31, $2c, $26, $21, $1c, $18, $13, $14, $19, $19, $1b, $1f, $22
155ca     28 2A 2B 26 
155ce     1C 13 06 00 
155d2     FC F7 F4 F3 
155d6     F2 F4 FA 01 | 	byte	$28, $2a, $2b, $26, $1c, $13, $06, $00, $fc, $f7, $f4, $f3, $f2, $f4, $fa, $01
155da     08 0D 0F 13 
155de     10 0C 07 04 
155e2     00 FC F7 EE 
155e6     EA E5 E4 E4 | 	byte	$08, $0d, $0f, $13, $10, $0c, $07, $04, $00, $fc, $f7, $ee, $ea, $e5, $e4, $e4
155ea     E7 F0 F6 FF 
155ee     0A 14 1E 2A 
155f2     31 32 30 27 
155f6     24 1F 1B 16 | 	byte	$e7, $f0, $f6, $ff, $0a, $14, $1e, $2a, $31, $32, $30, $27, $24, $1f, $1b, $16
155fa     13 10 13 15 
155fe     1E 22 28 31 
15602     36 37 32 2E 
15606     2A 26 1C 14 | 	byte	$13, $10, $13, $15, $1e, $22, $28, $31, $36, $37, $32, $2e, $2a, $26, $1c, $14
1560a     09 03 00 F7 
1560e     F1 EA E4 DF 
15612     DA D0 CD D0 
15616     D9 E4 EA EA | 	byte	$09, $03, $00, $f7, $f1, $ea, $e4, $df, $da, $d0, $cd, $d0, $d9, $e4, $ea, $ea
1561a     EB E8 E8 E6 
1561e     DB D5 CE C7 
15622     C6 C9 CF D3 
15626     D5 DB DE E2 | 	byte	$eb, $e8, $e8, $e6, $db, $d5, $ce, $c7, $c6, $c9, $cf, $d3, $d5, $db, $de, $e2
1562a     EA F1 FA 03 
1562e     09 0F 13 0F 
15632     10 12 10 10 
15636     0F 14 20 2A | 	byte	$ea, $f1, $fa, $03, $09, $0f, $13, $0f, $10, $12, $10, $10, $0f, $14, $20, $2a
1563a     2E 33 3A 3F 
1563e     44 43 3E 3A 
15642     39 37 30 28 
15646     26 1C 1C 18 | 	byte	$2e, $33, $3a, $3f, $44, $43, $3e, $3a, $39, $37, $30, $28, $26, $1c, $1c, $18
1564a     16 19 1B 1C 
1564e     20 28 2E 33 
15652     30 2A 24 1E 
15656     18 10 07 01 | 	byte	$16, $19, $1b, $1c, $20, $28, $2e, $33, $30, $2a, $24, $1e, $18, $10, $07, $01
1565a     FE FA FA FA 
1565e     FF 06 0E 10 
15662     16 16 15 13 
15666     10 0E 09 04 | 	byte	$fe, $fa, $fa, $fa, $ff, $06, $0e, $10, $16, $16, $15, $13, $10, $0e, $09, $04
1566a     01 F8 F2 ED 
1566e     EC EB EE F1 
15672     F4 FD 06 12 
15676     20 2B 2E 30 | 	byte	$01, $f8, $f2, $ed, $ec, $eb, $ee, $f1, $f4, $fd, $06, $12, $20, $2b, $2e, $30
1567a     30 30 2B 26 
1567e     1C 18 14 13 
15682     0E 0F 19 21 
15686     28 2D 31 31 | 	byte	$30, $30, $2b, $26, $1c, $18, $14, $13, $0e, $0f, $19, $21, $28, $2d, $31, $31
1568a     32 32 2D 26 
1568e     1C 14 0C 04 
15692     FD F4 F1 EE 
15696     E4 DA CC C8 | 	byte	$32, $32, $2d, $26, $1c, $14, $0c, $04, $fd, $f4, $f1, $ee, $e4, $da, $cc, $c8
1569a     C4 CA CF D4 
1569e     D9 DB DE E1 
156a2     E0 DC D5 CC 
156a6     C3 C0 C0 C3 | 	byte	$c4, $ca, $cf, $d4, $d9, $db, $de, $e1, $e0, $dc, $d5, $cc, $c3, $c0, $c0, $c3
156aa     C3 C8 CA CE 
156ae     D0 D6 E0 EC 
156b2     F6 FD 02 07 
156b6     10 15 10 0D | 	byte	$c3, $c8, $ca, $ce, $d0, $d6, $e0, $ec, $f6, $fd, $02, $07, $10, $15, $10, $0d
156ba     10 0D 12 15 
156be     19 22 2E 36 
156c2     3C 42 42 46 
156c6     45 40 3D 3A | 	byte	$10, $0d, $12, $15, $19, $22, $2e, $36, $3c, $42, $42, $46, $45, $40, $3d, $3a
156ca     34 2C 26 21 
156ce     20 1F 18 13 
156d2     16 1C 22 27 
156d6     2C 2B 2D 2C | 	byte	$34, $2c, $26, $21, $20, $1f, $18, $13, $16, $1c, $22, $27, $2c, $2b, $2d, $2c
156da     28 21 1C 16 
156de     0F 09 00 FC 
156e2     FC FF FF 06 
156e6     0E 12 15 14 | 	byte	$28, $21, $1c, $16, $0f, $09, $00, $fc, $fc, $ff, $ff, $06, $0e, $12, $15, $14
156ea     15 15 14 13 
156ee     0E 07 00 FA 
156f2     F3 F1 F0 ED 
156f6     E8 E7 EC F8 | 	byte	$15, $15, $14, $13, $0e, $07, $00, $fa, $f3, $f1, $f0, $ed, $e8, $e7, $ec, $f8
156fa     FF 0A 14 1E 
156fe     26 2D 2C 2C 
15702     2B 26 21 1C 
15706     13 10 0F 12 | 	byte	$ff, $0a, $14, $1e, $26, $2d, $2c, $2c, $2b, $26, $21, $1c, $13, $10, $0f, $12
1570a     1B 1F 28 31 
1570e     33 38 3D 32 
15712     32 30 28 21 
15716     19 13 0E 0A | 	byte	$1b, $1f, $28, $31, $33, $38, $3d, $32, $32, $30, $28, $21, $19, $13, $0e, $0a
1571a     07 00 ED DF 
1571e     D6 D2 D4 D4 
15722     D5 DB DF E2 
15726     EA E7 E4 E0 | 	byte	$07, $00, $ed, $df, $d6, $d2, $d4, $d4, $d5, $db, $df, $e2, $ea, $e7, $e4, $e0
1572a     DA D2 C8 C4 
1572e     C3 C9 C8 C9 
15732     C7 C9 CD D4 
15736     D9 E0 E7 F3 | 	byte	$da, $d2, $c8, $c4, $c3, $c9, $c8, $c9, $c7, $c9, $cd, $d4, $d9, $e0, $e7, $f3
1573a     FA 02 06 08 
1573e     0C 0A 07 07 
15742     08 08 12 16 
15746     1E 27 2D 34 | 	byte	$fa, $02, $06, $08, $0c, $0a, $07, $07, $08, $08, $12, $16, $1e, $27, $2d, $34
1574a     36 36 37 38 
1574e     34 2C 27 22 
15752     21 1C 13 0C 
15756     08 0D 0F 12 | 	byte	$36, $36, $37, $38, $34, $2c, $27, $22, $21, $1c, $13, $0c, $08, $0d, $0f, $12
1575a     16 18 1E 26 
1575e     21 20 21 1F 
15762     1A 15 0C 07 
15766     03 FC FC FD | 	byte	$16, $18, $1e, $26, $21, $20, $21, $1f, $1a, $15, $0c, $07, $03, $fc, $fc, $fd
1576a     FF 09 10 16 
1576e     19 1B 1F 20 
15772     22 1F 18 0F 
15776     0F 08 06 00 | 	byte	$ff, $09, $10, $16, $19, $1b, $1f, $20, $22, $1f, $18, $0f, $0f, $08, $06, $00
1577a     FC F9 F7 F4 
1577e     FA FF 07 12 
15782     1E 26 2D 32 
15786     37 3A 39 31 | 	byte	$fc, $f9, $f7, $f4, $fa, $ff, $07, $12, $1e, $26, $2d, $32, $37, $3a, $39, $31
1578a     26 1E 1A 13 
1578e     14 12 15 1E 
15792     26 2C 31 32 
15796     36 36 32 2B | 	byte	$26, $1e, $1a, $13, $14, $12, $15, $1e, $26, $2c, $31, $32, $36, $36, $32, $2b
1579a     21 1C 16 15 
1579e     13 09 00 F7 
157a2     EB E1 D8 D0 
157a6     CD CD CD D2 | 	byte	$21, $1c, $16, $15, $13, $09, $00, $f7, $eb, $e1, $d8, $d0, $cd, $cd, $cd, $d2
157aa     D8 DB E0 E7 
157ae     E4 DC DA CE 
157b2     CD CA C7 C6 
157b6     C8 CA CC CC | 	byte	$d8, $db, $e0, $e7, $e4, $dc, $da, $ce, $cd, $ca, $c7, $c6, $c8, $ca, $cc, $cc
157ba     CC D4 D9 E2 
157be     EB F3 FE 06 
157c2     0C 0D 0E 0D 
157c6     0F 0F 10 13 | 	byte	$cc, $d4, $d9, $e2, $eb, $f3, $fe, $06, $0c, $0d, $0e, $0d, $0f, $0f, $10, $13
157ca     18 22 26 2A 
157ce     2E 37 3C 42 
157d2     3F 39 3A 39 
157d6     34 30 26 1C | 	byte	$18, $22, $26, $2a, $2e, $37, $3c, $42, $3f, $39, $3a, $39, $34, $30, $26, $1c
157da     19 13 0E 0D 
157de     0E 13 14 15 
157e2     15 15 18 1C 
157e6     15 13 0E 09 | 	byte	$19, $13, $0e, $0d, $0e, $13, $14, $15, $15, $15, $18, $1c, $15, $13, $0e, $09
157ea     03 FC F2 EA 
157ee     E8 EB F1 F6 
157f2     F8 FA 01 08 
157f6     0E 10 12 0E | 	byte	$03, $fc, $f2, $ea, $e8, $eb, $f1, $f6, $f8, $fa, $01, $08, $0e, $10, $12, $0e
157fa     0E 0A 07 06 
157fe     00 F7 F4 F3 
15802     F0 F0 F6 FF 
15806     07 0D 16 1E | 	byte	$0e, $0a, $07, $06, $00, $f7, $f4, $f3, $f0, $f0, $f6, $ff, $07, $0d, $16, $1e
1580a     25 33 39 3E 
1580e     3E 39 34 2E 
15812     26 1A 19 19 
15816     1F 21 2A 2D | 	byte	$25, $33, $39, $3e, $3e, $39, $34, $2e, $26, $1a, $19, $19, $1f, $21, $2a, $2d
1581a     37 3D 40 3E 
1581e     36 31 2C 27 
15822     24 1F 1A 15 
15826     09 01 F3 E8 | 	byte	$37, $3d, $40, $3e, $36, $31, $2c, $27, $24, $1f, $1a, $15, $09, $01, $f3, $e8
1582a     E2 DC D5 D2 
1582e     D0 D4 DE E2 
15832     E4 E7 E7 E1 
15836     DE DA D3 D0 | 	byte	$e2, $dc, $d5, $d2, $d0, $d4, $de, $e2, $e4, $e7, $e7, $e1, $de, $da, $d3, $d0
1583a     CE CC CC C8 
1583e     C9 CA CF CF 
15842     D6 DE E7 EC 
15846     F6 FD 03 0C | 	byte	$ce, $cc, $cc, $c8, $c9, $ca, $cf, $cf, $d6, $de, $e7, $ec, $f6, $fd, $03, $0c
1584a     0D 0C 08 09 
1584e     0D 10 13 15 
15852     1A 24 2D 32 
15856     37 39 3D 3D | 	byte	$0d, $0c, $08, $09, $0d, $10, $13, $15, $1a, $24, $2d, $32, $37, $39, $3d, $3d
1585a     3C 39 36 32 
1585e     28 20 18 13 
15862     13 10 13 12 
15866     12 15 18 1A | 	byte	$3c, $39, $36, $32, $28, $20, $18, $13, $13, $10, $13, $12, $12, $15, $18, $1a
1586a     18 1B 16 18 
1586e     13 10 09 00 
15872     F9 F3 F2 F1 
15876     F2 F3 F6 FD | 	byte	$18, $1b, $16, $18, $13, $10, $09, $00, $f9, $f3, $f2, $f1, $f2, $f3, $f6, $fd
1587a     03 0A 12 13 
1587e     15 15 13 0E 
15882     0C 09 04 FC 
15886     F7 F3 EE F3 | 	byte	$03, $0a, $12, $13, $15, $15, $13, $0e, $0c, $09, $04, $fc, $f7, $f3, $ee, $f3
1588a     F4 F6 FD 03 
1588e     0A 16 20 2A 
15892     33 3A 3C 3C 
15896     34 2B 26 1E | 	byte	$f4, $f6, $fd, $03, $0a, $16, $20, $2a, $33, $3a, $3c, $3c, $34, $2b, $26, $1e
1589a     18 13 13 1A 
1589e     1F 2A 33 39 
158a2     3A 3A 36 33 
158a6     2C 26 26 21 | 	byte	$18, $13, $13, $1a, $1f, $2a, $33, $39, $3a, $3a, $36, $33, $2c, $26, $26, $21
158aa     1C 18 0C 02 
158ae     00 F0 E4 D5 
158b2     D2 CC CC D0 
158b6     D8 DB E2 E5 | 	byte	$1c, $18, $0c, $02, $00, $f0, $e4, $d5, $d2, $cc, $cc, $d0, $d8, $db, $e2, $e5
158ba     E1 E4 DC DB 
158be     DA D3 CD CE 
158c2     CC CC C8 C9 
158c6     CE CF D5 D9 | 	byte	$e1, $e4, $dc, $db, $da, $d3, $cd, $ce, $cc, $cc, $c8, $c9, $ce, $cf, $d5, $d9
158ca     E6 EC F9 FF 
158ce     07 09 08 0E 
158d2     0F 0E 10 13 
158d6     10 1A 1E 26 | 	byte	$e6, $ec, $f9, $ff, $07, $09, $08, $0e, $0f, $0e, $10, $13, $10, $1a, $1e, $26
158da     2E 32 36 3D 
158de     3F 3F 42 40 
158e2     3E 36 2B 26 
158e6     1C 19 1A 15 | 	byte	$2e, $32, $36, $3d, $3f, $3f, $42, $40, $3e, $36, $2b, $26, $1c, $19, $1a, $15
158ea     14 18 18 1A 
158ee     1E 1E 1F 22 
158f2     22 21 1A 14 
158f6     0E 07 04 00 | 	byte	$14, $18, $18, $1a, $1e, $1e, $1f, $22, $22, $21, $1a, $14, $0e, $07, $04, $00
158fa     F8 F7 F7 F4 
158fe     F7 FC FF 07 
15902     0C 0D 13 13 
15906     13 10 0E 07 | 	byte	$f8, $f7, $f7, $f4, $f7, $fc, $ff, $07, $0c, $0d, $13, $13, $13, $10, $0e, $07
1590a     00 F9 F3 EE 
1590e     ED EC F0 F0 
15912     F4 F9 FF 07 
15916     12 20 2A 31 | 	byte	$00, $f9, $f3, $ee, $ed, $ec, $f0, $f0, $f4, $f9, $ff, $07, $12, $20, $2a, $31
1591a     36 32 30 2C 
1591e     26 1C 13 0F 
15922     0F 16 1C 25 
15926     2D 36 3C 37 | 	byte	$36, $32, $30, $2c, $26, $1c, $13, $0f, $0f, $16, $1c, $25, $2d, $36, $3c, $37
1592a     38 34 33 31 
1592e     2B 27 21 1C 
15932     18 0E 01 F9 
15936     F0 E2 DB D4 | 	byte	$38, $34, $33, $31, $2b, $27, $21, $1c, $18, $0e, $01, $f9, $f0, $e2, $db, $d4
1593a     D2 D8 DA DA 
1593e     E0 E1 E5 E2 
15942     E0 DC DA D4 
15946     D0 C7 C6 C6 | 	byte	$d2, $d8, $da, $da, $e0, $e1, $e5, $e2, $e0, $dc, $da, $d4, $d0, $c7, $c6, $c6
1594a     C4 C8 CA CF 
1594e     D3 D8 DE E6 
15952     EC F6 FE FE 
15956     FF 0A 0D 09 | 	byte	$c4, $c8, $ca, $cf, $d3, $d8, $de, $e6, $ec, $f6, $fe, $fe, $ff, $0a, $0d, $09
1595a     0D 0C 0F 16 
1595e     16 1B 25 2B 
15962     2E 36 3C 40 
15966     42 45 3D 32 | 	byte	$0d, $0c, $0f, $16, $16, $1b, $25, $2b, $2e, $36, $3c, $40, $42, $45, $3d, $32
1596a     2D 26 1E 18 
1596e     0F 0C 0C 0F 
15972     0E 0E 14 18 
15976     1B 1E 1B 1C | 	byte	$2d, $26, $1e, $18, $0f, $0c, $0c, $0f, $0e, $0e, $14, $18, $1b, $1e, $1b, $1c
1597a     18 13 0F 0E 
1597e     09 07 01 F9 
15982     F7 F8 FA FF 
15986     07 09 0F 18 | 	byte	$18, $13, $0f, $0e, $09, $07, $01, $f9, $f7, $f8, $fa, $ff, $07, $09, $0f, $18
1598a     1B 21 26 20 
1598e     1E 14 13 09 
15992     02 00 FE FA 
15996     FD FC FD FF | 	byte	$1b, $21, $26, $20, $1e, $14, $13, $09, $02, $00, $fe, $fa, $fd, $fc, $fd, $ff
1599a     03 0F 1B 24 
1599e     2E 36 36 40 
159a2     39 32 2B 21 
159a6     15 0F 0A 0D | 	byte	$03, $0f, $1b, $24, $2e, $36, $36, $40, $39, $32, $2b, $21, $15, $0f, $0a, $0d
159aa     15 20 28 2E 
159ae     34 39 37 36 
159b2     31 27 26 27 
159b6     1E 1B 1A 13 | 	byte	$15, $20, $28, $2e, $34, $39, $37, $36, $31, $27, $26, $27, $1e, $1b, $1a, $13
159ba     06 F9 ED E1 
159be     DA CF CF C8 
159c2     CF D6 DB DC 
159c6     DE DE DF DA | 	byte	$06, $f9, $ed, $e1, $da, $cf, $cf, $c8, $cf, $d6, $db, $dc, $de, $de, $df, $da
159ca     D2 CE CA C7 
159ce     C1 C0 C1 C2 
159d2     C3 CA CC D8 
159d6     DE E5 EC F1 | 	byte	$d2, $ce, $ca, $c7, $c1, $c0, $c1, $c2, $c3, $ca, $cc, $d8, $de, $e5, $ec, $f1
159da     FA 08 09 09 
159de     0F 14 14 19 
159e2     16 19 24 28 
159e6     2C 2D 34 3F | 	byte	$fa, $08, $09, $09, $0f, $14, $14, $19, $16, $19, $24, $28, $2c, $2d, $34, $3f
159ea     49 4F 4C 48 
159ee     4C 45 39 32 
159f2     2B 1F 1C 13 
159f6     0A 0D 0A 0C | 	byte	$49, $4f, $4c, $48, $4c, $45, $39, $32, $2b, $1f, $1c, $13, $0a, $0d, $0a, $0c
159fa     10 13 14 16 
159fe     14 10 0C 0A 
15a02     09 04 00 F9 
15a06     F3 F1 ED EB | 	byte	$10, $13, $14, $16, $14, $10, $0c, $0a, $09, $04, $00, $f9, $f3, $f1, $ed, $eb
15a0a     E8 E8 F1 F9 
15a0e     FC 07 12 15 
15a12     18 19 13 0C 
15a16     09 02 FC FD | 	byte	$e8, $e8, $f1, $f9, $fc, $07, $12, $15, $18, $19, $13, $0c, $09, $02, $fc, $fd
15a1a     FD F9 F9 F9 
15a1e     F7 FA 03 09 
15a22     12 1B 27 31 
15a26     38 3E 3F 3D | 	byte	$fd, $f9, $f9, $f9, $f7, $fa, $03, $09, $12, $1b, $27, $31, $38, $3e, $3f, $3d
15a2a     34 2B 1F 1A 
15a2e     19 19 1C 22 
15a32     2A 2E 38 3F 
15a36     3E 3E 3A 37 | 	byte	$34, $2b, $1f, $1a, $19, $19, $1c, $22, $2a, $2e, $38, $3f, $3e, $3e, $3a, $37
15a3a     31 2E 2B 28 
15a3e     26 18 0D 04 
15a42     F9 ED E2 DA 
15a46     D3 D0 D2 D5 | 	byte	$31, $2e, $2b, $28, $26, $18, $0d, $04, $f9, $ed, $e2, $da, $d3, $d0, $d2, $d5
15a4a     DC DE DF E1 
15a4e     DC D9 D8 D0 
15a52     C8 C8 C2 BB 
15a56     B6 B7 BA C1 | 	byte	$dc, $de, $df, $e1, $dc, $d9, $d8, $d0, $c8, $c8, $c2, $bb, $b6, $b7, $ba, $c1
15a5a     C4 C6 CE D9 
15a5e     E2 EB F1 F8 
15a62     FD 06 04 FF 
15a66     06 0D 12 15 | 	byte	$c4, $c6, $ce, $d9, $e2, $eb, $f1, $f8, $fd, $06, $04, $ff, $06, $0d, $12, $15
15a6a     13 15 1E 24 
15a6e     2C 32 38 42 
15a72     49 4C 4C 48 
15a76     44 3E 36 2B | 	byte	$13, $15, $1e, $24, $2c, $32, $38, $42, $49, $4c, $4c, $48, $44, $3e, $36, $2b
15a7a     21 1E 19 14 
15a7e     16 1B 1A 1F 
15a82     21 1C 1B 1E 
15a86     1A 18 13 0E | 	byte	$21, $1e, $19, $14, $16, $1b, $1a, $1f, $21, $1c, $1b, $1e, $1a, $18, $13, $0e
15a8a     0C 07 00 F8 
15a8e     F4 F2 F1 ED 
15a92     F0 F6 F9 FF 
15a96     09 0F 18 1A | 	byte	$0c, $07, $00, $f8, $f4, $f2, $f1, $ed, $f0, $f6, $f9, $ff, $09, $0f, $18, $1a
15a9a     15 0E 09 04 
15a9e     00 FC F9 F7 
15aa2     F2 F7 F6 F8 
15aa6     FF 07 0E 15 | 	byte	$15, $0e, $09, $04, $00, $fc, $f9, $f7, $f2, $f7, $f6, $f8, $ff, $07, $0e, $15
15aaa     1E 2A 37 3D 
15aae     3D 39 31 2D 
15ab2     26 19 19 16 
15ab6     19 1A 1F 27 | 	byte	$1e, $2a, $37, $3d, $3d, $39, $31, $2d, $26, $19, $19, $16, $19, $1a, $1f, $27
15aba     2E 33 37 2E 
15abe     30 34 32 31 
15ac2     31 26 21 1C 
15ac6     0E 04 FD F0 | 	byte	$2e, $33, $37, $2e, $30, $34, $32, $31, $31, $26, $21, $1c, $0e, $04, $fd, $f0
15aca     E2 DB D4 D3 
15ace     D4 D8 D8 DE 
15ad2     E2 E1 E0 E1 
15ad6     E1 DE DA D0 | 	byte	$e2, $db, $d4, $d3, $d4, $d8, $d8, $de, $e2, $e1, $e0, $e1, $e1, $de, $da, $d0
15ada     C6 C4 C2 C1 
15ade     C0 BE C3 C9 
15ae2     CF D5 D9 E7 
15ae6     F6 FA FA FE | 	byte	$c6, $c4, $c2, $c1, $c0, $be, $c3, $c9, $cf, $d5, $d9, $e7, $f6, $fa, $fa, $fe
15aea     03 09 08 0D 
15aee     0E 0F 15 18 
15af2     1A 21 28 2C 
15af6     33 3F 44 49 | 	byte	$03, $09, $08, $0d, $0e, $0f, $15, $18, $1a, $21, $28, $2c, $33, $3f, $44, $49
15afa     46 48 45 3F 
15afe     3A 32 26 1A 
15b02     15 10 14 16 
15b06     13 18 19 19 | 	byte	$46, $48, $45, $3f, $3a, $32, $26, $1a, $15, $10, $14, $16, $13, $18, $19, $19
15b0a     1A 18 18 13 
15b0e     0D 09 03 00 
15b12     00 FA F2 EE 
15b16     EB E7 EA EB | 	byte	$1a, $18, $18, $13, $0d, $09, $03, $00, $00, $fa, $f2, $ee, $eb, $e7, $ea, $eb
15b1a     F1 FC 03 0E 
15b1e     0D 12 14 13 
15b22     0C 0A 06 04 
15b26     00 F9 F4 F4 | 	byte	$f1, $fc, $03, $0e, $0d, $12, $14, $13, $0c, $0a, $06, $04, $00, $f9, $f4, $f4
15b2a     F8 F8 F9 FF 
15b2e     08 12 20 27 
15b32     2E 3A 3E 39 
15b36     32 30 2A 26 | 	byte	$f8, $f8, $f9, $ff, $08, $12, $20, $27, $2e, $3a, $3e, $39, $32, $30, $2a, $26
15b3a     20 1A 18 1A 
15b3e     24 28 2E 33 
15b42     36 39 3A 39 
15b46     38 3C 37 30 | 	byte	$20, $1a, $18, $1a, $24, $28, $2e, $33, $36, $39, $3a, $39, $38, $3c, $37, $30
15b4a     2C 28 1F 13 
15b4e     04 F7 EA E2 
15b52     DA D4 D3 D5 
15b56     D8 D8 D5 D9 | 	byte	$2c, $28, $1f, $13, $04, $f7, $ea, $e2, $da, $d4, $d3, $d5, $d8, $d8, $d5, $d9
15b5a     DE DE DF D5 
15b5e     CE CE C9 BD 
15b62     BA B7 B7 B7 
15b66     B8 BA C1 CA | 	byte	$de, $de, $df, $d5, $ce, $ce, $c9, $bd, $ba, $b7, $b7, $b7, $b8, $ba, $c1, $ca
15b6a     D6 DE E6 EE 
15b6e     F2 F8 FF 01 
15b72     04 0A 0D 0E 
15b76     14 14 18 1B | 	byte	$d6, $de, $e6, $ee, $f2, $f8, $ff, $01, $04, $0a, $0d, $0e, $14, $14, $18, $1b
15b7a     21 2A 33 3D 
15b7e     42 46 49 4C 
15b82     4C 4A 40 34 
15b86     2D 26 1C 19 | 	byte	$21, $2a, $33, $3d, $42, $46, $49, $4c, $4c, $4a, $40, $34, $2d, $26, $1c, $19
15b8a     19 1A 1A 1A 
15b8e     1B 1C 21 1F 
15b92     1C 15 13 12 
15b96     0F 0A 09 04 | 	byte	$19, $1a, $1a, $1a, $1b, $1c, $21, $1f, $1c, $15, $13, $12, $0f, $0a, $09, $04
15b9a     01 F8 F4 EE 
15b9e     EE F2 F4 FA 
15ba2     03 0E 10 14 
15ba6     18 15 13 0F | 	byte	$01, $f8, $f4, $ee, $ee, $f2, $f4, $fa, $03, $0e, $10, $14, $18, $15, $13, $0f
15baa     09 00 FD F9 
15bae     F3 F1 F2 F0 
15bb2     F1 F8 FA 03 
15bb6     12 20 28 30 | 	byte	$09, $00, $fd, $f9, $f3, $f1, $f2, $f0, $f1, $f8, $fa, $03, $12, $20, $28, $30
15bba     33 34 34 30 
15bbe     27 21 1B 19 
15bc2     18 16 1B 21 
15bc6     25 2A 2E 34 | 	byte	$33, $34, $34, $30, $27, $21, $1b, $19, $18, $16, $1b, $21, $25, $2a, $2e, $34
15bca     38 3A 39 37 
15bce     38 37 30 2A 
15bd2     26 1C 10 01 
15bd6     F0 E6 E2 DC | 	byte	$38, $3a, $39, $37, $38, $37, $30, $2a, $26, $1c, $10, $01, $f0, $e6, $e2, $dc
15bda     D6 D3 D2 D5 
15bde     D9 DE DE DF 
15be2     E1 DC D6 D2 
15be6     CD C8 C7 C0 | 	byte	$d6, $d3, $d2, $d5, $d9, $de, $de, $df, $e1, $dc, $d6, $d2, $cd, $c8, $c7, $c0
15bea     BB BA BA BE 
15bee     C3 C9 D4 DE 
15bf2     E6 F1 F6 FA 
15bf6     FF 04 07 0A | 	byte	$bb, $ba, $ba, $be, $c3, $c9, $d4, $de, $e6, $f1, $f6, $fa, $ff, $04, $07, $0a
15bfa     0E 13 13 15 
15bfe     18 1C 21 2A 
15c02     2B 31 3C 42 
15c06     4A 4C 4E 4C | 	byte	$0e, $13, $13, $15, $18, $1c, $21, $2a, $2b, $31, $3c, $42, $4a, $4c, $4e, $4c
15c0a     44 39 30 27 
15c0e     22 1F 19 14 
15c12     15 15 19 1A 
15c16     18 19 15 0F | 	byte	$44, $39, $30, $27, $22, $1f, $19, $14, $15, $15, $19, $1a, $18, $19, $15, $0f
15c1a     0C 0D 0C 0A 
15c1e     07 00 F9 F3 
15c22     F2 EB E6 EB 
15c26     F0 F3 FA FF | 	byte	$0c, $0d, $0c, $0a, $07, $00, $f9, $f3, $f2, $eb, $e6, $eb, $f0, $f3, $fa, $ff
15c2a     08 12 14 14 
15c2e     15 13 0F 0A 
15c32     04 00 FD FA 
15c36     F9 F4 F3 F8 | 	byte	$08, $12, $14, $14, $15, $13, $0f, $0a, $04, $00, $fd, $fa, $f9, $f4, $f3, $f8
15c3a     FF 0A 14 1F 
15c3e     2A 33 38 3C 
15c42     39 36 34 2B 
15c46     22 22 1E 1C | 	byte	$ff, $0a, $14, $1f, $2a, $33, $38, $3c, $39, $36, $34, $2b, $22, $22, $1e, $1c
15c4a     1C 20 26 2A 
15c4e     2D 31 33 37 
15c52     3A 36 39 36 
15c56     38 39 30 26 | 	byte	$1c, $20, $26, $2a, $2d, $31, $33, $37, $3a, $36, $39, $36, $38, $39, $30, $26
15c5a     13 04 F9 ED 
15c5e     E0 DC DA D0 
15c62     D2 D4 D4 DC 
15c66     DE DF DF DA | 	byte	$13, $04, $f9, $ed, $e0, $dc, $da, $d0, $d2, $d4, $d4, $dc, $de, $df, $df, $da
15c6a     D8 D9 D3 CC 
15c6e     C7 C0 BD B8 
15c72     B6 B8 BE C1 
15c76     CE D4 DB E7 | 	byte	$d8, $d9, $d3, $cc, $c7, $c0, $bd, $b8, $b6, $b8, $be, $c1, $ce, $d4, $db, $e7
15c7a     F1 F8 FA FF 
15c7e     07 07 0A 0D 
15c82     10 16 1A 1B 
15c86     22 28 27 2E | 	byte	$f1, $f8, $fa, $ff, $07, $07, $0a, $0d, $10, $16, $1a, $1b, $22, $28, $27, $2e
15c8a     36 3D 45 4B 
15c8e     4C 49 45 3D 
15c92     36 30 26 21 
15c96     1A 19 16 18 | 	byte	$36, $3d, $45, $4b, $4c, $49, $45, $3d, $36, $30, $26, $21, $1a, $19, $16, $18
15c9a     1A 18 18 13 
15c9e     10 0F 0F 0C 
15ca2     0D 0A 07 03 
15ca6     00 F7 F1 ED | 	byte	$1a, $18, $18, $13, $10, $0f, $0f, $0c, $0d, $0a, $07, $03, $00, $f7, $f1, $ed
15caa     EC EC EC F3 
15cae     FA FF 09 0C 
15cb2     14 1A 19 18 
15cb6     15 0E 0E 0C | 	byte	$ec, $ec, $ec, $f3, $fa, $ff, $09, $0c, $14, $1a, $19, $18, $15, $0e, $0e, $0c
15cba     02 FE FA F8 
15cbe     F8 F9 FF 07 
15cc2     0F 1A 20 2C 
15cc6     33 38 37 36 | 	byte	$02, $fe, $fa, $f8, $f8, $f9, $ff, $07, $0f, $1a, $20, $2c, $33, $38, $37, $36
15cca     31 2B 26 1E 
15cce     1A 18 19 1A 
15cd2     1B 1F 27 2B 
15cd6     2B 2C 2D 31 | 	byte	$31, $2b, $26, $1e, $1a, $18, $19, $1a, $1b, $1f, $27, $2b, $2b, $2c, $2d, $31
15cda     36 34 34 33 
15cde     2B 26 15 07 
15ce2     FC F2 E8 E0 
15ce6     D4 CF CF D4 | 	byte	$36, $34, $34, $33, $2b, $26, $15, $07, $fc, $f2, $e8, $e0, $d4, $cf, $cf, $d4
15cea     D8 D9 DB E0 
15cee     DE DC DE DA 
15cf2     D8 D4 CE C7 
15cf6     C2 BE BE BE | 	byte	$d8, $d9, $db, $e0, $de, $dc, $de, $da, $d8, $d4, $ce, $c7, $c2, $be, $be, $be
15cfa     BE C3 CE D5 
15cfe     DE E6 F0 F8 
15d02     FD 01 07 0C 
15d06     0E 10 14 19 | 	byte	$be, $c3, $ce, $d5, $de, $e6, $f0, $f8, $fd, $01, $07, $0c, $0e, $10, $14, $19
15d0a     1B 20 20 22 
15d0e     27 2D 37 3E 
15d12     46 4A 4E 4E 
15d16     49 40 39 34 | 	byte	$1b, $20, $20, $22, $27, $2d, $37, $3e, $46, $4a, $4e, $4e, $49, $40, $39, $34
15d1a     2B 26 1C 19 
15d1e     1A 1A 18 13 
15d22     13 10 0E 0C 
15d26     0A 0A 0A 09 | 	byte	$2b, $26, $1c, $19, $1a, $1a, $18, $13, $13, $10, $0e, $0c, $0a, $0a, $0a, $09
15d2a     04 00 FA F7 
15d2e     F0 E8 E4 E4 
15d32     E6 EA EC F6 
15d36     FF 06 0C 10 | 	byte	$04, $00, $fa, $f7, $f0, $e8, $e4, $e4, $e6, $ea, $ec, $f6, $ff, $06, $0c, $10
15d3a     10 12 13 0E 
15d3e     0C 07 02 01 
15d42     FC FA F9 F8 
15d46     FA FF 0D 16 | 	byte	$10, $12, $13, $0e, $0c, $07, $02, $01, $fc, $fa, $f9, $f8, $fa, $ff, $0d, $16
15d4a     1B 25 2E 33 
15d4e     3A 39 33 31 
15d52     2D 27 21 1A 
15d56     1A 1E 21 24 | 	byte	$1b, $25, $2e, $33, $3a, $39, $33, $31, $2d, $27, $21, $1a, $1a, $1e, $21, $24
15d5a     25 2A 2D 30 
15d5e     34 36 37 3D 
15d62     3F 39 32 28 
15d66     21 18 0C 00 | 	byte	$25, $2a, $2d, $30, $34, $36, $37, $3d, $3f, $39, $32, $28, $21, $18, $0c, $00
15d6a     F0 E6 DE D5 
15d6e     D4 D3 D3 D9 
15d72     D9 D9 D9 DB 
15d76     DC DA D5 D0 | 	byte	$f0, $e6, $de, $d5, $d4, $d3, $d3, $d9, $d9, $d9, $d9, $db, $dc, $da, $d5, $d0
15d7a     CA C4 BD B8 
15d7e     B6 B6 B6 BB 
15d82     C1 CC D4 DB 
15d86     E1 EB F2 FA | 	byte	$ca, $c4, $bd, $b8, $b6, $b6, $b6, $bb, $c1, $cc, $d4, $db, $e1, $eb, $f2, $fa
15d8a     FD 02 06 0C 
15d8e     10 12 15 18 
15d92     19 1A 20 25 
15d96     2E 3A 42 49 | 	byte	$fd, $02, $06, $0c, $10, $12, $15, $18, $19, $1a, $20, $25, $2e, $3a, $42, $49
15d9a     4C 4E 50 4C 
15d9e     40 36 32 2D 
15da2     26 22 21 20 
15da6     1F 1C 18 16 | 	byte	$4c, $4e, $50, $4c, $40, $36, $32, $2d, $26, $22, $21, $20, $1f, $1c, $18, $16
15daa     18 16 15 13 
15dae     10 0E 0E 09 
15db2     02 FD FC F4 
15db6     F0 ED EB EE | 	byte	$18, $16, $15, $13, $10, $0e, $0e, $09, $02, $fd, $fc, $f4, $f0, $ed, $eb, $ee
15dba     F6 FA FF 0A 
15dbe     0F 15 18 1A 
15dc2     18 16 10 0C 
15dc6     09 03 00 F9 | 	byte	$f6, $fa, $ff, $0a, $0f, $15, $18, $1a, $18, $16, $10, $0c, $09, $03, $00, $f9
15dca     F8 FC FF 02 
15dce     07 0E 19 22 
15dd2     2A 31 33 37 
15dd6     36 33 2B 21 | 	byte	$f8, $fc, $ff, $02, $07, $0e, $19, $22, $2a, $31, $33, $37, $36, $33, $2b, $21
15dda     1C 19 18 14 
15dde     16 1B 21 24 
15de2     22 25 28 31 
15de6     36 39 34 33 | 	byte	$1c, $19, $18, $14, $16, $1b, $21, $24, $22, $25, $28, $31, $36, $39, $34, $33
15dea     31 2B 26 15 
15dee     09 01 F7 E8 
15df2     DF D8 D8 D6 
15df6     D8 D6 D9 D9 | 	byte	$31, $2b, $26, $15, $09, $01, $f7, $e8, $df, $d8, $d8, $d6, $d8, $d6, $d9, $d9
15dfa     DE DF DF DF 
15dfe     DB D8 D3 CC 
15e02     C4 C0 BC B7 
15e06     BB C0 C3 CC | 	byte	$de, $df, $df, $df, $db, $d8, $d3, $cc, $c4, $c0, $bc, $b7, $bb, $c0, $c3, $cc
15e0a     D3 DB E2 EB 
15e0e     F1 F6 FA FF 
15e12     06 09 0C 12 
15e16     15 13 15 1B | 	byte	$d3, $db, $e2, $eb, $f1, $f6, $fa, $ff, $06, $09, $0c, $12, $15, $13, $15, $1b
15e1a     20 26 2A 30 
15e1e     3A 44 46 49 
15e22     4C 48 40 39 
15e26     30 28 26 24 | 	byte	$20, $26, $2a, $30, $3a, $44, $46, $49, $4c, $48, $40, $39, $30, $28, $26, $24
15e2a     1E 19 16 15 
15e2e     14 14 10 0D 
15e32     0E 0C 09 07 
15e36     04 02 00 FA | 	byte	$1e, $19, $16, $15, $14, $14, $10, $0d, $0e, $0c, $09, $07, $04, $02, $00, $fa
15e3a     F4 EE EC E8 
15e3e     E7 EB F1 F4 
15e42     FA 03 0D 14 
15e46     18 1A 19 19 | 	byte	$f4, $ee, $ec, $e8, $e7, $eb, $f1, $f4, $fa, $03, $0d, $14, $18, $1a, $19, $19
15e4a     19 15 0F 09 
15e4e     06 03 03 01 
15e52     01 07 0D 16 
15e56     1B 21 2A 33 | 	byte	$19, $15, $0f, $09, $06, $03, $03, $01, $01, $07, $0d, $16, $1b, $21, $2a, $33
15e5a     39 3C 3A 39 
15e5e     36 2D 26 1E 
15e62     1B 1E 1F 1F 
15e66     1A 1B 1F 26 | 	byte	$39, $3c, $3a, $39, $36, $2d, $26, $1e, $1b, $1e, $1f, $1f, $1a, $1b, $1f, $26
15e6a     28 2C 31 34 
15e6e     36 36 32 2E 
15e72     2B 21 13 04 
15e76     F8 ED E6 DF | 	byte	$28, $2c, $31, $34, $36, $36, $32, $2e, $2b, $21, $13, $04, $f8, $ed, $e6, $df
15e7a     DB D6 D4 D5 
15e7e     D5 D6 D9 DB 
15e82     DA DB DB DA 
15e86     D5 CE C7 BD | 	byte	$db, $d6, $d4, $d5, $d5, $d6, $d9, $db, $da, $db, $db, $da, $d5, $ce, $c7, $bd
15e8a     B8 B6 B4 B5 
15e8e     BC C3 C9 D2 
15e92     D9 E2 EA EC 
15e96     F1 F9 FF 03 | 	byte	$b8, $b6, $b4, $b5, $bc, $c3, $c9, $d2, $d9, $e2, $ea, $ec, $f1, $f9, $ff, $03
15e9a     08 0D 10 12 
15e9e     14 18 1A 1F 
15ea2     26 2D 38 42 
15ea6     49 4C 4F 49 | 	byte	$08, $0d, $10, $12, $14, $18, $1a, $1f, $26, $2d, $38, $42, $49, $4c, $4f, $49
15eaa     44 3E 3A 34 
15eae     30 26 21 1F 
15eb2     19 18 16 18 
15eb6     18 15 12 10 | 	byte	$44, $3e, $3a, $34, $30, $26, $21, $1f, $19, $18, $16, $18, $18, $15, $12, $10
15eba     0C 0A 08 07 
15ebe     02 FC F4 F1 
15ec2     ED EB E8 E5 
15ec6     E7 EC F6 FF | 	byte	$0c, $0a, $08, $07, $02, $fc, $f4, $f1, $ed, $eb, $e8, $e5, $e7, $ec, $f6, $ff
15eca     06 0D 10 1A 
15ece     1C 1C 16 16 
15ed2     13 0E 07 02 
15ed6     FF 01 02 03 | 	byte	$06, $0d, $10, $1a, $1c, $1c, $16, $16, $13, $0e, $07, $02, $ff, $01, $02, $03
15eda     06 0D 16 1E 
15ede     26 2D 33 39 
15ee2     3C 34 30 2A 
15ee6     28 26 26 21 | 	byte	$06, $0d, $16, $1e, $26, $2d, $33, $39, $3c, $34, $30, $2a, $28, $26, $26, $21
15eea     1E 19 19 18 
15eee     19 1E 25 2A 
15ef2     30 34 37 39 
15ef6     3A 37 31 28 | 	byte	$1e, $19, $19, $18, $19, $1e, $25, $2a, $30, $34, $37, $39, $3a, $37, $31, $28
15efa     1C 0E 04 F9 
15efe     F2 ED E6 DF 
15f02     DB DA DB D9 
15f06     DB DF E2 E5 | 	byte	$1c, $0e, $04, $f9, $f2, $ed, $e6, $df, $db, $da, $db, $d9, $db, $df, $e2, $e5
15f0a     E4 DF DC DA 
15f0e     D0 C4 BE BA 
15f12     B8 B5 BA BE 
15f16     C6 CF D6 DE | 	byte	$e4, $df, $dc, $da, $d0, $c4, $be, $ba, $b8, $b5, $ba, $be, $c6, $cf, $d6, $de
15f1a     E5 E7 EE F3 
15f1e     F9 FF 02 06 
15f22     08 0A 0C 10 
15f26     13 14 16 20 | 	byte	$e5, $e7, $ee, $f3, $f9, $ff, $02, $06, $08, $0a, $0c, $10, $13, $14, $16, $20
15f2a     2C 36 3F 43 
15f2e     44 46 43 3E 
15f32     39 32 28 26 
15f36     21 1A 18 16 | 	byte	$2c, $36, $3f, $43, $44, $46, $43, $3e, $39, $32, $28, $26, $21, $1a, $18, $16
15f3a     16 18 13 0F 
15f3e     0D 0F 0E 0E 
15f42     0A 06 03 FF 
15f46     FA F7 F1 EC | 	byte	$16, $18, $13, $0f, $0d, $0f, $0e, $0e, $0a, $06, $03, $ff, $fa, $f7, $f1, $ec
15f4a     E8 EA EA EC 
15f4e     F3 FA 03 0A 
15f52     10 18 1C 20 
15f56     20 1C 1A 13 | 	byte	$e8, $ea, $ea, $ec, $f3, $fa, $03, $0a, $10, $18, $1c, $20, $20, $1c, $1a, $13
15f5a     0D 09 09 04 
15f5e     04 07 09 0E 
15f62     14 1A 24 2D 
15f66     34 39 3A 39 | 	byte	$0d, $09, $09, $04, $04, $07, $09, $0e, $14, $1a, $24, $2d, $34, $39, $3a, $39
15f6a     34 31 30 28 
15f6e     26 24 1F 1A 
15f72     18 16 19 1B 
15f76     20 22 28 2C | 	byte	$34, $31, $30, $28, $26, $24, $1f, $1a, $18, $16, $19, $1b, $20, $22, $28, $2c
15f7a     33 36 38 38 
15f7e     32 27 21 15 
15f82     09 00 F4 ED 
15f86     E7 E1 DF DA | 	byte	$33, $36, $38, $38, $32, $27, $21, $15, $09, $00, $f4, $ed, $e7, $e1, $df, $da
15f8a     D9 DB DA DE 
15f8e     E2 E6 E7 E5 
15f92     E0 DF D5 CE 
15f96     C6 C1 BD BA | 	byte	$d9, $db, $da, $de, $e2, $e6, $e7, $e5, $e0, $df, $d5, $ce, $c6, $c1, $bd, $ba
15f9a     BE C2 C8 CE 
15f9e     D5 D9 E0 E6 
15fa2     EE F6 FA FF 
15fa6     04 08 0C 0E | 	byte	$be, $c2, $c8, $ce, $d5, $d9, $e0, $e6, $ee, $f6, $fa, $ff, $04, $08, $0c, $0e
15faa     0F 0F 10 15 
15fae     19 24 2C 32 
15fb2     38 3F 44 44 
15fb6     44 40 40 3A | 	byte	$0f, $0f, $10, $15, $19, $24, $2c, $32, $38, $3f, $44, $44, $44, $40, $40, $3a
15fba     32 2B 24 1F 
15fbe     1C 19 16 15 
15fc2     13 10 10 10 
15fc6     0D 09 09 06 | 	byte	$32, $2b, $24, $1f, $1c, $19, $16, $15, $13, $10, $10, $10, $0d, $09, $09, $06
15fca     04 00 FC F7 
15fce     F0 E8 E4 E5 
15fd2     E4 E6 ED F2 
15fd6     FA FF 08 0F | 	byte	$04, $00, $fc, $f7, $f0, $e8, $e4, $e5, $e4, $e6, $ed, $f2, $fa, $ff, $08, $0f
15fda     14 1A 19 18 
15fde     19 13 0E 0C 
15fe2     07 04 04 03 
15fe6     03 03 0D 16 | 	byte	$14, $1a, $19, $18, $19, $13, $0e, $0c, $07, $04, $04, $03, $03, $03, $0d, $16
15fea     20 27 2D 31 
15fee     34 36 32 32 
15ff2     30 30 28 26 
15ff6     1F 1A 18 18 | 	byte	$20, $27, $2d, $31, $34, $36, $32, $32, $30, $30, $28, $26, $1f, $1a, $18, $18
15ffa     18 19 1B 1E 
15ffe     24 2A 31 36 
16002     3A 3C 36 31 
16006     28 1A 13 07 | 	byte	$18, $19, $1b, $1e, $24, $2a, $31, $36, $3a, $3c, $36, $31, $28, $1a, $13, $07
1600a     00 F4 ED E6 
1600e     E1 DE DC DC 
16012     DF E0 E2 E6 
16016     E7 E6 E5 E1 | 	byte	$00, $f4, $ed, $e6, $e1, $de, $dc, $dc, $df, $e0, $e2, $e6, $e7, $e6, $e5, $e1
1601a     DB D5 CD C7 
1601e     C1 BE BC C1 
16022     C6 C9 D0 D6 
16026     DE E7 EE F3 | 	byte	$db, $d5, $cd, $c7, $c1, $be, $bc, $c1, $c6, $c9, $d0, $d6, $de, $e7, $ee, $f3
1602a     F6 FF 06 08 
1602e     09 09 0A 0C 
16032     10 12 16 1E 
16036     2A 31 36 3C | 	byte	$f6, $ff, $06, $08, $09, $09, $0a, $0c, $10, $12, $16, $1e, $2a, $31, $36, $3c
1603a     3F 42 45 44 
1603e     40 3C 39 30 
16042     28 26 21 1B 
16046     19 15 14 14 | 	byte	$3f, $42, $45, $44, $40, $3c, $39, $30, $28, $26, $21, $1b, $19, $15, $14, $14
1604a     13 13 10 0E 
1604e     0D 09 09 03 
16052     00 FC F3 ED 
16056     E8 E7 EB E8 | 	byte	$13, $13, $10, $0e, $0d, $09, $09, $03, $00, $fc, $f3, $ed, $e8, $e7, $eb, $e8
1605a     EB F1 F7 FE 
1605e     06 0C 12 16 
16062     1A 1B 18 15 
16066     10 10 0C 08 | 	byte	$eb, $f1, $f7, $fe, $06, $0c, $12, $16, $1a, $1b, $18, $15, $10, $10, $0c, $08
1606a     03 03 03 03 
1606e     08 10 1B 24 
16072     28 2D 32 32 
16076     32 33 31 30 | 	byte	$03, $03, $03, $03, $08, $10, $1b, $24, $28, $2d, $32, $32, $32, $33, $31, $30
1607a     2B 26 21 1C 
1607e     18 15 14 13 
16082     14 19 1E 24 
16086     2A 31 36 34 | 	byte	$2b, $26, $21, $1c, $18, $15, $14, $13, $14, $19, $1e, $24, $2a, $31, $36, $34
1608a     30 2B 26 1A 
1608e     13 06 00 F2 
16092     E8 E1 DC D8 
16096     D4 D3 D6 D8 | 	byte	$30, $2b, $26, $1a, $13, $06, $00, $f2, $e8, $e1, $dc, $d8, $d4, $d3, $d6, $d8
1609a     DC E0 E1 E2 
1609e     E0 DE DA D3 
160a2     CA C3 BE BC 
160a6     BB BC C0 C3 | 	byte	$dc, $e0, $e1, $e2, $e0, $de, $da, $d3, $ca, $c3, $be, $bc, $bb, $bc, $c0, $c3
160aa     C9 CF D6 DA 
160ae     E2 EC F3 FA 
160b2     FF 04 08 08 
160b6     08 0A 0C 0F | 	byte	$c9, $cf, $d6, $da, $e2, $ec, $f3, $fa, $ff, $04, $08, $08, $08, $0a, $0c, $0f
160ba     15 1B 25 2A 
160be     31 37 3D 42 
160c2     46 45 43 3F 
160c6     3C 39 32 2C | 	byte	$15, $1b, $25, $2a, $31, $37, $3d, $42, $46, $45, $43, $3f, $3c, $39, $32, $2c
160ca     26 20 1C 1C 
160ce     18 18 19 18 
160d2     13 0F 10 10 
160d6     0E 09 04 00 | 	byte	$26, $20, $1c, $1c, $18, $18, $19, $18, $13, $0f, $10, $10, $0e, $09, $04, $00
160da     F9 F3 EE EA 
160de     E8 EA EB EE 
160e2     F3 FA 03 0C 
160e6     12 13 16 19 | 	byte	$f9, $f3, $ee, $ea, $e8, $ea, $eb, $ee, $f3, $fa, $03, $0c, $12, $13, $16, $19
160ea     19 16 15 14 
160ee     10 0C 04 03 
160f2     02 04 09 12 
160f6     18 20 26 2B | 	byte	$19, $16, $15, $14, $10, $0c, $04, $03, $02, $04, $09, $12, $18, $20, $26, $2b
160fa     30 33 36 36 
160fe     36 34 30 2D 
16102     27 24 1F 1B 
16106     18 18 15 18 | 	byte	$30, $33, $36, $36, $36, $34, $30, $2d, $27, $24, $1f, $1b, $18, $18, $15, $18
1610a     1F 25 2C 34 
1610e     38 39 39 34 
16112     2E 26 1C 13 
16116     09 00 F7 ED | 	byte	$1f, $25, $2c, $34, $38, $39, $39, $34, $2e, $26, $1c, $13, $09, $00, $f7, $ed
1611a     E5 DE DA D9 
1611e     DA DB DE E1 
16122     E5 E8 E7 E5 
16126     DF DA D4 CD | 	byte	$e5, $de, $da, $d9, $da, $db, $de, $e1, $e5, $e8, $e7, $e5, $df, $da, $d4, $cd
1612a     C7 C2 BE BE 
1612e     C0 C2 C7 CD 
16132     D2 D8 DE E8 
16136     F0 F6 FD FF | 	byte	$c7, $c2, $be, $be, $c0, $c2, $c7, $cd, $d2, $d8, $de, $e8, $f0, $f6, $fd, $ff
1613a     03 06 04 06 
1613e     08 0D 10 15 
16142     1A 21 2A 31 
16146     37 3C 3E 3F | 	byte	$03, $06, $04, $06, $08, $0d, $10, $15, $1a, $21, $2a, $31, $37, $3c, $3e, $3f
1614a     3E 3C 39 36 
1614e     32 2B 26 20 
16152     1C 1A 1A 16 
16156     13 13 10 13 | 	byte	$3e, $3c, $39, $36, $32, $2b, $26, $20, $1c, $1a, $1a, $16, $13, $13, $10, $13
1615a     13 0F 0D 0C 
1615e     09 00 FC F7 
16162     F2 F0 EC EA 
16166     EB ED F1 F8 | 	byte	$13, $0f, $0d, $0c, $09, $00, $fc, $f7, $f2, $f0, $ec, $ea, $eb, $ed, $f1, $f8
1616a     FF 09 0F 14 
1616e     18 1A 1E 1B 
16172     1B 1A 15 13 
16176     0C 07 06 07 | 	byte	$ff, $09, $0f, $14, $18, $1a, $1e, $1b, $1b, $1a, $15, $13, $0c, $07, $06, $07
1617a     0C 10 15 1B 
1617e     22 2B 2D 32 
16182     38 38 36 37 
16186     31 2C 2A 26 | 	byte	$0c, $10, $15, $1b, $22, $2b, $2d, $32, $38, $38, $36, $37, $31, $2c, $2a, $26
1618a     20 1A 15 13 
1618e     10 13 19 20 
16192     27 2D 31 32 
16196     33 32 2D 26 | 	byte	$20, $1a, $15, $13, $10, $13, $19, $20, $27, $2d, $31, $32, $33, $32, $2d, $26
1619a     21 18 0F 04 
1619e     FC F0 E6 E1 
161a2     DB D6 D8 D9 
161a6     DE E2 E2 E5 | 	byte	$21, $18, $0f, $04, $fc, $f0, $e6, $e1, $db, $d6, $d8, $d9, $de, $e2, $e2, $e5
161aa     E6 E4 DF DB 
161ae     D5 CE CC C7 
161b2     C2 C0 C1 C1 
161b6     C3 C8 CE D4 | 	byte	$e6, $e4, $df, $db, $d5, $ce, $cc, $c7, $c2, $c0, $c1, $c1, $c3, $c8, $ce, $d4
161ba     D9 E2 EC F3 
161be     F8 FC FE FF 
161c2     02 03 03 08 
161c6     0C 0F 14 1C | 	byte	$d9, $e2, $ec, $f3, $f8, $fc, $fe, $ff, $02, $03, $03, $08, $0c, $0f, $14, $1c
161ca     22 2A 32 36 
161ce     3A 3C 3E 3D 
161d2     3C 37 31 2B 
161d6     27 26 1E 1A | 	byte	$22, $2a, $32, $36, $3a, $3c, $3e, $3d, $3c, $37, $31, $2b, $27, $26, $1e, $1a
161da     16 14 14 13 
161de     0F 0F 12 13 
161e2     0D 09 07 02 
161e6     FC F9 F3 ED | 	byte	$16, $14, $14, $13, $0f, $0f, $12, $13, $0d, $09, $07, $02, $fc, $f9, $f3, $ed
161ea     EA E7 E7 EC 
161ee     F1 F6 FC 03 
161f2     0A 0D 13 16 
161f6     1B 1B 1E 19 | 	byte	$ea, $e7, $e7, $ec, $f1, $f6, $fc, $03, $0a, $0d, $13, $16, $1b, $1b, $1e, $19
161fa     15 13 0C 0A 
161fe     09 07 09 0E 
16202     14 19 1F 26 
16206     2C 31 36 39 | 	byte	$15, $13, $0c, $0a, $09, $07, $09, $0e, $14, $19, $1f, $26, $2c, $31, $36, $39
1620a     36 34 37 34 
1620e     30 2B 26 1E 
16212     18 13 13 14 
16216     18 1C 22 2C | 	byte	$36, $34, $37, $34, $30, $2b, $26, $1e, $18, $13, $13, $14, $18, $1c, $22, $2c
1621a     2E 31 33 31 
1621e     30 2D 26 1E 
16222     13 0C 02 F8 
16226     ED E6 E0 DE | 	byte	$2e, $31, $33, $31, $30, $2d, $26, $1e, $13, $0c, $02, $f8, $ed, $e6, $e0, $de
1622a     DB DE E2 E5 
1622e     E7 E8 E7 E8 
16232     E5 DF DA D5 
16236     CF CD C9 C6 | 	byte	$db, $de, $e2, $e5, $e7, $e8, $e7, $e8, $e5, $df, $da, $d5, $cf, $cd, $c9, $c6
1623a     C6 C8 C7 C8 
1623e     CD D3 D9 E4 
16242     EC F1 F8 FD 
16246     FF 00 01 02 | 	byte	$c6, $c8, $c7, $c8, $cd, $d3, $d9, $e4, $ec, $f1, $f8, $fd, $ff, $00, $01, $02
1624a     03 08 0A 0E 
1624e     14 1B 24 27 
16252     2C 32 36 3C 
16256     3D 39 36 36 | 	byte	$03, $08, $0a, $0e, $14, $1b, $24, $27, $2c, $32, $36, $3c, $3d, $39, $36, $36
1625a     30 2B 26 20 
1625e     1F 1C 18 13 
16262     12 0F 0F 0F 
16266     0F 10 0D 09 | 	byte	$30, $2b, $26, $20, $1f, $1c, $18, $13, $12, $0f, $0f, $0f, $0f, $10, $0d, $09
1626a     06 02 FE F8 
1626e     F1 ED E8 E6 
16272     E6 EA EE F3 
16276     F9 FF 03 0C | 	byte	$06, $02, $fe, $f8, $f1, $ed, $e8, $e6, $e6, $ea, $ee, $f3, $f9, $ff, $03, $0c
1627a     12 18 1A 1B 
1627e     1E 1A 16 13 
16282     0E 0D 0D 0D 
16286     0F 13 15 18 | 	byte	$12, $18, $1a, $1b, $1e, $1a, $16, $13, $0e, $0d, $0d, $0d, $0f, $13, $15, $18
1628a     20 26 2B 2E 
1628e     34 36 36 37 
16292     39 38 33 2D 
16296     28 22 1B 14 | 	byte	$20, $26, $2b, $2e, $34, $36, $36, $37, $39, $38, $33, $2d, $28, $22, $1b, $14
1629a     13 14 19 1E 
1629e     21 25 2A 2E 
162a2     30 30 2D 28 
162a6     26 1F 15 0C | 	byte	$13, $14, $19, $1e, $21, $25, $2a, $2e, $30, $30, $2d, $28, $26, $1f, $15, $0c
162aa     03 F9 F0 E6 
162ae     DF DB D9 DA 
162b2     D9 DC E1 E5 
162b6     E5 E5 E1 DE | 	byte	$03, $f9, $f0, $e6, $df, $db, $d9, $da, $d9, $dc, $e1, $e5, $e5, $e5, $e1, $de
162ba     DC D5 D3 CD 
162be     CA C9 C7 C3 
162c2     C4 C8 CE D3 
162c6     D9 E0 EA EE | 	byte	$dc, $d5, $d3, $cd, $ca, $c9, $c7, $c3, $c4, $c8, $ce, $d3, $d9, $e0, $ea, $ee
162ca     F6 FA FF 03 
162ce     03 06 06 04 
162d2     0C 12 14 18 
162d6     1F 24 2B 2E | 	byte	$f6, $fa, $ff, $03, $03, $06, $06, $04, $0c, $12, $14, $18, $1f, $24, $2b, $2e
162da     34 38 3C 3D 
162de     3A 39 33 2E 
162e2     2D 26 1F 1C 
162e6     19 14 13 13 | 	byte	$34, $38, $3c, $3d, $3a, $39, $33, $2e, $2d, $26, $1f, $1c, $19, $14, $13, $13
162ea     13 13 0F 0D 
162ee     0D 0A 07 01 
162f2     00 FA F4 F0 
162f6     E8 E5 E6 E7 | 	byte	$13, $13, $0f, $0d, $0d, $0a, $07, $01, $00, $fa, $f4, $f0, $e8, $e5, $e6, $e7
162fa     E8 ED F3 F6 
162fe     FD 01 0C 0F 
16302     15 19 1A 19 
16306     14 10 0F 0E | 	byte	$e8, $ed, $f3, $f6, $fd, $01, $0c, $0f, $15, $19, $1a, $19, $14, $10, $0f, $0e
1630a     0C 0A 0D 0D 
1630e     10 15 19 21 
16312     28 2B 2D 32 
16316     34 37 37 39 | 	byte	$0c, $0a, $0d, $0d, $10, $15, $19, $21, $28, $2b, $2d, $32, $34, $37, $37, $39
1631a     33 30 28 20 
1631e     18 16 13 12 
16322     00 00 0D 08 
16326     0E 0F 0E 0E | 	byte	$33, $30, $28, $20, $18, $16, $13, $12, $00, $00, $0d, $08, $0e, $0f, $0e, $0e
1632a     16 18 1E 18 
1632e     1C 1A 1F 18 
16332     12 19 14 13 
16336     0E 07 06 0F | 	byte	$16, $18, $1e, $18, $1c, $1a, $1f, $18, $12, $19, $14, $13, $0e, $07, $06, $0f
1633a     15 13 0D 14 
1633e     1C 1E 1B 18 
16342     18 1F 13 16 
16346     09 06 F7 FA | 	byte	$15, $13, $0d, $14, $1c, $1e, $1b, $18, $18, $1f, $13, $16, $09, $06, $f7, $fa
1634a     F3 F2 EB F1 
1634e     EA F7 F2 F6 
16352     F0 F7 F2 F7 
16356     F1 EC E8 EE | 	byte	$f3, $f2, $eb, $f1, $ea, $f7, $f2, $f6, $f0, $f7, $f2, $f7, $f1, $ec, $e8, $ee
1635a     E8 D8 DC DF 
1635e     DF D3 DB E6 
16362     E8 E4 DE EB 
16366     FE FC FE F9 | 	byte	$e8, $d8, $dc, $df, $df, $d3, $db, $e6, $e8, $e4, $de, $eb, $fe, $fc, $fe, $f9
1636a     F7 F7 F8 00 
1636e     00 FE 07 01 
16372     01 06 15 1C 
16376     18 1B 1A 1E | 	byte	$f7, $f7, $f8, $00, $00, $fe, $07, $01, $01, $06, $15, $1c, $18, $1b, $1a, $1e
1637a     1A 21 1E 1F 
1637e     10 14 12 0E 
16382     08 13 18 0C 
16386     03 0D 0D 0C | 	byte	$1a, $21, $1e, $1f, $10, $14, $12, $0e, $08, $13, $18, $0c, $03, $0d, $0d, $0c
1638a     09 08 0A 08 
1638e     00 03 00 FA 
16392     F4 FC FA F8 
16396     FE FD F9 F2 | 	byte	$09, $08, $0a, $08, $00, $03, $00, $fa, $f4, $fc, $fa, $f8, $fe, $fd, $f9, $f2
1639a     00 0C 0D 0D 
1639e     0F 13 14 0E 
163a2     10 18 12 0E 
163a6     13 13 0E 13 | 	byte	$00, $0c, $0d, $0d, $0f, $13, $14, $0e, $10, $18, $12, $0e, $13, $13, $0e, $13
163aa     19 15 0E 13 
163ae     14 1A 14 1C 
163b2     20 22 21 26 
163b6     2B 25 18 10 | 	byte	$19, $15, $0e, $13, $14, $1a, $14, $1c, $20, $22, $21, $26, $2b, $25, $18, $10
163ba     14 10 07 06 
163be     00 00 F3 1A 
163c2     F7 2A EB 2A 
163c6     13 54 09 46 | 	byte	$14, $10, $07, $06, $00, $00, $f3, $1a, $f7, $2a, $eb, $2a, $13, $54, $09, $46
163ca     10 3E 30 2A 
163ce     00 13 1A 0E 
163d2     F3 E6 DB FC 
163d6     00 EB CC DB | 	byte	$10, $3e, $30, $2a, $00, $13, $1a, $0e, $f3, $e6, $db, $fc, $00, $eb, $cc, $db
163da     CE D5 F7 D6 
163de     C7 C9 CE D5 
163e2     D6 C7 BB D8 
163e6     BC C2 D5 E6 | 	byte	$ce, $d5, $f7, $d6, $c7, $c9, $ce, $d5, $d6, $c7, $bb, $d8, $bc, $c2, $d5, $e6
163ea     D0 D2 E4 D6 
163ee     CC FC CC C7 
163f2     B5 D5 00 EB 
163f6     E8 FD 09 2A | 	byte	$d0, $d2, $e4, $d6, $cc, $fc, $cc, $c7, $b5, $d5, $00, $eb, $e8, $fd, $09, $2a
163fa     1E 1E 2A 4A 
163fe     3E 4A 37 48 
16402     54 2A 21 37 
16406     25 2A 22 38 | 	byte	$1e, $1e, $2a, $4a, $3e, $4a, $37, $48, $54, $2a, $21, $37, $25, $2a, $22, $38
1640a     2C 2A 0C 09 
1640e     25 1A FE 0E 
16412     1A FC 00 09 
16416     00 ED FC F2 | 	byte	$2c, $2a, $0c, $09, $25, $1a, $fe, $0e, $1a, $fc, $00, $09, $00, $ed, $fc, $f2
1641a     E1 EB EC DF 
1641e     BD B0 00 EC 
16422     EC E6 00 2A 
16426     16 1F 1F 00 | 	byte	$e1, $eb, $ec, $df, $bd, $b0, $00, $ec, $ec, $e6, $00, $2a, $16, $1f, $1f, $00
1642a     10 2A 1F 0F 
1642e     13 2A F7 EB 
16432     F7 EB 00 06 
16436     09 13 09 04 | 	byte	$10, $2a, $1f, $0f, $13, $2a, $f7, $eb, $f7, $eb, $00, $06, $09, $13, $09, $04
1643a     0E 13 09 F8 
1643e     13 12 F7 F2 
16442     F4 F7 EA FC 
16446     FC D5 0E F8 | 	byte	$0e, $13, $09, $f8, $13, $12, $f7, $f2, $f4, $f7, $ea, $fc, $fc, $d5, $0e, $f8
1644a     E1 D8 CC 09 
1644e     EB EC FC 00 
16452     25 1F 2A 00 
16456     01 19 25 0C | 	byte	$e1, $d8, $cc, $09, $eb, $ec, $fc, $00, $25, $1f, $2a, $00, $01, $19, $25, $0c
1645a     F7 2A 18 F2 
1645e     F1 F7 FC 00 
16462     09 06 0D 09 
16466     F7 F7 09 E4 | 	byte	$f7, $2a, $18, $f2, $f1, $f7, $fc, $00, $09, $06, $0d, $09, $f7, $f7, $09, $e4
1646a     DE F3 F2 E2 
1646e     ED F1 EC F3 
16472     00 EC F7 00 
16476     F7 E0 D6 D5 | 	byte	$de, $f3, $f2, $e2, $ed, $f1, $ec, $f3, $00, $ec, $f7, $00, $f7, $e0, $d6, $d5
1647a     EC E2 E0 E1 
1647e     00 2A 2A 3F 
16482     1F 1C 39 3F 
16486     3F 24 3E 1A | 	byte	$ec, $e2, $e0, $e1, $00, $2a, $2a, $3f, $1f, $1c, $39, $3f, $3f, $24, $3e, $1a
1648a     00 0E 01 00 
1648e     FE 07 1A 0E 
16492     00 F2 00 0E 
16496     E4 EB 06 F2 | 	byte	$00, $0e, $01, $00, $fe, $07, $1a, $0e, $00, $f2, $00, $0e, $e4, $eb, $06, $f2
1649a     E2 EE FF E7 
1649e     D9 F6 C8 F0 
164a2     E4 C1 D5 B6 
164a6     D5 D2 CC E1 | 	byte	$e2, $ee, $ff, $e7, $d9, $f6, $c8, $f0, $e4, $c1, $d5, $b6, $d5, $d2, $cc, $e1
164aa     EB 13 1A 46 
164ae     40 2E 24 3F 
164b2     44 20 34 39 
164b6     1F 09 13 16 | 	byte	$eb, $13, $1a, $46, $40, $2e, $24, $3f, $44, $20, $34, $39, $1f, $09, $13, $16
164ba     14 21 2A 34 
164be     39 32 2A 3E 
164c2     30 0D 19 2C 
164c6     18 1A 26 1F | 	byte	$14, $21, $2a, $34, $39, $32, $2a, $3e, $30, $0d, $19, $2c, $18, $1a, $26, $1f
164ca     1A 10 1A 09 
164ce     15 14 F8 00 
164d2     EB F7 00 F7 
164d6     EB ED 2C 19 | 	byte	$1a, $10, $1a, $09, $15, $14, $f8, $00, $eb, $f7, $00, $f7, $eb, $ed, $2c, $19
164da     2A 1F 09 0D 
164de     00 09 ED 09 
164e2     04 DB DA D6 
164e6     EC E0 E0 F2 | 	byte	$2a, $1f, $09, $0d, $00, $09, $ed, $09, $04, $db, $da, $d6, $ec, $e0, $e0, $f2
164ea     00 FA DF C6 
164ee     E8 D9 B0 C8 
164f2     DB D5 CF ED 
164f6     F7 E1 FC D6 | 	byte	$00, $fa, $df, $c6, $e8, $d9, $b0, $c8, $db, $d5, $cf, $ed, $f7, $e1, $fc, $d6
164fa     F3 00 E1 E0 
164fe     C6 D4 E0 D5 
16502     D6 D6 00 1C 
16506     2A 3C 3F 2A | 	byte	$f3, $00, $e1, $e0, $c6, $d4, $e0, $d5, $d6, $d6, $00, $1c, $2a, $3c, $3f, $2a
1650a     2D 3E 34 2A 
1650e     3E 34 07 12 
16512     1E 13 14 1A 
16516     1E 2A 28 14 | 	byte	$2d, $3e, $34, $2a, $3e, $34, $07, $12, $1e, $13, $14, $1a, $1e, $2a, $28, $14
1651a     00 18 00 EC 
1651e     0E 08 00 09 
16522     13 1A 00 09 
16526     F3 03 14 DB | 	byte	$00, $18, $00, $ec, $0e, $08, $00, $09, $13, $1a, $00, $09, $f3, $03, $14, $db
1652a     EC DA E0 DE 
1652e     DB E8 CC 00 
16532     1B 32 34 2A 
16536     26 22 30 09 | 	byte	$ec, $da, $e0, $de, $db, $e8, $cc, $00, $1b, $32, $34, $2a, $26, $22, $30, $09
1653a     06 2A 14 FC 
1653e     F7 00 06 09 
16542     0E 1C 2B 36 
16546     0E 10 1F 04 | 	byte	$06, $2a, $14, $fc, $f7, $00, $06, $09, $0e, $1c, $2b, $36, $0e, $10, $1f, $04
1654a     FC 0D 0F FC 
1654e     0D 1E 09 13 
16552     00 FD 13 14 
16556     00 F8 EB 00 | 	byte	$fc, $0d, $0f, $fc, $0d, $1e, $09, $13, $00, $fd, $13, $14, $00, $f8, $eb, $00
1655a     04 F7 F2 EB 
1655e     1B 2A 2B 34 
16562     1C 1A 19 14 
16566     F7 FE 1A ED | 	byte	$04, $f7, $f2, $eb, $1b, $2a, $2b, $34, $1c, $1a, $19, $14, $f7, $fe, $1a, $ed
1656a     D9 E8 F2 E6 
1656e     EB F1 00 00 
16572     00 E4 F1 ED 
16576     C7 DC E0 E1 | 	byte	$d9, $e8, $f2, $e6, $eb, $f1, $00, $00, $00, $e4, $f1, $ed, $c7, $dc, $e0, $e1
1657a     E0 E6 09 F7 
1657e     04 EE E0 18 
16582     F4 EB E1 EB 
16586     F3 DE F3 D6 | 	byte	$e0, $e6, $09, $f7, $04, $ee, $e0, $18, $f4, $eb, $e1, $eb, $f3, $de, $f3, $d6
1658a     EB 0E 2B 3E 
1658e     3F 3C 32 43 
16592     34 1A 2A 30 
16596     14 08 0E 04 | 	byte	$eb, $0e, $2b, $3e, $3f, $3c, $32, $43, $34, $1a, $2a, $30, $14, $08, $0e, $04
1659a     00 03 0E 08 
1659e     19 09 FE 03 
165a2     00 E0 EB FE 
165a6     E6 EC 00 00 | 	byte	$00, $03, $0e, $08, $19, $09, $fe, $03, $00, $e0, $eb, $fe, $e6, $ec, $00, $00
165aa     00 F2 E6 D5 
165ae     F2 E1 E1 CC 
165b2     D0 E6 E0 F2 
165b6     CC F1 13 24 | 	byte	$00, $f2, $e6, $d5, $f2, $e1, $e1, $cc, $d0, $e6, $e0, $f2, $cc, $f1, $13, $24
165ba     3E 34 30 2B 
165be     3C 2A 03 31 
165c2     30 0A 06 12 
165c6     0A 0E 0E 27 | 	byte	$3e, $34, $30, $2b, $3c, $2a, $03, $31, $30, $0a, $06, $12, $0a, $0e, $0e, $27
165ca     2E 3E 2A 27 
165ce     3C 14 13 13 
165d2     14 14 01 27 
165d6     0C 1A 21 F2 | 	byte	$2e, $3e, $2a, $27, $3c, $14, $13, $13, $14, $14, $01, $27, $0c, $1a, $21, $f2
165da     0E 14 09 F7 
165de     EC 00 04 0E 
165e2     00 ED 00 1C 
165e6     2A 30 30 14 | 	byte	$0e, $14, $09, $f7, $ec, $00, $04, $0e, $00, $ed, $00, $1c, $2a, $30, $30, $14
165ea     19 18 00 FC 
165ee     0E 00 EC E4 
165f2     E6 E0 E4 EB 
165f6     ED F7 00 EC | 	byte	$19, $18, $00, $fc, $0e, $00, $ec, $e4, $e6, $e0, $e4, $eb, $ed, $f7, $00, $ec
165fa     E0 F2 CE C1 
165fe     D5 D0 D6 D5 
16602     EC EB EB EC 
16606     D9 F7 E6 EC | 	byte	$e0, $f2, $ce, $c1, $d5, $d0, $d6, $d5, $ec, $eb, $eb, $ec, $d9, $f7, $e6, $ec
1660a     D9 D0 EB DE 
1660e     F9 DB DB 00 
16612     0E 32 3C 3D 
16616     2A 3C 4C 1F | 	byte	$d9, $d0, $eb, $de, $f9, $db, $db, $00, $0e, $32, $3c, $3d, $2a, $3c, $4c, $1f
1661a     2A 43 30 1A 
1661e     13 0E 14 0E 
16622     19 18 2A 21 
16626     14 1E 14 04 | 	byte	$2a, $43, $30, $1a, $13, $0e, $14, $0e, $19, $18, $2a, $21, $14, $1e, $14, $04
1662a     FC 01 09 EE 
1662e     10 00 00 0E 
16632     F2 E6 F2 F2 
16636     E5 CE D5 E6 | 	byte	$fc, $01, $09, $ee, $10, $00, $00, $0e, $f2, $e6, $f2, $f2, $e5, $ce, $d5, $e6
1663a     EB F2 DE E0 
1663e     00 13 31 37 
16642     2A 25 34 2A 
16646     09 24 2C 1A | 	byte	$eb, $f2, $de, $e0, $00, $13, $31, $37, $2a, $25, $34, $2a, $09, $24, $2c, $1a
1664a     00 09 08 04 
1664e     09 1F 24 2D 
16652     2C 13 30 21 
16656     01 0E 0E 14 | 	byte	$00, $09, $08, $04, $09, $1f, $24, $2d, $2c, $13, $30, $21, $01, $0e, $0e, $14
1665a     00 09 14 09 
1665e     15 F2 06 03 
16662     00 FC E1 00 
16666     F2 09 00 E6 | 	byte	$00, $09, $14, $09, $15, $f2, $06, $03, $00, $fc, $e1, $00, $f2, $09, $00, $e6
1666a     F7 00 19 21 
1666e     30 1A 0A 22 
16672     09 F3 09 09 
16676     00 EB E8 EC | 	byte	$f7, $00, $19, $21, $30, $1a, $0a, $22, $09, $f3, $09, $09, $00, $eb, $e8, $ec
1667a     EC F7 F6 00 
1667e     01 00 F1 F2 
16682     EC D2 D9 EB 
16686     D6 E5 F7 E7 | 	byte	$ec, $f7, $f6, $00, $01, $00, $f1, $f2, $ec, $d2, $d9, $eb, $d6, $e5, $f7, $e7
1668a     F7 00 E4 F1 
1668e     F0 F0 EC D5 
16692     EC EB FD EE 
16696     D5 F7 00 21 | 	byte	$f7, $00, $e4, $f1, $f0, $f0, $ec, $d5, $ec, $eb, $fd, $ee, $d5, $f7, $00, $21
1669a     34 34 30 34 
1669e     48 2A 1E 38 
166a2     39 1A 14 18 
166a6     14 08 14 13 | 	byte	$34, $34, $30, $34, $48, $2a, $1e, $38, $39, $1a, $14, $18, $14, $08, $14, $13
166aa     1B 2B 04 0F 
166ae     18 00 00 F3 
166b2     0E FC FC 00 
166b6     F7 0E EC E4 | 	byte	$1b, $2b, $04, $0f, $18, $00, $00, $f3, $0e, $fc, $fc, $00, $f7, $0e, $ec, $e4
166ba     EC E8 EB D6 
166be     D5 D9 E8 F7 
166c2     E1 DB EE 09 
166c6     19 2C 30 20 | 	byte	$ec, $e8, $eb, $d6, $d5, $d9, $e8, $f7, $e1, $db, $ee, $09, $19, $2c, $30, $20
166ca     2A 34 0E 13 
166ce     27 2A 0D 09 
166d2     0E 09 0E 12 
166d6     22 2A 30 22 | 	byte	$2a, $34, $0e, $13, $27, $2a, $0d, $09, $0e, $09, $0e, $12, $22, $2a, $30, $22
166da     26 30 0E 09 
166de     24 14 09 13 
166e2     18 09 1F 00 
166e6     01 06 00 09 | 	byte	$26, $30, $0e, $09, $24, $14, $09, $13, $18, $09, $1f, $00, $01, $06, $00, $09
166ea     EC 00 FE 06 
166ee     0D EC F7 F7 
166f2     0D 22 28 1F 
166f6     09 1E 14 ED | 	byte	$ec, $00, $fe, $06, $0d, $ec, $f7, $f7, $0d, $22, $28, $1f, $09, $1e, $14, $ed
166fa     FA 0E 00 ED 
166fe     E8 F7 E4 ED 
16702     F3 F1 0A F3 
16706     EC F7 EC E4 | 	byte	$fa, $0e, $00, $ed, $e8, $f7, $e4, $ed, $f3, $f1, $0a, $f3, $ec, $f7, $ec, $e4
1670a     CC E2 E1 DB 
1670e     EB E1 F7 00 
16712     E2 E6 EC F1 
16716     EC DE E0 E4 | 	byte	$cc, $e2, $e1, $db, $eb, $e1, $f7, $00, $e2, $e6, $ec, $f1, $ec, $de, $e0, $e4
1671a     F7 F7 DB E4 
1671e     FC 0E 26 36 
16722     2A 24 44 2A 
16726     1B 2A 37 25 | 	byte	$f7, $f7, $db, $e4, $fc, $0e, $26, $36, $2a, $24, $44, $2a, $1b, $2a, $37, $25
1672a     14 13 14 0E 
1672e     04 14 13 26 
16732     10 01 1F 09 
16736     00 FE 0A FC | 	byte	$14, $13, $14, $0e, $04, $14, $13, $26, $10, $01, $1f, $09, $00, $fe, $0a, $fc
1673a     F7 09 F8 12 
1673e     00 E7 F3 E4 
16742     FA DB D5 E1 
16746     E4 00 EC E6 | 	byte	$f7, $09, $f8, $12, $00, $e7, $f3, $e4, $fa, $db, $d5, $e1, $e4, $00, $ec, $e6
1674a     EB FE 13 2A 
1674e     37 21 24 3F 
16752     21 10 26 2A 
16756     1A 09 1E 0C | 	byte	$eb, $fe, $13, $2a, $37, $21, $24, $3f, $21, $10, $26, $2a, $1a, $09, $1e, $0c
1675a     14 19 18 2A 
1675e     2A 2A 2A 2A 
16762     25 09 13 18 
16766     09 13 14 0C | 	byte	$14, $19, $18, $2a, $2a, $2a, $2a, $2a, $25, $09, $13, $18, $09, $13, $14, $0c
1676a     1F 09 FE 04 
1676e     00 09 F7 FA 
16772     FC FE 14 FC 
16776     F0 F7 00 13 | 	byte	$1f, $09, $fe, $04, $00, $09, $f7, $fa, $fc, $fe, $14, $fc, $f0, $f7, $00, $13
1677a     1E 1F 09 13 
1677e     1A 00 F4 09 
16782     00 F7 EB F7 
16786     F2 E6 F4 EB | 	byte	$1e, $1f, $09, $13, $1a, $00, $f4, $09, $00, $f7, $eb, $f7, $f2, $e6, $f4, $eb
1678a     00 00 DB F7 
1678e     ED DF CC DF 
16792     E1 D2 EB E1 
16796     F1 FF E6 EB | 	byte	$00, $00, $db, $f7, $ed, $df, $cc, $df, $e1, $d2, $eb, $e1, $f1, $ff, $e6, $eb
1679a     DA F1 EC DE 
1679e     E0 DB F7 F7 
167a2     E6 E4 EB 00 
167a6     13 2E 34 1E | 	byte	$da, $f1, $ec, $de, $e0, $db, $f7, $f7, $e6, $e4, $eb, $00, $13, $2e, $34, $1e
167aa     3E 39 1F 1E 
167ae     37 2B 14 22 
167b2     16 14 0E 0D 
167b6     19 1C 14 0E | 	byte	$3e, $39, $1f, $1e, $37, $2b, $14, $22, $16, $14, $0e, $0d, $19, $1c, $14, $0e
167ba     13 13 00 FE 
167be     09 01 FC 09 
167c2     FD 09 0D ED 
167c6     F2 E0 F3 E6 | 	byte	$13, $13, $00, $fe, $09, $01, $fc, $09, $fd, $09, $0d, $ed, $f2, $e0, $f3, $e6
167ca     D8 E6 DB FD 
167ce     F9 E8 EA F1 
167d2     02 1C 34 2A 
167d6     24 3A 2A 14 | 	byte	$d8, $e6, $db, $fd, $f9, $e8, $ea, $f1, $02, $1c, $34, $2a, $24, $3a, $2a, $14
167da     24 25 21 0C 
167de     0F 15 09 1C 
167e2     0E 1B 3E 1F 
167e6     24 22 2A 0E | 	byte	$24, $25, $21, $0c, $0f, $15, $09, $1c, $0e, $1b, $3e, $1f, $24, $22, $2a, $0e
167ea     0E 1F 09 13 
167ee     14 0C 1E 14 
167f2     06 00 00 06 
167f6     00 F7 F2 00 | 	byte	$0e, $1f, $09, $13, $14, $0c, $1e, $14, $06, $00, $00, $06, $00, $f7, $f2, $00
167fa     10 04 F4 F2 
167fe     FC 00 10 25 
16802     0D 10 1F 0E 
16806     F3 07 09 F7 | 	byte	$10, $04, $f4, $f2, $fc, $00, $10, $25, $0d, $10, $1f, $0e, $f3, $07, $09, $f7
1680a     F7 F2 F9 EB 
1680e     EC F7 00 04 
16812     ED F2 F7 EC 
16816     D6 DE EE DA | 	byte	$f7, $f2, $f9, $eb, $ec, $f7, $00, $04, $ed, $f2, $f7, $ec, $d6, $de, $ee, $da
1681a     F0 EA E8 06 
1681e     ED F3 E1 F2 
16822     FA DF ED DE 
16826     F1 FD EE E8 | 	byte	$f0, $ea, $e8, $06, $ed, $f3, $e1, $f2, $fa, $df, $ed, $de, $f1, $fd, $ee, $e8
1682a     E8 F3 03 24 
1682e     2C 1B 2E 3C 
16832     2A 1E 26 34 
16836     15 14 19 04 | 	byte	$e8, $f3, $03, $24, $2c, $1b, $2e, $3c, $2a, $1e, $26, $34, $15, $14, $19, $04
1683a     14 0E 01 1C 
1683e     14 06 03 0E 
16842     04 F2 00 00 
16846     FC 00 F9 00 | 	byte	$14, $0e, $01, $1c, $14, $06, $03, $0e, $04, $f2, $00, $00, $fc, $00, $f9, $00
1684a     04 F6 EC E0 
1684e     EA EC D5 D6 
16852     D3 EB FC ED 
16856     E1 EA FA 00 | 	byte	$04, $f6, $ec, $e0, $ea, $ec, $d5, $d6, $d3, $eb, $fc, $ed, $e1, $ea, $fa, $00
1685a     26 2A 1C 2E 
1685e     39 15 18 2A 
16862     2A 19 0C 1F 
16866     19 13 18 19 | 	byte	$26, $2a, $1c, $2e, $39, $15, $18, $2a, $2a, $19, $0c, $1f, $19, $13, $18, $19
1686a     3C 2B 25 2A 
1686e     30 2A 0E 2A 
16872     14 1A 1C 0A 
16876     24 14 18 00 | 	byte	$3c, $2b, $25, $2a, $30, $2a, $0e, $2a, $14, $1a, $1c, $0a, $24, $14, $18, $00
1687a     00 13 00 00 
1687e     FC FF 13 0D 
16882     00 F8 FC FD 
16886     0E 26 14 12 | 	byte	$00, $13, $00, $00, $fc, $ff, $13, $0d, $00, $f8, $fc, $fd, $0e, $26, $14, $12
1688a     1E 14 00 FC 
1688e     0F 00 F2 FC 
16892     EB EE F3 E7 
16896     F1 00 F2 E4 | 	byte	$1e, $14, $00, $fc, $0f, $00, $f2, $fc, $eb, $ee, $f3, $e7, $f1, $00, $f2, $e4
1689a     EB ED D6 D0 
1689e     E1 D9 E0 E1 
168a2     DB F8 ED EC 
168a6     DF E0 F2 DF | 	byte	$eb, $ed, $d6, $d0, $e1, $d9, $e0, $e1, $db, $f8, $ed, $ec, $df, $e0, $f2, $df
168aa     E2 D8 DE F2 
168ae     F3 E6 E0 ED 
168b2     F3 0E 2A 1C 
168b6     1E 3E 2C 1C | 	byte	$e2, $d8, $de, $f2, $f3, $e6, $e0, $ed, $f3, $0e, $2a, $1c, $1e, $3e, $2c, $1c
168ba     24 30 2C 13 
168be     1A 1A 10 14 
168c2     01 1E 1E 14 
168c6     0D 16 1A 00 | 	byte	$24, $30, $2c, $13, $1a, $1a, $10, $14, $01, $1e, $1e, $14, $0d, $16, $1a, $00
168ca     09 09 00 10 
168ce     00 00 09 0D 
168d2     FC E6 F7 F2 
168d6     EB E2 DA EB | 	byte	$09, $09, $00, $10, $00, $00, $09, $0d, $fc, $e6, $f7, $f2, $eb, $e2, $da, $eb
168da     00 F8 EE ED 
168de     F7 FE 1E 25 
168e2     1F 2A 37 2A 
168e6     0D 2A 2A 14 | 	byte	$00, $f8, $ee, $ed, $f7, $fe, $1e, $25, $1f, $2a, $37, $2a, $0d, $2a, $2a, $14
168ea     13 0F 10 0E 
168ee     0E 0E 27 2C 
168f2     1F 1E 26 2A 
168f6     06 19 14 0E | 	byte	$13, $0f, $10, $0e, $0e, $0e, $27, $2c, $1f, $1e, $26, $2a, $06, $19, $14, $0e
168fa     1A 01 18 13 
168fe     0D 04 F3 09 
16902     FE FD F7 F1 
16906     00 0A 04 F2 | 	byte	$1a, $01, $18, $13, $0d, $04, $f3, $09, $fe, $fd, $f7, $f1, $00, $0a, $04, $f2
1690a     F7 F6 FC 1A 
1690e     1A 04 1C 1A 
16912     09 FC 01 0E 
16916     F7 F6 F7 EE | 	byte	$f7, $f6, $fc, $1a, $1a, $04, $1c, $1a, $09, $fc, $01, $0e, $f7, $f6, $f7, $ee
1691a     FC EC F7 00 
1691e     01 F2 EE FE 
16922     E1 DE EB E1 
16926     EB EE EB F8 | 	byte	$fc, $ec, $f7, $00, $01, $f2, $ee, $fe, $e1, $de, $eb, $e1, $eb, $ee, $eb, $f8
1692a     FD 00 EC E8 
1692e     F8 F0 F2 E1 
16932     E4 F7 FD F7 
16936     E8 F1 EE 00 | 	byte	$fd, $00, $ec, $e8, $f8, $f0, $f2, $e1, $e4, $f7, $fd, $f7, $e8, $f1, $ee, $00
1693a     24 21 1C 39 
1693e     3E 1A 22 34 
16942     2A 1A 14 18 
16946     0C 14 01 10 | 	byte	$24, $21, $1c, $39, $3e, $1a, $22, $34, $2a, $1a, $14, $18, $0c, $14, $01, $10
1694a     19 14 08 03 
1694e     14 F9 FC 04 
16952     F7 0E F3 FF 
16956     01 00 FF DB | 	byte	$19, $14, $08, $03, $14, $f9, $fc, $04, $f7, $0e, $f3, $ff, $01, $00, $ff, $db
1695a     E6 EB E0 DB 
1695e     D0 D5 F0 F7 
16962     EC E2 F0 EB 
16966     06 21 14 2A | 	byte	$e6, $eb, $e0, $db, $d0, $d5, $f0, $f7, $ec, $e2, $f0, $eb, $06, $21, $14, $2a
1696a     2A 30 1A 13 
1696e     2B 1A 14 13 
16972     0D 13 14 13 
16976     22 30 2A 1F | 	byte	$2a, $30, $1a, $13, $2b, $1a, $14, $13, $0d, $13, $14, $13, $22, $30, $2a, $1f
1697a     2A 2C 18 1E 
1697e     25 13 2A 15 
16982     19 1F 1C 14 
16986     01 09 04 0A | 	byte	$2a, $2c, $18, $1e, $25, $13, $2a, $15, $19, $1f, $1c, $14, $01, $09, $04, $0a
1698a     01 F7 00 0E 
1698e     10 00 FC F7 
16992     FC 0E 25 08 
16996     14 2A 0D 00 | 	byte	$01, $f7, $00, $0e, $10, $00, $fc, $f7, $fc, $0e, $25, $08, $14, $2a, $0d, $00
1699a     00 09 00 F2 
1699e     FA ED F8 EC 
169a2     ED FC F7 F7 
169a6     E2 F4 E6 D3 | 	byte	$00, $09, $00, $f2, $fa, $ed, $f8, $ec, $ed, $fc, $f7, $f7, $e2, $f4, $e6, $d3
169aa     E0 D6 E8 E4 
169ae     E0 EB ED FD 
169b2     EC DC EC E6 
169b6     E8 DB D5 E4 | 	byte	$e0, $d6, $e8, $e4, $e0, $eb, $ed, $fd, $ec, $dc, $ec, $e6, $e8, $db, $d5, $e4
169ba     F3 F6 E1 E8 
169be     E1 F7 13 14 
169c2     1C 2A 34 2A 
169c6     15 2A 2A 1F | 	byte	$f3, $f6, $e1, $e8, $e1, $f7, $13, $14, $1c, $2a, $34, $2a, $15, $2a, $2a, $1f
169ca     18 14 13 14 
169ce     09 09 1B 18 
169d2     14 09 1A 09 
169d6     FC 14 00 12 | 	byte	$18, $14, $13, $14, $09, $09, $1b, $18, $14, $09, $1a, $09, $fc, $14, $00, $12
169da     06 01 0D 06 
169de     09 F2 EB EE 
169e2     ED F0 DC E0 
169e6     F1 FE F7 F0 | 	byte	$06, $01, $0d, $06, $09, $f2, $eb, $ee, $ed, $f0, $dc, $e0, $f1, $fe, $f7, $f0
169ea     F3 F1 FA 27 
169ee     1E 18 34 32 
169f2     25 13 27 27 
169f6     14 18 0D 13 | 	byte	$f3, $f1, $fa, $27, $1e, $18, $34, $32, $25, $13, $27, $27, $14, $18, $0d, $13
169fa     12 0D 19 21 
169fe     2E 1A 24 2A 
16a02     14 1E 14 13 
16a06     1C 14 13 0E | 	byte	$12, $0d, $19, $21, $2e, $1a, $24, $2a, $14, $1e, $14, $13, $1c, $14, $13, $0e
16a0a     18 14 F9 00 
16a0e     00 00 00 F2 
16a12     F1 00 0D 00 
16a16     FC EE EE 00 | 	byte	$18, $14, $f9, $00, $00, $00, $00, $f2, $f1, $00, $0d, $00, $fc, $ee, $ee, $00
16a1a     0F 09 09 1C 
16a1e     1A 00 00 04 
16a22     04 F4 F9 ED 
16a26     F7 F3 E6 FA | 	byte	$0f, $09, $09, $1c, $1a, $00, $00, $04, $04, $f4, $f9, $ed, $f7, $f3, $e6, $fa
16a2a     FC FC E8 F3 
16a2e     F9 D9 F0 E1 
16a32     EB F3 E5 F6 
16a36     F4 00 00 EB | 	byte	$fc, $fc, $e8, $f3, $f9, $d9, $f0, $e1, $eb, $f3, $e5, $f6, $f4, $00, $00, $eb
16a3a     F1 ED F7 ED 
16a3e     DE E8 F8 01 
16a42     F1 F2 F6 E6 
16a46     10 1E 15 24 | 	byte	$f1, $ed, $f7, $ed, $de, $e8, $f8, $01, $f1, $f2, $f6, $e6, $10, $1e, $15, $24
16a4a     38 39 1C 24 
16a4e     32 2A 1E 14 
16a52     13 13 09 09 
16a56     0E 18 09 06 | 	byte	$38, $39, $1c, $24, $32, $2a, $1e, $14, $13, $13, $09, $09, $0e, $18, $09, $06
16a5a     0E 09 FC 04 
16a5e     FD 00 04 FE 
16a62     00 FE 07 EE 
16a66     E5 E6 E0 E6 | 	byte	$0e, $09, $fc, $04, $fd, $00, $04, $fe, $00, $fe, $07, $ee, $e5, $e6, $e0, $e6
16a6a     DB D3 DB F1 
16a6e     F2 F2 EB E6 
16a72     EB 09 1A 0E 
16a76     24 37 2A 18 | 	byte	$db, $d3, $db, $f1, $f2, $f2, $eb, $e6, $eb, $09, $1a, $0e, $24, $37, $2a, $18
16a7a     1E 2A 18 1C 
16a7e     0E 13 1E 0D 
16a82     19 20 32 24 
16a86     22 39 1F 2A | 	byte	$1e, $2a, $18, $1c, $0e, $13, $1e, $0d, $19, $20, $32, $24, $22, $39, $1f, $2a
16a8a     21 1C 2A 1F 
16a8e     1C 1C 22 2A 
16a92     0E 09 06 09 
16a96     0E 00 FD 01 | 	byte	$21, $1c, $2a, $1f, $1c, $1c, $22, $2a, $0e, $09, $06, $09, $0e, $00, $fd, $01
16a9a     1C 0E 04 07 
16a9e     ED FE 13 14 
16aa2     0C 18 26 09 
16aa6     00 06 04 FE | 	byte	$1c, $0e, $04, $07, $ed, $fe, $13, $14, $0c, $18, $26, $09, $00, $06, $04, $fe
16aaa     F9 F2 F3 F3 
16aae     E7 F0 F7 F7 
16ab2     EC EB F7 D9 
16ab6     E2 DE DB E8 | 	byte	$f9, $f2, $f3, $f3, $e7, $f0, $f7, $f7, $ec, $eb, $f7, $d9, $e2, $de, $db, $e8
16aba     DF EA E6 FC 
16abe     F7 E2 E5 E4 
16ac2     EA EC D6 D9 
16ac6     EB F2 F7 EB | 	byte	$df, $ea, $e6, $fc, $f7, $e2, $e5, $e4, $ea, $ec, $d6, $d9, $eb, $f2, $f7, $eb
16aca     EC E0 F7 19 
16ace     0D 15 2A 37 
16ad2     22 19 2D 21 
16ad6     22 16 0D 18 | 	byte	$ec, $e0, $f7, $19, $0d, $15, $2a, $37, $22, $19, $2d, $21, $22, $16, $0d, $18
16ada     0D 0C 08 1A 
16ade     18 04 13 0E 
16ae2     08 0D 01 0D 
16ae6     0E 08 09 03 | 	byte	$0d, $0c, $08, $1a, $18, $04, $13, $0e, $08, $0d, $01, $0d, $0e, $08, $09, $03
16aea     13 00 F4 F1 
16aee     EA F2 EC E4 
16af2     D9 F7 FF F3 
16af6     FF EC ED 00 | 	byte	$13, $00, $f4, $f1, $ea, $f2, $ec, $e4, $d9, $f7, $ff, $f3, $ff, $ec, $ed, $00
16afa     1A 18 19 34 
16afe     30 1F 19 2A 
16b02     1E 18 14 0E 
16b06     1A 09 0D 19 | 	byte	$1a, $18, $19, $34, $30, $1f, $19, $2a, $1e, $18, $14, $0e, $1a, $09, $0d, $19
16b0a     24 25 13 32 
16b0e     1B 19 1F 13 
16b12     1E 18 18 0D 
16b16     10 1C 04 00 | 	byte	$24, $25, $13, $32, $1b, $19, $1f, $13, $1e, $18, $18, $0d, $10, $1c, $04, $00
16b1a     00 FF 09 FA 
16b1e     F2 F7 01 09 
16b22     00 01 ED E8 
16b26     09 09 01 09 | 	byte	$00, $ff, $09, $fa, $f2, $f7, $01, $09, $00, $01, $ed, $e8, $09, $09, $01, $09
16b2a     1C 14 00 00 
16b2e     00 FF FC F0 
16b32     F3 F2 F0 E8 
16b36     F7 00 F2 EB | 	byte	$1c, $14, $00, $00, $00, $ff, $fc, $f0, $f3, $f2, $f0, $e8, $f7, $00, $f2, $eb
16b3a     FC E6 EB E4 
16b3e     E8 F3 EB F2 
16b42     F0 00 00 F2 
16b46     F2 F2 F7 F7 | 	byte	$fc, $e6, $eb, $e4, $e8, $f3, $eb, $f2, $f0, $00, $00, $f2, $f2, $f2, $f7, $f7
16b4a     F7 DE EB 00 
16b4e     00 00 F9 EC 
16b52     F7 13 1B 14 
16b56     2A 3D 34 1C | 	byte	$f7, $de, $eb, $00, $00, $00, $f9, $ec, $f7, $13, $1b, $14, $2a, $3d, $34, $1c
16b5a     2C 27 22 20 
16b5e     0D 1C 0D 04 
16b62     04 0D 1C 00 
16b66     0E 0E 00 04 | 	byte	$2c, $27, $22, $20, $0d, $1c, $0d, $04, $04, $0d, $1c, $00, $0e, $0e, $00, $04
16b6a     FC 00 01 00 
16b6e     00 F6 03 00 
16b72     EC E8 DB EB 
16b76     E0 DB D2 DB | 	byte	$fc, $00, $01, $00, $00, $f6, $03, $00, $ec, $e8, $db, $eb, $e0, $db, $d2, $db
16b7a     F7 ED F8 F2 
16b7e     DE F7 09 12 
16b82     0C 2A 34 1F 
16b86     19 21 1C 1A | 	byte	$f7, $ed, $f8, $f2, $de, $f7, $09, $12, $0c, $2a, $34, $1f, $19, $21, $1c, $1a
16b8a     18 0E 14 15 
16b8e     09 16 24 2A 
16b92     1C 33 2A 26 
16b96     26 1A 27 21 | 	byte	$18, $0e, $14, $15, $09, $16, $24, $2a, $1c, $33, $2a, $26, $26, $1a, $27, $21
16b9a     21 1A 16 26 
16b9e     18 09 09 09 
16ba2     04 10 00 F9 
16ba6     09 14 10 10 | 	byte	$21, $1a, $16, $26, $18, $09, $09, $09, $04, $10, $00, $f9, $09, $14, $10, $10
16baa     04 F0 00 13 
16bae     0A 09 1C 2A 
16bb2     04 03 04 00 
16bb6     04 F2 F7 F3 | 	byte	$04, $f0, $00, $13, $0a, $09, $1c, $2a, $04, $03, $04, $00, $04, $f2, $f7, $f3
16bba     EE E8 E6 00 
16bbe     EC E6 FA E4 
16bc2     E6 DF DB E6 
16bc6     E4 ED E2 EB | 	byte	$ee, $e8, $e6, $00, $ec, $e6, $fa, $e4, $e6, $df, $db, $e6, $e4, $ed, $e2, $eb
16bca     F8 EE EB E1 
16bce     EC EB EC DE 
16bd2     D5 F4 F2 F6 
16bd6     FC EC E6 FC | 	byte	$f8, $ee, $eb, $e1, $ec, $eb, $ec, $de, $d5, $f4, $f2, $f6, $fc, $ec, $e6, $fc
16bda     10 06 19 31 
16bde     30 1C 22 2A 
16be2     1E 25 10 14 
16be6     15 07 04 09 | 	byte	$10, $06, $19, $31, $30, $1c, $22, $2a, $1e, $25, $10, $14, $15, $07, $04, $09
16bea     1F 07 09 14 
16bee     07 0F 00 06 
16bf2     0E 0D 0D FD 
16bf6     09 0E F8 F7 | 	byte	$1f, $07, $09, $14, $07, $0f, $00, $06, $0e, $0d, $0d, $fd, $09, $0e, $f8, $f7
16bfa     F1 ED F7 EC 
16bfe     E1 E0 F8 FD 
16c02     FF 04 EC F3 
16c06     09 18 13 1E | 	byte	$f1, $ed, $f7, $ec, $e1, $e0, $f8, $fd, $ff, $04, $ec, $f3, $09, $18, $13, $1e
16c0a     3C 30 21 26 
16c0e     1F 24 1A 13 
16c12     10 14 0F 09 
16c16     1E 2A 14 2A | 	byte	$3c, $30, $21, $26, $1f, $24, $1a, $13, $10, $14, $0f, $09, $1e, $2a, $14, $2a
16c1a     2A 1E 21 14 
16c1e     1E 1A 1C 14 
16c22     0D 13 14 0A 
16c26     00 00 00 06 | 	byte	$2a, $1e, $21, $14, $1e, $1a, $1c, $14, $0d, $13, $14, $0a, $00, $00, $00, $06
16c2a     00 EC FE 06 
16c2e     06 0E 04 ED 
16c32     F1 09 01 00 
16c36     0E 21 09 FF | 	byte	$00, $ec, $fe, $06, $06, $0e, $04, $ed, $f1, $09, $01, $00, $0e, $21, $09, $ff
16c3a     07 FD 06 F7 
16c3e     EE F7 ED EE 
16c42     E4 FE F9 EB 
16c46     F7 EC ED E6 | 	byte	$07, $fd, $06, $f7, $ee, $f7, $ed, $ee, $e4, $fe, $f9, $eb, $f7, $ec, $ed, $e6
16c4a     E0 EB EA F7 
16c4e     EB EB 00 F8 
16c52     F2 F1 EE F8 
16c56     F7 F2 E0 F1 | 	byte	$e0, $eb, $ea, $f7, $eb, $eb, $00, $f8, $f2, $f1, $ee, $f8, $f7, $f2, $e0, $f1
16c5a     00 FD 07 F7 
16c5e     ED F7 0E 0E 
16c62     12 2A 37 2A 
16c66     26 2A 24 2A | 	byte	$00, $fd, $07, $f7, $ed, $f7, $0e, $0e, $12, $2a, $37, $2a, $26, $2a, $24, $2a
16c6a     1C 10 14 0F 
16c6e     04 00 1A 09 
16c72     03 0E 06 0E 
16c76     00 FF 07 06 | 	byte	$1c, $10, $14, $0f, $04, $00, $1a, $09, $03, $0e, $06, $0e, $00, $ff, $07, $06
16c7a     04 FC 00 04 
16c7e     FD EC E8 E4 
16c82     E8 ED D9 DA 
16c86     E8 F1 F7 00 | 	byte	$04, $fc, $00, $04, $fd, $ec, $e8, $e4, $e8, $ed, $d9, $da, $e8, $f1, $f7, $00
16c8a     EE E4 00 09 
16c8e     0A 0E 2E 30 
16c92     1A 22 18 22 
16c96     1C 14 13 0E | 	byte	$ee, $e4, $00, $09, $0a, $0e, $2e, $30, $1a, $22, $18, $22, $1c, $14, $13, $0e
16c9a     15 09 13 26 
16c9e     1A 24 2A 24 
16ca2     2A 1A 1E 1C 
16ca6     26 21 09 1C | 	byte	$15, $09, $13, $26, $1a, $24, $2a, $24, $2a, $1a, $1e, $1c, $26, $21, $09, $1c
16caa     1A 14 08 00 
16cae     08 09 0E FC 
16cb2     FC 0C 0C 13 
16cb6     14 00 F7 07 | 	byte	$1a, $14, $08, $00, $08, $09, $0e, $fc, $fc, $0c, $0c, $13, $14, $00, $f7, $07
16cba     09 01 09 1C 
16cbe     1A 04 09 03 
16cc2     04 04 F4 F8 
16cc6     F4 F7 DF F7 | 	byte	$09, $01, $09, $1c, $1a, $04, $09, $03, $04, $04, $f4, $f8, $f4, $f7, $df, $f7
16cca     00 EC F7 EC 
16cce     F2 EC DA E5 
16cd2     EA ED EC E0 
16cd6     F3 F8 EC EC | 	byte	$00, $ec, $f7, $ec, $f2, $ec, $da, $e5, $ea, $ed, $ec, $e0, $f3, $f8, $ec, $ec
16cda     E4 E8 F1 EC 
16cde     DB E0 F2 F1 
16ce2     00 FC E4 EB 
16ce6     00 0D 03 19 | 	byte	$e4, $e8, $f1, $ec, $db, $e0, $f2, $f1, $00, $fc, $e4, $eb, $00, $0d, $03, $19
16cea     31 2A 24 1F 
16cee     22 24 1A 18 
16cf2     12 10 09 FE 
16cf6     13 0D 03 0E | 	byte	$31, $2a, $24, $1f, $22, $24, $1a, $18, $12, $10, $09, $fe, $13, $0d, $03, $0e
16cfa     08 0E 04 00 
16cfe     01 08 13 00 
16d02     00 03 04 F7 
16d06     EC EB E8 F4 | 	byte	$08, $0e, $04, $00, $01, $08, $13, $00, $00, $03, $04, $f7, $ec, $eb, $e8, $f4
16d0a     E6 DE E8 EC 
16d0e     F8 02 00 E6 
16d12     F7 09 0A 0C 
16d16     1E 37 1F 27 | 	byte	$e6, $de, $e8, $ec, $f8, $02, $00, $e6, $f7, $09, $0a, $0c, $1e, $37, $1f, $27
16d1a     22 1E 25 15 
16d1e     19 14 1A 09 
16d22     09 25 1C 24 
16d26     25 24 2D 1A | 	byte	$22, $1e, $25, $15, $19, $14, $1a, $09, $09, $25, $1c, $24, $25, $24, $2d, $1a
16d2a     1B 1E 1E 2A 
16d2e     0E 12 1C 14 
16d32     09 00 FC 00 
16d36     07 FA F3 03 | 	byte	$1b, $1e, $1e, $2a, $0e, $12, $1c, $14, $09, $00, $fc, $00, $07, $fa, $f3, $03
16d3a     01 09 0E 04 
16d3e     F1 F7 09 00 
16d42     FE 13 14 09 
16d46     03 01 00 00 | 	byte	$01, $09, $0e, $04, $f1, $f7, $09, $00, $fe, $13, $14, $09, $03, $01, $00, $00
16d4a     F7 F8 F4 F9 
16d4e     E1 EB FD ED 
16d52     F7 F2 F1 F2 
16d56     EB E8 E8 F7 | 	byte	$f7, $f8, $f4, $f9, $e1, $eb, $fd, $ed, $f7, $f2, $f1, $f2, $eb, $e8, $e8, $f7
16d5a     F2 EE F3 01 
16d5e     FC F2 F1 EB 
16d62     F7 F7 EC E6 
16d66     F2 F4 FE 06 | 	byte	$f2, $ee, $f3, $01, $fc, $f2, $f1, $eb, $f7, $f7, $ec, $e6, $f2, $f4, $fe, $06
16d6a     F2 EB FE 09 
16d6e     04 09 34 2A 
16d72     26 28 21 27 
16d76     1F 19 14 13 | 	byte	$f2, $eb, $fe, $09, $04, $09, $34, $2a, $26, $28, $21, $27, $1f, $19, $14, $13
16d7a     0E FA 09 09 
16d7e     03 0D 00 0D 
16d82     06 00 03 FF 
16d86     10 01 FC 00 | 	byte	$0e, $fa, $09, $09, $03, $0d, $00, $0d, $06, $00, $03, $ff, $10, $01, $fc, $00
16d8a     01 FC ED E7 
16d8e     E2 F0 E8 D6 
16d92     E4 E6 EB F7 
16d96     00 EC E8 00 | 	byte	$01, $fc, $ed, $e7, $e2, $f0, $e8, $d6, $e4, $e6, $eb, $f7, $00, $ec, $e8, $00
16d9a     04 01 13 2C 
16d9e     27 20 1F 1E 
16da2     26 18 18 13 
16da6     1E 14 06 21 | 	byte	$04, $01, $13, $2c, $27, $20, $1f, $1e, $26, $18, $18, $13, $1e, $14, $06, $21
16daa     1C 22 2A 26 
16dae     2D 2A 25 25 
16db2     26 2A 21 1A 
16db6     22 21 14 0D | 	byte	$1c, $22, $2a, $26, $2d, $2a, $25, $25, $26, $2a, $21, $1a, $22, $21, $14, $0d
16dba     02 08 0E 09 
16dbe     FC 04 06 07 
16dc2     18 0E 00 F8 
16dc6     07 06 F8 13 | 	byte	$02, $08, $0e, $09, $fc, $04, $06, $07, $18, $0e, $00, $f8, $07, $06, $f8, $13
16dca     19 0E 09 04 
16dce     06 04 FA F7 
16dd2     F4 FC E6 E6 
16dd6     F2 EC F3 E8 | 	byte	$19, $0e, $09, $04, $06, $04, $fa, $f7, $f4, $fc, $e6, $e6, $f2, $ec, $f3, $e8
16dda     ED ED E4 E8 
16dde     DE F0 ED E8 
16de2     EB F8 F8 F0 
16de6     EC E4 EB F7 | 	byte	$ed, $ed, $e4, $e8, $de, $f0, $ed, $e8, $eb, $f8, $f8, $f0, $ec, $e4, $eb, $f7
16dea     EC E4 EA ED 
16dee     F1 00 F9 E6 
16df2     F3 00 04 00 
16df6     24 2A 25 26 | 	byte	$ec, $e4, $ea, $ed, $f1, $00, $f9, $e6, $f3, $00, $04, $00, $24, $2a, $25, $26
16dfa     21 2B 22 1F 
16dfe     14 1B 1C 00 
16e02     0C 10 06 10 
16e06     09 0D 0E 08 | 	byte	$21, $2b, $22, $1f, $14, $1b, $1c, $00, $0c, $10, $06, $10, $09, $0d, $0e, $08
16e0a     09 06 0D 0E 
16e0e     01 06 0A 04 
16e12     FA F2 EA F1 
16e16     F8 E1 E6 EB | 	byte	$09, $06, $0d, $0e, $01, $06, $0a, $04, $fa, $f2, $ea, $f1, $f8, $e1, $e6, $eb
16e1a     E8 F7 00 F9 
16e1e     E7 F7 09 00 
16e22     09 24 2A 21 
16e26     1F 1C 25 1C | 	byte	$e8, $f7, $00, $f9, $e7, $f7, $09, $00, $09, $24, $2a, $21, $1f, $1c, $25, $1c
16e2a     15 0E 19 14 
16e2e     04 13 14 1C 
16e32     1F 20 26 1F 
16e36     24 1A 1C 21 | 	byte	$15, $0e, $19, $14, $04, $13, $14, $1c, $1f, $20, $26, $1f, $24, $1a, $1c, $21
16e3a     1A 13 18 1C 
16e3e     14 0A 00 FF 
16e42     09 09 F7 F8 
16e46     00 FE 0E 0E | 	byte	$1a, $13, $18, $1c, $14, $0a, $00, $ff, $09, $09, $f7, $f8, $00, $fe, $0e, $0e
16e4a     00 F8 FC 09 
16e4e     F7 09 16 14 
16e52     0C 01 04 04 
16e56     01 F8 F1 00 | 	byte	$00, $f8, $fc, $09, $f7, $09, $16, $14, $0c, $01, $04, $04, $01, $f8, $f1, $00
16e5a     F2 E7 F7 ED 
16e5e     F6 F2 EE F7 
16e62     ED F2 E6 EB 
16e66     F7 EC F0 FC | 	byte	$f2, $e7, $f7, $ed, $f6, $f2, $ee, $f7, $ed, $f2, $e6, $eb, $f7, $ec, $f0, $fc
16e6a     00 FC F7 EE 
16e6e     ED FE F3 E8 
16e72     F0 ED F4 FF 
16e76     07 F2 ED 00 | 	byte	$00, $fc, $f7, $ee, $ed, $fe, $f3, $e8, $f0, $ed, $f4, $ff, $07, $f2, $ed, $00
16e7a     04 00 13 2A 
16e7e     25 27 1C 27 
16e82     21 1F 14 0E 
16e86     1A 04 00 06 | 	byte	$04, $00, $13, $2a, $25, $27, $1c, $27, $21, $1f, $14, $0e, $1a, $04, $00, $06
16e8a     02 04 01 03 
16e8e     00 03 00 FD 
16e92     00 04 FD FC 
16e96     06 01 FD F2 | 	byte	$02, $04, $01, $03, $00, $03, $00, $fd, $00, $04, $fd, $fc, $06, $01, $fd, $f2
16e9a     E7 E6 F7 E8 
16e9e     DC EB E4 F6 
16ea2     00 FC F2 F1 
16ea6     09 04 03 1E | 	byte	$e7, $e6, $f7, $e8, $dc, $eb, $e4, $f6, $00, $fc, $f2, $f1, $09, $04, $03, $1e
16eaa     2B 2D 2A 27 
16eae     25 27 21 0D 
16eb2     1C 1F 09 13 
16eb6     18 1C 22 1E | 	byte	$2b, $2d, $2a, $27, $25, $27, $21, $0d, $1c, $1f, $09, $13, $18, $1c, $22, $1e
16eba     2A 21 2A 1F 
16ebe     18 24 20 15 
16ec2     16 21 1F 15 
16ec6     0D 00 09 0D | 	byte	$2a, $21, $2a, $1f, $18, $24, $20, $15, $16, $21, $1f, $15, $0d, $00, $09, $0d
16eca     00 FD 00 00 
16ece     08 18 09 F9 
16ed2     00 0F 00 00 
16ed6     18 15 15 09 | 	byte	$00, $fd, $00, $00, $08, $18, $09, $f9, $00, $0f, $00, $00, $18, $15, $15, $09
16eda     09 06 03 00 
16ede     F1 FE F7 E8 
16ee2     F6 F0 F1 EE 
16ee6     EB EC EA E7 | 	byte	$09, $06, $03, $00, $f1, $fe, $f7, $e8, $f6, $f0, $f1, $ee, $eb, $ec, $ea, $e7
16eea     DE DB ED EC 
16eee     E1 EB F8 FC 
16ef2     F3 EE E0 F3 
16ef6     F8 E6 EB E2 | 	byte	$de, $db, $ed, $ec, $e1, $eb, $f8, $fc, $f3, $ee, $e0, $f3, $f8, $e6, $eb, $e2
16efa     E8 FC 00 F9 
16efe     E8 FC 07 F9 
16f02     00 21 24 25 
16f06     24 26 21 26 | 	byte	$e8, $fc, $00, $f9, $e8, $fc, $07, $f9, $00, $21, $24, $25, $24, $26, $21, $26
16f0a     14 0E 1E 09 
16f0e     09 0C 06 0D 
16f12     04 0D 04 08 
16f16     07 00 00 09 | 	byte	$14, $0e, $1e, $09, $09, $0c, $06, $0d, $04, $0d, $04, $08, $07, $00, $00, $09
16f1a     04 F9 00 09 
16f1e     06 FE EC EA 
16f22     F7 F7 E0 EC 
16f26     EA EA 00 02 | 	byte	$04, $f9, $00, $09, $06, $fe, $ec, $ea, $f7, $f7, $e0, $ec, $ea, $ea, $00, $02
16f2a     00 F0 09 0A 
16f2e     00 13 26 30 
16f32     2A 26 2A 24 
16f36     2A 14 13 1F | 	byte	$00, $f0, $09, $0a, $00, $13, $26, $30, $2a, $26, $2a, $24, $2a, $14, $13, $1f
16f3a     0A 12 18 13 
16f3e     1F 1A 21 1E 
16f42     21 21 0F 1A 
16f46     1E 14 0C 16 | 	byte	$0a, $12, $18, $13, $1f, $1a, $21, $1e, $21, $21, $0f, $1a, $1e, $14, $0c, $16
16f4a     1C 14 0E FC 
16f4e     FD 09 00 FE 
16f52     F8 F7 FE 09 
16f56     0E 00 F7 09 | 	byte	$1c, $14, $0e, $fc, $fd, $09, $00, $fe, $f8, $f7, $fe, $09, $0e, $00, $f7, $09
16f5a     01 F8 0D 10 
16f5e     0E 09 09 01 
16f62     03 01 F0 00 
16f66     00 F2 F7 F3 | 	byte	$01, $f8, $0d, $10, $0e, $09, $09, $01, $03, $01, $f0, $00, $00, $f2, $f7, $f3
16f6a     FA F3 F3 F2 
16f6e     F0 F2 EC E0 
16f72     EB F3 E8 EB 
16f76     F7 00 FD F7 | 	byte	$fa, $f3, $f3, $f2, $f0, $f2, $ec, $e0, $eb, $f3, $e8, $eb, $f7, $00, $fd, $f7
16f7a     EA EB FF ED 
16f7e     ED F2 E5 F3 
16f82     00 07 F2 F7 
16f86     0A 00 09 18 | 	byte	$ea, $eb, $ff, $ed, $ed, $f2, $e5, $f3, $00, $07, $f2, $f7, $0a, $00, $09, $18
16f8a     26 28 20 2A 
16f8e     20 26 1F 09 
16f92     1E 0E 03 0A 
16f96     06 0E 04 08 | 	byte	$26, $28, $20, $2a, $20, $26, $1f, $09, $1e, $0e, $03, $0a, $06, $0e, $04, $08
16f9a     04 04 09 00 
16f9e     FF 00 06 F9 
16fa2     FD 06 01 00 
16fa6     F0 E6 EB ED | 	byte	$04, $04, $09, $00, $ff, $00, $06, $f9, $fd, $06, $01, $00, $f0, $e6, $eb, $ed
16faa     E4 DF E1 DB 
16fae     EA FC 00 E8 
16fb2     F7 07 F7 06 
16fb6     19 24 25 21 | 	byte	$e4, $df, $e1, $db, $ea, $fc, $00, $e8, $f7, $07, $f7, $06, $19, $24, $25, $21
16fba     21 1C 26 14 
16fbe     0E 1C 10 0E 
16fc2     15 1C 21 1C 
16fc6     26 25 24 2A | 	byte	$21, $1c, $26, $14, $0e, $1c, $10, $0e, $15, $1c, $21, $1c, $26, $25, $24, $2a
16fca     1C 1C 25 1F 
16fce     18 19 21 1F 
16fd2     1F 0E FF 12 
16fd6     09 00 03 00 | 	byte	$1c, $1c, $25, $1f, $18, $19, $21, $1f, $1f, $0e, $ff, $12, $09, $00, $03, $00
16fda     00 04 19 0D 
16fde     FD 09 09 00 
16fe2     03 0F 15 09 
16fe6     09 00 00 07 | 	byte	$00, $04, $19, $0d, $fd, $09, $09, $00, $03, $0f, $15, $09, $09, $00, $00, $07
16fea     EC F7 F9 E8 
16fee     F1 EC F7 F2 
16ff2     F0 F3 EC F0 
16ff6     EC E4 E4 F3 | 	byte	$ec, $f7, $f9, $e8, $f1, $ec, $f7, $f2, $f0, $f3, $ec, $f0, $ec, $e4, $e4, $f3
16ffa     EA E6 F1 FC 
16ffe     00 F8 EC EB 
17002     F4 F2 E6 EE 
17006     E2 EB F7 03 | 	byte	$ea, $e6, $f1, $fc, $00, $f8, $ec, $eb, $f4, $f2, $e6, $ee, $e2, $eb, $f7, $03
1700a     F7 F1 09 00 
1700e     FF 0E 1E 25 
17012     21 21 1F 24 
17016     25 0D 16 14 | 	byte	$f7, $f1, $09, $00, $ff, $0e, $1e, $25, $21, $21, $1f, $24, $25, $0d, $16, $14
1701a     04 09 08 0F 
1701e     09 09 0E 06 
17022     09 04 00 00 
17026     08 00 FC 09 | 	byte	$04, $09, $08, $0f, $09, $09, $0e, $06, $09, $04, $00, $00, $08, $00, $fc, $09
1702a     08 09 01 EC 
1702e     F4 FA F2 EA 
17032     E8 E7 E8 FC 
17036     00 F7 F7 07 | 	byte	$08, $09, $01, $ec, $f4, $fa, $f2, $ea, $e8, $e7, $e8, $fc, $00, $f7, $f7, $07
1703a     01 00 0E 22 
1703e     20 1C 1F 14 
17042     24 14 09 13 
17046     09 0C 0A 13 | 	byte	$01, $00, $0e, $22, $20, $1c, $1f, $14, $24, $14, $09, $13, $09, $0c, $0a, $13
1704a     1B 19 24 22 
1704e     21 22 21 19 
17052     21 1F 14 13 
17056     18 21 1A 0E | 	byte	$1b, $19, $24, $22, $21, $22, $21, $19, $21, $1f, $14, $13, $18, $21, $1a, $0e
1705a     FE 07 0C 00 
1705e     00 FC FE 00 
17062     10 12 00 09 
17066     10 01 03 08 | 	byte	$fe, $07, $0c, $00, $00, $fc, $fe, $00, $10, $12, $00, $09, $10, $01, $03, $08
1706a     14 0E 0A 04 
1706e     FE 09 F9 F2 
17072     FC EE F3 EB 
17076     F8 F9 F3 F7 | 	byte	$14, $0e, $0a, $04, $fe, $09, $f9, $f2, $fc, $ee, $f3, $eb, $f8, $f9, $f3, $f7
1707a     F3 F3 F0 EC 
1707e     EA F3 F3 E4 
17082     F6 FC 00 01 
17086     F2 ED F3 F9 | 	byte	$f3, $f3, $f0, $ec, $ea, $f3, $f3, $e4, $f6, $fc, $00, $01, $f2, $ed, $f3, $f9
1708a     ED EC E8 EC 
1708e     F3 00 00 EB 
17092     00 04 FF 01 
17096     13 1C 1C 21 | 	byte	$ed, $ec, $e8, $ec, $f3, $00, $00, $eb, $00, $04, $ff, $01, $13, $1c, $1c, $21
1709a     14 19 1F 0E 
1709e     0D 09 06 01 
170a2     02 04 04 04 
170a6     08 03 04 04 | 	byte	$14, $19, $1f, $0e, $0d, $09, $06, $01, $02, $04, $04, $04, $08, $03, $04, $04
170aa     00 00 06 04 
170ae     FC FF 09 08 
170b2     07 F2 ED F8 
170b6     F2 ED E6 EA | 	byte	$00, $00, $06, $04, $fc, $ff, $09, $08, $07, $f2, $ed, $f8, $f2, $ed, $e6, $ea
170ba     E7 F7 06 F7 
170be     F7 09 04 03 
170c2     09 21 27 24 
170c6     2B 1A 26 25 | 	byte	$e7, $f7, $06, $f7, $f7, $09, $04, $03, $09, $21, $27, $24, $2b, $1a, $26, $25
170ca     14 1C 0E 13 
170ce     0E 13 1C 1A 
170d2     22 22 25 26 
170d6     25 1C 1F 2A | 	byte	$14, $1c, $0e, $13, $0e, $13, $1c, $1a, $22, $22, $25, $26, $25, $1c, $1f, $2a
170da     15 18 19 1C 
170de     22 18 04 02 
170e2     09 01 00 FC 
170e6     FC FC 06 14 | 	byte	$15, $18, $19, $1c, $22, $18, $04, $02, $09, $01, $00, $fc, $fc, $fc, $06, $14
170ea     00 00 0D 00 
170ee     FD 00 0E 0D 
170f2     0E 09 FF 06 
170f6     00 F3 F9 ED | 	byte	$00, $00, $0d, $00, $fd, $00, $0e, $0d, $0e, $09, $ff, $06, $00, $f3, $f9, $ed
170fa     ED E8 ED F4 
170fe     F0 F3 EE F0 
17102     F2 E6 E8 EB 
17106     F2 E8 E8 F7 | 	byte	$ed, $e8, $ed, $f4, $f0, $f3, $ee, $f0, $f2, $e6, $e8, $eb, $f2, $e8, $e8, $f7
1710a     F8 04 F8 EC 
1710e     F3 F7 F2 ED 
17112     F0 E8 EB 00 
17116     04 F3 00 04 | 	byte	$f8, $04, $f8, $ec, $f3, $f7, $f2, $ed, $f0, $e8, $eb, $00, $04, $f3, $00, $04
1711a     02 00 0E 21 
1711e     1C 2B 1F 1E 
17122     2B 1B 19 14 
17126     0E 0D 04 09 | 	byte	$02, $00, $0e, $21, $1c, $2b, $1f, $1e, $2b, $1b, $19, $14, $0e, $0d, $04, $09
1712a     0D 0E 0A 09 
1712e     09 10 03 00 
17132     0D 04 FF FF 
17136     04 09 09 00 | 	byte	$0d, $0e, $0a, $09, $09, $10, $03, $00, $0d, $04, $ff, $ff, $04, $09, $09, $00
1713a     EB F7 EE EE 
1713e     E7 E4 E4 E6 
17142     FF FC EB FE 
17146     00 FF 00 0E | 	byte	$eb, $f7, $ee, $ee, $e7, $e4, $e4, $e6, $ff, $fc, $eb, $fe, $00, $ff, $00, $0e
1714a     1C 1E 27 1A 
1714e     1E 25 12 15 
17152     0E 0D 09 08 
17156     13 15 1C 1C | 	byte	$1c, $1e, $27, $1a, $1e, $25, $12, $15, $0e, $0d, $09, $08, $13, $15, $1c, $1c
1715a     1F 26 1F 1F 
1715e     18 22 1B 0E 
17162     16 15 21 1F 
17166     09 03 0D 06 | 	byte	$1f, $26, $1f, $1f, $18, $22, $1b, $0e, $16, $15, $21, $1f, $09, $03, $0d, $06
1716a     00 00 FF F8 
1716e     00 16 09 00 
17172     09 0A 00 00 
17176     10 0E 13 14 | 	byte	$00, $00, $ff, $f8, $00, $16, $09, $00, $09, $0a, $00, $00, $10, $0e, $13, $14
1717a     06 0E 09 00 
1717e     FE F7 F4 F2 
17182     F1 F7 F8 FA 
17186     F9 F3 FC F4 | 	byte	$06, $0e, $09, $00, $fe, $f7, $f4, $f2, $f1, $f7, $f8, $fa, $f9, $f3, $fc, $f4
1718a     EC F1 F3 EE 
1718e     E8 F3 F8 01 
17192     01 EC F3 F3 
17196     F7 F2 EC EB | 	byte	$ec, $f1, $f3, $ee, $e8, $f3, $f8, $01, $01, $ec, $f3, $f3, $f7, $f2, $ec, $eb
1719a     E4 F4 02 EE 
1719e     F4 FF FF FC 
171a2     FE 13 13 21 
171a6     1C 15 25 18 | 	byte	$e4, $f4, $02, $ee, $f4, $ff, $ff, $fc, $fe, $13, $13, $21, $1c, $15, $25, $18
171aa     10 0A 06 04 
171ae     FC 00 01 08 
171b2     04 04 06 07 
171b6     04 FA 04 06 | 	byte	$10, $0a, $06, $04, $fc, $00, $01, $08, $04, $04, $06, $07, $04, $fa, $04, $06
171ba     FC FD 00 08 
171be     0D 04 F1 F8 
171c2     FA F2 F2 ED 
171c6     E8 E4 FC 00 | 	byte	$fc, $fd, $00, $08, $0d, $04, $f1, $f8, $fa, $f2, $f2, $ed, $e8, $e4, $fc, $00
171ca     F1 F8 03 04 
171ce     00 09 1B 21 
171d2     2B 25 24 2C 
171d6     1F 1C 18 13 | 	byte	$f1, $f8, $03, $04, $00, $09, $1b, $21, $2b, $25, $24, $2c, $1f, $1c, $18, $13
171da     14 0A 14 19 
171de     1F 26 1E 27 
171e2     2A 1F 1A 21 
171e6     21 14 18 15 | 	byte	$14, $0a, $14, $19, $1f, $26, $1e, $27, $2a, $1f, $1a, $21, $21, $14, $18, $15
171ea     1C 22 14 08 
171ee     08 09 06 00 
171f2     00 F7 F7 10 
171f6     06 FF 03 06 | 	byte	$1c, $22, $14, $08, $08, $09, $06, $00, $00, $f7, $f7, $10, $06, $ff, $03, $06
171fa     01 F7 03 07 
171fe     0D 12 00 08 
17202     04 FD F9 F2 
17206     F1 EC EA EC | 	byte	$01, $f7, $03, $07, $0d, $12, $00, $08, $04, $fd, $f9, $f2, $f1, $ec, $ea, $ec
1720a     F3 F7 F7 F2 
1720e     F3 F7 E6 E6 
17212     F0 EC EA ED 
17216     F7 FC 09 F2 | 	byte	$f3, $f7, $f7, $f2, $f3, $f7, $e6, $e6, $f0, $ec, $ea, $ed, $f7, $fc, $09, $f2
1721a     F2 FA F7 F7 
1721e     F1 F2 E6 EB 
17222     03 00 F8 01 
17226     08 01 00 13 | 	byte	$f2, $fa, $f7, $f7, $f1, $f2, $e6, $eb, $03, $00, $f8, $01, $08, $01, $00, $13
1722a     19 24 2A 1C 
1722e     2B 22 1C 1A 
17232     14 10 04 07 
17236     08 08 13 08 | 	byte	$19, $24, $2a, $1c, $2b, $22, $1c, $1a, $14, $10, $04, $07, $08, $08, $13, $08
1723a     0A 0E 0D 00 
1723e     FF 08 00 FF 
17242     FF 01 09 09 
17246     F7 F2 F4 F1 | 	byte	$0a, $0e, $0d, $00, $ff, $08, $00, $ff, $ff, $01, $09, $09, $f7, $f2, $f4, $f1
1724a     EC E8 E7 D6 
1724e     EB F7 EC F1 
17252     FA 01 F8 00 
17256     0E 13 26 1F | 	byte	$ec, $e8, $e7, $d6, $eb, $f7, $ec, $f1, $fa, $01, $f8, $00, $0e, $13, $26, $1f
1725a     1C 26 1F 1A 
1725e     18 12 0E 0C 
17262     09 13 19 21 
17266     1E 1F 2A 25 | 	byte	$1c, $26, $1f, $1a, $18, $12, $0e, $0c, $09, $13, $19, $21, $1e, $1f, $2a, $25
1726a     1A 1E 21 18 
1726e     15 19 15 26 
17272     1F 09 09 07 
17276     06 01 00 00 | 	byte	$1a, $1e, $21, $18, $15, $19, $15, $26, $1f, $09, $09, $07, $06, $01, $00, $00
1727a     ED 00 0D 00 
1727e     03 08 09 FE 
17282     02 09 0C 19 
17286     07 0A 0E 04 | 	byte	$ed, $00, $0d, $00, $03, $08, $09, $fe, $02, $09, $0c, $19, $07, $0a, $0e, $04
1728a     01 FC FE F2 
1728e     F2 F3 F0 FE 
17292     F8 F9 F7 FD 
17296     F2 E8 F1 F2 | 	byte	$01, $fc, $fe, $f2, $f2, $f3, $f0, $fe, $f8, $f9, $f7, $fd, $f2, $e8, $f1, $f2
1729a     F0 ED F7 FC 
1729e     07 00 F4 F7 
172a2     F9 F2 F2 F3 
172a6     EC E6 FC F9 | 	byte	$f0, $ed, $f7, $fc, $07, $00, $f4, $f7, $f9, $f2, $f2, $f3, $ec, $e6, $fc, $f9
172aa     F3 F7 00 00 
172ae     F8 06 0A 16 
172b2     1F 16 21 21 
172b6     1A 18 0E 0E | 	byte	$f3, $f7, $00, $00, $f8, $06, $0a, $16, $1f, $16, $21, $21, $1a, $18, $0e, $0e
172ba     08 00 01 00 
172be     09 0C 04 09 
172c2     09 01 FC 03 
172c6     00 FD 00 FD | 	byte	$08, $00, $01, $00, $09, $0c, $04, $09, $09, $01, $fc, $03, $00, $fd, $00, $fd
172ca     03 0E 00 F4 
172ce     F3 F2 EE E7 
172d2     EE DB E0 F8 
172d6     F2 F3 F8 07 | 	byte	$03, $0e, $00, $f4, $f3, $f2, $ee, $e7, $ee, $db, $e0, $f8, $f2, $f3, $f8, $07
172da     00 FF 0E 13 
172de     2A 2A 21 2B 
172e2     2A 25 1C 1E 
172e6     18 14 13 10 | 	byte	$00, $ff, $0e, $13, $2a, $2a, $21, $2b, $2a, $25, $1c, $1e, $18, $14, $13, $10
172ea     19 21 27 20 
172ee     28 2B 21 1E 
172f2     21 20 18 1B 
172f6     18 22 2A 0E | 	byte	$19, $21, $27, $20, $28, $2b, $21, $1e, $21, $20, $18, $1b, $18, $22, $2a, $0e
172fa     09 09 03 00 
172fe     FE 00 F2 FC 
17302     08 00 00 03 
17306     07 FA FC 01 | 	byte	$09, $09, $03, $00, $fe, $00, $f2, $fc, $08, $00, $00, $03, $07, $fa, $fc, $01
1730a     03 13 09 04 
1730e     0C 01 04 FC 
17312     FC F7 ED F2 
17316     EA F3 F7 F7 | 	byte	$03, $13, $09, $04, $0c, $01, $04, $fc, $fc, $f7, $ed, $f2, $ea, $f3, $f7, $f7
1731a     F2 F4 F8 E8 
1731e     F0 F0 EC F0 
17322     ED F3 00 01 
17326     F7 F2 F3 F3 | 	byte	$f2, $f4, $f8, $e8, $f0, $f0, $ec, $f0, $ed, $f3, $00, $01, $f7, $f2, $f3, $f3
1732a     EC F1 EC E2 
1732e     F7 FA F8 F3 
17332     00 01 F8 00 
17336     04 13 21 1C | 	byte	$ec, $f1, $ec, $e2, $f7, $fa, $f8, $f3, $00, $01, $f8, $00, $04, $13, $21, $1c
1733a     1E 26 22 1A 
1733e     19 14 0E 08 
17342     04 03 06 10 
17346     09 09 0E 0D | 	byte	$1e, $26, $22, $1a, $19, $14, $0e, $08, $04, $03, $06, $10, $09, $09, $0e, $0d
1734a     00 02 07 00 
1734e     00 00 01 10 
17352     09 F9 F7 F4 
17356     F2 EB F0 E2 | 	byte	$00, $02, $07, $00, $00, $00, $01, $10, $09, $f9, $f7, $f4, $f2, $eb, $f0, $e2
1735a     DB F3 F7 F2 
1735e     F3 00 00 F7 
17362     06 08 1C 21 
17366     1C 27 22 27 | 	byte	$db, $f3, $f7, $f2, $f3, $00, $00, $f7, $06, $08, $1c, $21, $1c, $27, $22, $27
1736a     1C 1C 19 0F 
1736e     13 0D 0E 18 
17372     20 1E 1E 2A 
17376     1F 1C 1E 1C | 	byte	$1c, $1c, $19, $0f, $13, $0d, $0e, $18, $20, $1e, $1e, $2a, $1f, $1c, $1e, $1c
1737a     16 15 14 19 
1737e     21 1A 09 06 
17382     09 00 00 00 
17386     F7 F7 06 07 | 	byte	$16, $15, $14, $19, $21, $1a, $09, $06, $09, $00, $00, $00, $f7, $f7, $06, $07
1738a     00 00 0D 00 
1738e     FE 00 00 15 
17392     14 08 0E 0C 
17396     09 03 00 00 | 	byte	$00, $00, $0d, $00, $fe, $00, $00, $15, $14, $08, $0e, $0c, $09, $03, $00, $00
1739a     F8 F7 F1 F2 
1739e     FC FA F8 F7 
173a2     00 F3 EE F6 
173a6     EE ED F0 EB | 	byte	$f8, $f7, $f1, $f2, $fc, $fa, $f8, $f7, $00, $f3, $ee, $f6, $ee, $ed, $f0, $eb
173aa     FE 03 FC F2 
173ae     F0 F3 E8 ED 
173b2     EE DE EB F7 
173b6     F8 F2 F8 01 | 	byte	$fe, $03, $fc, $f2, $f0, $f3, $e8, $ed, $ee, $de, $eb, $f7, $f8, $f2, $f8, $01
173ba     F7 FC FD 09 
173be     19 18 1C 1A 
173c2     21 1A 14 13 
173c6     0A 09 00 00 | 	byte	$f7, $fc, $fd, $09, $19, $18, $1c, $1a, $21, $1a, $14, $13, $0a, $09, $00, $00
173ca     00 08 06 01 
173ce     09 06 00 00 
173d2     04 FF FD FC 
173d6     FC 03 09 FF | 	byte	$00, $08, $06, $01, $09, $06, $00, $00, $04, $ff, $fd, $fc, $fc, $03, $09, $ff
173da     F4 F4 F2 EA 
173de     F0 EC DB E8 
173e2     F7 F4 F2 FE 
173e6     04 FC 03 03 | 	byte	$f4, $f4, $f2, $ea, $f0, $ec, $db, $e8, $f7, $f4, $f2, $fe, $04, $fc, $03, $03
173ea     13 28 21 2A 
173ee     2B 2C 2A 21 
173f2     25 1C 1C 15 
173f6     10 19 22 27 | 	byte	$13, $28, $21, $2a, $2b, $2c, $2a, $21, $25, $1c, $1c, $15, $10, $19, $22, $27
173fa     24 2C 2B 1F 
173fe     26 25 1C 1C 
17402     14 16 21 1B 
17406     10 04 08 00 | 	byte	$24, $2c, $2b, $1f, $26, $25, $1c, $1c, $14, $16, $21, $1b, $10, $04, $08, $00
1740a     FA 03 F2 F1 
1740e     FC 03 FF F8 
17412     08 00 FC FA 
17416     FC 06 0A 09 | 	byte	$fa, $03, $f2, $f1, $fc, $03, $ff, $f8, $08, $00, $fc, $fa, $fc, $06, $0a, $09
1741a     07 0A 09 00 
1741e     FF FA FA F3 
17422     F0 E8 F4 F8 
17426     F2 F7 F8 F7 | 	byte	$07, $0a, $09, $00, $ff, $fa, $fa, $f3, $f0, $e8, $f4, $f8, $f2, $f7, $f8, $f7
1742a     EB F2 F2 EB 
1742e     EE EC F7 00 
17432     FD F7 F0 F3 
17436     EC EB F3 E2 | 	byte	$eb, $f2, $f2, $eb, $ee, $ec, $f7, $00, $fd, $f7, $f0, $f3, $ec, $eb, $f3, $e2
1743a     E4 F4 F9 F3 
1743e     F7 04 FA FD 
17442     00 01 1C 1B 
17446     21 24 22 27 | 	byte	$e4, $f4, $f9, $f3, $f7, $04, $fa, $fd, $00, $01, $1c, $1b, $21, $24, $22, $27
1744a     1A 1E 14 14 
1744e     0A 04 03 09 
17452     12 09 0C 10 
17456     09 06 08 01 | 	byte	$1a, $1e, $14, $14, $0a, $04, $03, $09, $12, $09, $0c, $10, $09, $06, $08, $01
1745a     00 00 F9 00 
1745e     08 04 F7 F4 
17462     F6 E6 EB EC 
17466     DC DF ED F3 | 	byte	$00, $00, $f9, $00, $08, $04, $f7, $f4, $f6, $e6, $eb, $ec, $dc, $df, $ed, $f3
1746a     EC F7 00 F8 
1746e     FC FD 00 1A 
17472     1E 1E 27 27 
17476     2A 21 20 1C | 	byte	$ec, $f7, $00, $f8, $fc, $fd, $00, $1a, $1e, $1e, $27, $27, $2a, $21, $20, $1c
1747a     1A 18 0E 13 
1747e     1C 1F 1E 24 
17482     2A 1F 21 26 
17486     1C 1C 1A 10 | 	byte	$1a, $18, $0e, $13, $1c, $1f, $1e, $24, $2a, $1f, $21, $26, $1c, $1c, $1a, $10
1748a     1C 1E 1A 07 
1748e     07 04 FC 04 
17492     FC F0 FA 00 
17496     02 FA 09 01 | 	byte	$1c, $1e, $1a, $07, $07, $04, $fc, $04, $fc, $f0, $fa, $00, $02, $fa, $09, $01
1749a     00 00 F7 09 
1749e     0E 0F 0F 0F 
174a2     15 0D 09 04 
174a6     04 00 FC F4 | 	byte	$00, $00, $f7, $09, $0e, $0f, $0f, $0f, $15, $0d, $09, $04, $04, $00, $fc, $f4
174aa     F6 00 FC FC 
174ae     00 FD F3 FA 
174b2     F7 F2 F7 F2 
174b6     F3 00 03 FA | 	byte	$f6, $00, $fc, $fc, $00, $fd, $f3, $fa, $f7, $f2, $f7, $f2, $f3, $00, $03, $fa
174ba     F1 F7 EE EB 
174be     F3 EC E2 EB 
174c2     F7 F7 F1 FF 
174c6     FC F8 F9 F7 | 	byte	$f1, $f7, $ee, $eb, $f3, $ec, $e2, $eb, $f7, $f7, $f1, $ff, $fc, $f8, $f9, $f7
174ca     09 13 14 1C 
174ce     1E 22 1B 1A 
174d2     13 0E 0C 01 
174d6     00 00 07 04 | 	byte	$09, $13, $14, $1c, $1e, $22, $1b, $1a, $13, $0e, $0c, $01, $00, $00, $07, $04
174da     06 0D 09 00 
174de     06 00 FE 00 
174e2     F3 FE 03 06 
174e6     FC F2 FA EC | 	byte	$06, $0d, $09, $00, $06, $00, $fe, $00, $f3, $fe, $03, $06, $fc, $f2, $fa, $ec
174ea     F0 F2 E6 E2 
174ee     EB F7 EE F7 
174f2     00 FD 00 FC 
174f6     00 13 1E 1E | 	byte	$f0, $f2, $e6, $e2, $eb, $f7, $ee, $f7, $00, $fd, $00, $fc, $00, $13, $1e, $1e
174fa     25 2D 30 2B 
174fe     25 26 20 1C 
17502     18 10 1C 21 
17506     1C 24 28 20 | 	byte	$25, $2d, $30, $2b, $25, $26, $20, $1c, $18, $10, $1c, $21, $1c, $24, $28, $20
1750a     20 25 1F 1C 
1750e     1A 0E 15 1C 
17512     1B 0A 04 06 
17516     FD 03 00 F7 | 	byte	$20, $25, $1f, $1c, $1a, $0e, $15, $1c, $1b, $0a, $04, $06, $fd, $03, $00, $f7
1751a     F7 FD 06 FA 
1751e     03 06 FE 01 
17522     F6 FD 09 09 
17526     0E 0E 13 0E | 	byte	$f7, $fd, $06, $fa, $03, $06, $fe, $01, $f6, $fd, $09, $09, $0e, $0e, $13, $0e
1752a     0A 07 00 01 
1752e     FC F7 F1 FA 
17532     FC F7 FD FF 
17536     F3 F7 F9 F1 | 	byte	$0a, $07, $00, $01, $fc, $f7, $f1, $fa, $fc, $f7, $fd, $ff, $f3, $f7, $f9, $f1
1753a     F7 EE ED F8 
1753e     00 00 F2 F7 
17542     F2 EB F7 F0 
17546     E6 E6 F7 F7 | 	byte	$f7, $ee, $ed, $f8, $00, $00, $f2, $f7, $f2, $eb, $f7, $f0, $e6, $e6, $f7, $f7
1754a     F2 FE FC FC 
1754e     FC F8 00 0F 
17552     15 1A 1E 24 
17556     22 1C 1A 13 | 	byte	$f2, $fe, $fc, $fc, $fc, $f8, $00, $0f, $15, $1a, $1e, $24, $22, $1c, $1a, $13
1755a     0E 0D 00 00 
1755e     06 04 04 0C 
17562     0D 00 03 03 
17566     FD 00 F7 F6 | 	byte	$0e, $0d, $00, $00, $06, $04, $04, $0c, $0d, $00, $03, $03, $fd, $00, $f7, $f6
1756a     00 04 01 F3 
1756e     F8 EC EB F2 
17572     EC E4 E0 F6 
17576     F0 F1 00 F9 | 	byte	$00, $04, $01, $f3, $f8, $ec, $eb, $f2, $ec, $e4, $e0, $f6, $f0, $f1, $00, $f9
1757a     00 FC FC 09 
1757e     19 21 21 2A 
17582     2B 2C 2A 26 
17586     25 21 1B 10 | 	byte	$00, $fc, $fc, $09, $19, $21, $21, $2a, $2b, $2c, $2a, $26, $25, $21, $1b, $10
1758a     16 20 1C 1E 
1758e     28 25 1F 25 
17592     1F 1C 1C 10 
17596     10 18 1E 0E | 	byte	$16, $20, $1c, $1e, $28, $25, $1f, $25, $1f, $1c, $1c, $10, $10, $18, $1e, $0e
1759a     08 09 FD 00 
1759e     04 FC F7 F8 
175a2     00 FD 00 04 
175a6     FF 00 FC F4 | 	byte	$08, $09, $fd, $00, $04, $fc, $f7, $f8, $00, $fd, $00, $04, $ff, $00, $fc, $f4
175aa     00 08 0E 0D 
175ae     0F 10 09 09 
175b2     01 00 FF F7 
175b6     ED F3 F7 F2 | 	byte	$00, $08, $0e, $0d, $0f, $10, $09, $09, $01, $00, $ff, $f7, $ed, $f3, $f7, $f2
175ba     F7 FE F4 F1 
175be     F7 ED F2 EE 
175c2     E6 ED F8 00 
175c6     F2 F3 F2 E8 | 	byte	$f7, $fe, $f4, $f1, $f7, $ed, $f2, $ee, $e6, $ed, $f8, $00, $f2, $f3, $f2, $e8
175ca     F1 F2 EC DF 
175ce     F0 F4 ED F8 
175d2     F8 FC FE F7 
175d6     F8 09 13 18 | 	byte	$f1, $f2, $ec, $df, $f0, $f4, $ed, $f8, $f8, $fc, $fe, $f7, $f8, $09, $13, $18
175da     1E 21 25 21 
175de     1E 19 14 12 
175e2     06 00 06 09 
175e6     04 0D 10 07 | 	byte	$1e, $21, $25, $21, $1e, $19, $14, $12, $06, $00, $06, $09, $04, $0d, $10, $07
175ea     08 09 00 02 
175ee     FD F7 FC 06 
175f2     07 F9 FD F7 
175f6     ED F7 F1 EC | 	byte	$08, $09, $00, $02, $fd, $f7, $fc, $06, $07, $f9, $fd, $f7, $ed, $f7, $f1, $ec
175fa     E4 F1 F2 EB 
175fe     FC F8 FE 00 
17602     F7 00 0E 1C 
17606     1E 25 2A 2A | 	byte	$e4, $f1, $f2, $eb, $fc, $f8, $fe, $00, $f7, $00, $0e, $1c, $1e, $25, $2a, $2a
1760a     28 26 21 20 
1760e     1B 14 10 1C 
17612     1B 18 24 26 
17616     1C 24 1F 1C | 	byte	$28, $26, $21, $20, $1b, $14, $10, $1c, $1b, $18, $24, $26, $1c, $24, $1f, $1c
1761a     1C 14 0E 0F 
1761e     1C 14 09 0D 
17622     00 FE 01 01 
17626     F7 F6 00 00 | 	byte	$1c, $14, $0e, $0f, $1c, $14, $09, $0d, $00, $fe, $01, $01, $f7, $f6, $00, $00
1762a     FE 00 00 01 
1762e     00 F4 FF 08 
17632     0D 0F 10 18 
17636     10 0E 0D 04 | 	byte	$fe, $00, $00, $01, $00, $f4, $ff, $08, $0d, $0f, $10, $18, $10, $0e, $0d, $04
1763a     02 00 F4 F6 
1763e     FC F7 F7 00 
17642     00 F7 FC F7 
17646     F7 F9 EE ED | 	byte	$02, $00, $f4, $f6, $fc, $f7, $f7, $00, $00, $f7, $fc, $f7, $f7, $f9, $ee, $ed
1764a     F7 06 00 FA 
1764e     FD EE F6 F7 
17652     F3 E7 E8 F8 
17656     ED F7 F7 F7 | 	byte	$f7, $06, $00, $fa, $fd, $ee, $f6, $f7, $f3, $e7, $e8, $f8, $ed, $f7, $f7, $f7
1765a     FD F7 F7 FF 
1765e     0E 13 18 1E 
17662     21 1F 1C 18 
17666     13 0E 06 FE | 	byte	$fd, $f7, $f7, $ff, $0e, $13, $18, $1e, $21, $1f, $1c, $18, $13, $0e, $06, $fe
1766a     00 07 01 03 
1766e     0D 04 06 04 
17672     00 02 FD F3 
17676     F0 FC 04 FA | 	byte	$00, $07, $01, $03, $0d, $04, $06, $04, $00, $02, $fd, $f3, $f0, $fc, $04, $fa
1767a     F9 F7 EB EE 
1767e     F3 EE E4 EA 
17682     F0 ED F7 F7 
17686     F7 00 F8 FE | 	byte	$f9, $f7, $eb, $ee, $f3, $ee, $e4, $ea, $f0, $ed, $f7, $f7, $f7, $00, $f8, $fe
1768a     08 14 1E 21 
1768e     2E 30 2B 2A 
17692     25 24 22 1A 
17696     14 19 1F 1E | 	byte	$08, $14, $1e, $21, $2e, $30, $2b, $2a, $25, $24, $22, $1a, $14, $19, $1f, $1e
1769a     24 2E 21 27 
1769e     26 20 25 1A 
176a2     14 0D 1C 1A 
176a6     0E 13 04 00 | 	byte	$24, $2e, $21, $27, $26, $20, $25, $1a, $14, $0d, $1c, $1a, $0e, $13, $04, $00
176aa     01 06 00 F6 
176ae     00 00 FE 00 
176b2     00 00 00 FA 
176b6     F8 03 09 0D | 	byte	$01, $06, $00, $f6, $00, $00, $fe, $00, $00, $00, $00, $fa, $f8, $03, $09, $0d
176ba     12 16 14 0E 
176be     0D 04 04 00 
176c2     F7 EE F8 F7 
176c6     F2 FC FC F7 | 	byte	$12, $16, $14, $0e, $0d, $04, $04, $00, $f7, $ee, $f8, $f7, $f2, $fc, $fc, $f7
176ca     F8 F2 F3 F3 
176ce     EC E6 E6 FC 
176d2     FC F3 F9 EE 
176d6     EC F0 F2 EC | 	byte	$f8, $f2, $f3, $f3, $ec, $e6, $e6, $fc, $fc, $f3, $f9, $ee, $ec, $f0, $f2, $ec
176da     E4 F2 EC F0 
176de     F8 F2 FE F7 
176e2     F7 FC 06 13 
176e6     13 1E 26 22 | 	byte	$e4, $f2, $ec, $f0, $f8, $f2, $fe, $f7, $f7, $fc, $06, $13, $13, $1e, $26, $22
176ea     20 1B 15 15 
176ee     0E 04 00 09 
176f2     07 03 13 09 
176f6     08 0A 04 06 | 	byte	$20, $1b, $15, $15, $0e, $04, $00, $09, $07, $03, $13, $09, $08, $0a, $04, $06
176fa     01 FE F2 F7 
176fe     03 00 FE FC 
17702     F2 ED F3 F3 
17706     E6 EB F0 ED | 	byte	$01, $fe, $f2, $f7, $03, $00, $fe, $fc, $f2, $ed, $f3, $f3, $e6, $eb, $f0, $ed
1770a     F2 F9 F7 00 
1770e     FE FA 03 0E 
17712     1A 20 2A 30 
17716     2E 2E 2A 25 | 	byte	$f2, $f9, $f7, $00, $fe, $fa, $03, $0e, $1a, $20, $2a, $30, $2e, $2e, $2a, $25
1771a     25 1F 14 EB 
1771e     00 00 34 39 
17722     33 37 4C 5D 
17726     48 0C D0 AC | 	byte	$25, $1f, $14, $eb, $00, $00, $34, $39, $33, $37, $4c, $5d, $48, $0c, $d0, $ac
1772a     A5 CF 2E 57 
1772e     36 18 0F 00 
17732     AC 87 CF 5E 
17736     60 00 88 9F | 	byte	$a5, $cf, $2e, $57, $36, $18, $0f, $00, $ac, $87, $cf, $5e, $60, $00, $88, $9f
1773a     FF 7F 60 DB 
1773e     3C 0C 16 30 
17742     A0 CF 30 E7 
17746     5E 60 D8 D0 | 	byte	$ff, $7f, $60, $db, $3c, $0c, $16, $30, $a0, $cf, $30, $e7, $5e, $60, $d8, $d0
1774a     AB E7 D0 CF 
1774e     18 A0 9F BE 
17752     B7 B8 B7 CF 
17756     C4 E7 00 E7 | 	byte	$ab, $e7, $d0, $cf, $18, $a0, $9f, $be, $b7, $b8, $b7, $cf, $c4, $e7, $00, $e7
1775a     D0 FF 00 B7 
1775e     FF 30 0F 00 
17762     06 D0 CF F4 
17766     D0 B4 88 9F | 	byte	$d0, $ff, $00, $b7, $ff, $30, $0f, $00, $06, $d0, $cf, $f4, $d0, $b4, $88, $9f
1776a     AC 81 CF 00 
1776e     C7 A0 9F 06 
17772     A0 9F D0 87 
17776     A8 CA A0 FF | 	byte	$ac, $81, $cf, $00, $c7, $a0, $9f, $06, $a0, $9f, $d0, $87, $a8, $ca, $a0, $ff
1777a     18 FF E8 AC 
1777e     B7 FF 00 BD 
17782     DC CF F1 B8 
17786     FF 00 CF FF | 	byte	$18, $ff, $e8, $ac, $b7, $ff, $00, $bd, $dc, $cf, $f1, $b8, $ff, $00, $cf, $ff
1778a     18 EE D2 F3 
1778e     09 E8 EB B8 
17792     CF E8 FF 0A 
17796     3C 00 FF 30 | 	byte	$18, $ee, $d2, $f3, $09, $e8, $eb, $b8, $cf, $e8, $ff, $0a, $3c, $00, $ff, $30
1779a     10 28 34 5E 
1779e     48 2E 5E 7F 
177a2     60 0A 52 30 
177a6     5E 60 3A 36 | 	byte	$10, $28, $34, $5e, $48, $2e, $5e, $7f, $60, $0a, $52, $30, $5e, $60, $3a, $36
177aa     3C 2E 5E 6C 
177ae     30 46 3C 5E 
177b2     60 72 30 22 
177b6     52 78 3C 5E | 	byte	$3c, $2e, $5e, $6c, $30, $46, $3c, $5e, $60, $72, $30, $22, $52, $78, $3c, $5e
177ba     7F 60 46 55 
177be     48 5E 60 7F 
177c2     7F 7F 4F 7F 
177c6     7F 5E 30 5E | 	byte	$7f, $60, $46, $55, $48, $5e, $60, $7f, $7f, $7f, $4f, $7f, $7f, $5e, $30, $5e
177ca     78 66 30 0A 
177ce     46 30 2E 7F 
177d2     60 5E 60 5E 
177d6     7F 7F 3C 5E | 	byte	$78, $66, $30, $0a, $46, $30, $2e, $7f, $60, $5e, $60, $5e, $7f, $7f, $3c, $5e
177da     66 76 7F 7F 
177de     6F 49 7B 30 
177e2     46 60 42 46 
177e6     48 52 6A 60 | 	byte	$66, $76, $7f, $7f, $6f, $49, $7b, $30, $46, $60, $42, $46, $48, $52, $6a, $60
177ea     46 46 69 48 
177ee     28 5E 3C 46 
177f2     60 30 3A 3C 
177f6     00 FF 2A 18 | 	byte	$46, $46, $69, $48, $28, $5e, $3c, $46, $60, $30, $3a, $3c, $00, $ff, $2a, $18
177fa     22 36 1E 37 
177fe     18 2E 18 10 
17802     2E 48 2A 1E 
17806     00 FF 2E 30 | 	byte	$22, $36, $1e, $37, $18, $2e, $18, $10, $2e, $48, $2a, $1e, $00, $ff, $2e, $30
1780a     00 EE A0 CF 
1780e     00 DF E7 DC 
17812     B7 FF 0C EE 
17816     EA DC E1 FF | 	byte	$00, $ee, $a0, $cf, $00, $df, $e7, $dc, $b7, $ff, $0c, $ee, $ea, $dc, $e1, $ff
1781a     0C FD 12 E8 
1781e     FF 00 E8 BD 
17822     E1 EE D0 AB 
17826     B7 A0 AB 9C | 	byte	$0c, $fd, $12, $e8, $ff, $00, $e8, $bd, $e1, $ee, $d0, $ab, $b7, $a0, $ab, $9c
1782a     C3 C4 A0 B7 
1782e     E8 A0 9F B8 
17832     BE A0 AC A0 
17836     A9 88 9F AC | 	byte	$c3, $c4, $a0, $b7, $e8, $a0, $9f, $b8, $be, $a0, $ac, $a0, $a9, $88, $9f, $ac
1783a     A0 87 C0 A3 
1783e     C9 A0 9F B4 
17842     AC 80 9F AC 
17846     97 81 B2 88 | 	byte	$a0, $87, $c0, $a3, $c9, $a0, $9f, $b4, $ac, $80, $9f, $ac, $97, $81, $b2, $88
1784a     87 80 84 80 
1784e     84 80 80 9F 
17852     80 80 80 80 
17856     87 80 C7 80 | 	byte	$87, $80, $84, $80, $84, $80, $80, $9f, $80, $80, $80, $80, $87, $80, $c7, $80
1785a     93 80 99 A0 
1785e     80 80 80 80 
17862     93 80 80 80 
17866     80 81 80 80 | 	byte	$93, $80, $99, $a0, $80, $80, $80, $80, $93, $80, $80, $80, $80, $81, $80, $80
1786a     93 80 80 80 
1786e     9F 80 80 B8 
17872     80 80 A0 80 
17876     87 A0 80 81 | 	byte	$93, $80, $80, $80, $9f, $80, $80, $b8, $80, $80, $a0, $80, $87, $a0, $80, $81
1787a     80 8E 80 80 
1787e     9D 80 9F 88 
17882     88 80 99 80 
17886     90 9F 80 9D | 	byte	$80, $8e, $80, $80, $9d, $80, $9f, $88, $88, $80, $99, $80, $90, $9f, $80, $9d
1788a     81 9F 80 93 
1788e     94 82 93 A6 
17892     91 9F 91 97 
17896     9F D5 C4 C4 | 	byte	$81, $9f, $80, $93, $94, $82, $93, $a6, $91, $9f, $91, $97, $9f, $d5, $c4, $c4
1789a     BD CA 93 CF 
1789e     A0 B7 B1 AC 
178a2     B1 D3 A0 CF 
178a6     D0 CA CA C9 | 	byte	$bd, $ca, $93, $cf, $a0, $b7, $b1, $ac, $b1, $d3, $a0, $cf, $d0, $ca, $ca, $c9
178aa     F0 E4 DC C9 
178ae     E7 F4 D0 DB 
178b2     FF 00 D2 F3 
178b6     F4 FF FF 06 | 	byte	$f0, $e4, $dc, $c9, $e7, $f4, $d0, $db, $ff, $00, $d2, $f3, $f4, $ff, $ff, $06
178ba     0A 16 18 E4 
178be     2E 18 2E 2E 
178c2     18 F3 52 00 
178c6     FF 25 00 F9 | 	byte	$0a, $16, $18, $e4, $2e, $18, $2e, $2e, $18, $f3, $52, $00, $ff, $25, $00, $f9
178ca     2E 1B 24 0A 
178ce     3C 28 76 30 
178d2     3F 36 2A 46 
178d6     48 48 46 48 | 	byte	$2e, $1b, $24, $0a, $3c, $28, $76, $30, $3f, $36, $2a, $46, $48, $48, $46, $48
178da     24 2E 5E 60 
178de     6A 7C 6C 48 
178e2     40 46 5E 6C 
178e6     48 58 7F 7F | 	byte	$24, $2e, $5e, $60, $6a, $7c, $6c, $48, $40, $46, $5e, $6c, $48, $58, $7f, $7f
178ea     48 76 6C 60 
178ee     5E 7F 60 7F 
178f2     60 6A 7F 73 
178f6     7F 78 78 60 | 	byte	$48, $76, $6c, $60, $5e, $7f, $60, $7f, $60, $6a, $7f, $73, $7f, $78, $78, $60
178fa     76 7F 7F 7F 
178fe     7C 7F 78 7F 
17902     7F 7F 7F 7F 
17906     70 7F 78 7F | 	byte	$76, $7f, $7f, $7f, $7c, $7f, $78, $7f, $7f, $7f, $7f, $7f, $70, $7f, $78, $7f
1790a     7F 7F 7F 7F 
1790e     7F 7F 7F 7F | 	byte	$7f[8]
17912     76 7F 7E 7F 
17916     7F 7F 7F 7F 
1791a     7F 7F 64 7F 
1791e     7F 7F 7F 7F | 	byte	$76, $7f, $7e, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $64, $7f, $7f, $7f, $7f, $7f
17922     7F 7F 7F 7F 
17926     7F 7F       | 	byte	$7f[6]
17928     79 7F 66 64 
1792c     6D 73 7F 7F 
17930     64 7F 60 6A 
17934     7F 60 70 7F | 	byte	$79, $7f, $66, $64, $6d, $73, $7f, $7f, $64, $7f, $60, $6a, $7f, $60, $70, $7f
17938     76 7F 7F 78 
1793c     58 78 60 75 
17940     6C 46 66 48 
17944     4F 64 58 66 | 	byte	$76, $7f, $7f, $78, $58, $78, $60, $75, $6c, $46, $66, $48, $4f, $64, $58, $66
17948     45 51 5E 60 
1794c     3A 5E 4E 40 
17950     5E 42 3F 3D 
17954     40 4E 30 22 | 	byte	$45, $51, $5e, $60, $3a, $5e, $4e, $40, $5e, $42, $3f, $3d, $40, $4e, $30, $22
17958     42 0C 28 28 
1795c     3C 30 1F 40 
17960     48 43 42 22 
17964     3F 18 22 30 | 	byte	$42, $0c, $28, $28, $3c, $30, $1f, $40, $48, $43, $42, $22, $3f, $18, $22, $30
17968     0C 18 0C 04 
1796c     24 DB 1E F3 
17970     00 FF 0C E7 
17974     12 FC 00 FF | 	byte	$0c, $18, $0c, $04, $24, $db, $1e, $f3, $00, $ff, $0c, $e7, $12, $fc, $00, $ff
17978     00 F3 18 D0 
1797c     EE F3 E8 DB 
17980     E1 D8 E7 E2 
17984     B8 C9 DC C3 | 	byte	$00, $f3, $18, $d0, $ee, $f3, $e8, $db, $e1, $d8, $e7, $e2, $b8, $c9, $dc, $c3
17988     E8 BD D3 D5 
1798c     CD DB DC C3 
17990     CA B7 D0 C3 
17994     BE 9F C7 AB | 	byte	$e8, $bd, $d3, $d5, $cd, $db, $dc, $c3, $ca, $b7, $d0, $c3, $be, $9f, $c7, $ab
17998     C0 B8 88 9F 
1799c     C1 A0 C3 D0 
179a0     88 9F B8 A0 
179a4     B2 AB A0 9F | 	byte	$c0, $b8, $88, $9f, $c1, $a0, $c3, $d0, $88, $9f, $b8, $a0, $b2, $ab, $a0, $9f
179a8     A0 80 82 80 
179ac     93 A0 87 94 
179b0     80 87 94 80 
179b4     80 87 8D 97 | 	byte	$a0, $80, $82, $80, $93, $a0, $87, $94, $80, $87, $94, $80, $80, $87, $8d, $97
179b8     88 8D 9F 97 
179bc     90 9C 94 80 
179c0     8B 87 80 87 
179c4     A0 80 91 87 | 	byte	$88, $8d, $9f, $97, $90, $9c, $94, $80, $8b, $87, $80, $87, $a0, $80, $91, $87
179c8     8E 9A 94 84 
179cc     9F A6 80 88 
179d0     80 81 8D 80 
179d4     80 80 80 87 | 	byte	$8e, $9a, $94, $84, $9f, $a6, $80, $88, $80, $81, $8d, $80, $80, $80, $80, $87
179d8     82 80 8D 80 
179dc     80 AC 80 9A 
179e0     9F 90 94 80 
179e4     87 88 80 87 | 	byte	$82, $80, $8d, $80, $80, $ac, $80, $9a, $9f, $90, $94, $80, $87, $88, $80, $87
179e8     9F 94 80 80 
179ec     8E 80 80 80 
179f0     80 AC 8D 94 
179f4     80 80 93 94 | 	byte	$9f, $94, $80, $80, $8e, $80, $80, $80, $80, $ac, $8d, $94, $80, $80, $93, $94
179f8     9F A0 80 AC 
179fc     87 8E 9F AC 
17a00     94 9A 91 93 
17a04     AC A0 93 BE | 	byte	$9f, $a0, $80, $ac, $87, $8e, $9f, $ac, $94, $9a, $91, $93, $ac, $a0, $93, $be
17a08     A0 9C C3 AF 
17a0c     A8 BB AF A3 
17a10     AF AB B7 B8 
17a14     AB B2 B7 C0 | 	byte	$a0, $9c, $c3, $af, $a8, $bb, $af, $a3, $af, $ab, $b7, $b8, $ab, $b2, $b7, $c0
17a18     BE C3 D2 BE 
17a1c     C3 D0 BD D9 
17a20     DF BE C3 DC 
17a24     CF D8 D6 CF | 	byte	$be, $c3, $d2, $be, $c3, $d0, $bd, $d9, $df, $be, $c3, $dc, $cf, $d8, $d6, $cf
17a28     EE DF D9 E4 
17a2c     E4 DE F3 EE 
17a30     E7 00 FF 0C 
17a34     F3 18 F3 09 | 	byte	$ee, $df, $d9, $e4, $e4, $de, $f3, $ee, $e7, $00, $ff, $0c, $f3, $18, $f3, $09
17a38     06 07 06 FF 
17a3c     18 0C FF 1C 
17a40     15 1B 27 1F 
17a44     1E 28 2B 18 | 	byte	$06, $07, $06, $ff, $18, $0c, $ff, $1c, $15, $1b, $27, $1f, $1e, $28, $2b, $18
17a48     2E 48 13 2A 
17a4c     2E 3C 30 3A 
17a50     48 3D 3F 40 
17a54     48 4F 3C 46 | 	byte	$2e, $48, $13, $2a, $2e, $3c, $30, $3a, $48, $3d, $3f, $40, $48, $4f, $3c, $46
17a58     5A 48 3A 5B 
17a5c     5A 5E 60 52 
17a60     61 69 60 6A 
17a64     6C 52 66 64 | 	byte	$5a, $48, $3a, $5b, $5a, $5e, $60, $52, $61, $69, $60, $6a, $6c, $52, $66, $64
17a68     69 66 6A 6F 
17a6c     76 7F 7F 78 
17a70     6C 6A 78 64 
17a74     7F 7F 78 72 | 	byte	$69, $66, $6a, $6f, $76, $7f, $7f, $78, $6c, $6a, $78, $64, $7f, $7f, $78, $72
17a78     7F 7F 78 7B 
17a7c     7F 7F 7F 7F 
17a80     7F 7F 7F 7E 
17a84     7F 7F 7F 7F | 	byte	$7f, $7f, $78, $7b, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7e, $7f, $7f, $7f, $7f
17a88     7F 79 7F 7F 
17a8c     7F 7F 7F 7F 
17a90     7F 7F 7F 7F 
17a94     7F 7F 7F 7F | 	byte	$7f, $79, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
17a98     7F 7F 7F 7F 
17a9c     7F 7F 7F 7F 
17aa0     7F 7F 7F 7F | 	byte	$7f[12]
17aa4     7E 7F 7F 7F 
17aa8     7E 7F 7F 76 
17aac     78 76 6C 7F 
17ab0     7F 70 7E 78 | 	byte	$7e, $7f, $7f, $7f, $7e, $7f, $7f, $76, $78, $76, $6c, $7f, $7f, $70, $7e, $78
17ab4     6A 78 67 60 
17ab8     64 64 6C 7C 
17abc     60 5E 78 60 
17ac0     64 72 60 5E | 	byte	$6a, $78, $67, $60, $64, $64, $6c, $7c, $60, $5e, $78, $60, $64, $72, $60, $5e
17ac4     60 52 66 5A 
17ac8     4E 4B 48 3C 
17acc     37 46 30 2E 
17ad0     4E 3F 30 37 | 	byte	$60, $52, $66, $5a, $4e, $4b, $48, $3c, $37, $46, $30, $2e, $4e, $3f, $30, $37
17ad4     3F 30 2A 2D 
17ad8     24 22 3A 3C 
17adc     28 2A 12 22 
17ae0     30 1C 24 1F | 	byte	$3f, $30, $2a, $2d, $24, $22, $3a, $3c, $28, $2a, $12, $22, $30, $1c, $24, $1f
17ae4     1B 1E 1F 1E 
17ae8     0C 00 10 00 
17aec     FF 18 0A 06 
17af0     F4 ED F6 FD | 	byte	$1b, $1e, $1f, $1e, $0c, $00, $10, $00, $ff, $18, $0a, $06, $f4, $ed, $f6, $fd
17af4     F4 F3 EE DC 
17af8     DE E5 E7 E7 
17afc     F9 E8 D8 E1 
17b00     EE E2 D8 ED | 	byte	$f4, $f3, $ee, $dc, $de, $e5, $e7, $e7, $f9, $e8, $d8, $e1, $ee, $e2, $d8, $ed
17b04     E8 D2 CA DB 
17b08     D0 CF D0 C9 
17b0c     C4 B8 B7 C9 
17b10     CA BD C9 C7 | 	byte	$e8, $d2, $ca, $db, $d0, $cf, $d0, $c9, $c4, $b8, $b7, $c9, $ca, $bd, $c9, $c7
17b14     BD BA B2 AE 
17b18     A9 AF AC AF 
17b1c     A8 B7 AC 9F 
17b20     A0 99 9F A2 | 	byte	$bd, $ba, $b2, $ae, $a9, $af, $ac, $af, $a8, $b7, $ac, $9f, $a0, $99, $9f, $a2
17b24     9C 94 8D 94 
17b28     9F A0 A0 94 
17b2c     93 9F 97 9C 
17b30     9A 99 90 88 | 	byte	$9c, $94, $8d, $94, $9f, $a0, $a0, $94, $93, $9f, $97, $9c, $9a, $99, $90, $88
17b34     87 91 80 80 
17b38     80 80 80 87 
17b3c     88 87 80 81 
17b40     80 81 80 80 | 	byte	$87, $91, $80, $80, $80, $80, $80, $87, $88, $87, $80, $81, $80, $81, $80, $80
17b44     80 80 87 80 
17b48     80 80 81 82 
17b4c     80 80 80 81 
17b50     80 80 93 94 | 	byte	$80, $80, $87, $80, $80, $80, $81, $82, $80, $80, $80, $81, $80, $80, $93, $94
17b54     84 87 80 80 
17b58     87 8E 93 88 
17b5c     80 81 85 8D 
17b60     80 87 80 87 | 	byte	$84, $87, $80, $80, $87, $8e, $93, $88, $80, $81, $85, $8d, $80, $87, $80, $87
17b64     8B 8E 93 8B 
17b68     93 96 8E 93 
17b6c     9A 9F 99 97 
17b70     97 9A 90 9F | 	byte	$8b, $8e, $93, $8b, $93, $96, $8e, $93, $9a, $9f, $99, $97, $97, $9a, $90, $9f
17b74     A0 9F A8 A6 
17b78     A5 A8 A8 A8 
17b7c     A0 9F A3 AB 
17b80     A5 AF B1 AF | 	byte	$a0, $9f, $a8, $a6, $a5, $a8, $a8, $a8, $a0, $9f, $a3, $ab, $a5, $af, $b1, $af
17b84     B4 A6 B7 B8 
17b88     AB B1 B8 B1 
17b8c     B7 B8 B7 BA 
17b90     C9 C4 C3 CC | 	byte	$b4, $a6, $b7, $b8, $ab, $b1, $b8, $b1, $b7, $b8, $b7, $ba, $c9, $c4, $c3, $cc
17b94     C7 C6 CA C4 
17b98     CF C4 CF D0 
17b9c     DB D0 CF D0 
17ba0     E1 D3 DB E4 | 	byte	$c7, $c6, $ca, $c4, $cf, $c4, $cf, $d0, $db, $d0, $cf, $d0, $e1, $d3, $db, $e4
17ba4     DF DE DC DE 
17ba8     E4 E2 F3 DC 
17bac     E7 E8 ED E8 
17bb0     F1 F1 F3 FF | 	byte	$df, $de, $dc, $de, $e4, $e2, $f3, $dc, $e7, $e8, $ed, $e8, $f1, $f1, $f3, $ff
17bb4     E8 FF 00 FF 
17bb8     00 FF 01 04 
17bbc     07 07 13 12 
17bc0     0F 0C 0D 10 | 	byte	$e8, $ff, $00, $ff, $00, $ff, $01, $04, $07, $07, $13, $12, $0f, $0c, $0d, $10
17bc4     07 16 18 18 
17bc8     13 19 19 22 
17bcc     27 34 30 22 
17bd0     2E 31 2E 30 | 	byte	$07, $16, $18, $18, $13, $19, $19, $22, $27, $34, $30, $22, $2e, $31, $2e, $30
17bd4     36 33 37 37 
17bd8     37 30 34 30 
17bdc     2E 40 36 46 
17be0     51 4B 43 43 | 	byte	$36, $33, $37, $37, $37, $30, $34, $30, $2e, $40, $36, $46, $51, $4b, $43, $43
17be4     4C 4B 4C 5B 
17be8     55 5E 60 52 
17bec     57 4E 52 61 
17bf0     60 55 5B 63 | 	byte	$4c, $4b, $4c, $5b, $55, $5e, $60, $52, $57, $4e, $52, $61, $60, $55, $5b, $63
17bf4     58 5E 60 5E 
17bf8     66 69 6A 6F 
17bfc     69 6A 66 67 
17c00     69 60 64 6C | 	byte	$58, $5e, $60, $5e, $66, $69, $6a, $6f, $69, $6a, $66, $67, $69, $60, $64, $6c
17c04     73 73 76 78 
17c08     7C 7F 7B 79 
17c0c     78 7B 6D 73 
17c10     78 6C 76 78 | 	byte	$73, $73, $76, $78, $7c, $7f, $7b, $79, $78, $7b, $6d, $73, $78, $6c, $76, $78
17c14     76 72 73 76 
17c18     72 6D 67 70 
17c1c     72 7B 78 7C 
17c20     78 78 6D 73 | 	byte	$76, $72, $73, $76, $72, $6d, $67, $70, $72, $7b, $78, $7c, $78, $78, $6d, $73
17c24     72 75 78 6F 
17c28     70 6F 6F 67 
17c2c     6A 79 72 67 
17c30     69 6D 6C 67 | 	byte	$72, $75, $78, $6f, $70, $6f, $6f, $67, $6a, $79, $72, $67, $69, $6d, $6c, $67
17c34     70 6F 67 6A 
17c38     60 64 60 57 
17c3c     57 5E 5A 5D 
17c40     57 5B 54 58 | 	byte	$70, $6f, $67, $6a, $60, $64, $60, $57, $57, $5e, $5a, $5d, $57, $5b, $54, $58
17c44     54 4F 58 54 
17c48     51 52 4F 52 
17c4c     4F 4F 4F 51 
17c50     48 46 48 48 | 	byte	$54, $4f, $58, $54, $51, $52, $4f, $52, $4f, $4f, $4f, $51, $48, $46, $48, $48
17c54     3D 3F 3F 3C 
17c58     3F 36 37 30 
17c5c     34 3C 36 33 
17c60     37 30 30 24 | 	byte	$3d, $3f, $3f, $3c, $3f, $36, $37, $30, $34, $3c, $36, $33, $37, $30, $30, $24
17c64     27 2B 1E 22 
17c68     1E 1E 18 0F 
17c6c     0D 0C 10 10 
17c70     12 03 06 07 | 	byte	$27, $2b, $1e, $22, $1e, $1e, $18, $0f, $0d, $0c, $10, $10, $12, $03, $06, $07
17c74     0F 06 0A 06 
17c78     0A 0A 00 F4 
17c7c     F6 F0 F3 FD 
17c80     F4 F4 EB F0 | 	byte	$0f, $06, $0a, $06, $0a, $0a, $00, $f4, $f6, $f0, $f3, $fd, $f4, $f4, $eb, $f0
17c84     EE EE EE E8 
17c88     E7 ED E8 E7 
17c8c     E5 DF E1 DE 
17c90     DF DE D5 D5 | 	byte	$ee, $ee, $ee, $e8, $e7, $ed, $e8, $e7, $e5, $df, $e1, $de, $df, $de, $d5, $d5
17c94     D8 DB D3 D8 
17c98     D0 C9 C7 C9 
17c9c     CF D0 CF CF 
17ca0     CF C4 C3 C7 | 	byte	$d8, $db, $d3, $d8, $d0, $c9, $c7, $c9, $cf, $d0, $cf, $cf, $cf, $c4, $c3, $c7
17ca4     BE C0 C1 C1 
17ca8     C3 C1 C0 BE 
17cac     C1 BB BE BB 
17cb0     B8 B7 B7 BB | 	byte	$be, $c0, $c1, $c1, $c3, $c1, $c0, $be, $c1, $bb, $be, $bb, $b8, $b7, $b7, $bb
17cb4     B8 B7 B5 AE 
17cb8     B1 AF B5 AC 
17cbc     A8 AB AE B1 
17cc0     AC A9 A6 A0 | 	byte	$b8, $b7, $b5, $ae, $b1, $af, $b5, $ac, $a8, $ab, $ae, $b1, $ac, $a9, $a6, $a0
17cc4     9F 9D 9F A5 
17cc8     A8 AC A3 A5 
17ccc     A6 A6 A2 A3 
17cd0     A0 9F A8 AB | 	byte	$9f, $9d, $9f, $a5, $a8, $ac, $a3, $a5, $a6, $a6, $a2, $a3, $a0, $9f, $a8, $ab
17cd4     B1 AC A6 A6 
17cd8     A5 A6 A5 A8 
17cdc     A3 A8 A8 A3 
17ce0     A8 A2 AB A6 | 	byte	$b1, $ac, $a6, $a6, $a5, $a6, $a5, $a8, $a3, $a8, $a8, $a3, $a8, $a2, $ab, $a6
17ce4     A5 A3 9D 9F 
17ce8     A9 A8 AB A0 
17cec     9F A8 A2 AB 
17cf0     A9 A9 AB AC | 	byte	$a5, $a3, $9d, $9f, $a9, $a8, $ab, $a0, $9f, $a8, $a2, $ab, $a9, $a9, $ab, $ac
17cf4     B2 AE B4 AF 
17cf8     B1 AE B5 AF 
17cfc     AE B7 B2 AF 
17d00     B4 B2 AB B1 | 	byte	$b2, $ae, $b4, $af, $b1, $ae, $b5, $af, $ae, $b7, $b2, $af, $b4, $b2, $ab, $b1
17d04     AF B5 B7 B2 
17d08     B4 B8 BB BD 
17d0c     C6 C4 C4 C6 
17d10     C6 C4 C6 C6 | 	byte	$af, $b5, $b7, $b2, $b4, $b8, $bb, $bd, $c6, $c4, $c4, $c6, $c6, $c4, $c6, $c6
17d14     C6 C7 CC CC 
17d18     C7 C9 D0 C7 
17d1c     CF CC CD CF 
17d20     D3 D8 E1 DF | 	byte	$c6, $c7, $cc, $cc, $c7, $c9, $d0, $c7, $cf, $cc, $cd, $cf, $d3, $d8, $e1, $df
17d24     DE DB DC DF 
17d28     DE DB E1 E4 
17d2c     E7 ED EA E5 
17d30     E7 E5 EA EB | 	byte	$de, $db, $dc, $df, $de, $db, $e1, $e4, $e7, $ed, $ea, $e5, $e7, $e5, $ea, $eb
17d34     ED EE EB EB 
17d38     F0 F3 F7 F6 
17d3c     FC FF 00 01 
17d40     00 FA FD 01 | 	byte	$ed, $ee, $eb, $eb, $f0, $f3, $f7, $f6, $fc, $ff, $00, $01, $00, $fa, $fd, $01
17d44     01 07 06 07 
17d48     04 07 06 09 
17d4c     0C 0C 0C 0D 
17d50     0F 13 18 18 | 	byte	$01, $07, $06, $07, $04, $07, $06, $09, $0c, $0c, $0c, $0d, $0f, $13, $18, $18
17d54     19 18 18 18 
17d58     10 19 18 1B 
17d5c     19 1B 18 19 
17d60     22 1F 21 24 | 	byte	$19, $18, $18, $18, $10, $19, $18, $1b, $19, $1b, $18, $19, $22, $1f, $21, $24
17d64     25 28 27 27 
17d68     2A 2E 30 30 
17d6c     30 2A 28 2E 
17d70     2B 31 2B 2B | 	byte	$25, $28, $27, $27, $2a, $2e, $30, $30, $30, $2a, $28, $2e, $2b, $31, $2b, $2b
17d74     2B 28 2A 2D 
17d78     30 30 30 33 
17d7c     36 37 36 37 
17d80     34 36 37 39 | 	byte	$2b, $28, $2a, $2d, $30, $30, $30, $33, $36, $37, $36, $37, $34, $36, $37, $39
17d84     3A 3C 36 3C 
17d88     3C 3C 3A 3C 
17d8c     39 3D 3C 3C 
17d90     3A 3A 3C 3F | 	byte	$3a, $3c, $36, $3c, $3c, $3c, $3a, $3c, $39, $3d, $3c, $3c, $3a, $3a, $3c, $3f
17d94     40 46 43 40 
17d98     3F 40 40 3F 
17d9c     42 3F 40 42 
17da0     42 40 43 46 | 	byte	$40, $46, $43, $40, $3f, $40, $40, $3f, $42, $3f, $40, $42, $42, $40, $43, $46
17da4     4C 4B 4E 4B 
17da8     49 4F 4B 4B 
17dac     48 48 45 48 
17db0     46 48 46 48 | 	byte	$4c, $4b, $4e, $4b, $49, $4f, $4b, $4b, $48, $48, $45, $48, $46, $48, $46, $48
17db4     45 48 42 3F 
17db8     43 43 46 48 
17dbc     49 49 49 4B 
17dc0     49 48 48 42 | 	byte	$45, $48, $42, $3f, $43, $43, $46, $48, $49, $49, $49, $4b, $49, $48, $48, $42
17dc4     43 45 43 42 
17dc8     3F 3F 3D 3F 
17dcc     45 43 43 3F 
17dd0     3F 39 3A 3C | 	byte	$43, $45, $43, $42, $3f, $3f, $3d, $3f, $45, $43, $43, $3f, $3f, $39, $3a, $3c
17dd4     3D 3D 40 3F 
17dd8     3F 39 3A 3A 
17ddc     39 3C 3D 3C 
17de0     36 34 33 31 | 	byte	$3d, $3d, $40, $3f, $3f, $39, $3a, $3a, $39, $3c, $3d, $3c, $36, $34, $33, $31
17de4     33 33 34 36 
17de8     36 31 30 30 
17dec     2D 2A 28 27 
17df0     24 24 24 25 | 	byte	$33, $33, $34, $36, $36, $31, $30, $30, $2d, $2a, $28, $27, $24, $24, $24, $25
17df4     28 28 24 22 
17df8     22 21 21 21 
17dfc     22 1F 1F 21 
17e00     1F 22 22 21 | 	byte	$28, $28, $24, $22, $22, $21, $21, $21, $22, $1f, $1f, $21, $1f, $22, $22, $21
17e04     21 1B 19 18 
17e08     12 10 0F 0C 
17e0c     0C 0D 0C 0F 
17e10     0F 0D 0F 0C | 	byte	$21, $1b, $19, $18, $12, $10, $0f, $0c, $0c, $0d, $0c, $0f, $0f, $0d, $0f, $0c
17e14     0C 0A 09 06 
17e18     07 06 03 03 
17e1c     01 01 01 00 
17e20     00 FF FC FC | 	byte	$0c, $0a, $09, $06, $07, $06, $03, $03, $01, $01, $01, $00, $00, $ff, $fc, $fc
17e24     FA F7 F7 F7 
17e28     F6 F4 F1 F0 
17e2c     F3 F3 F6 F1 
17e30     EB E8 E7 E7 | 	byte	$fa, $f7, $f7, $f7, $f6, $f4, $f1, $f0, $f3, $f3, $f6, $f1, $eb, $e8, $e7, $e7
17e34     E5 E7 E8 E7 
17e38     E5 E4 E4 E5 
17e3c     E4 E7 E5 E4 
17e40     E2 E1 E1 DF | 	byte	$e5, $e7, $e8, $e7, $e5, $e4, $e4, $e5, $e4, $e7, $e5, $e4, $e2, $e1, $e1, $df
17e44     DE DB DB D9 
17e48     D9 DB D9 D6 
17e4c     D8 D8 D8 D9 
17e50     D8 DB D9 DB | 	byte	$de, $db, $db, $d9, $d9, $db, $d9, $d6, $d8, $d8, $d8, $d9, $d8, $db, $d9, $db
17e54     DC DC DE DC 
17e58     D9 D6 D6 D5 
17e5c     D5 D5 D6 D3 
17e60     D3 D0 D0 D0 | 	byte	$dc, $dc, $de, $dc, $d9, $d6, $d6, $d5, $d5, $d5, $d6, $d3, $d3, $d0, $d0, $d0
17e64     CF D0 D2 D2 
17e68     D2 D2 D3 D2 
17e6c     D2 D2 D2 D0 
17e70     D0 CF CF CF | 	byte	$cf, $d0, $d2, $d2, $d2, $d2, $d3, $d2, $d2, $d2, $d2, $d0, $d0, $cf, $cf, $cf
17e74     D2 D3 D2 D2 
17e78     D2 D2 D3 D3 
17e7c     D3 D5 D6 D8 
17e80     D9 D6 D3 D3 | 	byte	$d2, $d3, $d2, $d2, $d2, $d2, $d3, $d3, $d3, $d5, $d6, $d8, $d9, $d6, $d3, $d3
17e84     D3 D5 D6 D6 
17e88     D5 D5 D5 D5 
17e8c     D5 D3 D5 D5 
17e90     D8 D8 D8 D6 | 	byte	$d3, $d5, $d6, $d6, $d5, $d5, $d5, $d5, $d5, $d3, $d5, $d5, $d8, $d8, $d8, $d6
17e94     D6 D6 D5 D5 
17e98     D3 D5 D6 D6 
17e9c     D6 D8 D8 D9 
17ea0     D9 D6 D6 D6 | 	byte	$d6, $d6, $d5, $d5, $d3, $d5, $d6, $d6, $d6, $d8, $d8, $d9, $d9, $d6, $d6, $d6
17ea4     D8 DB DE DF 
17ea8     DF DF DF DF 
17eac     DF DF E1 DF 
17eb0     DF E1 E2 E5 | 	byte	$d8, $db, $de, $df, $df, $df, $df, $df, $df, $df, $e1, $df, $df, $e1, $e2, $e5
17eb4     E5 E4 E4 E4 
17eb8     E2 E2 DE DF 
17ebc     E1 E1 E4 E4 
17ec0     E4 E4 E4 E5 | 	byte	$e5, $e4, $e4, $e4, $e2, $e2, $de, $df, $e1, $e1, $e4, $e4, $e4, $e4, $e4, $e5
17ec4     E7 E8 EA EA 
17ec8     EA ED EE ED 
17ecc     ED EB ED F0 
17ed0     F0 F1 F1 F1 | 	byte	$e7, $e8, $ea, $ea, $ea, $ed, $ee, $ed, $ed, $eb, $ed, $f0, $f0, $f1, $f1, $f1
17ed4     F1 F1 F1 F0 
17ed8     EE F0 F0 F0 
17edc     F1 F1 F1 F1 
17ee0     F3 F1 F1 F3 | 	byte	$f1, $f1, $f1, $f0, $ee, $f0, $f0, $f0, $f1, $f1, $f1, $f1, $f3, $f1, $f1, $f3
17ee4     F3 F4 F7 F9 
17ee8     FD FF FF FF 
17eec     FF 00 00 00 
17ef0     FF FF FF FF | 	byte	$f3, $f4, $f7, $f9, $fd, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff
17ef4     FD FC FA FA 
17ef8     FA FC FD FD 
17efc     FD FD FF 00 
17f00     01 03 03 03 | 	byte	$fd, $fc, $fa, $fa, $fa, $fc, $fd, $fd, $fd, $fd, $ff, $00, $01, $03, $03, $03
17f04     04 04 07 09 
17f08     09 0A 0C 0C 
17f0c     0A 0A 09 09 
17f10     09 07 06 03 | 	byte	$04, $04, $07, $09, $09, $0a, $0c, $0c, $0a, $0a, $09, $09, $09, $07, $06, $03
17f14     03 04 06 07 
17f18     0A 0C 0C 0D 
17f1c     0D 0C 0A 0A 
17f20     0C 0C 0D 0F | 	byte	$03, $04, $06, $07, $0a, $0c, $0c, $0d, $0d, $0c, $0a, $0a, $0c, $0c, $0d, $0f
17f24     0F 0F 0D 0C 
17f28     0D 0F 0D 0F 
17f2c     0F 0F 0F 10 
17f30     10 10 0F 0F | 	byte	$0f, $0f, $0d, $0c, $0d, $0f, $0d, $0f, $0f, $0f, $0f, $10, $10, $10, $0f, $0f
17f34     0D 0C 0D 0D 
17f38     0D 0F 0D 0C 
17f3c     0C 0C 0C 0F 
17f40     12 13 13 12 | 	byte	$0d, $0c, $0d, $0d, $0d, $0f, $0d, $0c, $0c, $0c, $0c, $0f, $12, $13, $13, $12
17f44     12 12 10 10 
17f48     10 12 13 13 
17f4c     13 15 16 18 
17f50     18 18 18 18 | 	byte	$12, $12, $10, $10, $10, $12, $13, $13, $13, $15, $16, $18, $18, $18, $18, $18
17f54     19 19 18 13 
17f58     13 12 10 10 
17f5c     0F 0F 0F 0F 
17f60     0F 0F 0F 0F | 	byte	$19, $19, $18, $13, $13, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
17f64     0D 0C 0D 0D 
17f68     0F 10 12 10 
17f6c     10 0F 0F 0F 
17f70     0F 0F 10 10 | 	byte	$0d, $0c, $0d, $0d, $0f, $10, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $10, $10
17f74     10 10 12 12 
17f78     10 12 12 10 
17f7c     12 12 10 0F 
17f80     0D 0C 09 09 | 	byte	$10, $10, $12, $12, $10, $12, $12, $10, $12, $12, $10, $0f, $0d, $0c, $09, $09
17f84     0A 0C 0D 0F 
17f88     10 12 12 12 
17f8c     0F 0D 0C 0A 
17f90     0C 0C 0C 0C | 	byte	$0a, $0c, $0d, $0f, $10, $12, $12, $12, $0f, $0d, $0c, $0a, $0c, $0c, $0c, $0c
17f94     0C 09 09 09 
17f98     09 09 09 09 
17f9c     09 0A 0A 0C 
17fa0     0C 0C 0C 0C | 	byte	$0c, $09, $09, $09, $09, $09, $09, $09, $09, $0a, $0a, $0c, $0c, $0c, $0c, $0c
17fa4     0D 0D 0D 0C 
17fa8     0C 0A 09 09 
17fac     09 09 09 09 
17fb0     09 09 09 09 | 	byte	$0d, $0d, $0d, $0c, $0c, $0a, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
17fb4     07 06 03 03 
17fb8     03 06 06 07 
17fbc     07 06 06 06 
17fc0     06 06 04 03 | 	byte	$07, $06, $03, $03, $03, $06, $06, $07, $07, $06, $06, $06, $06, $06, $04, $03
17fc4     03 01 01 00 
17fc8     01 01 01 03 
17fcc     03 06 09 09 
17fd0     09 09 06 04 | 	byte	$03, $01, $01, $00, $01, $01, $01, $03, $03, $06, $09, $09, $09, $09, $06, $04
17fd4     03 01 01 01 
17fd8     03 03 03 01 
17fdc     01 01 01 00 
17fe0     00 01 01 01 | 	byte	$03, $01, $01, $01, $03, $03, $03, $01, $01, $01, $01, $00, $00, $01, $01, $01
17fe4     01 03 01 00 
17fe8     00 FD FD FC 
17fec     FC FC FC FA 
17ff0     F9 FA FC FD | 	byte	$01, $03, $01, $00, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fa, $f9, $fa, $fc, $fd
17ff4     FF 01 03 03 
17ff8     04 04 04 03 
17ffc     00 FD FC FC 
18000     FC FC FD FD | 	byte	$ff, $01, $03, $03, $04, $04, $04, $03, $00, $fd, $fc, $fc, $fc, $fc, $fd, $fd
18004     FD FD FD FC 
18008     FC FA FA F9 
1800c     F7 F9 FA FC 
18010     FD FD FC FC | 	byte	$fd, $fd, $fd, $fc, $fc, $fa, $fa, $f9, $f7, $f9, $fa, $fc, $fd, $fd, $fc, $fc
18014     FA FA F9 FA 
18018     FA FA FC FC 
1801c     FC FD FD FD 
18020     FC FC FA FA | 	byte	$fa, $fa, $f9, $fa, $fa, $fa, $fc, $fc, $fc, $fd, $fd, $fd, $fc, $fc, $fa, $fa
18024     F7 F6 F6 F6 
18028     F6 F7 F9 FA 
1802c     FC FD FD FF 
18030     FF 00 00 00 | 	byte	$f7, $f6, $f6, $f6, $f6, $f7, $f9, $fa, $fc, $fd, $fd, $ff, $ff, $00, $00, $00
18034     FF FF 00 00 
18038     00 00 00 FF 
1803c     FC FA FA F9 
18040     F7 F7 F9 F7 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $ff, $fc, $fa, $fa, $f9, $f7, $f7, $f9, $f7
18044     F7 F7 F9 F9 
18048     F9 FA FA F9 
1804c     F9 F9 F7 F7 
18050     F7 F7 F9 F9 | 	byte	$f7, $f7, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9, $f9
18054     FA FA FA FA 
18058     FA FA       | 	byte	$fa[6]
1805a     F9 F9 F7 F7 
1805e     F7 F9 F9 FA 
18062     FA FA F9 F9 
18066     F9 FA FC FC | 	byte	$f9, $f9, $f7, $f7, $f7, $f9, $f9, $fa, $fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc
1806a     FC FC FC FD 
1806e     FC FD FD FC 
18072     FC FC FD FD 
18076     FC FA F9 F7 | 	byte	$fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7
1807a     F7 F9 FA FC 
1807e     FC FC FC FC 
18082     FC FC FC FC 
18086     FA FA F9 F9 | 	byte	$f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9
1808a     F9 F9 F9 F7 
1808e     F7 F7 F7 F6 
18092     F7 F7 F7 F7 
18096     F7 F7 F7 F7 | 	byte	$f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7
1809a     F7 F9 F9 F9 
1809e     F9 F9 F9 F9 
180a2     F9 F9 F9 F7 
180a6     F7 F7 F7 F9 | 	byte	$f7, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9
180aa     FA FC FC FA 
180ae     FC FC FA FA 
180b2     FA FA FA FA 
180b6     F9 F7 F7 F7 | 	byte	$fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fa, $f9, $f7, $f7, $f7
180ba     F7 F9 F9 F9 
180be     F9 F7 F7 F6 
180c2     F7 F9 FC 00 
180c6     F7 F9 F9 FA | 	byte	$f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $fc, $00, $f7, $f9, $f9, $fa
180ca     FA FA F9 F9 
180ce     F9 FA FC FC 
180d2     FC FC FC FD 
180d6     FC FD FD FC | 	byte	$fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc
180da     FC FC FD FD 
180de     FC FA F9 F7 
180e2     F7 F9 FA FC 
180e6     FC FC FC FC | 	byte	$fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7, $f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc
180ea     FC FC FC FC 
180ee     FA FA F9 F9 
180f2     F9 F9 F9 F7 
180f6     F7 F7 F7 F6 | 	byte	$fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6
180fa     F7 F7 F7 F7 
180fe     F7 F7 F7 F7 
18102     F7          | 	byte	$f7[9]
18103     F9 F9 F9 F9 
18107     F9 F9 F9 F9 
1810b     F9 F9       | 	byte	$f9[10]
1810d     F7 F7 F7 F7 
18111     F9 FA FC FC 
18115     FA FC FC FA 
18119     FA FA FA FA | 	byte	$f7, $f7, $f7, $f7, $f9, $fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa
1811d     FA F9 F7 F7 
18121     F7 F7 F9 F9 
18125     F9 F9 F7 F7 
18129     F6 F7 F9 00 | 	byte	$fa, $f9, $f7, $f7, $f7, $f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $00
1812d     00 05 05 08 
18131     08 09 0A 0B 
18135     06 09 09 09 
18139     09 09 0C 0B | 	byte	$00, $05, $05, $08, $08, $09, $0a, $0b, $06, $09, $09, $09, $09, $09, $0c, $0b
1813d     0B 0A 0F 17 
18141     04 10 FF 08 
18145     F8 F3 08 07 
18149     F5 FF 10 10 | 	byte	$0b, $0a, $0f, $17, $04, $10, $ff, $08, $f8, $f3, $08, $07, $f5, $ff, $10, $10
1814d     1D 24 00 FF 
18151     14 20 0F 12 
18155     10 20 01 10 
18159     F0 EE E1 D0 | 	byte	$1d, $24, $00, $ff, $14, $20, $0f, $12, $10, $20, $01, $10, $f0, $ee, $e1, $d0
1815d     D8 F7 D7 F0 
18161     FF CB F7 F7 
18165     F2 FF EB E4 
18169     0A 0F 20 17 | 	byte	$d8, $f7, $d7, $f0, $ff, $cb, $f7, $f7, $f2, $ff, $eb, $e4, $0a, $0f, $20, $17
1816d     18 32 27 17 
18171     1F 30 40 4C 
18175     24 3C 27 23 
18179     2C 19 1D 0F | 	byte	$18, $32, $27, $17, $1f, $30, $40, $4c, $24, $3c, $27, $23, $2c, $19, $1d, $0f
1817d     08 28 E7 00 
18181     ED E7 F8 F0 
18185     FD F4 D7 E8 
18189     DF CF DC D5 | 	byte	$08, $28, $e7, $00, $ed, $e7, $f8, $f0, $fd, $f4, $d7, $e8, $df, $cf, $dc, $d5
1818d     D7 EC 1B 3B 
18191     20 25 16 13 
18195     27 30 40 37 
18199     30 37 30 24 | 	byte	$d7, $ec, $1b, $3b, $20, $25, $16, $13, $27, $30, $40, $37, $30, $37, $30, $24
1819d     19 E0 F5 EF 
181a1     E1 FC F0 F2 
181a5     E0 D7 D2 C8 
181a9     CB B5 D6 D5 | 	byte	$19, $e0, $f5, $ef, $e1, $fc, $f0, $f2, $e0, $d7, $d2, $c8, $cb, $b5, $d6, $d5
181ad     EF FB FA 2B 
181b1     FD 0F 1F 31 
181b5     3D 34 44 37 
181b9     20 33 1B 2F | 	byte	$ef, $fb, $fa, $2b, $fd, $0f, $1f, $31, $3d, $34, $44, $37, $20, $33, $1b, $2f
181bd     38 22 3A 25 
181c1     31 2A 00 0C 
181c5     00 0F 1B 38 
181c9     23 08 FF F9 | 	byte	$38, $22, $3a, $25, $31, $2a, $00, $0c, $00, $0f, $1b, $38, $23, $08, $ff, $f9
181cd     00 EF F4 F2 
181d1     F7 0A 17 14 
181d5     10 EF ED F2 
181d9     F3 09 11 1B | 	byte	$00, $ef, $f4, $f2, $f7, $0a, $17, $14, $10, $ef, $ed, $f2, $f3, $09, $11, $1b
181dd     10 1F 1C F0 
181e1     F4 DB DF D9 
181e5     EE 00 E8 E2 
181e9     DD D8 D1 C5 | 	byte	$10, $1f, $1c, $f0, $f4, $db, $df, $d9, $ee, $00, $e8, $e2, $dd, $d8, $d1, $c5
181ed     D4 BF DD E8 
181f1     FF 04 18 0E 
181f5     0D 22 2D 34 
181f9     4F 3D 45 30 | 	byte	$d4, $bf, $dd, $e8, $ff, $04, $18, $0e, $0d, $22, $2d, $34, $4f, $3d, $45, $30
181fd     1B 36 2A 1C 
18201     22 13 2B 28 
18205     0E 10 FF E6 
18209     05 09 28 20 | 	byte	$1b, $36, $2a, $1c, $22, $13, $2b, $28, $0e, $10, $ff, $e6, $05, $09, $28, $20
1820d     0C 1B 00 02 
18211     00 FA FB 0B 
18215     17 35 34 27 
18219     1A FE 0F 08 | 	byte	$0c, $1b, $00, $02, $00, $fa, $fb, $0b, $17, $35, $34, $27, $1a, $fe, $0f, $08
1821d     0B 1A 11 23 
18221     20 20 02 FA 
18225     E1 D8 E6 E4 
18229     FA F7 E7 F0 | 	byte	$0b, $1a, $11, $23, $20, $20, $02, $fa, $e1, $d8, $e6, $e4, $fa, $f7, $e7, $f0
1822d     CE D2 C8 C5 
18231     CB CB CF EC 
18235     FF 02 F4 05 
18239     F5 11 20 27 | 	byte	$ce, $d2, $c8, $c5, $cb, $cb, $cf, $ec, $ff, $02, $f4, $05, $f5, $11, $20, $27
1823d     4A 28 25 26 
18241     10 2F 1D 14 
18245     1F 20 20 20 
18249     0C 02 EA E3 | 	byte	$4a, $28, $25, $26, $10, $2f, $1d, $14, $1f, $20, $20, $20, $0c, $02, $ea, $e3
1824d     14 17 0F 18 
18251     0B F8 04 FC 
18255     04 FD 07 2A 
18259     2D 46 40 26 | 	byte	$14, $17, $0f, $18, $0b, $f8, $04, $fc, $04, $fd, $07, $2a, $2d, $46, $40, $26
1825d     1C 08 14 1A 
18261     1B 1B 20 1C 
18265     10 10 F4 E6 
18269     D0 D7 F1 E2 | 	byte	$1c, $08, $14, $1a, $1b, $1b, $20, $1c, $10, $10, $f4, $e6, $d0, $d7, $f1, $e2
1826d     F2 F3 E9 E8 
18271     D5 CE D8 D7 
18275     DB DD F7 05 
18279     15 0E 0E 14 | 	byte	$f2, $f3, $e9, $e8, $d5, $ce, $d8, $d7, $db, $dd, $f7, $05, $15, $0e, $0e, $14
1827d     04 1B 37 36 
18281     39 26 19 23 
18285     1A 15 1F 0B 
18289     20 16 0D 1A | 	byte	$04, $1b, $37, $36, $39, $26, $19, $23, $1a, $15, $1f, $0b, $20, $16, $0d, $1a
1828d     F8 E0 E6 F1 
18291     FD 0D 09 02 
18295     EC F5 00 EA 
18299     F3 F8 0B 27 | 	byte	$f8, $e0, $e6, $f1, $fd, $0d, $09, $02, $ec, $f5, $00, $ea, $f3, $f8, $0b, $27
1829d     37 3B 2D 20 
182a1     1C 17 20 27 
182a5     31 29 2F 20 
182a9     14 0C EA E1 | 	byte	$37, $3b, $2d, $20, $1c, $17, $20, $27, $31, $29, $2f, $20, $14, $0c, $ea, $e1
182ad     E3 DF EF E8 
182b1     F3 F3 E0 E0 
182b5     CF D7 D1 DD 
182b9     E8 F3 14 0C | 	byte	$e3, $df, $ef, $e8, $f3, $f3, $e0, $e0, $cf, $d7, $d1, $dd, $e8, $f3, $14, $0c
182bd     1D 21 13 1B 
182c1     1B 32 43 40 
182c5     2E 2F 20 26 
182c9     20 15 20 18 | 	byte	$1d, $21, $13, $1b, $1b, $32, $43, $40, $2e, $2f, $20, $26, $20, $15, $20, $18
182cd     14 23 19 01 
182d1     F0 EA F3 F5 
182d5     07 12 F6 F3 
182d9     F1 EA EB E9 | 	byte	$14, $23, $19, $01, $f0, $ea, $f3, $f5, $07, $12, $f6, $f3, $f1, $ea, $eb, $e9
182dd     EE F1 0D 26 
182e1     2A 20 13 10 
182e5     03 0C 1A 1B 
182e9     25 20 19 14 | 	byte	$ee, $f1, $0d, $26, $2a, $20, $13, $10, $03, $0c, $1a, $1b, $25, $20, $19, $14
182ed     00 F0 E4 DF 
182f1     E3 DD E9 F1 
182f5     F3 E4 DF D8 
182f9     D4 DA D6 E5 | 	byte	$00, $f0, $e4, $df, $e3, $dd, $e9, $f1, $f3, $e4, $df, $d8, $d4, $da, $d6, $e5
182fd     F9 03 13 1B 
18301     1D 24 1C 1F 
18305     3B 3B 48 40 
18309     2C 2C 25 1E | 	byte	$f9, $03, $13, $1b, $1d, $24, $1c, $1f, $3b, $3b, $48, $40, $2c, $2c, $25, $1e
1830d     28 21 14 1E 
18311     1D 21 0A F9 
18315     F6 EF FD 13 
18319     09 08 FD F9 | 	byte	$28, $21, $14, $1e, $1d, $21, $0a, $f9, $f6, $ef, $fd, $13, $09, $08, $fd, $f9
1831d     F4 F5 F0 F2 
18321     F5 0B 28 26 
18325     23 20 05 06 
18329     07 0E 1E 12 | 	byte	$f4, $f5, $f0, $f2, $f5, $0b, $28, $26, $23, $20, $05, $06, $07, $0e, $1e, $12
1832d     1B 12 09 FC 
18331     E3 E4 D9 D9 
18335     CE DD E2 DF 
18339     E6 D5 D0 CE | 	byte	$1b, $12, $09, $fc, $e3, $e4, $d9, $d9, $ce, $dd, $e2, $df, $e6, $d5, $d0, $ce
1833d     C8 CF DC E7 
18341     FC 03 0E 20 
18345     14 17 21 29 
18349     3F 44 40 3E | 	byte	$c8, $cf, $dc, $e7, $fc, $03, $0e, $20, $14, $17, $21, $29, $3f, $44, $40, $3e
1834d     30 23 31 28 
18351     2C 22 29 30 
18355     21 1A 10 F6 
18359     FA 03 14 14 | 	byte	$30, $23, $31, $28, $2c, $22, $29, $30, $21, $1a, $10, $f6, $fa, $03, $14, $14
1835d     11 05 FD F8 
18361     FA F8 EC F5 
18365     13 20 2B 2C 
18369     20 14 05 0B | 	byte	$11, $05, $fd, $f8, $fa, $f8, $ec, $f5, $13, $20, $2b, $2c, $20, $14, $05, $0b
1836d     14 1B 20 20 
18371     1E 10 02 F0 
18375     EE E4 D8 DD 
18379     DF E2 EA E6 | 	byte	$14, $1b, $20, $20, $1e, $10, $02, $f0, $ee, $e4, $d8, $dd, $df, $e2, $ea, $e6
1837d     DD DC CD CE 
18381     CD D7 EE ED 
18385     FA 0C 0D 10 
18389     0C 0D 1E 29 | 	byte	$dd, $dc, $cd, $ce, $cd, $d7, $ee, $ed, $fa, $0c, $0d, $10, $0c, $0d, $1e, $29
1838d     31 39 2C 21 
18391     1A 1D 20 18 
18395     1B 24 20 21 
18399     1A 09 FA F3 | 	byte	$31, $39, $2c, $21, $1a, $1d, $20, $18, $1b, $24, $20, $21, $1a, $09, $fa, $f3
1839d     03 11 1A 18 
183a1     10 06 FF 07 
183a5     F6 F3 03 12 
183a9     28 2D 36 30 | 	byte	$03, $11, $1a, $18, $10, $06, $ff, $07, $f6, $f3, $03, $12, $28, $2d, $36, $30
183ad     1E 14 15 1A 
183b1     1E 27 26 25 
183b5     18 04 FD F1 
183b9     E4 DF DD D9 | 	byte	$1e, $14, $15, $1a, $1e, $27, $26, $25, $18, $04, $fd, $f1, $e4, $df, $dd, $d9
183bd     E6 E6 EA E5 
183c1     DA D4 C7 CF 
183c5     DF EA EE FF 
183c9     05 13 12 0D | 	byte	$e6, $e6, $ea, $e5, $da, $d4, $c7, $cf, $df, $ea, $ee, $ff, $05, $13, $12, $0d
183cd     14 17 27 38 
183d1     39 33 1E 1C 
183d5     20 18 19 20 
183d9     19 21 20 18 | 	byte	$14, $17, $27, $38, $39, $33, $1e, $1c, $20, $18, $19, $20, $19, $21, $20, $18
183dd     0A F6 F2 FB 
183e1     06 0E 14 04 
183e5     FC FC F4 ED 
183e9     EA F4 03 12 | 	byte	$0a, $f6, $f2, $fb, $06, $0e, $14, $04, $fc, $fc, $f4, $ed, $ea, $f4, $03, $12
183ed     24 2E 26 18 
183f1     14 0F 16 1B 
183f5     21 2C 2C 18 
183f9     10 04 F7 F1 | 	byte	$24, $2e, $26, $18, $14, $0f, $16, $1b, $21, $2c, $2c, $18, $10, $04, $f7, $f1
183fd     E5 E5 E5 EB 
18401     F6 F2 F0 EC 
18405     DA CF D9 DF 
18409     EF F5 FD 0B | 	byte	$e5, $e5, $e5, $eb, $f6, $f2, $f0, $ec, $da, $cf, $d9, $df, $ef, $f5, $fd, $0b
1840d     10 12 14 10 
18411     17 23 36 3E 
18415     2A 22 20 15 
18419     17 15 17 17 | 	byte	$10, $12, $14, $10, $17, $23, $36, $3e, $2a, $22, $20, $15, $17, $15, $17, $17
1841d     1C 1D 18 08 
18421     F5 F4 F3 FF 
18425     0E 0E 08 00 
18429     FE F4 EB EC | 	byte	$1c, $1d, $18, $08, $f5, $f4, $f3, $ff, $0e, $0e, $08, $00, $fe, $f4, $eb, $ec
1842d     F4 FD 0E 25 
18431     2A 26 1B 10 
18435     0C 11 11 21 
18439     28 20 1B 08 | 	byte	$f4, $fd, $0e, $25, $2a, $26, $1b, $10, $0c, $11, $11, $21, $28, $20, $1b, $08
1843d     FE F3 E8 E4 
18441     DA D9 E2 E5 
18445     E9 F1 E2 D4 
18449     CD D1 DE E7 | 	byte	$fe, $f3, $e8, $e4, $da, $d9, $e2, $e5, $e9, $f1, $e2, $d4, $cd, $d1, $de, $e7
1844d     F3 FF 08 13 
18451     17 19 18 18 
18455     2B 42 40 3C 
18459     33 29 23 24 | 	byte	$f3, $ff, $08, $13, $17, $19, $18, $18, $2b, $42, $40, $3c, $33, $29, $23, $24
1845d     1F 21 21 26 
18461     29 20 10 00 
18465     F4 F6 FF 0D 
18469     0A 08 04 FD | 	byte	$1f, $21, $21, $26, $29, $20, $10, $00, $f4, $f6, $ff, $0d, $0a, $08, $04, $fd
1846d     F0 E8 EA EA 
18471     F5 07 1B 25 
18475     27 1A 13 10 
18479     09 14 20 25 | 	byte	$f0, $e8, $ea, $ea, $f5, $07, $1b, $25, $27, $1a, $13, $10, $09, $14, $20, $25
1847d     26 1C 13 04 
18481     F5 EF E4 DF 
18485     DF DC E3 ED 
18489     ED E8 D4 CA | 	byte	$26, $1c, $13, $04, $f5, $ef, $e4, $df, $df, $dc, $e3, $ed, $ed, $e8, $d4, $ca
1848d     CF D6 E1 EC 
18491     F6 02 09 13 
18495     14 0A 13 23 
18499     32 37 38 2D | 	byte	$cf, $d6, $e1, $ec, $f6, $02, $09, $13, $14, $0a, $13, $23, $32, $37, $38, $2d
1849d     29 20 1D 1E 
184a1     1A 1F 26 29 
184a5     24 18 09 FA 
184a9     FA 07 10 10 | 	byte	$29, $20, $1d, $1e, $1a, $1f, $26, $29, $24, $18, $09, $fa, $fa, $07, $10, $10
184ad     14 14 08 FC 
184b1     F6 F4 F1 FD 
184b5     0B 1F 2D 2A 
184b9     28 20 10 10 | 	byte	$14, $14, $08, $fc, $f6, $f4, $f1, $fd, $0b, $1f, $2d, $2a, $28, $20, $10, $10
184bd     14 20 27 25 
184c1     25 14 04 FA 
184c5     E9 E0 DC D5 
184c9     D5 D8 E4 EB | 	byte	$14, $20, $27, $25, $25, $14, $04, $fa, $e9, $e0, $dc, $d5, $d5, $d8, $e4, $eb
184cd     E0 D0 C8 C6 
184d1     D3 D9 E9 F2 
184d5     F9 07 14 10 
184d9     0A 16 21 2F | 	byte	$e0, $d0, $c8, $c6, $d3, $d9, $e9, $f2, $f9, $07, $14, $10, $0a, $16, $21, $2f
184dd     38 36 34 28 
184e1     22 20 18 1A 
184e5     1C 23 27 23 
184e9     17 08 F6 F8 | 	byte	$38, $36, $34, $28, $22, $20, $18, $1a, $1c, $23, $27, $23, $17, $08, $f6, $f8
184ed     FF 05 0A 11 
184f1     10 01 FC F5 
184f5     ED EE F1 05 
184f9     19 25 2C 28 | 	byte	$ff, $05, $0a, $11, $10, $01, $fc, $f5, $ed, $ee, $f1, $05, $19, $25, $2c, $28
184fd     20 14 12 1B 
18501     23 2B 33 2C 
18505     20 15 04 F9 
18509     ED E7 E2 D9 | 	byte	$20, $14, $12, $1b, $23, $2b, $33, $2c, $20, $15, $04, $f9, $ed, $e7, $e2, $d9
1850d     DF EF F0 EA 
18511     D8 D0 CD D2 
18515     DB E8 ED F5 
18519     06 0A 07 06 | 	byte	$df, $ef, $f0, $ea, $d8, $d0, $cd, $d2, $db, $e8, $ed, $f5, $06, $0a, $07, $06
1851d     09 19 21 2D 
18521     32 2B 23 1B 
18525     12 10 0C 14 
18529     1C 1F 21 1A | 	byte	$09, $19, $21, $2d, $32, $2b, $23, $1b, $12, $10, $0c, $14, $1c, $1f, $21, $1a
1852d     06 FA FB FE 
18531     03 0F 15 11 
18535     0D 02 FB F4 
18539     EC F6 04 13 | 	byte	$06, $fa, $fb, $fe, $03, $0f, $15, $11, $0d, $02, $fb, $f4, $ec, $f6, $04, $13
1853d     24 2B 2C 22 
18541     14 14 10 1A 
18545     26 2D 2A 20 
18549     11 05 F2 EC | 	byte	$24, $2b, $2c, $22, $14, $14, $10, $1a, $26, $2d, $2a, $20, $11, $05, $f2, $ec
1854d     E6 DD D8 DD 
18551     EB F2 E8 E0 
18555     D6 CD D5 E2 
18559     E9 F2 FF 0E | 	byte	$e6, $dd, $d8, $dd, $eb, $f2, $e8, $e0, $d6, $cd, $d5, $e2, $e9, $f2, $ff, $0e
1855d     16 10 10 13 
18561     1D 29 35 38 
18565     34 2C 25 1C 
18569     14 11 15 1A | 	byte	$16, $10, $10, $13, $1d, $29, $35, $38, $34, $2c, $25, $1c, $14, $11, $15, $1a
1856d     22 24 18 05 
18571     FC F6 F4 FB 
18575     07 0D 0E 06 
18579     00 F8 ED E8 | 	byte	$22, $24, $18, $05, $fc, $f6, $f4, $fb, $07, $0d, $0e, $06, $00, $f8, $ed, $e8
1857d     EB F7 09 19 
18581     29 28 1E 17 
18585     10 10 19 22 
18589     2D 2A 23 18 | 	byte	$eb, $f7, $09, $19, $29, $28, $1e, $17, $10, $10, $19, $22, $2d, $2a, $23, $18
1858d     08 00 F3 E8 
18591     E0 D5 DF ED 
18595     EE EC E1 D6 
18599     CF D7 DC E3 | 	byte	$08, $00, $f3, $e8, $e0, $d5, $df, $ed, $ee, $ec, $e1, $d6, $cf, $d7, $dc, $e3
1859d     ED FB 08 10 
185a1     0E 0E 0D 1B 
185a5     27 31 39 34 
185a9     30 28 20 18 | 	byte	$ed, $fb, $08, $10, $0e, $0e, $0d, $1b, $27, $31, $39, $34, $30, $28, $20, $18
185ad     13 17 1B 27 
185b1     28 1E 14 06 
185b5     FE FB FF 0C 
185b9     13 12 0E 08 | 	byte	$13, $17, $1b, $27, $28, $1e, $14, $06, $fe, $fb, $ff, $0c, $13, $12, $0e, $08
185bd     01 F4 EF F1 
185c1     F6 05 1B 27 
185c5     28 24 18 11 
185c9     0C 15 22 29 | 	byte	$01, $f4, $ef, $f1, $f6, $05, $1b, $27, $28, $24, $18, $11, $0c, $15, $22, $29
185cd     2A 26 18 0A 
185d1     FD F3 E8 D4 
185d5     CE D7 DF E3 
185d9     E5 DC CD CA | 	byte	$2a, $26, $18, $0a, $fd, $f3, $e8, $d4, $ce, $d7, $df, $e3, $e5, $dc, $cd, $ca
185dd     CD D3 D8 E5 
185e1     F7 02 0E 0E 
185e5     0E 0F 15 27 
185e9     32 37 3A 33 | 	byte	$cd, $d3, $d8, $e5, $f7, $02, $0e, $0e, $0e, $0f, $15, $27, $32, $37, $3a, $33
185ed     2C 20 1B 14 
185f1     13 1D 25 26 
185f5     22 18 0D 00 
185f9     FC FF 0C 12 | 	byte	$2c, $20, $1b, $14, $13, $1d, $25, $26, $22, $18, $0d, $00, $fc, $ff, $0c, $12
185fd     12 11 0C 00 
18601     F5 F2 EC EF 
18605     FF 11 20 25 
18609     24 1C 10 0D | 	byte	$12, $11, $0c, $00, $f5, $f2, $ec, $ef, $ff, $11, $20, $25, $24, $1c, $10, $0d
1860d     17 22 2B 33 
18611     2A 22 15 0C 
18615     06 F0 DD DB 
18619     DC E4 ED E8 | 	byte	$17, $22, $2b, $33, $2a, $22, $15, $0c, $06, $f0, $dd, $db, $dc, $e4, $ed, $e8
1861d     E0 D1 CD D1 
18621     D0 D5 DF EB 
18625     FB 05 0A 06 
18629     07 0F 19 26 | 	byte	$e0, $d1, $cd, $d1, $d0, $d5, $df, $eb, $fb, $05, $0a, $06, $07, $0f, $19, $26
1862d     2D 2E 2C 21 
18631     1C 10 07 0D 
18635     13 19 1C 1C 
18639     16 0A 03 FC | 	byte	$2d, $2e, $2c, $21, $1c, $10, $07, $0d, $13, $19, $1c, $1c, $16, $0a, $03, $fc
1863d     FF 0E 15 1A 
18641     1D 14 0D 05 
18645     FC F8 FB 06 
18649     19 26 2E 30 | 	byte	$ff, $0e, $15, $1a, $1d, $14, $0d, $05, $fc, $f8, $fb, $06, $19, $26, $2e, $30
1864d     20 16 11 12 
18651     20 29 2D 2A 
18655     1C 13 10 00 
18659     EE DE D5 D5 | 	byte	$20, $16, $11, $12, $20, $29, $2d, $2a, $1c, $13, $10, $00, $ee, $de, $d5, $d5
1865d     DE E5 E8 E0 
18661     D5 D0 D1 D4 
18665     D4 DF EE FE 
18669     0A 0C 0D 0E | 	byte	$de, $e5, $e8, $e0, $d5, $d0, $d1, $d4, $d4, $df, $ee, $fe, $0a, $0c, $0d, $0e
1866d     14 20 27 32 
18671     35 31 2C 20 
18675     15 0C 0C 11 
18679     12 14 12 0C | 	byte	$14, $20, $27, $32, $35, $31, $2c, $20, $15, $0c, $0c, $11, $12, $14, $12, $0c
1867d     03 F4 EC F3 
18681     F9 01 0C 0F 
18685     0C 06 00 F6 
18689     F2 F7 06 13 | 	byte	$03, $f4, $ec, $f3, $f9, $01, $0c, $0f, $0c, $06, $00, $f6, $f2, $f7, $06, $13
1868d     1F 30 34 2C 
18691     20 15 1A 23 
18695     2E 36 2D 25 
18699     1E 16 08 F5 | 	byte	$1f, $30, $34, $2c, $20, $15, $1a, $23, $2e, $36, $2d, $25, $1e, $16, $08, $f5
1869d     E7 DC D8 E3 
186a1     E8 EB E3 DA 
186a5     D6 D4 D2 D7 
186a9     DD EB F7 03 | 	byte	$e7, $dc, $d8, $e3, $e8, $eb, $e3, $da, $d6, $d4, $d2, $d7, $dd, $eb, $f7, $03
186ad     0B 07 0B 10 
186b1     16 26 2E 33 
186b5     32 2D 22 14 
186b9     10 10 0F 14 | 	byte	$0b, $07, $0b, $10, $16, $26, $2e, $33, $32, $2d, $22, $14, $10, $10, $0f, $14
186bd     14 13 10 08 
186c1     FA F4 F4 F7 
186c5     03 0F 12 10 
186c9     0A 04 F8 F1 | 	byte	$14, $13, $10, $08, $fa, $f4, $f4, $f7, $03, $0f, $12, $10, $0a, $04, $f8, $f1
186cd     F6 FD 09 1B 
186d1     2B 32 2C 20 
186d5     14 10 1A 2B 
186d9     31 2D 25 20 | 	byte	$f6, $fd, $09, $1b, $2b, $32, $2c, $20, $14, $10, $1a, $2b, $31, $2d, $25, $20
186dd     18 0A 00 E8 
186e1     D9 D4 DE E7 
186e5     E6 E2 E0 D5 
186e9     D4 D1 D6 DC | 	byte	$18, $0a, $00, $e8, $d9, $d4, $de, $e7, $e6, $e2, $e0, $d5, $d4, $d1, $d6, $dc
186ed     EA FA 06 07 
186f1     0D 0E 0E 19 
186f5     27 2D 35 37 
186f9     34 24 18 16 | 	byte	$ea, $fa, $06, $07, $0d, $0e, $0e, $19, $27, $2d, $35, $37, $34, $24, $18, $16
186fd     11 14 19 1A 
18701     1D 16 0C 04 
18705     F9 F8 F8 FF 
18709     0A 10 10 0C | 	byte	$11, $14, $19, $1a, $1d, $16, $0c, $04, $f9, $f8, $f8, $ff, $0a, $10, $10, $0c
1870d     00 F5 F0 F2 
18711     F6 FF 0F 23 
18715     2D 28 20 10 
18719     0D 18 26 32 | 	byte	$00, $f5, $f0, $f2, $f6, $ff, $0f, $23, $2d, $28, $20, $10, $0d, $18, $26, $32
1871d     2F 2B 24 1C 
18721     14 01 F2 E1 
18725     D9 E0 E5 E9 
18729     E5 E0 D8 CF | 	byte	$2f, $2b, $24, $1c, $14, $01, $f2, $e1, $d9, $e0, $e5, $e9, $e5, $e0, $d8, $cf
1872d     CE D3 DA E3 
18731     EF FE FF 0B 
18735     0B 0D 13 1F 
18739     27 32 37 33 | 	byte	$ce, $d3, $da, $e3, $ef, $fe, $ff, $0b, $0b, $0d, $13, $1f, $27, $32, $37, $33
1873d     26 19 0D 0A 
18741     0C 11 17 17 
18745     14 0D 08 01 
18749     F8 FB 06 0D | 	byte	$26, $19, $0d, $0a, $0c, $11, $17, $17, $14, $0d, $08, $01, $f8, $fb, $06, $0d
1874d     17 20 19 10 
18751     02 FE FD FD 
18755     03 17 27 2D 
18759     30 24 12 09 | 	byte	$17, $20, $19, $10, $02, $fe, $fd, $fd, $03, $17, $27, $2d, $30, $24, $12, $09
1875d     12 22 2C 2E 
18761     29 20 19 16 
18765     05 F0 E0 D7 
18769     D7 E1 E3 E4 | 	byte	$12, $22, $2c, $2e, $29, $20, $19, $16, $05, $f0, $e0, $d7, $d7, $e1, $e3, $e4
1876d     D9 D3 CB CB 
18771     CD D4 E3 EF 
18775     FB 08 0D 11 
18779     13 1E 25 2C | 	byte	$d9, $d3, $cb, $cb, $cd, $d4, $e3, $ef, $fb, $08, $0d, $11, $13, $1e, $25, $2c
1877d     3D 40 40 00 
18781     00 FF FF FE 
18785     FF FF 00 00 
18789     00 01 01 03 | 	byte	$3d, $40, $40, $00, $00, $ff, $ff, $fe, $ff, $ff, $00, $00, $00, $01, $01, $03
1878d     03 05 05 05 
18791     06 09 09 07 
18795     05 02 03 06 
18799     0B 11 13 10 | 	byte	$03, $05, $05, $05, $06, $09, $09, $07, $05, $02, $03, $06, $0b, $11, $13, $10
1879d     0E 06 FD F4 
187a1     F3 F0 F0 F2 
187a5     FA FF FF FE 
187a9     FF FF FF FF | 	byte	$0e, $06, $fd, $f4, $f3, $f0, $f0, $f2, $fa, $ff, $ff, $fe, $ff, $ff, $ff, $ff
187ad     FE F6 F0 F0 
187b1     EB EC E4 DE 
187b5     DD D5 D4 C9 
187b9     CB C9 D4 DD | 	byte	$fe, $f6, $f0, $f0, $eb, $ec, $e4, $de, $dd, $d5, $d4, $c9, $cb, $c9, $d4, $dd
187bd     E1 DD DC DD 
187c1     E0 F5 07 17 
187c5     19 18 16 FC 
187c9     EF E2 E5 E4 | 	byte	$e1, $dd, $dc, $dd, $e0, $f5, $07, $17, $19, $18, $16, $fc, $ef, $e2, $e5, $e4
187cd     EE F9 FC FE 
187d1     09 F6 F2 E1 
187d5     CE C3 BE BD 
187d9     C2 CC DA EC | 	byte	$ee, $f9, $fc, $fe, $09, $f6, $f2, $e1, $ce, $c3, $be, $bd, $c2, $cc, $da, $ec
187dd     FD 00 18 1E 
187e1     2B 25 1B 0C 
187e5     03 FF FE F4 
187e9     F0 E2 E0 E6 | 	byte	$fd, $00, $18, $1e, $2b, $25, $1b, $0c, $03, $ff, $fe, $f4, $f0, $e2, $e0, $e6
187ed     F2 01 12 14 
187f1     14 02 EC D1 
187f5     CC CC CA CA 
187f9     CB CC CF C5 | 	byte	$f2, $01, $12, $14, $14, $02, $ec, $d1, $cc, $cc, $ca, $ca, $cb, $cc, $cf, $c5
187fd     BD B7 B8 BD 
18801     C8 D1 E3 EC 
18805     F7 02 08 07 
18809     07 02 F9 FD | 	byte	$bd, $b7, $b8, $bd, $c8, $d1, $e3, $ec, $f7, $02, $08, $07, $07, $02, $f9, $fd
1880d     FB FE 09 17 
18811     2B 32 38 39 
18815     36 35 36 34 
18819     31 2C 19 FF | 	byte	$fb, $fe, $09, $17, $2b, $32, $38, $39, $36, $35, $36, $34, $31, $2c, $19, $ff
1881d     EC E2 D4 DC 
18821     E0 E7 F0 F8 
18825     01 F9 F7 F2 
18829     EB E9 E9 EC | 	byte	$ec, $e2, $d4, $dc, $e0, $e7, $f0, $f8, $01, $f9, $f7, $f2, $eb, $e9, $e9, $ec
1882d     F1 FB FB 05 
18831     00 F0 E2 D5 
18835     D7 CD CE C6 
18839     C9 CA D4 D8 | 	byte	$f1, $fb, $fb, $05, $00, $f0, $e2, $d5, $d7, $cd, $ce, $c6, $c9, $ca, $d4, $d8
1883d     D8 C7 BD B8 
18841     BE D2 E8 FE 
18845     04 08 07 0C 
18849     16 24 29 2F | 	byte	$d8, $c7, $bd, $b8, $be, $d2, $e8, $fe, $04, $08, $07, $0c, $16, $24, $29, $2f
1884d     2E 29 23 0E 
18851     FE E4 DF CB 
18855     BA B9 B4 B8 
18859     C3 D2 DE E7 | 	byte	$2e, $29, $23, $0e, $fe, $e4, $df, $cb, $ba, $b9, $b4, $b8, $c3, $d2, $de, $e7
1885d     ED F2 F8 01 
18861     07 07 0F 14 
18865     1B 22 21 11 
18869     0F FF 01 0B | 	byte	$ed, $f2, $f8, $01, $07, $07, $0f, $14, $1b, $22, $21, $11, $0f, $ff, $01, $0b
1886d     0F 14 12 FD 
18871     DC C9 AF 9F 
18875     9E 9E A5 B4 
18879     C0 C4 CA CA | 	byte	$0f, $14, $12, $fd, $dc, $c9, $af, $9f, $9e, $9e, $a5, $b4, $c0, $c4, $ca, $ca
1887d     D4 D9 E2 EF 
18881     F4 FB 00 06 
18885     0B 0A 09 04 
18889     00 FE F6 F5 | 	byte	$d4, $d9, $e2, $ef, $f4, $fb, $00, $06, $0b, $0a, $09, $04, $00, $fe, $f6, $f5
1888d     F3 FD 05 17 
18891     28 29 28 23 
18895     19 20 29 37 
18899     35 36 21 0F | 	byte	$f3, $fd, $05, $17, $28, $29, $28, $23, $19, $20, $29, $37, $35, $36, $21, $0f
1889d     FD 01 01 0D 
188a1     1D 1D 24 16 
188a5     0D FA F3 DC 
188a9     C3 BA B7 BE | 	byte	$fd, $01, $01, $0d, $1d, $1d, $24, $16, $0d, $fa, $f3, $dc, $c3, $ba, $b7, $be
188ad     CD DF E8 ED 
188b1     E7 EA ED ED 
188b5     EE ED E3 DB 
188b9     DD DC D9 D9 | 	byte	$cd, $df, $e8, $ed, $e7, $ea, $ed, $ed, $ee, $ed, $e3, $db, $dd, $dc, $d9, $d9
188bd     D7 C7 C4 C5 
188c1     C7 DB E6 EA 
188c5     E6 E5 E4 EB 
188c9     F1 FD 0A 1C | 	byte	$d7, $c7, $c4, $c5, $c7, $db, $e6, $ea, $e6, $e5, $e4, $eb, $f1, $fd, $0a, $1c
188cd     2C 2F 2E 2D 
188d1     21 09 F9 E4 
188d5     DE DF E4 E6 
188d9     EE EE EE EE | 	byte	$2c, $2f, $2e, $2d, $21, $09, $f9, $e4, $de, $df, $e4, $e6, $ee, $ee, $ee, $ee
188dd     E4 E4 D9 D8 
188e1     D6 D4 DC F1 
188e5     FC 12 1D 27 
188e9     2A 29 36 3B | 	byte	$e4, $e4, $d9, $d8, $d6, $d4, $dc, $f1, $fc, $12, $1d, $27, $2a, $29, $36, $3b
188ed     37 30 08 E6 
188f1     C3 B0 A0 9F 
188f5     A3 AA B8 C5 
188f9     BC C9 C6 C7 | 	byte	$37, $30, $08, $e6, $c3, $b0, $a0, $9f, $a3, $aa, $b8, $c5, $bc, $c9, $c6, $c7
188fd     C7 C6 C9 D4 
18901     E3 01 15 27 
18905     35 38 35 30 
18909     21 1E 0B 05 | 	byte	$c7, $c6, $c9, $d4, $e3, $01, $15, $27, $35, $38, $35, $30, $21, $1e, $0b, $05
1890d     00 03 05 0A 
18911     15 08 FD F3 
18915     F3 F8 01 0C 
18919     07 05 00 06 | 	byte	$00, $03, $05, $0a, $15, $08, $fd, $f3, $f3, $f8, $01, $0c, $07, $05, $00, $06
1891d     0C 24 3A 41 
18921     4C 4A 38 2A 
18925     17 F8 E3 CE 
18929     BD B6 BA C5 | 	byte	$0c, $24, $3a, $41, $4c, $4a, $38, $2a, $17, $f8, $e3, $ce, $bd, $b6, $ba, $c5
1892d     D5 D0 D0 CF 
18931     CC CB CE CB 
18935     C4 C7 CC DF 
18939     F0 02 10 10 | 	byte	$d5, $d0, $d0, $cf, $cc, $cb, $ce, $cb, $c4, $c7, $cc, $df, $f0, $02, $10, $10
1893d     0A 04 FF FE 
18941     FE 01 00 EF 
18945     EC E7 E6 E4 
18949     E6 F2 FD 03 | 	byte	$0a, $04, $ff, $fe, $fe, $01, $00, $ef, $ec, $e7, $e6, $e4, $e6, $f2, $fd, $03
1894d     FD FD F3 ED 
18951     E7 E2 DB E6 
18955     F3 FC 11 19 
18959     17 16 0C 03 | 	byte	$fd, $fd, $f3, $ed, $e7, $e2, $db, $e6, $f3, $fc, $11, $19, $17, $16, $0c, $03
1895d     FB F3 DC CC 
18961     C4 C7 CA E1 
18965     ED 03 08 0B 
18969     0D 0F 14 1B | 	byte	$fb, $f3, $dc, $cc, $c4, $c7, $ca, $e1, $ed, $03, $08, $0b, $0d, $0f, $14, $1b
1896d     18 0C FD F0 
18971     E6 E2 E4 EE 
18975     F2 F8 EC E7 
18979     D6 D2 C3 B5 | 	byte	$18, $0c, $fd, $f0, $e6, $e2, $e4, $ee, $f2, $f8, $ec, $e7, $d6, $d2, $c3, $b5
1897d     A8 9E AD BD 
18981     D8 ED FA 0D 
18985     15 1B 2A 27 
18989     24 21 1A 1A | 	byte	$a8, $9e, $ad, $bd, $d8, $ed, $fa, $0d, $15, $1b, $2a, $27, $24, $21, $1a, $1a
1898d     1A 21 23 20 
18991     1B 12 03 F2 
18995     F1 E8 EA E3 
18999     E3 E4 F4 02 | 	byte	$1a, $21, $23, $20, $1b, $12, $03, $f2, $f1, $e8, $ea, $e3, $e3, $e4, $f4, $02
1899d     1E 33 4C 53 
189a1     51 51 4A 41 
189a5     3C 1D 09 FF 
189a9     F2 F0 EE E9 | 	byte	$1e, $33, $4c, $53, $51, $51, $4a, $41, $3c, $1d, $09, $ff, $f2, $f0, $ee, $e9
189ad     DF CF C8 BB 
189b1     BF A6 A3 9D 
189b5     94 9C A5 B5 
189b9     CB DD E9 FB | 	byte	$df, $cf, $c8, $bb, $bf, $a6, $a3, $9d, $94, $9c, $a5, $b5, $cb, $dd, $e9, $fb
189bd     FC FE 08 0E 
189c1     18 0F 0F 08 
189c5     01 03 03 08 
189c9     09 0A 02 ED | 	byte	$fc, $fe, $08, $0e, $18, $0f, $0f, $08, $01, $03, $03, $08, $09, $0a, $02, $ed
189cd     DD D4 C7 C2 
189d1     BC BF C9 D6 
189d5     ED FA 0D 1B 
189d9     2C 3A 3A 39 | 	byte	$dd, $d4, $c7, $c2, $bc, $bf, $c9, $d6, $ed, $fa, $0d, $1b, $2c, $3a, $3a, $39
189dd     36 1F 0E FC 
189e1     EE EC F3 FC 
189e5     09 0B 04 F6 
189e9     F4 F2 F3 DF | 	byte	$36, $1f, $0e, $fc, $ee, $ec, $f3, $fc, $09, $0b, $04, $f6, $f4, $f2, $f3, $df
189ed     CA B9 B7 B5 
189f1     C5 D2 EE FD 
189f5     14 08 09 09 
189f9     FE F3 E6 DA | 	byte	$ca, $b9, $b7, $b5, $c5, $d2, $ee, $fd, $14, $08, $09, $09, $fe, $f3, $e6, $da
189fd     D7 D6 CE CF 
18a01     DA D3 D7 E3 
18a05     EB F3 02 04 
18a09     06 06 07 12 | 	byte	$d7, $d6, $ce, $cf, $da, $d3, $d7, $e3, $eb, $f3, $02, $04, $06, $06, $07, $12
18a0d     1F 32 47 49 
18a11     4F 44 3C 2F 
18a15     21 14 FE F4 
18a19     F2 F5 01 07 | 	byte	$1f, $32, $47, $49, $4f, $44, $3c, $2f, $21, $14, $fe, $f4, $f2, $f5, $01, $07
18a1d     0E 18 26 18 
18a21     10 0A 04 FB 
18a25     F5 F5 F3 F6 
18a29     00 08 06 FB | 	byte	$0e, $18, $26, $18, $10, $0a, $04, $fb, $f5, $f5, $f3, $f6, $00, $08, $06, $fb
18a2d     F5 EB E2 DA 
18a31     D5 C7 C2 AA 
18a35     A0 96 98 9B 
18a39     AC BB CE E0 | 	byte	$f5, $eb, $e2, $da, $d5, $c7, $c2, $aa, $a0, $96, $98, $9b, $ac, $bb, $ce, $e0
18a3d     F0 FC 0F 1A 
18a41     17 1E 27 2D 
18a45     3C 3A 45 46 
18a49     46 2D 1C 00 | 	byte	$f0, $fc, $0f, $1a, $17, $1e, $27, $2d, $3c, $3a, $45, $46, $46, $2d, $1c, $00
18a4d     F6 E9 E2 DA 
18a51     D5 CA C6 CC 
18a55     CE CF D4 DA 
18a59     E1 E7 F0 F0 | 	byte	$f6, $e9, $e2, $da, $d5, $ca, $c6, $cc, $ce, $cf, $d4, $da, $e1, $e7, $f0, $f0
18a5d     F2 F0 EE E9 
18a61     F7 F7 06 18 
18a65     13 1F 1C 1B 
18a69     16 0D EC CD | 	byte	$f2, $f0, $ee, $e9, $f7, $f7, $06, $18, $13, $1f, $1c, $1b, $16, $0d, $ec, $cd
18a6d     B1 9F A2 A5 
18a71     B5 D7 EE F3 
18a75     FD FD 03 11 
18a79     15 1C 1B 1B | 	byte	$b1, $9f, $a2, $a5, $b5, $d7, $ee, $f3, $fd, $fd, $03, $11, $15, $1c, $1b, $1b
18a7d     1A 17 16 09 
18a81     04 05 06 09 
18a85     0E 0F FD F4 
18a89     EA DA DC DD | 	byte	$1a, $17, $16, $09, $04, $05, $06, $09, $0e, $0f, $fd, $f4, $ea, $da, $dc, $dd
18a8d     E7 ED FD 05 
18a91     08 0A 1A 23 
18a95     21 21 1F 1C 
18a99     1C 26 2A 33 | 	byte	$e7, $ed, $fd, $05, $08, $0a, $1a, $23, $21, $21, $1f, $1c, $1c, $26, $2a, $33
18a9d     3B 33 22 07 
18aa1     F2 E2 D4 CC 
18aa5     CF D7 E6 FA 
18aa9     08 0A 06 05 | 	byte	$3b, $33, $22, $07, $f2, $e2, $d4, $cc, $cf, $d7, $e6, $fa, $08, $0a, $06, $05
18aad     05 0A 0B 06 
18ab1     FF F3 E0 C9 
18ab5     B9 BA BA CA 
18ab9     D9 EA ED E9 | 	byte	$05, $0a, $0b, $06, $ff, $f3, $e0, $c9, $b9, $ba, $ba, $ca, $d9, $ea, $ed, $e9
18abd     E6 F0 ED F4 
18ac1     ED ED EE F0 
18ac5     FB 00 07 17 
18ac9     08 04 FE F9 | 	byte	$e6, $f0, $ed, $f4, $ed, $ed, $ee, $f0, $fb, $00, $07, $17, $08, $04, $fe, $f9
18acd     F4 F7 F6 F7 
18ad1     F9 FE FE 04 
18ad5     F8 EF E6 DD 
18ad9     D7 D7 D8 DB | 	byte	$f4, $f7, $f6, $f7, $f9, $fe, $fe, $04, $f8, $ef, $e6, $dd, $d7, $d7, $d8, $db
18add     DD E5 E5 ED 
18ae1     FE 0A 1C 2E 
18ae5     2A 2F 2D 2A 
18ae9     22 09 F9 F0 | 	byte	$dd, $e5, $e5, $ed, $fe, $0a, $1c, $2e, $2a, $2f, $2d, $2a, $22, $09, $f9, $f0
18aed     E8 E4 EF F7 
18af1     EB F0 E6 D4 
18af5     D2 D3 D3 D4 
18af9     DE DF E0 EC | 	byte	$e8, $e4, $ef, $f7, $eb, $f0, $e6, $d4, $d2, $d3, $d3, $d4, $de, $df, $e0, $ec
18afd     F5 FF 02 01 
18b01     00 03 05 07 
18b05     07 0A 05 FE 
18b09     FE F4 F3 E8 | 	byte	$f5, $ff, $02, $01, $00, $03, $05, $07, $07, $0a, $05, $fe, $fe, $f4, $f3, $e8
18b0d     EA E9 E9 EE 
18b11     F7 0A 1A 28 
18b15     39 44 49 58 
18b19     57 58 50 46 | 	byte	$ea, $e9, $e9, $ee, $f7, $0a, $1a, $28, $39, $44, $49, $58, $57, $58, $50, $46
18b1d     32 16 02 FC 
18b21     EF F5 F5 FF 
18b25     04 02 02 01 
18b29     F0 E6 DB D7 | 	byte	$32, $16, $02, $fc, $ef, $f5, $f5, $ff, $04, $02, $02, $01, $f0, $e6, $db, $d7
18b2d     D2 D4 D3 D0 
18b31     CF CC C5 C6 
18b35     BB C3 CC D0 
18b39     DA E2 E3 EE | 	byte	$d2, $d4, $d3, $d0, $cf, $cc, $c5, $c6, $bb, $c3, $cc, $d0, $da, $e2, $e3, $ee
18b3d     FD 00 0C 0F 
18b41     09 02 F9 F1 
18b45     EC F0 F0 F2 
18b49     FC 04 12 1F | 	byte	$fd, $00, $0c, $0f, $09, $02, $f9, $f1, $ec, $f0, $f0, $f2, $fc, $04, $12, $1f
18b4d     31 32 30 2D 
18b51     21 18 06 FD 
18b55     F9 F4 F5 FF 
18b59     03 02 FC F1 | 	byte	$31, $32, $30, $2d, $21, $18, $06, $fd, $f9, $f4, $f5, $ff, $03, $02, $fc, $f1
18b5d     DD D5 C8 C1 
18b61     C6 C7 CF D8 
18b65     DD EB F4 F8 
18b69     FF FE FD FB | 	byte	$dd, $d5, $c8, $c1, $c6, $c7, $cf, $d8, $dd, $eb, $f4, $f8, $ff, $fe, $fd, $fb
18b6d     F4 F2 E8 E9 
18b71     E2 DB DB DD 
18b75     ED EF F9 F6 
18b79     F5 F5 F6 00 | 	byte	$f4, $f2, $e8, $e9, $e2, $db, $db, $dd, $ed, $ef, $f9, $f6, $f5, $f5, $f6, $00
18b7d     03 0A 14 1D 
18b81     25 2A 34 35 
18b85     25 23 15 03 
18b89     00 FC FB FE | 	byte	$03, $0a, $14, $1d, $25, $2a, $34, $35, $25, $23, $15, $03, $00, $fc, $fb, $fe
18b8d     09 16 1D 1A 
18b91     18 18 1A 25 
18b95     29 2A 29 28 
18b99     17 12 02 EF | 	byte	$09, $16, $1d, $1a, $18, $18, $1a, $25, $29, $2a, $29, $28, $17, $12, $02, $ef
18b9d     EC E5 E0 E7 
18ba1     E8 ED F1 F8 
18ba5     FF 04 00 F8 
18ba9     F2 EC EC DF | 	byte	$ec, $e5, $e0, $e7, $e8, $ed, $f1, $f8, $ff, $04, $00, $f8, $f2, $ec, $ec, $df
18bad     D7 D3 C9 CA 
18bb1     C7 C6 C9 D9 
18bb5     DE F1 FE 02 
18bb9     08 07 07 06 | 	byte	$d7, $d3, $c9, $ca, $c7, $c6, $c9, $d9, $de, $f1, $fe, $02, $08, $07, $07, $06
18bbd     07 0C 1B 1D 
18bc1     1F 20 1B 1B 
18bc5     06 EC E3 DE 
18bc9     E4 EB F5 FD | 	byte	$07, $0c, $1b, $1d, $1f, $20, $1b, $1b, $06, $ec, $e3, $de, $e4, $eb, $f5, $fd
18bcd     02 00 03 05 
18bd1     03 01 FE F4 
18bd5     F5 F2 F0 F0 
18bd9     E8 E3 DE D8 | 	byte	$02, $00, $03, $05, $03, $01, $fe, $f4, $f5, $f2, $f0, $f0, $e8, $e3, $de, $d8
18bdd     D2 D0 D3 D3 
18be1     D8 D7 E2 E3 
18be5     EE ED F4 03 
18be9     19 28 2B 2D | 	byte	$d2, $d0, $d3, $d3, $d8, $d7, $e2, $e3, $ee, $ed, $f4, $03, $19, $28, $2b, $2d
18bed     28 17 0A F4 
18bf1     E2 E0 E0 EC 
18bf5     FA 08 15 13 
18bf9     27 23 19 13 | 	byte	$28, $17, $0a, $f4, $e2, $e0, $e0, $ec, $fa, $08, $15, $13, $27, $23, $19, $13
18bfd     0D FF 01 FE 
18c01     FB FA F7 F5 
18c05     E8 E9 E6 E3 
18c09     E3 E4 EB F1 | 	byte	$0d, $ff, $01, $fe, $fb, $fa, $f7, $f5, $e8, $e9, $e6, $e3, $e3, $e4, $eb, $f1
18c0d     FB 00 06 0B 
18c11     11 1C 31 46 
18c15     4C 48 3D 29 
18c19     17 F8 EA E2 | 	byte	$fb, $00, $06, $0b, $11, $1c, $31, $46, $4c, $48, $3d, $29, $17, $f8, $ea, $e2
18c1d     E4 EE FE 0F 
18c21     18 23 21 23 
18c25     24 10 0D 08 
18c29     02 FE 01 00 | 	byte	$e4, $ee, $fe, $0f, $18, $23, $21, $23, $24, $10, $0d, $08, $02, $fe, $01, $00
18c2d     00 00 F0 E6 
18c31     D8 CB C4 C0 
18c35     C2 C7 CB CF 
18c39     D9 D9 DE ED | 	byte	$00, $00, $f0, $e6, $d8, $cb, $c4, $c0, $c2, $c7, $cb, $cf, $d9, $d9, $de, $ed
18c3d     FC 00 07 07 
18c41     07 F7 F4 DB 
18c45     CB CF D7 E6 
18c49     03 12 1D 27 | 	byte	$fc, $00, $07, $07, $07, $f7, $f4, $db, $cb, $cf, $d7, $e6, $03, $12, $1d, $27
18c4d     25 20 1F 0D 
18c51     08 01 03 06 
18c55     10 0D 0B 00 
18c59     F8 EA E3 D5 | 	byte	$25, $20, $1f, $0d, $08, $01, $03, $06, $10, $0d, $0b, $00, $f8, $ea, $e3, $d5
18c5d     D3 D3 D0 DA 
18c61     E3 F5 0C 02 
18c65     02 03 0B 19 
18c69     1C 18 18 06 | 	byte	$d3, $d3, $d0, $da, $e3, $f5, $0c, $02, $02, $03, $0b, $19, $1c, $18, $18, $06
18c6d     FC E0 D0 CD 
18c71     C8 CC D8 E3 
18c75     E9 F2 F8 F6 
18c79     FE FA F5 F6 | 	byte	$fc, $e0, $d0, $cd, $c8, $cc, $d8, $e3, $e9, $f2, $f8, $f6, $fe, $fa, $f5, $f6
18c7d     F9 00 09 0F 
18c81     18 18 18 16 
18c85     0C 06 01 03 
18c89     08 17 19 22 | 	byte	$f9, $00, $09, $0f, $18, $18, $18, $16, $0c, $06, $01, $03, $08, $17, $19, $22
18c8d     1B 1C 12 1E 
18c91     2D 3A 4E 56 
18c95     53 43 3C 1F 
18c99     02 F0 E6 E2 | 	byte	$1b, $1c, $12, $1e, $2d, $3a, $4e, $56, $53, $43, $3c, $1f, $02, $f0, $e6, $e2
18c9d     E0 F0 F4 03 
18ca1     08 12 0D 08 
18ca5     FF F7 F2 E1 
18ca9     DA D5 D3 CE | 	byte	$e0, $f0, $f4, $03, $08, $12, $0d, $08, $ff, $f7, $f2, $e1, $da, $d5, $d3, $ce
18cad     CE CB C6 C0 
18cb1     BB BD C2 D1 
18cb5     D5 E4 EB F3 
18cb9     F2 F7 00 08 | 	byte	$ce, $cb, $c6, $c0, $bb, $bd, $c2, $d1, $d5, $e4, $eb, $f3, $f2, $f7, $00, $08
18cbd     1C 1E 27 25 
18cc1     1B F7 E5 D5 
18cc5     DB EC FE 15 
18cc9     2E 3D 46 4B | 	byte	$1c, $1e, $27, $25, $1b, $f7, $e5, $d5, $db, $ec, $fe, $15, $2e, $3d, $46, $4b
18ccd     4A 38 2E 1E 
18cd1     11 04 00 F4 
18cd5     EC E8 E6 DA 
18cd9     D6 C7 C2 B8 | 	byte	$4a, $38, $2e, $1e, $11, $04, $00, $f4, $ec, $e8, $e6, $da, $d6, $c7, $c2, $b8
18cdd     AA AF B1 C2 
18ce1     D1 DB D3 DC 
18ce5     EB EF 04 12 
18ce9     17 1D 1F 0D | 	byte	$aa, $af, $b1, $c2, $d1, $db, $d3, $dc, $eb, $ef, $04, $12, $17, $1d, $1f, $0d
18ced     03 F9 F6 F7 
18cf1     F7 06 0B 14 
18cf5     19 18 0E FF 
18cf9     FC FB FD 04 | 	byte	$03, $f9, $f6, $f7, $f7, $06, $0b, $14, $19, $18, $0e, $ff, $fc, $fb, $fd, $04
18cfd     0A 14 18 1A 
18d01     21 1F 12 07 
18d05     02 01 FE 00 
18d09     0B 16 21 24 | 	byte	$0a, $14, $18, $1a, $21, $1f, $12, $07, $02, $01, $fe, $00, $0b, $16, $21, $24
18d0d     21 20 20 2A 
18d11     29 29 1E 10 
18d15     07 EB D6 CE 
18d19     BF C1 C2 D3 | 	byte	$21, $20, $20, $2a, $29, $29, $1e, $10, $07, $eb, $d6, $ce, $bf, $c1, $c2, $d3
18d1d     E7 FE 14 2A 
18d21     2F 2E 2E 2E 
18d25     26 1F 16 0E 
18d29     05 00 FA EE | 	byte	$e7, $fe, $14, $2a, $2f, $2e, $2e, $2e, $26, $1f, $16, $0e, $05, $00, $fa, $ee
18d2d     DE D5 CD CC 
18d31     CF E0 E5 EF 
18d35     FD 02 FC F3 
18d39     F3 FB 00 06 | 	byte	$de, $d5, $cd, $cc, $cf, $e0, $e5, $ef, $fd, $02, $fc, $f3, $f3, $fb, $00, $06
18d3d     05 06 05 F4 
18d41     E6 E2 D7 DC 
18d45     E7 ED F7 02 
18d49     07 0E 0D 08 | 	byte	$05, $06, $05, $f4, $e6, $e2, $d7, $dc, $e7, $ed, $f7, $02, $07, $0e, $0d, $08
18d4d     06 05 F9 FB 
18d51     F1 ED ED ED 
18d55     EE F3 F3 F2 
18d59     E7 D9 D7 D1 | 	byte	$06, $05, $f9, $fb, $f1, $ed, $ed, $ed, $ee, $f3, $f3, $f2, $e7, $d9, $d7, $d1
18d5d     D7 E8 F2 F6 
18d61     E8 E4 E6 00 
18d65     0F 21 36 38 
18d69     3F 32 1D 14 | 	byte	$d7, $e8, $f2, $f6, $e8, $e4, $e6, $00, $0f, $21, $36, $38, $3f, $32, $1d, $14
18d6d     04 FC FD FA 
18d71     FF 06 05 15 
18d75     0C 05 06 01 
18d79     00 FE F3 F2 | 	byte	$04, $fc, $fd, $fa, $ff, $06, $05, $15, $0c, $05, $06, $01, $00, $fe, $f3, $f2
18d7d     E0 DE DF DF 
18d81     E0 E3 E5 E3 
18d85     E6 EB F7 0E 
18d89     20 30 33 34 | 	byte	$e0, $de, $df, $df, $e0, $e3, $e5, $e3, $e6, $eb, $f7, $0e, $20, $30, $33, $34
18d8d     37 47 4B 51 
18d91     44 3E 2E 0C 
18d95     FA DE D0 C9 
18d99     D1 E2 F6 1A | 	byte	$37, $47, $4b, $51, $44, $3e, $2e, $0c, $fa, $de, $d0, $c9, $d1, $e2, $f6, $1a
18d9d     2E 43 48 3E 
18da1     34 24 1D 10 
18da5     09 01 F9 F0 
18da9     F2 EB EC EC | 	byte	$2e, $43, $48, $3e, $34, $24, $1d, $10, $09, $01, $f9, $f0, $f2, $eb, $ec, $ec
18dad     E4 D6 D6 C4 
18db1     BB BD BE BD 
18db5     BC B9 BC CD 
18db9     DA E8 F4 F8 | 	byte	$e4, $d6, $d6, $c4, $bb, $bd, $be, $bd, $bc, $b9, $bc, $cd, $da, $e8, $f4, $f8
18dbd     FE FB F9 F6 
18dc1     F9 FE 08 16 
18dc5     22 2C 39 37 
18dc9     35 24 15 07 | 	byte	$fe, $fb, $f9, $f6, $f9, $fe, $08, $16, $22, $2c, $39, $37, $35, $24, $15, $07
18dcd     04 02 02 05 
18dd1     07 09 07 09 
18dd5     07 F8 EA D8 
18dd9     D1 C9 D0 DB | 	byte	$04, $02, $02, $05, $07, $09, $07, $09, $07, $f8, $ea, $d8, $d1, $c9, $d0, $db
18ddd     ED EE EE EE 
18de1     F3 FC 07 0F 
18de5     0F 0A 01 ED 
18de9     E1 D5 D7 D7 | 	byte	$ed, $ee, $ee, $ee, $f3, $fc, $07, $0f, $0f, $0a, $01, $ed, $e1, $d5, $d7, $d7
18ded     D9 E1 EA F2 
18df1     05 0D 13 14 
18df5     16 17 1A 1C 
18df9     21 1B 1A 10 | 	byte	$d9, $e1, $ea, $f2, $05, $0d, $13, $14, $16, $17, $1a, $1c, $21, $1b, $1a, $10
18dfd     02 00 F2 E8 
18e01     E4 E5 EA F9 
18e05     0D 24 42 4D 
18e09     50 50 3E 34 | 	byte	$02, $00, $f2, $e8, $e4, $e5, $ea, $f9, $0d, $24, $42, $4d, $50, $50, $3e, $34
18e0d     31 2C 2D 22 
18e11     15 02 F1 E8 
18e15     E4 E4 E5 ED 
18e19     F7 FF 09 0E | 	byte	$31, $2c, $2d, $22, $15, $02, $f1, $e8, $e4, $e4, $e5, $ed, $f7, $ff, $09, $0e
18e1d     0A 00 FA F9 
18e21     F9 F7 FF F8 
18e25     F9 FA F5 FB 
18e29     FF FE 00 FE | 	byte	$0a, $00, $fa, $f9, $f9, $f7, $ff, $f8, $f9, $fa, $f5, $fb, $ff, $fe, $00, $fe
18e2d     F6 EC EC EC 
18e31     E9 E4 DB CD 
18e35     C3 BE CC E1 
18e39     F8 0F 1B 18 | 	byte	$f6, $ec, $ec, $ec, $e9, $e4, $db, $cd, $c3, $be, $cc, $e1, $f8, $0f, $1b, $18
18e3d     18 17 12 02 
18e41     05 02 05 0F 
18e45     1D 2A 2A 27 
18e49     22 19 10 0F | 	byte	$18, $17, $12, $02, $05, $02, $05, $0f, $1d, $2a, $2a, $27, $22, $19, $10, $0f
18e4d     FE F4 E5 CF 
18e51     C4 B7 B4 AF 
18e55     AF AD AD B2 
18e59     BE D2 E4 F0 | 	byte	$fe, $f4, $e5, $cf, $c4, $b7, $b4, $af, $af, $ad, $ad, $b2, $be, $d2, $e4, $f0
18e5d     FC 09 0E 15 
18e61     1F 31 3D 44 
18e65     41 27 11 07 
18e69     F1 EA E5 E5 | 	byte	$fc, $09, $0e, $15, $1f, $31, $3d, $44, $41, $27, $11, $07, $f1, $ea, $e5, $e5
18e6d     E8 FD 12 29 
18e71     33 36 35 2A 
18e75     1A 15 0E 09 
18e79     0A 07 05 05 | 	byte	$e8, $fd, $12, $29, $33, $36, $35, $2a, $1a, $15, $0e, $09, $0a, $07, $05, $05
18e7d     06 07 06 07 
18e81     06 03 01 01 
18e85     02 02 00 FD 
18e89     FA F0 F2 F3 | 	byte	$06, $07, $06, $07, $06, $03, $01, $01, $02, $02, $00, $fd, $fa, $f0, $f2, $f3
18e8d     FD 03 05 F9 
18e91     F1 F3 F6 FB 
18e95     04 0A 19 23 
18e99     2E 38 34 2C | 	byte	$fd, $03, $05, $f9, $f1, $f3, $f6, $fb, $04, $0a, $19, $23, $2e, $38, $34, $2c
18e9d     1D 0F 00 FC 
18ea1     FB FD 0C 11 
18ea5     1C 27 27 27 
18ea9     17 0A ED DA | 	byte	$1d, $0f, $00, $fc, $fb, $fd, $0c, $11, $1c, $27, $27, $27, $17, $0a, $ed, $da
18ead     D0 CB CC C9 
18eb1     C9 D0 D0 D3 
18eb5     DD E8 F8 02 
18eb9     FE EE E4 D9 | 	byte	$d0, $cb, $cc, $c9, $c9, $d0, $d0, $d3, $dd, $e8, $f8, $02, $fe, $ee, $e4, $d9
18ebd     D1 D3 D8 DE 
18ec1     EC F9 05 1C 
18ec5     2B 2D 33 34 
18ec9     2C 22 15 0B | 	byte	$d1, $d3, $d8, $de, $ec, $f9, $05, $1c, $2b, $2d, $33, $34, $2c, $22, $15, $0b
18ecd     03 FB EE E4 
18ed1     E0 CF C8 C2 
18ed5     BC BE C9 DB 
18ed9     EE 01 0E 20 | 	byte	$03, $fb, $ee, $e4, $e0, $cf, $c8, $c2, $bc, $be, $c9, $db, $ee, $01, $0e, $20
18edd     24 16 16 14 
18ee1     1F 27 25 1B 
18ee5     15 0F 0A 0D 
18ee9     0D 08 04 02 | 	byte	$24, $16, $16, $14, $1f, $27, $25, $1b, $15, $0f, $0a, $0d, $0d, $08, $04, $02
18eed     FC FE F6 F1 
18ef1     E8 E4 DB D7 
18ef5     DB DC E6 EE 
18ef9     F2 01 0D 14 | 	byte	$fc, $fe, $f6, $f1, $e8, $e4, $db, $d7, $db, $dc, $e6, $ee, $f2, $01, $0d, $14
18efd     1F 2C 2F 30 
18f01     2D 2D 2E 26 
18f05     24 1F 0C 03 
18f09     EE E7 EF 00 | 	byte	$1f, $2c, $2f, $30, $2d, $2d, $2e, $26, $24, $1f, $0c, $03, $ee, $e7, $ef, $00
18f0d     08 0C 13 14 
18f11     1E 1F 15 17 
18f15     0F 15 14 16 
18f19     1B 1C 21 21 | 	byte	$08, $0c, $13, $14, $1e, $1f, $15, $17, $0f, $15, $14, $16, $1b, $1c, $21, $21
18f1d     21 1A 1A 12 
18f21     0D 04 FE F4 
18f25     EB E5 E0 DF 
18f29     D2 CA BB BD | 	byte	$21, $1a, $1a, $12, $0d, $04, $fe, $f4, $eb, $e5, $e0, $df, $d2, $ca, $bb, $bd
18f2d     BF BD C2 D2 
18f31     D5 DC DD EA 
18f35     FE 0C 09 0A 
18f39     02 01 F7 F1 | 	byte	$bf, $bd, $c2, $d2, $d5, $dc, $dd, $ea, $fe, $0c, $09, $0a, $02, $01, $f7, $f1
18f3d     F3 F8 F9 04 
18f41     11 24 39 4A 
18f45     51 50 44 23 
18f49     09 F6 E6 DA | 	byte	$f3, $f8, $f9, $04, $11, $24, $39, $4a, $51, $50, $44, $23, $09, $f6, $e6, $da
18f4d     D5 CE CE CC 
18f51     CE DA E0 E7 
18f55     E5 DE D7 D6 
18f59     D7 D9 D9 DE | 	byte	$d5, $ce, $ce, $cc, $ce, $da, $e0, $e7, $e5, $de, $d7, $d6, $d7, $d9, $d9, $de
18f5d     DB E2 F3 05 
18f61     07 10 18 17 
18f65     22 26 28 33 
18f69     2E 29 23 23 | 	byte	$db, $e2, $f3, $05, $07, $10, $18, $17, $22, $26, $28, $33, $2e, $29, $23, $23
18f6d     13 0F 09 00 
18f71     F3 EA E7 E9 
18f75     EA F5 09 15 
18f79     27 35 37 37 | 	byte	$13, $0f, $09, $00, $f3, $ea, $e7, $e9, $ea, $f5, $09, $15, $27, $35, $37, $37
18f7d     37 30 27 1F 
18f81     19 17 14 16 
18f85     16 11 FE FA 
18f89     F9 03 F0 EB | 	byte	$37, $30, $27, $1f, $19, $17, $14, $16, $16, $11, $fe, $fa, $f9, $03, $f0, $eb
18f8d     E4 DA D6 D4 
18f91     DE E6 EE F9 
18f95     F9 FE 07 16 
18f99     1D 2B 32 30 | 	byte	$e4, $da, $d6, $d4, $de, $e6, $ee, $f9, $f9, $fe, $07, $16, $1d, $2b, $32, $30
18f9d     2D 32 2C 22 
18fa1     1E 0F 05 00 
18fa5     F2 E8 E4 DB 
18fa9     D2 C9 CA CA | 	byte	$2d, $32, $2c, $22, $1e, $0f, $05, $00, $f2, $e8, $e4, $db, $d2, $c9, $ca, $ca
18fad     DA E3 F6 FD 
18fb1     EF EE EE FE 
18fb5     FA FD FE 00 
18fb9     02 02 05 0F | 	byte	$da, $e3, $f6, $fd, $ef, $ee, $ee, $fe, $fa, $fd, $fe, $00, $02, $02, $05, $0f
18fbd     1A 18 25 20 
18fc1     1B 1B 13 0E 
18fc5     00 EF DD D1 
18fc9     C8 C5 C0 C1 | 	byte	$1a, $18, $25, $20, $1b, $1b, $13, $0e, $00, $ef, $dd, $d1, $c8, $c5, $c0, $c1
18fcd     C8 CD D8 E3 
18fd1     FB FE 0C 01 
18fd5     F3 EC E8 E9 
18fd9     E8 E5 E3 E3 | 	byte	$c8, $cd, $d8, $e3, $fb, $fe, $0c, $01, $f3, $ec, $e8, $e9, $e8, $e5, $e3, $e3
18fdd     F3 07 0B 19 
18fe1     2B 33 3D 48 
18fe5     4B 3D 35 21 
18fe9     1A 0D FF 01 | 	byte	$f3, $07, $0b, $19, $2b, $33, $3d, $48, $4b, $3d, $35, $21, $1a, $0d, $ff, $01
18fed     00 00 02 01 
18ff1     00 FE 06 06 
18ff5     05 03 03 FC 
18ff9     FB F9 FE 04 | 	byte	$00, $00, $02, $01, $00, $fe, $06, $06, $05, $03, $03, $fc, $fb, $f9, $fe, $04
18ffd     06 05 03 01 
19001     02 07 0E 0D 
19005     05 03 03 0B 
19009     0A 09 07 00 | 	byte	$06, $05, $03, $01, $02, $07, $0e, $0d, $05, $03, $03, $0b, $0a, $09, $07, $00
1900d     FC FA F7 F9 
19011     09 0C 0B 0D 
19015     0D 15 24 38 
19019     41 44 3D 2E | 	byte	$fc, $fa, $f7, $f9, $09, $0c, $0b, $0d, $0d, $15, $24, $38, $41, $44, $3d, $2e
1901d     2B 24 18 15 
19021     0F 09 04 03 
19025     03 00 F8 F1 
19029     DC C5 BB B2 | 	byte	$2b, $24, $18, $15, $0f, $09, $04, $03, $03, $00, $f8, $f1, $dc, $c5, $bb, $b2
1902d     AE A5 A1 9B 
19031     9F BA C1 D1 
19035     E4 F6 FF 08 
19039     16 1B 2B 34 | 	byte	$ae, $a5, $a1, $9b, $9f, $ba, $c1, $d1, $e4, $f6, $ff, $08, $16, $1b, $2b, $34
1903d     38 37 35 25 
19041     23 15 11 F9 
19045     E3 DE D4 D8 
19049     D8 D7 D9 DC | 	byte	$38, $37, $35, $25, $23, $15, $11, $f9, $e3, $de, $d4, $d8, $d8, $d7, $d9, $dc
1904d     ED FC 09 10 
19051     14 04 FF EA 
19055     E7 E5 ED EE 
19059     F0 F8 FE 0D | 	byte	$ed, $fc, $09, $10, $14, $04, $ff, $ea, $e7, $e5, $ed, $ee, $f0, $f8, $fe, $0d
1905d     19 1C 22 24 
19061     21 1F 15 0F 
19065     0F 05 05 F9 
19069     F4 ED EE F0 | 	byte	$19, $1c, $22, $24, $21, $1f, $15, $0f, $0f, $05, $05, $f9, $f4, $ed, $ee, $f0
1906d     F8 F9 FA F9 
19071     03 08 0F 14 
19075     13 14 12 12 
19079     12 17 26 28 | 	byte	$f8, $f9, $fa, $f9, $03, $08, $0f, $14, $13, $14, $12, $12, $12, $17, $26, $28
1907d     27 1F 19 17 
19081     17 14 13 08 
19085     FD FA F4 F3 
19089     F5 F6 F7 FC | 	byte	$27, $1f, $19, $17, $17, $14, $13, $08, $fd, $fa, $f4, $f3, $f5, $f6, $f7, $fc
1908d     05 0F 1F 29 
19091     27 28 1E 16 
19095     12 10 0F 08 
19099     01 FA FD F8 | 	byte	$05, $0f, $1f, $29, $27, $28, $1e, $16, $12, $10, $0f, $08, $01, $fa, $fd, $f8
1909d     FB FE 04 06 
190a1     07 0C 0A 14 
190a5     12 07 FC E4 
190a9     C9 BE B4 AE | 	byte	$fb, $fe, $04, $06, $07, $0c, $0a, $14, $12, $07, $fc, $e4, $c9, $be, $b4, $ae
190ad     AD A2 A7 B7 
190b1     C5 D8 F3 03 
190b5     09 17 1B 25 
190b9     35 34 37 3A | 	byte	$ad, $a2, $a7, $b7, $c5, $d8, $f3, $03, $09, $17, $1b, $25, $35, $34, $37, $3a
190bd     30 2C 23 1F 
190c1     1A 10 0A F6 
190c5     EE EB E2 E3 
190c9     DB D5 D4 D4 | 	byte	$30, $2c, $23, $1f, $1a, $10, $0a, $f6, $ee, $eb, $e2, $e3, $db, $d5, $d4, $d4
190cd     D7 E2 EB EA 
190d1     E5 D5 D1 CB 
190d5     DB DE EF F4 
190d9     FD 0C 0F 15 | 	byte	$d7, $e2, $eb, $ea, $e5, $d5, $d1, $cb, $db, $de, $ef, $f4, $fd, $0c, $0f, $15
190dd     24 23 24 23 
190e1     18 17 0D 0F 
190e5     0D 0F 0F 0A 
190e9     09 06 03 02 | 	byte	$24, $23, $24, $23, $18, $17, $0d, $0f, $0d, $0f, $0f, $0a, $09, $06, $03, $02
190ed     05 06 03 05 
190f1     07 0A 0D 14 
190f5     14 1E 24 2E 
190f9     3D 3F 3E 2D | 	byte	$05, $06, $03, $05, $07, $0a, $0d, $14, $14, $1e, $24, $2e, $3d, $3f, $3e, $2d
190fd     19 0B FF FA 
19101     F1 E6 DB D7 
19105     D2 D3 DD E8 
19109     F5 01 09 16 | 	byte	$19, $0b, $ff, $fa, $f1, $e6, $db, $d7, $d2, $d3, $dd, $e8, $f5, $01, $09, $16
1910d     1F 2D 2F 2E 
19111     22 19 10 07 
19115     01 00 00 FE 
19119     FD 03 0D 1A | 	byte	$1f, $2d, $2f, $2e, $22, $19, $10, $07, $01, $00, $00, $fe, $fd, $03, $0d, $1a
1911d     27 2B 31 2E 
19121     23 2A 2A 1E 
19125     0F F1 D9 BC 
19129     B1 B1 AF B2 | 	byte	$27, $2b, $31, $2e, $23, $2a, $2a, $1e, $0f, $f1, $d9, $bc, $b1, $b1, $af, $b2
1912d     BE C2 CC CC 
19131     DE EC F1 FB 
19135     FA FF 00 08 
19139     12 13 13 12 | 	byte	$be, $c2, $cc, $cc, $de, $ec, $f1, $fb, $fa, $ff, $00, $08, $12, $13, $13, $12
1913d     0A 0B 09 07 
19141     00 FC FA F0 
19145     EC EE E7 E9 
19149     E2 E0 E5 E9 | 	byte	$0a, $0b, $09, $07, $00, $fc, $fa, $f0, $ec, $ee, $e7, $e9, $e2, $e0, $e5, $e9
1914d     EF F6 F3 EB 
19151     E4 DE E0 EB 
19155     EF FD 0E 19 
19159     14 14 19 23 | 	byte	$ef, $f6, $f3, $eb, $e4, $de, $e0, $eb, $ef, $fd, $0e, $19, $14, $14, $19, $23
1915d     30 33 31 2E 
19161     2E 30 31 34 
19165     2A 18 0B F2 
19169     E6 E3 DA DB | 	byte	$30, $33, $31, $2e, $2e, $30, $31, $34, $2a, $18, $0b, $f2, $e6, $e3, $da, $db
1916d     DB DC E7 ED 
19171     F7 06 18 21 
19175     30 39 41 45 
19179     44 30 16 FB | 	byte	$db, $dc, $e7, $ed, $f7, $06, $18, $21, $30, $39, $41, $45, $44, $30, $16, $fb
1917d     E8 DE D1 D4 
19181     D4 D4 D3 CE 
19185     DF F5 0B 1B 
19189     2C 27 2A 3C | 	byte	$e8, $de, $d1, $d4, $d4, $d4, $d3, $ce, $df, $f5, $0b, $1b, $2c, $27, $2a, $3c
1918d     3A 39 31 22 
19191     15 0C FE 00 
19195     F9 FF 04 0D 
19199     13 18 1E 20 | 	byte	$3a, $39, $31, $22, $15, $0c, $fe, $00, $f9, $ff, $04, $0d, $13, $18, $1e, $20
1919d     21 21 20 20 
191a1     1F 1C 11 FD 
191a5     E3 C5 B5 B4 
191a9     AE BC C4 D1 | 	byte	$21, $21, $20, $20, $1f, $1c, $11, $fd, $e3, $c5, $b5, $b4, $ae, $bc, $c4, $d1
191ad     D8 CC CE D0 
191b1     DD E8 E8 ED 
191b5     ED F8 FE 07 
191b9     15 19 1A 1C | 	byte	$d8, $cc, $ce, $d0, $dd, $e8, $e8, $ed, $ed, $f8, $fe, $07, $15, $19, $1a, $1c
191bd     1F 14 0C 04 
191c1     FF FE F4 F0 
191c5     F0 F2 F3 F8 
191c9     FF 04 12 15 | 	byte	$1f, $14, $0c, $04, $ff, $fe, $f4, $f0, $f0, $f2, $f3, $f8, $ff, $04, $12, $15
191cd     13 10 F9 E1 
191d1     D0 BF BE CB 
191d5     DB EE FE F7 
191d9     FA 04 1B 28 | 	byte	$13, $10, $f9, $e1, $d0, $bf, $be, $cb, $db, $ee, $fe, $f7, $fa, $04, $1b, $28
191dd     35 38 39 36 
191e1     3B 3A 37 2F 
191e5     17 FD EC DB 
191e9     CF C5 C7 C7 | 	byte	$35, $38, $39, $36, $3b, $3a, $37, $2f, $17, $fd, $ec, $db, $cf, $c5, $c7, $c7
191ed     CA D6 ED 03 
191f1     1C 32 48 4E 
191f5     5C 5E 60 50 
191f9     2D 11 F4 DF | 	byte	$ca, $d6, $ed, $03, $1c, $32, $48, $4e, $5c, $5e, $60, $50, $2d, $11, $f4, $df
191fd     D3 D3 D8 E9 
19201     EE EE ED F4 
19205     FF 0C 11 10 
19209     15 17 1C 22 | 	byte	$d3, $d3, $d8, $e9, $ee, $ee, $ed, $f4, $ff, $0c, $11, $10, $15, $17, $1c, $22
1920d     28 28 23 19 
19211     18 13 09 0B 
19215     06 07 07 06 
19219     09 09 0A 0B | 	byte	$28, $28, $23, $19, $18, $13, $09, $0b, $06, $07, $07, $06, $09, $09, $0a, $0b
1921d     0D 0F 12 13 
19221     09 01 ED D6 
19225     C6 C2 C2 CC 
19229     DA E6 F4 F6 | 	byte	$0d, $0f, $12, $13, $09, $01, $ed, $d6, $c6, $c2, $c2, $cc, $da, $e6, $f4, $f6
1922d     E0 DA D9 DC 
19231     E6 E4 EB EA 
19235     F2 00 11 14 
19239     1E 1C 12 02 | 	byte	$e0, $da, $d9, $dc, $e6, $e4, $eb, $ea, $f2, $00, $11, $14, $1e, $1c, $12, $02
1923d     F4 E2 E0 DB 
19241     DC E1 EC F9 
19245     06 12 28 2F 
19249     39 37 34 20 | 	byte	$f4, $e2, $e0, $db, $dc, $e1, $ec, $f9, $06, $12, $28, $2f, $39, $37, $34, $20
1924d     0A E5 CC AF 
19251     A6 AC BC D3 
19255     E9 EF E5 E9 
19259     F5 05 22 30 | 	byte	$0a, $e5, $cc, $af, $a6, $ac, $bc, $d3, $e9, $ef, $e5, $e9, $f5, $05, $22, $30
1925d     37 41 44 46 
19261     52 4E 42 32 
19265     1C 0B F1 E5 
19269     D9 D0 D0 D8 | 	byte	$37, $41, $44, $46, $52, $4e, $42, $32, $1c, $0b, $f1, $e5, $d9, $d0, $d0, $d8
1926d     DE F4 05 17 
19271     1F 2A 37 37 
19275     37 37 2C 17 
19279     00 F3 EA ED | 	byte	$de, $f4, $05, $17, $1f, $2a, $37, $37, $37, $37, $2c, $17, $00, $f3, $ea, $ed
1927d     F9 01 0E 15 
19281     07 F8 F6 F7 
19285     F6 F9 00 FD 
19289     00 03 02 FC | 	byte	$f9, $01, $0e, $15, $07, $f8, $f6, $f7, $f6, $f9, $00, $fd, $00, $03, $02, $fc
1928d     FE FD FE 01 
19291     02 07 0E 0F 
19295     1A 22 1F 20 
19299     25 27 28 27 | 	byte	$fe, $fd, $fe, $01, $02, $07, $0e, $0f, $1a, $22, $1f, $20, $25, $27, $28, $27
1929d     27 1F 19 10 
192a1     02 F4 E2 D0 
192a5     CD C6 CA D4 
192a9     E3 EC E5 E4 | 	byte	$27, $1f, $19, $10, $02, $f4, $e2, $d0, $cd, $c6, $ca, $d4, $e3, $ec, $e5, $e4
192ad     DA E7 EF FE 
192b1     0A 0E 0F 12 
192b5     10 0D 0B 01 
192b9     F7 EA E1 D3 | 	byte	$da, $e7, $ef, $fe, $0a, $0e, $0f, $12, $10, $0d, $0b, $01, $f7, $ea, $e1, $d3
192bd     C9 CB CA CB 
192c1     C9 D0 DF ED 
192c5     08 1C 2B 3B 
192c9     3C 3A 30 18 | 	byte	$c9, $cb, $ca, $cb, $c9, $d0, $df, $ed, $08, $1c, $2b, $3b, $3c, $3a, $30, $18
192cd     F8 DC CA C3 
192d1     C5 CD DE E8 
192d5     EB E8 EA F7 
192d9     0A 16 1D 21 | 	byte	$f8, $dc, $ca, $c3, $c5, $cd, $de, $e8, $eb, $e8, $ea, $f7, $0a, $16, $1d, $21
192dd     20 21 24 29 
192e1     29 2E 30 2E 
192e5     30 2E 2D 1D 
192e9     16 0B FE FC | 	byte	$20, $21, $24, $29, $29, $2e, $30, $2e, $30, $2e, $2d, $1d, $16, $0b, $fe, $fc
192ed     FB FD 03 0C 
192f1     11 18 1D 17 
192f5     16 FB E5 D5 
192f9     CE C8 CC E1 | 	byte	$fb, $fd, $03, $0c, $11, $18, $1d, $17, $16, $fb, $e5, $d5, $ce, $c8, $cc, $e1
192fd     F6 10 24 24 
19301     24 21 1F 26 
19305     27 27 24 18 
19309     0A FC EF EC | 	byte	$f6, $10, $24, $24, $24, $21, $1f, $26, $27, $27, $24, $18, $0a, $fc, $ef, $ec
1930d     E7 ED F1 F2 
19311     F2 F5 F7 FA 
19315     FB 05 0D 21 
19319     2D 43 4E 52 | 	byte	$e7, $ed, $f1, $f2, $f2, $f5, $f7, $fa, $fb, $05, $0d, $21, $2d, $43, $4e, $52
1931d     53 4B 3B 28 
19321     08 F6 DD CC 
19325     CA C9 CC DC 
19329     E1 DA D0 C2 | 	byte	$53, $4b, $3b, $28, $08, $f6, $dd, $cc, $ca, $c9, $cc, $dc, $e1, $da, $d0, $c2
1932d     BE C6 CC D6 
19331     DE E6 EB F9 
19335     02 06 03 03 
19339     03 FC FD F8 | 	byte	$be, $c6, $cc, $d6, $de, $e6, $eb, $f9, $02, $06, $03, $03, $03, $fc, $fd, $f8
1933d     F4 E3 DA DB 
19341     D9 E6 F4 07 
19345     18 24 29 27 
19349     22 13 FF F8 | 	byte	$f4, $e3, $da, $db, $d9, $e6, $f4, $07, $18, $24, $29, $27, $22, $13, $ff, $f8
1934d     EA E7 ED F4 
19351     03 14 1D 18 
19355     0E 08 02 05 
19359     07 0C 0A 0D | 	byte	$ea, $e7, $ed, $f4, $03, $14, $1d, $18, $0e, $08, $02, $05, $07, $0c, $0a, $0d
1935d     0A 0A 0A 02 
19361     FC FB F6 F7 
19365     F7 F9 FE 07 
19369     06 12 1C 1A | 	byte	$0a, $0a, $0a, $02, $fc, $fb, $f6, $f7, $f7, $f9, $fe, $07, $06, $12, $1c, $1a
1936d     1C 27 28 32 
19371     2D 22 13 FD 
19375     E8 DE D0 CD 
19379     D0 DB E9 FB | 	byte	$1c, $27, $28, $32, $2d, $22, $13, $fd, $e8, $de, $d0, $cd, $d0, $db, $e9, $fb
1937d     0D 15 13 16 
19381     18 22 30 47 
19385     4E 56 51 3D 
19389     2A 17 00 FD | 	byte	$0d, $15, $13, $16, $18, $22, $30, $47, $4e, $56, $51, $3d, $2a, $17, $00, $fd
1938d     EE E4 E5 E3 
19391     E4 E9 ED EE 
19395     F3 F0 F7 F9 
19399     F9 FB FA FF | 	byte	$ee, $e4, $e5, $e3, $e4, $e9, $ed, $ee, $f3, $f0, $f7, $f9, $f9, $fb, $fa, $ff
1939d     01 0B 0F 14 
193a1     12 0A 09 09 
193a5     14 14 19 11 
193a9     F9 E3 D2 C9 | 	byte	$01, $0b, $0f, $14, $12, $0a, $09, $09, $14, $14, $19, $11, $f9, $e3, $d2, $c9
193ad     C4 CB DA DC 
193b1     DB E0 E0 DD 
193b5     DF EB EF 00 
193b9     04 12 19 1E | 	byte	$c4, $cb, $da, $dc, $db, $e0, $e0, $dd, $df, $eb, $ef, $00, $04, $12, $19, $1e
193bd     24 19 18 17 
193c1     14 13 16 16 
193c5     16 14 04 00 
193c9     EF E1 CF CB | 	byte	$24, $19, $18, $17, $14, $13, $16, $16, $16, $14, $04, $00, $ef, $e1, $cf, $cb
193cd     BC B9 BA BD 
193d1     CE E1 E5 EF 
193d5     03 06 0B 14 
193d9     1D 26 2E 2E | 	byte	$bc, $b9, $ba, $bd, $ce, $e1, $e5, $ef, $03, $06, $0b, $14, $1d, $26, $2e, $2e
193dd     23 1E 09 FE 
193e1     FA F4 F5 FC 
193e5     03 0C 19 1D 
193e9     24 25 35 37 | 	byte	$23, $1e, $09, $fe, $fa, $f4, $f5, $fc, $03, $0c, $19, $1d, $24, $25, $35, $37
193ed     37 3F 3D 33 
193f1     2B 1D 0A FE 
193f5     F5 F6 F7 F7 
193f9     FA 05 0D 16 | 	byte	$37, $3f, $3d, $33, $2b, $1d, $0a, $fe, $f5, $f6, $f7, $f7, $fa, $05, $0d, $16
193fd     13 0E 05 FD 
19401     F9 FD FE 06 
19405     05 02 FA FA 
19409     F2 F6 F7 EC | 	byte	$13, $0e, $05, $fd, $f9, $fd, $fe, $06, $05, $02, $fa, $fa, $f2, $f6, $f7, $ec
1940d     E8 E8 E9 FD 
19411     05 0A 0B 0B 
19415     0B 06 00 F9 
19419     F4 ED EE F3 | 	byte	$e8, $e8, $e9, $fd, $05, $0a, $0b, $0b, $0b, $06, $00, $f9, $f4, $ed, $ee, $f3
1941d     F7 FE 09 16 
19421     1F 2D 34 3D 
19425     43 41 2D 15 
19429     05 F2 E6 E8 | 	byte	$f7, $fe, $09, $16, $1f, $2d, $34, $3d, $43, $41, $2d, $15, $05, $f2, $e6, $e8
1942d     E8 EA EF E7 
19431     E6 DB CD C8 
19435     BD B9 BC BA 
19439     BA CA DC E5 | 	byte	$e8, $ea, $ef, $e7, $e6, $db, $cd, $c8, $bd, $b9, $bc, $ba, $ba, $ca, $dc, $e5
1943d     FF 0C 1E 26 
19441     24 19 1A 12 
19445     12 08 07 FD 
19449     F8 F7 EB E3 | 	byte	$ff, $0c, $1e, $26, $24, $19, $1a, $12, $12, $08, $07, $fd, $f8, $f7, $eb, $e3
1944d     DE DC DB E2 
19451     E9 E5 F0 F9 
19455     06 1A 2B 39 
19459     4A 46 47 3B | 	byte	$de, $dc, $db, $e2, $e9, $e5, $f0, $f9, $06, $1a, $2b, $39, $4a, $46, $47, $3b
1945d     26 18 07 05 
19461     05 06 10 18 
19465     26 2B 31 31 
19469     30 20 11 FD | 	byte	$26, $18, $07, $05, $05, $06, $10, $18, $26, $2b, $31, $31, $30, $20, $11, $fd
1946d     EA D2 C3 C0 
19471     BF BE CE E5 
19475     F7 00 06 07 
19479     12 1F 22 20 | 	byte	$ea, $d2, $c3, $c0, $bf, $be, $ce, $e5, $f7, $00, $06, $07, $12, $1f, $22, $20
1947d     1B 1A 15 0E 
19481     12 14 1C 1C 
19485     12 0E 05 00 
19489     FA FD FE 00 | 	byte	$1b, $1a, $15, $0e, $12, $14, $1c, $1c, $12, $0e, $05, $00, $fa, $fd, $fe, $00
1948d     03 0F 15 1C 
19491     22 20 21 1F 
19495     1C 15 07 04 
19499     FB F6 FA F9 | 	byte	$03, $0f, $15, $1c, $22, $20, $21, $1f, $1c, $15, $07, $04, $fb, $f6, $fa, $f9
1949d     00 06 05 07 
194a1     06 01 00 F9 
194a5     F4 E6 E2 DB 
194a9     DD DD DB DC | 	byte	$00, $06, $05, $07, $06, $01, $00, $f9, $f4, $e6, $e2, $db, $dd, $dd, $db, $dc
194ad     DF E0 EA E3 
194b1     E4 DA D6 D6 
194b5     D4 CD D0 D8 
194b9     DE F4 02 0E | 	byte	$df, $e0, $ea, $e3, $e4, $da, $d6, $d6, $d4, $cd, $d0, $d8, $de, $f4, $02, $0e
194bd     25 2C 37 3B 
194c1     3A 37 30 1B 
194c5     12 FF F9 F6 
194c9     F7 F9 F9 F9 | 	byte	$25, $2c, $37, $3b, $3a, $37, $30, $1b, $12, $ff, $f9, $f6, $f7, $f9, $f9, $f9
194cd     FB FE 01 FE 
194d1     FD FA FA F5 
194d5     F1 F3 F2 F3 
194d9     F2 ED EE EC | 	byte	$fb, $fe, $01, $fe, $fd, $fa, $fa, $f5, $f1, $f3, $f2, $f3, $f2, $ed, $ee, $ec
194dd     EA F2 FC FB 
194e1     FE 08 10 1E 
194e5     2C 36 3A 40 
194e9     34 2C 17 00 | 	byte	$ea, $f2, $fc, $fb, $fe, $08, $10, $1e, $2c, $36, $3a, $40, $34, $2c, $17, $00
194ed     EF DC D4 D1 
194f1     D7 E8 FB 12 
194f5     21 31 3D 49 
194f9     47 3C 2D 23 | 	byte	$ef, $dc, $d4, $d1, $d7, $e8, $fb, $12, $21, $31, $3d, $49, $47, $3c, $2d, $23
194fd     18 13 14 17 
19501     2B 33 31 31 
19505     27 1E 10 02 
19509     EF DF D4 C7 | 	byte	$18, $13, $14, $17, $2b, $33, $31, $31, $27, $1e, $10, $02, $ef, $df, $d4, $c7
1950d     C2 C6 C7 D1 
19511     DA EC F4 01 
19515     F6 EB E7 E0 
19519     DB E1 EC FC | 	byte	$c2, $c6, $c7, $d1, $da, $ec, $f4, $01, $f6, $eb, $e7, $e0, $db, $e1, $ec, $fc
1951d     14 1E 2B 32 
19521     30 30 23 0A 
19525     FB F8 EF EE 
19529     ED EE FE 07 | 	byte	$14, $1e, $2b, $32, $30, $30, $23, $0a, $fb, $f8, $ef, $ee, $ed, $ee, $fe, $07
1952d     0B 0A 05 F4 
19531     E6 DA D7 D7 
19535     D9 E9 F5 0B 
19539     1B 2C 37 35 | 	byte	$0b, $0a, $05, $f4, $e6, $da, $d7, $d7, $d9, $e9, $f5, $0b, $1b, $2c, $37, $35
1953d     36 2B 1C 09 
19541     F9 DD C4 BD 
19545     B8 BA CE DB 
19549     E9 ED EA ED | 	byte	$36, $2b, $1c, $09, $f9, $dd, $c4, $bd, $b8, $ba, $ce, $db, $e9, $ed, $ea, $ed
1954d     EE E4 E0 E6 
19551     EF F8 01 07 
19555     15 1F 25 24 
19559     18 10 0A 09 | 	byte	$ee, $e4, $e0, $e6, $ef, $f8, $01, $07, $15, $1f, $25, $24, $18, $10, $0a, $09
1955d     09 0E 15 24 
19561     2B 3A 3F 3F 
19565     3E 2E 25 1F 
19569     10 04 00 F7 | 	byte	$09, $0e, $15, $24, $2b, $3a, $3f, $3f, $3e, $2e, $25, $1f, $10, $04, $00, $f7
1956d     F1 EC F0 F8 
19571     04 12 14 16 
19575     14 13 10 FA 
19579     EF E8 E3 E9 | 	byte	$f1, $ec, $f0, $f8, $04, $12, $14, $16, $14, $13, $10, $fa, $ef, $e8, $e3, $e9
1957d     EA F2 F8 06 
19581     0A 0B 0B 06 
19585     02 02 00 00 
19589     01 02 03 08 | 	byte	$ea, $f2, $f8, $06, $0a, $0b, $0b, $06, $02, $02, $00, $00, $01, $02, $03, $08
1958d     07 06 05 06 
19591     09 0A 0A 0B 
19595     0A 09 04 FE 
19599     F5 F9 00 0E | 	byte	$07, $06, $05, $06, $09, $0a, $0a, $0b, $0a, $09, $04, $fe, $f5, $f9, $00, $0e
1959d     1B 28 37 3A 
195a1     3F 2F 21 18 
195a5     10 03 F9 E6 
195a9     DE DA D9 D7 | 	byte	$1b, $28, $37, $3a, $3f, $2f, $21, $18, $10, $03, $f9, $e6, $de, $da, $d9, $d7
195ad     D2 C3 BA B4 
195b1     AE B1 B6 B8 
195b5     C4 D6 E8 F6 
195b9     00 09 14 17 | 	byte	$d2, $c3, $ba, $b4, $ae, $b1, $b6, $b8, $c4, $d6, $e8, $f6, $00, $09, $14, $17
195bd     1C 22 23 1E 
195c1     12 FE ED E9 
195c5     EA F5 03 08 
195c9     16 18 17 0C | 	byte	$1c, $22, $23, $1e, $12, $fe, $ed, $e9, $ea, $f5, $03, $08, $16, $18, $17, $0c
195cd     FF FC FA FA 
195d1     FA F9 00 10 
195d5     21 31 30 31 
195d9     30 28 29 22 | 	byte	$ff, $fc, $fa, $fa, $fa, $f9, $00, $10, $21, $31, $30, $31, $30, $28, $29, $22
195dd     19 18 16 13 
195e1     10 0D 03 F6 
195e5     F1 E2 DE D8 
195e9     D2 D0 CF CF | 	byte	$19, $18, $16, $13, $10, $0d, $03, $f6, $f1, $e2, $de, $d8, $d2, $d0, $cf, $cf
195ed     C8 CF E0 F4 
195f1     05 1C 2C 3A 
195f5     43 3F 2F 22 
195f9     1F 16 17 16 | 	byte	$c8, $cf, $e0, $f4, $05, $1c, $2c, $3a, $43, $3f, $2f, $22, $1f, $16, $17, $16
195fd     16 1E 27 28 
19601     25 1E 10 04 
19605     FF FA F9 FB 
19609     02 08 12 17 | 	byte	$16, $1e, $27, $28, $25, $1e, $10, $04, $ff, $fa, $f9, $fb, $02, $08, $12, $17
1960d     1D 1B 1A 17 
19611     0D 00 F8 F9 
19615     EF E1 D4 D2 
19619     D0 DA E8 F5 | 	byte	$1d, $1b, $1a, $17, $0d, $00, $f8, $f9, $ef, $e1, $d4, $d2, $d0, $da, $e8, $f5
1961d     FF FD FE F3 
19621     EB E2 DA DD 
19625     DB DD E7 ED 
19629     FE 12 19 14 | 	byte	$ff, $fd, $fe, $f3, $eb, $e2, $da, $dd, $db, $dd, $e7, $ed, $fe, $12, $19, $14
1962d     08 FD F0 EB 
19631     EA F2 F8 01 
19635     0C 11 18 14 
19639     12 0A 09 0A | 	byte	$08, $fd, $f0, $eb, $ea, $f2, $f8, $01, $0c, $11, $18, $14, $12, $0a, $09, $0a
1963d     11 10 10 0D 
19641     00 00 00 07 
19645     0E 14 13 0E 
19649     05 EE E7 E2 | 	byte	$11, $10, $10, $0d, $00, $00, $00, $07, $0e, $14, $13, $0e, $05, $ee, $e7, $e2
1964d     D9 DB D6 D6 
19651     D6 D6 DE EC 
19655     F1 F7 F5 F5 
19659     F6 00 0B 1A | 	byte	$d9, $db, $d6, $d6, $d6, $d6, $de, $ec, $f1, $f7, $f5, $f5, $f6, $00, $0b, $1a
1965d     2C 37 41 3F 
19661     3E 2E 1B 0B 
19665     00 FC FE FE 
19669     04 02 F7 F6 | 	byte	$2c, $37, $41, $3f, $3e, $2e, $1b, $0b, $00, $fc, $fe, $fe, $04, $02, $f7, $f6
1966d     F6 FB 04 12 
19671     20 2C 38 30 
19675     2E 2D 2D 32 
19679     32 2D 23 18 | 	byte	$f6, $fb, $04, $12, $20, $2c, $38, $30, $2e, $2d, $2d, $32, $32, $2d, $23, $18
1967d     12 10 08 01 
19681     FA E9 E2 D5 
19685     D7 D8 D3 CD 
19689     D4 D6 DE DD | 	byte	$12, $10, $08, $01, $fa, $e9, $e2, $d5, $d7, $d8, $d3, $cd, $d4, $d6, $de, $dd
1968d     DF DD E5 EB 
19691     01 11 1F 27 
19695     23 19 1A 18 
19699     1D 27 2D 2E | 	byte	$df, $dd, $e5, $eb, $01, $11, $1f, $27, $23, $19, $1a, $18, $1d, $27, $2d, $2e
1969d     2E 13 02 F4 
196a1     EA E7 E2 E3 
196a5     E0 E3 F4 05 
196a9     11 18 17 12 | 	byte	$2e, $13, $02, $f4, $ea, $e7, $e2, $e3, $e0, $e3, $f4, $05, $11, $18, $17, $12
196ad     08 00 01 00 
196b1     F9 FA FA F9 
196b5     FA F9 F1 E8 
196b9     DF D7 DB C9 | 	byte	$08, $00, $01, $00, $f9, $fa, $fa, $f9, $fa, $f9, $f1, $e8, $df, $d7, $db, $c9
196bd     CB C1 BD BC 
196c1     BD C2 D1 E8 
196c5     03 12 1E 1A 
196c9     18 18 18 18 | 	byte	$cb, $c1, $bd, $bc, $bd, $c2, $d1, $e8, $03, $12, $1e, $1a, $18, $18, $18, $18
196cd     1A 18 17 14 
196d1     16 22 23 20 
196d5     1B 11 09 0A 
196d9     11 1C 27 2D | 	byte	$1a, $18, $17, $14, $16, $22, $23, $20, $1b, $11, $09, $0a, $11, $1c, $27, $2d
196dd     33 32 31 2C 
196e1     1D 10 09 01 
196e5     FE 01 01 F9 
196e9     FA F5 F3 F2 | 	byte	$33, $32, $31, $2c, $1d, $10, $09, $01, $fe, $01, $01, $f9, $fa, $f5, $f3, $f2
196ed     F0 F7 FC 03 
196f1     F8 E4 DB DC 
196f5     DC E7 F0 F8 
196f9     00 04 0B 20 | 	byte	$f0, $f7, $fc, $03, $f8, $e4, $db, $dc, $dc, $e7, $f0, $f8, $00, $04, $0b, $20
196fd     30 33 34 2A 
19701     1C 10 0E 10 
19705     10 0F 05 05 
19709     F9 F1 E8 E3 | 	byte	$30, $33, $34, $2a, $1c, $10, $0e, $10, $10, $0f, $05, $05, $f9, $f1, $e8, $e3
1970d     E4 E6 F3 03 
19711     17 1E 21 20 
19715     28 25 28 38 
19719     3A 37 2B 0D | 	byte	$e4, $e6, $f3, $03, $17, $1e, $21, $20, $28, $25, $28, $38, $3a, $37, $2b, $0d
1971d     F0 E0 D3 D3 
19721     D3 CE CA C6 
19725     C0 C6 C6 D1 
19729     D7 D3 CB CA | 	byte	$f0, $e0, $d3, $d3, $d3, $ce, $ca, $c6, $c0, $c6, $c6, $d1, $d7, $d3, $cb, $ca
1972d     CC E0 F6 10 
19731     1F 32 36 35 
19735     30 25 1D 0F 
19739     03 05 00 F5 | 	byte	$cc, $e0, $f6, $10, $1f, $32, $36, $35, $30, $25, $1d, $0f, $03, $05, $00, $f5
1973d     EA DF D7 D3 
19741     DA F2 01 12 
19745     14 0E 08 06 
19749     07 0F 18 1D | 	byte	$ea, $df, $d7, $d3, $da, $f2, $01, $12, $14, $0e, $08, $06, $07, $0f, $18, $1d
1974d     26 21 16 22 
19751     1B 1B 1A 10 
19755     08 02 FE 00 
19759     01 F7 EA E1 | 	byte	$26, $21, $16, $22, $1b, $1b, $1a, $10, $08, $02, $fe, $00, $01, $f7, $ea, $e1
1975d     D4 CA C4 C2 
19761     BB BF D1 EE 
19765     08 1D 2E 3F 
19769     40 39 35 37 | 	byte	$d4, $ca, $c4, $c2, $bb, $bf, $d1, $ee, $08, $1d, $2e, $3f, $40, $39, $35, $37
1976d     3A 45 37 27 
19771     11 01 F8 FA 
19775     FB 07 0B 09 
19779     0A 14 18 22 | 	byte	$3a, $45, $37, $27, $11, $01, $f8, $fa, $fb, $07, $0b, $09, $0a, $14, $18, $22
1977d     26 24 19 18 
19781     13 16 17 17 
19785     12 09 FC F0 
19789     E6 E2 DB DC | 	byte	$26, $24, $19, $18, $13, $16, $17, $17, $12, $09, $fc, $f0, $e6, $e2, $db, $dc
1978d     D9 DE D8 D6 
19791     D3 D4 D6 D9 
19795     E3 F0 02 12 
19799     14 13 10 0D | 	byte	$d9, $de, $d8, $d6, $d3, $d4, $d6, $d9, $e3, $f0, $02, $12, $14, $13, $10, $0d
1979d     0B 0B 0D 0D 
197a1     0B 0A 07 07 
197a5     07 09 07 F7 
197a9     E5 DA DC E6 | 	byte	$0b, $0b, $0d, $0d, $0b, $0a, $07, $07, $07, $09, $07, $f7, $e5, $da, $dc, $e6
197ad     FB 09 1B 26 
197b1     21 1F 1C 1B 
197b5     18 0E 00 FE 
197b9     F5 F0 E7 E6 | 	byte	$fb, $09, $1b, $26, $21, $1f, $1c, $1b, $18, $0e, $00, $fe, $f5, $f0, $e7, $e6
197bd     DB DB DD E7 
197c1     EF FC EC D0 
197c5     C1 B6 AD B1 
197c9     C1 CF E1 F1 | 	byte	$db, $db, $dd, $e7, $ef, $fc, $ec, $d0, $c1, $b6, $ad, $b1, $c1, $cf, $e1, $f1
197cd     F9 0E 25 3F 
197d1     57 5D 5B 58 
197d5     50 46 46 3C 
197d9     2F 25 09 EF | 	byte	$f9, $0e, $25, $3f, $57, $5d, $5b, $58, $50, $46, $46, $3c, $2f, $25, $09, $ef
197dd     DB CB C9 CC 
197e1     D9 F2 03 13 
197e5     24 30 33 31 
197e9     31 34 3B 40 | 	byte	$db, $cb, $c9, $cc, $d9, $f2, $03, $13, $24, $30, $33, $31, $31, $34, $3b, $40
197ed     32 24 12 06 
197f1     FD FA FE 04 
197f5     00 F8 EF E0 
197f9     CE CB CE CC | 	byte	$32, $24, $12, $06, $fd, $fa, $fe, $04, $00, $f8, $ef, $e0, $ce, $cb, $ce, $cc
197fd     CC CB CB D6 
19801     E4 F1 03 0E 
19805     1B 1A 1B 1B 
19809     20 20 20 23 | 	byte	$cc, $cb, $cb, $d6, $e4, $f1, $03, $0e, $1b, $1a, $1b, $1b, $20, $20, $20, $23
1980d     1E 17 1A 15 
19811     09 FE F9 F9 
19815     00 0E 0B 06 
19819     05 FB F3 F6 | 	byte	$1e, $17, $1a, $15, $09, $fe, $f9, $f9, $00, $0e, $0b, $06, $05, $fb, $f3, $f6
1981d     F6 00 04 0A 
19821     09 04 03 06 
19825     0E 0D 05 FE 
19829     F8 F6 F6 F9 | 	byte	$f6, $00, $04, $0a, $09, $04, $03, $06, $0e, $0d, $05, $fe, $f8, $f6, $f6, $f9
1982d     F4 E3 D9 CE 
19831     C3 C0 C2 BF 
19835     C2 CD CE DF 
19839     ED 06 13 1F | 	byte	$f4, $e3, $d9, $ce, $c3, $c0, $c2, $bf, $c2, $cd, $ce, $df, $ed, $06, $13, $1f
1983d     26 2B 34 35 
19841     2B 17 05 F7 
19845     E1 D6 D6 D8 
19849     E2 F4 05 08 | 	byte	$26, $2b, $34, $35, $2b, $17, $05, $f7, $e1, $d6, $d6, $d8, $e2, $f4, $05, $08
1984d     19 2F 3F 4A 
19851     51 4C 45 3E 
19855     38 2E 21 18 
19859     05 F3 E0 D5 | 	byte	$19, $2f, $3f, $4a, $51, $4c, $45, $3e, $38, $2e, $21, $18, $05, $f3, $e0, $d5
1985d     D3 D6 D9 E3 
19861     E7 DB DF E0 
19865     E3 E5 E6 EB 
19869     FA 01 04 06 | 	byte	$d3, $d6, $d9, $e3, $e7, $db, $df, $e0, $e3, $e5, $e6, $eb, $fa, $01, $04, $06
1986d     0E 15 1E 2C 
19871     3A 44 43 44 
19875     3D 2A 19 11 
19879     09 0A FE EF | 	byte	$0e, $15, $1e, $2c, $3a, $44, $43, $44, $3d, $2a, $19, $11, $09, $0a, $fe, $ef
1987d     E2 E4 E9 F3 
19881     02 0C 11 0F 
19885     08 07 0A 0B 
19889     15 19 12 0E | 	byte	$e2, $e4, $e9, $f3, $02, $0c, $11, $0f, $08, $07, $0a, $0b, $15, $19, $12, $0e
1988d     0F 14 12 12 
19891     12 0F 0F 0A 
19895     FB E5 C5 AC 
19899     9E 8D 98 A1 | 	byte	$0f, $14, $12, $12, $12, $0f, $0f, $0a, $fb, $e5, $c5, $ac, $9e, $8d, $98, $a1
1989d     AE C2 D4 DF 
198a1     EB FF 17 30 
198a5     41 48 46 44 
198a9     43 41 3C 2D | 	byte	$ae, $c2, $d4, $df, $eb, $ff, $17, $30, $41, $48, $46, $44, $43, $41, $3c, $2d
198ad     20 09 F9 E1 
198b1     D2 C7 C5 CB 
198b5     D1 D7 E8 F2 
198b9     05 13 17 1D | 	byte	$20, $09, $f9, $e1, $d2, $c7, $c5, $cb, $d1, $d7, $e8, $f2, $05, $13, $17, $1d
198bd     26 25 19 0C 
198c1     00 EF E7 E2 
198c5     E3 EB FA 06 
198c9     0D 0A 02 F4 | 	byte	$26, $25, $19, $0c, $00, $ef, $e7, $e2, $e3, $eb, $fa, $06, $0d, $0a, $02, $f4
198cd     F6 F6 F7 FC 
198d1     FA F7 F7 F7 
198d5     FC FE FE 00 
198d9     01 02 0C 15 | 	byte	$f6, $f6, $f7, $fc, $fa, $f7, $f7, $f7, $fc, $fe, $fe, $00, $01, $02, $0c, $15
198dd     22 2F 32 2C 
198e1     2D 26 24 1C 
198e5     15 04 00 FC 
198e9     F6 F9 03 08 | 	byte	$22, $2f, $32, $2c, $2d, $26, $24, $1c, $15, $04, $00, $fc, $f6, $f9, $03, $08
198ed     0A 15 22 29 
198f1     2D 32 32 22 
198f5     10 04 06 06 
198f9     09 0A 0A 09 | 	byte	$0a, $15, $22, $29, $2d, $32, $32, $22, $10, $04, $06, $06, $09, $0a, $0a, $09
198fd     06 05 00 F5 
19901     DC C3 AF A5 
19905     A1 AA BB CD 
19909     D9 E6 FA 08 | 	byte	$06, $05, $00, $f5, $dc, $c3, $af, $a5, $a1, $aa, $bb, $cd, $d9, $e6, $fa, $08
1990d     20 31 41 49 
19911     4F 4E 3A 2D 
19915     1B 01 EC DC 
19919     D0 C9 CC CF | 	byte	$20, $31, $41, $49, $4f, $4e, $3a, $2d, $1b, $01, $ec, $dc, $d0, $c9, $cc, $cf
1991d     DB E1 E7 F5 
19921     03 17 29 3A 
19925     3C 3A 39 37 
19929     2B 22 15 0E | 	byte	$db, $e1, $e7, $f5, $03, $17, $29, $3a, $3c, $3a, $39, $37, $2b, $22, $15, $0e
1992d     FE F5 F0 E1 
19931     E6 E9 E4 DB 
19935     D2 C4 BD BE 
19939     BD BF C2 CC | 	byte	$fe, $f5, $f0, $e1, $e6, $e9, $e4, $db, $d2, $c4, $bd, $be, $bd, $bf, $c2, $cc
1993d     C5 CD D8 DD 
19941     DF E7 FA 0A 
19945     22 39 4A 53 
19949     4E 44 43 3C | 	byte	$c5, $cd, $d8, $dd, $df, $e7, $fa, $0a, $22, $39, $4a, $53, $4e, $44, $43, $3c
1994d     3A 33 2A 18 
19951     05 FC F1 F2 
19955     F0 EB EC EE 
19959     F0 FC 0A 17 | 	byte	$3a, $33, $2a, $18, $05, $fc, $f1, $f2, $f0, $eb, $ec, $ee, $f0, $fc, $0a, $17
1995d     1E 1C 1B 1A 
19961     1B 22 23 24 
19965     24 23 0E 05 
19969     07 FD E4 D5 | 	byte	$1e, $1c, $1b, $1a, $1b, $22, $23, $24, $24, $23, $0e, $05, $07, $fd, $e4, $d5
1996d     CC C9 C7 CF 
19971     DB E0 E7 E9 
19975     F9 06 1C 32 
19979     3C 40 42 42 | 	byte	$cc, $c9, $c7, $cf, $db, $e0, $e7, $e9, $f9, $06, $1c, $32, $3c, $40, $42, $42
1997d     3D 39 2E 17 
19981     05 F5 E9 E2 
19985     DE E5 E5 E4 
19989     E9 F2 FD 0A | 	byte	$3d, $39, $2e, $17, $05, $f5, $e9, $e2, $de, $e5, $e5, $e4, $e9, $f2, $fd, $0a
1998d     19 1E 29 28 
19991     14 0C FF F3 
19995     E5 D9 D2 D4 
19999     D9 F1 FE 08 | 	byte	$19, $1e, $29, $28, $14, $0c, $ff, $f3, $e5, $d9, $d2, $d4, $d9, $f1, $fe, $08
1999d     0C 0D 0A FF 
199a1     00 FD F3 EB 
199a5     E3 D5 D7 DC 
199a9     E2 F0 F4 FD | 	byte	$0c, $0d, $0a, $ff, $00, $fd, $f3, $eb, $e3, $d5, $d7, $dc, $e2, $f0, $f4, $fd
199ad     03 05 0F 15 
199b1     1B 15 11 08 
199b5     02 03 02 01 
199b9     01 FE E9 DE | 	byte	$03, $05, $0f, $15, $1b, $15, $11, $08, $02, $03, $02, $01, $01, $fe, $e9, $de
199bd     DB DC DB DB 
199c1     E0 E7 FA 0F 
199c5     21 39 37 36 
199c9     31 34 35 3A | 	byte	$db, $dc, $db, $db, $e0, $e7, $fa, $0f, $21, $39, $37, $36, $31, $34, $35, $3a
199cd     3A 33 2C 1D 
199d1     0A 06 FF EF 
199d5     DC C5 BB B7 
199d9     B6 BE C8 D1 | 	byte	$3a, $33, $2c, $1d, $0a, $06, $ff, $ef, $dc, $c5, $bb, $b7, $b6, $be, $c8, $d1
199dd     E3 F5 05 18 
199e1     29 3B 47 4C 
199e5     3F 32 2B 23 
199e9     1B 0D 03 F8 | 	byte	$e3, $f5, $05, $18, $29, $3b, $47, $4c, $3f, $32, $2b, $23, $1b, $0d, $03, $f8
199ed     EE F2 F7 FB 
199f1     FB F9 F4 FA 
199f5     0A 1E 2A 2D 
199f9     2E 27 22 21 | 	byte	$ee, $f2, $f7, $fb, $fb, $f9, $f4, $fa, $0a, $1e, $2a, $2d, $2e, $27, $22, $21
199fd     15 0D 00 FE 
19a01     F5 F6 F6 00 
19a05     00 01 FE 01 
19a09     FA F1 EC E5 | 	byte	$15, $0d, $00, $fe, $f5, $f6, $f6, $00, $00, $01, $fe, $01, $fa, $f1, $ec, $e5
19a0d     E0 D7 C3 B1 
19a11     AF B2 BF CC 
19a15     D1 DF EB 02 
19a19     13 2F 3D 44 | 	byte	$e0, $d7, $c3, $b1, $af, $b2, $bf, $cc, $d1, $df, $eb, $02, $13, $2f, $3d, $44
19a1d     3F 3D 3E 3D 
19a21     3D 38 29 1D 
19a25     0A FA F3 F0 
19a29     EE EE F0 EE | 	byte	$3f, $3d, $3e, $3d, $3d, $38, $29, $1d, $0a, $fa, $f3, $f0, $ee, $ee, $f0, $ee
19a2d     EE F6 F6 F3 
19a31     F2 F0 EB F1 
19a35     F8 01 09 0F 
19a39     09 FB F4 F0 | 	byte	$ee, $f6, $f6, $f3, $f2, $f0, $eb, $f1, $f8, $01, $09, $0f, $09, $fb, $f4, $f0
19a3d     EB E5 D6 CC 
19a41     C4 C0 CC D9 
19a45     DD ED F7 02 
19a49     1C 2D 42 49 | 	byte	$eb, $e5, $d6, $cc, $c4, $c0, $cc, $d9, $dd, $ed, $f7, $02, $1c, $2d, $42, $49
19a4d     46 3E 34 27 
19a51     1E 14 0C FF 
19a55     FA F1 F3 F5 
19a59     00 03 03 05 | 	byte	$46, $3e, $34, $27, $1e, $14, $0c, $ff, $fa, $f1, $f3, $f5, $00, $03, $03, $05
19a5d     05 07 0F 1D 
19a61     27 2D 2D 19 
19a65     15 07 0A 07 
19a69     05 00 F7 F2 | 	byte	$05, $07, $0f, $1d, $27, $2d, $2d, $19, $15, $07, $0a, $07, $05, $00, $f7, $f2
19a6d     F6 00 03 05 
19a71     06 09 0A 11 
19a75     12 12 07 F2 
19a79     E2 D4 D2 D4 | 	byte	$f6, $00, $03, $05, $06, $09, $0a, $11, $12, $12, $07, $f2, $e2, $d4, $d2, $d4
19a7d     E4 F1 00 0C 
19a81     1A 1D 24 25 
19a85     20 1F 0F 03 
19a89     FF F9 FA F7 | 	byte	$e4, $f1, $00, $0c, $1a, $1d, $24, $25, $20, $1f, $0f, $03, $ff, $f9, $fa, $f7
19a8d     F6 EA E4 DE 
19a91     DC D7 D8 D6 
19a95     D3 D6 E1 F6 
19a99     09 1A 28 2A | 	byte	$f6, $ea, $e4, $de, $dc, $d7, $d8, $d6, $d3, $d6, $e1, $f6, $09, $1a, $28, $2a
19a9d     2A 37 44 47 
19aa1     44 3D 2A 10 
19aa5     02 FC FE 00 
19aa9     F8 EA DE D1 | 	byte	$2a, $37, $44, $47, $44, $3d, $2a, $10, $02, $fc, $fe, $00, $f8, $ea, $de, $d1
19aad     C4 B2 AB A7 
19ab1     A9 BB CE E9 
19ab5     07 19 1E 16 
19ab9     14 13 10 05 | 	byte	$c4, $b2, $ab, $a7, $a9, $bb, $ce, $e9, $07, $19, $1e, $16, $14, $13, $10, $05
19abd     01 F5 EB E7 
19ac1     EA FA 0D 1E 
19ac5     2A 2D 2A 2D 
19ac9     30 31 2E 23 | 	byte	$01, $f5, $eb, $e7, $ea, $fa, $0d, $1e, $2a, $2d, $2a, $2d, $30, $31, $2e, $23
19acd     15 03 FD F8 
19ad1     FA FA 02 03 
19ad5     08 0F 15 13 
19ad9     12 0F 08 07 | 	byte	$15, $03, $fd, $f8, $fa, $fa, $02, $03, $08, $0f, $15, $13, $12, $0f, $08, $07
19add     07 06 06 09 
19ae1     06 EF DF CF 
19ae5     CE D5 DE EC 
19ae9     F1 F6 FC FD | 	byte	$07, $06, $06, $09, $06, $ef, $df, $cf, $ce, $d5, $de, $ec, $f1, $f6, $fc, $fd
19aed     07 0C 16 1E 
19af1     1F 1F 21 26 
19af5     25 23 19 11 
19af9     09 0D 0A 11 | 	byte	$07, $0c, $16, $1e, $1f, $1f, $21, $26, $25, $23, $19, $11, $09, $0d, $0a, $11
19afd     13 16 1B 18 
19b01     17 12 03 FE 
19b05     F4 E6 E2 DB 
19b09     DF EA EF EC | 	byte	$13, $16, $1b, $18, $17, $12, $03, $fe, $f4, $e6, $e2, $db, $df, $ea, $ef, $ec
19b0d     E9 E6 E4 E5 
19b11     E8 E8 E0 D4 
19b15     D4 D6 D8 E3 
19b19     F5 FD 0C 19 | 	byte	$e9, $e6, $e4, $e5, $e8, $e8, $e0, $d4, $d4, $d6, $d8, $e3, $f5, $fd, $0c, $19
19b1d     2B 3D 50 57 
19b21     4E 3A 24 13 
19b25     0F 0A 0D 0B 
19b29     04 F6 F2 E8 | 	byte	$2b, $3d, $50, $57, $4e, $3a, $24, $13, $0f, $0a, $0d, $0b, $04, $f6, $f2, $e8
19b2d     E3 DC DF DC 
19b31     DD E7 EF FD 
19b35     00 FE F4 EB 
19b39     EC EA E9 E4 | 	byte	$e3, $dc, $df, $dc, $dd, $e7, $ef, $fd, $00, $fe, $f4, $eb, $ec, $ea, $e9, $e4
19b3d     E3 D9 DC EC 
19b41     FA 0B 1C 25 
19b45     29 2F 2D 23 
19b49     1B 17 0D FA | 	byte	$e3, $d9, $dc, $ec, $fa, $0b, $1c, $25, $29, $2f, $2d, $23, $1b, $17, $0d, $fa
19b4d     E8 DD DA DD 
19b51     EF 02 13 24 
19b55     2F 33 27 1F 
19b59     19 0B FF 02 | 	byte	$e8, $dd, $da, $dd, $ef, $02, $13, $24, $2f, $33, $27, $1f, $19, $0b, $ff, $02
19b5d     01 06 0A 07 
19b61     FD FD FE 08 
19b65     0E 1A 16 0C 
19b69     FE F5 F6 F3 | 	byte	$01, $06, $0a, $07, $fd, $fd, $fe, $08, $0e, $1a, $16, $0c, $fe, $f5, $f6, $f3
19b6d     F6 F9 00 06 
19b71     05 07 0F 19 
19b75     1D 1C 17 16 
19b79     11 10 15 1F | 	byte	$f6, $f9, $00, $06, $05, $07, $0f, $19, $1d, $1c, $17, $16, $11, $10, $15, $1f
19b7d     1B 16 16 09 
19b81     FC 00 00 E0 
19b85     F6 F5 04 0D 
19b89     13 14 16 0C | 	byte	$1b, $16, $16, $09, $fc, $00, $00, $e0, $f6, $f5, $04, $0d, $13, $14, $16, $0c
19b8d     0E 0F 12 17 
19b91     17 0C FD F0 
19b95     EC EE F8 08 
19b99     06 0E 0F 0D | 	byte	$0e, $0f, $12, $17, $17, $0c, $fd, $f0, $ec, $ee, $f8, $08, $06, $0e, $0f, $0d
19b9d     0A 07 06 01 
19ba1     01 FF FF F8 
19ba5     F7 F2 E3 D9 
19ba9     BC AE AB A9 | 	byte	$0a, $07, $06, $01, $01, $ff, $ff, $f8, $f7, $f2, $e3, $d9, $bc, $ae, $ab, $a9
19bad     AB AC B8 C6 
19bb1     DA ED FD 05 
19bb5     12 1C 2B 39 
19bb9     4B 57 59 4E | 	byte	$ab, $ac, $b8, $c6, $da, $ed, $fd, $05, $12, $1c, $2b, $39, $4b, $57, $59, $4e
19bbd     35 16 F7 EE 
19bc1     E9 EA E9 DF 
19bc5     D1 CE CE CE 
19bc9     D5 E3 E6 FE | 	byte	$35, $16, $f7, $ee, $e9, $ea, $e9, $df, $d1, $ce, $ce, $ce, $d5, $e3, $e6, $fe
19bcd     0E 1F 20 29 
19bd1     2D 27 1B 16 
19bd5     0D 09 FF F9 
19bd9     F7 EC E4 E9 | 	byte	$0e, $1f, $20, $29, $2d, $27, $1b, $16, $0d, $09, $ff, $f9, $f7, $ec, $e4, $e9
19bdd     DF E3 E4 EE 
19be1     F7 04 12 20 
19be5     2A 2E 2A 2D 
19be9     2A 2D 38 40 | 	byte	$df, $e3, $e4, $ee, $f7, $04, $12, $20, $2a, $2e, $2a, $2d, $2a, $2d, $38, $40
19bed     3F 38 1A 06 
19bf1     F1 E0 D7 DB 
19bf5     CE D3 DA DC 
19bf9     F1 FD FF F8 | 	byte	$3f, $38, $1a, $06, $f1, $e0, $d7, $db, $ce, $d3, $da, $dc, $f1, $fd, $ff, $f8
19bfd     E7 E2 D9 DD 
19c01     D1 CD CE CB 
19c05     D0 D7 DE ED 
19c09     F1 F8 02 07 | 	byte	$e7, $e2, $d9, $dd, $d1, $cd, $ce, $cb, $d0, $d7, $de, $ed, $f1, $f8, $02, $07
19c0d     06 0E 06 05 
19c11     05 0A 0E 15 
19c15     24 2E 33 38 
19c19     34 2A 2D 2D | 	byte	$06, $0e, $06, $05, $05, $0a, $0e, $15, $24, $2e, $33, $38, $34, $2a, $2d, $2d
19c1d     2C 2A 22 21 
19c21     10 03 F9 EA 
19c25     E7 E2 C4 B9 
19c29     B4 AB AD AF | 	byte	$2c, $2a, $22, $21, $10, $03, $f9, $ea, $e7, $e2, $c4, $b9, $b4, $ab, $ad, $af
19c2d     AF B1 BB C9 
19c31     D6 EA E4 EF 
19c35     EE FE 01 11 
19c39     1A 20 1F 1D | 	byte	$af, $b1, $bb, $c9, $d6, $ea, $e4, $ef, $ee, $fe, $01, $11, $1a, $20, $1f, $1d
19c3d     1C 12 0D 04 
19c41     F7 E9 D5 D3 
19c45     C2 CC D3 DD 
19c49     F1 04 17 2F | 	byte	$1c, $12, $0d, $04, $f7, $e9, $d5, $d3, $c2, $cc, $d3, $dd, $f1, $04, $17, $2f
19c4d     41 5D 69 6E 
19c51     62 4A 3A 1F 
19c55     07 F9 E8 DF 
19c59     E0 DD D8 E9 | 	byte	$41, $5d, $69, $6e, $62, $4a, $3a, $1f, $07, $f9, $e8, $df, $e0, $dd, $d8, $e9
19c5d     E4 EB ED F2 
19c61     F6 FA 01 08 
19c65     07 07 0C 10 
19c69     19 1D 22 1C | 	byte	$e4, $eb, $ed, $f2, $f6, $fa, $01, $08, $07, $07, $0c, $10, $19, $1d, $22, $1c
19c6d     15 0C FF F5 
19c71     F2 DA CF D3 
19c75     C9 D1 E5 F6 
19c79     0C 14 12 07 | 	byte	$15, $0c, $ff, $f5, $f2, $da, $cf, $d3, $c9, $d1, $e5, $f6, $0c, $14, $12, $07
19c7d     07 05 07 0C 
19c81     10 0F 0E FE 
19c85     F9 F2 E1 DE 
19c89     D8 D9 E1 E0 | 	byte	$07, $05, $07, $0c, $10, $0f, $0e, $fe, $f9, $f2, $e1, $de, $d8, $d9, $e1, $e0
19c8d     E7 F2 00 08 
19c91     1B 2B 2D 32 
19c95     38 36 1F 0C 
19c99     FB ED E1 DC | 	byte	$e7, $f2, $00, $08, $1b, $2b, $2d, $32, $38, $36, $1f, $0c, $fb, $ed, $e1, $dc
19c9d     D5 DC E2 F0 
19ca1     F4 FF 09 06 
19ca5     F2 D7 C7 B5 
19ca9     B4 BB BC CE | 	byte	$d5, $dc, $e2, $f0, $f4, $ff, $09, $06, $f2, $d7, $c7, $b5, $b4, $bb, $bc, $ce
19cad     E0 E7 FB 12 
19cb1     19 31 32 34 
19cb5     2C 26 18 11 
19cb9     04 FB FE F6 | 	byte	$e0, $e7, $fb, $12, $19, $31, $32, $34, $2c, $26, $18, $11, $04, $fb, $fe, $f6
19cbd     03 FE FF FE 
19cc1     F6 EF DC D4 
19cc5     CF C5 CC DB 
19cc9     E2 EF FD 0A | 	byte	$03, $fe, $ff, $fe, $f6, $ef, $dc, $d4, $cf, $c5, $cc, $db, $e2, $ef, $fd, $0a
19ccd     20 2D 2F 21 
19cd1     21 16 1A 1A 
19cd5     17 14 0C F6 
19cd9     EF E7 E2 E1 | 	byte	$20, $2d, $2f, $21, $21, $16, $1a, $1a, $17, $14, $0c, $f6, $ef, $e7, $e2, $e1
19cdd     E3 E4 EF EE 
19ce1     FB 08 15 2E 
19ce5     48 58 63 60 
19ce9     5D 4B 2B 17 | 	byte	$e3, $e4, $ef, $ee, $fb, $08, $15, $2e, $48, $58, $63, $60, $5d, $4b, $2b, $17
19ced     FB E7 E1 C5 
19cf1     C5 C3 CB DB 
19cf5     EE FA 0B 12 
19cf9     05 F7 E4 C9 | 	byte	$fb, $e7, $e1, $c5, $c5, $c3, $cb, $db, $ee, $fa, $0b, $12, $05, $f7, $e4, $c9
19cfd     BB B9 B9 BC 
19d01     BF C7 D1 DE 
19d05     E8 F5 FF 03 
19d09     00 EE E4 DE | 	byte	$bb, $b9, $b9, $bc, $bf, $c7, $d1, $de, $e8, $f5, $ff, $03, $00, $ee, $e4, $de
19d0d     E0 F0 04 1E 
19d11     36 4E 67 6D 
19d15     75 6E 64 4C 
19d19     36 16 F3 E1 | 	byte	$e0, $f0, $04, $1e, $36, $4e, $67, $6d, $75, $6e, $64, $4c, $36, $16, $f3, $e1
19d1d     D0 CD C8 D1 
19d21     DF E4 E9 D6 
19d25     D1 CA CA CA 
19d29     CC CF D0 DA | 	byte	$d0, $cd, $c8, $d1, $df, $e4, $e9, $d6, $d1, $ca, $ca, $ca, $cc, $cf, $d0, $da
19d2d     E3 DC E8 ED 
19d31     EE F3 F0 E3 
19d35     E4 E4 EB F2 
19d39     FC 09 12 0A | 	byte	$e3, $dc, $e8, $ed, $ee, $f3, $f0, $e3, $e4, $e4, $eb, $f2, $fc, $09, $12, $0a
19d3d     09 FE F8 E9 
19d41     DC D2 CD CB 
19d45     D5 DA F8 0E 
19d49     27 46 5D 69 | 	byte	$09, $fe, $f8, $e9, $dc, $d2, $cd, $cb, $d5, $da, $f8, $0e, $27, $46, $5d, $69
19d4d     6C 52 43 28 
19d51     19 12 0D 0D 
19d55     01 FD FE F9 
19d59     FA F2 F2 ED | 	byte	$6c, $52, $43, $28, $19, $12, $0d, $0d, $01, $fd, $fe, $f9, $fa, $f2, $f2, $ed
19d5d     E3 D4 C8 B5 
19d61     B6 C5 D8 EF 
19d65     06 17 23 31 
19d69     38 40 34 2C | 	byte	$e3, $d4, $c8, $b5, $b6, $c5, $d8, $ef, $06, $17, $23, $31, $38, $40, $34, $2c
19d6d     1D 01 EE D7 
19d71     D2 D3 D6 E8 
19d75     03 17 1E 1D 
19d79     16 0D 05 05 | 	byte	$1d, $01, $ee, $d7, $d2, $d3, $d6, $e8, $03, $17, $1e, $1d, $16, $0d, $05, $05
19d7d     FE F9 F4 EA 
19d81     E4 DE DC D7 
19d85     D8 DB D6 CA 
19d89     C1 C2 CD E5 | 	byte	$fe, $f9, $f4, $ea, $e4, $de, $dc, $d7, $d8, $db, $d6, $ca, $c1, $c2, $cd, $e5
19d8d     F7 11 20 37 
19d91     37 39 3E 38 
19d95     31 1C 09 ED 
19d99     D0 BD B7 B9 | 	byte	$f7, $11, $20, $37, $37, $39, $3e, $38, $31, $1c, $09, $ed, $d0, $bd, $b7, $b9
19d9d     C4 D6 DF F4 
19da1     F7 EC DE D4 
19da5     CC CB D0 DB 
19da9     EB FF 11 1F | 	byte	$c4, $d6, $df, $f4, $f7, $ec, $de, $d4, $cc, $cb, $d0, $db, $eb, $ff, $11, $1f
19dad     32 36 3B 3A 
19db1     30 1B 0A F4 
19db5     EE E1 DF EC 
19db9     E9 EA EC EA | 	byte	$32, $36, $3b, $3a, $30, $1b, $0a, $f4, $ee, $e1, $df, $ec, $e9, $ea, $ec, $ea
19dbd     EF FB FA F2 
19dc1     E8 DA C1 A7 
19dc5     A3 A4 B4 C7 
19dc9     E1 FC 15 1A | 	byte	$ef, $fb, $fa, $f2, $e8, $da, $c1, $a7, $a3, $a4, $b4, $c7, $e1, $fc, $15, $1a
19dcd     1D 1D 25 2B 
19dd1     31 3B 37 37 
19dd5     30 27 1A 07 
19dd9     00 F3 F1 F0 | 	byte	$1d, $1d, $25, $2b, $31, $3b, $37, $37, $30, $27, $1a, $07, $00, $f3, $f1, $f0
19ddd     E0 DE DD E8 
19de1     F5 11 1F 2A 
19de5     33 32 32 35 
19de9     34 2F 16 05 | 	byte	$e0, $de, $dd, $e8, $f5, $11, $1f, $2a, $33, $32, $32, $35, $34, $2f, $16, $05
19ded     EA D9 D6 D6 
19df1     E6 F3 00 13 
19df5     0E FD DC CF 
19df9     BA AF AB AF | 	byte	$ea, $d9, $d6, $d6, $e6, $f3, $00, $13, $0e, $fd, $dc, $cf, $ba, $af, $ab, $af
19dfd     B1 C1 C8 DC 
19e01     E5 EB FA FC 
19e05     F9 EF DD D1 
19e09     CA CB DB F6 | 	byte	$b1, $c1, $c8, $dc, $e5, $eb, $fa, $fc, $f9, $ef, $dd, $d1, $ca, $cb, $db, $f6
19e0d     07 2B 3E 54 
19e11     60 6C 78 75 
19e15     65 4F 20 FD 
19e19     E1 CD C5 C0 | 	byte	$07, $2b, $3e, $54, $60, $6c, $78, $75, $65, $4f, $20, $fd, $e1, $cd, $c5, $c0
19e1d     C2 CC D0 D2 
19e21     CF CF D0 D2 
19e25     D7 DD DB D6 
19e29     D6 D9 E3 E1 | 	byte	$c2, $cc, $d0, $d2, $cf, $cf, $d0, $d2, $d7, $dd, $db, $d6, $d6, $d9, $e3, $e1
19e2d     E9 EA E8 E9 
19e31     E9 E4 E8 E0 
19e35     E7 EE F3 02 
19e39     FE F6 F6 F3 | 	byte	$e9, $ea, $e8, $e9, $e9, $e4, $e8, $e0, $e7, $ee, $f3, $02, $fe, $f6, $f6, $f3
19e3d     F5 FC FD FD 
19e41     EB E4 DB D7 
19e45     E3 F0 02 14 
19e49     2E 32 35 2F | 	byte	$f5, $fc, $fd, $fd, $eb, $e4, $db, $d7, $e3, $f0, $02, $14, $2e, $32, $35, $2f
19e4d     26 25 1B 1D 
19e51     1D 27 25 2A 
19e55     29 24 15 0B 
19e59     FE DC C3 B0 | 	byte	$26, $25, $1b, $1d, $1d, $27, $25, $2a, $29, $24, $15, $0b, $fe, $dc, $c3, $b0
19e5d     AB A7 AB BD 
19e61     CC E2 F8 04 
19e65     0D 1D 2A 38 
19e69     3A 3A 20 0E | 	byte	$ab, $a7, $ab, $bd, $cc, $e2, $f8, $04, $0d, $1d, $2a, $38, $3a, $3a, $20, $0e
19e6d     F8 E9 EA EA 
19e71     FA 06 10 0F 
19e75     04 FF F5 F0 
19e79     EB F2 F3 FF | 	byte	$f8, $e9, $ea, $ea, $fa, $06, $10, $0f, $04, $ff, $f5, $f0, $eb, $f2, $f3, $ff
19e7d     FF 01 00 FD 
19e81     E8 DD D6 C9 
19e85     C4 C3 C3 C6 
19e89     D7 E3 F6 F7 | 	byte	$ff, $01, $00, $fd, $e8, $dd, $d6, $c9, $c4, $c3, $c3, $c6, $d7, $e3, $f6, $f7
19e8d     F9 01 01 08 
19e91     12 1C 21 1D 
19e95     04 ED D6 C9 
19e99     C5 C6 D2 DB | 	byte	$f9, $01, $01, $08, $12, $1c, $21, $1d, $04, $ed, $d6, $c9, $c5, $c6, $d2, $db
19e9d     ED F1 ED ED 
19ea1     EC EA EF F1 
19ea5     FC 07 0F 18 
19ea9     1D 1C 1D 1C | 	byte	$ed, $f1, $ed, $ed, $ec, $ea, $ef, $f1, $fc, $07, $0f, $18, $1d, $1c, $1d, $1c
19ead     1A 1A 10 0F 
19eb1     08 F2 E6 CF 
19eb5     D6 D3 D2 DD 
19eb9     DD E2 EE F9 | 	byte	$1a, $1a, $10, $0f, $08, $f2, $e6, $cf, $d6, $d3, $d2, $dd, $dd, $e2, $ee, $f9
19ebd     01 F5 E1 C6 
19ec1     B8 A8 A7 AB 
19ec5     B7 C6 DA ED 
19ec9     F1 F8 10 10 | 	byte	$01, $f5, $e1, $c6, $b8, $a8, $a7, $ab, $b7, $c6, $da, $ed, $f1, $f8, $10, $10
19ecd     1E 30 41 4D 
19ed1     51 56 4F 3F 
19ed5     28 18 06 EC 
19ed9     E3 D6 D2 D0 | 	byte	$1e, $30, $41, $4d, $51, $56, $4f, $3f, $28, $18, $06, $ec, $e3, $d6, $d2, $d0
19edd     DD E6 FE 0F 
19ee1     20 32 39 31 
19ee5     28 28 20 23 
19ee9     16 06 F0 ED | 	byte	$dd, $e6, $fe, $0f, $20, $32, $39, $31, $28, $28, $20, $23, $16, $06, $f0, $ed
19eed     E8 E9 F3 EC 
19ef1     E5 D5 C2 B6 
19ef5     B1 AB AF B2 
19ef9     BF D3 E3 EC | 	byte	$e8, $e9, $f3, $ec, $e5, $d5, $c2, $b6, $b1, $ab, $af, $b2, $bf, $d3, $e3, $ec
19efd     FC 00 FD FE 
19f01     FD FB F4 F2 
19f05     E8 E3 E5 E8 
19f09     F3 FC 09 12 | 	byte	$fc, $00, $fd, $fe, $fd, $fb, $f4, $f2, $e8, $e3, $e5, $e8, $f3, $fc, $09, $12
19f0d     1D 2A 34 42 
19f11     58 5A 53 3D 
19f15     1D 03 DE C5 
19f19     B9 B7 B8 BA | 	byte	$1d, $2a, $34, $42, $58, $5a, $53, $3d, $1d, $03, $de, $c5, $b9, $b7, $b8, $ba
19f1d     B9 BE C8 D7 
19f21     E1 DA DC E1 
19f25     EB F1 F7 F3 
19f29     F2 E7 E6 E5 | 	byte	$b9, $be, $c8, $d7, $e1, $da, $dc, $e1, $eb, $f1, $f7, $f3, $f2, $e7, $e6, $e5
19f2d     E5 EA EC E4 
19f31     DB DB E0 E1 
19f35     E9 EE F0 F2 
19f39     F3 FB 04 03 | 	byte	$e5, $ea, $ec, $e4, $db, $db, $e0, $e1, $e9, $ee, $f0, $f2, $f3, $fb, $04, $03
19f3d     05 F9 EB E2 
19f41     E3 E1 F5 05 
19f45     18 28 21 26 
19f49     1E 14 16 11 | 	byte	$05, $f9, $eb, $e2, $e3, $e1, $f5, $05, $18, $28, $21, $26, $1e, $14, $16, $11
19f4d     1D 26 35 3C 
19f51     44 3D 2A 09 
19f55     EC D3 C5 B2 
19f59     AF AA A8 A9 | 	byte	$1d, $26, $35, $3c, $44, $3d, $2a, $09, $ec, $d3, $c5, $b2, $af, $aa, $a8, $a9
19f5d     B9 C6 DC F3 
19f61     03 0C 1B 27 
19f65     3E 4B 50 40 
19f69     31 24 09 04 | 	byte	$b9, $c6, $dc, $f3, $03, $0c, $1b, $27, $3e, $4b, $50, $40, $31, $24, $09, $04
19f6d     FE F9 F7 EB 
19f71     D7 CB CF D2 
19f75     E3 EC FF 0F 
19f79     1A 26 23 0E | 	byte	$fe, $f9, $f7, $eb, $d7, $cb, $cf, $d2, $e3, $ec, $ff, $0f, $1a, $26, $23, $0e
19f7d     F9 E8 D1 CC 
19f81     C8 CC CE D8 
19f85     D4 CA CC CC 
19f89     CF D9 E6 E9 | 	byte	$f9, $e8, $d1, $cc, $c8, $cc, $ce, $d8, $d4, $ca, $cc, $cc, $cf, $d9, $e6, $e9
19f8d     F5 02 10 1D 
19f91     21 1B 10 00 
19f95     EF E6 DE E3 
19f99     EA E8 DB DB | 	byte	$f5, $02, $10, $1d, $21, $1b, $10, $00, $ef, $e6, $de, $e3, $ea, $e8, $db, $db
19f9d     D8 DB E2 E7 
19fa1     EE FC 08 16 
19fa5     28 30 2D 2C 
19fa9     29 27 25 27 | 	byte	$d8, $db, $e2, $e7, $ee, $fc, $08, $16, $28, $30, $2d, $2c, $29, $27, $25, $27
19fad     1A FD E2 CF 
19fb1     BF B8 BC BF 
19fb5     C7 D1 DA D3 
19fb9     D6 DD DB D1 | 	byte	$1a, $fd, $e2, $cf, $bf, $b8, $bc, $bf, $c7, $d1, $da, $d3, $d6, $dd, $db, $d1
19fbd     C8 C7 B7 B9 
19fc1     BA C7 DB E9 
19fc5     EB F9 02 16 
19fc9     24 3C 49 58 | 	byte	$c8, $c7, $b7, $b9, $ba, $c7, $db, $e9, $eb, $f9, $02, $16, $24, $3c, $49, $58
19fcd     64 66 66 5A 
19fd1     41 21 08 F4 
19fd5     E5 E2 E0 EA 
19fd9     E6 EB F5 02 | 	byte	$64, $66, $66, $5a, $41, $21, $08, $f4, $e5, $e2, $e0, $ea, $e6, $eb, $f5, $02
19fdd     0E 1A 12 12 
19fe1     08 0A 0D 18 
19fe5     1C 11 16 0B 
19fe9     03 EE E0 DC | 	byte	$0e, $1a, $12, $12, $08, $0a, $0d, $18, $1c, $11, $16, $0b, $03, $ee, $e0, $dc
19fed     CB C6 A9 A8 
19ff1     A1 A5 AF BD 
19ff5     D4 E4 FB 0B 
19ff9     1C 20 20 16 | 	byte	$cb, $c6, $a9, $a8, $a1, $a5, $af, $bd, $d4, $e4, $fb, $0b, $1c, $20, $20, $16
19ffd     12 FD FC EE 
1a001     F2 F0 DE E0 
1a005     D6 DB E6 EF 
1a009     FD 11 23 31 | 	byte	$12, $fd, $fc, $ee, $f2, $f0, $de, $e0, $d6, $db, $e6, $ef, $fd, $11, $23, $31
1a00d     49 56 5A 4F 
1a011     3B 1C 03 E5 
1a015     CE C7 C2 C1 
1a019     B6 B6 B8 B6 | 	byte	$49, $56, $5a, $4f, $3b, $1c, $03, $e5, $ce, $c7, $c2, $c1, $b6, $b6, $b8, $b6
1a01d     B6 B9 C4 CD 
1a021     DB ED FD 00 
1a025     FF F4 F5 ED 
1a029     F0 F2 FC FA | 	byte	$b6, $b9, $c4, $cd, $db, $ed, $fd, $00, $ff, $f4, $f5, $ed, $f0, $f2, $fc, $fa
1a02d     F5 F5 EB E7 
1a031     E9 E8 E9 E9 
1a035     E2 E3 E4 F4 
1a039     FB FB FD FD | 	byte	$f5, $f5, $eb, $e7, $e9, $e8, $e9, $e9, $e2, $e3, $e4, $f4, $fb, $fb, $fd, $fd
1a03d     FD FD FF 09 
1a041     0F 0F 04 FF 
1a045     FF 01 08 11 
1a049     20 32 3B 4E | 	byte	$fd, $fd, $ff, $09, $0f, $0f, $04, $ff, $ff, $01, $08, $11, $20, $32, $3b, $4e
1a04d     4C 40 27 0E 
1a051     F9 E0 CD C8 
1a055     C9 C6 C5 C5 
1a059     C3 CE DC E3 | 	byte	$4c, $40, $27, $0e, $f9, $e0, $cd, $c8, $c9, $c6, $c5, $c5, $c3, $ce, $dc, $e3
1a05d     F7 09 15 28 
1a061     34 46 42 44 
1a065     33 25 17 FC 
1a069     F2 E8 DD CA | 	byte	$f7, $09, $15, $28, $34, $46, $42, $44, $33, $25, $17, $fc, $f2, $e8, $dd, $ca
1a06d     BF BD C8 D7 
1a071     E9 FE 0A 16 
1a075     1B 22 21 1F 
1a079     12 04 F7 EB | 	byte	$bf, $bd, $c8, $d7, $e9, $fe, $0a, $16, $1b, $22, $21, $1f, $12, $04, $f7, $eb
1a07d     D9 DD D6 C8 
1a081     C6 BC B3 AB 
1a085     B3 B4 C6 D5 
1a089     E3 F6 FF 19 | 	byte	$d9, $dd, $d6, $c8, $c6, $bc, $b3, $ab, $b3, $b4, $c6, $d5, $e3, $f6, $ff, $19
1a08d     19 27 2A 29 
1a091     1F 1A 10 07 
1a095     FA EB D4 C5 
1a099     C6 C6 CB D5 | 	byte	$19, $27, $2a, $29, $1f, $1a, $10, $07, $fa, $eb, $d4, $c5, $c6, $c6, $cb, $d5
1a09d     E9 F9 0A 21 
1a0a1     36 42 3F 42 
1a0a5     35 2A 17 0B 
1a0a9     FA EE E2 CF | 	byte	$e9, $f9, $0a, $21, $36, $42, $3f, $42, $35, $2a, $17, $0b, $fa, $ee, $e2, $cf
1a0ad     BE BB B0 B7 
1a0b1     B5 B4 B6 B6 
1a0b5     B6 C3 CB DA 
1a0b9     DE E0 DF DD | 	byte	$be, $bb, $b0, $b7, $b5, $b4, $b6, $b6, $b6, $c3, $cb, $da, $de, $e0, $df, $dd
1a0bd     DC E6 E6 E8 
1a0c1     ED F4 05 1B 
1a0c5     2B 3B 3E 4A 
1a0c9     46 47 4A 3F | 	byte	$dc, $e6, $e6, $e8, $ed, $f4, $05, $1b, $2b, $3b, $3e, $4a, $46, $47, $4a, $3f
1a0cd     31 2A 1C 10 
1a0d1     07 02 06 09 
1a0d5     11 13 0E FF 
1a0d9     FF F4 F5 FA | 	byte	$31, $2a, $1c, $10, $07, $02, $06, $09, $11, $13, $0e, $ff, $ff, $f4, $f5, $fa
1a0dd     00 04 03 0D 
1a0e1     0D 15 0E 05 
1a0e5     FB EB D8 C5 
1a0e9     BC A4 9C 96 | 	byte	$00, $04, $03, $0d, $0d, $15, $0e, $05, $fb, $eb, $d8, $c5, $bc, $a4, $9c, $96
1a0ed     9A A6 BA CF 
1a0f1     DC F7 06 1B 
1a0f5     2D 38 36 36 
1a0f9     25 13 FE EE | 	byte	$9a, $a6, $ba, $cf, $dc, $f7, $06, $1b, $2d, $38, $36, $36, $25, $13, $fe, $ee
1a0fd     E7 E2 E5 E4 
1a101     E5 E6 E6 EE 
1a105     FD 0F 21 2D 
1a109     2C 2A 23 1E | 	byte	$e7, $e2, $e5, $e4, $e5, $e6, $e6, $ee, $fd, $0f, $21, $2d, $2c, $2a, $23, $1e
1a10d     1F 15 0D FD 
1a111     F0 E2 DE C0 
1a115     B0 A4 A2 A4 
1a119     A7 B3 C5 D7 | 	byte	$1f, $15, $0d, $fd, $f0, $e2, $de, $c0, $b0, $a4, $a2, $a4, $a7, $b3, $c5, $d7
1a11d     E8 F4 02 0B 
1a121     0E 0E 0F 0D 
1a125     0F 0D 08 07 
1a129     09 FD ED D6 | 	byte	$e8, $f4, $02, $0b, $0e, $0e, $0f, $0d, $0f, $0d, $08, $07, $09, $fd, $ed, $d6
1a12d     C5 BC B9 BF 
1a131     CE D5 E2 E7 
1a135     EE FD 0A 14 
1a139     1C 1C 12 07 | 	byte	$c5, $bc, $b9, $bf, $ce, $d5, $e2, $e7, $ee, $fd, $0a, $14, $1c, $1c, $12, $07
1a13d     0A F8 F5 F7 
1a141     01 07 17 21 
1a145     2F 2A 2A 27 
1a149     1D 14 07 02 | 	byte	$0a, $f8, $f5, $f7, $01, $07, $17, $21, $2f, $2a, $2a, $27, $1d, $14, $07, $02
1a14d     F4 EF E8 DE 
1a151     E0 E0 EB E8 
1a155     E9 E6 E6 F0 
1a159     FE 11 2D 32 | 	byte	$f4, $ef, $e8, $de, $e0, $e0, $eb, $e8, $e9, $e6, $e6, $f0, $fe, $11, $2d, $32
1a15d     35 27 1F 16 
1a161     17 17 12 0E 
1a165     FD EF E2 CF 
1a169     CB CC D9 E2 | 	byte	$35, $27, $1f, $16, $17, $17, $12, $0e, $fd, $ef, $e2, $cf, $cb, $cc, $d9, $e2
1a16d     F0 F4 03 07 
1a171     11 12 14 12 
1a175     13 09 05 ED 
1a179     DB CA BA BE | 	byte	$f0, $f4, $03, $07, $11, $12, $14, $12, $13, $09, $05, $ed, $db, $ca, $ba, $be
1a17d     BC B9 BA B9 
1a181     B6 B9 CA D6 
1a185     F3 FC 09 0E 
1a189     18 26 30 3E | 	byte	$bc, $b9, $ba, $b9, $b6, $b9, $ca, $d6, $f3, $fc, $09, $0e, $18, $26, $30, $3e
1a18d     42 34 1F 03 
1a191     E5 C7 B3 B1 
1a195     B4 BF D3 E5 
1a199     FF 13 28 38 | 	byte	$42, $34, $1f, $03, $e5, $c7, $b3, $b1, $b4, $bf, $d3, $e5, $ff, $13, $28, $38
1a19d     4A 43 42 3D 
1a1a1     32 2C 1D 0B 
1a1a5     FB F8 F1 E7 
1a1a9     D8 B8 A3 94 | 	byte	$4a, $43, $42, $3d, $32, $2c, $1d, $0b, $fb, $f8, $f1, $e7, $d8, $b8, $a3, $94
1a1ad     91 93 A0 A5 
1a1b1     B3 B1 B9 C5 
1a1b5     DC E9 F6 FB 
1a1b9     FA FA F2 F3 | 	byte	$91, $93, $a0, $a5, $b3, $b1, $b9, $c5, $dc, $e9, $f6, $fb, $fa, $fa, $f2, $f3
1a1bd     F3 04 12 1F 
1a1c1     29 28 2A 2D 
1a1c5     32 36 36 31 
1a1c9     37 34 34 34 | 	byte	$f3, $04, $12, $1f, $29, $28, $2a, $2d, $32, $36, $36, $31, $37, $34, $34, $34
1a1cd     28 29 28 28 
1a1d1     1D 1C 0C FB 
1a1d5     E9 DD DF EF 
1a1d9     FD 09 10 FD | 	byte	$28, $29, $28, $28, $1d, $1c, $0c, $fb, $e9, $dd, $df, $ef, $fd, $09, $10, $fd
1a1dd     F4 EF F2 F5 
1a1e1     FA F7 E5 D6 
1a1e5     BD AD A6 A9 
1a1e9     AE C1 CD E4 | 	byte	$f4, $ef, $f2, $f5, $fa, $f7, $e5, $d6, $bd, $ad, $a6, $a9, $ae, $c1, $cd, $e4
1a1ed     FD 13 24 39 
1a1f1     37 35 2A 1A 
1a1f5     09 FB EF E3 
1a1f9     E0 E1 E4 F0 | 	byte	$fd, $13, $24, $39, $37, $35, $2a, $1a, $09, $fb, $ef, $e3, $e0, $e1, $e4, $f0
1a1fd     F0 ED E8 E9 
1a201     EE 01 00 11 
1a205     15 0E 08 0A 
1a209     0F 1E 2B 2E | 	byte	$f0, $ed, $e8, $e9, $ee, $01, $00, $11, $15, $0e, $08, $0a, $0f, $1e, $2b, $2e
1a20d     1E 01 E6 B9 
1a211     AA 9B 9A 9B 
1a215     9E B3 BF D8 
1a219     ED 06 06 0B | 	byte	$1e, $01, $e6, $b9, $aa, $9b, $9a, $9b, $9e, $b3, $bf, $d8, $ed, $06, $06, $0b
1a21d     10 15 24 2E 
1a221     31 2B 22 19 
1a225     02 F8 E4 C9 
1a229     BB AF B1 BE | 	byte	$10, $15, $24, $2e, $31, $2b, $22, $19, $02, $f8, $e4, $c9, $bb, $af, $b1, $be
1a22d     CD E4 EF EC 
1a231     E7 F3 00 11 
1a235     1D 1A 1C 12 
1a239     02 E9 E4 EB | 	byte	$cd, $e4, $ef, $ec, $e7, $f3, $00, $11, $1d, $1a, $1c, $12, $02, $e9, $e4, $eb
1a23d     F2 06 0F 0D 
1a241     10 13 13 13 
1a245     0E 0A 06 05 
1a249     07 0C 15 16 | 	byte	$f2, $06, $0f, $0d, $10, $13, $13, $13, $0e, $0a, $06, $05, $07, $0c, $15, $16
1a24d     14 0F 0F 0E 
1a251     0E 0D 01 FD 
1a255     F8 FF FE FF 
1a259     02 F7 EA F0 | 	byte	$14, $0f, $0f, $0e, $0e, $0d, $01, $fd, $f8, $ff, $fe, $ff, $02, $f7, $ea, $f0
1a25d     F7 0B 1E 26 
1a261     21 11 FF E7 
1a265     DA DF DF E1 
1a269     EE FC 00 0C | 	byte	$f7, $0b, $1e, $26, $21, $11, $ff, $e7, $da, $df, $df, $e1, $ee, $fc, $00, $0c
1a26d     16 1C 1A 1C 
1a271     15 FF F7 EF 
1a275     E0 DB CC C8 
1a279     C1 C1 C1 BF | 	byte	$16, $1c, $1a, $1c, $15, $ff, $f7, $ef, $e0, $db, $cc, $c8, $c1, $c1, $c1, $bf
1a27d     BF BE BE C6 
1a281     CD E8 F5 02 
1a285     04 0A 19 2B 
1a289     2D 2E 29 16 | 	byte	$bf, $be, $be, $c6, $cd, $e8, $f5, $02, $04, $0a, $19, $2b, $2d, $2e, $29, $16
1a28d     FC E7 D7 D6 
1a291     DD DF EA F2 
1a295     F8 0D 1B 2D 
1a299     29 2E 26 28 | 	byte	$fc, $e7, $d7, $d6, $dd, $df, $ea, $f2, $f8, $0d, $1b, $2d, $29, $2e, $26, $28
1a29d     23 21 21 11 
1a2a1     0D 08 FE E7 
1a2a5     D7 C7 B5 A3 
1a2a9     9A 96 9A AF | 	byte	$23, $21, $21, $11, $0d, $08, $fe, $e7, $d7, $c7, $b5, $a3, $9a, $96, $9a, $af
1a2ad     B7 BD BD C4 
1a2b1     CE DE F1 03 
1a2b5     11 13 14 02 
1a2b9     FF F8 FA F7 | 	byte	$b7, $bd, $bd, $c4, $ce, $de, $f1, $03, $11, $13, $14, $02, $ff, $f8, $fa, $f7
1a2bd     F5 FA 00 0E 
1a2c1     1B 2D 31 42 
1a2c5     3F 41 43 44 
1a2c9     50 4F 4E 44 | 	byte	$f5, $fa, $00, $0e, $1b, $2d, $31, $42, $3f, $41, $43, $44, $50, $4f, $4e, $44
1a2cd     3E 2E 27 13 
1a2d1     02 F2 EA E5 
1a2d5     E5 E8 E8 E0 
1a2d9     DB CC CA D5 | 	byte	$3e, $2e, $27, $13, $02, $f2, $ea, $e5, $e5, $e8, $e8, $e0, $db, $cc, $ca, $d5
1a2dd     DE EC EF EE 
1a2e1     EE D7 D0 CB 
1a2e5     CE D8 E7 F3 
1a2e9     04 12 1E 22 | 	byte	$de, $ec, $ef, $ee, $ee, $d7, $d0, $cb, $ce, $d8, $e7, $f3, $04, $12, $1e, $22
1a2ed     20 16 0D 04 
1a2f1     00 00 07 0E 
1a2f5     0E 15 14 0D 
1a2f9     03 FB F5 E7 | 	byte	$20, $16, $0d, $04, $00, $00, $07, $0e, $0e, $15, $14, $0d, $03, $fb, $f5, $e7
1a2fd     DE DB DF E4 
1a301     EA EC E7 E6 
1a305     EB F7 0B 12 
1a309     15 13 09 EA | 	byte	$de, $db, $df, $e4, $ea, $ec, $e7, $e6, $eb, $f7, $0b, $12, $15, $13, $09, $ea
1a30d     D1 C8 BC B9 
1a311     BA BD C9 D7 
1a315     EA F3 FD 03 
1a319     0C 1B 1E 2C | 	byte	$d1, $c8, $bc, $b9, $ba, $bd, $c9, $d7, $ea, $f3, $fd, $03, $0c, $1b, $1e, $2c
1a31d     2F 23 1E 0B 
1a321     FF F2 E5 DE 
1a325     DD D8 D9 DB 
1a329     E5 E9 F2 F1 | 	byte	$2f, $23, $1e, $0b, $ff, $f2, $e5, $de, $dd, $d8, $d9, $db, $e5, $e9, $f2, $f1
1a32d     F0 EE E7 EE 
1a331     F8 05 0A 11 
1a335     17 FB F9 F4 
1a339     FB F5 F6 F3 | 	byte	$f0, $ee, $e7, $ee, $f8, $05, $0a, $11, $17, $fb, $f9, $f4, $fb, $f5, $f6, $f3
1a33d     F3 F2 F3 F2 
1a341     F3 F6 FE 0C 
1a345     15 29 3E 40 
1a349     47 4D 4C 45 | 	byte	$f3, $f2, $f3, $f2, $f3, $f6, $fe, $0c, $15, $29, $3e, $40, $47, $4d, $4c, $45
1a34d     40 31 1F 05 
1a351     F1 D7 CC C4 
1a355     CB D4 D8 DD 
1a359     EB F9 0B 1E | 	byte	$40, $31, $1f, $05, $f1, $d7, $cc, $c4, $cb, $d4, $d8, $dd, $eb, $f9, $0b, $1e
1a35d     20 21 21 0A 
1a361     FE F4 F6 F9 
1a365     FB FB FE FE 
1a369     00 03 06 FF | 	byte	$20, $21, $21, $0a, $fe, $f4, $f6, $f9, $fb, $fb, $fe, $fe, $00, $03, $06, $ff
1a36d     FF F8 F7 F5 
1a371     F5 F0 EC ED 
1a375     E5 E8 E8 E8 
1a379     E8 E0 DB D2 | 	byte	$ff, $f8, $f7, $f5, $f5, $f0, $ec, $ed, $e5, $e8, $e8, $e8, $e8, $e0, $db, $d2
1a37d     D4 D6 DE E4 
1a381     E1 E3 DE DF 
1a385     E7 F6 03 16 
1a389     1F 1C 1C 1C | 	byte	$d4, $d6, $de, $e4, $e1, $e3, $de, $df, $e7, $f6, $03, $16, $1f, $1c, $1c, $1c
1a38d     1D 20 1B 12 
1a391     09 FE F9 F0 
1a395     F8 F5 F6 00 
1a399     FE 0E 10 15 | 	byte	$1d, $20, $1b, $12, $09, $fe, $f9, $f0, $f8, $f5, $f6, $00, $fe, $0e, $10, $15
1a39d     16 0B 0A FF 
1a3a1     F7 EA E1 D4 
1a3a5     C8 BA B5 AF 
1a3a9     BB C3 C8 D1 | 	byte	$16, $0b, $0a, $ff, $f7, $ea, $e1, $d4, $c8, $ba, $b5, $af, $bb, $c3, $c8, $d1
1a3ad     CF D4 DE ED 
1a3b1     F4 09 0A FF 
1a3b5     F4 E7 EA ED 
1a3b9     F8 FE 07 07 | 	byte	$cf, $d4, $de, $ed, $f4, $09, $0a, $ff, $f4, $e7, $ea, $ed, $f8, $fe, $07, $07
1a3bd     17 1C 2A 2D 
1a3c1     3C 43 42 4E 
1a3c5     4B 50 59 58 
1a3c9     58 57 4F 41 | 	byte	$17, $1c, $2a, $2d, $3c, $43, $42, $4e, $4b, $50, $59, $58, $58, $57, $4f, $41
1a3cd     33 25 12 F3 
1a3d1     DA C7 BF B9 
1a3d5     AF AF B0 AB 
1a3d9     B7 C6 D3 EE | 	byte	$33, $25, $12, $f3, $da, $c7, $bf, $b9, $af, $af, $b0, $ab, $b7, $c6, $d3, $ee
1a3dd     F9 FB F7 F5 
1a3e1     FF 03 11 18 
1a3e5     16 11 02 FE 
1a3e9     FD F8 FA FF | 	byte	$f9, $fb, $f7, $f5, $ff, $03, $11, $18, $16, $11, $02, $fe, $fd, $f8, $fa, $ff
1a3ed     04 0D 1A 1E 
1a3f1     2C 2F 2C 2C 
1a3f5     1F 11 04 FC 
1a3f9     EE E1 D7 CD | 	byte	$04, $0d, $1a, $1e, $2c, $2f, $2c, $2c, $1f, $11, $04, $fc, $ee, $e1, $d7, $cd
1a3fd     C9 C9 C6 CD 
1a401     D3 D2 D3 DE 
1a405     ED FF 08 0E 
1a409     00 FD FD FA | 	byte	$c9, $c9, $c6, $cd, $d3, $d2, $d3, $de, $ed, $ff, $08, $0e, $00, $fd, $fd, $fa
1a40d     FF 04 05 FB 
1a411     F1 EB E4 DF 
1a415     E3 E5 ED F2 
1a419     F3 FB F9 00 | 	byte	$ff, $04, $05, $fb, $f1, $eb, $e4, $df, $e3, $e5, $ed, $f2, $f3, $fb, $f9, $00
1a41d     00 02 01 08 
1a421     09 0E 18 13 
1a425     12 07 FF F4 
1a429     EA E4 DF DA | 	byte	$00, $02, $01, $08, $09, $0e, $18, $13, $12, $07, $ff, $f4, $ea, $e4, $df, $da
1a42d     D9 D8 E3 F3 
1a431     F8 01 F9 E9 
1a435     E4 E5 EA F5 
1a439     F6 F9 F9 EF | 	byte	$d9, $d8, $e3, $f3, $f8, $01, $f9, $e9, $e4, $e5, $ea, $f5, $f6, $f9, $f9, $ef
1a43d     F2 F3 FF 12 
1a441     24 35 41 4F 
1a445     59 5D 5E 5E 
1a449     56 4C 3C 2A | 	byte	$f2, $f3, $ff, $12, $24, $35, $41, $4f, $59, $5d, $5e, $5e, $56, $4c, $3c, $2a
1a44d     19 11 F8 E6 
1a451     D3 C8 BF C3 
1a455     C6 CD DC E8 
1a459     F4 00 00 07 | 	byte	$19, $11, $f8, $e6, $d3, $c8, $bf, $c3, $c6, $cd, $dc, $e8, $f4, $00, $00, $07
1a45d     FE F9 F2 F5 
1a461     00 08 10 14 
1a465     0E 08 FA F6 
1a469     F6 F7 FF 00 | 	byte	$fe, $f9, $f2, $f5, $00, $08, $10, $14, $0e, $08, $fa, $f6, $f6, $f7, $ff, $00
1a46d     03 0B 0A 0D 
1a471     0F 10 0D 03 
1a475     FF FE F4 F0 
1a479     E2 D4 C2 B6 | 	byte	$03, $0b, $0a, $0d, $0f, $10, $0d, $03, $ff, $fe, $f4, $f0, $e2, $d4, $c2, $b6
1a47d     AF AB B2 BE 
1a481     CD D9 E6 FF 
1a485     14 30 32 37 
1a489     39 3B 43 43 | 	byte	$af, $ab, $b2, $be, $cd, $d9, $e6, $ff, $14, $30, $32, $37, $39, $3b, $43, $43
1a48d     38 29 12 FE 
1a491     E9 DC D2 CD 
1a495     CF D9 E7 EB 
1a499     E9 EE F4 F3 | 	byte	$38, $29, $12, $fe, $e9, $dc, $d2, $cd, $cf, $d9, $e7, $eb, $e9, $ee, $f4, $f3
1a49d     FB FB F9 FB 
1a4a1     FD FE FD F8 
1a4a5     E9 E5 DE DC 
1a4a9     D7 D8 D7 D2 | 	byte	$fb, $fb, $f9, $fb, $fd, $fe, $fd, $f8, $e9, $e5, $de, $dc, $d7, $d8, $d7, $d2
1a4ad     D4 D4 DF EC 
1a4b1     EF E9 E8 EA 
1a4b5     EC F7 00 0B 
1a4b9     0F 15 16 21 | 	byte	$d4, $d4, $df, $ec, $ef, $e9, $e8, $ea, $ec, $f7, $00, $0b, $0f, $15, $16, $21
1a4bd     21 31 36 35 
1a4c1     40 44 49 4F 
1a4c5     54 5A 58 57 
1a4c9     52 46 2F 25 | 	byte	$21, $31, $36, $35, $40, $44, $49, $4f, $54, $5a, $58, $57, $52, $46, $2f, $25
1a4cd     12 01 E9 D2 
1a4d1     C2 B1 AA AC 
1a4d5     B3 BA CA D1 
1a4d9     DF F2 FB FA | 	byte	$12, $01, $e9, $d2, $c2, $b1, $aa, $ac, $b3, $ba, $ca, $d1, $df, $f2, $fb, $fa
1a4dd     F2 F2 F3 F2 
1a4e1     F7 00 03 08 
1a4e5     0E 0E 13 13 
1a4e9     14 14 16 18 | 	byte	$f2, $f2, $f3, $f2, $f7, $00, $03, $08, $0e, $0e, $13, $13, $14, $14, $16, $18
1a4ed     1B 26 33 30 
1a4f1     31 20 11 04 
1a4f5     F8 F4 EA E1 
1a4f9     D4 C6 B9 B4 | 	byte	$1b, $26, $33, $30, $31, $20, $11, $04, $f8, $f4, $ea, $e1, $d4, $c6, $b9, $b4
1a4fd     A4 A1 AA B4 
1a501     C6 D8 EF 06 
1a505     1D 22 25 25 
1a509     28 25 1A 1B | 	byte	$a4, $a1, $aa, $b4, $c6, $d8, $ef, $06, $1d, $22, $25, $25, $28, $25, $1a, $1b
1a50d     16 0B FE FA 
1a511     E5 DA D1 CD 
1a515     CF D7 E3 E7 
1a519     F0 F8 00 FF | 	byte	$16, $0b, $fe, $fa, $e5, $da, $d1, $cd, $cf, $d7, $e3, $e7, $f0, $f8, $00, $ff
1a51d     FF 06 05 10 
1a521     19 1E 1D 0D 
1a525     FF EE E6 E0 
1a529     DA DB DC DB | 	byte	$ff, $06, $05, $10, $19, $1e, $1d, $0d, $ff, $ee, $e6, $e0, $da, $db, $dc, $db
1a52d     E2 F0 F2 E2 
1a531     DB D5 D6 D1 
1a535     DD E2 F0 04 
1a539     0D 1B 28 2B | 	byte	$e2, $f0, $f2, $e2, $db, $d5, $d6, $d1, $dd, $e2, $f0, $04, $0d, $1b, $28, $2b
1a53d     31 2E 36 34 
1a541     35 3A 3B 40 
1a545     47 40 42 3D 
1a549     36 31 30 23 | 	byte	$31, $2e, $36, $34, $35, $3a, $3b, $40, $47, $40, $42, $3d, $36, $31, $30, $23
1a54d     15 FC E3 D3 
1a551     BC B7 BC C7 
1a555     D7 E3 E1 E4 
1a559     F6 F8 F5 F6 | 	byte	$15, $fc, $e3, $d3, $bc, $b7, $bc, $c7, $d7, $e3, $e1, $e4, $f6, $f8, $f5, $f6
1a55d     F3 EB ED EE 
1a561     ED EC ED F8 
1a565     05 11 18 1E 
1a569     20 20 23 24 | 	byte	$f3, $eb, $ed, $ee, $ed, $ec, $ed, $f8, $05, $11, $18, $1e, $20, $20, $23, $24
1a56d     25 27 25 15 
1a571     08 FC EF E3 
1a575     DE DC D5 CC 
1a579     C3 C2 B7 B8 | 	byte	$25, $27, $25, $15, $08, $fc, $ef, $e3, $de, $dc, $d5, $cc, $c3, $c2, $b7, $b8
1a57d     C0 CE DC E6 
1a581     F5 FA 0F 20 
1a585     1F 29 2D 21 
1a589     18 06 04 FE | 	byte	$c0, $ce, $dc, $e6, $f5, $fa, $0f, $20, $1f, $29, $2d, $21, $18, $06, $04, $fe
1a58d     04 08 07 06 
1a591     FF F9 F0 DC 
1a595     D4 CC CC D1 
1a599     E2 E7 F6 00 | 	byte	$04, $08, $07, $06, $ff, $f9, $f0, $dc, $d4, $cc, $cc, $d1, $e2, $e7, $f6, $00
1a59d     06 0C 15 14 
1a5a1     14 08 F8 E6 
1a5a5     D5 CD CA CE 
1a5a9     D0 DB E1 EB | 	byte	$06, $0c, $15, $14, $14, $08, $f8, $e6, $d5, $cd, $ca, $ce, $d0, $db, $e1, $eb
1a5ad     FA 04 01 FE 
1a5b1     EE E1 D3 C7 
1a5b5     C5 D1 E5 00 
1a5b9     1A 32 37 3C | 	byte	$fa, $04, $01, $fe, $ee, $e1, $d3, $c7, $c5, $d1, $e5, $00, $1a, $32, $37, $3c
1a5bd     3B 3D 3F 47 
1a5c1     4C 51 51 53 
1a5c5     50 3E 28 19 
1a5c9     0D 0A 0B 06 | 	byte	$3b, $3d, $3f, $47, $4c, $51, $51, $53, $50, $3e, $28, $19, $0d, $0a, $0b, $06
1a5cd     FF F3 E8 DA 
1a5d1     D8 DC E1 E7 
1a5d5     E8 E3 E6 E8 
1a5d9     E9 E8 E0 E1 | 	byte	$ff, $f3, $e8, $da, $d8, $dc, $e1, $e7, $e8, $e3, $e6, $e8, $e9, $e8, $e0, $e1
1a5dd     DA D8 DD E7 
1a5e1     FE 0E 25 2B 
1a5e5     29 28 1E 15 
1a5e9     11 10 0E 18 | 	byte	$da, $d8, $dd, $e7, $fe, $0e, $25, $2b, $29, $28, $1e, $15, $11, $10, $0e, $18
1a5ed     14 0D 08 FC 
1a5f1     FD F3 F5 F2 
1a5f5     ED E9 E2 C4 
1a5f9     AC 99 94 A1 | 	byte	$14, $0d, $08, $fc, $fd, $f3, $f5, $f2, $ed, $e9, $e2, $c4, $ac, $99, $94, $a1
1a5fd     B3 D5 EF 09 
1a601     21 3C 40 3F 
1a605     35 1E FF E3 
1a609     D9 D1 D8 E3 | 	byte	$b3, $d5, $ef, $09, $21, $3c, $40, $3f, $35, $1e, $ff, $e3, $d9, $d1, $d8, $e3
1a60d     F3 04 07 09 
1a611     10 12 10 12 
1a615     02 F8 E9 DF 
1a619     DA D5 D8 E2 | 	byte	$f3, $04, $07, $09, $10, $12, $10, $12, $02, $f8, $e9, $df, $da, $d5, $d8, $e2
1a61d     F0 FD 01 0B 
1a621     07 FD F5 E6 
1a625     E4 E8 EF F8 
1a629     FC FB F0 F0 | 	byte	$f0, $fd, $01, $0b, $07, $fd, $f5, $e6, $e4, $e8, $ef, $f8, $fc, $fb, $f0, $f0
1a62d     ED E5 DF DF 
1a631     D4 D3 D8 DC 
1a635     ED 03 12 23 
1a639     25 27 29 2C | 	byte	$ed, $e5, $df, $df, $d4, $d3, $d8, $dc, $ed, $03, $12, $23, $25, $27, $29, $2c
1a63d     2D 30 37 37 
1a641     3F 41 41 42 
1a645     43 3E 34 2B 
1a649     19 07 FC E8 | 	byte	$2d, $30, $37, $37, $3f, $41, $41, $42, $43, $3e, $34, $2b, $19, $07, $fc, $e8
1a64d     D7 C5 C1 C8 
1a651     D1 E3 F0 F7 
1a655     F6 00 06 05 
1a659     00 FE E9 D4 | 	byte	$d7, $c5, $c1, $c8, $d1, $e3, $f0, $f7, $f6, $00, $06, $05, $00, $fe, $e9, $d4
1a65d     C2 B7 BF D3 
1a661     EE 0C 21 37 
1a665     46 4E 4B 48 
1a669     38 2A 11 04 | 	byte	$c2, $b7, $bf, $d3, $ee, $0c, $21, $37, $46, $4e, $4b, $48, $38, $2a, $11, $04
1a66d     F3 EB E1 E3 
1a671     DE DF E1 E6 
1a675     E6 E6 E8 DE 
1a679     D1 D3 CE D4 | 	byte	$f3, $eb, $e1, $e3, $de, $df, $e1, $e6, $e6, $e6, $e8, $de, $d1, $d3, $ce, $d4
1a67d     DA E9 F5 03 
1a681     14 15 17 0D 
1a685     F5 E4 CD CF 
1a689     D5 ED 03 13 | 	byte	$da, $e9, $f5, $03, $14, $15, $17, $0d, $f5, $e4, $cd, $cf, $d5, $ed, $03, $13
1a68d     1F 1B 11 08 
1a691     00 01 FA F1 
1a695     F2 F3 F5 F7 
1a699     F9 F7 F7 F2 | 	byte	$1f, $1b, $11, $08, $00, $01, $fa, $f1, $f2, $f3, $f5, $f7, $f9, $f7, $f7, $f2
1a69d     F0 F0 ED F0 
1a6a1     F1 E9 DF DB 
1a6a5     E1 EA F8 09 
1a6a9     15 1F 2A 1D | 	byte	$f0, $f0, $ed, $f0, $f1, $e9, $df, $db, $e1, $ea, $f8, $09, $15, $1f, $2a, $1d
1a6ad     0D F9 D8 C1 
1a6b1     A6 A4 AD C3 
1a6b5     E3 FC 0A 16 
1a6b9     22 2C 3C 49 | 	byte	$0d, $f9, $d8, $c1, $a6, $a4, $ad, $c3, $e3, $fc, $0a, $16, $22, $2c, $3c, $49
1a6bd     52 56 5C 56 
1a6c1     3D 2C 1B 09 
1a6c5     FB FE FD 07 
1a6c9     12 18 1A 15 | 	byte	$52, $56, $5c, $56, $3d, $2c, $1b, $09, $fb, $fe, $fd, $07, $12, $18, $1a, $15
1a6cd     01 F4 EB EE 
1a6d1     F3 02 06 0F 
1a6d5     0D 05 FC F3 
1a6d9     E3 D6 CD CF | 	byte	$01, $f4, $eb, $ee, $f3, $02, $06, $0f, $0d, $05, $fc, $f3, $e3, $d6, $cd, $cf
1a6dd     E0 F2 FE 12 
1a6e1     13 10 12 0F 
1a6e5     10 13 18 0C 
1a6e9     0B 01 F9 F0 | 	byte	$e0, $f2, $fe, $12, $13, $10, $12, $0f, $10, $13, $18, $0c, $0b, $01, $f9, $f0
1a6ed     EC EE EE F1 
1a6f1     F6 FA E7 DD 
1a6f5     D5 C7 B9 B7 
1a6f9     BD D0 EB 06 | 	byte	$ec, $ee, $ee, $f1, $f6, $fa, $e7, $dd, $d5, $c7, $b9, $b7, $bd, $d0, $eb, $06
1a6fd     23 36 42 33 
1a701     24 09 FB E0 
1a705     CD C7 C4 D0 
1a709     E0 FB 09 12 | 	byte	$23, $36, $42, $33, $24, $09, $fb, $e0, $cd, $c7, $c4, $d0, $e0, $fb, $09, $12
1a70d     1F 26 3A 3E 
1a711     3D 2B 15 FB 
1a715     E5 CF C2 BA 
1a719     BC B4 BF C7 | 	byte	$1f, $26, $3a, $3e, $3d, $2b, $15, $fb, $e5, $cf, $c2, $ba, $bc, $b4, $bf, $c7
1a71d     D2 E2 EF FC 
1a721     FF FF 06 07 
1a725     05 02 03 08 
1a729     0C 01 FD F8 | 	byte	$d2, $e2, $ef, $fc, $ff, $ff, $06, $07, $05, $02, $03, $08, $0c, $01, $fd, $f8
1a72d     F9 F1 E8 E8 
1a731     E5 E6 EE F8 
1a735     05 0C 1B 22 
1a739     34 37 40 44 | 	byte	$f9, $f1, $e8, $e8, $e5, $e6, $ee, $f8, $05, $0c, $1b, $22, $34, $37, $40, $44
1a73d     44 46 46 46 
1a741     3C 2E 1C 04 
1a745     F5 E9 DA D7 
1a749     D8 D9 D8 CE | 	byte	$44, $46, $46, $46, $3c, $2e, $1c, $04, $f5, $e9, $da, $d7, $d8, $d9, $d8, $ce
1a74d     D5 E1 F0 FE 
1a751     11 1F 30 31 
1a755     26 1E FF E9 
1a759     CD C2 C0 C1 | 	byte	$d5, $e1, $f0, $fe, $11, $1f, $30, $31, $26, $1e, $ff, $e9, $cd, $c2, $c0, $c1
1a75d     DB F2 08 21 
1a761     2C 2E 33 34 
1a765     2A 21 19 11 
1a769     10 09 04 FB | 	byte	$db, $f2, $08, $21, $2c, $2e, $33, $34, $2a, $21, $19, $11, $10, $09, $04, $fb
1a76d     EE E2 E0 DF 
1a771     E1 EE F9 FE 
1a775     F8 EE E1 DC 
1a779     D6 D6 DD ED | 	byte	$ee, $e2, $e0, $df, $e1, $ee, $f9, $fe, $f8, $ee, $e1, $dc, $d6, $d6, $dd, $ed
1a77d     FF FA F2 E6 
1a781     E6 D4 CD C9 
1a785     D4 E3 FA 0F 
1a789     15 18 14 13 | 	byte	$ff, $fa, $f2, $e6, $e6, $d4, $cd, $c9, $d4, $e3, $fa, $0f, $15, $18, $14, $13
1a78d     13 18 21 1D 
1a791     1C 1B 18 0D 
1a795     FF F3 DA C8 
1a799     C5 BE CB DA | 	byte	$13, $18, $21, $1d, $1c, $1b, $18, $0d, $ff, $f3, $da, $c8, $c5, $be, $cb, $da
1a79d     E8 FA F9 F9 
1a7a1     F9 F7 FC 07 
1a7a5     17 29 2D 29 
1a7a9     14 FA E7 CE | 	byte	$e8, $fa, $f9, $f9, $f9, $f7, $fc, $07, $17, $29, $2d, $29, $14, $fa, $e7, $ce
1a7ad     C3 BB B8 BA 
1a7b1     CA D4 F0 FF 
1a7b5     0A 1E 30 42 
1a7b9     54 5F 59 52 | 	byte	$c3, $bb, $b8, $ba, $ca, $d4, $f0, $ff, $0a, $1e, $30, $42, $54, $5f, $59, $52
1a7bd     49 3B 28 17 
1a7c1     00 F1 EA E2 
1a7c5     E5 EF F7 04 
1a7c9     FF FA FE 01 | 	byte	$49, $3b, $28, $17, $00, $f1, $ea, $e2, $e5, $ef, $f7, $04, $ff, $fa, $fe, $01
1a7cd     0D 24 2B 31 
1a7d1     38 34 1A 04 
1a7d5     F8 F0 EB ED 
1a7d9     EC EA F4 F2 | 	byte	$0d, $24, $2b, $31, $38, $34, $1a, $04, $f8, $f0, $eb, $ed, $ec, $ea, $f4, $f2
1a7dd     F7 F7 F0 F0 
1a7e1     ED EA EA EF 
1a7e5     F1 F3 F8 FA 
1a7e9     04 05 07 06 | 	byte	$f7, $f7, $f0, $f0, $ed, $ea, $ea, $ef, $f1, $f3, $f8, $fa, $04, $05, $07, $06
1a7ed     F7 E9 E2 E1 
1a7f1     DF E4 E4 E5 
1a7f5     E5 F0 F6 00 
1a7f9     0B 1A 1C 1B | 	byte	$f7, $e9, $e2, $e1, $df, $e4, $e4, $e5, $e5, $f0, $f6, $00, $0b, $1a, $1c, $1b
1a7fd     06 FA F3 E1 
1a801     E0 E0 DF E0 
1a805     EB F1 00 0C 
1a809     16 24 2B 38 | 	byte	$06, $fa, $f3, $e1, $e0, $e0, $df, $e0, $eb, $f1, $00, $0c, $16, $24, $2b, $38
1a80d     3A 33 1F 0C 
1a811     FA EA D9 C6 
1a815     B4 A8 A1 A0 
1a819     AB B1 CF ED | 	byte	$3a, $33, $1f, $0c, $fa, $ea, $d9, $c6, $b4, $a8, $a1, $a0, $ab, $b1, $cf, $ed
1a81d     02 14 13 13 
1a821     13 16 1B 1D 
1a825     20 1D 09 FC 
1a829     F0 EB ED EC | 	byte	$02, $14, $13, $13, $13, $16, $1b, $1d, $20, $1d, $09, $fc, $f0, $eb, $ed, $ec
1a82d     EA EC EE F9 
1a831     08 0F 1F 2C 
1a835     2E 3D 3B 3D 
1a839     42 42 44 43 | 	byte	$ea, $ec, $ee, $f9, $08, $0f, $1f, $2c, $2e, $3d, $3b, $3d, $42, $42, $44, $43
1a83d     3E 33 1B 01 
1a841     EC CC B9 AF 
1a845     B4 B2 B4 C5 
1a849     D1 DF FB 10 | 	byte	$3e, $33, $1b, $01, $ec, $cc, $b9, $af, $b4, $b2, $b4, $c5, $d1, $df, $fb, $10
1a84d     1F 3B 51 56 
1a851     3E 24 0F 02 
1a855     F9 F1 E8 E9 
1a859     E8 ED F4 FA | 	byte	$1f, $3b, $51, $56, $3e, $24, $0f, $02, $f9, $f1, $e8, $e9, $e8, $ed, $f4, $fa
1a85d     01 07 03 08 
1a861     0C 10 17 17 
1a865     16 1B 18 16 
1a869     0C FD F0 E6 | 	byte	$01, $07, $03, $08, $0c, $10, $17, $17, $16, $1b, $18, $16, $0c, $fd, $f0, $e6
1a86d     E2 E1 E4 F4 
1a871     F1 F2 F2 E8 
1a875     E2 E3 E4 E4 
1a879     E9 E8 D4 D1 | 	byte	$e2, $e1, $e4, $f4, $f1, $f2, $f2, $e8, $e2, $e3, $e4, $e4, $e9, $e8, $d4, $d1
1a87d     C3 CB CC DE 
1a881     F0 02 03 0A 
1a885     11 10 12 14 
1a889     13 16 1D 16 | 	byte	$c3, $cb, $cc, $de, $f0, $02, $03, $0a, $11, $10, $12, $14, $13, $16, $1d, $16
1a88d     16 0E 0D 0B 
1a891     01 FC EE E9 
1a895     D8 D3 C9 CE 
1a899     D5 E4 E9 F2 | 	byte	$16, $0e, $0d, $0b, $01, $fc, $ee, $e9, $d8, $d3, $c9, $ce, $d5, $e4, $e9, $f2
1a89d     F6 F6 01 0C 
1a8a1     1A 28 2F 2A 
1a8a5     11 F8 DF D3 
1a8a9     CA C6 C6 C6 | 	byte	$f6, $f6, $01, $0c, $1a, $28, $2f, $2a, $11, $f8, $df, $d3, $ca, $c6, $c6, $c6
1a8ad     C9 DA E7 F9 
1a8b1     09 1B 32 47 
1a8b5     47 4D 52 51 
1a8b9     4E 44 36 23 | 	byte	$c9, $da, $e7, $f9, $09, $1b, $32, $47, $47, $4d, $52, $51, $4e, $44, $36, $23
1a8bd     0E FD E5 D9 
1a8c1     D5 CF D7 E2 
1a8c5     EF FD 0A 17 
1a8c9     23 2C 37 3F | 	byte	$0e, $fd, $e5, $d9, $d5, $cf, $d7, $e2, $ef, $fd, $0a, $17, $23, $2c, $37, $3f
1a8cd     48 43 28 16 
1a8d1     01 F7 FA FB 
1a8d5     FD FD F8 F1 
1a8d9     E7 D9 D6 C7 | 	byte	$48, $43, $28, $16, $01, $f7, $fa, $fb, $fd, $fd, $f8, $f1, $e7, $d9, $d6, $c7
1a8dd     C2 C1 C3 D0 
1a8e1     DB F0 F9 03 
1a8e5     16 24 1A 18 
1a8e9     0D 04 FC EE | 	byte	$c2, $c1, $c3, $d0, $db, $f0, $f9, $03, $16, $24, $1a, $18, $0d, $04, $fc, $ee
1a8ed     EC E7 E8 E8 
1a8f1     E9 EE F0 F8 
1a8f5     06 12 20 22 
1a8f9     16 06 F2 E6 | 	byte	$ec, $e7, $e8, $e8, $e9, $ee, $f0, $f8, $06, $12, $20, $22, $16, $06, $f2, $e6
1a8fd     E9 EC F3 FA 
1a901     F9 FA 01 FF 
1a905     09 0F 18 18 
1a909     16 0C FF F7 | 	byte	$e9, $ec, $f3, $fa, $f9, $fa, $01, $ff, $09, $0f, $18, $18, $16, $0c, $ff, $f7
1a90d     EC D8 CD C3 
1a911     BB BA B9 BA 
1a915     BD C7 DE F5 
1a919     F8 08 12 17 | 	byte	$ec, $d8, $cd, $c3, $bb, $ba, $b9, $ba, $bd, $c7, $de, $f5, $f8, $08, $12, $17
1a91d     1C 1B 1D 1F 
1a921     20 16 FE EF 
1a925     E6 E0 EB F9 
1a929     03 0D 15 16 | 	byte	$1c, $1b, $1d, $1f, $20, $16, $fe, $ef, $e6, $e0, $eb, $f9, $03, $0d, $15, $16
1a92d     1B 1B 20 24 
1a931     2A 2A 29 2A 
1a935     2C 2A 2D 2D 
1a939     26 18 06 F5 | 	byte	$1b, $1b, $20, $24, $2a, $2a, $29, $2a, $2c, $2a, $2d, $2d, $26, $18, $06, $f5
1a93d     DB C6 B0 A4 
1a941     9C A3 B2 C3 
1a945     E3 00 13 23 
1a949     3A 4B 56 54 | 	byte	$db, $c6, $b0, $a4, $9c, $a3, $b2, $c3, $e3, $00, $13, $23, $3a, $4b, $56, $54
1a94d     4D 3C 29 19 
1a951     11 0D 06 FD 
1a955     F8 F1 E8 E9 
1a959     EA F2 00 00 | 	byte	$4d, $3c, $29, $19, $11, $0d, $06, $fd, $f8, $f1, $e8, $e9, $ea, $f2, $00, $00
1a95d     06 07 0F 0F 
1a961     12 12 10 0F 
1a965     05 FD F4 EB 
1a969     DE DC DB DC | 	byte	$06, $07, $0f, $0f, $12, $12, $10, $0f, $05, $fd, $f4, $eb, $de, $dc, $db, $dc
1a96d     DF E6 E8 E9 
1a971     DF D6 D1 D2 
1a975     DD DB DD DF 
1a979     DA DC F1 02 | 	byte	$df, $e6, $e8, $e9, $df, $d6, $d1, $d2, $dd, $db, $dd, $df, $da, $dc, $f1, $02
1a97d     10 1A 25 28 
1a981     22 19 18 17 
1a985     14 09 FE F4 
1a989     F5 F3 FB 02 | 	byte	$10, $1a, $25, $28, $22, $19, $18, $17, $14, $09, $fe, $f4, $f5, $f3, $fb, $02
1a98d     08 07 07 FF 
1a991     F8 EF E0 DB 
1a995     DB DD E2 EB 
1a999     F4 03 03 03 | 	byte	$08, $07, $07, $ff, $f8, $ef, $e0, $db, $db, $dd, $e2, $eb, $f4, $03, $03, $03
1a99d     08 0A 11 03 
1a9a1     F6 E4 CD BB 
1a9a5     BC C2 D1 E3 
1a9a9     EC FA 03 10 | 	byte	$08, $0a, $11, $03, $f6, $e4, $cd, $bb, $bc, $c2, $d1, $e3, $ec, $fa, $03, $10
1a9ad     21 2D 3F 46 
1a9b1     4B 4B 48 47 
1a9b5     42 38 29 0E 
1a9b9     FE ED E1 D4 | 	byte	$21, $2d, $3f, $46, $4b, $4b, $48, $47, $42, $38, $29, $0e, $fe, $ed, $e1, $d4
1a9bd     CF D5 DE EB 
1a9c1     F5 0A 21 36 
1a9c5     3B 34 34 32 
1a9c9     37 25 1E 16 | 	byte	$cf, $d5, $de, $eb, $f5, $0a, $21, $36, $3b, $34, $34, $32, $37, $25, $1e, $16
1a9cd     07 FB FD FB 
1a9d1     00 FF FD EB 
1a9d5     D7 C5 B2 B6 
1a9d9     BB C5 CB DB | 	byte	$07, $fb, $fd, $fb, $00, $ff, $fd, $eb, $d7, $c5, $b2, $b6, $bb, $c5, $cb, $db
1a9dd     E8 FA 0D 15 
1a9e1     28 24 27 24 
1a9e5     1A 0D FF ED 
1a9e9     DC D1 CE D4 | 	byte	$e8, $fa, $0d, $15, $28, $24, $27, $24, $1a, $0d, $ff, $ed, $dc, $d1, $ce, $d4
1a9ed     E4 F0 02 09 
1a9f1     0F 19 1D 12 
1a9f5     0D 06 FD EF 
1a9f9     F2 F7 06 0B | 	byte	$e4, $f0, $02, $09, $0f, $19, $1d, $12, $0d, $06, $fd, $ef, $f2, $f7, $06, $0b
1a9fd     14 14 04 00 
1aa01     FA FE 01 FA 
1aa05     F1 E1 CF CB 
1aa09     C1 C6 C9 D0 | 	byte	$14, $14, $04, $00, $fa, $fe, $01, $fa, $f1, $e1, $cf, $cb, $c1, $c6, $c9, $d0
1aa0d     D5 DA E1 E6 
1aa11     EB EA F7 FC 
1aa15     02 0C 1E 2A 
1aa19     2A 27 1A 11 | 	byte	$d5, $da, $e1, $e6, $eb, $ea, $f7, $fc, $02, $0c, $1e, $2a, $2a, $27, $1a, $11
1aa1d     08 F5 EE E9 
1aa21     E9 F3 FC 0C 
1aa25     20 2C 31 2D 
1aa29     23 15 11 13 | 	byte	$08, $f5, $ee, $e9, $e9, $f3, $fc, $0c, $20, $2c, $31, $2d, $23, $15, $11, $13
1aa2d     1B 1C 1F 1F 
1aa31     17 16 0E 0D 
1aa35     05 FC EE D8 
1aa39     C7 B6 AD A7 | 	byte	$1b, $1c, $1f, $1f, $17, $16, $0e, $0d, $05, $fc, $ee, $d8, $c7, $b6, $ad, $a7
1aa3d     AD B3 C2 E2 
1aa41     08 28 39 40 
1aa45     45 50 4F 3F 
1aa49     3D 38 2E 1E | 	byte	$ad, $b3, $c2, $e2, $08, $28, $39, $40, $45, $50, $4f, $3f, $3d, $38, $2e, $1e
1aa4d     14 0C 0D 0F 
1aa51     0D 05 FF F8 
1aa55     F1 FC 02 08 
1aa59     09 07 05 03 | 	byte	$14, $0c, $0d, $0f, $0d, $05, $ff, $f8, $f1, $fc, $02, $08, $09, $07, $05, $03
1aa5d     01 06 07 06 
1aa61     06 FF F9 EF 
1aa65     E2 D6 CD C3 
1aa69     BD B8 BE C8 | 	byte	$01, $06, $07, $06, $06, $ff, $f9, $ef, $e2, $d6, $cd, $c3, $bd, $b8, $be, $c8
1aa6d     CD D4 D4 D9 
1aa71     D9 D7 DE E7 
1aa75     EF FD 09 20 
1aa79     30 42 49 44 | 	byte	$cd, $d4, $d4, $d9, $d9, $d7, $de, $e7, $ef, $fd, $09, $20, $30, $42, $49, $44
1aa7d     33 1F 0C 05 
1aa81     00 FA EB E8 
1aa85     EA ED F8 03 
1aa89     10 15 14 09 | 	byte	$33, $1f, $0c, $05, $00, $fa, $eb, $e8, $ea, $ed, $f8, $03, $10, $15, $14, $09
1aa8d     01 F9 EA E5 
1aa91     E0 DF DA DD 
1aa95     EF FD 07 0B 
1aa99     05 01 F0 D7 | 	byte	$01, $f9, $ea, $e5, $e0, $df, $da, $dd, $ef, $fd, $07, $0b, $05, $01, $f0, $d7
1aa9d     C8 BF C2 C3 
1aaa1     CD DC F3 08 
1aaa5     1F 2E 27 28 
1aaa9     27 32 36 3F | 	byte	$c8, $bf, $c2, $c3, $cd, $dc, $f3, $08, $1f, $2e, $27, $28, $27, $32, $36, $3f
1aaad     3F 3A 30 1C 
1aab1     10 07 FF 00 
1aab5     F5 F5 F2 F2 
1aab9     F7 FB 04 08 | 	byte	$3f, $3a, $30, $1c, $10, $07, $ff, $00, $f5, $f5, $f2, $f2, $f7, $fb, $04, $08
1aabd     09 10 1E 2C 
1aac1     2E 35 31 29 
1aac5     1D 0A 0B 0B 
1aac9     0A 0A 02 03 | 	byte	$09, $10, $1e, $2c, $2e, $35, $31, $29, $1d, $0a, $0b, $0b, $0a, $0a, $02, $03
1aacd     00 F8 F1 E8 
1aad1     D4 C3 B7 B9 
1aad5     BE D4 E0 EF 
1aad9     F2 01 0B 1A | 	byte	$00, $f8, $f1, $e8, $d4, $c3, $b7, $b9, $be, $d4, $e0, $ef, $f2, $01, $0b, $1a
1aadd     26 2F 2D 2A 
1aae1     1A 0C FA EE 
1aae5     E1 D5 C9 CE 
1aae9     D9 F1 07 16 | 	byte	$26, $2f, $2d, $2a, $1a, $0c, $fa, $ee, $e1, $d5, $c9, $ce, $d9, $f1, $07, $16
1aaed     1F 22 0F FB 
1aaf1     F0 ED F1 FC 
1aaf5     00 06 12 20 
1aaf9     2A 29 1F 11 | 	byte	$1f, $22, $0f, $fb, $f0, $ed, $f1, $fc, $00, $06, $12, $20, $2a, $29, $1f, $11
1aafd     FE F3 E7 D1 
1ab01     C2 BA B2 AE 
1ab05     AF BA CA E1 
1ab09     F2 FE FD 03 | 	byte	$fe, $f3, $e7, $d1, $c2, $ba, $b2, $ae, $af, $ba, $ca, $e1, $f2, $fe, $fd, $03
1ab0d     0A 0F 14 0D 
1ab11     06 06 05 06 
1ab15     11 10 10 0E 
1ab19     FA ED E8 F4 | 	byte	$0a, $0f, $14, $0d, $06, $06, $05, $06, $11, $10, $10, $0e, $fa, $ed, $e8, $f4
1ab1d     04 17 28 39 
1ab21     3B 40 47 43 
1ab25     37 23 17 08 
1ab29     04 03 01 FF | 	byte	$04, $17, $28, $39, $3b, $40, $47, $43, $37, $23, $17, $08, $04, $03, $01, $ff
1ab2d     FD F0 E7 DE 
1ab31     D5 CD C8 C7 
1ab35     C0 C3 C5 C7 
1ab39     D7 DC ED FF | 	byte	$fd, $f0, $e7, $de, $d5, $cd, $c8, $c7, $c0, $c3, $c5, $c7, $d7, $dc, $ed, $ff
1ab3d     0D 1E 38 46 
1ab41     51 51 38 26 
1ab45     1D 17 1E 22 
1ab49     29 29 28 29 | 	byte	$0d, $1e, $38, $46, $51, $51, $38, $26, $1d, $17, $1e, $22, $29, $29, $28, $29
1ab4d     28 2D 29 1D 
1ab51     14 06 FF FF 
1ab55     FD F8 F7 F5 
1ab59     F3 F5 F5 FC | 	byte	$28, $2d, $29, $1d, $14, $06, $ff, $ff, $fd, $f8, $f7, $f5, $f3, $f5, $f5, $fc
1ab5d     02 01 01 FA 
1ab61     F0 E3 DA BD 
1ab65     AD A6 A7 A9 
1ab69     BB CE D9 E3 | 	byte	$02, $01, $01, $fa, $f0, $e3, $da, $bd, $ad, $a6, $a7, $a9, $bb, $ce, $d9, $e3
1ab6d     DF D5 C8 D6 
1ab71     EF 0E 27 3B 
1ab75     43 4E 51 4E 
1ab79     44 32 21 0F | 	byte	$df, $d5, $c8, $d6, $ef, $0e, $27, $3b, $43, $4e, $51, $4e, $44, $32, $21, $0f
1ab7d     FD EF EC E7 
1ab81     E8 E9 EA F2 
1ab85     F8 01 06 0C 
1ab89     0A 09 06 03 | 	byte	$fd, $ef, $ec, $e7, $e8, $e9, $ea, $f2, $f8, $01, $06, $0c, $0a, $09, $06, $03
1ab8d     FD EE EB E2 
1ab91     E3 E5 EA F3 
1ab95     F3 E7 D3 B3 
1ab99     AE B1 BE DD | 	byte	$fd, $ee, $eb, $e2, $e3, $e5, $ea, $f3, $f3, $e7, $d3, $b3, $ae, $b1, $be, $dd
1ab9d     F8 11 24 3B 
1aba1     3C 43 49 47 
1aba5     42 32 2B 19 
1aba9     17 0E 03 FE | 	byte	$f8, $11, $24, $3b, $3c, $43, $49, $47, $42, $32, $2b, $19, $17, $0e, $03, $fe
1abad     F9 EA E5 E6 
1abb1     EB F7 04 10 
1abb5     19 23 28 22 
1abb9     1B 16 1A 18 | 	byte	$f9, $ea, $e5, $e6, $eb, $f7, $04, $10, $19, $23, $28, $22, $1b, $16, $1a, $18
1abbd     1A 1D 25 1F 
1abc1     14 FC ED EE 
1abc5     F8 03 0D 0A 
1abc9     05 FF FA F5 | 	byte	$1a, $1d, $25, $1f, $14, $fc, $ed, $ee, $f8, $03, $0d, $0a, $05, $ff, $fa, $f5
1abcd     F0 E9 DF D6 
1abd1     D8 DB D9 E1 
1abd5     EA F5 00 01 
1abd9     07 09 0B 15 | 	byte	$f0, $e9, $df, $d6, $d8, $db, $d9, $e1, $ea, $f5, $00, $01, $07, $09, $0b, $15
1abdd     19 18 1B 1A 
1abe1     17 06 FA F3 
1abe5     EB EE F6 00 
1abe9     08 07 FD E9 | 	byte	$19, $18, $1b, $1a, $17, $06, $fa, $f3, $eb, $ee, $f6, $00, $08, $07, $fd, $e9
1abed     D4 D3 DE F2 
1abf1     08 1D 2D 38 
1abf5     3C 3E 3B 2B 
1abf9     18 F8 DC BE | 	byte	$d4, $d3, $de, $f2, $08, $1d, $2d, $38, $3c, $3e, $3b, $2b, $18, $f8, $dc, $be
1abfd     AB A6 A2 A4 
1ac01     AC B1 BF D3 
1ac05     DE EC FA 06 
1ac09     18 23 26 20 | 	byte	$ab, $a6, $a2, $a4, $ac, $b1, $bf, $d3, $de, $ec, $fa, $06, $18, $23, $26, $20
1ac0d     11 07 01 FA 
1ac11     FA 04 0A 11 
1ac15     0E FA F1 F5 
1ac19     01 19 33 43 | 	byte	$11, $07, $01, $fa, $fa, $04, $0a, $11, $0e, $fa, $f1, $f5, $01, $19, $33, $43
1ac1d     4E 52 51 54 
1ac21     4D 3F 31 16 
1ac25     06 F8 EE E3 
1ac29     DF DF CD BA | 	byte	$4e, $52, $51, $54, $4d, $3f, $31, $16, $06, $f8, $ee, $e3, $df, $df, $cd, $ba
1ac2d     AC 9F A0 A3 
1ac31     B5 C9 E3 FC 
1ac35     10 21 1D 20 
1ac39     1F 1D 1B 1D | 	byte	$ac, $9f, $a0, $a3, $b5, $c9, $e3, $fc, $10, $21, $1d, $20, $1f, $1d, $1b, $1d
1ac3d     22 29 25 0B 
1ac41     00 02 05 20 
1ac45     36 45 53 53 
1ac49     54 55 53 41 | 	byte	$22, $29, $25, $0b, $00, $02, $05, $20, $36, $45, $53, $53, $54, $55, $53, $41
1ac4d     2D 16 FD EC 
1ac51     E3 DF DF DF 
1ac55     E0 DF DF DF 
1ac59     E1 E9 EE F8 | 	byte	$2d, $16, $fd, $ec, $e3, $df, $df, $df, $e0, $df, $df, $df, $e1, $e9, $ee, $f8
1ac5d     FC F6 F5 E5 
1ac61     D3 C2 BA B7 
1ac65     B6 C1 D1 E4 
1ac69     E7 DB CD CB | 	byte	$fc, $f6, $f5, $e5, $d3, $c2, $ba, $b7, $b6, $c1, $d1, $e4, $e7, $db, $cd, $cb
1ac6d     D1 EA 08 22 
1ac71     37 48 54 5E 
1ac75     61 61 55 48 
1ac79     31 16 01 F4 | 	byte	$d1, $ea, $08, $22, $37, $48, $54, $5e, $61, $61, $55, $48, $31, $16, $01, $f4
1ac7d     EB EC E2 D9 
1ac81     D3 D2 D2 D9 
1ac85     E0 F0 FC 05 
1ac89     10 15 0E 08 | 	byte	$eb, $ec, $e2, $d9, $d3, $d2, $d2, $d9, $e0, $f0, $fc, $05, $10, $15, $0e, $08
1ac8d     FC EE E0 CC 
1ac91     C5 C9 C4 B3 
1ac95     AF B0 C1 E3 
1ac99     07 2E 44 52 | 	byte	$fc, $ee, $e0, $cc, $c5, $c9, $c4, $b3, $af, $b0, $c1, $e3, $07, $2e, $44, $52
1ac9d     55 5A 57 54 
1aca1     44 36 20 0E 
1aca5     FE F8 FB FE 
1aca9     FE FF F5 F0 | 	byte	$55, $5a, $57, $54, $44, $36, $20, $0e, $fe, $f8, $fb, $fe, $fe, $ff, $f5, $f0
1acad     F1 F0 F7 03 
1acb1     0B 16 23 28 
1acb5     2D 2E 2C 27 
1acb9     13 06 FF 00 | 	byte	$f1, $f0, $f7, $03, $0b, $16, $23, $28, $2d, $2e, $2c, $27, $13, $06, $ff, $00
1acbd     01 F2 E6 DD 
1acc1     DA E1 EA F9 
1acc5     03 08 0F 15 
1acc9     1E 1F 24 21 | 	byte	$01, $f2, $e6, $dd, $da, $e1, $ea, $f9, $03, $08, $0f, $15, $1e, $1f, $24, $21
1accd     0A F7 E6 D5 
1acd1     CE D3 D4 DC 
1acd5     DD E2 EB F8 
1acd9     02 10 1E 2C | 	byte	$0a, $f7, $e6, $d5, $ce, $d3, $d4, $dc, $dd, $e2, $eb, $f8, $02, $10, $1e, $2c
1acdd     3A 3E 38 31 
1ace1     22 10 FD EA 
1ace5     DC D8 DC DB 
1ace9     D3 CE C9 DB | 	byte	$3a, $3e, $38, $31, $22, $10, $fd, $ea, $dc, $d8, $dc, $db, $d3, $ce, $c9, $db
1aced     ED 05 1B 32 
1acf1     41 3D 44 38 
1acf5     2A 1D 01 E3 
1acf9     C5 B8 B0 B5 | 	byte	$ed, $05, $1b, $32, $41, $3d, $44, $38, $2a, $1d, $01, $e3, $c5, $b8, $b0, $b5
1acfd     C1 CF CC CC 
1ad01     CB CB CA D5 
1ad05     E4 F7 09 1B 
1ad09     23 28 2D 26 | 	byte	$c1, $cf, $cc, $cc, $cb, $cb, $ca, $d5, $e4, $f7, $09, $1b, $23, $28, $2d, $26
1ad0d     1A 0D 09 09 
1ad11     0A 0A FF F9 
1ad15     F4 F6 01 16 
1ad19     28 3B 4C 4F | 	byte	$1a, $0d, $09, $09, $0a, $0a, $ff, $f9, $f4, $f6, $01, $16, $28, $3b, $4c, $4f
1ad1d     54 4D 41 32 
1ad21     1F 04 F1 DB 
1ad25     D1 C8 C4 C5 
1ad29     B5 B0 AA AB | 	byte	$54, $4d, $41, $32, $1f, $04, $f1, $db, $d1, $c8, $c4, $c5, $b5, $b0, $aa, $ab
1ad2d     B6 CB E5 08 
1ad31     19 29 32 2D 
1ad35     2D 22 14 06 
1ad39     FD FA 00 06 | 	byte	$b6, $cb, $e5, $08, $19, $29, $32, $2d, $2d, $22, $14, $06, $fd, $fa, $00, $06
1ad3d     00 00 FF 02 
1ad41     13 30 46 5C 
1ad45     6C 6B 65 5A 
1ad49     48 36 25 0D | 	byte	$00, $00, $ff, $02, $13, $30, $46, $5c, $6c, $6b, $65, $5a, $48, $36, $25, $0d
1ad4d     F8 E1 D5 D1 
1ad51     CA CE CB CB 
1ad55     CA CC D1 D2 
1ad59     D9 E2 EB EF | 	byte	$f8, $e1, $d5, $d1, $ca, $ce, $cb, $cb, $ca, $cc, $d1, $d2, $d9, $e2, $eb, $ef
1ad5d     ED EA E8 E6 
1ad61     E4 E4 E3 D9 
1ad65     DC DD D1 C3 
1ad69     BE C2 D2 EF | 	byte	$ed, $ea, $e8, $e6, $e4, $e4, $e3, $d9, $dc, $dd, $d1, $c3, $be, $c2, $d2, $ef
1ad6d     12 35 53 62 
1ad71     6B 66 66 69 
1ad75     68 56 3D 1C 
1ad79     FE E4 D3 CC | 	byte	$12, $35, $53, $62, $6b, $66, $66, $69, $68, $56, $3d, $1c, $fe, $e4, $d3, $cc
1ad7d     BE B9 B8 B8 
1ad81     BF C6 D5 DF 
1ad85     F2 03 0B 0A 
1ad89     0D 05 FC EE | 	byte	$be, $b9, $b8, $b8, $bf, $c6, $d5, $df, $f2, $03, $0b, $0a, $0d, $05, $fc, $ee
1ad8d     E2 DB D6 D1 
1ad91     CA CA CB D8 
1ad95     EC FA 0D 25 
1ad99     34 37 3E 38 | 	byte	$e2, $db, $d6, $d1, $ca, $ca, $cb, $d8, $ec, $fa, $0d, $25, $34, $37, $3e, $38
1ad9d     34 35 34 2F 
1ada1     26 17 03 FC 
1ada5     FD FF 0B 0A 
1ada9     0B 06 00 FF | 	byte	$34, $35, $34, $2f, $26, $17, $03, $fc, $fd, $ff, $0b, $0a, $0b, $06, $00, $ff
1adad     FD FF 01 0B 
1adb1     11 12 17 17 
1adb5     12 07 FA F0 
1adb9     EC EE E9 DA | 	byte	$fd, $ff, $01, $0b, $11, $12, $17, $17, $12, $07, $fa, $f0, $ec, $ee, $e9, $da
1adbd     CC C3 C5 CA 
1adc1     DA F3 0C 20 
1adc5     35 3D 42 3E 
1adc9     39 2F 1B FF | 	byte	$cc, $c3, $c5, $ca, $da, $f3, $0c, $20, $35, $3d, $42, $3e, $39, $2f, $1b, $ff
1adcd     E4 D5 CC CF 
1add1     DA E2 EA EE 
1add5     F4 F6 02 10 
1add9     1E 30 37 30 | 	byte	$e4, $d5, $cc, $cf, $da, $e2, $ea, $ee, $f4, $f6, $02, $10, $1e, $30, $37, $30
1addd     21 0E FC E9 
1ade1     D7 D3 D2 D7 
1ade5     DE DC D9 CE 
1ade9     CE CE DE FB | 	byte	$21, $0e, $fc, $e9, $d7, $d3, $d2, $d7, $de, $dc, $d9, $ce, $ce, $ce, $de, $fb
1aded     10 30 34 38 
1adf1     36 35 32 30 
1adf5     1E 03 EE DF 
1adf9     D4 CA C0 BC | 	byte	$10, $30, $34, $38, $36, $35, $32, $30, $1e, $03, $ee, $df, $d4, $ca, $c0, $bc
1adfd     B5 AE AC AC 
1ae01     BC D0 EA 09 
1ae05     17 23 26 20 
1ae09     1C 1B 1C 27 | 	byte	$b5, $ae, $ac, $ac, $bc, $d0, $ea, $09, $17, $23, $26, $20, $1c, $1b, $1c, $27
1ae0d     30 36 36 24 
1ae11     10 FA E9 D9 
1ae15     D8 E5 F5 09 
1ae19     17 21 1C 12 | 	byte	$30, $36, $36, $24, $10, $fa, $e9, $d9, $d8, $e5, $f5, $09, $17, $21, $1c, $12
1ae1d     0E 0F 0D 00 
1ae21     F0 DF D7 D6 
1ae25     DC DC DB DB 
1ae29     DC DC ED F9 | 	byte	$0e, $0f, $0d, $00, $f0, $df, $d7, $d6, $dc, $dc, $db, $db, $dc, $dc, $ed, $f9
1ae2d     00 08 0E 0E 
1ae31     04 FF FF FD 
1ae35     FE 01 0C 1A 
1ae39     26 1E 12 07 | 	byte	$00, $08, $0e, $0e, $04, $ff, $ff, $fd, $fe, $01, $0c, $1a, $26, $1e, $12, $07
1ae3d     02 FD 03 13 
1ae41     25 36 46 48 
1ae45     46 36 29 26 
1ae49     1F 16 08 F7 | 	byte	$02, $fd, $03, $13, $25, $36, $46, $48, $46, $36, $29, $26, $1f, $16, $08, $f7
1ae4d     E9 DC D2 D3 
1ae51     CE CF CA CA 
1ae55     CC D8 E1 F0 
1ae59     F2 F1 E4 D6 | 	byte	$e9, $dc, $d2, $d3, $ce, $cf, $ca, $ca, $cc, $d8, $e1, $f0, $f2, $f1, $e4, $d6
1ae5d     CD C5 B6 B9 
1ae61     BE CF E5 E7 
1ae65     E9 EC F1 F1 
1ae69     F8 02 17 2E | 	byte	$cd, $c5, $b6, $b9, $be, $cf, $e5, $e7, $e9, $ec, $f1, $f1, $f8, $02, $17, $2e
1ae6d     3D 4B 57 55 
1ae71     5A 63 62 52 
1ae75     39 1D FF E3 
1ae79     D3 C2 B6 AF | 	byte	$3d, $4b, $57, $55, $5a, $63, $62, $52, $39, $1d, $ff, $e3, $d3, $c2, $b6, $af
1ae7d     AA A8 AB B2 
1ae81     CA D5 E7 F5 
1ae85     F0 EB E4 E8 
1ae89     ED F8 06 18 | 	byte	$aa, $a8, $ab, $b2, $ca, $d5, $e7, $f5, $f0, $eb, $e4, $e8, $ed, $f8, $06, $18
1ae8d     23 26 23 16 
1ae91     FA E4 D4 CD 
1ae95     D4 DF EC FF 
1ae99     12 1E 25 30 | 	byte	$23, $26, $23, $16, $fa, $e4, $d4, $cd, $d4, $df, $ec, $ff, $12, $1e, $25, $30
1ae9d     30 32 27 1A 
1aea1     11 0D 0E 15 
1aea5     12 14 12 08 
1aea9     04 03 03 06 | 	byte	$30, $32, $27, $1a, $11, $0d, $0e, $15, $12, $14, $12, $08, $04, $03, $03, $06
1aead     06 05 F3 E7 
1aeb1     DD D2 CE C9 
1aeb5     CC E0 F1 FC 
1aeb9     F9 FE FB F4 | 	byte	$06, $05, $f3, $e7, $dd, $d2, $ce, $c9, $cc, $e0, $f1, $fc, $f9, $fe, $fb, $f4
1aebd     ED E8 E9 F1 
1aec1     00 09 0C 0A 
1aec5     05 07 12 1C 
1aec9     1C 1C 1B 1D | 	byte	$ed, $e8, $e9, $f1, $00, $09, $0c, $0a, $05, $07, $12, $1c, $1c, $1c, $1b, $1d
1aecd     20 20 1F 17 
1aed1     0E 03 FD FB 
1aed5     FE 00 00 29 
1aed9     2E 37 44 3F | 	byte	$20, $20, $1f, $17, $0e, $03, $fd, $fb, $fe, $00, $00, $29, $2e, $37, $44, $3f
1aedd     37 2A 25 2A 
1aee1     25 18 0F 00 
1aee5     EA EF F1 E2 
1aee9     FE E3 D7 E6 | 	byte	$37, $2a, $25, $2a, $25, $18, $0f, $00, $ea, $ef, $f1, $e2, $fe, $e3, $d7, $e6
1aeed     EA FE 1A 13 
1aef1     00 05 16 29 
1aef5     49 46 2E 31 
1aef9     3C 4D 54 4D | 	byte	$ea, $fe, $1a, $13, $00, $05, $16, $29, $49, $46, $2e, $31, $3c, $4d, $54, $4d
1aefd     3D 2E 31 2E 
1af01     25 1A 05 E8 
1af05     E2 E6 DF EF 
1af09     F1 CF D2 DC | 	byte	$3d, $2e, $31, $2e, $25, $1a, $05, $e8, $e2, $e6, $df, $ef, $f1, $cf, $d2, $dc
1af0d     EA 00 1A 08 
1af11     00 07 1A 37 
1af15     4F 38 2E 37 
1af19     44 4F 4F 46 | 	byte	$ea, $00, $1a, $08, $00, $07, $1a, $37, $4f, $38, $2e, $37, $44, $4f, $4f, $46
1af1d     35 2A 31 29 
1af21     1D 16 00 E3 
1af25     E3 E3 E2 F2 
1af29     E8 CB D7 E2 | 	byte	$35, $2a, $31, $29, $1d, $16, $00, $e3, $e3, $e3, $e2, $f2, $e8, $cb, $d7, $e2
1af2d     EF 0E 13 01 
1af31     00 0E 1E 3F 
1af35     46 35 2E 38 
1af39     45 4D 46 3D | 	byte	$ef, $0e, $13, $01, $00, $0e, $1e, $3f, $46, $35, $2e, $38, $45, $4d, $46, $3d
1af3d     2A 29 2A 21 
1af41     18 0F F1 E2 
1af45     E3 E3 EA F1 
1af49     DF CF DB E3 | 	byte	$2a, $29, $2a, $21, $18, $0f, $f1, $e2, $e3, $e3, $ea, $f1, $df, $cf, $db, $e3
1af4d     FE 16 0F 00 
1af51     01 11 29 45 
1af55     3D 2E 35 3C 
1af59     49 4D 46 35 | 	byte	$fe, $16, $0f, $00, $01, $11, $29, $45, $3d, $2e, $35, $3c, $49, $4d, $46, $35
1af5d     25 2A 25 21 
1af61     13 00 ED E3 
1af65     E3 E2 EF EA 
1af69     D2 D2 DC EA | 	byte	$25, $2a, $25, $21, $13, $00, $ed, $e3, $e3, $e2, $ef, $ea, $d2, $d2, $dc, $ea
1af6d     00 11 05 00 
1af71     02 16 31 46 
1af75     38 31 37 44 
1af79     4D 49 3F 2E | 	byte	$00, $11, $05, $00, $02, $16, $31, $46, $38, $31, $37, $44, $4d, $49, $3f, $2e
1af7d     25 2A 24 18 
1af81     0F 00 E8 E2 
1af85     E3 E3 F1 E3 
1af89     CB D2 DC EF | 	byte	$25, $2a, $24, $18, $0f, $00, $e8, $e2, $e3, $e3, $f1, $e3, $cb, $d2, $dc, $ef
1af8d     08 08 00 00 
1af91     08 1E 3C 46 
1af95     37 37 3C 46 
1af99     4F 46 3D 2A | 	byte	$08, $08, $00, $00, $08, $1e, $3c, $46, $37, $37, $3c, $46, $4f, $46, $3d, $2a
1af9d     25 29 21 13 
1afa1     05 F1 E8 E2 
1afa5     E3 EA EA D6 
1afa9     C9 D7 E2 FE | 	byte	$25, $29, $21, $13, $05, $f1, $e8, $e2, $e3, $ea, $ea, $d6, $c9, $d7, $e2, $fe
1afad     08 05 00 00 
1afb1     11 29 44 3D 
1afb5     37 3C 44 4D 
1afb9     4F 46 38 25 | 	byte	$08, $05, $00, $00, $11, $29, $44, $3d, $37, $3c, $44, $4d, $4f, $46, $38, $25
1afbd     29 25 1A 0F 
1afc1     00 F1 E3 DF 
1afc5     E2 EF E2 CF 
1afc9     C9 D7 EA 00 | 	byte	$29, $25, $1a, $0f, $00, $f1, $e3, $df, $e2, $ef, $e2, $cf, $c9, $d7, $ea, $00
1afcd     05 01 00 02 
1afd1     1A 31 44 3C 
1afd5     38 3D 49 4F 
1afd9     4F 46 35 25 | 	byte	$05, $01, $00, $02, $1a, $31, $44, $3c, $38, $3d, $49, $4f, $4f, $46, $35, $25
1afdd     2A 21 18 0F 
1afe1     FB EF E2 DF 
1afe5     E3 EA D6 C8 
1afe9     D2 DB EF 00 | 	byte	$2a, $21, $18, $0f, $fb, $ef, $e2, $df, $e3, $ea, $d6, $c8, $d2, $db, $ef, $00
1afed     01 00 00 0E 
1aff1     1E 3C 3F 3C 
1aff5     3D 44 4F 54 
1aff9     4D 3F 2E 29 | 	byte	$01, $00, $00, $0e, $1e, $3c, $3f, $3c, $3d, $44, $4f, $54, $4d, $3f, $2e, $29
1affd     2A 21 13 05 
1b001     F8 ED DF DF 
1b005     E8 E3 CF C8 
1b009     D2 DC F9 00 | 	byte	$2a, $21, $13, $05, $f8, $ed, $df, $df, $e8, $e3, $cf, $c8, $d2, $dc, $f9, $00
1b00d     00 00 01 13 
1b011     2E 3F 3D 3D 
1b015     3F 49 54 54 
1b019     4D 3D 2A 2A | 	byte	$00, $00, $01, $13, $2e, $3f, $3d, $3d, $3f, $49, $54, $54, $4d, $3d, $2a, $2a
1b01d     25 1D 0F 00 
1b021     F2 E8 DC DF 
1b025     E8 D7 C8 C9 
1b029     D2 EA FE 00 | 	byte	$25, $1d, $0f, $00, $f2, $e8, $dc, $df, $e8, $d7, $c8, $c9, $d2, $ea, $fe, $00
1b02d     00 00 07 1D 
1b031     31 3F 3D 3F 
1b035     45 4F 54 54 
1b039     46 38 2A 2A | 	byte	$00, $00, $07, $1d, $31, $3f, $3d, $3f, $45, $4f, $54, $54, $46, $38, $2a, $2a
1b03d     24 18 05 FB 
1b041     F2 DF DB E3 
1b045     E3 CB C4 CB 
1b049     D7 EF FE 00 | 	byte	$24, $18, $05, $fb, $f2, $df, $db, $e3, $e3, $cb, $c4, $cb, $d7, $ef, $fe, $00
1b04d     00 00 0E 24 
1b051     3C 3D 3F 45 
1b055     49 54 58 4F 
1b059     46 35 2A 2A | 	byte	$00, $00, $0e, $24, $3c, $3d, $3f, $45, $49, $54, $58, $4f, $46, $35, $2a, $2a
1b05d     21 11 01 FB 
1b061     F1 DB DC E6 
1b065     DF C4 C4 CF 
1b069     DC F2 FE 00 | 	byte	$21, $11, $01, $fb, $f1, $db, $dc, $e6, $df, $c4, $c4, $cf, $dc, $f2, $fe, $00
1b06d     00 02 16 2E 
1b071     3C 3D 44 46 
1b075     4F 58 5A 4F 
1b079     46 2E 2E 25 | 	byte	$00, $02, $16, $2e, $3c, $3d, $44, $46, $4f, $58, $5a, $4f, $46, $2e, $2e, $25
1b07d     1D 08 00 F9 
1b081     E8 DB DC E3 
1b085     D2 C1 C8 D2 
1b089     EA F2 FE 00 | 	byte	$1d, $08, $00, $f9, $e8, $db, $dc, $e3, $d2, $c1, $c8, $d2, $ea, $f2, $fe, $00
1b08d     00 07 1E 31 
1b091     3C 3F 46 4D 
1b095     54 5A 5A 4D 
1b099     3D 2E 2E 24 | 	byte	$00, $07, $1e, $31, $3c, $3f, $46, $4d, $54, $5a, $5a, $4d, $3d, $2e, $2e, $24
1b09d     18 05 FF F8 
1b0a1     E2 D7 E2 DF 
1b0a5     C8 C1 C9 DB 
1b0a9     EA F2 FF 00 | 	byte	$18, $05, $ff, $f8, $e2, $d7, $e2, $df, $c8, $c1, $c9, $db, $ea, $f2, $ff, $00
1b0ad     01 11 29 38 
1b0b1     3C 44 49 4F 
1b0b5     58 5C 54 49 
1b0b9     37 2E 2A 21 | 	byte	$01, $11, $29, $38, $3c, $44, $49, $4f, $58, $5c, $54, $49, $37, $2e, $2a, $21
1b0bd     0F 00 FE F1 
1b0c1     DF D7 E3 D6 
1b0c5     BC C1 D2 DC 
1b0c9     EA F9 00 00 | 	byte	$0f, $00, $fe, $f1, $df, $d7, $e3, $d6, $bc, $c1, $d2, $dc, $ea, $f9, $00, $00
1b0cd     05 18 2E 38 
1b0d1     3D 46 4D 54 
1b0d5     5C 5C 54 46 
1b0d9     35 2E 25 1D | 	byte	$05, $18, $2e, $38, $3d, $46, $4d, $54, $5c, $5c, $54, $46, $35, $2e, $25, $1d
1b0dd     07 00 FE EA 
1b0e1     D7 DC DF CB 
1b0e5     BA C8 D2 E3 
1b0e9     EA FE 00 01 | 	byte	$07, $00, $fe, $ea, $d7, $dc, $df, $cb, $ba, $c8, $d2, $e3, $ea, $fe, $00, $01
1b0ed     0E 1E 31 38 
1b0f1     3F 49 4F 58 
1b0f5     5E 5A 4F 46 
1b0f9     2E 2E 24 18 | 	byte	$0e, $1e, $31, $38, $3f, $49, $4f, $58, $5e, $5a, $4f, $46, $2e, $2e, $24, $18
1b0fd     01 00 F9 E3 
1b101     D6 DC DB C3 
1b105     B7 C9 DB E6 
1b109     EF FF 00 02 | 	byte	$01, $00, $f9, $e3, $d6, $dc, $db, $c3, $b7, $c9, $db, $e6, $ef, $ff, $00, $02
1b10d     11 29 35 3C 
1b111     45 4F 54 5C 
1b115     5E 5A 4D 38 
1b119     2E 2A 21 0F | 	byte	$11, $29, $35, $3c, $45, $4f, $54, $5c, $5e, $5a, $4d, $38, $2e, $2a, $21, $0f
1b11d     00 00 F1 DF 
1b121     D6 DF D2 BA 
1b125     BC D2 DC E6 
1b129     F2 00 01 07 | 	byte	$00, $00, $f1, $df, $d6, $df, $d2, $ba, $bc, $d2, $dc, $e6, $f2, $00, $01, $07
1b12d     1A 2E 37 3C 
1b131     49 4F 58 5E 
1b135     5E 54 46 35 
1b139     2E 25 18 05 | 	byte	$1a, $2e, $37, $3c, $49, $4f, $58, $5e, $5e, $54, $46, $35, $2e, $25, $18, $05
1b13d     00 FF ED D7 
1b141     D7 DB C8 B7 
1b145     C4 D7 DF E6 
1b149     F9 00 02 0E | 	byte	$00, $ff, $ed, $d7, $d7, $db, $c8, $b7, $c4, $d7, $df, $e6, $f9, $00, $02, $0e
1b14d     1E 2E 37 3F 
1b151     4D 54 5C 60 
1b155     5E 54 46 2E 
1b159     2E 21 13 00 | 	byte	$1e, $2e, $37, $3f, $4d, $54, $5c, $60, $5e, $54, $46, $2e, $2e, $21, $13, $00
1b15d     00 FB E8 D6 
1b161     DC D6 BC B7 
1b165     CF DB DF EA 
1b169     FE 01 07 16 | 	byte	$00, $fb, $e8, $d6, $dc, $d6, $bc, $b7, $cf, $db, $df, $ea, $fe, $01, $07, $16
1b16d     29 31 38 45 
1b171     4F 58 5E 64 
1b175     5C 4F 3D 2E 
1b179     2A 21 0F 00 | 	byte	$29, $31, $38, $45, $4f, $58, $5e, $64, $5c, $4f, $3d, $2e, $2a, $21, $0f, $00
1b17d     00 F2 DF D6 
1b181     DB CB BA BB 
1b185     D2 DB E2 EF 
1b189     00 02 0E 1D | 	byte	$00, $f2, $df, $d6, $db, $cb, $ba, $bb, $d2, $db, $e2, $ef, $00, $02, $0e, $1d
1b18d     2E 31 3C 49 
1b191     54 5C 64 64 
1b195     5A 4D 35 2E 
1b199     25 18 05 00 | 	byte	$2e, $31, $3c, $49, $54, $5c, $64, $64, $5a, $4d, $35, $2e, $25, $18, $05, $00
1b19d     00 F1 DB D7 
1b1a1     D7 C3 B3 C4 
1b1a5     D6 DB E6 F9 
1b1a9     00 07 11 21 | 	byte	$00, $f1, $db, $d7, $d7, $c3, $b3, $c4, $d6, $db, $e6, $f9, $00, $07, $11, $21
1b1ad     2E 35 3F 4F 
1b1b1     58 5E 65 5E 
1b1b5     54 46 35 2E 
1b1b9     21 0F 00 00 | 	byte	$2e, $35, $3f, $4f, $58, $5e, $65, $5e, $54, $46, $35, $2e, $21, $0f, $00, $00
1b1bd     FB E8 D6 D7 
1b1c1     D2 BB B7 C9 
1b1c5     D6 DC EA FE 
1b1c9     01 08 18 25 | 	byte	$fb, $e8, $d6, $d7, $d2, $bb, $b7, $c9, $d6, $dc, $ea, $fe, $01, $08, $18, $25
1b1cd     2E 37 45 54 
1b1d1     5C 64 65 5E 
1b1d5     4F 3D 2E 2A 
1b1d9     1D 07 00 00 | 	byte	$2e, $37, $45, $54, $5c, $64, $65, $5e, $4f, $3d, $2e, $2a, $1d, $07, $00, $00
1b1dd     F8 E3 D6 D6 
1b1e1     CB BA BB D2 
1b1e5     D7 DC EF 00 
1b1e9     05 11 1E 2A | 	byte	$f8, $e3, $d6, $d6, $cb, $ba, $bb, $d2, $d7, $dc, $ef, $00, $05, $11, $1e, $2a
1b1ed     2E 3C 4D 58 
1b1f1     5E 65 64 5A 
1b1f5     4D 37 2E 25 
1b1f9     13 01 01 00 | 	byte	$2e, $3c, $4d, $58, $5e, $65, $64, $5a, $4d, $37, $2e, $25, $13, $01, $01, $00
1b1fd     F1 DF D6 D2 
1b201     C3 B3 C4 D2 
1b205     D7 E6 F9 00 
1b209     08 16 21 2A | 	byte	$f1, $df, $d6, $d2, $c3, $b3, $c4, $d2, $d7, $e6, $f9, $00, $08, $16, $21, $2a
1b20d     31 3F 4F 5A 
1b211     64 65 64 5A 
1b215     46 35 2A 21 
1b219     0F 01 00 FB | 	byte	$31, $3f, $4f, $5a, $64, $65, $64, $5a, $46, $35, $2a, $21, $0f, $01, $00, $fb
1b21d     EA D7 D2 CB 
1b221     BA B7 C9 D2 
1b225     DB EA FE 02 
1b229     0F 1A 25 2E | 	byte	$ea, $d7, $d2, $cb, $ba, $b7, $c9, $d2, $db, $ea, $fe, $02, $0f, $1a, $25, $2e
1b22d     37 45 54 5E 
1b231     65 66 5E 54 
1b235     3D 2E 2A 18 
1b239     05 01 00 F8 | 	byte	$37, $45, $54, $5e, $65, $66, $5e, $54, $3d, $2e, $2a, $18, $05, $01, $00, $f8
1b23d     E6 D6 D2 C8 
1b241     BA BC C9 D2 
1b245     DC EF 00 07 
1b249     13 1E 29 2E | 	byte	$e6, $d6, $d2, $c8, $ba, $bc, $c9, $d2, $dc, $ef, $00, $07, $13, $1e, $29, $2e
1b24d     3C 4D 58 60 
1b251     66 65 5C 4D 
1b255     37 2E 24 11 
1b259     02 01 00 F1 | 	byte	$3c, $4d, $58, $60, $66, $65, $5c, $4d, $37, $2e, $24, $11, $02, $01, $00, $f1
1b25d     DF D2 CF BC 
1b261     B3 C1 CB D6 
1b265     E6 F9 01 0E 
1b269     18 21 2A 31 | 	byte	$df, $d2, $cf, $bc, $b3, $c1, $cb, $d6, $e6, $f9, $01, $0e, $18, $21, $2a, $31
1b26d     3F 54 5C 65 
1b271     66 64 5A 46 
1b275     35 2A 21 08 
1b279     01 00 FB ED | 	byte	$3f, $54, $5c, $65, $66, $64, $5a, $46, $35, $2a, $21, $08, $01, $00, $fb, $ed
1b27d     DF D2 CB BA 
1b281     B7 C4 CF DB 
1b285     EA FF 07 11 
1b289     1A 24 2A 35 | 	byte	$df, $d2, $cb, $ba, $b7, $c4, $cf, $db, $ea, $ff, $07, $11, $1a, $24, $2a, $35
1b28d     45 58 60 66 
1b291     66 60 54 46 
1b295     2E 25 18 05 
1b299     01 00 F8 E8 | 	byte	$45, $58, $60, $66, $66, $60, $54, $46, $2e, $25, $18, $05, $01, $00, $f8, $e8
1b29d     D7 CF C4 B3 
1b2a1     BB 00 00 F9 
1b2a5     FC FC FD FF 
1b2a9     00 00 01 03 | 	byte	$d7, $cf, $c4, $b3, $bb, $00, $00, $f9, $fc, $fc, $fd, $ff, $00, $00, $01, $03
1b2ad     04 07 09 0A 
1b2b1     0D 0D 0E 13 
1b2b5     13 13 10 0E 
1b2b9     10 14 1A 20 | 	byte	$04, $07, $09, $0a, $0d, $0d, $0e, $13, $13, $13, $10, $0e, $10, $14, $1a, $20
1b2bd     21 20 1E 16 
1b2c1     0E 07 07 03 
1b2c5     03 03 FD EA 
1b2c9     D0 BC AF B1 | 	byte	$21, $20, $1e, $16, $0e, $07, $07, $03, $03, $03, $fd, $ea, $d0, $bc, $af, $b1
1b2cd     B1 B1 B3 AD 
1b2d1     A7 A9 A6 A9 
1b2d5     A2 9D 9D 9A 
1b2d9     9A 90 94 94 | 	byte	$b1, $b1, $b3, $ad, $a7, $a9, $a6, $a9, $a2, $9d, $9d, $9a, $9a, $90, $94, $94
1b2dd     A0 A9 B1 AD 
1b2e1     AF B1 B5 CC 
1b2e5     E0 F2 F6 F6 
1b2e9     F6 DF D3 C9 | 	byte	$a0, $a9, $b1, $ad, $af, $b1, $b5, $cc, $e0, $f2, $f6, $f6, $f6, $df, $d3, $c9
1b2ed     CC CF DA E6 
1b2f1     EC F0 FC EC 
1b2f5     EA DA CA C0 
1b2f9     BF BF C5 D0 | 	byte	$cc, $cf, $da, $e6, $ec, $f0, $fc, $ec, $ea, $da, $ca, $c0, $bf, $bf, $c5, $d0
1b2fd     E0 F3 04 09 
1b301     21 2A 37 34 
1b305     2C 20 18 16 
1b309     16 0E 0D 01 | 	byte	$e0, $f3, $04, $09, $21, $2a, $37, $34, $2c, $20, $18, $16, $16, $0e, $0d, $01
1b30d     01 09 16 26 
1b311     37 3B 3D 2D 
1b315     18 01 FF 00 
1b319     FF 00 01 04 | 	byte	$01, $09, $16, $26, $37, $3b, $3d, $2d, $18, $01, $ff, $00, $ff, $00, $01, $04
1b31d     09 00 FC F7 
1b321     F9 FF 07 10 
1b325     24 2D 3A 44 
1b329     4B 4B 4B 41 | 	byte	$09, $00, $fc, $f7, $f9, $ff, $07, $10, $24, $2d, $3a, $44, $4b, $4b, $4b, $41
1b32d     27 14 FF F2 
1b331     F6 01 14 1D 
1b335     21 21 20 20 
1b339     20 1E 1D 16 | 	byte	$27, $14, $ff, $f2, $f6, $01, $14, $1d, $21, $21, $20, $20, $20, $1e, $1d, $16
1b33d     04 ED DC D3 
1b341     C5 CC D3 D9 
1b345     E2 EA F3 EC 
1b349     EC E6 E0 DF | 	byte	$04, $ed, $dc, $d3, $c5, $cc, $d3, $d9, $e2, $ea, $f3, $ec, $ec, $e6, $e0, $df
1b34d     E0 E2 E8 F2 
1b351     F3 FD F9 EA 
1b355     DF D0 D4 CA 
1b359     CC C5 C9 CA | 	byte	$e0, $e2, $e8, $f2, $f3, $fd, $f9, $ea, $df, $d0, $d4, $ca, $cc, $c5, $c9, $ca
1b35d     D6 DA DC CA 
1b361     C3 BF C6 DA 
1b365     F0 04 0D 10 
1b369     10 16 20 30 | 	byte	$d6, $da, $dc, $ca, $c3, $bf, $c6, $da, $f0, $04, $0d, $10, $10, $16, $20, $30
1b36d     36 3B 3D 3A 
1b371     34 20 13 FC 
1b375     F7 E6 D6 D6 
1b379     D3 D6 E2 F2 | 	byte	$36, $3b, $3d, $3a, $34, $20, $13, $fc, $f7, $e6, $d6, $d6, $d3, $d6, $e2, $f2
1b37d     FF 03 00 F6 
1b381     E6 DC D3 CA 
1b385     D3 DA E2 EC 
1b389     EC DF DF D0 | 	byte	$ff, $03, $00, $f6, $e6, $dc, $d3, $ca, $d3, $da, $e2, $ec, $ec, $df, $df, $d0
1b38d     D4 E0 E6 EC 
1b391     EC DA BC AC 
1b395     92 84 86 89 
1b399     90 A0 AD B3 | 	byte	$d4, $e0, $e6, $ec, $ec, $da, $bc, $ac, $92, $84, $86, $89, $90, $a0, $ad, $b3
1b39d     B9 BC C6 CC 
1b3a1     D9 E6 EC F3 
1b3a5     F9 00 04 04 
1b3a9     07 03 00 00 | 	byte	$b9, $bc, $c6, $cc, $d9, $e6, $ec, $f3, $f9, $00, $04, $04, $07, $03, $00, $00
1b3ad     F9 F9 F9 03 
1b3b1     0A 1D 2D 30 
1b3b5     30 2C 24 2C 
1b3b9     34 43 41 43 | 	byte	$f9, $f9, $f9, $03, $0a, $1d, $2d, $30, $30, $2c, $24, $2c, $34, $43, $41, $43
1b3bd     30 1E 0D 13 
1b3c1     13 1E 2D 30 
1b3c5     36 27 20 07 
1b3c9     F0 C0 90 80 | 	byte	$30, $1e, $0d, $13, $13, $1e, $2d, $30, $36, $27, $20, $07, $f0, $c0, $90, $80
1b3cd     80 80 83 94 
1b3d1     9D A6 A0 A6 
1b3d5     A9 AC AD AD 
1b3d9     A6 A0 A3 A3 | 	byte	$80, $80, $83, $94, $9d, $a6, $a0, $a6, $a9, $ac, $ad, $ad, $a6, $a0, $a3, $a3
1b3dd     A2 A3 A3 96 
1b3e1     96 98 9C B1 
1b3e5     BD C3 C0 C0 
1b3e9     C3 CA D3 E0 | 	byte	$a2, $a3, $a3, $96, $96, $98, $9c, $b1, $bd, $c3, $c0, $c0, $c3, $ca, $d3, $e0
1b3ed     F0 01 10 16 
1b3f1     16 18 0E FC 
1b3f5     ED DA D6 DA 
1b3f9     E0 E3 ED F0 | 	byte	$f0, $01, $10, $16, $16, $18, $0e, $fc, $ed, $da, $d6, $da, $e0, $e3, $ed, $f0
1b3fd     F2 F3 EC ED 
1b401     E3 E6 E6 E6 
1b405     F0 03 0E 27 
1b409     34 40 43 43 | 	byte	$f2, $f3, $ec, $ed, $e3, $e6, $e6, $e6, $f0, $03, $0e, $27, $34, $40, $43, $43
1b40d     53 59 57 51 
1b411     2C 0D ED DC 
1b415     CF CF D4 DF 
1b419     EC FC F3 00 | 	byte	$53, $59, $57, $51, $2c, $0d, $ed, $dc, $cf, $cf, $d4, $df, $ec, $fc, $f3, $00
1b41d     FF 00 01 01 
1b421     04 10 20 40 
1b425     54 66 74 77 
1b429     76 71 64 63 | 	byte	$ff, $00, $01, $01, $04, $10, $20, $40, $54, $66, $74, $77, $76, $71, $64, $63
1b42d     4B 37 1E 0D 
1b431     FF F9 00 F6 
1b435     EA E0 E0 E6 
1b439     F0 F9 F6 F3 | 	byte	$4b, $37, $1e, $0d, $ff, $f9, $00, $f6, $ea, $e0, $e0, $e6, $f0, $f9, $f6, $f3
1b43d     F0 F6 FC 10 
1b441     26 2D 3A 37 
1b445     26 18 07 EC 
1b449     D6 C3 B3 AD | 	byte	$f0, $f6, $fc, $10, $26, $2d, $3a, $37, $26, $18, $07, $ec, $d6, $c3, $b3, $ad
1b44d     B1 BC CC C9 
1b451     C9 C9 C6 C6 
1b455     C9 C6 C0 C5 
1b459     CA DF F0 00 | 	byte	$b1, $bc, $cc, $c9, $c9, $c9, $c6, $c6, $c9, $c6, $c0, $c5, $ca, $df, $f0, $00
1b45d     0D 0E 09 04 
1b461     01 01 01 04 
1b465     04 F7 F6 F2 
1b469     F2 F0 F3 00 | 	byte	$0d, $0e, $09, $04, $01, $01, $01, $04, $04, $f7, $f6, $f2, $f2, $f0, $f3, $00
1b46d     0A 10 0D 0D 
1b471     03 00 FD F9 
1b475     F3 FF 0A 14 
1b479     2A 31 31 31 | 	byte	$0a, $10, $0d, $0d, $03, $00, $fd, $f9, $f3, $ff, $0a, $14, $2a, $31, $31, $31
1b47d     27 20 18 04 
1b481     E0 BC A0 96 
1b485     90 A6 B3 CA 
1b489     D3 D6 DA DF | 	byte	$27, $20, $18, $04, $e0, $bc, $a0, $96, $90, $a6, $b3, $ca, $d3, $d6, $da, $df
1b48d     E3 ED ED E2 
1b491     D6 CA C3 C0 
1b495     C5 D0 D6 DC 
1b499     D4 D0 C0 BF | 	byte	$e3, $ed, $ed, $e2, $d6, $ca, $c3, $c0, $c5, $d0, $d6, $dc, $d4, $d0, $c0, $bf
1b49d     B1 A6 9A 92 
1b4a1     A2 B3 CF E6 
1b4a5     F3 04 0E 14 
1b4a9     24 24 21 20 | 	byte	$b1, $a6, $9a, $92, $a2, $b3, $cf, $e6, $f3, $04, $0e, $14, $24, $24, $21, $20
1b4ad     1A 1A 1D 24 
1b4b1     26 24 20 1A 
1b4b5     0A FD FD F6 
1b4b9     F9 F2 F3 F6 | 	byte	$1a, $1a, $1d, $24, $26, $24, $20, $1a, $0a, $fd, $fd, $f6, $f9, $f2, $f3, $f6
1b4bd     03 10 2D 43 
1b4c1     5A 63 60 63 
1b4c5     5A 53 4D 2D 
1b4c9     10 F6 D0 B7 | 	byte	$03, $10, $2d, $43, $5a, $63, $60, $63, $5a, $53, $4d, $2d, $10, $f6, $d0, $b7
1b4cd     A6 9A 92 83 
1b4d1     80 80 80 80 
1b4d5     80 80 80 80 
1b4d9     80 80 90 A3 | 	byte	$a6, $9a, $92, $83, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $90, $a3
1b4dd     B1 C5 C6 CA 
1b4e1     D6 DF EA E2 
1b4e5     E3 E0 DA DF 
1b4e9     E0 E6 E8 EC | 	byte	$b1, $c5, $c6, $ca, $d6, $df, $ea, $e2, $e3, $e0, $da, $df, $e0, $e6, $e8, $ec
1b4ed     E6 D3 C5 BF 
1b4f1     B3 B1 AC B1 
1b4f5     BD CA E3 F2 
1b4f9     04 14 26 37 | 	byte	$e6, $d3, $c5, $bf, $b3, $b1, $ac, $b1, $bd, $ca, $e3, $f2, $04, $14, $26, $37
1b4fd     37 3A 37 24 
1b501     14 04 FC FC 
1b505     01 0D 1A 20 
1b509     1A 0E 0D 0D | 	byte	$37, $3a, $37, $24, $14, $04, $fc, $fc, $01, $0d, $1a, $20, $1a, $0e, $0d, $0d
1b50d     10 00 ED DF 
1b511     DF DF F0 FD 
1b515     18 27 40 36 
1b519     3A 3A 30 27 | 	byte	$10, $00, $ed, $df, $df, $df, $f0, $fd, $18, $27, $40, $36, $3a, $3a, $30, $27
1b51d     1D 10 0E 0E 
1b521     09 0D 18 10 
1b525     16 21 2C 34 
1b529     43 47 4B 4B | 	byte	$1d, $10, $0e, $0e, $09, $0d, $18, $10, $16, $21, $2c, $34, $43, $47, $4b, $4b
1b52d     49 4B 44 41 
1b531     41 37 3A 2D 
1b535     26 1A 0A 00 
1b539     EC E2 E0 E3 | 	byte	$49, $4b, $44, $41, $41, $37, $3a, $2d, $26, $1a, $0a, $00, $ec, $e2, $e0, $e3
1b53d     F0 F6 FD 04 
1b541     13 04 FF FC 
1b545     F6 ED E8 E8 
1b549     E6 EA F3 FC | 	byte	$f0, $f6, $fd, $04, $13, $04, $ff, $fc, $f6, $ed, $e8, $e8, $e6, $ea, $f3, $fc
1b54d     FC F2 EC E2 
1b551     DA D3 CF C0 
1b555     BD A6 9D 94 
1b559     98 9C AD BC | 	byte	$fc, $f2, $ec, $e2, $da, $d3, $cf, $c0, $bd, $a6, $9d, $94, $98, $9c, $ad, $bc
1b55d     CF E2 F2 FD 
1b561     10 1A 18 20 
1b565     2A 31 41 40 
1b569     4B 4D 4F 37 | 	byte	$cf, $e2, $f2, $fd, $10, $1a, $18, $20, $2a, $31, $41, $40, $4b, $4d, $4f, $37
1b56d     27 0D 04 FC 
1b571     F6 ED EA E0 
1b575     DF E6 E8 EA 
1b579     F0 F7 FF 03 | 	byte	$27, $0d, $04, $fc, $f6, $ed, $ea, $e0, $df, $e6, $e8, $ea, $f0, $f7, $ff, $03
1b57d     0D 0E 10 0E 
1b581     04 F3 ED DA 
1b585     D9 E0 D9 E6 
1b589     E3 E6 E2 DC | 	byte	$0d, $0e, $10, $0e, $04, $f3, $ed, $da, $d9, $e0, $d9, $e6, $e3, $e6, $e2, $dc
1b58d     BD A0 86 80 
1b591     80 80 92 B5 
1b595     CC D4 E0 E2 
1b599     E8 F7 FD 03 | 	byte	$bd, $a0, $86, $80, $80, $80, $92, $b5, $cc, $d4, $e0, $e2, $e8, $f7, $fd, $03
1b59d     04 04 07 04 
1b5a1     04 FD F9 FC 
1b5a5     FD 01 04 09 
1b5a9     FC F3 EA DC | 	byte	$04, $04, $07, $04, $04, $fd, $f9, $fc, $fd, $01, $04, $09, $fc, $f3, $ea, $dc
1b5ad     DF E2 EC F3 
1b5b1     01 0A 0E 10 
1b5b5     21 2A 2A 2A 
1b5b9     2A 26 27 31 | 	byte	$df, $e2, $ec, $f3, $01, $0a, $0e, $10, $21, $2a, $2a, $2a, $2a, $26, $27, $31
1b5bd     37 41 49 41 
1b5c1     31 16 03 F6 
1b5c5     EA E2 E6 EA 
1b5c9     EC E8 DC C9 | 	byte	$37, $41, $49, $41, $31, $16, $03, $f6, $ea, $e2, $e6, $ea, $ec, $e8, $dc, $c9
1b5cd     B9 B5 B5 BC 
1b5d1     BF BC B5 AC 
1b5d5     9C 86 80 80 
1b5d9     80 8F 9D AF | 	byte	$b9, $b5, $b5, $bc, $bf, $bc, $b5, $ac, $9c, $86, $80, $80, $80, $8f, $9d, $af
1b5dd     B5 B1 B1 BD 
1b5e1     BC C3 BF C0 
1b5e5     C3 C6 D4 DA 
1b5e9     E2 F3 E8 E6 | 	byte	$b5, $b1, $b1, $bd, $bc, $c3, $bf, $c0, $c3, $c6, $d4, $da, $e2, $f3, $e8, $e6
1b5ed     E2 DF DC E0 
1b5f1     E2 E3 E8 F0 
1b5f5     F2 F9 ED E8 
1b5f9     E0 DA D6 D6 | 	byte	$e2, $df, $dc, $e0, $e2, $e3, $e8, $f0, $f2, $f9, $ed, $e8, $e0, $da, $d6, $d6
1b5fd     DA E0 E3 ED 
1b601     F0 F9 09 16 
1b605     2A 3D 3B 41 
1b609     41 40 3B 24 | 	byte	$da, $e0, $e3, $ed, $f0, $f9, $09, $16, $2a, $3d, $3b, $41, $41, $40, $3b, $24
1b60d     14 0E 09 07 
1b611     13 1D 13 18 
1b615     10 01 01 03 
1b619     03 07 13 14 | 	byte	$14, $0e, $09, $07, $13, $1d, $13, $18, $10, $01, $01, $03, $03, $07, $13, $14
1b61d     16 24 2D 37 
1b621     3B 3D 3D 41 
1b625     43 47 47 4B 
1b629     47 41 41 37 | 	byte	$16, $24, $2d, $37, $3b, $3d, $3d, $41, $43, $47, $47, $4b, $47, $41, $41, $37
1b62d     31 16 03 F0 
1b631     E0 DC E3 F7 
1b635     04 13 21 2D 
1b639     31 41 41 41 | 	byte	$31, $16, $03, $f0, $e0, $dc, $e3, $f7, $04, $13, $21, $2d, $31, $41, $41, $41
1b63d     3A 30 1D 03 
1b641     F2 EC E0 E6 
1b645     E6 F0 F6 F6 
1b649     F6 F3 E3 DA | 	byte	$3a, $30, $1d, $03, $f2, $ec, $e0, $e6, $e6, $f0, $f6, $f6, $f6, $f3, $e3, $da
1b64d     D0 CF C9 CC 
1b651     CC C9 C9 C6 
1b655     C0 C3 B9 C0 
1b659     CA CF DA E2 | 	byte	$d0, $cf, $c9, $cc, $cc, $c9, $c9, $c6, $c0, $c3, $b9, $c0, $ca, $cf, $da, $e2
1b65d     E3 F0 FF 01 
1b661     0D 10 0D 07 
1b665     00 F9 F6 FC 
1b669     FC FF 09 10 | 	byte	$e3, $f0, $ff, $01, $0d, $10, $0d, $07, $00, $f9, $f6, $fc, $fc, $ff, $09, $10
1b66d     20 2D 40 41 
1b671     41 40 34 2C 
1b675     1D 14 10 0D 
1b679     0E 1A 20 20 | 	byte	$20, $2d, $40, $41, $41, $40, $34, $2c, $1d, $14, $10, $0d, $0e, $1a, $20, $20
1b67d     1A 10 00 F9 
1b681     ED E6 E2 D4 
1b685     CA BF B5 B7 
1b689     BD C3 CA CC | 	byte	$1a, $10, $00, $f9, $ed, $e6, $e2, $d4, $ca, $bf, $b5, $b7, $bd, $c3, $ca, $cc
1b68d     CC CC C9 C9 
1b691     C0 C3 BD B9 
1b695     BC BF CF D3 
1b699     DC DC DC DF | 	byte	$cc, $cc, $c9, $c9, $c0, $c3, $bd, $b9, $bc, $bf, $cf, $d3, $dc, $dc, $dc, $df
1b69d     E0 EC F0 F9 
1b6a1     03 0D 14 1D 
1b6a5     26 2A 1D 1A 
1b6a9     0E FF FD FC | 	byte	$e0, $ec, $f0, $f9, $03, $0d, $14, $1d, $26, $2a, $1d, $1a, $0e, $ff, $fd, $fc
1b6ad     FC FF 09 16 
1b6b1     1E 1D 1D 1D 
1b6b5     20 2C 30 31 
1b6b9     31 31 21 1D | 	byte	$fc, $ff, $09, $16, $1e, $1d, $1d, $1d, $20, $2c, $30, $31, $31, $31, $21, $1d
1b6bd     0E FF FC F6 
1b6c1     F2 F9 F9 FF 
1b6c5     01 09 0A 01 
1b6c9     EA CA AF 9D | 	byte	$0e, $ff, $fc, $f6, $f2, $f9, $f9, $ff, $01, $09, $0a, $01, $ea, $ca, $af, $9d
1b6cd     9C 8F 89 86 
1b6d1     80 80 80 80 
1b6d5     84 96 9C AF 
1b6d9     BF C5 CA CA | 	byte	$9c, $8f, $89, $86, $80, $80, $80, $80, $84, $96, $9c, $af, $bf, $c5, $ca, $ca
1b6dd     CF CF D0 D6 
1b6e1     E8 EC F0 F2 
1b6e5     F0 F2 DF C6 
1b6e9     BF BD C5 CF | 	byte	$cf, $cf, $d0, $d6, $e8, $ec, $f0, $f2, $f0, $f2, $df, $c6, $bf, $bd, $c5, $cf
1b6ed     DA E2 EA EA 
1b6f1     ED F2 F2 F2 
1b6f5     F2 EA EC EC 
1b6f9     EC ED E6 E3 | 	byte	$da, $e2, $ea, $ea, $ed, $f2, $f2, $f2, $f2, $ea, $ec, $ec, $ec, $ed, $e6, $e3
1b6fd     E2 DF DA D9 
1b701     DF E0 E6 E8 
1b705     F3 F6 01 01 
1b709     0A 1A 31 41 | 	byte	$e2, $df, $da, $d9, $df, $e0, $e6, $e8, $f3, $f6, $01, $01, $0a, $1a, $31, $41
1b70d     47 4B 47 3A 
1b711     2D 18 09 09 
1b715     0A 18 26 36 
1b719     44 43 59 57 | 	byte	$47, $4b, $47, $3a, $2d, $18, $09, $09, $0a, $18, $26, $36, $44, $43, $59, $57
1b71d     4D 49 43 37 
1b721     3B 3A 37 37 
1b725     36 34 27 2A 
1b729     27 27 26 1E | 	byte	$4d, $49, $43, $37, $3b, $3a, $37, $37, $36, $34, $27, $2a, $27, $27, $26, $1e
1b72d     16 07 FF F6 
1b731     F3 F7 FD 07 
1b735     1A 30 36 31 
1b739     26 13 01 E6 | 	byte	$16, $07, $ff, $f6, $f3, $f7, $fd, $07, $1a, $30, $36, $31, $26, $13, $01, $e6
1b73d     D9 D0 D4 DF 
1b741     ED FF 04 10 
1b745     0E 13 13 00 
1b749     FF FC F7 F3 | 	byte	$d9, $d0, $d4, $df, $ed, $ff, $04, $10, $0e, $13, $13, $00, $ff, $fc, $f7, $f3
1b74d     F6 F6 F7 F7 
1b751     EA E0 D3 C6 
1b755     C0 BD C0 C6 
1b759     CA CF DA DA | 	byte	$f6, $f6, $f7, $f7, $ea, $e0, $d3, $c6, $c0, $bd, $c0, $c6, $ca, $cf, $da, $da
1b75d     E0 F2 FF 03 
1b761     0A 0A 0D FF 
1b765     FD E6 D9 DF 
1b769     E6 F6 10 20 | 	byte	$e0, $f2, $ff, $03, $0a, $0a, $0d, $ff, $fd, $e6, $d9, $df, $e6, $f6, $10, $20
1b76d     2C 36 36 31 
1b771     31 20 1E 18 
1b775     1A 1E 2A 27 
1b779     26 1D 16 09 | 	byte	$2c, $36, $36, $31, $31, $20, $1e, $18, $1a, $1e, $2a, $27, $26, $1d, $16, $09
1b77d     03 F9 F7 F9 
1b781     F7 01 09 1A 
1b785     2A 10 01 F2 
1b789     E8 EA E8 E3 | 	byte	$03, $f9, $f7, $f9, $f7, $01, $09, $1a, $2a, $10, $01, $f2, $e8, $ea, $e8, $e3
1b78d     E6 D6 CF B5 
1b791     A7 A6 A2 A7 
1b795     B5 C3 C9 D4 
1b799     DC DC E3 E2 | 	byte	$e6, $d6, $cf, $b5, $a7, $a6, $a2, $a7, $b5, $c3, $c9, $d4, $dc, $dc, $e3, $e2
1b79d     E0 E2 E6 ED 
1b7a1     F9 FF 09 09 
1b7a5     0A 0A 01 FF 
1b7a9     FC FF 01 13 | 	byte	$e0, $e2, $e6, $ed, $f9, $ff, $09, $09, $0a, $0a, $01, $ff, $fc, $ff, $01, $13
1b7ad     14 20 18 1D 
1b7b1     13 1E 2D 3B 
1b7b5     51 59 57 47 
1b7b9     41 26 0A FC | 	byte	$14, $20, $18, $1d, $13, $1e, $2d, $3b, $51, $59, $57, $47, $41, $26, $0a, $fc
1b7bd     F2 F0 ED FF 
1b7c1     01 0E 14 1E 
1b7c5     1A 14 01 E8 
1b7c9     CA A3 8C 83 | 	byte	$f2, $f0, $ed, $ff, $01, $0e, $14, $1e, $1a, $14, $01, $e8, $ca, $a3, $8c, $83
1b7cd     80 80 80 80 
1b7d1     80 80 80 80 
1b7d5     80          | 	byte	$80[9]
1b7d6     8C 92 A2 AC 
1b7da     B3 B5 BC C6 
1b7de     CF E3 E8 F2 
1b7e2     F2 EA C9 B9 | 	byte	$8c, $92, $a2, $ac, $b3, $b5, $bc, $c6, $cf, $e3, $e8, $f2, $f2, $ea, $c9, $b9
1b7e6     AC B3 C5 D9 
1b7ea     F2 0A 1A 24 
1b7ee     2C 2C 1D 14 
1b7f2     07 FF F3 F2 | 	byte	$ac, $b3, $c5, $d9, $f2, $0a, $1a, $24, $2c, $2c, $1d, $14, $07, $ff, $f3, $f2
1b7f6     E8 E2 E0 E0 
1b7fa     D6 D4 C6 C5 
1b7fe     BD B1 B9 BC 
1b802     CF DF EA E3 | 	byte	$e8, $e2, $e0, $e0, $d6, $d4, $c6, $c5, $bd, $b1, $b9, $bc, $cf, $df, $ea, $e3
1b806     F0 FF 03 18 
1b80a     27 30 37 3B 
1b80e     2C 21 1A 18 
1b812     1D 1D 2D 34 | 	byte	$f0, $ff, $03, $18, $27, $30, $37, $3b, $2c, $21, $1a, $18, $1d, $1d, $2d, $34
1b816     3D 43 44 3D 
1b81a     30 2D 2D 31 
1b81e     3A 40 4B 51 
1b822     53 5A 5A 4F | 	byte	$3d, $43, $44, $3d, $30, $2d, $2d, $31, $3a, $40, $4b, $51, $53, $5a, $5a, $4f
1b826     44 41 41 40 
1b82a     41 49 4B 44 
1b82e     31 1D 0E 09 
1b832     13 13 13 07 | 	byte	$44, $41, $41, $40, $41, $49, $4b, $44, $31, $1d, $0e, $09, $13, $13, $13, $07
1b836     FC F3 D9 C5 
1b83a     BD AD AF B1 
1b83e     C3 D6 ED 01 
1b842     16 1D 1D 1D | 	byte	$fc, $f3, $d9, $c5, $bd, $ad, $af, $b1, $c3, $d6, $ed, $01, $16, $1d, $1d, $1d
1b846     1D 14 0E 07 
1b84a     00 F9 F6 F0 
1b84e     E3 D6 CC C6 
1b852     C6 C9 DA E0 | 	byte	$1d, $14, $0e, $07, $00, $f9, $f6, $f0, $e3, $d6, $cc, $c6, $c6, $c9, $da, $e0
1b856     EC F9 FF FC 
1b85a     F3 F3 FC 00 
1b85e     07 07 09 09 
1b862     FC ED EC E2 | 	byte	$ec, $f9, $ff, $fc, $f3, $f3, $fc, $00, $07, $07, $09, $09, $fc, $ed, $ec, $e2
1b866     E8 F3 F9 03 
1b86a     0E 14 1D 1D 
1b86e     18 18 18 0E 
1b872     10 07 04 07 | 	byte	$e8, $f3, $f9, $03, $0e, $14, $1d, $1d, $18, $18, $18, $0e, $10, $07, $04, $07
1b876     07 09 0E 10 
1b87a     10 07 FC FC 
1b87e     F7 FD 0D 18 
1b882     1D 0E 0D 10 | 	byte	$07, $09, $0e, $10, $10, $07, $fc, $fc, $f7, $fd, $0d, $18, $1d, $0e, $0d, $10
1b886     2A 37 41 47 
1b88a     37 2C 0E F2 
1b88e     E3 D3 CC D0 
1b892     CF D6 DF DF | 	byte	$2a, $37, $41, $47, $37, $2c, $0e, $f2, $e3, $d3, $cc, $d0, $cf, $d6, $df, $df
1b896     F2 EA E3 E6 
1b89a     E3 E3 E3 DA 
1b89e     DC CA CA CC 
1b8a2     CF D0 D4 D9 | 	byte	$f2, $ea, $e3, $e6, $e3, $e3, $e3, $da, $dc, $ca, $ca, $cc, $cf, $d0, $d4, $d9
1b8a6     D9 DC E2 F0 
1b8aa     04 16 27 2C 
1b8ae     2D 31 43 47 
1b8b2     4D 41 3D 2D | 	byte	$d9, $dc, $e2, $f0, $04, $16, $27, $2c, $2d, $31, $43, $47, $4d, $41, $3d, $2d
1b8b6     0E FF E6 D9 
1b8ba     D3 DA EC FF 
1b8be     21 36 49 4F 
1b8c2     47 3D 2D 27 | 	byte	$0e, $ff, $e6, $d9, $d3, $da, $ec, $ff, $21, $36, $49, $4f, $47, $3d, $2d, $27
1b8c6     1A 0D F3 D6 
1b8ca     B7 A7 98 98 
1b8ce     98 92 86 89 
1b8d2     80 80 80 80 | 	byte	$1a, $0d, $f3, $d6, $b7, $a7, $98, $98, $98, $92, $86, $89, $80, $80, $80, $80
1b8d6     80 80 80 80 
1b8da     8C 9C AC B9 
1b8de     BF C5 C5 C5 
1b8e2     C3 C6 CF DA | 	byte	$80, $80, $80, $80, $8c, $9c, $ac, $b9, $bf, $c5, $c5, $c5, $c3, $c6, $cf, $da
1b8e6     EA F7 00 0E 
1b8ea     0E 0E 00 F6 
1b8ee     EA E8 E8 EA 
1b8f2     F0 F3 F7 F6 | 	byte	$ea, $f7, $00, $0e, $0e, $0e, $00, $f6, $ea, $e8, $e8, $ea, $f0, $f3, $f7, $f6
1b8f6     F9 FC ED E2 
1b8fa     D3 CC C9 D0 
1b8fe     DC F0 F3 F6 
1b902     F7 FD 07 13 | 	byte	$f9, $fc, $ed, $e2, $d3, $cc, $c9, $d0, $dc, $f0, $f3, $f6, $f7, $fd, $07, $13
1b906     1D 1E 1D 14 
1b90a     03 FC F2 F6 
1b90e     F6 F9 01 0A 
1b912     16 2A 34 3A | 	byte	$1d, $1e, $1d, $14, $03, $fc, $f2, $f6, $f6, $f9, $01, $0a, $16, $2a, $34, $3a
1b916     3D 40 43 47 
1b91a     4B 51 4D 4B 
1b91e     43 37 36 2A 
1b922     21 1E 20 26 | 	byte	$3d, $40, $43, $47, $4b, $51, $4d, $4b, $43, $37, $36, $2a, $21, $1e, $20, $26
1b926     36 4B 63 7F 
1b92a     7F 7F 7F 6A 
1b92e     4F 37 20 16 
1b932     0A FF ED DF | 	byte	$36, $4b, $63, $7f, $7f, $7f, $7f, $6a, $4f, $37, $20, $16, $0a, $ff, $ed, $df
1b936     D4 D0 D0 D3 
1b93a     DA E3 EC F6 
1b93e     FC F7 ED E8 
1b942     E8 E8 E8 F0 | 	byte	$d4, $d0, $d0, $d3, $da, $e3, $ec, $f6, $fc, $f7, $ed, $e8, $e8, $e8, $e8, $f0
1b946     EA EC EC E8 
1b94a     ED F3 F2 F6 
1b94e     F3 EC E3 E3 
1b952     E3 E2 DF D6 | 	byte	$ea, $ec, $ec, $e8, $ed, $f3, $f2, $f6, $f3, $ec, $e3, $e3, $e3, $e2, $df, $d6
1b956     CA C0 BD CA 
1b95a     E0 F7 0D 1A 
1b95e     18 18 18 14 
1b962     07 0A 09 0D | 	byte	$ca, $c0, $bd, $ca, $e0, $f7, $0d, $1a, $18, $18, $18, $14, $07, $0a, $09, $0d
1b966     16 26 34 34 
1b96a     31 2D 26 1E 
1b96e     20 10 07 FC 
1b972     E8 DF D3 D0 | 	byte	$16, $26, $34, $34, $31, $2d, $26, $1e, $20, $10, $07, $fc, $e8, $df, $d3, $d0
1b976     CC CF CC CF 
1b97a     D4 E0 F6 04 
1b97e     13 20 2D 34 
1b982     3A 44 59 64 | 	byte	$cc, $cf, $cc, $cf, $d4, $e0, $f6, $04, $13, $20, $2d, $34, $3a, $44, $59, $64
1b986     6C 6A 51 3D 
1b98a     34 18 04 F0 
1b98e     DF D0 D6 E3 
1b992     F9 01 07 09 | 	byte	$6c, $6a, $51, $3d, $34, $18, $04, $f0, $df, $d0, $d6, $e3, $f9, $01, $07, $09
1b996     00 F3 F0 EC 
1b99a     E8 EA E8 EA 
1b99e     EA ED F0 F0 
1b9a2     F2 F2 F0 F0 | 	byte	$00, $f3, $f0, $ec, $e8, $ea, $e8, $ea, $ea, $ed, $f0, $f0, $f2, $f2, $f0, $f0
1b9a6     F2 F3 F6 F3 
1b9aa     F2 F2 E8 EC 
1b9ae     ED F7 FF 01 
1b9b2     F7 F2 F3 F7 | 	byte	$f2, $f3, $f6, $f3, $f2, $f2, $e8, $ec, $ed, $f7, $ff, $01, $f7, $f2, $f3, $f7
1b9b6     FD 04 0A 1A 
1b9ba     24 30 3B 37 
1b9be     31 21 14 07 
1b9c2     03 03 04 14 | 	byte	$fd, $04, $0a, $1a, $24, $30, $3b, $37, $31, $21, $14, $07, $03, $03, $04, $14
1b9c6     1A 24 27 18 
1b9ca     03 E0 C0 9A 
1b9ce     84 80 80 80 
1b9d2     80 80 83 84 | 	byte	$1a, $24, $27, $18, $03, $e0, $c0, $9a, $84, $80, $80, $80, $80, $80, $83, $84
1b9d6     89 94 A0 B1 
1b9da     BD BC AD A6 
1b9de     9C 96 9A A0 
1b9e2     A7 B7 C5 D4 | 	byte	$89, $94, $a0, $b1, $bd, $bc, $ad, $a6, $9c, $96, $9a, $a0, $a7, $b7, $c5, $d4
1b9e6     EC FC FF 04 
1b9ea     09 03 FC F2 
1b9ee     EA E3 DF D4 
1b9f2     CC C9 BC B5 | 	byte	$ec, $fc, $ff, $04, $09, $03, $fc, $f2, $ea, $e3, $df, $d4, $cc, $c9, $bc, $b5
1b9f6     B1 AD B1 BD 
1b9fa     D0 E6 F9 07 
1b9fe     1A 20 14 16 
1ba02     16 21 2C 2C | 	byte	$b1, $ad, $b1, $bd, $d0, $e6, $f9, $07, $1a, $20, $14, $16, $16, $21, $2c, $2c
1ba06     24 20 1D 1A 
1ba0a     1E 20 1D 1A 
1ba0e     1A 16 1A 14 
1ba12     10 09 07 00 | 	byte	$24, $20, $1d, $1a, $1e, $20, $1d, $1a, $1a, $16, $1a, $14, $10, $09, $07, $00
1ba16     FF 03 04 10 
1ba1a     1A 20 30 3B 
1ba1e     44 51 5E 63 
1ba22     64 64 64 66 | 	byte	$ff, $03, $04, $10, $1a, $20, $30, $3b, $44, $51, $5e, $63, $64, $64, $64, $66
1ba26     60 5E 5A 49 
1ba2a     41 2D 27 2D 
1ba2e     36 2D 1E 13 
1ba32     04 07 07 FF | 	byte	$60, $5e, $5a, $49, $41, $2d, $27, $2d, $36, $2d, $1e, $13, $04, $07, $07, $ff
1ba36     00 F9 00 FF 
1ba3a     00 04 04 0A 
1ba3e     0A 0A 04 04 
1ba42     FF FC F3 ED | 	byte	$00, $f9, $00, $ff, $00, $04, $04, $0a, $0a, $0a, $04, $04, $ff, $fc, $f3, $ed
1ba46     E3 DC D6 D3 
1ba4a     D3 C5 BF B1 
1ba4e     B3 B5 B3 B9 
1ba52     CA CF D6 D9 | 	byte	$e3, $dc, $d6, $d3, $d3, $c5, $bf, $b1, $b3, $b5, $b3, $b9, $ca, $cf, $d6, $d9
1ba56     E6 F9 04 04 
1ba5a     04 00 00 F7 
1ba5e     F2 F6 FC FD 
1ba62     07 13 26 3D | 	byte	$e6, $f9, $04, $04, $04, $00, $00, $f7, $f2, $f6, $fc, $fd, $07, $13, $26, $3d
1ba66     4F 57 54 4B 
1ba6a     2C 14 03 F6 
1ba6e     EC E8 E2 E2 
1ba72     E2 E6 F2 F9 | 	byte	$4f, $57, $54, $4b, $2c, $14, $03, $f6, $ec, $e8, $e2, $e2, $e2, $e6, $f2, $f9
1ba76     00 FF FC F3 
1ba7a     F6 F7 F9 FC 
1ba7e     00 FF 04 16 
1ba82     27 2C 36 40 | 	byte	$00, $ff, $fc, $f3, $f6, $f7, $f9, $fc, $00, $ff, $04, $16, $27, $2c, $36, $40
1ba86     40 4B 4F 53 
1ba8a     5E 5A 54 51 
1ba8e     4D 34 20 09 
1ba92     F2 D6 C3 BC | 	byte	$40, $4b, $4f, $53, $5e, $5a, $54, $51, $4d, $34, $20, $09, $f2, $d6, $c3, $bc
1ba96     BD BF CA E0 
1ba9a     ED 00 0E 13 
1ba9e     14 16 10 09 
1baa2     03 00 FF FF | 	byte	$bd, $bf, $ca, $e0, $ed, $00, $0e, $13, $14, $16, $10, $09, $03, $00, $ff, $ff
1baa6     01 01 FF F0 
1baaa     EC EC F7 E6 
1baae     E2 DC D4 D0 
1bab2     D0 DC E3 ED | 	byte	$01, $01, $ff, $f0, $ec, $ec, $f7, $e6, $e2, $dc, $d4, $d0, $d0, $dc, $e3, $ed
1bab6     F9 F9 FF 07 
1baba     16 1E 2C 34 
1babe     34 30 36 30 
1bac2     27 24 14 0D | 	byte	$f9, $f9, $ff, $07, $16, $1e, $2c, $34, $34, $30, $36, $30, $27, $24, $14, $0d
1bac6     09 FD F3 F0 
1baca     E2 CA AC 98 
1bace     84 86 8C 9D 
1bad2     A7 9A 9C 9D | 	byte	$09, $fd, $f3, $f0, $e2, $ca, $ac, $98, $84, $86, $8c, $9d, $a7, $9a, $9c, $9d
1bad6     AD AC B1 B3 
1bada     B7 BC BC C0 
1bade     CC D9 D9 E6 
1bae2     E3 E0 E2 DC | 	byte	$ad, $ac, $b1, $b3, $b7, $bc, $bc, $c0, $cc, $d9, $d9, $e6, $e3, $e0, $e2, $dc
1bae6     D9 CC BF AF 
1baea     A6 9D 9C 9A 
1baee     9C A6 AC B9 
1baf2     C5 DF E3 F3 | 	byte	$d9, $cc, $bf, $af, $a6, $9d, $9c, $9a, $9c, $a6, $ac, $b9, $c5, $df, $e3, $f3
1baf6     EA DF D9 D6 
1bafa     DA DC DA DA 
1bafe     DC ED 01 07 
1bb02     16 2A 34 40 | 	byte	$ea, $df, $d9, $d6, $da, $dc, $da, $da, $dc, $ed, $01, $07, $16, $2a, $34, $40
1bb06     4B 51 43 3D 
1bb0a     2C 27 1D 10 
1bb0e     14 14 16 1A 
1bb12     1D 1D 1D 26 | 	byte	$4b, $51, $43, $3d, $2c, $27, $1d, $10, $14, $14, $16, $1a, $1d, $1d, $1d, $26
1bb16     27 27 27 27 
1bb1a     24 24 24 2A 
1bb1e     31 36 36 36 
1bb22     34 36 3B 43 | 	byte	$27, $27, $27, $27, $24, $24, $24, $2a, $31, $36, $36, $36, $34, $36, $3b, $43
1bb26     44 3D 3D 40 
1bb2a     47 47 47 47 
1bb2e     41 3D 36 26 
1bb32     16 13 03 F9 | 	byte	$44, $3d, $3d, $40, $47, $47, $47, $47, $41, $3d, $36, $26, $16, $13, $03, $f9
1bb36     F7 F7 FF 0D 
1bb3a     20 27 2C 26 
1bb3e     16 14 0E 03 
1bb42     00 FC F6 F2 | 	byte	$f7, $f7, $ff, $0d, $20, $27, $2c, $26, $16, $14, $0e, $03, $00, $fc, $f6, $f2
1bb46     F2 F2 F0 E8 
1bb4a     E2 CF B7 AD 
1bb4e     A6 A3 9A 98 
1bb52     92 98 B3 B9 | 	byte	$f2, $f2, $f0, $e8, $e2, $cf, $b7, $ad, $a6, $a3, $9a, $98, $92, $98, $b3, $b9
1bb56     CA DF F0 F9 
1bb5a     01 0E 14 24 
1bb5e     2D 34 34 31 
1bb62     24 24 16 13 | 	byte	$ca, $df, $f0, $f9, $01, $0e, $14, $24, $2d, $34, $34, $31, $24, $24, $16, $13
1bb66     FF EC E6 DF 
1bb6a     E2 E3 E3 E8 
1bb6e     EA FC 0A 18 
1bb72     20 24 16 13 | 	byte	$ff, $ec, $e6, $df, $e2, $e3, $e3, $e8, $ea, $fc, $0a, $18, $20, $24, $16, $13
1bb76     00 FF FD 04 
1bb7a     07 0A 14 1A 
1bb7e     2A 37 3B 41 
1bb82     44 43 41 3A | 	byte	$00, $ff, $fd, $04, $07, $0a, $14, $1a, $2a, $37, $3b, $41, $44, $43, $41, $3a
1bb86     34 36 2C 2D 
1bb8a     21 1E 18 1A 
1bb8e     1E 26 26 21 
1bb92     16 10 03 FC | 	byte	$34, $36, $2c, $2d, $21, $1e, $18, $1a, $1e, $26, $26, $21, $16, $10, $03, $fc
1bb96     F2 E8 E6 E6 
1bb9a     E8 E8 F0 FF 
1bb9e     03 03 FF F9 
1bba2     F9 FC F9 F9 | 	byte	$f2, $e8, $e6, $e6, $e8, $e8, $f0, $ff, $03, $03, $ff, $f9, $f9, $fc, $f9, $f9
1bba6     F0 E8 E6 E0 
1bbaa     E0 E6 E8 EA 
1bbae     F0 F9 03 13 
1bbb2     1E 1E 1E 16 | 	byte	$f0, $e8, $e6, $e0, $e0, $e6, $e8, $ea, $f0, $f9, $03, $13, $1e, $1e, $1e, $16
1bbb6     10 0D 0D 0D 
1bbba     04 00 FD FF 
1bbbe     FC FF 01 07 
1bbc2     0A 0A 10 10 | 	byte	$10, $0d, $0d, $0d, $04, $00, $fd, $ff, $fc, $ff, $01, $07, $0a, $0a, $10, $10
1bbc6     1A 18 0E 04 
1bbca     F0 D4 CA B9 
1bbce     A6 90 80 80 
1bbd2     80 80 83 9D | 	byte	$1a, $18, $0e, $04, $f0, $d4, $ca, $b9, $a6, $90, $80, $80, $80, $80, $83, $9d
1bbd6     AF B7 C5 CA 
1bbda     D6 E8 E8 EC 
1bbde     F2 EA E6 E0 
1bbe2     DC DA D3 CF | 	byte	$af, $b7, $c5, $ca, $d6, $e8, $e8, $ec, $f2, $ea, $e6, $e0, $dc, $da, $d3, $cf
1bbe6     BD B5 B5 AD 
1bbea     B1 AC A7 A7 
1bbee     A9 AD BC C5 
1bbf2     C6 C5 B5 B5 | 	byte	$bd, $b5, $b5, $ad, $b1, $ac, $a7, $a7, $a9, $ad, $bc, $c5, $c6, $c5, $b5, $b5
1bbf6     AF C0 C6 D9 
1bbfa     E0 EA FC FF 
1bbfe     04 16 16 1A 
1bc02     1A 10 13 0A | 	byte	$af, $c0, $c6, $d9, $e0, $ea, $fc, $ff, $04, $16, $16, $1a, $1a, $10, $13, $0a
1bc06     0E 0E 13 14 
1bc0a     13 13 10 10 
1bc0e     10 16 16 16 
1bc12     1A 1E 21 27 | 	byte	$0e, $0e, $13, $14, $13, $13, $10, $10, $10, $16, $16, $16, $1a, $1e, $21, $27
1bc16     30 31 3D 44 
1bc1a     51 60 64 64 
1bc1e     54 43 37 2D 
1bc22     2A 21 18 0E | 	byte	$30, $31, $3d, $44, $51, $60, $64, $64, $54, $43, $37, $2d, $2a, $21, $18, $0e
1bc26     0D 09 0A 16 
1bc2a     21 30 3B 44 
1bc2e     53 5D 6C 6E 
1bc32     6C 5A 43 27 | 	byte	$0d, $09, $0a, $16, $21, $30, $3b, $44, $53, $5d, $6c, $6e, $6c, $5a, $43, $27
1bc36     0D F9 F0 EC 
1bc3a     EA E8 ED F7 
1bc3e     03 0E 14 1A 
1bc42     16 0D 13 14 | 	byte	$0d, $f9, $f0, $ec, $ea, $e8, $ed, $f7, $03, $0e, $14, $1a, $16, $0d, $13, $14
1bc46     09 FC E0 C9 
1bc4a     AD A2 A3 A2 
1bc4e     A6 B1 B5 C0 
1bc52     C0 D3 E2 E8 | 	byte	$09, $fc, $e0, $c9, $ad, $a2, $a3, $a2, $a6, $b1, $b5, $c0, $c0, $d3, $e2, $e8
1bc56     F2 F2 F6 F7 
1bc5a     00 09 0A 0D 
1bc5e     0A 04 07 04 
1bc62     04 00 FD FD | 	byte	$f2, $f2, $f6, $f7, $00, $09, $0a, $0d, $0a, $04, $07, $04, $04, $00, $fd, $fd
1bc66     F3 F2 F3 ED 
1bc6a     F2 EC EC F0 
1bc6e     F6 FC 01 00 
1bc72     FC F6 F2 F3 | 	byte	$f3, $f2, $f3, $ed, $f2, $ec, $ec, $f0, $f6, $fc, $01, $00, $fc, $f6, $f2, $f3
1bc76     FF 03 10 21 
1bc7a     2D 2C 2C 31 
1bc7e     3B 49 4F 4D 
1bc82     4B 4D 4F 51 | 	byte	$ff, $03, $10, $21, $2d, $2c, $2c, $31, $3b, $49, $4f, $4d, $4b, $4d, $4f, $51
1bc86     54 4D 3B 31 
1bc8a     18 0E 0D 04 
1bc8e     07 07 09 14 
1bc92     1D 21 26 2A | 	byte	$54, $4d, $3b, $31, $18, $0e, $0d, $04, $07, $07, $09, $14, $1d, $21, $26, $2a
1bc96     21 1E 18 16 
1bc9a     14 13 01 EC 
1bc9e     D3 C3 BC AF 
1bca2     B5 B5 B7 B7 | 	byte	$21, $1e, $18, $16, $14, $13, $01, $ec, $d3, $c3, $bc, $af, $b5, $b5, $b7, $b7
1bca6     B5 C6 DF F6 
1bcaa     03 16 13 16 
1bcae     27 27 27 21 
1bcb2     14 09 01 F7 | 	byte	$b5, $c6, $df, $f6, $03, $16, $13, $16, $27, $27, $27, $21, $14, $09, $01, $f7
1bcb6     FC F3 FC 00 
1bcba     09 0E 16 1D 
1bcbe     1E 20 21 21 
1bcc2     21 21 20 14 | 	byte	$fc, $f3, $fc, $00, $09, $0e, $16, $1d, $1e, $20, $21, $21, $21, $21, $20, $14
1bcc6     03 EC CF C0 
1bcca     BF BC C9 D0 
1bcce     DC DF C6 B5 
1bcd2     A2 9C 98 92 | 	byte	$03, $ec, $cf, $c0, $bf, $bc, $c9, $d0, $dc, $df, $c6, $b5, $a2, $9c, $98, $92
1bcd6     96 98 A6 AC 
1bcda     B7 C5 CA CC 
1bcde     D0 D6 CC C6 
1bce2     C0 BD BD B5 | 	byte	$96, $98, $a6, $ac, $b7, $c5, $ca, $cc, $d0, $d6, $cc, $c6, $c0, $bd, $bd, $b5
1bce6     B3 B5 B7 BC 
1bcea     C0 CA D0 E0 
1bcee     E3 E3 E3 CF 
1bcf2     B9 AC 9C 9D | 	byte	$b3, $b5, $b7, $bc, $c0, $ca, $d0, $e0, $e3, $e3, $e3, $cf, $b9, $ac, $9c, $9d
1bcf6     AC BD D0 E2 
1bcfa     DF E3 ED 04 
1bcfe     14 21 27 2A 
1bd02     27 30 31 30 | 	byte	$ac, $bd, $d0, $e2, $df, $e3, $ed, $04, $14, $21, $27, $2a, $27, $30, $31, $30
1bd06     2A 14 FF F2 
1bd0a     E2 D9 D0 D4 
1bd0e     D6 DA E8 FF 
1bd12     14 30 47 5E | 	byte	$2a, $14, $ff, $f2, $e2, $d9, $d0, $d4, $d6, $da, $e8, $ff, $14, $30, $47, $5e
1bd16     66 76 77 7C 
1bd1a     6E 4D 34 18 
1bd1e     07 FF FF 04 
1bd22     16 1D 1E 1E | 	byte	$66, $76, $77, $7c, $6e, $4d, $34, $18, $07, $ff, $ff, $04, $16, $1d, $1e, $1e
1bd26     26 31 40 44 
1bd2a     47 4D 4F 54 
1bd2e     5D 63 64 60 
1bd32     59 57 51 40 | 	byte	$26, $31, $40, $44, $47, $4d, $4f, $54, $5d, $63, $64, $60, $59, $57, $51, $40
1bd36     34 1D 0A FD 
1bd3a     F3 F3 F3 F6 
1bd3e     F6 F7 F9 FD 
1bd42     FF F6 ED DA | 	byte	$34, $1d, $0a, $fd, $f3, $f3, $f3, $f6, $f6, $f7, $f9, $fd, $ff, $f6, $ed, $da
1bd46     C5 B5 B1 B3 
1bd4a     BD CA D6 E3 
1bd4e     E6 D3 CC CC 
1bd52     D0 DA D9 E0 | 	byte	$c5, $b5, $b1, $b3, $bd, $ca, $d6, $e3, $e6, $d3, $cc, $cc, $d0, $da, $d9, $e0
1bd56     E0 E8 F6 04 
1bd5a     09 14 13 09 
1bd5e     FD F0 DF DF 
1bd62     DA DC E2 ED | 	byte	$e0, $e8, $f6, $04, $09, $14, $13, $09, $fd, $f0, $df, $df, $da, $dc, $e2, $ed
1bd66     FC 07 13 2A 
1bd6a     31 3B 3B 3A 
1bd6e     26 13 F2 DA 
1bd72     BF B7 BD CF | 	byte	$fc, $07, $13, $2a, $31, $3b, $3b, $3a, $26, $13, $f2, $da, $bf, $b7, $bd, $cf
1bd76     E6 FC 01 FC 
1bd7a     FF 0A 1A 3A 
1bd7e     47 4F 5A 5E 
1bd82     63 6E 6A 60 | 	byte	$e6, $fc, $01, $fc, $ff, $0a, $1a, $3a, $47, $4f, $5a, $5e, $63, $6e, $6a, $60
1bd86     53 3D 2D 16 
1bd8a     0A 01 FC FC 
1bd8e     03 09 20 31 
1bd92     43 4D 57 5D | 	byte	$53, $3d, $2d, $16, $0a, $01, $fc, $fc, $03, $09, $20, $31, $43, $4d, $57, $5d
1bd96     51 43 31 18 
1bd9a     F7 D9 C6 BF 
1bd9e     C3 D0 DA E8 
1bda2     F2 E3 D9 D9 | 	byte	$51, $43, $31, $18, $f7, $d9, $c6, $bf, $c3, $d0, $da, $e8, $f2, $e3, $d9, $d9
1bda6     DA DA E0 E8 
1bdaa     E6 EA F0 F0 
1bdae     EC F0 ED F2 
1bdb2     F6 F7 FD 03 | 	byte	$da, $da, $e0, $e8, $e6, $ea, $f0, $f0, $ec, $f0, $ed, $f2, $f6, $f7, $fd, $03
1bdb6     04 10 1A 18 
1bdba     1A 20 21 26 
1bdbe     24 24 1E 1A 
1bdc2     10 04 F9 E8 | 	byte	$04, $10, $1a, $18, $1a, $20, $21, $26, $24, $24, $1e, $1a, $10, $04, $f9, $e8
1bdc6     D9 D4 CF D3 
1bdca     DF EC F6 F0 
1bdce     F0 E6 F0 EC 
1bdd2     E8 E0 CF C0 | 	byte	$d9, $d4, $cf, $d3, $df, $ec, $f6, $f0, $f0, $e6, $f0, $ec, $e8, $e0, $cf, $c0
1bdd6     BC B7 B7 B5 
1bdda     AD A6 9A 94 
1bdde     89 80 83 84 
1bde2     86 86 8F 9D | 	byte	$bc, $b7, $b7, $b5, $ad, $a6, $9a, $94, $89, $80, $83, $84, $86, $86, $8f, $9d
1bde6     AD CA E0 F0 
1bdea     00 01 01 FC 
1bdee     E6 C9 AF A0 
1bdf2     9A 9D A7 B9 | 	byte	$ad, $ca, $e0, $f0, $00, $01, $01, $fc, $e6, $c9, $af, $a0, $9a, $9d, $a7, $b9
1bdf6     C5 CA C9 CC 
1bdfa     DC F0 FD 04 
1bdfe     0A 0A 0E 13 
1be02     1A 1D 21 26 | 	byte	$c5, $ca, $c9, $cc, $dc, $f0, $fd, $04, $0a, $0a, $0e, $13, $1a, $1d, $21, $26
1be06     26 2A 2A 2C 
1be0a     1E 18 10 04 
1be0e     04 07 09 13 
1be12     1D 21 2C 31 | 	byte	$26, $2a, $2a, $2c, $1e, $18, $10, $04, $04, $07, $09, $13, $1d, $21, $2c, $31
1be16     2D 30 16 03 
1be1a     F7 F2 ED F3 
1be1e     07 1D 37 4D 
1be22     4F 4F 4F 4D | 	byte	$2d, $30, $16, $03, $f7, $f2, $ed, $f3, $07, $1d, $37, $4d, $4f, $4f, $4f, $4d
1be26     57 59 5A 59 
1be2a     4D 40 34 27 
1be2e     26 21 2A 2D 
1be32     30 31 36 36 | 	byte	$57, $59, $5a, $59, $4d, $40, $34, $27, $26, $21, $2a, $2d, $30, $31, $36, $36
1be36     30 21 1A 0E 
1be3a     14 16 2A 34 
1be3e     37 3A 31 21 
1be42     10 F3 E2 CA | 	byte	$30, $21, $1a, $0e, $14, $16, $2a, $34, $37, $3a, $31, $21, $10, $f3, $e2, $ca
1be46     BC B9 B7 BC 
1be4a     CA D0 C9 C0 
1be4e     B3 AF B9 BF 
1be52     C9 D0 DA E0 | 	byte	$bc, $b9, $b7, $bc, $ca, $d0, $c9, $c0, $b3, $af, $b9, $bf, $c9, $d0, $da, $e0
1be56     ED F7 FC F9 
1be5a     F9 FC F3 F6 
1be5e     F3 F0 E0 D9 
1be62     D9 D9 E6 F3 | 	byte	$ed, $f7, $fc, $f9, $f9, $fc, $f3, $f6, $f3, $f0, $e0, $d9, $d9, $d9, $e6, $f3
1be66     04 16 24 2A 
1be6a     27 26 18 04 
1be6e     00 F6 F3 F9 
1be72     00 0E 20 2A | 	byte	$04, $16, $24, $2a, $27, $26, $18, $04, $00, $f6, $f3, $f9, $00, $0e, $20, $2a
1be76     26 1E 18 14 
1be7a     18 1D 21 20 
1be7e     26 24 24 26 
1be82     1E 1A 1A 16 | 	byte	$26, $1e, $18, $14, $18, $1d, $21, $20, $26, $24, $24, $26, $1e, $1a, $1a, $16
1be86     18 18 1D 21 
1be8a     2C 2C 3A 43 
1be8e     43 44 51 53 
1be92     5E 5A 51 41 | 	byte	$18, $18, $1d, $21, $2c, $2c, $3a, $43, $43, $44, $51, $53, $5e, $5a, $51, $41
1be96     27 0D F6 D9 
1be9a     C5 B9 B7 BF 
1be9e     CF E2 EC EC 
1bea2     F0 F3 FF 0D | 	byte	$27, $0d, $f6, $d9, $c5, $b9, $b7, $bf, $cf, $e2, $ec, $ec, $f0, $f3, $ff, $0d
1bea6     24 2C 36 34 
1beaa     20 10 00 EC 
1beae     EA DC D4 D6 
1beb2     D6 D9 DF E3 | 	byte	$24, $2c, $36, $34, $20, $10, $00, $ec, $ea, $dc, $d4, $d6, $d6, $d9, $df, $e3
1beb6     E6 EC EA F2 
1beba     F6 F6 F9 F9 
1bebe     FF 00 0A 0E 
1bec2     14 13 0A 0A | 	byte	$e6, $ec, $ea, $f2, $f6, $f6, $f9, $f9, $ff, $00, $0a, $0e, $14, $13, $0a, $0a
1bec6     0D 18 18 1E 
1beca     16 00 EC DC 
1bece     D4 D0 D4 DA 
1bed2     CC B7 A7 98 | 	byte	$0d, $18, $18, $1e, $16, $00, $ec, $dc, $d4, $d0, $d4, $da, $cc, $b7, $a7, $98
1bed6     8A 89 94 9A 
1beda     AC B1 C0 C9 
1bede     CF D6 CC CF 
1bee2     CF CF CF D3 | 	byte	$8a, $89, $94, $9a, $ac, $b1, $c0, $c9, $cf, $d6, $cc, $cf, $cf, $cf, $cf, $d3
1bee6     D4 D6 D6 C9 
1beea     C6 B7 AC 9C 
1beee     9A 8C 8C 8F 
1bef2     94 A6 BC BF | 	byte	$d4, $d6, $d6, $c9, $c6, $b7, $ac, $9c, $9a, $8c, $8c, $8f, $94, $a6, $bc, $bf
1bef6     CA E2 E6 ED 
1befa     F7 00 0A 14 
1befe     16 0D 0A F9 
1bf02     F2 F0 EC ED | 	byte	$ca, $e2, $e6, $ed, $f7, $00, $0a, $14, $16, $0d, $0a, $f9, $f2, $f0, $ec, $ed
1bf06     F6 FF 09 16 
1bf0a     1D 24 27 3A 
1bf0e     3D 40 49 49 
1bf12     41 3A 30 1E | 	byte	$f6, $ff, $09, $16, $1d, $24, $27, $3a, $3d, $40, $49, $49, $41, $3a, $30, $1e
1bf16     14 0D 10 13 
1bf1a     14 1A 26 30 
1bf1e     3A 3A 36 2D 
1bf22     27 24 2A 2C | 	byte	$14, $0d, $10, $13, $14, $1a, $26, $30, $3a, $3a, $36, $2d, $27, $24, $2a, $2c
1bf26     36 36 36 2D 
1bf2a     30 27 2D 30 
1bf2e     26 24 24 27 
1bf32     3B 43 49 47 | 	byte	$36, $36, $36, $2d, $30, $27, $2d, $30, $26, $24, $24, $27, $3b, $43, $49, $47
1bf36     3D 30 18 01 
1bf3a     F0 E2 D9 D9 
1bf3e     DF E2 E8 F3 
1bf42     00 09 16 1D | 	byte	$3d, $30, $18, $01, $f0, $e2, $d9, $d9, $df, $e2, $e8, $f3, $00, $09, $16, $1d
1bf46     26 2C 2A 16 
1bf4a     00 F3 E2 D6 
1bf4e     D9 D9 DC E0 
1bf52     D9 D9 CF C0 | 	byte	$26, $2c, $2a, $16, $00, $f3, $e2, $d6, $d9, $d9, $dc, $e0, $d9, $d9, $cf, $c0
1bf56     BD B5 B1 B3 
1bf5a     B3 B5 C5 D6 
1bf5e     E0 F9 04 18 
1bf62     20 20 16 18 | 	byte	$bd, $b5, $b1, $b3, $b3, $b5, $c5, $d6, $e0, $f9, $04, $18, $20, $20, $16, $18
1bf66     10 13 09 09 
1bf6a     01 FF FF F3 
1bf6e     EC E8 E8 E8 
1bf72     F0 F7 F6 00 | 	byte	$10, $13, $09, $09, $01, $ff, $ff, $f3, $ec, $e8, $e8, $e8, $f0, $f7, $f6, $00
1bf76     09 16 2A 3D 
1bf7a     4B 5D 5A 5D 
1bf7e     51 40 31 21 
1bf82     21 21 26 30 | 	byte	$09, $16, $2a, $3d, $4b, $5d, $5a, $5d, $51, $40, $31, $21, $21, $21, $26, $30
1bf86     3A 47 4D 54 
1bf8a     54 54 47 3A 
1bf8e     27 14 00 F3 
1bf92     F2 F2 F2 00 | 	byte	$3a, $47, $4d, $54, $54, $54, $47, $3a, $27, $14, $00, $f3, $f2, $f2, $f2, $00
1bf96     16 21 20 16 
1bf9a     09 03 03 FD 
1bf9e     F6 F0 F0 ED 
1bfa2     E8 ED F2 FC | 	byte	$16, $21, $20, $16, $09, $03, $03, $fd, $f6, $f0, $f0, $ed, $e8, $ed, $f2, $fc
1bfa6     FC F3 F2 EA 
1bfaa     E8 E2 E8 EA 
1bfae     ED F2 FD 03 
1bfb2     0A 13 13 14 | 	byte	$fc, $f3, $f2, $ea, $e8, $e2, $e8, $ea, $ed, $f2, $fd, $03, $0a, $13, $13, $14
1bfb6     13 10 0A 00 
1bfba     FF F7 F3 F9 
1bfbe     F7 FF 04 04 
1bfc2     07 07 03 03 | 	byte	$13, $10, $0a, $00, $ff, $f7, $f3, $f9, $f7, $ff, $04, $04, $07, $07, $03, $03
1bfc6     FF F9 ED EA 
1bfca     E2 E6 E6 E3 
1bfce     E6 E8 E3 DF 
1bfd2     C6 B1 96 84 | 	byte	$ff, $f9, $ed, $ea, $e2, $e6, $e6, $e3, $e6, $e8, $e3, $df, $c6, $b1, $96, $84
1bfd6     80 80 80 80 
1bfda     84 8C A3 B1 
1bfde     BF D6 E0 EC 
1bfe2     F2 F3 F2 EC | 	byte	$80, $80, $80, $80, $84, $8c, $a3, $b1, $bf, $d6, $e0, $ec, $f2, $f3, $f2, $ec
1bfe6     D9 D3 C0 BD 
1bfea     BD BF C3 C5 
1bfee     C6 CA CF D4 
1bff2     D3 D4 D3 D4 | 	byte	$d9, $d3, $c0, $bd, $bd, $bf, $c3, $c5, $c6, $ca, $cf, $d4, $d3, $d4, $d3, $d4
1bff6     D3 D0 D3 D4 
1bffa     D6 D9 D6 D9 
1bffe     D9 D9 E2 ED 
1c002     ED F3 FF 07 | 	byte	$d3, $d0, $d3, $d4, $d6, $d9, $d6, $d9, $d9, $d9, $e2, $ed, $ed, $f3, $ff, $07
1c006     16 26 31 37 
1c00a     40 36 30 1E 
1c00e     09 FC EC E6 
1c012     E3 EC FD 10 | 	byte	$16, $26, $31, $37, $40, $36, $30, $1e, $09, $fc, $ec, $e6, $e3, $ec, $fd, $10
1c016     27 3A 4B 57 
1c01a     64 64 5A 4F 
1c01e     47 3D 3A 3D 
1c022     41 54 5E 5E | 	byte	$27, $3a, $4b, $57, $64, $64, $5a, $4f, $47, $3d, $3a, $3d, $41, $54, $5e, $5e
1c026     60 59 51 43 
1c02a     37 26 18 0E 
1c02e     03 00 04 04 
1c032     10 18 2A 27 | 	byte	$60, $59, $51, $43, $37, $26, $18, $0e, $03, $00, $04, $04, $10, $18, $2a, $27
1c036     26 09 F0 DC 
1c03a     CC C5 CA D6 
1c03e     E6 FD 04 13 
1c042     1A 18 18 0D | 	byte	$26, $09, $f0, $dc, $cc, $c5, $ca, $d6, $e6, $fd, $04, $13, $1a, $18, $18, $0d
1c046     F6 E8 E6 DC 
1c04a     DC DC DC ED 
1c04e     F7 FC FC F6 
1c052     E6 DA CF CA | 	byte	$f6, $e8, $e6, $dc, $dc, $dc, $dc, $ed, $f7, $fc, $fc, $f6, $e6, $da, $cf, $ca
1c056     CC D0 E0 EC 
1c05a     00 10 21 2D 
1c05e     2C 2D 24 16 
1c062     04 F9 DF C6 | 	byte	$cc, $d0, $e0, $ec, $00, $10, $21, $2d, $2c, $2d, $24, $16, $04, $f9, $df, $c6
1c066     C0 BD C0 D4 
1c06a     E2 F2 F6 F3 
1c06e     F7 F9 F2 ED 
1c072     F6 FF 07 10 | 	byte	$c0, $bd, $c0, $d4, $e2, $f2, $f6, $f3, $f7, $f9, $f2, $ed, $f6, $ff, $07, $10
1c076     18 26 31 37 
1c07a     37 2D 27 21 
1c07e     21 24 2A 31 
1c082     41 4B 5A 5E | 	byte	$18, $26, $31, $37, $37, $2d, $27, $21, $21, $24, $2a, $31, $41, $4b, $5a, $5e
1c086     60 60 53 4B 
1c08a     44 37 2D 2A 
1c08e     21 1E 1A 1E 
1c092     27 34 43 44 | 	byte	$60, $60, $53, $4b, $44, $37, $2d, $2a, $21, $1e, $1a, $1e, $27, $34, $43, $44
1c096     49 47 41 36 
1c09a     14 FD E6 D3 
1c09e     CC C5 CA D0 
1c0a2     E0 E6 E8 EA | 	byte	$49, $47, $41, $36, $14, $fd, $e6, $d3, $cc, $c5, $ca, $d0, $e0, $e6, $e8, $ea
1c0a6     E6 E3 E6 E6 
1c0aa     E8 EA EC ED 
1c0ae     F3 F6 F6 F6 
1c0b2     F7 FC FD FF | 	byte	$e6, $e3, $e6, $e6, $e8, $ea, $ec, $ed, $f3, $f6, $f6, $f6, $f7, $fc, $fd, $ff
1c0b6     00 00 00 FD 
1c0ba     F7 F0 F6 FD 
1c0be     09 16 24 34 
1c0c2     37 3B 2D 20 | 	byte	$00, $00, $00, $fd, $f7, $f0, $f6, $fd, $09, $16, $24, $34, $37, $3b, $2d, $20
1c0c6     18 13 04 FD 
1c0ca     EC E3 E2 E0 
1c0ce     DF D0 B5 9A 
1c0d2     80 80 80 80 | 	byte	$18, $13, $04, $fd, $ec, $e3, $e2, $e0, $df, $d0, $b5, $9a, $80, $80, $80, $80
1c0d6     80 80 80 94 
1c0da     A2 AD B7 C5 
1c0de     C9 CF D6 DA 
1c0e2     D6 CC BC AC | 	byte	$80, $80, $80, $94, $a2, $ad, $b7, $c5, $c9, $cf, $d6, $da, $d6, $cc, $bc, $ac
1c0e6     A9 AC B9 C9 
1c0ea     CF DF E2 E2 
1c0ee     D9 CF CC CC 
1c0f2     CF D0 D3 DA | 	byte	$a9, $ac, $b9, $c9, $cf, $df, $e2, $e2, $d9, $cf, $cc, $cc, $cf, $d0, $d3, $da
1c0f6     EC FF 0E 10 
1c0fa     13 13 0E 10 
1c0fe     0A 04 04 04 
1c102     04 03 03 FD | 	byte	$ec, $ff, $0e, $10, $13, $13, $0e, $10, $0a, $04, $04, $04, $04, $03, $03, $fd
1c106     F2 F0 E2 E0 
1c10a     DC DA D9 DA 
1c10e     DC D6 E0 F2 
1c112     04 16 30 41 | 	byte	$f2, $f0, $e2, $e0, $dc, $da, $d9, $da, $dc, $d6, $e0, $f2, $04, $16, $30, $41
1c116     51 5A 59 4B 
1c11a     40 40 37 3A 
1c11e     3A 3B 44 4F 
1c122     51 4F 4B 40 | 	byte	$51, $5a, $59, $4b, $40, $40, $37, $3a, $3a, $3b, $44, $4f, $51, $4f, $4b, $40
1c126     34 31 2C 2D 
1c12a     30 37 40 49 
1c12e     51 57 57 57 
1c132     53 49 34 1E | 	byte	$34, $31, $2c, $2d, $30, $37, $40, $49, $51, $57, $57, $57, $53, $49, $34, $1e
1c136     0E F6 D9 C3 
1c13a     BD BC C5 D3 
1c13e     DF E8 E8 E8 
1c142     DF D6 CF C6 | 	byte	$0e, $f6, $d9, $c3, $bd, $bc, $c5, $d3, $df, $e8, $e8, $e8, $df, $d6, $cf, $c6
1c146     CA C9 CA D4 
1c14a     DA EC FF 04 
1c14e     01 F7 ED E2 
1c152     DF DF E6 ED | 	byte	$ca, $c9, $ca, $d4, $da, $ec, $ff, $04, $01, $f7, $ed, $e2, $df, $df, $e6, $ed
1c156     F6 00 04 0D 
1c15a     0A 09 01 01 
1c15e     03 0A 0A 0D 
1c162     0A FF 00 00 | 	byte	$f6, $00, $04, $0d, $0a, $09, $01, $01, $03, $0a, $0a, $0d, $0a, $ff, $00, $00
1c166     07 10 16 16 
1c16a     13 0A F7 F2 
1c16e     ED E6 EA E6 
1c172     E6 E8 EA F2 | 	byte	$07, $10, $16, $16, $13, $0a, $f7, $f2, $ed, $e6, $ea, $e6, $e6, $e8, $ea, $f2
1c176     00 04 0D 0A 
1c17a     0D 0E 1A 26 
1c17e     36 47 54 5E 
1c182     5D 5D 4F 3D | 	byte	$00, $04, $0d, $0a, $0d, $0e, $1a, $26, $36, $47, $54, $5e, $5d, $5d, $4f, $3d
1c186     30 26 21 24 
1c18a     26 2C 2C 21 
1c18e     21 24 2A 34 
1c192     41 51 5D 68 | 	byte	$30, $26, $21, $24, $26, $2c, $2c, $21, $21, $24, $2a, $34, $41, $51, $5d, $68
1c196     63 63 60 60 
1c19a     60 54 41 27 
1c19e     0E FD F2 E3 
1c1a2     DA D4 C5 C0 | 	byte	$63, $63, $60, $60, $60, $54, $41, $27, $0e, $fd, $f2, $e3, $da, $d4, $c5, $c0
1c1a6     B5 B9 BC B7 
1c1aa     B3 BD BF C9 
1c1ae     C9 CC CA D4 
1c1b2     DC F2 01 0E | 	byte	$b5, $b9, $bc, $b7, $b3, $bd, $bf, $c9, $c9, $cc, $ca, $d4, $dc, $f2, $01, $0e
1c1b6     18 16 0D 0E 
1c1ba     0E 13 1E 26 
1c1be     27 27 0E 00 
1c1c2     F3 EC E8 E3 | 	byte	$18, $16, $0d, $0e, $0e, $13, $1e, $26, $27, $27, $0e, $00, $f3, $ec, $e8, $e3
1c1c6     E6 E3 E6 F7 
1c1ca     07 13 1A 18 
1c1ce     13 00 EA D9 
1c1d2     C3 AC A2 9D | 	byte	$e6, $e3, $e6, $f7, $07, $13, $1a, $18, $13, $00, $ea, $d9, $c3, $ac, $a2, $9d
1c1d6     9D A0 A2 9A 
1c1da     94 8C 86 8C 
1c1de     80 80 80 80 
1c1e2     80 80 80 90 | 	byte	$9d, $a0, $a2, $9a, $94, $8c, $86, $8c, $80, $80, $80, $80, $80, $80, $80, $90
1c1e6     A7 C3 D4 E0 
1c1ea     E0 DF E0 E3 
1c1ee     E3 E8 E8 E8 
1c1f2     E8 EC F9 FC | 	byte	$a7, $c3, $d4, $e0, $e0, $df, $e0, $e3, $e3, $e8, $e8, $e8, $e8, $ec, $f9, $fc
1c1f6     FC F7 F0 EA 
1c1fa     ED F6 00 0D 
1c1fe     14 1D 1E 1E 
1c202     1D 0E 04 00 | 	byte	$fc, $f7, $f0, $ea, $ed, $f6, $00, $0d, $14, $1d, $1e, $1e, $1d, $0e, $04, $00
1c206     FC FC FF 00 
1c20a     FC FF FC FC 
1c20e     FD FC 03 0A 
1c212     13 09 F9 F3 | 	byte	$fc, $fc, $ff, $00, $fc, $ff, $fc, $fc, $fd, $fc, $03, $0a, $13, $09, $f9, $f3
1c216     F6 F7 01 0D 
1c21a     14 1E 24 2D 
1c21e     43 54 59 5A 
1c222     53 47 3B 3B | 	byte	$f6, $f7, $01, $0d, $14, $1e, $24, $2d, $43, $54, $59, $5a, $53, $47, $3b, $3b
1c226     40 40 41 37 
1c22a     3A 2D 27 20 
1c22e     1D 1E 21 30 
1c232     40 51 51 44 | 	byte	$40, $40, $41, $37, $3a, $2d, $27, $20, $1d, $1e, $21, $30, $40, $51, $51, $44
1c236     34 2C 1A 13 
1c23a     1D 1E 1D 10 
1c23e     F6 DA CA BD 
1c242     BF BF B9 B7 | 	byte	$34, $2c, $1a, $13, $1d, $1e, $1d, $10, $f6, $da, $ca, $bd, $bf, $bf, $b9, $b7
1c246     B3 AD B3 B5 
1c24a     BF C6 C3 BC 
1c24e     BC BD D3 E8 
1c252     00 0E 21 26 | 	byte	$b3, $ad, $b3, $b5, $bf, $c6, $c3, $bc, $bc, $bd, $d3, $e8, $00, $0e, $21, $26
1c256     26 21 18 10 
1c25a     04 FC FD F9 
1c25e     F0 E6 DF D6 
1c262     D3 DA F2 01 | 	byte	$26, $21, $18, $10, $04, $fc, $fd, $f9, $f0, $e6, $df, $d6, $d3, $da, $f2, $01
1c266     13 14 0E 0A 
1c26a     0A 0D 14 1E 
1c26e     26 30 2A 21 
1c272     2D 27 2A 2A | 	byte	$13, $14, $0e, $0a, $0a, $0d, $14, $1e, $26, $30, $2a, $21, $2d, $27, $2a, $2a
1c276     21 1A 16 13 
1c27a     16 18 10 04 
1c27e     FF F3 EC E6 
1c282     E6 E0 E3 F7 | 	byte	$21, $1a, $16, $13, $16, $18, $10, $04, $ff, $f3, $ec, $e6, $e6, $e0, $e3, $f7
1c286     13 2D 43 54 
1c28a     66 68 63 5E 
1c28e     63 66 71 64 
1c292     57 41 34 2C | 	byte	$13, $2d, $43, $54, $66, $68, $63, $5e, $63, $66, $71, $64, $57, $41, $34, $2c
1c296     2D 30 3B 41 
1c29a     40 41 44 41 
1c29e     3D 31 21 09 
1c2a2     FF F2 F2 F2 | 	byte	$2d, $30, $3b, $41, $40, $41, $44, $41, $3d, $31, $21, $09, $ff, $f2, $f2, $f2
1c2a6     F3 F0 EA DF 
1c2aa     D3 CA C9 C3 
1c2ae     C5 C5 CA C6 
1c2b2     C5 C3 C5 C9 | 	byte	$f3, $f0, $ea, $df, $d3, $ca, $c9, $c3, $c5, $c5, $ca, $c6, $c5, $c3, $c5, $c9
1c2b6     CC D9 E6 F7 
1c2ba     07 09 0A 07 
1c2be     04 04 04 07 
1c2c2     09 07 07 04 | 	byte	$cc, $d9, $e6, $f7, $07, $09, $0a, $07, $04, $04, $04, $07, $09, $07, $07, $04
1c2c6     04 04 09 07 
1c2ca     F9 E8 DF E0 
1c2ce     EA F9 FC FC 
1c2d2     F3 DC CC C0 | 	byte	$04, $04, $09, $07, $f9, $e8, $df, $e0, $ea, $f9, $fc, $fc, $f3, $dc, $cc, $c0
1c2d6     BD BC B3 A7 
1c2da     A6 A0 9C 94 
1c2de     94 8C 8F 92 
1c2e2     9C A7 B5 A7 | 	byte	$bd, $bc, $b3, $a7, $a6, $a0, $9c, $94, $94, $8c, $8f, $92, $9c, $a7, $b5, $a7
1c2e6     8C 80 80 80 
1c2ea     80 89 96 A9 
1c2ee     BD C5 DC F3 
1c2f2     0D 26 2D 2D | 	byte	$8c, $80, $80, $80, $80, $89, $96, $a9, $bd, $c5, $dc, $f3, $0d, $26, $2d, $2d
1c2f6     2D 27 20 21 
1c2fa     1A 0E 07 F0 
1c2fe     D9 C6 B9 B9 
1c302     BD CC E6 F9 | 	byte	$2d, $27, $20, $21, $1a, $0e, $07, $f0, $d9, $c6, $b9, $b9, $bd, $cc, $e6, $f9
1c306     09 1A 27 2D 
1c30a     2D 30 34 3D 
1c30e     43 37 2C 1D 
1c312     13 0A 0A 10 | 	byte	$09, $1a, $27, $2d, $2d, $30, $34, $3d, $43, $37, $2c, $1d, $13, $0a, $0a, $10
1c316     18 16 0E 09 
1c31a     FD ED EC F2 
1c31e     F2 F3 F3 F6 
1c322     00 0E 1D 2D | 	byte	$18, $16, $0e, $09, $fd, $ed, $ec, $f2, $f2, $f3, $f3, $f6, $00, $0e, $1d, $2d
1c326     3B 49 49 4B 
1c32a     4D 54 54 54 
1c32e     59 54 4F 54 
1c332     51 44 37 2C | 	byte	$3b, $49, $49, $4b, $4d, $54, $54, $54, $59, $54, $4f, $54, $51, $44, $37, $2c
1c336     1E 14 13 00 
1c33a     F3 EC E2 DC 
1c33e     DF DF E8 ED 
1c342     F3 F2 ED ED | 	byte	$1e, $14, $13, $00, $f3, $ec, $e2, $dc, $df, $df, $e8, $ed, $f3, $f2, $ed, $ed
1c346     F0 F9 F7 F2 
1c34a     EA E6 E3 E3 
1c34e     E8 E2 D3 CA 
1c352     C0 B7 B3 B7 | 	byte	$f0, $f9, $f7, $f2, $ea, $e6, $e3, $e3, $e8, $e2, $d3, $ca, $c0, $b7, $b3, $b7
1c356     B3 B7 C3 C5 
1c35a     D6 E3 FD 09 
1c35e     16 1E 24 2D 
1c362     30 26 13 03 | 	byte	$b3, $b7, $c3, $c5, $d6, $e3, $fd, $09, $16, $1e, $24, $2d, $30, $26, $13, $03
1c366     F7 E3 DA DC 
1c36a     DF EA FC 0A 
1c36e     0E 20 37 47 
1c372     54 5D 59 53 | 	byte	$f7, $e3, $da, $dc, $df, $ea, $fc, $0a, $0e, $20, $37, $47, $54, $5d, $59, $53
1c376     4D 49 40 34 
1c37a     2C 1A 0A FC 
1c37e     F2 F2 F6 F9 
1c382     03 07 FF 01 | 	byte	$4d, $49, $40, $34, $2c, $1a, $0a, $fc, $f2, $f2, $f6, $f9, $03, $07, $ff, $01
1c386     03 09 0A 0D 
1c38a     13 21 2C 2D 
1c38e     31 3B 43 4D 
1c392     5A 6A 74 74 | 	byte	$03, $09, $0a, $0d, $13, $21, $2c, $2d, $31, $3b, $43, $4d, $5a, $6a, $74, $74
1c396     76 70 5E 4F 
1c39a     47 41 41 36 
1c39e     26 13 0A 03 
1c3a2     FF FF FD F7 | 	byte	$76, $70, $5e, $4f, $47, $41, $41, $36, $26, $13, $0a, $03, $ff, $ff, $fd, $f7
1c3a6     ED E3 E2 E8 
1c3aa     EA F6 FC F6 
1c3ae     F3 F6 FC FC 
1c3b2     FC FD FC FD | 	byte	$ed, $e3, $e2, $e8, $ea, $f6, $fc, $f6, $f3, $f6, $fc, $fc, $fc, $fd, $fc, $fd
1c3b6     F9 EC D9 B9 
1c3ba     A2 96 86 92 
1c3be     9C A9 BD D0 
1c3c2     DA E8 FC 10 | 	byte	$f9, $ec, $d9, $b9, $a2, $96, $86, $92, $9c, $a9, $bd, $d0, $da, $e8, $fc, $10
1c3c6     2C 3D 43 43 
1c3ca     41 40 40 3A 
1c3ce     2C 20 07 F2 
1c3d2     CC AC 8F 80 | 	byte	$2c, $3d, $43, $43, $41, $40, $40, $3a, $2c, $20, $07, $f2, $cc, $ac, $8f, $80
1c3d6     80 80 80 8C 
1c3da     98 AC BC C0 
1c3de     C9 D3 D3 C9 
1c3e2     BD B3 A6 9D | 	byte	$80, $80, $80, $8c, $98, $ac, $bc, $c0, $c9, $d3, $d3, $c9, $bd, $b3, $a6, $9d
1c3e6     9C 9D A7 B7 
1c3ea     C5 CF CC C6 
1c3ee     BC BF C0 C3 
1c3f2     CA CA C9 CA | 	byte	$9c, $9d, $a7, $b7, $c5, $cf, $cc, $c6, $bc, $bf, $c0, $c3, $ca, $ca, $c9, $ca
1c3f6     CC D3 D9 D9 
1c3fa     DF E0 E3 ED 
1c3fe     F9 07 14 18 
1c402     14 18 13 14 | 	byte	$cc, $d3, $d9, $d9, $df, $e0, $e3, $ed, $f9, $07, $14, $18, $14, $18, $13, $14
1c406     0D 09 FD F9 
1c40a     F9 F3 F9 03 
1c40e     0A 0E 1A 27 
1c412     30 36 3D 40 | 	byte	$0d, $09, $fd, $f9, $f9, $f3, $f9, $03, $0a, $0e, $1a, $27, $30, $36, $3d, $40
1c416     31 21 18 1A 
1c41a     1D 20 24 26 
1c41e     26 26 26 21 
1c422     18 03 ED DC | 	byte	$31, $21, $18, $1a, $1d, $20, $24, $26, $26, $26, $26, $21, $18, $03, $ed, $dc
1c426     D4 D0 DA EC 
1c42a     FF 0A 18 2D 
1c42e     3B 54 66 77 
1c432     7F 7F 7F 74 | 	byte	$d4, $d0, $da, $ec, $ff, $0a, $18, $2d, $3b, $54, $66, $77, $7f, $7f, $7f, $74
1c436     64 4B 24 01 
1c43a     E2 C9 B7 B5 
1c43e     B7 C3 C9 D0 
1c442     DF EC FF 0E | 	byte	$64, $4b, $24, $01, $e2, $c9, $b7, $b5, $b7, $c3, $c9, $d0, $df, $ec, $ff, $0e
1c446     20 21 20 20 
1c44a     1E 13 0A 00 
1c44e     FC EC E3 E0 
1c452     D3 D6 DA D6 | 	byte	$20, $21, $20, $20, $1e, $13, $0a, $00, $fc, $ec, $e3, $e0, $d3, $d6, $da, $d6
1c456     CF C6 B9 B3 
1c45a     B5 B3 B7 BC 
1c45e     C6 BF C9 D4 
1c462     DA DC E3 F9 | 	byte	$cf, $c6, $b9, $b3, $b5, $b3, $b7, $bc, $c6, $bf, $c9, $d4, $da, $dc, $e3, $f9
1c466     07 20 37 49 
1c46a     53 4F 47 47 
1c46e     40 40 3A 31 
1c472     21 10 09 00 | 	byte	$07, $20, $37, $49, $53, $4f, $47, $47, $40, $40, $3a, $31, $21, $10, $09, $00
1c476     01 00 FF 00 
1c47a     01 04 10 20 
1c47e     2D 36 34 36 
1c482     36 37 40 41 | 	byte	$01, $00, $ff, $00, $01, $04, $10, $20, $2d, $36, $34, $36, $36, $37, $40, $41
1c486     43 44 44 31 
1c48a     2A 2D 24 0D 
1c48e     00 F9 F7 F7 
1c492     FF 09 10 18 | 	byte	$43, $44, $44, $31, $2a, $2d, $24, $0d, $00, $f9, $f7, $f7, $ff, $09, $10, $18
1c496     1A 2C 00 00 
1c49a     FC FF 02 04 
1c49e     05 07 07 09 
1c4a2     0A 08 07 08 | 	byte	$1a, $2c, $00, $00, $fc, $ff, $02, $04, $05, $07, $07, $09, $0a, $08, $07, $08
1c4a6     08 07 06 06 
1c4aa     05 04 04 04 
1c4ae     03 00 F4 EC 
1c4b2     EA E5 EF 0F | 	byte	$08, $07, $06, $06, $05, $04, $04, $04, $03, $00, $f4, $ec, $ea, $e5, $ef, $0f
1c4b6     00 BF FF 00 
1c4ba     CF FF E0 FF 
1c4be     20 C0 FF 20 
1c4c2     D7 FF F0 FF | 	byte	$00, $bf, $ff, $00, $cf, $ff, $e0, $ff, $20, $c0, $ff, $20, $d7, $ff, $f0, $ff
1c4c6     10 FF 50 00 
1c4ca     0F 20 07 18 
1c4ce     10 17 10 FF 
1c4d2     10 FF 00 EF | 	byte	$10, $ff, $50, $00, $0f, $20, $07, $18, $10, $17, $10, $ff, $10, $ff, $00, $ef
1c4d6     28 F0 FF 10 
1c4da     F3 F1 FF 00 
1c4de     DF F8 F0 F3 
1c4e2     E8 EF 10 D0 | 	byte	$28, $f0, $ff, $10, $f3, $f1, $ff, $00, $df, $f8, $f0, $f3, $e8, $ef, $10, $d0
1c4e6     DF 10 F7 00 
1c4ea     DF 1B 00 DF 
1c4ee     20 EB FC 1F 
1c4f2     00 FF 30 EF | 	byte	$df, $10, $f7, $00, $df, $1b, $00, $df, $20, $eb, $fc, $1f, $00, $ff, $30, $ef
1c4f6     08 EF 0F 14 
1c4fa     01 FF 10 03 
1c4fe     17 00 FF 30 
1c502     E7 0F 28 08 | 	byte	$08, $ef, $0f, $14, $01, $ff, $10, $03, $17, $00, $ff, $30, $e7, $0f, $28, $08
1c506     00 FB 0F 00 
1c50a     EF F0 EF 00 
1c50e     FF 00 FF 00 
1c512     DF 00 E5 EB | 	byte	$00, $fb, $0f, $00, $ef, $f0, $ef, $00, $ff, $00, $ff, $00, $df, $00, $e5, $eb
1c516     E8 F7 00 EB 
1c51a     FB 02 F0 E0 
1c51e     FF 10 FF 30 
1c522     FF 10 0F 00 | 	byte	$e8, $f7, $00, $eb, $fb, $02, $f0, $e0, $ff, $10, $ff, $30, $ff, $10, $0f, $00
1c526     FF 1B 08 0F 
1c52a     20 FF 10 FF 
1c52e     10 FF 17 20 
1c532     00 EF 1F 10 | 	byte	$ff, $1b, $08, $0f, $20, $ff, $10, $ff, $10, $ff, $17, $20, $00, $ef, $1f, $10
1c536     F3 0E 00 EB 
1c53a     D0 DF 06 00 
1c53e     E0 FF 00 DF 
1c542     00 DF F0 F9 | 	byte	$f3, $0e, $00, $eb, $d0, $df, $06, $00, $e0, $ff, $00, $df, $00, $df, $f0, $f9
1c546     F0 EF FF 20 
1c54a     E1 FF 10 FF 
1c54e     10 FF 00 FF 
1c552     F0 FF 20 F7 | 	byte	$f0, $ef, $ff, $20, $e1, $ff, $10, $ff, $10, $ff, $00, $ff, $f0, $ff, $20, $f7
1c556     0B 08 F7 09 
1c55a     2E 00 EF 20 
1c55e     F3 FF 00 EB 
1c562     FF 00 EB F7 | 	byte	$0b, $08, $f7, $09, $2e, $00, $ef, $20, $f3, $ff, $00, $eb, $ff, $00, $eb, $f7
1c566     0D 00 E7 FF 
1c56a     10 FF 10 F7 
1c56e     07 20 00 EF 
1c572     0C 00 E3 F0 | 	byte	$0d, $00, $e7, $ff, $10, $ff, $10, $f7, $07, $20, $00, $ef, $0c, $00, $e3, $f0
1c576     E5 EF F0 F7 
1c57a     10 00 FB F8 
1c57e     F5 FD 06 00 
1c582     FF 18 08 0F | 	byte	$e5, $ef, $f0, $f7, $10, $00, $fb, $f8, $f5, $fd, $06, $00, $ff, $18, $08, $0f
1c586     08 FF 18 08 
1c58a     07 18 00 F7 
1c58e     00 FF 09 12 
1c592     04 07 10 FA | 	byte	$08, $ff, $18, $08, $07, $18, $00, $f7, $00, $ff, $09, $12, $04, $07, $10, $fa
1c596     FF 00 FF 08 
1c59a     F9 E4 E5 F7 
1c59e     F4 E0 EF F0 
1c5a2     EF F0 FF 14 | 	byte	$ff, $00, $ff, $08, $f9, $e4, $e5, $f7, $f4, $e0, $ef, $f0, $ef, $f0, $ff, $14
1c5a6     00 FF 1F 00 
1c5aa     EF 20 07 00 
1c5ae     FE F0 FF 00 
1c5b2     FF 08 0C 00 | 	byte	$00, $ff, $1f, $00, $ef, $20, $07, $00, $fe, $f0, $ff, $00, $ff, $08, $0c, $00
1c5b6     FF 00 FF 00 
1c5ba     F7 0B 10 F0 
1c5be     FF 10 FB 00 
1c5c2     1F 10 0B 00 | 	byte	$ff, $00, $ff, $00, $f7, $0b, $10, $f0, $ff, $10, $fb, $00, $1f, $10, $0b, $00
1c5c6     0F 10 0F 04 
1c5ca     E8 FF 00 DF 
1c5ce     FC F0 DF E4 
1c5d2     FF 00 EF 00 | 	byte	$0f, $10, $0f, $04, $e8, $ff, $00, $df, $fc, $f0, $df, $e4, $ff, $00, $ef, $00
1c5d6     F7 06 00 EF 
1c5da     FE F4 FF 10 
1c5de     FF 07 08 07 
1c5e2     10 00 FF 08 | 	byte	$f7, $06, $00, $ef, $fe, $f4, $ff, $10, $ff, $07, $08, $07, $10, $00, $ff, $08
1c5e6     0F E0 FF 20 
1c5ea     D7 1F 10 DF 
1c5ee     20 FF 03 1F 
1c5f2     10 FB 00 FF | 	byte	$0f, $e0, $ff, $20, $d7, $1f, $10, $df, $20, $ff, $03, $1f, $10, $fb, $00, $ff
1c5f6     00 EF FF F0 
1c5fa     EF 00 FF F1 
1c5fe     FF 00 FF 0F 
1c602     00 FF 00 FF | 	byte	$00, $ef, $ff, $f0, $ef, $00, $ff, $f1, $ff, $00, $ff, $0f, $00, $ff, $00, $ff
1c606     00 EF 00 F4 
1c60a     EF FF F8 FF 
1c60e     00 FE F7 FF 
1c612     08 0A 07 18 | 	byte	$00, $ef, $00, $f4, $ef, $ff, $f8, $ff, $00, $fe, $f7, $ff, $08, $0a, $07, $18
1c616     00 FF 10 FF 
1c61a     00 06 03 17 
1c61e     00 F7 08 05 
1c622     00 F4 FF 00 | 	byte	$00, $ff, $10, $ff, $00, $06, $03, $17, $00, $f7, $08, $05, $00, $f4, $ff, $00
1c626     FF F0 F7 0F 
1c62a     00 F7 0B 10 
1c62e     F0 F7 08 FF 
1c632     F5 F4 EF F7 | 	byte	$ff, $f0, $f7, $0f, $00, $f7, $0b, $10, $f0, $f7, $08, $ff, $f5, $f4, $ef, $f7
1c636     08 F0 FF 00 
1c63a     F7 FF 08 E5 
1c63e     FF 00 EF 0F 
1c642     00 EB FF 08 | 	byte	$08, $f0, $ff, $00, $f7, $ff, $08, $e5, $ff, $00, $ef, $0f, $00, $eb, $ff, $08
1c646     FF 00 12 00 
1c64a     FF 00 FF 10 
1c64e     04 FF 02 0D 
1c652     04 0A 00 F1 | 	byte	$ff, $00, $12, $00, $ff, $00, $ff, $10, $04, $ff, $02, $0d, $04, $0a, $00, $f1
1c656     FF 08 FB 05 
1c65a     10 08 F8 FB 
1c65e     FD 0B 00 EF 
1c662     FF 10 E0 EF | 	byte	$ff, $08, $fb, $05, $10, $08, $f8, $fb, $fd, $0b, $00, $ef, $ff, $10, $e0, $ef
1c666     10 00 EF 0F 
1c66a     00 FF 00 FF 
1c66e     07 00 EF 00 
1c672     FE F4 F5 FF | 	byte	$10, $00, $ef, $0f, $00, $ff, $00, $ff, $07, $00, $ef, $00, $fe, $f4, $f5, $ff
1c676     00 FF 00 FF 
1c67a     00 EF 17 10 
1c67e     FF 10 F0 FF 
1c682     10 FF 04 12 | 	byte	$00, $ff, $00, $ff, $00, $ef, $17, $10, $ff, $10, $f0, $ff, $10, $ff, $04, $12
1c686     04 08 F0 FF 
1c68a     00 FD F0 FF 
1c68e     00 EF FF 00 
1c692     FB FD F8 0F | 	byte	$04, $08, $f0, $ff, $00, $fd, $f0, $ff, $00, $ef, $ff, $00, $fb, $fd, $f8, $0f
1c696     00 FF 08 F8 
1c69a     EB FF 00 FB 
1c69e     FB 0D 00 FF 
1c6a2     00 FF 00 03 | 	byte	$00, $ff, $08, $f8, $eb, $ff, $00, $fb, $fb, $0d, $00, $ff, $00, $ff, $00, $03
1c6a6     07 04 03 0A 
1c6aa     F0 FF 08 F7 
1c6ae     0F 08 FF 09 
1c6b2     08 06 03 08 | 	byte	$07, $04, $03, $0a, $f0, $ff, $08, $f7, $0f, $08, $ff, $09, $08, $06, $03, $08
1c6b6     00 0F 00 FF 
1c6ba     00 F0 FF 00 
1c6be     F5 FF 00 0B 
1c6c2     00 FB FF 04 | 	byte	$00, $0f, $00, $ff, $00, $f0, $ff, $00, $f5, $ff, $00, $0b, $00, $fb, $ff, $04
1c6c6     F0 FF 08 F1 
1c6ca     FF 00 FD FB 
1c6ce     00 0B 00 F5 
1c6d2     0F 00 FF F8 | 	byte	$f0, $ff, $08, $f1, $ff, $00, $fd, $fb, $00, $0b, $00, $f5, $0f, $00, $ff, $f8
1c6d6     0A 04 F8 FF 
1c6da     08 FB 07 00 
1c6de     FF 08 FF 0F 
1c6e2     08 07 04 FA | 	byte	$0a, $04, $f8, $ff, $08, $fb, $07, $00, $ff, $08, $ff, $0f, $08, $07, $04, $fa
1c6e6     0F 00 FF 00 
1c6ea     FC F7 0C F2 
1c6ee     FF 04 04 FF 
1c6f2     04 F3 17 00 | 	byte	$0f, $00, $ff, $00, $fc, $f7, $0c, $f2, $ff, $04, $04, $ff, $04, $f3, $17, $00
1c6f6     FF 03 08 FC 
1c6fa     FA F2 FB FF 
1c6fe     F8 EF FF F0 
1c702     FF 00 FF 03 | 	byte	$ff, $03, $08, $fc, $fa, $f2, $fb, $ff, $f8, $ef, $ff, $f0, $ff, $00, $ff, $03
1c706     00 FB 07 02 
1c70a     0F 00 0F 09 
1c70e     16 00 17 08 
1c712     05 0F 00 FF | 	byte	$00, $fb, $07, $02, $0f, $00, $0f, $09, $16, $00, $17, $08, $05, $0f, $00, $ff
1c716     09 00 EF 0F 
1c71a     00 EF 0B 00 
1c71e     FF 00 00 F7 
1c722     0B 00 FF 00 | 	byte	$09, $00, $ef, $0f, $00, $ef, $0b, $00, $ff, $00, $00, $f7, $0b, $00, $ff, $00
1c726     FE FF F8 FF 
1c72a     00 F7 FF 00 
1c72e     FB F9 FC FF 
1c732     00 F9 FF 00 | 	byte	$fe, $ff, $f8, $ff, $00, $f7, $ff, $00, $fb, $f9, $fc, $ff, $00, $f9, $ff, $00
1c736     FF 03 0C F2 
1c73a     FF 09 08 FB 
1c73e     15 00 FF 00 
1c742     04 FF 00 F9 | 	byte	$ff, $03, $0c, $f2, $ff, $09, $08, $fb, $15, $00, $ff, $00, $04, $ff, $00, $f9
1c746     FD 15 00 FF 
1c74a     00 04 03 0A 
1c74e     F4 FF 00 FF 
1c752     FA F2 F7 FC | 	byte	$fd, $15, $00, $ff, $00, $04, $03, $0a, $f4, $ff, $00, $ff, $fa, $f2, $f7, $fc
1c756     E5 FF 00 F7 
1c75a     FF 00 FF 00 
1c75e     FF 0E 00 FF 
1c762     05 0A 00 FB | 	byte	$e5, $ff, $00, $f7, $ff, $00, $ff, $00, $ff, $0e, $00, $ff, $05, $0a, $00, $fb
1c766     14 00 FF 00 
1c76a     F5 0F 00 FF 
1c76e     F3 FF FB 04 
1c772     FF 14 F0 FF | 	byte	$14, $00, $ff, $00, $f5, $0f, $00, $ff, $f3, $ff, $fb, $04, $ff, $14, $f0, $ff
1c776     00 FE F7 06 
1c77a     00 FF 09 00 
1c77e     07 00 ED FF 
1c782     00 F6 FF 08 | 	byte	$00, $fe, $f7, $06, $00, $ff, $09, $00, $07, $00, $ed, $ff, $00, $f6, $ff, $08
1c786     F6 FF 05 00 
1c78a     FF 00 FD 04 
1c78e     F4 F9 F7 FD 
1c792     FC F1 FD FC | 	byte	$f6, $ff, $05, $00, $ff, $00, $fd, $04, $f4, $f9, $f7, $fd, $fc, $f1, $fd, $fc
1c796     F7 08 F0 FD 
1c79a     FF 00 F3 0B 
1c79e     00 FF 07 00 
1c7a2     0B 00 FC FF | 	byte	$f7, $08, $f0, $fd, $ff, $00, $f3, $0b, $00, $ff, $07, $00, $0b, $00, $fc, $ff
1c7a6     08 04 FF 08 
1c7aa     F9 0C F7 12 
1c7ae     F1 0F 00 FF 
1c7b2     02 00 06 F7 | 	byte	$08, $04, $ff, $08, $f9, $0c, $f7, $12, $f1, $0f, $00, $ff, $02, $00, $06, $f7
1c7b6     FF 02 F8 FF 
1c7ba     00 FD FF 00 
1c7be     FC FD 01 F8 
1c7c2     EF 0E 00 FD | 	byte	$ff, $02, $f8, $ff, $00, $fd, $ff, $00, $fc, $fd, $01, $f8, $ef, $0e, $00, $fd
1c7c6     F9 02 FA F7 
1c7ca     06 00 02 FB 
1c7ce     04 07 04 FB 
1c7d2     0F 08 F8 FF | 	byte	$f9, $02, $fa, $f7, $06, $00, $02, $fb, $04, $07, $04, $fb, $0f, $08, $f8, $ff
1c7d6     04 00 FF F8 
1c7da     FF 07 00 FB 
1c7de     0E F2 FF 00 
1c7e2     FE FE F5 FF | 	byte	$04, $00, $ff, $f8, $ff, $07, $00, $fb, $0e, $f2, $ff, $00, $fe, $fe, $f5, $ff
1c7e6     F4 FA FF 00 
1c7ea     FC FB 08 00 
1c7ee     FF 03 00 FB 
1c7f2     FF 06 02 FD | 	byte	$f4, $fa, $ff, $00, $fc, $fb, $08, $00, $ff, $03, $00, $fb, $ff, $06, $02, $fd
1c7f6     01 00 00 FB 
1c7fa     04 FD 04 00 
1c7fe     FB 04 FA FF 
1c802     05 00 F7 08 | 	byte	$01, $00, $00, $fb, $04, $fd, $04, $00, $fb, $04, $fa, $ff, $05, $00, $f7, $08
1c806     00 FF 03 08 
1c80a     01 0A 00 08 
1c80e     01 00 F7 0B 
1c812     00 FD 08 F3 | 	byte	$00, $ff, $03, $08, $01, $0a, $00, $08, $01, $00, $f7, $0b, $00, $fd, $08, $f3
1c816     FF F5 FB FD 
1c81a     F8 FE FB FF 
1c81e     FA F9 FF 05 
1c822     00 FB 10 00 | 	byte	$ff, $f5, $fb, $fd, $f8, $fe, $fb, $ff, $fa, $f9, $ff, $05, $00, $fb, $10, $00
1c826     06 01 04 FF 
1c82a     08 F8 FF 00 
1c82e     F6 FF FB 02 
1c832     00 FC FB FF | 	byte	$06, $01, $04, $ff, $08, $f8, $ff, $00, $f6, $ff, $fb, $02, $00, $fc, $fb, $ff
1c836     00 EF 0D 00 
1c83a     F6 FF 00 FB 
1c83e     0A F3 08 03 
1c842     04 05 04 00 | 	byte	$00, $ef, $0d, $00, $f6, $ff, $00, $fb, $0a, $f3, $08, $03, $04, $05, $04, $00
1c846     FB FF 00 F3 
1c84a     FF FA F4 F7 
1c84e     FF 00 F6 F9 
1c852     FD F9 FF 02 | 	byte	$fb, $ff, $00, $f3, $ff, $fa, $f4, $f7, $ff, $00, $f6, $f9, $fd, $f9, $ff, $02
1c856     FA FF 00 FD 
1c85a     08 F9 05 03 
1c85e     04 00 FF 04 
1c862     04 00 FF 04 | 	byte	$fa, $ff, $00, $fd, $08, $f9, $05, $03, $04, $00, $ff, $04, $04, $00, $ff, $04
1c866     F3 0E FB 08 
1c86a     01 03 06 06 
1c86e     02 FD 04 F9 
1c872     FC FD FA F8 | 	byte	$f3, $0e, $fb, $08, $01, $03, $06, $06, $02, $fd, $04, $f9, $fc, $fd, $fa, $f8
1c876     FE 00 F8 FB 
1c87a     04 00 F8 FF 
1c87e     04 00 F9 FF 
1c882     04 F7 06 F7 | 	byte	$fe, $00, $f8, $fb, $04, $00, $f8, $ff, $04, $00, $f9, $ff, $04, $f7, $06, $f7
1c886     02 00 F9 FF 
1c88a     01 00 FD 05 
1c88e     04 04 04 00 
1c892     00 FF 04 03 | 	byte	$02, $00, $f9, $ff, $01, $00, $fd, $05, $04, $04, $04, $00, $00, $ff, $04, $03
1c896     02 FF 0C FB 
1c89a     08 03 04 00 
1c89e     FD FE F9 FA 
1c8a2     F7 F9 FB FA | 	byte	$02, $ff, $0c, $fb, $08, $03, $04, $00, $fd, $fe, $f9, $fa, $f7, $f9, $fb, $fa
1c8a6     F9 FF 00 F8 
1c8aa     FE FD 00 FE 
1c8ae     FB FF 00 FA 
1c8b2     FF FF 00 FF | 	byte	$f9, $ff, $00, $f8, $fe, $fd, $00, $fe, $fb, $ff, $00, $fa, $ff, $ff, $00, $ff
1c8b6     00 FB 04 03 
1c8ba     08 01 04 FF 
1c8be     04 FC FF 02 
1c8c2     FB 04 FF 04 | 	byte	$00, $fb, $04, $03, $08, $01, $04, $ff, $04, $fc, $ff, $02, $fb, $04, $ff, $04
1c8c6     02 00 00 03 
1c8ca     04 00 FF 08 
1c8ce     00 FF 06 00 
1c8d2     FF 02 00 04 | 	byte	$02, $00, $00, $03, $04, $00, $ff, $08, $00, $ff, $06, $00, $ff, $02, $00, $04
1c8d6     FD FF 00 01 
1c8da     00 FB 00 F5 
1c8de     FD F7 F6 FA 
1c8e2     F7 FF 01 FE | 	byte	$fd, $ff, $00, $01, $00, $fb, $00, $f5, $fd, $f7, $f6, $fa, $f7, $ff, $01, $fe
1c8e6     04 02 04 00 
1c8ea     FF 03 00 FF 
1c8ee     08 F7 FF 02 
1c8f2     00 03 00 FF | 	byte	$04, $02, $04, $00, $ff, $03, $00, $ff, $08, $f7, $ff, $02, $00, $03, $00, $ff
1c8f6     00 F9 FF FE 
1c8fa     00 FF 01 FE 
1c8fe     03 00 FB 06 
1c902     FD FF 04 00 | 	byte	$00, $f9, $ff, $fe, $00, $ff, $01, $fe, $03, $00, $fb, $06, $fd, $ff, $04, $00
1c906     FF 05 01 00 
1c90a     FF 00 FB FF 
1c90e     FF FC FF 00 
1c912     FF 04 FB 00 | 	byte	$ff, $05, $01, $00, $ff, $00, $fb, $ff, $ff, $fc, $ff, $00, $ff, $04, $fb, $00
1c916     FD 00 FB 00 
1c91a     FF 00 FB 03 
1c91e     03 01 06 04 
1c922     03 04 07 04 | 	byte	$fd, $00, $fb, $00, $ff, $00, $fb, $03, $03, $01, $06, $04, $03, $04, $07, $04
1c926     FB 08 01 00 
1c92a     FF 00 FB FF 
1c92e     00 F7 08 F7 
1c932     FC FB FB FC | 	byte	$fb, $08, $01, $00, $ff, $00, $fb, $ff, $00, $f7, $08, $f7, $fc, $fb, $fb, $fc
1c936     FB F9 FB FE 
1c93a     FA FD FF 01 
1c93e     00 FF 02 00 
1c942     FD FF 00 00 | 	byte	$fb, $f9, $fb, $fe, $fa, $fd, $ff, $01, $00, $ff, $02, $00, $fd, $ff, $00, $00
1c946     00 FF 04 FD 
1c94a     05 08 00 00 
1c94e     02 00 FF 00 
1c952     FF 00 FF 00 | 	byte	$00, $ff, $04, $fd, $05, $08, $00, $00, $02, $00, $ff, $00, $ff, $00, $ff, $00
1c956     FD 05 04 FD 
1c95a     09 08 01 02 
1c95e     03 00 FD FE 
1c962     FC FD 00 FB | 	byte	$fd, $05, $04, $fd, $09, $08, $01, $02, $03, $00, $fd, $fe, $fc, $fd, $00, $fb
1c966     FF 00 F7 FE 
1c96a     FC F5 FA FD 
1c96e     F8 FB FF FD 
1c972     00 01 01 05 | 	byte	$ff, $00, $f7, $fe, $fc, $f5, $fa, $fd, $f8, $fb, $ff, $fd, $00, $01, $01, $05
1c976     04 05 08 03 
1c97a     07 04 01 04 
1c97e     02 00 FE FC 
1c982     FD FF 00 FF | 	byte	$04, $05, $08, $03, $07, $04, $01, $04, $02, $00, $fe, $fc, $fd, $ff, $00, $ff
1c986     00 FF 00 FF 
1c98a     04 00 FF 02 
1c98e     FF 02 FF 03 
1c992     04 03 04 03 | 	byte	$00, $ff, $00, $ff, $04, $00, $ff, $02, $ff, $02, $ff, $03, $04, $03, $04, $03
1c996     02 00 00 FF 
1c99a     00 FE FC FD 
1c99e     FE FC FD FC 
1c9a2     F9 FF 02 00 | 	byte	$02, $00, $00, $ff, $00, $fe, $fc, $fd, $fe, $fc, $fd, $fc, $f9, $ff, $02, $00
1c9a6     FA FF 02 FD 
1c9aa     FE 03 04 00 
1c9ae     04 05 02 05 
1c9b2     04 03 05 02 | 	byte	$fa, $ff, $02, $fd, $fe, $03, $04, $00, $04, $05, $02, $05, $04, $03, $05, $02
1c9b6     01 03 01 01 
1c9ba     01 FF 00 FF 
1c9be     02 FA FD 00 
1c9c2     FB FC FD FD | 	byte	$01, $03, $01, $01, $01, $ff, $00, $ff, $02, $fa, $fd, $00, $fb, $fc, $fd, $fd
1c9c6     00 FE FF 04 
1c9ca     02 FF 01 02 
1c9ce     00 FD FE FC 
1c9d2     FD FE FE FC | 	byte	$00, $fe, $ff, $04, $02, $ff, $01, $02, $00, $fd, $fe, $fc, $fd, $fe, $fe, $fc
1c9d6     FE 00 00 FD 
1c9da     FF 00 01 00 
1c9de     FF 02 00 FF 
1c9e2     02 01 02 00 | 	byte	$fe, $00, $00, $fd, $ff, $00, $01, $00, $ff, $02, $00, $ff, $02, $01, $02, $00
1c9e6     01 00 FF 00 
1c9ea     03 00 FD FE 
1c9ee     FF FD FF 00 
1c9f2     FD FE FF FC | 	byte	$01, $00, $ff, $00, $03, $00, $fd, $fe, $ff, $fd, $ff, $00, $fd, $fe, $ff, $fc
1c9f6     FF 02 FD FE 
1c9fa     FE FE FE FD 
1c9fe     FC FC FF 00 
1ca02     01 04 02 01 | 	byte	$ff, $02, $fd, $fe, $fe, $fe, $fe, $fd, $fc, $fc, $ff, $00, $01, $04, $02, $01
1ca06     04 02 01 00 
1ca0a     FE FF FC FC 
1ca0e     FD FF FD FE 
1ca12     FF FE FD FF | 	byte	$04, $02, $01, $00, $fe, $ff, $fc, $fc, $fd, $ff, $fd, $fe, $ff, $fe, $fd, $ff
1ca16     01 00 00 FF 
1ca1a     03 01 FF 03 
1ca1e     02 FF 03 02 
1ca22     00 01 00 FF | 	byte	$01, $00, $00, $ff, $03, $01, $ff, $03, $02, $ff, $03, $02, $00, $01, $00, $ff
1ca26     00 00 FD 00 
1ca2a     FF FC FA FC 
1ca2e     FC FB FE FD 
1ca32     FD FF FF 00 | 	byte	$00, $00, $fd, $00, $ff, $fc, $fa, $fc, $fc, $fb, $fe, $fd, $fd, $ff, $ff, $00
1ca36     FE FF 00 03 
1ca3a     02 01 03 02 
1ca3e     01 00 01 00 
1ca42     FF FF 00 00 | 	byte	$fe, $ff, $00, $03, $02, $01, $03, $02, $01, $00, $01, $00, $ff, $ff, $00, $00
1ca46     00 00 FD FF 
1ca4a     00 FF 00 FF 
1ca4e     02 02 02 02 
1ca52     04 04 02 01 | 	byte	$00, $00, $fd, $ff, $00, $ff, $00, $ff, $02, $02, $02, $02, $04, $04, $02, $01
1ca56     00 FD FE FE 
1ca5a     FF 00 FF 02 
1ca5e     01 01 00 FD 
1ca62     FE FE FE FC | 	byte	$00, $fd, $fe, $fe, $ff, $00, $ff, $02, $01, $01, $00, $fd, $fe, $fe, $fe, $fc
1ca66     FB FD F8 FB 
1ca6a     FD FD FF 00 
1ca6e     03 01 03 02 
1ca72     01 01 04 04 | 	byte	$fb, $fd, $f8, $fb, $fd, $fd, $ff, $00, $03, $01, $03, $02, $01, $01, $04, $04
1ca76     00 FF 04 01 
1ca7a     03 04 00 FF 
1ca7e     00 FF 01 00 
1ca82     FE FF FE FC | 	byte	$00, $ff, $04, $01, $03, $04, $00, $ff, $00, $ff, $01, $00, $fe, $ff, $fe, $fc
1ca86     FD FE FF 01 
1ca8a     02 00 FE FE 
1ca8e     FF FE FF 00 
1ca92     FC FC FF 00 | 	byte	$fd, $fe, $ff, $01, $02, $00, $fe, $fe, $ff, $fe, $ff, $00, $fc, $fc, $ff, $00
1ca96     FF 01 FF FF 
1ca9a     00 FE FF 01 
1ca9e     01 01 01 01 
1caa2     03 02 04 05 | 	byte	$ff, $01, $ff, $ff, $00, $fe, $ff, $01, $01, $01, $01, $01, $03, $02, $04, $05
1caa6     04 05 06 02 
1caaa     03 02 00 00 
1caae     00 FF 00 FE 
1cab2     FF 00 FF 00 | 	byte	$04, $05, $06, $02, $03, $02, $00, $00, $00, $ff, $00, $fe, $ff, $00, $ff, $00
1cab6     FF 00 FE FD 
1caba     FE FC FA FB 
1cabe     FC FC FD FD 
1cac2     FD FF FF FF | 	byte	$ff, $00, $fe, $fd, $fe, $fc, $fa, $fb, $fc, $fc, $fd, $fd, $fd, $ff, $ff, $ff
1cac6     FE FF FF 01 
1caca     01 02 02 02 
1cace     02 02 01 01 
1cad2     00 FF 00 FF | 	byte	$fe, $ff, $ff, $01, $01, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $00, $ff
1cad6     00 FF 00 FE 
1cada     FF 00 FE FF 
1cade     FF FF FF FF 
1cae2     02 04 04 03 | 	byte	$00, $ff, $00, $fe, $ff, $00, $fe, $ff, $ff, $ff, $ff, $ff, $02, $04, $04, $03
1cae6     03 03 02 02 
1caea     00 FF 00 FD 
1caee     FD FD FC FB 
1caf2     FB FB FC FD | 	byte	$03, $03, $02, $02, $00, $ff, $00, $fd, $fd, $fd, $fc, $fb, $fb, $fb, $fc, $fd
1caf6     FC FD FE FF 
1cafa     00 00 02 03 
1cafe     01 03 00 FF 
1cb02     00 00 00 FF | 	byte	$fc, $fd, $fe, $ff, $00, $00, $02, $03, $01, $03, $00, $ff, $00, $00, $00, $ff
1cb06     FE FE FE FE 
1cb0a     FD FE FF 00 
1cb0e     FE FF 00 FF 
1cb12     03 05 04 02 | 	byte	$fe, $fe, $fe, $fe, $fd, $fe, $ff, $00, $fe, $ff, $00, $ff, $03, $05, $04, $02
1cb16     03 03 02 02 
1cb1a     02 02 01 01 
1cb1e     02 00 FF 00 
1cb22     FF FF 00 FE | 	byte	$03, $03, $02, $02, $02, $02, $01, $01, $02, $00, $ff, $00, $ff, $ff, $00, $fe
1cb26     FF FE FD FD 
1cb2a     FC FB FB FC 
1cb2e     FD FF 00 FE 
1cb32     FE FF FF 00 | 	byte	$ff, $fe, $fd, $fd, $fc, $fb, $fb, $fc, $fd, $ff, $00, $fe, $fe, $ff, $ff, $00
1cb36     01 02 01 01 
1cb3a     01 01 02 02 
1cb3e     02 03 02 01 
1cb42     01 01 01 00 | 	byte	$01, $02, $01, $01, $01, $01, $02, $02, $02, $03, $02, $01, $01, $01, $01, $00
1cb46     00 00 FF FE 
1cb4a     FF 00 01 01 
1cb4e     02 00 01 00 
1cb52     02 00 FF 00 | 	byte	$00, $00, $ff, $fe, $ff, $00, $01, $01, $02, $00, $01, $00, $02, $00, $ff, $00
1cb56     00 FE FE FE 
1cb5a     FE FD FE FD 
1cb5e     FD FD FD FD 
1cb62     FE FD FD FE | 	byte	$00, $fe, $fe, $fe, $fe, $fd, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fd, $fd, $fe
1cb66     FE FF FF 01 
1cb6a     02 02 03 02 
1cb6e     03 04 02 02 
1cb72     03 03 01 00 | 	byte	$fe, $ff, $ff, $01, $02, $02, $03, $02, $03, $04, $02, $02, $03, $03, $01, $00
1cb76     FE FE FE FF 
1cb7a     00 FF 00 00 
1cb7e     FF 00 FD FD 
1cb82     FC FC FD FE | 	byte	$fe, $fe, $fe, $ff, $00, $ff, $00, $00, $ff, $00, $fd, $fd, $fc, $fc, $fd, $fe
1cb86     FE FF FE FE 
1cb8a     FD FD FD FF 
1cb8e     FE FF 00 FE 
1cb92     FE FE FF 00 | 	byte	$fe, $ff, $fe, $fe, $fd, $fd, $fd, $ff, $fe, $ff, $00, $fe, $fe, $fe, $ff, $00
1cb96     00 FF FE FE 
1cb9a     FD FE FF FF 
1cb9e     01 01 01 02 
1cba2     04 04 05 06 | 	byte	$00, $ff, $fe, $fe, $fd, $fe, $ff, $ff, $01, $01, $01, $02, $04, $04, $05, $06
1cba6     06 04 03 02 
1cbaa     00 FF FF FF 
1cbae     FC FA FA F9 
1cbb2     F9 F9 F9 FB | 	byte	$06, $04, $03, $02, $00, $ff, $ff, $ff, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $fb
1cbb6     FA FB FB FB 
1cbba     FC FC FD FE 
1cbbe     FF 01 01 01 
1cbc2     01 02 02 01 | 	byte	$fa, $fb, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $01, $01, $01, $01, $02, $02, $01
1cbc6     01 02 03 04 
1cbca     02 01 00 FF 
1cbce     00 00 FF FF 
1cbd2     00 00 00 FE | 	byte	$01, $02, $03, $04, $02, $01, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $fe
1cbd6     FF 00 00 00 
1cbda     00 00 00 00 
1cbde     00 FF 00 FF 
1cbe2     FD FC FC FB | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $ff, $fd, $fc, $fc, $fb
1cbe6     FA FB FC FB 
1cbea     FC FC FD FD 
1cbee     FE FF FF 01 
1cbf2     00 FF FF FF | 	byte	$fa, $fb, $fc, $fb, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $01, $00, $ff, $ff, $ff
1cbf6     FF 01 02 02 
1cbfa     02 04 03 02 
1cbfe     02 02 02 02 
1cc02     01 00 00 00 | 	byte	$ff, $01, $02, $02, $02, $04, $03, $02, $02, $02, $02, $02, $01, $00, $00, $00
1cc06     00 00 FE FE 
1cc0a     FE FE FE FD 
1cc0e     FD FE FE FF 
1cc12     FF FF 01 00 | 	byte	$00, $00, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $01, $00
1cc16     00 00 00 00 
1cc1a     00 00 00 00 
1cc1e     00          | 	byte	$00[9]
1cc1f     FF FE FC FC 
1cc23     FC FC FD FE 
1cc27     FF FF 00 00 
1cc2b     02 02 02 02 | 	byte	$ff, $fe, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $ff, $00, $00, $02, $02, $02, $02
1cc2f     01 01 01 00 
1cc33     00 00 01 01 
1cc37     01 01 00 00 
1cc3b     FF FF FF FF | 	byte	$01, $01, $01, $00, $00, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $ff, $ff
1cc3f     00 FF FF FF 
1cc43     FE FE FE FF 
1cc47     FF FF 01 00 
1cc4b     00 00 01 02 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $01, $00, $00, $00, $01, $02
1cc4f     02 03 03 02 
1cc53     01 01 01 01 
1cc57     01 01 01 00 
1cc5b     FF FE FF FF | 	byte	$02, $03, $03, $02, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $fe, $ff, $ff
1cc5f     FF FF 00 00 
1cc63     01 03 05 06 
1cc67     06 05 05 04 
1cc6b     02 01 01 01 | 	byte	$ff, $ff, $00, $00, $01, $03, $05, $06, $06, $05, $05, $04, $02, $01, $01, $01
1cc6f     00 FE FE FD 
1cc73     FC FC FB FA 
1cc77     FA FA FB FB 
1cc7b     FC FD FE FD | 	byte	$00, $fe, $fe, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fd, $fe, $fd
1cc7f     FE FF 01 01 
1cc83     01 02 02 01 
1cc87     02 02 03 04 
1cc8b     04 04 04 02 | 	byte	$fe, $ff, $01, $01, $01, $02, $02, $01, $02, $02, $03, $04, $04, $04, $04, $02
1cc8f     02 01 00 01 
1cc93     01 01 00 00 
1cc97     00 FF FF FF 
1cc9b     00 01 02 01 | 	byte	$02, $01, $00, $01, $01, $01, $00, $00, $00, $ff, $ff, $ff, $00, $01, $02, $01
1cc9f     02 03 03 02 
1cca3     02 00 00 FF 
1cca7     FF FF FF FF 
1ccab     00 FF FF FE | 	byte	$02, $03, $03, $02, $02, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $fe
1ccaf     FD FD FD FC 
1ccb3     FD FE FE FF 
1ccb7     FE FE FF 01 
1ccbb     02 03 03 03 | 	byte	$fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $fe, $fe, $ff, $01, $02, $03, $03, $03
1ccbf     04 04 04 02 
1ccc3     02 02 02 01 
1ccc7     02 00 00 FE 
1cccb     FE FE FD FD | 	byte	$04, $04, $04, $02, $02, $02, $02, $01, $02, $00, $00, $fe, $fe, $fe, $fd, $fd
1cccf     FD FC FC FD 
1ccd3     FD FD FD FF 
1ccd7     00 00 01 02 
1ccdb     02 01 01 00 | 	byte	$fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $00, $00, $01, $02, $02, $01, $01, $00
1ccdf     00 00 00 00 
1cce3     00          | 	byte	$00[5]
1cce4     01 00 00 FF 
1cce8     FE FE FE FD 
1ccec     FE FF FF 00 
1ccf0     01 02 03 04 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fd, $fe, $ff, $ff, $00, $01, $02, $03, $04
1ccf4     05 06 05 04 
1ccf8     04 04 02 02 
1ccfc     00 00 00 FF 
1cd00     FE FE FE FD | 	byte	$05, $06, $05, $04, $04, $04, $02, $02, $00, $00, $00, $ff, $fe, $fe, $fe, $fd
1cd04     FD FE FE FE 
1cd08     FE FE FF FF 
1cd0c     FE FD FD FD 
1cd10     FD FE FE FF | 	byte	$fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $ff
1cd14     FF FF FF FF 
1cd18     FF          | 	byte	$ff[5]
1cd19     00 00 FF FF 
1cd1d     FF FE FE FE 
1cd21     FE FD FD FE 
1cd25     FE FF FF FF | 	byte	$00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff
1cd29     01 02 02 02 
1cd2d     02 02 03 02 
1cd31     02 01 01 00 
1cd35     FE FD FC FC | 	byte	$01, $02, $02, $02, $02, $02, $03, $02, $02, $01, $01, $00, $fe, $fd, $fc, $fc
1cd39     FC FD FE FD 
1cd3d     FE FD FD FE 
1cd41     FE FE FF FE 
1cd45     FF 00 00 01 | 	byte	$fc, $fd, $fe, $fd, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $fe, $ff, $00, $00, $01
1cd49     01 01 01 02 
1cd4d     03 04 03 02 
1cd51     02 01 FE 00 
1cd55     00 DC F2 F3 | 	byte	$01, $01, $01, $02, $03, $04, $03, $02, $02, $01, $fe, $00, $00, $dc, $f2, $f3
1cd59     01 0A 10 13 
1cd5d     16 0E 10 13 
1cd61     16 1D 1E 14 
1cd65     07 FD F9 FC | 	byte	$01, $0a, $10, $13, $16, $0e, $10, $13, $16, $1d, $1e, $14, $07, $fd, $f9, $fc
1cd69     04 14 13 1D 
1cd6d     1E 1D 1A 18 
1cd71     16 13 13 13 
1cd75     13 0A 0A 03 | 	byte	$04, $14, $13, $1d, $1e, $1d, $1a, $18, $16, $13, $13, $13, $13, $0a, $0a, $03
1cd79     E8 C5 8F 80 
1cd7d     80 80 80 80 
1cd81     80 80 92 A7 
1cd85     B7 C0 CF DA | 	byte	$e8, $c5, $8f, $80, $80, $80, $80, $80, $80, $80, $92, $a7, $b7, $c0, $cf, $da
1cd89     EA FC 0A 18 
1cd8d     1D 13 FD E2 
1cd91     C6 BF BC BD 
1cd95     BF B7 AC A9 | 	byte	$ea, $fc, $0a, $18, $1d, $13, $fd, $e2, $c6, $bf, $bc, $bd, $bf, $b7, $ac, $a9
1cd99     AC AD B5 C6 
1cd9d     CA E3 F6 04 
1cda1     09 13 18 14 
1cda5     0A 09 01 00 | 	byte	$ac, $ad, $b5, $c6, $ca, $e3, $f6, $04, $09, $13, $18, $14, $0a, $09, $01, $00
1cda9     F9 F6 F6 ED 
1cdad     E6 ED E6 EC 
1cdb1     ED F9 03 10 
1cdb5     20 30 3B 41 | 	byte	$f9, $f6, $f6, $ed, $e6, $ed, $e6, $ec, $ed, $f9, $03, $10, $20, $30, $3b, $41
1cdb9     40 43 41 47 
1cdbd     53 5D 5D 59 
1cdc1     3D 2A 18 09 
1cdc5     01 07 FD 03 | 	byte	$40, $43, $41, $47, $53, $5d, $5d, $59, $3d, $2a, $18, $09, $01, $07, $fd, $03
1cdc9     0A 0E 24 31 
1cdcd     34 30 20 1D 
1cdd1     14 1A 0E 0D 
1cdd5     0D 0A 13 1A | 	byte	$0a, $0e, $24, $31, $34, $30, $20, $1d, $14, $1a, $0e, $0d, $0d, $0a, $13, $1a
1cdd9     20 30 36 3D 
1cddd     47 44 34 26 
1cde1     07 F9 F2 F7 
1cde5     FC 01 0E 18 | 	byte	$20, $30, $36, $3d, $47, $44, $34, $26, $07, $f9, $f2, $f7, $fc, $01, $0e, $18
1cde9     1E 21 1E 14 
1cded     18 18 18 16 
1cdf1     0E 0E FF F3 
1cdf5     EA DC DA D4 | 	byte	$1e, $21, $1e, $14, $18, $18, $18, $16, $0e, $0e, $ff, $f3, $ea, $dc, $da, $d4
1cdf9     B7 AD A9 A2 
1cdfd     A3 A6 A7 A9 
1ce01     B3 C0 CF E3 
1ce05     DF EA EA F9 | 	byte	$b7, $ad, $a9, $a2, $a3, $a6, $a7, $a9, $b3, $c0, $cf, $e3, $df, $ea, $ea, $f9
1ce09     FD 0A 14 1A 
1ce0d     1A 1A 1A 10 
1ce11     0D 04 FC F0 
1ce15     DC DA CA D6 | 	byte	$fd, $0a, $14, $1a, $1a, $1a, $1a, $10, $0d, $04, $fc, $f0, $dc, $da, $ca, $d6
1ce19     DF E8 FD 0E 
1ce1d     21 3A 4D 68 
1ce21     76 7C 70 5A 
1ce25     4D 34 1D 10 | 	byte	$df, $e8, $fd, $0e, $21, $3a, $4d, $68, $76, $7c, $70, $5a, $4d, $34, $1d, $10
1ce29     01 FC FD FC 
1ce2d     F7 07 03 07 
1ce31     00 F6 E3 D4 
1ce35     CC CC CA CC | 	byte	$01, $fc, $fd, $fc, $f7, $07, $03, $07, $00, $f6, $e3, $d4, $cc, $cc, $ca, $cc
1ce39     D4 DA E3 EA 
1ce3d     F2 ED E8 E2 
1ce41     D6 CF CC B7 
1ce45     AF B5 AC B5 | 	byte	$d4, $da, $e3, $ea, $f2, $ed, $e8, $e2, $d6, $cf, $cc, $b7, $af, $b5, $ac, $b5
1ce49     CA DF F3 FD 
1ce4d     FD F3 F6 F6 
1ce51     F9 FF 03 03 
1ce55     03 F6 F2 ED | 	byte	$ca, $df, $f3, $fd, $fd, $f3, $f6, $f6, $f9, $ff, $03, $03, $03, $f6, $f2, $ed
1ce59     DF DC D9 DA 
1ce5d     E2 E3 EC F7 
1ce61     03 0D 20 30 
1ce65     34 3A 40 40 | 	byte	$df, $dc, $d9, $da, $e2, $e3, $ec, $f7, $03, $0d, $20, $30, $34, $3a, $40, $40
1ce69     2A 18 07 FD 
1ce6d     F2 ED E8 F0 
1ce71     F6 01 07 10 
1ce75     1A 18 04 ED | 	byte	$2a, $18, $07, $fd, $f2, $ed, $e8, $f0, $f6, $01, $07, $10, $1a, $18, $04, $ed
1ce79     DF C5 B1 A0 
1ce7d     89 89 92 9A 
1ce81     AF C6 CF E8 
1ce85     EA ED E8 E2 | 	byte	$df, $c5, $b1, $a0, $89, $89, $92, $9a, $af, $c6, $cf, $e8, $ea, $ed, $e8, $e2
1ce89     D6 D0 C6 BF 
1ce8d     C3 BD CA C9 
1ce91     CA CC C6 C0 
1ce95     AF A9 A7 A0 | 	byte	$d6, $d0, $c6, $bf, $c3, $bd, $ca, $c9, $ca, $cc, $c6, $c0, $af, $a9, $a7, $a0
1ce99     A7 B7 C0 CF 
1ce9d     DF ED 03 10 
1cea1     14 09 0A 03 
1cea5     07 0A 09 07 | 	byte	$a7, $b7, $c0, $cf, $df, $ed, $03, $10, $14, $09, $0a, $03, $07, $0a, $09, $07
1cea9     01 F0 EC E6 
1cead     E2 E2 E6 EA 
1ceb1     F6 F7 03 13 
1ceb5     20 3B 57 68 | 	byte	$01, $f0, $ec, $e6, $e2, $e2, $e6, $ea, $f6, $f7, $03, $13, $20, $3b, $57, $68
1ceb9     74 74 71 63 
1cebd     44 31 18 07 
1cec1     03 EC EC EC 
1cec5     F6 04 18 26 | 	byte	$74, $74, $71, $63, $44, $31, $18, $07, $03, $ec, $ec, $ec, $f6, $04, $18, $26
1cec9     37 41 36 2A 
1cecd     18 00 F6 F3 
1ced1     F6 F9 FD 04 
1ced5     0E 1D 27 36 | 	byte	$37, $41, $36, $2a, $18, $00, $f6, $f3, $f6, $f9, $fd, $04, $0e, $1d, $27, $36
1ced9     40 44 43 31 
1cedd     27 24 21 24 
1cee1     21 26 2C 3A 
1cee5     4F 54 5D 57 | 	byte	$40, $44, $43, $31, $27, $24, $21, $24, $21, $26, $2c, $3a, $4f, $54, $5d, $57
1cee9     4D 36 20 01 
1ceed     E2 D0 C0 BD 
1cef1     B9 C3 D0 D4 
1cef5     DA C9 C3 BD | 	byte	$4d, $36, $20, $01, $e2, $d0, $c0, $bd, $b9, $c3, $d0, $d4, $da, $c9, $c3, $bd
1cef9     BD BF C0 C5 
1cefd     C5 D0 D9 D3 
1cf01     E0 E3 E6 EC 
1cf05     EA DF DF E0 | 	byte	$bd, $bf, $c0, $c5, $c5, $d0, $d9, $d3, $e0, $e3, $e6, $ec, $ea, $df, $df, $e0
1cf09     E6 ED F9 04 
1cf0d     0E 07 07 FF 
1cf11     F9 EC E0 D9 
1cf15     D4 D3 DF E3 | 	byte	$e6, $ed, $f9, $04, $0e, $07, $07, $ff, $f9, $ec, $e0, $d9, $d4, $d3, $df, $e3
1cf19     00 14 30 4D 
1cf1d     64 71 76 5E 
1cf21     51 36 27 24 
1cf25     20 20 16 13 | 	byte	$00, $14, $30, $4d, $64, $71, $76, $5e, $51, $36, $27, $24, $20, $20, $16, $13
1cf29     14 10 13 0D 
1cf2d     0D 09 00 F6 
1cf31     E8 CA BC B5 
1cf35     B3 BD CA DA | 	byte	$14, $10, $13, $0d, $0d, $09, $00, $f6, $e8, $ca, $bc, $b5, $b3, $bd, $ca, $da
1cf39     E8 F7 00 07 
1cf3d     FF F9 ED D4 
1cf41     C5 AF AD AF 
1cf45     B3 C6 E2 F7 | 	byte	$e8, $f7, $00, $07, $ff, $f9, $ed, $d4, $c5, $af, $ad, $af, $b3, $c6, $e2, $f7
1cf49     00 00 FD F6 
1cf4d     F0 F2 EC E8 
1cf51     E3 DC D9 D4 
1cf55     D3 D0 D3 D6 | 	byte	$00, $00, $fd, $f6, $f0, $f2, $ec, $e8, $e3, $dc, $d9, $d4, $d3, $d0, $d3, $d6
1cf59     D3 C9 C0 C3 
1cf5d     CF E8 FC 13 
1cf61     21 3A 3A 3D 
1cf65     43 40 37 24 | 	byte	$d3, $c9, $c0, $c3, $cf, $e8, $fc, $13, $21, $3a, $3a, $3d, $43, $40, $37, $24
1cf69     13 FC E0 CC 
1cf6d     C9 CA D6 E8 
1cf71     F2 04 09 00 
1cf75     F3 EA E2 E2 | 	byte	$13, $fc, $e0, $cc, $c9, $ca, $d6, $e8, $f2, $04, $09, $00, $f3, $ea, $e2, $e2
1cf79     E6 F0 F6 F6 
1cf7d     ED E3 E8 E6 
1cf81     EC EC E3 D0 
1cf85     C0 AD A9 9D | 	byte	$e6, $f0, $f6, $f6, $ed, $e3, $e8, $e6, $ec, $ec, $e3, $d0, $c0, $ad, $a9, $9d
1cf89     9D AC A9 AD 
1cf8d     B1 B1 B7 C5 
1cf91     C5 BF B7 AC 
1cf95     96 80 80 80 | 	byte	$9d, $ac, $a9, $ad, $b1, $b1, $b7, $c5, $c5, $bf, $b7, $ac, $96, $80, $80, $80
1cf99     90 A3 BF DA 
1cf9d     F3 FC FF 00 
1cfa1     09 10 18 24 
1cfa5     21 24 1E 18 | 	byte	$90, $a3, $bf, $da, $f3, $fc, $ff, $00, $09, $10, $18, $24, $21, $24, $1e, $18
1cfa9     0E FF F9 F0 
1cfad     F0 F2 E2 E2 
1cfb1     E3 F0 FF 1A 
1cfb5     2A 36 40 41 | 	byte	$0e, $ff, $f9, $f0, $f0, $f2, $e2, $e2, $e3, $f0, $ff, $1a, $2a, $36, $40, $41
1cfb9     43 49 49 44 
1cfbd     2D 20 07 FC 
1cfc1     F9 FC 0A 18 
1cfc5     26 3B 37 27 | 	byte	$43, $49, $49, $44, $2d, $20, $07, $fc, $f9, $fc, $0a, $18, $26, $3b, $37, $27
1cfc9     09 00 ED E3 
1cfcd     E2 E8 EA FC 
1cfd1     01 14 20 27 
1cfd5     37 3A 37 2D | 	byte	$09, $00, $ed, $e3, $e2, $e8, $ea, $fc, $01, $14, $20, $27, $37, $3a, $37, $2d
1cfd9     1E 13 0D 0E 
1cfdd     20 3B 49 63 
1cfe1     63 63 5A 59 
1cfe5     60 5D 4D 3A | 	byte	$1e, $13, $0d, $0e, $20, $3b, $49, $63, $63, $63, $5a, $59, $60, $5d, $4d, $3a
1cfe9     0A EA CF BD 
1cfed     B5 AF B1 BC 
1cff1     C0 C3 C0 C0 
1cff5     C0 C5 C9 D0 | 	byte	$0a, $ea, $cf, $bd, $b5, $af, $b1, $bc, $c0, $c3, $c0, $c0, $c0, $c5, $c9, $d0
1cff9     CF C9 CA CF 
1cffd     D9 D6 DF E0 
1d001     DF E0 E0 DC 
1d005     E0 DA E0 E8 | 	byte	$cf, $c9, $ca, $cf, $d9, $d6, $df, $e0, $df, $e0, $e0, $dc, $e0, $da, $e0, $e8
1d009     ED FD FC F3 
1d00d     F6 F2 F6 FD 
1d011     FD FF F0 E8 
1d015     E0 DF EA F7 | 	byte	$ed, $fd, $fc, $f3, $f6, $f2, $f6, $fd, $fd, $ff, $f0, $e8, $e0, $df, $ea, $f7
1d019     09 1A 36 3A 
1d01d     3D 3A 31 31 
1d021     27 2C 2D 37 
1d025     36 3B 3D 3A | 	byte	$09, $1a, $36, $3a, $3d, $3a, $31, $31, $27, $2c, $2d, $37, $36, $3b, $3d, $3a
1d029     2C 21 16 F9 
1d02d     E2 D0 CC C9 
1d031     CF DF E6 EC 
1d035     ED E8 E0 E6 | 	byte	$2c, $21, $16, $f9, $e2, $d0, $cc, $c9, $cf, $df, $e6, $ec, $ed, $e8, $e0, $e6
1d039     F0 FD 00 01 
1d03d     EC DC C9 BC 
1d041     BF BF D3 E0 
1d045     EC EC E2 E0 | 	byte	$f0, $fd, $00, $01, $ec, $dc, $c9, $bc, $bf, $bf, $d3, $e0, $ec, $ec, $e2, $e0
1d049     D9 D4 D0 DA 
1d04d     DC EA EC ED 
1d051     F0 ED DA D3 
1d055     CC C0 BD BF | 	byte	$d9, $d4, $d0, $da, $dc, $ea, $ec, $ed, $f0, $ed, $da, $d3, $cc, $c0, $bd, $bf
1d059     BF C3 D6 E2 
1d05d     F6 F7 FC 03 
1d061     03 0A 16 20 
1d065     26 24 0D F7 | 	byte	$bf, $c3, $d6, $e2, $f6, $f7, $fc, $03, $03, $0a, $16, $20, $26, $24, $0d, $f7
1d069     E2 D6 D4 D4 
1d06d     E2 EC FD 01 
1d071     FF FF FF FD 
1d075     00 03 0E 18 | 	byte	$e2, $d6, $d4, $d4, $e2, $ec, $fd, $01, $ff, $ff, $ff, $fd, $00, $03, $0e, $18
1d079     21 27 1E 07 
1d07d     F2 DA CC CA 
1d081     C0 C0 BC A7 
1d085     9D 89 92 90 | 	byte	$21, $27, $1e, $07, $f2, $da, $cc, $ca, $c0, $c0, $bc, $a7, $9d, $89, $92, $90
1d089     90 9C 9D A6 
1d08d     B1 BF C9 BD 
1d091     AC 94 89 80 
1d095     80 80 8F 9D | 	byte	$90, $9c, $9d, $a6, $b1, $bf, $c9, $bd, $ac, $94, $89, $80, $80, $80, $8f, $9d
1d099     B3 C6 CC D6 
1d09d     F0 F2 00 13 
1d0a1     24 31 37 40 
1d0a5     3A 2C 18 0A | 	byte	$b3, $c6, $cc, $d6, $f0, $f2, $00, $13, $24, $31, $37, $40, $3a, $2c, $18, $0a
1d0a9     FC E3 DF D3 
1d0ad     D0 D0 DF EA 
1d0b1     01 14 26 3A 
1d0b5     41 3B 36 37 | 	byte	$fc, $e3, $df, $d3, $d0, $d0, $df, $ea, $01, $14, $26, $3a, $41, $3b, $36, $37
1d0b9     31 36 2C 1D 
1d0bd     0A 09 04 09 
1d0c1     14 0E 09 FD 
1d0c5     EC E2 DF DA | 	byte	$31, $36, $2c, $1d, $0a, $09, $04, $09, $14, $0e, $09, $fd, $ec, $e2, $df, $da
1d0c9     E0 E3 F2 04 
1d0cd     16 20 31 37 
1d0d1     36 37 37 37 
1d0d5     31 30 27 24 | 	byte	$e0, $e3, $f2, $04, $16, $20, $31, $37, $36, $37, $37, $37, $31, $30, $27, $24
1d0d9     26 2A 36 40 
1d0dd     4D 54 5A 57 
1d0e1     4B 44 49 43 
1d0e5     3B 26 07 F0 | 	byte	$26, $2a, $36, $40, $4d, $54, $5a, $57, $4b, $44, $49, $43, $3b, $26, $07, $f0
1d0e9     CC B3 A7 A6 
1d0ed     A7 A9 A9 AD 
1d0f1     B7 C6 D3 CA 
1d0f5     CC D3 DC E2 | 	byte	$cc, $b3, $a7, $a6, $a7, $a9, $a9, $ad, $b7, $c6, $d3, $ca, $cc, $d3, $dc, $e2
1d0f9     EA E6 E6 DA 
1d0fd     DA DA DA E0 
1d101     E2 DC D4 D4 
1d105     DA DC E3 EA | 	byte	$ea, $e6, $e6, $da, $da, $da, $da, $e0, $e2, $dc, $d4, $d4, $da, $dc, $e3, $ea
1d109     EC F0 F0 F9 
1d10d     01 01 03 FC 
1d111     ED E6 E8 E6 
1d115     FC 09 1E 2D | 	byte	$ec, $f0, $f0, $f9, $01, $01, $03, $fc, $ed, $e6, $e8, $e6, $fc, $09, $1e, $2d
1d119     27 2D 26 1E 
1d11d     21 1E 2A 34 
1d121     43 4B 54 4F 
1d125     3D 1E 03 ED | 	byte	$27, $2d, $26, $1e, $21, $1e, $2a, $34, $43, $4b, $54, $4f, $3d, $1e, $03, $ed
1d129     E0 CF CC C9 
1d12d     C9 CA DC EA 
1d131     FF 14 26 2D 
1d135     34 30 34 2D | 	byte	$e0, $cf, $cc, $c9, $c9, $ca, $dc, $ea, $ff, $14, $26, $2d, $34, $30, $34, $2d
1d139     21 07 F7 ED 
1d13d     D4 D3 CF CA 
1d141     CA C0 AF A6 
1d145     AC AF C3 CC | 	byte	$21, $07, $f7, $ed, $d4, $d3, $cf, $ca, $ca, $c0, $af, $a6, $ac, $af, $c3, $cc
1d149     E0 F2 FD 09 
1d14d     07 F6 E3 D4 
1d151     BF BD BC BF 
1d155     C3 CF CA C3 | 	byte	$e0, $f2, $fd, $09, $07, $f6, $e3, $d4, $bf, $bd, $bc, $bf, $c3, $cf, $ca, $c3
1d159     C6 C9 CC D6 
1d15d     E3 EA F6 01 
1d161     10 1E 21 1E 
1d165     14 04 F7 F0 | 	byte	$c6, $c9, $cc, $d6, $e3, $ea, $f6, $01, $10, $1e, $21, $1e, $14, $04, $f7, $f0
1d169     EA ED F6 F6 
1d16d     EA EA E8 EC 
1d171     F2 F7 FF 0A 
1d175     16 26 37 40 | 	byte	$ea, $ed, $f6, $f6, $ea, $ea, $e8, $ec, $f2, $f7, $ff, $0a, $16, $26, $37, $40
1d179     37 27 10 F9 
1d17d     E2 D9 C9 AC 
1d181     94 83 80 80 
1d185     80 80 83 8F | 	byte	$37, $27, $10, $f9, $e2, $d9, $c9, $ac, $94, $83, $80, $80, $80, $80, $83, $8f
1d189     98 92 98 A0 
1d18d     A0 96 90 92 
1d191     83 86 8A 98 
1d195     AD BD C0 D0 | 	byte	$98, $92, $98, $a0, $a0, $96, $90, $92, $83, $86, $8a, $98, $ad, $bd, $c0, $d0
1d199     DA F0 FF 16 
1d19d     26 36 43 47 
1d1a1     49 40 27 0A 
1d1a5     F7 E6 D9 D9 | 	byte	$da, $f0, $ff, $16, $26, $36, $43, $47, $49, $40, $27, $0a, $f7, $e6, $d9, $d9
1d1a9     D9 E3 E2 E8 
1d1ad     F3 01 0E 1D 
1d1b1     16 16 0E 13 
1d1b5     16 24 2A 20 | 	byte	$d9, $e3, $e2, $e8, $f3, $01, $0e, $1d, $16, $16, $0e, $13, $16, $24, $2a, $20
1d1b9     27 1E 18 07 
1d1bd     FC F9 EC E8 
1d1c1     CC CF C9 CF 
1d1c5     DA EA 00 10 | 	byte	$27, $1e, $18, $07, $fc, $f9, $ec, $e8, $cc, $cf, $c9, $cf, $da, $ea, $00, $10
1d1c9     27 3A 4B 51 
1d1cd     53 49 47 34 
1d1d1     34 27 2C 2C 
1d1d5     1A 1E 14 1A | 	byte	$27, $3a, $4b, $51, $53, $49, $47, $34, $34, $27, $2c, $2c, $1a, $1e, $14, $1a
1d1d9     26 30 40 54 
1d1dd     64 6A 71 6A 
1d1e1     5A 40 24 04 
1d1e5     F0 D3 BD B5 | 	byte	$26, $30, $40, $54, $64, $6a, $71, $6a, $5a, $40, $24, $04, $f0, $d3, $bd, $b5
1d1e9     B1 AF A6 A6 
1d1ed     A7 A6 A6 A9 
1d1f1     B5 BD CC DF 
1d1f5     ED F2 F0 E6 | 	byte	$b1, $af, $a6, $a6, $a7, $a6, $a6, $a9, $b5, $bd, $cc, $df, $ed, $f2, $f0, $e6
1d1f9     E8 E0 E3 E6 
1d1fd     F2 F0 EA EC 
1d201     E2 E0 E2 E2 
1d205     E3 E3 DF E0 | 	byte	$e8, $e0, $e3, $e6, $f2, $f0, $ea, $ec, $e2, $e0, $e2, $e2, $e3, $e3, $df, $e0
1d209     E2 F2 F9 F9 
1d20d     FD FD FF 00 
1d211     01 0A 13 13 
1d215     09 04 07 09 | 	byte	$e2, $f2, $f9, $f9, $fd, $fd, $ff, $00, $01, $0a, $13, $13, $09, $04, $07, $09
1d219     13 1D 2C 3D 
1d21d     47 5A 59 4D 
1d221     37 20 0D F7 
1d225     E6 E2 E3 E2 | 	byte	$13, $1d, $2c, $3d, $47, $5a, $59, $4d, $37, $20, $0d, $f7, $e6, $e2, $e3, $e2
1d229     E2 E3 E2 ED 
1d22d     FD 03 16 2A 
1d231     36 4B 57 6A 
1d235     66 68 4F 34 | 	byte	$e2, $e3, $e2, $ed, $fd, $03, $16, $2a, $36, $4b, $57, $6a, $66, $68, $4f, $34
1d239     14 EA D0 BC 
1d23d     AC 98 8F 8F 
1d241     9C AC BF D6 
1d245     E2 F0 F7 FF | 	byte	$14, $ea, $d0, $bc, $ac, $98, $8f, $8f, $9c, $ac, $bf, $d6, $e2, $f0, $f7, $ff
1d249     FF FF F6 EA 
1d24d     DF D4 C5 C9 
1d251     C5 B7 B7 AF 
1d255     A7 A2 A9 AD | 	byte	$ff, $ff, $f6, $ea, $df, $d4, $c5, $c9, $c5, $b7, $b7, $af, $a7, $a2, $a9, $ad
1d259     BF CF DF F2 
1d25d     FC 14 14 24 
1d261     27 27 1E 1A 
1d265     13 0A 00 F3 | 	byte	$bf, $cf, $df, $f2, $fc, $14, $14, $24, $27, $27, $1e, $1a, $13, $0a, $00, $f3
1d269     DF CF D0 D0 
1d26d     D6 E2 F6 03 
1d271     14 2C 41 4D 
1d275     49 4D 41 36 | 	byte	$df, $cf, $d0, $d0, $d6, $e2, $f6, $03, $14, $2c, $41, $4d, $49, $4d, $41, $36
1d279     18 FC D3 B1 
1d27d     94 80 80 80 
1d281     80 80 80 80 
1d285     80 80 80 80 | 	byte	$18, $fc, $d3, $b1, $94, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1d289     89 98 9D A2 
1d28d     A2 A2 A3 AD 
1d291     AF B3 B9 C3 
1d295     D4 EC FD 0D | 	byte	$89, $98, $9d, $a2, $a2, $a2, $a3, $ad, $af, $b3, $b9, $c3, $d4, $ec, $fd, $0d
1d299     10 1E 1D 20 
1d29d     26 1D 10 0A 
1d2a1     00 F7 F2 ED 
1d2a5     F3 F9 01 04 | 	byte	$10, $1e, $1d, $20, $26, $1d, $10, $0a, $00, $f7, $f2, $ed, $f3, $f9, $01, $04
1d2a9     01 F7 F7 F0 
1d2ad     F3 F9 00 04 
1d2b1     07 13 13 1D 
1d2b5     18 10 09 FD | 	byte	$01, $f7, $f7, $f0, $f3, $f9, $00, $04, $07, $13, $13, $1d, $18, $10, $09, $fd
1d2b9     ED DC D4 BF 
1d2bd     B9 B7 BC C9 
1d2c1     DF F3 00 1D 
1d2c5     2C 41 54 60 | 	byte	$ed, $dc, $d4, $bf, $b9, $b7, $bc, $c9, $df, $f3, $00, $1d, $2c, $41, $54, $60
1d2c9     60 63 53 43 
1d2cd     30 21 1D 18 
1d2d1     1D 1D 1E 20 
1d2d5     21 2C 3B 4D | 	byte	$60, $63, $53, $43, $30, $21, $1d, $18, $1d, $1d, $1e, $20, $21, $2c, $3b, $4d
1d2d9     60 6C 6C 6A 
1d2dd     60 53 43 24 
1d2e1     09 ED DC CF 
1d2e5     CA AD 9D 92 | 	byte	$60, $6c, $6c, $6a, $60, $53, $43, $24, $09, $ed, $dc, $cf, $ca, $ad, $9d, $92
1d2e9     90 94 96 A2 
1d2ed     B3 C5 D6 E2 
1d2f1     F0 F9 FD FD 
1d2f5     FF FD FF FD | 	byte	$90, $94, $96, $a2, $b3, $c5, $d6, $e2, $f0, $f9, $fd, $fd, $ff, $fd, $ff, $fd
1d2f9     F9 F9 FC F0 
1d2fd     E2 CC BC B3 
1d301     B1 B7 C6 CF 
1d305     DC E2 EA F9 | 	byte	$f9, $f9, $fc, $f0, $e2, $cc, $bc, $b3, $b1, $b7, $c6, $cf, $dc, $e2, $ea, $f9
1d309     04 0E 18 18 
1d30d     10 04 09 FC 
1d311     F9 FC 04 0D 
1d315     1D 26 36 31 | 	byte	$04, $0e, $18, $18, $10, $04, $09, $fc, $f9, $fc, $04, $0d, $1d, $26, $36, $31
1d319     31 30 27 20 
1d31d     14 10 04 01 
1d321     FD F3 F7 F7 
1d325     01 01 03 01 | 	byte	$31, $30, $27, $20, $14, $10, $04, $01, $fd, $f3, $f7, $f7, $01, $01, $03, $01
1d329     01 0D 1A 2D 
1d32d     4B 51 54 49 
1d331     41 3A 3B 3B 
1d335     37 36 26 18 | 	byte	$01, $0d, $1a, $2d, $4b, $51, $54, $49, $41, $3a, $3b, $3b, $37, $36, $26, $18
1d339     0A F3 E2 D0 
1d33d     CA C3 C5 C5 
1d341     D3 D9 E3 E6 
1d345     EA EA EC E6 | 	byte	$0a, $f3, $e2, $d0, $ca, $c3, $c5, $c5, $d3, $d9, $e3, $e6, $ea, $ea, $ec, $e6
1d349     E2 CC BD AD 
1d34d     A0 A6 A6 A3 
1d351     A6 A6 A6 A9 
1d355     BC C9 E6 F2 | 	byte	$e2, $cc, $bd, $ad, $a0, $a6, $a6, $a3, $a6, $a6, $a6, $a9, $bc, $c9, $e6, $f2
1d359     FD 03 0D 1D 
1d35d     26 36 3B 2D 
1d361     1A 01 E6 C9 
1d365     B7 B5 B9 C5 | 	byte	$fd, $03, $0d, $1d, $26, $36, $3b, $2d, $1a, $01, $e6, $c9, $b7, $b5, $b9, $c5
1d369     DA EC 03 18 
1d36d     2D 3D 4F 49 
1d371     49 43 3A 36 
1d375     26 14 07 03 | 	byte	$da, $ec, $03, $18, $2d, $3d, $4f, $49, $49, $43, $3a, $36, $26, $14, $07, $03
1d379     F7 DA B5 80 
1d37d     80 80 80 80 
1d381     80 80 80 80 
1d385     80 80 94 A2 | 	byte	$f7, $da, $b5, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $94, $a2
1d389     AF B7 B7 B9 
1d38d     B3 B5 B7 CA 
1d391     D9 E8 F3 F3 
1d395     F7 FC 01 07 | 	byte	$af, $b7, $b7, $b9, $b3, $b5, $b7, $ca, $d9, $e8, $f3, $f3, $f7, $fc, $01, $07
1d399     09 04 0D 0A 
1d39d     0D 0E 04 09 
1d3a1     09 0A 03 03 
1d3a5     F7 EA D9 CF | 	byte	$09, $04, $0d, $0a, $0d, $0e, $04, $09, $09, $0a, $03, $03, $f7, $ea, $d9, $cf
1d3a9     D4 E6 F6 01 
1d3ad     09 FC F3 F0 
1d3b1     F6 F9 00 FF 
1d3b5     F0 E3 CC BF | 	byte	$d4, $e6, $f6, $01, $09, $fc, $f3, $f0, $f6, $f9, $00, $ff, $f0, $e3, $cc, $bf
1d3b9     B9 BF C5 DA 
1d3bd     E8 FF 18 2D 
1d3c1     41 57 57 57 
1d3c5     4D 40 30 24 | 	byte	$b9, $bf, $c5, $da, $e8, $ff, $18, $2d, $41, $57, $57, $57, $4d, $40, $30, $24
1d3c9     1A 10 0E 10 
1d3cd     14 21 21 20 
1d3d1     1E 1E 26 3A 
1d3d5     3A 4B 51 4B | 	byte	$1a, $10, $0e, $10, $14, $21, $21, $20, $1e, $1e, $26, $3a, $3a, $4b, $51, $4b
1d3d9     44 49 4F 5E 
1d3dd     6A 68 4B 1D 
1d3e1     F0 B3 9A 89 
1d3e5     89 89 8C A2 | 	byte	$44, $49, $4f, $5e, $6a, $68, $4b, $1d, $f0, $b3, $9a, $89, $89, $89, $8c, $a2
1d3e9     AD C5 DA F2 
1d3ed     F2 F7 FD 00 
1d3f1     0E 18 1D 16 
1d3f5     0E 07 F3 EA | 	byte	$ad, $c5, $da, $f2, $f2, $f7, $fd, $00, $0e, $18, $1d, $16, $0e, $07, $f3, $ea
1d3f9     D6 BD AF A3 
1d3fd     A7 B3 C3 DA 
1d401     E6 E3 DF EC 
1d405     F9 09 14 13 | 	byte	$d6, $bd, $af, $a3, $a7, $b3, $c3, $da, $e6, $e3, $df, $ec, $f9, $09, $14, $13
1d409     16 0D FF E8 
1d40d     E3 EC F3 07 
1d411     0E 0E 13 16 
1d415     18 18 14 13 | 	byte	$16, $0d, $ff, $e8, $e3, $ec, $f3, $07, $0e, $0e, $13, $16, $18, $18, $14, $13
1d419     0E 0E 13 18 
1d41d     21 24 21 20 
1d421     20 20 21 21 
1d425     18 14 10 18 | 	byte	$0e, $0e, $13, $18, $21, $24, $21, $20, $20, $20, $21, $21, $18, $14, $10, $18
1d429     18 1A 1E 14 
1d42d     09 10 18 2D 
1d431     41 49 44 36 
1d435     26 10 03 09 | 	byte	$18, $1a, $1e, $14, $09, $10, $18, $2d, $41, $49, $44, $36, $26, $10, $03, $09
1d439     0A 0D 1A 27 
1d43d     27 26 1E 10 
1d441     00 F6 E6 D0 
1d445     C9 C3 B7 B5 | 	byte	$0a, $0d, $1a, $27, $27, $26, $1e, $10, $00, $f6, $e6, $d0, $c9, $c3, $b7, $b5
1d449     A7 A3 A0 A2 
1d44d     A2 A2 A6 A6 
1d451     A7 AF B7 D4 
1d455     E2 F0 F3 FC | 	byte	$a7, $a3, $a0, $a2, $a2, $a2, $a6, $a6, $a7, $af, $b7, $d4, $e2, $f0, $f3, $fc
1d459     09 1A 1E 20 
1d45d     1D 0A F6 E2 
1d461     D3 D4 DC DF 
1d465     EA F3 F9 0D | 	byte	$09, $1a, $1e, $20, $1d, $0a, $f6, $e2, $d3, $d4, $dc, $df, $ea, $f3, $f9, $0d
1d469     1D 2D 2A 30 
1d46d     27 2C 27 26 
1d471     26 16 14 0E 
1d475     07 F2 E3 D4 | 	byte	$1d, $2d, $2a, $30, $27, $2c, $27, $26, $26, $16, $14, $0e, $07, $f2, $e3, $d4
1d479     C3 A9 92 80 
1d47d     80 80 80 80 
1d481     80 80 80 8F 
1d485     A2 B5 C3 C6 | 	byte	$c3, $a9, $92, $80, $80, $80, $80, $80, $80, $80, $80, $8f, $a2, $b5, $c3, $c6
1d489     C9 B9 B9 B3 
1d48d     B7 B5 B5 BD 
1d491     C5 D3 E2 F6 
1d495     FC 0A 0A 0D | 	byte	$c9, $b9, $b9, $b3, $b7, $b5, $b5, $bd, $c5, $d3, $e2, $f6, $fc, $0a, $0a, $0d
1d499     10 14 21 21 
1d49d     24 1A 18 0A 
1d4a1     04 F6 E8 DA 
1d4a5     D3 D0 D0 D6 | 	byte	$10, $14, $21, $21, $24, $1a, $18, $0a, $04, $f6, $e8, $da, $d3, $d0, $d0, $d6
1d4a9     D9 D3 CF C3 
1d4ad     C3 CF DA EA 
1d4b1     ED F0 F2 DC 
1d4b5     D9 D4 DA E3 | 	byte	$d9, $d3, $cf, $c3, $c3, $cf, $da, $ea, $ed, $f0, $f2, $dc, $d9, $d4, $da, $e3
1d4b9     F6 01 14 21 
1d4bd     30 36 36 2D 
1d4c1     26 20 1E 20 
1d4c5     27 30 31 3A | 	byte	$f6, $01, $14, $21, $30, $36, $36, $2d, $26, $20, $1e, $20, $27, $30, $31, $3a
1d4c9     3B 36 2D 26 
1d4cd     21 16 0E 0D 
1d4d1     13 18 20 21 
1d4d5     20 1E 24 31 | 	byte	$3b, $36, $2d, $26, $21, $16, $0e, $0d, $13, $18, $20, $21, $20, $1e, $24, $31
1d4d9     47 4F 53 51 
1d4dd     49 2C 10 00 
1d4e1     E6 D0 BF B1 
1d4e5     B7 C3 D4 DF | 	byte	$47, $4f, $53, $51, $49, $2c, $10, $00, $e6, $d0, $bf, $b1, $b7, $c3, $d4, $df
1d4e9     E8 F0 F7 04 
1d4ed     07 14 18 0D 
1d4f1     09 F7 ED E0 
1d4f5     D4 CF CC C9 | 	byte	$e8, $f0, $f7, $04, $07, $14, $18, $0d, $09, $f7, $ed, $e0, $d4, $cf, $cc, $c9
1d4f9     CA CC D6 DC 
1d4fd     E3 E3 E3 E3 
1d501     DC E3 ED FC 
1d505     00 07 0E F6 | 	byte	$ca, $cc, $d6, $dc, $e3, $e3, $e3, $e3, $dc, $e3, $ed, $fc, $00, $07, $0e, $f6
1d509     F3 F0 F9 F3 
1d50d     F6 F3 F3 F3 
1d511     F6 F6 F7 FC 
1d515     01 0E 1A 2D | 	byte	$f3, $f0, $f9, $f3, $f6, $f3, $f3, $f3, $f6, $f6, $f7, $fc, $01, $0e, $1a, $2d
1d519     43 44 4D 54 
1d51d     54 51 4B 3D 
1d521     2D 16 03 ED 
1d525     E3 DC E3 F0 | 	byte	$43, $44, $4d, $54, $54, $51, $4b, $3d, $2d, $16, $03, $ed, $e3, $dc, $e3, $f0
1d529     F3 F9 04 14 
1d52d     27 3B 40 40 
1d531     41 2C 21 18 
1d535     1D 1E 21 24 | 	byte	$f3, $f9, $04, $14, $27, $3b, $40, $40, $41, $2c, $21, $18, $1d, $1e, $21, $24
1d539     27 27 2C 30 
1d53d     34 2C 2D 21 
1d541     18 07 F7 E2 
1d545     CF C5 B9 BD | 	byte	$27, $27, $2c, $30, $34, $2c, $2d, $21, $18, $07, $f7, $e2, $cf, $c5, $b9, $bd
1d549     BD BF C0 BC 
1d54d     B7 AF B5 B9 
1d551     C0 C9 C6 CA 
1d555     C6 C9 D3 E3 | 	byte	$bd, $bf, $c0, $bc, $b7, $af, $b5, $b9, $c0, $c9, $c6, $ca, $c6, $c9, $d3, $e3
1d559     F0 03 0D 0A 
1d55d     0D 0D 10 14 
1d561     10 09 01 F9 
1d565     F6 ED F7 F6 | 	byte	$f0, $03, $0d, $0a, $0d, $0d, $10, $14, $10, $09, $01, $f9, $f6, $ed, $f7, $f6
1d569     F7 00 FF 0E 
1d56d     10 16 18 0E 
1d571     0E 03 FF F3 
1d575     EA DF D3 C6 | 	byte	$f7, $00, $ff, $0e, $10, $16, $18, $0e, $0e, $03, $ff, $f3, $ea, $df, $d3, $c6
1d579     C0 BC C6 CA 
1d57d     C0 B3 9C 8F 
1d581     8A 96 9C B3 
1d585     B5 AD A3 98 | 	byte	$c0, $bc, $c6, $ca, $c0, $b3, $9c, $8f, $8a, $96, $9c, $b3, $b5, $ad, $a3, $98
1d589     9C A2 AD B5 
1d58d     BF C0 D3 D9 
1d591     E8 EC FD 03 
1d595     04 10 10 16 | 	byte	$9c, $a2, $ad, $b5, $bf, $c0, $d3, $d9, $e8, $ec, $fd, $03, $04, $10, $10, $16
1d599     21 21 24 26 
1d59d     20 13 07 FD 
1d5a1     ED D0 BC A9 
1d5a5     A3 A0 98 9A | 	byte	$21, $21, $24, $26, $20, $13, $07, $fd, $ed, $d0, $bc, $a9, $a3, $a0, $98, $9a
1d5a9     9C 9A A7 B7 
1d5ad     C6 E3 F0 F3 
1d5b1     F2 F2 FD 01 
1d5b5     10 18 18 16 | 	byte	$9c, $9a, $a7, $b7, $c6, $e3, $f0, $f3, $f2, $f2, $fd, $01, $10, $18, $18, $16
1d5b9     09 07 07 04 
1d5bd     09 0E 16 20 
1d5c1     2D 34 43 49 
1d5c5     47 49 3D 31 | 	byte	$09, $07, $07, $04, $09, $0e, $16, $20, $2d, $34, $43, $49, $47, $49, $3d, $31
1d5c9     27 20 14 0A 
1d5cd     01 FC F9 F9 
1d5d1     F9 00 07 07 
1d5d5     09 14 24 37 | 	byte	$27, $20, $14, $0a, $01, $fc, $f9, $f9, $f9, $00, $07, $07, $09, $14, $24, $37
1d5d9     41 49 3B 3A 
1d5dd     3B 3A 40 44 
1d5e1     44 37 20 09 
1d5e5     F0 DA D3 D0 | 	byte	$41, $49, $3b, $3a, $3b, $3a, $40, $44, $44, $37, $20, $09, $f0, $da, $d3, $d0
1d5e9     D9 DF DF E6 
1d5ed     E3 EC EC ED 
1d5f1     ED F6 F6 FC 
1d5f5     03 FF FF F6 | 	byte	$d9, $df, $df, $e6, $e3, $ec, $ec, $ed, $ed, $f6, $f6, $fc, $03, $ff, $ff, $f6
1d5f9     ED E3 DA D4 
1d5fd     D0 CC CA CA 
1d601     D6 E6 EC F6 
1d605     F0 E0 DC DF | 	byte	$ed, $e3, $da, $d4, $d0, $cc, $ca, $ca, $d6, $e6, $ec, $f6, $f0, $e0, $dc, $df
1d609     E3 ED F2 F6 
1d60d     F6 EC F0 F2 
1d611     FF 10 21 34 
1d615     41 4F 59 5E | 	byte	$e3, $ed, $f2, $f6, $f6, $ec, $f0, $f2, $ff, $10, $21, $34, $41, $4f, $59, $5e
1d619     60 60 5A 51 
1d61d     43 34 24 1D 
1d621     04 F7 E6 DC 
1d625     D4 D9 DC E3 | 	byte	$60, $60, $5a, $51, $43, $34, $24, $1d, $04, $f7, $e6, $dc, $d4, $d9, $dc, $e3
1d629     F3 00 0D 18 
1d62d     1A 21 1A 16 
1d631     10 14 20 2A 
1d635     31 37 31 2D | 	byte	$f3, $00, $0d, $18, $1a, $21, $1a, $16, $10, $14, $20, $2a, $31, $37, $31, $2d
1d639     20 1E 1E 20 
1d63d     2A 2C 30 37 
1d641     37 3A 36 2C 
1d645     1A 00 EC DC | 	byte	$20, $1e, $1e, $20, $2a, $2c, $30, $37, $37, $3a, $36, $2c, $1a, $00, $ec, $dc
1d649     CA C3 B7 AC 
1d64d     9A 92 8C 8A 
1d651     92 A0 AF BD 
1d655     CC E3 FC 14 | 	byte	$ca, $c3, $b7, $ac, $9a, $92, $8c, $8a, $92, $a0, $af, $bd, $cc, $e3, $fc, $14
1d659     18 1E 21 24 
1d65d     30 30 26 18 
1d661     04 F3 E0 D6 
1d665     CC C9 CC D6 | 	byte	$18, $1e, $21, $24, $30, $30, $26, $18, $04, $f3, $e0, $d6, $cc, $c9, $cc, $d6
1d669     E3 EA EA ED 
1d66d     F6 F6 FD FD 
1d671     FD FF 01 03 
1d675     01 FF F2 ED | 	byte	$e3, $ea, $ea, $ed, $f6, $f6, $fd, $fd, $fd, $ff, $01, $03, $01, $ff, $f2, $ed
1d679     E8 E6 E2 E3 
1d67d     E2 DF D9 CA 
1d681     C0 B9 A9 96 
1d685     92 94 98 A3 | 	byte	$e8, $e6, $e2, $e3, $e2, $df, $d9, $ca, $c0, $b9, $a9, $96, $92, $94, $98, $a3
1d689     AD B9 BF C6 
1d68d     C9 D6 D6 E8 
1d691     F0 F0 FC 00 
1d695     04 0D 14 1D | 	byte	$ad, $b9, $bf, $c6, $c9, $d6, $d6, $e8, $f0, $f0, $fc, $00, $04, $0d, $14, $1d
1d699     1A 1D 18 0E 
1d69d     FD F6 E3 D6 
1d6a1     BF AC 9D 8F 
1d6a5     8A 8F 98 A0 | 	byte	$1a, $1d, $18, $0e, $fd, $f6, $e3, $d6, $bf, $ac, $9d, $8f, $8a, $8f, $98, $a0
1d6a9     B1 B9 C9 DF 
1d6ad     E8 EA E3 E6 
1d6b1     E8 E8 F0 F9 
1d6b5     FF 04 0A 0D | 	byte	$b1, $b9, $c9, $df, $e8, $ea, $e3, $e6, $e8, $e8, $f0, $f9, $ff, $04, $0a, $0d
1d6b9     14 16 1A 1D 
1d6bd     20 21 27 34 
1d6c1     43 40 43 36 
1d6c5     27 1D 13 10 | 	byte	$14, $16, $1a, $1d, $20, $21, $27, $34, $43, $40, $43, $36, $27, $1d, $13, $10
1d6c9     09 01 F9 ED 
1d6cd     E2 DF D0 CF 
1d6d1     DA E3 F7 09 
1d6d5     20 37 4F 54 | 	byte	$09, $01, $f9, $ed, $e2, $df, $d0, $cf, $da, $e3, $f7, $09, $20, $37, $4f, $54
1d6d9     5A 5A 5E 5D 
1d6dd     53 54 51 49 
1d6e1     3B 3A 26 1A 
1d6e5     0A FC EC E0 | 	byte	$5a, $5a, $5e, $5d, $53, $54, $51, $49, $3b, $3a, $26, $1a, $0a, $fc, $ec, $e0
1d6e9     DC D6 DC E3 
1d6ed     EC EA EA F2 
1d6f1     F0 FC 03 07 
1d6f5     07 F9 EC DC | 	byte	$dc, $d6, $dc, $e3, $ec, $ea, $ea, $f2, $f0, $fc, $03, $07, $07, $f9, $ec, $dc
1d6f9     D4 D0 CA CA 
1d6fd     CC CC D4 E2 
1d701     E3 D4 CF C9 
1d705     CA C6 D4 D9 | 	byte	$d4, $d0, $ca, $ca, $cc, $cc, $d4, $e2, $e3, $d4, $cf, $c9, $ca, $c6, $d4, $d9
1d709     E8 FC 03 13 
1d70d     1E 21 2A 26 
1d711     30 2D 30 36 
1d715     37 3D 44 40 | 	byte	$e8, $fc, $03, $13, $1e, $21, $2a, $26, $30, $2d, $30, $36, $37, $3d, $44, $40
1d719     43 40 3A 36 
1d71d     36 2A 1D 04 
1d721     F0 E2 CC C9 
1d725     CF DA EC F7 | 	byte	$43, $40, $3a, $36, $36, $2a, $1d, $04, $f0, $e2, $cc, $c9, $cf, $da, $ec, $f7
1d729     F7 FC 0A 0E 
1d72d     0D 0E 0D 04 
1d731     09 0A 0A 0A 
1d735     0D 18 26 34 | 	byte	$f7, $fc, $0a, $0e, $0d, $0e, $0d, $04, $09, $0a, $0a, $0a, $0d, $18, $26, $34
1d739     3B 41 44 44 
1d73d     49 4B 4D 51 
1d741     4F 41 36 2A 
1d745     1A 03 F3 E2 | 	byte	$3b, $41, $44, $44, $49, $4b, $4d, $51, $4f, $41, $36, $2a, $1a, $03, $f3, $e2
1d749     C9 B1 9D 98 
1d74d     8C 8F 98 A7 
1d751     B7 C3 D3 DA 
1d755     F0 00 00 0A | 	byte	$c9, $b1, $9d, $98, $8c, $8f, $98, $a7, $b7, $c3, $d3, $da, $f0, $00, $00, $0a
1d759     10 07 00 F2 
1d75d     F2 EC F3 F7 
1d761     F9 F9 F3 F0 
1d765     E8 D4 CF C9 | 	byte	$10, $07, $00, $f2, $f2, $ec, $f3, $f7, $f9, $f9, $f3, $f0, $e8, $d4, $cf, $c9
1d769     C9 CF E0 E6 
1d76d     F6 00 04 0A 
1d771     14 14 16 0A 
1d775     FD ED DC D6 | 	byte	$c9, $cf, $e0, $e6, $f6, $00, $04, $0a, $14, $14, $16, $0a, $fd, $ed, $dc, $d6
1d779     D4 D9 DA E6 
1d77d     EC F6 03 0D 
1d781     04 F7 D4 B1 
1d785     92 80 80 80 | 	byte	$d4, $d9, $da, $e6, $ec, $f6, $03, $0d, $04, $f7, $d4, $b1, $92, $80, $80, $80
1d789     90 AD C6 E0 
1d78d     E6 ED ED F2 
1d791     F6 FD 03 09 
1d795     0A 0E 0D FF | 	byte	$90, $ad, $c6, $e0, $e6, $ed, $ed, $f2, $f6, $fd, $03, $09, $0a, $0e, $0d, $ff
1d799     EC DF D4 D3 
1d79d     D6 D3 CC C3 
1d7a1     BC AF AF B5 
1d7a5     BC C3 C6 C3 | 	byte	$ec, $df, $d4, $d3, $d6, $d3, $cc, $c3, $bc, $af, $af, $b5, $bc, $c3, $c6, $c3
1d7a9     C9 CA CF D0 
1d7ad     CA CC C9 C9 
1d7b1     CF DA F3 01 
1d7b5     1A 21 21 21 | 	byte	$c9, $ca, $cf, $d0, $ca, $cc, $c9, $c9, $cf, $da, $f3, $01, $1a, $21, $21, $21
1d7b9     1D 14 13 13 
1d7bd     13 1E 1D 18 
1d7c1     14 0A 0D 04 
1d7c5     09 09 04 03 | 	byte	$1d, $14, $13, $13, $13, $1e, $1d, $18, $14, $0a, $0d, $04, $09, $09, $04, $03
1d7c9     00 E3 CF BD 
1d7cd     BC C9 DC FF 
1d7d1     18 31 4B 66 
1d7d5     6C 6C 64 4F | 	byte	$00, $e3, $cf, $bd, $bc, $c9, $dc, $ff, $18, $31, $4b, $66, $6c, $6c, $64, $4f
1d7d9     31 18 0E 09 
1d7dd     10 1D 2D 40 
1d7e1     43 44 4F 51 
1d7e5     4F 51 3A 21 | 	byte	$31, $18, $0e, $09, $10, $1d, $2d, $40, $43, $44, $4f, $51, $4f, $51, $3a, $21
1d7e9     01 E6 D3 C5 
1d7ed     C5 CF DC E8 
1d7f1     EC F6 F3 EA 
1d7f5     E2 D3 D3 D6 | 	byte	$01, $e6, $d3, $c5, $c5, $cf, $dc, $e8, $ec, $f6, $f3, $ea, $e2, $d3, $d3, $d6
1d7f9     DC E6 EC EA 
1d7fd     E0 E0 DF D6 
1d801     D0 D0 C6 C6 
1d805     CC D0 E2 F7 | 	byte	$dc, $e6, $ec, $ea, $e0, $e0, $df, $d6, $d0, $d0, $c6, $c6, $cc, $d0, $e2, $f7
1d809     04 16 18 1D 
1d80d     1E 21 24 27 
1d811     2D 30 37 3B 
1d815     3B 3D 40 3B | 	byte	$04, $16, $18, $1d, $1e, $21, $24, $27, $2d, $30, $37, $3b, $3b, $3d, $40, $3b
1d819     34 2C 1A 0A 
1d81d     01 F0 E0 D0 
1d821     CC D4 E0 F2 
1d825     FF 04 04 10 | 	byte	$34, $2c, $1a, $0a, $01, $f0, $e0, $d0, $cc, $d4, $e0, $f2, $ff, $04, $04, $10
1d829     16 16 13 13 
1d82d     00 ED DF D4 
1d831     DC F2 0A 2A 
1d835     40 54 64 6E | 	byte	$16, $16, $13, $13, $00, $ed, $df, $d4, $dc, $f2, $0a, $2a, $40, $54, $64, $6e
1d839     6C 6A 5A 4F 
1d83d     37 2C 1D 14 
1d841     0D 0E 0A 0D 
1d845     10 14 0E 03 | 	byte	$6c, $6a, $5a, $4f, $37, $2c, $1d, $14, $0d, $0e, $0a, $0d, $10, $14, $0e, $03
1d849     F7 DF C0 B5 
1d84d     A7 A9 AF BF 
1d851     CC DC ED F2 
1d855     F3 EC D6 C9 | 	byte	$f7, $df, $c0, $b5, $a7, $a9, $af, $bf, $cc, $dc, $ed, $f2, $f3, $ec, $d6, $c9
1d859     B3 B7 BF D6 
1d85d     ED FF 09 07 
1d861     00 F9 F3 F6 
1d865     F0 E8 EA EC | 	byte	$b3, $b7, $bf, $d6, $ed, $ff, $09, $07, $00, $f9, $f3, $f6, $f0, $e8, $ea, $ec
1d869     F0 F3 F6 F6 
1d86d     F6 F2 F2 F2 
1d871     ED F2 F6 ED 
1d875     E3 E0 E8 F2 | 	byte	$f0, $f3, $f6, $f6, $f6, $f2, $f2, $f2, $ed, $f2, $f6, $ed, $e3, $e0, $e8, $f2
1d879     FF 0E 1A 24 
1d87d     30 24 14 01 
1d881     E3 CA A6 90 
1d885     84 86 96 A6 | 	byte	$ff, $0e, $1a, $24, $30, $24, $14, $01, $e3, $ca, $a6, $90, $84, $86, $96, $a6
1d889     B1 BF CC D9 
1d88d     EA F7 00 04 
1d891     0D 09 F3 E3 
1d895     D6 C5 B9 BF | 	byte	$b1, $bf, $cc, $d9, $ea, $f7, $00, $04, $0d, $09, $f3, $e3, $d6, $c5, $b9, $bf
1d899     BF CA D9 DF 
1d89d     E2 DF CC C3 
1d8a1     BC C0 C6 D9 
1d8a5     DF E8 E8 E2 | 	byte	$bf, $ca, $d9, $df, $e2, $df, $cc, $c3, $bc, $c0, $c6, $d9, $df, $e8, $e8, $e2
1d8a9     DA D4 C6 BC 
1d8ad     B5 B9 CA DF 
1d8b1     EC 00 03 01 
1d8b5     04 04 07 0D | 	byte	$da, $d4, $c6, $bc, $b5, $b9, $ca, $df, $ec, $00, $03, $01, $04, $04, $07, $0d
1d8b9     13 09 0A 03 
1d8bd     FD F7 F6 F9 
1d8c1     FC FF 04 0A 
1d8c5     FC F3 ED E2 | 	byte	$13, $09, $0a, $03, $fd, $f7, $f6, $f9, $fc, $ff, $04, $0a, $fc, $f3, $ed, $e2
1d8c9     D6 D6 DF F2 
1d8cd     0D 27 44 5A 
1d8d1     66 59 4D 34 
1d8d5     27 0E FF FC | 	byte	$d6, $d6, $df, $f2, $0d, $27, $44, $5a, $66, $59, $4d, $34, $27, $0e, $ff, $fc
1d8d9     FC 04 16 31 
1d8dd     40 49 57 5E 
1d8e1     74 77 77 68 
1d8e5     53 3B 24 04 | 	byte	$fc, $04, $16, $31, $40, $49, $57, $5e, $74, $77, $77, $68, $53, $3b, $24, $04
1d8e9     EC D3 C3 AC 
1d8ed     AD B3 BD CC 
1d8f1     DA E6 EA EA 
1d8f5     F2 F3 F2 F0 | 	byte	$ec, $d3, $c3, $ac, $ad, $b3, $bd, $cc, $da, $e6, $ea, $ea, $f2, $f3, $f2, $f0
1d8f9     F0 F6 F9 ED 
1d8fd     EC E6 E8 E2 
1d901     D9 DA D6 D9 
1d905     E0 EC F9 00 | 	byte	$f0, $f6, $f9, $ed, $ec, $e6, $e8, $e2, $d9, $da, $d6, $d9, $e0, $ec, $f9, $00
1d909     0D 14 26 2A 
1d90d     34 37 3A 3D 
1d911     3D 3D 36 27 
1d915     18 01 F6 EA | 	byte	$0d, $14, $26, $2a, $34, $37, $3a, $3d, $3d, $3d, $36, $27, $18, $01, $f6, $ea
1d919     DC DA DC DF 
1d91d     E0 D6 DF EA 
1d921     FC 07 1A 2A 
1d925     3B 3D 34 2C | 	byte	$dc, $da, $dc, $df, $e0, $d6, $df, $ea, $fc, $07, $1a, $2a, $3b, $3d, $34, $2c
1d929     10 FD E2 DA 
1d92d     D9 DA F6 0A 
1d931     21 3B 47 49 
1d935     4F 51 49 41 | 	byte	$10, $fd, $e2, $da, $d9, $da, $f6, $0a, $21, $3b, $47, $49, $4f, $51, $49, $41
1d939     3A 34 34 2D 
1d93d     2A 21 16 0D 
1d941     0A 0A 0E 1D 
1d945     27 2D 27 1A | 	byte	$3a, $34, $34, $2d, $2a, $21, $16, $0d, $0a, $0a, $0e, $1d, $27, $2d, $27, $1a
1d949     04 F3 DF CC 
1d94d     C6 C9 D4 CF 
1d951     C6 BD BF AF 
1d955     AC A7 B5 C5 | 	byte	$04, $f3, $df, $cc, $c6, $c9, $d4, $cf, $c6, $bd, $bf, $af, $ac, $a7, $b5, $c5
1d959     DC F2 FC FF 
1d95d     FD FD FD 03 
1d961     0D 0A 0A 0A 
1d965     09 00 F6 EA | 	byte	$dc, $f2, $fc, $ff, $fd, $fd, $fd, $03, $0d, $0a, $0a, $0a, $09, $00, $f6, $ea
1d969     D3 C3 C0 BC 
1d96d     C9 D9 E8 F9 
1d971     F9 FC FC F9 
1d975     FF 09 18 2C | 	byte	$d3, $c3, $c0, $bc, $c9, $d9, $e8, $f9, $f9, $fc, $fc, $f9, $ff, $09, $18, $2c
1d979     30 2C 18 00 
1d97d     F0 D9 CC C6 
1d981     C5 C5 CA C5 
1d985     CC C6 C0 C9 | 	byte	$30, $2c, $18, $00, $f0, $d9, $cc, $c6, $c5, $c5, $ca, $c5, $cc, $c6, $c0, $c9
1d989     D6 EA FC 07 
1d98d     03 FF F7 EC 
1d991     DA CA B7 A9 
1d995     A6 A0 A3 AD | 	byte	$d6, $ea, $fc, $07, $03, $ff, $f7, $ec, $da, $ca, $b7, $a9, $a6, $a0, $a3, $ad
1d999     B7 C6 C3 C0 
1d99d     C6 CA D9 F0 
1d9a1     F9 00 07 04 
1d9a5     F0 DC D3 CC | 	byte	$b7, $c6, $c3, $c0, $c6, $ca, $d9, $f0, $f9, $00, $07, $04, $f0, $dc, $d3, $cc
1d9a9     CA CF CF CF 
1d9ad     DA DA E2 E2 
1d9b1     DF E0 DF DF 
1d9b5     E0 E6 EA ED | 	byte	$ca, $cf, $cf, $cf, $da, $da, $e2, $e2, $df, $e0, $df, $df, $e0, $e6, $ea, $ed
1d9b9     F6 F9 03 04 
1d9bd     09 0A FF F3 
1d9c1     F0 F0 F0 F6 
1d9c5     F7 FC FC 07 | 	byte	$f6, $f9, $03, $04, $09, $0a, $ff, $f3, $f0, $f0, $f0, $f6, $f7, $fc, $fc, $07
1d9c9     0E 1A 26 37 
1d9cd     3B 3B 27 1E 
1d9d1     1A 09 09 0A 
1d9d5     0A 0E 1A 20 | 	byte	$0e, $1a, $26, $37, $3b, $3b, $27, $1e, $1a, $09, $09, $0a, $0a, $0e, $1a, $20
1d9d9     31 40 49 59 
1d9dd     60 6E 71 6A 
1d9e1     59 47 37 2A 
1d9e5     18 07 F3 E0 | 	byte	$31, $40, $49, $59, $60, $6e, $71, $6a, $59, $47, $37, $2a, $18, $07, $f3, $e0
1d9e9     CA B7 B1 A9 
1d9ed     BD D9 EC FD 
1d9f1     FD FD FD 00 
1d9f5     04 07 09 07 | 	byte	$ca, $b7, $b1, $a9, $bd, $d9, $ec, $fd, $fd, $fd, $fd, $00, $04, $07, $09, $07
1d9f9     F6 EA DF D9 
1d9fd     DC DC DA DC 
1da01     DF EA F9 FF 
1da05     0E 1D 1E 2D | 	byte	$f6, $ea, $df, $d9, $dc, $dc, $da, $dc, $df, $ea, $f9, $ff, $0e, $1d, $1e, $2d
1da09     2D 30 34 36 
1da0d     3A 37 34 2A 
1da11     13 FD EA CA 
1da15     B9 B1 B7 B5 | 	byte	$2d, $30, $34, $36, $3a, $37, $34, $2a, $13, $fd, $ea, $ca, $b9, $b1, $b7, $b5
1da19     B9 CA D6 E6 
1da1d     00 14 24 40 
1da21     57 5D 44 2D 
1da25     1A 0E 07 01 | 	byte	$b9, $ca, $d6, $e6, $00, $14, $24, $40, $57, $5d, $44, $2d, $1a, $0e, $07, $01
1da29     FC FD FD 01 
1da2d     09 10 18 1E 
1da31     1D 21 27 2C 
1da35     34 36 36 3B | 	byte	$fc, $fd, $fd, $01, $09, $10, $18, $1e, $1d, $21, $27, $2c, $34, $36, $36, $3b
1da39     3A 3A 30 21 
1da3d     16 0E 0A 0D 
1da41     0E 20 1E 20 
1da45     20 18 13 14 | 	byte	$3a, $3a, $30, $21, $16, $0e, $0a, $0d, $0e, $20, $1e, $20, $20, $18, $13, $14
1da49     0E 04 FD EC 
1da4d     C9 B9 A2 A3 
1da51     A3 B5 C9 DC 
1da55     E0 E8 F0 F0 | 	byte	$0e, $04, $fd, $ec, $c9, $b9, $a2, $a3, $a3, $b5, $c9, $dc, $e0, $e8, $f0, $f0
1da59     F3 F7 F7 FD 
1da5d     03 FF 00 FC 
1da61     FC F9 F2 ED 
1da65     E2 DF CF CA | 	byte	$f3, $f7, $f7, $fd, $03, $ff, $00, $fc, $fc, $f9, $f2, $ed, $e2, $df, $cf, $ca
1da69     C3 C9 D0 E0 
1da6d     E6 F0 F6 F6 
1da71     00 0A 18 27 
1da75     2D 2A 13 FD | 	byte	$c3, $c9, $d0, $e0, $e6, $f0, $f6, $f6, $00, $0a, $18, $27, $2d, $2a, $13, $fd
1da79     E6 DA D3 CF 
1da7d     CF D0 D3 E3 
1da81     F0 FC FD FD 
1da85     FD 00 F3 F2 | 	byte	$e6, $da, $d3, $cf, $cf, $d0, $d3, $e3, $f0, $fc, $fd, $fd, $fd, $00, $f3, $f2
1da89     F7 F9 F7 ED 
1da8d     E2 D0 BD AF 
1da91     98 90 8C 89 
1da95     92 A0 AD BC | 	byte	$f7, $f9, $f7, $ed, $e2, $d0, $bd, $af, $98, $90, $8c, $89, $92, $a0, $ad, $bc
1da99     CA D9 E6 F2 
1da9d     FD 04 10 0D 
1daa1     F6 E6 D4 CC 
1daa5     D0 D4 D6 DA | 	byte	$ca, $d9, $e6, $f2, $fd, $04, $10, $0d, $f6, $e6, $d4, $cc, $d0, $d4, $d6, $da
1daa9     D6 D0 CA BD 
1daad     BD B1 AD AF 
1dab1     B3 C0 CC E3 
1dab5     ED F9 0D 1D | 	byte	$d6, $d0, $ca, $bd, $bd, $b1, $ad, $af, $b3, $c0, $cc, $e3, $ed, $f9, $0d, $1d
1dab9     14 14 0D 04 
1dabd     00 F6 F6 F3 
1dac1     F6 F7 F9 00 
1dac5     03 0A 1A 27 | 	byte	$14, $14, $0d, $04, $00, $f6, $f6, $f3, $f6, $f7, $f9, $00, $03, $0a, $1a, $27
1dac9     37 3B 31 24 
1dacd     13 07 0D 10 
1dad1     1A 21 21 24 
1dad5     2C 2C 37 40 | 	byte	$37, $3b, $31, $24, $13, $07, $0d, $10, $1a, $21, $21, $24, $2c, $2c, $37, $40
1dad9     49 4B 49 41 
1dadd     36 30 26 13 
1dae1     0A 01 FC FC 
1dae5     FC FC F3 F0 | 	byte	$49, $4b, $49, $41, $36, $30, $26, $13, $0a, $01, $fc, $fc, $fc, $fc, $f3, $f0
1dae9     F3 F9 ED F3 
1daed     FC FF 03 03 
1daf1     04 07 07 00 
1daf5     EA DC D3 CC | 	byte	$f3, $f9, $ed, $f3, $fc, $ff, $03, $03, $04, $07, $07, $00, $ea, $dc, $d3, $cc
1daf9     D9 E6 F0 FC 
1dafd     01 01 07 09 
1db01     0D 13 18 18 
1db05     18 1A 1D 1D | 	byte	$d9, $e6, $f0, $fc, $01, $01, $07, $09, $0d, $13, $18, $18, $18, $1a, $1d, $1d
1db09     20 20 18 0D 
1db0d     FD ED D6 C3 
1db11     AD A3 9C A3 
1db15     B3 C5 E3 01 | 	byte	$20, $20, $18, $0d, $fd, $ed, $d6, $c3, $ad, $a3, $9c, $a3, $b3, $c5, $e3, $01
1db19     13 24 3B 4D 
1db1d     59 59 51 43 
1db21     31 21 1D 18 
1db25     13 0A 09 03 | 	byte	$13, $24, $3b, $4d, $59, $59, $51, $43, $31, $21, $1d, $18, $13, $0a, $09, $03
1db29     FD FF 00 07 
1db2d     16 18 1E 20 
1db31     2A 2A 2D 30 
1db35     30 30 26 20 | 	byte	$fd, $ff, $00, $07, $16, $18, $1e, $20, $2a, $2a, $2d, $30, $30, $30, $26, $20
1db39     18 10 04 04 
1db3d     04 07 0A 13 
1db41     14 16 0E 07 
1db45     03 04 10 0E | 	byte	$18, $10, $04, $04, $04, $07, $0a, $13, $14, $16, $0e, $07, $03, $04, $10, $0e
1db49     10 0E 01 F9 
1db4d     FF FF FD FD 
1db51     FF FF F9 F3 
1db55     F3 F3 F3 EA | 	byte	$10, $0e, $01, $f9, $ff, $ff, $fd, $fd, $ff, $ff, $f9, $f3, $f3, $f3, $f3, $ea
1db59     E0 D9 DA DA 
1db5d     E3 EC F3 F3 
1db61     F6 ED E8 E0 
1db65     D3 CF D0 D4 | 	byte	$e0, $d9, $da, $da, $e3, $ec, $f3, $f3, $f6, $ed, $e8, $e0, $d3, $cf, $d0, $d4
1db69     DA E3 ED FD 
1db6d     FD FF 03 04 
1db71     0D 00 F6 E6 
1db75     CF BF C0 C6 | 	byte	$da, $e3, $ed, $fd, $fd, $ff, $03, $04, $0d, $00, $f6, $e6, $cf, $bf, $c0, $c6
1db79     D6 E8 F2 FF 
1db7d     07 14 24 30 
1db81     3A 31 24 10 
1db85     FD F0 E6 DC | 	byte	$d6, $e8, $f2, $ff, $07, $14, $24, $30, $3a, $31, $24, $10, $fd, $f0, $e6, $dc
1db89     D0 B7 A9 9A 
1db8d     90 84 80 89 
1db91     92 A2 AD C3 
1db95     DA F2 F7 F2 | 	byte	$d0, $b7, $a9, $9a, $90, $84, $80, $89, $92, $a2, $ad, $c3, $da, $f2, $f7, $f2
1db99     F3 F3 FC EA 
1db9d     E6 E0 D3 C9 
1dba1     CC CC D3 D4 
1dba5     D4 C5 B3 A3 | 	byte	$f3, $f3, $fc, $ea, $e6, $e0, $d3, $c9, $cc, $cc, $d3, $d4, $d4, $c5, $b3, $a3
1dba9     94 9A A0 AC 
1dbad     B3 C5 D3 E6 
1dbb1     FC 03 16 14 
1dbb5     1A 18 13 07 | 	byte	$94, $9a, $a0, $ac, $b3, $c5, $d3, $e6, $fc, $03, $16, $14, $1a, $18, $13, $07
1dbb9     FD ED DF D6 
1dbbd     D6 DC ED FC 
1dbc1     0D 16 1D 2A 
1dbc5     2D 26 24 1E | 	byte	$fd, $ed, $df, $d6, $d6, $dc, $ed, $fc, $0d, $16, $1d, $2a, $2d, $26, $24, $1e
1dbc9     16 0A 0E 16 
1dbcd     26 2C 37 37 
1dbd1     2A 27 24 27 
1dbd5     2C 27 20 13 | 	byte	$16, $0a, $0e, $16, $26, $2c, $37, $37, $2a, $27, $24, $27, $2c, $27, $20, $13
1dbd9     03 00 F9 FF 
1dbdd     01 09 0E 14 
1dbe1     1D 21 27 27 
1dbe5     34 30 27 20 | 	byte	$03, $00, $f9, $ff, $01, $09, $0e, $14, $1d, $21, $27, $27, $34, $30, $27, $20
1dbe9     20 1D 14 0D 
1dbed     01 F9 F2 DF 
1dbf1     D9 D4 D4 DF 
1dbf5     E6 F7 09 14 | 	byte	$20, $1d, $14, $0d, $01, $f9, $f2, $df, $d9, $d4, $d4, $df, $e6, $f7, $09, $14
1dbf9     1A 16 0D 00 
1dbfd     FF 00 07 09 
1dc01     0D 0D 07 04 
1dc05     00 00 F9 F2 | 	byte	$1a, $16, $0d, $00, $ff, $00, $07, $09, $0d, $0d, $07, $04, $00, $00, $f9, $f2
1dc09     E3 CF C0 B1 
1dc0d     A7 A2 A9 B1 
1dc11     C0 E0 04 24 
1dc15     36 3D 43 4F | 	byte	$e3, $cf, $c0, $b1, $a7, $a2, $a9, $b1, $c0, $e0, $04, $24, $36, $3d, $43, $4f
1dc19     4F 40 40 3B 
1dc1d     34 24 1D 14 
1dc21     16 1A 18 13 
1dc25     0E 09 03 0E | 	byte	$4f, $40, $40, $3b, $34, $24, $1d, $14, $16, $1a, $18, $13, $0e, $09, $03, $0e
1dc29     14 1D 1E 1E 
1dc2d     1E 1D 1D 21 
1dc31     24 24 24 1E 
1dc35     1A 13 07 FD | 	byte	$14, $1d, $1e, $1e, $1e, $1d, $1d, $21, $24, $24, $24, $1e, $1a, $13, $07, $fd
1dc39     F7 ED E8 E3 
1dc3d     EA F6 FC 01 
1dc41     03 09 09 07 
1dc45     10 18 21 31 | 	byte	$f7, $ed, $e8, $e3, $ea, $f6, $fc, $01, $03, $09, $09, $07, $10, $18, $21, $31
1dc49     3D 54 64 70 
1dc4d     6C 59 37 16 
1dc51     F7 E6 DC D4 
1dc55     C6 C5 C9 CC | 	byte	$3d, $54, $64, $70, $6c, $59, $37, $16, $f7, $e6, $dc, $d4, $c6, $c5, $c9, $cc
1dc59     D9 E6 F3 F9 
1dc5d     FC F2 EC E3 
1dc61     D6 D3 CF D0 
1dc65     CC D0 E2 F2 | 	byte	$d9, $e6, $f3, $f9, $fc, $f2, $ec, $e3, $d6, $d3, $cf, $d0, $cc, $d0, $e2, $f2
1dc69     FD 00 FD F9 
1dc6d     EA D3 C5 BD 
1dc71     C0 C3 CC DC 
1dc75     F3 07 1E 2D | 	byte	$fd, $00, $fd, $f9, $ea, $d3, $c5, $bd, $c0, $c3, $cc, $dc, $f3, $07, $1e, $2d
1dc79     26 27 27 31 
1dc7d     36 40 40 3A 
1dc81     26 03 E6 CA 
1dc85     B1 A7 9A 9A | 	byte	$26, $27, $27, $31, $36, $40, $40, $3a, $26, $03, $e6, $ca, $b1, $a7, $9a, $9a
1dc89     98 9A A0 A6 
1dc8d     B1 B5 B9 C0 
1dc91     D0 E0 E3 EC 
1dc95     EA E3 DA C9 | 	byte	$98, $9a, $a0, $a6, $b1, $b5, $b9, $c0, $d0, $e0, $e3, $ec, $ea, $e3, $da, $c9
1dc99     CA CC CC D0 
1dc9d     C9 CC CC C5 
1dca1     C0 B9 A7 9A 
1dca5     90 94 9A B1 | 	byte	$ca, $cc, $cc, $d0, $c9, $cc, $cc, $c5, $c0, $b9, $a7, $9a, $90, $94, $9a, $b1
1dca9     BD CF D3 E3 
1dcad     F0 FF 0D 16 
1dcb1     16 16 09 FF 
1dcb5     F0 E6 DA D0 | 	byte	$bd, $cf, $d3, $e3, $f0, $ff, $0d, $16, $16, $16, $09, $ff, $f0, $e6, $da, $d0
1dcb9     C6 CF DA F3 
1dcbd     09 1A 24 2A 
1dcc1     18 07 00 FF 
1dcc5     03 0E 14 1D | 	byte	$c6, $cf, $da, $f3, $09, $1a, $24, $2a, $18, $07, $00, $ff, $03, $0e, $14, $1d
1dcc9     2A 3A 44 44 
1dccd     3D 31 20 16 
1dcd1     0D FC ED E8 
1dcd5     E2 DF E2 ED | 	byte	$2a, $3a, $44, $44, $3d, $31, $20, $16, $0d, $fc, $ed, $e8, $e2, $df, $e2, $ed
1dcd9     FD 14 26 31 
1dcdd     31 3A 41 47 
1dce1     4D 47 43 43 
1dce5     40 3A 36 24 | 	byte	$fd, $14, $26, $31, $31, $3a, $41, $47, $4d, $47, $43, $43, $40, $3a, $36, $24
1dce9     14 03 E8 D6 
1dced     D0 DC ED FF 
1dcf1     0E 1E 20 26 
1dcf5     2D 2A 1E 0D | 	byte	$14, $03, $e8, $d6, $d0, $dc, $ed, $ff, $0e, $1e, $20, $26, $2d, $2a, $1e, $0d
1dcf9     01 F3 F2 F0 
1dcfd     F0 ED EC E0 
1dd01     D9 D0 C6 C0 
1dd05     BD BC B5 B9 | 	byte	$01, $f3, $f2, $f0, $f0, $ed, $ec, $e0, $d9, $d0, $c6, $c0, $bd, $bc, $b5, $b9
1dd09     BC BF CF D4 
1dd0d     E6 F7 04 16 
1dd11     30 40 4B 4B 
1dd15     34 21 1D 16 | 	byte	$bc, $bf, $cf, $d4, $e6, $f7, $04, $16, $30, $40, $4b, $4b, $34, $21, $1d, $16
1dd19     1E 21 2C 2C 
1dd1d     2C 2D 2D 36 
1dd21     31 26 20 13 
1dd25     0D 0E 0D 0A | 	byte	$1e, $21, $2c, $2c, $2c, $2d, $2d, $36, $31, $26, $20, $13, $0d, $0e, $0d, $0a
1dd29     0A 09 09 0A 
1dd2d     0D 14 1D 1D 
1dd31     1D 18 0E 03 
1dd35     FD E2 D4 CF | 	byte	$0a, $09, $09, $0a, $0d, $14, $1d, $1d, $1d, $18, $0e, $03, $fd, $e2, $d4, $cf
1dd39     D0 D4 E6 F9 
1dd3d     03 0E 0A 03 
1dd41     F9 04 1E 3D 
1dd45     57 6C 74 7F | 	byte	$d0, $d4, $e6, $f9, $03, $0e, $0a, $03, $f9, $04, $1e, $3d, $57, $6c, $74, $7f
1dd49     7F 7F 77 68 
1dd4d     57 41 26 0D 
1dd51     FC E8 DA D0 
1dd55     C9 CF D4 DF | 	byte	$7f, $7f, $77, $68, $57, $41, $26, $0d, $fc, $e8, $da, $d0, $c9, $cf, $d4, $df
1dd59     E3 EC EC EC 
1dd5d     EA EA E3 D6 
1dd61     D6 CF D0 D4 
1dd65     DA E3 E6 DA | 	byte	$e3, $ec, $ec, $ec, $ea, $ea, $e3, $d6, $d6, $cf, $d0, $d4, $da, $e3, $e6, $da
1dd69     C9 A9 A6 A9 
1dd6d     B7 D9 F2 09 
1dd71     1D 34 36 3D 
1dd75     43 43 3D 30 | 	byte	$c9, $a9, $a6, $a9, $b7, $d9, $f2, $09, $1d, $34, $36, $3d, $43, $43, $3d, $30
1dd79     27 18 16 0E 
1dd7d     03 00 FC ED 
1dd81     E3 DA CC C5 
1dd85     C0 BD BD C5 | 	byte	$27, $18, $16, $0e, $03, $00, $fc, $ed, $e3, $da, $cc, $c5, $c0, $bd, $bd, $c5
1dd89     CA C6 C0 BD 
1dd8d     C3 C3 C6 CA 
1dd91     D4 D0 C6 B1 
1dd95     A6 A7 B3 BF | 	byte	$ca, $c6, $c0, $bd, $c3, $c3, $c6, $ca, $d4, $d0, $c6, $b1, $a6, $a7, $b3, $bf
1dd99     CA CA C6 C0 
1dd9d     BF BC B9 B5 
1dda1     AC A6 A9 AD 
1dda5     AD B7 C3 CF | 	byte	$ca, $ca, $c6, $c0, $bf, $bc, $b9, $b5, $ac, $a6, $a9, $ad, $ad, $b7, $c3, $cf
1dda9     DC DF E6 EA 
1ddad     ED F9 FF 00 
1ddb1     03 04 03 F6 
1ddb5     EC E8 E2 E6 | 	byte	$dc, $df, $e6, $ea, $ed, $f9, $ff, $00, $03, $04, $03, $f6, $ec, $e8, $e2, $e6
1ddb9     F0 FC 03 04 
1ddbd     FF ED DA DC 
1ddc1     E8 FD 13 27 
1ddc5     3A 47 4D 51 | 	byte	$f0, $fc, $03, $04, $ff, $ed, $da, $dc, $e8, $fd, $13, $27, $3a, $47, $4d, $51
1ddc9     4F 41 30 13 
1ddcd     FC E0 CF CC 
1ddd1     CA CC D6 DC 
1ddd5     EC 00 0A 1A | 	byte	$4f, $41, $30, $13, $fc, $e0, $cf, $cc, $ca, $cc, $d6, $dc, $ec, $00, $0a, $1a
1ddd9     2A 36 49 54 
1dddd     5A 54 47 3D 
1dde1     3A 34 36 40 
1dde5     44 4B 40 1E | 	byte	$2a, $36, $49, $54, $5a, $54, $47, $3d, $3a, $34, $36, $40, $44, $4b, $40, $1e
1dde9     04 FC F7 03 
1dded     16 26 31 36 
1ddf1     36 37 31 24 
1ddf5     16 FF F0 E2 | 	byte	$04, $fc, $f7, $03, $16, $26, $31, $36, $36, $37, $31, $24, $16, $ff, $f0, $e2
1ddf9     DA CF CC CC 
1ddfd     BC A9 9C 90 
1de01     90 94 A7 BC 
1de05     D6 ED 01 10 | 	byte	$da, $cf, $cc, $cc, $bc, $a9, $9c, $90, $90, $94, $a7, $bc, $d6, $ed, $01, $10
1de09     0E 13 10 10 
1de0d     0E 13 18 20 
1de11     1D 04 FD FF 
1de15     01 1D 34 41 | 	byte	$0e, $13, $10, $10, $0e, $13, $18, $20, $1d, $04, $fd, $ff, $01, $1d, $34, $41
1de19     51 53 54 57 
1de1d     57 44 31 1D 
1de21     04 F7 F0 ED 
1de25     F0 F0 F2 F3 | 	byte	$51, $53, $54, $57, $57, $44, $31, $1d, $04, $f7, $f0, $ed, $f0, $f0, $f2, $f3
1de29     F3 F6 F7 00 
1de2d     04 10 14 10 
1de31     10 03 F3 E3 
1de35     DF DC DC E8 | 	byte	$f3, $f6, $f7, $00, $04, $10, $14, $10, $10, $03, $f3, $e3, $df, $dc, $dc, $e8
1de39     F9 0A 0E 03 
1de3d     F9 F9 FF 16 
1de41     36 4F 64 76 
1de45     7F 7F 7F 7F | 	byte	$f9, $0a, $0e, $03, $f9, $f9, $ff, $16, $36, $4f, $64, $76, $7f, $7f, $7f, $7f
1de49     7F 7C 66 4D 
1de4d     3A 2C 24 24 
1de51     13 00 F0 E0 
1de55     D0 CA C6 D0 | 	byte	$7f, $7c, $66, $4d, $3a, $2c, $24, $24, $13, $00, $f0, $e0, $d0, $ca, $c6, $d0
1de59     D9 E0 ED F3 
1de5d     ED EA E0 D4 
1de61     C9 B5 AF B5 
1de65     B1 A2 A0 A2 | 	byte	$d9, $e0, $ed, $f3, $ed, $ea, $e0, $d4, $c9, $b5, $af, $b5, $b1, $a2, $a0, $a2
1de69     B3 D6 F9 1E 
1de6d     36 43 47 4D 
1de71     4B 49 3B 2D 
1de75     18 09 FC F7 | 	byte	$b3, $d6, $f9, $1e, $36, $43, $47, $4d, $4b, $49, $3b, $2d, $18, $09, $fc, $f7
1de79     FC FD FF FF 
1de7d     F6 F2 F3 F3 
1de81     F9 01 01 FF 
1de85     FC ED E2 D6 | 	byte	$fc, $fd, $ff, $ff, $f6, $f2, $f3, $f3, $f9, $01, $01, $ff, $fc, $ed, $e2, $d6
1de89     CF C9 B7 AC 
1de8d     A6 A7 AC 9D 
1de91     94 8C 8A 94 
1de95     9D AF B9 C0 | 	byte	$cf, $c9, $b7, $ac, $a6, $a7, $ac, $9d, $94, $8c, $8a, $94, $9d, $af, $b9, $c0
1de99     C9 D0 DA DF 
1de9d     E3 E3 CF BF 
1dea1     AF A0 9A A2 
1dea5     A6 AD B1 B7 | 	byte	$c9, $d0, $da, $df, $e3, $e3, $cf, $bf, $af, $a0, $9a, $a2, $a6, $ad, $b1, $b7
1dea9     C3 D3 DC ED 
1dead     FC 0A 18 20 
1deb1     1D 16 09 FC 
1deb5     EC DA D0 CC | 	byte	$c3, $d3, $dc, $ed, $fc, $0a, $18, $20, $1d, $16, $09, $fc, $ec, $da, $d0, $cc
1deb9     D4 D4 CF CC 
1debd     C9 DC F0 07 
1dec1     1E 36 47 43 
1dec5     4D 43 37 2C | 	byte	$d4, $d4, $cf, $cc, $c9, $dc, $f0, $07, $1e, $36, $47, $43, $4d, $43, $37, $2c
1dec9     13 F9 DF D3 
1decd     CC D4 E2 F0 
1ded1     F0 F0 F2 F2 
1ded5     F3 FF 0D 21 | 	byte	$13, $f9, $df, $d3, $cc, $d4, $e2, $f0, $f0, $f0, $f2, $f2, $f3, $ff, $0d, $21
1ded9     34 47 4F 57 
1dedd     5D 57 4D 41 
1dee1     40 40 41 43 
1dee5     3A 34 30 30 | 	byte	$34, $47, $4f, $57, $5d, $57, $4d, $41, $40, $40, $41, $43, $3a, $34, $30, $30
1dee9     31 3A 3B 3D 
1deed     40 37 37 30 
1def1     24 16 04 EC 
1def5     DA C5 BC B3 | 	byte	$31, $3a, $3b, $3d, $40, $37, $37, $30, $24, $16, $04, $ec, $da, $c5, $bc, $b3
1def9     AF B1 A2 9D 
1defd     98 9A A6 B9 
1df01     D3 F7 04 16 
1df05     1E 1A 1A 10 | 	byte	$af, $b1, $a2, $9d, $98, $9a, $a6, $b9, $d3, $f7, $04, $16, $1e, $1a, $1a, $10
1df09     04 F9 F2 F0 
1df0d     F6 FC F7 F9 
1df11     F7 FC 0A 27 
1df15     40 54 66 66 | 	byte	$04, $f9, $f2, $f0, $f6, $fc, $f7, $f9, $f7, $fc, $0a, $27, $40, $54, $66, $66
1df19     60 57 47 36 
1df1d     26 10 FF EA 
1df21     DF DC D6 DC 
1df25     DA DA DA DF | 	byte	$60, $57, $47, $36, $26, $10, $ff, $ea, $df, $dc, $d6, $dc, $da, $da, $da, $df
1df29     E3 E6 ED 00 
1df2d     00 F4 E0 C7 
1df31     F0 DF 5F 40 
1df35     FF 30 D7 F2 | 	byte	$e3, $e6, $ed, $00, $00, $f4, $e0, $c7, $f0, $df, $5f, $40, $ff, $30, $d7, $f2
1df39     1F 7F 00 DF 
1df3d     7F 20 E0 BF 
1df41     3F 40 0B 10 
1df45     00 F4 EA E5 | 	byte	$1f, $7f, $00, $df, $7f, $20, $e0, $bf, $3f, $40, $0b, $10, $00, $f4, $ea, $e5
1df49     E2 DA D5 D3 
1df4d     DF F9 E8 C8 
1df51     AF CA CB D5 
1df55     E3 F7 05 13 | 	byte	$e2, $da, $d5, $d3, $df, $f9, $e8, $c8, $af, $ca, $cb, $d5, $e3, $f7, $05, $13
1df59     21 20 19 33 
1df5d     4B 7F 7F 60 
1df61     2A 3F 40 4F 
1df65     70 20 F7 04 | 	byte	$21, $20, $19, $33, $4b, $7f, $7f, $60, $2a, $3f, $40, $4f, $70, $20, $f7, $04
1df69     A0 DF 00 EA 
1df6d     D0 AF FF 00 
1df71     80 83 DF D8 
1df75     BA B0 AF BF | 	byte	$a0, $df, $00, $ea, $d0, $af, $ff, $00, $80, $83, $df, $d8, $ba, $b0, $af, $bf
1df79     EF 1A 1C 08 
1df7d     0B 10 03 1B 
1df81     3F 70 40 28 
1df85     27 57 40 2B | 	byte	$ef, $1a, $1c, $08, $0b, $10, $03, $1b, $3f, $70, $40, $28, $27, $57, $40, $2b
1df89     47 34 00 CD 
1df8d     EF 2A 08 C0 
1df91     97 BF C0 CF 
1df95     FF D0 90 BF | 	byte	$47, $34, $00, $cd, $ef, $2a, $08, $c0, $97, $bf, $c0, $cf, $ff, $d0, $90, $bf
1df99     F8 C5 DF 17 
1df9d     04 07 F0 D7 
1dfa1     FF 0F 5F 7F 
1dfa5     10 BF FF 10 | 	byte	$f8, $c5, $df, $17, $04, $07, $f0, $d7, $ff, $0f, $5f, $7f, $10, $bf, $ff, $10
1dfa9     F0 FF 6F 60 
1dfad     E0 FF 40 1F 
1dfb1     3C 20 18 1A 
1dfb5     08 E0 DF 09 | 	byte	$f0, $ff, $6f, $60, $e0, $ff, $40, $1f, $3c, $20, $18, $1a, $08, $e0, $df, $09
1dfb9     00 E0 B4 C5 
1dfbd     B0 AF EB D8 
1dfc1     E7 FC FA 07 
1dfc5     11 17 25 37 | 	byte	$00, $e0, $b4, $c5, $b0, $af, $eb, $d8, $e7, $fc, $fa, $07, $11, $17, $25, $37
1dfc9     3C 43 54 40 
1dfcd     10 0F 00 E7 
1dfd1     13 00 FF 00 
1dfd5     C0 80 80 DF | 	byte	$3c, $43, $54, $40, $10, $0f, $00, $e7, $13, $00, $ff, $00, $c0, $80, $80, $df
1dfd9     14 00 E8 B0 
1dfdd     A9 B7 DB F7 
1dfe1     16 00 E0 C0 
1dfe5     A9 A8 95 DF | 	byte	$14, $00, $e8, $b0, $a9, $b7, $db, $f7, $16, $00, $e0, $c0, $a9, $a8, $95, $df
1dfe9     29 35 20 E0 
1dfed     D7 FF 4F 7C 
1dff1     5A 60 40 00 
1dff5     DF FF 28 1F | 	byte	$29, $35, $20, $e0, $d7, $ff, $4f, $7c, $5a, $60, $40, $00, $df, $ff, $28, $1f
1dff9     37 2F 28 00 
1dffd     F0 D0 DF 0C 
1e001     E0 C4 CF E0 
1e005     DF FF 0E 04 | 	byte	$37, $2f, $28, $00, $f0, $d0, $df, $0c, $e0, $c4, $cf, $e0, $df, $ff, $0e, $04
1e009     E0 D7 FF 3F 
1e00d     38 4B 40 2D 
1e011     34 10 0F 04 
1e015     F0 D0 BB FF | 	byte	$e0, $d7, $ff, $3f, $38, $4b, $40, $2d, $34, $10, $0f, $04, $f0, $d0, $bb, $ff
1e019     E0 80 81 BF 
1e01d     A0 BF 37 00 
1e021     95 BF EF 28 
1e025     E0 F4 DF 2F | 	byte	$e0, $80, $81, $bf, $a0, $bf, $37, $00, $95, $bf, $ef, $28, $e0, $f4, $df, $2f
1e029     2B 20 FB 02 
1e02d     E4 EB 1B 08 
1e031     FF 24 19 19 
1e035     35 30 13 28 | 	byte	$2b, $20, $fb, $02, $e4, $eb, $1b, $08, $ff, $24, $19, $19, $35, $30, $13, $28
1e039     F0 2F 60 A0 
1e03d     FF 20 A0 B7 
1e041     DF E8 A4 AF 
1e045     BF FF 2A 20 | 	byte	$f0, $2f, $60, $a0, $ff, $20, $a0, $b7, $df, $e8, $a4, $af, $bf, $ff, $2a, $20
1e049     18 02 1F 20 
1e04d     00 EF 35 10 
1e051     09 E8 B4 B7 
1e055     DF 4F 28 3F | 	byte	$18, $02, $1f, $20, $00, $ef, $35, $10, $09, $e8, $b4, $b7, $df, $4f, $28, $3f
1e059     40 DB 1F 30 
1e05d     3F 7D 70 20 
1e061     0F 20 F7 2F 
1e065     00 BB FF 3A | 	byte	$40, $db, $1f, $30, $3f, $7d, $70, $20, $0f, $20, $f7, $2f, $00, $bb, $ff, $3a
1e069     00 B7 FE D0 
1e06d     EF 0F 04 1F 
1e071     20 D3 F3 E0 
1e075     F3 FC E8 EB | 	byte	$00, $b7, $fe, $d0, $ef, $0f, $04, $1f, $20, $d3, $f3, $e0, $f3, $fc, $e8, $eb
1e079     02 FF 3B 20 
1e07d     E0 C8 CF 17 
1e081     14 10 08 11 
1e085     00 DF E4 C8 | 	byte	$02, $ff, $3b, $20, $e0, $c8, $cf, $17, $14, $10, $08, $11, $00, $df, $e4, $c8
1e089     C7 D8 A7 FF 
1e08d     E0 DF 20 E0 
1e091     EF 40 E0 BF 
1e095     27 00 E7 FB | 	byte	$c7, $d8, $a7, $ff, $e0, $df, $20, $e0, $ef, $40, $e0, $bf, $27, $00, $e7, $fb
1e099     1F 14 1F 7F 
1e09d     10 FF 7F 60 
1e0a1     2F 60 2B 47 
1e0a5     45 40 2C 10 | 	byte	$1f, $14, $1f, $7f, $10, $ff, $7f, $60, $2f, $60, $2b, $47, $45, $40, $2c, $10
1e0a9     F0 E0 BC AE 
1e0ad     C7 DF E8 C4 
1e0b1     A0 9F F7 4F 
1e0b5     52 72 20 8B | 	byte	$f0, $e0, $bc, $ae, $c7, $df, $e8, $c4, $a0, $9f, $f7, $4f, $52, $72, $20, $8b
1e0b9     FF 7F 20 12 
1e0bd     D0 EF 30 E0 
1e0c1     BF 3F 20 80 
1e0c5     9F 1F 28 08 | 	byte	$ff, $7f, $20, $12, $d0, $ef, $30, $e0, $bf, $3f, $20, $80, $9f, $1f, $28, $08
1e0c9     CC FF 10 C0 
1e0cd     CF 14 F0 CC 
1e0d1     C2 CF C0 9B 
1e0d5     D7 D8 BF 1F | 	byte	$cc, $ff, $10, $c0, $cf, $14, $f0, $cc, $c2, $cf, $c0, $9b, $d7, $d8, $bf, $1f
1e0d9     20 D4 CB FF 
1e0dd     60 00 3F 60 
1e0e1     01 00 0D 00 
1e0e5     D4 EF 10 F3 | 	byte	$20, $d4, $cb, $ff, $60, $00, $3f, $60, $01, $00, $0d, $00, $d4, $ef, $10, $f3
1e0e9     1F 20 0F 3F 
1e0ed     20 FF 10 BB 
1e0f1     EF 17 20 E8 
1e0f5     B0 88 80 9F | 	byte	$1f, $20, $0f, $3f, $20, $ff, $10, $bb, $ef, $17, $20, $e8, $b0, $88, $80, $9f
1e0f9     E8 E2 E7 EC 
1e0fd     C8 EF 1F 6F 
1e101     50 E0 C7 17 
1e105     20 FF 27 2A | 	byte	$e8, $e2, $e7, $ec, $c8, $ef, $1f, $6f, $50, $e0, $c7, $17, $20, $ff, $27, $2a
1e109     1F 30 E4 FF 
1e10d     5F 50 00 2F 
1e111     7F 40 06 00 
1e115     C8 FF 40 DF | 	byte	$1f, $30, $e4, $ff, $5f, $50, $00, $2f, $7f, $40, $06, $00, $c8, $ff, $40, $df
1e119     3F 00 9F FF 
1e11d     08 0A F0 B7 
1e121     1F 00 FF 6E 
1e125     00 FF 40 F7 | 	byte	$3f, $00, $9f, $ff, $08, $0a, $f0, $b7, $1f, $00, $ff, $6e, $00, $ff, $40, $f7
1e129     2C E0 BF 14 
1e12d     F0 F7 10 90 
1e131     9F 3F 40 10 
1e135     F0 DF 0F 2F | 	byte	$2c, $e0, $bf, $14, $f0, $f7, $10, $90, $9f, $3f, $40, $10, $f0, $df, $0f, $2f
1e139     2A 2F 08 DE 
1e13d     D4 DF 17 3F 
1e141     00 BF FF 00 
1e145     BB FF 60 E0 | 	byte	$2a, $2f, $08, $de, $d4, $df, $17, $3f, $00, $bf, $ff, $00, $bb, $ff, $60, $e0
1e149     FF 10 F3 E0 
1e14d     BF 00 80 BF 
1e151     18 D8 CC B4 
1e155     8A B7 C0 FF | 	byte	$ff, $10, $f3, $e0, $bf, $00, $80, $bf, $18, $d8, $cc, $b4, $8a, $b7, $c0, $ff
1e159     20 9F FF E0 
1e15d     BF FF 30 D4 
1e161     FF 50 00 EF 
1e165     E0 CF 2F 30 | 	byte	$20, $9f, $ff, $e0, $bf, $ff, $30, $d4, $ff, $50, $00, $ef, $e0, $cf, $2f, $30
1e169     08 F0 EB 00 
1e16d     C9 2F 20 9F 
1e171     3F 20 C7 FA 
1e175     D0 EB 05 00 | 	byte	$08, $f0, $eb, $00, $c9, $2f, $20, $9f, $3f, $20, $c7, $fa, $d0, $eb, $05, $00
1e179     B9 FF 58 00 
1e17d     B7 F7 33 3B 
1e181     54 10 EA EF 
1e185     08 F0 17 1F | 	byte	$b9, $ff, $58, $00, $b7, $f7, $33, $3b, $54, $10, $ea, $ef, $08, $f0, $17, $1f
1e189     20 0F 4F 08 
1e18d     FF 30 17 3F 
1e191     20 1F 40 E0 
1e195     FF 00 AF 3A | 	byte	$20, $0f, $4f, $08, $ff, $30, $17, $3f, $20, $1f, $40, $e0, $ff, $00, $af, $3a
1e199     00 B0 8B BF 
1e19d     10 00 E9 E0 
1e1a1     C4 D7 FF 54 
1e1a5     30 23 10 0F | 	byte	$00, $b0, $8b, $bf, $10, $00, $e9, $e0, $c4, $d7, $ff, $54, $30, $23, $10, $0f
1e1a9     10 00 FF 2F 
1e1ad     6F 68 20 FF 
1e1b1     4F 60 13 3E 
1e1b5     10 FF 20 00 | 	byte	$10, $00, $ff, $2f, $6f, $68, $20, $ff, $4f, $60, $13, $3e, $10, $ff, $20, $00
1e1b9     F6 1B 28 D0 
1e1bd     B7 E4 C7 F7 
1e1c1     D0 BF F9 E2 
1e1c5     FF 24 14 00 | 	byte	$f6, $1b, $28, $d0, $b7, $e4, $c7, $f7, $d0, $bf, $f9, $e2, $ff, $24, $14, $00
1e1c9     FF 24 20 27 
1e1cd     6C 20 1D 20 
1e1d1     10 F3 1F 28 
1e1d5     1F 2C 08 EB | 	byte	$ff, $24, $20, $27, $6c, $20, $1d, $20, $10, $f3, $1f, $28, $1f, $2c, $08, $eb
1e1d9     EB 1F 40 E0 
1e1dd     EF 14 D0 A0 
1e1e1     D7 00 C0 D7 
1e1e5     D4 80 9F 0C | 	byte	$eb, $1f, $40, $e0, $ef, $14, $d0, $a0, $d7, $00, $c0, $d7, $d4, $80, $9f, $0c
1e1e9     C0 DF 70 00 
1e1ed     B6 DF EF 1F 
1e1f1     00 FF 30 FF 
1e1f5     00 DD FF 0C | 	byte	$c0, $df, $70, $00, $b6, $df, $ef, $1f, $00, $ff, $30, $ff, $00, $dd, $ff, $0c
1e1f9     FF 3F 40 D0 
1e1fd     FF FB 2D 00 
1e201     CF 0D E8 C0 
1e205     B9 B7 FF 50 | 	byte	$ff, $3f, $40, $d0, $ff, $fb, $2d, $00, $cf, $0d, $e8, $c0, $b9, $b7, $ff, $50
1e209     00 FF E0 D7 
1e20d     FF 28 3F 20 
1e211     D5 FF 1F 10 
1e215     0F 00 DF FF | 	byte	$00, $ff, $e0, $d7, $ff, $28, $3f, $20, $d5, $ff, $1f, $10, $0f, $00, $df, $ff
1e219     E0 BF 37 E0 
1e21d     EF F2 F9 0F 
1e221     14 EB 13 00 
1e225     E2 FF 20 D0 | 	byte	$e0, $bf, $37, $e0, $ef, $f2, $f9, $0f, $14, $eb, $13, $00, $e2, $ff, $20, $d0
1e229     EF 40 00 A0 
1e22d     BF DA C2 DF 
1e231     0F 10 FF 37 
1e235     30 E0 EF 3B | 	byte	$ef, $40, $00, $a0, $bf, $da, $c2, $df, $0f, $10, $ff, $37, $30, $e0, $ef, $3b
1e239     35 48 10 DF 
1e23d     F7 FC E8 EF 
1e241     2F 20 E8 C0 
1e245     CF 22 F0 CF | 	byte	$35, $48, $10, $df, $f7, $fc, $e8, $ef, $2f, $20, $e8, $c0, $cf, $22, $f0, $cf
1e249     F7 E8 B8 D7 
1e24d     D0 C0 CF 13 
1e251     00 D1 FF F0 
1e255     BF FF 1B 55 | 	byte	$f7, $e8, $b8, $d7, $d0, $c0, $cf, $13, $00, $d1, $ff, $f0, $bf, $ff, $1b, $55
1e259     30 04 FF 27 
1e25d     2F 04 0F 48 
1e261     25 40 00 B3 
1e265     DF 0F 38 10 | 	byte	$30, $04, $ff, $27, $2f, $04, $0f, $48, $25, $40, $00, $b3, $df, $0f, $38, $10
1e269     1F 30 00 9F 
1e26d     1F 20 F8 FB 
1e271     0B E0 B7 D7 
1e275     D1 FF 4A 42 | 	byte	$1f, $30, $00, $9f, $1f, $20, $f8, $fb, $0b, $e0, $b7, $d7, $d1, $ff, $4a, $42
1e279     20 E3 1F 00 
1e27d     C1 1F 74 20 
1e281     F0 FF 00 1F 
1e285     08 EF 4B 00 | 	byte	$20, $e3, $1f, $00, $c1, $1f, $74, $20, $f0, $ff, $00, $1f, $08, $ef, $4b, $00
1e289     AF FF F7 08 
1e28d     D3 FF 00 CF 
1e291     FF 1F 1C 08 
1e295     EF FF 1F 2A | 	byte	$af, $ff, $f7, $08, $d3, $ff, $00, $cf, $ff, $1f, $1c, $08, $ef, $ff, $1f, $2a
1e299     14 00 FF 44 
1e29d     F0 1F 20 EF 
1e2a1     4D 10 E2 C0 
1e2a5     CF FB 09 1F | 	byte	$14, $00, $ff, $44, $f0, $1f, $20, $ef, $4d, $10, $e2, $c0, $cf, $fb, $09, $1f
1e2a9     10 E4 C8 C0 
1e2ad     BB CF CB DB 
1e2b1     F7 0B 00 EF 
1e2b5     24 C8 1F 78 | 	byte	$10, $e4, $c8, $c0, $bb, $cf, $cb, $db, $f7, $0b, $00, $ef, $24, $c8, $1f, $78
1e2b9     1B 57 10 FF 
1e2bd     20 1F 20 27 
1e2c1     30 1F 30 00 
1e2c5     EF 04 DF 1F | 	byte	$1b, $57, $10, $ff, $20, $1f, $20, $27, $30, $1f, $30, $00, $ef, $04, $df, $1f
1e2c9     34 E0 D7 0F 
1e2cd     08 1B 10 17 
1e2d1     20 3F 40 F0 
1e2d5     CF 17 20 E8 | 	byte	$34, $e0, $d7, $0f, $08, $1b, $10, $17, $20, $3f, $40, $f0, $cf, $17, $20, $e8
1e2d9     C7 FF 08 00 
1e2dd     FF 30 00 E9 
1e2e1     D4 FF 40 1B 
1e2e5     5F 60 10 C8 | 	byte	$c7, $ff, $08, $00, $ff, $30, $00, $e9, $d4, $ff, $40, $1b, $5f, $60, $10, $c8
1e2e9     DF 3F 00 08 
1e2ed     E8 EF E8 E7 
1e2f1     08 D0 CF E2 
1e2f5     CF EF D9 FF | 	byte	$df, $3f, $00, $08, $e8, $ef, $e8, $e7, $08, $d0, $cf, $e2, $cf, $ef, $d9, $ff
1e2f9     10 D0 C2 A8 
1e2fd     AF F7 0B 10 
1e301     E0 B0 AF 1F 
1e305     C0 DF 10 FF | 	byte	$10, $d0, $c2, $a8, $af, $f7, $0b, $10, $e0, $b0, $af, $1f, $c0, $df, $10, $ff
1e309     34 00 FF 3F 
1e30d     28 24 00 FF 
1e311     5F 40 DF F4 
1e315     E0 E7 1F 38 | 	byte	$34, $00, $ff, $3f, $28, $24, $00, $ff, $5f, $40, $df, $f4, $e0, $e7, $1f, $38
1e319     10 C8 DF 0F 
1e31d     00 ED F0 FF 
1e321     00 FF E0 DF 
1e325     F9 E7 06 FF | 	byte	$10, $c8, $df, $0f, $00, $ed, $f0, $ff, $00, $ff, $e0, $df, $f9, $e7, $06, $ff
1e329     2F 44 20 CB 
1e32d     FF 14 1F 50 
1e331     00 DF F4 FF 
1e335     08 DA E8 EF | 	byte	$2f, $44, $20, $cb, $ff, $14, $1f, $50, $00, $df, $f4, $ff, $08, $da, $e8, $ef
1e339     34 E0 CF F4 
1e33d     DC FF 00 EB 
1e341     12 0B F0 BF 
1e345     FF 1A 2D 00 | 	byte	$34, $e0, $cf, $f4, $dc, $ff, $00, $eb, $12, $0b, $f0, $bf, $ff, $1a, $2d, $00
1e349     B7 FF 00 C7 
1e34d     FF F0 DF 02 
1e351     F8 FB 02 F7 
1e355     FF 3F 20 E0 | 	byte	$b7, $ff, $00, $c7, $ff, $f0, $df, $02, $f8, $fb, $02, $f7, $ff, $3f, $20, $e0
1e359     E7 0F 20 D0 
1e35d     DF 38 C0 9F 
1e361     0F 00 B7 C8 
1e365     CF 1F 00 DF | 	byte	$e7, $0f, $20, $d0, $df, $38, $c0, $9f, $0f, $00, $b7, $c8, $cf, $1f, $00, $df
1e369     00 C1 EE E5 
1e36d     0E 05 10 E8 
1e371     E8 E7 3F 40 
1e375     E9 FE 03 0F | 	byte	$00, $c1, $ee, $e5, $0e, $05, $10, $e8, $e8, $e7, $3f, $40, $e9, $fe, $03, $0f
1e379     20 F0 FF 1E 
1e37d     F0 BF FF 38 
1e381     00 EF 20 08 
1e385     00 EB FF 46 | 	byte	$20, $f0, $ff, $1e, $f0, $bf, $ff, $38, $00, $ef, $20, $08, $00, $eb, $ff, $46
1e389     08 F7 3F 30 
1e38d     F7 37 38 2F 
1e391     3C 28 08 13 
1e395     2D 21 4F 40 | 	byte	$08, $f7, $3f, $30, $f7, $37, $38, $2f, $3c, $28, $08, $13, $2d, $21, $4f, $40
1e399     1F 20 F0 F7 
1e39d     04 F0 EB FD 
1e3a1     04 D0 D7 DB 
1e3a5     EF FC E0 EF | 	byte	$1f, $20, $f0, $f7, $04, $f0, $eb, $fd, $04, $d0, $d7, $db, $ef, $fc, $e0, $ef
1e3a9     00 D7 2A E8 
1e3ad     DF 1F 20 FF 
1e3b1     00 DD C0 AF 
1e3b5     1F 40 00 FA | 	byte	$00, $d7, $2a, $e8, $df, $1f, $20, $ff, $00, $dd, $c0, $af, $1f, $40, $00, $fa
1e3b9     D0 D7 FF 29 
1e3bd     14 2F 64 00 
1e3c1     BF 1F 61 40 
1e3c5     10 1B 20 00 | 	byte	$d0, $d7, $ff, $29, $14, $2f, $64, $00, $bf, $1f, $61, $40, $10, $1b, $20, $00
1e3c9     ED 0F 26 20 
1e3cd     F7 1F 40 08 
1e3d1     DF 0F 2C 02 
1e3d5     1F 20 14 F0 | 	byte	$ed, $0f, $26, $20, $f7, $1f, $40, $08, $df, $0f, $2c, $02, $1f, $20, $14, $f0
1e3d9     D1 EF F7 2A 
1e3dd     00 FF 10 0F 
1e3e1     20 E8 EF ED 
1e3e5     2F 40 07 1F | 	byte	$d1, $ef, $f7, $2a, $00, $ff, $10, $0f, $20, $e8, $ef, $ed, $2f, $40, $07, $1f
1e3e9     30 00 CF 35 
1e3ed     04 F9 FF 03 
1e3f1     27 E0 BF 17 
1e3f5     08 E7 1F 24 | 	byte	$30, $00, $cf, $35, $04, $f9, $ff, $03, $27, $e0, $bf, $17, $08, $e7, $1f, $24
1e3f9     E8 FF 14 00 
1e3fd     ED FF 2C 00 
1e401     E0 EF 13 0C 
1e405     0D 00 F0 EB | 	byte	$e8, $ff, $14, $00, $ed, $ff, $2c, $00, $e0, $ef, $13, $0c, $0d, $00, $f0, $eb
1e409     F7 E0 EF F0 
1e40d     EF C4 DF D0 
1e411     BF C8 D7 F4 
1e415     DA F3 E8 F7 | 	byte	$f7, $e0, $ef, $f0, $ef, $c4, $df, $d0, $bf, $c8, $d7, $f4, $da, $f3, $e8, $f7
1e419     27 30 18 F8 
1e41d     FF 2F 40 08 
1e421     1B 08 CF FF 
1e425     20 F7 2A E0 | 	byte	$27, $30, $18, $f8, $ff, $2f, $40, $08, $1b, $08, $cf, $ff, $20, $f7, $2a, $e0
1e429     F7 F0 FF 1B 
1e42d     2C 00 EF E0 
1e431     D7 0C EA E4 
1e435     C4 EF 15 10 | 	byte	$f7, $f0, $ff, $1b, $2c, $00, $ef, $e0, $d7, $0c, $ea, $e4, $c4, $ef, $15, $10
1e439     D0 AB FF 18 
1e43d     0F 00 FF FB 
1e441     11 F0 FF 00 
1e445     F3 00 C0 DF | 	byte	$d0, $ab, $ff, $18, $0f, $00, $ff, $fb, $11, $f0, $ff, $00, $f3, $00, $c0, $df
1e449     E8 D5 E7 F8 
1e44d     B0 D7 F0 CF 
1e451     0F 07 2B 10 
1e455     E0 DF 3F 40 | 	byte	$e8, $d5, $e7, $f8, $b0, $d7, $f0, $cf, $0f, $07, $2b, $10, $e0, $df, $3f, $40
1e459     08 E8 1F 60 
1e45d     20 FE 02 E8 
1e461     D1 F7 0C E0 
1e465     CB 0F E0 AF | 	byte	$08, $e8, $1f, $60, $20, $fe, $02, $e8, $d1, $f7, $0c, $e0, $cb, $0f, $e0, $af
1e469     EB E1 FB 00 
1e46d     C0 DF 08 D0 
1e471     EF 08 F3 0D 
1e475     0C 00 07 00 | 	byte	$eb, $e1, $fb, $00, $c0, $df, $08, $d0, $ef, $08, $f3, $0d, $0c, $00, $07, $00
1e479     EB 0F 08 E0 
1e47d     DD EF F3 0F 
1e481     00 CD DF E3 
1e485     0F 20 00 EF | 	byte	$eb, $0f, $08, $e0, $dd, $ef, $f3, $0f, $00, $cd, $df, $e3, $0f, $20, $00, $ef
1e489     1F 20 00 04 
1e48d     E8 17 30 18 
1e491     00 BF F7 FD 
1e495     04 EB FF 10 | 	byte	$1f, $20, $00, $04, $e8, $17, $30, $18, $00, $bf, $f7, $fd, $04, $eb, $ff, $10
1e499     17 2A 10 E8 
1e49d     F7 10 E8 FF 
1e4a1     17 00 CA DF 
1e4a5     0C E0 F7 0F | 	byte	$17, $2a, $10, $e8, $f7, $10, $e8, $ff, $17, $00, $ca, $df, $0c, $e0, $f7, $0f
1e4a9     1D 10 0F 2A 
1e4ad     20 1B 2D 30 
1e4b1     22 22 24 04 
1e4b5     13 04 12 04 | 	byte	$1d, $10, $0f, $2a, $20, $1b, $2d, $30, $22, $22, $24, $04, $13, $04, $12, $04
1e4b9     EC E4 DF DD 
1e4bd     FF 10 FF 00 
1e4c1     E1 FF 10 F1 
1e4c5     2F 40 00 FF | 	byte	$ec, $e4, $df, $dd, $ff, $10, $ff, $00, $e1, $ff, $10, $f1, $2f, $40, $00, $ff
1e4c9     10 07 10 0A 
1e4cd     FD 17 10 F4 
1e4d1     D9 FF 00 FF 
1e4d5     20 00 F7 00 | 	byte	$10, $07, $10, $0a, $fd, $17, $10, $f4, $d9, $ff, $00, $ff, $20, $00, $f7, $00
1e4d9     FB 20 E8 E7 
1e4dd     1F 20 13 27 
1e4e1     28 0C 1F 4A 
1e4e5     20 1B 2D 10 | 	byte	$fb, $20, $e8, $e7, $1f, $20, $13, $27, $28, $0c, $1f, $4a, $20, $1b, $2d, $10
1e4e9     1F 00 FF 20 
1e4ed     FE F8 FF 20 
1e4f1     F0 DF 0F 2B 
1e4f5     28 00 FB F8 | 	byte	$1f, $00, $ff, $20, $fe, $f8, $ff, $20, $f0, $df, $0f, $2b, $28, $00, $fb, $f8
1e4f9     FB 00 F5 1F 
1e4fd     10 DF 17 00 
1e501     E7 FE F3 0F 
1e505     0C 04 F3 14 | 	byte	$fb, $00, $f5, $1f, $10, $df, $17, $00, $e7, $fe, $f3, $0f, $0c, $04, $f3, $14
1e509     05 0D 0C F4 
1e50d     E7 FF 00 F7 
1e511     FC F5 F2 EA 
1e515     EF 1B 10 FF | 	byte	$05, $0d, $0c, $f4, $e7, $ff, $00, $f7, $fc, $f5, $f2, $ea, $ef, $1b, $10, $ff
1e519     14 17 33 28 
1e51d     03 2F 20 1F 
1e521     2E 20 08 00 
1e525     F9 F0 E3 0B | 	byte	$14, $17, $33, $28, $03, $2f, $20, $1f, $2e, $20, $08, $00, $f9, $f0, $e3, $0b
1e529     00 17 12 1E 
1e52d     E8 DB 0F 1F 
1e531     10 EF 0B 00 
1e535     EB FF 08 FB | 	byte	$00, $17, $12, $1e, $e8, $db, $0f, $1f, $10, $ef, $0b, $00, $eb, $ff, $08, $fb
1e539     1F 20 F0 DF 
1e53d     17 10 F0 D3 
1e541     FF 07 04 E1 
1e545     ED 15 00 D0 | 	byte	$1f, $20, $f0, $df, $17, $10, $f0, $d3, $ff, $07, $04, $e1, $ed, $15, $00, $d0
1e549     DF FF EC FF 
1e54d     20 00 F8 D7 
1e551     FF 03 17 04 
1e555     F4 EA E0 E7 | 	byte	$df, $ff, $ec, $ff, $20, $00, $f8, $d7, $ff, $03, $17, $04, $f4, $ea, $e0, $e7
1e559     04 0B 00 FB 
1e55d     F0 FB E0 EF 
1e561     08 00 F4 F3 
1e565     05 F4 F9 F2 | 	byte	$04, $0b, $00, $fb, $f0, $fb, $e0, $ef, $08, $00, $f4, $f3, $05, $f4, $f9, $f2
1e569     F7 16 00 EB 
1e56d     F0 E3 EB FF 
1e571     F0 C8 DB EF 
1e575     0F 08 EC FF | 	byte	$f7, $16, $00, $eb, $f0, $e3, $eb, $ff, $f0, $c8, $db, $ef, $0f, $08, $ec, $ff
1e579     20 E4 DC BB 
1e57d     DF FA E9 E7 
1e581     FB 00 E0 EB 
1e585     FB F3 0B 10 | 	byte	$20, $e4, $dc, $bb, $df, $fa, $e9, $e7, $fb, $00, $e0, $eb, $fb, $f3, $0b, $10
1e589     08 0F 30 00 
1e58d     F8 E9 FE 0F 
1e591     08 DD FB E8 
1e595     C1 E7 F8 D4 | 	byte	$08, $0f, $30, $00, $f8, $e9, $fe, $0f, $08, $dd, $fb, $e8, $c1, $e7, $f8, $d4
1e599     CF EF F0 C4 
1e59d     CF ED FB 06 
1e5a1     E0 DF F3 1F 
1e5a5     10 CD EF 10 | 	byte	$cf, $ef, $f0, $c4, $cf, $ed, $fb, $06, $e0, $df, $f3, $1f, $10, $cd, $ef, $10
1e5a9     03 F8 F7 00 
1e5ad     F8 FB 0F 08 
1e5b1     F3 F2 FF 16 
1e5b5     1A 0E 14 00 | 	byte	$03, $f8, $f7, $00, $f8, $fb, $0f, $08, $f3, $f2, $ff, $16, $1a, $0e, $14, $00
1e5b9     E8 EB F5 FF 
1e5bd     16 08 F8 E4 
1e5c1     FD E8 DB FF 
1e5c5     00 EC F7 F0 | 	byte	$e8, $eb, $f5, $ff, $16, $08, $f8, $e4, $fd, $e8, $db, $ff, $00, $ec, $f7, $f0
1e5c9     E3 F0 E0 D0 
1e5cd     F7 14 E8 F7 
1e5d1     00 EF 11 04 
1e5d5     FF 18 F0 E7 | 	byte	$e3, $f0, $e0, $d0, $f7, $14, $e8, $f7, $00, $ef, $11, $04, $ff, $18, $f0, $e7
1e5d9     12 00 F2 FD 
1e5dd     0B 00 E8 D7 
1e5e1     FF 10 F3 FF 
1e5e5     07 00 FA 13 | 	byte	$12, $00, $f2, $fd, $0b, $00, $e8, $d7, $ff, $10, $f3, $ff, $07, $00, $fa, $13
1e5e9     00 FB 12 00 
1e5ed     FF 14 E8 FF 
1e5f1     08 FF 12 00 
1e5f5     17 38 00 0B | 	byte	$00, $fb, $12, $00, $ff, $14, $e8, $ff, $08, $ff, $12, $00, $17, $38, $00, $0b
1e5f9     22 1B 28 1D 
1e5fd     12 0B 04 05 
1e601     0E 00 06 07 
1e605     00 DB FF E0 | 	byte	$22, $1b, $28, $1d, $12, $0b, $04, $05, $0e, $00, $06, $07, $00, $db, $ff, $e0
1e609     EF 1C 00 F0 
1e60d     D7 FF 10 F5 
1e611     FF 1A 16 04 
1e615     00 07 23 18 | 	byte	$ef, $1c, $00, $f0, $d7, $ff, $10, $f5, $ff, $1a, $16, $04, $00, $07, $23, $18
1e619     27 28 F0 F7 
1e61d     2F 20 15 22 
1e621     10 00 F5 F7 
1e625     04 E8 FB 00 | 	byte	$27, $28, $f0, $f7, $2f, $20, $15, $22, $10, $00, $f5, $f7, $04, $e8, $fb, $00
1e629     D7 F7 14 E8 
1e62d     DF FF 08 E8 
1e631     EF 14 E8 E7 
1e635     08 FF 04 FB | 	byte	$d7, $f7, $14, $e8, $df, $ff, $08, $e8, $ef, $14, $e8, $e7, $08, $ff, $04, $fb
1e639     15 00 EF FF 
1e63d     17 12 12 1B 
1e641     20 F4 17 14 
1e645     FB 1D 14 14 | 	byte	$15, $00, $ef, $ff, $17, $12, $12, $1b, $20, $f4, $17, $14, $fb, $1d, $14, $14
1e649     2F 28 00 03 
1e64d     0D 13 21 08 
1e651     FB 0E 13 18 
1e655     04 17 18 0D | 	byte	$2f, $28, $00, $03, $0d, $13, $21, $08, $fb, $0e, $13, $18, $04, $17, $18, $0d
1e659     1E 18 02 07 
1e65d     14 0B 0A 0B 
1e661     27 20 00 06 
1e665     F2 FF 15 12 | 	byte	$1e, $18, $02, $07, $14, $0b, $0a, $0b, $27, $20, $00, $06, $f2, $ff, $15, $12
1e669     00 F4 FF 20 
1e66d     F0 FF 10 F7 
1e671     12 F0 DF 08 
1e675     EB 27 20 0D | 	byte	$00, $f4, $ff, $20, $f0, $ff, $10, $f7, $12, $f0, $df, $08, $eb, $27, $20, $0d
1e679     0F 24 00 F3 
1e67d     FF 07 10 00 
1e681     F3 02 FF 04 
1e685     F0 FF 18 EB | 	byte	$0f, $24, $00, $f3, $ff, $07, $10, $00, $f3, $02, $ff, $04, $f0, $ff, $18, $eb
1e689     FD 0A F0 E7 
1e68d     17 00 EF F4 
1e691     D9 FF 00 E8 
1e695     FF 00 D5 E0 | 	byte	$fd, $0a, $f0, $e7, $17, $00, $ef, $f4, $d9, $ff, $00, $e8, $ff, $00, $d5, $e0
1e699     D3 FF F0 D7 
1e69d     FF 08 F8 DA 
1e6a1     EF 07 1E 00 
1e6a5     D1 EF 2F 18 | 	byte	$d3, $ff, $f0, $d7, $ff, $08, $f8, $da, $ef, $07, $1e, $00, $d1, $ef, $2f, $18
1e6a9     FB 17 10 13 
1e6ad     10 07 08 0E 
1e6b1     17 08 E8 E7 
1e6b5     0F 10 F7 07 | 	byte	$fb, $17, $10, $13, $10, $07, $08, $0e, $17, $08, $e8, $e7, $0f, $10, $f7, $07
1e6b9     00 F3 E8 DB 
1e6bd     FF E4 FF 18 
1e6c1     E8 DE DC E9 
1e6c5     EB FF 08 E0 | 	byte	$00, $f3, $e8, $db, $ff, $e4, $ff, $18, $e8, $de, $dc, $e9, $eb, $ff, $08, $e0
1e6c9     FF F0 DF 17 
1e6cd     00 F8 FB 1F 
1e6d1     10 F0 FB 00 
1e6d5     E7 FF 00 F3 | 	byte	$ff, $f0, $df, $17, $00, $f8, $fb, $1f, $10, $f0, $fb, $00, $e7, $ff, $00, $f3
1e6d9     F8 EB F0 DE 
1e6dd     ED EC EA E8 
1e6e1     EF EB F7 18 
1e6e5     E8 EF 2D 10 | 	byte	$f8, $eb, $f0, $de, $ed, $ec, $ea, $e8, $ef, $eb, $f7, $18, $e8, $ef, $2d, $10
1e6e9     13 00 FB 10 
1e6ed     F6 F9 FF 08 
1e6f1     E0 D3 FF 00 
1e6f5     DB F2 ED 0F | 	byte	$13, $00, $fb, $10, $f6, $f9, $ff, $08, $e0, $d3, $ff, $00, $db, $f2, $ed, $0f
1e6f9     14 E0 EF 0A 
1e6fd     F5 FF 04 E0 
1e701     F7 0D 07 25 
1e705     00 DF 15 00 | 	byte	$14, $e0, $ef, $0a, $f5, $ff, $04, $e0, $f7, $0d, $07, $25, $00, $df, $15, $00
1e709     E7 FB 0E 0C 
1e70d     0F 22 00 F7 
1e711     08 02 05 08 
1e715     03 00 F7 FA | 	byte	$e7, $fb, $0e, $0c, $0f, $22, $00, $f7, $08, $02, $05, $08, $03, $00, $f7, $fa
1e719     F7 0E F9 07 
1e71d     08 FC F8 0B 
1e721     00 F3 0D 0C 
1e725     F0 E5 FB F6 | 	byte	$f7, $0e, $f9, $07, $08, $fc, $f8, $0b, $00, $f3, $0d, $0c, $f0, $e5, $fb, $f6
1e729     FC F0 D7 EB 
1e72d     F7 0B F4 EF 
1e731     FE 00 EC F3 
1e735     04 03 00 EF | 	byte	$fc, $f0, $d7, $eb, $f7, $0b, $f4, $ef, $fe, $00, $ec, $f3, $04, $03, $00, $ef
1e739     02 FF F0 DB 
1e73d     FF 00 F8 FB 
1e741     04 F5 0F 04 
1e745     FF F8 07 0B | 	byte	$02, $ff, $f0, $db, $ff, $00, $f8, $fb, $04, $f5, $0f, $04, $ff, $f8, $07, $0b
1e749     18 00 E8 EF 
1e74d     0A 00 03 F8 
1e751     EF 0F 24 00 
1e755     EF 04 FF 1F | 	byte	$18, $00, $e8, $ef, $0a, $00, $03, $f8, $ef, $0f, $24, $00, $ef, $04, $ff, $1f
1e759     20 08 FF 0A 
1e75d     F8 EB FF 20 
1e761     00 EF 10 EC 
1e765     EB 0F 10 00 | 	byte	$20, $08, $ff, $0a, $f8, $eb, $ff, $20, $00, $ef, $10, $ec, $eb, $0f, $10, $00
1e769     E8 FF 18 02 
1e76d     F4 F5 FB 12 
1e771     04 F8 F0 EF 
1e775     1B 04 E0 FF | 	byte	$e8, $ff, $18, $02, $f4, $f5, $fb, $12, $04, $f8, $f0, $ef, $1b, $04, $e0, $ff
1e779     20 00 EF 1F 
1e77d     10 FB 00 FF 
1e781     10 00 FF 18 
1e785     E8 EF 1F 10 | 	byte	$20, $00, $ef, $1f, $10, $fb, $00, $ff, $10, $00, $ff, $18, $e8, $ef, $1f, $10
1e789     FF 09 06 0F 
1e78d     20 01 0F 00 
1e791     0F 04 F2 ED 
1e795     FF 12 0A FB | 	byte	$ff, $09, $06, $0f, $20, $01, $0f, $00, $0f, $04, $f2, $ed, $ff, $12, $0a, $fb
1e799     19 00 D7 FF 
1e79d     17 1A 10 F0 
1e7a1     D7 1F 24 00 
1e7a5     04 05 00 07 | 	byte	$19, $00, $d7, $ff, $17, $1a, $10, $f0, $d7, $1f, $24, $00, $04, $05, $00, $07
1e7a9     04 0F 08 FD 
1e7ad     0B 10 02 1B 
1e7b1     10 0F 1C 00 
1e7b5     0B 10 00 FB | 	byte	$04, $0f, $08, $fd, $0b, $10, $02, $1b, $10, $0f, $1c, $00, $0b, $10, $00, $fb
1e7b9     13 10 00 0B 
1e7bd     10 ED FF 0B 
1e7c1     15 00 EB FC 
1e7c5     EF FF 02 0A | 	byte	$13, $10, $00, $0b, $10, $ed, $ff, $0b, $15, $00, $eb, $fc, $ef, $ff, $02, $0a
1e7c9     00 FD 00 E5 
1e7cd     FF 00 E4 FF 
1e7d1     10 F6 F6 FF 
1e7d5     0A 17 20 12 | 	byte	$00, $fd, $00, $e5, $ff, $00, $e4, $ff, $10, $f6, $f6, $ff, $0a, $17, $20, $12
1e7d9     04 0C 04 FB 
1e7dd     0C FB 0F 14 
1e7e1     10 F4 F7 08 
1e7e5     F8 EE FF 10 | 	byte	$04, $0c, $04, $fb, $0c, $fb, $0f, $14, $10, $f4, $f7, $08, $f8, $ee, $ff, $10
1e7e9     FF 0A E8 F5 
1e7ed     F8 F7 F0 FF 
1e7f1     00 F7 04 F7 
1e7f5     F4 F7 06 00 | 	byte	$ff, $0a, $e8, $f5, $f8, $f7, $f0, $ff, $00, $f7, $04, $f7, $f4, $f7, $06, $00
1e7f9     FB 02 0B 11 
1e7fd     0C 06 0B 14 
1e801     F8 FF 10 00 
1e805     FE 0F 24 04 | 	byte	$fb, $02, $0b, $11, $0c, $06, $0b, $14, $f8, $ff, $10, $00, $fe, $0f, $24, $04
1e809     FF 03 0D 04 
1e80d     F6 FF FA FD 
1e811     00 E5 EF FF 
1e815     FC FF 00 D5 | 	byte	$ff, $03, $0d, $04, $f6, $ff, $fa, $fd, $00, $e5, $ef, $ff, $fc, $ff, $00, $d5
1e819     FD F0 EF FA 
1e81d     01 07 16 00 
1e821     F3 FE FF 04 
1e825     F4 0F 10 E2 | 	byte	$fd, $f0, $ef, $fa, $01, $07, $16, $00, $f3, $fe, $ff, $04, $f4, $0f, $10, $e2
1e829     EF FF 00 F7 
1e82d     13 18 08 0D 
1e831     08 F5 07 10 
1e835     00 FF 0F 04 | 	byte	$ef, $ff, $00, $f7, $13, $18, $08, $0d, $08, $f5, $07, $10, $00, $ff, $0f, $04
1e839     F0 FF 0C FA 
1e83d     F6 FF 0C 04 
1e841     07 21 10 0A 
1e845     12 04 0B 11 | 	byte	$f0, $ff, $0c, $fa, $f6, $ff, $0c, $04, $07, $21, $10, $0a, $12, $04, $0b, $11
1e849     0C F8 FF 08 
1e84d     FF 0C F0 F7 
1e851     FC FB 06 F4 
1e855     E8 E3 EC E4 | 	byte	$0c, $f8, $ff, $08, $ff, $0c, $f0, $f7, $fc, $fb, $06, $f4, $e8, $e3, $ec, $e4
1e859     FD E8 F7 00 
1e85d     E5 E9 F7 F0 
1e861     E7 0A 00 F0 
1e865     F7 0A 00 F0 | 	byte	$fd, $e8, $f7, $00, $e5, $e9, $f7, $f0, $e7, $0a, $00, $f0, $f7, $0a, $00, $f0
1e869     FF 2B 10 03 
1e86d     17 08 FF 0D 
1e871     10 04 EE FF 
1e875     0F 14 00 FE | 	byte	$ff, $2b, $10, $03, $17, $08, $ff, $0d, $10, $04, $ee, $ff, $0f, $14, $00, $fe
1e879     09 06 00 F3 
1e87d     FB 0F 10 E9 
1e881     F7 F0 ED F5 
1e885     02 F0 F7 0A | 	byte	$09, $06, $00, $f3, $fb, $0f, $10, $e9, $f7, $f0, $ed, $f5, $02, $f0, $f7, $0a
1e889     00 FC F0 F7 
1e88d     15 16 08 EC 
1e891     FF 04 FE FF 
1e895     0B 08 F0 E9 | 	byte	$00, $fc, $f0, $f7, $15, $16, $08, $ec, $ff, $04, $fe, $ff, $0b, $08, $f0, $e9
1e899     F5 F2 F3 F8 
1e89d     FD 04 EB EB 
1e8a1     FB 04 FC E8 
1e8a5     EF 02 F0 F5 | 	byte	$f5, $f2, $f3, $f8, $fd, $04, $eb, $eb, $fb, $04, $fc, $e8, $ef, $02, $f0, $f5
1e8a9     F0 FF 00 F7 
1e8ad     FA 06 02 07 
1e8b1     02 06 0E 0E 
1e8b5     08 06 08 00 | 	byte	$f0, $ff, $00, $f7, $fa, $06, $02, $07, $02, $06, $0e, $0e, $08, $06, $08, $00
1e8b9     0A 08 FC FA 
1e8bd     FF 00 E0 F7 
1e8c1     08 F6 FB F4 
1e8c5     F5 00 EB FF | 	byte	$0a, $08, $fc, $fa, $ff, $00, $e0, $f7, $08, $f6, $fb, $f4, $f5, $00, $eb, $ff
1e8c9     F8 FA FB 07 
1e8cd     04 EA FD 08 
1e8d1     02 08 0D 08 
1e8d5     FE FB 0B 2A | 	byte	$f8, $fa, $fb, $07, $04, $ea, $fd, $08, $02, $08, $0d, $08, $fe, $fb, $0b, $2a
1e8d9     08 FF 04 0F 
1e8dd     18 00 0C F1 
1e8e1     FB F4 FF 0A 
1e8e5     F8 E6 E1 EF | 	byte	$08, $ff, $04, $0f, $18, $00, $0c, $f1, $fb, $f4, $ff, $0a, $f8, $e6, $e1, $ef
1e8e9     F0 EF F0 D4 
1e8ed     E7 F2 F0 EF 
1e8f1     F4 ED F9 F8 
1e8f5     F2 F7 0A 08 | 	byte	$f0, $ef, $f0, $d4, $e7, $f2, $f0, $ef, $f4, $ed, $f9, $f8, $f2, $f7, $0a, $08
1e8f9     02 FF 04 06 
1e8fd     02 FF 1A 10 
1e901     09 1A 12 04 
1e905     03 15 1C 07 | 	byte	$02, $ff, $04, $06, $02, $ff, $1a, $10, $09, $1a, $12, $04, $03, $15, $1c, $07
1e909     1F 00 FF 08 
1e90d     01 0F 04 F9 
1e911     05 00 FB F2 
1e915     E3 FB 0C 04 | 	byte	$1f, $00, $ff, $08, $01, $0f, $04, $f9, $05, $00, $fb, $f2, $e3, $fb, $0c, $04
1e919     EA FF 10 04 
1e91d     EC FF 18 15 
1e921     1A 16 10 09 
1e925     0F 10 00 ED | 	byte	$ea, $ff, $10, $04, $ec, $ff, $18, $15, $1a, $16, $10, $09, $0f, $10, $00, $ed
1e929     FF 14 00 EE 
1e92d     E7 FB FE F4 
1e931     E5 FF 06 06 
1e935     F0 EF EA EF | 	byte	$ff, $14, $00, $ee, $e7, $fb, $fe, $f4, $e5, $ff, $06, $06, $f0, $ef, $ea, $ef
1e939     08 F8 0F 10 
1e93d     F0 FF 00 FF 
1e941     1E 10 FF 13 
1e945     0C 17 20 0D | 	byte	$08, $f8, $0f, $10, $f0, $ff, $00, $ff, $1e, $10, $ff, $13, $0c, $17, $20, $0d
1e949     1A 00 13 10 
1e94d     0C 02 02 00 
1e951     F9 0A F0 EF 
1e955     04 00 F4 F9 | 	byte	$1a, $00, $13, $10, $0c, $02, $02, $00, $f9, $0a, $f0, $ef, $04, $00, $f4, $f9
1e959     FF 00 E4 F3 
1e95d     00 F7 07 13 
1e961     14 00 05 02 
1e965     0F 23 20 F2 | 	byte	$ff, $00, $e4, $f3, $00, $f7, $07, $13, $14, $00, $05, $02, $0f, $23, $20, $f2
1e969     0D 11 0D 04 
1e96d     FF 08 F8 FF 
1e971     0A 00 FB F8 
1e975     ED FF 0D 08 | 	byte	$0d, $11, $0d, $04, $ff, $08, $f8, $ff, $0a, $00, $fb, $f8, $ed, $ff, $0d, $08
1e979     0F 04 FB 06 
1e97d     00 F3 FF 0C 
1e981     00 09 F2 EF 
1e985     0D F4 EE FF | 	byte	$0f, $04, $fb, $06, $00, $f3, $ff, $0c, $00, $09, $f2, $ef, $0d, $f4, $ee, $ff
1e989     14 00 02 00 
1e98d     FD 07 12 10 
1e991     0A 0C 04 0F 
1e995     17 20 19 14 | 	byte	$14, $00, $02, $00, $fd, $07, $12, $10, $0a, $0c, $04, $0f, $17, $20, $19, $14
1e999     00 FF 0F 10 
1e99d     0C FC FF 00 
1e9a1     F9 FF 08 00 
1e9a5     E5 F5 FA F0 | 	byte	$00, $ff, $0f, $10, $0c, $fc, $ff, $00, $f9, $ff, $08, $00, $e5, $f5, $fa, $f0
1e9a9     DD EF F0 EF 
1e9ad     08 F0 F7 F0 
1e9b1     EF 06 09 05 
1e9b5     07 08 F4 FF | 	byte	$dd, $ef, $f0, $ef, $08, $f0, $f7, $f0, $ef, $06, $09, $05, $07, $08, $f4, $ff
1e9b9     F8 F5 01 FF 
1e9bd     14 00 ED ED 
1e9c1     EE F5 F4 EA 
1e9c5     FB 00 E1 FF | 	byte	$f8, $f5, $01, $ff, $14, $00, $ed, $ed, $ee, $f5, $f4, $ea, $fb, $00, $e1, $ff
1e9c9     F0 EB FC EF 
1e9cd     F8 E0 FF 10 
1e9d1     F0 ED 0B 1C 
1e9d5     00 FF 14 04 | 	byte	$f0, $eb, $fc, $ef, $f8, $e0, $ff, $10, $f0, $ed, $0b, $1c, $00, $ff, $14, $04
1e9d9     13 18 FD 0A 
1e9dd     F8 0B 10 02 
1e9e1     F4 F6 FB FA 
1e9e5     F7 FD F9 FF | 	byte	$13, $18, $fd, $0a, $f8, $0b, $10, $02, $f4, $f6, $fb, $fa, $f7, $fd, $f9, $ff
1e9e9     04 FA FF 04 
1e9ed     F8 EF 0D 10 
1e9f1     04 F0 0F 08 
1e9f5     F3 FF F2 FF | 	byte	$04, $fa, $ff, $04, $f8, $ef, $0d, $10, $04, $f0, $0f, $08, $f3, $ff, $f2, $ff
1e9f9     00 FF F0 F7 
1e9fd     F4 EF 17 0C 
1ea01     07 16 00 FB 
1ea05     13 08 02 FC | 	byte	$00, $ff, $f0, $f7, $f4, $ef, $17, $0c, $07, $16, $00, $fb, $13, $08, $02, $fc
1ea09     0B 18 F0 EF 
1ea0d     ED EF FF F2 
1ea11     F1 F6 F0 EA 
1ea15     EA E2 F7 F6 | 	byte	$0b, $18, $f0, $ef, $ed, $ef, $ff, $f2, $f1, $f6, $f0, $ea, $ea, $e2, $f7, $f6
1ea19     F1 FE E4 EF 
1ea1d     10 00 F3 FF 
1ea21     08 FA FD FF 
1ea25     17 10 02 05 | 	byte	$f1, $fe, $e4, $ef, $10, $00, $f3, $ff, $08, $fa, $fd, $ff, $17, $10, $02, $05
1ea29     00 F9 F0 FF 
1ea2d     18 00 FF 0C 
1ea31     E8 F5 F8 F7 
1ea35     F4 FB F8 F7 | 	byte	$00, $f9, $f0, $ff, $18, $00, $ff, $0c, $e8, $f5, $f8, $f7, $f4, $fb, $f8, $f7
1ea39     0E F0 F7 12 
1ea3d     02 03 0F 18 
1ea41     FD 23 10 05 
1ea45     0C 0A 0C 02 | 	byte	$0e, $f0, $f7, $12, $02, $03, $0f, $18, $fd, $23, $10, $05, $0c, $0a, $0c, $02
1ea49     F2 FD 14 00 
1ea4d     F3 FD F7 F8 
1ea51     EB FF F8 FB 
1ea55     EC FF 08 E4 | 	byte	$f2, $fd, $14, $00, $f3, $fd, $f7, $f8, $eb, $ff, $f8, $fb, $ec, $ff, $08, $e4
1ea59     FB 14 04 0F 
1ea5d     10 F9 17 20 
1ea61     10 12 09 27 
1ea65     10 FF 18 00 | 	byte	$fb, $14, $04, $0f, $10, $f9, $17, $20, $10, $12, $09, $27, $10, $ff, $18, $00
1ea69     F7 05 15 08 
1ea6d     E9 F2 F7 01 
1ea71     F0 ED FF 04 
1ea75     00 00 0D 00 | 	byte	$f7, $05, $15, $08, $e9, $f2, $f7, $01, $f0, $ed, $ff, $04, $00, $00, $0d, $00
1ea79     E7 FF 10 F0 
1ea7d     F5 03 F8 E9 
1ea81     FF 00 ED F3 
1ea85     F3 FF 13 04 | 	byte	$e7, $ff, $10, $f0, $f5, $03, $f8, $e9, $ff, $00, $ed, $f3, $f3, $ff, $13, $04
1ea89     EF FF 10 00 
1ea8d     07 14 00 FB 
1ea91     00 07 10 00 
1ea95     13 10 F0 0B | 	byte	$ef, $ff, $10, $00, $07, $14, $00, $fb, $00, $07, $10, $00, $13, $10, $f0, $0b
1ea99     14 1A 00 FF 
1ea9d     0D 10 F8 FE 
1eaa1     FE FF 08 00 
1eaa5     F5 07 00 FD | 	byte	$14, $1a, $00, $ff, $0d, $10, $f8, $fe, $fe, $ff, $08, $00, $f5, $07, $00, $fd
1eaa9     F9 0F 14 04 
1eaad     00 FF 26 08 
1eab1     FF 2D 20 FC 
1eab5     0A 12 08 F5 | 	byte	$f9, $0f, $14, $04, $00, $ff, $26, $08, $ff, $2d, $20, $fc, $0a, $12, $08, $f5
1eab9     F8 F7 F0 EB 
1eabd     00 EA F9 E0 
1eac1     D7 F3 F8 F0 
1eac5     F7 FF 0A 00 | 	byte	$f8, $f7, $f0, $eb, $00, $ea, $f9, $e0, $d7, $f3, $f8, $f0, $f7, $ff, $0a, $00
1eac9     FF 16 10 0D 
1eacd     14 0B 0A 01 
1ead1     11 10 0D 08 
1ead5     00 FE 0B 0A | 	byte	$ff, $16, $10, $0d, $14, $0b, $0a, $01, $11, $10, $0d, $08, $00, $fe, $0b, $0a
1ead9     F9 FB 00 ED 
1eadd     EF F3 07 08 
1eae1     02 07 08 F3 
1eae5     0B 00 FF 15 | 	byte	$f9, $fb, $00, $ed, $ef, $f3, $07, $08, $02, $07, $08, $f3, $0b, $00, $ff, $15
1eae9     04 FF 10 F0 
1eaed     F5 06 0A F8 
1eaf1     EF 0D 08 FB 
1eaf5     FA E7 FF 14 | 	byte	$04, $ff, $10, $f0, $f5, $06, $0a, $f8, $ef, $0d, $08, $fb, $fa, $e7, $ff, $14
1eaf9     03 08 F8 FF 
1eafd     04 F7 0B 14 
1eb01     08 EA F7 1C 
1eb05     00 EB FF 00 | 	byte	$03, $08, $f8, $ff, $04, $f7, $0b, $14, $08, $ea, $f7, $1c, $00, $eb, $ff, $00
1eb09     F8 F6 F7 FC 
1eb0d     F2 F5 F8 E0 
1eb11     DF EA E4 E0 
1eb15     EF F4 D8 D7 | 	byte	$f8, $f6, $f7, $fc, $f2, $f5, $f8, $e0, $df, $ea, $e4, $e0, $ef, $f4, $d8, $d7
1eb19     FD 08 F0 FB 
1eb1d     00 03 0F 16 
1eb21     08 07 1B 20 
1eb25     08 0F 14 08 | 	byte	$fd, $08, $f0, $fb, $00, $03, $0f, $16, $08, $07, $1b, $20, $08, $0f, $14, $08
1eb29     12 04 0D 0C 
1eb2d     E8 EF 04 EA 
1eb31     EF FE F8 EF 
1eb35     F9 FB FE 05 | 	byte	$12, $04, $0d, $0c, $e8, $ef, $04, $ea, $ef, $fe, $f8, $ef, $f9, $fb, $fe, $05
1eb39     04 F7 0F 00 
1eb3d     FD 05 0D 13 
1eb41     06 00 F1 FF 
1eb45     00 FC F8 F0 | 	byte	$04, $f7, $0f, $00, $fd, $05, $0d, $13, $06, $00, $f1, $ff, $00, $fc, $f8, $f0
1eb49     EF FF FC F3 
1eb4d     FE FC F6 FF 
1eb51     00 07 00 F9 
1eb55     F7 05 00 FD | 	byte	$ef, $ff, $fc, $f3, $fe, $fc, $f6, $ff, $00, $07, $00, $f9, $f7, $05, $00, $fd
1eb59     09 04 EE FF 
1eb5d     00 FB 07 03 
1eb61     00 F6 FD FA 
1eb65     E8 EB FD 0D | 	byte	$09, $04, $ee, $ff, $00, $fb, $07, $03, $00, $f6, $fd, $fa, $e8, $eb, $fd, $0d
1eb69     00 E9 F5 07 
1eb6d     00 EF 0F 00 
1eb71     FA 01 FD FF 
1eb75     0D 0B 15 08 | 	byte	$00, $e9, $f5, $07, $00, $ef, $0f, $00, $fa, $01, $fd, $ff, $0d, $0b, $15, $08
1eb79     0D 0D 08 00 
1eb7d     F7 0B 10 F0 
1eb81     E7 FC F1 FF 
1eb85     04 F0 EF FF | 	byte	$0d, $0d, $08, $00, $f7, $0b, $10, $f0, $e7, $fc, $f1, $ff, $04, $f0, $ef, $ff
1eb89     01 09 01 0F 
1eb8d     18 07 1D 18 
1eb91     08 0F 1A 14 
1eb95     1F 28 08 07 | 	byte	$01, $09, $01, $0f, $18, $07, $1d, $18, $08, $0f, $1a, $14, $1f, $28, $08, $07
1eb99     0C 00 F4 0F 
1eb9d     04 EB FD E4 
1eba1     DF F7 F8 EA 
1eba5     E8 E6 F3 0D | 	byte	$0c, $00, $f4, $0f, $04, $eb, $fd, $e4, $df, $f7, $f8, $ea, $e8, $e6, $f3, $0d
1eba9     FA FF F8 FF 
1ebad     0C 04 08 F0 
1ebb1     FF 0C 00 F6 
1ebb5     FF 04 FA F8 | 	byte	$fa, $ff, $f8, $ff, $0c, $04, $08, $f0, $ff, $0c, $00, $f6, $ff, $04, $fa, $f8
1ebb9     FC F6 F6 F7 
1ebbd     05 0E 00 FB 
1ebc1     12 10 0C 02 
1ebc5     04 00 F7 FE | 	byte	$fc, $f6, $f6, $f7, $05, $0e, $00, $fb, $12, $10, $0c, $02, $04, $00, $f7, $fe
1ebc9     08 04 00 F2 
1ebcd     FF 08 02 00 
1ebd1     FF 18 00 FE 
1ebd5     FD 04 FA FF | 	byte	$08, $04, $00, $f2, $ff, $08, $02, $00, $ff, $18, $00, $fe, $fd, $04, $fa, $ff
1ebd9     05 00 F0 F3 
1ebdd     F6 F7 07 12 
1ebe1     00 E5 FF 10 
1ebe5     05 17 14 09 | 	byte	$05, $00, $f0, $f3, $f6, $f7, $07, $12, $00, $e5, $ff, $10, $05, $17, $14, $09
1ebe9     01 FA FF 00 
1ebed     FB 09 04 04 
1ebf1     F8 EA EB EF 
1ebf5     13 08 ED 0F | 	byte	$01, $fa, $ff, $00, $fb, $09, $04, $04, $f8, $ea, $eb, $ef, $13, $08, $ed, $0f
1ebf9     08 F2 FF 16 
1ebfd     0E 0C 02 0B 
1ec01     0C 08 06 08 
1ec05     03 0B 0A F0 | 	byte	$08, $f2, $ff, $16, $0e, $0c, $02, $0b, $0c, $08, $06, $08, $03, $0b, $0a, $f0
1ec09     F9 F4 F1 F1 
1ec0d     FF EC E4 E2 
1ec11     EB F2 E9 EC 
1ec15     F1 FB 02 F9 | 	byte	$f9, $f4, $f1, $f1, $ff, $ec, $e4, $e2, $eb, $f2, $e9, $ec, $f1, $fb, $02, $f9
1ec19     F4 FF 1B 10 
1ec1d     00 0F 18 01 
1ec21     0F 04 05 12 
1ec25     06 06 F8 FF | 	byte	$f4, $ff, $1b, $10, $00, $0f, $18, $01, $0f, $04, $05, $12, $06, $06, $f8, $ff
1ec29     00 EC F3 F8 
1ec2d     EB F7 08 00 
1ec31     F7 F2 F3 02 
1ec35     F5 FF FC F8 | 	byte	$00, $ec, $f3, $f8, $eb, $f7, $08, $00, $f7, $f2, $f3, $02, $f5, $ff, $fc, $f8
1ec39     FF 06 00 FD 
1ec3d     00 FF 12 08 
1ec41     F9 15 0A FA 
1ec45     FF 0B 08 F4 | 	byte	$ff, $06, $00, $fd, $00, $ff, $12, $08, $f9, $15, $0a, $fa, $ff, $0b, $08, $f4
1ec49     FF 08 E9 F3 
1ec4d     FA F7 F6 F2 
1ec51     F2 FD 0C F0 
1ec55     E7 FF 09 00 | 	byte	$ff, $08, $e9, $f3, $fa, $f7, $f6, $f2, $f2, $fd, $0c, $f0, $e7, $ff, $09, $00
1ec59     F6 FB FD 0B 
1ec5d     08 FD F9 F7 
1ec61     02 F0 F7 04 
1ec65     F4 FE 00 FC | 	byte	$f6, $fb, $fd, $0b, $08, $fd, $f9, $f7, $02, $f0, $f7, $04, $f4, $fe, $00, $fc
1ec69     FF 02 09 08 
1ec6d     0D 10 F0 FF 
1ec71     14 02 0F 10 
1ec75     FA FF 08 F8 | 	byte	$ff, $02, $09, $08, $0d, $10, $f0, $ff, $14, $02, $0f, $10, $fa, $ff, $08, $f8
1ec79     FF 00 F1 F6 
1ec7d     EF FF 00 E8 
1ec81     F7 04 ED FF 
1ec85     02 02 01 0B | 	byte	$ff, $00, $f1, $f6, $ef, $ff, $00, $e8, $f7, $04, $ed, $ff, $02, $02, $01, $0b
1ec89     14 02 02 09 
1ec8d     0C 08 0F 10 
1ec91     F4 F1 F7 0F 
1ec95     08 F2 FF FD | 	byte	$14, $02, $02, $09, $0c, $08, $0f, $10, $f4, $f1, $f7, $0f, $08, $f2, $ff, $fd
1ec99     F6 F6 FF 00 
1ec9d     F7 09 00 F9 
1eca1     FD 02 00 F6 
1eca5     F7 F8 FF 14 | 	byte	$f6, $f6, $ff, $00, $f7, $09, $00, $f9, $fd, $02, $00, $f6, $f7, $f8, $ff, $14
1eca9     00 FF 06 00 
1ecad     FF 11 00 FF 
1ecb1     0D 00 FF 15 
1ecb5     04 F7 00 F7 | 	byte	$00, $ff, $06, $00, $ff, $11, $00, $ff, $0d, $00, $ff, $15, $04, $f7, $00, $f7
1ecb9     FD FA FF 00 
1ecbd     F9 FF FC 05 
1ecc1     08 0A 00 FF 
1ecc5     07 0A 00 0F | 	byte	$fd, $fa, $ff, $00, $f9, $ff, $fc, $05, $08, $0a, $00, $ff, $07, $0a, $00, $0f
1ecc9     0C 09 09 0C 
1eccd     04 FF 04 FB 
1ecd1     08 00 F8 F2 
1ecd5     FE F8 E9 F7 | 	byte	$0c, $09, $09, $0c, $04, $ff, $04, $fb, $08, $00, $f8, $f2, $fe, $f8, $e9, $f7
1ecd9     FD F0 E9 EB 
1ecdd     FF 00 FB 00 
1ece1     FF 0E 00 FF 
1ece5     0C 00 FB 03 | 	byte	$fd, $f0, $e9, $eb, $ff, $00, $fb, $00, $ff, $0e, $00, $ff, $0c, $00, $fb, $03
1ece9     08 F8 FF 00 
1eced     EA EF 05 00 
1ecf1     EF FB F6 FB 
1ecf5     FF 09 06 0A | 	byte	$08, $f8, $ff, $00, $ea, $ef, $05, $00, $ef, $fb, $f6, $fb, $ff, $09, $06, $0a
1ecf9     08 07 02 FE 
1ecfd     05 04 00 FB 
1ed01     FC EC F5 F5 
1ed05     FF 00 F6 F9 | 	byte	$08, $07, $02, $fe, $05, $04, $00, $fb, $fc, $ec, $f5, $f5, $ff, $00, $f6, $f9
1ed09     F7 FF 08 FA 
1ed0d     F1 0B 0A 00 
1ed11     FC F1 FF 00 
1ed15     F5 FF 10 00 | 	byte	$f7, $ff, $08, $fa, $f1, $0b, $0a, $00, $fc, $f1, $ff, $00, $f5, $ff, $10, $00
1ed19     F7 05 05 0B 
1ed1d     00 FF 16 08 
1ed21     01 06 00 F8 
1ed25     F3 FD 0F 10 | 	byte	$f7, $05, $05, $0b, $00, $ff, $16, $08, $01, $06, $00, $f8, $f3, $fd, $0f, $10
1ed29     00 F7 0B 08 
1ed2d     05 09 12 08 
1ed31     09 0C 05 04 
1ed35     05 0B 0D 08 | 	byte	$00, $f7, $0b, $08, $05, $09, $12, $08, $09, $0c, $05, $04, $05, $0b, $0d, $08
1ed39     05 09 00 F5 
1ed3d     FB 05 F4 F5 
1ed41     04 00 F4 F4 
1ed45     F1 FB E2    | 	byte	$05, $09, $00, $f5, $fb, $05, $f4, $f5, $04, $00, $f4, $f4, $f1, $fb, $e2
1ed48                 | 	alignl
1ed48                 | _hng030rm_spin2_dat_
1ed48     00 00 00 00 
1ed4c     00 00 00 00 
1ed50     00 00 00 00 
1ed54     00 00 00 00 
1ed58     00 00 00    | vga_font       file "vgafont.def"
1ed5b     7E 81 A5 81 
1ed5f     81 BD 99 81 
1ed63     81 7E 00 00 
1ed67     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
1ed6b     7E FF DB FF 
1ed6f     FF C3 E7 FF 
1ed73     FF 7E 00 00 
1ed77     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
1ed7b     00 36 7F 7F 
1ed7f     7F 7F 3E 1C 
1ed83     08 00 00 00 
1ed87     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
1ed8b     00 08 1C 3E 
1ed8f     7F 3E 1C 08 
1ed93     00 00 00 00 
1ed97     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
1ed9b     18 3C 3C E7 
1ed9f     E7 E7 18 18 
1eda3     3C 00 00 00 
1eda7     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1edab     18 3C 7E FF 
1edaf     FF 7E 18 18 
1edb3     3C 00 00 00 
1edb7     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1edbb     00 00 00 18 
1edbf     3C 3C 18 00 
1edc3     00 00 00 00 
1edc7     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
1edcb     FF FF FF E7 
1edcf     C3 C3 E7 FF 
1edd3     FF FF FF FF 
1edd7     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1eddb     00 00 3C 66 
1eddf     42 42 66 3C 
1ede3     00 00 00 00 
1ede7     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
1edeb     FF FF C3 99 
1edef     BD BD 99 C3 
1edf3     FF FF FF FF 
1edf7     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1edfb     78 70 58 4C 
1edff     1E 33 33 33 
1ee03     33 1E 00 00 
1ee07     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
1ee0b     3C 66 66 66 
1ee0f     66 3C 18 7E 
1ee13     18 18 00 00 
1ee17     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
1ee1b     FC CC FC 0C 
1ee1f     0C 0C 0C 0E 
1ee23     0F 07 00 00 
1ee27     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
1ee2b     FE C6 FE C6 
1ee2f     C6 C6 C6 E6 
1ee33     E7 67 03 00 
1ee37     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
1ee3b     18 18 DB 3C 
1ee3f     E7 3C DB 18 
1ee43     18 00 00 00 
1ee47     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
1ee4b     03 07 0F 1F 
1ee4f     7F 1F 0F 07 
1ee53     03 01 00 00 
1ee57     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
1ee5b     60 70 78 7C 
1ee5f     7F 7C 78 70 
1ee63     60 40 00 00 
1ee67     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
1ee6b     18 3C 7E 18 
1ee6f     18 18 7E 3C 
1ee73     18 00 00 00 
1ee77     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
1ee7b     66 66 66 66 
1ee7f     66 66 66    | 	byte	$66[7]
1ee82     00 66 66 00 
1ee86     00 00 00 00 
1ee8a     00 FE DB DB 
1ee8e     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
1ee92     D8 D8 D8 00 
1ee96     00 00 00 3E 
1ee9a     63 06 1C 36 
1ee9e     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
1eea2     30 63 3E 00 
1eea6     00 00 00 00 
1eeaa     00 00 00 00 
1eeae     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1eeb2     7F 7F 7F 00 
1eeb6     00 00 00 00 
1eeba     00 18 3C 7E 
1eebe     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
1eec2     3C 18 7E 00 
1eec6     00 00 00 00 
1eeca     00 18 3C 7E 
1eece     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
1eed2     18 18 18 00 
1eed6     00 00 00 00 
1eeda     00 18 18 18 
1eede     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1eee2     7E 3C 18 00 
1eee6     00 00 00 00 
1eeea     00 00 00 18 
1eeee     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1eef2     00 00 00 00 
1eef6     00 00 00 00 
1eefa     00 00 00    | 	byte	$00[11]
1eefd     0C 06 7F 06 
1ef01     0C 00 00 00 
1ef05     00 00 00 00 
1ef09     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef0d     00 03 03 03 
1ef11     7F 00 00 00 
1ef15     00 00 00 00 
1ef19     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef1d     14 36 7F 36 
1ef21     14 00 00 00 
1ef25     00 00 00 00 
1ef29     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
1ef2d     1C 1C 3E 3E 
1ef31     7F 7F 00 00 
1ef35     00 00 00 00 
1ef39     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1ef3d     7F 3E 3E 1C 
1ef41     1C 08 00 00 
1ef45     00 00 00 00 
1ef49     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef4d     00 00 00 00 
1ef51     00 00 00 00 
1ef55     00 00 00 00 
1ef59     00 00       | 	byte	$00[14]
1ef5b     18 3C 3C 3C 
1ef5f     18 18 18 00 
1ef63     18 18 00 00 
1ef67     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
1ef6b     66 24 00 00 
1ef6f     00 00 00 00 
1ef73     00 00 00 00 
1ef77     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef7b     00 36 36 7F 
1ef7f     36 36 36 7F 
1ef83     36 36 00 00 
1ef87     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
1ef8b     3E 63 43 03 
1ef8f     3E 60 60 61 
1ef93     63 3E 18 18 
1ef97     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
1ef9b     00 00 43 63 
1ef9f     30 18 0C 06 
1efa3     63 61 00 00 
1efa7     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
1efab     1C 36 36 1C 
1efaf     6E 3B 33 33 
1efb3     33 6E 00 00 
1efb7     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
1efbb     0C 0C 0C 06 
1efbf     00 00 00 00 
1efc3     00 00 00 00 
1efc7     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1efcb     30 18 0C 0C 
1efcf     0C 0C 0C 0C 
1efd3     18 30 00 00 
1efd7     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
1efdb     0C 18 30 30 
1efdf     30 30 30 30 
1efe3     18 0C 00 00 
1efe7     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
1efeb     00 00 00 66 
1efef     3C FF 3C 66 
1eff3     00 00 00 00 
1eff7     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
1effb     00 00 00 18 
1efff     18 7E 18 18 
1f003     00 00 00 00 
1f007     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
1f00b     00 00 00 00 
1f00f     00 00 00 00 | 	byte	$00[8]
1f013     18 18 18 0C 
1f017     00 00 00 00 
1f01b     00 00 00 00 
1f01f     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1f023     00 00 00 00 
1f027     00 00 00 00 
1f02b     00 00 00 00 
1f02f     00 00 00 00 | 	byte	$00[16]
1f033     18 18 00 00 
1f037     00 00 00 00 
1f03b     00 00 40 60 
1f03f     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
1f043     03 01 00 00 
1f047     00 00 00 00 
1f04b     1C 36 63 63 
1f04f     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
1f053     36 1C 00 00 
1f057     00 00 00 00 
1f05b     18 1C 1E 18 
1f05f     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
1f063     18 7E 00 00 
1f067     00 00 00 00 
1f06b     3E 63 60 30 
1f06f     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
1f073     63 7F 00 00 
1f077     00 00 00 00 
1f07b     3E 63 60 60 
1f07f     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
1f083     63 3E 00 00 
1f087     00 00 00 00 
1f08b     30 38 3C 36 
1f08f     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
1f093     30 78 00 00 
1f097     00 00 00 00 
1f09b     7F 03 03 03 
1f09f     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
1f0a3     63 3E 00 00 
1f0a7     00 00 00 00 
1f0ab     1C 06 03 03 
1f0af     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
1f0b3     63 3E 00 00 
1f0b7     00 00 00 00 
1f0bb     7F 63 60 60 
1f0bf     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
1f0c3     0C 0C 00 00 
1f0c7     00 00 00 00 
1f0cb     3E 63 63 63 
1f0cf     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
1f0d3     63 3E 00 00 
1f0d7     00 00 00 00 
1f0db     3E 63 63 63 
1f0df     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1f0e3     30 1E 00 00 
1f0e7     00 00 00 00 
1f0eb     00 00 00 18 
1f0ef     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1f0f3     18 18 00 00 
1f0f7     00 00 00 00 
1f0fb     00 00 00 18 
1f0ff     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1f103     18 18 0C 00 
1f107     00 00 00 00 
1f10b     00 60 30 18 
1f10f     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1f113     30 60 00 00 
1f117     00 00 00 00 
1f11b     00 00 00 7E 
1f11f     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1f123     00 00 00 00 
1f127     00 00 00 00 
1f12b     00          | 	byte	$00[9]
1f12c     06 0C 18 30 
1f130     60 30 18 0C 
1f134     06 00 00 00 
1f138     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
1f13c     63 63 30 18 
1f140     18 18 00 18 
1f144     18 00 00 00 
1f148     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
1f14c     3E 63 63 7B 
1f150     7B 7B 3B 03 
1f154     3E 00 00 00 
1f158     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
1f15c     1C 36 63 63 
1f160     7F 63 63 63 
1f164     63 00 00 00 
1f168     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
1f16c     66 66 66 3E 
1f170     66 66 66 66 
1f174     3F 00 00 00 
1f178     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
1f17c     66 43 03 03 
1f180     03 03 43 66 
1f184     3C 00 00 00 
1f188     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
1f18c     36 66 66 66 
1f190     66 66 66 36 
1f194     1F 00 00 00 
1f198     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
1f19c     66 46 16 1E 
1f1a0     16 06 46 66 
1f1a4     7F 00 00 00 
1f1a8     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
1f1ac     66 46 16 1E 
1f1b0     16 06 06 06 
1f1b4     0F 00 00 00 
1f1b8     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
1f1bc     66 43 03 03 
1f1c0     7B 63 63 66 
1f1c4     5C 00 00 00 
1f1c8     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
1f1cc     63 63 63 7F 
1f1d0     63 63 63 63 
1f1d4     63 00 00 00 
1f1d8     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
1f1dc     18 18 18 18 
1f1e0     18 18 18 18 | 	byte	$18[8]
1f1e4     3C 00 00 00 
1f1e8     00 00 00 78 
1f1ec     30 30 30 30 
1f1f0     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1f1f4     1E 00 00 00 
1f1f8     00 00 00 67 
1f1fc     66 66 36 1E 
1f200     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1f204     67 00 00 00 
1f208     00 00 00 0F 
1f20c     06 06 06 06 
1f210     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1f214     7F 00 00 00 
1f218     00 00 00 63 
1f21c     77 7F 7F 6B 
1f220     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
1f224     63 00 00 00 
1f228     00 00 00 63 
1f22c     67 6F 7F 7B 
1f230     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
1f234     63 00 00 00 
1f238     00 00 00 3E 
1f23c     63 63 63 63 
1f240     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1f244     3E 00 00 00 
1f248     00 00 00 3F 
1f24c     66 66 66 3E 
1f250     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
1f254     0F 00 00 00 
1f258     00 00 00 3E 
1f25c     63 63 63 63 
1f260     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
1f264     3E 30 70 00 
1f268     00 00 00 3F 
1f26c     66 66 66 3E 
1f270     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
1f274     67 00 00 00 
1f278     00 00 00 3E 
1f27c     63 63 06 1C 
1f280     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1f284     3E 00 00 00 
1f288     00 00 00 7E 
1f28c     7E 5A 18 18 
1f290     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1f294     3C 00 00 00 
1f298     00 00 00 63 
1f29c     63 63 63 63 
1f2a0     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1f2a4     3E 00 00 00 
1f2a8     00 00 00 63 
1f2ac     63 63 63 63 
1f2b0     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
1f2b4     08 00 00 00 
1f2b8     00 00 00 63 
1f2bc     63 63 63 6B 
1f2c0     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
1f2c4     36 00 00 00 
1f2c8     00 00 00 63 
1f2cc     63 36 3E 1C 
1f2d0     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
1f2d4     63 00 00 00 
1f2d8     00 00 00 66 
1f2dc     66 66 66 3C 
1f2e0     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1f2e4     3C 00 00 00 
1f2e8     00 00 00 7F 
1f2ec     63 61 30 18 
1f2f0     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1f2f4     7F 00 00 00 
1f2f8     00 00 00 3C 
1f2fc     0C 0C 0C 0C 
1f300     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1f304     3C 00 00 00 
1f308     00 00 00 00 
1f30c     01 03 07 0E 
1f310     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
1f314     40 00 00 00 
1f318     00 00 00 3C 
1f31c     30 30 30 30 
1f320     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
1f324     3C 00 00 00 
1f328     1C 36 00 00 
1f32c     00 00 00 00 
1f330     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f334     00 00 00 00 
1f338     00 00 00 00 
1f33c     00 00 00 00 
1f340     00 00 00 00 
1f344     00          | 	byte	$00[17]
1f345     FF 00 00 0C 
1f349     18 00 00 00 
1f34d     00 00 00 00 
1f351     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f355     00 00 00 00 
1f359     00 00 00 00 
1f35d     00          | 	byte	$00[9]
1f35e     1E 30 3E 33 
1f362     33 33 6E 00 
1f366     00 00 00 00 
1f36a     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
1f36e     1E 36 66 66 
1f372     66 66 3E 00 
1f376     00 00 00 00 
1f37a     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f37e     3E 63 03 03 
1f382     03 63 3E 00 
1f386     00 00 00 00 
1f38a     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
1f38e     3C 36 33 33 
1f392     33 33 6E 00 
1f396     00 00 00 00 
1f39a     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f39e     3E 63 7F 03 
1f3a2     03 63 3E 00 
1f3a6     00 00 00 00 
1f3aa     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
1f3ae     0C 1E 0C 0C 
1f3b2     0C 0C 1E 00 
1f3b6     00 00 00 00 
1f3ba     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f3be     6E 33 33 33 
1f3c2     33 33 3E 30 
1f3c6     33 1E 00 00 
1f3ca     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
1f3ce     36 6E 66 66 
1f3d2     66 66 67 00 
1f3d6     00 00 00 00 
1f3da     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
1f3de     1C 18 18 18 
1f3e2     18 18 3C 00 
1f3e6     00 00 00 00 
1f3ea     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
1f3ee     70 60 60 60 
1f3f2     60 60 60 66 
1f3f6     66 3C 00 00 
1f3fa     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
1f3fe     66 36 1E 1E 
1f402     36 66 67 00 
1f406     00 00 00 00 
1f40a     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
1f40e     18 18 18 18 
1f412     18 18       | 	byte	$18[6]
1f414     3C 00 00 00 
1f418     00 00 00 00 
1f41c     00 00 37 7F 
1f420     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
1f424     63 00 00 00 
1f428     00 00 00 00 
1f42c     00 00 3B 66 
1f430     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1f434     66 00 00 00 
1f438     00 00 00 00 
1f43c     00 00 3E 63 
1f440     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
1f444     3E 00 00 00 
1f448     00 00 00 00 
1f44c     00 00 3B 66 
1f450     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1f454     3E 06 06 0F 
1f458     00 00 00 00 
1f45c     00 00 6E 33 
1f460     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
1f464     3E 30 30 78 
1f468     00 00 00 00 
1f46c     00 00 3B 6E 
1f470     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
1f474     0F 00 00 00 
1f478     00 00 00 00 
1f47c     00 00 3E 63 
1f480     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
1f484     3E 00 00 00 
1f488     00 00 00 08 
1f48c     0C 0C 3F 0C 
1f490     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1f494     38 00 00 00 
1f498     00 00 00 00 
1f49c     00 00 33 33 
1f4a0     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
1f4a4     6E 00 00 00 
1f4a8     00 00 00 00 
1f4ac     00 00 63 63 
1f4b0     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
1f4b4     1C 00 00 00 
1f4b8     00 00 00 00 
1f4bc     00 00 63 63 
1f4c0     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
1f4c4     36 00 00 00 
1f4c8     00 00 00 00 
1f4cc     00 00 63 36 
1f4d0     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
1f4d4     63 00 00 00 
1f4d8     00 00 00 00 
1f4dc     00 00 63 63 
1f4e0     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1f4e4     7E 60 30 1F 
1f4e8     00 00 00 00 
1f4ec     00 00 7F 33 
1f4f0     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1f4f4     7F 00 00 00 
1f4f8     00 00 00 70 
1f4fc     18 18 18 0E 
1f500     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1f504     70 00 00 00 
1f508     00 00 00 18 
1f50c     18 18 18 18 
1f510     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f514     18 00 00 00 
1f518     00 00 00 0E 
1f51c     18 18 18 70 
1f520     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
1f524     0E 00 00 00 
1f528     6E 3B 00 00 
1f52c     00 00 00 00 
1f530     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f534     00 00 00 00 
1f538     00 00 00 00 
1f53c     00 00       | 	byte	$00[10]
1f53e     08 1C 36 63 
1f542     63 63 7F 00 
1f546     00 00 00 00 
1f54a     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
1f54e     03 03 03 03 
1f552     43 66 3C 18 
1f556     30 1E 00 00 
1f55a     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
1f55e     33 33 33 33 
1f562     33 33       | 	byte	$33[6]
1f564     6E 00 00 00 
1f568     00 00 60 30 
1f56c     18 00 3E 63 
1f570     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
1f574     3E 00 00 00 
1f578     00 00 08 1C 
1f57c     36 00 1E 30 
1f580     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
1f584     6E 00 00 00 
1f588     00 00 00 00 
1f58c     33 00 1E 30 
1f590     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
1f594     6E 00 00 00 
1f598     00 00 1C 36 
1f59c     1C 00 33 33 
1f5a0     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
1f5a4     6E 00 00 00 
1f5a8     00 00 60 30 
1f5ac     18 00 3E 63 
1f5b0     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
1f5b4     3E 00 00 00 
1f5b8     00 00 00 00 
1f5bc     00 00 3E 63 
1f5c0     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
1f5c4     3E 18 30 1E 
1f5c8     00 00 00 1C 
1f5cc     58 78 38 18 
1f5d0     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
1f5d4     3C 00 00 00 
1f5d8     00 00 00 00 
1f5dc     63 00 3E 63 
1f5e0     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1f5e4     3E 00 00 00 
1f5e8     66 33 00 3E 
1f5ec     63 63 63 63 
1f5f0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1f5f4     3E 00 00 00 
1f5f8     00 00 CC 66 
1f5fc     33 00 3E 63 
1f600     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1f604     3E 00 00 00 
1f608     00 00 18 3C 
1f60c     66 00 1C 18 
1f610     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
1f614     3C 00 00 00 
1f618     30 18 00 7F 
1f61c     63 61 30 18 
1f620     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1f624     7F 00 00 00 
1f628     00 63 00 08 
1f62c     1C 36 63 63 
1f630     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
1f634     63 00 00 00 
1f638     30 18 00 3C 
1f63c     66 43 03 03 
1f640     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
1f644     3C 00 00 00 
1f648     30 18 00 7F 
1f64c     66 46 16 1E 
1f650     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
1f654     7F 00 00 00 
1f658     0C 06 00 0F 
1f65c     06 06 06 06 
1f660     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1f664     7F 00 00 00 
1f668     30 18 00 1C 
1f66c     18 18 18 18 
1f670     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
1f674     3C 00 00 00 
1f678     00 00 08 1C 
1f67c     36 00 3E 63 
1f680     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
1f684     3E 00 00 00 
1f688     00 00 00 00 
1f68c     63 00 3E 63 
1f690     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
1f694     3E 00 00 00 
1f698     00 00 00 6F 
1f69c     46 26 06 06 
1f6a0     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
1f6a4     7F 00 00 00 
1f6a8     00 00 00 6E 
1f6ac     4C 2C 0C 0C 
1f6b0     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
1f6b4     1E 00 00 00 
1f6b8     30 18 00 3E 
1f6bc     63 63 06 1C 
1f6c0     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1f6c4     3E 00 00 00 
1f6c8     00 00 60 30 
1f6cc     18 00 3E 63 
1f6d0     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
1f6d4     3E 00 00 00 
1f6d8     00 63 00 3E 
1f6dc     63 63 63 63 
1f6e0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1f6e4     3E 00 00 00 
1f6e8     00 63 00 63 
1f6ec     63 63 63 63 
1f6f0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1f6f4     3E 00 00 00 
1f6f8     6C 38 00 7E 
1f6fc     7E 5A 18 18 
1f700     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1f704     3C 00 00 00 
1f708     00 00 60 48 
1f70c     2C 0C 3F 0C 
1f710     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1f714     38 00 00 00 
1f718     00 00 00 0F 
1f71c     26 36 1E 0E 
1f720     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
1f724     7F 00 00 00 
1f728     00 00 00 00 
1f72c     00 63 36 1C 
1f730     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
1f734     00 00 00 00 
1f738     00 00       | 	byte	$00[6]
1f73a     36 1C 08 00 
1f73e     3E 63 03 03 
1f742     03 63 3E 00 
1f746     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
1f74a     30 18 0C 00 
1f74e     1E 30 3E 33 
1f752     33 33 6E 00 
1f756     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1f75a     60 30 18 00 
1f75e     1C 18 18 18 
1f762     18 18 3C 00 
1f766     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
1f76a     60 30 18 00 
1f76e     3E 63 63 63 
1f772     63 63 3E 00 
1f776     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
1f77a     30 18 0C 00 
1f77e     33 33 33 33 
1f782     33 33 6E 00 
1f786     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1f78a     00 08 1C 36 
1f78e     63 63 7F 63 
1f792     63 63 63 18 
1f796     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
1f79a     00 00 00 00 
1f79e     1E 30 3E 33 
1f7a2     33 33 6E 18 
1f7a6     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
1f7aa     00 7F 63 61 
1f7ae     30 18 0C 06 
1f7b2     43 63 7F 00 
1f7b6     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
1f7ba     36 1C 08 00 
1f7be     7F 33 18 0C 
1f7c2     06 63 7F 00 
1f7c6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
1f7ca     00 7F 66 46 
1f7ce     16 1E 16 06 
1f7d2     46 66 7F 18 
1f7d6     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
1f7da     00 00 00 00 
1f7de     3E 63 7F 03 
1f7e2     03 63 3E 18 
1f7e6     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
1f7ea     00 3C 66 03 
1f7ee     1F 03 0F 03 
1f7f2     03 66 3C 00 
1f7f6     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
1f7fa     60 30 18 00 
1f7fe     7F 33 18 0C 
1f802     06 63 7F 00 
1f806     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
1f80a     00 3C 66 43 
1f80e     03 03 03 03 
1f812     43 66 3C 00 
1f816     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
1f81a     00 00 00 00 
1f81e     3E 63 06 1C 
1f822     30 63 3E 18 
1f826     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
1f82a     00 00 00 00 
1f82e     00 00       | 	byte	$00[6]
1f830     6C 36 1B 36 
1f834     6C 00 00 00 
1f838     00 00 00 00 
1f83c     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f840     1B 36 6C 36 
1f844     1B 00 00 00 
1f848     88 22 88 22 
1f84c     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
1f850     88 22 88 22 
1f854     88 22 88 22 
1f858     AA 55 AA 55 
1f85c     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
1f860     AA 55 AA 55 
1f864     AA 55 AA 55 
1f868     BB EE BB EE 
1f86c     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
1f870     BB EE BB EE 
1f874     BB EE BB EE 
1f878     18 18 18 18 
1f87c     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
1f880     18 18 18 18 
1f884     18 18 18 18 
1f888     18 18 18 18 
1f88c     18 18 18    | 	byte	$18[15]
1f88f     1F 18 18 18 
1f893     18 18 18 18 
1f897     18 30 18 00 
1f89b     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1f89f     63 7F 63 63 
1f8a3     63 63 00 00 
1f8a7     00 1C 36 00 
1f8ab     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
1f8af     63 7F 63 63 
1f8b3     63 63 00 00 
1f8b7     00 36 1C 00 
1f8bb     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
1f8bf     1E 16 06 46 
1f8c3     66 7F 00 00 
1f8c7     00 00 00 00 
1f8cb     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
1f8cf     1C 30 60 63 
1f8d3     63 3E 18 30 
1f8d7     1E 6C 6C 6C 
1f8db     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
1f8df     6F 6C 6C 6C 
1f8e3     6C 6C 6C 6C 
1f8e7     6C 6C 6C 6C 
1f8eb     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f8ef     6C 6C 6C 6C 
1f8f3     6C 6C 6C 6C 
1f8f7     6C          | 	byte	$6c[9]
1f8f8     00 00 00 00 
1f8fc     00          | 	byte	$00[5]
1f8fd     7F 60 6F 6C 
1f901     6C 6C 6C 6C 
1f905     6C 6C 6C 6C 
1f909     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f90d     6F 60 7F 00 
1f911     00 00 00 00 
1f915     00 00 00 18 
1f919     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
1f91d     61 30 18 0C 
1f921     06 43 63 7F 
1f925     00 00 00 00 
1f929     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
1f92d     00 7F 33 18 
1f931     0C 06 63 7F 
1f935     00 00 00 00 
1f939     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
1f93d     00 00 1F 18 
1f941     18 18 18 18 
1f945     18 18 18 18 
1f949     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f94d     18 18 F8 00 
1f951     00 00 00 00 
1f955     00 00 00 18 
1f959     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1f95d     18 18 FF 00 
1f961     00 00 00 00 
1f965     00 00 00 00 
1f969     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f96d     00 00 FF 18 
1f971     18 18 18 18 
1f975     18 18 18 18 
1f979     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f97d     18 18 F8 18 
1f981     18 18 18 18 
1f985     18 18 18 00 
1f989     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1f98d     00 00 FF 00 
1f991     00 00 00 00 
1f995     00 00 00 18 
1f999     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1f99d     18 18 FF 18 
1f9a1     18 18 18 18 
1f9a5     18 18 18 63 
1f9a9     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
1f9ad     36 63 63 7F 
1f9b1     63 63 63 63 
1f9b5     00 00 00 00 
1f9b9     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
1f9bd     00 1E 30 3E 
1f9c1     33 33 33 6E 
1f9c5     00 00 00 6C 
1f9c9     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1f9cd     EC 0C FC 00 
1f9d1     00 00 00 00 
1f9d5     00 00 00 00 
1f9d9     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f9dd     FC 0C EC 6C 
1f9e1     6C 6C 6C 6C 
1f9e5     6C 6C 6C 6C 
1f9e9     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f9ed     EF 00 FF 00 
1f9f1     00 00 00 00 
1f9f5     00 00 00 00 
1f9f9     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f9fd     FF 00 EF 6C 
1fa01     6C 6C 6C 6C 
1fa05     6C 6C 6C 6C 
1fa09     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1fa0d     EC 0C EC 6C 
1fa11     6C 6C 6C 6C 
1fa15     6C 6C 6C 00 
1fa19     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1fa1d     FF 00 FF 00 
1fa21     00 00 00 00 
1fa25     00 00 00 6C 
1fa29     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1fa2d     EF 00 EF 6C 
1fa31     6C 6C 6C 6C 
1fa35     6C 6C 6C 00 
1fa39     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1fa3d     63 3E 63 63 
1fa41     63 63 3E 63 
1fa45     00 00 00 00 
1fa49     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
1fa4d     30 3C 36 33 
1fa51     33 33 33 6E 
1fa55     00 00 00 00 
1fa59     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
1fa5d     66 66 6F 66 
1fa61     66 66 36 1F 
1fa65     00 00 00 36 
1fa69     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
1fa6d     66 66 66 66 
1fa71     66 66       | 	byte	$66[6]
1fa73     36 1F 00 00 
1fa77     00 00 63 00 
1fa7b     7F 66 46 16 
1fa7f     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
1fa83     66 7F 00 00 
1fa87     00 6C 38 00 
1fa8b     38 30 30 3C 
1fa8f     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
1fa93     33 6E 00 00 
1fa97     00 36 1C 00 
1fa9b     63 67 6F 7F 
1fa9f     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
1faa3     63 63 00 00 
1faa7     00 30 18 00 
1faab     3C 18 18 18 
1faaf     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1fab3     18 3C 00 00 
1fab7     00 3C 66 00 
1fabb     3C 18 18 18 
1fabf     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1fac3     18 3C 00 00 
1fac7     00 00 00 36 
1facb     1C 08 00 3E 
1facf     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
1fad3     63 3E 00 00 
1fad7     00 18 18 18 
1fadb     18 18 18 18 
1fadf     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
1fae3     00 00 00 00 
1fae7     00 00 00 00 
1faeb     00 00 00 00 | 	byte	$00[12]
1faef     F8 18 18 18 
1faf3     18 18 18 18 
1faf7     18 FF FF FF 
1fafb     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1faff     FF FF FF FF 
1fb03     FF FF FF FF 
1fb07     FF          | 	byte	$ff[9]
1fb08     00 00 00 00 
1fb0c     00 00 00    | 	byte	$00[7]
1fb0f     FF FF FF FF 
1fb13     FF FF FF FF 
1fb17     FF          | 	byte	$ff[9]
1fb18     00 00 00 7E 
1fb1c     7E 5A 18 18 
1fb20     18 18 18 18 
1fb24     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
1fb28     1C 36 1C 63 
1fb2c     63 63 63 63 
1fb30     63 63 63 63 
1fb34     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1fb38     FF FF FF FF 
1fb3c     FF FF FF    | 	byte	$ff[7]
1fb3f     00 00 00 00 
1fb43     00 00 00 00 
1fb47     00          | 	byte	$00[9]
1fb48     30 18 00 3E 
1fb4c     63 63 63 63 
1fb50     63 63 63 63 
1fb54     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1fb58     00 00 00 1E 
1fb5c     33 33 33 1B 
1fb60     33 63 63 63 
1fb64     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
1fb68     1C 36 00 3E 
1fb6c     63 63 63 63 
1fb70     63 63 63 63 
1fb74     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1fb78     30 18 00 63 
1fb7c     67 6F 7F 7B 
1fb80     73 63 63 63 
1fb84     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
1fb88     00 00 60 30 
1fb8c     18 00 3B 66 
1fb90     66 66 66 66 
1fb94     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1fb98     00 00 36 1C 
1fb9c     08 00 3B 66 
1fba0     66 66 66 66 
1fba4     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1fba8     36 1C 00 3E 
1fbac     63 63 06 1C 
1fbb0     30 60 63 63 
1fbb4     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
1fbb8     00 00 36 1C 
1fbbc     08 00 3E 63 
1fbc0     06 1C 30 63 
1fbc4     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
1fbc8     30 18 00 3F 
1fbcc     66 66 66 3E 
1fbd0     36 66 66 66 
1fbd4     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
1fbd8     30 18 00 63 
1fbdc     63 63 63 63 
1fbe0     63 63 63 63 
1fbe4     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1fbe8     00 00 60 30 
1fbec     18 00 3B 6E 
1fbf0     66 06 06 06 
1fbf4     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
1fbf8     66 33 00 63 
1fbfc     63 63 63 63 
1fc00     63 63 63 63 
1fc04     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1fc08     00 00 60 30 
1fc0c     18 00 63 63 
1fc10     63 63 63 63 
1fc14     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
1fc18     30 18 00 66 
1fc1c     66 66 66 3C 
1fc20     18 18 18 18 
1fc24     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
1fc28     00 00 00 08 
1fc2c     0C 0C 3F 0C 
1fc30     0C 0C 0C 6C 
1fc34     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
1fc38     30 18 00 00 
1fc3c     00 00 00 00 
1fc40     00 00 00 00 
1fc44     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fc48     00 00 00 00 
1fc4c     00 00 00 00 | 	byte	$00[8]
1fc50     7F 00 00 00 
1fc54     00 00 00 00 
1fc58     66 33 00 00 
1fc5c     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
1fc60     00 00 00 00 
1fc64     00 00 00 00 
1fc68     00 00 00 00 
1fc6c     00 00 00 00 
1fc70     00 00 00 00 
1fc74     00          | 	byte	$00[21]
1fc75     0C 06 3C 36 
1fc79     1C 00 00 00 
1fc7d     00 00 00 00 
1fc81     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fc85     00 00 00 63 
1fc89     3E 00 00 00 
1fc8d     00 00 00 00 
1fc91     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fc95     00 00 00 00 
1fc99     3E 63 06 1C 
1fc9d     36 63 63 36 
1fca1     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
1fca5     00 00 00 00 
1fca9     00 00 00 00 | 	byte	$00[8]
1fcad     18 00 7E 00 
1fcb1     18 00 00 00 
1fcb5     00 00 00 00 
1fcb9     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fcbd     00 00 00 00 
1fcc1     00 00 00 00 | 	byte	$00[8]
1fcc5     18 30 1E 00 
1fcc9     00 00 1C 36 
1fccd     36 1C 00 00 
1fcd1     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
1fcd5     00 00 00 00 
1fcd9     63 00 00 00 
1fcdd     00 00 00 00 
1fce1     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fce5     00 00 00 18 
1fce9     18 00 00 00 
1fced     00 00 00 00 
1fcf1     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fcf5     00 00 00 00 
1fcf9     00          | 	byte	$00[5]
1fcfa     CC 66 33 00 
1fcfe     33 33 33 33 
1fd02     33 33 6E 00 
1fd06     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
1fd0a     00 3F 66 66 
1fd0e     66 3E 36 66 
1fd12     66 66 6F 00 
1fd16     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
1fd1a     36 1C 08 00 
1fd1e     3B 6E 66 06 
1fd22     06 06 0F 00 
1fd26     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
1fd2a     00 00 00 7E 
1fd2e     7E 7E 7E 7E 
1fd32     7E 7E 00 00 
1fd36     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
1fd3a     00 00 00 00 
1fd3e     00 00 00 00 
1fd42     00 00 00 00 
1fd46     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fd48     00 00 00 00 
      ...             
1fd78     00 00 00 00 
1fd7c     00 00 00    | st_font        file "st4font.def"
1fd7f     FF FF 00 00 
1fd83     00 00 00 00 
1fd87     00 18 18 18 
1fd8b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1fd8f     18 18 18 18 
1fd93     18 18 18 18 
1fd97     18          | 	byte	$18[9]
1fd98     00 00 00 00 
1fd9c     00 00 00    | 	byte	$00[7]
1fd9f     FF FF 18 18 
1fda3     18 18 18 18 
1fda7     18 18 18 18 
1fdab     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1fdaf     FF FF 00 00 
1fdb3     00 00 00 00 
1fdb7     00 18 18 18 
1fdbb     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1fdbf     1F 1F 18 18 
1fdc3     18 18 18 18 
1fdc7     18 18 18 18 
1fdcb     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1fdcf     F8 F8 18 18 
1fdd3     18 18 18 18 
1fdd7     18 00 00 00 
1fddb     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1fddf     1F 1F 18 18 
1fde3     18 18 18 18 
1fde7     18 00 00 00 
1fdeb     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1fdef     F8 F8 18 18 
1fdf3     18 18 18 18 
1fdf7     18 18 18 18 
1fdfb     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1fdff     1F 1F 00 00 
1fe03     00 00 00 00 
1fe07     00 18 18 18 
1fe0b     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1fe0f     F8 F8 00 00 
1fe13     00 00 00 00 
1fe17     00 18 18 18 
1fe1b     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1fe1f     FF FF 18 18 
1fe23     18 18 18 18 
1fe27     18 00 00 18 
1fe2b     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
1fe2f     66 7E 7E 66 
1fe33     66 66 66 30 
1fe37     18 00 00 7E 
1fe3b     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
1fe3f     3E 06 06 06 
1fe43     06 7E 7E 18 
1fe47     0C 30 18 3C 
1fe4b     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
1fe4f     06 06 06 66 
1fe53     66 7E 3C 00 
1fe57     00 30 18 66 
1fe5b     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
1fe5f     7E 7E 76 76 
1fe63     66 66 66 00 
1fe67     00 30 18 7C 
1fe6b     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
1fe6f     1C 38 70 60 
1fe73     60 7E 3E 00 
1fe77     00 30 18 7E 
1fe7b     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
1fe7f     18 0C 0C 06 
1fe83     06 7E 7E 00 
1fe87     00 18 18 00 
1fe8b     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1fe8f     18 18 0C 0C 
1fe93     06 7E 7E 00 
1fe97     00 30 18 3C 
1fe9b     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1fe9f     66 66 66 66 
1fea3     66          | 	byte	$66[5]
1fea4     7E 3C 00 00 
1fea8     00 00 06 06 
1feac     06 06 16 1E 
1feb0     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1feb4     7E 7E 00 00 
1feb8     00 00 00 00 
1febc     00 3C 7C 60 
1fec0     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1fec4     7E 7C 30 18 
1fec8     00 00 00 00 
1fecc     00 3C 7E 66 
1fed0     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1fed4     7E 7C 18 0C 
1fed8     00 00 30 18 
1fedc     00 3C 3E 06 
1fee0     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1fee4     7E 7C 00 00 
1fee8     00 00 30 18 
1feec     00 3E 7E 66 
1fef0     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1fef4     66 66 00 00 
1fef8     00 00 30 18 
1fefc     00 7C 7E 06 
1ff00     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1ff04     7E 3E 00 00 
1ff08     00 00 30 18 
1ff0c     00 7E 7E 30 
1ff10     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1ff14     7E 7E 00 00 
1ff18     00 00 18 18 
1ff1c     00 7E 7E 30 
1ff20     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1ff24     7E 7E 00 00 
1ff28     00 00 30 18 
1ff2c     00 3C 7E 66 
1ff30     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1ff34     7E 3C 00 00 
1ff38     00 00 1C 1C 
1ff3c     18 18 38 3C 
1ff40     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1ff44     3C 3C 00 00 
1ff48     00 00 00 00 
1ff4c     00 00 00 00 
1ff50     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ff54     00 00 00 00 
1ff58     00 00       | 	byte	$00[6]
1ff5a     18 18 18 18 
1ff5e     18 18 18 18 | 	byte	$18[8]
1ff62     00 00 18 18 
1ff66     00 00 00 00 
1ff6a     66 66 66 66 
1ff6e     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1ff72     00 00 00 00 
1ff76     00 00 00 00 
1ff7a     00          | 	byte	$00[9]
1ff7b     66 66 FF FF 
1ff7f     66 66 FF FF 
1ff83     66 66 00 00 
1ff87     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1ff8b     7C 7E 06 06 
1ff8f     3E 7C 60 60 
1ff93     7E 3E 18 18 
1ff97     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1ff9b     66 30 30 18 
1ff9f     18 0C 0C 66 
1ffa3     66 00 00 00 
1ffa7     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1ffab     66 66 3C 1C 
1ffaf     1C FC FE 66 
1ffb3     66 FE FC 00 
1ffb7     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1ffbb     18 18 18 18 
1ffbf     00 00 00 00 
1ffc3     00 00 00 00 
1ffc7     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1ffcb     18 1C 0C 0C 
1ffcf     0C 0C 0C 0C 
1ffd3     1C 18 30 00 
1ffd7     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1ffdb     18 38 30 30 
1ffdf     30 30 30 30 
1ffe3     38 18 0C 00 
1ffe7     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1ffeb     66 66 3C 3C 
1ffef     FF FF 3C 3C 
1fff3     66 66 00 00 
1fff7     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1fffb     00 18 18 18 
1ffff     7E 7E 18 18 
20003     18 00 00 00 
20007     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2000b     00 00 00 00 
2000f     00 00       | 	byte	$00[6]
20011     18 18 18 18 
20015     18          | 	byte	$18[5]
20016     0C 04 00 00 
2001a     00 00 00 00 
2001e     7E 7E 00 00 
20022     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
20026     00 00 00 00 
2002a     00 00 00 00 
2002e     00 00 00 00 
20032     00          | 	byte	$00[13]
20033     18 18 18 00 
20037     00 00 00 60 
2003b     60 60 30 30 
2003f     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
20043     06 06 06 00 
20047     00 00 00 3C 
2004b     7E 66 66 66 
2004f     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
20053     66 7E 3C 00 
20057     00 00 00 18 
2005b     18 1C 1C 18 
2005f     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
20063     18 7E 7E 00 
20067     00 00 00 3C 
2006b     7E 66 66 30 
2006f     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
20073     0C 7E 7E 00 
20077     00 00 00 7E 
2007b     7E 30 30 18 
2007f     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
20083     66 7E 3C 00 
20087     00 00 00 30 
2008b     30 38 38 3C 
2008f     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
20093     7E 30 30 00 
20097     00 00 00 7E 
2009b     7E 06 06 3E 
2009f     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
200a3     66 7E 3C 00 
200a7     00 00 00 38 
200ab     3C 0E 06 06 
200af     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
200b3     66 7E 3C 00 
200b7     00 00 00 7E 
200bb     7E 60 60 30 
200bf     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
200c3     0C 0C 0C 00 
200c7     00 00 00 3C 
200cb     7E 66 66 3C 
200cf     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
200d3     66 7E 3C 00 
200d7     00 00 00 3C 
200db     7E 66 66 7E 
200df     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
200e3     70 3C 1C 00 
200e7     00 00 00 00 
200eb     00 00 18 18 
200ef     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
200f3     18 18 18 00 
200f7     00 00 00 00 
200fb     00 00 18 18 
200ff     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
20103     18 18 18 0C 
20107     04 00 00 00 
2010b     70 38 1C 0E 
2010f     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
20113     70 00 00 00 
20117     00 00 00 00 
2011b     00 00 7E 7E 
2011f     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
20123     00 00 00 00 
20127     00 00 00 00 | 	byte	$00[8]
2012b     0E 1C 38 70 
2012f     E0 70 38 1C 
20133     0E 00 00 00 
20137     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2013b     7E 66 66 30 
2013f     30 18 18 18 
20143     00 18 18 00 
20147     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2014b     7E 66 66 66 
2014f     66 36 06 66 
20153     66 7E 3C 00 
20157     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2015b     3C 7E 66 66 
2015f     66 7E 7E 66 
20163     66 66 66 00 
20167     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2016b     7E 66 66 7E 
2016f     3E 66 66 66 
20173     66 7E 3E 00 
20177     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2017b     7E 66 66 06 
2017f     06 06 06 66 
20183     66 7E 3C 00 
20187     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2018b     7E 66 66 66 
2018f     66 66 66 66 
20193     66 7E 3E 00 
20197     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2019b     7E 06 06 3E 
2019f     3E 06 06 06 
201a3     06 7E 7E 00 
201a7     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
201ab     7E 06 06 3E 
201af     3E 06 06 06 
201b3     06 06 06 00 
201b7     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
201bb     7E 06 06 76 
201bf     76 66 66 66 
201c3     66 7E 3C 00 
201c7     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
201cb     66 66 66 7E 
201cf     7E 66 66 66 
201d3     66 66 66 00 
201d7     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
201db     7E 18 18 18 
201df     18 18 18 18 
201e3     18 7E 7E 00 
201e7     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
201eb     60 60 60 60 
201ef     60 60 60    | 	byte	$60[7]
201f2     66 66 7E 3C 
201f6     00 00 00 00 
201fa     66 66 36 36 
201fe     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
20202     66 66 C6 C6 
20206     00 00 00 00 
2020a     06 06 06 06 
2020e     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
20212     06 06 7E 7E 
20216     00 00 00 00 
2021a     C6 C6 EE EE 
2021e     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
20222     C6 C6 C6 C6 
20226     00 00 00 00 
2022a     66 66 66 6E 
2022e     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
20232     76 66 66 66 
20236     00 00 00 00 
2023a     3C 7E 66 66 
2023e     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
20242     66 66 7E 3C 
20246     00 00 00 00 
2024a     3E 7E 66 66 
2024e     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
20252     06 06 06 06 
20256     00 00 00 00 
2025a     3C 7E 66 66 
2025e     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
20262     66 56 3E 6C 
20266     00 00 00 00 
2026a     3E 7E 66 66 
2026e     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
20272     66 66 C6 C6 
20276     00 00 00 00 
2027a     7C 7E 06 06 
2027e     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
20282     60 60 7E 3E 
20286     00 00 00 00 
2028a     7E 7E 18 18 
2028e     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
20292     18 18 18 18 
20296     00 00 00 00 
2029a     66 66 66 66 
2029e     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
202a2     66 66 7E 3C 
202a6     00 00 00 00 
202aa     66 66 66 66 
202ae     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
202b2     3C 3C 18 18 
202b6     00 00 00 00 
202ba     C6 C6 C6 C6 
202be     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
202c2     FE EE C6 82 
202c6     00 00 00 00 
202ca     66 66 66 3C 
202ce     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
202d2     3C 66 66 66 
202d6     00 00 00 00 
202da     66 66 66 66 
202de     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
202e2     18 18 18 18 
202e6     00 00 00 00 
202ea     7E 7E 30 30 
202ee     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
202f2     06 06 7E 7E 
202f6     00 00 00 00 
202fa     3C 3C 0C 0C 
202fe     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
20302     0C 0C 3C 3C 
20306     00 00 00 00 
2030a     06 06 0C 0C 
2030e     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
20312     60 60 C0 C0 
20316     00 00 00 00 
2031a     3C 3C 30 30 
2031e     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
20322     30 30 3C 3C 
20326     00 00 00 00 
2032a     18 18 3C 3C 
2032e     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
20332     00 00 00 00 
20336     00 00 00 00 
2033a     00 00 00 00 
2033e     00 00 00 00 
20342     00 00       | 	byte	$00[18]
20344     FE FE 00 00 
20348     00 00 0C 0C 
2034c     18 18 00 00 
20350     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
20354     00 00 00 00 
20358     00 00 00 00 
2035c     00          | 	byte	$00[9]
2035d     3C 7C 60 7C 
20361     7E 66 66 7E 
20365     7C 00 00 00 
20369     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2036d     3E 7E 66 66 
20371     66 66 66 7E 
20375     3E 00 00 00 
20379     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2037d     3C 3E 06 06 
20381     06 06 06 7E 
20385     7C 00 00 00 
20389     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2038d     7C 7E 66 66 
20391     66 66 66 7E 
20395     7C 00 00 00 
20399     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2039d     3C 7E 66 66 
203a1     7E 06 06 7E 
203a5     7C 00 00 00 
203a9     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
203ad     18 7E 7E 18 
203b1     18 18 18 18 
203b5     18 00 00 00 
203b9     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
203bd     7C 7E 66 66 
203c1     66 66 7E 7C 
203c5     60 7E 3E 00 
203c9     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
203cd     3E 7E 66 66 
203d1     66 66 66 66 
203d5     66 00 00 00 
203d9     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
203dd     1C 1C 18 18 
203e1     18 18 18 3C 
203e5     3C 00 00 00 
203e9     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
203ed     30 30 30 30 
203f1     30 30 30 30 
203f5     30          | 	byte	$30[9]
203f6     3E 1E 00 00 
203fa     06 06 06 36 
203fe     36 1E 1E 1E 
20402     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
20406     00 00 00 00 
2040a     1C 1C 18 18 
2040e     18 18 18 18 
20412     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
20416     00 00 00 00 
2041a     00 00 00    | 	byte	$00[7]
2041d     6C FE FE D6 
20421     D6 C6 C6 C6 
20425     C6 00 00 00 
20429     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2042d     3E 7E 66 66 
20431     66 66 66 66 
20435     66 00 00 00 
20439     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2043d     3C 7E 66 66 
20441     66 66 66 7E 
20445     3C 00 00 00 
20449     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2044d     3E 7E 66 66 
20451     66 66 66 7E 
20455     3E 06 06 00 
20459     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2045d     7C 7E 66 66 
20461     66 66 66 7E 
20465     7C 60 60 00 
20469     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2046d     3E 7E 66 06 
20471     06 06 06 06 
20475     06 00 00 00 
20479     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2047d     7C 7E 06 0E 
20481     3C 70 60 7E 
20485     3E 00 00 00 
20489     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2048d     7E 7E 18 18 
20491     18 18 18 78 
20495     70 00 00 00 
20499     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2049d     66 66 66 66 
204a1     66 66 66    | 	byte	$66[7]
204a4     7E 7C 00 00 
204a8     00 00 00 00 
204ac     00 66 66 66 
204b0     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
204b4     18 18 00 00 
204b8     00 00 00 00 
204bc     00 C6 C6 D6 
204c0     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
204c4     C6 82 00 00 
204c8     00 00 00 00 
204cc     00 66 66 3C 
204d0     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
204d4     66 66 00 00 
204d8     00 00 00 00 
204dc     00 66 66 66 
204e0     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
204e4     7C 60 7E 3E 
204e8     00 00 00 00 
204ec     00 7E 7E 30 
204f0     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
204f4     7E 7E 00 00 
204f8     00 00 30 18 
204fc     18 18 18 0C 
20500     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
20504     18 30 00 00 
20508     00 00 18 18 
2050c     18 18 18 18 
20510     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
20514     18 18 00 00 
20518     00 00 0C 18 
2051c     18 18 18 30 
20520     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
20524     18 0C 00 00 
20528     00 00 6C 7E 
2052c     36 00 00 00 
20530     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
20534     00 00 00 00 
20538     00 00 00 00 
2053c     00          | 	byte	$00[9]
2053d     18 18 18 18 
20541     18 18 00 00 
20545     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
20548     00 00 00 00 
2054c     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
20550     00 00 00 00 
20554     00 80 80 80 
20558     00 00 00 FF 
2055c     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
20560     00 00 00 00 
20564     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
20565     80 00 00 00 
20569     00 80 00 00 
2056d     80 80 00 00 
20571     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
20575     80 00 80 00 
20579     00 40 80 00 
2057d     AA AA AA 00 
20581     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
20585     FF 00 00 00 
20589     00 FF 00 00 
2058d     FF FF 00 00 
20591     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
20595     FF 00 FF 00 
20599     00 FF FF 00 
2059d     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
205a0     00 00 00 00 
205a4     00          | ataripalette   file "ataripalettep2.def"
205a5     11 11 11 00 
205a9     22 22 22 00 
205ad     33 33 33 00 
205b1     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
205b5     55 55 55 00 
205b9     66 66 66 00 
205bd     77 77 77 00 
205c1     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
205c5     99 99 99 00 
205c9     AA AA AA 00 
205cd     BB BB BB 00 
205d1     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
205d5     DD DD DD 00 
205d9     EE EE EE 00 
205dd     FF FF FF 00 
205e1     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
205e5     00 14 40 00 
205e9     00 1E 60 00 
205ed     00 28 80 00 
205f1     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
205f5     00 3C BF 00 
205f9     00 46 DF 00 
205fd     00 50 FF 00 
20601     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
20605     39 77 FF 00 
20609     55 8A FF 00 
2060d     71 9E FF 00 
20611     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
20615     AA C5 FF 00 
20619     C6 D8 FF 00 
2061d     E3 EC FF 00 
20621     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
20625     00 00 40 00 
20629     00 00 60 00 
2062d     00 00 80 00 
20631     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
20635     00 00 BF 00 
20639     00 00 DF 00 
2063d     00 00 FF 00 
20641     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
20645     39 39 FF 00 
20649     55 55 FF 00 
2064d     71 71 FF 00 
20651     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
20655     AA AA FF 00 
20659     C6 C6 FF 00 
2065d     E3 E3 FF 00 
20661     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
20665     20 00 40 00 
20669     30 00 60 00 
2066d     40 00 80 00 
20671     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
20675     60 00 BF 00 
20679     70 00 DF 00 
2067d     80 00 FF 00 
20681     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
20685     9C 39 FF 00 
20689     AA 55 FF 00 
2068d     B8 71 FF 00 
20691     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
20695     D5 AA FF 00 
20699     E3 C6 FF 00 
2069d     F1 E3 FF 00 
206a1     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
206a5     40 00 40 00 
206a9     60 00 60 00 
206ad     80 00 80 00 
206b1     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
206b5     BF 00 BF 00 
206b9     DF 00 DF 00 
206bd     FF 00 FF 00 
206c1     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
206c5     FF 39 FF 00 
206c9     FF 55 FF 00 
206cd     FF 71 FF 00 
206d1     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
206d5     FF AA FF 00 
206d9     FF C6 FF 00 
206dd     FF E3 FF 00 
206e1     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
206e5     40 00 20 00 
206e9     60 00 30 00 
206ed     80 00 40 00 
206f1     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
206f5     BF 00 60 00 
206f9     DF 00 70 00 
206fd     FF 00 80 00 
20701     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
20705     FF 39 9C 00 
20709     FF 55 AA 00 
2070d     FF 71 B8 00 
20711     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
20715     FF AA D5 00 
20719     FF C6 E3 00 
2071d     FF E3 F1 00 
20721     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
20725     40 00 00 00 
20729     60 00 00 00 
2072d     80 00 00 00 
20731     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
20735     BF 00 00 00 
20739     DF 00 00 00 
2073d     FF 00 00 00 
20741     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
20745     FF 39 39 00 
20749     FF 55 55 00 
2074d     FF 71 71 00 
20751     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
20755     FF AA AA 00 
20759     FF C6 C6 00 
2075d     FF E3 E3 00 
20761     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
20765     40 10 00 00 
20769     60 18 00 00 
2076d     80 20 00 00 
20771     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
20775     BF 30 00 00 
20779     DF 38 00 00 
2077d     FF 40 00 00 
20781     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
20785     FF 6A 39 00 
20789     FF 80 55 00 
2078d     FF 95 71 00 
20791     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
20795     FF BF AA 00 
20799     FF D5 C6 00 
2079d     FF EA E3 00 
207a1     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
207a5     40 20 00 00 
207a9     60 30 00 00 
207ad     80 40 00 00 
207b1     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
207b5     BF 60 00 00 
207b9     DF 70 00 00 
207bd     FF 80 00 00 
207c1     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
207c5     FF 9C 39 00 
207c9     FF AA 55 00 
207cd     FF B8 71 00 
207d1     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
207d5     FF D5 AA 00 
207d9     FF E3 C6 00 
207dd     FF F1 E3 00 
207e1     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
207e5     40 30 00 00 
207e9     60 48 00 00 
207ed     80 60 00 00 
207f1     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
207f5     BF 90 00 00 
207f9     DF A8 00 00 
207fd     FF C0 00 00 
20801     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
20805     FF CE 39 00 
20809     FF D5 55 00 
2080d     FF DC 71 00 
20811     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
20815     FF EA AA 00 
20819     FF F1 C6 00 
2081d     FF F8 E3 00 
20821     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
20825     30 40 00 00 
20829     48 60 00 00 
2082d     60 80 00 00 
20831     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
20835     90 BF 00 00 
20839     A8 DF 00 00 
2083d     C0 FF 00 00 
20841     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
20845     CE FF 39 00 
20849     D5 FF 55 00 
2084d     DC FF 71 00 
20851     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
20855     EA FF AA 00 
20859     F1 FF C6 00 
2085d     F8 FF E3 00 
20861     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
20865     00 40 00 00 
20869     00 60 00 00 
2086d     00 80 00 00 
20871     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
20875     00 BF 00 00 
20879     00 DF 00 00 
2087d     00 FF 00 00 
20881     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
20885     39 FF 39 00 
20889     55 FF 55 00 
2088d     71 FF 71 00 
20891     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
20895     AA FF AA 00 
20899     C6 FF C6 00 
2089d     E3 FF E3 00 
208a1     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
208a5     00 40 14 00 
208a9     00 60 1E 00 
208ad     00 80 28 00 
208b1     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
208b5     00 BF 3C 00 
208b9     00 DF 46 00 
208bd     00 FF 50 00 
208c1     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
208c5     39 FF 77 00 
208c9     55 FF 8A 00 
208cd     71 FF 9E 00 
208d1     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
208d5     AA FF C5 00 
208d9     C6 FF D8 00 
208dd     E3 FF EC 00 
208e1     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
208e5     00 40 28 00 
208e9     00 60 3C 00 
208ed     00 80 50 00 
208f1     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
208f5     00 BF 78 00 
208f9     00 DF 8C 00 
208fd     00 FF A0 00 
20901     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
20905     39 FF B5 00 
20909     55 FF C0 00 
2090d     71 FF CA 00 
20911     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
20915     AA FF DF 00 
20919     C6 FF EA 00 
2091d     E3 FF F4 00 
20921     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
20925     00 40 40 00 
20929     00 60 60 00 
2092d     00 80 80 00 
20931     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
20935     00 BF BF 00 
20939     00 DF DF 00 
2093d     00 FF FF 00 
20941     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
20945     39 FF FF 00 
20949     55 FF FF 00 
2094d     71 FF FF 00 
20951     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
20955     AA FF FF 00 
20959     C6 FF FF 00 
2095d     E3 FF FF 00 
20961     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
20965     00 28 40 00 
20969     00 3C 60 00 
2096d     00 50 80 00 
20971     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
20975     00 78 BF 00 
20979     00 8C DF 00 
2097d     00 A0 FF 00 
20981     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
20985     39 B5 FF 00 
20989     55 C0 FF 00 
2098d     71 CA FF 00 
20991     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
20995     AA DF FF 00 
20999     C6 EA FF 00 
2099d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
209a0                 | '**********************************************************************************
209a0                 | '
209a0                 | '        Timings and colors definitions
209a0                 | '
209a0                 | '**********************************************************************************
209a0                 | 
209a0                 |    'streamer sets for text mode, to add to timings[0..5]
209a0                 | ' todo for the retromachine: 768x576
209a0                 | 
209a0                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
209a0     10 00 00 00 
209a4     50 00 00 00 
209a8     14 00 00 00 
209ac     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
209b0     70 00 00 00 
209b4     08 00 00 00 
209b8     30 00 00 00 
209bc     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
209c0     10 00 00 00 
209c4     10 00 00 00 
209c8     00 00 00 00 
209cc     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
209d0     E0 01 00 00 
209d4     F6 32 24 15 
209d8     FB 6C C3 01 
209dc     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
209e0                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
209e0                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
209e0     30 00 00 00 
209e4     50 00 00 00 
209e8     34 00 00 00 
209ec     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
209f0     20 00 00 00 
209f4     08 00 00 00 
209f8     16 00 00 00 
209fc     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
20a00     24 00 00 00 
20a04     18 00 00 00 
20a08     40 00 00 00 
20a0c     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
20a10     F0 01 00 00 
20a14     F6 32 24 15 
20a18     FB 6C C3 01 
20a1c     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
20a20                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
20a20     10 00 00 00 
20a24     40 00 00 00 
20a28     10 00 00 00 
20a2c     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
20a30     08 00 00 00 
20a34     08 00 00 00 
20a38     08 00 00 00 
20a3c     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
20a40     40 00 00 00 
20a44     20 00 00 00 
20a48     80 00 00 00 
20a4c     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
20a50     E0 01 00 00 
20a54     70 AE E9 10 
20a58     FB 8B FF 01 
20a5c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
20a60     10 00 00 00 
20a64     42 00 00 00 
20a68     14 00 00 00 
20a6c     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
20a70     00 00 00 00 
20a74     08 00 00 00 
20a78     00 00 00 00 
20a7c     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
20a80     10 00 00 00 
20a84     10 00 00 00 
20a88     C0 00 00 00 
20a8c     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
20a90     40 02 00 00 
20a94     F6 32 24 15 
20a98     FB 6C C3 01 
20a9c     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
20aa0     50 00 00 00 
20aa4     A0 00 00 00 
20aa8     54 00 00 00 
20aac     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
20ab0     08 00 00 00 
20ab4     08 00 00 00 
20ab8     08 00 00 00 
20abc     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20ac0     0C 00 00 00 
20ac4     08 00 00 00 
20ac8     00 01 00 00 
20acc     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
20ad0     E0 01 00 00 
20ad4     10 06 56 15 
20ad8     FB 64 C3 01 
20adc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
20ae0     50 00 00 00 
20ae4     32 00 00 00 
20ae8     50 00 00 00 
20aec     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
20af0     08 00 00 00 
20af4     08 00 00 00 
20af8     08 00 00 00 
20afc     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20b00     0C 00 00 00 
20b04     08 00 00 00 
20b08     40 01 00 00 
20b0c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
20b10     E0 01 00 00 
20b14     F2 CD 33 13 
20b18     FB 53 92 01 
20b1c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
20b20     18 00 00 00 
20b24     30 00 00 00 
20b28     18 00 00 00 
20b2c     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
20b30     08 00 00 00 
20b34     08 00 00 00 
20b38     08 00 00 00 
20b3c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20b40     0C 00 00 00 
20b44     08 00 00 00 
20b48     80 01 00 00 
20b4c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
20b50     E0 01 00 00 
20b54     F4 8F 11 11 
20b58     FB 3A 55 01 
20b5c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
20b60     20 00 00 00 
20b64     40 00 00 00 
20b68     22 00 00 00 
20b6c     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
20b70     00 00 00 00 
20b74     08 00 00 00 
20b78     00 00 00 00 
20b7c     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
20b80     0C 00 00 00 
20b84     08 00 00 00 
20b88     C0 01 00 00 
20b8c     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
20b90     F0 01 00 00 
20b94     F2 CD 33 13 
20b98     FB 53 92 01 
20b9c     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
20ba0                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
20ba0     00 75 C7 97 
20ba4     27 47 F6 0A 
20ba8     05 79 CB 9B 
20bac     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
20bb0                 | 
20bb0     28 12 64 FD | hdmi            setq    #9
20bb4     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
20bb8                 |            '     setq2   #255
20bb8                 |             '    rdlong  $100, paletteptr 
20bb8     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
20bbc     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
20bc0     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
20bc4     78 F9 02 F1 |                 add     ii,hbase
20bc8     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
20bcc     7B 0B 80 FF 
20bd0     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
20bd4                 | 
20bd4     66 66 86 FF 
20bd8     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
20bdc                 | 
20bdc                 | 
20bdc                 | ''--------  frame rendering main loop  ---------------------------------------------------
20bdc                 | 
20bdc                 | p101
20bdc     28 14 64 FD |                 setq    #10
20be0     00 DF 06 FB |                 rdlong  framebuf,  ptra
20be4     28 1E 64 FD |                 setq    #15
20be8     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
20bec     71 99 02 FB |                 rdlong  border,borderptr
20bf0                 | 
20bf0     01 C4 06 F1 |                 add     frames,#1
20bf4     76 F5 02 F6 |                 mov     dlptr2,dlptr
20bf8                 | 
20bf8     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
20bfc     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
20c00     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
20c04     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
20c08                 |  '' up porch
20c08                 | 
20c08     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
20c0c     49 FF 02 F6 |                 mov     hsync1,sync_001
20c10     37 A8 46 FB |                 callpa  i_upporch ,#blank
20c14     72 01 68 FC |                 wrlong  #0,vblankptr
20c18                 |                 
20c18     1F EA 16 F4 |                 testb   paletteptr,#31 wc
20c1c     29 FE 65 3D |          if_nc  setq2   #255
20c20     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
20c24                 | 
20c24                 | '' cursor blinking
20c24                 | 
20c24     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
20c28     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
20c2c                 | 
20c2c                 | '' main screen
20c2c                 | 
20c2c     00 BE 06 F6 |                 mov linenum,#0
20c30     00 18 07 F6 |                 mov rcnt,#0
20c34     00 1C 07 F6 |                 mov rcnt2a,#0
20c38                 | 
20c38                 | 
20c38     00 18 0F F2 | p301            cmp rcnt,#0 wz
20c3c     18 00 90 AD |         if_z    jmp #p306
20c40     01 18 87 F1 |                 sub rcnt,#1
20c44     90 F7 02 F6 |                 mov dl,rdl
20c48     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
20c4c     8F F7 02 A1 |    if_z        add dl,roffset  
20c50     7B 21 03 F6 |                 mov rdl,dl
20c54     04 00 90 FD |                 jmp #p307          
20c58                 |           
20c58                 |                 
20c58     7A F7 02 FB | p306            rdlong  dl,dlptr2
20c5c     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
20c60     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
20c64     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
20c68                 | 
20c68                 | '' Special entry:
20c68                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
20c68                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
20c68                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
20c68                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
20c68                 | '' todo: set horizontal scroll (if needed)
20c68                 | 
20c68     02 FA 66 F0 |                 shl framebuf2,#2
20c6c     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
20c70     04 22 0F F2 |                 cmp dlc,#%100 wz
20c74                 |   
20c74                 |                 
20c74     04 F4 06 F1 |                 add dlptr2,#4
20c78     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
20c7c     7A 21 03 FB |                  rdlong rdl,dlptr2
20c80     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
20c84     04 18 47 F0 |                  shr rcnt,#4
20c88                 |              
20c88     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
20c8c     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
20c90                 |                 
20c90     04 1E 47 F0 |                  shr roffset,#4
20c94     0C 1E 67 F0 |                  shl roffset,#12
20c98                 |   
20c98     9C FF 9F FD |                  jmp #p301
20c9c                 |                  
20c9c                 |                  
20c9c                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
20c9c     0C FA 46 F0 |                 shr     framebuf2,#12
20ca0     02 FA 66 F0 |                 shl     framebuf2,#2
20ca4                 | 
20ca4     7B 03 E3 F8 |                 getbyte t1,dl,#0
20ca8     00 02 0F F2 |                 cmp     t1,#0 wz
20cac     34 00 90 AD |     if_z        jmp     #borderline
20cb0                 | 
20cb0     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
20cb4     50 00 90 CD |           if_c   jmp     #textline
20cb8     50 02 90 3D |           if_nc  jmp     #graphline
20cbc                 | '
20cbc     01 BE 06 F1 | p302            add     linenum,#1
20cc0     04 F4 06 F1 |                 add     dlptr2,#4
20cc4     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
20cc8     6C FF 9F 5D |          if_nz  jmp     #p301
20ccc                 | 
20ccc     72 03 68 FC | p112            wrlong  #1,vblankptr
20cd0     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
20cd4                 | 
20cd4     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
20cd8     4B FF 02 F6 |                 mov     hsync1,sync_223
20cdc     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
20ce0     F8 FE 9F FD |                 jmp     #p101
20ce4                 | 
20ce4                 | '' ---------------  END of frame rendering loop -------------------------------------------
20ce4                 | 
20ce4                 | 
20ce4     14 00 B0 FD | borderline      call    #hsync                      ' make a border
20ce8     4C A1 C2 FC |                 xcont   m_vi,border
20cec     CC FF 9F FD |                 jmp     #p302
20cf0                 | 
20cf0                 | 
20cf0     08 00 B0 FD | blank           call    #hsync                          'blank lines
20cf4     7E A1 C2 FC |                 xcont   m_vi,hsync0
20cf8     FD ED 6F 0B |         _ret_   djnz    pa,#blank
20cfc                 | 
20cfc     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
20d00     7F 9D B2 FC |                 xzero   m_sn,hsync1
20d04     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
20d08                 | 
20d08                 | 
20d08                 | 
20d08                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
20d08                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
20d08                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
20d08                 | 
20d08                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
20d08                 | 
20d08     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
20d0c                 | 
20d0c     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
20d10     7B 17 5B F8 |                 getnib  zoom, dl,#3
20d14     03 16 07 F5 |                 and             zoom, #3
20d18                 | 
20d18                 | 
20d18                 | 
20d18     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
20d1c     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
20d20     3F BC 06 F5 |                 and     linestart,#63
20d24     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
20d28     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
20d2c                 | 
20d2c     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
20d30                 | 
20d30                 |                        ' if fontline =0, get a border color
20d30                 | 
20d30     51 03 33 F9 | p102            getword t1,m_border,#0
20d34     00 02 0F F2 |                 cmp     t1, #0 wz
20d38     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
20d3c                 | 
20d3c     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
20d40     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
20d44     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
20d48     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
20d4c     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
20d50     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
20d54     52 BB 02 F6 |                 mov m_lut2, m_lut1
20d58     6A BB 02 F1 |                 add m_lut2, lutt1
20d5c     58 0F 03 F6 |                 mov cpl2,i_cpl
20d60                 | 
20d60     02 16 0F F2 |                cmp zoom,#2 wz
20d64     E4 00 90 AD |           if_z jmp #p420
20d68     01 16 0F F2 |                cmp zoom,#1 wz
20d6c     64 00 90 AD |           if_z jmp #p410
20d70     00 16 0F F2 |                 cmp zoom,#0 wz
20d74     04 00 90 AD |           if_z jmp #p400
20d78     50 01 90 FD |                jmp #p430
20d7c                 | 
20d7c                 |                    '
20d7c                 |  ''---------------------------------------------------------------------------------------------------------
20d7c     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
20d80     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20d84     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20d88     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20d8c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20d90     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
20d94     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20d98     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20d9c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20da0     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20da4                 | 
20da4     81 BB C2 FC |                         xcont m_lut2,t1
20da8                 | 
20da8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20dac     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20db0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
20db4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20db8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
20dbc     01 C0 86 F1 |                         sub     lutaddr,#1
20dc0                 | 
20dc0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20dc4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20dc8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20dcc                 | 
20dcc     EB 0F 6F FB |                         djnz   cpl2,#p400
20dd0     28 01 90 FD |  p401                   jmp    #p103
20dd4                 | 
20dd4                 | ''------------------------------------------------------------------------------------------------------------
20dd4                 | 
20dd4     01 0E 47 F0 |  p410                   shr cpl2,#1
20dd8                 | 
20dd8                 | ''---------------------------------------------------------------------------------------------------------
20dd8     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
20ddc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20de0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20de4     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20de8     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20dec     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
20df0     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20df4     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20df8     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20dfc     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20e00                 | 
20e00                 | 
20e00     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
20e04     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
20e08     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
20e0c     03 02 07 FA |                         mul t1,#3
20e10     81 BB C2 FC |                         xcont m_lut2,t1
20e14     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20e18     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20e1c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
20e20     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20e24     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
20e28     01 C0 86 F1 |                         sub     lutaddr,#1
20e2c     63 06 63 FD |                         mergew t3
20e30     03 06 07 FA |                         mul t3,#3
20e34     83 BB C2 FC |                         xcont m_lut2,t3
20e38                 | 
20e38     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20e3c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20e40                 | 
20e40     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20e44                 | 
20e44     E4 0F 6F FB |                         djnz   cpl2,#p412
20e48     B0 00 90 FD |  p411                   jmp    #p103
20e4c                 | 
20e4c                 | ''------------------------------------------------------------------------------------------------------------
20e4c                 | 
20e4c     02 0E 47 F0 |  p420                   shr cpl2,#2
20e50                 | 
20e50                 | ''---------------------------------------------------------------------------------------
20e50     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
20e54     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20e58     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20e5c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20e60     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20e64     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
20e68     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20e6c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20e70     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20e74     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20e78                 | 
20e78     61 02 63 FD |                         mergeb t1
20e7c     81 07 3B F9 |                         getword t3,t1,#1
20e80     0F 02 07 FA |                         mul t1,#15
20e84     81 BB C2 FC |                         xcont m_lut2,t1
20e88                 | 
20e88     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20e8c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20e90     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
20e94     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20e98     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
20e9c     01 C0 86 F1 |                         sub     lutaddr,#1
20ea0                 | 
20ea0     81 09 EB F8 |                         getbyte t4,t1,#1        '
20ea4     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
20ea8                 | 
20ea8     0F 06 07 FA |                         mul t3,#15
20eac     83 BB C2 FC |                         xcont m_lut2,t3
20eb0                 | 
20eb0     83 0B EB F8 |                         getbyte t5,t3,#1
20eb4     85 BB C2 FC |                         xcont m_lut2, t5
20eb8     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20ebc     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20ec0                 | 
20ec0     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20ec4                 | 
20ec4     E2 0F 6F FB |                         djnz   cpl2,#p422
20ec8     30 00 90 FD |  p421                   jmp    #p103
20ecc                 | 
20ecc                 | '--------------------------------------------------------------------------------------------------------------
20ecc                 | 
20ecc     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
20ed0     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20ed4     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20ed8                 | 
20ed8     00 BA C6 FC |                         xcont m_lut2,#0
20edc                 | 
20edc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20ee0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20ee4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
20ee8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20eec     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
20ef0     01 C0 86 F1 |                         sub     lutaddr,#1
20ef4                 | 
20ef4     F5 0F 6F FB |                         djnz   cpl2,#p430
20ef8     00 00 90 FD |  p431                   jmp    #p103
20efc                 | 
20efc                 | ''------------------------------------------------------------------------------------------------------------
20efc                 | 
20efc                 | 
20efc                 | 
20efc     51 25 33 F9 | p103            getword  mb2,m_border,#0
20f00     00 24 0F F2 |                 cmp      mb2, #0 wz
20f04     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
20f08                 | 
20f08     B0 FD 9F FD |                 jmp #p302
20f0c                 | 
20f0c                 | '' -------------------------------------- END of text line ---------------------------------
20f0c                 | 
20f0c                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
20f0c                 | 
20f0c     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
20f10                 | 
20f10                 | 
20f10     51 25 33 F9 | p202            getword mb2,m_border,#0
20f14     00 24 0F F2 |                 cmp     mb2, #0 wz
20f18     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
20f1c                 | 
20f1c                 | '----------------------------------------- display pixels
20f1c                 | 
20f1c     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
20f20     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
20f24                 | 
20f24     7B 17 5B F8 |                 getnib  zoom, dl,#3
20f28     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
20f2c                 | 
20f2c     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
20f30     0C BC 06 F5 |                 and     colordepth,#12
20f34                 | 
20f34     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
20f38     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
20f3c     64 00 90 AD |           if_z  jmp     #p240
20f40                 | 
20f40     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
20f44     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
20f48     98 00 90 AD |           if_z  jmp     #p250
20f4c                 | 
20f4c     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
20f50     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
20f54     FC 00 90 AD |           if_z  jmp     #p260
20f58                 | 
20f58     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
20f5c                 | 
20f5c                 | '' --- 8 bit color modes
20f5c                 | 
20f5c     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
20f60     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
20f64                 | 
20f64     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
20f68     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
20f6c                 |        
20f6c                 |  '  
20f6c     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
20f70     25 0C 07 A6 |                 if_z mov skippattern,#%100101
20f74                 |     
20f74                 |  
20f74     05 0C 07 56 |                 if_nz mov skippattern,#%000101
20f78     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
20f7c                 |         
20f7c                 | 
20f7c                 |         
20f7c     7D 11 03 FB | p235               rdlong  char,framebuf2
20f80     32 0C 63 FD |                    skipf skippattern
20f84     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
20f88     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
20f8c     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
20f90     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
20f94     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
20f98     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
20f9c     F7 0F 6F FB |                    djnz    cpl2,#p235
20fa0                 | 
20fa0     20 01 90 FD |                jmp    #p203
20fa4                 |                   
20fa4                 | 
20fa4                 | 
20fa4                 | '' --- 1 bit color modes
20fa4                 | 
20fa4     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
20fa8     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
20fac                 | 
20fac     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
20fb0     13 0C 07 A6 |        if_z   mov skippattern,#%10011
20fb4     08 0C 07 56 |        if_nz  mov skippattern,#%01000
20fb8                 | 
20fb8                 | 
20fb8     7D 11 E3 FA | p241               rdword  char,framebuf2
20fbc     44 10 FF F9 |                    movbyts char,#%01000100
20fc0     63 10 63 FD |                    mergew  char
20fc4     32 0C 63 FD |                    skipf skippattern
20fc8     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
20fcc     63 10 63 FD |                    mergew  char                    ' 1 0
20fd0     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
20fd4     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
20fd8     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
20fdc     F6 0F 6F FB |                    djnz   cpl2,#p241
20fe0                 | 
20fe0                 | 
20fe0     E0 00 90 FD |                jmp    #p203
20fe4                 | 
20fe4                 | '' --- 2 bit color modes
20fe4                 | 
20fe4     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
20fe8     C8 00 90 AD |        if_z   jmp #p251
20fec                 | 
20fec     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
20ff0     30 00 90 AD |        if_z   jmp #p252
20ff4                 | 
20ff4                 | 
20ff4     7D 11 C3 FA | p254               rdbyte char,framebuf2
20ff8     04 0A 07 F6 |                    mov  t5,#4
20ffc     02 10 67 F0 | p255               shl  char,#2
21000     88 03 53 F8 |                    getnib  t1,char,#2
21004     03 02 07 F5 |                    and     t1,#3
21008     55 02 07 FA |                    mul     t1,#$55
2100c     81 05 03 F9 |                    rolbyte  t2,t1,#0
21010     FA 0B 6F FB |                    djnz    t5,#p255
21014     82 BB C2 FC |                    xcont   m_lut2,t2
21018     01 FA 06 F1 |                    add     framebuf2,#1
2101c     F5 0F 6F FB |                    djnz    cpl2,#p254
21020     A0 00 90 FD |                    jmp     #p203
21024                 | 
21024     7D 11 E3 FA | p252               rdword char,framebuf2
21028     08 0A 07 F6 |                    mov  t5,#8
2102c     02 10 67 F0 | p253               shl  char,#2
21030     88 03 63 F8 |                    getnib  t1,char,#4
21034     03 02 07 F5 |                    and     t1,#3
21038     05 02 07 FA |                    mul     t1,#5
2103c     81 05 83 F8 |                    rolnib  t2,t1,#0
21040     FA 0B 6F FB |                    djnz    t5,#p253
21044     82 BB C2 FC |                    xcont   m_lut2,t2
21048     02 FA 06 F1 |                    add     framebuf2,#2
2104c     F5 0F 6F FB |                    djnz    cpl2,#p252
21050     70 00 90 FD |                    jmp     #p203
21054                 | 
21054                 | '' ------ 4 bit color modes
21054                 | 
21054     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
21058     58 00 90 AD |        if_z   jmp #p251
2105c                 | 
2105c     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
21060     2C 00 90 AD |        if_z   jmp #p262
21064                 | 
21064                 | 
21064     7D 11 C3 FA | p263               rdbyte char,framebuf2
21068     02 0A DC FC |                            rep #5,#2
2106c     88 05 8B F8 |                              rolnib t2,char,#1
21070     88 05 8B F8 |                                  rolnib t2,char,#1
21074     88 05 8B F8 |                              rolnib t2,char,#1
21078     88 05 8B F8 |                                  rolnib t2,char,#1
2107c     04 10 67 F0 |                              shl char,#4
21080     82 BB C2 FC |                    xcont   m_lut2,t2
21084     01 FA 06 F1 |                    add     framebuf2,#1
21088     F6 0F 6F FB |                    djnz    cpl2,#p263
2108c     34 00 90 FD |                    jmp     #p203
21090                 | 
21090     7D 11 E3 FA | p262               rdword  char,framebuf2
21094     04 06 DC FC |                            rep #3,#4
21098     88 05 9B F8 |                              rolnib t2,char,#3
2109c     88 05 9B F8 |                                  rolnib t2,char,#3
210a0     04 10 67 F0 |                              shl char,#4
210a4     82 BB C2 FC |                    xcont   m_lut2,t2
210a8     02 FA 06 F1 |                    add     framebuf2,#2
210ac     F8 0F 6F FB |                    djnz    cpl2,#p262
210b0     10 00 90 FD |                    jmp     #p203
210b4                 | 
210b4                 | ''---------- all color modes without zoom
210b4                 | 
210b4     87 07 D8 FC | p251               rep  #3,cpl2
210b8     7D 11 03 FB |                    rdlong  char,framebuf2
210bc     04 FA 06 F1 |                    add     framebuf2,#4
210c0     88 BB C2 FC |                    xcont   m_lut2,char
210c4                 |           
210c4                 |  ''-----------------------------------------------------------------------------------------
210c4                 | p203           ' getword  mb2,m_border,#0
210c4     00 24 0F F2 |                 cmp      mb2, #0 wz
210c8     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
210cc                 | 
210cc     EC FB 9F FD |                 jmp #p302
210d0                 | 
210d0                 | '' -------------------------------------- END of graph  line ---------------------------------
210d0                 | 
210d0                 | '' consts and vars
210d0                 | 
210d0     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
210d4     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
210d8     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
210dc     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
210e0                 | 
210e0     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
210e4                 | 
210e4                 | '------ these longs will be set by setmode function
210e4                 | 
210e4     00 00 00 00 | m_bs            long    0        'blanks before sync
210e8     00 00 00 00 | m_sn            long    0        'sync
210ec     00 00 00 00 | m_bv            long    0        'blanks before visible
210f0     00 00 00 00 | m_vi            long    0        'visible pixels #
210f4     00 00 00 00 | m_border        long    0        'left/right borders
210f8     00 00 00 00 | m_lut1          long    0        'characters
210fc     00 00 00 00 | i_vborder       long    0        'up/down borders
21100     00 00 00 00 | i_upporch       long    0        'up porch lines
21104     00 00 00 00 | i_vsync         long    0        'vsync lines
21108     00 00 00 00 | i_downporch     long    0        'down porch lines
2110c     00 00 00 00 | i_modenum       long    0        'mode #
21110     00 00 00 00 | i_cpl           long    0        'chars/longs per line
21114     00 00 00 00 | i_lines         long    0        'scanlines #
21118     00 00 00 00 | i_clock         long    0
2111c     00 00 00 00 | i_hubset        long    0
21120     00 00 00 00 | i_totalvis      long    0
21124                 | 
21124                 | '-------------------------------------
21124                 | 
21124     00 00 00 00 | m_lut2          long    0
21128                 | 
21128                 | colordepth
21128     00 00 00 00 | linestart       long    0
2112c     00 00 00 00 | linenum         long    0
21130     00 01 00 00 | lutaddr         long    256
21134                 | 
21134     0E 00 00 00 | cursorsh        long    14
21138     00 00 00 00 | frames          long    0
2113c     00 00 00 00 | cursorx         long    0
21140     00 00 00 00 | cursory         long    0
21144     00 00 00 00 | cursorpos       long    0
21148     00 00 00 00 | cursorpos2      long    0
2114c     00 00 00 00 | fontstart       long    0
21150     00 00 00 00 | border2         long 0
21154     00 00 81 70 | lutiv           long $70810000
21158     00 00 88 00 | lutt1           long $00880000
2115c     00 00 80 00 | lutg1           long $00800000
21160     00 00 80 10 | lutg2           long $10800000
21164     00 00 80 20 | lutg4           long $20800000
21168     00 00 80 30 | lutg8           long $30800000
2116c     00 00 00 00 | framebuf        long 0
21170     00 00 00 00 | fontbuf         long 0
21174     00 00 00 00 | borderptr       long 0
21178     00 00 00 00 | vblankptr       long 0
2117c     00 00 00 00 | cursorptr       long 0
21180     00 00 00 00 | modeptr         long 0
21184     00 00 00 00 | paletteptr      long 0
21188     00 00 00 00 | dlptr           long 0
2118c                 | fontnumptr      res     1
2118c                 | fontnumptr      res     1
2118c                 | hbase           res     1
2118c                 | hbase           res     1
2118c                 | borderptr2      res     1
2118c                 | borderptr2      res     1
2118c                 | dlptr2 res 1
2118c                 | dlptr2 res 1
2118c                 | dl              res 1
2118c                 | dl              res 1
2118c                 | ii              res     1
2118c                 | ii              res     1
2118c                 | framebuf2       res     1
2118c                 | framebuf2       res     1
2118c                 | hsync0          res     1
2118c                 | hsync0          res     1
2118c                 | hsync1          res     1
2118c                 | hsync1          res     1
2118c                 | fontline        res     1
2118c                 | fontline        res     1
2118c                 | t1              res     1
2118c                 | t1              res     1
2118c                 | t2              res     1
2118c                 | t2              res     1
2118c                 | t3 res 1
2118c                 | t3 res 1
2118c                 | t4 res 1
2118c                 | t4 res 1
2118c                 | t5 res 1
2118c                 | t5 res 1
2118c                 | skippattern res 1
2118c                 | skippattern res 1
2118c                 | cpl2 res 1
2118c                 | cpl2 res 1
2118c                 | char            res     1
2118c                 | char            res     1
2118c                 | backcolor       res     1
2118c                 | backcolor       res     1
2118c                 | charcolor       res     1
2118c                 | charcolor       res     1
2118c                 | zoom res 1
2118c                 | zoom res 1
2118c     00 00 00 00 | rcnt long 0 'dl repeat count
21190     00 00 00 00 | rcnt2 long 0
21194     00 00 00 00 | rcnt2a long 0
21198     00 00 00 00 | roffset long 0
2119c     00 00 00 00 | rdl long 0  'dl repeat line
211a0     00 00 00 00 | dlc long 0 'dl command
211a4     00 00 00 00 | mb2 long 0
211a8     00 00 00 00 | aend             long 0
211ac                 |                 fit     496                     '
211ac                 | _shell_c_dat_
211ac     00 00 00 00 
      ...             
217b8     00 00 00 00 
217bc     00 00 00 00 | 	byte	$00[1556]
217c0                 | 	alignl
217c0                 | _trackerplayer_spin2_dat_
217c0                 | 
217c0     00 00 00 00 | null             long  0
217c4     46 52 45 51 
217c8     46 52 45 51 
217cc     46 52 45 51 
217d0     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
217d4     46 52 45 51 
217d8     46 52 45 51 
217dc     46 52 45 51 
217e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217e4     46 52 45 51 
217e8     46 52 45 51 
217ec     46 52 45 51 
217f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217f4     46 52 45 51 
217f8     46 52 45 51 
217fc     46 52 45 51 
21800     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21804     46 52 45 51 
21808     46 52 45 51 
2180c     46 52 45 51 
21810     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21814     46 52 45 51 
21818     46 52 45 51 
2181c     46 52 45 51 
21820     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21824     46 52 45 51 
21828     46 52 45 51 
2182c     46 52 45 51 
21830     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21834     46 52 45 51 
21838     46 52 45 51 
2183c     46 52 45 51 
21840     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21844     46 52 45 51 
21848     46 52 45 51 
2184c     46 52 45 51 
21850     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21854     46 52 45 51 
21858     46 52 45 51 
2185c     46 52 45 51 
21860     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21864     46 52 45 51 
21868     46 52 45 51 
2186c     46 52 45 51 
21870     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21874     46 52 45 51 
21878     46 52 45 51 
2187c     46 52 45 51 
21880     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21884     46 52 45 51 
21888     46 52 45 51 
2188c     46 52 45 51 
21890     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21894     46 52 45 51 
21898     46 52 45 51 
2189c     46 52 45 51 
218a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218a4     46 52 45 51 
218a8     46 52 45 51 
218ac     46 52 45 51 
218b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218b4     46 52 45 51 
218b8     46 52 45 51 
218bc     46 52 45 51 
218c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218c4     46 52 45 51 
218c8     46 52 45 51 
218cc     46 52 45 51 
218d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218d4     46 52 45 51 
218d8     46 52 45 51 
218dc     46 52 45 51 
218e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218e4     46 52 45 51 
218e8     46 52 45 51 
218ec     46 52 45 51 
218f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218f4     46 52 45 51 
218f8     46 52 45 51 
218fc     46 52 45 51 
21900     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21904     46 52 45 51 
21908     46 52 45 51 
2190c     46 52 45 51 
21910     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21914     46 52 45 51 
21918     46 52 45 51 
2191c     46 52 45 51 
21920     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21924     46 52 45 51 
21928     46 52 45 51 
2192c     46 52 45 51 
21930     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21934     46 52 45 51 
21938     46 52 45 51 
2193c     46 52 45 51 
21940     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21944     46 52 45 51 
21948     46 52 45 51 
2194c     46 52 45 51 
21950     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21954     46 52 45 51 
21958     46 52 45 51 
2195c     46 52 45 51 
21960     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21964     46 52 45 51 
21968     46 52 45 51 
2196c     46 52 45 51 
21970     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21974     46 52 45 51 
21978     46 52 45 51 
2197c     46 52 45 51 
21980     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21984     46 52 45 51 
21988     46 52 45 51 
2198c     46 52 45 51 
21990     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21994     46 52 45 51 
21998     46 52 45 51 
2199c     46 52 45 51 
219a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219a4     46 52 45 51 
219a8     46 52 45 51 
219ac     46 52 45 51 
219b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219b4     46 52 45 51 
219b8     46 52 45 51 
219bc     46 52 45 51 
219c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219c4     46 52 45 51 
219c8     46 52 45 51 
219cc     46 52 45 51 
219d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219d4     46 52 45 51 
219d8     46 52 45 51 
219dc     46 52 45 51 
219e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219e4     46 52 45 51 
219e8     46 52 45 51 
219ec     46 52 45 51 
219f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219f4     46 52 45 51 
219f8     46 52 45 51 
219fc     46 52 45 51 
21a00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a04     46 52 45 51 
21a08     46 52 45 51 
21a0c     46 52 45 51 
21a10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a14     46 52 45 51 
21a18     46 52 45 51 
21a1c     46 52 45 51 
21a20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a24     46 52 45 51 
21a28     46 52 45 51 
21a2c     46 52 45 51 
21a30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a34     46 52 45 51 
21a38     46 52 45 51 
21a3c     46 52 45 51 
21a40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a44     46 52 45 51 
21a48     46 52 45 51 
21a4c     46 52 45 51 
21a50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a54     46 52 45 51 
21a58     46 52 45 51 
21a5c     46 52 45 51 
21a60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a64     46 52 45 51 
21a68     46 52 45 51 
21a6c     46 52 45 51 
21a70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a74     46 52 45 51 
21a78     46 52 45 51 
21a7c     46 52 45 51 
21a80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a84     46 52 45 51 
21a88     46 52 45 51 
21a8c     46 52 45 51 
21a90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a94     46 52 45 51 
21a98     46 52 45 51 
21a9c     46 52 45 51 
21aa0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21aa4     46 52 45 51 
21aa8     46 52 45 51 
21aac     46 52 45 51 
21ab0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ab4     46 52 45 51 
21ab8     46 52 45 51 
21abc     46 52 45 51 
21ac0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ac4     46 52 45 51 
21ac8     46 52 45 51 
21acc     46 52 45 51 
21ad0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ad4     46 52 45 51 
21ad8     46 52 45 51 
21adc     46 52 45 51 
21ae0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ae4     46 52 45 51 
21ae8     46 52 45 51 
21aec     46 52 45 51 
21af0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21af4     46 52 45 51 
21af8     46 52 45 51 
21afc     46 52 45 51 
21b00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b04     46 52 45 51 
21b08     46 52 45 51 
21b0c     46 52 45 51 
21b10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b14     46 52 45 51 
21b18     46 52 45 51 
21b1c     46 52 45 51 
21b20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b24     46 52 45 51 
21b28     46 52 45 51 
21b2c     46 52 45 51 
21b30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b34     46 52 45 51 
21b38     46 52 45 51 
21b3c     46 52 45 51 
21b40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b44     46 52 45 51 
21b48     46 52 45 51 
21b4c     46 52 45 51 
21b50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b54     46 52 45 51 
21b58     46 52 45 51 
21b5c     46 52 45 51 
21b60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b64     46 52 45 51 
21b68     46 52 45 51 
21b6c     46 52 45 51 
21b70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b74     46 52 45 51 
21b78     46 52 45 51 
21b7c     46 52 45 51 
21b80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b84     46 52 45 51 
21b88     46 52 45 51 
21b8c     46 52 45 51 
21b90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b94     46 52 45 51 
21b98     46 52 45 51 
21b9c     46 52 45 51 
21ba0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ba4     46 52 45 51 
21ba8     46 52 45 51 
21bac     46 52 45 51 
21bb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bb4     46 52 45 51 
21bb8     46 52 45 51 
21bbc     46 52 45 51 
21bc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bc4     46 52 45 51 
21bc8     46 52 45 51 
21bcc     46 52 45 51 
21bd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bd4     46 52 45 51 
21bd8     46 52 45 51 
21bdc     46 52 45 51 
21be0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21be4     46 52 45 51 
21be8     46 52 45 51 
21bec     46 52 45 51 
21bf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bf4     46 52 45 51 
21bf8     46 52 45 51 
21bfc     46 52 45 51 
21c00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c04     46 52 45 51 
21c08     46 52 45 51 
21c0c     46 52 45 51 
21c10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c14     46 52 45 51 
21c18     46 52 45 51 
21c1c     46 52 45 51 
21c20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c24     46 52 45 51 
21c28     46 52 45 51 
21c2c     46 52 45 51 
21c30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c34     46 52 45 51 
21c38     46 52 45 51 
21c3c     46 52 45 51 
21c40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c44     46 52 45 51 
21c48     46 52 45 51 
21c4c     46 52 45 51 
21c50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c54     46 52 45 51 
21c58     46 52 45 51 
21c5c     46 52 45 51 
21c60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c64     46 52 45 51 
21c68     46 52 45 51 
21c6c     46 52 45 51 
21c70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c74     46 52 45 51 
21c78     46 52 45 51 
21c7c     46 52 45 51 
21c80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c84     46 52 45 51 
21c88     46 52 45 51 
21c8c     46 52 45 51 
21c90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c94     46 52 45 51 
21c98     46 52 45 51 
21c9c     46 52 45 51 
21ca0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ca4     46 52 45 51 
21ca8     46 52 45 51 
21cac     46 52 45 51 
21cb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cb4     46 52 45 51 
21cb8     46 52 45 51 
21cbc     46 52 45 51 
21cc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cc4     46 52 45 51 
21cc8     46 52 45 51 
21ccc     46 52 45 51 
21cd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cd4     46 52 45 51 
21cd8     46 52 45 51 
21cdc     46 52 45 51 
21ce0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ce4     46 52 45 51 
21ce8     46 52 45 51 
21cec     46 52 45 51 
21cf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cf4     46 52 45 51 
21cf8     46 52 45 51 
21cfc     46 52 45 51 
21d00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d04     46 52 45 51 
21d08     46 52 45 51 
21d0c     46 52 45 51 
21d10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d14     46 52 45 51 
21d18     46 52 45 51 
21d1c     46 52 45 51 
21d20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d24     46 52 45 51 
21d28     46 52 45 51 
21d2c     46 52 45 51 
21d30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d34     46 52 45 51 
21d38     46 52 45 51 
21d3c     46 52 45 51 
21d40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d44     46 52 45 51 
21d48     46 52 45 51 
21d4c     46 52 45 51 
21d50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d54     46 52 45 51 
21d58     46 52 45 51 
21d5c     46 52 45 51 
21d60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d64     46 52 45 51 
21d68     46 52 45 51 
21d6c     46 52 45 51 
21d70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d74     46 52 45 51 
21d78     46 52 45 51 
21d7c     46 52 45 51 
21d80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d84     46 52 45 51 
21d88     46 52 45 51 
21d8c     46 52 45 51 
21d90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d94     46 52 45 51 
21d98     46 52 45 51 
21d9c     46 52 45 51 
21da0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21da4     46 52 45 51 
21da8     46 52 45 51 
21dac     46 52 45 51 
21db0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21db4     46 52 45 51 
21db8     46 52 45 51 
21dbc     46 52 45 51 
21dc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21dc4     46 52 45 51 
21dc8     46 52 45 51 
21dcc     46 52 45 51 
21dd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21dd4     46 52 45 51 
21dd8     46 52 45 51 
21ddc     46 52 45 51 
21de0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21de4     46 52 45 51 
21de8     46 52 45 51 
21dec     46 52 45 51 
21df0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21df4     46 52 45 51 
21df8     46 52 45 51 
21dfc     46 52 45 51 
21e00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e04     46 52 45 51 
21e08     46 52 45 51 
21e0c     46 52 45 51 
21e10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e14     46 52 45 51 
21e18     46 52 45 51 
21e1c     46 52 45 51 
21e20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e24     46 52 45 51 
21e28     46 52 45 51 
21e2c     46 52 45 51 
21e30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e34     46 52 45 51 
21e38     46 52 45 51 
21e3c     46 52 45 51 
21e40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e44     46 52 45 51 
21e48     46 52 45 51 
21e4c     46 52 45 51 
21e50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e54     46 52 45 51 
21e58     46 52 45 51 
21e5c     46 52 45 51 
21e60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e64     46 52 45 51 
21e68     46 52 45 51 
21e6c     46 52 45 51 
21e70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e74     46 52 45 51 
21e78     46 52 45 51 
21e7c     46 52 45 51 
21e80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e84     46 52 45 51 
21e88     46 52 45 51 
21e8c     46 52 45 51 
21e90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e94     46 52 45 51 
21e98     46 52 45 51 
21e9c     46 52 45 51 
21ea0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ea4     46 52 45 51 
21ea8     46 52 45 51 
21eac     46 52 45 51 
21eb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21eb4     46 52 45 51 
21eb8     46 52 45 51 
21ebc     46 52 45 51 
21ec0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ec4     46 52 45 51 
21ec8     46 52 45 51 
21ecc     46 52 45 51 
21ed0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ed4     46 52 45 51 
21ed8     46 52 45 51 
21edc     46 52 45 51 
21ee0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ee4     46 52 45 51 
21ee8     46 52 45 51 
21eec     46 52 45 51 
21ef0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ef4     46 52 45 51 
21ef8     46 52 45 51 
21efc     46 52 45 51 
21f00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f04     46 52 45 51 
21f08     46 52 45 51 
21f0c     46 52 45 51 
21f10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f14     46 52 45 51 
21f18     46 52 45 51 
21f1c     46 52 45 51 
21f20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f24     46 52 45 51 
21f28     46 52 45 51 
21f2c     46 52 45 51 
21f30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f34     46 52 45 51 
21f38     46 52 45 51 
21f3c     46 52 45 51 
21f40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f44     46 52 45 51 
21f48     46 52 45 51 
21f4c     46 52 45 51 
21f50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f54     46 52 45 51 
21f58     46 52 45 51 
21f5c     46 52 45 51 
21f60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f64     46 52 45 51 
21f68     46 52 45 51 
21f6c     46 52 45 51 
21f70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f74     46 52 45 51 
21f78     46 52 45 51 
21f7c     46 52 45 51 
21f80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f84     46 52 45 51 
21f88     46 52 45 51 
21f8c     46 52 45 51 
21f90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21f94     46 52 45 51 
21f98     46 52 45 51 
21f9c     46 52 45 51 
21fa0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21fa4     46 52 45 51 
21fa8     46 52 45 51 
21fac     46 52 45 51 
21fb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21fb4     46 52 45 51 
21fb8     46 52 45 51 
21fbc     46 52 45 51 
21fc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21fc4     46 52 45 51 
21fc8     46 52 45 51 
21fcc     46 52 45 51 
21fd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21fd4     46 52 45 51 
21fd8     46 52 45 51 
21fdc     46 52 45 51 
21fe0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21fe4     46 52 45 51 
21fe8     46 52 45 51 
21fec     46 52 45 51 
21ff0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ff4     46 52 45 51 
21ff8     46 52 45 51 
21ffc     46 52 45 51 
22000     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22004     46 52 45 51 
22008     46 52 45 51 
2200c     46 52 45 51 
22010     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22014     46 52 45 51 
22018     46 52 45 51 
2201c     46 52 45 51 
22020     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22024     46 52 45 51 
22028     46 52 45 51 
2202c     46 52 45 51 
22030     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22034     46 52 45 51 
22038     46 52 45 51 
2203c     46 52 45 51 
22040     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22044     46 52 45 51 
22048     46 52 45 51 
2204c     46 52 45 51 
22050     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22054     46 52 45 51 
22058     46 52 45 51 
2205c     46 52 45 51 
22060     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22064     46 52 45 51 
22068     46 52 45 51 
2206c     46 52 45 51 
22070     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22074     46 52 45 51 
22078     46 52 45 51 
2207c     46 52 45 51 
22080     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22084     46 52 45 51 
22088     46 52 45 51 
2208c     46 52 45 51 
22090     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22094     46 52 45 51 
22098     46 52 45 51 
2209c     46 52 45 51 
220a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220a4     46 52 45 51 
220a8     46 52 45 51 
220ac     46 52 45 51 
220b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220b4     46 52 45 51 
220b8     46 52 45 51 
220bc     46 52 45 51 
220c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220c4     46 52 45 51 
220c8     46 52 45 51 
220cc     46 52 45 51 
220d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220d4     46 52 45 51 
220d8     46 52 45 51 
220dc     46 52 45 51 
220e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220e4     46 52 45 51 
220e8     46 52 45 51 
220ec     46 52 45 51 
220f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
220f4     46 52 45 51 
220f8     46 52 45 51 
220fc     46 52 45 51 
22100     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22104     46 52 45 51 
22108     46 52 45 51 
2210c     46 52 45 51 
22110     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22114     46 52 45 51 
22118     46 52 45 51 
2211c     46 52 45 51 
22120     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22124     46 52 45 51 
22128     46 52 45 51 
2212c     46 52 45 51 
22130     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22134     46 52 45 51 
22138     46 52 45 51 
2213c     46 52 45 51 
22140     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22144     46 52 45 51 
22148     46 52 45 51 
2214c     46 52 45 51 
22150     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22154     46 52 45 51 
22158     46 52 45 51 
2215c     46 52 45 51 
22160     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22164     46 52 45 51 
22168     46 52 45 51 
2216c     46 52 45 51 
22170     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22174     46 52 45 51 
22178     46 52 45 51 
2217c     46 52 45 51 
22180     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22184     46 52 45 51 
22188     46 52 45 51 
2218c     46 52 45 51 
22190     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22194     46 52 45 51 
22198     46 52 45 51 
2219c     46 52 45 51 
221a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221a4     46 52 45 51 
221a8     46 52 45 51 
221ac     46 52 45 51 
221b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221b4     46 52 45 51 
221b8     46 52 45 51 
221bc     46 52 45 51 
221c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221c4     46 52 45 51 
221c8     46 52 45 51 
221cc     46 52 45 51 
221d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221d4     46 52 45 51 
221d8     46 52 45 51 
221dc     46 52 45 51 
221e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221e4     46 52 45 51 
221e8     46 52 45 51 
221ec     46 52 45 51 
221f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
221f4     46 52 45 51 
221f8     46 52 45 51 
221fc     46 52 45 51 
22200     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22204     46 52 45 51 
22208     46 52 45 51 
2220c     46 52 45 51 
22210     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22214     46 52 45 51 
22218     46 52 45 51 
2221c     46 52 45 51 
22220     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22224     46 52 45 51 
22228     46 52 45 51 
2222c     46 52 45 51 
22230     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22234     46 52 45 51 
22238     46 52 45 51 
2223c     46 52 45 51 
22240     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22244     46 52 45 51 
22248     46 52 45 51 
2224c     46 52 45 51 
22250     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22254     46 52 45 51 
22258     46 52 45 51 
2225c     46 52 45 51 
22260     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22264     46 52 45 51 
22268     46 52 45 51 
2226c     46 52 45 51 
22270     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22274     46 52 45 51 
22278     46 52 45 51 
2227c     46 52 45 51 
22280     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22284     46 52 45 51 
22288     46 52 45 51 
2228c     46 52 45 51 
22290     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22294     46 52 45 51 
22298     46 52 45 51 
2229c     46 52 45 51 
222a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222a4     46 52 45 51 
222a8     46 52 45 51 
222ac     46 52 45 51 
222b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222b4     46 52 45 51 
222b8     46 52 45 51 
222bc     46 52 45 51 
222c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222c4     46 52 45 51 
222c8     46 52 45 51 
222cc     46 52 45 51 
222d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222d4     46 52 45 51 
222d8     46 52 45 51 
222dc     46 52 45 51 
222e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222e4     46 52 45 51 
222e8     46 52 45 51 
222ec     46 52 45 51 
222f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
222f4     46 52 45 51 
222f8     46 52 45 51 
222fc     46 52 45 51 
22300     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22304     46 52 45 51 
22308     46 52 45 51 
2230c     46 52 45 51 
22310     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22314     46 52 45 51 
22318     46 52 45 51 
2231c     46 52 45 51 
22320     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22324     46 52 45 51 
22328     46 52 45 51 
2232c     46 52 45 51 
22330     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22334     46 52 45 51 
22338     46 52 45 51 
2233c     46 52 45 51 
22340     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22344     46 52 45 51 
22348     46 52 45 51 
2234c     46 52 45 51 
22350     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22354     46 52 45 51 
22358     46 52 45 51 
2235c     46 52 45 51 
22360     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
22364                 | 
22364     00 00 00 00 
22368     18 00 00 00 
2236c     31 00 00 00 
22370     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
22374     61 00 00 00 
22378     78 00 00 00 
2237c     8D 00 00 00 
22380     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
22384     B4 00 00 00 
22388     C5 00 00 00 
2238c     D4 00 00 00 
22390     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
22394     EB 00 00 00 
22398     F4 00 00 00 
2239c     FA 00 00 00 
223a0     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
223a4     FF 00 00 00 
223a8     FD 00 00 00 
223ac     FA 00 00 00 
223b0     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
223b4     EB 00 00 00 
223b8     E0 00 00 00 
223bc     D4 00 00 00 
223c0     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
223c4     B4 00 00 00 
223c8     A1 00 00 00 
223cc     8D 00 00 00 
223d0     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
223d4     61 00 00 00 
223d8     4A 00 00 00 
223dc     31 00 00 00 
223e0     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
223e4     00 00 00 00 
223e8     E8 FF FF FF 
223ec     CF FF FF FF 
223f0     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
223f4     9F FF FF FF 
223f8     88 FF FF FF 
223fc     73 FF FF FF 
22400     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
22404     4C FF FF FF 
22408     3B FF FF FF 
2240c     2C FF FF FF 
22410     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
22414     15 FF FF FF 
22418     0C FF FF FF 
2241c     06 FF FF FF 
22420     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
22424     01 FF FF FF 
22428     03 FF FF FF 
2242c     06 FF FF FF 
22430     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
22434     15 FF FF FF 
22438     20 FF FF FF 
2243c     2C FF FF FF 
22440     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
22444     4C FF FF FF 
22448     5F FF FF FF 
2244c     73 FF FF FF 
22450     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
22454     9F FF FF FF 
22458     B6 FF FF FF 
2245c     CF FF FF FF 
22460     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
22464                 | 
22464     58 03 28 03 
22468     FA 02 D0 02 
2246c     A6 02 80 02 
22470     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
22474     1A 02 FC 01 
22478     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
2247c     AC 01 94 01 
22480     7D 01 68 01 
22484     53 01 40 01 
22488     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
2248c     0D 01 FE 00 
22490     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
22494     D6 00 CA 00 
22498     BE 00 B4 00 
2249c     AA 00 A0 00 
224a0     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
224a4     87 00 7F 00 
224a8     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
224ac     6B 00 22 03 
224b0     F5 02 CB 02 
224b4     A2 02 7D 02 
224b8     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
224bc     17 02 F9 01 
224c0     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
224c4     A9 01 91 01 
224c8     7B 01 65 01 
224cc     51 01 3E 01 
224d0     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
224d4     0C 01 FD 00 
224d8     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
224dc     D5 00 C9 00 
224e0     BD 00 B3 00 
224e4     A9 00 9F 00 
224e8     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
224ec     86 00 7E 00 
224f0     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
224f4     4C 03 1C 03 
224f8     F0 02 C5 02 
224fc     9E 02 78 02 
22500     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
22504     14 02 F6 01 
22508     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
2250c     A6 01 8E 01 
22510     78 01 63 01 
22514     4F 01 3C 01 
22518     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
2251c     0A 01 FB 00 
22520     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
22524     D3 00 C7 00 
22528     BC 00 B1 00 
2252c     A7 00 9E 00 
22530     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
22534     85 00 7D 00 
22538     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
2253c     46 03 17 03 
22540     EA 02 C0 02 
22544     99 02 74 02 
22548     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
2254c     10 02 F2 01 
22550     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
22554     A3 01 8B 01 
22558     75 01 60 01 
2255c     4C 01 3A 01 
22560     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
22564     08 01 F9 00 
22568     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
2256c     D1 00 C6 00 
22570     BB 00 B0 00 
22574     A6 00 9D 00 
22578     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
2257c     84 00 7D 00 
22580     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
22584     40 03 11 03 
22588     E5 02 BB 02 
2258c     94 02 6F 02 
22590     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
22594     0C 02 EF 01 
22598     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
2259c     A0 01 88 01 
225a0     72 01 5E 01 
225a4     4A 01 38 01 
225a8     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
225ac     06 01 F7 00 
225b0     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
225b4     D0 00 C4 00 
225b8     B9 00 AF 00 
225bc     A5 00 9C 00 
225c0     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
225c4     83 00 7C 00 
225c8     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
225cc     3A 03 0B 03 
225d0     E0 02 B6 02 
225d4     8F 02 6B 02 
225d8     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
225dc     08 02 EB 01 
225e0     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
225e4     9D 01 86 01 
225e8     70 01 5B 01 
225ec     48 01 35 01 
225f0     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
225f4     04 01 F5 00 
225f8     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
225fc     CE 00 C3 00 
22600     B8 00 AE 00 
22604     A4 00 9B 00 
22608     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
2260c     82 00 7B 00 
22610     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
22614     34 03 06 03 
22618     DA 02 B1 02 
2261c     8B 02 66 02 
22620     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
22624     04 02 E7 01 
22628     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
2262c     9A 01 83 01 
22630     6D 01 59 01 
22634     45 01 33 01 
22638     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
2263c     02 01 F4 00 
22640     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
22644     CD 00 C1 00 
22648     B7 00 AC 00 
2264c     A3 00 9A 00 
22650     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
22654     81 00 7A 00 
22658     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
2265c     2E 03 00 03 
22660     D5 02 AC 02 
22664     86 02 62 02 
22668     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
2266c     01 02 E4 01 
22670     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
22674     97 01 80 01 
22678     6B 01 56 01 
2267c     43 01 31 01 
22680     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
22684     00 01 F2 00 
22688     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
2268c     CC 00 C0 00 
22690     B5 00 AB 00 
22694     A1 00 98 00 
22698     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
2269c     80 00 79 00 
226a0     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
226a4     8B 03 58 03 
226a8     28 03 FA 02 
226ac     D0 02 A6 02 
226b0     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
226b4     3A 02 1A 02 
226b8     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
226bc     C5 01 AC 01 
226c0     94 01 7D 01 
226c4     68 01 53 01 
226c8     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
226cc     1D 01 0D 01 
226d0     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
226d4     E2 00 D6 00 
226d8     CA 00 BE 00 
226dc     B4 00 AA 00 
226e0     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
226e4     8F 00 87 00 
226e8     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
226ec     84 03 52 03 
226f0     22 03 F5 02 
226f4     CB 02 A3 02 
226f8     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
226fc     37 02 17 02 
22700     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
22704     C2 01 A9 01 
22708     91 01 7B 01 
2270c     65 01 51 01 
22710     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
22714     1C 01 0C 01 
22718     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
2271c     E1 00 D4 00 
22720     C8 00 BD 00 
22724     B3 00 A9 00 
22728     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
2272c     8E 00 86 00 
22730     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
22734     7E 03 4C 03 
22738     1C 03 F0 02 
2273c     C5 02 9E 02 
22740     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
22744     33 02 14 02 
22748     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
2274c     BF 01 A6 01 
22750     8E 01 78 01 
22754     63 01 4F 01 
22758     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
2275c     1A 01 0A 01 
22760     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
22764     DF 00 D3 00 
22768     C7 00 BC 00 
2276c     B1 00 A7 00 
22770     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
22774     8D 00 85 00 
22778     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
2277c     77 03 46 03 
22780     17 03 EA 02 
22784     C0 02 99 02 
22788     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
2278c     2F 02 10 02 
22790     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
22794     BC 01 A3 01 
22798     8B 01 75 01 
2279c     60 01 4C 01 
227a0     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
227a4     18 01 08 01 
227a8     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
227ac     DE 00 D1 00 
227b0     C6 00 BB 00 
227b4     B0 00 A6 00 
227b8     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
227bc     8C 00 84 00 
227c0     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
227c4     71 03 40 03 
227c8     11 03 E5 02 
227cc     BB 02 94 02 
227d0     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
227d4     2B 02 0C 02 
227d8     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
227dc     B9 01 A0 01 
227e0     88 01 72 01 
227e4     5E 01 4A 01 
227e8     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
227ec     16 01 06 01 
227f0     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
227f4     DC 00 D0 00 
227f8     C4 00 B9 00 
227fc     AF 00 A5 00 
22800     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
22804     8B 00 83 00 
22808     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
2280c     6B 03 3A 03 
22810     0B 03 E0 02 
22814     B6 02 8F 02 
22818     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
2281c     27 02 08 02 
22820     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
22824     B5 01 9D 01 
22828     86 01 70 01 
2282c     5B 01 48 01 
22830     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
22834     14 01 04 01 
22838     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
2283c     DB 00 CE 00 
22840     C3 00 B8 00 
22844     AE 00 A4 00 
22848     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
2284c     8A 00 82 00 
22850     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
22854     64 03 34 03 
22858     06 03 DA 02 
2285c     B1 02 8B 02 
22860     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
22864     23 02 04 02 
22868     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
2286c     B2 01 9A 01 
22870     83 01 6D 01 
22874     59 01 45 01 
22878     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
2287c     12 01 02 01 
22880     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
22884     D9 00 CD 00 
22888     C1 00 B7 00 
2288c     AC 00 A3 00 
22890     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
22894     89 00 81 00 
22898     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
2289c     5E 03 2E 03 
228a0     00 03 D5 02 
228a4     AC 02 86 02 
228a8     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
228ac     1F 02 01 02 
228b0     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
228b4     AF 01 97 01 
228b8     80 01 6B 01 
228bc     56 01 43 01 
228c0     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
228c4     10 01 00 01 
228c8     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
228cc     D8 00 CB 00 
228d0     C0 00 B5 00 
228d4     AB 00 A1 00 
228d8     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
228dc     88 00 80 00 
228e0     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
228e4                 | 	alignl
228e4                 | _audio019_spin2_dat_
228e4                 | 
228e4                 | audio       org     0
228e4     00 F2 07 F6 | 			mov     ptrb,#0
228e8     0E 7A 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
228ec     0E C8 1C FC |             wxpin   #100,#left
228f0     0F 7A 05 FC |             wrpin   dac,#right
228f4     0F C8 1C FC |             wxpin   #100,#right
228f8     41 9C 64 FD |             dirh    #left addpins 1
228fc     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
22900     75 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
22904     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
22908                 |             
22908                 | '---------------------------------------------------------------------------------        
22908                 | '----------------- The main loop -------------------------------------------------
22908                 | '---------------------------------------------------------------------------------
22908                 | 
22908     81 04 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
2290c     10 00 90 CD |       if_c  jmp     #loop1
22910                 |   
22910     09 4A 05 F6 |             mov     cn,#9
22914     81 4A 8D F9 | p402        altd    cn,#a21000000
22918     80 00 80 F1 |             sub     0-0,a20000000
2291c     FD 4B 6D FB |             djnz    cn,#p402
22920                 |     
22920     00 4A 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
22924     83 4C 01 F6 |             mov     ct,time1           ' with the lowest next sample time
22928     84 4C 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
2292c     01 4A 05 C6 |     if_c    mov     cn,#1
22930     85 4C 39 F3 |             fle     ct,time3 wcz
22934     02 4A 05 C6 |     if_c    mov     cn,#2     
22938     86 4C 39 F3 |             fle     ct,time4 wcz
2293c     03 4A 05 C6 |     if_c    mov     cn,#3
22940     87 4C 39 F3 |             fle     ct,time5 wcz
22944     04 4A 05 C6 |     if_c    mov     cn,#4
22948     88 4C 39 F3 |             fle     ct,time6 wcz
2294c     05 4A 05 C6 |     if_c    mov     cn,#5
22950     89 4C 39 F3 |             fle     ct,time7 wcz
22954     06 4A 05 C6 |     if_c    mov     cn,#6
22958     8A 4C 39 F3 |             fle     ct,time8 wcz
2295c     07 4A 05 C6 |     if_c    mov     cn,#7
22960                 | 
22960                 | 
22960                 | '----------------------------------------------------------------------------------
22960                 | '------------- Compute channel samples --------------------------------------------
22960                 | '----------------------------------------------------------------------------------
22960                 | 
22960                 | 
22960     A5 20 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
22964     05 20 65 F0 |             shl     channeladd,#5
22968     90 F0 03 F1 |             add     ptra,channeladd
2296c                 | 
2296c     28 0E 64 FD |             setq    #7               
22970     00 31 05 FB |             rdlong  pointer0,ptra
22974                 |             
22974     9D 46 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
22978     9D 44 31 F9 |     	    getword avol0,volpan0,#0
2297c     9E 42 39 F9 | 	        getword askip0,freqskip0,#1    	    
22980     9E 40 31 F9 | 	        getword afreq0,freqskip0,#0
22984                 | 
22984     83 4A 95 F9 |             alts    cn, #time1
22988     00 4E 01 F6 |             mov     dt0,0-0   
2298c     82 4E 81 F1 |             sub     dt0,time0
22990                 | 
22990     83 4A 8D F9 |             altd    cn, #time1
22994     A0 00 00 F1 |             add     0-0,afreq0  	
22998                 | 
22998     A1 30 01 F1 |             add     pointer0,askip0
2299c     9C 30 19 F2 |             cmp     pointer0,lend0 wcz
229a0     9C 30 81 31 |     if_ge   sub     pointer0,lend0	        
229a4     9B 30 01 31 |     if_ge   add     pointer0,lstart0       
229a8     98 24 01 F6 |             mov     qq,pointer0
229ac     9A 24 01 F1 |             add     qq,sstart0
229b0                 | 
229b0     1F 34 0D F4 |             testb   sstart0,#31 wz
229b4                 | 
229b4     92 26 C1 5A |     if_nz   rdbyte  spl,qq
229b8     08 26 65 50 |     if_nz   shl     spl,#8
229bc     92 26 E1 AA |     if_z    rdword  spl,qq
229c0                 | 
229c0     A2 26 31 FA |             scas    spl,avol0
229c4     00 26 01 F6 |             mov     spl,0-0
229c8                 |  
229c8     A3 26 31 FA |             scas    spl,apan0
229cc     00 50 01 F6 |             mov     ls0,0-0
229d0                 |  
229d0     AD 4A 8D F9 |             altd    cn,#ls1
229d4     A8 00 00 F6 |             mov     0-0,ls0
229d8                 |              
229d8     20 00 00 FF 
229dc     00 24 05 F6 |             mov     qq,##16384
229e0     A3 24 81 F1 |             sub     qq,apan0
229e4     92 26 31 FA |             scas    spl,qq
229e8     00 52 01 F6 |             mov     rs0, 0-0
229ec                 | 
229ec     B5 4A 8D F9 |             altd    cn,#rs1
229f0     A9 00 00 F6 |             mov     0-0,rs0
229f4                 | 
229f4     A9 32 29 F9 |             setword sample0,rs0,#1
229f8     A8 32 21 F9 |             setword sample0,ls0,#0
229fc                 |             
229fc                 | 
229fc     1E 34 1D F4 |             bitl   sstart0, #30 wcz            
22a00     00 30 05 A6 |     if_z    mov    pointer0, #0  
22a04     02 35 65 AC |     if_z    wrlong sstart0, ptra[2]
22a08     28 02 64 FD | p403        setq #1
22a0c                 |      
22a0c     00 31 65 FC |             wrlong  pointer0,ptra
22a10     90 F0 83 F1 |             sub     ptra, channeladd
22a14     00 00 90 FD |             jmp     #p101
22a18                 |                        
22a18                 |             
22a18                 |           
22a18                 |             
22a18                 | '------------------------ Channels end here --------------------       
22a18                 | 
22a18                 | ' Now add all channels and put the sample to the buffer    
22a18                 | 
22a18                 | 
22a18     82 48 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
22a1c     01 22 85 A1 |     if_z    sub     front,#1         ' 
22a20     FF 23 05 A5 |     if_z    and     front,#511     
22a24                 |            
22a24                 |     
22a24     00 58 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
22a28     00 56 05 F6 |             mov     ls,#0
22a2c     B5 58 01 F1 |             add     rs,rs1
22a30     B6 58 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
22a34     B7 58 01 F1 |             add     rs,rs3
22a38     B8 58 01 F1 |             add     rs,rs4
22a3c     B9 58 01 F1 |             add     rs,rs5
22a40     BA 58 01 F1 |             add     rs,rs6
22a44     BB 58 01 F1 |             add     rs,rs7
22a48     BC 58 01 F1 |             add     rs,rs8
22a4c                 | 
22a4c                 |            
22a4c     AD 56 01 F1 |             add     ls,ls1
22a50     AE 56 01 F1 |             add     ls,ls2
22a54     AF 56 01 F1 |             add     ls,ls3
22a58     B0 56 01 F1 |             add     ls,ls4
22a5c     B1 56 01 F1 |             add     ls,ls5
22a60     B2 56 01 F1 |             add     ls,ls6
22a64     B3 56 01 F1 |             add     ls,ls7
22a68     B4 56 01 F1 |             add     ls,ls8
22a6c                 | 
22a6c                 |  		
22a6c     0F 56 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
22a70     0F 58 E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
22a74                 | 		    
22a74     AB 58 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
22a78     AC 16 01 F6 |             mov newsample, rs
22a7c                 | 
22a7c     82 48 01 F6 |             mov     oldt0,time0      ' update global time
22a80     A7 04 01 F1 |             add     time0,dt0    
22a84                 | 
22a84                 |             
22a84                 |  
22a84                 |                                      ' now push dt0 samples to the buffer
22a84     00 4E 0D F2 |             cmp      dt0,#0 wz
22a88     94 FE 9F AD |     if_z    jmp      #loop1
22a8c     A7 18 01 F6 |             mov      t1,dt0
22a90                 |   
22a90     F9 1B 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
22a94     01 1A 85 F1 |             sub     t2,#1
22a98     FF 1B 05 F5 |             and     t2,#511
22a9c     91 1A 19 F2 |             cmp     t2,front wcz
22aa0     EC FF 9F AD |     if_e    jmp     #p301    
22aa4                 |     
22aa4     91 16 31 FC |             wrlut   newsample, front
22aa8     01 22 05 F1 |             add     front,#1
22aac     FF 23 05 F5 |             and     front,#511
22ab0     F7 19 6D FB |             djnz    t1,#p301
22ab4                 |             
22ab4     50 FE 9F FD |             jmp     #loop            'loop
22ab8                 | 
22ab8                 | '-------------------------------------------------------------------------
22ab8                 | '------------------ This is the end of the main loop ---------------------
22ab8                 | '-------------------------------------------------------------------------
22ab8                 | 
22ab8                 | '--------------------------------------------------------------------------
22ab8                 | '------ Interrupt service -------------------------------------------------
22ab8                 | '------ Output the sample, get the next one if exists ---------------------
22ab8                 | '--------------------------------------------------------------------------
22ab8                 | 
22ab8     0E 28 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
22abc     0F 2A 25 FC |             wypin   rsample,#right       '4
22ac0                 |            
22ac0     91 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
22ac4     F5 FF 3B AB |     if_e    reti1                        '8/10
22ac8                 | 
22ac8     E1 2D A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
22acc     96 2A 39 F9 |           	getword rsample,lsnext,#1    '13
22ad0     96 28 31 F9 |           	getword lsample,lsnext,#0    '15
22ad4     F5 FF 3B FB |             reti1                        '17/19 
22ad8                 |           
22ad8                 | '---------------------------------------------------------------------------
22ad8                 | '-------- End of interrupt -------------------------------------------------
22ad8                 | '---------------------------------------------------------------------------    
22ad8                 | 
22ad8                 | 
22ad8                 | '---------------------------------------------------------------------------
22ad8                 | '------- Variables ---------------------------------------------------------
22ad8                 | '---------------------------------------------------------------------------
22ad8                 | 
22ad8                 | ' constants
22ad8                 | 
22ad8     00 00 00 00 | hp long 0
22adc     00 00 00 00 | lp long 0
22ae0     00 00 00 00 | bp long 0
22ae4     00 00 00 10 | a20000000   long $10000000
22ae8     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
22aec                 | 
22aec                 | ' Time variables
22aec                 | 
22aec     00 00 00 00 | time0       long 0    ' Global sample computing time
22af0     01 00 00 00 | time1       long 1    ' Local channels time
22af4     02 00 00 00 | time2       long 2
22af8     03 00 00 00 | time3       long 3
22afc     04 00 00 00 | time4       long 4
22b00     05 00 00 00 | time5       long 5
22b04     06 00 00 00 | time6       long 6
22b08     07 00 00 00 | time7       long 7
22b0c     08 00 00 00 | time8       long 8
22b10                 | 
22b10                 | 
22b10                 | 
22b10     00 00 00 00 | newsample long 0
22b14                 | '
22b14     00 00 00 00 | t1 long 0
22b18     00 00 00 00 | t2 long 0
22b1c                 | '
22b1c     00 00 00 00 | nrsample long 0
22b20     00 00 00 00 | nlsample long 0
22b24                 | '
22b24     00 00 00 00 | channeladd long 0
22b28                 | 
22b28                 | 
22b28     00 00 00 00 | front       long 0
22b2c                 | 
22b2c                 | ' temporary variables 
22b2c                 | '
22b2c     00 00 00 00 | qq          long 0
22b30     00 00 00 00 | spl         long 0
22b34                 | 
22b34                 | ' circular buffer in LUT
22b34                 | 
22b34                 | 
22b34                 | '
22b34                 | 
22b34                 | ' Interrupt ISR variables
22b34                 | 
22b34                 | 
22b34     00 00 00 00 | lsample     long 0
22b38     00 00 00 00 | rsample     long 0
22b3c     00 00 00 00 | lsnext      long 0
22b40     00 00 00 00 | rsnext      long 0 
22b44                 | 
22b44                 | 
22b44     00 00 00 00 | pointer0    long 0
22b48     00 00 00 00 | sample0     long 0
22b4c     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
22b50     00 00 00 00 | lstart0     long 0
22b54     00 00 00 00 | lend0       long 0
22b58     00 00 00 00 | volpan0     long 0
22b5c     00 00 00 00 | freqskip0   long 0
22b60     00 00 00 00 | dummy0      long 0
22b64                 | 
22b64     00 00 00 00 | afreq0      long 0
22b68     00 00 00 00 | askip0      long 0
22b6c     00 00 00 00 | avol0       long 0
22b70     00 00 00 00 | apan0       long 0
22b74                 | 
22b74     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
22b78     00 00 00 00 | cn          long 0
22b7c     00 00 00 00 | ct          long 0
22b80     00 00 00 00 | dt0         long 0
22b84                 | 
22b84                 | ' Samples
22b84     00 00 00 00 | ls0         long 0
22b88     00 00 00 00 | rs0         long 0
22b8c     00 00 00 00 | channel     long 0
22b90     00 00 00 00 | ls          long 0    ' Global sample variable
22b94     00 00 00 00 | rs          long 0
22b98                 | 
22b98     00 00 00 00 | ls1         long 0    ' Channel samples
22b9c     00 00 00 00 | ls2         long 0
22ba0     00 00 00 00 | ls3         long 0
22ba4     00 00 00 00 | ls4         long 0
22ba8     00 00 00 00 | ls5         long 0
22bac     00 00 00 00 | ls6         long 0
22bb0     00 00 00 00 | ls7         long 0
22bb4     00 00 00 00 | ls8         long 0
22bb8     00 00 00 00 | rs1         long 0
22bbc     00 00 00 00 | rs2         long 0
22bc0     00 00 00 00 | rs3         long 0
22bc4     00 00 00 00 | rs4         long 0
22bc8     00 00 00 00 | rs5         long 0
22bcc     00 00 00 00 | rs6         long 0
22bd0     00 00 00 00 | rs7         long 0
22bd4     00 00 00 00 | rs8         long 0
22bd8                 | 
22bd8     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
22bdc                 | 
22bdc     00 00 00 00 
22be0     00 00 00 00 | null  			long 	0,0           ' for channel reset
22be4     73 32 00 04 
22be8     00 00 10 00 
22bec     00 00 00 00 
22bf0     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
22bf4     00 00 C9 00 
22bf8     92 01 5B 02 
22bfc     24 03 ED 03 
22c00     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
22c04     48 06 11 07 
22c08     D9 07 A2 08 
22c0c     6A 09 33 0A 
22c10     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
22c14     8C 0C 54 0D 
22c18     1C 0E E3 0E 
22c1c     AB 0F 72 10 
22c20     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
22c24     C8 12 8F 13 
22c28     55 14 1C 15 
22c2c     E2 15 A8 16 
22c30     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
22c34     F9 18 BE 19 
22c38     82 1A 47 1B 
22c3c     0B 1C CF 1C 
22c40     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
22c44     1A 1F DD 1F 
22c48     9F 20 61 21 
22c4c     23 22 E5 22 
22c50     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
22c54     28 25 E8 25 
22c58     A8 26 67 27 
22c5c     26 28 E5 28 
22c60     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
22c64     1F 2B DC 2B 
22c68     99 2C 55 2D 
22c6c     11 2E CC 2E 
22c70     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
22c74     FB 30 B5 31 
22c78     6E 32 26 33 
22c7c     DF 33 96 34 
22c80     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
22c84     BA 36 6F 37 
22c88     24 38 D9 38 
22c8c     8C 39 40 3A 
22c90     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
22c94     56 3C 07 3D 
22c98     B8 3D 68 3E 
22c9c     17 3F C5 3F 
22ca0     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
22ca4     CE 41 7A 42 
22ca8     25 43 D0 43 
22cac     7A 44 24 45 
22cb0     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
22cb4     1C 47 C3 47 
22cb8     69 48 0F 49 
22cbc     B4 49 58 4A 
22cc0     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
22cc4     3F 4C E0 4C 
22cc8     81 4D 20 4E 
22ccc     BF 4E 5D 4F 
22cd0     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
22cd4     33 51 CE 51 
22cd8     68 52 02 53 
22cdc     9B 53 32 54 
22ce0     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
22ce4     F5 55 8A 56 
22ce8     1D 57 B0 57 
22cec     42 58 D3 58 
22cf0     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
22cf4     82 5A 0F 5B 
22cf8     9C 5B 28 5C 
22cfc     B3 5C 3E 5D 
22d00     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
22d04     D7 5E 5D 5F 
22d08     E3 5F 68 60 
22d0c     EB 60 6E 61 
22d10     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
22d14     F1 62 70 63 
22d18     EE 63 6C 64 
22d1c     E8 64 63 65 
22d20     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
22d24     CF 66 46 67 
22d28     BC 67 32 68 
22d2c     A6 68 19 69 
22d30     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
22d34     6D 6A DC 6A 
22d38     4A 6B B7 6B 
22d3c     23 6C 8E 6C 
22d40     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
22d44     C9 6D 30 6E 
22d48     96 6E FB 6E 
22d4c     5E 6F C1 6F 
22d50     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
22d54     E2 70 40 71 
22d58     9D 71 F9 71 
22d5c     54 72 AE 72 
22d60     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
22d64     B5 73 0A 74 
22d68     5F 74 B2 74 
22d6c     04 75 55 75 
22d70     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
22d74     41 76 8D 76 
22d78     D8 76 22 77 
22d7c     6B 77 B3 77 
22d80     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
22d84     84 78 C7 78 
22d88     09 79 4A 79 
22d8c     89 79 C8 79 
22d90     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
22d94     7C 7A B6 7A 
22d98     EE 7A 26 7B 
22d9c     5C 7B 91 7B 
22da0     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
22da4     29 7C 59 7C 
22da8     88 7C B6 7C 
22dac     E3 7C 0E 7D 
22db0     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
22db4     89 7D B0 7D 
22db8     D5 7D FA 7D 
22dbc     1D 7E 3E 7E 
22dc0     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
22dc4     9C 7E B9 7E 
22dc8     D5 7E EF 7E 
22dcc     09 7F 21 7F 
22dd0     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
22dd4     61 7F 74 7F 
22dd8     86 7F 97 7F 
22ddc     A6 7F B4 7F 
22de0     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
22de4     D8 7F E1 7F 
22de8     E9 7F F0 7F 
22dec     F5 7F F9 7F 
22df0     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
22df4     FF 7F FE 7F 
22df8     FD 7F F9 7F 
22dfc     F5 7F F0 7F 
22e00     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
22e04     D8 7F CD 7F 
22e08     C1 7F B4 7F 
22e0c     A6 7F 97 7F 
22e10     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
22e14     61 7F 4D 7F 
22e18     37 7F 21 7F 
22e1c     09 7F EF 7E 
22e20     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
22e24     9C 7E 7E 7E 
22e28     5F 7E 3E 7E 
22e2c     1D 7E FA 7D 
22e30     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
22e34     89 7D 62 7D 
22e38     39 7D 0E 7D 
22e3c     E3 7C B6 7C 
22e40     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
22e44     29 7C F8 7B 
22e48     C5 7B 91 7B 
22e4c     5C 7B 26 7B 
22e50     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
22e54     7C 7A 41 7A 
22e58     05 7A C8 79 
22e5c     89 79 4A 79 
22e60     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
22e64     84 78 3F 78 
22e68     FA 77 B3 77 
22e6c     6B 77 22 77 
22e70     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
22e74     41 76 F3 75 
22e78     A5 75 55 75 
22e7c     04 75 B2 74 
22e80     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
22e84     B5 73 5E 73 
22e88     07 73 AE 72 
22e8c     54 72 F9 71 
22e90     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
22e94     E2 70 83 70 
22e98     22 70 C1 6F 
22e9c     5E 6F FB 6E 
22ea0     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
22ea4     C9 6D 61 6D 
22ea8     F8 6C 8E 6C 
22eac     23 6C B7 6B 
22eb0     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
22eb4     6D 6A FD 69 
22eb8     8B 69 19 69 
22ebc     A6 68 32 68 
22ec0     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
22ec4     CF 66 56 66 
22ec8     DD 65 63 65 
22ecc     E8 64 6C 64 
22ed0     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
22ed4     F1 62 71 62 
22ed8     F0 61 6E 61 
22edc     EB 60 68 60 
22ee0     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
22ee4     D7 5E 4F 5E 
22ee8     C7 5D 3E 5D 
22eec     B3 5C 28 5C 
22ef0     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
22ef4     82 5A F3 59 
22ef8     64 59 D3 58 
22efc     42 58 B0 57 
22f00     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
22f04     F5 55 60 55 
22f08     C9 54 32 54 
22f0c     9B 53 02 53 
22f10     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
22f14     33 51 97 50 
22f18     FB 4F 5D 4F 
22f1c     BF 4E 20 4E 
22f20     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
22f24     3F 4C 9D 4B 
22f28     FB 4A 58 4A 
22f2c     B4 49 0F 49 
22f30     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
22f34     1C 47 75 46 
22f38     CD 45 24 45 
22f3c     7A 44 D0 43 
22f40     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
22f44     CE 41 21 41 
22f48     73 40 C5 3F 
22f4c     17 3F 68 3E 
22f50     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
22f54     56 3C A5 3B 
22f58     F2 3A 40 3A 
22f5c     8C 39 D9 38 
22f60     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
22f64     BA 36 04 36 
22f68     4D 35 96 34 
22f6c     DF 33 26 33 
22f70     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
22f74     FB 30 41 30 
22f78     87 2F CC 2E 
22f7c     11 2E 55 2D 
22f80     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
22f84     1F 2B 61 2A 
22f88     A3 29 E5 28 
22f8c     26 28 67 27 
22f90     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
22f94     28 25 67 24 
22f98     A6 23 E5 22 
22f9c     23 22 61 21 
22fa0     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
22fa4     1A 1F 57 1E 
22fa8     93 1D CF 1C 
22fac     0B 1C 47 1B 
22fb0     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
22fb4     F9 18 33 18 
22fb8     6E 17 A8 16 
22fbc     E2 15 1C 15 
22fc0     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
22fc4     C8 12 01 12 
22fc8     3A 11 72 10 
22fcc     AB 0F E3 0E 
22fd0     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
22fd4     8C 0C C4 0B 
22fd8     FB 0A 33 0A 
22fdc     6A 09 A2 08 
22fe0     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
22fe4     48 06 7F 05 
22fe8     B6 04 ED 03 
22fec     24 03 5B 02 
22ff0     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
22ff4     00 00 37 FF 
22ff8     6E FE A5 FD 
22ffc     DC FC 13 FC 
23000     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
23004     B8 F9 EF F8 
23008     27 F8 5E F7 
2300c     96 F6 CD F5 
23010     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
23014     74 F3 AC F2 
23018     E4 F1 1D F1 
2301c     55 F0 8E EF 
23020     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
23024     38 ED 71 EC 
23028     AB EB E4 EA 
2302c     1E EA 58 E9 
23030     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
23034     07 E7 42 E6 
23038     7E E5 B9 E4 
2303c     F5 E3 31 E3 
23040     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
23044     E6 E0 23 E0 
23048     61 DF 9F DE 
2304c     DD DD 1B DD 
23050     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
23054     D8 DA 18 DA 
23058     58 D9 99 D8 
2305c     DA D7 1B D7 
23060     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
23064     E1 D4 24 D4 
23068     67 D3 AB D2 
2306c     EF D1 34 D1 
23070     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
23074     05 CF 4B CE 
23078     92 CD DA CC 
2307c     21 CC 6A CB 
23080     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
23084     46 C9 91 C8 
23088     DC C7 27 C7 
2308c     74 C6 C0 C5 
23090     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
23094     AA C3 F9 C2 
23098     48 C2 98 C1 
2309c     E9 C0 3B C0 
230a0     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
230a4     32 BE 86 BD 
230a8     DB BC 30 BC 
230ac     86 BB DC BA 
230b0     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
230b4     E4 B8 3D B8 
230b8     97 B7 F1 B6 
230bc     4C B6 A8 B5 
230c0     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
230c4     C1 B3 20 B3 
230c8     7F B2 E0 B1 
230cc     41 B1 A3 B0 
230d0     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
230d4     CD AE 32 AE 
230d8     98 AD FE AC 
230dc     65 AC CE AB 
230e0     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
230e4     0B AA 76 A9 
230e8     E3 A8 50 A8 
230ec     BE A7 2D A7 
230f0     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
230f4     7E A5 F1 A4 
230f8     64 A4 D8 A3 
230fc     4D A3 C2 A2 
23100     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
23104     29 A1 A3 A0 
23108     1D A0 98 9F 
2310c     15 9F 92 9E 
23110     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
23114     0F 9D 90 9C 
23118     12 9C 94 9B 
2311c     18 9B 9D 9A 
23120     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
23124     31 99 BA 98 
23128     44 98 CE 97 
2312c     5A 97 E7 96 
23130     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
23134     93 95 24 95 
23138     B6 94 49 94 
2313c     DD 93 72 93 
23140     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
23144     37 92 D0 91 
23148     6A 91 05 91 
2314c     A2 90 3F 90 
23150     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
23154     1E 8F C0 8E 
23158     63 8E 07 8E 
2315c     AC 8D 52 8D 
23160     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
23164     4B 8C F6 8B 
23168     A1 8B 4E 8B 
2316c     FC 8A AB 8A 
23170     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
23174     BF 89 73 89 
23178     28 89 DE 88 
2317c     95 88 4D 88 
23180     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
23184     7C 87 39 87 
23188     F7 86 B6 86 
2318c     77 86 38 86 
23190     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
23194     84 85 4A 85 
23198     12 85 DA 84 
2319c     A4 84 6F 84 
231a0     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
231a4     D7 83 A7 83 
231a8     78 83 4A 83 
231ac     1D 83 F2 82 
231b0     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
231b4     77 82 50 82 
231b8     2B 82 06 82 
231bc     E3 81 C2 81 
231c0     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
231c4     64 81 47 81 
231c8     2B 81 11 81 
231cc     F7 80 DF 80 
231d0     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
231d4     9F 80 8C 80 
231d8     7A 80 69 80 
231dc     5A 80 4C 80 
231e0     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
231e4     28 80 1F 80 
231e8     17 80 10 80 
231ec     0B 80 07 80 
231f0     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
231f4     01 80 02 80 
231f8     03 80 07 80 
231fc     0B 80 10 80 
23200     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
23204     28 80 33 80 
23208     3F 80 4C 80 
2320c     5A 80 69 80 
23210     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
23214     9F 80 B3 80 
23218     C9 80 DF 80 
2321c     F7 80 11 81 
23220     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
23224     64 81 82 81 
23228     A1 81 C2 81 
2322c     E3 81 06 82 
23230     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
23234     77 82 9E 82 
23238     C7 82 F2 82 
2323c     1D 83 4A 83 
23240     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
23244     D7 83 08 84 
23248     3B 84 6F 84 
2324c     A4 84 DA 84 
23250     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
23254     84 85 BF 85 
23258     FB 85 38 86 
2325c     77 86 B6 86 
23260     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
23264     7C 87 C1 87 
23268     06 88 4D 88 
2326c     95 88 DE 88 
23270     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
23274     BF 89 0D 8A 
23278     5B 8A AB 8A 
2327c     FC 8A 4E 8B 
23280     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
23284     4B 8C A2 8C 
23288     F9 8C 52 8D 
2328c     AC 8D 07 8E 
23290     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
23294     1E 8F 7D 8F 
23298     DE 8F 3F 90 
2329c     A2 90 05 91 
232a0     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
232a4     37 92 9F 92 
232a8     08 93 72 93 
232ac     DD 93 49 94 
232b0     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
232b4     93 95 03 96 
232b8     75 96 E7 96 
232bc     5A 97 CE 97 
232c0     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
232c4     31 99 AA 99 
232c8     23 9A 9D 9A 
232cc     18 9B 94 9B 
232d0     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
232d4     0F 9D 8F 9D 
232d8     10 9E 92 9E 
232dc     15 9F 98 9F 
232e0     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
232e4     29 A1 B1 A1 
232e8     39 A2 C2 A2 
232ec     4D A3 D8 A3 
232f0     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
232f4     7E A5 0D A6 
232f8     9C A6 2D A7 
232fc     BE A7 50 A8 
23300     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
23304     0B AA A0 AA 
23308     37 AB CE AB 
2330c     65 AC FE AC 
23310     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
23314     CD AE 69 AF 
23318     05 B0 A3 B0 
2331c     41 B1 E0 B1 
23320     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
23324     C1 B3 63 B4 
23328     05 B5 A8 B5 
2332c     4C B6 F1 B6 
23330     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
23334     E4 B8 8B B9 
23338     33 BA DC BA 
2333c     86 BB 30 BC 
23340     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
23344     32 BE DF BE 
23348     8D BF 3B C0 
2334c     E9 C0 98 C1 
23350     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
23354     AA C3 5B C4 
23358     0E C5 C0 C5 
2335c     74 C6 27 C7 
23360     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
23364     46 C9 FC C9 
23368     B3 CA 6A CB 
2336c     21 CC DA CC 
23370     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
23374     05 CF BF CF 
23378     79 D0 34 D1 
2337c     EF D1 AB D2 
23380     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
23384     E1 D4 9F D5 
23388     5D D6 1B D7 
2338c     DA D7 99 D8 
23390     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
23394     D8 DA 99 DB 
23398     5A DC 1B DD 
2339c     DD DD 9F DE 
233a0     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
233a4     E6 E0 A9 E1 
233a8     6D E2 31 E3 
233ac     F5 E3 B9 E4 
233b0     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
233b4     07 E7 CD E7 
233b8     92 E8 58 E9 
233bc     1E EA E4 EA 
233c0     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
233c4     38 ED FF ED 
233c8     C6 EE 8E EF 
233cc     55 F0 1D F1 
233d0     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
233d4     74 F3 3C F4 
233d8     05 F5 CD F5 
233dc     96 F6 5E F7 
233e0     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
233e4     B8 F9 81 FA 
233e8     4A FB 13 FC 
233ec     DC FC A5 FD 
233f0     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
233f4                 | 	alignl
233f4                 | __system__dat_
233f4     00 00 00 00 
233f8     00 00 00 00 | 	byte	$00[8]
233fc     03 00 00 00 
23400     00 00 00 00 
23404     00 00 00 00 
23408     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2340c     00 00 00 00 
      ...             
23868     00 00 00 00 
2386c     00 00 00 00 | 	byte	$00[1124]
23870     05 00 00 00 
23874     00 00 00 00 
23878     00 00 00 00 
2387c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
23880     48 3A 02 00 | 	long	@@@__system__dat_ + 1620
23884     50 3A 02 00 | 	long	@@@__system__dat_ + 1628
23888     00 00 00 00 | 	byte	$00, $00, $00, $00
2388c     58 3A 02 00 | 	long	@@@__system__dat_ + 1636
23890     60 3A 02 00 | 	long	@@@__system__dat_ + 1644
23894     00 00 00 00 
23898     00 00 00 00 | 	byte	$00[8]
2389c     01 00 00 00 
238a0     06 00 00 00 
238a4     00 00 00 00 
238a8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
238ac     00 00 00 00 | 	byte	$00, $00, $00, $00
238b0     68 3A 02 00 | 	long	@@@__system__dat_ + 1652
238b4     70 3A 02 00 | 	long	@@@__system__dat_ + 1660
238b8     00 00 00 00 | 	byte	$00, $00, $00, $00
238bc     78 3A 02 00 | 	long	@@@__system__dat_ + 1668
238c0     80 3A 02 00 | 	long	@@@__system__dat_ + 1676
238c4     00 00 00 00 
238c8     00 00 00 00 | 	byte	$00[8]
238cc     01 00 00 00 
238d0     06 00 00 00 
238d4     00 00 00 00 
238d8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
238dc     00 00 00 00 | 	byte	$00, $00, $00, $00
238e0     88 3A 02 00 | 	long	@@@__system__dat_ + 1684
238e4     90 3A 02 00 | 	long	@@@__system__dat_ + 1692
238e8     00 00 00 00 | 	byte	$00, $00, $00, $00
238ec     98 3A 02 00 | 	long	@@@__system__dat_ + 1700
238f0     A0 3A 02 00 | 	long	@@@__system__dat_ + 1708
238f4     00 00 00 00 
      ...             
23a44     00 00 00 00 
23a48     00 00 00 00 | 	byte	$00[344]
23a4c     AC 65 00 00 | 	long	@@@__system___tx
23a50     00 00 00 00 | 	byte	$00, $00, $00, $00
23a54     F4 65 00 00 | 	long	@@@__system___rx
23a58     00 00 00 00 | 	byte	$00, $00, $00, $00
23a5c     40 84 00 00 | 	long	@@@__system___rxtxioctl_0619
23a60     00 00 00 00 | 	byte	$00, $00, $00, $00
23a64     B8 84 00 00 | 	long	@@@__system____dummy_flush_0620
23a68     00 00 00 00 | 	byte	$00, $00, $00, $00
23a6c     AC 65 00 00 | 	long	@@@__system___tx
23a70     00 00 00 00 | 	byte	$00, $00, $00, $00
23a74     F4 65 00 00 | 	long	@@@__system___rx
23a78     00 00 00 00 | 	byte	$00, $00, $00, $00
23a7c     40 84 00 00 | 	long	@@@__system___rxtxioctl_0619
23a80     00 00 00 00 | 	byte	$00, $00, $00, $00
23a84     B8 84 00 00 | 	long	@@@__system____dummy_flush_0620
23a88     00 00 00 00 | 	byte	$00, $00, $00, $00
23a8c     AC 65 00 00 | 	long	@@@__system___tx
23a90     00 00 00 00 | 	byte	$00, $00, $00, $00
23a94     F4 65 00 00 | 	long	@@@__system___rx
23a98     00 00 00 00 | 	byte	$00, $00, $00, $00
23a9c     40 84 00 00 | 	long	@@@__system___rxtxioctl_0619
23aa0     00 00 00 00 | 	byte	$00, $00, $00, $00
23aa4     B8 84 00 00 | 	long	@@@__system____dummy_flush_0620
23aa8                 | 	alignl
23aa8                 | _ff_cc_dat_
23aa8     00 00 00 00 
23aac     00 00       | 	byte	$00[6]
23aae     43 55 45 41 
23ab2     41 41 41 43 
23ab6     45 45 45 49 
23aba     49 49 41 41 | 	byte	$43, $55, $45, $41, $41, $41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41
23abe     45 92 92 4F 
23ac2     4F 4F 55 55 
23ac6     59 4F 55 4F 
23aca     9C 4F 9E 9F | 	byte	$45, $92, $92, $4f, $4f, $4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f
23ace     41 49 4F 55 
23ad2     A5 A5 A6 A7 
23ad6     A8 A9 AA AB 
23ada     AC AD AE AF | 	byte	$41, $49, $4f, $55, $a5, $a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af
23ade     B0 B1 B2 B3 
23ae2     B4 41 41 41 
23ae6     B8 B9 BA BB 
23aea     BC BD BE BF | 	byte	$b0, $b1, $b2, $b3, $b4, $41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf
23aee     C0 C1 C2 C3 
23af2     C4 C5 41 41 
23af6     C8 C9 CA CB 
23afa     CC CD CE CF | 	byte	$c0, $c1, $c2, $c3, $c4, $c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf
23afe     D1 D1 45 45 
23b02     45 49 49 49 
23b06     49 D9 DA DB 
23b0a     DC DD 49 DF | 	byte	$d1, $d1, $45, $45, $45, $49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df
23b0e     4F E1 4F 4F 
23b12     4F 4F E6 E8 
23b16     E8 55 55 55 
23b1a     59 59 EE EF | 	byte	$4f, $e1, $4f, $4f, $4f, $4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef
23b1e     F0 F1 F2 F3 
23b22     F4 F5 F6 F7 
23b26     F8 F9 FA FB 
23b2a     FC FD FE FF | 	byte	$f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff
23b2e     01 00 04 00 
23b32     10 00 40 00 
23b36     00 01 00 02 
23b3a     00 00 01 00 | 	byte	$01, $00, $04, $00, $10, $00, $40, $00, $00, $01, $00, $02, $00, $00, $01, $00
23b3e     02 00 04 00 
23b42     08 00 10 00 
23b46     20 00 00 00 
23b4a     00 00 07 00 | 	byte	$02, $00, $04, $00, $08, $00, $10, $00, $20, $00, $00, $00, $00, $00, $07, $00
23b4e     00 00 00 00 
23b52     00 00 00 00 
23b56     00 00 00 00 
23b5a     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
23b5c     9C 3B 02 00 | 	long	@@@_ff_cc_dat_ + 244
23b60     A4 3B 02 00 | 	long	@@@_ff_cc_dat_ + 252
23b64     AC 3B 02 00 | 	long	@@@_ff_cc_dat_ + 260
23b68     B4 3B 02 00 | 	long	@@@_ff_cc_dat_ + 268
23b6c     BC 3B 02 00 | 	long	@@@_ff_cc_dat_ + 276
23b70     C4 3B 02 00 | 	long	@@@_ff_cc_dat_ + 284
23b74     CC 3B 02 00 | 	long	@@@_ff_cc_dat_ + 292
23b78     00 00 00 00 | 	byte	$00, $00, $00, $00
23b7c     D4 3B 02 00 | 	long	@@@_ff_cc_dat_ + 300
23b80     DC 3B 02 00 | 	long	@@@_ff_cc_dat_ + 308
23b84     E4 3B 02 00 | 	long	@@@_ff_cc_dat_ + 316
23b88     EC 3B 02 00 | 	long	@@@_ff_cc_dat_ + 324
23b8c     F4 3B 02 00 | 	long	@@@_ff_cc_dat_ + 332
23b90     FC 3B 02 00 | 	long	@@@_ff_cc_dat_ + 340
23b94     04 3C 02 00 | 	long	@@@_ff_cc_dat_ + 348
23b98     0C 3C 02 00 | 	long	@@@_ff_cc_dat_ + 356
23b9c     00 00 00 00 | 	byte	$00, $00, $00, $00
23ba0     A8 E8 00 00 | 	long	@@@_ff_cc_v_open_0548
23ba4     00 00 00 00 | 	byte	$00, $00, $00, $00
23ba8     E8 E0 00 00 | 	long	@@@_ff_cc_v_creat_0502
23bac     00 00 00 00 | 	byte	$00, $00, $00, $00
23bb0     90 E1 00 00 | 	long	@@@_ff_cc_v_close_0505
23bb4     00 00 00 00 | 	byte	$00, $00, $00, $00
23bb8     90 E5 00 00 | 	long	@@@_ff_cc_v_read_0530
23bbc     00 00 00 00 | 	byte	$00, $00, $00, $00
23bc0     B8 E6 00 00 | 	long	@@@_ff_cc_v_write_0534
23bc4     00 00 00 00 | 	byte	$00, $00, $00, $00
23bc8     AC E7 00 00 | 	long	@@@_ff_cc_v_lseek_0538
23bcc     00 00 00 00 | 	byte	$00, $00, $00, $00
23bd0     4C E8 00 00 | 	long	@@@_ff_cc_v_ioctl
23bd4     00 00 00 00 | 	byte	$00, $00, $00, $00
23bd8     D4 E1 00 00 | 	long	@@@_ff_cc_v_opendir_0508
23bdc     00 00 00 00 | 	byte	$00, $00, $00, $00
23be0     54 E2 00 00 | 	long	@@@_ff_cc_v_closedir_0511
23be4     00 00 00 00 | 	byte	$00, $00, $00, $00
23be8     98 E2 00 00 | 	long	@@@_ff_cc_v_readdir_0514
23bec     00 00 00 00 | 	byte	$00, $00, $00, $00
23bf0     8C E3 00 00 | 	long	@@@_ff_cc_v_stat_0526
23bf4     00 00 00 00 | 	byte	$00, $00, $00, $00
23bf8     68 E8 00 00 | 	long	@@@_ff_cc_v_mkdir
23bfc     00 00 00 00 | 	byte	$00, $00, $00, $00
23c00     88 E8 00 00 | 	long	@@@_ff_cc_v_rmdir_0542
23c04     00 00 00 00 | 	byte	$00, $00, $00, $00
23c08     78 E8 00 00 | 	long	@@@_ff_cc_v_remove
23c0c     00 00 00 00 | 	byte	$00, $00, $00, $00
23c10     98 E8 00 00 | 	long	@@@_ff_cc_v_rename_0544
23c14     00 00 00 00 
23c18     00 00 00 00 
23c1c     00 00 00 00 
23c20     00 00 00 00 | 	byte	$00[16]
23c24     01 00 00 00 | 	byte	$01, $00, $00, $00
23c28                 | __heap_base
23c28     00 00 00 00 
      ...             
24c28     00 00 00 00 
24c2c     00 00 00 00 | 	long	0[1026]
24c30                 | objmem
24c30     00 00 00 00 
      ...             
25dd4     00 00 00 00 
25dd8     00 00 00 00 | 	long	0[1131]
25ddc                 | stackspace
25ddc     00 00 00 00 | 	long	0[1]
25de0 11b             | 	org	COG_BSS_START
25de0 11b             | _var01
25de0 11b             | 	res	1
25de0 11c             | _var02
25de0 11c             | 	res	1
25de0 11d             | _var03
25de0 11d             | 	res	1
25de0 11e             | _var04
25de0 11e             | 	res	1
25de0 11f             | _var05
25de0 11f             | 	res	1
25de0 120             | _var06
25de0 120             | 	res	1
25de0 121             | _var07
25de0 121             | 	res	1
25de0 122             | _var08
25de0 122             | 	res	1
25de0 123             | _var09
25de0 123             | 	res	1
25de0 124             | _var10
25de0 124             | 	res	1
25de0 125             | _var11
25de0 125             | 	res	1
25de0 126             | _var12
25de0 126             | 	res	1
25de0 127             | _var13
25de0 127             | 	res	1
25de0 128             | _var14
25de0 128             | 	res	1
25de0 129             | _var15
25de0 129             | 	res	1
25de0 12a             | _var16
25de0 12a             | 	res	1
25de0 12b             | _var17
25de0 12b             | 	res	1
25de0 12c             | _var18
25de0 12c             | 	res	1
25de0 12d             | _var19
25de0 12d             | 	res	1
25de0 12e             | _var20
25de0 12e             | 	res	1
25de0 12f             | _var21
25de0 12f             | 	res	1
25de0 130             | _var22
25de0 130             | 	res	1
25de0 131             | _var23
25de0 131             | 	res	1
25de0 132             | _var24
25de0 132             | 	res	1
25de0 133             | _var25
25de0 133             | 	res	1
25de0 134             | _var26
25de0 134             | 	res	1
25de0 135             | _var27
25de0 135             | 	res	1
25de0 136             | _var28
25de0 136             | 	res	1
25de0 137             | _var29
25de0 137             | 	res	1
25de0 138             | _var30
25de0 138             | 	res	1
25de0 139             | _var31
25de0 139             | 	res	1
25de0 13a             | _var32
25de0 13a             | 	res	1
25de0 13b             | arg01
25de0 13b             | 	res	1
25de0 13c             | arg02
25de0 13c             | 	res	1
25de0 13d             | arg03
25de0 13d             | 	res	1
25de0 13e             | arg04
25de0 13e             | 	res	1
25de0 13f             | arg05
25de0 13f             | 	res	1
25de0 140             | arg06
25de0 140             | 	res	1
25de0 141             | arg07
25de0 141             | 	res	1
25de0 142             | local01
25de0 142             | 	res	1
25de0 143             | local02
25de0 143             | 	res	1
25de0 144             | local03
25de0 144             | 	res	1
25de0 145             | local04
25de0 145             | 	res	1
25de0 146             | local05
25de0 146             | 	res	1
25de0 147             | local06
25de0 147             | 	res	1
25de0 148             | local07
25de0 148             | 	res	1
25de0 149             | local08
25de0 149             | 	res	1
25de0 14a             | local09
25de0 14a             | 	res	1
25de0 14b             | local10
25de0 14b             | 	res	1
25de0 14c             | local11
25de0 14c             | 	res	1
25de0 14d             | local12
25de0 14d             | 	res	1
25de0 14e             | local13
25de0 14e             | 	res	1
25de0 14f             | local14
25de0 14f             | 	res	1
25de0 150             | local15
25de0 150             | 	res	1
25de0 151             | local16
25de0 151             | 	res	1
25de0 152             | local17
25de0 152             | 	res	1
25de0 153             | local18
25de0 153             | 	res	1
25de0 154             | local19
25de0 154             | 	res	1
25de0 155             | local20
25de0 155             | 	res	1
25de0 156             | local21
25de0 156             | 	res	1
25de0 157             | local22
25de0 157             | 	res	1
25de0 158             | local23
25de0 158             | 	res	1
25de0 159             | local24
25de0 159             | 	res	1
25de0 15a             | local25
25de0 15a             | 	res	1
25de0 15b             | local26
25de0 15b             | 	res	1
25de0 15c             | local27
25de0 15c             | 	res	1
25de0 15d             | local28
25de0 15d             | 	res	1
25de0 15e             | local29
25de0 15e             | 	res	1
25de0 15f             | local30
25de0 15f             | 	res	1
25de0 160             | local31
25de0 160             | 	res	1
25de0 161             | local32
25de0 161             | 	res	1
25de0 162             | local33
25de0 162             | 	res	1
25de0 163             | local34
25de0 163             | 	res	1
25de0 164             | local35
25de0 164             | 	res	1
25de0 165             | local36
25de0 165             | 	res	1
25de0 166             | local37
25de0 166             | 	res	1
25de0 167             | local38
25de0 167             | 	res	1
25de0 168             | local39
25de0 168             | 	res	1
25de0 169             | local40
25de0 169             | 	res	1
25de0 16a             | local41
25de0 16a             | 	res	1
25de0 16b             | local42
25de0 16b             | 	res	1
25de0 16c             | muldiva_
25de0 16c             | 	res	1
25de0 16d             | muldivb_
25de0 16d             | 	res	1
25de0 16e             | 	fit	480
25de0 16e             | 
