00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/Tracker player/audio018.p2asm"
00000                 | ' 
00000                 | ' '319220550    =3546895, change to NTSC freq if needed
00000                 | ' '322159050 ' This is 90x Amiga NTSC = 3579545
00000                 | ' _clkfreq = 354693878  ' This is 100x Amiga PAL 3546895
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | ' ' audio pins TODO: make a variable for start() instead of const
00000                 | ' 
00000                 | ' left= 14
00000                 | 	left = 14
00000                 | ' right=15
00000                 | 	right = 15
00000                 | ' 
00000                 | ' 
00000                 | ' c4=262
00000                 | 	c4 = 262
00000                 | ' d4=294
00000                 | 	d4 = 294
00000                 | ' e4=330
00000                 | 	e4 = 330
00000                 | ' f4=349
00000                 | 	f4 = 349
00000                 | ' g4=392
00000                 | 	g4 = 392
00000                 | ' a4=440
00000                 | 	a4 = 440
00000                 | ' h4=494
00000                 | 	h4 = 494
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 C0 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 DF F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 07 A0 FD | 	call	#_test
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 C4 61 FD | 	cogid	arg01
00614 084 03 C4 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 B9 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 C1 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 C5 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 C7 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 C9 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 CB 05 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D C0 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 C8 55 F0 |         shr	arg03, #1 wc
00688 0a1 E2 C6 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 C4 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 C6 FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 C8 55 F0 |         shr	arg03, #1 wc
00698 0a5 E2 C6 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 C4 05 C1 |  if_c   add	arg01, #2
006a0 0a7 E3 C6 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 E2 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 C8 0D F2 |         cmp	arg03, #0 wz
006ac 0aa E4 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 C6 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 CD 65 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 CD 05 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd F0 DE 11 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 E0 61 FD |        getqx   muldivb_
00740 0cf 19 DE 61 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 EF DE 51 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 B6 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 F0 E0 59 F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 B6 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 B6 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 EF DE 81 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 B6 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 F0 E0 81 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | 
0076c 0da             | itmp1_
0076c 0da 00 00 00 00 | 	long	0
00770 0db             | itmp2_
00770 0db 00 00 00 00 | 	long	0
00774 0dc             | objptr
00774 0dc 6C 17 00 00 | 	long	@objmem
00778 0dd             | ptr___system__dat__
00778 0dd 54 17 00 00 | 	long	@__system__dat_
0077c 0de             | ptr__dat__
0077c 0de 40 0C 00 00 | 	long	@_dat_
00780 0df             | ptr_stackspace_
00780 0df 8C 18 00 00 | 	long	@stackspace
00784 0e0             | result1
00784 0e0 00 00 00 00 | 	long	0
00788 0e1             | result2
00788 0e1 00 00 00 00 | 	long	0
0078c 0e2             | COG_BSS_START
0078c 0e2             | 	fit	480
0078c                 | 	orgh
0078c                 | hubentry
0078c                 | 
0078c                 | ' 
0078c                 | ' '----------------------------------------------------------------
0078c                 | ' '------------  Alpha testing the thing --------------------------
0078c                 | ' '---------------------------------------------------------------- 
0078c                 | ' 
0078c                 | ' pub test
0078c                 | _test
0078c                 | ' 
0078c                 | ' start()
0078c     D0 02 B0 FD | 	call	#_start
00790                 | ' waitms(500)
00790     F4 C5 05 F6 | 	mov	arg01, #500
00794     2C 04 B0 FD | 	call	#__system___waitms
00798                 | ' repeat
00798                 | LR__0001
00798                 | '   play(c4,5000,16384)
00798     06 C5 05 F6 | 	mov	arg01, #262
0079c     09 00 00 FF 
007a0     88 C7 05 F6 | 	mov	arg02, ##5000
007a4     0E C8 C5 F9 | 	decod	arg03, #14
007a8     38 01 B0 FD | 	call	#_play
007ac                 | '   play(d4,5000,16384)
007ac     26 C5 05 F6 | 	mov	arg01, #294
007b0     09 00 00 FF 
007b4     88 C7 05 F6 | 	mov	arg02, ##5000
007b8     0E C8 C5 F9 | 	decod	arg03, #14
007bc     24 01 B0 FD | 	call	#_play
007c0                 | '   play(e4,5000,16384)
007c0     4A C5 05 F6 | 	mov	arg01, #330
007c4     09 00 00 FF 
007c8     88 C7 05 F6 | 	mov	arg02, ##5000
007cc     0E C8 C5 F9 | 	decod	arg03, #14
007d0     10 01 B0 FD | 	call	#_play
007d4                 | '   play(f4,5000,16384)
007d4     5D C5 05 F6 | 	mov	arg01, #349
007d8     09 00 00 FF 
007dc     88 C7 05 F6 | 	mov	arg02, ##5000
007e0     0E C8 C5 F9 | 	decod	arg03, #14
007e4     FC 00 B0 FD | 	call	#_play
007e8                 | '   play(g4,5000,16384)
007e8     88 C5 05 F6 | 	mov	arg01, #392
007ec     09 00 00 FF 
007f0     88 C7 05 F6 | 	mov	arg02, ##5000
007f4     0E C8 C5 F9 | 	decod	arg03, #14
007f8     E8 00 B0 FD | 	call	#_play
007fc                 | '   play(a4,5000,16384)
007fc     B8 C5 05 F6 | 	mov	arg01, #440
00800     09 00 00 FF 
00804     88 C7 05 F6 | 	mov	arg02, ##5000
00808     0E C8 C5 F9 | 	decod	arg03, #14
0080c     D4 00 B0 FD | 	call	#_play
00810                 | '   play(h4,5000,16384)
00810     EE C5 05 F6 | 	mov	arg01, #494
00814     09 00 00 FF 
00818     88 C7 05 F6 | 	mov	arg02, ##5000
0081c     0E C8 C5 F9 | 	decod	arg03, #14
00820     C0 00 B0 FD | 	call	#_play
00824                 | '   play(2*c4,500,16384)
00824     01 00 00 FF 
00828     0C C4 05 F6 | 	mov	arg01, ##524
0082c     F4 C7 05 F6 | 	mov	arg02, #500
00830     0E C8 C5 F9 | 	decod	arg03, #14
00834     AC 00 B0 FD | 	call	#_play
00838                 | '   play(c4,500,0)
00838     06 C5 05 F6 | 	mov	arg01, #262
0083c     F4 C7 05 F6 | 	mov	arg02, #500
00840     00 C8 05 F6 | 	mov	arg03, #0
00844     9C 00 B0 FD | 	call	#_play
00848                 | '   play(2*c4,500,16384)
00848     01 00 00 FF 
0084c     0C C4 05 F6 | 	mov	arg01, ##524
00850     F4 C7 05 F6 | 	mov	arg02, #500
00854     0E C8 C5 F9 | 	decod	arg03, #14
00858     88 00 B0 FD | 	call	#_play
0085c                 | '   play(h4,500,16384)
0085c     EE C5 05 F6 | 	mov	arg01, #494
00860     F4 C7 05 F6 | 	mov	arg02, #500
00864     0E C8 C5 F9 | 	decod	arg03, #14
00868     78 00 B0 FD | 	call	#_play
0086c                 | '   play(a4,500,16384)
0086c     B8 C5 05 F6 | 	mov	arg01, #440
00870     F4 C7 05 F6 | 	mov	arg02, #500
00874     0E C8 C5 F9 | 	decod	arg03, #14
00878     68 00 B0 FD | 	call	#_play
0087c                 | '   play(g4,500,16384)
0087c     88 C5 05 F6 | 	mov	arg01, #392
00880     F4 C7 05 F6 | 	mov	arg02, #500
00884     0E C8 C5 F9 | 	decod	arg03, #14
00888     58 00 B0 FD | 	call	#_play
0088c                 | '   play(f4,500,16384)
0088c     5D C5 05 F6 | 	mov	arg01, #349
00890     F4 C7 05 F6 | 	mov	arg02, #500
00894     0E C8 C5 F9 | 	decod	arg03, #14
00898     48 00 B0 FD | 	call	#_play
0089c                 | '   play(e4,500,16384)
0089c     4A C5 05 F6 | 	mov	arg01, #330
008a0     F4 C7 05 F6 | 	mov	arg02, #500
008a4     0E C8 C5 F9 | 	decod	arg03, #14
008a8     38 00 B0 FD | 	call	#_play
008ac                 | '   play(d4,500,16384)
008ac     26 C5 05 F6 | 	mov	arg01, #294
008b0     F4 C7 05 F6 | 	mov	arg02, #500
008b4     0E C8 C5 F9 | 	decod	arg03, #14
008b8     28 00 B0 FD | 	call	#_play
008bc                 | '   play(c4,500,16384)
008bc     06 C5 05 F6 | 	mov	arg01, #262
008c0     F4 C7 05 F6 | 	mov	arg02, #500
008c4     0E C8 C5 F9 | 	decod	arg03, #14
008c8     18 00 B0 FD | 	call	#_play
008cc                 | '   play(c4,500,0)
008cc     06 C5 05 F6 | 	mov	arg01, #262
008d0     F4 C7 05 F6 | 	mov	arg02, #500
008d4     00 C8 05 F6 | 	mov	arg03, #0
008d8     08 00 B0 FD | 	call	#_play
008dc     B8 FE 9F FD | 	jmp	#LR__0001
008e0                 | _test_ret
008e0     2D 00 64 FD | 	ret
008e4                 | 
008e4                 | ' 
008e4                 | '  
008e4                 | '  
008e4                 | ' '----------------------------------------------------------------
008e4                 | ' '------------  An alpha test playing procedure ------------------
008e4                 | ' '------------  Plays sine waves in allchannels ------------------
008e4                 | ' '------------  makes a harmonic sound ---------------------------
008e4                 | ' '---------------------------------------------------------------- 
008e4                 | ' 
008e4                 | ' pub play(ff,time,vol) |ilss,ss,ssf,base,iii
008e4                 | _play
008e4     09 5A 05 F6 | 	mov	COUNT_, #9
008e8     B0 00 A0 FD | 	call	#pushregs_
008ec     E2 E0 01 F6 | 	mov	muldivb_, arg01
008f0     E3 CC 01 F6 | 	mov	local01, arg02
008f4     E4 CE 01 F6 | 	mov	local02, arg03
008f8                 | ' 
008f8                 | ' ' Test play 
008f8                 | ' 
008f8                 | ' ss:=64
008f8                 | ' ssf:=(ss*3568945)/(ff*2048)
008f8     3A 1B 00 FF 
008fc     31 81 0C FD | 	qmul	#64, ##3568945
00900     18 DE 61 FD | 	getqx	muldiva_
00904     0B E0 65 F0 | 	shl	muldivb_, #11
00908     D0 00 A0 FD | 	call	#divide_
0090c     F0 D0 01 F6 | 	mov	local03, muldivb_
00910                 | ' 
00910                 | ' 
00910                 | ' 
00910                 | ' base:=@channel1[0]
00910     DC D2 01 F6 | 	mov	local04, objptr
00914                 | ' 
00914                 | ' repeat iii from 0 to 0
00914     00 D4 05 F6 | 	mov	local05, #0
00918     04 F8 9F FE | 	loc	pa,	#(@LR__0003-@LR__0002)
0091c     93 00 A0 FD | 	call	#FCACHE_LOAD_
00920                 | LR__0002
00920                 | '   long [base+32*iii]:=0
00920     E9 D6 01 F6 | 	mov	local06, local04
00924     EA D8 01 F6 | 	mov	local07, local05
00928     05 D8 65 F0 | 	shl	local07, #5
0092c     EC D6 01 F1 | 	add	local06, local07
00930     EB 00 68 FC | 	wrlong	#0, local06
00934                 | '   long [base+32*iii+4]:=0 
00934     E9 D6 01 F6 | 	mov	local06, local04
00938     EA D8 01 F6 | 	mov	local07, local05
0093c     05 D8 65 F0 | 	shl	local07, #5
00940     EC D6 01 F1 | 	add	local06, local07
00944     04 D6 05 F1 | 	add	local06, #4
00948     EB 00 68 FC | 	wrlong	#0, local06
0094c                 | '   long[base+32*iii+12]:=16
0094c     E9 D6 01 F6 | 	mov	local06, local04
00950     EA D8 01 F6 | 	mov	local07, local05
00954     05 D8 65 F0 | 	shl	local07, #5
00958     EC D6 01 F1 | 	add	local06, local07
0095c     0C D6 05 F1 | 	add	local06, #12
00960     EB 20 68 FC | 	wrlong	#16, local06
00964                 | '   long[base+32*iii+16]:=2048+16
00964     E9 D6 01 F6 | 	mov	local06, local04
00968     EA D8 01 F6 | 	mov	local07, local05
0096c     05 D8 65 F0 | 	shl	local07, #5
00970     EC D6 01 F1 | 	add	local06, local07
00974     10 D6 05 F1 | 	add	local06, #16
00978     04 00 80 FF 
0097c     EB 20 68 FC | 	wrlong	##2064, local06
00980                 | '   word[base+32*iii+20]:=vol/(iii+1)
00980     EA E0 01 F6 | 	mov	muldivb_, local05
00984     01 E0 05 F1 | 	add	muldivb_, #1
00988     E7 DE 01 F6 | 	mov	muldiva_, local02
0098c     D0 00 A0 FD | 	call	#divide_
00990     E9 DA 01 F6 | 	mov	local08, local04
00994     EA DC 01 F6 | 	mov	local09, local05
00998     05 DC 65 F0 | 	shl	local09, #5
0099c     EE DA 01 F1 | 	add	local08, local09
009a0     14 DA 05 F1 | 	add	local08, #20
009a4     ED E0 51 FC | 	wrword	muldivb_, local08
009a8                 | '   word[base+32*iii+22]:=8192
009a8     E9 D6 01 F6 | 	mov	local06, local04
009ac     EA D8 01 F6 | 	mov	local07, local05
009b0     05 D8 65 F0 | 	shl	local07, #5
009b4     EC D6 01 F1 | 	add	local06, local07
009b8     16 D6 05 F1 | 	add	local06, #22
009bc     10 00 80 FF 
009c0     EB 00 58 FC | 	wrword	##8192, local06
009c4                 | '   word[base+32*iii+24]:=ssf
009c4     E9 D6 01 F6 | 	mov	local06, local04
009c8     EA D8 01 F6 | 	mov	local07, local05
009cc     05 D8 65 F0 | 	shl	local07, #5
009d0     EC D6 01 F1 | 	add	local06, local07
009d4     18 D6 05 F1 | 	add	local06, #24
009d8     EB D0 51 FC | 	wrword	local03, local06
009dc                 | '   word[base+32*iii+26]:=ss*(iii+1)
009dc     EA D6 01 F6 | 	mov	local06, local05
009e0     01 D6 05 F1 | 	add	local06, #1
009e4     EB 80 08 FD | 	qmul	#64, local06
009e8     18 D8 61 FD | 	getqx	local07
009ec     E9 DA 01 F6 | 	mov	local08, local04
009f0     EA DC 01 F6 | 	mov	local09, local05
009f4     05 DC 65 F0 | 	shl	local09, #5
009f8     EE DA 01 F1 | 	add	local08, local09
009fc     1A DA 05 F1 | 	add	local08, #26
00a00     ED D8 51 FC | 	wrword	local07, local08
00a04                 | '   long [base+32*iii+8]:=@sinewave | $C0000000  
00a04     01 00 00 FF 
00a08     04 BD 05 F1 | 	add	ptr__dat__, ##772
00a0c     DE D6 01 F6 | 	mov	local06, ptr__dat__
00a10     3E D6 25 F4 | 	bith	local06, #62
00a14     E9 DA 01 F6 | 	mov	local08, local04
00a18     EA DC 01 F6 | 	mov	local09, local05
00a1c     05 DC 65 F0 | 	shl	local09, #5
00a20     EE DA 01 F1 | 	add	local08, local09
00a24     08 DA 05 F1 | 	add	local08, #8
00a28     ED D6 61 FC | 	wrlong	local06, local08
00a2c     01 D4 05 F1 | 	add	local05, #1
00a30     01 D4 5D F2 | 	cmps	local05, #1 wcz
00a34     01 00 00 FF 
00a38     04 BD 85 F1 | 	sub	ptr__dat__, ##772
00a3c     E0 FE 9F CD |  if_b	jmp	#LR__0002
00a40                 | LR__0003
00a40                 | ' repeat time
00a40     00 CC 0D F2 | 	cmp	local01, #0 wz
00a44     0C 00 90 AD |  if_e	jmp	#LR__0005
00a48                 | LR__0004
00a48                 | '     waitms(1)
00a48     01 C4 05 F6 | 	mov	arg01, #1
00a4c     74 01 B0 FD | 	call	#__system___waitms
00a50     FD CD 6D FB | 	djnz	local01, #LR__0004
00a54                 | LR__0005
00a54     AF F0 03 F6 | 	mov	ptra, fp
00a58     BF 00 A0 FD | 	call	#popregs_
00a5c                 | _play_ret
00a5c     2D 00 64 FD | 	ret
00a60                 | 
00a60                 | ' 
00a60                 | ' 
00a60                 | ' '--------------------------------------------------------------
00a60                 | ' '---------- Init the variables, start the cog. ----------------
00a60                 | ' '--------------------------------------------------------------
00a60                 | ' 
00a60                 | ' pub start() :cog,base | iii
00a60                 | _start
00a60     07 5A 05 F6 | 	mov	COUNT_, #7
00a64     B0 00 A0 FD | 	call	#pushregs_
00a68                 | ' 
00a68                 | ' base:=@channel1[0]
00a68     DC CC 01 F6 | 	mov	local01, objptr
00a6c                 | ' 
00a6c                 | ' repeat iii from 0 to 7
00a6c     00 CE 05 F6 | 	mov	local02, #0
00a70     98 F6 9F FE | 	loc	pa,	#(@LR__0007-@LR__0006)
00a74     93 00 A0 FD | 	call	#FCACHE_LOAD_
00a78                 | LR__0006
00a78                 | '   long [base+32*iii]:=0
00a78     E6 D0 01 F6 | 	mov	local03, local01
00a7c     E7 D2 01 F6 | 	mov	local04, local02
00a80     05 D2 65 F0 | 	shl	local04, #5
00a84     E9 D0 01 F1 | 	add	local03, local04
00a88     E8 00 68 FC | 	wrlong	#0, local03
00a8c                 | '   long [base+32*iii+4]:=0
00a8c     E6 D0 01 F6 | 	mov	local03, local01
00a90     E7 D2 01 F6 | 	mov	local04, local02
00a94     05 D2 65 F0 | 	shl	local04, #5
00a98     E9 D0 01 F1 | 	add	local03, local04
00a9c     04 D0 05 F1 | 	add	local03, #4
00aa0     E8 00 68 FC | 	wrlong	#0, local03
00aa4                 | '   long[base+32*iii+12]:=0
00aa4     E6 D0 01 F6 | 	mov	local03, local01
00aa8     E7 D2 01 F6 | 	mov	local04, local02
00aac     05 D2 65 F0 | 	shl	local04, #5
00ab0     E9 D0 01 F1 | 	add	local03, local04
00ab4     0C D0 05 F1 | 	add	local03, #12
00ab8     E8 00 68 FC | 	wrlong	#0, local03
00abc                 | '   long[base+32*iii+16]:=2 
00abc     E6 D0 01 F6 | 	mov	local03, local01
00ac0     E7 D2 01 F6 | 	mov	local04, local02
00ac4     05 D2 65 F0 | 	shl	local04, #5
00ac8     E9 D0 01 F1 | 	add	local03, local04
00acc     10 D0 05 F1 | 	add	local03, #16
00ad0     E8 04 68 FC | 	wrlong	#2, local03
00ad4                 | '   word[base+32*iii+20]:=0
00ad4     E6 D0 01 F6 | 	mov	local03, local01
00ad8     E7 D2 01 F6 | 	mov	local04, local02
00adc     05 D2 65 F0 | 	shl	local04, #5
00ae0     E9 D0 01 F1 | 	add	local03, local04
00ae4     14 D0 05 F1 | 	add	local03, #20
00ae8     E8 00 58 FC | 	wrword	#0, local03
00aec                 | '   word[base+32*iii+22]:=8192
00aec     E6 D0 01 F6 | 	mov	local03, local01
00af0     E7 D2 01 F6 | 	mov	local04, local02
00af4     05 D2 65 F0 | 	shl	local04, #5
00af8     E9 D0 01 F1 | 	add	local03, local04
00afc     16 D0 05 F1 | 	add	local03, #22
00b00     10 00 80 FF 
00b04     E8 00 58 FC | 	wrword	##8192, local03
00b08                 | '   word[base+32*iii+24]:=100+2*iii
00b08     E7 D2 01 F6 | 	mov	local04, local02
00b0c     01 D2 65 F0 | 	shl	local04, #1
00b10     64 D0 05 F6 | 	mov	local03, #100
00b14     E9 D0 01 F1 | 	add	local03, local04
00b18     E6 D4 01 F6 | 	mov	local05, local01
00b1c     E7 D6 01 F6 | 	mov	local06, local02
00b20     05 D6 65 F0 | 	shl	local06, #5
00b24     EB D4 01 F1 | 	add	local05, local06
00b28     18 D4 05 F1 | 	add	local05, #24
00b2c     EA D0 51 FC | 	wrword	local03, local05
00b30                 | '   word[base+32*iii+26]:=2
00b30     E6 D0 01 F6 | 	mov	local03, local01
00b34     E7 D2 01 F6 | 	mov	local04, local02
00b38     05 D2 65 F0 | 	shl	local04, #5
00b3c     E9 D0 01 F1 | 	add	local03, local04
00b40     1A D0 05 F1 | 	add	local03, #26
00b44     E8 04 58 FC | 	wrword	#2, local03
00b48                 | '   long [base+32*iii+8]:=@null | $C0000000
00b48     01 00 00 FF 
00b4c     FC BC 05 F1 | 	add	ptr__dat__, ##764
00b50     DE D0 01 F6 | 	mov	local03, ptr__dat__
00b54     3E D0 25 F4 | 	bith	local03, #62
00b58     E6 D4 01 F6 | 	mov	local05, local01
00b5c     E7 D6 01 F6 | 	mov	local06, local02
00b60     05 D6 65 F0 | 	shl	local06, #5
00b64     EB D4 01 F1 | 	add	local05, local06
00b68     08 D4 05 F1 | 	add	local05, #8
00b6c     EA D0 61 FC | 	wrlong	local03, local05
00b70     01 CE 05 F1 | 	add	local02, #1
00b74     08 CE 5D F2 | 	cmps	local02, #8 wcz
00b78     01 00 00 FF 
00b7c     FC BC 85 F1 | 	sub	ptr__dat__, ##764
00b80     F4 FE 9F CD |  if_b	jmp	#LR__0006
00b84                 | LR__0007
00b84                 | '   
00b84                 | ' cog:=coginit(16,@audio,@channel1)
00b84     DE C6 01 F6 | 	mov	arg02, ptr__dat__
00b88     DC C8 01 F6 | 	mov	arg03, objptr
00b8c     10 C4 05 F6 | 	mov	arg01, #16
00b90     28 C8 61 FD | 	setq	arg03
00b94     E3 C4 F1 FC | 	coginit	arg01, arg02 wc
00b98     01 C4 65 C6 |  if_b	neg	arg01, #1
00b9c     E2 C0 01 F6 | 	mov	result1, arg01
00ba0     E0 D8 01 F6 | 	mov	local07, result1
00ba4                 | ' waitms(100)
00ba4     64 C4 05 F6 | 	mov	arg01, #100
00ba8     18 00 B0 FD | 	call	#__system___waitms
00bac                 | ' return cog,base
00bac     E6 C2 01 F6 | 	mov	result2, local01
00bb0     EC C0 01 F6 | 	mov	result1, local07
00bb4     AF F0 03 F6 | 	mov	ptra, fp
00bb8     BF 00 A0 FD | 	call	#popregs_
00bbc                 | _start_ret
00bbc     2D 00 64 FD | 	ret
00bc0                 | hubexit
00bc0     81 00 80 FD | 	jmp	#cogexit
00bc4                 | 
00bc4                 | __system___waitms
00bc4     03 5A 05 F6 | 	mov	COUNT_, #3
00bc8     B0 00 A0 FD | 	call	#pushregs_
00bcc     E2 CC 01 F6 | 	mov	local01, arg01
00bd0     14 CE 05 FB | 	rdlong	local02, #20
00bd4     40 F4 9F FE | 	loc	pa,	#(@LR__0009-@LR__0008)
00bd8     93 00 A0 FD | 	call	#FCACHE_LOAD_
00bdc                 | LR__0008
00bdc     01 00 00 FF 
00be0     E8 CD 5D F2 | 	cmps	local01, ##1000 wcz
00be4     1F CE 61 1D |  if_a	waitx	local02
00be8     01 00 00 1F 
00bec     E8 CD 85 11 |  if_a	sub	local01, ##1000
00bf0     E8 FF 9F 1D |  if_a	jmp	#LR__0008
00bf4                 | LR__0009
00bf4     0C BA 05 F1 | 	add	ptr___system__dat__, #12
00bf8     DD D0 09 FB | 	rdlong	local03, ptr___system__dat__ wz
00bfc     0C BA 85 F1 | 	sub	ptr___system__dat__, #12
00c00     20 00 90 5D |  if_ne	jmp	#LR__0010
00c04     E7 DE 01 F6 | 	mov	muldiva_, local02
00c08     01 00 00 FF 
00c0c     E8 E1 05 F6 | 	mov	muldivb_, ##1000
00c10     CC 00 A0 FD | 	call	#unsdivide_
00c14     F0 D0 01 F6 | 	mov	local03, muldivb_
00c18     0C BA 05 F1 | 	add	ptr___system__dat__, #12
00c1c     DD E0 61 FC | 	wrlong	muldivb_, ptr___system__dat__
00c20     0C BA 85 F1 | 	sub	ptr___system__dat__, #12
00c24                 | LR__0010
00c24     00 CC 5D F2 | 	cmps	local01, #0 wcz
00c28     E8 CC 01 1D |  if_a	qmul	local01, local03
00c2c     18 C4 61 1D |  if_a	getqx	arg01
00c30     1F C4 61 1D |  if_a	waitx	arg01
00c34     AF F0 03 F6 | 	mov	ptra, fp
00c38     BF 00 A0 FD | 	call	#popregs_
00c3c                 | __system___waitms_ret
00c3c     2D 00 64 FD | 	ret
00c40                 | 	alignl
00c40                 | _dat_
00c40                 | 
00c40                 | audio       org     0
00c40     00 F2 07 F6 | 			mov     ptrb,#0
00c44     0E 7C 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
00c48     0E C8 1C FC |             wxpin   #100,#left
00c4c     0F 7C 05 FC |             wrpin   dac,#right
00c50     0F C8 1C FC |             wxpin   #100,#right
00c54     41 9C 64 FD |             dirh    #left addpins 1
00c58     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
00c5c     79 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
00c60     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
00c64                 |             
00c64                 | '---------------------------------------------------------------------------------        
00c64                 | '----------------- The main loop -------------------------------------------------
00c64                 | '---------------------------------------------------------------------------------
00c64                 | 
00c64     82 06 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
00c68     10 00 90 CD |       if_c  jmp     #loop1
00c6c                 |   
00c6c     09 4C 05 F6 |             mov     cn,#9
00c70     82 4C 8D F9 | p402        altd    cn,#a21000000
00c74     81 00 80 F1 |             sub     0-0,a20000000
00c78     FD 4D 6D FB |             djnz    cn,#p402
00c7c                 |     
00c7c     00 4C 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
00c80     84 4E 01 F6 |             mov     ct,time1           ' with the lowest next sample time
00c84     85 4E 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
00c88     01 4C 05 C6 |     if_c    mov     cn,#1
00c8c     86 4E 39 F3 |             fle     ct,time3 wcz
00c90     02 4C 05 C6 |     if_c    mov     cn,#2     
00c94     87 4E 39 F3 |             fle     ct,time4 wcz
00c98     03 4C 05 C6 |     if_c    mov     cn,#3
00c9c     88 4E 39 F3 |             fle     ct,time5 wcz
00ca0     04 4C 05 C6 |     if_c    mov     cn,#4
00ca4     89 4E 39 F3 |             fle     ct,time6 wcz
00ca8     05 4C 05 C6 |     if_c    mov     cn,#5
00cac     8A 4E 39 F3 |             fle     ct,time7 wcz
00cb0     06 4C 05 C6 |     if_c    mov     cn,#6
00cb4     8B 4E 39 F3 |             fle     ct,time8 wcz
00cb8     07 4C 05 C6 |     if_c    mov     cn,#7
00cbc                 | 
00cbc                 | 
00cbc                 | '----------------------------------------------------------------------------------
00cbc                 | '------------- Compute channel samples --------------------------------------------
00cbc                 | '----------------------------------------------------------------------------------
00cbc                 | 
00cbc                 | 
00cbc     A6 22 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
00cc0     05 22 65 F0 |             shl     channeladd,#5
00cc4     91 F0 03 F1 |             add     ptra,channeladd
00cc8                 | 
00cc8     28 0E 64 FD |             setq    #7               
00ccc     00 33 05 FB |             rdlong  pointer0,ptra
00cd0                 |             
00cd0     9E 48 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
00cd4     9E 46 31 F9 |     	    getword avol0,volpan0,#0
00cd8     9F 44 39 F9 | 	        getword askip0,freqskip0,#1    	    
00cdc     9F 42 31 F9 | 	        getword afreq0,freqskip0,#0
00ce0                 | 
00ce0     84 4C 95 F9 |             alts    cn, #time1
00ce4     00 50 01 F6 |             mov     dt0,0-0   
00ce8     83 50 81 F1 |             sub     dt0,time0
00cec                 | 
00cec     84 4C 8D F9 |             altd    cn, #time1
00cf0     A1 00 00 F1 |             add     0-0,afreq0  	
00cf4                 | 
00cf4     A2 32 01 F1 |             add     pointer0,askip0
00cf8     9D 32 19 F2 |             cmp     pointer0,lend0 wcz
00cfc     9D 32 81 31 |     if_ge   sub     pointer0,lend0	        
00d00     9C 32 01 31 |     if_ge   add     pointer0,lstart0       
00d04     99 26 01 F6 |             mov     qq,pointer0
00d08     9B 26 01 F1 |             add     qq,sstart0
00d0c                 | 
00d0c     1F 36 0D F4 |             testb   sstart0,#31 wz
00d10                 | 
00d10     93 28 C1 5A |     if_nz   rdbyte  spl,qq
00d14     08 28 65 50 |     if_nz   shl     spl,#8
00d18     93 28 E1 AA |     if_z    rdword  spl,qq
00d1c                 | 
00d1c     A3 28 31 FA |             scas    spl,avol0
00d20     00 28 01 F6 |             mov     spl,0-0
00d24                 |  
00d24     A4 28 31 FA |             scas    spl,apan0
00d28     00 52 01 F6 |             mov     ls0,0-0
00d2c                 |  
00d2c     AE 4C 8D F9 |             altd    cn,#ls1
00d30     A9 00 00 F6 |             mov     0-0,ls0
00d34                 |              
00d34     20 00 00 FF 
00d38     00 26 05 F6 |             mov     qq,##16384
00d3c     A4 26 81 F1 |             sub     qq,apan0
00d40     93 28 31 FA |             scas    spl,qq
00d44     00 54 01 F6 |             mov     rs0, 0-0
00d48                 | 
00d48     B6 4C 8D F9 |             altd    cn,#rs1
00d4c     AA 00 00 F6 |             mov     0-0,rs0
00d50                 | 
00d50     AA 34 29 F9 |             setword sample0,rs0,#1
00d54     A9 34 21 F9 |             setword sample0,ls0,#0
00d58                 |             
00d58     1E 36 0D F4 |             testb   sstart0,#30 wz
00d5c     14 00 90 5D |     if_nz   jmp     #p403
00d60                 |             
00d60     00 32 05 F6 |             mov    pointer0,#0  
00d64     1E 36 05 F4 |             bitl   sstart0,#30
00d68     08 F0 07 F1 |             add    ptra,#8
00d6c     00 37 65 FC |             wrlong sstart0,ptra
00d70     08 F0 87 F1 |             sub    ptra,#8
00d74                 |  
00d74     28 02 64 FD | p403        setq #1
00d78                 |      
00d78     00 33 65 FC |             wrlong  pointer0,ptra
00d7c     91 F0 83 F1 |             sub     ptra, channeladd
00d80     00 00 90 FD |             jmp     #p101
00d84                 |                        
00d84                 |             
00d84                 |           
00d84                 |             
00d84                 | '------------------------ Channels end here --------------------       
00d84                 | 
00d84                 | ' Now add all channels and put the sample to the buffer    
00d84                 | 
00d84                 | 
00d84     83 4A 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
00d88     01 24 85 A1 |     if_z    sub     front,#1         ' 
00d8c     FF 25 05 A5 |     if_z    and     front,#511     
00d90                 |            
00d90                 |     
00d90     00 5A 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
00d94     00 58 05 F6 |             mov     ls,#0
00d98     B6 5A 01 F1 |             add     rs,rs1
00d9c     B7 5A 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
00da0     B8 5A 01 F1 |             add     rs,rs3
00da4     B9 5A 01 F1 |             add     rs,rs4
00da8     BA 5A 01 F1 |             add     rs,rs5
00dac     BB 5A 01 F1 |             add     rs,rs6
00db0     BC 5A 01 F1 |             add     rs,rs7
00db4     BD 5A 01 F1 |             add     rs,rs8
00db8                 | 
00db8                 |            
00db8     AE 58 01 F1 |             add     ls,ls1
00dbc     AF 58 01 F1 |             add     ls,ls2
00dc0     B0 58 01 F1 |             add     ls,ls3
00dc4     B1 58 01 F1 |             add     ls,ls4
00dc8     B2 58 01 F1 |             add     ls,ls5
00dcc     B3 58 01 F1 |             add     ls,ls6
00dd0     B4 58 01 F1 |             add     ls,ls7
00dd4     B5 58 01 F1 |             add     ls,ls8
00dd8                 | 
00dd8                 |  		
00dd8     0F 58 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
00ddc     0F 5A E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
00de0                 | 		    
00de0     AC 5A 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
00de4     AD 18 01 F6 |             mov newsample, rs
00de8                 | 
00de8     83 4A 01 F6 |             mov     oldt0,time0      ' update global time
00dec     A8 06 01 F1 |             add     time0,dt0    
00df0                 | 
00df0                 |             
00df0                 |  
00df0                 |                                      ' now push dt0 samples to the buffer
00df0     00 50 0D F2 |             cmp      dt0,#0 wz
00df4     84 FE 9F AD |     if_z    jmp      #loop1
00df8     A8 1A 01 F6 |             mov      t1,dt0
00dfc                 |   
00dfc     F9 1D 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
00e00     01 1C 85 F1 |             sub     t2,#1
00e04     FF 1D 05 F5 |             and     t2,#511
00e08     92 1C 19 F2 |             cmp     t2,front wcz
00e0c     EC FF 9F AD |     if_e    jmp     #p301    
00e10                 |     
00e10     92 18 31 FC |             wrlut   newsample, front
00e14     01 24 05 F1 |             add     front,#1
00e18     FF 25 05 F5 |             and     front,#511
00e1c     F7 1B 6D FB |             djnz    t1,#p301
00e20                 |             
00e20     40 FE 9F FD |             jmp     #loop            'loop
00e24                 | 
00e24                 | '-------------------------------------------------------------------------
00e24                 | '------------------ This is the end of the main loop ---------------------
00e24                 | '-------------------------------------------------------------------------
00e24                 | 
00e24                 | '--------------------------------------------------------------------------
00e24                 | '------ Interrupt service -------------------------------------------------
00e24                 | '------ Output the sample, get the next one if exists ---------------------
00e24                 | '--------------------------------------------------------------------------
00e24                 | 
00e24     0E 2A 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
00e28     0F 2C 25 FC |             wypin   rsample,#right       '4
00e2c                 |            
00e2c     92 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
00e30     F5 FF 3B AB |     if_e    reti1                        '8/10
00e34                 | 
00e34     E1 2F A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
00e38     97 2C 39 F9 |           	getword rsample,lsnext,#1    '13
00e3c     97 2A 31 F9 |           	getword lsample,lsnext,#0    '15
00e40     F5 FF 3B FB |             reti1                        '17/19 
00e44                 |           
00e44                 | '---------------------------------------------------------------------------
00e44                 | '-------- End of interrupt -------------------------------------------------
00e44                 | '---------------------------------------------------------------------------    
00e44                 | 
00e44                 | 
00e44                 | '---------------------------------------------------------------------------
00e44                 | '------- Variables ---------------------------------------------------------
00e44                 | '---------------------------------------------------------------------------
00e44                 | 
00e44                 | ' constants
00e44                 | 
00e44                 | 
00e44     00 00 00 10 | a20000000   long $10000000
00e48     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
00e4c                 | 
00e4c                 | ' Time variables
00e4c                 | 
00e4c     00 00 00 00 | time0       long 0    ' Global sample computing time
00e50     01 00 00 00 | time1       long 1    ' Local channels time
00e54     02 00 00 00 | time2       long 2
00e58     03 00 00 00 | time3       long 3
00e5c     04 00 00 00 | time4       long 4
00e60     05 00 00 00 | time5       long 5
00e64     06 00 00 00 | time6       long 6
00e68     07 00 00 00 | time7       long 7
00e6c     08 00 00 00 | time8       long 8
00e70                 | 
00e70                 | 
00e70                 | 
00e70     00 00 00 00 | newsample long 0
00e74                 | '
00e74     00 00 00 00 | t1 long 0
00e78     00 00 00 00 | t2 long 0
00e7c                 | '
00e7c     00 00 00 00 | nrsample long 0
00e80     00 00 00 00 | nlsample long 0
00e84                 | '
00e84     00 00 00 00 | channeladd long 0
00e88                 | 
00e88                 | 
00e88     00 00 00 00 | front       long 0
00e8c                 | 
00e8c                 | ' temporary variables 
00e8c                 | '
00e8c     00 00 00 00 | qq          long 0
00e90     00 00 00 00 | spl         long 0
00e94                 | 
00e94                 | ' circular buffer in LUT
00e94                 | 
00e94                 | 
00e94                 | '
00e94                 | 
00e94                 | ' Interrupt ISR variables
00e94                 | 
00e94                 | 
00e94     00 00 00 00 | lsample     long 0
00e98     00 00 00 00 | rsample     long 0
00e9c     00 00 00 00 | lsnext      long 0
00ea0     00 00 00 00 | rsnext      long 0 
00ea4                 | 
00ea4                 | 
00ea4     00 00 00 00 | pointer0    long 0
00ea8     00 00 00 00 | sample0     long 0
00eac     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
00eb0     00 00 00 00 | lstart0     long 0
00eb4     00 00 00 00 | lend0       long 0
00eb8     00 00 00 00 | volpan0     long 0
00ebc     00 00 00 00 | freqskip0   long 0
00ec0     00 00 00 00 | dummy0      long 0
00ec4                 | 
00ec4     00 00 00 00 | afreq0      long 0
00ec8     00 00 00 00 | askip0      long 0
00ecc     00 00 00 00 | avol0       long 0
00ed0     00 00 00 00 | apan0       long 0
00ed4                 | 
00ed4     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
00ed8     00 00 00 00 | cn          long 0
00edc     00 00 00 00 | ct          long 0
00ee0     00 00 00 00 | dt0         long 0
00ee4                 | 
00ee4                 | ' Samples
00ee4     00 00 00 00 | ls0         long 0
00ee8     00 00 00 00 | rs0         long 0
00eec     00 00 00 00 | channel     long 0
00ef0     00 00 00 00 | ls          long 0    ' Global sample variable
00ef4     00 00 00 00 | rs          long 0
00ef8                 | 
00ef8     00 00 00 00 | ls1         long 0    ' Channel samples
00efc     00 00 00 00 | ls2         long 0
00f00     00 00 00 00 | ls3         long 0
00f04     00 00 00 00 | ls4         long 0
00f08     00 00 00 00 | ls5         long 0
00f0c     00 00 00 00 | ls6         long 0
00f10     00 00 00 00 | ls7         long 0
00f14     00 00 00 00 | ls8         long 0
00f18     00 00 00 00 | rs1         long 0
00f1c     00 00 00 00 | rs2         long 0
00f20     00 00 00 00 | rs3         long 0
00f24     00 00 00 00 | rs4         long 0
00f28     00 00 00 00 | rs5         long 0
00f2c     00 00 00 00 | rs6         long 0
00f30     00 00 00 00 | rs7         long 0
00f34     00 00 00 00 | rs8         long 0
00f38                 | 
00f38     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
00f3c                 | 
00f3c     00 00 00 00 
00f40     00 00 00 00 | null  			long 	0,0           ' for channel reset
00f44     73 32 00 04 
00f48     00 00 10 00 
00f4c     00 00 00 00 
00f50     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
00f54     00 00 C9 00 
00f58     92 01 5B 02 
00f5c     24 03 ED 03 
00f60     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
00f64     48 06 11 07 
00f68     D9 07 A2 08 
00f6c     6A 09 33 0A 
00f70     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
00f74     8C 0C 54 0D 
00f78     1C 0E E3 0E 
00f7c     AB 0F 72 10 
00f80     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
00f84     C8 12 8F 13 
00f88     55 14 1C 15 
00f8c     E2 15 A8 16 
00f90     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
00f94     F9 18 BE 19 
00f98     82 1A 47 1B 
00f9c     0B 1C CF 1C 
00fa0     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
00fa4     1A 1F DD 1F 
00fa8     9F 20 61 21 
00fac     23 22 E5 22 
00fb0     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
00fb4     28 25 E8 25 
00fb8     A8 26 67 27 
00fbc     26 28 E5 28 
00fc0     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
00fc4     1F 2B DC 2B 
00fc8     99 2C 55 2D 
00fcc     11 2E CC 2E 
00fd0     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
00fd4     FB 30 B5 31 
00fd8     6E 32 26 33 
00fdc     DF 33 96 34 
00fe0     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
00fe4     BA 36 6F 37 
00fe8     24 38 D9 38 
00fec     8C 39 40 3A 
00ff0     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
00ff4     56 3C 07 3D 
00ff8     B8 3D 68 3E 
00ffc     17 3F C5 3F 
01000     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
01004     CE 41 7A 42 
01008     25 43 D0 43 
0100c     7A 44 24 45 
01010     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
01014     1C 47 C3 47 
01018     69 48 0F 49 
0101c     B4 49 58 4A 
01020     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
01024     3F 4C E0 4C 
01028     81 4D 20 4E 
0102c     BF 4E 5D 4F 
01030     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
01034     33 51 CE 51 
01038     68 52 02 53 
0103c     9B 53 32 54 
01040     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
01044     F5 55 8A 56 
01048     1D 57 B0 57 
0104c     42 58 D3 58 
01050     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
01054     82 5A 0F 5B 
01058     9C 5B 28 5C 
0105c     B3 5C 3E 5D 
01060     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
01064     D7 5E 5D 5F 
01068     E3 5F 68 60 
0106c     EB 60 6E 61 
01070     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
01074     F1 62 70 63 
01078     EE 63 6C 64 
0107c     E8 64 63 65 
01080     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
01084     CF 66 46 67 
01088     BC 67 32 68 
0108c     A6 68 19 69 
01090     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
01094     6D 6A DC 6A 
01098     4A 6B B7 6B 
0109c     23 6C 8E 6C 
010a0     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
010a4     C9 6D 30 6E 
010a8     96 6E FB 6E 
010ac     5E 6F C1 6F 
010b0     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
010b4     E2 70 40 71 
010b8     9D 71 F9 71 
010bc     54 72 AE 72 
010c0     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
010c4     B5 73 0A 74 
010c8     5F 74 B2 74 
010cc     04 75 55 75 
010d0     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
010d4     41 76 8D 76 
010d8     D8 76 22 77 
010dc     6B 77 B3 77 
010e0     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
010e4     84 78 C7 78 
010e8     09 79 4A 79 
010ec     89 79 C8 79 
010f0     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
010f4     7C 7A B6 7A 
010f8     EE 7A 26 7B 
010fc     5C 7B 91 7B 
01100     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
01104     29 7C 59 7C 
01108     88 7C B6 7C 
0110c     E3 7C 0E 7D 
01110     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
01114     89 7D B0 7D 
01118     D5 7D FA 7D 
0111c     1D 7E 3E 7E 
01120     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
01124     9C 7E B9 7E 
01128     D5 7E EF 7E 
0112c     09 7F 21 7F 
01130     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
01134     61 7F 74 7F 
01138     86 7F 97 7F 
0113c     A6 7F B4 7F 
01140     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
01144     D8 7F E1 7F 
01148     E9 7F F0 7F 
0114c     F5 7F F9 7F 
01150     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
01154     FF 7F FE 7F 
01158     FD 7F F9 7F 
0115c     F5 7F F0 7F 
01160     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
01164     D8 7F CD 7F 
01168     C1 7F B4 7F 
0116c     A6 7F 97 7F 
01170     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
01174     61 7F 4D 7F 
01178     37 7F 21 7F 
0117c     09 7F EF 7E 
01180     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
01184     9C 7E 7E 7E 
01188     5F 7E 3E 7E 
0118c     1D 7E FA 7D 
01190     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
01194     89 7D 62 7D 
01198     39 7D 0E 7D 
0119c     E3 7C B6 7C 
011a0     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
011a4     29 7C F8 7B 
011a8     C5 7B 91 7B 
011ac     5C 7B 26 7B 
011b0     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
011b4     7C 7A 41 7A 
011b8     05 7A C8 79 
011bc     89 79 4A 79 
011c0     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
011c4     84 78 3F 78 
011c8     FA 77 B3 77 
011cc     6B 77 22 77 
011d0     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
011d4     41 76 F3 75 
011d8     A5 75 55 75 
011dc     04 75 B2 74 
011e0     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
011e4     B5 73 5E 73 
011e8     07 73 AE 72 
011ec     54 72 F9 71 
011f0     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
011f4     E2 70 83 70 
011f8     22 70 C1 6F 
011fc     5E 6F FB 6E 
01200     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
01204     C9 6D 61 6D 
01208     F8 6C 8E 6C 
0120c     23 6C B7 6B 
01210     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
01214     6D 6A FD 69 
01218     8B 69 19 69 
0121c     A6 68 32 68 
01220     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
01224     CF 66 56 66 
01228     DD 65 63 65 
0122c     E8 64 6C 64 
01230     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
01234     F1 62 71 62 
01238     F0 61 6E 61 
0123c     EB 60 68 60 
01240     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
01244     D7 5E 4F 5E 
01248     C7 5D 3E 5D 
0124c     B3 5C 28 5C 
01250     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
01254     82 5A F3 59 
01258     64 59 D3 58 
0125c     42 58 B0 57 
01260     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
01264     F5 55 60 55 
01268     C9 54 32 54 
0126c     9B 53 02 53 
01270     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
01274     33 51 97 50 
01278     FB 4F 5D 4F 
0127c     BF 4E 20 4E 
01280     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
01284     3F 4C 9D 4B 
01288     FB 4A 58 4A 
0128c     B4 49 0F 49 
01290     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
01294     1C 47 75 46 
01298     CD 45 24 45 
0129c     7A 44 D0 43 
012a0     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
012a4     CE 41 21 41 
012a8     73 40 C5 3F 
012ac     17 3F 68 3E 
012b0     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
012b4     56 3C A5 3B 
012b8     F2 3A 40 3A 
012bc     8C 39 D9 38 
012c0     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
012c4     BA 36 04 36 
012c8     4D 35 96 34 
012cc     DF 33 26 33 
012d0     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
012d4     FB 30 41 30 
012d8     87 2F CC 2E 
012dc     11 2E 55 2D 
012e0     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
012e4     1F 2B 61 2A 
012e8     A3 29 E5 28 
012ec     26 28 67 27 
012f0     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
012f4     28 25 67 24 
012f8     A6 23 E5 22 
012fc     23 22 61 21 
01300     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
01304     1A 1F 57 1E 
01308     93 1D CF 1C 
0130c     0B 1C 47 1B 
01310     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
01314     F9 18 33 18 
01318     6E 17 A8 16 
0131c     E2 15 1C 15 
01320     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
01324     C8 12 01 12 
01328     3A 11 72 10 
0132c     AB 0F E3 0E 
01330     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
01334     8C 0C C4 0B 
01338     FB 0A 33 0A 
0133c     6A 09 A2 08 
01340     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
01344     48 06 7F 05 
01348     B6 04 ED 03 
0134c     24 03 5B 02 
01350     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
01354     00 00 37 FF 
01358     6E FE A5 FD 
0135c     DC FC 13 FC 
01360     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
01364     B8 F9 EF F8 
01368     27 F8 5E F7 
0136c     96 F6 CD F5 
01370     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
01374     74 F3 AC F2 
01378     E4 F1 1D F1 
0137c     55 F0 8E EF 
01380     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
01384     38 ED 71 EC 
01388     AB EB E4 EA 
0138c     1E EA 58 E9 
01390     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
01394     07 E7 42 E6 
01398     7E E5 B9 E4 
0139c     F5 E3 31 E3 
013a0     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
013a4     E6 E0 23 E0 
013a8     61 DF 9F DE 
013ac     DD DD 1B DD 
013b0     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
013b4     D8 DA 18 DA 
013b8     58 D9 99 D8 
013bc     DA D7 1B D7 
013c0     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
013c4     E1 D4 24 D4 
013c8     67 D3 AB D2 
013cc     EF D1 34 D1 
013d0     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
013d4     05 CF 4B CE 
013d8     92 CD DA CC 
013dc     21 CC 6A CB 
013e0     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
013e4     46 C9 91 C8 
013e8     DC C7 27 C7 
013ec     74 C6 C0 C5 
013f0     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
013f4     AA C3 F9 C2 
013f8     48 C2 98 C1 
013fc     E9 C0 3B C0 
01400     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
01404     32 BE 86 BD 
01408     DB BC 30 BC 
0140c     86 BB DC BA 
01410     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
01414     E4 B8 3D B8 
01418     97 B7 F1 B6 
0141c     4C B6 A8 B5 
01420     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
01424     C1 B3 20 B3 
01428     7F B2 E0 B1 
0142c     41 B1 A3 B0 
01430     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
01434     CD AE 32 AE 
01438     98 AD FE AC 
0143c     65 AC CE AB 
01440     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
01444     0B AA 76 A9 
01448     E3 A8 50 A8 
0144c     BE A7 2D A7 
01450     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
01454     7E A5 F1 A4 
01458     64 A4 D8 A3 
0145c     4D A3 C2 A2 
01460     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
01464     29 A1 A3 A0 
01468     1D A0 98 9F 
0146c     15 9F 92 9E 
01470     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
01474     0F 9D 90 9C 
01478     12 9C 94 9B 
0147c     18 9B 9D 9A 
01480     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
01484     31 99 BA 98 
01488     44 98 CE 97 
0148c     5A 97 E7 96 
01490     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
01494     93 95 24 95 
01498     B6 94 49 94 
0149c     DD 93 72 93 
014a0     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
014a4     37 92 D0 91 
014a8     6A 91 05 91 
014ac     A2 90 3F 90 
014b0     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
014b4     1E 8F C0 8E 
014b8     63 8E 07 8E 
014bc     AC 8D 52 8D 
014c0     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
014c4     4B 8C F6 8B 
014c8     A1 8B 4E 8B 
014cc     FC 8A AB 8A 
014d0     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
014d4     BF 89 73 89 
014d8     28 89 DE 88 
014dc     95 88 4D 88 
014e0     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
014e4     7C 87 39 87 
014e8     F7 86 B6 86 
014ec     77 86 38 86 
014f0     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
014f4     84 85 4A 85 
014f8     12 85 DA 84 
014fc     A4 84 6F 84 
01500     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
01504     D7 83 A7 83 
01508     78 83 4A 83 
0150c     1D 83 F2 82 
01510     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
01514     77 82 50 82 
01518     2B 82 06 82 
0151c     E3 81 C2 81 
01520     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
01524     64 81 47 81 
01528     2B 81 11 81 
0152c     F7 80 DF 80 
01530     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
01534     9F 80 8C 80 
01538     7A 80 69 80 
0153c     5A 80 4C 80 
01540     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
01544     28 80 1F 80 
01548     17 80 10 80 
0154c     0B 80 07 80 
01550     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
01554     01 80 02 80 
01558     03 80 07 80 
0155c     0B 80 10 80 
01560     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
01564     28 80 33 80 
01568     3F 80 4C 80 
0156c     5A 80 69 80 
01570     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
01574     9F 80 B3 80 
01578     C9 80 DF 80 
0157c     F7 80 11 81 
01580     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
01584     64 81 82 81 
01588     A1 81 C2 81 
0158c     E3 81 06 82 
01590     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
01594     77 82 9E 82 
01598     C7 82 F2 82 
0159c     1D 83 4A 83 
015a0     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
015a4     D7 83 08 84 
015a8     3B 84 6F 84 
015ac     A4 84 DA 84 
015b0     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
015b4     84 85 BF 85 
015b8     FB 85 38 86 
015bc     77 86 B6 86 
015c0     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
015c4     7C 87 C1 87 
015c8     06 88 4D 88 
015cc     95 88 DE 88 
015d0     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
015d4     BF 89 0D 8A 
015d8     5B 8A AB 8A 
015dc     FC 8A 4E 8B 
015e0     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
015e4     4B 8C A2 8C 
015e8     F9 8C 52 8D 
015ec     AC 8D 07 8E 
015f0     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
015f4     1E 8F 7D 8F 
015f8     DE 8F 3F 90 
015fc     A2 90 05 91 
01600     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
01604     37 92 9F 92 
01608     08 93 72 93 
0160c     DD 93 49 94 
01610     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
01614     93 95 03 96 
01618     75 96 E7 96 
0161c     5A 97 CE 97 
01620     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
01624     31 99 AA 99 
01628     23 9A 9D 9A 
0162c     18 9B 94 9B 
01630     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
01634     0F 9D 8F 9D 
01638     10 9E 92 9E 
0163c     15 9F 98 9F 
01640     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
01644     29 A1 B1 A1 
01648     39 A2 C2 A2 
0164c     4D A3 D8 A3 
01650     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
01654     7E A5 0D A6 
01658     9C A6 2D A7 
0165c     BE A7 50 A8 
01660     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
01664     0B AA A0 AA 
01668     37 AB CE AB 
0166c     65 AC FE AC 
01670     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
01674     CD AE 69 AF 
01678     05 B0 A3 B0 
0167c     41 B1 E0 B1 
01680     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
01684     C1 B3 63 B4 
01688     05 B5 A8 B5 
0168c     4C B6 F1 B6 
01690     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
01694     E4 B8 8B B9 
01698     33 BA DC BA 
0169c     86 BB 30 BC 
016a0     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
016a4     32 BE DF BE 
016a8     8D BF 3B C0 
016ac     E9 C0 98 C1 
016b0     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
016b4     AA C3 5B C4 
016b8     0E C5 C0 C5 
016bc     74 C6 27 C7 
016c0     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
016c4     46 C9 FC C9 
016c8     B3 CA 6A CB 
016cc     21 CC DA CC 
016d0     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
016d4     05 CF BF CF 
016d8     79 D0 34 D1 
016dc     EF D1 AB D2 
016e0     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
016e4     E1 D4 9F D5 
016e8     5D D6 1B D7 
016ec     DA D7 99 D8 
016f0     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
016f4     D8 DA 99 DB 
016f8     5A DC 1B DD 
016fc     DD DD 9F DE 
01700     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
01704     E6 E0 A9 E1 
01708     6D E2 31 E3 
0170c     F5 E3 B9 E4 
01710     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
01714     07 E7 CD E7 
01718     92 E8 58 E9 
0171c     1E EA E4 EA 
01720     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
01724     38 ED FF ED 
01728     C6 EE 8E EF 
0172c     55 F0 1D F1 
01730     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
01734     74 F3 3C F4 
01738     05 F5 CD F5 
0173c     96 F6 5E F7 
01740     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
01744     B8 F9 81 FA 
01748     4A FB 13 FC 
0174c     DC FC A5 FD 
01750     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
01754                 | 	alignl
01754                 | __system__dat_
01754     00 00 00 00 
01758     00 00 00 00 | 	byte	$00[8]
0175c     03 00 00 00 
01760     00 00 00 00 
01764     00 00 00 00 
01768     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0176c                 | objmem
0176c     00 00 00 00 
      ...             
01884     00 00 00 00 
01888     00 00 00 00 | 	long	0[72]
0188c                 | stackspace
0188c     00 00 00 00 | 	long	0[1]
01890 0e2             | 	org	COG_BSS_START
01890 0e2             | arg01
01890 0e2             | 	res	1
01890 0e3             | arg02
01890 0e3             | 	res	1
01890 0e4             | arg03
01890 0e4             | 	res	1
01890 0e5             | arg04
01890 0e5             | 	res	1
01890 0e6             | local01
01890 0e6             | 	res	1
01890 0e7             | local02
01890 0e7             | 	res	1
01890 0e8             | local03
01890 0e8             | 	res	1
01890 0e9             | local04
01890 0e9             | 	res	1
01890 0ea             | local05
01890 0ea             | 	res	1
01890 0eb             | local06
01890 0eb             | 	res	1
01890 0ec             | local07
01890 0ec             | 	res	1
01890 0ed             | local08
01890 0ed             | 	res	1
01890 0ee             | local09
01890 0ee             | 	res	1
01890 0ef             | muldiva_
01890 0ef             | 	res	1
01890 0f0             | muldivb_
01890 0f0             | 	res	1
01890 0f1             | 	fit	480
01890 0f1             | 
