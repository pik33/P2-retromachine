00000                 | 
00000                 | #line 1 "/home/pik33/Dokumenty/GitHub/P2-retromachine/Propeller/Tracker player/player3.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 18 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 0B F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 B0 14 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5E 62 FD | 	cogid	arg01
00614 084 03 5E 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 FB 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 19 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5F 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 61 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 63 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 65 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 18 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 62 56 F0 |         shr	arg03, #1 wc
00688 0a1 2F 61 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5E 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 60 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 62 56 F0 |         shr	arg03, #1 wc
00698 0a5 2F 61 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5E 06 C1 |  if_c   add	arg01, #2
006a0 0a7 30 61 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2F 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 62 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 31 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 60 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 03 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 FF 5B 8D F9 |     altd  COUNT_, #511
006d4 0b4 28 00 64 FD |     setq #0-0
006d8 0b5 61 6D 66 FC |     wrlong local01, ptra++
006dc 0b6             | pushregs_done_
006dc 0b6 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006e0 0b7 61 5B 65 FC |     wrlong COUNT_, ptra++
006e4 0b8 F8 5F 01 F6 |     mov    fp, ptra
006e8 0b9 2C EC 63 FD |     jmp  pa
006ec 0ba             |  popregs_
006ec 0ba 2B EC 63 FD |     pop    pa
006f0 0bb 28 04 64 FD |     setq   #2
006f4 0bc 5F 5B 05 FB |     rdlong COUNT_, --ptra
006f8 0bd 02 5A 75 FB |     djf    COUNT_, #popregs__ret
006fc 0be 28 5A 61 FD |     setq   COUNT_
00700 0bf 5F 6D 06 FB |     rdlong local01, --ptra
00704 0c0             | popregs__ret
00704 0c0 2A 5C 61 FD |     push   RETADDR_
00708 0c1 2C EC 63 FD |     jmp    pa
0070c 0c2             | 
0070c 0c2             | unsdivide_
0070c 0c2 28 00 64 FD |        setq    #0
00710 0c3 4D 99 12 FD |        qdiv    muldiva_, muldivb_
00714 0c4 18 9A 62 FD |        getqx   muldivb_
00718 0c5 19 98 62 0D |  _ret_ getqy   muldiva_
0071c 0c6             | 
0071c 0c6             | divide_
0071c 0c6 4C 99 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00720 0c7 03 F8 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
00724 0c8 4D 9B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00728 0c9 02 F8 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
0072c 0ca 2D 00 64 AD |  if_z  ret
00730 0cb D8 FF BF FD |        call    #unsdivide_
00734 0cc 01 F8 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00738 0cd 4C 99 82 F6 |        negc    muldiva_,muldiva_ 
0073c 0ce 02 F8 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00740 0cf 4D 9B 82 06 |  _ret_ negc    muldivb_,muldivb_
00744 0d0             | __pc long 0
00744 0d0 00 00 00 00 
00748 0d1             | __setjmp
00748 0d1 2B A0 61 FD |     pop __pc
0074c 0d2 00 18 06 F6 |     mov result1, #0
00750 0d3 00 1A 06 F6 |     mov result2, #0
00754 0d4 2F F3 01 F6 |     mov abortchain, arg01
00758 0d5 2F 5F 61 FC |     wrlong fp, arg01
0075c 0d6 04 5E 06 F1 |     add arg01, #4
00760 0d7 2F F1 63 FC |     wrlong ptra, arg01
00764 0d8 04 5E 06 F1 |     add arg01, #4
00768 0d9 2F FB 61 FC |     wrlong objptr, arg01
0076c 0da 04 5E 06 F1 |     add arg01, #4
00770 0db 2F A1 61 FC |     wrlong __pc, arg01
00774 0dc 2C A0 61 FD |     jmp __pc
00778 0dd             | __unwind_pc long 0
00778 0dd 00 00 00 00 
0077c 0de             | __unwind_stack
0077c 0de 2B BA 61 FD |    pop  __unwind_pc
00780 0df             | __unwind_loop
00780 0df 30 5F 0A F2 |    cmp  arg01, arg02 wz
00784 0e0 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00788 0e1 2F F1 03 F6 |    mov   ptra, arg01
0078c 0e2 5C FF BF FD |    call  #popregs_
00790 0e3 AF 5E 02 F6 |    mov   arg01, fp
00794 0e4 E8 FF 9F FD |    jmp   #__unwind_loop
00798 0e5             | __unwind_stack_ret
00798 0e5 2C BA 61 FD |    jmp  __unwind_pc
0079c 0e6             | __longjmp
0079c 0e6 2B A0 61 FD |     pop __pc
007a0 0e7 00 5E 0E F2 |     cmp    arg01, #0 wz
007a4 0e8 30 00 90 AD |  if_z jmp #nocatch
007a8 0e9 30 19 02 F6 |     mov result1, arg02
007ac 0ea 01 1A 06 F6 |     mov result2, #1
007b0 0eb 2F 61 02 FB |     rdlong arg02, arg01
007b4 0ec 04 5E 06 F1 |     add arg01, #4
007b8 0ed 2F F1 03 FB |     rdlong ptra, arg01
007bc 0ee 04 5E 06 F1 |     add arg01, #4
007c0 0ef 2F FB 01 FB |     rdlong objptr, arg01
007c4 0f0 04 5E 06 F1 |     add arg01, #4
007c8 0f1 2F A1 01 FB |     rdlong __pc, arg01
007cc 0f2 AF 5E 02 F6 |     mov arg01, fp
007d0 0f3 A8 FF BF FD |     call #__unwind_stack
007d4 0f4             | __longjmp_ret
007d4 0f4 2C A0 61 FD |     jmp  __pc
007d8 0f5             | nocatch
007d8 0f5 00 62 0E F2 |     cmp arg03, #0 wz
007dc 0f6 28 FE 9F AD |  if_z jmp #cogexit
007e0 0f7 F0 FF 9F FD |     jmp #__longjmp_ret
007e4 0f8             | 
007e4 0f8             | __heap_ptr
007e4 0f8 F8 30 02 00 | 	long	@__heap_base
007e8 0f9             | abortchain
007e8 0f9 00 00 00 00 | 	long	0
007ec 0fa             | entryptr__
007ec 0fa 04 04 00 00 | 	long	@entry
007f0 0fb             | itmp1_
007f0 0fb 00 00 00 00 | 	long	0
007f4 0fc             | itmp2_
007f4 0fc 00 00 00 00 | 	long	0
007f8 0fd             | objptr
007f8 0fd 00 41 02 00 | 	long	@objmem
007fc 0fe             | ptr___struct___bas_wrap_sender_tx_
007fc 0fe 58 91 00 00 | 	long	@__struct___bas_wrap_sender_tx
00800 0ff             | ptr___struct__s_vfs_file_t_putchar_
00800 0ff A0 90 00 00 | 	long	@__struct__s_vfs_file_t_putchar
00804 100             | ptr___system__dat__
00804 100 94 2E 02 00 | 	long	@__system__dat_
00808 101             | ptr__audio019_spin2_dat__
00808 101 84 23 02 00 | 	long	@_audio019_spin2_dat_
0080c 102             | ptr__dat__
0080c 102 84 92 00 00 | 	long	@_dat_
00810 103             | ptr__hng033rm_spin2_dat__
00810 103 74 E9 01 00 | 	long	@_hng033rm_spin2_dat_
00814 104             | ptr__hng033rm_spin2_putchar_
00814 104 2C 30 00 00 | 	long	@_hng033rm_spin2_putchar
00818 105             | ptr__hng033rm_spin2_putpixel1_
00818 105 14 2A 00 00 | 	long	@_hng033rm_spin2_putpixel1
0081c 106             | ptr__hng033rm_spin2_putpixel2_
0081c 106 00 2B 00 00 | 	long	@_hng033rm_spin2_putpixel2
00820 107             | ptr__hng033rm_spin2_putpixel4_
00820 107 E0 2B 00 00 | 	long	@_hng033rm_spin2_putpixel4
00824 108             | ptr__hng033rm_spin2_putpixel8_
00824 108 CC 2C 00 00 | 	long	@_hng033rm_spin2_putpixel8
00828 109             | ptr__retrocog_spin2_serialcog_
00828 109 FC 41 00 00 | 	long	@_retrocog_spin2_serialcog
0082c 10a             | ptr__trackerplayer_spin2_dat__
0082c 10a 60 12 02 00 | 	long	@_trackerplayer_spin2_dat_
00830 10b             | ptr_stackspace_
00830 10b 14 54 02 00 | 	long	@stackspace
00834 10c             | result1
00834 10c 00 00 00 00 | 	long	0
00838 10d             | result2
00838 10d 00 00 00 00 | 	long	0
0083c 10e             | result3
0083c 10e 00 00 00 00 | 	long	0
00840 10f             | COG_BSS_START
00840 10f             | 	fit	480
00840                 | 	orgh
00840                 | hubentry
00840                 | 
00840                 | ' 
00840                 | ' function startvideo(mode=64, pin=0) 'todo return a cog#
00840                 | _startvideo
00840     6C 37 B0 FD | 	call	#_hng033rm_spin2_start
00844     00 5E 06 F6 | 	mov	arg01, #0
00848     00 60 06 F6 | 	mov	arg02, #0
0084c     00 62 06 F6 | 	mov	arg03, #0
00850     70 25 B0 FD | 	call	#_hng033rm_spin2_setbordercolor
00854                 | ' v030.start(mode,pin)
00854                 | ' v030.setbordercolor(0,0,0)
00854                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00854     FD 5E 02 F6 | 	mov	arg01, objptr
00858     04 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_putchar_
0085c     6C 66 B0 FD | 	call	#__system___make_methodptr
00860     00 1C 06 F6 | 	mov	result3, #0
00864     00 1A 06 F6 | 	mov	result2, #0
00868     0C 61 02 F6 | 	mov	arg02, result1
0086c     00 62 06 F6 | 	mov	arg03, #0
00870     00 64 06 F6 | 	mov	arg04, #0
00874     00 5E 06 F6 | 	mov	arg01, #0
00878     2C 69 B0 FD | 	call	#__system___basic_open
0087c     00 18 06 F6 | 	mov	result1, #0
00880                 | _startvideo_ret
00880     2D 00 64 FD | 	ret
00884                 | 
00884                 | ' 
00884                 | ' function addr(byref v as any)
00884                 | _addr
00884     00 5A 05 F6 | 	mov	COUNT_, #0
00888     B0 00 A0 FD | 	call	#pushregs_
0088c     08 F0 07 F1 | 	add	ptra, #8
00890     04 5E 05 F1 | 	add	fp, #4
00894     AF 5E 62 FC | 	wrlong	arg01, fp
00898                 | ' 
00898                 | ' return(cast(ulong,@v))
00898     2F 19 02 F6 | 	mov	result1, arg01
0089c     04 5E 85 F1 | 	sub	fp, #4
008a0     AF F0 03 F6 | 	mov	ptra, fp
008a4     BA 00 A0 FD | 	call	#popregs_
008a8                 | _addr_ret
008a8     2D 00 64 FD | 	ret
008ac                 | 
008ac                 | ' 
008ac                 | ' '0 - samplestart   - a pointer to the sample start
008ac                 | ' '1 - sampletype    - 0: 16 bit, 1 8 bit, both signed
008ac                 | ' '2 - loopstart     - loop start
008ac                 | ' '3 - loopend       - loop end, has to be >=loopstart+2
008ac                 | ' '4 - volume        - sample volume, 16384=1
008ac                 | ' '5 - pan           - 0..16384
008ac                 | ' '6 - synthfreq     - the frequency divider for the channel. The channel sample rate will be 3546895 or 3579545 Hz divided by this
008ac                 | ' '7 - skip          - value to add to the phase accumulator for the next sample, 1 for 8 bit, 2 for 16 bit, more for special purposes
008ac                 | ' '8 - cmd 
008ac                 | ' 
008ac                 | ' 
008ac                 | ' sub test 
008ac                 | _test
008ac     01 5A 05 F6 | 	mov	COUNT_, #1
008b0     B0 00 A0 FD | 	call	#pushregs_
008b4     16 60 06 F6 | 	mov	arg02, #22
008b8                 | ' 
008b8                 | ' ''---------- Set the (x,y) position of cursor
008b8                 | ' 
008b8                 | ' cursor_x:=x
008b8     34 FA 05 F1 | 	add	objptr, #52
008bc     FD 0A 48 FC | 	wrbyte	#5, objptr
008c0                 | ' cursor_y:=y
008c0     01 FA 05 F1 | 	add	objptr, #1
008c4     FD 2C 48 FC | 	wrbyte	#22, objptr
008c8     07 00 00 FF 
008cc     AE FB 05 F1 | 	add	objptr, ##4014
008d0     FD 6C C2 FA | 	rdbyte	local01, objptr
008d4     02 6C 66 F0 | 	shl	local01, #2
008d8     01 00 00 FF 
008dc     65 FA 05 F1 | 	add	objptr, ##613
008e0     FD 6C 02 F1 | 	add	local01, objptr
008e4     36 5F 02 FB | 	rdlong	arg01, local01
008e8     09 00 00 FF 
008ec     48 FA 85 F1 | 	sub	objptr, ##4680
008f0     C4 28 B0 FD | 	call	#_hng033rm_spin2_write
008f4     09 00 00 FF 
008f8     D4 FA 05 F1 | 	add	objptr, ##4820
008fc     FD 5E 02 FB | 	rdlong	arg01, objptr
00900     09 00 00 FF 
00904     D4 FA 85 F1 | 	sub	objptr, ##4820
00908     AC 28 B0 FD | 	call	#_hng033rm_spin2_write
0090c                 | ' 
0090c                 | ' ''---------- Set the (x,y) position of cursor
0090c                 | ' 
0090c                 | ' cursor_x:=x
0090c     34 FA 05 F1 | 	add	objptr, #52
00910     FD 02 48 FC | 	wrbyte	#1, objptr
00914                 | ' cursor_y:=y
00914     01 FA 05 F1 | 	add	objptr, #1
00918     FD 2C 48 FC | 	wrbyte	#22, objptr
0091c     07 00 00 FF 
00920     D6 FB 05 F1 | 	add	objptr, ##4054
00924     FD 5E 02 FB | 	rdlong	arg01, objptr
00928     10 FA 05 F1 | 	add	objptr, #16
0092c     FD 6C 02 FB | 	rdlong	local01, objptr
00930     08 00 00 FF 
00934     1B FA 85 F1 | 	sub	objptr, ##4123
00938     36 5F 02 F1 | 	add	arg01, local01
0093c     03 60 06 F6 | 	mov	arg02, #3
00940     9C 2B B0 FD | 	call	#_hng033rm_spin2_inttostr2
00944     0C 5F 02 F6 | 	mov	arg01, result1
00948     6C 28 B0 FD | 	call	#_hng033rm_spin2_write
0094c     16 60 06 F6 | 	mov	arg02, #22
00950                 | ' 
00950                 | ' ''---------- Set the (x,y) position of cursor
00950                 | ' 
00950                 | ' cursor_x:=x
00950     34 FA 05 F1 | 	add	objptr, #52
00954     FD 40 48 FC | 	wrbyte	#32, objptr
00958                 | ' cursor_y:=y
00958     01 FA 05 F1 | 	add	objptr, #1
0095c     FD 2C 48 FC | 	wrbyte	#22, objptr
00960     07 00 00 FF 
00964     AF FB 05 F1 | 	add	objptr, ##4015
00968     FD 6C C2 FA | 	rdbyte	local01, objptr
0096c     02 6C 66 F0 | 	shl	local01, #2
00970     01 00 00 FF 
00974     64 FA 05 F1 | 	add	objptr, ##612
00978     FD 6C 02 F1 | 	add	local01, objptr
0097c     36 5F 02 FB | 	rdlong	arg01, local01
00980     09 00 00 FF 
00984     48 FA 85 F1 | 	sub	objptr, ##4680
00988     2C 28 B0 FD | 	call	#_hng033rm_spin2_write
0098c     09 00 00 FF 
00990     D4 FA 05 F1 | 	add	objptr, ##4820
00994     FD 5E 02 FB | 	rdlong	arg01, objptr
00998     09 00 00 FF 
0099c     D4 FA 85 F1 | 	sub	objptr, ##4820
009a0     14 28 B0 FD | 	call	#_hng033rm_spin2_write
009a4                 | ' 
009a4                 | ' ''---------- Set the (x,y) position of cursor
009a4                 | ' 
009a4                 | ' cursor_x:=x
009a4     34 FA 05 F1 | 	add	objptr, #52
009a8     FD 38 48 FC | 	wrbyte	#28, objptr
009ac                 | ' cursor_y:=y
009ac     01 FA 05 F1 | 	add	objptr, #1
009b0     FD 2C 48 FC | 	wrbyte	#22, objptr
009b4     07 00 00 FF 
009b8     DA FB 05 F1 | 	add	objptr, ##4058
009bc     FD 5E 02 FB | 	rdlong	arg01, objptr
009c0     10 FA 05 F1 | 	add	objptr, #16
009c4     FD 6C 02 FB | 	rdlong	local01, objptr
009c8     08 00 00 FF 
009cc     1F FA 85 F1 | 	sub	objptr, ##4127
009d0     36 5F 02 F1 | 	add	arg01, local01
009d4     03 60 06 F6 | 	mov	arg02, #3
009d8     04 2B B0 FD | 	call	#_hng033rm_spin2_inttostr2
009dc     0C 5F 02 F6 | 	mov	arg01, result1
009e0     D4 27 B0 FD | 	call	#_hng033rm_spin2_write
009e4     16 60 06 F6 | 	mov	arg02, #22
009e8                 | ' 
009e8                 | ' ''---------- Set the (x,y) position of cursor
009e8                 | ' 
009e8                 | ' cursor_x:=x
009e8     34 FA 05 F1 | 	add	objptr, #52
009ec     FD 78 48 FC | 	wrbyte	#60, objptr
009f0                 | ' cursor_y:=y
009f0     01 FA 05 F1 | 	add	objptr, #1
009f4     FD 2C 48 FC | 	wrbyte	#22, objptr
009f8     07 00 00 FF 
009fc     B0 FB 05 F1 | 	add	objptr, ##4016
00a00     FD 6C C2 FA | 	rdbyte	local01, objptr
00a04     02 6C 66 F0 | 	shl	local01, #2
00a08     01 00 00 FF 
00a0c     63 FA 05 F1 | 	add	objptr, ##611
00a10     FD 6C 02 F1 | 	add	local01, objptr
00a14     36 5F 02 FB | 	rdlong	arg01, local01
00a18     09 00 00 FF 
00a1c     48 FA 85 F1 | 	sub	objptr, ##4680
00a20     94 27 B0 FD | 	call	#_hng033rm_spin2_write
00a24     09 00 00 FF 
00a28     D4 FA 05 F1 | 	add	objptr, ##4820
00a2c     FD 5E 02 FB | 	rdlong	arg01, objptr
00a30     09 00 00 FF 
00a34     D4 FA 85 F1 | 	sub	objptr, ##4820
00a38     7C 27 B0 FD | 	call	#_hng033rm_spin2_write
00a3c                 | ' 
00a3c                 | ' ''---------- Set the (x,y) position of cursor
00a3c                 | ' 
00a3c                 | ' cursor_x:=x
00a3c     34 FA 05 F1 | 	add	objptr, #52
00a40     FD 70 48 FC | 	wrbyte	#56, objptr
00a44                 | ' cursor_y:=y
00a44     01 FA 05 F1 | 	add	objptr, #1
00a48     FD 2C 48 FC | 	wrbyte	#22, objptr
00a4c     07 00 00 FF 
00a50     DE FB 05 F1 | 	add	objptr, ##4062
00a54     FD 5E 02 FB | 	rdlong	arg01, objptr
00a58     10 FA 05 F1 | 	add	objptr, #16
00a5c     FD 6C 02 FB | 	rdlong	local01, objptr
00a60     08 00 00 FF 
00a64     23 FA 85 F1 | 	sub	objptr, ##4131
00a68     36 5F 02 F1 | 	add	arg01, local01
00a6c     03 60 06 F6 | 	mov	arg02, #3
00a70     6C 2A B0 FD | 	call	#_hng033rm_spin2_inttostr2
00a74     0C 5F 02 F6 | 	mov	arg01, result1
00a78     3C 27 B0 FD | 	call	#_hng033rm_spin2_write
00a7c                 | ' 
00a7c                 | ' ''---------- Set the (x,y) position of cursor
00a7c                 | ' 
00a7c                 | ' cursor_x:=x
00a7c     34 FA 05 F1 | 	add	objptr, #52
00a80     FD A8 48 FC | 	wrbyte	#84, objptr
00a84                 | ' cursor_y:=y
00a84     01 FA 05 F1 | 	add	objptr, #1
00a88     FD 2C 48 FC | 	wrbyte	#22, objptr
00a8c     07 00 00 FF 
00a90     E2 FB 05 F1 | 	add	objptr, ##4066
00a94     FD 5E 02 FB | 	rdlong	arg01, objptr
00a98     10 FA 05 F1 | 	add	objptr, #16
00a9c     FD 6C 02 FB | 	rdlong	local01, objptr
00aa0     08 00 00 FF 
00aa4     27 FA 85 F1 | 	sub	objptr, ##4135
00aa8     36 5F 02 F1 | 	add	arg01, local01
00aac     03 60 06 F6 | 	mov	arg02, #3
00ab0     2C 2A B0 FD | 	call	#_hng033rm_spin2_inttostr2
00ab4     0C 5F 02 F6 | 	mov	arg01, result1
00ab8     FC 26 B0 FD | 	call	#_hng033rm_spin2_write
00abc     16 60 06 F6 | 	mov	arg02, #22
00ac0                 | ' 
00ac0                 | ' ''---------- Set the (x,y) position of cursor
00ac0                 | ' 
00ac0                 | ' cursor_x:=x
00ac0     34 FA 05 F1 | 	add	objptr, #52
00ac4     FD B0 48 FC | 	wrbyte	#88, objptr
00ac8                 | ' cursor_y:=y
00ac8     01 FA 05 F1 | 	add	objptr, #1
00acc     FD 2C 48 FC | 	wrbyte	#22, objptr
00ad0     07 00 00 FF 
00ad4     B1 FB 05 F1 | 	add	objptr, ##4017
00ad8     FD 6C C2 FA | 	rdbyte	local01, objptr
00adc     02 6C 66 F0 | 	shl	local01, #2
00ae0     01 00 00 FF 
00ae4     62 FA 05 F1 | 	add	objptr, ##610
00ae8     FD 6C 02 F1 | 	add	local01, objptr
00aec     36 5F 02 FB | 	rdlong	arg01, local01
00af0     09 00 00 FF 
00af4     48 FA 85 F1 | 	sub	objptr, ##4680
00af8     BC 26 B0 FD | 	call	#_hng033rm_spin2_write
00afc     09 00 00 FF 
00b00     D4 FA 05 F1 | 	add	objptr, ##4820
00b04     FD 5E 02 FB | 	rdlong	arg01, objptr
00b08     09 00 00 FF 
00b0c     D4 FA 85 F1 | 	sub	objptr, ##4820
00b10     A4 26 B0 FD | 	call	#_hng033rm_spin2_write
00b14     AF F0 03 F6 | 	mov	ptra, fp
00b18     BA 00 A0 FD | 	call	#popregs_
00b1c                 | _test_ret
00b1c     2D 00 64 FD | 	ret
00b20                 | 
00b20                 | ' 
00b20                 | ' 
00b20                 | ' sub getinfo(ma,num)
00b20                 | _getinfo
00b20     0B 5A 05 F6 | 	mov	COUNT_, #11
00b24     B0 00 A0 FD | 	call	#pushregs_
00b28     2F 6D 02 F6 | 	mov	local01, arg01
00b2c     30 6F 02 F6 | 	mov	local02, arg02
00b30     04 60 06 F6 | 	mov	arg02, #4
00b34                 | ' 
00b34                 | ' ''---------- Set the (x,y) position of cursor
00b34                 | ' 
00b34                 | ' cursor_x:=x
00b34     34 FA 05 F1 | 	add	objptr, #52
00b38     FD 02 48 FC | 	wrbyte	#1, objptr
00b3c                 | ' cursor_y:=y
00b3c     01 FA 05 F1 | 	add	objptr, #1
00b40     FD 08 48 FC | 	wrbyte	#4, objptr
00b44     35 FA 85 F1 | 	sub	objptr, #53
00b48                 | ' 'v030. setwritecolors(170,147):
00b48                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00b48     00 5E 06 F6 | 	mov	arg01, #0
00b4c     1C 7B B0 FD | 	call	#__system___getiolock_0150
00b50     0C 5F 02 F6 | 	mov	arg01, result1
00b54     B4 63 B0 FD | 	call	#__system___lockmem
00b58     00 18 06 F6 | 	mov	result1, #0
00b5c     48 00 00 FF 
00b60     E6 61 06 F6 | 	mov	arg02, ##@LR__0506
00b64     00 5E 06 F6 | 	mov	arg01, #0
00b68     00 62 06 F6 | 	mov	arg03, #0
00b6c     58 67 B0 FD | 	call	#__system___basic_print_string
00b70     00 5E 06 F6 | 	mov	arg01, #0
00b74     0A 60 06 F6 | 	mov	arg02, #10
00b78     00 62 06 F6 | 	mov	arg03, #0
00b7c     FC 66 B0 FD | 	call	#__system___basic_print_char
00b80     01 18 06 F6 | 	mov	result1, #1
00b84     00 5E 06 F6 | 	mov	arg01, #0
00b88     E0 7A B0 FD | 	call	#__system___getiolock_0150
00b8c     0C 01 68 FC | 	wrlong	#0, result1
00b90     00 18 06 F6 | 	mov	result1, #0
00b94                 | ' ': v030. setwritecolors(154,147)
00b94                 | ' for i=0 to 31: sn$(i)="S"+decuns$(i,2)+space$(19) :next i
00b94     00 70 06 F6 | 	mov	local03, #0
00b98                 | LR__0001
00b98     38 73 02 F6 | 	mov	local04, local03
00b9c     02 72 66 F0 | 	shl	local04, #2
00ba0     09 00 00 FF 
00ba4     48 FA 05 F1 | 	add	objptr, ##4680
00ba8     FD 72 02 F1 | 	add	local04, objptr
00bac     49 00 00 FF 
00bb0     4F 74 06 F6 | 	mov	local05, ##@LR__0507
00bb4     38 5F 02 F6 | 	mov	arg01, local03
00bb8     02 60 06 F6 | 	mov	arg02, #2
00bbc     09 00 00 FF 
00bc0     48 FA 85 F1 | 	sub	objptr, ##4680
00bc4     0A 62 06 F6 | 	mov	arg03, #10
00bc8     48 6C B0 FD | 	call	#__system__Number_S
00bcc     0C 61 02 F6 | 	mov	arg02, result1
00bd0     3A 5F 02 F6 | 	mov	arg01, local05
00bd4     70 63 B0 FD | 	call	#__system___string_concat
00bd8     0C 75 02 F6 | 	mov	local05, result1
00bdc     13 5E 06 F6 | 	mov	arg01, #19
00be0     48 00 00 FF 
00be4     90 61 06 F6 | 	mov	arg02, ##@LR__0500
00be8     F4 6C B0 FD | 	call	#__system__String_S
00bec     0C 61 02 F6 | 	mov	arg02, result1
00bf0     3A 5F 02 F6 | 	mov	arg01, local05
00bf4     50 63 B0 FD | 	call	#__system___string_concat
00bf8     39 19 62 FC | 	wrlong	result1, local04
00bfc     01 70 06 F1 | 	add	local03, #1
00c00     20 70 5E F2 | 	cmps	local03, #32 wcz
00c04     90 FF 9F CD |  if_b	jmp	#LR__0001
00c08                 | ' for i=1 to num
00c08     01 70 06 F6 | 	mov	local03, #1
00c0c     01 6E 06 F1 | 	add	local02, #1
00c10                 | LR__0002
00c10     37 71 5A F2 | 	cmps	local03, local02 wcz
00c14     54 08 90 3D |  if_ae	jmp	#LR__0007
00c18                 | '   for j=0 to 21
00c18     00 76 06 F6 | 	mov	local06, #0
00c1c                 | LR__0003
00c1c     38 5F 02 F6 | 	mov	arg01, local03
00c20     02 5E 66 F0 | 	shl	arg01, #2
00c24     09 00 00 FF 
00c28     48 FA 05 F1 | 	add	objptr, ##4680
00c2c     FD 5E 02 F1 | 	add	arg01, objptr
00c30     09 00 00 FF 
00c34     48 FA 85 F1 | 	sub	objptr, ##4680
00c38     48 FC BF FD | 	call	#_addr
00c3c                 | ' asm
00c3c     0C 79 02 FB | 	rdlong	local07, result1
00c40                 | ' return r
00c40     09 00 00 FF 
00c44     F8 FA 05 F1 | 	add	objptr, ##4856
00c48     FD 78 62 FC | 	wrlong	local07, objptr
00c4c     36 5F 02 F6 | 	mov	arg01, local01
00c50     14 5E 06 F1 | 	add	arg01, #20
00c54     38 75 02 F6 | 	mov	local05, local03
00c58     01 74 86 F1 | 	sub	local05, #1
00c5c     3A 7B 02 F6 | 	mov	local08, local05
00c60     04 7A 66 F0 | 	shl	local08, #4
00c64     3A 7B 82 F1 | 	sub	local08, local05
00c68     01 7A 66 F0 | 	shl	local08, #1
00c6c     3D 5F 02 F1 | 	add	arg01, local08
00c70     3B 5F 02 F1 | 	add	arg01, local06
00c74                 | ' asm
00c74     2F 19 C2 FA | 	rdbyte	result1, arg01
00c78                 | ' return r
00c78     0C 79 02 F6 | 	mov	local07, result1
00c7c     07 78 46 F7 | 	zerox	local07, #7
00c80     04 FA 05 F1 | 	add	objptr, #4
00c84     FD 78 62 FC | 	wrlong	local07, objptr
00c88                 | '     a=lpeek(addr(sn$(i)))
00c88                 | '     b=(peek(ma+20+30*(i-1)+j))
00c88                 | '     if b>=32 then poke a+j,b
00c88     09 00 00 FF 
00c8c     FC FA 85 F1 | 	sub	objptr, ##4860
00c90     20 78 5E F2 | 	cmps	local07, #32 wcz
00c94     24 00 90 CD |  if_b	jmp	#LR__0004
00c98     09 00 00 FF 
00c9c     F8 FA 05 F1 | 	add	objptr, ##4856
00ca0     FD 5E 02 FB | 	rdlong	arg01, objptr
00ca4     3B 5F 02 F1 | 	add	arg01, local06
00ca8     04 FA 05 F1 | 	add	objptr, #4
00cac     FD 60 02 FB | 	rdlong	arg02, objptr
00cb0     09 00 00 FF 
00cb4     FC FA 85 F1 | 	sub	objptr, ##4860
00cb8                 | ' asm
00cb8     2F 61 42 FC | 	wrbyte	arg02, arg01
00cbc                 | LR__0004
00cbc     01 76 06 F1 | 	add	local06, #1
00cc0     16 76 5E F2 | 	cmps	local06, #22 wcz
00cc4     54 FF 9F CD |  if_b	jmp	#LR__0003
00cc8     36 5F 02 F6 | 	mov	arg01, local01
00ccc     14 5E 06 F1 | 	add	arg01, #20
00cd0     38 7B 02 F6 | 	mov	local08, local03
00cd4     01 7A 86 F1 | 	sub	local08, #1
00cd8     3D 7D 02 F6 | 	mov	local09, local08
00cdc     04 7C 66 F0 | 	shl	local09, #4
00ce0     3D 7D 82 F1 | 	sub	local09, local08
00ce4     01 7C 66 F0 | 	shl	local09, #1
00ce8     3E 5F 02 F1 | 	add	arg01, local09
00cec     16 5E 06 F1 | 	add	arg01, #22
00cf0                 | ' asm
00cf0     2F 75 C2 FA | 	rdbyte	local05, arg01
00cf4                 | ' return r
00cf4     07 74 46 F7 | 	zerox	local05, #7
00cf8     08 74 66 F0 | 	shl	local05, #8
00cfc     36 5F 02 F6 | 	mov	arg01, local01
00d00     14 5E 06 F1 | 	add	arg01, #20
00d04     38 7F 02 F6 | 	mov	local10, local03
00d08     01 7E 86 F1 | 	sub	local10, #1
00d0c     3F 81 02 F6 | 	mov	local11, local10
00d10     04 80 66 F0 | 	shl	local11, #4
00d14     3F 81 82 F1 | 	sub	local11, local10
00d18     01 80 66 F0 | 	shl	local11, #1
00d1c     40 5F 02 F1 | 	add	arg01, local11
00d20     17 5E 06 F1 | 	add	arg01, #23
00d24                 | ' asm
00d24     2F 7B C2 FA | 	rdbyte	local08, arg01
00d28                 | ' return r
00d28     07 7A 46 F7 | 	zerox	local08, #7
00d2c     3D 75 02 F1 | 	add	local05, local08
00d30     01 74 66 F0 | 	shl	local05, #1
00d34     09 00 00 FF 
00d38     00 FB 05 F1 | 	add	objptr, ##4864
00d3c     FD 74 62 FC | 	wrlong	local05, objptr
00d40     36 5F 02 F6 | 	mov	arg01, local01
00d44     14 5E 06 F1 | 	add	arg01, #20
00d48     38 7B 02 F6 | 	mov	local08, local03
00d4c     01 7A 86 F1 | 	sub	local08, #1
00d50     3D 7D 02 F6 | 	mov	local09, local08
00d54     04 7C 66 F0 | 	shl	local09, #4
00d58     3D 7D 82 F1 | 	sub	local09, local08
00d5c     01 7C 66 F0 | 	shl	local09, #1
00d60     3E 5F 02 F1 | 	add	arg01, local09
00d64     1A 5E 06 F1 | 	add	arg01, #26
00d68                 | ' asm
00d68     2F 75 C2 FA | 	rdbyte	local05, arg01
00d6c                 | ' return r
00d6c     07 74 46 F7 | 	zerox	local05, #7
00d70     08 74 66 F0 | 	shl	local05, #8
00d74     36 5F 02 F6 | 	mov	arg01, local01
00d78     14 5E 06 F1 | 	add	arg01, #20
00d7c     38 7F 02 F6 | 	mov	local10, local03
00d80     01 7E 86 F1 | 	sub	local10, #1
00d84     3F 81 02 F6 | 	mov	local11, local10
00d88     04 80 66 F0 | 	shl	local11, #4
00d8c     3F 81 82 F1 | 	sub	local11, local10
00d90     01 80 66 F0 | 	shl	local11, #1
00d94     40 5F 02 F1 | 	add	arg01, local11
00d98     1B 5E 06 F1 | 	add	arg01, #27
00d9c                 | ' asm
00d9c     2F 7B C2 FA | 	rdbyte	local08, arg01
00da0                 | ' return r
00da0     07 7A 46 F7 | 	zerox	local08, #7
00da4     3D 75 02 F1 | 	add	local05, local08
00da8     01 74 66 F0 | 	shl	local05, #1
00dac     04 FA 05 F1 | 	add	objptr, #4
00db0     FD 74 62 FC | 	wrlong	local05, objptr
00db4     36 5F 02 F6 | 	mov	arg01, local01
00db8     14 5E 06 F1 | 	add	arg01, #20
00dbc     38 7B 02 F6 | 	mov	local08, local03
00dc0     01 7A 86 F1 | 	sub	local08, #1
00dc4     3D 7D 02 F6 | 	mov	local09, local08
00dc8     04 7C 66 F0 | 	shl	local09, #4
00dcc     3D 7D 82 F1 | 	sub	local09, local08
00dd0     01 7C 66 F0 | 	shl	local09, #1
00dd4     3E 5F 02 F1 | 	add	arg01, local09
00dd8     1C 5E 06 F1 | 	add	arg01, #28
00ddc                 | ' asm
00ddc     2F 75 C2 FA | 	rdbyte	local05, arg01
00de0                 | ' return r
00de0     07 74 46 F7 | 	zerox	local05, #7
00de4     08 74 66 F0 | 	shl	local05, #8
00de8     36 5F 02 F6 | 	mov	arg01, local01
00dec     14 5E 06 F1 | 	add	arg01, #20
00df0     38 7F 02 F6 | 	mov	local10, local03
00df4     01 7E 86 F1 | 	sub	local10, #1
00df8     3F 81 02 F6 | 	mov	local11, local10
00dfc     04 80 66 F0 | 	shl	local11, #4
00e00     3F 81 82 F1 | 	sub	local11, local10
00e04     01 80 66 F0 | 	shl	local11, #1
00e08     40 5F 02 F1 | 	add	arg01, local11
00e0c     1D 5E 06 F1 | 	add	arg01, #29
00e10                 | ' asm
00e10     2F 7B C2 FA | 	rdbyte	local08, arg01
00e14                 | ' return r
00e14     07 7A 46 F7 | 	zerox	local08, #7
00e18     3D 75 02 F1 | 	add	local05, local08
00e1c     01 74 66 F0 | 	shl	local05, #1
00e20     04 FA 05 F1 | 	add	objptr, #4
00e24     FD 74 62 FC | 	wrlong	local05, objptr
00e28     36 5F 02 F6 | 	mov	arg01, local01
00e2c     14 5E 06 F1 | 	add	arg01, #20
00e30     38 75 02 F6 | 	mov	local05, local03
00e34     01 74 86 F1 | 	sub	local05, #1
00e38     3A 7B 02 F6 | 	mov	local08, local05
00e3c     04 7A 66 F0 | 	shl	local08, #4
00e40     3A 7B 82 F1 | 	sub	local08, local05
00e44     01 7A 66 F0 | 	shl	local08, #1
00e48     3D 5F 02 F1 | 	add	arg01, local08
00e4c     18 5E 06 F1 | 	add	arg01, #24
00e50                 | ' asm
00e50     2F 79 C2 FA | 	rdbyte	local07, arg01
00e54                 | ' return r
00e54     07 78 46 F7 | 	zerox	local07, #7
00e58     04 FA 05 F1 | 	add	objptr, #4
00e5c     FD 78 62 FC | 	wrlong	local07, objptr
00e60     36 5F 02 F6 | 	mov	arg01, local01
00e64     14 5E 06 F1 | 	add	arg01, #20
00e68     38 75 02 F6 | 	mov	local05, local03
00e6c     01 74 86 F1 | 	sub	local05, #1
00e70     3A 7B 02 F6 | 	mov	local08, local05
00e74     04 7A 66 F0 | 	shl	local08, #4
00e78     3A 7B 82 F1 | 	sub	local08, local05
00e7c     01 7A 66 F0 | 	shl	local08, #1
00e80     3D 5F 02 F1 | 	add	arg01, local08
00e84     19 5E 06 F1 | 	add	arg01, #25
00e88                 | ' asm
00e88     2F 19 C2 FA | 	rdbyte	result1, arg01
00e8c                 | ' return r
00e8c     0C 79 02 F6 | 	mov	local07, result1
00e90     07 78 46 F7 | 	zerox	local07, #7
00e94     04 FA 05 F1 | 	add	objptr, #4
00e98     FD 78 62 FC | 	wrlong	local07, objptr
00e9c     09 00 00 FF 
00ea0     10 FB 85 F1 | 	sub	objptr, ##4880
00ea4                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00ea4                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00ea4                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00ea4                 | ' ft=peek(ma+20+30*(i-1)+24)
00ea4                 | ' vl=peek(ma+20+30*(i-1)+25)
00ea4                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00ea4     10 70 5E F2 | 	cmps	local03, #16 wcz
00ea8     D8 02 90 3D |  if_ae	jmp	#LR__0005
00eac     05 60 06 F6 | 	mov	arg02, #5
00eb0     38 61 02 F1 | 	add	arg02, local03
00eb4                 | ' 
00eb4                 | ' ''---------- Set the (x,y) position of cursor
00eb4                 | ' 
00eb4                 | ' cursor_x:=x
00eb4     34 FA 05 F1 | 	add	objptr, #52
00eb8     FD 02 48 FC | 	wrbyte	#1, objptr
00ebc                 | ' cursor_y:=y
00ebc     01 FA 05 F1 | 	add	objptr, #1
00ec0     FD 60 42 FC | 	wrbyte	arg02, objptr
00ec4     35 FA 85 F1 | 	sub	objptr, #53
00ec8     00 5E 06 F6 | 	mov	arg01, #0
00ecc     9C 77 B0 FD | 	call	#__system___getiolock_0150
00ed0     0C 5F 02 F6 | 	mov	arg01, result1
00ed4     34 60 B0 FD | 	call	#__system___lockmem
00ed8     00 18 06 F6 | 	mov	result1, #0
00edc     38 7D 02 F6 | 	mov	local09, local03
00ee0     02 7C 66 F0 | 	shl	local09, #2
00ee4     09 00 00 FF 
00ee8     48 FA 05 F1 | 	add	objptr, ##4680
00eec     FD 7C 02 F1 | 	add	local09, objptr
00ef0     3E 61 02 FB | 	rdlong	arg02, local09
00ef4     00 5E 06 F6 | 	mov	arg01, #0
00ef8     00 62 06 F6 | 	mov	arg03, #0
00efc     09 00 00 FF 
00f00     48 FA 85 F1 | 	sub	objptr, ##4680
00f04     C0 63 B0 FD | 	call	#__system___basic_print_string
00f08     00 5E 06 F6 | 	mov	arg01, #0
00f0c     0A 60 06 F6 | 	mov	arg02, #10
00f10     00 62 06 F6 | 	mov	arg03, #0
00f14     64 63 B0 FD | 	call	#__system___basic_print_char
00f18     01 18 06 F6 | 	mov	result1, #1
00f1c     00 5E 06 F6 | 	mov	arg01, #0
00f20     48 77 B0 FD | 	call	#__system___getiolock_0150
00f24     0C 01 68 FC | 	wrlong	#0, result1
00f28     00 18 06 F6 | 	mov	result1, #0
00f2c     05 60 06 F6 | 	mov	arg02, #5
00f30     38 61 02 F1 | 	add	arg02, local03
00f34                 | ' 
00f34                 | ' ''---------- Set the (x,y) position of cursor
00f34                 | ' 
00f34                 | ' cursor_x:=x
00f34     34 FA 05 F1 | 	add	objptr, #52
00f38     FD 30 48 FC | 	wrbyte	#24, objptr
00f3c                 | ' cursor_y:=y
00f3c     01 FA 05 F1 | 	add	objptr, #1
00f40     FD 60 42 FC | 	wrbyte	arg02, objptr
00f44     35 FA 85 F1 | 	sub	objptr, #53
00f48     00 5E 06 F6 | 	mov	arg01, #0
00f4c     1C 77 B0 FD | 	call	#__system___getiolock_0150
00f50     0C 5F 02 F6 | 	mov	arg01, result1
00f54     B4 5F B0 FD | 	call	#__system___lockmem
00f58     00 18 06 F6 | 	mov	result1, #0
00f5c     09 00 00 FF 
00f60     00 FB 05 F1 | 	add	objptr, ##4864
00f64     FD 60 02 FB | 	rdlong	arg02, objptr
00f68     09 00 00 FF 
00f6c     00 FB 85 F1 | 	sub	objptr, ##4864
00f70     00 5E 06 F6 | 	mov	arg01, #0
00f74     00 62 06 F6 | 	mov	arg03, #0
00f78     0A 64 06 F6 | 	mov	arg04, #10
00f7c     90 63 B0 FD | 	call	#__system___basic_print_integer
00f80     00 5E 06 F6 | 	mov	arg01, #0
00f84     0A 60 06 F6 | 	mov	arg02, #10
00f88     00 62 06 F6 | 	mov	arg03, #0
00f8c     EC 62 B0 FD | 	call	#__system___basic_print_char
00f90     01 18 06 F6 | 	mov	result1, #1
00f94     00 5E 06 F6 | 	mov	arg01, #0
00f98     D0 76 B0 FD | 	call	#__system___getiolock_0150
00f9c     0C 01 68 FC | 	wrlong	#0, result1
00fa0     00 18 06 F6 | 	mov	result1, #0
00fa4     05 60 06 F6 | 	mov	arg02, #5
00fa8     38 61 02 F1 | 	add	arg02, local03
00fac                 | ' 
00fac                 | ' ''---------- Set the (x,y) position of cursor
00fac                 | ' 
00fac                 | ' cursor_x:=x
00fac     34 FA 05 F1 | 	add	objptr, #52
00fb0     FD 3E 48 FC | 	wrbyte	#31, objptr
00fb4                 | ' cursor_y:=y
00fb4     01 FA 05 F1 | 	add	objptr, #1
00fb8     FD 60 42 FC | 	wrbyte	arg02, objptr
00fbc     35 FA 85 F1 | 	sub	objptr, #53
00fc0     00 5E 06 F6 | 	mov	arg01, #0
00fc4     A4 76 B0 FD | 	call	#__system___getiolock_0150
00fc8     0C 5F 02 F6 | 	mov	arg01, result1
00fcc     3C 5F B0 FD | 	call	#__system___lockmem
00fd0     00 18 06 F6 | 	mov	result1, #0
00fd4     09 00 00 FF 
00fd8     0C FB 05 F1 | 	add	objptr, ##4876
00fdc     FD 60 02 FB | 	rdlong	arg02, objptr
00fe0     09 00 00 FF 
00fe4     0C FB 85 F1 | 	sub	objptr, ##4876
00fe8     00 5E 06 F6 | 	mov	arg01, #0
00fec     00 62 06 F6 | 	mov	arg03, #0
00ff0     0A 64 06 F6 | 	mov	arg04, #10
00ff4     18 63 B0 FD | 	call	#__system___basic_print_integer
00ff8     00 5E 06 F6 | 	mov	arg01, #0
00ffc     0A 60 06 F6 | 	mov	arg02, #10
01000     00 62 06 F6 | 	mov	arg03, #0
01004     74 62 B0 FD | 	call	#__system___basic_print_char
01008     01 18 06 F6 | 	mov	result1, #1
0100c     00 5E 06 F6 | 	mov	arg01, #0
01010     58 76 B0 FD | 	call	#__system___getiolock_0150
01014     0C 01 68 FC | 	wrlong	#0, result1
01018     00 18 06 F6 | 	mov	result1, #0
0101c     05 60 06 F6 | 	mov	arg02, #5
01020     38 61 02 F1 | 	add	arg02, local03
01024                 | ' 
01024                 | ' ''---------- Set the (x,y) position of cursor
01024                 | ' 
01024                 | ' cursor_x:=x
01024     34 FA 05 F1 | 	add	objptr, #52
01028     FD 44 48 FC | 	wrbyte	#34, objptr
0102c                 | ' cursor_y:=y
0102c     01 FA 05 F1 | 	add	objptr, #1
01030     FD 60 42 FC | 	wrbyte	arg02, objptr
01034     35 FA 85 F1 | 	sub	objptr, #53
01038     00 5E 06 F6 | 	mov	arg01, #0
0103c     2C 76 B0 FD | 	call	#__system___getiolock_0150
01040     0C 5F 02 F6 | 	mov	arg01, result1
01044     C4 5E B0 FD | 	call	#__system___lockmem
01048     00 18 06 F6 | 	mov	result1, #0
0104c     09 00 00 FF 
01050     10 FB 05 F1 | 	add	objptr, ##4880
01054     FD 60 02 FB | 	rdlong	arg02, objptr
01058     09 00 00 FF 
0105c     10 FB 85 F1 | 	sub	objptr, ##4880
01060     00 5E 06 F6 | 	mov	arg01, #0
01064     00 62 06 F6 | 	mov	arg03, #0
01068     0A 64 06 F6 | 	mov	arg04, #10
0106c     A0 62 B0 FD | 	call	#__system___basic_print_integer
01070     00 5E 06 F6 | 	mov	arg01, #0
01074     0A 60 06 F6 | 	mov	arg02, #10
01078     00 62 06 F6 | 	mov	arg03, #0
0107c     FC 61 B0 FD | 	call	#__system___basic_print_char
01080     01 18 06 F6 | 	mov	result1, #1
01084     00 5E 06 F6 | 	mov	arg01, #0
01088     E0 75 B0 FD | 	call	#__system___getiolock_0150
0108c     0C 01 68 FC | 	wrlong	#0, result1
01090     00 18 06 F6 | 	mov	result1, #0
01094     05 60 06 F6 | 	mov	arg02, #5
01098     38 61 02 F1 | 	add	arg02, local03
0109c                 | ' 
0109c                 | ' ''---------- Set the (x,y) position of cursor
0109c                 | ' 
0109c                 | ' cursor_x:=x
0109c     34 FA 05 F1 | 	add	objptr, #52
010a0     FD 4A 48 FC | 	wrbyte	#37, objptr
010a4                 | ' cursor_y:=y
010a4     01 FA 05 F1 | 	add	objptr, #1
010a8     FD 60 42 FC | 	wrbyte	arg02, objptr
010ac     35 FA 85 F1 | 	sub	objptr, #53
010b0     00 5E 06 F6 | 	mov	arg01, #0
010b4     B4 75 B0 FD | 	call	#__system___getiolock_0150
010b8     0C 5F 02 F6 | 	mov	arg01, result1
010bc     4C 5E B0 FD | 	call	#__system___lockmem
010c0     00 18 06 F6 | 	mov	result1, #0
010c4     09 00 00 FF 
010c8     04 FB 05 F1 | 	add	objptr, ##4868
010cc     FD 60 02 FB | 	rdlong	arg02, objptr
010d0     09 00 00 FF 
010d4     04 FB 85 F1 | 	sub	objptr, ##4868
010d8     00 5E 06 F6 | 	mov	arg01, #0
010dc     00 62 06 F6 | 	mov	arg03, #0
010e0     0A 64 06 F6 | 	mov	arg04, #10
010e4     28 62 B0 FD | 	call	#__system___basic_print_integer
010e8     00 5E 06 F6 | 	mov	arg01, #0
010ec     0A 60 06 F6 | 	mov	arg02, #10
010f0     00 62 06 F6 | 	mov	arg03, #0
010f4     84 61 B0 FD | 	call	#__system___basic_print_char
010f8     01 18 06 F6 | 	mov	result1, #1
010fc     00 5E 06 F6 | 	mov	arg01, #0
01100     68 75 B0 FD | 	call	#__system___getiolock_0150
01104     0C 01 68 FC | 	wrlong	#0, result1
01108     00 18 06 F6 | 	mov	result1, #0
0110c     05 60 06 F6 | 	mov	arg02, #5
01110     38 61 02 F1 | 	add	arg02, local03
01114                 | ' 
01114                 | ' ''---------- Set the (x,y) position of cursor
01114                 | ' 
01114                 | ' cursor_x:=x
01114     34 FA 05 F1 | 	add	objptr, #52
01118     FD 56 48 FC | 	wrbyte	#43, objptr
0111c                 | ' cursor_y:=y
0111c     01 FA 05 F1 | 	add	objptr, #1
01120     FD 60 42 FC | 	wrbyte	arg02, objptr
01124     35 FA 85 F1 | 	sub	objptr, #53
01128     00 5E 06 F6 | 	mov	arg01, #0
0112c     3C 75 B0 FD | 	call	#__system___getiolock_0150
01130     0C 5F 02 F6 | 	mov	arg01, result1
01134     D4 5D B0 FD | 	call	#__system___lockmem
01138     00 18 06 F6 | 	mov	result1, #0
0113c     09 00 00 FF 
01140     08 FB 05 F1 | 	add	objptr, ##4872
01144     FD 60 02 FB | 	rdlong	arg02, objptr
01148     09 00 00 FF 
0114c     08 FB 85 F1 | 	sub	objptr, ##4872
01150     00 5E 06 F6 | 	mov	arg01, #0
01154     00 62 06 F6 | 	mov	arg03, #0
01158     0A 64 06 F6 | 	mov	arg04, #10
0115c     B0 61 B0 FD | 	call	#__system___basic_print_integer
01160     00 5E 06 F6 | 	mov	arg01, #0
01164     0A 60 06 F6 | 	mov	arg02, #10
01168     00 62 06 F6 | 	mov	arg03, #0
0116c     0C 61 B0 FD | 	call	#__system___basic_print_char
01170     01 18 06 F6 | 	mov	result1, #1
01174     00 5E 06 F6 | 	mov	arg01, #0
01178     F0 74 B0 FD | 	call	#__system___getiolock_0150
0117c     0C 01 68 FC | 	wrlong	#0, result1
01180     00 18 06 F6 | 	mov	result1, #0
01184                 | LR__0005
01184                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
01184     10 70 5E F2 | 	cmps	local03, #16 wcz
01188     D8 02 90 CD |  if_b	jmp	#LR__0006
0118c     38 61 02 F6 | 	mov	arg02, local03
01190     0B 60 86 F1 | 	sub	arg02, #11
01194                 | ' 
01194                 | ' ''---------- Set the (x,y) position of cursor
01194                 | ' 
01194                 | ' cursor_x:=x
01194     34 FA 05 F1 | 	add	objptr, #52
01198     FD 72 48 FC | 	wrbyte	#57, objptr
0119c                 | ' cursor_y:=y
0119c     01 FA 05 F1 | 	add	objptr, #1
011a0     FD 60 42 FC | 	wrbyte	arg02, objptr
011a4     35 FA 85 F1 | 	sub	objptr, #53
011a8     00 5E 06 F6 | 	mov	arg01, #0
011ac     BC 74 B0 FD | 	call	#__system___getiolock_0150
011b0     0C 5F 02 F6 | 	mov	arg01, result1
011b4     54 5D B0 FD | 	call	#__system___lockmem
011b8     00 18 06 F6 | 	mov	result1, #0
011bc     38 7D 02 F6 | 	mov	local09, local03
011c0     02 7C 66 F0 | 	shl	local09, #2
011c4     09 00 00 FF 
011c8     48 FA 05 F1 | 	add	objptr, ##4680
011cc     FD 7C 02 F1 | 	add	local09, objptr
011d0     3E 61 02 FB | 	rdlong	arg02, local09
011d4     00 5E 06 F6 | 	mov	arg01, #0
011d8     00 62 06 F6 | 	mov	arg03, #0
011dc     09 00 00 FF 
011e0     48 FA 85 F1 | 	sub	objptr, ##4680
011e4     E0 60 B0 FD | 	call	#__system___basic_print_string
011e8     00 5E 06 F6 | 	mov	arg01, #0
011ec     0A 60 06 F6 | 	mov	arg02, #10
011f0     00 62 06 F6 | 	mov	arg03, #0
011f4     84 60 B0 FD | 	call	#__system___basic_print_char
011f8     01 18 06 F6 | 	mov	result1, #1
011fc     00 5E 06 F6 | 	mov	arg01, #0
01200     68 74 B0 FD | 	call	#__system___getiolock_0150
01204     0C 01 68 FC | 	wrlong	#0, result1
01208     00 18 06 F6 | 	mov	result1, #0
0120c     38 61 02 F6 | 	mov	arg02, local03
01210     0B 60 86 F1 | 	sub	arg02, #11
01214                 | ' 
01214                 | ' ''---------- Set the (x,y) position of cursor
01214                 | ' 
01214                 | ' cursor_x:=x
01214     34 FA 05 F1 | 	add	objptr, #52
01218     FD A0 48 FC | 	wrbyte	#80, objptr
0121c                 | ' cursor_y:=y
0121c     01 FA 05 F1 | 	add	objptr, #1
01220     FD 60 42 FC | 	wrbyte	arg02, objptr
01224     35 FA 85 F1 | 	sub	objptr, #53
01228     00 5E 06 F6 | 	mov	arg01, #0
0122c     3C 74 B0 FD | 	call	#__system___getiolock_0150
01230     0C 5F 02 F6 | 	mov	arg01, result1
01234     D4 5C B0 FD | 	call	#__system___lockmem
01238     00 18 06 F6 | 	mov	result1, #0
0123c     09 00 00 FF 
01240     00 FB 05 F1 | 	add	objptr, ##4864
01244     FD 60 02 FB | 	rdlong	arg02, objptr
01248     09 00 00 FF 
0124c     00 FB 85 F1 | 	sub	objptr, ##4864
01250     00 5E 06 F6 | 	mov	arg01, #0
01254     00 62 06 F6 | 	mov	arg03, #0
01258     0A 64 06 F6 | 	mov	arg04, #10
0125c     B0 60 B0 FD | 	call	#__system___basic_print_integer
01260     00 5E 06 F6 | 	mov	arg01, #0
01264     0A 60 06 F6 | 	mov	arg02, #10
01268     00 62 06 F6 | 	mov	arg03, #0
0126c     0C 60 B0 FD | 	call	#__system___basic_print_char
01270     01 18 06 F6 | 	mov	result1, #1
01274     00 5E 06 F6 | 	mov	arg01, #0
01278     F0 73 B0 FD | 	call	#__system___getiolock_0150
0127c     0C 01 68 FC | 	wrlong	#0, result1
01280     00 18 06 F6 | 	mov	result1, #0
01284     38 61 02 F6 | 	mov	arg02, local03
01288     0B 60 86 F1 | 	sub	arg02, #11
0128c                 | ' 
0128c                 | ' ''---------- Set the (x,y) position of cursor
0128c                 | ' 
0128c                 | ' cursor_x:=x
0128c     34 FA 05 F1 | 	add	objptr, #52
01290     FD AE 48 FC | 	wrbyte	#87, objptr
01294                 | ' cursor_y:=y
01294     01 FA 05 F1 | 	add	objptr, #1
01298     FD 60 42 FC | 	wrbyte	arg02, objptr
0129c     35 FA 85 F1 | 	sub	objptr, #53
012a0     00 5E 06 F6 | 	mov	arg01, #0
012a4     C4 73 B0 FD | 	call	#__system___getiolock_0150
012a8     0C 5F 02 F6 | 	mov	arg01, result1
012ac     5C 5C B0 FD | 	call	#__system___lockmem
012b0     00 18 06 F6 | 	mov	result1, #0
012b4     09 00 00 FF 
012b8     0C FB 05 F1 | 	add	objptr, ##4876
012bc     FD 60 02 FB | 	rdlong	arg02, objptr
012c0     09 00 00 FF 
012c4     0C FB 85 F1 | 	sub	objptr, ##4876
012c8     00 5E 06 F6 | 	mov	arg01, #0
012cc     00 62 06 F6 | 	mov	arg03, #0
012d0     0A 64 06 F6 | 	mov	arg04, #10
012d4     38 60 B0 FD | 	call	#__system___basic_print_integer
012d8     00 5E 06 F6 | 	mov	arg01, #0
012dc     0A 60 06 F6 | 	mov	arg02, #10
012e0     00 62 06 F6 | 	mov	arg03, #0
012e4     94 5F B0 FD | 	call	#__system___basic_print_char
012e8     01 18 06 F6 | 	mov	result1, #1
012ec     00 5E 06 F6 | 	mov	arg01, #0
012f0     78 73 B0 FD | 	call	#__system___getiolock_0150
012f4     0C 01 68 FC | 	wrlong	#0, result1
012f8     00 18 06 F6 | 	mov	result1, #0
012fc     38 61 02 F6 | 	mov	arg02, local03
01300     0B 60 86 F1 | 	sub	arg02, #11
01304                 | ' 
01304                 | ' ''---------- Set the (x,y) position of cursor
01304                 | ' 
01304                 | ' cursor_x:=x
01304     34 FA 05 F1 | 	add	objptr, #52
01308     FD B4 48 FC | 	wrbyte	#90, objptr
0130c                 | ' cursor_y:=y
0130c     01 FA 05 F1 | 	add	objptr, #1
01310     FD 60 42 FC | 	wrbyte	arg02, objptr
01314     35 FA 85 F1 | 	sub	objptr, #53
01318     00 5E 06 F6 | 	mov	arg01, #0
0131c     4C 73 B0 FD | 	call	#__system___getiolock_0150
01320     0C 5F 02 F6 | 	mov	arg01, result1
01324     E4 5B B0 FD | 	call	#__system___lockmem
01328     00 18 06 F6 | 	mov	result1, #0
0132c     09 00 00 FF 
01330     10 FB 05 F1 | 	add	objptr, ##4880
01334     FD 60 02 FB | 	rdlong	arg02, objptr
01338     09 00 00 FF 
0133c     10 FB 85 F1 | 	sub	objptr, ##4880
01340     00 5E 06 F6 | 	mov	arg01, #0
01344     00 62 06 F6 | 	mov	arg03, #0
01348     0A 64 06 F6 | 	mov	arg04, #10
0134c     C0 5F B0 FD | 	call	#__system___basic_print_integer
01350     00 5E 06 F6 | 	mov	arg01, #0
01354     0A 60 06 F6 | 	mov	arg02, #10
01358     00 62 06 F6 | 	mov	arg03, #0
0135c     1C 5F B0 FD | 	call	#__system___basic_print_char
01360     01 18 06 F6 | 	mov	result1, #1
01364     00 5E 06 F6 | 	mov	arg01, #0
01368     00 73 B0 FD | 	call	#__system___getiolock_0150
0136c     0C 01 68 FC | 	wrlong	#0, result1
01370     00 18 06 F6 | 	mov	result1, #0
01374     38 61 02 F6 | 	mov	arg02, local03
01378     0B 60 86 F1 | 	sub	arg02, #11
0137c                 | ' 
0137c                 | ' ''---------- Set the (x,y) position of cursor
0137c                 | ' 
0137c                 | ' cursor_x:=x
0137c     34 FA 05 F1 | 	add	objptr, #52
01380     FD BA 48 FC | 	wrbyte	#93, objptr
01384                 | ' cursor_y:=y
01384     01 FA 05 F1 | 	add	objptr, #1
01388     FD 60 42 FC | 	wrbyte	arg02, objptr
0138c     35 FA 85 F1 | 	sub	objptr, #53
01390     00 5E 06 F6 | 	mov	arg01, #0
01394     D4 72 B0 FD | 	call	#__system___getiolock_0150
01398     0C 5F 02 F6 | 	mov	arg01, result1
0139c     6C 5B B0 FD | 	call	#__system___lockmem
013a0     00 18 06 F6 | 	mov	result1, #0
013a4     09 00 00 FF 
013a8     04 FB 05 F1 | 	add	objptr, ##4868
013ac     FD 60 02 FB | 	rdlong	arg02, objptr
013b0     09 00 00 FF 
013b4     04 FB 85 F1 | 	sub	objptr, ##4868
013b8     00 5E 06 F6 | 	mov	arg01, #0
013bc     00 62 06 F6 | 	mov	arg03, #0
013c0     0A 64 06 F6 | 	mov	arg04, #10
013c4     48 5F B0 FD | 	call	#__system___basic_print_integer
013c8     00 5E 06 F6 | 	mov	arg01, #0
013cc     0A 60 06 F6 | 	mov	arg02, #10
013d0     00 62 06 F6 | 	mov	arg03, #0
013d4     A4 5E B0 FD | 	call	#__system___basic_print_char
013d8     01 18 06 F6 | 	mov	result1, #1
013dc     00 5E 06 F6 | 	mov	arg01, #0
013e0     88 72 B0 FD | 	call	#__system___getiolock_0150
013e4     0C 01 68 FC | 	wrlong	#0, result1
013e8     00 18 06 F6 | 	mov	result1, #0
013ec     38 61 02 F6 | 	mov	arg02, local03
013f0     0B 60 86 F1 | 	sub	arg02, #11
013f4                 | ' 
013f4                 | ' ''---------- Set the (x,y) position of cursor
013f4                 | ' 
013f4                 | ' cursor_x:=x
013f4     34 FA 05 F1 | 	add	objptr, #52
013f8     FD C6 48 FC | 	wrbyte	#99, objptr
013fc                 | ' cursor_y:=y
013fc     01 FA 05 F1 | 	add	objptr, #1
01400     FD 60 42 FC | 	wrbyte	arg02, objptr
01404     35 FA 85 F1 | 	sub	objptr, #53
01408     00 5E 06 F6 | 	mov	arg01, #0
0140c     5C 72 B0 FD | 	call	#__system___getiolock_0150
01410     0C 5F 02 F6 | 	mov	arg01, result1
01414     F4 5A B0 FD | 	call	#__system___lockmem
01418     00 18 06 F6 | 	mov	result1, #0
0141c     09 00 00 FF 
01420     08 FB 05 F1 | 	add	objptr, ##4872
01424     FD 60 02 FB | 	rdlong	arg02, objptr
01428     09 00 00 FF 
0142c     08 FB 85 F1 | 	sub	objptr, ##4872
01430     00 5E 06 F6 | 	mov	arg01, #0
01434     00 62 06 F6 | 	mov	arg03, #0
01438     0A 64 06 F6 | 	mov	arg04, #10
0143c     D0 5E B0 FD | 	call	#__system___basic_print_integer
01440     00 5E 06 F6 | 	mov	arg01, #0
01444     0A 60 06 F6 | 	mov	arg02, #10
01448     00 62 06 F6 | 	mov	arg03, #0
0144c     2C 5E B0 FD | 	call	#__system___basic_print_char
01450     01 18 06 F6 | 	mov	result1, #1
01454     00 5E 06 F6 | 	mov	arg01, #0
01458     10 72 B0 FD | 	call	#__system___getiolock_0150
0145c     0C 01 68 FC | 	wrlong	#0, result1
01460     00 18 06 F6 | 	mov	result1, #0
01464                 | LR__0006
01464     01 70 06 F1 | 	add	local03, #1
01468     A4 F7 9F FD | 	jmp	#LR__0002
0146c                 | LR__0007
0146c                 | ' print
0146c     00 5E 06 F6 | 	mov	arg01, #0
01470     F8 71 B0 FD | 	call	#__system___getiolock_0150
01474     0C 5F 02 F6 | 	mov	arg01, result1
01478     90 5A B0 FD | 	call	#__system___lockmem
0147c     00 18 06 F6 | 	mov	result1, #0
01480     00 5E 06 F6 | 	mov	arg01, #0
01484     0A 60 06 F6 | 	mov	arg02, #10
01488     00 62 06 F6 | 	mov	arg03, #0
0148c     EC 5D B0 FD | 	call	#__system___basic_print_char
01490     01 18 06 F6 | 	mov	result1, #1
01494     00 5E 06 F6 | 	mov	arg01, #0
01498     D0 71 B0 FD | 	call	#__system___getiolock_0150
0149c     0C 01 68 FC | 	wrlong	#0, result1
014a0     00 18 06 F6 | 	mov	result1, #0
014a4     AF F0 03 F6 | 	mov	ptra, fp
014a8     BA 00 A0 FD | 	call	#popregs_
014ac                 | _getinfo_ret
014ac     2D 00 64 FD | 	ret
014b0                 | 
014b0                 | _program
014b0     0C 5A 05 F6 | 	mov	COUNT_, #12
014b4     B0 00 A0 FD | 	call	#pushregs_
014b8     EC FA 05 F1 | 	add	objptr, #236
014bc     EC 2C B0 FD | 	call	#_retrocog_spin2_start
014c0     EC FA 85 F1 | 	sub	objptr, #236
014c4     40 5E 06 F6 | 	mov	arg01, #64
014c8     00 60 06 F6 | 	mov	arg02, #0
014cc     70 F3 BF FD | 	call	#_startvideo
014d0     1C FA 05 F1 | 	add	objptr, #28
014d4     FD 6C 02 FB | 	rdlong	local01, objptr
014d8     07 00 00 FF 
014dc     74 FA 05 F1 | 	add	objptr, ##3700
014e0     FD 6C 62 FC | 	wrlong	local01, objptr
014e4     07 00 00 FF 
014e8     78 FA 85 F1 | 	sub	objptr, ##3704
014ec     FD 6C 02 FB | 	rdlong	local01, objptr
014f0     07 00 00 FF 
014f4     7C FA 05 F1 | 	add	objptr, ##3708
014f8     FD 6C 62 FC | 	wrlong	local01, objptr
014fc     07 00 00 FF 
01500     94 FA 85 F1 | 	sub	objptr, ##3732
01504                 | ' 
01504                 | ' ' create a new screen
01504                 | ' ' 22 lines std border
01504                 | ' ' 32 lines of big title. As it is constant we fill it manually, lines 22..53
01504                 | ' ' 4 lines border lines 54..57
01504                 | ' ' 22x16=352 lines of text lines 58..409
01504                 | ' ' 6 lines of border at 410..415
01504                 | ' ' 64 lines of 4bpp oscilloscope at 416..479 ' todo: make it 2bpp. The driver has a bug: the timings[5] is not controlled by DL - TODO.
01504                 | ' ' 6 lines of border at 480..485
01504                 | ' ' 2x16=32 lines of text at 486- 517
01504                 | ' ' standard border at 518-539
01504                 | ' 
01504                 | ' ' We need 10752 bytes for text and 28672 bytes for graphics = 25088 bytes
01504                 | ' ' graphic starts at 79000
01504                 | ' ' text start at 76600
01504                 | ' 
01504                 | ' for i=0 to 539 : dlcopy(i)=lpeek(dltest+4*i):next i ' let it be here for debug
01504     00 6E 06 F6 | 	mov	local02, #0
01508     74 EB 9F FE | 	loc	pa,	#(@LR__0010-@LR__0008)
0150c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01510                 | LR__0008
01510     37 71 02 F6 | 	mov	local03, local02
01514     02 70 66 F0 | 	shl	local03, #2
01518     02 00 00 FF 
0151c     2C FB 05 F1 | 	add	objptr, ##1324
01520     FD 70 02 F1 | 	add	local03, objptr
01524     04 00 00 FF 
01528     64 FB 05 F1 | 	add	objptr, ##2404
0152c     FD 5E 02 FB | 	rdlong	arg01, objptr
01530     07 00 00 FF 
01534     90 FA 85 F1 | 	sub	objptr, ##3728
01538     37 73 02 F6 | 	mov	local04, local02
0153c     02 72 66 F0 | 	shl	local04, #2
01540     39 5F 02 F1 | 	add	arg01, local04
01544                 | ' asm
01544     2F 19 02 FB | 	rdlong	result1, arg01
01548                 | ' return r
01548     38 19 62 FC | 	wrlong	result1, local03
0154c     01 6E 06 F1 | 	add	local02, #1
01550     01 00 00 FF 
01554     1C 6E 5E F2 | 	cmps	local02, ##540 wcz
01558     B4 FF 9F CD |  if_b	jmp	#LR__0008
0155c                 | ' 
0155c                 | ' ' Prepare the title
0155c                 | ' 
0155c                 | ' for i=0 to 28: title(i)=$77710000 : next i
0155c     00 6E 06 F6 | 	mov	local02, #0
01560                 | LR__0009
01560     37 71 02 F6 | 	mov	local03, local02
01564     02 70 66 F0 | 	shl	local03, #2
01568     07 00 00 FF 
0156c     98 FA 05 F1 | 	add	objptr, ##3736
01570     FD 70 02 F1 | 	add	local03, objptr
01574     80 B8 BB FF 
01578     38 01 68 FC | 	wrlong	##2003894272, local03
0157c     01 6E 06 F1 | 	add	local02, #1
01580     1D 6E 5E F2 | 	cmps	local02, #29 wcz
01584     07 00 00 FF 
01588     98 FA 85 F1 | 	sub	objptr, ##3736
0158c     D0 FF 9F CD |  if_b	jmp	#LR__0009
01590                 | LR__0010
01590     07 00 00 FF 
01594     B0 FA 05 F1 | 	add	objptr, ##3760
01598     FD 6C 02 FB | 	rdlong	local01, objptr
0159c     50 6C 06 F1 | 	add	local01, #80
015a0     FD 6C 62 FC | 	wrlong	local01, objptr
015a4     04 FA 05 F1 | 	add	objptr, #4
015a8     FD 6C 02 FB | 	rdlong	local01, objptr
015ac     72 6C 06 F1 | 	add	local01, #114
015b0     FD 6C 62 FC | 	wrlong	local01, objptr
015b4     04 FA 05 F1 | 	add	objptr, #4
015b8     FD 6C 02 FB | 	rdlong	local01, objptr
015bc     6F 6C 06 F1 | 	add	local01, #111
015c0     FD 6C 62 FC | 	wrlong	local01, objptr
015c4     04 FA 05 F1 | 	add	objptr, #4
015c8     FD 6C 02 FB | 	rdlong	local01, objptr
015cc     70 6C 06 F1 | 	add	local01, #112
015d0     FD 6C 62 FC | 	wrlong	local01, objptr
015d4     04 FA 05 F1 | 	add	objptr, #4
015d8     FD 6C 02 FB | 	rdlong	local01, objptr
015dc     32 6C 06 F1 | 	add	local01, #50
015e0     FD 6C 62 FC | 	wrlong	local01, objptr
015e4     04 FA 05 F1 | 	add	objptr, #4
015e8     FD 6C 02 FB | 	rdlong	local01, objptr
015ec     70 6C 06 F1 | 	add	local01, #112
015f0     FD 6C 62 FC | 	wrlong	local01, objptr
015f4     04 FA 05 F1 | 	add	objptr, #4
015f8     FD 6C 02 FB | 	rdlong	local01, objptr
015fc     6C 6C 06 F1 | 	add	local01, #108
01600     FD 6C 62 FC | 	wrlong	local01, objptr
01604     04 FA 05 F1 | 	add	objptr, #4
01608     FD 6C 02 FB | 	rdlong	local01, objptr
0160c     61 6C 06 F1 | 	add	local01, #97
01610     FD 6C 62 FC | 	wrlong	local01, objptr
01614     04 FA 05 F1 | 	add	objptr, #4
01618     FD 6C 02 FB | 	rdlong	local01, objptr
0161c     79 6C 06 F1 | 	add	local01, #121
01620     FD 6C 62 FC | 	wrlong	local01, objptr
01624     08 FA 05 F1 | 	add	objptr, #8
01628     FD 6C 02 FB | 	rdlong	local01, objptr
0162c     76 6C 06 F1 | 	add	local01, #118
01630     FD 6C 62 FC | 	wrlong	local01, objptr
01634     04 FA 05 F1 | 	add	objptr, #4
01638     FD 6C 02 FB | 	rdlong	local01, objptr
0163c     2E 6C 06 F1 | 	add	local01, #46
01640     FD 6C 62 FC | 	wrlong	local01, objptr
01644     04 FA 05 F1 | 	add	objptr, #4
01648     FD 6C 02 FB | 	rdlong	local01, objptr
0164c     30 6C 06 F1 | 	add	local01, #48
01650     FD 6C 62 FC | 	wrlong	local01, objptr
01654     04 FA 05 F1 | 	add	objptr, #4
01658     FD 6C 02 FB | 	rdlong	local01, objptr
0165c     2E 6C 06 F1 | 	add	local01, #46
01660     FD 6C 62 FC | 	wrlong	local01, objptr
01664     04 FA 05 F1 | 	add	objptr, #4
01668     FD 6C 02 FB | 	rdlong	local01, objptr
0166c     30 6C 06 F1 | 	add	local01, #48
01670     FD 6C 62 FC | 	wrlong	local01, objptr
01674     04 FA 05 F1 | 	add	objptr, #4
01678     FD 6C 02 FB | 	rdlong	local01, objptr
0167c     31 6C 06 F1 | 	add	local01, #49
01680     FD 6C 62 FC | 	wrlong	local01, objptr
01684     07 00 00 FF 
01688     EC FA 85 F1 | 	sub	objptr, ##3820
0168c                 | ' 
0168c                 | ' ' 22 lines of upper border
0168c                 | ' 
0168c                 | ' 
0168c                 | ' 
0168c                 | ' for i=0 to 21 : dlcopy(i)=0: next i
0168c     00 6E 06 F6 | 	mov	local02, #0
01690     98 E9 9F FE | 	loc	pa,	#(@LR__0012-@LR__0011)
01694     93 00 A0 FD | 	call	#FCACHE_LOAD_
01698                 | LR__0011
01698     37 71 02 F6 | 	mov	local03, local02
0169c     02 70 66 F0 | 	shl	local03, #2
016a0     02 00 00 FF 
016a4     2C FB 05 F1 | 	add	objptr, ##1324
016a8     FD 70 02 F1 | 	add	local03, objptr
016ac     38 01 68 FC | 	wrlong	#0, local03
016b0     01 6E 06 F1 | 	add	local02, #1
016b4     16 6E 5E F2 | 	cmps	local02, #22 wcz
016b8     02 00 00 FF 
016bc     2C FB 85 F1 | 	sub	objptr, ##1324
016c0     D4 FF 9F CD |  if_b	jmp	#LR__0011
016c4                 | LR__0012
016c4     02 00 00 FF 
016c8     84 FB 05 F1 | 	add	objptr, ##1412
016cc     02 00 80 FF 
016d0     FD 66 68 FC | 	wrlong	##1075, objptr
016d4     02 00 00 FF 
016d8     84 FB 85 F1 | 	sub	objptr, ##1412
016dc                 | ' 
016dc                 | ' dlcopy(22)= %0000_0000_0000_0000_0000_0100_0011_0011
016dc                 | ' 
016dc                 | ' ' big text titlle logo. Tell the driver via DL that it should display the text from "title" table
016dc                 | ' 
016dc                 | ' for i=0 to 15
016dc     00 6E 06 F6 | 	mov	local02, #0
016e0                 | LR__0013
016e0                 | '   for j=0 to 1
016e0     00 74 06 F6 | 	mov	local05, #0
016e4                 | LR__0014
016e4     37 71 02 F6 | 	mov	local03, local02
016e8     01 70 66 F0 | 	shl	local03, #1
016ec     17 76 06 F6 | 	mov	local06, #23
016f0     38 77 02 F1 | 	add	local06, local03
016f4     3A 77 02 F1 | 	add	local06, local05
016f8     02 76 66 F0 | 	shl	local06, #2
016fc     02 00 00 FF 
01700     2C FB 05 F1 | 	add	objptr, ##1324
01704     FD 76 02 F1 | 	add	local06, objptr
01708     04 00 00 FF 
0170c     6C FB 05 F1 | 	add	objptr, ##2412
01710     FD 5E 02 F6 | 	mov	arg01, objptr
01714     07 00 00 FF 
01718     98 FA 85 F1 | 	sub	objptr, ##3736
0171c     64 F1 BF FD | 	call	#_addr
01720     0C 79 02 F6 | 	mov	local07, result1
01724     0C 78 66 F0 | 	shl	local07, #12
01728     10 00 00 FF 
0172c     01 78 06 F1 | 	add	local07, ##8193
01730     37 73 02 F6 | 	mov	local04, local02
01734     08 72 66 F0 | 	shl	local04, #8
01738     39 79 02 F1 | 	add	local07, local04
0173c     3B 79 62 FC | 	wrlong	local07, local06
01740     01 74 06 F1 | 	add	local05, #1
01744     02 74 5E F2 | 	cmps	local05, #2 wcz
01748     98 FF 9F CD |  if_b	jmp	#LR__0014
0174c     01 6E 06 F1 | 	add	local02, #1
01750     10 6E 5E F2 | 	cmps	local02, #16 wcz
01754     88 FF 9F CD |  if_b	jmp	#LR__0013
01758     03 00 00 FF 
0175c     08 FA 05 F1 | 	add	objptr, ##1544
01760     01 00 80 FF 
01764     FD 66 6A FC | 	wrlong	##819, objptr
01768     03 00 00 FF 
0176c     08 FA 85 F1 | 	sub	objptr, ##1544
01770     03 5E 06 F6 | 	mov	arg01, #3
01774     E0 29 B0 FD | 	call	#_hng033rm_spin2_getfontaddr
01778     0C 6D 02 F6 | 	mov	local01, result1
0177c     0C 6C 66 F0 | 	shl	local01, #12
01780     43 6C 06 F1 | 	add	local01, #67
01784     03 00 00 FF 
01788     0C FA 05 F1 | 	add	objptr, ##1548
0178c     FD 6C 62 FC | 	wrlong	local01, objptr
01790     03 00 00 FF 
01794     0C FA 85 F1 | 	sub	objptr, ##1548
01798                 | ' 
01798                 | ' ' 4 empty lines under the logo
01798                 | ' 
01798                 | ' for i=57 to 60 : dlcopy(i)= dlcopy(0) : next i 
01798     39 6E 06 F6 | 	mov	local02, #57
0179c     90 E8 9F FE | 	loc	pa,	#(@LR__0016-@LR__0015)
017a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
017a4                 | LR__0015
017a4     37 71 02 F6 | 	mov	local03, local02
017a8     02 70 66 F0 | 	shl	local03, #2
017ac     02 00 00 FF 
017b0     2C FB 05 F1 | 	add	objptr, ##1324
017b4     FD 70 02 F1 | 	add	local03, objptr
017b8     FD 7A 02 FB | 	rdlong	local08, objptr
017bc     02 00 00 FF 
017c0     2C FB 85 F1 | 	sub	objptr, ##1324
017c4     38 7B 62 FC | 	wrlong	local08, local03
017c8     01 6E 06 F1 | 	add	local02, #1
017cc     3D 6E 1E F2 | 	cmp	local02, #61 wcz
017d0     D0 FF 9F CD |  if_b	jmp	#LR__0015
017d4                 | LR__0016
017d4     07 00 00 FF 
017d8     0C FB 05 F1 | 	add	objptr, ##3852
017dc     B3 03 80 FF 
017e0     FD 00 68 FC | 	wrlong	##484864, objptr
017e4     07 00 00 FF 
017e8     0C FB 85 F1 | 	sub	objptr, ##3852
017ec                 | ' 
017ec                 | ' ' Now make 22 text lines starting at 79e00
017ec                 | ' 
017ec                 | ' address=$76600
017ec                 | ' for i=0 to 43
017ec     00 6E 06 F6 | 	mov	local02, #0
017f0     B4 E9 9F FE | 	loc	pa,	#(@LR__0022-@LR__0017)
017f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
017f8                 | LR__0017
017f8                 | '   for j=0 to 7
017f8     00 74 06 F6 | 	mov	local05, #0
017fc                 | LR__0018
017fc     37 71 02 F6 | 	mov	local03, local02
01800     02 70 66 F0 | 	shl	local03, #2
01804     37 71 02 F1 | 	add	local03, local02
01808     01 70 66 F0 | 	shl	local03, #1
0180c     3D 76 06 F6 | 	mov	local06, #61
01810     38 77 02 F1 | 	add	local06, local03
01814     3A 77 02 F1 | 	add	local06, local05
01818     02 76 66 F0 | 	shl	local06, #2
0181c     02 00 00 FF 
01820     2C FB 05 F1 | 	add	objptr, ##1324
01824     FD 76 02 F1 | 	add	local06, objptr
01828     04 00 00 FF 
0182c     E0 FB 05 F1 | 	add	objptr, ##2528
01830     FD 78 02 FB | 	rdlong	local07, objptr
01834     07 00 00 FF 
01838     0C FB 85 F1 | 	sub	objptr, ##3852
0183c     0C 78 66 F0 | 	shl	local07, #12
01840     3A 73 02 F6 | 	mov	local04, local05
01844     08 72 66 F0 | 	shl	local04, #8
01848     39 79 02 F1 | 	add	local07, local04
0184c     37 7D 02 F6 | 	mov	local09, local02
01850     02 7C 66 F0 | 	shl	local09, #2
01854     3E 79 02 F1 | 	add	local07, local09
01858     01 78 06 F1 | 	add	local07, #1
0185c     3B 79 62 FC | 	wrlong	local07, local06
01860     01 74 06 F1 | 	add	local05, #1
01864     08 74 5E F2 | 	cmps	local05, #8 wcz
01868     90 FF 9F CD |  if_b	jmp	#LR__0018
0186c                 | '   for j=8 to 9
0186c     08 74 06 F6 | 	mov	local05, #8
01870                 | LR__0019
01870     37 71 02 F6 | 	mov	local03, local02
01874     02 70 66 F0 | 	shl	local03, #2
01878     37 71 02 F1 | 	add	local03, local02
0187c     01 70 66 F0 | 	shl	local03, #1
01880     3D 76 06 F6 | 	mov	local06, #61
01884     38 77 02 F1 | 	add	local06, local03
01888     3A 77 02 F1 | 	add	local06, local05
0188c     02 76 66 F0 | 	shl	local06, #2
01890     02 00 00 FF 
01894     2C FB 05 F1 | 	add	objptr, ##1324
01898     FD 76 02 F1 | 	add	local06, objptr
0189c     04 00 00 FF 
018a0     E0 FB 05 F1 | 	add	objptr, ##2528
018a4     FD 78 02 FB | 	rdlong	local07, objptr
018a8     07 00 00 FF 
018ac     0C FB 85 F1 | 	sub	objptr, ##3852
018b0     0C 78 66 F0 | 	shl	local07, #12
018b4     18 00 00 FF 
018b8     00 78 06 F1 | 	add	local07, ##12288
018bc     37 73 02 F6 | 	mov	local04, local02
018c0     02 72 66 F0 | 	shl	local04, #2
018c4     39 79 02 F1 | 	add	local07, local04
018c8     01 78 06 F1 | 	add	local07, #1
018cc     3B 79 62 FC | 	wrlong	local07, local06
018d0     01 74 06 F1 | 	add	local05, #1
018d4     0A 74 1E F2 | 	cmp	local05, #10 wcz
018d8     94 FF 9F CD |  if_b	jmp	#LR__0019
018dc     07 00 00 FF 
018e0     0C FB 05 F1 | 	add	objptr, ##3852
018e4     FD 6C 02 FB | 	rdlong	local01, objptr
018e8     C0 6D 06 F1 | 	add	local01, #448
018ec     FD 6C 62 FC | 	wrlong	local01, objptr
018f0     07 00 00 FF 
018f4     0C FB 85 F1 | 	sub	objptr, ##3852
018f8     01 6E 06 F1 | 	add	local02, #1
018fc     2C 6E 5E F2 | 	cmps	local02, #44 wcz
01900     F4 FE 9F CD |  if_b	jmp	#LR__0017
01904                 | ' 
01904                 | ' ' and add 2 text lines at the bottpm
01904                 | ' 
01904                 | ' for i=0 to 3
01904     00 6E 06 F6 | 	mov	local02, #0
01908                 | LR__0020
01908                 | '   for j=0 to 7
01908     00 74 06 F6 | 	mov	local05, #0
0190c                 | LR__0021
0190c     37 71 02 F6 | 	mov	local03, local02
01910     03 70 66 F0 | 	shl	local03, #3
01914     E9 77 06 F6 | 	mov	local06, #489
01918     38 77 02 F1 | 	add	local06, local03
0191c     3A 77 02 F1 | 	add	local06, local05
01920     02 76 66 F0 | 	shl	local06, #2
01924     02 00 00 FF 
01928     2C FB 05 F1 | 	add	objptr, ##1324
0192c     FD 76 02 F1 | 	add	local06, objptr
01930     04 00 00 FF 
01934     E0 FB 05 F1 | 	add	objptr, ##2528
01938     FD 78 02 FB | 	rdlong	local07, objptr
0193c     07 00 00 FF 
01940     0C FB 85 F1 | 	sub	objptr, ##3852
01944     0C 78 66 F0 | 	shl	local07, #12
01948     3A 73 02 F6 | 	mov	local04, local05
0194c     08 72 66 F0 | 	shl	local04, #8
01950     39 79 02 F1 | 	add	local07, local04
01954     16 7C 06 F6 | 	mov	local09, #22
01958     37 7D 02 F1 | 	add	local09, local02
0195c     02 7C 66 F0 | 	shl	local09, #2
01960     3E 79 02 F1 | 	add	local07, local09
01964     01 78 06 F1 | 	add	local07, #1
01968     3B 79 62 FC | 	wrlong	local07, local06
0196c     01 74 06 F1 | 	add	local05, #1
01970     08 74 5E F2 | 	cmps	local05, #8 wcz
01974     94 FF 9F CD |  if_b	jmp	#LR__0021
01978     07 00 00 FF 
0197c     0C FB 05 F1 | 	add	objptr, ##3852
01980     FD 6C 02 FB | 	rdlong	local01, objptr
01984     C0 6D 06 F1 | 	add	local01, #448
01988     FD 6C 62 FC | 	wrlong	local01, objptr
0198c     07 00 00 FF 
01990     0C FB 85 F1 | 	sub	objptr, ##3852
01994     01 6E 06 F1 | 	add	local02, #1
01998     04 6E 5E F2 | 	cmps	local02, #4 wcz
0199c     68 FF 9F CD |  if_b	jmp	#LR__0020
019a0                 | LR__0022
019a0                 | ' 
019a0                 | ' ' add 6 empty lines over the scope area
019a0                 | ' 
019a0                 | ' for i=412 to 417 : dlcopy(i)=0 : next i
019a0     9C 6F 06 F6 | 	mov	local02, #412
019a4     84 E6 9F FE | 	loc	pa,	#(@LR__0024-@LR__0023)
019a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
019ac                 | LR__0023
019ac     37 71 02 F6 | 	mov	local03, local02
019b0     02 70 66 F0 | 	shl	local03, #2
019b4     02 00 00 FF 
019b8     2C FB 05 F1 | 	add	objptr, ##1324
019bc     FD 70 02 F1 | 	add	local03, objptr
019c0     38 01 68 FC | 	wrlong	#0, local03
019c4     01 6E 06 F1 | 	add	local02, #1
019c8     A2 6F 1E F2 | 	cmp	local02, #418 wcz
019cc     02 00 00 FF 
019d0     2C FB 85 F1 | 	sub	objptr, ##1324
019d4     D4 FF 9F CD |  if_b	jmp	#LR__0023
019d8                 | LR__0024
019d8     07 00 00 FF 
019dc     0C FB 05 F1 | 	add	objptr, ##3852
019e0     C8 03 80 FF 
019e4     FD 00 68 FC | 	wrlong	##495616, objptr
019e8     07 00 00 FF 
019ec     0C FB 85 F1 | 	sub	objptr, ##3852
019f0                 | ' 
019f0                 | ' ' the scope area, 4 bpp graphics
019f0                 | ' 
019f0                 | ' address=$79000   
019f0                 | ' 
019f0                 | ' for i=419 to 482: dlcopy(i)= ((address+448*(i-416)) shl 12) + %1010 : next i
019f0     A3 6F 06 F6 | 	mov	local02, #419
019f4     CC E6 9F FE | 	loc	pa,	#(@LR__0028-@LR__0025)
019f8     93 00 A0 FD | 	call	#FCACHE_LOAD_
019fc                 | LR__0025
019fc     37 71 02 F6 | 	mov	local03, local02
01a00     02 70 66 F0 | 	shl	local03, #2
01a04     02 00 00 FF 
01a08     2C FB 05 F1 | 	add	objptr, ##1324
01a0c     FD 70 02 F1 | 	add	local03, objptr
01a10     04 00 00 FF 
01a14     E0 FB 05 F1 | 	add	objptr, ##2528
01a18     FD 7A 02 FB | 	rdlong	local08, objptr
01a1c     07 00 00 FF 
01a20     0C FB 85 F1 | 	sub	objptr, ##3852
01a24     37 7F 02 F6 | 	mov	local10, local02
01a28     A0 7F 86 F1 | 	sub	local10, #416
01a2c     3F 73 02 F6 | 	mov	local04, local10
01a30     03 72 66 F0 | 	shl	local04, #3
01a34     3F 73 82 F1 | 	sub	local04, local10
01a38     06 72 66 F0 | 	shl	local04, #6
01a3c     39 7B 02 F1 | 	add	local08, local04
01a40     0C 7A 66 F0 | 	shl	local08, #12
01a44     0A 7A 06 F1 | 	add	local08, #10
01a48     38 7B 62 FC | 	wrlong	local08, local03
01a4c     01 6E 06 F1 | 	add	local02, #1
01a50     E3 6F 1E F2 | 	cmp	local02, #483 wcz
01a54     A4 FF 9F CD |  if_b	jmp	#LR__0025
01a58                 | ' 
01a58                 | ' ' add 6 empty lines under the scope area
01a58                 | ' 
01a58                 | ' for i=483 to 488 : dlcopy(i)=0 : next i
01a58     E3 6F 06 F6 | 	mov	local02, #483
01a5c                 | LR__0026
01a5c     37 71 02 F6 | 	mov	local03, local02
01a60     02 70 66 F0 | 	shl	local03, #2
01a64     02 00 00 FF 
01a68     2C FB 05 F1 | 	add	objptr, ##1324
01a6c     FD 70 02 F1 | 	add	local03, objptr
01a70     38 01 68 FC | 	wrlong	#0, local03
01a74     01 6E 06 F1 | 	add	local02, #1
01a78     E9 6F 1E F2 | 	cmp	local02, #489 wcz
01a7c     02 00 00 FF 
01a80     2C FB 85 F1 | 	sub	objptr, ##1324
01a84     D4 FF 9F CD |  if_b	jmp	#LR__0026
01a88                 | ' 
01a88                 | ' ' 22 standard border lines at bottom
01a88                 | ' 
01a88                 | ' for i=521 to 542 : dlcopy(i)=0 : next i
01a88     01 00 00 FF 
01a8c     09 6E 06 F6 | 	mov	local02, ##521
01a90                 | LR__0027
01a90     37 71 02 F6 | 	mov	local03, local02
01a94     02 70 66 F0 | 	shl	local03, #2
01a98     02 00 00 FF 
01a9c     2C FB 05 F1 | 	add	objptr, ##1324
01aa0     FD 70 02 F1 | 	add	local03, objptr
01aa4     38 01 68 FC | 	wrlong	#0, local03
01aa8     01 6E 06 F1 | 	add	local02, #1
01aac     01 00 00 FF 
01ab0     1F 6E 1E F2 | 	cmp	local02, ##543 wcz
01ab4     02 00 00 FF 
01ab8     2C FB 85 F1 | 	sub	objptr, ##1324
01abc     D0 FF 9F CD |  if_b	jmp	#LR__0027
01ac0                 | LR__0028
01ac0     02 00 00 FF 
01ac4     2C FB 05 F1 | 	add	objptr, ##1324
01ac8     FD 5E 02 F6 | 	mov	arg01, objptr
01acc     02 00 00 FF 
01ad0     2C FB 85 F1 | 	sub	objptr, ##1324
01ad4     AC ED BF FD | 	call	#_addr
01ad8     1C FA 05 F1 | 	add	objptr, #28
01adc     FD 18 62 FC | 	wrlong	result1, objptr
01ae0     1C FA 85 F1 | 	sub	objptr, #28
01ae4     B3 03 80 FF 
01ae8     FD 00 68 FC | 	wrlong	##484864, objptr
01aec     9A 5E 06 F6 | 	mov	arg01, #154
01af0     93 60 06 F6 | 	mov	arg02, #147
01af4     20 13 B0 FD | 	call	#_hng033rm_spin2_cls
01af8                 | ' 
01af8                 | ' ' tell the driver where is the new dl and buffer
01af8                 | ' 
01af8                 | ' v030.dl_ptr=addr(dlcopy) 
01af8                 | ' v030.buf_ptr=$76600
01af8                 | ' cls
01af8                 | ' for i=$79000 to $7FFFC step 4 : lpoke i,0 : next i
01af8     C8 03 00 FF 
01afc     00 6E 06 F6 | 	mov	local02, ##495616
01b00     10 E5 9F FE | 	loc	pa,	#(@LR__0030-@LR__0029)
01b04     93 00 A0 FD | 	call	#FCACHE_LOAD_
01b08                 | LR__0029
01b08                 | ' asm
01b08     37 01 68 FC | 	wrlong	#0, local02
01b0c     04 6E 06 F1 | 	add	local02, #4
01b10     FF 03 00 FF 
01b14     FC 6F 1E F2 | 	cmp	local02, ##524284 wcz
01b18     EC FF 9F ED |  if_be	jmp	#LR__0029
01b1c                 | LR__0030
01b1c     E4 FA 05 F1 | 	add	objptr, #228
01b20     FD 6C 02 FB | 	rdlong	local01, objptr
01b24     0C FA 85 F1 | 	sub	objptr, #12
01b28     FD 6C 62 FC | 	wrlong	local01, objptr
01b2c     D8 FA 85 F1 | 	sub	objptr, #216
01b30     00 5E 06 F6 | 	mov	arg01, #0
01b34     00 60 06 F6 | 	mov	arg02, #0
01b38     00 62 06 F6 | 	mov	arg03, #0
01b3c     00 64 06 F6 | 	mov	arg04, #0
01b40     A4 12 B0 FD | 	call	#_hng033rm_spin2_setcolor
01b44     01 5E 06 F6 | 	mov	arg01, #1
01b48     00 60 06 F6 | 	mov	arg02, #0
01b4c     00 62 06 F6 | 	mov	arg03, #0
01b50     FF 64 06 F6 | 	mov	arg04, #255
01b54     90 12 B0 FD | 	call	#_hng033rm_spin2_setcolor
01b58     02 5E 06 F6 | 	mov	arg01, #2
01b5c     00 60 06 F6 | 	mov	arg02, #0
01b60     FF 62 06 F6 | 	mov	arg03, #255
01b64     00 64 06 F6 | 	mov	arg04, #0
01b68     7C 12 B0 FD | 	call	#_hng033rm_spin2_setcolor
01b6c     03 5E 06 F6 | 	mov	arg01, #3
01b70     FF 60 06 F6 | 	mov	arg02, #255
01b74     00 62 06 F6 | 	mov	arg03, #0
01b78     00 64 06 F6 | 	mov	arg04, #0
01b7c     68 12 B0 FD | 	call	#_hng033rm_spin2_setcolor
01b80     C8 03 80 FF 
01b84     FD 00 68 FC | 	wrlong	##495616, objptr
01b88     64 5E 06 F6 | 	mov	arg01, #100
01b8c     48 55 B0 FD | 	call	#__system___waitms
01b90     90 FA 05 F1 | 	add	objptr, #144
01b94     FD E0 68 FC | 	wrlong	#112, objptr
01b98     04 FA 05 F1 | 	add	objptr, #4
01b9c     FD 80 68 FC | 	wrlong	#64, objptr
01ba0     94 FA 85 F1 | 	sub	objptr, #148
01ba4                 | ' 
01ba4                 | ' v030.putpixel=v030.p4
01ba4                 | ' 
01ba4                 | ' v030.setcolor(0,0,0,0)
01ba4                 | ' v030.setcolor(1,0,0,255)
01ba4                 | ' v030.setcolor(2,0,255,0)
01ba4                 | ' v030.setcolor(3,255,0,0)
01ba4                 | ' v030.buf_ptr=$79000
01ba4                 | ' waitms(100)
01ba4                 | ' v030.cpl=112
01ba4                 | ' v030.lines=64
01ba4                 | ' for i=0 to 100: v030.plot1(i,4,3) : next i
01ba4     00 6E 06 F6 | 	mov	local02, #0
01ba8                 | LR__0031
01ba8     37 5F 02 F6 | 	mov	arg01, local02
01bac     04 60 06 F6 | 	mov	arg02, #4
01bb0     03 62 06 F6 | 	mov	arg03, #3
01bb4     E4 19 B0 FD | 	call	#_hng033rm_spin2_plot1
01bb8     01 6E 06 F1 | 	add	local02, #1
01bbc     65 6E 5E F2 | 	cmps	local02, #101 wcz
01bc0     E4 FF 9F CD |  if_b	jmp	#LR__0031
01bc4     14 5E 06 F6 | 	mov	arg01, #20
01bc8     14 60 06 F6 | 	mov	arg02, #20
01bcc     0A 62 06 F6 | 	mov	arg03, #10
01bd0     01 64 06 F6 | 	mov	arg04, #1
01bd4     C4 09 B0 FD | 	call	#_hng033rm_spin2_fcircle
01bd8     49 00 00 FF 
01bdc     51 62 06 F6 | 	mov	arg03, ##@LR__0508
01be0     0A 5E 06 F6 | 	mov	arg01, #10
01be4     0A 60 06 F6 | 	mov	arg02, #10
01be8     03 64 06 F6 | 	mov	arg04, #3
01bec     00 66 06 F6 | 	mov	arg05, #0
01bf0     80 0D B0 FD | 	call	#_hng033rm_spin2_outtextxycg
01bf4                 | ' 
01bf4                 | ' 
01bf4                 | ' v030.fcircle(20,20,10,1)
01bf4                 | ' v030.outtextxycg(10,10,"Abcdef",3,0)
01bf4                 | ' for i=1 to 100 : v030.plot1(i,10,3) : next i
01bf4     01 6E 06 F6 | 	mov	local02, #1
01bf8                 | LR__0032
01bf8     37 5F 02 F6 | 	mov	arg01, local02
01bfc     0A 60 06 F6 | 	mov	arg02, #10
01c00     03 62 06 F6 | 	mov	arg03, #3
01c04     94 19 B0 FD | 	call	#_hng033rm_spin2_plot1
01c08     01 6E 06 F1 | 	add	local02, #1
01c0c     65 6E 1E F2 | 	cmp	local02, #101 wcz
01c10     E4 FF 9F CD |  if_b	jmp	#LR__0032
01c14     00 5E 06 F6 | 	mov	arg01, #0
01c18     20 60 06 F6 | 	mov	arg02, #32
01c1c     BF 63 06 F6 | 	mov	arg03, #447
01c20     21 64 06 F6 | 	mov	arg04, #33
01c24     03 66 06 F6 | 	mov	arg05, #3
01c28                 | ' line(x1,y1,x2,y2,c)
01c28     A0 0A B0 FD | 	call	#_hng033rm_spin2_line
01c2c     FA 5E 06 F6 | 	mov	arg01, #250
01c30     0A 60 06 F6 | 	mov	arg02, #10
01c34     01 62 06 F6 | 	mov	arg03, #1
01c38     60 19 B0 FD | 	call	#_hng033rm_spin2_plot1
01c3c     B3 03 80 FF 
01c40     FD 00 68 FC | 	wrlong	##484864, objptr
01c44     90 FA 05 F1 | 	add	objptr, #144
01c48     FD E0 68 FC | 	wrlong	#112, objptr
01c4c                 | ' 
01c4c                 | ' return long[@ataripalette+4*color]
01c4c     0E 00 00 FF 
01c50     58 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7256
01c54     03 81 02 F6 | 	mov	local11, ptr__hng033rm_spin2_dat__
01c58     C4 81 06 F1 | 	add	local11, #452
01c5c     40 19 02 FB | 	rdlong	result1, local11
01c60     0E 00 00 FF 
01c64     58 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7256
01c68     07 00 00 FF 
01c6c     80 FA 05 F1 | 	add	objptr, ##3712
01c70     FD 18 62 FC | 	wrlong	result1, objptr
01c74     0C 5F 02 F6 | 	mov	arg01, result1
01c78                 | ' 
01c78                 | ' bordercolor:=color
01c78     07 00 00 FF 
01c7c     E4 FA 85 F1 | 	sub	objptr, ##3812
01c80     FD 5E 62 FC | 	wrlong	arg01, objptr
01c84     07 00 00 FF 
01c88     E8 FA 05 F1 | 	add	objptr, ##3816
01c8c     FD 00 69 FC | 	wrlong	#128, objptr
01c90     04 FA 05 F1 | 	add	objptr, #4
01c94     FD 7A 68 FC | 	wrlong	#61, objptr
01c98     04 FA 05 F1 | 	add	objptr, #4
01c9c     FD 78 68 FC | 	wrlong	#60, objptr
01ca0     04 FA 05 F1 | 	add	objptr, #4
01ca4     FD 76 68 FC | 	wrlong	#59, objptr
01ca8     04 FA 05 F1 | 	add	objptr, #4
01cac     FD 74 68 FC | 	wrlong	#58, objptr
01cb0     04 FA 05 F1 | 	add	objptr, #4
01cb4     FD 06 68 FC | 	wrlong	#3, objptr
01cb8     49 00 00 FF 
01cbc     58 6C 06 F6 | 	mov	local01, ##@LR__0509
01cc0     01 00 00 FF 
01cc4     AC FB 05 F1 | 	add	objptr, ##940
01cc8     FD 6C 62 FC | 	wrlong	local01, objptr
01ccc     49 00 00 FF 
01cd0     6F 6C 06 F6 | 	mov	local01, ##@LR__0510
01cd4     04 FA 05 F1 | 	add	objptr, #4
01cd8     FD 6C 62 FC | 	wrlong	local01, objptr
01cdc     09 00 00 FF 
01ce0     D8 FA 85 F1 | 	sub	objptr, ##4824
01ce4                 | ' 
01ce4                 | ' emptystr$="                      "
01ce4                 | ' ss$=""
01ce4                 | ' for i=1 to 31 : ss$=ss$+chr$(i) :next i
01ce4     01 6E 06 F6 | 	mov	local02, #1
01ce8                 | LR__0033
01ce8     09 00 00 FF 
01cec     D8 FA 05 F1 | 	add	objptr, ##4824
01cf0     FD 6C 02 FB | 	rdlong	local01, objptr
01cf4     09 00 00 FF 
01cf8     D8 FA 85 F1 | 	sub	objptr, ##4824
01cfc     37 5F 02 F6 | 	mov	arg01, local02
01d00     D4 5A B0 FD | 	call	#__system__Chr_S
01d04     0C 61 02 F6 | 	mov	arg02, result1
01d08     36 5F 02 F6 | 	mov	arg01, local01
01d0c     38 52 B0 FD | 	call	#__system___string_concat
01d10     0C 6D 02 F6 | 	mov	local01, result1
01d14     09 00 00 FF 
01d18     D8 FA 05 F1 | 	add	objptr, ##4824
01d1c     FD 6C 62 FC | 	wrlong	local01, objptr
01d20     09 00 00 FF 
01d24     D8 FA 85 F1 | 	sub	objptr, ##4824
01d28     01 6E 06 F1 | 	add	local02, #1
01d2c     20 6E 1E F2 | 	cmp	local02, #32 wcz
01d30     B4 FF 9F CD |  if_b	jmp	#LR__0033
01d34     02 5F 02 F6 | 	mov	arg01, ptr__dat__
01d38     48 EB BF FD | 	call	#_addr
01d3c     09 00 00 FF 
01d40     DC FA 05 F1 | 	add	objptr, ##4828
01d44     FD 18 62 FC | 	wrlong	result1, objptr
01d48     0C 5F 02 F6 | 	mov	arg01, result1
01d4c     00 60 06 F6 | 	mov	arg02, #0
01d50     01 00 00 FF 
01d54     B0 FB 85 F1 | 	sub	objptr, ##944
01d58     30 2B B0 FD | 	call	#_trackerplayer_spin2_initModule
01d5c     01 60 06 F6 | 	mov	arg02, #1
01d60                 | ' 
01d60                 | ' ''---------- Set the (x,y) position of cursor
01d60                 | ' 
01d60                 | ' cursor_x:=x
01d60     07 00 00 FF 
01d64     F8 FA 85 F1 | 	sub	objptr, ##3832
01d68     FD 02 48 FC | 	wrbyte	#1, objptr
01d6c                 | ' cursor_y:=y
01d6c     01 FA 05 F1 | 	add	objptr, #1
01d70     FD 02 48 FC | 	wrbyte	#1, objptr
01d74                 | ' 
01d74                 | ' 
01d74                 | ' ma=addr(module)
01d74                 | ' tracker.initmodule(ma,0)
01d74                 | ' 
01d74                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
01d74     09 00 00 FF 
01d78     A7 FA 05 F1 | 	add	objptr, ##4775
01d7c     FD 6E 02 FB | 	rdlong	local02, objptr
01d80     37 83 02 F6 | 	mov	local12, local02
01d84     09 00 00 FF 
01d88     DC FA 85 F1 | 	sub	objptr, ##4828
01d8c     14 82 06 F1 | 	add	local12, #20
01d90                 | LR__0034
01d90     41 6F 5A F2 | 	cmps	local02, local12 wcz
01d94     40 00 90 3D |  if_ae	jmp	#LR__0035
01d98     00 5E 06 F6 | 	mov	arg01, #0
01d9c     CC 68 B0 FD | 	call	#__system___getiolock_0150
01da0     0C 5F 02 F6 | 	mov	arg01, result1
01da4     64 51 B0 FD | 	call	#__system___lockmem
01da8                 | ' asm
01da8     37 19 C2 FA | 	rdbyte	result1, local02
01dac                 | ' return r
01dac     0C 61 02 F6 | 	mov	arg02, result1
01db0     07 60 46 F7 | 	zerox	arg02, #7
01db4     00 5E 06 F6 | 	mov	arg01, #0
01db8     00 62 06 F6 | 	mov	arg03, #0
01dbc     BC 54 B0 FD | 	call	#__system___basic_print_char
01dc0     00 5E 06 F6 | 	mov	arg01, #0
01dc4     A4 68 B0 FD | 	call	#__system___getiolock_0150
01dc8     0C 01 68 FC | 	wrlong	#0, result1
01dcc     00 18 06 F6 | 	mov	result1, #0
01dd0     01 6E 06 F1 | 	add	local02, #1
01dd4     B8 FF 9F FD | 	jmp	#LR__0034
01dd8                 | LR__0035
01dd8     09 00 00 FF 
01ddc     E0 FA 05 F1 | 	add	objptr, ##4832
01de0     FD 1E 68 FC | 	wrlong	#15, objptr
01de4                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
01de4     00 6C 06 F6 | 	mov	local01, #0
01de8     04 FA 85 F1 | 	sub	objptr, #4
01dec     FD 5E 02 FB | 	rdlong	arg01, objptr
01df0     02 00 00 FF 
01df4     38 5E 06 F1 | 	add	arg01, ##1080
01df8                 | ' asm
01df8     2F 71 C2 FA | 	rdbyte	local03, arg01
01dfc                 | ' return r
01dfc     07 70 46 F7 | 	zerox	local03, #7
01e00     4D 70 0E F2 | 	cmp	local03, #77 wz
01e04     01 6C 66 A6 |  if_e	neg	local01, #1
01e08     00 7A 06 F6 | 	mov	local08, #0
01e0c     FD 5E 02 FB | 	rdlong	arg01, objptr
01e10     09 00 00 FF 
01e14     DC FA 85 F1 | 	sub	objptr, ##4828
01e18     02 00 00 FF 
01e1c     3A 5E 06 F1 | 	add	arg01, ##1082
01e20                 | ' asm
01e20     2F 19 C2 FA | 	rdbyte	result1, arg01
01e24                 | ' return r
01e24     0C 79 02 F6 | 	mov	local07, result1
01e28     07 78 46 F7 | 	zerox	local07, #7
01e2c     4B 78 0E F2 | 	cmp	local07, #75 wz
01e30     01 7A 66 A6 |  if_e	neg	local08, #1
01e34     3D 6D CA F7 | 	test	local01, local08 wz
01e38     09 00 00 5F 
01e3c     E0 FA 05 51 |  if_ne	add	objptr, ##4832
01e40     FD 3E 68 5C |  if_ne	wrlong	#31, objptr
01e44     09 00 00 5F 
01e48     E0 FA 85 51 |  if_ne	sub	objptr, ##4832
01e4c     02 60 06 F6 | 	mov	arg02, #2
01e50                 | ' 
01e50                 | ' ''---------- Set the (x,y) position of cursor
01e50                 | ' 
01e50                 | ' cursor_x:=x
01e50     34 FA 05 F1 | 	add	objptr, #52
01e54     FD 02 48 FC | 	wrbyte	#1, objptr
01e58                 | ' cursor_y:=y
01e58     01 FA 05 F1 | 	add	objptr, #1
01e5c     FD 04 48 FC | 	wrbyte	#2, objptr
01e60     35 FA 85 F1 | 	sub	objptr, #53
01e64                 | ' position 1,2 : print samples;" ";"samples module"
01e64     00 5E 06 F6 | 	mov	arg01, #0
01e68     00 68 B0 FD | 	call	#__system___getiolock_0150
01e6c     0C 5F 02 F6 | 	mov	arg01, result1
01e70     98 50 B0 FD | 	call	#__system___lockmem
01e74     00 18 06 F6 | 	mov	result1, #0
01e78     09 00 00 FF 
01e7c     E0 FA 05 F1 | 	add	objptr, ##4832
01e80     FD 60 02 FB | 	rdlong	arg02, objptr
01e84     09 00 00 FF 
01e88     E0 FA 85 F1 | 	sub	objptr, ##4832
01e8c     00 5E 06 F6 | 	mov	arg01, #0
01e90     00 62 06 F6 | 	mov	arg03, #0
01e94     0A 64 06 F6 | 	mov	arg04, #10
01e98     74 54 B0 FD | 	call	#__system___basic_print_integer
01e9c     49 00 00 FF 
01ea0     70 60 06 F6 | 	mov	arg02, ##@LR__0511
01ea4     00 5E 06 F6 | 	mov	arg01, #0
01ea8     00 62 06 F6 | 	mov	arg03, #0
01eac     18 54 B0 FD | 	call	#__system___basic_print_string
01eb0     49 00 00 FF 
01eb4     72 60 06 F6 | 	mov	arg02, ##@LR__0512
01eb8     00 5E 06 F6 | 	mov	arg01, #0
01ebc     00 62 06 F6 | 	mov	arg03, #0
01ec0     04 54 B0 FD | 	call	#__system___basic_print_string
01ec4     00 5E 06 F6 | 	mov	arg01, #0
01ec8     0A 60 06 F6 | 	mov	arg02, #10
01ecc     00 62 06 F6 | 	mov	arg03, #0
01ed0     A8 53 B0 FD | 	call	#__system___basic_print_char
01ed4     01 18 06 F6 | 	mov	result1, #1
01ed8     00 5E 06 F6 | 	mov	arg01, #0
01edc     8C 67 B0 FD | 	call	#__system___getiolock_0150
01ee0     0C 01 68 FC | 	wrlong	#0, result1
01ee4     00 18 06 F6 | 	mov	result1, #0
01ee8     09 00 00 FF 
01eec     DC FA 05 F1 | 	add	objptr, ##4828
01ef0     FD 5E 02 FB | 	rdlong	arg01, objptr
01ef4     04 FA 05 F1 | 	add	objptr, #4
01ef8     FD 60 02 FB | 	rdlong	arg02, objptr
01efc     09 00 00 FF 
01f00     E0 FA 85 F1 | 	sub	objptr, ##4832
01f04     18 EC BF FD | 	call	#_getinfo
01f08     08 00 00 FF 
01f0c     28 FB 05 F1 | 	add	objptr, ##4392
01f10     AC 4B B0 FD | 	call	#_audio019_spin2_start
01f14     0D 71 02 F6 | 	mov	local03, result2
01f18     A4 FB 05 F1 | 	add	objptr, #420
01f1c     FD 18 62 FC | 	wrlong	result1, objptr
01f20     04 FA 05 F1 | 	add	objptr, #4
01f24     FD 70 62 FC | 	wrlong	local03, objptr
01f28     14 FA 05 F1 | 	add	objptr, #20
01f2c     FD 00 68 FC | 	wrlong	#0, objptr
01f30     04 FA 05 F1 | 	add	objptr, #4
01f34     FD 00 68 FC | 	wrlong	#0, objptr
01f38     04 FA 05 F1 | 	add	objptr, #4
01f3c     FD 00 68 FC | 	wrlong	#0, objptr
01f40     04 FA 05 F1 | 	add	objptr, #4
01f44     FD 00 68 FC | 	wrlong	#0, objptr
01f48     09 00 00 FF 
01f4c     F0 FA 85 F1 | 	sub	objptr, ##4848
01f50                 | ' getinfo(ma,samples)
01f50                 | ' 
01f50                 | ' cog,base=paula.start()
01f50                 | ' 
01f50                 | ' old1=0 : old2=0 :old3=0 : old4=0
01f50                 | ' 
01f50                 | ' 
01f50                 | ' 
01f50                 | ' 'position 0,26 : v030.writeln(ss$)
01f50                 | ' 'print"123456789012345678901234567890"
01f50                 | ' do
01f50                 | LR__0036
01f50     01 5E 06 F6 | 	mov	arg01, #1
01f54     F8 0D B0 FD | 	call	#_hng033rm_spin2_waitvbl
01f58     07 00 00 FF 
01f5c     2C FB 05 F1 | 	add	objptr, ##3884
01f60     08 30 B0 FD | 	call	#_trackerplayer_spin2_tick
01f64     07 00 00 FF 
01f68     2C FB 85 F1 | 	sub	objptr, ##3884
01f6c     1B 18 62 FD | 	getrnd	result1
01f70     0C 99 02 F6 | 	mov	muldiva_, result1
01f74     01 00 00 FF 
01f78     1C 9A 06 F6 | 	mov	muldivb_, ##540
01f7c     C2 00 A0 FD | 	call	#unsdivide_
01f80     09 00 00 FF 
01f84     F4 FA 05 F1 | 	add	objptr, ##4852
01f88     FD 98 62 FC | 	wrlong	muldiva_, objptr
01f8c                 | '     
01f8c                 | ' '    dlentry=lpeek(dltest) : for i=0 to 539:   rr=(2*i) mod 540+(2*i)/ 540 : lpoke dltest+4*i, dlcopy(rr) :next i 
01f8c                 | '      
01f8c                 | '     if tracker.trigger(0)<>old1 then 
01f8c     D2 FB 85 F1 | 	sub	objptr, #466
01f90     FD 6C C2 FA | 	rdbyte	local01, objptr
01f94     C2 FB 05 F1 | 	add	objptr, #450
01f98     FD 76 02 FB | 	rdlong	local06, objptr
01f9c     09 00 00 FF 
01fa0     E4 FA 85 F1 | 	sub	objptr, ##4836
01fa4     3B 6D 0A F2 | 	cmp	local01, local06 wz
01fa8     8C 00 90 AD |  if_e	jmp	#LR__0037
01fac     08 00 00 FF 
01fb0     22 FB 05 F1 | 	add	objptr, ##4386
01fb4     FD 6C C2 FA | 	rdbyte	local01, objptr
01fb8     C2 FB 05 F1 | 	add	objptr, #450
01fbc     FD 6C 62 FC | 	wrlong	local01, objptr
01fc0     14 FA 85 F1 | 	sub	objptr, #20
01fc4     FD 5E 02 FB | 	rdlong	arg01, objptr
01fc8     08 5E 06 F1 | 	add	arg01, #8
01fcc     01 00 00 FF 
01fd0     FD FA 85 F1 | 	sub	objptr, ##765
01fd4     FD 60 02 FB | 	rdlong	arg02, objptr
01fd8     1E 60 26 F4 | 	bith	arg02, #30
01fdc                 | ' asm
01fdc     2F 61 62 FC | 	wrlong	arg02, arg01
01fe0     01 00 00 FF 
01fe4     FD FA 05 F1 | 	add	objptr, ##765
01fe8     FD 5E 02 FB | 	rdlong	arg01, objptr
01fec     0C 5E 06 F1 | 	add	arg01, #12
01ff0     01 00 00 FF 
01ff4     E9 FA 85 F1 | 	sub	objptr, ##745
01ff8     FD 60 E2 FA | 	rdword	arg02, objptr
01ffc     08 FA 05 F1 | 	add	objptr, #8
02000     FD 78 02 FB | 	rdlong	local07, objptr
02004     3C 61 82 F1 | 	sub	arg02, local07
02008                 | ' asm
02008     2F 61 62 FC | 	wrlong	arg02, arg01
0200c     01 00 00 FF 
02010     E1 FA 05 F1 | 	add	objptr, ##737
02014     FD 5E 02 FB | 	rdlong	arg01, objptr
02018     10 5E 06 F1 | 	add	arg01, #16
0201c     01 00 00 FF 
02020     E9 FA 85 F1 | 	sub	objptr, ##745
02024     FD 60 E2 FA | 	rdword	arg02, objptr
02028     07 00 00 FF 
0202c     E7 FB 85 F1 | 	sub	objptr, ##4071
02030     0F 60 46 F7 | 	zerox	arg02, #15
02034                 | ' asm
02034     2F 61 62 FC | 	wrlong	arg02, arg01
02038                 | LR__0037
02038     09 00 00 FF 
0203c     D0 FA 05 F1 | 	add	objptr, ##4816
02040     FD 5E 02 FB | 	rdlong	arg01, objptr
02044     14 5E 06 F1 | 	add	arg01, #20
02048     01 00 00 FF 
0204c     A5 FA 85 F1 | 	sub	objptr, ##677
02050     FD 76 02 FB | 	rdlong	local06, objptr
02054     10 FA 05 F1 | 	add	objptr, #16
02058     FD 78 02 FB | 	rdlong	local07, objptr
0205c     3C 77 02 F1 | 	add	local06, local07
02060     27 FB 85 F1 | 	sub	objptr, #295
02064     FD 7C 02 FB | 	rdlong	local09, objptr
02068     3E 77 02 FD | 	qmul	local06, local09
0206c     18 60 62 FD | 	getqx	arg02
02070                 | ' asm
02070     2F 61 52 FC | 	wrword	arg02, arg01
02074     01 00 00 FF 
02078     BC FB 05 F1 | 	add	objptr, ##956
0207c     FD 5E 02 FB | 	rdlong	arg01, objptr
02080     16 5E 06 F1 | 	add	arg01, #22
02084                 | ' asm
02084     0C 00 80 FF 
02088     2F 01 58 FC | 	wrword	##6144, arg01
0208c     FD 6C 02 FB | 	rdlong	local01, objptr
02090     18 6C 06 F1 | 	add	local01, #24
02094     01 00 00 FF 
02098     C5 FA 85 F1 | 	sub	objptr, ##709
0209c     FD 76 02 FB | 	rdlong	local06, objptr
020a0     10 FA 05 F1 | 	add	objptr, #16
020a4     FD 78 02 FB | 	rdlong	local07, objptr
020a8     08 00 00 FF 
020ac     1B FA 85 F1 | 	sub	objptr, ##4123
020b0     3C 77 02 F1 | 	add	local06, local07
020b4     3B 99 02 F6 | 	mov	muldiva_, local06
020b8     02 98 66 F0 | 	shl	muldiva_, #2
020bc     3B 99 02 F1 | 	add	muldiva_, local06
020c0     01 98 66 F0 | 	shl	muldiva_, #1
020c4     0A 9A 06 F6 | 	mov	muldivb_, #10
020c8     C6 00 A0 FD | 	call	#divide_
020cc                 | ' asm
020cc     36 9B 52 FC | 	wrword	muldivb_, local01
020d0     09 00 00 FF 
020d4     D0 FA 05 F1 | 	add	objptr, ##4816
020d8     FD 5E 02 FB | 	rdlong	arg01, objptr
020dc     1A 5E 06 F1 | 	add	arg01, #26
020e0                 | ' asm
020e0     2F 03 58 FC | 	wrword	#1, arg01
020e4                 | '   
020e4                 | '   
020e4                 | '     dpoke base+20, (tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
020e4                 | '     dpoke base+22, 8192-2048
020e4                 | '     dpoke base+24, 10*(tracker.currPeriod(0)+tracker.deltaperiod(0))/10
020e4                 | '     dpoke base+26, 1
020e4                 | ' 
020e4                 | '  
020e4                 | '     if tracker.trigger(1) <> old2  then
020e4     AD FB 85 F1 | 	sub	objptr, #429
020e8     FD 6C C2 FA | 	rdbyte	local01, objptr
020ec     C5 FB 05 F1 | 	add	objptr, #453
020f0     FD 76 02 FB | 	rdlong	local06, objptr
020f4     09 00 00 FF 
020f8     E8 FA 85 F1 | 	sub	objptr, ##4840
020fc     3B 6D 0A F2 | 	cmp	local01, local06 wz
02100     9C 00 90 AD |  if_e	jmp	#LR__0038
02104     08 00 00 FF 
02108     23 FB 05 F1 | 	add	objptr, ##4387
0210c     FD 6C C2 FA | 	rdbyte	local01, objptr
02110     C5 FB 05 F1 | 	add	objptr, #453
02114     FD 6C 62 FC | 	wrlong	local01, objptr
02118     18 FA 85 F1 | 	sub	objptr, #24
0211c     FD 5E 02 FB | 	rdlong	arg01, objptr
02120     28 5E 06 F1 | 	add	arg01, #40
02124     01 00 00 FF 
02128     F9 FA 85 F1 | 	sub	objptr, ##761
0212c     FD 60 02 FB | 	rdlong	arg02, objptr
02130     1E 60 26 F4 | 	bith	arg02, #30
02134                 | ' asm
02134     2F 61 62 FC | 	wrlong	arg02, arg01
02138     20 5E 06 F6 | 	mov	arg01, #32
0213c     01 00 00 FF 
02140     F9 FA 05 F1 | 	add	objptr, ##761
02144     FD 76 02 FB | 	rdlong	local06, objptr
02148     3B 5F 02 F1 | 	add	arg01, local06
0214c     0C 5E 06 F1 | 	add	arg01, #12
02150     01 00 00 FF 
02154     E7 FA 85 F1 | 	sub	objptr, ##743
02158     FD 60 E2 FA | 	rdword	arg02, objptr
0215c     0A FA 05 F1 | 	add	objptr, #10
02160     FD 78 02 FB | 	rdlong	local07, objptr
02164     3C 61 82 F1 | 	sub	arg02, local07
02168                 | ' asm
02168     2F 61 62 FC | 	wrlong	arg02, arg01
0216c     20 5E 06 F6 | 	mov	arg01, #32
02170     01 00 00 FF 
02174     DD FA 05 F1 | 	add	objptr, ##733
02178     FD 76 02 FB | 	rdlong	local06, objptr
0217c     3B 5F 02 F1 | 	add	arg01, local06
02180     10 5E 06 F1 | 	add	arg01, #16
02184     01 00 00 FF 
02188     E7 FA 85 F1 | 	sub	objptr, ##743
0218c     FD 60 E2 FA | 	rdword	arg02, objptr
02190     07 00 00 FF 
02194     E9 FB 85 F1 | 	sub	objptr, ##4073
02198     0F 60 46 F7 | 	zerox	arg02, #15
0219c                 | ' asm
0219c     2F 61 62 FC | 	wrlong	arg02, arg01
021a0                 | LR__0038
021a0     20 5E 06 F6 | 	mov	arg01, #32
021a4     09 00 00 FF 
021a8     D0 FA 05 F1 | 	add	objptr, ##4816
021ac     FD 76 02 FB | 	rdlong	local06, objptr
021b0     3B 5F 02 F1 | 	add	arg01, local06
021b4     14 5E 06 F1 | 	add	arg01, #20
021b8     01 00 00 FF 
021bc     A1 FA 85 F1 | 	sub	objptr, ##673
021c0     FD 76 02 FB | 	rdlong	local06, objptr
021c4     10 FA 05 F1 | 	add	objptr, #16
021c8     FD 78 02 FB | 	rdlong	local07, objptr
021cc     3C 77 02 F1 | 	add	local06, local07
021d0     2B FB 85 F1 | 	sub	objptr, #299
021d4     FD 7C 02 FB | 	rdlong	local09, objptr
021d8     3E 77 02 FD | 	qmul	local06, local09
021dc     18 60 62 FD | 	getqx	arg02
021e0                 | ' asm
021e0     2F 61 52 FC | 	wrword	arg02, arg01
021e4     20 5E 06 F6 | 	mov	arg01, #32
021e8     01 00 00 FF 
021ec     BC FB 05 F1 | 	add	objptr, ##956
021f0     FD 76 02 FB | 	rdlong	local06, objptr
021f4     3B 5F 02 F1 | 	add	arg01, local06
021f8     16 5E 06 F1 | 	add	arg01, #22
021fc                 | ' asm
021fc     14 00 80 FF 
02200     2F 01 58 FC | 	wrword	##10240, arg01
02204     20 6C 06 F6 | 	mov	local01, #32
02208     FD 76 02 FB | 	rdlong	local06, objptr
0220c     3B 6D 02 F1 | 	add	local01, local06
02210     18 6C 06 F1 | 	add	local01, #24
02214     01 00 00 FF 
02218     C1 FA 85 F1 | 	sub	objptr, ##705
0221c     FD 76 02 FB | 	rdlong	local06, objptr
02220     10 FA 05 F1 | 	add	objptr, #16
02224     FD 78 02 FB | 	rdlong	local07, objptr
02228     08 00 00 FF 
0222c     1F FA 85 F1 | 	sub	objptr, ##4127
02230     3C 77 02 F1 | 	add	local06, local07
02234     3B 99 02 F6 | 	mov	muldiva_, local06
02238     02 98 66 F0 | 	shl	muldiva_, #2
0223c     3B 99 02 F1 | 	add	muldiva_, local06
02240     01 98 66 F0 | 	shl	muldiva_, #1
02244     0A 9A 06 F6 | 	mov	muldivb_, #10
02248     C6 00 A0 FD | 	call	#divide_
0224c                 | ' asm
0224c     36 9B 52 FC | 	wrword	muldivb_, local01
02250     20 5E 06 F6 | 	mov	arg01, #32
02254     09 00 00 FF 
02258     D0 FA 05 F1 | 	add	objptr, ##4816
0225c     FD 76 02 FB | 	rdlong	local06, objptr
02260     3B 5F 02 F1 | 	add	arg01, local06
02264     1A 5E 06 F1 | 	add	arg01, #26
02268                 | ' asm
02268     2F 03 58 FC | 	wrword	#1, arg01
0226c                 | '       
0226c                 | '     dpoke 32+base+20, (tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
0226c                 | '     dpoke 32+base+22, 8192+2048
0226c                 | '     dpoke 32+base+24, 10*(tracker.currPeriod(1)+tracker.deltaperiod(1))/10
0226c                 | '     dpoke 32+base+26, 1
0226c                 | ' 
0226c                 | '    if tracker.trigger(2) <> old3  then
0226c     AC FB 85 F1 | 	sub	objptr, #428
02270     FD 6C C2 FA | 	rdbyte	local01, objptr
02274     C8 FB 05 F1 | 	add	objptr, #456
02278     FD 76 02 FB | 	rdlong	local06, objptr
0227c     09 00 00 FF 
02280     EC FA 85 F1 | 	sub	objptr, ##4844
02284     3B 6D 0A F2 | 	cmp	local01, local06 wz
02288     9C 00 90 AD |  if_e	jmp	#LR__0039
0228c     08 00 00 FF 
02290     24 FB 05 F1 | 	add	objptr, ##4388
02294     FD 6C C2 FA | 	rdbyte	local01, objptr
02298     C8 FB 05 F1 | 	add	objptr, #456
0229c     FD 6C 62 FC | 	wrlong	local01, objptr
022a0     1C FA 85 F1 | 	sub	objptr, #28
022a4     FD 5E 02 FB | 	rdlong	arg01, objptr
022a8     48 5E 06 F1 | 	add	arg01, #72
022ac     01 00 00 FF 
022b0     F5 FA 85 F1 | 	sub	objptr, ##757
022b4     FD 60 02 FB | 	rdlong	arg02, objptr
022b8     1E 60 26 F4 | 	bith	arg02, #30
022bc                 | ' asm
022bc     2F 61 62 FC | 	wrlong	arg02, arg01
022c0     40 5E 06 F6 | 	mov	arg01, #64
022c4     01 00 00 FF 
022c8     F5 FA 05 F1 | 	add	objptr, ##757
022cc     FD 76 02 FB | 	rdlong	local06, objptr
022d0     3B 5F 02 F1 | 	add	arg01, local06
022d4     0C 5E 06 F1 | 	add	arg01, #12
022d8     01 00 00 FF 
022dc     E5 FA 85 F1 | 	sub	objptr, ##741
022e0     FD 60 E2 FA | 	rdword	arg02, objptr
022e4     0C FA 05 F1 | 	add	objptr, #12
022e8     FD 78 02 FB | 	rdlong	local07, objptr
022ec     3C 61 82 F1 | 	sub	arg02, local07
022f0                 | ' asm
022f0     2F 61 62 FC | 	wrlong	arg02, arg01
022f4     40 5E 06 F6 | 	mov	arg01, #64
022f8     01 00 00 FF 
022fc     D9 FA 05 F1 | 	add	objptr, ##729
02300     FD 76 02 FB | 	rdlong	local06, objptr
02304     3B 5F 02 F1 | 	add	arg01, local06
02308     10 5E 06 F1 | 	add	arg01, #16
0230c     01 00 00 FF 
02310     E5 FA 85 F1 | 	sub	objptr, ##741
02314     FD 60 E2 FA | 	rdword	arg02, objptr
02318     07 00 00 FF 
0231c     EB FB 85 F1 | 	sub	objptr, ##4075
02320     0F 60 46 F7 | 	zerox	arg02, #15
02324                 | ' asm
02324     2F 61 62 FC | 	wrlong	arg02, arg01
02328                 | LR__0039
02328     40 5E 06 F6 | 	mov	arg01, #64
0232c     09 00 00 FF 
02330     D0 FA 05 F1 | 	add	objptr, ##4816
02334     FD 76 02 FB | 	rdlong	local06, objptr
02338     3B 5F 02 F1 | 	add	arg01, local06
0233c     14 5E 06 F1 | 	add	arg01, #20
02340     01 00 00 FF 
02344     9D FA 85 F1 | 	sub	objptr, ##669
02348     FD 76 02 FB | 	rdlong	local06, objptr
0234c     10 FA 05 F1 | 	add	objptr, #16
02350     FD 78 02 FB | 	rdlong	local07, objptr
02354     3C 77 02 F1 | 	add	local06, local07
02358     2F FB 85 F1 | 	sub	objptr, #303
0235c     FD 7C 02 FB | 	rdlong	local09, objptr
02360     3E 77 02 FD | 	qmul	local06, local09
02364     18 60 62 FD | 	getqx	arg02
02368                 | ' asm
02368     2F 61 52 FC | 	wrword	arg02, arg01
0236c     40 5E 06 F6 | 	mov	arg01, #64
02370     01 00 00 FF 
02374     BC FB 05 F1 | 	add	objptr, ##956
02378     FD 76 02 FB | 	rdlong	local06, objptr
0237c     3B 5F 02 F1 | 	add	arg01, local06
02380     16 5E 06 F1 | 	add	arg01, #22
02384                 | ' asm
02384     14 00 80 FF 
02388     2F 01 58 FC | 	wrword	##10240, arg01
0238c     40 6C 06 F6 | 	mov	local01, #64
02390     FD 76 02 FB | 	rdlong	local06, objptr
02394     3B 6D 02 F1 | 	add	local01, local06
02398     18 6C 06 F1 | 	add	local01, #24
0239c     01 00 00 FF 
023a0     BD FA 85 F1 | 	sub	objptr, ##701
023a4     FD 76 02 FB | 	rdlong	local06, objptr
023a8     10 FA 05 F1 | 	add	objptr, #16
023ac     FD 78 02 FB | 	rdlong	local07, objptr
023b0     08 00 00 FF 
023b4     23 FA 85 F1 | 	sub	objptr, ##4131
023b8     3C 77 02 F1 | 	add	local06, local07
023bc     3B 99 02 F6 | 	mov	muldiva_, local06
023c0     02 98 66 F0 | 	shl	muldiva_, #2
023c4     3B 99 02 F1 | 	add	muldiva_, local06
023c8     01 98 66 F0 | 	shl	muldiva_, #1
023cc     0A 9A 06 F6 | 	mov	muldivb_, #10
023d0     C6 00 A0 FD | 	call	#divide_
023d4                 | ' asm
023d4     36 9B 52 FC | 	wrword	muldivb_, local01
023d8     40 5E 06 F6 | 	mov	arg01, #64
023dc     09 00 00 FF 
023e0     D0 FA 05 F1 | 	add	objptr, ##4816
023e4     FD 76 02 FB | 	rdlong	local06, objptr
023e8     3B 5F 02 F1 | 	add	arg01, local06
023ec     1A 5E 06 F1 | 	add	arg01, #26
023f0                 | ' asm
023f0     2F 03 58 FC | 	wrword	#1, arg01
023f4                 | '     
023f4                 | '     dpoke 64+base+20, (tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
023f4                 | '     dpoke 64+base+22, 8192+2048
023f4                 | '     dpoke 64+base+24, 10*(tracker.currPeriod(2)+tracker.deltaperiod(2))/10
023f4                 | '     dpoke 64+base+26, 1
023f4                 | ' 
023f4                 | '     if tracker.trigger(3) <> old4 then
023f4     AB FB 85 F1 | 	sub	objptr, #427
023f8     FD 6C C2 FA | 	rdbyte	local01, objptr
023fc     CB FB 05 F1 | 	add	objptr, #459
02400     FD 76 02 FB | 	rdlong	local06, objptr
02404     09 00 00 FF 
02408     F0 FA 85 F1 | 	sub	objptr, ##4848
0240c     3B 6D 0A F2 | 	cmp	local01, local06 wz
02410     9C 00 90 AD |  if_e	jmp	#LR__0040
02414     08 00 00 FF 
02418     25 FB 05 F1 | 	add	objptr, ##4389
0241c     FD 6C C2 FA | 	rdbyte	local01, objptr
02420     CB FB 05 F1 | 	add	objptr, #459
02424     FD 6C 62 FC | 	wrlong	local01, objptr
02428     20 FA 85 F1 | 	sub	objptr, #32
0242c     FD 5E 02 FB | 	rdlong	arg01, objptr
02430     68 5E 06 F1 | 	add	arg01, #104
02434     01 00 00 FF 
02438     F1 FA 85 F1 | 	sub	objptr, ##753
0243c     FD 60 02 FB | 	rdlong	arg02, objptr
02440     1E 60 26 F4 | 	bith	arg02, #30
02444                 | ' asm
02444     2F 61 62 FC | 	wrlong	arg02, arg01
02448     60 5E 06 F6 | 	mov	arg01, #96
0244c     01 00 00 FF 
02450     F1 FA 05 F1 | 	add	objptr, ##753
02454     FD 76 02 FB | 	rdlong	local06, objptr
02458     3B 5F 02 F1 | 	add	arg01, local06
0245c     0C 5E 06 F1 | 	add	arg01, #12
02460     01 00 00 FF 
02464     E3 FA 85 F1 | 	sub	objptr, ##739
02468     FD 60 E2 FA | 	rdword	arg02, objptr
0246c     0E FA 05 F1 | 	add	objptr, #14
02470     FD 78 02 FB | 	rdlong	local07, objptr
02474     3C 61 82 F1 | 	sub	arg02, local07
02478                 | ' asm
02478     2F 61 62 FC | 	wrlong	arg02, arg01
0247c     60 5E 06 F6 | 	mov	arg01, #96
02480     01 00 00 FF 
02484     D5 FA 05 F1 | 	add	objptr, ##725
02488     FD 76 02 FB | 	rdlong	local06, objptr
0248c     3B 5F 02 F1 | 	add	arg01, local06
02490     10 5E 06 F1 | 	add	arg01, #16
02494     01 00 00 FF 
02498     E3 FA 85 F1 | 	sub	objptr, ##739
0249c     FD 60 E2 FA | 	rdword	arg02, objptr
024a0     07 00 00 FF 
024a4     ED FB 85 F1 | 	sub	objptr, ##4077
024a8     0F 60 46 F7 | 	zerox	arg02, #15
024ac                 | ' asm
024ac     2F 61 62 FC | 	wrlong	arg02, arg01
024b0                 | LR__0040
024b0     60 5E 06 F6 | 	mov	arg01, #96
024b4     09 00 00 FF 
024b8     D0 FA 05 F1 | 	add	objptr, ##4816
024bc     FD 76 02 FB | 	rdlong	local06, objptr
024c0     3B 5F 02 F1 | 	add	arg01, local06
024c4     14 5E 06 F1 | 	add	arg01, #20
024c8     01 00 00 FF 
024cc     99 FA 85 F1 | 	sub	objptr, ##665
024d0     FD 76 02 FB | 	rdlong	local06, objptr
024d4     10 FA 05 F1 | 	add	objptr, #16
024d8     FD 78 02 FB | 	rdlong	local07, objptr
024dc     3C 77 02 F1 | 	add	local06, local07
024e0     33 FB 85 F1 | 	sub	objptr, #307
024e4     FD 7C 02 FB | 	rdlong	local09, objptr
024e8     3E 77 02 FD | 	qmul	local06, local09
024ec     18 60 62 FD | 	getqx	arg02
024f0                 | ' asm
024f0     2F 61 52 FC | 	wrword	arg02, arg01
024f4     60 5E 06 F6 | 	mov	arg01, #96
024f8     01 00 00 FF 
024fc     BC FB 05 F1 | 	add	objptr, ##956
02500     FD 76 02 FB | 	rdlong	local06, objptr
02504     3B 5F 02 F1 | 	add	arg01, local06
02508     16 5E 06 F1 | 	add	arg01, #22
0250c                 | ' asm
0250c     0C 00 80 FF 
02510     2F 01 58 FC | 	wrword	##6144, arg01
02514     60 6C 06 F6 | 	mov	local01, #96
02518     FD 76 02 FB | 	rdlong	local06, objptr
0251c     3B 6D 02 F1 | 	add	local01, local06
02520     18 6C 06 F1 | 	add	local01, #24
02524     01 00 00 FF 
02528     B9 FA 85 F1 | 	sub	objptr, ##697
0252c     FD 76 02 FB | 	rdlong	local06, objptr
02530     10 FA 05 F1 | 	add	objptr, #16
02534     FD 78 02 FB | 	rdlong	local07, objptr
02538     08 00 00 FF 
0253c     27 FA 85 F1 | 	sub	objptr, ##4135
02540     3C 77 02 F1 | 	add	local06, local07
02544     3B 99 02 F6 | 	mov	muldiva_, local06
02548     02 98 66 F0 | 	shl	muldiva_, #2
0254c     3B 99 02 F1 | 	add	muldiva_, local06
02550     01 98 66 F0 | 	shl	muldiva_, #1
02554     0A 9A 06 F6 | 	mov	muldivb_, #10
02558     C6 00 A0 FD | 	call	#divide_
0255c                 | ' asm
0255c     36 9B 52 FC | 	wrword	muldivb_, local01
02560     60 5E 06 F6 | 	mov	arg01, #96
02564     09 00 00 FF 
02568     D0 FA 05 F1 | 	add	objptr, ##4816
0256c     FD 76 02 FB | 	rdlong	local06, objptr
02570     09 00 00 FF 
02574     D0 FA 85 F1 | 	sub	objptr, ##4816
02578     3B 5F 02 F1 | 	add	arg01, local06
0257c     1A 5E 06 F1 | 	add	arg01, #26
02580     01 60 06 F6 | 	mov	arg02, #1
02584                 | ' asm
02584     2F 03 58 FC | 	wrword	#1, arg01
02588     20 E3 BF FD | 	call	#_test
0258c     C0 F9 9F FD | 	jmp	#LR__0036
02590     AF F0 03 F6 | 	mov	ptra, fp
02594     BA 00 A0 FD | 	call	#popregs_
02598                 | _program_ret
02598     2D 00 64 FD | 	ret
0259c                 | 
0259c                 | ' 
0259c                 | ' '------------------------------
0259c                 | ' 
0259c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
0259c                 | _hng033rm_spin2_fcircle
0259c     0A 5A 05 F6 | 	mov	COUNT_, #10
025a0     B0 00 A0 FD | 	call	#pushregs_
025a4     2F 6D 02 F6 | 	mov	local01, arg01
025a8     30 6F 02 F6 | 	mov	local02, arg02
025ac     31 71 02 F6 | 	mov	local03, arg03
025b0     32 73 02 F6 | 	mov	local04, arg04
025b4                 | ' 
025b4                 | ' d:=5-4*r
025b4     38 75 02 F6 | 	mov	local05, local03
025b8     02 74 66 F0 | 	shl	local05, #2
025bc     05 76 06 F6 | 	mov	local06, #5
025c0     3A 77 82 F1 | 	sub	local06, local05
025c4                 | ' x:=0
025c4     00 78 06 F6 | 	mov	local07, #0
025c8                 | ' y:=r
025c8     38 7B 02 F6 | 	mov	local08, local03
025cc                 | ' da:=(-2*r+5)*4
025cc     FF FF 7F FF 
025d0     FE 71 06 FD | 	qmul	local03, ##-2
025d4     18 7C 62 FD | 	getqx	local09
025d8     05 7C 06 F1 | 	add	local09, #5
025dc     02 7C 66 F0 | 	shl	local09, #2
025e0                 | ' db:=3*4
025e0     0C 7E 06 F6 | 	mov	local10, #12
025e4                 | ' repeat while (x<=y) 
025e4                 | LR__0041
025e4     3D 79 5A F2 | 	cmps	local07, local08 wcz
025e8     D4 00 90 1D |  if_a	jmp	#LR__0043
025ec                 | '   line(x0-x,y0-y,x0+x,y0-y,c)
025ec     36 5F 02 F6 | 	mov	arg01, local01
025f0     3C 5F 82 F1 | 	sub	arg01, local07
025f4     37 61 02 F6 | 	mov	arg02, local02
025f8     3D 61 82 F1 | 	sub	arg02, local08
025fc     36 63 02 F6 | 	mov	arg03, local01
02600     3C 63 02 F1 | 	add	arg03, local07
02604     37 65 02 F6 | 	mov	arg04, local02
02608     3D 65 82 F1 | 	sub	arg04, local08
0260c     39 67 02 F6 | 	mov	arg05, local04
02610     B8 00 B0 FD | 	call	#_hng033rm_spin2_line
02614                 | '   line(x0-x,y0+y,x0+x,y0+y,c)
02614     36 5F 02 F6 | 	mov	arg01, local01
02618     3C 5F 82 F1 | 	sub	arg01, local07
0261c     37 61 02 F6 | 	mov	arg02, local02
02620     3D 61 02 F1 | 	add	arg02, local08
02624     36 63 02 F6 | 	mov	arg03, local01
02628     3C 63 02 F1 | 	add	arg03, local07
0262c     37 65 02 F6 | 	mov	arg04, local02
02630     3D 65 02 F1 | 	add	arg04, local08
02634     39 67 02 F6 | 	mov	arg05, local04
02638     90 00 B0 FD | 	call	#_hng033rm_spin2_line
0263c                 | '   line(x0-y,y0-x,x0+y,y0-x,c)
0263c     36 5F 02 F6 | 	mov	arg01, local01
02640     3D 5F 82 F1 | 	sub	arg01, local08
02644     37 61 02 F6 | 	mov	arg02, local02
02648     3C 61 82 F1 | 	sub	arg02, local07
0264c     36 63 02 F6 | 	mov	arg03, local01
02650     3D 63 02 F1 | 	add	arg03, local08
02654     37 65 02 F6 | 	mov	arg04, local02
02658     3C 65 82 F1 | 	sub	arg04, local07
0265c     39 67 02 F6 | 	mov	arg05, local04
02660     68 00 B0 FD | 	call	#_hng033rm_spin2_line
02664                 | '   line(x0-y,y0+x,x0+y,y0+x,c)
02664     36 5F 02 F6 | 	mov	arg01, local01
02668     3D 5F 82 F1 | 	sub	arg01, local08
0266c     37 61 02 F6 | 	mov	arg02, local02
02670     3C 61 02 F1 | 	add	arg02, local07
02674     36 63 02 F6 | 	mov	arg03, local01
02678     3D 63 02 F1 | 	add	arg03, local08
0267c     37 65 02 F6 | 	mov	arg04, local02
02680     3C 65 02 F1 | 	add	arg04, local07
02684     39 67 02 F6 | 	mov	arg05, local04
02688     40 00 B0 FD | 	call	#_hng033rm_spin2_line
0268c                 | '   if d>0 
0268c     00 76 5E F2 | 	cmps	local06, #0 wcz
02690     18 00 90 ED |  if_be	jmp	#LR__0042
02694                 | '     d+=da
02694     3E 77 02 F1 | 	add	local06, local09
02698                 | '     y-=1
02698     01 7A 86 F1 | 	sub	local08, #1
0269c                 | '     x+=1
0269c     01 78 06 F1 | 	add	local07, #1
026a0                 | '     da+=4*4
026a0     10 7C 06 F1 | 	add	local09, #16
026a4                 | '     db+=2*4
026a4     08 7E 06 F1 | 	add	local10, #8
026a8                 | '   else
026a8     38 FF 9F FD | 	jmp	#LR__0041
026ac                 | LR__0042
026ac                 | '     d+=db
026ac     3F 77 02 F1 | 	add	local06, local10
026b0                 | '     x+=1
026b0     01 78 06 F1 | 	add	local07, #1
026b4                 | '     da+=2*4
026b4     08 7C 06 F1 | 	add	local09, #8
026b8                 | '     db+=2*4
026b8     08 7E 06 F1 | 	add	local10, #8
026bc     24 FF 9F FD | 	jmp	#LR__0041
026c0                 | LR__0043
026c0     AF F0 03 F6 | 	mov	ptra, fp
026c4     BA 00 A0 FD | 	call	#popregs_
026c8                 | _hng033rm_spin2_fcircle_ret
026c8     2D 00 64 FD | 	ret
026cc                 | 
026cc                 | ' 
026cc                 | ' pub line(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y
026cc                 | _hng033rm_spin2_line
026cc     12 5A 05 F6 | 	mov	COUNT_, #18
026d0     B0 00 A0 FD | 	call	#pushregs_
026d4     2F 6D 02 F6 | 	mov	local01, arg01
026d8     30 6F 02 F6 | 	mov	local02, arg02
026dc     31 71 02 F6 | 	mov	local03, arg03
026e0     32 73 02 F6 | 	mov	local04, arg04
026e4     33 75 02 F6 | 	mov	local05, arg05
026e8                 | ' 
026e8                 | ' 
026e8                 | ' x:=x1
026e8     36 77 02 F6 | 	mov	local06, local01
026ec                 | ' y:=y1
026ec     37 79 02 F6 | 	mov	local07, local02
026f0                 | ' 
026f0                 | ' if (x1<x2) 
026f0     38 6D 5A F2 | 	cmps	local01, local03 wcz
026f4     10 00 90 3D |  if_ae	jmp	#LR__0044
026f8                 | '   xi:=1
026f8     01 7A 06 F6 | 	mov	local08, #1
026fc                 | '   dx:=x2-x1
026fc     38 7D 02 F6 | 	mov	local09, local03
02700     36 7D 82 F1 | 	sub	local09, local01
02704                 | ' else
02704     0C 00 90 FD | 	jmp	#LR__0045
02708                 | LR__0044
02708                 | '   xi:=-1
02708     01 7A 66 F6 | 	neg	local08, #1
0270c                 | '   dx:=x1-x2
0270c     38 6D 82 F1 | 	sub	local01, local03
02710     36 7D 02 F6 | 	mov	local09, local01
02714                 | LR__0045
02714                 | '   
02714                 | ' if (y1<y2) 
02714     39 6F 5A F2 | 	cmps	local02, local04 wcz
02718     10 00 90 3D |  if_ae	jmp	#LR__0046
0271c                 | '   yi:=1
0271c     01 7E 06 F6 | 	mov	local10, #1
02720                 | '   dy:=y2-y1
02720     39 81 02 F6 | 	mov	local11, local04
02724     37 81 82 F1 | 	sub	local11, local02
02728                 | ' else
02728     0C 00 90 FD | 	jmp	#LR__0047
0272c                 | LR__0046
0272c                 | '   yi:=-1
0272c     01 7E 66 F6 | 	neg	local10, #1
02730                 | '   dy:=y1-y2
02730     39 6F 82 F1 | 	sub	local02, local04
02734     37 81 02 F6 | 	mov	local11, local02
02738                 | LR__0047
02738                 | ' 
02738                 | ' putpixel(x,y,c)
02738     D8 FA 05 F1 | 	add	objptr, #216
0273c     FD 82 02 FB | 	rdlong	local12, objptr
02740     D8 FA 85 F1 | 	sub	objptr, #216
02744     41 85 02 FB | 	rdlong	local13, local12
02748     04 82 06 F1 | 	add	local12, #4
0274c     41 87 02 FB | 	rdlong	local14, local12
02750     3B 5F 02 F6 | 	mov	arg01, local06
02754     3C 61 02 F6 | 	mov	arg02, local07
02758     3A 63 02 F6 | 	mov	arg03, local05
0275c     FD 88 02 F6 | 	mov	local15, objptr
02760     42 FB 01 F6 | 	mov	objptr, local13
02764     2D 86 62 FD | 	call	local14
02768     44 FB 01 F6 | 	mov	objptr, local15
0276c                 | ' 
0276c                 | ' if (dx>dy)
0276c     40 7D 5A F2 | 	cmps	local09, local11 wcz
02770     7C 00 90 ED |  if_be	jmp	#LR__0051
02774                 | '   ai:=(dy-dx)*2
02774     40 8B 02 F6 | 	mov	local16, local11
02778     3E 8B 82 F1 | 	sub	local16, local09
0277c     01 8A 66 F0 | 	shl	local16, #1
02780                 | '   bi:=dy*2
02780     01 80 66 F0 | 	shl	local11, #1
02784     40 8D 02 F6 | 	mov	local17, local11
02788                 | '   d:= bi-dx
02788     46 8F 02 F6 | 	mov	local18, local17
0278c     3E 8F 82 F1 | 	sub	local18, local09
02790                 | '   repeat while (x<>x2) 
02790                 | LR__0048
02790     38 77 0A F2 | 	cmp	local06, local03 wz
02794     D4 00 90 AD |  if_e	jmp	#LR__0056
02798                 | '     if (d>=0) 
02798     00 8E 5E F2 | 	cmps	local18, #0 wcz
0279c     10 00 90 CD |  if_b	jmp	#LR__0049
027a0                 | '       x+=xi
027a0     3D 77 02 F1 | 	add	local06, local08
027a4                 | '       y+=yi
027a4     3F 79 02 F1 | 	add	local07, local10
027a8                 | '       d+=ai
027a8     45 8F 02 F1 | 	add	local18, local16
027ac                 | '     else
027ac     08 00 90 FD | 	jmp	#LR__0050
027b0                 | LR__0049
027b0                 | '       d+=bi
027b0     46 8F 02 F1 | 	add	local18, local17
027b4                 | '       x+=xi
027b4     3D 77 02 F1 | 	add	local06, local08
027b8                 | LR__0050
027b8                 | '     putpixel(x,y,c)
027b8     D8 FA 05 F1 | 	add	objptr, #216
027bc     FD 82 02 FB | 	rdlong	local12, objptr
027c0     D8 FA 85 F1 | 	sub	objptr, #216
027c4     41 85 02 FB | 	rdlong	local13, local12
027c8     04 82 06 F1 | 	add	local12, #4
027cc     41 87 02 FB | 	rdlong	local14, local12
027d0     3B 5F 02 F6 | 	mov	arg01, local06
027d4     3C 61 02 F6 | 	mov	arg02, local07
027d8     3A 63 02 F6 | 	mov	arg03, local05
027dc     FD 88 02 F6 | 	mov	local15, objptr
027e0     42 FB 01 F6 | 	mov	objptr, local13
027e4     2D 86 62 FD | 	call	local14
027e8     44 FB 01 F6 | 	mov	objptr, local15
027ec     A0 FF 9F FD | 	jmp	#LR__0048
027f0                 | ' else
027f0                 | LR__0051
027f0                 | '   ai:=(dx-dy)*2
027f0     3E 8B 02 F6 | 	mov	local16, local09
027f4     40 8B 82 F1 | 	sub	local16, local11
027f8     01 8A 66 F0 | 	shl	local16, #1
027fc                 | '   bi:=dx*2
027fc     01 7C 66 F0 | 	shl	local09, #1
02800     3E 8D 02 F6 | 	mov	local17, local09
02804                 | '   d:=bi-dy
02804     46 8F 02 F6 | 	mov	local18, local17
02808     40 8F 82 F1 | 	sub	local18, local11
0280c                 | '   repeat while (y<>y2)
0280c                 | LR__0052
0280c     39 79 0A F2 | 	cmp	local07, local04 wz
02810     58 00 90 AD |  if_e	jmp	#LR__0055
02814                 | '     if (d>=0)
02814     00 8E 5E F2 | 	cmps	local18, #0 wcz
02818     10 00 90 CD |  if_b	jmp	#LR__0053
0281c                 | '       x+=xi
0281c     3D 77 02 F1 | 	add	local06, local08
02820                 | '       y+=yi
02820     3F 79 02 F1 | 	add	local07, local10
02824                 | '       d+=ai
02824     45 8F 02 F1 | 	add	local18, local16
02828                 | '     else
02828     08 00 90 FD | 	jmp	#LR__0054
0282c                 | LR__0053
0282c                 | '       d+=bi
0282c     46 8F 02 F1 | 	add	local18, local17
02830                 | '       y+=yi
02830     3F 79 02 F1 | 	add	local07, local10
02834                 | LR__0054
02834                 | '     putpixel(x, y,c)
02834     D8 FA 05 F1 | 	add	objptr, #216
02838     FD 82 02 FB | 	rdlong	local12, objptr
0283c     D8 FA 85 F1 | 	sub	objptr, #216
02840     41 85 02 FB | 	rdlong	local13, local12
02844     04 82 06 F1 | 	add	local12, #4
02848     41 87 02 FB | 	rdlong	local14, local12
0284c     3B 5F 02 F6 | 	mov	arg01, local06
02850     3C 61 02 F6 | 	mov	arg02, local07
02854     3A 63 02 F6 | 	mov	arg03, local05
02858     FD 88 02 F6 | 	mov	local15, objptr
0285c     42 FB 01 F6 | 	mov	objptr, local13
02860     2D 86 62 FD | 	call	local14
02864     44 FB 01 F6 | 	mov	objptr, local15
02868     A0 FF 9F FD | 	jmp	#LR__0052
0286c                 | LR__0055
0286c                 | LR__0056
0286c     AF F0 03 F6 | 	mov	ptra, fp
02870     BA 00 A0 FD | 	call	#popregs_
02874                 | _hng033rm_spin2_line_ret
02874     2D 00 64 FD | 	ret
02878                 | 
02878                 | ' 
02878                 | ' pub putcharxycg(x,y,achar,f,b) |xx, yy,bb
02878                 | _hng033rm_spin2_putcharxycg
02878     0D 5A 05 F6 | 	mov	COUNT_, #13
0287c     B0 00 A0 FD | 	call	#pushregs_
02880     2F 6D 02 F6 | 	mov	local01, arg01
02884     30 6F 02 F6 | 	mov	local02, arg02
02888     31 71 02 F6 | 	mov	local03, arg03
0288c     32 73 02 F6 | 	mov	local04, arg04
02890     33 75 02 F6 | 	mov	local05, arg05
02894                 | ' 
02894                 | ' repeat yy from 0 to 15
02894     00 76 06 F6 | 	mov	local06, #0
02898                 | LR__0057
02898                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
02898     03 79 02 F6 | 	mov	local07, ptr__hng033rm_spin2_dat__
0289c     C8 FA 05 F1 | 	add	objptr, #200
028a0     FD 7A 02 FB | 	rdlong	local08, objptr
028a4     C8 FA 85 F1 | 	sub	objptr, #200
028a8     0A 7A 66 F0 | 	shl	local08, #10
028ac     3D 79 02 F1 | 	add	local07, local08
028b0     38 7D 02 F6 | 	mov	local09, local03
028b4     04 7C 66 F0 | 	shl	local09, #4
028b8     3E 79 02 F1 | 	add	local07, local09
028bc     3B 79 02 F1 | 	add	local07, local06
028c0     3C 7F C2 FA | 	rdbyte	local10, local07
028c4                 | '   repeat xx from 0 to 7
028c4     00 80 06 F6 | 	mov	local11, #0
028c8                 | LR__0058
028c8                 | '     if (bb&(1<<xx))<>0
028c8     40 83 C2 F9 | 	decod	local12, local11
028cc     41 7F CA F7 | 	test	local10, local12 wz
028d0     40 00 90 AD |  if_e	jmp	#LR__0059
028d4                 | '       putpixel(xx+x,yy+y,f)
028d4     D8 FA 05 F1 | 	add	objptr, #216
028d8     FD 78 02 FB | 	rdlong	local07, objptr
028dc     D8 FA 85 F1 | 	sub	objptr, #216
028e0     3C 83 02 FB | 	rdlong	local12, local07
028e4     04 78 06 F1 | 	add	local07, #4
028e8     3C 7B 02 FB | 	rdlong	local08, local07
028ec     40 5F 02 F6 | 	mov	arg01, local11
028f0     36 5F 02 F1 | 	add	arg01, local01
028f4     3B 61 02 F6 | 	mov	arg02, local06
028f8     37 61 02 F1 | 	add	arg02, local02
028fc     39 63 02 F6 | 	mov	arg03, local04
02900     FD 84 02 F6 | 	mov	local13, objptr
02904     41 FB 01 F6 | 	mov	objptr, local12
02908     2D 7A 62 FD | 	call	local08
0290c     42 FB 01 F6 | 	mov	objptr, local13
02910                 | '     else
02910     3C 00 90 FD | 	jmp	#LR__0060
02914                 | LR__0059
02914                 | '       putpixel(xx+x,yy+y,b)
02914     D8 FA 05 F1 | 	add	objptr, #216
02918     FD 78 02 FB | 	rdlong	local07, objptr
0291c     D8 FA 85 F1 | 	sub	objptr, #216
02920     3C 83 02 FB | 	rdlong	local12, local07
02924     04 78 06 F1 | 	add	local07, #4
02928     3C 7B 02 FB | 	rdlong	local08, local07
0292c     40 5F 02 F6 | 	mov	arg01, local11
02930     36 5F 02 F1 | 	add	arg01, local01
02934     3B 61 02 F6 | 	mov	arg02, local06
02938     37 61 02 F1 | 	add	arg02, local02
0293c     3A 63 02 F6 | 	mov	arg03, local05
02940     FD 84 02 F6 | 	mov	local13, objptr
02944     41 FB 01 F6 | 	mov	objptr, local12
02948     2D 7A 62 FD | 	call	local08
0294c     42 FB 01 F6 | 	mov	objptr, local13
02950                 | LR__0060
02950     01 80 06 F1 | 	add	local11, #1
02954     08 80 5E F2 | 	cmps	local11, #8 wcz
02958     6C FF 9F CD |  if_b	jmp	#LR__0058
0295c     01 76 06 F1 | 	add	local06, #1
02960     10 76 5E F2 | 	cmps	local06, #16 wcz
02964     30 FF 9F CD |  if_b	jmp	#LR__0057
02968     AF F0 03 F6 | 	mov	ptra, fp
0296c     BA 00 A0 FD | 	call	#popregs_
02970                 | _hng033rm_spin2_putcharxycg_ret
02970     2D 00 64 FD | 	ret
02974                 | 
02974                 | ' 
02974                 | ' pub outtextxycg(x,y,text,f,b) | iii,c
02974                 | _hng033rm_spin2_outtextxycg
02974     0C 5A 05 F6 | 	mov	COUNT_, #12
02978     B0 00 A0 FD | 	call	#pushregs_
0297c     2F 6D 02 F6 | 	mov	local01, arg01
02980     30 6F 02 F6 | 	mov	local02, arg02
02984     31 71 02 F6 | 	mov	local03, arg03
02988     32 73 02 F6 | 	mov	local04, arg04
0298c     33 75 02 F6 | 	mov	local05, arg05
02990                 | ' 
02990                 | ' repeat iii from 0 to strsize(text)-1
02990     00 76 06 F6 | 	mov	local06, #0
02994     38 5F 02 F6 | 	mov	arg01, local03
02998     00 78 06 F6 | 	mov	local07, #0
0299c     70 D6 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
029a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
029a4                 | LR__0061
029a4     2F 7B CA FA | 	rdbyte	local08, arg01 wz
029a8     01 78 06 51 |  if_ne	add	local07, #1
029ac     01 5E 06 51 |  if_ne	add	arg01, #1
029b0     F0 FF 9F 5D |  if_ne	jmp	#LR__0061
029b4                 | LR__0062
029b4     3C 19 02 F6 | 	mov	result1, local07
029b8     0C 7D 02 F6 | 	mov	local09, result1
029bc     01 7C 86 F1 | 	sub	local09, #1
029c0     00 7C 5E F2 | 	cmps	local09, #0 wcz
029c4     01 7E 06 16 |  if_a	mov	local10, #1
029c8     01 7E 66 E6 |  if_be	neg	local10, #1
029cc     3F 7D 02 F1 | 	add	local09, local10
029d0                 | LR__0063
029d0                 | '   putcharxycg(x+8*iii,y,byte[text+iii],f,b)
029d0     36 5F 02 F6 | 	mov	arg01, local01
029d4     3B 81 02 F6 | 	mov	local11, local06
029d8     03 80 66 F0 | 	shl	local11, #3
029dc     40 5F 02 F1 | 	add	arg01, local11
029e0     37 61 02 F6 | 	mov	arg02, local02
029e4     38 83 02 F6 | 	mov	local12, local03
029e8     3B 83 02 F1 | 	add	local12, local06
029ec     41 63 C2 FA | 	rdbyte	arg03, local12
029f0     39 65 02 F6 | 	mov	arg04, local04
029f4     3A 67 02 F6 | 	mov	arg05, local05
029f8     7C FE BF FD | 	call	#_hng033rm_spin2_putcharxycg
029fc     3F 77 02 F1 | 	add	local06, local10
02a00     3E 77 0A F2 | 	cmp	local06, local09 wz
02a04     C8 FF 9F 5D |  if_ne	jmp	#LR__0063
02a08     AF F0 03 F6 | 	mov	ptra, fp
02a0c     BA 00 A0 FD | 	call	#popregs_
02a10                 | _hng033rm_spin2_outtextxycg_ret
02a10     2D 00 64 FD | 	ret
02a14                 | 
02a14                 | ' 
02a14                 | ' 
02a14                 | ' ''---------- putpixel - put a pixel on the screen
02a14                 | ' 
02a14                 | ' pub putpixel1(x,y,c) |byte b
02a14                 | _hng033rm_spin2_putpixel1
02a14                 | ' 
02a14                 | ' 
02a14                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
02a14     00 1E 06 F6 | 	mov	_var01, #0
02a18     00 5E 5E F2 | 	cmps	arg01, #0 wcz
02a1c     01 1E 66 36 |  if_ae	neg	_var01, #1
02a20     00 20 06 F6 | 	mov	_var02, #0
02a24     90 FA 05 F1 | 	add	objptr, #144
02a28     FD 22 02 FB | 	rdlong	_var03, objptr
02a2c     05 22 66 F0 | 	shl	_var03, #5
02a30     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
02a34     01 20 66 C6 |  if_b	neg	_var02, #1
02a38     10 1F 02 F5 | 	and	_var01, _var02
02a3c     00 24 06 F6 | 	mov	_var04, #0
02a40     00 60 5E F2 | 	cmps	arg02, #0 wcz
02a44     01 24 66 36 |  if_ae	neg	_var04, #1
02a48     12 1F 02 F5 | 	and	_var01, _var04
02a4c     00 26 06 F6 | 	mov	_var05, #0
02a50     04 FA 05 F1 | 	add	objptr, #4
02a54     FD 28 02 FB | 	rdlong	_var06, objptr
02a58     94 FA 85 F1 | 	sub	objptr, #148
02a5c     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02a60     01 26 66 C6 |  if_b	neg	_var05, #1
02a64     13 1F CA F7 | 	test	_var01, _var05 wz
02a68     90 00 90 AD |  if_e	jmp	#LR__0066
02a6c                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
02a6c     FD 1E 02 FB | 	rdlong	_var01, objptr
02a70     90 FA 05 F1 | 	add	objptr, #144
02a74     FD 20 02 FB | 	rdlong	_var02, objptr
02a78     90 FA 85 F1 | 	sub	objptr, #144
02a7c     02 20 66 F0 | 	shl	_var02, #2
02a80     30 21 02 FD | 	qmul	_var02, arg02
02a84     18 2A 62 FD | 	getqx	_var07
02a88     15 1F 02 F1 | 	add	_var01, _var07
02a8c     2F 25 02 F6 | 	mov	_var04, arg01
02a90     03 24 46 F0 | 	shr	_var04, #3
02a94     12 1F 02 F1 | 	add	_var01, _var04
02a98     0F 2D C2 FA | 	rdbyte	_var08, _var01
02a9c                 | '     if (c==0)
02a9c     00 62 0E F2 | 	cmp	arg03, #0 wz
02aa0     18 00 90 5D |  if_ne	jmp	#LR__0064
02aa4                 | '       b:=b & !(1<<(x//8))
02aa4     2F 23 52 F6 | 	abs	_var03, arg01 wc
02aa8     07 22 06 F5 | 	and	_var03, #7
02aac     11 23 62 C6 |  if_b	neg	_var03, _var03
02ab0     11 21 C2 F9 | 	decod	_var02, _var03
02ab4     10 2D 22 F5 | 	andn	_var08, _var02
02ab8                 | '     else
02ab8     14 00 90 FD | 	jmp	#LR__0065
02abc                 | LR__0064
02abc                 | '       b:=b |(1<<(x//8))
02abc     2F 23 52 F6 | 	abs	_var03, arg01 wc
02ac0     07 22 06 F5 | 	and	_var03, #7
02ac4     11 23 62 C6 |  if_b	neg	_var03, _var03
02ac8     11 21 C2 F9 | 	decod	_var02, _var03
02acc     10 2D 42 F5 | 	or	_var08, _var02
02ad0                 | LR__0065
02ad0                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
02ad0     FD 1E 02 FB | 	rdlong	_var01, objptr
02ad4     90 FA 05 F1 | 	add	objptr, #144
02ad8     FD 20 02 FB | 	rdlong	_var02, objptr
02adc     90 FA 85 F1 | 	sub	objptr, #144
02ae0     02 20 66 F0 | 	shl	_var02, #2
02ae4     30 21 02 FD | 	qmul	_var02, arg02
02ae8     18 2A 62 FD | 	getqx	_var07
02aec     15 1F 02 F1 | 	add	_var01, _var07
02af0     03 5E 46 F0 | 	shr	arg01, #3
02af4     2F 1F 02 F1 | 	add	_var01, arg01
02af8     0F 2D 42 FC | 	wrbyte	_var08, _var01
02afc                 | LR__0066
02afc                 | _hng033rm_spin2_putpixel1_ret
02afc     2D 00 64 FD | 	ret
02b00                 | 
02b00                 | ' 
02b00                 | ' 
02b00                 | ' pub putpixel2(x,y,c) |byte b
02b00                 | _hng033rm_spin2_putpixel2
02b00     2F 1F 02 F6 | 	mov	_var01, arg01
02b04     30 21 02 F6 | 	mov	_var02, arg02
02b08     31 23 02 F6 | 	mov	_var03, arg03
02b0c                 | ' 
02b0c                 | ' 
02b0c                 | ' if ((x>=0) && (x<16*cpl) && (y>=0) && (y<lines))
02b0c     00 1E 5E F2 | 	cmps	_var01, #0 wcz
02b10     C8 00 90 CD |  if_b	jmp	#LR__0067
02b14     90 FA 05 F1 | 	add	objptr, #144
02b18     FD 24 02 FB | 	rdlong	_var04, objptr
02b1c     90 FA 85 F1 | 	sub	objptr, #144
02b20     04 24 66 F0 | 	shl	_var04, #4
02b24     12 1F 5A F2 | 	cmps	_var01, _var04 wcz
02b28     B0 00 90 3D |  if_ae	jmp	#LR__0067
02b2c     00 20 5E F2 | 	cmps	_var02, #0 wcz
02b30     A8 00 90 CD |  if_b	jmp	#LR__0067
02b34     94 FA 05 F1 | 	add	objptr, #148
02b38     FD 26 02 FB | 	rdlong	_var05, objptr
02b3c     94 FA 85 F1 | 	sub	objptr, #148
02b40     13 21 5A F2 | 	cmps	_var02, _var05 wcz
02b44     94 00 90 3D |  if_ae	jmp	#LR__0067
02b48                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02b48     FD 24 02 FB | 	rdlong	_var04, objptr
02b4c     90 FA 05 F1 | 	add	objptr, #144
02b50     FD 28 02 FB | 	rdlong	_var06, objptr
02b54     90 FA 85 F1 | 	sub	objptr, #144
02b58     02 28 66 F0 | 	shl	_var06, #2
02b5c     10 29 02 FD | 	qmul	_var06, _var02
02b60     18 2A 62 FD | 	getqx	_var07
02b64     15 25 02 F1 | 	add	_var04, _var07
02b68     0F 2D 02 F6 | 	mov	_var08, _var01
02b6c     02 2C 46 F0 | 	shr	_var08, #2
02b70     16 25 02 F1 | 	add	_var04, _var08
02b74     12 2F C2 FA | 	rdbyte	_var09, _var04
02b78                 | '     b:=b & !(%11<<((x//4)<<1))
02b78     0F 31 52 F6 | 	abs	_var10, _var01 wc
02b7c     03 30 06 F5 | 	and	_var10, #3
02b80     18 31 62 C6 |  if_b	neg	_var10, _var10
02b84     01 30 66 F0 | 	shl	_var10, #1
02b88     03 28 06 F6 | 	mov	_var06, #3
02b8c     18 29 62 F0 | 	shl	_var06, _var10
02b90     14 2F 22 F5 | 	andn	_var09, _var06
02b94                 | '     b:=b |(c<<((x//4)<<1))
02b94     0F 31 52 F6 | 	abs	_var10, _var01 wc
02b98     03 30 06 F5 | 	and	_var10, #3
02b9c     18 31 62 C6 |  if_b	neg	_var10, _var10
02ba0     01 30 66 F0 | 	shl	_var10, #1
02ba4     18 23 62 F0 | 	shl	_var03, _var10
02ba8     11 2F 42 F5 | 	or	_var09, _var03
02bac                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
02bac     FD 24 02 FB | 	rdlong	_var04, objptr
02bb0     90 FA 05 F1 | 	add	objptr, #144
02bb4     FD 28 02 FB | 	rdlong	_var06, objptr
02bb8     90 FA 85 F1 | 	sub	objptr, #144
02bbc     02 28 66 F0 | 	shl	_var06, #2
02bc0     10 29 02 FD | 	qmul	_var06, _var02
02bc4     18 2A 62 FD | 	getqx	_var07
02bc8     15 25 02 F1 | 	add	_var04, _var07
02bcc     0F 2D 02 F6 | 	mov	_var08, _var01
02bd0     02 2C 46 F0 | 	shr	_var08, #2
02bd4     16 25 02 F1 | 	add	_var04, _var08
02bd8     12 2F 42 FC | 	wrbyte	_var09, _var04
02bdc                 | LR__0067
02bdc                 | _hng033rm_spin2_putpixel2_ret
02bdc     2D 00 64 FD | 	ret
02be0                 | 
02be0                 | ' 
02be0                 | ' 
02be0                 | ' pub putpixel4(x,y,c) |byte b
02be0                 | _hng033rm_spin2_putpixel4
02be0                 | ' 
02be0                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02be0     00 1E 06 F6 | 	mov	_var01, #0
02be4     00 5E 5E F2 | 	cmps	arg01, #0 wcz
02be8     01 1E 66 36 |  if_ae	neg	_var01, #1
02bec     00 20 06 F6 | 	mov	_var02, #0
02bf0     90 FA 05 F1 | 	add	objptr, #144
02bf4     FD 22 02 FB | 	rdlong	_var03, objptr
02bf8     04 22 66 F0 | 	shl	_var03, #4
02bfc     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
02c00     01 20 66 C6 |  if_b	neg	_var02, #1
02c04     10 1F 02 F5 | 	and	_var01, _var02
02c08     00 24 06 F6 | 	mov	_var04, #0
02c0c     00 60 5E F2 | 	cmps	arg02, #0 wcz
02c10     01 24 66 36 |  if_ae	neg	_var04, #1
02c14     12 1F 02 F5 | 	and	_var01, _var04
02c18     00 26 06 F6 | 	mov	_var05, #0
02c1c     04 FA 05 F1 | 	add	objptr, #4
02c20     FD 28 02 FB | 	rdlong	_var06, objptr
02c24     94 FA 85 F1 | 	sub	objptr, #148
02c28     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02c2c     01 26 66 C6 |  if_b	neg	_var05, #1
02c30     13 1F CA F7 | 	test	_var01, _var05 wz
02c34     90 00 90 AD |  if_e	jmp	#LR__0068
02c38                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02c38     FD 1E 02 FB | 	rdlong	_var01, objptr
02c3c     90 FA 05 F1 | 	add	objptr, #144
02c40     FD 20 02 FB | 	rdlong	_var02, objptr
02c44     90 FA 85 F1 | 	sub	objptr, #144
02c48     02 20 66 F0 | 	shl	_var02, #2
02c4c     30 21 02 FD | 	qmul	_var02, arg02
02c50     18 2A 62 FD | 	getqx	_var07
02c54     15 1F 02 F1 | 	add	_var01, _var07
02c58     2F 25 02 F6 | 	mov	_var04, arg01
02c5c     01 24 46 F0 | 	shr	_var04, #1
02c60     12 1F 02 F1 | 	add	_var01, _var04
02c64     0F 2D C2 FA | 	rdbyte	_var08, _var01
02c68                 | '     b:=b & !(%1111<<((x//2)<<2))
02c68     2F 23 52 F6 | 	abs	_var03, arg01 wc
02c6c     01 22 06 F5 | 	and	_var03, #1
02c70     11 23 62 C6 |  if_b	neg	_var03, _var03
02c74     02 22 66 F0 | 	shl	_var03, #2
02c78     0F 20 06 F6 | 	mov	_var02, #15
02c7c     11 21 62 F0 | 	shl	_var02, _var03
02c80     10 2D 22 F5 | 	andn	_var08, _var02
02c84                 | '     b:=b |(c<<((x//2)<<2))
02c84     2F 23 52 F6 | 	abs	_var03, arg01 wc
02c88     01 22 06 F5 | 	and	_var03, #1
02c8c     11 23 62 C6 |  if_b	neg	_var03, _var03
02c90     02 22 66 F0 | 	shl	_var03, #2
02c94     11 63 62 F0 | 	shl	arg03, _var03
02c98     31 2D 42 F5 | 	or	_var08, arg03
02c9c                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
02c9c     FD 1E 02 FB | 	rdlong	_var01, objptr
02ca0     90 FA 05 F1 | 	add	objptr, #144
02ca4     FD 20 02 FB | 	rdlong	_var02, objptr
02ca8     90 FA 85 F1 | 	sub	objptr, #144
02cac     02 20 66 F0 | 	shl	_var02, #2
02cb0     30 21 02 FD | 	qmul	_var02, arg02
02cb4     18 2A 62 FD | 	getqx	_var07
02cb8     15 1F 02 F1 | 	add	_var01, _var07
02cbc     01 5E 46 F0 | 	shr	arg01, #1
02cc0     2F 1F 02 F1 | 	add	_var01, arg01
02cc4     0F 2D 42 FC | 	wrbyte	_var08, _var01
02cc8                 | LR__0068
02cc8                 | _hng033rm_spin2_putpixel4_ret
02cc8     2D 00 64 FD | 	ret
02ccc                 | 
02ccc                 | ' 
02ccc                 | ' 
02ccc                 | ' pub putpixel8(x,y,c)
02ccc                 | _hng033rm_spin2_putpixel8
02ccc                 | ' 
02ccc                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02ccc     00 1E 06 F6 | 	mov	_var01, #0
02cd0     00 5E 5E F2 | 	cmps	arg01, #0 wcz
02cd4     01 1E 66 36 |  if_ae	neg	_var01, #1
02cd8     00 20 06 F6 | 	mov	_var02, #0
02cdc     90 FA 05 F1 | 	add	objptr, #144
02ce0     FD 22 02 FB | 	rdlong	_var03, objptr
02ce4     02 22 66 F0 | 	shl	_var03, #2
02ce8     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
02cec     01 20 66 C6 |  if_b	neg	_var02, #1
02cf0     10 1F 02 F5 | 	and	_var01, _var02
02cf4     00 24 06 F6 | 	mov	_var04, #0
02cf8     00 60 5E F2 | 	cmps	arg02, #0 wcz
02cfc     01 24 66 36 |  if_ae	neg	_var04, #1
02d00     12 1F 02 F5 | 	and	_var01, _var04
02d04     00 26 06 F6 | 	mov	_var05, #0
02d08     04 FA 05 F1 | 	add	objptr, #4
02d0c     FD 28 02 FB | 	rdlong	_var06, objptr
02d10     94 FA 85 F1 | 	sub	objptr, #148
02d14     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02d18     01 26 66 C6 |  if_b	neg	_var05, #1
02d1c     13 1F CA F7 | 	test	_var01, _var05 wz
02d20     28 00 90 AD |  if_e	jmp	#LR__0069
02d24                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02d24     FD 1E 02 FB | 	rdlong	_var01, objptr
02d28     90 FA 05 F1 | 	add	objptr, #144
02d2c     FD 20 02 FB | 	rdlong	_var02, objptr
02d30     90 FA 85 F1 | 	sub	objptr, #144
02d34     02 20 66 F0 | 	shl	_var02, #2
02d38     30 21 02 FD | 	qmul	_var02, arg02
02d3c     18 2A 62 FD | 	getqx	_var07
02d40     15 1F 02 F1 | 	add	_var01, _var07
02d44     2F 1F 02 F1 | 	add	_var01, arg01
02d48     0F 63 42 FC | 	wrbyte	arg03, _var01
02d4c                 | LR__0069
02d4c                 | _hng033rm_spin2_putpixel8_ret
02d4c     2D 00 64 FD | 	ret
02d50                 | 
02d50                 | ' 
02d50                 | ' '*************************************************************************
02d50                 | ' '                                                                        *
02d50                 | ' '  VBlank functions                                                      *
02d50                 | ' '                                                                        *
02d50                 | ' '*************************************************************************
02d50                 | ' 
02d50                 | ' pub waitvbl(amount) | i
02d50                 | _hng033rm_spin2_waitvbl
02d50     04 5A 05 F6 | 	mov	COUNT_, #4
02d54     B0 00 A0 FD | 	call	#pushregs_
02d58     2F 6D 02 F6 | 	mov	local01, arg01
02d5c                 | ' 
02d5c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
02d5c                 | ' 
02d5c                 | ' repeat i from 1 to amount
02d5c     01 6E 06 F6 | 	mov	local02, #1
02d60     01 6C 5E F2 | 	cmps	local01, #1 wcz
02d64     01 70 06 16 |  if_a	mov	local03, #1
02d68     01 70 66 E6 |  if_be	neg	local03, #1
02d6c     38 6D 02 F1 | 	add	local01, local03
02d70                 | LR__0070
02d70                 | '   repeat until vblank==0
02d70                 | LR__0071
02d70     40 FA 05 F1 | 	add	objptr, #64
02d74     FD 72 0A FB | 	rdlong	local04, objptr wz
02d78     40 FA 85 F1 | 	sub	objptr, #64
02d7c     0C 00 90 AD |  if_e	jmp	#LR__0072
02d80                 | '     waitus(100)
02d80     64 5E 06 F6 | 	mov	arg01, #100
02d84     CC 43 B0 FD | 	call	#__system___waitus
02d88     E4 FF 9F FD | 	jmp	#LR__0071
02d8c                 | LR__0072
02d8c                 | '   repeat until vblank==1
02d8c                 | LR__0073
02d8c     40 FA 05 F1 | 	add	objptr, #64
02d90     FD 72 02 FB | 	rdlong	local04, objptr
02d94     40 FA 85 F1 | 	sub	objptr, #64
02d98     01 72 0E F2 | 	cmp	local04, #1 wz
02d9c     0C 00 90 AD |  if_e	jmp	#LR__0074
02da0                 | '     waitus(100)
02da0     64 5E 06 F6 | 	mov	arg01, #100
02da4     AC 43 B0 FD | 	call	#__system___waitus
02da8     E0 FF 9F FD | 	jmp	#LR__0073
02dac                 | LR__0074
02dac     38 6F 02 F1 | 	add	local02, local03
02db0     36 6F 0A F2 | 	cmp	local02, local01 wz
02db4     B8 FF 9F 5D |  if_ne	jmp	#LR__0070
02db8     AF F0 03 F6 | 	mov	ptra, fp
02dbc     BA 00 A0 FD | 	call	#popregs_
02dc0                 | _hng033rm_spin2_waitvbl_ret
02dc0     2D 00 64 FD | 	ret
02dc4                 | 
02dc4                 | ' 
02dc4                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02dc4                 | ' 
02dc4                 | ' pub setbordercolor(r,g,b) | color
02dc4                 | _hng033rm_spin2_setbordercolor
02dc4                 | ' 
02dc4                 | ' color:=r<<24+g<<16+b<<8
02dc4     18 5E 66 F0 | 	shl	arg01, #24
02dc8     10 60 66 F0 | 	shl	arg02, #16
02dcc     30 5F 02 F1 | 	add	arg01, arg02
02dd0     08 62 66 F0 | 	shl	arg03, #8
02dd4     31 5F 02 F1 | 	add	arg01, arg03
02dd8                 | ' bordercolor:=color
02dd8     2C FA 05 F1 | 	add	objptr, #44
02ddc     FD 5E 62 FC | 	wrlong	arg01, objptr
02de0     2C FA 85 F1 | 	sub	objptr, #44
02de4                 | _hng033rm_spin2_setbordercolor_ret
02de4     2D 00 64 FD | 	ret
02de8                 | 
02de8                 | ' 
02de8                 | ' ''---------- Set color #c in palette to r,g,b
02de8                 | ' 
02de8                 | ' pub setcolor(c,r,g,b)  |cc
02de8                 | _hng033rm_spin2_setcolor
02de8                 | ' 
02de8                 | ' cc:=r<<24+g<<16+b<<8
02de8     18 60 66 F0 | 	shl	arg02, #24
02dec     10 62 66 F0 | 	shl	arg03, #16
02df0     31 61 02 F1 | 	add	arg02, arg03
02df4     08 64 66 F0 | 	shl	arg04, #8
02df8     32 61 02 F1 | 	add	arg02, arg04
02dfc                 | ' long[palette_ptr+4*c]:=cc
02dfc     18 FA 05 F1 | 	add	objptr, #24
02e00     FD 1E 02 FB | 	rdlong	_var01, objptr
02e04     18 FA 85 F1 | 	sub	objptr, #24
02e08     02 5E 66 F0 | 	shl	arg01, #2
02e0c     2F 1F 02 F1 | 	add	_var01, arg01
02e10     0F 61 62 FC | 	wrlong	arg02, _var01
02e14                 | _hng033rm_spin2_setcolor_ret
02e14     2D 00 64 FD | 	ret
02e18                 | 
02e18                 | ' 
02e18                 | ' 
02e18                 | ' '*************************************************************************
02e18                 | ' '                                                                        *
02e18                 | ' '  Text functions                                                        *
02e18                 | ' '                                                                        *
02e18                 | ' '*************************************************************************
02e18                 | ' 
02e18                 | ' ''---------- Clear the screen, set its foreground/background color
02e18                 | ' 
02e18                 | ' pub cls(fc,bc)   :c
02e18                 | _hng033rm_spin2_cls
02e18     06 5A 05 F6 | 	mov	COUNT_, #6
02e1c     B0 00 A0 FD | 	call	#pushregs_
02e20     2F 6D 02 F6 | 	mov	local01, arg01
02e24     30 6F 02 F6 | 	mov	local02, arg02
02e28                 | ' 
02e28                 | ' if (graphmode<512)
02e28     C4 FA 05 F1 | 	add	objptr, #196
02e2c     FD 70 02 FB | 	rdlong	local03, objptr
02e30     C4 FA 85 F1 | 	sub	objptr, #196
02e34     01 00 00 FF 
02e38     00 70 5E F2 | 	cmps	local03, ##512 wcz
02e3c     34 00 90 3D |  if_ae	jmp	#LR__0075
02e40                 | '   c:=fc<<24+bc<<16+$20
02e40     36 73 02 F6 | 	mov	local04, local01
02e44     18 72 66 F0 | 	shl	local04, #24
02e48     37 75 02 F6 | 	mov	local05, local02
02e4c     10 74 66 F0 | 	shl	local05, #16
02e50     3A 73 02 F1 | 	add	local04, local05
02e54     20 72 06 F1 | 	add	local04, #32
02e58                 | '   longfill(buf_ptr,c,buflen)
02e58     FD 5E 02 FB | 	rdlong	arg01, objptr
02e5c     30 FA 05 F1 | 	add	objptr, #48
02e60     FD 62 02 FB | 	rdlong	arg03, objptr
02e64     30 FA 85 F1 | 	sub	objptr, #48
02e68     39 61 02 F6 | 	mov	arg02, local04
02e6c     A8 00 A0 FD | 	call	#\builtin_longfill_
02e70                 | ' else
02e70     AC 00 90 FD | 	jmp	#LR__0081
02e74                 | LR__0075
02e74                 | '   if (graphmode & 48) ==48
02e74     C4 FA 05 F1 | 	add	objptr, #196
02e78     FD 70 02 FB | 	rdlong	local03, objptr
02e7c     C4 FA 85 F1 | 	sub	objptr, #196
02e80     30 70 06 F5 | 	and	local03, #48
02e84     30 70 0E F2 | 	cmp	local03, #48 wz
02e88                 | '     c:=bc
02e88     37 73 02 A6 |  if_e	mov	local04, local02
02e8c     74 00 90 AD |  if_e	jmp	#LR__0080
02e90                 | '   elseif (graphmode & 48) ==32
02e90     C4 FA 05 F1 | 	add	objptr, #196
02e94     FD 70 02 FB | 	rdlong	local03, objptr
02e98     C4 FA 85 F1 | 	sub	objptr, #196
02e9c     30 70 06 F5 | 	and	local03, #48
02ea0     20 70 0E F2 | 	cmp	local03, #32 wz
02ea4     10 00 90 5D |  if_ne	jmp	#LR__0076
02ea8                 | '     c:=bc<<4+bc
02ea8     37 73 02 F6 | 	mov	local04, local02
02eac     04 72 66 F0 | 	shl	local04, #4
02eb0     37 73 02 F1 | 	add	local04, local02
02eb4     4C 00 90 FD | 	jmp	#LR__0079
02eb8                 | LR__0076
02eb8                 | '   elseif (graphmode & 48) ==16
02eb8     C4 FA 05 F1 | 	add	objptr, #196
02ebc     FD 70 02 FB | 	rdlong	local03, objptr
02ec0     C4 FA 85 F1 | 	sub	objptr, #196
02ec4     30 70 06 F5 | 	and	local03, #48
02ec8     10 70 0E F2 | 	cmp	local03, #16 wz
02ecc     28 00 90 5D |  if_ne	jmp	#LR__0077
02ed0                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02ed0     37 73 02 F6 | 	mov	local04, local02
02ed4     06 72 66 F0 | 	shl	local04, #6
02ed8     37 75 02 F6 | 	mov	local05, local02
02edc     04 74 66 F0 | 	shl	local05, #4
02ee0     3A 73 02 F1 | 	add	local04, local05
02ee4     37 77 02 F6 | 	mov	local06, local02
02ee8     02 76 66 F0 | 	shl	local06, #2
02eec     3B 73 02 F1 | 	add	local04, local06
02ef0     37 73 02 F1 | 	add	local04, local02
02ef4                 | '   else
02ef4     0C 00 90 FD | 	jmp	#LR__0078
02ef8                 | LR__0077
02ef8                 | '     if bc==1
02ef8     01 6E 0E F2 | 	cmp	local02, #1 wz
02efc                 | '       c:=255
02efc     FF 72 06 A6 |  if_e	mov	local04, #255
02f00                 | '     else
02f00                 | '       c:=0
02f00     00 72 06 56 |  if_ne	mov	local04, #0
02f04                 | LR__0078
02f04                 | LR__0079
02f04                 | LR__0080
02f04                 | '   bytefill(buf_ptr,c,buflen*4)
02f04     FD 5E 02 FB | 	rdlong	arg01, objptr
02f08     30 FA 05 F1 | 	add	objptr, #48
02f0c     FD 62 02 FB | 	rdlong	arg03, objptr
02f10     30 FA 85 F1 | 	sub	objptr, #48
02f14     02 62 66 F0 | 	shl	arg03, #2
02f18     39 61 02 F6 | 	mov	arg02, local04
02f1c     A0 00 A0 FD | 	call	#\builtin_bytefill_
02f20                 | LR__0081
02f20                 | ' setwritecolors(fc,bc)
02f20                 | ' 
02f20                 | ' 
02f20                 | ' write_color:=ff
02f20     38 FA 05 F1 | 	add	objptr, #56
02f24     FD 6C 62 FC | 	wrlong	local01, objptr
02f28                 | ' write_background:=bb
02f28     04 FA 05 F1 | 	add	objptr, #4
02f2c     FD 6E 62 FC | 	wrlong	local02, objptr
02f30                 | ' cursor_x:=0
02f30     08 FA 85 F1 | 	sub	objptr, #8
02f34     FD 00 48 FC | 	wrbyte	#0, objptr
02f38                 | ' cursor_y:=0
02f38     01 FA 05 F1 | 	add	objptr, #1
02f3c     FD 00 48 FC | 	wrbyte	#0, objptr
02f40     35 FA 85 F1 | 	sub	objptr, #53
02f44     39 19 02 F6 | 	mov	result1, local04
02f48     AF F0 03 F6 | 	mov	ptra, fp
02f4c     BA 00 A0 FD | 	call	#popregs_
02f50                 | _hng033rm_spin2_cls_ret
02f50     2D 00 64 FD | 	ret
02f54                 | 
02f54                 | ' 
02f54                 | ' ''--------- Output a string at position x,y without changing colors
02f54                 | ' 
02f54                 | ' pub outtextxy(x,y,text) | iii
02f54                 | _hng033rm_spin2_outtextxy
02f54     0F 5A 05 F6 | 	mov	COUNT_, #15
02f58     B0 00 A0 FD | 	call	#pushregs_
02f5c     2F 6D 02 F6 | 	mov	local01, arg01
02f60                 | ' 
02f60                 | ' repeat iii from 0 to strsize(text)-1
02f60     00 6E 06 F6 | 	mov	local02, #0
02f64     31 5F 02 F6 | 	mov	arg01, arg03
02f68     00 70 06 F6 | 	mov	local03, #0
02f6c     A0 D0 9F FE | 	loc	pa,	#(@LR__0083-@LR__0082)
02f70     93 00 A0 FD | 	call	#FCACHE_LOAD_
02f74                 | LR__0082
02f74     2F 73 CA FA | 	rdbyte	local04, arg01 wz
02f78     01 70 06 51 |  if_ne	add	local03, #1
02f7c     01 5E 06 51 |  if_ne	add	arg01, #1
02f80     F0 FF 9F 5D |  if_ne	jmp	#LR__0082
02f84                 | LR__0083
02f84     38 19 02 F6 | 	mov	result1, local03
02f88     0C 75 02 F6 | 	mov	local05, result1
02f8c     01 74 86 F1 | 	sub	local05, #1
02f90     00 74 5E F2 | 	cmps	local05, #0 wcz
02f94     01 76 06 16 |  if_a	mov	local06, #1
02f98     01 76 66 E6 |  if_be	neg	local06, #1
02f9c     3B 75 02 F1 | 	add	local05, local06
02fa0     D4 D0 9F FE | 	loc	pa,	#(@LR__0085-@LR__0084)
02fa4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02fa8                 | LR__0084
02fa8                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
02fa8     FD 78 02 FB | 	rdlong	local07, objptr
02fac     90 FA 05 F1 | 	add	objptr, #144
02fb0     FD 7A 02 FB | 	rdlong	local08, objptr
02fb4     90 FA 85 F1 | 	sub	objptr, #144
02fb8     30 7B 02 FD | 	qmul	local08, arg02
02fbc     18 7C 62 FD | 	getqx	local09
02fc0     36 7D 02 F1 | 	add	local09, local01
02fc4     37 7D 02 F1 | 	add	local09, local02
02fc8     02 7C 66 F0 | 	shl	local09, #2
02fcc     3E 79 02 F1 | 	add	local07, local09
02fd0     3C 7F 02 FB | 	rdlong	local10, local07
02fd4     FF 7E 26 F5 | 	andn	local10, #255
02fd8     31 81 02 F6 | 	mov	local11, arg03
02fdc     37 81 02 F1 | 	add	local11, local02
02fe0     40 83 C2 FA | 	rdbyte	local12, local11
02fe4     41 7F 42 F5 | 	or	local10, local12
02fe8     FD 84 02 FB | 	rdlong	local13, objptr
02fec     90 FA 05 F1 | 	add	objptr, #144
02ff0     FD 86 02 FB | 	rdlong	local14, objptr
02ff4     90 FA 85 F1 | 	sub	objptr, #144
02ff8     30 87 02 FD | 	qmul	local14, arg02
02ffc     18 88 62 FD | 	getqx	local15
03000     36 89 02 F1 | 	add	local15, local01
03004     37 89 02 F1 | 	add	local15, local02
03008     02 88 66 F0 | 	shl	local15, #2
0300c     44 85 02 F1 | 	add	local13, local15
03010     42 7F 62 FC | 	wrlong	local10, local13
03014     3B 6F 02 F1 | 	add	local02, local06
03018     3A 6F 0A F2 | 	cmp	local02, local05 wz
0301c     88 FF 9F 5D |  if_ne	jmp	#LR__0084
03020                 | LR__0085
03020     AF F0 03 F6 | 	mov	ptra, fp
03024     BA 00 A0 FD | 	call	#popregs_
03028                 | _hng033rm_spin2_outtextxy_ret
03028     2D 00 64 FD | 	ret
0302c                 | 
0302c                 | ' 
0302c                 | ' ''---------- Output a char at the cursor position, move the cursor
0302c                 | ' 
0302c                 | ' pub putchar(achar) | c,x,y
0302c                 | _hng033rm_spin2_putchar
0302c     0F 5A 05 F6 | 	mov	COUNT_, #15
03030     B0 00 A0 FD | 	call	#pushregs_
03034     2F 6D 02 F6 | 	mov	local01, arg01
03038                 | ' 
03038                 | ' if achar==10
03038     0A 6C 0E F2 | 	cmp	local01, #10 wz
0303c     08 00 90 5D |  if_ne	jmp	#LR__0086
03040                 | '   crlf()
03040     34 04 B0 FD | 	call	#_hng033rm_spin2_crlf
03044                 | ' else  
03044     64 01 90 FD | 	jmp	#LR__0089
03048                 | LR__0086
03048                 | '   x:=cursor_x
03048     34 FA 05 F1 | 	add	objptr, #52
0304c     FD 6E C2 FA | 	rdbyte	local02, objptr
03050                 | '   y:=cursor_y
03050     01 FA 05 F1 | 	add	objptr, #1
03054     FD 70 C2 FA | 	rdbyte	local03, objptr
03058                 | '   c:=write_color<<24+write_background<<16
03058     03 FA 05 F1 | 	add	objptr, #3
0305c     FD 72 02 FB | 	rdlong	local04, objptr
03060     18 72 66 F0 | 	shl	local04, #24
03064     04 FA 05 F1 | 	add	objptr, #4
03068     FD 74 02 FB | 	rdlong	local05, objptr
0306c     3C FA 85 F1 | 	sub	objptr, #60
03070     10 74 66 F0 | 	shl	local05, #16
03074     3A 73 02 F1 | 	add	local04, local05
03078                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
03078     FD 76 02 FB | 	rdlong	local06, objptr
0307c     90 FA 05 F1 | 	add	objptr, #144
03080     FD 78 02 FB | 	rdlong	local07, objptr
03084     90 FA 85 F1 | 	sub	objptr, #144
03088     38 79 02 FD | 	qmul	local07, local03
0308c     18 7A 62 FD | 	getqx	local08
03090     37 7B 02 F1 | 	add	local08, local02
03094     02 7A 66 F0 | 	shl	local08, #2
03098     3D 77 02 F1 | 	add	local06, local08
0309c     3B 7D 02 FB | 	rdlong	local09, local06
030a0     7F 00 00 FF 
030a4     FF 7D 06 F5 | 	and	local09, ##65535
030a8     39 7D 42 F5 | 	or	local09, local04
030ac     FD 7E 02 FB | 	rdlong	local10, objptr
030b0     90 FA 05 F1 | 	add	objptr, #144
030b4     FD 80 02 FB | 	rdlong	local11, objptr
030b8     90 FA 85 F1 | 	sub	objptr, #144
030bc     38 81 02 FD | 	qmul	local11, local03
030c0     18 82 62 FD | 	getqx	local12
030c4     37 83 02 F1 | 	add	local12, local02
030c8     02 82 66 F0 | 	shl	local12, #2
030cc     41 7F 02 F1 | 	add	local10, local12
030d0     3F 7D 62 FC | 	wrlong	local09, local10
030d4                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
030d4     FD 76 02 FB | 	rdlong	local06, objptr
030d8     90 FA 05 F1 | 	add	objptr, #144
030dc     FD 78 02 FB | 	rdlong	local07, objptr
030e0     90 FA 85 F1 | 	sub	objptr, #144
030e4     38 79 02 FD | 	qmul	local07, local03
030e8     18 7A 62 FD | 	getqx	local08
030ec     37 7B 02 F1 | 	add	local08, local02
030f0     02 7A 66 F0 | 	shl	local08, #2
030f4     3D 77 02 F1 | 	add	local06, local08
030f8     3B 7D 02 FB | 	rdlong	local09, local06
030fc     FF 7C 26 F5 | 	andn	local09, #255
03100     36 7F 02 F6 | 	mov	local10, local01
03104     FF 7E 06 F5 | 	and	local10, #255
03108     3F 7D 42 F5 | 	or	local09, local10
0310c     FD 84 02 FB | 	rdlong	local13, objptr
03110     90 FA 05 F1 | 	add	objptr, #144
03114     FD 86 02 FB | 	rdlong	local14, objptr
03118     38 87 02 FD | 	qmul	local14, local03
0311c     18 88 62 FD | 	getqx	local15
03120     37 89 02 F1 | 	add	local15, local02
03124     02 88 66 F0 | 	shl	local15, #2
03128     44 85 02 F1 | 	add	local13, local15
0312c     42 7D 62 FC | 	wrlong	local09, local13
03130                 | '   cursor_x+=1
03130     5C FA 85 F1 | 	sub	objptr, #92
03134     FD 7C C2 FA | 	rdbyte	local09, objptr
03138     01 7C 06 F1 | 	add	local09, #1
0313c     FD 7C 42 FC | 	wrbyte	local09, objptr
03140                 | '   if cursor_x==cpl
03140     FD 7C C2 FA | 	rdbyte	local09, objptr
03144     5C FA 05 F1 | 	add	objptr, #92
03148     FD 74 02 FB | 	rdlong	local05, objptr
0314c     90 FA 85 F1 | 	sub	objptr, #144
03150     3A 7D 0A F2 | 	cmp	local09, local05 wz
03154     54 00 90 5D |  if_ne	jmp	#LR__0088
03158                 | '     cursor_x:=0
03158     34 FA 05 F1 | 	add	objptr, #52
0315c     FD 00 48 FC | 	wrbyte	#0, objptr
03160                 | '     cursor_y+=1
03160     01 FA 05 F1 | 	add	objptr, #1
03164     FD 7C C2 FA | 	rdbyte	local09, objptr
03168     01 7C 06 F1 | 	add	local09, #1
0316c     FD 7C 42 FC | 	wrbyte	local09, objptr
03170                 | '     if cursor_y>lines-1
03170     5F FA 05 F1 | 	add	objptr, #95
03174     FD 7C 02 FB | 	rdlong	local09, objptr
03178     01 7C 86 F1 | 	sub	local09, #1
0317c     5F FA 85 F1 | 	sub	objptr, #95
03180     FD 74 C2 FA | 	rdbyte	local05, objptr
03184     35 FA 85 F1 | 	sub	objptr, #53
03188     3E 75 5A F2 | 	cmps	local05, local09 wcz
0318c     1C 00 90 ED |  if_be	jmp	#LR__0087
03190                 | '       scrollup()
03190     10 02 B0 FD | 	call	#_hng033rm_spin2_scrollup
03194                 | '       cursor_y:=lines-1
03194     94 FA 05 F1 | 	add	objptr, #148
03198     FD 7C 02 FB | 	rdlong	local09, objptr
0319c     01 7C 86 F1 | 	sub	local09, #1
031a0     5F FA 85 F1 | 	sub	objptr, #95
031a4     FD 7C 42 FC | 	wrbyte	local09, objptr
031a8     35 FA 85 F1 | 	sub	objptr, #53
031ac                 | LR__0087
031ac                 | LR__0088
031ac                 | LR__0089
031ac     AF F0 03 F6 | 	mov	ptra, fp
031b0     BA 00 A0 FD | 	call	#popregs_
031b4                 | _hng033rm_spin2_putchar_ret
031b4     2D 00 64 FD | 	ret
031b8                 | 
031b8                 | ' 
031b8                 | ' ''--------- Output a string at the cursor position, move the cursor
031b8                 | ' 
031b8                 | ' pub write(text) | iii,c,ncx,ncy
031b8                 | _hng033rm_spin2_write
031b8     16 5A 05 F6 | 	mov	COUNT_, #22
031bc     B0 00 A0 FD | 	call	#pushregs_
031c0     2F 6D 02 F6 | 	mov	local01, arg01
031c4                 | ' 
031c4                 | ' c:=write_color<<24+write_background<<16
031c4     38 FA 05 F1 | 	add	objptr, #56
031c8     FD 6E 02 FB | 	rdlong	local02, objptr
031cc     18 6E 66 F0 | 	shl	local02, #24
031d0     04 FA 05 F1 | 	add	objptr, #4
031d4     FD 70 02 FB | 	rdlong	local03, objptr
031d8     10 70 66 F0 | 	shl	local03, #16
031dc     38 6F 02 F1 | 	add	local02, local03
031e0                 | ' 'debug(uhex_long(write_color))
031e0                 | ' ncy:=cursor_y
031e0     07 FA 85 F1 | 	sub	objptr, #7
031e4     FD 72 C2 FA | 	rdbyte	local04, objptr
031e8                 | ' ncx:=cursor_x+strsize(text)
031e8     01 FA 85 F1 | 	sub	objptr, #1
031ec     FD 74 C2 FA | 	rdbyte	local05, objptr
031f0     34 FA 85 F1 | 	sub	objptr, #52
031f4     36 5F 02 F6 | 	mov	arg01, local01
031f8     00 76 06 F6 | 	mov	local06, #0
031fc     10 CE 9F FE | 	loc	pa,	#(@LR__0091-@LR__0090)
03200     93 00 A0 FD | 	call	#FCACHE_LOAD_
03204                 | LR__0090
03204     2F 79 CA FA | 	rdbyte	local07, arg01 wz
03208     01 76 06 51 |  if_ne	add	local06, #1
0320c     01 5E 06 51 |  if_ne	add	arg01, #1
03210     F0 FF 9F 5D |  if_ne	jmp	#LR__0090
03214                 | LR__0091
03214     3B 19 02 F6 | 	mov	result1, local06
03218     3B 75 02 F1 | 	add	local05, local06
0321c     3A 7B 02 F6 | 	mov	local08, local05
03220     0C CE 9F FE | 	loc	pa,	#(@LR__0093-@LR__0092)
03224     93 00 A0 FD | 	call	#FCACHE_LOAD_
03228                 | ' repeat while ncx>cpl-1
03228                 | LR__0092
03228     90 FA 05 F1 | 	add	objptr, #144
0322c     FD 74 02 FB | 	rdlong	local05, objptr
03230     90 FA 85 F1 | 	sub	objptr, #144
03234     01 74 86 F1 | 	sub	local05, #1
03238     3A 7B 5A F2 | 	cmps	local08, local05 wcz
0323c     18 00 90 ED |  if_be	jmp	#LR__0094
03240                 | '   ncx-=cpl
03240     90 FA 05 F1 | 	add	objptr, #144
03244     FD 7C 02 FB | 	rdlong	local09, objptr
03248     90 FA 85 F1 | 	sub	objptr, #144
0324c     3E 7B 82 F1 | 	sub	local08, local09
03250                 | '   ncy+=1
03250     01 72 06 F1 | 	add	local04, #1
03254     D0 FF 9F FD | 	jmp	#LR__0092
03258                 | LR__0093
03258                 | LR__0094
03258                 | ' repeat while ncy>lines-1
03258                 | LR__0095
03258     94 FA 05 F1 | 	add	objptr, #148
0325c     FD 74 02 FB | 	rdlong	local05, objptr
03260     94 FA 85 F1 | 	sub	objptr, #148
03264     01 74 86 F1 | 	sub	local05, #1
03268     3A 73 5A F2 | 	cmps	local04, local05 wcz
0326c     20 00 90 ED |  if_be	jmp	#LR__0096
03270                 | '   ncy-=1
03270     01 72 86 F1 | 	sub	local04, #1
03274                 | '   scrollup()
03274     2C 01 B0 FD | 	call	#_hng033rm_spin2_scrollup
03278                 | '   cursor_y-=1
03278     35 FA 05 F1 | 	add	objptr, #53
0327c     FD 74 C2 FA | 	rdbyte	local05, objptr
03280     01 74 86 F1 | 	sub	local05, #1
03284     FD 74 42 FC | 	wrbyte	local05, objptr
03288     35 FA 85 F1 | 	sub	objptr, #53
0328c     C8 FF 9F FD | 	jmp	#LR__0095
03290                 | LR__0096
03290                 | ' 
03290                 | ' repeat iii from 0 to strsize(text)-1
03290     00 7E 06 F6 | 	mov	local10, #0
03294     36 5F 02 F6 | 	mov	arg01, local01
03298     00 76 06 F6 | 	mov	local06, #0
0329c     70 CD 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
032a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
032a4                 | LR__0097
032a4     2F 79 CA FA | 	rdbyte	local07, arg01 wz
032a8     01 76 06 51 |  if_ne	add	local06, #1
032ac     01 5E 06 51 |  if_ne	add	arg01, #1
032b0     F0 FF 9F 5D |  if_ne	jmp	#LR__0097
032b4                 | LR__0098
032b4     3B 19 02 F6 | 	mov	result1, local06
032b8     0C 81 02 F6 | 	mov	local11, result1
032bc     01 80 86 F1 | 	sub	local11, #1
032c0     00 80 5E F2 | 	cmps	local11, #0 wcz
032c4     01 70 06 16 |  if_a	mov	local03, #1
032c8     01 70 66 E6 |  if_be	neg	local03, #1
032cc     38 81 02 F1 | 	add	local11, local03
032d0     BC CD 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
032d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
032d8                 | LR__0099
032d8                 | ' 
032d8                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
032d8     FD 82 02 FB | 	rdlong	local12, objptr
032dc     90 FA 05 F1 | 	add	objptr, #144
032e0     FD 84 02 FB | 	rdlong	local13, objptr
032e4     5B FA 85 F1 | 	sub	objptr, #91
032e8     FD 86 C2 FA | 	rdbyte	local14, objptr
032ec     43 85 02 FD | 	qmul	local13, local14
032f0     18 88 62 FD | 	getqx	local15
032f4     01 FA 85 F1 | 	sub	objptr, #1
032f8     FD 8A C2 FA | 	rdbyte	local16, objptr
032fc     34 FA 85 F1 | 	sub	objptr, #52
03300     45 89 02 F1 | 	add	local15, local16
03304     3F 89 02 F1 | 	add	local15, local10
03308     02 88 66 F0 | 	shl	local15, #2
0330c     44 83 02 F1 | 	add	local12, local15
03310     41 8D 02 FB | 	rdlong	local17, local12
03314     7F 00 00 FF 
03318     FF 8D 06 F5 | 	and	local17, ##65535
0331c     37 8D 42 F5 | 	or	local17, local02
03320     FD 8E 02 FB | 	rdlong	local18, objptr
03324     90 FA 05 F1 | 	add	objptr, #144
03328     FD 90 02 FB | 	rdlong	local19, objptr
0332c     5B FA 85 F1 | 	sub	objptr, #91
03330     FD 92 C2 FA | 	rdbyte	local20, objptr
03334     49 91 02 FD | 	qmul	local19, local20
03338     18 94 62 FD | 	getqx	local21
0333c     01 FA 85 F1 | 	sub	objptr, #1
03340     FD 96 C2 FA | 	rdbyte	local22, objptr
03344     34 FA 85 F1 | 	sub	objptr, #52
03348     4B 95 02 F1 | 	add	local21, local22
0334c     3F 95 02 F1 | 	add	local21, local10
03350     02 94 66 F0 | 	shl	local21, #2
03354     4A 8F 02 F1 | 	add	local18, local21
03358     47 8D 62 FC | 	wrlong	local17, local18
0335c     38 7F 02 F1 | 	add	local10, local03
03360     40 7F 0A F2 | 	cmp	local10, local11 wz
03364     70 FF 9F 5D |  if_ne	jmp	#LR__0099
03368                 | LR__0100
03368                 | ' 
03368                 | ' outtextxy(cursor_x,cursor_y,text)
03368     34 FA 05 F1 | 	add	objptr, #52
0336c     FD 5E C2 FA | 	rdbyte	arg01, objptr
03370     01 FA 05 F1 | 	add	objptr, #1
03374     FD 60 C2 FA | 	rdbyte	arg02, objptr
03378     35 FA 85 F1 | 	sub	objptr, #53
0337c     36 63 02 F6 | 	mov	arg03, local01
03380     D0 FB BF FD | 	call	#_hng033rm_spin2_outtextxy
03384                 | ' 
03384                 | ' cursor_x:=ncx
03384     34 FA 05 F1 | 	add	objptr, #52
03388     FD 7A 42 FC | 	wrbyte	local08, objptr
0338c                 | ' cursor_y:=ncy
0338c     01 FA 05 F1 | 	add	objptr, #1
03390     FD 72 42 FC | 	wrbyte	local04, objptr
03394     35 FA 85 F1 | 	sub	objptr, #53
03398     AF F0 03 F6 | 	mov	ptra, fp
0339c     BA 00 A0 FD | 	call	#popregs_
033a0                 | _hng033rm_spin2_write_ret
033a0     2D 00 64 FD | 	ret
033a4                 | 
033a4                 | ' 
033a4                 | ' ''-----------  Scroll the screen one line up
033a4                 | ' 
033a4                 | ' pub scrollup() | i
033a4                 | _hng033rm_spin2_scrollup
033a4     0D 5A 05 F6 | 	mov	COUNT_, #13
033a8     B0 00 A0 FD | 	call	#pushregs_
033ac                 | ' 
033ac                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
033ac     FD 5E 02 FB | 	rdlong	arg01, objptr
033b0     2F 61 02 F6 | 	mov	arg02, arg01
033b4     90 FA 05 F1 | 	add	objptr, #144
033b8     FD 6C 02 FB | 	rdlong	local01, objptr
033bc     02 6C 66 F0 | 	shl	local01, #2
033c0     36 61 02 F1 | 	add	arg02, local01
033c4     60 FA 85 F1 | 	sub	objptr, #96
033c8     FD 62 02 FB | 	rdlong	arg03, objptr
033cc     60 FA 05 F1 | 	add	objptr, #96
033d0     FD 6E 02 FB | 	rdlong	local02, objptr
033d4     90 FA 85 F1 | 	sub	objptr, #144
033d8     37 63 82 F1 | 	sub	arg03, local02
033dc     4C 3A B0 FD | 	call	#__system__longmove
033e0                 | ' repeat i from buflen-cpl to buflen-1
033e0     30 FA 05 F1 | 	add	objptr, #48
033e4     FD 70 02 FB | 	rdlong	local03, objptr
033e8     60 FA 05 F1 | 	add	objptr, #96
033ec     FD 72 02 FB | 	rdlong	local04, objptr
033f0     39 71 82 F1 | 	sub	local03, local04
033f4     60 FA 85 F1 | 	sub	objptr, #96
033f8     FD 74 02 FB | 	rdlong	local05, objptr
033fc     01 74 86 F1 | 	sub	local05, #1
03400     FD 76 02 FB | 	rdlong	local06, objptr
03404     60 FA 05 F1 | 	add	objptr, #96
03408     FD 78 02 FB | 	rdlong	local07, objptr
0340c     90 FA 85 F1 | 	sub	objptr, #144
03410     3C 77 82 F1 | 	sub	local06, local07
03414     3B 75 5A F2 | 	cmps	local05, local06 wcz
03418     01 7A 06 16 |  if_a	mov	local08, #1
0341c     01 7A 66 E6 |  if_be	neg	local08, #1
03420     3D 75 02 F1 | 	add	local05, local08
03424     18 CC 9F FE | 	loc	pa,	#(@LR__0102-@LR__0101)
03428     93 00 A0 FD | 	call	#FCACHE_LOAD_
0342c                 | LR__0101
0342c                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
0342c     FD 7C 02 FB | 	rdlong	local09, objptr
03430     38 7F 02 F6 | 	mov	local10, local03
03434     02 7E 66 F0 | 	shl	local10, #2
03438     3F 7D 02 F1 | 	add	local09, local10
0343c     3E 81 02 FB | 	rdlong	local11, local09
03440     80 FF 7F FF 
03444     00 80 06 F5 | 	and	local11, ##-65536
03448     20 80 46 F5 | 	or	local11, #32
0344c     FD 82 02 FB | 	rdlong	local12, objptr
03450     38 85 02 F6 | 	mov	local13, local03
03454     02 84 66 F0 | 	shl	local13, #2
03458     42 83 02 F1 | 	add	local12, local13
0345c     41 81 62 FC | 	wrlong	local11, local12
03460     3D 71 02 F1 | 	add	local03, local08
03464     3A 71 0A F2 | 	cmp	local03, local05 wz
03468     C0 FF 9F 5D |  if_ne	jmp	#LR__0101
0346c                 | LR__0102
0346c     AF F0 03 F6 | 	mov	ptra, fp
03470     BA 00 A0 FD | 	call	#popregs_
03474                 | _hng033rm_spin2_scrollup_ret
03474     2D 00 64 FD | 	ret
03478                 | 
03478                 | ' 
03478                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed
03478                 | ' 
03478                 | ' pub crlf()
03478                 | _hng033rm_spin2_crlf
03478     02 5A 05 F6 | 	mov	COUNT_, #2
0347c     B0 00 A0 FD | 	call	#pushregs_
03480                 | ' 
03480                 | ' cursor_x:=0
03480     34 FA 05 F1 | 	add	objptr, #52
03484     FD 00 48 FC | 	wrbyte	#0, objptr
03488                 | ' cursor_y+=1
03488     01 FA 05 F1 | 	add	objptr, #1
0348c     FD 6C C2 FA | 	rdbyte	local01, objptr
03490     01 6C 06 F1 | 	add	local01, #1
03494     FD 6C 42 FC | 	wrbyte	local01, objptr
03498                 | ' if cursor_y>lines-1
03498     5F FA 05 F1 | 	add	objptr, #95
0349c     FD 6C 02 FB | 	rdlong	local01, objptr
034a0     01 6C 86 F1 | 	sub	local01, #1
034a4     5F FA 85 F1 | 	sub	objptr, #95
034a8     FD 6E C2 FA | 	rdbyte	local02, objptr
034ac     35 FA 85 F1 | 	sub	objptr, #53
034b0     36 6F 5A F2 | 	cmps	local02, local01 wcz
034b4     1C 00 90 ED |  if_be	jmp	#LR__0103
034b8                 | '   scrollup()
034b8     E8 FE BF FD | 	call	#_hng033rm_spin2_scrollup
034bc                 | '   cursor_y:=lines-1
034bc     94 FA 05 F1 | 	add	objptr, #148
034c0     FD 6C 02 FB | 	rdlong	local01, objptr
034c4     01 6C 86 F1 | 	sub	local01, #1
034c8     5F FA 85 F1 | 	sub	objptr, #95
034cc     FD 6C 42 FC | 	wrbyte	local01, objptr
034d0     35 FA 85 F1 | 	sub	objptr, #53
034d4                 | LR__0103
034d4     AF F0 03 F6 | 	mov	ptra, fp
034d8     BA 00 A0 FD | 	call	#popregs_
034dc                 | _hng033rm_spin2_crlf_ret
034dc     2D 00 64 FD | 	ret
034e0                 | 
034e0                 | ' 
034e0                 | ' 
034e0                 | ' 
034e0                 | ' pub inttostr2(i,d):result |q,pos,k,j
034e0                 | _hng033rm_spin2_inttostr2
034e0                 | ' 
034e0                 | ' j:=i
034e0                 | ' pos:=d-1
034e0     30 1F 02 F6 | 	mov	_var01, arg02
034e4     01 1E 86 F1 | 	sub	_var01, #1
034e8                 | ' k:=0
034e8                 | ' 
034e8                 | ' n_string[d]:=0
034e8     30 21 02 F6 | 	mov	_var02, arg02
034ec     44 FA 05 F1 | 	add	objptr, #68
034f0     FD 22 02 F6 | 	mov	_var03, objptr
034f4     FD 20 02 F1 | 	add	_var02, objptr
034f8     10 01 48 FC | 	wrbyte	#0, _var02
034fc                 | ' repeat k from 0 to d-1
034fc     00 24 06 F6 | 	mov	_var04, #0
03500     01 60 86 F1 | 	sub	arg02, #1
03504     30 27 02 F6 | 	mov	_var05, arg02
03508     00 26 5E F2 | 	cmps	_var05, #0 wcz
0350c     44 FA 85 F1 | 	sub	objptr, #68
03510     01 22 06 16 |  if_a	mov	_var03, #1
03514     01 22 66 E6 |  if_be	neg	_var03, #1
03518     11 27 02 F1 | 	add	_var05, _var03
0351c     00 CB 9F FE | 	loc	pa,	#(@LR__0105-@LR__0104)
03520     93 00 A0 FD | 	call	#FCACHE_LOAD_
03524                 | LR__0104
03524                 | '   n_string[k]:=48
03524     12 29 02 F6 | 	mov	_var06, _var04
03528     44 FA 05 F1 | 	add	objptr, #68
0352c     FD 28 02 F1 | 	add	_var06, objptr
03530     14 61 48 FC | 	wrbyte	#48, _var06
03534     11 25 02 F1 | 	add	_var04, _var03
03538     13 25 0A F2 | 	cmp	_var04, _var05 wz
0353c     44 FA 85 F1 | 	sub	objptr, #68
03540     E0 FF 9F 5D |  if_ne	jmp	#LR__0104
03544                 | LR__0105
03544                 | ' 
03544                 | ' if (j<>0)
03544     00 5E 0E F2 | 	cmp	arg01, #0 wz
03548     40 00 90 AD |  if_e	jmp	#LR__0108
0354c                 | ' 
0354c                 | '   repeat while (pos>-1)
0354c                 | LR__0106
0354c     FF FF 7F FF 
03550     FF 1F 5E F2 | 	cmps	_var01, ##-1 wcz
03554     34 00 90 ED |  if_be	jmp	#LR__0107
03558                 | '     q:=j+//10
03558     2F 99 02 F6 | 	mov	muldiva_, arg01
0355c     0A 9A 06 F6 | 	mov	muldivb_, #10
03560     C2 00 A0 FD | 	call	#unsdivide_
03564                 | '     q:=48+q
03564     30 2A 06 F6 | 	mov	_var07, #48
03568     4C 2B 02 F1 | 	add	_var07, muldiva_
0356c                 | '     n_string[pos]:=q
0356c     0F 61 02 F6 | 	mov	arg02, _var01
03570     44 FA 05 F1 | 	add	objptr, #68
03574     FD 60 02 F1 | 	add	arg02, objptr
03578     30 2B 42 FC | 	wrbyte	_var07, arg02
0357c                 | '     j:=j+/10
0357c     4D 5F 02 F6 | 	mov	arg01, muldivb_
03580                 | '     pos-=1
03580     01 1E 86 F1 | 	sub	_var01, #1
03584     44 FA 85 F1 | 	sub	objptr, #68
03588     C0 FF 9F FD | 	jmp	#LR__0106
0358c                 | LR__0107
0358c                 | LR__0108
0358c                 | ' 
0358c                 | ' 
0358c                 | ' q:=@n_string
0358c     44 FA 05 F1 | 	add	objptr, #68
03590     FD 18 02 F6 | 	mov	result1, objptr
03594     44 FA 85 F1 | 	sub	objptr, #68
03598                 | ' return q
03598                 | _hng033rm_spin2_inttostr2_ret
03598     2D 00 64 FD | 	ret
0359c                 | 
0359c                 | ' 
0359c                 | ' pub plot1(x,y,c)
0359c                 | _hng033rm_spin2_plot1
0359c     04 5A 05 F6 | 	mov	COUNT_, #4
035a0     B0 00 A0 FD | 	call	#pushregs_
035a4                 | ' putpixel(x,y,c)
035a4     D8 FA 05 F1 | 	add	objptr, #216
035a8     FD 6C 02 FB | 	rdlong	local01, objptr
035ac     D8 FA 85 F1 | 	sub	objptr, #216
035b0     36 6F 02 FB | 	rdlong	local02, local01
035b4     04 6C 06 F1 | 	add	local01, #4
035b8     36 71 02 FB | 	rdlong	local03, local01
035bc     FD 72 02 F6 | 	mov	local04, objptr
035c0     37 FB 01 F6 | 	mov	objptr, local02
035c4     2D 70 62 FD | 	call	local03
035c8     39 FB 01 F6 | 	mov	objptr, local04
035cc     AF F0 03 F6 | 	mov	ptra, fp
035d0     BA 00 A0 FD | 	call	#popregs_
035d4                 | _hng033rm_spin2_plot1_ret
035d4     2D 00 64 FD | 	ret
035d8                 | 
035d8                 | ' 
035d8                 | ' '*************************************************************************
035d8                 | ' '                                                                        *
035d8                 | ' '  Mode setting and driver start                                                          *
035d8                 | ' '                                                                        *
035d8                 | ' '*************************************************************************
035d8                 | ' 
035d8                 | ' ''---------  Set the graphics mode
035d8                 | ' 
035d8                 | ' 
035d8                 | ' 
035d8                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
035d8                 | _hng033rm_spin2_setmode
035d8     0A 5A 05 F6 | 	mov	COUNT_, #10
035dc     B0 00 A0 FD | 	call	#pushregs_
035e0     2F 6D 02 F6 | 	mov	local01, arg01
035e4                 | ' 
035e4                 | ' '' mode:tn_bb_cc_vv_hh
035e4                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
035e4                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
035e4                 | ' 
035e4                 | ' if mode==(512+192+48)
035e4     01 00 00 FF 
035e8     F0 6C 0E F2 | 	cmp	local01, ##752 wz
035ec                 | '   return 'no RAM
035ec     C0 05 90 AD |  if_e	jmp	#LR__0131
035f0                 | ' 
035f0                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
035f0     36 6F 02 F6 | 	mov	local02, local01
035f4     06 6E 46 F0 | 	shr	local02, #6
035f8     07 6E 06 F5 | 	and	local02, #7
035fc     08 6E 26 F3 | 	fle	local02, #8
03600     37 71 02 F6 | 	mov	local03, local02
03604     30 70 62 FD | 	jmprel	local03
03608                 | LR__0109
03608     20 00 90 FD | 	jmp	#LR__0110
0360c     48 00 90 FD | 	jmp	#LR__0111
03610     70 00 90 FD | 	jmp	#LR__0112
03614     98 00 90 FD | 	jmp	#LR__0113
03618     C0 00 90 FD | 	jmp	#LR__0114
0361c     E8 00 90 FD | 	jmp	#LR__0115
03620     10 01 90 FD | 	jmp	#LR__0116
03624     38 01 90 FD | 	jmp	#LR__0117
03628     68 01 90 FD | 	jmp	#LR__0118
0362c                 | LR__0110
0362c                 | ' 
0362c                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
0362c     50 FA 05 F1 | 	add	objptr, #80
03630     FD 5E 02 F6 | 	mov	arg01, objptr
03634     50 FA 85 F1 | 	sub	objptr, #80
03638     10 00 00 FF 
0363c     58 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8280
03640     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
03644     10 00 00 FF 
03648     58 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8280
0364c     10 62 06 F6 | 	mov	arg03, #16
03650     D8 37 B0 FD | 	call	#__system__longmove
03654     3C 01 90 FD | 	jmp	#LR__0118
03658                 | LR__0111
03658                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
03658     50 FA 05 F1 | 	add	objptr, #80
0365c     FD 5E 02 F6 | 	mov	arg01, objptr
03660     50 FA 85 F1 | 	sub	objptr, #80
03664     10 00 00 FF 
03668     98 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8344
0366c     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
03670     10 00 00 FF 
03674     98 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8344
03678     10 62 06 F6 | 	mov	arg03, #16
0367c     AC 37 B0 FD | 	call	#__system__longmove
03680     10 01 90 FD | 	jmp	#LR__0118
03684                 | LR__0112
03684                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
03684     50 FA 05 F1 | 	add	objptr, #80
03688     FD 5E 02 F6 | 	mov	arg01, objptr
0368c     50 FA 85 F1 | 	sub	objptr, #80
03690     10 00 00 FF 
03694     D8 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8408
03698     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
0369c     10 00 00 FF 
036a0     D8 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8408
036a4     10 62 06 F6 | 	mov	arg03, #16
036a8     80 37 B0 FD | 	call	#__system__longmove
036ac     E4 00 90 FD | 	jmp	#LR__0118
036b0                 | LR__0113
036b0                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
036b0     50 FA 05 F1 | 	add	objptr, #80
036b4     FD 5E 02 F6 | 	mov	arg01, objptr
036b8     50 FA 85 F1 | 	sub	objptr, #80
036bc     10 00 00 FF 
036c0     18 07 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8472
036c4     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
036c8     10 00 00 FF 
036cc     18 07 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8472
036d0     10 62 06 F6 | 	mov	arg03, #16
036d4     54 37 B0 FD | 	call	#__system__longmove
036d8     B8 00 90 FD | 	jmp	#LR__0118
036dc                 | LR__0114
036dc                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
036dc     50 FA 05 F1 | 	add	objptr, #80
036e0     FD 5E 02 F6 | 	mov	arg01, objptr
036e4     50 FA 85 F1 | 	sub	objptr, #80
036e8     10 00 00 FF 
036ec     58 07 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8536
036f0     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
036f4     10 00 00 FF 
036f8     58 07 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8536
036fc     10 62 06 F6 | 	mov	arg03, #16
03700     28 37 B0 FD | 	call	#__system__longmove
03704     8C 00 90 FD | 	jmp	#LR__0118
03708                 | LR__0115
03708                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
03708     50 FA 05 F1 | 	add	objptr, #80
0370c     FD 5E 02 F6 | 	mov	arg01, objptr
03710     50 FA 85 F1 | 	sub	objptr, #80
03714     10 00 00 FF 
03718     98 07 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8600
0371c     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
03720     10 00 00 FF 
03724     98 07 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8600
03728     10 62 06 F6 | 	mov	arg03, #16
0372c     FC 36 B0 FD | 	call	#__system__longmove
03730     60 00 90 FD | 	jmp	#LR__0118
03734                 | LR__0116
03734                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
03734     50 FA 05 F1 | 	add	objptr, #80
03738     FD 5E 02 F6 | 	mov	arg01, objptr
0373c     50 FA 85 F1 | 	sub	objptr, #80
03740     10 00 00 FF 
03744     D8 07 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8664
03748     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
0374c     10 00 00 FF 
03750     D8 07 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8664
03754     10 62 06 F6 | 	mov	arg03, #16
03758     D0 36 B0 FD | 	call	#__system__longmove
0375c     34 00 90 FD | 	jmp	#LR__0118
03760                 | LR__0117
03760                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
03760     50 FA 05 F1 | 	add	objptr, #80
03764     FD 72 02 F6 | 	mov	local04, objptr
03768     11 00 00 FF 
0376c     18 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8728
03770     03 75 02 F6 | 	mov	local05, ptr__hng033rm_spin2_dat__
03774     10 76 06 F6 | 	mov	local06, #16
03778     39 5F 02 F6 | 	mov	arg01, local04
0377c     3A 61 02 F6 | 	mov	arg02, local05
03780     10 62 06 F6 | 	mov	arg03, #16
03784     50 FA 85 F1 | 	sub	objptr, #80
03788     11 00 00 FF 
0378c     18 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8728
03790     98 36 B0 FD | 	call	#__system__longmove
03794                 | LR__0118
03794                 | ' 
03794                 | ' ' 4-bit graphics: do nothing with timings :)
03794                 | ' if mode<512
03794     01 00 00 FF 
03798     00 6C 5E F2 | 	cmps	local01, ##512 wcz
0379c     1C 00 90 3D |  if_ae	jmp	#LR__0119
037a0                 | '   palette_ptr:=@ataripalette
037a0     0E 00 00 FF 
037a4     58 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7256
037a8     18 FA 05 F1 | 	add	objptr, #24
037ac     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
037b0     18 FA 85 F1 | 	sub	objptr, #24
037b4     0E 00 00 FF 
037b8     58 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7256
037bc                 | LR__0119
037bc                 | ' 
037bc                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
037bc     36 6F 02 F6 | 	mov	local02, local01
037c0     01 00 00 FF 
037c4     30 6E 06 F5 | 	and	local02, ##560
037c8     01 00 00 FF 
037cc     30 6E 0E F2 | 	cmp	local02, ##560 wz
037d0     44 00 90 5D |  if_ne	jmp	#LR__0120
037d4                 | '   timings[5]:=4
037d4     64 FA 05 F1 | 	add	objptr, #100
037d8     FD 08 68 FC | 	wrlong	#4, objptr
037dc                 | '   timings[11]:=timings[11]<<1
037dc     18 FA 05 F1 | 	add	objptr, #24
037e0     FD 6E 02 FB | 	rdlong	local02, objptr
037e4     01 6E 66 F0 | 	shl	local02, #1
037e8     FD 6E 62 FC | 	wrlong	local02, objptr
037ec                 | '   putpixel:=p8
037ec     6C FA 05 F1 | 	add	objptr, #108
037f0     FD 6E 02 FB | 	rdlong	local02, objptr
037f4     10 FA 85 F1 | 	sub	objptr, #16
037f8     FD 6E 62 FC | 	wrlong	local02, objptr
037fc                 | '   palette_ptr:=@ataripalette
037fc     0E 00 00 FF 
03800     58 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7256
03804     C0 FA 85 F1 | 	sub	objptr, #192
03808     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
0380c     18 FA 85 F1 | 	sub	objptr, #24
03810     0E 00 00 FF 
03814     58 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7256
03818                 | LR__0120
03818                 | ' 
03818                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
03818     36 6F 02 F6 | 	mov	local02, local01
0381c     01 00 00 FF 
03820     30 6E 06 F5 | 	and	local02, ##560
03824     01 00 00 FF 
03828     10 6E 0E F2 | 	cmp	local02, ##528 wz
0382c     44 00 90 5D |  if_ne	jmp	#LR__0121
03830                 | '   timings[5]:=16
03830     64 FA 05 F1 | 	add	objptr, #100
03834     FD 20 68 FC | 	wrlong	#16, objptr
03838                 | '   timings[11]:=timings[11]>>1
03838     18 FA 05 F1 | 	add	objptr, #24
0383c     FD 6E 02 FB | 	rdlong	local02, objptr
03840     01 6E 46 F0 | 	shr	local02, #1
03844     FD 6E 62 FC | 	wrlong	local02, objptr
03848                 | '   putpixel:=p2
03848     64 FA 05 F1 | 	add	objptr, #100
0384c     FD 6E 02 FB | 	rdlong	local02, objptr
03850     08 FA 85 F1 | 	sub	objptr, #8
03854     FD 6E 62 FC | 	wrlong	local02, objptr
03858                 | '   palette_ptr:=@fourcolors
03858     0E 00 00 FF 
0385c     08 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7176
03860     C0 FA 85 F1 | 	sub	objptr, #192
03864     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
03868     18 FA 85 F1 | 	sub	objptr, #24
0386c     0E 00 00 FF 
03870     08 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7176
03874                 | LR__0121
03874                 | ' 
03874                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
03874     36 6F 02 F6 | 	mov	local02, local01
03878     01 00 00 FF 
0387c     30 6E 06 F5 | 	and	local02, ##560
03880     01 00 00 FF 
03884     00 6E 0E F2 | 	cmp	local02, ##512 wz
03888     44 00 90 5D |  if_ne	jmp	#LR__0122
0388c                 | '   timings[5]:=32
0388c     64 FA 05 F1 | 	add	objptr, #100
03890     FD 40 68 FC | 	wrlong	#32, objptr
03894                 | '   timings[11]:=timings[11]>>2
03894     18 FA 05 F1 | 	add	objptr, #24
03898     FD 6E 02 FB | 	rdlong	local02, objptr
0389c     02 6E 46 F0 | 	shr	local02, #2
038a0     FD 6E 62 FC | 	wrlong	local02, objptr
038a4                 | '   putpixel:=p1
038a4     60 FA 05 F1 | 	add	objptr, #96
038a8     FD 6E 02 FB | 	rdlong	local02, objptr
038ac     04 FA 85 F1 | 	sub	objptr, #4
038b0     FD 6E 62 FC | 	wrlong	local02, objptr
038b4                 | '   palette_ptr:=@twocolors
038b4     0E 00 00 FF 
038b8     00 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7168
038bc     C0 FA 85 F1 | 	sub	objptr, #192
038c0     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
038c4     18 FA 85 F1 | 	sub	objptr, #24
038c8     0E 00 00 FF 
038cc     00 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7168
038d0                 | LR__0122
038d0                 | ' 
038d0                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
038d0     36 6F 02 F6 | 	mov	local02, local01
038d4     01 00 00 FF 
038d8     30 6E 06 F5 | 	and	local02, ##560
038dc     01 00 00 FF 
038e0     20 6E 0E F2 | 	cmp	local02, ##544 wz
038e4     2C 00 90 5D |  if_ne	jmp	#LR__0123
038e8                 | '   putpixel:=p4
038e8     E4 FA 05 F1 | 	add	objptr, #228
038ec     FD 6E 02 FB | 	rdlong	local02, objptr
038f0     0C FA 85 F1 | 	sub	objptr, #12
038f4     FD 6E 62 FC | 	wrlong	local02, objptr
038f8                 | '   palette_ptr:=@vga16
038f8     0E 00 00 FF 
038fc     18 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7192
03900     C0 FA 85 F1 | 	sub	objptr, #192
03904     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
03908     18 FA 85 F1 | 	sub	objptr, #24
0390c     0E 00 00 FF 
03910     18 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7192
03914                 | LR__0123
03914                 | ' 
03914                 | ' repeat i from 0 to 4
03914     00 78 06 F6 | 	mov	local07, #0
03918     40 C7 9F FE | 	loc	pa,	#(@LR__0125-@LR__0124)
0391c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03920                 | LR__0124
03920                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
03920     3C 73 02 F6 | 	mov	local04, local07
03924     02 72 66 F0 | 	shl	local04, #2
03928     50 FA 05 F1 | 	add	objptr, #80
0392c     FD 74 02 F6 | 	mov	local05, objptr
03930     FD 72 02 F1 | 	add	local04, objptr
03934     2C FA 85 F1 | 	sub	objptr, #44
03938     FD 7A 02 FB | 	rdlong	local08, objptr
0393c     3D 77 02 F6 | 	mov	local06, local08
03940     11 76 66 F0 | 	shl	local06, #17
03944     39 6F 02 FB | 	rdlong	local02, local04
03948     3B 6F 02 F1 | 	add	local02, local06
0394c     80 40 38 FF 
03950     00 6E 06 F1 | 	add	local02, ##1887502336
03954     3C 7D 02 F6 | 	mov	local09, local07
03958     02 7C 66 F0 | 	shl	local09, #2
0395c     2C FA 05 F1 | 	add	objptr, #44
03960     FD 7E 02 F6 | 	mov	local10, objptr
03964     FD 7C 02 F1 | 	add	local09, objptr
03968     3E 6F 62 FC | 	wrlong	local02, local09
0396c     01 78 06 F1 | 	add	local07, #1
03970     05 78 5E F2 | 	cmps	local07, #5 wcz
03974     50 FA 85 F1 | 	sub	objptr, #80
03978     A4 FF 9F CD |  if_b	jmp	#LR__0124
0397c                 | LR__0125
0397c                 | ' timings[5]:=timings[5]+hdmibase<<17
0397c     24 FA 05 F1 | 	add	objptr, #36
03980     FD 72 02 FB | 	rdlong	local04, objptr
03984     11 72 66 F0 | 	shl	local04, #17
03988     40 FA 05 F1 | 	add	objptr, #64
0398c     FD 76 02 FB | 	rdlong	local06, objptr
03990     3B 6F 02 F6 | 	mov	local02, local06
03994     39 6F 02 F1 | 	add	local02, local04
03998     FD 6E 62 FC | 	wrlong	local02, objptr
0399c                 | ' clkfreq:=timings[13]
0399c     20 FA 05 F1 | 	add	objptr, #32
039a0     FD 6E 02 FB | 	rdlong	local02, objptr
039a4     14 6E 66 FC | 	wrlong	local02, #20
039a8                 | ' hubset(timings[14])
039a8     04 FA 05 F1 | 	add	objptr, #4
039ac     FD 5E 02 FB | 	rdlong	arg01, objptr
039b0     88 FA 85 F1 | 	sub	objptr, #136
039b4     00 5E 62 FD | 	hubset	arg01
039b8                 | ' waitms(1)
039b8     01 5E 06 F6 | 	mov	arg01, #1
039bc     18 37 B0 FD | 	call	#__system___waitms
039c0                 | ' 
039c0                 | ' 
039c0                 | ' xzoom:=1<<(mode & 3)
039c0     36 73 02 F6 | 	mov	local04, local01
039c4     03 72 06 F5 | 	and	local04, #3
039c8     39 6F C2 F9 | 	decod	local02, local04
039cc     CC FA 05 F1 | 	add	objptr, #204
039d0     FD 6E 62 FC | 	wrlong	local02, objptr
039d4                 | ' 
039d4                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
039d4     37 73 02 F6 | 	mov	local04, local02
039d8     CC FA 85 F1 | 	sub	objptr, #204
039dc     08 72 0E F2 | 	cmp	local04, #8 wz
039e0     24 00 90 5D |  if_ne	jmp	#LR__0126
039e4     36 75 02 F6 | 	mov	local05, local01
039e8     04 74 46 F0 | 	shr	local05, #4
039ec     03 74 06 F5 | 	and	local05, #3
039f0     03 74 0E F2 | 	cmp	local05, #3 wz
039f4     10 00 90 AD |  if_e	jmp	#LR__0126
039f8                 | '   xzoom:=4
039f8     04 6E 06 F6 | 	mov	local02, #4
039fc     CC FA 05 F1 | 	add	objptr, #204
03a00     FD 08 68 FC | 	wrlong	#4, objptr
03a04     CC FA 85 F1 | 	sub	objptr, #204
03a08                 | LR__0126
03a08                 | ' 
03a08                 | ' yzoom:=1<<((mode>>2) & 3)
03a08     36 73 02 F6 | 	mov	local04, local01
03a0c     02 72 46 F0 | 	shr	local04, #2
03a10     03 72 06 F5 | 	and	local04, #3
03a14     39 6F C2 F9 | 	decod	local02, local04
03a18     D0 FA 05 F1 | 	add	objptr, #208
03a1c     FD 6E 62 FC | 	wrlong	local02, objptr
03a20                 | ' azoom:=xzoom*yzoom
03a20     04 FA 85 F1 | 	sub	objptr, #4
03a24     FD 72 02 FB | 	rdlong	local04, objptr
03a28     04 FA 05 F1 | 	add	objptr, #4
03a2c     FD 76 02 FB | 	rdlong	local06, objptr
03a30     3B 73 02 FD | 	qmul	local04, local06
03a34     18 6E 62 FD | 	getqx	local02
03a38     04 FA 05 F1 | 	add	objptr, #4
03a3c     FD 6E 62 FC | 	wrlong	local02, objptr
03a40                 | ' 
03a40                 | ' cpl:=timings[11]
03a40     58 FA 85 F1 | 	sub	objptr, #88
03a44     FD 6E 02 FB | 	rdlong	local02, objptr
03a48     14 FA 05 F1 | 	add	objptr, #20
03a4c     FD 6E 62 FC | 	wrlong	local02, objptr
03a50     90 FA 85 F1 | 	sub	objptr, #144
03a54                 | ' if (mode<512)
03a54     01 00 00 FF 
03a58     00 6C 5E F2 | 	cmps	local01, ##512 wcz
03a5c     60 00 90 3D |  if_ae	jmp	#LR__0127
03a60                 | '   lines:=(timings[12]>>4)+/yzoom
03a60     80 FA 05 F1 | 	add	objptr, #128
03a64     FD 98 02 FB | 	rdlong	muldiva_, objptr
03a68     04 98 46 F0 | 	shr	muldiva_, #4
03a6c     50 FA 05 F1 | 	add	objptr, #80
03a70     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03a74     D0 FA 85 F1 | 	sub	objptr, #208
03a78     C2 00 A0 FD | 	call	#unsdivide_
03a7c     94 FA 05 F1 | 	add	objptr, #148
03a80     FD 9A 62 FC | 	wrlong	muldivb_, objptr
03a84                 | '   if ((timings[12]>>4)+//yzoom) <>0
03a84     14 FA 85 F1 | 	sub	objptr, #20
03a88     FD 98 02 FB | 	rdlong	muldiva_, objptr
03a8c     04 98 46 F0 | 	shr	muldiva_, #4
03a90     50 FA 05 F1 | 	add	objptr, #80
03a94     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03a98     D0 FA 85 F1 | 	sub	objptr, #208
03a9c     C2 00 A0 FD | 	call	#unsdivide_
03aa0     00 98 0E F2 | 	cmp	muldiva_, #0 wz
03aa4     AC 00 90 AD |  if_e	jmp	#LR__0130
03aa8                 | '     lines +=1
03aa8     94 FA 05 F1 | 	add	objptr, #148
03aac     FD 6E 02 FB | 	rdlong	local02, objptr
03ab0     01 6E 06 F1 | 	add	local02, #1
03ab4     FD 6E 62 FC | 	wrlong	local02, objptr
03ab8     94 FA 85 F1 | 	sub	objptr, #148
03abc                 | ' 
03abc                 | ' else
03abc     94 00 90 FD | 	jmp	#LR__0130
03ac0                 | LR__0127
03ac0                 | '   lines:=timings[12]/yzoom
03ac0     80 FA 05 F1 | 	add	objptr, #128
03ac4     FD 98 02 FB | 	rdlong	muldiva_, objptr
03ac8     50 FA 05 F1 | 	add	objptr, #80
03acc     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03ad0     D0 FA 85 F1 | 	sub	objptr, #208
03ad4     C6 00 A0 FD | 	call	#divide_
03ad8     94 FA 05 F1 | 	add	objptr, #148
03adc     FD 9A 62 FC | 	wrlong	muldivb_, objptr
03ae0                 | '   if cpl//xzoom==0
03ae0     04 FA 85 F1 | 	sub	objptr, #4
03ae4     FD 98 02 FB | 	rdlong	muldiva_, objptr
03ae8     3C FA 05 F1 | 	add	objptr, #60
03aec     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03af0     CC FA 85 F1 | 	sub	objptr, #204
03af4     C6 00 A0 FD | 	call	#divide_
03af8     00 98 0E F2 | 	cmp	muldiva_, #0 wz
03afc     28 00 90 5D |  if_ne	jmp	#LR__0128
03b00                 | '     cpl:=cpl/xzoom
03b00     90 FA 05 F1 | 	add	objptr, #144
03b04     FD 98 02 FB | 	rdlong	muldiva_, objptr
03b08     3C FA 05 F1 | 	add	objptr, #60
03b0c     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03b10     CC FA 85 F1 | 	sub	objptr, #204
03b14     C6 00 A0 FD | 	call	#divide_
03b18     90 FA 05 F1 | 	add	objptr, #144
03b1c     FD 9A 62 FC | 	wrlong	muldivb_, objptr
03b20     90 FA 85 F1 | 	sub	objptr, #144
03b24                 | '   else
03b24     2C 00 90 FD | 	jmp	#LR__0129
03b28                 | LR__0128
03b28                 | '     cpl:=cpl/xzoom+1
03b28     90 FA 05 F1 | 	add	objptr, #144
03b2c     FD 98 02 FB | 	rdlong	muldiva_, objptr
03b30     3C FA 05 F1 | 	add	objptr, #60
03b34     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03b38     CC FA 85 F1 | 	sub	objptr, #204
03b3c     C6 00 A0 FD | 	call	#divide_
03b40     4D 6F 02 F6 | 	mov	local02, muldivb_
03b44     01 6E 06 F1 | 	add	local02, #1
03b48     90 FA 05 F1 | 	add	objptr, #144
03b4c     FD 6E 62 FC | 	wrlong	local02, objptr
03b50     90 FA 85 F1 | 	sub	objptr, #144
03b54                 | LR__0129
03b54                 | LR__0130
03b54                 | ' 
03b54                 | ' buflen:=(cpl*lines)
03b54     90 FA 05 F1 | 	add	objptr, #144
03b58     FD 72 02 FB | 	rdlong	local04, objptr
03b5c     04 FA 05 F1 | 	add	objptr, #4
03b60     FD 76 02 FB | 	rdlong	local06, objptr
03b64     3B 73 02 FD | 	qmul	local04, local06
03b68     18 6E 62 FD | 	getqx	local02
03b6c     64 FA 85 F1 | 	sub	objptr, #100
03b70     FD 6E 62 FC | 	wrlong	local02, objptr
03b74                 | ' buf_ptr:=$80000-4*buflen
03b74     37 73 02 F6 | 	mov	local04, local02
03b78     30 FA 85 F1 | 	sub	objptr, #48
03b7c     02 72 66 F0 | 	shl	local04, #2
03b80     13 6E C6 F9 | 	decod	local02, #19
03b84     39 6F 82 F1 | 	sub	local02, local04
03b88     FD 6E 62 FC | 	wrlong	local02, objptr
03b8c                 | ' mode_ptr:=@timings
03b8c     50 FA 05 F1 | 	add	objptr, #80
03b90     FD 6E 02 F6 | 	mov	local02, objptr
03b94     3C FA 85 F1 | 	sub	objptr, #60
03b98     FD 6E 62 FC | 	wrlong	local02, objptr
03b9c                 | ' graphmode:=mode
03b9c     B0 FA 05 F1 | 	add	objptr, #176
03ba0     FD 6C 62 FC | 	wrlong	local01, objptr
03ba4     C4 FA 85 F1 | 	sub	objptr, #196
03ba8                 | ' makedl(mode)
03ba8     36 5F 02 F6 | 	mov	arg01, local01
03bac     0C 00 B0 FD | 	call	#_hng033rm_spin2_makedl
03bb0                 | LR__0131
03bb0     AF F0 03 F6 | 	mov	ptra, fp
03bb4     BA 00 A0 FD | 	call	#popregs_
03bb8                 | _hng033rm_spin2_setmode_ret
03bb8     2D 00 64 FD | 	ret
03bbc                 | 
03bbc                 | ' 
03bbc                 | ' 
03bbc                 | ' 
03bbc                 | ' 
03bbc                 | ' '---------- Make a display list
03bbc                 | ' 
03bbc                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
03bbc                 | _hng033rm_spin2_makedl
03bbc                 | ' 
03bbc                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
03bbc                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
03bbc                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
03bbc                 | ' 
03bbc                 | ' '   0 - display a up/down border line
03bbc                 | ' 
03bbc                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
03bbc                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
03bbc                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
03bbc                 | ' '    nnnn - font line to display, 0..15
03bbc                 | ' '    llllll - character line, determines the cursor Y position
03bbc                 | ' 
03bbc                 | ' 
03bbc                 | ' if (mode &256==0)
03bbc     00 5F CE F7 | 	test	arg01, #256 wz
03bc0     1C 00 90 5D |  if_ne	jmp	#LR__0132
03bc4                 | '   dl_ptr:=buf_ptr-4*576
03bc4     FD 1E 02 FB | 	rdlong	_var01, objptr
03bc8     04 00 00 FF 
03bcc     00 1F 86 F1 | 	sub	_var01, ##2304
03bd0     1C FA 05 F1 | 	add	objptr, #28
03bd4     FD 1E 62 FC | 	wrlong	_var01, objptr
03bd8     1C FA 85 F1 | 	sub	objptr, #28
03bdc                 | ' else
03bdc     18 00 90 FD | 	jmp	#LR__0133
03be0                 | LR__0132
03be0                 | '   dl_ptr:=buf_ptr-4*496
03be0     FD 1E 02 FB | 	rdlong	_var01, objptr
03be4     03 00 00 FF 
03be8     C0 1F 86 F1 | 	sub	_var01, ##1984
03bec     1C FA 05 F1 | 	add	objptr, #28
03bf0     FD 1E 62 FC | 	wrlong	_var01, objptr
03bf4     1C FA 85 F1 | 	sub	objptr, #28
03bf8                 | LR__0133
03bf8                 | '  ' dl_ptr:=buf_ptr-4*540
03bf8                 | ' 
03bf8                 | ' vzoom:=((mode>>2) & 3)
03bf8     2F 21 02 F6 | 	mov	_var02, arg01
03bfc     02 20 46 F0 | 	shr	_var02, #2
03c00     03 20 06 F5 | 	and	_var02, #3
03c04                 | ' 
03c04                 | ' 
03c04                 | ' if mode<512 '' text modes
03c04     01 00 00 FF 
03c08     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
03c0c     E8 01 90 3D |  if_ae	jmp	#LR__0141
03c10                 | ' 
03c10                 | '   if timings[6]>0 'borders
03c10     68 FA 05 F1 | 	add	objptr, #104
03c14     FD 1E 02 FB | 	rdlong	_var01, objptr
03c18     68 FA 85 F1 | 	sub	objptr, #104
03c1c     00 1E 5E F2 | 	cmps	_var01, #0 wcz
03c20     D4 00 90 ED |  if_be	jmp	#LR__0138
03c24                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03c24     00 22 06 F6 | 	mov	_var03, #0
03c28     68 FA 05 F1 | 	add	objptr, #104
03c2c     FD 24 02 FB | 	rdlong	_var04, objptr
03c30     68 FA 85 F1 | 	sub	objptr, #104
03c34     01 24 86 F1 | 	sub	_var04, #1
03c38     00 24 5E F2 | 	cmps	_var04, #0 wcz
03c3c     01 26 06 16 |  if_a	mov	_var05, #1
03c40     01 26 66 E6 |  if_be	neg	_var05, #1
03c44     13 29 02 F6 | 	mov	_var06, _var05
03c48     13 25 02 F1 | 	add	_var04, _var05
03c4c     D8 C3 9F FE | 	loc	pa,	#(@LR__0135-@LR__0134)
03c50     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c54                 | LR__0134
03c54                 | '       long[dl_ptr+4*i]:=$0
03c54     1C FA 05 F1 | 	add	objptr, #28
03c58     FD 2A 02 FB | 	rdlong	_var07, objptr
03c5c     1C FA 85 F1 | 	sub	objptr, #28
03c60     11 2D 02 F6 | 	mov	_var08, _var03
03c64     02 2C 66 F0 | 	shl	_var08, #2
03c68     16 2B 02 F1 | 	add	_var07, _var08
03c6c     15 01 68 FC | 	wrlong	#0, _var07
03c70     14 23 02 F1 | 	add	_var03, _var06
03c74     12 23 0A F2 | 	cmp	_var03, _var04 wz
03c78     D8 FF 9F 5D |  if_ne	jmp	#LR__0134
03c7c                 | LR__0135
03c7c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03c7c     68 FA 05 F1 | 	add	objptr, #104
03c80     FD 22 02 FB | 	rdlong	_var03, objptr
03c84     18 FA 05 F1 | 	add	objptr, #24
03c88     FD 26 02 FB | 	rdlong	_var05, objptr
03c8c     13 23 02 F1 | 	add	_var03, _var05
03c90     0C FA 05 F1 | 	add	objptr, #12
03c94     FD 2E 02 FB | 	rdlong	_var09, objptr
03c98     01 2E 86 F1 | 	sub	_var09, #1
03c9c     24 FA 85 F1 | 	sub	objptr, #36
03ca0     FD 30 02 FB | 	rdlong	_var10, objptr
03ca4     18 FA 05 F1 | 	add	objptr, #24
03ca8     FD 32 02 FB | 	rdlong	_var11, objptr
03cac     80 FA 85 F1 | 	sub	objptr, #128
03cb0     19 31 02 F1 | 	add	_var10, _var11
03cb4     18 2F 5A F2 | 	cmps	_var09, _var10 wcz
03cb8     01 2C 06 16 |  if_a	mov	_var08, #1
03cbc     01 2C 66 E6 |  if_be	neg	_var08, #1
03cc0     16 35 02 F6 | 	mov	_var12, _var08
03cc4     16 2F 02 F1 | 	add	_var09, _var08
03cc8     5C C3 9F FE | 	loc	pa,	#(@LR__0137-@LR__0136)
03ccc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03cd0                 | LR__0136
03cd0                 | '       long[dl_ptr+4*i]:=$0
03cd0     1C FA 05 F1 | 	add	objptr, #28
03cd4     FD 36 02 FB | 	rdlong	_var13, objptr
03cd8     1C FA 85 F1 | 	sub	objptr, #28
03cdc     11 39 02 F6 | 	mov	_var14, _var03
03ce0     02 38 66 F0 | 	shl	_var14, #2
03ce4     1C 37 02 F1 | 	add	_var13, _var14
03ce8     1B 01 68 FC | 	wrlong	#0, _var13
03cec     1A 23 02 F1 | 	add	_var03, _var12
03cf0     17 23 0A F2 | 	cmp	_var03, _var09 wz
03cf4     D8 FF 9F 5D |  if_ne	jmp	#LR__0136
03cf8                 | LR__0137
03cf8                 | LR__0138
03cf8                 | '   lpc:=16<<vzoom
03cf8     10 3A 06 F6 | 	mov	_var15, #16
03cfc     10 3B 62 F0 | 	shl	_var15, _var02
03d00                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03d00     68 FA 05 F1 | 	add	objptr, #104
03d04     FD 22 02 FB | 	rdlong	_var03, objptr
03d08     11 3D 02 F6 | 	mov	_var16, _var03
03d0c     18 FA 05 F1 | 	add	objptr, #24
03d10     FD 3E 02 FB | 	rdlong	_var17, objptr
03d14     1F 3D 02 F1 | 	add	_var16, _var17
03d18     01 3C 86 F1 | 	sub	_var16, #1
03d1c     18 FA 85 F1 | 	sub	objptr, #24
03d20     FD 2C 02 FB | 	rdlong	_var08, objptr
03d24     68 FA 85 F1 | 	sub	objptr, #104
03d28     16 3D 5A F2 | 	cmps	_var16, _var08 wcz
03d2c     01 40 06 16 |  if_a	mov	_var18, #1
03d30     01 40 66 E6 |  if_be	neg	_var18, #1
03d34     20 43 02 F6 | 	mov	_var19, _var18
03d38     20 3D 02 F1 | 	add	_var16, _var18
03d3c     74 C3 9F FE | 	loc	pa,	#(@LR__0140-@LR__0139)
03d40     93 00 A0 FD | 	call	#FCACHE_LOAD_
03d44                 | LR__0139
03d44                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
03d44     11 99 02 F6 | 	mov	muldiva_, _var03
03d48     68 FA 05 F1 | 	add	objptr, #104
03d4c     FD 44 02 FB | 	rdlong	_var20, objptr
03d50     68 FA 85 F1 | 	sub	objptr, #104
03d54     22 99 82 F1 | 	sub	muldiva_, _var20
03d58     1D 9B 02 F6 | 	mov	muldivb_, _var15
03d5c     C2 00 A0 FD | 	call	#unsdivide_
03d60     10 99 42 F0 | 	shr	muldiva_, _var02
03d64     4C 47 02 F6 | 	mov	_var21, muldiva_
03d68                 | '     charline:=(i-timings[6])+/lpc
03d68     11 99 02 F6 | 	mov	muldiva_, _var03
03d6c     68 FA 05 F1 | 	add	objptr, #104
03d70     FD 48 02 FB | 	rdlong	_var22, objptr
03d74     68 FA 85 F1 | 	sub	objptr, #104
03d78     24 99 82 F1 | 	sub	muldiva_, _var22
03d7c     1D 9B 02 F6 | 	mov	muldivb_, _var15
03d80     C2 00 A0 FD | 	call	#unsdivide_
03d84     4D 4B 02 F6 | 	mov	_var23, muldivb_
03d88                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
03d88     FD 32 02 FB | 	rdlong	_var11, objptr
03d8c     90 FA 05 F1 | 	add	objptr, #144
03d90     FD 44 02 FB | 	rdlong	_var20, objptr
03d94     25 45 02 FD | 	qmul	_var20, _var23
03d98     18 4C 62 FD | 	getqx	_var24
03d9c     02 4C 66 F0 | 	shl	_var24, #2
03da0     26 33 02 F1 | 	add	_var11, _var24
03da4     2F 39 02 F6 | 	mov	_var14, arg01
03da8     03 38 06 F5 | 	and	_var14, #3
03dac     1C 33 02 F1 | 	add	_var11, _var14
03db0                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03db0     0C 32 66 F0 | 	shl	_var11, #12
03db4     23 49 02 F6 | 	mov	_var22, _var21
03db8     08 48 66 F0 | 	shl	_var22, #8
03dbc     24 33 02 F1 | 	add	_var11, _var22
03dc0     25 45 02 F6 | 	mov	_var20, _var23
03dc4     02 44 66 F0 | 	shl	_var20, #2
03dc8     22 33 02 F1 | 	add	_var11, _var20
03dcc     01 32 06 F1 | 	add	_var11, #1
03dd0     74 FA 85 F1 | 	sub	objptr, #116
03dd4     FD 36 02 FB | 	rdlong	_var13, objptr
03dd8     1C FA 85 F1 | 	sub	objptr, #28
03ddc     11 39 02 F6 | 	mov	_var14, _var03
03de0     02 38 66 F0 | 	shl	_var14, #2
03de4     1C 37 02 F1 | 	add	_var13, _var14
03de8     1B 33 62 FC | 	wrlong	_var11, _var13
03dec     21 23 02 F1 | 	add	_var03, _var19
03df0     1E 23 0A F2 | 	cmp	_var03, _var16 wz
03df4     4C FF 9F 5D |  if_ne	jmp	#LR__0139
03df8                 | LR__0140
03df8                 | LR__0141
03df8                 | ' 
03df8                 | ' 
03df8                 | ' 
03df8                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
03df8     01 00 00 FF 
03dfc     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
03e00     A8 01 90 CD |  if_b	jmp	#LR__0149
03e04                 | ' 
03e04                 | '   if timings[6]>0 'borders
03e04     68 FA 05 F1 | 	add	objptr, #104
03e08     FD 1E 02 FB | 	rdlong	_var01, objptr
03e0c     68 FA 85 F1 | 	sub	objptr, #104
03e10     00 1E 5E F2 | 	cmps	_var01, #0 wcz
03e14     D4 00 90 ED |  if_be	jmp	#LR__0146
03e18                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03e18     00 22 06 F6 | 	mov	_var03, #0
03e1c     68 FA 05 F1 | 	add	objptr, #104
03e20     FD 4E 02 FB | 	rdlong	_var25, objptr
03e24     68 FA 85 F1 | 	sub	objptr, #104
03e28     01 4E 86 F1 | 	sub	_var25, #1
03e2c     00 4E 5E F2 | 	cmps	_var25, #0 wcz
03e30     01 26 06 16 |  if_a	mov	_var05, #1
03e34     01 26 66 E6 |  if_be	neg	_var05, #1
03e38     13 51 02 F6 | 	mov	_var26, _var05
03e3c     13 4F 02 F1 | 	add	_var25, _var05
03e40     E4 C1 9F FE | 	loc	pa,	#(@LR__0143-@LR__0142)
03e44     93 00 A0 FD | 	call	#FCACHE_LOAD_
03e48                 | LR__0142
03e48                 | '       long[dl_ptr+4*i]:=$0
03e48     1C FA 05 F1 | 	add	objptr, #28
03e4c     FD 2A 02 FB | 	rdlong	_var07, objptr
03e50     1C FA 85 F1 | 	sub	objptr, #28
03e54     11 2D 02 F6 | 	mov	_var08, _var03
03e58     02 2C 66 F0 | 	shl	_var08, #2
03e5c     16 2B 02 F1 | 	add	_var07, _var08
03e60     15 01 68 FC | 	wrlong	#0, _var07
03e64     28 23 02 F1 | 	add	_var03, _var26
03e68     27 23 0A F2 | 	cmp	_var03, _var25 wz
03e6c     D8 FF 9F 5D |  if_ne	jmp	#LR__0142
03e70                 | LR__0143
03e70                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03e70     68 FA 05 F1 | 	add	objptr, #104
03e74     FD 22 02 FB | 	rdlong	_var03, objptr
03e78     18 FA 05 F1 | 	add	objptr, #24
03e7c     FD 26 02 FB | 	rdlong	_var05, objptr
03e80     13 23 02 F1 | 	add	_var03, _var05
03e84     0C FA 05 F1 | 	add	objptr, #12
03e88     FD 52 02 FB | 	rdlong	_var27, objptr
03e8c     01 52 86 F1 | 	sub	_var27, #1
03e90     24 FA 85 F1 | 	sub	objptr, #36
03e94     FD 30 02 FB | 	rdlong	_var10, objptr
03e98     18 FA 05 F1 | 	add	objptr, #24
03e9c     FD 32 02 FB | 	rdlong	_var11, objptr
03ea0     80 FA 85 F1 | 	sub	objptr, #128
03ea4     19 31 02 F1 | 	add	_var10, _var11
03ea8     18 53 5A F2 | 	cmps	_var27, _var10 wcz
03eac     01 2C 06 16 |  if_a	mov	_var08, #1
03eb0     01 2C 66 E6 |  if_be	neg	_var08, #1
03eb4     16 55 02 F6 | 	mov	_var28, _var08
03eb8     16 53 02 F1 | 	add	_var27, _var08
03ebc     68 C1 9F FE | 	loc	pa,	#(@LR__0145-@LR__0144)
03ec0     93 00 A0 FD | 	call	#FCACHE_LOAD_
03ec4                 | LR__0144
03ec4                 | '       long[dl_ptr+4*i]:=$0
03ec4     1C FA 05 F1 | 	add	objptr, #28
03ec8     FD 36 02 FB | 	rdlong	_var13, objptr
03ecc     1C FA 85 F1 | 	sub	objptr, #28
03ed0     11 39 02 F6 | 	mov	_var14, _var03
03ed4     02 38 66 F0 | 	shl	_var14, #2
03ed8     1C 37 02 F1 | 	add	_var13, _var14
03edc     1B 01 68 FC | 	wrlong	#0, _var13
03ee0     2A 23 02 F1 | 	add	_var03, _var28
03ee4     29 23 0A F2 | 	cmp	_var03, _var27 wz
03ee8     D8 FF 9F 5D |  if_ne	jmp	#LR__0144
03eec                 | LR__0145
03eec                 | LR__0146
03eec                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03eec     68 FA 05 F1 | 	add	objptr, #104
03ef0     FD 22 02 FB | 	rdlong	_var03, objptr
03ef4     11 57 02 F6 | 	mov	_var29, _var03
03ef8     18 FA 05 F1 | 	add	objptr, #24
03efc     FD 3E 02 FB | 	rdlong	_var17, objptr
03f00     1F 57 02 F1 | 	add	_var29, _var17
03f04     01 56 86 F1 | 	sub	_var29, #1
03f08     18 FA 85 F1 | 	sub	objptr, #24
03f0c     FD 2C 02 FB | 	rdlong	_var08, objptr
03f10     68 FA 85 F1 | 	sub	objptr, #104
03f14     16 57 5A F2 | 	cmps	_var29, _var08 wcz
03f18     01 40 06 16 |  if_a	mov	_var18, #1
03f1c     01 40 66 E6 |  if_be	neg	_var18, #1
03f20     20 59 02 F6 | 	mov	_var30, _var18
03f24     20 57 02 F1 | 	add	_var29, _var18
03f28     50 C1 9F FE | 	loc	pa,	#(@LR__0148-@LR__0147)
03f2c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03f30                 | LR__0147
03f30                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
03f30     FD 32 02 FB | 	rdlong	_var11, objptr
03f34     11 49 02 F6 | 	mov	_var22, _var03
03f38     68 FA 05 F1 | 	add	objptr, #104
03f3c     FD 44 02 FB | 	rdlong	_var20, objptr
03f40     22 49 82 F1 | 	sub	_var22, _var20
03f44     10 49 42 F0 | 	shr	_var22, _var02
03f48     28 FA 05 F1 | 	add	objptr, #40
03f4c     FD 38 02 FB | 	rdlong	_var14, objptr
03f50     24 39 02 FD | 	qmul	_var14, _var22
03f54     18 5A 62 FD | 	getqx	_var31
03f58     02 5A 66 F0 | 	shl	_var31, #2
03f5c     2D 33 02 F1 | 	add	_var11, _var31
03f60     2F 5D 02 F6 | 	mov	_var32, arg01
03f64     03 5C 06 F5 | 	and	_var32, #3
03f68     2E 33 02 F1 | 	add	_var11, _var32
03f6c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
03f6c     0C 32 66 F0 | 	shl	_var11, #12
03f70     02 32 06 F1 | 	add	_var11, #2
03f74     2F 49 02 F6 | 	mov	_var22, arg01
03f78     30 48 06 F5 | 	and	_var22, #48
03f7c     02 48 46 F0 | 	shr	_var22, #2
03f80     24 33 02 F1 | 	add	_var11, _var22
03f84     74 FA 85 F1 | 	sub	objptr, #116
03f88     FD 44 02 FB | 	rdlong	_var20, objptr
03f8c     1C FA 85 F1 | 	sub	objptr, #28
03f90     11 4D 02 F6 | 	mov	_var24, _var03
03f94     02 4C 66 F0 | 	shl	_var24, #2
03f98     26 45 02 F1 | 	add	_var20, _var24
03f9c     22 33 62 FC | 	wrlong	_var11, _var20
03fa0     2C 23 02 F1 | 	add	_var03, _var30
03fa4     2B 23 0A F2 | 	cmp	_var03, _var29 wz
03fa8     84 FF 9F 5D |  if_ne	jmp	#LR__0147
03fac                 | LR__0148
03fac                 | LR__0149
03fac                 | _hng033rm_spin2_makedl_ret
03fac     2D 00 64 FD | 	ret
03fb0                 | 
03fb0                 | '       
03fb0                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
03fb0                 | ' 
03fb0                 | ' pub start(mode,base):result
03fb0                 | _hng033rm_spin2_start
03fb0     02 5A 05 F6 | 	mov	COUNT_, #2
03fb4     B0 00 A0 FD | 	call	#pushregs_
03fb8     2F 6D 02 F6 | 	mov	local01, arg01
03fbc                 | ' 
03fbc                 | ' ' initialize pointers and variables
03fbc                 | ' 
03fbc                 | ' border_ptr:=@bordercolor
03fbc     2C FA 05 F1 | 	add	objptr, #44
03fc0     FD 6E 02 F6 | 	mov	local02, objptr
03fc4     24 FA 85 F1 | 	sub	objptr, #36
03fc8     FD 6E 62 FC | 	wrlong	local02, objptr
03fcc                 | ' font_ptr:=@st_font
03fcc     08 00 00 FF 
03fd0     00 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##4096
03fd4     04 FA 85 F1 | 	sub	objptr, #4
03fd8     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
03fdc                 | ' hdmibase:=base
03fdc     20 FA 05 F1 | 	add	objptr, #32
03fe0     FD 60 62 FC | 	wrlong	arg02, objptr
03fe4     24 FA 85 F1 | 	sub	objptr, #36
03fe8                 | ' p1:=@putpixel1
03fe8     FD 5E 02 F6 | 	mov	arg01, objptr
03fec     05 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_putpixel1_
03ff0     08 00 00 FF 
03ff4     00 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##4096
03ff8     D0 2E B0 FD | 	call	#__system___make_methodptr
03ffc     DC FA 05 F1 | 	add	objptr, #220
04000     FD 18 62 FC | 	wrlong	result1, objptr
04004     DC FA 85 F1 | 	sub	objptr, #220
04008                 | ' p2:=@putpixel2
04008     FD 5E 02 F6 | 	mov	arg01, objptr
0400c     06 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_putpixel2_
04010     B8 2E B0 FD | 	call	#__system___make_methodptr
04014     E0 FA 05 F1 | 	add	objptr, #224
04018     FD 18 62 FC | 	wrlong	result1, objptr
0401c     E0 FA 85 F1 | 	sub	objptr, #224
04020                 | ' p4:=@putpixel4
04020     FD 5E 02 F6 | 	mov	arg01, objptr
04024     07 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_putpixel4_
04028     A0 2E B0 FD | 	call	#__system___make_methodptr
0402c     E4 FA 05 F1 | 	add	objptr, #228
04030     FD 18 62 FC | 	wrlong	result1, objptr
04034     E4 FA 85 F1 | 	sub	objptr, #228
04038                 | ' p8:=@putpixel8
04038     FD 5E 02 F6 | 	mov	arg01, objptr
0403c     08 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_putpixel8_
04040     88 2E B0 FD | 	call	#__system___make_methodptr
04044     E8 FA 05 F1 | 	add	objptr, #232
04048     FD 18 62 FC | 	wrlong	result1, objptr
0404c     E8 FA 85 F1 | 	sub	objptr, #232
04050                 | ' 
04050                 | ' 
04050                 | ' ' the mode has to be set here to enable computing the buffer length
04050                 | ' 
04050                 | ' setmode(mode)
04050     36 5F 02 F6 | 	mov	arg01, local01
04054     80 F5 BF FD | 	call	#_hng033rm_spin2_setmode
04058                 | ' 
04058                 | ' vblank_ptr:=@vblank
04058     40 FA 05 F1 | 	add	objptr, #64
0405c     FD 6E 02 F6 | 	mov	local02, objptr
04060     34 FA 85 F1 | 	sub	objptr, #52
04064     FD 6E 62 FC | 	wrlong	local02, objptr
04068                 | ' cursor_ptr:=@cursor_x
04068     28 FA 05 F1 | 	add	objptr, #40
0406c     FD 6E 02 F6 | 	mov	local02, objptr
04070     24 FA 85 F1 | 	sub	objptr, #36
04074     FD 6E 62 FC | 	wrlong	local02, objptr
04078                 | ' 
04078                 | ' fontnum_ptr:=@fontnum
04078     88 FA 05 F1 | 	add	objptr, #136
0407c     FD 6E 02 F6 | 	mov	local02, objptr
04080     78 FA 85 F1 | 	sub	objptr, #120
04084     FD 6E 62 FC | 	wrlong	local02, objptr
04088                 | ' 
04088                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
04088     78 FA 05 F1 | 	add	objptr, #120
0408c     FD 00 68 FC | 	wrlong	#0, objptr
04090                 | ' bytemove(@colors,@vgacolors,16)
04090     1C FA 05 F1 | 	add	objptr, #28
04094     FD 5E 02 F6 | 	mov	arg01, objptr
04098     B4 FA 85 F1 | 	sub	objptr, #180
0409c     11 00 00 FF 
040a0     58 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8792
040a4     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
040a8     11 00 00 FF 
040ac     58 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8792
040b0     10 62 06 F6 | 	mov	arg03, #16
040b4     E4 2C B0 FD | 	call	#__system____builtin_memmove
040b8                 | ' 
040b8                 | ' ' initialize a cursor
040b8                 | ' 
040b8                 | ' cursor_x:=0
040b8     34 FA 05 F1 | 	add	objptr, #52
040bc     FD 00 48 FC | 	wrbyte	#0, objptr
040c0                 | ' cursor_y:=0
040c0     01 FA 05 F1 | 	add	objptr, #1
040c4     FD 00 48 FC | 	wrbyte	#0, objptr
040c8                 | ' cursor_sh:=14
040c8     01 FA 05 F1 | 	add	objptr, #1
040cc     FD 1C 48 FC | 	wrbyte	#14, objptr
040d0     36 FA 85 F1 | 	sub	objptr, #54
040d4                 | ' 
040d4                 | ' 
040d4                 | ' ' start the cog
040d4                 | ' 
040d4                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
040d4     11 00 00 FF 
040d8     68 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8808
040dc     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
040e0     11 00 00 FF 
040e4     68 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8808
040e8     FD 62 02 F6 | 	mov	arg03, objptr
040ec     10 5E 06 F6 | 	mov	arg01, #16
040f0     28 62 62 FD | 	setq	arg03
040f4     30 5F F2 FC | 	coginit	arg01, arg02 wc
040f8     01 5E 66 C6 |  if_b	neg	arg01, #1
040fc     2F 19 02 F6 | 	mov	result1, arg01
04100     28 FA 05 F1 | 	add	objptr, #40
04104     FD 18 62 FC | 	wrlong	result1, objptr
04108     28 FA 85 F1 | 	sub	objptr, #40
0410c                 | ' waitms(20)
0410c     14 5E 06 F6 | 	mov	arg01, #20
04110     C4 2F B0 FD | 	call	#__system___waitms
04114                 | ' 
04114                 | ' ' clear the screen and set the colors to green on black
04114                 | ' 
04114                 | ' cls(c_green,c_black)
04114     C7 5E 06 F6 | 	mov	arg01, #199
04118     00 60 06 F6 | 	mov	arg02, #0
0411c     F8 EC BF FD | 	call	#_hng033rm_spin2_cls
04120                 | ' setbordercolor(0,0,128)
04120     00 5E 06 F6 | 	mov	arg01, #0
04124     00 60 06 F6 | 	mov	arg02, #0
04128     80 62 06 F6 | 	mov	arg03, #128
0412c     94 EC BF FD | 	call	#_hng033rm_spin2_setbordercolor
04130                 | ' setwritecolors(c_green,c_black)
04130                 | ' 
04130                 | ' 
04130                 | ' write_color:=ff
04130     38 FA 05 F1 | 	add	objptr, #56
04134     FD 8E 69 FC | 	wrlong	#199, objptr
04138                 | ' write_background:=bb
04138     04 FA 05 F1 | 	add	objptr, #4
0413c     FD 00 68 FC | 	wrlong	#0, objptr
04140                 | ' 
04140                 | ' return cog
04140     14 FA 85 F1 | 	sub	objptr, #20
04144     FD 18 02 FB | 	rdlong	result1, objptr
04148     28 FA 85 F1 | 	sub	objptr, #40
0414c     AF F0 03 F6 | 	mov	ptra, fp
04150     BA 00 A0 FD | 	call	#popregs_
04154                 | _hng033rm_spin2_start_ret
04154     2D 00 64 FD | 	ret
04158                 | 
04158                 | ' 
04158                 | ' pub getfontaddr(num)
04158                 | _hng033rm_spin2_getfontaddr
04158                 | ' 
04158                 | ' if num==1
04158     01 5E 0E F2 | 	cmp	arg01, #1 wz
0415c                 | '   return @vga_font
0415c     03 19 02 A6 |  if_e	mov	result1, ptr__hng033rm_spin2_dat__
04160     44 00 90 AD |  if_e	jmp	#_hng033rm_spin2_getfontaddr_ret
04164                 | ' if num==2
04164     02 5E 0E F2 | 	cmp	arg01, #2 wz
04168     18 00 90 5D |  if_ne	jmp	#LR__0150
0416c                 | '   return @st_font
0416c     08 00 00 FF 
04170     00 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##4096
04174     03 19 02 F6 | 	mov	result1, ptr__hng033rm_spin2_dat__
04178     08 00 00 FF 
0417c     00 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##4096
04180     24 00 90 FD | 	jmp	#_hng033rm_spin2_getfontaddr_ret
04184                 | LR__0150
04184                 | ' if num==3
04184     03 5E 0E F2 | 	cmp	arg01, #3 wz
04188     18 00 90 5D |  if_ne	jmp	#LR__0151
0418c                 | '   return @a8_font  
0418c     0C 00 00 FF 
04190     00 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##6144
04194     03 19 02 F6 | 	mov	result1, ptr__hng033rm_spin2_dat__
04198     0C 00 00 FF 
0419c     00 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##6144
041a0     04 00 90 FD | 	jmp	#_hng033rm_spin2_getfontaddr_ret
041a4                 | LR__0151
041a4     00 18 06 F6 | 	mov	result1, #0
041a8                 | _hng033rm_spin2_getfontaddr_ret
041a8     2D 00 64 FD | 	ret
041ac                 | 
041ac                 | ' 'this is the object and not a program
041ac                 | ' 
041ac                 | ' pub start() :cog
041ac                 | _retrocog_spin2_start
041ac     02 5A 05 F6 | 	mov	COUNT_, #2
041b0     B0 00 A0 FD | 	call	#pushregs_
041b4                 | ' 
041b4                 | ' cog:=cogspin(16,serialcog(),@serialstack)
041b4     FD 6C 02 F6 | 	mov	local01, objptr
041b8     01 00 00 FF 
041bc     40 FB 05 F1 | 	add	objptr, ##832
041c0     FD 6E 02 F6 | 	mov	local02, objptr
041c4     37 6D 62 FC | 	wrlong	local01, local02
041c8     04 6E 06 F1 | 	add	local02, #4
041cc     37 13 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
041d0     FD 62 02 F6 | 	mov	arg03, objptr
041d4     01 00 00 FF 
041d8     40 FB 85 F1 | 	sub	objptr, ##832
041dc     10 5E 06 F6 | 	mov	arg01, #16
041e0     28 62 62 FD | 	setq	arg03
041e4     FA 5E F2 FC | 	coginit	arg01, entryptr__ wc
041e8     01 5E 66 C6 |  if_b	neg	arg01, #1
041ec     2F 19 02 F6 | 	mov	result1, arg01
041f0                 | ' return cog
041f0     AF F0 03 F6 | 	mov	ptra, fp
041f4     BA 00 A0 FD | 	call	#popregs_
041f8                 | _retrocog_spin2_start_ret
041f8     2D 00 64 FD | 	ret
041fc                 | 
041fc                 | ' 
041fc                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
041fc                 | _retrocog_spin2_serialcog
041fc     0C 5A 05 F6 | 	mov	COUNT_, #12
04200     B0 00 A0 FD | 	call	#pushregs_
04204                 | ' 
04204                 | ' 'start serial and midi
04204                 | ' 
04204                 | ' serial_start(rxpin, txpin, baudrate)
04204     20 5E 06 F6 | 	mov	arg01, #32
04208     21 60 06 F6 | 	mov	arg02, #33
0420c     A6 0E 00 FF 
04210     00 62 06 F6 | 	mov	arg03, ##1920000
04214     C0 05 B0 FD | 	call	#_retrocog_spin2_serial_start
04218                 | ' serial_start(midiin,midiout,mbaudrate)
04218     1D 5E 06 F6 | 	mov	arg01, #29
0421c     1E 60 06 F6 | 	mov	arg02, #30
04220     3D 00 00 FF 
04224     12 62 06 F6 | 	mov	arg03, ##31250
04228     AC 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0422c                 | ' serial_start(srxpin,stxpin,sbaudrate)
0422c     3E 6C 06 F6 | 	mov	local01, #62
04230     42 0F 00 FF 
04234     80 6E 06 F6 | 	mov	local02, ##2000000
04238     3F 5E 06 F6 | 	mov	arg01, #63
0423c     3E 60 06 F6 | 	mov	arg02, #62
04240     42 0F 00 FF 
04244     80 62 06 F6 | 	mov	arg03, ##2000000
04248     8C 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0424c                 | ' 
0424c                 | ' mb:=(-1)
0424c     01 70 66 F6 | 	neg	local03, #1
04250                 | ' b:=(-1)
04250     01 72 66 F6 | 	neg	local04, #1
04254                 | ' 
04254                 | ' mousefront:=0
04254     00 74 06 F6 | 	mov	local05, #0
04258     08 FA 05 F1 | 	add	objptr, #8
0425c     FD 00 68 FC | 	wrlong	#0, objptr
04260                 | ' mousetail:=0
04260     04 FA 05 F1 | 	add	objptr, #4
04264     FD 00 68 FC | 	wrlong	#0, objptr
04268     0C FA 85 F1 | 	sub	objptr, #12
0426c                 | ' kbdfront:=0
0426c     FD 00 68 FC | 	wrlong	#0, objptr
04270                 | ' kbdtail:=0
04270     04 FA 05 F1 | 	add	objptr, #4
04274     FD 00 68 FC | 	wrlong	#0, objptr
04278                 | ' midifront:=0
04278     0C FA 05 F1 | 	add	objptr, #12
0427c     FD 00 68 FC | 	wrlong	#0, objptr
04280                 | ' miditail:=0
04280     04 FA 05 F1 | 	add	objptr, #4
04284     FD 00 68 FC | 	wrlong	#0, objptr
04288                 | ' serialfront:=0
04288     04 FA 05 F1 | 	add	objptr, #4
0428c     FD 00 68 FC | 	wrlong	#0, objptr
04290                 | ' serialtail:=0
04290     04 FA 05 F1 | 	add	objptr, #4
04294     FD 00 68 FC | 	wrlong	#0, objptr
04298                 | ' long[$30]:=0
04298     30 00 6C FC | 	wrlong	#0, #48
0429c                 | ' long[$34]:=0
0429c     34 00 6C FC | 	wrlong	#0, #52
042a0                 | ' long[$38]:=0
042a0     38 00 6C FC | 	wrlong	#0, #56
042a4     1C FA 85 F1 | 	sub	objptr, #28
042a8                 | ' long[$3C]:=0
042a8     3C 00 6C FC | 	wrlong	#0, #60
042ac                 | ' 
042ac                 | ' repeat
042ac                 | LR__0152
042ac                 | ' 
042ac                 | ' '  repeat 
042ac                 | '   rr:=rxcheck(rxpin)
042ac     20 5E 06 F6 | 	mov	arg01, #32
042b0     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
042b4     0C 77 02 F6 | 	mov	local06, result1
042b8                 | '   mrr:=rxcheck(midiin)
042b8     1D 5E 06 F6 | 	mov	arg01, #29
042bc     94 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
042c0     0C 79 02 F6 | 	mov	local07, result1
042c4                 | '   srr:=rxcheck(srxpin)
042c4     3F 5E 06 F6 | 	mov	arg01, #63
042c8     88 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
042cc     0C 75 02 F6 | 	mov	local05, result1
042d0     3A 7B 02 F6 | 	mov	local08, local05
042d4                 | ' 
042d4                 | ' '  until rr>=0 || mrr>=0  || srr>=0
042d4                 | ' 
042d4                 | '   
042d4                 | ' ' midi. Must be >= $80 for a command
042d4                 | ' '$80-$8F - 3 bytes note off. note, velocity
042d4                 | ' '$90-$9F - 3 bytes note on, note, velocity
042d4                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
042d4                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
042d4                 | ' '$C0-$CF - 2 bytes program change
042d4                 | ' '$D0-$DF - 2 bytes mono aftertouch
042d4                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
042d4                 | ' '$F0-$FF - 1 byte
042d4                 | '   
042d4                 | '   if srr>=0
042d4     00 7A 5E F2 | 	cmps	local08, #0 wcz
042d8     78 00 90 CD |  if_b	jmp	#LR__0154
042dc                 | '   
042dc                 | '     if serialfront<>((serialtail-1) //32)
042dc     1C FA 05 F1 | 	add	objptr, #28
042e0     FD 6C 02 FB | 	rdlong	local01, objptr
042e4     36 75 02 F6 | 	mov	local05, local01
042e8     01 74 86 F1 | 	sub	local05, #1
042ec     3A 6F 52 F6 | 	abs	local02, local05 wc
042f0     1F 6E 06 F5 | 	and	local02, #31
042f4     37 6F 62 C6 |  if_b	neg	local02, local02
042f8     04 FA 85 F1 | 	sub	objptr, #4
042fc     FD 7C 02 FB | 	rdlong	local09, objptr
04300     18 FA 85 F1 | 	sub	objptr, #24
04304     3E 7F 02 F6 | 	mov	local10, local09
04308     37 7F 0A F2 | 	cmp	local10, local02 wz
0430c     44 00 90 AD |  if_e	jmp	#LR__0153
04310                 | '       serialbuf[serialfront]:=srr
04310     18 FA 05 F1 | 	add	objptr, #24
04314     FD 74 02 FB | 	rdlong	local05, objptr
04318     01 00 00 FF 
0431c     08 FB 05 F1 | 	add	objptr, ##776
04320     FD 74 02 F1 | 	add	local05, objptr
04324     3A 7B 42 FC | 	wrbyte	local08, local05
04328                 | '       serialfront+=1
04328     01 00 00 FF 
0432c     08 FB 85 F1 | 	sub	objptr, ##776
04330     FD 6E 02 FB | 	rdlong	local02, objptr
04334     01 6E 06 F1 | 	add	local02, #1
04338     FD 6E 62 FC | 	wrlong	local02, objptr
0433c                 | '       serialfront:=serialfront // 32
0433c     37 6D 02 F6 | 	mov	local01, local02
04340     36 75 52 F6 | 	abs	local05, local01 wc
04344     1F 74 06 F5 | 	and	local05, #31
04348     3A 75 62 C6 |  if_b	neg	local05, local05
0434c     FD 74 62 FC | 	wrlong	local05, objptr
04350     18 FA 85 F1 | 	sub	objptr, #24
04354                 | LR__0153
04354                 | LR__0154
04354                 | '     
04354                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
04354     80 78 5E F2 | 	cmps	local07, #128 wcz
04358     08 00 90 CD |  if_b	jmp	#LR__0155
0435c     BF 78 5E F2 | 	cmps	local07, #191 wcz
04360     10 00 90 ED |  if_be	jmp	#LR__0156
04364                 | LR__0155
04364     E0 78 5E F2 | 	cmps	local07, #224 wcz
04368     18 00 90 CD |  if_b	jmp	#LR__0157
0436c     EF 78 5E F2 | 	cmps	local07, #239 wcz
04370     10 00 90 1D |  if_a	jmp	#LR__0157
04374                 | LR__0156
04374                 | '     mb:=2
04374     02 70 06 F6 | 	mov	local03, #2
04378                 | '     midireport:=mrr<<24
04378     3C 75 02 F6 | 	mov	local05, local07
0437c     18 74 66 F0 | 	shl	local05, #24
04380     3A 81 02 F6 | 	mov	local11, local05
04384                 | LR__0157
04384                 | ' 
04384                 | '   if (mrr>=$C0) && (mrr<=$DF)
04384     C0 78 5E F2 | 	cmps	local07, #192 wcz
04388     18 00 90 CD |  if_b	jmp	#LR__0158
0438c     DF 78 5E F2 | 	cmps	local07, #223 wcz
04390     10 00 90 1D |  if_a	jmp	#LR__0158
04394                 | '     mb:=1
04394     01 70 06 F6 | 	mov	local03, #1
04398                 | '     midireport:=mrr<<24
04398     3C 75 02 F6 | 	mov	local05, local07
0439c     18 74 66 F0 | 	shl	local05, #24
043a0     3A 81 02 F6 | 	mov	local11, local05
043a4                 | LR__0158
043a4                 | '   
043a4                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
043a4     F0 78 5E F2 | 	cmps	local07, #240 wcz
043a8                 | '     mb:=4
043a8     04 70 06 36 |  if_ae	mov	local03, #4
043ac                 | '     midireport:=mrr<<24  
043ac     3C 81 02 36 |  if_ae	mov	local11, local07
043b0     18 80 66 30 |  if_ae	shl	local11, #24
043b4                 | '   
043b4                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
043b4     80 78 5E F2 | 	cmps	local07, #128 wcz
043b8     44 00 90 3D |  if_ae	jmp	#LR__0160
043bc     00 70 5E F2 | 	cmps	local03, #0 wcz
043c0     3C 00 90 ED |  if_be	jmp	#LR__0160
043c4     00 78 5E F2 | 	cmps	local07, #0 wcz
043c8     34 00 90 CD |  if_b	jmp	#LR__0160
043cc                 | '     
043cc                 | '     mb--
043cc     38 75 02 F6 | 	mov	local05, local03
043d0     38 6D 02 F6 | 	mov	local01, local03
043d4     01 6C 86 F1 | 	sub	local01, #1
043d8     36 71 02 F6 | 	mov	local03, local01
043dc                 | '     if mb<3
043dc     03 70 5E F2 | 	cmps	local03, #3 wcz
043e0     1C 00 90 3D |  if_ae	jmp	#LR__0159
043e4                 | '       midireport+=mrr<<(mb<<3)
043e4     40 75 02 F6 | 	mov	local05, local11
043e8     3C 6D 02 F6 | 	mov	local01, local07
043ec     38 6F 02 F6 | 	mov	local02, local03
043f0     03 6E 66 F0 | 	shl	local02, #3
043f4     37 6D 62 F0 | 	shl	local01, local02
043f8     36 75 02 F1 | 	add	local05, local01
043fc     3A 81 02 F6 | 	mov	local11, local05
04400                 | LR__0159
04400                 | LR__0160
04400                 | '   
04400                 | '   if mb==0
04400     00 70 0E F2 | 	cmp	local03, #0 wz
04404     80 00 90 5D |  if_ne	jmp	#LR__0162
04408                 | '     
04408                 | '     if midifront<>((miditail-1) //32)
04408     14 FA 05 F1 | 	add	objptr, #20
0440c     FD 6C 02 FB | 	rdlong	local01, objptr
04410     36 75 02 F6 | 	mov	local05, local01
04414     01 74 86 F1 | 	sub	local05, #1
04418     3A 6F 52 F6 | 	abs	local02, local05 wc
0441c     1F 6E 06 F5 | 	and	local02, #31
04420     37 6F 62 C6 |  if_b	neg	local02, local02
04424     04 FA 85 F1 | 	sub	objptr, #4
04428     FD 7C 02 FB | 	rdlong	local09, objptr
0442c     10 FA 85 F1 | 	sub	objptr, #16
04430     3E 7F 02 F6 | 	mov	local10, local09
04434     37 7F 0A F2 | 	cmp	local10, local02 wz
04438     48 00 90 AD |  if_e	jmp	#LR__0161
0443c                 | '       midibuf[midifront]:=midireport
0443c     10 FA 05 F1 | 	add	objptr, #16
04440     FD 74 02 FB | 	rdlong	local05, objptr
04444     02 74 66 F0 | 	shl	local05, #2
04448     01 00 00 FF 
0444c     90 FA 05 F1 | 	add	objptr, ##656
04450     FD 74 02 F1 | 	add	local05, objptr
04454     3A 81 62 FC | 	wrlong	local11, local05
04458                 | '       midifront+=1
04458     01 00 00 FF 
0445c     90 FA 85 F1 | 	sub	objptr, ##656
04460     FD 6E 02 FB | 	rdlong	local02, objptr
04464     01 6E 06 F1 | 	add	local02, #1
04468     FD 6E 62 FC | 	wrlong	local02, objptr
0446c                 | '       midifront:=midifront // 32
0446c     37 6D 02 F6 | 	mov	local01, local02
04470     36 75 52 F6 | 	abs	local05, local01 wc
04474     1F 74 06 F5 | 	and	local05, #31
04478     3A 75 62 C6 |  if_b	neg	local05, local05
0447c     FD 74 62 FC | 	wrlong	local05, objptr
04480     10 FA 85 F1 | 	sub	objptr, #16
04484                 | LR__0161
04484                 | '     mb:=(-1)
04484     01 70 66 F6 | 	neg	local03, #1
04488                 | LR__0162
04488                 | ' 
04488                 | ' 'Keyboard and mouse
04488                 | ' 
04488                 | '   if (rr>=$80) && (rr<>$FF)
04488     80 76 5E F2 | 	cmps	local06, #128 wcz
0448c     18 00 90 CD |  if_b	jmp	#LR__0163
04490     FF 76 0E F2 | 	cmp	local06, #255 wz
04494     10 00 90 AD |  if_e	jmp	#LR__0163
04498                 | '     b:=3
04498     03 72 06 F6 | 	mov	local04, #3
0449c                 | '     kbmreport:=rr<<24
0449c     3B 75 02 F6 | 	mov	local05, local06
044a0     18 74 66 F0 | 	shl	local05, #24
044a4     3A 83 02 F6 | 	mov	local12, local05
044a8                 | LR__0163
044a8                 | '   
044a8                 | '   if (rr<$80) && (b>0) && (rr>=0)
044a8     80 76 5E F2 | 	cmps	local06, #128 wcz
044ac     30 00 90 3D |  if_ae	jmp	#LR__0164
044b0     00 72 5E F2 | 	cmps	local04, #0 wcz
044b4     28 00 90 ED |  if_be	jmp	#LR__0164
044b8     00 76 5E F2 | 	cmps	local06, #0 wcz
044bc     20 00 90 CD |  if_b	jmp	#LR__0164
044c0                 | '     b--
044c0     01 72 86 F1 | 	sub	local04, #1
044c4                 | '     kbmreport+=rr<<(b<<3)  
044c4     41 75 02 F6 | 	mov	local05, local12
044c8     3B 6D 02 F6 | 	mov	local01, local06
044cc     39 6F 02 F6 | 	mov	local02, local04
044d0     03 6E 66 F0 | 	shl	local02, #3
044d4     37 6D 62 F0 | 	shl	local01, local02
044d8     36 75 02 F1 | 	add	local05, local01
044dc     3A 83 02 F6 | 	mov	local12, local05
044e0                 | LR__0164
044e0                 | '   
044e0                 | '   if (rr==$FF)
044e0     FF 76 0E F2 | 	cmp	local06, #255 wz
044e4                 | '     b:=0   
044e4     00 72 06 A6 |  if_e	mov	local04, #0
044e8                 | ' 
044e8                 | '   if b==0  
044e8     00 72 0E F2 | 	cmp	local04, #0 wz
044ec     0C 01 90 5D |  if_ne	jmp	#LR__0169
044f0                 | '  
044f0                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
044f0     00 00 40 FF 
044f4     00 82 1E F2 | 	cmp	local12, ##-2147483648 wcz
044f8     80 00 90 CD |  if_b	jmp	#LR__0166
044fc     00 80 43 FF 
04500     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
04504     74 00 90 3D |  if_ae	jmp	#LR__0166
04508                 | '       if mousefront<>((mousetail-1) //128)
04508     0C FA 05 F1 | 	add	objptr, #12
0450c     FD 6C 02 FB | 	rdlong	local01, objptr
04510     36 75 02 F6 | 	mov	local05, local01
04514     01 74 86 F1 | 	sub	local05, #1
04518     3A 6F 52 F6 | 	abs	local02, local05 wc
0451c     7F 6E 06 F5 | 	and	local02, #127
04520     37 6F 62 C6 |  if_b	neg	local02, local02
04524     04 FA 85 F1 | 	sub	objptr, #4
04528     FD 7C 02 FB | 	rdlong	local09, objptr
0452c     08 FA 85 F1 | 	sub	objptr, #8
04530     3E 7F 02 F6 | 	mov	local10, local09
04534     37 7F 0A F2 | 	cmp	local10, local02 wz
04538     40 00 90 AD |  if_e	jmp	#LR__0165
0453c                 | '         mousebuf[mousefront]:=kbmreport
0453c     08 FA 05 F1 | 	add	objptr, #8
04540     FD 74 02 FB | 	rdlong	local05, objptr
04544     02 74 66 F0 | 	shl	local05, #2
04548     98 FA 05 F1 | 	add	objptr, #152
0454c     FD 74 02 F1 | 	add	local05, objptr
04550     3A 83 62 FC | 	wrlong	local12, local05
04554                 | '         mousefront+=1
04554     98 FA 85 F1 | 	sub	objptr, #152
04558     FD 6E 02 FB | 	rdlong	local02, objptr
0455c     01 6E 06 F1 | 	add	local02, #1
04560     FD 6E 62 FC | 	wrlong	local02, objptr
04564                 | '         mousefront:=mousefront // 128
04564     37 6D 02 F6 | 	mov	local01, local02
04568     36 75 52 F6 | 	abs	local05, local01 wc
0456c     7F 74 06 F5 | 	and	local05, #127
04570     3A 75 62 C6 |  if_b	neg	local05, local05
04574     FD 74 62 FC | 	wrlong	local05, objptr
04578     08 FA 85 F1 | 	sub	objptr, #8
0457c                 | LR__0165
0457c                 | LR__0166
0457c                 | '     b:=(-1)
0457c     01 72 66 F6 | 	neg	local04, #1
04580                 | ' 
04580                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
04580     00 80 43 FF 
04584     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
04588     6C 00 90 CD |  if_b	jmp	#LR__0168
0458c     00 00 45 FF 
04590     00 82 1E F2 | 	cmp	local12, ##-1979711488 wcz
04594     60 00 90 3D |  if_ae	jmp	#LR__0168
04598                 | '       if kbdfront<>((kbdtail-1) //32)
04598     04 FA 05 F1 | 	add	objptr, #4
0459c     FD 6C 02 FB | 	rdlong	local01, objptr
045a0     04 FA 85 F1 | 	sub	objptr, #4
045a4     36 75 02 F6 | 	mov	local05, local01
045a8     01 74 86 F1 | 	sub	local05, #1
045ac     3A 6F 52 F6 | 	abs	local02, local05 wc
045b0     1F 6E 06 F5 | 	and	local02, #31
045b4     37 6F 62 C6 |  if_b	neg	local02, local02
045b8     FD 7E 02 FB | 	rdlong	local10, objptr
045bc     37 7F 0A F2 | 	cmp	local10, local02 wz
045c0     34 00 90 AD |  if_e	jmp	#LR__0167
045c4                 | '         kbdbuf[kbdfront]:=kbmreport
045c4     FD 74 02 FB | 	rdlong	local05, objptr
045c8     02 74 66 F0 | 	shl	local05, #2
045cc     20 FA 05 F1 | 	add	objptr, #32
045d0     FD 74 02 F1 | 	add	local05, objptr
045d4     3A 83 62 FC | 	wrlong	local12, local05
045d8                 | '         kbdfront+=1
045d8     20 FA 85 F1 | 	sub	objptr, #32
045dc     FD 6C 02 FB | 	rdlong	local01, objptr
045e0     01 6C 06 F1 | 	add	local01, #1
045e4     FD 6C 62 FC | 	wrlong	local01, objptr
045e8                 | '         kbdfront:=kbdfront // 32
045e8     36 75 52 F6 | 	abs	local05, local01 wc
045ec     1F 74 06 F5 | 	and	local05, #31
045f0     3A 75 62 C6 |  if_b	neg	local05, local05
045f4     FD 74 62 FC | 	wrlong	local05, objptr
045f8                 | LR__0167
045f8                 | LR__0168
045f8                 | '     b:=(-1)
045f8     01 72 66 F6 | 	neg	local04, #1
045fc                 | LR__0169
045fc                 | ' 
045fc                 | ' 
045fc                 | '   if long[$30]==0
045fc     30 74 0E FB | 	rdlong	local05, #48 wz
04600     64 00 90 5D |  if_ne	jmp	#LR__0171
04604                 | '     if kbdfront<>kbdtail
04604     FD 74 02 FB | 	rdlong	local05, objptr
04608     04 FA 05 F1 | 	add	objptr, #4
0460c     FD 6E 02 FB | 	rdlong	local02, objptr
04610     04 FA 85 F1 | 	sub	objptr, #4
04614     37 6D 02 F6 | 	mov	local01, local02
04618     36 75 0A F2 | 	cmp	local05, local01 wz
0461c     48 00 90 AD |  if_e	jmp	#LR__0170
04620                 | '       long[$30]:=kbdbuf[kbdtail]
04620     04 FA 05 F1 | 	add	objptr, #4
04624     FD 74 02 FB | 	rdlong	local05, objptr
04628     02 74 66 F0 | 	shl	local05, #2
0462c     1C FA 05 F1 | 	add	objptr, #28
04630     FD 74 02 F1 | 	add	local05, objptr
04634     3A 7F 02 FB | 	rdlong	local10, local05
04638     30 7E 66 FC | 	wrlong	local10, #48
0463c                 | '       kbdtail++
0463c     1C FA 85 F1 | 	sub	objptr, #28
04640     FD 7E 02 FB | 	rdlong	local10, objptr
04644     3F 6F 02 F6 | 	mov	local02, local10
04648     01 6E 06 F1 | 	add	local02, #1
0464c     FD 6E 62 FC | 	wrlong	local02, objptr
04650                 | '       kbdtail:= kbdtail // 32
04650     37 6D 02 F6 | 	mov	local01, local02
04654     36 75 52 F6 | 	abs	local05, local01 wc
04658     1F 74 06 F5 | 	and	local05, #31
0465c     3A 75 62 C6 |  if_b	neg	local05, local05
04660     FD 74 62 FC | 	wrlong	local05, objptr
04664     04 FA 85 F1 | 	sub	objptr, #4
04668                 | LR__0170
04668                 | LR__0171
04668                 | '       
04668                 | '   if long[$34]==0
04668     34 74 0E FB | 	rdlong	local05, #52 wz
0466c     68 00 90 5D |  if_ne	jmp	#LR__0173
04670                 | '     if mousefront<>mousetail
04670     08 FA 05 F1 | 	add	objptr, #8
04674     FD 6C 02 FB | 	rdlong	local01, objptr
04678     04 FA 05 F1 | 	add	objptr, #4
0467c     FD 7E 02 FB | 	rdlong	local10, objptr
04680     0C FA 85 F1 | 	sub	objptr, #12
04684     3F 6F 02 F6 | 	mov	local02, local10
04688     37 6D 0A F2 | 	cmp	local01, local02 wz
0468c     48 00 90 AD |  if_e	jmp	#LR__0172
04690                 | '       long[$34]:=mousebuf[mousetail]
04690     0C FA 05 F1 | 	add	objptr, #12
04694     FD 74 02 FB | 	rdlong	local05, objptr
04698     02 74 66 F0 | 	shl	local05, #2
0469c     94 FA 05 F1 | 	add	objptr, #148
046a0     FD 74 02 F1 | 	add	local05, objptr
046a4     3A 7F 02 FB | 	rdlong	local10, local05
046a8     34 7E 66 FC | 	wrlong	local10, #52
046ac                 | '       mousetail++
046ac     94 FA 85 F1 | 	sub	objptr, #148
046b0     FD 7E 02 FB | 	rdlong	local10, objptr
046b4     3F 6F 02 F6 | 	mov	local02, local10
046b8     01 6E 06 F1 | 	add	local02, #1
046bc     FD 6E 62 FC | 	wrlong	local02, objptr
046c0                 | '       mousetail:= mousetail // 128
046c0     37 6D 02 F6 | 	mov	local01, local02
046c4     36 75 52 F6 | 	abs	local05, local01 wc
046c8     7F 74 06 F5 | 	and	local05, #127
046cc     3A 75 62 C6 |  if_b	neg	local05, local05
046d0     FD 74 62 FC | 	wrlong	local05, objptr
046d4     0C FA 85 F1 | 	sub	objptr, #12
046d8                 | LR__0172
046d8                 | LR__0173
046d8                 | ' 
046d8                 | '       
046d8                 | '   if long[$38]==0
046d8     38 74 0E FB | 	rdlong	local05, #56 wz
046dc     70 00 90 5D |  if_ne	jmp	#LR__0175
046e0                 | '     if midifront<>miditail
046e0     10 FA 05 F1 | 	add	objptr, #16
046e4     FD 6C 02 FB | 	rdlong	local01, objptr
046e8     04 FA 05 F1 | 	add	objptr, #4
046ec     FD 7E 02 FB | 	rdlong	local10, objptr
046f0     14 FA 85 F1 | 	sub	objptr, #20
046f4     3F 6F 02 F6 | 	mov	local02, local10
046f8     37 6D 0A F2 | 	cmp	local01, local02 wz
046fc     50 00 90 AD |  if_e	jmp	#LR__0174
04700                 | '       long[$38]:=midibuf[miditail]
04700     14 FA 05 F1 | 	add	objptr, #20
04704     FD 74 02 FB | 	rdlong	local05, objptr
04708     02 74 66 F0 | 	shl	local05, #2
0470c     01 00 00 FF 
04710     8C FA 05 F1 | 	add	objptr, ##652
04714     FD 74 02 F1 | 	add	local05, objptr
04718     3A 7F 02 FB | 	rdlong	local10, local05
0471c     38 7E 66 FC | 	wrlong	local10, #56
04720                 | '       miditail++
04720     01 00 00 FF 
04724     8C FA 85 F1 | 	sub	objptr, ##652
04728     FD 7E 02 FB | 	rdlong	local10, objptr
0472c     3F 6F 02 F6 | 	mov	local02, local10
04730     01 6E 06 F1 | 	add	local02, #1
04734     FD 6E 62 FC | 	wrlong	local02, objptr
04738                 | '       miditail:= miditail // 32
04738     37 6D 02 F6 | 	mov	local01, local02
0473c     36 75 52 F6 | 	abs	local05, local01 wc
04740     1F 74 06 F5 | 	and	local05, #31
04744     3A 75 62 C6 |  if_b	neg	local05, local05
04748     FD 74 62 FC | 	wrlong	local05, objptr
0474c     14 FA 85 F1 | 	sub	objptr, #20
04750                 | LR__0174
04750                 | LR__0175
04750                 | '       
04750                 | '   if long[$3c]==0
04750     3C 74 0E FB | 	rdlong	local05, #60 wz
04754     54 FB 9F 5D |  if_ne	jmp	#LR__0152
04758                 | '     if serialfront<>serialtail
04758     18 FA 05 F1 | 	add	objptr, #24
0475c     FD 6C 02 FB | 	rdlong	local01, objptr
04760     04 FA 05 F1 | 	add	objptr, #4
04764     FD 7E 02 FB | 	rdlong	local10, objptr
04768     1C FA 85 F1 | 	sub	objptr, #28
0476c     3F 6F 02 F6 | 	mov	local02, local10
04770     37 6D 0A F2 | 	cmp	local01, local02 wz
04774     34 FB 9F AD |  if_e	jmp	#LR__0152
04778                 | '       byte[$3c]:=255
04778     3C FE 4D FC | 	wrbyte	#255, #60
0477c                 | '       byte[$3D]:=serialbuf[serialtail]
0477c     1C FA 05 F1 | 	add	objptr, #28
04780     FD 74 02 FB | 	rdlong	local05, objptr
04784     01 00 00 FF 
04788     04 FB 05 F1 | 	add	objptr, ##772
0478c     FD 74 02 F1 | 	add	local05, objptr
04790     3A 7F C2 FA | 	rdbyte	local10, local05
04794     3D 7E 46 FC | 	wrbyte	local10, #61
04798                 | '       serialtail++
04798     01 00 00 FF 
0479c     04 FB 85 F1 | 	sub	objptr, ##772
047a0     FD 7E 02 FB | 	rdlong	local10, objptr
047a4     3F 6F 02 F6 | 	mov	local02, local10
047a8     01 6E 06 F1 | 	add	local02, #1
047ac     FD 6E 62 FC | 	wrlong	local02, objptr
047b0                 | '       serialtail:= serialtail // 32
047b0     37 6D 02 F6 | 	mov	local01, local02
047b4     36 75 52 F6 | 	abs	local05, local01 wc
047b8     1F 74 06 F5 | 	and	local05, #31
047bc     3A 75 62 C6 |  if_b	neg	local05, local05
047c0     FD 74 62 FC | 	wrlong	local05, objptr
047c4     1C FA 85 F1 | 	sub	objptr, #28
047c8     E0 FA 9F FD | 	jmp	#LR__0152
047cc     AF F0 03 F6 | 	mov	ptra, fp
047d0     BA 00 A0 FD | 	call	#popregs_
047d4                 | _retrocog_spin2_serialcog_ret
047d4     2D 00 64 FD | 	ret
047d8                 | 
047d8                 | '       
047d8                 | ' 
047d8                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
047d8                 | ' 
047d8                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
047d8                 | _retrocog_spin2_serial_start
047d8     04 5A 05 F6 | 	mov	COUNT_, #4
047dc     B0 00 A0 FD | 	call	#pushregs_
047e0     2F 6D 02 F6 | 	mov	local01, arg01
047e4     30 6F 02 F6 | 	mov	local02, arg02
047e8                 | ' 
047e8                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
047e8     14 5E 06 FB | 	rdlong	arg01, #20
047ec     10 60 C6 F9 | 	decod	arg02, #16
047f0     30 5F 02 FD | 	qmul	arg01, arg02
047f4     19 70 62 FD | 	getqy	local03
047f8     18 72 62 FD | 	getqx	local04
047fc     28 70 62 FD | 	setq	local03
04800     31 73 12 FD | 	qdiv	local04, arg03
04804     18 18 62 FD | 	getqx	result1
04808     0C 63 02 F6 | 	mov	arg03, result1
0480c     FE FF 7F FF 
04810     00 62 06 F5 | 	and	arg03, ##-1024
04814                 | ' bitmode |= 7                                                  ' set bits (8)
04814     07 62 46 F5 | 	or	arg03, #7
04818                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
04818     40 6C 62 FD | 	dirl	local01
0481c     08 00 80 FF 
04820     36 7D 08 FC | 	wrpin	##4158, local01
04824     36 63 12 FC | 	wxpin	arg03, local01
04828     36 01 28 FC | 	wypin	#0, local01
0482c     41 6C 62 FD | 	dirh	local01
04830                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
04830     40 6E 62 FD | 	dirl	local02
04834     37 F9 08 FC | 	wrpin	#124, local02
04838     37 63 12 FC | 	wxpin	arg03, local02
0483c     37 01 28 FC | 	wypin	#0, local02
04840     41 6E 62 FD | 	dirh	local02
04844                 | ' pinhigh(rxpin)
04844     59 6C 62 FD | 	drvh	local01
04848     AF F0 03 F6 | 	mov	ptra, fp
0484c     BA 00 A0 FD | 	call	#popregs_
04850                 | _retrocog_spin2_serial_start_ret
04850     2D 00 64 FD | 	ret
04854                 | 
04854                 | ' 
04854                 | ' pub rxcheck(pin) : rxbyte | check
04854                 | _retrocog_spin2_rxcheck
04854     03 5A 05 F6 | 	mov	COUNT_, #3
04858     B0 00 A0 FD | 	call	#pushregs_
0485c     2F 6D 02 F6 | 	mov	local01, arg01
04860                 | ' 
04860                 | ' '' Check for serial input
04860                 | ' '' -- returns -1 if nothing available
04860                 | ' 
04860                 | '   rxbyte := -1
04860     01 6E 66 F6 | 	neg	local02, #1
04864                 | '   check := pinr(pin)
04864     36 5F 02 F6 | 	mov	arg01, local01
04868     4C 28 B0 FD | 	call	#__system___pinread
0486c     0C 71 0A F6 | 	mov	local03, result1 wz
04870                 | '   if (check)
04870                 | '     rxbyte := rdpin(pin) >> 24
04870     00 6E 06 56 |  if_ne	mov	local02, #0
04874     36 6F 8A 5A |  if_ne	rdpin	local02, local01
04878     18 6E 46 50 |  if_ne	shr	local02, #24
0487c     37 19 02 F6 | 	mov	result1, local02
04880     AF F0 03 F6 | 	mov	ptra, fp
04884     BA 00 A0 FD | 	call	#popregs_
04888                 | _retrocog_spin2_rxcheck_ret
04888     2D 00 64 FD | 	ret
0488c                 | 
0488c                 | _trackerplayer_spin2_initModule
0488c     0B 5A 05 F6 | 	mov	COUNT_, #11
04890     B0 00 A0 FD | 	call	#pushregs_
04894     30 F0 07 F1 | 	add	ptra, #48
04898     AF 5E 62 FC | 	wrlong	arg01, fp
0489c     04 5E 05 F1 | 	add	fp, #4
048a0     AF 60 62 FC | 	wrlong	arg02, fp
048a4     04 5E 85 F1 | 	sub	fp, #4
048a8                 | ' 
048a8                 | '   ' Set some data pointers
048a8                 | '   magicFour      := hubPtr + 1080
048a8     AF 6C 02 FB | 	rdlong	local01, fp
048ac     02 00 00 FF 
048b0     38 6C 06 F1 | 	add	local01, ##1080
048b4     9D FA 05 F1 | 	add	objptr, #157
048b8     FD 6C 62 FC | 	wrlong	local01, objptr
048bc                 | '   nameStr        := hubPtr
048bc     AF 6C 02 FB | 	rdlong	local01, fp
048c0     97 FA 85 F1 | 	sub	objptr, #151
048c4     FD 6C 62 FC | 	wrlong	local01, objptr
048c8                 | '   samplesInfoLut := hubPtr + 20
048c8     AF 6C 02 FB | 	rdlong	local01, fp
048cc     14 6C 06 F1 | 	add	local01, #20
048d0     04 FA 05 F1 | 	add	objptr, #4
048d4     FD 6C 62 FC | 	wrlong	local01, objptr
048d8                 | ' 
048d8                 | '   ' Is this a 31 sample module?
048d8                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
048d8     93 FA 05 F1 | 	add	objptr, #147
048dc     FD 6C 02 FB | 	rdlong	local01, objptr
048e0     9D FA 85 F1 | 	sub	objptr, #157
048e4     36 6F C2 FA | 	rdbyte	local02, local01
048e8     4D 6E 0E F2 | 	cmp	local02, #77 wz
048ec     4C 01 90 5D |  if_ne	jmp	#LR__0179
048f0     9D FA 05 F1 | 	add	objptr, #157
048f4     FD 70 02 FB | 	rdlong	local03, objptr
048f8     9D FA 85 F1 | 	sub	objptr, #157
048fc     02 70 06 F1 | 	add	local03, #2
04900     38 73 C2 FA | 	rdbyte	local04, local03
04904     4B 72 0E F2 | 	cmp	local04, #75 wz
04908     30 01 90 5D |  if_ne	jmp	#LR__0179
0490c                 | '     songLength          := byte[hubPtr + 950]
0490c     AF 6C 02 FB | 	rdlong	local01, fp
04910     01 00 00 FF 
04914     B6 6D 06 F1 | 	add	local01, ##950
04918     36 75 C2 FA | 	rdbyte	local05, local01
0491c     9A FA 05 F1 | 	add	objptr, #154
04920     FD 74 42 FC | 	wrbyte	local05, objptr
04924                 | '     unknown1            := byte[hubPtr + 951]
04924     AF 6C 02 FB | 	rdlong	local01, fp
04928     01 00 00 FF 
0492c     B7 6D 06 F1 | 	add	local01, ##951
04930     36 75 C2 FA | 	rdbyte	local05, local01
04934     02 FA 05 F1 | 	add	objptr, #2
04938     FD 74 42 FC | 	wrbyte	local05, objptr
0493c                 | '     songPositionsLut    :=      hubPtr + 952
0493c     AF 6C 02 FB | 	rdlong	local01, fp
04940     01 00 00 FF 
04944     B8 6D 06 F1 | 	add	local01, ##952
04948     06 FA 85 F1 | 	sub	objptr, #6
0494c     FD 6C 62 FC | 	wrlong	local01, objptr
04950                 | '     patternsData        :=      hubPtr + 1084
04950     AF 6C 02 FB | 	rdlong	local01, fp
04954     02 00 00 FF 
04958     3C 6C 06 F1 | 	add	local01, ##1084
0495c     04 FA 85 F1 | 	sub	objptr, #4
04960     FD 6C 62 FC | 	wrlong	local01, objptr
04964                 | '     numberOfInstruments := 31
04964     14 FA 05 F1 | 	add	objptr, #20
04968     FD 3E 48 FC | 	wrbyte	#31, objptr
0496c                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
0496c     0B FA 85 F1 | 	sub	objptr, #11
04970     FD 00 48 FC | 	wrbyte	#0, objptr
04974     9B FA 85 F1 | 	sub	objptr, #155
04978                 | '     repeat i from 952 to 1079
04978     08 5E 05 F1 | 	add	fp, #8
0497c     01 00 80 FF 
04980     AF 70 6B FC | 	wrlong	##952, fp
04984     08 5E 85 F1 | 	sub	fp, #8
04988     E4 B6 9F FE | 	loc	pa,	#(@LR__0178-@LR__0176)
0498c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04990                 | LR__0176
04990                 | '       if byte[hubPtr][i] > numberOfPatterns
04990     AF 76 02 FB | 	rdlong	local06, fp
04994     08 5E 05 F1 | 	add	fp, #8
04998     AF 6E 02 FB | 	rdlong	local02, fp
0499c     08 5E 85 F1 | 	sub	fp, #8
049a0     3B 6F 02 F1 | 	add	local02, local06
049a4     37 73 C2 FA | 	rdbyte	local04, local02
049a8     9B FA 05 F1 | 	add	objptr, #155
049ac     FD 78 C2 FA | 	rdbyte	local07, objptr
049b0     9B FA 85 F1 | 	sub	objptr, #155
049b4     3C 73 5A F2 | 	cmps	local04, local07 wcz
049b8     24 00 90 ED |  if_be	jmp	#LR__0177
049bc                 | '         numberOfPatterns := byte[hubPtr][i]
049bc     AF 76 02 FB | 	rdlong	local06, fp
049c0     08 5E 05 F1 | 	add	fp, #8
049c4     AF 6E 02 FB | 	rdlong	local02, fp
049c8     08 5E 85 F1 | 	sub	fp, #8
049cc     3B 6F 02 F1 | 	add	local02, local06
049d0     37 73 C2 FA | 	rdbyte	local04, local02
049d4     9B FA 05 F1 | 	add	objptr, #155
049d8     FD 72 42 FC | 	wrbyte	local04, objptr
049dc     9B FA 85 F1 | 	sub	objptr, #155
049e0                 | LR__0177
049e0     08 5E 05 F1 | 	add	fp, #8
049e4     AF 74 02 FB | 	rdlong	local05, fp
049e8     01 74 06 F1 | 	add	local05, #1
049ec     AF 74 62 FC | 	wrlong	local05, fp
049f0     08 5E 85 F1 | 	sub	fp, #8
049f4     02 00 00 FF 
049f8     38 74 1E F2 | 	cmp	local05, ##1080 wcz
049fc     90 FF 9F CD |  if_b	jmp	#LR__0176
04a00                 | LR__0178
04a00                 | '     numberOfPatterns++
04a00     9B FA 05 F1 | 	add	objptr, #155
04a04     FD 74 C2 FA | 	rdbyte	local05, objptr
04a08     FD 6E C2 FA | 	rdbyte	local02, objptr
04a0c     01 6E 06 F1 | 	add	local02, #1
04a10     FD 6E 42 FC | 	wrbyte	local02, objptr
04a14                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
04a14     09 FA 85 F1 | 	sub	objptr, #9
04a18     FD 6C 02 FB | 	rdlong	local01, objptr
04a1c     09 FA 05 F1 | 	add	objptr, #9
04a20     FD 6E C2 FA | 	rdbyte	local02, objptr
04a24     0A 6E 66 F0 | 	shl	local02, #10
04a28     37 6D 02 F1 | 	add	local01, local02
04a2c     8D FA 85 F1 | 	sub	objptr, #141
04a30     FD 6C 62 FC | 	wrlong	local01, objptr
04a34     0E FA 85 F1 | 	sub	objptr, #14
04a38                 | ' 
04a38                 | '   ' This must be an oldschool 15 sample soundtracker module
04a38                 | '   else
04a38     1C 01 90 FD | 	jmp	#LR__0183
04a3c                 | LR__0179
04a3c                 | '     songLength          := byte[hubPtr + 470]
04a3c     AF 6C 02 FB | 	rdlong	local01, fp
04a40     D6 6D 06 F1 | 	add	local01, #470
04a44     36 75 C2 FA | 	rdbyte	local05, local01
04a48     9A FA 05 F1 | 	add	objptr, #154
04a4c     FD 74 42 FC | 	wrbyte	local05, objptr
04a50                 | '     unknown1            := byte[hubPtr + 471]
04a50     AF 6C 02 FB | 	rdlong	local01, fp
04a54     D7 6D 06 F1 | 	add	local01, #471
04a58     36 75 C2 FA | 	rdbyte	local05, local01
04a5c     02 FA 05 F1 | 	add	objptr, #2
04a60     FD 74 42 FC | 	wrbyte	local05, objptr
04a64                 | '     songPositionsLut    :=      hubPtr + 472
04a64     AF 6C 02 FB | 	rdlong	local01, fp
04a68     D8 6D 06 F1 | 	add	local01, #472
04a6c     06 FA 85 F1 | 	sub	objptr, #6
04a70     FD 6C 62 FC | 	wrlong	local01, objptr
04a74                 | '     patternsData        :=      hubPtr + 600
04a74     AF 6C 02 FB | 	rdlong	local01, fp
04a78     01 00 00 FF 
04a7c     58 6C 06 F1 | 	add	local01, ##600
04a80     04 FA 85 F1 | 	sub	objptr, #4
04a84     FD 6C 62 FC | 	wrlong	local01, objptr
04a88                 | '     numberOfInstruments := 15
04a88     14 FA 05 F1 | 	add	objptr, #20
04a8c     FD 1E 48 FC | 	wrbyte	#15, objptr
04a90                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
04a90     0B FA 85 F1 | 	sub	objptr, #11
04a94     FD 00 48 FC | 	wrbyte	#0, objptr
04a98     9B FA 85 F1 | 	sub	objptr, #155
04a9c                 | '     repeat i from 472 to 599
04a9c     08 5E 05 F1 | 	add	fp, #8
04aa0     AF B0 6B FC | 	wrlong	#472, fp
04aa4     08 5E 85 F1 | 	sub	fp, #8
04aa8     C4 B5 9F FE | 	loc	pa,	#(@LR__0182-@LR__0180)
04aac     93 00 A0 FD | 	call	#FCACHE_LOAD_
04ab0                 | LR__0180
04ab0                 | '       if byte[hubPtr][i] > numberOfPatterns
04ab0     AF 76 02 FB | 	rdlong	local06, fp
04ab4     08 5E 05 F1 | 	add	fp, #8
04ab8     AF 6E 02 FB | 	rdlong	local02, fp
04abc     08 5E 85 F1 | 	sub	fp, #8
04ac0     3B 6F 02 F1 | 	add	local02, local06
04ac4     37 73 C2 FA | 	rdbyte	local04, local02
04ac8     9B FA 05 F1 | 	add	objptr, #155
04acc     FD 78 C2 FA | 	rdbyte	local07, objptr
04ad0     9B FA 85 F1 | 	sub	objptr, #155
04ad4     3C 73 5A F2 | 	cmps	local04, local07 wcz
04ad8     24 00 90 ED |  if_be	jmp	#LR__0181
04adc                 | '         numberOfPatterns := byte[hubPtr][i]
04adc     AF 76 02 FB | 	rdlong	local06, fp
04ae0     08 5E 05 F1 | 	add	fp, #8
04ae4     AF 6E 02 FB | 	rdlong	local02, fp
04ae8     08 5E 85 F1 | 	sub	fp, #8
04aec     3B 6F 02 F1 | 	add	local02, local06
04af0     37 73 C2 FA | 	rdbyte	local04, local02
04af4     9B FA 05 F1 | 	add	objptr, #155
04af8     FD 72 42 FC | 	wrbyte	local04, objptr
04afc     9B FA 85 F1 | 	sub	objptr, #155
04b00                 | LR__0181
04b00     08 5E 05 F1 | 	add	fp, #8
04b04     AF 74 02 FB | 	rdlong	local05, fp
04b08     01 74 06 F1 | 	add	local05, #1
04b0c     AF 74 62 FC | 	wrlong	local05, fp
04b10     08 5E 85 F1 | 	sub	fp, #8
04b14     01 00 00 FF 
04b18     58 74 1E F2 | 	cmp	local05, ##600 wcz
04b1c     90 FF 9F CD |  if_b	jmp	#LR__0180
04b20                 | LR__0182
04b20                 | '     numberOfPatterns++
04b20     9B FA 05 F1 | 	add	objptr, #155
04b24     FD 74 C2 FA | 	rdbyte	local05, objptr
04b28     FD 6E C2 FA | 	rdbyte	local02, objptr
04b2c     01 6E 06 F1 | 	add	local02, #1
04b30     FD 6E 42 FC | 	wrbyte	local02, objptr
04b34                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
04b34     09 FA 85 F1 | 	sub	objptr, #9
04b38     FD 6C 02 FB | 	rdlong	local01, objptr
04b3c     09 FA 05 F1 | 	add	objptr, #9
04b40     FD 6E C2 FA | 	rdbyte	local02, objptr
04b44     0A 6E 66 F0 | 	shl	local02, #10
04b48     37 6D 02 F1 | 	add	local01, local02
04b4c     8D FA 85 F1 | 	sub	objptr, #141
04b50     FD 6C 62 FC | 	wrlong	local01, objptr
04b54     0E FA 85 F1 | 	sub	objptr, #14
04b58                 | LR__0183
04b58                 | ' 
04b58                 | '   ' Iterate through all samples and fill in the sample pointer LUT
04b58                 | '   tmpPtr := sampleDataPtr
04b58     0E FA 05 F1 | 	add	objptr, #14
04b5c     FD 6C 02 FB | 	rdlong	local01, objptr
04b60     0C 5E 05 F1 | 	add	fp, #12
04b64     AF 6C 62 FC | 	wrlong	local01, fp
04b68                 | '   repeat i from 1 to numberOfInstruments
04b68     04 5E 85 F1 | 	sub	fp, #4
04b6c     AF 02 68 FC | 	wrlong	#1, fp
04b70     08 5E 85 F1 | 	sub	fp, #8
04b74     98 FA 05 F1 | 	add	objptr, #152
04b78     FD 6E C2 FA | 	rdbyte	local02, objptr
04b7c     01 6E 5E F2 | 	cmps	local02, #1 wcz
04b80     01 74 06 16 |  if_a	mov	local05, #1
04b84     01 74 66 E6 |  if_be	neg	local05, #1
04b88     3A 7B 02 F6 | 	mov	local08, local05
04b8c     FD 7C C2 FA | 	rdbyte	local09, objptr
04b90     A6 FA 85 F1 | 	sub	objptr, #166
04b94     3D 7D 02 F1 | 	add	local09, local08
04b98                 | LR__0184
04b98                 | '     samplesPtrLut[i-1] := tmpPtr
04b98     08 5E 05 F1 | 	add	fp, #8
04b9c     AF 7E 02 FB | 	rdlong	local10, fp
04ba0     01 7E 86 F1 | 	sub	local10, #1
04ba4     02 7E 66 F0 | 	shl	local10, #2
04ba8     12 FA 05 F1 | 	add	objptr, #18
04bac     FD 7E 02 F1 | 	add	local10, objptr
04bb0     04 5E 05 F1 | 	add	fp, #4
04bb4     AF 80 02 FB | 	rdlong	local11, fp
04bb8     3F 81 62 FC | 	wrlong	local11, local10
04bbc                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
04bbc     04 5E 85 F1 | 	sub	fp, #4
04bc0     AF 5E 02 FB | 	rdlong	arg01, fp
04bc4     1C 5E 05 F1 | 	add	fp, #28
04bc8     AF 60 02 F6 | 	mov	arg02, fp
04bcc     14 5E 85 F1 | 	sub	fp, #20
04bd0     AF 62 02 F6 | 	mov	arg03, fp
04bd4     04 5E 05 F1 | 	add	fp, #4
04bd8     AF 64 02 F6 | 	mov	arg04, fp
04bdc     04 5E 05 F1 | 	add	fp, #4
04be0     AF 66 02 F6 | 	mov	arg05, fp
04be4     04 5E 05 F1 | 	add	fp, #4
04be8     AF 68 02 F6 | 	mov	arg06, fp
04bec     04 5E 05 F1 | 	add	fp, #4
04bf0     AF 6A 02 F6 | 	mov	arg07, fp
04bf4     20 5E 85 F1 | 	sub	fp, #32
04bf8     12 FA 85 F1 | 	sub	objptr, #18
04bfc     F0 06 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
04c00                 | '     tmpPtr += samLength
04c00     0C 5E 05 F1 | 	add	fp, #12
04c04     AF 78 02 FB | 	rdlong	local07, fp
04c08     04 5E 05 F1 | 	add	fp, #4
04c0c     AF 7E 02 FB | 	rdlong	local10, fp
04c10     3F 79 02 F1 | 	add	local07, local10
04c14     04 5E 85 F1 | 	sub	fp, #4
04c18     AF 78 62 FC | 	wrlong	local07, fp
04c1c     04 5E 85 F1 | 	sub	fp, #4
04c20     AF 78 02 FB | 	rdlong	local07, fp
04c24     3D 79 02 F1 | 	add	local07, local08
04c28     AF 78 62 FC | 	wrlong	local07, fp
04c2c     08 5E 85 F1 | 	sub	fp, #8
04c30     3E 79 0A F2 | 	cmp	local07, local09 wz
04c34     60 FF 9F 5D |  if_ne	jmp	#LR__0184
04c38                 | ' 
04c38                 | '   ' Below this point, all play routine variables are resest to their default values
04c38                 | '   tickCounter                 := 0
04c38     A1 FA 05 F1 | 	add	objptr, #161
04c3c     FD 00 48 FC | 	wrbyte	#0, objptr
04c40                 | '   patternRow                  := 0
04c40     01 FA 05 F1 | 	add	objptr, #1
04c44     FD 00 48 FC | 	wrbyte	#0, objptr
04c48                 | '   songPosition                := startPattern
04c48     04 5E 05 F1 | 	add	fp, #4
04c4c     AF 6C 02 FB | 	rdlong	local01, fp
04c50     04 5E 85 F1 | 	sub	fp, #4
04c54     01 FA 05 F1 | 	add	objptr, #1
04c58     FD 6C 42 FC | 	wrbyte	local01, objptr
04c5c                 | '   currentSongSpeed            := 6
04c5c     01 FA 05 F1 | 	add	objptr, #1
04c60     FD 0C 48 FC | 	wrbyte	#6, objptr
04c64                 | '   patternDelay                := 0
04c64     01 FA 05 F1 | 	add	objptr, #1
04c68     FD 00 48 FC | 	wrbyte	#0, objptr
04c6c                 | '   ticksPerMinute              := 50 * 60
04c6c     02 FB 05 F1 | 	add	objptr, #258
04c70     05 00 80 FF 
04c74     FD 70 6B FC | 	wrlong	##3000, objptr
04c78     A7 FB 85 F1 | 	sub	objptr, #423
04c7c                 | '   cyclesToWait                := systemClock / 50
04c7c     FD 98 02 FB | 	rdlong	muldiva_, objptr
04c80     32 9A 06 F6 | 	mov	muldivb_, #50
04c84     C6 00 A0 FD | 	call	#divide_
04c88     AB FB 05 F1 | 	add	objptr, #427
04c8c     FD 9A 62 FC | 	wrlong	muldivb_, objptr
04c90                 | '   sampleNumber_memory         := 0
04c90     35 FA 05 F1 | 	add	objptr, #53
04c94     FD 00 48 FC | 	wrbyte	#0, objptr
04c98                 | '   lpFilter                    := 0
04c98     25 FA 85 F1 | 	sub	objptr, #37
04c9c     FD 00 48 FC | 	wrbyte	#0, objptr
04ca0                 | '   cmdD_memoryX                := 0
04ca0     29 FA 05 F1 | 	add	objptr, #41
04ca4     FD 00 48 FC | 	wrbyte	#0, objptr
04ca8                 | '   cmdD_memoryY                := 0
04ca8     01 FA 05 F1 | 	add	objptr, #1
04cac     FD 00 48 FC | 	wrbyte	#0, objptr
04cb0                 | '   cmdD_updatePosition         := false
04cb0     01 FA 05 F1 | 	add	objptr, #1
04cb4     FD 00 48 FC | 	wrbyte	#0, objptr
04cb8                 | '   cmdB_memoryZ                := 0
04cb8     01 FA 05 F1 | 	add	objptr, #1
04cbc     FD 00 48 FC | 	wrbyte	#0, objptr
04cc0                 | '   cmdB_updatePosition         := false
04cc0     01 FA 05 F1 | 	add	objptr, #1
04cc4     FD 00 48 FC | 	wrbyte	#0, objptr
04cc8                 | '   cmdE6_updatePositionCommon  := false
04cc8     0D FA 05 F1 | 	add	objptr, #13
04ccc     FD 00 48 FC | 	wrbyte	#0, objptr
04cd0     F5 FB 85 F1 | 	sub	objptr, #501
04cd4                 | ' 
04cd4                 | '   repeat i from 0 to LAST_CHANNEL
04cd4     08 5E 05 F1 | 	add	fp, #8
04cd8     AF 00 68 FC | 	wrlong	#0, fp
04cdc     08 5E 85 F1 | 	sub	fp, #8
04ce0                 | LR__0185
04ce0                 | ' 
04ce0                 | '     currRepeatPoint[i]        := 0
04ce0     08 5E 05 F1 | 	add	fp, #8
04ce4     AF 70 02 FB | 	rdlong	local03, fp
04ce8     01 70 66 F0 | 	shl	local03, #1
04cec     D7 FA 05 F1 | 	add	objptr, #215
04cf0     FD 70 02 F1 | 	add	local03, objptr
04cf4     38 01 58 FC | 	wrword	#0, local03
04cf8                 | '     currSampleLength[i]       := 4
04cf8     AF 70 02 FB | 	rdlong	local03, fp
04cfc     01 70 66 F0 | 	shl	local03, #1
04d00     1C FA 85 F1 | 	sub	objptr, #28
04d04     FD 70 02 F1 | 	add	local03, objptr
04d08     38 09 58 FC | 	wrword	#4, local03
04d0c                 | '     currSamplePtr[i]          := @null
04d0c     AF 6E 02 FB | 	rdlong	local02, fp
04d10     02 6E 66 F0 | 	shl	local02, #2
04d14     14 FA 85 F1 | 	sub	objptr, #20
04d18     FD 6E 02 F1 | 	add	local02, objptr
04d1c     37 15 62 FC | 	wrlong	ptr__trackerplayer_spin2_dat__, local02
04d20                 | '     currSampleNr[i]           := 0
04d20     AF 74 02 FB | 	rdlong	local05, fp
04d24     10 FA 05 F1 | 	add	objptr, #16
04d28     FD 74 02 F1 | 	add	local05, objptr
04d2c     3A 01 48 FC | 	wrbyte	#0, local05
04d30                 | '     currRepeatLength[i]       := 1
04d30     AF 74 02 FB | 	rdlong	local05, fp
04d34     02 74 66 F0 | 	shl	local05, #2
04d38     0C FA 05 F1 | 	add	objptr, #12
04d3c     FD 74 02 F1 | 	add	local05, objptr
04d40     3A 03 68 FC | 	wrlong	#1, local05
04d44                 | '     currPeriod[i]             := 400
04d44     AF 74 02 FB | 	rdlong	local05, fp
04d48     02 74 66 F0 | 	shl	local05, #2
04d4c     1C FA 05 F1 | 	add	objptr, #28
04d50     FD 74 02 F1 | 	add	local05, objptr
04d54     3A 21 6B FC | 	wrlong	#400, local05
04d58                 | '     lastSetPeriod[i]          := 400
04d58     AF 74 02 FB | 	rdlong	local05, fp
04d5c     02 74 66 F0 | 	shl	local05, #2
04d60     48 FA 05 F1 | 	add	objptr, #72
04d64     FD 74 02 F1 | 	add	local05, objptr
04d68     3A 21 6B FC | 	wrlong	#400, local05
04d6c                 | '     lastSetSamplePtr[i]       := 0
04d6c     AF 74 02 FB | 	rdlong	local05, fp
04d70     02 74 66 F0 | 	shl	local05, #2
04d74     10 FA 05 F1 | 	add	objptr, #16
04d78     FD 74 02 F1 | 	add	local05, objptr
04d7c     3A 01 68 FC | 	wrlong	#0, local05
04d80                 | '     lastSetSampleNr[i]        := 0
04d80     AF 74 02 FB | 	rdlong	local05, fp
04d84     02 74 66 F0 | 	shl	local05, #2
04d88     10 FA 05 F1 | 	add	objptr, #16
04d8c     FD 74 02 F1 | 	add	local05, objptr
04d90     3A 01 68 FC | 	wrlong	#0, local05
04d94                 | '     lastSetSampleLength[i]    := 0
04d94     AF 74 02 FB | 	rdlong	local05, fp
04d98     02 74 66 F0 | 	shl	local05, #2
04d9c     10 FA 05 F1 | 	add	objptr, #16
04da0     FD 74 02 F1 | 	add	local05, objptr
04da4     3A 01 68 FC | 	wrlong	#0, local05
04da8                 | '     lastSetRepeatLength[i]    := 0
04da8     AF 74 02 FB | 	rdlong	local05, fp
04dac     02 74 66 F0 | 	shl	local05, #2
04db0     10 FA 05 F1 | 	add	objptr, #16
04db4     FD 74 02 F1 | 	add	local05, objptr
04db8     3A 01 68 FC | 	wrlong	#0, local05
04dbc                 | '     lastSetRepeatPoint[i]     := 0
04dbc     AF 74 02 FB | 	rdlong	local05, fp
04dc0     02 74 66 F0 | 	shl	local05, #2
04dc4     10 FA 05 F1 | 	add	objptr, #16
04dc8     FD 74 02 F1 | 	add	local05, objptr
04dcc     3A 01 68 FC | 	wrlong	#0, local05
04dd0                 | '     currVolume[i]             := 0
04dd0     AF 74 02 FB | 	rdlong	local05, fp
04dd4     02 74 66 F0 | 	shl	local05, #2
04dd8     78 FA 85 F1 | 	sub	objptr, #120
04ddc     FD 74 02 F1 | 	add	local05, objptr
04de0     3A 01 68 FC | 	wrlong	#0, local05
04de4                 | '     currPanning[i]            := 0
04de4     AF 70 02 FB | 	rdlong	local03, fp
04de8     01 70 66 F0 | 	shl	local03, #1
04dec     20 FA 05 F1 | 	add	objptr, #32
04df0     FD 70 02 F1 | 	add	local03, objptr
04df4     38 01 58 FC | 	wrword	#0, local03
04df8                 | '     cmd3_memoryZ[i]           := 0
04df8     AF 74 02 FB | 	rdlong	local05, fp
04dfc     A9 FA 05 F1 | 	add	objptr, #169
04e00     FD 74 02 F1 | 	add	local05, objptr
04e04     3A 01 48 FC | 	wrbyte	#0, local05
04e08                 | '     cmd4_memoryY[i]           := 0
04e08     AF 74 02 FB | 	rdlong	local05, fp
04e0c     04 FA 05 F1 | 	add	objptr, #4
04e10     FD 74 02 F1 | 	add	local05, objptr
04e14     3A 01 48 FC | 	wrbyte	#0, local05
04e18                 | '     cmd4_memoryX[i]           := 0
04e18     AF 74 02 FB | 	rdlong	local05, fp
04e1c     04 FA 05 F1 | 	add	objptr, #4
04e20     FD 74 02 F1 | 	add	local05, objptr
04e24     3A 01 48 FC | 	wrbyte	#0, local05
04e28                 | '     cmd7_memoryY[i]           := 0
04e28     AF 74 02 FB | 	rdlong	local05, fp
04e2c     04 FA 05 F1 | 	add	objptr, #4
04e30     FD 74 02 F1 | 	add	local05, objptr
04e34     3A 01 48 FC | 	wrbyte	#0, local05
04e38                 | '     cmd7_memoryX[i]           := 0
04e38     AF 74 02 FB | 	rdlong	local05, fp
04e3c     04 FA 05 F1 | 	add	objptr, #4
04e40     FD 74 02 F1 | 	add	local05, objptr
04e44     3A 01 48 FC | 	wrbyte	#0, local05
04e48                 | '     cmd9_memoryZ[i]           := 0
04e48     AF 74 02 FB | 	rdlong	local05, fp
04e4c     04 FA 05 F1 | 	add	objptr, #4
04e50     FD 74 02 F1 | 	add	local05, objptr
04e54     3A 01 48 FC | 	wrbyte	#0, local05
04e58                 | '     cmdE6_memory[i]           := 0
04e58     AF 74 02 FB | 	rdlong	local05, fp
04e5c     0D FA 05 F1 | 	add	objptr, #13
04e60     FD 74 02 F1 | 	add	local05, objptr
04e64     3A 01 48 FC | 	wrbyte	#0, local05
04e68                 | '     cmdE6_counter[i]          := 0
04e68     AF 74 02 FB | 	rdlong	local05, fp
04e6c     04 FA 05 F1 | 	add	objptr, #4
04e70     FD 74 02 F1 | 	add	local05, objptr
04e74     3A 01 48 FC | 	wrbyte	#0, local05
04e78                 | '     cmdE6_updatePosition[i]   := false
04e78     AF 74 02 FB | 	rdlong	local05, fp
04e7c     04 FA 05 F1 | 	add	objptr, #4
04e80     FD 74 02 F1 | 	add	local05, objptr
04e84     3A 01 48 FC | 	wrbyte	#0, local05
04e88                 | '     sampleNumber_memory[i]    := 0
04e88     AF 74 02 FB | 	rdlong	local05, fp
04e8c     11 FA 85 F1 | 	sub	objptr, #17
04e90     FD 74 02 F1 | 	add	local05, objptr
04e94     3A 01 48 FC | 	wrbyte	#0, local05
04e98                 | '     vibratoPos[i]             := 0
04e98     AF 74 02 FB | 	rdlong	local05, fp
04e9c     59 FA 85 F1 | 	sub	objptr, #89
04ea0     FD 74 02 F1 | 	add	local05, objptr
04ea4     3A 01 48 FC | 	wrbyte	#0, local05
04ea8                 | '     portamentoPeriodMemory[i] := 0
04ea8     AF 74 02 FB | 	rdlong	local05, fp
04eac     02 74 66 F0 | 	shl	local05, #2
04eb0     10 FA 05 F1 | 	add	objptr, #16
04eb4     FD 74 02 F1 | 	add	local05, objptr
04eb8     3A 01 68 FC | 	wrlong	#0, local05
04ebc                 | '     portaGlissando[i]         := 0
04ebc     AF 74 02 FB | 	rdlong	local05, fp
04ec0     25 FA 05 F1 | 	add	objptr, #37
04ec4     FD 74 02 F1 | 	add	local05, objptr
04ec8     3A 01 48 FC | 	wrbyte	#0, local05
04ecc                 | '     vibratoType[i]            := 0
04ecc     AF 74 02 FB | 	rdlong	local05, fp
04ed0     04 FA 05 F1 | 	add	objptr, #4
04ed4     FD 74 02 F1 | 	add	local05, objptr
04ed8     3A 01 48 FC | 	wrbyte	#0, local05
04edc                 | '     tremoloType[i]            := 0
04edc     AF 74 02 FB | 	rdlong	local05, fp
04ee0     04 FA 05 F1 | 	add	objptr, #4
04ee4     FD 74 02 F1 | 	add	local05, objptr
04ee8     3A 01 48 FC | 	wrbyte	#0, local05
04eec                 | '     tremoloPos[i]             := 0
04eec     AF 74 02 FB | 	rdlong	local05, fp
04ef0     39 FA 85 F1 | 	sub	objptr, #57
04ef4     FD 74 02 F1 | 	add	local05, objptr
04ef8     3A 01 48 FC | 	wrbyte	#0, local05
04efc                 | '     deltaVolume[i]            := 0
04efc     AF 74 02 FB | 	rdlong	local05, fp
04f00     02 74 66 F0 | 	shl	local05, #2
04f04     7C FA 85 F1 | 	sub	objptr, #124
04f08     FD 74 02 F1 | 	add	local05, objptr
04f0c     3A 01 68 FC | 	wrlong	#0, local05
04f10                 | '     deltaPeriod[i]            := 0
04f10     AF 74 02 FB | 	rdlong	local05, fp
04f14     02 74 66 F0 | 	shl	local05, #2
04f18     20 FA 85 F1 | 	sub	objptr, #32
04f1c     FD 74 02 F1 | 	add	local05, objptr
04f20     3A 01 68 FC | 	wrlong	#0, local05
04f24                 | '     resetTremolo[i]           := 0
04f24     AF 74 02 FB | 	rdlong	local05, fp
04f28     A0 FA 05 F1 | 	add	objptr, #160
04f2c     FD 74 02 F1 | 	add	local05, objptr
04f30     3A 01 48 FC | 	wrbyte	#0, local05
04f34                 | '     resetVibrato[i]           := 0
04f34     AF 74 02 FB | 	rdlong	local05, fp
04f38     04 FA 05 F1 | 	add	objptr, #4
04f3c     FD 74 02 F1 | 	add	local05, objptr
04f40     3A 01 48 FC | 	wrbyte	#0, local05
04f44     AF 74 02 FB | 	rdlong	local05, fp
04f48     01 74 06 F1 | 	add	local05, #1
04f4c     AF 74 62 FC | 	wrlong	local05, fp
04f50     08 5E 85 F1 | 	sub	fp, #8
04f54     04 74 5E F2 | 	cmps	local05, #4 wcz
04f58     93 FB 85 F1 | 	sub	objptr, #403
04f5c     80 FD 9F CD |  if_b	jmp	#LR__0185
04f60     AF F0 03 F6 | 	mov	ptra, fp
04f64     BA 00 A0 FD | 	call	#popregs_
04f68                 | _trackerplayer_spin2_initModule_ret
04f68     2D 00 64 FD | 	ret
04f6c                 | 
04f6c                 | ' 
04f6c                 | ' 
04f6c                 | ' ' This routine needs to be ticked X number of times per second
04f6c                 | ' ' in order to advance the tracker play routine
04f6c                 | ' '
04f6c                 | ' PUB tick() | channel, sampleNumber, period, effect, i
04f6c                 | _trackerplayer_spin2_tick
04f6c     05 5A 05 F6 | 	mov	COUNT_, #5
04f70     B0 00 A0 FD | 	call	#pushregs_
04f74     14 F0 07 F1 | 	add	ptra, #20
04f78                 | ' 
04f78                 | '   if currentSongSpeed == 0
04f78     A4 FA 05 F1 | 	add	objptr, #164
04f7c     FD 6C CA FA | 	rdbyte	local01, objptr wz
04f80     A4 FA 85 F1 | 	sub	objptr, #164
04f84                 | '     return
04f84     88 02 90 AD |  if_e	jmp	#LR__0197
04f88                 | ' 
04f88                 | '   ' Iterate over the channels and process everything
04f88                 | '   repeat channel from 0 to LAST_CHANNEL
04f88     AF 00 68 FC | 	wrlong	#0, fp
04f8c                 | LR__0186
04f8c                 | ' 
04f8c                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
04f8c     AF 5E 02 FB | 	rdlong	arg01, fp
04f90     A3 FA 05 F1 | 	add	objptr, #163
04f94     FD 60 C2 FA | 	rdbyte	arg02, objptr
04f98     01 FA 85 F1 | 	sub	objptr, #1
04f9c     FD 62 C2 FA | 	rdbyte	arg03, objptr
04fa0     A2 FA 85 F1 | 	sub	objptr, #162
04fa4     04 5E 05 F1 | 	add	fp, #4
04fa8     AF 64 02 F6 | 	mov	arg04, fp
04fac     04 5E 05 F1 | 	add	fp, #4
04fb0     AF 66 02 F6 | 	mov	arg05, fp
04fb4     04 5E 05 F1 | 	add	fp, #4
04fb8     AF 68 02 F6 | 	mov	arg06, fp
04fbc     0C 5E 85 F1 | 	sub	fp, #12
04fc0     28 04 B0 FD | 	call	#_trackerplayer_spin2_getNoteData
04fc4                 | '     processChannel(channel, sampleNumber, period, effect)
04fc4     AF 5E 02 FB | 	rdlong	arg01, fp
04fc8     04 5E 05 F1 | 	add	fp, #4
04fcc     AF 60 02 FB | 	rdlong	arg02, fp
04fd0     04 5E 05 F1 | 	add	fp, #4
04fd4     AF 62 02 FB | 	rdlong	arg03, fp
04fd8     04 5E 05 F1 | 	add	fp, #4
04fdc     AF 64 02 FB | 	rdlong	arg04, fp
04fe0     0C 5E 85 F1 | 	sub	fp, #12
04fe4     CC 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
04fe8     AF 6E 02 FB | 	rdlong	local02, fp
04fec     01 6E 06 F1 | 	add	local02, #1
04ff0     AF 6E 62 FC | 	wrlong	local02, fp
04ff4     04 6E 5E F2 | 	cmps	local02, #4 wcz
04ff8     90 FF 9F CD |  if_b	jmp	#LR__0186
04ffc                 | ' 
04ffc                 | '   ' Incrementation the main counter that drives the whole play routine
04ffc                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04ffc     A1 FA 05 F1 | 	add	objptr, #161
05000     FD 6C C2 FA | 	rdbyte	local01, objptr
05004     01 6C 06 F1 | 	add	local01, #1
05008     FD 6C 42 FC | 	wrbyte	local01, objptr
0500c     03 FA 05 F1 | 	add	objptr, #3
05010     FD 70 C2 FA | 	rdbyte	local03, objptr
05014     01 FA 05 F1 | 	add	objptr, #1
05018     FD 72 C2 FA | 	rdbyte	local04, objptr
0501c     39 71 02 F1 | 	add	local03, local04
05020     04 FA 85 F1 | 	sub	objptr, #4
05024     FD 74 C2 FA | 	rdbyte	local05, objptr
05028     A1 FA 85 F1 | 	sub	objptr, #161
0502c     38 75 5A F2 | 	cmps	local05, local03 wcz
05030                 | '     tickCounter := 0
05030     A1 FA 05 31 |  if_ae	add	objptr, #161
05034     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
05038     A1 FA 85 31 |  if_ae	sub	objptr, #161
0503c                 | ' 
0503c                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
0503c                 | '   if tickCounter == 0
0503c     A1 FA 05 F1 | 	add	objptr, #161
05040     FD 6C CA FA | 	rdbyte	local01, objptr wz
05044     A1 FA 85 F1 | 	sub	objptr, #161
05048     C4 01 90 5D |  if_ne	jmp	#LR__0196
0504c                 | ' 
0504c                 | '     ' Handle the "pattern repeat" command, "E6"
0504c                 | '     if cmdE6_updatePositionCommon
0504c     F5 FB 05 F1 | 	add	objptr, #501
05050     FD 6C CA FA | 	rdbyte	local01, objptr wz
05054     F5 FB 85 F1 | 	sub	objptr, #501
05058     8C 00 90 AD |  if_e	jmp	#LR__0190
0505c                 | '       repeat i from 0 to LAST_CHANNEL
0505c     10 5E 05 F1 | 	add	fp, #16
05060     AF 00 68 FC | 	wrlong	#0, fp
05064     10 5E 85 F1 | 	sub	fp, #16
05068     08 B0 9F FE | 	loc	pa,	#(@LR__0189-@LR__0187)
0506c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05070                 | LR__0187
05070                 | '         if cmdE6_updatePosition[i]
05070     10 5E 05 F1 | 	add	fp, #16
05074     AF 6E 02 FB | 	rdlong	local02, fp
05078     10 5E 85 F1 | 	sub	fp, #16
0507c     F1 FB 05 F1 | 	add	objptr, #497
05080     FD 6E 02 F1 | 	add	local02, objptr
05084     37 73 CA FA | 	rdbyte	local04, local02 wz
05088     F1 FB 85 F1 | 	sub	objptr, #497
0508c     24 00 90 AD |  if_e	jmp	#LR__0188
05090                 | '           patternRow := cmdE6_memory[i]
05090     10 5E 05 F1 | 	add	fp, #16
05094     AF 6E 02 FB | 	rdlong	local02, fp
05098     10 5E 85 F1 | 	sub	fp, #16
0509c     E9 FB 05 F1 | 	add	objptr, #489
050a0     FD 6E 02 F1 | 	add	local02, objptr
050a4     37 73 C2 FA | 	rdbyte	local04, local02
050a8     47 FB 85 F1 | 	sub	objptr, #327
050ac     FD 72 42 FC | 	wrbyte	local04, objptr
050b0     A2 FA 85 F1 | 	sub	objptr, #162
050b4                 | LR__0188
050b4                 | '         cmdE6_updatePosition[i] := false
050b4     10 5E 05 F1 | 	add	fp, #16
050b8     AF 6E 02 FB | 	rdlong	local02, fp
050bc     F1 FB 05 F1 | 	add	objptr, #497
050c0     FD 6E 02 F1 | 	add	local02, objptr
050c4     37 01 48 FC | 	wrbyte	#0, local02
050c8     AF 6E 02 FB | 	rdlong	local02, fp
050cc     01 6E 06 F1 | 	add	local02, #1
050d0     AF 6E 62 FC | 	wrlong	local02, fp
050d4     10 5E 85 F1 | 	sub	fp, #16
050d8     04 6E 5E F2 | 	cmps	local02, #4 wcz
050dc     F1 FB 85 F1 | 	sub	objptr, #497
050e0     8C FF 9F CD |  if_b	jmp	#LR__0187
050e4                 | LR__0189
050e4     CC 00 90 FD | 	jmp	#LR__0194
050e8                 | LR__0190
050e8                 | ' 
050e8                 | '     ' Handle the "skip to next pattern with offset command", "D"
050e8                 | '     elseif cmdD_updatePosition
050e8     E6 FB 05 F1 | 	add	objptr, #486
050ec     FD 6C CA FA | 	rdbyte	local01, objptr wz
050f0     E6 FB 85 F1 | 	sub	objptr, #486
050f4     64 00 90 AD |  if_e	jmp	#LR__0191
050f8                 | '       if ++songPosition >= songLength
050f8     A3 FA 05 F1 | 	add	objptr, #163
050fc     FD 6C C2 FA | 	rdbyte	local01, objptr
05100     01 6C 06 F1 | 	add	local01, #1
05104     FD 6C 42 FC | 	wrbyte	local01, objptr
05108     FD 70 C2 FA | 	rdbyte	local03, objptr
0510c     09 FA 85 F1 | 	sub	objptr, #9
05110     FD 72 C2 FA | 	rdbyte	local04, objptr
05114     9A FA 85 F1 | 	sub	objptr, #154
05118     39 71 5A F2 | 	cmps	local03, local04 wcz
0511c                 | '         songPosition := 0
0511c     A3 FA 05 31 |  if_ae	add	objptr, #163
05120     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
05124     A3 FA 85 31 |  if_ae	sub	objptr, #163
05128                 | ' 
05128                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
05128     E4 FB 05 F1 | 	add	objptr, #484
0512c     FD 70 C2 FA | 	rdbyte	local03, objptr
05130     38 6D 02 F6 | 	mov	local01, local03
05134     02 6C 66 F0 | 	shl	local01, #2
05138     38 6D 02 F1 | 	add	local01, local03
0513c     01 6C 66 F0 | 	shl	local01, #1
05140     01 FA 05 F1 | 	add	objptr, #1
05144     FD 72 C2 FA | 	rdbyte	local04, objptr
05148     39 6D 02 F1 | 	add	local01, local04
0514c     43 FB 85 F1 | 	sub	objptr, #323
05150     FD 6C 42 FC | 	wrbyte	local01, objptr
05154     A2 FA 85 F1 | 	sub	objptr, #162
05158                 | ' 
05158                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
05158                 | '     else
05158     58 00 90 FD | 	jmp	#LR__0193
0515c                 | LR__0191
0515c                 | '       if ++patternRow >= PATTERN_LENGTH
0515c     A2 FA 05 F1 | 	add	objptr, #162
05160     FD 6C C2 FA | 	rdbyte	local01, objptr
05164     01 6C 06 F1 | 	add	local01, #1
05168     FD 6C 42 FC | 	wrbyte	local01, objptr
0516c     FD 70 C2 FA | 	rdbyte	local03, objptr
05170     A2 FA 85 F1 | 	sub	objptr, #162
05174     40 70 5E F2 | 	cmps	local03, #64 wcz
05178     38 00 90 CD |  if_b	jmp	#LR__0192
0517c                 | '         patternRow := 0
0517c     A2 FA 05 F1 | 	add	objptr, #162
05180     FD 00 48 FC | 	wrbyte	#0, objptr
05184                 | ' 
05184                 | '         if ++songPosition >= songLength
05184     01 FA 05 F1 | 	add	objptr, #1
05188     FD 6C C2 FA | 	rdbyte	local01, objptr
0518c     01 6C 06 F1 | 	add	local01, #1
05190     FD 6C 42 FC | 	wrbyte	local01, objptr
05194     FD 70 C2 FA | 	rdbyte	local03, objptr
05198     09 FA 85 F1 | 	sub	objptr, #9
0519c     FD 72 C2 FA | 	rdbyte	local04, objptr
051a0     9A FA 85 F1 | 	sub	objptr, #154
051a4     39 71 5A F2 | 	cmps	local03, local04 wcz
051a8                 | '           songPosition := 0
051a8     A3 FA 05 31 |  if_ae	add	objptr, #163
051ac     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
051b0     A3 FA 85 31 |  if_ae	sub	objptr, #163
051b4                 | LR__0192
051b4                 | LR__0193
051b4                 | LR__0194
051b4                 | ' 
051b4                 | '     ' Handle "jump to song position" command, "B"
051b4                 | '     if cmdB_updatePosition
051b4     E8 FB 05 F1 | 	add	objptr, #488
051b8     FD 6C CA FA | 	rdbyte	local01, objptr wz
051bc     E8 FB 85 F1 | 	sub	objptr, #488
051c0     28 00 90 AD |  if_e	jmp	#LR__0195
051c4                 | ' 
051c4                 | '       songPosition := cmdB_memoryZ
051c4     E7 FB 05 F1 | 	add	objptr, #487
051c8     FD 6C C2 FA | 	rdbyte	local01, objptr
051cc     44 FB 85 F1 | 	sub	objptr, #324
051d0     FD 6C 42 FC | 	wrbyte	local01, objptr
051d4                 | ' 
051d4                 | '       ifnot cmdD_updatePosition
051d4     43 FB 05 F1 | 	add	objptr, #323
051d8     FD 6C CA FA | 	rdbyte	local01, objptr wz
051dc     E6 FB 85 F1 | 	sub	objptr, #486
051e0                 | '         patternRow := 0
051e0     A2 FA 05 A1 |  if_e	add	objptr, #162
051e4     FD 00 48 AC |  if_e	wrbyte	#0, objptr
051e8     A2 FA 85 A1 |  if_e	sub	objptr, #162
051ec                 | LR__0195
051ec                 | ' 
051ec                 | '     ' We need to be sure that all positioning commands are reset for the next tick
051ec                 | '     cmdE6_updatePositionCommon := false
051ec     F5 FB 05 F1 | 	add	objptr, #501
051f0     FD 00 48 FC | 	wrbyte	#0, objptr
051f4                 | '     cmdB_updatePosition := false
051f4     0D FA 85 F1 | 	sub	objptr, #13
051f8     FD 00 48 FC | 	wrbyte	#0, objptr
051fc                 | '     cmdD_updatePosition := false
051fc     02 FA 85 F1 | 	sub	objptr, #2
05200     FD 00 48 FC | 	wrbyte	#0, objptr
05204                 | '     patternDelay := 0
05204     41 FB 85 F1 | 	sub	objptr, #321
05208     FD 00 48 FC | 	wrbyte	#0, objptr
0520c     A5 FA 85 F1 | 	sub	objptr, #165
05210                 | LR__0196
05210                 | LR__0197
05210     AF F0 03 F6 | 	mov	ptra, fp
05214     BA 00 A0 FD | 	call	#popregs_
05218                 | _trackerplayer_spin2_tick_ret
05218     2D 00 64 FD | 	ret
0521c                 | 
0521c                 | ' 
0521c                 | ' 
0521c                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
0521c                 | _trackerplayer_spin2_amigaPeriodToNote
0521c                 | ' 
0521c                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
0521c     00 1E 06 F6 | 	mov	_var01, #0
05220     28 AE 9F FE | 	loc	pa,	#(@LR__0199-@LR__0198)
05224     93 00 A0 FD | 	call	#FCACHE_LOAD_
05228                 | LR__0198
05228                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
05228     06 00 00 FF 
0522c     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05230     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05234     30 23 02 F6 | 	mov	_var03, arg02
05238     03 22 66 F0 | 	shl	_var03, #3
0523c     30 23 02 F1 | 	add	_var03, arg02
05240     03 22 66 F0 | 	shl	_var03, #3
05244     11 21 02 F1 | 	add	_var02, _var03
05248     0F 25 02 F6 | 	mov	_var04, _var01
0524c     01 24 66 F0 | 	shl	_var04, #1
05250     10 25 02 F1 | 	add	_var04, _var02
05254     12 27 E2 FA | 	rdword	_var05, _var04
05258     2F 27 5A F2 | 	cmps	_var05, arg01 wcz
0525c                 | '       quit
0525c     06 00 00 FF 
05260     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05264     0C 00 90 ED |  if_be	jmp	#LR__0200
05268     01 1E 06 F1 | 	add	_var01, #1
0526c     24 1E 5E F2 | 	cmps	_var01, #36 wcz
05270     B4 FF 9F CD |  if_b	jmp	#LR__0198
05274                 | LR__0199
05274                 | LR__0200
05274                 | ' 
05274                 | '   return i
05274     0F 19 02 F6 | 	mov	result1, _var01
05278                 | _trackerplayer_spin2_amigaPeriodToNote_ret
05278     2D 00 64 FD | 	ret
0527c                 | 
0527c                 | ' 
0527c                 | ' 
0527c                 | ' PRI retunePeriod(period, fTune) | noteNumber
0527c                 | _trackerplayer_spin2_retunePeriod
0527c     06 5A 05 F6 | 	mov	COUNT_, #6
05280     B0 00 A0 FD | 	call	#pushregs_
05284     2F 6D 02 F6 | 	mov	local01, arg01
05288     30 6F 02 F6 | 	mov	local02, arg02
0528c                 | ' 
0528c                 | '   if period > 0 and fTune < 16
0528c     00 6C 5E F2 | 	cmps	local01, #0 wcz
05290     50 00 90 ED |  if_be	jmp	#LR__0201
05294     10 6E 5E F2 | 	cmps	local02, #16 wcz
05298     48 00 90 3D |  if_ae	jmp	#LR__0201
0529c                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
0529c     36 5F E2 FA | 	rdword	arg01, local01
052a0     00 60 06 F6 | 	mov	arg02, #0
052a4     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
052a8     0C 71 02 F6 | 	mov	local03, result1
052ac                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
052ac     06 00 00 FF 
052b0     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
052b4     0A 73 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
052b8     37 75 02 F6 | 	mov	local05, local02
052bc     03 74 66 F0 | 	shl	local05, #3
052c0     37 75 02 F1 | 	add	local05, local02
052c4     03 74 66 F0 | 	shl	local05, #3
052c8     3A 73 02 F1 | 	add	local04, local05
052cc     01 70 66 F0 | 	shl	local03, #1
052d0     39 71 02 F1 | 	add	local03, local04
052d4     38 77 E2 FA | 	rdword	local06, local03
052d8     36 77 52 FC | 	wrword	local06, local01
052dc     06 00 00 FF 
052e0     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
052e4                 | LR__0201
052e4     AF F0 03 F6 | 	mov	ptra, fp
052e8     BA 00 A0 FD | 	call	#popregs_
052ec                 | _trackerplayer_spin2_retunePeriod_ret
052ec     2D 00 64 FD | 	ret
052f0                 | 
052f0                 | ' 
052f0                 | ' 
052f0                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
052f0                 | _trackerplayer_spin2_getSampleInfo
052f0     2F 1F 0A F6 | 	mov	_var01, arg01 wz
052f4                 | ' 
052f4                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
052f4     08 00 90 AD |  if_e	jmp	#LR__0202
052f8     1F 1E 5E F2 | 	cmps	_var01, #31 wcz
052fc     08 00 90 ED |  if_be	jmp	#LR__0203
05300                 | LR__0202
05300                 | '     long[samplePtr] := 0
05300     30 01 68 FC | 	wrlong	#0, arg02
05304                 | '     return
05304     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
05308                 | LR__0203
05308                 | ' 
05308                 | '   sampleNumber--
05308     01 1E 86 F1 | 	sub	_var01, #1
0530c                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
0530c     0A FA 05 F1 | 	add	objptr, #10
05310     FD 20 02 FB | 	rdlong	_var02, objptr
05314     0F 23 02 F6 | 	mov	_var03, _var01
05318     04 22 66 F0 | 	shl	_var03, #4
0531c     0F 23 82 F1 | 	sub	_var03, _var01
05320     01 22 66 F0 | 	shl	_var03, #1
05324     11 21 02 F1 | 	add	_var02, _var03
05328                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
05328     10 25 02 F6 | 	mov	_var04, _var02
0532c     16 24 06 F1 | 	add	_var04, #22
05330     12 27 C2 FA | 	rdbyte	_var05, _var04
05334     08 26 66 F0 | 	shl	_var05, #8
05338     10 23 02 F6 | 	mov	_var03, _var02
0533c     17 22 06 F1 | 	add	_var03, #23
05340     11 29 C2 FA | 	rdbyte	_var06, _var03
05344     14 27 42 F5 | 	or	_var05, _var06
05348     01 26 66 F0 | 	shl	_var05, #1
0534c     31 27 62 FC | 	wrlong	_var05, arg03
05350                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
05350     10 27 02 F6 | 	mov	_var05, _var02
05354     18 26 06 F1 | 	add	_var05, #24
05358     13 25 C2 FA | 	rdbyte	_var04, _var05
0535c     32 25 62 FC | 	wrlong	_var04, arg04
05360                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
05360     10 27 02 F6 | 	mov	_var05, _var02
05364     19 26 06 F1 | 	add	_var05, #25
05368     13 25 C2 FA | 	rdbyte	_var04, _var05
0536c     33 25 62 FC | 	wrlong	_var04, arg05
05370                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
05370     10 25 02 F6 | 	mov	_var04, _var02
05374     1A 24 06 F1 | 	add	_var04, #26
05378     12 27 C2 FA | 	rdbyte	_var05, _var04
0537c     08 26 66 F0 | 	shl	_var05, #8
05380     10 23 02 F6 | 	mov	_var03, _var02
05384     1B 22 06 F1 | 	add	_var03, #27
05388     11 29 C2 FA | 	rdbyte	_var06, _var03
0538c     14 27 42 F5 | 	or	_var05, _var06
05390     01 26 66 F0 | 	shl	_var05, #1
05394     34 27 62 FC | 	wrlong	_var05, arg06
05398                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
05398     10 25 02 F6 | 	mov	_var04, _var02
0539c     1C 24 06 F1 | 	add	_var04, #28
053a0     12 27 C2 FA | 	rdbyte	_var05, _var04
053a4     08 26 66 F0 | 	shl	_var05, #8
053a8     1D 20 06 F1 | 	add	_var02, #29
053ac     10 29 C2 FA | 	rdbyte	_var06, _var02
053b0     14 27 42 F5 | 	or	_var05, _var06
053b4     01 26 66 F0 | 	shl	_var05, #1
053b8     35 27 62 FC | 	wrlong	_var05, arg07
053bc                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
053bc     02 1E 66 F0 | 	shl	_var01, #2
053c0     08 FA 05 F1 | 	add	objptr, #8
053c4     FD 1E 02 F1 | 	add	_var01, objptr
053c8     0F 23 02 FB | 	rdlong	_var03, _var01
053cc     30 23 62 FC | 	wrlong	_var03, arg02
053d0                 | ' 
053d0                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
053d0     35 27 02 FB | 	rdlong	_var05, arg07
053d4     02 26 0E F2 | 	cmp	_var05, #2 wz
053d8     12 FA 85 F1 | 	sub	objptr, #18
053dc     08 00 90 5D |  if_ne	jmp	#LR__0204
053e0     34 25 0A FB | 	rdlong	_var04, arg06 wz
053e4                 | '     long[repeatLength] := 1
053e4     35 03 68 AC |  if_e	wrlong	#1, arg07
053e8                 | LR__0204
053e8                 | _trackerplayer_spin2_getSampleInfo_ret
053e8     2D 00 64 FD | 	ret
053ec                 | 
053ec                 | ' 
053ec                 | ' 
053ec                 | ' PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr
053ec                 | _trackerplayer_spin2_getNoteData
053ec                 | ' 
053ec                 | '   ' Get the note data for a specific channel/song position/pattern row
053ec                 | '   patternNumber := byte[songPositionsLut][position & 127]
053ec     96 FA 05 F1 | 	add	objptr, #150
053f0     FD 1E 02 FB | 	rdlong	_var01, objptr
053f4     7F 60 06 F5 | 	and	arg02, #127
053f8     0F 61 02 F1 | 	add	arg02, _var01
053fc     30 21 C2 FA | 	rdbyte	_var02, arg02
05400                 | '   patternPtr    := patternsData + (patternNumber << 10)
05400     04 FA 85 F1 | 	sub	objptr, #4
05404     FD 22 02 FB | 	rdlong	_var03, objptr
05408     92 FA 85 F1 | 	sub	objptr, #146
0540c     0A 20 66 F0 | 	shl	_var02, #10
05410     10 23 02 F1 | 	add	_var03, _var02
05414                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
05414     3F 62 06 F5 | 	and	arg03, #63
05418     04 62 66 F0 | 	shl	arg03, #4
0541c     31 23 02 F1 | 	add	_var03, arg03
05420     03 5E 06 F5 | 	and	arg01, #3
05424     02 5E 66 F0 | 	shl	arg01, #2
05428     2F 23 02 F1 | 	add	_var03, arg01
0542c                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
0542c     11 25 C2 FA | 	rdbyte	_var04, _var03
05430     18 24 66 F0 | 	shl	_var04, #24
05434     01 22 06 F1 | 	add	_var03, #1
05438     11 27 C2 FA | 	rdbyte	_var05, _var03
0543c     10 26 66 F0 | 	shl	_var05, #16
05440     13 25 42 F5 | 	or	_var04, _var05
05444     01 22 06 F1 | 	add	_var03, #1
05448     11 29 C2 FA | 	rdbyte	_var06, _var03
0544c     08 28 66 F0 | 	shl	_var06, #8
05450     14 25 42 F5 | 	or	_var04, _var06
05454     01 22 06 F1 | 	add	_var03, #1
05458     11 2B C2 FA | 	rdbyte	_var07, _var03
0545c     15 25 42 F5 | 	or	_var04, _var07
05460                 | ' 
05460                 | '   ' Extract the different sub parts from the data
05460                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
05460     12 2D 02 F6 | 	mov	_var08, _var04
05464     0C 2C 46 F0 | 	shr	_var08, #12
05468     0F 2C 06 F5 | 	and	_var08, #15
0546c     12 27 02 F6 | 	mov	_var05, _var04
05470     18 26 46 F0 | 	shr	_var05, #24
05474     F0 26 06 F5 | 	and	_var05, #240
05478     13 2D 42 F5 | 	or	_var08, _var05
0547c     32 2D 62 FC | 	wrlong	_var08, arg04
05480                 | '   long[period]       :=  (data >> 16) & $FFF
05480     12 2D 02 F6 | 	mov	_var08, _var04
05484     10 2C 46 F0 | 	shr	_var08, #16
05488     07 00 00 FF 
0548c     FF 2D 06 F5 | 	and	_var08, ##4095
05490     33 2D 62 FC | 	wrlong	_var08, arg05
05494                 | '   long[effect]       :=   data & $FFF
05494     07 00 00 FF 
05498     FF 25 06 F5 | 	and	_var04, ##4095
0549c     34 25 62 FC | 	wrlong	_var04, arg06
054a0                 | _trackerplayer_spin2_getNoteData_ret
054a0     2D 00 64 FD | 	ret
054a4                 | 
054a4                 | ' 
054a4                 | ' 
054a4                 | ' PRI triggerNote(channel)
054a4                 | _trackerplayer_spin2_triggerNote
054a4                 | ' 
054a4                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
054a4     2F 1F 02 F6 | 	mov	_var01, arg01
054a8     02 1E 66 F0 | 	shl	_var01, #2
054ac     47 FB 05 F1 | 	add	objptr, #327
054b0     FD 1E 02 F1 | 	add	_var01, objptr
054b4     2F 21 02 F6 | 	mov	_var02, arg01
054b8     90 FA 85 F1 | 	sub	objptr, #144
054bc     0F 23 02 FB | 	rdlong	_var03, _var01
054c0     FD 20 02 F1 | 	add	_var02, objptr
054c4     10 23 42 FC | 	wrbyte	_var03, _var02
054c8                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
054c8     2F 1F 02 F6 | 	mov	_var01, arg01
054cc     02 1E 66 F0 | 	shl	_var01, #2
054d0     80 FA 05 F1 | 	add	objptr, #128
054d4     FD 1E 02 F1 | 	add	_var01, objptr
054d8     2F 21 02 F6 | 	mov	_var02, arg01
054dc     02 20 66 F0 | 	shl	_var02, #2
054e0     90 FA 85 F1 | 	sub	objptr, #144
054e4     0F 23 02 FB | 	rdlong	_var03, _var01
054e8     FD 20 02 F1 | 	add	_var02, objptr
054ec     10 23 62 FC | 	wrlong	_var03, _var02
054f0                 | '   currPeriod[channel]       := lastSetPeriod[channel]
054f0     2F 1F 02 F6 | 	mov	_var01, arg01
054f4     02 1E 66 F0 | 	shl	_var01, #2
054f8     80 FA 05 F1 | 	add	objptr, #128
054fc     FD 1E 02 F1 | 	add	_var01, objptr
05500     2F 21 02 F6 | 	mov	_var02, arg01
05504     02 20 66 F0 | 	shl	_var02, #2
05508     48 FA 85 F1 | 	sub	objptr, #72
0550c     0F 23 02 FB | 	rdlong	_var03, _var01
05510     FD 20 02 F1 | 	add	_var02, objptr
05514     10 23 62 FC | 	wrlong	_var03, _var02
05518                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
05518     2F 1F 02 F6 | 	mov	_var01, arg01
0551c     02 1E 66 F0 | 	shl	_var01, #2
05520     78 FA 05 F1 | 	add	objptr, #120
05524     FD 1E 02 F1 | 	add	_var01, objptr
05528     2F 25 02 F6 | 	mov	_var04, arg01
0552c     01 24 66 F0 | 	shl	_var04, #1
05530     9C FA 85 F1 | 	sub	objptr, #156
05534     0F 27 02 FB | 	rdlong	_var05, _var01
05538     FD 24 02 F1 | 	add	_var04, objptr
0553c     12 27 52 FC | 	wrword	_var05, _var04
05540                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
05540     2F 1F 02 F6 | 	mov	_var01, arg01
05544     02 1E 66 F0 | 	shl	_var01, #2
05548     AC FA 05 F1 | 	add	objptr, #172
0554c     FD 1E 02 F1 | 	add	_var01, objptr
05550     2F 21 02 F6 | 	mov	_var02, arg01
05554     02 20 66 F0 | 	shl	_var02, #2
05558     A4 FA 85 F1 | 	sub	objptr, #164
0555c     0F 23 02 FB | 	rdlong	_var03, _var01
05560     FD 20 02 F1 | 	add	_var02, objptr
05564     10 23 62 FC | 	wrlong	_var03, _var02
05568                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
05568     2F 1F 02 F6 | 	mov	_var01, arg01
0556c     02 1E 66 F0 | 	shl	_var01, #2
05570     B4 FA 05 F1 | 	add	objptr, #180
05574     FD 1E 02 F1 | 	add	_var01, objptr
05578     2F 25 02 F6 | 	mov	_var04, arg01
0557c     01 24 66 F0 | 	shl	_var04, #1
05580     A0 FA 85 F1 | 	sub	objptr, #160
05584     0F 27 02 FB | 	rdlong	_var05, _var01
05588     FD 24 02 F1 | 	add	_var04, objptr
0558c     12 27 52 FC | 	wrword	_var05, _var04
05590                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
05590     2F 29 02 F6 | 	mov	_var06, arg01
05594     1F FB 05 F1 | 	add	objptr, #287
05598     FD 28 02 F1 | 	add	_var06, objptr
0559c     14 1F C2 FA | 	rdbyte	_var01, _var06
055a0     01 1E 06 F1 | 	add	_var01, #1
055a4     FD 5E 02 F1 | 	add	arg01, objptr
055a8     2F 1F 42 FC | 	wrbyte	_var01, arg01
055ac     F6 FB 85 F1 | 	sub	objptr, #502
055b0                 | _trackerplayer_spin2_triggerNote_ret
055b0     2D 00 64 FD | 	ret
055b4                 | 
055b4                 | ' 
055b4                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
055b4                 | _trackerplayer_spin2_processChannel
055b4     08 5A 05 F6 | 	mov	COUNT_, #8
055b8     B0 00 A0 FD | 	call	#pushregs_
055bc     24 F0 07 F1 | 	add	ptra, #36
055c0     AF 5E 62 FC | 	wrlong	arg01, fp
055c4     04 5E 05 F1 | 	add	fp, #4
055c8     AF 60 62 FC | 	wrlong	arg02, fp
055cc     04 5E 05 F1 | 	add	fp, #4
055d0     AF 62 62 FC | 	wrlong	arg03, fp
055d4     04 5E 05 F1 | 	add	fp, #4
055d8     AF 64 62 FC | 	wrlong	arg04, fp
055dc     0C 5E 85 F1 | 	sub	fp, #12
055e0                 | ' 
055e0                 | '   channel := channel & 3
055e0     AF 6C 02 FB | 	rdlong	local01, fp
055e4     03 6C 06 F5 | 	and	local01, #3
055e8     AF 6C 62 FC | 	wrlong	local01, fp
055ec                 | '   cmd     := (effect >> 8) & $F
055ec     0C 5E 05 F1 | 	add	fp, #12
055f0     AF 6C 02 FB | 	rdlong	local01, fp
055f4     08 6C 46 F0 | 	shr	local01, #8
055f8     0F 6C 06 F5 | 	and	local01, #15
055fc     BA FB 05 F1 | 	add	objptr, #442
05600     FD 6C 42 FC | 	wrbyte	local01, objptr
05604                 | '   x       := (effect >> 4) & $F
05604     AF 6C 02 FB | 	rdlong	local01, fp
05608     04 6C 46 F0 | 	shr	local01, #4
0560c     0F 6C 06 F5 | 	and	local01, #15
05610     03 FA 85 F1 | 	sub	objptr, #3
05614     FD 6C 42 FC | 	wrbyte	local01, objptr
05618                 | '   y       := (effect     ) & $F
05618     AF 6C 02 FB | 	rdlong	local01, fp
0561c     0F 6C 06 F5 | 	and	local01, #15
05620     01 FA 05 F1 | 	add	objptr, #1
05624     FD 6C 42 FC | 	wrbyte	local01, objptr
05628                 | '   z       := (effect     ) & $FF
05628     AF 6C 02 FB | 	rdlong	local01, fp
0562c     0C 5E 85 F1 | 	sub	fp, #12
05630     FF 6C 06 F5 | 	and	local01, #255
05634     01 FA 05 F1 | 	add	objptr, #1
05638     FD 6C 42 FC | 	wrbyte	local01, objptr
0563c                 | ' 
0563c                 | '   ' Handle everything that executes on "tick zero"
0563c                 | '   if tickCounter == 0
0563c     18 FB 85 F1 | 	sub	objptr, #280
05640     FD 6C CA FA | 	rdbyte	local01, objptr wz
05644     A1 FA 85 F1 | 	sub	objptr, #161
05648     DC 03 90 5D |  if_ne	jmp	#LR__0215
0564c                 | ' 
0564c                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
0564c                 | '     deltaPeriod[channel] := 0
0564c     AF 6C 02 FB | 	rdlong	local01, fp
05650     02 6C 66 F0 | 	shl	local01, #2
05654     EF FA 05 F1 | 	add	objptr, #239
05658     FD 6C 02 F1 | 	add	local01, objptr
0565c     36 01 68 FC | 	wrlong	#0, local01
05660                 | '     deltaVolume[channel] := 0
05660     AF 6C 02 FB | 	rdlong	local01, fp
05664     02 6C 66 F0 | 	shl	local01, #2
05668     20 FA 05 F1 | 	add	objptr, #32
0566c     FD 6C 02 F1 | 	add	local01, objptr
05670     36 01 68 FC | 	wrlong	#0, local01
05674                 | ' 
05674                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
05674                 | '     if sampleNumber > 0
05674     04 5E 05 F1 | 	add	fp, #4
05678     AF 6C 02 FB | 	rdlong	local01, fp
0567c     04 5E 85 F1 | 	sub	fp, #4
05680     00 6C 5E F2 | 	cmps	local01, #0 wcz
05684     0F FB 85 F1 | 	sub	objptr, #271
05688     20 00 90 ED |  if_be	jmp	#LR__0205
0568c                 | '       sampleNumber_memory[channel] := sampleNumber
0568c     AF 6C 02 FB | 	rdlong	local01, fp
05690     E0 FB 05 F1 | 	add	objptr, #480
05694     FD 6C 02 F1 | 	add	local01, objptr
05698     04 5E 05 F1 | 	add	fp, #4
0569c     AF 6E 02 FB | 	rdlong	local02, fp
056a0     04 5E 85 F1 | 	sub	fp, #4
056a4     36 6F 42 FC | 	wrbyte	local02, local01
056a8     E0 FB 85 F1 | 	sub	objptr, #480
056ac                 | LR__0205
056ac                 | ' 
056ac                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
056ac                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
056ac     AF 70 02 FB | 	rdlong	local03, fp
056b0     E0 FB 05 F1 | 	add	objptr, #480
056b4     FD 70 02 F1 | 	add	local03, objptr
056b8     38 5F C2 FA | 	rdbyte	arg01, local03
056bc     20 5E 05 F1 | 	add	fp, #32
056c0     AF 60 02 F6 | 	mov	arg02, fp
056c4     10 5E 85 F1 | 	sub	fp, #16
056c8     AF 62 02 F6 | 	mov	arg03, fp
056cc     31 FA 85 F1 | 	sub	objptr, #49
056d0     FD 64 02 F6 | 	mov	arg04, objptr
056d4     AF FB 85 F1 | 	sub	objptr, #431
056d8     04 5E 05 F1 | 	add	fp, #4
056dc     AF 66 02 F6 | 	mov	arg05, fp
056e0     04 5E 05 F1 | 	add	fp, #4
056e4     AF 68 02 F6 | 	mov	arg06, fp
056e8     04 5E 05 F1 | 	add	fp, #4
056ec     AF 72 02 F6 | 	mov	local04, fp
056f0     39 75 02 F6 | 	mov	local05, local04
056f4     3A 6B 02 F6 | 	mov	arg07, local05
056f8     1C 5E 85 F1 | 	sub	fp, #28
056fc     F0 FB BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
05700                 | ' 
05700                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
05700                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
05700                 | '     if sampleNumber > 0
05700     04 5E 05 F1 | 	add	fp, #4
05704     AF 6C 02 FB | 	rdlong	local01, fp
05708     04 5E 85 F1 | 	sub	fp, #4
0570c     00 6C 5E F2 | 	cmps	local01, #0 wcz
05710     24 00 90 ED |  if_be	jmp	#LR__0206
05714                 | '       currVolume[channel] := volume
05714     AF 6C 02 FB | 	rdlong	local01, fp
05718     02 6C 66 F0 | 	shl	local01, #2
0571c     FF FA 05 F1 | 	add	objptr, #255
05720     FD 6C 02 F1 | 	add	local01, objptr
05724     14 5E 05 F1 | 	add	fp, #20
05728     AF 6E 02 FB | 	rdlong	local02, fp
0572c     14 5E 85 F1 | 	sub	fp, #20
05730     36 6F 62 FC | 	wrlong	local02, local01
05734     FF FA 85 F1 | 	sub	objptr, #255
05738                 | LR__0206
05738                 | ' 
05738                 | '     ' Handle all commands that executes on "zero tick"
05738                 | '     sampleOffset := 0
05738     B3 FB 05 F1 | 	add	objptr, #435
0573c     FD 00 68 FC | 	wrlong	#0, objptr
05740     B3 FB 85 F1 | 	sub	objptr, #435
05744                 | '     handleZeroTickCommands(channel)
05744     AF 5E 02 FB | 	rdlong	arg01, fp
05748     98 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
0574c                 | ' 
0574c                 | '     ' Prepare sample data for triggering (now or later)
0574c                 | '     if period > 0
0574c     08 5E 05 F1 | 	add	fp, #8
05750     AF 6C 02 FB | 	rdlong	local01, fp
05754     08 5E 85 F1 | 	sub	fp, #8
05758     00 6C 5E F2 | 	cmps	local01, #0 wcz
0575c     D0 02 90 ED |  if_be	jmp	#LR__0216
05760                 | ' 
05760                 | '       retunePeriod(@period, fineTune)
05760     08 5E 05 F1 | 	add	fp, #8
05764     AF 5E 02 F6 | 	mov	arg01, fp
05768     08 5E 85 F1 | 	sub	fp, #8
0576c     AF FB 05 F1 | 	add	objptr, #431
05770     FD 60 02 FB | 	rdlong	arg02, objptr
05774     AF FB 85 F1 | 	sub	objptr, #431
05778     00 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
0577c                 | '       currFineTune[channel]        := fineTune
0577c     AF 6C 02 FB | 	rdlong	local01, fp
05780     D3 FA 05 F1 | 	add	objptr, #211
05784     FD 6C 02 F1 | 	add	local01, objptr
05788     DC FA 05 F1 | 	add	objptr, #220
0578c     FD 6E 02 FB | 	rdlong	local02, objptr
05790     36 6F 42 FC | 	wrbyte	local02, local01
05794                 | '       lastSetPeriod[channel]       := period
05794     AF 6C 02 FB | 	rdlong	local01, fp
05798     02 6C 66 F0 | 	shl	local01, #2
0579c     88 FA 85 F1 | 	sub	objptr, #136
057a0     FD 6C 02 F1 | 	add	local01, objptr
057a4     08 5E 05 F1 | 	add	fp, #8
057a8     AF 6E 02 FB | 	rdlong	local02, fp
057ac     36 6F 62 FC | 	wrlong	local02, local01
057b0     08 5E 85 F1 | 	sub	fp, #8
057b4                 | '       lastSetRepeatLength[channel] := repeatLength
057b4     AF 6C 02 FB | 	rdlong	local01, fp
057b8     02 6C 66 F0 | 	shl	local01, #2
057bc     40 FA 05 F1 | 	add	objptr, #64
057c0     FD 6C 02 F1 | 	add	local01, objptr
057c4     1C 5E 05 F1 | 	add	fp, #28
057c8     AF 6E 02 FB | 	rdlong	local02, fp
057cc     36 6F 62 FC | 	wrlong	local02, local01
057d0     1C 5E 85 F1 | 	sub	fp, #28
057d4                 | '       lastSetRepeatPoint[channel]  := repeatPoint
057d4     AF 6C 02 FB | 	rdlong	local01, fp
057d8     02 6C 66 F0 | 	shl	local01, #2
057dc     10 FA 05 F1 | 	add	objptr, #16
057e0     FD 6C 02 F1 | 	add	local01, objptr
057e4     18 5E 05 F1 | 	add	fp, #24
057e8     AF 6E 02 FB | 	rdlong	local02, fp
057ec     36 6F 62 FC | 	wrlong	local02, local01
057f0                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
057f0     08 5E 05 F1 | 	add	fp, #8
057f4     AF 6C 02 FB | 	rdlong	local01, fp
057f8     20 5E 85 F1 | 	sub	fp, #32
057fc     3C FA 05 F1 | 	add	objptr, #60
05800     FD 6E 02 FB | 	rdlong	local02, objptr
05804     37 6D 02 F1 | 	add	local01, local02
05808     AF 76 02 FB | 	rdlong	local06, fp
0580c     02 76 66 F0 | 	shl	local06, #2
05810     7C FA 85 F1 | 	sub	objptr, #124
05814     FD 78 02 F6 | 	mov	local07, objptr
05818     FD 76 02 F1 | 	add	local06, objptr
0581c     3B 6D 62 FC | 	wrlong	local01, local06
05820                 | '       lastSetSampleNr[channel]     := sampleNumber
05820     AF 6C 02 FB | 	rdlong	local01, fp
05824     02 6C 66 F0 | 	shl	local01, #2
05828     10 FA 05 F1 | 	add	objptr, #16
0582c     FD 6C 02 F1 | 	add	local01, objptr
05830     04 5E 05 F1 | 	add	fp, #4
05834     AF 6E 02 FB | 	rdlong	local02, fp
05838     36 6F 62 FC | 	wrlong	local02, local01
0583c                 | ' 
0583c                 | '       ' This calculates the correct sample length in all situations
0583c                 | '       if repeatLength > 2
0583c     18 5E 05 F1 | 	add	fp, #24
05840     AF 6C 02 FB | 	rdlong	local01, fp
05844     1C 5E 85 F1 | 	sub	fp, #28
05848     02 6C 5E F2 | 	cmps	local01, #2 wcz
0584c     47 FB 85 F1 | 	sub	objptr, #327
05850     20 00 90 ED |  if_be	jmp	#LR__0207
05854                 | '         sampleLength := repeatPoint + repeatLength
05854     18 5E 05 F1 | 	add	fp, #24
05858     AF 6C 02 FB | 	rdlong	local01, fp
0585c     04 5E 05 F1 | 	add	fp, #4
05860     AF 6E 02 FB | 	rdlong	local02, fp
05864     37 6D 02 F1 | 	add	local01, local02
05868     0C 5E 85 F1 | 	sub	fp, #12
0586c     AF 6C 62 FC | 	wrlong	local01, fp
05870     10 5E 85 F1 | 	sub	fp, #16
05874                 | LR__0207
05874                 | ' 
05874                 | '       if sampleLength - sampleOffset < 1
05874     10 5E 05 F1 | 	add	fp, #16
05878     AF 6C 02 FB | 	rdlong	local01, fp
0587c     10 5E 85 F1 | 	sub	fp, #16
05880     B3 FB 05 F1 | 	add	objptr, #435
05884     FD 6E 02 FB | 	rdlong	local02, objptr
05888     B3 FB 85 F1 | 	sub	objptr, #435
0588c     37 6D 82 F1 | 	sub	local01, local02
05890     01 6C 5E F2 | 	cmps	local01, #1 wcz
05894     1C 00 90 3D |  if_ae	jmp	#LR__0208
05898                 | '         lastSetSampleLength[channel] := 1
05898     AF 6C 02 FB | 	rdlong	local01, fp
0589c     02 6C 66 F0 | 	shl	local01, #2
058a0     57 FB 05 F1 | 	add	objptr, #343
058a4     FD 6C 02 F1 | 	add	local01, objptr
058a8     36 03 68 FC | 	wrlong	#1, local01
058ac                 | '       else
058ac     57 FB 85 F1 | 	sub	objptr, #343
058b0     34 00 90 FD | 	jmp	#LR__0209
058b4                 | LR__0208
058b4                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
058b4     10 5E 05 F1 | 	add	fp, #16
058b8     AF 6C 02 FB | 	rdlong	local01, fp
058bc     10 5E 85 F1 | 	sub	fp, #16
058c0     B3 FB 05 F1 | 	add	objptr, #435
058c4     FD 6E 02 FB | 	rdlong	local02, objptr
058c8     37 6D 82 F1 | 	sub	local01, local02
058cc     AF 76 02 FB | 	rdlong	local06, fp
058d0     02 76 66 F0 | 	shl	local06, #2
058d4     5C FA 85 F1 | 	sub	objptr, #92
058d8     FD 78 02 F6 | 	mov	local07, objptr
058dc     FD 76 02 F1 | 	add	local06, objptr
058e0     3B 6D 62 FC | 	wrlong	local01, local06
058e4     57 FB 85 F1 | 	sub	objptr, #343
058e8                 | LR__0209
058e8                 | ' 
058e8                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
058e8                 | '       if sampleOffset > sampleLength
058e8     B3 FB 05 F1 | 	add	objptr, #435
058ec     FD 6C 02 FB | 	rdlong	local01, objptr
058f0     B3 FB 85 F1 | 	sub	objptr, #435
058f4     10 5E 05 F1 | 	add	fp, #16
058f8     AF 6E 02 FB | 	rdlong	local02, fp
058fc     10 5E 85 F1 | 	sub	fp, #16
05900     37 6D 5A F2 | 	cmps	local01, local02 wcz
05904     54 00 90 ED |  if_be	jmp	#LR__0210
05908                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
05908     20 5E 05 F1 | 	add	fp, #32
0590c     AF 6C 02 FB | 	rdlong	local01, fp
05910     08 5E 85 F1 | 	sub	fp, #8
05914     AF 6E 02 FB | 	rdlong	local02, fp
05918     18 5E 85 F1 | 	sub	fp, #24
0591c     37 6D 02 F1 | 	add	local01, local02
05920     AF 76 02 FB | 	rdlong	local06, fp
05924     02 76 66 F0 | 	shl	local06, #2
05928     37 FB 05 F1 | 	add	objptr, #311
0592c     FD 78 02 F6 | 	mov	local07, objptr
05930     FD 76 02 F1 | 	add	local06, objptr
05934     3B 6D 62 FC | 	wrlong	local01, local06
05938                 | '         lastSetSampleLength[channel] := repeatLength
05938     AF 6C 02 FB | 	rdlong	local01, fp
0593c     02 6C 66 F0 | 	shl	local01, #2
05940     20 FA 05 F1 | 	add	objptr, #32
05944     FD 6C 02 F1 | 	add	local01, objptr
05948     1C 5E 05 F1 | 	add	fp, #28
0594c     AF 6E 02 FB | 	rdlong	local02, fp
05950     1C 5E 85 F1 | 	sub	fp, #28
05954     36 6F 62 FC | 	wrlong	local02, local01
05958     57 FB 85 F1 | 	sub	objptr, #343
0595c                 | LR__0210
0595c                 | ' 
0595c                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
0595c                 | '       ifnot cmd == $3 || cmd == $5
0595c     BA FB 05 F1 | 	add	objptr, #442
05960     FD 6C C2 FA | 	rdbyte	local01, objptr
05964     BA FB 85 F1 | 	sub	objptr, #442
05968     03 6C 0E F2 | 	cmp	local01, #3 wz
0596c     54 00 90 AD |  if_e	jmp	#LR__0213
05970     BA FB 05 F1 | 	add	objptr, #442
05974     FD 7A C2 FA | 	rdbyte	local08, objptr
05978     BA FB 85 F1 | 	sub	objptr, #442
0597c     3D 6F 02 F6 | 	mov	local02, local08
05980     05 6E 0E F2 | 	cmp	local02, #5 wz
05984     3C 00 90 AD |  if_e	jmp	#LR__0213
05988                 | '         ifnot cmd == $E && x == $D
05988     BA FB 05 F1 | 	add	objptr, #442
0598c     FD 70 C2 FA | 	rdbyte	local03, objptr
05990     BA FB 85 F1 | 	sub	objptr, #442
05994     38 6D 02 F6 | 	mov	local01, local03
05998     0E 6C 0E F2 | 	cmp	local01, #14 wz
0599c     18 00 90 5D |  if_ne	jmp	#LR__0211
059a0     B7 FB 05 F1 | 	add	objptr, #439
059a4     FD 7A C2 FA | 	rdbyte	local08, objptr
059a8     B7 FB 85 F1 | 	sub	objptr, #439
059ac     3D 6F 02 F6 | 	mov	local02, local08
059b0     0D 6E 0E F2 | 	cmp	local02, #13 wz
059b4     0C 00 90 AD |  if_e	jmp	#LR__0212
059b8                 | LR__0211
059b8                 | '           triggerNote(channel)
059b8     AF 6C 02 FB | 	rdlong	local01, fp
059bc     36 5F 02 F6 | 	mov	arg01, local01
059c0     E0 FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
059c4                 | LR__0212
059c4                 | LR__0213
059c4                 | ' 
059c4                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
059c4                 | '       if resetTremolo[channel] > 0
059c4     AF 6C 02 FB | 	rdlong	local01, fp
059c8     8F FB 05 F1 | 	add	objptr, #399
059cc     FD 6C 02 F1 | 	add	local01, objptr
059d0     36 6F C2 FA | 	rdbyte	local02, local01
059d4     00 6E 5E F2 | 	cmps	local02, #0 wcz
059d8     8F FB 85 F1 | 	sub	objptr, #399
059dc     14 00 90 ED |  if_be	jmp	#LR__0214
059e0                 | '         tremoloPos[channel] := 0
059e0     AF 6C 02 FB | 	rdlong	local01, fp
059e4     8B FB 05 F1 | 	add	objptr, #395
059e8     FD 6C 02 F1 | 	add	local01, objptr
059ec     36 01 48 FC | 	wrbyte	#0, local01
059f0     8B FB 85 F1 | 	sub	objptr, #395
059f4                 | LR__0214
059f4                 | ' 
059f4                 | '       if resetVibrato[channel] > 0
059f4     AF 6C 02 FB | 	rdlong	local01, fp
059f8     93 FB 05 F1 | 	add	objptr, #403
059fc     FD 6C 02 F1 | 	add	local01, objptr
05a00     36 6F C2 FA | 	rdbyte	local02, local01
05a04     00 6E 5E F2 | 	cmps	local02, #0 wcz
05a08     93 FB 85 F1 | 	sub	objptr, #403
05a0c     20 00 90 ED |  if_be	jmp	#LR__0216
05a10                 | '         vibratoPos[channel] := 0
05a10     AF 6C 02 FB | 	rdlong	local01, fp
05a14     87 FB 05 F1 | 	add	objptr, #391
05a18     FD 6C 02 F1 | 	add	local01, objptr
05a1c     36 01 48 FC | 	wrbyte	#0, local01
05a20     87 FB 85 F1 | 	sub	objptr, #391
05a24                 | ' 
05a24                 | '   else
05a24     08 00 90 FD | 	jmp	#LR__0216
05a28                 | LR__0215
05a28                 | '     ' Handle commands that executes on all "non zero ticks"
05a28                 | '     handleNonZeroTickCommands(channel)
05a28     AF 5E 02 FB | 	rdlong	arg01, fp
05a2c     14 05 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
05a30                 | LR__0216
05a30                 | ' 
05a30                 | '   ' Handle commands that executes on every tick
05a30                 | '   handleEveryTickCommands(channel)
05a30     AF 5E 02 FB | 	rdlong	arg01, fp
05a34     70 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
05a38                 | ' 
05a38                 | '   ' Handle boundaries that should be kept
05a38                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
05a38     AF 70 02 FB | 	rdlong	local03, fp
05a3c     02 70 66 F0 | 	shl	local03, #2
05a40     DF FA 05 F1 | 	add	objptr, #223
05a44     FD 70 02 F1 | 	add	local03, objptr
05a48     38 6D 02 FB | 	rdlong	local01, local03
05a4c     01 00 00 FF 
05a50     58 6D 66 F3 | 	fles	local01, ##856
05a54     AF 7A 02 FB | 	rdlong	local08, fp
05a58     02 7A 66 F0 | 	shl	local08, #2
05a5c     FD 7A 02 F1 | 	add	local08, objptr
05a60     3D 6D 62 FC | 	wrlong	local01, local08
05a64                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
05a64     AF 70 02 FB | 	rdlong	local03, fp
05a68     02 70 66 F0 | 	shl	local03, #2
05a6c     FD 70 02 F1 | 	add	local03, objptr
05a70     38 6D 02 FB | 	rdlong	local01, local03
05a74     71 6C 46 F3 | 	fges	local01, #113
05a78     AF 7A 02 FB | 	rdlong	local08, fp
05a7c     02 7A 66 F0 | 	shl	local08, #2
05a80     FD 7A 02 F1 | 	add	local08, objptr
05a84     3D 6D 62 FC | 	wrlong	local01, local08
05a88                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
05a88     AF 70 02 FB | 	rdlong	local03, fp
05a8c     02 70 66 F0 | 	shl	local03, #2
05a90     20 FA 05 F1 | 	add	objptr, #32
05a94     FD 70 02 F1 | 	add	local03, objptr
05a98     38 6D 02 FB | 	rdlong	local01, local03
05a9c     40 6C 66 F3 | 	fles	local01, #64
05aa0     AF 7A 02 FB | 	rdlong	local08, fp
05aa4     02 7A 66 F0 | 	shl	local08, #2
05aa8     FD 7A 02 F1 | 	add	local08, objptr
05aac     3D 6D 62 FC | 	wrlong	local01, local08
05ab0                 | '   currVolume[channel] #>= MINIMUM_VOLUME
05ab0     AF 70 02 FB | 	rdlong	local03, fp
05ab4     02 70 66 F0 | 	shl	local03, #2
05ab8     FD 70 02 F1 | 	add	local03, objptr
05abc     38 6D 02 FB | 	rdlong	local01, local03
05ac0     00 6C 46 F3 | 	fges	local01, #0
05ac4     AF 7A 02 FB | 	rdlong	local08, fp
05ac8     02 7A 66 F0 | 	shl	local08, #2
05acc     FD 7A 02 F1 | 	add	local08, objptr
05ad0     3D 6D 62 FC | 	wrlong	local01, local08
05ad4     FF FA 85 F1 | 	sub	objptr, #255
05ad8     AF F0 03 F6 | 	mov	ptra, fp
05adc     BA 00 A0 FD | 	call	#popregs_
05ae0                 | _trackerplayer_spin2_processChannel_ret
05ae0     2D 00 64 FD | 	ret
05ae4                 | 
05ae4                 | ' 
05ae4                 | ' 
05ae4                 | ' ' Handle all commands that executes on tick zero
05ae4                 | ' '
05ae4                 | ' PRI handleZeroTickCommands(channel)
05ae4                 | _trackerplayer_spin2_handleZeroTickCommands
05ae4     2F 1F 02 F6 | 	mov	_var01, arg01
05ae8                 | ' 
05ae8                 | '   CASE_FAST cmd
05ae8     BA FB 05 F1 | 	add	objptr, #442
05aec     FD 20 C2 FA | 	rdbyte	_var02, objptr
05af0     BA FB 85 F1 | 	sub	objptr, #442
05af4     10 23 02 F6 | 	mov	_var03, _var02
05af8     09 22 86 F1 | 	sub	_var03, #9
05afc     07 22 26 F3 | 	fle	_var03, #7
05b00     11 25 02 F6 | 	mov	_var04, _var03
05b04     30 24 62 FD | 	jmprel	_var04
05b08                 | LR__0217
05b08     1C 00 90 FD | 	jmp	#LR__0218
05b0c     30 04 90 FD | 	jmp	#LR__0241
05b10     64 00 90 FD | 	jmp	#LR__0220
05b14     84 00 90 FD | 	jmp	#LR__0221
05b18     A0 00 90 FD | 	jmp	#LR__0222
05b1c     D0 00 90 FD | 	jmp	#LR__0223
05b20     9C 03 90 FD | 	jmp	#LR__0238
05b24     18 04 90 FD | 	jmp	#LR__0241
05b28                 | LR__0218
05b28                 | ' 
05b28                 | '     $9:                          ' Set sample offset
05b28                 | '       if z > 0
05b28     B9 FB 05 F1 | 	add	objptr, #441
05b2c     FD 26 C2 FA | 	rdbyte	_var05, objptr
05b30     B9 FB 85 F1 | 	sub	objptr, #441
05b34     00 26 5E F2 | 	cmps	_var05, #0 wcz
05b38     1C 00 90 ED |  if_be	jmp	#LR__0219
05b3c                 | '         cmd9_memoryZ[channel] := z
05b3c     0F 27 02 F6 | 	mov	_var05, _var01
05b40     DC FB 05 F1 | 	add	objptr, #476
05b44     FD 26 02 F1 | 	add	_var05, objptr
05b48     23 FA 85 F1 | 	sub	objptr, #35
05b4c     FD 28 C2 FA | 	rdbyte	_var06, objptr
05b50     B9 FB 85 F1 | 	sub	objptr, #441
05b54     13 29 42 FC | 	wrbyte	_var06, _var05
05b58                 | LR__0219
05b58                 | ' 
05b58                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
05b58     DC FB 05 F1 | 	add	objptr, #476
05b5c     FD 1E 02 F1 | 	add	_var01, objptr
05b60     0F 27 C2 FA | 	rdbyte	_var05, _var01
05b64     08 26 66 F0 | 	shl	_var05, #8
05b68     29 FA 85 F1 | 	sub	objptr, #41
05b6c     FD 26 62 FC | 	wrlong	_var05, objptr
05b70     B3 FB 85 F1 | 	sub	objptr, #435
05b74     C8 03 90 FD | 	jmp	#LR__0241
05b78                 | LR__0220
05b78                 | ' 
05b78                 | '     $B:                          ' Jump position
05b78                 | '       cmdB_memoryZ := z
05b78     B9 FB 05 F1 | 	add	objptr, #441
05b7c     FD 26 C2 FA | 	rdbyte	_var05, objptr
05b80     2E FA 05 F1 | 	add	objptr, #46
05b84     FD 26 42 FC | 	wrbyte	_var05, objptr
05b88                 | '       cmdB_updatePosition := true
05b88     01 FA 05 F1 | 	add	objptr, #1
05b8c     FF FF FF FF 
05b90     FD FE 4B FC | 	wrbyte	##-1, objptr
05b94     E8 FB 85 F1 | 	sub	objptr, #488
05b98     A4 03 90 FD | 	jmp	#LR__0241
05b9c                 | LR__0221
05b9c                 | ' 
05b9c                 | '     $C:                          ' Set volume
05b9c                 | '       currVolume[channel] := z
05b9c     02 1E 66 F0 | 	shl	_var01, #2
05ba0     FF FA 05 F1 | 	add	objptr, #255
05ba4     FD 1E 02 F1 | 	add	_var01, objptr
05ba8     BA FA 05 F1 | 	add	objptr, #186
05bac     FD 28 C2 FA | 	rdbyte	_var06, objptr
05bb0     B9 FB 85 F1 | 	sub	objptr, #441
05bb4     0F 29 62 FC | 	wrlong	_var06, _var01
05bb8     84 03 90 FD | 	jmp	#LR__0241
05bbc                 | LR__0222
05bbc                 | ' 
05bbc                 | '     $D:                          ' Pattern break
05bbc                 | '       cmdD_memoryX := x
05bbc     B7 FB 05 F1 | 	add	objptr, #439
05bc0     FD 26 C2 FA | 	rdbyte	_var05, objptr
05bc4     2D FA 05 F1 | 	add	objptr, #45
05bc8     FD 26 42 FC | 	wrbyte	_var05, objptr
05bcc                 | '       cmdD_memoryY := y
05bcc     2C FA 85 F1 | 	sub	objptr, #44
05bd0     FD 26 C2 FA | 	rdbyte	_var05, objptr
05bd4     2D FA 05 F1 | 	add	objptr, #45
05bd8     FD 26 42 FC | 	wrbyte	_var05, objptr
05bdc                 | '       cmdD_updatePosition := true
05bdc     01 FA 05 F1 | 	add	objptr, #1
05be0     FF FF FF FF 
05be4     FD FE 4B FC | 	wrbyte	##-1, objptr
05be8     E6 FB 85 F1 | 	sub	objptr, #486
05bec     50 03 90 FD | 	jmp	#LR__0241
05bf0                 | LR__0223
05bf0                 | ' 
05bf0                 | '     $E:                          ' Handle "E commands" that execute on tick zero
05bf0                 | ' 
05bf0                 | '       CASE_FAST x
05bf0     B7 FB 05 F1 | 	add	objptr, #439
05bf4     FD 2A C2 FA | 	rdbyte	_var07, objptr
05bf8     B7 FB 85 F1 | 	sub	objptr, #439
05bfc     15 27 02 F6 | 	mov	_var05, _var07
05c00     0F 26 26 F3 | 	fle	_var05, #15
05c04     13 2D 02 F6 | 	mov	_var08, _var05
05c08     30 2C 62 FD | 	jmprel	_var08
05c0c                 | LR__0224
05c0c     3C 00 90 FD | 	jmp	#LR__0225
05c10     58 00 90 FD | 	jmp	#LR__0226
05c14     8C 00 90 FD | 	jmp	#LR__0227
05c18     C0 00 90 FD | 	jmp	#LR__0228
05c1c     DC 00 90 FD | 	jmp	#LR__0229
05c20     14 01 90 FD | 	jmp	#LR__0230
05c24     28 01 90 FD | 	jmp	#LR__0231
05c28     C0 01 90 FD | 	jmp	#LR__0234
05c2c     10 03 90 FD | 	jmp	#LR__0241
05c30     0C 03 90 FD | 	jmp	#LR__0241
05c34     F0 01 90 FD | 	jmp	#LR__0235
05c38     24 02 90 FD | 	jmp	#LR__0236
05c3c     00 03 90 FD | 	jmp	#LR__0241
05c40     FC 02 90 FD | 	jmp	#LR__0241
05c44     50 02 90 FD | 	jmp	#LR__0237
05c48     F4 02 90 FD | 	jmp	#LR__0241
05c4c                 | LR__0225
05c4c                 | ' 
05c4c                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
05c4c     B8 FB 05 F1 | 	add	objptr, #440
05c50     FD 28 C2 FA | 	rdbyte	_var06, objptr
05c54     14 29 22 F6 | 	not	_var06, _var06
05c58     01 28 06 F5 | 	and	_var06, #1
05c5c     03 FA 05 F1 | 	add	objptr, #3
05c60     FD 28 42 FC | 	wrbyte	_var06, objptr
05c64     BB FB 85 F1 | 	sub	objptr, #443
05c68     D4 02 90 FD | 	jmp	#LR__0241
05c6c                 | LR__0226
05c6c                 | ' 
05c6c                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
05c6c     0F 2F 02 F6 | 	mov	_var09, _var01
05c70     02 2E 66 F0 | 	shl	_var09, #2
05c74     DF FA 05 F1 | 	add	objptr, #223
05c78     FD 2E 02 F1 | 	add	_var09, objptr
05c7c     17 29 02 FB | 	rdlong	_var06, _var09
05c80     D9 FA 05 F1 | 	add	objptr, #217
05c84     FD 30 C2 FA | 	rdbyte	_var10, objptr
05c88     18 29 82 F1 | 	sub	_var06, _var10
05c8c     02 1E 66 F0 | 	shl	_var01, #2
05c90     D9 FA 85 F1 | 	sub	objptr, #217
05c94     FD 1E 02 F1 | 	add	_var01, objptr
05c98     0F 29 62 FC | 	wrlong	_var06, _var01
05c9c     DF FA 85 F1 | 	sub	objptr, #223
05ca0     9C 02 90 FD | 	jmp	#LR__0241
05ca4                 | LR__0227
05ca4                 | ' 
05ca4                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
05ca4     0F 2F 02 F6 | 	mov	_var09, _var01
05ca8     02 2E 66 F0 | 	shl	_var09, #2
05cac     DF FA 05 F1 | 	add	objptr, #223
05cb0     FD 2E 02 F1 | 	add	_var09, objptr
05cb4     17 29 02 FB | 	rdlong	_var06, _var09
05cb8     D9 FA 05 F1 | 	add	objptr, #217
05cbc     FD 30 C2 FA | 	rdbyte	_var10, objptr
05cc0     18 29 02 F1 | 	add	_var06, _var10
05cc4     02 1E 66 F0 | 	shl	_var01, #2
05cc8     D9 FA 85 F1 | 	sub	objptr, #217
05ccc     FD 1E 02 F1 | 	add	_var01, objptr
05cd0     0F 29 62 FC | 	wrlong	_var06, _var01
05cd4     DF FA 85 F1 | 	sub	objptr, #223
05cd8     64 02 90 FD | 	jmp	#LR__0241
05cdc                 | LR__0228
05cdc                 | ' 
05cdc                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
05cdc     B8 FB 05 F1 | 	add	objptr, #440
05ce0     FD 28 C2 FA | 	rdbyte	_var06, objptr
05ce4     01 28 06 F5 | 	and	_var06, #1
05ce8     04 FA 05 F1 | 	add	objptr, #4
05cec     FD 1E 02 F1 | 	add	_var01, objptr
05cf0     0F 29 42 FC | 	wrbyte	_var06, _var01
05cf4     BC FB 85 F1 | 	sub	objptr, #444
05cf8     44 02 90 FD | 	jmp	#LR__0241
05cfc                 | LR__0229
05cfc                 | ' 
05cfc                 | '         $4:                                      ' Set vibrato waveform type
05cfc                 | '           vibratoType[channel]  := y & 3
05cfc     B8 FB 05 F1 | 	add	objptr, #440
05d00     FD 28 C2 FA | 	rdbyte	_var06, objptr
05d04     03 28 06 F5 | 	and	_var06, #3
05d08     0F 33 02 F6 | 	mov	_var11, _var01
05d0c     08 FA 05 F1 | 	add	objptr, #8
05d10     FD 32 02 F1 | 	add	_var11, objptr
05d14     19 29 42 FC | 	wrbyte	_var06, _var11
05d18                 | '           resetVibrato[channel] := y & 4
05d18     08 FA 85 F1 | 	sub	objptr, #8
05d1c     FD 28 C2 FA | 	rdbyte	_var06, objptr
05d20     04 28 06 F5 | 	and	_var06, #4
05d24     25 FA 85 F1 | 	sub	objptr, #37
05d28     FD 1E 02 F1 | 	add	_var01, objptr
05d2c     0F 29 42 FC | 	wrbyte	_var06, _var01
05d30     93 FB 85 F1 | 	sub	objptr, #403
05d34     08 02 90 FD | 	jmp	#LR__0241
05d38                 | LR__0230
05d38                 | ' 
05d38                 | '         $5: fineTune := y                        ' Set finetune
05d38     B8 FB 05 F1 | 	add	objptr, #440
05d3c     FD 28 C2 FA | 	rdbyte	_var06, objptr
05d40     09 FA 85 F1 | 	sub	objptr, #9
05d44     FD 28 62 FC | 	wrlong	_var06, objptr
05d48     AF FB 85 F1 | 	sub	objptr, #431
05d4c     F0 01 90 FD | 	jmp	#LR__0241
05d50                 | LR__0231
05d50                 | ' 
05d50                 | '         $6:                                      ' Pattern looping
05d50                 | '           if y == 0
05d50     B8 FB 05 F1 | 	add	objptr, #440
05d54     FD 28 CA FA | 	rdbyte	_var06, objptr wz
05d58     B8 FB 85 F1 | 	sub	objptr, #440
05d5c     1C 00 90 5D |  if_ne	jmp	#LR__0232
05d60                 | '             cmdE6_memory[channel] := patternRow
05d60     E9 FB 05 F1 | 	add	objptr, #489
05d64     FD 1E 02 F1 | 	add	_var01, objptr
05d68     47 FB 85 F1 | 	sub	objptr, #327
05d6c     FD 32 C2 FA | 	rdbyte	_var11, objptr
05d70     A2 FA 85 F1 | 	sub	objptr, #162
05d74     0F 33 42 FC | 	wrbyte	_var11, _var01
05d78                 | '           else
05d78     C4 01 90 FD | 	jmp	#LR__0241
05d7c                 | LR__0232
05d7c                 | '             if ++cmdE6_counter[channel] <= y
05d7c     0F 2F 02 F6 | 	mov	_var09, _var01
05d80     ED FB 05 F1 | 	add	objptr, #493
05d84     FD 2E 02 F1 | 	add	_var09, objptr
05d88     17 29 C2 FA | 	rdbyte	_var06, _var09
05d8c     01 28 06 F1 | 	add	_var06, #1
05d90     0F 31 02 F6 | 	mov	_var10, _var01
05d94     FD 30 02 F1 | 	add	_var10, objptr
05d98     18 29 42 FC | 	wrbyte	_var06, _var10
05d9c     18 35 C2 FA | 	rdbyte	_var12, _var10
05da0     35 FA 85 F1 | 	sub	objptr, #53
05da4     FD 36 C2 FA | 	rdbyte	_var13, objptr
05da8     B8 FB 85 F1 | 	sub	objptr, #440
05dac     1B 35 5A F2 | 	cmps	_var12, _var13 wcz
05db0     24 00 90 1D |  if_a	jmp	#LR__0233
05db4                 | '               cmdE6_updatePosition[channel] := true
05db4     F1 FB 05 F1 | 	add	objptr, #497
05db8     FD 1E 02 F1 | 	add	_var01, objptr
05dbc     FF FF FF FF 
05dc0     0F FF 4B FC | 	wrbyte	##-1, _var01
05dc4                 | '               cmdE6_updatePositionCommon    := true
05dc4     04 FA 05 F1 | 	add	objptr, #4
05dc8     FF FF FF FF 
05dcc     FD FE 4B FC | 	wrbyte	##-1, objptr
05dd0     F5 FB 85 F1 | 	sub	objptr, #501
05dd4                 | '             else
05dd4     68 01 90 FD | 	jmp	#LR__0241
05dd8                 | LR__0233
05dd8                 | '               cmdE6_counter[channel] := 0
05dd8     ED FB 05 F1 | 	add	objptr, #493
05ddc     FD 1E 02 F1 | 	add	_var01, objptr
05de0     0F 01 48 FC | 	wrbyte	#0, _var01
05de4     ED FB 85 F1 | 	sub	objptr, #493
05de8     54 01 90 FD | 	jmp	#LR__0241
05dec                 | LR__0234
05dec                 | ' 
05dec                 | '         $7:                                      ' Set tremolo waveform type
05dec                 | '           tremoloType[channel] := y & 3
05dec     B8 FB 05 F1 | 	add	objptr, #440
05df0     FD 28 C2 FA | 	rdbyte	_var06, objptr
05df4     03 28 06 F5 | 	and	_var06, #3
05df8     0F 33 02 F6 | 	mov	_var11, _var01
05dfc     0C FA 05 F1 | 	add	objptr, #12
05e00     FD 32 02 F1 | 	add	_var11, objptr
05e04     19 29 42 FC | 	wrbyte	_var06, _var11
05e08                 | '           resetTremolo[channel] := y & 4
05e08     0C FA 85 F1 | 	sub	objptr, #12
05e0c     FD 28 C2 FA | 	rdbyte	_var06, objptr
05e10     04 28 06 F5 | 	and	_var06, #4
05e14     29 FA 85 F1 | 	sub	objptr, #41
05e18     FD 1E 02 F1 | 	add	_var01, objptr
05e1c     0F 29 42 FC | 	wrbyte	_var06, _var01
05e20     8F FB 85 F1 | 	sub	objptr, #399
05e24     18 01 90 FD | 	jmp	#LR__0241
05e28                 | LR__0235
05e28                 | ' 
05e28                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
05e28     0F 2F 02 F6 | 	mov	_var09, _var01
05e2c     02 2E 66 F0 | 	shl	_var09, #2
05e30     FF FA 05 F1 | 	add	objptr, #255
05e34     FD 2E 02 F1 | 	add	_var09, objptr
05e38     17 29 02 FB | 	rdlong	_var06, _var09
05e3c     B9 FA 05 F1 | 	add	objptr, #185
05e40     FD 30 C2 FA | 	rdbyte	_var10, objptr
05e44     18 29 02 F1 | 	add	_var06, _var10
05e48     02 1E 66 F0 | 	shl	_var01, #2
05e4c     B9 FA 85 F1 | 	sub	objptr, #185
05e50     FD 1E 02 F1 | 	add	_var01, objptr
05e54     0F 29 62 FC | 	wrlong	_var06, _var01
05e58     FF FA 85 F1 | 	sub	objptr, #255
05e5c     E0 00 90 FD | 	jmp	#LR__0241
05e60                 | LR__0236
05e60                 | ' 
05e60                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
05e60     0F 2F 02 F6 | 	mov	_var09, _var01
05e64     02 2E 66 F0 | 	shl	_var09, #2
05e68     FF FA 05 F1 | 	add	objptr, #255
05e6c     FD 2E 02 F1 | 	add	_var09, objptr
05e70     17 29 02 FB | 	rdlong	_var06, _var09
05e74     B9 FA 05 F1 | 	add	objptr, #185
05e78     FD 30 C2 FA | 	rdbyte	_var10, objptr
05e7c     18 29 82 F1 | 	sub	_var06, _var10
05e80     02 1E 66 F0 | 	shl	_var01, #2
05e84     B9 FA 85 F1 | 	sub	objptr, #185
05e88     FD 1E 02 F1 | 	add	_var01, objptr
05e8c     0F 29 62 FC | 	wrlong	_var06, _var01
05e90     FF FA 85 F1 | 	sub	objptr, #255
05e94     A8 00 90 FD | 	jmp	#LR__0241
05e98                 | LR__0237
05e98                 | ' 
05e98                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
05e98     B8 FB 05 F1 | 	add	objptr, #440
05e9c     FD 2E C2 FA | 	rdbyte	_var09, objptr
05ea0     14 FB 85 F1 | 	sub	objptr, #276
05ea4     FD 30 C2 FA | 	rdbyte	_var10, objptr
05ea8     18 2F 02 FD | 	qmul	_var09, _var10
05eac     18 28 62 FD | 	getqx	_var06
05eb0     01 FA 05 F1 | 	add	objptr, #1
05eb4     FD 28 42 FC | 	wrbyte	_var06, objptr
05eb8     A5 FA 85 F1 | 	sub	objptr, #165
05ebc     80 00 90 FD | 	jmp	#LR__0241
05ec0                 | LR__0238
05ec0                 | ' 
05ec0                 | '     $F:                          ' Set speed
05ec0                 | '       if z < 32
05ec0     B9 FB 05 F1 | 	add	objptr, #441
05ec4     FD 26 C2 FA | 	rdbyte	_var05, objptr
05ec8     B9 FB 85 F1 | 	sub	objptr, #441
05ecc     20 26 5E F2 | 	cmps	_var05, #32 wcz
05ed0     18 00 90 3D |  if_ae	jmp	#LR__0239
05ed4                 | '         currentSongSpeed := z
05ed4     B9 FB 05 F1 | 	add	objptr, #441
05ed8     FD 26 C2 FA | 	rdbyte	_var05, objptr
05edc     15 FB 85 F1 | 	sub	objptr, #277
05ee0     FD 26 42 FC | 	wrbyte	_var05, objptr
05ee4     A4 FA 85 F1 | 	sub	objptr, #164
05ee8                 | '       else
05ee8     54 00 90 FD | 	jmp	#LR__0240
05eec                 | LR__0239
05eec                 | '         ticksPerMinute := z * 24
05eec     B9 FB 05 F1 | 	add	objptr, #441
05ef0     FD 2A C2 FA | 	rdbyte	_var07, objptr
05ef4     15 27 02 F6 | 	mov	_var05, _var07
05ef8     01 26 66 F0 | 	shl	_var05, #1
05efc     15 27 02 F1 | 	add	_var05, _var07
05f00     03 26 66 F0 | 	shl	_var05, #3
05f04     12 FA 85 F1 | 	sub	objptr, #18
05f08     FD 26 62 FC | 	wrlong	_var05, objptr
05f0c     A7 FB 85 F1 | 	sub	objptr, #423
05f10                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
05f10     FD 98 02 FB | 	rdlong	muldiva_, objptr
05f14     A7 FB 05 F1 | 	add	objptr, #423
05f18     FD 9A 02 FB | 	rdlong	muldivb_, objptr
05f1c     A7 FB 85 F1 | 	sub	objptr, #423
05f20     C6 00 A0 FD | 	call	#divide_
05f24     4D 29 02 F6 | 	mov	_var06, muldivb_
05f28     04 28 66 F0 | 	shl	_var06, #4
05f2c     4D 29 82 F1 | 	sub	_var06, muldivb_
05f30     02 28 66 F0 | 	shl	_var06, #2
05f34     AB FB 05 F1 | 	add	objptr, #427
05f38     FD 28 62 FC | 	wrlong	_var06, objptr
05f3c     AB FB 85 F1 | 	sub	objptr, #427
05f40                 | LR__0240
05f40                 | LR__0241
05f40                 | _trackerplayer_spin2_handleZeroTickCommands_ret
05f40     2D 00 64 FD | 	ret
05f44                 | 
05f44                 | ' 
05f44                 | ' 
05f44                 | ' ' Handle all commands that executes on "non zero ticks"
05f44                 | ' '
05f44                 | ' PRI handleNonZeroTickCommands(channel)
05f44                 | _trackerplayer_spin2_handleNonZeroTickCommands
05f44     0A 5A 05 F6 | 	mov	COUNT_, #10
05f48     B0 00 A0 FD | 	call	#pushregs_
05f4c     2F 6D 02 F6 | 	mov	local01, arg01
05f50                 | ' 
05f50                 | '   CASE_FAST cmd
05f50     BA FB 05 F1 | 	add	objptr, #442
05f54     FD 6E C2 FA | 	rdbyte	local02, objptr
05f58     BA FB 85 F1 | 	sub	objptr, #442
05f5c     37 71 02 F6 | 	mov	local03, local02
05f60     01 70 86 F1 | 	sub	local03, #1
05f64     0E 70 26 F3 | 	fle	local03, #14
05f68     38 73 02 F6 | 	mov	local04, local03
05f6c     30 72 62 FD | 	jmprel	local04
05f70                 | LR__0242
05f70     38 00 90 FD | 	jmp	#LR__0243
05f74     A0 00 90 FD | 	jmp	#LR__0244
05f78     D4 00 90 FD | 	jmp	#LR__0245
05f7c     1C 02 90 FD | 	jmp	#LR__0255
05f80     20 01 90 FD | 	jmp	#LR__0247
05f84     48 01 90 FD | 	jmp	#LR__0248
05f88     50 01 90 FD | 	jmp	#LR__0249
05f8c     0C 02 90 FD | 	jmp	#LR__0255
05f90     08 02 90 FD | 	jmp	#LR__0255
05f94     B0 01 90 FD | 	jmp	#LR__0252
05f98     00 02 90 FD | 	jmp	#LR__0255
05f9c     FC 01 90 FD | 	jmp	#LR__0255
05fa0     F8 01 90 FD | 	jmp	#LR__0255
05fa4     AC 01 90 FD | 	jmp	#LR__0253
05fa8     F0 01 90 FD | 	jmp	#LR__0255
05fac                 | LR__0243
05fac                 | ' 
05fac                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
05fac     36 75 02 F6 | 	mov	local05, local01
05fb0     02 74 66 F0 | 	shl	local05, #2
05fb4     DF FA 05 F1 | 	add	objptr, #223
05fb8     FD 74 02 F1 | 	add	local05, objptr
05fbc     3A 77 02 FB | 	rdlong	local06, local05
05fc0     DA FA 05 F1 | 	add	objptr, #218
05fc4     FD 78 C2 FA | 	rdbyte	local07, objptr
05fc8     3C 77 82 F1 | 	sub	local06, local07
05fcc     36 7B 02 F6 | 	mov	local08, local01
05fd0     02 7A 66 F0 | 	shl	local08, #2
05fd4     DA FA 85 F1 | 	sub	objptr, #218
05fd8     FD 7A 02 F1 | 	add	local08, objptr
05fdc     3D 77 62 FC | 	wrlong	local06, local08
05fe0                 | ' 
05fe0                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05fe0                 | '       if currPeriod[channel] < 0
05fe0     36 77 02 F6 | 	mov	local06, local01
05fe4     02 76 66 F0 | 	shl	local06, #2
05fe8     FD 76 02 F1 | 	add	local06, objptr
05fec     3B 7D 02 FB | 	rdlong	local09, local06
05ff0     00 7C 5E F2 | 	cmps	local09, #0 wcz
05ff4     DF FA 85 F1 | 	sub	objptr, #223
05ff8     A0 01 90 3D |  if_ae	jmp	#LR__0255
05ffc                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05ffc     02 6C 66 F0 | 	shl	local01, #2
06000     DF FA 05 F1 | 	add	objptr, #223
06004     FD 6C 02 F1 | 	add	local01, objptr
06008     01 00 80 FF 
0600c     36 B1 6A FC | 	wrlong	##856, local01
06010     DF FA 85 F1 | 	sub	objptr, #223
06014     84 01 90 FD | 	jmp	#LR__0255
06018                 | LR__0244
06018                 | ' 
06018                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
06018     36 75 02 F6 | 	mov	local05, local01
0601c     02 74 66 F0 | 	shl	local05, #2
06020     DF FA 05 F1 | 	add	objptr, #223
06024     FD 74 02 F1 | 	add	local05, objptr
06028     3A 77 02 FB | 	rdlong	local06, local05
0602c     DA FA 05 F1 | 	add	objptr, #218
06030     FD 78 C2 FA | 	rdbyte	local07, objptr
06034     3C 77 02 F1 | 	add	local06, local07
06038     02 6C 66 F0 | 	shl	local01, #2
0603c     DA FA 85 F1 | 	sub	objptr, #218
06040     FD 6C 02 F1 | 	add	local01, objptr
06044     36 77 62 FC | 	wrlong	local06, local01
06048     DF FA 85 F1 | 	sub	objptr, #223
0604c     4C 01 90 FD | 	jmp	#LR__0255
06050                 | LR__0245
06050                 | ' 
06050                 | '     $3:                                 ' Slide to note (portamento)
06050                 | '       if z > 0
06050     B9 FB 05 F1 | 	add	objptr, #441
06054     FD 76 C2 FA | 	rdbyte	local06, objptr
06058     B9 FB 85 F1 | 	sub	objptr, #441
0605c     00 76 5E F2 | 	cmps	local06, #0 wcz
06060     1C 00 90 ED |  if_be	jmp	#LR__0246
06064                 | '         cmd3_memoryZ[channel] := z
06064     36 77 02 F6 | 	mov	local06, local01
06068     C8 FB 05 F1 | 	add	objptr, #456
0606c     FD 76 02 F1 | 	add	local06, objptr
06070     0F FA 85 F1 | 	sub	objptr, #15
06074     FD 7C C2 FA | 	rdbyte	local09, objptr
06078     B9 FB 85 F1 | 	sub	objptr, #441
0607c     3B 7D 42 FC | 	wrbyte	local09, local06
06080                 | LR__0246
06080                 | ' 
06080                 | '       doPortamento(channel, lastSetPeriod[channel])
06080     36 7D 02 F6 | 	mov	local09, local01
06084     02 7C 66 F0 | 	shl	local09, #2
06088     27 FB 05 F1 | 	add	objptr, #295
0608c     FD 7C 02 F1 | 	add	local09, objptr
06090     3E 61 02 FB | 	rdlong	arg02, local09
06094     36 5F 02 F6 | 	mov	arg01, local01
06098     27 FB 85 F1 | 	sub	objptr, #295
0609c     5C 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
060a0     F8 00 90 FD | 	jmp	#LR__0255
060a4                 | LR__0247
060a4                 | ' 
060a4                 | '     $5:                                 ' Volume slide + portamento
060a4                 | '       doVolumeSlide(channel)
060a4     36 5F 02 F6 | 	mov	arg01, local01
060a8     7C 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
060ac                 | '       doPortamento(channel, lastSetPeriod[channel])
060ac     36 7D 02 F6 | 	mov	local09, local01
060b0     02 7C 66 F0 | 	shl	local09, #2
060b4     27 FB 05 F1 | 	add	objptr, #295
060b8     FD 7C 02 F1 | 	add	local09, objptr
060bc     3E 61 02 FB | 	rdlong	arg02, local09
060c0     36 5F 02 F6 | 	mov	arg01, local01
060c4     27 FB 85 F1 | 	sub	objptr, #295
060c8     30 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
060cc     CC 00 90 FD | 	jmp	#LR__0255
060d0                 | LR__0248
060d0                 | ' 
060d0                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
060d0     36 5F 02 F6 | 	mov	arg01, local01
060d4     50 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
060d8     C0 00 90 FD | 	jmp	#LR__0255
060dc                 | LR__0249
060dc                 | ' 
060dc                 | '     $7:                                 ' Tremolo
060dc                 | '       if x > 0
060dc     B7 FB 05 F1 | 	add	objptr, #439
060e0     FD 76 C2 FA | 	rdbyte	local06, objptr
060e4     B7 FB 85 F1 | 	sub	objptr, #439
060e8     00 76 5E F2 | 	cmps	local06, #0 wcz
060ec     1C 00 90 ED |  if_be	jmp	#LR__0250
060f0                 | '         cmd7_memoryX[channel] := x
060f0     36 77 02 F6 | 	mov	local06, local01
060f4     D8 FB 05 F1 | 	add	objptr, #472
060f8     FD 76 02 F1 | 	add	local06, objptr
060fc     21 FA 85 F1 | 	sub	objptr, #33
06100     FD 7C C2 FA | 	rdbyte	local09, objptr
06104     B7 FB 85 F1 | 	sub	objptr, #439
06108     3B 7D 42 FC | 	wrbyte	local09, local06
0610c                 | LR__0250
0610c                 | '       if y > 0
0610c     B8 FB 05 F1 | 	add	objptr, #440
06110     FD 76 C2 FA | 	rdbyte	local06, objptr
06114     B8 FB 85 F1 | 	sub	objptr, #440
06118     00 76 5E F2 | 	cmps	local06, #0 wcz
0611c     1C 00 90 ED |  if_be	jmp	#LR__0251
06120                 | '         cmd7_memoryY[channel] := y
06120     36 77 02 F6 | 	mov	local06, local01
06124     D4 FB 05 F1 | 	add	objptr, #468
06128     FD 76 02 F1 | 	add	local06, objptr
0612c     1C FA 85 F1 | 	sub	objptr, #28
06130     FD 7C C2 FA | 	rdbyte	local09, objptr
06134     B8 FB 85 F1 | 	sub	objptr, #440
06138     3B 7D 42 FC | 	wrbyte	local09, local06
0613c                 | LR__0251
0613c                 | ' 
0613c                 | '       doTremolo(channel)
0613c     36 5F 02 F6 | 	mov	arg01, local01
06140     F0 03 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
06144     54 00 90 FD | 	jmp	#LR__0255
06148                 | LR__0252
06148                 | ' 
06148                 | '     $A: doVolumeSlide(channel)          ' Volume slide
06148     36 5F 02 F6 | 	mov	arg01, local01
0614c     D8 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
06150     48 00 90 FD | 	jmp	#LR__0255
06154                 | LR__0253
06154                 | ' 
06154                 | '     $E:                                 ' Retrig every Y ticks
06154                 | '       if (x == $9) && ((tickcounter // y) == 0)
06154     B7 FB 05 F1 | 	add	objptr, #439
06158     FD 74 C2 FA | 	rdbyte	local05, objptr
0615c     B7 FB 85 F1 | 	sub	objptr, #439
06160     09 74 0E F2 | 	cmp	local05, #9 wz
06164     34 00 90 5D |  if_ne	jmp	#LR__0254
06168     A1 FA 05 F1 | 	add	objptr, #161
0616c     FD 78 C2 FA | 	rdbyte	local07, objptr
06170     3C 99 02 F6 | 	mov	muldiva_, local07
06174     17 FB 05 F1 | 	add	objptr, #279
06178     FD 7E C2 FA | 	rdbyte	local10, objptr
0617c     B8 FB 85 F1 | 	sub	objptr, #440
06180     3F 9B 02 F6 | 	mov	muldivb_, local10
06184     C6 00 A0 FD | 	call	#divide_
06188     4C 7D 0A F6 | 	mov	local09, muldiva_ wz
0618c     0C 00 90 5D |  if_ne	jmp	#LR__0254
06190                 | '         triggerNote(channel)
06190     36 77 02 F6 | 	mov	local06, local01
06194     3B 5F 02 F6 | 	mov	arg01, local06
06198     08 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
0619c                 | LR__0254
0619c                 | LR__0255
0619c     AF F0 03 F6 | 	mov	ptra, fp
061a0     BA 00 A0 FD | 	call	#popregs_
061a4                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
061a4     2D 00 64 FD | 	ret
061a8                 | 
061a8                 | ' 
061a8                 | ' 
061a8                 | ' ' Handle all commands that executes on every tick
061a8                 | ' '
061a8                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
061a8                 | _trackerplayer_spin2_handleEveryTickCommands
061a8     0F 5A 05 F6 | 	mov	COUNT_, #15
061ac     B0 00 A0 FD | 	call	#pushregs_
061b0     2F 6D 02 F6 | 	mov	local01, arg01
061b4                 | ' 
061b4                 | '   CASE_FAST cmd
061b4     BA FB 05 F1 | 	add	objptr, #442
061b8     FD 6E C2 FA | 	rdbyte	local02, objptr
061bc     BA FB 85 F1 | 	sub	objptr, #442
061c0     37 71 02 F6 | 	mov	local03, local02
061c4     0F 70 26 F3 | 	fle	local03, #15
061c8     38 73 02 F6 | 	mov	local04, local03
061cc     30 72 62 FD | 	jmprel	local04
061d0                 | LR__0256
061d0     3C 00 90 FD | 	jmp	#LR__0257
061d4     50 03 90 FD | 	jmp	#LR__0271
061d8     4C 03 90 FD | 	jmp	#LR__0271
061dc     48 03 90 FD | 	jmp	#LR__0271
061e0     D0 01 90 FD | 	jmp	#LR__0260
061e4     40 03 90 FD | 	jmp	#LR__0271
061e8     34 02 90 FD | 	jmp	#LR__0263
061ec     38 03 90 FD | 	jmp	#LR__0271
061f0     34 03 90 FD | 	jmp	#LR__0271
061f4     30 03 90 FD | 	jmp	#LR__0271
061f8     2C 03 90 FD | 	jmp	#LR__0271
061fc     28 03 90 FD | 	jmp	#LR__0271
06200     24 03 90 FD | 	jmp	#LR__0271
06204     20 03 90 FD | 	jmp	#LR__0271
06208     20 02 90 FD | 	jmp	#LR__0264
0620c     18 03 90 FD | 	jmp	#LR__0271
06210                 | LR__0257
06210                 | ' 
06210                 | '     $0:                                 ' Arpeggio
06210                 | '       arpCounter := tickCounter // 3
06210     A1 FA 05 F1 | 	add	objptr, #161
06214     FD 98 C2 FA | 	rdbyte	muldiva_, objptr
06218     A1 FA 85 F1 | 	sub	objptr, #161
0621c     03 9A 06 F6 | 	mov	muldivb_, #3
06220     C6 00 A0 FD | 	call	#divide_
06224     4C 75 02 F6 | 	mov	local05, muldiva_
06228                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
06228     36 77 02 F6 | 	mov	local06, local01
0622c     02 76 66 F0 | 	shl	local06, #2
06230     DF FA 05 F1 | 	add	objptr, #223
06234     FD 76 02 F1 | 	add	local06, objptr
06238     3B 5F 02 FB | 	rdlong	arg01, local06
0623c     36 79 02 F6 | 	mov	local07, local01
06240     0C FA 85 F1 | 	sub	objptr, #12
06244     FD 78 02 F1 | 	add	local07, objptr
06248     3C 61 C2 FA | 	rdbyte	arg02, local07
0624c     D3 FA 85 F1 | 	sub	objptr, #211
06250     C8 EF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
06254     0C 7B 02 F6 | 	mov	local08, result1
06258     3D 7D 02 F6 | 	mov	local09, local08
0625c     24 7A 5E F2 | 	cmps	local08, #36 wcz
06260     C4 02 90 3D |  if_ae	jmp	#LR__0271
06264                 | '         if arpCounter == 1 and x > 0
06264     01 74 0E F2 | 	cmp	local05, #1 wz
06268     80 00 90 5D |  if_ne	jmp	#LR__0258
0626c     B7 FB 05 F1 | 	add	objptr, #439
06270     FD 7E C2 FA | 	rdbyte	local10, objptr
06274     B7 FB 85 F1 | 	sub	objptr, #439
06278     00 7E 5E F2 | 	cmps	local10, #0 wcz
0627c     6C 00 90 ED |  if_be	jmp	#LR__0258
06280                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
06280     3E 5F 02 F6 | 	mov	arg01, local09
06284     B7 FB 05 F1 | 	add	objptr, #439
06288     FD 80 C2 FA | 	rdbyte	local11, objptr
0628c     40 5F 02 F1 | 	add	arg01, local11
06290                 | ' 
06290                 | '   return word[@periodTable][noteNumber]
06290     06 00 00 FF 
06294     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
06298     01 5E 66 F0 | 	shl	arg01, #1
0629c     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
062a0     2F 19 E2 FA | 	rdword	result1, arg01
062a4     06 00 00 FF 
062a8     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
062ac     0C 77 02 F6 | 	mov	local06, result1
062b0     36 79 02 F6 | 	mov	local07, local01
062b4     02 78 66 F0 | 	shl	local07, #2
062b8     D8 FA 85 F1 | 	sub	objptr, #216
062bc     FD 80 02 F6 | 	mov	local11, objptr
062c0     FD 78 02 F1 | 	add	local07, objptr
062c4     3B 7F 02 F6 | 	mov	local10, local06
062c8     3C 83 02 FB | 	rdlong	local12, local07
062cc     41 7F 82 F1 | 	sub	local10, local12
062d0     36 85 02 F6 | 	mov	local13, local01
062d4     02 84 66 F0 | 	shl	local13, #2
062d8     10 FA 05 F1 | 	add	objptr, #16
062dc     FD 86 02 F6 | 	mov	local14, objptr
062e0     FD 84 02 F1 | 	add	local13, objptr
062e4     42 7F 62 FC | 	wrlong	local10, local13
062e8     EF FA 85 F1 | 	sub	objptr, #239
062ec                 | LR__0258
062ec                 | '         if arpCounter == 2 and y > 0
062ec     02 74 0E F2 | 	cmp	local05, #2 wz
062f0     80 00 90 5D |  if_ne	jmp	#LR__0259
062f4     B8 FB 05 F1 | 	add	objptr, #440
062f8     FD 7E C2 FA | 	rdbyte	local10, objptr
062fc     B8 FB 85 F1 | 	sub	objptr, #440
06300     00 7E 5E F2 | 	cmps	local10, #0 wcz
06304     6C 00 90 ED |  if_be	jmp	#LR__0259
06308                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
06308     3E 5F 02 F6 | 	mov	arg01, local09
0630c     B8 FB 05 F1 | 	add	objptr, #440
06310     FD 80 C2 FA | 	rdbyte	local11, objptr
06314     40 5F 02 F1 | 	add	arg01, local11
06318                 | ' 
06318                 | '   return word[@periodTable][noteNumber]
06318     06 00 00 FF 
0631c     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
06320     01 5E 66 F0 | 	shl	arg01, #1
06324     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
06328     2F 19 E2 FA | 	rdword	result1, arg01
0632c     06 00 00 FF 
06330     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
06334     0C 77 02 F6 | 	mov	local06, result1
06338     36 79 02 F6 | 	mov	local07, local01
0633c     02 78 66 F0 | 	shl	local07, #2
06340     D9 FA 85 F1 | 	sub	objptr, #217
06344     FD 80 02 F6 | 	mov	local11, objptr
06348     FD 78 02 F1 | 	add	local07, objptr
0634c     3B 7F 02 F6 | 	mov	local10, local06
06350     3C 83 02 FB | 	rdlong	local12, local07
06354     41 7F 82 F1 | 	sub	local10, local12
06358     36 85 02 F6 | 	mov	local13, local01
0635c     02 84 66 F0 | 	shl	local13, #2
06360     10 FA 05 F1 | 	add	objptr, #16
06364     FD 86 02 F6 | 	mov	local14, objptr
06368     FD 84 02 F1 | 	add	local13, objptr
0636c     42 7F 62 FC | 	wrlong	local10, local13
06370     EF FA 85 F1 | 	sub	objptr, #239
06374                 | LR__0259
06374                 | '         if arpCounter == 0 and (x + y) > 0
06374     00 74 0E F2 | 	cmp	local05, #0 wz
06378     AC 01 90 5D |  if_ne	jmp	#LR__0271
0637c     B7 FB 05 F1 | 	add	objptr, #439
06380     FD 7E C2 FA | 	rdbyte	local10, objptr
06384     01 FA 05 F1 | 	add	objptr, #1
06388     FD 80 C2 FA | 	rdbyte	local11, objptr
0638c     B8 FB 85 F1 | 	sub	objptr, #440
06390     40 7F 02 F1 | 	add	local10, local11
06394     00 7E 5E F2 | 	cmps	local10, #0 wcz
06398     8C 01 90 ED |  if_be	jmp	#LR__0271
0639c                 | '           deltaPeriod[channel] := 0
0639c     02 6C 66 F0 | 	shl	local01, #2
063a0     EF FA 05 F1 | 	add	objptr, #239
063a4     FD 6C 02 F1 | 	add	local01, objptr
063a8     36 01 68 FC | 	wrlong	#0, local01
063ac     EF FA 85 F1 | 	sub	objptr, #239
063b0     74 01 90 FD | 	jmp	#LR__0271
063b4                 | LR__0260
063b4                 | ' 
063b4                 | '     $4:                                 ' Vibrato
063b4                 | '       if x > 0
063b4     B7 FB 05 F1 | 	add	objptr, #439
063b8     FD 7E C2 FA | 	rdbyte	local10, objptr
063bc     B7 FB 85 F1 | 	sub	objptr, #439
063c0     00 7E 5E F2 | 	cmps	local10, #0 wcz
063c4     1C 00 90 ED |  if_be	jmp	#LR__0261
063c8                 | '         cmd4_memoryX[channel] := x
063c8     36 7F 02 F6 | 	mov	local10, local01
063cc     D0 FB 05 F1 | 	add	objptr, #464
063d0     FD 7E 02 F1 | 	add	local10, objptr
063d4     19 FA 85 F1 | 	sub	objptr, #25
063d8     FD 78 C2 FA | 	rdbyte	local07, objptr
063dc     B7 FB 85 F1 | 	sub	objptr, #439
063e0     3F 79 42 FC | 	wrbyte	local07, local10
063e4                 | LR__0261
063e4                 | '       if y > 0
063e4     B8 FB 05 F1 | 	add	objptr, #440
063e8     FD 7E C2 FA | 	rdbyte	local10, objptr
063ec     B8 FB 85 F1 | 	sub	objptr, #440
063f0     00 7E 5E F2 | 	cmps	local10, #0 wcz
063f4     1C 00 90 ED |  if_be	jmp	#LR__0262
063f8                 | '         cmd4_memoryY[channel] := y
063f8     36 7F 02 F6 | 	mov	local10, local01
063fc     CC FB 05 F1 | 	add	objptr, #460
06400     FD 7E 02 F1 | 	add	local10, objptr
06404     14 FA 85 F1 | 	sub	objptr, #20
06408     FD 78 C2 FA | 	rdbyte	local07, objptr
0640c     B8 FB 85 F1 | 	sub	objptr, #440
06410     3F 79 42 FC | 	wrbyte	local07, local10
06414                 | LR__0262
06414                 | ' 
06414                 | '       doVibrato(channel)
06414     36 5F 02 F6 | 	mov	arg01, local01
06418     7C 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
0641c     08 01 90 FD | 	jmp	#LR__0271
06420                 | LR__0263
06420                 | ' 
06420                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
06420     36 5F 02 F6 | 	mov	arg01, local01
06424     70 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
06428     FC 00 90 FD | 	jmp	#LR__0271
0642c                 | LR__0264
0642c                 | ' 
0642c                 | '     $E:
0642c                 | '       if x == $C                        ' Cut note after Y ticks
0642c     B7 FB 05 F1 | 	add	objptr, #439
06430     FD 7E C2 FA | 	rdbyte	local10, objptr
06434     B7 FB 85 F1 | 	sub	objptr, #439
06438     0C 7E 0E F2 | 	cmp	local10, #12 wz
0643c     34 00 90 5D |  if_ne	jmp	#LR__0265
06440                 | '         if tickcounter == y
06440     A1 FA 05 F1 | 	add	objptr, #161
06444     FD 7E C2 FA | 	rdbyte	local10, objptr
06448     17 FB 05 F1 | 	add	objptr, #279
0644c     FD 78 C2 FA | 	rdbyte	local07, objptr
06450     B8 FB 85 F1 | 	sub	objptr, #440
06454     3C 7F 0A F2 | 	cmp	local10, local07 wz
06458     CC 00 90 5D |  if_ne	jmp	#LR__0270
0645c                 | '           currVolume[channel] := 0
0645c     02 6C 66 F0 | 	shl	local01, #2
06460     FF FA 05 F1 | 	add	objptr, #255
06464     FD 6C 02 F1 | 	add	local01, objptr
06468     36 01 68 FC | 	wrlong	#0, local01
0646c     FF FA 85 F1 | 	sub	objptr, #255
06470     B4 00 90 FD | 	jmp	#LR__0270
06474                 | LR__0265
06474                 | ' 
06474                 | '       elseif x == $D                    ' Delay note Y ticks
06474     B7 FB 05 F1 | 	add	objptr, #439
06478     FD 7E C2 FA | 	rdbyte	local10, objptr
0647c     B7 FB 85 F1 | 	sub	objptr, #439
06480     0D 7E 0E F2 | 	cmp	local10, #13 wz
06484     A0 00 90 5D |  if_ne	jmp	#LR__0269
06488                 | '         if tickcounter == y
06488     A1 FA 05 F1 | 	add	objptr, #161
0648c     FD 7E C2 FA | 	rdbyte	local10, objptr
06490     17 FB 05 F1 | 	add	objptr, #279
06494     FD 78 C2 FA | 	rdbyte	local07, objptr
06498     B8 FB 85 F1 | 	sub	objptr, #440
0649c     3C 7F 0A F2 | 	cmp	local10, local07 wz
064a0     0C 00 90 5D |  if_ne	jmp	#LR__0266
064a4                 | '           triggerNote(channel)
064a4     36 5F 02 F6 | 	mov	arg01, local01
064a8     F8 EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
064ac     78 00 90 FD | 	jmp	#LR__0268
064b0                 | LR__0266
064b0                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
064b0                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
064b0     B8 FB 05 F1 | 	add	objptr, #440
064b4     FD 7E C2 FA | 	rdbyte	local10, objptr
064b8     14 FB 85 F1 | 	sub	objptr, #276
064bc     FD 78 C2 FA | 	rdbyte	local07, objptr
064c0     A4 FA 85 F1 | 	sub	objptr, #164
064c4     3C 7F 5A F2 | 	cmps	local10, local07 wcz
064c8     5C 00 90 CD |  if_b	jmp	#LR__0267
064cc     A4 FA 05 F1 | 	add	objptr, #164
064d0     FD 84 C2 FA | 	rdbyte	local13, objptr
064d4     42 83 02 F6 | 	mov	local12, local13
064d8     01 82 86 F1 | 	sub	local12, #1
064dc     03 FA 85 F1 | 	sub	objptr, #3
064e0     FD 88 C2 FA | 	rdbyte	local15, objptr
064e4     A1 FA 85 F1 | 	sub	objptr, #161
064e8     44 87 02 F6 | 	mov	local14, local15
064ec     41 87 0A F2 | 	cmp	local14, local12 wz
064f0     34 00 90 5D |  if_ne	jmp	#LR__0267
064f4                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
064f4     36 7F 02 F6 | 	mov	local10, local01
064f8     02 7E 66 F0 | 	shl	local10, #2
064fc     27 FB 05 F1 | 	add	objptr, #295
06500     FD 76 02 F6 | 	mov	local06, objptr
06504     FD 7E 02 F1 | 	add	local10, objptr
06508     36 79 02 F6 | 	mov	local07, local01
0650c     02 78 66 F0 | 	shl	local07, #2
06510     48 FA 85 F1 | 	sub	objptr, #72
06514     FD 80 02 F6 | 	mov	local11, objptr
06518     3F 83 02 FB | 	rdlong	local12, local10
0651c     40 79 02 F1 | 	add	local07, local11
06520     3C 83 62 FC | 	wrlong	local12, local07
06524     DF FA 85 F1 | 	sub	objptr, #223
06528                 | LR__0267
06528                 | LR__0268
06528                 | LR__0269
06528                 | LR__0270
06528                 | LR__0271
06528     AF F0 03 F6 | 	mov	ptra, fp
0652c     BA 00 A0 FD | 	call	#popregs_
06530                 | _trackerplayer_spin2_handleEveryTickCommands_ret
06530     2D 00 64 FD | 	ret
06534                 | 
06534                 | ' 
06534                 | ' 
06534                 | ' PRI doTremolo(channel) | depth, sineWave, speed
06534                 | _trackerplayer_spin2_doTremolo
06534     2F 1F 02 F6 | 	mov	_var01, arg01
06538                 | ' 
06538                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
06538     05 00 00 FF 
0653c     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
06540     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
06544     0F 23 02 F6 | 	mov	_var03, _var01
06548     8B FB 05 F1 | 	add	objptr, #395
0654c     FD 22 02 F1 | 	add	_var03, objptr
06550     11 25 C2 FA | 	rdbyte	_var04, _var03
06554     02 24 66 F0 | 	shl	_var04, #2
06558     10 25 02 F1 | 	add	_var04, _var02
0655c     12 27 02 FB | 	rdlong	_var05, _var04
06560                 | '   depth    := cmd7_memoryY[channel]
06560     0F 29 02 F6 | 	mov	_var06, _var01
06564     49 FA 05 F1 | 	add	objptr, #73
06568     FD 28 02 F1 | 	add	_var06, objptr
0656c     14 2B C2 FA | 	rdbyte	_var07, _var06
06570                 | '   speed    := cmd7_memoryX[channel]
06570     0F 29 02 F6 | 	mov	_var06, _var01
06574     04 FA 05 F1 | 	add	objptr, #4
06578     FD 28 02 F1 | 	add	_var06, objptr
0657c     14 2D C2 FA | 	rdbyte	_var08, _var06
06580                 | ' 
06580                 | '   CASE_FAST vibratoType[channel]
06580     0F 23 02 F6 | 	mov	_var03, _var01
06584     18 FA 85 F1 | 	sub	objptr, #24
06588     FD 2E 02 F6 | 	mov	_var09, objptr
0658c     FD 22 02 F1 | 	add	_var03, objptr
06590     11 29 C2 FA | 	rdbyte	_var06, _var03
06594     03 28 26 F3 | 	fle	_var06, #3
06598     14 31 02 F6 | 	mov	_var10, _var06
0659c     05 00 00 FF 
065a0     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
065a4     C0 FB 85 F1 | 	sub	objptr, #448
065a8     30 30 62 FD | 	jmprel	_var10
065ac                 | LR__0272
065ac     0C 00 90 FD | 	jmp	#LR__0273
065b0     30 00 90 FD | 	jmp	#LR__0274
065b4     6C 00 90 FD | 	jmp	#LR__0275
065b8     B4 00 90 FD | 	jmp	#LR__0276
065bc                 | LR__0273
065bc                 | ' 
065bc                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
065bc     13 2B 02 FD | 	qmul	_var07, _var05
065c0     18 24 62 FD | 	getqx	_var04
065c4     06 24 C6 F0 | 	sar	_var04, #6
065c8     0F 33 02 F6 | 	mov	_var11, _var01
065cc     02 32 66 F0 | 	shl	_var11, #2
065d0     0F FB 05 F1 | 	add	objptr, #271
065d4     FD 32 02 F1 | 	add	_var11, objptr
065d8     19 25 62 FC | 	wrlong	_var04, _var11
065dc     0F FB 85 F1 | 	sub	objptr, #271
065e0     8C 00 90 FD | 	jmp	#LR__0276
065e4                 | LR__0274
065e4                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
065e4     0F 33 02 F6 | 	mov	_var11, _var01
065e8     8B FB 05 F1 | 	add	objptr, #395
065ec     FD 32 02 F1 | 	add	_var11, objptr
065f0     19 21 C2 FA | 	rdbyte	_var02, _var11
065f4     03 20 66 F0 | 	shl	_var02, #3
065f8     10 2B 02 FD | 	qmul	_var07, _var02
065fc     18 24 62 FD | 	getqx	_var04
06600     00 25 86 F1 | 	sub	_var04, #256
06604     06 24 C6 F0 | 	sar	_var04, #6
06608     0F 35 02 F6 | 	mov	_var12, _var01
0660c     02 34 66 F0 | 	shl	_var12, #2
06610     7C FA 85 F1 | 	sub	objptr, #124
06614     FD 34 02 F1 | 	add	_var12, objptr
06618     1A 25 62 FC | 	wrlong	_var04, _var12
0661c     0F FB 85 F1 | 	sub	objptr, #271
06620     4C 00 90 FD | 	jmp	#LR__0276
06624                 | LR__0275
06624                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
06624     0F 33 02 F6 | 	mov	_var11, _var01
06628     8B FB 05 F1 | 	add	objptr, #395
0662c     FD 36 02 F6 | 	mov	_var13, objptr
06630     FD 32 02 F1 | 	add	_var11, objptr
06634     19 21 C2 FA | 	rdbyte	_var02, _var11
06638     20 20 06 F5 | 	and	_var02, #32
0663c     04 20 66 F0 | 	shl	_var02, #4
06640     10 2B 02 FD | 	qmul	_var07, _var02
06644     18 38 62 FD | 	getqx	_var14
06648     1C 25 02 F6 | 	mov	_var04, _var14
0664c     00 25 86 F1 | 	sub	_var04, #256
06650     06 24 C6 F0 | 	sar	_var04, #6
06654     0F 35 02 F6 | 	mov	_var12, _var01
06658     02 34 66 F0 | 	shl	_var12, #2
0665c     7C FA 85 F1 | 	sub	objptr, #124
06660     FD 3A 02 F6 | 	mov	_var15, objptr
06664     FD 34 02 F1 | 	add	_var12, objptr
06668     1A 25 62 FC | 	wrlong	_var04, _var12
0666c     0F FB 85 F1 | 	sub	objptr, #271
06670                 | LR__0276
06670                 | ' 
06670                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
06670     0F 23 02 F6 | 	mov	_var03, _var01
06674     8B FB 05 F1 | 	add	objptr, #395
06678     FD 22 02 F1 | 	add	_var03, objptr
0667c     11 29 C2 FA | 	rdbyte	_var06, _var03
06680     16 29 02 F1 | 	add	_var06, _var08
06684     3F 28 06 F5 | 	and	_var06, #63
06688     FD 1E 02 F1 | 	add	_var01, objptr
0668c     0F 29 42 FC | 	wrbyte	_var06, _var01
06690     8B FB 85 F1 | 	sub	objptr, #395
06694                 | _trackerplayer_spin2_doTremolo_ret
06694     2D 00 64 FD | 	ret
06698                 | 
06698                 | ' 
06698                 | ' 
06698                 | ' PRI doVibrato(channel) | depth, sineWave, speed
06698                 | _trackerplayer_spin2_doVibrato
06698     2F 1F 02 F6 | 	mov	_var01, arg01
0669c                 | ' 
0669c                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
0669c     05 00 00 FF 
066a0     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
066a4     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
066a8     0F 23 02 F6 | 	mov	_var03, _var01
066ac     87 FB 05 F1 | 	add	objptr, #391
066b0     FD 22 02 F1 | 	add	_var03, objptr
066b4     11 25 C2 FA | 	rdbyte	_var04, _var03
066b8     02 24 66 F0 | 	shl	_var04, #2
066bc     10 25 02 F1 | 	add	_var04, _var02
066c0     12 27 02 FB | 	rdlong	_var05, _var04
066c4                 | '   depth    := cmd4_memoryY[channel]
066c4     0F 29 02 F6 | 	mov	_var06, _var01
066c8     45 FA 05 F1 | 	add	objptr, #69
066cc     FD 28 02 F1 | 	add	_var06, objptr
066d0     14 2B C2 FA | 	rdbyte	_var07, _var06
066d4                 | '   speed    := cmd4_memoryX[channel]
066d4     0F 29 02 F6 | 	mov	_var06, _var01
066d8     04 FA 05 F1 | 	add	objptr, #4
066dc     FD 28 02 F1 | 	add	_var06, objptr
066e0     14 2D C2 FA | 	rdbyte	_var08, _var06
066e4                 | ' 
066e4                 | '   CASE_FAST vibratoType[channel]
066e4     0F 23 02 F6 | 	mov	_var03, _var01
066e8     10 FA 85 F1 | 	sub	objptr, #16
066ec     FD 2E 02 F6 | 	mov	_var09, objptr
066f0     FD 22 02 F1 | 	add	_var03, objptr
066f4     11 29 C2 FA | 	rdbyte	_var06, _var03
066f8     03 28 26 F3 | 	fle	_var06, #3
066fc     14 31 02 F6 | 	mov	_var10, _var06
06700     05 00 00 FF 
06704     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
06708     C0 FB 85 F1 | 	sub	objptr, #448
0670c     30 30 62 FD | 	jmprel	_var10
06710                 | LR__0277
06710     0C 00 90 FD | 	jmp	#LR__0278
06714     30 00 90 FD | 	jmp	#LR__0279
06718     6C 00 90 FD | 	jmp	#LR__0280
0671c     B4 00 90 FD | 	jmp	#LR__0281
06720                 | LR__0278
06720                 | ' 
06720                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
06720     13 2B 02 FD | 	qmul	_var07, _var05
06724     18 24 62 FD | 	getqx	_var04
06728     07 24 C6 F0 | 	sar	_var04, #7
0672c     0F 33 02 F6 | 	mov	_var11, _var01
06730     02 32 66 F0 | 	shl	_var11, #2
06734     EF FA 05 F1 | 	add	objptr, #239
06738     FD 32 02 F1 | 	add	_var11, objptr
0673c     19 25 62 FC | 	wrlong	_var04, _var11
06740     EF FA 85 F1 | 	sub	objptr, #239
06744     8C 00 90 FD | 	jmp	#LR__0281
06748                 | LR__0279
06748                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
06748     0F 33 02 F6 | 	mov	_var11, _var01
0674c     87 FB 05 F1 | 	add	objptr, #391
06750     FD 32 02 F1 | 	add	_var11, objptr
06754     19 21 C2 FA | 	rdbyte	_var02, _var11
06758     03 20 66 F0 | 	shl	_var02, #3
0675c     10 2B 02 FD | 	qmul	_var07, _var02
06760     18 24 62 FD | 	getqx	_var04
06764     00 25 86 F1 | 	sub	_var04, #256
06768     07 24 C6 F0 | 	sar	_var04, #7
0676c     0F 35 02 F6 | 	mov	_var12, _var01
06770     02 34 66 F0 | 	shl	_var12, #2
06774     98 FA 85 F1 | 	sub	objptr, #152
06778     FD 34 02 F1 | 	add	_var12, objptr
0677c     1A 25 62 FC | 	wrlong	_var04, _var12
06780     EF FA 85 F1 | 	sub	objptr, #239
06784     4C 00 90 FD | 	jmp	#LR__0281
06788                 | LR__0280
06788                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
06788     0F 33 02 F6 | 	mov	_var11, _var01
0678c     87 FB 05 F1 | 	add	objptr, #391
06790     FD 36 02 F6 | 	mov	_var13, objptr
06794     FD 32 02 F1 | 	add	_var11, objptr
06798     19 21 C2 FA | 	rdbyte	_var02, _var11
0679c     20 20 06 F5 | 	and	_var02, #32
067a0     04 20 66 F0 | 	shl	_var02, #4
067a4     10 2B 02 FD | 	qmul	_var07, _var02
067a8     18 38 62 FD | 	getqx	_var14
067ac     1C 25 02 F6 | 	mov	_var04, _var14
067b0     00 25 86 F1 | 	sub	_var04, #256
067b4     07 24 C6 F0 | 	sar	_var04, #7
067b8     0F 35 02 F6 | 	mov	_var12, _var01
067bc     02 34 66 F0 | 	shl	_var12, #2
067c0     98 FA 85 F1 | 	sub	objptr, #152
067c4     FD 3A 02 F6 | 	mov	_var15, objptr
067c8     FD 34 02 F1 | 	add	_var12, objptr
067cc     1A 25 62 FC | 	wrlong	_var04, _var12
067d0     EF FA 85 F1 | 	sub	objptr, #239
067d4                 | LR__0281
067d4                 | ' 
067d4                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
067d4     0F 23 02 F6 | 	mov	_var03, _var01
067d8     87 FB 05 F1 | 	add	objptr, #391
067dc     FD 22 02 F1 | 	add	_var03, objptr
067e0     11 29 C2 FA | 	rdbyte	_var06, _var03
067e4     16 29 02 F1 | 	add	_var06, _var08
067e8     3F 28 06 F5 | 	and	_var06, #63
067ec     FD 1E 02 F1 | 	add	_var01, objptr
067f0     0F 29 42 FC | 	wrbyte	_var06, _var01
067f4     87 FB 85 F1 | 	sub	objptr, #391
067f8                 | _trackerplayer_spin2_doVibrato_ret
067f8     2D 00 64 FD | 	ret
067fc                 | 
067fc                 | ' 
067fc                 | ' 
067fc                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
067fc                 | _trackerplayer_spin2_doPortamento
067fc                 | ' 
067fc                 | '   if period == currPeriod[channel]
067fc     2F 1F 02 F6 | 	mov	_var01, arg01
06800     02 1E 66 F0 | 	shl	_var01, #2
06804     DF FA 05 F1 | 	add	objptr, #223
06808     FD 20 02 F6 | 	mov	_var02, objptr
0680c     FD 1E 02 F1 | 	add	_var01, objptr
06810     0F 23 02 FB | 	rdlong	_var03, _var01
06814     11 61 0A F2 | 	cmp	arg02, _var03 wz
06818                 | '     return
06818     DF FA 85 F1 | 	sub	objptr, #223
0681c     04 02 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
06820                 | ' 
06820                 | '   if period > 0
06820     00 60 5E F2 | 	cmps	arg02, #0 wcz
06824     1C 00 90 ED |  if_be	jmp	#LR__0282
06828                 | '     portamentoPeriodMemory[channel] := period
06828     2F 1F 02 F6 | 	mov	_var01, arg01
0682c     02 1E 66 F0 | 	shl	_var01, #2
06830     97 FB 05 F1 | 	add	objptr, #407
06834     FD 1E 02 F1 | 	add	_var01, objptr
06838     0F 61 62 FC | 	wrlong	arg02, _var01
0683c                 | '   else
0683c     97 FB 85 F1 | 	sub	objptr, #407
06840     18 00 90 FD | 	jmp	#LR__0283
06844                 | LR__0282
06844                 | '     period := portamentoPeriodMemory[channel]
06844     2F 1F 02 F6 | 	mov	_var01, arg01
06848     02 1E 66 F0 | 	shl	_var01, #2
0684c     97 FB 05 F1 | 	add	objptr, #407
06850     FD 1E 02 F1 | 	add	_var01, objptr
06854     0F 61 02 FB | 	rdlong	arg02, _var01
06858     97 FB 85 F1 | 	sub	objptr, #407
0685c                 | LR__0283
0685c                 | ' 
0685c                 | '   if period > currPeriod[channel]
0685c     2F 1F 02 F6 | 	mov	_var01, arg01
06860     02 1E 66 F0 | 	shl	_var01, #2
06864     DF FA 05 F1 | 	add	objptr, #223
06868     FD 1E 02 F1 | 	add	_var01, objptr
0686c     0F 23 02 FB | 	rdlong	_var03, _var01
06870     11 61 5A F2 | 	cmps	arg02, _var03 wcz
06874     DF FA 85 F1 | 	sub	objptr, #223
06878     68 00 90 ED |  if_be	jmp	#LR__0284
0687c                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
0687c     2F 21 02 F6 | 	mov	_var02, arg01
06880     02 20 66 F0 | 	shl	_var02, #2
06884     DF FA 05 F1 | 	add	objptr, #223
06888     FD 20 02 F1 | 	add	_var02, objptr
0688c     2F 25 02 F6 | 	mov	_var04, arg01
06890     E9 FA 05 F1 | 	add	objptr, #233
06894     10 1F 02 FB | 	rdlong	_var01, _var02
06898     FD 24 02 F1 | 	add	_var04, objptr
0689c     12 27 C2 FA | 	rdbyte	_var05, _var04
068a0     13 1F 02 F1 | 	add	_var01, _var05
068a4     2F 29 02 F6 | 	mov	_var06, arg01
068a8     02 28 66 F0 | 	shl	_var06, #2
068ac     E9 FA 85 F1 | 	sub	objptr, #233
068b0     FD 28 02 F1 | 	add	_var06, objptr
068b4     14 1F 62 FC | 	wrlong	_var01, _var06
068b8                 | '     currPeriod[channel] <#= period
068b8     2F 21 02 F6 | 	mov	_var02, arg01
068bc     02 20 66 F0 | 	shl	_var02, #2
068c0     FD 20 02 F1 | 	add	_var02, objptr
068c4     10 1F 02 FB | 	rdlong	_var01, _var02
068c8     30 1F 62 F3 | 	fles	_var01, arg02
068cc     2F 25 02 F6 | 	mov	_var04, arg01
068d0     02 24 66 F0 | 	shl	_var04, #2
068d4     FD 24 02 F1 | 	add	_var04, objptr
068d8     12 1F 62 FC | 	wrlong	_var01, _var04
068dc     DF FA 85 F1 | 	sub	objptr, #223
068e0     84 00 90 FD | 	jmp	#LR__0286
068e4                 | LR__0284
068e4                 | ' 
068e4                 | '   elseif period < currPeriod[channel]
068e4     2F 1F 02 F6 | 	mov	_var01, arg01
068e8     02 1E 66 F0 | 	shl	_var01, #2
068ec     DF FA 05 F1 | 	add	objptr, #223
068f0     FD 1E 02 F1 | 	add	_var01, objptr
068f4     0F 23 02 FB | 	rdlong	_var03, _var01
068f8     11 61 5A F2 | 	cmps	arg02, _var03 wcz
068fc     DF FA 85 F1 | 	sub	objptr, #223
06900     64 00 90 3D |  if_ae	jmp	#LR__0285
06904                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
06904     2F 21 02 F6 | 	mov	_var02, arg01
06908     02 20 66 F0 | 	shl	_var02, #2
0690c     DF FA 05 F1 | 	add	objptr, #223
06910     FD 20 02 F1 | 	add	_var02, objptr
06914     2F 25 02 F6 | 	mov	_var04, arg01
06918     E9 FA 05 F1 | 	add	objptr, #233
0691c     10 1F 02 FB | 	rdlong	_var01, _var02
06920     FD 24 02 F1 | 	add	_var04, objptr
06924     12 27 C2 FA | 	rdbyte	_var05, _var04
06928     13 1F 82 F1 | 	sub	_var01, _var05
0692c     2F 29 02 F6 | 	mov	_var06, arg01
06930     02 28 66 F0 | 	shl	_var06, #2
06934     E9 FA 85 F1 | 	sub	objptr, #233
06938     FD 28 02 F1 | 	add	_var06, objptr
0693c     14 1F 62 FC | 	wrlong	_var01, _var06
06940                 | '     currPeriod[channel] #>= period
06940     2F 21 02 F6 | 	mov	_var02, arg01
06944     02 20 66 F0 | 	shl	_var02, #2
06948     FD 20 02 F1 | 	add	_var02, objptr
0694c     10 1F 02 FB | 	rdlong	_var01, _var02
06950     30 1F 42 F3 | 	fges	_var01, arg02
06954     2F 25 02 F6 | 	mov	_var04, arg01
06958     02 24 66 F0 | 	shl	_var04, #2
0695c     FD 24 02 F1 | 	add	_var04, objptr
06960     12 1F 62 FC | 	wrlong	_var01, _var04
06964     DF FA 85 F1 | 	sub	objptr, #223
06968                 | LR__0285
06968                 | LR__0286
06968                 | ' 
06968                 | '   ' Handle glissando if activated
06968                 | '   if portaGlissando[channel] > 0
06968     2F 1F 02 F6 | 	mov	_var01, arg01
0696c     BC FB 05 F1 | 	add	objptr, #444
06970     FD 1E 02 F1 | 	add	_var01, objptr
06974     0F 23 C2 FA | 	rdbyte	_var03, _var01
06978     00 22 5E F2 | 	cmps	_var03, #0 wcz
0697c     BC FB 85 F1 | 	sub	objptr, #444
06980     A0 00 90 ED |  if_be	jmp	#LR__0289
06984                 | ' 
06984                 | '     tempPeriod := currPeriod[channel]
06984     2F 1F 02 F6 | 	mov	_var01, arg01
06988     02 1E 66 F0 | 	shl	_var01, #2
0698c     DF FA 05 F1 | 	add	objptr, #223
06990     FD 1E 02 F1 | 	add	_var01, objptr
06994     0F 2B 02 FB | 	rdlong	_var07, _var01
06998                 | ' 
06998                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
06998     00 2C 06 F6 | 	mov	_var08, #0
0699c     DF FA 85 F1 | 	sub	objptr, #223
069a0     C0 96 9F FE | 	loc	pa,	#(@LR__0288-@LR__0287)
069a4     93 00 A0 FD | 	call	#FCACHE_LOAD_
069a8                 | LR__0287
069a8                 | ' 
069a8                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
069a8     06 00 00 FF 
069ac     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
069b0     0A 2F 02 F6 | 	mov	_var09, ptr__trackerplayer_spin2_dat__
069b4     2F 23 02 F6 | 	mov	_var03, arg01
069b8     D3 FA 05 F1 | 	add	objptr, #211
069bc     FD 22 02 F1 | 	add	_var03, objptr
069c0     11 27 C2 FA | 	rdbyte	_var05, _var03
069c4     13 31 02 F6 | 	mov	_var10, _var05
069c8     03 30 66 F0 | 	shl	_var10, #3
069cc     13 31 02 F1 | 	add	_var10, _var05
069d0     03 30 66 F0 | 	shl	_var10, #3
069d4     18 2F 02 F1 | 	add	_var09, _var10
069d8     16 33 02 F6 | 	mov	_var11, _var08
069dc     01 32 66 F0 | 	shl	_var11, #1
069e0     17 33 02 F1 | 	add	_var11, _var09
069e4     19 35 E2 FA | 	rdword	_var12, _var11
069e8                 | '       if tempPeriod >= periodStep
069e8     1A 2B 5A F2 | 	cmps	_var07, _var12 wcz
069ec                 | '         i += 1000
069ec     06 00 00 FF 
069f0     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
069f4     D3 FA 85 F1 | 	sub	objptr, #211
069f8     01 00 00 3F 
069fc     E8 2D 06 31 |  if_ae	add	_var08, ##1000
06a00     01 2C 06 F1 | 	add	_var08, #1
06a04     24 2C 5E F2 | 	cmps	_var08, #36 wcz
06a08     9C FF 9F CD |  if_b	jmp	#LR__0287
06a0c                 | LR__0288
06a0c                 | ' 
06a0c                 | '     deltaPeriod[channel] := periodStep - tempPeriod
06a0c     15 35 82 F1 | 	sub	_var12, _var07
06a10     02 5E 66 F0 | 	shl	arg01, #2
06a14     EF FA 05 F1 | 	add	objptr, #239
06a18     FD 5E 02 F1 | 	add	arg01, objptr
06a1c     2F 35 62 FC | 	wrlong	_var12, arg01
06a20     EF FA 85 F1 | 	sub	objptr, #239
06a24                 | LR__0289
06a24                 | _trackerplayer_spin2_doPortamento_ret
06a24     2D 00 64 FD | 	ret
06a28                 | 
06a28                 | ' 
06a28                 | ' 
06a28                 | ' PRI doVolumeSlide(channel)
06a28                 | _trackerplayer_spin2_doVolumeSlide
06a28                 | ' 
06a28                 | '   if x > 0
06a28     B7 FB 05 F1 | 	add	objptr, #439
06a2c     FD 1E C2 FA | 	rdbyte	_var01, objptr
06a30     B7 FB 85 F1 | 	sub	objptr, #439
06a34     00 1E 5E F2 | 	cmps	_var01, #0 wcz
06a38     38 00 90 ED |  if_be	jmp	#LR__0290
06a3c                 | '     currVolume[channel] += x
06a3c     2F 21 02 F6 | 	mov	_var02, arg01
06a40     02 20 66 F0 | 	shl	_var02, #2
06a44     FF FA 05 F1 | 	add	objptr, #255
06a48     FD 20 02 F1 | 	add	_var02, objptr
06a4c     10 1F 02 FB | 	rdlong	_var01, _var02
06a50     B8 FA 05 F1 | 	add	objptr, #184
06a54     FD 22 C2 FA | 	rdbyte	_var03, objptr
06a58     11 1F 02 F1 | 	add	_var01, _var03
06a5c     2F 25 02 F6 | 	mov	_var04, arg01
06a60     02 24 66 F0 | 	shl	_var04, #2
06a64     B8 FA 85 F1 | 	sub	objptr, #184
06a68     FD 24 02 F1 | 	add	_var04, objptr
06a6c     12 1F 62 FC | 	wrlong	_var01, _var04
06a70     FF FA 85 F1 | 	sub	objptr, #255
06a74                 | LR__0290
06a74                 | '   if y > 0
06a74     B8 FB 05 F1 | 	add	objptr, #440
06a78     FD 1E C2 FA | 	rdbyte	_var01, objptr
06a7c     B8 FB 85 F1 | 	sub	objptr, #440
06a80     00 1E 5E F2 | 	cmps	_var01, #0 wcz
06a84     34 00 90 ED |  if_be	jmp	#LR__0291
06a88                 | '     currVolume[channel] -= y
06a88     2F 21 02 F6 | 	mov	_var02, arg01
06a8c     02 20 66 F0 | 	shl	_var02, #2
06a90     FF FA 05 F1 | 	add	objptr, #255
06a94     FD 20 02 F1 | 	add	_var02, objptr
06a98     10 1F 02 FB | 	rdlong	_var01, _var02
06a9c     B9 FA 05 F1 | 	add	objptr, #185
06aa0     FD 22 C2 FA | 	rdbyte	_var03, objptr
06aa4     11 1F 82 F1 | 	sub	_var01, _var03
06aa8     02 5E 66 F0 | 	shl	arg01, #2
06aac     B9 FA 85 F1 | 	sub	objptr, #185
06ab0     FD 5E 02 F1 | 	add	arg01, objptr
06ab4     2F 1F 62 FC | 	wrlong	_var01, arg01
06ab8     FF FA 85 F1 | 	sub	objptr, #255
06abc                 | LR__0291
06abc                 | _trackerplayer_spin2_doVolumeSlide_ret
06abc     2D 00 64 FD | 	ret
06ac0                 | 
06ac0                 | ' 
06ac0                 | ' 
06ac0                 | ' '--------------------------------------------------------------
06ac0                 | ' '---------- Init the variables, start the cog. ----------------
06ac0                 | ' '--------------------------------------------------------------
06ac0                 | ' 
06ac0                 | ' pub start() :cog,base | iii
06ac0                 | _audio019_spin2_start
06ac0     07 5A 05 F6 | 	mov	COUNT_, #7
06ac4     B0 00 A0 FD | 	call	#pushregs_
06ac8                 | ' 
06ac8                 | ' base:=@channel1[0]
06ac8     FD 6C 02 F6 | 	mov	local01, objptr
06acc                 | ' 
06acc                 | ' repeat iii from 0 to 7
06acc     00 6E 06 F6 | 	mov	local02, #0
06ad0     38 96 9F FE | 	loc	pa,	#(@LR__0293-@LR__0292)
06ad4     93 00 A0 FD | 	call	#FCACHE_LOAD_
06ad8                 | LR__0292
06ad8                 | '   long [base+32*iii]:=0
06ad8     36 71 02 F6 | 	mov	local03, local01
06adc     37 73 02 F6 | 	mov	local04, local02
06ae0     05 72 66 F0 | 	shl	local04, #5
06ae4     39 71 02 F1 | 	add	local03, local04
06ae8     38 01 68 FC | 	wrlong	#0, local03
06aec                 | '   long [base+32*iii+4]:=0
06aec     36 71 02 F6 | 	mov	local03, local01
06af0     37 73 02 F6 | 	mov	local04, local02
06af4     05 72 66 F0 | 	shl	local04, #5
06af8     39 71 02 F1 | 	add	local03, local04
06afc     04 70 06 F1 | 	add	local03, #4
06b00     38 01 68 FC | 	wrlong	#0, local03
06b04                 | '   long[base+32*iii+12]:=0
06b04     36 71 02 F6 | 	mov	local03, local01
06b08     37 73 02 F6 | 	mov	local04, local02
06b0c     05 72 66 F0 | 	shl	local04, #5
06b10     39 71 02 F1 | 	add	local03, local04
06b14     0C 70 06 F1 | 	add	local03, #12
06b18     38 01 68 FC | 	wrlong	#0, local03
06b1c                 | '   long[base+32*iii+16]:=2 
06b1c     36 71 02 F6 | 	mov	local03, local01
06b20     37 73 02 F6 | 	mov	local04, local02
06b24     05 72 66 F0 | 	shl	local04, #5
06b28     39 71 02 F1 | 	add	local03, local04
06b2c     10 70 06 F1 | 	add	local03, #16
06b30     38 05 68 FC | 	wrlong	#2, local03
06b34                 | '   word[base+32*iii+20]:=0
06b34     36 71 02 F6 | 	mov	local03, local01
06b38     37 73 02 F6 | 	mov	local04, local02
06b3c     05 72 66 F0 | 	shl	local04, #5
06b40     39 71 02 F1 | 	add	local03, local04
06b44     14 70 06 F1 | 	add	local03, #20
06b48     38 01 58 FC | 	wrword	#0, local03
06b4c                 | '   word[base+32*iii+22]:=8192
06b4c     36 71 02 F6 | 	mov	local03, local01
06b50     37 73 02 F6 | 	mov	local04, local02
06b54     05 72 66 F0 | 	shl	local04, #5
06b58     39 71 02 F1 | 	add	local03, local04
06b5c     16 70 06 F1 | 	add	local03, #22
06b60     10 00 80 FF 
06b64     38 01 58 FC | 	wrword	##8192, local03
06b68                 | '   word[base+32*iii+24]:=100+2*iii
06b68     37 73 02 F6 | 	mov	local04, local02
06b6c     01 72 66 F0 | 	shl	local04, #1
06b70     64 70 06 F6 | 	mov	local03, #100
06b74     39 71 02 F1 | 	add	local03, local04
06b78     36 75 02 F6 | 	mov	local05, local01
06b7c     37 77 02 F6 | 	mov	local06, local02
06b80     05 76 66 F0 | 	shl	local06, #5
06b84     3B 75 02 F1 | 	add	local05, local06
06b88     18 74 06 F1 | 	add	local05, #24
06b8c     3A 71 52 FC | 	wrword	local03, local05
06b90                 | '   word[base+32*iii+26]:=2
06b90     36 71 02 F6 | 	mov	local03, local01
06b94     37 73 02 F6 | 	mov	local04, local02
06b98     05 72 66 F0 | 	shl	local04, #5
06b9c     39 71 02 F1 | 	add	local03, local04
06ba0     1A 70 06 F1 | 	add	local03, #26
06ba4     38 05 58 FC | 	wrword	#2, local03
06ba8                 | '   long [base+32*iii+8]:=@null | $C0000000
06ba8     01 00 00 FF 
06bac     F8 02 06 F1 | 	add	ptr__audio019_spin2_dat__, ##760
06bb0     01 71 02 F6 | 	mov	local03, ptr__audio019_spin2_dat__
06bb4     3E 70 26 F4 | 	bith	local03, #62
06bb8     36 75 02 F6 | 	mov	local05, local01
06bbc     37 77 02 F6 | 	mov	local06, local02
06bc0     05 76 66 F0 | 	shl	local06, #5
06bc4     3B 75 02 F1 | 	add	local05, local06
06bc8     08 74 06 F1 | 	add	local05, #8
06bcc     3A 71 62 FC | 	wrlong	local03, local05
06bd0     01 6E 06 F1 | 	add	local02, #1
06bd4     08 6E 5E F2 | 	cmps	local02, #8 wcz
06bd8     01 00 00 FF 
06bdc     F8 02 86 F1 | 	sub	ptr__audio019_spin2_dat__, ##760
06be0     F4 FE 9F CD |  if_b	jmp	#LR__0292
06be4                 | LR__0293
06be4                 | '   
06be4                 | ' cog:=coginit(16,@audio,@channel1)
06be4     01 61 02 F6 | 	mov	arg02, ptr__audio019_spin2_dat__
06be8     FD 62 02 F6 | 	mov	arg03, objptr
06bec     10 5E 06 F6 | 	mov	arg01, #16
06bf0     28 62 62 FD | 	setq	arg03
06bf4     30 5F F2 FC | 	coginit	arg01, arg02 wc
06bf8     01 5E 66 C6 |  if_b	neg	arg01, #1
06bfc     2F 19 02 F6 | 	mov	result1, arg01
06c00     0C 79 02 F6 | 	mov	local07, result1
06c04                 | ' waitms(100)
06c04     64 5E 06 F6 | 	mov	arg01, #100
06c08     CC 04 B0 FD | 	call	#__system___waitms
06c0c                 | ' return cog,base
06c0c     36 1B 02 F6 | 	mov	result2, local01
06c10     3C 19 02 F6 | 	mov	result1, local07
06c14     AF F0 03 F6 | 	mov	ptra, fp
06c18     BA 00 A0 FD | 	call	#popregs_
06c1c                 | _audio019_spin2_start_ret
06c1c     2D 00 64 FD | 	ret
06c20                 | hubexit
06c20     81 00 80 FD | 	jmp	#cogexit
06c24                 | 
06c24                 | __system___setbaud
06c24     14 98 06 FB | 	rdlong	muldiva_, #20
06c28     2F 9B 02 F6 | 	mov	muldivb_, arg01
06c2c     C6 00 A0 FD | 	call	#divide_
06c30     40 7C 64 FD | 	dirl	#62
06c34     40 7E 64 FD | 	dirl	#63
06c38     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06c3c     10 9A 66 F0 | 	shl	muldivb_, #16
06c40     07 60 06 F6 | 	mov	arg02, #7
06c44     4D 61 02 F1 | 	add	arg02, muldivb_
06c48     3E F8 0C FC | 	wrpin	#124, #62
06c4c     3E 60 16 FC | 	wxpin	arg02, #62
06c50     3F 7C 0C FC | 	wrpin	#62, #63
06c54     14 60 06 F1 | 	add	arg02, #20
06c58     3F 60 16 FC | 	wxpin	arg02, #63
06c5c     41 7C 64 FD | 	dirh	#62
06c60     41 7E 64 FD | 	dirh	#63
06c64                 | __system___setbaud_ret
06c64     2D 00 64 FD | 	ret
06c68                 | 
06c68                 | __system___txraw
06c68     02 5A 05 F6 | 	mov	COUNT_, #2
06c6c     B0 00 A0 FD | 	call	#pushregs_
06c70     2F 6D 02 F6 | 	mov	local01, arg01
06c74     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06c78     0C 00 90 5D |  if_ne	jmp	#LR__0294
06c7c     08 07 00 FF 
06c80     00 5E 06 F6 | 	mov	arg01, ##921600
06c84     9C FF BF FD | 	call	#__system___setbaud
06c88                 | LR__0294
06c88     3E 6C 26 FC | 	wypin	local01, #62
06c8c     1F 02 64 FD | 	waitx	#1
06c90     74 93 9F FE | 	loc	pa,	#(@LR__0296-@LR__0295)
06c94     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c98                 | LR__0295
06c98     40 7C 74 FD | 	testp	#62 wc
06c9c     F8 FF 9F 3D |  if_nc	jmp	#LR__0295
06ca0                 | LR__0296
06ca0     01 18 06 F6 | 	mov	result1, #1
06ca4     AF F0 03 F6 | 	mov	ptra, fp
06ca8     BA 00 A0 FD | 	call	#popregs_
06cac                 | __system___txraw_ret
06cac     2D 00 64 FD | 	ret
06cb0                 | 
06cb0                 | __system___rxraw
06cb0     0B 5A 05 F6 | 	mov	COUNT_, #11
06cb4     B0 00 A0 FD | 	call	#pushregs_
06cb8     2F 6D 02 F6 | 	mov	local01, arg01
06cbc     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06cc0     0C 00 90 5D |  if_ne	jmp	#LR__0297
06cc4     08 07 00 FF 
06cc8     00 5E 06 F6 | 	mov	arg01, ##921600
06ccc     54 FF BF FD | 	call	#__system___setbaud
06cd0                 | LR__0297
06cd0     00 6C 0E F2 | 	cmp	local01, #0 wz
06cd4     18 00 90 AD |  if_e	jmp	#LR__0298
06cd8     1A 70 62 FD | 	getct	local03
06cdc     14 72 06 FB | 	rdlong	local04, #20
06ce0     0A 72 46 F0 | 	shr	local04, #10
06ce4     39 6D 02 FD | 	qmul	local01, local04
06ce8     18 74 62 FD | 	getqx	local05
06cec     3A 71 02 F1 | 	add	local03, local05
06cf0                 | LR__0298
06cf0     01 76 66 F6 | 	neg	local06, #1
06cf4     00 78 06 F6 | 	mov	local07, #0
06cf8     04 00 06 F1 | 	add	ptr___system__dat__, #4
06cfc     00 7B 02 FB | 	rdlong	local08, ptr___system__dat__
06d00     04 00 86 F1 | 	sub	ptr___system__dat__, #4
06d04                 | LR__0299
06d04     08 7A 16 F4 | 	testb	local08, #8 wc
06d08     09 7A 76 F4 | 	testbn	local08, #9 andc
06d0c     0A 7A 46 F0 | 	shr	local08, #10
06d10     01 78 06 C6 |  if_b	mov	local07, #1
06d14     10 00 90 CD |  if_b	jmp	#LR__0300
06d18     40 7E 6C FD | 	testp	#63 wz
06d1c     01 78 06 A6 |  if_e	mov	local07, #1
06d20     3F 7A 8E AA |  if_e	rdpin	local08, #63
06d24     04 7A 46 A0 |  if_e	shr	local08, #4
06d28                 | LR__0300
06d28     00 6E 06 F6 | 	mov	local02, #0
06d2c     00 78 0E F2 | 	cmp	local07, #0 wz
06d30     01 6E 66 56 |  if_ne	neg	local02, #1
06d34     00 7C 06 F6 | 	mov	local09, #0
06d38     00 72 06 F6 | 	mov	local04, #0
06d3c     00 6C 0E F2 | 	cmp	local01, #0 wz
06d40     01 72 66 56 |  if_ne	neg	local04, #1
06d44     00 74 06 F6 | 	mov	local05, #0
06d48     00 7E 06 F6 | 	mov	local10, #0
06d4c     1A 80 62 FD | 	getct	local11
06d50     38 81 82 F1 | 	sub	local11, local03
06d54     00 80 5E F2 | 	cmps	local11, #0 wcz
06d58     01 7E 66 C6 |  if_b	neg	local10, #1
06d5c     00 7E 0E F2 | 	cmp	local10, #0 wz
06d60     01 74 66 56 |  if_ne	neg	local05, #1
06d64     3A 73 CA F7 | 	test	local04, local05 wz
06d68     01 7C 66 56 |  if_ne	neg	local09, #1
06d6c     3E 6F 4A F5 | 	or	local02, local09 wz
06d70     90 FF 9F AD |  if_e	jmp	#LR__0299
06d74     00 78 0E F2 | 	cmp	local07, #0 wz
06d78     3D 77 02 56 |  if_ne	mov	local06, local08
06d7c     FF 76 06 55 |  if_ne	and	local06, #255
06d80     04 00 06 F1 | 	add	ptr___system__dat__, #4
06d84     00 7B 62 FC | 	wrlong	local08, ptr___system__dat__
06d88     04 00 86 F1 | 	sub	ptr___system__dat__, #4
06d8c     3B 19 02 F6 | 	mov	result1, local06
06d90     AF F0 03 F6 | 	mov	ptra, fp
06d94     BA 00 A0 FD | 	call	#popregs_
06d98                 | __system___rxraw_ret
06d98     2D 00 64 FD | 	ret
06d9c                 | 
06d9c                 | __system____builtin_memmove
06d9c     2F 1F 02 F6 | 	mov	_var01, arg01
06da0     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
06da4     50 00 90 3D |  if_ae	jmp	#LR__0308
06da8     74 92 9F FE | 	loc	pa,	#(@LR__0302-@LR__0301)
06dac     93 00 A0 FD | 	call	#FCACHE_LOAD_
06db0                 | LR__0301
06db0     03 62 5E F2 | 	cmps	arg03, #3 wcz
06db4     18 00 90 ED |  if_be	jmp	#LR__0303
06db8     30 21 02 FB | 	rdlong	_var02, arg02
06dbc     2F 21 62 FC | 	wrlong	_var02, arg01
06dc0     04 5E 06 F1 | 	add	arg01, #4
06dc4     04 60 06 F1 | 	add	arg02, #4
06dc8     04 62 86 F1 | 	sub	arg03, #4
06dcc     E0 FF 9F FD | 	jmp	#LR__0301
06dd0                 | LR__0302
06dd0                 | LR__0303
06dd0     31 23 0A F6 | 	mov	_var03, arg03 wz
06dd4     4C 00 90 AD |  if_e	jmp	#LR__0314
06dd8     38 92 9F FE | 	loc	pa,	#(@LR__0306-@LR__0304)
06ddc     93 00 A0 FD | 	call	#FCACHE_LOAD_
06de0                 | LR__0304
06de0     11 09 D8 FC | 	rep	@LR__0307, _var03
06de4                 | LR__0305
06de4     30 21 C2 FA | 	rdbyte	_var02, arg02
06de8     2F 21 42 FC | 	wrbyte	_var02, arg01
06dec     01 5E 06 F1 | 	add	arg01, #1
06df0     01 60 06 F1 | 	add	arg02, #1
06df4                 | LR__0306
06df4                 | LR__0307
06df4     2C 00 90 FD | 	jmp	#LR__0314
06df8                 | LR__0308
06df8     31 5F 02 F1 | 	add	arg01, arg03
06dfc     31 61 02 F1 | 	add	arg02, arg03
06e00     31 25 0A F6 | 	mov	_var04, arg03 wz
06e04     1C 00 90 AD |  if_e	jmp	#LR__0313
06e08     08 92 9F FE | 	loc	pa,	#(@LR__0311-@LR__0309)
06e0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06e10                 | LR__0309
06e10     12 09 D8 FC | 	rep	@LR__0312, _var04
06e14                 | LR__0310
06e14     01 5E 86 F1 | 	sub	arg01, #1
06e18     01 60 86 F1 | 	sub	arg02, #1
06e1c     30 21 C2 FA | 	rdbyte	_var02, arg02
06e20     2F 21 42 FC | 	wrbyte	_var02, arg01
06e24                 | LR__0311
06e24                 | LR__0312
06e24                 | LR__0313
06e24                 | LR__0314
06e24     0F 19 02 F6 | 	mov	result1, _var01
06e28                 | __system____builtin_memmove_ret
06e28     2D 00 64 FD | 	ret
06e2c                 | 
06e2c                 | __system__longmove
06e2c     2F 1F 02 F6 | 	mov	_var01, arg01
06e30     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
06e34     28 00 90 3D |  if_ae	jmp	#LR__0319
06e38     31 21 0A F6 | 	mov	_var02, arg03 wz
06e3c     5C 00 90 AD |  if_e	jmp	#LR__0325
06e40     D0 91 9F FE | 	loc	pa,	#(@LR__0317-@LR__0315)
06e44     93 00 A0 FD | 	call	#FCACHE_LOAD_
06e48                 | LR__0315
06e48     10 09 D8 FC | 	rep	@LR__0318, _var02
06e4c                 | LR__0316
06e4c     30 23 02 FB | 	rdlong	_var03, arg02
06e50     2F 23 62 FC | 	wrlong	_var03, arg01
06e54     04 5E 06 F1 | 	add	arg01, #4
06e58     04 60 06 F1 | 	add	arg02, #4
06e5c                 | LR__0317
06e5c                 | LR__0318
06e5c     3C 00 90 FD | 	jmp	#LR__0325
06e60                 | LR__0319
06e60     31 25 02 F6 | 	mov	_var04, arg03
06e64     02 24 66 F0 | 	shl	_var04, #2
06e68     12 5F 02 F1 | 	add	arg01, _var04
06e6c     31 25 02 F6 | 	mov	_var04, arg03
06e70     02 24 66 F0 | 	shl	_var04, #2
06e74     12 61 02 F1 | 	add	arg02, _var04
06e78     31 27 0A F6 | 	mov	_var05, arg03 wz
06e7c     1C 00 90 AD |  if_e	jmp	#LR__0324
06e80     90 91 9F FE | 	loc	pa,	#(@LR__0322-@LR__0320)
06e84     93 00 A0 FD | 	call	#FCACHE_LOAD_
06e88                 | LR__0320
06e88     13 09 D8 FC | 	rep	@LR__0323, _var05
06e8c                 | LR__0321
06e8c     04 5E 86 F1 | 	sub	arg01, #4
06e90     04 60 86 F1 | 	sub	arg02, #4
06e94     30 23 02 FB | 	rdlong	_var03, arg02
06e98     2F 23 62 FC | 	wrlong	_var03, arg01
06e9c                 | LR__0322
06e9c                 | LR__0323
06e9c                 | LR__0324
06e9c                 | LR__0325
06e9c     0F 19 02 F6 | 	mov	result1, _var01
06ea0                 | __system__longmove_ret
06ea0     2D 00 64 FD | 	ret
06ea4                 | 
06ea4                 | __system____topofstack
06ea4     00 5A 05 F6 | 	mov	COUNT_, #0
06ea8     B0 00 A0 FD | 	call	#pushregs_
06eac     08 F0 07 F1 | 	add	ptra, #8
06eb0     04 5E 05 F1 | 	add	fp, #4
06eb4     AF 5E 62 FC | 	wrlong	arg01, fp
06eb8     AF 18 02 F6 | 	mov	result1, fp
06ebc     04 5E 85 F1 | 	sub	fp, #4
06ec0     AF F0 03 F6 | 	mov	ptra, fp
06ec4     BA 00 A0 FD | 	call	#popregs_
06ec8                 | __system____topofstack_ret
06ec8     2D 00 64 FD | 	ret
06ecc                 | 
06ecc                 | __system___make_methodptr
06ecc     04 5A 05 F6 | 	mov	COUNT_, #4
06ed0     B0 00 A0 FD | 	call	#pushregs_
06ed4     2F 6D 02 F6 | 	mov	local01, arg01
06ed8     30 6F 02 F6 | 	mov	local02, arg02
06edc     08 5E 06 F6 | 	mov	arg01, #8
06ee0     84 0D B0 FD | 	call	#__system___gc_alloc_managed
06ee4     0C 71 0A F6 | 	mov	local03, result1 wz
06ee8     10 00 90 AD |  if_e	jmp	#LR__0326
06eec     38 6D 62 FC | 	wrlong	local01, local03
06ef0     38 73 02 F6 | 	mov	local04, local03
06ef4     04 72 06 F1 | 	add	local04, #4
06ef8     39 6F 62 FC | 	wrlong	local02, local04
06efc                 | LR__0326
06efc     38 19 02 F6 | 	mov	result1, local03
06f00     AF F0 03 F6 | 	mov	ptra, fp
06f04     BA 00 A0 FD | 	call	#popregs_
06f08                 | __system___make_methodptr_ret
06f08     2D 00 64 FD | 	ret
06f0c                 | 
06f0c                 | __system___lockmem
06f0c     02 5A 05 F6 | 	mov	COUNT_, #2
06f10     B0 00 A0 FD | 	call	#pushregs_
06f14     00 18 06 F6 | 	mov	result1, #0
06f18     01 18 62 FD | 	cogid	result1
06f1c     0C 6D 02 F6 | 	mov	local01, result1
06f20     00 6D 06 F1 | 	add	local01, #256
06f24                 | LR__0327
06f24     2F 6F 0A FB | 	rdlong	local02, arg01 wz
06f28     2F 6D 62 AC |  if_e	wrlong	local01, arg01
06f2c     2F 6F 02 AB |  if_e	rdlong	local02, arg01
06f30     2F 6F 02 AB |  if_e	rdlong	local02, arg01
06f34     36 6F 0A F2 | 	cmp	local02, local01 wz
06f38     E8 FF 9F 5D |  if_ne	jmp	#LR__0327
06f3c     AF F0 03 F6 | 	mov	ptra, fp
06f40     BA 00 A0 FD | 	call	#popregs_
06f44                 | __system___lockmem_ret
06f44     2D 00 64 FD | 	ret
06f48                 | 
06f48                 | __system___string_concat
06f48     07 5A 05 F6 | 	mov	COUNT_, #7
06f4c     B0 00 A0 FD | 	call	#pushregs_
06f50     2F 6D 02 F6 | 	mov	local01, arg01
06f54     30 6F 02 F6 | 	mov	local02, arg02
06f58     36 5F 02 F6 | 	mov	arg01, local01
06f5c     00 70 06 F6 | 	mov	local03, #0
06f60     AC 90 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
06f64     93 00 A0 FD | 	call	#FCACHE_LOAD_
06f68                 | LR__0328
06f68     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06f6c     01 70 06 51 |  if_ne	add	local03, #1
06f70     01 5E 06 51 |  if_ne	add	arg01, #1
06f74     F0 FF 9F 5D |  if_ne	jmp	#LR__0328
06f78                 | LR__0329
06f78     38 75 02 F6 | 	mov	local05, local03
06f7c     37 5F 02 F6 | 	mov	arg01, local02
06f80     00 70 06 F6 | 	mov	local03, #0
06f84     88 90 9F FE | 	loc	pa,	#(@LR__0331-@LR__0330)
06f88     93 00 A0 FD | 	call	#FCACHE_LOAD_
06f8c                 | LR__0330
06f8c     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06f90     01 70 06 51 |  if_ne	add	local03, #1
06f94     01 5E 06 51 |  if_ne	add	arg01, #1
06f98     F0 FF 9F 5D |  if_ne	jmp	#LR__0330
06f9c                 | LR__0331
06f9c     38 19 02 F6 | 	mov	result1, local03
06fa0     0C 77 02 F6 | 	mov	local06, result1
06fa4     3A 5F 02 F6 | 	mov	arg01, local05
06fa8     3B 5F 02 F1 | 	add	arg01, local06
06fac     01 5E 06 F1 | 	add	arg01, #1
06fb0     B4 0C B0 FD | 	call	#__system___gc_alloc_managed
06fb4     0C 79 0A F6 | 	mov	local07, result1 wz
06fb8     28 00 90 AD |  if_e	jmp	#LR__0332
06fbc     3C 5F 02 F6 | 	mov	arg01, local07
06fc0     36 61 02 F6 | 	mov	arg02, local01
06fc4     3A 63 02 F6 | 	mov	arg03, local05
06fc8     D0 FD BF FD | 	call	#__system____builtin_memmove
06fcc     3C 5F 02 F6 | 	mov	arg01, local07
06fd0     3A 5F 02 F1 | 	add	arg01, local05
06fd4     01 76 06 F1 | 	add	local06, #1
06fd8     37 61 02 F6 | 	mov	arg02, local02
06fdc     3B 63 02 F6 | 	mov	arg03, local06
06fe0     B8 FD BF FD | 	call	#__system____builtin_memmove
06fe4                 | LR__0332
06fe4     3C 19 02 F6 | 	mov	result1, local07
06fe8     AF F0 03 F6 | 	mov	ptra, fp
06fec     BA 00 A0 FD | 	call	#popregs_
06ff0                 | __system___string_concat_ret
06ff0     2D 00 64 FD | 	ret
06ff4                 | 
06ff4                 | __system___tx
06ff4     03 5A 05 F6 | 	mov	COUNT_, #3
06ff8     B0 00 A0 FD | 	call	#pushregs_
06ffc     2F 6D 02 F6 | 	mov	local01, arg01
07000     0A 6C 0E F2 | 	cmp	local01, #10 wz
07004     20 00 90 5D |  if_ne	jmp	#LR__0333
07008     08 00 06 F1 | 	add	ptr___system__dat__, #8
0700c     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
07010     08 00 86 F1 | 	sub	ptr___system__dat__, #8
07014     37 71 02 F6 | 	mov	local03, local02
07018     02 70 0E F5 | 	and	local03, #2 wz
0701c     08 00 90 AD |  if_e	jmp	#LR__0333
07020     0D 5E 06 F6 | 	mov	arg01, #13
07024     40 FC BF FD | 	call	#__system___txraw
07028                 | LR__0333
07028     36 5F 02 F6 | 	mov	arg01, local01
0702c     38 FC BF FD | 	call	#__system___txraw
07030     AF F0 03 F6 | 	mov	ptra, fp
07034     BA 00 A0 FD | 	call	#popregs_
07038                 | __system___tx_ret
07038     2D 00 64 FD | 	ret
0703c                 | 
0703c                 | __system___rx
0703c     02 5A 05 F6 | 	mov	COUNT_, #2
07040     B0 00 A0 FD | 	call	#pushregs_
07044                 | LR__0334
07044     00 5E 06 F6 | 	mov	arg01, #0
07048     64 FC BF FD | 	call	#__system___rxraw
0704c     0C 6D 02 F6 | 	mov	local01, result1
07050     FF FF 7F FF 
07054     FF 6D 0E F2 | 	cmp	local01, ##-1 wz
07058     E8 FF 9F AD |  if_e	jmp	#LR__0334
0705c     0D 6C 0E F2 | 	cmp	local01, #13 wz
07060     14 00 90 5D |  if_ne	jmp	#LR__0335
07064     08 00 06 F1 | 	add	ptr___system__dat__, #8
07068     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
0706c     08 00 86 F1 | 	sub	ptr___system__dat__, #8
07070     02 6E CE F7 | 	test	local02, #2 wz
07074     0A 6C 06 56 |  if_ne	mov	local01, #10
07078                 | LR__0335
07078     08 00 06 F1 | 	add	ptr___system__dat__, #8
0707c     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
07080     08 00 86 F1 | 	sub	ptr___system__dat__, #8
07084     01 6E CE F7 | 	test	local02, #1 wz
07088     1C 00 90 AD |  if_e	jmp	#LR__0338
0708c     7F 6C 0E F2 | 	cmp	local01, #127 wz
07090     0C 00 90 5D |  if_ne	jmp	#LR__0336
07094     08 5E 06 F6 | 	mov	arg01, #8
07098     58 FF BF FD | 	call	#__system___tx
0709c     08 00 90 FD | 	jmp	#LR__0337
070a0                 | LR__0336
070a0     36 5F 02 F6 | 	mov	arg01, local01
070a4     4C FF BF FD | 	call	#__system___tx
070a8                 | LR__0337
070a8                 | LR__0338
070a8     36 19 02 F6 | 	mov	result1, local01
070ac     AF F0 03 F6 | 	mov	ptra, fp
070b0     BA 00 A0 FD | 	call	#popregs_
070b4                 | __system___rx_ret
070b4     2D 00 64 FD | 	ret
070b8                 | 
070b8                 | __system___pinread
070b8     20 5E CE F7 | 	test	arg01, #32 wz
070bc     FF 1F 02 56 |  if_ne	mov	_var01, inb
070c0     FE 1F 02 A6 |  if_e	mov	_var01, ina
070c4     2F 1F 42 F0 | 	shr	_var01, arg01
070c8     06 5E 46 F0 | 	shr	arg01, #6
070cc     2F 1F 42 F7 | 	zerox	_var01, arg01
070d0     0F 19 02 F6 | 	mov	result1, _var01
070d4                 | __system___pinread_ret
070d4     2D 00 64 FD | 	ret
070d8                 | 
070d8                 | __system___waitms
070d8     03 5A 05 F6 | 	mov	COUNT_, #3
070dc     B0 00 A0 FD | 	call	#pushregs_
070e0     2F 6D 02 F6 | 	mov	local01, arg01
070e4     14 6E 06 FB | 	rdlong	local02, #20
070e8     2C 8F 9F FE | 	loc	pa,	#(@LR__0340-@LR__0339)
070ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
070f0                 | LR__0339
070f0     01 00 00 FF 
070f4     E8 6D 5E F2 | 	cmps	local01, ##1000 wcz
070f8     1F 6E 62 1D |  if_a	waitx	local02
070fc     01 00 00 1F 
07100     E8 6D 86 11 |  if_a	sub	local01, ##1000
07104     E8 FF 9F 1D |  if_a	jmp	#LR__0339
07108                 | LR__0340
07108     0C 00 06 F1 | 	add	ptr___system__dat__, #12
0710c     00 71 0A FB | 	rdlong	local03, ptr___system__dat__ wz
07110     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
07114     20 00 90 5D |  if_ne	jmp	#LR__0341
07118     37 99 02 F6 | 	mov	muldiva_, local02
0711c     01 00 00 FF 
07120     E8 9B 06 F6 | 	mov	muldivb_, ##1000
07124     C2 00 A0 FD | 	call	#unsdivide_
07128     4D 71 02 F6 | 	mov	local03, muldivb_
0712c     0C 00 06 F1 | 	add	ptr___system__dat__, #12
07130     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
07134     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
07138                 | LR__0341
07138     00 6C 5E F2 | 	cmps	local01, #0 wcz
0713c     38 6D 02 1D |  if_a	qmul	local01, local03
07140     18 5E 62 1D |  if_a	getqx	arg01
07144     1F 5E 62 1D |  if_a	waitx	arg01
07148     AF F0 03 F6 | 	mov	ptra, fp
0714c     BA 00 A0 FD | 	call	#popregs_
07150                 | __system___waitms_ret
07150     2D 00 64 FD | 	ret
07154                 | 
07154                 | __system___waitus
07154     02 5A 05 F6 | 	mov	COUNT_, #2
07158     B0 00 A0 FD | 	call	#pushregs_
0715c     2F 6D 02 F6 | 	mov	local01, arg01
07160     10 00 06 F1 | 	add	ptr___system__dat__, #16
07164     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
07168     10 00 86 F1 | 	sub	ptr___system__dat__, #16
0716c     20 00 90 5D |  if_ne	jmp	#LR__0342
07170     14 98 06 FB | 	rdlong	muldiva_, #20
07174     A1 07 00 FF 
07178     40 9A 06 F6 | 	mov	muldivb_, ##1000000
0717c     C2 00 A0 FD | 	call	#unsdivide_
07180     4D 6F 02 F6 | 	mov	local02, muldivb_
07184     10 00 06 F1 | 	add	ptr___system__dat__, #16
07188     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
0718c     10 00 86 F1 | 	sub	ptr___system__dat__, #16
07190                 | LR__0342
07190     37 6D 02 FD | 	qmul	local01, local02
07194     18 5E 62 FD | 	getqx	arg01
07198     1F 5E 62 FD | 	waitx	arg01
0719c     AF F0 03 F6 | 	mov	ptra, fp
071a0     BA 00 A0 FD | 	call	#popregs_
071a4                 | __system___waitus_ret
071a4     2D 00 64 FD | 	ret
071a8                 | 
071a8                 | __system___basic_open
071a8     06 5A 05 F6 | 	mov	COUNT_, #6
071ac     B0 00 A0 FD | 	call	#pushregs_
071b0     30 6D 02 F6 | 	mov	local01, arg02
071b4     31 6F 02 F6 | 	mov	local02, arg03
071b8     32 71 02 F6 | 	mov	local03, arg04
071bc     9C 12 B0 FD | 	call	#__system____getftab
071c0     0C 73 0A F6 | 	mov	local04, result1 wz
071c4     18 00 90 5D |  if_ne	jmp	#LR__0343
071c8     F9 5E 02 F6 | 	mov	arg01, abortchain
071cc     0C 60 06 F6 | 	mov	arg02, #12
071d0     01 62 06 F6 | 	mov	arg03, #1
071d4     E6 00 A0 FD | 	call	#__longjmp
071d8     01 18 66 F6 | 	neg	result1, #1
071dc     90 00 90 FD | 	jmp	#LR__0348
071e0                 | LR__0343
071e0     08 72 06 F1 | 	add	local04, #8
071e4     39 75 0A FB | 	rdlong	local05, local04 wz
071e8     08 72 86 F1 | 	sub	local04, #8
071ec     08 00 90 AD |  if_e	jmp	#LR__0344
071f0     39 5F 02 F6 | 	mov	arg01, local04
071f4     C0 14 B0 FD | 	call	#__system___closeraw
071f8                 | LR__0344
071f8     00 6C 0E F2 | 	cmp	local01, #0 wz
071fc     48 00 90 AD |  if_e	jmp	#LR__0346
07200     04 5E 06 F6 | 	mov	arg01, #4
07204     60 0A B0 FD | 	call	#__system___gc_alloc_managed
07208     0C 77 0A F6 | 	mov	local06, result1 wz
0720c     18 00 90 5D |  if_ne	jmp	#LR__0345
07210     F9 5E 02 F6 | 	mov	arg01, abortchain
07214     07 60 06 F6 | 	mov	arg02, #7
07218     01 62 06 F6 | 	mov	arg03, #1
0721c     E6 00 A0 FD | 	call	#__longjmp
07220     01 18 66 F6 | 	neg	result1, #1
07224     48 00 90 FD | 	jmp	#LR__0348
07228                 | LR__0345
07228     3B 6D 62 FC | 	wrlong	local01, local06
0722c     FE 60 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
07230     3B 5F 02 F6 | 	mov	arg01, local06
07234     94 FC BF FD | 	call	#__system___make_methodptr
07238     18 72 06 F1 | 	add	local04, #24
0723c     39 19 62 FC | 	wrlong	result1, local04
07240     18 72 86 F1 | 	sub	local04, #24
07244     0C 00 90 FD | 	jmp	#LR__0347
07248                 | LR__0346
07248     18 72 06 F1 | 	add	local04, #24
0724c     39 6D 62 FC | 	wrlong	local01, local04
07250     18 72 86 F1 | 	sub	local04, #24
07254                 | LR__0347
07254     08 72 06 F1 | 	add	local04, #8
07258     39 0F 68 FC | 	wrlong	#7, local04
0725c     14 72 06 F1 | 	add	local04, #20
07260     39 6F 62 FC | 	wrlong	local02, local04
07264     04 72 06 F1 | 	add	local04, #4
07268     39 71 62 FC | 	wrlong	local03, local04
0726c     00 18 06 F6 | 	mov	result1, #0
07270                 | LR__0348
07270     AF F0 03 F6 | 	mov	ptra, fp
07274     BA 00 A0 FD | 	call	#popregs_
07278                 | __system___basic_open_ret
07278     2D 00 64 FD | 	ret
0727c                 | 
0727c                 | __system___basic_print_char
0727c     05 5A 05 F6 | 	mov	COUNT_, #5
07280     B0 00 A0 FD | 	call	#pushregs_
07284     30 6D 02 F6 | 	mov	local01, arg02
07288     98 13 B0 FD | 	call	#__system___gettxfunc
0728c     0C 6F 0A F6 | 	mov	local02, result1 wz
07290     00 18 06 A6 |  if_e	mov	result1, #0
07294     24 00 90 AD |  if_e	jmp	#LR__0349
07298     37 71 02 FB | 	rdlong	local03, local02
0729c     04 6E 06 F1 | 	add	local02, #4
072a0     37 73 02 FB | 	rdlong	local04, local02
072a4     36 5F 02 F6 | 	mov	arg01, local01
072a8     FD 74 02 F6 | 	mov	local05, objptr
072ac     38 FB 01 F6 | 	mov	objptr, local03
072b0     2D 72 62 FD | 	call	local04
072b4     3A FB 01 F6 | 	mov	objptr, local05
072b8     01 18 06 F6 | 	mov	result1, #1
072bc                 | LR__0349
072bc     AF F0 03 F6 | 	mov	ptra, fp
072c0     BA 00 A0 FD | 	call	#popregs_
072c4                 | __system___basic_print_char_ret
072c4     2D 00 64 FD | 	ret
072c8                 | 
072c8                 | __system___basic_print_string
072c8     03 5A 05 F6 | 	mov	COUNT_, #3
072cc     B0 00 A0 FD | 	call	#pushregs_
072d0     30 6D 02 F6 | 	mov	local01, arg02
072d4     31 6F 02 F6 | 	mov	local02, arg03
072d8     48 13 B0 FD | 	call	#__system___gettxfunc
072dc     0C 71 0A F6 | 	mov	local03, result1 wz
072e0     00 18 06 A6 |  if_e	mov	result1, #0
072e4     1C 00 90 AD |  if_e	jmp	#LR__0350
072e8     00 6C 0E F2 | 	cmp	local01, #0 wz
072ec     00 18 06 A6 |  if_e	mov	result1, #0
072f0     10 00 90 AD |  if_e	jmp	#LR__0350
072f4     37 61 02 F6 | 	mov	arg02, local02
072f8     36 63 02 F6 | 	mov	arg03, local01
072fc     38 5F 02 F6 | 	mov	arg01, local03
07300     B0 00 B0 FD | 	call	#__system___fmtstr
07304                 | LR__0350
07304     AF F0 03 F6 | 	mov	ptra, fp
07308     BA 00 A0 FD | 	call	#popregs_
0730c                 | __system___basic_print_string_ret
0730c     2D 00 64 FD | 	ret
07310                 | 
07310                 | __system___basic_print_integer
07310     04 5A 05 F6 | 	mov	COUNT_, #4
07314     B0 00 A0 FD | 	call	#pushregs_
07318     30 6D 02 F6 | 	mov	local01, arg02
0731c     31 6F 02 F6 | 	mov	local02, arg03
07320     32 71 02 F6 | 	mov	local03, arg04
07324     FC 12 B0 FD | 	call	#__system___gettxfunc
07328     0C 73 0A F6 | 	mov	local04, result1 wz
0732c     00 18 06 A6 |  if_e	mov	result1, #0
07330     14 00 90 AD |  if_e	jmp	#LR__0351
07334     37 61 02 F6 | 	mov	arg02, local02
07338     36 63 02 F6 | 	mov	arg03, local01
0733c     38 65 02 F6 | 	mov	arg04, local03
07340     39 5F 02 F6 | 	mov	arg01, local04
07344     64 01 B0 FD | 	call	#__system___fmtnum
07348                 | LR__0351
07348     AF F0 03 F6 | 	mov	ptra, fp
0734c     BA 00 A0 FD | 	call	#popregs_
07350                 | __system___basic_print_integer_ret
07350     2D 00 64 FD | 	ret
07354                 | 
07354                 | __system___fmtchar
07354     00 5A 05 F6 | 	mov	COUNT_, #0
07358     B0 00 A0 FD | 	call	#pushregs_
0735c     14 F0 07 F1 | 	add	ptra, #20
07360     04 5E 05 F1 | 	add	fp, #4
07364     AF 5E 62 FC | 	wrlong	arg01, fp
07368     04 5E 05 F1 | 	add	fp, #4
0736c     AF 60 62 FC | 	wrlong	arg02, fp
07370     04 5E 05 F1 | 	add	fp, #4
07374     AF 62 62 FC | 	wrlong	arg03, fp
07378     04 5E 05 F1 | 	add	fp, #4
0737c     AF 62 42 FC | 	wrbyte	arg03, fp
07380     01 5E 05 F1 | 	add	fp, #1
07384     AF 00 48 FC | 	wrbyte	#0, fp
07388     0D 5E 85 F1 | 	sub	fp, #13
0738c     AF 5E 02 FB | 	rdlong	arg01, fp
07390     04 5E 05 F1 | 	add	fp, #4
07394     AF 60 02 FB | 	rdlong	arg02, fp
07398     08 5E 05 F1 | 	add	fp, #8
0739c     AF 62 02 F6 | 	mov	arg03, fp
073a0     10 5E 85 F1 | 	sub	fp, #16
073a4     0C 00 B0 FD | 	call	#__system___fmtstr
073a8     AF F0 03 F6 | 	mov	ptra, fp
073ac     BA 00 A0 FD | 	call	#popregs_
073b0                 | __system___fmtchar_ret
073b0     2D 00 64 FD | 	ret
073b4                 | 
073b4                 | __system___fmtstr
073b4     0E 5A 05 F6 | 	mov	COUNT_, #14
073b8     B0 00 A0 FD | 	call	#pushregs_
073bc     2F 6D 02 F6 | 	mov	local01, arg01
073c0     30 6F 02 F6 | 	mov	local02, arg02
073c4     31 71 02 F6 | 	mov	local03, arg03
073c8     37 73 02 F6 | 	mov	local04, local02
073cc     FF 72 06 F5 | 	and	local04, #255
073d0     38 5F 02 F6 | 	mov	arg01, local03
073d4     00 74 06 F6 | 	mov	local05, #0
073d8     34 8C 9F FE | 	loc	pa,	#(@LR__0353-@LR__0352)
073dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
073e0                 | LR__0352
073e0     2F 77 CA FA | 	rdbyte	local06, arg01 wz
073e4     01 74 06 51 |  if_ne	add	local05, #1
073e8     01 5E 06 51 |  if_ne	add	arg01, #1
073ec     F0 FF 9F 5D |  if_ne	jmp	#LR__0352
073f0                 | LR__0353
073f0     3A 19 02 F6 | 	mov	result1, local05
073f4     0C 79 02 F6 | 	mov	local07, result1
073f8     00 72 0E F2 | 	cmp	local04, #0 wz
073fc     04 00 90 AD |  if_e	jmp	#LR__0354
07400     39 79 7A F3 | 	fles	local07, local04 wcz
07404                 | LR__0354
07404     37 61 02 F6 | 	mov	arg02, local02
07408     3C 63 02 F6 | 	mov	arg03, local07
0740c     36 5F 02 F6 | 	mov	arg01, local01
07410     02 64 06 F6 | 	mov	arg04, #2
07414     BC 10 B0 FD | 	call	#__system___fmtpad
07418     0C 7B 02 F6 | 	mov	local08, result1
0741c     00 7A 5E F2 | 	cmps	local08, #0 wcz
07420     3D 19 02 C6 |  if_b	mov	result1, local08
07424     78 00 90 CD |  if_b	jmp	#LR__0357
07428     00 7C 06 F6 | 	mov	local09, #0
0742c                 | LR__0355
0742c     3C 7D 5A F2 | 	cmps	local09, local07 wcz
07430     44 00 90 3D |  if_ae	jmp	#LR__0356
07434     36 7F 02 F6 | 	mov	local10, local01
07438     3F 81 02 FB | 	rdlong	local11, local10
0743c     04 7E 06 F1 | 	add	local10, #4
07440     3F 83 02 FB | 	rdlong	local12, local10
07444     38 5F C2 FA | 	rdbyte	arg01, local03
07448     FD 84 02 F6 | 	mov	local13, objptr
0744c     40 FB 01 F6 | 	mov	objptr, local11
07450     01 70 06 F1 | 	add	local03, #1
07454     2D 82 62 FD | 	call	local12
07458     42 FB 01 F6 | 	mov	objptr, local13
0745c     0C 87 02 F6 | 	mov	local14, result1
07460     00 86 5E F2 | 	cmps	local14, #0 wcz
07464     43 19 02 C6 |  if_b	mov	result1, local14
07468     34 00 90 CD |  if_b	jmp	#LR__0357
0746c     43 7B 02 F1 | 	add	local08, local14
07470     01 7C 06 F1 | 	add	local09, #1
07474     B4 FF 9F FD | 	jmp	#LR__0355
07478                 | LR__0356
07478     37 61 02 F6 | 	mov	arg02, local02
0747c     3C 63 02 F6 | 	mov	arg03, local07
07480     36 5F 02 F6 | 	mov	arg01, local01
07484     01 64 06 F6 | 	mov	arg04, #1
07488     48 10 B0 FD | 	call	#__system___fmtpad
0748c     0C 87 02 F6 | 	mov	local14, result1
07490     00 86 5E F2 | 	cmps	local14, #0 wcz
07494     43 19 02 C6 |  if_b	mov	result1, local14
07498     43 7B 02 31 |  if_ae	add	local08, local14
0749c     3D 19 02 36 |  if_ae	mov	result1, local08
074a0                 | LR__0357
074a0     AF F0 03 F6 | 	mov	ptra, fp
074a4     BA 00 A0 FD | 	call	#popregs_
074a8                 | __system___fmtstr_ret
074a8     2D 00 64 FD | 	ret
074ac                 | 
074ac                 | __system___fmtnum
074ac     06 5A 05 F6 | 	mov	COUNT_, #6
074b0     B0 00 A0 FD | 	call	#pushregs_
074b4     70 F0 07 F1 | 	add	ptra, #112
074b8     04 5E 05 F1 | 	add	fp, #4
074bc     AF 5E 62 FC | 	wrlong	arg01, fp
074c0     04 5E 05 F1 | 	add	fp, #4
074c4     AF 60 62 FC | 	wrlong	arg02, fp
074c8     04 5E 05 F1 | 	add	fp, #4
074cc     AF 62 62 FC | 	wrlong	arg03, fp
074d0     04 5E 05 F1 | 	add	fp, #4
074d4     AF 64 62 FC | 	wrlong	arg04, fp
074d8     04 5E 05 F1 | 	add	fp, #4
074dc     AF 6C 02 F6 | 	mov	local01, fp
074e0     44 5E 05 F1 | 	add	fp, #68
074e4     AF 6C 62 FC | 	wrlong	local01, fp
074e8     04 5E 05 F1 | 	add	fp, #4
074ec     AF 00 68 FC | 	wrlong	#0, fp
074f0     54 5E 85 F1 | 	sub	fp, #84
074f4     AF 6C 02 FB | 	rdlong	local01, fp
074f8     10 6C 46 F0 | 	shr	local01, #16
074fc     3F 6C 06 F5 | 	and	local01, #63
07500     58 5E 05 F1 | 	add	fp, #88
07504     AF 6C 62 FC | 	wrlong	local01, fp
07508     58 5E 85 F1 | 	sub	fp, #88
0750c     AF 6C 02 FB | 	rdlong	local01, fp
07510     FF 6C 06 F5 | 	and	local01, #255
07514     5C 5E 05 F1 | 	add	fp, #92
07518     AF 6C 62 FC | 	wrlong	local01, fp
0751c     5C 5E 85 F1 | 	sub	fp, #92
07520     AF 6C 02 FB | 	rdlong	local01, fp
07524     1A 6C 46 F0 | 	shr	local01, #26
07528     03 6C 06 F5 | 	and	local01, #3
0752c     60 5E 05 F1 | 	add	fp, #96
07530     AF 6C 62 FC | 	wrlong	local01, fp
07534     08 5E 85 F1 | 	sub	fp, #8
07538     AF 6C 02 FB | 	rdlong	local01, fp
0753c     60 5E 85 F1 | 	sub	fp, #96
07540     00 6C 5E F2 | 	cmps	local01, #0 wcz
07544     14 00 90 ED |  if_be	jmp	#LR__0358
07548     60 5E 05 F1 | 	add	fp, #96
0754c     AF 6C 02 FB | 	rdlong	local01, fp
07550     01 6C 86 F1 | 	sub	local01, #1
07554     AF 6C 62 FC | 	wrlong	local01, fp
07558     60 5E 85 F1 | 	sub	fp, #96
0755c                 | LR__0358
0755c     64 5E 05 F1 | 	add	fp, #100
07560     AF 6C 02 FB | 	rdlong	local01, fp
07564     64 5E 85 F1 | 	sub	fp, #100
07568     40 6C 5E F2 | 	cmps	local01, #64 wcz
0756c     14 00 90 1D |  if_a	jmp	#LR__0359
07570     64 5E 05 F1 | 	add	fp, #100
07574     AF 6E 02 FB | 	rdlong	local02, fp
07578     64 5E 85 F1 | 	sub	fp, #100
0757c     37 71 0A F6 | 	mov	local03, local02 wz
07580     0C 00 90 5D |  if_ne	jmp	#LR__0360
07584                 | LR__0359
07584     64 5E 05 F1 | 	add	fp, #100
07588     AF 80 68 FC | 	wrlong	#64, fp
0758c     64 5E 85 F1 | 	sub	fp, #100
07590                 | LR__0360
07590     68 5E 05 F1 | 	add	fp, #104
07594     AF 6C 02 FB | 	rdlong	local01, fp
07598     68 5E 85 F1 | 	sub	fp, #104
0759c     03 6C 0E F2 | 	cmp	local01, #3 wz
075a0     10 00 90 5D |  if_ne	jmp	#LR__0361
075a4     68 5E 05 F1 | 	add	fp, #104
075a8     AF 00 68 FC | 	wrlong	#0, fp
075ac     68 5E 85 F1 | 	sub	fp, #104
075b0     30 00 90 FD | 	jmp	#LR__0363
075b4                 | LR__0361
075b4     0C 5E 05 F1 | 	add	fp, #12
075b8     AF 6C 02 FB | 	rdlong	local01, fp
075bc     0C 5E 85 F1 | 	sub	fp, #12
075c0     00 6C 5E F2 | 	cmps	local01, #0 wcz
075c4     1C 00 90 3D |  if_ae	jmp	#LR__0362
075c8     68 5E 05 F1 | 	add	fp, #104
075cc     AF 08 68 FC | 	wrlong	#4, fp
075d0     5C 5E 85 F1 | 	sub	fp, #92
075d4     AF 6C 02 FB | 	rdlong	local01, fp
075d8     36 6D 62 F6 | 	neg	local01, local01
075dc     AF 6C 62 FC | 	wrlong	local01, fp
075e0     0C 5E 85 F1 | 	sub	fp, #12
075e4                 | LR__0362
075e4                 | LR__0363
075e4     68 5E 05 F1 | 	add	fp, #104
075e8     AF 6C 0A FB | 	rdlong	local01, fp wz
075ec     68 5E 85 F1 | 	sub	fp, #104
075f0     EC 00 90 AD |  if_e	jmp	#LR__0370
075f4     5C 5E 05 F1 | 	add	fp, #92
075f8     AF 70 02 FB | 	rdlong	local03, fp
075fc     01 70 06 F1 | 	add	local03, #1
07600     AF 70 62 FC | 	wrlong	local03, fp
07604     04 5E 05 F1 | 	add	fp, #4
07608     AF 6C 02 FB | 	rdlong	local01, fp
0760c     04 5E 05 F1 | 	add	fp, #4
07610     AF 70 02 FB | 	rdlong	local03, fp
07614     64 5E 85 F1 | 	sub	fp, #100
07618     38 6D 0A F2 | 	cmp	local01, local03 wz
0761c     3C 00 90 5D |  if_ne	jmp	#LR__0365
07620     60 5E 05 F1 | 	add	fp, #96
07624     AF 70 02 FB | 	rdlong	local03, fp
07628     01 70 86 F1 | 	sub	local03, #1
0762c     AF 70 62 FC | 	wrlong	local03, fp
07630     AF 6C 0A FB | 	rdlong	local01, fp wz
07634     60 5E 85 F1 | 	sub	fp, #96
07638     20 00 90 5D |  if_ne	jmp	#LR__0364
0763c     04 5E 05 F1 | 	add	fp, #4
07640     AF 5E 02 FB | 	rdlong	arg01, fp
07644     04 5E 05 F1 | 	add	fp, #4
07648     AF 60 02 FB | 	rdlong	arg02, fp
0764c     08 5E 85 F1 | 	sub	fp, #8
07650     23 62 06 F6 | 	mov	arg03, #35
07654     FC FC BF FD | 	call	#__system___fmtchar
07658     70 01 90 FD | 	jmp	#LR__0375
0765c                 | LR__0364
0765c                 | LR__0365
0765c     68 5E 05 F1 | 	add	fp, #104
07660     AF 6C 02 FB | 	rdlong	local01, fp
07664     68 5E 85 F1 | 	sub	fp, #104
07668     02 6C 0E F2 | 	cmp	local01, #2 wz
0766c     20 00 90 5D |  if_ne	jmp	#LR__0366
07670     58 5E 05 F1 | 	add	fp, #88
07674     AF 6C 02 FB | 	rdlong	local01, fp
07678     36 71 02 F6 | 	mov	local03, local01
0767c     01 70 06 F1 | 	add	local03, #1
07680     AF 70 62 FC | 	wrlong	local03, fp
07684     58 5E 85 F1 | 	sub	fp, #88
07688     36 41 48 FC | 	wrbyte	#32, local01
0768c     50 00 90 FD | 	jmp	#LR__0369
07690                 | LR__0366
07690     68 5E 05 F1 | 	add	fp, #104
07694     AF 6C 02 FB | 	rdlong	local01, fp
07698     68 5E 85 F1 | 	sub	fp, #104
0769c     04 6C 0E F2 | 	cmp	local01, #4 wz
076a0     20 00 90 5D |  if_ne	jmp	#LR__0367
076a4     58 5E 05 F1 | 	add	fp, #88
076a8     AF 6C 02 FB | 	rdlong	local01, fp
076ac     36 71 02 F6 | 	mov	local03, local01
076b0     01 70 06 F1 | 	add	local03, #1
076b4     AF 70 62 FC | 	wrlong	local03, fp
076b8     58 5E 85 F1 | 	sub	fp, #88
076bc     36 5B 48 FC | 	wrbyte	#45, local01
076c0     1C 00 90 FD | 	jmp	#LR__0368
076c4                 | LR__0367
076c4     58 5E 05 F1 | 	add	fp, #88
076c8     AF 6C 02 FB | 	rdlong	local01, fp
076cc     36 71 02 F6 | 	mov	local03, local01
076d0     01 70 06 F1 | 	add	local03, #1
076d4     AF 70 62 FC | 	wrlong	local03, fp
076d8     58 5E 85 F1 | 	sub	fp, #88
076dc     36 57 48 FC | 	wrbyte	#43, local01
076e0                 | LR__0368
076e0                 | LR__0369
076e0                 | LR__0370
076e0     58 5E 05 F1 | 	add	fp, #88
076e4     AF 5E 02 FB | 	rdlong	arg01, fp
076e8     4C 5E 85 F1 | 	sub	fp, #76
076ec     AF 60 02 FB | 	rdlong	arg02, fp
076f0     04 5E 05 F1 | 	add	fp, #4
076f4     AF 62 02 FB | 	rdlong	arg03, fp
076f8     50 5E 05 F1 | 	add	fp, #80
076fc     AF 64 02 FB | 	rdlong	arg04, fp
07700     00 72 06 F6 | 	mov	local04, #0
07704     58 5E 85 F1 | 	sub	fp, #88
07708     AF 74 02 FB | 	rdlong	local05, fp
0770c     08 5E 85 F1 | 	sub	fp, #8
07710     1D 74 2E F4 | 	testbn	local05, #29 wz
07714     01 72 06 56 |  if_ne	mov	local04, #1
07718     39 67 02 F6 | 	mov	arg05, local04
0771c     78 0E B0 FD | 	call	#__system___uitoa
07720     0C 77 02 F6 | 	mov	local06, result1
07724     5C 5E 05 F1 | 	add	fp, #92
07728     AF 6C 02 FB | 	rdlong	local01, fp
0772c     3B 6D 02 F1 | 	add	local01, local06
07730     AF 6C 62 FC | 	wrlong	local01, fp
07734     08 5E 05 F1 | 	add	fp, #8
07738     AF 70 02 FB | 	rdlong	local03, fp
0773c     64 5E 85 F1 | 	sub	fp, #100
07740     38 6D 5A F2 | 	cmps	local01, local03 wcz
07744     64 00 90 ED |  if_be	jmp	#LR__0374
07748     F4 88 9F FE | 	loc	pa,	#(@LR__0372-@LR__0371)
0774c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07750                 | LR__0371
07750     64 5E 05 F1 | 	add	fp, #100
07754     AF 6C 02 FB | 	rdlong	local01, fp
07758     36 71 02 F6 | 	mov	local03, local01
0775c     01 70 86 F1 | 	sub	local03, #1
07760     AF 70 62 FC | 	wrlong	local03, fp
07764     64 5E 85 F1 | 	sub	fp, #100
07768     00 6C 5E F2 | 	cmps	local01, #0 wcz
0776c     20 00 90 ED |  if_be	jmp	#LR__0373
07770     58 5E 05 F1 | 	add	fp, #88
07774     AF 6C 02 FB | 	rdlong	local01, fp
07778     36 71 02 F6 | 	mov	local03, local01
0777c     01 70 06 F1 | 	add	local03, #1
07780     AF 70 62 FC | 	wrlong	local03, fp
07784     58 5E 85 F1 | 	sub	fp, #88
07788     36 47 48 FC | 	wrbyte	#35, local01
0778c     C0 FF 9F FD | 	jmp	#LR__0371
07790                 | LR__0372
07790                 | LR__0373
07790     58 5E 05 F1 | 	add	fp, #88
07794     AF 6C 02 FB | 	rdlong	local01, fp
07798     36 71 02 F6 | 	mov	local03, local01
0779c     01 70 06 F1 | 	add	local03, #1
077a0     AF 70 62 FC | 	wrlong	local03, fp
077a4     58 5E 85 F1 | 	sub	fp, #88
077a8     36 01 48 FC | 	wrbyte	#0, local01
077ac                 | LR__0374
077ac     04 5E 05 F1 | 	add	fp, #4
077b0     AF 5E 02 FB | 	rdlong	arg01, fp
077b4     04 5E 05 F1 | 	add	fp, #4
077b8     AF 60 02 FB | 	rdlong	arg02, fp
077bc     0C 5E 05 F1 | 	add	fp, #12
077c0     AF 62 02 F6 | 	mov	arg03, fp
077c4     14 5E 85 F1 | 	sub	fp, #20
077c8     E8 FB BF FD | 	call	#__system___fmtstr
077cc                 | LR__0375
077cc     AF F0 03 F6 | 	mov	ptra, fp
077d0     BA 00 A0 FD | 	call	#popregs_
077d4                 | __system___fmtnum_ret
077d4     2D 00 64 FD | 	ret
077d8                 | 
077d8                 | __system__Chr_S
077d8     02 5A 05 F6 | 	mov	COUNT_, #2
077dc     B0 00 A0 FD | 	call	#pushregs_
077e0     2F 6D 02 F6 | 	mov	local01, arg01
077e4     03 5E 06 F6 | 	mov	arg01, #3
077e8     7C 04 B0 FD | 	call	#__system___gc_alloc_managed
077ec     0C 6F 0A F6 | 	mov	local02, result1 wz
077f0     10 00 90 AD |  if_e	jmp	#LR__0376
077f4     37 6D 42 FC | 	wrbyte	local01, local02
077f8     01 6E 06 F1 | 	add	local02, #1
077fc     37 01 48 FC | 	wrbyte	#0, local02
07800     01 6E 86 F1 | 	sub	local02, #1
07804                 | LR__0376
07804     37 19 02 F6 | 	mov	result1, local02
07808     AF F0 03 F6 | 	mov	ptra, fp
0780c     BA 00 A0 FD | 	call	#popregs_
07810                 | __system__Chr_S_ret
07810     2D 00 64 FD | 	ret
07814                 | 
07814                 | __system__Number_S
07814     09 5A 05 F6 | 	mov	COUNT_, #9
07818     B0 00 A0 FD | 	call	#pushregs_
0781c     2F 6D 02 F6 | 	mov	local01, arg01
07820     30 6F 0A F6 | 	mov	local02, arg02 wz
07824     31 71 02 F6 | 	mov	local03, arg03
07828     40 00 90 5D |  if_ne	jmp	#LR__0379
0782c     01 6E 06 F6 | 	mov	local02, #1
07830     38 73 02 F6 | 	mov	local04, local03
07834     01 74 06 F6 | 	mov	local05, #1
07838                 | LR__0377
07838     00 76 06 F6 | 	mov	local06, #0
0783c     36 73 1A F2 | 	cmp	local04, local01 wcz
07840     01 76 66 E6 |  if_be	neg	local06, #1
07844     00 78 06 F6 | 	mov	local07, #0
07848     39 75 1A F2 | 	cmp	local05, local04 wcz
0784c     01 78 66 C6 |  if_b	neg	local07, #1
07850     3C 77 CA F7 | 	test	local06, local07 wz
07854     14 00 90 AD |  if_e	jmp	#LR__0378
07858     39 75 02 F6 | 	mov	local05, local04
0785c     38 73 02 FD | 	qmul	local04, local03
07860     18 72 62 FD | 	getqx	local04
07864     01 6E 06 F1 | 	add	local02, #1
07868     CC FF 9F FD | 	jmp	#LR__0377
0786c                 | LR__0378
0786c                 | LR__0379
0786c     20 6E 3E F3 | 	fle	local02, #32 wcz
07870     37 5F 02 F6 | 	mov	arg01, local02
07874     02 5E 06 F1 | 	add	arg01, #2
07878     EC 03 B0 FD | 	call	#__system___gc_alloc_managed
0787c     0C 7B 02 F6 | 	mov	local08, result1
07880     37 79 02 F6 | 	mov	local07, local02
07884     3D 79 02 F1 | 	add	local07, local08
07888     3C 01 48 FC | 	wrbyte	#0, local07
0788c     AC 87 9F FE | 	loc	pa,	#(@LR__0381-@LR__0380)
07890     93 00 A0 FD | 	call	#FCACHE_LOAD_
07894                 | LR__0380
07894     00 6E 1E F2 | 	cmp	local02, #0 wcz
07898     34 00 90 ED |  if_be	jmp	#LR__0382
0789c     01 6E 86 F1 | 	sub	local02, #1
078a0     36 99 02 F6 | 	mov	muldiva_, local01
078a4     38 9B 02 F6 | 	mov	muldivb_, local03
078a8     C2 00 A0 FD | 	call	#unsdivide_
078ac     4C 7D 02 F6 | 	mov	local09, muldiva_
078b0     4D 6D 02 F6 | 	mov	local01, muldivb_
078b4     0A 7C 1E F2 | 	cmp	local09, #10 wcz
078b8     30 7C 06 C1 |  if_b	add	local09, #48
078bc     37 7C 06 31 |  if_ae	add	local09, #55
078c0     37 79 02 F6 | 	mov	local07, local02
078c4     3D 79 02 F1 | 	add	local07, local08
078c8     3C 7D 42 FC | 	wrbyte	local09, local07
078cc     C4 FF 9F FD | 	jmp	#LR__0380
078d0                 | LR__0381
078d0                 | LR__0382
078d0     3D 19 02 F6 | 	mov	result1, local08
078d4     AF F0 03 F6 | 	mov	ptra, fp
078d8     BA 00 A0 FD | 	call	#popregs_
078dc                 | __system__Number_S_ret
078dc     2D 00 64 FD | 	ret
078e0                 | 
078e0                 | __system__String_S
078e0     05 5A 05 F6 | 	mov	COUNT_, #5
078e4     B0 00 A0 FD | 	call	#pushregs_
078e8     2F 6D 02 F6 | 	mov	local01, arg01
078ec     30 6F 02 F6 | 	mov	local02, arg02
078f0     37 5F 02 F6 | 	mov	arg01, local02
078f4     00 70 06 F6 | 	mov	local03, #0
078f8     14 87 9F FE | 	loc	pa,	#(@LR__0384-@LR__0383)
078fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
07900                 | LR__0383
07900     2F 73 CA FA | 	rdbyte	local04, arg01 wz
07904     01 70 06 51 |  if_ne	add	local03, #1
07908     01 5E 06 51 |  if_ne	add	arg01, #1
0790c     F0 FF 9F 5D |  if_ne	jmp	#LR__0383
07910                 | LR__0384
07910     38 19 0A F6 | 	mov	result1, local03 wz
07914     48 00 00 AF 
07918     92 19 06 A6 |  if_e	mov	result1, ##@LR__0501
0791c     4C 00 90 AD |  if_e	jmp	#LR__0386
07920     00 6C 5E F2 | 	cmps	local01, #0 wcz
07924     48 00 00 EF 
07928     93 19 06 E6 |  if_be	mov	result1, ##@LR__0502
0792c     3C 00 90 ED |  if_be	jmp	#LR__0386
07930     36 5F 02 F6 | 	mov	arg01, local01
07934     02 5E 06 F1 | 	add	arg01, #2
07938     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
0793c     0C 75 0A F6 | 	mov	local05, result1 wz
07940     24 00 90 AD |  if_e	jmp	#LR__0385
07944     37 61 C2 FA | 	rdbyte	arg02, local02
07948     3A 5F 02 F6 | 	mov	arg01, local05
0794c     36 63 02 F6 | 	mov	arg03, local01
07950     A0 00 A0 FD | 	call	#\builtin_bytefill_
07954     01 6C 06 F1 | 	add	local01, #1
07958     3A 6D 02 F1 | 	add	local01, local05
0795c     36 01 48 FC | 	wrbyte	#0, local01
07960     3A 19 02 F6 | 	mov	result1, local05
07964     04 00 90 FD | 	jmp	#LR__0386
07968                 | LR__0385
07968     3A 19 02 F6 | 	mov	result1, local05
0796c                 | LR__0386
0796c     AF F0 03 F6 | 	mov	ptra, fp
07970     BA 00 A0 FD | 	call	#popregs_
07974                 | __system__String_S_ret
07974     2D 00 64 FD | 	ret
07978                 | 
07978                 | __system___gc_ptrs
07978     04 5A 05 F6 | 	mov	COUNT_, #4
0797c     B0 00 A0 FD | 	call	#pushregs_
07980     F8 6C 02 F6 | 	mov	local01, __heap_ptr
07984     36 6F 02 F6 | 	mov	local02, local01
07988     07 00 00 FF 
0798c     F8 6F 06 F1 | 	add	local02, ##4088
07990     36 71 0A FB | 	rdlong	local03, local01 wz
07994     74 00 90 5D |  if_ne	jmp	#LR__0387
07998     37 73 02 F6 | 	mov	local04, local02
0799c     36 73 82 F1 | 	sub	local04, local01
079a0     36 03 58 FC | 	wrword	#1, local01
079a4     36 71 02 F6 | 	mov	local03, local01
079a8     02 70 06 F1 | 	add	local03, #2
079ac     36 00 80 FF 
079b0     38 21 59 FC | 	wrword	##27792, local03
079b4     36 71 02 F6 | 	mov	local03, local01
079b8     04 70 06 F1 | 	add	local03, #4
079bc     38 01 58 FC | 	wrword	#0, local03
079c0     36 71 02 F6 | 	mov	local03, local01
079c4     06 70 06 F1 | 	add	local03, #6
079c8     38 03 58 FC | 	wrword	#1, local03
079cc     10 6C 06 F1 | 	add	local01, #16
079d0     39 71 52 F6 | 	abs	local03, local04 wc
079d4     04 70 46 F0 | 	shr	local03, #4
079d8     38 71 62 C6 |  if_b	neg	local03, local03
079dc     36 71 52 FC | 	wrword	local03, local01
079e0     36 71 02 F6 | 	mov	local03, local01
079e4     02 70 06 F1 | 	add	local03, #2
079e8     36 00 80 FF 
079ec     38 1F 59 FC | 	wrword	##27791, local03
079f0     36 71 02 F6 | 	mov	local03, local01
079f4     04 70 06 F1 | 	add	local03, #4
079f8     38 01 58 FC | 	wrword	#0, local03
079fc     36 71 02 F6 | 	mov	local03, local01
07a00     06 70 06 F1 | 	add	local03, #6
07a04     38 01 58 FC | 	wrword	#0, local03
07a08     10 6C 86 F1 | 	sub	local01, #16
07a0c                 | LR__0387
07a0c     37 1B 02 F6 | 	mov	result2, local02
07a10     36 19 02 F6 | 	mov	result1, local01
07a14     AF F0 03 F6 | 	mov	ptra, fp
07a18     BA 00 A0 FD | 	call	#popregs_
07a1c                 | __system___gc_ptrs_ret
07a1c     2D 00 64 FD | 	ret
07a20                 | 
07a20                 | __system___gc_nextBlockPtr
07a20     02 5A 05 F6 | 	mov	COUNT_, #2
07a24     B0 00 A0 FD | 	call	#pushregs_
07a28     2F 6D 02 F6 | 	mov	local01, arg01
07a2c     36 6F EA FA | 	rdword	local02, local01 wz
07a30     10 00 90 5D |  if_ne	jmp	#LR__0388
07a34     48 00 00 FF 
07a38     94 5F 06 F6 | 	mov	arg01, ##@LR__0503
07a3c     F4 01 B0 FD | 	call	#__system___gc_errmsg
07a40     0C 00 90 FD | 	jmp	#LR__0389
07a44                 | LR__0388
07a44     36 19 02 F6 | 	mov	result1, local01
07a48     04 6E 66 F0 | 	shl	local02, #4
07a4c     37 19 02 F1 | 	add	result1, local02
07a50                 | LR__0389
07a50     AF F0 03 F6 | 	mov	ptra, fp
07a54     BA 00 A0 FD | 	call	#popregs_
07a58                 | __system___gc_nextBlockPtr_ret
07a58     2D 00 64 FD | 	ret
07a5c                 | 
07a5c                 | __system___gc_tryalloc
07a5c     0D 5A 05 F6 | 	mov	COUNT_, #13
07a60     B0 00 A0 FD | 	call	#pushregs_
07a64     2F 6D 02 F6 | 	mov	local01, arg01
07a68     30 6F 02 F6 | 	mov	local02, arg02
07a6c     08 FF BF FD | 	call	#__system___gc_ptrs
07a70     0C 71 02 F6 | 	mov	local03, result1
07a74     0D 73 02 F6 | 	mov	local04, result2
07a78     38 75 02 F6 | 	mov	local05, local03
07a7c     00 76 06 F6 | 	mov	local06, #0
07a80     CC 85 9F FE | 	loc	pa,	#(@LR__0391-@LR__0390)
07a84     93 00 A0 FD | 	call	#FCACHE_LOAD_
07a88                 | LR__0390
07a88     3A 79 02 F6 | 	mov	local07, local05
07a8c     3A 7B 02 F6 | 	mov	local08, local05
07a90     06 7A 06 F1 | 	add	local08, #6
07a94     3D 7D E2 FA | 	rdword	local09, local08
07a98     38 5F 02 F6 | 	mov	arg01, local03
07a9c     3E 61 0A F6 | 	mov	arg02, local09 wz
07aa0     00 18 06 A6 |  if_e	mov	result1, #0
07aa4     04 60 66 50 |  if_ne	shl	arg02, #4
07aa8     30 5F 02 51 |  if_ne	add	arg01, arg02
07aac     2F 19 02 56 |  if_ne	mov	result1, arg01
07ab0     0C 7F 02 F6 | 	mov	local10, result1
07ab4     3F 75 0A F6 | 	mov	local05, local10 wz
07ab8     3A 7F 02 56 |  if_ne	mov	local10, local05
07abc     3F 77 E2 5A |  if_ne	rdword	local06, local10
07ac0     00 74 0E F2 | 	cmp	local05, #0 wz
07ac4     10 00 90 AD |  if_e	jmp	#LR__0392
07ac8     39 75 5A F2 | 	cmps	local05, local04 wcz
07acc     08 00 90 3D |  if_ae	jmp	#LR__0392
07ad0     3B 6D 5A F2 | 	cmps	local01, local06 wcz
07ad4     B0 FF 9F 1D |  if_a	jmp	#LR__0390
07ad8                 | LR__0391
07ad8                 | LR__0392
07ad8     00 74 0E F2 | 	cmp	local05, #0 wz
07adc     3A 19 02 A6 |  if_e	mov	result1, local05
07ae0     44 01 90 AD |  if_e	jmp	#LR__0395
07ae4     3A 7F 02 F6 | 	mov	local10, local05
07ae8     06 7E 06 F1 | 	add	local10, #6
07aec     3F 81 E2 FA | 	rdword	local11, local10
07af0     3B 6D 5A F2 | 	cmps	local01, local06 wcz
07af4     C0 00 90 3D |  if_ae	jmp	#LR__0394
07af8     3A 6D 52 FC | 	wrword	local01, local05
07afc     3A 5F 02 F6 | 	mov	arg01, local05
07b00     36 7D 02 F6 | 	mov	local09, local01
07b04     04 7C 66 F0 | 	shl	local09, #4
07b08     3E 5F 02 F1 | 	add	arg01, local09
07b0c     3B 7F 02 F6 | 	mov	local10, local06
07b10     36 7F 82 F1 | 	sub	local10, local01
07b14     2F 7F 52 FC | 	wrword	local10, arg01
07b18     2F 7F 02 F6 | 	mov	local10, arg01
07b1c     02 7E 06 F1 | 	add	local10, #2
07b20     36 00 80 FF 
07b24     3F 1F 59 FC | 	wrword	##27791, local10
07b28     3A 61 0A F6 | 	mov	arg02, local05 wz
07b2c     00 18 06 A6 |  if_e	mov	result1, #0
07b30     38 61 82 51 |  if_ne	sub	arg02, local03
07b34     04 60 46 50 |  if_ne	shr	arg02, #4
07b38     30 19 02 56 |  if_ne	mov	result1, arg02
07b3c     2F 7D 02 F6 | 	mov	local09, arg01
07b40     04 7C 06 F1 | 	add	local09, #4
07b44     3E 19 52 FC | 	wrword	result1, local09
07b48     3A 7F 02 F6 | 	mov	local10, local05
07b4c     06 7E 06 F1 | 	add	local10, #6
07b50     2F 7D 02 F6 | 	mov	local09, arg01
07b54     3F 7B E2 FA | 	rdword	local08, local10
07b58     06 7C 06 F1 | 	add	local09, #6
07b5c     3E 7B 52 FC | 	wrword	local08, local09
07b60     2F 83 02 F6 | 	mov	local12, arg01
07b64     41 61 0A F6 | 	mov	arg02, local12 wz
07b68     00 18 06 A6 |  if_e	mov	result1, #0
07b6c     38 61 82 51 |  if_ne	sub	arg02, local03
07b70     04 60 46 50 |  if_ne	shr	arg02, #4
07b74     30 19 02 56 |  if_ne	mov	result1, arg02
07b78     0C 81 02 F6 | 	mov	local11, result1
07b7c     A0 FE BF FD | 	call	#__system___gc_nextBlockPtr
07b80     0C 85 0A F6 | 	mov	local13, result1 wz
07b84     30 00 90 AD |  if_e	jmp	#LR__0393
07b88     39 85 5A F2 | 	cmps	local13, local04 wcz
07b8c     28 00 90 3D |  if_ae	jmp	#LR__0393
07b90     38 5F 02 F6 | 	mov	arg01, local03
07b94     41 61 0A F6 | 	mov	arg02, local12 wz
07b98     00 18 06 A6 |  if_e	mov	result1, #0
07b9c     2F 61 82 51 |  if_ne	sub	arg02, arg01
07ba0     04 60 46 50 |  if_ne	shr	arg02, #4
07ba4     30 19 02 56 |  if_ne	mov	result1, arg02
07ba8     0C 7F 02 F6 | 	mov	local10, result1
07bac     42 7D 02 F6 | 	mov	local09, local13
07bb0     04 7C 06 F1 | 	add	local09, #4
07bb4     3E 7F 52 FC | 	wrword	local10, local09
07bb8                 | LR__0393
07bb8                 | LR__0394
07bb8     06 78 06 F1 | 	add	local07, #6
07bbc     3C 81 52 FC | 	wrword	local11, local07
07bc0     36 00 00 FF 
07bc4     80 7E 06 F6 | 	mov	local10, ##27776
07bc8     37 7F 42 F5 | 	or	local10, local02
07bcc     00 18 06 F6 | 	mov	result1, #0
07bd0     01 18 62 FD | 	cogid	result1
07bd4     0C 7F 42 F5 | 	or	local10, result1
07bd8     3A 7B 02 F6 | 	mov	local08, local05
07bdc     02 7A 06 F1 | 	add	local08, #2
07be0     3D 7F 52 FC | 	wrword	local10, local08
07be4     38 7F 02 F6 | 	mov	local10, local03
07be8     08 7E 06 F1 | 	add	local10, #8
07bec     3A 7D 02 F6 | 	mov	local09, local05
07bf0     3F 7B E2 FA | 	rdword	local08, local10
07bf4     06 7C 06 F1 | 	add	local09, #6
07bf8     3E 7B 52 FC | 	wrword	local08, local09
07bfc     3A 61 0A F6 | 	mov	arg02, local05 wz
07c00     00 18 06 A6 |  if_e	mov	result1, #0
07c04     38 61 82 51 |  if_ne	sub	arg02, local03
07c08     04 60 46 50 |  if_ne	shr	arg02, #4
07c0c     30 19 02 56 |  if_ne	mov	result1, arg02
07c10     08 70 06 F1 | 	add	local03, #8
07c14     38 19 52 FC | 	wrword	result1, local03
07c18     3A 19 02 F6 | 	mov	result1, local05
07c1c     08 18 06 F1 | 	add	result1, #8
07c20     00 C0 31 FF 
07c24     00 18 46 F5 | 	or	result1, ##1669332992
07c28                 | LR__0395
07c28     AF F0 03 F6 | 	mov	ptra, fp
07c2c     BA 00 A0 FD | 	call	#popregs_
07c30                 | __system___gc_tryalloc_ret
07c30     2D 00 64 FD | 	ret
07c34                 | 
07c34                 | __system___gc_errmsg
07c34     02 5A 05 F6 | 	mov	COUNT_, #2
07c38     B0 00 A0 FD | 	call	#pushregs_
07c3c     2F 6D 02 F6 | 	mov	local01, arg01
07c40                 | LR__0396
07c40     36 6F CA FA | 	rdbyte	local02, local01 wz
07c44     01 6C 06 F1 | 	add	local01, #1
07c48     0C 00 90 AD |  if_e	jmp	#LR__0397
07c4c     37 5F 02 F6 | 	mov	arg01, local02
07c50     A0 F3 BF FD | 	call	#__system___tx
07c54     E8 FF 9F FD | 	jmp	#LR__0396
07c58                 | LR__0397
07c58     00 18 06 F6 | 	mov	result1, #0
07c5c     AF F0 03 F6 | 	mov	ptra, fp
07c60     BA 00 A0 FD | 	call	#popregs_
07c64                 | __system___gc_errmsg_ret
07c64     2D 00 64 FD | 	ret
07c68                 | 
07c68                 | __system___gc_alloc_managed
07c68     02 5A 05 F6 | 	mov	COUNT_, #2
07c6c     B0 00 A0 FD | 	call	#pushregs_
07c70     2F 6D 02 F6 | 	mov	local01, arg01
07c74     00 60 06 F6 | 	mov	arg02, #0
07c78     30 00 B0 FD | 	call	#__system___gc_doalloc
07c7c     0C 6F 0A F6 | 	mov	local02, result1 wz
07c80     18 00 90 5D |  if_ne	jmp	#LR__0398
07c84     00 6C 5E F2 | 	cmps	local01, #0 wcz
07c88     10 00 90 ED |  if_be	jmp	#LR__0398
07c8c     48 00 00 FF 
07c90     B0 5F 06 F6 | 	mov	arg01, ##@LR__0504
07c94     9C FF BF FD | 	call	#__system___gc_errmsg
07c98     04 00 90 FD | 	jmp	#LR__0399
07c9c                 | LR__0398
07c9c     37 19 02 F6 | 	mov	result1, local02
07ca0                 | LR__0399
07ca0     AF F0 03 F6 | 	mov	ptra, fp
07ca4     BA 00 A0 FD | 	call	#popregs_
07ca8                 | __system___gc_alloc_managed_ret
07ca8     2D 00 64 FD | 	ret
07cac                 | 
07cac                 | __system___gc_doalloc
07cac     06 5A 05 F6 | 	mov	COUNT_, #6
07cb0     B0 00 A0 FD | 	call	#pushregs_
07cb4     2F 6D 0A F6 | 	mov	local01, arg01 wz
07cb8     30 6F 02 F6 | 	mov	local02, arg02
07cbc     00 18 06 A6 |  if_e	mov	result1, #0
07cc0     94 00 90 AD |  if_e	jmp	#LR__0407
07cc4     17 6C 06 F1 | 	add	local01, #23
07cc8     0F 6C 26 F5 | 	andn	local01, #15
07ccc     04 6C 46 F0 | 	shr	local01, #4
07cd0     14 00 06 F1 | 	add	ptr___system__dat__, #20
07cd4     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
07cd8     14 00 86 F1 | 	sub	ptr___system__dat__, #20
07cdc     2C F2 BF FD | 	call	#__system___lockmem
07ce0     36 5F 02 F6 | 	mov	arg01, local01
07ce4     37 61 02 F6 | 	mov	arg02, local02
07ce8     70 FD BF FD | 	call	#__system___gc_tryalloc
07cec     0C 71 0A F6 | 	mov	local03, result1 wz
07cf0     14 00 90 5D |  if_ne	jmp	#LR__0400
07cf4     24 03 B0 FD | 	call	#__system___gc_docollect
07cf8     36 5F 02 F6 | 	mov	arg01, local01
07cfc     37 61 02 F6 | 	mov	arg02, local02
07d00     58 FD BF FD | 	call	#__system___gc_tryalloc
07d04     0C 71 02 F6 | 	mov	local03, result1
07d08                 | LR__0400
07d08     14 00 06 F1 | 	add	ptr___system__dat__, #20
07d0c     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
07d10     14 00 86 F1 | 	sub	ptr___system__dat__, #20
07d14     2F 01 68 FC | 	wrlong	#0, arg01
07d18     00 70 0E F2 | 	cmp	local03, #0 wz
07d1c     34 00 90 AD |  if_e	jmp	#LR__0406
07d20     04 6C 66 F0 | 	shl	local01, #4
07d24     08 6C 86 F1 | 	sub	local01, #8
07d28     36 73 52 F6 | 	abs	local04, local01 wc
07d2c     02 72 46 F0 | 	shr	local04, #2
07d30     39 73 62 C6 |  if_b	neg	local04, local04
07d34     39 75 0A F6 | 	mov	local05, local04 wz
07d38     38 77 02 F6 | 	mov	local06, local03
07d3c     14 00 90 AD |  if_e	jmp	#LR__0405
07d40     C8 82 9F FE | 	loc	pa,	#(@LR__0403-@LR__0401)
07d44     93 00 A0 FD | 	call	#FCACHE_LOAD_
07d48                 | LR__0401
07d48     3A 05 D8 FC | 	rep	@LR__0404, local05
07d4c                 | LR__0402
07d4c     3B 01 68 FC | 	wrlong	#0, local06
07d50     04 76 06 F1 | 	add	local06, #4
07d54                 | LR__0403
07d54                 | LR__0404
07d54                 | LR__0405
07d54                 | LR__0406
07d54     38 19 02 F6 | 	mov	result1, local03
07d58                 | LR__0407
07d58     AF F0 03 F6 | 	mov	ptra, fp
07d5c     BA 00 A0 FD | 	call	#popregs_
07d60                 | __system___gc_doalloc_ret
07d60     2D 00 64 FD | 	ret
07d64                 | 
07d64                 | __system___gc_isvalidptr
07d64     31 1F 02 F6 | 	mov	_var01, arg03
07d68     0F 21 02 F6 | 	mov	_var02, _var01
07d6c     00 F8 7F FF 
07d70     00 20 06 F5 | 	and	_var02, ##-1048576
07d74     00 C0 31 FF 
07d78     00 20 0E F2 | 	cmp	_var02, ##1669332992 wz
07d7c     00 18 06 56 |  if_ne	mov	result1, #0
07d80     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
07d84     08 1E 86 F1 | 	sub	_var01, #8
07d88     00 F8 7F FF 
07d8c     00 1E 26 F5 | 	andn	_var01, ##-1048576
07d90     2F 1F 5A F2 | 	cmps	_var01, arg01 wcz
07d94     08 00 90 CD |  if_b	jmp	#LR__0408
07d98     30 1F 5A F2 | 	cmps	_var01, arg02 wcz
07d9c     08 00 90 CD |  if_b	jmp	#LR__0409
07da0                 | LR__0408
07da0     00 18 06 F6 | 	mov	result1, #0
07da4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
07da8                 | LR__0409
07da8     0F 21 02 F6 | 	mov	_var02, _var01
07dac     2F 21 62 F5 | 	xor	_var02, arg01
07db0     0F 20 0E F5 | 	and	_var02, #15 wz
07db4     00 18 06 56 |  if_ne	mov	result1, #0
07db8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
07dbc     0F 21 02 F6 | 	mov	_var02, _var01
07dc0     02 20 06 F1 | 	add	_var02, #2
07dc4     10 21 E2 FA | 	rdword	_var02, _var02
07dc8     7F 00 00 FF 
07dcc     C0 21 06 F5 | 	and	_var02, ##65472
07dd0     36 00 00 FF 
07dd4     80 20 0E F2 | 	cmp	_var02, ##27776 wz
07dd8     00 18 06 56 |  if_ne	mov	result1, #0
07ddc     0F 19 02 A6 |  if_e	mov	result1, _var01
07de0                 | __system___gc_isvalidptr_ret
07de0     2D 00 64 FD | 	ret
07de4                 | 
07de4                 | __system___gc_dofree
07de4     0D 5A 05 F6 | 	mov	COUNT_, #13
07de8     B0 00 A0 FD | 	call	#pushregs_
07dec     2F 6D 02 F6 | 	mov	local01, arg01
07df0     84 FB BF FD | 	call	#__system___gc_ptrs
07df4     0C 6F 02 F6 | 	mov	local02, result1
07df8     0D 71 02 F6 | 	mov	local03, result2
07dfc     36 73 02 F6 | 	mov	local04, local01
07e00     02 72 06 F1 | 	add	local04, #2
07e04     36 00 80 FF 
07e08     39 1F 59 FC | 	wrword	##27791, local04
07e0c     36 75 02 F6 | 	mov	local05, local01
07e10     36 5F 02 F6 | 	mov	arg01, local01
07e14     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
07e18     0C 77 02 F6 | 	mov	local06, result1
07e1c     2C 82 9F FE | 	loc	pa,	#(@LR__0411-@LR__0410)
07e20     93 00 A0 FD | 	call	#FCACHE_LOAD_
07e24                 | LR__0410
07e24     04 74 06 F1 | 	add	local05, #4
07e28     3A 61 EA FA | 	rdword	arg02, local05 wz
07e2c     37 5F 02 F6 | 	mov	arg01, local02
07e30     00 18 06 A6 |  if_e	mov	result1, #0
07e34     04 60 66 50 |  if_ne	shl	arg02, #4
07e38     30 5F 02 51 |  if_ne	add	arg01, arg02
07e3c     2F 19 02 56 |  if_ne	mov	result1, arg01
07e40     0C 75 0A F6 | 	mov	local05, result1 wz
07e44     28 00 90 AD |  if_e	jmp	#LR__0412
07e48     3A 5F 02 F6 | 	mov	arg01, local05
07e4c     00 78 06 F6 | 	mov	local07, #0
07e50     02 5E 06 F1 | 	add	arg01, #2
07e54     2F 7B E2 FA | 	rdword	local08, arg01
07e58     36 00 00 FF 
07e5c     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
07e60     01 78 66 A6 |  if_e	neg	local07, #1
07e64     3C 19 02 F6 | 	mov	result1, local07
07e68     0C 73 0A F6 | 	mov	local04, result1 wz
07e6c     B4 FF 9F AD |  if_e	jmp	#LR__0410
07e70                 | LR__0411
07e70                 | LR__0412
07e70     00 74 0E F2 | 	cmp	local05, #0 wz
07e74     37 75 02 A6 |  if_e	mov	local05, local02
07e78     3A 73 02 F6 | 	mov	local04, local05
07e7c     06 72 06 F1 | 	add	local04, #6
07e80     36 7D 02 F6 | 	mov	local09, local01
07e84     39 7F E2 FA | 	rdword	local10, local04
07e88     06 7C 06 F1 | 	add	local09, #6
07e8c     3E 7F 52 FC | 	wrword	local10, local09
07e90     36 61 0A F6 | 	mov	arg02, local01 wz
07e94     00 18 06 A6 |  if_e	mov	result1, #0
07e98     37 61 82 51 |  if_ne	sub	arg02, local02
07e9c     04 60 46 50 |  if_ne	shr	arg02, #4
07ea0     30 19 02 56 |  if_ne	mov	result1, arg02
07ea4     3A 7D 02 F6 | 	mov	local09, local05
07ea8     06 7C 06 F1 | 	add	local09, #6
07eac     3E 19 52 FC | 	wrword	result1, local09
07eb0     37 75 0A F2 | 	cmp	local05, local02 wz
07eb4     84 00 90 AD |  if_e	jmp	#LR__0415
07eb8     3A 5F 02 F6 | 	mov	arg01, local05
07ebc     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
07ec0     36 19 0A F2 | 	cmp	result1, local01 wz
07ec4     74 00 90 5D |  if_ne	jmp	#LR__0414
07ec8     3A 73 E2 FA | 	rdword	local04, local05
07ecc     36 81 E2 FA | 	rdword	local11, local01
07ed0     40 73 02 F1 | 	add	local04, local11
07ed4     3A 73 52 FC | 	wrword	local04, local05
07ed8     36 73 02 F6 | 	mov	local04, local01
07edc     02 72 06 F1 | 	add	local04, #2
07ee0     39 01 58 FC | 	wrword	#0, local04
07ee4     36 5F 02 F6 | 	mov	arg01, local01
07ee8     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
07eec     0C 77 02 F6 | 	mov	local06, result1
07ef0     38 77 5A F2 | 	cmps	local06, local03 wcz
07ef4     20 00 90 3D |  if_ae	jmp	#LR__0413
07ef8     3A 61 0A F6 | 	mov	arg02, local05 wz
07efc     00 18 06 A6 |  if_e	mov	result1, #0
07f00     37 61 82 51 |  if_ne	sub	arg02, local02
07f04     04 60 46 50 |  if_ne	shr	arg02, #4
07f08     30 19 02 56 |  if_ne	mov	result1, arg02
07f0c     3B 7D 02 F6 | 	mov	local09, local06
07f10     04 7C 06 F1 | 	add	local09, #4
07f14     3E 19 52 FC | 	wrword	result1, local09
07f18                 | LR__0413
07f18     36 73 02 F6 | 	mov	local04, local01
07f1c     06 72 06 F1 | 	add	local04, #6
07f20     3A 7D 02 F6 | 	mov	local09, local05
07f24     39 7F E2 FA | 	rdword	local10, local04
07f28     06 7C 06 F1 | 	add	local09, #6
07f2c     3E 7F 52 FC | 	wrword	local10, local09
07f30     06 6C 06 F1 | 	add	local01, #6
07f34     36 01 58 FC | 	wrword	#0, local01
07f38     3A 6D 02 F6 | 	mov	local01, local05
07f3c                 | LR__0414
07f3c                 | LR__0415
07f3c     36 5F 02 F6 | 	mov	arg01, local01
07f40     DC FA BF FD | 	call	#__system___gc_nextBlockPtr
07f44     0C 83 0A F6 | 	mov	local12, result1 wz
07f48     C0 00 90 AD |  if_e	jmp	#LR__0417
07f4c     38 83 5A F2 | 	cmps	local12, local03 wcz
07f50     B8 00 90 3D |  if_ae	jmp	#LR__0417
07f54     41 5F 02 F6 | 	mov	arg01, local12
07f58     00 78 06 F6 | 	mov	local07, #0
07f5c     02 5E 06 F1 | 	add	arg01, #2
07f60     2F 7B E2 FA | 	rdword	local08, arg01
07f64     36 00 00 FF 
07f68     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
07f6c     01 78 66 A6 |  if_e	neg	local07, #1
07f70     3C 19 0A F6 | 	mov	result1, local07 wz
07f74     94 00 90 AD |  if_e	jmp	#LR__0417
07f78     36 75 02 F6 | 	mov	local05, local01
07f7c     3A 73 E2 FA | 	rdword	local04, local05
07f80     41 6D 02 F6 | 	mov	local01, local12
07f84     36 81 E2 FA | 	rdword	local11, local01
07f88     40 73 02 F1 | 	add	local04, local11
07f8c     3A 85 02 F6 | 	mov	local13, local05
07f90     42 73 52 FC | 	wrword	local04, local13
07f94     36 73 02 F6 | 	mov	local04, local01
07f98     06 72 06 F1 | 	add	local04, #6
07f9c     3A 7D 02 F6 | 	mov	local09, local05
07fa0     39 7F E2 FA | 	rdword	local10, local04
07fa4     06 7C 06 F1 | 	add	local09, #6
07fa8     3E 7F 52 FC | 	wrword	local10, local09
07fac     36 73 02 F6 | 	mov	local04, local01
07fb0     02 72 06 F1 | 	add	local04, #2
07fb4     39 55 59 FC | 	wrword	#170, local04
07fb8     36 73 02 F6 | 	mov	local04, local01
07fbc     06 72 06 F1 | 	add	local04, #6
07fc0     00 7C 06 F6 | 	mov	local09, #0
07fc4     39 01 58 FC | 	wrword	#0, local04
07fc8     36 5F 02 F6 | 	mov	arg01, local01
07fcc     50 FA BF FD | 	call	#__system___gc_nextBlockPtr
07fd0     0C 73 02 F6 | 	mov	local04, result1
07fd4     39 77 0A F6 | 	mov	local06, local04 wz
07fd8     30 00 90 AD |  if_e	jmp	#LR__0416
07fdc     38 77 5A F2 | 	cmps	local06, local03 wcz
07fe0     28 00 90 3D |  if_ae	jmp	#LR__0416
07fe4     37 5F 02 F6 | 	mov	arg01, local02
07fe8     3A 61 0A F6 | 	mov	arg02, local05 wz
07fec     00 18 06 A6 |  if_e	mov	result1, #0
07ff0     2F 61 82 51 |  if_ne	sub	arg02, arg01
07ff4     04 60 46 50 |  if_ne	shr	arg02, #4
07ff8     30 19 02 56 |  if_ne	mov	result1, arg02
07ffc     0C 73 02 F6 | 	mov	local04, result1
08000     3B 7D 02 F6 | 	mov	local09, local06
08004     04 7C 06 F1 | 	add	local09, #4
08008     3E 73 52 FC | 	wrword	local04, local09
0800c                 | LR__0416
0800c                 | LR__0417
0800c     3B 19 02 F6 | 	mov	result1, local06
08010     AF F0 03 F6 | 	mov	ptra, fp
08014     BA 00 A0 FD | 	call	#popregs_
08018                 | __system___gc_dofree_ret
08018     2D 00 64 FD | 	ret
0801c                 | 
0801c                 | __system___gc_docollect
0801c     09 5A 05 F6 | 	mov	COUNT_, #9
08020     B0 00 A0 FD | 	call	#pushregs_
08024     50 F9 BF FD | 	call	#__system___gc_ptrs
08028     0D 6D 02 F6 | 	mov	local01, result2
0802c     0C 6F 02 F6 | 	mov	local02, result1
08030     37 5F 02 F6 | 	mov	arg01, local02
08034     E8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
08038     0C 71 0A F6 | 	mov	local03, result1 wz
0803c     00 18 06 F6 | 	mov	result1, #0
08040     01 18 62 FD | 	cogid	result1
08044     0C 73 02 F6 | 	mov	local04, result1
08048     34 00 90 AD |  if_e	jmp	#LR__0419
0804c                 | LR__0418
0804c     36 71 5A F2 | 	cmps	local03, local01 wcz
08050     2C 00 90 3D |  if_ae	jmp	#LR__0419
08054     38 75 02 F6 | 	mov	local05, local03
08058     02 74 06 F1 | 	add	local05, #2
0805c     3A 77 E2 FA | 	rdword	local06, local05
08060     20 76 26 F5 | 	andn	local06, #32
08064     38 79 02 F6 | 	mov	local07, local03
08068     02 78 06 F1 | 	add	local07, #2
0806c     3C 77 52 FC | 	wrword	local06, local07
08070     38 5F 02 F6 | 	mov	arg01, local03
08074     A8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
08078     0C 71 0A F6 | 	mov	local03, result1 wz
0807c     CC FF 9F 5D |  if_ne	jmp	#LR__0418
08080                 | LR__0419
08080     00 76 06 F6 | 	mov	local06, #0
08084     00 5E 06 F6 | 	mov	arg01, #0
08088     18 EE BF FD | 	call	#__system____topofstack
0808c     0C 61 02 F6 | 	mov	arg02, result1
08090     3B 5F 02 F6 | 	mov	arg01, local06
08094     9C 00 B0 FD | 	call	#__system___gc_markhub
08098     2C 01 B0 FD | 	call	#__system___gc_markcog
0809c     37 5F 02 F6 | 	mov	arg01, local02
080a0     7C F9 BF FD | 	call	#__system___gc_nextBlockPtr
080a4     0C 7B 0A F6 | 	mov	local08, result1 wz
080a8     10 00 90 5D |  if_ne	jmp	#LR__0420
080ac     48 00 00 FF 
080b0     CD 5F 06 F6 | 	mov	arg01, ##@LR__0505
080b4     7C FB BF FD | 	call	#__system___gc_errmsg
080b8     6C 00 90 FD | 	jmp	#LR__0426
080bc                 | LR__0420
080bc                 | LR__0421
080bc     3D 71 02 F6 | 	mov	local03, local08
080c0     38 5F 02 F6 | 	mov	arg01, local03
080c4     58 F9 BF FD | 	call	#__system___gc_nextBlockPtr
080c8     0C 7B 02 F6 | 	mov	local08, result1
080cc     38 77 02 F6 | 	mov	local06, local03
080d0     02 76 06 F1 | 	add	local06, #2
080d4     3B 7D E2 FA | 	rdword	local09, local06
080d8     20 7C CE F7 | 	test	local09, #32 wz
080dc     38 00 90 5D |  if_ne	jmp	#LR__0424
080e0     3E 75 02 F6 | 	mov	local05, local09
080e4     10 74 0E F5 | 	and	local05, #16 wz
080e8     2C 00 90 5D |  if_ne	jmp	#LR__0424
080ec     3E 77 02 F6 | 	mov	local06, local09
080f0     0F 76 06 F5 | 	and	local06, #15
080f4     3B 7D 02 F6 | 	mov	local09, local06
080f8     39 7D 0A F2 | 	cmp	local09, local04 wz
080fc     08 00 90 AD |  if_e	jmp	#LR__0422
08100     0E 7C 0E F2 | 	cmp	local09, #14 wz
08104     10 00 90 5D |  if_ne	jmp	#LR__0423
08108                 | LR__0422
08108     38 5F 02 F6 | 	mov	arg01, local03
0810c     D4 FC BF FD | 	call	#__system___gc_dofree
08110     0C 77 02 F6 | 	mov	local06, result1
08114     3B 7B 02 F6 | 	mov	local08, local06
08118                 | LR__0423
08118                 | LR__0424
08118     00 7A 0E F2 | 	cmp	local08, #0 wz
0811c     08 00 90 AD |  if_e	jmp	#LR__0425
08120     36 7B 5A F2 | 	cmps	local08, local01 wcz
08124     94 FF 9F CD |  if_b	jmp	#LR__0421
08128                 | LR__0425
08128                 | LR__0426
08128     AF F0 03 F6 | 	mov	ptra, fp
0812c     BA 00 A0 FD | 	call	#popregs_
08130                 | __system___gc_docollect_ret
08130     2D 00 64 FD | 	ret
08134                 | 
08134                 | __system___gc_markhub
08134     09 5A 05 F6 | 	mov	COUNT_, #9
08138     B0 00 A0 FD | 	call	#pushregs_
0813c     2F 6D 02 F6 | 	mov	local01, arg01
08140     30 6F 02 F6 | 	mov	local02, arg02
08144     30 F8 BF FD | 	call	#__system___gc_ptrs
08148     0C 71 02 F6 | 	mov	local03, result1
0814c     0D 73 02 F6 | 	mov	local04, result2
08150                 | LR__0427
08150     37 6D 5A F2 | 	cmps	local01, local02 wcz
08154     64 00 90 3D |  if_ae	jmp	#LR__0428
08158     36 63 02 FB | 	rdlong	arg03, local01
0815c     04 6C 06 F1 | 	add	local01, #4
08160     39 61 02 F6 | 	mov	arg02, local04
08164     38 5F 02 F6 | 	mov	arg01, local03
08168     F8 FB BF FD | 	call	#__system___gc_isvalidptr
0816c     0C 75 0A F6 | 	mov	local05, result1 wz
08170     DC FF 9F AD |  if_e	jmp	#LR__0427
08174     3A 5F 02 F6 | 	mov	arg01, local05
08178     00 76 06 F6 | 	mov	local06, #0
0817c     02 5E 06 F1 | 	add	arg01, #2
08180     2F 79 E2 FA | 	rdword	local07, arg01
08184     36 00 00 FF 
08188     8F 78 0E F2 | 	cmp	local07, ##27791 wz
0818c     01 76 66 A6 |  if_e	neg	local06, #1
08190     3B 19 0A F6 | 	mov	result1, local06 wz
08194     B8 FF 9F 5D |  if_ne	jmp	#LR__0427
08198     3A 7B 02 F6 | 	mov	local08, local05
0819c     02 7A 06 F1 | 	add	local08, #2
081a0     3D 7D E2 FA | 	rdword	local09, local08
081a4     0F 7C 26 F5 | 	andn	local09, #15
081a8     2E 7C 46 F5 | 	or	local09, #46
081ac     3A 7B 02 F6 | 	mov	local08, local05
081b0     02 7A 06 F1 | 	add	local08, #2
081b4     3D 7D 52 FC | 	wrword	local09, local08
081b8     94 FF 9F FD | 	jmp	#LR__0427
081bc                 | LR__0428
081bc     AF F0 03 F6 | 	mov	ptra, fp
081c0     BA 00 A0 FD | 	call	#popregs_
081c4                 | __system___gc_markhub_ret
081c4     2D 00 64 FD | 	ret
081c8                 | 
081c8                 | __system___gc_markcog
081c8     06 5A 05 F6 | 	mov	COUNT_, #6
081cc     B0 00 A0 FD | 	call	#pushregs_
081d0     A4 F7 BF FD | 	call	#__system___gc_ptrs
081d4     0C 6D 02 F6 | 	mov	local01, result1
081d8     0D 6F 02 F6 | 	mov	local02, result2
081dc     00 70 06 F6 | 	mov	local03, #0
081e0                 | LR__0429
081e0     F0 73 06 F6 | 	mov	local04, #496
081e4     38 73 82 F1 | 	sub	local04, local03
081e8     F0 73 06 F1 | 	add	local04, #496
081ec                 | 	'.live	local04
081ec     00 72 96 F9 | 	alts	local04, #0
081f0     39 75 02 F6 | 	mov	local05, local04
081f4     36 5F 02 F6 | 	mov	arg01, local01
081f8     37 61 02 F6 | 	mov	arg02, local02
081fc     3A 63 02 F6 | 	mov	arg03, local05
08200     60 FB BF FD | 	call	#__system___gc_isvalidptr
08204     0C 75 0A F6 | 	mov	local05, result1 wz
08208     18 00 90 AD |  if_e	jmp	#LR__0430
0820c     3A 77 02 F6 | 	mov	local06, local05
08210     02 76 06 F1 | 	add	local06, #2
08214     3B 73 E2 FA | 	rdword	local04, local06
08218     20 72 46 F5 | 	or	local04, #32
0821c     02 74 06 F1 | 	add	local05, #2
08220     3A 73 52 FC | 	wrword	local04, local05
08224                 | LR__0430
08224     01 70 06 F1 | 	add	local03, #1
08228     F0 71 5E F2 | 	cmps	local03, #496 wcz
0822c     B0 FF 9F CD |  if_b	jmp	#LR__0429
08230     AF F0 03 F6 | 	mov	ptra, fp
08234     BA 00 A0 FD | 	call	#popregs_
08238                 | __system___gc_markcog_ret
08238     2D 00 64 FD | 	ret
0823c                 | 
0823c                 | __system__write
0823c     03 5A 05 F6 | 	mov	COUNT_, #3
08240     B0 00 A0 FD | 	call	#pushregs_
08244     2F 6D 02 F6 | 	mov	local01, arg01
08248     30 6F 02 F6 | 	mov	local02, arg02
0824c     31 71 02 F6 | 	mov	local03, arg03
08250     0A 6C 1E F2 | 	cmp	local01, #10 wcz
08254     14 00 90 CD |  if_b	jmp	#LR__0431
08258     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0825c     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
08260     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08264     01 18 66 F6 | 	neg	result1, #1
08268     28 00 90 FD | 	jmp	#LR__0432
0826c                 | LR__0431
0826c     36 5F 02 F6 | 	mov	arg01, local01
08270     01 5E 66 F0 | 	shl	arg01, #1
08274     36 5F 02 F1 | 	add	arg01, local01
08278     04 5E 66 F0 | 	shl	arg01, #4
0827c     24 00 06 F1 | 	add	ptr___system__dat__, #36
08280     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
08284     37 61 02 F6 | 	mov	arg02, local02
08288     38 63 02 F6 | 	mov	arg03, local03
0828c     24 00 86 F1 | 	sub	ptr___system__dat__, #36
08290     9C 08 B0 FD | 	call	#__system___vfswrite
08294                 | LR__0432
08294     AF F0 03 F6 | 	mov	ptra, fp
08298     BA 00 A0 FD | 	call	#popregs_
0829c                 | __system__write_ret
0829c     2D 00 64 FD | 	ret
082a0                 | 
082a0                 | __system__read
082a0     03 5A 05 F6 | 	mov	COUNT_, #3
082a4     B0 00 A0 FD | 	call	#pushregs_
082a8     2F 6D 02 F6 | 	mov	local01, arg01
082ac     30 6F 02 F6 | 	mov	local02, arg02
082b0     31 71 02 F6 | 	mov	local03, arg03
082b4     0A 6C 1E F2 | 	cmp	local01, #10 wcz
082b8     14 00 90 CD |  if_b	jmp	#LR__0433
082bc     1C 00 06 F1 | 	add	ptr___system__dat__, #28
082c0     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
082c4     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
082c8     01 18 66 F6 | 	neg	result1, #1
082cc     28 00 90 FD | 	jmp	#LR__0434
082d0                 | LR__0433
082d0     36 5F 02 F6 | 	mov	arg01, local01
082d4     01 5E 66 F0 | 	shl	arg01, #1
082d8     36 5F 02 F1 | 	add	arg01, local01
082dc     04 5E 66 F0 | 	shl	arg01, #4
082e0     24 00 06 F1 | 	add	ptr___system__dat__, #36
082e4     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
082e8     37 61 02 F6 | 	mov	arg02, local02
082ec     38 63 02 F6 | 	mov	arg03, local03
082f0     24 00 86 F1 | 	sub	ptr___system__dat__, #36
082f4     E4 09 B0 FD | 	call	#__system___vfsread
082f8                 | LR__0434
082f8     AF F0 03 F6 | 	mov	ptra, fp
082fc     BA 00 A0 FD | 	call	#popregs_
08300                 | __system__read_ret
08300     2D 00 64 FD | 	ret
08304                 | 
08304                 | __system__close
08304     01 5A 05 F6 | 	mov	COUNT_, #1
08308     B0 00 A0 FD | 	call	#pushregs_
0830c     2F 6D 02 F6 | 	mov	local01, arg01
08310     0A 6C 1E F2 | 	cmp	local01, #10 wcz
08314     14 00 90 CD |  if_b	jmp	#LR__0435
08318     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0831c     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
08320     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08324     01 18 66 F6 | 	neg	result1, #1
08328     20 00 90 FD | 	jmp	#LR__0436
0832c                 | LR__0435
0832c     36 5F 02 F6 | 	mov	arg01, local01
08330     01 5E 66 F0 | 	shl	arg01, #1
08334     36 5F 02 F1 | 	add	arg01, local01
08338     04 5E 66 F0 | 	shl	arg01, #4
0833c     24 00 06 F1 | 	add	ptr___system__dat__, #36
08340     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
08344     24 00 86 F1 | 	sub	ptr___system__dat__, #36
08348     6C 03 B0 FD | 	call	#__system___closeraw
0834c                 | LR__0436
0834c     AF F0 03 F6 | 	mov	ptra, fp
08350     BA 00 A0 FD | 	call	#popregs_
08354                 | __system__close_ret
08354     2D 00 64 FD | 	ret
08358                 | 
08358                 | __system__lseek
08358     09 5A 05 F6 | 	mov	COUNT_, #9
0835c     B0 00 A0 FD | 	call	#pushregs_
08360     2F 6D 02 F6 | 	mov	local01, arg01
08364     30 6F 02 F6 | 	mov	local02, arg02
08368     31 71 02 F6 | 	mov	local03, arg03
0836c     0A 6C 1E F2 | 	cmp	local01, #10 wcz
08370     14 00 90 CD |  if_b	jmp	#LR__0437
08374     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08378     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0837c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08380     01 18 66 F6 | 	neg	result1, #1
08384     C8 00 90 FD | 	jmp	#LR__0441
08388                 | LR__0437
08388     36 73 02 F6 | 	mov	local04, local01
0838c     01 72 66 F0 | 	shl	local04, #1
08390     36 73 02 F1 | 	add	local04, local01
08394     04 72 66 F0 | 	shl	local04, #4
08398     24 00 06 F1 | 	add	ptr___system__dat__, #36
0839c     00 73 02 F1 | 	add	local04, ptr___system__dat__
083a0     2C 72 06 F1 | 	add	local04, #44
083a4     39 75 0A FB | 	rdlong	local05, local04 wz
083a8     2C 72 86 F1 | 	sub	local04, #44
083ac     24 00 86 F1 | 	sub	ptr___system__dat__, #36
083b0     14 00 90 5D |  if_ne	jmp	#LR__0438
083b4     1C 00 06 F1 | 	add	ptr___system__dat__, #28
083b8     00 21 68 FC | 	wrlong	#16, ptr___system__dat__
083bc     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
083c0     01 18 66 F6 | 	neg	result1, #1
083c4     88 00 90 FD | 	jmp	#LR__0441
083c8                 | LR__0438
083c8     08 72 06 F1 | 	add	local04, #8
083cc     39 75 02 FB | 	rdlong	local05, local04
083d0     08 72 86 F1 | 	sub	local04, #8
083d4     40 74 CE F7 | 	test	local05, #64 wz
083d8     14 00 90 AD |  if_e	jmp	#LR__0439
083dc     08 72 06 F1 | 	add	local04, #8
083e0     39 75 02 FB | 	rdlong	local05, local04
083e4     80 74 46 F5 | 	or	local05, #128
083e8     39 75 62 FC | 	wrlong	local05, local04
083ec     08 72 86 F1 | 	sub	local04, #8
083f0                 | LR__0439
083f0     2C 72 06 F1 | 	add	local04, #44
083f4     39 75 02 FB | 	rdlong	local05, local04
083f8     2C 72 86 F1 | 	sub	local04, #44
083fc     3A 77 02 FB | 	rdlong	local06, local05
08400     04 74 06 F1 | 	add	local05, #4
08404     3A 79 02 FB | 	rdlong	local07, local05
08408     39 5F 02 F6 | 	mov	arg01, local04
0840c     37 61 02 F6 | 	mov	arg02, local02
08410     38 63 02 F6 | 	mov	arg03, local03
08414     FD 7A 02 F6 | 	mov	local08, objptr
08418     3B FB 01 F6 | 	mov	objptr, local06
0841c     2D 78 62 FD | 	call	local07
08420     3D FB 01 F6 | 	mov	objptr, local08
08424     0C 7D 02 F6 | 	mov	local09, result1
08428     00 7C 5E F2 | 	cmps	local09, #0 wcz
0842c     1C 00 90 3D |  if_ae	jmp	#LR__0440
08430     3E 5F 6A F6 | 	neg	arg01, local09 wz
08434     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08438     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
0843c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08440     01 18 66 56 |  if_ne	neg	result1, #1
08444     00 18 06 A6 |  if_e	mov	result1, #0
08448     04 00 90 FD | 	jmp	#LR__0441
0844c                 | LR__0440
0844c     3E 19 02 F6 | 	mov	result1, local09
08450                 | LR__0441
08450     AF F0 03 F6 | 	mov	ptra, fp
08454     BA 00 A0 FD | 	call	#popregs_
08458                 | __system__lseek_ret
08458     2D 00 64 FD | 	ret
0845c                 | 
0845c                 | __system____getftab
0845c     0A 5E 1E F2 | 	cmp	arg01, #10 wcz
08460     00 18 06 36 |  if_ae	mov	result1, #0
08464     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
08468     2F 19 02 F6 | 	mov	result1, arg01
0846c     01 18 66 F0 | 	shl	result1, #1
08470     2F 19 02 F1 | 	add	result1, arg01
08474     04 18 66 F0 | 	shl	result1, #4
08478     24 00 06 F1 | 	add	ptr___system__dat__, #36
0847c     00 19 02 F1 | 	add	result1, ptr___system__dat__
08480     24 00 86 F1 | 	sub	ptr___system__dat__, #36
08484                 | __system____getftab_ret
08484     2D 00 64 FD | 	ret
08488                 | 
08488                 | __system___strrev
08488     2F 1F CA FA | 	rdbyte	_var01, arg01 wz
0848c     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
08490     2F 21 02 F6 | 	mov	_var02, arg01
08494     74 7B 9F FE | 	loc	pa,	#(@LR__0443-@LR__0442)
08498     93 00 A0 FD | 	call	#FCACHE_LOAD_
0849c                 | LR__0442
0849c     10 1F CA FA | 	rdbyte	_var01, _var02 wz
084a0     01 20 06 51 |  if_ne	add	_var02, #1
084a4     F4 FF 9F 5D |  if_ne	jmp	#LR__0442
084a8                 | LR__0443
084a8     01 20 86 F1 | 	sub	_var02, #1
084ac                 | LR__0444
084ac     2F 21 5A F2 | 	cmps	_var02, arg01 wcz
084b0     1C 00 90 ED |  if_be	jmp	#LR__0445
084b4     2F 23 C2 FA | 	rdbyte	_var03, arg01
084b8     10 25 C2 FA | 	rdbyte	_var04, _var02
084bc     2F 25 42 FC | 	wrbyte	_var04, arg01
084c0     10 23 42 FC | 	wrbyte	_var03, _var02
084c4     01 5E 06 F1 | 	add	arg01, #1
084c8     01 20 86 F1 | 	sub	_var02, #1
084cc     DC FF 9F FD | 	jmp	#LR__0444
084d0                 | LR__0445
084d0                 | __system___strrev_ret
084d0     2D 00 64 FD | 	ret
084d4                 | 
084d4                 | __system___fmtpad
084d4     0C 5A 05 F6 | 	mov	COUNT_, #12
084d8     B0 00 A0 FD | 	call	#pushregs_
084dc     2F 6D 02 F6 | 	mov	local01, arg01
084e0     30 6F 02 F6 | 	mov	local02, arg02
084e4     32 71 02 F6 | 	mov	local03, arg04
084e8     37 73 EA F8 | 	getbyte	local04, local02, #1
084ec     16 6E 46 F0 | 	shr	local02, #22
084f0     03 6E 0E F5 | 	and	local02, #3 wz
084f4     00 74 06 F6 | 	mov	local05, #0
084f8     01 6E 06 A6 |  if_e	mov	local02, #1
084fc     38 6F CA F7 | 	test	local02, local03 wz
08500     00 18 06 A6 |  if_e	mov	result1, #0
08504     84 00 90 AD |  if_e	jmp	#LR__0449
08508     31 73 82 F1 | 	sub	local04, arg03
0850c     39 77 02 F6 | 	mov	local06, local04
08510     00 76 5E F2 | 	cmps	local06, #0 wcz
08514     00 18 06 E6 |  if_be	mov	result1, #0
08518     70 00 90 ED |  if_be	jmp	#LR__0449
0851c     03 6E 0E F2 | 	cmp	local02, #3 wz
08520     18 00 90 5D |  if_ne	jmp	#LR__0446
08524     01 70 0E F2 | 	cmp	local03, #1 wz
08528     6E 78 62 FD | 	wrz	local07
0852c     3C 77 02 F1 | 	add	local06, local07
08530     3B 77 52 F6 | 	abs	local06, local06 wc
08534     01 76 46 F0 | 	shr	local06, #1
08538     3B 77 62 C6 |  if_b	neg	local06, local06
0853c                 | LR__0446
0853c     00 7A 06 F6 | 	mov	local08, #0
08540                 | LR__0447
08540     3B 7B 5A F2 | 	cmps	local08, local06 wcz
08544     40 00 90 3D |  if_ae	jmp	#LR__0448
08548     36 7D 02 F6 | 	mov	local09, local01
0854c     3E 79 02 FB | 	rdlong	local07, local09
08550     04 7C 06 F1 | 	add	local09, #4
08554     3E 7F 02 FB | 	rdlong	local10, local09
08558     20 5E 06 F6 | 	mov	arg01, #32
0855c     FD 80 02 F6 | 	mov	local11, objptr
08560     3C FB 01 F6 | 	mov	objptr, local07
08564     2D 7E 62 FD | 	call	local10
08568     40 FB 01 F6 | 	mov	objptr, local11
0856c     0C 83 02 F6 | 	mov	local12, result1
08570     00 82 5E F2 | 	cmps	local12, #0 wcz
08574     41 19 02 C6 |  if_b	mov	result1, local12
08578     10 00 90 CD |  if_b	jmp	#LR__0449
0857c     41 75 02 F1 | 	add	local05, local12
08580     01 7A 06 F1 | 	add	local08, #1
08584     B8 FF 9F FD | 	jmp	#LR__0447
08588                 | LR__0448
08588     3A 19 02 F6 | 	mov	result1, local05
0858c                 | LR__0449
0858c     AF F0 03 F6 | 	mov	ptra, fp
08590     BA 00 A0 FD | 	call	#popregs_
08594                 | __system___fmtpad_ret
08594     2D 00 64 FD | 	ret
08598                 | 
08598                 | __system___uitoa
08598     09 5A 05 F6 | 	mov	COUNT_, #9
0859c     B0 00 A0 FD | 	call	#pushregs_
085a0     2F 6D 02 F6 | 	mov	local01, arg01
085a4     30 6F 02 F6 | 	mov	local02, arg02
085a8     31 71 02 F6 | 	mov	local03, arg03
085ac     32 73 02 F6 | 	mov	local04, arg04
085b0     33 75 0A F6 | 	mov	local05, arg05 wz
085b4     36 77 02 F6 | 	mov	local06, local01
085b8     00 78 06 F6 | 	mov	local07, #0
085bc     37 7A 06 56 |  if_ne	mov	local08, #55
085c0     57 7A 06 A6 |  if_e	mov	local08, #87
085c4                 | LR__0450
085c4     37 99 02 F6 | 	mov	muldiva_, local02
085c8     38 9B 02 F6 | 	mov	muldivb_, local03
085cc     C2 00 A0 FD | 	call	#unsdivide_
085d0     4C 7D 02 F6 | 	mov	local09, muldiva_
085d4     0A 7C 1E F2 | 	cmp	local09, #10 wcz
085d8     30 7C 06 C1 |  if_b	add	local09, #48
085dc     3D 7D 02 31 |  if_ae	add	local09, local08
085e0     3B 7D 42 FC | 	wrbyte	local09, local06
085e4     37 99 02 F6 | 	mov	muldiva_, local02
085e8     38 9B 02 F6 | 	mov	muldivb_, local03
085ec     01 76 06 F1 | 	add	local06, #1
085f0     C2 00 A0 FD | 	call	#unsdivide_
085f4     4D 6F 0A F6 | 	mov	local02, muldivb_ wz
085f8     01 78 06 F1 | 	add	local07, #1
085fc     C4 FF 9F 5D |  if_ne	jmp	#LR__0450
08600     39 79 1A F2 | 	cmp	local07, local04 wcz
08604     BC FF 9F CD |  if_b	jmp	#LR__0450
08608     3B 01 48 FC | 	wrbyte	#0, local06
0860c     36 5F 02 F6 | 	mov	arg01, local01
08610     74 FE BF FD | 	call	#__system___strrev
08614     3C 19 02 F6 | 	mov	result1, local07
08618     AF F0 03 F6 | 	mov	ptra, fp
0861c     BA 00 A0 FD | 	call	#popregs_
08620                 | __system___uitoa_ret
08620     2D 00 64 FD | 	ret
08624                 | 
08624                 | __system___gettxfunc
08624     03 5A 05 F6 | 	mov	COUNT_, #3
08628     B0 00 A0 FD | 	call	#pushregs_
0862c     2C FE BF FD | 	call	#__system____getftab
08630     0C 6D 0A F6 | 	mov	local01, result1 wz
08634     14 00 90 AD |  if_e	jmp	#LR__0451
08638     08 6C 06 F1 | 	add	local01, #8
0863c     36 6F 02 FB | 	rdlong	local02, local01
08640     08 6C 86 F1 | 	sub	local01, #8
08644     37 71 0A F6 | 	mov	local03, local02 wz
08648     08 00 90 5D |  if_ne	jmp	#LR__0452
0864c                 | LR__0451
0864c     00 18 06 F6 | 	mov	result1, #0
08650     0C 00 90 FD | 	jmp	#LR__0453
08654                 | LR__0452
08654     FF 60 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
08658     36 5F 02 F6 | 	mov	arg01, local01
0865c     6C E8 BF FD | 	call	#__system___make_methodptr
08660                 | LR__0453
08660     AF F0 03 F6 | 	mov	ptra, fp
08664     BA 00 A0 FD | 	call	#popregs_
08668                 | __system___gettxfunc_ret
08668     2D 00 64 FD | 	ret
0866c                 | 
0866c                 | __system___getiolock_0150
0866c     03 5A 05 F6 | 	mov	COUNT_, #3
08670     B0 00 A0 FD | 	call	#pushregs_
08674     E4 FD BF FD | 	call	#__system____getftab
08678     0C 6D 0A F6 | 	mov	local01, result1 wz
0867c     14 00 90 AD |  if_e	jmp	#LR__0454
08680     08 6C 06 F1 | 	add	local01, #8
08684     36 6F 02 FB | 	rdlong	local02, local01
08688     08 6C 86 F1 | 	sub	local01, #8
0868c     37 71 0A F6 | 	mov	local03, local02 wz
08690     10 00 90 5D |  if_ne	jmp	#LR__0455
08694                 | LR__0454
08694     20 00 06 F1 | 	add	ptr___system__dat__, #32
08698     00 19 02 F6 | 	mov	result1, ptr___system__dat__
0869c     20 00 86 F1 | 	sub	ptr___system__dat__, #32
086a0     08 00 90 FD | 	jmp	#LR__0456
086a4                 | LR__0455
086a4     0C 6C 06 F1 | 	add	local01, #12
086a8     36 19 02 F6 | 	mov	result1, local01
086ac                 | LR__0456
086ac     AF F0 03 F6 | 	mov	ptra, fp
086b0     BA 00 A0 FD | 	call	#popregs_
086b4                 | __system___getiolock_0150_ret
086b4     2D 00 64 FD | 	ret
086b8                 | 
086b8                 | __system___closeraw
086b8     06 5A 05 F6 | 	mov	COUNT_, #6
086bc     B0 00 A0 FD | 	call	#pushregs_
086c0     2F 6D 02 F6 | 	mov	local01, arg01
086c4     00 6E 06 F6 | 	mov	local02, #0
086c8     08 6C 06 F1 | 	add	local01, #8
086cc     36 71 0A FB | 	rdlong	local03, local01 wz
086d0     08 6C 86 F1 | 	sub	local01, #8
086d4     14 00 90 5D |  if_ne	jmp	#LR__0457
086d8     1C 00 06 F1 | 	add	ptr___system__dat__, #28
086dc     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
086e0     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
086e4     01 18 66 F6 | 	neg	result1, #1
086e8     90 00 90 FD | 	jmp	#LR__0460
086ec                 | LR__0457
086ec     28 6C 06 F1 | 	add	local01, #40
086f0     36 71 0A FB | 	rdlong	local03, local01 wz
086f4     28 6C 86 F1 | 	sub	local01, #40
086f8     2C 00 90 AD |  if_e	jmp	#LR__0458
086fc     28 6C 06 F1 | 	add	local01, #40
08700     36 71 02 FB | 	rdlong	local03, local01
08704     28 6C 86 F1 | 	sub	local01, #40
08708     38 73 02 FB | 	rdlong	local04, local03
0870c     04 70 06 F1 | 	add	local03, #4
08710     38 75 02 FB | 	rdlong	local05, local03
08714     36 5F 02 F6 | 	mov	arg01, local01
08718     FD 76 02 F6 | 	mov	local06, objptr
0871c     39 FB 01 F6 | 	mov	objptr, local04
08720     2D 74 62 FD | 	call	local05
08724     3B FB 01 F6 | 	mov	objptr, local06
08728                 | LR__0458
08728     20 6C 06 F1 | 	add	local01, #32
0872c     36 71 0A FB | 	rdlong	local03, local01 wz
08730     20 6C 86 F1 | 	sub	local01, #32
08734     30 00 90 AD |  if_e	jmp	#LR__0459
08738     20 6C 06 F1 | 	add	local01, #32
0873c     36 71 02 FB | 	rdlong	local03, local01
08740     20 6C 86 F1 | 	sub	local01, #32
08744     38 73 02 FB | 	rdlong	local04, local03
08748     04 70 06 F1 | 	add	local03, #4
0874c     38 75 02 FB | 	rdlong	local05, local03
08750     36 5F 02 F6 | 	mov	arg01, local01
08754     FD 76 02 F6 | 	mov	local06, objptr
08758     39 FB 01 F6 | 	mov	objptr, local04
0875c     2D 74 62 FD | 	call	local05
08760     3B FB 01 F6 | 	mov	objptr, local06
08764     0C 6F 02 F6 | 	mov	local02, result1
08768                 | LR__0459
08768     36 5F 02 F6 | 	mov	arg01, local01
0876c     00 60 06 F6 | 	mov	arg02, #0
08770     30 62 06 F6 | 	mov	arg03, #48
08774     A0 00 A0 FD | 	call	#\builtin_bytefill_
08778     37 19 02 F6 | 	mov	result1, local02
0877c                 | LR__0460
0877c     AF F0 03 F6 | 	mov	ptra, fp
08780     BA 00 A0 FD | 	call	#popregs_
08784                 | __system___closeraw_ret
08784     2D 00 64 FD | 	ret
08788                 | 
08788                 | __system____default_getc
08788     05 5A 05 F6 | 	mov	COUNT_, #5
0878c     B0 00 A0 FD | 	call	#pushregs_
08790     2F 6D 02 F6 | 	mov	local01, arg01
08794     36 6F 02 FB | 	rdlong	local02, local01
08798     08 6E 06 F1 | 	add	local02, #8
0879c     37 71 02 FB | 	rdlong	local03, local02
087a0     08 6E 86 F1 | 	sub	local02, #8
087a4     02 70 CE F7 | 	test	local03, #2 wz
087a8     08 00 90 AD |  if_e	jmp	#LR__0461
087ac     36 5F 02 F6 | 	mov	arg01, local01
087b0     8C 01 B0 FD | 	call	#__system____default_flush
087b4                 | LR__0461
087b4     08 6E 06 F1 | 	add	local02, #8
087b8     37 71 02 FB | 	rdlong	local03, local02
087bc     01 70 46 F5 | 	or	local03, #1
087c0     37 71 62 FC | 	wrlong	local03, local02
087c4     08 6E 86 F1 | 	sub	local02, #8
087c8     37 73 0A FB | 	rdlong	local04, local02 wz
087cc     0C 00 90 5D |  if_ne	jmp	#LR__0462
087d0     36 5F 02 F6 | 	mov	arg01, local01
087d4     F8 07 B0 FD | 	call	#__system____default_filbuf
087d8     0C 73 02 F6 | 	mov	local04, result1
087dc                 | LR__0462
087dc     00 72 5E F2 | 	cmps	local04, #0 wcz
087e0     01 18 66 E6 |  if_be	neg	result1, #1
087e4     1C 00 90 ED |  if_be	jmp	#LR__0463
087e8     01 72 86 F1 | 	sub	local04, #1
087ec     37 73 62 FC | 	wrlong	local04, local02
087f0     04 6E 06 F1 | 	add	local02, #4
087f4     37 75 02 FB | 	rdlong	local05, local02
087f8     3A 19 C2 FA | 	rdbyte	result1, local05
087fc     01 74 06 F1 | 	add	local05, #1
08800     37 75 62 FC | 	wrlong	local05, local02
08804                 | LR__0463
08804     AF F0 03 F6 | 	mov	ptra, fp
08808     BA 00 A0 FD | 	call	#popregs_
0880c                 | __system____default_getc_ret
0880c     2D 00 64 FD | 	ret
08810                 | 
08810                 | __system____default_putc
08810     06 5A 05 F6 | 	mov	COUNT_, #6
08814     B0 00 A0 FD | 	call	#pushregs_
08818     2F 6D 02 F6 | 	mov	local01, arg01
0881c     30 6F 02 F6 | 	mov	local02, arg02
08820     37 71 02 FB | 	rdlong	local03, local02
08824     08 70 06 F1 | 	add	local03, #8
08828     38 73 02 FB | 	rdlong	local04, local03
0882c     08 70 86 F1 | 	sub	local03, #8
08830     01 72 CE F7 | 	test	local04, #1 wz
08834     08 00 90 AD |  if_e	jmp	#LR__0464
08838     37 5F 02 F6 | 	mov	arg01, local02
0883c     00 01 B0 FD | 	call	#__system____default_flush
08840                 | LR__0464
08840     08 70 06 F1 | 	add	local03, #8
08844     38 73 02 FB | 	rdlong	local04, local03
08848     02 72 46 F5 | 	or	local04, #2
0884c     38 73 62 FC | 	wrlong	local04, local03
08850     08 70 86 F1 | 	sub	local03, #8
08854     38 75 02 FB | 	rdlong	local05, local03
08858     3A 77 02 F6 | 	mov	local06, local05
0885c     0C 70 06 F1 | 	add	local03, #12
08860     38 77 02 F1 | 	add	local06, local03
08864     3B 6D 42 FC | 	wrbyte	local01, local06
08868     FF 6C 06 F5 | 	and	local01, #255
0886c     01 74 06 F1 | 	add	local05, #1
08870     0C 70 86 F1 | 	sub	local03, #12
08874     38 75 62 FC | 	wrlong	local05, local03
08878     02 00 00 FF 
0887c     00 74 0E F2 | 	cmp	local05, ##1024 wz
08880     10 00 90 5D |  if_ne	jmp	#LR__0465
08884     37 5F 02 F6 | 	mov	arg01, local02
08888     B4 00 B0 FD | 	call	#__system____default_flush
0888c     00 18 0E F2 | 	cmp	result1, #0 wz
08890     01 6C 66 56 |  if_ne	neg	local01, #1
08894                 | LR__0465
08894     36 19 02 F6 | 	mov	result1, local01
08898     AF F0 03 F6 | 	mov	ptra, fp
0889c     BA 00 A0 FD | 	call	#popregs_
088a0                 | __system____default_putc_ret
088a0     2D 00 64 FD | 	ret
088a4                 | 
088a4                 | __system____default_putc_terminal
088a4     06 5A 05 F6 | 	mov	COUNT_, #6
088a8     B0 00 A0 FD | 	call	#pushregs_
088ac     2F 6D 02 F6 | 	mov	local01, arg01
088b0     30 6F 02 F6 | 	mov	local02, arg02
088b4     37 71 02 FB | 	rdlong	local03, local02
088b8     08 70 06 F1 | 	add	local03, #8
088bc     38 73 02 FB | 	rdlong	local04, local03
088c0     08 70 86 F1 | 	sub	local03, #8
088c4     01 72 CE F7 | 	test	local04, #1 wz
088c8     08 00 90 AD |  if_e	jmp	#LR__0466
088cc     37 5F 02 F6 | 	mov	arg01, local02
088d0     6C 00 B0 FD | 	call	#__system____default_flush
088d4                 | LR__0466
088d4     08 70 06 F1 | 	add	local03, #8
088d8     38 73 02 FB | 	rdlong	local04, local03
088dc     02 72 46 F5 | 	or	local04, #2
088e0     38 73 62 FC | 	wrlong	local04, local03
088e4     08 70 86 F1 | 	sub	local03, #8
088e8     38 75 02 FB | 	rdlong	local05, local03
088ec     3A 77 02 F6 | 	mov	local06, local05
088f0     0C 70 06 F1 | 	add	local03, #12
088f4     38 77 02 F1 | 	add	local06, local03
088f8     3B 6D 42 FC | 	wrbyte	local01, local06
088fc     FF 6C 06 F5 | 	and	local01, #255
08900     0C 70 86 F1 | 	sub	local03, #12
08904     01 74 06 F1 | 	add	local05, #1
08908     38 75 62 FC | 	wrlong	local05, local03
0890c     0A 6C 0E F2 | 	cmp	local01, #10 wz
08910     0C 00 90 AD |  if_e	jmp	#LR__0467
08914     02 00 00 FF 
08918     00 74 0E F2 | 	cmp	local05, ##1024 wz
0891c     10 00 90 5D |  if_ne	jmp	#LR__0468
08920                 | LR__0467
08920     37 5F 02 F6 | 	mov	arg01, local02
08924     18 00 B0 FD | 	call	#__system____default_flush
08928     00 18 0E F2 | 	cmp	result1, #0 wz
0892c     01 6C 66 56 |  if_ne	neg	local01, #1
08930                 | LR__0468
08930     36 19 02 F6 | 	mov	result1, local01
08934     AF F0 03 F6 | 	mov	ptra, fp
08938     BA 00 A0 FD | 	call	#popregs_
0893c                 | __system____default_putc_terminal_ret
0893c     2D 00 64 FD | 	ret
08940                 | 
08940                 | __system____default_flush
08940     0D 5A 05 F6 | 	mov	COUNT_, #13
08944     B0 00 A0 FD | 	call	#pushregs_
08948     2F 6D 02 F6 | 	mov	local01, arg01
0894c     36 6F 02 FB | 	rdlong	local02, local01
08950     37 71 02 FB | 	rdlong	local03, local02
08954     08 6E 06 F1 | 	add	local02, #8
08958     37 73 02 FB | 	rdlong	local04, local02
0895c     08 6E 86 F1 | 	sub	local02, #8
08960     02 72 CE F7 | 	test	local04, #2 wz
08964     B8 00 90 AD |  if_e	jmp	#LR__0471
08968     00 70 5E F2 | 	cmps	local03, #0 wcz
0896c     24 01 90 ED |  if_be	jmp	#LR__0473
08970     08 6C 06 F1 | 	add	local01, #8
08974     36 73 02 FB | 	rdlong	local04, local01
08978     08 6C 86 F1 | 	sub	local01, #8
0897c     40 72 CE F7 | 	test	local04, #64 wz
08980     5C 00 90 AD |  if_e	jmp	#LR__0470
08984     08 6C 06 F1 | 	add	local01, #8
08988     36 73 02 FB | 	rdlong	local04, local01
0898c     08 6C 86 F1 | 	sub	local01, #8
08990     80 72 CE F7 | 	test	local04, #128 wz
08994     48 00 90 AD |  if_e	jmp	#LR__0469
08998     2C 6C 06 F1 | 	add	local01, #44
0899c     36 73 02 FB | 	rdlong	local04, local01
089a0     2C 6C 86 F1 | 	sub	local01, #44
089a4     39 75 02 FB | 	rdlong	local05, local04
089a8     04 72 06 F1 | 	add	local04, #4
089ac     39 77 02 FB | 	rdlong	local06, local04
089b0     36 5F 02 F6 | 	mov	arg01, local01
089b4     00 60 06 F6 | 	mov	arg02, #0
089b8     02 62 06 F6 | 	mov	arg03, #2
089bc     FD 78 02 F6 | 	mov	local07, objptr
089c0     3A FB 01 F6 | 	mov	objptr, local05
089c4     2D 76 62 FD | 	call	local06
089c8     3C FB 01 F6 | 	mov	objptr, local07
089cc     08 6C 06 F1 | 	add	local01, #8
089d0     36 73 02 FB | 	rdlong	local04, local01
089d4     80 72 26 F5 | 	andn	local04, #128
089d8     36 73 62 FC | 	wrlong	local04, local01
089dc     08 6C 86 F1 | 	sub	local01, #8
089e0                 | LR__0469
089e0                 | LR__0470
089e0     14 6C 06 F1 | 	add	local01, #20
089e4     36 73 02 FB | 	rdlong	local04, local01
089e8     14 6C 86 F1 | 	sub	local01, #20
089ec     39 75 02 FB | 	rdlong	local05, local04
089f0     04 72 06 F1 | 	add	local04, #4
089f4     39 77 02 FB | 	rdlong	local06, local04
089f8     0C 6E 06 F1 | 	add	local02, #12
089fc     37 61 02 F6 | 	mov	arg02, local02
08a00     0C 6E 86 F1 | 	sub	local02, #12
08a04     36 5F 02 F6 | 	mov	arg01, local01
08a08     38 63 02 F6 | 	mov	arg03, local03
08a0c     FD 78 02 F6 | 	mov	local07, objptr
08a10     3A FB 01 F6 | 	mov	objptr, local05
08a14     2D 76 62 FD | 	call	local06
08a18     3C FB 01 F6 | 	mov	objptr, local07
08a1c     74 00 90 FD | 	jmp	#LR__0473
08a20                 | LR__0471
08a20     08 6E 06 F1 | 	add	local02, #8
08a24     37 73 02 FB | 	rdlong	local04, local02
08a28     08 6E 86 F1 | 	sub	local02, #8
08a2c     01 72 CE F7 | 	test	local04, #1 wz
08a30     60 00 90 AD |  if_e	jmp	#LR__0472
08a34     00 70 0E F2 | 	cmp	local03, #0 wz
08a38     58 00 90 AD |  if_e	jmp	#LR__0472
08a3c     2C 6C 06 F1 | 	add	local01, #44
08a40     36 7B 02 FB | 	rdlong	local08, local01
08a44     2C 6C 86 F1 | 	sub	local01, #44
08a48     3D 73 02 F6 | 	mov	local04, local08
08a4c     39 75 02 FB | 	rdlong	local05, local04
08a50     04 72 06 F1 | 	add	local04, #4
08a54     39 7D 02 FB | 	rdlong	local09, local04
08a58     3E 77 02 F6 | 	mov	local06, local09
08a5c     36 7F 02 F6 | 	mov	local10, local01
08a60     38 81 62 F6 | 	neg	local11, local03
08a64     01 82 06 F6 | 	mov	local12, #1
08a68     3F 5F 02 F6 | 	mov	arg01, local10
08a6c     40 61 02 F6 | 	mov	arg02, local11
08a70     01 62 06 F6 | 	mov	arg03, #1
08a74     FD 78 02 F6 | 	mov	local07, objptr
08a78     3A FB 01 F6 | 	mov	objptr, local05
08a7c     2D 76 62 FD | 	call	local06
08a80     3C FB 01 F6 | 	mov	objptr, local07
08a84     0C 73 02 F6 | 	mov	local04, result1
08a88     39 85 02 F6 | 	mov	local13, local04
08a8c     00 84 5E F2 | 	cmps	local13, #0 wcz
08a90     38 85 02 36 |  if_ae	mov	local13, local03
08a94                 | LR__0472
08a94                 | LR__0473
08a94     37 01 68 FC | 	wrlong	#0, local02
08a98     04 6E 06 F1 | 	add	local02, #4
08a9c     37 01 68 FC | 	wrlong	#0, local02
08aa0     04 6E 06 F1 | 	add	local02, #4
08aa4     37 01 68 FC | 	wrlong	#0, local02
08aa8     00 18 06 F6 | 	mov	result1, #0
08aac     AF F0 03 F6 | 	mov	ptra, fp
08ab0     BA 00 A0 FD | 	call	#popregs_
08ab4                 | __system____default_flush_ret
08ab4     2D 00 64 FD | 	ret
08ab8                 | 
08ab8                 | __system___rxtxioctl_0179
08ab8     02 5A 05 F6 | 	mov	COUNT_, #2
08abc     B0 00 A0 FD | 	call	#pushregs_
08ac0     30 6D 02 F6 | 	mov	local01, arg02
08ac4     31 6F 02 F6 | 	mov	local02, arg03
08ac8     00 6D 0E F2 | 	cmp	local01, #256 wz
08acc     0C 00 90 AD |  if_e	jmp	#LR__0474
08ad0     01 6D 0E F2 | 	cmp	local01, #257 wz
08ad4     1C 00 90 AD |  if_e	jmp	#LR__0475
08ad8     30 00 90 FD | 	jmp	#LR__0476
08adc                 | LR__0474
08adc     08 00 06 F1 | 	add	ptr___system__dat__, #8
08ae0     00 19 02 FB | 	rdlong	result1, ptr___system__dat__
08ae4     08 00 86 F1 | 	sub	ptr___system__dat__, #8
08ae8     37 19 62 FC | 	wrlong	result1, local02
08aec     00 18 06 F6 | 	mov	result1, #0
08af0     28 00 90 FD | 	jmp	#LR__0477
08af4                 | LR__0475
08af4     37 5F 02 FB | 	rdlong	arg01, local02
08af8     08 00 06 F1 | 	add	ptr___system__dat__, #8
08afc     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
08b00     08 00 86 F1 | 	sub	ptr___system__dat__, #8
08b04     00 18 06 F6 | 	mov	result1, #0
08b08     10 00 90 FD | 	jmp	#LR__0477
08b0c                 | LR__0476
08b0c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08b10     00 15 68 FC | 	wrlong	#10, ptr___system__dat__
08b14     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08b18     01 18 66 F6 | 	neg	result1, #1
08b1c                 | LR__0477
08b1c     AF F0 03 F6 | 	mov	ptra, fp
08b20     BA 00 A0 FD | 	call	#popregs_
08b24                 | __system___rxtxioctl_0179_ret
08b24     2D 00 64 FD | 	ret
08b28                 | 
08b28                 | __system____dummy_flush_0180
08b28     00 18 06 F6 | 	mov	result1, #0
08b2c                 | __system____dummy_flush_0180_ret
08b2c     2D 00 64 FD | 	ret
08b30                 | 
08b30                 | __system___vfswrite
08b30     0B 5A 05 F6 | 	mov	COUNT_, #11
08b34     B0 00 A0 FD | 	call	#pushregs_
08b38     2F 6D 02 F6 | 	mov	local01, arg01
08b3c     30 6F 02 F6 | 	mov	local02, arg02
08b40     31 71 02 F6 | 	mov	local03, arg03
08b44     37 73 02 F6 | 	mov	local04, local02
08b48     08 6C 06 F1 | 	add	local01, #8
08b4c     36 75 02 FB | 	rdlong	local05, local01
08b50     08 6C 86 F1 | 	sub	local01, #8
08b54     02 74 CE F7 | 	test	local05, #2 wz
08b58     14 00 90 5D |  if_ne	jmp	#LR__0478
08b5c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08b60     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08b64     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08b68     01 18 66 F6 | 	neg	result1, #1
08b6c     60 01 90 FD | 	jmp	#LR__0486
08b70                 | LR__0478
08b70     08 6C 06 F1 | 	add	local01, #8
08b74     36 75 02 FB | 	rdlong	local05, local01
08b78     08 6C 86 F1 | 	sub	local01, #8
08b7c     40 74 CE F7 | 	test	local05, #64 wz
08b80     5C 00 90 AD |  if_e	jmp	#LR__0480
08b84     08 6C 06 F1 | 	add	local01, #8
08b88     36 75 02 FB | 	rdlong	local05, local01
08b8c     08 6C 86 F1 | 	sub	local01, #8
08b90     80 74 CE F7 | 	test	local05, #128 wz
08b94     48 00 90 AD |  if_e	jmp	#LR__0479
08b98     2C 6C 06 F1 | 	add	local01, #44
08b9c     36 75 02 FB | 	rdlong	local05, local01
08ba0     2C 6C 86 F1 | 	sub	local01, #44
08ba4     3A 77 02 FB | 	rdlong	local06, local05
08ba8     04 74 06 F1 | 	add	local05, #4
08bac     3A 79 02 FB | 	rdlong	local07, local05
08bb0     36 5F 02 F6 | 	mov	arg01, local01
08bb4     00 60 06 F6 | 	mov	arg02, #0
08bb8     02 62 06 F6 | 	mov	arg03, #2
08bbc     FD 7A 02 F6 | 	mov	local08, objptr
08bc0     3B FB 01 F6 | 	mov	objptr, local06
08bc4     2D 78 62 FD | 	call	local07
08bc8     3D FB 01 F6 | 	mov	objptr, local08
08bcc     08 6C 06 F1 | 	add	local01, #8
08bd0     36 75 02 FB | 	rdlong	local05, local01
08bd4     80 74 26 F5 | 	andn	local05, #128
08bd8     36 75 62 FC | 	wrlong	local05, local01
08bdc     08 6C 86 F1 | 	sub	local01, #8
08be0                 | LR__0479
08be0                 | LR__0480
08be0     14 6C 06 F1 | 	add	local01, #20
08be4     36 75 0A FB | 	rdlong	local05, local01 wz
08be8     14 6C 86 F1 | 	sub	local01, #20
08bec     74 00 90 AD |  if_e	jmp	#LR__0482
08bf0     14 6C 06 F1 | 	add	local01, #20
08bf4     36 75 02 FB | 	rdlong	local05, local01
08bf8     14 6C 86 F1 | 	sub	local01, #20
08bfc     3A 77 02 FB | 	rdlong	local06, local05
08c00     04 74 06 F1 | 	add	local05, #4
08c04     3A 79 02 FB | 	rdlong	local07, local05
08c08     37 61 02 F6 | 	mov	arg02, local02
08c0c     38 63 02 F6 | 	mov	arg03, local03
08c10     36 5F 02 F6 | 	mov	arg01, local01
08c14     FD 7A 02 F6 | 	mov	local08, objptr
08c18     3B FB 01 F6 | 	mov	objptr, local06
08c1c     2D 78 62 FD | 	call	local07
08c20     3D FB 01 F6 | 	mov	objptr, local08
08c24     0C 7D 02 F6 | 	mov	local09, result1
08c28     00 7C 5E F2 | 	cmps	local09, #0 wcz
08c2c     2C 00 90 3D |  if_ae	jmp	#LR__0481
08c30     08 6C 06 F1 | 	add	local01, #8
08c34     36 75 02 FB | 	rdlong	local05, local01
08c38     20 74 46 F5 | 	or	local05, #32
08c3c     36 75 62 FC | 	wrlong	local05, local01
08c40     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08c44     00 7D 62 FC | 	wrlong	local09, ptr___system__dat__
08c48     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08c4c     00 7C 0E F2 | 	cmp	local09, #0 wz
08c50     01 18 66 56 |  if_ne	neg	result1, #1
08c54     00 18 06 A6 |  if_e	mov	result1, #0
08c58     74 00 90 FD | 	jmp	#LR__0486
08c5c                 | LR__0481
08c5c     3E 19 02 F6 | 	mov	result1, local09
08c60     6C 00 90 FD | 	jmp	#LR__0486
08c64                 | LR__0482
08c64     18 6C 06 F1 | 	add	local01, #24
08c68     36 7F 0A FB | 	rdlong	local10, local01 wz
08c6c     18 6C 86 F1 | 	sub	local01, #24
08c70     14 00 90 5D |  if_ne	jmp	#LR__0483
08c74     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08c78     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08c7c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08c80     01 18 66 F6 | 	neg	result1, #1
08c84     48 00 90 FD | 	jmp	#LR__0486
08c88                 | LR__0483
08c88     00 7C 06 F6 | 	mov	local09, #0
08c8c                 | LR__0484
08c8c     00 70 1E F2 | 	cmp	local03, #0 wcz
08c90     38 00 90 ED |  if_be	jmp	#LR__0485
08c94     3F 75 02 F6 | 	mov	local05, local10
08c98     3A 77 02 FB | 	rdlong	local06, local05
08c9c     04 74 06 F1 | 	add	local05, #4
08ca0     3A 79 02 FB | 	rdlong	local07, local05
08ca4     39 5F C2 FA | 	rdbyte	arg01, local04
08ca8     36 61 02 F6 | 	mov	arg02, local01
08cac     FD 80 02 F6 | 	mov	local11, objptr
08cb0     3B FB 01 F6 | 	mov	objptr, local06
08cb4     01 72 06 F1 | 	add	local04, #1
08cb8     2D 78 62 FD | 	call	local07
08cbc     40 FB 01 F6 | 	mov	objptr, local11
08cc0     0C 7D 02 F1 | 	add	local09, result1
08cc4     01 70 86 F1 | 	sub	local03, #1
08cc8     C0 FF 9F FD | 	jmp	#LR__0484
08ccc                 | LR__0485
08ccc     3E 19 02 F6 | 	mov	result1, local09
08cd0                 | LR__0486
08cd0     AF F0 03 F6 | 	mov	ptra, fp
08cd4     BA 00 A0 FD | 	call	#popregs_
08cd8                 | __system___vfswrite_ret
08cd8     2D 00 64 FD | 	ret
08cdc                 | 
08cdc                 | __system___vfsread
08cdc     0B 5A 05 F6 | 	mov	COUNT_, #11
08ce0     B0 00 A0 FD | 	call	#pushregs_
08ce4     28 F0 07 F1 | 	add	ptra, #40
08ce8     04 5E 05 F1 | 	add	fp, #4
08cec     AF 5E 62 FC | 	wrlong	arg01, fp
08cf0     04 5E 05 F1 | 	add	fp, #4
08cf4     AF 60 62 FC | 	wrlong	arg02, fp
08cf8     04 5E 05 F1 | 	add	fp, #4
08cfc     AF 62 62 FC | 	wrlong	arg03, fp
08d00     04 5E 85 F1 | 	sub	fp, #4
08d04     AF 6C 02 FB | 	rdlong	local01, fp
08d08     14 5E 05 F1 | 	add	fp, #20
08d0c     AF 6C 62 FC | 	wrlong	local01, fp
08d10     04 5E 05 F1 | 	add	fp, #4
08d14     AF 00 68 FC | 	wrlong	#0, fp
08d18     1C 5E 85 F1 | 	sub	fp, #28
08d1c     AF 6E 02 FB | 	rdlong	local02, fp
08d20     04 5E 85 F1 | 	sub	fp, #4
08d24     08 6E 06 F1 | 	add	local02, #8
08d28     37 6D 02 FB | 	rdlong	local01, local02
08d2c     01 6C CE F7 | 	test	local01, #1 wz
08d30     14 00 90 5D |  if_ne	jmp	#LR__0487
08d34     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08d38     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08d3c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08d40     01 18 66 F6 | 	neg	result1, #1
08d44     7C 02 90 FD | 	jmp	#LR__0495
08d48                 | LR__0487
08d48     04 5E 05 F1 | 	add	fp, #4
08d4c     AF 6C 02 FB | 	rdlong	local01, fp
08d50     04 5E 85 F1 | 	sub	fp, #4
08d54     10 6C 06 F1 | 	add	local01, #16
08d58     36 71 0A FB | 	rdlong	local03, local01 wz
08d5c     AC 00 90 AD |  if_e	jmp	#LR__0489
08d60     04 5E 05 F1 | 	add	fp, #4
08d64     AF 72 02 FB | 	rdlong	local04, fp
08d68     10 72 06 F1 | 	add	local04, #16
08d6c     39 6D 02 FB | 	rdlong	local01, local04
08d70     36 6F 02 FB | 	rdlong	local02, local01
08d74     04 6C 06 F1 | 	add	local01, #4
08d78     36 71 02 FB | 	rdlong	local03, local01
08d7c     AF 5E 02 FB | 	rdlong	arg01, fp
08d80     04 5E 05 F1 | 	add	fp, #4
08d84     AF 60 02 FB | 	rdlong	arg02, fp
08d88     04 5E 05 F1 | 	add	fp, #4
08d8c     AF 62 02 FB | 	rdlong	arg03, fp
08d90     0C 5E 85 F1 | 	sub	fp, #12
08d94     FD 74 02 F6 | 	mov	local05, objptr
08d98     37 FB 01 F6 | 	mov	objptr, local02
08d9c     2D 70 62 FD | 	call	local03
08da0     3A FB 01 F6 | 	mov	objptr, local05
08da4     10 5E 05 F1 | 	add	fp, #16
08da8     AF 18 62 FC | 	wrlong	result1, fp
08dac     10 5E 85 F1 | 	sub	fp, #16
08db0     00 18 5E F2 | 	cmps	result1, #0 wcz
08db4     44 00 90 3D |  if_ae	jmp	#LR__0488
08db8     04 5E 05 F1 | 	add	fp, #4
08dbc     AF 6C 02 FB | 	rdlong	local01, fp
08dc0     36 73 02 F6 | 	mov	local04, local01
08dc4     08 72 06 F1 | 	add	local04, #8
08dc8     39 71 02 FB | 	rdlong	local03, local04
08dcc     20 70 46 F5 | 	or	local03, #32
08dd0     08 6C 06 F1 | 	add	local01, #8
08dd4     36 71 62 FC | 	wrlong	local03, local01
08dd8     0C 5E 05 F1 | 	add	fp, #12
08ddc     AF 5E 0A FB | 	rdlong	arg01, fp wz
08de0     10 5E 85 F1 | 	sub	fp, #16
08de4     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08de8     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
08dec     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08df0     01 18 66 56 |  if_ne	neg	result1, #1
08df4     00 18 06 A6 |  if_e	mov	result1, #0
08df8     C8 01 90 FD | 	jmp	#LR__0495
08dfc                 | LR__0488
08dfc     10 5E 05 F1 | 	add	fp, #16
08e00     AF 18 02 FB | 	rdlong	result1, fp
08e04     10 5E 85 F1 | 	sub	fp, #16
08e08     B8 01 90 FD | 	jmp	#LR__0495
08e0c                 | LR__0489
08e0c     04 5E 05 F1 | 	add	fp, #4
08e10     AF 6C 02 FB | 	rdlong	local01, fp
08e14     1C 6C 06 F1 | 	add	local01, #28
08e18     36 71 02 FB | 	rdlong	local03, local01
08e1c     14 5E 05 F1 | 	add	fp, #20
08e20     AF 70 62 FC | 	wrlong	local03, fp
08e24     AF 6C 0A FB | 	rdlong	local01, fp wz
08e28     18 5E 85 F1 | 	sub	fp, #24
08e2c     14 00 90 5D |  if_ne	jmp	#LR__0490
08e30     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08e34     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08e38     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08e3c     01 18 66 F6 | 	neg	result1, #1
08e40     80 01 90 FD | 	jmp	#LR__0495
08e44                 | LR__0490
08e44     04 5E 05 F1 | 	add	fp, #4
08e48     AF 6C 02 FB | 	rdlong	local01, fp
08e4c     04 5E 85 F1 | 	sub	fp, #4
08e50     24 6C 06 F1 | 	add	local01, #36
08e54     36 71 0A FB | 	rdlong	local03, local01 wz
08e58     94 00 90 AD |  if_e	jmp	#LR__0492
08e5c     04 5E 05 F1 | 	add	fp, #4
08e60     AF 76 02 FB | 	rdlong	local06, fp
08e64     3B 73 02 F6 | 	mov	local04, local06
08e68     24 72 06 F1 | 	add	local04, #36
08e6c     39 79 02 FB | 	rdlong	local07, local04
08e70     3C 6D 02 F6 | 	mov	local01, local07
08e74     36 6F 02 FB | 	rdlong	local02, local01
08e78     04 6C 06 F1 | 	add	local01, #4
08e7c     36 7B 02 FB | 	rdlong	local08, local01
08e80     3D 71 02 F6 | 	mov	local03, local08
08e84     3B 7D 02 F6 | 	mov	local09, local06
08e88     00 7F 06 F6 | 	mov	local10, #256
08e8c     20 5E 05 F1 | 	add	fp, #32
08e90     AF 80 02 F6 | 	mov	local11, fp
08e94     3E 5F 02 F6 | 	mov	arg01, local09
08e98     00 61 06 F6 | 	mov	arg02, #256
08e9c     40 63 02 F6 | 	mov	arg03, local11
08ea0     FD 74 02 F6 | 	mov	local05, objptr
08ea4     37 FB 01 F6 | 	mov	objptr, local02
08ea8     24 5E 85 F1 | 	sub	fp, #36
08eac     2D 70 62 FD | 	call	local03
08eb0     3A FB 01 F6 | 	mov	objptr, local05
08eb4     10 5E 05 F1 | 	add	fp, #16
08eb8     AF 18 62 FC | 	wrlong	result1, fp
08ebc     AF 6E 0A FB | 	rdlong	local02, fp wz
08ec0     10 5E 85 F1 | 	sub	fp, #16
08ec4     28 00 90 5D |  if_ne	jmp	#LR__0491
08ec8     24 5E 05 F1 | 	add	fp, #36
08ecc     AF 72 02 FB | 	rdlong	local04, fp
08ed0     24 5E 85 F1 | 	sub	fp, #36
08ed4     39 71 02 F6 | 	mov	local03, local04
08ed8     02 70 0E F5 | 	and	local03, #2 wz
08edc     10 00 90 AD |  if_e	jmp	#LR__0491
08ee0     01 6C 06 F6 | 	mov	local01, #1
08ee4     20 5E 05 F1 | 	add	fp, #32
08ee8     AF 02 68 FC | 	wrlong	#1, fp
08eec     20 5E 85 F1 | 	sub	fp, #32
08ef0                 | LR__0491
08ef0                 | LR__0492
08ef0     10 5E 05 F1 | 	add	fp, #16
08ef4     AF 00 68 FC | 	wrlong	#0, fp
08ef8     10 5E 85 F1 | 	sub	fp, #16
08efc                 | LR__0493
08efc     0C 5E 05 F1 | 	add	fp, #12
08f00     AF 6C 02 FB | 	rdlong	local01, fp
08f04     0C 5E 85 F1 | 	sub	fp, #12
08f08     00 6C 1E F2 | 	cmp	local01, #0 wcz
08f0c     A8 00 90 ED |  if_be	jmp	#LR__0494
08f10     18 5E 05 F1 | 	add	fp, #24
08f14     AF 6C 02 FB | 	rdlong	local01, fp
08f18     36 6F 02 FB | 	rdlong	local02, local01
08f1c     04 6C 06 F1 | 	add	local01, #4
08f20     36 71 02 FB | 	rdlong	local03, local01
08f24     14 5E 85 F1 | 	sub	fp, #20
08f28     AF 5E 02 FB | 	rdlong	arg01, fp
08f2c     04 5E 85 F1 | 	sub	fp, #4
08f30     FD 7A 02 F6 | 	mov	local08, objptr
08f34     37 FB 01 F6 | 	mov	objptr, local02
08f38     2D 70 62 FD | 	call	local03
08f3c     3D FB 01 F6 | 	mov	objptr, local08
08f40     14 5E 05 F1 | 	add	fp, #20
08f44     AF 18 62 FC | 	wrlong	result1, fp
08f48     14 5E 85 F1 | 	sub	fp, #20
08f4c     00 18 5E F2 | 	cmps	result1, #0 wcz
08f50     64 00 90 CD |  if_b	jmp	#LR__0494
08f54     1C 5E 05 F1 | 	add	fp, #28
08f58     AF 6C 02 FB | 	rdlong	local01, fp
08f5c     36 71 02 F6 | 	mov	local03, local01
08f60     01 70 06 F1 | 	add	local03, #1
08f64     AF 70 62 FC | 	wrlong	local03, fp
08f68     08 5E 85 F1 | 	sub	fp, #8
08f6c     AF 76 02 FB | 	rdlong	local06, fp
08f70     36 77 42 FC | 	wrbyte	local06, local01
08f74     04 5E 85 F1 | 	sub	fp, #4
08f78     AF 6C 02 FB | 	rdlong	local01, fp
08f7c     01 6C 06 F1 | 	add	local01, #1
08f80     AF 6C 62 FC | 	wrlong	local01, fp
08f84     04 5E 85 F1 | 	sub	fp, #4
08f88     AF 6C 02 FB | 	rdlong	local01, fp
08f8c     01 6C 86 F1 | 	sub	local01, #1
08f90     AF 6C 62 FC | 	wrlong	local01, fp
08f94     14 5E 05 F1 | 	add	fp, #20
08f98     AF 6C 0A FB | 	rdlong	local01, fp wz
08f9c     20 5E 85 F1 | 	sub	fp, #32
08fa0     58 FF 9F AD |  if_e	jmp	#LR__0493
08fa4     14 5E 05 F1 | 	add	fp, #20
08fa8     AF 70 02 FB | 	rdlong	local03, fp
08fac     14 5E 85 F1 | 	sub	fp, #20
08fb0     0A 70 0E F2 | 	cmp	local03, #10 wz
08fb4     44 FF 9F 5D |  if_ne	jmp	#LR__0493
08fb8                 | LR__0494
08fb8     10 5E 05 F1 | 	add	fp, #16
08fbc     AF 18 02 FB | 	rdlong	result1, fp
08fc0     10 5E 85 F1 | 	sub	fp, #16
08fc4                 | LR__0495
08fc4     AF F0 03 F6 | 	mov	ptra, fp
08fc8     BA 00 A0 FD | 	call	#popregs_
08fcc                 | __system___vfsread_ret
08fcc     2D 00 64 FD | 	ret
08fd0                 | 
08fd0                 | __system____default_filbuf
08fd0     06 5A 05 F6 | 	mov	COUNT_, #6
08fd4     B0 00 A0 FD | 	call	#pushregs_
08fd8     2F 6D 02 FB | 	rdlong	local01, arg01
08fdc     10 5E 06 F1 | 	add	arg01, #16
08fe0     2F 6F 02 FB | 	rdlong	local02, arg01
08fe4     10 5E 86 F1 | 	sub	arg01, #16
08fe8     37 71 02 FB | 	rdlong	local03, local02
08fec     04 6E 06 F1 | 	add	local02, #4
08ff0     37 73 02 FB | 	rdlong	local04, local02
08ff4     0C 6C 06 F1 | 	add	local01, #12
08ff8     36 61 02 F6 | 	mov	arg02, local01
08ffc     0C 6C 86 F1 | 	sub	local01, #12
09000     0A 62 C6 F9 | 	decod	arg03, #10
09004     FD 74 02 F6 | 	mov	local05, objptr
09008     38 FB 01 F6 | 	mov	objptr, local03
0900c     2D 72 62 FD | 	call	local04
09010     3A FB 01 F6 | 	mov	objptr, local05
09014     0C 77 02 F6 | 	mov	local06, result1
09018     00 76 5E F2 | 	cmps	local06, #0 wcz
0901c     01 18 66 C6 |  if_b	neg	result1, #1
09020     28 00 90 CD |  if_b	jmp	#LR__0496
09024     36 77 62 FC | 	wrlong	local06, local01
09028     0C 6C 06 F1 | 	add	local01, #12
0902c     36 6F 02 F6 | 	mov	local02, local01
09030     08 6C 86 F1 | 	sub	local01, #8
09034     36 6F 62 FC | 	wrlong	local02, local01
09038     04 6C 06 F1 | 	add	local01, #4
0903c     36 6F 02 FB | 	rdlong	local02, local01
09040     01 6E 46 F5 | 	or	local02, #1
09044     36 6F 62 FC | 	wrlong	local02, local01
09048     3B 19 02 F6 | 	mov	result1, local06
0904c                 | LR__0496
0904c     AF F0 03 F6 | 	mov	ptra, fp
09050     BA 00 A0 FD | 	call	#popregs_
09054                 | __system____default_filbuf_ret
09054     2D 00 64 FD | 	ret
09058                 | 
09058                 | ' 	
09058                 | ' 	FUNCTION pfunc(c as integer) as integer
09058                 | ___strs_cl_pfunc
09058                 | ' 		if (i < 16) then
09058     04 FA 05 F1 | 	add	objptr, #4
0905c     FD 1E 02 FB | 	rdlong	_var01, objptr
09060     04 FA 85 F1 | 	sub	objptr, #4
09064     10 1E 5E F2 | 	cmps	_var01, #16 wcz
09068     2C 00 90 3D |  if_ae	jmp	#LR__0497
0906c     FD 20 02 FB | 	rdlong	_var02, objptr
09070     04 FA 05 F1 | 	add	objptr, #4
09074     FD 22 02 FB | 	rdlong	_var03, objptr
09078     10 23 02 F1 | 	add	_var03, _var02
0907c     11 5F 42 FC | 	wrbyte	arg01, _var03
09080     FD 1E 02 FB | 	rdlong	_var01, objptr
09084     01 1E 06 F1 | 	add	_var01, #1
09088     FD 1E 62 FC | 	wrlong	_var01, objptr
0908c     04 FA 85 F1 | 	sub	objptr, #4
09090                 | ' 			p(i) = c
09090                 | ' 			i = i+1
09090                 | ' 			return 1
09090     01 18 06 F6 | 	mov	result1, #1
09094     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
09098                 | LR__0497
09098                 | ' 			return -1
09098     01 18 66 F6 | 	neg	result1, #1
0909c                 | ___strs_cl_pfunc_ret
0909c     2D 00 64 FD | 	ret
090a0                 | 
090a0                 | __struct__s_vfs_file_t_putchar
090a0     04 5A 05 F6 | 	mov	COUNT_, #4
090a4     B0 00 A0 FD | 	call	#pushregs_
090a8     18 FA 05 F1 | 	add	objptr, #24
090ac     FD 6C 0A FB | 	rdlong	local01, objptr wz
090b0     18 FA 85 F1 | 	sub	objptr, #24
090b4     00 18 06 A6 |  if_e	mov	result1, #0
090b8     3C 00 90 AD |  if_e	jmp	#LR__0498
090bc     18 FA 05 F1 | 	add	objptr, #24
090c0     FD 6C 02 FB | 	rdlong	local01, objptr
090c4     18 FA 85 F1 | 	sub	objptr, #24
090c8     36 6F 02 FB | 	rdlong	local02, local01
090cc     04 6C 06 F1 | 	add	local01, #4
090d0     36 71 02 FB | 	rdlong	local03, local01
090d4     FD 60 02 F6 | 	mov	arg02, objptr
090d8     FD 72 02 F6 | 	mov	local04, objptr
090dc     37 FB 01 F6 | 	mov	objptr, local02
090e0     2D 70 62 FD | 	call	local03
090e4     39 FB 01 F6 | 	mov	objptr, local04
090e8     00 18 5E F2 | 	cmps	result1, #0 wcz
090ec     00 6C 06 C6 |  if_b	mov	local01, #0
090f0     01 6C 06 36 |  if_ae	mov	local01, #1
090f4     36 19 02 F6 | 	mov	result1, local01
090f8                 | LR__0498
090f8     AF F0 03 F6 | 	mov	ptra, fp
090fc     BA 00 A0 FD | 	call	#popregs_
09100                 | __struct__s_vfs_file_t_putchar_ret
09100     2D 00 64 FD | 	ret
09104                 | 
09104                 | __struct__s_vfs_file_t_getchar
09104     04 5A 05 F6 | 	mov	COUNT_, #4
09108     B0 00 A0 FD | 	call	#pushregs_
0910c     1C FA 05 F1 | 	add	objptr, #28
09110     FD 6C 0A FB | 	rdlong	local01, objptr wz
09114     1C FA 85 F1 | 	sub	objptr, #28
09118     01 18 66 A6 |  if_e	neg	result1, #1
0911c     2C 00 90 AD |  if_e	jmp	#LR__0499
09120                 | '         return getcf(__this);
09120     1C FA 05 F1 | 	add	objptr, #28
09124     FD 6C 02 FB | 	rdlong	local01, objptr
09128     1C FA 85 F1 | 	sub	objptr, #28
0912c     36 6F 02 FB | 	rdlong	local02, local01
09130     04 6C 06 F1 | 	add	local01, #4
09134     36 71 02 FB | 	rdlong	local03, local01
09138     FD 5E 02 F6 | 	mov	arg01, objptr
0913c     FD 72 02 F6 | 	mov	local04, objptr
09140     37 FB 01 F6 | 	mov	objptr, local02
09144     2D 70 62 FD | 	call	local03
09148     39 FB 01 F6 | 	mov	objptr, local04
0914c                 | LR__0499
0914c     AF F0 03 F6 | 	mov	ptra, fp
09150     BA 00 A0 FD | 	call	#popregs_
09154                 | __struct__s_vfs_file_t_getchar_ret
09154     2D 00 64 FD | 	ret
09158                 | 
09158                 | __struct___bas_wrap_sender_tx
09158     04 5A 05 F6 | 	mov	COUNT_, #4
0915c     B0 00 A0 FD | 	call	#pushregs_
09160     FD 6C 02 FB | 	rdlong	local01, objptr
09164     36 6F 02 FB | 	rdlong	local02, local01
09168     04 6C 06 F1 | 	add	local01, #4
0916c     36 71 02 FB | 	rdlong	local03, local01
09170     FD 72 02 F6 | 	mov	local04, objptr
09174     37 FB 01 F6 | 	mov	objptr, local02
09178     2D 70 62 FD | 	call	local03
0917c     39 FB 01 F6 | 	mov	objptr, local04
09180     01 18 06 F6 | 	mov	result1, #1
09184     AF F0 03 F6 | 	mov	ptra, fp
09188     BA 00 A0 FD | 	call	#popregs_
0918c                 | __struct___bas_wrap_sender_tx_ret
0918c     2D 00 64 FD | 	ret
09190                 | 
09190                 | LR__0500
09190     20          | 	byte	" "
09191     00          | 	byte	0
09192                 | LR__0501
09192                 | 	byte	
09192     00          | 	byte	0
09193                 | LR__0502
09193                 | 	byte	
09193     00          | 	byte	0
09194                 | LR__0503
09194     20 21 21 21 
09198     20 63 6F 72 
0919c     72 75 70 74 
091a0     65 64 20 68 
091a4     65 61 70 3F 
091a8     3F 3F 20 21 
091ac     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
091af     00          | 	byte	0
091b0                 | LR__0504
091b0     20 21 21 21 
091b4     20 6F 75 74 
091b8     20 6F 66 20 
091bc     68 65 61 70 
091c0     20 6D 65 6D 
091c4     6F 72 79 20 
091c8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
091cc     00          | 	byte	0
091cd                 | LR__0505
091cd     20 21 21 21 
091d1     20 63 6F 72 
091d5     72 75 70 74 
091d9     65 64 20 68 
091dd     65 61 70 20 
091e1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
091e5     00          | 	byte	0
091e6                 | LR__0506
091e6     4E 61 6D 65 
091ea     20 20 20 20 
091ee     20 20 20 20 
091f2     20 20 20 20 
091f6     20 20 20 20 
091fa     20 20 20 6C 
091fe     65 6E 20 20 
09202     20 66 74 20 
09206     76 6F 6C 20 
0920a     72 65 70 20 
0920e     20 20 72 2E 
09212     6C 65 6E 20 
09216     20 20 20 20 
0921a     20 20 20 20 
0921e     4E 61 6D 65 
09222     20 20 20 20 
09226     20 20 20 20 
0922a     20 20 20 20 
0922e     20 20 20 20 
09232     20 20 20 6C 
09236     65 6E 20 20 
0923a     20 66 74 20 
0923e     76 6F 6C 20 
09242     72 65 70 20 
09246     20 20 72 2E 
0924a     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
0924e     00          | 	byte	0
0924f                 | LR__0507
0924f     53          | 	byte	"S"
09250     00          | 	byte	0
09251                 | LR__0508
09251     41 62 63 64 
09255     65 66       | 	byte	"Abcdef"
09257     00          | 	byte	0
09258                 | LR__0509
09258     20 20 20 20 
0925c     20 20 20 20 
09260     20 20 20 20 
09264     20 20 20 20 
09268     20 20 20 20 
0926c     20 20       | 	byte	"                      "
0926e     00          | 	byte	0
0926f                 | LR__0510
0926f                 | 	byte	
0926f     00          | 	byte	0
09270                 | LR__0511
09270     20          | 	byte	" "
09271     00          | 	byte	0
09272                 | LR__0512
09272     73 61 6D 70 
09276     6C 65 73 20 
0927a     6D 6F 64 75 
0927e     6C 65       | 	byte	"samples module"
09280     00          | 	byte	0
09281     00 00 00    | 	alignl
09284                 | _dat_
09284     6A 61 72 72 
09288     65 00 00 00 
0928c     00 00 00 00 
09290     00 00 00 00 | module file "/home/pik33/mod/CDTV2.MOD"
09294     00 00 00 00 
09298     73 6F 75 6E 
0929c     64 34 00 00 
092a0     00 00 00 00 | 	byte	$00, $00, $00, $00, $73, $6f, $75, $6e, $64, $34, $00, $00, $00, $00, $00, $00
092a4     00 00 00 00 
092a8     00 00 00 00 
092ac     00 00       | 	byte	$00[10]
092ae     22 A8 00 40 
092b2     00 00 00 01 
092b6     73 68 6F 72 
092ba     74 73 74 72 | 	byte	$22, $a8, $00, $40, $00, $00, $00, $01, $73, $68, $6f, $72, $74, $73, $74, $72
092be     69 6E 67 33 
092c2     00 00 00 00 
092c6     00 00 00 00 
092ca     00 00 1D 8F | 	byte	$69, $6e, $67, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1d, $8f
092ce     00 40 00 00 
092d2     00 01 62 61 
092d6     73 73 64 72 
092da     75 6D 00 00 | 	byte	$00, $40, $00, $00, $00, $01, $62, $61, $73, $73, $64, $72, $75, $6d, $00, $00
092de     00 00 00 00 
092e2     00 00 00 00 
092e6     00 00 00 00 | 	byte	$00[12]
092ea     08 81 00 40 
092ee     00 00 00 01 
092f2     74 6F 6B 6A 
092f6     6F 64 72 75 | 	byte	$08, $81, $00, $40, $00, $00, $00, $01, $74, $6f, $6b, $6a, $6f, $64, $72, $75
092fa     6D 00 00 00 
092fe     00 00 00 00 
09302     00 00 00 00 
09306     00 00 0B 90 | 	byte	$6d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0b, $90
0930a     00 40 00 00 
0930e     00 01 63 69 
09312     6E 31 00 00 
09316     00 00 00 00 | 	byte	$00, $40, $00, $00, $00, $01, $63, $69, $6e, $31, $00, $00, $00, $00, $00, $00
0931a     00 00 00 00 
0931e     00 00 00 00 
09322     00 00 00 00 | 	byte	$00[12]
09326     06 62 00 40 
0932a     00 00 00 01 
0932e     42 61 73 73 
09332     73 6F 75 6E | 	byte	$06, $62, $00, $40, $00, $00, $00, $01, $42, $61, $73, $73, $73, $6f, $75, $6e
09336     64 00 00 00 
0933a     00 00 00 00 
0933e     00 00 00 00 
09342     00 00 05 88 | 	byte	$64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $05, $88
09346     00 2F 00 00 
0934a     00 01 62 61 
0934e     73 73 76 69 
09352     6F 00 00 00 | 	byte	$00, $2f, $00, $00, $00, $01, $62, $61, $73, $73, $76, $69, $6f, $00, $00, $00
09356     00 00 00 00 
0935a     00 00 00 00 
0935e     00 00 00 00 | 	byte	$00[12]
09362     11 28 00 40 
09366     05 84 08 00 
0936a     00 00 00 00 
0936e     00 00 00 00 | 	byte	$11, $28, $00, $40, $05, $84, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00
09372     00 00 00 00 
09376     00 00 00 00 
0937a     00 00 00 00 
0937e     00 00 00 00 
09382     00 00 00 00 
09386     00          | 	byte	$00[21]
09387     01 00 00 00 
0938b     00 00 00 00 
0938f     00 00 00 00 
09393     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09397     00 00 00 00 
0939b     00 00 00 00 
0939f     00 00 00 00 
093a3     00 00       | 	byte	$00[14]
093a5     01 00 00 00 
093a9     00 00 00 00 
093ad     00 00 00 00 
093b1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093b5     00 00 00 00 
093b9     00 00 00 00 
093bd     00 00 00 00 
093c1     00 00       | 	byte	$00[14]
093c3     01 00 00 00 
093c7     00 00 00 00 
093cb     00 00 00 00 
093cf     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093d3     00 00 00 00 
093d7     00 00 00 00 
093db     00 00 00 00 
093df     00 00       | 	byte	$00[14]
093e1     01 00 00 00 
093e5     00 00 00 00 
093e9     00 00 00 00 
093ed     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093f1     00 00 00 00 
093f5     00 00 00 00 
093f9     00 00 00 00 
093fd     00 00       | 	byte	$00[14]
093ff     01 00 00 00 
09403     00 00 00 00 
09407     00 00 00 00 
0940b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0940f     00 00 00 00 
09413     00 00 00 00 
09417     00 00 00 00 
0941b     00 00       | 	byte	$00[14]
0941d     01 00 00 00 
09421     00 00 00 00 
09425     00 00 00 00 
09429     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0942d     00 00 00 00 
09431     00 00 00 00 
09435     00 00 00 00 
09439     00 00       | 	byte	$00[14]
0943b     01 00 00 00 
0943f     00 00 00 00 
09443     00 00 00 00 
09447     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0944b     00 00 00 00 
0944f     00 00 00 00 
09453     00 00 00 00 
09457     00 00       | 	byte	$00[14]
09459     01 00 00 00 
0945d     00 00 00 00 
09461     00 00 00 00 
09465     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09469     00 00 00 00 
0946d     00 00 00 00 
09471     00 00 00 00 
09475     00 00       | 	byte	$00[14]
09477     01 00 00 00 
0947b     00 00 00 00 
0947f     00 00 00 00 
09483     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09487     00 00 00 00 
0948b     00 00 00 00 
0948f     00 00 00 00 
09493     00 00       | 	byte	$00[14]
09495     01 00 00 00 
09499     00 00 00 00 
0949d     00 00 00 00 
094a1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094a5     00 00 00 00 
094a9     00 00 00 00 
094ad     00 00 00 00 
094b1     00 00       | 	byte	$00[14]
094b3     01 00 00 00 
094b7     00 00 00 00 
094bb     00 00 00 00 
094bf     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094c3     00 00 00 00 
094c7     00 00 00 00 
094cb     00 00 00 00 
094cf     00 00       | 	byte	$00[14]
094d1     01 00 00 00 
094d5     00 00 00 00 
094d9     00 00 00 00 
094dd     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094e1     00 00 00 00 
094e5     00 00 00 00 
094e9     00 00 00 00 
094ed     00 00       | 	byte	$00[14]
094ef     01 00 00 00 
094f3     00 00 00 00 
094f7     00 00 00 00 
094fb     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094ff     00 00 00 00 
09503     00 00 00 00 
09507     00 00 00 00 
0950b     00 00       | 	byte	$00[14]
0950d     01 00 00 00 
09511     00 00 00 00 
09515     00 00 00 00 
09519     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0951d     00 00 00 00 
09521     00 00 00 00 
09525     00 00 00 00 
09529     00 00       | 	byte	$00[14]
0952b     01 00 00 00 
0952f     00 00 00 00 
09533     00 00 00 00 
09537     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0953b     00 00 00 00 
0953f     00 00 00 00 
09543     00 00 00 00 
09547     00 00       | 	byte	$00[14]
09549     01 00 00 00 
0954d     00 00 00 00 
09551     00 00 00 00 
09555     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09559     00 00 00 00 
0955d     00 00 00 00 
09561     00 00 00 00 
09565     00 00       | 	byte	$00[14]
09567     01 00 00 00 
0956b     00 00 00 00 
0956f     00 00 00 00 
09573     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09577     00 00 00 00 
0957b     00 00 00 00 
0957f     00 00 00 00 
09583     00 00       | 	byte	$00[14]
09585     01 00 00 00 
09589     00 00 00 00 
0958d     00 00 00 00 
09591     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09595     00 00 00 00 
09599     00 00 00 00 
0959d     00 00 00 00 
095a1     00 00       | 	byte	$00[14]
095a3     01 00 00 00 
095a7     00 00 00 00 
095ab     00 00 00 00 
095af     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
095b3     00 00 00 00 
095b7     00 00 00 00 
095bb     00 00 00 00 
095bf     00 00       | 	byte	$00[14]
095c1     01 00 00 00 
095c5     00 00 00 00 
095c9     00 00 00 00 
095cd     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
095d1     00 00 00 00 
095d5     00 00 00 00 
095d9     00 00 00 00 
095dd     00 00       | 	byte	$00[14]
095df     01 00 00 00 
095e3     00 00 00 00 
095e7     00 00 00 00 
095eb     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
095ef     00 00 00 00 
095f3     00 00 00 00 
095f7     00 00 00 00 
095fb     00 00       | 	byte	$00[14]
095fd     01 00 00 00 
09601     00 00 00 00 
09605     00 00 00 00 
09609     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0960d     00 00 00 00 
09611     00 00 00 00 
09615     00 00 00 00 
09619     00 00       | 	byte	$00[14]
0961b     01 00 00 00 
0961f     00 00 00 00 
09623     00 00 00 00 
09627     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0962b     00 00 00 00 
0962f     00 00 00 00 
09633     00 00 00 00 
09637     00 00       | 	byte	$00[14]
09639     01 2B 00 0E 
0963d     01 0F 0F 02 
09641     03 04 05 06 
09645     02 03 04 08 | 	byte	$01, $2b, $00, $0e, $01, $0f, $0f, $02, $03, $04, $05, $06, $02, $03, $04, $08
09649     06 07 09 0A 
0964d     0B 02 03 04 
09651     05 06 02 03 
09655     04 08 06 07 | 	byte	$06, $07, $09, $0a, $0b, $02, $03, $04, $05, $06, $02, $03, $04, $08, $06, $07
09659     09 0A 0B 07 
0965d     09 0A 0B 00 
09661     00 00 00 0D 
09665     0C 1B 00 00 | 	byte	$09, $0a, $0b, $07, $09, $0a, $0b, $00, $00, $00, $00, $0d, $0c, $1b, $00, $00
09669     00 00 00 00 
      ...             
096b5     00 00 00 00 
096b9     00 00 00    | 	byte	$00[83]
096bc     4D 2E 4B 2E 
096c0     00 B4 4F 04 
096c4     00 00 00 00 
096c8     00 00 00 00 | 	byte	$4d, $2e, $4b, $2e, $00, $b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00
096cc     02 FA 60 00 
096d0     00 00 00 00 
096d4     00 00 00 00 
096d8     00 00 00 00 | 	byte	$02, $fa, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096dc     00 00 00 00 
096e0     00          | 	byte	$00[5]
096e1     B4 40 00 01 
096e5     7D 60 00 00 
096e9     00 00 00 01 
096ed     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
096f1     00 00 00 00 
096f5     00 00 00 00 
096f9     00 00 00 00 
096fd     00 00 00 00 | 	byte	$00[16]
09701     B4 30 00 00 
09705     BE 60 00 00 
09709     00 00 00 02 
0970d     FA 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09711     00 00 00 00 
09715     00 00 00 00 
09719     00 00 00 00 
0971d     00 00 00 00 | 	byte	$00[16]
09721     AA 50 00 00 
09725     FE 60 00 00 
09729     00 00 00 01 
0972d     7D 60 00 00 | 	byte	$aa, $50, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
09731     00 00 00 00 
09735     00 00 00 00 
09739     00 00 00 00 
0973d     00 00 00 00 | 	byte	$00[16]
09741     B4 40 00 00 
09745     D6 60 00 00 
09749     00 00 00 02 
0974d     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09751     00 00 00 00 
09755     00 00 00 00 
09759     00 00 00 00 
0975d     00 00 00 00 | 	byte	$00[16]
09761     B4 30 00 00 
09765     BE 60 00 00 
09769     00 00 00 01 
0976d     AC 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
09771     00 00 00 00 
09775     00 00 00 00 
09779     00 00 00 00 
0977d     00 00 00 00 | 	byte	$00[16]
09781     B4 30 00 01 
09785     7D 60 00 01 
09789     AC 10 00 02 
0978d     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $01, $ac, $10, $00, $02, $fa, $60, $00, $00
09791     00 00 00 00 
09795     00 00 00 00 
09799     00 00 00 00 
0979d     00 00 00 00 | 	byte	$00[16]
097a1     AA 50 00 01 
097a5     7D 60 00 01 
097a9     AC 10 00 01 
097ad     7D 60 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $01, $ac, $10, $00, $01, $7d, $60, $00, $00
097b1     00 00 00 00 
097b5     00 00 00 00 
097b9     00 00 00 00 
097bd     00 00 00 00 | 	byte	$00[16]
097c1     B4 40 00 00 
097c5     00 00 00 00 
097c9     00 00 00 02 
097cd     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
097d1     00 00 00 00 
097d5     00 00 00 00 
097d9     00 00 00 00 
097dd     00 00 00 00 | 	byte	$00[16]
097e1     B4 40 00 01 
097e5     7D 60 00 00 
097e9     00 00 00 01 
097ed     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
097f1     00 00 00 00 
097f5     00 00 00 00 
097f9     00 00 00 00 
097fd     00 00 00 00 | 	byte	$00[16]
09801     B4 30 00 00 
09805     BE 60 00 00 
09809     00 00 00 02 
0980d     FA 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09811     00 00 00 00 
09815     00 00 00 00 
09819     00 00 00 00 
0981d     00 00 00 00 | 	byte	$00[16]
09821     AA 50 00 00 
09825     FE 60 00 00 
09829     00 00 00 01 
0982d     7D 60 00 00 | 	byte	$aa, $50, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
09831     00 00 00 00 
09835     00 00 00 00 
09839     00 00 00 00 
0983d     00 00 00 00 | 	byte	$00[16]
09841     B4 40 00 00 
09845     D6 60 00 00 
09849     00 00 00 02 
0984d     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09851     00 00 00 00 
09855     00 00 00 00 
09859     00 00 00 00 
0985d     00 00 00 00 | 	byte	$00[16]
09861     B4 30 00 00 
09865     BE 60 00 00 
09869     00 00 00 01 
0986d     AC 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
09871     00 00 00 00 
09875     00 00 00 00 
09879     00 00 00 00 
0987d     00 00 00 00 | 	byte	$00[16]
09881     B4 30 00 01 
09885     7D 60 00 00 
09889     00 00 00 02 
0988d     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09891     00 00 00 00 
09895     00 00 00 00 
09899     00 00 00 00 
0989d     00 00 00 00 | 	byte	$00[16]
098a1     AA 50 00 01 
098a5     7D 60 00 00 
098a9     00 00 00 01 
098ad     7D 60 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
098b1     00 00 00 00 
098b5     00 00 00 00 
098b9     00 00 00 00 
098bd     00 00 00 00 | 	byte	$00[16]
098c1     B4 40 00 00 
098c5     00 00 00 00 
098c9     00 00 00 02 
098cd     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
098d1     00 00 00 00 
098d5     00 00 00 00 
098d9     00 00 00 00 
098dd     00 00 00 00 | 	byte	$00[16]
098e1     B4 40 00 01 
098e5     7D 60 00 00 
098e9     00 00 00 01 
098ed     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
098f1     00 00 00 00 
098f5     00 00 00 00 
098f9     00 00 00 00 
098fd     00 00 00 00 | 	byte	$00[16]
09901     B4 30 00 00 
09905     BE 60 00 00 
09909     00 00 00 02 
0990d     FA 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09911     00 00 00 00 
09915     00 00 00 00 
09919     00 00 00 00 
0991d     00 00 00 00 | 	byte	$00[16]
09921     AA 50 00 00 
09925     FE 60 00 00 
09929     00 00 00 01 
0992d     7D 60 00 00 | 	byte	$aa, $50, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
09931     00 00 00 00 
09935     00 00 00 00 
09939     00 00 00 00 
0993d     00 00 00 00 | 	byte	$00[16]
09941     B4 40 00 00 
09945     D6 60 00 00 
09949     00 00 00 02 
0994d     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09951     00 00 00 00 
09955     00 00 00 00 
09959     00 00 00 00 
0995d     00 00 00 00 | 	byte	$00[16]
09961     B4 30 00 00 
09965     BE 60 00 00 
09969     00 00 00 01 
0996d     AC 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
09971     00 00 00 00 
09975     00 00 00 00 
09979     00 00 00 00 
0997d     00 00 00 00 | 	byte	$00[16]
09981     B4 30 00 01 
09985     7D 60 00 03 
09989     58 10 00 02 
0998d     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $03, $58, $10, $00, $02, $fa, $60, $00, $00
09991     00 00 00 00 
09995     00 00 00 00 
09999     00 00 00 00 
0999d     00 00 00 00 | 	byte	$00[16]
099a1     AA 50 00 01 
099a5     7D 60 00 00 
099a9     00 00 00 01 
099ad     7D 60 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
099b1     00 00 00 00 
099b5     00 00 00 00 
099b9     00 00 00 00 
099bd     00 00 00 00 | 	byte	$00[16]
099c1     B4 40 00 00 
099c5     00 00 00 00 
099c9     00 00 00 02 
099cd     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
099d1     00 00 00 00 
099d5     00 00 00 00 
099d9     00 00 00 00 
099dd     00 00 00 00 | 	byte	$00[16]
099e1     B4 40 00 01 
099e5     7D 60 00 00 
099e9     00 00 00 01 
099ed     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
099f1     00 00 00 00 
099f5     00 00 00 00 
099f9     00 00 00 00 
099fd     00 00 00 00 | 	byte	$00[16]
09a01     B4 30 00 00 
09a05     BE 60 00 00 
09a09     00 00 00 02 
09a0d     FA 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09a11     00 00 00 00 
09a15     00 00 00 00 
09a19     00 00 00 00 
09a1d     00 00 00 00 | 	byte	$00[16]
09a21     AA 50 00 00 
09a25     FE 60 00 00 
09a29     00 00 00 01 
09a2d     7D 60 00 00 | 	byte	$aa, $50, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
09a31     00 00 00 00 
09a35     00 00 00 00 
09a39     00 00 00 00 
09a3d     00 00 00 00 | 	byte	$00[16]
09a41     B4 40 00 00 
09a45     D6 60 00 00 
09a49     00 00 00 02 
09a4d     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09a51     00 00 00 00 
09a55     00 00 00 00 
09a59     00 00 00 00 
09a5d     00 00 00 00 | 	byte	$00[16]
09a61     B4 30 00 00 
09a65     BE 60 00 00 
09a69     00 00 00 01 
09a6d     AC 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
09a71     00 00 00 00 
09a75     00 00 00 00 
09a79     00 00 00 00 
09a7d     00 00 00 00 | 	byte	$00[16]
09a81     B4 30 00 01 
09a85     7D 60 00 00 
09a89     00 00 00 02 
09a8d     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09a91     00 00 00 00 
09a95     00 00 00 00 
09a99     00 00 00 00 
09a9d     00 00 00 00 | 	byte	$00[16]
09aa1     AA 50 00 01 
09aa5     7D 60 00 00 
09aa9     00 00 00 01 
09aad     7D 60 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
09ab1     00 00 00 00 
09ab5     00 00 00 00 
09ab9     00 00 00 00 
09abd     00 00 00 00 | 	byte	$00[16]
09ac1     B4 4F 04 00 
09ac5     00 00 00 00 
09ac9     00 00 00 00 
09acd     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ad1     00 00 00 00 
09ad5     00 00 00 00 
09ad9     00 00 00 00 
09add     00 00 00 00 | 	byte	$00[16]
09ae1     B4 40 00 00 
09ae5     00 00 00 00 
09ae9     00 00 00 00 
09aed     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09af1     00 00 00 00 
09af5     00 00 00 00 
09af9     00 00 00 00 
09afd     00 00 00 00 | 	byte	$00[16]
09b01     B4 30 00 00 
09b05     00 00 00 00 
09b09     00 00 00 00 
09b0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b11     00 00 00 00 
09b15     00 00 00 00 
09b19     00 00 00 00 
09b1d     00 00 00 00 | 	byte	$00[16]
09b21     AA 50 00 00 
09b25     00 00 00 00 
09b29     00 00 00 00 
09b2d     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b31     00 00 00 00 
09b35     00 00 00 00 
09b39     00 00 00 00 
09b3d     00 00 00 00 | 	byte	$00[16]
09b41     B4 40 00 00 
09b45     00 00 00 00 
09b49     00 00 00 00 
09b4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b51     00 00 00 00 
09b55     00 00 00 00 
09b59     00 00 00 00 
09b5d     00 00 00 00 | 	byte	$00[16]
09b61     B4 30 00 00 
09b65     00 00 00 00 
09b69     00 00 00 00 
09b6d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b71     00 00 00 00 
09b75     00 00 00 00 
09b79     00 00 00 00 
09b7d     00 00 00 00 | 	byte	$00[16]
09b81     B4 30 00 00 
09b85     00 00 00 00 
09b89     00 00 00 00 
09b8d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b91     00 00 00 00 
09b95     00 00 00 00 
09b99     00 00 00 00 
09b9d     00 00 00 00 | 	byte	$00[16]
09ba1     AA 50 00 00 
09ba5     00 00 00 00 
09ba9     00 00 00 00 
09bad     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09bb1     00 00 00 00 
09bb5     00 00 00 00 
09bb9     00 00 00 00 
09bbd     00 00 00 00 | 	byte	$00[16]
09bc1     B4 40 00 00 
09bc5     00 00 00 00 
09bc9     00 00 00 00 
09bcd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09bd1     00 00 00 00 
09bd5     00 00 00 00 
09bd9     00 00 00 00 
09bdd     00 00 00 00 | 	byte	$00[16]
09be1     B4 40 00 00 
09be5     00 00 00 00 
09be9     00 00 00 00 
09bed     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09bf1     00 00 00 00 
09bf5     00 00 00 00 
09bf9     00 00 00 00 
09bfd     00 00 00 00 | 	byte	$00[16]
09c01     B4 30 00 00 
09c05     00 00 00 00 
09c09     00 00 00 00 
09c0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c11     00 00 00 00 
09c15     00 00 00 00 
09c19     00 00 00 00 
09c1d     00 00 00 00 | 	byte	$00[16]
09c21     AA 50 00 00 
09c25     00 00 00 00 
09c29     00 00 00 00 
09c2d     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c31     00 00 00 00 
09c35     00 00 00 00 
09c39     00 00 00 00 
09c3d     00 00 00 00 | 	byte	$00[16]
09c41     B4 40 00 00 
09c45     00 00 00 00 
09c49     00 00 00 00 
09c4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c51     00 00 00 00 
09c55     00 00 00 00 
09c59     00 00 00 00 
09c5d     00 00 00 00 | 	byte	$00[16]
09c61     B4 30 00 00 
09c65     00 00 00 00 
09c69     00 00 00 00 
09c6d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c71     00 00 00 00 
09c75     00 00 00 00 
09c79     00 00 00 00 
09c7d     00 00 00 00 | 	byte	$00[16]
09c81     B4 30 00 00 
09c85     00 00 00 00 
09c89     00 00 00 00 
09c8d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c91     00 00 00 00 
09c95     00 00 00 00 
09c99     00 00 00 00 
09c9d     00 00 00 00 | 	byte	$00[16]
09ca1     AA 50 00 00 
09ca5     00 00 00 00 
09ca9     00 00 00 00 
09cad     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cb1     00 00 00 00 
09cb5     00 00 00 00 
09cb9     00 00 00 00 
09cbd     00 00 00 00 | 	byte	$00[16]
09cc1     B4 40 00 00 
09cc5     00 00 00 00 
09cc9     00 00 00 00 
09ccd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cd1     00 00 00 00 
09cd5     00 00 00 00 
09cd9     00 00 00 00 
09cdd     00 00 00 00 | 	byte	$00[16]
09ce1     B4 40 00 00 
09ce5     00 00 00 00 
09ce9     00 00 00 00 
09ced     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cf1     00 00 00 00 
09cf5     00 00 00 00 
09cf9     00 00 00 00 
09cfd     00 00 00 00 | 	byte	$00[16]
09d01     B4 30 00 00 
09d05     00 00 00 00 
09d09     00 00 00 00 
09d0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d11     00 00 00 00 
09d15     00 00 00 00 
09d19     00 00 00 00 
09d1d     00 00 00 00 | 	byte	$00[16]
09d21     AA 50 00 00 
09d25     00 00 00 00 
09d29     00 00 00 00 
09d2d     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d31     00 00 00 00 
09d35     00 00 00 00 
09d39     00 00 00 00 
09d3d     00 00 00 00 | 	byte	$00[16]
09d41     B4 40 00 00 
09d45     00 00 00 00 
09d49     00 00 00 00 
09d4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d51     00 00 00 00 
09d55     00 00 00 00 
09d59     00 00 00 00 
09d5d     00 00 00 00 | 	byte	$00[16]
09d61     B4 30 00 00 
09d65     00 00 00 00 
09d69     00 00 00 00 
09d6d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d71     00 00 00 00 
09d75     00 00 00 00 
09d79     00 00 00 00 
09d7d     00 00 00 00 | 	byte	$00[16]
09d81     B4 30 00 00 
09d85     00 00 00 00 
09d89     00 00 00 00 
09d8d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d91     00 00 00 00 
09d95     00 00 00 00 
09d99     00 00 00 00 
09d9d     00 00 00 00 | 	byte	$00[16]
09da1     AA 50 00 00 
09da5     00 00 00 00 
09da9     00 00 00 00 
09dad     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09db1     00 00 00 00 
09db5     00 00 00 00 
09db9     00 00 00 00 
09dbd     00 00 00 00 | 	byte	$00[16]
09dc1     B4 40 00 00 
09dc5     00 00 00 00 
09dc9     00 00 00 00 
09dcd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dd1     00 00 00 00 
09dd5     00 00 00 00 
09dd9     00 00 00 00 
09ddd     00 00 00 00 | 	byte	$00[16]
09de1     B4 40 00 00 
09de5     00 00 00 00 
09de9     00 00 00 00 
09ded     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09df1     00 00 00 00 
09df5     00 00 00 00 
09df9     00 00 00 00 
09dfd     00 00 00 00 | 	byte	$00[16]
09e01     B4 30 00 00 
09e05     00 00 00 00 
09e09     00 00 00 00 
09e0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e11     00 00 00 00 
09e15     00 00 00 00 
09e19     00 00 00 00 
09e1d     00 00 00 00 | 	byte	$00[16]
09e21     AA 50 00 00 
09e25     00 00 00 00 
09e29     00 00 00 00 
09e2d     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e31     00 00 00 00 
09e35     00 00 00 00 
09e39     00 00 00 00 
09e3d     00 00 00 00 | 	byte	$00[16]
09e41     B4 40 00 00 
09e45     00 00 00 00 
09e49     00 00 00 00 
09e4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e51     00 00 00 00 
09e55     00 00 00 00 
09e59     00 00 00 00 
09e5d     00 00 00 00 | 	byte	$00[16]
09e61     B4 30 00 00 
09e65     00 00 00 00 
09e69     00 00 00 00 
09e6d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e71     00 00 00 00 
09e75     00 00 00 00 
09e79     00 00 00 00 
09e7d     00 00 00 00 | 	byte	$00[16]
09e81     B4 30 00 01 
09e85     7D 60 00 00 
09e89     00 00 00 00 
09e8d     BE 70 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $be, $70, $00, $00
09e91     00 00 00 00 
09e95     00 00 00 00 
09e99     00 00 00 00 
09e9d     00 00 00 00 | 	byte	$00[16]
09ea1     AA 50 00 01 
09ea5     7D 60 00 00 
09ea9     00 00 00 00 
09ead     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09eb1     00 00 00 00 
09eb5     00 00 00 00 
09eb9     00 00 00 00 
09ebd     00 00 00 00 | 	byte	$00[16]
09ec1     B4 4F 04 00 
09ec5     00 00 00 01 
09ec9     40 20 00 00 
09ecd     BE 70 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $01, $40, $20, $00, $00, $be, $70, $00, $00
09ed1     00 00 00 00 
09ed5     00 00 00 00 
09ed9     00 00 00 00 
09edd     00 00 00 00 | 	byte	$00[16]
09ee1     B4 40 00 01 
09ee5     7D 60 00 01 
09ee9     1D 20 00 00 
09eed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
09ef1     00 00 00 00 
09ef5     00 00 00 00 
09ef9     00 00 00 00 
09efd     00 00 00 00 | 	byte	$00[16]
09f01     B4 30 00 00 
09f05     BE 60 00 00 
09f09     FE 20 00 00 
09f0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
09f11     00 00 00 00 
09f15     00 00 00 00 
09f19     00 00 00 00 
09f1d     00 00 00 00 | 	byte	$00[16]
09f21     AA 50 00 01 
09f25     7D 60 00 01 
09f29     1D 20 00 00 
09f2d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
09f31     00 00 00 00 
09f35     00 00 00 00 
09f39     00 00 00 00 
09f3d     00 00 00 00 | 	byte	$00[16]
09f41     B4 40 00 00 
09f45     BE 60 00 01 
09f49     40 20 00 00 
09f4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
09f51     00 00 00 00 
09f55     00 00 00 00 
09f59     00 00 00 00 
09f5d     00 00 00 00 | 	byte	$00[16]
09f61     B4 30 00 01 
09f65     7D 60 00 00 
09f69     FE 20 00 00 
09f6d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
09f71     00 00 00 00 
09f75     00 00 00 00 
09f79     00 00 00 00 
09f7d     00 00 00 00 | 	byte	$00[16]
09f81     B4 30 00 01 
09f85     7D 60 00 00 
09f89     00 00 00 00 
09f8d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f91     00 00 00 00 
09f95     00 00 00 00 
09f99     00 00 00 00 
09f9d     00 00 00 00 | 	byte	$00[16]
09fa1     AA 50 00 01 
09fa5     7D 60 00 00 
09fa9     00 00 00 00 
09fad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09fb1     00 00 00 00 
09fb5     00 00 00 00 
09fb9     00 00 00 00 
09fbd     00 00 00 00 | 	byte	$00[16]
09fc1     B4 40 00 00 
09fc5     00 00 00 01 
09fc9     40 20 00 00 
09fcd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
09fd1     00 00 00 00 
09fd5     00 00 00 00 
09fd9     00 00 00 00 
09fdd     00 00 00 00 | 	byte	$00[16]
09fe1     B4 40 00 01 
09fe5     7D 60 00 01 
09fe9     1D 20 00 00 
09fed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
09ff1     00 00 00 00 
09ff5     00 00 00 00 
09ff9     00 00 00 00 
09ffd     00 00 00 00 | 	byte	$00[16]
0a001     B4 30 00 00 
0a005     BE 60 00 00 
0a009     FE 20 00 00 
0a00d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
0a011     00 00 00 00 
0a015     00 00 00 00 
0a019     00 00 00 00 
0a01d     00 00 00 00 | 	byte	$00[16]
0a021     AA 50 00 01 
0a025     7D 60 00 01 
0a029     1D 20 00 00 
0a02d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
0a031     00 00 00 00 
0a035     00 00 00 00 
0a039     00 00 00 00 
0a03d     00 00 00 00 | 	byte	$00[16]
0a041     B4 40 00 00 
0a045     BE 60 00 01 
0a049     40 20 00 00 
0a04d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a051     00 00 00 00 
0a055     00 00 00 00 
0a059     00 00 00 00 
0a05d     00 00 00 00 | 	byte	$00[16]
0a061     B4 30 00 01 
0a065     7D 60 00 00 
0a069     FE 20 00 00 
0a06d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
0a071     00 00 00 00 
0a075     00 00 00 00 
0a079     00 00 00 00 
0a07d     00 00 00 00 | 	byte	$00[16]
0a081     B4 30 00 01 
0a085     7D 60 00 00 
0a089     00 00 00 00 
0a08d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a091     00 00 00 00 
0a095     00 00 00 00 
0a099     00 00 00 00 
0a09d     00 00 00 00 | 	byte	$00[16]
0a0a1     AA 50 00 01 
0a0a5     7D 60 00 00 
0a0a9     00 00 00 00 
0a0ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a0b1     00 00 00 00 
0a0b5     00 00 00 00 
0a0b9     00 00 00 00 
0a0bd     00 00 00 00 | 	byte	$00[16]
0a0c1     B4 40 00 00 
0a0c5     00 00 00 01 
0a0c9     53 20 00 00 
0a0cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a0d1     00 00 00 00 
0a0d5     00 00 00 00 
0a0d9     00 00 00 00 
0a0dd     00 00 00 00 | 	byte	$00[16]
0a0e1     B4 40 00 01 
0a0e5     7D 60 00 01 
0a0e9     40 20 00 00 
0a0ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a0f1     00 00 00 00 
0a0f5     00 00 00 00 
0a0f9     00 00 00 00 
0a0fd     00 00 00 00 | 	byte	$00[16]
0a101     B4 30 00 00 
0a105     FE 60 00 01 
0a109     1D 20 00 01 
0a10d     FC 70 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $01, $1d, $20, $00, $01, $fc, $70, $00, $00
0a111     00 00 00 00 
0a115     00 00 00 00 
0a119     00 00 00 00 
0a11d     00 00 00 00 | 	byte	$00[16]
0a121     AA 50 00 01 
0a125     FC 60 00 01 
0a129     40 20 00 00 
0a12d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a131     00 00 00 00 
0a135     00 00 00 00 
0a139     00 00 00 00 
0a13d     00 00 00 00 | 	byte	$00[16]
0a141     B4 40 00 00 
0a145     FE 60 00 01 
0a149     53 20 00 00 
0a14d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a151     00 00 00 00 
0a155     00 00 00 00 
0a159     00 00 00 00 
0a15d     00 00 00 00 | 	byte	$00[16]
0a161     B4 30 00 01 
0a165     FC 60 00 01 
0a169     1D 20 00 00 
0a16d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
0a171     00 00 00 00 
0a175     00 00 00 00 
0a179     00 00 00 00 
0a17d     00 00 00 00 | 	byte	$00[16]
0a181     B4 30 00 01 
0a185     FC 60 00 00 
0a189     00 00 00 00 
0a18d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a191     00 00 00 00 
0a195     00 00 00 00 
0a199     00 00 00 00 
0a19d     00 00 00 00 | 	byte	$00[16]
0a1a1     AA 50 00 01 
0a1a5     FC 60 00 00 
0a1a9     00 00 00 00 
0a1ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a1b1     00 00 00 00 
0a1b5     00 00 00 00 
0a1b9     00 00 00 00 
0a1bd     00 00 00 00 | 	byte	$00[16]
0a1c1     B4 40 00 00 
0a1c5     00 00 00 01 
0a1c9     53 20 00 00 
0a1cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a1d1     00 00 00 00 
0a1d5     00 00 00 00 
0a1d9     00 00 00 00 
0a1dd     00 00 00 00 | 	byte	$00[16]
0a1e1     B4 40 00 01 
0a1e5     FC 60 00 01 
0a1e9     40 20 00 00 
0a1ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a1f1     00 00 00 00 
0a1f5     00 00 00 00 
0a1f9     00 00 00 00 
0a1fd     00 00 00 00 | 	byte	$00[16]
0a201     B4 30 00 00 
0a205     FE 60 00 01 
0a209     1D 20 00 00 
0a20d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
0a211     00 00 00 00 
0a215     00 00 00 00 
0a219     00 00 00 00 
0a21d     00 00 00 00 | 	byte	$00[16]
0a221     AA 50 00 01 
0a225     FC 60 00 01 
0a229     40 20 00 00 
0a22d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a231     00 00 00 00 
0a235     00 00 00 00 
0a239     00 00 00 00 
0a23d     00 00 00 00 | 	byte	$00[16]
0a241     B4 40 00 00 
0a245     FE 60 00 01 
0a249     53 20 00 00 
0a24d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a251     00 00 00 00 
0a255     00 00 00 00 
0a259     00 00 00 00 
0a25d     00 00 00 00 | 	byte	$00[16]
0a261     B4 30 00 01 
0a265     FC 60 00 01 
0a269     1D 20 00 00 
0a26d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
0a271     00 00 00 00 
0a275     00 00 00 00 
0a279     00 00 00 00 
0a27d     00 00 00 00 | 	byte	$00[16]
0a281     B4 30 00 01 
0a285     FC 60 00 00 
0a289     00 00 00 00 
0a28d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a291     00 00 00 00 
0a295     00 00 00 00 
0a299     00 00 00 00 
0a29d     00 00 00 00 | 	byte	$00[16]
0a2a1     AA 50 00 01 
0a2a5     FC 60 00 00 
0a2a9     00 00 00 00 
0a2ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2b1     00 00 00 00 
0a2b5     00 00 00 00 
0a2b9     00 00 00 00 
0a2bd     00 00 00 00 | 	byte	$00[16]
0a2c1     B4 4F 04 00 
0a2c5     00 00 00 01 
0a2c9     7D 20 00 00 
0a2cd     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0a2d1     00 00 00 00 
0a2d5     00 00 00 00 
0a2d9     00 00 00 00 
0a2dd     00 00 00 00 | 	byte	$00[16]
0a2e1     B4 40 00 01 
0a2e5     E0 60 00 01 
0a2e9     53 20 00 00 
0a2ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $e0, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a2f1     00 00 00 00 
0a2f5     00 00 00 00 
0a2f9     00 00 00 00 
0a2fd     00 00 00 00 | 	byte	$00[16]
0a301     B4 30 00 00 
0a305     F0 60 00 01 
0a309     40 20 00 00 
0a30d     F0 70 00 00 | 	byte	$b4, $30, $00, $00, $f0, $60, $00, $01, $40, $20, $00, $00, $f0, $70, $00, $00
0a311     00 00 00 00 
0a315     00 00 00 00 
0a319     00 00 00 00 
0a31d     00 00 00 00 | 	byte	$00[16]
0a321     AA 50 00 01 
0a325     E0 60 00 01 
0a329     53 20 00 00 
0a32d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a331     00 00 00 00 
0a335     00 00 00 00 
0a339     00 00 00 00 
0a33d     00 00 00 00 | 	byte	$00[16]
0a341     B4 40 00 00 
0a345     F0 60 00 01 
0a349     7D 20 00 00 
0a34d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $f0, $60, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0a351     00 00 00 00 
0a355     00 00 00 00 
0a359     00 00 00 00 
0a35d     00 00 00 00 | 	byte	$00[16]
0a361     B4 30 00 01 
0a365     E0 60 00 01 
0a369     40 20 00 00 
0a36d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a371     00 00 00 00 
0a375     00 00 00 00 
0a379     00 00 00 00 
0a37d     00 00 00 00 | 	byte	$00[16]
0a381     B4 30 00 01 
0a385     E0 60 00 00 
0a389     00 00 00 00 
0a38d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a391     00 00 00 00 
0a395     00 00 00 00 
0a399     00 00 00 00 
0a39d     00 00 00 00 | 	byte	$00[16]
0a3a1     AA 50 00 01 
0a3a5     E0 60 00 00 
0a3a9     00 00 00 00 
0a3ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3b1     00 00 00 00 
0a3b5     00 00 00 00 
0a3b9     00 00 00 00 
0a3bd     00 00 00 00 | 	byte	$00[16]
0a3c1     B4 40 00 00 
0a3c5     00 00 00 01 
0a3c9     7D 20 00 00 
0a3cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0a3d1     00 00 00 00 
0a3d5     00 00 00 00 
0a3d9     00 00 00 00 
0a3dd     00 00 00 00 | 	byte	$00[16]
0a3e1     B4 40 00 01 
0a3e5     E0 60 00 01 
0a3e9     53 20 00 00 
0a3ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $e0, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a3f1     00 00 00 00 
0a3f5     00 00 00 00 
0a3f9     00 00 00 00 
0a3fd     00 00 00 00 | 	byte	$00[16]
0a401     B4 30 00 00 
0a405     F0 60 00 01 
0a409     40 20 00 00 
0a40d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $f0, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a411     00 00 00 00 
0a415     00 00 00 00 
0a419     00 00 00 00 
0a41d     00 00 00 00 | 	byte	$00[16]
0a421     AA 50 00 01 
0a425     E0 60 00 01 
0a429     53 20 00 00 
0a42d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a431     00 00 00 00 
0a435     00 00 00 00 
0a439     00 00 00 00 
0a43d     00 00 00 00 | 	byte	$00[16]
0a441     B4 40 00 00 
0a445     F0 60 00 01 
0a449     7D 20 00 00 
0a44d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $f0, $60, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0a451     00 00 00 00 
0a455     00 00 00 00 
0a459     00 00 00 00 
0a45d     00 00 00 00 | 	byte	$00[16]
0a461     B4 30 00 01 
0a465     E0 60 00 01 
0a469     40 20 00 00 
0a46d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a471     00 00 00 00 
0a475     00 00 00 00 
0a479     00 00 00 00 
0a47d     00 00 00 00 | 	byte	$00[16]
0a481     B4 30 00 01 
0a485     E0 60 00 00 
0a489     00 00 00 00 
0a48d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a491     00 00 00 00 
0a495     00 00 00 00 
0a499     00 00 00 00 
0a49d     00 00 00 00 | 	byte	$00[16]
0a4a1     AA 50 00 01 
0a4a5     E0 60 00 00 
0a4a9     00 00 00 00 
0a4ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4b1     00 00 00 00 
0a4b5     00 00 00 00 
0a4b9     00 00 00 00 
0a4bd     00 00 00 00 | 	byte	$00[16]
0a4c1     B4 40 00 00 
0a4c5     00 00 00 00 
0a4c9     00 00 00 00 
0a4cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4d1     00 00 00 00 
0a4d5     00 00 00 00 
0a4d9     00 00 00 00 
0a4dd     00 00 00 00 | 	byte	$00[16]
0a4e1     B4 40 00 01 
0a4e5     E0 60 00 00 
0a4e9     00 00 00 00 
0a4ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4f1     00 00 00 00 
0a4f5     00 00 00 00 
0a4f9     00 00 00 00 
0a4fd     00 00 00 00 | 	byte	$00[16]
0a501     B4 30 00 01 
0a505     E0 60 00 01 
0a509     53 20 00 00 
0a50d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a511     00 00 00 00 
0a515     00 00 00 00 
0a519     00 00 00 00 
0a51d     00 00 00 00 | 	byte	$00[16]
0a521     AA 50 00 01 
0a525     E0 60 00 01 
0a529     7D 20 00 00 
0a52d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0a531     00 00 00 00 
0a535     00 00 00 00 
0a539     00 00 00 00 
0a53d     00 00 00 00 | 	byte	$00[16]
0a541     B4 40 00 00 
0a545     F0 60 00 00 
0a549     00 00 00 00 
0a54d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $f0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a551     00 00 00 00 
0a555     00 00 00 00 
0a559     00 00 00 00 
0a55d     00 00 00 00 | 	byte	$00[16]
0a561     B4 30 00 01 
0a565     E0 60 00 00 
0a569     00 00 00 00 
0a56d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a571     00 00 00 00 
0a575     00 00 00 00 
0a579     00 00 00 00 
0a57d     00 00 00 00 | 	byte	$00[16]
0a581     B4 30 00 01 
0a585     AC 60 00 01 
0a589     AC 20 00 00 
0a58d     D6 70 00 00 | 	byte	$b4, $30, $00, $01, $ac, $60, $00, $01, $ac, $20, $00, $00, $d6, $70, $00, $00
0a591     00 00 00 00 
0a595     00 00 00 00 
0a599     00 00 00 00 
0a59d     00 00 00 00 | 	byte	$00[16]
0a5a1     AA 50 00 01 
0a5a5     AC 60 00 00 
0a5a9     00 00 00 00 
0a5ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5b1     00 00 00 00 
0a5b5     00 00 00 00 
0a5b9     00 00 00 00 
0a5bd     00 00 00 00 | 	byte	$00[16]
0a5c1     B4 40 00 00 
0a5c5     00 00 00 00 
0a5c9     00 00 00 00 
0a5cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5d1     00 00 00 00 
0a5d5     00 00 00 00 
0a5d9     00 00 00 00 
0a5dd     00 00 00 00 | 	byte	$00[16]
0a5e1     B4 40 00 01 
0a5e5     AC 60 00 00 
0a5e9     00 00 00 00 
0a5ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5f1     00 00 00 00 
0a5f5     00 00 00 00 
0a5f9     00 00 00 00 
0a5fd     00 00 00 00 | 	byte	$00[16]
0a601     B4 30 00 00 
0a605     D6 60 00 00 
0a609     00 00 00 00 
0a60d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a611     00 00 00 00 
0a615     00 00 00 00 
0a619     00 00 00 00 
0a61d     00 00 00 00 | 	byte	$00[16]
0a621     AA 50 00 01 
0a625     AC 60 00 00 
0a629     00 00 00 00 
0a62d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a631     00 00 00 00 
0a635     00 00 00 00 
0a639     00 00 00 00 
0a63d     00 00 00 00 | 	byte	$00[16]
0a641     B4 40 00 00 
0a645     D6 60 00 00 
0a649     00 00 00 00 
0a64d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a651     00 00 00 00 
0a655     00 00 00 00 
0a659     00 00 00 00 
0a65d     00 00 00 00 | 	byte	$00[16]
0a661     B4 30 00 01 
0a665     AC 60 00 00 
0a669     00 00 00 00 
0a66d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a671     00 00 00 00 
0a675     00 00 00 00 
0a679     00 00 00 00 
0a67d     00 00 00 00 | 	byte	$00[16]
0a681     B4 30 00 01 
0a685     AC 60 00 01 
0a689     E0 20 00 00 
0a68d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $ac, $60, $00, $01, $e0, $20, $00, $00, $00, $00, $00, $00
0a691     00 00 00 00 
0a695     00 00 00 00 
0a699     00 00 00 00 
0a69d     00 00 00 00 | 	byte	$00[16]
0a6a1     AA 50 00 01 
0a6a5     AC 60 00 00 
0a6a9     00 00 00 00 
0a6ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6b1     00 00 00 00 
0a6b5     00 00 00 00 
0a6b9     00 00 00 00 
0a6bd     00 00 00 00 | 	byte	$00[16]
0a6c1     B4 4F 04 00 
0a6c5     00 00 00 00 
0a6c9     00 00 00 00 
0a6cd     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6d1     00 00 00 00 
0a6d5     00 00 00 00 
0a6d9     00 00 00 00 
0a6dd     00 00 00 00 | 	byte	$00[16]
0a6e1     B4 40 00 01 
0a6e5     AC 60 00 01 
0a6e9     AC 20 00 00 
0a6ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $ac, $60, $00, $01, $ac, $20, $00, $00, $00, $00, $00, $00
0a6f1     00 00 00 00 
0a6f5     00 00 00 00 
0a6f9     00 00 00 00 
0a6fd     00 00 00 00 | 	byte	$00[16]
0a701     B4 30 00 00 
0a705     D6 60 00 00 
0a709     00 00 00 00 
0a70d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a711     00 00 00 00 
0a715     00 00 00 00 
0a719     00 00 00 00 
0a71d     00 00 00 00 | 	byte	$00[16]
0a721     AA 50 00 01 
0a725     AC 60 00 00 
0a729     00 00 00 00 
0a72d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a731     00 00 00 00 
0a735     00 00 00 00 
0a739     00 00 00 00 
0a73d     00 00 00 00 | 	byte	$00[16]
0a741     B4 40 00 00 
0a745     D6 60 00 01 
0a749     E0 20 00 00 
0a74d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $01, $e0, $20, $00, $00, $00, $00, $00, $00
0a751     00 00 00 00 
0a755     00 00 00 00 
0a759     00 00 00 00 
0a75d     00 00 00 00 | 	byte	$00[16]
0a761     B4 30 00 01 
0a765     AC 60 00 00 
0a769     00 00 00 00 
0a76d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a771     00 00 00 00 
0a775     00 00 00 00 
0a779     00 00 00 00 
0a77d     00 00 00 00 | 	byte	$00[16]
0a781     B4 30 00 01 
0a785     FC 60 00 01 
0a789     FC 20 00 00 
0a78d     FE 70 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $fc, $20, $00, $00, $fe, $70, $00, $00
0a791     00 00 00 00 
0a795     00 00 00 00 
0a799     00 00 00 00 
0a79d     00 00 00 00 | 	byte	$00[16]
0a7a1     AA 50 00 01 
0a7a5     FC 60 00 00 
0a7a9     00 00 00 00 
0a7ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7b1     00 00 00 00 
0a7b5     00 00 00 00 
0a7b9     00 00 00 00 
0a7bd     00 00 00 00 | 	byte	$00[16]
0a7c1     B4 40 00 00 
0a7c5     00 00 00 00 
0a7c9     00 00 00 00 
0a7cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7d1     00 00 00 00 
0a7d5     00 00 00 00 
0a7d9     00 00 00 00 
0a7dd     00 00 00 00 | 	byte	$00[16]
0a7e1     B4 40 00 01 
0a7e5     FC 60 00 00 
0a7e9     00 00 00 00 
0a7ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7f1     00 00 00 00 
0a7f5     00 00 00 00 
0a7f9     00 00 00 00 
0a7fd     00 00 00 00 | 	byte	$00[16]
0a801     B4 30 00 00 
0a805     FE 60 00 00 
0a809     00 00 00 00 
0a80d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a811     00 00 00 00 
0a815     00 00 00 00 
0a819     00 00 00 00 
0a81d     00 00 00 00 | 	byte	$00[16]
0a821     AA 50 00 01 
0a825     FC 60 00 00 
0a829     00 00 00 00 
0a82d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a831     00 00 00 00 
0a835     00 00 00 00 
0a839     00 00 00 00 
0a83d     00 00 00 00 | 	byte	$00[16]
0a841     B4 40 00 00 
0a845     FE 60 00 00 
0a849     00 00 00 00 
0a84d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a851     00 00 00 00 
0a855     00 00 00 00 
0a859     00 00 00 00 
0a85d     00 00 00 00 | 	byte	$00[16]
0a861     B4 30 00 01 
0a865     FC 60 00 00 
0a869     00 00 00 00 
0a86d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a871     00 00 00 00 
0a875     00 00 00 00 
0a879     00 00 00 00 
0a87d     00 00 00 00 | 	byte	$00[16]
0a881     B4 30 00 01 
0a885     FC 60 00 01 
0a889     94 20 00 00 
0a88d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $94, $20, $00, $00, $00, $00, $00, $00
0a891     00 00 00 00 
0a895     00 00 00 00 
0a899     00 00 00 00 
0a89d     00 00 00 00 | 	byte	$00[16]
0a8a1     AA 50 00 01 
0a8a5     FC 60 00 00 
0a8a9     00 00 00 00 
0a8ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8b1     00 00 00 00 
0a8b5     00 00 00 00 
0a8b9     00 00 00 00 
0a8bd     00 00 00 00 | 	byte	$00[16]
0a8c1     B4 40 00 00 
0a8c5     00 00 00 00 
0a8c9     00 00 00 00 
0a8cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8d1     00 00 00 00 
0a8d5     00 00 00 00 
0a8d9     00 00 00 00 
0a8dd     00 00 00 00 | 	byte	$00[16]
0a8e1     B4 40 00 01 
0a8e5     FC 60 00 00 
0a8e9     00 00 00 00 
0a8ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8f1     00 00 00 00 
0a8f5     00 00 00 00 
0a8f9     00 00 00 00 
0a8fd     00 00 00 00 | 	byte	$00[16]
0a901     B4 30 00 00 
0a905     FE 60 00 00 
0a909     00 00 00 00 
0a90d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a911     00 00 00 00 
0a915     00 00 00 00 
0a919     00 00 00 00 
0a91d     00 00 00 00 | 	byte	$00[16]
0a921     AA 50 00 01 
0a925     FC 60 00 00 
0a929     00 00 00 00 
0a92d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a931     00 00 00 00 
0a935     00 00 00 00 
0a939     00 00 00 00 
0a93d     00 00 00 00 | 	byte	$00[16]
0a941     B4 40 00 00 
0a945     FE 60 00 00 
0a949     00 00 00 00 
0a94d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a951     00 00 00 00 
0a955     00 00 00 00 
0a959     00 00 00 00 
0a95d     00 00 00 00 | 	byte	$00[16]
0a961     B4 30 00 01 
0a965     FC 60 00 00 
0a969     00 00 00 00 
0a96d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a971     00 00 00 00 
0a975     00 00 00 00 
0a979     00 00 00 00 
0a97d     00 00 00 00 | 	byte	$00[16]
0a981     B4 30 00 01 
0a985     FC 60 00 01 
0a989     53 20 00 00 
0a98d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a991     00 00 00 00 
0a995     00 00 00 00 
0a999     00 00 00 00 
0a99d     00 00 00 00 | 	byte	$00[16]
0a9a1     AA 50 00 01 
0a9a5     FC 60 00 00 
0a9a9     00 00 00 00 
0a9ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9b1     00 00 00 00 
0a9b5     00 00 00 00 
0a9b9     00 00 00 00 
0a9bd     00 00 00 00 | 	byte	$00[16]
0a9c1     B4 40 00 00 
0a9c5     00 00 00 00 
0a9c9     00 00 00 00 
0a9cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9d1     00 00 00 00 
0a9d5     00 00 00 00 
0a9d9     00 00 00 00 
0a9dd     00 00 00 00 | 	byte	$00[16]
0a9e1     B4 40 00 01 
0a9e5     FC 60 00 00 
0a9e9     00 00 00 00 
0a9ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9f1     00 00 00 00 
0a9f5     00 00 00 00 
0a9f9     00 00 00 00 
0a9fd     00 00 00 00 | 	byte	$00[16]
0aa01     B4 30 00 00 
0aa05     FE 60 00 00 
0aa09     00 00 00 00 
0aa0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa11     00 00 00 00 
0aa15     00 00 00 00 
0aa19     00 00 00 00 
0aa1d     00 00 00 00 | 	byte	$00[16]
0aa21     AA 50 00 01 
0aa25     FC 60 00 00 
0aa29     00 00 00 00 
0aa2d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa31     00 00 00 00 
0aa35     00 00 00 00 
0aa39     00 00 00 00 
0aa3d     00 00 00 00 | 	byte	$00[16]
0aa41     B4 40 00 00 
0aa45     FE 60 00 00 
0aa49     00 00 00 00 
0aa4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa51     00 00 00 00 
0aa55     00 00 00 00 
0aa59     00 00 00 00 
0aa5d     00 00 00 00 | 	byte	$00[16]
0aa61     B4 30 00 01 
0aa65     FC 60 00 00 
0aa69     00 00 00 00 
0aa6d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa71     00 00 00 00 
0aa75     00 00 00 00 
0aa79     00 00 00 00 
0aa7d     00 00 00 00 | 	byte	$00[16]
0aa81     B4 30 00 01 
0aa85     FC 60 00 01 
0aa89     1D 20 00 00 
0aa8d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
0aa91     00 00 00 00 
0aa95     00 00 00 00 
0aa99     00 00 00 00 
0aa9d     00 00 00 00 | 	byte	$00[16]
0aaa1     AA 50 00 01 
0aaa5     FC 60 00 00 
0aaa9     00 00 00 00 
0aaad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aab1     00 00 00 00 
0aab5     00 00 00 00 
0aab9     00 00 00 00 
0aabd     00 00 00 00 | 	byte	$00[16]
0aac1     B4 4F 04 00 
0aac5     00 00 00 00 
0aac9     00 00 00 00 
0aacd     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aad1     00 00 00 00 
0aad5     00 00 00 00 
0aad9     00 00 00 00 
0aadd     00 00 00 00 | 	byte	$00[16]
0aae1     B4 40 00 01 
0aae5     FC 60 00 00 
0aae9     00 00 00 00 
0aaed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aaf1     00 00 00 00 
0aaf5     00 00 00 00 
0aaf9     00 00 00 00 
0aafd     00 00 00 00 | 	byte	$00[16]
0ab01     B4 30 00 00 
0ab05     FE 60 00 00 
0ab09     00 00 00 00 
0ab0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab11     00 00 00 00 
0ab15     00 00 00 00 
0ab19     00 00 00 00 
0ab1d     00 00 00 00 | 	byte	$00[16]
0ab21     AA 50 00 01 
0ab25     FC 60 00 00 
0ab29     00 00 00 00 
0ab2d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab31     00 00 00 00 
0ab35     00 00 00 00 
0ab39     00 00 00 00 
0ab3d     00 00 00 00 | 	byte	$00[16]
0ab41     B4 40 00 00 
0ab45     FE 60 00 00 
0ab49     00 00 00 00 
0ab4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab51     00 00 00 00 
0ab55     00 00 00 00 
0ab59     00 00 00 00 
0ab5d     00 00 00 00 | 	byte	$00[16]
0ab61     B4 30 00 01 
0ab65     FC 60 00 00 
0ab69     00 00 00 00 
0ab6d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab71     00 00 00 00 
0ab75     00 00 00 00 
0ab79     00 00 00 00 
0ab7d     00 00 00 00 | 	byte	$00[16]
0ab81     B4 30 00 01 
0ab85     FC 60 00 00 
0ab89     FE 20 00 00 
0ab8d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
0ab91     00 00 00 00 
0ab95     00 00 00 00 
0ab99     00 00 00 00 
0ab9d     00 00 00 00 | 	byte	$00[16]
0aba1     AA 50 00 01 
0aba5     FC 60 00 00 
0aba9     00 00 00 00 
0abad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abb1     00 00 00 00 
0abb5     00 00 00 00 
0abb9     00 00 00 00 
0abbd     00 00 00 00 | 	byte	$00[16]
0abc1     B4 40 00 00 
0abc5     00 00 00 00 
0abc9     00 00 00 00 
0abcd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abd1     00 00 00 00 
0abd5     00 00 00 00 
0abd9     00 00 00 00 
0abdd     00 00 00 00 | 	byte	$00[16]
0abe1     B4 40 00 01 
0abe5     FC 60 00 00 
0abe9     00 00 00 00 
0abed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abf1     00 00 00 00 
0abf5     00 00 00 00 
0abf9     00 00 00 00 
0abfd     00 00 00 00 | 	byte	$00[16]
0ac01     B4 30 00 00 
0ac05     FE 60 00 00 
0ac09     00 00 00 00 
0ac0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac11     00 00 00 00 
0ac15     00 00 00 00 
0ac19     00 00 00 00 
0ac1d     00 00 00 00 | 	byte	$00[16]
0ac21     AA 50 00 01 
0ac25     FC 60 00 00 
0ac29     00 00 00 00 
0ac2d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac31     00 00 00 00 
0ac35     00 00 00 00 
0ac39     00 00 00 00 
0ac3d     00 00 00 00 | 	byte	$00[16]
0ac41     B4 40 00 00 
0ac45     FE 60 00 00 
0ac49     00 00 00 00 
0ac4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac51     00 00 00 00 
0ac55     00 00 00 00 
0ac59     00 00 00 00 
0ac5d     00 00 00 00 | 	byte	$00[16]
0ac61     B4 30 00 01 
0ac65     FC 60 00 00 
0ac69     00 00 00 00 
0ac6d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac71     00 00 00 00 
0ac75     00 00 00 00 
0ac79     00 00 00 00 
0ac7d     00 00 00 00 | 	byte	$00[16]
0ac81     B4 30 00 01 
0ac85     FC 60 00 00 
0ac89     D6 10 00 00 
0ac8d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00
0ac91     00 00 00 00 
0ac95     00 00 00 00 | 	byte	$00[8]
0ac99     D6 10 00 00 
0ac9d     00 00 00 00 
0aca1     AA 50 00 01 
0aca5     FC 60 00 00 | 	byte	$d6, $10, $00, $00, $00, $00, $00, $00, $aa, $50, $00, $01, $fc, $60, $00, $00
0aca9     E2 10 00 00 
0acad     00 00 00 00 
0acb1     00 00 00 00 
0acb5     00 00 00 00 | 	byte	$e2, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0acb9     E2 10 00 00 
0acbd     00 00 00 00 
0acc1     B4 40 00 00 
0acc5     00 00 00 00 | 	byte	$e2, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $00, $00, $00, $00
0acc9     FE 10 00 00 
0accd     00 00 00 00 
0acd1     00 00 00 00 
0acd5     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0acd9     FE 10 00 00 
0acdd     00 00 00 00 
0ace1     B4 40 00 01 
0ace5     FC 60 00 01 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $01, $fc, $60, $00, $01
0ace9     1D 10 00 00 
0aced     00 00 00 00 
0acf1     00 00 00 00 
0acf5     00 00 00 01 | 	byte	$1d, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0acf9     1D 10 00 00 
0acfd     00 00 00 00 
0ad01     B4 30 00 00 
0ad05     FE 60 00 01 | 	byte	$1d, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $00, $fe, $60, $00, $01
0ad09     40 10 00 00 
0ad0d     00 00 00 00 
0ad11     00 00 00 00 
0ad15     00 00 00 01 | 	byte	$40, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ad19     40 10 00 00 
0ad1d     00 00 00 00 
0ad21     AA 50 00 01 
0ad25     FC 60 00 01 | 	byte	$40, $10, $00, $00, $00, $00, $00, $00, $aa, $50, $00, $01, $fc, $60, $00, $01
0ad29     53 10 00 00 
0ad2d     00 00 00 00 
0ad31     00 00 00 00 
0ad35     00 00 00 01 | 	byte	$53, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ad39     53 10 00 00 
0ad3d     00 00 00 00 
0ad41     B4 40 00 00 
0ad45     FE 60 00 01 | 	byte	$53, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $fe, $60, $00, $01
0ad49     53 10 00 00 
0ad4d     00 00 00 00 
0ad51     00 00 00 00 
0ad55     00 00 00 01 | 	byte	$53, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ad59     7D 10 00 00 
0ad5d     00 00 00 00 
0ad61     B4 30 00 01 
0ad65     FC 60 00 01 | 	byte	$7d, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $01, $fc, $60, $00, $01
0ad69     7D 10 00 00 
0ad6d     00 00 00 00 
0ad71     00 00 00 00 
0ad75     00 00 00 01 | 	byte	$7d, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ad79     AC 10 00 00 
0ad7d     00 00 00 00 
0ad81     B4 30 00 01 
0ad85     FC 60 00 01 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $01, $fc, $60, $00, $01
0ad89     AC 10 00 00 
0ad8d     00 00 00 00 
0ad91     00 00 00 00 
0ad95     00 00 00 01 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ad99     C5 10 00 00 
0ad9d     00 00 00 00 
0ada1     AA 50 00 01 
0ada5     FC 60 00 01 | 	byte	$c5, $10, $00, $00, $00, $00, $00, $00, $aa, $50, $00, $01, $fc, $60, $00, $01
0ada9     C5 10 00 00 
0adad     00 00 00 00 
0adb1     00 00 00 00 
0adb5     00 00 00 01 | 	byte	$c5, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0adb9     FC 10 00 00 
0adbd     00 00 00 00 
0adc1     B4 40 00 00 
0adc5     00 00 00 01 | 	byte	$fc, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $00, $00, $00, $01
0adc9     FC 10 00 00 
0adcd     00 00 00 00 
0add1     00 00 00 00 
0add5     00 00 00 02 | 	byte	$fc, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02
0add9     3A 10 00 00 
0addd     00 00 00 00 
0ade1     B4 40 00 01 
0ade5     FC 60 00 02 | 	byte	$3a, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $01, $fc, $60, $00, $02
0ade9     3A 10 00 00 
0aded     00 00 00 00 
0adf1     00 00 00 00 
0adf5     00 00 00 02 | 	byte	$3a, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02
0adf9     80 10 00 00 
0adfd     00 00 00 00 
0ae01     B4 30 00 00 
0ae05     FE 60 00 02 | 	byte	$80, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $00, $fe, $60, $00, $02
0ae09     80 10 00 00 
0ae0d     00 00 00 00 
0ae11     00 00 00 00 
0ae15     00 00 00 02 | 	byte	$80, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02
0ae19     A6 10 00 00 
0ae1d     00 00 00 00 
0ae21     AA 50 00 01 
0ae25     FC 60 00 02 | 	byte	$a6, $10, $00, $00, $00, $00, $00, $00, $aa, $50, $00, $01, $fc, $60, $00, $02
0ae29     A6 10 00 00 
0ae2d     00 00 00 00 
0ae31     00 00 00 00 
0ae35     00 00 00 02 | 	byte	$a6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02
0ae39     FA 10 00 00 
0ae3d     00 00 00 00 
0ae41     B4 40 00 00 
0ae45     FE 60 00 02 | 	byte	$fa, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $fe, $60, $00, $02
0ae49     FA 10 00 00 
0ae4d     00 00 00 00 
0ae51     00 00 00 00 
0ae55     00 00 00 02 | 	byte	$fa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02
0ae59     FA 10 00 00 
0ae5d     00 00 00 00 
0ae61     B4 30 00 01 
0ae65     FC 60 00 02 | 	byte	$fa, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $01, $fc, $60, $00, $02
0ae69     FA 10 00 00 
0ae6d     00 00 00 00 
0ae71     00 00 00 00 
0ae75     00 00 00 03 | 	byte	$fa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03
0ae79     58 10 00 00 
0ae7d     00 00 00 00 
0ae81     B4 30 00 01 
0ae85     FC 60 00 03 | 	byte	$58, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $01, $fc, $60, $00, $03
0ae89     58 10 00 00 
0ae8d     00 00 00 00 
0ae91     00 00 00 00 
0ae95     00 00 00 03 | 	byte	$58, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03
0ae99     58 10 00 00 
0ae9d     00 00 00 00 
0aea1     AA 50 00 01 
0aea5     FC 60 00 03 | 	byte	$58, $10, $00, $00, $00, $00, $00, $00, $aa, $50, $00, $01, $fc, $60, $00, $03
0aea9     58 10 00 00 
0aead     00 00 00 00 
0aeb1     00 00 00 00 
0aeb5     00 00 00 03 | 	byte	$58, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03
0aeb9     58 10 00 00 
0aebd     00 00 00 00 
0aec1     B4 4F 04 00 
0aec5     00 00 00 00 | 	byte	$58, $10, $00, $00, $00, $00, $00, $00, $b4, $4f, $04, $00, $00, $00, $00, $00
0aec9     00 00 00 00 
0aecd     00 00 00 00 
0aed1     00 00 00 00 
0aed5     00 00 00 00 
0aed9     00 00 00 00 
0aedd     00 00 00 00 | 	byte	$00[24]
0aee1     B4 40 00 01 
0aee5     FC 60 00 00 
0aee9     00 00 00 00 
0aeed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aef1     00 00 00 00 
0aef5     00 00 00 00 
0aef9     00 00 00 00 
0aefd     00 00 00 00 | 	byte	$00[16]
0af01     B4 30 00 00 
0af05     FE 60 00 00 
0af09     00 00 00 00 
0af0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af11     00 00 00 00 
0af15     00 00 00 00 
0af19     00 00 00 00 
0af1d     00 00 00 00 | 	byte	$00[16]
0af21     AA 50 00 01 
0af25     FC 60 00 00 
0af29     00 00 00 00 
0af2d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af31     00 00 00 00 
0af35     00 00 00 00 
0af39     00 00 00 00 
0af3d     00 00 00 00 | 	byte	$00[16]
0af41     B4 40 00 00 
0af45     FE 60 00 00 
0af49     00 00 00 00 
0af4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af51     00 00 00 00 
0af55     00 00 00 00 
0af59     00 00 00 00 
0af5d     00 00 00 00 | 	byte	$00[16]
0af61     B4 30 00 01 
0af65     FC 60 00 00 
0af69     00 00 00 00 
0af6d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af71     00 00 00 00 
0af75     00 00 00 00 
0af79     00 00 00 00 
0af7d     00 00 00 00 | 	byte	$00[16]
0af81     B4 30 00 01 
0af85     7D 60 00 01 
0af89     7D 20 00 01 
0af8d     7D 70 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $01, $7d, $20, $00, $01, $7d, $70, $00, $00
0af91     00 00 00 00 
0af95     00 00 00 00 
0af99     00 00 00 00 
0af9d     00 00 00 00 | 	byte	$00[16]
0afa1     AA 50 00 01 
0afa5     7D 60 00 00 
0afa9     00 00 00 00 
0afad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afb1     00 00 00 00 
0afb5     00          | 	byte	$00[5]
0afb6     0D 00 00 00 
0afba     00 00 00 00 
0afbe     00 00 00 B4 
0afc2     40 00 00 00 | 	byte	$0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $00
0afc6     00 00 00 00 
0afca     00 00 00 00 
0afce     00 00 00 00 
0afd2     00 00 00 00 
0afd6     00 00 00 00 
0afda     00 00 00 00 
0afde     00 00 00    | 	byte	$00[27]
0afe1     B4 40 00 01 
0afe5     FC 60 00 00 
0afe9     00 00 00 00 
0afed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aff1     00 00 00 00 
0aff5     00 00 00 00 
0aff9     00 00 00 00 
0affd     00 00 00 00 | 	byte	$00[16]
0b001     B4 30 00 00 
0b005     FE 60 00 00 
0b009     00 00 00 00 
0b00d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b011     00 00 00 00 
0b015     00 00 00 00 
0b019     00 00 00 00 
0b01d     00 00 00 00 | 	byte	$00[16]
0b021     AA 50 00 01 
0b025     FC 60 00 00 
0b029     00 00 00 00 
0b02d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b031     00 00 00 00 
0b035     00 00 00 00 
0b039     00 00 00 00 
0b03d     00 00 00 00 | 	byte	$00[16]
0b041     B4 40 00 00 
0b045     FE 60 00 00 
0b049     00 00 00 00 
0b04d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b051     00 00 00 00 
0b055     00 00 00 00 
0b059     00 00 00 00 
0b05d     00 00 00 00 | 	byte	$00[16]
0b061     B4 30 00 01 
0b065     FC 60 00 00 
0b069     00 00 00 00 
0b06d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b071     00 00 00 00 
0b075     00 00 00 00 
0b079     00 00 00 00 
0b07d     00 00 00 00 | 	byte	$00[16]
0b081     B4 30 00 01 
0b085     7D 60 00 01 
0b089     7D 20 00 00 
0b08d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0b091     00 00 00 00 
0b095     00 00 00 00 
0b099     00 00 00 00 
0b09d     00 00 00 00 | 	byte	$00[16]
0b0a1     AA 50 00 01 
0b0a5     7D 60 00 00 
0b0a9     00 00 00 00 
0b0ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0b1     00 00 00 00 
0b0b5     00          | 	byte	$00[5]
0b0b6     0D 00 00 00 
0b0ba     00 00 00 00 
0b0be     00 00 00 B4 
0b0c2     40 00 00 00 | 	byte	$0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $00
0b0c6     00 00 00 00 
0b0ca     00 00 00 00 
0b0ce     00 00 00 00 
0b0d2     00 00 00 00 
0b0d6     00 00 00 00 
0b0da     00 00 00 00 
0b0de     00 00 00    | 	byte	$00[27]
0b0e1     B4 40 00 01 
0b0e5     FC 60 00 00 
0b0e9     00 00 00 00 
0b0ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0f1     00 00 00 00 
0b0f5     00 00 00 00 
0b0f9     00 00 00 00 
0b0fd     00 00 00 00 | 	byte	$00[16]
0b101     B4 30 00 00 
0b105     FE 60 00 00 
0b109     00 00 00 00 
0b10d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b111     00 00 00 00 
0b115     00 00 00 00 
0b119     00 00 00 00 
0b11d     00 00 00 00 | 	byte	$00[16]
0b121     AA 50 00 01 
0b125     FC 60 00 00 
0b129     00 00 00 00 
0b12d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b131     00 00 00 00 
0b135     00 00 00 00 
0b139     00 00 00 00 
0b13d     00 00 00 00 | 	byte	$00[16]
0b141     B4 40 00 00 
0b145     FE 60 00 00 
0b149     00 00 00 00 
0b14d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b151     00 00 00 00 
0b155     00 00 00 00 
0b159     00 00 00 00 
0b15d     00 00 00 00 | 	byte	$00[16]
0b161     B4 30 00 01 
0b165     FC 60 00 00 
0b169     00 00 00 00 
0b16d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b171     00 00 00 00 
0b175     00 00 00 00 
0b179     00 00 00 00 
0b17d     00 00 00 00 | 	byte	$00[16]
0b181     B4 30 00 01 
0b185     FC 60 00 00 
0b189     00 00 00 00 
0b18d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b191     00 00 00 00 
0b195     00 00 00 00 
0b199     00 00 00 00 
0b19d     00 00 00 00 | 	byte	$00[16]
0b1a1     AA 50 00 01 
0b1a5     FC 60 00 00 
0b1a9     00 00 00 00 
0b1ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1b1     00 00 00 00 
0b1b5     00 00 00 00 
0b1b9     00 00 00 00 
0b1bd     00 00 00 00 | 	byte	$00[16]
0b1c1     B4 40 00 00 
0b1c5     00 00 00 00 
0b1c9     00 00 00 00 
0b1cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1d1     00 00 00 00 
0b1d5     00 00 00 00 
0b1d9     00 00 00 00 
0b1dd     00 00 00 00 | 	byte	$00[16]
0b1e1     B4 40 00 01 
0b1e5     FC 60 00 00 
0b1e9     00 00 00 00 
0b1ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1f1     00 00 00 00 
0b1f5     00 00 00 00 
0b1f9     00 00 00 00 
0b1fd     00 00 00 00 | 	byte	$00[16]
0b201     B4 30 00 00 
0b205     FE 60 00 00 
0b209     00 00 00 00 
0b20d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b211     00 00 00 00 
0b215     00 00 00 00 
0b219     00 00 00 00 
0b21d     00 00 00 00 | 	byte	$00[16]
0b221     AA 50 00 01 
0b225     FC 60 00 00 
0b229     00 00 00 00 
0b22d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b231     00 00 00 00 
0b235     00 00 00 00 
0b239     00 00 00 00 
0b23d     00 00 00 00 | 	byte	$00[16]
0b241     B4 40 00 00 
0b245     FE 60 00 00 
0b249     00 00 00 00 
0b24d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b251     00 00 00 00 
0b255     00 00 00 00 
0b259     00 00 00 00 
0b25d     00 00 00 00 | 	byte	$00[16]
0b261     B4 30 00 01 
0b265     FC 60 00 00 
0b269     00 00 00 00 
0b26d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b271     00 00 00 00 
0b275     00 00 00 00 
0b279     00 00 00 00 
0b27d     00 00 00 00 | 	byte	$00[16]
0b281     B4 30 00 01 
0b285     FC 60 00 00 
0b289     00 00 00 00 
0b28d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b291     00 00 00 00 
0b295     00 00 00 00 
0b299     00 00 00 00 
0b29d     00 00 00 00 | 	byte	$00[16]
0b2a1     AA 50 00 01 
0b2a5     FC 60 00 00 
0b2a9     00 00 00 00 
0b2ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b2b1     00 00 00 00 
0b2b5     00 00 00 00 
0b2b9     00 00 00 00 
0b2bd     00 00 00 00 | 	byte	$00[16]
0b2c1     B4 4F 04 00 
0b2c5     00 00 00 00 
0b2c9     FE 20 00 00 
0b2cd     BE 20 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b2d1     00 00 00 00 
0b2d5     00 00 00 00 
0b2d9     00 00 00 00 
0b2dd     00 00 00 00 | 	byte	$00[16]
0b2e1     B4 40 00 01 
0b2e5     7D 60 00 00 
0b2e9     FE 20 00 00 
0b2ed     BE 20 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b2f1     00 00 00 00 
0b2f5     00 00 00 00 
0b2f9     00 00 00 00 
0b2fd     00 00 00 00 | 	byte	$00[16]
0b301     B4 30 00 00 
0b305     BE 60 00 00 
0b309     FE 20 00 00 
0b30d     BE 20 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b311     00 00 00 00 
0b315     00 00 00 00 
0b319     00 00 00 00 
0b31d     00 00 00 00 | 	byte	$00[16]
0b321     AA 50 00 01 
0b325     7D 60 00 00 
0b329     FE 20 00 00 
0b32d     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b331     00 00 00 00 
0b335     00 00 00 00 
0b339     00 00 00 00 
0b33d     00 00 00 00 | 	byte	$00[16]
0b341     B4 40 00 00 
0b345     BE 60 00 00 
0b349     00 00 00 00 
0b34d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b351     00 00 00 00 
0b355     00 00 00 00 
0b359     00 00 00 00 
0b35d     00 00 00 00 | 	byte	$00[16]
0b361     B4 30 00 01 
0b365     7D 60 00 00 
0b369     00 00 00 00 
0b36d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b371     00 00 00 00 
0b375     00 00 00 00 
0b379     00 00 00 00 
0b37d     00 00 00 00 | 	byte	$00[16]
0b381     B4 30 00 01 
0b385     7D 60 00 00 
0b389     FE 20 00 00 
0b38d     BE 20 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b391     00 00 00 00 
0b395     00 00 00 00 
0b399     00 00 00 00 
0b39d     00 00 00 00 | 	byte	$00[16]
0b3a1     AA 50 00 01 
0b3a5     7D 60 00 00 
0b3a9     FE 20 00 00 
0b3ad     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b3b1     00 00 00 00 
0b3b5     00 00 00 00 
0b3b9     00 00 00 00 
0b3bd     00 00 00 00 | 	byte	$00[16]
0b3c1     B4 40 00 00 
0b3c5     00 00 00 00 
0b3c9     FE 20 00 00 
0b3cd     BE 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b3d1     00 00 00 00 
0b3d5     00 00 00 00 
0b3d9     00 00 00 00 
0b3dd     00 00 00 00 | 	byte	$00[16]
0b3e1     B4 40 00 01 
0b3e5     7D 60 00 00 
0b3e9     FE 20 00 00 
0b3ed     BE 20 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b3f1     00 00 00 00 
0b3f5     00 00 00 00 
0b3f9     00 00 00 00 
0b3fd     00 00 00 00 | 	byte	$00[16]
0b401     B4 30 00 00 
0b405     BE 60 00 00 
0b409     00 00 00 00 
0b40d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b411     00 00 00 00 
0b415     00 00 00 00 
0b419     00 00 00 00 
0b41d     00 00 00 00 | 	byte	$00[16]
0b421     AA 50 00 01 
0b425     7D 60 00 00 
0b429     FE 20 00 00 
0b42d     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b431     00 00 00 00 
0b435     00 00 00 00 
0b439     00 00 00 00 
0b43d     00 00 00 00 | 	byte	$00[16]
0b441     B4 40 00 00 
0b445     BE 60 00 00 
0b449     00 00 00 00 
0b44d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b451     00 00 00 00 
0b455     00 00 00 00 
0b459     00 00 00 00 
0b45d     00 00 00 00 | 	byte	$00[16]
0b461     B4 30 00 01 
0b465     7D 60 00 00 
0b469     00 00 00 00 
0b46d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b471     00 00 00 00 
0b475     00 00 00 00 
0b479     00 00 00 00 
0b47d     00 00 00 00 | 	byte	$00[16]
0b481     B4 30 00 01 
0b485     7D 60 00 00 
0b489     00 00 00 00 
0b48d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b491     00 00 00 00 
0b495     00 00 00 00 
0b499     00 00 00 00 
0b49d     00 00 00 00 | 	byte	$00[16]
0b4a1     AA 50 00 01 
0b4a5     7D 60 00 00 
0b4a9     00 00 00 00 
0b4ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4b1     00 00 00 00 
0b4b5     00 00 00 00 
0b4b9     00 00 00 00 
0b4bd     00 00 00 00 | 	byte	$00[16]
0b4c1     B4 40 00 00 
0b4c5     00 00 00 00 
0b4c9     FE 20 00 00 
0b4cd     BE 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b4d1     00 00 00 00 
0b4d5     00 00 00 00 
0b4d9     00 00 00 00 
0b4dd     00 00 00 00 | 	byte	$00[16]
0b4e1     B4 40 00 01 
0b4e5     7D 60 00 00 
0b4e9     FE 20 00 00 
0b4ed     BE 20 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b4f1     00 00 00 00 
0b4f5     00 00 00 00 
0b4f9     00 00 00 00 
0b4fd     00 00 00 00 | 	byte	$00[16]
0b501     B4 30 00 00 
0b505     BE 60 00 00 
0b509     FE 20 00 00 
0b50d     BE 20 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b511     00 00 00 00 
0b515     00 00 00 00 
0b519     00 00 00 00 
0b51d     00 00 00 00 | 	byte	$00[16]
0b521     AA 50 00 01 
0b525     7D 60 00 00 
0b529     FE 20 00 00 
0b52d     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b531     00 00 00 00 
0b535     00 00 00 00 
0b539     00 00 00 00 
0b53d     00 00 00 00 | 	byte	$00[16]
0b541     B4 40 00 00 
0b545     BE 60 00 00 
0b549     00 00 00 00 
0b54d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b551     00 00 00 00 
0b555     00 00 00 00 
0b559     00 00 00 00 
0b55d     00 00 00 00 | 	byte	$00[16]
0b561     B4 30 00 01 
0b565     7D 60 00 00 
0b569     00 00 00 00 
0b56d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b571     00 00 00 00 
0b575     00 00 00 00 
0b579     00 00 00 00 
0b57d     00 00 00 00 | 	byte	$00[16]
0b581     B4 30 00 01 
0b585     7D 60 00 00 
0b589     FE 20 00 00 
0b58d     BE 20 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b591     00 00 00 00 
0b595     00 00 00 00 
0b599     00 00 00 00 
0b59d     00 00 00 00 | 	byte	$00[16]
0b5a1     AA 50 00 01 
0b5a5     7D 60 00 00 
0b5a9     FE 20 00 00 
0b5ad     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b5b1     00 00 00 00 
0b5b5     00 00 00 00 
0b5b9     00 00 00 00 
0b5bd     00 00 00 00 | 	byte	$00[16]
0b5c1     B4 40 00 00 
0b5c5     00 00 00 00 
0b5c9     FE 20 00 00 
0b5cd     BE 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b5d1     00 00 00 00 
0b5d5     00 00 00 00 
0b5d9     00 00 00 00 
0b5dd     00 00 00 00 | 	byte	$00[16]
0b5e1     B4 40 00 01 
0b5e5     7D 60 00 00 
0b5e9     FE 20 00 00 
0b5ed     BE 20 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b5f1     00 00 00 00 
0b5f5     00 00 00 00 
0b5f9     00 00 00 00 
0b5fd     00 00 00 00 | 	byte	$00[16]
0b601     B4 30 00 00 
0b605     BE 60 00 00 
0b609     00 00 00 00 
0b60d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b611     00 00 00 00 
0b615     00 00 00 00 
0b619     00 00 00 00 
0b61d     00 00 00 00 | 	byte	$00[16]
0b621     AA 50 00 01 
0b625     7D 60 00 00 
0b629     FE 20 00 00 
0b62d     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b631     00 00 00 00 
0b635     00 00 00 00 
0b639     00 00 00 00 
0b63d     00 00 00 00 | 	byte	$00[16]
0b641     B4 40 00 00 
0b645     BE 60 00 00 
0b649     00 00 00 00 
0b64d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b651     00 00 00 00 
0b655     00 00 00 00 
0b659     00 00 00 00 
0b65d     00 00 00 00 | 	byte	$00[16]
0b661     B4 30 00 01 
0b665     7D 60 00 00 
0b669     FE 20 00 00 
0b66d     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0b671     00 00 00 00 
0b675     00 00 00 00 
0b679     00 00 00 00 
0b67d     00 00 00 00 | 	byte	$00[16]
0b681     B4 30 00 01 
0b685     FC 60 00 00 
0b689     00 00 00 00 
0b68d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b691     00 00 00 00 
0b695     00 00 00 00 
0b699     00 00 00 00 
0b69d     00 00 00 00 | 	byte	$00[16]
0b6a1     AA 50 00 01 
0b6a5     FC 60 00 01 
0b6a9     53 20 00 00 
0b6ad     FE 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $01, $53, $20, $00, $00, $fe, $20, $00, $00
0b6b1     00 00 00 00 
0b6b5     00 00 00 00 
0b6b9     00 00 00 00 
0b6bd     00 00 00 00 | 	byte	$00[16]
0b6c1     B4 4F 04 00 
0b6c5     00 00 00 00 
0b6c9     00 00 00 00 
0b6cd     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6d1     00 00 00 00 
0b6d5     00 00 00 00 
0b6d9     00 00 00 00 
0b6dd     00 00 00 00 | 	byte	$00[16]
0b6e1     B4 40 00 01 
0b6e5     FC 60 00 00 
0b6e9     00 00 00 00 
0b6ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6f1     00 00 00 00 
0b6f5     00 00 00 00 
0b6f9     00 00 00 00 
0b6fd     00 00 00 00 | 	byte	$00[16]
0b701     B4 30 00 00 
0b705     FE 60 00 00 
0b709     00 00 00 00 
0b70d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b711     00 00 00 00 
0b715     00 00 00 00 
0b719     00 00 00 00 
0b71d     00 00 00 00 | 	byte	$00[16]
0b721     AA 50 00 01 
0b725     FC 60 00 00 
0b729     00 00 00 00 
0b72d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b731     00 00 00 00 
0b735     00 00 00 00 
0b739     00 00 00 00 
0b73d     00 00 00 00 | 	byte	$00[16]
0b741     B4 40 00 00 
0b745     FE 60 00 00 
0b749     00 00 00 00 
0b74d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b751     00 00 00 00 
0b755     00 00 00 00 
0b759     00 00 00 00 
0b75d     00 00 00 00 | 	byte	$00[16]
0b761     B4 30 00 01 
0b765     FC 60 00 00 
0b769     00 00 00 00 
0b76d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b771     00 00 00 00 
0b775     00 00 00 00 
0b779     00 00 00 00 
0b77d     00 00 00 00 | 	byte	$00[16]
0b781     B4 30 00 01 
0b785     FC 60 00 00 
0b789     FE 20 00 00 
0b78d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
0b791     00 00 00 00 
0b795     00 00 00 00 
0b799     00 00 00 00 
0b79d     00 00 00 00 | 	byte	$00[16]
0b7a1     AA 50 00 01 
0b7a5     FC 60 00 00 
0b7a9     00 00 00 00 
0b7ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7b1     00 00 00 00 
0b7b5     00 00 00 00 
0b7b9     00 00 00 00 
0b7bd     00 00 00 00 | 	byte	$00[16]
0b7c1     B4 40 00 00 
0b7c5     00 00 00 00 
0b7c9     00 00 00 00 
0b7cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7d1     00 00 00 00 
0b7d5     00 00 00 00 
0b7d9     00 00 00 00 
0b7dd     00 00 00 00 | 	byte	$00[16]
0b7e1     B4 40 00 01 
0b7e5     FC 60 00 00 
0b7e9     00 00 00 00 
0b7ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7f1     00 00 00 00 
0b7f5     00 00 00 00 
0b7f9     00 00 00 00 
0b7fd     00 00 00 00 | 	byte	$00[16]
0b801     B4 30 00 00 
0b805     FE 60 00 00 
0b809     00 00 00 00 
0b80d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b811     00 00 00 00 
0b815     00 00 00 00 
0b819     00 00 00 00 
0b81d     00 00 00 00 | 	byte	$00[16]
0b821     AA 50 00 01 
0b825     FC 60 00 00 
0b829     00 00 00 00 
0b82d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b831     00 00 00 00 
0b835     00 00 00 00 
0b839     00 00 00 00 
0b83d     00 00 00 00 | 	byte	$00[16]
0b841     B4 40 00 00 
0b845     FE 60 00 00 
0b849     00 00 00 00 
0b84d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b851     00 00 00 00 
0b855     00 00 00 00 
0b859     00 00 00 00 
0b85d     00 00 00 00 | 	byte	$00[16]
0b861     B4 30 00 01 
0b865     FC 60 00 00 
0b869     00 00 00 00 
0b86d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b871     00 00 00 00 
0b875     00 00 00 00 
0b879     00 00 00 00 
0b87d     00 00 00 00 | 	byte	$00[16]
0b881     B4 30 00 01 
0b885     FC 60 00 00 
0b889     CA 20 00 00 
0b88d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $ca, $20, $00, $00, $00, $00, $00, $00
0b891     00 00 00 00 
0b895     00 00 00 00 
0b899     00 00 00 00 
0b89d     00 00 00 00 | 	byte	$00[16]
0b8a1     AA 50 00 01 
0b8a5     FC 60 00 00 
0b8a9     00 00 00 00 
0b8ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8b1     00 00 00 00 
0b8b5     00 00 00 00 
0b8b9     00 00 00 00 
0b8bd     00 00 00 00 | 	byte	$00[16]
0b8c1     B4 40 00 00 
0b8c5     00 00 00 00 
0b8c9     00 00 00 00 
0b8cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8d1     00 00 00 00 
0b8d5     00 00 00 00 
0b8d9     00 00 00 00 
0b8dd     00 00 00 00 | 	byte	$00[16]
0b8e1     B4 40 00 01 
0b8e5     FC 60 00 00 
0b8e9     00 00 00 00 
0b8ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8f1     00 00 00 00 
0b8f5     00 00 00 00 
0b8f9     00 00 00 00 
0b8fd     00 00 00 00 | 	byte	$00[16]
0b901     B4 30 00 00 
0b905     FE 60 00 00 
0b909     00 00 00 00 
0b90d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b911     00 00 00 00 
0b915     00 00 00 00 
0b919     00 00 00 00 
0b91d     00 00 00 00 | 	byte	$00[16]
0b921     AA 50 00 01 
0b925     FC 60 00 00 
0b929     00 00 00 00 
0b92d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b931     00 00 00 00 
0b935     00 00 00 00 
0b939     00 00 00 00 
0b93d     00 00 00 00 | 	byte	$00[16]
0b941     B4 40 00 00 
0b945     FE 60 00 00 
0b949     00 00 00 00 
0b94d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b951     00 00 00 00 
0b955     00 00 00 00 
0b959     00 00 00 00 
0b95d     00 00 00 00 | 	byte	$00[16]
0b961     B4 30 00 01 
0b965     FC 60 00 00 
0b969     00 00 00 00 
0b96d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b971     00 00 00 00 
0b975     00 00 00 00 
0b979     00 00 00 00 
0b97d     00 00 00 00 | 	byte	$00[16]
0b981     B4 30 00 01 
0b985     FC 60 00 00 
0b989     AA 20 00 00 
0b98d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $aa, $20, $00, $00, $00, $00, $00, $00
0b991     00 00 00 00 
0b995     00 00 00 00 
0b999     00 00 00 00 
0b99d     00 00 00 00 | 	byte	$00[16]
0b9a1     AA 50 00 01 
0b9a5     FC 60 00 00 
0b9a9     00 00 00 00 
0b9ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9b1     00 00 00 00 
0b9b5     00 00 00 00 
0b9b9     00 00 00 00 
0b9bd     00 00 00 00 | 	byte	$00[16]
0b9c1     B4 40 00 00 
0b9c5     00 00 00 00 
0b9c9     00 00 00 00 
0b9cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9d1     00 00 00 00 
0b9d5     00 00 00 00 
0b9d9     00 00 00 00 
0b9dd     00 00 00 00 | 	byte	$00[16]
0b9e1     B4 40 00 01 
0b9e5     FC 60 00 00 
0b9e9     00 00 00 00 
0b9ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9f1     00 00 00 00 
0b9f5     00 00 00 00 
0b9f9     00 00 00 00 
0b9fd     00 00 00 00 | 	byte	$00[16]
0ba01     B4 30 00 00 
0ba05     FE 60 00 00 
0ba09     00 00 00 00 
0ba0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba11     00 00 00 00 
0ba15     00 00 00 00 
0ba19     00 00 00 00 
0ba1d     00 00 00 00 | 	byte	$00[16]
0ba21     AA 50 00 01 
0ba25     FC 60 00 00 
0ba29     00 00 00 00 
0ba2d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba31     00 00 00 00 
0ba35     00 00 00 00 
0ba39     00 00 00 00 
0ba3d     00 00 00 00 | 	byte	$00[16]
0ba41     B4 40 00 00 
0ba45     FE 60 00 00 
0ba49     00 00 00 00 
0ba4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba51     00 00 00 00 
0ba55     00 00 00 00 
0ba59     00 00 00 00 
0ba5d     00 00 00 00 | 	byte	$00[16]
0ba61     B4 30 00 01 
0ba65     FC 60 00 00 
0ba69     00 00 00 00 
0ba6d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba71     00 00 00 00 
0ba75     00 00 00 00 
0ba79     00 00 00 00 
0ba7d     00 00 00 00 | 	byte	$00[16]
0ba81     B4 30 00 01 
0ba85     FC 60 00 00 
0ba89     00 00 00 00 
0ba8d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba91     00 00 00 00 
0ba95     00 00 00 00 
0ba99     00 00 00 00 
0ba9d     00 00 00 00 | 	byte	$00[16]
0baa1     AA 50 00 01 
0baa5     FC 60 00 00 
0baa9     00 00 00 00 
0baad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bab1     00 00 00 00 
0bab5     00 00 00 00 
0bab9     00 00 00 00 
0babd     00 00 00 00 | 	byte	$00[16]
0bac1     B4 4F 04 00 
0bac5     00 00 00 01 
0bac9     53 20 00 00 
0bacd     FE 20 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $01, $53, $20, $00, $00, $fe, $20, $00, $00
0bad1     00 00 00 00 
0bad5     00 00 00 00 
0bad9     00 00 00 00 
0badd     00 00 00 00 | 	byte	$00[16]
0bae1     B4 40 00 01 
0bae5     FC 60 00 01 
0bae9     53 20 00 00 
0baed     FE 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $01, $53, $20, $00, $00, $fe, $20, $00, $00
0baf1     00 00 00 00 
0baf5     00 00 00 00 
0baf9     00 00 00 00 
0bafd     00 00 00 00 | 	byte	$00[16]
0bb01     B4 30 00 00 
0bb05     FE 60 00 00 
0bb09     FE 20 00 00 
0bb0d     CA 20 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bb11     00 00 00 00 
0bb15     00 00 00 00 
0bb19     00 00 00 00 
0bb1d     00 00 00 00 | 	byte	$00[16]
0bb21     AA 50 00 01 
0bb25     FC 60 00 00 
0bb29     FE 20 00 00 
0bb2d     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bb31     00 00 00 00 
0bb35     00 00 00 00 
0bb39     00 00 00 00 
0bb3d     00 00 00 00 | 	byte	$00[16]
0bb41     B4 40 00 00 
0bb45     FE 60 00 00 
0bb49     00 00 00 00 
0bb4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb51     00 00 00 00 
0bb55     00 00 00 00 
0bb59     00 00 00 00 
0bb5d     00 00 00 00 | 	byte	$00[16]
0bb61     B4 30 00 01 
0bb65     FC 60 00 00 
0bb69     00 00 00 00 
0bb6d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb71     00 00 00 00 
0bb75     00 00 00 00 
0bb79     00 00 00 00 
0bb7d     00 00 00 00 | 	byte	$00[16]
0bb81     B4 30 00 01 
0bb85     FC 60 00 00 
0bb89     FE 20 00 00 
0bb8d     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bb91     00 00 00 00 
0bb95     00 00 00 00 
0bb99     00 00 00 00 
0bb9d     00 00 00 00 | 	byte	$00[16]
0bba1     AA 50 00 01 
0bba5     FC 60 00 00 
0bba9     FE 20 00 00 
0bbad     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bbb1     00 00 00 00 
0bbb5     00 00 00 00 
0bbb9     00 00 00 00 
0bbbd     00 00 00 00 | 	byte	$00[16]
0bbc1     B4 40 00 00 
0bbc5     00 00 00 00 
0bbc9     FE 20 00 00 
0bbcd     CA 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bbd1     00 00 00 00 
0bbd5     00 00 00 00 
0bbd9     00 00 00 00 
0bbdd     00 00 00 00 | 	byte	$00[16]
0bbe1     B4 40 00 01 
0bbe5     FC 60 00 00 
0bbe9     FE 20 00 00 
0bbed     CA 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bbf1     00 00 00 00 
0bbf5     00 00 00 00 
0bbf9     00 00 00 00 
0bbfd     00 00 00 00 | 	byte	$00[16]
0bc01     B4 30 00 00 
0bc05     FE 60 00 00 
0bc09     00 00 00 00 
0bc0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc11     00 00 00 00 
0bc15     00 00 00 00 
0bc19     00 00 00 00 
0bc1d     00 00 00 00 | 	byte	$00[16]
0bc21     AA 50 00 01 
0bc25     FC 60 00 00 
0bc29     FE 20 00 00 
0bc2d     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bc31     00 00 00 00 
0bc35     00 00 00 00 
0bc39     00 00 00 00 
0bc3d     00 00 00 00 | 	byte	$00[16]
0bc41     B4 40 00 00 
0bc45     FE 60 00 00 
0bc49     00 00 00 00 
0bc4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc51     00 00 00 00 
0bc55     00 00 00 00 
0bc59     00 00 00 00 
0bc5d     00 00 00 00 | 	byte	$00[16]
0bc61     B4 30 00 01 
0bc65     FC 60 00 00 
0bc69     00 00 00 00 
0bc6d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc71     00 00 00 00 
0bc75     00 00 00 00 
0bc79     00 00 00 00 
0bc7d     00 00 00 00 | 	byte	$00[16]
0bc81     B4 30 00 01 
0bc85     FC 60 00 00 
0bc89     00 00 00 00 
0bc8d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc91     00 00 00 00 
0bc95     00 00 00 00 
0bc99     00 00 00 00 
0bc9d     00 00 00 00 | 	byte	$00[16]
0bca1     AA 50 00 01 
0bca5     FC 60 00 00 
0bca9     00 00 00 00 
0bcad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcb1     00 00 00 00 
0bcb5     00 00 00 00 
0bcb9     00 00 00 00 
0bcbd     00 00 00 00 | 	byte	$00[16]
0bcc1     B4 40 00 00 
0bcc5     00 00 00 00 
0bcc9     FE 20 00 00 
0bccd     CA 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bcd1     00 00 00 00 
0bcd5     00 00 00 00 
0bcd9     00 00 00 00 
0bcdd     00 00 00 00 | 	byte	$00[16]
0bce1     B4 40 00 01 
0bce5     FC 60 00 00 
0bce9     FE 20 00 00 
0bced     CA 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bcf1     00 00 00 00 
0bcf5     00 00 00 00 
0bcf9     00 00 00 00 
0bcfd     00 00 00 00 | 	byte	$00[16]
0bd01     B4 30 00 00 
0bd05     FE 60 00 00 
0bd09     FE 20 00 00 
0bd0d     CA 20 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bd11     00 00 00 00 
0bd15     00 00 00 00 
0bd19     00 00 00 00 
0bd1d     00 00 00 00 | 	byte	$00[16]
0bd21     AA 50 00 01 
0bd25     FC 60 00 00 
0bd29     FE 20 00 00 
0bd2d     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bd31     00 00 00 00 
0bd35     00 00 00 00 
0bd39     00 00 00 00 
0bd3d     00 00 00 00 | 	byte	$00[16]
0bd41     B4 40 00 00 
0bd45     FE 60 00 00 
0bd49     00 00 00 00 
0bd4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd51     00 00 00 00 
0bd55     00 00 00 00 
0bd59     00 00 00 00 
0bd5d     00 00 00 00 | 	byte	$00[16]
0bd61     B4 30 00 01 
0bd65     FC 60 00 00 
0bd69     00 00 00 00 
0bd6d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd71     00 00 00 00 
0bd75     00 00 00 00 
0bd79     00 00 00 00 
0bd7d     00 00 00 00 | 	byte	$00[16]
0bd81     B4 30 00 01 
0bd85     FC 60 00 00 
0bd89     FE 20 00 00 
0bd8d     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bd91     00 00 00 00 
0bd95     00 00 00 00 
0bd99     00 00 00 00 
0bd9d     00 00 00 00 | 	byte	$00[16]
0bda1     AA 50 00 01 
0bda5     FC 60 00 00 
0bda9     FE 20 00 00 
0bdad     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bdb1     00 00 00 00 
0bdb5     00 00 00 00 
0bdb9     00 00 00 00 
0bdbd     00 00 00 00 | 	byte	$00[16]
0bdc1     B4 40 00 00 
0bdc5     00 00 00 00 
0bdc9     FE 20 00 00 
0bdcd     CA 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bdd1     00 00 00 00 
0bdd5     00 00 00 00 
0bdd9     00 00 00 00 
0bddd     00 00 00 00 | 	byte	$00[16]
0bde1     B4 40 00 01 
0bde5     FC 60 00 00 
0bde9     FE 20 00 00 
0bded     CA 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bdf1     00 00 00 00 
0bdf5     00 00 00 00 
0bdf9     00 00 00 00 
0bdfd     00 00 00 00 | 	byte	$00[16]
0be01     B4 30 00 00 
0be05     FE 60 00 00 
0be09     00 00 00 00 
0be0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be11     00 00 00 00 
0be15     00 00 00 00 
0be19     00 00 00 00 
0be1d     00 00 00 00 | 	byte	$00[16]
0be21     AA 50 00 01 
0be25     FC 60 00 00 
0be29     FE 20 00 00 
0be2d     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0be31     00 00 00 00 
0be35     00 00 00 00 
0be39     00 00 00 00 
0be3d     00 00 00 00 | 	byte	$00[16]
0be41     B4 40 00 00 
0be45     FE 60 00 00 
0be49     00 00 00 00 
0be4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be51     00 00 00 00 
0be55     00 00 00 00 
0be59     00 00 00 00 
0be5d     00 00 00 00 | 	byte	$00[16]
0be61     B4 30 00 01 
0be65     FC 60 00 00 
0be69     FE 20 00 00 
0be6d     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0be71     00 00 00 00 
0be75     00 00 00 00 
0be79     00 00 00 00 
0be7d     00 00 00 00 | 	byte	$00[16]
0be81     B4 30 00 01 
0be85     E0 60 00 00 
0be89     F0 20 00 00 
0be8d     BE 20 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0be91     00 00 00 00 
0be95     00 00 00 00 
0be99     00 00 00 00 
0be9d     00 00 00 00 | 	byte	$00[16]
0bea1     AA 50 00 01 
0bea5     E0 60 00 00 
0bea9     00 00 00 00 
0bead     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0beb1     00 00 00 00 
0beb5     00 00 00 00 
0beb9     00 00 00 00 
0bebd     00 00 00 00 | 	byte	$00[16]
0bec1     B4 4F 04 00 
0bec5     00 00 00 00 
0bec9     F0 20 00 00 
0becd     BE 20 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bed1     00 00 00 00 
0bed5     00 00 00 00 
0bed9     00 00 00 00 
0bedd     00 00 00 00 | 	byte	$00[16]
0bee1     B4 40 00 01 
0bee5     E0 60 00 00 
0bee9     F0 20 00 00 
0beed     BE 20 00 00 | 	byte	$b4, $40, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bef1     00 00 00 00 
0bef5     00 00 00 00 
0bef9     00 00 00 00 
0befd     00 00 00 00 | 	byte	$00[16]
0bf01     B4 30 00 00 
0bf05     F0 60 00 00 
0bf09     F0 20 00 00 
0bf0d     BE 20 00 00 | 	byte	$b4, $30, $00, $00, $f0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bf11     00 00 00 00 
0bf15     00 00 00 00 
0bf19     00 00 00 00 
0bf1d     00 00 00 00 | 	byte	$00[16]
0bf21     AA 50 00 01 
0bf25     E0 60 00 00 
0bf29     F0 20 00 00 
0bf2d     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bf31     00 00 00 00 
0bf35     00 00 00 00 
0bf39     00 00 00 00 
0bf3d     00 00 00 00 | 	byte	$00[16]
0bf41     B4 40 00 00 
0bf45     F0 60 00 00 
0bf49     00 00 00 00 
0bf4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $f0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf51     00 00 00 00 
0bf55     00 00 00 00 
0bf59     00 00 00 00 
0bf5d     00 00 00 00 | 	byte	$00[16]
0bf61     B4 30 00 01 
0bf65     E0 60 00 00 
0bf69     F0 20 00 00 
0bf6d     BE 20 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bf71     00 00 00 00 
0bf75     00 00 00 00 
0bf79     00 00 00 00 
0bf7d     00 00 00 00 | 	byte	$00[16]
0bf81     B4 30 00 01 
0bf85     E0 60 00 00 
0bf89     F0 20 00 00 
0bf8d     BE 20 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bf91     00 00 00 00 
0bf95     00 00 00 00 
0bf99     00 00 00 00 
0bf9d     00 00 00 00 | 	byte	$00[16]
0bfa1     AA 50 00 01 
0bfa5     E0 60 00 00 
0bfa9     F0 20 00 00 
0bfad     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bfb1     00 00 00 00 
0bfb5     00 00 00 00 
0bfb9     00 00 00 00 
0bfbd     00 00 00 00 | 	byte	$00[16]
0bfc1     B4 40 00 00 
0bfc5     00 00 00 00 
0bfc9     F0 20 00 00 
0bfcd     BE 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bfd1     00 00 00 00 
0bfd5     00 00 00 00 
0bfd9     00 00 00 00 
0bfdd     00 00 00 00 | 	byte	$00[16]
0bfe1     B4 40 00 01 
0bfe5     E0 60 00 00 
0bfe9     00 00 00 00 
0bfed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bff1     00 00 00 00 
0bff5     00 00 00 00 
0bff9     00 00 00 00 
0bffd     00 00 00 00 | 	byte	$00[16]
0c001     B4 30 00 00 
0c005     F0 60 00 00 
0c009     F0 20 00 00 
0c00d     BE 20 00 00 | 	byte	$b4, $30, $00, $00, $f0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0c011     00 00 00 00 
0c015     00 00 00 00 
0c019     00 00 00 00 
0c01d     00 00 00 00 | 	byte	$00[16]
0c021     AA 50 00 01 
0c025     E0 60 00 00 
0c029     00 00 00 00 
0c02d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c031     00 00 00 00 
0c035     00 00 00 00 
0c039     00 00 00 00 
0c03d     00 00 00 00 | 	byte	$00[16]
0c041     B4 40 00 00 
0c045     F0 60 00 00 
0c049     F0 20 00 00 
0c04d     BE 20 00 00 | 	byte	$b4, $40, $00, $00, $f0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0c051     00 00 00 00 
0c055     00 00 00 00 
0c059     00 00 00 00 
0c05d     00 00 00 00 | 	byte	$00[16]
0c061     B4 30 00 01 
0c065     E0 60 00 01 
0c069     1D 20 00 00 
0c06d     F0 20 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c071     00 00 00 00 
0c075     00 00 00 00 
0c079     00 00 00 00 
0c07d     00 00 00 00 | 	byte	$00[16]
0c081     B4 30 00 02 
0c085     3A 60 00 00 
0c089     00 00 00 00 
0c08d     00 00 00 00 | 	byte	$b4, $30, $00, $02, $3a, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c091     00 00 00 00 
0c095     00 00 00 00 
0c099     00 00 00 00 
0c09d     00 00 00 00 | 	byte	$00[16]
0c0a1     AA 50 00 02 
0c0a5     3A 60 00 01 
0c0a9     1D 20 00 00 
0c0ad     F0 20 00 00 | 	byte	$aa, $50, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c0b1     00 00 00 00 
0c0b5     00 00 00 00 
0c0b9     00 00 00 00 
0c0bd     00 00 00 00 | 	byte	$00[16]
0c0c1     B4 40 00 00 
0c0c5     00 00 00 01 
0c0c9     1D 20 00 00 
0c0cd     F0 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c0d1     00 00 00 00 
0c0d5     00 00 00 00 
0c0d9     00 00 00 00 
0c0dd     00 00 00 00 | 	byte	$00[16]
0c0e1     B4 40 00 02 
0c0e5     3A 60 00 01 
0c0e9     1D 20 00 00 
0c0ed     F0 20 00 00 | 	byte	$b4, $40, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c0f1     00 00 00 00 
0c0f5     00 00 00 00 
0c0f9     00 00 00 00 
0c0fd     00 00 00 00 | 	byte	$00[16]
0c101     B4 30 00 01 
0c105     1D 60 00 01 
0c109     1D 20 00 00 
0c10d     F0 20 00 00 | 	byte	$b4, $30, $00, $01, $1d, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c111     00 00 00 00 
0c115     00 00 00 00 
0c119     00 00 00 00 
0c11d     00 00 00 00 | 	byte	$00[16]
0c121     AA 50 00 02 
0c125     3A 60 00 01 
0c129     1D 20 00 00 
0c12d     F0 20 00 00 | 	byte	$aa, $50, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c131     00 00 00 00 
0c135     00 00 00 00 
0c139     00 00 00 00 
0c13d     00 00 00 00 | 	byte	$00[16]
0c141     B4 40 00 01 
0c145     1D 60 00 00 
0c149     00 00 00 00 
0c14d     00 00 00 00 | 	byte	$b4, $40, $00, $01, $1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c151     00 00 00 00 
0c155     00 00 00 00 
0c159     00 00 00 00 
0c15d     00 00 00 00 | 	byte	$00[16]
0c161     B4 30 00 02 
0c165     3A 60 00 01 
0c169     1D 20 00 00 
0c16d     F0 20 00 00 | 	byte	$b4, $30, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c171     00 00 00 00 
0c175     00 00 00 00 
0c179     00 00 00 00 
0c17d     00 00 00 00 | 	byte	$00[16]
0c181     B4 30 00 02 
0c185     3A 60 00 01 
0c189     1D 20 00 00 
0c18d     F0 20 00 00 | 	byte	$b4, $30, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c191     00 00 00 00 
0c195     00 00 00 00 
0c199     00 00 00 00 
0c19d     00 00 00 00 | 	byte	$00[16]
0c1a1     AA 50 00 02 
0c1a5     3A 60 00 01 
0c1a9     1D 20 00 00 
0c1ad     F0 20 00 00 | 	byte	$aa, $50, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c1b1     00 00 00 00 
0c1b5     00 00 00 00 
0c1b9     00 00 00 00 
0c1bd     00 00 00 00 | 	byte	$00[16]
0c1c1     B4 40 00 00 
0c1c5     00 00 00 01 
0c1c9     1D 20 00 00 
0c1cd     F0 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c1d1     00 00 00 00 
0c1d5     00 00 00 00 
0c1d9     00 00 00 00 
0c1dd     00 00 00 00 | 	byte	$00[16]
0c1e1     B4 40 00 02 
0c1e5     3A 60 00 00 
0c1e9     00 00 00 00 
0c1ed     00 00 00 00 | 	byte	$b4, $40, $00, $02, $3a, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1f1     00 00 00 00 
0c1f5     00 00 00 00 
0c1f9     00 00 00 00 
0c1fd     00 00 00 00 | 	byte	$00[16]
0c201     B4 30 00 01 
0c205     1D 60 00 01 
0c209     1D 20 00 00 
0c20d     F0 20 00 00 | 	byte	$b4, $30, $00, $01, $1d, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c211     00 00 00 00 
0c215     00 00 00 00 
0c219     00 00 00 00 
0c21d     00 00 00 00 | 	byte	$00[16]
0c221     AA 50 00 02 
0c225     3A 60 00 00 
0c229     00 00 00 00 
0c22d     00 00 00 00 | 	byte	$aa, $50, $00, $02, $3a, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c231     00 00 00 00 
0c235     00 00 00 00 
0c239     00 00 00 00 
0c23d     00 00 00 00 | 	byte	$00[16]
0c241     B4 40 00 01 
0c245     1D 60 00 01 
0c249     1D 20 00 00 
0c24d     F0 20 00 00 | 	byte	$b4, $40, $00, $01, $1d, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c251     00 00 00 00 
0c255     00 00 00 00 
0c259     00 00 00 00 
0c25d     00 00 00 00 | 	byte	$00[16]
0c261     B4 30 00 02 
0c265     3A 60 00 00 
0c269     FE 20 00 00 
0c26d     D6 20 00 00 | 	byte	$b4, $30, $00, $02, $3a, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c271     00 00 00 00 
0c275     00 00 00 00 
0c279     00 00 00 00 
0c27d     00 00 00 00 | 	byte	$00[16]
0c281     B4 30 00 01 
0c285     FC 60 00 00 
0c289     00 00 00 00 
0c28d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c291     00 00 00 00 
0c295     00 00 00 00 
0c299     00 00 00 00 
0c29d     00 00 00 00 | 	byte	$00[16]
0c2a1     AA 50 00 01 
0c2a5     FC 60 00 00 
0c2a9     FE 20 00 00 
0c2ad     D6 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c2b1     00 00 00 00 
0c2b5     00 00 00 00 
0c2b9     00 00 00 00 
0c2bd     00 00 00 00 | 	byte	$00[16]
0c2c1     B4 4F 04 00 
0c2c5     00 00 00 00 
0c2c9     FE 20 00 00 
0c2cd     D6 20 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c2d1     00 00 00 00 
0c2d5     00 00 00 00 
0c2d9     00 00 00 00 
0c2dd     00 00 00 00 | 	byte	$00[16]
0c2e1     B4 40 00 01 
0c2e5     FC 60 00 00 
0c2e9     FE 20 00 00 
0c2ed     D6 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c2f1     00 00 00 00 
0c2f5     00 00 00 00 
0c2f9     00 00 00 00 
0c2fd     00 00 00 00 | 	byte	$00[16]
0c301     B4 30 00 00 
0c305     FE 60 00 00 
0c309     FE 20 00 00 
0c30d     D6 20 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c311     00 00 00 00 
0c315     00 00 00 00 
0c319     00 00 00 00 
0c31d     00 00 00 00 | 	byte	$00[16]
0c321     AA 50 00 01 
0c325     FC 60 00 00 
0c329     FE 20 00 00 
0c32d     D6 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c331     00 00 00 00 
0c335     00 00 00 00 
0c339     00 00 00 00 
0c33d     00 00 00 00 | 	byte	$00[16]
0c341     B4 40 00 00 
0c345     FE 60 00 00 
0c349     00 00 00 00 
0c34d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c351     00 00 00 00 
0c355     00 00 00 00 
0c359     00 00 00 00 
0c35d     00 00 00 00 | 	byte	$00[16]
0c361     B4 30 00 01 
0c365     FC 60 00 00 
0c369     FE 20 00 00 
0c36d     D6 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c371     00 00 00 00 
0c375     00 00 00 00 
0c379     00 00 00 00 
0c37d     00 00 00 00 | 	byte	$00[16]
0c381     B4 30 00 01 
0c385     FC 60 00 00 
0c389     FE 20 00 00 
0c38d     D6 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c391     00 00 00 00 
0c395     00 00 00 00 
0c399     00 00 00 00 
0c39d     00 00 00 00 | 	byte	$00[16]
0c3a1     AA 50 00 01 
0c3a5     FC 60 00 00 
0c3a9     FE 20 00 00 
0c3ad     D6 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c3b1     00 00 00 00 
0c3b5     00 00 00 00 
0c3b9     00 00 00 00 
0c3bd     00 00 00 00 | 	byte	$00[16]
0c3c1     B4 40 00 00 
0c3c5     00 00 00 00 
0c3c9     FE 20 00 00 
0c3cd     D6 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c3d1     00 00 00 00 
0c3d5     00 00 00 00 
0c3d9     00 00 00 00 
0c3dd     00 00 00 00 | 	byte	$00[16]
0c3e1     B4 40 00 01 
0c3e5     FC 60 00 00 
0c3e9     00 00 00 00 
0c3ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c3f1     00 00 00 00 
0c3f5     00 00 00 00 
0c3f9     00 00 00 00 
0c3fd     00 00 00 00 | 	byte	$00[16]
0c401     B4 30 00 00 
0c405     FE 60 00 00 
0c409     FE 20 00 00 
0c40d     D6 20 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c411     00 00 00 00 
0c415     00 00 00 00 
0c419     00 00 00 00 
0c41d     00 00 00 00 | 	byte	$00[16]
0c421     AA 50 00 01 
0c425     FC 60 00 00 
0c429     00 00 00 00 
0c42d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c431     00 00 00 00 
0c435     00 00 00 00 
0c439     00 00 00 00 
0c43d     00 00 00 00 | 	byte	$00[16]
0c441     B4 40 00 00 
0c445     FE 60 00 00 
0c449     FE 20 00 00 
0c44d     D6 20 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c451     00 00 00 00 
0c455     00 00 00 00 
0c459     00 00 00 00 
0c45d     00 00 00 00 | 	byte	$00[16]
0c461     B4 30 00 01 
0c465     FC 60 00 00 
0c469     FE 20 00 00 
0c46d     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c471     00 00 00 00 
0c475     00 00 00 00 
0c479     00 00 00 00 
0c47d     00 00 00 00 | 	byte	$00[16]
0c481     B4 30 00 01 
0c485     FC 60 00 00 
0c489     00 00 00 00 
0c48d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c491     00 00 00 00 
0c495     00 00 00 00 
0c499     00 00 00 00 
0c49d     00 00 00 00 | 	byte	$00[16]
0c4a1     AA 50 00 01 
0c4a5     FC 60 00 00 
0c4a9     FE 20 00 00 
0c4ad     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c4b1     00 00 00 00 
0c4b5     00 00 00 00 
0c4b9     00 00 00 00 
0c4bd     00 00 00 00 | 	byte	$00[16]
0c4c1     B4 40 00 00 
0c4c5     00 00 00 00 
0c4c9     FE 20 00 00 
0c4cd     CA 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c4d1     00 00 00 00 
0c4d5     00 00 00 00 
0c4d9     00 00 00 00 
0c4dd     00 00 00 00 | 	byte	$00[16]
0c4e1     B4 40 00 01 
0c4e5     FC 60 00 00 
0c4e9     FE 20 00 00 
0c4ed     CA 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c4f1     00 00 00 00 
0c4f5     00 00 00 00 
0c4f9     00 00 00 00 
0c4fd     00 00 00 00 | 	byte	$00[16]
0c501     B4 30 00 00 
0c505     FE 60 00 00 
0c509     FE 20 00 00 
0c50d     CA 20 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c511     00 00 00 00 
0c515     00 00 00 00 
0c519     00 00 00 00 
0c51d     00 00 00 00 | 	byte	$00[16]
0c521     AA 50 00 01 
0c525     FC 60 00 00 
0c529     FE 20 00 00 
0c52d     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c531     00 00 00 00 
0c535     00 00 00 00 
0c539     00 00 00 00 
0c53d     00 00 00 00 | 	byte	$00[16]
0c541     B4 40 00 00 
0c545     FE 60 00 00 
0c549     00 00 00 00 
0c54d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c551     00 00 00 00 
0c555     00 00 00 00 
0c559     00 00 00 00 
0c55d     00 00 00 00 | 	byte	$00[16]
0c561     B4 30 00 01 
0c565     FC 60 00 00 
0c569     FE 20 00 00 
0c56d     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c571     00 00 00 00 
0c575     00 00 00 00 
0c579     00 00 00 00 
0c57d     00 00 00 00 | 	byte	$00[16]
0c581     B4 30 00 01 
0c585     FC 60 00 00 
0c589     FE 20 00 00 
0c58d     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c591     00 00 00 00 
0c595     00 00 00 00 
0c599     00 00 00 00 
0c59d     00 00 00 00 | 	byte	$00[16]
0c5a1     AA 50 00 01 
0c5a5     FC 60 00 00 
0c5a9     FE 20 00 00 
0c5ad     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c5b1     00 00 00 00 
0c5b5     00 00 00 00 
0c5b9     00 00 00 00 
0c5bd     00 00 00 00 | 	byte	$00[16]
0c5c1     B4 40 00 00 
0c5c5     00 00 00 00 
0c5c9     FE 20 00 00 
0c5cd     CA 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c5d1     00 00 00 00 
0c5d5     00 00 00 00 
0c5d9     00 00 00 00 
0c5dd     00 00 00 00 | 	byte	$00[16]
0c5e1     B4 40 00 01 
0c5e5     FC 60 00 00 
0c5e9     FE 20 00 00 
0c5ed     CA 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c5f1     00 00 00 00 
0c5f5     00 00 00 00 
0c5f9     00 00 00 00 
0c5fd     00 00 00 00 | 	byte	$00[16]
0c601     B4 30 00 00 
0c605     FE 60 00 00 
0c609     00 00 00 00 
0c60d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c611     00 00 00 00 
0c615     00 00 00 00 
0c619     00 00 00 00 
0c61d     00 00 00 00 | 	byte	$00[16]
0c621     AA 50 00 01 
0c625     FC 60 00 00 
0c629     FE 20 00 00 
0c62d     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c631     00 00 00 00 
0c635     00 00 00 00 
0c639     00 00 00 00 
0c63d     00 00 00 00 | 	byte	$00[16]
0c641     B4 40 00 00 
0c645     FE 60 00 00 
0c649     00 00 00 00 
0c64d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c651     00 00 00 00 
0c655     00 00 00 00 
0c659     00 00 00 00 
0c65d     00 00 00 00 | 	byte	$00[16]
0c661     B4 30 00 01 
0c665     FC 60 00 00 
0c669     00 00 00 00 
0c66d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c671     00 00 00 00 
0c675     00 00 00 00 
0c679     00 00 00 00 
0c67d     00 00 00 00 | 	byte	$00[16]
0c681     B4 30 00 01 
0c685     7D 60 00 01 
0c689     7D 20 00 01 
0c68d     7D 70 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $01, $7d, $20, $00, $01, $7d, $70, $00, $00
0c691     00 00 00 00 
0c695     00 00 00 00 
0c699     00 00 00 00 
0c69d     00 00 00 00 | 	byte	$00[16]
0c6a1     AA 50 00 01 
0c6a5     7D 60 00 00 
0c6a9     00 00 00 00 
0c6ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6b1     00 00 00 00 
      ...             
0cab9     00 00 00 00 
0cabd     00 00 00 00 | 	byte	$00[1040]
0cac1     B4 4F 04 00 
0cac5     00 00 00 00 
0cac9     00 00 00 02 
0cacd     FA 60 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
0cad1     00 00 00 00 
0cad5     00 00 00 00 
0cad9     00 00 00 00 
0cadd     00 00 00 00 | 	byte	$00[16]
0cae1     B4 40 00 01 
0cae5     7D 60 00 00 
0cae9     00 00 00 01 
0caed     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
0caf1     00 00 00 00 
0caf5     00 00 00 00 
0caf9     00 00 00 00 
0cafd     00 00 00 00 | 	byte	$00[16]
0cb01     B4 30 00 00 
0cb05     BE 60 00 00 
0cb09     00 00 00 02 
0cb0d     FA 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
0cb11     00 00 00 00 
0cb15     00 00 00 00 
0cb19     00 00 00 00 
0cb1d     00 00 00 00 | 	byte	$00[16]
0cb21     AA 50 00 00 
0cb25     FE 60 00 00 
0cb29     00 00 00 01 
0cb2d     7D 60 00 00 | 	byte	$aa, $50, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
0cb31     00 00 00 00 
0cb35     00 00 00 00 
0cb39     00 00 00 00 
0cb3d     00 00 00 00 | 	byte	$00[16]
0cb41     B4 40 00 00 
0cb45     D6 60 00 00 
0cb49     00 00 00 02 
0cb4d     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
0cb51     00 00 00 00 
0cb55     00 00 00 00 
0cb59     00 00 00 00 
0cb5d     00 00 00 00 | 	byte	$00[16]
0cb61     B4 30 00 00 
0cb65     BE 60 00 00 
0cb69     00 00 00 01 
0cb6d     AC 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
0cb71     00 00 00 00 
0cb75     00 00 00 00 
0cb79     00 00 00 00 
0cb7d     00 00 00 00 | 	byte	$00[16]
0cb81     B4 30 00 01 
0cb85     7D 60 00 00 
0cb89     00 00 00 02 
0cb8d     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
0cb91     00 00 00 00 
0cb95     00 00 00 00 
0cb99     00 00 00 00 
0cb9d     00 00 00 00 | 	byte	$00[16]
0cba1     AA 50 00 01 
0cba5     7D 60 00 00 
0cba9     00 00 00 01 
0cbad     7D 60 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
0cbb1     00 00 00 00 
0cbb5     00 00 00 00 
0cbb9     00 00 00 00 
0cbbd     00 00 00 00 | 	byte	$00[16]
0cbc1     B4 40 00 00 
0cbc5     00 00 00 00 
0cbc9     00 00 00 02 
0cbcd     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
0cbd1     00 00 00 00 
0cbd5     00 00 00 00 
0cbd9     00 00 00 00 
0cbdd     00 00 00 00 | 	byte	$00[16]
0cbe1     B4 40 00 01 
0cbe5     AC 60 00 00 
0cbe9     00 00 00 01 
0cbed     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
0cbf1     00 00 00 00 
0cbf5     00 00 00 00 
0cbf9     00 00 00 00 
0cbfd     00 00 00 00 | 	byte	$00[16]
0cc01     B4 30 00 01 
0cc05     7D 60 00 01 
0cc09     7D 20 00 02 
0cc0d     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $01, $7d, $20, $00, $02, $fa, $60, $00, $00
0cc11     00 00 00 00 
      ...             
0cc49     00 00 00 00 
0cc4d     00 00 00    | 	byte	$00[63]
0cc50     03 58 10 00 
0cc54     00 00 00 00 
0cc58     00 00 00 00 
0cc5c     00 00 00 00 | 	byte	$03, $58, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cc60     00 00 00 00 
      ...             
0cebc     00 00 00 00 
0cec0     00          | 	byte	$00[609]
0cec1     B4 4F 04 00 
0cec5     00 00 00 00 
0cec9     00 00 00 00 
0cecd     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ced1     00 00 00 00 
0ced5     00 00 00 00 
0ced9     00 00 00 00 
0cedd     00 00 00 00 | 	byte	$00[16]
0cee1     B4 40 00 00 
0cee5     00 00 00 00 
0cee9     00 00 00 00 
0ceed     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cef1     00 00 00 00 
0cef5     00 00 00 00 
0cef9     00 00 00 00 
0cefd     00 00 00 00 | 	byte	$00[16]
0cf01     B4 30 00 00 
0cf05     00 00 00 00 
0cf09     00 00 00 00 
0cf0d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf11     00 00 00 00 
0cf15     00 00 00 00 
0cf19     00 00 00 00 
0cf1d     00 00 00 00 | 	byte	$00[16]
0cf21     AA 50 00 00 
0cf25     00 00 00 00 
0cf29     00 00 00 00 
0cf2d     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf31     00 00 00 00 
0cf35     00 00 00 00 
0cf39     00 00 00 00 
0cf3d     00 00 00 00 | 	byte	$00[16]
0cf41     B4 40 00 00 
0cf45     00 00 00 00 
0cf49     00 00 00 00 
0cf4d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf51     00 00 00 00 
0cf55     00 00 00 00 
0cf59     00 00 00 00 
0cf5d     00 00 00 00 | 	byte	$00[16]
0cf61     B4 30 00 00 
0cf65     00 00 00 00 
0cf69     00 00 00 00 
0cf6d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf71     00 00 00 00 
0cf75     00 00 00 00 
0cf79     00 00 00 00 
0cf7d     00 00 00 00 | 	byte	$00[16]
0cf81     B4 30 00 00 
0cf85     00 00 00 00 
0cf89     00 00 00 00 
0cf8d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf91     00 00 00 00 
0cf95     00 00 00 00 
0cf99     00 00 00 00 
0cf9d     00 00 00 00 | 	byte	$00[16]
0cfa1     AA 50 00 00 
0cfa5     00 00 00 00 
0cfa9     00 00 00 00 
0cfad     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cfb1     00 00 00 00 
0cfb5     00 00 00 00 
0cfb9     00 00 00 00 
0cfbd     00 00 00 00 | 	byte	$00[16]
0cfc1     B4 40 00 00 
0cfc5     00 00 00 00 
0cfc9     00 00 00 00 
0cfcd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cfd1     00 00 00 00 
0cfd5     00 00 00 00 
0cfd9     00 00 00 00 
0cfdd     00 00 00 00 | 	byte	$00[16]
0cfe1     B4 40 00 00 
0cfe5     00 00 00 00 
0cfe9     00 00 00 00 
0cfed     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cff1     00 00 00 00 
0cff5     00 00 00 00 
0cff9     00 00 00 00 
0cffd     00 00 00 00 | 	byte	$00[16]
0d001     B4 30 00 00 
0d005     00 00 00 00 
0d009     00 00 00 00 
0d00d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d011     00 00 00 00 
0d015     00 00 00 00 
0d019     00 00 00 00 
0d01d     00 00 00 00 | 	byte	$00[16]
0d021     AA 50 00 00 
0d025     00 00 00 00 
0d029     00 00 00 00 
0d02d     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d031     00 00 00 00 
0d035     00 00 00 00 
0d039     00 00 00 00 
0d03d     00 00 00 00 | 	byte	$00[16]
0d041     B4 40 00 00 
0d045     00 00 00 00 
0d049     00 00 00 00 
0d04d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d051     00 00 00 00 
0d055     00 00 00 00 
0d059     00 00 00 00 
0d05d     00 00 00 00 | 	byte	$00[16]
0d061     B4 30 00 00 
0d065     00 00 00 00 
0d069     00 00 00 00 
0d06d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d071     00 00 00 00 
0d075     00 00 00 00 
0d079     00 00 00 00 
0d07d     00 00 00 00 | 	byte	$00[16]
0d081     B4 30 00 00 
0d085     00 00 00 00 
0d089     00 00 00 00 
0d08d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d091     00 00 00 00 
0d095     00 00 00 00 
0d099     00 00 00 00 
0d09d     00 00 00 00 | 	byte	$00[16]
0d0a1     AA 50 00 00 
0d0a5     00 00 00 00 
0d0a9     00 00 00 00 
0d0ad     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d0b1     00 00 00 00 
0d0b5     00 00 00 00 
0d0b9     00 00 00 00 
0d0bd     00 00 00 00 | 	byte	$00[16]
0d0c1     B4 40 00 00 
0d0c5     00 00 00 00 
0d0c9     00 00 00 00 
0d0cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d0d1     00 00 00 00 
0d0d5     00 00 00 00 
0d0d9     00 00 00 00 
0d0dd     00 00 00 00 | 	byte	$00[16]
0d0e1     B4 40 00 00 
0d0e5     00 00 00 00 
0d0e9     00 00 00 00 
0d0ed     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d0f1     00 00 00 00 
0d0f5     00 00 00 00 
0d0f9     00 00 00 00 
0d0fd     00 00 00 00 | 	byte	$00[16]
0d101     B4 30 00 00 
0d105     00 00 00 00 
0d109     00 00 00 00 
0d10d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d111     00 00 00 00 
0d115     00 00 00 00 
0d119     00 00 00 00 
0d11d     00 00 00 00 | 	byte	$00[16]
0d121     AA 50 00 00 
0d125     00 00 00 00 
0d129     00 00 00 00 
0d12d     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d131     00 00 00 00 
0d135     00 00 00 00 
0d139     00 00 00 00 
0d13d     00 00 00 00 | 	byte	$00[16]
0d141     B4 40 00 00 
0d145     00 00 00 00 
0d149     00 00 00 00 
0d14d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d151     00 00 00 00 
0d155     00 00 00 00 
0d159     00 00 00 00 
0d15d     00 00 00 00 | 	byte	$00[16]
0d161     B4 30 00 00 
0d165     00 00 00 00 
0d169     00 00 00 00 
0d16d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d171     00 00 00 00 
0d175     00 00 00 00 
0d179     00 00 00 00 
0d17d     00 00 00 00 | 	byte	$00[16]
0d181     B4 30 00 00 
0d185     00 00 00 00 
0d189     00 00 00 00 
0d18d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d191     00 00 00 00 
0d195     00 00 00 00 
0d199     00 00 00 00 
0d19d     00 00 00 00 | 	byte	$00[16]
0d1a1     AA 50 00 00 
0d1a5     00 00 00 00 
0d1a9     00 00 00 00 
0d1ad     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d1b1     00 00 00 00 
0d1b5     00 00 00 00 
0d1b9     00 00 00 00 
0d1bd     00 00 00 00 | 	byte	$00[16]
0d1c1     B4 40 00 00 
0d1c5     00 00 00 00 
0d1c9     00 00 00 00 
0d1cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d1d1     00 00 00 00 
0d1d5     00 00 00 00 
0d1d9     00 00 00 00 
0d1dd     00 00 00 00 | 	byte	$00[16]
0d1e1     B4 40 00 00 
0d1e5     00 00 00 00 
0d1e9     00 00 00 00 
0d1ed     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d1f1     00 00 00 00 
0d1f5     00 00 00 00 
0d1f9     00 00 00 00 
0d1fd     00 00 00 00 | 	byte	$00[16]
0d201     B4 30 00 00 
0d205     00 00 00 00 
0d209     00 00 00 00 
0d20d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d211     00 00 00 00 
0d215     00 00 00 00 
0d219     00 00 00 00 
0d21d     00 00 00 00 | 	byte	$00[16]
0d221     AA 50 00 00 
0d225     00 00 00 00 
0d229     00 00 00 00 
0d22d     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d231     00 00 00 00 
0d235     00 00 00 00 
0d239     00 00 00 00 
0d23d     00 00 00 00 | 	byte	$00[16]
0d241     B4 40 00 00 
0d245     00 00 00 00 
0d249     00 00 00 00 
0d24d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d251     00 00 00 00 
0d255     00 00 00 00 
0d259     00 00 00 00 
0d25d     00 00 00 00 | 	byte	$00[16]
0d261     B4 30 00 00 
0d265     00 00 00 00 
0d269     00 00 00 00 
0d26d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d271     00 00 00 00 
0d275     00 00 00 00 
0d279     00 00 00 00 
0d27d     00 00 00 00 | 	byte	$00[16]
0d281     B4 30 00 00 
0d285     00 00 00 00 
0d289     00 00 00 00 
0d28d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d291     00 00 00 00 
0d295     00 00 00 00 
0d299     00 00 00 00 
0d29d     00 00 00 00 | 	byte	$00[16]
0d2a1     AA 50 00 00 
0d2a5     00 00 00 00 
0d2a9     00 00 00 00 
0d2ad     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d2b1     00 00 00 00 
0d2b5     00 00 00 00 
0d2b9     00 00 00 00 
0d2bd     00 00 00 00 | 	byte	$00[16]
0d2c1     B4 4F 04 00 
0d2c5     00 00 00 00 
0d2c9     00 00 00 00 
0d2cd     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d2d1     00 00 00 00 
0d2d5     00 00 00 00 
0d2d9     00 00 00 00 
0d2dd     00 00 00 00 | 	byte	$00[16]
0d2e1     B4 40 00 01 
0d2e5     7D 60 00 00 
0d2e9     00 00 00 00 
0d2ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d2f1     00 00 00 00 
0d2f5     00 00 00 00 
0d2f9     00 00 00 00 
0d2fd     00 00 00 00 | 	byte	$00[16]
0d301     B4 30 00 00 
0d305     BE 60 00 00 
0d309     00 00 00 00 
0d30d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d311     00 00 00 00 
0d315     00 00 00 00 
0d319     00 00 00 00 
0d31d     00 00 00 00 | 	byte	$00[16]
0d321     AA 50 00 01 
0d325     7D 60 00 00 
0d329     00 00 00 00 
0d32d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d331     00 00 00 00 
0d335     00 00 00 00 
0d339     00 00 00 00 
0d33d     00 00 00 00 | 	byte	$00[16]
0d341     B4 40 00 00 
0d345     BE 60 00 00 
0d349     00 00 00 00 
0d34d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d351     00 00 00 00 
0d355     00 00 00 00 
0d359     00 00 00 00 
0d35d     00 00 00 00 | 	byte	$00[16]
0d361     B4 30 00 01 
0d365     7D 60 00 00 
0d369     00 00 00 00 
0d36d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d371     00 00 00 00 
0d375     00 00 00 00 
0d379     00 00 00 00 
0d37d     00 00 00 00 | 	byte	$00[16]
0d381     B4 30 00 01 
0d385     7D 60 00 00 
0d389     00 00 00 00 
0d38d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d391     00 00 00 00 
0d395     00 00 00 00 
0d399     00 00 00 00 
0d39d     00 00 00 00 | 	byte	$00[16]
0d3a1     AA 50 00 01 
0d3a5     7D 60 00 00 
0d3a9     00 00 00 00 
0d3ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3b1     00 00 00 00 
0d3b5     00 00 00 00 
0d3b9     00 00 00 00 
0d3bd     00 00 00 00 | 	byte	$00[16]
0d3c1     B4 40 00 00 
0d3c5     00 00 00 00 
0d3c9     00 00 00 00 
0d3cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3d1     00 00 00 00 
0d3d5     00 00 00 00 
0d3d9     00 00 00 00 
0d3dd     00 00 00 00 | 	byte	$00[16]
0d3e1     B4 40 00 01 
0d3e5     7D 60 00 00 
0d3e9     00 00 00 00 
0d3ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3f1     00 00 00 00 
0d3f5     00 00 00 00 
0d3f9     00 00 00 00 
0d3fd     00 00 00 00 | 	byte	$00[16]
0d401     B4 30 00 00 
0d405     BE 60 00 00 
0d409     00 00 00 00 
0d40d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d411     00 00 00 00 
0d415     00 00 00 00 
0d419     00 00 00 00 
0d41d     00 00 00 00 | 	byte	$00[16]
0d421     AA 50 00 01 
0d425     7D 60 00 00 
0d429     00 00 00 00 
0d42d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d431     00 00 00 00 
0d435     00 00 00 00 
0d439     00 00 00 00 
0d43d     00 00 00 00 | 	byte	$00[16]
0d441     B4 40 00 00 
0d445     BE 60 00 00 
0d449     00 00 00 00 
0d44d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d451     00 00 00 00 
0d455     00 00 00 00 
0d459     00 00 00 00 
0d45d     00 00 00 00 | 	byte	$00[16]
0d461     B4 30 00 01 
0d465     7D 60 00 00 
0d469     00 00 00 00 
0d46d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d471     00 00 00 00 
0d475     00 00 00 00 
0d479     00 00 00 00 
0d47d     00 00 00 00 | 	byte	$00[16]
0d481     B4 30 00 01 
0d485     7D 60 00 00 
0d489     00 00 00 00 
0d48d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d491     00 00 00 00 
0d495     00 00 00 00 
0d499     00 00 00 00 
0d49d     00 00 00 00 | 	byte	$00[16]
0d4a1     AA 50 00 01 
0d4a5     7D 60 00 00 
0d4a9     00 00 00 00 
0d4ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d4b1     00 00 00 00 
0d4b5     00 00 00 00 
0d4b9     00 00 00 00 
0d4bd     00 00 00 00 | 	byte	$00[16]
0d4c1     B4 40 00 00 
0d4c5     00 00 00 00 
0d4c9     00 00 00 00 
0d4cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d4d1     00 00 00 00 
0d4d5     00 00 00 00 
0d4d9     00 00 00 00 
0d4dd     00 00 00 00 | 	byte	$00[16]
0d4e1     B4 40 00 01 
0d4e5     7D 60 00 00 
0d4e9     00 00 00 00 
0d4ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d4f1     00 00 00 00 
0d4f5     00 00 00 00 
0d4f9     00 00 00 00 
0d4fd     00 00 00 00 | 	byte	$00[16]
0d501     B4 30 00 00 
0d505     BE 60 00 00 
0d509     00 00 00 00 
0d50d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d511     00 00 00 00 
0d515     00 00 00 00 
0d519     00 00 00 00 
0d51d     00 00 00 00 | 	byte	$00[16]
0d521     AA 50 00 01 
0d525     7D 60 00 00 
0d529     00 00 00 00 
0d52d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d531     00 00 00 00 
0d535     00 00 00 00 
0d539     00 00 00 00 
0d53d     00 00 00 00 | 	byte	$00[16]
0d541     B4 40 00 00 
0d545     BE 60 00 00 
0d549     00 00 00 00 
0d54d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d551     00 00 00 00 
0d555     00 00 00 00 
0d559     00 00 00 00 
0d55d     00 00 00 00 | 	byte	$00[16]
0d561     B4 30 00 01 
0d565     7D 60 00 00 
0d569     00 00 00 00 
0d56d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d571     00 00 00 00 
0d575     00 00 00 00 
0d579     00 00 00 00 
0d57d     00 00 00 00 | 	byte	$00[16]
0d581     B4 30 00 01 
0d585     7D 60 00 00 
0d589     00 00 00 00 
0d58d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d591     00 00 00 00 
0d595     00 00 00 00 
0d599     00 00 00 00 
0d59d     00 00 00 00 | 	byte	$00[16]
0d5a1     AA 50 00 01 
0d5a5     7D 60 00 00 
0d5a9     00 00 00 00 
0d5ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d5b1     00 00 00 00 
0d5b5     00 00 00 00 
0d5b9     00 00 00 00 
0d5bd     00 00 00 00 | 	byte	$00[16]
0d5c1     B4 40 00 00 
0d5c5     00 00 00 00 
0d5c9     00 00 00 00 
0d5cd     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d5d1     00 00 00 00 
0d5d5     00 00 00 00 
0d5d9     00 00 00 00 
0d5dd     00 00 00 00 | 	byte	$00[16]
0d5e1     B4 40 00 01 
0d5e5     7D 60 00 00 
0d5e9     00 00 00 00 
0d5ed     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d5f1     00 00 00 00 
0d5f5     00 00 00 00 
0d5f9     00 00 00 00 
0d5fd     00 00 00 00 | 	byte	$00[16]
0d601     B4 30 00 00 
0d605     BE 60 00 00 
0d609     00 00 00 00 
0d60d     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d611     00 00 00 00 
0d615     00 00 00 00 
0d619     00 00 00 00 
0d61d     00 00 00 00 | 	byte	$00[16]
0d621     AA 50 00 01 
0d625     7D 60 00 00 
0d629     00 00 00 00 
0d62d     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d631     00 00 00 00 
0d635     00 00 00 00 
0d639     00 00 00 00 
0d63d     00 00 00 00 | 	byte	$00[16]
0d641     B4 40 00 00 
0d645     BE 60 00 00 
0d649     00 00 00 00 
0d64d     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d651     00 00 00 00 
0d655     00 00 00 00 
0d659     00 00 00 00 
0d65d     00 00 00 00 | 	byte	$00[16]
0d661     B4 30 00 01 
0d665     7D 60 00 00 
0d669     00 00 00 00 
0d66d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d671     00 00 00 00 
0d675     00 00 00 00 
0d679     00 00 00 00 
0d67d     00 00 00 00 | 	byte	$00[16]
0d681     B4 30 00 01 
0d685     7D 60 00 00 
0d689     00 00 00 00 
0d68d     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d691     00 00 00 00 
0d695     00 00 00 00 
0d699     00 00 00 00 
0d69d     00 00 00 00 | 	byte	$00[16]
0d6a1     AA 50 00 01 
0d6a5     7D 60 00 00 
0d6a9     00 00 00 00 
0d6ad     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d6b1     00 00 00 00 
      ...             
106bd     00 00 00 00 
106c1     00 00 00    | 	byte	$00[12307]
106c4     FB FE F0 0A 
106c8     E5 08 E8 03 
106cc     E9 06 E7 06 
106d0     EE FD 00 EB | 	byte	$fb, $fe, $f0, $0a, $e5, $08, $e8, $03, $e9, $06, $e7, $06, $ee, $fd, $00, $eb
106d4     03 FC E7 01 
106d8     05 EE EC 0B 
106dc     07 F1 E2 ED 
106e0     07 0D 05 FA | 	byte	$03, $fc, $e7, $01, $05, $ee, $ec, $0b, $07, $f1, $e2, $ed, $07, $0d, $05, $fa
106e4     EF E8 E4 E3 
106e8     E6 E3 E3 E1 
106ec     DE DD E0 E2 
106f0     E9 F9 0A 15 | 	byte	$ef, $e8, $e4, $e3, $e6, $e3, $e3, $e1, $de, $dd, $e0, $e2, $e9, $f9, $0a, $15
106f4     0F F7 DE E3 
106f8     FD 16 02 DD 
106fc     E9 10 06 D7 
10700     F4 1B E7 E2 | 	byte	$0f, $f7, $de, $e3, $fd, $16, $02, $dd, $e9, $10, $06, $d7, $f4, $1b, $e7, $e2
10704     1B E9 E8 1B 
10708     D8 00 07 DB 
1070c     1C D5 0F EA 
10710     FA FE EC 04 | 	byte	$1b, $e9, $e8, $1b, $d8, $00, $07, $db, $1c, $d5, $0f, $ea, $fa, $fe, $ec, $04
10714     E6 0C E8 06 
10718     F2 F7 04 DE 
1071c     1B CE 20 DB 
10720     02 09 D3 22 | 	byte	$e6, $0c, $e8, $06, $f2, $f7, $04, $de, $1b, $ce, $20, $db, $02, $09, $d3, $22
10724     DC F3 1B CD 
10728     0C 0C CB 14 
1072c     0A CC 0F 13 
10730     CC FA 23 DD | 	byte	$dc, $f3, $1b, $cd, $0c, $0c, $cb, $14, $0a, $cc, $0f, $13, $cc, $fa, $23, $dd
10734     DC 21 05 CB 
10738     F7 27 F2 C9 
1073c     00 26 F5 CA 
10740     F4 26 09 D1 | 	byte	$dc, $21, $05, $cb, $f7, $27, $f2, $c9, $00, $26, $f5, $ca, $f4, $26, $09, $d1
10744     D7 13 24 F6 
10748     CA E1 17 24 
1074c     F9 CD D6 07 
10750     27 12 E1 C9 | 	byte	$d7, $13, $24, $f6, $ca, $e1, $17, $24, $f9, $cd, $d6, $07, $27, $12, $e1, $c9
10754     E1 11 27 13 
10758     E5 C9 D6 00 
1075c     22 23 02 DB 
10760     C8 D8 FF 1F | 	byte	$e1, $11, $27, $13, $e5, $c9, $d6, $00, $22, $23, $02, $db, $c8, $d8, $ff, $1f
10764     27 11 EB CF 
10768     CA E1 04 20 
1076c     28 15 F6 D7 
10770     C8 D0 EB 0A | 	byte	$27, $11, $eb, $cf, $ca, $e1, $04, $20, $28, $15, $f6, $d7, $c8, $d0, $eb, $0a
10774     21 27 19 FE 
10778     E1 CD C8 D7 
1077c     F1 0D 20 27 
10780     1F 09 EF D8 | 	byte	$21, $27, $19, $fe, $e1, $cd, $c8, $d7, $f1, $0d, $20, $27, $1f, $09, $ef, $d8
10784     CA CA DA F4 
10788     0E 22 28 1D 
1078c     05 E8 D1 C8 
10790     D2 ED 0B 21 | 	byte	$ca, $ca, $da, $f4, $0e, $22, $28, $1d, $05, $e8, $d1, $c8, $d2, $ed, $0b, $21
10794     27 17 FA DB 
10798     C9 CE E8 0A 
1079c     23 26 0E EB 
107a0     CF C9 E1 08 | 	byte	$27, $17, $fa, $db, $c9, $ce, $e8, $0a, $23, $26, $0e, $eb, $cf, $c9, $e1, $08
107a4     23 24 06 DF 
107a8     C9 D5 FD 20 
107ac     25 05 DB C8 
107b0     DF 0E 26 15 | 	byte	$23, $24, $06, $df, $c9, $d5, $fd, $20, $25, $05, $db, $c8, $df, $0e, $26, $15
107b4     E6 C9 DD 0C 
107b8     27 0C DB CA 
107bc     F3 21 1C E8 
107c0     C9 ED 1F 19 | 	byte	$e6, $c9, $dd, $0c, $27, $0c, $db, $ca, $f3, $21, $1c, $e8, $c9, $ed, $1f, $19
107c4     E0 CB FE 26 
107c8     02 CC E7 20 
107cc     0F D2 E1 1F 
107d0     0D CE EC 24 | 	byte	$e0, $cb, $fe, $26, $02, $cc, $e7, $20, $0f, $d2, $e1, $1f, $0d, $ce, $ec, $24
107d4     F9 CB 0C 1C 
107d8     D2 ED 23 E4 
107dc     DC 22 EE D9 
107e0     21 EA DE 23 | 	byte	$f9, $cb, $0c, $1c, $d2, $ed, $23, $e4, $dc, $22, $ee, $d9, $21, $ea, $de, $23
107e4     DB F4 18 CC 
107e8     18 F2 E6 1C 
107ec     CD 1D E3 02 
107f0     FE E8 12 D8 | 	byte	$db, $f4, $18, $cc, $18, $f2, $e6, $1c, $cd, $1d, $e3, $02, $fe, $e8, $12, $d8
107f4     1B D1 1D D1 
107f8     1C D3 18 DB 
107fc     0D F1 F0 0E 
10800     DA 1D DC 05 | 	byte	$1b, $d1, $1d, $d1, $1c, $d3, $18, $db, $0d, $f1, $f0, $0e, $da, $1d, $dc, $05
10804     08 D7 15 F4 
10808     E0 17 F6 DB 
1080c     10 06 D7 F1 
10810     19 00 D8 EA | 	byte	$08, $d7, $15, $f4, $e0, $17, $f6, $db, $10, $06, $d7, $f1, $19, $00, $d8, $ea
10814     0E 14 F8 E0 
10818     E3 FA 0A 13 
1081c     0B FC EB E4 
10820     DF E1 E1 E0 | 	byte	$0e, $14, $f8, $e0, $e3, $fa, $0a, $13, $0b, $fc, $eb, $e4, $df, $e1, $e1, $e0
10824     E0 E0 E1 DD 
10828     E1 E5 F0 FC 
1082c     09 0B 08 F7 
10830     E9 EA FE 0B | 	byte	$e0, $e0, $e1, $dd, $e1, $e5, $f0, $fc, $09, $0b, $08, $f7, $e9, $ea, $fe, $0b
10834     FA E5 F3 0E 
10838     FF E2 04 02 
1083c     E5 04 FA EC 
10840     04 EF FE F8 | 	byte	$fa, $e5, $f3, $0e, $ff, $e2, $04, $02, $e5, $04, $fa, $ec, $04, $ef, $fe, $f8
10844     F5 FD F2 FD 
10848     F1 FC FC F0 
1084c     FE F2 FC F5 
10850     F8 FE ED 04 | 	byte	$f5, $fd, $f2, $fd, $f1, $fc, $fc, $f0, $fe, $f2, $fc, $f5, $f8, $fe, $ed, $04
10854     EE F7 08 EB 
10858     F8 0B EF E9 
1085c     07 05 EC DF 
10860     FD 0E 06 F7 | 	byte	$ee, $f7, $08, $eb, $f8, $0b, $ef, $e9, $07, $05, $ec, $df, $fd, $0e, $06, $f7
10864     E8 E3 E9 F2 
10868     FB 04 08 0A 
1086c     0F 0F 0F 0F 
10870     0C 00 F7 E6 | 	byte	$e8, $e3, $e9, $f2, $fb, $04, $08, $0a, $0f, $0f, $0f, $0f, $0c, $00, $f7, $e6
10874     DE DC E9 FE 
10878     12 0F F2 DD 
1087c     EA 0B 13 EA 
10880     DD 05 11 DF | 	byte	$de, $dc, $e9, $fe, $12, $0f, $f2, $dd, $ea, $0b, $13, $ea, $dd, $05, $11, $df
10884     E9 1B EE E2 
10888     19 EB E9 19 
1088c     D8 08 FF E2 
10890     1A D4 19 DA | 	byte	$e9, $1b, $ee, $e2, $19, $eb, $e9, $19, $d8, $08, $ff, $e2, $1a, $d4, $19, $da
10894     0E E9 05 F1 
10898     FF EF 05 E5 
1089c     13 D8 1E CF 
108a0     1D DF 02 05 | 	byte	$0e, $e9, $05, $f1, $ff, $ef, $05, $e5, $13, $d8, $1e, $cf, $1d, $df, $02, $05
108a4     D7 22 D7 02 
108a8     0E CE 1C F7 
108ac     D7 22 EA DB 
108b0     22 F0 D4 1C | 	byte	$d7, $22, $d7, $02, $0e, $ce, $1c, $f7, $d7, $22, $ea, $db, $22, $f0, $d4, $1c
108b4     05 CC 07 1D 
108b8     D8 E1 20 05 
108bc     CC F3 25 00 
108c0     CB F2 24 06 | 	byte	$05, $cc, $07, $1d, $d8, $e1, $20, $05, $cc, $f3, $25, $00, $cb, $f2, $24, $06
108c4     CF DF 19 1D 
108c8     E7 CA F4 21 
108cc     16 E1 CA F1 
108d0     1F 20 F0 CB | 	byte	$cf, $df, $19, $1d, $e7, $ca, $f4, $21, $16, $e1, $ca, $f1, $1f, $20, $f0, $cb
108d4     D8 08 25 15 
108d8     E8 CA D8 03 
108dc     23 1F FB D4 
108e0     CA E5 0C 25 | 	byte	$d8, $08, $25, $15, $e8, $ca, $d8, $03, $23, $1f, $fb, $d4, $ca, $e5, $0c, $25
108e4     1F 00 D8 C9 
108e8     D6 F9 1A 27 
108ec     1A FB DA CA 
108f0     D1 EC 0C 22 | 	byte	$1f, $00, $d8, $c9, $d6, $f9, $1a, $27, $1a, $fb, $da, $ca, $d1, $ec, $0c, $22
108f4     26 14 F7 DB 
108f8     CA CD E0 FE 
108fc     17 25 24 12 
10900     FA DF CE C9 | 	byte	$26, $14, $f7, $db, $ca, $cd, $e0, $fe, $17, $25, $24, $12, $fa, $df, $ce, $c9
10904     D4 EA 03 18 
10908     24 24 18 02 
1090c     EA D4 CA CB 
10910     DC F5 0D 21 | 	byte	$d4, $ea, $03, $18, $24, $24, $18, $02, $ea, $d4, $ca, $cb, $dc, $f5, $0d, $21
10914     27 1C 04 EA 
10918     D2 C9 D1 EA 
1091c     08 1F 27 1A 
10920     00 E1 CC CC | 	byte	$27, $1c, $04, $ea, $d2, $c9, $d1, $ea, $08, $1f, $27, $1a, $00, $e1, $cc, $cc
10924     E3 04 1E 27 
10928     14 F4 D4 C9 
1092c     DB FF 1E 26 
10930     0F E9 CC CF | 	byte	$e3, $04, $1e, $27, $14, $f4, $d4, $c9, $db, $ff, $1e, $26, $0f, $e9, $cc, $cf
10934     F0 17 26 10 
10938     E6 CA D7 00 
1093c     22 1D F5 CF 
10940     D3 00 23 17 | 	byte	$f0, $17, $26, $10, $e6, $ca, $d7, $00, $22, $1d, $f5, $cf, $d3, $00, $23, $17
10944     E7 C9 E5 18 
10948     22 F5 CC E0 
1094c     16 20 ED CA 
10950     F1 22 0B D2 | 	byte	$e7, $c9, $e5, $18, $22, $f5, $cc, $e0, $16, $20, $ed, $ca, $f1, $22, $0b, $d2
10954     DC 19 18 DB 
10958     D8 17 16 D5 
1095c     E1 21 03 CC 
10960     02 1F DA E4 | 	byte	$dc, $19, $18, $db, $d8, $17, $16, $d5, $e1, $21, $03, $cc, $02, $1f, $da, $e4
10964     21 ED D7 1F 
10968     F5 D5 1F EE 
1096c     DC 23 E1 F3 
10970     1A CE 16 F2 | 	byte	$21, $ed, $d7, $1f, $f5, $d5, $1f, $ee, $dc, $23, $e1, $f3, $1a, $ce, $16, $f2
10974     E7 1C D0 1C 
10978     DF 04 F9 EA 
1097c     0E DB 18 D5 
10980     1C D4 19 D9 | 	byte	$e7, $1c, $d0, $1c, $df, $04, $f9, $ea, $0e, $db, $18, $d5, $1c, $d4, $19, $d9
10984     13 E6 05 F7 
10988     E9 14 D5 18 
1098c     E5 F6 13 D5 
10990     0B 03 D8 0F | 	byte	$13, $e6, $05, $f7, $e9, $14, $d5, $18, $e5, $f6, $13, $d5, $0b, $03, $d8, $0f
10994     FF D5 03 15 
10998     E3 E6 0E 0D 
1099c     E3 E2 02 15 
109a0     02 E3 DF EE | 	byte	$ff, $d5, $03, $15, $e3, $e6, $0e, $0d, $e3, $e2, $02, $15, $02, $e3, $df, $ee
109a4     03 14 13 07 
109a8     F6 E9 E0 E0 
109ac     DE E0 E1 E1 
109b0     E2 E2 E3 E5 | 	byte	$03, $14, $13, $07, $f6, $e9, $e0, $e0, $de, $e0, $e1, $e1, $e2, $e2, $e3, $e5
109b4     EA F6 03 0E 
109b8     0D FE EC E1 
109bc     EE 0B 06 EF 
109c0     E8 FF 05 EF | 	byte	$ea, $f6, $03, $0e, $0d, $fe, $ec, $e1, $ee, $0b, $06, $ef, $e8, $ff, $05, $ef
109c4     EE 04 F7 EA 
109c8     07 F8 EE 08 
109cc     E6 0B F0 FD 
109d0     F7 F7 03 ED | 	byte	$ee, $04, $f7, $ea, $07, $f8, $ee, $08, $e6, $0b, $f0, $fd, $f7, $f7, $03, $ed
109d4     05 EC FD FE 
109d8     EB 01 02 E9 
109dc     F8 0A F1 E4 
109e0     00 10 01 E7 | 	byte	$05, $ec, $fd, $fe, $eb, $01, $02, $e9, $f8, $0a, $f1, $e4, $00, $10, $01, $e7
109e4     E4 F9 07 0B 
109e8     07 FD F2 EC 
109ec     E7 E5 E1 E2 
109f0     E1 E1 E0 E4 | 	byte	$e4, $f9, $07, $0b, $07, $fd, $f2, $ec, $e7, $e5, $e1, $e2, $e1, $e1, $e0, $e4
109f4     E8 F1 02 0E 
109f8     12 0C F6 E0 
109fc     DF F6 10 0A 
10a00     E6 DE 01 16 | 	byte	$e8, $f1, $02, $0e, $12, $0c, $f6, $e0, $df, $f6, $10, $0a, $e6, $de, $01, $16
10a04     EC DF 0D 0B 
10a08     D3 01 14 D8 
10a0c     FD 10 D5 11 
10a10     F2 EA 15 D5 | 	byte	$ec, $df, $0d, $0b, $d3, $01, $14, $d8, $fd, $10, $d5, $11, $f2, $ea, $15, $d5
10a14     19 DE 0A EF 
10a18     FB FE EF FF 
10a1c     F1 FD F4 F4 
10a20     05 E1 19 D1 | 	byte	$19, $de, $0a, $ef, $fb, $fe, $ef, $ff, $f1, $fd, $f4, $f4, $05, $e1, $19, $d1
10a24     1F D9 08 00 
10a28     DA 21 D6 02 
10a2c     0E CE 19 F9 
10a30     D4 1E F3 D5 | 	byte	$1f, $d9, $08, $00, $da, $21, $d6, $02, $0e, $ce, $19, $f9, $d4, $1e, $f3, $d5
10a34     1C FA D0 14 
10a38     0D CF F9 22 
10a3c     E5 D4 15 15 
10a40     D5 DF 1D 11 | 	byte	$1c, $fa, $d0, $14, $0d, $cf, $f9, $22, $e5, $d4, $15, $15, $d5, $df, $1d, $11
10a44     D4 DC 16 1B 
10a48     E3 CD 00 24 
10a4c     05 D2 D6 0A 
10a50     25 02 D3 D1 | 	byte	$d4, $dc, $16, $1b, $e3, $cd, $00, $24, $05, $d2, $d6, $0a, $25, $02, $d3, $d1
10a54     FF 23 16 E7 
10a58     CB DE 0C 25 
10a5c     13 E8 CB D7 
10a60     FF 20 21 02 | 	byte	$ff, $23, $16, $e7, $cb, $de, $0c, $25, $13, $e8, $cb, $d7, $ff, $20, $21, $02
10a64     DB CA D9 FF 
10a68     1F 25 0D E9 
10a6c     CF CC E3 05 
10a70     1E 25 13 F5 | 	byte	$db, $ca, $d9, $ff, $1f, $25, $0d, $e9, $cf, $cc, $e3, $05, $1e, $25, $13, $f5
10a74     D7 CA D2 EB 
10a78     08 1F 25 18 
10a7c     00 E4 D0 CA 
10a80     D6 ED 07 1B | 	byte	$d7, $ca, $d2, $eb, $08, $1f, $25, $18, $00, $e4, $d0, $ca, $d6, $ed, $07, $1b
10a84     24 20 0F F7 
10a88     DF D0 CA D2 
10a8c     E4 FC 11 1F 
10a90     24 20 0F F9 | 	byte	$24, $20, $0f, $f7, $df, $d0, $ca, $d2, $e4, $fc, $11, $1f, $24, $20, $0f, $f9
10a94     E3 D1 CA CE 
10a98     E0 F8 0F 20 
10a9c     25 1C 06 ED 
10aa0     D6 CA CF E2 | 	byte	$e3, $d1, $ca, $ce, $e0, $f8, $0f, $20, $25, $1c, $06, $ed, $d6, $ca, $cf, $e2
10aa4     FE 17 24 21 
10aa8     0A EE D4 CA 
10aac     D5 F0 0F 23 
10ab0     22 0B EA D0 | 	byte	$fe, $17, $24, $21, $0a, $ee, $d4, $ca, $d5, $f0, $0f, $23, $22, $0b, $ea, $d0
10ab4     CC E1 04 1F 
10ab8     23 0A E6 CD 
10abc     D1 F3 16 25 
10ac0     10 E9 CC D4 | 	byte	$cc, $e1, $04, $1f, $23, $0a, $e6, $cd, $d1, $f3, $16, $25, $10, $e9, $cc, $d4
10ac4     FD 1F 1F F9 
10ac8     D1 CF F7 1E 
10acc     1D F2 CD DB 
10ad0     0C 24 04 D4 | 	byte	$fd, $1f, $1f, $f9, $d1, $cf, $f7, $1e, $1d, $f2, $cd, $db, $0c, $24, $04, $d4
10ad4     D4 07 24 FF 
10ad8     D0 DE 17 1C 
10adc     E4 CE 04 23 
10ae0     F3 CC FF 22 | 	byte	$d4, $07, $24, $ff, $d0, $de, $17, $1c, $e4, $ce, $04, $23, $f3, $cc, $ff, $22
10ae4     EC CF 0D 1A 
10ae8     D8 E4 20 FB 
10aec     CF 10 0F CE 
10af0     02 17 D0 00 | 	byte	$ec, $cf, $0d, $1a, $d8, $e4, $20, $fb, $cf, $10, $0f, $ce, $02, $17, $d0, $00
10af4     15 CF 09 07 
10af8     D0 1B EB E8 
10afc     1C D0 16 ED 
10b00     EE 12 D3 20 | 	byte	$15, $cf, $09, $07, $d0, $1b, $eb, $e8, $1c, $d0, $16, $ed, $ee, $12, $d3, $20
10b04     D1 19 DC 0F 
10b08     E6 07 EA 06 
10b0c     E9 0A DE 17 
10b10     D6 1C D7 0C | 	byte	$d1, $19, $dc, $0f, $e6, $07, $ea, $06, $e9, $0a, $de, $17, $d6, $1c, $d7, $0c
10b14     F2 E7 19 D3 
10b18     0C FB DC 16 
10b1c     F5 DF 15 FD 
10b20     DB 04 11 E4 | 	byte	$f2, $e7, $19, $d3, $0c, $fb, $dc, $16, $f5, $df, $15, $fd, $db, $04, $11, $e4
10b24     E4 0B 10 EA 
10b28     DC F4 13 11 
10b2c     F7 E0 DE EF 
10b30     00 0E 0F 0A | 	byte	$e4, $0b, $10, $ea, $dc, $f4, $13, $11, $f7, $e0, $de, $ef, $00, $0e, $0f, $0a
10b34     06 FE F8 F2 
10b38     EF EE F0 F2 
10b3c     F8 FF 09 0E 
10b40     0D 07 F8 EC | 	byte	$06, $fe, $f8, $f2, $ef, $ee, $f0, $f2, $f8, $ff, $09, $0e, $0d, $07, $f8, $ec
10b44     E4 ED 00 0A 
10b48     00 EA EA 03 
10b4c     08 EE E7 0B 
10b50     00 E2 08 FB | 	byte	$e4, $ed, $00, $0a, $00, $ea, $ea, $03, $08, $ee, $e7, $0b, $00, $e2, $08, $fb
10b54     E9 07 F0 F4 
10b58     05 EA FE 00 
10b5c     EA FA 07 ED 
10b60     E8 00 0A F0 | 	byte	$e9, $07, $f0, $f4, $05, $ea, $fe, $00, $ea, $fa, $07, $ed, $e8, $00, $0a, $f0
10b64     E1 F5 0B 09 
10b68     FE EC E4 E5 
10b6c     EE F6 FE 05 
10b70     06 09 0C 0C | 	byte	$e1, $f5, $0b, $09, $fe, $ec, $e4, $e5, $ee, $f6, $fe, $05, $06, $09, $0c, $0c
10b74     0B 08 00 FB 
10b78     EE E0 DB E5 
10b7c     F8 09 12 01 
10b80     E6 DD F5 12 | 	byte	$0b, $08, $00, $fb, $ee, $e0, $db, $e5, $f8, $09, $12, $01, $e6, $dd, $f5, $12
10b84     07 DD E8 11 
10b88     02 D5 F8 18 
10b8c     E1 EC 17 E2 
10b90     F1 13 D6 0C | 	byte	$07, $dd, $e8, $11, $02, $d5, $f8, $18, $e1, $ec, $17, $e2, $f1, $13, $d6, $0c
10b94     F5 E7 16 D4 
10b98     19 DB 0C EA 
10b9c     FE F3 F9 F5 
10ba0     FB EF 05 E2 | 	byte	$f5, $e7, $16, $d4, $19, $db, $0c, $ea, $fe, $f3, $f9, $f5, $fb, $ef, $05, $e2
10ba4     14 D4 1F D4 
10ba8     12 EF ED 17 
10bac     CF 18 F0 E1 
10bb0     20 D8 FA 19 | 	byte	$14, $d4, $1f, $d4, $12, $ef, $ed, $17, $cf, $18, $f0, $e1, $20, $d8, $fa, $19
10bb4     D1 02 16 D0 
10bb8     FD 1C D7 EA 
10bbc     22 ED D2 12 
10bc0     12 D3 E6 1F | 	byte	$d1, $02, $16, $d0, $fd, $1c, $d7, $ea, $22, $ed, $d2, $12, $12, $d3, $e6, $1f
10bc4     04 CF ED 21 
10bc8     07 D1 E2 1A 
10bcc     18 E1 CF FD 
10bd0     23 09 D6 D2 | 	byte	$04, $cf, $ed, $21, $07, $d1, $e2, $1a, $18, $e1, $cf, $fd, $23, $09, $d6, $d2
10bd4     01 23 0E E0 
10bd8     CB EE 1A 21 
10bdc     FC D4 CF F3 
10be0     1A 22 05 DD | 	byte	$01, $23, $0e, $e0, $cb, $ee, $1a, $21, $fc, $d4, $cf, $f3, $1a, $22, $05, $dd
10be4     CB DE 05 20 
10be8     20 01 DD CB 
10bec     D6 F8 18 24 
10bf0     17 F8 DA CC | 	byte	$cb, $de, $05, $20, $20, $01, $dd, $cb, $d6, $f8, $18, $24, $17, $f8, $da, $cc
10bf4     D5 F0 0E 21 
10bf8     22 0E F1 D8 
10bfc     CB D1 E7 02 
10c00     19 23 1F 0B | 	byte	$d5, $f0, $0e, $21, $22, $0e, $f1, $d8, $cb, $d1, $e7, $02, $19, $23, $1f, $0b
10c04     F2 DB CD CD 
10c08     DA F0 08 1A 
10c0c     23 20 12 FE 
10c10     E8 D6 CD CD | 	byte	$f2, $db, $cd, $cd, $da, $f0, $08, $1a, $23, $20, $12, $fe, $e8, $d6, $cd, $cd
10c14     D8 EA FF 11 
10c18     1E 24 1F 10 
10c1c     FC E6 D4 CC 
10c20     CE DB F1 09 | 	byte	$d8, $ea, $ff, $11, $1e, $24, $1f, $10, $fc, $e6, $d4, $cc, $ce, $db, $f1, $09
10c24     1C 23 20 0F 
10c28     F7 DE CF CB 
10c2c     D9 F1 0C 1E 
10c30     24 17 FE E2 | 	byte	$1c, $23, $20, $0f, $f7, $de, $cf, $cb, $d9, $f1, $0c, $1e, $24, $17, $fe, $e2
10c34     CF CC DF FD 
10c38     18 23 1B 01 
10c3c     E1 CD D0 EC 
10c40     0C 22 1F 01 | 	byte	$cf, $cc, $df, $fd, $18, $23, $1b, $01, $e1, $cd, $d0, $ec, $0c, $22, $1f, $01
10c44     DE CC D8 FA 
10c48     1B 22 08 E0 
10c4c     CC DB 05 21 
10c50     1A F3 CF D4 | 	byte	$de, $cc, $d8, $fa, $1b, $22, $08, $e0, $cc, $db, $05, $21, $1a, $f3, $cf, $d4
10c54     FF 21 16 E9 
10c58     CC E2 13 22 
10c5c     FB CF DC 0E 
10c60     21 F6 CD E8 | 	byte	$ff, $21, $16, $e9, $cc, $e2, $13, $22, $fb, $cf, $dc, $0e, $21, $f6, $cd, $e8
10c64     1C 13 DB D5 
10c68     0D 1D E6 D1 
10c6c     0A 1C E0 D7 
10c70     17 10 D0 F2 | 	byte	$1c, $13, $db, $d5, $0d, $1d, $e6, $d1, $0a, $1c, $e0, $d7, $17, $10, $d0, $f2
10c74     21 E9 D8 1B 
10c78     FD CF 12 08 
10c7c     CF 12 02 D1 
10c80     1A F0 E0 20 | 	byte	$21, $e9, $d8, $1b, $fd, $cf, $12, $08, $cf, $12, $02, $d1, $1a, $f0, $e0, $20
10c84     D8 FF 09 D6 
10c88     1E D7 0A F6 
10c8c     EA 10 D7 1C 
10c90     D1 1C D3 1A | 	byte	$d8, $ff, $09, $d6, $1e, $d7, $0a, $f6, $ea, $10, $d7, $1c, $d1, $1c, $d3, $1a
10c94     D5 1B D3 1D 
10c98     D1 1A DC 0A 
10c9c     F3 EB 12 D6 
10ca0     15 EC EC 16 | 	byte	$d5, $1b, $d3, $1d, $d1, $1a, $dc, $0a, $f3, $eb, $12, $d6, $15, $ec, $ec, $16
10ca4     DB FA 12 D8 
10ca8     FA 17 E2 E5 
10cac     14 05 DA ED 
10cb0     12 08 E6 DE | 	byte	$db, $fa, $12, $d8, $fa, $17, $e2, $e5, $14, $05, $da, $ed, $12, $08, $e6, $de
10cb4     F8 0F 0E F7 
10cb8     E1 DF EA FA 
10cbc     07 10 13 11 
10cc0     0E 08 02 01 | 	byte	$f8, $0f, $0e, $f7, $e1, $df, $ea, $fa, $07, $10, $13, $11, $0e, $08, $02, $01
10cc4     02 03 04 09 
10cc8     08 0C 0A 01 
10ccc     F6 EB E3 ED 
10cd0     01 0E 01 E9 | 	byte	$02, $03, $04, $09, $08, $0c, $0a, $01, $f6, $eb, $e3, $ed, $01, $0e, $01, $e9
10cd4     E4 FB 09 F7 
10cd8     E7 FC 05 EE 
10cdc     F0 06 F3 EC 
10ce0     01 FD E6 F3 | 	byte	$e4, $fb, $09, $f7, $e7, $fc, $05, $ee, $f0, $06, $f3, $ec, $01, $fd, $e6, $f3
10ce4     0C FF E8 E4 
10ce8     FB 0A 09 FC 
10cec     EE E4 E5 EA 
10cf0     EE F6 FB 02 | 	byte	$0c, $ff, $e8, $e4, $fb, $0a, $09, $fc, $ee, $e4, $e5, $ea, $ee, $f6, $fb, $02
10cf4     04 03 02 01 
10cf8     FC EF E6 E0 
10cfc     DC E5 F3 06 
10d00     10 09 F0 DD | 	byte	$04, $03, $02, $01, $fc, $ef, $e6, $e0, $dc, $e5, $f3, $06, $10, $09, $f0, $dd
10d04     EB 08 11 F0 
10d08     DC FB 17 F1 
10d0c     DC 0D 0B D7 
10d10     04 0E D8 07 | 	byte	$eb, $08, $11, $f0, $dc, $fb, $17, $f1, $dc, $0d, $0b, $d7, $04, $0e, $d8, $07
10d14     04 D9 17 E4 
10d18     F6 07 DC 1B 
10d1c     D4 16 DD 0B 
10d20     E7 05 EC 06 | 	byte	$04, $d9, $17, $e4, $f6, $07, $dc, $1b, $d4, $16, $dd, $0b, $e7, $05, $ec, $06
10d24     E7 0D DB 18 
10d28     D2 1C D7 0D 
10d2c     F2 E9 17 D0 
10d30     16 F0 E2 1F | 	byte	$e7, $0d, $db, $18, $d2, $1c, $d7, $0d, $f2, $e9, $17, $d0, $16, $f0, $e2, $1f
10d34     D7 FC 16 D1 
10d38     05 12 D0 02 
10d3c     16 D4 F4 20 
10d40     E4 D9 18 09 | 	byte	$d7, $fc, $16, $d1, $05, $12, $d0, $02, $16, $d4, $f4, $20, $e4, $d9, $18, $09
10d44     CF F3 21 F7 
10d48     CE FD 21 F7 
10d4c     CE F2 1F 0A 
10d50     D5 D9 0D 20 | 	byte	$cf, $f3, $21, $f7, $ce, $fd, $21, $f7, $ce, $f2, $1f, $0a, $d5, $d9, $0d, $20
10d54     F7 CF E0 12 
10d58     21 FC D2 D6 
10d5c     02 21 13 E8 
10d60     CD DC 07 22 | 	byte	$f7, $cf, $e0, $12, $21, $fc, $d2, $d6, $02, $21, $13, $e8, $cd, $dc, $07, $22
10d64     16 F0 D0 D2 
10d68     F3 17 23 10 
10d6c     EC D0 CE EA 
10d70     0D 21 1D 03 | 	byte	$16, $f0, $d0, $d2, $f3, $17, $23, $10, $ec, $d0, $ce, $ea, $0d, $21, $1d, $03
10d74     E3 CE D0 E6 
10d78     05 1D 23 14 
10d7c     F9 DF CE CF 
10d80     E1 FC 13 21 | 	byte	$e3, $ce, $d0, $e6, $05, $1d, $23, $14, $f9, $df, $ce, $cf, $e1, $fc, $13, $21
10d84     21 10 FA E1 
10d88     D0 CC D6 EB 
10d8c     02 16 21 21 
10d90     16 03 EE DB | 	byte	$21, $10, $fa, $e1, $d0, $cc, $d6, $eb, $02, $16, $21, $21, $16, $03, $ee, $db
10d94     D0 CC D4 E5 
10d98     F9 0B 1A 21 
10d9c     21 17 07 F5 
10da0     E2 D4 CC CE | 	byte	$d0, $cc, $d4, $e5, $f9, $0b, $1a, $21, $21, $17, $07, $f5, $e2, $d4, $cc, $ce
10da4     D9 EC 01 13 
10da8     1F 23 1A 08 
10dac     F3 DE D0 CC 
10db0     D6 EA 02 17 | 	byte	$d9, $ec, $01, $13, $1f, $23, $1a, $08, $f3, $de, $d0, $cc, $d6, $ea, $02, $17
10db4     22 20 0F F7 
10db8     DE CE CE DE 
10dbc     FA 12 21 1F 
10dc0     0A EE D5 CC | 	byte	$22, $20, $0f, $f7, $de, $ce, $ce, $de, $fa, $12, $21, $1f, $0a, $ee, $d5, $cc
10dc4     D9 F6 13 22 
10dc8     1B FF DF CC 
10dcc     D5 F5 14 22 
10dd0     13 F1 D1 CF | 	byte	$d9, $f6, $13, $22, $1b, $ff, $df, $cc, $d5, $f5, $14, $22, $13, $f1, $d1, $cf
10dd4     EC 12 23 0E 
10dd8     E7 CE DA 03 
10ddc     20 15 EB CD 
10de0     DF 0C 22 05 | 	byte	$ec, $12, $23, $0e, $e7, $ce, $da, $03, $20, $15, $eb, $cd, $df, $0c, $22, $05
10de4     D8 D2 FD 21 
10de8     0C DB D2 03 
10dec     21 FD CF E6 
10df0     1A 12 D9 D9 | 	byte	$d8, $d2, $fd, $21, $0c, $db, $d2, $03, $21, $fd, $cf, $e6, $1a, $12, $d9, $d9
10df4     13 16 D9 DC 
10df8     18 0B D2 F0 
10dfc     1F F0 D3 14 
10e00     09 CF 03 16 | 	byte	$13, $16, $d9, $dc, $18, $0b, $d2, $f0, $1f, $f0, $d3, $14, $09, $cf, $03, $16
10e04     D2 FF 17 D1 
10e08     02 0F D0 14 
10e0c     F9 DB 1E D9 
10e10     02 03 DB 1C | 	byte	$d2, $ff, $17, $d1, $02, $0f, $d0, $14, $f9, $db, $1e, $d9, $02, $03, $db, $1c
10e14     D3 13 E7 FD 
10e18     FD E9 0B DF 
10e1c     12 DB 12 DC 
10e20     0E E5 06 F5 | 	byte	$d3, $13, $e7, $fd, $fd, $e9, $0b, $df, $12, $db, $12, $dc, $0e, $e5, $06, $f5
10e24     F1 0A DB 19 
10e28     D9 09 FC DE 
10e2c     19 E1 F0 17 
10e30     DE F4 15 E6 | 	byte	$f1, $0a, $db, $19, $d9, $09, $fc, $de, $19, $e1, $f0, $17, $de, $f4, $15, $e6
10e34     E7 13 00 DC 
10e38     F6 14 FB DB 
10e3c     EA 0A 13 FA 
10e40     DF E0 F1 06 | 	byte	$e7, $13, $00, $dc, $f6, $14, $fb, $db, $ea, $0a, $13, $fa, $df, $e0, $f1, $06
10e44     10 0F 04 F6 
10e48     EA E4 E0 E2 
10e4c     E3 E4 E5 E4 
10e50     E2 E1 DF E2 | 	byte	$10, $0f, $04, $f6, $ea, $e4, $e0, $e2, $e3, $e4, $e5, $e4, $e2, $e1, $df, $e2
10e54     E9 F7 05 0C 
10e58     09 FD ED E5 
10e5c     EE 01 08 FA 
10e60     E9 ED 01 00 | 	byte	$e9, $f7, $05, $0c, $09, $fd, $ed, $e5, $ee, $01, $08, $fa, $e9, $ed, $01, $00
10e64     E8 F0 0B 02 
10e68     EA E0 F8 0A 
10e6c     09 FE ED E5 
10e70     E5 EB F1 FA | 	byte	$e8, $f0, $0b, $02, $ea, $e0, $f8, $0a, $09, $fe, $ed, $e5, $e5, $eb, $f1, $fa
10e74     00 05 04 09 
10e78     08 08 00 FF 
10e7c     FA ED E2 DD 
10e80     E5 F0 06 12 | 	byte	$00, $05, $04, $09, $08, $08, $00, $ff, $fa, $ed, $e2, $dd, $e5, $f0, $06, $12
10e84     0B EF DD E8 
10e88     08 10 F2 DA 
10e8c     FC 16 F0 D9 
10e90     09 0C DA FD | 	byte	$0b, $ef, $dd, $e8, $08, $10, $f2, $da, $fc, $16, $f0, $d9, $09, $0c, $da, $fd
10e94     10 D9 01 09 
10e98     DA 13 EB EF 
10e9c     0F D8 19 D9 
10ea0     0F E8 00 F6 | 	byte	$10, $d9, $01, $09, $da, $13, $eb, $ef, $0f, $d8, $19, $d9, $0f, $e8, $00, $f6
10ea4     F7 FB F5 F9 
10ea8     FC EE 08 DE 
10eac     18 D2 1A DC 
10eb0     03 02 DB 1F | 	byte	$f7, $fb, $f5, $f9, $fc, $ee, $08, $de, $18, $d2, $1a, $dc, $03, $02, $db, $1f
10eb4     D8 FF 0D D0 
10eb8     17 F6 D8 1D 
10ebc     EE DB 1D F2 
10ec0     D6 17 03 CF | 	byte	$d8, $ff, $0d, $d0, $17, $f6, $d8, $1d, $ee, $db, $1d, $f2, $d6, $17, $03, $cf
10ec4     02 1B DF DE 
10ec8     1B 09 D1 ED 
10ecc     1E 03 D1 EA 
10ed0     1C 0D D8 D8 | 	byte	$02, $1b, $df, $de, $1b, $09, $d1, $ed, $1e, $03, $d1, $ea, $1c, $0d, $d8, $d8
10ed4     0B 1F F5 CF 
10ed8     E5 16 1E F2 
10edc     CE DE 0D 21 
10ee0     06 DB CE ED | 	byte	$0b, $1f, $f5, $cf, $e5, $16, $1e, $f2, $ce, $de, $0d, $21, $06, $db, $ce, $ed
10ee4     15 20 05 DD 
10ee8     CD E2 09 20 
10eec     18 F7 D6 CE 
10ef0     E2 06 1E 1F | 	byte	$15, $20, $05, $dd, $cd, $e2, $09, $20, $18, $f7, $d6, $ce, $e2, $06, $1e, $1f
10ef4     06 E6 D0 D0 
10ef8     E6 06 1C 21 
10efc     11 F6 DB CE 
10f00     D2 E7 03 18 | 	byte	$06, $e6, $d0, $d0, $e6, $06, $1c, $21, $11, $f6, $db, $ce, $d2, $e7, $03, $18
10f04     21 1B 07 EE 
10f08     D9 CE D0 E1 
10f0c     F8 0D 1D 21 
10f10     1A 09 F4 E0 | 	byte	$21, $1b, $07, $ee, $d9, $ce, $d0, $e1, $f8, $0d, $1d, $21, $1a, $09, $f4, $e0
10f14     D2 CE D3 E1 
10f18     F6 08 17 1F 
10f1c     20 17 08 F6 
10f20     E5 D8 CF CF | 	byte	$d2, $ce, $d3, $e1, $f6, $08, $17, $1f, $20, $17, $08, $f6, $e5, $d8, $cf, $cf
10f24     D5 E2 F3 06 
10f28     15 1F 22 1D 
10f2c     0F FD E9 D9 
10f30     CF CE D7 E9 | 	byte	$d5, $e2, $f3, $06, $15, $1f, $22, $1d, $0f, $fd, $e9, $d9, $cf, $ce, $d7, $e9
10f34     FE 11 1E 21 
10f38     19 07 F0 DC 
10f3c     CF CD DB F2 
10f40     0A 1C 21 18 | 	byte	$fe, $11, $1e, $21, $19, $07, $f0, $dc, $cf, $cd, $db, $f2, $0a, $1c, $21, $18
10f44     02 E9 D4 CC 
10f48     D8 F1 0C 1F 
10f4c     20 0E F0 D6 
10f50     CD DA F9 16 | 	byte	$02, $e9, $d4, $cc, $d8, $f1, $0c, $1f, $20, $0e, $f0, $d6, $cd, $da, $f9, $16
10f54     21 15 F6 D8 
10f58     CD E0 02 1D 
10f5c     1D 00 DD CD 
10f60     E1 08 21 14 | 	byte	$21, $15, $f6, $d8, $cd, $e0, $02, $1d, $1d, $00, $dd, $cd, $e1, $08, $21, $14
10f64     ED D0 D8 01 
10f68     1F 13 E8 CE 
10f6c     E4 12 1F FB 
10f70     D1 DD 0D 20 | 	byte	$ed, $d0, $d8, $01, $1f, $13, $e8, $ce, $e4, $12, $1f, $fb, $d1, $dd, $0d, $20
10f74     F7 CF E7 19 
10f78     13 DE D5 0B 
10f7c     1D E8 D1 07 
10f80     1B E3 D7 12 | 	byte	$f7, $cf, $e7, $19, $13, $de, $d5, $0b, $1d, $e8, $d1, $07, $1b, $e3, $d7, $12
10f84     0F D3 EE 1F 
10f88     EB D6 18 01 
10f8c     D0 0D 09 D0 
10f90     0E 06 D1 15 | 	byte	$0f, $d3, $ee, $1f, $eb, $d6, $18, $01, $d0, $0d, $09, $d0, $0e, $06, $d1, $15
10f94     F7 DD 1E DD 
10f98     FB 0D D4 1C 
10f9c     DC FF 01 E5 
10fa0     14 D6 1B D4 | 	byte	$f7, $dd, $1e, $dd, $fb, $0d, $d4, $1c, $dc, $ff, $01, $e5, $14, $d6, $1b, $d4
10fa4     19 D9 15 DA 
10fa8     14 D9 18 D4 
10fac     1A D7 12 E9 
10fb0     F8 06 DA 17 | 	byte	$19, $d9, $15, $da, $14, $d9, $18, $d4, $1a, $d7, $12, $e9, $f8, $06, $da, $17
10fb4     E0 FA 0C D9 
10fb8     0A FE DB 0B 
10fbc     03 D9 00 10 
10fc0     E4 E2 0E 0D | 	byte	$e0, $fa, $0c, $d9, $0a, $fe, $db, $0b, $03, $d9, $00, $10, $e4, $e2, $0e, $0d
10fc4     E3 E1 02 12 
10fc8     01 E3 DD F1 
10fcc     08 0F 08 FB 
10fd0     EA E0 E0 E4 | 	byte	$e3, $e1, $02, $12, $01, $e3, $dd, $f1, $08, $0f, $08, $fb, $ea, $e0, $e0, $e4
10fd4     EA EF F3 F8 
10fd8     F9 FB F8 F6 
10fdc     EF EB E7 E4 
10fe0     E3 ED F7 05 | 	byte	$ea, $ef, $f3, $f8, $f9, $fb, $f8, $f6, $ef, $eb, $e7, $e4, $e3, $ed, $f7, $05
10fe4     0B 04 F3 E5 
10fe8     E8 00 0E 01 
10fec     E6 E4 F6 07 
10ff0     08 05 FB F1 | 	byte	$0b, $04, $f3, $e5, $e8, $00, $0e, $01, $e6, $e4, $f6, $07, $08, $05, $fb, $f1
10ff4     E9 E4 E2 E5 
10ff8     E4 E6 E5 E3 
10ffc     E1 DE DB E1 
11000     E6 F1 FD 0B | 	byte	$e9, $e4, $e2, $e5, $e4, $e6, $e5, $e3, $e1, $de, $db, $e1, $e6, $f1, $fd, $0b
11004     0F 06 F1 DF 
11008     E3 FE 11 05 
1100c     E4 E2 06 0F 
11010     E8 E0 0D 08 | 	byte	$0f, $06, $f1, $df, $e3, $fe, $11, $05, $e4, $e2, $06, $0f, $e8, $e0, $0d, $08
11014     DA FA 11 DC 
11018     F9 10 D9 09 
1101c     FF DD 17 DB 
11020     07 F7 EE 0F | 	byte	$da, $fa, $11, $dc, $f9, $10, $d9, $09, $ff, $dd, $17, $db, $07, $f7, $ee, $0f
11024     D9 18 D4 1A 
11028     D4 19 D4 1A 
1102c     D5 18 DB 0B 
11030     EF F3 0C D7 | 	byte	$d9, $18, $d4, $1a, $d4, $19, $d4, $1a, $d5, $18, $db, $0b, $ef, $f3, $0c, $d7
11034     1D D7 04 02 
11038     D6 1C E2 EF 
1103c     1A D5 FD 14 
11040     D3 FF 16 D5 | 	byte	$1d, $d7, $04, $02, $d6, $1c, $e2, $ef, $1a, $d5, $fd, $14, $d3, $ff, $16, $d5
11044     F5 1D E1 DF 
11048     1B FF CF FF 
1104c     1F E8 D4 0B 
11050     1A E4 D3 07 | 	byte	$f5, $1d, $e1, $df, $1b, $ff, $cf, $ff, $1f, $e8, $d4, $0b, $1a, $e4, $d3, $07
11054     1E F1 CF F2 
11058     1D 0E DD D3 
1105c     00 1F 09 DD 
11060     D0 F6 1C 18 | 	byte	$1e, $f1, $cf, $f2, $1d, $0e, $dd, $d3, $00, $1f, $09, $dd, $d0, $f6, $1c, $18
11064     EF D0 DB 03 
11068     1F 15 EF D1 
1106c     D4 F6 17 20 
11070     08 E5 D0 D5 | 	byte	$ef, $d0, $db, $03, $1f, $15, $ef, $d1, $d4, $f6, $17, $20, $08, $e5, $d0, $d5
11074     F4 12 20 15 
11078     F8 DA CE D9 
1107c     F4 10 1F 1C 
11080     06 EB D4 CE | 	byte	$f4, $12, $20, $15, $f8, $da, $ce, $d9, $f4, $10, $1f, $1c, $06, $eb, $d4, $ce
11084     D9 F1 0A 1B 
11088     20 15 01 E8 
1108c     D6 CE D4 E4 
11090     FC 10 1D 20 | 	byte	$d9, $f1, $0a, $1b, $20, $15, $01, $e8, $d6, $ce, $d4, $e4, $fc, $10, $1d, $20
11094     18 07 F3 E0 
11098     D2 CE D3 E1 
1109c     F4 06 15 1E 
110a0     1F 19 0B FB | 	byte	$18, $07, $f3, $e0, $d2, $ce, $d3, $e1, $f4, $06, $15, $1e, $1f, $19, $0b, $fb
110a4     EA DB D2 CF 
110a8     D3 DD EB FC 
110ac     0A 17 1F 20 
110b0     1A 0D FE EB | 	byte	$ea, $db, $d2, $cf, $d3, $dd, $eb, $fc, $0a, $17, $1f, $20, $1a, $0d, $fe, $eb
110b4     DB D1 CE D3 
110b8     E1 F4 06 16 
110bc     1F 1F 15 03 
110c0     EF DC D0 CE | 	byte	$db, $d1, $ce, $d3, $e1, $f4, $06, $16, $1f, $1f, $15, $03, $ef, $dc, $d0, $ce
110c4     D9 ED 03 16 
110c8     1F 1E 0D F6 
110cc     DF D0 CF DE 
110d0     F7 0F 1F 1F | 	byte	$d9, $ed, $03, $16, $1f, $1e, $0d, $f6, $df, $d0, $cf, $de, $f7, $0f, $1f, $1f
110d4     0B F1 D7 CE 
110d8     D8 F3 0F 1F 
110dc     1A 01 E2 CF 
110e0     D4 F0 10 20 | 	byte	$0b, $f1, $d7, $ce, $d8, $f3, $0f, $1f, $1a, $01, $e2, $cf, $d4, $f0, $10, $20
110e4     13 F2 D5 CF 
110e8     EC 0F 1F 0E 
110ec     E7 CF DC 03 
110f0     1E 12 EA CF | 	byte	$13, $f2, $d5, $cf, $ec, $0f, $1f, $0e, $e7, $cf, $dc, $03, $1e, $12, $ea, $cf
110f4     E1 0E 20 00 
110f8     D6 D7 04 1F 
110fc     02 D6 DA 0C 
11100     1E F1 CF F4 | 	byte	$e1, $0e, $20, $00, $d6, $d7, $04, $1f, $02, $d6, $da, $0c, $1e, $f1, $cf, $f4
11104     1E 02 D2 EA 
11108     1C 02 D0 F1 
1110c     1F F3 D1 0B 
11110     14 D7 EE 1E | 	byte	$1e, $02, $d2, $ea, $1c, $02, $d0, $f1, $1f, $f3, $d1, $0b, $14, $d7, $ee, $1e
11114     E7 DD 1B F1 
11118     D9 1A F0 DD 
1111c     1D E3 EE 18 
11120     D3 0B FB DD | 	byte	$e7, $dd, $1b, $f1, $d9, $1a, $f0, $dd, $1d, $e3, $ee, $18, $d3, $0b, $fb, $dd
11124     1B D5 0D F2 
11128     F0 0A DA 18 
1112c     D4 19 D6 17 
11130     D8 16 D8 18 | 	byte	$1b, $d5, $0d, $f2, $f0, $0a, $da, $18, $d4, $19, $d6, $17, $d8, $16, $d8, $18
11134     D5 18 D6 13 
11138     E2 00 FE E5 
1113c     13 D9 0A FC 
11140     DE 15 EC E7 | 	byte	$d5, $18, $d6, $13, $e2, $00, $fe, $e5, $13, $d9, $0a, $fc, $de, $15, $ec, $e7
11144     16 E8 E2 13 
11148     FA D9 04 10 
1114c     EB DE 02 11 
11150     F6 DD E9 04 | 	byte	$16, $e8, $e2, $13, $fa, $d9, $04, $10, $eb, $de, $02, $11, $f6, $dd, $e9, $04
11154     11 03 EB DC 
11158     E2 F2 01 0F 
1115c     0F 0D 06 FE 
11160     F6 F2 F1 EF | 	byte	$11, $03, $eb, $dc, $e2, $f2, $01, $0f, $0f, $0d, $06, $fe, $f6, $f2, $f1, $ef
11164     EF F4 F6 FB 
11168     01 08 0D 0D 
1116c     07 F9 EA E2 
11170     EB F9 08 09 | 	byte	$ef, $f4, $f6, $fb, $01, $08, $0d, $0d, $07, $f9, $ea, $e2, $eb, $f9, $08, $09
11174     06 FB F2 EA 
11178     E6 E4 E3 E4 
1117c     E0 DF DE DD 
11180     E0 E2 EB F4 | 	byte	$06, $fb, $f2, $ea, $e6, $e4, $e3, $e4, $e0, $df, $de, $dd, $e0, $e2, $eb, $f4
11184     04 0B 0E 06 
11188     F3 E0 E1 F5 
1118c     0C 0B ED DC 
11190     FB 13 00 D9 | 	byte	$04, $0b, $0e, $06, $f3, $e0, $e1, $f5, $0c, $0b, $ed, $dc, $fb, $13, $00, $d9
11194     F3 15 F0 DE 
11198     0F FF DA 0B 
1119c     FC DD 15 E8 
111a0     F0 10 D7 15 | 	byte	$f3, $15, $f0, $de, $0f, $ff, $da, $0b, $fc, $dd, $15, $e8, $f0, $10, $d7, $15
111a4     E2 FE FD E9 
111a8     0D DC 14 D8 
111ac     16 D8 15 DB 
111b0     0F E5 03 F8 | 	byte	$e2, $fe, $fd, $e9, $0d, $dc, $14, $d8, $16, $d8, $15, $db, $0f, $e5, $03, $f8
111b4     EC 10 D5 1B 
111b8     DB 00 04 D6 
111bc     1B E3 EF 17 
111c0     D5 01 0F D2 | 	byte	$ec, $10, $d5, $1b, $db, $00, $04, $d6, $1b, $e3, $ef, $17, $d5, $01, $0f, $d2
111c4     06 0F D2 FF 
111c8     17 D9 E9 1E 
111cc     F0 D3 0C 15 
111d0     DA E0 17 0B | 	byte	$06, $0f, $d2, $ff, $17, $d9, $e9, $1e, $f0, $d3, $0c, $15, $da, $e0, $17, $0b
111d4     D6 E2 16 11 
111d8     DD D6 08 1E 
111dc     F5 D0 E6 15 
111e0     19 F1 D0 E5 | 	byte	$d6, $e2, $16, $11, $dd, $d6, $08, $1e, $f5, $d0, $e6, $15, $19, $f1, $d0, $e5
111e4     10 1F FF D6 
111e8     D3 F8 1A 1B 
111ec     F9 D6 D2 F1 
111f0     14 1F 0A E7 | 	byte	$10, $1f, $ff, $d6, $d3, $f8, $1a, $1b, $f9, $d6, $d2, $f1, $14, $1f, $0a, $e7
111f4     D0 D6 F5 13 
111f8     1F 12 F4 D8 
111fc     CF DD FA 14 
11200     1F 17 FF E4 | 	byte	$d0, $d6, $f5, $13, $1f, $12, $f4, $d8, $cf, $dd, $fa, $14, $1f, $17, $ff, $e4
11204     D1 D0 E1 FC 
11208     12 1E 1D 0B 
1120c     F4 DE D1 D0 
11210     DD F3 08 18 | 	byte	$d1, $d0, $e1, $fc, $12, $1e, $1d, $0b, $f4, $de, $d1, $d0, $dd, $f3, $08, $18
11214     1F 1B 0C F9 
11218     E5 D6 CF D2 
1121c     DE F0 02 12 
11220     1C 1F 19 0C | 	byte	$1f, $1b, $0c, $f9, $e5, $d6, $cf, $d2, $de, $f0, $02, $12, $1c, $1f, $19, $0c
11224     FC EB DD D3 
11228     CF D3 DD EB 
1122c     FB 09 15 1B 
11230     1E 1B 11 04 | 	byte	$fc, $eb, $dd, $d3, $cf, $d3, $dd, $eb, $fb, $09, $15, $1b, $1e, $1b, $11, $04
11234     F6 E7 DA D1 
11238     CF D2 DE ED 
1123c     FE 0D 19 1F 
11240     1D 13 04 F1 | 	byte	$f6, $e7, $da, $d1, $cf, $d2, $de, $ed, $fe, $0d, $19, $1f, $1d, $13, $04, $f1
11244     E1 D4 CF D3 
11248     E1 F5 09 18 
1124c     1F 1C 0E F9 
11250     E4 D4 CF D7 | 	byte	$e1, $d4, $cf, $d3, $e1, $f5, $09, $18, $1f, $1c, $0e, $f9, $e4, $d4, $cf, $d7
11254     E9 00 15 1F 
11258     1B 09 F0 D8 
1125c     CF D5 EC 06 
11260     1A 1F 0F F4 | 	byte	$e9, $00, $15, $1f, $1b, $09, $f0, $d8, $cf, $d5, $ec, $06, $1a, $1f, $0f, $f4
11264     D8 CF DA F7 
11268     13 1F 13 F5 
1126c     D8 CF E3 05 
11270     1D 18 F9 D7 | 	byte	$d8, $cf, $da, $f7, $13, $1f, $13, $f5, $d8, $cf, $e3, $05, $1d, $18, $f9, $d7
11274     D0 EB 10 1F 
11278     07 E0 CF E7 
1127c     10 1F 01 D8 
11280     D5 FC 1D 0C | 	byte	$d0, $eb, $10, $1f, $07, $e0, $cf, $e7, $10, $1f, $01, $d8, $d5, $fc, $1d, $0c
11284     DD D3 FD 1E 
11288     05 D6 DD 10 
1128c     18 E6 D2 02 
11290     1D EE D2 04 | 	byte	$dd, $d3, $fd, $1e, $05, $d6, $dd, $10, $18, $e6, $d2, $02, $1d, $ee, $d2, $04
11294     1A E4 D8 13 
11298     0A D4 F5 1C 
1129c     E5 E0 1B F2 
112a0     D8 18 F9 D8 | 	byte	$1a, $e4, $d8, $13, $0a, $d4, $f5, $1c, $e5, $e0, $1b, $f2, $d8, $18, $f9, $d8
112a4     19 F0 E0 1B 
112a8     DD F8 0F D3 
112ac     15 EA F2 0D 
112b0     D5 1A D8 0E | 	byte	$19, $f0, $e0, $1b, $dd, $f8, $0f, $d3, $15, $ea, $f2, $0d, $d5, $1a, $d8, $0e
112b4     E9 FD FA ED 
112b8     04 E7 08 E7 
112bc     06 EC FE F5 
112c0     EF 07 DD 16 | 	byte	$e9, $fd, $fa, $ed, $04, $e7, $08, $e7, $06, $ec, $fe, $f5, $ef, $07, $dd, $16
112c4     D9 0D F2 E9 
112c8     15 D9 02 04 
112cc     D9 0C FF DB 
112d0     08 06 DB F5 | 	byte	$d9, $0d, $f2, $e9, $15, $d9, $02, $04, $d9, $0c, $ff, $db, $08, $06, $db, $f5
112d4     11 EF DF FE 
112d8     13 F6 D8 EC 
112dc     0B 11 FB E1 
112e0     DF F0 06 0E | 	byte	$11, $ef, $df, $fe, $13, $f6, $d8, $ec, $0b, $11, $fb, $e1, $df, $f0, $06, $0e
112e4     0A 01 F2 E9 
112e8     E3 E2 E0 E3 
112ec     E7 E7 E8 E4 
112f0     E4 E3 E1 E1 | 	byte	$0a, $01, $f2, $e9, $e3, $e2, $e0, $e3, $e7, $e7, $e8, $e4, $e4, $e3, $e1, $e1
112f4     E5 EC F5 00 
112f8     07 08 0A 0A 
112fc     04 03 02 00 
11300     03 06 09 0B | 	byte	$e5, $ec, $f5, $00, $07, $08, $0a, $0a, $04, $03, $02, $00, $03, $06, $09, $0b
11304     0F 0E 0A F9 
11308     EF E3 E1 F0 
1130c     04 0E 05 E9 
11310     E0 F8 12 23 | 	byte	$0f, $0e, $0a, $f9, $ef, $e3, $e1, $f0, $04, $0e, $05, $e9, $e0, $f8, $12, $23
11314     E1 E4 0D 09 
11318     DE F0 12 ED 
1131c     E6 12 F0 E5 
11320     15 E4 F6 0D | 	byte	$e1, $e4, $0d, $09, $de, $f0, $12, $ed, $e6, $12, $f0, $e5, $15, $e4, $f6, $0d
11324     D8 11 E9 F6 
11328     07 E0 16 D7 
1132c     17 D8 15 DA 
11330     14 D9 16 D6 | 	byte	$d8, $11, $e9, $f6, $07, $e0, $16, $d7, $17, $d8, $15, $da, $14, $d9, $16, $d6
11334     19 D7 14 E1 
11338     02 FD E3 18 
1133c     D3 12 F2 E5 
11340     19 D7 02 0B | 	byte	$19, $d7, $14, $e1, $02, $fd, $e3, $18, $d3, $12, $f2, $e5, $19, $d7, $02, $0b
11344     D2 0E 00 D3 
11348     11 03 D2 09 
1134c     0E D4 F8 1C 
11350     E5 DA 14 0A | 	byte	$d2, $0e, $00, $d3, $11, $03, $d2, $09, $0e, $d4, $f8, $1c, $e5, $da, $14, $0a
11354     D5 E9 1B 03 
11358     D3 EA 19 09 
1135c     D7 DD 0F 1A 
11360     EF D0 ED 18 | 	byte	$d5, $e9, $1b, $03, $d3, $ea, $19, $09, $d7, $dd, $0f, $1a, $ef, $d0, $ed, $18
11364     15 E9 D0 E9 
11368     13 1B FA D6 
1136c     D6 FA 1A 18 
11370     F6 D5 D3 F2 | 	byte	$15, $e9, $d0, $e9, $13, $1b, $fa, $d6, $d6, $fa, $1a, $18, $f6, $d5, $d3, $f2
11374     13 1E 09 E8 
11378     D1 D6 F3 11 
1137c     1F 12 F6 D8 
11380     CF DB F6 10 | 	byte	$13, $1e, $09, $e8, $d1, $d6, $f3, $11, $1f, $12, $f6, $d8, $cf, $db, $f6, $10
11384     1E 18 03 E8 
11388     D4 D0 DC F4 
1138c     0C 1B 1E 11 
11390     FC E6 D5 CF | 	byte	$1e, $18, $03, $e8, $d4, $d0, $dc, $f4, $0c, $1b, $1e, $11, $fc, $e6, $d5, $cf
11394     D7 E8 FE 10 
11398     1C 1E 14 04 
1139c     F0 E0 D4 D0 
113a0     D6 E3 F4 05 | 	byte	$d7, $e8, $fe, $10, $1c, $1e, $14, $04, $f0, $e0, $d4, $d0, $d6, $e3, $f4, $05
113a4     13 1C 1D 18 
113a8     0B FB EC DE 
113ac     D4 D0 D3 DB 
113b0     E7 F6 04 10 | 	byte	$13, $1c, $1d, $18, $0b, $fb, $ec, $de, $d4, $d0, $d3, $db, $e7, $f6, $04, $10
113b4     18 1C 1C 15 
113b8     0B FF F1 E3 
113bc     D8 D1 CF D4 
113c0     DE EC FC 0B | 	byte	$18, $1c, $1c, $15, $0b, $ff, $f1, $e3, $d8, $d1, $cf, $d4, $de, $ec, $fc, $0b
113c4     16 1C 1E 17 
113c8     0A FA E9 DB 
113cc     D2 D0 D6 E5 
113d0     F8 09 18 1F | 	byte	$16, $1c, $1e, $17, $0a, $fa, $e9, $db, $d2, $d0, $d6, $e5, $f8, $09, $18, $1f
113d4     1B 0E FC E7 
113d8     D8 D0 D3 E3 
113dc     F9 0D 1B 1E 
113e0     12 FE E6 D4 | 	byte	$1b, $0e, $fc, $e7, $d8, $d0, $d3, $e3, $f9, $0d, $1b, $1e, $12, $fe, $e6, $d4
113e4     CF DC F3 0B 
113e8     1C 1C 0A F1 
113ec     D9 CF DC F7 
113f0     11 1E 13 F7 | 	byte	$cf, $dc, $f3, $0b, $1c, $1c, $0a, $f1, $d9, $cf, $dc, $f7, $11, $1e, $13, $f7
113f4     DB CF DF 00 
113f8     19 1C 01 E0 
113fc     CF E1 05 1C 
11400     12 EF D2 DA | 	byte	$db, $cf, $df, $00, $19, $1c, $01, $e0, $cf, $e1, $05, $1c, $12, $ef, $d2, $da
11404     00 1C 11 E8 
11408     D0 E6 11 1B 
1140c     F6 D2 E0 0F 
11410     1A F1 D1 EE | 	byte	$00, $1c, $11, $e8, $d0, $e6, $11, $1b, $f6, $d2, $e0, $0f, $1a, $f1, $d1, $ee
11414     1A 0A D9 DC 
11418     10 14 DF DA 
1141c     10 11 DA E4 
11420     19 FE D1 FF | 	byte	$1a, $0a, $d9, $dc, $10, $14, $df, $da, $10, $11, $da, $e4, $19, $fe, $d1, $ff
11424     16 DB E9 1B 
11428     E8 E0 1A EE 
1142c     DE 1A E9 E6 
11430     1A DC FB 0D | 	byte	$16, $db, $e9, $1b, $e8, $e0, $1a, $ee, $de, $1a, $e9, $e6, $1a, $dc, $fb, $0d
11434     D4 16 E7 F3 
11438     0D D6 18 DB 
1143c     0B EE F8 FF 
11440     EA 09 E2 0E | 	byte	$d4, $16, $e7, $f3, $0d, $d6, $18, $db, $0b, $ee, $f8, $ff, $ea, $09, $e2, $0e
11444     E0 0D E3 08 
11448     EA FE FB E9 
1144c     0E D9 15 E2 
11450     FE 04 DC 13 | 	byte	$e0, $0d, $e3, $08, $ea, $fe, $fb, $e9, $0e, $d9, $15, $e2, $fe, $04, $dc, $13
11454     EB EB 13 E3 
11458     F1 13 E8 E6 
1145c     11 FC D9 01 
11460     11 F3 DC F6 | 	byte	$eb, $eb, $13, $e3, $f1, $13, $e8, $e6, $11, $fc, $d9, $01, $11, $f3, $dc, $f6
11464     0F 03 E6 E1 
11468     F5 0A 0C FB 
1146c     E7 DE E3 F2 
11470     FE 0A 0F 0E | 	byte	$0f, $03, $e6, $e1, $f5, $0a, $0c, $fb, $e7, $de, $e3, $f2, $fe, $0a, $0f, $0e
11474     0B 07 04 FF 
11478     FD FC FE 00 
1147c     01 05 08 0B 
11480     0C 0D 0E 0E | 	byte	$0b, $07, $04, $ff, $fd, $fc, $fe, $00, $01, $05, $08, $0b, $0c, $0d, $0e, $0e
11484     0D 0A FD FB 
11488     EF E5 E1 E3 
1148c     F1 03 0E 08 
11490     F1 DF E7 02 | 	byte	$0d, $0a, $fd, $fb, $ef, $e5, $e1, $e3, $f1, $03, $0e, $08, $f1, $df, $e7, $02
11494     10 FA DC EF 
11498     10 FE DE F4 
1149c     12 F0 E1 10 
114a0     F6 DE 0F F1 | 	byte	$10, $fa, $dc, $ef, $10, $fe, $de, $f4, $12, $f0, $e1, $10, $f6, $de, $0f, $f1
114a4     E4 14 E0 FB 
114a8     02 DF 17 DA 
114ac     0D ED FB FB 
114b0     EB 07 E6 08 | 	byte	$e4, $14, $e0, $fb, $02, $df, $17, $da, $0d, $ed, $fb, $fb, $eb, $07, $e6, $08
114b4     E8 07 EA FF 
114b8     F8 EE 0A DB 
114bc     18 D4 11 ED 
114c0     EE 12 D4 11 | 	byte	$e8, $07, $ea, $ff, $f8, $ee, $0a, $db, $18, $d4, $11, $ed, $ee, $12, $d4, $11
114c4     F5 E1 19 E0 
114c8     F0 17 D9 F6 
114cc     17 DA F0 1C 
114d0     E3 DF 19 FD | 	byte	$f5, $e1, $19, $e0, $f0, $17, $d9, $f6, $17, $da, $f0, $1c, $e3, $df, $19, $fd
114d4     D3 01 19 E4 
114d8     D9 0F 12 DD 
114dc     DB 0F 15 E4 
114e0     D4 01 1D FB | 	byte	$d3, $01, $19, $e4, $d9, $0f, $12, $dd, $db, $0f, $15, $e4, $d4, $01, $1d, $fb
114e4     D3 E2 0E 1A 
114e8     F4 D2 E1 0C 
114ec     1D 01 DA D4 
114f0     F4 16 19 FA | 	byte	$d3, $e2, $0e, $1a, $f4, $d2, $e1, $0c, $1d, $01, $da, $d4, $f4, $16, $19, $fa
114f4     D8 D2 EE 0F 
114f8     1D 0C EA D3 
114fc     D6 F1 0F 1D 
11500     12 F7 DC D0 | 	byte	$d8, $d2, $ee, $0f, $1d, $0c, $ea, $d3, $d6, $f1, $0f, $1d, $12, $f7, $dc, $d0
11504     DC F6 10 1D 
11508     18 02 E8 D4 
1150c     D1 DE F5 0C 
11510     1A 1C 0F FB | 	byte	$dc, $f6, $10, $1d, $18, $02, $e8, $d4, $d1, $de, $f5, $0c, $1a, $1c, $0f, $fb
11514     E5 D5 D0 D9 
11518     EA FF 10 1B 
1151c     1C 12 02 F0 
11520     DF D4 D1 D7 | 	byte	$e5, $d5, $d0, $d9, $ea, $ff, $10, $1b, $1c, $12, $02, $f0, $df, $d4, $d1, $d7
11524     E5 F5 05 13 
11528     1B 1C 16 0A 
1152c     FB EC E0 D5 
11530     D1 D3 DC E6 | 	byte	$e5, $f5, $05, $13, $1b, $1c, $16, $0a, $fb, $ec, $e0, $d5, $d1, $d3, $dc, $e6
11534     F5 02 0E 17 
11538     1B 1B 15 0C 
1153c     01 F5 E8 DE 
11540     D6 D1 D2 D8 | 	byte	$f5, $02, $0e, $17, $1b, $1b, $15, $0c, $01, $f5, $e8, $de, $d6, $d1, $d2, $d8
11544     E1 EF FD 09 
11548     14 1B 1D 19 
1154c     0F 02 F3 E3 
11550     D8 D1 D1 D8 | 	byte	$e1, $ef, $fd, $09, $14, $1b, $1d, $19, $0f, $02, $f3, $e3, $d8, $d1, $d1, $d8
11554     E6 F7 07 15 
11558     1C 1C 13 03 
1155c     F1 E1 D4 D0 
11560     D7 E7 FC 0D | 	byte	$e6, $f7, $07, $15, $1c, $1c, $13, $03, $f1, $e1, $d4, $d0, $d7, $e7, $fc, $0d
11564     1A 1D 12 FF 
11568     EA D8 D0 D7 
1156c     E9 01 15 1D 
11570     15 01 E8 D4 | 	byte	$1a, $1d, $12, $ff, $ea, $d8, $d0, $d7, $e9, $01, $15, $1d, $15, $01, $e8, $d4
11574     D1 E1 FC 13 
11578     1D 12 F7 DC 
1157c     D0 DC F9 15 
11580     1D 09 E9 D3 | 	byte	$d1, $e1, $fc, $13, $1d, $12, $f7, $dc, $d0, $dc, $f9, $15, $1d, $09, $e9, $d3
11584     D7 F6 14 1B 
11588     03 DF D0 E7 
1158c     0D 1D 06 DF 
11590     D1 F0 16 16 | 	byte	$d7, $f6, $14, $1b, $03, $df, $d0, $e7, $0d, $1d, $06, $df, $d1, $f0, $16, $16
11594     F1 D2 E5 11 
11598     17 EF D1 EE 
1159c     18 0D DD DA 
115a0     0A 17 E7 D5 | 	byte	$f1, $d2, $e5, $11, $17, $ef, $d1, $ee, $18, $0d, $dd, $da, $0a, $17, $e7, $d5
115a4     06 18 E4 D8 
115a8     0E 0E D8 EC 
115ac     1A F1 D6 10 
115b0     05 D3 05 0C | 	byte	$06, $18, $e4, $d8, $0e, $0e, $d8, $ec, $1a, $f1, $d6, $10, $05, $d3, $05, $0c
115b4     D4 03 0C D3 
115b8     0B 00 D6 17 
115bc     E9 EC 13 D6 
115c0     10 EE EF 0D | 	byte	$d4, $03, $0c, $d3, $0b, $00, $d6, $17, $e9, $ec, $13, $d6, $10, $ee, $ef, $0d
115c4     D8 18 D9 10 
115c8     E4 02 F1 F8 
115cc     FB F3 FA F5 
115d0     F6 FB EB 09 | 	byte	$d8, $18, $d9, $10, $e4, $02, $f1, $f8, $fb, $f3, $fa, $f5, $f6, $fb, $eb, $09
115d4     DE 13 D9 0F 
115d8     E9 F7 06 DA 
115dc     11 EE E7 14 
115e0     E1 F1 11 E5 | 	byte	$de, $13, $d9, $0f, $e9, $f7, $06, $da, $11, $ee, $e7, $14, $e1, $f1, $11, $e5
115e4     ED 11 F3 DF 
115e8     07 0A E5 E6 
115ec     0A 0A EE E0 
115f0     F4 0E 0B F3 | 	byte	$ed, $11, $f3, $df, $07, $0a, $e5, $e6, $0a, $0a, $ee, $e0, $f4, $0e, $0b, $f3
115f4     E0 E2 F3 05 
115f8     0D 09 FE F1 
115fc     E7 E3 E2 E5 
11600     E7 EB EC ED | 	byte	$e0, $e2, $f3, $05, $0d, $09, $fe, $f1, $e7, $e3, $e2, $e5, $e7, $eb, $ec, $ed
11604     EE EF F1 F8 
11608     01 04 09 0C 
1160c     0A FF F1 E4 
11610     E2 F1 04 0E | 	byte	$ee, $ef, $f1, $f8, $01, $04, $09, $0c, $0a, $ff, $f1, $e4, $e2, $f1, $04, $0e
11614     01 E6 E0 FB 
11618     11 00 DE E9 
1161c     11 FC DE F6 
11620     0F E8 EA 12 | 	byte	$01, $e6, $e0, $fb, $11, $00, $de, $e9, $11, $fc, $de, $f6, $0f, $e8, $ea, $12
11624     EB E9 13 E3 
11628     F8 0B D9 0F 
1162c     EC F2 0A DC 
11630     15 D8 12 DF | 	byte	$eb, $e9, $13, $e3, $f8, $0b, $d9, $0f, $ec, $f2, $0a, $dc, $15, $d8, $12, $df
11634     0C E5 07 E7 
11638     09 E3 0E DA 
1163c     16 D5 16 DF 
11640     05 F8 E6 15 | 	byte	$0c, $e5, $07, $e7, $09, $e3, $0e, $da, $16, $d5, $16, $df, $05, $f8, $e6, $15
11644     D5 0E F5 E3 
11648     19 DC F9 0F 
1164c     D5 05 0A D3 
11650     05 0E D4 FB | 	byte	$d5, $0e, $f5, $e3, $19, $dc, $f9, $0f, $d5, $05, $0a, $d3, $05, $0e, $d4, $fb
11654     16 DD E6 19 
11658     F7 D2 03 18 
1165c     E4 D9 0C 14 
11660     E2 D8 08 18 | 	byte	$16, $dd, $e6, $19, $f7, $d2, $03, $18, $e4, $d9, $0c, $14, $e2, $d8, $08, $18
11664     EF D1 F4 1A 
11668     09 DD D6 FD 
1166c     1B 08 DE D3 
11670     F4 17 16 F2 | 	byte	$ef, $d1, $f4, $1a, $09, $dd, $d6, $fd, $1b, $08, $de, $d3, $f4, $17, $16, $f2
11674     D4 DA FD 19 
11678     16 F6 D8 D4 
1167c     EE 0E 1C 0F 
11680     F0 D6 D2 E8 | 	byte	$d4, $da, $fd, $19, $16, $f6, $d8, $d4, $ee, $0e, $1c, $0f, $f0, $d6, $d2, $e8
11684     05 19 1A 05 
11688     E9 D6 D2 E3 
1168c     FD 13 1C 15 
11690     01 E8 D7 D1 | 	byte	$05, $19, $1a, $05, $e9, $d6, $d2, $e3, $fd, $13, $1c, $15, $01, $e8, $d7, $d1
11694     DB EF 05 15 
11698     1C 16 06 F2 
1169c     DF D4 D2 DB 
116a0     EB FF 0E 18 | 	byte	$db, $ef, $05, $15, $1c, $16, $06, $f2, $df, $d4, $d2, $db, $eb, $ff, $0e, $18
116a4     1C 15 08 F9 
116a8     E7 DB D3 D2 
116ac     D9 E5 F6 03 
116b0     10 18 1B 18 | 	byte	$1c, $15, $08, $f9, $e7, $db, $d3, $d2, $d9, $e5, $f6, $03, $10, $18, $1b, $18
116b4     0F 04 F7 E9 
116b8     DE D6 D3 D4 
116bc     DA E4 F1 FD 
116c0     07 11 17 1A | 	byte	$0f, $04, $f7, $e9, $de, $d6, $d3, $d4, $da, $e4, $f1, $fd, $07, $11, $17, $1a
116c4     19 14 0C 01 
116c8     F6 EA E0 D7 
116cc     D2 D1 D6 DF 
116d0     EC FA 06 11 | 	byte	$19, $14, $0c, $01, $f6, $ea, $e0, $d7, $d2, $d1, $d6, $df, $ec, $fa, $06, $11
116d4     19 1C 18 10 
116d8     03 F4 E5 D9 
116dc     D3 D1 D8 E6 
116e0     F7 06 14 1B | 	byte	$19, $1c, $18, $10, $03, $f4, $e5, $d9, $d3, $d1, $d8, $e6, $f7, $06, $14, $1b
116e4     1B 12 03 F1 
116e8     DF D4 D1 D9 
116ec     E9 FF 0F 1A 
116f0     1B 0F FB E5 | 	byte	$1b, $12, $03, $f1, $df, $d4, $d1, $d9, $e9, $ff, $0f, $1a, $1b, $0f, $fb, $e5
116f4     D6 D1 DA EF 
116f8     07 17 1C 0F 
116fc     F8 DF D1 D6 
11700     EB 07 19 1A | 	byte	$d6, $d1, $da, $ef, $07, $17, $1c, $0f, $f8, $df, $d1, $d6, $eb, $07, $19, $1a
11704     05 E9 D4 D5 
11708     EC 0A 1B 13 
1170c     F6 D9 D2 E9 
11710     0C 1C 0B E8 | 	byte	$05, $e9, $d4, $d5, $ec, $0a, $1b, $13, $f6, $d9, $d2, $e9, $0c, $1c, $0b, $e8
11714     D1 DF 04 1B 
11718     0B E5 D1 EA 
1171c     10 18 F4 D3 
11720     E2 0D 18 F1 | 	byte	$d1, $df, $04, $1b, $0b, $e5, $d1, $ea, $10, $18, $f4, $d3, $e2, $0d, $18, $f1
11724     D2 EE 17 0C 
11728     DC DB 0C 15 
1172c     E4 D7 0A 13 
11730     DF DE 13 06 | 	byte	$d2, $ee, $17, $0c, $dc, $db, $0c, $15, $e4, $d7, $0a, $13, $df, $de, $13, $06
11734     D5 F7 18 E5 
11738     E1 17 F7 D7 
1173c     13 FD D6 11 
11740     F9 DA 16 EA | 	byte	$d5, $f7, $18, $e5, $e1, $17, $f7, $d7, $13, $fd, $d6, $11, $f9, $da, $16, $ea
11744     E8 16 D9 05 
11748     FE DE 17 D9 
1174c     09 F2 EE 0A 
11750     DB 16 D7 16 | 	byte	$e8, $16, $d9, $05, $fe, $de, $17, $d9, $09, $f2, $ee, $0a, $db, $16, $d7, $16
11754     D9 12 DC 11 
11758     DC 12 DA 13 
1175c     D9 14 DF 05 
11760     F2 EF 0F D9 | 	byte	$d9, $12, $dc, $11, $dc, $12, $da, $13, $d9, $14, $df, $05, $f2, $ef, $0f, $d9
11764     11 EC ED 10 
11768     DD FF 07 DC 
1176c     02 07 DD F8 
11770     0F E9 E4 0B | 	byte	$11, $ec, $ed, $10, $dd, $ff, $07, $dc, $02, $07, $dd, $f8, $0f, $e9, $e4, $0b
11774     06 E0 E4 09 
11778     0D EC DE EF 
1177c     08 0A F5 E5 
11780     E2 EE FF 0B | 	byte	$06, $e0, $e4, $09, $0d, $ec, $de, $ef, $08, $0a, $f5, $e5, $e2, $ee, $ff, $0b
11784     0D 02 FB F2 
11788     E6 E1 E0 E0 
1178c     E4 EB F6 05 
11790     0B 09 FE EE | 	byte	$0d, $02, $fb, $f2, $e6, $e1, $e0, $e0, $e4, $eb, $f6, $05, $0b, $09, $fe, $ee
11794     E2 E8 FC 0E 
11798     03 E9 E0 FE 
1179c     11 FE DE F3 
117a0     10 F7 DD 06 | 	byte	$e2, $e8, $fc, $0e, $03, $e9, $e0, $fe, $11, $fe, $de, $f3, $10, $f7, $dd, $06
117a4     08 DC FA 0C 
117a8     DD FD 05 DA 
117ac     0D F2 E7 13 
117b0     D8 0F E9 FB | 	byte	$08, $dc, $fa, $0c, $dd, $fd, $05, $da, $0d, $f2, $e7, $13, $d8, $0f, $e9, $fb
117b4     FB E8 0A DF 
117b8     10 DC 12 DC 
117bc     12 DE 0D E5 
117c0     01 F6 EC 0C | 	byte	$fb, $e8, $0a, $df, $10, $dc, $12, $dc, $12, $de, $0d, $e5, $01, $f6, $ec, $0c
117c4     D8 17 DB 03 
117c8     FE DC 17 DF 
117cc     F7 0E D6 08 
117d0     03 D5 0F FF | 	byte	$d8, $17, $db, $03, $fe, $dc, $17, $df, $f7, $0e, $d6, $08, $03, $d5, $0f, $ff
117d4     D4 0C 06 D4 
117d8     FE 15 DE E5 
117dc     17 FC D3 FB 
117e0     19 EC D4 02 | 	byte	$d4, $0c, $06, $d4, $fe, $15, $de, $e5, $17, $fc, $d3, $fb, $19, $ec, $d4, $02
117e4     19 EF D3 F8 
117e8     1A 00 D7 E0 
117ec     0E 18 F2 D3 
117f0     E5 0E 19 F9 | 	byte	$19, $ef, $d3, $f8, $1a, $00, $d7, $e0, $0e, $18, $f2, $d3, $e5, $0e, $19, $f9
117f4     D7 DA FF 19 
117f8     10 ED D3 DC 
117fc     FF 18 15 F9 
11800     DA D2 E7 06 | 	byte	$d7, $da, $ff, $19, $10, $ed, $d3, $dc, $ff, $18, $15, $f9, $da, $d2, $e7, $06
11804     1A 15 FD E0 
11808     D2 DA F5 0E 
1180c     1B 14 00 E5 
11810     D4 D3 E3 FC | 	byte	$1a, $15, $fd, $e0, $d2, $da, $f5, $0e, $1b, $14, $00, $e5, $d4, $d3, $e3, $fc
11814     10 1A 17 06 
11818     F2 DE D3 D4 
1181c     E2 F7 09 17 
11820     1B 14 05 F3 | 	byte	$10, $1a, $17, $06, $f2, $de, $d3, $d4, $e2, $f7, $09, $17, $1b, $14, $05, $f3
11824     E2 D7 D2 D7 
11828     E4 F5 05 12 
1182c     19 1A 13 07 
11830     F9 EA DE D5 | 	byte	$e2, $d7, $d2, $d7, $e4, $f5, $05, $12, $19, $1a, $13, $07, $f9, $ea, $de, $d5
11834     D3 D7 E0 EC 
11838     F9 06 10 17 
1183c     19 18 11 07 
11840     FC F0 E5 DC | 	byte	$d3, $d7, $e0, $ec, $f9, $06, $10, $17, $19, $18, $11, $07, $fc, $f0, $e5, $dc
11844     D6 D4 D6 DB 
11848     E3 EE F9 02 
1184c     0B 13 18 19 
11850     18 12 08 FE | 	byte	$d6, $d4, $d6, $db, $e3, $ee, $f9, $02, $0b, $13, $18, $19, $18, $12, $08, $fe
11854     F2 E6 DC D6 
11858     D2 D4 DA E4 
1185c     F2 FF 0B 14 
11860     19 1A 14 08 | 	byte	$f2, $e6, $dc, $d6, $d2, $d4, $da, $e4, $f2, $ff, $0b, $14, $19, $1a, $14, $08
11864     FA EC DF D5 
11868     D2 D6 E1 F0 
1186c     01 0F 19 1B 
11870     13 05 F5 E3 | 	byte	$fa, $ec, $df, $d5, $d2, $d6, $e1, $f0, $01, $0f, $19, $1b, $13, $05, $f5, $e3
11874     D6 D1 D8 E8 
11878     FC 0D 19 1A 
1187c     0F FB E5 D6 
11880     D2 DD F2 09 | 	byte	$d6, $d1, $d8, $e8, $fc, $0d, $19, $1a, $0f, $fb, $e5, $d6, $d2, $dd, $f2, $09
11884     18 1A 0A F2 
11888     DB D2 DB F4 
1188c     0D 1A 13 FB 
11890     DF D2 DD FA | 	byte	$18, $1a, $0a, $f2, $db, $d2, $db, $f4, $0d, $1a, $13, $fb, $df, $d2, $dd, $fa
11894     13 19 04 E4 
11898     D3 DE FE 18 
1189c     13 F4 D6 D9 
118a0     FB 17 12 ED | 	byte	$13, $19, $04, $e4, $d3, $de, $fe, $18, $13, $f4, $d6, $d9, $fb, $17, $12, $ed
118a4     D3 E3 0A 19 
118a8     FB D6 DF 0A 
118ac     19 F3 D4 EC 
118b0     15 0B DC DD | 	byte	$d3, $e3, $0a, $19, $fb, $d6, $df, $0a, $19, $f3, $d4, $ec, $15, $0b, $dc, $dd
118b4     0D 12 E1 DB 
118b8     0D 0E DB E5 
118bc     17 FF D3 FE 
118c0     13 DC EC 18 | 	byte	$0d, $12, $e1, $db, $0d, $0e, $db, $e5, $17, $ff, $d3, $fe, $13, $dc, $ec, $18
118c4     E8 E2 17 EB 
118c8     E1 17 E8 E9 
118cc     16 DB FD 08 
118d0     D6 15 E7 F5 | 	byte	$e8, $e2, $17, $eb, $e1, $17, $e8, $e9, $16, $db, $fd, $08, $d6, $15, $e7, $f5
118d4     0A D9 16 DB 
118d8     09 EE F6 00 
118dc     E6 0A DF 0F 
118e0     DD 10 DD 0F | 	byte	$0a, $d9, $16, $db, $09, $ee, $f6, $00, $e6, $0a, $df, $0f, $dd, $10, $dd, $0f
118e4     E2 06 EE F7 
118e8     01 E4 10 DB 
118ec     0D ED F1 0C 
118f0     DB 09 FD DF | 	byte	$e2, $06, $ee, $f7, $01, $e4, $10, $db, $0d, $ed, $f1, $0c, $db, $09, $fd, $df
118f4     0E F3 E0 0F 
118f8     FB DD 04 09 
118fc     E1 EB 0D FE 
11900     E1 EB 08 07 | 	byte	$0e, $f3, $e0, $0f, $fb, $dd, $04, $09, $e1, $eb, $0d, $fe, $e1, $eb, $08, $07
11904     ED E0 F1 08 
11908     0D FD E7 DD 
1190c     E7 FA 06 0C 
11910     09 00 F4 E8 | 	byte	$ed, $e0, $f1, $08, $0d, $fd, $e7, $dd, $e7, $fa, $06, $0c, $09, $00, $f4, $e8
11914     E1 E9 F9 0A 
11918     09 F6 E2 E6 
1191c     01 0F F8 DD 
11920     F2 0E FB DF | 	byte	$e1, $e9, $f9, $0a, $09, $f6, $e2, $e6, $01, $0f, $f8, $dd, $f2, $0e, $fb, $df
11924     F7 0F EB E5 
11928     0D F4 E0 0E 
1192c     F1 E5 12 E3 
11930     F6 07 D9 13 | 	byte	$f7, $0f, $eb, $e5, $0d, $f4, $e0, $0e, $f1, $e5, $12, $e3, $f6, $07, $d9, $13
11934     E3 02 FB E9 
11938     0A DD 12 DA 
1193c     13 D9 14 D9 
11940     15 D8 12 DF | 	byte	$e3, $02, $fb, $e9, $0a, $dd, $12, $da, $13, $d9, $14, $d9, $15, $d8, $12, $df
11944     09 EC F6 03 
11948     DE 16 DA 09 
1194c     F7 E2 16 DC 
11950     FD 0B D5 0A | 	byte	$09, $ec, $f6, $03, $de, $16, $da, $09, $f7, $e2, $16, $dc, $fd, $0b, $d5, $0a
11954     FF D7 10 FF 
11958     D6 0D 05 D5 
1195c     01 13 DD E7 
11960     16 FA D4 FA | 	byte	$ff, $d7, $10, $ff, $d6, $0d, $05, $d5, $01, $13, $dd, $e7, $16, $fa, $d4, $fa
11964     18 ED D5 01 
11968     18 F0 D3 F7 
1196c     19 01 D9 E0 
11970     0A 18 F5 D5 | 	byte	$18, $ed, $d5, $01, $18, $f0, $d3, $f7, $19, $01, $d9, $e0, $0a, $18, $f5, $d5
11974     E3 0B 19 FD 
11978     D9 D8 FA 17 
1197c     13 F2 D6 D9 
11980     F8 15 17 FE | 	byte	$e3, $0b, $19, $fd, $d9, $d8, $fa, $17, $13, $f2, $d6, $d9, $f8, $15, $17, $fe
11984     DF D3 E2 01 
11988     17 17 03 E6 
1198c     D4 D7 ED 07 
11990     18 18 05 ED | 	byte	$df, $d3, $e2, $01, $17, $17, $03, $e6, $d4, $d7, $ed, $07, $18, $18, $05, $ed
11994     D9 D3 DD F2 
11998     08 17 19 0E 
1199c     FA E5 D7 D3 
119a0     DB ED FF 0F | 	byte	$d9, $d3, $dd, $f2, $08, $17, $19, $0e, $fa, $e5, $d7, $d3, $db, $ed, $ff, $0f
119a4     19 18 0E FF 
119a8     ED DE D5 D3 
119ac     DB E8 F9 07 
119b0     12 18 18 11 | 	byte	$19, $18, $0e, $ff, $ed, $de, $d5, $d3, $db, $e8, $f9, $07, $12, $18, $18, $11
119b4     06 F8 E9 DE 
119b8     D6 D4 D6 DF 
119bc     EA F7 03 0E 
119c0     15 18 18 12 | 	byte	$06, $f8, $e9, $de, $d6, $d4, $d6, $df, $ea, $f7, $03, $0e, $15, $18, $18, $12
119c4     0A 00 F5 EA 
119c8     E0 D9 D6 D5 
119cc     D8 DD E5 EF 
119d0     FA 02 0B 12 | 	byte	$0a, $00, $f5, $ea, $e0, $d9, $d6, $d5, $d8, $dd, $e5, $ef, $fa, $02, $0b, $12
119d4     17 18 17 12 
119d8     0A 00 F6 EB 
119dc     E0 D9 D4 D3 
119e0     D7 DE E8 F5 | 	byte	$17, $18, $17, $12, $0a, $00, $f6, $eb, $e0, $d9, $d4, $d3, $d7, $de, $e8, $f5
119e4     01 0C 14 19 
119e8     18 12 09 FC 
119ec     EE E1 D8 D3 
119f0     D5 DD EB FB | 	byte	$01, $0c, $14, $19, $18, $12, $09, $fc, $ee, $e1, $d8, $d3, $d5, $dd, $eb, $fb
119f4     08 13 19 18 
119f8     0D FF EE DE 
119fc     D4 D3 DC EC 
11a00     00 0F 19 18 | 	byte	$08, $13, $19, $18, $0d, $ff, $ee, $de, $d4, $d3, $dc, $ec, $00, $0f, $19, $18
11a04     0C F9 E4 D7 
11a08     D3 DD F2 07 
11a0c     17 19 0C F6 
11a10     DF D3 D8 ED | 	byte	$0c, $f9, $e4, $d7, $d3, $dd, $f2, $07, $17, $19, $0c, $f6, $df, $d3, $d8, $ed
11a14     07 18 17 03 
11a18     E8 D4 D7 EE 
11a1c     0A 19 0F F3 
11a20     D8 D5 EE 0D | 	byte	$07, $18, $17, $03, $e8, $d4, $d7, $ee, $0a, $19, $0f, $f3, $d8, $d5, $ee, $0d
11a24     19 05 E4 D3 
11a28     E5 08 19 04 
11a2c     E0 D5 F2 14 
11a30     11 EA D4 EC | 	byte	$19, $05, $e4, $d3, $e5, $08, $19, $04, $e0, $d5, $f2, $14, $11, $ea, $d4, $ec
11a34     13 0F E6 D5 
11a38     FA 18 FE D6 
11a3c     E9 14 07 D8 
11a40     E7 14 03 D6 | 	byte	$13, $0f, $e6, $d5, $fa, $18, $fe, $d6, $e9, $14, $07, $d8, $e7, $14, $03, $d6
11a44     F0 17 F0 D7 
11a48     0B 0B D7 F7 
11a4c     16 DF EB 17 
11a50     E4 E9 17 E0 | 	byte	$f0, $17, $f0, $d7, $0b, $0b, $d7, $f7, $16, $df, $eb, $17, $e4, $e9, $17, $e0
11a54     F3 13 D8 04 
11a58     03 DB 15 E2 
11a5c     F8 06 DA 16 
11a60     DB 0A EC F7 | 	byte	$f3, $13, $d8, $04, $03, $db, $15, $e2, $f8, $06, $da, $16, $db, $0a, $ec, $f7
11a64     FF E7 0C DF 
11a68     11 DC 11 DC 
11a6c     0E E0 09 E8 
11a70     00 F6 EC 08 | 	byte	$ff, $e7, $0c, $df, $11, $dc, $11, $dc, $0e, $e0, $09, $e8, $00, $f6, $ec, $08
11a74     DE 12 E1 FF 
11a78     01 E0 12 E6 
11a7c     EE 0F E1 F5 
11a80     0C E3 F2 0E | 	byte	$de, $12, $e1, $ff, $01, $e0, $12, $e6, $ee, $0f, $e1, $f5, $0c, $e3, $f2, $0e
11a84     ED E3 09 04 
11a88     E2 EC 0C 01 
11a8c     E5 E2 01 0F 
11a90     FC E5 E2 F6 | 	byte	$ed, $e3, $09, $04, $e2, $ec, $0c, $01, $e5, $e2, $01, $0f, $fc, $e5, $e2, $f6
11a94     07 0B 01 EF 
11a98     E3 E4 F7 0A 
11a9c     08 F4 E0 E9 
11aa0     07 0D EE DE | 	byte	$07, $0b, $01, $ef, $e3, $e4, $f7, $0a, $08, $f4, $e0, $e9, $07, $0d, $ee, $de
11aa4     02 0D EE E2 
11aa8     07 02 DD FC 
11aac     0A DF FA 0A 
11ab0     DC 04 FD E0 | 	byte	$02, $0d, $ee, $e2, $07, $02, $dd, $fc, $0a, $df, $fa, $0a, $dc, $04, $fd, $e0
11ab4     12 E2 01 FC 
11ab8     E3 10 DA 10 
11abc     DF 08 E7 02 
11ac0     ED FF ED 02 | 	byte	$12, $e2, $01, $fc, $e3, $10, $da, $10, $df, $08, $e7, $02, $ed, $ff, $ed, $02
11ac4     E8 0B DF 12 
11ac8     D8 14 DE 06 
11acc     F4 EA 11 D8 
11ad0     0D F0 E7 14 | 	byte	$e8, $0b, $df, $12, $d8, $14, $de, $06, $f4, $ea, $11, $d8, $0d, $f0, $e7, $14
11ad4     DA FE 09 D6 
11ad8     08 03 D6 0B 
11adc     05 D6 03 0E 
11ae0     DA F0 17 ED | 	byte	$da, $fe, $09, $d6, $08, $03, $d6, $0b, $05, $d6, $03, $0e, $da, $f0, $17, $ed
11ae4     D9 0A 0D DD 
11ae8     E4 13 07 D9 
11aec     E4 11 0C E1 
11af0     DA 04 18 F7 | 	byte	$d9, $0a, $0d, $dd, $e4, $13, $07, $d9, $e4, $11, $0c, $e1, $da, $04, $18, $f7
11af4     D5 E6 0E 16 
11af8     F2 D5 E2 09 
11afc     19 01 DF D5 
11b00     EF 10 18 01 | 	byte	$d5, $e6, $0e, $16, $f2, $d5, $e2, $09, $19, $01, $df, $d5, $ef, $10, $18, $01
11b04     DF D3 E7 05 
11b08     18 10 F5 DA 
11b0c     D3 E5 01 16 
11b10     18 04 EB D7 | 	byte	$df, $d3, $e7, $05, $18, $10, $f5, $da, $d3, $e5, $01, $16, $18, $04, $eb, $d7
11b14     D5 E5 FE 11 
11b18     19 11 FD E7 
11b1c     D7 D3 DF F2 
11b20     06 14 19 11 | 	byte	$d5, $e5, $fe, $11, $19, $11, $fd, $e7, $d7, $d3, $df, $f2, $06, $14, $19, $11
11b24     01 EE DE D4 
11b28     D6 DF F0 01 
11b2c     0E 17 18 10 
11b30     03 F4 E5 DA | 	byte	$01, $ee, $de, $d4, $d6, $df, $f0, $01, $0e, $17, $18, $10, $03, $f4, $e5, $da
11b34     D4 D6 DD E9 
11b38     F8 05 0F 16 
11b3c     18 15 0D 01 
11b40     F5 E9 DF D8 | 	byte	$d4, $d6, $dd, $e9, $f8, $05, $0f, $16, $18, $15, $0d, $01, $f5, $e9, $df, $d8
11b44     D5 D6 DB E4 
11b48     EF FA 03 0D 
11b4c     13 17 17 13 
11b50     0E 06 FD F4 | 	byte	$d5, $d6, $db, $e4, $ef, $fa, $03, $0d, $13, $17, $17, $13, $0e, $06, $fd, $f4
11b54     EA E2 DC D8 
11b58     D6 D7 DA E0 
11b5c     E8 F2 FC 05 
11b60     0E 14 18 18 | 	byte	$ea, $e2, $dc, $d8, $d6, $d7, $da, $e0, $e8, $f2, $fc, $05, $0e, $14, $18, $18
11b64     16 10 07 FD 
11b68     F1 E6 DD D7 
11b6c     D4 D6 DC E6 
11b70     F2 FF 0A 13 | 	byte	$16, $10, $07, $fd, $f1, $e6, $dd, $d7, $d4, $d6, $dc, $e6, $f2, $ff, $0a, $13
11b74     18 18 12 08 
11b78     FA EC DF D7 
11b7c     D3 D7 E2 F1 
11b80     01 0E 17 18 | 	byte	$18, $18, $12, $08, $fa, $ec, $df, $d7, $d3, $d7, $e2, $f1, $01, $0e, $17, $18
11b84     11 04 F3 E1 
11b88     D6 D3 DA EA 
11b8c     FE 0E 18 17 
11b90     0A F6 E2 D6 | 	byte	$11, $04, $f3, $e1, $d6, $d3, $da, $ea, $fe, $0e, $18, $17, $0a, $f6, $e2, $d6
11b94     D5 E3 F9 0D 
11b98     18 14 01 E9 
11b9c     D7 D4 E5 FE 
11ba0     13 18 08 ED | 	byte	$d5, $e3, $f9, $0d, $18, $14, $01, $e9, $d7, $d4, $e5, $fe, $13, $18, $08, $ed
11ba4     D7 D6 EC 09 
11ba8     18 0E F1 D8 
11bac     D7 F3 11 17 
11bb0     FF DD D5 F0 | 	byte	$d7, $d6, $ec, $09, $18, $0e, $f1, $d8, $d7, $f3, $11, $17, $ff, $dd, $d5, $f0
11bb4     11 15 F5 D7 
11bb8     DE 04 18 FE 
11bbc     DA DD 05 18 
11bc0     F7 D5 EB 14 | 	byte	$11, $15, $f5, $d7, $de, $04, $18, $fe, $da, $dd, $05, $18, $f7, $d5, $eb, $14
11bc4     09 DD DF 0D 
11bc8     0E DF E0 0F 
11bcc     09 DA EC 16 
11bd0     F5 D7 08 0B | 	byte	$09, $dd, $df, $0d, $0e, $df, $e0, $0f, $09, $da, $ec, $16, $f5, $d7, $08, $0b
11bd4     D8 F7 14 DE 
11bd8     ED 16 E2 EF 
11bdc     14 DB FA 0B 
11be0     D8 0B F6 E3 | 	byte	$d8, $f7, $14, $de, $ed, $16, $e2, $ef, $14, $db, $fa, $0b, $d8, $0b, $f6, $e3
11be4     15 DB 06 F6 
11be8     E8 10 D9 13 
11bec     DE 09 EB FA 
11bf0     F6 F3 FC EF | 	byte	$15, $db, $06, $f6, $e8, $10, $d9, $13, $de, $09, $eb, $fa, $f6, $f3, $fc, $ef
11bf4     FE F0 FB F5 
11bf8     F3 02 E5 0E 
11bfc     DA 11 DE 02 
11c00     FB E4 10 E0 | 	byte	$fe, $f0, $fb, $f5, $f3, $02, $e5, $0e, $da, $11, $de, $02, $fb, $e4, $10, $e0
11c04     FE 03 DE 09 
11c08     F9 E0 0B FA 
11c0c     E0 05 04 DF 
11c10     F0 0F F5 DE | 	byte	$fe, $03, $de, $09, $f9, $e0, $0b, $fa, $e0, $05, $04, $df, $f0, $0f, $f5, $de
11c14     F8 0D F7 E1 
11c18     EB 07 09 F3 
11c1c     E2 E8 FA 0C 
11c20     01 EA E0 F8 | 	byte	$f8, $0d, $f7, $e1, $eb, $07, $09, $f3, $e2, $e8, $fa, $0c, $01, $ea, $e0, $f8
11c24     0E FD E0 EE 
11c28     0D F9 DF FC 
11c2c     0B E5 EE 0F 
11c30     EA EC 0F E3 | 	byte	$0e, $fd, $e0, $ee, $0d, $f9, $df, $fc, $0b, $e5, $ee, $0f, $ea, $ec, $0f, $e3
11c34     F5 0B DB 09 
11c38     F3 E9 0C DC 
11c3c     10 E3 05 F3 
11c40     F4 FF EA 04 | 	byte	$f5, $0b, $db, $09, $f3, $e9, $0c, $dc, $10, $e3, $05, $f3, $f4, $ff, $ea, $04
11c44     E5 08 E6 01 
11c48     EB FD F8 EE 
11c4c     08 DD 14 DA 
11c50     0B EE EF 0D | 	byte	$e5, $08, $e6, $01, $eb, $fd, $f8, $ee, $08, $dd, $14, $da, $0b, $ee, $ef, $0d
11c54     D8 0E F2 E5 
11c58     15 DF F5 0F 
11c5c     D8 FF 0D D9 
11c60     FC 12 DC EF | 	byte	$d8, $0e, $f2, $e5, $15, $df, $f5, $0f, $d8, $ff, $0d, $d9, $fc, $12, $dc, $ef
11c64     16 EB DB 0F 
11c68     07 D8 EF 17 
11c6c     F8 D5 F8 18 
11c70     F8 D6 F0 15 | 	byte	$16, $eb, $db, $0f, $07, $d8, $ef, $17, $f8, $d5, $f8, $18, $f8, $d6, $f0, $15
11c74     05 DC DD 06 
11c78     17 F7 D7 E3 
11c7c     0A 17 FA D9 
11c80     DB FD 17 0E | 	byte	$05, $dc, $dd, $06, $17, $f7, $d7, $e3, $0a, $17, $fa, $d9, $db, $fd, $17, $0e
11c84     EC D6 DE FE 
11c88     16 12 F6 DB 
11c8c     D6 EA 08 17 
11c90     10 F8 DF D4 | 	byte	$ec, $d6, $de, $fe, $16, $12, $f6, $db, $d6, $ea, $08, $17, $10, $f8, $df, $d4
11c94     DF F9 0F 18 
11c98     0F F9 E2 D5 
11c9c     D7 E8 FF 10 
11ca0     18 11 01 EC | 	byte	$df, $f9, $0f, $18, $0f, $f9, $e2, $d5, $d7, $e8, $ff, $10, $18, $11, $01, $ec
11ca4     DB D4 D8 E7 
11ca8     FA 0B 16 18 
11cac     10 01 F1 E1 
11cb0     D8 D4 DA E6 | 	byte	$db, $d4, $d8, $e7, $fa, $0b, $16, $18, $10, $01, $f1, $e1, $d8, $d4, $da, $e6
11cb4     F6 04 0F 16 
11cb8     17 11 06 F9 
11cbc     EC E0 D8 D5 
11cc0     D7 DE E9 F6 | 	byte	$f6, $04, $0f, $16, $17, $11, $06, $f9, $ec, $e0, $d8, $d5, $d7, $de, $e9, $f6
11cc4     01 0B 12 16 
11cc8     16 12 0A 01 
11ccc     F7 EC E3 DC 
11cd0     D8 D6 D8 DD | 	byte	$01, $0b, $12, $16, $16, $12, $0a, $01, $f7, $ec, $e3, $dc, $d8, $d6, $d8, $dd
11cd4     E4 ED F7 FF 
11cd8     07 0E 12 15 
11cdc     15 13 0E 08 
11ce0     00 F8 F0 E7 | 	byte	$e4, $ed, $f7, $ff, $07, $0e, $12, $15, $15, $13, $0e, $08, $00, $f8, $f0, $e7
11ce4     E0 DA D7 D5 
11ce8     D7 DC E3 ED 
11cec     F7 01 0A 11 
11cf0     16 18 15 0F | 	byte	$e0, $da, $d7, $d5, $d7, $dc, $e3, $ed, $f7, $01, $0a, $11, $16, $18, $15, $0f
11cf4     06 FC F0 E5 
11cf8     DC D7 D4 D7 
11cfc     DF EB F8 04 
11d00     0F 16 18 13 | 	byte	$06, $fc, $f0, $e5, $dc, $d7, $d4, $d7, $df, $eb, $f8, $04, $0f, $16, $18, $13
11d04     09 FD EE E0 
11d08     D8 D4 D9 E4 
11d0c     F3 03 10 17 
11d10     16 0B FC EA | 	byte	$09, $fd, $ee, $e0, $d8, $d4, $d9, $e4, $f3, $03, $10, $17, $16, $0b, $fc, $ea
11d14     DB D4 D7 E6 
11d18     F9 0B 16 16 
11d1c     0A F6 E1 D6 
11d20     D6 E6 FE 10 | 	byte	$db, $d4, $d7, $e6, $f9, $0b, $16, $16, $0a, $f6, $e1, $d6, $d6, $e6, $fe, $10
11d24     18 0E F9 E2 
11d28     D5 DB F3 0B 
11d2c     18 0E F5 DC 
11d30     D5 E7 04 16 | 	byte	$18, $0e, $f9, $e2, $d5, $db, $f3, $0b, $18, $0e, $f5, $dc, $d5, $e7, $04, $16
11d34     0F F3 D9 D9 
11d38     F5 11 15 F9 
11d3c     DB D9 FA 14 
11d40     0D E9 D4 EC | 	byte	$0f, $f3, $d9, $d9, $f5, $11, $15, $f9, $db, $d9, $fa, $14, $0d, $e9, $d4, $ec
11d44     11 10 EB D5 
11d48     F1 15 08 DE 
11d4c     DC 07 13 EB 
11d50     D7 02 15 EA | 	byte	$11, $10, $eb, $d5, $f1, $15, $08, $de, $dc, $07, $13, $eb, $d7, $02, $15, $ea
11d54     D9 06 0F E0 
11d58     E4 13 FB D6 
11d5c     04 0C DB F5 
11d60     13 E0 EE 14 | 	byte	$d9, $06, $0f, $e0, $e4, $13, $fb, $d6, $04, $0c, $db, $f5, $13, $e0, $ee, $14
11d64     DF F2 11 DB 
11d68     FF 06 D8 0F 
11d6c     ED EC 11 D9 
11d70     0D EA F5 05 | 	byte	$df, $f2, $11, $db, $ff, $06, $d8, $0f, $ed, $ec, $11, $d9, $0d, $ea, $f5, $05
11d74     DE 12 D9 11 
11d78     DF 0A E5 02 
11d7c     EB 00 EC 03 
11d80     E5 09 E0 0F | 	byte	$de, $12, $d9, $11, $df, $0a, $e5, $02, $eb, $00, $ec, $03, $e5, $09, $e0, $0f
11d84     DC 11 E1 05 
11d88     F5 EA 0B DC 
11d8c     0A F3 E6 0F 
11d90     E3 F3 0D DE | 	byte	$dc, $11, $e1, $05, $f5, $ea, $0b, $dc, $0a, $f3, $e6, $0f, $e3, $f3, $0d, $de
11d94     F6 0C E3 EE 
11d98     0D F0 E2 06 
11d9c     07 E6 EA 08 
11da0     03 EA E0 FC | 	byte	$f6, $0c, $e3, $ee, $0d, $f0, $e2, $06, $07, $e6, $ea, $08, $03, $ea, $e0, $fc
11da4     0D FF E2 E4 
11da8     04 0A E9 E5 
11dac     05 03 E1 F4 
11db0     0C E8 EB 0F | 	byte	$0d, $ff, $e2, $e4, $04, $0a, $e9, $e5, $05, $03, $e1, $f4, $0c, $e8, $eb, $0f
11db4     EB ED 0F E1 
11db8     F7 07 DD 0D 
11dbc     EC F4 07 DF 
11dc0     10 DC 0C E6 | 	byte	$eb, $ed, $0f, $e1, $f7, $07, $dd, $0d, $ec, $f4, $07, $df, $10, $dc, $0c, $e6
11dc4     01 EE FB F3 
11dc8     FB F5 FE F0 
11dcc     00 E6 0B DC 
11dd0     13 DA 0C E9 | 	byte	$01, $ee, $fb, $f3, $fb, $f5, $fe, $f0, $00, $e6, $0b, $dc, $13, $da, $0c, $e9
11dd4     F6 06 DB 12 
11dd8     E4 F5 0B D8 
11ddc     0C F8 DD 13 
11de0     F1 E2 14 EE | 	byte	$f6, $06, $db, $12, $e4, $f5, $0b, $d8, $0c, $f8, $dd, $13, $f1, $e2, $14, $ee
11de4     DF 12 F7 D8 
11de8     09 09 DA F2 
11dec     16 EF D8 04 
11df0     12 E6 DB 07 | 	byte	$df, $12, $f7, $d8, $09, $09, $da, $f2, $16, $ef, $d8, $04, $12, $e6, $db, $07
11df4     12 E9 D7 FD 
11df8     17 FA D7 E7 
11dfc     0E 13 EE D5 
11e00     E9 0E 14 F5 | 	byte	$12, $e9, $d7, $fd, $17, $fa, $d7, $e7, $0e, $13, $ee, $d5, $e9, $0e, $14, $f5
11e04     D8 DE FF 16 
11e08     0C EB D6 DF 
11e0c     FD 14 12 F9 
11e10     DE D5 E6 02 | 	byte	$d8, $de, $ff, $16, $0c, $eb, $d6, $df, $fd, $14, $12, $f9, $de, $d5, $e6, $02
11e14     15 13 FF E4 
11e18     D6 DA EF 06 
11e1c     15 14 03 EE 
11e20     DA D5 DE F2 | 	byte	$15, $13, $ff, $e4, $d6, $da, $ef, $06, $15, $14, $03, $ee, $da, $d5, $de, $f2
11e24     06 13 17 0D 
11e28     FB E8 DA D5 
11e2c     DB E9 FB 0A 
11e30     14 17 10 02 | 	byte	$06, $13, $17, $0d, $fb, $e8, $da, $d5, $db, $e9, $fb, $0a, $14, $17, $10, $02
11e34     F4 E5 DA D6 
11e38     D8 E1 EF FE 
11e3c     09 12 16 14 
11e40     0C 02 F7 EA | 	byte	$f4, $e5, $da, $d6, $d8, $e1, $ef, $fe, $09, $12, $16, $14, $0c, $02, $f7, $ea
11e44     E0 D9 D6 D8 
11e48     DF E8 F3 FE 
11e4c     07 0F 13 15 
11e50     13 0E 06 FE | 	byte	$e0, $d9, $d6, $d8, $df, $e8, $f3, $fe, $07, $0f, $13, $15, $13, $0e, $06, $fe
11e54     F5 EB E3 DD 
11e58     D9 D8 D8 DD 
11e5c     E2 EA F2 FB 
11e60     02 09 0F 12 | 	byte	$f5, $eb, $e3, $dd, $d9, $d8, $d8, $dd, $e2, $ea, $f2, $fb, $02, $09, $0f, $12
11e64     13 13 11 0C 
11e68     08 01 F9 F1 
11e6c     E8 E1 DB D8 
11e70     D6 D7 DB E1 | 	byte	$13, $13, $11, $0c, $08, $01, $f9, $f1, $e8, $e1, $db, $d8, $d6, $d7, $db, $e1
11e74     EA F4 FF 07 
11e78     0F 14 16 16 
11e7c     11 09 00 F4 
11e80     E9 E0 D9 D6 | 	byte	$ea, $f4, $ff, $07, $0f, $14, $16, $16, $11, $09, $00, $f4, $e9, $e0, $d9, $d6
11e84     D7 DC E6 F3 
11e88     FF 0B 13 17 
11e8c     14 0D 02 F4 
11e90     E6 DB D6 D6 | 	byte	$d7, $dc, $e6, $f3, $ff, $0b, $13, $17, $14, $0d, $02, $f4, $e6, $db, $d6, $d6
11e94     DF ED FD 0B 
11e98     14 17 10 03 
11e9c     F2 E1 D7 D6 
11ea0     E0 F0 03 12 | 	byte	$df, $ed, $fd, $0b, $14, $17, $10, $03, $f2, $e1, $d7, $d6, $e0, $f0, $03, $12
11ea4     17 10 FE EA 
11ea8     DA D5 DF F4 
11eac     09 16 13 01 
11eb0     E9 D8 D7 E9 | 	byte	$17, $10, $fe, $ea, $da, $d5, $df, $f4, $09, $16, $13, $01, $e9, $d8, $d7, $e9
11eb4     03 14 14 FF 
11eb8     E3 D6 DF FB 
11ebc     12 14 FD DF 
11ec0     D6 EB 0A 17 | 	byte	$03, $14, $14, $ff, $e3, $d6, $df, $fb, $12, $14, $fd, $df, $d6, $eb, $0a, $17
11ec4     02 E1 D6 EF 
11ec8     0E 13 F3 D7 
11ecc     E3 09 15 F6 
11ed0     D7 E7 0E 0E | 	byte	$02, $e1, $d6, $ef, $0e, $13, $f3, $d7, $e3, $09, $15, $f6, $d7, $e7, $0e, $0e
11ed4     E6 D8 FF 16 
11ed8     F3 D6 F7 15 
11edc     F4 D7 FD 14 
11ee0     E8 DD 0C 04 | 	byte	$e6, $d8, $ff, $16, $f3, $d6, $f7, $15, $f4, $d7, $fd, $14, $e8, $dd, $0c, $04
11ee4     D8 F8 12 E2 
11ee8     EA 14 E8 E4 
11eec     14 E9 E7 13 
11ef0     E2 F2 0E D9 | 	byte	$d8, $f8, $12, $e2, $ea, $14, $e8, $e4, $14, $e9, $e7, $13, $e2, $f2, $0e, $d9
11ef4     07 F9 E0 13 
11ef8     DD 04 FA E7 
11efc     0F D9 11 E0 
11f00     07 EC FA F6 | 	byte	$07, $f9, $e0, $13, $dd, $04, $fa, $e7, $0f, $d9, $11, $e0, $07, $ec, $fa, $f6
11f04     F0 FD ED FF 
11f08     EE FB F5 F5 
11f0c     FE EA 08 DF 
11f10     10 DE 06 F4 | 	byte	$f0, $fd, $ed, $ff, $ee, $fb, $f5, $f5, $fe, $ea, $08, $df, $10, $de, $06, $f4
11f14     E9 0E DE 04 
11f18     FB E4 0D ED 
11f1c     E9 0D EA E9 
11f20     0D F2 E3 06 | 	byte	$e9, $0e, $de, $04, $fb, $e4, $0d, $ed, $e9, $0d, $ea, $e9, $0d, $f2, $e3, $06
11f24     02 E1 F0 0E 
11f28     FB E0 EF 0B 
11f2c     FE E2 F0 0C 
11f30     F6 E0 01 06 | 	byte	$02, $e1, $f0, $0e, $fb, $e0, $ef, $0b, $fe, $e2, $f0, $0c, $f6, $e0, $01, $06
11f34     E0 F8 09 E0 
11f38     FC 08 DC 04 
11f3c     FC E2 0F E1 
11f40     00 FA E6 0C | 	byte	$e0, $f8, $09, $e0, $fc, $08, $dc, $04, $fc, $e2, $0f, $e1, $00, $fa, $e6, $0c
11f44     DE 0F DF 09 
11f48     E8 01 ED FD 
11f4c     EF FF EB 05 
11f50     E4 0D DC 11 | 	byte	$de, $0f, $df, $09, $e8, $01, $ed, $fd, $ef, $ff, $eb, $05, $e4, $0d, $dc, $11
11f54     DB 0C E8 F8 
11f58     05 DE 13 E0 
11f5c     FD 05 DA 0F 
11f60     EF E4 14 E3 | 	byte	$db, $0c, $e8, $f8, $05, $de, $13, $e0, $fd, $05, $da, $0f, $ef, $e4, $14, $e3
11f64     ED 13 E2 EE 
11f68     14 E5 E5 13 
11f6c     F4 D9 08 0A 
11f70     DB EB 14 FB | 	byte	$ed, $13, $e2, $ee, $14, $e5, $e5, $13, $f4, $d9, $08, $0a, $db, $eb, $14, $fb
11f74     D7 F7 15 F6 
11f78     D7 F3 14 02 
11f7c     DA E3 0B 11 
11f80     EE D6 ED 10 | 	byte	$d7, $f7, $15, $f6, $d7, $f3, $14, $02, $da, $e3, $0b, $11, $ee, $d6, $ed, $10
11f84     10 EF D6 E6 
11f88     08 16 01 E1 
11f8c     D6 EF 0D 15 
11f90     02 E3 D6 E3 | 	byte	$10, $ef, $d6, $e6, $08, $16, $01, $e1, $d6, $ef, $0d, $15, $02, $e3, $d6, $e3
11f94     00 13 13 FD 
11f98     E2 D6 DF F7 
11f9c     0E 16 0D F7 
11fa0     E1 D6 DB EE | 	byte	$00, $13, $13, $fd, $e2, $d6, $df, $f7, $0e, $16, $0d, $f7, $e1, $d6, $db, $ee
11fa4     03 12 16 0B 
11fa8     F9 E5 D8 D7 
11fac     E0 F1 03 11 
11fb0     16 11 04 F4 | 	byte	$03, $12, $16, $0b, $f9, $e5, $d8, $d7, $e0, $f1, $03, $11, $16, $11, $04, $f4
11fb4     E4 DA D6 DB 
11fb8     E6 F5 03 0F 
11fbc     15 14 0E 03 
11fc0     F6 E8 DE D8 | 	byte	$e4, $da, $d6, $db, $e6, $f5, $03, $0f, $15, $14, $0e, $03, $f6, $e8, $de, $d8
11fc4     D7 DA E3 EF 
11fc8     FB 05 0E 13 
11fcc     14 12 0C 03 
11fd0     FA F0 E6 DE | 	byte	$d7, $da, $e3, $ef, $fb, $05, $0e, $13, $14, $12, $0c, $03, $fa, $f0, $e6, $de
11fd4     D9 D8 D8 DD 
11fd8     E3 EC F6 FE 
11fdc     06 0C 10 13 
11fe0     13 11 0C 07 | 	byte	$d9, $d8, $d8, $dd, $e3, $ec, $f6, $fe, $06, $0c, $10, $13, $13, $11, $0c, $07
11fe4     00 F8 F1 E9 
11fe8     E3 DE DC D9 
11fec     D9 DB DE E3 
11ff0     EA F2 FA 01 | 	byte	$00, $f8, $f1, $e9, $e3, $de, $dc, $d9, $d9, $db, $de, $e3, $ea, $f2, $fa, $01
11ff4     07 0E 12 14 
11ff8     14 12 0D 07 
11ffc     FF F7 ED E4 
12000     DD D8 D7 D8 | 	byte	$07, $0e, $12, $14, $14, $12, $0d, $07, $ff, $f7, $ed, $e4, $dd, $d8, $d7, $d8
12004     DC E4 EE F8 
12008     02 0B 12 15 
1200c     14 0F 07 FC 
12010     F1 E5 DC D7 | 	byte	$dc, $e4, $ee, $f8, $02, $0b, $12, $15, $14, $0f, $07, $fc, $f1, $e5, $dc, $d7
12014     D6 DC E6 F3 
12018     01 0D 13 16 
1201c     11 06 F7 E8 
12020     DC D6 D8 E2 | 	byte	$d6, $dc, $e6, $f3, $01, $0d, $13, $16, $11, $06, $f7, $e8, $dc, $d6, $d8, $e2
12024     F1 02 0F 16 
12028     12 05 F5 E3 
1202c     D8 D6 E2 F5 
12030     08 14 14 07 | 	byte	$f1, $02, $0f, $16, $12, $05, $f5, $e3, $d8, $d6, $e2, $f5, $08, $14, $14, $07
12034     F2 DE D6 DD 
12038     F2 08 15 11 
1203c     FD E4 D7 DD 
12040     F5 0C 16 07 | 	byte	$f2, $de, $d6, $dd, $f2, $08, $15, $11, $fd, $e4, $d7, $dd, $f5, $0c, $16, $07
12044     EC D8 DB F7 
12048     0F 13 FD DF 
1204c     D7 F0 0E 13 
12050     F7 DA DD FF | 	byte	$ec, $d8, $db, $f7, $0f, $13, $fd, $df, $d7, $f0, $0e, $13, $f7, $da, $dd, $ff
12054     15 04 E0 DA 
12058     FD 15 FF DB 
1205c     E1 0A 11 E9 
12060     D8 FD 14 F0 | 	byte	$15, $04, $e0, $da, $fd, $15, $ff, $db, $e1, $0a, $11, $e9, $d8, $fd, $14, $f0
12064     D7 FD 13 EC 
12068     DB 09 0A DC 
1206c     ED 14 EF DC 
12070     0E 01 D8 05 | 	byte	$d7, $fd, $13, $ec, $db, $09, $0a, $dc, $ed, $14, $ef, $dc, $0e, $01, $d8, $05
12074     04 D9 06 03 
12078     D9 0B F8 E0 
1207c     12 E5 F3 0A 
12080     D9 0F EA F3 | 	byte	$04, $d9, $06, $03, $d9, $0b, $f8, $e0, $12, $e5, $f3, $0a, $d9, $0f, $ea, $f3
12084     07 DC 11 DC 
12088     0A E8 FB F6 
1208c     F1 FF EA 03 
12090     E8 03 EB FF | 	byte	$07, $dc, $11, $dc, $0a, $e8, $fb, $f6, $f1, $ff, $ea, $03, $e8, $03, $eb, $ff
12094     F1 F7 FB EA 
12098     08 DF 0F DE 
1209c     06 F3 EC 0A 
120a0     DD 07 F6 E4 | 	byte	$f1, $f7, $fb, $ea, $08, $df, $0f, $de, $06, $f3, $ec, $0a, $dd, $07, $f6, $e4
120a4     0D EB ED 0F 
120a8     E9 EC 0E EE 
120ac     E4 09 FB E0 
120b0     F6 0A F2 E3 | 	byte	$0d, $eb, $ed, $0f, $e9, $ec, $0e, $ee, $e4, $09, $fb, $e0, $f6, $0a, $f2, $e3
120b4     06 02 E0 F9 
120b8     09 E2 F7 09 
120bc     DF 00 FE DE 
120c0     0D EC F1 07 | 	byte	$06, $02, $e0, $f9, $09, $e2, $f7, $09, $df, $00, $fe, $de, $0d, $ec, $f1, $07
120c4     DE 0E E2 01 
120c8     F4 F2 02 E6 
120cc     09 E1 0C E0 
120d0     0D E0 0B E4 | 	byte	$de, $0e, $e2, $01, $f4, $f2, $02, $e6, $09, $e1, $0c, $e0, $0d, $e0, $0b, $e4
120d4     04 EE F6 FE 
120d8     E6 0D DA 0F 
120dc     E6 F7 05 DB 
120e0     11 E7 F0 0E | 	byte	$04, $ee, $f6, $fe, $e6, $0d, $da, $0f, $e6, $f7, $05, $db, $11, $e7, $f0, $0e
120e4     D9 02 03 D9 
120e8     09 FF D9 09 
120ec     04 D8 02 0C 
120f0     DD EF 14 EF | 	byte	$d9, $02, $03, $d9, $09, $ff, $d9, $09, $04, $d8, $02, $0c, $dd, $ef, $14, $ef
120f4     DA 07 0C E0 
120f8     E2 0E 07 DE 
120fc     E3 0C 0C E4 
12100     DA FF 15 F9 | 	byte	$da, $07, $0c, $e0, $e2, $0e, $07, $de, $e3, $0c, $0c, $e4, $da, $ff, $15, $f9
12104     D9 E4 08 13 
12108     F6 D8 E1 03 
1210c     14 02 E2 D6 
12110     EC 0B 15 02 | 	byte	$d9, $e4, $08, $13, $f6, $d8, $e1, $03, $14, $02, $e2, $d6, $ec, $0b, $15, $02
12114     E3 D6 E4 01 
12118     13 0F F8 E0 
1211c     D6 E3 FD 0F 
12120     15 07 F1 DD | 	byte	$e3, $d6, $e4, $01, $13, $0f, $f8, $e0, $d6, $e3, $fd, $0f, $15, $07, $f1, $dd
12124     D6 E1 F7 0A 
12128     14 12 02 EF 
1212c     DE D6 DC EB 
12130     FF 0D 14 13 | 	byte	$d6, $e1, $f7, $0a, $14, $12, $02, $ef, $de, $d6, $dc, $eb, $ff, $0d, $14, $13
12134     07 F8 E7 DB 
12138     D7 DA E5 F5 
1213c     03 0E 14 13 
12140     0C 00 F4 E6 | 	byte	$07, $f8, $e7, $db, $d7, $da, $e5, $f5, $03, $0e, $14, $13, $0c, $00, $f4, $e6
12144     DD D8 D8 DD 
12148     E6 F3 FF 08 
1214c     10 13 13 0F 
12150     07 FE F3 E9 | 	byte	$dd, $d8, $d8, $dd, $e6, $f3, $ff, $08, $10, $13, $13, $0f, $07, $fe, $f3, $e9
12154     E0 DB D8 D9 
12158     DD E2 EA F4 
1215c     FD 04 0B 0F 
12160     12 12 10 0C | 	byte	$e0, $db, $d8, $d9, $dd, $e2, $ea, $f4, $fd, $04, $0b, $0f, $12, $12, $10, $0c
12164     06 FF F8 F0 
12168     E8 E3 DE DB 
1216c     D9 DA DC E0 
12170     E5 EB F2 F8 | 	byte	$06, $ff, $f8, $f0, $e8, $e3, $de, $db, $d9, $da, $dc, $e0, $e5, $eb, $f2, $f8
12174     FF 05 0A 0F 
12178     11 13 12 10 
1217c     0C 06 FF F9 
12180     F0 E8 E1 DC | 	byte	$ff, $05, $0a, $0f, $11, $13, $12, $10, $0c, $06, $ff, $f9, $f0, $e8, $e1, $dc
12184     D8 D7 D9 DD 
12188     E4 EC F6 FF 
1218c     07 0E 13 14 
12190     12 0D 04 FD | 	byte	$d8, $d7, $d9, $dd, $e4, $ec, $f6, $ff, $07, $0e, $13, $14, $12, $0d, $04, $fd
12194     F1 E7 DE D8 
12198     D7 D9 E1 EC 
1219c     F9 04 0E 13 
121a0     14 0F 06 F9 | 	byte	$f1, $e7, $de, $d8, $d7, $d9, $e1, $ec, $f9, $04, $0e, $13, $14, $0f, $06, $f9
121a4     EB E0 D8 D7 
121a8     DD EA FA 07 
121ac     12 15 0F 02 
121b0     F3 E2 D8 D7 | 	byte	$eb, $e0, $d8, $d7, $dd, $ea, $fa, $07, $12, $15, $0f, $02, $f3, $e2, $d8, $d7
121b4     E1 F2 04 11 
121b8     14 0C FA E6 
121bc     D9 D7 E5 FC 
121c0     0D 15 0B F6 | 	byte	$e1, $f2, $04, $11, $14, $0c, $fa, $e6, $d9, $d7, $e5, $fc, $0d, $15, $0b, $f6
121c4     E0 D7 E0 F8 
121c8     0D 14 07 EC 
121cc     D8 DA F2 0C 
121d0     15 02 E5 D7 | 	byte	$e0, $d7, $e0, $f8, $0d, $14, $07, $ec, $d8, $da, $f2, $0c, $15, $02, $e5, $d7
121d4     E6 05 14 04 
121d8     E4 D7 EE 0D 
121dc     11 F2 D8 E7 
121e0     0A 12 F2 D8 | 	byte	$e6, $05, $14, $04, $e4, $d7, $ee, $0d, $11, $f2, $d8, $e7, $0a, $12, $f2, $d8
121e4     ED 10 09 E2 
121e8     DE 05 11 E9 
121ec     DA 01 10 E7 
121f0     DD 09 09 DD | 	byte	$ed, $10, $09, $e2, $de, $05, $11, $e9, $da, $01, $10, $e7, $dd, $09, $09, $dd
121f4     EC 12 F2 DB 
121f8     0A 03 D9 FF 
121fc     0A DB FC 0B 
12200     DB 00 06 D9 | 	byte	$ec, $12, $f2, $db, $0a, $03, $d9, $ff, $0a, $db, $fc, $0b, $db, $00, $06, $d9
12204     0A F8 E1 11 
12208     E1 FC 03 DD 
1220c     10 DF 02 F6 
12210     EC 07 DE 10 | 	byte	$0a, $f8, $e1, $11, $e1, $fc, $03, $dd, $10, $df, $02, $f6, $ec, $07, $de, $10
12214     DB 0F E0 0B 
12218     E1 09 E3 09 
1221c     E2 0C DF 0D 
12220     DE 0E E2 03 | 	byte	$db, $0f, $e0, $0b, $e1, $09, $e3, $09, $e2, $0c, $df, $0d, $de, $0e, $e2, $03
12224     F3 EE 07 E0 
12228     0C E9 F6 07 
1222c     DD 07 F9 E2 
12230     0B F2 E5 0A | 	byte	$f3, $ee, $07, $e0, $0c, $e9, $f6, $07, $dd, $07, $f9, $e2, $0b, $f2, $e5, $0a
12234     F4 E3 06 FF 
12238     E1 FB 07 E2 
1223c     F6 09 E0 FF 
12240     06 DE 07 F4 | 	byte	$f4, $e3, $06, $ff, $e1, $fb, $07, $e2, $f6, $09, $e0, $ff, $06, $de, $07, $f4
12244     E9 0C DE 06 
12248     F0 F2 05 E2 
1224c     0D DC 0E DF 
12250     0B E0 0A E2 | 	byte	$e9, $0c, $de, $06, $f0, $f2, $05, $e2, $0d, $dc, $0e, $df, $0b, $e0, $0a, $e2
12254     0B E0 0D DD 
12258     0F DC 0D E4 
1225c     01 F8 EB 0C 
12260     DA 0E EA F1 | 	byte	$0b, $e0, $0d, $dd, $0f, $dc, $0d, $e4, $01, $f8, $eb, $0c, $da, $0e, $ea, $f1
12264     0B D9 09 F9 
12268     E0 11 E9 E8 
1226c     12 E4 EB 12 
12270     E7 E5 11 F4 | 	byte	$0b, $d9, $09, $f9, $e0, $11, $e9, $e8, $12, $e4, $eb, $12, $e7, $e5, $11, $f4
12274     DA 09 07 DB 
12278     F0 13 F3 D8 
1227c     FE 12 EC DA 
12280     FE 13 F4 D8 | 	byte	$da, $09, $07, $db, $f0, $13, $f3, $d8, $fe, $12, $ec, $da, $fe, $13, $f4, $d8
12284     F2 11 04 DF 
12288     DD 00 14 FF 
1228c     DC DE FE 13 
12290     05 E6 D7 EB | 	byte	$f2, $11, $04, $df, $dd, $00, $14, $ff, $dc, $de, $fe, $13, $05, $e6, $d7, $eb
12294     09 14 02 E4 
12298     D7 E5 02 13 
1229c     0D F5 DD D8 
122a0     E8 00 12 12 | 	byte	$09, $14, $02, $e4, $d7, $e5, $02, $13, $0d, $f5, $dd, $d8, $e8, $00, $12, $12
122a4     01 E9 D9 D9 
122a8     EA FF 10 14 
122ac     0A F7 E4 D8 
122b0     D9 E5 F8 08 | 	byte	$01, $e9, $d9, $d9, $ea, $ff, $10, $14, $0a, $f7, $e4, $d8, $d9, $e5, $f8, $08
122b4     12 13 09 FA 
122b8     E9 DD D8 DB 
122bc     E5 F5 03 0E 
122c0     13 12 0A FE | 	byte	$12, $13, $09, $fa, $e9, $dd, $d8, $db, $e5, $f5, $03, $0e, $13, $12, $0a, $fe
122c4     F0 E4 DB D8 
122c8     D9 E0 EC F8 
122cc     03 0C 11 13 
122d0     10 09 00 F6 | 	byte	$f0, $e4, $db, $d8, $d9, $e0, $ec, $f8, $03, $0c, $11, $13, $10, $09, $00, $f6
122d4     EB E3 DC D9 
122d8     D9 DD E3 EB 
122dc     F4 FE 05 0B 
122e0     0F 12 11 0F | 	byte	$eb, $e3, $dc, $d9, $d9, $dd, $e3, $eb, $f4, $fe, $05, $0b, $0f, $12, $11, $0f
122e4     09 03 FD F5 
122e8     ED E6 E0 DD 
122ec     DB DA DC DF 
122f0     E3 E8 EF F6 | 	byte	$09, $03, $fd, $f5, $ed, $e6, $e0, $dd, $db, $da, $dc, $df, $e3, $e8, $ef, $f6
122f4     FD 02 07 0B 
122f8     0E 10 10 0F 
122fc     0D 09 04 FF 
12300     F8 F1 EC E5 | 	byte	$fd, $02, $07, $0b, $0e, $10, $10, $0f, $0d, $09, $04, $ff, $f8, $f1, $ec, $e5
12304     E0 DC D9 D8 
12308     D9 DD E2 E9 
1230c     F1 FA 01 08 
12310     0F 12 13 11 | 	byte	$e0, $dc, $d9, $d8, $d9, $dd, $e2, $e9, $f1, $fa, $01, $08, $0f, $12, $13, $11
12314     0D 08 00 F6 
12318     EC E3 DD D8 
1231c     D8 DB E2 EB 
12320     F6 01 0A 11 | 	byte	$0d, $08, $00, $f6, $ec, $e3, $dd, $d8, $d8, $db, $e2, $eb, $f6, $01, $0a, $11
12324     14 12 0B 01 
12328     F6 E9 DF D9 
1232c     D8 DD E8 F6 
12330     03 0E 13 12 | 	byte	$14, $12, $0b, $01, $f6, $e9, $df, $d9, $d8, $dd, $e8, $f6, $03, $0e, $13, $12
12334     09 FC EC E0 
12338     D8 D9 E3 F5 
1233c     04 10 14 0D 
12340     FE EA DB D7 | 	byte	$09, $fc, $ec, $e0, $d8, $d9, $e3, $f5, $04, $10, $14, $0d, $fe, $ea, $db, $d7
12344     E0 F3 06 12 
12348     12 03 ED DC 
1234c     D8 E6 FE 0E 
12350     13 03 EA D9 | 	byte	$e0, $f3, $06, $12, $12, $03, $ed, $dc, $d8, $e6, $fe, $0e, $13, $03, $ea, $d9
12354     DC F2 0B 14 
12358     03 E8 D8 E2 
1235c     FF 13 0B EE 
12360     D8 E3 02 13 | 	byte	$dc, $f2, $0b, $14, $03, $e8, $d8, $e2, $ff, $13, $0b, $ee, $d8, $e3, $02, $13
12364     01 E1 DA F8 
12368     12 05 E2 DB 
1236c     FE 13 FB DA 
12370     E9 0E 07 E0 | 	byte	$01, $e1, $da, $f8, $12, $05, $e2, $db, $fe, $13, $fb, $da, $e9, $0e, $07, $e0
12374     E1 0B 0A E1 
12378     E3 0D 03 DB 
1237c     F2 12 EE DD 
12380     0A 02 D9 FE | 	byte	$e1, $0b, $0a, $e1, $e3, $0d, $03, $db, $f2, $12, $ee, $dd, $0a, $02, $d9, $fe
12384     0B DC F8 0E 
12388     DC FA 0A DA 
1238c     02 02 DB 0E 
12390     EC ED 0C DC | 	byte	$0b, $dc, $f8, $0e, $dc, $fa, $0a, $da, $02, $02, $db, $0e, $ec, $ed, $0c, $dc
12394     0A F0 EF 08 
12398     DC 10 E0 07 
1239c     EB FA FA EF 
123a0     03 E9 04 E6 | 	byte	$0a, $f0, $ef, $08, $dc, $10, $e0, $07, $eb, $fa, $fa, $ef, $03, $e9, $04, $e6
123a4     06 E8 02 ED 
123a8     FB F3 F0 01 
123ac     E3 0E DD 0A 
123b0     EA F4 04 DF | 	byte	$06, $e8, $02, $ed, $fb, $f3, $f0, $01, $e3, $0e, $dd, $0a, $ea, $f4, $04, $df
123b4     0B EC EF 0A 
123b8     E1 FC 04 E1 
123bc     FF 02 E0 FE 
123c0     00 DE 02 FE | 	byte	$0b, $ec, $ef, $0a, $e1, $fc, $04, $e1, $ff, $02, $e0, $fe, $00, $de, $02, $fe
123c4     E2 0B EC F0 
123c8     08 DF 0A EA 
123cc     F9 FE E6 09 
123d0     E0 0F DD 0D | 	byte	$e2, $0b, $ec, $f0, $08, $df, $0a, $ea, $f9, $fe, $e6, $09, $e0, $0f, $dd, $0d
123d4     DF 0C E0 0B 
123d8     E0 0D DE 0F 
123dc     DD 0D E2 04 
123e0     F2 EF 07 DC | 	byte	$df, $0c, $e0, $0b, $e0, $0d, $de, $0f, $dd, $0d, $e2, $04, $f2, $ef, $07, $dc
123e4     0F E3 FA 03 
123e8     DC 0E EA EB 
123ec     10 DE F9 0B 
123f0     DB FD 09 DB | 	byte	$0f, $e3, $fa, $03, $dc, $0e, $ea, $eb, $10, $de, $f9, $0b, $db, $fd, $09, $db
123f4     F9 0E E0 ED 
123f8     12 EF DD 09 
123fc     06 DD EE 11 
12400     FA D9 F4 12 | 	byte	$f9, $0e, $e0, $ed, $12, $ef, $dd, $09, $06, $dd, $ee, $11, $fa, $d9, $f4, $12
12404     FA D9 EE 10 
12408     04 DF DF 03 
1240c     12 F7 D9 E5 
12410     06 13 F9 DC | 	byte	$fa, $d9, $ee, $10, $04, $df, $df, $03, $12, $f7, $d9, $e5, $06, $13, $f9, $dc
12414     DE FD 12 09 
12418     EC D8 E2 00 
1241c     12 0C F3 DC 
12420     D9 EE 07 13 | 	byte	$de, $fd, $12, $09, $ec, $d8, $e2, $00, $12, $0c, $f3, $dc, $d9, $ee, $07, $13
12424     0B F4 DF D8 
12428     E4 FB 0D 13 
1242c     09 F6 E2 D8 
12430     DC ED FF 0F | 	byte	$0b, $f4, $df, $d8, $e4, $fb, $0d, $13, $09, $f6, $e2, $d8, $dc, $ed, $ff, $0f
12434     13 0C FC EB 
12438     DD D8 DD EA 
1243c     FB 08 11 13 
12440     0C 00 F1 E3 | 	byte	$13, $0c, $fc, $eb, $dd, $d8, $dd, $ea, $fb, $08, $11, $13, $0c, $00, $f1, $e3
12444     DB D8 DC E6 
12448     F3 00 0A 10 
1244c     12 0F 07 FD 
12450     F1 E6 DE D9 | 	byte	$db, $d8, $dc, $e6, $f3, $00, $0a, $10, $12, $0f, $07, $fd, $f1, $e6, $de, $d9
12454     D9 DC E3 ED 
12458     F8 01 09 0F 
1245c     11 11 0F 08 
12460     01 F9 F1 E8 | 	byte	$d9, $dc, $e3, $ed, $f8, $01, $09, $0f, $11, $11, $0f, $08, $01, $f9, $f1, $e8
12464     E1 DD DA DA 
12468     DC E0 E7 EE 
1246c     F5 FD 03 08 
12470     0C 0F 10 0F | 	byte	$e1, $dd, $da, $da, $dc, $e0, $e7, $ee, $f5, $fd, $03, $08, $0c, $0f, $10, $0f
12474     0E 0A 05 00 
12478     FB F4 EF E9 
1247c     E4 E0 DE DC 
12480     DC DD DF E2 | 	byte	$0e, $0a, $05, $00, $fb, $f4, $ef, $e9, $e4, $e0, $de, $dc, $dc, $dd, $df, $e2
12484     E6 EB F1 F8 
12488     FF 03 08 0D 
1248c     10 11 11 0F 
12490     0C 06 00 F9 | 	byte	$e6, $eb, $f1, $f8, $ff, $03, $08, $0d, $10, $11, $11, $0f, $0c, $06, $00, $f9
12494     F1 E9 E2 DE 
12498     DA D8 D9 DD 
1249c     E3 EB F4 FE 
124a0     06 0C 11 13 | 	byte	$f1, $e9, $e2, $de, $da, $d8, $d9, $dd, $e3, $eb, $f4, $fe, $06, $0c, $11, $13
124a4     11 0C 04 FC 
124a8     F0 E6 DE D9 
124ac     D8 DB E2 EE 
124b0     FA 04 0E 12 | 	byte	$11, $0c, $04, $fc, $f0, $e6, $de, $d9, $d8, $db, $e2, $ee, $fa, $04, $0e, $12
124b4     12 0C 02 F6 
124b8     E8 DD D8 D9 
124bc     E3 F0 FE 0B 
124c0     12 12 08 FA | 	byte	$12, $0c, $02, $f6, $e8, $dd, $d8, $d9, $e3, $f0, $fe, $0b, $12, $12, $08, $fa
124c4     EA DD D8 DE 
124c8     EC FF 0D 13 
124cc     0E FE EA DB 
124d0     D8 E3 F8 0B | 	byte	$ea, $dd, $d8, $de, $ec, $ff, $0d, $13, $0e, $fe, $ea, $db, $d8, $e3, $f8, $0b
124d4     13 0A F8 E1 
124d8     D8 E1 F9 0D 
124dc     13 03 EA D9 
124e0     DF F7 0F 10 | 	byte	$13, $0a, $f8, $e1, $d8, $e1, $f9, $0d, $13, $03, $ea, $d9, $df, $f7, $0f, $10
124e4     FA E1 D8 F0 
124e8     0A 11 FA DD 
124ec     DD FB 11 05 
124f0     E4 D9 F7 11 | 	byte	$fa, $e1, $d8, $f0, $0a, $11, $fa, $dd, $dd, $fb, $11, $05, $e4, $d9, $f7, $11
124f4     04 E1 DD 01 
124f8     12 F3 D9 F2 
124fc     11 FC DB EF 
12500     10 FA D9 F8 | 	byte	$04, $e1, $dd, $01, $12, $f3, $d9, $f2, $11, $fc, $db, $ef, $10, $fa, $d9, $f8
12504     11 EC DE 0A 
12508     03 DA F9 0F 
1250c     E1 ED 11 E7 
12510     EA 10 E6 ED | 	byte	$11, $ec, $de, $0a, $03, $da, $f9, $0f, $e1, $ed, $11, $e7, $ea, $10, $e6, $ed
12514     0F E0 F7 08 
12518     DA 09 F5 E6 
1251c     10 DC 05 F3 
12520     EB 0A DC 0D | 	byte	$0f, $e0, $f7, $08, $da, $09, $f5, $e6, $10, $dc, $05, $f3, $eb, $0a, $dc, $0d
12524     E0 06 EC F8 
12528     F9 EF 00 EA 
1252c     03 E8 02 E8 
12530     FF EF F9 F9 | 	byte	$e0, $06, $ec, $f8, $f9, $ef, $00, $ea, $03, $e8, $02, $e8, $ff, $ef, $f9, $f9
12534     ED 04 E3 0C 
12538     DF 06 EF F1 
1253c     05 E0 08 F0 
12540     ED 0B E2 FB | 	byte	$ed, $04, $e3, $0c, $df, $06, $ef, $f1, $05, $e0, $08, $f0, $ed, $0b, $e2, $fb
12544     06 E0 01 FC 
12548     E3 0C E7 F6 
1254c     03 E1 0C E2 
12550     01 F3 F0 02 | 	byte	$06, $e0, $01, $fc, $e3, $0c, $e7, $f6, $03, $e1, $0c, $e2, $01, $f3, $f0, $02
12554     E5 09 E0 0E 
12558     DD 0E DD 0E 
1255c     DE 0C DF 09 
12560     E6 FE F5 ED | 	byte	$e5, $09, $e0, $0e, $dd, $0e, $dd, $0e, $de, $0c, $df, $09, $e6, $fe, $f5, $ed
12564     07 DE 0F E0 
12568     00 FF E1 10 
1256c     E1 FB 04 DB 
12570     0A F7 E0 0E | 	byte	$07, $de, $0f, $e0, $00, $ff, $e1, $10, $e1, $fb, $04, $db, $0a, $f7, $e0, $0e
12574     EF E2 0F F0 
12578     E0 0D FA DA 
1257c     04 08 DC EE 
12580     10 F3 DA FF | 	byte	$ef, $e2, $0f, $f0, $e0, $0d, $fa, $da, $04, $08, $dc, $ee, $10, $f3, $da, $ff
12584     0F EA DD 03 
12588     0E EC DA FB 
1258c     12 FA DA E8 
12590     0A 0E EF D9 | 	byte	$0f, $ea, $dd, $03, $0e, $ec, $da, $fb, $12, $fa, $da, $e8, $0a, $0e, $ef, $d9
12594     EB 0B 0F F3 
12598     DA E1 FF 11 
1259c     07 EA D8 E3 
125a0     00 11 0C F4 | 	byte	$eb, $0b, $0f, $f3, $da, $e1, $ff, $11, $07, $ea, $d8, $e3, $00, $11, $0c, $f4
125a4     DD DA EC 05 
125a8     11 0C F7 E1 
125ac     D8 E1 F6 08 
125b0     12 0C FB E7 | 	byte	$dd, $da, $ec, $05, $11, $0c, $f7, $e1, $d8, $e1, $f6, $08, $12, $0c, $fb, $e7
125b4     DA D9 E6 F9 
125b8     09 11 11 04 
125bc     F4 E4 DA D9 
125c0     E1 F0 00 0B | 	byte	$da, $d9, $e6, $f9, $09, $11, $11, $04, $f4, $e4, $da, $d9, $e1, $f0, $00, $0b
125c4     11 11 09 FD 
125c8     F0 E2 DB D9 
125cc     DD E6 F2 FF 
125d0     08 0F 11 0F | 	byte	$11, $11, $09, $fd, $f0, $e2, $db, $d9, $dd, $e6, $f2, $ff, $08, $0f, $11, $0f
125d4     08 FF F5 EA 
125d8     E1 DC D9 DB 
125dc     E0 E7 F1 FB 
125e0     02 09 0E 10 | 	byte	$08, $ff, $f5, $ea, $e1, $dc, $d9, $db, $e0, $e7, $f1, $fb, $02, $09, $0e, $10
125e4     10 0D 08 01 
125e8     F9 F2 EA E4 
125ec     DF DC DB DC 
125f0     DF E3 E9 EF | 	byte	$10, $0d, $08, $01, $f9, $f2, $ea, $e4, $df, $dc, $db, $dc, $df, $e3, $e9, $ef
125f4     F6 FD 02 07 
125f8     0B 0E 0F 0F 
125fc     0D 0A 06 01 
12600     FE F8 F2 ED | 	byte	$f6, $fd, $02, $07, $0b, $0e, $0f, $0f, $0d, $0a, $06, $01, $fe, $f8, $f2, $ed
12604     E8 E4 E1 DF 
12608     DD DC DD DF 
1260c     E2 E6 EB F1 
12610     F7 FE 03 07 | 	byte	$e8, $e4, $e1, $df, $dd, $dc, $dd, $df, $e2, $e6, $eb, $f1, $f7, $fe, $03, $07
12614     0C 0F 10 10 
12618     0F 0C 07 01 
1261c     FB F3 EC E5 
12620     E0 DC D9 DA | 	byte	$0c, $0f, $10, $10, $0f, $0c, $07, $01, $fb, $f3, $ec, $e5, $e0, $dc, $d9, $da
12624     DD E2 E9 F2 
12628     FB 03 0A 0F 
1262c     11 11 0D 07 
12630     FF F4 E9 E1 | 	byte	$dd, $e2, $e9, $f2, $fb, $03, $0a, $0f, $11, $11, $0d, $07, $ff, $f4, $e9, $e1
12634     DB D8 DA E0 
12638     EA F6 01 0B 
1263c     11 12 0E 04 
12640     F9 EB E1 DA | 	byte	$db, $d8, $da, $e0, $ea, $f6, $01, $0b, $11, $12, $0e, $04, $f9, $eb, $e1, $da
12644     D9 E0 ED FB 
12648     08 10 12 0A 
1264c     FD ED E0 D8 
12650     DC E9 FB 0B | 	byte	$d9, $e0, $ed, $fb, $08, $10, $12, $0a, $fd, $ed, $e0, $d8, $dc, $e9, $fb, $0b
12654     11 0F 01 ED 
12658     DE D8 E1 F5 
1265c     08 12 0C F9 
12660     E4 D8 E0 F6 | 	byte	$11, $0f, $01, $ed, $de, $d8, $e1, $f5, $08, $12, $0c, $f9, $e4, $d8, $e0, $f6
12664     0B 12 04 ED 
12668     DA DE F5 0D 
1266c     10 FC E2 DA 
12670     EE 0A 11 FA | 	byte	$0b, $12, $04, $ed, $da, $de, $f5, $0d, $10, $fc, $e2, $da, $ee, $0a, $11, $fa
12674     DE DD FA 11 
12678     05 E4 DA F6 
1267c     10 03 E2 DE 
12680     01 10 F3 D9 | 	byte	$de, $dd, $fa, $11, $05, $e4, $da, $f6, $10, $03, $e2, $de, $01, $10, $f3, $d9
12684     F4 10 FC DA 
12688     F1 10 F8 D9 
1268c     F9 11 EA DF 
12690     09 02 DB FA | 	byte	$f4, $10, $fc, $da, $f1, $10, $f8, $d9, $f9, $11, $ea, $df, $09, $02, $db, $fa
12694     0D E1 EE 10 
12698     E7 EA 10 E6 
1269c     ED 0F E0 F7 
126a0     08 DC 08 F5 | 	byte	$0d, $e1, $ee, $10, $e7, $ea, $10, $e6, $ed, $0f, $e0, $f7, $08, $dc, $08, $f5
126a4     E5 0F DE 03 
126a8     F7 E9 0B DD 
126ac     0D E3 02 F1 
126b0     F3 FE E8 04 | 	byte	$e5, $0f, $de, $03, $f7, $e9, $0b, $dd, $0d, $e3, $02, $f1, $f3, $fe, $e8, $04
126b4     E4 09 E2 09 
126b8     E3 07 E7 04 
126bc     EE F8 F8 EB 
126c0     03 E1 0C E1 | 	byte	$e4, $09, $e2, $09, $e3, $07, $e7, $04, $ee, $f8, $f8, $eb, $03, $e1, $0c, $e1
126c4     00 F6 E8 0B 
126c8     E0 02 FC E3 
126cc     0B E8 F6 01 
126d0     E1 0B E3 01 | 	byte	$00, $f6, $e8, $0b, $e0, $02, $fc, $e3, $0b, $e8, $f6, $01, $e1, $0b, $e3, $01
126d4     F4 F0 01 E5 
126d8     0A E0 0E DE 
126dc     0D DE 0D DE 
126e0     0D DF 0B E4 | 	byte	$f4, $f0, $01, $e5, $0a, $e0, $0e, $de, $0d, $de, $0d, $de, $0d, $df, $0b, $e4
126e4     03 EF F5 00 
126e8     E3 0E DC 08 
126ec     F0 ED 0C DC 
126f0     07 F7 E3 0E | 	byte	$03, $ef, $f5, $00, $e3, $0e, $dc, $08, $f0, $ed, $0c, $dc, $07, $f7, $e3, $0e
126f4     E6 F0 0D DF 
126f8     F8 0C DF F6 
126fc     0E E1 EC 10 
12700     EE DE 0A 02 | 	byte	$e6, $f0, $0d, $df, $f8, $0c, $df, $f6, $0e, $e1, $ec, $10, $ee, $de, $0a, $02
12704     DC F2 10 F3 
12708     DA FB 10 EF 
1270c     DA FA 11 F6 
12710     DA ED 0E 08 | 	byte	$dc, $f2, $10, $f3, $da, $fb, $10, $ef, $da, $fa, $11, $f6, $da, $ed, $0e, $08
12714     E4 DB F9 10 
12718     04 E4 DB F4 
1271c     0E 0C F0 DB 
12720     E2 FF 10 09 | 	byte	$e4, $db, $f9, $10, $04, $e4, $db, $f4, $0e, $0c, $f0, $db, $e2, $ff, $10, $09
12724     EF DB DF F6 
12728     0B 11 01 E9 
1272c     DA DE F3 07 
12730     11 0A F8 E3 | 	byte	$ef, $db, $df, $f6, $0b, $11, $01, $e9, $da, $de, $f3, $07, $11, $0a, $f8, $e3
12734     D9 DE EF 02 
12738     0F 10 06 F5 
1273c     E4 DA DB E6 
12740     F7 06 0F 11 | 	byte	$d9, $de, $ef, $02, $0f, $10, $06, $f5, $e4, $da, $db, $e6, $f7, $06, $0f, $11
12744     09 FE EE E1 
12748     DA DA E2 EF 
1274c     FD 07 0F 11 
12750     0E 05 FA EE | 	byte	$09, $fe, $ee, $e1, $da, $da, $e2, $ef, $fd, $07, $0f, $11, $0e, $05, $fa, $ee
12754     E4 DD DA DC 
12758     E1 EB F6 00 
1275c     08 0E 10 0F 
12760     0A 03 FD F3 | 	byte	$e4, $dd, $da, $dc, $e1, $eb, $f6, $00, $08, $0e, $10, $0f, $0a, $03, $fd, $f3
12764     EA E3 DE DB 
12768     DB DE E2 E9 
1276c     F0 F8 00 06 
12770     0B 0E 0F 0E | 	byte	$ea, $e3, $de, $db, $db, $de, $e2, $e9, $f0, $f8, $00, $06, $0b, $0e, $0f, $0e
12774     0C 08 03 FF 
12778     F8 F1 EB E6 
1277c     E1 DF DD DD 
12780     DE E0 E3 E7 | 	byte	$0c, $08, $03, $ff, $f8, $f1, $eb, $e6, $e1, $df, $dd, $dd, $de, $e0, $e3, $e7
12784     EC F2 F8 FD 
12788     00 03 07 0A 
1278c     0C 0D 0D 0C 
12790     0A 07 03 00 | 	byte	$ec, $f2, $f8, $fd, $00, $03, $07, $0a, $0c, $0d, $0d, $0c, $0a, $07, $03, $00
12794     FB F6 F0 EA 
12798     E5 E1 DE DC 
1279c     DB DC DE E0 
127a0     E6 EC F2 FA | 	byte	$fb, $f6, $f0, $ea, $e5, $e1, $de, $dc, $db, $dc, $de, $e0, $e6, $ec, $f2, $fa
127a4     00 06 0B 0F 
127a8     10 10 0E 09 
127ac     03 FC F4 ED 
127b0     E5 E0 DC D9 | 	byte	$00, $06, $0b, $0f, $10, $10, $0e, $09, $03, $fc, $f4, $ed, $e5, $e0, $dc, $d9
127b4     DB E0 E7 F0 
127b8     FA 02 0A 0F 
127bc     11 0F 09 00 
127c0     F6 EB E2 DC | 	byte	$db, $e0, $e7, $f0, $fa, $02, $0a, $0f, $11, $0f, $09, $00, $f6, $eb, $e2, $dc
127c4     D9 DC E4 F0 
127c8     FD 07 0F 11 
127cc     0E 04 F8 EA 
127d0     DF D9 DC E6 | 	byte	$d9, $dc, $e4, $f0, $fd, $07, $0f, $11, $0e, $04, $f8, $ea, $df, $d9, $dc, $e6
127d4     F5 03 0E 11 
127d8     0B FD ED DF 
127dc     D9 DF EE 00 
127e0     0E 11 06 F4 | 	byte	$f5, $03, $0e, $11, $0b, $fd, $ed, $df, $d9, $df, $ee, $00, $0e, $11, $06, $f4
127e4     E2 D9 E0 F3 
127e8     07 10 0B F7 
127ec     E1 D9 E5 FD 
127f0     0E 0E F9 E2 | 	byte	$e2, $d9, $e0, $f3, $07, $10, $0b, $f7, $e1, $d9, $e5, $fd, $0e, $0e, $f9, $e2
127f4     D9 EB 06 11 
127f8     02 E6 D9 EB 
127fc     07 10 F9 DD 
12800     E0 FD 10 FF | 	byte	$d9, $eb, $06, $11, $02, $e6, $d9, $eb, $07, $10, $f9, $dd, $e0, $fd, $10, $ff
12804     E0 E0 00 10 
12808     F7 DB EB 0C 
1280c     06 E1 E3 07 
12810     09 E2 E2 09 | 	byte	$e0, $e0, $00, $10, $f7, $db, $eb, $0c, $06, $e1, $e3, $07, $09, $e2, $e2, $09
12814     04 DE EC 0F 
12818     F5 DB 02 07 
1281c     DF F2 0F E5 
12820     EA 0F E8 E6 | 	byte	$04, $de, $ec, $0f, $f5, $db, $02, $07, $df, $f2, $0f, $e5, $ea, $0f, $e8, $e6
12824     0E E6 ED 0D 
12828     E0 FA 04 DC 
1282c     0A F0 EB 0C 
12830     DD 08 EE F1 | 	byte	$0e, $e6, $ed, $0d, $e0, $fa, $04, $dc, $0a, $f0, $eb, $0c, $dd, $08, $ee, $f1
12834     05 DF 0D DE 
12838     09 E6 FC F1 
1283c     F6 F9 F0 FE 
12840     ED FE EE FB | 	byte	$05, $df, $0d, $de, $09, $e6, $fc, $f1, $f6, $f9, $f0, $fe, $ed, $fe, $ee, $fb
12844     F3 F5 FB EB 
12848     05 E0 0B E0 
1284c     06 EC F4 02 
12850     E2 0A E8 F9 | 	byte	$f3, $f5, $fb, $eb, $05, $e0, $0b, $e0, $06, $ec, $f4, $02, $e2, $0a, $e8, $f9
12854     FF E5 0B DF 
12858     08 E8 FE F3 
1285c     F4 FC EE FD 
12860     EB 01 EA FE | 	byte	$ff, $e5, $0b, $df, $08, $e8, $fe, $f3, $f4, $fc, $ee, $fd, $eb, $01, $ea, $fe
12864     EF F8 F8 EE 
12868     03 E2 0D DD 
1286c     0A E7 F8 00 
12870     DF 0E E2 FA | 	byte	$ef, $f8, $f8, $ee, $03, $e2, $0d, $dd, $0a, $e7, $f8, $00, $df, $0e, $e2, $fa
12874     02 DD 0B F1 
12878     E6 0F E5 EE 
1287c     0E E3 EF 0F 
12880     E6 E8 0F F0 | 	byte	$02, $dd, $0b, $f1, $e6, $0f, $e5, $ee, $0e, $e3, $ef, $0f, $e6, $e8, $0f, $f0
12884     DE 08 02 DD 
12888     F4 0F EF DC 
1288c     01 0D E9 DE 
12890     01 0E ED DB | 	byte	$de, $08, $02, $dd, $f4, $0f, $ef, $dc, $01, $0d, $e9, $de, $01, $0e, $ed, $db
12894     F9 10 FC DD 
12898     E5 06 0F F2 
1289c     DB E6 06 10 
128a0     F9 DF DE F9 | 	byte	$f9, $10, $fc, $dd, $e5, $06, $0f, $f2, $db, $e6, $06, $10, $f9, $df, $de, $f9
128a4     0E 0B F1 DC 
128a8     DF F7 0C 10 
128ac     FD E4 D9 E4 
128b0     FC 0D 10 01 | 	byte	$0e, $0b, $f1, $dc, $df, $f7, $0c, $10, $fd, $e4, $d9, $e4, $fc, $0d, $10, $01
128b4     EB DC DB EA 
128b8     FF 0D 10 05 
128bc     F3 E2 DA DD 
128c0     EB FD 0A 10 | 	byte	$eb, $dc, $db, $ea, $ff, $0d, $10, $05, $f3, $e2, $da, $dd, $eb, $fd, $0a, $10
128c4     0D 01 F2 E4 
128c8     DC DB E1 EF 
128cc     FE 09 0F 0F 
128d0     09 00 F3 E7 | 	byte	$0d, $01, $f2, $e4, $dc, $db, $e1, $ef, $fe, $09, $0f, $0f, $09, $00, $f3, $e7
128d4     DF DA DC E2 
128d8     ED F9 02 0A 
128dc     0F 0F 0C 06 
128e0     FE F3 E9 E2 | 	byte	$df, $da, $dc, $e2, $ed, $f9, $02, $0a, $0f, $0f, $0c, $06, $fe, $f3, $e9, $e2
128e4     DE DB DC E0 
128e8     E6 EF F7 FF 
128ec     05 0A 0E 0F 
128f0     0E 0A 05 FF | 	byte	$de, $db, $dc, $e0, $e6, $ef, $f7, $ff, $05, $0a, $0e, $0f, $0e, $0a, $05, $ff
128f4     F8 F1 EB E5 
128f8     E1 DF DD DD 
128fc     DF E2 E6 EC 
12900     F2 F8 FE 01 | 	byte	$f8, $f1, $eb, $e5, $e1, $df, $dd, $dd, $df, $e2, $e6, $ec, $f2, $f8, $fe, $01
12904     06 09 0B 0C 
12908     0C 0C 09 07 
1290c     04 00 FC F8 
12910     F3 EE EA E6 | 	byte	$06, $09, $0b, $0c, $0c, $0c, $09, $07, $04, $00, $fc, $f8, $f3, $ee, $ea, $e6
12914     E3 E0 DF DE 
12918     DE DF E1 E3 
1291c     E7 EC F0 F6 
12920     FC 00 05 09 | 	byte	$e3, $e0, $df, $de, $de, $df, $e1, $e3, $e7, $ec, $f0, $f6, $fc, $00, $05, $09
12924     0C 0E 0F 0E 
12928     0C 08 04 FF 
1292c     F8 F1 EB E5 
12930     E0 DD DB DB | 	byte	$0c, $0e, $0f, $0e, $0c, $08, $04, $ff, $f8, $f1, $eb, $e5, $e0, $dd, $db, $db
12934     DE E2 E8 F0 
12938     F8 00 06 0C 
1293c     0F 10 0E 09 
12940     01 F9 F0 E7 | 	byte	$de, $e2, $e8, $f0, $f8, $00, $06, $0c, $0f, $10, $0e, $09, $01, $f9, $f0, $e7
12944     E0 DC DA DD 
12948     E3 EE F9 02 
1294c     0B 0F 10 0C 
12950     02 F7 EB E0 | 	byte	$e0, $dc, $da, $dd, $e3, $ee, $f9, $02, $0b, $0f, $10, $0c, $02, $f7, $eb, $e0
12954     DA DB E1 ED 
12958     FB 06 0E 10 
1295c     0A FE EF E1 
12960     DA DC E7 F8 | 	byte	$da, $db, $e1, $ed, $fb, $06, $0e, $10, $0a, $fe, $ef, $e1, $da, $dc, $e7, $f8
12964     07 0F 0F 02 
12968     F1 E0 D9 DF 
1296c     F0 04 0F 0D 
12970     FE E9 DB DD | 	byte	$07, $0f, $0f, $02, $f1, $e0, $d9, $df, $f0, $04, $0f, $0d, $fe, $e9, $db, $dd
12974     F0 05 10 08 
12978     F3 DF DB EE 
1297c     06 10 02 E9 
12980     DB E6 02 0F | 	byte	$f0, $05, $10, $08, $f3, $df, $db, $ee, $06, $10, $02, $e9, $db, $e6, $02, $0f
12984     02 E6 DA EF 
12988     0A 0C F0 DB 
1298c     E9 08 0C EE 
12990     DA F3 0E 01 | 	byte	$02, $e6, $da, $ef, $0a, $0c, $f0, $db, $e9, $08, $0c, $ee, $da, $f3, $0e, $01
12994     DF E4 07 09 
12998     E4 E1 06 08 
1299c     E3 E6 0C FE 
129a0     DC F6 0F E9 | 	byte	$df, $e4, $07, $09, $e4, $e1, $06, $08, $e3, $e6, $0c, $fe, $dc, $f6, $0f, $e9
129a4     E3 0C F9 DC 
129a8     05 02 DC 01 
129ac     03 DC 03 FE 
129b0     DD 09 F3 E5 | 	byte	$e3, $0c, $f9, $dc, $05, $02, $dc, $01, $03, $dc, $03, $fe, $dd, $09, $f3, $e5
129b4     0E E3 FA 01 
129b8     DF 0D E5 FB 
129bc     FD E4 0C DF 
129c0     0A E5 00 F2 | 	byte	$0e, $e3, $fa, $01, $df, $0d, $e5, $fb, $fd, $e4, $0c, $df, $0a, $e5, $00, $f2
129c4     F4 FC EB 02 
129c8     E8 05 E6 04 
129cc     E6 01 ED FB 
129d0     F5 F1 00 E5 | 	byte	$f4, $fc, $eb, $02, $e8, $05, $e6, $04, $e6, $01, $ed, $fb, $f5, $f1, $00, $e5
129d4     09 E0 09 E7 
129d8     FB FB E8 07 
129dc     E0 0C DF 09 
129e0     E4 04 E9 02 | 	byte	$09, $e0, $09, $e7, $fb, $fb, $e8, $07, $e0, $0c, $df, $09, $e4, $04, $e9, $02
129e4     E9 03 E8 05 
129e8     E3 09 E0 0D 
129ec     E0 08 E7 FA 
129f0     FB E6 0C DE | 	byte	$e9, $03, $e8, $05, $e3, $09, $e0, $0d, $e0, $08, $e7, $fa, $fb, $e6, $0c, $de
129f4     06 F2 EA 0C 
129f8     DE 01 FD DF 
129fc     0B F0 E6 0E 
12a00     EA E8 0F EB | 	byte	$06, $f2, $ea, $0c, $de, $01, $fd, $df, $0b, $f0, $e6, $0e, $ea, $e8, $0f, $eb
12a04     E4 0E F3 DE 
12a08     05 02 DD F4 
12a0c     0F EE DE 03 
12a10     0A E4 E2 07 | 	byte	$e4, $0e, $f3, $de, $05, $02, $dd, $f4, $0f, $ee, $de, $03, $0a, $e4, $e2, $07
12a14     09 E5 DF 02 
12a18     0E F1 DB F2 
12a1c     0E 05 E5 DD 
12a20     F8 0E 04 E7 | 	byte	$09, $e5, $df, $02, $0e, $f1, $db, $f2, $0e, $05, $e5, $dd, $f8, $0e, $04, $e7
12a24     DA EF 09 0E 
12a28     F7 E0 DE F5 
12a2c     0C 0F FB E3 
12a30     DA E7 00 0E | 	byte	$da, $ef, $09, $0e, $f7, $e0, $de, $f5, $0c, $0f, $fb, $e3, $da, $e7, $00, $0e
12a34     0C FA E4 DA 
12a38     E2 F6 08 10 
12a3c     09 F8 E5 DB 
12a40     DD EB FE 0B | 	byte	$0c, $fa, $e4, $da, $e2, $f6, $08, $10, $09, $f8, $e5, $db, $dd, $eb, $fe, $0b
12a44     10 09 FD EC 
12a48     DF DA DF EB 
12a4c     FA 07 0F 0F 
12a50     08 FD F0 E4 | 	byte	$10, $09, $fd, $ec, $df, $da, $df, $eb, $fa, $07, $0f, $0f, $08, $fd, $f0, $e4
12a54     DD DB DF E8 
12a58     F5 00 08 0E 
12a5c     0F 0C 03 FA 
12a60     F0 E6 E0 DC | 	byte	$dd, $db, $df, $e8, $f5, $00, $08, $0e, $0f, $0c, $03, $fa, $f0, $e6, $e0, $dc
12a64     DC E0 E6 EE 
12a68     F8 00 06 0C 
12a6c     0E 0E 0B 06 
12a70     00 F8 F1 E9 | 	byte	$dc, $e0, $e6, $ee, $f8, $00, $06, $0c, $0e, $0e, $0b, $06, $00, $f8, $f1, $e9
12a74     E4 E0 DD DD 
12a78     DF E1 E6 EB 
12a7c     F2 F9 FF 03 
12a80     07 0B 0C 0C | 	byte	$e4, $e0, $dd, $dd, $df, $e1, $e6, $eb, $f2, $f9, $ff, $03, $07, $0b, $0c, $0c
12a84     0C 09 06 02 
12a88     FE F9 F4 EF 
12a8c     EA E7 E3 E1 
12a90     E0 DF E0 E0 | 	byte	$0c, $09, $06, $02, $fe, $f9, $f4, $ef, $ea, $e7, $e3, $e1, $e0, $df, $e0, $e0
12a94     E2 E5 E8 EC 
12a98     F0 F5 F9 FE 
12a9c     01 04 07 09 
12aa0     0B 0C 0C 0C | 	byte	$e2, $e5, $e8, $ec, $f0, $f5, $f9, $fe, $01, $04, $07, $09, $0b, $0c, $0c, $0c
12aa4     09 07 03 00 
12aa8     FC F6 F1 EC 
12aac     E7 E2 E0 DD 
12ab0     DC DC DF E1 | 	byte	$09, $07, $03, $00, $fc, $f6, $f1, $ec, $e7, $e2, $e0, $dd, $dc, $dc, $df, $e1
12ab4     E5 EB F2 F8 
12ab8     FF 04 09 0C 
12abc     0F 0F 0C 08 
12ac0     02 FC F3 EC | 	byte	$e5, $eb, $f2, $f8, $ff, $04, $09, $0c, $0f, $0f, $0c, $08, $02, $fc, $f3, $ec
12ac4     E4 DF DC DB 
12ac8     DD E2 EA F3 
12acc     FD 05 0B 0F 
12ad0     0F 0C 04 FB | 	byte	$e4, $df, $dc, $db, $dd, $e2, $ea, $f3, $fd, $05, $0b, $0f, $0f, $0c, $04, $fb
12ad4     F0 E6 DF DB 
12ad8     DC E2 EB F8 
12adc     03 0B 0F 0E 
12ae0     05 F9 EB E0 | 	byte	$f0, $e6, $df, $db, $dc, $e2, $eb, $f8, $03, $0b, $0f, $0e, $05, $f9, $eb, $e0
12ae4     DB DC E6 F5 
12ae8     03 0D 0F 08 
12aec     FB EA DF DA 
12af0     E2 F3 04 0E | 	byte	$db, $dc, $e6, $f5, $03, $0d, $0f, $08, $fb, $ea, $df, $da, $e2, $f3, $04, $0e
12af4     0D 00 EE DE 
12af8     DB E8 FD 0C 
12afc     0F 00 EB DC 
12b00     DF F2 08 0F | 	byte	$0d, $00, $ee, $de, $db, $e8, $fd, $0c, $0f, $00, $eb, $dc, $df, $f2, $08, $0f
12b04     01 E9 DB E5 
12b08     FE 0E 06 ED 
12b0c     DC E5 02 0F 
12b10     FF E2 DE F9 | 	byte	$01, $e9, $db, $e5, $fe, $0e, $06, $ed, $dc, $e5, $02, $0f, $ff, $e2, $de, $f9
12b14     0E 02 E3 DE 
12b18     FD 0F FB DE 
12b1c     EA 09 06 E4 
12b20     E2 04 09 E5 | 	byte	$0e, $02, $e3, $de, $fd, $0f, $fb, $de, $ea, $09, $06, $e4, $e2, $04, $09, $e5
12b24     E1 07 04 E0 
12b28     EC 0D F6 DC 
12b2c     00 07 E0 F2 
12b30     0D E7 E9 0E | 	byte	$e1, $07, $04, $e0, $ec, $0d, $f6, $dc, $00, $07, $e0, $f2, $0d, $e7, $e9, $0e
12b34     EB E8 0E E8 
12b38     EC 0D E1 F8 
12b3c     05 DE 07 F3 
12b40     E8 0C DF 03 | 	byte	$eb, $e8, $0e, $e8, $ec, $0d, $e1, $f8, $05, $de, $07, $f3, $e8, $0c, $df, $03
12b44     F3 EC 07 DF 
12b48     0B E3 00 EF 
12b4c     F4 00 E9 04 
12b50     E4 08 E1 0A | 	byte	$f3, $ec, $07, $df, $0b, $e3, $00, $ef, $f4, $00, $e9, $04, $e4, $08, $e1, $0a
12b54     E1 09 E3 06 
12b58     E6 01 EC FA 
12b5c     F9 ED 04 E1 
12b60     0B DF 0A E2 | 	byte	$e1, $09, $e3, $06, $e6, $01, $ec, $fa, $f9, $ed, $04, $e1, $0b, $df, $0a, $e2
12b64     06 E5 03 E7 
12b68     03 E6 05 E2 
12b6c     09 DF 0C E0 
12b70     09 E7 FE F8 | 	byte	$06, $e5, $03, $e7, $03, $e6, $05, $e2, $09, $df, $0c, $e0, $09, $e7, $fe, $f8
12b74     E9 0A DF 09 
12b78     EC F0 08 DE 
12b7c     05 F5 E5 0D 
12b80     E5 F0 0B E1 | 	byte	$e9, $0a, $df, $09, $ec, $f0, $08, $de, $05, $f5, $e5, $0d, $e5, $f0, $0b, $e1
12b84     F6 0B E0 F4 
12b88     0D E3 EC 0D 
12b8c     EF DF 07 03 
12b90     DE F2 0E F2 | 	byte	$f6, $0b, $e0, $f4, $0d, $e3, $ec, $0d, $ef, $df, $07, $03, $de, $f2, $0e, $f2
12b94     DD FD 0D EF 
12b98     DC FC 0E F2 
12b9c     DC F2 0D 02 
12ba0     E2 E0 FD 0F | 	byte	$dd, $fd, $0d, $ef, $dc, $fc, $0e, $f2, $dc, $f2, $0d, $02, $e2, $e0, $fd, $0f
12ba4     FD E0 E0 FB 
12ba8     0F 03 E7 DB 
12bac     EC 07 0F FF 
12bb0     E5 DB EA 02 | 	byte	$fd, $e0, $e0, $fb, $0f, $03, $e7, $db, $ec, $07, $0f, $ff, $e5, $db, $ea, $02
12bb4     0F 08 F2 DF 
12bb8     DC EC 01 0E 
12bbc     0C FC E7 DC 
12bc0     DF EF 00 0D | 	byte	$0f, $08, $f2, $df, $dc, $ec, $01, $0e, $0c, $fc, $e7, $dc, $df, $ef, $00, $0d
12bc4     0F 03 F2 E2 
12bc8     DC DF EB FC 
12bcc     07 0F 0D 03 
12bd0     F5 E7 DE DB | 	byte	$0f, $03, $f2, $e2, $dc, $df, $eb, $fc, $07, $0f, $0d, $03, $f5, $e7, $de, $db
12bd4     E0 EA F8 03 
12bd8     0B 0F 0C 04 
12bdc     FA EE E4 DE 
12be0     DC DE E5 EE | 	byte	$e0, $ea, $f8, $03, $0b, $0f, $0c, $04, $fa, $ee, $e4, $de, $dc, $de, $e5, $ee
12be4     F9 01 09 0D 
12be8     0E 0C 06 FF 
12bec     F7 ED E6 E0 
12bf0     DE DC DF E3 | 	byte	$f9, $01, $09, $0d, $0e, $0c, $06, $ff, $f7, $ed, $e6, $e0, $de, $dc, $df, $e3
12bf4     E9 F0 F8 FF 
12bf8     04 09 0C 0D 
12bfc     0C 0A 06 01 
12c00     FC F5 F0 EA | 	byte	$e9, $f0, $f8, $ff, $04, $09, $0c, $0d, $0c, $0a, $06, $01, $fc, $f5, $f0, $ea
12c04     E5 E1 E0 DE 
12c08     DF E0 E3 E6 
12c0c     EB F0 F5 F9 
12c10     FE 01 04 07 | 	byte	$e5, $e1, $e0, $de, $df, $e0, $e3, $e6, $eb, $f0, $f5, $f9, $fe, $01, $04, $07
12c14     09 0A 0B 0A 
12c18     08 07 04 00 
12c1c     FE FA F6 F2 
12c20     EE EB E7 E5 | 	byte	$09, $0a, $0b, $0a, $08, $07, $04, $00, $fe, $fa, $f6, $f2, $ee, $eb, $e7, $e5
12c24     E3 E0 E0 E0 
12c28     E0 E0 E2 E5 
12c2c     E8 ED F1 F7 
12c30     FC 00 04 07 | 	byte	$e3, $e0, $e0, $e0, $e0, $e0, $e2, $e5, $e8, $ed, $f1, $f7, $fc, $00, $04, $07
12c34     0A 0C 0D 0D 
12c38     0C 09 05 00 
12c3c     FB F5 EF E9 
12c40     E4 E0 DD DC | 	byte	$0a, $0c, $0d, $0d, $0c, $09, $05, $00, $fb, $f5, $ef, $e9, $e4, $e0, $dd, $dc
12c44     DD E0 E4 EA 
12c48     F1 F8 FF 06 
12c4c     0A 0E 0E 0C 
12c50     08 01 F9 F1 | 	byte	$dd, $e0, $e4, $ea, $f1, $f8, $ff, $06, $0a, $0e, $0e, $0c, $08, $01, $f9, $f1
12c54     E8 E1 DC DC 
12c58     DE E3 EC F7 
12c5c     01 07 0D 0F 
12c60     0C 04 F9 EE | 	byte	$e8, $e1, $dc, $dc, $de, $e3, $ec, $f7, $01, $07, $0d, $0f, $0c, $04, $f9, $ee
12c64     E3 DD DB E0 
12c68     E9 F6 02 0C 
12c6c     0F 0B 00 F3 
12c70     E6 DD DB E3 | 	byte	$e3, $dd, $db, $e0, $e9, $f6, $02, $0c, $0f, $0b, $00, $f3, $e6, $dd, $db, $e3
12c74     F2 02 0C 0F 
12c78     06 F7 E6 DC 
12c7c     DD EB FE 0B 
12c80     0E 03 F0 E1 | 	byte	$f2, $02, $0c, $0f, $06, $f7, $e6, $dc, $dd, $eb, $fe, $0b, $0e, $03, $f0, $e1
12c84     DB E8 FE 0D 
12c88     0C FB E5 DB 
12c8c     E6 FE 0D 08 
12c90     F2 DE E0 F8 | 	byte	$db, $e8, $fe, $0d, $0c, $fb, $e5, $db, $e6, $fe, $0d, $08, $f2, $de, $e0, $f8
12c94     0C 08 F0 DD 
12c98     E6 02 0F FB 
12c9c     E0 E1 FE 0F 
12ca0     FA DF E6 06 | 	byte	$0c, $08, $f0, $dd, $e6, $02, $0f, $fb, $e0, $e1, $fe, $0f, $fa, $df, $e6, $06
12ca4     0A EB DD FB 
12ca8     0E F2 DC F8 
12cac     0E F2 DD FC 
12cb0     0B E8 E4 09 | 	byte	$0a, $eb, $dd, $fb, $0e, $f2, $dc, $f8, $0e, $f2, $dd, $fc, $0b, $e8, $e4, $09
12cb4     FD DD FA 0B 
12cb8     E4 ED 0E E9 
12cbc     E7 0C EB E8 
12cc0     0C E9 EE 0B | 	byte	$fd, $dd, $fa, $0b, $e4, $ed, $0e, $e9, $e7, $0c, $eb, $e8, $0c, $e9, $ee, $0b
12cc4     E2 FA 03 DE 
12cc8     09 EE EE 08 
12ccc     DE 07 EC F3 
12cd0     01 E2 0B DF | 	byte	$e2, $fa, $03, $de, $09, $ee, $ee, $08, $de, $07, $ec, $f3, $01, $e2, $0b, $df
12cd4     07 E8 FF F1 
12cd8     F5 FA EE FF 
12cdc     EB 01 EA FF 
12ce0     ED FF F1 F4 | 	byte	$07, $e8, $ff, $f1, $f5, $fa, $ee, $ff, $eb, $01, $ea, $ff, $ed, $ff, $f1, $f4
12ce4     FB EC 03 E6 
12ce8     06 E3 07 E3 
12cec     07 E4 03 E7 
12cf0     01 EE F5 FA | 	byte	$fb, $ec, $03, $e6, $06, $e3, $07, $e3, $07, $e4, $03, $e7, $01, $ee, $f5, $fa
12cf4     E8 08 DF 0B 
12cf8     E2 FD F7 E7 
12cfc     0A E0 02 F9 
12d00     E3 0C E6 F2 | 	byte	$e8, $08, $df, $0b, $e2, $fd, $f7, $e7, $0a, $e0, $02, $f9, $e3, $0c, $e6, $f2
12d04     09 E0 FC 04 
12d08     DD FF 05 DE 
12d0c     FC 08 E1 F0 
12d10     0D EB E3 08 | 	byte	$09, $e0, $fc, $04, $dd, $ff, $05, $de, $fc, $08, $e1, $f0, $0d, $eb, $e3, $08
12d14     00 DF F2 0E 
12d18     F2 DC FB 0E 
12d1c     F0 DC F8 0E 
12d20     F8 DD EC 09 | 	byte	$00, $df, $f2, $0e, $f2, $dc, $fb, $0e, $f0, $dc, $f8, $0e, $f8, $dd, $ec, $09
12d24     06 E9 DD F5 
12d28     0C 04 E7 DC 
12d2c     F2 0A 0A F2 
12d30     DD E2 FC 0D | 	byte	$06, $e9, $dd, $f5, $0c, $04, $e7, $dc, $f2, $0a, $0a, $f2, $dd, $e2, $fc, $0d
12d34     08 F1 DE E0 
12d38     F4 08 0E 00 
12d3c     EA DC E0 F2 
12d40     05 0F 08 F8 | 	byte	$08, $f1, $de, $e0, $f4, $08, $0e, $00, $ea, $dc, $e0, $f2, $05, $0f, $08, $f8
12d44     E5 DC E0 F0 
12d48     02 0C 0D 03 
12d4c     F4 E4 DC DE 
12d50     E8 F7 04 0D | 	byte	$e5, $dc, $e0, $f0, $02, $0c, $0d, $03, $f4, $e4, $dc, $de, $e8, $f7, $04, $0d
12d54     0E 06 FB EC 
12d58     E2 DC DD E4 
12d5c     F0 FD 06 0C 
12d60     0E 0A 02 F9 | 	byte	$0e, $06, $fb, $ec, $e2, $dc, $dd, $e4, $f0, $fd, $06, $0c, $0e, $0a, $02, $f9
12d64     EE E5 DF DC 
12d68     DF E4 EC F5 
12d6c     FE 05 0A 0D 
12d70     0C 09 03 FD | 	byte	$ee, $e5, $df, $dc, $df, $e4, $ec, $f5, $fe, $05, $0a, $0d, $0c, $09, $03, $fd
12d74     F4 ED E6 E1 
12d78     DE DE DF E3 
12d7c     E8 EF F5 FB 
12d80     00 05 09 0B | 	byte	$f4, $ed, $e6, $e1, $de, $de, $df, $e3, $e8, $ef, $f5, $fb, $00, $05, $09, $0b
12d84     0C 0B 08 05 
12d88     00 FC F7 F1 
12d8c     EC E7 E4 E1 
12d90     E0 E0 E0 E1 | 	byte	$0c, $0b, $08, $05, $00, $fc, $f7, $f1, $ec, $e7, $e4, $e1, $e0, $e0, $e0, $e1
12d94     E3 E6 EA EF 
12d98     F3 F8 FC 00 
12d9c     02 05 07 08 
12da0     09 09 08 07 | 	byte	$e3, $e6, $ea, $ef, $f3, $f8, $fc, $00, $02, $05, $07, $08, $09, $09, $08, $07
12da4     06 04 01 FF 
12da8     FC F8 F4 F1 
12dac     ED E9 E7 E4 
12db0     E1 E0 E0 DF | 	byte	$06, $04, $01, $ff, $fc, $f8, $f4, $f1, $ed, $e9, $e7, $e4, $e1, $e0, $e0, $df
12db4     E0 E1 E3 E7 
12db8     EA EF F3 F8 
12dbc     FE 01 06 08 
12dc0     0B 0C 0C 0C | 	byte	$e0, $e1, $e3, $e7, $ea, $ef, $f3, $f8, $fe, $01, $06, $08, $0b, $0c, $0c, $0c
12dc4     09 05 00 FC 
12dc8     F6 F0 E9 E4 
12dcc     E1 DE DD DE 
12dd0     E0 E5 EB F2 | 	byte	$09, $05, $00, $fc, $f6, $f0, $e9, $e4, $e1, $de, $dd, $de, $e0, $e5, $eb, $f2
12dd4     FB 00 07 0B 
12dd8     0E 0D 0A 04 
12ddc     FE F5 EC E5 
12de0     E0 DC DC E1 | 	byte	$fb, $00, $07, $0b, $0e, $0d, $0a, $04, $fe, $f5, $ec, $e5, $e0, $dc, $dc, $e1
12de4     E9 F3 FE 06 
12de8     0C 0E 0C 05 
12dec     FC F0 E5 DE 
12df0     DC E0 E9 F6 | 	byte	$e9, $f3, $fe, $06, $0c, $0e, $0c, $05, $fc, $f0, $e5, $de, $dc, $e0, $e9, $f6
12df4     02 0B 0E 0A 
12df8     FF F1 E4 DC 
12dfc     DD E7 F7 04 
12e00     0D 0C 01 F1 | 	byte	$02, $0b, $0e, $0a, $ff, $f1, $e4, $dc, $dd, $e7, $f7, $04, $0d, $0c, $01, $f1
12e04     E1 DC E2 F2 
12e08     04 0D 0A FA 
12e0c     E7 DC E1 F4 
12e10     07 0E 03 ED | 	byte	$e1, $dc, $e2, $f2, $04, $0d, $0a, $fa, $e7, $dc, $e1, $f4, $07, $0e, $03, $ed
12e14     DD E0 F5 09 
12e18     0C FA E3 DD 
12e1c     F0 08 0C F7 
12e20     DF E1 FC 0D | 	byte	$dd, $e0, $f5, $09, $0c, $fa, $e3, $dd, $f0, $08, $0c, $f7, $df, $e1, $fc, $0d
12e24     01 E5 DE F9 
12e28     0D FF E1 E3 
12e2c     01 0D EF DC 
12e30     F7 0D F7 DD | 	byte	$01, $e5, $de, $f9, $0d, $ff, $e1, $e3, $01, $0d, $ef, $dc, $f7, $0d, $f7, $dd
12e34     F3 0D F5 DC 
12e38     F9 0C EB E2 
12e3c     07 00 DE F7 
12e40     0B E5 EB 0B | 	byte	$f3, $0d, $f5, $dc, $f9, $0c, $eb, $e2, $07, $00, $de, $f7, $0b, $e5, $eb, $0b
12e44     EC E6 0B EF 
12e48     E5 0B EC EA 
12e4c     0B E3 F7 05 
12e50     DE 07 F1 EA | 	byte	$ec, $e6, $0b, $ef, $e5, $0b, $ec, $ea, $0b, $e3, $f7, $05, $de, $07, $f1, $ea
12e54     0A E0 05 F0 
12e58     EF 04 E0 0A 
12e5c     E3 03 ED F7 
12e60     FC ED 01 E6 | 	byte	$0a, $e0, $05, $f0, $ef, $04, $e0, $0a, $e3, $03, $ed, $f7, $fc, $ed, $01, $e6
12e64     06 E3 08 E2 
12e68     07 E4 06 E6 
12e6c     03 E9 04 E9 
12e70     04 E6 06 E2 | 	byte	$06, $e3, $08, $e2, $07, $e4, $06, $e6, $03, $e9, $04, $e9, $04, $e6, $06, $e2
12e74     0A E0 0A E2 
12e78     03 EE F4 01 
12e7c     E2 0A E2 FF 
12e80     F8 E5 0B E3 | 	byte	$0a, $e0, $0a, $e2, $03, $ee, $f4, $01, $e2, $0a, $e2, $ff, $f8, $e5, $0b, $e3
12e84     FA 01 DE 08 
12e88     F4 E4 0C EC 
12e8c     E7 0B EB E6 
12e90     0B F1 E1 08 | 	byte	$fa, $01, $de, $08, $f4, $e4, $0c, $ec, $e7, $0b, $eb, $e6, $0b, $f1, $e1, $08
12e94     FC DE FA 0A 
12e98     E6 E6 09 FF 
12e9c     E0 F0 0C F9 
12ea0     DE F0 0C FE | 	byte	$fc, $de, $fa, $0a, $e6, $e6, $09, $ff, $e0, $f0, $0c, $f9, $de, $f0, $0c, $fe
12ea4     DF E7 07 08 
12ea8     EB DD F5 0C 
12eac     03 E7 DD F4 
12eb0     0B 07 EE DD | 	byte	$df, $e7, $07, $08, $eb, $dd, $f5, $0c, $03, $e7, $dd, $f4, $0b, $07, $ee, $dd
12eb4     E6 01 0E 01 
12eb8     EA DC E7 FE 
12ebc     0D 08 F4 E1 
12ec0     DD EC FF 0D | 	byte	$e6, $01, $0e, $01, $ea, $dc, $e7, $fe, $0d, $08, $f4, $e1, $dd, $ec, $ff, $0d
12ec4     0A FA E7 DD 
12ec8     E0 F0 02 0C 
12ecc     0C 01 F0 E2 
12ed0     DC E1 EF FE | 	byte	$0a, $fa, $e7, $dd, $e0, $f0, $02, $0c, $0c, $01, $f0, $e2, $dc, $e1, $ef, $fe
12ed4     09 0E 09 FF 
12ed8     F0 E4 DE DD 
12edc     E4 F0 FE 06 
12ee0     0C 0D 07 FE | 	byte	$09, $0e, $09, $ff, $f0, $e4, $de, $dd, $e4, $f0, $fe, $06, $0c, $0d, $07, $fe
12ee4     F3 E9 E1 DD 
12ee8     DE E3 EC F6 
12eec     FF 05 0B 0D 
12ef0     0B 07 00 F8 | 	byte	$f3, $e9, $e1, $dd, $de, $e3, $ec, $f6, $ff, $05, $0b, $0d, $0b, $07, $00, $f8
12ef4     EF E8 E2 DF 
12ef8     DE E0 E3 E9 
12efc     F0 F8 FF 03 
12f00     08 0A 0C 0B | 	byte	$ef, $e8, $e2, $df, $de, $e0, $e3, $e9, $f0, $f8, $ff, $03, $08, $0a, $0c, $0b
12f04     08 04 00 FA 
12f08     F4 EF E9 E5 
12f0c     E2 E0 E0 E0 
12f10     E1 E4 E7 EC | 	byte	$08, $04, $00, $fa, $f4, $ef, $e9, $e5, $e2, $e0, $e0, $e0, $e1, $e4, $e7, $ec
12f14     F0 F5 FA FF 
12f18     01 04 07 08 
12f1c     09 09 08 07 
12f20     04 01 FF FC | 	byte	$f0, $f5, $fa, $ff, $01, $04, $07, $08, $09, $09, $08, $07, $04, $01, $ff, $fc
12f24     F8 F5 F1 EF 
12f28     EC E8 E6 E4 
12f2c     E3 E2 E1 E1 
12f30     E2 E3 E5 E7 | 	byte	$f8, $f5, $f1, $ef, $ec, $e8, $e6, $e4, $e3, $e2, $e1, $e1, $e2, $e3, $e5, $e7
12f34     EB EE F1 F6 
12f38     F9 FE 00 03 
12f3c     06 08 09 0B 
12f40     0B 0A 08 06 | 	byte	$eb, $ee, $f1, $f6, $f9, $fe, $00, $03, $06, $08, $09, $0b, $0b, $0a, $08, $06
12f44     03 FF FC F6 
12f48     F1 EC E7 E3 
12f4c     E0 DE DE DE 
12f50     E0 E3 E7 EE | 	byte	$03, $ff, $fc, $f6, $f1, $ec, $e7, $e3, $e0, $de, $de, $de, $e0, $e3, $e7, $ee
12f54     F4 FB 00 05 
12f58     09 0C 0C 0C 
12f5c     08 03 FD F6 
12f60     EE E7 E2 DE | 	byte	$f4, $fb, $00, $05, $09, $0c, $0c, $0c, $08, $03, $fd, $f6, $ee, $e7, $e2, $de
12f64     DC DE E3 EA 
12f68     F3 FD 04 09 
12f6c     0D 0C 08 00 
12f70     F8 EC E3 DE | 	byte	$dc, $de, $e3, $ea, $f3, $fd, $04, $09, $0d, $0c, $08, $00, $f8, $ec, $e3, $de
12f74     DC DF E7 F3 
12f78     FF 07 0D 0C 
12f7c     05 FB EE E3 
12f80     DC DE E7 F6 | 	byte	$dc, $df, $e7, $f3, $ff, $07, $0d, $0c, $05, $fb, $ee, $e3, $dc, $de, $e7, $f6
12f84     03 0C 0C 04 
12f88     F7 E8 DE DD 
12f8c     E9 FA 08 0E 
12f90     06 F6 E5 DC | 	byte	$03, $0c, $0c, $04, $f7, $e8, $de, $dd, $e9, $fa, $08, $0e, $06, $f6, $e5, $dc
12f94     E2 F4 06 0E 
12f98     04 F1 E0 DE 
12f9c     EE 04 0D 02 
12fa0     EC DD E4 FC | 	byte	$e2, $f4, $06, $0e, $04, $f1, $e0, $de, $ee, $04, $0d, $02, $ec, $dd, $e4, $fc
12fa4     0C 06 EE DD 
12fa8     E8 02 0D FC 
12fac     E1 E1 FC 0C 
12fb0     FD E1 E3 01 | 	byte	$0c, $06, $ee, $dd, $e8, $02, $0d, $fc, $e1, $e1, $fc, $0c, $fd, $e1, $e3, $01
12fb4     0C F3 DD F2 
12fb8     0B FE E0 EA 
12fbc     09 FF E0 EC 
12fc0     0B F9 DE F8 | 	byte	$0c, $f3, $dd, $f2, $0b, $fe, $e0, $ea, $09, $ff, $e0, $ec, $0b, $f9, $de, $f8
12fc4     0C EA E4 08 
12fc8     FB DE FE 05 
12fcc     E0 F6 09 E3 
12fd0     F4 09 E1 F7 | 	byte	$0c, $ea, $e4, $08, $fb, $de, $fe, $05, $e0, $f6, $09, $e3, $f4, $09, $e1, $f7
12fd4     06 E0 00 FD 
12fd8     E0 0A EB EF 
12fdc     06 E0 06 EE 
12fe0     F0 04 E0 0A | 	byte	$06, $e0, $00, $fd, $e0, $0a, $eb, $ef, $06, $e0, $06, $ee, $f0, $04, $e0, $0a
12fe4     E4 00 F1 F1 
12fe8     01 E6 07 E1 
12fec     09 E1 09 E2 
12ff0     08 E2 07 E2 | 	byte	$e4, $00, $f1, $f1, $01, $e6, $07, $e1, $09, $e1, $09, $e2, $08, $e2, $07, $e2
12ff4     08 E3 06 E7 
12ff8     00 EF F6 FC 
12ffc     E8 08 E0 09 
13000     E7 FB FC E4 | 	byte	$08, $e3, $06, $e7, $00, $ef, $f6, $fc, $e8, $08, $e0, $09, $e7, $fb, $fc, $e4
13004     0B E4 FA FF 
13008     E0 09 EE EA 
1300c     0B E4 F3 09 
13010     E1 F5 09 E2 | 	byte	$0b, $e4, $fa, $ff, $e0, $09, $ee, $ea, $0b, $e4, $f3, $09, $e1, $f5, $09, $e2
13014     F2 0B E8 E9 
13018     0B F5 DF 01 
1301c     05 E3 EB 0B 
13020     FA DE F2 0B | 	byte	$f2, $0b, $e8, $e9, $0b, $f5, $df, $01, $05, $e3, $eb, $0b, $fa, $de, $f2, $0b
13024     F7 DE F1 0B 
13028     FC E0 E8 06 
1302c     08 ED DD F2 
13030     0A 04 E9 DD | 	byte	$f7, $de, $f1, $0b, $fc, $e0, $e8, $06, $08, $ed, $dd, $f2, $0a, $04, $e9, $dd
13034     F1 09 09 F2 
13038     DF E4 FD 0B 
1303c     06 EF DE E2 
13040     F8 09 0C FB | 	byte	$f1, $09, $09, $f2, $df, $e4, $fd, $0b, $06, $ef, $de, $e2, $f8, $09, $0c, $fb
13044     E7 DD E4 F8 
13048     08 0D 02 F1 
1304c     E1 DD E6 F7 
13050     06 0D 07 FB | 	byte	$e7, $dd, $e4, $f8, $08, $0d, $02, $f1, $e1, $dd, $e6, $f7, $06, $0d, $07, $fb
13054     EB E0 DD E4 
13058     F2 01 0A 0C 
1305c     08 FD F0 E4 
13060     DE DE E5 F0 | 	byte	$eb, $e0, $dd, $e4, $f2, $01, $0a, $0c, $08, $fd, $f0, $e4, $de, $de, $e5, $f0
13064     FC 06 0B 0C 
13068     08 00 F6 EC 
1306c     E3 DE DE E1 
13070     E6 F0 FA 01 | 	byte	$fc, $06, $0b, $0c, $08, $00, $f6, $ec, $e3, $de, $de, $e1, $e6, $f0, $fa, $01
13074     07 0B 0C 09 
13078     04 FE F6 EF 
1307c     E7 E2 E0 DF 
13080     E0 E3 E8 EE | 	byte	$07, $0b, $0c, $09, $04, $fe, $f6, $ef, $e7, $e2, $e0, $df, $e0, $e3, $e8, $ee
13084     F5 FC 00 05 
13088     08 0A 0A 09 
1308c     06 02 FF F9 
13090     F4 EF EA E6 | 	byte	$f5, $fc, $00, $05, $08, $0a, $0a, $09, $06, $02, $ff, $f9, $f4, $ef, $ea, $e6
13094     E3 E1 E0 E0 
13098     E1 E3 E6 E9 
1309c     EE F2 F7 FB 
130a0     FF 01 03 06 | 	byte	$e3, $e1, $e0, $e0, $e1, $e3, $e6, $e9, $ee, $f2, $f7, $fb, $ff, $01, $03, $06
130a4     07 08 08 07 
130a8     06 04 03 00 
130ac     FF FC F8 F5 
130b0     F1 EF EC E9 | 	byte	$07, $08, $08, $07, $06, $04, $03, $00, $ff, $fc, $f8, $f5, $f1, $ef, $ec, $e9
130b4     E7 E5 E3 E2 
130b8     E2 E2 E2 E3 
130bc     E5 E7 E9 EC 
130c0     F0 F3 F7 FB | 	byte	$e7, $e5, $e3, $e2, $e2, $e2, $e2, $e3, $e5, $e7, $e9, $ec, $f0, $f3, $f7, $fb
130c4     FF 01 04 07 
130c8     08 0A 0A 0A 
130cc     08 06 03 00 
130d0     FD F8 F3 EE | 	byte	$ff, $01, $04, $07, $08, $0a, $0a, $0a, $08, $06, $03, $00, $fd, $f8, $f3, $ee
130d4     E9 E5 E1 E0 
130d8     DE DF E0 E3 
130dc     E7 EE F4 FB 
130e0     00 05 09 0C | 	byte	$e9, $e5, $e1, $e0, $de, $df, $e0, $e3, $e7, $ee, $f4, $fb, $00, $05, $09, $0c
130e4     0C 0B 07 02 
130e8     FD F5 ED E6 
130ec     E1 DE DD E0 
130f0     E5 ED F6 FF | 	byte	$0c, $0b, $07, $02, $fd, $f5, $ed, $e6, $e1, $de, $dd, $e0, $e5, $ed, $f6, $ff
130f4     06 0B 0C 0B 
130f8     05 FD F3 E9 
130fc     E1 DD DE E4 
13100     EE FA 03 0B | 	byte	$06, $0b, $0c, $0b, $05, $fd, $f3, $e9, $e1, $dd, $de, $e4, $ee, $fa, $03, $0b
13104     0C 08 FF F2 
13108     E6 DE DD E4 
1310c     F1 FF 09 0C 
13110     07 FA EB E0 | 	byte	$0c, $08, $ff, $f2, $e6, $de, $dd, $e4, $f1, $ff, $09, $0c, $07, $fa, $eb, $e0
13114     DD E6 F7 05 
13118     0C 07 F9 E7 
1311c     DD E0 F2 04 
13120     0C 05 F3 E1 | 	byte	$dd, $e6, $f7, $05, $0c, $07, $f9, $e7, $dd, $e0, $f2, $04, $0c, $05, $f3, $e1
13124     DE EE 03 0C 
13128     02 ED DE E5 
1312c     FC 0C 04 EC 
13130     DD E8 02 0C | 	byte	$de, $ee, $03, $0c, $02, $ed, $de, $e5, $fc, $0c, $04, $ec, $dd, $e8, $02, $0c
13134     FA E1 E2 FD 
13138     0C FB E1 E6 
1313c     02 09 EF DE 
13140     F6 0C F9 DE | 	byte	$fa, $e1, $e2, $fd, $0c, $fb, $e1, $e6, $02, $09, $ef, $de, $f6, $0c, $f9, $de
13144     EE 0A FB DF 
13148     F1 0B F4 DE 
1314c     FC 08 E6 E8 
13150     09 F6 E0 02 | 	byte	$ee, $0a, $fb, $df, $f1, $0b, $f4, $de, $fc, $08, $e6, $e8, $09, $f6, $e0, $02
13154     00 DF FC 05 
13158     E1 F9 05 E1 
1315c     FC 02 E0 03 
13160     F7 E3 09 E8 | 	byte	$00, $df, $fc, $05, $e1, $f9, $05, $e1, $fc, $02, $e0, $03, $f7, $e3, $09, $e8
13164     F4 04 E0 07 
13168     EB F3 01 E0 
1316c     09 E3 01 EF 
13170     F3 FE E7 06 | 	byte	$f4, $04, $e0, $07, $eb, $f3, $01, $e0, $09, $e3, $01, $ef, $f3, $fe, $e7, $06
13174     E1 09 E0 08 
13178     E2 07 E4 03 
1317c     EA FB F5 EE 
13180     02 E2 08 E2 | 	byte	$e1, $09, $e0, $08, $e2, $07, $e4, $03, $ea, $fb, $f5, $ee, $02, $e2, $08, $e2
13184     01 F4 EB 07 
13188     E0 02 F4 E8 
1318c     0A E4 F8 04 
13190     DF 01 FD E0 | 	byte	$01, $f4, $eb, $07, $e0, $02, $f4, $e8, $0a, $e4, $f8, $04, $df, $01, $fd, $e0
13194     05 FA E0 04 
13198     FC DF FF 04 
1319c     E2 F2 0C EE 
131a0     E2 05 02 E0 | 	byte	$05, $fa, $e0, $04, $fc, $df, $ff, $04, $e2, $f2, $0c, $ee, $e2, $05, $02, $e0
131a4     EE 0A FA DF 
131a8     F1 0B FB DF 
131ac     EC 08 03 E6 
131b0     E1 FC 0C F9 | 	byte	$ee, $0a, $fa, $df, $f1, $0b, $fb, $df, $ec, $08, $03, $e6, $e1, $fc, $0c, $f9
131b4     E0 E5 00 0C 
131b8     FA E2 E0 F9 
131bc     0B 05 EE DE 
131c0     E5 FD 0B 06 | 	byte	$e0, $e5, $00, $0c, $fa, $e2, $e0, $f9, $0b, $05, $ee, $de, $e5, $fd, $0b, $06
131c4     F2 E0 E0 F1 
131c8     05 0C 02 F1 
131cc     E1 DE EB FE 
131d0     0A 0B FF EE | 	byte	$f2, $e0, $e0, $f1, $05, $0c, $02, $f1, $e1, $de, $eb, $fe, $0a, $0b, $ff, $ee
131d4     E1 DE E5 F5 
131d8     03 0C 0A 00 
131dc     F2 E5 DE DF 
131e0     E7 F5 00 08 | 	byte	$e1, $de, $e5, $f5, $03, $0c, $0a, $00, $f2, $e5, $de, $df, $e7, $f5, $00, $08
131e4     0C 08 FF F3 
131e8     E9 E1 DE E0 
131ec     E7 F1 FC 04 
131f0     0A 0C 09 03 | 	byte	$0c, $08, $ff, $f3, $e9, $e1, $de, $e0, $e7, $f1, $fc, $04, $0a, $0c, $09, $03
131f4     FC F2 E9 E3 
131f8     E0 DF E0 E6 
131fc     ED F5 FD 03 
13200     07 0A 0A 08 | 	byte	$fc, $f2, $e9, $e3, $e0, $df, $e0, $e6, $ed, $f5, $fd, $03, $07, $0a, $0a, $08
13204     04 00 FA F4 
13208     ED E8 E3 E0 
1320c     E0 E0 E1 E5 
13210     E9 EF F4 FA | 	byte	$04, $00, $fa, $f4, $ed, $e8, $e3, $e0, $e0, $e0, $e1, $e5, $e9, $ef, $f4, $fa
13214     FF 02 06 07 
13218     09 09 08 06 
1321c     03 00 FD F9 
13220     F5 F0 ED E9 | 	byte	$ff, $02, $06, $07, $09, $09, $08, $06, $03, $00, $fd, $f9, $f5, $f0, $ed, $e9
13224     E7 E4 E3 E2 
13228     E2 E2 E3 E6 
1322c     E7 EA ED F0 
13230     F3 F7 FA FD | 	byte	$e7, $e4, $e3, $e2, $e2, $e2, $e3, $e6, $e7, $ea, $ed, $f0, $f3, $f7, $fa, $fd
13234     00 01 03 04 
13238     05 06 06 06 
1323c     06 04 03 02 
13240     00 FF FC F8 | 	byte	$00, $01, $03, $04, $05, $06, $06, $06, $06, $04, $03, $02, $00, $ff, $fc, $f8
13244     F6 F2 EF EC 
13248     E9 E6 E4 E2 
1324c     E1 E0 E0 E1 
13250     E3 E5 E7 EB | 	byte	$f6, $f2, $ef, $ec, $e9, $e6, $e4, $e2, $e1, $e0, $e0, $e1, $e3, $e5, $e7, $eb
13254     F0 F3 F8 FD 
13258     00 04 07 09 
1325c     0A 0A 09 07 
13260     04 00 FC F6 | 	byte	$f0, $f3, $f8, $fd, $00, $04, $07, $09, $0a, $0a, $09, $07, $04, $00, $fc, $f6
13264     F0 EA E6 E2 
13268     E0 DF DF E1 
1326c     E6 EB F2 F9 
13270     00 05 09 0C | 	byte	$f0, $ea, $e6, $e2, $e0, $df, $df, $e1, $e6, $eb, $f2, $f9, $00, $05, $09, $0c
13274     0B 08 03 FC 
13278     F4 ED E5 E0 
1327c     DE DF E3 EB 
13280     F4 FE 06 0A | 	byte	$0b, $08, $03, $fc, $f4, $ed, $e5, $e0, $de, $df, $e3, $eb, $f4, $fe, $06, $0a
13284     0C 08 01 F8 
13288     EC E3 DE DF 
1328c     E3 EE FB 05 
13290     0B 0B 04 F9 | 	byte	$0c, $08, $01, $f8, $ec, $e3, $de, $df, $e3, $ee, $fb, $05, $0b, $0b, $04, $f9
13294     EB E1 DE E2 
13298     EF FE 08 0C 
1329c     05 F8 E7 DE 
132a0     DF ED FE 09 | 	byte	$eb, $e1, $de, $e2, $ef, $fe, $08, $0c, $05, $f8, $e7, $de, $df, $ed, $fe, $09
132a4     0B FF ED E0 
132a8     E0 EF 02 0C 
132ac     04 F2 E0 E0 
132b0     F1 05 0B FD | 	byte	$0b, $ff, $ed, $e0, $e0, $ef, $02, $0c, $04, $f2, $e0, $e0, $f1, $05, $0b, $fd
132b4     E7 DE ED 04 
132b8     0B FA E2 E1 
132bc     F9 0A 02 E7 
132c0     DF F6 0B 00 | 	byte	$e7, $de, $ed, $04, $0b, $fa, $e2, $e1, $f9, $0a, $02, $e7, $df, $f6, $0b, $00
132c4     E4 E3 FE 0B 
132c8     F2 DF F3 0A 
132cc     FB E0 F0 0A 
132d0     F9 E0 F5 0B | 	byte	$e4, $e3, $fe, $0b, $f2, $df, $f3, $0a, $fb, $e0, $f0, $0a, $f9, $e0, $f5, $0b
132d4     F0 E0 01 04 
132d8     E1 F0 0A ED 
132dc     E5 08 F6 E1 
132e0     04 FB E0 04 | 	byte	$f0, $e0, $01, $04, $e1, $f0, $0a, $ed, $e5, $08, $f6, $e1, $04, $fb, $e0, $04
132e4     F8 E1 07 F2 
132e8     E7 0A E7 F3 
132ec     04 E1 05 F2 
132f0     ED 06 E1 04 | 	byte	$f8, $e1, $07, $f2, $e7, $0a, $e7, $f3, $04, $e1, $05, $f2, $ed, $06, $e1, $04
132f4     EC F4 00 E3 
132f8     08 E2 05 E9 
132fc     FD F2 F4 FC 
13300     EA 04 E2 08 | 	byte	$ec, $f4, $00, $e3, $08, $e2, $05, $e9, $fd, $f2, $f4, $fc, $ea, $04, $e2, $08
13304     E2 04 ED F3 
13308     00 E2 07 E6 
1330c     F8 FF E1 07 
13310     EB EE 08 E1 | 	byte	$e2, $04, $ed, $f3, $00, $e2, $07, $e6, $f8, $ff, $e1, $07, $eb, $ee, $08, $e1
13314     FA 02 E1 FF 
13318     FF E0 00 00 
1331c     E0 FB 05 E2 
13320     F1 0B ED E3 | 	byte	$fa, $02, $e1, $ff, $ff, $e0, $00, $00, $e0, $fb, $05, $e2, $f1, $0b, $ed, $e3
13324     06 00 E0 F0 
13328     0A F5 E0 F8 
1332c     0B F3 DF F6 
13330     0B F9 E0 EB | 	byte	$06, $00, $e0, $f0, $0a, $f5, $e0, $f8, $0b, $f3, $df, $f6, $0b, $f9, $e0, $eb
13334     06 06 EB DF 
13338     F4 0A 02 E8 
1333c     DE F2 08 07 
13340     F2 DF E5 FD | 	byte	$06, $06, $eb, $df, $f4, $0a, $02, $e8, $de, $f2, $08, $07, $f2, $df, $e5, $fd
13344     0B 03 EF E0 
13348     E4 F8 08 09 
1334c     FA E6 DE E6 
13350     F8 07 0B 01 | 	byte	$0b, $03, $ef, $e0, $e4, $f8, $08, $09, $fa, $e6, $de, $e6, $f8, $07, $0b, $01
13354     F0 E1 DE E7 
13358     F8 05 0C 07 
1335c     FA EA E0 DF 
13360     E6 F2 00 08 | 	byte	$f0, $e1, $de, $e7, $f8, $05, $0c, $07, $fa, $ea, $e0, $df, $e6, $f2, $00, $08
13364     0B 06 FC EF 
13368     E4 DF DF E6 
1336c     F0 FC 04 0A 
13370     0B 07 FF F5 | 	byte	$0b, $06, $fc, $ef, $e4, $df, $df, $e6, $f0, $fc, $04, $0a, $0b, $07, $ff, $f5
13374     ED E4 E0 DF 
13378     E1 E8 F0 FA 
1337c     00 06 09 0A 
13380     08 03 FE F6 | 	byte	$ed, $e4, $e0, $df, $e1, $e8, $f0, $fa, $00, $06, $09, $0a, $08, $03, $fe, $f6
13384     EF E8 E3 E0 
13388     E0 E0 E3 E8 
1338c     EE F4 FB 00 
13390     03 07 08 09 | 	byte	$ef, $e8, $e3, $e0, $e0, $e0, $e3, $e8, $ee, $f4, $fb, $00, $03, $07, $08, $09
13394     08 06 02 FF 
13398     FA F5 F0 EC 
1339c     E8 E5 E3 E1 
133a0     E1 E2 E3 E6 | 	byte	$08, $06, $02, $ff, $fa, $f5, $f0, $ec, $e8, $e5, $e3, $e1, $e1, $e2, $e3, $e6
133a4     E8 EC F0 F4 
133a8     F8 FC FF 01 
133ac     03 05 06 07 
133b0     07 06 05 03 | 	byte	$e8, $ec, $f0, $f4, $f8, $fc, $ff, $01, $03, $05, $06, $07, $07, $06, $05, $03
133b4     01 FF FE FB 
133b8     F8 F5 F2 F0 
133bc     ED EB E8 E7 
133c0     E6 E5 E4 E4 | 	byte	$01, $ff, $fe, $fb, $f8, $f5, $f2, $f0, $ed, $eb, $e8, $e7, $e6, $e5, $e4, $e4
133c4     E4 E4 E5 E6 
133c8     E8 EA EC F0 
133cc     F2 F6 F8 FC 
133d0     FF 01 03 05 | 	byte	$e4, $e4, $e5, $e6, $e8, $ea, $ec, $f0, $f2, $f6, $f8, $fc, $ff, $01, $03, $05
133d4     07 08 08 08 
133d8     07 06 04 01 
133dc     FF FB F7 F2 
133e0     EE E9 E6 E3 | 	byte	$07, $08, $08, $08, $07, $06, $04, $01, $ff, $fb, $f7, $f2, $ee, $e9, $e6, $e3
133e4     E1 E0 E0 E0 
133e8     E2 E5 E9 EF 
133ec     F4 FA FF 03 
133f0     07 09 0A 09 | 	byte	$e1, $e0, $e0, $e0, $e2, $e5, $e9, $ef, $f4, $fa, $ff, $03, $07, $09, $0a, $09
133f4     07 03 FE F8 
133f8     F0 EA E4 E1 
133fc     DF DF E1 E7 
13400     EE F7 FF 05 | 	byte	$07, $03, $fe, $f8, $f0, $ea, $e4, $e1, $df, $df, $e1, $e7, $ee, $f7, $ff, $05
13404     09 0B 09 05 
13408     FE F5 EC E3 
1340c     DF DF E2 EA 
13410     F4 FF 06 0B | 	byte	$09, $0b, $09, $05, $fe, $f5, $ec, $e3, $df, $df, $e2, $ea, $f4, $ff, $06, $0b
13414     0A 03 FA ED 
13418     E4 DE E0 E8 
1341c     F4 01 09 0B 
13420     03 F8 E9 E0 | 	byte	$0a, $03, $fa, $ed, $e4, $de, $e0, $e8, $f4, $01, $09, $0b, $03, $f8, $e9, $e0
13424     DF E8 F8 05 
13428     0B 06 F9 E8 
1342c     DF E1 F1 02 
13430     0B 06 F5 E3 | 	byte	$df, $e8, $f8, $05, $0b, $06, $f9, $e8, $df, $e1, $f1, $02, $0b, $06, $f5, $e3
13434     DF EA FE 0A 
13438     05 F1 E1 E2 
1343c     F6 08 07 F4 
13440     E1 E3 FA 0A | 	byte	$df, $ea, $fe, $0a, $05, $f1, $e1, $e2, $f6, $08, $07, $f4, $e1, $e3, $fa, $0a
13444     01 E9 DF F3 
13448     08 04 EA DF 
1344c     F5 09 FE E3 
13450     E5 02 07 EB | 	byte	$01, $e9, $df, $f3, $08, $04, $ea, $df, $f5, $09, $fe, $e3, $e5, $02, $07, $eb
13454     E1 FC 09 EF 
13458     E0 FE 08 E8 
1345c     E4 05 01 E1 
13460     F3 0A EC E5 | 	byte	$e1, $fc, $09, $ef, $e0, $fe, $08, $e8, $e4, $05, $01, $e1, $f3, $0a, $ec, $e5
13464     07 F8 E0 01 
13468     FF E0 FD 01 
1346c     E0 FF 00 E0 
13470     04 F8 E4 08 | 	byte	$07, $f8, $e0, $01, $ff, $e0, $fd, $01, $e0, $ff, $00, $e0, $04, $f8, $e4, $08
13474     EB F1 05 E1 
13478     03 F3 EB 06 
1347c     E1 04 EE F4 
13480     FF E4 08 E1 | 	byte	$eb, $f1, $05, $e1, $03, $f3, $eb, $06, $e1, $04, $ee, $f4, $ff, $e4, $08, $e1
13484     06 E6 FD F4 
13488     EF 03 E2 07 
1348c     E5 FC F9 E6 
13490     09 E4 FB FF | 	byte	$06, $e6, $fd, $f4, $ef, $03, $e2, $07, $e5, $fc, $f9, $e6, $09, $e4, $fb, $ff
13494     E1 07 F1 EA 
13498     08 E7 F1 07 
1349c     E5 F3 08 E4 
134a0     F1 09 EA E9 | 	byte	$e1, $07, $f1, $ea, $08, $e7, $f1, $07, $e5, $f3, $08, $e4, $f1, $09, $ea, $e9
134a4     08 F5 E0 FF 
134a8     04 E3 EC 08 
134ac     FA E0 F5 0A 
134b0     F4 E0 F6 0A | 	byte	$08, $f5, $e0, $ff, $04, $e3, $ec, $08, $fa, $e0, $f5, $0a, $f4, $e0, $f6, $0a
134b4     F7 E0 EE 07 
134b8     02 E7 E1 FB 
134bc     0B FD E3 E2 
134c0     FB 0A FF E7 | 	byte	$f7, $e0, $ee, $07, $02, $e7, $e1, $fb, $0b, $fd, $e3, $e2, $fb, $0a, $ff, $e7
134c4     DF F1 05 09 
134c8     F7 E3 E0 F2 
134cc     05 0A FC E8 
134d0     DF E6 F9 07 | 	byte	$df, $f1, $05, $09, $f7, $e3, $e0, $f2, $05, $0a, $fc, $e8, $df, $e6, $f9, $07
134d4     0A FE EC E0 
134d8     E1 EE FF 09 
134dc     09 FF F0 E2 
134e0     DF E5 F3 FF | 	byte	$0a, $fe, $ec, $e0, $e1, $ee, $ff, $09, $09, $ff, $f0, $e2, $df, $e5, $f3, $ff
134e4     08 0A 03 F8 
134e8     EA E1 DF E2 
134ec     ED F9 03 09 
134f0     0A 06 FE F3 | 	byte	$08, $0a, $03, $f8, $ea, $e1, $df, $e2, $ed, $f9, $03, $09, $0a, $06, $fe, $f3
134f4     E8 E1 DF E0 
134f8     E6 EF F8 00 
134fc     06 09 09 06 
13500     00 F9 F1 E9 | 	byte	$e8, $e1, $df, $e0, $e6, $ef, $f8, $00, $06, $09, $09, $06, $00, $f9, $f1, $e9
13504     E3 E0 E0 E1 
13508     E6 EC F2 F8 
1350c     FF 03 07 09 
13510     09 07 04 00 | 	byte	$e3, $e0, $e0, $e1, $e6, $ec, $f2, $f8, $ff, $03, $07, $09, $09, $07, $04, $00
13514     FB F5 F0 EA 
13518     E6 E3 E1 E1 
1351c     E1 E3 E6 E9 
13520     EE F2 F7 FC | 	byte	$fb, $f5, $f0, $ea, $e6, $e3, $e1, $e1, $e1, $e3, $e6, $e9, $ee, $f2, $f7, $fc
13524     FF 01 04 06 
13528     07 07 06 05 
1352c     03 00 FF FC 
13530     F8 F5 F2 EF | 	byte	$ff, $01, $04, $06, $07, $07, $06, $05, $03, $00, $ff, $fc, $f8, $f5, $f2, $ef
13534     EC E9 E7 E6 
13538     E4 E4 E3 E4 
1353c     E5 E6 E7 E9 
13540     EC EE F0 F3 | 	byte	$ec, $e9, $e7, $e6, $e4, $e4, $e3, $e4, $e5, $e6, $e7, $e9, $ec, $ee, $f0, $f3
13544     F5 F8 FA FD 
13548     FF 00 01 03 
1354c     04 05 06 06 
13550     05 04 03 02 | 	byte	$f5, $f8, $fa, $fd, $ff, $00, $01, $03, $04, $05, $06, $06, $05, $04, $03, $02
13554     00 FF FC FA 
13558     F7 F4 F0 EE 
1355c     EA E7 E5 E3 
13560     E2 E1 E1 E1 | 	byte	$00, $ff, $fc, $fa, $f7, $f4, $f0, $ee, $ea, $e7, $e5, $e3, $e2, $e1, $e1, $e1
13564     E3 E5 E7 EC 
13568     F0 F4 F8 FC 
1356c     00 03 06 08 
13570     09 09 08 06 | 	byte	$e3, $e5, $e7, $ec, $f0, $f4, $f8, $fc, $00, $03, $06, $08, $09, $09, $08, $06
13574     02 FF F9 F4 
13578     EE E8 E4 E1 
1357c     E0 E0 E1 E4 
13580     E9 F0 F7 FE | 	byte	$02, $ff, $f9, $f4, $ee, $e8, $e4, $e1, $e0, $e0, $e1, $e4, $e9, $f0, $f7, $fe
13584     03 07 09 09 
13588     07 02 FC F4 
1358c     EC E5 E0 DF 
13590     E0 E5 ED F7 | 	byte	$03, $07, $09, $09, $07, $02, $fc, $f4, $ec, $e5, $e0, $df, $e0, $e5, $ed, $f7
13594     FF 06 0A 0A 
13598     05 FD F2 E8 
1359c     E1 DF E1 EA 
135a0     F7 01 09 0A | 	byte	$ff, $06, $0a, $0a, $05, $fd, $f2, $e8, $e1, $df, $e1, $ea, $f7, $01, $09, $0a
135a4     06 FB EE E3 
135a8     DF E2 EE FC 
135ac     06 0B 05 F7 
135b0     E8 E0 E1 EE | 	byte	$06, $fb, $ee, $e3, $df, $e2, $ee, $fc, $06, $0b, $05, $f7, $e8, $e0, $e1, $ee
135b4     FF 09 08 FC 
135b8     EB E0 E2 F3 
135bc     04 0A 01 EE 
135c0     E0 E4 F8 07 | 	byte	$ff, $09, $08, $fc, $eb, $e0, $e2, $f3, $04, $0a, $01, $ee, $e0, $e4, $f8, $07
135c4     07 F5 E2 E1 
135c8     F6 08 05 F1 
135cc     E0 E9 02 09 
135d0     F6 E1 E7 01 | 	byte	$07, $f5, $e2, $e1, $f6, $08, $05, $f1, $e0, $e9, $02, $09, $f6, $e1, $e7, $01
135d4     08 F3 E0 EF 
135d8     07 00 E6 E4 
135dc     01 06 EA E2 
135e0     00 06 E9 E4 | 	byte	$08, $f3, $e0, $ef, $07, $00, $e6, $e4, $01, $06, $ea, $e2, $00, $06, $e9, $e4
135e4     04 02 E2 EF 
135e8     08 F3 E1 01 
135ec     00 E1 F7 07 
135f0     E4 EF 09 E8 | 	byte	$04, $02, $e2, $ef, $08, $f3, $e1, $01, $00, $e1, $f7, $07, $e4, $ef, $09, $e8
135f4     ED 09 E7 F0 
135f8     07 E4 F8 03 
135fc     E0 02 F6 E7 
13600     08 E5 FB FC | 	byte	$ed, $09, $e7, $f0, $07, $e4, $f8, $03, $e0, $02, $f6, $e7, $08, $e5, $fb, $fc
13604     E5 07 E4 FD 
13608     F4 ED 03 E2 
1360c     07 E5 FF F5 
13610     EA 05 E1 03 | 	byte	$e5, $07, $e4, $fd, $f4, $ed, $03, $e2, $07, $e5, $ff, $f5, $ea, $05, $e1, $03
13614     F1 EC 07 E2 
13618     FE FD E1 06 
1361c     F2 E7 08 EC 
13620     EA 08 EC E9 | 	byte	$f1, $ec, $07, $e2, $fe, $fd, $e1, $06, $f2, $e7, $08, $ec, $ea, $08, $ec, $e9
13624     08 F0 E4 06 
13628     F9 E0 FD 06 
1362c     E5 EB 08 FA 
13630     E0 F6 09 F1 | 	byte	$08, $f0, $e4, $06, $f9, $e0, $fd, $06, $e5, $eb, $08, $fa, $e0, $f6, $09, $f1
13634     E0 FA 09 F2 
13638     E0 F4 09 FB 
1363c     E1 E7 03 08 
13640     F1 E0 EE 06 | 	byte	$e0, $fa, $09, $f2, $e0, $f4, $09, $fb, $e1, $e7, $03, $08, $f1, $e0, $ee, $06
13644     06 F0 E0 E9 
13648     00 0A FC E5 
1364c     E0 F0 04 09 
13650     FC E7 DF E9 | 	byte	$06, $f0, $e0, $e9, $00, $0a, $fc, $e5, $e0, $f0, $04, $09, $fc, $e7, $df, $e9
13654     FE 08 06 F6 
13658     E5 DF E8 F9 
1365c     06 0A 01 F1 
13660     E3 E0 E6 F5 | 	byte	$fe, $08, $06, $f6, $e5, $df, $e8, $f9, $06, $0a, $01, $f1, $e3, $e0, $e6, $f5
13664     02 09 08 FF 
13668     F1 E5 E0 E1 
1366c     EB F8 02 09 
13670     09 03 FA EE | 	byte	$02, $09, $08, $ff, $f1, $e5, $e0, $e1, $eb, $f8, $02, $09, $09, $03, $fa, $ee
13674     E4 E0 E0 E6 
13678     EF F8 01 07 
1367c     09 08 02 FB 
13680     F2 E9 E4 E0 | 	byte	$e4, $e0, $e0, $e6, $ef, $f8, $01, $07, $09, $08, $02, $fb, $f2, $e9, $e4, $e0
13684     E0 E3 E8 F0 
13688     F8 FF 04 07 
1368c     09 08 05 00 
13690     FC F5 EF E9 | 	byte	$e0, $e3, $e8, $f0, $f8, $ff, $04, $07, $09, $08, $05, $00, $fc, $f5, $ef, $e9
13694     E5 E2 E1 E1 
13698     E3 E7 EB F0 
1369c     F6 FC 00 02 
136a0     05 07 07 07 | 	byte	$e5, $e2, $e1, $e1, $e3, $e7, $eb, $f0, $f6, $fc, $00, $02, $05, $07, $07, $07
136a4     06 03 00 FE 
136a8     F9 F6 F1 EE 
136ac     EA E7 E5 E4 
136b0     E3 E3 E3 E4 | 	byte	$06, $03, $00, $fe, $f9, $f6, $f1, $ee, $ea, $e7, $e5, $e4, $e3, $e3, $e3, $e4
136b4     E6 E8 EB EE 
136b8     F1 F4 F8 FB 
136bc     FE 00 01 02 
136c0     03 04 04 04 | 	byte	$e6, $e8, $eb, $ee, $f1, $f4, $f8, $fb, $fe, $00, $01, $02, $03, $04, $04, $04
136c4     04 03 02 01 
136c8     FF FF FC FA 
136cc     F8 F6 F3 F1 
136d0     F0 ED EB E9 | 	byte	$04, $03, $02, $01, $ff, $ff, $fc, $fa, $f8, $f6, $f3, $f1, $f0, $ed, $eb, $e9
136d4     E7 E6 E5 E4 
136d8     E4 E4 E4 E5 
136dc     E6 E7 E9 EC 
136e0     EF F1 F4 F8 | 	byte	$e7, $e6, $e5, $e4, $e4, $e4, $e4, $e5, $e6, $e7, $e9, $ec, $ef, $f1, $f4, $f8
136e4     FB FF 00 03 
136e8     05 06 07 07 
136ec     07 07 05 03 
136f0     00 FE F9 F5 | 	byte	$fb, $ff, $00, $03, $05, $06, $07, $07, $07, $07, $05, $03, $00, $fe, $f9, $f5
136f4     F1 EC E8 E5 
136f8     E3 E1 E0 E1 
136fc     E3 E6 EA EF 
13700     F3 F9 FF 03 | 	byte	$f1, $ec, $e8, $e5, $e3, $e1, $e0, $e1, $e3, $e6, $ea, $ef, $f3, $f9, $ff, $03
13704     06 08 09 08 
13708     05 00 FC F5 
1370c     EE E8 E3 E0 
13710     E0 E1 E6 EC | 	byte	$06, $08, $09, $08, $05, $00, $fc, $f5, $ee, $e8, $e3, $e0, $e0, $e1, $e6, $ec
13714     F4 FD 02 07 
13718     09 08 04 FD 
1371c     F4 EB E4 E0 
13720     E0 E4 ED F8 | 	byte	$f4, $fd, $02, $07, $09, $08, $04, $fd, $f4, $eb, $e4, $e0, $e0, $e4, $ed, $f8
13724     01 07 09 07 
13728     FF F3 E8 E1 
1372c     E0 E5 F0 FD 
13730     06 0A 05 FB | 	byte	$01, $07, $09, $07, $ff, $f3, $e8, $e1, $e0, $e5, $f0, $fd, $06, $0a, $05, $fb
13734     EC E1 E0 E7 
13738     F6 03 09 06 
1373c     F9 E8 E0 E3 
13740     F2 02 09 03 | 	byte	$ec, $e1, $e0, $e7, $f6, $03, $09, $06, $f9, $e8, $e0, $e3, $f2, $02, $09, $03
13744     F2 E3 E0 EF 
13748     01 09 00 EC 
1374c     E0 E6 FC 08 
13750     02 ED E0 EA | 	byte	$f2, $e3, $e0, $ef, $01, $09, $00, $ec, $e0, $e6, $fc, $08, $02, $ed, $e0, $ea
13754     01 09 F8 E3 
13758     E4 FC 09 FA 
1375c     E3 E6 FF 08 
13760     F0 E0 F2 08 | 	byte	$01, $09, $f8, $e3, $e4, $fc, $09, $fa, $e3, $e6, $ff, $08, $f0, $e0, $f2, $08
13764     FC E2 EB 06 
13768     FF E3 EB 07 
1376c     FC E1 F3 09 
13770     EF E2 02 00 | 	byte	$fc, $e2, $eb, $06, $ff, $e3, $eb, $07, $fc, $e1, $f3, $09, $ef, $e2, $02, $00
13774     E2 F5 08 E9 
13778     EB 07 EF E6 
1377c     07 F1 E6 07 
13780     EE E9 08 E8 | 	byte	$e2, $f5, $08, $e9, $eb, $07, $ef, $e6, $07, $f1, $e6, $07, $ee, $e9, $08, $e8
13784     F2 05 E1 FE 
13788     F9 E5 07 E6 
1378c     F9 FC E5 07 
13790     E5 FE F5 EA | 	byte	$f2, $05, $e1, $fe, $f9, $e5, $07, $e6, $f9, $fc, $e5, $07, $e5, $fe, $f5, $ea
13794     05 E1 03 F0 
13798     EC 06 E2 FE 
1379c     F9 E4 06 EF 
137a0     EB 08 E8 F0 | 	byte	$05, $e1, $03, $f0, $ec, $06, $e2, $fe, $f9, $e4, $06, $ef, $eb, $08, $e8, $f0
137a4     08 E6 F1 08 
137a8     E8 EC 08 F0 
137ac     E4 06 FB E1 
137b0     F9 07 EA E5 | 	byte	$08, $e6, $f1, $08, $e8, $ec, $08, $f0, $e4, $06, $fb, $e1, $f9, $07, $ea, $e5
137b4     04 01 E3 EB 
137b8     06 FE E2 EB 
137bc     06 01 E6 E5 
137c0     FF 08 F1 E0 | 	byte	$04, $01, $e3, $eb, $06, $fe, $e2, $eb, $06, $01, $e6, $e5, $ff, $08, $f1, $e0
137c4     EF 06 04 EC 
137c8     E0 EF 05 06 
137cc     F3 E1 E6 FC 
137d0     09 01 EC E0 | 	byte	$ef, $06, $04, $ec, $e0, $ef, $05, $06, $f3, $e1, $e6, $fc, $09, $01, $ec, $e0
137d4     E6 FB 08 05 
137d8     F4 E3 E0 ED 
137dc     00 09 06 F7 
137e0     E7 E0 E5 F3 | 	byte	$e6, $fb, $08, $05, $f4, $e3, $e0, $ed, $00, $09, $06, $f7, $e7, $e0, $e5, $f3
137e4     02 09 06 F9 
137e8     EC E2 E0 E8 
137ec     F6 02 08 08 
137f0     01 F5 E9 E1 | 	byte	$02, $09, $06, $f9, $ec, $e2, $e0, $e8, $f6, $02, $08, $08, $01, $f5, $e9, $e1
137f4     E0 E4 EF FA 
137f8     03 08 08 04 
137fc     FD F2 E9 E3 
13800     E0 E1 E6 EF | 	byte	$e0, $e4, $ef, $fa, $03, $08, $08, $04, $fd, $f2, $e9, $e3, $e0, $e1, $e6, $ef
13804     F8 FF 05 08 
13808     08 06 00 FA 
1380c     F2 EB E7 E2 
13810     E0 E1 E4 E9 | 	byte	$f8, $ff, $05, $08, $08, $06, $00, $fa, $f2, $eb, $e7, $e2, $e0, $e1, $e4, $e9
13814     EF F6 FC 00 
13818     04 07 07 07 
1381c     04 01 FE F8 
13820     F3 EE EB E7 | 	byte	$ef, $f6, $fc, $00, $04, $07, $07, $07, $04, $01, $fe, $f8, $f3, $ee, $eb, $e7
13824     E4 E3 E2 E3 
13828     E4 E7 EA EE 
1382c     F2 F6 FA FE 
13830     00 02 04 05 | 	byte	$e4, $e3, $e2, $e3, $e4, $e7, $ea, $ee, $f2, $f6, $fa, $fe, $00, $02, $04, $05
13834     06 06 04 03 
13838     01 00 FE FB 
1383c     F8 F4 F1 F0 
13840     EC EA E8 E7 | 	byte	$06, $06, $04, $03, $01, $00, $fe, $fb, $f8, $f4, $f1, $f0, $ec, $ea, $e8, $e7
13844     E6 E5 E5 E5 
13848     E6 E6 E7 E9 
1384c     EB EC EF F1 
13850     F3 F5 F8 F9 | 	byte	$e6, $e5, $e5, $e5, $e6, $e6, $e7, $e9, $eb, $ec, $ef, $f1, $f3, $f5, $f8, $f9
13854     FC FE FF 00 
13858     01 02 03 03 
1385c     04 04 03 03 
13860     02 01 00 FF | 	byte	$fc, $fe, $ff, $00, $01, $02, $03, $03, $04, $04, $03, $03, $02, $01, $00, $ff
13864     FC FA F8 F4 
13868     F2 F0 EC E9 
1386c     E7 E6 E4 E3 
13870     E2 E2 E3 E4 | 	byte	$fc, $fa, $f8, $f4, $f2, $f0, $ec, $e9, $e7, $e6, $e4, $e3, $e2, $e2, $e3, $e4
13874     E6 E8 EB EF 
13878     F3 F7 FB FF 
1387c     01 04 06 07 
13880     07 07 06 03 | 	byte	$e6, $e8, $eb, $ef, $f3, $f7, $fb, $ff, $01, $04, $06, $07, $07, $07, $06, $03
13884     00 FC F8 F2 
13888     ED E8 E4 E2 
1388c     E0 E0 E3 E6 
13890     EB F1 F8 FE | 	byte	$00, $fc, $f8, $f2, $ed, $e8, $e4, $e2, $e0, $e0, $e3, $e6, $eb, $f1, $f8, $fe
13894     03 07 08 08 
13898     07 02 FD F5 
1389c     ED E7 E2 E0 
138a0     E0 E5 EC F5 | 	byte	$03, $07, $08, $08, $07, $02, $fd, $f5, $ed, $e7, $e2, $e0, $e0, $e5, $ec, $f5
138a4     FE 04 08 08 
138a8     05 FF F5 EC 
138ac     E4 E0 E0 E7 
138b0     F2 FE 05 09 | 	byte	$fe, $04, $08, $08, $05, $ff, $f5, $ec, $e4, $e0, $e0, $e7, $f2, $fe, $05, $09
138b4     07 FF F3 E7 
138b8     E0 E0 E9 F7 
138bc     01 08 07 FD 
138c0     EF E3 E0 E8 | 	byte	$07, $ff, $f3, $e7, $e0, $e0, $e9, $f7, $01, $08, $07, $fd, $ef, $e3, $e0, $e8
138c4     F7 04 09 02 
138c8     F3 E4 E0 E9 
138cc     FC 07 06 F9 
138d0     E6 E0 EC 00 | 	byte	$f7, $04, $09, $02, $f3, $e4, $e0, $e9, $fc, $07, $06, $f9, $e6, $e0, $ec, $00
138d4     09 00 EC E0 
138d8     E9 FF 09 FE 
138dc     E8 E0 F2 06 
138e0     04 ED E0 EF | 	byte	$09, $00, $ec, $e0, $e9, $ff, $09, $fe, $e8, $e0, $f2, $06, $04, $ed, $e0, $ef
138e4     06 03 EA E1 
138e8     F7 08 FA E2 
138ec     EB 05 00 E5 
138f0     E8 03 01 E4 | 	byte	$06, $03, $ea, $e1, $f7, $08, $fa, $e2, $eb, $05, $00, $e5, $e8, $03, $01, $e4
138f4     E9 06 FD E2 
138f8     F4 07 EE E3 
138fc     03 FD E2 F9 
13900     05 E5 F0 07 | 	byte	$e9, $06, $fd, $e2, $f4, $07, $ee, $e3, $03, $fd, $e2, $f9, $05, $e5, $f0, $07
13904     E9 EC 07 EA 
13908     ED 07 E7 F3 
1390c     05 E3 FC FC 
13910     E3 05 ED EF | 	byte	$e9, $ec, $07, $ea, $ed, $07, $e7, $f3, $05, $e3, $fc, $fc, $e3, $05, $ed, $ef
13914     04 E2 02 F0 
13918     EF 03 E1 04 
1391c     F0 EE 05 E3 
13920     FD FA E3 05 | 	byte	$04, $e2, $02, $f0, $ef, $03, $e1, $04, $f0, $ee, $05, $e3, $fd, $fa, $e3, $05
13924     F1 E8 07 ED 
13928     EA 07 EC EA 
1392c     07 F0 E5 06 
13930     F9 E1 FE 03 | 	byte	$f1, $e8, $07, $ed, $ea, $07, $ec, $ea, $07, $f0, $e5, $06, $f9, $e1, $fe, $03
13934     E5 ED 07 F6 
13938     E0 F9 08 EE 
1393c     E2 FD 07 EF 
13940     E1 F9 08 F5 | 	byte	$e5, $ed, $07, $f6, $e0, $f9, $08, $ee, $e2, $fd, $07, $ef, $e1, $f9, $08, $f5
13944     E1 EE 06 01 
13948     EA E1 F6 07 
1394c     FE E8 E1 F4 
13950     06 04 F0 E0 | 	byte	$e1, $ee, $06, $01, $ea, $e1, $f6, $07, $fe, $e8, $e1, $f4, $06, $04, $f0, $e0
13954     E7 FE 08 01 
13958     ED E1 E6 FA 
1395c     06 06 F8 E7 
13960     E0 E8 FA 06 | 	byte	$e7, $fe, $08, $01, $ed, $e1, $e6, $fa, $06, $06, $f8, $e7, $e0, $e8, $fa, $06
13964     08 FE EE E1 
13968     E1 EC FA 05 
1396c     08 02 F5 E8 
13970     E1 E1 EA F7 | 	byte	$08, $fe, $ee, $e1, $e1, $ec, $fa, $05, $08, $02, $f5, $e8, $e1, $e1, $ea, $f7
13974     01 08 07 00 
13978     F7 EB E3 E0 
1397c     E3 EB F5 FF 
13980     05 08 07 01 | 	byte	$01, $08, $07, $00, $f7, $eb, $e3, $e0, $e3, $eb, $f5, $ff, $05, $08, $07, $01
13984     F9 F1 E8 E3 
13988     E0 E2 E7 EE 
1398c     F6 FE 03 07 
13990     07 07 03 FE | 	byte	$f9, $f1, $e8, $e3, $e0, $e2, $e7, $ee, $f6, $fe, $03, $07, $07, $07, $03, $fe
13994     F8 F1 EB E6 
13998     E3 E1 E2 E4 
1399c     E8 EE F3 F9 
139a0     FF 01 04 06 | 	byte	$f8, $f1, $eb, $e6, $e3, $e1, $e2, $e4, $e8, $ee, $f3, $f9, $ff, $01, $04, $06
139a4     07 06 04 01 
139a8     FF FA F6 F1 
139ac     ED E9 E7 E4 
139b0     E3 E3 E3 E5 | 	byte	$07, $06, $04, $01, $ff, $fa, $f6, $f1, $ed, $e9, $e7, $e4, $e3, $e3, $e3, $e5
139b4     E7 E9 EC F0 
139b8     F3 F6 F9 FD 
139bc     00 01 03 03 
139c0     04 04 04 03 | 	byte	$e7, $e9, $ec, $f0, $f3, $f6, $f9, $fd, $00, $01, $03, $03, $04, $04, $04, $03
139c4     01 00 FF FD 
139c8     FB F8 F6 F4 
139cc     F1 F0 EE EC 
139d0     EA E8 E7 E7 | 	byte	$01, $00, $ff, $fd, $fb, $f8, $f6, $f4, $f1, $f0, $ee, $ec, $ea, $e8, $e7, $e7
139d4     E7 E7 E7 E7 
139d8     E7          | 	byte	$e7[5]
139d9     E8 E9 EB EC 
139dd     EE F0 F1 F3 
139e1     F5 F8 F9 FC 
139e5     FE 00 00 01 | 	byte	$e8, $e9, $eb, $ec, $ee, $f0, $f1, $f3, $f5, $f8, $f9, $fc, $fe, $00, $00, $01
139e9     03 03 04 04 
139ed     04 03 03 01 
139f1     00 FF FD FB 
139f5     F8 F5 F1 EF | 	byte	$03, $03, $04, $04, $04, $03, $03, $01, $00, $ff, $fd, $fb, $f8, $f5, $f1, $ef
139f9     EC E9 E7 E4 
139fd     E3 E2 E2 E3 
13a01     E4 E6 E8 EC 
13a05     EF F3 F8 FC | 	byte	$ec, $e9, $e7, $e4, $e3, $e2, $e2, $e3, $e4, $e6, $e8, $ec, $ef, $f3, $f8, $fc
13a09     00 03 05 07 
13a0d     07 07 05 02 
13a11     FF FB F5 F0 
13a15     EA E6 E3 E1 | 	byte	$00, $03, $05, $07, $07, $07, $05, $02, $ff, $fb, $f5, $f0, $ea, $e6, $e3, $e1
13a19     E0 E2 E5 EB 
13a1d     F1 F8 FE 03 
13a21     07 08 07 04 
13a25     FF F8 F0 E9 | 	byte	$e0, $e2, $e5, $eb, $f1, $f8, $fe, $03, $07, $08, $07, $04, $ff, $f8, $f0, $e9
13a29     E3 E0 E0 E4 
13a2d     EB F4 FE 03 
13a31     07 08 04 FD 
13a35     F3 E9 E2 E0 | 	byte	$e3, $e0, $e0, $e4, $eb, $f4, $fe, $03, $07, $08, $04, $fd, $f3, $e9, $e2, $e0
13a39     E3 ED F8 02 
13a3d     07 08 01 F7 
13a41     EA E2 E0 E7 
13a45     F4 01 07 07 | 	byte	$e3, $ed, $f8, $02, $07, $08, $01, $f7, $ea, $e2, $e0, $e7, $f4, $01, $07, $07
13a49     FD EF E3 E0 
13a4d     E9 F9 05 08 
13a51     FF EF E2 E2 
13a55     F0 00 08 01 | 	byte	$fd, $ef, $e3, $e0, $e9, $f9, $05, $08, $ff, $ef, $e2, $e2, $f0, $00, $08, $01
13a59     F0 E2 E4 F5 
13a5d     05 06 F6 E4 
13a61     E3 F6 07 03 
13a65     F1 E1 EA 01 | 	byte	$f0, $e2, $e4, $f5, $05, $06, $f6, $e4, $e3, $f6, $07, $03, $f1, $e1, $ea, $01
13a69     08 F5 E2 E9 
13a6d     01 06 F1 E1 
13a71     F1 07 FF E5 
13a75     E7 01 03 E9 | 	byte	$08, $f5, $e2, $e9, $01, $06, $f1, $e1, $f1, $07, $ff, $e5, $e7, $01, $03, $e9
13a79     E4 00 04 E9 
13a7d     E6 03 FF E4 
13a81     EF 07 F3 E3 
13a85     00 00 E3 F4 | 	byte	$e4, $00, $04, $e9, $e6, $03, $ff, $e4, $ef, $07, $f3, $e3, $00, $00, $e3, $f4
13a89     06 E8 ED 06 
13a8d     ED EA 06 EC 
13a91     EB 07 EA EF 
13a95     06 E5 F9 FF | 	byte	$06, $e8, $ed, $06, $ed, $ea, $06, $ec, $eb, $07, $ea, $ef, $06, $e5, $f9, $ff
13a99     E2 02 F2 EC 
13a9d     06 E3 FE F7 
13aa1     E6 06 E8 F5 
13aa5     02 E3 FE FB | 	byte	$e2, $02, $f2, $ec, $06, $e3, $fe, $f7, $e6, $06, $e8, $f5, $02, $e3, $fe, $fb
13aa9     E3 03 F6 E4 
13aad     04 F5 E3 03 
13ab1     F8 E2 FE 01 
13ab5     E3 F4 07 EC | 	byte	$e3, $03, $f6, $e4, $04, $f5, $e3, $03, $f8, $e2, $fe, $01, $e3, $f4, $07, $ec
13ab9     E5 03 FE E3 
13abd     F0 07 F7 E1 
13ac1     F4 07 F6 E1 
13ac5     F2 06 FD E4 | 	byte	$e5, $03, $fe, $e3, $f0, $07, $f7, $e1, $f4, $07, $f6, $e1, $f2, $06, $fd, $e4
13ac9     E8 02 05 EF 
13acd     E1 F0 05 03 
13ad1     ED E0 EF 03 
13ad5     06 F4 E2 E6 | 	byte	$e8, $02, $05, $ef, $e1, $f0, $05, $03, $ed, $e0, $ef, $03, $06, $f4, $e2, $e6
13ad9     F8 06 03 F1 
13add     E2 E5 F6 05 
13ae1     07 FA E8 E0 
13ae5     E8 F9 05 07 | 	byte	$f8, $06, $03, $f1, $e2, $e5, $f6, $05, $07, $fa, $e8, $e0, $e8, $f9, $05, $07
13ae9     FE EE E2 E1 
13aed     EB FB 05 08 
13af1     01 F4 E8 E1 
13af5     E2 EC F9 02 | 	byte	$fe, $ee, $e2, $e1, $eb, $fb, $05, $08, $01, $f4, $e8, $e1, $e2, $ec, $f9, $02
13af9     07 06 FF F4 
13afd     E9 E2 E1 E5 
13b01     EE F8 00 06 
13b05     07 05 FF F5 | 	byte	$07, $06, $ff, $f4, $e9, $e2, $e1, $e5, $ee, $f8, $00, $06, $07, $05, $ff, $f5
13b09     ED E6 E1 E1 
13b0d     E4 EB F3 FB 
13b11     01 05 07 07 
13b15     04 00 F9 F2 | 	byte	$ed, $e6, $e1, $e1, $e4, $eb, $f3, $fb, $01, $05, $07, $07, $04, $00, $f9, $f2
13b19     EC E7 E3 E2 
13b1d     E2 E4 E8 EE 
13b21     F3 F9 FF 01 
13b25     04 06 06 06 | 	byte	$ec, $e7, $e3, $e2, $e2, $e4, $e8, $ee, $f3, $f9, $ff, $01, $04, $06, $06, $06
13b29     03 00 FD F9 
13b2d     F4 F0 EC E8 
13b31     E6 E4 E3 E3 
13b35     E4 E6 E8 EC | 	byte	$03, $00, $fd, $f9, $f4, $f0, $ec, $e8, $e6, $e4, $e3, $e3, $e4, $e6, $e8, $ec
13b39     EF F1 F5 F8 
13b3d     FC FF 00 02 
13b41     03 04 04 03 
13b45     03 01 00 FF | 	byte	$ef, $f1, $f5, $f8, $fc, $ff, $00, $02, $03, $04, $04, $03, $03, $01, $00, $ff
13b49     FD FB F8 F6 
13b4d     F4 F1 F0 ED 
13b51     EB E9 E8 E7 
13b55     E7 E7 E7 E7 | 	byte	$fd, $fb, $f8, $f6, $f4, $f1, $f0, $ed, $eb, $e9, $e8, $e7, $e7, $e7, $e7, $e7
13b59     E7 E8 E9 EA 
13b5d     EC EE EF F0 
13b61     F2 F4 F6 F8 
13b65     F9 FC FD FF | 	byte	$e7, $e8, $e9, $ea, $ec, $ee, $ef, $f0, $f2, $f4, $f6, $f8, $f9, $fc, $fd, $ff
13b69     00 00 01 02 
13b6d     03 03 03 03 
13b71     02 01 00 FF 
13b75     FF FC FA F8 | 	byte	$00, $00, $01, $02, $03, $03, $03, $03, $02, $01, $00, $ff, $ff, $fc, $fa, $f8
13b79     F6 F3 F0 EE 
13b7d     EB E8 E7 E5 
13b81     E4 E3 E3 E3 
13b85     E4 E6 E8 EB | 	byte	$f6, $f3, $f0, $ee, $eb, $e8, $e7, $e5, $e4, $e3, $e3, $e3, $e4, $e6, $e8, $eb
13b89     EE F1 F5 F9 
13b8d     FD 00 03 05 
13b91     06 07 06 04 
13b95     02 FF FC F7 | 	byte	$ee, $f1, $f5, $f9, $fd, $00, $03, $05, $06, $07, $06, $04, $02, $ff, $fc, $f7
13b99     F2 EE E9 E6 
13b9d     E3 E1 E1 E3 
13ba1     E7 EC F2 F8 
13ba5     FE 02 06 07 | 	byte	$f2, $ee, $e9, $e6, $e3, $e1, $e1, $e3, $e7, $ec, $f2, $f8, $fe, $02, $06, $07
13ba9     07 04 00 F9 
13bad     F3 EC E6 E2 
13bb1     E0 E3 E8 F0 
13bb5     F8 00 05 07 | 	byte	$07, $04, $00, $f9, $f3, $ec, $e6, $e2, $e0, $e3, $e8, $f0, $f8, $00, $05, $07
13bb9     07 01 FA F0 
13bbd     E7 E1 E1 E6 
13bc1     EE F8 01 07 
13bc5     07 01 F7 EB | 	byte	$07, $01, $fa, $f0, $e7, $e1, $e1, $e6, $ee, $f8, $01, $07, $07, $01, $f7, $eb
13bc9     E3 E1 E6 F2 
13bcd     FF 07 07 00 
13bd1     F2 E5 E0 E6 
13bd5     F4 01 07 03 | 	byte	$e3, $e1, $e6, $f2, $ff, $07, $07, $00, $f2, $e5, $e0, $e6, $f4, $01, $07, $03
13bd9     F6 E6 E0 E9 
13bdd     FA 05 06 F8 
13be1     E8 E1 EB FE 
13be5     07 00 EE E2 | 	byte	$f6, $e6, $e0, $e9, $fa, $05, $06, $f8, $e8, $e1, $eb, $fe, $07, $00, $ee, $e2
13be9     E8 FE 07 FE 
13bed     E9 E1 F1 04 
13bf1     03 EF E1 EF 
13bf5     03 03 EC E1 | 	byte	$e8, $fe, $07, $fe, $e9, $e1, $f1, $04, $03, $ef, $e1, $ef, $03, $03, $ec, $e1
13bf9     F6 07 FA E4 
13bfd     EB 03 01 E7 
13c01     E7 01 02 E7 
13c05     E8 04 FE E4 | 	byte	$f6, $07, $fa, $e4, $eb, $03, $01, $e7, $e7, $01, $02, $e7, $e8, $04, $fe, $e4
13c09     F0 07 F3 E3 
13c0d     FF 01 E4 F2 
13c11     07 EA EA 06 
13c15     F1 E6 05 F4 | 	byte	$f0, $07, $f3, $e3, $ff, $01, $e4, $f2, $07, $ea, $ea, $06, $f1, $e6, $05, $f4
13c19     E6 05 F1 E8 
13c1d     06 EC EF 05 
13c21     E5 FA FD E3 
13c25     04 ED EF 05 | 	byte	$e6, $05, $f1, $e8, $06, $ec, $ef, $05, $e5, $fa, $fd, $e3, $04, $ed, $ef, $05
13c29     E5 FB FE E2 
13c2d     00 F9 E4 02 
13c31     F7 E3 03 F9 
13c35     E2 FE 01 E3 | 	byte	$e5, $fb, $fe, $e2, $00, $f9, $e4, $02, $f7, $e3, $03, $f9, $e2, $fe, $01, $e3
13c39     F6 05 EB E8 
13c3d     04 FB E2 F5 
13c41     07 F0 E2 FB 
13c45     06 ED E3 FB | 	byte	$f6, $05, $eb, $e8, $04, $fb, $e2, $f5, $07, $f0, $e2, $fb, $06, $ed, $e3, $fb
13c49     07 F1 E1 F5 
13c4d     06 FB E5 E7 
13c51     FF 07 F4 E2 
13c55     EA FF 07 F7 | 	byte	$07, $f1, $e1, $f5, $06, $fb, $e5, $e7, $ff, $07, $f4, $e2, $ea, $ff, $07, $f7
13c59     E3 E6 F9 06 
13c5d     01 ED E1 E9 
13c61     FC 07 02 F1 
13c65     E3 E3 F2 02 | 	byte	$e3, $e6, $f9, $06, $01, $ed, $e1, $e9, $fc, $07, $02, $f1, $e3, $e3, $f2, $02
13c69     07 00 F0 E3 
13c6d     E2 EE FD 06 
13c71     07 FD EE E4 
13c75     E1 E9 F6 01 | 	byte	$07, $00, $f0, $e3, $e2, $ee, $fd, $06, $07, $fd, $ee, $e4, $e1, $e9, $f6, $01
13c79     07 06 FD F1 
13c7d     E6 E1 E3 EB 
13c81     F7 FF 05 07 
13c85     03 FB F1 E8 | 	byte	$07, $06, $fd, $f1, $e6, $e1, $e3, $eb, $f7, $ff, $05, $07, $03, $fb, $f1, $e8
13c89     E3 E1 E4 EB 
13c8d     F4 FD 03 06 
13c91     07 03 FF F8 
13c95     F1 EA E5 E2 | 	byte	$e3, $e1, $e4, $eb, $f4, $fd, $03, $06, $07, $03, $ff, $f8, $f1, $ea, $e5, $e2
13c99     E2 E4 E9 F0 
13c9d     F7 FD 01 04 
13ca1     06 06 04 00 
13ca5     FD F8 F2 ED | 	byte	$e2, $e4, $e9, $f0, $f7, $fd, $01, $04, $06, $06, $04, $00, $fd, $f8, $f2, $ed
13ca9     E9 E6 E4 E3 
13cad     E3 E5 E7 EB 
13cb1     F0 F3 F8 FC 
13cb5     00 01 03 04 | 	byte	$e9, $e6, $e4, $e3, $e3, $e5, $e7, $eb, $f0, $f3, $f8, $fc, $00, $01, $03, $04
13cb9     05 04 03 01 
13cbd     FF FD FA F7 
13cc1     F3 F0 EE EB 
13cc5     E9 E7 E6 E6 | 	byte	$05, $04, $03, $01, $ff, $fd, $fa, $f7, $f3, $f0, $ee, $eb, $e9, $e7, $e6, $e6
13cc9     E5 E6 E7 E7 
13ccd     E9 EB ED EF 
13cd1     F1 F4 F6 F8 
13cd5     FB FD FF FF | 	byte	$e5, $e6, $e7, $e7, $e9, $eb, $ed, $ef, $f1, $f4, $f6, $f8, $fb, $fd, $ff, $ff
13cd9     00 01 01 01 
13cdd     01 01 01 00 
13ce1     FF FF FF FD 
13ce5     FC FA F8 F7 | 	byte	$00, $01, $01, $01, $01, $01, $01, $00, $ff, $ff, $ff, $fd, $fc, $fa, $f8, $f7
13ce9     F6 F4 F2 F0 
13ced     EF ED EC EA 
13cf1     E9 E8 E7 E7 
13cf5     E7 E7 E7 E7 | 	byte	$f6, $f4, $f2, $f0, $ef, $ed, $ec, $ea, $e9, $e8, $e7, $e7, $e7, $e7, $e7, $e7
13cf9     E7 E8 E9 EB 
13cfd     ED F0 F1 F4 
13d01     F7 F9 FC FE 
13d05     00 01 03 04 | 	byte	$e7, $e8, $e9, $eb, $ed, $f0, $f1, $f4, $f7, $f9, $fc, $fe, $00, $01, $03, $04
13d09     04 05 05 04 
13d0d     03 01 FF FE 
13d11     FA F7 F3 F0 
13d15     EC E8 E6 E4 | 	byte	$04, $05, $05, $04, $03, $01, $ff, $fe, $fa, $f7, $f3, $f0, $ec, $e8, $e6, $e4
13d19     E3 E2 E3 E4 
13d1d     E7 EA EF F3 
13d21     F8 FD 00 03 
13d25     06 07 06 04 | 	byte	$e3, $e2, $e3, $e4, $e7, $ea, $ef, $f3, $f8, $fd, $00, $03, $06, $07, $06, $04
13d29     00 FD F8 F1 
13d2d     EC E7 E3 E1 
13d31     E1 E4 E9 EF 
13d35     F7 FE 02 06 | 	byte	$00, $fd, $f8, $f1, $ec, $e7, $e3, $e1, $e1, $e4, $e9, $ef, $f7, $fe, $02, $06
13d39     07 05 00 FA 
13d3d     F2 EA E4 E1 
13d41     E2 E7 EF F8 
13d45     00 05 07 04 | 	byte	$07, $05, $00, $fa, $f2, $ea, $e4, $e1, $e2, $e7, $ef, $f8, $00, $05, $07, $04
13d49     FD F2 E8 E3 
13d4d     E1 E7 F1 FD 
13d51     04 07 03 F8 
13d55     EC E4 E1 E8 | 	byte	$fd, $f2, $e8, $e3, $e1, $e7, $f1, $fd, $04, $07, $03, $f8, $ec, $e4, $e1, $e8
13d59     F6 01 07 03 
13d5d     F8 EA E2 E4 
13d61     F2 00 07 02 
13d65     F4 E5 E2 EE | 	byte	$f6, $01, $07, $03, $f8, $ea, $e2, $e4, $f2, $00, $07, $02, $f4, $e5, $e2, $ee
13d69     FF 07 01 EF 
13d6d     E2 E6 F8 06 
13d71     03 F2 E3 E8 
13d75     FC 07 FD E8 | 	byte	$ff, $07, $01, $ef, $e2, $e6, $f8, $06, $03, $f2, $e3, $e8, $fc, $07, $fd, $e8
13d79     E3 F5 06 00 
13d7d     E9 E2 F7 06 
13d81     FB E4 E8 01 
13d85     04 EC E3 FB | 	byte	$e3, $f5, $06, $00, $e9, $e2, $f7, $06, $fb, $e4, $e8, $01, $04, $ec, $e3, $fb
13d89     06 F0 E2 FA 
13d8d     06 F0 E3 FE 
13d91     03 E7 EB 05 
13d95     F7 E2 FC 02 | 	byte	$06, $f0, $e2, $fa, $06, $f0, $e3, $fe, $03, $e7, $eb, $05, $f7, $e2, $fc, $02
13d99     E6 F0 06 EE 
13d9d     E9 05 F1 E6 
13da1     05 F2 E7 05 
13da5     EF EB 05 E9 | 	byte	$e6, $f0, $06, $ee, $e9, $05, $f1, $e6, $05, $f2, $e7, $05, $ef, $eb, $05, $e9
13da9     F3 02 E4 FE 
13dad     FA E4 04 F1 
13db1     E8 06 ED EB 
13db5     06 EC EA 05 | 	byte	$f3, $02, $e4, $fe, $fa, $e4, $04, $f1, $e8, $06, $ed, $eb, $06, $ec, $ea, $05
13db9     F1 E6 04 F8 
13dbd     E2 FD 02 E5 
13dc1     EF 06 F4 E2 
13dc5     FB 05 EC E5 | 	byte	$f1, $e6, $04, $f8, $e2, $fd, $02, $e5, $ef, $06, $f4, $e2, $fb, $05, $ec, $e5
13dc9     FF 03 E9 E5 
13dcd     FE 05 EE E2 
13dd1     F7 07 F9 E4 
13dd5     E9 00 06 F3 | 	byte	$ff, $03, $e9, $e5, $fe, $05, $ee, $e2, $f7, $07, $f9, $e4, $e9, $00, $06, $f3
13dd9     E2 EB 00 06 
13ddd     F6 E4 E5 FA 
13de1     06 01 EE E2 
13de5     E8 FB 06 02 | 	byte	$e2, $eb, $00, $06, $f6, $e4, $e5, $fa, $06, $01, $ee, $e2, $e8, $fb, $06, $02
13de9     F2 E4 E3 F0 
13ded     00 07 00 F1 
13df1     E5 E1 EB FB 
13df5     04 07 FF F1 | 	byte	$f2, $e4, $e3, $f0, $00, $07, $00, $f1, $e5, $e1, $eb, $fb, $04, $07, $ff, $f1
13df9     E5 E1 E7 F3 
13dfd     FF 06 06 00 
13e01     F4 E9 E2 E2 
13e05     E8 F2 FD 03 | 	byte	$e5, $e1, $e7, $f3, $ff, $06, $06, $00, $f4, $e9, $e2, $e2, $e8, $f2, $fd, $03
13e09     07 05 FF F5 
13e0d     EC E5 E2 E3 
13e11     E8 F0 F9 00 
13e15     04 06 05 01 | 	byte	$07, $05, $ff, $f5, $ec, $e5, $e2, $e3, $e8, $f0, $f9, $00, $04, $06, $05, $01
13e19     FC F5 ED E8 
13e1d     E4 E2 E3 E7 
13e21     EC F2 F8 FE 
13e25     01 04 06 05 | 	byte	$fc, $f5, $ed, $e8, $e4, $e2, $e3, $e7, $ec, $f2, $f8, $fe, $01, $04, $06, $05
13e29     03 00 FC F7 
13e2d     F2 ED E9 E6 
13e31     E4 E3 E4 E6 
13e35     E8 EC F0 F3 | 	byte	$03, $00, $fc, $f7, $f2, $ed, $e9, $e6, $e4, $e3, $e4, $e6, $e8, $ec, $f0, $f3
13e39     F8 FC FF 00 
13e3d     03 03 04 04 
13e41     03 01 00 FE 
13e45     FB F8 F5 F2 | 	byte	$f8, $fc, $ff, $00, $03, $03, $04, $04, $03, $01, $00, $fe, $fb, $f8, $f5, $f2
13e49     F0 EC EA E8 
13e4d     E7 E6 E6 E6 
13e51     E6 E7 E8 E9 
13e55     EB ED F0 F1 | 	byte	$f0, $ec, $ea, $e8, $e7, $e6, $e6, $e6, $e6, $e7, $e8, $e9, $eb, $ed, $f0, $f1
13e59     F3 F6 F8 FA 
13e5d     FC FE FF FF 
13e61     00 00 01 01 
13e65     00 00 00 FF | 	byte	$f3, $f6, $f8, $fa, $fc, $fe, $ff, $ff, $00, $00, $01, $01, $00, $00, $00, $ff
13e69     FF FF FE FC 
13e6d     FB F9 F8 F7 
13e71     F6 F4 F2 F0 
13e75     F0 EE EC EB | 	byte	$ff, $ff, $fe, $fc, $fb, $f9, $f8, $f7, $f6, $f4, $f2, $f0, $f0, $ee, $ec, $eb
13e79     EA E9 E8 E7 
13e7d     E7 E7 E7 E7 
13e81     E7 E8 E9 EB 
13e85     ED EF F1 F3 | 	byte	$ea, $e9, $e8, $e7, $e7, $e7, $e7, $e7, $e7, $e8, $e9, $eb, $ed, $ef, $f1, $f3
13e89     F6 F8 FA FC 
13e8d     FF 00 01 03 
13e91     04 04 04 04 
13e95     03 01 00 FF | 	byte	$f6, $f8, $fa, $fc, $ff, $00, $01, $03, $04, $04, $04, $04, $03, $01, $00, $ff
13e99     FC F8 F5 F1 
13e9d     EE EA E8 E6 
13ea1     E4 E3 E3 E4 
13ea5     E6 E8 EC F1 | 	byte	$fc, $f8, $f5, $f1, $ee, $ea, $e8, $e6, $e4, $e3, $e3, $e4, $e6, $e8, $ec, $f1
13ea9     F6 FA FF 01 
13ead     04 06 06 05 
13eb1     02 FF FB F5 
13eb5     EF EA E6 E3 | 	byte	$f6, $fa, $ff, $01, $04, $06, $06, $05, $02, $ff, $fb, $f5, $ef, $ea, $e6, $e3
13eb9     E2 E3 E7 EC 
13ebd     F3 FA 00 04 
13ec1     07 06 02 FD 
13ec5     F7 EE E7 E3 | 	byte	$e2, $e3, $e7, $ec, $f3, $fa, $00, $04, $07, $06, $02, $fd, $f7, $ee, $e7, $e3
13ec9     E1 E5 EB F4 
13ecd     FE 03 07 05 
13ed1     00 F7 EC E4 
13ed5     E1 E5 ED F9 | 	byte	$e1, $e5, $eb, $f4, $fe, $03, $07, $05, $00, $f7, $ec, $e4, $e1, $e5, $ed, $f9
13ed9     01 06 05 FD 
13edd     F1 E7 E1 E6 
13ee1     F1 FD 05 06 
13ee5     FD EF E4 E3 | 	byte	$01, $06, $05, $fd, $f1, $e7, $e1, $e6, $f1, $fd, $05, $06, $fd, $ef, $e4, $e3
13ee9     EC FC 06 05 
13eed     F9 E9 E2 E8 
13ef1     F9 05 04 F6 
13ef5     E6 E2 F1 01 | 	byte	$ec, $fc, $06, $05, $f9, $e9, $e2, $e8, $f9, $05, $04, $f6, $e6, $e2, $f1, $01
13ef9     06 F9 E6 E3 
13efd     F4 05 03 F1 
13f01     E3 ED 02 04 
13f05     F2 E3 EE 03 | 	byte	$06, $f9, $e6, $e3, $f4, $05, $03, $f1, $e3, $ed, $02, $04, $f2, $e3, $ee, $03
13f09     02 EB E3 F8 
13f0d     06 F7 E3 EF 
13f11     05 FB E4 EE 
13f15     04 FB E4 F2 | 	byte	$02, $eb, $e3, $f8, $06, $f7, $e3, $ef, $05, $fb, $e4, $ee, $04, $fb, $e4, $f2
13f19     06 F3 E3 FB 
13f1d     03 E7 EC 05 
13f21     F3 E4 FF FC 
13f25     E3 FA 01 E4 | 	byte	$06, $f3, $e3, $fb, $03, $e7, $ec, $05, $f3, $e4, $ff, $fc, $e3, $fa, $01, $e4
13f29     F7 01 E5 F8 
13f2d     02 E4 FB FD 
13f31     E3 00 F6 E7 
13f35     04 F0 E9 05 | 	byte	$f7, $01, $e5, $f8, $02, $e4, $fb, $fd, $e3, $00, $f6, $e7, $04, $f0, $e9, $05
13f39     EF E8 04 F2 
13f3d     E6 03 F7 E3 
13f41     FD 00 E5 F1 
13f45     06 F0 E4 FF | 	byte	$ef, $e8, $04, $f2, $e6, $03, $f7, $e3, $fd, $00, $e5, $f1, $06, $f0, $e4, $ff
13f49     01 E7 EB 03 
13f4d     FD E5 ED 03 
13f51     FE E6 E9 01 
13f55     02 EC E3 F7 | 	byte	$01, $e7, $eb, $03, $fd, $e5, $ed, $03, $fe, $e6, $e9, $01, $02, $ec, $e3, $f7
13f59     06 FB E6 E6 
13f5d     FC 06 F9 E6 
13f61     E4 F8 05 00 
13f65     EE E2 EC FE | 	byte	$06, $fb, $e6, $e6, $fc, $06, $f9, $e6, $e4, $f8, $05, $00, $ee, $e2, $ec, $fe
13f69     06 FE EB E2 
13f6d     E9 FA 05 03 
13f71     F6 E7 E2 EA 
13f75     FA 04 05 FB | 	byte	$06, $fe, $eb, $e2, $e9, $fa, $05, $03, $f6, $e7, $e2, $ea, $fa, $04, $05, $fb
13f79     EE E4 E3 ED 
13f7d     FA 03 06 00 
13f81     F5 E9 E3 E3 
13f85     EC F6 00 05 | 	byte	$ee, $e4, $e3, $ed, $fa, $03, $06, $00, $f5, $e9, $e3, $e3, $ec, $f6, $00, $05
13f89     06 00 F6 EC 
13f8d     E5 E2 E5 EC 
13f91     F5 FE 03 06 
13f95     04 00 F8 F0 | 	byte	$06, $00, $f6, $ec, $e5, $e2, $e5, $ec, $f5, $fe, $03, $06, $04, $00, $f8, $f0
13f99     E9 E5 E3 E3 
13f9d     E7 EE F5 FC 
13fa1     01 04 06 04 
13fa5     01 FE F8 F1 | 	byte	$e9, $e5, $e3, $e3, $e7, $ee, $f5, $fc, $01, $04, $06, $04, $01, $fe, $f8, $f1
13fa9     EC E7 E4 E3 
13fad     E3 E5 E8 ED 
13fb1     F2 F7 FC 00 
13fb5     01 03 04 04 | 	byte	$ec, $e7, $e4, $e3, $e3, $e5, $e8, $ed, $f2, $f7, $fc, $00, $01, $03, $04, $04
13fb9     03 00 FE FB 
13fbd     F7 F3 F0 EC 
13fc1     E9 E7 E6 E5 
13fc5     E5 E6 E7 E9 | 	byte	$03, $00, $fe, $fb, $f7, $f3, $f0, $ec, $e9, $e7, $e6, $e5, $e5, $e6, $e7, $e9
13fc9     EB EE F1 F3 
13fcd     F7 F9 FC FF 
13fd1     00 00 01 02 
13fd5     02 02 01 00 | 	byte	$eb, $ee, $f1, $f3, $f7, $f9, $fc, $ff, $00, $00, $01, $02, $02, $02, $01, $00
13fd9     FF FF FD FB 
13fdd     F9 F8 F5 F3 
13fe1     F1 F0 EE EC 
13fe5     EB EA E9 E9 | 	byte	$ff, $ff, $fd, $fb, $f9, $f8, $f5, $f3, $f1, $f0, $ee, $ec, $eb, $ea, $e9, $e9
13fe9     E8 E8 E8 E9 
13fed     E9 E9 EB EC 
13ff1     EC EE EF F0 
13ff5     F1 F3 F4 F6 | 	byte	$e8, $e8, $e8, $e9, $e9, $e9, $eb, $ec, $ec, $ee, $ef, $f0, $f1, $f3, $f4, $f6
13ff9     F8 F8 FA FC 
13ffd     FD FE FF 00 
14001     00 00 01 01 
14005     01 01 00 00 | 	byte	$f8, $f8, $fa, $fc, $fd, $fe, $ff, $00, $00, $00, $01, $01, $01, $01, $00, $00
14009     00 FF FE FC 
1400d     FA F9 F7 F4 
14011     F2 F0 EE EC 
14015     E9 E8 E7 E6 | 	byte	$00, $ff, $fe, $fc, $fa, $f9, $f7, $f4, $f2, $f0, $ee, $ec, $e9, $e8, $e7, $e6
14019     E5 E4 E5 E6 
1401d     E7 E8 EB EE 
14021     F0 F3 F7 FA 
14025     FE 00 01 03 | 	byte	$e5, $e4, $e5, $e6, $e7, $e8, $eb, $ee, $f0, $f3, $f7, $fa, $fe, $00, $01, $03
14029     04 05 04 03 
1402d     00 FF FB F7 
14031     F2 EE E9 E7 
14035     E4 E3 E3 E4 | 	byte	$04, $05, $04, $03, $00, $ff, $fb, $f7, $f2, $ee, $e9, $e7, $e4, $e3, $e3, $e4
14039     E7 EC F0 F7 
1403d     FC 00 03 06 
14041     06 03 00 FC 
14045     F4 EE E8 E4 | 	byte	$e7, $ec, $f0, $f7, $fc, $00, $03, $06, $06, $03, $00, $fc, $f4, $ee, $e8, $e4
14049     E2 E3 E7 ED 
1404d     F5 FD 02 05 
14051     06 02 FD F4 
14055     EC E5 E2 E4 | 	byte	$e2, $e3, $e7, $ed, $f5, $fd, $02, $05, $06, $02, $fd, $f4, $ec, $e5, $e2, $e4
14059     EB F4 FD 03 
1405d     06 03 FC F1 
14061     E7 E2 E4 ED 
14065     F8 01 06 02 | 	byte	$eb, $f4, $fd, $03, $06, $03, $fc, $f1, $e7, $e2, $e4, $ed, $f8, $01, $06, $02
14069     F9 EC E3 E3 
1406d     ED FA 03 06 
14071     FD EF E4 E3 
14075     EF FF 06 01 | 	byte	$f9, $ec, $e3, $e3, $ed, $fa, $03, $06, $fd, $ef, $e4, $e3, $ef, $ff, $06, $01
14079     F2 E4 E4 F2 
1407d     01 05 FA E8 
14081     E3 EF 00 05 
14085     F7 E6 E5 F7 | 	byte	$f2, $e4, $e4, $f2, $01, $05, $fa, $e8, $e3, $ef, $00, $05, $f7, $e6, $e5, $f7
14089     05 FE EB E3 
1408d     F4 04 FF E9 
14091     E4 F9 06 F6 
14095     E4 EE 03 FF | 	byte	$05, $fe, $eb, $e3, $f4, $04, $ff, $e9, $e4, $f9, $06, $f6, $e4, $ee, $03, $ff
14099     E7 E9 01 01 
1409d     E8 E9 01 FF 
140a1     E5 EE 04 F7 
140a5     E3 FA 02 E9 | 	byte	$e7, $e9, $01, $01, $e8, $e9, $01, $ff, $e5, $ee, $04, $f7, $e3, $fa, $02, $e9
140a9     EC 04 F3 E5 
140ad     01 FB E3 FC 
140b1     FE E4 FA FF 
140b5     E4 FC FF E3 | 	byte	$ec, $04, $f3, $e5, $01, $fb, $e3, $fc, $fe, $e4, $fa, $ff, $e4, $fc, $ff, $e3
140b9     FF F8 E4 00 
140bd     F9 E4 00 FA 
140c1     E3 FC FF E5 
140c5     F5 04 EB E9 | 	byte	$ff, $f8, $e4, $00, $f9, $e4, $00, $fa, $e3, $fc, $ff, $e5, $f5, $04, $eb, $e9
140c9     03 F8 E3 F7 
140cd     04 EE E4 FE 
140d1     02 EA E6 FE 
140d5     03 EB E4 FB | 	byte	$03, $f8, $e3, $f7, $04, $ee, $e4, $fe, $02, $ea, $e6, $fe, $03, $eb, $e4, $fb
140d9     06 F3 E3 F0 
140dd     03 00 EA E3 
140e1     F7 04 FF EA 
140e5     E3 F3 03 02 | 	byte	$06, $f3, $e3, $f0, $03, $00, $ea, $e3, $f7, $04, $ff, $ea, $e3, $f3, $03, $02
140e9     F2 E3 E8 FA 
140ed     05 00 EF E3 
140f1     E7 F7 04 03 
140f5     F9 E9 E2 EA | 	byte	$f2, $e3, $e8, $fa, $05, $00, $ef, $e3, $e7, $f7, $04, $03, $f9, $e9, $e2, $ea
140f9     F9 03 05 FC 
140fd     EE E4 E3 ED 
14101     FA 03 06 00 
14105     F4 E8 E3 E5 | 	byte	$f9, $03, $05, $fc, $ee, $e4, $e3, $ed, $fa, $03, $06, $00, $f4, $e8, $e3, $e5
14109     ED F8 00 05 
1410d     04 FD F3 EA 
14111     E4 E3 E7 EF 
14115     F8 00 04 05 | 	byte	$ed, $f8, $00, $05, $04, $fd, $f3, $ea, $e4, $e3, $e7, $ef, $f8, $00, $04, $05
14119     02 FC F4 ED 
1411d     E7 E3 E3 E6 
14121     EC F3 FA 00 
14125     03 05 04 01 | 	byte	$02, $fc, $f4, $ed, $e7, $e3, $e3, $e6, $ec, $f3, $fa, $00, $03, $05, $04, $01
14129     FE F8 F2 EC 
1412d     E8 E5 E4 E4 
14131     E6 E9 EE F3 
14135     F8 FD 00 02 | 	byte	$fe, $f8, $f2, $ec, $e8, $e5, $e4, $e4, $e6, $e9, $ee, $f3, $f8, $fd, $00, $02
14139     03 04 03 01 
1413d     FF FC F8 F4 
14141     F0 ED EA E8 
14145     E6 E5 E5 E6 | 	byte	$03, $04, $03, $01, $ff, $fc, $f8, $f4, $f0, $ed, $ea, $e8, $e6, $e5, $e5, $e6
14149     E7 E9 EB EE 
1414d     F1 F4 F7 FA 
14151     FC FF 00 01 
14155     01 02 02 01 | 	byte	$e7, $e9, $eb, $ee, $f1, $f4, $f7, $fa, $fc, $ff, $00, $01, $01, $02, $02, $01
14159     00 00 FF FE 
1415d     FC F9 F8 F6 
14161     F3 F1 F0 EE 
14165     EC EB EA E9 | 	byte	$00, $00, $ff, $fe, $fc, $f9, $f8, $f6, $f3, $f1, $f0, $ee, $ec, $eb, $ea, $e9
14169     E9 E8 E8 E8 
1416d     E9 E9 EA EB 
14171     EC ED EF F0 
14175     F1 F2 F4 F5 | 	byte	$e9, $e8, $e8, $e8, $e9, $e9, $ea, $eb, $ec, $ed, $ef, $f0, $f1, $f2, $f4, $f5
14179     F7 F8 F9 FA 
1417d     FC FC FE FF 
14181     FF 00 00 00 
14185     00 00 00 00 | 	byte	$f7, $f8, $f9, $fa, $fc, $fc, $fe, $ff, $ff, $00, $00, $00, $00, $00, $00, $00
14189     00 FF FF FE 
1418d     FC FC FA F8 
14191     F7 F5 F3 F1 
14195     F0 ED EC EA | 	byte	$00, $ff, $ff, $fe, $fc, $fc, $fa, $f8, $f7, $f5, $f3, $f1, $f0, $ed, $ec, $ea
14199     E8 E7 E6 E6 
1419d     E6 E6 E6 E7 
141a1     E8 EA EC EF 
141a5     F1 F4 F7 FA | 	byte	$e8, $e7, $e6, $e6, $e6, $e6, $e6, $e7, $e8, $ea, $ec, $ef, $f1, $f4, $f7, $fa
141a9     FD 00 01 02 
141ad     03 04 04 03 
141b1     01 FF FD F9 
141b5     F6 F1 EE EB | 	byte	$fd, $00, $01, $02, $03, $04, $04, $03, $01, $ff, $fd, $f9, $f6, $f1, $ee, $eb
141b9     E7 E5 E3 E3 
141bd     E4 E7 EA EF 
141c1     F3 F9 FE 01 
141c5     04 05 05 02 | 	byte	$e7, $e5, $e3, $e3, $e4, $e7, $ea, $ef, $f3, $f9, $fe, $01, $04, $05, $05, $02
141c9     FF FB F5 EF 
141cd     E9 E5 E3 E3 
141d1     E6 EC F3 FA 
141d5     00 04 06 03 | 	byte	$ff, $fb, $f5, $ef, $e9, $e5, $e3, $e3, $e6, $ec, $f3, $fa, $00, $04, $06, $03
141d9     FF F8 F0 E8 
141dd     E4 E3 E6 ED 
141e1     F7 FF 04 06 
141e5     01 F9 F0 E7 | 	byte	$ff, $f8, $f0, $e8, $e4, $e3, $e6, $ed, $f7, $ff, $04, $06, $01, $f9, $f0, $e7
141e9     E3 E5 EE F9 
141ed     01 06 02 F8 
141f1     ED E5 E3 EB 
141f5     F8 02 05 FF | 	byte	$e3, $e5, $ee, $f9, $01, $06, $02, $f8, $ed, $e5, $e3, $eb, $f8, $02, $05, $ff
141f9     F2 E6 E3 EC 
141fd     FB 04 03 F8 
14201     E8 E3 EC FC 
14205     04 01 EF E4 | 	byte	$f2, $e6, $e3, $ec, $fb, $04, $03, $f8, $e8, $e3, $ec, $fc, $04, $01, $ef, $e4
14209     E8 F9 04 FF 
1420d     EE E3 EC FF 
14211     05 F7 E5 E7 
14215     FD 05 F7 E5 | 	byte	$e8, $f9, $04, $ff, $ee, $e3, $ec, $ff, $05, $f7, $e5, $e7, $fd, $05, $f7, $e5
14219     EA FF 03 F0 
1421d     E3 F5 04 F8 
14221     E4 EE 03 FD 
14225     E6 EE 03 FA | 	byte	$ea, $ff, $03, $f0, $e3, $f5, $04, $f8, $e4, $ee, $03, $fd, $e6, $ee, $03, $fa
14229     E4 F1 04 F3 
1422d     E3 FC 01 E8 
14231     EE 03 F2 E5 
14235     00 FB E4 FB | 	byte	$e4, $f1, $04, $f3, $e3, $fc, $01, $e8, $ee, $03, $f2, $e5, $00, $fb, $e4, $fb
14239     FF E4 F8 00 
1423d     E4 F8 01 E5 
14241     F9 01 E5 F7 
14245     02 E7 F1 04 | 	byte	$ff, $e4, $f8, $00, $e4, $f8, $01, $e5, $f9, $01, $e5, $f7, $02, $e7, $f1, $04
14249     EE E9 03 F7 
1424d     E3 F9 03 EA 
14251     E8 01 FD E5 
14255     ED 03 FB E5 | 	byte	$ee, $e9, $03, $f7, $e3, $f9, $03, $ea, $e8, $01, $fd, $e5, $ed, $03, $fb, $e5
14259     EE 03 FE E6 
1425d     E8 FF 03 EF 
14261     E3 F4 04 FE 
14265     E9 E5 F7 04 | 	byte	$ee, $03, $fe, $e6, $e8, $ff, $03, $ef, $e3, $f4, $04, $fe, $e9, $e5, $f7, $04
14269     FE EA E3 F2 
1426d     02 03 F3 E5 
14271     E6 F7 03 02 
14275     F4 E6 E5 F1 | 	byte	$fe, $ea, $e3, $f2, $02, $03, $f3, $e5, $e6, $f7, $03, $02, $f4, $e6, $e5, $f1
14279     00 05 FE EF 
1427d     E4 E5 F0 FE 
14281     05 02 F8 EA 
14285     E3 E5 F0 FC | 	byte	$00, $05, $fe, $ef, $e4, $e5, $f0, $fe, $05, $02, $f8, $ea, $e3, $e5, $f0, $fc
14289     03 04 FF F4 
1428d     E9 E4 E4 EB 
14291     F6 FF 04 04 
14295     00 F8 EE E7 | 	byte	$03, $04, $ff, $f4, $e9, $e4, $e4, $eb, $f6, $ff, $04, $04, $00, $f8, $ee, $e7
14299     E3 E4 EA F2 
1429d     FB 00 04 04 
142a1     02 FD F5 EE 
142a5     E8 E4 E3 E5 | 	byte	$e3, $e4, $ea, $f2, $fb, $00, $04, $04, $02, $fd, $f5, $ee, $e8, $e4, $e3, $e5
142a9     E9 F0 F6 FC 
142ad     00 03 04 03 
142b1     00 FE F9 F4 
142b5     EF EA E7 E5 | 	byte	$e9, $f0, $f6, $fc, $00, $03, $04, $03, $00, $fe, $f9, $f4, $ef, $ea, $e7, $e5
142b9     E4 E5 E7 EB 
142bd     EF F3 F8 FC 
142c1     FF 01 03 03 
142c5     03 02 00 FF | 	byte	$e4, $e5, $e7, $eb, $ef, $f3, $f8, $fc, $ff, $01, $03, $03, $03, $02, $00, $ff
142c9     FC F8 F5 F2 
142cd     EF EC EA E8 
142d1     E7 E6 E6 E7 
142d5     E8 E9 EB ED | 	byte	$fc, $f8, $f5, $f2, $ef, $ec, $ea, $e8, $e7, $e6, $e6, $e7, $e8, $e9, $eb, $ed
142d9     F0 F1 F4 F7 
142dd     F9 FB FD FF 
142e1     00 00 00 00 
142e5     00 00 00 00 | 	byte	$f0, $f1, $f4, $f7, $f9, $fb, $fd, $ff, $00, $00, $00, $00, $00, $00, $00, $00
142e9     FF FE FC FB 
142ed     F9 F8 F6 F4 
142f1     F3 F1 F0 EF 
142f5     EE EC EC EB | 	byte	$ff, $fe, $fc, $fb, $f9, $f8, $f6, $f4, $f3, $f1, $f0, $ef, $ee, $ec, $ec, $eb
142f9     EA EA EA EA 
142fd     EA EA EA    | 	byte	$ea[7]
14300     EB EC EC ED 
14304     EE EF F0 F1 
14308     F2 F3 F4 F6 
1430c     F8 F8 FA FB | 	byte	$eb, $ec, $ec, $ed, $ee, $ef, $f0, $f1, $f2, $f3, $f4, $f6, $f8, $f8, $fa, $fb
14310     FC FE FF 00 
14314     00 00 00 00 
14318     00 00 00 00 
1431c     FF FF FE FC | 	byte	$fc, $fe, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $fe, $fc
14320     FA F8 F6 F4 
14324     F1 F0 EE EC 
14328     E9 E8 E7 E6 
1432c     E5 E5 E6 E7 | 	byte	$fa, $f8, $f6, $f4, $f1, $f0, $ee, $ec, $e9, $e8, $e7, $e6, $e5, $e5, $e6, $e7
14330     E8 E9 EC EF 
14334     F2 F6 F9 FC 
14338     FF 00 02 03 
1433c     04 03 02 00 | 	byte	$e8, $e9, $ec, $ef, $f2, $f6, $f9, $fc, $ff, $00, $02, $03, $04, $03, $02, $00
14340     FF FB F7 F3 
14344     EE EA E7 E5 
14348     E3 E4 E6 E9 
1434c     EC F1 F7 FD | 	byte	$ff, $fb, $f7, $f3, $ee, $ea, $e7, $e5, $e3, $e4, $e6, $e9, $ec, $f1, $f7, $fd
14350     00 03 04 04 
14354     01 FF F8 F2 
14358     EC E7 E4 E3 
1435c     E6 EB F2 F9 | 	byte	$00, $03, $04, $04, $01, $ff, $f8, $f2, $ec, $e7, $e4, $e3, $e6, $eb, $f2, $f9
14360     FF 03 05 03 
14364     FF F7 EE E7 
14368     E3 E4 E9 F1 
1436c     FB 01 05 03 | 	byte	$ff, $03, $05, $03, $ff, $f7, $ee, $e7, $e3, $e4, $e9, $f1, $fb, $01, $05, $03
14370     FC F2 E8 E4 
14374     E4 EC F7 00 
14378     05 02 F9 EC 
1437c     E4 E4 ED FB | 	byte	$fc, $f2, $e8, $e4, $e4, $ec, $f7, $00, $05, $02, $f9, $ec, $e4, $e4, $ed, $fb
14380     03 04 FC EE 
14384     E4 E6 F1 FF 
14388     05 FF F1 E5 
1438c     E6 F5 02 03 | 	byte	$03, $04, $fc, $ee, $e4, $e6, $f1, $ff, $05, $ff, $f1, $e5, $e6, $f5, $02, $03
14390     F7 E8 E4 F2 
14394     01 03 F4 E5 
14398     E7 FA 04 FC 
1439c     E8 E5 F7 04 | 	byte	$f7, $e8, $e4, $f2, $01, $03, $f4, $e5, $e7, $fa, $04, $fc, $e8, $e5, $f7, $04
143a0     FB E7 E8 FC 
143a4     04 F3 E4 F2 
143a8     03 FC E6 EC 
143ac     03 FE E7 EC | 	byte	$fb, $e7, $e8, $fc, $04, $f3, $e4, $f2, $03, $fc, $e6, $ec, $03, $fe, $e7, $ec
143b0     02 FC E5 F0 
143b4     03 F5 E4 FB 
143b8     02 E8 ED 03 
143bc     F3 E6 FF FC | 	byte	$02, $fc, $e5, $f0, $03, $f5, $e4, $fb, $02, $e8, $ed, $03, $f3, $e6, $ff, $fc
143c0     E5 FA 01 E5 
143c4     F7 01 E7 F6 
143c8     02 E8 F1 04 
143cc     EC EA 03 F7 | 	byte	$e5, $fa, $01, $e5, $f7, $01, $e7, $f6, $02, $e8, $f1, $04, $ec, $ea, $03, $f7
143d0     E4 FB 01 E9 
143d4     EB 02 F9 E5 
143d8     F4 04 F4 E4 
143dc     F6 04 F4 E4 | 	byte	$e4, $fb, $01, $e9, $eb, $02, $f9, $e5, $f4, $04, $f4, $e4, $f6, $04, $f4, $e4
143e0     F2 04 FA E6 
143e4     EA FF 02 F1 
143e8     E4 F0 02 01 
143ec     EE E3 EF 01 | 	byte	$f2, $04, $fa, $e6, $ea, $ff, $02, $f1, $e4, $f0, $02, $01, $ee, $e3, $ef, $01
143f0     03 F3 E5 E8 
143f4     F9 04 00 F0 
143f8     E4 E9 F8 03 
143fc     02 F5 E7 E3 | 	byte	$03, $f3, $e5, $e8, $f9, $04, $00, $f0, $e4, $e9, $f8, $03, $02, $f5, $e7, $e3
14400     ED FC 04 01 
14404     F7 EA E3 E7 
14408     F4 00 04 01 
1440c     F8 ED E5 E4 | 	byte	$ed, $fc, $04, $01, $f7, $ea, $e3, $e7, $f4, $00, $04, $01, $f8, $ed, $e5, $e4
14410     EC F7 00 04 
14414     03 FC F1 E9 
14418     E4 E4 EA F3 
1441c     FC 02 04 02 | 	byte	$ec, $f7, $00, $04, $03, $fc, $f1, $e9, $e4, $e4, $ea, $f3, $fc, $02, $04, $02
14420     FE F7 EE E8 
14424     E4 E4 E7 EE 
14428     F5 FC 00 03 
1442c     04 01 FE F8 | 	byte	$fe, $f7, $ee, $e8, $e4, $e4, $e7, $ee, $f5, $fc, $00, $03, $04, $01, $fe, $f8
14430     F2 EC E8 E5 
14434     E4 E5 E7 EC 
14438     F1 F7 FC 00 
1443c     01 03 03 02 | 	byte	$f2, $ec, $e8, $e5, $e4, $e5, $e7, $ec, $f1, $f7, $fc, $00, $01, $03, $03, $02
14440     00 FE F9 F5 
14444     F1 ED EA E8 
14448     E6 E6 E6 E7 
1444c     E8 EB EE F1 | 	byte	$00, $fe, $f9, $f5, $f1, $ed, $ea, $e8, $e6, $e6, $e6, $e7, $e8, $eb, $ee, $f1
14450     F5 F8 FB FE 
14454     00 00 01 01 
14458     01 01 00 00 
1445c     FE FC F9 F8 | 	byte	$f5, $f8, $fb, $fe, $00, $00, $01, $01, $01, $01, $00, $00, $fe, $fc, $f9, $f8
14460     F5 F3 F0 EF 
14464     EC EB EA E9 
14468     E8 E8 E8 E8 
1446c     E9 E9 EB EC | 	byte	$f5, $f3, $f0, $ef, $ec, $eb, $ea, $e9, $e8, $e8, $e8, $e8, $e9, $e9, $eb, $ec
14470     ED EF F0 F1 
14474     F3 F5 F7 F8 
14478     F9 FB FC FD 
1447c     FE FF FF FF | 	byte	$ed, $ef, $f0, $f1, $f3, $f5, $f7, $f8, $f9, $fb, $fc, $fd, $fe, $ff, $ff, $ff
14480     00 FF 00 FF 
14484     FF FF FE FE 
14488     FD FC FC FA 
1448c     F9 F8 F8 F6 | 	byte	$00, $ff, $00, $ff, $ff, $ff, $fe, $fe, $fd, $fc, $fc, $fa, $f9, $f8, $f8, $f6
14490     F5 F4 F2 F1 
14494     F0 F0 EE ED 
14498     EC EB EA E9 
1449c     E9 E8 E8 E8 | 	byte	$f5, $f4, $f2, $f1, $f0, $f0, $ee, $ed, $ec, $eb, $ea, $e9, $e9, $e8, $e8, $e8
144a0     E9 E9 EA EB 
144a4     EC EE EF F0 
144a8     F2 F4 F6 F8 
144ac     FB FC FF FF | 	byte	$e9, $e9, $ea, $eb, $ec, $ee, $ef, $f0, $f2, $f4, $f6, $f8, $fb, $fc, $ff, $ff
144b0     00 01 02 03 
144b4     02 02 01 00 
144b8     FF FC FA F8 
144bc     F4 F1 EE EC | 	byte	$00, $01, $02, $03, $02, $02, $01, $00, $ff, $fc, $fa, $f8, $f4, $f1, $ee, $ec
144c0     E9 E7 E6 E5 
144c4     E5 E6 E7 EA 
144c8     EE F1 F6 F9 
144cc     FE 00 02 03 | 	byte	$e9, $e7, $e6, $e5, $e5, $e6, $e7, $ea, $ee, $f1, $f6, $f9, $fe, $00, $02, $03
144d0     04 03 00 FF 
144d4     FA F4 F0 EB 
144d8     E7 E4 E4 E5 
144dc     E8 EE F3 FA | 	byte	$04, $03, $00, $ff, $fa, $f4, $f0, $eb, $e7, $e4, $e4, $e5, $e8, $ee, $f3, $fa
144e0     FF 03 04 04 
144e4     01 FC F5 EE 
144e8     E8 E4 E4 E7 
144ec     ED F5 FD 02 | 	byte	$ff, $03, $04, $04, $01, $fc, $f5, $ee, $e8, $e4, $e4, $e7, $ed, $f5, $fd, $02
144f0     04 02 FE F5 
144f4     EC E6 E3 E6 
144f8     EF F9 00 04 
144fc     02 FB EF E7 | 	byte	$04, $02, $fe, $f5, $ec, $e6, $e3, $e6, $ef, $f9, $00, $04, $02, $fb, $ef, $e7
14500     E3 E7 F2 FF 
14504     04 02 F9 ED 
14508     E5 E5 EF FD 
1450c     03 01 F6 E9 | 	byte	$e3, $e7, $f2, $ff, $04, $02, $f9, $ed, $e5, $e5, $ef, $fd, $03, $01, $f6, $e9
14510     E3 EB FA 03 
14514     01 F4 E6 E5 
14518     F3 01 03 F6 
1451c     E7 E5 F5 02 | 	byte	$e3, $eb, $fa, $03, $01, $f4, $e6, $e5, $f3, $01, $03, $f6, $e7, $e5, $f5, $02
14520     01 EF E4 ED 
14524     00 03 F3 E4 
14528     ED 00 01 F0 
1452c     E4 F4 03 FA | 	byte	$01, $ef, $e4, $ed, $00, $03, $f3, $e4, $ed, $00, $01, $f0, $e4, $f4, $03, $fa
14530     E6 EC 00 FF 
14534     EA E9 FF FF 
14538     E9 EA 00 FD 
1453c     E6 F0 03 F4 | 	byte	$e6, $ec, $00, $ff, $ea, $e9, $ff, $ff, $e9, $ea, $00, $fd, $e6, $f0, $03, $f4
14540     E5 FC 01 E8 
14544     EF 03 F1 E8 
14548     01 F7 E5 FE 
1454c     FC E5 FA FF | 	byte	$e5, $fc, $01, $e8, $ef, $03, $f1, $e8, $01, $f7, $e5, $fe, $fc, $e5, $fa, $ff
14550     E7 F3 03 ED 
14554     E9 02 FA E5 
14558     F6 03 EF E6 
1455c     FD 01 EA E8 | 	byte	$e7, $f3, $03, $ed, $e9, $02, $fa, $e5, $f6, $03, $ef, $e6, $fd, $01, $ea, $e8
14560     FF 00 EA E7 
14564     FD 02 F0 E4 
14568     F6 03 F9 E7 
1456c     E9 FE 04 F5 | 	byte	$ff, $00, $ea, $e7, $fd, $02, $f0, $e4, $f6, $03, $f9, $e7, $e9, $fe, $04, $f5
14570     E5 EA FD 04 
14574     F7 E7 E6 F6 
14578     03 00 F0 E4 
1457c     E7 F8 02 01 | 	byte	$e5, $ea, $fd, $04, $f7, $e7, $e6, $f6, $03, $00, $f0, $e4, $e7, $f8, $02, $01
14580     F4 E7 E5 F0 
14584     FE 04 00 F2 
14588     E7 E4 EC FA 
1458c     03 03 FC F0 | 	byte	$f4, $e7, $e5, $f0, $fe, $04, $00, $f2, $e7, $e4, $ec, $fa, $03, $03, $fc, $f0
14590     E7 E4 EA F5 
14594     FF 03 02 FB 
14598     F1 E8 E4 E6 
1459c     ED F7 FF 03 | 	byte	$e7, $e4, $ea, $f5, $ff, $03, $02, $fb, $f1, $e8, $e4, $e6, $ed, $f7, $ff, $03
145a0     03 00 F8 F1 
145a4     E9 E5 E4 E8 
145a8     EF F7 FE 01 
145ac     03 03 00 FA | 	byte	$03, $00, $f8, $f1, $e9, $e5, $e4, $e8, $ef, $f7, $fe, $01, $03, $03, $00, $fa
145b0     F4 EE E8 E5 
145b4     E4 E6 E9 EE 
145b8     F4 FA FF 01 
145bc     03 03 01 FF | 	byte	$f4, $ee, $e8, $e5, $e4, $e6, $e9, $ee, $f4, $fa, $ff, $01, $03, $03, $01, $ff
145c0     FC F8 F3 EE 
145c4     EB E8 E6 E5 
145c8     E6 E7 E9 ED 
145cc     F0 F4 F8 FB | 	byte	$fc, $f8, $f3, $ee, $eb, $e8, $e6, $e5, $e6, $e7, $e9, $ed, $f0, $f4, $f8, $fb
145d0     FE 00 01 01 
145d4     01 01 00 FF 
145d8     FD FA F8 F5 
145dc     F2 F0 EE EC | 	byte	$fe, $00, $01, $01, $01, $01, $00, $ff, $fd, $fa, $f8, $f5, $f2, $f0, $ee, $ec
145e0     EA E9 E8 E7 
145e4     E7 E8 E9 EA 
145e8     EC ED EF F1 
145ec     F3 F5 F7 F8 | 	byte	$ea, $e9, $e8, $e7, $e7, $e8, $e9, $ea, $ec, $ed, $ef, $f1, $f3, $f5, $f7, $f8
145f0     FA FC FD FE 
145f4     FF FF 00 00 
145f8     FF FF FF FF 
145fc     FF FE FC FC | 	byte	$fa, $fc, $fd, $fe, $ff, $ff, $00, $00, $ff, $ff, $ff, $ff, $ff, $fe, $fc, $fc
14600     FA F9 F8 F7 
14604     F6 F4 F3 F2 
14608     F1 F0 F0 EE 
1460c     EE ED EC EC | 	byte	$fa, $f9, $f8, $f7, $f6, $f4, $f3, $f2, $f1, $f0, $f0, $ee, $ee, $ed, $ec, $ec
14610     EC EB EB EB 
14614     EB EB EB EC 
14618     EC EC ED EE 
1461c     EF F0 F0 F1 | 	byte	$ec, $eb, $eb, $eb, $eb, $eb, $eb, $ec, $ec, $ec, $ed, $ee, $ef, $f0, $f0, $f1
14620     F3 F4 F6 F7 
14624     F8 FA FB FC 
14628     FE FF FF 00 
1462c     00 00 00 00 | 	byte	$f3, $f4, $f6, $f7, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $00, $00, $00, $00, $00
14630     00 00 00 FF 
14634     FD FC FA F8 
14638     F6 F3 F1 EF 
1463c     EC EB E9 E7 | 	byte	$00, $00, $00, $ff, $fd, $fc, $fa, $f8, $f6, $f3, $f1, $ef, $ec, $eb, $e9, $e7
14640     E7 E6 E6 E6 
14644     E7 E8 EB ED 
14648     F0 F3 F7 FB 
1464c     FE 00 01 03 | 	byte	$e7, $e6, $e6, $e6, $e7, $e8, $eb, $ed, $f0, $f3, $f7, $fb, $fe, $00, $01, $03
14650     03 03 01 00 
14654     FE F9 F5 F1 
14658     ED E9 E6 E4 
1465c     E4 E6 E8 ED | 	byte	$03, $03, $01, $00, $fe, $f9, $f5, $f1, $ed, $e9, $e6, $e4, $e4, $e6, $e8, $ed
14660     F1 F8 FD 00 
14664     02 03 03 00 
14668     FC F6 F0 EA 
1466c     E6 E4 E5 E9 | 	byte	$f1, $f8, $fd, $00, $02, $03, $03, $00, $fc, $f6, $f0, $ea, $e6, $e4, $e5, $e9
14670     EF F7 FE 01 
14674     04 02 FE F8 
14678     EF E8 E4 E5 
1467c     EA F3 FC 01 | 	byte	$ef, $f7, $fe, $01, $04, $02, $fe, $f8, $ef, $e8, $e4, $e5, $ea, $f3, $fc, $01
14680     04 01 FA F0 
14684     E7 E4 E7 F1 
14688     FC 03 03 FE 
1468c     F3 E8 E4 E9 | 	byte	$04, $01, $fa, $f0, $e7, $e4, $e7, $f1, $fc, $03, $03, $fe, $f3, $e8, $e4, $e9
14690     F5 00 04 FF 
14694     F3 E7 E4 EE 
14698     FB 03 00 F4 
1469c     E7 E6 F0 FF | 	byte	$f5, $00, $04, $ff, $f3, $e7, $e4, $ee, $fb, $03, $00, $f4, $e7, $e6, $f0, $ff
146a0     03 F9 EA E4 
146a4     EF 00 03 F6 
146a8     E7 E7 F8 03 
146ac     FC EA E5 F6 | 	byte	$03, $f9, $ea, $e4, $ef, $00, $03, $f6, $e7, $e7, $f8, $03, $fc, $ea, $e5, $f6
146b0     03 FD E9 E6 
146b4     FA 03 F5 E5 
146b8     EF 02 FC E8 
146bc     EA 00 FF E9 | 	byte	$03, $fd, $e9, $e6, $fa, $03, $f5, $e5, $ef, $02, $fc, $e8, $ea, $00, $ff, $e9
146c0     EA 00 FE E7 
146c4     EE 02 F9 E6 
146c8     F6 02 EC E9 
146cc     01 F8 E5 FA | 	byte	$ea, $00, $fe, $e7, $ee, $02, $f9, $e6, $f6, $02, $ec, $e9, $01, $f8, $e5, $fa
146d0     FF E7 F2 02 
146d4     EC EC 03 F3 
146d8     E5 FD FF E7 
146dc     EF 02 F5 E5 | 	byte	$ff, $e7, $f2, $02, $ec, $ec, $03, $f3, $e5, $fd, $ff, $e7, $ef, $02, $f5, $e5
146e0     F7 02 EF E5 
146e4     FA 03 F0 E5 
146e8     F8 03 F3 E5 
146ec     F1 02 FD E9 | 	byte	$f7, $02, $ef, $e5, $fa, $03, $f0, $e5, $f8, $03, $f3, $e5, $f1, $02, $fd, $e9
146f0     E6 FA 03 F8 
146f4     E7 E8 FA 03 
146f8     FB E9 E6 F4 
146fc     02 00 F1 E6 | 	byte	$e6, $fa, $03, $f8, $e7, $e8, $fa, $03, $fb, $e9, $e6, $f4, $02, $00, $f1, $e6
14700     E8 F7 02 01 
14704     F4 E7 E5 F1 
14708     FE 03 FE F1 
1470c     E6 E5 EF FC | 	byte	$e8, $f7, $02, $01, $f4, $e7, $e5, $f1, $fe, $03, $fe, $f1, $e6, $e5, $ef, $fc
14710     03 01 FA ED 
14714     E6 E5 ED F8 
14718     00 03 00 F7 
1471c     EE E6 E4 E9 | 	byte	$03, $01, $fa, $ed, $e6, $e5, $ed, $f8, $00, $03, $00, $f7, $ee, $e6, $e4, $e9
14720     F2 FC 01 03 
14724     00 FC F3 EB 
14728     E6 E4 E7 EE 
1472c     F6 FD 01 03 | 	byte	$f2, $fc, $01, $03, $00, $fc, $f3, $eb, $e6, $e4, $e7, $ee, $f6, $fd, $01, $03
14730     02 FF F9 F3 
14734     EC E8 E5 E5 
14738     E7 EB F0 F7 
1473c     FC 00 02 03 | 	byte	$02, $ff, $f9, $f3, $ec, $e8, $e5, $e5, $e7, $eb, $f0, $f7, $fc, $00, $02, $03
14740     02 00 FD F8 
14744     F3 EF EB E8 
14748     E6 E6 E7 E8 
1474c     EB EE F2 F6 | 	byte	$02, $00, $fd, $f8, $f3, $ef, $eb, $e8, $e6, $e6, $e7, $e8, $eb, $ee, $f2, $f6
14750     F9 FD FF 00 
14754     01 01 01 00 
14758     FF FC FA F7 
1475c     F4 F1 EF ED | 	byte	$f9, $fd, $ff, $00, $01, $01, $01, $00, $ff, $fc, $fa, $f7, $f4, $f1, $ef, $ed
14760     EB E9 E8 E7 
14764     E7 E8 E8 E9 
14768     EC ED EF F1 
1476c     F3 F5 F8 F9 | 	byte	$eb, $e9, $e8, $e7, $e7, $e8, $e8, $e9, $ec, $ed, $ef, $f1, $f3, $f5, $f8, $f9
14770     FB FD FE FF 
14774     00 FF FF 00 
14778     00 00 FF FE 
1477c     FD FC FB F9 | 	byte	$fb, $fd, $fe, $ff, $00, $ff, $ff, $00, $00, $00, $ff, $fe, $fd, $fc, $fb, $f9
14780     F8 F7 F6 F4 
14784     F3 F1 F1 F0 
14788     EF EE ED EC 
1478c     EC EC EC EB | 	byte	$f8, $f7, $f6, $f4, $f3, $f1, $f1, $f0, $ef, $ee, $ed, $ec, $ec, $ec, $ec, $eb
14790     EC EC EC EC 
14794     EC          | 	byte	$ec[5]
14795     ED ED EE EE 
14799     EF F0 F0 F1 
1479d     F2 F3 F4 F5 
147a1     F6 F8 F8 F9 | 	byte	$ed, $ed, $ee, $ee, $ef, $f0, $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f8, $f8, $f9
147a5     FB FC FD FE 
147a9     FF FF FF FF 
147ad     00 FF FF 00 
147b1     FF FF FE FD | 	byte	$fb, $fc, $fd, $fe, $ff, $ff, $ff, $ff, $00, $ff, $ff, $00, $ff, $ff, $fe, $fd
147b5     FC FB F9 F8 
147b9     F6 F4 F1 F0 
147bd     EE EC EB E9 
147c1     E8 E7 E7 E7 | 	byte	$fc, $fb, $f9, $f8, $f6, $f4, $f1, $f0, $ee, $ec, $eb, $e9, $e8, $e7, $e7, $e7
147c5     E7 E7 E8 EA 
147c9     EC EF F1 F4 
147cd     F7 FA FD FF 
147d1     00 01 02 02 | 	byte	$e7, $e7, $e8, $ea, $ec, $ef, $f1, $f4, $f7, $fa, $fd, $ff, $00, $01, $02, $02
147d5     02 00 00 FD 
147d9     F9 F6 F1 EE 
147dd     EA E7 E6 E5 
147e1     E6 E7 EA EF | 	byte	$02, $00, $00, $fd, $f9, $f6, $f1, $ee, $ea, $e7, $e6, $e5, $e6, $e7, $ea, $ef
147e5     F3 F7 FC 00 
147e9     02 03 03 00 
147ed     FD F8 F2 EC 
147f1     E8 E5 E5 E7 | 	byte	$f3, $f7, $fc, $00, $02, $03, $03, $00, $fd, $f8, $f2, $ec, $e8, $e5, $e5, $e7
147f5     EC F2 F9 FF 
147f9     02 03 02 FE 
147fd     F7 EF E8 E5 
14801     E5 EA F1 FA | 	byte	$ec, $f2, $f9, $ff, $02, $03, $02, $fe, $f7, $ef, $e8, $e5, $e5, $ea, $f1, $fa
14805     00 03 01 FC 
14809     F3 EA E5 E6 
1480d     EB F6 FF 03 
14811     01 F9 EF E7 | 	byte	$00, $03, $01, $fc, $f3, $ea, $e5, $e6, $eb, $f6, $ff, $03, $01, $f9, $ef, $e7
14815     E5 ED F8 01 
14819     03 FD F0 E6 
1481d     E6 EF FD 03 
14821     00 F3 E8 E5 | 	byte	$e5, $ed, $f8, $01, $03, $fd, $f0, $e6, $e6, $ef, $fd, $03, $00, $f3, $e8, $e5
14825     F1 FF 03 FB 
14829     EB E4 EE FD 
1482d     03 FA E9 E6 
14831     F3 01 00 F0 | 	byte	$f1, $ff, $03, $fb, $eb, $e4, $ee, $fd, $03, $fa, $e9, $e6, $f3, $01, $00, $f0
14835     E5 EF 00 01 
14839     EF E5 F2 02 
1483d     FD E9 E8 FC 
14841     02 F1 E5 F6 | 	byte	$e5, $ef, $00, $01, $ef, $e5, $f2, $02, $fd, $e9, $e8, $fc, $02, $f1, $e5, $f6
14845     03 F4 E6 F4 
14849     02 F4 E5 F7 
1484d     02 EE E8 FE 
14851     FE E8 F1 03 | 	byte	$03, $f4, $e6, $f4, $02, $f4, $e5, $f7, $02, $ee, $e8, $fe, $fe, $e8, $f1, $03
14855     F0 E7 FF FA 
14859     E6 F8 01 E9 
1485d     EE 02 F4 E5 
14861     FA 01 EB E9 | 	byte	$f0, $e7, $ff, $fa, $e6, $f8, $01, $e9, $ee, $02, $f4, $e5, $fa, $01, $eb, $e9
14865     FF FE E8 EC 
14869     00 FE E8 EB 
1486d     FF 01 ED E6 
14871     F9 03 F6 E6 | 	byte	$ff, $fe, $e8, $ec, $00, $fe, $e8, $eb, $ff, $01, $ed, $e6, $f9, $03, $f6, $e6
14875     ED FF 01 F1 
14879     E5 EE FF 01 
1487d     F4 E6 E9 FB 
14881     03 FD ED E5 | 	byte	$ed, $ff, $01, $f1, $e5, $ee, $ff, $01, $f4, $e6, $e9, $fb, $03, $fd, $ed, $e5
14885     ED FD 03 FD 
14889     EF E6 E8 F6 
1488d     01 02 F9 EC 
14891     E5 E8 F4 FE | 	byte	$ed, $fd, $03, $fd, $ef, $e6, $e8, $f6, $01, $02, $f9, $ec, $e5, $e8, $f4, $fe
14895     03 00 F5 EA 
14899     E5 E8 F2 FD 
1489d     02 02 FC F2 
148a1     E9 E5 E7 EE | 	byte	$03, $00, $f5, $ea, $e5, $e8, $f2, $fd, $02, $02, $fc, $f2, $e9, $e5, $e7, $ee
148a5     F7 FF 03 02 
148a9     FF F7 EF E8 
148ad     E5 E6 EB F2 
148b1     F9 00 02 02 | 	byte	$f7, $ff, $03, $02, $ff, $f7, $ef, $e8, $e5, $e6, $eb, $f2, $f9, $00, $02, $02
148b5     00 FC F5 EF 
148b9     E9 E6 E5 E7 
148bd     EA EF F5 FB 
148c1     FF 01 02 01 | 	byte	$00, $fc, $f5, $ef, $e9, $e6, $e5, $e7, $ea, $ef, $f5, $fb, $ff, $01, $02, $01
148c5     00 FD F9 F4 
148c9     F0 EC E8 E7 
148cd     E6 E7 E8 EB 
148d1     EE F2 F6 F9 | 	byte	$00, $fd, $f9, $f4, $f0, $ec, $e8, $e7, $e6, $e7, $e8, $eb, $ee, $f2, $f6, $f9
148d5     FD FF 00 01 
148d9     01 00 00 FF 
148dd     FC F9 F7 F3 
148e1     F1 EF EC EB | 	byte	$fd, $ff, $00, $01, $01, $00, $00, $ff, $fc, $f9, $f7, $f3, $f1, $ef, $ec, $eb
148e5     E9 E8 E7 E8 
148e9     E8 E9 EB EC 
148ed     EE F0 F2 F4 
148f1     F6 F8 FA FC | 	byte	$e9, $e8, $e7, $e8, $e8, $e9, $eb, $ec, $ee, $f0, $f2, $f4, $f6, $f8, $fa, $fc
148f5     FD FE FF FF 
148f9     00 FF 00 FF 
148fd     FF FE FE FC 
14901     FB FA F8 F8 | 	byte	$fd, $fe, $ff, $ff, $00, $ff, $00, $ff, $ff, $fe, $fe, $fc, $fb, $fa, $f8, $f8
14905     F6 F4 F3 F2 
14909     F1 F0 EF EE 
1490d     EE ED EC EC 
14911     EC EC EC EC | 	byte	$f6, $f4, $f3, $f2, $f1, $f0, $ef, $ee, $ee, $ed, $ec, $ec, $ec, $ec, $ec, $ec
14915     EC EC EC ED 
14919     EE EE EF F0 
1491d     F0 F0 F1 F2 
14921     F3 F4 F5 F6 | 	byte	$ec, $ec, $ec, $ed, $ee, $ee, $ef, $f0, $f0, $f0, $f1, $f2, $f3, $f4, $f5, $f6
14925     F7 F8 F8 F9 
14929     FB FC FC FD 
1492d     FE FF FF FF 
14931     FF FF FF FF | 	byte	$f7, $f8, $f8, $f9, $fb, $fc, $fc, $fd, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff
14935     FF FF FE FD 
14939     FC FB F9 F8 
1493d     F7 F5 F3 F1 
14941     F0 EF ED EC | 	byte	$ff, $ff, $fe, $fd, $fc, $fb, $f9, $f8, $f7, $f5, $f3, $f1, $f0, $ef, $ed, $ec
14945     EA E9 E8 E7 
14949     E7 E7 E7 E8 
1494d     E9 EB ED F0 
14951     F2 F4 F8 FA | 	byte	$ea, $e9, $e8, $e7, $e7, $e7, $e7, $e8, $e9, $eb, $ed, $f0, $f2, $f4, $f8, $fa
14955     FC FF 00 01 
14959     01 02 01 00 
1495d     FF FD FA F7 
14961     F3 F0 EC E9 | 	byte	$fc, $ff, $00, $01, $01, $02, $01, $00, $ff, $fd, $fa, $f7, $f3, $f0, $ec, $e9
14965     E7 E6 E6 E7 
14969     E8 EC F0 F4 
1496d     F8 FD 00 02 
14971     03 01 00 FC | 	byte	$e7, $e6, $e6, $e7, $e8, $ec, $f0, $f4, $f8, $fd, $00, $02, $03, $01, $00, $fc
14975     F7 F1 EC E8 
14979     E5 E5 E7 EB 
1497d     F1 F8 FE 01 
14981     03 01 FF F8 | 	byte	$f7, $f1, $ec, $e8, $e5, $e5, $e7, $eb, $f1, $f8, $fe, $01, $03, $01, $ff, $f8
14985     F0 EA E6 E5 
14989     E9 F0 F8 FF 
1498d     03 02 FF F6 
14991     ED E7 E5 E9 | 	byte	$f0, $ea, $e6, $e5, $e9, $f0, $f8, $ff, $03, $02, $ff, $f6, $ed, $e7, $e5, $e9
14995     F2 FC 01 02 
14999     FE F3 E9 E5 
1499d     E8 F2 FE 03 
149a1     00 F6 EC E5 | 	byte	$f2, $fc, $01, $02, $fe, $f3, $e9, $e5, $e8, $f2, $fe, $03, $00, $f6, $ec, $e5
149a5     E8 F5 FF 03 
149a9     FB EE E6 E9 
149ad     F6 01 01 F6 
149b1     E8 E6 F3 00 | 	byte	$e8, $f5, $ff, $03, $fb, $ee, $e6, $e9, $f6, $01, $01, $f6, $e8, $e6, $f3, $00
149b5     01 F5 E8 E8 
149b9     F8 02 FD EC 
149bd     E6 F4 01 FE 
149c1     EC E6 F6 02 | 	byte	$01, $f5, $e8, $e8, $f8, $02, $fd, $ec, $e6, $f4, $01, $fe, $ec, $e6, $f6, $02
149c5     FA E8 EA FE 
149c9     01 EF E6 F8 
149cd     02 F3 E6 F6 
149d1     02 F3 E6 F8 | 	byte	$fa, $e8, $ea, $fe, $01, $ef, $e6, $f8, $02, $f3, $e6, $f6, $02, $f3, $e6, $f8
149d5     02 EF E8 FE 
149d9     FE E8 F0 02 
149dd     F2 E6 FE FC 
149e1     E7 F4 02 F0 | 	byte	$02, $ef, $e8, $fe, $fe, $e8, $f0, $02, $f2, $e6, $fe, $fc, $e7, $f4, $02, $f0
149e5     E8 FD FF E9 
149e9     ED 00 FB E7 
149ed     EF 01 FA E8 
149f1     ED FF FE EA | 	byte	$e8, $fd, $ff, $e9, $ed, $00, $fb, $e7, $ef, $01, $fa, $e8, $ed, $ff, $fe, $ea
149f5     E8 FA 02 F4 
149f9     E6 EE FF 00 
149fd     F1 E6 EF FF 
14a01     01 F3 E7 EA | 	byte	$e8, $fa, $02, $f4, $e6, $ee, $ff, $00, $f1, $e6, $ef, $ff, $01, $f3, $e7, $ea
14a05     FA 02 FD EE 
14a09     E5 ED FC 03 
14a0d     FE EF E6 E8 
14a11     F5 00 02 FA | 	byte	$fa, $02, $fd, $ee, $e5, $ed, $fc, $03, $fe, $ef, $e6, $e8, $f5, $00, $02, $fa
14a15     ED E6 E7 F2 
14a19     FE 02 00 F5 
14a1d     EB E6 E7 F0 
14a21     FB 01 02 FE | 	byte	$ed, $e6, $e7, $f2, $fe, $02, $00, $f5, $eb, $e6, $e7, $f0, $fb, $01, $02, $fe
14a25     F4 EB E6 E7 
14a29     ED F5 FD 01 
14a2d     02 FF F8 F0 
14a31     E9 E6 E6 EA | 	byte	$f4, $eb, $e6, $e7, $ed, $f5, $fd, $01, $02, $ff, $f8, $f0, $e9, $e6, $e6, $ea
14a35     F1 F8 FF 01 
14a39     02 00 FC F6 
14a3d     F1 EB E7 E6 
14a41     E7 E9 EE F3 | 	byte	$f1, $f8, $ff, $01, $02, $00, $fc, $f6, $f1, $eb, $e7, $e6, $e7, $e9, $ee, $f3
14a45     F9 FE 00 01 
14a49     01 00 FE F9 
14a4d     F5 F0 EC EA 
14a51     E7 E7 E7 E8 | 	byte	$f9, $fe, $00, $01, $01, $00, $fe, $f9, $f5, $f0, $ec, $ea, $e7, $e7, $e7, $e8
14a55     EA ED F0 F4 
14a59     F8 FC FE 00 
14a5d     00 01 00 00 
14a61     FF FD FA F8 | 	byte	$ea, $ed, $f0, $f4, $f8, $fc, $fe, $00, $00, $01, $00, $00, $ff, $fd, $fa, $f8
14a65     F6 F3 F0 EE 
14a69     EC EA E9 E8 
14a6d     E8 E8 E9 EA 
14a71     EC ED EF F1 | 	byte	$f6, $f3, $f0, $ee, $ec, $ea, $e9, $e8, $e8, $e8, $e9, $ea, $ec, $ed, $ef, $f1
14a75     F3 F5 F6 F8 
14a79     FA FC FD FE 
14a7d     FF FF FF 00 
14a81     FF FF FF FE | 	byte	$f3, $f5, $f6, $f8, $fa, $fc, $fd, $fe, $ff, $ff, $ff, $00, $ff, $ff, $ff, $fe
14a85     FD FC FB F9 
14a89     F8 F8 F6 F5 
14a8d     F3 F2 F1 F0 
14a91     F0 EF EE ED | 	byte	$fd, $fc, $fb, $f9, $f8, $f8, $f6, $f5, $f3, $f2, $f1, $f0, $f0, $ef, $ee, $ed
14a95     ED EC EC EC 
14a99     EC EC EC EC 
14a9d     EC ED EE EE 
14aa1     EF EF F0 F0 | 	byte	$ed, $ec, $ec, $ec, $ec, $ec, $ec, $ec, $ec, $ed, $ee, $ee, $ef, $ef, $f0, $f0
14aa5     F1 F1 F2 F3 
14aa9     F4 F5 F6 F7 
14aad     F8 F8 F9 FA 
14ab1     FB FC FC FD | 	byte	$f1, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f8, $f9, $fa, $fb, $fc, $fc, $fd
14ab5     FE FE FF FF 
14ab9     FF FF FF FF 
14abd     FE FE FD FC 
14ac1     FB FA F8 F8 | 	byte	$fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fd, $fc, $fb, $fa, $f8, $f8
14ac5     F6 F4 F3 F1 
14ac9     F0 EE EC EB 
14acd     EA E9 E8 E7 
14ad1     E7 E8 E8 E9 | 	byte	$f6, $f4, $f3, $f1, $f0, $ee, $ec, $eb, $ea, $e9, $e8, $e7, $e7, $e8, $e8, $e9
14ad5     EB EC EE F0 
14ad9     F2 F5 F8 FA 
14add     FD FF 00 01 
14ae1     01 01 00 00 | 	byte	$eb, $ec, $ee, $f0, $f2, $f5, $f8, $fa, $fd, $ff, $00, $01, $01, $01, $00, $00
14ae5     FF FC F9 F6 
14ae9     F2 EF EC E9 
14aed     E7 E6 E6 E7 
14af1     E9 EC F0 F5 | 	byte	$ff, $fc, $f9, $f6, $f2, $ef, $ec, $e9, $e7, $e6, $e6, $e7, $e9, $ec, $f0, $f5
14af5     F9 FE 00 01 
14af9     02 01 FF FB 
14afd     F6 F1 EC E8 
14b01     E6 E6 E8 EC | 	byte	$f9, $fe, $00, $01, $02, $01, $ff, $fb, $f6, $f1, $ec, $e8, $e6, $e6, $e8, $ec
14b05     F2 F8 FF 01 
14b09     02 00 FD F7 
14b0d     F0 E9 E6 E6 
14b11     EA F0 F8 FF | 	byte	$f2, $f8, $ff, $01, $02, $00, $fd, $f7, $f0, $e9, $e6, $e6, $ea, $f0, $f8, $ff
14b15     02 01 FD F5 
14b19     ED E7 E6 EA 
14b1d     F3 FC 01 01 
14b21     FC F2 E9 E5 | 	byte	$02, $01, $fd, $f5, $ed, $e7, $e6, $ea, $f3, $fc, $01, $01, $fc, $f2, $e9, $e5
14b25     E8 F2 FE 02 
14b29     00 F6 EB E6 
14b2d     EA F5 00 02 
14b31     FB EE E6 E9 | 	byte	$e8, $f2, $fe, $02, $00, $f6, $eb, $e6, $ea, $f5, $00, $02, $fb, $ee, $e6, $e9
14b35     F7 01 00 F5 
14b39     E9 E6 F3 FF 
14b3d     01 F4 E8 E8 
14b41     F8 01 FC EC | 	byte	$f7, $01, $00, $f5, $e9, $e6, $f3, $ff, $01, $f4, $e8, $e8, $f8, $01, $fc, $ec
14b45     E6 F3 01 FE 
14b49     ED E6 F4 01 
14b4d     FB E9 E9 FC 
14b51     01 F2 E6 F5 | 	byte	$e6, $f3, $01, $fe, $ed, $e6, $f4, $01, $fb, $e9, $e9, $fc, $01, $f2, $e6, $f5
14b55     02 F6 E6 F2 
14b59     01 F7 E6 F3 
14b5d     02 F2 E6 FA 
14b61     01 EC EC 00 | 	byte	$02, $f6, $e6, $f2, $01, $f7, $e6, $f3, $02, $f2, $e6, $fa, $01, $ec, $ec, $00
14b65     F8 E7 F7 01 
14b69     ED EA FF FB 
14b6d     E8 EF 01 F8 
14b71     E6 F0 00 F9 | 	byte	$f8, $e7, $f7, $01, $ed, $ea, $ff, $fb, $e8, $ef, $01, $f8, $e6, $f0, $00, $f9
14b75     E8 EE 00 FE 
14b79     EB E8 FB 02 
14b7d     F4 E6 EE FF 
14b81     00 F1 E6 EF | 	byte	$e8, $ee, $00, $fe, $eb, $e8, $fb, $02, $f4, $e6, $ee, $ff, $00, $f1, $e6, $ef
14b85     FE 01 F4 E7 
14b89     E9 F9 01 FD 
14b8d     EE E6 EC FA 
14b91     02 FE F1 E7 | 	byte	$fe, $01, $f4, $e7, $e9, $f9, $01, $fd, $ee, $e6, $ec, $fa, $02, $fe, $f1, $e7
14b95     E7 F3 FF 02 
14b99     FC F0 E7 E7 
14b9d     F1 FD 01 00 
14ba1     F7 ED E6 E7 | 	byte	$e7, $f3, $ff, $02, $fc, $f0, $e7, $e7, $f1, $fd, $01, $00, $f7, $ed, $e6, $e7
14ba5     EF F9 00 02 
14ba9     FF F6 EC E7 
14bad     E6 EA F3 FB 
14bb1     00 02 00 F9 | 	byte	$ef, $f9, $00, $02, $ff, $f6, $ec, $e7, $e6, $ea, $f3, $fb, $00, $02, $00, $f9
14bb5     F1 EB E7 E6 
14bb9     E9 EF F6 FC 
14bbd     00 01 01 FF 
14bc1     F9 F3 ED E9 | 	byte	$f1, $eb, $e7, $e6, $e9, $ef, $f6, $fc, $00, $01, $01, $ff, $f9, $f3, $ed, $e9
14bc5     E7 E7 E8 ED 
14bc9     F1 F7 FC FF 
14bcd     01 01 00 FF 
14bd1     FC F7 F3 F0 | 	byte	$e7, $e7, $e8, $ed, $f1, $f7, $fc, $ff, $01, $01, $00, $ff, $fc, $f7, $f3, $f0
14bd5     EC E9 E7 E7 
14bd9     E7 E9 EC EF 
14bdd     F2 F6 F9 FC 
14be1     FF 00 00 00 | 	byte	$ec, $e9, $e7, $e7, $e7, $e9, $ec, $ef, $f2, $f6, $f9, $fc, $ff, $00, $00, $00
14be5     00 00 FE FC 
14be9     F9 F8 F4 F2 
14bed     F0 EE EC EA 
14bf1     E9 E8 E8 E9 | 	byte	$00, $00, $fe, $fc, $f9, $f8, $f4, $f2, $f0, $ee, $ec, $ea, $e9, $e8, $e8, $e9
14bf5     E9 EB EC EE 
14bf9     EF F1 F3 F4 
14bfd     F7 F8 FA FB 
14c01     FC FE FF FF | 	byte	$e9, $eb, $ec, $ee, $ef, $f1, $f3, $f4, $f7, $f8, $fa, $fb, $fc, $fe, $ff, $ff
14c05     FF FF FF FF 
14c09     FF          | 	byte	$ff[5]
14c0a     FE FD FC FB 
14c0e     FA F9 00 00 
14c12     00 00 00 00 
14c16     00 00 00 00 | 	byte	$fe, $fd, $fc, $fb, $fa, $f9, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14c1a     00 00 00 00 
      ...             
14c36     00 00 00 00 
14c3a     00          | 	byte	$00[33]
14c3b     F4 0E 06 E6 
14c3f     04 32 EC 12 
14c43     D6 1A E0 02 
14c47     00 04 DC EE | 	byte	$f4, $0e, $06, $e6, $04, $32, $ec, $12, $d6, $1a, $e0, $02, $00, $04, $dc, $ee
14c4b     EC 00 C8 10 
14c4f     C0 0E 00 24 
14c53     18 D4 3E 1A 
14c57     E6 30 04 08 | 	byte	$ec, $00, $c8, $10, $c0, $0e, $00, $24, $18, $d4, $3e, $1a, $e6, $30, $04, $08
14c5b     F8 0E E4 DC 
14c5f     F4 DC 0E 0E 
14c63     00 1A 2A D8 
14c67     C8 FE 12 C8 | 	byte	$f8, $0e, $e4, $dc, $f4, $dc, $0e, $0e, $00, $1a, $2a, $d8, $c8, $fe, $12, $c8
14c6b     FA 38 04 0E 
14c6f     CE 00 04 E2 
14c73     00 14 EC F4 
14c77     EC 14 40 DC | 	byte	$fa, $38, $04, $0e, $ce, $00, $04, $e2, $00, $14, $ec, $f4, $ec, $14, $40, $dc
14c7b     28 3E 08 F4 
14c7f     00 EE E8 D0 
14c83     D8 1A 14 00 
14c87     F4 C4 1A 0E | 	byte	$28, $3e, $08, $f4, $00, $ee, $e8, $d0, $d8, $1a, $14, $00, $f4, $c4, $1a, $0e
14c8b     10 00 D4 12 
14c8f     F4 D4 CC 08 
14c93     1E 10 08 2A 
14c97     32 02 1A F4 | 	byte	$10, $00, $d4, $12, $f4, $d4, $cc, $08, $1e, $10, $08, $2a, $32, $02, $1a, $f4
14c9b     00 02 00 C2 
14c9f     E0 0E 14 0E 
14ca3     0C 00 E4 F8 
14ca7     06 1C FA E6 | 	byte	$00, $02, $00, $c2, $e0, $0e, $14, $0e, $0c, $00, $e4, $f8, $06, $1c, $fa, $e6
14cab     CE 04 00 C0 
14caf     C2 D6 08 2A 
14cb3     E2 00 44 3E 
14cb7     24 38 14 0C | 	byte	$ce, $04, $00, $c0, $c2, $d6, $08, $2a, $e2, $00, $44, $3e, $24, $38, $14, $0c
14cbb     10 20 D6 EE 
14cbf     F4 3E 00 00 
14cc3     EC 00 B8 04 
14cc7     00 06 E0 D8 | 	byte	$10, $20, $d6, $ee, $f4, $3e, $00, $00, $ec, $00, $b8, $04, $00, $06, $e0, $d8
14ccb     C0 04 C0 BC 
14ccf     98 D6 00 10 
14cd3     CE 50 68 54 
14cd7     3E 40 26 2C | 	byte	$c0, $04, $c0, $bc, $98, $d6, $00, $10, $ce, $50, $68, $54, $3e, $40, $26, $2c
14cdb     1E 14 D4 FA 
14cdf     0E 40 00 00 
14ce3     EE E0 BC F2 
14ce7     FC F4 D4 DA | 	byte	$1e, $14, $d4, $fa, $0e, $40, $00, $00, $ee, $e0, $bc, $f2, $fc, $f4, $d4, $da
14ceb     DC 10 C8 C4 
14cef     B0 D8 02 E8 
14cf3     C2 54 5C 48 
14cf7     40 42 28 2C | 	byte	$dc, $10, $c8, $c4, $b0, $d8, $02, $e8, $c2, $54, $5c, $48, $40, $42, $28, $2c
14cfb     26 FA DC F0 
14cff     1A 2A 00 EC 
14d03     F8 CE DC 00 
14d07     FC E2 CC BE | 	byte	$26, $fa, $dc, $f0, $1a, $2a, $00, $ec, $f8, $ce, $dc, $00, $fc, $e2, $cc, $be
14d0b     FC F0 C8 CA 
14d0f     C2 F8 0C E4 
14d13     00 58 56 44 
14d17     3E 2A 2C 2A | 	byte	$fc, $f0, $c8, $ca, $c2, $f8, $0c, $e4, $00, $58, $56, $44, $3e, $2a, $2c, $2a
14d1b     18 EC E6 FE 
14d1f     36 10 F0 E2 
14d23     E0 C2 EC 00 
14d27     FA D4 D4 C4 | 	byte	$18, $ec, $e6, $fe, $36, $10, $f0, $e2, $e0, $c2, $ec, $00, $fa, $d4, $d4, $c4
14d2b     04 E0 D8 C4 
14d2f     D8 00 02 D6 
14d33     40 56 56 3C 
14d37     34 28 28 20 | 	byte	$04, $e0, $d8, $c4, $d8, $00, $02, $d6, $40, $56, $56, $3c, $34, $28, $28, $20
14d3b     12 D8 E4 00 
14d3f     2C 00 E6 E8 
14d43     DA CA F4 FC 
14d47     EC D6 D6 E6 | 	byte	$12, $d8, $e4, $00, $2c, $00, $e6, $e8, $da, $ca, $f4, $fc, $ec, $d6, $d6, $e6
14d4b     06 D4 EC C0 
14d4f     EC 00 FC DC 
14d53     50 56 56 36 
14d57     2C 1C 1E 0E | 	byte	$06, $d4, $ec, $c0, $ec, $00, $fc, $dc, $50, $56, $56, $36, $2c, $1c, $1e, $0e
14d5b     00 D0 EC 12 
14d5f     20 F0 F8 EC 
14d63     D6 D8 FC F4 
14d67     E2 D6 D6 EE | 	byte	$00, $d0, $ec, $12, $20, $f0, $f8, $ec, $d6, $d8, $fc, $f4, $e2, $d6, $d6, $ee
14d6b     F4 D6 EC C8 
14d6f     FC 00 F0 1E 
14d73     4C 56 4A 2A 
14d77     2A 2A 1C 12 | 	byte	$f4, $d6, $ec, $c8, $fc, $00, $f0, $1e, $4c, $56, $4a, $2a, $2a, $2a, $1c, $12
14d7b     E4 D6 E8 14 
14d7f     10 EE E8 EC 
14d83     D6 E6 FA E8 
14d87     E2 D6 D8 FE | 	byte	$e4, $d6, $e8, $14, $10, $ee, $e8, $ec, $d6, $e6, $fa, $e8, $e2, $d6, $d8, $fe
14d8b     08 FA E0 E2 
14d8f     F8 00 E2 44 
14d93     56 50 3C 2A 
14d97     24 1E 12 10 | 	byte	$08, $fa, $e0, $e2, $f8, $00, $e2, $44, $56, $50, $3c, $2a, $24, $1e, $12, $10
14d9b     CE D6 EE 18 
14d9f     F0 E8 E0 DC 
14da3     D6 EC FA E6 
14da7     D8 D8 EE 24 | 	byte	$ce, $d6, $ee, $18, $f0, $e8, $e0, $dc, $d6, $ec, $fa, $e6, $d8, $d8, $ee, $24
14dab     FC 02 D4 F2 
14daf     FC FE 00 4A 
14db3     56 54 28 2A 
14db7     1A 14 0E FA | 	byte	$fc, $02, $d4, $f2, $fc, $fe, $00, $4a, $56, $54, $28, $2a, $1a, $14, $0e, $fa
14dbb     C4 DA F8 0E 
14dbf     E2 DC DA DC 
14dc3     CE F8 E6 EC 
14dc7     D4 12 0C 20 | 	byte	$c4, $da, $f8, $0e, $e2, $dc, $da, $dc, $ce, $f8, $e6, $ec, $d4, $12, $0c, $20
14dcb     00 00 DC F8 
14dcf     F8 F8 34 54 
14dd3     4E 4C 20 20 
14dd7     18 08 04 E0 | 	byte	$00, $00, $dc, $f8, $f8, $f8, $34, $54, $4e, $4c, $20, $20, $18, $08, $04, $e0
14ddb     C2 D6 00 FA 
14ddf     DC D6 D6 D6 
14de3     D0 F0 DC E8 
14de7     08 12 28 18 | 	byte	$c2, $d6, $00, $fa, $dc, $d6, $d6, $d6, $d0, $f0, $dc, $e8, $08, $12, $28, $18
14deb     0E F2 EC FA 
14def     FC F4 3E 50 
14df3     4E 3C 28 1C 
14df7     10 04 FE C0 | 	byte	$0e, $f2, $ec, $fa, $fc, $f4, $3e, $50, $4e, $3c, $28, $1c, $10, $04, $fe, $c0
14dfb     C4 CE 00 E6 
14dff     D8 CE D8 CC 
14e03     D8 E4 E6 E4 
14e07     1E 1C 3C 14 | 	byte	$c4, $ce, $00, $e6, $d8, $ce, $d8, $cc, $d8, $e4, $e6, $e4, $1e, $1c, $3c, $14
14e0b     14 F2 FE FA 
14e0f     00 1E 40 48 
14e13     4C 2A 1E 12 
14e17     0C FE EC B4 | 	byte	$14, $f2, $fe, $fa, $00, $1e, $40, $48, $4c, $2a, $1e, $12, $0c, $fe, $ec, $b4
14e1b     BE D6 F4 DA 
14e1f     D0 C2 D6 C8 
14e23     DC DA EC 08 
14e27     2C 30 42 1E | 	byte	$be, $d6, $f4, $da, $d0, $c2, $d6, $c8, $dc, $da, $ec, $08, $2c, $30, $42, $1e
14e2b     18 FC 02 FC 
14e2f     00 40 48 4A 
14e33     4A 1E 1C 06 
14e37     00 F4 CE AC | 	byte	$18, $fc, $02, $fc, $00, $40, $48, $4a, $4a, $1e, $1c, $06, $00, $f4, $ce, $ac
14e3b     B4 DC E6 D0 
14e3f     C0 C0 CC C0 
14e43     DA DC E2 2C 
14e47     3E 4C 48 2C | 	byte	$b4, $dc, $e6, $d0, $c0, $c0, $cc, $c0, $da, $dc, $e2, $2c, $3e, $4c, $48, $2c
14e4b     20 04 02 00 
14e4f     14 3E 4E 48 
14e53     42 1C 14 0C 
14e57     FA E8 AC A8 | 	byte	$20, $04, $02, $00, $14, $3e, $4e, $48, $42, $1c, $14, $0c, $fa, $e8, $ac, $a8
14e5b     AA DA D4 C2 
14e5f     B2 C0 C0 BC 
14e63     D6 DC D8 44 
14e67     54 62 4E 40 | 	byte	$aa, $da, $d4, $c2, $b2, $c0, $c0, $bc, $d6, $dc, $d8, $44, $54, $62, $4e, $40
14e6b     26 14 06 08 
14e6f     4A 42 54 50 
14e73     32 24 0C 02 
14e77     EC CE 9A 94 | 	byte	$26, $14, $06, $08, $4a, $42, $54, $50, $32, $24, $0c, $02, $ec, $ce, $9a, $94
14e7b     A0 CE C4 B2 
14e7f     AA BC BC BC 
14e83     D6 DA D8 56 
14e87     60 6C 56 4C | 	byte	$a0, $ce, $c4, $b2, $aa, $bc, $bc, $bc, $d6, $da, $d8, $56, $60, $6c, $56, $4c
14e8b     24 18 0C 14 
14e8f     4E 4E 4E 48 
14e93     26 1C 06 FE 
14e97     EC C0 94 94 | 	byte	$24, $18, $0c, $14, $4e, $4e, $4e, $48, $26, $1c, $06, $fe, $ec, $c0, $94, $94
14e9b     B2 CE C4 AA 
14e9f     AC BE B8 CA 
14ea3     DC D8 EE 58 
14ea7     62 66 4C 42 | 	byte	$b2, $ce, $c4, $aa, $ac, $be, $b8, $ca, $dc, $d8, $ee, $58, $62, $66, $4c, $42
14eab     20 14 08 38 
14eaf     44 54 48 40 
14eb3     20 14 04 FA 
14eb7     E6 B0 9A 98 | 	byte	$20, $14, $08, $38, $44, $54, $48, $40, $20, $14, $04, $fa, $e6, $b0, $9a, $98
14ebb     C0 CA BE AA 
14ebf     B2 BC BC CE 
14ec3     DC D6 0E 58 
14ec7     64 5C 4C 3E | 	byte	$c0, $ca, $be, $aa, $b2, $bc, $bc, $ce, $dc, $d6, $0e, $58, $64, $5c, $4c, $3e
14ecb     1C 14 0C 56 
14ecf     4A 54 44 36 
14ed3     1E 10 04 F4 
14ed7     DA A4 9C 9E | 	byte	$1c, $14, $0c, $56, $4a, $54, $44, $36, $1e, $10, $04, $f4, $da, $a4, $9c, $9e
14edb     C4 C8 B4 A6 
14edf     B2 B8 C0 D6 
14ee3     E0 D6 30 58 
14ee7     64 58 4A 36 | 	byte	$c4, $c8, $b4, $a6, $b2, $b8, $c0, $d6, $e0, $d6, $30, $58, $64, $58, $4a, $36
14eeb     20 0C 1E 50 
14eef     4E 4C 40 30 
14ef3     1E 06 02 F4 
14ef7     CA 9C 9E A4 | 	byte	$20, $0c, $1e, $50, $4e, $4c, $40, $30, $1e, $06, $02, $f4, $ca, $9c, $9e, $a4
14efb     CA C0 B0 A8 
14eff     B6 B2 C0 DA 
14f03     DA D6 40 5C 
14f07     5A 50 4A 32 | 	byte	$ca, $c0, $b0, $a8, $b6, $b2, $c0, $da, $da, $d6, $40, $5c, $5a, $50, $4a, $32
14f0b     1C 10 4A 4A 
14f0f     4E 44 40 2A 
14f13     14 06 02 EE 
14f17     C0 A4 A6 AC | 	byte	$1c, $10, $4a, $4a, $4e, $44, $40, $2a, $14, $06, $02, $ee, $c0, $a4, $a6, $ac
14f1b     C8 C0 A6 A8 
14f1f     B4 B6 C0 DC 
14f23     D4 DC 54 5C 
14f27     5A 4C 42 2A | 	byte	$c8, $c0, $a6, $a8, $b4, $b6, $c0, $dc, $d4, $dc, $54, $5c, $5a, $4c, $42, $2a
14f2b     14 14 64 4A 
14f2f     54 44 3C 28 
14f33     14 04 FE E4 
14f37     B4 A6 9C B8 | 	byte	$14, $14, $64, $4a, $54, $44, $3c, $28, $14, $04, $fe, $e4, $b4, $a6, $9c, $b8
14f3b     C2 BC A0 B6 
14f3f     B0 BE C2 E0 
14f43     D0 EE 58 56 
14f47     56 4C 42 26 | 	byte	$c2, $bc, $a0, $b6, $b0, $be, $c2, $e0, $d0, $ee, $58, $56, $56, $4c, $42, $26
14f4b     14 30 5C 4E 
14f4f     4A 40 34 20 
14f53     08 06 FA DA 
14f57     AA A6 9E C0 | 	byte	$14, $30, $5c, $4e, $4a, $40, $34, $20, $08, $06, $fa, $da, $aa, $a6, $9e, $c0
14f5b     C0 B6 A6 B6 
14f5f     B0 BE CC D6 
14f63     D0 08 5A 56 
14f67     54 4C 40 24 | 	byte	$c0, $b6, $a6, $b6, $b0, $be, $cc, $d6, $d0, $08, $5a, $56, $54, $4c, $40, $24
14f6b     14 5A 50 4A 
14f6f     42 3C 32 1C 
14f73     0C 02 F0 CE 
14f77     AA A6 A0 C2 | 	byte	$14, $5a, $50, $4a, $42, $3c, $32, $1c, $0c, $02, $f0, $ce, $aa, $a6, $a0, $c2
14f7b     BC B0 AC BC 
14f7f     B6 C0 D6 D4 
14f83     D6 28 56 50 
14f87     50 4A 36 1E | 	byte	$bc, $b0, $ac, $bc, $b6, $c0, $d6, $d4, $d6, $28, $56, $50, $50, $4a, $36, $1e
14f8b     1E 6C 4C 48 
14f8f     40 38 2A 14 
14f93     08 00 EC C4 
14f97     AA A4 AA C2 | 	byte	$1e, $6c, $4c, $48, $40, $38, $2a, $14, $08, $00, $ec, $c4, $aa, $a4, $aa, $c2
14f9b     B6 AA B2 B2 
14f9f     BC C0 D6 CE 
14fa3     DA 40 56 50 
14fa7     54 48 32 1A | 	byte	$b6, $aa, $b2, $b2, $bc, $c0, $d6, $ce, $da, $40, $56, $50, $54, $48, $32, $1a
14fab     4A 60 4A 40 
14faf     40 34 26 10 
14fb3     06 00 E4 C0 
14fb7     AA A6 B0 BE | 	byte	$4a, $60, $4a, $40, $40, $34, $26, $10, $06, $00, $e4, $c0, $aa, $a6, $b0, $be
14fbb     AC A6 B8 AC 
14fbf     C0 C0 D8 CE 
14fc3     E4 50 50 50 
14fc7     54 44 2A 1A | 	byte	$ac, $a6, $b8, $ac, $c0, $c0, $d8, $ce, $e4, $50, $50, $50, $54, $44, $2a, $1a
14fcb     6C 5A 4C 40 
14fcf     3E 32 1A 10 
14fd3     02 FA DA BC 
14fd7     AA A8 B6 B4 | 	byte	$6c, $5a, $4c, $40, $3e, $32, $1a, $10, $02, $fa, $da, $bc, $aa, $a8, $b6, $b4
14fdb     AC A8 B8 B0 
14fdf     C0 C2 D6 CE 
14fe3     F2 4E 4E 54 
14fe7     4C 48 28 30 | 	byte	$ac, $a8, $b8, $b0, $c0, $c2, $d6, $ce, $f2, $4e, $4e, $54, $4c, $48, $28, $30
14feb     6E 56 48 40 
14fef     3C 30 1C 10 
14ff3     02 F4 D6 B4 
14ff7     AA AA B0 AC | 	byte	$6e, $56, $48, $40, $3c, $30, $1c, $10, $02, $f4, $d6, $b4, $aa, $aa, $b0, $ac
14ffb     AA AC B2 B0 
14fff     C0 CA D6 D0 
15003     0E 4E 4A 56 
15007     48 42 20 62 | 	byte	$aa, $ac, $b2, $b0, $c0, $ca, $d6, $d0, $0e, $4e, $4a, $56, $48, $42, $20, $62
1500b     6C 50 42 40 
1500f     34 2A 14 0E 
15013     00 E8 CC B4 
15017     AC A8 B2 AA | 	byte	$6c, $50, $42, $40, $34, $2a, $14, $0e, $00, $e8, $cc, $b4, $ac, $a8, $b2, $aa
1501b     AA B0 B0 B0 
1501f     BE CA D6 D4 
15023     2A 4E 4A 56 
15027     48 42 2A 7A | 	byte	$aa, $b0, $b0, $b0, $be, $ca, $d6, $d4, $2a, $4e, $4a, $56, $48, $42, $2a, $7a
1502b     66 4C 42 3E 
1502f     2C 24 12 08 
15033     FE E4 CA AA 
15037     AA A6 B2 A6 | 	byte	$66, $4c, $42, $3e, $2c, $24, $12, $08, $fe, $e4, $ca, $aa, $aa, $a6, $b2, $a6
1503b     AA B2 AC B2 
1503f     C0 CE D0 D6 
15043     40 4C 4E 56 
15047     48 38 40 78 | 	byte	$aa, $b2, $ac, $b2, $c0, $ce, $d0, $d6, $40, $4c, $4e, $56, $48, $38, $40, $78
1504b     60 4A 42 3E 
1504f     2A 1E 12 02 
15053     F4 DC C4 AA 
15057     AA A4 AA A6 | 	byte	$60, $4a, $42, $3e, $2a, $1e, $12, $02, $f4, $dc, $c4, $aa, $aa, $a4, $aa, $a6
1505b     AC AC AA B8 
1505f     C0 D0 CE DC 
15063     40 4C 54 56 
15067     4A 36 6C 70 | 	byte	$ac, $ac, $aa, $b8, $c0, $d0, $ce, $dc, $40, $4c, $54, $56, $4a, $36, $6c, $70
1506b     5A 44 42 38 
1506f     24 1A 12 00 
15073     EE D6 BE AA 
15077     A8 A0 A6 AA | 	byte	$5a, $44, $42, $38, $24, $1a, $12, $00, $ee, $d6, $be, $aa, $a8, $a0, $a6, $aa
1507b     B2 AC AA C0 
1507f     BC D4 CE F8 
15083     42 4C 54 4E 
15087     48 40 7E 6C | 	byte	$b2, $ac, $aa, $c0, $bc, $d4, $ce, $f8, $42, $4c, $54, $4e, $48, $40, $7e, $6c
1508b     56 44 40 30 
1508f     1E 18 10 FC 
15093     EC D4 B8 AA 
15097     A4 9E AA AA | 	byte	$56, $44, $40, $30, $1e, $18, $10, $fc, $ec, $d4, $b8, $aa, $a4, $9e, $aa, $aa
1509b     AC AC AC C0 
1509f     C2 D0 CC 0E 
150a3     44 4A 56 4C 
150a7     44 60 7C 68 | 	byte	$ac, $ac, $ac, $c0, $c2, $d0, $cc, $0e, $44, $4a, $56, $4c, $44, $60, $7c, $68
150ab     50 42 3E 2A 
150af     20 14 0C F8 
150b3     E4 D0 B4 AA 
150b7     9C A6 A8 B0 | 	byte	$50, $42, $3e, $2a, $20, $14, $0c, $f8, $e4, $d0, $b4, $aa, $9c, $a6, $a8, $b0
150bb     B0 B0 B0 C0 
150bf     C8 CC CE 30 
150c3     4A 4A 56 4E 
150c7     48 7C 74 60 | 	byte	$b0, $b0, $b0, $c0, $c8, $cc, $ce, $30, $4a, $4a, $56, $4e, $48, $7c, $74, $60
150cb     4A 40 36 26 
150cf     1E 12 02 F0 
150d3     E0 CA B0 A8 
150d7     9A A8 AA B4 | 	byte	$4a, $40, $36, $26, $1e, $12, $02, $f0, $e0, $ca, $b0, $a8, $9a, $a8, $aa, $b4
150db     B0 AC B6 BE 
150df     CA C8 D6 38 
150e3     4A 4E 56 48 
150e7     58 7E 72 58 | 	byte	$b0, $ac, $b6, $be, $ca, $c8, $d6, $38, $4a, $4e, $56, $48, $58, $7e, $72, $58
150eb     42 3C 34 20 
150ef     20 10 FC EC 
150f3     DC C8 AA A4 
150f7     9A AA AC B0 | 	byte	$42, $3c, $34, $20, $20, $10, $fc, $ec, $dc, $c8, $aa, $a4, $9a, $aa, $ac, $b0
150fb     AC AC BC BC 
150ff     CC C4 E6 40 
15103     4A 4E 50 4C 
15107     74 7C 66 50 | 	byte	$ac, $ac, $bc, $bc, $cc, $c4, $e6, $40, $4a, $4e, $50, $4c, $74, $7c, $66, $50
1510b     3E 3C 2C 24 
1510f     1A 08 F8 EC 
15113     DA C0 AA A4 
15117     9E AA B0 B0 | 	byte	$3e, $3c, $2c, $24, $1a, $08, $f8, $ec, $da, $c0, $aa, $a4, $9e, $aa, $b0, $b0
1511b     B0 AC C0 BC 
1511f     C8 C8 00 40 
15123     48 56 4C 54 
15127     7E 72 5C 4A | 	byte	$b0, $ac, $c0, $bc, $c8, $c8, $00, $40, $48, $56, $4c, $54, $7e, $72, $5c, $4a
1512b     3E 38 2A 24 
1512f     18 08 F8 E8 
15133     D6 BE AA 9E 
15137     A6 A8 B2 B2 | 	byte	$3e, $38, $2a, $24, $18, $08, $f8, $e8, $d6, $be, $aa, $9e, $a6, $a8, $b2, $b2
1513b     B0 B0 BC BC 
1513f     C4 CA 1E 40 
15143     4A 54 48 6C 
15147     7E 6C 56 42 | 	byte	$b0, $b0, $bc, $bc, $c4, $ca, $1e, $40, $4a, $54, $48, $6c, $7e, $6c, $56, $42
1514b     3C 3C 26 24 
1514f     14 00 F2 E4 
15153     D4 B4 AA 9A 
15157     AA AC B6 B4 | 	byte	$3c, $3c, $26, $24, $14, $00, $f2, $e4, $d4, $b4, $aa, $9a, $aa, $ac, $b6, $b4
1515b     B0 B2 B6 C2 
1515f     C0 CC 36 44 
15163     4C 50 48 7E 
15167     78 68 50 3E | 	byte	$b0, $b2, $b6, $c2, $c0, $cc, $36, $44, $4c, $50, $48, $7e, $78, $68, $50, $3e
1516b     38 34 24 20 
1516f     10 FA F0 E2 
15173     CC B4 AA 9E 
15177     AA B2 B4 B6 | 	byte	$38, $34, $24, $20, $10, $fa, $f0, $e2, $cc, $b4, $aa, $9e, $aa, $b2, $b4, $b6
1517b     AC B6 B6 C8 
1517f     C2 DC 3C 42 
15183     4E 4A 5A 7E 
15187     72 60 4A 38 | 	byte	$ac, $b6, $b6, $c8, $c2, $dc, $3c, $42, $4e, $4a, $5a, $7e, $72, $60, $4a, $38
1518b     36 2A 24 1A 
1518f     08 F8 EC DA 
15193     C4 B0 A6 A8 
15197     AA B8 B6 B6 | 	byte	$36, $2a, $24, $1a, $08, $f8, $ec, $da, $c4, $b0, $a6, $a8, $aa, $b8, $b6, $b6
1519b     AC B8 BC C4 
1519f     C4 00 40 42 
151a3     4E 42 72 7E 
151a7     6C 56 40 36 | 	byte	$ac, $b8, $bc, $c4, $c4, $00, $40, $42, $4e, $42, $72, $7e, $6c, $56, $40, $36
151ab     36 26 1E 12 
151af     00 F4 E8 D8 
151b3     C0 B0 A4 AC 
151b7     B2 B8 BC B4 | 	byte	$36, $26, $1e, $12, $00, $f4, $e8, $d8, $c0, $b0, $a4, $ac, $b2, $b8, $bc, $b4
151bb     B2 B8 C0 C4 
151bf     C8 1E 42 48 
151c3     4C 4A 7E 72 
151c7     62 4C 38 36 | 	byte	$b2, $b8, $c0, $c4, $c8, $1e, $42, $48, $4c, $4a, $7e, $72, $62, $4c, $38, $36
151cb     30 20 1C 12 
151cf     FE F0 E6 D0 
151d3     BC AC A8 B2 
151d7     B8 BE C0 B2 | 	byte	$30, $20, $1c, $12, $fe, $f0, $e6, $d0, $bc, $ac, $a8, $b2, $b8, $be, $c0, $b2
151db     B8 BC C8 C0 
151df     CC 38 42 4A 
151e3     44 60 7E 6C 
151e7     58 44 34 32 | 	byte	$b8, $bc, $c8, $c0, $cc, $38, $42, $4a, $44, $60, $7e, $6c, $58, $44, $34, $32
151eb     2A 1E 14 08 
151ef     FC EE E0 C8 
151f3     B8 AA AC B4 
151f7     C0 C0 C0 B4 | 	byte	$2a, $1e, $14, $08, $fc, $ee, $e0, $c8, $b8, $aa, $ac, $b4, $c0, $c0, $c0, $b4
151fb     C0 C0 C4 C2 
151ff     DC 40 42 4C 
15203     44 74 78 66 
15207     4E 3C 32 30 | 	byte	$c0, $c0, $c4, $c2, $dc, $40, $42, $4c, $44, $74, $78, $66, $4e, $3c, $32, $30
1520b     24 1C 12 02 
1520f     F8 E8 D6 C0 
15213     B6 AA B6 B6 
15217     C2 C2 C0 BC | 	byte	$24, $1c, $12, $02, $f8, $e8, $d6, $c0, $b6, $aa, $b6, $b6, $c2, $c2, $c0, $bc
1521b     BE C4 C2 CA 
1521f     00 42 44 4A 
15223     54 7E 6E 5C 
15227     44 36 30 2A | 	byte	$be, $c4, $c2, $ca, $00, $42, $44, $4a, $54, $7e, $6e, $5c, $44, $36, $30, $2a
1522b     20 14 0E FC 
1522f     F0 E0 CE BE 
15233     B0 AA B6 C0 
15237     C0 C4 BE C0 | 	byte	$20, $14, $0e, $fc, $f0, $e0, $ce, $be, $b0, $aa, $b6, $c0, $c0, $c4, $be, $c0
1523b     BE CA C2 CE 
1523f     28 42 4C 48 
15243     6C 7C 66 50 
15247     40 34 30 26 | 	byte	$be, $ca, $c2, $ce, $28, $42, $4c, $48, $6c, $7c, $66, $50, $40, $34, $30, $26
1524b     1E 12 06 F8 
1524f     EC D6 C2 B8 
15253     AA B4 B8 C0 
15257     C2 C4 BC BE | 	byte	$1e, $12, $06, $f8, $ec, $d6, $c2, $b8, $aa, $b4, $b8, $c0, $c2, $c4, $bc, $be
1525b     C2 C8 CA D6 
1525f     40 44 4C 4C 
15263     7E 72 62 48 
15267     3C 34 2C 24 | 	byte	$c2, $c8, $ca, $d6, $40, $44, $4c, $4c, $7e, $72, $62, $48, $3c, $34, $2c, $24
1526b     1C 10 00 F2 
1526f     E2 D4 BE B4 
15273     AA B8 BC C0 
15277     C4 C0 C0 BC | 	byte	$1c, $10, $00, $f2, $e2, $d4, $be, $b4, $aa, $b8, $bc, $c0, $c4, $c0, $c0, $bc
1527b     CA C2 CC EE 
1527f     48 4C 4A 60 
15283     7E 6C 58 42 
15287     34 32 2A 26 | 	byte	$ca, $c2, $cc, $ee, $48, $4c, $4a, $60, $7e, $6c, $58, $42, $34, $32, $2a, $26
1528b     14 0C FE EC 
1528f     D8 C8 BC B0 
15293     B0 B8 C0 C0 
15297     C8 C0 C0 C0 | 	byte	$14, $0c, $fe, $ec, $d8, $c8, $bc, $b0, $b0, $b8, $c0, $c0, $c8, $c0, $c0, $c0
1529b     CE C8 D0 14 
1529f     44 50 4A 74 
152a3     7C 66 4E 3E 
152a7     38 30 26 20 | 	byte	$ce, $c8, $d0, $14, $44, $50, $4a, $74, $7c, $66, $4e, $3e, $38, $30, $26, $20
152ab     10 02 F4 E6 
152af     D4 BE B6 AA 
152b3     B8 B8 C0 C4 
152b7     C4 C2 BE CC | 	byte	$10, $02, $f4, $e6, $d4, $be, $b6, $aa, $b8, $b8, $c0, $c4, $c4, $c2, $be, $cc
152bb     CA CE D6 38 
152bf     4A 4C 56 7E 
152c3     70 5C 48 3C 
152c7     36 2C 26 1A | 	byte	$ca, $ce, $d6, $38, $4a, $4c, $56, $7e, $70, $5c, $48, $3c, $36, $2c, $26, $1a
152cb     0C FE F0 DC 
152cf     C8 B8 B2 AC 
152d3     B6 BE C0 C8 
152d7     C2 C8 C0 D0 | 	byte	$0c, $fe, $f0, $dc, $c8, $b8, $b2, $ac, $b6, $be, $c0, $c8, $c2, $c8, $c0, $d0
152db     CA D4 E4 48 
152df     4E 4A 6C 7E 
152e3     6C 56 42 3C 
152e7     36 28 26 14 | 	byte	$ca, $d4, $e4, $48, $4e, $4a, $6c, $7e, $6c, $56, $42, $3c, $36, $28, $26, $14
152eb     04 FA E8 D6 
152ef     C0 B6 AA B6 
152f3     B6 BE C0 C8 
152f7     C8 C2 CA CE | 	byte	$04, $fa, $e8, $d6, $c0, $b6, $aa, $b6, $b6, $be, $c0, $c8, $c8, $c2, $ca, $ce
152fb     D0 D8 FC 4C 
152ff     4E 4E 74 7A 
15303     62 4E 40 3C 
15307     32 26 20 10 | 	byte	$d0, $d8, $fc, $4c, $4e, $4e, $74, $7a, $62, $4e, $40, $3c, $32, $26, $20, $10
1530b     00 F2 E0 CE 
1530f     BE B4 AC B8 
15313     BC BC C4 C8 
15317     CC C2 D0 CE | 	byte	$00, $f2, $e0, $ce, $be, $b4, $ac, $b8, $bc, $bc, $c4, $c8, $cc, $c2, $d0, $ce
1531b     D6 E2 14 4C 
1531f     4A 5A 7C 70 
15323     56 48 40 3C 
15327     2A 28 1A 0C | 	byte	$d6, $e2, $14, $4c, $4a, $5a, $7c, $70, $56, $48, $40, $3c, $2a, $28, $1a, $0c
1532b     FE EE D8 C2 
1532f     B8 AC B6 B8 
15333     C0 BE C4 CA 
15337     C8 CC CE D6 | 	byte	$fe, $ee, $d8, $c2, $b8, $ac, $b6, $b8, $c0, $be, $c4, $ca, $c8, $cc, $ce, $d6
1533b     D8 EC 30 4E 
1533f     48 68 7C 66 
15343     4E 42 3E 38 
15347     2A 24 14 02 | 	byte	$d8, $ec, $30, $4e, $48, $68, $7c, $66, $4e, $42, $3e, $38, $2a, $24, $14, $02
1534b     FA E6 D0 BE 
1534f     B6 B0 BC BE 
15353     BE C2 C8 D0 
15357     C8 D4 D0 D8 | 	byte	$fa, $e6, $d0, $be, $b6, $b0, $bc, $be, $be, $c2, $c8, $d0, $c8, $d4, $d0, $d8
1535b     E2 EE 4A 48 
1535f     50 6E 74 58 
15363     48 40 40 32 
15367     2A 1E 10 00 | 	byte	$e2, $ee, $4a, $48, $50, $6e, $74, $58, $48, $40, $40, $32, $2a, $1e, $10, $00
1536b     F2 DC C8 BE 
1536f     B0 BC BC C0 
15373     BE C4 CE CC 
15377     CE CE D6 DA | 	byte	$f2, $dc, $c8, $be, $b0, $bc, $bc, $c0, $be, $c4, $ce, $cc, $ce, $ce, $d6, $da
1537b     EC F8 50 42 
1537f     58 74 6C 50 
15383     42 40 40 30 
15387     28 1C 08 FE | 	byte	$ec, $f8, $50, $42, $58, $74, $6c, $50, $42, $40, $40, $30, $28, $1c, $08, $fe
1538b     EE D4 C0 B8 
1538f     B4 C0 C0 BE 
15393     C0 C4 D4 CC 
15397     D6 CE D8 E2 | 	byte	$ee, $d4, $c0, $b8, $b4, $c0, $c0, $be, $c0, $c4, $d4, $cc, $d6, $ce, $d8, $e2
1539b     EC 0E 48 44 
1539f     62 74 5C 4A 
153a3     42 40 38 30 
153a7     24 14 02 FA | 	byte	$ec, $0e, $48, $44, $62, $74, $5c, $4a, $42, $40, $38, $30, $24, $14, $02, $fa
153ab     E4 CA C0 B6 
153af     C0 C0 C2 C0 
153b3     C2 D0 D0 D6 
153b7     D0 D6 DA EC | 	byte	$e4, $ca, $c0, $b6, $c0, $c0, $c2, $c0, $c2, $d0, $d0, $d6, $d0, $d6, $da, $ec
153bb     F0 28 40 44 
153bf     68 6C 50 42 
153c3     40 40 36 2A 
153c7     1E 0E 00 F0 | 	byte	$f0, $28, $40, $44, $68, $6c, $50, $42, $40, $40, $36, $2a, $1e, $0e, $00, $f0
153cb     D8 C8 BE BE 
153cf     C4 C4 C0 C4 
153d3     C8 D6 D0 D6 
153d7     D0 DA E6 EC | 	byte	$d8, $c8, $be, $be, $c4, $c4, $c0, $c4, $c8, $d6, $d0, $d6, $d0, $da, $e6, $ec
153db     F8 36 3E 4E 
153df     70 5C 48 42 
153e3     40 3C 32 24 
153e7     18 06 FC E8 | 	byte	$f8, $36, $3e, $4e, $70, $5c, $48, $42, $40, $3c, $32, $24, $18, $06, $fc, $e8
153eb     D0 C4 B8 C8 
153ef     C8 C4 C4 C4 
153f3     D0 D4 DA D6 
153f7     D6 E4 EE F4 | 	byte	$d0, $c4, $b8, $c8, $c8, $c4, $c4, $c4, $d0, $d4, $da, $d6, $d6, $e4, $ee, $f4
153fb     F8 40 3C 5A 
153ff     6C 54 42 40 
15403     40 3C 2A 1E 
15407     10 00 F2 E0 | 	byte	$f8, $40, $3c, $5a, $6c, $54, $42, $40, $40, $3c, $2a, $1e, $10, $00, $f2, $e0
1540b     CC C0 C0 C8 
1540f     CC C4 C8 C8 
15413     D6 D8 DC D6 
15417     DA EC EE FA | 	byte	$cc, $c0, $c0, $c8, $cc, $c4, $c8, $c8, $d6, $d8, $dc, $d6, $da, $ec, $ee, $fa
1541b     F8 40 40 64 
1541f     60 4A 42 40 
15423     3E 36 28 18 
15427     08 FC EC D6 | 	byte	$f8, $40, $40, $64, $60, $4a, $42, $40, $3e, $36, $28, $18, $08, $fc, $ec, $d6
1542b     CA BE CC CC 
1542f     CA C8 C8 D0 
15433     D6 E2 D8 D8 
15437     E4 F0 F4 FA | 	byte	$ca, $be, $cc, $cc, $ca, $c8, $c8, $d0, $d6, $e2, $d8, $d8, $e4, $f0, $f4, $fa
1543b     00 36 4C 68 
1543f     56 44 40 40 
15443     3C 30 24 10 
15447     00 F4 E2 D4 | 	byte	$00, $36, $4c, $68, $56, $44, $40, $40, $3c, $30, $24, $10, $00, $f4, $e2, $d4
1544b     C4 C4 CE D4 
1544f     CA CA CA D6 
15453     DA E0 D8 DC 
15457     EE F0 FC F4 | 	byte	$c4, $c4, $ce, $d4, $ca, $ca, $ca, $d6, $da, $e0, $d8, $dc, $ee, $f0, $fc, $f4
1545b     0E 36 58 62 
1545f     4E 42 40 3C 
15463     38 2A 1A 0C 
15467     FE EC DA D0 | 	byte	$0e, $36, $58, $62, $4e, $42, $40, $3c, $38, $2a, $1a, $0c, $fe, $ec, $da, $d0
1546b     C0 CC D4 D4 
1546f     CC CA D4 D6 
15473     E4 DA DC E4 
15477     F4 F8 FE F2 | 	byte	$c0, $cc, $d4, $d4, $cc, $ca, $d4, $d6, $e4, $da, $dc, $e4, $f4, $f8, $fe, $f2
1547b     14 40 60 56 
1547f     48 42 3E 3C 
15483     30 26 12 04 
15487     F8 E4 D8 CA | 	byte	$14, $40, $60, $56, $48, $42, $3e, $3c, $30, $26, $12, $04, $f8, $e4, $d8, $ca
1548b     C8 D0 D6 D0 
1548f     CE CC D6 DA 
15493     E4 DC E0 EE 
15497     F4 FE FA EC | 	byte	$c8, $d0, $d6, $d0, $ce, $cc, $d6, $da, $e4, $dc, $e0, $ee, $f4, $fe, $fa, $ec
1549b     28 4E 60 50 
1549f     44 40 38 38 
154a3     2A 1E 0E 00 
154a7     F0 DC D6 C4 | 	byte	$28, $4e, $60, $50, $44, $40, $38, $38, $2a, $1e, $0e, $00, $f0, $dc, $d6, $c4
154ab     D0 D6 D6 D4 
154af     CE D4 D6 E4 
154b3     E0 E2 E6 F8 
154b7     FA FE F8 E4 | 	byte	$d0, $d6, $d6, $d4, $ce, $d4, $d6, $e4, $e0, $e2, $e6, $f8, $fa, $fe, $f8, $e4
154bb     3E 58 5A 4C 
154bf     44 40 3C 32 
154c3     28 18 06 FC 
154c7     E8 DA D4 CA | 	byte	$3e, $58, $5a, $4c, $44, $40, $3c, $32, $28, $18, $06, $fc, $e8, $da, $d4, $ca
154cb     D0 D8 D6 D6 
154cf     CE D8 D8 E6 
154d3     DC E2 EE F8 
154d7     FE FA F2 E4 | 	byte	$d0, $d8, $d6, $d6, $ce, $d8, $d8, $e6, $dc, $e2, $ee, $f8, $fe, $fa, $f2, $e4
154db     4A 5A 56 4A 
154df     42 3C 3C 2C 
154e3     20 12 02 F4 
154e7     E2 DA CE D0 | 	byte	$4a, $5a, $56, $4a, $42, $3c, $3c, $2c, $20, $12, $02, $f4, $e2, $da, $ce, $d0
154eb     D6 DA D6 D4 
154ef     D6 D6 E2 E2 
154f3     E2 E6 F4 FA 
154f7     FE FA E8 EE | 	byte	$d6, $da, $d6, $d4, $d6, $d6, $e2, $e2, $e2, $e6, $f4, $fa, $fe, $fa, $e8, $ee
154fb     56 5A 4E 48 
154ff     40 3C 36 2A 
15503     1C 0C 00 EC 
15507     DC D8 D0 D4 | 	byte	$56, $5a, $4e, $48, $40, $3c, $36, $2a, $1c, $0c, $00, $ec, $dc, $d8, $d0, $d4
1550b     DA D8 D8 D4 
1550f     D8 D6 E6 E0 
15513     E4 EC F8 FE 
15517     FA F8 E2 00 | 	byte	$da, $d8, $d8, $d4, $d8, $d6, $e6, $e0, $e4, $ec, $f8, $fe, $fa, $f8, $e2, $00
1551b     56 58 4C 44 
1551f     3E 3C 30 26 
15523     14 04 FA E6 
15527     DC D4 D6 D6 | 	byte	$56, $58, $4c, $44, $3e, $3c, $30, $26, $14, $04, $fa, $e6, $dc, $d4, $d6, $d6
1552b     E0 DA D6 D6 
1552f     D8 DC E4 E2 
15533     E6 F4 F8 00 
15537     FA F0 E2 1E | 	byte	$e0, $da, $d6, $d6, $d8, $dc, $e4, $e2, $e6, $f4, $f8, $00, $fa, $f0, $e2, $1e
1553b     5A 56 4A 42 
1553f     3C 38 2C 20 
15543     12 00 F2 E2 
15547     DC D6 D6 DA | 	byte	$5a, $56, $4a, $42, $3c, $38, $2c, $20, $12, $00, $f2, $e2, $dc, $d6, $d6, $da
1554b     DC DA D6 D8 
1554f     D6 E4 E0 E4 
15553     EC F4 FC FE 
15557     F8 E8 E8 38 | 	byte	$dc, $da, $d6, $d8, $d6, $e4, $e0, $e4, $ec, $f4, $fc, $fe, $f8, $e8, $e8, $38
1555b     5A 50 48 40 
1555f     3E 32 2A 1C 
15563     0C 00 EC E2 
15567     DA D8 D8 E2 | 	byte	$5a, $50, $48, $40, $3e, $32, $2a, $1c, $0c, $00, $ec, $e2, $da, $d8, $d8, $e2
1556b     DC DC D6 DA 
1556f     DC E4 E2 E4 
15573     F0 F4 00 F8 
15577     F2 E2 F4 4E | 	byte	$dc, $dc, $d6, $da, $dc, $e4, $e2, $e4, $f0, $f4, $00, $f8, $f2, $e2, $f4, $4e
1557b     56 4E 48 3E 
1557f     3E 2C 26 18 
15583     04 FA E8 E2 
15587     D8 DC DA E2 | 	byte	$56, $4e, $48, $3e, $3e, $2c, $26, $18, $04, $fa, $e8, $e2, $d8, $dc, $da, $e2
1558b     E0 DA D8 D8 
1558f     E2 E2 E4 E6 
15593     F4 F8 FE F4 
15597     EC E6 FE 54 | 	byte	$e0, $da, $d8, $d8, $e2, $e2, $e4, $e6, $f4, $f8, $fe, $f4, $ec, $e6, $fe, $54
1559b     54 4C 44 3E 
1559f     38 2C 20 12 
155a3     00 F4 E6 E2 
155a7     DC E0 E0 E2 | 	byte	$54, $4c, $44, $3e, $38, $2c, $20, $12, $00, $f4, $e6, $e2, $dc, $e0, $e0, $e2
155ab     E0 DA DC D8 
155af     E4 E2 E4 EC 
155b3     F2 FC FA F4 
155b7     E6 EE 02 58 | 	byte	$e0, $da, $dc, $d8, $e4, $e2, $e4, $ec, $f2, $fc, $fa, $f4, $e6, $ee, $02, $58
155bb     50 4C 40 3E 
155bf     32 2A 1C 0E 
155c3     00 F0 E8 E0 
155c7     E2 DC E4 E2 | 	byte	$50, $4c, $40, $3e, $32, $2a, $1c, $0e, $00, $f0, $e8, $e0, $e2, $dc, $e4, $e2
155cb     E0 DA DC E0 
155cf     E4 E4 E4 F0 
155d3     F2 FE F8 F0 
155d7     E6 F8 08 58 | 	byte	$e0, $da, $dc, $e0, $e4, $e4, $e4, $f0, $f2, $fe, $f8, $f0, $e6, $f8, $08, $58
155db     50 4A 3E 3E 
155df     30 26 18 08 
155e3     FE EC E8 E0 
155e7     E4 E2 E4 E2 | 	byte	$50, $4a, $3e, $3e, $30, $26, $18, $08, $fe, $ec, $e8, $e0, $e4, $e2, $e4, $e2
155eb     E0 DC DA E4 
155ef     E2 E4 E6 F2 
155f3     F4 FE F4 EC 
155f7     EC 00 12 56 | 	byte	$e0, $dc, $da, $e4, $e2, $e4, $e6, $f2, $f4, $fe, $f4, $ec, $ec, $00, $12, $56
155fb     4E 44 3E 38 
155ff     2C 20 14 04 
15603     FA EC E8 E2 
15607     E4 E4 E4 E4 | 	byte	$4e, $44, $3e, $38, $2c, $20, $14, $04, $fa, $ec, $e8, $e2, $e4, $e4, $e4, $e4
1560b     DC E0 DC E6 
1560f     E2 E4 EC F2 
15613     FA FA F2 E8 
15617     F4 00 14 56 | 	byte	$dc, $e0, $dc, $e6, $e2, $e4, $ec, $f2, $fa, $fa, $f2, $e8, $f4, $00, $14, $56
1561b     4E 42 3E 32 
1561f     2A 1E 10 00 
15623     F4 EC E4 E6 
15627     E4 E6 E4 E4 | 	byte	$4e, $42, $3e, $32, $2a, $1e, $10, $00, $f4, $ec, $e4, $e6, $e4, $e6, $e4, $e4
1562b     DC E0 E0 E4 
1562f     E2 E6 F0 F2 
15633     FC F8 F0 EC 
15637     FE 04 14 54 | 	byte	$dc, $e0, $e0, $e4, $e2, $e6, $f0, $f2, $fc, $f8, $f0, $ec, $fe, $04, $14, $54
1563b     4C 40 3C 30 
1563f     28 1A 0C 00 
15643     F2 EC E4 E8 
15647     E4 E6 E6 E2 | 	byte	$4c, $40, $3c, $30, $28, $1a, $0c, $00, $f2, $ec, $e4, $e8, $e4, $e6, $e6, $e2
1564b     DC E0 E4 E4 
1564f     E4 E6 F2 F2 
15653     FC F4 EC F2 
15657     00 08 1E 50 | 	byte	$dc, $e0, $e4, $e4, $e4, $e6, $f2, $f2, $fc, $f4, $ec, $f2, $00, $08, $1e, $50
1565b     48 3E 36 2C 
1565f     24 14 06 FE 
15663     F0 EC E4 EC 
15667     E6 E6 E6 E0 | 	byte	$48, $3e, $36, $2c, $24, $14, $06, $fe, $f0, $ec, $e4, $ec, $e6, $e6, $e6, $e0
1566b     E2 DC E6 E2 
1566f     E6 EC F2 F8 
15673     FC F2 EE FC 
15677     06 06 28 4E | 	byte	$e2, $dc, $e6, $e2, $e6, $ec, $f2, $f8, $fc, $f2, $ee, $fc, $06, $06, $28, $4e
1567b     42 3C 32 2A 
1567f     1E 12 04 FA 
15683     F0 EC E6 E8 
15687     E8 E6 E6 E0 | 	byte	$42, $3c, $32, $2a, $1e, $12, $04, $fa, $f0, $ec, $e6, $e8, $e8, $e6, $e6, $e0
1568b     E2 E0 E8 E4 
1568f     E6 EE F2 FA 
15693     FA F2 F2 00 
15697     0C 04 30 4C | 	byte	$e2, $e0, $e8, $e4, $e6, $ee, $f2, $fa, $fa, $f2, $f2, $00, $0c, $04, $30, $4c
1569b     40 38 30 28 
1569f     1A 10 02 F8 
156a3     F0 E8 EC E6 
156a7     E8 E6 E4 E0 | 	byte	$40, $38, $30, $28, $1a, $10, $02, $f8, $f0, $e8, $ec, $e6, $e8, $e6, $e4, $e0
156ab     E2 E2 E8 E4 
156af     E8 F2 F2 FA 
156b3     F4 F2 FA 08 
156b7     0C 02 38 4A | 	byte	$e2, $e2, $e8, $e4, $e8, $f2, $f2, $fa, $f4, $f2, $fa, $08, $0c, $02, $38, $4a
156bb     3E 36 2C 24 
156bf     18 0C 00 F8 
156c3     F0 E6 EC E6 
156c7     E8 E6 E2 E2 | 	byte	$3e, $36, $2c, $24, $18, $0c, $00, $f8, $f0, $e6, $ec, $e6, $e8, $e6, $e2, $e2
156cb     E2 E6 E6 E6 
156cf     E8 F2 F2 FC 
156d3     F2 F4 00 0E 
156d7     0C 00 40 48 | 	byte	$e2, $e6, $e6, $e6, $e8, $f2, $f2, $fc, $f2, $f4, $00, $0e, $0c, $00, $40, $48
156db     3C 34 2A 20 
156df     14 08 FE F4 
156e3     EE E4 EC E6 
156e7     E6 E6 E2 E4 | 	byte	$3c, $34, $2a, $20, $14, $08, $fe, $f4, $ee, $e4, $ec, $e6, $e6, $e6, $e2, $e4
156eb     E0 E8 E4 E8 
156ef     EC F4 F4 FA 
156f3     F4 FC 06 12 
156f7     06 00 44 42 | 	byte	$e0, $e8, $e4, $e8, $ec, $f4, $f4, $fa, $f4, $fc, $06, $12, $06, $00, $44, $42
156fb     38 30 28 1C 
156ff     12 06 FC F4 
15703     EC E6 EC E8 
15707     E6 E6 E2 E6 | 	byte	$38, $30, $28, $1c, $12, $06, $fc, $f4, $ec, $e6, $ec, $e8, $e6, $e6, $e2, $e6
1570b     E0 EC E4 E8 
1570f     EC F2 F8 FA 
15713     FA 00 0E 12 
15717     04 00 48 40 | 	byte	$e0, $ec, $e4, $e8, $ec, $f2, $f8, $fa, $fa, $00, $0e, $12, $04, $00, $48, $40
1571b     36 2C 26 18 
1571f     10 00 FA F2 
15723     E8 E8 E8 E8 
15727     E6 E6 E2 E6 | 	byte	$36, $2c, $26, $18, $10, $00, $fa, $f2, $e8, $e8, $e8, $e8, $e6, $e6, $e2, $e6
1572b     E2 E8 E4 E8 
1572f     EE F2 FA F8 
15733     00 04 14 10 
15737     02 04 4A 3E | 	byte	$e2, $e8, $e4, $e8, $ee, $f2, $fa, $f8, $00, $04, $14, $10, $02, $04, $4a, $3e
1573b     34 2A 20 14 
1573f     0C 00 FA F0 
15743     E6 EC E6 E8 
15747     E6 E6 E4 E4 | 	byte	$34, $2a, $20, $14, $0c, $00, $fa, $f0, $e6, $ec, $e6, $e8, $e6, $e6, $e4, $e4
1574b     E6 E8 E6 E6 
1574f     F0 F4 FC FA 
15753     04 0E 14 0C 
15757     02 04 4A 38 | 	byte	$e6, $e8, $e6, $e6, $f0, $f4, $fc, $fa, $04, $0e, $14, $0c, $02, $04, $4a, $38
1575b     32 2A 1E 14 
1575f     08 00 F8 EE 
15763     E6 EC E6 E8 
15767     E6 E6 E6 E4 | 	byte	$32, $2a, $1e, $14, $08, $00, $f8, $ee, $e6, $ec, $e6, $e8, $e6, $e6, $e6, $e4
1576b     E6 E6 E6 E8 
1576f     F2 F2 FC 00 
15773     0C 14 14 08 
15777     00 0E 44 34 | 	byte	$e6, $e6, $e6, $e8, $f2, $f2, $fc, $00, $0c, $14, $14, $08, $00, $0e, $44, $34
1577b     30 28 1A 12 
1577f     06 00 F4 EC 
15783     E4 EC E6 E8 
15787     E8 E4 E6 E2 | 	byte	$30, $28, $1a, $12, $06, $00, $f4, $ec, $e4, $ec, $e6, $e8, $e8, $e4, $e6, $e2
1578b     E6 E4 E6 E8 
1578f     F2 F4 FE 02 
15793     12 14 14 06 
15797     00 14 40 32 | 	byte	$e6, $e4, $e6, $e8, $f2, $f4, $fe, $02, $12, $14, $14, $06, $00, $14, $40, $32
1579b     2C 24 18 10 
1579f     04 FE F2 EC 
157a3     E4 E8 E8 E8 
157a7     E8 E4 E6 E0 | 	byte	$2c, $24, $18, $10, $04, $fe, $f2, $ec, $e4, $e8, $e8, $e8, $e8, $e4, $e6, $e0
157ab     E8 E4 E6 EC 
157af     F4 F8 00 0C 
157b3     18 18 12 04 
157b7     00 28 3C 30 | 	byte	$e8, $e4, $e6, $ec, $f4, $f8, $00, $0c, $18, $18, $12, $04, $00, $28, $3c, $30
157bb     2A 20 14 0E 
157bf     02 FC F0 E8 
157c3     E4 E8 E8 E8 
157c7     E8 E4 E6 E0 | 	byte	$2a, $20, $14, $0e, $02, $fc, $f0, $e8, $e4, $e8, $e8, $e8, $e8, $e4, $e6, $e0
157cb     E8 E4 E6 EC 
157cf     F2 F8 02 14 
157d3     1A 1A 10 02 
157d7     00 30 36 30 | 	byte	$e8, $e4, $e6, $ec, $f2, $f8, $02, $14, $1a, $1a, $10, $02, $00, $30, $36, $30
157db     28 1E 14 0C 
157df     00 F8 F0 E6 
157e3     E6 E8 EC E8 
157e7     E8 E4 E6 E2 | 	byte	$28, $1e, $14, $0c, $00, $f8, $f0, $e6, $e6, $e8, $ec, $e8, $e8, $e4, $e6, $e2
157eb     E8 E4 E6 EE 
157ef     F2 FE 06 1A 
157f3     1C 18 0C 00 
157f7     00 38 34 2C | 	byte	$e8, $e4, $e6, $ee, $f2, $fe, $06, $1a, $1c, $18, $0c, $00, $00, $38, $34, $2c
157fb     26 1C 12 08 
157ff     00 F4 EE E4 
15803     E8 E8 EC E8 
15807     E8 E6 E4 E4 | 	byte	$26, $1c, $12, $08, $00, $f4, $ee, $e4, $e8, $e8, $ec, $e8, $e8, $e6, $e4, $e4
1580b     E6 E4 E6 F0 
1580f     F2 00 0E 20 
15813     1C 14 06 00 
15817     00 40 30 2A | 	byte	$e6, $e4, $e6, $f0, $f2, $00, $0e, $20, $1c, $14, $06, $00, $00, $40, $30, $2a
1581b     24 18 10 06 
1581f     FE F2 EC E2 
15823     EC E8 EC EC 
15827     E8 E6 E2 E6 | 	byte	$24, $18, $10, $06, $fe, $f2, $ec, $e2, $ec, $e8, $ec, $ec, $e8, $e6, $e2, $e6
1582b     E4 E6 E6 F2 
1582f     F8 04 14 24 
15833     1A 10 02 FE 
15837     00 3E 2C 2A | 	byte	$e4, $e6, $e6, $f2, $f8, $04, $14, $24, $1a, $10, $02, $fe, $00, $3e, $2c, $2a
1583b     20 14 0E 02 
1583f     FC F0 EC E4 
15843     EC EC EC EC 
15847     E6 E8 E0 E6 | 	byte	$20, $14, $0e, $02, $fc, $f0, $ec, $e4, $ec, $ec, $ec, $ec, $e6, $e8, $e0, $e6
1584b     E2 E6 EC F2 
1584f     FC 0E 1E 24 
15853     18 0E 00 FE 
15857     04 38 2C 26 | 	byte	$e2, $e6, $ec, $f2, $fc, $0e, $1e, $24, $18, $0e, $00, $fe, $04, $38, $2c, $26
1585b     1E 14 0C 00 
1585f     FA F0 E8 E6 
15863     EC EC EC EC 
15867     E6 E8 E0 E6 | 	byte	$1e, $14, $0c, $00, $fa, $f0, $e8, $e6, $ec, $ec, $ec, $ec, $e6, $e8, $e0, $e6
1586b     E4 E6 EC F2 
1586f     00 12 26 20 
15873     14 08 00 FC 
15877     14 34 2C 24 | 	byte	$e4, $e6, $ec, $f2, $00, $12, $26, $20, $14, $08, $00, $fc, $14, $34, $2c, $24
1587b     1C 10 06 00 
1587f     F4 EE E4 EC 
15883     EC EE EC EC 
15887     E6 E6 E2 E6 | 	byte	$1c, $10, $06, $00, $f4, $ee, $e4, $ec, $ec, $ee, $ec, $ec, $e6, $e6, $e2, $e6
1588b     E4 E6 EE F8 
1588f     08 18 28 1C 
15893     12 04 00 FA 
15897     28 32 2A 20 | 	byte	$e4, $e6, $ee, $f8, $08, $18, $28, $1c, $12, $04, $00, $fa, $28, $32, $2a, $20
1589b     18 10 04 FE 
1589f     F0 EE E4 EC 
158a3     EC EE EC EC 
158a7     E6 E2 E4 E4 | 	byte	$18, $10, $04, $fe, $f0, $ee, $e4, $ec, $ec, $ee, $ec, $ec, $e6, $e2, $e4, $e4
158ab     E6 E8 F2 FC 
158af     10 1E 28 18 
158b3     0E 00 FC FA 
158b7     34 30 28 1E | 	byte	$e6, $e8, $f2, $fc, $10, $1e, $28, $18, $0e, $00, $fc, $fa, $34, $30, $28, $1e
158bb     14 0C 02 FA 
158bf     F0 EC E6 EC 
158c3     EE EE EC E8 
158c7     E8 E0 E6 E2 | 	byte	$14, $0c, $02, $fa, $f0, $ec, $e6, $ec, $ee, $ee, $ec, $e8, $e8, $e0, $e6, $e2
158cb     E6 EC F2 00 
158cf     14 24 24 14 
158d3     08 00 FA FA 
158d7     38 2C 24 1C | 	byte	$e6, $ec, $f2, $00, $14, $24, $24, $14, $08, $00, $fa, $fa, $38, $2c, $24, $1c
158db     12 08 00 F4 
158df     EE EC E8 EC 
158e3     F0 EE EC E6 
158e7     E8 E2 E6 E4 | 	byte	$12, $08, $00, $f4, $ee, $ec, $e8, $ec, $f0, $ee, $ec, $e6, $e8, $e2, $e6, $e4
158eb     E8 EE F8 0C 
158ef     1A 28 1E 12 
158f3     04 FE FA 00 
158f7     34 2A 20 18 | 	byte	$e8, $ee, $f8, $0c, $1a, $28, $1e, $12, $04, $fe, $fa, $00, $34, $2a, $20, $18
158fb     10 04 FE F2 
158ff     EE E8 EC EE 
15903     F2 EE EC E6 
15907     E4 E6 E4 E6 | 	byte	$10, $04, $fe, $f2, $ee, $e8, $ec, $ee, $f2, $ee, $ec, $e6, $e4, $e6, $e4, $e6
1590b     E8 F2 FC 12 
1590f     20 28 1A 10 
15913     00 FC FA 0E 
15917     32 2A 1C 14 | 	byte	$e8, $f2, $fc, $12, $20, $28, $1a, $10, $00, $fc, $fa, $0e, $32, $2a, $1c, $14
1591b     0E 02 FA F0 
1591f     EC E8 EE F0 
15923     F0 EE EC E8 
15927     E2 E8 E4 E6 | 	byte	$0e, $02, $fa, $f0, $ec, $e8, $ee, $f0, $f0, $ee, $ec, $e8, $e2, $e8, $e4, $e6
1592b     EC F4 02 18 
1592f     28 24 18 08 
15933     00 FA F8 1E 
15937     30 26 1A 12 | 	byte	$ec, $f4, $02, $18, $28, $24, $18, $08, $00, $fa, $f8, $1e, $30, $26, $1a, $12
1593b     08 00 F4 EE 
1593f     EC EC F0 F2 
15943     F0 EE E8 E8 
15947     E4 E8 E4 E8 | 	byte	$08, $00, $f4, $ee, $ec, $ec, $f0, $f2, $f0, $ee, $e8, $e8, $e4, $e8, $e4, $e8
1594b     EE F8 0C 1E 
1594f     28 1E 14 04 
15953     FE FA F8 30 
15957     2C 20 18 10 | 	byte	$ee, $f8, $0c, $1e, $28, $1e, $14, $04, $fe, $fa, $f8, $30, $2c, $20, $18, $10
1595b     06 FE F2 EE 
1595f     E8 EE F0 F2 
15963     F0 EC E8 E4 
15967     E6 E6 E6 E8 | 	byte	$06, $fe, $f2, $ee, $e8, $ee, $f0, $f2, $f0, $ec, $e8, $e4, $e6, $e6, $e6, $e8
1596b     F2 FE 14 24 
1596f     28 1A 10 00 
15973     FC F8 FC 34 
15977     2A 1E 14 0E | 	byte	$f2, $fe, $14, $24, $28, $1a, $10, $00, $fc, $f8, $fc, $34, $2a, $1e, $14, $0e
1597b     02 FA F0 EC 
1597f     EC F2 F2 F2 
15983     F0 EC EC E2 
15987     EC E4 E8 EC | 	byte	$02, $fa, $f0, $ec, $ec, $f2, $f2, $f2, $f0, $ec, $ec, $e2, $ec, $e4, $e8, $ec
1598b     F4 04 1A 28 
1598f     20 18 0C 00 
15993     FA F8 00 32 
15997     28 1A 12 08 | 	byte	$f4, $04, $1a, $28, $20, $18, $0c, $00, $fa, $f8, $00, $32, $28, $1a, $12, $08
1599b     00 F4 EE EC 
1599f     EE F2 F4 F2 
159a3     F0 EC E8 E6 
159a7     EC E4 E8 F0 | 	byte	$00, $f4, $ee, $ec, $ee, $f2, $f4, $f2, $f0, $ec, $e8, $e6, $ec, $e4, $e8, $f0
159ab     FA 0E 1E 28 
159af     1A 14 02 FE 
159b3     FA F8 14 2C 
159b7     24 14 10 06 | 	byte	$fa, $0e, $1e, $28, $1a, $14, $02, $fe, $fa, $f8, $14, $2c, $24, $14, $10, $06
159bb     FE F0 EE E8 
159bf     F2 F4 F4 F2 
159c3     EE EC E6 E8 
159c7     E8 E6 EC F2 | 	byte	$fe, $f0, $ee, $e8, $f2, $f4, $f4, $f2, $ee, $ec, $e6, $e8, $e8, $e6, $ec, $f2
159cb     00 14 26 24 
159cf     18 10 00 FA 
159d3     F8 F4 28 2A 
159d7     20 14 0E 02 | 	byte	$00, $14, $26, $24, $18, $10, $00, $fa, $f8, $f4, $28, $2a, $20, $14, $0e, $02
159db     F8 F0 EC EC 
159df     F4 F8 F2 F2 
159e3     EC EC E6 EC 
159e7     E6 E8 EE F8 | 	byte	$f8, $f0, $ec, $ec, $f4, $f8, $f2, $f2, $ec, $ec, $e6, $ec, $e6, $e8, $ee, $f8
159eb     08 1A 28 1E 
159ef     14 08 00 FA 
159f3     F8 F4 34 26 
159f7     1C 10 08 00 | 	byte	$08, $1a, $28, $1e, $14, $08, $00, $fa, $f8, $f4, $34, $26, $1c, $10, $08, $00
159fb     F2 F0 E8 F2 
159ff     F8 F8 F2 F2 
15a03     EC E8 E8 E8 
15a07     E8 EC F2 FC | 	byte	$f2, $f0, $e8, $f2, $f8, $f8, $f2, $f2, $ec, $e8, $e8, $e8, $e8, $ec, $f2, $fc
15a0b     10 1E 26 18 
15a0f     12 02 FC FA 
15a13     F4 00 30 24 
15a17     18 0E 06 FC | 	byte	$10, $1e, $26, $18, $12, $02, $fc, $fa, $f4, $00, $30, $24, $18, $0e, $06, $fc
15a1b     F0 EE EC F4 
15a1f     FA F4 F4 F0 
15a23     EE E6 EC E6 
15a27     EC EE F4 00 | 	byte	$f0, $ee, $ec, $f4, $fa, $f4, $f4, $f0, $ee, $e6, $ec, $e6, $ec, $ee, $f4, $00
15a2b     14 26 20 14 
15a2f     0C 00 FC F8 
15a33     F2 14 2A 20 
15a37     14 0C 00 F8 | 	byte	$14, $26, $20, $14, $0c, $00, $fc, $f8, $f2, $14, $2a, $20, $14, $0c, $00, $f8
15a3b     F0 EC F0 F8 
15a3f     FC F4 F4 EE 
15a43     EC EC EC E8 
15a47     EC F2 F8 08 | 	byte	$f0, $ec, $f0, $f8, $fc, $f4, $f4, $ee, $ec, $ec, $ec, $e8, $ec, $f2, $f8, $08
15a4b     1A 26 1A 12 
15a4f     06 FE FA F8 
15a53     F2 28 28 1C 
15a57     12 06 00 F2 | 	byte	$1a, $26, $1a, $12, $06, $fe, $fa, $f8, $f2, $28, $28, $1c, $12, $06, $00, $f2
15a5b     EE EC F4 FA 
15a5f     FA F4 F2 F0 
15a63     E8 EE E8 EC 
15a67     EE F4 00 10 | 	byte	$ee, $ec, $f4, $fa, $fa, $f4, $f2, $f0, $e8, $ee, $e8, $ec, $ee, $f4, $00, $10
15a6b     1E 20 18 0E 
15a6f     02 FC FA F4 
15a73     F4 2C 24 18 
15a77     0E 02 FA F0 | 	byte	$1e, $20, $18, $0e, $02, $fc, $fa, $f4, $f4, $2c, $24, $18, $0e, $02, $fa, $f0
15a7b     EC EE F8 FC 
15a7f     F8 F8 F2 F0 
15a83     EC EC E8 EC 
15a87     F2 F8 04 14 | 	byte	$ec, $ee, $f8, $fc, $f8, $f8, $f2, $f0, $ec, $ec, $e8, $ec, $f2, $f8, $04, $14
15a8b     20 1A 14 06 
15a8f     00 FC FA F2 
15a93     00 2A 1E 14 
15a97     08 00 F4 F0 | 	byte	$20, $1a, $14, $06, $00, $fc, $fa, $f2, $00, $2a, $1e, $14, $08, $00, $f4, $f0
15a9b     EC F4 FA FC 
15a9f     FA F4 F4 EC 
15aa3     EE EC EC F0 
15aa7     F4 FC 0C 1A | 	byte	$ec, $f4, $fa, $fc, $fa, $f4, $f4, $ec, $ee, $ec, $ec, $f0, $f4, $fc, $0c, $1a
15aab     1E 18 10 02 
15aaf     00 FC F8 F2 
15ab3     14 26 1A 14 
15ab7     04 FC F4 EC | 	byte	$1e, $18, $10, $02, $00, $fc, $f8, $f2, $14, $26, $1a, $14, $04, $fc, $f4, $ec
15abb     EE F4 FC FA 
15abf     FA F2 F4 EE 
15ac3     EE EC EC F4 
15ac7     F8 00 0E 1C | 	byte	$ee, $f4, $fc, $fa, $fa, $f2, $f4, $ee, $ee, $ec, $ec, $f4, $f8, $00, $0e, $1c
15acb     1A 14 06 00 
15acf     FE FA F4 F2 
15ad3     24 20 18 10 
15ad7     00 F8 F2 EC | 	byte	$1a, $14, $06, $00, $fe, $fa, $f4, $f2, $24, $20, $18, $10, $00, $f8, $f2, $ec
15adb     F4 F8 FC FC 
15adf     F8 F8 F0 F2 
15ae3     EC EE F0 F8 
15ae7     FC 04 14 1A | 	byte	$f4, $f8, $fc, $fc, $f8, $f8, $f0, $f2, $ec, $ee, $f0, $f8, $fc, $04, $14, $1a
15aeb     14 10 02 00 
15aef     FE F8 F4 F0 
15af3     2A 1C 14 08 
15af7     FE F8 F0 F0 | 	byte	$14, $10, $02, $00, $fe, $f8, $f4, $f0, $2a, $1c, $14, $08, $fe, $f8, $f0, $f0
15afb     F4 FC FC FC 
15aff     F8 F8 F2 F2 
15b03     EE EE F8 F8 
15b07     00 08 18 18 | 	byte	$f4, $fc, $fc, $fc, $f8, $f8, $f2, $f2, $ee, $ee, $f8, $f8, $00, $08, $18, $18
15b0b     14 08 00 00 
15b0f     FE F4 F2 FC 
15b13     26 1A 12 02 
15b17     FA F4 EE F4 | 	byte	$14, $08, $00, $00, $fe, $f4, $f2, $fc, $26, $1a, $12, $02, $fa, $f4, $ee, $f4
15b1b     F8 FC FC FA 
15b1f     FA F4 F8 F0 
15b23     F0 F2 FA FE 
15b27     02 12 14 14 | 	byte	$f8, $fc, $fc, $fa, $fa, $f4, $f8, $f0, $f0, $f2, $fa, $fe, $02, $12, $14, $14
15b2b     0E 04 00 00 
15b2f     FA F4 F0 08 
15b33     1E 18 0C 00 
15b37     F8 F0 F4 F8 | 	byte	$0e, $04, $00, $00, $fa, $f4, $f0, $08, $1e, $18, $0c, $00, $f8, $f0, $f4, $f8
15b3b     FC FC FC FA 
15b3f     FA F8 F4 F0 
15b43     F2 FA FA 00 
15b47     04 12 14 14 | 	byte	$fc, $fc, $fc, $fa, $fa, $f8, $f4, $f0, $f2, $fa, $fa, $00, $04, $12, $14, $14
15b4b     06 02 00 00 
15b4f     FA F4 EE 1A 
15b53     1C 14 06 FC 
15b57     F4 F2 F8 FA | 	byte	$06, $02, $00, $00, $fa, $f4, $ee, $1a, $1c, $14, $06, $fc, $f4, $f2, $f8, $fa
15b5b     FC FC FC FC 
15b5f     F8 FC F2 F2 
15b63     F8 FA FE 00 
15b67     0C 12 14 0E | 	byte	$fc, $fc, $fc, $fc, $f8, $fc, $f2, $f2, $f8, $fa, $fe, $00, $0c, $12, $14, $0e
15b6b     04 00 00 FE 
15b6f     FA F0 EC 1E 
15b73     18 10 00 FA 
15b77     F0 F8 FA FC | 	byte	$04, $00, $00, $fe, $fa, $f0, $ec, $1e, $18, $10, $00, $fa, $f0, $f8, $fa, $fc
15b7b     FC FC FC FA 
15b7f     FC FA F4 F4 
15b83     FC FC 00 04 
15b87     0E 12 12 06 | 	byte	$fc, $fc, $fc, $fa, $fc, $fa, $f4, $f4, $fc, $fc, $00, $04, $0e, $12, $12, $06
15b8b     00 00 00 FC 
15b8f     F4 F0 EE 20 
15b93     14 08 00 F8 
15b97     F2 FA FC FC | 	byte	$00, $00, $00, $fc, $f4, $f0, $ee, $20, $14, $08, $00, $f8, $f2, $fa, $fc, $fc
15b9b     FC FC FE FA 
15b9f     FE F8 F8 FA 
15ba3     FC FE 00 08 
15ba7     0E 12 0E 02 | 	byte	$fc, $fc, $fe, $fa, $fe, $f8, $f8, $fa, $fc, $fe, $00, $08, $0e, $12, $0e, $02
15bab     00 00 00 FC 
15baf     F2 EC FC 1A 
15bb3     12 02 00 F2 
15bb7     F8 FC FE FC | 	byte	$00, $00, $00, $fc, $f2, $ec, $fc, $1a, $12, $02, $00, $f2, $f8, $fc, $fe, $fc
15bbb     FC FE FC FE 
15bbf     FC F8 F8 FE 
15bc3     FE 00 02 0C 
15bc7     0E 10 06 00 | 	byte	$fc, $fe, $fc, $fe, $fc, $f8, $f8, $fe, $fe, $00, $02, $0c, $0e, $10, $06, $00
15bcb     00 00 FE FA 
15bcf     F0 EC 08 14 
15bd3     0C 00 FC F4 
15bd7     FA FE FC FC | 	byte	$00, $00, $fe, $fa, $f0, $ec, $08, $14, $0c, $00, $fc, $f4, $fa, $fe, $fc, $fc
15bdb     FA 00 FC FE 
15bdf     FA FA FC FE 
15be3     00 00 06 0C 
15be7     12 0C 04 00 | 	byte	$fa, $00, $fc, $fe, $fa, $fa, $fc, $fe, $00, $00, $06, $0c, $12, $0c, $04, $00
15beb     00 00 00 F4 
15bef     EE E6 14 12 
15bf3     06 00 F8 FA 
15bf7     FC FE FC FC | 	byte	$00, $00, $00, $f4, $ee, $e6, $14, $12, $06, $00, $f8, $fa, $fc, $fe, $fc, $fc
15bfb     FC FE FE FC 
15bff     FC FA 00 00 
15c03     00 00 08 0E 
15c07     10 06 00 00 | 	byte	$fc, $fe, $fe, $fc, $fc, $fa, $00, $00, $00, $00, $08, $0e, $10, $06, $00, $00
15c0b     00 00 FE F4 
15c0f     EC E6 18 0E 
15c13     04 00 F8 FC 
15c17     FE FE FE FC | 	byte	$00, $00, $fe, $f4, $ec, $e6, $18, $0e, $04, $00, $f8, $fc, $fe, $fe, $fe, $fc
15c1b     00 FC 00 FC 
15c1f     FC FE 00 00 
15c23     00 04 08 10 
15c27     0E 04 00 00 | 	byte	$00, $fc, $00, $fc, $fc, $fe, $00, $00, $00, $04, $08, $10, $0e, $04, $00, $00
15c2b     00 00 FA F0 
15c2f     E8 EC 14 08 
15c33     02 FC FC FC 
15c37     00 FE FE FC | 	byte	$00, $00, $fa, $f0, $e8, $ec, $14, $08, $02, $fc, $fc, $fc, $00, $fe, $fe, $fc
15c3b     FE 00 FE FC 
15c3f     FC 00 00 00 
15c43     00 06 0C 10 
15c47     06 00 00 00 | 	byte	$fe, $00, $fe, $fc, $fc, $00, $00, $00, $00, $06, $0c, $10, $06, $00, $00, $00
15c4b     00 00 F8 EC 
15c4f     E6 F2 10 06 
15c53     00 FC FC FE 
15c57     00 00 FC 00 | 	byte	$00, $00, $f8, $ec, $e6, $f2, $10, $06, $00, $fc, $fc, $fe, $00, $00, $fc, $00
15c5b     FE 00 FC FE 
15c5f     00 00 00 00 
15c63     02 06 10 0E 
15c67     04 00 00 00 | 	byte	$fe, $00, $fc, $fe, $00, $00, $00, $00, $02, $06, $10, $0e, $04, $00, $00, $00
15c6b     00 FC F4 EC 
15c6f     E4 FE 0C 04 
15c73     00 FE FC 00 
15c77     00 00 FE FE | 	byte	$00, $fc, $f4, $ec, $e4, $fe, $0c, $04, $00, $fe, $fc, $00, $00, $00, $fe, $fe
15c7b     00 00 FE FE 
15c7f     00 00 02 00 
15c83     06 08 12 08 
15c87     02 00 00 00 | 	byte	$00, $00, $fe, $fe, $00, $00, $02, $00, $06, $08, $12, $08, $02, $00, $00, $00
15c8b     00 FA F0 E8 
15c8f     E2 04 08 04 
15c93     FE 00 FE 00 
15c97     00 00 00 FC | 	byte	$00, $fa, $f0, $e8, $e2, $04, $08, $04, $fe, $00, $fe, $00, $00, $00, $00, $fc
15c9b     00 FE 00 00 
15c9f     00 00 02 02 
15ca3     06 0E 10 06 
15ca7     00 00 00 FE | 	byte	$00, $fe, $00, $00, $00, $00, $02, $02, $06, $0e, $10, $06, $00, $00, $00, $fe
15cab     FE F8 EC E6 
15caf     E0 0E 06 02 
15cb3     00 00 00 00 
15cb7     00 FE 00 FE | 	byte	$fe, $f8, $ec, $e6, $e0, $0e, $06, $02, $00, $00, $00, $00, $00, $fe, $00, $fe
15cbb     00 FC 00 00 
15cbf     00 02 00 06 
15cc3     08 12 0E 04 
15cc7     00 00 00 00 | 	byte	$00, $fc, $00, $00, $00, $02, $00, $06, $08, $12, $0e, $04, $00, $00, $00, $00
15ccb     FC F4 EC E4 
15ccf     DC 0E 06 00 
15cd3     00 00 00 00 
15cd7     00 00 00 00 | 	byte	$fc, $f4, $ec, $e4, $dc, $0e, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00
15cdb     00 FE 00 02 
15cdf     00 04 02 08 
15ce3     0E 12 08 00 
15ce7     00 00 00 FE | 	byte	$00, $fe, $00, $02, $00, $04, $02, $08, $0e, $12, $08, $00, $00, $00, $00, $fe
15ceb     FA F0 E8 E0 
15cef     E2 0E 04 00 
15cf3     00 00 00 00 
15cf7     00 00 FE 00 | 	byte	$fa, $f0, $e8, $e0, $e2, $0e, $04, $00, $00, $00, $00, $00, $00, $00, $fe, $00
15cfb     FE 00 00 02 
15cff     04 02 06 0C 
15d03     10 12 06 00 
15d07     00 00 00 FC | 	byte	$fe, $00, $00, $02, $04, $02, $06, $0c, $10, $12, $06, $00, $00, $00, $00, $fc
15d0b     F8 EC E6 DC 
15d0f     E6 0C 02 00 
15d13     00 00 00 00 
15d17     00 00 FE 00 | 	byte	$f8, $ec, $e6, $dc, $e6, $0c, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $00
15d1b     FE 00 02 02 
15d1f     04 04 08 0E 
15d23     14 10 04 00 
15d27     00 00 00 FA | 	byte	$fe, $00, $02, $02, $04, $04, $08, $0e, $14, $10, $04, $00, $00, $00, $00, $fa
15d2b     F4 EC E4 DA 
15d2f     EE 08 00 02 
15d33     00 00 00 00 
15d37     00 00 00 00 | 	byte	$f4, $ec, $e4, $da, $ee, $08, $00, $02, $00, $00, $00, $00, $00, $00, $00, $00
15d3b     00 00 06 02 
15d3f     04 04 0E 10 
15d43     14 0C 02 00 
15d47     00 FE FC F8 | 	byte	$00, $00, $06, $02, $04, $04, $0e, $10, $14, $0c, $02, $00, $00, $fe, $fc, $f8
15d4b     F0 E8 E0 D8 
15d4f     F8 06 00 02 
15d53     00 00 00 00 
15d57     00 FE 00 00 | 	byte	$f0, $e8, $e0, $d8, $f8, $06, $00, $02, $00, $00, $00, $00, $00, $fe, $00, $00
15d5b     00 02 06 04 
15d5f     04 0C 10 14 
15d63     14 08 00 00 
15d67     00 FE FA F8 | 	byte	$00, $02, $06, $04, $04, $0c, $10, $14, $14, $08, $00, $00, $00, $fe, $fa, $f8
15d6b     EC E6 E0 D6 
15d6f     00 04 02 00 
15d73     00 00 00 00 
15d77     00 00 00 00 | 	byte	$ec, $e6, $e0, $d6, $00, $04, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
15d7b     00 04 04 06 
15d7f     04 0E 12 14 
15d83     10 06 00 00 
15d87     FE FE F8 F2 | 	byte	$00, $04, $04, $06, $04, $0e, $12, $14, $10, $06, $00, $00, $fe, $fe, $f8, $f2
15d8b     EC E4 DA D6 
15d8f     04 02 04 00 
15d93     00 00 00 00 
15d97     00 00 00 00 | 	byte	$ec, $e4, $da, $d6, $04, $02, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00
15d9b     00 06 04 06 
15d9f     08 12 14 14 
15da3     0E 04 00 00 
15da7     FE FC F4 F0 | 	byte	$00, $06, $04, $06, $08, $12, $14, $14, $0e, $04, $00, $00, $fe, $fc, $f4, $f0
15dab     E8 E2 DA D6 
15daf     08 02 04 00 
15db3     00 00 00 00 
15db7     00 00 00 00 | 	byte	$e8, $e2, $da, $d6, $08, $02, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00
15dbb     00 08 04 06 
15dbf     0E 14 18 14 
15dc3     0C 02 00 00 
15dc7     00 FA F4 EE | 	byte	$00, $08, $04, $06, $0e, $14, $18, $14, $0c, $02, $00, $00, $00, $fa, $f4, $ee
15dcb     E6 E0 D8 D6 
15dcf     08 04 02 02 
15dd3     00 00 00 00 
15dd7     00 00 00 00 | 	byte	$e6, $e0, $d8, $d6, $08, $04, $02, $02, $00, $00, $00, $00, $00, $00, $00, $00
15ddb     04 06 06 08 
15ddf     14 18 1A 14 
15de3     08 02 00 FE 
15de7     FC F8 F2 EC | 	byte	$04, $06, $06, $08, $14, $18, $1a, $14, $08, $02, $00, $fe, $fc, $f8, $f2, $ec
15deb     E4 E0 D6 DA 
15def     06 04 02 00 
15df3     00 00 00 00 
15df7     00 00 00 00 | 	byte	$e4, $e0, $d6, $da, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
15dfb     06 06 06 0C 
15dff     14 1A 1A 10 
15e03     06 02 00 FE 
15e07     FC F4 F0 EC | 	byte	$06, $06, $06, $0c, $14, $1a, $1a, $10, $06, $02, $00, $fe, $fc, $f4, $f0, $ec
15e0b     E4 DC D6 DC 
15e0f     06 06 02 00 
15e13     00 00 00 00 
15e17     00 00 00 00 | 	byte	$e4, $dc, $d6, $dc, $06, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
15e1b     08 06 08 12 
15e1f     1A 1C 18 0E 
15e23     04 00 00 FC 
15e27     FA F2 EE E8 | 	byte	$08, $06, $08, $12, $1a, $1c, $18, $0e, $04, $00, $00, $fc, $fa, $f2, $ee, $e8
15e2b     E2 DA D6 E4 
15e2f     04 06 02 00 
15e33     00 00 00 00 
15e37     00 00 00 02 | 	byte	$e2, $da, $d6, $e4, $04, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $02
15e3b     08 06 0C 14 
15e3f     1E 1E 18 0C 
15e43     04 00 00 FC 
15e47     F8 F2 EC E6 | 	byte	$08, $06, $0c, $14, $1e, $1e, $18, $0c, $04, $00, $00, $fc, $f8, $f2, $ec, $e6
15e4b     E2 D8 D6 E6 
15e4f     04 04 00 00 
15e53     00 00 00 00 
15e57     00 00 00 04 | 	byte	$e2, $d8, $d6, $e6, $04, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04
15e5b     08 06 10 1C 
15e5f     20 1E 14 0C 
15e63     02 00 FE FA 
15e67     F4 F0 EC E6 | 	byte	$08, $06, $10, $1c, $20, $1e, $14, $0c, $02, $00, $fe, $fa, $f4, $f0, $ec, $e6
15e6b     E0 D6 D4 EE 
15e6f     04 02 00 00 
15e73     00 00 00 00 
15e77     00 00 00 06 | 	byte	$e0, $d6, $d4, $ee, $04, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
15e7b     06 0C 14 24 
15e7f     24 1E 12 08 
15e83     02 00 FC FA 
15e87     F2 EE E8 E4 | 	byte	$06, $0c, $14, $24, $24, $1e, $12, $08, $02, $00, $fc, $fa, $f2, $ee, $e8, $e4
15e8b     E0 D6 D4 F2 
15e8f     06 02 00 00 
15e93     00 00 00 00 
15e97     00 00 00 08 | 	byte	$e0, $d6, $d4, $f2, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
15e9b     06 0E 1A 26 
15e9f     24 1A 10 06 
15ea3     02 00 FC F8 
15ea7     F0 EC E8 E4 | 	byte	$06, $0e, $1a, $26, $24, $1a, $10, $06, $02, $00, $fc, $f8, $f0, $ec, $e8, $e4
15eab     DA D6 D4 FC 
15eaf     06 02 00 00 
15eb3     00 00 00 00 
15eb7     00 00 02 08 | 	byte	$da, $d6, $d4, $fc, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $02, $08
15ebb     06 14 1E 28 
15ebf     24 18 0E 06 
15ec3     00 00 FA F4 
15ec7     F0 EC E8 E4 | 	byte	$06, $14, $1e, $28, $24, $18, $0e, $06, $00, $00, $fa, $f4, $f0, $ec, $e8, $e4
15ecb     DA D4 D0 FC 
15ecf     04 00 00 00 
15ed3     00 00 00 00 
15ed7     00 00 02 08 | 	byte	$da, $d4, $d0, $fc, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $08
15edb     0C 18 28 2A 
15edf     20 14 0C 04 
15ee3     00 FE F8 F2 
15ee7     EE EC E8 E2 | 	byte	$0c, $18, $28, $2a, $20, $14, $0c, $04, $00, $fe, $f8, $f2, $ee, $ec, $e8, $e2
15eeb     D8 D4 D4 00 
15eef     04 00 00 00 
15ef3     00 00 00 00 
15ef7     00 00 04 08 | 	byte	$d8, $d4, $d4, $00, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $08
15efb     10 1E 2A 2A 
15eff     1E 14 0C 02 
15f03     00 FC F8 F0 
15f07     EE EC E6 E0 | 	byte	$10, $1e, $2a, $2a, $1e, $14, $0c, $02, $00, $fc, $f8, $f0, $ee, $ec, $e6, $e0
15f0b     D6 D4 D4 02 
15f0f     02 00 00 00 
15f13     00 00 00 00 
15f17     00 00 04 0C | 	byte	$d6, $d4, $d4, $02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $0c
15f1b     14 26 2C 28 
15f1f     1C 12 08 02 
15f23     00 FA F4 F0 
15f27     EE EC E6 E0 | 	byte	$14, $26, $2c, $28, $1c, $12, $08, $02, $00, $fa, $f4, $f0, $ee, $ec, $e6, $e0
15f2b     D6 D4 D4 04 
15f2f     02 00 00 00 
15f33     00 00 00 00 
15f37     00 00 06 0E | 	byte	$d6, $d4, $d4, $04, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06, $0e
15f3b     1C 2A 30 26 
15f3f     1A 10 06 00 
15f43     00 F8 F4 EE 
15f47     EC E8 E4 DA | 	byte	$1c, $2a, $30, $26, $1a, $10, $06, $00, $00, $f8, $f4, $ee, $ec, $e8, $e4, $da
15f4b     D6 D4 D6 06 
15f4f     00 00 00 00 
15f53     00 00 00 00 
15f57     00 02 08 12 | 	byte	$d6, $d4, $d6, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $08, $12
15f5b     24 2C 30 20 
15f5f     18 0E 04 00 
15f63     FE F8 F2 EE 
15f67     EC E8 E2 D8 | 	byte	$24, $2c, $30, $20, $18, $0e, $04, $00, $fe, $f8, $f2, $ee, $ec, $e8, $e2, $d8
15f6b     D4 D0 D8 06 
15f6f     00 00 00 00 
15f73     00 00 00 00 
15f77     00 02 0E 14 | 	byte	$d4, $d0, $d8, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $0e, $14
15f7b     28 30 2A 1E 
15f7f     14 0C 02 00 
15f83     FC F4 F0 EE 
15f87     EC E6 E0 D6 | 	byte	$28, $30, $2a, $1e, $14, $0c, $02, $00, $fc, $f4, $f0, $ee, $ec, $e6, $e0, $d6
15f8b     D4 D0 DC 04 
15f8f     00 00 00 00 
15f93     00 FE 00 00 
15f97     00 04 12 1E | 	byte	$d4, $d0, $dc, $04, $00, $00, $00, $00, $00, $fe, $00, $00, $00, $04, $12, $1e
15f9b     2C 32 28 1C 
15f9f     12 08 02 00 
15fa3     FA F4 F0 EE 
15fa7     EC E6 DC D6 | 	byte	$2c, $32, $28, $1c, $12, $08, $02, $00, $fa, $f4, $f0, $ee, $ec, $e6, $dc, $d6
15fab     D0 D0 EE 02 
15faf     00 00 00 00 
15fb3     00 00 00 00 
15fb7     00 08 14 26 | 	byte	$d0, $d0, $ee, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $14, $26
15fbb     30 32 24 1A 
15fbf     10 06 00 FE 
15fc3     F8 F4 EE EC 
15fc7     E8 E4 DA D6 | 	byte	$30, $32, $24, $1a, $10, $06, $00, $fe, $f8, $f4, $ee, $ec, $e8, $e4, $da, $d6
15fcb     D0 D0 F8 02 
15fcf     02 00 00 00 
15fd3     00 00 00 00 
15fd7     02 0E 1A 2A | 	byte	$d0, $d0, $f8, $02, $02, $00, $00, $00, $00, $00, $00, $00, $02, $0e, $1a, $2a
15fdb     32 30 20 18 
15fdf     0C 04 00 FC 
15fe3     F4 F2 EE EC 
15fe7     E8 E2 D8 D4 | 	byte	$32, $30, $20, $18, $0c, $04, $00, $fc, $f4, $f2, $ee, $ec, $e8, $e2, $d8, $d4
15feb     D0 D0 00 02 
15fef     02 00 00 00 
15ff3     00 00 00 00 
15ff7     02 14 20 30 | 	byte	$d0, $d0, $00, $02, $02, $00, $00, $00, $00, $00, $00, $00, $02, $14, $20, $30
15ffb     32 2A 1E 14 
15fff     08 02 00 FA 
16003     F4 F2 EE EC 
16007     E6 E0 D6 D0 | 	byte	$32, $2a, $1e, $14, $08, $02, $00, $fa, $f4, $f2, $ee, $ec, $e6, $e0, $d6, $d0
1600b     D0 D0 04 02 
1600f     00 00 00 00 
16013     00 00 00 02 
16017     08 18 28 32 | 	byte	$d0, $d0, $04, $02, $00, $00, $00, $00, $00, $00, $00, $02, $08, $18, $28, $32
1601b     32 28 1C 12 
1601f     06 00 00 FA 
16023     F4 F0 EC EC 
16027     E6 DC D6 D0 | 	byte	$32, $28, $1c, $12, $06, $00, $00, $fa, $f4, $f0, $ec, $ec, $e6, $dc, $d6, $d0
1602b     D0 D6 06 04 
1602f     00 00 00 00 
16033     00 00 00 02 
16037     0E 1E 2C 34 | 	byte	$d0, $d6, $06, $04, $00, $00, $00, $00, $00, $00, $00, $02, $0e, $1e, $2c, $34
1603b     30 24 18 10 
1603f     06 00 FE F8 
16043     F4 EE EC E8 
16047     E4 DA D4 D0 | 	byte	$30, $24, $18, $10, $06, $00, $fe, $f8, $f4, $ee, $ec, $e8, $e4, $da, $d4, $d0
1604b     D0 DC 06 02 
1604f     00 00 00 00 
16053     00 00 00 04 
16057     14 24 34 34 | 	byte	$d0, $dc, $06, $02, $00, $00, $00, $00, $00, $00, $00, $04, $14, $24, $34, $34
1605b     2C 1E 14 0C 
1605f     02 00 FC F4 
16063     F2 EE EC E6 
16067     E2 D8 D0 D0 | 	byte	$2c, $1e, $14, $0c, $02, $00, $fc, $f4, $f2, $ee, $ec, $e6, $e2, $d8, $d0, $d0
1606b     D0 E6 06 02 
1606f     00 00 00 00 
16073     00 00 02 08 
16077     1A 2A 34 32 | 	byte	$d0, $e6, $06, $02, $00, $00, $00, $00, $00, $00, $02, $08, $1a, $2a, $34, $32
1607b     2A 1C 14 08 
1607f     02 00 FA F4 
16083     F0 EC EC E6 
16087     E0 D6 D0 D0 | 	byte	$2a, $1c, $14, $08, $02, $00, $fa, $f4, $f0, $ec, $ec, $e6, $e0, $d6, $d0, $d0
1608b     D4 F4 06 00 
1608f     00 00 00 00 
16093     00 00 02 0E 
16097     20 30 34 30 | 	byte	$d4, $f4, $06, $00, $00, $00, $00, $00, $00, $00, $02, $0e, $20, $30, $34, $30
1609b     24 1A 10 06 
1609f     00 FE F8 F4 
160a3     F0 EC E8 E4 
160a7     DC D4 D0 D0 | 	byte	$24, $1a, $10, $06, $00, $fe, $f8, $f4, $f0, $ec, $e8, $e4, $dc, $d4, $d0, $d0
160ab     D6 00 06 00 
160af     00 00 00 00 
160b3     00 00 06 14 
160b7     28 34 34 2A | 	byte	$d6, $00, $06, $00, $00, $00, $00, $00, $00, $00, $06, $14, $28, $34, $34, $2a
160bb     20 18 0C 02 
160bf     00 FE F4 F2 
160c3     EE EC E6 E2 
160c7     D8 D4 D0 D0 | 	byte	$20, $18, $0c, $02, $00, $fe, $f4, $f2, $ee, $ec, $e6, $e2, $d8, $d4, $d0, $d0
160cb     D6 06 04 00 
160cf     00 00 00 00 
160d3     00 02 0C 1C 
160d7     2C 36 32 2A | 	byte	$d6, $06, $04, $00, $00, $00, $00, $00, $00, $02, $0c, $1c, $2c, $36, $32, $2a
160db     1C 14 08 02 
160df     00 FC F4 F0 
160e3     EE EC E6 E0 
160e7     D6 D0 D0 D4 | 	byte	$1c, $14, $08, $02, $00, $fc, $f4, $f0, $ee, $ec, $e6, $e0, $d6, $d0, $d0, $d4
160eb     DA 0C 02 00 
160ef     00 00 00 00 
160f3     00 04 12 24 
160f7     32 36 30 24 | 	byte	$da, $0c, $02, $00, $00, $00, $00, $00, $00, $04, $12, $24, $32, $36, $30, $24
160fb     1A 10 06 00 
160ff     00 FA F4 F0 
16103     EC E8 E4 DC 
16107     D6 D4 D0 D6 | 	byte	$1a, $10, $06, $00, $00, $fa, $f4, $f0, $ec, $e8, $e4, $dc, $d6, $d4, $d0, $d6
1610b     E4 0C 02 00 
1610f     00 00 00 00 
16113     00 08 1A 2A 
16117     36 34 2A 20 | 	byte	$e4, $0c, $02, $00, $00, $00, $00, $00, $00, $08, $1a, $2a, $36, $34, $2a, $20
1611b     18 0C 04 00 
1611f     FE F8 F2 EE 
16123     EC E6 E2 DA 
16127     D4 D4 D0 D8 | 	byte	$18, $0c, $04, $00, $fe, $f8, $f2, $ee, $ec, $e6, $e2, $da, $d4, $d4, $d0, $d8
1612b     F4 06 02 00 
1612f     00 00 00 00 
16133     02 0E 1E 30 
16137     36 32 28 1C | 	byte	$f4, $06, $02, $00, $00, $00, $00, $00, $02, $0e, $1e, $30, $36, $32, $28, $1c
1613b     14 08 02 00 
1613f     FC F8 F0 EE 
16143     EC E6 E0 D8 
16147     D4 D0 D6 D8 | 	byte	$14, $08, $02, $00, $fc, $f8, $f0, $ee, $ec, $e6, $e0, $d8, $d4, $d0, $d6, $d8
1614b     00 06 00 00 
1614f     00 00 00 00 
16153     04 14 26 34 
16157     36 2C 24 1A | 	byte	$00, $06, $00, $00, $00, $00, $00, $00, $04, $14, $26, $34, $36, $2c, $24, $1a
1615b     10 06 00 00 
1615f     FA F4 F0 EC 
16163     E8 E4 DC D6 
16167     D4 D0 D6 DA | 	byte	$10, $06, $00, $00, $fa, $f4, $f0, $ec, $e8, $e4, $dc, $d6, $d4, $d0, $d6, $da
1616b     08 06 00 00 
1616f     00 00 00 02 
16173     08 1A 2A 36 
16177     34 2A 1E 18 | 	byte	$08, $06, $00, $00, $00, $00, $00, $02, $08, $1a, $2a, $36, $34, $2a, $1e, $18
1617b     0C 04 00 FE 
1617f     F8 F2 EE EC 
16183     E6 E2 DA D6 
16187     D0 D4 D8 E2 | 	byte	$0c, $04, $00, $fe, $f8, $f2, $ee, $ec, $e6, $e2, $da, $d6, $d0, $d4, $d8, $e2
1618b     0C 04 00 00 
1618f     00 02 00 02 
16193     10 20 32 36 
16197     32 26 1C 12 | 	byte	$0c, $04, $00, $00, $00, $02, $00, $02, $10, $20, $32, $36, $32, $26, $1c, $12
1619b     08 02 00 FC 
1619f     F8 F0 EE EC 
161a3     E4 E0 D8 D6 
161a7     D0 D6 DA EC | 	byte	$08, $02, $00, $fc, $f8, $f0, $ee, $ec, $e4, $e0, $d8, $d6, $d0, $d6, $da, $ec
161ab     08 04 00 00 
161af     02 00 02 06 
161b3     18 28 36 34 
161b7     2A 20 18 0E | 	byte	$08, $04, $00, $00, $02, $00, $02, $06, $18, $28, $36, $34, $2a, $20, $18, $0e
161bb     04 02 00 FA 
161bf     F4 F0 EC E8 
161c3     E4 DA D6 D4 
161c7     D4 D8 DC F8 | 	byte	$04, $02, $00, $fa, $f4, $f0, $ec, $e8, $e4, $da, $d6, $d4, $d4, $d8, $dc, $f8
161cb     06 02 00 00 
161cf     02 00 02 0E 
161d3     1E 30 36 32 
161d7     28 1E 14 0C | 	byte	$06, $02, $00, $00, $02, $00, $02, $0e, $1e, $30, $36, $32, $28, $1e, $14, $0c
161db     04 00 FC FA 
161df     F2 EE EC E6 
161e3     E0 D8 D6 D4 
161e7     D6 D8 DC 04 | 	byte	$04, $00, $fc, $fa, $f2, $ee, $ec, $e6, $e0, $d8, $d6, $d4, $d6, $d8, $dc, $04
161eb     06 02 00 02 
161ef     02 00 04 14 
161f3     24 34 36 2C 
161f7     24 1A 10 06 | 	byte	$06, $02, $00, $02, $02, $00, $04, $14, $24, $34, $36, $2c, $24, $1a, $10, $06
161fb     02 00 FC F8 
161ff     F0 EC E8 E4 
16203     DC D8 D6 D4 
16207     D8 DA DC 0C | 	byte	$02, $00, $fc, $f8, $f0, $ec, $e8, $e4, $dc, $d8, $d6, $d4, $d8, $da, $dc, $0c
1620b     04 02 00 04 
1620f     02 02 08 1A 
16213     2A 36 34 28 
16217     20 14 0E 06 | 	byte	$04, $02, $00, $04, $02, $02, $08, $1a, $2a, $36, $34, $28, $20, $14, $0e, $06
1621b     02 00 FA F4 
1621f     F0 EC E8 E2 
16223     DA D8 D6 D6 
16227     DA DC E8 08 | 	byte	$02, $00, $fa, $f4, $f0, $ec, $e8, $e2, $da, $d8, $d6, $d6, $da, $dc, $e8, $08
1622b     06 02 02 02 
1622f     02 04 12 1E 
16233     30 36 2C 24 
16237     1C 12 08 04 | 	byte	$06, $02, $02, $02, $02, $04, $12, $1e, $30, $36, $2c, $24, $1c, $12, $08, $04
1623b     00 FE FA F2 
1623f     EC EC E6 E0 
16243     D8 D6 D6 D8 
16247     DC DC F8 06 | 	byte	$00, $fe, $fa, $f2, $ec, $ec, $e6, $e0, $d8, $d6, $d6, $d8, $dc, $dc, $f8, $06
1624b     06 00 04 02 
1624f     04 08 14 28 
16253     32 36 2A 20 
16257     18 10 08 02 | 	byte	$06, $00, $04, $02, $04, $08, $14, $28, $32, $36, $2a, $20, $18, $10, $08, $02
1625b     00 FC F4 F0 
1625f     EC E8 E2 DA 
16263     D8 D6 D8 DA 
16267     DC DC 04 06 | 	byte	$00, $fc, $f4, $f0, $ec, $e8, $e2, $da, $d8, $d6, $d8, $da, $dc, $dc, $04, $06
1626b     04 02 02 04 
1626f     04 0E 1A 2A 
16273     34 32 26 1E 
16277     14 0C 06 00 | 	byte	$04, $02, $02, $04, $04, $0e, $1a, $2a, $34, $32, $26, $1e, $14, $0c, $06, $00
1627b     00 FA F2 EE 
1627f     EC E6 E0 DA 
16283     D8 D8 DA DC 
16287     DC E0 0C 08 | 	byte	$00, $fa, $f2, $ee, $ec, $e6, $e0, $da, $d8, $d8, $da, $dc, $dc, $e0, $0c, $08
1628b     04 04 02 04 
1628f     08 12 24 30 
16293     34 2A 24 1A 
16297     12 08 04 00 | 	byte	$04, $04, $02, $04, $08, $12, $24, $30, $34, $2a, $24, $1a, $12, $08, $04, $00
1629b     00 F8 F0 EC 
1629f     E8 E2 DC DA 
162a3     D6 DA DA DC 
162a7     DC EC 0C 06 | 	byte	$00, $f8, $f0, $ec, $e8, $e2, $dc, $da, $d6, $da, $da, $dc, $dc, $ec, $0c, $06
162ab     06 02 04 06 
162af     0E 18 28 32 
162b3     30 26 1E 14 
162b7     0E 08 02 00 | 	byte	$06, $02, $04, $06, $0e, $18, $28, $32, $30, $26, $1e, $14, $0e, $08, $02, $00
162bb     FC F4 EE EC 
162bf     E6 E0 DA D8 
162c3     D8 DC DC DC 
162c7     DC FC 0C 06 | 	byte	$fc, $f4, $ee, $ec, $e6, $e0, $da, $d8, $d8, $dc, $dc, $dc, $dc, $fc, $0c, $06
162cb     08 02 04 08 
162cf     10 1E 2A 32 
162d3     2A 24 1A 14 
162d7     0E 06 00 00 | 	byte	$08, $02, $04, $08, $10, $1e, $2a, $32, $2a, $24, $1a, $14, $0e, $06, $00, $00
162db     FA F2 EC E8 
162df     E2 DC DA D8 
162e3     DC DC E0 E0 
162e7     DC 06 08 08 | 	byte	$fa, $f2, $ec, $e8, $e2, $dc, $da, $d8, $dc, $dc, $e0, $e0, $dc, $06, $08, $08
162eb     06 04 06 0E 
162ef     14 24 30 30 
162f3     28 20 18 10 
162f7     0C 04 00 FE | 	byte	$06, $04, $06, $0e, $14, $24, $30, $30, $28, $20, $18, $10, $0c, $04, $00, $fe
162fb     F8 F0 EC E6 
162ff     E0 DA D8 DA 
16303     DC E0 E0 E0 
16307     E0 0E 08 08 | 	byte	$f8, $f0, $ec, $e6, $e0, $da, $d8, $da, $dc, $e0, $e0, $e0, $e0, $0e, $08, $08
1630b     06 04 0C 10 
1630f     1C 28 30 2A 
16313     26 1C 14 10 
16317     08 02 00 FC | 	byte	$06, $04, $0c, $10, $1c, $28, $30, $2a, $26, $1c, $14, $10, $08, $02, $00, $fc
1631b     F4 EE E8 E4 
1631f     DC DA D8 DC 
16323     E0 E0 E0 E0 
16327     EC 08 0C 06 | 	byte	$f4, $ee, $e8, $e4, $dc, $da, $d8, $dc, $e0, $e0, $e0, $e0, $ec, $08, $0c, $06
1632b     06 06 0E 14 
1632f     1E 2A 2C 2A 
16333     20 18 12 0E 
16337     06 02 00 FA | 	byte	$06, $06, $0e, $14, $1e, $2a, $2c, $2a, $20, $18, $12, $0e, $06, $02, $00, $fa
1633b     F2 EC E6 E0 
1633f     DC D8 DA E0 
16343     E2 E0 E0 DC 
16347     FC 08 0C 08 | 	byte	$f2, $ec, $e6, $e0, $dc, $d8, $da, $e0, $e2, $e0, $e0, $dc, $fc, $08, $0c, $08
1634b     06 08 0E 18 
1634f     26 2C 2A 26 
16353     1C 14 12 0E 
16357     04 00 FE F8 | 	byte	$06, $08, $0e, $18, $26, $2c, $2a, $26, $1c, $14, $12, $0e, $04, $00, $fe, $f8
1635b     F0 EC E4 DC 
1635f     DA D8 DC E0 
16363     E2 E2 E0 E0 
16367     04 0C 08 08 | 	byte	$f0, $ec, $e4, $dc, $da, $d8, $dc, $e0, $e2, $e2, $e0, $e0, $04, $0c, $08, $08
1636b     08 0C 12 1C 
1636f     2A 2C 2A 24 
16373     1A 14 10 0C 
16377     04 00 FC F4 | 	byte	$08, $0c, $12, $1c, $2a, $2c, $2a, $24, $1a, $14, $10, $0c, $04, $00, $fc, $f4
1637b     EE E8 E2 DC 
1637f     DA DA E0 E2 
16383     E2 E2 E0 E2 
16387     0C 0E 08 08 | 	byte	$ee, $e8, $e2, $dc, $da, $da, $e0, $e2, $e2, $e2, $e0, $e2, $0c, $0e, $08, $08
1638b     0C 0E 14 20 
1638f     2A 2A 28 1E 
16393     18 14 10 06 
16397     02 00 FA F2 | 	byte	$0c, $0e, $14, $20, $2a, $2a, $28, $1e, $18, $14, $10, $06, $02, $00, $fa, $f2
1639b     EC E6 E0 DC 
1639f     D8 DC E0 E4 
163a3     E4 E0 E2 E6 
163a7     0E 0C 0C 0C | 	byte	$ec, $e6, $e0, $dc, $d8, $dc, $e0, $e4, $e4, $e0, $e2, $e6, $0e, $0c, $0c, $0c
163ab     0C 10 1A 26 
163af     2A 2A 24 1C 
163b3     14 12 0E 06 
163b7     00 FE F8 F0 | 	byte	$0c, $10, $1a, $26, $2a, $2a, $24, $1c, $14, $12, $0e, $06, $00, $fe, $f8, $f0
163bb     EC E4 DC DA 
163bf     DA E0 E2 E4 
163c3     E4 E0 E2 F2 
163c7     0C 0C 0C 0C | 	byte	$ec, $e4, $dc, $da, $da, $e0, $e2, $e4, $e4, $e0, $e2, $f2, $0c, $0c, $0c, $0c
163cb     0C 14 1E 2A 
163cf     2A 28 20 1A 
163d3     14 12 0C 04 
163d7     00 FC F4 EE | 	byte	$0c, $14, $1e, $2a, $2a, $28, $20, $1a, $14, $12, $0c, $04, $00, $fc, $f4, $ee
163db     E8 E0 DC DA 
163df     DC E0 E4 E4 
163e3     E4 E2 E0 00 
163e7     0C 0C 0C 0E | 	byte	$e8, $e0, $dc, $da, $dc, $e0, $e4, $e4, $e4, $e2, $e0, $00, $0c, $0c, $0c, $0e
163eb     0E 18 24 2A 
163ef     2A 26 1C 18 
163f3     14 10 08 02 
163f7     00 FA F2 EC | 	byte	$0e, $18, $24, $2a, $2a, $26, $1c, $18, $14, $10, $08, $02, $00, $fa, $f2, $ec
163fb     E6 E0 DA DA 
163ff     E0 E2 E4 E4 
16403     E2 E2 E0 08 
16407     0C 0C 0E 0E | 	byte	$e6, $e0, $da, $da, $e0, $e2, $e4, $e4, $e2, $e2, $e0, $08, $0c, $0c, $0e, $0e
1640b     12 1C 28 2A 
1640f     2A 20 1A 14 
16413     12 0E 08 00 
16417     FE F8 F0 EC | 	byte	$12, $1c, $28, $2a, $2a, $20, $1a, $14, $12, $0e, $08, $00, $fe, $f8, $f0, $ec
1641b     E4 DC DA DC 
1641f     E0 E4 E4 E4 
16423     E2 E2 E4 0E 
16427     0C 0E 10 0E | 	byte	$e4, $dc, $da, $dc, $e0, $e4, $e4, $e4, $e2, $e2, $e4, $0e, $0c, $0e, $10, $0e
1642b     14 1E 2A 2A 
1642f     26 1E 18 14 
16433     12 0C 06 00 
16437     FC F4 EE E8 | 	byte	$14, $1e, $2a, $2a, $26, $1e, $18, $14, $12, $0c, $06, $00, $fc, $f4, $ee, $e8
1643b     E2 DC DA E0 
1643f     E2 E4 E6 E4 
16443     E2 E0 EC 0C 
16447     0E 0E 10 10 | 	byte	$e2, $dc, $da, $e0, $e2, $e4, $e6, $e4, $e2, $e0, $ec, $0c, $0e, $0e, $10, $10
1644b     1A 26 2A 2A 
1644f     24 1C 18 14 
16453     10 08 02 00 
16457     FA F2 EC E6 | 	byte	$1a, $26, $2a, $2a, $24, $1c, $18, $14, $10, $08, $02, $00, $fa, $f2, $ec, $e6
1645b     E0 DA DC E0 
1645f     E2 E4 E6 E4 
16463     E4 E2 F8 0C 
16467     0E 10 10 14 | 	byte	$e0, $da, $dc, $e0, $e2, $e4, $e6, $e4, $e4, $e2, $f8, $0c, $0e, $10, $10, $14
1646b     1C 2A 2A 28 
1646f     1E 1A 14 12 
16473     0E 08 00 FE 
16477     FA F0 EC E4 | 	byte	$1c, $2a, $2a, $28, $1e, $1a, $14, $12, $0e, $08, $00, $fe, $fa, $f0, $ec, $e4
1647b     E0 DA DC E0 
1647f     E4 E4 E6 E4 
16483     E2 E2 00 0C 
16487     0E 10 10 18 | 	byte	$e0, $da, $dc, $e0, $e4, $e4, $e6, $e4, $e2, $e2, $00, $0c, $0e, $10, $10, $18
1648b     24 2A 2A 26 
1648f     1C 18 14 12 
16493     0C 06 00 FE 
16497     F8 F0 E8 E2 | 	byte	$24, $2a, $2a, $26, $1c, $18, $14, $12, $0c, $06, $00, $fe, $f8, $f0, $e8, $e2
1649b     DC DA E0 E2 
1649f     E4 E6 E4 E4 
164a3     E2 E4 06 0E 
164a7     10 12 12 1A | 	byte	$dc, $da, $e0, $e2, $e4, $e6, $e4, $e4, $e2, $e4, $06, $0e, $10, $12, $12, $1a
164ab     28 2A 2A 24 
164af     1A 18 14 10 
164b3     0C 04 00 FC 
164b7     F4 EE E6 E2 | 	byte	$28, $2a, $2a, $24, $1a, $18, $14, $10, $0c, $04, $00, $fc, $f4, $ee, $e6, $e2
164bb     DC DC E0 E4 
164bf     E4 E6 E4 E4 
164c3     E2 E6 0C 0E 
164c7     12 10 14 1E | 	byte	$dc, $dc, $e0, $e4, $e4, $e6, $e4, $e4, $e2, $e6, $0c, $0e, $12, $10, $14, $1e
164cb     2A 2A 28 1E 
164cf     1A 14 12 0E 
164d3     08 02 00 FA 
164d7     F2 EC E4 E0 | 	byte	$2a, $2a, $28, $1e, $1a, $14, $12, $0e, $08, $02, $00, $fa, $f2, $ec, $e4, $e0
164db     DA E0 E2 E4 
164df     E4 E6 E4 E2 
164e3     E4 E8 10 0E 
164e7     12 12 1A 24 | 	byte	$da, $e0, $e2, $e4, $e4, $e6, $e4, $e2, $e4, $e8, $10, $0e, $12, $12, $1a, $24
164eb     2A 2A 26 1C 
164ef     18 14 12 0E 
164f3     06 00 FE F8 
164f7     F0 EC E4 E0 | 	byte	$2a, $2a, $26, $1c, $18, $14, $12, $0e, $06, $00, $fe, $f8, $f0, $ec, $e4, $e0
164fb     DC E0 E2 E4 
164ff     E4 E4 E4 E2 
16503     E4 EE 10 10 
16507     12 14 1C 28 | 	byte	$dc, $e0, $e2, $e4, $e4, $e4, $e4, $e2, $e4, $ee, $10, $10, $12, $14, $1c, $28
1650b     2A 2A 24 1A 
1650f     14 14 10 0C 
16513     04 00 FC F8 
16517     F0 E8 E2 E0 | 	byte	$2a, $2a, $24, $1a, $14, $14, $10, $0c, $04, $00, $fc, $f8, $f0, $e8, $e2, $e0
1651b     DC E0 E4 E4 
1651f     E4 E4 E4 E2 
16523     E6 F8 10 12 
16527     12 18 20 2A | 	byte	$dc, $e0, $e4, $e4, $e4, $e4, $e4, $e2, $e6, $f8, $10, $12, $12, $18, $20, $2a
1652b     2A 28 20 1A 
1652f     14 12 0E 0C 
16533     02 00 FC F4 
16537     EE E6 E2 DC | 	byte	$2a, $28, $20, $1a, $14, $12, $0e, $0c, $02, $00, $fc, $f4, $ee, $e6, $e2, $dc
1653b     E0 E2 E4 E4 
1653f     E4 E4 E4 E4 
16543     E4 00 10 12 
16547     14 1C 26 2C | 	byte	$e0, $e2, $e4, $e4, $e4, $e4, $e4, $e4, $e4, $00, $10, $12, $14, $1c, $26, $2c
1654b     2A 26 1E 18 
1654f     14 12 0E 08 
16553     00 FE FA F2 
16557     EC E4 E2 DC | 	byte	$2a, $26, $1e, $18, $14, $12, $0e, $08, $00, $fe, $fa, $f2, $ec, $e4, $e2, $dc
1655b     E0 E2 E4 E4 
1655f     E4 E4 E2 E4 
16563     E4 04 10 14 
16567     14 1E 2A 2C | 	byte	$e0, $e2, $e4, $e4, $e4, $e4, $e2, $e4, $e4, $04, $10, $14, $14, $1e, $2a, $2c
1656b     2A 24 1C 14 
1656f     14 10 0C 06 
16573     00 FE FA F2 
16577     EC E4 E2 DC | 	byte	$2a, $24, $1c, $14, $14, $10, $0c, $06, $00, $fe, $fa, $f2, $ec, $e4, $e2, $dc
1657b     E2 E2 E4 E4 
1657f     E4 E4 E2 E6 
16583     E6 0C 12 14 
16587     1A 24 2A 2C | 	byte	$e2, $e2, $e4, $e4, $e4, $e4, $e2, $e6, $e6, $0c, $12, $14, $1a, $24, $2a, $2c
1658b     28 24 1A 14 
1658f     14 10 0C 02 
16593     00 FC F8 F0 
16597     E8 E4 E0 DC | 	byte	$28, $24, $1a, $14, $14, $10, $0c, $02, $00, $fc, $f8, $f0, $e8, $e4, $e0, $dc
1659b     E2 E4 E4 E4 
1659f     E4 E4 E2 E6 
165a3     E6 10 12 14 
165a7     1E 28 30 2A | 	byte	$e2, $e4, $e4, $e4, $e4, $e4, $e2, $e6, $e6, $10, $12, $14, $1e, $28, $30, $2a
165ab     28 20 18 14 
165af     12 0E 08 00 
165b3     00 FC F4 EE 
165b7     E6 E4 E0 E0 | 	byte	$28, $20, $18, $14, $12, $0e, $08, $00, $00, $fc, $f4, $ee, $e6, $e4, $e0, $e0
165bb     E2 E4 E4 E4 
165bf     E4 E4 E4 E6 
165c3     EC 12 12 14 
165c7     24 2A 30 2A | 	byte	$e2, $e4, $e4, $e4, $e4, $e4, $e4, $e6, $ec, $12, $12, $14, $24, $2a, $30, $2a
165cb     26 1C 18 14 
165cf     10 0C 06 00 
165d3     FE FC F4 EE 
165d7     E6 E4 DC E2 | 	byte	$26, $1c, $18, $14, $10, $0c, $06, $00, $fe, $fc, $f4, $ee, $e6, $e4, $dc, $e2
165db     E2 E4 E2 E4 
165df     E4 E2 E4 E6 
165e3     EE 12 14 1A 
165e7     28 2C 30 28 | 	byte	$e2, $e4, $e2, $e4, $e4, $e2, $e4, $e6, $ee, $12, $14, $1a, $28, $2c, $30, $28
165eb     24 1C 14 14 
165ef     10 08 04 00 
165f3     FE FA F2 EC 
165f7     E4 E2 DC E2 | 	byte	$24, $1c, $14, $14, $10, $08, $04, $00, $fe, $fa, $f2, $ec, $e4, $e2, $dc, $e2
165fb     E2 E4 E2 E4 
165ff     E4 E2 E6 E6 
16603     F2 12 14 1E 
16607     2A 30 2C 28 | 	byte	$e2, $e4, $e2, $e4, $e4, $e2, $e6, $e6, $f2, $12, $14, $1e, $2a, $30, $2c, $28
1660b     20 1A 14 12 
1660f     0E 08 02 00 
16613     FC FA F2 EC 
16617     E4 E2 E0 E2 | 	byte	$20, $1a, $14, $12, $0e, $08, $02, $00, $fc, $fa, $f2, $ec, $e4, $e2, $e0, $e2
1661b     E4 E4 E2 E4 
1661f     E4 E4 E6 E6 
16623     F8 12 1A 24 
16627     2C 32 2A 26 | 	byte	$e4, $e4, $e2, $e4, $e4, $e4, $e6, $e6, $f8, $12, $1a, $24, $2c, $32, $2a, $26
1662b     20 18 14 10 
1662f     0C 06 00 00 
16633     FC F8 F0 E8 
16637     E4 E2 E0 E2 | 	byte	$20, $18, $14, $10, $0c, $06, $00, $00, $fc, $f8, $f0, $e8, $e4, $e2, $e0, $e2
1663b     E4 E2 E4 E4 
1663f     E4 E4 E6 E6 
16643     00 14 1C 28 
16647     30 32 2A 26 | 	byte	$e4, $e2, $e4, $e4, $e4, $e4, $e6, $e6, $00, $14, $1c, $28, $30, $32, $2a, $26
1664b     1E 18 14 10 
1664f     08 06 00 00 
16653     FC F8 EE E8 
16657     E4 E0 E2 E2 | 	byte	$1e, $18, $14, $10, $08, $06, $00, $00, $fc, $f8, $ee, $e8, $e4, $e0, $e2, $e2
1665b     E4 E2 E4 E2 
1665f     E4 E4 E6 E8 
16663     00 14 20 2A 
16667     32 30 28 24 | 	byte	$e4, $e2, $e4, $e2, $e4, $e4, $e6, $e8, $00, $14, $20, $2a, $32, $30, $28, $24
1666b     1C 14 12 0E 
1666f     08 04 00 FE 
16673     FC F4 EE E6 
16677     E4 E0 E2 E2 | 	byte	$1c, $14, $12, $0e, $08, $04, $00, $fe, $fc, $f4, $ee, $e6, $e4, $e0, $e2, $e2
1667b     E4 E2 E4 E2 
1667f     E4 E6 E6 E8 
16683     04 1A 26 30 
16687     32 2C 28 20 | 	byte	$e4, $e2, $e4, $e2, $e4, $e6, $e6, $e8, $04, $1a, $26, $30, $32, $2c, $28, $20
1668b     1A 14 12 0E 
1668f     06 02 00 FE 
16693     FA F2 EC E6 
16697     E4 E0 E4 E2 | 	byte	$1a, $14, $12, $0e, $06, $02, $00, $fe, $fa, $f2, $ec, $e6, $e4, $e0, $e4, $e2
1669b     E4 E2 E4 E2 
1669f     E4 E6 E6 E8 
166a3     0E 1E 2A 32 
166a7     32 2A 26 20 | 	byte	$e4, $e2, $e4, $e2, $e4, $e6, $e6, $e8, $0e, $1e, $2a, $32, $32, $2a, $26, $20
166ab     18 14 10 0C 
166af     06 02 00 FE 
166b3     FA F2 EC E6 
166b7     E4 E2 E4 E4 | 	byte	$18, $14, $10, $0c, $06, $02, $00, $fe, $fa, $f2, $ec, $e6, $e4, $e2, $e4, $e4
166bb     E2 E2 E4 E4 
166bf     E4 E6 E6 EC 
166c3     14 24 2C 34 
166c7     30 2A 24 1E | 	byte	$e2, $e2, $e4, $e4, $e4, $e6, $e6, $ec, $14, $24, $2c, $34, $30, $2a, $24, $1e
166cb     18 12 0E 08 
166cf     06 00 00 FE 
166d3     F8 F0 EC E6 
166d7     E4 E2 E4 E4 | 	byte	$18, $12, $0e, $08, $06, $00, $00, $fe, $f8, $f0, $ec, $e6, $e4, $e2, $e4, $e4
166db     E2 E2 E2 E4 
166df     E4 E8 E8 EC 
166e3     1A 28 30 32 
166e7     30 28 24 1C | 	byte	$e2, $e2, $e2, $e4, $e4, $e8, $e8, $ec, $1a, $28, $30, $32, $30, $28, $24, $1c
166eb     14 12 0E 08 
166ef     04 00 00 FC 
166f3     F8 F0 E8 E6 
166f7     E4 E2 E4 E4 | 	byte	$14, $12, $0e, $08, $04, $00, $00, $fc, $f8, $f0, $e8, $e6, $e4, $e2, $e4, $e4
166fb     E2 E4 E2 E4 
166ff     E6 E8 E8 EE 
16703     20 2A 32 32 
16707     2C 26 20 1A | 	byte	$e2, $e4, $e2, $e4, $e6, $e8, $e8, $ee, $20, $2a, $32, $32, $2c, $26, $20, $1a
1670b     14 10 0C 06 
1670f     04 00 00 FC 
16713     F4 EE E8 E6 
16717     E2 E4 E4 E4 | 	byte	$14, $10, $0c, $06, $04, $00, $00, $fc, $f4, $ee, $e8, $e6, $e2, $e4, $e4, $e4
1671b     E2 E4 E2 E4 
1671f     E6 E8 E8 F4 
16723     28 30 34 30 
16727     2A 26 1E 18 | 	byte	$e2, $e4, $e2, $e4, $e6, $e8, $e8, $f4, $28, $30, $34, $30, $2a, $26, $1e, $18
1672b     14 0E 08 06 
1672f     02 00 FE FA 
16733     F2 EC E8 E6 
16737     E2 E4 E4 E4 | 	byte	$14, $0e, $08, $06, $02, $00, $fe, $fa, $f2, $ec, $e8, $e6, $e2, $e4, $e4, $e4
1673b     E2 E4 E4 E4 
1673f     E6 E8 EC FC 
16743     2A 32 34 30 
16747     2A 24 1C 14 | 	byte	$e2, $e4, $e4, $e4, $e6, $e8, $ec, $fc, $2a, $32, $34, $30, $2a, $24, $1c, $14
1674b     12 0E 08 06 
1674f     02 00 FE FA 
16753     F2 EC E6 E6 
16757     E4 E4 E4 E4 | 	byte	$12, $0e, $08, $06, $02, $00, $fe, $fa, $f2, $ec, $e6, $e6, $e4, $e4, $e4, $e4
1675b     E2 E2 E4 E4 
1675f     E8 E8 EE 00 
16763     30 34 32 2C 
16767     28 20 1C 14 | 	byte	$e2, $e2, $e4, $e4, $e8, $e8, $ee, $00, $30, $34, $32, $2c, $28, $20, $1c, $14
1676b     10 0C 06 04 
1676f     00 00 FC F8 
16773     F0 EC E6 E4 
16777     E4 E4 E4 E2 | 	byte	$10, $0c, $06, $04, $00, $00, $fc, $f8, $f0, $ec, $e6, $e4, $e4, $e4, $e4, $e2
1677b     E4 E2 E6 E6 
1677f     E8 E8 F2 0E 
16783     32 34 30 2A 
16787     26 1E 18 14 | 	byte	$e4, $e2, $e6, $e6, $e8, $e8, $f2, $0e, $32, $34, $30, $2a, $26, $1e, $18, $14
1678b     10 0C 06 04 
1678f     00 00 FC F4 
16793     EE E8 E6 E4 
16797     E6 E4 E4 E2 | 	byte	$10, $0c, $06, $04, $00, $00, $fc, $f4, $ee, $e8, $e6, $e4, $e6, $e4, $e4, $e2
1679b     E4 E4 E6 E6 
1679f     E8 EC F8 1A 
167a3     34 34 2C 2A 
167a7     24 1E 14 12 | 	byte	$e4, $e4, $e6, $e6, $e8, $ec, $f8, $1a, $34, $34, $2c, $2a, $24, $1e, $14, $12
167ab     0E 08 06 04 
167af     00 FE FA F2 
167b3     EC E8 E6 E4 
167b7     E6 E4 E4 E2 | 	byte	$0e, $08, $06, $04, $00, $fe, $fa, $f2, $ec, $e8, $e6, $e4, $e6, $e4, $e4, $e2
167bb     E4 E4 E6 E8 
167bf     E8 EE FE 26 
167c3     36 32 2C 28 
167c7     20 1C 14 10 | 	byte	$e4, $e4, $e6, $e8, $e8, $ee, $fe, $26, $36, $32, $2c, $28, $20, $1c, $14, $10
167cb     0C 08 06 02 
167cf     00 FE FA F2 
167d3     EC E8 E6 E6 
167d7     E6 E6 E4 E2 | 	byte	$0c, $08, $06, $02, $00, $fe, $fa, $f2, $ec, $e8, $e6, $e6, $e6, $e6, $e4, $e2
167db     E4 E6 E6 E8 
167df     E8 F2 00 2C 
167e3     36 30 2A 26 
167e7     1E 18 14 10 | 	byte	$e4, $e6, $e6, $e8, $e8, $f2, $00, $2c, $36, $30, $2a, $26, $1e, $18, $14, $10
167eb     0C 06 04 00 
167ef     00 FC F8 F0 
167f3     EC E8 E6 E6 
167f7     E6 E6 E4 E4 | 	byte	$0c, $06, $04, $00, $00, $fc, $f8, $f0, $ec, $e8, $e6, $e6, $e6, $e6, $e4, $e4
167fb     E4 E6 E6 E8 
167ff     EC FA 06 34 
16803     34 2C 2A 24 
16807     1C 14 12 0E | 	byte	$e4, $e6, $e6, $e8, $ec, $fa, $06, $34, $34, $2c, $2a, $24, $1c, $14, $12, $0e
1680b     08 06 04 00 
1680f     FE FC F4 F0 
16813     EC E8 E6 E8 
16817     E6 E4 E4 E4 | 	byte	$08, $06, $04, $00, $fe, $fc, $f4, $f0, $ec, $e8, $e6, $e8, $e6, $e4, $e4, $e4
1681b     E4 E6 E8 E8 
1681f     F0 00 0E 38 
16823     32 2C 28 20 
16827     1A 14 10 0C | 	byte	$e4, $e6, $e8, $e8, $f0, $00, $0e, $38, $32, $2c, $28, $20, $1a, $14, $10, $0c
1682b     08 06 04 00 
1682f     FE FA F2 EE 
16833     E8 E8 E6 E8 
16837     E6 E4 E4 E4 | 	byte	$08, $06, $04, $00, $fe, $fa, $f2, $ee, $e8, $e8, $e6, $e8, $e6, $e4, $e4, $e4
1683b     E6 E6 E8 EC 
1683f     F4 02 14 38 
16843     30 2A 26 1E 
16847     18 12 0E 0C | 	byte	$e6, $e6, $e8, $ec, $f4, $02, $14, $38, $30, $2a, $26, $1e, $18, $12, $0e, $0c
1684b     06 06 02 00 
1684f     FC F8 F2 EC 
16853     E8 E6 E8 E8 
16857     E6 E4 E4 E4 | 	byte	$06, $06, $02, $00, $fc, $f8, $f2, $ec, $e8, $e6, $e8, $e8, $e6, $e4, $e4, $e4
1685b     E6 E8 E8 EC 
1685f     FC 06 1A 36 
16863     2C 2A 24 1C 
16867     14 10 0E 0C | 	byte	$e6, $e8, $e8, $ec, $fc, $06, $1a, $36, $2c, $2a, $24, $1c, $14, $10, $0e, $0c
1686b     06 04 00 00 
1686f     FC F8 F0 EC 
16873     E8 E6 E8 E8 
16877     E6 E4 E4 E6 | 	byte	$06, $04, $00, $00, $fc, $f8, $f0, $ec, $e8, $e6, $e8, $e8, $e6, $e4, $e4, $e6
1687b     E6 EC E8 F2 
1687f     00 0C 24 34 
16883     2C 28 20 1A 
16887     14 10 0C 08 | 	byte	$e6, $ec, $e8, $f2, $00, $0c, $24, $34, $2c, $28, $20, $1a, $14, $10, $0c, $08
1688b     06 04 00 FE 
1688f     FA F4 EE EC 
16893     E8 E8 E8 E8 
16897     E6 E4 E4 E6 | 	byte	$06, $04, $00, $fe, $fa, $f4, $ee, $ec, $e8, $e8, $e8, $e8, $e6, $e4, $e4, $e6
1689b     E8 EC EC F8 
1689f     02 10 2C 32 
168a3     2A 26 1E 18 
168a7     12 0E 0C 08 | 	byte	$e8, $ec, $ec, $f8, $02, $10, $2c, $32, $2a, $26, $1e, $18, $12, $0e, $0c, $08
168ab     06 02 00 FE 
168af     FA F2 EC EC 
168b3     E8 EC E8 E8 
168b7     E6 E4 E4 E6 | 	byte	$06, $02, $00, $fe, $fa, $f2, $ec, $ec, $e8, $ec, $e8, $e8, $e6, $e4, $e4, $e6
168bb     EC EC EE FC 
168bf     08 12 34 30 
168c3     2A 20 1C 14 
168c7     10 0E 0C 06 | 	byte	$ec, $ec, $ee, $fc, $08, $12, $34, $30, $2a, $20, $1c, $14, $10, $0e, $0c, $06
168cb     04 02 00 FC 
168cf     F8 F0 EC EC 
168d3     E8 EC EC E6 
168d7     E6 E4 E6 E6 | 	byte	$04, $02, $00, $fc, $f8, $f0, $ec, $ec, $e8, $ec, $ec, $e6, $e6, $e4, $e6, $e6
168db     EC EC F2 00 
168df     0E 14 34 2C 
168e3     26 20 1A 14 
168e7     10 0C 08 06 | 	byte	$ec, $ec, $f2, $00, $0e, $14, $34, $2c, $26, $20, $1a, $14, $10, $0c, $08, $06
168eb     04 00 00 FA 
168ef     F4 F0 EC E8 
168f3     EC EC EC E6 
168f7     E6 E6 E6 E8 | 	byte	$04, $00, $00, $fa, $f4, $f0, $ec, $e8, $ec, $ec, $ec, $e6, $e6, $e6, $e6, $e8
168fb     EC EC FA 04 
168ff     10 14 32 2A 
16903     24 1E 18 12 
16907     0E 0C 08 06 | 	byte	$ec, $ec, $fa, $04, $10, $14, $32, $2a, $24, $1e, $18, $12, $0e, $0c, $08, $06
1690b     02 00 FE FA 
1690f     F2 EE EC EC 
16913     EC EC E8 E6 
16917     E6 E6 E6 EC | 	byte	$02, $00, $fe, $fa, $f2, $ee, $ec, $ec, $ec, $ec, $e8, $e6, $e6, $e6, $e6, $ec
1691b     EC F0 00 08 
1691f     12 1E 30 28 
16923     20 1C 14 10 
16927     0C 08 08 04 | 	byte	$ec, $f0, $00, $08, $12, $1e, $30, $28, $20, $1c, $14, $10, $0c, $08, $08, $04
1692b     02 00 FC F8 
1692f     F0 EE EC EC 
16933     EC EC E8 E6 
16937     E6 E8 E8 EC | 	byte	$02, $00, $fc, $f8, $f0, $ee, $ec, $ec, $ec, $ec, $e8, $e6, $e6, $e8, $e8, $ec
1693b     EE F8 02 0E 
1693f     12 28 2C 24 
16943     1E 18 12 0E 
16947     0C 08 06 04 | 	byte	$ee, $f8, $02, $0e, $12, $28, $2c, $24, $1e, $18, $12, $0e, $0c, $08, $06, $04
1694b     00 00 FC F4 
1694f     F0 EE EC EC 
16953     EC EC E8 E6 
16957     E6 E6 EC EC | 	byte	$00, $00, $fc, $f4, $f0, $ee, $ec, $ec, $ec, $ec, $e8, $e6, $e6, $e6, $ec, $ec
1695b     F0 FC 06 10 
1695f     12 2C 2A 20 
16963     1C 14 12 0E 
16967     0C 08 06 02 | 	byte	$f0, $fc, $06, $10, $12, $2c, $2a, $20, $1c, $14, $12, $0e, $0c, $08, $06, $02
1696b     00 FE FA F2 
1696f     F0 EC EC EC 
16973     EC E8 E8 E6 
16977     E8 E8 EC EC | 	byte	$00, $fe, $fa, $f2, $f0, $ec, $ec, $ec, $ec, $e8, $e8, $e6, $e8, $e8, $ec, $ec
1697b     F4 00 0C 12 
1697f     10 30 28 20 
16983     1A 14 10 0C 
16987     08 06 04 02 | 	byte	$f4, $00, $0c, $12, $10, $30, $28, $20, $1a, $14, $10, $0c, $08, $06, $04, $02
1698b     00 FC F8 F0 
1698f     EE EC EE EC 
16993     EC E8 E6 E6 
16997     E8 EC EC EE | 	byte	$00, $fc, $f8, $f0, $ee, $ec, $ee, $ec, $ec, $e8, $e6, $e6, $e8, $ec, $ec, $ee
1699b     FA 04 0E 12 
1699f     14 2A 26 1C 
169a3     18 12 0E 0C 
169a7     08 06 04 00 | 	byte	$fa, $04, $0e, $12, $14, $2a, $26, $1c, $18, $12, $0e, $0c, $08, $06, $04, $00
169ab     00 FA F4 F0 
169af     EE EC EE EC 
169b3     EC E8 E6 E8 
169b7     E8 EC EC F2 | 	byte	$00, $fa, $f4, $f0, $ee, $ec, $ee, $ec, $ec, $e8, $e6, $e8, $e8, $ec, $ec, $f2
169bb     00 08 10 10 
169bf     1A 2A 24 1A 
169c3     14 12 0E 08 
169c7     06 04 02 00 | 	byte	$00, $08, $10, $10, $1a, $2a, $24, $1a, $14, $12, $0e, $08, $06, $04, $02, $00
169cb     FE FA F2 F0 
169cf     EC EE EE EC 
169d3     EC E8 E8 E8 
169d7     EC EC EE F8 | 	byte	$fe, $fa, $f2, $f0, $ec, $ee, $ee, $ec, $ec, $e8, $e8, $e8, $ec, $ec, $ee, $f8
169db     02 0C 10 0E 
169df     24 26 20 18 
169e3     14 10 0C 08 
169e7     06 04 00 00 | 	byte	$02, $0c, $10, $0e, $24, $26, $20, $18, $14, $10, $0c, $08, $06, $04, $00, $00
169eb     FC F8 F2 F0 
169ef     EE EE EE EC 
169f3     EC E8 E8 EC 
169f7     EC EC F2 00 | 	byte	$fc, $f8, $f2, $f0, $ee, $ee, $ee, $ec, $ec, $e8, $e8, $ec, $ec, $ec, $f2, $00
169fb     04 10 10 0E 
169ff     28 26 1C 14 
16a03     12 10 08 08 
16a07     04 02 00 FE | 	byte	$04, $10, $10, $0e, $28, $26, $1c, $14, $12, $10, $08, $08, $04, $02, $00, $fe
16a0b     FA F4 F2 EE 
16a0f     F0 EE EE EC 
16a13     E8 E8 E8 EC 
16a17     EC EE F8 00 | 	byte	$fa, $f4, $f2, $ee, $f0, $ee, $ee, $ec, $e8, $e8, $e8, $ec, $ec, $ee, $f8, $00
16a1b     0C 10 0E 0E 
16a1f     2A 20 18 14 
16a23     12 0E 08 06 
16a27     04 00 00 FE | 	byte	$0c, $10, $0e, $0e, $2a, $20, $18, $14, $12, $0e, $08, $06, $04, $00, $00, $fe
16a2b     F8 F4 F0 F0 
16a2f     F0 F0 EC EC 
16a33     E8 E8 EC EC 
16a37     EC F0 FE 04 | 	byte	$f8, $f4, $f0, $f0, $f0, $f0, $ec, $ec, $e8, $e8, $ec, $ec, $ec, $f0, $fe, $04
16a3b     0E 10 0C 14 
16a3f     26 1E 14 12 
16a43     10 0C 08 04 
16a47     02 00 00 FA | 	byte	$0e, $10, $0c, $14, $26, $1e, $14, $12, $10, $0c, $08, $04, $02, $00, $00, $fa
16a4b     F4 F2 F0 F0 
16a4f     F0 EE EC EC 
16a53     EC E8 EC EC 
16a57     EE F4 00 08 | 	byte	$f4, $f2, $f0, $f0, $f0, $ee, $ec, $ec, $ec, $e8, $ec, $ec, $ee, $f4, $00, $08
16a5b     10 0E 08 1E 
16a5f     24 1C 14 12 
16a63     0E 0C 06 04 
16a67     02 00 FE FA | 	byte	$10, $0e, $08, $1e, $24, $1c, $14, $12, $0e, $0c, $06, $04, $02, $00, $fe, $fa
16a6b     F4 F2 F2 F0 
16a6f     F0 EE EC EC 
16a73     E8 EC EC EC 
16a77     EE FC 02 0E | 	byte	$f4, $f2, $f2, $f0, $f0, $ee, $ec, $ec, $e8, $ec, $ec, $ec, $ee, $fc, $02, $0e
16a7b     10 0C 06 26 
16a7f     20 1A 14 10 
16a83     0E 08 06 02 
16a87     00 00 FC F8 | 	byte	$10, $0c, $06, $26, $20, $1a, $14, $10, $0e, $08, $06, $02, $00, $00, $fc, $f8
16a8b     F4 F2 F2 F2 
16a8f     F0 EE EC EC 
16a93     E8 EC EC EE 
16a97     F2 00 08 0E | 	byte	$f4, $f2, $f2, $f2, $f0, $ee, $ec, $ec, $e8, $ec, $ec, $ee, $f2, $00, $08, $0e
16a9b     10 08 08 26 
16a9f     1C 18 12 10 
16aa3     0C 06 04 02 
16aa7     00 00 FA F8 | 	byte	$10, $08, $08, $26, $1c, $18, $12, $10, $0c, $06, $04, $02, $00, $00, $fa, $f8
16aab     F2 F2 F2 F2 
16aaf     F0 EE EC EC 
16ab3     EC EC EC EE 
16ab7     F8 00 0C 10 | 	byte	$f2, $f2, $f2, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ec, $ee, $f8, $00, $0c, $10
16abb     0C 06 12 20 
16abf     1C 18 12 0E 
16ac3     0C 06 02 00 
16ac7     00 FE FA F4 | 	byte	$0c, $06, $12, $20, $1c, $18, $12, $0e, $0c, $06, $02, $00, $00, $fe, $fa, $f4
16acb     F2 F2 F2 F0 
16acf     EE EC EC EC 
16ad3     EC EC EE F2 
16ad7     FC 04 0E 10 | 	byte	$f2, $f2, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ec, $ee, $f2, $fc, $04, $0e, $10
16adb     08 04 1C 1E 
16adf     1A 14 10 0E 
16ae3     08 04 02 00 
16ae7     00 FC F8 F4 | 	byte	$08, $04, $1c, $1e, $1a, $14, $10, $0e, $08, $04, $02, $00, $00, $fc, $f8, $f4
16aeb     F4 F2 F2 F0 
16aef     EE EC EC EC 
16af3     EC EC EE F8 
16af7     00 0C 10 0E | 	byte	$f4, $f2, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ec, $ee, $f8, $00, $0c, $10, $0e
16afb     06 04 20 1C 
16aff     18 14 0E 0C 
16b03     06 04 00 00 
16b07     FE FA F8 F4 | 	byte	$06, $04, $20, $1c, $18, $14, $0e, $0c, $06, $04, $00, $00, $fe, $fa, $f8, $f4
16b0b     F4 F4 F2 F0 
16b0f     EE EC EC EC 
16b13     EC EC F0 FA 
16b17     02 0E 10 0C | 	byte	$f4, $f4, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ec, $f0, $fa, $02, $0e, $10, $0c
16b1b     06 04 20 1A 
16b1f     18 12 0E 08 
16b23     06 02 00 00 
16b27     FC FA F4 F4 | 	byte	$06, $04, $20, $1a, $18, $12, $0e, $08, $06, $02, $00, $00, $fc, $fa, $f4, $f4
16b2b     F4 F4 F2 F0 
16b2f     EC EC EC EC 
16b33     EC EE F2 00 
16b37     06 10 10 06 | 	byte	$f4, $f4, $f2, $f0, $ec, $ec, $ec, $ec, $ec, $ee, $f2, $00, $06, $10, $10, $06
16b3b     04 0E 1E 1A 
16b3f     14 10 0C 08 
16b43     04 02 00 FE 
16b47     FC FA F4 F8 | 	byte	$04, $0e, $1e, $1a, $14, $10, $0c, $08, $04, $02, $00, $fe, $fc, $fa, $f4, $f8
16b4b     F4 F4 F2 EE 
16b4f     EE EC EC EC 
16b53     EC EE F8 00 
16b57     0C 10 0C 06 | 	byte	$f4, $f4, $f2, $ee, $ee, $ec, $ec, $ec, $ec, $ee, $f8, $00, $0c, $10, $0c, $06
16b5b     02 14 1C 18 
16b5f     14 10 0C 08 
16b63     04 00 00 FC 
16b67     FA F8 F4 F8 | 	byte	$02, $14, $1c, $18, $14, $10, $0c, $08, $04, $00, $00, $fc, $fa, $f8, $f4, $f8
16b6b     F4 F2 F0 EE 
16b6f     EC EC EC EC 
16b73     EE F2 FC 04 
16b77     0E 10 08 04 | 	byte	$f4, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ee, $f2, $fc, $04, $0e, $10, $08, $04
16b7b     02 1C 1C 18 
16b7f     12 0E 08 06 
16b83     02 00 00 FC 
16b87     FA F4 F8 F8 | 	byte	$02, $1c, $1c, $18, $12, $0e, $08, $06, $02, $00, $00, $fc, $fa, $f4, $f8, $f8
16b8b     F4 F2 F0 EE 
16b8f     EC EC EC EC 
16b93     EE F4 00 08 
16b97     10 0E 06 04 | 	byte	$f4, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ee, $f4, $00, $08, $10, $0e, $06, $04
16b9b     02 1E 1A 14 
16b9f     12 0C 08 04 
16ba3     00 00 FE FA 
16ba7     FA F8 F8 F8 | 	byte	$02, $1e, $1a, $14, $12, $0c, $08, $04, $00, $00, $fe, $fa, $fa, $f8, $f8, $f8
16bab     F4 F2 EE EE 
16baf     EC EC EC EC 
16bb3     F0 F8 00 0C 
16bb7     10 0C 06 02 | 	byte	$f4, $f2, $ee, $ee, $ec, $ec, $ec, $ec, $f0, $f8, $00, $0c, $10, $0c, $06, $02
16bbb     06 1C 18 14 
16bbf     10 08 06 04 
16bc3     00 00 FC FA 
16bc7     F8 F8 F8 F8 | 	byte	$06, $1c, $18, $14, $10, $08, $06, $04, $00, $00, $fc, $fa, $f8, $f8, $f8, $f8
16bcb     F4 F2 EE EC 
16bcf     EC EC EC EE 
16bd3     F2 FC 04 0E 
16bd7     10 08 04 00 | 	byte	$f4, $f2, $ee, $ec, $ec, $ec, $ec, $ee, $f2, $fc, $04, $0e, $10, $08, $04, $00
16bdb     12 1A 18 12 
16bdf     0E 08 06 02 
16be3     00 FE FC FA 
16be7     F8 F8 F8 F8 | 	byte	$12, $1a, $18, $12, $0e, $08, $06, $02, $00, $fe, $fc, $fa, $f8, $f8, $f8, $f8
16beb     F4 F0 EE EC 
16bef     EC EC EC EE 
16bf3     F8 00 08 10 
16bf7     0E 06 02 00 | 	byte	$f4, $f0, $ee, $ec, $ec, $ec, $ec, $ee, $f8, $00, $08, $10, $0e, $06, $02, $00
16bfb     14 1A 14 12 
16bff     0C 06 04 02 
16c03     00 FE FA FA 
16c07     F8 F8 F8 F4 | 	byte	$14, $1a, $14, $12, $0c, $06, $04, $02, $00, $fe, $fa, $fa, $f8, $f8, $f8, $f4
16c0b     F2 F0 EE EC 
16c0f     EE EC EE F0 
16c13     FA 02 0E 10 
16c17     0C 06 02 00 | 	byte	$f2, $f0, $ee, $ec, $ee, $ec, $ee, $f0, $fa, $02, $0e, $10, $0c, $06, $02, $00
16c1b     1C 18 14 10 
16c1f     0C 06 04 00 
16c23     00 FC FA FA 
16c27     F8 F8 F8 F4 | 	byte	$1c, $18, $14, $10, $0c, $06, $04, $00, $00, $fc, $fa, $fa, $f8, $f8, $f8, $f4
16c2b     F2 F0 EE EC 
16c2f     EC EC EE F2 
16c33     FE 06 0E 10 
16c37     08 04 00 00 | 	byte	$f2, $f0, $ee, $ec, $ec, $ec, $ee, $f2, $fe, $06, $0e, $10, $08, $04, $00, $00
16c3b     1C 18 12 10 
16c3f     08 04 02 00 
16c43     FE FC FA F8 
16c47     FA FA F8 F4 | 	byte	$1c, $18, $12, $10, $08, $04, $02, $00, $fe, $fc, $fa, $f8, $fa, $fa, $f8, $f4
16c4b     F0 F0 EC EE 
16c4f     EC EE EE F8 
16c53     00 08 10 0E 
16c57     08 04 00 06 | 	byte	$f0, $f0, $ec, $ee, $ec, $ee, $ee, $f8, $00, $08, $10, $0e, $08, $04, $00, $06
16c5b     1A 14 12 0E 
16c5f     06 04 02 00 
16c63     FE FA FA F8 
16c67     FA FA F8 F4 | 	byte	$1a, $14, $12, $0e, $06, $04, $02, $00, $fe, $fa, $fa, $f8, $fa, $fa, $f8, $f4
16c6b     F0 F0 EC EE 
16c6f     EE EE F0 FC 
16c73     02 0E 10 0C 
16c77     06 02 00 0E | 	byte	$f0, $f0, $ec, $ee, $ee, $ee, $f0, $fc, $02, $0e, $10, $0c, $06, $02, $00, $0e
16c7b     18 14 10 0C 
16c7f     06 04 00 00 
16c83     FC FA FA FA 
16c87     FA FA F4 F2 | 	byte	$18, $14, $10, $0c, $06, $04, $00, $00, $fc, $fa, $fa, $fa, $fa, $fa, $f4, $f2
16c8b     F0 F0 EE EE 
16c8f     EE EE F4 00 
16c93     06 0E 10 08 
16c97     06 00 00 14 | 	byte	$f0, $f0, $ee, $ee, $ee, $ee, $f4, $00, $06, $0e, $10, $08, $06, $00, $00, $14
16c9b     18 14 10 08 
16c9f     04 02 00 00 
16ca3     FC FA FA FA 
16ca7     FA FA F4 F2 | 	byte	$18, $14, $10, $08, $04, $02, $00, $00, $fc, $fa, $fa, $fa, $fa, $fa, $f4, $f2
16cab     F0 EE EE EE 
16caf     EE EE F8 00 
16cb3     0C 10 0E 08 
16cb7     04 00 00 18 | 	byte	$f0, $ee, $ee, $ee, $ee, $ee, $f8, $00, $0c, $10, $0e, $08, $04, $00, $00, $18
16cbb     14 12 0E 08 
16cbf     04 02 00 FE 
16cc3     FC FA FA FA 
16cc7     FA F8 F4 F0 | 	byte	$14, $12, $0e, $08, $04, $02, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f8, $f4, $f0
16ccb     F0 EE EE EE 
16ccf     EE F2 FC 04 
16cd3     0E 10 0C 06 
16cd7     02 00 00 1A | 	byte	$f0, $ee, $ee, $ee, $ee, $f2, $fc, $04, $0e, $10, $0c, $06, $02, $00, $00, $1a
16cdb     14 10 0C 06 
16cdf     02 00 00 FE 
16ce3     FA FA FA FA 
16ce7     FA F8 F2 F0 | 	byte	$14, $10, $0c, $06, $02, $00, $00, $fe, $fa, $fa, $fa, $fa, $fa, $f8, $f2, $f0
16ceb     F0 EE EE EE 
16cef     EE F4 00 06 
16cf3     0E 0E 0C 06 
16cf7     02 00 00 18 | 	byte	$f0, $ee, $ee, $ee, $ee, $f4, $00, $06, $0e, $0e, $0c, $06, $02, $00, $00, $18
16cfb     14 10 0C 06 
16cff     02 00 00 FC 
16d03     FA FA FA FA 
16d07     FA F4 F2 F0 | 	byte	$14, $10, $0c, $06, $02, $00, $00, $fc, $fa, $fa, $fa, $fa, $fa, $f4, $f2, $f0
16d0b     F0 EE EE EE 
16d0f     F0 FA 00 0C 
16d13     10 0E 08 04 
16d17     00 00 06 14 | 	byte	$f0, $ee, $ee, $ee, $f0, $fa, $00, $0c, $10, $0e, $08, $04, $00, $00, $06, $14
16d1b     12 0E 08 04 
16d1f     02 00 00 FC 
16d23     FA FA FA FA 
16d27     FA F4 F2 F0 | 	byte	$12, $0e, $08, $04, $02, $00, $00, $fc, $fa, $fa, $fa, $fa, $fa, $f4, $f2, $f0
16d2b     F0 F0 EE F0 
16d2f     F2 FE 04 0E 
16d33     0E 0C 06 04 
16d37     00 00 0E 14 | 	byte	$f0, $f0, $ee, $f0, $f2, $fe, $04, $0e, $0e, $0c, $06, $04, $00, $00, $0e, $14
16d3b     10 0E 08 04 
16d3f     00 00 FE FC 
16d43     FA FA FA FA 
16d47     F8 F4 F0 F0 | 	byte	$10, $0e, $08, $04, $00, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f8, $f4, $f0, $f0
16d4b     F0 F0 EE F0 
16d4f     F4 00 08 10 
16d53     0E 0C 06 02 
16d57     00 FE 12 14 | 	byte	$f0, $f0, $ee, $f0, $f4, $00, $08, $10, $0e, $0c, $06, $02, $00, $fe, $12, $14
16d5b     10 0C 06 02 
16d5f     00 00 FE FC 
16d63     FA FA FA FA 
16d67     F8 F2 F0 F0 | 	byte	$10, $0c, $06, $02, $00, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f8, $f2, $f0, $f0
16d6b     F0 F0 EE F0 
16d6f     FA 02 0C 10 
16d73     0C 08 04 02 
16d77     00 FE 14 12 | 	byte	$f0, $f0, $ee, $f0, $fa, $02, $0c, $10, $0c, $08, $04, $02, $00, $fe, $14, $12
16d7b     0E 08 06 02 
16d7f     00 00 00 FA 
16d83     FA FA FA FA 
16d87     F4 F2 F0 F0 | 	byte	$0e, $08, $06, $02, $00, $00, $00, $fa, $fa, $fa, $fa, $fa, $f4, $f2, $f0, $f0
16d8b     F0 F0 F0 F2 
16d8f     FE 04 0E 0E 
16d93     0C 08 04 00 
16d97     00 FE 14 10 | 	byte	$f0, $f0, $f0, $f2, $fe, $04, $0e, $0e, $0c, $08, $04, $00, $00, $fe, $14, $10
16d9b     0E 08 04 02 
16d9f     00 00 FC FA 
16da3     FA FA FA FA 
16da7     F4 F2 F2 F0 | 	byte	$0e, $08, $04, $02, $00, $00, $fc, $fa, $fa, $fa, $fa, $fa, $f4, $f2, $f2, $f0
16dab     F0 F0 F0 F8 
16daf     00 08 0E 0E 
16db3     0C 06 02 00 
16db7     FE FE 14 10 | 	byte	$f0, $f0, $f0, $f8, $00, $08, $0e, $0e, $0c, $06, $02, $00, $fe, $fe, $14, $10
16dbb     0C 06 04 00 
16dbf     00 00 FC FA 
16dc3     FA FA FA F8 
16dc7     F4 F2 F2 F0 | 	byte	$0c, $06, $04, $00, $00, $00, $fc, $fa, $fa, $fa, $fa, $f8, $f4, $f2, $f2, $f0
16dcb     F0 F0 F2 FA 
16dcf     02 0C 10 0C 
16dd3     08 06 02 00 
16dd7     FE 00 14 10 | 	byte	$f0, $f0, $f2, $fa, $02, $0c, $10, $0c, $08, $06, $02, $00, $fe, $00, $14, $10
16ddb     0C 06 02 00 
16ddf     00 FE FC FA 
16de3     FA FA FA F8 
16de7     F2 F2 F2 F0 | 	byte	$0c, $06, $02, $00, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f8, $f2, $f2, $f2, $f0
16deb     F0 F0 F4 FE 
16def     06 0E 0E 0C 
16df3     08 04 00 00 
16df7     FC 00 12 0E | 	byte	$f0, $f0, $f4, $fe, $06, $0e, $0e, $0c, $08, $04, $00, $00, $fc, $00, $12, $0e
16dfb     0C 06 02 00 
16dff     00 FE FC FA 
16e03     FA FA FA F8 
16e07     F2 F2 F2 F0 | 	byte	$0c, $06, $02, $00, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f8, $f2, $f2, $f2, $f0
16e0b     F2 F2 F8 00 
16e0f     08 0E 0E 0C 
16e13     08 04 00 00 
16e17     FC 04 10 0E | 	byte	$f2, $f2, $f8, $00, $08, $0e, $0e, $0c, $08, $04, $00, $00, $fc, $04, $10, $0e
16e1b     08 04 02 00 
16e1f     00 FE FC FA 
16e23     FA FA F8 F4 
16e27     F2 F2 F2 F0 | 	byte	$08, $04, $02, $00, $00, $fe, $fc, $fa, $fa, $fa, $f8, $f4, $f2, $f2, $f2, $f0
16e2b     F2 F2 FC 02 
16e2f     0C 0E 0C 08 
16e33     06 02 00 FE 
16e37     FA 06 10 0C | 	byte	$f2, $f2, $fc, $02, $0c, $0e, $0c, $08, $06, $02, $00, $fe, $fa, $06, $10, $0c
16e3b     06 04 00 00 
16e3f     00 00 FC FA 
16e43     FA FA F8 F4 
16e47     F2 F2 F2 F2 | 	byte	$06, $04, $00, $00, $00, $00, $fc, $fa, $fa, $fa, $f8, $f4, $f2, $f2, $f2, $f2
16e4b     F2 F8 00 06 
16e4f     0E 0E 0C 08 
16e53     04 00 00 FC 
16e57     FA 08 0E 0C | 	byte	$f2, $f8, $00, $06, $0e, $0e, $0c, $08, $04, $00, $00, $fc, $fa, $08, $0e, $0c
16e5b     06 04 00 00 
16e5f     00 FC FC FA 
16e63     FA F8 F8 F4 
16e67     F2 F2 F2 F2 | 	byte	$06, $04, $00, $00, $00, $fc, $fc, $fa, $fa, $f8, $f8, $f4, $f2, $f2, $f2, $f2
16e6b     F2 FA 00 08 
16e6f     0E 0E 08 08 
16e73     04 00 00 FC 
16e77     FA 0C 0E 0C | 	byte	$f2, $fa, $00, $08, $0e, $0e, $08, $08, $04, $00, $00, $fc, $fa, $0c, $0e, $0c
16e7b     06 02 00 00 
16e7f     FE FC FC FA 
16e83     FA FA F8 F4 
16e87     F2 F4 F2 F2 | 	byte	$06, $02, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f2, $f4, $f2, $f2
16e8b     F4 FE 04 0C 
16e8f     0E 0C 08 06 
16e93     02 00 FE FA 
16e97     F8 0E 0E 08 | 	byte	$f4, $fe, $04, $0c, $0e, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $0e, $0e, $08
16e9b     04 02 00 00 
16e9f     FE FC FC FA 
16ea3     FA FA F8 F4 
16ea7     F2 F4 F2 F2 | 	byte	$04, $02, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f2, $f4, $f2, $f2
16eab     F8 00 06 0E 
16eaf     0C 0C 08 06 
16eb3     02 00 FE FA 
16eb7     F8 0E 0C 06 | 	byte	$f8, $00, $06, $0e, $0c, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $0e, $0c, $06
16ebb     04 00 00 00 
16ebf     FE FC FC FA 
16ec3     FA F8 F4 F4 
16ec7     F4 F4 F2 F4 | 	byte	$04, $00, $00, $00, $fe, $fc, $fc, $fa, $fa, $f8, $f4, $f4, $f4, $f4, $f2, $f4
16ecb     FC 02 0C 0E 
16ecf     0C 08 06 04 
16ed3     00 00 FC F8 
16ed7     F8 0E 0C 06 | 	byte	$fc, $02, $0c, $0e, $0c, $08, $06, $04, $00, $00, $fc, $f8, $f8, $0e, $0c, $06
16edb     02 00 00 00 
16edf     FE FC FA FA 
16ee3     FA FA F4 F4 
16ee7     F4 F4 F2 F8 | 	byte	$02, $00, $00, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f4, $f4, $f4, $f4, $f2, $f8
16eeb     00 04 0E 0E 
16eef     0C 08 06 02 
16ef3     00 FE FA F8 
16ef7     F8 0E 0C 06 | 	byte	$00, $04, $0e, $0e, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $f8, $0e, $0c, $06
16efb     02 00 00 00 
16eff     FC FC FA FA 
16f03     FA F8 F4 F4 
16f07     F4 F4 F4 FA | 	byte	$02, $00, $00, $00, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f4, $f4, $f4, $f4, $fa
16f0b     00 08 0E 0C 
16f0f     0C 08 06 02 
16f13     00 FE FA F8 
16f17     FA 0E 08 04 | 	byte	$00, $08, $0e, $0c, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $fa, $0e, $08, $04
16f1b     02 00 00 FE 
16f1f     FC FC FA FA 
16f23     FA F8 F4 F4 
16f27     F8 F4 F8 FE | 	byte	$02, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f4, $f8, $f4, $f8, $fe
16f2b     04 0C 0E 0C 
16f2f     0C 06 04 00 
16f33     00 FC F8 F8 
16f37     FC 0E 08 04 | 	byte	$04, $0c, $0e, $0c, $0c, $06, $04, $00, $00, $fc, $f8, $f8, $fc, $0e, $08, $04
16f3b     00 00 00 FE 
16f3f     FC FC FA FA 
16f43     FA F8 F4 F4 
16f47     F8 F4 FA 00 | 	byte	$00, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f4, $f8, $f4, $fa, $00
16f4b     06 0E 0E 0C 
16f4f     08 06 02 00 
16f53     FE FA F8 F4 
16f57     FE 0C 06 02 | 	byte	$06, $0e, $0e, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $f4, $fe, $0c, $06, $02
16f5b     00 00 00 FE 
16f5f     FC FC FA FA 
16f63     FA F8 F4 F8 
16f67     F8 F8 FC 02 | 	byte	$00, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f8, $f8, $f8, $fc, $02
16f6b     0C 0E 0C 0C 
16f6f     06 04 00 00 
16f73     FE FA F8 F4 
16f77     00 0C 06 02 | 	byte	$0c, $0e, $0c, $0c, $06, $04, $00, $00, $fe, $fa, $f8, $f4, $00, $0c, $06, $02
16f7b     00 00 00 FE 
16f7f     FC FC FA FA 
16f83     FA F8 F4 F8 
16f87     F4 FA 00 04 | 	byte	$00, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f8, $f4, $fa, $00, $04
16f8b     0E 0E 0C 08 
16f8f     06 02 00 00 
16f93     FC F8 F4 F4 
16f97     02 08 04 00 | 	byte	$0e, $0e, $0c, $08, $06, $02, $00, $00, $fc, $f8, $f4, $f4, $02, $08, $04, $00
16f9b     00 00 FE FE 
16f9f     FC FC FA FA 
16fa3     FA F8 F8 F8 
16fa7     F8 FC 00 08 | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f8, $f8, $f8, $fc, $00, $08
16fab     10 0E 0C 08 
16faf     06 02 00 FE 
16fb3     FA F8 F4 F4 
16fb7     04 08 04 00 | 	byte	$10, $0e, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $f4, $f4, $04, $08, $04, $00
16fbb     00 00 00 FC 
16fbf     FC FC FA FA 
16fc3     FA F8 F8 F8 
16fc7     FA 00 04 0C | 	byte	$00, $00, $00, $fc, $fc, $fc, $fa, $fa, $fa, $f8, $f8, $f8, $fa, $00, $04, $0c
16fcb     10 0E 0C 08 
16fcf     04 00 00 FE 
16fd3     FA F8 F4 F4 
16fd7     08 06 02 00 | 	byte	$10, $0e, $0c, $08, $04, $00, $00, $fe, $fa, $f8, $f4, $f4, $08, $06, $02, $00
16fdb     00 00 FE FC 
16fdf     FC FC FA FA 
16fe3     F8 F8 F8 F8 
16fe7     FC 00 06 0E | 	byte	$00, $00, $fe, $fc, $fc, $fc, $fa, $fa, $f8, $f8, $f8, $f8, $fc, $00, $06, $0e
16feb     10 0C 08 06 
16fef     02 00 00 FC 
16ff3     F8 F4 F4 F4 
16ff7     08 06 02 00 | 	byte	$10, $0c, $08, $06, $02, $00, $00, $fc, $f8, $f4, $f4, $f4, $08, $06, $02, $00
16ffb     00 00 FE FC 
16fff     FC FC FA FA 
17003     FA F8 FA FA 
17007     FE 02 0C 10 | 	byte	$00, $00, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $f8, $fa, $fa, $fe, $02, $0c, $10
1700b     0E 0C 08 04 
1700f     00 00 FE FA 
17013     F8 F4 F4 F4 
17017     08 04 00 00 | 	byte	$0e, $0c, $08, $04, $00, $00, $fe, $fa, $f8, $f4, $f4, $f4, $08, $04, $00, $00
1701b     00 FE FE FC 
1701f     FC FC FA FA 
17023     F8 F8 F8 FC 
17027     00 04 0E 10 | 	byte	$00, $fe, $fe, $fc, $fc, $fc, $fa, $fa, $f8, $f8, $f8, $fc, $00, $04, $0e, $10
1702b     0E 0C 06 04 
1702f     00 00 FC FA 
17033     F8 F4 F4 F8 
17037     08 02 00 00 | 	byte	$0e, $0c, $06, $04, $00, $00, $fc, $fa, $f8, $f4, $f4, $f8, $08, $02, $00, $00
1703b     00 FE FC FC 
1703f     FC FC FA FA 
17043     FA FA FA FE 
17047     00 08 10 10 | 	byte	$00, $fe, $fc, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fe, $00, $08, $10, $10
1704b     0E 08 06 02 
1704f     00 00 FC F8 
17053     F4 F4 F4 FC 
17057     06 02 00 00 | 	byte	$0e, $08, $06, $02, $00, $00, $fc, $f8, $f4, $f4, $f4, $fc, $06, $02, $00, $00
1705b     00 00 FC FC 
1705f     FC FC FA FA 
17063     FA FA FC 00 
17067     04 0E 10 0E | 	byte	$00, $00, $fc, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fc, $00, $04, $0e, $10, $0e
1706b     0C 08 04 00 
1706f     00 FE FA F8 
17073     F4 F4 F4 00 
17077     04 02 00 00 | 	byte	$0c, $08, $04, $00, $00, $fe, $fa, $f8, $f4, $f4, $f4, $00, $04, $02, $00, $00
1707b     FE FE FC FC 
1707f     FC FC FC FA 
17083     FA FA FE 00 
17087     08 0E 10 0E | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fa, $fa, $fa, $fe, $00, $08, $0e, $10, $0e
1708b     0C 06 02 00 
1708f     00 FC FA F8 
17093     F4 F4 F2 00 
17097     04 00 00 00 | 	byte	$0c, $06, $02, $00, $00, $fc, $fa, $f8, $f4, $f4, $f2, $00, $04, $00, $00, $00
1709b     00 FC FE FC 
1709f     FC FA FC FA 
170a3     FA FC 00 04 
170a7     0C 10 10 0E | 	byte	$00, $fc, $fe, $fc, $fc, $fa, $fc, $fa, $fa, $fc, $00, $04, $0c, $10, $10, $0e
170ab     08 06 02 00 
170af     FE FC F8 F4 
170b3     F4 F4 F2 04 
170b7     02 00 00 00 | 	byte	$08, $06, $02, $00, $fe, $fc, $f8, $f4, $f4, $f4, $f2, $04, $02, $00, $00, $00
170bb     FE FC FE FC 
170bf     FC FC FA FC 
170c3     FA FE 00 06 
170c7     0E 10 10 0C | 	byte	$fe, $fc, $fe, $fc, $fc, $fc, $fa, $fc, $fa, $fe, $00, $06, $0e, $10, $10, $0c
170cb     08 04 00 00 
170cf     FE FA F8 F4 
170d3     F4 F2 F2 06 
170d7     02 00 00 00 | 	byte	$08, $04, $00, $00, $fe, $fa, $f8, $f4, $f4, $f2, $f2, $06, $02, $00, $00, $00
170db     FE FE FE FC 
170df     FC FC FC FC 
170e3     FA 00 02 0C 
170e7     10 10 0E 0C | 	byte	$fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fa, $00, $02, $0c, $10, $10, $0e, $0c
170eb     06 02 00 FE 
170ef     FC FA F8 F4 
170f3     F4 F2 F4 06 
170f7     00 00 00 00 | 	byte	$06, $02, $00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f4, $06, $00, $00, $00, $00
170fb     FE FE FE FC 
170ff     FC FC FC FC 
17103     FC 00 06 0E 
17107     12 10 0E 08 | 	byte	$fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $00, $06, $0e, $12, $10, $0e, $08
1710b     04 00 00 FE 
1710f     FC FA F4 F4 
17113     F2 F2 FA 04 
17117     00 00 00 FE | 	byte	$04, $00, $00, $fe, $fc, $fa, $f4, $f4, $f2, $f2, $fa, $04, $00, $00, $00, $fe
1711b     FE FE FE FC 
1711f     FC FC FC FC 
17123     FE 00 08 10 
17127     10 10 0C 08 | 	byte	$fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fe, $00, $08, $10, $10, $10, $0c, $08
1712b     02 00 00 FC 
1712f     FA FA F4 F4 
17133     F2 F0 00 02 
17137     00 00 00 FE | 	byte	$02, $00, $00, $fc, $fa, $fa, $f4, $f4, $f2, $f0, $00, $02, $00, $00, $00, $fe
1713b     FE 00 FC FC 
1713f     FC FC FC FE 
17143     00 04 0E 12 
17147     10 0E 0C 06 | 	byte	$fe, $00, $fc, $fc, $fc, $fc, $fc, $fe, $00, $04, $0e, $12, $10, $0e, $0c, $06
1714b     02 00 FE FC 
1714f     FA F8 F4 F2 
17153     F2 F0 00 02 
17157     00 00 00 FE | 	byte	$02, $00, $fe, $fc, $fa, $f8, $f4, $f2, $f2, $f0, $00, $02, $00, $00, $00, $fe
1715b     FE FE FC FC 
1715f     FC FC FC FE 
17163     00 08 10 12 
17167     10 0E 08 04 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fe, $00, $08, $10, $12, $10, $0e, $08, $04
1716b     00 00 FC FA 
1716f     FA F8 F4 F2 
17173     F0 F0 04 00 
17177     00 00 00 00 | 	byte	$00, $00, $fc, $fa, $fa, $f8, $f4, $f2, $f0, $f0, $04, $00, $00, $00, $00, $00
1717b     FE FE FC FC 
1717f     FE FC FE 00 
17183     02 0C 12 12 
17187     0E 0C 06 02 | 	byte	$fe, $fe, $fc, $fc, $fe, $fc, $fe, $00, $02, $0c, $12, $12, $0e, $0c, $06, $02
1718b     00 FE FC FA 
1718f     FA F8 F2 F2 
17193     F0 F2 04 00 
17197     00 00 00 FE | 	byte	$00, $fe, $fc, $fa, $fa, $f8, $f2, $f2, $f0, $f2, $04, $00, $00, $00, $00, $fe
1719b     FE FC FC FC 
1719f     FE FE FE 00 
171a3     06 10 12 12 
171a7     0E 08 04 00 | 	byte	$fe, $fc, $fc, $fc, $fe, $fe, $fe, $00, $06, $10, $12, $12, $0e, $08, $04, $00
171ab     00 FE FC FA 
171af     F8 F4 F2 F0 
171b3     F0 F8 02 00 
171b7     00 00 00 00 | 	byte	$00, $fe, $fc, $fa, $f8, $f4, $f2, $f0, $f0, $f8, $02, $00, $00, $00, $00, $00
171bb     FE FC FC FE 
171bf     FE FE 00 02 
171c3     0C 12 12 10 
171c7     0C 06 02 00 | 	byte	$fe, $fc, $fc, $fe, $fe, $fe, $00, $02, $0c, $12, $12, $10, $0c, $06, $02, $00
171cb     00 FE FC FA 
171cf     F8 F4 F2 F0 
171d3     F0 00 00 00 
171d7     00 00 00 FE | 	byte	$00, $fe, $fc, $fa, $f8, $f4, $f2, $f0, $f0, $00, $00, $00, $00, $00, $00, $fe
171db     FE FC FC FE 
171df     FE FE 00 04 
171e3     10 12 12 0E 
171e7     08 04 02 00 | 	byte	$fe, $fc, $fc, $fe, $fe, $fe, $00, $04, $10, $12, $12, $0e, $08, $04, $02, $00
171eb     FE FC FA FA 
171ef     F8 F4 F2 F0 
171f3     EE 00 00 00 
171f7     00 00 00 FE | 	byte	$fe, $fc, $fa, $fa, $f8, $f4, $f2, $f0, $ee, $00, $00, $00, $00, $00, $00, $fe
171fb     FE FC FE FE 
171ff     FE FE 00 08 
17203     12 14 10 0E 
17207     06 04 00 00 | 	byte	$fe, $fc, $fe, $fe, $fe, $fe, $00, $08, $12, $14, $10, $0e, $06, $04, $00, $00
1720b     FE FC FA FA 
1720f     F8 F2 F0 F0 
17213     EE 02 00 00 
17217     00 00 00 00 | 	byte	$fe, $fc, $fa, $fa, $f8, $f2, $f0, $f0, $ee, $02, $00, $00, $00, $00, $00, $00
1721b     FC FC FE FE 
1721f     FE 00 04 0E 
17223     12 12 10 0C 
17227     06 02 00 FE | 	byte	$fc, $fc, $fe, $fe, $fe, $00, $04, $0e, $12, $12, $10, $0c, $06, $02, $00, $fe
1722b     FE FC FA F8 
1722f     F4 F2 F0 EE 
17233     F2 02 00 00 
17237     00 00 00 FE | 	byte	$fe, $fc, $fa, $f8, $f4, $f2, $f0, $ee, $f2, $02, $00, $00, $00, $00, $00, $fe
1723b     FC FE FE 00 
1723f     FE 00 08 10 
17243     14 12 0E 08 
17247     04 00 00 FE | 	byte	$fc, $fe, $fe, $00, $fe, $00, $08, $10, $14, $12, $0e, $08, $04, $00, $00, $fe
1724b     FC FA FA F8 
1724f     F4 F2 F0 EE 
17253     FA 00 00 00 
17257     00 00 FE FE | 	byte	$fc, $fa, $fa, $f8, $f4, $f2, $f0, $ee, $fa, $00, $00, $00, $00, $00, $fe, $fe
1725b     FC FE FE 00 
1725f     00 02 0C 12 
17263     14 10 0C 06 
17267     04 00 00 FE | 	byte	$fc, $fe, $fe, $00, $00, $02, $0c, $12, $14, $10, $0c, $06, $04, $00, $00, $fe
1726b     FC FA F8 F8 
1726f     F2 F0 EE EE 
17273     00 00 00 00 
17277     00 00 FE FC | 	byte	$fc, $fa, $f8, $f8, $f2, $f0, $ee, $ee, $00, $00, $00, $00, $00, $00, $fe, $fc
1727b     FC FE 00 00 
1727f     00 06 0E 14 
17283     12 10 0C 06 
17287     02 00 FE FC | 	byte	$fc, $fe, $00, $00, $00, $06, $0e, $14, $12, $10, $0c, $06, $02, $00, $fe, $fc
1728b     FA FA F8 F4 
1728f     F2 F0 EE EE 
17293     02 00 00 00 
17297     00 00 FE FC | 	byte	$fa, $fa, $f8, $f4, $f2, $f0, $ee, $ee, $02, $00, $00, $00, $00, $00, $fe, $fc
1729b     FE FE 00 00 
1729f     00 0C 12 14 
172a3     10 0E 08 04 
172a7     00 00 00 FC | 	byte	$fe, $fe, $00, $00, $00, $0c, $12, $14, $10, $0e, $08, $04, $00, $00, $00, $fc
172ab     FA FA F8 F4 
172af     F2 F0 EE F0 
172b3     02 00 00 00 
172b7     00 FE FC FC | 	byte	$fa, $fa, $f8, $f4, $f2, $f0, $ee, $f0, $02, $00, $00, $00, $00, $fe, $fc, $fc
172bb     FC FE 00 00 
172bf     04 0E 14 14 
172c3     10 0C 06 02 
172c7     00 00 FE FC | 	byte	$fc, $fe, $00, $00, $04, $0e, $14, $14, $10, $0c, $06, $02, $00, $00, $fe, $fc
172cb     FA F8 F8 F4 
172cf     F0 EE EC FA 
172d3     00 00 00 00 
172d7     00 FE FC FE | 	byte	$fa, $f8, $f8, $f4, $f0, $ee, $ec, $fa, $00, $00, $00, $00, $00, $fe, $fc, $fe
172db     FE 00 00 00 
172df     08 10 14 12 
172e3     0E 08 06 00 
172e7     00 FE FC FA | 	byte	$fe, $00, $00, $00, $08, $10, $14, $12, $0e, $08, $06, $00, $00, $fe, $fc, $fa
172eb     FA F8 F4 F2 
172ef     F0 EE EC 00 
172f3     00 00 00 00 
172f7     00 FE FC FC | 	byte	$fa, $f8, $f4, $f2, $f0, $ee, $ec, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc
172fb     FE FE 00 02 
172ff     0C 12 14 10 
17303     0C 08 04 00 
17307     00 00 FC FA | 	byte	$fe, $fe, $00, $02, $0c, $12, $14, $10, $0c, $08, $04, $00, $00, $00, $fc, $fa
1730b     FA F8 F4 F2 
1730f     F0 EE EE 02 
17313     00 00 00 00 
17317     FE FE FE FE | 	byte	$fa, $f8, $f4, $f2, $f0, $ee, $ee, $02, $00, $00, $00, $00, $fe, $fe, $fe, $fe
1731b     FE 00 00 06 
1731f     10 14 12 10 
17323     0C 06 02 00 
17327     00 FC FA FA | 	byte	$fe, $00, $00, $06, $10, $14, $12, $10, $0c, $06, $02, $00, $00, $fc, $fa, $fa
1732b     F8 F8 F4 F2 
1732f     EE EE F2 02 
17333     00 00 00 00 
17337     FE FE FE FE | 	byte	$f8, $f8, $f4, $f2, $ee, $ee, $f2, $02, $00, $00, $00, $00, $fe, $fe, $fe, $fe
1733b     00 00 00 08 
1733f     12 14 12 0E 
17343     08 06 00 00 
17347     FE FC FA FA | 	byte	$00, $00, $00, $08, $12, $14, $12, $0e, $08, $06, $00, $00, $fe, $fc, $fa, $fa
1734b     F8 F4 F2 F0 
1734f     EE EC FC 00 
17353     00 00 00 00 
17357     FE FE FC FE | 	byte	$f8, $f4, $f2, $f0, $ee, $ec, $fc, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fe
1735b     FE 00 04 0E 
1735f     14 14 10 0C 
17363     06 04 00 00 
17367     FE FC FA F8 | 	byte	$fe, $00, $04, $0e, $14, $14, $10, $0c, $06, $04, $00, $00, $fe, $fc, $fa, $f8
1736b     F8 F4 F2 F0 
1736f     EE EC 00 00 
17373     00 00 00 FE 
17377     00 FE FE FE | 	byte	$f8, $f4, $f2, $f0, $ee, $ec, $00, $00, $00, $00, $00, $fe, $00, $fe, $fe, $fe
1737b     FE 00 06 10 
1737f     14 12 10 0C 
17383     06 02 00 00 
17387     FC FA FA F8 | 	byte	$fe, $00, $06, $10, $14, $12, $10, $0c, $06, $02, $00, $00, $fc, $fa, $fa, $f8
1738b     F8 F4 F2 F0 
1738f     EE EE 00 02 
17393     00 00 00 FE 
17397     FE FE FE FE | 	byte	$f8, $f4, $f2, $f0, $ee, $ee, $00, $02, $00, $00, $00, $fe, $fe, $fe, $fe, $fe
1739b     00 02 0C 12 
1739f     14 12 0E 08 
173a3     04 02 00 FE 
173a7     FC FA FA F8 | 	byte	$00, $02, $0c, $12, $14, $12, $0e, $08, $04, $02, $00, $fe, $fc, $fa, $fa, $f8
173ab     F4 F4 F2 EE 
173af     EE F0 02 02 
173b3     00 00 FE FE 
173b7     FE FE FE FE | 	byte	$f4, $f4, $f2, $ee, $ee, $f0, $02, $02, $00, $00, $fe, $fe, $fe, $fe, $fe, $fe
173bb     00 04 0E 14 
173bf     14 10 0C 08 
173c3     04 00 00 FE 
173c7     FA FA F8 F8 | 	byte	$00, $04, $0e, $14, $14, $10, $0c, $08, $04, $00, $00, $fe, $fa, $fa, $f8, $f8
173cb     F4 F2 F0 EE 
173cf     EE F8 00 00 
173d3     00 00 FE FE 
173d7     FE FE FE 00 | 	byte	$f4, $f2, $f0, $ee, $ee, $f8, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fe, $00
173db     00 08 12 14 
173df     12 10 0C 06 
173e3     02 00 00 FC 
173e7     FA FA F8 F8 | 	byte	$00, $08, $12, $14, $12, $10, $0c, $06, $02, $00, $00, $fc, $fa, $fa, $f8, $f8
173eb     F4 F2 F0 EE 
173ef     EE FE 02 00 
173f3     00 00 FE FE 
173f7     FE FE FE 00 | 	byte	$f4, $f2, $f0, $ee, $ee, $fe, $02, $00, $00, $00, $fe, $fe, $fe, $fe, $fe, $00
173fb     02 0C 12 10 
173ff     0C 08 04 00 
17403     00 FC FA F8 
17407     F8 F4 F4 F2 | 	byte	$02, $0c, $12, $10, $0c, $08, $04, $00, $00, $fc, $fa, $f8, $f8, $f4, $f4, $f2
1740b     F2 F2 F0 F0 
1740f     EE F4 00 00 
17413     00 00 FE 00 
17417     00 02 0C 12 | 	byte	$f2, $f2, $f0, $f0, $ee, $f4, $00, $00, $00, $00, $fe, $00, $00, $02, $0c, $12
1741b     14 12 12 10 
1741f     0C 06 04 00 
17423     00 FC FA F8 
17427     F8 F4 F4 F2 | 	byte	$14, $12, $12, $10, $0c, $06, $04, $00, $00, $fc, $fa, $f8, $f8, $f4, $f4, $f2
1742b     F2 F2 F0 F0 
1742f     EE FA 00 00 
17433     00 00 FE 00 
17437     00 06 0E 12 | 	byte	$f2, $f2, $f0, $f0, $ee, $fa, $00, $00, $00, $00, $fe, $00, $00, $06, $0e, $12
1743b     12 12 10 0E 
1743f     0C 06 02 00 
17443     FE FC FA F8 
17447     F8 F4 F4 F2 | 	byte	$12, $12, $10, $0e, $0c, $06, $02, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f4, $f2
1744b     F2 F2 F0 F0 
1744f     EE FC 00 00 
17453     00 00 00 00 
17457     02 08 10 14 | 	byte	$f2, $f2, $f0, $f0, $ee, $fc, $00, $00, $00, $00, $00, $00, $02, $08, $10, $14
1745b     12 12 10 0E 
1745f     08 06 02 00 
17463     FE FC FA F8 
17467     F8 F4 F2 F2 | 	byte	$12, $12, $10, $0e, $08, $06, $02, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f2, $f2
1746b     F2 F0 F0 EE 
1746f     EE 00 00 00 
17473     00 00 00 00 
17477     04 0C 12 14 | 	byte	$f2, $f0, $f0, $ee, $ee, $00, $00, $00, $00, $00, $00, $00, $04, $0c, $12, $14
1747b     12 10 10 0C 
1747f     08 04 00 00 
17483     FC FC FA F8 
17487     F4 F4 F2 F2 | 	byte	$12, $10, $10, $0c, $08, $04, $00, $00, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2
1748b     F2 F0 F0 EE 
1748f     EE 00 00 00 
17493     00 00 00 00 
17497     06 0E 12 12 | 	byte	$f2, $f0, $f0, $ee, $ee, $00, $00, $00, $00, $00, $00, $00, $06, $0e, $12, $12
1749b     12 10 10 0C 
1749f     06 04 00 00 
174a3     FC FA F8 F8 
174a7     F4 F4 F2 F2 | 	byte	$12, $10, $10, $0c, $06, $04, $00, $00, $fc, $fa, $f8, $f8, $f4, $f4, $f2, $f2
174ab     F2 F0 F0 EE 
174af     EE 00 00 00 
174b3     00 00 00 02 
174b7     0C 10 14 12 | 	byte	$f2, $f0, $f0, $ee, $ee, $00, $00, $00, $00, $00, $00, $02, $0c, $10, $14, $12
174bb     12 10 0E 08 
174bf     06 02 00 FE 
174c3     FC FA F8 F8 
174c7     F4 F4 F2 F2 | 	byte	$12, $10, $0e, $08, $06, $02, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f4, $f2, $f2
174cb     F2 F0 F0 EE 
174cf     EE 00 00 00 
174d3     00 00 00 04 
174d7     0E 12 14 12 | 	byte	$f2, $f0, $f0, $ee, $ee, $00, $00, $00, $00, $00, $00, $04, $0e, $12, $14, $12
174db     10 10 0C 08 
174df     04 02 00 FE 
174e3     FC FA F8 F8 
174e7     F4 F2 F2 F2 | 	byte	$10, $10, $0c, $08, $04, $02, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f2
174eb     F0 F0 EE EE 
174ef     EE 00 00 00 
174f3     00 00 00 08 
174f7     10 14 12 12 | 	byte	$f0, $f0, $ee, $ee, $ee, $00, $00, $00, $00, $00, $00, $08, $10, $14, $12, $12
174fb     10 10 0C 06 
174ff     04 00 00 FC 
17503     FC FA F8 F4 
17507     F4 F2 F2 F2 | 	byte	$10, $10, $0c, $06, $04, $00, $00, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2
1750b     F0 F0 EE EE 
1750f     F0 00 00 00 
17513     00 00 04 0C 
17517     12 14 12 12 | 	byte	$f0, $f0, $ee, $ee, $f0, $00, $00, $00, $00, $00, $04, $0c, $12, $14, $12, $12
1751b     10 0E 0C 06 
1751f     02 00 00 FC 
17523     FC FA F8 F4 
17527     F4 F2 F2 F2 | 	byte	$10, $0e, $0c, $06, $02, $00, $00, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2
1752b     F0 F0 EE EE 
1752f     F2 00 00 00 
17533     00 00 06 10 
17537     12 12 12 10 | 	byte	$f0, $f0, $ee, $ee, $f2, $00, $00, $00, $00, $00, $06, $10, $12, $12, $12, $10
1753b     10 0E 08 04 
1753f     02 00 FE FC 
17543     FA FA F8 F4 
17547     F4 F2 F2 F2 | 	byte	$10, $0e, $08, $04, $02, $00, $fe, $fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f2
1754b     F0 F0 EE EE 
1754f     F2 00 00 00 
17553     00 02 08 10 
17557     14 12 12 10 | 	byte	$f0, $f0, $ee, $ee, $f2, $00, $00, $00, $00, $02, $08, $10, $14, $12, $12, $10
1755b     10 0C 06 04 
1755f     00 00 FE FC 
17563     FA F8 F8 F4 
17567     F2 F2 F2 F2 | 	byte	$10, $0c, $06, $04, $00, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f2, $f2
1756b     F0 EE EE EE 
1756f     F8 00 00 00 
17573     00 04 0E 12 
17577     14 12 12 10 | 	byte	$f0, $ee, $ee, $ee, $f8, $00, $00, $00, $00, $04, $0e, $12, $14, $12, $12, $10
1757b     0E 0C 06 02 
1757f     00 00 FE FC 
17583     FA F8 F4 F4 
17587     F2 F2 F2 F0 | 	byte	$0e, $0c, $06, $02, $00, $00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0
1758b     F0 EE EE EE 
1758f     F8 00 00 00 
17593     00 08 10 14 
17597     14 12 10 10 | 	byte	$f0, $ee, $ee, $ee, $f8, $00, $00, $00, $00, $08, $10, $14, $14, $12, $10, $10
1759b     0E 08 04 02 
1759f     00 FE FC FC 
175a3     FA F8 F4 F4 
175a7     F2 F2 F2 F0 | 	byte	$0e, $08, $04, $02, $00, $fe, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0
175ab     F0 EE EE EE 
175af     FC 00 00 00 
175b3     04 0C 12 14 
175b7     12 12 10 10 | 	byte	$f0, $ee, $ee, $ee, $fc, $00, $00, $00, $04, $0c, $12, $14, $12, $12, $10, $10
175bb     0C 06 04 00 
175bf     00 FE FC FC 
175c3     FA F8 F4 F4 
175c7     F2 F2 F2 F0 | 	byte	$0c, $06, $04, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0
175cb     EE EE EE EE 
175cf     00 00 00 00 
175d3     06 0E 12 14 
175d7     12 12 10 0E | 	byte	$ee, $ee, $ee, $ee, $00, $00, $00, $00, $06, $0e, $12, $14, $12, $12, $10, $0e
175db     0C 06 02 00 
175df     00 00 FC FA 
175e3     FA F8 F4 F4 
175e7     F2 F2 F0 F0 | 	byte	$0c, $06, $02, $00, $00, $00, $fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0
175eb     EE EE EE F0 
175ef     00 00 00 02 
175f3     0C 10 14 14 
175f7     12 12 10 0E | 	byte	$ee, $ee, $ee, $f0, $00, $00, $00, $02, $0c, $10, $14, $14, $12, $12, $10, $0e
175fb     08 04 02 00 
175ff     00 FE FC FA 
17603     F8 F4 F4 F2 
17607     F2 F2 F0 F0 | 	byte	$08, $04, $02, $00, $00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0, $f0
1760b     EE EE EE F0 
1760f     00 00 00 04 
17613     0E 12 14 12 
17617     12 12 10 0C | 	byte	$ee, $ee, $ee, $f0, $00, $00, $00, $04, $0e, $12, $14, $12, $12, $12, $10, $0c
1761b     06 04 00 00 
1761f     00 FC FC FA 
17623     F8 F4 F4 F2 
17627     F2 F2 F0 EE | 	byte	$06, $04, $00, $00, $00, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0, $ee
1762b     EE EE EE F0 
1762f     00 00 00 08 
17633     10 14 14 12 
17637     12 10 0E 0C | 	byte	$ee, $ee, $ee, $f0, $00, $00, $00, $08, $10, $14, $14, $12, $12, $10, $0e, $0c
1763b     06 02 00 00 
1763f     FE FC FA FA 
17643     F8 F4 F4 F2 
17647     F2 F0 F0 EE | 	byte	$06, $02, $00, $00, $fe, $fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $ee
1764b     EE EE F0 F2 
1764f     00 00 04 0C 
17653     12 14 14 12 
17657     12 10 0E 08 | 	byte	$ee, $ee, $f0, $f2, $00, $00, $04, $0c, $12, $14, $14, $12, $12, $10, $0e, $08
1765b     04 02 00 00 
1765f     00 FC FA FA 
17663     F8 F4 F4 F2 
17667     F2 F0 F0 EE | 	byte	$04, $02, $00, $00, $00, $fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $ee
1766b     EE EE F0 F8 
1766f     00 00 06 0E 
17673     14 14 14 12 
17677     12 0E 0C 06 | 	byte	$ee, $ee, $f0, $f8, $00, $00, $06, $0e, $14, $14, $14, $12, $12, $0e, $0c, $06
1767b     04 00 00 00 
1767f     FE FC FA F8 
17683     F8 F4 F4 F2 
17687     F2 F0 F0 F0 | 	byte	$04, $00, $00, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $f0
1768b     EE EE F0 FA 
1768f     00 02 08 10 
17693     14 14 12 12 
17697     10 0E 0C 06 | 	byte	$ee, $ee, $f0, $fa, $00, $02, $08, $10, $14, $14, $12, $12, $10, $0e, $0c, $06
1769b     02 00 00 00 
1769f     FC FC FA F8 
176a3     F4 F4 F2 F2 
176a7     F0 F0 F0 EE | 	byte	$02, $00, $00, $00, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $f0, $ee
176ab     EE F0 F0 00 
176af     00 04 0E 12 
176b3     14 14 12 12 
176b7     10 0C 08 04 | 	byte	$ee, $f0, $f0, $00, $00, $04, $0e, $12, $14, $14, $12, $12, $10, $0c, $08, $04
176bb     02 00 00 FE 
176bf     FC FA FA F8 
176c3     F4 F4 F2 F2 
176c7     F0 F0 F0 EE | 	byte	$02, $00, $00, $fe, $fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $f0, $ee
176cb     EE F0 F0 00 
176cf     02 08 10 14 
176d3     14 14 12 10 
176d7     10 0C 08 04 | 	byte	$ee, $f0, $f0, $00, $02, $08, $10, $14, $14, $14, $12, $10, $10, $0c, $08, $04
176db     00 00 00 FE 
176df     FC FA F8 F8 
176e3     F4 F2 F2 F2 
176e7     F0 F0 F0 EE | 	byte	$00, $00, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f2, $f0, $f0, $f0, $ee
176eb     F0 F0 F2 00 
176ef     04 0C 12 14 
176f3     14 12 12 10 
176f7     0E 08 06 02 | 	byte	$f0, $f0, $f2, $00, $04, $0c, $12, $14, $14, $12, $12, $10, $0e, $08, $06, $02
176fb     00 00 00 FE 
176ff     FC FA F8 F8 
17703     F4 F2 F2 F0 
17707     F0 F0 F0 EE | 	byte	$00, $00, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f0, $f0, $f0, $f0, $ee
1770b     F0 F0 F2 02 
1770f     06 0E 14 14 
17713     14 12 12 10 
17717     0C 08 04 02 | 	byte	$f0, $f0, $f2, $02, $06, $0e, $14, $14, $14, $12, $12, $10, $0c, $08, $04, $02
1771b     00 00 00 FE 
1771f     FC FA F8 F4 
17723     F4 F2 F2 F0 
17727     F0 F0 F0 F0 | 	byte	$00, $00, $00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $f0, $f0, $f0
1772b     F0 F2 F8 04 
1772f     08 10 14 14 
17733     14 12 10 0E 
17737     0C 06 04 00 | 	byte	$f0, $f2, $f8, $04, $08, $10, $14, $14, $14, $12, $10, $0e, $0c, $06, $04, $00
1773b     00 00 FE FC 
1773f     FA FA F8 F4 
17743     F2 F2 F2 F0 
17747     F0 F0 F0 F0 | 	byte	$00, $00, $fe, $fc, $fa, $fa, $f8, $f4, $f2, $f2, $f2, $f0, $f0, $f0, $f0, $f0
1774b     F0 F2 FC 06 
1774f     0C 12 14 14 
17753     12 12 10 0C 
17757     08 06 02 00 | 	byte	$f0, $f2, $fc, $06, $0c, $12, $14, $14, $12, $12, $10, $0c, $08, $06, $02, $00
1775b     00 00 00 FC 
1775f     FA F8 F8 F4 
17763     F2 F2 F0 F0 
17767     F0 F0 F0 F0 | 	byte	$00, $00, $00, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f0, $f0, $f0, $f0, $f0, $f0
1776b     F0 F2 00 08 
1776f     10 14 14 14 
17773     12 10 0E 0C 
17777     08 04 02 00 | 	byte	$f0, $f2, $00, $08, $10, $14, $14, $14, $12, $10, $0e, $0c, $08, $04, $02, $00
1777b     00 00 FE FC 
1777f     FA F8 F4 F4 
17783     F2 F2 F2 F0 
17787     F0 F0 F0 F0 | 	byte	$00, $00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0, $f0, $f0, $f0, $f0
1778b     F2 F2 04 0C 
1778f     12 14 14 14 
17793     12 10 0E 0C 
17797     06 02 00 00 | 	byte	$f2, $f2, $04, $0c, $12, $14, $14, $14, $12, $10, $0e, $0c, $06, $02, $00, $00
1779b     00 00 FE FC 
1779f     FA F8 F4 F2 
177a3     F2 F2 F2 F2 
177a7     F0 F0 F0 F0 | 	byte	$00, $00, $fe, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f0, $f0, $f0, $f0
177ab     F2 F4 08 0E 
177af     14 14 14 12 
177b3     12 0E 0C 08 
177b7     04 02 00 00 | 	byte	$f2, $f4, $08, $0e, $14, $14, $14, $12, $12, $0e, $0c, $08, $04, $02, $00, $00
177bb     00 00 FC FA 
177bf     F8 F8 F4 F2 
177c3     F2 F2 F2 F2 
177c7     F0 F0 F0 F0 | 	byte	$00, $00, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f0, $f0, $f0, $f0
177cb     F2 FA 0C 12 
177cf     14 14 14 12 
177d3     10 0E 0C 06 
177d7     04 02 00 00 | 	byte	$f2, $fa, $0c, $12, $14, $14, $14, $12, $10, $0e, $0c, $06, $04, $02, $00, $00
177db     00 FE FC FA 
177df     F8 F4 F4 F2 
177e3     F2 F2 F2 F2 
177e7     F0 F0 F0 F0 | 	byte	$00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f0, $f0, $f0, $f0
177eb     F4 00 0E 12 
177ef     14 14 14 12 
177f3     0E 0C 08 06 
177f7     02 00 00 00 | 	byte	$f4, $00, $0e, $12, $14, $14, $14, $12, $0e, $0c, $08, $06, $02, $00, $00, $00
177fb     00 FE FA FA 
177ff     F8 F4 F4 F2 
17803     F2 F2 F2 F0 
17807     F0 F0 F2 F2 | 	byte	$00, $fe, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f0, $f0, $f0, $f2, $f2
1780b     F4 04 10 14 
1780f     14 14 12 10 
17813     0E 0C 08 04 
17817     02 00 00 00 | 	byte	$f4, $04, $10, $14, $14, $14, $12, $10, $0e, $0c, $08, $04, $02, $00, $00, $00
1781b     00 FC FA F8 
1781f     F8 F4 F4 F2 
17823     F2 F2 F2 F2 
17827     F0 F0 F2 F2 | 	byte	$00, $fc, $fa, $f8, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f0, $f0, $f2, $f2
1782b     F8 0C 12 14 
1782f     14 14 12 10 
17833     0C 08 06 04 
17837     02 00 00 00 | 	byte	$f8, $0c, $12, $14, $14, $14, $12, $10, $0c, $08, $06, $04, $02, $00, $00, $00
1783b     FE FC FA F8 
1783f     F4 F4 F2 F2 
17843     F2 F2 F2 F2 
17847     F0 F2 F2 F4 | 	byte	$fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f0, $f2, $f2, $f4
1784b     FC 10 14 14 
1784f     14 14 12 0E 
17853     0C 08 06 02 
17857     00 00 00 00 | 	byte	$fc, $10, $14, $14, $14, $14, $12, $0e, $0c, $08, $06, $02, $00, $00, $00, $00
1785b     FE FC FA F8 
1785f     F4 F4 F2 F2 
17863     F2 F2 F2 F2 
17867     F0 F2 F2 F8 | 	byte	$fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f0, $f2, $f2, $f8
1786b     00 12 14 14 
1786f     14 12 10 0C 
17873     08 06 04 02 
17877     00 00 00 FE | 	byte	$00, $12, $14, $14, $14, $12, $10, $0c, $08, $06, $04, $02, $00, $00, $00, $fe
1787b     FC FA FA F8 
1787f     F4 F4 F2 F2 
17883     F2 F2 F2 F2 
17887     F2 F2 F2 F8 | 	byte	$fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f8
1788b     06 14 14 14 
1788f     14 12 0E 0C 
17893     08 06 04 02 
17897     00 00 00 FE | 	byte	$06, $14, $14, $14, $14, $12, $0e, $0c, $08, $06, $04, $02, $00, $00, $00, $fe
1789b     FC FA F8 F4 
1789f     F4 F2 F2 F2 
178a3     F2 F2 F2 F2 
178a7     F2 F2 F4 FC | 	byte	$fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fc
178ab     0E 14 14 14 
178af     12 10 0E 0C 
178b3     06 04 02 00 
178b7     00 00 00 FE | 	byte	$0e, $14, $14, $14, $12, $10, $0e, $0c, $06, $04, $02, $00, $00, $00, $00, $fe
178bb     FC FA F8 F4 
178bf     F4 F2 F2 F2 
178c3     F2 F2 F2 F2 
178c7     F2 F2 F8 FE | 	byte	$fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f8, $fe
178cb     14 14 14 14 
178cf     12 10 0C 08 
178d3     06 04 02 00 
178d7     00 00 FE FC | 	byte	$14, $14, $14, $14, $12, $10, $0c, $08, $06, $04, $02, $00, $00, $00, $fe, $fc
178db     FA FA F8 F4 
178df     F4 F2 F2 F2 
178e3     F2 F2 F2 F2 
178e7     F2 F4 FA 00 | 	byte	$fa, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fa, $00
178eb     14 18 14 14 
178ef     12 0E 0C 08 
178f3     04 04 02 00 
178f7     00 00 00 FC | 	byte	$14, $18, $14, $14, $12, $0e, $0c, $08, $04, $04, $02, $00, $00, $00, $00, $fc
178fb     FA F8 F8 F4 
178ff     F2 F2 F2 F2 
17903     F2 F2 F2 F2 
17907     F2 F4 FC 08 | 	byte	$fa, $f8, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fc, $08
1790b     14 14 14 12 
1790f     10 0E 0C 06 
17913     04 02 02 00 
17917     00 00 FE FC | 	byte	$14, $14, $14, $12, $10, $0e, $0c, $06, $04, $02, $02, $00, $00, $00, $fe, $fc
1791b     FA F8 F4 F4 
1791f     F2 F2 F2 F2 
17923     F2 F2 F2 F2 
17927     F2 F8 FE 12 | 	byte	$fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f8, $fe, $12
1792b     14 14 14 12 
1792f     10 0C 08 06 
17933     04 02 00 00 
17937     00 FE FC FA | 	byte	$14, $14, $14, $12, $10, $0c, $08, $06, $04, $02, $00, $00, $00, $fe, $fc, $fa
1793b     FA F8 F4 F4 
1793f     F2 F2 F2 F2 
17943     F2 F2 F2 F2 
17947     F4 FA 00 14 | 	byte	$fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fa, $00, $14
1794b     18 14 14 12 
1794f     0E 0C 06 04 
17953     02 02 00 00 
17957     00 00 FC FA | 	byte	$18, $14, $14, $12, $0e, $0c, $06, $04, $02, $02, $00, $00, $00, $00, $fc, $fa
1795b     F8 F8 F4 F4 
1795f     F2 F2 F2 F2 
17963     F2 F2 F2 F2 
17967     F8 FC 06 14 | 	byte	$f8, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f8, $fc, $06, $14
1796b     14 14 12 10 
1796f     0E 08 06 04 
17973     02 00 00 00 
17977     00 FE FC FA | 	byte	$14, $14, $12, $10, $0e, $08, $06, $04, $02, $00, $00, $00, $00, $fe, $fc, $fa
1797b     F8 F4 F4 F2 
1797f     F2 F2 F2 F2 
17983     F2 F2 F2 F4 
17987     F8 00 0E 18 | 	byte	$f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f8, $00, $0e, $18
1798b     14 14 12 10 
1798f     0C 08 06 02 
17993     02 00 00 00 
17997     00 FE FC FA | 	byte	$14, $14, $12, $10, $0c, $08, $06, $02, $02, $00, $00, $00, $00, $fe, $fc, $fa
1799b     F8 F4 F4 F2 
1799f     F2 F2 F2 F2 
179a3     F2 F2 F2 F4 
179a7     FC 00 14 18 | 	byte	$f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fc, $00, $14, $18
179ab     14 14 10 0E 
179af     0C 06 04 02 
179b3     02 00 00 00 
179b7     00 FC FA FA | 	byte	$14, $14, $10, $0e, $0c, $06, $04, $02, $02, $00, $00, $00, $00, $fc, $fa, $fa
179bb     F8 F4 F4 F2 
179bf     F2 F2 F2 F2 
179c3     F2 F4 F4 F8 
179c7     FE 00 18 14 | 	byte	$f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f4, $f8, $fe, $00, $18, $14
179cb     14 12 10 0E 
179cf     08 06 04 02 
179d3     00 00 00 00 
179d7     FE FC FA F8 | 	byte	$14, $12, $10, $0e, $08, $06, $04, $02, $00, $00, $00, $00, $fe, $fc, $fa, $f8
179db     F8 F4 F2 F2 
179df     F2 F2 F2 F2 
179e3     F2 F4 F4 FA 
179e7     00 06 18 14 | 	byte	$f8, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f4, $fa, $00, $06, $18, $14
179eb     14 12 0E 0C 
179ef     08 04 02 02 
179f3     00 00 00 00 
179f7     FE FC FA F8 | 	byte	$14, $12, $0e, $0c, $08, $04, $02, $02, $00, $00, $00, $00, $fe, $fc, $fa, $f8
179fb     F8 F4 F2 F2 
179ff     F2 F2 F2 F2 
17a03     F2 F4 F8 FC 
17a07     00 0E 14 14 | 	byte	$f8, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f8, $fc, $00, $0e, $14, $14
17a0b     14 12 0E 0C 
17a0f     06 04 02 00 
17a13     00 00 00 00 
17a17     FC FC FA F8 | 	byte	$14, $12, $0e, $0c, $06, $04, $02, $00, $00, $00, $00, $00, $fc, $fc, $fa, $f8
17a1b     F8 F4 F2 F2 
17a1f     F2 F2 F2 F2 
17a23     F4 F4 FA FE 
17a27     02 14 14 14 | 	byte	$f8, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f4, $fa, $fe, $02, $14, $14, $14
17a2b     12 10 0E 08 
17a2f     06 04 02 00 
17a33     00 00 00 FE 
17a37     FC FA FA F8 | 	byte	$12, $10, $0e, $08, $06, $04, $02, $00, $00, $00, $00, $fe, $fc, $fa, $fa, $f8
17a3b     F4 F4 F2 F2 
17a3f     F2 F2 F2 F2 
17a43     F4 F4 FC 00 
17a47     04 14 14 14 | 	byte	$f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f4, $fc, $00, $04, $14, $14, $14
17a4b     12 10 0C 08 
17a4f     06 02 00 00 
17a53     00 00 00 FE 
17a57     FC FA FA F8 | 	byte	$12, $10, $0c, $08, $06, $02, $00, $00, $00, $00, $00, $fe, $fc, $fa, $fa, $f8
17a5b     F4 F4 F2 F2 
17a5f     F2 F2 F2 F2 
17a63     F4 F8 FE 00 
17a67     06 14 14 14 | 	byte	$f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f8, $fe, $00, $06, $14, $14, $14
17a6b     12 0E 0C 08 
17a6f     04 02 00 00 
17a73     00 00 00 FE 
17a77     FC FA F8 F8 | 	byte	$12, $0e, $0c, $08, $04, $02, $00, $00, $00, $00, $00, $fe, $fc, $fa, $f8, $f8
17a7b     F4 F2 F2 F2 
17a7f     F2 F2 F2 F4 
17a83     F4 FA 00 02 
17a87     0C 14 14 12 | 	byte	$f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f4, $fa, $00, $02, $0c, $14, $14, $12
17a8b     10 0E 08 06 
17a8f     04 02 00 00 
17a93     00 00 FE FC 
17a97     FC FA F8 F4 | 	byte	$10, $0e, $08, $06, $04, $02, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4
17a9b     F4 F2 F2 F2 
17a9f     F2 F2 F2 F4 
17aa3     F8 FC 00 04 
17aa7     12 14 14 12 | 	byte	$f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f8, $fc, $00, $04, $12, $14, $14, $12
17aab     10 0C 08 06 
17aaf     02 00 00 00 
17ab3     00 00 FE FC 
17ab7     FC FA F8 F4 | 	byte	$10, $0c, $08, $06, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4
17abb     F4 F2 F2 F0 
17abf     F2 F2 F2 F4 
17ac3     F8 FE 00 04 
17ac7     14 14 14 12 | 	byte	$f4, $f2, $f2, $f0, $f2, $f2, $f2, $f4, $f8, $fe, $00, $04, $14, $14, $14, $12
17acb     0E 0C 08 04 
17acf     02 00 00 00 
17ad3     00 00 FE FC 
17ad7     FC FA F8 F4 | 	byte	$0e, $0c, $08, $04, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4
17adb     F4 F2 F2 F2 
17adf     F2 F2 F2 F4 
17ae3     FA 00 02 04 
17ae7     14 14 14 10 | 	byte	$f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fa, $00, $02, $04, $14, $14, $14, $10
17aeb     0E 08 06 04 
17aef     02 00 00 00 
17af3     00 00 FE FC 
17af7     FA FA F8 F4 | 	byte	$0e, $08, $06, $04, $02, $00, $00, $00, $00, $00, $fe, $fc, $fa, $fa, $f8, $f4
17afb     F2 F2 F0 F2 
17aff     F2 F2 F4 F8 
17b03     FC 00 04 06 
17b07     14 14 12 10 | 	byte	$f2, $f2, $f0, $f2, $f2, $f2, $f4, $f8, $fc, $00, $04, $06, $14, $14, $12, $10
17b0b     0E 08 06 04 
17b0f     00 00 00 00 
17b13     00 FE FE FC 
17b17     FA FA F8 F4 | 	byte	$0e, $08, $06, $04, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fa, $fa, $f8, $f4
17b1b     F2 F2 F0 F2 
17b1f     F2 F2 F4 FA 
17b23     00 00 04 08 
17b27     14 14 12 10 | 	byte	$f2, $f2, $f0, $f2, $f2, $f2, $f4, $fa, $00, $00, $04, $08, $14, $14, $12, $10
17b2b     0C 08 04 02 
17b2f     00 00 00 00 
17b33     00 FE FC FC 
17b37     FA FA F4 F4 | 	byte	$0c, $08, $04, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $fa, $f4, $f4
17b3b     F2 F2 F0 F2 
17b3f     F2 F4 F4 FC 
17b43     00 02 04 0E 
17b47     14 12 12 0E | 	byte	$f2, $f2, $f0, $f2, $f2, $f4, $f4, $fc, $00, $02, $04, $0e, $14, $12, $12, $0e
17b4b     0C 06 04 02 
17b4f     00 00 00 00 
17b53     00 FE FC FC 
17b57     FA F8 F4 F2 | 	byte	$0c, $06, $04, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4, $f2
17b5b     F2 F2 F2 F2 
17b5f     F2          | 	byte	$f2[5]
17b60     F4 F8 FE 00 
17b64     04 04 10 14 
17b68     12 10 0E 08 
17b6c     06 04 02 00 | 	byte	$f4, $f8, $fe, $00, $04, $04, $10, $14, $12, $10, $0e, $08, $06, $04, $02, $00
17b70     00 00 00 00 
17b74     FE FC FC FA 
17b78     F8 F4 F2 F2 
17b7c     F2 F2 F2 F2 | 	byte	$00, $00, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f2
17b80     F4 FA 00 02 
17b84     04 04 12 12 
17b88     12 10 0C 08 
17b8c     04 02 00 00 | 	byte	$f4, $fa, $00, $02, $04, $04, $12, $12, $12, $10, $0c, $08, $04, $02, $00, $00
17b90     00 00 00 FE 
17b94     FE FC FC FA 
17b98     F8 F4 F2 F2 
17b9c     F2 F2 F2 F4 | 	byte	$00, $00, $00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f4
17ba0     F4 FC 00 04 
17ba4     04 04 14 12 
17ba8     12 0E 0C 06 
17bac     04 02 00 00 | 	byte	$f4, $fc, $00, $04, $04, $04, $14, $12, $12, $0e, $0c, $06, $04, $02, $00, $00
17bb0     00 00 00 FE 
17bb4     FE FC FA FA 
17bb8     F8 F4 F2 F2 
17bbc     F2 F2 F2 F4 | 	byte	$00, $00, $00, $fe, $fe, $fc, $fa, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f4
17bc0     F8 FE 00 04 
17bc4     04 04 14 12 
17bc8     10 0E 08 06 
17bcc     04 02 00 00 | 	byte	$f8, $fe, $00, $04, $04, $04, $14, $12, $10, $0e, $08, $06, $04, $02, $00, $00
17bd0     00 00 FE FE 
17bd4     FC FC FA FA 
17bd8     F4 F2 F2 F2 
17bdc     F2 F2 F2 F4 | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $fa, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4
17be0     FA 00 02 04 
17be4     04 06 14 12 
17be8     10 0C 08 04 
17bec     02 02 00 00 | 	byte	$fa, $00, $02, $04, $04, $06, $14, $12, $10, $0c, $08, $04, $02, $02, $00, $00
17bf0     00 00 FE FE 
17bf4     FC FC FA F8 
17bf8     F4 F2 F2 F2 
17bfc     F2 F2 F4 F8 | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f4, $f8
17c00     FC 00 04 04 
17c04     04 08 12 12 
17c08     0E 0C 06 04 
17c0c     02 00 00 00 | 	byte	$fc, $00, $04, $04, $04, $08, $12, $12, $0e, $0c, $06, $04, $02, $00, $00, $00
17c10     00 00 FE FE 
17c14     FC FC FA F8 
17c18     F4 F2 F2 F2 
17c1c     F2 F2 F4 F8 | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f4, $f8
17c20     00 00 04 04 
17c24     02 0E 12 10 
17c28     0E 0C 06 04 
17c2c     02 00 00 00 | 	byte	$00, $00, $04, $04, $02, $0e, $12, $10, $0e, $0c, $06, $04, $02, $00, $00, $00
17c30     00 00 FE FE 
17c34     FC FC FA F8 
17c38     F4 F2 F2 F2 
17c3c     F2 F2 F4 FC | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f4, $fc
17c40     00 02 04 04 
17c44     02 0E 12 10 
17c48     0C 08 04 02 
17c4c     02 00 00 00 | 	byte	$00, $02, $04, $04, $02, $0e, $12, $10, $0c, $08, $04, $02, $02, $00, $00, $00
17c50     00 00 FE FE 
17c54     FC FC FA F8 
17c58     F4 F2 F2 F2 
17c5c     F2 F4 F8 FE | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f4, $f8, $fe
17c60     00 04 04 02 
17c64     02 10 12 10 
17c68     0C 06 04 02 
17c6c     00 00 00 00 | 	byte	$00, $04, $04, $02, $02, $10, $12, $10, $0c, $06, $04, $02, $00, $00, $00, $00
17c70     00 FE FE FC 
17c74     FC FA F8 F4 
17c78     F2 F2 F2 F2 
17c7c     F4 F4 FA 00 | 	byte	$00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f4, $f4, $fa, $00
17c80     02 04 04 02 
17c84     02 12 10 0E 
17c88     0C 06 04 02 
17c8c     00 00 00 00 | 	byte	$02, $04, $04, $02, $02, $12, $10, $0e, $0c, $06, $04, $02, $00, $00, $00, $00
17c90     00 FE FE FC 
17c94     FC FA F8 F4 
17c98     F2 F2 F2 F4 
17c9c     F4 F8 FC 00 | 	byte	$00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f4, $f4, $f8, $fc, $00
17ca0     04 04 04 02 
17ca4     04 12 10 0E 
17ca8     08 04 04 02 
17cac     00 00 00 00 | 	byte	$04, $04, $04, $02, $04, $12, $10, $0e, $08, $04, $04, $02, $00, $00, $00, $00
17cb0     00 FE FE FC 
17cb4     FC FA F8 F4 
17cb8     F2 F2 F2 F4 
17cbc     F4 F8 FE 00 | 	byte	$00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f4, $f4, $f8, $fe, $00
17cc0     04 04 02 02 
17cc4     04 12 10 0C 
17cc8     06 04 02 00 
17ccc     00 00 00 00 | 	byte	$04, $04, $02, $02, $04, $12, $10, $0c, $06, $04, $02, $00, $00, $00, $00, $00
17cd0     00 FE FE FC 
17cd4     FC FA F8 F4 
17cd8     F2 F2 F4 F4 
17cdc     F4 FA 00 02 | 	byte	$00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f4, $f4, $f4, $fa, $00, $02
17ce0     04 04 02 02 
17ce4     04 12 0E 0C 
17ce8     06 04 02 00 
17cec     00 00 00 00 | 	byte	$04, $04, $02, $02, $04, $12, $0e, $0c, $06, $04, $02, $00, $00, $00, $00, $00
17cf0     00 FE FE FC 
17cf4     FA F8 F4 F2 
17cf8     F4 F4 F4 F4 
17cfc     F8 FC 00 04 | 	byte	$00, $fe, $fe, $fc, $fa, $f8, $f4, $f2, $f4, $f4, $f4, $f4, $f8, $fc, $00, $04
17d00     04 04 02 02 
17d04     04 10 0E 08 
17d08     04 04 02 00 
17d0c     00 00 00 00 | 	byte	$04, $04, $02, $02, $04, $10, $0e, $08, $04, $04, $02, $00, $00, $00, $00, $00
17d10     FE FE FC FC 
17d14     FA F8 F4 F2 
17d18     F4 F4 F4 F4 
17d1c     FA FE 00 04 | 	byte	$fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f4, $f4, $f4, $f4, $fa, $fe, $00, $04
17d20     04 02 02 02 
17d24     04 10 0C 06 
17d28     04 02 00 00 
17d2c     00 00 00 00 | 	byte	$04, $02, $02, $02, $04, $10, $0c, $06, $04, $02, $00, $00, $00, $00, $00, $00
17d30     FE FE FC FC 
17d34     FA F8 F4 F4 
17d38     F4 F4 F4 F8 
17d3c     FC 00 02 04 | 	byte	$fe, $fe, $fc, $fc, $fa, $f8, $f4, $f4, $f4, $f4, $f4, $f8, $fc, $00, $02, $04
17d40     04 02 02 02 
17d44     06 0E 0C 06 
17d48     04 02 00 00 
17d4c     00 00 00 00 | 	byte	$04, $02, $02, $02, $06, $0e, $0c, $06, $04, $02, $00, $00, $00, $00, $00, $00
17d50     FE FE FC FA 
17d54     FA F8 F4 F4 
17d58     F4 F4 F4 F8 
17d5c     FE 00 04 04 | 	byte	$fe, $fe, $fc, $fa, $fa, $f8, $f4, $f4, $f4, $f4, $f4, $f8, $fe, $00, $04, $04
17d60     04 02 02 02 
17d64     08 0E 08 04 
17d68     02 02 00 00 
17d6c     00 00 00 00 | 	byte	$04, $02, $02, $02, $08, $0e, $08, $04, $02, $02, $00, $00, $00, $00, $00, $00
17d70     FE FE FC FA 
17d74     F8 F4 F4 F4 
17d78     F4 F4 F8 FA 
17d7c     00 02 04 04 | 	byte	$fe, $fe, $fc, $fa, $f8, $f4, $f4, $f4, $f4, $f4, $f8, $fa, $00, $02, $04, $04
17d80     02 02 02 02 
17d84     08 0C 06 04 
17d88     02 00 00 00 
17d8c     00 00 00 00 | 	byte	$02, $02, $02, $02, $08, $0c, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00
17d90     FE FE FC FA 
17d94     F8 F4 F4 F4 
17d98     F4 F4 F8 FC 
17d9c     00 02 04 04 | 	byte	$fe, $fe, $fc, $fa, $f8, $f4, $f4, $f4, $f4, $f4, $f8, $fc, $00, $02, $04, $04
17da0     02 02 02 00 
17da4     0C 0C 06 04 
17da8     02 00 00 00 
17dac     00 00 00 00 | 	byte	$02, $02, $02, $00, $0c, $0c, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00
17db0     FE FC FA FA 
17db4     F8 F4 F4 F8 
17db8     F8 F8 FA FE 
17dbc     00 04 04 02 | 	byte	$fe, $fc, $fa, $fa, $f8, $f4, $f4, $f8, $f8, $f8, $fa, $fe, $00, $04, $04, $02
17dc0     02 02 02 00 
17dc4     0C 08 06 02 
17dc8     02 00 00 00 
17dcc     00 00 00 FE | 	byte	$02, $02, $02, $00, $0c, $08, $06, $02, $02, $00, $00, $00, $00, $00, $00, $fe
17dd0     FE FC FA FA 
17dd4     F8 F8 F4 F8 
17dd8     F8 F8 FC 00 
17ddc     02 04 04 04 | 	byte	$fe, $fc, $fa, $fa, $f8, $f8, $f4, $f8, $f8, $f8, $fc, $00, $02, $04, $04, $04
17de0     02 02 00 00 
17de4     0C 08 04 02 
17de8     00 00 00 00 
17dec     00 00 00 FE | 	byte	$02, $02, $00, $00, $0c, $08, $04, $02, $00, $00, $00, $00, $00, $00, $00, $fe
17df0     FE FC FA F8 
17df4     F8 F8 F8 F8 
17df8     F8 F8 FE 00 
17dfc     04 04 04 04 | 	byte	$fe, $fc, $fa, $f8, $f8, $f8, $f8, $f8, $f8, $f8, $fe, $00, $04, $04, $04, $04
17e00     02 02 00 00 
17e04     08 06 04 02 
17e08     00 00 00 00 
17e0c     00 00 00 FE | 	byte	$02, $02, $00, $00, $08, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00, $fe
17e10     FC FA FA F8 
17e14     F8 F8 F8 F8 
17e18     F8 FC 00 02 
17e1c     04 04 04 04 | 	byte	$fc, $fa, $fa, $f8, $f8, $f8, $f8, $f8, $f8, $fc, $00, $02, $04, $04, $04, $04
17e20     02 02 00 00 
17e24     08 06 02 02 
17e28     00 00 00 00 
17e2c     00 00 00 FE | 	byte	$02, $02, $00, $00, $08, $06, $02, $02, $00, $00, $00, $00, $00, $00, $00, $fe
17e30     FC FA FA F8 
17e34     F8 F8 F8 F8 
17e38     F8 FC 00 02 
17e3c     04 04 04 02 | 	byte	$fc, $fa, $fa, $f8, $f8, $f8, $f8, $f8, $f8, $fc, $00, $02, $04, $04, $04, $02
17e40     02 00 00 00 
17e44     08 04 02 02 
17e48     00 00 00 00 
17e4c     00 00 FE 00 | 	byte	$02, $00, $00, $00, $08, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $00
17e50     FC FA FA F8 
17e54     F8 F8 F8 F8 
17e58     FA FE 00 04 
17e5c     04 04 04 02 | 	byte	$fc, $fa, $fa, $f8, $f8, $f8, $f8, $f8, $fa, $fe, $00, $04, $04, $04, $04, $02
17e60     02 00 00 00 
17e64     06 04 02 00 
17e68     00 00 00 00 
17e6c     00 00 FE FE | 	byte	$02, $00, $00, $00, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $fe
17e70     FC FA FA F8 
17e74     F8 F8 F8 F8 
17e78     FC 00 02 04 
17e7c     04 04 04 02 | 	byte	$fc, $fa, $fa, $f8, $f8, $f8, $f8, $f8, $fc, $00, $02, $04, $04, $04, $04, $02
17e80     00 00 00 00 
17e84     06 02 02 00 
17e88     00 00 00 00 
17e8c     00 FE FE FC | 	byte	$00, $00, $00, $00, $06, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc
17e90     FA FA FA F8 
17e94     F8 F8 F8 FA 
17e98     FE 00 04 04 
17e9c     04 04 04 02 | 	byte	$fa, $fa, $fa, $f8, $f8, $f8, $f8, $fa, $fe, $00, $04, $04, $04, $04, $04, $02
17ea0     00 00 00 02 
17ea4     04 02 02 00 
17ea8     00 00 00 00 
17eac     00 FE FE FC | 	byte	$00, $00, $00, $02, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc
17eb0     FA FA FA FA 
17eb4     F8 F8 F8 FC 
17eb8     00 02 04 04 
17ebc     04 04 04 02 | 	byte	$fa, $fa, $fa, $fa, $f8, $f8, $f8, $fc, $00, $02, $04, $04, $04, $04, $04, $02
17ec0     00 00 00 04 
17ec4     04 02 02 00 
17ec8     00 00 00 00 
17ecc     00 FE 00 FC | 	byte	$00, $00, $00, $04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $00, $fc
17ed0     FA FA FA FA 
17ed4     F8 F8 FA FE 
17ed8     00 02 04 04 
17edc     04 04 02 00 | 	byte	$fa, $fa, $fa, $fa, $f8, $f8, $fa, $fe, $00, $02, $04, $04, $04, $04, $02, $00
17ee0     00 00 00 04 
17ee4     02 02 00 00 
17ee8     00 00 00 00 
17eec     FE FE FC FA | 	byte	$00, $00, $00, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fa
17ef0     FA FA FA FA 
17ef4     F8 FA FC 00 
17ef8     00 04 04 04 
17efc     04 04 02 00 | 	byte	$fa, $fa, $fa, $fa, $f8, $fa, $fc, $00, $00, $04, $04, $04, $04, $04, $02, $00
17f00     00 00 FE 04 
17f04     02 02 00 00 
17f08     00 00 00 00 
17f0c     FE FE FC FA | 	byte	$00, $00, $fe, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fa
17f10     FA FA FA FA 
17f14     F8 FA FC 00 
17f18     02 04 04 04 
17f1c     04 02 00 00 | 	byte	$fa, $fa, $fa, $fa, $f8, $fa, $fc, $00, $02, $04, $04, $04, $04, $02, $00, $00
17f20     00 00 00 04 
17f24     02 00 00 00 
17f28     00 00 00 00 
17f2c     FE FC FC FA | 	byte	$00, $00, $00, $04, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa
17f30     FA FA FA FA 
17f34     FA FA       | 	byte	$fa[6]
17f36     FE 00 04 04 
17f3a     04 04 04 02 
17f3e     00 00 00 FE 
17f42     00 04 02 00 | 	byte	$fe, $00, $04, $04, $04, $04, $04, $02, $00, $00, $00, $fe, $00, $04, $02, $00
17f46     00 00 00 00 
17f4a     00          | 	byte	$00[5]
17f4b     FE FE FC FC 
17f4f     FC FA FA FA 
17f53     FA FA FC 00 
17f57     02 04 04 04 | 	byte	$fe, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fc, $00, $02, $04, $04, $04
17f5b     04 04 02 00 
17f5f     00 FE 00 00 
17f63     04 02 00 00 
17f67     00 00 00 00 | 	byte	$04, $04, $02, $00, $00, $fe, $00, $00, $04, $02, $00, $00, $00, $00, $00, $00
17f6b     FE FE FC FC 
17f6f     FA FA FA FA 
17f73     FA FA FE 00 
17f77     02 04 04 04 | 	byte	$fe, $fe, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fa, $fe, $00, $02, $04, $04, $04
17f7b     04 02 02 00 
17f7f     00 FE FC 02 
17f83     02 00 00 00 
17f87     00 00 00 FE | 	byte	$04, $02, $02, $00, $00, $fe, $fc, $02, $02, $00, $00, $00, $00, $00, $00, $fe
17f8b     FE FE FC FC 
17f8f     FA FA FA FA 
17f93     FA FC 00 00 
17f97     04 04 04 04 | 	byte	$fe, $fe, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fc, $00, $00, $04, $04, $04, $04
17f9b     04 02 00 00 
17f9f     00 FE FC 04 
17fa3     02 00 00 00 
17fa7     00 00 00 FE | 	byte	$04, $02, $00, $00, $00, $fe, $fc, $04, $02, $00, $00, $00, $00, $00, $00, $fe
17fab     FE FC FC FC 
17faf     FC FA FA FA 
17fb3     FA FC 00 02 
17fb7     04 04 04 04 | 	byte	$fe, $fc, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fc, $00, $02, $04, $04, $04, $04
17fbb     02 02 00 00 
17fbf     00 FC FE 04 
17fc3     02 00 00 00 
17fc7     00 00 FE FE | 	byte	$02, $02, $00, $00, $00, $fc, $fe, $04, $02, $00, $00, $00, $00, $00, $fe, $fe
17fcb     FE FC FC FC 
17fcf     FA FA FA FA 
17fd3     FA FE 00 04 
17fd7     04 04 04 04 | 	byte	$fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fe, $00, $04, $04, $04, $04, $04
17fdb     02 00 00 00 
17fdf     FE FC 00 02 
17fe3     02 00 00 00 
17fe7     00 00 FE FE | 	byte	$02, $00, $00, $00, $fe, $fc, $00, $02, $02, $00, $00, $00, $00, $00, $fe, $fe
17feb     FE FC FC FC 
17fef     FA FA FA FA 
17ff3     FC 00 02 04 
17ff7     06 04 04 04 | 	byte	$fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fc, $00, $02, $04, $06, $04, $04, $04
17ffb     02 00 00 FE 
17fff     FC FC 00 02 
18003     00 00 00 00 
18007     00 00 FE FE | 	byte	$02, $00, $00, $fe, $fc, $fc, $00, $02, $00, $00, $00, $00, $00, $00, $fe, $fe
1800b     FC FC FC FC 
1800f     FA FA FA FA 
18013     FE 00 02 06 
18017     06 04 04 02 | 	byte	$fc, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fe, $00, $02, $06, $06, $04, $04, $02
1801b     02 00 00 FE 
1801f     FC FC 02 02 
18023     00 00 00 00 
18027     00 FE FE FE | 	byte	$02, $00, $00, $fe, $fc, $fc, $02, $02, $00, $00, $00, $00, $00, $fe, $fe, $fe
1802b     FC FC FC FC 
1802f     FA FA FA FC 
18033     00 00 04 06 
18037     04 04 04 02 | 	byte	$fc, $fc, $fc, $fc, $fa, $fa, $fa, $fc, $00, $00, $04, $06, $04, $04, $04, $02
1803b     00 00 00 FE 
1803f     FC FC 04 02 
18043     00 00 00 00 
18047     00 FE FE FE | 	byte	$00, $00, $00, $fe, $fc, $fc, $04, $02, $00, $00, $00, $00, $00, $fe, $fe, $fe
1804b     FC FC FC FC 
1804f     FC          | 	byte	$fc[5]
18050     FA FA FC 00 
18054     02 04 06 04 
18058     04 04 02 00 
1805c     00 FE FC FC | 	byte	$fa, $fa, $fc, $00, $02, $04, $06, $04, $04, $04, $02, $00, $00, $fe, $fc, $fc
18060     FE 02 02 00 
18064     00 00 00 00 
18068     FE FE FC FC 
1806c     FC FC FC FA | 	byte	$fe, $02, $02, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fa
18070     FA FC FE 00 
18074     04 06 06 04 
18078     04 02 00 00 
1807c     00 FE FC FC | 	byte	$fa, $fc, $fe, $00, $04, $06, $06, $04, $04, $02, $00, $00, $00, $fe, $fc, $fc
18080     00 02 00 00 
18084     00 00 00 FE 
18088     FE FE FC FC 
1808c     FC FC FC FA | 	byte	$00, $02, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fa
18090     FC FC 00 00 
18094     04 06 04 04 
18098     04 02 00 00 
1809c     00 FE FC FC | 	byte	$fc, $fc, $00, $00, $04, $06, $04, $04, $04, $02, $00, $00, $00, $fe, $fc, $fc
180a0     00 02 00 00 
180a4     00 00 00 FE 
180a8     FE FE FC FC 
180ac     FC FC FC FA | 	byte	$00, $02, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fa
180b0     FC FE 00 02 
180b4     06 06 04 04 
180b8     04 02 00 00 
180bc     FE FC FC FC | 	byte	$fc, $fe, $00, $02, $06, $06, $04, $04, $04, $02, $00, $00, $fe, $fc, $fc, $fc
180c0     02 02 00 00 
180c4     00 00 00 FE 
180c8     FE FC FC FC 
180cc     FC FC FC FC | 	byte	$02, $02, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc
180d0     FC 00 00 04 
180d4     06 06 04 04 
180d8     02 00 00 00 
180dc     FE FC FC FE | 	byte	$fc, $00, $00, $04, $06, $06, $04, $04, $02, $00, $00, $00, $fe, $fc, $fc, $fe
180e0     02 02 00 00 
180e4     00 00 FE FE 
180e8     FE FC FC FC 
180ec     FC FC FC FC | 	byte	$02, $02, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc
180f0     FC 00 02 04 
180f4     06 04 04 04 
180f8     02 00 00 00 
180fc     FE FC FC 00 | 	byte	$fc, $00, $02, $04, $06, $04, $04, $04, $02, $00, $00, $00, $fe, $fc, $fc, $00
18100     02 00 00 00 
18104     00 00 FE FE 
18108     FC FC FC FC 
1810c     FC FC FC FC | 	byte	$02, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
18110     FE 00 04 06 
18114     04 04 04 02 
18118     02 00 00 FE 
1811c     FC FC FC 00 | 	byte	$fe, $00, $04, $06, $04, $04, $04, $02, $02, $00, $00, $fe, $fc, $fc, $fc, $00
18120     02 00 00 00 
18124     00 00 FE FE 
18128     FC FC FC FC 
1812c     FC FC FC FC | 	byte	$02, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
18130     00 00 04 06 
18134     04 04 04 02 
18138     00 00 00 00 
1813c     FC FC FC 02 | 	byte	$00, $00, $04, $06, $04, $04, $04, $02, $00, $00, $00, $00, $fc, $fc, $fc, $02
18140     02 00 00 00 
18144     00 FE FE FE 
18148     FC FC FC FC 
1814c     FC FC FC FE | 	byte	$02, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe
18150     00 02 06 04 
18154     04 04 04 02 
18158     00 00 00 FE 
1815c     FC FC FC 02 | 	byte	$00, $02, $06, $04, $04, $04, $04, $02, $00, $00, $00, $fe, $fc, $fc, $fc, $02
18160     00 00 00 00 
18164     00          | 	byte	$00[5]
18165     FE FE FC FC 
18169     FC FC FC FC 
1816d     FC FC FE 00 
18171     04 06 04 04 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $04, $06, $04, $04
18175     04 02 02 00 
18179     00 00 FE FC 
1817d     FC 00 02 00 
18181     00 00 00 00 | 	byte	$04, $02, $02, $00, $00, $00, $fe, $fc, $fc, $00, $02, $00, $00, $00, $00, $00
18185     FE FE FC FC 
18189     FC FC FC FC 
1818d     FC FE 00 02 
18191     04 04 04 04 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $02, $04, $04, $04, $04
18195     04 02 00 00 
18199     00 00 FC FC 
1819d     FC 00 02 00 
181a1     00 00 00 00 | 	byte	$04, $02, $00, $00, $00, $00, $fc, $fc, $fc, $00, $02, $00, $00, $00, $00, $00
181a5     FE FE FC FC 
181a9     FC FC FC FC 
181ad     FC FE 00 02 
181b1     04 04 04 04 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $02, $04, $04, $04, $04
181b5     02 02 00 00 
181b9     00 00 FC FC 
181bd     FC 02 00 00 
181c1     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $fc, $fc, $fc, $02, $00, $00, $00, $00, $00, $00
181c5     FE FC FC FC 
181c9     FC FC FC FC 
181cd     FC 00 00 04 
181d1     06 04 04 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $00, $00, $04, $06, $04, $04, $02
181d5     02 00 00 00 
181d9     00 00 FC FC 
181dd     FC 02 00 00 
181e1     00 00 00 FE | 	byte	$02, $00, $00, $00, $00, $00, $fc, $fc, $fc, $02, $00, $00, $00, $00, $00, $fe
181e5     FE FC FC FC 
181e9     FC FC FC FC 
181ed     FE 00 02 04 
181f1     04 04 04 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $02, $04, $04, $04, $04, $02
181f5     02 00 00 00 
181f9     00 FE FC FC 
181fd     00 02 00 00 
18201     00 00 00 FE | 	byte	$02, $00, $00, $00, $00, $fe, $fc, $fc, $00, $02, $00, $00, $00, $00, $00, $fe
18205     FE FC FC FC 
18209     FC FC FC FC 
1820d     00 00 04 04 
18211     04 04 04 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $00, $00, $04, $04, $04, $04, $04, $02
18215     02 00 00 00 
18219     00 FC FC FC 
1821d     00 00 00 00 
18221     00 00 00 FE | 	byte	$02, $00, $00, $00, $00, $fc, $fc, $fc, $00, $00, $00, $00, $00, $00, $00, $fe
18225     FC FC FC FC 
18229     FC FC FC FC | 	byte	$fc[8]
1822d     00 00 04 04 
18231     04 04 02 02 
18235     00 00 00 00 
18239     FE FC FC FC | 	byte	$00, $00, $04, $04, $04, $04, $02, $02, $00, $00, $00, $00, $fe, $fc, $fc, $fc
1823d     00 00 00 00 
18241     00 00 00    | 	byte	$00[7]
18244     FE FC FC FC 
18248     FC FC FC FC 
1824c     FE 00 02 04 
18250     04 04 04 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $02, $04, $04, $04, $04, $02
18254     02 00 00 00 
18258     00 FE FC FC 
1825c     FC 02 00 00 
18260     00 00 00 00 | 	byte	$02, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $02, $00, $00, $00, $00, $00, $00
18264     FE FC FC FC 
18268     FC FC FC FC 
1826c     00 00 04 04 
18270     04 04 02 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $00, $00, $04, $04, $04, $04, $02, $02
18274     02 00 00 00 
18278     00 FE FC FC 
1827c     FE 00 00 00 
18280     00 00 00 FE | 	byte	$02, $00, $00, $00, $00, $fe, $fc, $fc, $fe, $00, $00, $00, $00, $00, $00, $fe
18284     FC FC FC FC 
18288     FC FC FC    | 	byte	$fc[7]
1828b     FE 00 02 04 
1828f     04 04 02 02 
18293     02 02 00 00 
18297     00 FE FC FC | 	byte	$fe, $00, $02, $04, $04, $04, $02, $02, $02, $02, $00, $00, $00, $fe, $fc, $fc
1829b     FA 00 00 00 
1829f     00 00 00 00 
182a3     FE FC FC FC 
182a7     FC FC FC FC | 	byte	$fa, $00, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc
182ab     FE 00 02 06 
182af     04 04 02 02 
182b3     02 00 00 00 
182b7     00 FE FC FC | 	byte	$fe, $00, $02, $06, $04, $04, $02, $02, $02, $00, $00, $00, $00, $fe, $fc, $fc
182bb     FA 00 00 00 
182bf     00 00 00 00 
182c3     FE FC FC FC 
182c7     FC FC FC FE | 	byte	$fa, $00, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fe
182cb     00 00 04 06 
182cf     04 04 02 02 
182d3     00 00 00 00 
182d7     00 FE FC FC | 	byte	$00, $00, $04, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc
182db     FA 00 00 00 
182df     00 00 00 00 
182e3     FE FC FC FC 
182e7     FC FC FC FE | 	byte	$fa, $00, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fe
182eb     00 02 04 04 
182ef     04 02 02 02 
182f3     00 00 00 00 
182f7     FE FE FC FA | 	byte	$00, $02, $04, $04, $04, $02, $02, $02, $00, $00, $00, $00, $fe, $fe, $fc, $fa
182fb     FC 00 00 00 
182ff     00 00 00 FE 
18303     FC FC FA FC 
18307     FC FC FC 00 | 	byte	$fc, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $fc, $fc, $fc, $fc, $00
1830b     00 04 06 04 
1830f     04 02 02 00 
18313     00 00 00 00 
18317     FE FC FC FA | 	byte	$00, $04, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa
1831b     FC 00 00 00 
1831f     00 00 00 FE 
18323     FC FC FA FC 
18327     FC FC FE 00 | 	byte	$fc, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $fc, $fc, $fc, $fe, $00
1832b     02 04 06 04 
1832f     02 02 02 00 
18333     00 00 00 00 
18337     FE FC FC FA | 	byte	$02, $04, $06, $04, $02, $02, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa
1833b     00 00 00 00 
1833f     00 00 00    | 	byte	$00[7]
18342     FE FC FC FC 
18346     FC FC FC 00 
1834a     00 02 04 06 
1834e     04 02 02 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $00, $00, $02, $04, $06, $04, $02, $02, $02
18352     00 00 00 00 
18356     00          | 	byte	$00[5]
18357     FE FC FA FA 
1835b     00 00 00 00 
1835f     00 00 FE FE 
18363     FC FC FC FC | 	byte	$fe, $fc, $fa, $fa, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc
18367     FC FE 00 00 
1836b     04 06 04 04 
1836f     02 02 00 00 
18373     00 00 00 00 | 	byte	$fc, $fe, $00, $00, $04, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $00
18377     FE FC FA FA 
1837b     00 00 00 00 
1837f     00 00 FE FC 
18383     FC FC FC FC | 	byte	$fe, $fc, $fa, $fa, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fc
18387     FC FE 00 02 
1838b     04 06 04 02 
1838f     02 02 00 00 
18393     00 00 FE FE | 	byte	$fc, $fe, $00, $02, $04, $06, $04, $02, $02, $02, $00, $00, $00, $00, $fe, $fe
18397     FC FC FA FA 
1839b     00 00 00 00 
1839f     00 00 00 FC 
183a3     FC FC FC FC | 	byte	$fc, $fc, $fa, $fa, $00, $00, $00, $00, $00, $00, $00, $fc, $fc, $fc, $fc, $fc
183a7     FC 00 00 04 
183ab     04 06 04 02 
183af     02 02 00 00 
183b3     00 00 00 FE | 	byte	$fc, $00, $00, $04, $04, $06, $04, $02, $02, $02, $00, $00, $00, $00, $00, $fe
183b7     FC FC FA FC 
183bb     00 00 00 00 
183bf     00 FE FE FC 
183c3     FC FC FC FC | 	byte	$fc, $fc, $fa, $fc, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc, $fc
183c7     FE 00 00 04 
183cb     06 04 04 02 
183cf     02 00 00 00 
183d3     00 00 FE FE | 	byte	$fe, $00, $00, $04, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fe
183d7     FC FA FA FC 
183db     00 00 00 00 
183df     00 00 FC FC 
183e3     FC FC FC FE | 	byte	$fc, $fa, $fa, $fc, $00, $00, $00, $00, $00, $00, $fc, $fc, $fc, $fc, $fc, $fe
183e7     FE 00 02 06 
183eb     06 04 04 02 
183ef     02 00 00 00 
183f3     00 00 FE FC | 	byte	$fe, $00, $02, $06, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fc
183f7     FC FA FA FE 
183fb     00 00 00 00 
183ff     00 FE FC FC 
18403     FC FC FC FE | 	byte	$fc, $fa, $fa, $fe, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fc, $fe
18407     00 00 04 06 
1840b     06 04 02 02 
1840f     02 00 00 00 
18413     00 FE FE FC | 	byte	$00, $00, $04, $06, $06, $04, $02, $02, $02, $00, $00, $00, $00, $fe, $fe, $fc
18417     FC FA FA 00 
1841b     00 00 00 00 
1841f     00 FE FC FC 
18423     FC FC FE FE | 	byte	$fc, $fa, $fa, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fe, $fe
18427     00 02 04 06 
1842b     04 04 02 02 
1842f     00 00 00 00 
18433     00 FE FE FC | 	byte	$00, $02, $04, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fe, $fc
18437     FA FA FA 00 
1843b     00 00 00 00 
1843f     00 FC FC FC 
18443     FC FC FE 00 | 	byte	$fa, $fa, $fa, $00, $00, $00, $00, $00, $00, $fc, $fc, $fc, $fc, $fc, $fe, $00
18447     00 04 06 06 
1844b     04 04 02 02 
1844f     00 00 00 00 
18453     00 FE FC FC | 	byte	$00, $04, $06, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc
18457     FA FA FA 00 
1845b     00 00 00 00 
1845f     FE FC FC FC 
18463     FC FE FE 00 | 	byte	$fa, $fa, $fa, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fe, $fe, $00
18467     02 04 06 06 
1846b     04 04 02 02 
1846f     00 00 00 00 
18473     FE FE FC FC | 	byte	$02, $04, $06, $06, $04, $04, $02, $02, $00, $00, $00, $00, $fe, $fe, $fc, $fc
18477     FA FA FA 00 
1847b     00 00 00 00 
1847f     FE FC FC FC 
18483     FC FE 00 00 | 	byte	$fa, $fa, $fa, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fe, $00, $00
18487     02 06 06 06 
1848b     04 02 02 02 
1848f     00 00 00 FE 
18493     FE FC FC FC | 	byte	$02, $06, $06, $06, $04, $02, $02, $02, $00, $00, $00, $fe, $fe, $fc, $fc, $fc
18497     FA FA FC 00 
1849b     00 00 00 00 
1849f     FC FC FC FC 
184a3     FE FE 00 00 | 	byte	$fa, $fa, $fc, $00, $00, $00, $00, $00, $fc, $fc, $fc, $fc, $fe, $fe, $00, $00
184a7     04 06 06 04 
184ab     04 02 02 00 
184af     00 00 00 00 
184b3     FE FC FC FA | 	byte	$04, $06, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa
184b7     FA FA FA 00 
184bb     00 00 00 FE 
184bf     FC FC FC FE 
184c3     FE FE 00 02 | 	byte	$fa, $fa, $fa, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fe, $fe, $fe, $00, $02
184c7     06 06 06 04 
184cb     04 02 02 00 
184cf     00 00 00 FE 
184d3     FC FC FC FC | 	byte	$06, $06, $06, $04, $04, $02, $02, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc
184d7     FC FC FE 00 
184db     00 00 00 00 
184df     FE FE FE 00 
184e3     00 00 00 02 | 	byte	$fc, $fc, $fe, $00, $00, $00, $00, $00, $fe, $fe, $fe, $00, $00, $00, $00, $02
184e7     04 04 04 02 
184eb     02 00 00 00 
184ef     00 00 00 00 
184f3     FE FE FE FC | 	byte	$04, $04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc
184f7     FC FC FE 00 
184fb     00 00 00 00 
184ff     FE FE 00 00 
18503     00 00 00 04 | 	byte	$fc, $fc, $fe, $00, $00, $00, $00, $00, $fe, $fe, $00, $00, $00, $00, $00, $04
18507     04 04 02 02 
1850b     02 00 00 00 
1850f     00 00 00 00 
18513     FE FE FC FC | 	byte	$04, $04, $02, $02, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc
18517     FC FC 00 00 
1851b     00 00 00 FE 
1851f     FE FE 00 00 
18523     00 00 00 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $fe, $fe, $fe, $00, $00, $00, $00, $00, $04
18527     04 04 02 02 
1852b     02 00 00 00 
1852f     00 00 00 FE 
18533     FE FE FE FC | 	byte	$04, $04, $02, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fc
18537     FC FC 00 00 
1853b     00 00 00 00 
1853f     FE 00 00 00 
18543     00 00 02 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $02, $04
18547     04 04 02 02 
1854b     00 00 00 00 
1854f     00 00 00 FE 
18553     FE FE FC FC | 	byte	$04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc
18557     FC FC 00 00 
1855b     00 00 00 FE 
1855f     00 00 00 00 
18563     00 00 04 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $04, $04
18567     04 04 02 02 
1856b     00 00 00 00 
1856f     00 00 FE FE 
18573     FE FE FC FC | 	byte	$04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fc, $fc
18577     FC FC 00 00 
1857b     00 00 00 FE 
1857f     00 00 00 00 
18583     00 02 04 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $02, $04, $04
18587     04 04 02 02 
1858b     00 00 00 00 
1858f     00 00 FE FE 
18593     FE FC FC FC | 	byte	$04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc
18597     FC FC 00 00 
1859b     00 00 FE 00 
1859f     00 00 00 00 
185a3     00 04 06 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $04, $06, $04
185a7     04 04 02 02 
185ab     00 00 00 00 
185af     00 00 FE FE 
185b3     FE FC FC FC | 	byte	$04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc
185b7     FC FC 00 00 
185bb     00 00 FE 00 
185bf     00 00 00 00 
185c3     02 04 06 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $02, $04, $06, $04
185c7     04 04 02 02 
185cb     00 00 00 00 
185cf     00 FE FE FE 
185d3     FE FC FC FC | 	byte	$04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fc, $fc, $fc
185d7     FC FC 00 00 
185db     00 00 00 00 
185df     00 00 00 00 
185e3     02 06 06 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $06, $06, $04
185e7     04 04 02 00 
185eb     00 00 00 00 
185ef     00 FE FE FE 
185f3     FE FC FC FC | 	byte	$04, $04, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fc, $fc, $fc
185f7     FC FC 00 00 
185fb     00 00 00 00 
185ff     00 00 00 00 
18603     04 06 04 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $06, $04, $04
18607     04 04 02 00 
1860b     00 00 00 00 
1860f     00 FE FE FE 
18613     FE FC FC FC | 	byte	$04, $04, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fc, $fc, $fc
18617     FC FC 00 00 
1861b     00 00 00 FE 
1861f     FE FC FC FC 
18623     FA FA FA FA | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa
18627     FA 00 00 02 
1862b     04 04 04 04 
1862f     04 02 02 02 
18633     02 00 00 00 | 	byte	$fa, $00, $00, $02, $04, $04, $04, $04, $04, $02, $02, $02, $02, $00, $00, $00
18637     00 00 00 00 
1863b     FE FE FE FE 
1863f     FE FC FC FC 
18643     FA FA FA FA | 	byte	$00, $00, $00, $00, $fe, $fe, $fe, $fe, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa
18647     FC 00 00 02 
1864b     04 04 04 04 
1864f     02 02 02 02 
18653     02 00 00 00 | 	byte	$fc, $00, $00, $02, $04, $04, $04, $04, $02, $02, $02, $02, $02, $00, $00, $00
18657     00 00 00 FE 
1865b     FE FE FE FE 
1865f     FE FC FC FA 
18663     FA FA FA FA | 	byte	$00, $00, $00, $fe, $fe, $fe, $fe, $fe, $fe, $fc, $fc, $fa, $fa, $fa, $fa, $fa
18667     FE 00 00 04 
1866b     04 04 04 04 
1866f     02 02 02 02 
18673     00 00 00 00 | 	byte	$fe, $00, $00, $04, $04, $04, $04, $04, $02, $02, $02, $02, $00, $00, $00, $00
18677     00 00 00 FE 
1867b     FE FE FE FE 
1867f     FC FC FC FA 
18683     FA FA FA FA | 	byte	$00, $00, $00, $fe, $fe, $fe, $fe, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fa
18687     00 00 02 04 
1868b     04 04 04 02 
1868f     02 02 02 00 
18693     00 00 00 00 | 	byte	$00, $00, $02, $04, $04, $04, $04, $02, $02, $02, $02, $00, $00, $00, $00, $00
18697     00 00 00 FE 
1869b     FE FE FE FE 
1869f     FC FC FC FA 
186a3     FA FA FA FC | 	byte	$00, $00, $00, $fe, $fe, $fe, $fe, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fc
186a7     00 00 00 02 
186ab     02 02 02 00 
186af     00 00 00 00 
186b3     00 00 00 00 | 	byte	$00, $00, $00, $02, $02, $02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
186b7     00 00 00 00 
186bb     00 00 00 00 | 	byte	$00[8]
186bf     FE FE FC FC 
186c3     FC FC FC FE 
186c7     00 00 02 02 
186cb     02 02 02 00 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fe, $00, $00, $02, $02, $02, $02, $02, $00
186cf     00 00 00 00 
186d3     00 00 00 00 
186d7     00 00 00 00 
186db     00 00 00    | 	byte	$00[15]
186de     FE FE FE FC 
186e2     FC FC FC FE 
186e6     FE 00 00 02 
186ea     02 02 02 00 | 	byte	$fe, $fe, $fe, $fc, $fc, $fc, $fc, $fe, $fe, $00, $00, $02, $02, $02, $02, $00
186ee     00 00 00 00 
186f2     00 00 00 00 
186f6     00 00 00 00 
186fa     00 00 00 00 | 	byte	$00[16]
186fe     FE FE FE FC 
18702     FC FC FC FE 
18706     00 00 02 02 
1870a     02 02 02 00 | 	byte	$fe, $fe, $fe, $fc, $fc, $fc, $fc, $fe, $00, $00, $02, $02, $02, $02, $02, $00
1870e     00 00 00 00 
18712     00 00 00 00 
18716     00 00 00 00 
1871a     00 00 00 00 | 	byte	$00[16]
1871e     FE FE FC FC 
18722     FC FC FE FE 
18726     00 00 02 02 
1872a     02 02 02 00 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fe, $fe, $00, $00, $02, $02, $02, $02, $02, $00
1872e     00 00 00 00 
18732     F5 F9 B2 80 
18736     E0 53 6E 3E 
1873a     00 A3 80 B1 | 	byte	$00, $00, $00, $00, $f5, $f9, $b2, $80, $e0, $53, $6e, $3e, $00, $a3, $80, $b1
1873e     0D 0B E9 FF 
18742     18 E9 A3 B1 
18746     FF 47 36 F1 
1874a     A3 B9 2C 46 | 	byte	$0d, $0b, $e9, $ff, $18, $e9, $a3, $b1, $ff, $47, $36, $f1, $a3, $b9, $2c, $46
1874e     00 C2 C9 05 
18752     0B 0D 1C 0F 
18756     D2 A3 D0 3B 
1875a     65 3E E9 A3 | 	byte	$00, $c2, $c9, $05, $0b, $0d, $1c, $0f, $d2, $a3, $d0, $3b, $65, $3e, $e9, $a3
1875e     B1 FF 4A 43 
18762     17 E9 D8 E5 
18766     F0 F9 14 36 
1876a     17 D2 9E E0 | 	byte	$b1, $ff, $4a, $43, $17, $e9, $d8, $e5, $f0, $f9, $14, $36, $17, $d2, $9e, $e0
1876e     2C 27 00 D6 
18772     C6 D9 E9 DD 
18776     D9 F0 F1 FF 
1877a     E1 F1 C1 A3 | 	byte	$2c, $27, $00, $d6, $c6, $d9, $e9, $dd, $d9, $f0, $f1, $ff, $e1, $f1, $c1, $a3
1877e     E0 00 A7 A3 
18782     9A B6 F0 C2 
18786     9E E1 CE C5 
1878a     A3 BD 97 96 | 	byte	$e0, $00, $a7, $a3, $9a, $b6, $f0, $c2, $9e, $e1, $ce, $c5, $a3, $bd, $97, $96
1878e     D0 AD FF 96 
18792     BA C1 9B F7 
18796     E1 B2 80 D0 
1879a     D0 E9 E1 8F | 	byte	$d0, $ad, $ff, $96, $ba, $c1, $9b, $f7, $e1, $b2, $80, $d0, $d0, $e9, $e1, $8f
1879e     C1 B2 FB 88 
187a2     B6 D0 34 5B 
187a6     00 D9 C1 00 
187aa     D0 00 82 E0 | 	byte	$c1, $b2, $fb, $88, $b6, $d0, $34, $5b, $00, $d9, $c1, $00, $d0, $00, $82, $e0
187ae     D9 0D 00 F7 
187b2     F1 17 B1 1F 
187b6     FF 2E 36 E8 
187ba     1F 09 00 78 | 	byte	$d9, $0d, $00, $f7, $f1, $17, $b1, $1f, $ff, $2e, $36, $e8, $1f, $09, $00, $78
187be     3B 55 3E 2C 
187c2     07 65 72 1F 
187c6     7A 55 72 6D 
187ca     53 46 5B 6A | 	byte	$3b, $55, $3e, $2c, $07, $65, $72, $1f, $7a, $55, $72, $6d, $53, $46, $5b, $6a
187ce     7F 7A 7F 53 
187d2     5D 7F 7F 7F 
187d6     7F 7F 7C 7F 
187da     7A 7F 7F 7A | 	byte	$7f, $7a, $7f, $53, $5d, $7f, $7f, $7f, $7f, $7f, $7c, $7f, $7a, $7f, $7f, $7a
187de     7F 7F 7F 7F 
187e2     5B 71 7A 7C 
187e6     7F 7F 7F 7F 
187ea     7F 4F 7C 7A | 	byte	$7f, $7f, $7f, $7f, $5b, $71, $7a, $7c, $7f, $7f, $7f, $7f, $7f, $4f, $7c, $7a
187ee     7F 7F 7C 7F 
187f2     3B 5D 7F 5B 
187f6     5D 53 6D 5B 
187fa     5E 2A 17 24 | 	byte	$7f, $7f, $7c, $7f, $3b, $5d, $7f, $5b, $5d, $53, $6d, $5b, $5e, $2a, $17, $24
187fe     7A 3E 27 3E 
18802     1C 1F 72 E5 
18806     F5 17 F0 1F 
1880a     F0 C2 E0 E0 | 	byte	$7a, $3e, $27, $3e, $1c, $1f, $72, $e5, $f5, $17, $f0, $1f, $f0, $c2, $e0, $e0
1880e     F7 0B B9 DC 
18812     A3 80 F0 A2 
18816     F1 B2 80 B6 
1881a     86 BD A3 80 | 	byte	$f7, $0b, $b9, $dc, $a3, $80, $f0, $a2, $f1, $b2, $80, $b6, $86, $bd, $a3, $80
1881e     00 82 86 80 
18822     82 80 93 80 
18826     80 80 86 80 
1882a     80 80 80 82 | 	byte	$00, $82, $86, $80, $82, $80, $93, $80, $80, $80, $86, $80, $80, $80, $80, $82
1882e     80 80 80 80 
18832     80 80 80 80 
18836     80 80 80    | 	byte	$80[11]
18839     82 80 80 80 
1883d     80 80 80 80 
18841     80 80 80 80 
18845     80 80 80 80 | 	byte	$82, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
18849     84 80 80 80 
1884d     80 80 93 80 
18851     80 80 82 80 
18855     93 B1 82 84 | 	byte	$84, $80, $80, $80, $80, $80, $93, $80, $80, $80, $82, $80, $93, $b1, $82, $84
18859     82 80 D8 80 
1885d     9B 9A A2 C2 
18861     AD CE B1 AB 
18865     B6 C5 07 E8 | 	byte	$82, $80, $d8, $80, $9b, $9a, $a2, $c2, $ad, $ce, $b1, $ab, $b6, $c5, $07, $e8
18869     CA E0 E0 E8 
1886d     FD 1C 00 1F 
18871     FF 1F 1F 0D 
18875     46 2C 3E 3B | 	byte	$ca, $e0, $e0, $e8, $fd, $1c, $00, $1f, $ff, $1f, $1f, $0d, $46, $2c, $3e, $3b
18879     3E 76 2A 3E 
1887d     28 72 7F 55 
18881     7A 4E 62 7F 
18885     7E 6D 59 7F | 	byte	$3e, $76, $2a, $3e, $28, $72, $7f, $55, $7a, $4e, $62, $7f, $7e, $6d, $59, $7f
18889     7F 7A 7E 7F 
1888d     6D 7F 7F 7F 
18891     7F 7F 7F 7F 
18895     7F 7F 7F 7F | 	byte	$7f, $7a, $7e, $7f, $6d, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
18899     7F 7F 7F 7F 
      ...             
188b5     7F 7F 7F 7F 
188b9     7F 7F       | 	byte	$7f[34]
188bb     7C 7F 7F 7F 
188bf     7F 7F 7F 7F 
188c3     7F 7F 65 7F 
188c7     61 7C 7A 7C | 	byte	$7c, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $65, $7f, $61, $7c, $7a, $7c
188cb     62 53 5D 5B 
188cf     27 7F 34 1F 
188d3     42 10 46 34 
188d7     00 37 09 D6 | 	byte	$62, $53, $5d, $5b, $27, $7f, $34, $1f, $42, $10, $46, $34, $00, $37, $09, $d6
188db     1F E8 0B F1 
188df     F0 D0 F1 D0 
188e3     C6 A7 E0 D2 
188e7     B1 CA 9B 82 | 	byte	$1f, $e8, $0b, $f1, $f0, $d0, $f1, $d0, $c6, $a7, $e0, $d2, $b1, $ca, $9b, $82
188eb     A7 8B BE 80 
188ef     80 80 82 84 
188f3     82 80 80 80 
188f7     80 80 80 80 | 	byte	$a7, $8b, $be, $80, $80, $80, $82, $84, $82, $80, $80, $80, $80, $80, $80, $80
188fb     80 80 80 80 
      ...             
18943     80 80 80 80 
18947     80 80 80 80 | 	byte	$80[80]
1894b     92 80 80 AF 
1894f     80 8A 9F 82 
18953     AB B1 E4 8A 
18957     C2 C1 A9 E9 | 	byte	$92, $80, $80, $af, $80, $8a, $9f, $82, $ab, $b1, $e4, $8a, $c2, $c1, $a9, $e9
1895b     F0 D6 F0 F1 
1895f     FD FB 17 1C 
18963     17 FF 3E 1C 
18967     34 1F 53 65 | 	byte	$f0, $d6, $f0, $f1, $fd, $fb, $17, $1c, $17, $ff, $3e, $1c, $34, $1f, $53, $65
1896b     61 3B 6D 76 
1896f     59 75 7F 7C 
18973     7F 7C 7F 7F 
18977     7F 7F 7F 7F | 	byte	$61, $3b, $6d, $76, $59, $75, $7f, $7c, $7f, $7c, $7f, $7f, $7f, $7f, $7f, $7f
1897b     7F 7F 7F 7F 
      ...             
189d7     7F 7F 7F 7F 
189db     7F 7F 7F    | 	byte	$7f[99]
189de     7C 5B 7F 62 
189e2     5D 5D 6A 3E 
189e6     4E 2E 4B 4E 
189ea     4B 00 1C 3B | 	byte	$7c, $5b, $7f, $62, $5d, $5d, $6a, $3e, $4e, $2e, $4b, $4e, $4b, $00, $1c, $3b
189ee     17 FF 13 FF 
189f2     18 FF 00 D9 
189f6     FD E1 E0 CE 
189fa     DC E8 D2 BA | 	byte	$17, $ff, $13, $ff, $18, $ff, $00, $d9, $fd, $e1, $e0, $ce, $dc, $e8, $d2, $ba
189fe     D0 C2 8F B1 
18a02     AB 9B 92 9B 
18a06     82 88 9A 80 
18a0a     80 84 80 80 | 	byte	$d0, $c2, $8f, $b1, $ab, $9b, $92, $9b, $82, $88, $9a, $80, $80, $84, $80, $80
18a0e     80 80 80 80 
      ...             
18a6e     80 80 80 80 
18a72     80 80       | 	byte	$80[102]
18a74     82 80 80 84 
18a78     80 A2 8A 88 
18a7c     82 9B 9A 97 
18a80     9A A2 B2 9E | 	byte	$82, $80, $80, $84, $80, $a2, $8a, $88, $82, $9b, $9a, $97, $9a, $a2, $b2, $9e
18a84     BE C1 D2 AF 
18a88     A2 D2 F0 CA 
18a8c     C1 D9 D0 E1 
18a90     F5 DC F9 E1 | 	byte	$be, $c1, $d2, $af, $a2, $d2, $f0, $ca, $c1, $d9, $d0, $e1, $f5, $dc, $f9, $e1
18a94     C6 FF 0F E5 
18a98     E0 F1 1C 13 
18a9c     0D 0F 1C 1F 
18aa0     34 1C 24 20 | 	byte	$c6, $ff, $0f, $e5, $e0, $f1, $1c, $13, $0d, $0f, $1c, $1f, $34, $1c, $24, $20
18aa4     27 24 3E 5B 
18aa8     2E 1C 2C 7A 
18aac     3A 46 43 4E 
18ab0     53 4F 5E 4A | 	byte	$27, $24, $3e, $5b, $2e, $1c, $2c, $7a, $3a, $46, $43, $4e, $53, $4f, $5e, $4a
18ab4     75 51 59 7A 
18ab8     5D 55 3B 7F 
18abc     72 7C 57 71 
18ac0     7E 7F 6E 7F | 	byte	$75, $51, $59, $7a, $5d, $55, $3b, $7f, $72, $7c, $57, $71, $7e, $7f, $6e, $7f
18ac4     7F 7F 7F 7F 
18ac8     7A 7F 7A 7F 
18acc     7F 7F 7F 7F 
18ad0     7F 7F 7F 7F | 	byte	$7f, $7f, $7f, $7f, $7a, $7f, $7a, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
18ad4     7F 7F 7F 7F 
      ...             
18b0c     7F 7F 7F 7F 
18b10     7F 7F 7F    | 	byte	$7f[63]
18b13     6D 7F 7F 7F 
18b17     7F 7F 7F 7F 
18b1b     7F 76 7F 6D 
18b1f     7A 7A 7F 7F | 	byte	$6d, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $76, $7f, $6d, $7a, $7a, $7f, $7f
18b23     75 5D 7F 7F 
18b27     72 65 62 7C 
18b2b     66 6D 6A 6E 
18b2f     5B 65 5D 6A | 	byte	$75, $5d, $7f, $7f, $72, $65, $62, $7c, $66, $6d, $6a, $6e, $5b, $65, $5d, $6a
18b33     69 55 4B 6D 
18b37     5D 43 61 4A 
18b3b     5D 53 3E 4B 
18b3f     4A 3F 27 3B | 	byte	$69, $55, $4b, $6d, $5d, $43, $61, $4a, $5d, $53, $3e, $4b, $4a, $3f, $27, $3b
18b43     46 3B 23 34 
18b47     3A 37 3E 0D 
18b4b     36 0F 1C 17 
18b4f     37 27 0B 01 | 	byte	$46, $3b, $23, $34, $3a, $37, $3e, $0d, $36, $0f, $1c, $17, $37, $27, $0b, $01
18b53     1C 2A 09 09 
18b57     05 0B 07 07 
18b5b     00 F1 14 F9 
18b5f     FF 03 00 EC | 	byte	$1c, $2a, $09, $09, $05, $0b, $07, $07, $00, $f1, $14, $f9, $ff, $03, $00, $ec
18b63     F5 F0 FD F9 
18b67     E5 DD F5 ED 
18b6b     D2 E5 E1 CC 
18b6f     E9 D6 CA C5 | 	byte	$f5, $f0, $fd, $f9, $e5, $dd, $f5, $ed, $d2, $e5, $e1, $cc, $e9, $d6, $ca, $c5
18b73     C2 CE BD B5 
18b77     CA AF B1 B2 
18b7b     A2 AB A3 B1 
18b7f     A3 A9 A7 93 | 	byte	$c2, $ce, $bd, $b5, $ca, $af, $b1, $b2, $a2, $ab, $a3, $b1, $a3, $a9, $a7, $93
18b83     A2 AB AB 8A 
18b87     96 8F 92 9B 
18b8b     92 80 80 A2 
18b8f     88 8A 80 80 | 	byte	$a2, $ab, $ab, $8a, $96, $8f, $92, $9b, $92, $80, $80, $a2, $88, $8a, $80, $80
18b93     80 80 80 80 
      ...             
18beb     80 80 80 80 
18bef     80 80 80 80 | 	byte	$80[96]
18bf3     82 80 80 80 
18bf7     80 80 80 80 
18bfb     80 80 82 8B 
18bff     80 86 92 93 | 	byte	$82, $80, $80, $80, $80, $80, $80, $80, $80, $80, $82, $8b, $80, $86, $92, $93
18c03     9E 9A A2 97 
18c07     9A B1 AF B5 
18c0b     AF BA BA BE 
18c0f     C5 C9 C5 C9 | 	byte	$9e, $9a, $a2, $97, $9a, $b1, $af, $b5, $af, $ba, $ba, $be, $c5, $c9, $c5, $c9
18c13     E1 C5 E8 D9 
18c17     D4 E8 F3 F7 
18c1b     ED F0 F7 00 
18c1f     07 F9 09 10 | 	byte	$e1, $c5, $e8, $d9, $d4, $e8, $f3, $f7, $ed, $f0, $f7, $00, $07, $f9, $09, $10
18c23     1C 0D 24 18 
18c27     24 1F 28 36 
18c2b     32 30 3E 3B 
18c2f     51 4B 5D 55 | 	byte	$1c, $0d, $24, $18, $24, $1f, $28, $36, $32, $30, $3e, $3b, $51, $4b, $5d, $55
18c33     5E 5D 57 5D 
18c37     69 75 6A 6E 
18c3b     7A 7F 7C 7F 
18c3f     7C 7F 7F 7F | 	byte	$5e, $5d, $57, $5d, $69, $75, $6a, $6e, $7a, $7f, $7c, $7f, $7c, $7f, $7f, $7f
18c43     7F 7F 7F 7F 
      ...             
18c97     7F 7F 7F 7F 
18c9b     7F          | 	byte	$7f[89]
18c9c     78 7F 7C 7C 
18ca0     7A 7E 75 6D 
18ca4     72 6A 6D 62 
18ca8     55 72 65 4A | 	byte	$78, $7f, $7c, $7c, $7a, $7e, $75, $6d, $72, $6a, $6d, $62, $55, $72, $65, $4a
18cac     51 53 4E 43 
18cb0     46 4A 4A 36 
18cb4     34 3A 32 30 
18cb8     28 32 1B 20 | 	byte	$51, $53, $4e, $43, $46, $4a, $4a, $36, $34, $3a, $32, $30, $28, $32, $1b, $20
18cbc     18 17 14 0F 
18cc0     0B 05 13 0D 
18cc4     00 FD F9 F3 
18cc8     F7 F1 F9 ED | 	byte	$18, $17, $14, $0f, $0b, $05, $13, $0d, $00, $fd, $f9, $f3, $f7, $f1, $f9, $ed
18ccc     E5 DD E1 E0 
18cd0     D9 CC DD D9 
18cd4     C2 BA C6 BD 
18cd8     BA B9 C1 B2 | 	byte	$e5, $dd, $e1, $e0, $d9, $cc, $dd, $d9, $c2, $ba, $c6, $bd, $ba, $b9, $c1, $b2
18cdc     B1 B2 A5 A2 
18ce0     A3 9E 9A A2 
18ce4     97 8F 8E 92 
18ce8     88 8A 8A 82 | 	byte	$b1, $b2, $a5, $a2, $a3, $9e, $9a, $a2, $97, $8f, $8e, $92, $88, $8a, $8a, $82
18cec     86 80 80 80 
18cf0     80 80 80 80 
18cf4     80 80 80 80 
18cf8     80 80 80 80 | 	byte	$86, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
18cfc     80 80 80 80 
      ...             
18d34     80 80 80 80 
18d38     80 80 80    | 	byte	$80[63]
18d3b     82 80 80 82 
18d3f     80 80 8F 84 
18d43     84 82 9E 93 
18d47     88 8A 96 96 | 	byte	$82, $80, $80, $82, $80, $80, $8f, $84, $84, $82, $9e, $93, $88, $8a, $96, $96
18d4b     9F 9B 9A A2 
18d4f     9F A9 A5 B1 
18d53     B2 A9 A9 BE 
18d57     BA B2 B9 C5 | 	byte	$9f, $9b, $9a, $a2, $9f, $a9, $a5, $b1, $b2, $a9, $a9, $be, $ba, $b2, $b9, $c5
18d5b     C9 CA C2 C2 
18d5f     CE CE D4 DC 
18d63     D6 D8 DC E9 
18d67     E8 E8 E1 E5 | 	byte	$c9, $ca, $c2, $c2, $ce, $ce, $d4, $dc, $d6, $d8, $dc, $e9, $e8, $e8, $e1, $e5
18d6b     F7 00 F1 F7 
18d6f     F5 FF 00 07 
18d73     00 05 05 0D 
18d77     10 0F 0B 0B | 	byte	$f7, $00, $f1, $f7, $f5, $ff, $00, $07, $00, $05, $05, $0d, $10, $0f, $0b, $0b
18d7b     14 23 17 10 
18d7f     14 1C 1B 20 
18d83     27 2C 24 20 
18d87     28 2C 2E 23 | 	byte	$14, $23, $17, $10, $14, $1c, $1b, $20, $27, $2c, $24, $20, $28, $2c, $2e, $23
18d8b     2E 34 3A 32 
18d8f     3A 3A 30 36 
18d93     3F 42 3E 3A 
18d97     3F 3E 3E 3B | 	byte	$2e, $34, $3a, $32, $3a, $3a, $30, $36, $3f, $42, $3e, $3a, $3f, $3e, $3e, $3b
18d9b     43 4B 4A 3B 
18d9f     3B 4B 43 4B 
18da3     43 46 43 46 
18da7     46 46 43 43 | 	byte	$43, $4b, $4a, $3b, $3b, $4b, $43, $4b, $43, $46, $43, $46, $46, $46, $43, $43
18dab     4A 4A 4B 4A 
18daf     43 4B 46 47 
18db3     42 43 4B 4E 
18db7     46 47 46 46 | 	byte	$4a, $4a, $4b, $4a, $43, $4b, $46, $47, $42, $43, $4b, $4e, $46, $47, $46, $46
18dbb     3F 4E 46 42 
18dbf     43 42 3F 43 
18dc3     3E 36 4B 3E 
18dc7     37 3A 3E 3B | 	byte	$3f, $4e, $46, $42, $43, $42, $3f, $43, $3e, $36, $4b, $3e, $37, $3a, $3e, $3b
18dcb     43 3F 36 34 
18dcf     36 36 37 36 
18dd3     32 2E 36 36 
18dd7     32 2E 36 32 | 	byte	$43, $3f, $36, $34, $36, $36, $37, $36, $32, $2e, $36, $36, $32, $2e, $36, $32
18ddb     32 36 30 2C 
18ddf     2C 2E 2C 36 
18de3     2A 24 2A 2C 
18de7     27 2C 32 27 | 	byte	$32, $36, $30, $2c, $2c, $2e, $2c, $36, $2a, $24, $2a, $2c, $27, $2c, $32, $27
18deb     23 1C 27 23 
18def     27 1F 27 1F 
18df3     1F 1C 1C 27 
18df7     1F 17 18 1B | 	byte	$23, $1c, $27, $23, $27, $1f, $27, $1f, $1f, $1c, $1c, $27, $1f, $17, $18, $1b
18dfb     23 1C 1F 17 
18dff     17 17 17 18 
18e03     1B 13 17 18 
18e07     14 10 0D 17 | 	byte	$23, $1c, $1f, $17, $17, $17, $17, $18, $1b, $13, $17, $18, $14, $10, $0d, $17
18e0b     1B 17 0F 0F 
18e0f     0F 0B 10 14 
18e13     10 09 05 0D 
18e17     0F 05 00 00 | 	byte	$1b, $17, $0f, $0f, $0f, $0b, $10, $14, $10, $09, $05, $0d, $0f, $05, $00, $00
18e1b     07 0D 09 07 
18e1f     00 01 00 05 
18e23     05 05 FB 01 
18e27     FF 07 00 F9 | 	byte	$07, $0d, $09, $07, $00, $01, $00, $05, $05, $05, $fb, $01, $ff, $07, $00, $f9
18e2b     FF 01 01 01 
18e2f     F7 00 FD FF 
18e33     00 FD FD FB 
18e37     F7 01 00 FD | 	byte	$ff, $01, $01, $01, $f7, $00, $fd, $ff, $00, $fd, $fd, $fb, $f7, $01, $00, $fd
18e3b     F9 F1 F7 F9 
18e3f     FB FB F9 F7 
18e43     F3 F1 F9 F7 
18e47     F3 F1 F1 F1 | 	byte	$f9, $f1, $f7, $f9, $fb, $fb, $f9, $f7, $f3, $f1, $f9, $f7, $f3, $f1, $f1, $f1
18e4b     F7 F5 F1 F1 
18e4f     ED EC F3 F1 
18e53     F1 E9 F0 F5 
18e57     ED E9 EC E9 | 	byte	$f7, $f5, $f1, $f1, $ed, $ec, $f3, $f1, $f1, $e9, $f0, $f5, $ed, $e9, $ec, $e9
18e5b     ED E9 E9 E4 
18e5f     E8 EC E9 E9 
18e63     EC E1 E5 E4 
18e67     E5 E0 E1 E4 | 	byte	$ed, $e9, $e9, $e4, $e8, $ec, $e9, $e9, $ec, $e1, $e5, $e4, $e5, $e0, $e1, $e4
18e6b     E0 E9 E8 E4 
18e6f     D9 D4 DD DD 
18e73     E1 E1 DD D9 
18e77     D9 DD D9 D9 | 	byte	$e0, $e9, $e8, $e4, $d9, $d4, $dd, $dd, $e1, $e1, $dd, $d9, $d9, $dd, $d9, $d9
18e7b     DD D2 D8 E0 
18e7f     DC D8 D8 D4 
18e83     D9 D9 D8 D9 
18e87     D4 D2 D8 D8 | 	byte	$dd, $d2, $d8, $e0, $dc, $d8, $d8, $d4, $d9, $d9, $d8, $d9, $d4, $d2, $d8, $d8
18e8b     D0 E0 D9 D6 
18e8f     DC D4 D9 D6 
18e93     D9 D6 D9 D8 
18e97     D8 D9 D9 DC | 	byte	$d0, $e0, $d9, $d6, $dc, $d4, $d9, $d6, $d9, $d6, $d9, $d8, $d8, $d9, $d9, $dc
18e9b     DC DD D6 DC 
18e9f     D8 D6 E0 E1 
18ea3     DD D9 DC E1 
18ea7     DD DD DD E4 | 	byte	$dc, $dd, $d6, $dc, $d8, $d6, $e0, $e1, $dd, $d9, $dc, $e1, $dd, $dd, $dd, $e4
18eab     E4 E5 E1 E1 
18eaf     DD E5 E8 E9 
18eb3     E4 EC E9 E1 
18eb7     E1 ED E8 EC | 	byte	$e4, $e5, $e1, $e1, $dd, $e5, $e8, $e9, $e4, $ec, $e9, $e1, $e1, $ed, $e8, $ec
18ebb     E9 E5 ED EC 
18ebf     EC F0 F3 ED 
18ec3     EC ED F1 ED 
18ec7     EC F1 F5 F1 | 	byte	$e9, $e5, $ed, $ec, $ec, $f0, $f3, $ed, $ec, $ed, $f1, $ed, $ec, $f1, $f5, $f1
18ecb     F0 F7 F1 F7 
18ecf     F9 F1 ED F3 
18ed3     F5 F7 F9 F5 
18ed7     F3 F9 F7 FB | 	byte	$f0, $f7, $f1, $f7, $f9, $f1, $ed, $f3, $f5, $f7, $f9, $f5, $f3, $f9, $f7, $fb
18edb     FD FB F9 F1 
18edf     F7 FF 00 F9 
18ee3     F7 F9 FD FF 
18ee7     FD 00 F9 FB | 	byte	$fd, $fb, $f9, $f1, $f7, $ff, $00, $f9, $f7, $f9, $fd, $ff, $fd, $00, $f9, $fb
18eeb     F9 FF FF FF 
18eef     00 FF 00 FB 
18ef3     F9 FF 03 FD 
18ef7     00 F7 00 00 | 	byte	$f9, $ff, $ff, $ff, $00, $ff, $00, $fb, $f9, $ff, $03, $fd, $00, $f7, $00, $00
18efb     00 FF FF FF 
18eff     03 FD 00 00 
18f03     FF FF FF 05 
18f07     05 00 FD FD | 	byte	$00, $ff, $ff, $ff, $03, $fd, $00, $00, $ff, $ff, $ff, $05, $05, $00, $fd, $fd
18f0b     03 FF 03 00 
18f0f     01 01 01 03 
18f13     FF 00 00 03 
18f17     01 01 FF 01 | 	byte	$03, $ff, $03, $00, $01, $01, $01, $03, $ff, $00, $00, $03, $01, $01, $ff, $01
18f1b     03 03 01 00 
18f1f     01 05 03 05 
18f23     01 00 FF 00 
18f27     05 00 03 00 | 	byte	$03, $03, $01, $00, $01, $05, $03, $05, $01, $00, $ff, $00, $05, $00, $03, $00
18f2b     00 07 00 03 
18f2f     FB 01 0B 01 
18f33     FD FD 01 00 
18f37     00 05 00 FF | 	byte	$00, $07, $00, $03, $fb, $01, $0b, $01, $fd, $fd, $01, $00, $00, $05, $00, $ff
18f3b     00 FD 01 01 
18f3f     FD FD FF FF 
18f43     FD FB 00 FF 
18f47     FF FB 00 FF | 	byte	$00, $fd, $01, $01, $fd, $fd, $ff, $ff, $fd, $fb, $00, $ff, $ff, $fb, $00, $ff
18f4b     00 F9 F1 F7 
18f4f     FF FF F5 F3 
18f53     F5 F7 F1 F7 
18f57     F9 F9 F5 F1 | 	byte	$00, $f9, $f1, $f7, $ff, $ff, $f5, $f3, $f5, $f7, $f1, $f7, $f9, $f9, $f5, $f1
18f5b     F1 ED F3 F9 
18f5f     F5 F1 EC F0 
18f63     F5 F1 F1 F3 
18f67     F0 F3 F3 F1 | 	byte	$f1, $ed, $f3, $f9, $f5, $f1, $ec, $f0, $f5, $f1, $f1, $f3, $f0, $f3, $f3, $f1
18f6b     F0 ED F0 F0 
18f6f     F1 F1 F0 F1 
18f73     F0 EC EC F1 
18f77     F1 F1 EC EC | 	byte	$f0, $ed, $f0, $f0, $f1, $f1, $f0, $f1, $f0, $ec, $ec, $f1, $f1, $f1, $ec, $ec
18f7b     E9 F0 EC E9 
18f7f     EC EC F0 ED 
18f83     ED EC ED ED 
18f87     E8 ED F1 ED | 	byte	$e9, $f0, $ec, $e9, $ec, $ec, $f0, $ed, $ed, $ec, $ed, $ed, $e8, $ed, $f1, $ed
18f8b     F1 F0 F1 E9 
18f8f     E9 F1 F3 F3 
18f93     F1 EC F0 F1 
18f97     F3 F3 F1 F1 | 	byte	$f1, $f0, $f1, $e9, $e9, $f1, $f3, $f3, $f1, $ec, $f0, $f1, $f3, $f3, $f1, $f1
18f9b     F3 F1 F7 F1 
18f9f     F5 F1 F7 F3 
18fa3     F0 F7 F3 F1 
18fa7     FB F9 F3 F1 | 	byte	$f3, $f1, $f7, $f1, $f5, $f1, $f7, $f3, $f0, $f7, $f3, $f1, $fb, $f9, $f3, $f1
18fab     F7 F9 F7 F9 
18faf     FB F7 FD F7 
18fb3     F9 FF FD FB 
18fb7     FD 00 00 FB | 	byte	$f7, $f9, $f7, $f9, $fb, $f7, $fd, $f7, $f9, $ff, $fd, $fb, $fd, $00, $00, $fb
18fbb     FF 00 00 00 
18fbf     FF 01 00 FF 
18fc3     00 01 FF 00 
18fc7     03 01 00 00 | 	byte	$ff, $00, $00, $00, $ff, $01, $00, $ff, $00, $01, $ff, $00, $03, $01, $00, $00
18fcb     FF 01 00 FF 
18fcf     05 01 00 01 
18fd3     FF 05 03 01 
18fd7     FF 00 01 01 | 	byte	$ff, $01, $00, $ff, $05, $01, $00, $01, $ff, $05, $03, $01, $ff, $00, $01, $01
18fdb     01 00 FF 05 
18fdf     05 00 FF 00 
18fe3     FD 00 FF FF 
18fe7     FF FF FF 01 | 	byte	$01, $00, $ff, $05, $05, $00, $ff, $00, $fd, $00, $ff, $ff, $ff, $ff, $ff, $01
18feb     01 FD FB FF 
18fef     00 01 FD FD 
18ff3     FD 00 00 FB 
18ff7     FB FF FB 00 | 	byte	$01, $fd, $fb, $ff, $00, $01, $fd, $fd, $fd, $00, $00, $fb, $fb, $ff, $fb, $00
18ffb     FD FF F9 FF 
18fff     FF F9 F9 FF 
19003     FF FB FD FD 
19007     F5 F9 FD FD | 	byte	$fd, $ff, $f9, $ff, $ff, $f9, $f9, $ff, $ff, $fb, $fd, $fd, $f5, $f9, $fd, $fd
1900b     FD FB F7 FB 
1900f     FB F9 F7 F7 
19013     FF F5 F9 F9 
19017     F7 FB FB FB | 	byte	$fd, $fb, $f7, $fb, $fb, $f9, $f7, $f7, $ff, $f5, $f9, $f9, $f7, $fb, $fb, $fb
1901b     F5 F3 F9 FD 
1901f     FB F5 F7 F9 
19023     FD FD F9 F7 
19027     F3 F7 FB FB | 	byte	$f5, $f3, $f9, $fd, $fb, $f5, $f7, $f9, $fd, $fd, $f9, $f7, $f3, $f7, $fb, $fb
1902b     F9 F3 F7 FD 
1902f     F7 F5 F5 F7 
19033     FF F9 F7 F7 
19037     F5 F9 FB F7 | 	byte	$f9, $f3, $f7, $fd, $f7, $f5, $f5, $f7, $ff, $f9, $f7, $f7, $f5, $f9, $fb, $f7
1903b     F9 F9 F7 F7 
1903f     FD FD F7 F9 
19043     FD FB FB FB 
19047     FB FD F9 FB | 	byte	$f9, $f9, $f7, $f7, $fd, $fd, $f7, $f9, $fd, $fb, $fb, $fb, $fb, $fd, $f9, $fb
1904b     F9 F7 FB 00 
1904f     FF F9 F7 FD 
19053     FD FB FB FD 
19057     FF FD F9 F9 | 	byte	$f9, $f7, $fb, $00, $ff, $f9, $f7, $fd, $fd, $fb, $fb, $fd, $ff, $fd, $f9, $f9
1905b     FD FF F9 FF 
1905f     FD FB FB FB 
19063     FF FF FD FF 
19067     FD F9 F9 F9 | 	byte	$fd, $ff, $f9, $ff, $fd, $fb, $fb, $fb, $ff, $ff, $fd, $ff, $fd, $f9, $f9, $f9
1906b     FD FD FF FB 
1906f     FB F9 FF FD 
19073     FD F9 F9 F9 
19077     FF FD F9 F9 | 	byte	$fd, $fd, $ff, $fb, $fb, $f9, $ff, $fd, $fd, $f9, $f9, $f9, $ff, $fd, $f9, $f9
1907b     F9 FB FD F9 
1907f     F9 FB FF FD 
19083     F5 F7 F9 FD 
19087     FD F9 F9 F7 | 	byte	$f9, $fb, $fd, $f9, $f9, $fb, $ff, $fd, $f5, $f7, $f9, $fd, $fd, $f9, $f9, $f7
1908b     F7 F9 F9 F9 
1908f     F7 F7 F7 FB 
19093     FD F7 F3 F9 
19097     F9 F5 F9 FB | 	byte	$f7, $f9, $f9, $f9, $f7, $f7, $f7, $fb, $fd, $f7, $f3, $f9, $f9, $f5, $f9, $fb
1909b     F7 F3 F5 F5 
1909f     F7 F7 F5 F5 
190a3     F7 F7 F5 F3 
190a7     F1 F5 F7 F1 | 	byte	$f7, $f3, $f5, $f5, $f7, $f7, $f5, $f5, $f7, $f7, $f5, $f3, $f1, $f5, $f7, $f1
190ab     F3 F3 F3 F1 
190af     F1 F5 F7 F3 
190b3     F1 F1 F3 F5 
190b7     F3 ED ED F1 | 	byte	$f3, $f3, $f3, $f1, $f1, $f5, $f7, $f3, $f1, $f1, $f3, $f5, $f3, $ed, $ed, $f1
190bb     F5 F5 F3 ED 
190bf     E9 F1 F3 F5 
190c3     F0 F1 F0 F0 
190c7     F1 F1 F0 F1 | 	byte	$f5, $f5, $f3, $ed, $e9, $f1, $f3, $f5, $f0, $f1, $f0, $f0, $f1, $f1, $f0, $f1
190cb     F3 F1 F1 F3 
190cf     F0 F0 F3 F9 
190d3     F5 F1 ED F0 
190d7     F7 F5 F5 F3 | 	byte	$f3, $f1, $f1, $f3, $f0, $f0, $f3, $f9, $f5, $f1, $ed, $f0, $f7, $f5, $f5, $f3
190db     F1 F1 F5 F9 
190df     F5 F3 F5 F9 
190e3     FD F7 F5 F5 
190e7     F7 F9 FB F9 | 	byte	$f1, $f1, $f5, $f9, $f5, $f3, $f5, $f9, $fd, $f7, $f5, $f5, $f7, $f9, $fb, $f9
190eb     F7 F9 F7 FD 
190ef     00 00 F9 F7 
190f3     FB FF 00 FF 
190f7     FD FF 00 FF | 	byte	$f7, $f9, $f7, $fd, $00, $00, $f9, $f7, $fb, $ff, $00, $ff, $fd, $ff, $00, $ff
190fb     FF FF 00 00 
190ff     00 00 01 00 
19103     FF FF 03 01 
19107     00 00 01 05 | 	byte	$ff, $ff, $00, $00, $00, $00, $01, $00, $ff, $ff, $03, $01, $00, $00, $01, $05
1910b     05 03 00 FF 
1910f     03 05 05 05 
19113     00 03 07 09 
19117     05 00 01 03 | 	byte	$05, $03, $00, $ff, $03, $05, $05, $05, $00, $03, $07, $09, $05, $00, $01, $03
1911b     09 07 03 03 
1911f     05 05 05 05 
19123     01 03 01 05 
19127     07 05 05 00 | 	byte	$09, $07, $03, $03, $05, $05, $05, $05, $01, $03, $01, $05, $07, $05, $05, $00
1912b     01 01 05 05 
1912f     03 03 01 00 
19133     03 00 FF 00 
19137     03 00 FF 01 | 	byte	$01, $01, $05, $05, $03, $03, $01, $00, $03, $00, $ff, $00, $03, $00, $ff, $01
1913b     05 00 00 00 
1913f     00 FD FF 01 
19143     00 FD FF FF 
19147     01 00 FB FD | 	byte	$05, $00, $00, $00, $00, $fd, $ff, $01, $00, $fd, $ff, $ff, $01, $00, $fb, $fd
1914b     FF FB FD 00 
1914f     FF FF FD FD 
19153     F9 FF 00 FD 
19157     F9 FB FD F9 | 	byte	$ff, $fb, $fd, $00, $ff, $ff, $fd, $fd, $f9, $ff, $00, $fd, $f9, $fb, $fd, $f9
1915b     FB FF FD F9 
1915f     F9 F9 F9 F9 
19163     F9 F9 F9 F9 
19167     F5 F3 F7 F9 | 	byte	$fb, $ff, $fd, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f5, $f3, $f7, $f9
1916b     F5 F1 F7 FD 
1916f     F9 F1 F0 F3 
19173     F7 F1 F1 F5 
19177     F3 F1 ED F0 | 	byte	$f5, $f1, $f7, $fd, $f9, $f1, $f0, $f3, $f7, $f1, $f1, $f5, $f3, $f1, $ed, $f0
1917b     F1 F1 F1 F0 
1917f     F1 EC E8 F0 
19183     F1 ED ED EC 
19187     E9 F0 F0 EC | 	byte	$f1, $f1, $f1, $f0, $f1, $ec, $e8, $f0, $f1, $ed, $ed, $ec, $e9, $f0, $f0, $ec
1918b     E9 E8 E8 E8 
1918f     ED ED E5 E5 
19193     E9 E8 E5 E8 
19197     E8 E8 E8 E5 | 	byte	$e9, $e8, $e8, $e8, $ed, $ed, $e5, $e5, $e9, $e8, $e5, $e8, $e8, $e8, $e8, $e5
1919b     E4 E8 E8 E8 
1919f     E8 E9 E5 E1 
191a3     E1 E8 E8 E9 
191a7     E5 E5 E5 E4 | 	byte	$e4, $e8, $e8, $e8, $e8, $e9, $e5, $e1, $e1, $e8, $e8, $e9, $e5, $e5, $e5, $e4
191ab     E4 E8 E9 E5 
191af     E4 E5 E8 E8 
191b3     EC E9 E8 E8 
191b7     E8 EC EC ED | 	byte	$e4, $e8, $e9, $e5, $e4, $e5, $e8, $e8, $ec, $e9, $e8, $e8, $e8, $ec, $ec, $ed
191bb     EC E9 EC EC 
191bf     E9 EC ED F0 
191c3     F1 F3 F3 ED 
191c7     F0 F3 F5 F3 | 	byte	$ec, $e9, $ec, $ec, $e9, $ec, $ed, $f0, $f1, $f3, $f3, $ed, $f0, $f3, $f5, $f3
191cb     F1 F7 FB F9 
191cf     F5 F7 F9 FD 
191d3     FB FF FB F5 
191d7     FB FF 00 FF | 	byte	$f1, $f7, $fb, $f9, $f5, $f7, $f9, $fd, $fb, $ff, $fb, $f5, $fb, $ff, $00, $ff
191db     FD FF FF 00 
191df     00 00 03 FF 
191e3     01 05 03 01 
191e7     03 05 05 05 | 	byte	$fd, $ff, $ff, $00, $00, $00, $03, $ff, $01, $05, $03, $01, $03, $05, $05, $05
191eb     05 07 0B 07 
191ef     05 07 09 07 
191f3     0B 0D 0F 0B 
191f7     09 0B 0B 0D | 	byte	$05, $07, $0b, $07, $05, $07, $09, $07, $0b, $0d, $0f, $0b, $09, $0b, $0b, $0d
191fb     0D 0D 0D 0D 
191ff     0D 0D       | 	byte	$0d[6]
19201     0B 0B 0F 0B 
19205     0D 0B 0B 0B 
19209     0B 0D 0B 0D 
1920d     0B 0B 0D 0B | 	byte	$0b, $0b, $0f, $0b, $0d, $0b, $0b, $0b, $0b, $0d, $0b, $0d, $0b, $0b, $0d, $0b
19211     07 05 07 09 
19215     0B 07 05 07 
19219     07 07 03 03 
1921d     05 05 01 01 | 	byte	$07, $05, $07, $09, $0b, $07, $05, $07, $07, $07, $03, $03, $05, $05, $01, $01
19221     03 00 00 FF 
19225     FF 01 FD FF 
19229     FD FF FF FD 
1922d     F9 FB F9 F9 | 	byte	$03, $00, $00, $ff, $ff, $01, $fd, $ff, $fd, $ff, $ff, $fd, $f9, $fb, $f9, $f9
19231     F9 F7 F9 F9 
19235     F7 F3 F3 F5 
19239     F7 F5 F3 F1 
1923d     F3 F5 F1 F3 | 	byte	$f9, $f7, $f9, $f9, $f7, $f3, $f3, $f5, $f7, $f5, $f3, $f1, $f3, $f5, $f1, $f3
19241     F3 F1 F1 F1 
19245     F3 F0 F0 F7 
19249     F5 F5 ED ED 
1924d     F0 F1 F1 F1 | 	byte	$f3, $f1, $f1, $f1, $f3, $f0, $f0, $f7, $f5, $f5, $ed, $ed, $f0, $f1, $f1, $f1
19251     F1 ED F0 F1 
19255     F1 F0 ED F0 
19259     F3 F3 F1 F1 
1925d     F0 F1 F7 F1 | 	byte	$f1, $ed, $f0, $f1, $f1, $f0, $ed, $f0, $f3, $f3, $f1, $f1, $f0, $f1, $f7, $f1
19261     F1 F1 F5 F5 
19265     F5 F3 F1 F1 
19269     F1 F5 F9 F9 
1926d     F5 F5 F5 F7 | 	byte	$f1, $f1, $f5, $f5, $f5, $f3, $f1, $f1, $f1, $f5, $f9, $f9, $f5, $f5, $f5, $f7
19271     F3 F9 F9 F9 
19275     F7 F5 F9 F9 
19279     F7 F3 F9 F9 
1927d     FB F7 FB F9 | 	byte	$f3, $f9, $f9, $f9, $f7, $f5, $f9, $f9, $f7, $f3, $f9, $f9, $fb, $f7, $fb, $f9
19281     F9 F9 F5 F9 
19285     FD F9 FB F9 
19289     F9 FD FD FD 
1928d     FB F7 FB FF | 	byte	$f9, $f9, $f5, $f9, $fd, $f9, $fb, $f9, $f9, $fd, $fd, $fd, $fb, $f7, $fb, $ff
19291     00 FB F9 FB 
19295     FD F9 FD 00 
19299     00 FD F7 FB 
1929d     FD FF FF FD | 	byte	$00, $fb, $f9, $fb, $fd, $f9, $fd, $00, $00, $fd, $f7, $fb, $fd, $ff, $ff, $fd
192a1     FB F9 FD FD 
192a5     FB FF FF FF 
192a9     FD FD F9 F9 
192ad     FB FD FB FD | 	byte	$fb, $f9, $fd, $fd, $fb, $ff, $ff, $ff, $fd, $fd, $f9, $f9, $fb, $fd, $fb, $fd
192b1     FD F9 FB F9 
192b5     FD FD F9 F7 
192b9     F9 F9 F9 F9 
192bd     F9 F7 F7 F3 | 	byte	$fd, $f9, $fb, $f9, $fd, $fd, $f9, $f7, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f3
192c1     F3 F9 F9 F7 
192c5     F5 F3 F3 F3 
192c9     F5 F7 F5 F7 
192cd     F7 F3 F0 F0 | 	byte	$f3, $f9, $f9, $f7, $f5, $f3, $f3, $f3, $f5, $f7, $f5, $f7, $f7, $f3, $f0, $f0
192d1     F3 F9 F5 F1 
192d5     ED F0 F1 F1 
192d9     F1 F1 E9 EC 
192dd     F0 F3 F1 EC | 	byte	$f3, $f9, $f5, $f1, $ed, $f0, $f1, $f1, $f1, $f1, $e9, $ec, $f0, $f3, $f1, $ec
192e1     E9 ED F0 ED 
192e5     ED EC ED F0 
192e9     F0 EC E8 E9 
192ed     F1 F3 ED E9 | 	byte	$e9, $ed, $f0, $ed, $ed, $ec, $ed, $f0, $f0, $ec, $e8, $e9, $f1, $f3, $ed, $e9
192f1     E9 ED F1 F1 
192f5     ED EC E9 F0 
192f9     F1 F1 F0 F0 
192fd     F1 F1 F1 F0 | 	byte	$e9, $ed, $f1, $f1, $ed, $ec, $e9, $f0, $f1, $f1, $f0, $f0, $f1, $f1, $f1, $f0
19301     F0 F1 F1 F3 
19305     F3 F1 F1 F1 
19309     F3 F7 F7 F7 
1930d     F7 F3 F5 F9 | 	byte	$f0, $f1, $f1, $f3, $f3, $f1, $f1, $f1, $f3, $f7, $f7, $f7, $f7, $f3, $f5, $f9
19311     F7 F9 F9 FB 
19315     FD FB F7 F9 
19319     FF FB F9 FB 
1931d     FD FB FF 00 | 	byte	$f7, $f9, $f9, $fb, $fd, $fb, $f7, $f9, $ff, $fb, $f9, $fb, $fd, $fb, $ff, $00
19321     FF FD FF 00 
19325     FF 00 FF FF 
19329     00 00 00 FF 
1932d     03 03 00 00 | 	byte	$ff, $fd, $ff, $00, $ff, $00, $ff, $ff, $00, $00, $00, $ff, $03, $03, $00, $00
19331     00 01 03 01 
19335     03 01 00 01 
19339     03 07 05 01 
1933d     FF 05 05 05 | 	byte	$00, $01, $03, $01, $03, $01, $00, $01, $03, $07, $05, $01, $ff, $05, $05, $05
19341     03 03 01 01 
19345     05 05 05 01 
19349     01 00 05 09 
1934d     05 01 03 03 | 	byte	$03, $03, $01, $01, $05, $05, $05, $01, $01, $00, $05, $09, $05, $01, $03, $03
19351     07 05 05 09 
19355     05 05 03 05 
19359     09 05 05 05 
1935d     05 07 05 05 | 	byte	$07, $05, $05, $09, $05, $05, $03, $05, $09, $05, $05, $05, $05, $07, $05, $05
19361     07 05 05 05 
19365     05 05 05 05 
19369     03 03 01 05 
1936d     05 07 05 01 | 	byte	$07, $05, $05, $05, $05, $05, $05, $05, $03, $03, $01, $05, $05, $07, $05, $01
19371     01 00 00 01 
19375     07 03 00 FF 
19379     01 03 01 00 
1937d     00 00 00 00 | 	byte	$01, $00, $00, $01, $07, $03, $00, $ff, $01, $03, $01, $00, $00, $00, $00, $00
19381     00 00 FF FD 
19385     FF FF 00 FD 
19389     FD FD FF 00 
1938d     F9 F9 FD FD | 	byte	$00, $00, $ff, $fd, $ff, $ff, $00, $fd, $fd, $fd, $ff, $00, $f9, $f9, $fd, $fd
19391     FF FD F5 F7 
19395     F9 F9 FB F9 
19399     F5 F3 F3 F9 
1939d     F9 F5 F3 F0 | 	byte	$ff, $fd, $f5, $f7, $f9, $f9, $fb, $f9, $f5, $f3, $f3, $f9, $f9, $f5, $f3, $f0
193a1     F1 F3 F5 F3 
193a5     F0 F1 F1 F1 
193a9     F3 F1 F0 ED 
193ad     F0 ED F0 EC | 	byte	$f1, $f3, $f5, $f3, $f0, $f1, $f1, $f1, $f3, $f1, $f0, $ed, $f0, $ed, $f0, $ec
193b1     ED F0 F1 ED 
193b5     E9 E9 E9 F0 
193b9     ED E8 E8 EC 
193bd     ED E9 E8 E9 | 	byte	$ed, $f0, $f1, $ed, $e9, $e9, $e9, $f0, $ed, $e8, $e8, $ec, $ed, $e9, $e8, $e9
193c1     E8 E9 E9 E8 
193c5     E8 E8 E8 E8 
193c9     E8 E5 E4 E8 
193cd     E9 E9 E8 E5 | 	byte	$e8, $e9, $e9, $e8, $e8, $e8, $e8, $e8, $e8, $e5, $e4, $e8, $e9, $e9, $e8, $e5
193d1     E8 E8 E1 E4 
193d5     E8 E9 E9 E9 
193d9     E8 E5 E8 E5 
193dd     E8 E9 E8 E8 | 	byte	$e8, $e8, $e1, $e4, $e8, $e9, $e9, $e9, $e8, $e5, $e8, $e5, $e8, $e9, $e8, $e8
193e1     EC E9 E9 E8 
193e5     E9 ED E9 F0 
193e9     ED E9 ED ED 
193ed     ED ED EC F1 | 	byte	$ec, $e9, $e9, $e8, $e9, $ed, $e9, $f0, $ed, $e9, $ed, $ed, $ed, $ed, $ec, $f1
193f1     F1 F1 F1 ED 
193f5     F0 F3 F3 F1 
193f9     F1 F3 F5 F7 
193fd     F7 F5 F3 F9 | 	byte	$f1, $f1, $f1, $ed, $f0, $f3, $f3, $f1, $f1, $f3, $f5, $f7, $f7, $f5, $f3, $f9
19401     FB F9 F9 F9 
19405     F9 F9 FD FF 
19409     FD FD FD FF 
1940d     FF FF FF FF | 	byte	$fb, $f9, $f9, $f9, $f9, $f9, $fd, $ff, $fd, $fd, $fd, $ff, $ff, $ff, $ff, $ff
19411     FF 00 FF FF 
19415     00 00 00 00 
19419     01 00 00 01 
1941d     00 01 01 03 | 	byte	$ff, $00, $ff, $ff, $00, $00, $00, $00, $01, $00, $00, $01, $00, $01, $01, $03
19421     01 01 05 03 
19425     03 01 01 01 
19429     01 01 05 05 
1942d     03 05 05 03 | 	byte	$01, $01, $05, $03, $03, $01, $01, $01, $01, $01, $05, $05, $03, $05, $05, $03
19431     00 00 05 07 
19435     01 01 01 01 
19439     01 01 05 00 
1943d     00 01 03 00 | 	byte	$00, $00, $05, $07, $01, $01, $01, $01, $01, $01, $05, $00, $00, $01, $03, $00
19441     00 01 01 01 
19445     01 00 00 00 
19449     01 00 00 FF 
1944d     00 FF 00 00 | 	byte	$00, $01, $01, $01, $01, $00, $00, $00, $01, $00, $00, $ff, $00, $ff, $00, $00
19451     00 00 00 00 
19455     FF FF FF FF 
19459     FD FD FF 00 
1945d     FF FF FB FD | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $fd, $fd, $ff, $00, $ff, $ff, $fb, $fd
19461     FF FF FF FB 
19465     FB FD FD FF 
19469     FF FD FB FB 
1946d     FD FD FD FD | 	byte	$ff, $ff, $ff, $fb, $fb, $fd, $fd, $ff, $ff, $fd, $fb, $fb, $fd, $fd, $fd, $fd
19471     FD FD FD F9 
19475     F9 FD FD FD 
19479     F9 F9 F7 F9 
1947d     FD FB F9 F5 | 	byte	$fd, $fd, $fd, $f9, $f9, $fd, $fd, $fd, $f9, $f9, $f7, $f9, $fd, $fb, $f9, $f5
19481     F7 FB F9 F9 
19485     F9 F3 F9 F9 
19489     F9 F9 F7 F9 
1948d     F9 F9 F5 F3 | 	byte	$f7, $fb, $f9, $f9, $f9, $f3, $f9, $f9, $f9, $f9, $f7, $f9, $f9, $f9, $f5, $f3
19491     F7 F9 F7 F7 
19495     F5 F7 F9 F9 
19499     F7 F3 F3 F9 
1949d     F5 F5 F3 F5 | 	byte	$f7, $f9, $f7, $f7, $f5, $f7, $f9, $f9, $f7, $f3, $f3, $f9, $f5, $f5, $f3, $f5
194a1     F5 F5 F7 F5 
194a5     F1 F3 F7 F5 
194a9     F3 F1 F7 F1 
194ad     F3 F3 F3 F9 | 	byte	$f5, $f5, $f7, $f5, $f1, $f3, $f7, $f5, $f3, $f1, $f7, $f1, $f3, $f3, $f3, $f9
194b1     F7 F5 F3 F3 
194b5     F7 F7 F5 F5 
194b9     F3 F3 F7 F7 
194bd     F3 F1 F3 F7 | 	byte	$f7, $f5, $f3, $f3, $f7, $f7, $f5, $f5, $f3, $f3, $f7, $f7, $f3, $f1, $f3, $f7
194c1     F7 F7 F1 F1 
194c5     F3 F5 F5 F3 
194c9     F1 F3 F5 F7 
194cd     F5 F0 F1 F3 | 	byte	$f7, $f7, $f1, $f1, $f3, $f5, $f5, $f3, $f1, $f3, $f5, $f7, $f5, $f0, $f1, $f3
194d1     F7 F7 F3 F0 
194d5     F3 F7 F9 F7 
194d9     F3 F3 F5 F7 
194dd     F9 F7 F7 F3 | 	byte	$f7, $f7, $f3, $f0, $f3, $f7, $f9, $f7, $f3, $f3, $f5, $f7, $f9, $f7, $f7, $f3
194e1     F9 F9 F9 F1 
194e5     F5 F7 F9 F9 
194e9     F7 F7 F7 F7 
194ed     F7 F7 F7 F7 | 	byte	$f9, $f9, $f9, $f1, $f5, $f7, $f9, $f9, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7
194f1     F7 F9 F9 F5 
194f5     F7 F7 F9 F9 
194f9     F5 F9 F9 F9 
194fd     F3 F3 F5 F9 | 	byte	$f7, $f9, $f9, $f5, $f7, $f7, $f9, $f9, $f5, $f9, $f9, $f9, $f3, $f3, $f5, $f9
19501     F9 FB F5 F3 
19505     F7 F7 F9 F9 
19509     F7 F9 F9 F9 
1950d     F7 F7 F7 FB | 	byte	$f9, $fb, $f5, $f3, $f7, $f7, $f9, $f9, $f7, $f9, $f9, $f9, $f7, $f7, $f7, $fb
19511     FD F9 F9 F9 
19515     F9 F9 F9 F9 
19519     F9 F9 F9 FB 
1951d     FB F9 F9 FB | 	byte	$fd, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $fb, $fb, $f9, $f9, $fb
19521     FD FB FB F9 
19525     FB FD F9 FD 
19529     F9 FD FD FF 
1952d     FD FD F9 FD | 	byte	$fd, $fb, $fb, $f9, $fb, $fd, $f9, $fd, $f9, $fd, $fd, $ff, $fd, $fd, $f9, $fd
19531     FF FD FD FF 
19535     00 FF FD FD 
19539     00 FF FF FF 
1953d     FF 00 00 00 | 	byte	$ff, $fd, $fd, $ff, $00, $ff, $fd, $fd, $00, $ff, $ff, $ff, $ff, $00, $00, $00
19541     00 00 FF 00 
19545     00 FF 00 FF 
19549     00 00 00 01 
1954d     00 FF 01 05 | 	byte	$00, $00, $ff, $00, $00, $ff, $00, $ff, $00, $00, $00, $01, $00, $ff, $01, $05
19551     01 00 00 01 
19555     00 01 00 00 
19559     01 01 01 01 
1955d     00 FF 00 01 | 	byte	$01, $00, $00, $01, $00, $01, $00, $00, $01, $01, $01, $01, $00, $ff, $00, $01
19561     05 00 01 00 
19565     00 00 00 00 
19569     00 01 03 01 
1956d     00 00 FF 00 | 	byte	$05, $00, $01, $00, $00, $00, $00, $00, $00, $01, $03, $01, $00, $00, $ff, $00
19571     01 00 00 FF 
19575     FF FD 00 00 
19579     00 00 FF 00 
1957d     00 FD FD FF | 	byte	$01, $00, $00, $ff, $ff, $fd, $00, $00, $00, $00, $ff, $00, $00, $fd, $fd, $ff
19581     FF 00 00 FD 
19585     FB FD FF 00 
19589     FF FF FF FF 
1958d     FB FD FD FD | 	byte	$ff, $00, $00, $fd, $fb, $fd, $ff, $00, $ff, $ff, $ff, $ff, $fb, $fd, $fd, $fd
19591     FB F9 FD FD 
19595     FD F9 FB F9 
19599     F9 FB FB F9 
1959d     F5 F7 F5 F7 | 	byte	$fb, $f9, $fd, $fd, $fd, $f9, $fb, $f9, $f9, $fb, $fb, $f9, $f5, $f7, $f5, $f7
195a1     F9 F9 F7 F5 
195a5     F5 F3 F7 F5 
195a9     F5 F7 F7 F3 
195ad     F1 F3 F5 F5 | 	byte	$f9, $f9, $f7, $f5, $f5, $f3, $f7, $f5, $f5, $f7, $f7, $f3, $f1, $f3, $f5, $f5
195b1     F3 F3 F3 F3 
195b5     F3          | 	byte	$f3[5]
195b6     F1 F1 F5 F1 
195ba     F1 F1 F3 F1 
195be     F0 F0 F1 F1 
195c2     F1 F1 F0 F0 | 	byte	$f1, $f1, $f5, $f1, $f1, $f1, $f3, $f1, $f0, $f0, $f1, $f1, $f1, $f1, $f0, $f0
195c6     ED ED ED F0 
195ca     F1 ED EC ED 
195ce     ED F0 ED ED 
195d2     ED ED ED ED | 	byte	$ed, $ed, $ed, $f0, $f1, $ed, $ec, $ed, $ed, $f0, $ed, $ed, $ed, $ed, $ed, $ed
195d6     ED F0 ED ED 
195da     EC ED ED ED 
195de     ED ED F1 ED 
195e2     EC ED F0 ED | 	byte	$ed, $f0, $ed, $ed, $ec, $ed, $ed, $ed, $ed, $ed, $f1, $ed, $ec, $ed, $f0, $ed
195e6     ED EC ED F0 
195ea     ED ED ED ED 
195ee     EC ED F1 ED 
195f2     ED ED ED EC | 	byte	$ed, $ec, $ed, $f0, $ed, $ed, $ed, $ed, $ec, $ed, $f1, $ed, $ed, $ed, $ed, $ec
195f6     EC ED F1 F0 
195fa     ED ED F0 F1 
195fe     F0 F0 F1 F0 
19602     F0 F1 F3 F1 | 	byte	$ec, $ed, $f1, $f0, $ed, $ed, $f0, $f1, $f0, $f0, $f1, $f0, $f0, $f1, $f3, $f1
19606     F0 F1 F5 F7 
1960a     F3 F3 F1 F5 
1960e     F7 F5 F3 F9 
19612     F9 F9 F9 F7 | 	byte	$f0, $f1, $f5, $f7, $f3, $f3, $f1, $f5, $f7, $f5, $f3, $f9, $f9, $f9, $f9, $f7
19616     F7 F7 F9 FD 
1961a     FB FD F7 FB 
1961e     FD FB FB FB 
19622     FF FF FD 00 | 	byte	$f7, $f7, $f9, $fd, $fb, $fd, $f7, $fb, $fd, $fb, $fb, $fb, $ff, $ff, $fd, $00
19626     FD FD FF FF 
1962a     FF 00 FD FF 
1962e     FF FF 00 FF 
19632     00 00 00 FF | 	byte	$fd, $fd, $ff, $ff, $ff, $00, $fd, $ff, $ff, $ff, $00, $ff, $00, $00, $00, $ff
19636     01 00 00 01 
1963a     01 00 00 00 
1963e     00 01 01 00 
19642     01 01 01 00 | 	byte	$01, $00, $00, $01, $01, $00, $00, $00, $00, $01, $01, $00, $01, $01, $01, $00
19646     00 00 01 01 
1964a     01 01 01 03 
1964e     00 01 01 03 
19652     00 01 01 00 | 	byte	$00, $00, $01, $01, $01, $01, $01, $03, $00, $01, $01, $03, $00, $01, $01, $00
19656     01 01 01 03 
1965a     01 00 01 01 
1965e     01 01 00 00 
19662     01 01 01 00 | 	byte	$01, $01, $01, $03, $01, $00, $01, $01, $01, $01, $00, $00, $01, $01, $01, $00
19666     01 00 00 03 
1966a     00 FF FF 00 
1966e     00 FF FF FF 
19672     00 FF 00 FF | 	byte	$01, $00, $00, $03, $00, $ff, $ff, $00, $00, $ff, $ff, $ff, $00, $ff, $00, $ff
19676     00 00 FF FD 
1967a     FF 00 FD FF 
1967e     FF FF 00 FD 
19682     FF FD FF FB | 	byte	$00, $00, $ff, $fd, $ff, $00, $fd, $ff, $ff, $ff, $00, $fd, $ff, $fd, $ff, $fb
19686     FD FD FD FB 
1968a     FD FD FD FD 
1968e     FD FD F9 FD 
19692     FB FB FD FB | 	byte	$fd, $fd, $fd, $fb, $fd, $fd, $fd, $fd, $fd, $fd, $f9, $fd, $fb, $fb, $fd, $fb
19696     FD FD FB FB 
1969a     F9 FB FB FD 
1969e     FB FB F7 FB 
196a2     FB FD FB FB | 	byte	$fd, $fd, $fb, $fb, $f9, $fb, $fb, $fd, $fb, $fb, $f7, $fb, $fb, $fd, $fb, $fb
196a6     F9 F7 F9 F9 
196aa     F9 F7 F9 FB 
196ae     FB F9 F7 F9 
196b2     FB F9 F9 F9 | 	byte	$f9, $f7, $f9, $f9, $f9, $f7, $f9, $fb, $fb, $f9, $f7, $f9, $fb, $f9, $f9, $f9
196b6     F9 F9 FB FB 
196ba     F9 F5 F7 F9 
196be     FB FB F7 F5 
196c2     F9 F7 F9 F9 | 	byte	$f9, $f9, $fb, $fb, $f9, $f5, $f7, $f9, $fb, $fb, $f7, $f5, $f9, $f7, $f9, $f9
196c6     F5 F7 F9 F9 
196ca     F9 F7 F7 F7 
196ce     F9 F9 F7 F7 
196d2     F7 F9 F9 F7 | 	byte	$f5, $f7, $f9, $f9, $f9, $f7, $f7, $f7, $f9, $f9, $f7, $f7, $f7, $f9, $f9, $f7
196d6     F5 F5 F7 F9 
196da     F9 F5 F7 F7 
196de     F7 F7 F9 F5 
196e2     F7 F9 F9 F7 | 	byte	$f5, $f5, $f7, $f9, $f9, $f5, $f7, $f7, $f7, $f7, $f9, $f5, $f7, $f9, $f9, $f7
196e6     F5 F7 F9 F7 
196ea     F9 F3 F7 F7 
196ee     F5 F5 F5 F7 
196f2     F9 F9 F7 F5 | 	byte	$f5, $f7, $f9, $f7, $f9, $f3, $f7, $f7, $f5, $f5, $f5, $f7, $f9, $f9, $f7, $f5
196f6     F5 F7 F9 F9 
196fa     F7 F5 F7 F7 
196fe     F5 F7 F5 F5 
19702     F7 F7 F5 F7 | 	byte	$f5, $f7, $f9, $f9, $f7, $f5, $f7, $f7, $f5, $f7, $f5, $f5, $f7, $f7, $f5, $f7
19706     F3 F7 F7 F5 
1970a     F5 F5 F5 F7 
1970e     F7 F7 F5 F5 
19712     F7 F7 F7 F7 | 	byte	$f3, $f7, $f7, $f5, $f5, $f5, $f5, $f7, $f7, $f7, $f5, $f5, $f7, $f7, $f7, $f7
19716     F5 F5 F5 F7 
1971a     F5 F7 F7 F7 
1971e     F7 F3 F5 F7 
19722     F7 F7 F7 F5 | 	byte	$f5, $f5, $f5, $f7, $f5, $f7, $f7, $f7, $f7, $f3, $f5, $f7, $f7, $f7, $f7, $f5
19726     F5 F5 F7 F5 
1972a     F5 F7 F5 F7 
1972e     F5 F3 F5 F3 
19732     F5 F7 F7 F5 | 	byte	$f5, $f5, $f7, $f5, $f5, $f7, $f5, $f7, $f5, $f3, $f5, $f3, $f5, $f7, $f7, $f5
19736     F3 F3 F9 F7 
1973a     F7 F5 F7 F9 
1973e     F9 F9 F5 F5 
19742     F7 F7 F7 F7 | 	byte	$f3, $f3, $f9, $f7, $f7, $f5, $f7, $f9, $f9, $f9, $f5, $f5, $f7, $f7, $f7, $f7
19746     F7 F5 F7 FB 
1974a     F5 F7 F9 F9 
1974e     F7 F7 F7 F7 
19752     F9 F9 F7 F7 | 	byte	$f7, $f5, $f7, $fb, $f5, $f7, $f9, $f9, $f7, $f7, $f7, $f7, $f9, $f9, $f7, $f7
19756     F7 F9 F9 FB 
1975a     F9 F9 F9 F9 
1975e     F9 F9 F9 FD 
19762     FB FD F9 F9 | 	byte	$f7, $f9, $f9, $fb, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $fd, $fb, $fd, $f9, $f9
19766     FD FD FB FD 
1976a     FB FD FD FD 
1976e     FF FD FB FD 
19772     FF FF FD FD | 	byte	$fd, $fd, $fb, $fd, $fb, $fd, $fd, $fd, $ff, $fd, $fb, $fd, $ff, $ff, $fd, $fd
19776     FB FD FF FF 
1977a     FD FD FF FD 
1977e     FF FD FF FD 
19782     FD FF FF FF | 	byte	$fb, $fd, $ff, $ff, $fd, $fd, $ff, $fd, $ff, $fd, $ff, $fd, $fd, $ff, $ff, $ff
19786     FD 00 FD FF 
1978a     FF FF 00 FF 
1978e     FD FD FF FF 
19792     FF FF 00 FF | 	byte	$fd, $00, $fd, $ff, $ff, $ff, $00, $ff, $fd, $fd, $ff, $ff, $ff, $ff, $00, $ff
19796     FD FF FF FD 
1979a     FF FF FF 00 
1979e     FF FD FD FD 
197a2     00 FD FF FF | 	byte	$fd, $ff, $ff, $fd, $ff, $ff, $ff, $00, $ff, $fd, $fd, $fd, $00, $fd, $ff, $ff
197a6     FF FF FF FD 
197aa     FD FD FD FF 
197ae     FF FF F9 FB 
197b2     FF FF FF FD | 	byte	$ff, $ff, $ff, $fd, $fd, $fd, $fd, $ff, $ff, $ff, $f9, $fb, $ff, $ff, $ff, $fd
197b6     FD FD FF FF 
197ba     FD FB FF FD 
197be     FD FF FD FD 
197c2     FB FF FD FD | 	byte	$fd, $fd, $ff, $ff, $fd, $fb, $ff, $fd, $fd, $ff, $fd, $fd, $fb, $ff, $fd, $fd
197c6     FD FD FD FD 
197ca     F9 FB FD FD 
197ce     FD FD FB FD 
197d2     FB FD FB F9 | 	byte	$fd, $fd, $fd, $fd, $f9, $fb, $fd, $fd, $fd, $fd, $fb, $fd, $fb, $fd, $fb, $f9
197d6     FB FB FD F9 
197da     FB FB F9 FD 
197de     FB FB F9 FB 
197e2     FB FD F9 F9 | 	byte	$fb, $fb, $fd, $f9, $fb, $fb, $f9, $fd, $fb, $fb, $f9, $fb, $fb, $fd, $f9, $f9
197e6     F9 FD FB F9 
197ea     FB F9 FB FB 
197ee     FB FB FB F9 
197f2     F9 F9 F9 F9 | 	byte	$f9, $fd, $fb, $f9, $fb, $f9, $fb, $fb, $fb, $fb, $fb, $f9, $f9, $f9, $f9, $f9
197f6     F9 F9 F9 F9 
197fa     F9 F9 F9    | 	byte	$f9[7]
197fd     F7 F7 F9 FB 
19801     F9 F7 F9 F9 
19805     F7 F9 F9 F7 
19809     F9 FB F9 F9 | 	byte	$f7, $f7, $f9, $fb, $f9, $f7, $f9, $f9, $f7, $f9, $f9, $f7, $f9, $fb, $f9, $f9
1980d     F7 F9 F9 F9 
19811     FB F9 F7 F9 
19815     F9 F9 F9 F9 
19819     F9 FB F9 F9 | 	byte	$f7, $f9, $f9, $f9, $fb, $f9, $f7, $f9, $f9, $f9, $f9, $f9, $f9, $fb, $f9, $f9
1981d     F9 F9 F9 FB 
19821     F9 F9 F9 F9 
19825     F9 F9 F9 F9 
19829     F9 FB F9 FB | 	byte	$f9, $f9, $f9, $fb, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $fb, $f9, $fb
1982d     F9 F7 FF 00 
19831     00 00 00 F3 
19835     ED F3 D8 FF 
19839     FF 00 EA 28 | 	byte	$f9, $f7, $ff, $00, $00, $00, $00, $f3, $ed, $f3, $d8, $ff, $ff, $00, $ea, $28
1983d     3C AE 28 AE 
19841     45 87 BB 80 
19845     00 EA 3C A2 
19849     DF A2 FF 13 | 	byte	$3c, $ae, $28, $ae, $45, $87, $bb, $80, $00, $ea, $3c, $a2, $df, $a2, $ff, $13
1984d     FF AF 80 D6 
19851     13 7F AF CA 
19855     EA 13 72 5A 
19859     ED 80 FF AF | 	byte	$ff, $af, $80, $d6, $13, $7f, $af, $ca, $ea, $13, $72, $5a, $ed, $80, $ff, $af
1985d     09 0D AF FF 
19861     7F 7F 7F 21 
19865     16 64 7F 7F 
19869     7F 7F 7F FF | 	byte	$09, $0d, $af, $ff, $7f, $7f, $7f, $21, $16, $64, $7f, $7f, $7f, $7f, $7f, $ff
1986d     7F DF 7F 7F 
19871     72 28 80 80 
19875     7F 00 49 FF 
19879     79 C4 80 80 | 	byte	$7f, $df, $7f, $7f, $72, $28, $80, $80, $7f, $00, $49, $ff, $79, $c4, $80, $80
1987d     80 80 80 80 
19881     80 80 80 80 
19885     80 80 80 80 
19889     80 80 80 80 
1988d     80 80 80 80 
19891     80          | 	byte	$80[21]
19892     49 80 87 7F 
19896     00 FF 7F 7F 
1989a     7F 7F 67 7F 
1989e     7F FF 7F 7F | 	byte	$49, $80, $87, $7f, $00, $ff, $7f, $7f, $7f, $7f, $67, $7f, $7f, $ff, $7f, $7f
198a2     7F 7F 0D 7F 
198a6     21 7F 7F C4 
198aa     7F 7F 7F 28 
198ae     7F 80 D6 7F | 	byte	$7f, $7f, $0d, $7f, $21, $7f, $7f, $c4, $7f, $7f, $7f, $28, $7f, $80, $d6, $7f
198b2     7F 80 80 7F 
198b6     7F 80 D8 80 
198ba     72 13 80 AE 
198be     72 00 DF 21 | 	byte	$7f, $80, $80, $7f, $7f, $80, $d8, $80, $72, $13, $80, $ae, $72, $00, $df, $21
198c2     7F 7F D8 7F 
198c6     FF 00 49 7F 
198ca     16 7F 21 28 
198ce     AE E4 7F 7F | 	byte	$7f, $7f, $d8, $7f, $ff, $00, $49, $7f, $16, $7f, $21, $28, $ae, $e4, $7f, $7f
198d2     00 FF 00 80 
198d6     AE 80 AF 80 
198da     80 80 80 80 
198de     80 80 28 80 | 	byte	$00, $ff, $00, $80, $ae, $80, $af, $80, $80, $80, $80, $80, $80, $80, $28, $80
198e2     80 80 80 80 
198e6     80 80 80 80 | 	byte	$80[8]
198ea     85 80 80 80 
198ee     80 80 80 80 
198f2     BB 80 80 80 
198f6     36 51 80 85 | 	byte	$85, $80, $80, $80, $80, $80, $80, $80, $bb, $80, $80, $80, $36, $51, $80, $85
198fa     80 FF 00 A6 
198fe     80 80 AE EA 
19902     13 80 CF BB 
19906     BB 49 7F 79 | 	byte	$80, $ff, $00, $a6, $80, $80, $ae, $ea, $13, $80, $cf, $bb, $bb, $49, $7f, $79
1990a     5E 7F 7F 7F 
1990e     7F 64 7F 7F 
19912     7F 7F 7F 7F 
19916     7F 7F 7F 7F | 	byte	$5e, $7f, $7f, $7f, $7f, $64, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
1991a     7F 7F 7F 7F 
1991e     7F 7F 7F 7F 
19922     7F 7F 7F 7F 
19926     7F          | 	byte	$7f[13]
19927     36 7F 7F 7F 
1992b     7F 3F 51 45 
1992f     01 72 79 7F 
19933     80 00 5A 80 | 	byte	$36, $7f, $7f, $7f, $7f, $3f, $51, $45, $01, $72, $79, $7f, $80, $00, $5a, $80
19937     FF B7 87 80 
1993b     80 FF 80 80 
1993f     80 80 C4 80 
19943     80 80 80 80 | 	byte	$ff, $b7, $87, $80, $80, $ff, $80, $80, $80, $80, $c4, $80, $80, $80, $80, $80
19947     80 80 80 80 
1994b     80 80 80 80 
1994f     80 80 80 80 
19953     80 80 80 80 
19957     80 80 80    | 	byte	$80[19]
1995a     A2 80 80 80 
1995e     80 9C 80 D6 
19962     E4 AE 31 21 
19966     AF AE 51 49 | 	byte	$a2, $80, $80, $80, $80, $9c, $80, $d6, $e4, $ae, $31, $21, $af, $ae, $51, $49
1996a     7F 28 6D EA 
1996e     7F 7F 7F 85 
19972     7F 80 7F 7F 
19976     7F 7F 7F 7F | 	byte	$7f, $28, $6d, $ea, $7f, $7f, $7f, $85, $7f, $80, $7f, $7f, $7f, $7f, $7f, $7f
1997a     7F 7F 7F 7F 
1997e     49 7F 7F 7F 
19982     7F 7F 7F 7F 
19986     7F 7F 49 7F | 	byte	$7f, $7f, $7f, $7f, $49, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $49, $7f
1998a     7F 36 7F 7F 
1998e     64 7F 7F 7F 
19992     FF 45 5A 7F 
19996     51 5E 49 51 | 	byte	$7f, $36, $7f, $7f, $64, $7f, $7f, $7f, $ff, $45, $5a, $7f, $51, $5e, $49, $51
1999a     FF 7F 00 36 
1999e     01 7F 3C 49 
199a2     51 79 FF 79 
199a6     DF 36 7F AE | 	byte	$ff, $7f, $00, $36, $01, $7f, $3c, $49, $51, $79, $ff, $79, $df, $36, $7f, $ae
199aa     5A ED 80 CF 
199ae     D6 FF D8 87 
199b2     80 80 9C 80 
199b6     80 80 80 80 | 	byte	$5a, $ed, $80, $cf, $d6, $ff, $d8, $87, $80, $80, $9c, $80, $80, $80, $80, $80
199ba     80 80 80 80 
      ...             
199d6     80 80 80 80 
199da     80          | 	byte	$80[33]
199db     EA AF 85 AF 
199df     B7 80 7F 87 
199e3     C4 FF 7F 00 
199e7     D6 7F F7 7F | 	byte	$ea, $af, $85, $af, $b7, $80, $7f, $87, $c4, $ff, $7f, $00, $d6, $7f, $f7, $7f
199eb     7F 7F FF 7F 
199ef     7F 7F 7F 7F 
199f3     7F 7F 7F 7F 
199f7     7F 7F 7F 7F | 	byte	$7f, $7f, $ff, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
199fb     7F 7F 7F 7F 
199ff     7F 7F 7F 7F 
19a03     7F          | 	byte	$7f[9]
19a04     49 7F 7F 7F 
19a08     7F 7F 49 7F 
19a0c     7F 7F 7F 3C 
19a10     72 52 3C 72 | 	byte	$49, $7f, $7f, $7f, $7f, $7f, $49, $7f, $7f, $7f, $7f, $3c, $72, $52, $3c, $72
19a14     00 D8 85 FF 
19a18     AF 87 85 87 
19a1c     80 80 80 85 
19a20     87 80 80 80 | 	byte	$00, $d8, $85, $ff, $af, $87, $85, $87, $80, $80, $80, $85, $87, $80, $80, $80
19a24     80 80 80 80 
19a28     80 80 80 80 
19a2c     80 80 80 80 
19a30     80 80 80 80 
19a34     80 80 80 80 
19a38     80 80       | 	byte	$80[22]
19a3a     A2 85 80 80 
19a3e     93 80 A2 A2 
19a42     AF 80 80 A2 
19a46     BB D6 AF 85 | 	byte	$a2, $85, $80, $80, $93, $80, $a2, $a2, $af, $80, $80, $a2, $bb, $d6, $af, $85
19a4a     A6 9C 80 FF 
19a4e     28 80 21 ED 
19a52     AF EA D8 D6 
19a56     CF 21 79 00 | 	byte	$a6, $9c, $80, $ff, $28, $80, $21, $ed, $af, $ea, $d8, $d6, $cf, $21, $79, $00
19a5a     72 51 F7 7F 
19a5e     64 ED 72 7F 
19a62     7F 00 7F 7F 
19a66     79 7F 5A 7F | 	byte	$72, $51, $f7, $7f, $64, $ed, $72, $7f, $7f, $00, $7f, $7f, $79, $7f, $5a, $7f
19a6a     7F 7F 7F 7F 
19a6e     7F 7F 7F 7F 
19a72     7F 7F 7F 7F 
19a76     7F 7F 7F 7F 
19a7a     7F          | 	byte	$7f[17]
19a7b     28 7F 7F 7F 
19a7f     1C 7F 7F 51 
19a83     7F 64 5A 72 
19a87     64 1C 51 0D | 	byte	$28, $7f, $7f, $7f, $1c, $7f, $7f, $51, $7f, $64, $5a, $72, $64, $1c, $51, $0d
19a8b     00 FF FF 64 
19a8f     A6 E4 49 80 
19a93     85 FF 80 A2 
19a97     CA 80 80 80 | 	byte	$00, $ff, $ff, $64, $a6, $e4, $49, $80, $85, $ff, $80, $a2, $ca, $80, $80, $80
19a9b     80 80 80 80 
19a9f     AE AF 80 80 
19aa3     80 80 80 80 
19aa7     80 80 80 80 | 	byte	$80, $80, $80, $80, $ae, $af, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
19aab     80 80 80 80 
19aaf     80 80 80 80 
19ab3     80 80 80 80 
19ab7     80 80 80 80 
19abb     80 80 80 80 
19abf     80          | 	byte	$80[21]
19ac0     85 80 80 80 
19ac4     D8 80 AE 00 
19ac8     DF BB D6 AF 
19acc     AE 0D 5E 28 | 	byte	$85, $80, $80, $80, $d8, $80, $ae, $00, $df, $bb, $d6, $af, $ae, $0d, $5e, $28
19ad0     FF 00 21 7F 
19ad4     2A 7F 00 7F 
19ad8     7F 7F 5E 7F 
19adc     7F 7F 7F 7F | 	byte	$ff, $00, $21, $7f, $2a, $7f, $00, $7f, $7f, $7f, $5e, $7f, $7f, $7f, $7f, $7f
19ae0     7F 7F 7F 7F 
19ae4     7F 7F 7F 7F 
19ae8     7F 7F 7F 7F 
19aec     7F 7F 7F 7F 
19af0     7F          | 	byte	$7f[17]
19af1     6D 7F 7F 7F 
19af5     0D 51 21 51 
19af9     F3 49 00 13 
19afd     F7 EA 13 D6 | 	byte	$6d, $7f, $7f, $7f, $0d, $51, $21, $51, $f3, $49, $00, $13, $f7, $ea, $13, $d6
19b01     D8 80 36 C4 
19b05     D6 00 80 FF 
19b09     00 80 80 C4 
19b0d     C4 80 80 80 | 	byte	$d8, $80, $36, $c4, $d6, $00, $80, $ff, $00, $80, $80, $c4, $c4, $80, $80, $80
19b11     80 80 80 80 
19b15     80 80 80 80 
19b19     80 80 80 80 
19b1d     80 80 80 80 
19b21     80          | 	byte	$80[17]
19b22     AF 80 80 80 
19b26     80 80 80 80 
19b2a     80 80 D8 80 
19b2e     80 80 80 80 | 	byte	$af, $80, $80, $80, $80, $80, $80, $80, $80, $80, $d8, $80, $80, $80, $80, $80
19b32     A2 AE E4 9C 
19b36     CF D8 D6 16 
19b3a     8E 49 7F 13 
19b3e     2A 13 21 7F | 	byte	$a2, $ae, $e4, $9c, $cf, $d8, $d6, $16, $8e, $49, $7f, $13, $2a, $13, $21, $7f
19b42     64 FF 7F 5E 
19b46     7F 7F 7F 64 
19b4a     36 79 FF 7F 
19b4e     7F 51 21 64 | 	byte	$64, $ff, $7f, $5e, $7f, $7f, $7f, $64, $36, $79, $ff, $7f, $7f, $51, $21, $64
19b52     72 51 7F 5A 
19b56     51 49 7F 7F 
19b5a     D8 F3 72 7F 
19b5e     5E 7F 7F 3C | 	byte	$72, $51, $7f, $5a, $51, $49, $7f, $7f, $d8, $f3, $72, $7f, $5e, $7f, $7f, $3c
19b62     72 79 7F 00 
19b66     49 7F 7F 67 
19b6a     79 FF 51 7F 
19b6e     79 51 FF 5E | 	byte	$72, $79, $7f, $00, $49, $7f, $7f, $67, $79, $ff, $51, $7f, $79, $51, $ff, $5e
19b72     6D F7 49 28 
19b76     72 64 D8 FF 
19b7a     3C D6 A6 FF 
19b7e     F3 79 AF 80 | 	byte	$6d, $f7, $49, $28, $72, $64, $d8, $ff, $3c, $d6, $a6, $ff, $f3, $79, $af, $80
19b82     D6 72 00 C4 
19b86     80 99 D8 80 
19b8a     85 80 80 A2 
19b8e     B7 87 80 80 | 	byte	$d6, $72, $00, $c4, $80, $99, $d8, $80, $85, $80, $80, $a2, $b7, $87, $80, $80
19b92     93 80 87 80 
19b96     80 80 80 80 
19b9a     80 80 80 80 
19b9e     80 80 80 80 | 	byte	$93, $80, $87, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
19ba2     80 80 80 80 
19ba6     80 80       | 	byte	$80[6]
19ba8     93 80 87 80 
19bac     80 80 CA 80 
19bb0     80 AE 67 AF 
19bb4     80 A2 F3 00 | 	byte	$93, $80, $87, $80, $80, $80, $ca, $80, $80, $ae, $67, $af, $80, $a2, $f3, $00
19bb8     A2 00 B7 49 
19bbc     79 C4 FF F7 
19bc0     16 5E 7F C4 
19bc4     3F 72 64 51 | 	byte	$a2, $00, $b7, $49, $79, $c4, $ff, $f7, $16, $5e, $7f, $c4, $3f, $72, $64, $51
19bc8     72 7F 7F 7F 
19bcc     64 72 7F 7F 
19bd0     7F 7F 7F 7F 
19bd4     7F 7F 7F 7F | 	byte	$72, $7f, $7f, $7f, $64, $72, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
19bd8     7F 7F 7F 7F 
19bdc     7F 7F       | 	byte	$7f[6]
19bde     79 7F 7F 7F 
19be2     7F 7F 7F 31 
19be6     01 52 49 6D 
19bea     51 AE 67 31 | 	byte	$79, $7f, $7f, $7f, $7f, $7f, $7f, $31, $01, $52, $49, $6d, $51, $ae, $67, $31
19bee     00 CA 28 AF 
19bf2     F3 5E 93 93 
19bf6     D6 AF AF 85 
19bfa     80 D6 AF 80 | 	byte	$00, $ca, $28, $af, $f3, $5e, $93, $93, $d6, $af, $af, $85, $80, $d6, $af, $80
19bfe     80 80 80 80 
19c02     80 80       | 	byte	$80[6]
19c04     85 AF 80 80 
19c08     80 80 85 E4 
19c0c     80 80 80 80 
19c10     80 80 87 80 | 	byte	$85, $af, $80, $80, $80, $80, $85, $e4, $80, $80, $80, $80, $80, $80, $87, $80
19c14     80 99 9C 8E 
19c18     80 80 C1 80 
19c1c     80 80 80 C1 
19c20     AF 9C 80 80 | 	byte	$80, $99, $9c, $8e, $80, $80, $c1, $80, $80, $80, $80, $c1, $af, $9c, $80, $80
19c24     A6 9C 99 DF 
19c28     ED AF 80 D6 
19c2c     00 D8 C1 13 
19c30     80 FF 36 28 | 	byte	$a6, $9c, $99, $df, $ed, $af, $80, $d6, $00, $d8, $c1, $13, $80, $ff, $36, $28
19c34     AE 3F 31 ED 
19c38     36 52 C4 21 
19c3c     51 01 28 01 
19c40     72 7F 5E 64 | 	byte	$ae, $3f, $31, $ed, $36, $52, $c4, $21, $51, $01, $28, $01, $72, $7f, $5e, $64
19c44     2A 49 7F 7F 
19c48     7F 72 7F 7F 
19c4c     5A 7F 7F 1C 
19c50     7F 7F 7F 7F | 	byte	$2a, $49, $7f, $7f, $7f, $72, $7f, $7f, $5a, $7f, $7f, $1c, $7f, $7f, $7f, $7f
19c54     79 51 45 5E 
19c58     79 6D 21 7F 
19c5c     79 7B 49 51 
19c60     F7 21 7F 31 | 	byte	$79, $51, $45, $5e, $79, $6d, $21, $7f, $79, $7b, $49, $51, $f7, $21, $7f, $31
19c64     51 13 21 D8 
19c68     FF 36 28 BB 
19c6c     E4 A2 16 2A 
19c70     21 AF AE 16 | 	byte	$51, $13, $21, $d8, $ff, $36, $28, $bb, $e4, $a2, $16, $2a, $21, $af, $ae, $16
19c74     13 80 C1 F3 
19c78     C1 D8 D6 80 
19c7c     80 80 C1 AE 
19c80     87 93 80 C4 | 	byte	$13, $80, $c1, $f3, $c1, $d8, $d6, $80, $80, $80, $c1, $ae, $87, $93, $80, $c4
19c84     80 87 80 C1 
19c88     80 80 80 80 
19c8c     85 80 80 80 
19c90     80 80 99 80 | 	byte	$80, $87, $80, $c1, $80, $80, $80, $80, $85, $80, $80, $80, $80, $80, $99, $80
19c94     80 80 AF 80 
19c98     80 85 80 C1 
19c9c     FF 80 80 A6 
19ca0     80 C1 93 8E | 	byte	$80, $80, $af, $80, $80, $85, $80, $c1, $ff, $80, $80, $a6, $80, $c1, $93, $8e
19ca4     80 85 D6 C1 
19ca8     AE C4 AE 13 
19cac     DF BB D6 01 
19cb0     DF 49 5A D8 | 	byte	$80, $85, $d6, $c1, $ae, $c4, $ae, $13, $df, $bb, $d6, $01, $df, $49, $5a, $d8
19cb4     B7 49 28 6D 
19cb8     31 FF 51 6D 
19cbc     F3 49 7F 67 
19cc0     6D 5E 7F 51 | 	byte	$b7, $49, $28, $6d, $31, $ff, $51, $6d, $f3, $49, $7f, $67, $6d, $5e, $7f, $51
19cc4     5E 7F 7F 7F 
19cc8     7F 5E 7F 7F 
19ccc     52 7F 7F 7F 
19cd0     7F 49 7F 7F | 	byte	$5e, $7f, $7f, $7f, $7f, $5e, $7f, $7f, $52, $7f, $7f, $7f, $7f, $49, $7f, $7f
19cd4     79 6D 5E 7F 
19cd8     79 64 36 6D 
19cdc     5E 72 64 ED 
19ce0     0D 3C 00 C1 | 	byte	$79, $6d, $5e, $7f, $79, $64, $36, $6d, $5e, $72, $64, $ed, $0d, $3c, $00, $c1
19ce4     0D 3F C4 F3 
19ce8     ED C1 01 C4 
19cec     93 87 AF FF 
19cf0     D8 CF 80 FF | 	byte	$0d, $3f, $c4, $f3, $ed, $c1, $01, $c4, $93, $87, $af, $ff, $d8, $cf, $80, $ff
19cf4     A6 AE B7 80 
19cf8     80 99 A2 93 
19cfc     9C 80 C4 80 
19d00     80 80 80 80 | 	byte	$a6, $ae, $b7, $80, $80, $99, $a2, $93, $9c, $80, $c4, $80, $80, $80, $80, $80
19d04     80 99 80 80 
19d08     80 80 AE 80 
19d0c     80 99 80 8E 
19d10     80 CF AE 80 | 	byte	$80, $99, $80, $80, $80, $80, $ae, $80, $80, $99, $80, $8e, $80, $cf, $ae, $80
19d14     AE 87 A6 93 
19d18     D6 9C 93 99 
19d1c     FF AF CF B7 
19d20     D6 D6 A6 AF | 	byte	$ae, $87, $a6, $93, $d6, $9c, $93, $99, $ff, $af, $cf, $b7, $d6, $d6, $a6, $af
19d24     D6 00 EA D8 
19d28     EA D8 99 FF 
19d2c     5E D8 21 00 
19d30     ED 21 21 31 | 	byte	$d6, $00, $ea, $d8, $ea, $d8, $99, $ff, $5e, $d8, $21, $00, $ed, $21, $21, $31
19d34     49 3F 72 28 
19d38     FF 7F 67 7F 
19d3c     51 7F 64 72 
19d40     7B 6D 7F 7F | 	byte	$49, $3f, $72, $28, $ff, $7f, $67, $7f, $51, $7f, $64, $72, $7b, $6d, $7f, $7f
19d44     3C 7F 7F 0D 
19d48     52 7F 7B 79 
19d4c     45 13 21 7F 
19d50     31 49 36 5E | 	byte	$3c, $7f, $7f, $0d, $52, $7f, $7b, $79, $45, $13, $21, $7f, $31, $49, $36, $5e
19d54     13 FF 49 51 
19d58     13 EA F7 0D 
19d5c     3C 21 00 D8 
19d60     F3 F3 AF FF | 	byte	$13, $ff, $49, $51, $13, $ea, $f7, $0d, $3c, $21, $00, $d8, $f3, $f3, $af, $ff
19d64     00 ED FF D8 
19d68     0D E4 CF B7 
19d6c     FF DF AF 8E 
19d70     C1 09 B7 BB | 	byte	$00, $ed, $ff, $d8, $0d, $e4, $cf, $b7, $ff, $df, $af, $8e, $c1, $09, $b7, $bb
19d74     8E 80 99 F3 
19d78     80 80 93 AF 
19d7c     AE 9C 80 80 
19d80     80 ED 80 80 | 	byte	$8e, $80, $99, $f3, $80, $80, $93, $af, $ae, $9c, $80, $80, $80, $ed, $80, $80
19d84     80 AE AF 80 
19d88     80 80 80 80 
19d8c     87 85 AF 80 
19d90     80 AE C4 80 | 	byte	$80, $ae, $af, $80, $80, $80, $80, $80, $87, $85, $af, $80, $80, $ae, $c4, $80
19d94     99 00 80 80 
19d98     99 85 A6 93 
19d9c     9C 80 FF D8 
19da0     93 B7 FF C4 | 	byte	$99, $00, $80, $80, $99, $85, $a6, $93, $9c, $80, $ff, $d8, $93, $b7, $ff, $c4
19da4     C1 EA 0D F3 
19da8     CF 13 00 FF 
19dac     7F 51 16 67 
19db0     3C 45 49 3F | 	byte	$c1, $ea, $0d, $f3, $cf, $13, $00, $ff, $7f, $51, $16, $67, $3c, $45, $49, $3f
19db4     7F 79 49 7F 
19db8     7F 51 5A 5E 
19dbc     7F 7F 79 72 
19dc0     7F 28 45 7B | 	byte	$7f, $79, $49, $7f, $7f, $51, $5a, $5e, $7f, $7f, $79, $72, $7f, $28, $45, $7b
19dc4     6D 79 36 7F 
19dc8     28 49 7B 3C 
19dcc     0D 31 49 67 
19dd0     3C DF 0D 45 | 	byte	$6d, $79, $36, $7f, $28, $49, $7b, $3c, $0d, $31, $49, $67, $3c, $df, $0d, $45
19dd4     00 FF 3C C4 
19dd8     CF 1C 1C ED 
19ddc     D8 CA DF 49 
19de0     00 AE B7 13 | 	byte	$00, $ff, $3c, $c4, $cf, $1c, $1c, $ed, $d8, $ca, $df, $49, $00, $ae, $b7, $13
19de4     C4 FF 28 D8 
19de8     AE D8 93 DF 
19dec     C4 9C C1 BB 
19df0     AF AE 87 A6 | 	byte	$c4, $ff, $28, $d8, $ae, $d8, $93, $df, $c4, $9c, $c1, $bb, $af, $ae, $87, $a6
19df4     80 8E D6 93 
19df8     80 85 9C 80 
19dfc     80 99 9C 80 
19e00     AF 80 80 85 | 	byte	$80, $8e, $d6, $93, $80, $85, $9c, $80, $80, $99, $9c, $80, $af, $80, $80, $85
19e04     C4 D8 80 80 
19e08     AF 85 8E 99 
19e0c     99 D6 E4 80 
19e10     A6 D6 AF 87 | 	byte	$c4, $d8, $80, $80, $af, $85, $8e, $99, $99, $d6, $e4, $80, $a6, $d6, $af, $87
19e14     D6 AF 99 D6 
19e18     13 8E C1 D8 
19e1c     D8 D8 0D 00 
19e20     C4 D6 13 0D | 	byte	$d6, $af, $99, $d6, $13, $8e, $c1, $d8, $d8, $d8, $0d, $00, $c4, $d6, $13, $0d
19e24     ED 09 00 FF 
19e28     72 45 00 1C 
19e2c     1C 0D 1C 0D 
19e30     49 7F 01 FF | 	byte	$ed, $09, $00, $ff, $72, $45, $00, $1c, $1c, $0d, $1c, $0d, $49, $7f, $01, $ff
19e34     5E 79 28 0D 
19e38     5A 52 31 6D 
19e3c     36 3F 67 51 
19e40     5A 31 49 6D | 	byte	$5e, $79, $28, $0d, $5a, $52, $31, $6d, $36, $3f, $67, $51, $5a, $31, $49, $6d
19e44     2A 7F 5A 21 
19e48     3C 45 3C 49 
19e4c     28 16 52 49 
19e50     0D 0D 49 51 | 	byte	$2a, $7f, $5a, $21, $3c, $45, $3c, $49, $28, $16, $52, $49, $0d, $0d, $49, $51
19e54     21 DF EA 16 
19e58     FF 01 00 C4 
19e5c     AE 21 F7 E4 
19e60     EA 93 EA CF | 	byte	$21, $df, $ea, $16, $ff, $01, $00, $c4, $ae, $21, $f7, $e4, $ea, $93, $ea, $cf
19e64     99 D8 EA B7 
19e68     BB A6 CA 80 
19e6c     99 ED CA 99 
19e70     AF 9C 80 85 | 	byte	$99, $d8, $ea, $b7, $bb, $a6, $ca, $80, $99, $ed, $ca, $99, $af, $9c, $80, $85
19e74     DF 80 85 B7 
19e78     E4 93 80 99 
19e7c     99 AF A6 93 
19e80     8E 9C 87 80 | 	byte	$df, $80, $85, $b7, $e4, $93, $80, $99, $99, $af, $a6, $93, $8e, $9c, $87, $80
19e84     99 BB 8E A6 
19e88     80 8E C1 CA 
19e8c     87 99 AF C1 
19e90     ED FF CA A2 | 	byte	$99, $bb, $8e, $a6, $80, $8e, $c1, $ca, $87, $99, $af, $c1, $ed, $ff, $ca, $a2
19e94     C1 00 AE CF 
19e98     FF D8 D6 EA 
19e9c     FF 1C ED 2A 
19ea0     01 36 13 ED | 	byte	$c1, $00, $ae, $cf, $ff, $d8, $d6, $ea, $ff, $1c, $ed, $2a, $01, $36, $13, $ed
19ea4     01 21 31 01 
19ea8     31 3C 13 52 
19eac     28 FF 31 45 
19eb0     00 21 6D 13 | 	byte	$01, $21, $31, $01, $31, $3c, $13, $52, $28, $ff, $31, $45, $00, $21, $6d, $13
19eb4     ED 0D 3F 3C 
19eb8     1C 09 16 13 
19ebc     FF 64 09 D6 
19ec0     FF 3C 00 0D | 	byte	$ed, $0d, $3f, $3c, $1c, $09, $16, $13, $ff, $64, $09, $d6, $ff, $3c, $00, $0d
19ec4     3C FF FF 0D 
19ec8     21 51 13 FF 
19ecc     16 0D 21 13 
19ed0     45 21 13 E4 | 	byte	$3c, $ff, $ff, $0d, $21, $51, $13, $ff, $16, $0d, $21, $13, $45, $21, $13, $e4
19ed4     09 52 3C 00 
19ed8     16 00 0D F3 
19edc     FF ED 2A ED 
19ee0     D8 C1 E4 D8 | 	byte	$09, $52, $3c, $00, $16, $00, $0d, $f3, $ff, $ed, $2a, $ed, $d8, $c1, $e4, $d8
19ee4     CF CF D6 AF 
19ee8     AE EA DF C1 
19eec     A6 C4 DF 93 
19ef0     AE D8 CF 99 | 	byte	$cf, $cf, $d6, $af, $ae, $ea, $df, $c1, $a6, $c4, $df, $93, $ae, $d8, $cf, $99
19ef4     D6 D8 A6 C1 
19ef8     C4 B7 CF 87 
19efc     99 CA C1 D6 
19f00     AF 93 AE AF | 	byte	$d6, $d8, $a6, $c1, $c4, $b7, $cf, $87, $99, $ca, $c1, $d6, $af, $93, $ae, $af
19f04     C1 80 A6 E4 
19f08     AF 99 D8 AF 
19f0c     80 D8 A6 C4 
19f10     B7 C4 D8 CF | 	byte	$c1, $80, $a6, $e4, $af, $99, $d8, $af, $80, $d8, $a6, $c4, $b7, $c4, $d8, $cf
19f14     AF D6 D6 F3 
19f18     DF CF EA C1 
19f1c     D8 EA 00 FF 
19f20     DF EA 09 0D | 	byte	$af, $d6, $d6, $f3, $df, $cf, $ea, $c1, $d8, $ea, $00, $ff, $df, $ea, $09, $0d
19f24     EA F3 FF 0D 
19f28     D8 16 09 F3 
19f2c     0D FF 00 FF 
19f30     21 ED FF 49 | 	byte	$ea, $f3, $ff, $0d, $d8, $16, $09, $f3, $0d, $ff, $00, $ff, $21, $ed, $ff, $49
19f34     13 D8 0D 21 
19f38     49 28 01 36 
19f3c     00 49 2A 49 
19f40     67 28 45 28 | 	byte	$13, $d8, $0d, $21, $49, $28, $01, $36, $00, $49, $2a, $49, $67, $28, $45, $28
19f44     36 64 51 28 
19f48     5E 36 3C 13 
19f4c     45 51 13 16 
19f50     1C 21 51 16 | 	byte	$36, $64, $51, $28, $5e, $36, $3c, $13, $45, $51, $13, $16, $1c, $21, $51, $16
19f54     F3 FF 00 21 
19f58     FF 00 FF AF 
19f5c     F7 DF 00 CA 
19f60     D8 AF D6 EA | 	byte	$f3, $ff, $00, $21, $ff, $00, $ff, $af, $f7, $df, $00, $ca, $d8, $af, $d6, $ea
19f64     C4 C1 DF C4 
19f68     85 BB A6 80 
19f6c     D6 87 AE D6 
19f70     B7 87 80 AE | 	byte	$c4, $c1, $df, $c4, $85, $bb, $a6, $80, $d6, $87, $ae, $d6, $b7, $87, $80, $ae
19f74     AF 99 B7 CA 
19f78     87 CA CF 9C 
19f7c     AE D8 AF 80 
19f80     CF A6 99 D6 | 	byte	$af, $99, $b7, $ca, $87, $ca, $cf, $9c, $ae, $d8, $af, $80, $cf, $a6, $99, $d6
19f84     ED AF 80 C1 
19f88     D6 A6 C1 CF 
19f8c     AF AF C1 A6 
19f90     C4 CA BB AE | 	byte	$ed, $af, $80, $c1, $d6, $a6, $c1, $cf, $af, $af, $c1, $a6, $c4, $ca, $bb, $ae
19f94     D6 00 B7 FF 
19f98     00 FF 00 C1 
19f9c     FF 09 00 2A 
19fa0     00 F7 21 28 | 	byte	$d6, $00, $b7, $ff, $00, $ff, $00, $c1, $ff, $09, $00, $2a, $00, $f7, $21, $28
19fa4     1C 13 16 0D 
19fa8     5E 00 16 1C 
19fac     ED 67 28 09 
19fb0     21 1C 00 31 | 	byte	$1c, $13, $16, $0d, $5e, $00, $16, $1c, $ed, $67, $28, $09, $21, $1c, $00, $31
19fb4     2A 13 01 36 
19fb8     13 ED 0D 5E 
19fbc     1C F7 16 28 
19fc0     0D 36 09 21 | 	byte	$2a, $13, $01, $36, $13, $ed, $0d, $5e, $1c, $f7, $16, $28, $0d, $36, $09, $21
19fc4     45 28 13 F7 
19fc8     FF 2A 1C 49 
19fcc     00 FF 0D 00 
19fd0     FF 0D F3 D8 | 	byte	$45, $28, $13, $f7, $ff, $2a, $1c, $49, $00, $ff, $0d, $00, $ff, $0d, $f3, $d8
19fd4     F3 D8 D8 D8 
19fd8     CF 09 00 AF 
19fdc     AE D6 E4 BB 
19fe0     A2 D6 E4 BB | 	byte	$f3, $d8, $d8, $d8, $cf, $09, $00, $af, $ae, $d6, $e4, $bb, $a2, $d6, $e4, $bb
19fe4     C1 C1 F7 C1 
19fe8     A6 D6 E4 C1 
19fec     ED DF ED DF 
19ff0     ED C4 ED FF | 	byte	$c1, $c1, $f7, $c1, $a6, $d6, $e4, $c1, $ed, $df, $ed, $df, $ed, $c4, $ed, $ff
19ff4     00 D6 C4 F7 
19ff8     ED 09 CF C4 
19ffc     F3 00 A6 C1 
1a000     D6 D8 D8 CA | 	byte	$00, $d6, $c4, $f7, $ed, $09, $cf, $c4, $f3, $00, $a6, $c1, $d6, $d8, $d8, $ca
1a004     E4 CF A6 C1 
1a008     D8 CA AF C1 
1a00c     D8 C4 B7 A2 
1a010     B7 DF C4 AE | 	byte	$e4, $cf, $a6, $c1, $d8, $ca, $af, $c1, $d8, $c4, $b7, $a2, $b7, $df, $c4, $ae
1a014     CF CF BB C1 
1a018     F3 D8 B7 EA 
1a01c     EA EA CF ED 
1a020     F3 EA F7 ED | 	byte	$cf, $cf, $bb, $c1, $f3, $d8, $b7, $ea, $ea, $ea, $cf, $ed, $f3, $ea, $f7, $ed
1a024     F3 01 28 F3 
1a028     FF 1C 01 F7 
1a02c     16 13 FF FF 
1a030     01 0D 1C 00 | 	byte	$f3, $01, $28, $f3, $ff, $1c, $01, $f7, $16, $13, $ff, $ff, $01, $0d, $1c, $00
1a034     0D 1C FF 21 
1a038     28 01 FF 1C 
1a03c     00 FF 45 00 
1a040     EA 3C 28 F7 | 	byte	$0d, $1c, $ff, $21, $28, $01, $ff, $1c, $00, $ff, $45, $00, $ea, $3c, $28, $f7
1a044     3C 0D 09 28 
1a048     28 F7 0D 13 
1a04c     36 3F 00 3F 
1a050     1C F3 36 13 | 	byte	$3c, $0d, $09, $28, $28, $f7, $0d, $13, $36, $3f, $00, $3f, $1c, $f3, $36, $13
1a054     13 ED 1C 21 
1a058     01 EA DF F3 
1a05c     F7 ED F3 ED 
1a060     D6 ED B7 CA | 	byte	$13, $ed, $1c, $21, $01, $ea, $df, $f3, $f7, $ed, $f3, $ed, $d6, $ed, $b7, $ca
1a064     ED B7 ED BB 
1a068     93 BB AF BB 
1a06c     CF CA D8 9C 
1a070     99 CA CF CF | 	byte	$ed, $b7, $ed, $bb, $93, $bb, $af, $bb, $cf, $ca, $d8, $9c, $99, $ca, $cf, $cf
1a074     AF 9C CA AF 
1a078     AF CF D8 BB 
1a07c     A2 D6 AF B7 
1a080     B7 AF EA ED | 	byte	$af, $9c, $ca, $af, $af, $cf, $d8, $bb, $a2, $d6, $af, $b7, $b7, $af, $ea, $ed
1a084     C4 C1 BB AE 
1a088     CA DF D8 D8 
1a08c     B7 BB D6 D8 
1a090     EA D8 C1 F7 | 	byte	$c4, $c1, $bb, $ae, $ca, $df, $d8, $d8, $b7, $bb, $d6, $d8, $ea, $d8, $c1, $f7
1a094     FF D8 C4 FF 
1a098     FF EA 0D 00 
1a09c     ED 00 FF 0D 
1a0a0     13 E4 FF 13 | 	byte	$ff, $d8, $c4, $ff, $ff, $ea, $0d, $00, $ed, $00, $ff, $0d, $13, $e4, $ff, $13
1a0a4     09 1C 01 F7 
1a0a8     1C 01 21 0D 
1a0ac     00 21 13 01 
1a0b0     00 16 13 ED | 	byte	$09, $1c, $01, $f7, $1c, $01, $21, $0d, $00, $21, $13, $01, $00, $16, $13, $ed
1a0b4     1C 01 13 F7 
1a0b8     FF 13 ED F7 
1a0bc     1C 00 ED ED 
1a0c0     09 09 F3 E4 | 	byte	$1c, $01, $13, $f7, $ff, $13, $ed, $f7, $1c, $00, $ed, $ed, $09, $09, $f3, $e4
1a0c4     00 EA 00 09 
1a0c8     F7 F3 13 ED 
1a0cc     ED EA ED FF 
1a0d0     0D 00 13 DF | 	byte	$00, $ea, $00, $09, $f7, $f3, $13, $ed, $ed, $ea, $ed, $ff, $0d, $00, $13, $df
1a0d4     D8 FF 0D F7 
1a0d8     EA CF EA 3C 
1a0dc     00 CA D6 F7 
1a0e0     0D 09 F7 EA | 	byte	$d8, $ff, $0d, $f7, $ea, $cf, $ea, $3c, $00, $ca, $d6, $f7, $0d, $09, $f7, $ea
1a0e4     EA 13 E4 D8 
1a0e8     01 00 C4 D8 
1a0ec     0D 01 B7 ED 
1a0f0     EA ED DF F3 | 	byte	$ea, $13, $e4, $d8, $01, $00, $c4, $d8, $0d, $01, $b7, $ed, $ea, $ed, $df, $f3
1a0f4     E4 EA 09 ED 
1a0f8     D6 EA D8 D8 
1a0fc     ED ED DF F3 
1a100     C4 D8 B7 00 | 	byte	$e4, $ea, $09, $ed, $d6, $ea, $d8, $d8, $ed, $ed, $df, $f3, $c4, $d8, $b7, $00
1a104     C1 CF CF C1 
1a108     BB AF BB C1 
1a10c     D8 87 A2 B7 
1a110     C1 AF AF CF | 	byte	$c1, $cf, $cf, $c1, $bb, $af, $bb, $c1, $d8, $87, $a2, $b7, $c1, $af, $af, $cf
1a114     C1 AF C1 D6 
1a118     ED C1 DF CF 
1a11c     CF D6 EA EA 
1a120     ED D6 21 C4 | 	byte	$c1, $af, $c1, $d6, $ed, $c1, $df, $cf, $cf, $d6, $ea, $ea, $ed, $d6, $21, $c4
1a124     E4 F7 ED 0D 
1a128     ED F7 ED EA 
1a12c     FF 0D 00 09 
1a130     21 09 ED F7 | 	byte	$e4, $f7, $ed, $0d, $ed, $f7, $ed, $ea, $ff, $0d, $00, $09, $21, $09, $ed, $f7
1a134     09 16 00 DF 
1a138     09 09 16 01 
1a13c     FF 09 0D 09 
1a140     09 16 2A 2A | 	byte	$09, $16, $00, $df, $09, $09, $16, $01, $ff, $09, $0d, $09, $09, $16, $2a, $2a
1a144     0D 13 01 09 
1a148     21 28 FF 0D 
1a14c     21 1C 0D 21 
1a150     21 36 0D 31 | 	byte	$0d, $13, $01, $09, $21, $28, $ff, $0d, $21, $1c, $0d, $21, $21, $36, $0d, $31
1a154     1C 36 13 F7 
1a158     0D 36 28 16 
1a15c     0D 00 F7 00 
1a160     EA D8 EA ED | 	byte	$1c, $36, $13, $f7, $0d, $36, $28, $16, $0d, $00, $f7, $00, $ea, $d8, $ea, $ed
1a164     DF E4 D6 CF 
1a168     CF C1 C1 B7 
1a16c     AF CA C1 A6 
1a170     80 AE E4 AF | 	byte	$df, $e4, $d6, $cf, $cf, $c1, $c1, $b7, $af, $ca, $c1, $a6, $80, $ae, $e4, $af
1a174     BB 99 CA A6 
1a178     B7 AF BB 9C 
1a17c     A6 CF A6 CA 
1a180     CA B7 C1 C1 | 	byte	$bb, $99, $ca, $a6, $b7, $af, $bb, $9c, $a6, $cf, $a6, $ca, $ca, $b7, $c1, $c1
1a184     B7 D8 D8 AE 
1a188     CA E4 EA CF 
1a18c     C1 D8 CA 01 
1a190     D8 C1 D6 F7 | 	byte	$b7, $d8, $d8, $ae, $ca, $e4, $ea, $cf, $c1, $d8, $ca, $01, $d8, $c1, $d6, $f7
1a194     F7 D8 DF FF 
1a198     CF DF F7 F7 
1a19c     E4 ED 09 F3 
1a1a0     F3 00 ED F7 | 	byte	$f7, $d8, $df, $ff, $cf, $df, $f7, $f7, $e4, $ed, $09, $f3, $f3, $00, $ed, $f7
1a1a4     00 09 13 F7 
1a1a8     DF FF 13 EA 
1a1ac     FF 1C F3 21 
1a1b0     00 01 01 ED | 	byte	$00, $09, $13, $f7, $df, $ff, $13, $ea, $ff, $1c, $f3, $21, $00, $01, $01, $ed
1a1b4     0D ED 36 21 
1a1b8     09 ED 1C 13 
1a1bc     EA F3 1C 36 
1a1c0     1C F7 F3 09 | 	byte	$0d, $ed, $36, $21, $09, $ed, $1c, $13, $ea, $f3, $1c, $36, $1c, $f7, $f3, $09
1a1c4     1C 0D 16 28 
1a1c8     21 1C 21 0D 
1a1cc     0D 16 16 13 
1a1d0     01 16 28 ED | 	byte	$1c, $0d, $16, $28, $21, $1c, $21, $0d, $0d, $16, $16, $13, $01, $16, $28, $ed
1a1d4     01 16 13 F7 
1a1d8     D8 F7 FF FF 
1a1dc     E4 D8 D6 EA 
1a1e0     00 AF BB CA | 	byte	$01, $16, $13, $f7, $d8, $f7, $ff, $ff, $e4, $d8, $d6, $ea, $00, $af, $bb, $ca
1a1e4     DF D8 D6 C4 
1a1e8     EA C4 B7 C1 
1a1ec     ED CA DF D8 
1a1f0     CA C1 CF D8 | 	byte	$df, $d8, $d6, $c4, $ea, $c4, $b7, $c1, $ed, $ca, $df, $d8, $ca, $c1, $cf, $d8
1a1f4     CA F7 D8 AF 
1a1f8     CF D8 C4 FF 
1a1fc     DF C4 BB F3 
1a200     ED DF CF AF | 	byte	$ca, $f7, $d8, $af, $cf, $d8, $c4, $ff, $df, $c4, $bb, $f3, $ed, $df, $cf, $af
1a204     D6 F3 D8 CA 
1a208     CF C4 AF D6 
1a20c     D8 C4 BB C4 
1a210     FF D8 AF D6 | 	byte	$d6, $f3, $d8, $ca, $cf, $c4, $af, $d6, $d8, $c4, $bb, $c4, $ff, $d8, $af, $d6
1a214     ED C4 CA CF 
1a218     D6 F3 00 C1 
1a21c     CA D8 C1 D8 
1a220     D6 ED D8 EA | 	byte	$ed, $c4, $ca, $cf, $d6, $f3, $00, $c1, $ca, $d8, $c1, $d8, $d6, $ed, $d8, $ea
1a224     ED CF F3 0D 
1a228     09 01 01 FF 
1a22c     01 00 21 36 
1a230     36 13 2A 36 | 	byte	$ed, $cf, $f3, $0d, $09, $01, $01, $ff, $01, $00, $21, $36, $36, $13, $2a, $36
1a234     1C 1C 3F 45 
1a238     13 1C 49 3C 
1a23c     0D 36 16 2A 
1a240     36 2A 2A 09 | 	byte	$1c, $1c, $3f, $45, $13, $1c, $49, $3c, $0d, $36, $16, $2a, $36, $2a, $2a, $09
1a244     09 36 1C 00 
1a248     FF 21 16 00 
1a24c     F3 FF FF ED 
1a250     01 FF F7 EA | 	byte	$09, $36, $1c, $00, $ff, $21, $16, $00, $f3, $ff, $ff, $ed, $01, $ff, $f7, $ea
1a254     F7 E4 D6 CF 
1a258     F3 CF AF ED 
1a25c     ED B7 CF DF 
1a260     D8 B7 E4 B7 | 	byte	$f7, $e4, $d6, $cf, $f3, $cf, $af, $ed, $ed, $b7, $cf, $df, $d8, $b7, $e4, $b7
1a264     AE C1 C4 BB 
1a268     CA BB BB A6 
1a26c     A6 AF BB C1 
1a270     AE B7 A6 B7 | 	byte	$ae, $c1, $c4, $bb, $ca, $bb, $bb, $a6, $a6, $af, $bb, $c1, $ae, $b7, $a6, $b7
1a274     93 AE C1 C4 
1a278     C4 BB BB CF 
1a27c     D8 BB B7 C4 
1a280     D8 DF C4 D6 | 	byte	$93, $ae, $c1, $c4, $c4, $bb, $bb, $cf, $d8, $bb, $b7, $c4, $d8, $df, $c4, $d6
1a284     EA F7 FF ED 
1a288     E4 0D 00 DF 
1a28c     1C 00 01 1C 
1a290     0D 1C 01 00 | 	byte	$ea, $f7, $ff, $ed, $e4, $0d, $00, $df, $1c, $00, $01, $1c, $0d, $1c, $01, $00
1a294     0D 2A 28 16 
1a298     00 0D 1C 01 
1a29c     09 2A 09 21 
1a2a0     28 00 00 16 | 	byte	$0d, $2a, $28, $16, $00, $0d, $1c, $01, $09, $2a, $09, $21, $28, $00, $00, $16
1a2a4     09 00 01 28 
1a2a8     ED 00 01 00 
1a2ac     FF F3 00 F3 
1a2b0     09 F7 D8 EA | 	byte	$09, $00, $01, $28, $ed, $00, $01, $00, $ff, $f3, $00, $f3, $09, $f7, $d8, $ea
1a2b4     FF FF ED EA 
1a2b8     F7 D6 F7 F7 
1a2bc     FF 00 D6 DF 
1a2c0     F7 F7 F7 E4 | 	byte	$ff, $ff, $ed, $ea, $f7, $d6, $f7, $f7, $ff, $00, $d6, $df, $f7, $f7, $f7, $e4
1a2c4     D8 F7 E4 EA 
1a2c8     ED CF EA ED 
1a2cc     ED C4 D6 DF 
1a2d0     D8 D8 D8 D8 | 	byte	$d8, $f7, $e4, $ea, $ed, $cf, $ea, $ed, $ed, $c4, $d6, $df, $d8, $d8, $d8, $d8
1a2d4     D6 EA E4 D8 
1a2d8     DF EA EA E4 
1a2dc     EA DF E4 E4 
1a2e0     EA E4 ED E4 | 	byte	$d6, $ea, $e4, $d8, $df, $ea, $ea, $e4, $ea, $df, $e4, $e4, $ea, $e4, $ed, $e4
1a2e4     CF DF 00 E4 
1a2e8     F3 F3 FF 00 
1a2ec     CF D8 FF ED 
1a2f0     F7 EA F3 F7 | 	byte	$cf, $df, $00, $e4, $f3, $f3, $ff, $00, $cf, $d8, $ff, $ed, $f7, $ea, $f3, $f7
1a2f4     E4 F7 FF F7 
1a2f8     FF E4 D6 FF 
1a2fc     EA FF F7 ED 
1a300     E4 E4 FF ED | 	byte	$e4, $f7, $ff, $f7, $ff, $e4, $d6, $ff, $ea, $ff, $f7, $ed, $e4, $e4, $ff, $ed
1a304     DF EA F7 ED 
1a308     C4 ED ED D8 
1a30c     EA EA ED DF 
1a310     F7 ED E4 00 | 	byte	$df, $ea, $f7, $ed, $c4, $ed, $ed, $d8, $ea, $ea, $ed, $df, $f7, $ed, $e4, $00
1a314     00 DF EA FF 
1a318     ED ED EA FF 
1a31c     13 F7 F3 01 
1a320     00 ED 09 00 | 	byte	$00, $df, $ea, $ff, $ed, $ed, $ea, $ff, $13, $f7, $f3, $01, $00, $ed, $09, $00
1a324     DF FF 0D 13 
1a328     00 F3 FF 13 
1a32c     00 01 F3 FF 
1a330     0D 00 F7 00 | 	byte	$df, $ff, $0d, $13, $00, $f3, $ff, $13, $00, $01, $f3, $ff, $0d, $00, $f7, $00
1a334     FF FF 0D 00 
1a338     ED FF F7 EA 
1a33c     ED FF F3 EA 
1a340     ED F7 D8 DF | 	byte	$ff, $ff, $0d, $00, $ed, $ff, $f7, $ea, $ed, $ff, $f3, $ea, $ed, $f7, $d8, $df
1a344     EA F3 F3 FF 
1a348     ED CA E4 D8 
1a34c     ED EA E4 ED 
1a350     CF D6 ED D6 | 	byte	$ea, $f3, $f3, $ff, $ed, $ca, $e4, $d8, $ed, $ea, $e4, $ed, $cf, $d6, $ed, $d6
1a354     D8 DF EA D6 
1a358     D8 CF D8 DF 
1a35c     CF DF 00 CF 
1a360     C1 DF D8 F3 | 	byte	$d8, $df, $ea, $d6, $d8, $cf, $d8, $df, $cf, $df, $00, $cf, $c1, $df, $d8, $f3
1a364     D8 CF DF ED 
1a368     DF DF F3 00 
1a36c     ED EA EA EA 
1a370     FF D8 F3 00 | 	byte	$d8, $cf, $df, $ed, $df, $df, $f3, $00, $ed, $ea, $ea, $ea, $ff, $d8, $f3, $00
1a374     E4 F7 ED ED 
1a378     F7 E4 DF F3 
1a37c     ED E4 E4 FF 
1a380     ED DF F7 ED | 	byte	$e4, $f7, $ed, $ed, $f7, $e4, $df, $f3, $ed, $e4, $e4, $ff, $ed, $df, $f7, $ed
1a384     F7 F3 01 00 
1a388     ED 00 F7 01 
1a38c     00 FF 00 00 
1a390     01 0D 00 FF | 	byte	$f7, $f3, $01, $00, $ed, $00, $f7, $01, $00, $ff, $00, $00, $01, $0d, $00, $ff
1a394     13 00 01 ED 
1a398     F7 0D 00 F7 
1a39c     F7 00 F7 FF 
1a3a0     16 01 ED F7 | 	byte	$13, $00, $01, $ed, $f7, $0d, $00, $f7, $f7, $00, $f7, $ff, $16, $01, $ed, $f7
1a3a4     00 00 FF 00 
1a3a8     01 00 ED F7 
1a3ac     00 F7 F3 F3 
1a3b0     E4 DF E4 ED | 	byte	$00, $00, $ff, $00, $01, $00, $ed, $f7, $00, $f7, $f3, $f3, $e4, $df, $e4, $ed
1a3b4     DF ED ED E4 
1a3b8     E4 D6 CF D8 
1a3bc     D8 D8 D8 D8 
1a3c0     ED DF C4 CA | 	byte	$df, $ed, $ed, $e4, $e4, $d6, $cf, $d8, $d8, $d8, $d8, $d8, $ed, $df, $c4, $ca
1a3c4     DF D8 DF D8 
1a3c8     D8 EA D8 D6 
1a3cc     D8 DF ED F7 
1a3d0     CF CA D8 EA | 	byte	$df, $d8, $df, $d8, $d8, $ea, $d8, $d6, $d8, $df, $ed, $f7, $cf, $ca, $d8, $ea
1a3d4     F7 E4 ED E4 
1a3d8     09 00 E4 F3 
1a3dc     ED ED EA 01 
1a3e0     ED ED E4 D8 | 	byte	$f7, $e4, $ed, $e4, $09, $00, $e4, $f3, $ed, $ed, $ea, $01, $ed, $ed, $e4, $d8
1a3e4     ED FF F3 E4 
1a3e8     D8 EA EA DF 
1a3ec     DF ED ED EA 
1a3f0     ED D8 EA EA | 	byte	$ed, $ff, $f3, $e4, $d8, $ea, $ea, $df, $df, $ed, $ed, $ea, $ed, $d8, $ea, $ea
1a3f4     EA F3 ED DF 
1a3f8     F3 FF FF 00 
1a3fc     FF ED FF FF 
1a400     00 01 16 00 | 	byte	$ea, $f3, $ed, $df, $f3, $ff, $ff, $00, $ff, $ed, $ff, $ff, $00, $01, $16, $00
1a404     FF FF 01 0D 
1a408     01 00 00 0D 
1a40c     0D 09 01 00 
1a410     16 0D 00 FF | 	byte	$ff, $ff, $01, $0d, $01, $00, $00, $0d, $0d, $09, $01, $00, $16, $0d, $00, $ff
1a414     FF 0D 01 F7 
1a418     01 09 00 ED 
1a41c     EA 01 FF F7 
1a420     00 F7 F7 ED | 	byte	$ff, $0d, $01, $f7, $01, $09, $00, $ed, $ea, $01, $ff, $f7, $00, $f7, $f7, $ed
1a424     ED ED EA EA 
1a428     EA F7 F7 DF 
1a42c     CF E4 ED F3 
1a430     E4 DF D8 DF | 	byte	$ed, $ed, $ea, $ea, $ea, $f7, $f7, $df, $cf, $e4, $ed, $f3, $e4, $df, $d8, $df
1a434     ED E4 DF EA 
1a438     F3 EA D6 D8 
1a43c     DF EA CF D6 
1a440     E4 DF CF CF | 	byte	$ed, $e4, $df, $ea, $f3, $ea, $d6, $d8, $df, $ea, $cf, $d6, $e4, $df, $cf, $cf
1a444     EA CF CA CF 
1a448     CF EA D8 C1 
1a44c     CA D6 C1 D6 
1a450     DF CF C4 CF | 	byte	$ea, $cf, $ca, $cf, $cf, $ea, $d8, $c1, $ca, $d6, $c1, $d6, $df, $cf, $c4, $cf
1a454     DF E4 E4 C4 
1a458     D6 E4 D8 EA 
1a45c     D6 D6 E4 FF 
1a460     F3 F7 ED EA | 	byte	$df, $e4, $e4, $c4, $d6, $e4, $d8, $ea, $d6, $d6, $e4, $ff, $f3, $f7, $ed, $ea
1a464     EA FF ED ED 
1a468     FF FF 01 09 
1a46c     F7 F7 01 01 
1a470     F7 FF 00 00 | 	byte	$ea, $ff, $ed, $ed, $ff, $ff, $01, $09, $f7, $f7, $01, $01, $f7, $ff, $00, $00
1a474     00 0D 01 09 
1a478     00 F7 FF 0D 
1a47c     00 09 F7 01 
1a480     0D 01 01 01 | 	byte	$00, $0d, $01, $09, $00, $f7, $ff, $0d, $00, $09, $f7, $01, $0d, $01, $01, $01
1a484     01 01 FF 09 
1a488     09 01 01 00 
1a48c     00 FF 01 09 
1a490     FF F7 ED F7 | 	byte	$01, $01, $ff, $09, $09, $01, $01, $00, $00, $ff, $01, $09, $ff, $f7, $ed, $f7
1a494     01 09 F7 ED 
1a498     F3 F7 00 FF 
1a49c     ED E4 ED E4 
1a4a0     DF ED 00 F3 | 	byte	$01, $09, $f7, $ed, $f3, $f7, $00, $ff, $ed, $e4, $ed, $e4, $df, $ed, $00, $f3
1a4a4     D8 D6 EA FF 
1a4a8     ED D8 DF DF 
1a4ac     ED ED D8 D6 
1a4b0     DF DF ED D8 | 	byte	$d8, $d6, $ea, $ff, $ed, $d8, $df, $df, $ed, $ed, $d8, $d6, $df, $df, $ed, $d8
1a4b4     D6 D6 D8 CF 
1a4b8     D8 CF EA EA 
1a4bc     D8 CF DF EA 
1a4c0     D8 C4 CF D6 | 	byte	$d6, $d6, $d8, $cf, $d8, $cf, $ea, $ea, $d8, $cf, $df, $ea, $d8, $c4, $cf, $d6
1a4c4     E4 D8 D8 D6 
1a4c8     C4 D6 ED DF 
1a4cc     D8 D6 CA CF 
1a4d0     D6 D8 DF DF | 	byte	$e4, $d8, $d8, $d6, $c4, $d6, $ed, $df, $d8, $d6, $ca, $cf, $d6, $d8, $df, $df
1a4d4     EA E4 D8 C4 
1a4d8     EA F3 D8 DF 
1a4dc     E4 ED DF D8 
1a4e0     FF 00 ED EA | 	byte	$ea, $e4, $d8, $c4, $ea, $f3, $d8, $df, $e4, $ed, $df, $d8, $ff, $00, $ed, $ea
1a4e4     FF F7 F7 FF 
1a4e8     FF ED 00 00 
1a4ec     09 09 01 FF 
1a4f0     09 00 00 01 | 	byte	$ff, $f7, $f7, $ff, $ff, $ed, $00, $00, $09, $09, $01, $ff, $09, $00, $00, $01
1a4f4     0D 0D 1C 01 
1a4f8     00 01 13 01 
1a4fc     01 13 01 09 
1a500     09 0D 01 0D | 	byte	$0d, $0d, $1c, $01, $00, $01, $13, $01, $01, $13, $01, $09, $09, $0d, $01, $0d
1a504     01 09 09 01 
1a508     09 00 F7 00 
1a50c     00 FF 01 01 
1a510     ED ED FF F7 | 	byte	$01, $09, $09, $01, $09, $00, $f7, $00, $00, $ff, $01, $01, $ed, $ed, $ff, $f7
1a514     F7 FF E4 ED 
1a518     ED ED F3 FF 
1a51c     E4 D8 FF F7 
1a520     CF D6 DF D8 | 	byte	$f7, $ff, $e4, $ed, $ed, $ed, $f3, $ff, $e4, $d8, $ff, $f7, $cf, $d6, $df, $d8
1a524     E4 ED E4 C1 
1a528     CA DF DF E4 
1a52c     D8 DF CF CF 
1a530     DF CF CF EA | 	byte	$e4, $ed, $e4, $c1, $ca, $df, $df, $e4, $d8, $df, $cf, $cf, $df, $cf, $cf, $ea
1a534     D8 D8 CF D8 
1a538     D6 D8 CF C4 
1a53c     CF D8 D6 D8 
1a540     E4 D6 C4 CF | 	byte	$d8, $d8, $cf, $d8, $d6, $d8, $cf, $c4, $cf, $d8, $d6, $d8, $e4, $d6, $c4, $cf
1a544     E4 CF D6 E4 
1a548     DF D8 CA D6 
1a54c     E4 EA ED EA 
1a550     DF ED EA ED | 	byte	$e4, $cf, $d6, $e4, $df, $d8, $ca, $d6, $e4, $ea, $ed, $ea, $df, $ed, $ea, $ed
1a554     EA ED EA ED 
1a558     F3 FF FF F7 
1a55c     F3 ED 00 00 
1a560     F7 F7 ED 00 | 	byte	$ea, $ed, $ea, $ed, $f3, $ff, $ff, $f7, $f3, $ed, $00, $00, $f7, $f7, $ed, $00
1a564     FF 00 FF 00 
1a568     F7 FF 00 00 
1a56c     00 FF 00 F3 
1a570     FF 16 0D 00 | 	byte	$ff, $00, $ff, $00, $f7, $ff, $00, $00, $00, $ff, $00, $f3, $ff, $16, $0d, $00
1a574     FF FF FF 01 
1a578     0D 13 13 01 
1a57c     09 0D 09 00 
1a580     09 0D FF 09 | 	byte	$ff, $ff, $ff, $01, $0d, $13, $13, $01, $09, $0d, $09, $00, $09, $0d, $ff, $09
1a584     00 FF 01 01 
1a588     FF F7 FF FF 
1a58c     F7 FF ED F3 
1a590     ED F3 DF EA | 	byte	$00, $ff, $01, $01, $ff, $f7, $ff, $ff, $f7, $ff, $ed, $f3, $ed, $f3, $df, $ea
1a594     F7 ED D8 D6 
1a598     D8 E4 E4 D8 
1a59c     CF CF D6 D8 
1a5a0     CF D8 D8 CA | 	byte	$f7, $ed, $d8, $d6, $d8, $e4, $e4, $d8, $cf, $cf, $d6, $d8, $cf, $d8, $d8, $ca
1a5a4     D8 D8 D8 C1 
1a5a8     CA D8 D8 D8 
1a5ac     D8 D8 D8 EA 
1a5b0     D8 CF DF ED | 	byte	$d8, $d8, $d8, $c1, $ca, $d8, $d8, $d8, $d8, $d8, $d8, $ea, $d8, $cf, $df, $ed
1a5b4     D8 DF DF ED 
1a5b8     ED ED DF D6 
1a5bc     DF E4 EA ED 
1a5c0     D8 D8 DF EA | 	byte	$d8, $df, $df, $ed, $ed, $ed, $df, $d6, $df, $e4, $ea, $ed, $d8, $d8, $df, $ea
1a5c4     ED DF EA E4 
1a5c8     E4 F3 ED EA 
1a5cc     EA F3 EA ED 
1a5d0     ED F7 FF 00 | 	byte	$ed, $df, $ea, $e4, $e4, $f3, $ed, $ea, $ea, $f3, $ea, $ed, $ed, $f7, $ff, $00
1a5d4     FF FF 01 00 
1a5d8     00 00 00 00 
1a5dc     13 00 FF 01 
1a5e0     0D 00 0D 0D | 	byte	$ff, $ff, $01, $00, $00, $00, $00, $00, $13, $00, $ff, $01, $0d, $00, $0d, $0d
1a5e4     01 00 F7 FF 
1a5e8     00 00 09 F7 
1a5ec     ED FF 00 F7 
1a5f0     FF FF F3 ED | 	byte	$01, $00, $f7, $ff, $00, $00, $09, $f7, $ed, $ff, $00, $f7, $ff, $ff, $f3, $ed
1a5f4     F3 F7 EA F7 
1a5f8     FF ED F3 ED 
1a5fc     E4 ED F7 F3 
1a600     EA F3 FF ED | 	byte	$f3, $f7, $ea, $f7, $ff, $ed, $f3, $ed, $e4, $ed, $f7, $f3, $ea, $f3, $ff, $ed
1a604     ED ED EA E4 
1a608     FF 00 E4 EA 
1a60c     EA ED F7 F7 
1a610     E4 EA F7 F3 | 	byte	$ed, $ed, $ea, $e4, $ff, $00, $e4, $ea, $ea, $ed, $f7, $f7, $e4, $ea, $f7, $f3
1a614     EA ED EA EA 
1a618     EA ED ED ED 
1a61c     ED F3 ED ED 
1a620     EA ED F3 ED | 	byte	$ea, $ed, $ea, $ea, $ea, $ed, $ed, $ed, $ed, $f3, $ed, $ed, $ea, $ed, $f3, $ed
1a624     EA F7 F3 F3 
1a628     F3 FF F3 F3 
1a62c     FF F7 ED F3 
1a630     FF F7 EA FF | 	byte	$ea, $f7, $f3, $f3, $f3, $ff, $f3, $f3, $ff, $f7, $ed, $f3, $ff, $f7, $ea, $ff
1a634     FF ED F7 EA 
1a638     E4 EA ED E4 
1a63c     ED ED EA ED 
1a640     ED E4 E4 EA | 	byte	$ff, $ed, $f7, $ea, $e4, $ea, $ed, $e4, $ed, $ed, $ea, $ed, $ed, $e4, $e4, $ea
1a644     ED EA ED ED 
1a648     D8 EA F3 ED 
1a64c     F7 ED ED EA 
1a650     ED F3 ED F3 | 	byte	$ed, $ea, $ed, $ed, $d8, $ea, $f3, $ed, $f7, $ed, $ed, $ea, $ed, $f3, $ed, $f3
1a654     F3 F3 ED F3 
1a658     ED F7 ED ED 
1a65c     ED F3 ED DF 
1a660     ED ED EA E4 | 	byte	$f3, $f3, $ed, $f3, $ed, $f7, $ed, $ed, $ed, $f3, $ed, $df, $ed, $ed, $ea, $e4
1a664     E4 D8 DF EA 
1a668     EA E4 E4 E4 
1a66c     D8 DF E4 ED 
1a670     EA E4 E4 ED | 	byte	$e4, $d8, $df, $ea, $ea, $e4, $e4, $e4, $d8, $df, $e4, $ed, $ea, $e4, $e4, $ed
1a674     F3 EA E4 F3 
1a678     F7 ED FF F7 
1a67c     F3 F7 FF ED 
1a680     F7 FF 00 00 | 	byte	$f3, $ea, $e4, $f3, $f7, $ed, $ff, $f7, $f3, $f7, $ff, $ed, $f7, $ff, $00, $00
1a684     00 FF FF 01 
1a688     FF F7 F7 FF 
1a68c     00 F7 F7 F3 
1a690     F7 FF FF F7 | 	byte	$00, $ff, $ff, $01, $ff, $f7, $f7, $ff, $00, $f7, $f7, $f3, $f7, $ff, $ff, $f7
1a694     F3 F7 F7 FF 
1a698     F7 F7 F3 F7 
1a69c     ED ED F3 F3 
1a6a0     ED ED F7 F3 | 	byte	$f3, $f7, $f7, $ff, $f7, $f7, $f3, $f7, $ed, $ed, $f3, $f3, $ed, $ed, $f7, $f3
1a6a4     EA ED F3 ED 
1a6a8     ED E4 ED ED 
1a6ac     F7 EA E4 E4 
1a6b0     DF EA ED E4 | 	byte	$ea, $ed, $f3, $ed, $ed, $e4, $ed, $ed, $f7, $ea, $e4, $e4, $df, $ea, $ed, $e4
1a6b4     ED ED EA E4 
1a6b8     DF F3 ED ED 
1a6bc     F3 EA F3 F7 
1a6c0     ED DF ED F3 | 	byte	$ed, $ed, $ea, $e4, $df, $f3, $ed, $ed, $f3, $ea, $f3, $f7, $ed, $df, $ed, $f3
1a6c4     E4 E4 ED F3 
1a6c8     EA ED EA EA 
1a6cc     EA EA EA EA 
1a6d0     EA ED E4 ED | 	byte	$e4, $e4, $ed, $f3, $ea, $ed, $ea, $ea, $ea, $ea, $ea, $ea, $ea, $ed, $e4, $ed
1a6d4     F7 F3 EA ED 
1a6d8     DF E4 EA F3 
1a6dc     FF FF EA ED 
1a6e0     FF 00 ED FF | 	byte	$f7, $f3, $ea, $ed, $df, $e4, $ea, $f3, $ff, $ff, $ea, $ed, $ff, $00, $ed, $ff
1a6e4     FF F7 ED FF 
1a6e8     00 F7 F7 00 
1a6ec     00 FF F7 F7 
1a6f0     FF 00 F7 F7 | 	byte	$ff, $f7, $ed, $ff, $00, $f7, $f7, $00, $00, $ff, $f7, $f7, $ff, $00, $f7, $f7
1a6f4     FF F7 F7 F7 
1a6f8     F3 F3 F3 ED 
1a6fc     ED ED EA ED 
1a700     ED F7 00 ED | 	byte	$ff, $f7, $f7, $f7, $f3, $f3, $f3, $ed, $ed, $ed, $ea, $ed, $ed, $f7, $00, $ed
1a704     ED F3 F3 F7 
1a708     F7 ED ED F7 
1a70c     FF ED ED FF 
1a710     F7 F7 FF FF | 	byte	$ed, $f3, $f3, $f7, $f7, $ed, $ed, $f7, $ff, $ed, $ed, $ff, $f7, $f7, $ff, $ff
1a714     F3 FF 00 ED 
1a718     F7 00 00 00 
1a71c     00 F7 F3 FF 
1a720     FF F7 F7 FF | 	byte	$f3, $ff, $00, $ed, $f7, $00, $00, $00, $00, $f7, $f3, $ff, $ff, $f7, $f7, $ff
1a724     FF FF FF F7 
1a728     FF 00 ED 00 
1a72c     F3 F7 F7 F3 
1a730     ED ED F3 ED | 	byte	$ff, $ff, $ff, $f7, $ff, $00, $ed, $00, $f3, $f7, $f7, $f3, $ed, $ed, $f3, $ed
1a734     EA EA F7 E4 
1a738     E4 ED EA E4 
1a73c     DF EA E4 DF 
1a740     E4 DF E4 DF | 	byte	$ea, $ea, $f7, $e4, $e4, $ed, $ea, $e4, $df, $ea, $e4, $df, $e4, $df, $e4, $df
1a744     D8 D6 D8 D6 
1a748     D8 DF D8 D8 
1a74c     D8 DF E4 DF 
1a750     DF DF DF EA | 	byte	$d8, $d6, $d8, $d6, $d8, $df, $d8, $d8, $d8, $df, $e4, $df, $df, $df, $df, $ea
1a754     ED EA E4 E4 
1a758     ED EA ED F7 
1a75c     ED EA ED F7 
1a760     F7 F7 ED F3 | 	byte	$ed, $ea, $e4, $e4, $ed, $ea, $ed, $f7, $ed, $ea, $ed, $f7, $f7, $f7, $ed, $f3
1a764     F3 FF F3 F7 
1a768     ED ED F7 ED 
1a76c     EA F3 ED F7 
1a770     F7 ED ED ED | 	byte	$f3, $ff, $f3, $f7, $ed, $ed, $f7, $ed, $ea, $f3, $ed, $f7, $f7, $ed, $ed, $ed
1a774     F7 ED F7 ED 
1a778     ED F7 FF FF 
1a77c     F3 ED ED F3 
1a780     F7 00 F7 ED | 	byte	$f7, $ed, $f7, $ed, $ed, $f7, $ff, $ff, $f3, $ed, $ed, $f3, $f7, $00, $f7, $ed
1a784     FF FF F7 F7 
1a788     ED F7 00 FF 
1a78c     00 ED F7 FF 
1a790     00 F7 F3 F7 | 	byte	$ff, $ff, $f7, $f7, $ed, $f7, $00, $ff, $00, $ed, $f7, $ff, $00, $f7, $f3, $f7
1a794     ED F3 00 00 
1a798     F7 ED ED F3 
1a79c     F7 F7 F7 ED 
1a7a0     ED ED F3 F3 | 	byte	$ed, $f3, $00, $00, $f7, $ed, $ed, $f3, $f7, $f7, $f7, $ed, $ed, $ed, $f3, $f3
1a7a4     E4 EA F7 ED 
1a7a8     EA F3 F7 ED 
1a7ac     ED E4 DF EA 
1a7b0     ED ED EA E4 | 	byte	$e4, $ea, $f7, $ed, $ea, $f3, $f7, $ed, $ed, $e4, $df, $ea, $ed, $ed, $ea, $e4
1a7b4     ED F3 F3 F3 
1a7b8     EA EA F7 F7 
1a7bc     ED EA ED FF 
1a7c0     F3 ED E4 ED | 	byte	$ed, $f3, $f3, $f3, $ea, $ea, $f7, $f7, $ed, $ea, $ed, $ff, $f3, $ed, $e4, $ed
1a7c4     ED ED F3 F3 
1a7c8     ED ED ED E4 
1a7cc     ED ED EA EA 
1a7d0     ED ED EA ED | 	byte	$ed, $ed, $f3, $f3, $ed, $ed, $ed, $e4, $ed, $ed, $ea, $ea, $ed, $ed, $ea, $ed
1a7d4     EA EA ED F3 
1a7d8     ED EA EA E4 
1a7dc     D8 ED F3 F3 
1a7e0     F3 ED ED F3 | 	byte	$ea, $ea, $ed, $f3, $ed, $ea, $ea, $e4, $d8, $ed, $f3, $f3, $f3, $ed, $ed, $f3
1a7e4     ED F3 FF FF 
1a7e8     ED DF FF 00 
1a7ec     F7 ED F7 FF 
1a7f0     F3 F3 F7 F7 | 	byte	$ed, $f3, $ff, $ff, $ed, $df, $ff, $00, $f7, $ed, $f7, $ff, $f3, $f3, $f7, $f7
1a7f4     F3 FF F7 F7 
1a7f8     ED ED FF F7 
1a7fc     F3 F7 FF FF 
1a800     F3 F7 ED ED | 	byte	$f3, $ff, $f7, $f7, $ed, $ed, $ff, $f7, $f3, $f7, $ff, $ff, $f3, $f7, $ed, $ed
1a804     F7 F7 F7 F3 
1a808     F7 F3 F7 00 
1a80c     00 ED F7 FF 
1a810     F7 ED F7 F7 | 	byte	$f7, $f7, $f7, $f3, $f7, $f3, $f7, $00, $00, $ed, $f7, $ff, $f7, $ed, $f7, $f7
1a814     F3 FF 00 F3 
1a818     FF FF F7 00 
1a81c     FF F7 FF 00 
1a820     F3 F3 F3 FF | 	byte	$f3, $ff, $00, $f3, $ff, $ff, $f7, $00, $ff, $f7, $ff, $00, $f3, $f3, $f3, $ff
1a824     00 00 F3 ED 
1a828     F7 00 00 F7 
1a82c     F7 F3 F7 ED 
1a830     FF 00 ED ED | 	byte	$00, $00, $f3, $ed, $f7, $00, $00, $f7, $f7, $f3, $f7, $ed, $ff, $00, $ed, $ed
1a834     F3 ED EA F3 
1a838     ED E4 DF EA 
1a83c     F3 E4 D8 E4 
1a840     DF D8 D8 D8 | 	byte	$f3, $ed, $ea, $f3, $ed, $e4, $df, $ea, $f3, $e4, $d8, $e4, $df, $d8, $d8, $d8
1a844     D6 CF D6 D6 
1a848     D8 DF D8 D6 
1a84c     CF D6 D8 D8 
1a850     E4 D6 DF D8 | 	byte	$d6, $cf, $d6, $d6, $d8, $df, $d8, $d6, $cf, $d6, $d8, $d8, $e4, $d6, $df, $d8
1a854     CF D8 ED ED 
1a858     DF E4 ED DF 
1a85c     DF EA F3 F3 
1a860     F7 F3 ED F3 | 	byte	$cf, $d8, $ed, $ed, $df, $e4, $ed, $df, $df, $ea, $f3, $f3, $f7, $f3, $ed, $f3
1a864     FF F7 F7 F3 
1a868     F3 FF 00 F7 
1a86c     F7 F7 F7 F3 
1a870     FF 00 ED F7 | 	byte	$ff, $f7, $f7, $f3, $f3, $ff, $00, $f7, $f7, $f7, $f7, $f3, $ff, $00, $ed, $f7
1a874     FF FF FF 00 
1a878     F3 FF FF F7 
1a87c     F7 FF FF F7 
1a880     F3 F7 00 F3 | 	byte	$ff, $ff, $ff, $00, $f3, $ff, $ff, $f7, $f7, $ff, $ff, $f7, $f3, $f7, $00, $f3
1a884     F7 F7 F7 F7 
1a888     F3 FF FF F7 
1a88c     ED ED F3 F7 
1a890     ED F3 F7 F7 | 	byte	$f7, $f7, $f7, $f7, $f3, $ff, $ff, $f7, $ed, $ed, $f3, $f7, $ed, $f3, $f7, $f7
1a894     ED F7 F3 F3 
1a898     F3 F7 F7 F3 
1a89c     F3 F7 FF FF 
1a8a0     FF FF 00 F3 | 	byte	$ed, $f7, $f3, $f3, $f3, $f7, $f7, $f3, $f3, $f7, $ff, $ff, $ff, $ff, $00, $f3
1a8a4     F3 F7 ED ED 
1a8a8     F7 FF F7 ED 
1a8ac     ED F3 ED ED 
1a8b0     EA ED ED F7 | 	byte	$f3, $f7, $ed, $ed, $f7, $ff, $f7, $ed, $ed, $f3, $ed, $ed, $ea, $ed, $ed, $f7
1a8b4     F7 ED EA ED 
1a8b8     EA ED E4 ED 
1a8bc     F3 ED ED EA 
1a8c0     ED ED EA ED | 	byte	$f7, $ed, $ea, $ed, $ea, $ed, $e4, $ed, $f3, $ed, $ed, $ea, $ed, $ed, $ea, $ed
1a8c4     ED E4 E4 DF 
1a8c8     ED EA EA ED 
1a8cc     EA E4 E4 DF 
1a8d0     D8 E4 E4 DF | 	byte	$ed, $e4, $e4, $df, $ed, $ea, $ea, $ed, $ea, $e4, $e4, $df, $d8, $e4, $e4, $df
1a8d4     E4 E4 D8 D8 
1a8d8     DF DF DF DF 
1a8dc     EA DF DF E4 
1a8e0     EA EA F7 ED | 	byte	$e4, $e4, $d8, $d8, $df, $df, $df, $df, $ea, $df, $df, $e4, $ea, $ea, $f7, $ed
1a8e4     EA ED ED F7 
1a8e8     F7 F7 F7 FF 
1a8ec     F7 FF 00 00 
1a8f0     F7 00 FF F7 | 	byte	$ea, $ed, $ed, $f7, $f7, $f7, $f7, $ff, $f7, $ff, $00, $00, $f7, $00, $ff, $f7
1a8f4     01 00 F7 F7 
1a8f8     00 00 FF FF 
1a8fc     00 FF 00 00 
1a900     F7 F7 FF 01 | 	byte	$01, $00, $f7, $f7, $00, $00, $ff, $ff, $00, $ff, $00, $00, $f7, $f7, $ff, $01
1a904     00 00 00 00 
1a908     00 00       | 	byte	$00[6]
1a90a     01 00 FF 01 
1a90e     01 00 00 00 
1a912     00 00 F7 FF 
1a916     00 00 F7 F7 | 	byte	$01, $00, $ff, $01, $01, $00, $00, $00, $00, $00, $f7, $ff, $00, $00, $f7, $f7
1a91a     00 00 ED F7 
1a91e     F7 ED ED ED 
1a922     ED EA EA ED 
1a926     EA E4 DF DF | 	byte	$00, $00, $ed, $f7, $f7, $ed, $ed, $ed, $ed, $ea, $ea, $ed, $ea, $e4, $df, $df
1a92a     DF DF DF E4 
1a92e     DF D8 DF D8 
1a932     CF D8 DF DF 
1a936     D8 D6 DF DF | 	byte	$df, $df, $df, $e4, $df, $d8, $df, $d8, $cf, $d8, $df, $df, $d8, $d6, $df, $df
1a93a     E4 E4 D8 D8 
1a93e     DF DF D8 DF 
1a942     E4 E4 DF DF 
1a946     E4 DF DF DF | 	byte	$e4, $e4, $d8, $d8, $df, $df, $d8, $df, $e4, $e4, $df, $df, $e4, $df, $df, $df
1a94a     D8 EA ED DF 
1a94e     DF DF DF EA 
1a952     ED ED D8 DF 
1a956     EA ED EA ED | 	byte	$d8, $ea, $ed, $df, $df, $df, $df, $ea, $ed, $ed, $d8, $df, $ea, $ed, $ea, $ed
1a95a     E4 E4 F3 ED 
1a95e     F7 F3 ED ED 
1a962     F7 FF F7 F3 
1a966     F7 00 FF F7 | 	byte	$e4, $e4, $f3, $ed, $f7, $f3, $ed, $ed, $f7, $ff, $f7, $f3, $f7, $00, $ff, $f7
1a96a     00 FF 00 FF 
1a96e     01 00 F7 00 
1a972     00 00 00 00 
1a976     01 09 00 01 | 	byte	$00, $ff, $00, $ff, $01, $00, $f7, $00, $00, $00, $00, $00, $01, $09, $00, $01
1a97a     01 00 00 FF 
1a97e     00 FF 00 01 
1a982     FF 00 00 FF 
1a986     F7 F7 F3 F7 | 	byte	$01, $00, $00, $ff, $00, $ff, $00, $01, $ff, $00, $00, $ff, $f7, $f7, $f3, $f7
1a98a     F3 F3 ED F7 
1a98e     ED ED EA EA 
1a992     ED ED ED E4 
1a996     EA ED EA ED | 	byte	$f3, $f3, $ed, $f7, $ed, $ed, $ea, $ea, $ed, $ed, $ed, $e4, $ea, $ed, $ea, $ed
1a99a     ED ED E4 E4 
1a99e     DF E4 EA E4 
1a9a2     E4 EA EA D8 
1a9a6     DF ED ED ED | 	byte	$ed, $ed, $e4, $e4, $df, $e4, $ea, $e4, $e4, $ea, $ea, $d8, $df, $ed, $ed, $ed
1a9aa     ED D8 D8 D8 
1a9ae     E4 E4 D8 DF 
1a9b2     D8 CF D8 D8 
1a9b6     D8 DF D6 D6 | 	byte	$ed, $d8, $d8, $d8, $e4, $e4, $d8, $df, $d8, $cf, $d8, $d8, $d8, $df, $d6, $d6
1a9ba     D8 DF DF DF 
1a9be     E4 E4 ED ED 
1a9c2     ED EA ED ED 
1a9c6     ED ED F3 F7 | 	byte	$d8, $df, $df, $df, $e4, $e4, $ed, $ed, $ed, $ea, $ed, $ed, $ed, $ed, $f3, $f7
1a9ca     F7 FF FF FF 
1a9ce     F7 F7 F3 F7 
1a9d2     00 FF FF F3 
1a9d6     ED F3 F7 F7 | 	byte	$f7, $ff, $ff, $ff, $f7, $f7, $f3, $f7, $00, $ff, $ff, $f3, $ed, $f3, $f7, $f7
1a9da     F3 F7 F7 F7 
1a9de     F3 ED ED FF 
1a9e2     FF F7 ED ED 
1a9e6     ED F7 FF F7 | 	byte	$f3, $f7, $f7, $f7, $f3, $ed, $ed, $ff, $ff, $f7, $ed, $ed, $ed, $f7, $ff, $f7
1a9ea     F3 F7 FF F7 
1a9ee     F7 ED F7 00 
1a9f2     00 00 F7 F3 
1a9f6     FF FF 00 00 | 	byte	$f3, $f7, $ff, $f7, $f7, $ed, $f7, $00, $00, $00, $f7, $f3, $ff, $ff, $00, $00
1a9fa     FF FF 00 FF 
1a9fe     FF F7 FF FF 
1aa02     FF FF FF F7 
1aa06     F7 F7 F3 F7 | 	byte	$ff, $ff, $00, $ff, $ff, $f7, $ff, $ff, $ff, $ff, $ff, $f7, $f7, $f7, $f3, $f7
1aa0a     F7 F3 F3 F7 
1aa0e     EA EA FF ED 
1aa12     ED ED ED E4 
1aa16     EA EA EA ED | 	byte	$f7, $f3, $f3, $f7, $ea, $ea, $ff, $ed, $ed, $ed, $ed, $e4, $ea, $ea, $ea, $ed
1aa1a     F3 F3 F7 E4 
1aa1e     D8 DF ED F3 
1aa22     ED E4 EA D8 
1aa26     EA F3 EA DF | 	byte	$f3, $f3, $f7, $e4, $d8, $df, $ed, $f3, $ed, $e4, $ea, $d8, $ea, $f3, $ea, $df
1aa2a     EA ED DF EA 
1aa2e     ED E4 D8 EA 
1aa32     EA EA ED E4 
1aa36     E4 E4 ED EA | 	byte	$ea, $ed, $df, $ea, $ed, $e4, $d8, $ea, $ea, $ea, $ed, $e4, $e4, $e4, $ed, $ea
1aa3a     ED ED ED F7 
1aa3e     F3 ED ED F7 
1aa42     FF F3 ED ED 
1aa46     F7 F7 F7 ED | 	byte	$ed, $ed, $ed, $f7, $f3, $ed, $ed, $f7, $ff, $f3, $ed, $ed, $f7, $f7, $f7, $ed
1aa4a     EA F7 F7 F7 
1aa4e     ED ED ED F7 
1aa52     FF ED F3 F7 
1aa56     F7 F7 F3 ED | 	byte	$ea, $f7, $f7, $f7, $ed, $ed, $ed, $f7, $ff, $ed, $f3, $f7, $f7, $f7, $f3, $ed
1aa5a     F3 F3 F3 F7 
1aa5e     ED EA EA F7 
1aa62     F7 F3 ED F7 
1aa66     F7 F3 F3 F7 | 	byte	$f3, $f3, $f3, $f7, $ed, $ea, $ea, $f7, $f7, $f3, $ed, $f7, $f7, $f3, $f3, $f7
1aa6a     ED ED F7 FF 
1aa6e     F3 ED F7 FF 
1aa72     F3 FF 00 00 
1aa76     FF FF F7 FF | 	byte	$ed, $ed, $f7, $ff, $f3, $ed, $f7, $ff, $f3, $ff, $00, $00, $ff, $ff, $f7, $ff
1aa7a     00 00 FF 00 
1aa7e     00 00 00 FF 
1aa82     FF FF FF F7 
1aa86     00 F7 00 00 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $f7, $00, $f7, $00, $00
1aa8a     F7 F3 F7 F7 
1aa8e     EA EA F7 F3 
1aa92     ED ED EA E4 
1aa96     ED ED D8 DF | 	byte	$f7, $f3, $f7, $f7, $ea, $ea, $f7, $f3, $ed, $ed, $ea, $e4, $ed, $ed, $d8, $df
1aa9a     ED EA EA ED 
1aa9e     EA E4 EA DF 
1aaa2     E4 EA E4 DF 
1aaa6     EA ED E4 E4 | 	byte	$ed, $ea, $ea, $ed, $ea, $e4, $ea, $df, $e4, $ea, $e4, $df, $ea, $ed, $e4, $e4
1aaaa     E4 EA ED ED 
1aaae     E4 D8 EA F3 
1aab2     ED ED E4 D8 
1aab6     E4 ED DF DF | 	byte	$e4, $ea, $ed, $ed, $e4, $d8, $ea, $f3, $ed, $ed, $e4, $d8, $e4, $ed, $df, $df
1aaba     EA ED E4 E4 
1aabe     E4 DF EA ED 
1aac2     EA EA EA ED 
1aac6     ED ED ED EA | 	byte	$ea, $ed, $e4, $e4, $e4, $df, $ea, $ed, $ea, $ea, $ea, $ed, $ed, $ed, $ed, $ea
1aaca     ED F3 ED ED 
1aace     ED E4 EA ED 
1aad2     F7 F7 F7 FF 
1aad6     F3 F7 F7 F7 | 	byte	$ed, $f3, $ed, $ed, $ed, $e4, $ea, $ed, $f7, $f7, $f7, $ff, $f3, $f7, $f7, $f7
1aada     F3 F7 F7 F7 
1aade     F7 FF F3 F3 
1aae2     F3 F7 F7 F7 
1aae6     FF 00 F3 F7 | 	byte	$f3, $f7, $f7, $f7, $f7, $ff, $f3, $f3, $f3, $f7, $f7, $f7, $ff, $00, $f3, $f7
1aaea     F3 F3 FF F7 
1aaee     F7 FF F7 F7 
1aaf2     ED F7 ED F3 
1aaf6     F7 ED EA ED | 	byte	$f3, $f3, $ff, $f7, $f7, $ff, $f7, $f7, $ed, $f7, $ed, $f3, $f7, $ed, $ea, $ed
1aafa     F3 F7 F7 F3 
1aafe     ED ED FF F7 
1ab02     F3 F7 F3 FF 
1ab06     FF FF FF F7 | 	byte	$f3, $f7, $f7, $f3, $ed, $ed, $ff, $f7, $f3, $f7, $f3, $ff, $ff, $ff, $ff, $f7
1ab0a     FF 00 FF FF 
1ab0e     F7 F3 FF F7 
1ab12     ED FF FF F3 
1ab16     ED F7 ED EA | 	byte	$ff, $00, $ff, $ff, $f7, $f3, $ff, $f7, $ed, $ff, $ff, $f3, $ed, $f7, $ed, $ea
1ab1a     ED ED ED ED 
1ab1e     ED          | 	byte	$ed[5]
1ab1f     EA E4 EA EA 
1ab23     ED E4 DF DF 
1ab27     E4 DF DF DF 
1ab2b     DF D8 D8 E4 | 	byte	$ea, $e4, $ea, $ea, $ed, $e4, $df, $df, $e4, $df, $df, $df, $df, $d8, $d8, $e4
1ab2f     DF DF DF D8 
1ab33     DF E4 D8 DF 
1ab37     EA EA E4 DF 
1ab3b     E4 DF DF EA | 	byte	$df, $df, $df, $d8, $df, $e4, $d8, $df, $ea, $ea, $e4, $df, $e4, $df, $df, $ea
1ab3f     EA E4 EA ED 
1ab43     EA EA F3 F7 
1ab47     F7 EA F3 F3 
1ab4b     ED F3 ED ED | 	byte	$ea, $e4, $ea, $ed, $ea, $ea, $f3, $f7, $f7, $ea, $f3, $f3, $ed, $f3, $ed, $ed
1ab4f     F7 FF FF 00 
1ab53     FF F7 00 00 
1ab57     FF 00 00 00 
1ab5b     00 00 00 00 | 	byte	$f7, $ff, $ff, $00, $ff, $f7, $00, $00, $ff, $00, $00, $00, $00, $00, $00, $00
1ab5f     00 00 00 00 
1ab63     00 00 00 00 
1ab67     00 00 00 00 
1ab6b     00 00 00 00 
1ab6f     00          | 	byte	$00[17]
1ab70     FF 00 00 00 
1ab74     FF 00 00 FF 
1ab78     00 FF FF FF 
1ab7c     FF F7 F7 F3 | 	byte	$ff, $00, $00, $00, $ff, $00, $00, $ff, $00, $ff, $ff, $ff, $ff, $f7, $f7, $f3
1ab80     00 FF F3 F3 
1ab84     F3 F3 FF F7 
1ab88     F3 ED ED ED 
1ab8c     ED E4 DF DF | 	byte	$00, $ff, $f3, $f3, $f3, $f3, $ff, $f7, $f3, $ed, $ed, $ed, $ed, $e4, $df, $df
1ab90     E4 E4 E4 DF 
1ab94     DF DF E4 E4 
1ab98     DF DF DF D8 
1ab9c     DF E4 E4 E4 | 	byte	$e4, $e4, $e4, $df, $df, $df, $e4, $e4, $df, $df, $df, $d8, $df, $e4, $e4, $e4
1aba0     E4 EA E4 E4 
1aba4     E4 E4 ED F7 
1aba8     F3 F7 F3 F3 
1abac     F7 FF 00 FF | 	byte	$e4, $ea, $e4, $e4, $e4, $e4, $ed, $f7, $f3, $f7, $f3, $f3, $f7, $ff, $00, $ff
1abb0     F7 FF FF 00 
1abb4     00 FF FF FF 
1abb8     00 00 FF FF 
1abbc     F7 FF FF F3 | 	byte	$f7, $ff, $ff, $00, $00, $ff, $ff, $ff, $00, $00, $ff, $ff, $f7, $ff, $ff, $f3
1abc0     F7 00 FF F3 
1abc4     F3 FF FF F3 
1abc8     F7 F7 F7 F3 
1abcc     ED F3 F3 FF | 	byte	$f7, $00, $ff, $f3, $f3, $ff, $ff, $f3, $f7, $f7, $f7, $f3, $ed, $f3, $f3, $ff
1abd0     00 FF FF F3 
1abd4     F7 FF FF FF 
1abd8     FF FF FF 00 
1abdc     00 FF FF 00 | 	byte	$00, $ff, $ff, $f3, $f7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $ff, $ff, $00
1abe0     00 FF FF FF 
1abe4     FF FF FF FF 
1abe8     F7 00 FF FF 
1abec     FF F7 F7 00 | 	byte	$00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $f7, $00, $ff, $ff, $ff, $f7, $f7, $00
1abf0     FF FF F7 F7 
1abf4     F3 F7 FF FF 
1abf8     FF F7 F3 FF 
1abfc     F3 F7 F3 FF | 	byte	$ff, $ff, $f7, $f7, $f3, $f7, $ff, $ff, $ff, $f7, $f3, $ff, $f3, $f7, $f3, $ff
1ac00     FF FF F7 F3 
1ac04     ED F3 FF F3 
1ac08     F7 F3 F3 ED 
1ac0c     ED ED ED ED | 	byte	$ff, $ff, $f7, $f3, $ed, $f3, $ff, $f3, $f7, $f3, $f3, $ed, $ed, $ed, $ed, $ed
1ac10     EA F3 F7 F3 
1ac14     ED E4 F3 F7 
1ac18     F3 F3 ED ED 
1ac1c     F3 F7 F3 F3 | 	byte	$ea, $f3, $f7, $f3, $ed, $e4, $f3, $f7, $f3, $f3, $ed, $ed, $f3, $f7, $f3, $f3
1ac20     F3 ED E4 F3 
1ac24     F7 F3 F3 F3 
1ac28     F3 F3 F3 F3 
1ac2c     F3 F3 F3 F3 | 	byte	$f3, $ed, $e4, $f3, $f7, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3
1ac30     F3 F7 F3 F7 
1ac34     F3 F3 F3 F3 
1ac38     F3 F3 F3 F3 
1ac3c     F3 F3 F3 F3 | 	byte	$f3, $f7, $f3, $f7, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3
1ac40     F7 F3 F3 F3 
1ac44     F3 F7 F7 F7 
1ac48     FF F7 F7 FF 
1ac4c     00 FF F7 FF | 	byte	$f7, $f3, $f3, $f3, $f3, $f7, $f7, $f7, $ff, $f7, $f7, $ff, $00, $ff, $f7, $ff
1ac50     FF F7 FF 00 
1ac54     00 FF F7 FF 
1ac58     00 00 FF FF 
1ac5c     00 00 FF 00 | 	byte	$ff, $f7, $ff, $00, $00, $ff, $f7, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $00
1ac60     FF 00 00 00 
1ac64     00 FF 00 00 
1ac68     00 00 00 FF 
1ac6c     F7 F7 FF FF | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $00, $00, $00, $ff, $f7, $f7, $ff, $ff
1ac70     FF F7 F7 F3 
1ac74     F7 F7 F3 F3 
1ac78     F3 F7 ED F3 
1ac7c     ED ED ED ED | 	byte	$ff, $f7, $f7, $f3, $f7, $f7, $f3, $f3, $f3, $f7, $ed, $f3, $ed, $ed, $ed, $ed
1ac80     F3 ED ED ED 
1ac84     F3 ED ED F3 
1ac88     F3 F3 F3 F3 
1ac8c     F3 ED F3 F7 | 	byte	$f3, $ed, $ed, $ed, $f3, $ed, $ed, $f3, $f3, $f3, $f3, $f3, $f3, $ed, $f3, $f7
1ac90     F7 F7 F7 F7 
1ac94     F3 F3 F7 F7 
1ac98     F7 F7 F3 F7 
1ac9c     F7 F7 F7 F7 | 	byte	$f7, $f7, $f7, $f7, $f3, $f3, $f7, $f7, $f7, $f7, $f3, $f7, $f7, $f7, $f7, $f7
1aca0     F7 F7 F7 FF 
1aca4     FF F7 F7 FF 
1aca8     FF 00 00 00 
1acac     FF FF 00 00 | 	byte	$f7, $f7, $f7, $ff, $ff, $f7, $f7, $ff, $ff, $00, $00, $00, $ff, $ff, $00, $00
1acb0     00 00 FF 00 
1acb4     00 00 00 00 
1acb8     00 00 00 FF 
1acbc     F7 FF 00 00 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $f7, $ff, $00, $00
1acc0     00 FF FF FF 
1acc4     F7 FF F7 F7 
1acc8     FF FF FF FF 
1accc     FF F3 F3 FF | 	byte	$00, $ff, $ff, $ff, $f7, $ff, $f7, $f7, $ff, $ff, $ff, $ff, $ff, $f3, $f3, $ff
1acd0     FF F7 F3 F3 
1acd4     F3 F7 F7 F7 
1acd8     F3 F3 F7 F3 
1acdc     F3 F3 F3 ED | 	byte	$ff, $f7, $f3, $f3, $f3, $f7, $f7, $f7, $f3, $f3, $f7, $f3, $f3, $f3, $f3, $ed
1ace0     F3 F3 F7 F3 
1ace4     F3 F3 F3 F7 
1ace8     F3 ED F3 F7 
1acec     F7 F3 ED F3 | 	byte	$f3, $f3, $f7, $f3, $f3, $f3, $f3, $f7, $f3, $ed, $f3, $f7, $f7, $f3, $ed, $f3
1acf0     F7 F7 F7 F3 
1acf4     F7 F7 F7 F7 
1acf8     F7 F7 F7 FF 
1acfc     FF FF FF F7 | 	byte	$f7, $f7, $f7, $f3, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $ff, $ff, $ff, $ff, $f7
1ad00     F7 FF 00 00 
1ad04     FF FF F7 FF 
1ad08     00 FF 00 00 
1ad0c     FF FF 00 00 | 	byte	$f7, $ff, $00, $00, $ff, $ff, $f7, $ff, $00, $ff, $00, $00, $ff, $ff, $00, $00
1ad10     00 00 00 FF 
1ad14     FF FF FF FF 
1ad18     FF FF FF FF 
1ad1c     FF F7 FF 00 | 	byte	$00, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $f7, $ff, $00
1ad20     FF FF FF FF 
1ad24     F7 F7 F7 FF 
1ad28     F7 F7 F7 FF 
1ad2c     F7 F7 FF F7 | 	byte	$ff, $ff, $ff, $ff, $f7, $f7, $f7, $ff, $f7, $f7, $f7, $ff, $f7, $f7, $ff, $f7
1ad30     F7 FF FF FF 
1ad34     FF FF F7 FF 
1ad38     FF F7 F7 FF 
1ad3c     FF FF F7 F7 | 	byte	$f7, $ff, $ff, $ff, $ff, $ff, $f7, $ff, $ff, $f7, $f7, $ff, $ff, $ff, $f7, $f7
1ad40     F7 FF F7 F7 
1ad44     F7 F7 F7 F7 
1ad48     F7 F7 FF F7 
1ad4c     F7 F7 F7 F7 | 	byte	$f7, $ff, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $ff, $f7, $f7, $f7, $f7, $f7
1ad50     F7 F7 F7 F7 
1ad54     F7 F7 F7    | 	byte	$f7[7]
1ad57     FF F7 F7 FF 
1ad5b     F7 F7 F7 FF 
1ad5f     FF FF FF FF 
1ad63     FF FF FF FF | 	byte	$ff, $f7, $f7, $ff, $f7, $f7, $f7, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1ad67     FF FF FF 00 
1ad6b     FF FF FF 00 
1ad6f     FF FF FF FF 
1ad73     FF FF FF FF | 	byte	$ff, $ff, $ff, $00, $ff, $ff, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1ad77     FF 00 00 00 
1ad7b     00 00 00 00 
1ad7f     00 00 00 00 
1ad83     00 00 00 00 | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ad87     00 00 00 00 
1ad8b     00 00 00 00 
1ad8f     00 00 00 00 
1ad93     00 00 00 00 
1ad97     00 00 00 00 
1ad9b     00          | 	byte	$00[21]
1ad9c     FF FF FF FF 
1ada0     00 FF FF F7 
1ada4     FF FF FF FF 
1ada8     FF FF FF FF | 	byte	$ff, $ff, $ff, $ff, $00, $ff, $ff, $f7, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1adac     F7 F7 F7 FF 
1adb0     FF FF F7 FF 
1adb4     FF F7 F7 FF 
1adb8     FF FF F7 FF | 	byte	$f7, $f7, $f7, $ff, $ff, $ff, $f7, $ff, $ff, $f7, $f7, $ff, $ff, $ff, $f7, $ff
1adbc     F7 FF FF F7 
1adc0     FF FF FF F7 
1adc4     F7 FF FF FF 
1adc8     FF FF FF FF | 	byte	$f7, $ff, $ff, $f7, $ff, $ff, $ff, $f7, $f7, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1adcc     FF FF FF FF 
1add0     FF FF FF FF 
1add4     FF FF FF FF 
1add8     FF FF FF FF 
1addc     FF FF FF FF 
1ade0     FF          | 	byte	$ff[21]
1ade1     00 FF FF FF 
1ade5     FF FF 00 00 
1ade9     FF FF 00 00 
1aded     00 00 00 00 | 	byte	$00, $ff, $ff, $ff, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $00, $00
1adf1     00 00 00 00 
1adf5     00          | 	byte	$00[5]
1adf6     FF 00 00 00 
1adfa     00 00 00 00 
1adfe     00 00 FF FF 
1ae02     00 00 00 00 | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $00, $00, $00, $00
1ae06     FF 00 00 00 
1ae0a     00 FF FF FF 
1ae0e     00 00 00 FF 
1ae12     FF FF FF FF | 	byte	$ff, $00, $00, $00, $00, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff, $ff
1ae16     FF FF FF FF 
1ae1a     FF FF FF FF 
1ae1e     FF FF FF    | 	byte	$ff[11]
1ae21     00 00 FF FF 
1ae25     FF 00 00 00 
1ae29     00 00 FF 00 
1ae2d     FF FF FF FF | 	byte	$00, $00, $ff, $ff, $ff, $00, $00, $00, $00, $00, $ff, $00, $ff, $ff, $ff, $ff
1ae31     FF FF FF 00 
1ae35     FF FF FF 00 
1ae39     FF FF FF FF 
1ae3d     FF FF FF FF | 	byte	$ff, $ff, $ff, $00, $ff, $ff, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1ae41     FF FF 00 FF 
1ae45     FF FF FF FF 
1ae49     FF FF FF FF 
1ae4d     FF FF FF 00 | 	byte	$ff, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00
1ae51     00 FF FF FF 
1ae55     FF FF FF FF 
1ae59     00 00 00 FF 
1ae5d     FF FF 00 00 | 	byte	$00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $00, $00
1ae61     00 FF FF 00 
1ae65     FF FF 00 00 
1ae69     FF 00 00 00 
1ae6d     00 00 00 00 | 	byte	$00, $ff, $ff, $00, $ff, $ff, $00, $00, $ff, $00, $00, $00, $00, $00, $00, $00
1ae71     00 00 00 00 
      ...             
1aea5     00 00 00 00 
1aea9     00 00 00 00 | 	byte	$00[60]
1aead     FF FF FF FF 
1aeb1     FF FF FF FF 
1aeb5     FF FF FF FF 
1aeb9     FF FF FF FF | 	byte	$ff[16]
1aebd     00 FF FF FF 
1aec1     FF FF FF 00 
1aec5     FF FF 00 FF 
1aec9     00 00 00 00 | 	byte	$00, $ff, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $00, $ff, $00, $00, $00, $00
1aecd     00 00 00 00 
      ...             
1af4d     00 00 00 00 
1af51     00 00 00    | 	byte	$00[135]
1af54     F7 08 E5 F0 
1af58     15 D7 20 E1 
1af5c     FF 08 28 F1 
1af60     08 DB 13 00 | 	byte	$f7, $08, $e5, $f0, $15, $d7, $20, $e1, $ff, $08, $28, $f1, $08, $db, $13, $00
1af64     0F 00 E9 00 
1af68     FF 21 10 E7 
1af6c     E0 EF 10 08 
1af70     EB E4 CF FF | 	byte	$0f, $00, $e9, $00, $ff, $21, $10, $e7, $e0, $ef, $10, $08, $eb, $e4, $cf, $ff
1af74     17 00 FF F2 
1af78     F8 FF 00 D7 
1af7c     F0 D7 10 0B 
1af80     00 00 BF 00 | 	byte	$17, $00, $ff, $f2, $f8, $ff, $00, $d7, $f0, $d7, $10, $0b, $00, $00, $bf, $00
1af84     F7 E8 1F D0 
1af88     27 00 E3 00 
1af8c     ED 1F 1B 00 
1af90     0F 00 1B DD | 	byte	$f7, $e8, $1f, $d0, $27, $00, $e3, $00, $ed, $1f, $1b, $00, $0f, $00, $1b, $dd
1af94     F8 FF 00 17 
1af98     09 00 EB E5 
1af9c     E6 2A F7 00 
1afa0     FB DF 20 DF | 	byte	$f8, $ff, $00, $17, $09, $00, $eb, $e5, $e6, $2a, $f7, $00, $fb, $df, $20, $df
1afa4     00 E7 0E 07 
1afa8     14 FE E4 FF 
1afac     D0 FF 01 20 
1afb0     DC F3 E4 FD | 	byte	$00, $e7, $0e, $07, $14, $fe, $e4, $ff, $d0, $ff, $01, $20, $dc, $f3, $e4, $fd
1afb4     F7 00 15 F8 
1afb8     D6 34 ED 18 
1afbc     F3 E0 1F 08 
1afc0     20 E7 08 E7 | 	byte	$f7, $00, $15, $f8, $d6, $34, $ed, $18, $f3, $e0, $1f, $08, $20, $e7, $08, $e7
1afc4     E0 F7 FC 07 
1afc8     00 30 C9 0A 
1afcc     BF 08 FF F1 
1afd0     00 FF F1 14 | 	byte	$e0, $f7, $fc, $07, $00, $30, $c9, $0a, $bf, $08, $ff, $f1, $00, $ff, $f1, $14
1afd4     E0 F9 F3 FF 
1afd8     18 11 F0 CF 
1afdc     FC F8 FF C1 
1afe0     30 DF 08 00 | 	byte	$e0, $f9, $f3, $ff, $18, $11, $f0, $cf, $fc, $f8, $ff, $c1, $30, $df, $08, $00
1afe4     FF F0 FF FB 
1afe8     40 FF F0 E0 
1afec     FF 14 F7 1F 
1aff0     00 FF 00 FC | 	byte	$ff, $f0, $ff, $fb, $40, $ff, $f0, $e0, $ff, $14, $f7, $1f, $00, $ff, $00, $fc
1aff4     FF E4 FB 08 
1aff8     EB 1F A0 2C 
1affc     E7 E0 40 DF 
1b000     F0 FF 0C F7 | 	byte	$ff, $e4, $fb, $08, $eb, $1f, $a0, $2c, $e7, $e0, $40, $df, $f0, $ff, $0c, $f7
1b004     F0 F7 DB 00 
1b008     0F 10 DF F0 
1b00c     E7 0F 10 FD 
1b010     F8 CB 1B 04 | 	byte	$f0, $f7, $db, $00, $0f, $10, $df, $f0, $e7, $0f, $10, $fd, $f8, $cb, $1b, $04
1b014     0F 00 CF FF 
1b018     2F 00 00 EF 
1b01c     D7 1F 17 20 
1b020     F3 FA DE F7 | 	byte	$0f, $00, $cf, $ff, $2f, $00, $00, $ef, $d7, $1f, $17, $20, $f3, $fa, $de, $f7
1b024     0B E8 EF F1 
1b028     0B 19 10 CA 
1b02c     FF EF F4 20 
1b030     F7 00 F8 DF | 	byte	$0b, $e8, $ef, $f1, $0b, $19, $10, $ca, $ff, $ef, $f4, $20, $f7, $00, $f8, $df
1b034     E0 20 FF 00 
1b038     EF 08 0C 01 
1b03c     F0 FF F2 0B 
1b040     FD 14 00 F0 | 	byte	$e0, $20, $ff, $00, $ef, $08, $0c, $01, $f0, $ff, $f2, $0b, $fd, $14, $00, $f0
1b044     EF F7 14 FF 
1b048     05 00 F8 DF 
1b04c     E0 1F D7 F8 
1b050     17 E0 FF D7 | 	byte	$ef, $f7, $14, $ff, $05, $00, $f8, $df, $e0, $1f, $d7, $f8, $17, $e0, $ff, $d7
1b054     08 EB 00 EF 
1b058     00 1F 08 CB 
1b05c     FD 04 EF 20 
1b060     F0 F5 FE 23 | 	byte	$08, $eb, $00, $ef, $00, $1f, $08, $cb, $fd, $04, $ef, $20, $f0, $f5, $fe, $23
1b064     0A E2 0F 07 
1b068     00 0F 22 D7 
1b06c     08 EB F8 16 
1b070     FB 0C E4 15 | 	byte	$0a, $e2, $0f, $07, $00, $0f, $22, $d7, $08, $eb, $f8, $16, $fb, $0c, $e4, $15
1b074     E0 EF 0B F0 
1b078     EF EC FF F8 
1b07c     E7 FA E5 EC 
1b080     FF 10 FF F8 | 	byte	$e0, $ef, $0b, $f0, $ef, $ec, $ff, $f8, $e7, $fa, $e5, $ec, $ff, $10, $ff, $f8
1b084     DC FF 00 FB 
1b088     10 E3 F7 22 
1b08c     D5 35 00 DF 
1b090     28 F3 FB 1D | 	byte	$dc, $ff, $00, $fb, $10, $e3, $f7, $22, $d5, $35, $00, $df, $28, $f3, $fb, $1d
1b094     E0 18 EF FB 
1b098     30 EF FC 00 
1b09c     D7 0E 11 E8 
1b0a0     00 EF 10 E7 | 	byte	$e0, $18, $ef, $fb, $30, $ef, $fc, $00, $d7, $0e, $11, $e8, $00, $ef, $10, $e7
1b0a4     00 0C D5 09 
1b0a8     FF F8 17 D7 
1b0ac     08 EF 05 04 
1b0b0     FF 00 FF DF | 	byte	$00, $0c, $d5, $09, $ff, $f8, $17, $d7, $08, $ef, $05, $04, $ff, $00, $ff, $df
1b0b4     20 F7 FF 08 
1b0b8     FF F0 F1 10 
1b0bc     FF E8 FF ED 
1b0c0     17 00 D0 1E | 	byte	$20, $f7, $ff, $08, $ff, $f0, $f1, $10, $ff, $e8, $ff, $ed, $17, $00, $d0, $1e
1b0c4     DC F5 1B 00 
1b0c8     07 F0 EF F4 
1b0cc     18 01 D5 02 
1b0d0     EF 19 00 1D | 	byte	$dc, $f5, $1b, $00, $07, $f0, $ef, $f4, $18, $01, $d5, $02, $ef, $19, $00, $1d
1b0d4     D0 07 F7 08 
1b0d8     0B F0 E7 E5 
1b0dc     1F F6 F8 FF 
1b0e0     F1 F6 06 07 | 	byte	$d0, $07, $f7, $08, $0b, $f0, $e7, $e5, $1f, $f6, $f8, $ff, $f1, $f6, $06, $07
1b0e4     00 F3 ED 03 
1b0e8     FF 20 EB F8 
1b0ec     0D F9 08 10 
1b0f0     D7 0A FF 0C | 	byte	$00, $f3, $ed, $03, $ff, $20, $eb, $f8, $0d, $f9, $08, $10, $d7, $0a, $ff, $0c
1b0f4     00 E8 EF 00 
1b0f8     FB 00 0C E0 
1b0fc     FF E9 06 DD 
1b100     FF 13 E8 05 | 	byte	$00, $e8, $ef, $00, $fb, $00, $0c, $e0, $ff, $e9, $06, $dd, $ff, $13, $e8, $05
1b104     E7 F4 EF 14 
1b108     DF 08 FF F8 
1b10c     F0 FF 04 EF 
1b110     F4 23 00 08 | 	byte	$e7, $f4, $ef, $14, $df, $08, $ff, $f8, $f0, $ff, $04, $ef, $f4, $23, $00, $08
1b114     EB 07 00 FF 
1b118     20 FD 00 EB 
1b11c     00 EF 1E EB 
1b120     02 EF 10 ED | 	byte	$eb, $07, $00, $ff, $20, $fd, $00, $eb, $00, $ef, $1e, $eb, $02, $ef, $10, $ed
1b124     08 F6 E7 00 
1b128     EF 09 00 EF 
1b12c     F8 F4 FF F8 
1b130     FC E8 FF 00 | 	byte	$08, $f6, $e7, $00, $ef, $09, $00, $ef, $f8, $f4, $ff, $f8, $fc, $e8, $ff, $00
1b134     09 FF 00 FD 
1b138     EF 0A F7 00 
1b13c     04 00 F9 EB 
1b140     1F E8 0F F7 | 	byte	$09, $ff, $00, $fd, $ef, $0a, $f7, $00, $04, $00, $f9, $eb, $1f, $e8, $0f, $f7
1b144     F7 10 E7 EE 
1b148     FF F0 F7 F7 
1b14c     08 02 F7 E8 
1b150     EF 02 1A E9 | 	byte	$f7, $10, $e7, $ee, $ff, $f0, $f7, $f7, $08, $02, $f7, $e8, $ef, $02, $1a, $e9
1b154     00 05 E9 07 
1b158     00 FF 00 FF 
1b15c     08 02 FA FF 
1b160     F9 F4 FF F6 | 	byte	$00, $05, $e9, $07, $00, $ff, $00, $ff, $08, $02, $fa, $ff, $f9, $f4, $ff, $f6
1b164     FE F2 FF 00 
1b168     E7 06 F0 FF 
1b16c     FB 04 E0 FC 
1b170     0F 00 EC FF | 	byte	$fe, $f2, $ff, $00, $e7, $06, $f0, $ff, $fb, $04, $e0, $fc, $0f, $00, $ec, $ff
1b174     00 EF 0F 00 
1b178     F3 F8 F9 08 
1b17c     FA 13 F0 E9 
1b180     07 08 09 F0 | 	byte	$00, $ef, $0f, $00, $f3, $f8, $f9, $08, $fa, $13, $f0, $e9, $07, $08, $09, $f0
1b184     EB 03 FC FF 
1b188     00 F2 EF 00 
1b18c     FD FF 00 FD 
1b190     EF F8 07 EC | 	byte	$eb, $03, $fc, $ff, $00, $f2, $ef, $00, $fd, $ff, $00, $fd, $ef, $f8, $07, $ec
1b194     EE 0F 00 FF 
1b198     F0 0F F4 F3 
1b19c     0B 02 ED FF 
1b1a0     04 F7 10 EC | 	byte	$ee, $0f, $00, $ff, $f0, $0f, $f4, $f3, $0b, $02, $ed, $ff, $04, $f7, $10, $ec
1b1a4     F7 FF 0A 0C 
1b1a8     E5 06 F6 F0 
1b1ac     0F E6 00 FF 
1b1b0     F0 00 07 F0 | 	byte	$f7, $ff, $0a, $0c, $e5, $06, $f6, $f0, $0f, $e6, $00, $ff, $f0, $00, $07, $f0
1b1b4     FC F3 03 08 
1b1b8     E9 F0 EF 26 
1b1bc     F0 FF F7 04 
1b1c0     04 EF 08 FD | 	byte	$fc, $f3, $03, $08, $e9, $f0, $ef, $26, $f0, $ff, $f7, $04, $04, $ef, $08, $fd
1b1c4     10 EB FC FF 
1b1c8     14 F0 ED 16 
1b1cc     E8 05 F8 FB 
1b1d0     F2 07 00 E1 | 	byte	$10, $eb, $fc, $ff, $14, $f0, $ed, $16, $e8, $05, $f8, $fb, $f2, $07, $00, $e1
1b1d4     0C F7 00 F0 
1b1d8     EF FF 00 EF 
1b1dc     FF 08 ED FF 
1b1e0     05 F2 FF F8 | 	byte	$0c, $f7, $00, $f0, $ef, $ff, $00, $ef, $ff, $08, $ed, $ff, $05, $f2, $ff, $f8
1b1e4     F8 F7 1B F0 
1b1e8     FD 00 FF 03 
1b1ec     FB 04 0F E8 
1b1f0     FF 00 F7 F5 | 	byte	$f8, $f7, $1b, $f0, $fd, $00, $ff, $03, $fb, $04, $0f, $e8, $ff, $00, $f7, $f5
1b1f4     06 F2 FF 00 
1b1f8     E7 F0 07 05 
1b1fc     E0 0C F3 04 
1b200     F5 E9 0F F4 | 	byte	$06, $f2, $ff, $00, $e7, $f0, $07, $05, $e0, $0c, $f3, $04, $f5, $e9, $0f, $f4
1b204     FC F5 0A FA 
1b208     FE E4 F3 0F 
1b20c     04 FE EF 0A 
1b210     F1 08 F8 FB | 	byte	$fc, $f5, $0a, $fa, $fe, $e4, $f3, $0f, $04, $fe, $ef, $0a, $f1, $08, $f8, $fb
1b214     10 FF F8 FB 
1b218     04 FB F2 F9 
1b21c     07 04 F1 F7 
1b220     F4 FF F0 EF | 	byte	$10, $ff, $f8, $fb, $04, $fb, $f2, $f9, $07, $04, $f1, $f7, $f4, $ff, $f0, $ef
1b224     18 F8 F0 F5 
1b228     03 F8 FB FF 
1b22c     00 F3 07 08 
1b230     E7 08 E6 0B | 	byte	$18, $f8, $f0, $f5, $03, $f8, $fb, $ff, $00, $f3, $07, $08, $e7, $08, $e6, $0b
1b234     03 04 F9 EB 
1b238     FF 03 03 10 
1b23c     E2 05 00 FF 
1b240     FA FB F9 0A | 	byte	$03, $04, $f9, $eb, $ff, $03, $03, $10, $e2, $05, $00, $ff, $fa, $fb, $f9, $0a
1b244     EB 1A E8 06 
1b248     F7 F4 FF 06 
1b24c     00 FB E9 1B 
1b250     F8 ED 06 F8 | 	byte	$eb, $1a, $e8, $06, $f7, $f4, $ff, $06, $00, $fb, $e9, $1b, $f8, $ed, $06, $f8
1b254     0B F0 EF F8 
1b258     0C F8 FF F3 
1b25c     03 00 F8 FD 
1b260     00 F9 E4 F7 | 	byte	$0b, $f0, $ef, $f8, $0c, $f8, $ff, $f3, $03, $00, $f8, $fd, $00, $f9, $e4, $f7
1b264     17 F0 00 E7 
1b268     03 00 0F EE 
1b26c     FC FF F8 FA 
1b270     0F 10 E6 FB | 	byte	$17, $f0, $00, $e7, $03, $00, $0f, $ee, $fc, $ff, $f8, $fa, $0f, $10, $e6, $fb
1b274     13 08 02 E7 
1b278     FB F7 03 F8 
1b27c     F8 F9 FC FD 
1b280     00 FF F0 FC | 	byte	$13, $08, $02, $e7, $fb, $f7, $03, $f8, $f8, $f9, $fc, $fd, $00, $ff, $f0, $fc
1b284     DB 24 05 F0 
1b288     EF F8 0A F8 
1b28c     FA F9 01 FB 
1b290     00 FB 01 F8 | 	byte	$db, $24, $05, $f0, $ef, $f8, $0a, $f8, $fa, $f9, $01, $fb, $00, $fb, $01, $f8
1b294     EF 08 17 F0 
1b298     FF EC 07 08 
1b29c     F8 F2 FF F8 
1b2a0     F8 FC F9 F4 | 	byte	$ef, $08, $17, $f0, $ff, $ec, $07, $08, $f8, $f2, $ff, $f8, $f8, $fc, $f9, $f4
1b2a4     07 F0 07 00 
1b2a8     FA EA FF 00 
1b2ac     F4 FC EF 10 
1b2b0     F7 08 F0 FD | 	byte	$07, $f0, $07, $00, $fa, $ea, $ff, $00, $f4, $fc, $ef, $10, $f7, $08, $f0, $fd
1b2b4     FE 00 F3 FB 
1b2b8     09 F4 FF FA 
1b2bc     FA F9 08 00 
1b2c0     F3 05 F4 01 | 	byte	$fe, $00, $f3, $fb, $09, $f4, $ff, $fa, $fa, $f9, $08, $00, $f3, $05, $f4, $01
1b2c4     EF 11 EC FF 
1b2c8     F8 0B F8 F8 
1b2cc     E7 F7 0F FA 
1b2d0     00 ED 00 F7 | 	byte	$ef, $11, $ec, $ff, $f8, $0b, $f8, $f8, $e7, $f7, $0f, $fa, $00, $ed, $00, $f7
1b2d4     03 00 F6 07 
1b2d8     EC 0F FC FA 
1b2dc     F0 EF 04 01 
1b2e0     07 F4 F9 F7 | 	byte	$03, $00, $f6, $07, $ec, $0f, $fc, $fa, $f0, $ef, $04, $01, $07, $f4, $f9, $f7
1b2e4     0C ED FF FC 
1b2e8     EF 06 ED 05 
1b2ec     00 F7 00 FF 
1b2f0     10 F2 F3 02 | 	byte	$0c, $ed, $ff, $fc, $ef, $06, $ed, $05, $00, $f7, $00, $ff, $10, $f2, $f3, $02
1b2f4     F8 FF FB FC 
1b2f8     07 F4 F7 08 
1b2fc     FE F5 F4 08 
1b300     07 00 EF FB | 	byte	$f8, $ff, $fb, $fc, $07, $f4, $f7, $08, $fe, $f5, $f4, $08, $07, $00, $ef, $fb
1b304     00 0C E8 07 
1b308     F3 04 F9 FD 
1b30c     FC F9 FA F4 
1b310     FD 0C F4 F3 | 	byte	$00, $0c, $e8, $07, $f3, $04, $f9, $fd, $fc, $f9, $fa, $f4, $fd, $0c, $f4, $f3
1b314     FF 00 F7 F8 
1b318     F7 FF 04 F1 
1b31c     FF FB 14 E3 
1b320     FF FD 0C F3 | 	byte	$ff, $00, $f7, $f8, $f7, $ff, $04, $f1, $ff, $fb, $14, $e3, $ff, $fd, $0c, $f3
1b324     FD F2 07 00 
1b328     FB 0C FE 00 
1b32c     EC 02 09 00 
1b330     E9 FD 02 FC | 	byte	$fd, $f2, $07, $00, $fb, $0c, $fe, $00, $ec, $02, $09, $00, $e9, $fd, $02, $fc
1b334     02 F9 F8 FC 
1b338     05 00 F5 00 
1b33c     EC F8 FF FC 
1b340     FD F2 F6 F9 | 	byte	$02, $f9, $f8, $fc, $05, $00, $f5, $00, $ec, $f8, $ff, $fc, $fd, $f2, $f6, $f9
1b344     FF F8 F7 F9 
1b348     04 F3 FF F8 
1b34c     FF F7 03 03 
1b350     F8 FD 03 FC | 	byte	$ff, $f8, $f7, $f9, $04, $f3, $ff, $f8, $ff, $f7, $03, $03, $f8, $fd, $03, $fc
1b354     FF 03 F6 0A 
1b358     FD 03 00 EF 
1b35c     08 F3 FD 0C 
1b360     E7 F0 FF F9 | 	byte	$ff, $03, $f6, $0a, $fd, $03, $00, $ef, $08, $f3, $fd, $0c, $e7, $f0, $ff, $f9
1b364     FB FF F2 F2 
1b368     FB 0B F8 EF 
1b36c     F4 F7 04 FC 
1b370     FC F8 FB 00 | 	byte	$fb, $ff, $f2, $f2, $fb, $0b, $f8, $ef, $f4, $f7, $04, $fc, $fc, $f8, $fb, $00
1b374     FF 08 F6 FB 
1b378     00 F5 10 0A 
1b37c     E6 FF FB 0B 
1b380     01 FF 00 FF | 	byte	$ff, $08, $f6, $fb, $00, $f5, $10, $0a, $e6, $ff, $fb, $0b, $01, $ff, $00, $ff
1b384     F9 03 F0 07 
1b388     F8 EF FD 01 
1b38c     FA EC F1 FF 
1b390     FD 00 F7 F4 | 	byte	$f9, $03, $f0, $07, $f8, $ef, $fd, $01, $fa, $ec, $f1, $ff, $fd, $00, $f7, $f4
1b394     FD F8 FC FD 
1b398     00 03 FC FA 
1b39c     02 F3 FF F9 
1b3a0     0B 00 01 FA | 	byte	$fd, $f8, $fc, $fd, $00, $03, $fc, $fa, $02, $f3, $ff, $f9, $0b, $00, $01, $fa
1b3a4     FD FC FC F7 
1b3a8     0F 00 F7 FE 
1b3ac     FC FE 00 F9 
1b3b0     FB 02 00 F4 | 	byte	$fd, $fc, $fc, $f7, $0f, $00, $f7, $fe, $fc, $fe, $00, $f9, $fb, $02, $00, $f4
1b3b4     FF F7 F8 F7 
1b3b8     06 FA F9 F4 
1b3bc     EF 02 FE 00 
1b3c0     F5 FC 07 F9 | 	byte	$ff, $f7, $f8, $f7, $06, $fa, $f9, $f4, $ef, $02, $fe, $00, $f5, $fc, $07, $f9
1b3c4     F4 F7 03 F7 
1b3c8     03 FD 00 F5 
1b3cc     FC FF FF 00 
1b3d0     EF FF FC 0C | 	byte	$f4, $f7, $03, $f7, $03, $fd, $00, $f5, $fc, $ff, $ff, $00, $ef, $ff, $fc, $0c
1b3d4     F7 F9 00 FF 
1b3d8     08 FC F8 FD 
1b3dc     02 FE F8 FA 
1b3e0     F9 00 F9 05 | 	byte	$f7, $f9, $00, $ff, $08, $fc, $f8, $fd, $02, $fe, $f8, $fa, $f9, $00, $f9, $05
1b3e4     F8 F3 FC FA 
1b3e8     FC F3 FA FC 
1b3ec     FC FC 00 F0 
1b3f0     FF 02 F7 03 | 	byte	$f8, $f3, $fc, $fa, $fc, $f3, $fa, $fc, $fc, $fc, $00, $f0, $ff, $02, $f7, $03
1b3f4     00 F2 FB FB 
1b3f8     02 00 FE FB 
1b3fc     FB 08 FA F6 
1b400     FB 01 FB 00 | 	byte	$00, $f2, $fb, $fb, $02, $00, $fe, $fb, $fb, $08, $fa, $f6, $fb, $01, $fb, $00
1b404     FB 06 F6 FF 
1b408     FC 00 FE F8 
1b40c     FF F8 FA F9 
1b410     F3 01 01 00 | 	byte	$fb, $06, $f6, $ff, $fc, $00, $fe, $f8, $ff, $f8, $fa, $f9, $f3, $01, $01, $00
1b414     F1 FD FD 00 
1b418     F2 FD 00 FE 
1b41c     00 FC 03 F4 
1b420     F9 01 FE 07 | 	byte	$f1, $fd, $fd, $00, $f2, $fd, $00, $fe, $00, $fc, $03, $f4, $f9, $01, $fe, $07
1b424     00 EF FF 05 
1b428     00 FD 02 ED 
1b42c     00 FF 00 F7 
1b430     F8 F7 F8 07 | 	byte	$00, $ef, $ff, $05, $00, $fd, $02, $ed, $00, $ff, $00, $f7, $f8, $f7, $f8, $07
1b434     FC F4 F5 FF 
1b438     FA FB FA FB 
1b43c     FB FD 00 F9 
1b440     F5 FF FC FF | 	byte	$fc, $f4, $f5, $ff, $fa, $fb, $fa, $fb, $fb, $fd, $00, $f9, $f5, $ff, $fc, $ff
1b444     01 FC F6 FD 
1b448     00 FC FB FA 
1b44c     00 FD 00 FA 
1b450     F7 FE 03 FA | 	byte	$01, $fc, $f6, $fd, $00, $fc, $fb, $fa, $00, $fd, $00, $fa, $f7, $fe, $03, $fa
1b454     FE F6 FC FE 
1b458     FE F8 FC F6 
1b45c     FF 00 FF F9 
1b460     ED 07 FE 01 | 	byte	$fe, $f6, $fc, $fe, $fe, $f8, $fc, $f6, $ff, $00, $ff, $f9, $ed, $07, $fe, $01
1b464     FD F0 FD 00 
1b468     FF F8 02 F6 
1b46c     FF FC 00 FF 
1b470     FA F6 FD 07 | 	byte	$fd, $f0, $fd, $00, $ff, $f8, $02, $f6, $ff, $fc, $00, $ff, $fa, $f6, $fd, $07
1b474     00 F5 F7 FF 
1b478     FF 00 FB 00 
1b47c     FE F5 FA FC 
1b480     FC FD FA FF | 	byte	$00, $f5, $f7, $ff, $ff, $00, $fb, $00, $fe, $f5, $fa, $fc, $fc, $fd, $fa, $ff
1b484     01 F8 ED 03 
1b488     00 FC FA FD 
1b48c     00 FE F8 F9 
1b490     00 FD F9 FE | 	byte	$01, $f8, $ed, $03, $00, $fc, $fa, $fd, $00, $fe, $f8, $f9, $00, $fd, $f9, $fe
1b494     FF FA F9 00 
1b498     FF 00 00 F8 
1b49c     FC 03 F8 FC 
1b4a0     F7 00 FE FC | 	byte	$ff, $fa, $f9, $00, $ff, $00, $00, $f8, $fc, $03, $f8, $fc, $f7, $00, $fe, $fc
1b4a4     00 FE F8 FB 
1b4a8     F9 FE FD FC 
1b4ac     F6 03 00 ED 
1b4b0     FD FF 04 F9 | 	byte	$00, $fe, $f8, $fb, $f9, $fe, $fd, $fc, $f6, $03, $00, $ed, $fd, $ff, $04, $f9
1b4b4     FE 00 FA F7 
1b4b8     00 F6 FF FF 
1b4bc     FC FE FE FC 
1b4c0     F9 FC 05 FC | 	byte	$fe, $00, $fa, $f7, $00, $f6, $ff, $ff, $fc, $fe, $fe, $fc, $f9, $fc, $05, $fc
1b4c4     FB FA F7 FE 
1b4c8     FD FC FB 01 
1b4cc     FA FE FD F9 
1b4d0     FD FC FD FF | 	byte	$fb, $fa, $f7, $fe, $fd, $fc, $fb, $01, $fa, $fe, $fd, $f9, $fd, $fc, $fd, $ff
1b4d4     FE F7 01 FC 
1b4d8     FB FC F9 FF 
1b4dc     FF 00 F8 FB 
1b4e0     00 F8 00 FA | 	byte	$fe, $f7, $01, $fc, $fb, $fc, $f9, $ff, $ff, $00, $f8, $fb, $00, $f8, $00, $fa
1b4e4     F4 FF 00 FE 
1b4e8     F8 FC FB 03 
1b4ec     FC 02 F8 F9 
1b4f0     FC FD 05 F8 | 	byte	$f4, $ff, $00, $fe, $f8, $fc, $fb, $03, $fc, $02, $f8, $f9, $fc, $fd, $05, $f8
1b4f4     FC F3 03 00 
1b4f8     00 F3 FB 00 
1b4fc     FF FD FD F8 
1b500     FB FC FD FC | 	byte	$fc, $f3, $03, $00, $00, $f3, $fb, $00, $ff, $fd, $fd, $f8, $fb, $fc, $fd, $fc
1b504     FE F7 FE 00 
1b508     FE FC F7 F9 
1b50c     FF 00 FF FC 
1b510     FB F8 FF 00 | 	byte	$fe, $f7, $fe, $00, $fe, $fc, $f7, $f9, $ff, $00, $ff, $fc, $fb, $f8, $ff, $00
1b514     FD 00 F9 FE 
1b518     FB 00 FA FA 
1b51c     FF FC FA FC 
1b520     FF FA F3 00 | 	byte	$fd, $00, $f9, $fe, $fb, $00, $fa, $fa, $ff, $fc, $fa, $fc, $ff, $fa, $f3, $00
1b524     FF FB F9 FB 
1b528     FB 01 F8 FF 
1b52c     FC FF FA F8 
1b530     FF 03 FA F7 | 	byte	$ff, $fb, $f9, $fb, $fb, $01, $f8, $ff, $fc, $ff, $fa, $f8, $ff, $03, $fa, $f7
1b534     FF 02 FC F7 
1b538     00 FC 01 FC 
1b53c     F9 00 FB FC 
1b540     FA 02 FA FA | 	byte	$ff, $02, $fc, $f7, $00, $fc, $01, $fc, $f9, $00, $fb, $fc, $fa, $02, $fa, $fa
1b544     F8 FD FF 00 
1b548     F4 FB FE F9 
1b54c     02 FB F8 F9 
1b550     F8 03 F8 FF | 	byte	$f8, $fd, $ff, $00, $f4, $fb, $fe, $f9, $02, $fb, $f8, $f9, $f8, $03, $f8, $ff
1b554     F6 FC FF FE 
1b558     FA FB 01 FE 
1b55c     FD FE 00 F9 
1b560     FA FC 03 FE | 	byte	$f6, $fc, $ff, $fe, $fa, $fb, $01, $fe, $fd, $fe, $00, $f9, $fa, $fc, $03, $fe
1b564     FB FA FF 00 
1b568     F9 F7 FF FE 
1b56c     FA FA FB FE 
1b570     F8 FC FF FC | 	byte	$fb, $fa, $ff, $00, $f9, $f7, $ff, $fe, $fa, $fa, $fb, $fe, $f8, $fc, $ff, $fc
1b574     FE FA FE 00 
1b578     FC F4 FF FC 
1b57c     FE FB 00 F9 
1b580     FF FE FE FC | 	byte	$fe, $fa, $fe, $00, $fc, $f4, $ff, $fc, $fe, $fb, $00, $f9, $ff, $fe, $fe, $fc
1b584     FD FE 00 FD 
1b588     FE F8 FB FE 
1b58c     FE FF FC FB 
1b590     FD FB FA FE | 	byte	$fd, $fe, $00, $fd, $fe, $f8, $fb, $fe, $fe, $ff, $fc, $fb, $fd, $fb, $fa, $fe
1b594     FE F9 FC FF 
1b598     00 F8 FD FC 
1b59c     FB FF FE FB 
1b5a0     00 FA F7 02 | 	byte	$fe, $f9, $fc, $ff, $00, $f8, $fd, $fc, $fb, $ff, $fe, $fb, $00, $fa, $f7, $02
1b5a4     FD FC FB FB 
1b5a8     FB FE 00 FB 
1b5ac     FB FB FF FD 
1b5b0     00 FE F5 FD | 	byte	$fd, $fc, $fb, $fb, $fb, $fe, $00, $fb, $fb, $fb, $ff, $fd, $00, $fe, $f5, $fd
1b5b4     FF 00 FB FB 
1b5b8     FC FA FE 00 
1b5bc     FC FC FD F8 
1b5c0     00 FC F7 F9 | 	byte	$ff, $00, $fb, $fb, $fc, $fa, $fe, $00, $fc, $fc, $fd, $f8, $00, $fc, $f7, $f9
1b5c4     FD FB FF FE 
1b5c8     FF FA FE FB 
1b5cc     FE 00 F9 FE 
1b5d0     FC 00 FA FA | 	byte	$fd, $fb, $ff, $fe, $ff, $fa, $fe, $fb, $fe, $00, $f9, $fe, $fc, $00, $fa, $fa
1b5d4     FC 00 FC FB 
1b5d8     FA FE FE FD 
1b5dc     FC FE FE FE 
1b5e0     FF 00 F8 FB | 	byte	$fc, $00, $fc, $fb, $fa, $fe, $fe, $fd, $fc, $fe, $fe, $fe, $ff, $00, $f8, $fb
1b5e4     F8 03 00 FA 
1b5e8     F7 FD FE 00 
1b5ec     F8 FD FB F9 
1b5f0     FC FE FD F8 | 	byte	$f8, $03, $00, $fa, $f7, $fd, $fe, $00, $f8, $fd, $fb, $f9, $fc, $fe, $fd, $f8
1b5f4     F9 02 FF 00 
1b5f8     F9 F8 FE FF 
1b5fc     FF FE FE FA 
1b600     FE FC 00 FC | 	byte	$f9, $02, $ff, $00, $f9, $f8, $fe, $ff, $ff, $fe, $fe, $fa, $fe, $fc, $00, $fc
1b604     FB F9 FF 00 
1b608     FE FB FA FF 
1b60c     FB FC FE F8 
1b610     FE F9 FC FF | 	byte	$fb, $f9, $ff, $00, $fe, $fb, $fa, $ff, $fb, $fc, $fe, $f8, $fe, $f9, $fc, $ff
1b614     FC F8 FD FE 
1b618     FF FD FC FC 
1b61c     FE FA FE FF 
1b620     FE FA F6 FE | 	byte	$fc, $f8, $fd, $fe, $ff, $fd, $fc, $fc, $fe, $fa, $fe, $ff, $fe, $fa, $f6, $fe
1b624     01 FC FF FC 
1b628     FE FE FC FD 
1b62c     FC F9 FF FE 
1b630     00 00 F5 FC | 	byte	$01, $fc, $ff, $fc, $fe, $fe, $fc, $fd, $fc, $f9, $ff, $fe, $00, $00, $f5, $fc
1b634     FC FF FF FE 
1b638     FA FC FA FE 
1b63c     FA FB FC FE 
1b640     FE FE FD F9 | 	byte	$fc, $ff, $ff, $fe, $fa, $fc, $fa, $fe, $fa, $fb, $fc, $fe, $fe, $fe, $fd, $f9
1b644     FD FB 00 FF 
1b648     FA FE F9 FA 
1b64c     FF 00 FD 00 
1b650     FC FA FC FB | 	byte	$fd, $fb, $00, $ff, $fa, $fe, $f9, $fa, $ff, $00, $fd, $00, $fc, $fa, $fc, $fb
1b654     FD FB FF 00 
1b658     FE 00 F8 FC 
1b65c     FC 00 FF FC 
1b660     FB FD FB FA | 	byte	$fd, $fb, $ff, $00, $fe, $00, $f8, $fc, $fc, $00, $ff, $fc, $fb, $fd, $fb, $fa
1b664     FE FD FC FB 
1b668     FC FA FC FC 
1b66c     FB FB FD FE 
1b670     FF FC FB FD | 	byte	$fe, $fd, $fc, $fb, $fc, $fa, $fc, $fc, $fb, $fb, $fd, $fe, $ff, $fc, $fb, $fd
1b674     FD 01 FE FE 
1b678     F8 FF FE 00 
1b67c     FC FD F7 FC 
1b680     00 FF FC F8 | 	byte	$fd, $01, $fe, $fe, $f8, $ff, $fe, $00, $fc, $fd, $f7, $fc, $00, $ff, $fc, $f8
1b684     FC FE FC 00 
1b688     FC FC FF FB 
1b68c     FC FE FB FC 
1b690     FC FB 01 FE | 	byte	$fc, $fe, $fc, $00, $fc, $fc, $ff, $fb, $fc, $fe, $fb, $fc, $fc, $fb, $01, $fe
1b694     FC F9 FC FA 
1b698     FE FE FB FB 
1b69c     FA FC FA 00 
1b6a0     FD FC FC FF | 	byte	$fc, $f9, $fc, $fa, $fe, $fe, $fb, $fb, $fa, $fc, $fa, $00, $fd, $fc, $fc, $ff
1b6a4     FE F8 FC FB 
1b6a8     FD FF 00 F8 
1b6ac     F8 FF FC 00 
1b6b0     FE F9 FE FF | 	byte	$fe, $f8, $fc, $fb, $fd, $ff, $00, $f8, $f8, $ff, $fc, $00, $fe, $f9, $fe, $ff
1b6b4     FD FD FC FC 
1b6b8     FD FE FF FE 
1b6bc     FC F9 FE FF 
1b6c0     FE FD F9 FE | 	byte	$fd, $fd, $fc, $fc, $fd, $fe, $ff, $fe, $fc, $f9, $fe, $ff, $fe, $fd, $f9, $fe
1b6c4     FC FF FA F8 
1b6c8     FC FC FD F9 
1b6cc     FF FC FC FC 
1b6d0     FC F9 FE F8 | 	byte	$fc, $ff, $fa, $f8, $fc, $fc, $fd, $f9, $ff, $fc, $fc, $fc, $fc, $f9, $fe, $f8
1b6d4     FF FE FC F9 
1b6d8     FC FF 00 FC 
1b6dc     FB FE FF FE 
1b6e0     FC FC FB FE | 	byte	$ff, $fe, $fc, $f9, $fc, $ff, $00, $fc, $fb, $fe, $ff, $fe, $fc, $fc, $fb, $fe
1b6e4     FE FF FF F9 
1b6e8     FF FF FE FE 
1b6ec     FB FA FA FD 
1b6f0     FD FD FA FE | 	byte	$fe, $ff, $ff, $f9, $ff, $ff, $fe, $fe, $fb, $fa, $fa, $fd, $fd, $fd, $fa, $fe
1b6f4     FB FF FC FC 
1b6f8     FC FA FF FC 
1b6fc     FC FC FE FD 
1b700     FA FF FD FD | 	byte	$fb, $ff, $fc, $fc, $fc, $fa, $ff, $fc, $fc, $fc, $fe, $fd, $fa, $ff, $fd, $fd
1b704     FB FC FF FF 
1b708     FC FC FC FC 
1b70c     FE F9 FC 00 
1b710     00 FC FB 00 | 	byte	$fb, $fc, $ff, $ff, $fc, $fc, $fc, $fc, $fe, $f9, $fc, $00, $00, $fc, $fb, $00
1b714     FC FB FD FC 
1b718     FE FE FC FC 
1b71c     FB FC FC FE 
1b720     00 F9 FB FE | 	byte	$fc, $fb, $fd, $fc, $fe, $fe, $fc, $fc, $fb, $fc, $fc, $fe, $00, $f9, $fb, $fe
1b724     FF FD FB FA 
1b728     FB FF FE FB 
1b72c     FA FC FE 00 
1b730     FC FD FB FC | 	byte	$ff, $fd, $fb, $fa, $fb, $ff, $fe, $fb, $fa, $fc, $fe, $00, $fc, $fd, $fb, $fc
1b734     FE FE FC F9 
1b738     FF FF FE FF 
1b73c     FC FC FE FC 
1b740     FD FE FE FC | 	byte	$fe, $fe, $fc, $f9, $ff, $ff, $fe, $ff, $fc, $fc, $fe, $fc, $fd, $fe, $fe, $fc
1b744     FC FF FA FC 
1b748     FE FC FD FC 
1b74c     FC FC FC F9 
1b750     FC FB FC FD | 	byte	$fc, $ff, $fa, $fc, $fe, $fc, $fd, $fc, $fc, $fc, $fc, $f9, $fc, $fb, $fc, $fd
1b754     FB FC FC FD 
1b758     FA FC FE FB 
1b75c     FE FD FD FD 
1b760     FE FC FE FF | 	byte	$fb, $fc, $fc, $fd, $fa, $fc, $fe, $fb, $fe, $fd, $fd, $fd, $fe, $fc, $fe, $ff
1b764     FF FD FC FC 
1b768     FC FE 00 FF 
1b76c     FC FC FA FC 
1b770     FF FC FC FB | 	byte	$ff, $fd, $fc, $fc, $fc, $fe, $00, $ff, $fc, $fc, $fa, $fc, $ff, $fc, $fc, $fb
1b774     FF FD FC FA 
1b778     FA FC FF FA 
1b77c     FC FB FC FD 
1b780     FE FB FE FC | 	byte	$ff, $fd, $fc, $fa, $fa, $fc, $ff, $fa, $fc, $fb, $fc, $fd, $fe, $fb, $fe, $fc
1b784     FB FD 00 FE 
1b788     FA FF FE FD 
1b78c     FF FB FE FC 
1b790     FE FB FE FF | 	byte	$fb, $fd, $00, $fe, $fa, $ff, $fe, $fd, $ff, $fb, $fe, $fc, $fe, $fb, $fe, $ff
1b794     FC FA FE FD 
1b798     FC FE FD FB 
1b79c     FC FB FC FC 
1b7a0     FB F9 FC FF | 	byte	$fc, $fa, $fe, $fd, $fc, $fe, $fd, $fb, $fc, $fb, $fc, $fc, $fb, $f9, $fc, $ff
1b7a4     FF FD FA FD 
1b7a8     FC FE FD 00 
1b7ac     F9 FB FD FD 
1b7b0     FD FD F9 FE | 	byte	$ff, $fd, $fa, $fd, $fc, $fe, $fd, $00, $f9, $fb, $fd, $fd, $fd, $fd, $f9, $fe
1b7b4     FF 00 F9 FC 
1b7b8     FB FE 00 FE 
1b7bc     FC FC F9 FF 
1b7c0     FF FC FD FC | 	byte	$ff, $00, $f9, $fc, $fb, $fe, $00, $fe, $fc, $fc, $f9, $ff, $ff, $fc, $fd, $fc
1b7c4     FE FF FC FC 
1b7c8     FC FF FE FD 
1b7cc     FE FC FC FD 
1b7d0     FC FD FF FE | 	byte	$fe, $ff, $fc, $fc, $fc, $ff, $fe, $fd, $fe, $fc, $fc, $fd, $fc, $fd, $ff, $fe
1b7d4     FE FB FC FB 
1b7d8     FC FC FC FA 
1b7dc     FB FE FA FA 
1b7e0     FB FF FE FD | 	byte	$fe, $fb, $fc, $fb, $fc, $fc, $fc, $fa, $fb, $fe, $fa, $fa, $fb, $ff, $fe, $fd
1b7e4     FC FB FB FC 
1b7e8     FD FF FE FE 
1b7ec     FB FE FF FC 
1b7f0     FD FE FD FD | 	byte	$fc, $fb, $fb, $fc, $fd, $ff, $fe, $fe, $fb, $fe, $ff, $fc, $fd, $fe, $fd, $fd
1b7f4     FE FC FC FC 
1b7f8     FE FE FD FE 
1b7fc     FC FE FC FC 
1b800     FF FA FD FA | 	byte	$fe, $fc, $fc, $fc, $fe, $fe, $fd, $fe, $fc, $fe, $fc, $fc, $ff, $fa, $fd, $fa
1b804     FC FD FC FA 
1b808     FC FD FE FD 
1b80c     FC FD FD FC 
1b810     FC FE 00 FD | 	byte	$fc, $fd, $fc, $fa, $fc, $fd, $fe, $fd, $fc, $fd, $fd, $fc, $fc, $fe, $00, $fd
1b814     00 FC FC FC 
1b818     FB FF FF FC 
1b81c     FC FB FF FB 
1b820     FB FC FC FE | 	byte	$00, $fc, $fc, $fc, $fb, $ff, $ff, $fc, $fc, $fb, $ff, $fb, $fb, $fc, $fc, $fe
1b824     FC FC FC FB 
1b828     FC FC FE FC 
1b82c     FE FC FD FA 
1b830     F9 FB FD FF | 	byte	$fc, $fc, $fc, $fb, $fc, $fc, $fe, $fc, $fe, $fc, $fd, $fa, $f9, $fb, $fd, $ff
1b834     FE FC FB FC 
1b838     FE FF FE FE 
1b83c     FE FC FE FD 
1b840     FD FC FC FE | 	byte	$fe, $fc, $fb, $fc, $fe, $ff, $fe, $fe, $fe, $fc, $fe, $fd, $fd, $fc, $fc, $fe
1b844     FF FC FC FC 
1b848     FC FC FD FC 
1b84c     FC FE FC FC 
1b850     FC FC FC FE | 	byte	$ff, $fc, $fc, $fc, $fc, $fc, $fd, $fc, $fc, $fe, $fc, $fc, $fc, $fc, $fc, $fe
1b854     FD FC FA FE 
1b858     FC FC FD FC 
1b85c     FB FD FF FE 
1b860     FC FC FD FE | 	byte	$fd, $fc, $fa, $fe, $fc, $fc, $fd, $fc, $fb, $fd, $ff, $fe, $fc, $fc, $fd, $fe
1b864     FE FD FB FE 
1b868     FD FD FE FC 
1b86c     FD FD FD FE 
1b870     FC FC FC FD | 	byte	$fe, $fd, $fb, $fe, $fd, $fd, $fe, $fc, $fd, $fd, $fd, $fe, $fc, $fc, $fc, $fd
1b874     FC FD FC FB 
1b878     FC FC FD FD 
1b87c     FE FE FC FE 
1b880     FD FC FB FD | 	byte	$fc, $fd, $fc, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $fc, $fe, $fd, $fc, $fb, $fd
1b884     FE FD FD FC 
1b888     FC FB FE FE 
1b88c     FC FD FA FC 
1b890     FA FD FC FD | 	byte	$fe, $fd, $fd, $fc, $fc, $fb, $fe, $fe, $fc, $fd, $fa, $fc, $fa, $fd, $fc, $fd
1b894     FD FC FC FD 
1b898     FF FF FC FD 
1b89c     FD FE FF FE 
1b8a0     FC FC FC FD | 	byte	$fd, $fc, $fc, $fd, $ff, $ff, $fc, $fd, $fd, $fe, $ff, $fe, $fc, $fc, $fc, $fd
1b8a4     FE FD FA FA 
1b8a8     FF FE FC FD 
1b8ac     FA FB FD FD 
1b8b0     FC FC FB FC | 	byte	$fe, $fd, $fa, $fa, $ff, $fe, $fc, $fd, $fa, $fb, $fd, $fd, $fc, $fc, $fb, $fc
1b8b4     FE FE FC FB 
1b8b8     FB FD FC FC 
1b8bc     FE FD FC FD 
1b8c0     FF FE FC FC | 	byte	$fe, $fe, $fc, $fb, $fb, $fd, $fc, $fc, $fe, $fd, $fc, $fd, $ff, $fe, $fc, $fc
1b8c4     FE FF FE FE 
1b8c8     FD FE FC FD 
1b8cc     FE FE FC FB 
1b8d0     FC FC FC FB | 	byte	$fe, $ff, $fe, $fe, $fd, $fe, $fc, $fd, $fe, $fe, $fc, $fb, $fc, $fc, $fc, $fb
1b8d4     FC FA FD FC 
1b8d8     FB FB FA FC 
1b8dc     FC FE FD FE 
1b8e0     FB FB FC FD | 	byte	$fc, $fa, $fd, $fc, $fb, $fb, $fa, $fc, $fc, $fe, $fd, $fe, $fb, $fb, $fc, $fd
1b8e4     FF FE FE FC 
1b8e8     FD FF FD FC 
1b8ec     FD FD FE FE 
1b8f0     FD FC FC FD | 	byte	$ff, $fe, $fe, $fc, $fd, $ff, $fd, $fc, $fd, $fd, $fe, $fe, $fd, $fc, $fc, $fd
1b8f4     FE FF FE FC 
1b8f8     FB FC FD FC 
1b8fc     FD FC FB FD 
1b900     FD FC FC FB | 	byte	$fe, $ff, $fe, $fc, $fb, $fc, $fd, $fc, $fd, $fc, $fb, $fd, $fd, $fc, $fc, $fb
1b904     FC FC FC FD 
1b908     FD FC FD FD 
1b90c     FC FC FC FD 
1b910     FE 00 FE FB | 	byte	$fc, $fc, $fc, $fd, $fd, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $00, $fe, $fb
1b914     FC FC FC FE 
1b918     FE FD FC FE 
1b91c     FB FC FD FE 
1b920     FC FE FE FC | 	byte	$fc, $fc, $fc, $fe, $fe, $fd, $fc, $fe, $fb, $fc, $fd, $fe, $fc, $fe, $fe, $fc
1b924     FB FC FC FD 
1b928     FE FE FD FC 
1b92c     FB FC FE FE 
1b930     FE FD FD FC | 	byte	$fb, $fc, $fc, $fd, $fe, $fe, $fd, $fc, $fb, $fc, $fe, $fe, $fe, $fd, $fd, $fc
1b934     FA FB FC FE 
1b938     FE FE FC FC 
1b93c     FD FE FE FC 
1b940     FD FD FD FD | 	byte	$fa, $fb, $fc, $fe, $fe, $fe, $fc, $fc, $fd, $fe, $fe, $fc, $fd, $fd, $fd, $fd
1b944     FC FB FC FD 
1b948     FE FF FC FC 
1b94c     FC FD FD FC 
1b950     FC FC FD FD | 	byte	$fc, $fb, $fc, $fd, $fe, $ff, $fc, $fc, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fd
1b954     FE FC FC FC 
1b958     FC FE FD FD 
1b95c     FC FC FD FC 
1b960     FB FC FD FE | 	byte	$fe, $fc, $fc, $fc, $fc, $fe, $fd, $fd, $fc, $fc, $fd, $fc, $fb, $fc, $fd, $fe
1b964     FD FE FD FC 
1b968     FC FF FF FD 
1b96c     FC FB FC FE 
1b970     FD FC FC FE | 	byte	$fd, $fe, $fd, $fc, $fc, $ff, $ff, $fd, $fc, $fb, $fc, $fe, $fd, $fc, $fc, $fe
1b974     FD FD FC FC 
1b978     FC FD FE FD 
1b97c     FD FC FB FD 
1b980     FD FD FE FC | 	byte	$fd, $fd, $fc, $fc, $fc, $fd, $fe, $fd, $fd, $fc, $fb, $fd, $fd, $fd, $fe, $fc
1b984     FE FD FD FD 
1b988     FB FC FD FD 
1b98c     FC FA FB FD 
1b990     FC FE FE FC | 	byte	$fe, $fd, $fd, $fd, $fb, $fc, $fd, $fd, $fc, $fa, $fb, $fd, $fc, $fe, $fe, $fc
1b994     FD FD FE FE 
1b998     FE FC FC FD 
1b99c     FE FC FC FD 
1b9a0     FF FE FD FD | 	byte	$fd, $fd, $fe, $fe, $fe, $fc, $fc, $fd, $fe, $fc, $fc, $fd, $ff, $fe, $fd, $fd
1b9a4     FC FD FB FB 
1b9a8     FC FD FC FC 
1b9ac     FC FC FB FC 
1b9b0     FE FE FC FB | 	byte	$fc, $fd, $fb, $fb, $fc, $fd, $fc, $fc, $fc, $fc, $fb, $fc, $fe, $fe, $fc, $fb
1b9b4     FC FC FD FC 
1b9b8     FC FB FD FD 
1b9bc     FC FE FC FC 
1b9c0     FD FE FF FF | 	byte	$fc, $fc, $fd, $fc, $fc, $fb, $fd, $fd, $fc, $fe, $fc, $fc, $fd, $fe, $ff, $ff
1b9c4     FC FC FC FE 
1b9c8     FF FC FC FE 
1b9cc     FF FE FB FA 
1b9d0     FC FE FF FC | 	byte	$fc, $fc, $fc, $fe, $ff, $fc, $fc, $fe, $ff, $fe, $fb, $fa, $fc, $fe, $ff, $fc
1b9d4     F9 F9 FB FD 
1b9d8     FC FC FB FB 
1b9dc     FE FC FC FB 
1b9e0     FC FC FD FD | 	byte	$f9, $f9, $fb, $fd, $fc, $fc, $fb, $fb, $fe, $fc, $fc, $fb, $fc, $fc, $fd, $fd
1b9e4     FE FC FC FD 
1b9e8     FD FF FE FF 
1b9ec     FD FC FC FD 
1b9f0     FF FD FE FE | 	byte	$fe, $fc, $fc, $fd, $fd, $ff, $fe, $ff, $fd, $fc, $fc, $fd, $ff, $fd, $fe, $fe
1b9f4     FE FE FC FB 
1b9f8     FD FE FE FD 
1b9fc     FC FC FB FB 
1ba00     FA FC FD FC | 	byte	$fe, $fe, $fc, $fb, $fd, $fe, $fe, $fd, $fc, $fc, $fb, $fb, $fa, $fc, $fd, $fc
1ba04     FB FB FB FB 
1ba08     FB FB       | 	byte	$fb[6]
1ba0a     FC FC FE FE 
1ba0e     FC FA FA FE 
1ba12     00 FF FE FC 
1ba16     FC FF FF FC | 	byte	$fc, $fc, $fe, $fe, $fc, $fa, $fa, $fe, $00, $ff, $fe, $fc, $fc, $ff, $ff, $fc
1ba1a     FC FC FE FF 
1ba1e     FE FC FD FC 
1ba22     FE FE FE FB 
1ba26     FC FD FC FC | 	byte	$fc, $fc, $fe, $ff, $fe, $fc, $fd, $fc, $fe, $fe, $fe, $fb, $fc, $fd, $fc, $fc
1ba2a     FC FD FC FD 
1ba2e     FB FC FC FC 
1ba32     FC FC FC FE 
1ba36     FB F9 FC FC | 	byte	$fc, $fd, $fc, $fd, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $fb, $f9, $fc, $fc
1ba3a     FD FE FE FE 
1ba3e     FC FD FE FD 
1ba42     FE FC FD FE 
1ba46     FD FC FE FD | 	byte	$fd, $fe, $fe, $fe, $fc, $fd, $fe, $fd, $fe, $fc, $fd, $fe, $fd, $fc, $fe, $fd
1ba4a     FE FE FF FC 
1ba4e     FC FC FB FD 
1ba52     FE FE FC FC 
1ba56     FD FC FD FC | 	byte	$fe, $fe, $ff, $fc, $fc, $fc, $fb, $fd, $fe, $fe, $fc, $fc, $fd, $fc, $fd, $fc
1ba5a     FC FC FC FC 
1ba5e     FD FA FB FC 
1ba62     FC FD FD FD 
1ba66     FC FB FC FC | 	byte	$fc, $fc, $fc, $fc, $fd, $fa, $fb, $fc, $fc, $fd, $fd, $fd, $fc, $fb, $fc, $fc
1ba6a     FD FF FE FC 
1ba6e     FD FE FE FE 
1ba72     FD FE FE FE 
1ba76     FC FE FD FD | 	byte	$fd, $ff, $fe, $fc, $fd, $fe, $fe, $fe, $fd, $fe, $fe, $fe, $fc, $fe, $fd, $fd
1ba7a     FD FE FC FD 
1ba7e     FD FD FC FD 
1ba82     FC FC FD FC 
1ba86     FC FB FB FC | 	byte	$fd, $fe, $fc, $fd, $fd, $fd, $fc, $fd, $fc, $fc, $fd, $fc, $fc, $fb, $fb, $fc
1ba8a     FE FC FB FC 
1ba8e     FD FB FA FC 
1ba92     FD FE FF FC 
1ba96     FC FC FB FE | 	byte	$fe, $fc, $fb, $fc, $fd, $fb, $fa, $fc, $fd, $fe, $ff, $fc, $fc, $fc, $fb, $fe
1ba9a     FE FD FD FE 
1ba9e     FF FD FC FC 
1baa2     FE FE FD FD 
1baa6     FD FC FC FC | 	byte	$fe, $fd, $fd, $fe, $ff, $fd, $fc, $fc, $fe, $fe, $fd, $fd, $fd, $fc, $fc, $fc
1baaa     FC FF FE FC 
1baae     FC FC FC FC 
1bab2     FD FD FC FC 
1bab6     FC FC FD FC | 	byte	$fc, $ff, $fe, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fc
1baba     FC FE FE FE 
1babe     FC FC FC FB 
1bac2     FE FF FF FE 
1bac6     FD FD FE FC | 	byte	$fc, $fe, $fe, $fe, $fc, $fc, $fc, $fb, $fe, $ff, $ff, $fe, $fd, $fd, $fe, $fc
1baca     FE FC FD FD 
1bace     FC FC FC FB 
1bad2     FD FD FE FC 
1bad6     FB FB FC FC | 	byte	$fe, $fc, $fd, $fd, $fc, $fc, $fc, $fb, $fd, $fd, $fe, $fc, $fb, $fb, $fc, $fc
1bada     FC FC FC FD 
1bade     FE FD FB FB 
1bae2     FD FF FE FE 
1bae6     FC FC FC FC | 	byte	$fc, $fc, $fc, $fd, $fe, $fd, $fb, $fb, $fd, $ff, $fe, $fe, $fc, $fc, $fc, $fc
1baea     FC FC FD FD 
1baee     FF FF FD FC 
1baf2     FD FF FE FD 
1baf6     FD FD FB FC | 	byte	$fc, $fc, $fd, $fd, $ff, $ff, $fd, $fc, $fd, $ff, $fe, $fd, $fd, $fd, $fb, $fc
1bafa     FC FC FE FF 
1bafe     FE FC FD FC 
1bb02     FB FC FE FC 
1bb06     FC FC FC FD | 	byte	$fc, $fc, $fe, $ff, $fe, $fc, $fd, $fc, $fb, $fc, $fe, $fc, $fc, $fc, $fc, $fd
1bb0a     FD FC FC FE 
1bb0e     FC FC FC FC 
1bb12     FA FC FE FC 
1bb16     FC FC FC FE | 	byte	$fd, $fc, $fc, $fe, $fc, $fc, $fc, $fc, $fa, $fc, $fe, $fc, $fc, $fc, $fc, $fe
1bb1a     FD FC FD FE 
1bb1e     FE FE FC FE 
1bb22     FC FC FE FF 
1bb26     FD FD FD FE | 	byte	$fd, $fc, $fd, $fe, $fe, $fe, $fc, $fe, $fc, $fc, $fe, $ff, $fd, $fd, $fd, $fe
1bb2a     FE FC FC FC 
1bb2e     FD FC FC FC 
1bb32     FC FC FD FD 
1bb36     FD FE FB FC | 	byte	$fe, $fc, $fc, $fc, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $fb, $fc
1bb3a     FC FD FD FC 
1bb3e     FC FC FE FC 
1bb42     FC FB FC FC 
1bb46     FD FF FD FC | 	byte	$fc, $fd, $fd, $fc, $fc, $fc, $fe, $fc, $fc, $fb, $fc, $fc, $fd, $ff, $fd, $fc
1bb4a     FD FD FE FD 
1bb4e     FD FD FE FE 
1bb52     FE FD FD FD 
1bb56     FE FC FC FB | 	byte	$fd, $fd, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $fc, $fc, $fb
1bb5a     FB FC FC FC 
1bb5e     FC FC FC FC 
1bb62     FB FC FC FE 
1bb66     FE FB FB FC | 	byte	$fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fe, $fe, $fb, $fb, $fc
1bb6a     FC FD FE 00 
1bb6e     FC FC FE FD 
1bb72     FC FE FC FD 
1bb76     FF FE FD FC | 	byte	$fc, $fd, $fe, $00, $fc, $fc, $fe, $fd, $fc, $fe, $fc, $fd, $ff, $fe, $fd, $fc
1bb7a     FD FC FE FF 
1bb7e     FD FC FC FC 
1bb82     FD FE FE FC 
1bb86     FC FE FC FB | 	byte	$fd, $fc, $fe, $ff, $fd, $fc, $fc, $fc, $fd, $fe, $fe, $fc, $fc, $fe, $fc, $fb
1bb8a     FC FC FD FC 
1bb8e     FE FC FC FC 
1bb92     FC FC FE FD 
1bb96     FD FC FC FD | 	byte	$fc, $fc, $fd, $fc, $fe, $fc, $fc, $fc, $fc, $fc, $fe, $fd, $fd, $fc, $fc, $fd
1bb9a     FB FE FC FD 
1bb9e     FE FD FD FC 
1bba2     FB FB FC FE 
1bba6     FD FE FC FC | 	byte	$fb, $fe, $fc, $fd, $fe, $fd, $fd, $fc, $fb, $fb, $fc, $fe, $fd, $fe, $fc, $fc
1bbaa     FC FD FE FE 
1bbae     FC FC FC FE 
1bbb2     FE FD FC FD 
1bbb6     FD FE FD FC | 	byte	$fc, $fd, $fe, $fe, $fc, $fc, $fc, $fe, $fe, $fd, $fc, $fd, $fd, $fe, $fd, $fc
1bbba     FB FB FE FF 
1bbbe     FE FC FA FC 
1bbc2     FE FD FC FC 
1bbc6     FC FC FD FD | 	byte	$fb, $fb, $fe, $ff, $fe, $fc, $fa, $fc, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd
1bbca     FD FC FC FD 
1bbce     FE FE FD FC 
1bbd2     FC FC FC FE 
1bbd6     FE FD FA FB | 	byte	$fd, $fc, $fc, $fd, $fe, $fe, $fd, $fc, $fc, $fc, $fc, $fe, $fe, $fd, $fa, $fb
1bbda     FE FF FE FC 
1bbde     FC FF FF FD 
1bbe2     FC FB FB FD 
1bbe6     FE FE FC FB | 	byte	$fe, $ff, $fe, $fc, $fc, $ff, $ff, $fd, $fc, $fb, $fb, $fd, $fe, $fe, $fc, $fb
1bbea     FA FC FE FE 
1bbee     FA FB FD FE 
1bbf2     FC FC FC FD 
1bbf6     FE FE FE FD | 	byte	$fa, $fc, $fe, $fe, $fa, $fb, $fd, $fe, $fc, $fc, $fc, $fd, $fe, $fe, $fe, $fd
1bbfa     FC FB FE FF 
1bbfe     FE FD FC FC 
1bc02     FD FC FE FB 
1bc06     FD FE FE FD | 	byte	$fc, $fb, $fe, $ff, $fe, $fd, $fc, $fc, $fd, $fc, $fe, $fb, $fd, $fe, $fe, $fd
1bc0a     FC FC FC FC 
1bc0e     FD FD FC FB 
1bc12     FB FF 00 00 
1bc16     00 00 4C 4C | 	byte	$fc, $fc, $fc, $fc, $fd, $fd, $fc, $fb, $fb, $ff, $00, $00, $00, $00, $4c, $4c
1bc1a     42 42 7E 7E 
1bc1e     66 2C 24 58 
1bc22     72 3E CE DC 
1bc26     EE BE 9A 0E | 	byte	$42, $42, $7e, $7e, $66, $2c, $24, $58, $72, $3e, $ce, $dc, $ee, $be, $9a, $0e
1bc2a     3E 00 B4 CE 
1bc2e     0E D4 80 80 
1bc32     80 80 80 80 
1bc36     80 B4 80 80 | 	byte	$3e, $00, $b4, $ce, $0e, $d4, $80, $80, $80, $80, $80, $80, $80, $b4, $80, $80
1bc3a     80 80 80 80 
1bc3e     80 80 80 80 
1bc42     80 80 80 80 
1bc46     80 80 80 80 
1bc4a     80          | 	byte	$80[17]
1bc4b     9A B4 A8 80 
1bc4f     80 80 D4 00 
1bc53     00 C2 80 BE 
1bc57     4C 72 7E 7E | 	byte	$9a, $b4, $a8, $80, $80, $80, $d4, $00, $00, $c2, $80, $be, $4c, $72, $7e, $7e
1bc5b     3E DC 2C 7E 
1bc5f     7E 7E 5C 7E 
1bc63     7E 7E 7E 7E 
1bc67     7E 7E 7E 7E | 	byte	$3e, $dc, $2c, $7e, $7e, $7e, $5c, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e
1bc6b     5C 42 5C 4C 
1bc6f     8E 80 80 80 
1bc73     80 80 80 80 
1bc77     80 80 80 80 | 	byte	$5c, $42, $5c, $4c, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1bc7b     80 D4 B4 80 
1bc7f     9A EE 66 4C 
1bc83     DC CE E4 00 
1bc87     66 7E 7E 66 | 	byte	$80, $d4, $b4, $80, $9a, $ee, $66, $4c, $dc, $ce, $e4, $00, $66, $7e, $7e, $66
1bc8b     42 58 7E 7E 
1bc8f     7E 7E 5C 5C 
1bc93     7E 7E 7E 72 
1bc97     3E 32 32 58 | 	byte	$42, $58, $7e, $7e, $7e, $7e, $5c, $5c, $7e, $7e, $7e, $72, $3e, $32, $32, $58
1bc9b     7E 76 5C 32 
1bc9f     32 5C 5C 12 
1bca3     BE C2 C2 9A 
1bca7     B4 1C 2C F2 | 	byte	$7e, $76, $5c, $32, $32, $5c, $5c, $12, $be, $c2, $c2, $9a, $b4, $1c, $2c, $f2
1bcab     CE E4 00 9A 
1bcaf     80 80 80 80 
1bcb3     80 80 80 A8 
1bcb7     80 80 8A 80 | 	byte	$ce, $e4, $00, $9a, $80, $80, $80, $80, $80, $80, $80, $a8, $80, $80, $8a, $80
1bcbb     80 80 80 80 
1bcbf     80 80 80 80 
1bcc3     80 80       | 	byte	$80[10]
1bcc5     8A 80 80 80 
1bcc9     80 9A A4 8E 
1bccd     80 80 8A D4 
1bcd1     F2 E4 A4 8A | 	byte	$8a, $80, $80, $80, $80, $9a, $a4, $8e, $80, $80, $8a, $d4, $f2, $e4, $a4, $8a
1bcd5     DC 58 76 7E 
1bcd9     7E 1C EE 42 
1bcdd     7E 7E 7E 5C 
1bce1     7E 7E 7E 7E | 	byte	$dc, $58, $76, $7e, $7e, $1c, $ee, $42, $7e, $7e, $7e, $5c, $7e, $7e, $7e, $7e
1bce5     7E 7E 7E 7E 
1bce9     7E          | 	byte	$7e[5]
1bcea     72 5C 66 24 
1bcee     80 80 80 80 
1bcf2     80 80 80 80 
1bcf6     80 80 80 80 | 	byte	$72, $5c, $66, $24, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1bcfa     80 D4 B4 9A 
1bcfe     BE 1C 66 2C 
1bd02     DC D4 EE 12 
1bd06     7E 7E 7E 66 | 	byte	$80, $d4, $b4, $9a, $be, $1c, $66, $2c, $dc, $d4, $ee, $12, $7e, $7e, $7e, $66
1bd0a     58 72 7E 7E 
1bd0e     7E 7E 66 72 
1bd12     7E 7E 7E 5C 
1bd16     3E 2C 32 66 | 	byte	$58, $72, $7e, $7e, $7e, $7e, $66, $72, $7e, $7e, $7e, $5c, $3e, $2c, $32, $66
1bd1a     76 72 58 3E 
1bd1e     42 58 4C 00 
1bd22     B4 B4 A8 9A 
1bd26     D4 24 1C F2 | 	byte	$76, $72, $58, $3e, $42, $58, $4c, $00, $b4, $b4, $a8, $9a, $d4, $24, $1c, $f2
1bd2a     E4 F2 EE 80 
1bd2e     80 80 80 80 
1bd32     80 80 80 A4 
1bd36     8A 8A 80 80 | 	byte	$e4, $f2, $ee, $80, $80, $80, $80, $80, $80, $80, $80, $a4, $8a, $8a, $80, $80
1bd3a     80 80 80 80 
1bd3e     80 80 80 80 
1bd42     80          | 	byte	$80[9]
1bd43     8A 80 80 80 
1bd47     80 80 8E 9A 
1bd4b     80 80 80 9A 
1bd4f     D4 E4 CE 9A | 	byte	$8a, $80, $80, $80, $80, $80, $8e, $9a, $80, $80, $80, $9a, $d4, $e4, $ce, $9a
1bd53     9A F2 58 7E 
1bd57     7E 5C 02 00 
1bd5b     58 7E 7E 7E 
1bd5f     76 7E 7E 7E | 	byte	$9a, $f2, $58, $7e, $7e, $5c, $02, $00, $58, $7e, $7e, $7e, $76, $7e, $7e, $7e
1bd63     7E 7E 7E 7E 
1bd67     7E 7E 7E    | 	byte	$7e[7]
1bd6a     72 5C 00 80 
1bd6e     80 80 80 80 
1bd72     80 80 80 80 
1bd76     80 80 80 9A | 	byte	$72, $5c, $00, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $9a
1bd7a     D4 BE B4 E4 
1bd7e     32 5C 1C DC 
1bd82     DC F2 32 7E 
1bd86     7E 7E 66 66 | 	byte	$d4, $be, $b4, $e4, $32, $5c, $1c, $dc, $dc, $f2, $32, $7e, $7e, $7e, $66, $66
1bd8a     7E 7E 7E 7E 
1bd8e     7E          | 	byte	$7e[5]
1bd8f     72 76 7E 7E 
1bd93     7E 58 32 32 
1bd97     42 72 72 66 
1bd9b     4C 42 4C 4C | 	byte	$72, $76, $7e, $7e, $7e, $58, $32, $32, $42, $72, $72, $66, $4c, $42, $4c, $4c
1bd9f     3E E4 B4 A8 
1bda3     9A A8 EE 1C 
1bda7     12 F2 EE F2 
1bdab     C2 80 80 80 | 	byte	$3e, $e4, $b4, $a8, $9a, $a8, $ee, $1c, $12, $f2, $ee, $f2, $c2, $80, $80, $80
1bdaf     80 80 80 80 
1bdb3     8A 9A 8E 8A 
1bdb7     80 80 80 80 
1bdbb     80 80 80 80 | 	byte	$80, $80, $80, $80, $8a, $9a, $8e, $8a, $80, $80, $80, $80, $80, $80, $80, $80
1bdbf     80 80 80 80 
1bdc3     80 80 80 80 
1bdc7     80          | 	byte	$80[9]
1bdc8     8A 8A 80 80 
1bdcc     80 A4 D4 D4 
1bdd0     BE 9A B4 0E 
1bdd4     5C 76 76 42 | 	byte	$8a, $8a, $80, $80, $80, $a4, $d4, $d4, $be, $9a, $b4, $0e, $5c, $76, $76, $42
1bdd8     02 12 5C 7E 
1bddc     7E 76 7E 7E 
1bde0     7E 7E 7E 7E 
1bde4     7E 7E 7E 7E | 	byte	$02, $12, $5c, $7e, $7e, $76, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e
1bde8     7E 76 4C D4 
1bdec     80 80 80 80 
1bdf0     80 80 80 80 
1bdf4     80 80 80 80 | 	byte	$7e, $76, $4c, $d4, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1bdf8     A8 D4 C2 CE 
1bdfc     02 42 42 0E 
1be00     E4 EE 0E 5C 
1be04     7E 7E 7E 72 | 	byte	$a8, $d4, $c2, $ce, $02, $42, $42, $0e, $e4, $ee, $0e, $5c, $7e, $7e, $7e, $72
1be08     76 7E 7E 7E 
1be0c     7E 7E 76 7E 
1be10     7E 7E 7E 4C 
1be14     3E 3E 58 66 | 	byte	$76, $7e, $7e, $7e, $7e, $7e, $76, $7e, $7e, $7e, $7e, $4c, $3e, $3e, $58, $66
1be18     66 5C 4C 42 
1be1c     4C 42 24 DC 
1be20     B4 A4 9A BE 
1be24     FE 12 0E F2 | 	byte	$66, $5c, $4c, $42, $4c, $42, $24, $dc, $b4, $a4, $9a, $be, $fe, $12, $0e, $f2
1be28     F2 EE A4 80 
1be2c     80 80 80 80 
1be30     80 80 8A 8E 
1be34     8A 80 80 80 | 	byte	$f2, $ee, $a4, $80, $80, $80, $80, $80, $80, $80, $8a, $8e, $8a, $80, $80, $80
1be38     80 80 80 80 
1be3c     80 80 80 80 
1be40     80 80 80 80 
1be44     80 80 80 80 
1be48     80 80 80 80 | 	byte	$80[20]
1be4c     A8 CE C2 A8 
1be50     A4 CE 1C 5C 
1be54     72 5C 2C 0E 
1be58     2C 66 7E 7E | 	byte	$a8, $ce, $c2, $a8, $a4, $ce, $1c, $5c, $72, $5c, $2c, $0e, $2c, $66, $7e, $7e
1be5c     7E 7E 7E 7E 
1be60     7E 7E 7E 7E 
1be64     7E 7E 7E 7E | 	byte	$7e[12]
1be68     72 2C B4 80 
1be6c     80 80 80 80 
1be70     80 80 80 80 
1be74     80 80 80 B4 | 	byte	$72, $2c, $b4, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $b4
1be78     CE CE E4 12 
1be7c     42 32 02 EE 
1be80     FE 24 76 7E 
1be84     7E 7E 7E 7E | 	byte	$ce, $ce, $e4, $12, $42, $32, $02, $ee, $fe, $24, $76, $7e, $7e, $7e, $7e, $7e
1be88     7E 7E 7E 7E 
1be8c     7E 7E 7E 7E 
1be90     7E          | 	byte	$7e[9]
1be91     72 4C 3E 42 
1be95     5C 66 66 58 
1be99     4C 4C 4C 3E 
1be9d     0E D4 B4 A4 | 	byte	$72, $4c, $3e, $42, $5c, $66, $66, $58, $4c, $4c, $4c, $3e, $0e, $d4, $b4, $a4
1bea1     A8 CE 00 0E 
1bea5     02 F2 EE D4 
1bea9     80 80 80 80 
1bead     80 80 80 80 | 	byte	$a8, $ce, $00, $0e, $02, $f2, $ee, $d4, $80, $80, $80, $80, $80, $80, $80, $80
1beb1     8A 8E 80 80 
1beb5     80 80 80 80 
1beb9     80 80 80 80 
1bebd     80 80 80 80 | 	byte	$8a, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1bec1     80 80 80 80 
1bec5     80 80 80 80 
1bec9     80          | 	byte	$80[9]
1beca     8A B4 C2 BE 
1bece     A8 A8 DC 24 
1bed2     58 66 4C 24 
1bed6     1C 3E 66 7E | 	byte	$8a, $b4, $c2, $be, $a8, $a8, $dc, $24, $58, $66, $4c, $24, $1c, $3e, $66, $7e
1beda     7E 7E 7E 7E 
1bede     7E 7E 7E 7E 
1bee2     7E 7E 7E 7E 
1bee6     7E          | 	byte	$7e[13]
1bee7     5C 0E A4 80 
1beeb     80 80 80 80 
1beef     80 80 80 80 
1bef3     80 80 80 BE | 	byte	$5c, $0e, $a4, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $be
1bef7     CE DC F2 24 
1befb     3E 24 00 F2 
1beff     0E 42 7E 7E 
1bf03     7E 7E 7E 7E | 	byte	$ce, $dc, $f2, $24, $3e, $24, $00, $f2, $0e, $42, $7e, $7e, $7e, $7e, $7e, $7e
1bf07     7E 7E 7E 7E 
1bf0b     7E 7E 7E 7E 
1bf0f     7E          | 	byte	$7e[9]
1bf10     66 4C 42 4C 
1bf14     5C 66 5C 58 
1bf18     4C 42 42 32 
1bf1c     00 CE B4 A8 | 	byte	$66, $4c, $42, $4c, $5c, $66, $5c, $58, $4c, $42, $42, $32, $00, $ce, $b4, $a8
1bf20     B4 DC 00 02 
1bf24     00 F2 E4 C2 
1bf28     80 80 80 80 
1bf2c     80 80 80 80 | 	byte	$b4, $dc, $00, $02, $00, $f2, $e4, $c2, $80, $80, $80, $80, $80, $80, $80, $80
1bf30     80 80 80 80 
1bf34     80 80 80 80 
1bf38     80 80 80 80 
1bf3c     80 80 80 80 
1bf40     80 80 80 80 
1bf44     80 80 80 80 
1bf48     80          | 	byte	$80[25]
1bf49     9A B4 BE BE 
1bf4d     A8 BE F2 2C 
1bf51     58 58 42 24 
1bf55     24 42 72 7E | 	byte	$9a, $b4, $be, $be, $a8, $be, $f2, $2c, $58, $58, $42, $24, $24, $42, $72, $7e
1bf59     7E 7E 7E 7E 
1bf5d     7E 7E 7E 7E 
1bf61     7E 7E 7E 7E | 	byte	$7e[12]
1bf65     72 42 00 8E 
1bf69     80 80 80 80 
1bf6d     80 80 80 80 
1bf71     80 80 80 8A | 	byte	$72, $42, $00, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $8a
1bf75     BE CE DC 00 
1bf79     24 2C 12 00 
1bf7d     02 1C 58 7E 
1bf81     7E 7E 7E 7E | 	byte	$be, $ce, $dc, $00, $24, $2c, $12, $00, $02, $1c, $58, $7e, $7e, $7e, $7e, $7e
1bf85     7E 7E 7E 7E 
1bf89     7E 7E 7E 7E 
1bf8d     7E 7E       | 	byte	$7e[10]
1bf8f     5C 4C 42 58 
1bf93     5C 5C 5C 4C 
1bf97     42 42 3E 24 
1bf9b     00 CE BE B4 | 	byte	$5c, $4c, $42, $58, $5c, $5c, $5c, $4c, $42, $42, $3e, $24, $00, $ce, $be, $b4
1bf9f     C2 E4 00 00 
1bfa3     F2 EE DC A4 
1bfa7     80 80 80 80 
1bfab     80 80 80 80 | 	byte	$c2, $e4, $00, $00, $f2, $ee, $dc, $a4, $80, $80, $80, $80, $80, $80, $80, $80
1bfaf     80 80 80 80 
1bfb3     80 80 80 80 
1bfb7     80 80 80 80 
1bfbb     80 80 80 80 
1bfbf     80 80 80 80 
1bfc3     80 80 80 80 | 	byte	$80[24]
1bfc7     8A 9A B4 BE 
1bfcb     B4 B4 CE 00 
1bfcf     32 4C 4C 3E 
1bfd3     2C 32 58 72 | 	byte	$8a, $9a, $b4, $be, $b4, $b4, $ce, $00, $32, $4c, $4c, $3e, $2c, $32, $58, $72
1bfd7     7E 7E 7E 7E 
1bfdb     7E 7E 7E 7E 
1bfdf     7E 7E 7E 7E 
1bfe3     7E          | 	byte	$7e[13]
1bfe4     66 2C DC 8A 
1bfe8     80 80 80 80 
1bfec     80 80 80 80 
1bff0     80 80 80 8E | 	byte	$66, $2c, $dc, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $8e
1bff4     BE CE E4 02 
1bff8     1C 1C 0E 02 
1bffc     0E 2C 66 7E 
1c000     7E 7E 7E 7E | 	byte	$be, $ce, $e4, $02, $1c, $1c, $0e, $02, $0e, $2c, $66, $7e, $7e, $7e, $7e, $7e
1c004     7E 7E 7E 7E 
1c008     7E 7E 7E 7E 
1c00c     7E          | 	byte	$7e[9]
1c00d     72 5C 4C 4C 
1c011     58 5C 5C 58 
1c015     4C 42 42 32 
1c019     1C EE CE BE | 	byte	$72, $5c, $4c, $4c, $58, $5c, $5c, $58, $4c, $42, $42, $32, $1c, $ee, $ce, $be
1c01d     BE D4 EE 00 
1c021     00 EE E4 CE 
1c025     8E 80 80 80 
1c029     80 80 80 80 | 	byte	$be, $d4, $ee, $00, $00, $ee, $e4, $ce, $8e, $80, $80, $80, $80, $80, $80, $80
1c02d     80 80 80 80 
1c031     80 80 80 80 
1c035     80 80 80 80 
1c039     80 80 80 80 
1c03d     80 80 80 80 
1c041     80 80 80 80 
1c045     80          | 	byte	$80[25]
1c046     8E A4 B4 BE 
1c04a     B4 BE DC 02 
1c04e     32 42 42 32 
1c052     2C 3E 5C 72 | 	byte	$8e, $a4, $b4, $be, $b4, $be, $dc, $02, $32, $42, $42, $32, $2c, $3e, $5c, $72
1c056     7E 7E 7E 7E 
1c05a     7E 7E 7E 7E 
1c05e     7E 7E 7E 7E | 	byte	$7e[12]
1c062     76 58 1C CE 
1c066     8A 80 80 80 
1c06a     80 80 80 80 
1c06e     80 80 80 80 | 	byte	$76, $58, $1c, $ce, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c072     9A BE CE E4 
1c076     02 12 12 0E 
1c07a     02 1C 3E 72 
1c07e     7E 7E 7E 7E | 	byte	$9a, $be, $ce, $e4, $02, $12, $12, $0e, $02, $1c, $3e, $72, $7e, $7e, $7e, $7e
1c082     7E 7E 7E 7E 
1c086     7E 7E 7E 7E 
1c08a     7E 7E       | 	byte	$7e[10]
1c08c     72 5C 4C 4C 
1c090     58 5C 58 4C 
1c094     4C 42 3E 2C 
1c098     0E EE D4 C2 | 	byte	$72, $5c, $4c, $4c, $58, $5c, $58, $4c, $4c, $42, $3e, $2c, $0e, $ee, $d4, $c2
1c09c     CE DC EE F2 
1c0a0     F2 EE DC BE 
1c0a4     80 80 80 80 
1c0a8     80 80 80 80 | 	byte	$ce, $dc, $ee, $f2, $f2, $ee, $dc, $be, $80, $80, $80, $80, $80, $80, $80, $80
1c0ac     80 80 80 80 
1c0b0     80 80 80 80 
1c0b4     80 80 80 80 
1c0b8     80 80 80 80 
1c0bc     80 80 80 80 
1c0c0     80 80 80 80 | 	byte	$80[24]
1c0c4     8A 9A A8 B4 
1c0c8     BE BE CE EE 
1c0cc     12 32 42 3E 
1c0d0     32 3E 4C 66 | 	byte	$8a, $9a, $a8, $b4, $be, $be, $ce, $ee, $12, $32, $42, $3e, $32, $3e, $4c, $66
1c0d4     76 7E 7E 7E 
1c0d8     7E 7E 7E 7E 
1c0dc     7E 7E 7E 7E 
1c0e0     7E 66 3E 02 | 	byte	$76, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $66, $3e, $02
1c0e4     BE 80 80 80 
1c0e8     80 80 80 80 
1c0ec     80 80 80 80 
1c0f0     80 9A BE CE | 	byte	$be, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $9a, $be, $ce
1c0f4     E4 00 0E 0E 
1c0f8     02 0E 24 42 
1c0fc     72 7E 7E 7E 
1c100     7E 7E 7E 7E | 	byte	$e4, $00, $0e, $0e, $02, $0e, $24, $42, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e
1c104     7E 7E 7E 7E 
1c108     7E 7E       | 	byte	$7e[6]
1c10a     76 66 5C 58 
1c10e     58 58 58 58 
1c112     4C 42 42 3E 
1c116     24 02 EE D4 | 	byte	$76, $66, $5c, $58, $58, $58, $58, $58, $4c, $42, $42, $3e, $24, $02, $ee, $d4
1c11a     CE D4 E4 EE 
1c11e     F2 EE E4 CE 
1c122     A8 80 80 80 
1c126     80 80 80 80 | 	byte	$ce, $d4, $e4, $ee, $f2, $ee, $e4, $ce, $a8, $80, $80, $80, $80, $80, $80, $80
1c12a     80 80 80 80 
1c12e     80 80 80 80 
1c132     80 80 80 80 
1c136     80 80 80 80 
1c13a     80 80 80 80 
1c13e     80 80 80 80 
1c142     80          | 	byte	$80[25]
1c143     8E 9A A8 BE 
1c147     BE C2 D4 F2 
1c14b     12 32 3E 3E 
1c14f     3E 42 58 72 | 	byte	$8e, $9a, $a8, $be, $be, $c2, $d4, $f2, $12, $32, $3e, $3e, $3e, $42, $58, $72
1c153     7E 7E 7E 7E 
1c157     7E 7E 7E 7E 
1c15b     7E 7E 7E 7E | 	byte	$7e[12]
1c15f     76 5C 2C EE 
1c163     B4 80 80 80 
1c167     80 80 80 80 
1c16b     80 80 80 80 | 	byte	$76, $5c, $2c, $ee, $b4, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c16f     80 9A B4 CE 
1c173     E4 00 02 02 
1c177     02 12 2C 4C 
1c17b     72 7E 7E 7E | 	byte	$80, $9a, $b4, $ce, $e4, $00, $02, $02, $02, $12, $2c, $4c, $72, $7e, $7e, $7e
1c17f     7E 7E 7E 7E 
1c183     7E 7E 7E 7E 
1c187     7E 7E       | 	byte	$7e[10]
1c189     72 66 58 58 
1c18d     58 58 58 58 
1c191     4C 42 3E 32 
1c195     1C 02 E4 D4 | 	byte	$72, $66, $58, $58, $58, $58, $58, $58, $4c, $42, $3e, $32, $1c, $02, $e4, $d4
1c199     D4 DC E4 EE 
1c19d     EE E4 DC C2 
1c1a1     A4 80 80 80 
1c1a5     80 80 80 80 | 	byte	$d4, $dc, $e4, $ee, $ee, $e4, $dc, $c2, $a4, $80, $80, $80, $80, $80, $80, $80
1c1a9     80 80 80 80 
1c1ad     80 80 80 80 
1c1b1     80 80 80 80 
1c1b5     80 80 80 80 
1c1b9     80 80 80 80 
1c1bd     80 80 80    | 	byte	$80[23]
1c1c0     8A 8A 9A A4 
1c1c4     B4 BE C2 CE 
1c1c8     DC 00 1C 32 
1c1cc     3E 3E 3E 4C | 	byte	$8a, $8a, $9a, $a4, $b4, $be, $c2, $ce, $dc, $00, $1c, $32, $3e, $3e, $3e, $4c
1c1d0     5C 72 7E 7E 
1c1d4     7E 7E 7E 7E 
1c1d8     7E 7E 7E 7E 
1c1dc     7E 7E 66 42 | 	byte	$5c, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $66, $42
1c1e0     1C E4 A8 80 
1c1e4     80 80 80 80 
1c1e8     80 80 80 80 
1c1ec     80 80 80 9A | 	byte	$1c, $e4, $a8, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $9a
1c1f0     B4 CE E4 F2 
1c1f4     00 02 02 12 
1c1f8     32 58 72 7E 
1c1fc     7E 7E 7E 7E | 	byte	$b4, $ce, $e4, $f2, $00, $02, $02, $12, $32, $58, $72, $7e, $7e, $7e, $7e, $7e
1c200     7E 7E 7E 7E 
1c204     7E 7E 7E    | 	byte	$7e[7]
1c207     76 72 5C 58 
1c20b     58 58 58 58 
1c20f     4C 42 42 3E 
1c213     2C 12 00 EE | 	byte	$76, $72, $5c, $58, $58, $58, $58, $58, $4c, $42, $42, $3e, $2c, $12, $00, $ee
1c217     DC DC DC E4 
1c21b     EE EE E4 D4 
1c21f     BE 9A 80 80 
1c223     80 80 80 80 | 	byte	$dc, $dc, $dc, $e4, $ee, $ee, $e4, $d4, $be, $9a, $80, $80, $80, $80, $80, $80
1c227     80 80 80 80 
1c22b     80 80 80 80 
1c22f     80 80 80 80 
1c233     80 80 80 80 
1c237     80 80 80 80 
1c23b     80 80 80    | 	byte	$80[23]
1c23e     8A 8A 8E 9A 
1c242     A8 BE C2 CE 
1c246     D4 EE 02 24 
1c24a     32 3E 3E 42 | 	byte	$8a, $8a, $8e, $9a, $a8, $be, $c2, $ce, $d4, $ee, $02, $24, $32, $3e, $3e, $42
1c24e     58 66 76 7E 
1c252     7E 7E 7E 7E 
1c256     7E 7E 7E 7E 
1c25a     7E 7E 76 5C | 	byte	$58, $66, $76, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $76, $5c
1c25e     3E 02 D4 A4 
1c262     80 80 80 80 
1c266     80 80 80 80 
1c26a     80 80 80 80 | 	byte	$3e, $02, $d4, $a4, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c26e     9A B4 CE E4 
1c272     EE FE 00 0E 
1c276     1C 32 58 72 
1c27a     76 7E 7E 7E | 	byte	$9a, $b4, $ce, $e4, $ee, $fe, $00, $0e, $1c, $32, $58, $72, $76, $7e, $7e, $7e
1c27e     7E 7E 7E 7E 
1c282     7E 7E 7E 7E | 	byte	$7e[8]
1c286     76 66 5C 58 
1c28a     58 58 58 58 
1c28e     4C 42 3E 32 
1c292     24 12 00 EE | 	byte	$76, $66, $5c, $58, $58, $58, $58, $58, $4c, $42, $3e, $32, $24, $12, $00, $ee
1c296     DC DC E4 E4 
1c29a     EE E4 DC CE 
1c29e     B4 8E 80 80 
1c2a2     80 80 80 80 | 	byte	$dc, $dc, $e4, $e4, $ee, $e4, $dc, $ce, $b4, $8e, $80, $80, $80, $80, $80, $80
1c2a6     80 80 80 80 
1c2aa     80 80 80 80 
1c2ae     80 80 80 80 
1c2b2     80 80 80 80 
1c2b6     80 80 80 80 
1c2ba     80 80 80    | 	byte	$80[23]
1c2bd     8A 8E 9A A4 
1c2c1     B4 BE C2 CE 
1c2c5     DC F2 0E 24 
1c2c9     32 3E 42 4C | 	byte	$8a, $8e, $9a, $a4, $b4, $be, $c2, $ce, $dc, $f2, $0e, $24, $32, $3e, $42, $4c
1c2cd     5C 72 7E 7E 
1c2d1     7E 7E 7E 7E 
1c2d5     7E 7E 7E 7E 
1c2d9     7E 7E 66 4C | 	byte	$5c, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $66, $4c
1c2dd     24 00 C2 9A 
1c2e1     80 80 80 80 
1c2e5     80 80 80 80 
1c2e9     80 80 80 80 | 	byte	$24, $00, $c2, $9a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c2ed     9A B4 CE DC 
1c2f1     EE F2 00 0E 
1c2f5     1C 32 58 66 
1c2f9     72 76 76 7E | 	byte	$9a, $b4, $ce, $dc, $ee, $f2, $00, $0e, $1c, $32, $58, $66, $72, $76, $76, $7e
1c2fd     7E 7E 7E 7E 
1c301     7E 7E 7E    | 	byte	$7e[7]
1c304     76 72 66 5C 
1c308     58 58 58 58 
1c30c     4C 42 42 3E 
1c310     32 24 0E 00 | 	byte	$76, $72, $66, $5c, $58, $58, $58, $58, $4c, $42, $42, $3e, $32, $24, $0e, $00
1c314     EE E4 E4 E4 
1c318     E4 E4 E4 D4 
1c31c     C2 A8 8E 80 
1c320     80 80 80 80 | 	byte	$ee, $e4, $e4, $e4, $e4, $e4, $e4, $d4, $c2, $a8, $8e, $80, $80, $80, $80, $80
1c324     80 80 80 80 
1c328     80 80 80 80 
1c32c     80 80 80 80 
1c330     80 80 80 80 
1c334     80 80 80 80 
1c338     80 80 80    | 	byte	$80[23]
1c33b     8A 8E 8E A4 
1c33f     A8 BE C2 CE 
1c343     D4 E4 00 12 
1c347     2C 32 3E 42 | 	byte	$8a, $8e, $8e, $a4, $a8, $be, $c2, $ce, $d4, $e4, $00, $12, $2c, $32, $3e, $42
1c34b     58 66 72 7E 
1c34f     7E 7E 7E 7E 
1c353     7E 7E 7E 7E 
1c357     7E 7E 72 5C | 	byte	$58, $66, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $72, $5c
1c35b     3E 12 EE BE 
1c35f     8E 80 80 80 
1c363     80 80 80 80 
1c367     80 80 80 80 | 	byte	$3e, $12, $ee, $be, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c36b     80 9A B4 C2 
1c36f     DC E4 F2 00 
1c373     0E 24 3E 58 
1c377     66 72 72 76 | 	byte	$80, $9a, $b4, $c2, $dc, $e4, $f2, $00, $0e, $24, $3e, $58, $66, $72, $72, $76
1c37b     76 7E 7E 7E 
1c37f     7E 76 76 76 
1c383     72 72 5C 5C 
1c387     58 58 58 4C | 	byte	$76, $7e, $7e, $7e, $7e, $76, $76, $76, $72, $72, $5c, $5c, $58, $58, $58, $4c
1c38b     4C 42 3E 32 
1c38f     2C 1C 0E 00 
1c393     EE E4 E4 E4 
1c397     E4 E4 DC D4 | 	byte	$4c, $42, $3e, $32, $2c, $1c, $0e, $00, $ee, $e4, $e4, $e4, $e4, $e4, $dc, $d4
1c39b     C2 A8 8A 80 
1c39f     80 80 80 80 
1c3a3     80 80 80 80 
1c3a7     80 80 80 80 | 	byte	$c2, $a8, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c3ab     80 80 80 80 
1c3af     80 80 80 80 
1c3b3     80 80 80 80 
1c3b7     80 80       | 	byte	$80[14]
1c3b9     8A 8A 8E 9A 
1c3bd     A4 B4 BE C2 
1c3c1     D4 DC EE 02 
1c3c5     1C 2C 32 42 | 	byte	$8a, $8a, $8e, $9a, $a4, $b4, $be, $c2, $d4, $dc, $ee, $02, $1c, $2c, $32, $42
1c3c9     4C 58 66 76 
1c3cd     7E 7E 7E 7E 
1c3d1     7E 7E 7E 7E 
1c3d5     7E 7E 7E 66 | 	byte	$4c, $58, $66, $76, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $66
1c3d9     4C 2C 0E DC 
1c3dd     B4 8E 80 80 
1c3e1     80 80 80 80 
1c3e5     80 80 80 80 | 	byte	$4c, $2c, $0e, $dc, $b4, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c3e9     80 80 9A A8 
1c3ed     C2 D4 E4 EE 
1c3f1     00 0E 24 3E 
1c3f5     4C 5C 66 72 | 	byte	$80, $80, $9a, $a8, $c2, $d4, $e4, $ee, $00, $0e, $24, $3e, $4c, $5c, $66, $72
1c3f9     72 76 76 7E 
1c3fd     76 76 76 76 
1c401     76 72 66 5C 
1c405     58 58 58 4C | 	byte	$72, $76, $76, $7e, $76, $76, $76, $76, $76, $72, $66, $5c, $58, $58, $58, $4c
1c409     4C 42 42 3E 
1c40d     32 24 1C 02 
1c411     00 EE EE E4 
1c415     EE E4 E4 DC | 	byte	$4c, $42, $42, $3e, $32, $24, $1c, $02, $00, $ee, $ee, $e4, $ee, $e4, $e4, $dc
1c419     CE BE A4 8A 
1c41d     80 80 80 80 
1c421     80 80 80 80 
1c425     80 80 80 80 | 	byte	$ce, $be, $a4, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c429     80 80 80 80 
1c42d     80 80 80 80 
1c431     80 80 80 80 
1c435     80 80 80    | 	byte	$80[15]
1c438     8A 8E 9A A4 
1c43c     A8 BE C2 CE 
1c440     D4 E4 F2 0E 
1c444     1C 2C 3E 42 | 	byte	$8a, $8e, $9a, $a4, $a8, $be, $c2, $ce, $d4, $e4, $f2, $0e, $1c, $2c, $3e, $42
1c448     58 5C 72 7E 
1c44c     7E 7E 7E 7E 
1c450     7E 7E 7E 7E 
1c454     7E 7E 72 5C | 	byte	$58, $5c, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $72, $5c
1c458     42 1C 00 D4 
1c45c     A8 8A 80 80 
1c460     80 80 80 80 
1c464     80 80 80 80 | 	byte	$42, $1c, $00, $d4, $a8, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c468     80 80 9A A8 
1c46c     C2 D4 E4 EE 
1c470     00 0E 24 32 
1c474     4C 58 5C 66 | 	byte	$80, $80, $9a, $a8, $c2, $d4, $e4, $ee, $00, $0e, $24, $32, $4c, $58, $5c, $66
1c478     72 72 76 76 
1c47c     76 76 76 72 
1c480     72 72 66 5C 
1c484     58 58 4C 4C | 	byte	$72, $72, $76, $76, $76, $76, $76, $72, $72, $72, $66, $5c, $58, $58, $4c, $4c
1c488     4C 42 3E 3E 
1c48c     2C 24 12 02 
1c490     F2 EE EE EE 
1c494     EE E4 E4 D4 | 	byte	$4c, $42, $3e, $3e, $2c, $24, $12, $02, $f2, $ee, $ee, $ee, $ee, $e4, $e4, $d4
1c498     CE B4 A4 8E 
1c49c     80 80 80 80 
1c4a0     80 80 80 80 
1c4a4     80 80 80 80 | 	byte	$ce, $b4, $a4, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c4a8     80 80 80 80 
1c4ac     80 80 80 80 
1c4b0     80 80 80 80 
1c4b4     80 80       | 	byte	$80[14]
1c4b6     8A 8E 9A A4 
1c4ba     A8 B4 BE CE 
1c4be     D4 DC EE 00 
1c4c2     12 24 32 3E | 	byte	$8a, $8e, $9a, $a4, $a8, $b4, $be, $ce, $d4, $dc, $ee, $00, $12, $24, $32, $3e
1c4c6     4C 58 66 72 
1c4ca     7E 7E 7E 7E 
1c4ce     7E 7E 7E 7E 
1c4d2     7E 7E 76 66 | 	byte	$4c, $58, $66, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $76, $66
1c4d6     4C 30 0E EE 
1c4da     CE A8 8A 80 
1c4de     80 80 80 80 
1c4e2     80 80 80 80 | 	byte	$4c, $30, $0e, $ee, $ce, $a8, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c4e6     80 80 84 9E 
1c4ea     A8 BE CE DC 
1c4ee     EE 00 0A 20 
1c4f2     30 3A 50 54 | 	byte	$80, $80, $84, $9e, $a8, $be, $ce, $dc, $ee, $00, $0a, $20, $30, $3a, $50, $54
1c4f6     54 60 6A 66 
1c4fa     66 66 66 66 
1c4fe     66 66 5C 54 
1c502     54 50 4C 46 | 	byte	$54, $60, $6a, $66, $66, $66, $66, $66, $66, $66, $5c, $54, $54, $50, $4c, $46
1c506     46 3A 3A 36 
1c50a     2C 24 18 0E 
1c50e     00 00 F2 EE 
1c512     EE EE E4 E0 | 	byte	$46, $3a, $3a, $36, $2c, $24, $18, $0e, $00, $00, $f2, $ee, $ee, $ee, $e4, $e0
1c516     D8 C6 BA AC 
1c51a     9A 8E 86 80 
1c51e     80 80 86 86 
1c522     84 84 80 80 | 	byte	$d8, $c6, $ba, $ac, $9a, $8e, $86, $80, $80, $80, $86, $86, $84, $84, $80, $80
1c526     80 80 80 80 
1c52a     80 80 80 80 | 	byte	$80[8]
1c52e     84 84 8A 8A 
1c532     8A 92 9E A0 
1c536     A8 B4 B6 BE 
1c53a     CA CA D4 E0 | 	byte	$84, $84, $8a, $8a, $8a, $92, $9e, $a0, $a8, $b4, $b6, $be, $ca, $ca, $d4, $e0
1c53e     E8 F2 00 0E 
1c542     1C 28 32 3A 
1c546     4A 50 5C 6A 
1c54a     72 7E 7E 7E | 	byte	$e8, $f2, $00, $0e, $1c, $28, $32, $3a, $4a, $50, $5c, $6a, $72, $7e, $7e, $7e
1c54e     7E 7C 76 6A 
1c552     62 58 46 32 
1c556     18 00 E8 CE 
1c55a     B6 A4 8E 84 | 	byte	$7e, $7c, $76, $6a, $62, $58, $46, $32, $18, $00, $e8, $ce, $b6, $a4, $8e, $84
1c55e     80 80 80 80 
1c562     80 80 80    | 	byte	$80[7]
1c565     84 92 9E A8 
1c569     BE CE D8 E4 
1c56d     F2 FE 06 18 
1c571     24 30 36 3E | 	byte	$84, $92, $9e, $a8, $be, $ce, $d8, $e4, $f2, $fe, $06, $18, $24, $30, $36, $3e
1c575     42 4A 4A 4A 
1c579     50 50 50 50 
1c57d     50 46 46 3E 
1c581     3A 3A 32 32 | 	byte	$42, $4a, $4a, $4a, $50, $50, $50, $50, $50, $46, $46, $3e, $3a, $3a, $32, $32
1c585     32 2C 28 28 
1c589     20 16 12 06 
1c58d     00 00 F6 F2 
1c591     F2 EA EA E8 | 	byte	$32, $2c, $28, $28, $20, $16, $12, $06, $00, $00, $f6, $f2, $f2, $ea, $ea, $e8
1c595     E4 D4 CE C2 
1c599     B4 B0 AC A4 
1c59d     A4 A4 A4 A8 
1c5a1     A8 A0 9E 96 | 	byte	$e4, $d4, $ce, $c2, $b4, $b0, $ac, $a4, $a4, $a4, $a4, $a8, $a8, $a0, $9e, $96
1c5a5     96 96 96 96 
1c5a9     96          | 	byte	$96[5]
1c5aa     9E A0 A4 A4 
1c5ae     A8 A8 B0 B0 
1c5b2     B6 B6 B6 BE 
1c5b6     C6 CA D0 D8 | 	byte	$9e, $a0, $a4, $a4, $a8, $a8, $b0, $b0, $b6, $b6, $b6, $be, $c6, $ca, $d0, $d8
1c5ba     E0 E4 EA F6 
1c5be     FE 06 0E 18 
1c5c2     24 24 32 32 
1c5c6     3A 42 4C 50 | 	byte	$e0, $e4, $ea, $f6, $fe, $06, $0e, $18, $24, $24, $32, $32, $3a, $42, $4c, $50
1c5ca     5C 5C 5C 5C 
1c5ce     54 50 4C 42 
1c5d2     36 28 20 0E 
1c5d6     00 EA DC C6 | 	byte	$5c, $5c, $5c, $5c, $54, $50, $4c, $42, $36, $28, $20, $0e, $00, $ea, $dc, $c6
1c5da     B6 B0 A4 A4 
1c5de     9E 9E 9E 9E 
1c5e2     9E A0 A8 B4 
1c5e6     BA C2 D0 DC | 	byte	$b6, $b0, $a4, $a4, $9e, $9e, $9e, $9e, $9e, $a0, $a8, $b4, $ba, $c2, $d0, $dc
1c5ea     E4 EA F6 FE 
1c5ee     06 0E 18 1C 
1c5f2     24 2C 2C 2C 
1c5f6     32 32 32 30 | 	byte	$e4, $ea, $f6, $fe, $06, $0e, $18, $1c, $24, $2c, $2c, $2c, $32, $32, $32, $30
1c5fa     30 30 30 30 
1c5fe     2C 2C 28 24 
1c602     24 24 1C 1C 
1c606     1C 16 12 0E | 	byte	$30, $30, $30, $30, $2c, $2c, $28, $24, $24, $24, $1c, $1c, $1c, $16, $12, $0e
1c60a     0A 02 00 00 
1c60e     FA F6 F6 F2 
1c612     F2 EE E8 E4 
1c616     DC D4 CE CA | 	byte	$0a, $02, $00, $00, $fa, $f6, $f6, $f2, $f2, $ee, $e8, $e4, $dc, $d4, $ce, $ca
1c61a     C6 C6 C6 C6 
1c61e     C6 C6 C6    | 	byte	$c6[7]
1c621     C2 BE BE BA 
1c625     BA BA BA BE 
1c629     BE C2 C6 C6 
1c62d     CA CA CA D0 | 	byte	$c2, $be, $be, $ba, $ba, $ba, $ba, $be, $be, $c2, $c6, $c6, $ca, $ca, $ca, $d0
1c631     D0 D0 D4 DC 
1c635     DC E0 E4 E8 
1c639     EE F2 F2 FA 
1c63d     00 02 0A 0E | 	byte	$d0, $d0, $d4, $dc, $dc, $e0, $e4, $e8, $ee, $f2, $f2, $fa, $00, $02, $0a, $0e
1c641     16 16 1C 20 
1c645     28 28 30 32 
1c649     32 36 36 32 
1c64d     30 30 2C 24 | 	byte	$16, $16, $1c, $20, $28, $28, $30, $32, $32, $36, $36, $32, $30, $30, $2c, $24
1c651     1C 16 0E 02 
1c655     FA EE E8 DC 
1c659     D4 CE CA CA 
1c65d     C6 C6 C6 C6 | 	byte	$1c, $16, $0e, $02, $fa, $ee, $e8, $dc, $d4, $ce, $ca, $ca, $c6, $c6, $c6, $c6
1c661     C6 C6 CE D0 
1c665     D8 DC E4 EA 
1c669     EE F2 FA FE 
1c66d     02 06 0A 12 | 	byte	$c6, $c6, $ce, $d0, $d8, $dc, $e4, $ea, $ee, $f2, $fa, $fe, $02, $06, $0a, $12
1c671     12 16 16 18 
1c675     18 18 18 18 
1c679     18 18 18 16 
1c67d     16 16 16 12 | 	byte	$12, $16, $16, $18, $18, $18, $18, $18, $18, $18, $18, $16, $16, $16, $16, $12
1c681     12 0E 0E 0E 
1c685     0E 0A 0A 06 
1c689     02 00 00 00 
1c68d     FE FA FA FA | 	byte	$12, $0e, $0e, $0e, $0e, $0a, $0a, $06, $02, $00, $00, $00, $fe, $fa, $fa, $fa
1c691     FA F6 F2 F2 
1c695     EE EA E8 E4 
1c699     E4 E4 E4 E4 
1c69d     E4 E4 E0 E0 | 	byte	$fa, $f6, $f2, $f2, $ee, $ea, $e8, $e4, $e4, $e4, $e4, $e4, $e4, $e4, $e0, $e0
1c6a1     E0 E0 E0 E0 
1c6a5     E0 E0 E0    | 	byte	$e0[7]
1c6a8     E4 E4 E4 E8 
1c6ac     E8 E8 E8 E8 
1c6b0     EA EA EE EE 
1c6b4     F2 F2 F6 F6 | 	byte	$e4, $e4, $e4, $e8, $e8, $e8, $e8, $e8, $ea, $ea, $ee, $ee, $f2, $f2, $f6, $f6
1c6b8     F6 FA FE FE 
1c6bc     00 00 02 06 
1c6c0     06 0A 0A 0E 
1c6c4     0E 12 12 12 | 	byte	$f6, $fa, $fe, $fe, $00, $00, $02, $06, $06, $0a, $0a, $0e, $0e, $12, $12, $12
1c6c8     12 12 12 12 
1c6cc     0E 0E 0E 0A 
1c6d0     06 06 02 00 
1c6d4     FE FA F6 F2 | 	byte	$12, $12, $12, $12, $0e, $0e, $0e, $0a, $06, $06, $02, $00, $fe, $fa, $f6, $f2
1c6d8     F2 EE EA EA 
1c6dc     EA EA EA EA 
1c6e0     EA EA EE F2 
1c6e4     F2 F6 F6 FA | 	byte	$f2, $ee, $ea, $ea, $ea, $ea, $ea, $ea, $ea, $ea, $ee, $f2, $f2, $f6, $f6, $fa
1c6e8     FA FA FE FE 
1c6ec     00 00 00 02 
1c6f0     02 02 02 02 
1c6f4     02 02 02 02 | 	byte	$fa, $fa, $fe, $fe, $00, $00, $00, $02, $02, $02, $02, $02, $02, $02, $02, $02
1c6f8     02 02 02 02 
1c6fc     02 02       | 	byte	$02[6]
1c6fe     00 00 00 00 
1c702     00 00 00 00 
1c706     00 00 00 00 
1c70a     00 00       | 	byte	$00[14]
1c70c     FE FE FE FE 
1c710     FE FE FE FE 
1c714     FE FE FE FE 
1c718     FE FE       | 	byte	$fe[14]
1c71a     00 00 00 00 
1c71e     00 00 00 00 
1c722     00 00 00 00 
1c726     00 00       | 	byte	$00[14]
1c728     03 05 06 07 
1c72c     05 02 00 00 
1c730     00 00 00 00 
1c734     00 00 00 FF | 	byte	$03, $05, $06, $07, $05, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff
1c738     FE FC FA F9 
1c73c     FA FC FC FD 
1c740     FE FF FF FD 
1c744     FB FA FA FD | 	byte	$fe, $fc, $fa, $f9, $fa, $fc, $fc, $fd, $fe, $ff, $ff, $fd, $fb, $fa, $fa, $fd
1c748     00 01 02 04 
1c74c     05 07 07 06 
1c750     04 01 00 00 
1c754     00 00 00 00 | 	byte	$00, $01, $02, $04, $05, $07, $07, $06, $04, $01, $00, $00, $00, $00, $00, $00
1c758     FF FE FE 00 
1c75c     01 02 03 03 
1c760     05 08 09 07 
1c764     05 05 03 00 | 	byte	$ff, $fe, $fe, $00, $01, $02, $03, $03, $05, $08, $09, $07, $05, $05, $03, $00
1c768     FF FD FE FE 
1c76c     FE FD F9 F3 
1c770     F0 EF F0 F1 
1c774     F2 F4 F5 F6 | 	byte	$ff, $fd, $fe, $fe, $fe, $fd, $f9, $f3, $f0, $ef, $f0, $f1, $f2, $f4, $f5, $f6
1c778     F8 FB FE 00 
1c77c     00 03 0A 0F 
1c780     12 10 0D 09 
1c784     08 0A 0D 0E | 	byte	$f8, $fb, $fe, $00, $00, $03, $0a, $0f, $12, $10, $0d, $09, $08, $0a, $0d, $0e
1c788     0C 0B 09 04 
1c78c     00 FE FC FB 
1c790     FB FA FB FE 
1c794     FF 00 00 03 | 	byte	$0c, $0b, $09, $04, $00, $fe, $fc, $fb, $fb, $fa, $fb, $fe, $ff, $00, $00, $03
1c798     09 0E 13 14 
1c79c     11 0E 0F 0F 
1c7a0     10 13 17 1C 
1c7a4     1E 20 20 1D | 	byte	$09, $0e, $13, $14, $11, $0e, $0f, $0f, $10, $13, $17, $1c, $1e, $20, $20, $1d
1c7a8     1E 23 27 24 
1c7ac     1D 15 12 15 
1c7b0     18 1B 19 14 
1c7b4     12 11 0F 0C | 	byte	$1e, $23, $27, $24, $1d, $15, $12, $15, $18, $1b, $19, $14, $12, $11, $0f, $0c
1c7b8     09 06 06 06 
1c7bc     08 0D 12 16 
1c7c0     18 16 13 0F 
1c7c4     0B 0B 10 14 | 	byte	$09, $06, $06, $06, $08, $0d, $12, $16, $18, $16, $13, $0f, $0b, $0b, $10, $14
1c7c8     14 15 16 15 
1c7cc     14 14 13 15 
1c7d0     14 0F 08 04 
1c7d4     05 08 06 02 | 	byte	$14, $15, $16, $15, $14, $14, $13, $15, $14, $0f, $08, $04, $05, $08, $06, $02
1c7d8     02 02 FD F4 
1c7dc     F0 F0 EE EB 
1c7e0     EA F1 F6 F4 
1c7e4     EF EA E4 DD | 	byte	$02, $02, $fd, $f4, $f0, $f0, $ee, $eb, $ea, $f1, $f6, $f4, $ef, $ea, $e4, $dd
1c7e8     DA DE E4 E3 
1c7ec     DD DD E0 DF 
1c7f0     DF E1 E5 E3 
1c7f4     E3 E8 E8 E6 | 	byte	$da, $de, $e4, $e3, $dd, $dd, $e0, $df, $df, $e1, $e5, $e3, $e3, $e8, $e8, $e6
1c7f8     E5 E5 ED F6 
1c7fc     FB 00 05 0D 
1c800     13 19 1B 1F 
1c804     22 25 27 28 | 	byte	$e5, $e5, $ed, $f6, $fb, $00, $05, $0d, $13, $19, $1b, $1f, $22, $25, $27, $28
1c808     25 21 1E 1D 
1c80c     1B 1D 1F 22 
1c810     1E 18 15 11 
1c814     08 FE FA FC | 	byte	$25, $21, $1e, $1d, $1b, $1d, $1f, $22, $1e, $18, $15, $11, $08, $fe, $fa, $fc
1c818     02 08 0F 11 
1c81c     11 13 15 19 
1c820     1E 24 2A 2B 
1c824     2A 2B 31 37 | 	byte	$02, $08, $0f, $11, $11, $13, $15, $19, $1e, $24, $2a, $2b, $2a, $2b, $31, $37
1c828     3F 44 45 3B 
1c82c     2B 1E 19 18 
1c830     18 19 1A 1B 
1c834     19 14 0C 07 | 	byte	$3f, $44, $45, $3b, $2b, $1e, $19, $18, $18, $19, $1a, $1b, $19, $14, $0c, $07
1c838     03 00 FF 01 
1c83c     05 06 07 0B 
1c840     0C 07 01 00 
1c844     02 05 05 06 | 	byte	$03, $00, $ff, $01, $05, $06, $07, $0b, $0c, $07, $01, $00, $02, $05, $05, $06
1c848     07 07 06 07 
1c84c     0A 0D 0E 0D 
1c850     09 05 01 FE 
1c854     FD FC FB FA | 	byte	$07, $07, $06, $07, $0a, $0d, $0e, $0d, $09, $05, $01, $fe, $fd, $fc, $fb, $fa
1c858     FB FD FF 03 
1c85c     08 09 05 04 
1c860     06 04 01 FD 
1c864     FC F8 F4 F2 | 	byte	$fb, $fd, $ff, $03, $08, $09, $05, $04, $06, $04, $01, $fd, $fc, $f8, $f4, $f2
1c868     F2 F0 EC EA 
1c86c     EA E7 DE D8 
1c870     D7 DC E0 E3 
1c874     E4 E2 E1 E2 | 	byte	$f2, $f0, $ec, $ea, $ea, $e7, $de, $d8, $d7, $dc, $e0, $e3, $e4, $e2, $e1, $e2
1c878     E7 F2 F8 FB 
1c87c     00 0B 18 1F 
1c880     23 1E 19 16 
1c884     19 20 25 24 | 	byte	$e7, $f2, $f8, $fb, $00, $0b, $18, $1f, $23, $1e, $19, $16, $19, $20, $25, $24
1c888     21 1A 13 10 
1c88c     10 10 0F 0D 
1c890     0F 15 17 13 
1c894     0B 06 05 06 | 	byte	$21, $1a, $13, $10, $10, $10, $0f, $0d, $0f, $15, $17, $13, $0b, $06, $05, $06
1c898     03 01 FB F4 
1c89c     F0 F0 F3 F7 
1c8a0     FC 00 03 07 
1c8a4     0A 0C 0B 0F | 	byte	$03, $01, $fb, $f4, $f0, $f0, $f3, $f7, $fc, $00, $03, $07, $0a, $0c, $0b, $0f
1c8a8     18 20 23 22 
1c8ac     1F 1A 19 1A 
1c8b0     1C 1A 19 1B 
1c8b4     1A 18 16 17 | 	byte	$18, $20, $23, $22, $1f, $1a, $19, $1a, $1c, $1a, $19, $1b, $1a, $18, $16, $17
1c8b8     19 1B 19 18 
1c8bc     1C 24 2C 32 
1c8c0     33 32 31 30 
1c8c4     32 35 37 37 | 	byte	$19, $1b, $19, $18, $1c, $24, $2c, $32, $33, $32, $31, $30, $32, $35, $37, $37
1c8c8     36 35 35 36 
1c8cc     35 32 32 30 
1c8d0     2B 25 23 1F 
1c8d4     1B 16 11 0E | 	byte	$36, $35, $35, $36, $35, $32, $32, $30, $2b, $25, $23, $1f, $1b, $16, $11, $0e
1c8d8     0C 09 04 02 
1c8dc     01 00 FD FC 
1c8e0     FE FF FD F9 
1c8e4     F3 ED E8 E5 | 	byte	$0c, $09, $04, $02, $01, $00, $fd, $fc, $fe, $ff, $fd, $f9, $f3, $ed, $e8, $e5
1c8e8     E4 E5 E0 D6 
1c8ec     D0 CC C5 BC 
1c8f0     B6 B5 B7 BF 
1c8f4     C2 BE BA B7 | 	byte	$e4, $e5, $e0, $d6, $d0, $cc, $c5, $bc, $b6, $b5, $b7, $bf, $c2, $be, $ba, $b7
1c8f8     B9 C2 CD D4 
1c8fc     D7 DC E6 EE 
1c900     F4 F9 FE FE 
1c904     01 08 11 16 | 	byte	$b9, $c2, $cd, $d4, $d7, $dc, $e6, $ee, $f4, $f9, $fe, $fe, $01, $08, $11, $16
1c908     17 18 18 1A 
1c90c     20 25 26 24 
1c910     22 1F 1C 17 
1c914     11 0D 11 17 | 	byte	$17, $18, $18, $1a, $20, $25, $26, $24, $22, $1f, $1c, $17, $11, $0d, $11, $17
1c918     18 16 0F 07 
1c91c     03 04 09 10 
1c920     19 1F 21 22 
1c924     22 24 28 30 | 	byte	$18, $16, $0f, $07, $03, $04, $09, $10, $19, $1f, $21, $22, $22, $24, $28, $30
1c928     38 3F 3F 3B 
1c92c     37 33 2F 30 
1c930     2F 2D 2C 29 
1c934     23 1A 15 15 | 	byte	$38, $3f, $3f, $3b, $37, $33, $2f, $30, $2f, $2d, $2c, $29, $23, $1a, $15, $15
1c938     17 19 1B 1A 
1c93c     16 16 18 14 
1c940     0E 0D 12 1D 
1c944     26 29 26 20 | 	byte	$17, $19, $1b, $1a, $16, $16, $18, $14, $0e, $0d, $12, $1d, $26, $29, $26, $20
1c948     1D 19 15 13 
1c94c     13 13 13 11 
1c950     0F 0B 06 03 
1c954     FF FB FA FB | 	byte	$1d, $19, $15, $13, $13, $13, $13, $11, $0f, $0b, $06, $03, $ff, $fb, $fa, $fb
1c958     F8 F4 F3 F5 
1c95c     F6 F5 F4 F2 
1c960     EF EC EA EA 
1c964     E6 DF DC E0 | 	byte	$f8, $f4, $f3, $f5, $f6, $f5, $f4, $f2, $ef, $ec, $ea, $ea, $e6, $df, $dc, $e0
1c968     DF DA D7 D7 
1c96c     D5 CE C8 C7 
1c970     C9 CA CB C9 
1c974     C7 C9 CA CF | 	byte	$df, $da, $d7, $d7, $d5, $ce, $c8, $c7, $c9, $ca, $cb, $c9, $c7, $c9, $ca, $cf
1c978     DA E2 E7 EC 
1c97c     F7 01 07 0C 
1c980     0E 10 10 16 
1c984     1F 28 2C 2A | 	byte	$da, $e2, $e7, $ec, $f7, $01, $07, $0c, $0e, $10, $10, $16, $1f, $28, $2c, $2a
1c988     28 29 2D 31 
1c98c     31 33 35 3B 
1c990     3C 3A 33 2B 
1c994     26 22 1E 17 | 	byte	$28, $29, $2d, $31, $31, $33, $35, $3b, $3c, $3a, $33, $2b, $26, $22, $1e, $17
1c998     0F 05 FD F8 
1c99c     F6 F7 F6 FA 
1c9a0     FB FB F9 F8 
1c9a4     FA FB 00 04 | 	byte	$0f, $05, $fd, $f8, $f6, $f7, $f6, $fa, $fb, $fb, $f9, $f8, $fa, $fb, $00, $04
1c9a8     0A 0D 0E 0C 
1c9ac     04 00 FF FC 
1c9b0     F6 F2 F4 F8 
1c9b4     FE 03 06 08 | 	byte	$0a, $0d, $0e, $0c, $04, $00, $ff, $fc, $f6, $f2, $f4, $f8, $fe, $03, $06, $08
1c9b8     0A 0C 0C 09 
1c9bc     06 06 08 0B 
1c9c0     10 17 1E 25 
1c9c4     2A 30 35 35 | 	byte	$0a, $0c, $0c, $09, $06, $06, $08, $0b, $10, $17, $1e, $25, $2a, $30, $35, $35
1c9c8     30 2D 31 34 
1c9cc     31 2B 27 27 
1c9d0     27 27 25 25 
1c9d4     24 24 25 28 | 	byte	$30, $2d, $31, $34, $31, $2b, $27, $27, $27, $27, $25, $25, $24, $24, $25, $28
1c9d8     28 24 20 1D 
1c9dc     1A 17 12 0C 
1c9e0     0B 0A 06 01 
1c9e4     01 02 00 FA | 	byte	$28, $24, $20, $1d, $1a, $17, $12, $0c, $0b, $0a, $06, $01, $01, $02, $00, $fa
1c9e8     F7 F6 F1 EA 
1c9ec     E2 DB D7 D5 
1c9f0     D4 D6 DC D9 
1c9f4     CF C7 C2 BD | 	byte	$f7, $f6, $f1, $ea, $e2, $db, $d7, $d5, $d4, $d6, $dc, $d9, $cf, $c7, $c2, $bd
1c9f8     BD C4 CC CE 
1c9fc     CF D4 DA DC 
1ca00     D8 D3 CD CF 
1ca04     D9 E6 F1 F7 | 	byte	$bd, $c4, $cc, $ce, $cf, $d4, $da, $dc, $d8, $d3, $cd, $cf, $d9, $e6, $f1, $f7
1ca08     FA FB FD 02 
1ca0c     07 0C 13 19 
1ca10     1A 1A 17 12 
1ca14     0C 0C 0D 08 | 	byte	$fa, $fb, $fd, $02, $07, $0c, $13, $19, $1a, $1a, $17, $12, $0c, $0c, $0d, $08
1ca18     FF F4 ED E7 
1ca1c     E2 E2 EC F8 
1ca20     FF 00 01 03 
1ca24     01 01 09 17 | 	byte	$ff, $f4, $ed, $e7, $e2, $e2, $ec, $f8, $ff, $00, $01, $03, $01, $01, $09, $17
1ca28     24 27 22 1F 
1ca2c     20 22 24 20 
1ca30     1C 1C 1B 19 
1ca34     19 1E 24 29 | 	byte	$24, $27, $22, $1f, $20, $22, $24, $20, $1c, $1c, $1b, $19, $19, $1e, $24, $29
1ca38     2B 2F 32 33 
1ca3c     32 31 2F 2E 
1ca40     2D 2F 38 43 
1ca44     4A 4B 4B 4D | 	byte	$2b, $2f, $32, $33, $32, $31, $2f, $2e, $2d, $2f, $38, $43, $4a, $4b, $4b, $4d
1ca48     4D 47 42 41 
1ca4c     40 3D 38 37 
1ca50     38 35 2D 25 
1ca54     23 1F 16 0B | 	byte	$4d, $47, $42, $41, $40, $3d, $38, $37, $38, $35, $2d, $25, $23, $1f, $16, $0b
1ca58     04 04 06 04 
1ca5c     FF F8 F5 F4 
1ca60     F0 EA E4 DC 
1ca64     D0 C9 CC CD | 	byte	$04, $04, $06, $04, $ff, $f8, $f5, $f4, $f0, $ea, $e4, $dc, $d0, $c9, $cc, $cd
1ca68     C9 C1 BD B8 
1ca6c     B1 AA A3 A1 
1ca70     A1 A4 A6 A4 
1ca74     A4 A4 A3 A9 | 	byte	$c9, $c1, $bd, $b8, $b1, $aa, $a3, $a1, $a1, $a4, $a6, $a4, $a4, $a4, $a3, $a9
1ca78     B1 B8 BF C6 
1ca7c     CD CD CF D1 
1ca80     D4 D8 E0 EA 
1ca84     F4 FD 04 0B | 	byte	$b1, $b8, $bf, $c6, $cd, $cd, $cf, $d1, $d4, $d8, $e0, $ea, $f4, $fd, $04, $0b
1ca88     12 18 1F 26 
1ca8c     31 3B 44 4D 
1ca90     52 52 4E 4A 
1ca94     48 48 43 3E | 	byte	$12, $18, $1f, $26, $31, $3b, $44, $4d, $52, $52, $4e, $4a, $48, $48, $43, $3e
1ca98     34 2A 23 1E 
1ca9c     1D 1B 19 19 
1caa0     1B 1B 18 14 
1caa4     16 1E 25 2A | 	byte	$34, $2a, $23, $1e, $1d, $1b, $19, $19, $1b, $1b, $18, $14, $16, $1e, $25, $2a
1caa8     2A 27 1F 16 
1caac     10 0E 0C 06 
1cab0     FE F4 F1 F1 
1cab4     F5 F5 F7 00 | 	byte	$2a, $27, $1f, $16, $10, $0e, $0c, $06, $fe, $f4, $f1, $f1, $f5, $f5, $f7, $00
1cab8     08 0D 0A 07 
1cabc     07 06 02 00 
1cac0     FF 00 01 04 
1cac4     0A 12 15 12 | 	byte	$08, $0d, $0a, $07, $07, $06, $02, $00, $ff, $00, $01, $04, $0a, $12, $15, $12
1cac8     14 1C 20 1E 
1cacc     19 16 15 14 
1cad0     11 11 12 10 
1cad4     0E 10 14 15 | 	byte	$14, $1c, $20, $1e, $19, $16, $15, $14, $11, $11, $12, $10, $0e, $10, $14, $15
1cad8     0E 06 01 00 
1cadc     FE F8 F2 F1 
1cae0     F2 F1 F1 F1 
1cae4     EC E6 E2 E3 | 	byte	$0e, $06, $01, $00, $fe, $f8, $f2, $f1, $f2, $f1, $f1, $f1, $ec, $e6, $e2, $e3
1cae8     E8 E7 E2 DD 
1caec     DC DC D9 D6 
1caf0     D8 DC DB D5 
1caf4     D2 D2 D1 D2 | 	byte	$e8, $e7, $e2, $dd, $dc, $dc, $d9, $d6, $d8, $dc, $db, $d5, $d2, $d2, $d1, $d2
1caf8     D2 D6 D5 D2 
1cafc     D1 D1 D2 CE 
1cb00     CD CE D8 E6 
1cb04     F2 FB FF 00 | 	byte	$d2, $d6, $d5, $d2, $d1, $d1, $d2, $ce, $cd, $ce, $d8, $e6, $f2, $fb, $ff, $00
1cb08     05 0B 12 17 
1cb0c     1E 26 34 3E 
1cb10     42 40 3A 35 
1cb14     33 33 30 2A | 	byte	$05, $0b, $12, $17, $1e, $26, $34, $3e, $42, $40, $3a, $35, $33, $33, $30, $2a
1cb18     21 19 0E 04 
1cb1c     00 00 00 00 
1cb20     FD FC FB FC 
1cb24     FF 08 14 19 | 	byte	$21, $19, $0e, $04, $00, $00, $00, $00, $fd, $fc, $fb, $fc, $ff, $08, $14, $19
1cb28     13 0A 03 00 
1cb2c     FD F7 F2 F0 
1cb30     EE E9 E3 E4 
1cb34     E8 EB F1 FA | 	byte	$13, $0a, $03, $00, $fd, $f7, $f2, $f0, $ee, $e9, $e3, $e4, $e8, $eb, $f1, $fa
1cb38     05 0E 12 10 
1cb3c     10 13 18 1E 
1cb40     20 24 29 30 
1cb44     34 38 3D 40 | 	byte	$05, $0e, $12, $10, $10, $13, $18, $1e, $20, $24, $29, $30, $34, $38, $3d, $40
1cb48     42 40 40 42 
1cb4c     46 47 47 47 
1cb50     45 44 47 48 
1cb54     45 3E 37 36 | 	byte	$42, $40, $40, $42, $46, $47, $47, $47, $45, $44, $47, $48, $45, $3e, $37, $36
1cb58     37 33 26 17 
1cb5c     0D 0B 09 08 
1cb60     07 04 FD F1 
1cb64     E5 DF D7 CC | 	byte	$37, $33, $26, $17, $0d, $0b, $09, $08, $07, $04, $fd, $f1, $e5, $df, $d7, $cc
1cb68     C2 BD BC B8 
1cb6c     B2 AF AD B0 
1cb70     AF AC A7 A0 
1cb74     9F 9F A2 A6 | 	byte	$c2, $bd, $bc, $b8, $b2, $af, $ad, $b0, $af, $ac, $a7, $a0, $9f, $9f, $a2, $a6
1cb78     A5 A6 A5 A7 
1cb7c     A8 A6 A0 9A 
1cb80     9D A3 AC B8 
1cb84     C6 D3 DA DE | 	byte	$a5, $a6, $a5, $a7, $a8, $a6, $a0, $9a, $9d, $a3, $ac, $b8, $c6, $d3, $da, $de
1cb88     E3 ED FC 09 
1cb8c     15 1D 28 36 
1cb90     41 46 49 4C 
1cb94     4E 4E 4D 47 | 	byte	$e3, $ed, $fc, $09, $15, $1d, $28, $36, $41, $46, $49, $4c, $4e, $4e, $4d, $47
1cb98     3D 38 36 35 
1cb9c     33 32 36 37 
1cba0     32 27 1F 22 
1cba4     2D 38 3D 3C | 	byte	$3d, $38, $36, $35, $33, $32, $36, $37, $32, $27, $1f, $22, $2d, $38, $3d, $3c
1cba8     37 33 2E 2C 
1cbac     28 22 1B 14 
1cbb0     0C 07 02 FE 
1cbb4     FB FE 04 0A | 	byte	$37, $33, $2e, $2c, $28, $22, $1b, $14, $0c, $07, $02, $fe, $fb, $fe, $04, $0a
1cbb8     0B 0E 12 16 
1cbbc     19 1B 1D 1E 
1cbc0     1F 1C 1B 1C 
1cbc4     1E 1D 1C 1F | 	byte	$0b, $0e, $12, $16, $19, $1b, $1d, $1e, $1f, $1c, $1b, $1c, $1e, $1d, $1c, $1f
1cbc8     24 25 23 1E 
1cbcc     1A 19 1D 1F 
1cbd0     20 1E 1C 1A 
1cbd4     17 14 10 0B | 	byte	$24, $25, $23, $1e, $1a, $19, $1d, $1f, $20, $1e, $1c, $1a, $17, $14, $10, $0b
1cbd8     05 00 FA F6 
1cbdc     F2 EB E6 E4 
1cbe0     E0 DC D6 CD 
1cbe4     C7 C2 BF BB | 	byte	$05, $00, $fa, $f6, $f2, $eb, $e6, $e4, $e0, $dc, $d6, $cd, $c7, $c2, $bf, $bb
1cbe8     B3 AC A9 AA 
1cbec     AA A9 AA B0 
1cbf0     B5 B4 AF AA 
1cbf4     AA AA AF B7 | 	byte	$b3, $ac, $a9, $aa, $aa, $a9, $aa, $b0, $b5, $b4, $af, $aa, $aa, $aa, $af, $b7
1cbf8     BC BC BD C2 
1cbfc     C4 C5 C6 C7 
1cc00     CC D2 DF EE 
1cc04     FA 03 0B 15 | 	byte	$bc, $bc, $bd, $c2, $c4, $c5, $c6, $c7, $cc, $d2, $df, $ee, $fa, $03, $0b, $15
1cc08     20 29 30 38 
1cc0c     43 4B 4F 4E 
1cc10     50 53 58 5D 
1cc14     60 60 5F 5D | 	byte	$20, $29, $30, $38, $43, $4b, $4f, $4e, $50, $53, $58, $5d, $60, $60, $5f, $5d
1cc18     5A 55 51 4E 
1cc1c     4A 48 42 3C 
1cc20     32 25 19 14 
1cc24     18 1F 1F 18 | 	byte	$5a, $55, $51, $4e, $4a, $48, $42, $3c, $32, $25, $19, $14, $18, $1f, $1f, $18
1cc28     0E 05 FE F8 
1cc2c     F1 E9 DE D2 
1cc30     CB CA CF D1 
1cc34     CF D0 D8 DD | 	byte	$0e, $05, $fe, $f8, $f1, $e9, $de, $d2, $cb, $ca, $cf, $d1, $cf, $d0, $d8, $dd
1cc38     DE DD DC E4 
1cc3c     EC F5 00 09 
1cc40     0C 0D 10 13 
1cc44     15 15 15 17 | 	byte	$de, $dd, $dc, $e4, $ec, $f5, $00, $09, $0c, $0d, $10, $13, $15, $15, $15, $17
1cc48     19 1D 21 23 
1cc4c     25 26 26 2A 
1cc50     30 33 33 32 
1cc54     34 3A 3F 3C | 	byte	$19, $1d, $21, $23, $25, $26, $26, $2a, $30, $33, $33, $32, $34, $3a, $3f, $3c
1cc58     34 2A 22 1B 
1cc5c     16 14 10 0A 
1cc60     05 03 03 00 
1cc64     F6 EA E4 E0 | 	byte	$34, $2a, $22, $1b, $16, $14, $10, $0a, $05, $03, $03, $00, $f6, $ea, $e4, $e0
1cc68     D9 CD BF B9 
1cc6c     B9 BD BF BD 
1cc70     BB BA B8 B6 
1cc74     B1 AC AB A9 | 	byte	$d9, $cd, $bf, $b9, $b9, $bd, $bf, $bd, $bb, $ba, $b8, $b6, $b1, $ac, $ab, $a9
1cc78     AA AB AA AA 
1cc7c     A9 A1 97 96 
1cc80     9B A6 B1 BB 
1cc84     C7 D6 E6 F4 | 	byte	$aa, $ab, $aa, $aa, $a9, $a1, $97, $96, $9b, $a6, $b1, $bb, $c7, $d6, $e6, $f4
1cc88     FF 09 11 18 
1cc8c     1C 22 29 2D 
1cc90     2F 31 35 3D 
1cc94     48 4E 4A 40 | 	byte	$ff, $09, $11, $18, $1c, $22, $29, $2d, $2f, $31, $35, $3d, $48, $4e, $4a, $40
1cc98     3A 3D 41 41 
1cc9c     44 48 48 41 
1cca0     38 32 2F 2E 
1cca4     2D 2B 28 22 | 	byte	$3a, $3d, $41, $41, $44, $48, $48, $41, $38, $32, $2f, $2e, $2d, $2b, $28, $22
1cca8     1E 1B 17 0E 
1ccac     06 01 FC F2 
1ccb0     E9 E2 E0 E7 
1ccb4     EF F4 F8 FB | 	byte	$1e, $1b, $17, $0e, $06, $01, $fc, $f2, $e9, $e2, $e0, $e7, $ef, $f4, $f8, $fb
1ccb8     FC FD FF 02 
1ccbc     08 0B 11 1D 
1ccc0     2B 36 3C 3C 
1ccc4     3A 3C 3E 38 | 	byte	$fc, $fd, $ff, $02, $08, $0b, $11, $1d, $2b, $36, $3c, $3c, $3a, $3c, $3e, $38
1ccc8     31 2E 30 34 
1cccc     37 39 38 3A 
1ccd0     3E 3E 38 32 
1ccd4     31 37 3B 36 | 	byte	$31, $2e, $30, $34, $37, $39, $38, $3a, $3e, $3e, $38, $32, $31, $37, $3b, $36
1ccd8     2E 25 1C 13 
1ccdc     09 00 F7 EB 
1cce0     DD D1 CC CB 
1cce4     C8 C1 B9 B2 | 	byte	$2e, $25, $1c, $13, $09, $00, $f7, $eb, $dd, $d1, $cc, $cb, $c8, $c1, $b9, $b2
1cce8     A9 9E 93 89 
1ccec     82 81 83 89 
1ccf0     8E 90 90 91 
1ccf4     94 97 95 93 | 	byte	$a9, $9e, $93, $89, $82, $81, $83, $89, $8e, $90, $90, $91, $94, $97, $95, $93
1ccf8     94 96 9C 9C 
1ccfc     9E 9F A2 A6 
1cd00     AC B4 BE CC 
1cd04     DA E9 F5 01 | 	byte	$94, $96, $9c, $9c, $9e, $9f, $a2, $a6, $ac, $b4, $be, $cc, $da, $e9, $f5, $01
1cd08     12 24 33 3B 
1cd0c     3F 45 4C 52 
1cd10     57 5A 5D 61 
1cd14     66 6B 6B 63 | 	byte	$12, $24, $33, $3b, $3f, $45, $4c, $52, $57, $5a, $5d, $61, $66, $6b, $6b, $63
1cd18     5C 58 5A 5E 
1cd1c     62 66 64 5D 
1cd20     54 4F 4C 46 
1cd24     3E 33 28 1F | 	byte	$5c, $58, $5a, $5e, $62, $66, $64, $5d, $54, $4f, $4c, $46, $3e, $33, $28, $1f
1cd28     1A 16 10 09 
1cd2c     02 FA F3 ED 
1cd30     E6 DE D9 D8 
1cd34     DD E0 DE DE | 	byte	$1a, $16, $10, $09, $02, $fa, $f3, $ed, $e6, $de, $d9, $d8, $dd, $e0, $de, $de
1cd38     DF E2 E9 EF 
1cd3c     F4 F5 F6 F9 
1cd40     05 14 1B 1C 
1cd44     1D 22 25 22 | 	byte	$df, $e2, $e9, $ef, $f4, $f5, $f6, $f9, $05, $14, $1b, $1c, $1d, $22, $25, $22
1cd48     19 10 0D 11 
1cd4c     15 19 1D 21 
1cd50     22 25 27 28 
1cd54     26 23 23 24 | 	byte	$19, $10, $0d, $11, $15, $19, $1d, $21, $22, $25, $27, $28, $26, $23, $23, $24
1cd58     24 24 23 1C 
1cd5c     13 0A 02 FC 
1cd60     F1 E5 DC DA 
1cd64     DC D9 D0 C8 | 	byte	$24, $24, $23, $1c, $13, $0a, $02, $fc, $f1, $e5, $dc, $da, $dc, $d9, $d0, $c8
1cd68     C2 BB B3 AF 
1cd6c     AD AC A9 A6 
1cd70     A2 A2 A6 A8 
1cd74     AC B0 B4 B8 | 	byte	$c2, $bb, $b3, $af, $ad, $ac, $a9, $a6, $a2, $a2, $a6, $a8, $ac, $b0, $b4, $b8
1cd78     B7 B6 B1 AF 
1cd7c     B0 AF B2 B3 
1cd80     B7 BE C6 CD 
1cd84     D5 E1 F2 01 | 	byte	$b7, $b6, $b1, $af, $b0, $af, $b2, $b3, $b7, $be, $c6, $cd, $d5, $e1, $f2, $01
1cd88     0E 1A 28 31 
1cd8c     36 36 34 34 
1cd90     36 3A 3E 42 
1cd94     45 47 47 46 | 	byte	$0e, $1a, $28, $31, $36, $36, $34, $34, $36, $3a, $3e, $42, $45, $47, $47, $46
1cd98     45 43 46 4C 
1cd9c     50 4D 4A 47 
1cda0     44 3F 38 33 
1cda4     2B 21 12 09 | 	byte	$45, $43, $46, $4c, $50, $4d, $4a, $47, $44, $3f, $38, $33, $2b, $21, $12, $09
1cda8     04 00 FA F4 
1cdac     F0 EB E5 DE 
1cdb0     D7 D3 D3 D3 
1cdb4     D4 D8 DF E5 | 	byte	$04, $00, $fa, $f4, $f0, $eb, $e5, $de, $d7, $d3, $d3, $d3, $d4, $d8, $df, $e5
1cdb8     E8 EF F7 00 
1cdbc     06 07 09 0C 
1cdc0     16 21 2F 36 
1cdc4     39 3C 41 42 | 	byte	$e8, $ef, $f7, $00, $06, $07, $09, $0c, $16, $21, $2f, $36, $39, $3c, $41, $42
1cdc8     3F 3A 32 2F 
1cdcc     2F 31 30 30 
1cdd0     30 33 39 3E 
1cdd4     40 40 3E 3B | 	byte	$3f, $3a, $32, $2f, $2f, $31, $30, $30, $30, $33, $39, $3e, $40, $40, $3e, $3b
1cdd8     38 36 34 32 
1cddc     2A 1C 0D FF 
1cde0     F2 E3 D7 CE 
1cde4     CA C9 C6 BE | 	byte	$38, $36, $34, $32, $2a, $1c, $0d, $ff, $f2, $e3, $d7, $ce, $ca, $c9, $c6, $be
1cde8     B5 AD A6 A0 
1cdec     9B 96 91 8F 
1cdf0     8E 90 92 92 
1cdf4     93 97 9D A0 | 	byte	$b5, $ad, $a6, $a0, $9b, $96, $91, $8f, $8e, $90, $92, $92, $93, $97, $9d, $a0
1cdf8     9F 9B 98 97 
1cdfc     99 9A 9A 9C 
1ce00     A1 A8 AF B9 
1ce04     C8 D4 E1 EF | 	byte	$9f, $9b, $98, $97, $99, $9a, $9a, $9c, $a1, $a8, $af, $b9, $c8, $d4, $e1, $ef
1ce08     00 11 1E 28 
1ce0c     2F 35 38 3A 
1ce10     3C 41 47 4B 
1ce14     4D 4F 52 57 | 	byte	$00, $11, $1e, $28, $2f, $35, $38, $3a, $3c, $41, $47, $4b, $4d, $4f, $52, $57
1ce18     59 5A 5A 5C 
1ce1c     61 64 63 61 
1ce20     61 5F 59 52 
1ce24     4B 41 37 2D | 	byte	$59, $5a, $5a, $5c, $61, $64, $63, $61, $61, $5f, $59, $52, $4b, $41, $37, $2d
1ce28     24 1B 13 0A 
1ce2c     02 00 FF FA 
1ce30     F2 ED EB EA 
1ce34     E8 E4 E4 E9 | 	byte	$24, $1b, $13, $0a, $02, $00, $ff, $fa, $f2, $ed, $eb, $ea, $e8, $e4, $e4, $e9
1ce38     F2 F6 F8 00 
1ce3c     07 0B 0B 0F 
1ce40     16 1A 1E 23 
1ce44     27 2A 2A 2C | 	byte	$f2, $f6, $f8, $00, $07, $0b, $0b, $0f, $16, $1a, $1e, $23, $27, $2a, $2a, $2c
1ce48     2F 30 29 1E 
1ce4c     18 16 13 0F 
1ce50     0D 13 1D 22 
1ce54     23 20 1E 1D | 	byte	$2f, $30, $29, $1e, $18, $16, $13, $0f, $0d, $13, $1d, $22, $23, $20, $1e, $1d
1ce58     19 18 1C 1E 
1ce5c     19 0D FE ED 
1ce60     DD D0 C8 C0 
1ce64     B7 AE AA AA | 	byte	$19, $18, $1c, $1e, $19, $0d, $fe, $ed, $dd, $d0, $c8, $c0, $b7, $ae, $aa, $aa
1ce68     A8 A3 9E 9E 
1ce6c     9F 9E 9A 98 
1ce70     9A 9D 9F A2 
1ce74     A6 AD B4 B7 | 	byte	$a8, $a3, $9e, $9e, $9f, $9e, $9a, $98, $9a, $9d, $9f, $a2, $a6, $ad, $b4, $b7
1ce78     B9 B9 B8 B7 
1ce7c     BC C2 C7 C6 
1ce80     C6 C7 C9 CE 
1ce84     D7 E1 F3 04 | 	byte	$b9, $b9, $b8, $b7, $bc, $c2, $c7, $c6, $c6, $c7, $c9, $ce, $d7, $e1, $f3, $04
1ce88     15 23 2C 36 
1ce8c     3C 40 3F 3F 
1ce90     43 48 4C 4B 
1ce94     48 48 4A 49 | 	byte	$15, $23, $2c, $36, $3c, $40, $3f, $3f, $43, $48, $4c, $4b, $48, $48, $4a, $49
1ce98     48 4A 4F 52 
1ce9c     53 51 4F 4F 
1cea0     4F 4F 4D 45 
1cea4     36 2A 24 1E | 	byte	$48, $4a, $4f, $52, $53, $51, $4f, $4f, $4f, $4f, $4d, $45, $36, $2a, $24, $1e
1cea8     13 08 00 F7 
1ceac     F0 EC EA EA 
1ceb0     E6 E1 DD DA 
1ceb4     D8 D6 D1 D2 | 	byte	$13, $08, $00, $f7, $f0, $ec, $ea, $ea, $e6, $e1, $dd, $da, $d8, $d6, $d1, $d2
1ceb8     DA E6 F2 F8 
1cebc     FB 01 06 0A 
1cec0     0D 15 1F 24 
1cec4     24 25 2A 2E | 	byte	$da, $e6, $f2, $f8, $fb, $01, $06, $0a, $0d, $15, $1f, $24, $24, $25, $2a, $2e
1cec8     2F 2E 2E 2D 
1cecc     2A 23 1B 18 
1ced0     1B 22 29 2E 
1ced4     2F 30 31 33 | 	byte	$2f, $2e, $2e, $2d, $2a, $23, $1b, $18, $1b, $22, $29, $2e, $2f, $30, $31, $33
1ced8     33 33 33 30 
1cedc     2C 24 19 0F 
1cee0     04 F8 EA DF 
1cee4     D8 CF C4 BA | 	byte	$33, $33, $33, $30, $2c, $24, $19, $0f, $04, $f8, $ea, $df, $d8, $cf, $c4, $ba
1cee8     B6 B5 B3 B1 
1ceec     AA A3 A3 A7 
1cef0     A9 A8 A6 A3 
1cef4     A4 AB AE B0 | 	byte	$b6, $b5, $b3, $b1, $aa, $a3, $a3, $a7, $a9, $a8, $a6, $a3, $a4, $ab, $ae, $b0
1cef8     A9 A5 A2 A4 
1cefc     AC AF B0 B2 
1cf00     B5 B4 B2 B3 
1cf04     B9 C3 D1 DF | 	byte	$a9, $a5, $a2, $a4, $ac, $af, $b0, $b2, $b5, $b4, $b2, $b3, $b9, $c3, $d1, $df
1cf08     ED FC 0B 15 
1cf0c     19 1C 21 27 
1cf10     2C 31 35 37 
1cf14     39 3E 3D 3B | 	byte	$ed, $fc, $0b, $15, $19, $1c, $21, $27, $2c, $31, $35, $37, $39, $3e, $3d, $3b
1cf18     3C 42 4A 4D 
1cf1c     4E 4E 50 50 
1cf20     51 4F 4A 42 
1cf24     38 30 2B 26 | 	byte	$3c, $42, $4a, $4d, $4e, $4e, $50, $50, $51, $4f, $4a, $42, $38, $30, $2b, $26
1cf28     20 1B 14 0B 
1cf2c     05 02 01 FF 
1cf30     FC FA F7 F5 
1cf34     F5 F4 F5 F6 | 	byte	$20, $1b, $14, $0b, $05, $02, $01, $ff, $fc, $fa, $f7, $f5, $f5, $f4, $f5, $f6
1cf38     F6 F6 F7 FD 
1cf3c     04 0B 12 18 
1cf40     1D 21 25 25 
1cf44     28 2B 2E 2F | 	byte	$f6, $f6, $f7, $fd, $04, $0b, $12, $18, $1d, $21, $25, $25, $28, $2b, $2e, $2f
1cf48     32 31 2D 29 
1cf4c     25 23 1F 1A 
1cf50     18 1B 1F 23 
1cf54     23 21 22 23 | 	byte	$32, $31, $2d, $29, $25, $23, $1f, $1a, $18, $1b, $1f, $23, $23, $21, $22, $23
1cf58     23 24 23 21 
1cf5c     1C 13 0A FE 
1cf60     F1 E7 DE D4 
1cf64     C8 BD B3 AD | 	byte	$23, $24, $23, $21, $1c, $13, $0a, $fe, $f1, $e7, $de, $d4, $c8, $bd, $b3, $ad
1cf68     A5 9F 9E 9D 
1cf6c     99 96 92 92 
1cf70     91 96 9C 9F 
1cf74     A2 A5 A9 A9 | 	byte	$a5, $9f, $9e, $9d, $99, $96, $92, $92, $91, $96, $9c, $9f, $a2, $a5, $a9, $a9
1cf78     AA A9 A4 9F 
1cf7c     9F A9 B6 BE 
1cf80     C1 C5 CD D4 
1cf84     D6 DA E4 F1 | 	byte	$aa, $a9, $a4, $9f, $9f, $a9, $b6, $be, $c1, $c5, $cd, $d4, $d6, $da, $e4, $f1
1cf88     FD 06 12 1D 
1cf8c     25 2D 38 40 
1cf90     43 47 4B 4E 
1cf94     50 52 52 55 | 	byte	$fd, $06, $12, $1d, $25, $2d, $38, $40, $43, $47, $4b, $4e, $50, $52, $52, $55
1cf98     5C 60 61 64 
1cf9c     67 68 68 66 
1cfa0     61 5B 54 49 
1cfa4     3F 33 2B 24 | 	byte	$5c, $60, $61, $64, $67, $68, $68, $66, $61, $5b, $54, $49, $3f, $33, $2b, $24
1cfa8     1B 13 0A 05 
1cfac     01 FD F8 F4 
1cfb0     F2 EF EB E7 
1cfb4     E5 E3 E1 E1 | 	byte	$1b, $13, $0a, $05, $01, $fd, $f8, $f4, $f2, $ef, $eb, $e7, $e5, $e3, $e1, $e1
1cfb8     E1 E3 E3 E3 
1cfbc     E5 ED F6 FC 
1cfc0     00 04 06 08 
1cfc4     09 0E 15 1A | 	byte	$e1, $e3, $e3, $e3, $e5, $ed, $f6, $fc, $00, $04, $06, $08, $09, $0e, $15, $1a
1cfc8     1D 1E 20 1F 
1cfcc     1A 14 12 14 
1cfd0     19 1B 1B 1B 
1cfd4     1D 24 2B 2D | 	byte	$1d, $1e, $20, $1f, $1a, $14, $12, $14, $19, $1b, $1b, $1b, $1d, $24, $2b, $2d
1cfd8     2C 2A 2A 27 
1cfdc     21 1B 14 0D 
1cfe0     06 FF F4 E9 
1cfe4     DC D0 C8 C4 | 	byte	$2c, $2a, $2a, $27, $21, $1b, $14, $0d, $06, $ff, $f4, $e9, $dc, $d0, $c8, $c4
1cfe8     BF BB B7 B3 
1cfec     B0 AC AA A6 
1cff0     A2 A1 A2 AA 
1cff4     B2 B9 BC BB | 	byte	$bf, $bb, $b7, $b3, $b0, $ac, $aa, $a6, $a2, $a1, $a2, $aa, $b2, $b9, $bc, $bb
1cff8     B8 B4 B5 B9 
1cffc     BB B8 B3 B5 
1d000     BB C1 C5 CC 
1d004     D7 E2 E9 EC | 	byte	$b8, $b4, $b5, $b9, $bb, $b8, $b3, $b5, $bb, $c1, $c5, $cc, $d7, $e2, $e9, $ec
1d008     F0 F7 FE 00 
1d00c     03 07 13 21 
1d010     2D 32 32 36 
1d014     3F 44 44 43 | 	byte	$f0, $f7, $fe, $00, $03, $07, $13, $21, $2d, $32, $32, $36, $3f, $44, $44, $43
1d018     46 4C 51 51 
1d01c     4F 4D 4F 53 
1d020     53 4C 41 38 
1d024     31 28 1D 12 | 	byte	$46, $4c, $51, $51, $4f, $4d, $4f, $53, $53, $4c, $41, $38, $31, $28, $1d, $12
1d028     0C 06 00 F9 
1d02c     F6 FA FC FC 
1d030     F8 F5 F3 F3 
1d034     F3 F2 F1 F2 | 	byte	$0c, $06, $00, $f9, $f6, $fa, $fc, $fc, $f8, $f5, $f3, $f3, $f3, $f2, $f1, $f2
1d038     F4 F6 F7 F8 
1d03c     FA FD 00 05 
1d040     0E 13 13 16 
1d044     19 1F 25 29 | 	byte	$f4, $f6, $f7, $f8, $fa, $fd, $00, $05, $0e, $13, $13, $16, $19, $1f, $25, $29
1d048     2D 2E 2E 2E 
1d04c     2F 2D 28 28 
1d050     2C 31 33 32 
1d054     30 33 38 3B | 	byte	$2d, $2e, $2e, $2e, $2f, $2d, $28, $28, $2c, $31, $33, $32, $30, $33, $38, $3b
1d058     3B 38 31 2A 
1d05c     24 1F 17 0C 
1d060     03 FD F7 ED 
1d064     DE CD BF B6 | 	byte	$3b, $38, $31, $2a, $24, $1f, $17, $0c, $03, $fd, $f7, $ed, $de, $cd, $bf, $b6
1d068     AF A9 A5 A0 
1d06c     9B 97 98 96 
1d070     94 91 8E 8E 
1d074     92 9A 9E A1 | 	byte	$af, $a9, $a5, $a0, $9b, $97, $98, $96, $94, $91, $8e, $8e, $92, $9a, $9e, $a1
1d078     A3 A3 A3 A5 
1d07c     AA AF B3 B3 
1d080     AF AF B7 C3 
1d084     CE D9 E3 EB | 	byte	$a3, $a3, $a3, $a5, $aa, $af, $b3, $b3, $af, $af, $b7, $c3, $ce, $d9, $e3, $eb
1d088     F4 FB FF FE 
1d08c     00 06 0F 1A 
1d090     26 2F 37 3F 
1d094     48 4D 54 5B | 	byte	$f4, $fb, $ff, $fe, $00, $06, $0f, $1a, $26, $2f, $37, $3f, $48, $4d, $54, $5b
1d098     5F 5F 5E 61 
1d09c     67 6A 68 64 
1d0a0     60 5B 57 50 
1d0a4     46 3A 31 28 | 	byte	$5f, $5f, $5e, $61, $67, $6a, $68, $64, $60, $5b, $57, $50, $46, $3a, $31, $28
1d0a8     1D 13 0C 06 
1d0ac     01 01 05 0A 
1d0b0     0B 0C 0A 07 
1d0b4     03 01 FF FE | 	byte	$1d, $13, $0c, $06, $01, $01, $05, $0a, $0b, $0c, $0a, $07, $03, $01, $ff, $fe
1d0b8     FD FA FA FE 
1d0bc     00 FD F9 F8 
1d0c0     FA FC FE FE 
1d0c4     FE 04 0B 0F | 	byte	$fd, $fa, $fa, $fe, $00, $fd, $f9, $f8, $fa, $fc, $fe, $fe, $fe, $04, $0b, $0f
1d0c8     13 14 14 12 
1d0cc     10 12 15 18 
1d0d0     17 17 17 17 
1d0d4     17 1C 24 29 | 	byte	$13, $14, $14, $12, $10, $12, $15, $18, $17, $17, $17, $17, $17, $1c, $24, $29
1d0d8     28 26 24 21 
1d0dc     1A 10 06 00 
1d0e0     F9 F2 E9 E2 
1d0e4     DC D3 CA C2 | 	byte	$28, $26, $24, $21, $1a, $10, $06, $00, $f9, $f2, $e9, $e2, $dc, $d3, $ca, $c2
1d0e8     B8 B0 AD AA 
1d0ec     A9 A8 A5 A4 
1d0f0     A6 A8 A9 A7 
1d0f4     A9 AB AC AE | 	byte	$b8, $b0, $ad, $aa, $a9, $a8, $a5, $a4, $a6, $a8, $a9, $a7, $a9, $ab, $ac, $ae
1d0f8     B4 BB BF C6 
1d0fc     CC CF CF CF 
1d100     D1 D1 D0 D4 
1d104     DD E7 EE F5 | 	byte	$b4, $bb, $bf, $c6, $cc, $cf, $cf, $cf, $d1, $d1, $d0, $d4, $dd, $e7, $ee, $f5
1d108     FD 05 0B 0A 
1d10c     09 0B 10 14 
1d110     16 1B 24 2D 
1d114     37 42 4C 50 | 	byte	$fd, $05, $0b, $0a, $09, $0b, $10, $14, $16, $1b, $24, $2d, $37, $42, $4c, $50
1d118     56 59 5B 59 
1d11c     59 5C 5E 5C 
1d120     52 46 3D 3A 
1d124     36 2D 21 16 | 	byte	$56, $59, $5b, $59, $59, $5c, $5e, $5c, $52, $46, $3d, $3a, $36, $2d, $21, $16
1d128     0C 03 FA F1 
1d12c     ED EF F2 F4 
1d130     F8 FC 00 02 
1d134     02 FF FA FC | 	byte	$0c, $03, $fa, $f1, $ed, $ef, $f2, $f4, $f8, $fc, $00, $02, $02, $ff, $fa, $fc
1d138     FF FE FE FF 
1d13c     01 01 00 FC 
1d140     FA FA F9 F7 
1d144     F9 FE 01 08 | 	byte	$ff, $fe, $fe, $ff, $01, $01, $00, $fc, $fa, $fa, $f9, $f7, $f9, $fe, $01, $08
1d148     0F 14 15 14 
1d14c     16 19 1C 20 
1d150     23 27 26 24 
1d154     25 2B 34 39 | 	byte	$0f, $14, $15, $14, $16, $19, $1c, $20, $23, $27, $26, $24, $25, $2b, $34, $39
1d158     3A 39 37 35 
1d15c     32 2B 21 15 
1d160     0C 03 FA F1 
1d164     E8 E0 DC D8 | 	byte	$3a, $39, $37, $35, $32, $2b, $21, $15, $0c, $03, $fa, $f1, $e8, $e0, $dc, $d8
1d168     D1 C7 BD B3 
1d16c     AF AE AD AA 
1d170     A7 A6 A6 A7 
1d174     A7 A6 A5 A3 | 	byte	$d1, $c7, $bd, $b3, $af, $ae, $ad, $aa, $a7, $a6, $a6, $a7, $a7, $a6, $a5, $a3
1d178     A3 A7 AC B5 
1d17c     BE C3 C3 C0 
1d180     C0 C4 CD D3 
1d184     D4 D2 D6 DD | 	byte	$a3, $a7, $ac, $b5, $be, $c3, $c3, $c0, $c0, $c4, $cd, $d3, $d4, $d2, $d6, $dd
1d188     E1 E6 EE F4 
1d18c     F9 FE 02 04 
1d190     06 09 0D 14 
1d194     1F 2D 39 42 | 	byte	$e1, $e6, $ee, $f4, $f9, $fe, $02, $04, $06, $09, $0d, $14, $1f, $2d, $39, $42
1d198     48 4A 50 5A 
1d19c     62 61 5C 58 
1d1a0     55 4F 45 3C 
1d1a4     34 2E 2A 25 | 	byte	$48, $4a, $50, $5a, $62, $61, $5c, $58, $55, $4f, $45, $3c, $34, $2e, $2a, $25
1d1a8     1C 12 09 02 
1d1ac     FE FC FE 03 
1d1b0     07 09 0D 15 
1d1b4     1B 1A 17 18 | 	byte	$1c, $12, $09, $02, $fe, $fc, $fe, $03, $07, $09, $0d, $15, $1b, $1a, $17, $18
1d1b8     18 18 1A 1C 
1d1bc     1C 18 14 10 
1d1c0     0C 0B 08 02 
1d1c4     FE FD 00 04 | 	byte	$18, $18, $1a, $1c, $1c, $18, $14, $10, $0c, $0b, $08, $02, $fe, $fd, $00, $04
1d1c8     08 0A 0D 11 
1d1cc     14 14 14 16 
1d1d0     18 1A 1B 1C 
1d1d4     1C 20 24 27 | 	byte	$08, $0a, $0d, $11, $14, $14, $14, $16, $18, $1a, $1b, $1c, $1c, $20, $24, $27
1d1d8     27 28 28 26 
1d1dc     20 18 11 08 
1d1e0     FF F3 E5 DA 
1d1e4     D4 CF CB C5 | 	byte	$27, $28, $28, $26, $20, $18, $11, $08, $ff, $f3, $e5, $da, $d4, $cf, $cb, $c5
1d1e8     C0 BB B7 B2 
1d1ec     AC A6 A4 A3 
1d1f0     A2 A3 A2 A2 
1d1f4     A1 A3 A5 AA | 	byte	$c0, $bb, $b7, $b2, $ac, $a6, $a4, $a3, $a2, $a3, $a2, $a2, $a1, $a3, $a5, $aa
1d1f8     AF B0 B1 B8 
1d1fc     C4 CE D0 D1 
1d200     D3 D6 DD E5 
1d204     EC EF EF EE | 	byte	$af, $b0, $b1, $b8, $c4, $ce, $d0, $d1, $d3, $d6, $dd, $e5, $ec, $ef, $ef, $ee
1d208     EE F2 F5 F9 
1d20c     00 09 11 15 
1d210     18 1B 1F 23 
1d214     29 31 39 3F | 	byte	$ee, $f2, $f5, $f9, $00, $09, $11, $15, $18, $1b, $1f, $23, $29, $31, $39, $3f
1d218     42 49 51 5A 
1d21c     61 65 66 5E 
1d220     54 49 44 3F 
1d224     33 28 1E 18 | 	byte	$42, $49, $51, $5a, $61, $65, $66, $5e, $54, $49, $44, $3f, $33, $28, $1e, $18
1d228     11 0C 02 F9 
1d22c     F2 F3 F6 F5 
1d230     F4 F8 FF 04 
1d234     09 0D 0E 10 | 	byte	$11, $0c, $02, $f9, $f2, $f3, $f6, $f5, $f4, $f8, $ff, $04, $09, $0d, $0e, $10
1d238     12 13 14 14 
1d23c     13 11 0D 08 
1d240     03 01 00 FC 
1d244     F7 F4 F3 F3 | 	byte	$12, $13, $14, $14, $13, $11, $0d, $08, $03, $01, $00, $fc, $f7, $f4, $f3, $f3
1d248     F7 FC 00 02 
1d24c     07 0B 0D 0E 
1d250     0F 12 14 15 
1d254     17 1E 26 29 | 	byte	$f7, $fc, $00, $02, $07, $0b, $0d, $0e, $0f, $12, $14, $15, $17, $1e, $26, $29
1d258     29 29 2C 2C 
1d25c     29 22 1A 12 
1d260     0C 05 FB F1 
1d264     E8 E0 D9 D5 | 	byte	$29, $29, $2c, $2c, $29, $22, $1a, $12, $0c, $05, $fb, $f1, $e8, $e0, $d9, $d5
1d268     CF C7 C0 BE 
1d26c     BE BD BB B6 
1d270     B3 B3 B2 AF 
1d274     AB AA AC B3 | 	byte	$cf, $c7, $c0, $be, $be, $bd, $bb, $b6, $b3, $b3, $b2, $af, $ab, $aa, $ac, $b3
1d278     BC C2 C6 C8 
1d27c     CE D5 D9 DC 
1d280     DE E0 E3 E6 
1d284     E9 EC F1 F2 | 	byte	$bc, $c2, $c6, $c8, $ce, $d5, $d9, $dc, $de, $e0, $e3, $e6, $e9, $ec, $f1, $f2
1d288     EC E6 E6 E9 
1d28c     EA EE F4 FC 
1d290     03 0A 11 16 
1d294     1E 25 27 26 | 	byte	$ec, $e6, $e6, $e9, $ea, $ee, $f4, $fc, $03, $0a, $11, $16, $1e, $25, $27, $26
1d298     27 2E 39 46 
1d29c     4D 50 4F 50 
1d2a0     4E 46 3A 2D 
1d2a4     25 21 1B 11 | 	byte	$27, $2e, $39, $46, $4d, $50, $4f, $50, $4e, $46, $3a, $2d, $25, $21, $1b, $11
1d2a8     08 04 01 FE 
1d2ac     FA F8 F7 F7 
1d2b0     F9 FC 00 06 
1d2b4     0F 16 1B 1F | 	byte	$08, $04, $01, $fe, $fa, $f8, $f7, $f7, $f9, $fc, $00, $06, $0f, $16, $1b, $1f
1d2b8     25 2A 2D 2D 
1d2bc     2B 28 24 21 
1d2c0     1D 1A 16 12 
1d2c4     0E 09 06 04 | 	byte	$25, $2a, $2d, $2d, $2b, $28, $24, $21, $1d, $1a, $16, $12, $0e, $09, $06, $04
1d2c8     03 04 08 0F 
1d2cc     14 15 17 16 
1d2d0     16 16 16 17 
1d2d4     19 1A 1E 24 | 	byte	$03, $04, $08, $0f, $14, $15, $17, $16, $16, $16, $16, $17, $19, $1a, $1e, $24
1d2d8     27 28 29 28 
1d2dc     26 20 17 0D 
1d2e0     03 F9 F0 E9 
1d2e4     E3 DC D1 C6 | 	byte	$27, $28, $29, $28, $26, $20, $17, $0d, $03, $f9, $f0, $e9, $e3, $dc, $d1, $c6
1d2e8     BD B6 B0 AA 
1d2ec     A6 A6 A7 A8 
1d2f0     A6 A2 9D 98 
1d2f4     95 96 99 A1 | 	byte	$bd, $b6, $b0, $aa, $a6, $a6, $a7, $a8, $a6, $a2, $9d, $98, $95, $96, $99, $a1
1d2f8     A9 B2 BD C6 
1d2fc     CC CF D4 D9 
1d300     DD E2 E6 E9 
1d304     EB EE F1 F5 | 	byte	$a9, $b2, $bd, $c6, $cc, $cf, $d4, $d9, $dd, $e2, $e6, $e9, $eb, $ee, $f1, $f5
1d308     F6 F2 EE EC 
1d30c     EC EE F2 F7 
1d310     00 0A 16 21 
1d314     2B 32 36 36 | 	byte	$f6, $f2, $ee, $ec, $ec, $ee, $f2, $f7, $00, $0a, $16, $21, $2b, $32, $36, $36
1d318     35 37 3E 48 
1d31c     51 57 59 55 
1d320     50 4F 4D 44 
1d324     33 27 22 20 | 	byte	$35, $37, $3e, $48, $51, $57, $59, $55, $50, $4f, $4d, $44, $33, $27, $22, $20
1d328     1B 14 0E 07 
1d32c     04 03 03 01 
1d330     00 00 04 0A 
1d334     0D 12 1A 1F | 	byte	$1b, $14, $0e, $07, $04, $03, $03, $01, $00, $00, $04, $0a, $0d, $12, $1a, $1f
1d338     23 27 2C 30 
1d33c     31 2E 27 1F 
1d340     1B 17 12 0A 
1d344     03 FF FD FC | 	byte	$23, $27, $2c, $30, $31, $2e, $27, $1f, $1b, $17, $12, $0a, $03, $ff, $fd, $fc
1d348     FA FA FC FD 
1d34c     00 05 07 05 
1d350     03 04 07 08 
1d354     08 0A 0D 10 | 	byte	$fa, $fa, $fc, $fd, $00, $05, $07, $05, $03, $04, $07, $08, $08, $0a, $0d, $10
1d358     15 19 1E 1F 
1d35c     20 1C 15 0B 
1d360     01 F9 F2 EC 
1d364     EA E7 E0 D7 | 	byte	$15, $19, $1e, $1f, $20, $1c, $15, $0b, $01, $f9, $f2, $ec, $ea, $e7, $e0, $d7
1d368     CD C2 B9 B3 
1d36c     AF AC AB AD 
1d370     B0 B0 AE A8 
1d374     A3 A3 A8 B1 | 	byte	$cd, $c2, $b9, $b3, $af, $ac, $ab, $ad, $b0, $b0, $ae, $a8, $a3, $a3, $a8, $b1
1d378     B9 C0 C9 D2 
1d37c     DD E5 E9 EB 
1d380     EE F5 FA FC 
1d384     FC FD 00 00 | 	byte	$b9, $c0, $c9, $d2, $dd, $e5, $e9, $eb, $ee, $f5, $fa, $fc, $fc, $fd, $00, $00
1d388     00 FF FA F6 
1d38c     F3 F1 EF EE 
1d390     F2 FA 04 12 
1d394     1D 26 2E 33 | 	byte	$00, $ff, $fa, $f6, $f3, $f1, $ef, $ee, $f2, $fa, $04, $12, $1d, $26, $2e, $33
1d398     33 34 34 35 
1d39c     37 3A 3D 3B 
1d3a0     3A 37 34 2E 
1d3a4     27 1F 14 0C | 	byte	$33, $34, $34, $35, $37, $3a, $3d, $3b, $3a, $37, $34, $2e, $27, $1f, $14, $0c
1d3a8     07 06 04 00 
1d3ac     FA F4 F3 F7 
1d3b0     FB FD FF 04 
1d3b4     0B 10 12 16 | 	byte	$07, $06, $04, $00, $fa, $f4, $f3, $f7, $fb, $fd, $ff, $04, $0b, $10, $12, $16
1d3b8     1E 25 2A 2B 
1d3bc     2E 31 31 2C 
1d3c0     25 20 1C 18 
1d3c4     12 0B 06 05 | 	byte	$1e, $25, $2a, $2b, $2e, $31, $31, $2c, $25, $20, $1c, $18, $12, $0b, $06, $05
1d3c8     05 05 07 0A 
1d3cc     0C 0D 0F 12 
1d3d0     0F 0C 0F 14 
1d3d4     17 16 14 16 | 	byte	$05, $05, $07, $0a, $0c, $0d, $0f, $12, $0f, $0c, $0f, $14, $17, $16, $14, $16
1d3d8     1A 1D 1E 24 
1d3dc     2A 29 24 1B 
1d3e0     12 08 FF F7 
1d3e4     F2 EF EA E1 | 	byte	$1a, $1d, $1e, $24, $2a, $29, $24, $1b, $12, $08, $ff, $f7, $f2, $ef, $ea, $e1
1d3e8     DA D3 C8 BD 
1d3ec     B5 B1 AD A9 
1d3f0     A6 A5 A3 A3 
1d3f4     A5 A3 A0 A3 | 	byte	$da, $d3, $c8, $bd, $b5, $b1, $ad, $a9, $a6, $a5, $a3, $a3, $a5, $a3, $a0, $a3
1d3f8     AA B5 C0 C7 
1d3fc     CA D0 DC E5 
1d400     E7 E9 EA EC 
1d404     ED EE EF F1 | 	byte	$aa, $b5, $c0, $c7, $ca, $d0, $dc, $e5, $e7, $e9, $ea, $ec, $ed, $ee, $ef, $f1
1d408     F3 F3 F1 EE 
1d40c     EC EC EB EB 
1d410     E9 EB F3 FF 
1d414     0A 15 20 2C | 	byte	$f3, $f3, $f1, $ee, $ec, $ec, $eb, $eb, $e9, $eb, $f3, $ff, $0a, $15, $20, $2c
1d418     38 3D 3B 38 
1d41c     38 37 33 30 
1d420     30 30 31 2F 
1d424     2A 23 21 1F | 	byte	$38, $3d, $3b, $38, $38, $37, $33, $30, $30, $30, $31, $2f, $2a, $23, $21, $1f
1d428     1A 12 0E 0E 
1d42c     0E 08 00 FF 
1d430     03 0B 10 13 
1d434     17 1D 23 25 | 	byte	$1a, $12, $0e, $0e, $0e, $08, $00, $ff, $03, $0b, $10, $13, $17, $1d, $23, $25
1d438     27 2B 33 37 
1d43c     36 36 39 39 
1d440     33 2C 25 20 
1d444     18 0F 08 04 | 	byte	$27, $2b, $33, $37, $36, $36, $39, $39, $33, $2c, $25, $20, $18, $0f, $08, $04
1d448     03 02 01 00 
1d44c     00 01 00 00 
1d450     00 00 00 01 
1d454     05 07 04 01 | 	byte	$03, $02, $01, $00, $00, $01, $00, $00, $00, $00, $00, $01, $05, $07, $04, $01
1d458     03 07 07 07 
1d45c     09 0F 10 0B 
1d460     03 FE F8 F0 
1d464     E7 E0 DE DA | 	byte	$03, $07, $07, $07, $09, $0f, $10, $0b, $03, $fe, $f8, $f0, $e7, $e0, $de, $da
1d468     D4 CF CB C5 
1d46c     BA B0 AA A8 
1d470     A5 A0 9C A0 
1d474     A9 AE B3 B6 | 	byte	$d4, $cf, $cb, $c5, $ba, $b0, $aa, $a8, $a5, $a0, $9c, $a0, $a9, $ae, $b3, $b6
1d478     B7 B9 C3 D1 
1d47c     DA DB DF EC 
1d480     F9 FE FD F9 
1d484     FA FD FD FC | 	byte	$b7, $b9, $c3, $d1, $da, $db, $df, $ec, $f9, $fe, $fd, $f9, $fa, $fd, $fd, $fc
1d488     FB FB FC FE 
1d48c     FE FB F6 F7 
1d490     FC 00 01 05 
1d494     0B 14 1F 2B | 	byte	$fb, $fb, $fc, $fe, $fe, $fb, $f6, $f7, $fc, $00, $01, $05, $0b, $14, $1f, $2b
1d498     37 3E 43 45 
1d49c     44 40 3A 35 
1d4a0     2D 28 23 21 
1d4a4     22 21 1E 1B | 	byte	$37, $3e, $43, $45, $44, $40, $3a, $35, $2d, $28, $23, $21, $22, $21, $1e, $1b
1d4a8     1A 19 15 0F 
1d4ac     09 04 02 00 
1d4b0     FF FF 03 09 
1d4b4     0E 13 17 1A | 	byte	$1a, $19, $15, $0f, $09, $04, $02, $00, $ff, $ff, $03, $09, $0e, $13, $17, $1a
1d4b8     1B 1D 22 25 
1d4bc     26 27 29 2A 
1d4c0     2A 26 21 1C 
1d4c4     18 10 07 00 | 	byte	$1b, $1d, $22, $25, $26, $27, $29, $2a, $2a, $26, $21, $1c, $18, $10, $07, $00
1d4c8     FE FE FD FB 
1d4cc     FA FA FA FA 
1d4d0     FB FD 02 08 
1d4d4     09 07 07 07 | 	byte	$fe, $fe, $fd, $fb, $fa, $fa, $fa, $fa, $fb, $fd, $02, $08, $09, $07, $07, $07
1d4d8     08 08 09 08 
1d4dc     07 07 0C 11 
1d4e0     10 0B 08 02 
1d4e4     F9 ED E4 E0 | 	byte	$08, $08, $09, $08, $07, $07, $0c, $11, $10, $0b, $08, $02, $f9, $ed, $e4, $e0
1d4e8     DD D9 D5 D2 
1d4ec     CE C8 BE B6 
1d4f0     B0 AC A9 A8 
1d4f4     AC B3 BB C3 | 	byte	$dd, $d9, $d5, $d2, $ce, $c8, $be, $b6, $b0, $ac, $a9, $a8, $ac, $b3, $bb, $c3
1d4f8     C9 CD CF D2 
1d4fc     D8 E2 EA EF 
1d500     F6 FD 00 00 
1d504     FF FE FB F5 | 	byte	$c9, $cd, $cf, $d2, $d8, $e2, $ea, $ef, $f6, $fd, $00, $00, $ff, $fe, $fb, $f5
1d508     F1 F0 F0 F2 
1d50c     F4 F4 F0 EB 
1d510     ED F2 F8 FD 
1d514     00 05 0D 16 | 	byte	$f1, $f0, $f0, $f2, $f4, $f4, $f0, $eb, $ed, $f2, $f8, $fd, $00, $05, $0d, $16
1d518     20 27 2C 31 
1d51c     36 3A 3B 38 
1d520     2F 24 1B 15 
1d524     12 11 14 17 | 	byte	$20, $27, $2c, $31, $36, $3a, $3b, $38, $2f, $24, $1b, $15, $12, $11, $14, $17
1d528     19 19 19 18 
1d52c     16 12 0C 0A 
1d530     0B 0D 0E 0D 
1d534     10 16 1E 23 | 	byte	$19, $19, $19, $18, $16, $12, $0c, $0a, $0b, $0d, $0e, $0d, $10, $16, $1e, $23
1d538     27 29 2C 2D 
1d53c     2E 30 31 2F 
1d540     2E 2C 2A 26 
1d544     21 1A 12 0C | 	byte	$27, $29, $2c, $2d, $2e, $30, $31, $2f, $2e, $2c, $2a, $26, $21, $1a, $12, $0c
1d548     09 06 03 00 
1d54c     FD F8 F6 F6 
1d550     F8 FA FE 04 
1d554     0A 0C 08 06 | 	byte	$09, $06, $03, $00, $fd, $f8, $f6, $f6, $f8, $fa, $fe, $04, $0a, $0c, $08, $06
1d558     07 07 05 01 
1d55c     00 00 FD FE 
1d560     02 07 05 00 
1d564     F7 EE E5 DC | 	byte	$07, $07, $05, $01, $00, $00, $fd, $fe, $02, $07, $05, $00, $f7, $ee, $e5, $dc
1d568     D3 CD C7 C5 
1d56c     C4 C2 BC B1 
1d570     A9 A5 A2 A1 
1d574     A3 A6 AC B7 | 	byte	$d3, $cd, $c7, $c5, $c4, $c2, $bc, $b1, $a9, $a5, $a2, $a1, $a3, $a6, $ac, $b7
1d578     C1 CC D6 DC 
1d57c     DE DF E8 F3 
1d580     FA FD 00 02 
1d584     06 07 03 FE | 	byte	$c1, $cc, $d6, $dc, $de, $df, $e8, $f3, $fa, $fd, $00, $02, $06, $07, $03, $fe
1d588     FA F8 F8 FA 
1d58c     FC FB F7 F5 
1d590     F3 F5 F8 FF 
1d594     05 0E 16 1C | 	byte	$fa, $f8, $f8, $fa, $fc, $fb, $f7, $f5, $f3, $f5, $f8, $ff, $05, $0e, $16, $1c
1d598     20 21 25 2B 
1d59c     2E 30 33 36 
1d5a0     35 31 27 1D 
1d5a4     17 11 0E 0D | 	byte	$20, $21, $25, $2b, $2e, $30, $33, $36, $35, $31, $27, $1d, $17, $11, $0e, $0d
1d5a8     0F 12 13 16 
1d5ac     19 19 17 17 
1d5b0     18 17 13 11 
1d5b4     11 13 16 1A | 	byte	$0f, $12, $13, $16, $19, $19, $17, $17, $18, $17, $13, $11, $11, $13, $16, $1a
1d5b8     1F 24 29 2C 
1d5bc     2D 2B 2B 2C 
1d5c0     2A 25 1F 1C 
1d5c4     19 13 0B 06 | 	byte	$1f, $24, $29, $2c, $2d, $2b, $2b, $2c, $2a, $25, $1f, $1c, $19, $13, $0b, $06
1d5c8     03 00 00 FD 
1d5cc     F8 F2 EE EE 
1d5d0     F0 F3 F8 FC 
1d5d4     01 06 0A 0C | 	byte	$03, $00, $00, $fd, $f8, $f2, $ee, $ee, $f0, $f3, $f8, $fc, $01, $06, $0a, $0c
1d5d8     0C 0B 07 02 
1d5dc     FF FB F9 FA 
1d5e0     FA FB FF 00 
1d5e4     FA F4 EF EB | 	byte	$0c, $0b, $07, $02, $ff, $fb, $f9, $fa, $fa, $fb, $ff, $00, $fa, $f4, $ef, $eb
1d5e8     E3 D9 D0 CA 
1d5ec     C5 C3 C1 BE 
1d5f0     BB B5 B0 AF 
1d5f4     B1 B2 B5 BC | 	byte	$e3, $d9, $d0, $ca, $c5, $c3, $c1, $be, $bb, $b5, $b0, $af, $b1, $b2, $b5, $bc
1d5f8     C6 D2 DE E8 
1d5fc     F0 F3 F5 FC 
1d600     03 07 09 0B 
1d604     0E 0F 0D 09 | 	byte	$c6, $d2, $de, $e8, $f0, $f3, $f5, $fc, $03, $07, $09, $0b, $0e, $0f, $0d, $09
1d608     04 00 00 01 
1d60c     03 FF FA F7 
1d610     F4 F1 F2 F9 
1d614     03 0B 10 14 | 	byte	$04, $00, $00, $01, $03, $ff, $fa, $f7, $f4, $f1, $f2, $f9, $03, $0b, $10, $14
1d618     1A 1E 1D 1A 
1d61c     1B 1D 1C 1C 
1d620     1C 1C 1C 1B 
1d624     17 12 0D 07 | 	byte	$1a, $1e, $1d, $1a, $1b, $1d, $1c, $1c, $1c, $1c, $1c, $1b, $17, $12, $0d, $07
1d628     01 00 FF 01 
1d62c     07 0E 13 13 
1d630     14 17 18 15 
1d634     12 11 13 18 | 	byte	$01, $00, $ff, $01, $07, $0e, $13, $13, $14, $17, $18, $15, $12, $11, $13, $18
1d638     1E 23 27 2A 
1d63c     2C 2F 2F 2C 
1d640     2C 2C 28 22 
1d644     1C 16 13 0F | 	byte	$1e, $23, $27, $2a, $2c, $2f, $2f, $2c, $2c, $2c, $28, $22, $1c, $16, $13, $0f
1d648     09 04 02 00 
1d64c     FF FB F8 F5 
1d650     F6 FA FE 01 
1d654     05 07 09 0E | 	byte	$09, $04, $02, $00, $ff, $fb, $f8, $f5, $f6, $fa, $fe, $01, $05, $07, $09, $0e
1d658     14 16 10 0A 
1d65c     05 FF FA F6 
1d660     F4 F2 F0 EE 
1d664     EE F0 EF EB | 	byte	$14, $16, $10, $0a, $05, $ff, $fa, $f6, $f4, $f2, $f0, $ee, $ee, $f0, $ef, $eb
1d668     E6 DF D7 CE 
1d66c     C5 BB B3 B3 
1d670     B4 B7 B5 B1 
1d674     AF AF B5 BC | 	byte	$e6, $df, $d7, $ce, $c5, $bb, $b3, $b3, $b4, $b7, $b5, $b1, $af, $af, $b5, $bc
1d678     C2 C9 D3 DF 
1d67c     EA F3 FA FE 
1d680     02 08 0C 0D 
1d684     0C 0B 0A 0A | 	byte	$c2, $c9, $d3, $df, $ea, $f3, $fa, $fe, $02, $08, $0c, $0d, $0c, $0b, $0a, $0a
1d688     0A 08 06 05 
1d68c     07 05 00 FA 
1d690     F6 F5 F5 F8 
1d694     FF 07 0E 12 | 	byte	$0a, $08, $06, $05, $07, $05, $00, $fa, $f6, $f5, $f5, $f8, $ff, $07, $0e, $12
1d698     15 15 18 1A 
1d69c     1C 19 15 11 
1d6a0     0D 0D 10 12 
1d6a4     14 17 19 16 | 	byte	$15, $15, $18, $1a, $1c, $19, $15, $11, $0d, $0d, $10, $12, $14, $17, $19, $16
1d6a8     0E 06 01 01 
1d6ac     02 05 0B 13 
1d6b0     1A 1C 1B 1A 
1d6b4     1B 1D 1E 1D | 	byte	$0e, $06, $01, $01, $02, $05, $0b, $13, $1a, $1c, $1b, $1a, $1b, $1d, $1e, $1d
1d6b8     1C 21 29 2C 
1d6bc     2D 2D 2E 31 
1d6c0     32 31 2E 29 
1d6c4     22 1A 14 10 | 	byte	$1c, $21, $29, $2c, $2d, $2d, $2e, $31, $32, $31, $2e, $29, $22, $1a, $14, $10
1d6c8     0B 06 01 FD 
1d6cc     F9 F7 F6 F7 
1d6d0     F8 F7 F8 FE 
1d6d4     02 04 04 06 | 	byte	$0b, $06, $01, $fd, $f9, $f7, $f6, $f7, $f8, $f7, $f8, $fe, $02, $04, $04, $06
1d6d8     0B 0C 0D 0C 
1d6dc     07 01 FC F5 
1d6e0     ED E6 E3 E0 
1d6e4     DE DE E2 E3 | 	byte	$0b, $0c, $0d, $0c, $07, $01, $fc, $f5, $ed, $e6, $e3, $e0, $de, $de, $e2, $e3
1d6e8     E2 DE D6 D2 
1d6ec     CC C3 B9 B3 
1d6f0     B2 B3 B2 B3 
1d6f4     B4 B6 B9 C0 | 	byte	$e2, $de, $d6, $d2, $cc, $c3, $b9, $b3, $b2, $b3, $b2, $b3, $b4, $b6, $b9, $c0
1d6f8     CA D2 D8 DE 
1d6fc     E7 F2 FD 05 
1d700     0A 0E 11 13 
1d704     14 14 11 0E | 	byte	$ca, $d2, $d8, $de, $e7, $f2, $fd, $05, $0a, $0e, $11, $13, $14, $14, $11, $0e
1d708     0C 0D 12 13 
1d70c     11 0C 07 04 
1d710     00 00 00 03 
1d714     01 00 02 0A | 	byte	$0c, $0d, $12, $13, $11, $0c, $07, $04, $00, $00, $00, $03, $01, $00, $02, $0a
1d718     10 0F 10 13 
1d71c     16 15 11 0E 
1d720     09 06 02 04 
1d724     08 0E 11 11 | 	byte	$10, $0f, $10, $13, $16, $15, $11, $0e, $09, $06, $02, $04, $08, $0e, $11, $11
1d728     11 0E 0C 0A 
1d72c     08 07 07 0A 
1d730     0E 14 1A 1C 
1d734     1B 1B 1E 22 | 	byte	$11, $0e, $0c, $0a, $08, $07, $07, $0a, $0e, $14, $1a, $1c, $1b, $1b, $1e, $22
1d738     25 25 23 24 
1d73c     29 2E 30 2E 
1d740     2D 2E 2E 2B 
1d744     25 1E 17 10 | 	byte	$25, $25, $23, $24, $29, $2e, $30, $2e, $2d, $2e, $2e, $2b, $25, $1e, $17, $10
1d748     0A 06 01 FE 
1d74c     F9 F5 F4 F4 
1d750     F6 F9 FD 01 
1d754     03 04 06 0B | 	byte	$0a, $06, $01, $fe, $f9, $f5, $f4, $f4, $f6, $f9, $fd, $01, $03, $04, $06, $0b
1d758     0F 0D 09 09 
1d75c     0A 08 03 FD 
1d760     F6 EE E8 E1 
1d764     DC DA DA DC | 	byte	$0f, $0d, $09, $09, $0a, $08, $03, $fd, $f6, $ee, $e8, $e1, $dc, $da, $da, $dc
1d768     DD DD D8 D4 
1d76c     CF CA C6 C3 
1d770     BD B8 B3 B1 
1d774     B0 B2 BA C3 | 	byte	$dd, $dd, $d8, $d4, $cf, $ca, $c6, $c3, $bd, $b8, $b3, $b1, $b0, $b2, $ba, $c3
1d778     CA D2 DA E2 
1d77c     E8 ED F4 FD 
1d780     05 0A 0C 0E 
1d784     11 11 11 12 | 	byte	$ca, $d2, $da, $e2, $e8, $ed, $f4, $fd, $05, $0a, $0c, $0e, $11, $11, $11, $12
1d788     11 0E 0C 0F 
1d78c     12 0E 07 02 
1d790     03 07 0A 0B 
1d794     09 08 04 01 | 	byte	$11, $0e, $0c, $0f, $12, $0e, $07, $02, $03, $07, $0a, $0b, $09, $08, $04, $01
1d798     01 04 08 09 
1d79c     0A 09 07 05 
1d7a0     06 06 03 00 
1d7a4     FF 03 07 09 | 	byte	$01, $04, $08, $09, $0a, $09, $07, $05, $06, $06, $03, $00, $ff, $03, $07, $09
1d7a8     09 0C 10 15 
1d7ac     16 14 12 11 
1d7b0     12 13 15 19 
1d7b4     20 26 26 24 | 	byte	$09, $0c, $10, $15, $16, $14, $12, $11, $12, $13, $15, $19, $20, $26, $26, $24
1d7b8     25 2A 2C 29 
1d7bc     24 26 2C 32 
1d7c0     32 30 2D 2A 
1d7c4     27 22 1C 13 | 	byte	$25, $2a, $2c, $29, $24, $26, $2c, $32, $32, $30, $2d, $2a, $27, $22, $1c, $13
1d7c8     0B 05 00 FC 
1d7cc     F9 F7 F4 F1 
1d7d0     EF F2 F9 FD 
1d7d4     FF 00 04 0A | 	byte	$0b, $05, $00, $fc, $f9, $f7, $f4, $f1, $ef, $f2, $f9, $fd, $ff, $00, $04, $0a
1d7d8     0D 0C 0A 08 
1d7dc     05 01 FF FB 
1d7e0     F5 EE EA E5 
1d7e4     DE D9 D4 D3 | 	byte	$0d, $0c, $0a, $08, $05, $01, $ff, $fb, $f5, $ee, $ea, $e5, $de, $d9, $d4, $d3
1d7e8     D3 D0 CD CC 
1d7ec     CA C7 C8 C9 
1d7f0     C8 C2 BB B4 
1d7f4     AF B1 B7 BF | 	byte	$d3, $d0, $cd, $cc, $ca, $c7, $c8, $c9, $c8, $c2, $bb, $b4, $af, $b1, $b7, $bf
1d7f8     C9 D4 DD E5 
1d7fc     EC F5 FC FF 
1d800     01 05 0A 0D 
1d804     0F 11 13 14 | 	byte	$c9, $d4, $dd, $e5, $ec, $f5, $fc, $ff, $01, $05, $0a, $0d, $0f, $11, $13, $14
1d808     16 1B 1D 18 
1d80c     11 0E 0E 0E 
1d810     0E 0E 12 15 
1d814     16 15 12 0C | 	byte	$16, $1b, $1d, $18, $11, $0e, $0e, $0e, $0e, $0e, $12, $15, $16, $15, $12, $0c
1d818     04 00 02 04 
1d81c     02 00 FF FF 
1d820     00 00 00 FF 
1d824     FF FF FF FF | 	byte	$04, $00, $02, $04, $02, $00, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff, $ff
1d828     FF 01 06 0F 
1d82c     14 18 18 17 
1d830     16 14 13 14 
1d834     18 1F 24 27 | 	byte	$ff, $01, $06, $0f, $14, $18, $18, $17, $16, $14, $13, $14, $18, $1f, $24, $27
1d838     26 25 24 24 
1d83c     24 21 1D 1F 
1d840     26 2C 2D 28 
1d844     21 1C 19 11 | 	byte	$26, $25, $24, $24, $24, $21, $1d, $1f, $26, $2c, $2d, $28, $21, $1c, $19, $11
1d848     08 01 FD FA 
1d84c     F8 F6 F5 F3 
1d850     F4 F6 F8 FA 
1d854     FC FD 00 08 | 	byte	$08, $01, $fd, $fa, $f8, $f6, $f5, $f3, $f4, $f6, $f8, $fa, $fc, $fd, $00, $08
1d858     0F 0F 10 10 
1d85c     0E 08 00 F9 
1d860     F5 F5 F3 ED 
1d864     E9 E5 DF DB | 	byte	$0f, $0f, $10, $10, $0e, $08, $00, $f9, $f5, $f5, $f3, $ed, $e9, $e5, $df, $db
1d868     D6 D1 CC C9 
1d86c     C9 CA D0 D3 
1d870     D2 CE C9 C3 
1d874     BC BA BD C1 | 	byte	$d6, $d1, $cc, $c9, $c9, $ca, $d0, $d3, $d2, $ce, $c9, $c3, $bc, $ba, $bd, $c1
1d878     C8 D1 DB E5 
1d87c     EE F7 FF 04 
1d880     07 08 07 09 
1d884     0C 0D 0F 15 | 	byte	$c8, $d1, $db, $e5, $ee, $f7, $ff, $04, $07, $08, $07, $09, $0c, $0d, $0f, $15
1d888     19 19 1B 1D 
1d88c     1A 10 09 0A 
1d890     0F 14 16 17 
1d894     16 14 13 10 | 	byte	$19, $19, $1b, $1d, $1a, $10, $09, $0a, $0f, $14, $16, $17, $16, $14, $13, $10
1d898     0B 04 FF FD 
1d89c     FE FC F8 F8 
1d8a0     FA FC FC FC 
1d8a4     FD FE FC F9 | 	byte	$0b, $04, $ff, $fd, $fe, $fc, $f8, $f8, $fa, $fc, $fc, $fc, $fd, $fe, $fc, $f9
1d8a8     FA FE 02 06 
1d8ac     0B 11 17 1C 
1d8b0     1D 1B 18 18 
1d8b4     1B 1E 21 25 | 	byte	$fa, $fe, $02, $06, $0b, $11, $17, $1c, $1d, $1b, $18, $18, $1b, $1e, $21, $25
1d8b8     2B 2F 2C 26 
1d8bc     21 21 21 20 
1d8c0     1D 1F 24 27 
1d8c4     26 1F 17 10 | 	byte	$2b, $2f, $2c, $26, $21, $21, $21, $20, $1d, $1f, $24, $27, $26, $1f, $17, $10
1d8c8     0A 05 00 FD 
1d8cc     FB FB F7 F3 
1d8d0     F4 FA FE FE 
1d8d4     FA F7 FD 05 | 	byte	$0a, $05, $00, $fd, $fb, $fb, $f7, $f3, $f4, $fa, $fe, $fe, $fa, $f7, $fd, $05
1d8d8     0A 0D 10 12 
1d8dc     11 0B 01 F7 
1d8e0     F0 ED EA E8 
1d8e4     E7 E4 E0 DC | 	byte	$0a, $0d, $10, $12, $11, $0b, $01, $f7, $f0, $ed, $ea, $e8, $e7, $e4, $e0, $dc
1d8e8     D7 D1 C9 C2 
1d8ec     C0 C1 C6 CB 
1d8f0     CF CE CB C4 
1d8f4     C0 C0 C3 C7 | 	byte	$d7, $d1, $c9, $c2, $c0, $c1, $c6, $cb, $cf, $ce, $cb, $c4, $c0, $c0, $c3, $c7
1d8f8     CA CD D2 D9 
1d8fc     E4 F4 00 03 
1d900     06 09 0E 10 
1d904     0D 0A 0E 16 | 	byte	$ca, $cd, $d2, $d9, $e4, $f4, $00, $03, $06, $09, $0e, $10, $0d, $0a, $0e, $16
1d908     1E 22 23 1F 
1d90c     1C 19 18 15 
1d910     15 18 1C 1F 
1d914     20 1F 1A 16 | 	byte	$1e, $22, $23, $1f, $1c, $19, $18, $15, $15, $18, $1c, $1f, $20, $1f, $1a, $16
1d918     12 0D 08 02 
1d91c     FF FD FB F9 
1d920     F9 FB FC FB 
1d924     FC FB FD FC | 	byte	$12, $0d, $08, $02, $ff, $fd, $fb, $f9, $f9, $fb, $fc, $fb, $fc, $fb, $fd, $fc
1d928     F9 F9 FF 03 
1d92c     06 07 0B 12 
1d930     18 1B 1B 1B 
1d934     1E 20 20 21 | 	byte	$f9, $f9, $ff, $03, $06, $07, $0b, $12, $18, $1b, $1b, $1b, $1e, $20, $20, $21
1d938     25 2A 2B 2A 
1d93c     28 23 1D 19 
1d940     19 1B 1B 1A 
1d944     1B 1A 15 0D | 	byte	$25, $2a, $2b, $2a, $28, $23, $1d, $19, $19, $1b, $1b, $1a, $1b, $1a, $15, $0d
1d948     06 01 FE FB 
1d94c     F7 F4 F2 F1 
1d950     F1 F3 F7 FB 
1d954     FA F6 F6 FC | 	byte	$06, $01, $fe, $fb, $f7, $f4, $f2, $f1, $f1, $f3, $f7, $fb, $fa, $f6, $f6, $fc
1d958     01 06 0B 0F 
1d95c     0F 0B 03 FC 
1d960     F5 F0 EA E4 
1d964     E0 DF E0 DF | 	byte	$01, $06, $0b, $0f, $0f, $0b, $03, $fc, $f5, $f0, $ea, $e4, $e0, $df, $e0, $df
1d968     DA D5 D0 CD 
1d96c     CA C5 C7 CB 
1d970     CC CD CE CD 
1d974     CA CB CF D6 | 	byte	$da, $d5, $d0, $cd, $ca, $c5, $c7, $cb, $cc, $cd, $ce, $cd, $ca, $cb, $cf, $d6
1d978     DA DB DA DA 
1d97c     E1 F0 FC 03 
1d980     08 0C 0F 12 
1d984     13 13 14 16 | 	byte	$da, $db, $da, $da, $e1, $f0, $fc, $03, $08, $0c, $0f, $12, $13, $13, $14, $16
1d988     1B 22 29 29 
1d98c     24 1E 1D 1B 
1d990     1B 19 17 18 
1d994     17 19 1B 18 | 	byte	$1b, $22, $29, $29, $24, $1e, $1d, $1b, $1b, $19, $17, $18, $17, $19, $1b, $18
1d998     12 0A 04 FE 
1d99c     F9 F6 F5 F4 
1d9a0     F2 F3 F5 F5 
1d9a4     F5 F3 F1 F2 | 	byte	$12, $0a, $04, $fe, $f9, $f6, $f5, $f4, $f2, $f3, $f5, $f5, $f5, $f3, $f1, $f2
1d9a8     F5 F7 F8 FB 
1d9ac     FF 03 05 07 
1d9b0     0A 0E 14 1A 
1d9b4     1E 20 22 20 | 	byte	$f5, $f7, $f8, $fb, $ff, $03, $05, $07, $0a, $0e, $14, $1a, $1e, $20, $22, $20
1d9b8     21 23 25 26 
1d9bc     25 26 23 1B 
1d9c0     13 11 16 18 
1d9c4     16 11 0D 0B | 	byte	$21, $23, $25, $26, $25, $26, $23, $1b, $13, $11, $16, $18, $16, $11, $0d, $0b
1d9c8     06 02 00 00 
1d9cc     FF FD F9 F6 
1d9d0     F7 FA FC FC 
1d9d4     FA FA FD 00 | 	byte	$06, $02, $00, $00, $ff, $fd, $f9, $f6, $f7, $fa, $fc, $fc, $fa, $fa, $fd, $00
1d9d8     03 05 09 0F 
1d9dc     10 0E 08 02 
1d9e0     FE F9 F3 EC 
1d9e4     E5 DF DB DA | 	byte	$03, $05, $09, $0f, $10, $0e, $08, $02, $fe, $f9, $f3, $ec, $e5, $df, $db, $da
1d9e8     DB DB D7 D7 
1d9ec     D7 D5 D3 D1 
1d9f0     D1 D1 CD CC 
1d9f4     CC D2 D8 DF | 	byte	$db, $db, $d7, $d7, $d7, $d5, $d3, $d1, $d1, $d1, $cd, $cc, $cc, $d2, $d8, $df
1d9f8     E2 E4 E5 E5 
1d9fc     E6 ED F4 FA 
1da00     FF 06 0C 0B 
1da04     09 0C 13 16 | 	byte	$e2, $e4, $e5, $e5, $e6, $ed, $f4, $fa, $ff, $06, $0c, $0b, $09, $0c, $13, $16
1da08     17 19 1E 22 
1da0c     23 21 22 21 
1da10     1E 19 17 15 
1da14     12 10 13 16 | 	byte	$17, $19, $1e, $22, $23, $21, $22, $21, $1e, $19, $17, $15, $12, $10, $13, $16
1da18     12 0B 03 FD 
1da1c     F7 F2 F0 F1 
1da20     F1 EF EF F1 
1da24     F3 F2 F3 F2 | 	byte	$12, $0b, $03, $fd, $f7, $f2, $f0, $f1, $f1, $ef, $ef, $f1, $f3, $f2, $f3, $f2
1da28     F4 F7 FD 02 
1da2c     03 01 02 07 
1da30     0B 0D 0F 14 
1da34     1C 24 2B 29 | 	byte	$f4, $f7, $fd, $02, $03, $01, $02, $07, $0b, $0d, $0f, $14, $1c, $24, $2b, $29
1da38     25 25 26 25 
1da3c     23 22 20 1E 
1da40     1A 13 0F 0E 
1da44     0F 0D 08 03 | 	byte	$25, $25, $26, $25, $23, $22, $20, $1e, $1a, $13, $0f, $0e, $0f, $0d, $08, $03
1da48     FF FE 00 00 
1da4c     00 FE FC FC 
1da50     FA F9 F9 FA 
1da54     FA F8 F8 FC | 	byte	$ff, $fe, $00, $00, $00, $fe, $fc, $fc, $fa, $f9, $f9, $fa, $fa, $f8, $f8, $fc
1da58     01 04 06 09 
1da5c     09 06 04 01 
1da60     00 FD F8 F1 
1da64     E8 E0 DB D6 | 	byte	$01, $04, $06, $09, $09, $06, $04, $01, $00, $fd, $f8, $f1, $e8, $e0, $db, $d6
1da68     D3 D3 D6 DD 
1da6c     E1 E1 DF DE 
1da70     DE DB D6 D5 
1da74     D5 D6 DC E9 | 	byte	$d3, $d3, $d6, $dd, $e1, $e1, $df, $de, $de, $db, $d6, $d5, $d5, $d6, $dc, $e9
1da78     F1 F3 F2 F2 
1da7c     F6 FA FB FA 
1da80     FB 00 09 0D 
1da84     0D 0D 10 17 | 	byte	$f1, $f3, $f2, $f2, $f6, $fa, $fb, $fa, $fb, $00, $09, $0d, $0d, $0d, $10, $17
1da88     1C 1F 1F 1F 
1da8c     21 24 27 2B 
1da90     2B 25 1F 1A 
1da94     16 12 12 12 | 	byte	$1c, $1f, $1f, $1f, $21, $24, $27, $2b, $2b, $25, $1f, $1a, $16, $12, $12, $12
1da98     0D 06 01 FE 
1da9c     F9 F1 EA E9 
1daa0     EB E9 E7 E7 
1daa4     E7 E7 E9 EC | 	byte	$0d, $06, $01, $fe, $f9, $f1, $ea, $e9, $eb, $e9, $e7, $e7, $e7, $e7, $e9, $ec
1daa8     ED F0 F5 FB 
1daac     00 01 00 FD 
1dab0     FD 00 04 08 
1dab4     0E 15 1C 23 | 	byte	$ed, $f0, $f5, $fb, $00, $01, $00, $fd, $fd, $00, $04, $08, $0e, $15, $1c, $23
1dab8     25 23 22 20 
1dabc     1F 1C 18 13 
1dac0     0F 0D 0C 09 
1dac4     04 01 00 00 | 	byte	$25, $23, $22, $20, $1f, $1c, $18, $13, $0f, $0d, $0c, $09, $04, $01, $00, $00
1dac8     FE FB FA FC 
1dacc     FF FF FE FD 
1dad0     FC FE FF FD 
1dad4     F9 F8 FA FF | 	byte	$fe, $fb, $fa, $fc, $ff, $ff, $fe, $fd, $fc, $fe, $ff, $fd, $f9, $f8, $fa, $ff
1dad8     02 05 08 0D 
1dadc     0F 0B 07 06 
1dae0     07 06 01 FC 
1dae4     F5 EE E6 DD | 	byte	$02, $05, $08, $0d, $0f, $0b, $07, $06, $07, $06, $01, $fc, $f5, $ee, $e6, $dd
1dae8     D9 D7 D7 DA 
1daec     E1 E9 EB EB 
1daf0     EC EA E6 E2 
1daf4     E0 DE E2 E9 | 	byte	$d9, $d7, $d7, $da, $e1, $e9, $eb, $eb, $ec, $ea, $e6, $e2, $e0, $de, $e2, $e9
1daf8     F2 FB FF 00 
1dafc     00 02 04 02 
1db00     FF FD 00 03 
1db04     08 0A 0D 11 | 	byte	$f2, $fb, $ff, $00, $00, $02, $04, $02, $ff, $fd, $00, $03, $08, $0a, $0d, $11
1db08     16 19 1B 1E 
1db0c     1E 1D 20 25 
1db10     28 28 25 1F 
1db14     18 13 12 11 | 	byte	$16, $19, $1b, $1e, $1e, $1d, $20, $25, $28, $28, $25, $1f, $18, $13, $12, $11
1db18     0C 01 F9 F7 
1db1c     F8 F6 EF E8 
1db20     E5 E4 E4 E2 
1db24     E1 E2 E2 E7 | 	byte	$0c, $01, $f9, $f7, $f8, $f6, $ef, $e8, $e5, $e4, $e4, $e2, $e1, $e2, $e2, $e7
1db28     EC F0 F5 FC 
1db2c     00 01 02 02 
1db30     03 03 02 05 
1db34     0C 14 1A 1D | 	byte	$ec, $f0, $f5, $fc, $00, $01, $02, $02, $03, $03, $02, $05, $0c, $14, $1a, $1d
1db38     1F 23 27 27 
1db3c     23 1E 1A 15 
1db40     0D 07 04 05 
1db44     04 01 FC F7 | 	byte	$1f, $23, $27, $27, $23, $1e, $1a, $15, $0d, $07, $04, $05, $04, $01, $fc, $f7
1db48     F9 FE 00 FC 
1db4c     F9 FA FE 00 
1db50     FD FA FC FE 
1db54     FD F7 F4 F8 | 	byte	$f9, $fe, $00, $fc, $f9, $fa, $fe, $00, $fd, $fa, $fc, $fe, $fd, $f7, $f4, $f8
1db58     00 04 01 01 
1db5c     07 0A 0A 07 
1db60     07 07 05 01 
1db64     FA F1 E9 E1 | 	byte	$00, $04, $01, $01, $07, $0a, $0a, $07, $07, $07, $05, $01, $fa, $f1, $e9, $e1
1db68     DD D8 D6 D6 
1db6c     DA DD E3 EA 
1db70     EE F0 EF ED 
1db74     EB E9 E8 EB | 	byte	$dd, $d8, $d6, $d6, $da, $dd, $e3, $ea, $ee, $f0, $ef, $ed, $eb, $e9, $e8, $eb
1db78     F0 F5 FB 02 
1db7c     09 0B 0B 0A 
1db80     08 05 04 03 
1db84     03 03 07 0D | 	byte	$f0, $f5, $fb, $02, $09, $0b, $0b, $0a, $08, $05, $04, $03, $03, $03, $07, $0d
1db88     15 19 18 19 
1db8c     1D 21 22 21 
1db90     21 26 2A 27 
1db94     22 1C 18 15 | 	byte	$15, $19, $18, $19, $1d, $21, $22, $21, $21, $26, $2a, $27, $22, $1c, $18, $15
1db98     13 0B FF F6 
1db9c     F6 F8 F7 F2 
1dba0     EB E5 E3 E1 
1dba4     DF DE DF E1 | 	byte	$13, $0b, $ff, $f6, $f6, $f8, $f7, $f2, $eb, $e5, $e3, $e1, $df, $de, $df, $e1
1dba8     E4 E8 EF F7 
1dbac     FD 00 01 01 
1dbb0     03 06 08 07 
1dbb4     07 0B 11 16 | 	byte	$e4, $e8, $ef, $f7, $fd, $00, $01, $01, $03, $06, $08, $07, $07, $0b, $11, $16
1dbb8     17 17 1A 1E 
1dbbc     23 22 1D 16 
1dbc0     0C 03 FE F9 
1dbc4     F4 F2 F4 F5 | 	byte	$17, $17, $1a, $1e, $23, $22, $1d, $16, $0c, $03, $fe, $f9, $f4, $f2, $f4, $f5
1dbc8     F5 F3 F5 F8 
1dbcc     FB FB F8 F9 
1dbd0     FB FC FA F9 
1dbd4     F8 F6 F4 F5 | 	byte	$f5, $f3, $f5, $f8, $fb, $fb, $f8, $f9, $fb, $fc, $fa, $f9, $f8, $f6, $f4, $f5
1dbd8     FA FF 00 FF 
1dbdc     00 04 08 0B 
1dbe0     0B 0A 08 03 
1dbe4     FF FA F4 EB | 	byte	$fa, $ff, $00, $ff, $00, $04, $08, $0b, $0b, $0a, $08, $03, $ff, $fa, $f4, $eb
1dbe8     E5 E3 E3 E1 
1dbec     E0 E1 E2 E7 
1dbf0     EF F7 F9 F8 
1dbf4     FA FA F9 F9 | 	byte	$e5, $e3, $e3, $e1, $e0, $e1, $e2, $e7, $ef, $f7, $f9, $f8, $fa, $fa, $f9, $f9
1dbf8     FA FD FF 03 
1dbfc     08 0E 13 13 
1dc00     11 0E 0F 10 
1dc04     0C 05 02 04 | 	byte	$fa, $fd, $ff, $03, $08, $0e, $13, $13, $11, $0e, $0f, $10, $0c, $05, $02, $04
1dc08     0B 11 16 18 
1dc0c     18 1A 1C 1D 
1dc10     1C 1A 1C 1F 
1dc14     22 1F 1B 17 | 	byte	$0b, $11, $16, $18, $18, $1a, $1c, $1d, $1c, $1a, $1c, $1f, $22, $1f, $1b, $17
1dc18     11 09 00 F9 
1dc1c     F4 F1 EF ED 
1dc20     E9 E4 DF DC 
1dc24     D9 D7 D8 D9 | 	byte	$11, $09, $00, $f9, $f4, $f1, $ef, $ed, $e9, $e4, $df, $dc, $d9, $d7, $d8, $d9
1dc28     DB DF E4 EB 
1dc2c     F2 F8 FB FF 
1dc30     03 06 07 07 
1dc34     0A 0F 11 12 | 	byte	$db, $df, $e4, $eb, $f2, $f8, $fb, $ff, $03, $06, $07, $07, $0a, $0f, $11, $12
1dc38     11 11 15 18 
1dc3c     1B 1F 21 1C 
1dc40     15 0C 03 FC 
1dc44     F5 ED E9 EB | 	byte	$11, $11, $15, $18, $1b, $1f, $21, $1c, $15, $0c, $03, $fc, $f5, $ed, $e9, $eb
1dc48     F2 F6 F6 F6 
1dc4c     F6 F9 FD FE 
1dc50     FC F9 FA FD 
1dc54     FE FC F9 F7 | 	byte	$f2, $f6, $f6, $f6, $f6, $f9, $fd, $fe, $fc, $f9, $fa, $fd, $fe, $fc, $f9, $f7
1dc58     FA FE FE FD 
1dc5c     00 03 05 07 
1dc60     09 0C 0D 09 
1dc64     03 FD FA F4 | 	byte	$fa, $fe, $fe, $fd, $00, $03, $05, $07, $09, $0c, $0d, $09, $03, $fd, $fa, $f4
1dc68     EE EA E7 E5 
1dc6c     E3 E3 E3 E5 
1dc70     EA F0 F7 FC 
1dc74     FF 00 03 04 | 	byte	$ee, $ea, $e7, $e5, $e3, $e3, $e3, $e5, $ea, $f0, $f7, $fc, $ff, $00, $03, $04
1dc78     06 06 06 06 
1dc7c     06          | 	byte	$06[5]
1dc7d     09 0F 16 17 
1dc81     16 15 16 16 
1dc85     13 0C 07 06 
1dc89     0A 11 16 17 | 	byte	$09, $0f, $16, $17, $16, $15, $16, $16, $13, $0c, $07, $06, $0a, $11, $16, $17
1dc8d     15 14 16 18 
1dc91     1A 1A 1A 1A 
1dc95     1A 1A 19 15 
1dc99     0D 02 FD FA | 	byte	$15, $14, $16, $18, $1a, $1a, $1a, $1a, $1a, $1a, $19, $15, $0d, $02, $fd, $fa
1dc9d     F8 F5 EE E6 
1dca1     E1 DF DF DB 
1dca5     D7 D5 D5 D6 
1dca9     D6 DA E1 E8 | 	byte	$f8, $f5, $ee, $e6, $e1, $df, $df, $db, $d7, $d5, $d5, $d6, $d6, $da, $e1, $e8
1dcad     EE F4 FA FF 
1dcb1     03 08 0B 0B 
1dcb5     0C 0E 10 10 
1dcb9     10 0F 11 15 | 	byte	$ee, $f4, $fa, $ff, $03, $08, $0b, $0b, $0c, $0e, $10, $10, $10, $0f, $11, $15
1dcbd     17 18 17 15 
1dcc1     11 09 01 FA 
1dcc5     F2 EC E8 E7 
1dcc9     E9 ED F3 F5 | 	byte	$17, $18, $17, $15, $11, $09, $01, $fa, $f2, $ec, $e8, $e7, $e9, $ed, $f3, $f5
1dccd     F3 F3 F7 FA 
1dcd1     FA F8 F7 F9 
1dcd5     FC FF FD FA 
1dcd9     F8 FA FE 00 | 	byte	$f3, $f3, $f7, $fa, $fa, $f8, $f7, $f9, $fc, $ff, $fd, $fa, $f8, $fa, $fe, $00
1dcdd     01 01 02 04 
1dce1     07 09 0A 08 
1dce5     03 00 FA F6 
1dce9     F2 ED EB EA | 	byte	$01, $01, $02, $04, $07, $09, $0a, $08, $03, $00, $fa, $f6, $f2, $ed, $eb, $ea
1dced     E9 E8 EA EE 
1dcf1     F2 F5 FA 01 
1dcf5     08 0D 13 18 
1dcf9     1B 19 15 14 | 	byte	$e9, $e8, $ea, $ee, $f2, $f5, $fa, $01, $08, $0d, $13, $18, $1b, $19, $15, $14
1dcfd     15 19 1C 1F 
1dd01     23 24 23 22 
1dd05     21 1E 19 14 
1dd09     13 14 16 16 | 	byte	$15, $19, $1c, $1f, $23, $24, $23, $22, $21, $1e, $19, $14, $13, $14, $16, $16
1dd0d     14 11 0F 11 
1dd11     16 18 18 16 
1dd15     13 11 11 11 
1dd19     0C 05 FE F9 | 	byte	$14, $11, $0f, $11, $16, $18, $18, $16, $13, $11, $11, $11, $0c, $05, $fe, $f9
1dd1d     F6 F5 F1 E9 
1dd21     DD D5 D4 D9 
1dd25     D9 D2 C9 C6 
1dd29     CD D2 D5 D9 | 	byte	$f6, $f5, $f1, $e9, $dd, $d5, $d4, $d9, $d9, $d2, $c9, $c6, $cd, $d2, $d5, $d9
1dd2d     DF E5 ED F4 
1dd31     FA FD 00 06 
1dd35     0C 0C 0A 0A 
1dd39     0D 0F 0F 0E | 	byte	$df, $e5, $ed, $f4, $fa, $fd, $00, $06, $0c, $0c, $0a, $0a, $0d, $0f, $0f, $0e
1dd3d     0E 11 13 11 
1dd41     0E 0C 09 04 
1dd45     FD F6 F1 EE 
1dd49     EC ED ED EF | 	byte	$0e, $11, $13, $11, $0e, $0c, $09, $04, $fd, $f6, $f1, $ee, $ec, $ed, $ed, $ef
1dd4d     F3 F6 F7 F7 
1dd51     F8 F8 FA FA 
1dd55     FB FD FE FF 
1dd59     FD FA F9 FD | 	byte	$f3, $f6, $f7, $f7, $f8, $f8, $fa, $fa, $fb, $fd, $fe, $ff, $fd, $fa, $f9, $fd
1dd5d     00 01 00 FF 
1dd61     FF 01 03 04 
1dd65     05 04 FF F9 
1dd69     F4 F0 ED EA | 	byte	$00, $01, $00, $ff, $ff, $01, $03, $04, $05, $04, $ff, $f9, $f4, $f0, $ed, $ea
1dd6d     EB EB EB ED 
1dd71     F0 F4 F8 FD 
1dd75     04 0F 19 20 
1dd79     23 21 21 20 | 	byte	$eb, $eb, $eb, $ed, $f0, $f4, $f8, $fd, $04, $0f, $19, $20, $23, $21, $21, $20
1dd7d     20 23 26 27 
1dd81     28 2A 29 28 
1dd85     27 27 26 24 
1dd89     22 1E 1B 18 | 	byte	$20, $23, $26, $27, $28, $2a, $29, $28, $27, $27, $26, $24, $22, $1e, $1b, $18
1dd8d     14 10 0D 0B 
1dd91     0D 10 11 10 
1dd95     11 10 0E 0C 
1dd99     09 06 02 FE | 	byte	$14, $10, $0d, $0b, $0d, $10, $11, $10, $11, $10, $0e, $0c, $09, $06, $02, $fe
1dd9d     F9 F3 ED E9 
1dda1     E3 DC D5 CF 
1dda5     D1 D2 CC C4 
1dda9     C1 C6 CD D2 | 	byte	$f9, $f3, $ed, $e9, $e3, $dc, $d5, $cf, $d1, $d2, $cc, $c4, $c1, $c6, $cd, $d2
1ddad     D5 D9 E0 E7 
1ddb1     EF F6 F8 FC 
1ddb5     01 07 0A 0A 
1ddb9     0A 0C 0D 0F | 	byte	$d5, $d9, $e0, $e7, $ef, $f6, $f8, $fc, $01, $07, $0a, $0a, $0a, $0c, $0d, $0f
1ddbd     0F 0E 0B 0B 
1ddc1     0C 0C 0A 06 
1ddc5     01 FF FB F7 
1ddc9     F4 F2 F1 EF | 	byte	$0f, $0e, $0b, $0b, $0c, $0c, $0a, $06, $01, $ff, $fb, $f7, $f4, $f2, $f1, $ef
1ddcd     EE F0 F5 F8 
1ddd1     F9 FB FD FC 
1ddd5     FB FC FD FF 
1ddd9     FF FE FE FE | 	byte	$ee, $f0, $f5, $f8, $f9, $fb, $fd, $fc, $fb, $fc, $fd, $ff, $ff, $fe, $fe, $fe
1dddd     FB F9 FA FB 
1dde1     FA F9 FA FD 
1dde5     00 02 01 FD 
1dde9     F7 F0 ED EB | 	byte	$fb, $f9, $fa, $fb, $fa, $f9, $fa, $fd, $00, $02, $01, $fd, $f7, $f0, $ed, $eb
1dded     EB EB ED EF 
1ddf1     F0 F0 F6 FE 
1ddf5     03 0A 16 24 
1ddf9     29 27 27 29 | 	byte	$eb, $eb, $ed, $ef, $f0, $f0, $f6, $fe, $03, $0a, $16, $24, $29, $27, $27, $29
1ddfd     2D 30 32 33 
1de01     35 37 34 32 
1de05     2E 2E 30 33 
1de09     32 2D 26 20 | 	byte	$2d, $30, $32, $33, $35, $37, $34, $32, $2e, $2e, $30, $33, $32, $2d, $26, $20
1de0d     1A 14 10 0D 
1de11     0B 09 09 0A 
1de15     0A 0C 0D 0C 
1de19     08 03 02 00 | 	byte	$1a, $14, $10, $0d, $0b, $09, $09, $0a, $0a, $0c, $0d, $0c, $08, $03, $02, $00
1de1d     FC F4 EA E4 
1de21     E0 DC D6 CF 
1de25     C8 C3 C3 C3 
1de29     C0 BC BF C6 | 	byte	$fc, $f4, $ea, $e4, $e0, $dc, $d6, $cf, $c8, $c3, $c3, $c3, $c0, $bc, $bf, $c6
1de2d     CA CC D0 D6 
1de31     DF E7 EE F2 
1de35     F6 FA 00 05 
1de39     08 09 08 09 | 	byte	$ca, $cc, $d0, $d6, $df, $e7, $ee, $f2, $f6, $fa, $00, $05, $08, $09, $08, $09
1de3d     0B 0E 0D 0C 
1de41     0B 0C 0D 0A 
1de45     05 02 01 00 
1de49     FE FB F9 F5 | 	byte	$0b, $0e, $0d, $0c, $0b, $0c, $0d, $0a, $05, $02, $01, $00, $fe, $fb, $f9, $f5
1de4d     F2 F2 F5 F7 
1de51     FB FE 00 00 
1de55     FF FC FC 00 
1de59     01 FF FE FE | 	byte	$f2, $f2, $f5, $f7, $fb, $fe, $00, $00, $ff, $fc, $fc, $00, $01, $ff, $fe, $fe
1de5d     FD FB F7 F4 
1de61     F5 F6 F6 F8 
1de65     FB FE FF FE 
1de69     FA F5 F1 EF | 	byte	$fd, $fb, $f7, $f4, $f5, $f6, $f6, $f8, $fb, $fe, $ff, $fe, $fa, $f5, $f1, $ef
1de6d     EE ED ED EF 
1de71     F1 F2 F3 F8 
1de75     01 0C 17 1F 
1de79     26 2C 2E 30 | 	byte	$ee, $ed, $ed, $ef, $f1, $f2, $f3, $f8, $01, $0c, $17, $1f, $26, $2c, $2e, $30
1de7d     36 3D 3E 3E 
1de81     3F 41 41 3D 
1de85     38 35 38 3B 
1de89     3B 37 33 2B | 	byte	$36, $3d, $3e, $3e, $3f, $41, $41, $3d, $38, $35, $38, $3b, $3b, $37, $33, $2b
1de8d     21 19 15 12 
1de91     0E 0A 06 04 
1de95     03 05 07 08 
1de99     07 03 00 FF | 	byte	$21, $19, $15, $12, $0e, $0a, $06, $04, $03, $05, $07, $08, $07, $03, $00, $ff
1de9d     FE F9 EE E3 
1dea1     DC D7 D3 CD 
1dea5     C7 C1 BB B6 
1dea9     B7 B9 BA BA | 	byte	$fe, $f9, $ee, $e3, $dc, $d7, $d3, $cd, $c7, $c1, $bb, $b6, $b7, $b9, $ba, $ba
1dead     BD C0 C3 C7 
1deb1     CF D7 DE E5 
1deb5     EC F3 F7 FA 
1deb9     00 02 04 05 | 	byte	$bd, $c0, $c3, $c7, $cf, $d7, $de, $e5, $ec, $f3, $f7, $fa, $00, $02, $04, $05
1debd     05 06 07 0B 
1dec1     0E 0D 0A 07 
1dec5     05 03 02 02 
1dec9     01 00 FE FB | 	byte	$05, $06, $07, $0b, $0e, $0d, $0a, $07, $05, $03, $02, $02, $01, $00, $fe, $fb
1decd     F9 F8 F9 FB 
1ded1     FF 00 01 02 
1ded5     03 05 05 04 
1ded9     03 02 02 00 | 	byte	$f9, $f8, $f9, $fb, $ff, $00, $01, $02, $03, $05, $05, $04, $03, $02, $02, $00
1dedd     FE FA F6 F4 
1dee1     F4 F5 F4 F4 
1dee5     F6 F7 F8 FA 
1dee9     FB FB F7 F3 | 	byte	$fe, $fa, $f6, $f4, $f4, $f5, $f4, $f4, $f6, $f7, $f8, $fa, $fb, $fb, $f7, $f3
1deed     F0 EF F0 EF 
1def1     ED ED F1 F5 
1def5     FB 04 0F 17 
1def9     1B 1F 26 2D | 	byte	$f0, $ef, $f0, $ef, $ed, $ed, $f1, $f5, $fb, $04, $0f, $17, $1b, $1f, $26, $2d
1defd     34 38 3A 3D 
1df01     3F 40 3F 3F 
1df05     3D 3C 3B 3B 
1df09     3B 3A 37 32 | 	byte	$34, $38, $3a, $3d, $3f, $40, $3f, $3f, $3d, $3c, $3b, $3b, $3b, $3a, $37, $32
1df0d     2B 24 1E 18 
1df11     14 11 0E 0A 
1df15     07 0B 0E 0E 
1df19     0D 0F 10 0A | 	byte	$2b, $24, $1e, $18, $14, $11, $0e, $0a, $07, $0b, $0e, $0e, $0d, $0f, $10, $0a
1df1d     04 02 FF F9 
1df21     EF E6 DE D5 
1df25     CE C7 C3 BC 
1df29     B5 B5 B8 BB | 	byte	$04, $02, $ff, $f9, $ef, $e6, $de, $d5, $ce, $c7, $c3, $bc, $b5, $b5, $b8, $bb
1df2d     BA BA BD C2 
1df31     C6 CC D4 DE 
1df35     E5 EB F0 F4 
1df39     F7 FA FF 01 | 	byte	$ba, $ba, $bd, $c2, $c6, $cc, $d4, $de, $e5, $eb, $f0, $f4, $f7, $fa, $ff, $01
1df3d     02 02 04 06 
1df41     08 0C 0C 07 
1df45     01 00 00 00 
1df49     00 FD FB FB | 	byte	$02, $02, $04, $06, $08, $0c, $0c, $07, $01, $00, $00, $00, $00, $fd, $fb, $fb
1df4d     FB FC FF 03 
1df51     05 05 06 06 
1df55     03 04 09 0C 
1df59     0A 07 03 00 | 	byte	$fb, $fc, $ff, $03, $05, $05, $06, $06, $03, $04, $09, $0c, $0a, $07, $03, $00
1df5d     FE FA F4 EF 
1df61     F0 F4 F5 F2 
1df65     EF EE F0 F2 
1df69     F4 F6 F7 F5 | 	byte	$fe, $fa, $f4, $ef, $f0, $f4, $f5, $f2, $ef, $ee, $f0, $f2, $f4, $f6, $f7, $f5
1df6d     F2 F0 EE EC 
1df71     EA E9 EA EC 
1df75     F1 F9 02 0C 
1df79     12 14 18 20 | 	byte	$f2, $f0, $ee, $ec, $ea, $e9, $ea, $ec, $f1, $f9, $02, $0c, $12, $14, $18, $20
1df7d     2A 31 35 35 
1df81     37 39 3B 3E 
1df85     3E 3C 39 36 
1df89     34 34 34 32 | 	byte	$2a, $31, $35, $35, $37, $39, $3b, $3e, $3e, $3c, $39, $36, $34, $34, $34, $32
1df8d     2F 2B 28 24 
1df91     1F 1A 17 13 
1df95     12 14 18 1B 
1df99     1A 18 19 1B | 	byte	$2f, $2b, $28, $24, $1f, $1a, $17, $13, $12, $14, $18, $1b, $1a, $18, $19, $1b
1df9d     1A 14 0E 09 
1dfa1     03 FC F1 E6 
1dfa5     D9 CF C8 C3 
1dfa9     C0 BA B6 B5 | 	byte	$1a, $14, $0e, $09, $03, $fc, $f1, $e6, $d9, $cf, $c8, $c3, $c0, $ba, $b6, $b5
1dfad     B8 B8 B8 B9 
1dfb1     BE C4 CB D3 
1dfb5     DD E3 E8 EE 
1dfb9     F2 F7 FA FC | 	byte	$b8, $b8, $b8, $b9, $be, $c4, $cb, $d3, $dd, $e3, $e8, $ee, $f2, $f7, $fa, $fc
1dfbd     FE FF 00 02 
1dfc1     04 04 02 02 
1dfc5     01 00 FD FD 
1dfc9     FF FD F9 F6 | 	byte	$fe, $ff, $00, $02, $04, $04, $02, $02, $01, $00, $fd, $fd, $ff, $fd, $f9, $f6
1dfcd     F6 FA FF 03 
1dfd1     08 0D 0D 0A 
1dfd5     08 0B 0E 10 
1dfd9     10 0E 0A 05 | 	byte	$f6, $fa, $ff, $03, $08, $0d, $0d, $0a, $08, $0b, $0e, $10, $10, $0e, $0a, $05
1dfdd     00 FC F6 F4 
1dfe1     F3 F3 F4 F4 
1dfe5     F2 EE EC EF 
1dfe9     F2 F5 F6 F6 | 	byte	$00, $fc, $f6, $f4, $f3, $f3, $f4, $f4, $f2, $ee, $ec, $ef, $f2, $f5, $f6, $f6
1dfed     F6 F4 F2 EE 
1dff1     E9 E8 E8 E9 
1dff5     EB F1 F8 00 
1dff9     08 0D 12 19 | 	byte	$f6, $f4, $f2, $ee, $e9, $e8, $e8, $e9, $eb, $f1, $f8, $00, $08, $0d, $12, $19
1dffd     21 27 2B 2D 
1e001     2F 30 33 37 
1e005     39 38 35 31 
1e009     2D 2A 26 25 | 	byte	$21, $27, $2b, $2d, $2f, $30, $33, $37, $39, $38, $35, $31, $2d, $2a, $26, $25
1e00d     25 24 25 24 
1e011     22 20 1C 17 
1e015     16 16 19 1B 
1e019     1D 1E 1E 1F | 	byte	$25, $24, $25, $24, $22, $20, $1c, $17, $16, $16, $19, $1b, $1d, $1e, $1e, $1f
1e01d     21 21 1D 16 
1e021     0F 09 02 F9 
1e025     EB DE D1 C9 
1e029     C4 C1 BB B4 | 	byte	$21, $21, $1d, $16, $0f, $09, $02, $f9, $eb, $de, $d1, $c9, $c4, $c1, $bb, $b4
1e02d     B3 B7 B8 B9 
1e031     B9 BE C6 CF 
1e035     D8 E0 E4 E8 
1e039     EE F2 F6 F9 | 	byte	$b3, $b7, $b8, $b9, $b9, $be, $c6, $cf, $d8, $e0, $e4, $e8, $ee, $f2, $f6, $f9
1e03d     FC FE 00 01 
1e041     02 04 02 00 
1e045     FC FE 00 FE 
1e049     FC FA F9 F8 | 	byte	$fc, $fe, $00, $01, $02, $04, $02, $00, $fc, $fe, $00, $fe, $fc, $fa, $f9, $f8
1e04d     F6 F7 FB 00 
1e051     06 0B 0F 10 
1e055     11 12 14 16 
1e059     14 10 0D 08 | 	byte	$f6, $f7, $fb, $00, $06, $0b, $0f, $10, $11, $12, $14, $16, $14, $10, $0d, $08
1e05d     02 FE FB FA 
1e061     FB FB F8 F4 
1e065     F2 EE EB EC 
1e069     ED EE F1 F3 | 	byte	$02, $fe, $fb, $fa, $fb, $fb, $f8, $f4, $f2, $ee, $eb, $ec, $ed, $ee, $f1, $f3
1e06d     F4 F5 F5 F2 
1e071     ED E8 E6 E4 
1e075     E4 E9 EF F6 
1e079     FD 03 0B 13 | 	byte	$f4, $f5, $f5, $f2, $ed, $e8, $e6, $e4, $e4, $e9, $ef, $f6, $fd, $03, $0b, $13
1e07d     1C 23 24 25 
1e081     29 2E 31 32 
1e085     31 33 33 31 
1e089     2D 28 23 1D | 	byte	$1c, $23, $24, $25, $29, $2e, $31, $32, $31, $33, $33, $31, $2d, $28, $23, $1d
1e08d     19 19 1E 20 
1e091     20 20 21 21 
1e095     20 1E 1E 1E 
1e099     1F 23 28 2B | 	byte	$19, $19, $1e, $20, $20, $20, $21, $21, $20, $1e, $1e, $1e, $1f, $23, $28, $2b
1e09d     2A 28 28 24 
1e0a1     1C 16 0F 07 
1e0a5     FD F1 E6 DB 
1e0a9     D1 CA C3 BD | 	byte	$2a, $28, $28, $24, $1c, $16, $0f, $07, $fd, $f1, $e6, $db, $d1, $ca, $c3, $bd
1e0ad     B6 B5 B7 B8 
1e0b1     B9 BC C3 CB 
1e0b5     D1 D6 DC E2 
1e0b9     E7 EC F1 F5 | 	byte	$b6, $b5, $b7, $b8, $b9, $bc, $c3, $cb, $d1, $d6, $dc, $e2, $e7, $ec, $f1, $f5
1e0bd     FB FE FF FF 
1e0c1     FE FE FE FC 
1e0c5     F7 F5 F5 F7 
1e0c9     F9 F7 F4 F5 | 	byte	$fb, $fe, $ff, $ff, $fe, $fe, $fe, $fc, $f7, $f5, $f5, $f7, $f9, $f7, $f4, $f5
1e0cd     F6 F7 F6 F7 
1e0d1     FA FF 03 07 
1e0d5     0B 10 15 18 
1e0d9     15 12 0F 0A | 	byte	$f6, $f7, $f6, $f7, $fa, $ff, $03, $07, $0b, $10, $15, $18, $15, $12, $0f, $0a
1e0dd     05 01 00 FF 
1e0e1     00 00 FD F9 
1e0e5     F4 F0 EE EF 
1e0e9     EF EE EF F0 | 	byte	$05, $01, $00, $ff, $00, $00, $fd, $f9, $f4, $f0, $ee, $ef, $ef, $ee, $ef, $f0
1e0ed     F3 F6 F8 F8 
1e0f1     F6 F2 ED E8 
1e0f5     E5 E8 ED F2 
1e0f9     F9 00 05 0D | 	byte	$f3, $f6, $f8, $f8, $f6, $f2, $ed, $e8, $e5, $e8, $ed, $f2, $f9, $00, $05, $0d
1e0fd     18 20 23 26 
1e101     2A 2D 2E 2F 
1e105     30 30 2E 2E 
1e109     2D 29 23 1C | 	byte	$18, $20, $23, $26, $2a, $2d, $2e, $2f, $30, $30, $2e, $2e, $2d, $29, $23, $1c
1e10d     15 11 11 14 
1e111     19 1D 1F 20 
1e115     23 26 26 22 
1e119     1F 21 28 2F | 	byte	$15, $11, $11, $14, $19, $1d, $1f, $20, $23, $26, $26, $22, $1f, $21, $28, $2f
1e11d     32 2F 2B 28 
1e121     24 1D 15 0D 
1e125     04 FC F3 EC 
1e129     E3 D9 D1 C7 | 	byte	$32, $2f, $2b, $28, $24, $1d, $15, $0d, $04, $fc, $f3, $ec, $e3, $d9, $d1, $c7
1e12d     C0 BA B6 B7 
1e131     B8 B8 BE C8 
1e135     D1 D4 D5 D9 
1e139     E1 E9 EC EF | 	byte	$c0, $ba, $b6, $b7, $b8, $b8, $be, $c8, $d1, $d4, $d5, $d9, $e1, $e9, $ec, $ef
1e13d     F5 FB FD FD 
1e141     FC FD FD FC 
1e145     F9 F6 F5 F3 
1e149     F3 F4 F5 F5 | 	byte	$f5, $fb, $fd, $fd, $fc, $fd, $fd, $fc, $f9, $f6, $f5, $f3, $f3, $f4, $f5, $f5
1e14d     F5 F4 F3 F2 
1e151     F2 F3 F6 FB 
1e155     00 06 0D 13 
1e159     14 11 0E 0A | 	byte	$f5, $f4, $f3, $f2, $f2, $f3, $f6, $fb, $00, $06, $0d, $13, $14, $11, $0e, $0a
1e15d     07 05 02 00 
1e161     00 01 00 FB 
1e165     F6 F3 F2 F1 
1e169     EF ED EC EC | 	byte	$07, $05, $02, $00, $00, $01, $00, $fb, $f6, $f3, $f2, $f1, $ef, $ed, $ec, $ec
1e16d     ED F0 F5 F7 
1e171     F5 F1 EF ED 
1e175     E9 E8 E9 EF 
1e179     F4 F8 FD 04 | 	byte	$ed, $f0, $f5, $f7, $f5, $f1, $ef, $ed, $e9, $e8, $e9, $ef, $f4, $f8, $fd, $04
1e17d     0E 17 1D 22 
1e181     26 2B 2D 2C 
1e185     29 2A 2A 29 
1e189     26 26 24 1E | 	byte	$0e, $17, $1d, $22, $26, $2b, $2d, $2c, $29, $2a, $2a, $29, $26, $26, $24, $1e
1e18d     17 0F 0C 0D 
1e191     0F 13 19 1D 
1e195     20 24 29 2A 
1e199     27 24 25 2A | 	byte	$17, $0f, $0c, $0d, $0f, $13, $19, $1d, $20, $24, $29, $2a, $27, $24, $25, $2a
1e19d     31 34 34 2F 
1e1a1     2C 27 1F 16 
1e1a5     0B 03 FE F7 
1e1a9     F2 EB E5 DE | 	byte	$31, $34, $34, $2f, $2c, $27, $1f, $16, $0b, $03, $fe, $f7, $f2, $eb, $e5, $de
1e1ad     D5 CB C0 BC 
1e1b1     BD C0 C1 C3 
1e1b5     CB D4 DA DC 
1e1b9     DE E5 EB EF | 	byte	$d5, $cb, $c0, $bc, $bd, $c0, $c1, $c3, $cb, $d4, $da, $dc, $de, $e5, $eb, $ef
1e1bd     F5 F9 FB F9 
1e1c1     F8 F9 FB FC 
1e1c5     FB F9 F7 F7 
1e1c9     F4 F1 F2 F5 | 	byte	$f5, $f9, $fb, $f9, $f8, $f9, $fb, $fc, $fb, $f9, $f7, $f7, $f4, $f1, $f2, $f5
1e1cd     F9 F7 F1 EB 
1e1d1     E8 E9 ED EF 
1e1d5     F1 F7 00 07 
1e1d9     0B 0B 09 09 | 	byte	$f9, $f7, $f1, $eb, $e8, $e9, $ed, $ef, $f1, $f7, $00, $07, $0b, $0b, $09, $09
1e1dd     09 0A 09 06 
1e1e1     04 03 01 FE 
1e1e5     FB F8 F7 F5 
1e1e9     F3 F3 F2 ED | 	byte	$09, $0a, $09, $06, $04, $03, $01, $fe, $fb, $f8, $f7, $f5, $f3, $f3, $f2, $ed
1e1ed     E9 EA EE F3 
1e1f1     F4 F1 EF EE 
1e1f5     ED EC EB EE 
1e1f9     F1 F3 F7 FF | 	byte	$e9, $ea, $ee, $f3, $f4, $f1, $ef, $ee, $ed, $ec, $eb, $ee, $f1, $f3, $f7, $ff
1e1fd     07 0E 16 1E 
1e201     25 28 29 2A 
1e205     29 25 23 25 
1e209     27 26 22 1E | 	byte	$07, $0e, $16, $1e, $25, $28, $29, $2a, $29, $25, $23, $25, $27, $26, $22, $1e
1e20d     1B 16 0F 0A 
1e211     08 0A 0E 14 
1e215     1D 23 25 28 
1e219     2A 2A 29 28 | 	byte	$1b, $16, $0f, $0a, $08, $0a, $0e, $14, $1d, $23, $25, $28, $2a, $2a, $29, $28
1e21d     2B 30 34 34 
1e221     31 2E 29 20 
1e225     16 0D 04 FE 
1e229     F9 F5 F1 EC | 	byte	$2b, $30, $34, $34, $31, $2e, $29, $20, $16, $0d, $04, $fe, $f9, $f5, $f1, $ec
1e22d     E5 DD D3 CA 
1e231     C4 C5 C9 CB 
1e235     CB CD D4 DA 
1e239     DF E2 E8 F0 | 	byte	$e5, $dd, $d3, $ca, $c4, $c5, $c9, $cb, $cb, $cd, $d4, $da, $df, $e2, $e8, $f0
1e23d     F6 FA FB FC 
1e241     F9 F7 F6 F8 
1e245     FA F9 F8 F8 
1e249     FA F9 F8 F7 | 	byte	$f6, $fa, $fb, $fc, $f9, $f7, $f6, $f8, $fa, $f9, $f8, $f8, $fa, $f9, $f8, $f7
1e24d     F7 F8 F8 F2 
1e251     E9 E0 E1 E7 
1e255     EC ED EE F4 
1e259     FD 02 04 04 | 	byte	$f7, $f8, $f8, $f2, $e9, $e0, $e1, $e7, $ec, $ed, $ee, $f4, $fd, $02, $04, $04
1e25d     07 0C 0E 0D 
1e261     09 07 05 03 
1e265     00 FC FB FB 
1e269     F8 F6 F5 F3 | 	byte	$07, $0c, $0e, $0d, $09, $07, $05, $03, $00, $fc, $fb, $fb, $f8, $f6, $f5, $f3
1e26d     EF EC ED EE 
1e271     EE ED EF F0 
1e275     EF ED EC EE 
1e279     F0 F2 F4 FB | 	byte	$ef, $ec, $ed, $ee, $ee, $ed, $ef, $f0, $ef, $ed, $ec, $ee, $f0, $f2, $f4, $fb
1e27d     01 06 0E 19 
1e281     23 26 26 28 
1e285     28 26 22 20 
1e289     20 22 22 1F | 	byte	$01, $06, $0e, $19, $23, $26, $26, $28, $28, $26, $22, $20, $20, $22, $22, $1f
1e28d     1B 19 17 12 
1e291     0C 08 07 0A 
1e295     11 19 21 26 
1e299     29 2C 2E 2F | 	byte	$1b, $19, $17, $12, $0c, $08, $07, $0a, $11, $19, $21, $26, $29, $2c, $2e, $2f
1e29d     2F 2F 30 30 
1e2a1     2E 2D 2C 28 
1e2a5     20 16 0E 08 
1e2a9     02 FB F7 F3 | 	byte	$2f, $2f, $30, $30, $2e, $2d, $2c, $28, $20, $16, $0e, $08, $02, $fb, $f7, $f3
1e2ad     F0 EB E3 DC 
1e2b1     D3 CD CC CE 
1e2b5     D0 CF D0 D4 
1e2b9     D8 DD E3 EA | 	byte	$f0, $eb, $e3, $dc, $d3, $cd, $cc, $ce, $d0, $cf, $d0, $d4, $d8, $dd, $e3, $ea
1e2bd     F0 F4 F8 FC 
1e2c1     FB F4 F0 F0 
1e2c5     F2 F4 F3 F1 
1e2c9     F2 F7 FA FA | 	byte	$f0, $f4, $f8, $fc, $fb, $f4, $f0, $f0, $f2, $f4, $f3, $f1, $f2, $f7, $fa, $fa
1e2cd     F8 F4 F0 EE 
1e2d1     EA E4 DC D7 
1e2d5     D8 DD E3 E7 
1e2d9     EB EF F7 FF | 	byte	$f8, $f4, $f0, $ee, $ea, $e4, $dc, $d7, $d8, $dd, $e3, $e7, $eb, $ef, $f7, $ff
1e2dd     05 0A 0D 0F 
1e2e1     0E 0B 07 04 
1e2e5     02 01 01 00 
1e2e9     FE FA F9 F9 | 	byte	$05, $0a, $0d, $0f, $0e, $0b, $07, $04, $02, $01, $01, $00, $fe, $fa, $f9, $f9
1e2ed     F7 F4 F1 F0 
1e2f1     EE EB EA EA 
1e2f5     ED F0 F1 EF 
1e2f9     EE F0 F4 F7 | 	byte	$f7, $f4, $f1, $f0, $ee, $eb, $ea, $ea, $ed, $f0, $f1, $ef, $ee, $f0, $f4, $f7
1e2fd     FB 00 07 10 
1e301     1A 20 22 24 
1e305     27 27 23 1F 
1e309     1D 1C 1C 1E | 	byte	$fb, $00, $07, $10, $1a, $20, $22, $24, $27, $27, $23, $1f, $1d, $1c, $1c, $1e
1e30d     1D 1B 19 18 
1e311     16 11 0B 0B 
1e315     0C 0F 14 1B 
1e319     24 2A 2F 32 | 	byte	$1d, $1b, $19, $18, $16, $11, $0b, $0b, $0c, $0f, $14, $1b, $24, $2a, $2f, $32
1e31d     34 35 36 34 
1e321     30 2B 28 27 
1e325     26 20 17 0F 
1e329     0C 08 02 FC | 	byte	$34, $35, $36, $34, $30, $2b, $28, $27, $26, $20, $17, $0f, $0c, $08, $02, $fc
1e32d     F6 F2 F0 EA 
1e331     E1 D9 D3 D1 
1e335     D1 D1 D2 D4 
1e339     D5 D8 DF E7 | 	byte	$f6, $f2, $f0, $ea, $e1, $d9, $d3, $d1, $d1, $d1, $d2, $d4, $d5, $d8, $df, $e7
1e33d     EB EC EE F4 
1e341     FA F9 F3 EE 
1e345     ED F0 F2 F2 
1e349     F2 F4 F7 F9 | 	byte	$eb, $ec, $ee, $f4, $fa, $f9, $f3, $ee, $ed, $f0, $f2, $f2, $f2, $f4, $f7, $f9
1e34d     F9 F8 F4 EF 
1e351     E8 E2 DD D8 
1e355     D4 D1 D2 D6 
1e359     DC E3 EA F5 | 	byte	$f9, $f8, $f4, $ef, $e8, $e2, $dd, $d8, $d4, $d1, $d2, $d6, $dc, $e3, $ea, $f5
1e35d     FF 07 0E 12 
1e361     11 0E 0B 08 
1e365     05 02 04 07 
1e369     08 03 FD F9 | 	byte	$ff, $07, $0e, $12, $11, $0e, $0b, $08, $05, $02, $04, $07, $08, $03, $fd, $f9
1e36d     FA FB F9 F5 
1e371     EF EB EC EE 
1e375     ED EC EE F1 
1e379     F1 F1 F2 F5 | 	byte	$fa, $fb, $f9, $f5, $ef, $eb, $ec, $ee, $ed, $ec, $ee, $f1, $f1, $f1, $f2, $f5
1e37d     F9 FE 04 0A 
1e381     0F 15 1A 1E 
1e385     21 24 26 24 
1e389     1F 1C 1A 18 | 	byte	$f9, $fe, $04, $0a, $0f, $15, $1a, $1e, $21, $24, $26, $24, $1f, $1c, $1a, $18
1e38d     19 1B 1C 1B 
1e391     18 15 11 0F 
1e395     0E 0F 11 14 
1e399     18 21 2C 30 | 	byte	$19, $1b, $1c, $1b, $18, $15, $11, $0f, $0e, $0f, $11, $14, $18, $21, $2c, $30
1e39d     31 33 38 3C 
1e3a1     3B 38 32 2E 
1e3a5     2B 27 21 1C 
1e3a9     16 10 0B 06 | 	byte	$31, $33, $38, $3c, $3b, $38, $32, $2e, $2b, $27, $21, $1c, $16, $10, $0b, $06
1e3ad     02 FC F7 F3 
1e3b1     EC E4 DD D9 
1e3b5     D5 D1 CE D0 
1e3b9     D5 D9 DB DE | 	byte	$02, $fc, $f7, $f3, $ec, $e4, $dd, $d9, $d5, $d1, $ce, $d0, $d5, $d9, $db, $de
1e3bd     E4 EA EB E9 
1e3c1     EC F1 F4 F0 
1e3c5     EC EC EE F1 
1e3c9     F3 F3 F0 F0 | 	byte	$e4, $ea, $eb, $e9, $ec, $f1, $f4, $f0, $ec, $ec, $ee, $f1, $f3, $f3, $f0, $f0
1e3cd     EF F2 F5 F4 
1e3d1     EE E6 E0 DA 
1e3d5     D3 CF CF CF 
1e3d9     CE D2 DB E8 | 	byte	$ef, $f2, $f5, $f4, $ee, $e6, $e0, $da, $d3, $cf, $cf, $cf, $ce, $d2, $db, $e8
1e3dd     F5 FE 05 0E 
1e3e1     16 17 13 0E 
1e3e5     0D 0B 08 05 
1e3e9     03 05 03 00 | 	byte	$f5, $fe, $05, $0e, $16, $17, $13, $0e, $0d, $0b, $08, $05, $03, $05, $03, $00
1e3ed     FB F8 F7 F6 
1e3f1     F5 F1 EC EB 
1e3f5     EF F0 EC E8 
1e3f9     EA EB 7C F0 | 	byte	$fb, $f8, $f7, $f6, $f5, $f1, $ec, $eb, $ef, $f0, $ec, $e8, $ea, $eb, $7c, $f0
1e3fd     F8 FF 03 06 
1e401     08 0A 0E 12 
1e405     17 1B 1E 20 
1e409     1F 1C 1B 19 | 	byte	$f8, $ff, $03, $06, $08, $0a, $0e, $12, $17, $1b, $1e, $20, $1f, $1c, $1b, $19
1e40d     18 18 1D 21 
1e411     1D 18 14 12 
1e415     10 0F 12 18 
1e419     1B 1D 22 2A | 	byte	$18, $18, $1d, $21, $1d, $18, $14, $12, $10, $0f, $12, $18, $1b, $1d, $22, $2a
1e41d     2F 2E 31 37 
1e421     3F 41 06 37 
1e425     33 2E 29 23 
1e429     1D 18 11 0C | 	byte	$2f, $2e, $31, $37, $3f, $41, $06, $37, $33, $2e, $29, $23, $1d, $18, $11, $0c
1e42d     07 04 00 FB 
1e431     F5 EE E5 DD 
1e435     DA D6 D0 C8 
1e439     CB D5 DB DB | 	byte	$07, $04, $00, $fb, $f5, $ee, $e5, $dd, $da, $d6, $d0, $c8, $cb, $d5, $db, $db
1e43d     DC E3 EB EC 
1e441     E7 E4 E5 E8 
1e445     E9 E9 EB EF 
1e449     F4 F6 3C F1 | 	byte	$dc, $e3, $eb, $ec, $e7, $e4, $e5, $e8, $e9, $e9, $eb, $ef, $f4, $f6, $3c, $f1
1e44d     EC EC F1 F5 
1e451     F1 EA E2 DB 
1e455     D5 CE CC CC 
1e459     CF D3 D8 E1 | 	byte	$ec, $ec, $f1, $f5, $f1, $ea, $e2, $db, $d5, $ce, $cc, $cc, $cf, $d3, $d8, $e1
1e45d     EB F5 FE 05 
1e461     0E 16 1B 19 
1e465     17 15 13 10 
1e469     09 05 03 01 | 	byte	$eb, $f5, $fe, $05, $0e, $16, $1b, $19, $17, $15, $13, $10, $09, $05, $03, $01
1e46d     00 FD FB F6 
1e471     F3 F1 60 F3 
1e475     F3 F4 F1 EE 
1e479     EA E8 E9 EF | 	byte	$00, $fd, $fb, $f6, $f3, $f1, $60, $f3, $f3, $f4, $f1, $ee, $ea, $e8, $e9, $ef
1e47d     F8 FF 03 07 
1e481     09 0B 0D 0F 
1e485     10 13 18 1D 
1e489     1D 1A 18 18 | 	byte	$f8, $ff, $03, $07, $09, $0b, $0d, $0f, $10, $13, $18, $1d, $1d, $1a, $18, $18
1e48d     1A 1B 1B 1D 
1e491     21 1F 18 12 
1e495     11 13 15 18 
1e499     1B 1C 7E 22 | 	byte	$1a, $1b, $1b, $1d, $21, $1f, $18, $12, $11, $13, $15, $18, $1b, $1c, $7e, $22
1e49d     29 2D 2B 2D 
1e4a1     34 3D 41 3D 
1e4a5     36 32 30 2B 
1e4a9     25 1F 19 13 | 	byte	$29, $2d, $2b, $2d, $34, $3d, $41, $3d, $36, $32, $30, $2b, $25, $1f, $19, $13
1e4ad     0B 06 01 FF 
1e4b1     FA F5 EE E7 
1e4b5     E2 DD DA D4 
1e4b9     CE CE D4 D9 | 	byte	$0b, $06, $01, $ff, $fa, $f5, $ee, $e7, $e2, $dd, $da, $d4, $ce, $ce, $d4, $d9
1e4bd     D9 D8 DE E8 
1e4c1     EB E7 E1 DE 
1e4c5     DF E5 EA EE 
1e4c9     F0 F0 F1 F3 | 	byte	$d9, $d8, $de, $e8, $eb, $e7, $e1, $de, $df, $e5, $ea, $ee, $f0, $f0, $f1, $f3
1e4cd     F3 F0 F0 F2 
1e4d1     F1 ED E5 DD 
1e4d5     D4 CB C9 CC 
1e4d9     D0 D3 D6 DE | 	byte	$f3, $f0, $f0, $f2, $f1, $ed, $e5, $dd, $d4, $cb, $c9, $cc, $d0, $d3, $d6, $de
1e4dd     EA F3 F8 FD 
1e4e1     06 0F 16 19 
1e4e5     1A 1B 1C 1C 
1e4e9     17 11 0B 05 | 	byte	$ea, $f3, $f8, $fd, $06, $0f, $16, $19, $1a, $1b, $1c, $1c, $17, $11, $0b, $05
1e4ed     FF F9 F7 F7 
1e4f1     F5 F1 EC ED 
1e4f5     F0 F5 F6 F2 
1e4f9     EC E9 EC F3 | 	byte	$ff, $f9, $f7, $f7, $f5, $f1, $ec, $ed, $f0, $f5, $f6, $f2, $ec, $e9, $ec, $f3
1e4fd     F8 FA FE 02 
1e501     07 0B 0D 10 
1e505     12 12 14 17 
1e509     1B 1B 18 15 | 	byte	$f8, $fa, $fe, $02, $07, $0b, $0d, $10, $12, $12, $14, $17, $1b, $1b, $18, $15
1e50d     16 1B 1F 21 
1e511     21 22 22 1F 
1e515     1B 18 18 19 
1e519     19 1A 1C 1F | 	byte	$16, $1b, $1f, $21, $21, $22, $22, $1f, $1b, $18, $18, $19, $19, $1a, $1c, $1f
1e51d     23 29 2D 2E 
1e521     30 35 3A 3C 
1e525     39 34 30 2D 
1e529     2A 25 20 19 | 	byte	$23, $29, $2d, $2e, $30, $35, $3a, $3c, $39, $34, $30, $2d, $2a, $25, $20, $19
1e52d     13 0B 04 FF 
1e531     FB F6 F0 EC 
1e535     EA E6 E2 DE 
1e539     DA D4 D0 CF | 	byte	$13, $0b, $04, $ff, $fb, $f6, $f0, $ec, $ea, $e6, $e2, $de, $da, $d4, $d0, $cf
1e53d     D2 D3 D6 DB 
1e541     E1 E4 E4 DE 
1e545     DA DD E2 E7 
1e549     E8 EA EC F0 | 	byte	$d2, $d3, $d6, $db, $e1, $e4, $e4, $de, $da, $dd, $e2, $e7, $e8, $ea, $ec, $f0
1e54d     F3 F4 F3 F3 
1e551     F2 F1 EC E3 
1e555     D9 CF CC CE 
1e559     D2 D4 D4 D6 | 	byte	$f3, $f4, $f3, $f3, $f2, $f1, $ec, $e3, $d9, $cf, $cc, $ce, $d2, $d4, $d4, $d6
1e55d     DE EA F5 FC 
1e561     01 08 10 16 
1e565     18 19 1A 1C 
1e569     1D 1A 14 0B | 	byte	$de, $ea, $f5, $fc, $01, $08, $10, $16, $18, $19, $1a, $1c, $1d, $1a, $14, $0b
1e56d     02 FB F6 F4 
1e571     F3 F1 EB E8 
1e575     E9 EC ED ED 
1e579     EF EE EE F1 | 	byte	$02, $fb, $f6, $f4, $f3, $f1, $eb, $e8, $e9, $ec, $ed, $ed, $ef, $ee, $ee, $f1
1e57d     F8 FD FC FC 
1e581     FE 04 09 0C 
1e585     0D 0E 0F 13 
1e589     17 19 19 17 | 	byte	$f8, $fd, $fc, $fc, $fe, $04, $09, $0c, $0d, $0e, $0f, $13, $17, $19, $19, $17
1e58d     16 18 1D 22 
1e591     21 1F 20 23 
1e595     24 22 1F 1D 
1e599     1A 17 18 1C | 	byte	$16, $18, $1d, $22, $21, $1f, $20, $23, $24, $22, $1f, $1d, $1a, $17, $18, $1c
1e59d     20 21 23 2B 
1e5a1     33 36 36 36 
1e5a5     36 34 30 2E 
1e5a9     2B 27 22 1E | 	byte	$20, $21, $23, $2b, $33, $36, $36, $36, $36, $34, $30, $2e, $2b, $27, $22, $1e
1e5ad     1A 13 0B 03 
1e5b1     FF FA F5 F0 
1e5b5     ED EA E8 E6 
1e5b9     E2 DE DA D6 | 	byte	$1a, $13, $0b, $03, $ff, $fa, $f5, $f0, $ed, $ea, $e8, $e6, $e2, $de, $da, $d6
1e5bd     D2 D1 D3 D3 
1e5c1     D4 D8 DD DF 
1e5c5     DD DC DE E3 
1e5c9     E6 E5 E6 EB | 	byte	$d2, $d1, $d3, $d3, $d4, $d8, $dd, $df, $dd, $dc, $de, $e3, $e6, $e5, $e6, $eb
1e5cd     EF F3 F6 F7 
1e5d1     F4 F0 EB E7 
1e5d5     E2 DC D8 D7 
1e5d9     D7 D6 D4 D6 | 	byte	$ef, $f3, $f6, $f7, $f4, $f0, $eb, $e7, $e2, $dc, $d8, $d7, $d7, $d6, $d4, $d6
1e5dd     DC E2 E9 F4 
1e5e1     00 06 0A 0E 
1e5e5     12 17 1A 1C 
1e5e9     1D 1C 1B 14 | 	byte	$dc, $e2, $e9, $f4, $00, $06, $0a, $0e, $12, $17, $1a, $1c, $1d, $1c, $1b, $14
1e5ed     0C 04 FE F9 
1e5f1     F4 F1 ED E8 
1e5f5     E7 E6 E6 E5 
1e5f9     E7 EC F0 F2 | 	byte	$0c, $04, $fe, $f9, $f4, $f1, $ed, $e8, $e7, $e6, $e6, $e5, $e7, $ec, $f0, $f2
1e5fd     F5 F9 FC FF 
1e601     FF FF 01 06 
1e605     0A 0D 0F 12 
1e609     15 1A 1D 1E | 	byte	$f5, $f9, $fc, $ff, $ff, $ff, $01, $06, $0a, $0d, $0f, $12, $15, $1a, $1d, $1e
1e60d     1C 1B 1B 20 
1e611     24 25 23 22 
1e615     26 2A 29 25 
1e619     21 1E 1C 1C | 	byte	$1c, $1b, $1b, $20, $24, $25, $23, $22, $26, $2a, $29, $25, $21, $1e, $1c, $1c
1e61d     1C 1D 1F 24 
1e621     2B 33 38 38 
1e625     36 31 2E 2C 
1e629     2B 27 20 1B | 	byte	$1c, $1d, $1f, $24, $2b, $33, $38, $38, $36, $31, $2e, $2c, $2b, $27, $20, $1b
1e62d     18 16 11 09 
1e631     00 F9 F5 F3 
1e635     F3 EF E9 E5 
1e639     E4 E3 E0 DA | 	byte	$18, $16, $11, $09, $00, $f9, $f5, $f3, $f3, $ef, $e9, $e5, $e4, $e3, $e0, $da
1e63d     D4 D1 CE CE 
1e641     CD CE D1 D3 
1e645     D9 DC DC DA 
1e649     DA DE E3 E6 | 	byte	$d4, $d1, $ce, $ce, $cd, $ce, $d1, $d3, $d9, $dc, $dc, $da, $da, $de, $e3, $e6
1e64d     E6 E9 EF F6 
1e651     F7 F2 EA E7 
1e655     E7 E8 E8 E7 
1e659     E3 DE DA DB | 	byte	$e6, $e9, $ef, $f6, $f7, $f2, $ea, $e7, $e7, $e8, $e8, $e7, $e3, $de, $da, $db
1e65d     DF E3 E6 EC 
1e661     F6 00 0A 0F 
1e665     0F 10 15 1A 
1e669     1E 1B 16 11 | 	byte	$df, $e3, $e6, $ec, $f6, $00, $0a, $0f, $0f, $10, $15, $1a, $1e, $1b, $16, $11
1e66d     0F 0C 07 00 
1e671     F8 F2 EC E8 
1e675     E5 E2 E1 E3 
1e679     E5 E3 E4 EB | 	byte	$0f, $0c, $07, $00, $f8, $f2, $ec, $e8, $e5, $e2, $e1, $e3, $e5, $e3, $e4, $eb
1e67d     F3 F6 F7 FB 
1e681     FF 01 02 01 
1e685     02 05 0B 10 
1e689     14 18 1C 21 | 	byte	$f3, $f6, $f7, $fb, $ff, $01, $02, $01, $02, $05, $0b, $10, $14, $18, $1c, $21
1e68d     23 23 21 22 
1e691     26 29 2A 29 
1e695     29 29 2B 2C 
1e699     29 23 21 21 | 	byte	$23, $23, $21, $22, $26, $29, $2a, $29, $29, $29, $2b, $2c, $29, $23, $21, $21
1e69d     1E 1B 1C 20 
1e6a1     25 2B 32 37 
1e6a5     37 32 2E 2A 
1e6a9     27 23 20 1A | 	byte	$1e, $1b, $1c, $20, $25, $2b, $32, $37, $37, $32, $2e, $2a, $27, $23, $20, $1a
1e6ad     15 12 11 0E 
1e6b1     08 00 F8 F4 
1e6b5     F3 F1 ED E8 
1e6b9     E2 E0 E1 DE | 	byte	$15, $12, $11, $0e, $08, $00, $f8, $f4, $f3, $f1, $ed, $e8, $e2, $e0, $e1, $de
1e6bd     D8 D3 CF CB 
1e6c1     CA CB CA CA 
1e6c5     CC D2 D6 D7 
1e6c9     D5 D4 DA E0 | 	byte	$d8, $d3, $cf, $cb, $ca, $cb, $ca, $ca, $cc, $d2, $d6, $d7, $d5, $d4, $da, $e0
1e6cd     E3 E5 E8 ED 
1e6d1     F2 F3 F1 EC 
1e6d5     E9 EA ED F0 
1e6d9     EF EA E5 E5 | 	byte	$e3, $e5, $e8, $ed, $f2, $f3, $f1, $ec, $e9, $ea, $ed, $f0, $ef, $ea, $e5, $e5
1e6dd     E9 EC EF F3 
1e6e1     F6 F9 00 08 
1e6e5     0E 12 13 15 
1e6e9     18 19 17 13 | 	byte	$e9, $ec, $ef, $f3, $f6, $f9, $00, $08, $0e, $12, $13, $15, $18, $19, $17, $13
1e6ed     10 0F 0D 0B 
1e6f1     04 F9 ED E5 
1e6f5     E2 DE DD DD 
1e6f9     DD DE E1 E5 | 	byte	$10, $0f, $0d, $0b, $04, $f9, $ed, $e5, $e2, $de, $dd, $dd, $dd, $de, $e1, $e5
1e6fd     EB F2 F7 F9 
1e701     FA FF 02 01 
1e705     FE FE 03 0B 
1e709     14 1A 1D 21 | 	byte	$eb, $f2, $f7, $f9, $fa, $ff, $02, $01, $fe, $fe, $03, $0b, $14, $1a, $1d, $21
1e70d     26 2A 2B 2A 
1e711     29 2A 2B 2C 
1e715     2C 2C 2C 2D 
1e719     2E 2D 2B 28 | 	byte	$26, $2a, $2b, $2a, $29, $2a, $2b, $2c, $2c, $2c, $2c, $2d, $2e, $2d, $2b, $28
1e71d     25 23 20 20 
1e721     25 2A 2D 2F 
1e725     31 34 34 30 
1e729     2B 26 22 1F | 	byte	$25, $23, $20, $20, $25, $2a, $2d, $2f, $31, $34, $34, $30, $2b, $26, $22, $1f
1e72d     1A 14 0F 0E 
1e731     0A 05 01 FE 
1e735     F9 F3 EF EE 
1e739     EC E7 E0 DC | 	byte	$1a, $14, $0f, $0e, $0a, $05, $01, $fe, $f9, $f3, $ef, $ee, $ec, $e7, $e0, $dc
1e73d     DB D9 D3 CC 
1e741     C9 C9 C9 C9 
1e745     C8 C7 C9 CE 
1e749     D5 D8 DA D8 | 	byte	$db, $d9, $d3, $cc, $c9, $c9, $c9, $c9, $c8, $c7, $c9, $ce, $d5, $d8, $da, $d8
1e74d     DB E1 E4 E4 
1e751     E5 EA EF F3 
1e755     F4 F2 F1 F3 
1e759     F5 F4 F2 F3 | 	byte	$db, $e1, $e4, $e4, $e5, $ea, $ef, $f3, $f4, $f2, $f1, $f3, $f5, $f4, $f2, $f3
1e75d     F3 F1 F4 F8 
1e761     FC FC FE 01 
1e765     07 0F 12 13 
1e769     13 12 0F 0E | 	byte	$f3, $f1, $f4, $f8, $fc, $fc, $fe, $01, $07, $0f, $12, $13, $13, $12, $0f, $0e
1e76d     11 12 10 0B 
1e771     03 FD F4 E9 
1e775     E0 DB DB DA 
1e779     D3 D2 D5 DC | 	byte	$11, $12, $10, $0b, $03, $fd, $f4, $e9, $e0, $db, $db, $da, $d3, $d2, $d5, $dc
1e77d     E2 E8 EE F2 
1e781     F5 F9 FD 00 
1e785     00 00 01 05 
1e789     0C 13 19 20 | 	byte	$e2, $e8, $ee, $f2, $f5, $f9, $fd, $00, $00, $00, $01, $05, $0c, $13, $19, $20
1e78d     25 2A 2F 34 
1e791     37 35 31 2F 
1e795     2F 30 30 30 
1e799     30 2F 31 30 | 	byte	$25, $2a, $2f, $34, $37, $35, $31, $2f, $2f, $30, $30, $30, $30, $2f, $31, $30
1e79d     2C 27 26 28 
1e7a1     28 28 2A 2C 
1e7a5     2C 2E 2E 2F 
1e7a9     2E 2A 25 1F | 	byte	$2c, $27, $26, $28, $28, $28, $2a, $2c, $2c, $2e, $2e, $2f, $2e, $2a, $25, $1f
1e7ad     19 16 13 0C 
1e7b1     06 04 04 03 
1e7b5     01 FD F5 F0 
1e7b9     ED EB E8 E1 | 	byte	$19, $16, $13, $0c, $06, $04, $04, $03, $01, $fd, $f5, $f0, $ed, $eb, $e8, $e1
1e7bd     D9 D5 D6 D4 
1e7c1     D0 CC C7 C3 
1e7c5     C2 C3 C5 C7 
1e7c9     CA D0 D6 DB | 	byte	$d9, $d5, $d6, $d4, $d0, $cc, $c7, $c3, $c2, $c3, $c5, $c7, $ca, $d0, $d6, $db
1e7cd     DB DB DD E2 
1e7d1     E3 E2 E4 EA 
1e7d5     F2 F7 F9 F8 
1e7d9     F6 F6 F7 FB | 	byte	$db, $db, $dd, $e2, $e3, $e2, $e4, $ea, $f2, $f7, $f9, $f8, $f6, $f6, $f7, $fb
1e7dd     FC FB F9 FA 
1e7e1     FE 01 03 03 
1e7e5     04 07 0B 0F 
1e7e9     11 12 11 0F | 	byte	$fc, $fb, $f9, $fa, $fe, $01, $03, $03, $04, $07, $0b, $0f, $11, $12, $11, $0f
1e7ed     0F 10 11 0F 
1e7f1     09 00 F5 EE 
1e7f5     EB E6 DE D8 
1e7f9     D4 D0 CE D1 | 	byte	$0f, $10, $11, $0f, $09, $00, $f5, $ee, $eb, $e6, $de, $d8, $d4, $d0, $ce, $d1
1e7fd     DA E1 E8 EB 
1e801     EF F4 F8 FA 
1e805     FA FE 03 08 
1e809     08 0A 10 17 | 	byte	$da, $e1, $e8, $eb, $ef, $f4, $f8, $fa, $fa, $fe, $03, $08, $08, $0a, $10, $17
1e80d     1E 26 2E 37 
1e811     3C 3C 39 33 
1e815     30 30 2F 2F 
1e819     2E 2D 2E 2F | 	byte	$1e, $26, $2e, $37, $3c, $3c, $39, $33, $30, $30, $2f, $2f, $2e, $2d, $2e, $2f
1e81d     2E 2B 28 27 
1e821     2A 2C 2A 28 
1e825     28 28 29 29 
1e829     29 29 26 1F | 	byte	$2e, $2b, $28, $27, $2a, $2c, $2a, $28, $28, $28, $29, $29, $29, $29, $26, $1f
1e82d     19 15 12 0E 
1e831     09 04 00 00 
1e835     00 00 FC F7 
1e839     F1 EB E7 E2 | 	byte	$19, $15, $12, $0e, $09, $04, $00, $00, $00, $00, $fc, $f7, $f1, $eb, $e7, $e2
1e83d     DC D7 D4 D2 
1e841     D3 D3 D2 C9 
1e845     BF BC BF C6 
1e849     C8 C7 CA D1 | 	byte	$dc, $d7, $d4, $d2, $d3, $d3, $d2, $c9, $bf, $bc, $bf, $c6, $c8, $c7, $ca, $d1
1e84d     D8 D9 D9 DB 
1e851     DF E5 E7 E6 
1e855     E6 ED F5 F9 
1e859     FA F8 F9 FD | 	byte	$d8, $d9, $d9, $db, $df, $e5, $e7, $e6, $e6, $ed, $f5, $f9, $fa, $f8, $f9, $fd
1e85d     00 03 02 01 
1e861     03 05 06 07 
1e865     08 08 07 09 
1e869     0D 11 13 14 | 	byte	$00, $03, $02, $01, $03, $05, $06, $07, $08, $08, $07, $09, $0d, $11, $13, $14
1e86d     14 13 11 0D 
1e871     0A 04 FD F6 
1e875     F2 EE E8 DF 
1e879     D7 CF CD CF | 	byte	$14, $13, $11, $0d, $0a, $04, $fd, $f6, $f2, $ee, $e8, $df, $d7, $cf, $cd, $cf
1e87d     D3 D6 DD E5 
1e881     EB ED F1 F6 
1e885     FA FD 00 06 
1e889     0C 0F 0F 10 | 	byte	$d3, $d6, $dd, $e5, $eb, $ed, $f1, $f6, $fa, $fd, $00, $06, $0c, $0f, $0f, $10
1e88d     15 1E 29 32 
1e891     3A 3E 3D 39 
1e895     36 33 31 2F 
1e899     2E 2D 2C 2E | 	byte	$15, $1e, $29, $32, $3a, $3e, $3d, $39, $36, $33, $31, $2f, $2e, $2d, $2c, $2e
1e89d     2E 2C 28 28 
1e8a1     29 29 29 29 
1e8a5     27 24 22 22 
1e8a9     23 22 20 20 | 	byte	$2e, $2c, $28, $28, $29, $29, $29, $29, $27, $24, $22, $22, $23, $22, $20, $20
1e8ad     1C 17 13 12 
1e8b1     10 09 02 FE 
1e8b5     FE FD FB F7 
1e8b9     F3 F0 EB E5 | 	byte	$1c, $17, $13, $12, $10, $09, $02, $fe, $fe, $fd, $fb, $f7, $f3, $f0, $eb, $e5
1e8bd     DF DA D8 D8 
1e8c1     D3 D0 CF D0 
1e8c5     CD C4 BE BD 
1e8c9     C3 C9 CA C9 | 	byte	$df, $da, $d8, $d8, $d3, $d0, $cf, $d0, $cd, $c4, $be, $bd, $c3, $c9, $ca, $c9
1e8cd     CE D3 D7 DB 
1e8d1     E1 E6 EB EB 
1e8d5     EB E9 EA F0 
1e8d9     F7 FC FC FC | 	byte	$ce, $d3, $d7, $db, $e1, $e6, $eb, $eb, $eb, $e9, $ea, $f0, $f7, $fc, $fc, $fc
1e8dd     00 05 09 0C 
1e8e1     0E 0E 0C 08 
1e8e5     07 06 07 08 
1e8e9     0B 0E 12 15 | 	byte	$00, $05, $09, $0c, $0e, $0e, $0c, $08, $07, $06, $07, $08, $0b, $0e, $12, $15
1e8ed     17 16 16 14 
1e8f1     0E 05 FF FB 
1e8f5     F9 F6 EF E6 
1e8f9     DE D5 CF CC | 	byte	$17, $16, $16, $14, $0e, $05, $ff, $fb, $f9, $f6, $ef, $e6, $de, $d5, $cf, $cc
1e8fd     CF D4 D6 D8 
1e901     DE E6 EC F1 
1e905     F6 FB 00 05 
1e909     0B 0D 0F 29 | 	byte	$cf, $d4, $d6, $d8, $de, $e6, $ec, $f1, $f6, $fb, $00, $05, $0b, $0d, $0f, $29
1e90d     27 24 22 22 
1e911     23 22 20 20 
1e915     1C 17 13 12 
1e919     10 09 02 FE | 	byte	$27, $24, $22, $22, $23, $22, $20, $20, $1c, $17, $13, $12, $10, $09, $02, $fe
1e91d     FE FD FB F7 
1e921     F3 F0 EB E5 
1e925     DF DA D8 D8 
1e929     D3 D0 CF D0 | 	byte	$fe, $fd, $fb, $f7, $f3, $f0, $eb, $e5, $df, $da, $d8, $d8, $d3, $d0, $cf, $d0
1e92d     CD C4 BE BD 
1e931     C3 C9 CA C9 
1e935     CE D3 D7 DB 
1e939     E1 E6 EB EB | 	byte	$cd, $c4, $be, $bd, $c3, $c9, $ca, $c9, $ce, $d3, $d7, $db, $e1, $e6, $eb, $eb
1e93d     EB E9 EA F0 
1e941     F7 FC FC FC 
1e945     00 05 09 0C 
1e949     0E 0E 0C 08 | 	byte	$eb, $e9, $ea, $f0, $f7, $fc, $fc, $fc, $00, $05, $09, $0c, $0e, $0e, $0c, $08
1e94d     07 06 07 08 
1e951     0B 0E 12 15 
1e955     17 16 16 14 
1e959     0E 05 FF FB | 	byte	$07, $06, $07, $08, $0b, $0e, $12, $15, $17, $16, $16, $14, $0e, $05, $ff, $fb
1e95d     F9 F6 EF E6 
1e961     DE D5 CF CC 
1e965     CF D4 D6 D8 
1e969     DE E6 EC F1 | 	byte	$f9, $f6, $ef, $e6, $de, $d5, $cf, $cc, $cf, $d4, $d6, $d8, $de, $e6, $ec, $f1
1e96d     F6 FB 00 05 
1e971     0B 0D 0F    | 	byte	$f6, $fb, $00, $05, $0b, $0d, $0f
1e974                 | 	alignl
1e974                 | _hng033rm_spin2_dat_
1e974     00 00 00 00 
1e978     00 00 00 00 
1e97c     00 00 00 00 
1e980     00 00 00 00 
1e984     00 00 00    | vga_font       file "vgafont.def"
1e987     7E 81 A5 81 
1e98b     81 BD 99 81 
1e98f     81 7E 00 00 
1e993     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
1e997     7E FF DB FF 
1e99b     FF C3 E7 FF 
1e99f     FF 7E 00 00 
1e9a3     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
1e9a7     00 36 7F 7F 
1e9ab     7F 7F 3E 1C 
1e9af     08 00 00 00 
1e9b3     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
1e9b7     00 08 1C 3E 
1e9bb     7F 3E 1C 08 
1e9bf     00 00 00 00 
1e9c3     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
1e9c7     18 3C 3C E7 
1e9cb     E7 E7 18 18 
1e9cf     3C 00 00 00 
1e9d3     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1e9d7     18 3C 7E FF 
1e9db     FF 7E 18 18 
1e9df     3C 00 00 00 
1e9e3     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1e9e7     00 00 00 18 
1e9eb     3C 3C 18 00 
1e9ef     00 00 00 00 
1e9f3     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
1e9f7     FF FF FF E7 
1e9fb     C3 C3 E7 FF 
1e9ff     FF FF FF FF 
1ea03     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1ea07     00 00 3C 66 
1ea0b     42 42 66 3C 
1ea0f     00 00 00 00 
1ea13     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
1ea17     FF FF C3 99 
1ea1b     BD BD 99 C3 
1ea1f     FF FF FF FF 
1ea23     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1ea27     78 70 58 4C 
1ea2b     1E 33 33 33 
1ea2f     33 1E 00 00 
1ea33     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
1ea37     3C 66 66 66 
1ea3b     66 3C 18 7E 
1ea3f     18 18 00 00 
1ea43     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
1ea47     FC CC FC 0C 
1ea4b     0C 0C 0C 0E 
1ea4f     0F 07 00 00 
1ea53     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
1ea57     FE C6 FE C6 
1ea5b     C6 C6 C6 E6 
1ea5f     E7 67 03 00 
1ea63     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
1ea67     18 18 DB 3C 
1ea6b     E7 3C DB 18 
1ea6f     18 00 00 00 
1ea73     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
1ea77     03 07 0F 1F 
1ea7b     7F 1F 0F 07 
1ea7f     03 01 00 00 
1ea83     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
1ea87     60 70 78 7C 
1ea8b     7F 7C 78 70 
1ea8f     60 40 00 00 
1ea93     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
1ea97     18 3C 7E 18 
1ea9b     18 18 7E 3C 
1ea9f     18 00 00 00 
1eaa3     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
1eaa7     66 66 66 66 
1eaab     66 66 66    | 	byte	$66[7]
1eaae     00 66 66 00 
1eab2     00 00 00 00 
1eab6     00 FE DB DB 
1eaba     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
1eabe     D8 D8 D8 00 
1eac2     00 00 00 3E 
1eac6     63 06 1C 36 
1eaca     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
1eace     30 63 3E 00 
1ead2     00 00 00 00 
1ead6     00 00 00 00 
1eada     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1eade     7F 7F 7F 00 
1eae2     00 00 00 00 
1eae6     00 18 3C 7E 
1eaea     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
1eaee     3C 18 7E 00 
1eaf2     00 00 00 00 
1eaf6     00 18 3C 7E 
1eafa     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
1eafe     18 18 18 00 
1eb02     00 00 00 00 
1eb06     00 18 18 18 
1eb0a     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1eb0e     7E 3C 18 00 
1eb12     00 00 00 00 
1eb16     00 00 00 18 
1eb1a     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1eb1e     00 00 00 00 
1eb22     00 00 00 00 
1eb26     00 00 00    | 	byte	$00[11]
1eb29     0C 06 7F 06 
1eb2d     0C 00 00 00 
1eb31     00 00 00 00 
1eb35     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1eb39     00 03 03 03 
1eb3d     7F 00 00 00 
1eb41     00 00 00 00 
1eb45     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1eb49     14 36 7F 36 
1eb4d     14 00 00 00 
1eb51     00 00 00 00 
1eb55     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
1eb59     1C 1C 3E 3E 
1eb5d     7F 7F 00 00 
1eb61     00 00 00 00 
1eb65     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1eb69     7F 3E 3E 1C 
1eb6d     1C 08 00 00 
1eb71     00 00 00 00 
1eb75     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1eb79     00 00 00 00 
1eb7d     00 00 00 00 
1eb81     00 00 00 00 
1eb85     00 00       | 	byte	$00[14]
1eb87     18 3C 3C 3C 
1eb8b     18 18 18 00 
1eb8f     18 18 00 00 
1eb93     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
1eb97     66 24 00 00 
1eb9b     00 00 00 00 
1eb9f     00 00 00 00 
1eba3     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1eba7     00 36 36 7F 
1ebab     36 36 36 7F 
1ebaf     36 36 00 00 
1ebb3     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
1ebb7     3E 63 43 03 
1ebbb     3E 60 60 61 
1ebbf     63 3E 18 18 
1ebc3     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
1ebc7     00 00 43 63 
1ebcb     30 18 0C 06 
1ebcf     63 61 00 00 
1ebd3     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
1ebd7     1C 36 36 1C 
1ebdb     6E 3B 33 33 
1ebdf     33 6E 00 00 
1ebe3     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
1ebe7     0C 0C 0C 06 
1ebeb     00 00 00 00 
1ebef     00 00 00 00 
1ebf3     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ebf7     30 18 0C 0C 
1ebfb     0C 0C 0C 0C 
1ebff     18 30 00 00 
1ec03     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
1ec07     0C 18 30 30 
1ec0b     30 30 30 30 
1ec0f     18 0C 00 00 
1ec13     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
1ec17     00 00 00 66 
1ec1b     3C FF 3C 66 
1ec1f     00 00 00 00 
1ec23     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
1ec27     00 00 00 18 
1ec2b     18 7E 18 18 
1ec2f     00 00 00 00 
1ec33     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
1ec37     00 00 00 00 
1ec3b     00 00 00 00 | 	byte	$00[8]
1ec3f     18 18 18 0C 
1ec43     00 00 00 00 
1ec47     00 00 00 00 
1ec4b     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1ec4f     00 00 00 00 
1ec53     00 00 00 00 
1ec57     00 00 00 00 
1ec5b     00 00 00 00 | 	byte	$00[16]
1ec5f     18 18 00 00 
1ec63     00 00 00 00 
1ec67     00 00 40 60 
1ec6b     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
1ec6f     03 01 00 00 
1ec73     00 00 00 00 
1ec77     1C 36 63 63 
1ec7b     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
1ec7f     36 1C 00 00 
1ec83     00 00 00 00 
1ec87     18 1C 1E 18 
1ec8b     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
1ec8f     18 7E 00 00 
1ec93     00 00 00 00 
1ec97     3E 63 60 30 
1ec9b     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
1ec9f     63 7F 00 00 
1eca3     00 00 00 00 
1eca7     3E 63 60 60 
1ecab     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
1ecaf     63 3E 00 00 
1ecb3     00 00 00 00 
1ecb7     30 38 3C 36 
1ecbb     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
1ecbf     30 78 00 00 
1ecc3     00 00 00 00 
1ecc7     7F 03 03 03 
1eccb     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
1eccf     63 3E 00 00 
1ecd3     00 00 00 00 
1ecd7     1C 06 03 03 
1ecdb     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
1ecdf     63 3E 00 00 
1ece3     00 00 00 00 
1ece7     7F 63 60 60 
1eceb     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
1ecef     0C 0C 00 00 
1ecf3     00 00 00 00 
1ecf7     3E 63 63 63 
1ecfb     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
1ecff     63 3E 00 00 
1ed03     00 00 00 00 
1ed07     3E 63 63 63 
1ed0b     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1ed0f     30 1E 00 00 
1ed13     00 00 00 00 
1ed17     00 00 00 18 
1ed1b     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1ed1f     18 18 00 00 
1ed23     00 00 00 00 
1ed27     00 00 00 18 
1ed2b     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1ed2f     18 18 0C 00 
1ed33     00 00 00 00 
1ed37     00 60 30 18 
1ed3b     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1ed3f     30 60 00 00 
1ed43     00 00 00 00 
1ed47     00 00 00 7E 
1ed4b     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1ed4f     00 00 00 00 
1ed53     00 00 00 00 
1ed57     00          | 	byte	$00[9]
1ed58     06 0C 18 30 
1ed5c     60 30 18 0C 
1ed60     06 00 00 00 
1ed64     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
1ed68     63 63 30 18 
1ed6c     18 18 00 18 
1ed70     18 00 00 00 
1ed74     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
1ed78     3E 63 63 7B 
1ed7c     7B 7B 3B 03 
1ed80     3E 00 00 00 
1ed84     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
1ed88     1C 36 63 63 
1ed8c     7F 63 63 63 
1ed90     63 00 00 00 
1ed94     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
1ed98     66 66 66 3E 
1ed9c     66 66 66 66 
1eda0     3F 00 00 00 
1eda4     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
1eda8     66 43 03 03 
1edac     03 03 43 66 
1edb0     3C 00 00 00 
1edb4     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
1edb8     36 66 66 66 
1edbc     66 66 66 36 
1edc0     1F 00 00 00 
1edc4     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
1edc8     66 46 16 1E 
1edcc     16 06 46 66 
1edd0     7F 00 00 00 
1edd4     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
1edd8     66 46 16 1E 
1eddc     16 06 06 06 
1ede0     0F 00 00 00 
1ede4     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
1ede8     66 43 03 03 
1edec     7B 63 63 66 
1edf0     5C 00 00 00 
1edf4     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
1edf8     63 63 63 7F 
1edfc     63 63 63 63 
1ee00     63 00 00 00 
1ee04     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
1ee08     18 18 18 18 
1ee0c     18 18 18 18 | 	byte	$18[8]
1ee10     3C 00 00 00 
1ee14     00 00 00 78 
1ee18     30 30 30 30 
1ee1c     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1ee20     1E 00 00 00 
1ee24     00 00 00 67 
1ee28     66 66 36 1E 
1ee2c     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1ee30     67 00 00 00 
1ee34     00 00 00 0F 
1ee38     06 06 06 06 
1ee3c     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1ee40     7F 00 00 00 
1ee44     00 00 00 63 
1ee48     77 7F 7F 6B 
1ee4c     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
1ee50     63 00 00 00 
1ee54     00 00 00 63 
1ee58     67 6F 7F 7B 
1ee5c     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
1ee60     63 00 00 00 
1ee64     00 00 00 3E 
1ee68     63 63 63 63 
1ee6c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1ee70     3E 00 00 00 
1ee74     00 00 00 3F 
1ee78     66 66 66 3E 
1ee7c     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
1ee80     0F 00 00 00 
1ee84     00 00 00 3E 
1ee88     63 63 63 63 
1ee8c     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
1ee90     3E 30 70 00 
1ee94     00 00 00 3F 
1ee98     66 66 66 3E 
1ee9c     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
1eea0     67 00 00 00 
1eea4     00 00 00 3E 
1eea8     63 63 06 1C 
1eeac     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1eeb0     3E 00 00 00 
1eeb4     00 00 00 7E 
1eeb8     7E 5A 18 18 
1eebc     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1eec0     3C 00 00 00 
1eec4     00 00 00 63 
1eec8     63 63 63 63 
1eecc     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1eed0     3E 00 00 00 
1eed4     00 00 00 63 
1eed8     63 63 63 63 
1eedc     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
1eee0     08 00 00 00 
1eee4     00 00 00 63 
1eee8     63 63 63 6B 
1eeec     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
1eef0     36 00 00 00 
1eef4     00 00 00 63 
1eef8     63 36 3E 1C 
1eefc     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
1ef00     63 00 00 00 
1ef04     00 00 00 66 
1ef08     66 66 66 3C 
1ef0c     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1ef10     3C 00 00 00 
1ef14     00 00 00 7F 
1ef18     63 61 30 18 
1ef1c     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1ef20     7F 00 00 00 
1ef24     00 00 00 3C 
1ef28     0C 0C 0C 0C 
1ef2c     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1ef30     3C 00 00 00 
1ef34     00 00 00 00 
1ef38     01 03 07 0E 
1ef3c     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
1ef40     40 00 00 00 
1ef44     00 00 00 3C 
1ef48     30 30 30 30 
1ef4c     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
1ef50     3C 00 00 00 
1ef54     1C 36 00 00 
1ef58     00 00 00 00 
1ef5c     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef60     00 00 00 00 
1ef64     00 00 00 00 
1ef68     00 00 00 00 
1ef6c     00 00 00 00 
1ef70     00          | 	byte	$00[17]
1ef71     FF 00 00 0C 
1ef75     18 00 00 00 
1ef79     00 00 00 00 
1ef7d     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef81     00 00 00 00 
1ef85     00 00 00 00 
1ef89     00          | 	byte	$00[9]
1ef8a     1E 30 3E 33 
1ef8e     33 33 6E 00 
1ef92     00 00 00 00 
1ef96     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
1ef9a     1E 36 66 66 
1ef9e     66 66 3E 00 
1efa2     00 00 00 00 
1efa6     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1efaa     3E 63 03 03 
1efae     03 63 3E 00 
1efb2     00 00 00 00 
1efb6     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
1efba     3C 36 33 33 
1efbe     33 33 6E 00 
1efc2     00 00 00 00 
1efc6     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1efca     3E 63 7F 03 
1efce     03 63 3E 00 
1efd2     00 00 00 00 
1efd6     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
1efda     0C 1E 0C 0C 
1efde     0C 0C 1E 00 
1efe2     00 00 00 00 
1efe6     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1efea     6E 33 33 33 
1efee     33 33 3E 30 
1eff2     33 1E 00 00 
1eff6     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
1effa     36 6E 66 66 
1effe     66 66 67 00 
1f002     00 00 00 00 
1f006     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
1f00a     1C 18 18 18 
1f00e     18 18 3C 00 
1f012     00 00 00 00 
1f016     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
1f01a     70 60 60 60 
1f01e     60 60 60 66 
1f022     66 3C 00 00 
1f026     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
1f02a     66 36 1E 1E 
1f02e     36 66 67 00 
1f032     00 00 00 00 
1f036     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
1f03a     18 18 18 18 
1f03e     18 18       | 	byte	$18[6]
1f040     3C 00 00 00 
1f044     00 00 00 00 
1f048     00 00 37 7F 
1f04c     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
1f050     63 00 00 00 
1f054     00 00 00 00 
1f058     00 00 3B 66 
1f05c     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1f060     66 00 00 00 
1f064     00 00 00 00 
1f068     00 00 3E 63 
1f06c     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
1f070     3E 00 00 00 
1f074     00 00 00 00 
1f078     00 00 3B 66 
1f07c     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1f080     3E 06 06 0F 
1f084     00 00 00 00 
1f088     00 00 6E 33 
1f08c     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
1f090     3E 30 30 78 
1f094     00 00 00 00 
1f098     00 00 3B 6E 
1f09c     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
1f0a0     0F 00 00 00 
1f0a4     00 00 00 00 
1f0a8     00 00 3E 63 
1f0ac     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
1f0b0     3E 00 00 00 
1f0b4     00 00 00 08 
1f0b8     0C 0C 3F 0C 
1f0bc     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1f0c0     38 00 00 00 
1f0c4     00 00 00 00 
1f0c8     00 00 33 33 
1f0cc     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
1f0d0     6E 00 00 00 
1f0d4     00 00 00 00 
1f0d8     00 00 63 63 
1f0dc     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
1f0e0     1C 00 00 00 
1f0e4     00 00 00 00 
1f0e8     00 00 63 63 
1f0ec     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
1f0f0     36 00 00 00 
1f0f4     00 00 00 00 
1f0f8     00 00 63 36 
1f0fc     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
1f100     63 00 00 00 
1f104     00 00 00 00 
1f108     00 00 63 63 
1f10c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1f110     7E 60 30 1F 
1f114     00 00 00 00 
1f118     00 00 7F 33 
1f11c     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1f120     7F 00 00 00 
1f124     00 00 00 70 
1f128     18 18 18 0E 
1f12c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1f130     70 00 00 00 
1f134     00 00 00 18 
1f138     18 18 18 18 
1f13c     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f140     18 00 00 00 
1f144     00 00 00 0E 
1f148     18 18 18 70 
1f14c     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
1f150     0E 00 00 00 
1f154     6E 3B 00 00 
1f158     00 00 00 00 
1f15c     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f160     00 00 00 00 
1f164     00 00 00 00 
1f168     00 00       | 	byte	$00[10]
1f16a     08 1C 36 63 
1f16e     63 63 7F 00 
1f172     00 00 00 00 
1f176     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
1f17a     03 03 03 03 
1f17e     43 66 3C 18 
1f182     30 1E 00 00 
1f186     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
1f18a     33 33 33 33 
1f18e     33 33       | 	byte	$33[6]
1f190     6E 00 00 00 
1f194     00 00 60 30 
1f198     18 00 3E 63 
1f19c     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
1f1a0     3E 00 00 00 
1f1a4     00 00 08 1C 
1f1a8     36 00 1E 30 
1f1ac     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
1f1b0     6E 00 00 00 
1f1b4     00 00 00 00 
1f1b8     33 00 1E 30 
1f1bc     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
1f1c0     6E 00 00 00 
1f1c4     00 00 1C 36 
1f1c8     1C 00 33 33 
1f1cc     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
1f1d0     6E 00 00 00 
1f1d4     00 00 60 30 
1f1d8     18 00 3E 63 
1f1dc     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
1f1e0     3E 00 00 00 
1f1e4     00 00 00 00 
1f1e8     00 00 3E 63 
1f1ec     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
1f1f0     3E 18 30 1E 
1f1f4     00 00 00 1C 
1f1f8     58 78 38 18 
1f1fc     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
1f200     3C 00 00 00 
1f204     00 00 00 00 
1f208     63 00 3E 63 
1f20c     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1f210     3E 00 00 00 
1f214     66 33 00 3E 
1f218     63 63 63 63 
1f21c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1f220     3E 00 00 00 
1f224     00 00 CC 66 
1f228     33 00 3E 63 
1f22c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1f230     3E 00 00 00 
1f234     00 00 18 3C 
1f238     66 00 1C 18 
1f23c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
1f240     3C 00 00 00 
1f244     30 18 00 7F 
1f248     63 61 30 18 
1f24c     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1f250     7F 00 00 00 
1f254     00 63 00 08 
1f258     1C 36 63 63 
1f25c     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
1f260     63 00 00 00 
1f264     30 18 00 3C 
1f268     66 43 03 03 
1f26c     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
1f270     3C 00 00 00 
1f274     30 18 00 7F 
1f278     66 46 16 1E 
1f27c     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
1f280     7F 00 00 00 
1f284     0C 06 00 0F 
1f288     06 06 06 06 
1f28c     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1f290     7F 00 00 00 
1f294     30 18 00 1C 
1f298     18 18 18 18 
1f29c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
1f2a0     3C 00 00 00 
1f2a4     00 00 08 1C 
1f2a8     36 00 3E 63 
1f2ac     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
1f2b0     3E 00 00 00 
1f2b4     00 00 00 00 
1f2b8     63 00 3E 63 
1f2bc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
1f2c0     3E 00 00 00 
1f2c4     00 00 00 6F 
1f2c8     46 26 06 06 
1f2cc     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
1f2d0     7F 00 00 00 
1f2d4     00 00 00 6E 
1f2d8     4C 2C 0C 0C 
1f2dc     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
1f2e0     1E 00 00 00 
1f2e4     30 18 00 3E 
1f2e8     63 63 06 1C 
1f2ec     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1f2f0     3E 00 00 00 
1f2f4     00 00 60 30 
1f2f8     18 00 3E 63 
1f2fc     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
1f300     3E 00 00 00 
1f304     00 63 00 3E 
1f308     63 63 63 63 
1f30c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1f310     3E 00 00 00 
1f314     00 63 00 63 
1f318     63 63 63 63 
1f31c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1f320     3E 00 00 00 
1f324     6C 38 00 7E 
1f328     7E 5A 18 18 
1f32c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1f330     3C 00 00 00 
1f334     00 00 60 48 
1f338     2C 0C 3F 0C 
1f33c     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1f340     38 00 00 00 
1f344     00 00 00 0F 
1f348     26 36 1E 0E 
1f34c     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
1f350     7F 00 00 00 
1f354     00 00 00 00 
1f358     00 63 36 1C 
1f35c     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
1f360     00 00 00 00 
1f364     00 00       | 	byte	$00[6]
1f366     36 1C 08 00 
1f36a     3E 63 03 03 
1f36e     03 63 3E 00 
1f372     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
1f376     30 18 0C 00 
1f37a     1E 30 3E 33 
1f37e     33 33 6E 00 
1f382     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1f386     60 30 18 00 
1f38a     1C 18 18 18 
1f38e     18 18 3C 00 
1f392     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
1f396     60 30 18 00 
1f39a     3E 63 63 63 
1f39e     63 63 3E 00 
1f3a2     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
1f3a6     30 18 0C 00 
1f3aa     33 33 33 33 
1f3ae     33 33 6E 00 
1f3b2     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1f3b6     00 08 1C 36 
1f3ba     63 63 7F 63 
1f3be     63 63 63 18 
1f3c2     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
1f3c6     00 00 00 00 
1f3ca     1E 30 3E 33 
1f3ce     33 33 6E 18 
1f3d2     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
1f3d6     00 7F 63 61 
1f3da     30 18 0C 06 
1f3de     43 63 7F 00 
1f3e2     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
1f3e6     36 1C 08 00 
1f3ea     7F 33 18 0C 
1f3ee     06 63 7F 00 
1f3f2     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
1f3f6     00 7F 66 46 
1f3fa     16 1E 16 06 
1f3fe     46 66 7F 18 
1f402     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
1f406     00 00 00 00 
1f40a     3E 63 7F 03 
1f40e     03 63 3E 18 
1f412     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
1f416     00 3C 66 03 
1f41a     1F 03 0F 03 
1f41e     03 66 3C 00 
1f422     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
1f426     60 30 18 00 
1f42a     7F 33 18 0C 
1f42e     06 63 7F 00 
1f432     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
1f436     00 3C 66 43 
1f43a     03 03 03 03 
1f43e     43 66 3C 00 
1f442     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
1f446     00 00 00 00 
1f44a     3E 63 06 1C 
1f44e     30 63 3E 18 
1f452     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
1f456     00 00 00 00 
1f45a     00 00       | 	byte	$00[6]
1f45c     6C 36 1B 36 
1f460     6C 00 00 00 
1f464     00 00 00 00 
1f468     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f46c     1B 36 6C 36 
1f470     1B 00 00 00 
1f474     88 22 88 22 
1f478     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
1f47c     88 22 88 22 
1f480     88 22 88 22 
1f484     AA 55 AA 55 
1f488     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
1f48c     AA 55 AA 55 
1f490     AA 55 AA 55 
1f494     BB EE BB EE 
1f498     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
1f49c     BB EE BB EE 
1f4a0     BB EE BB EE 
1f4a4     18 18 18 18 
1f4a8     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
1f4ac     18 18 18 18 
1f4b0     18 18 18 18 
1f4b4     18 18 18 18 
1f4b8     18 18 18    | 	byte	$18[15]
1f4bb     1F 18 18 18 
1f4bf     18 18 18 18 
1f4c3     18 30 18 00 
1f4c7     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1f4cb     63 7F 63 63 
1f4cf     63 63 00 00 
1f4d3     00 1C 36 00 
1f4d7     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
1f4db     63 7F 63 63 
1f4df     63 63 00 00 
1f4e3     00 36 1C 00 
1f4e7     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
1f4eb     1E 16 06 46 
1f4ef     66 7F 00 00 
1f4f3     00 00 00 00 
1f4f7     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
1f4fb     1C 30 60 63 
1f4ff     63 3E 18 30 
1f503     1E 6C 6C 6C 
1f507     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
1f50b     6F 6C 6C 6C 
1f50f     6C 6C 6C 6C 
1f513     6C 6C 6C 6C 
1f517     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f51b     6C 6C 6C 6C 
1f51f     6C 6C 6C 6C 
1f523     6C          | 	byte	$6c[9]
1f524     00 00 00 00 
1f528     00          | 	byte	$00[5]
1f529     7F 60 6F 6C 
1f52d     6C 6C 6C 6C 
1f531     6C 6C 6C 6C 
1f535     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f539     6F 60 7F 00 
1f53d     00 00 00 00 
1f541     00 00 00 18 
1f545     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
1f549     61 30 18 0C 
1f54d     06 43 63 7F 
1f551     00 00 00 00 
1f555     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
1f559     00 7F 33 18 
1f55d     0C 06 63 7F 
1f561     00 00 00 00 
1f565     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
1f569     00 00 1F 18 
1f56d     18 18 18 18 
1f571     18 18 18 18 
1f575     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f579     18 18 F8 00 
1f57d     00 00 00 00 
1f581     00 00 00 18 
1f585     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1f589     18 18 FF 00 
1f58d     00 00 00 00 
1f591     00 00 00 00 
1f595     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f599     00 00 FF 18 
1f59d     18 18 18 18 
1f5a1     18 18 18 18 
1f5a5     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f5a9     18 18 F8 18 
1f5ad     18 18 18 18 
1f5b1     18 18 18 00 
1f5b5     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1f5b9     00 00 FF 00 
1f5bd     00 00 00 00 
1f5c1     00 00 00 18 
1f5c5     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1f5c9     18 18 FF 18 
1f5cd     18 18 18 18 
1f5d1     18 18 18 63 
1f5d5     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
1f5d9     36 63 63 7F 
1f5dd     63 63 63 63 
1f5e1     00 00 00 00 
1f5e5     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
1f5e9     00 1E 30 3E 
1f5ed     33 33 33 6E 
1f5f1     00 00 00 6C 
1f5f5     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1f5f9     EC 0C FC 00 
1f5fd     00 00 00 00 
1f601     00 00 00 00 
1f605     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f609     FC 0C EC 6C 
1f60d     6C 6C 6C 6C 
1f611     6C 6C 6C 6C 
1f615     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f619     EF 00 FF 00 
1f61d     00 00 00 00 
1f621     00 00 00 00 
1f625     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f629     FF 00 EF 6C 
1f62d     6C 6C 6C 6C 
1f631     6C 6C 6C 6C 
1f635     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f639     EC 0C EC 6C 
1f63d     6C 6C 6C 6C 
1f641     6C 6C 6C 00 
1f645     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1f649     FF 00 FF 00 
1f64d     00 00 00 00 
1f651     00 00 00 6C 
1f655     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1f659     EF 00 EF 6C 
1f65d     6C 6C 6C 6C 
1f661     6C 6C 6C 00 
1f665     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1f669     63 3E 63 63 
1f66d     63 63 3E 63 
1f671     00 00 00 00 
1f675     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
1f679     30 3C 36 33 
1f67d     33 33 33 6E 
1f681     00 00 00 00 
1f685     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
1f689     66 66 6F 66 
1f68d     66 66 36 1F 
1f691     00 00 00 36 
1f695     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
1f699     66 66 66 66 
1f69d     66 66       | 	byte	$66[6]
1f69f     36 1F 00 00 
1f6a3     00 00 63 00 
1f6a7     7F 66 46 16 
1f6ab     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
1f6af     66 7F 00 00 
1f6b3     00 6C 38 00 
1f6b7     38 30 30 3C 
1f6bb     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
1f6bf     33 6E 00 00 
1f6c3     00 36 1C 00 
1f6c7     63 67 6F 7F 
1f6cb     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
1f6cf     63 63 00 00 
1f6d3     00 30 18 00 
1f6d7     3C 18 18 18 
1f6db     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1f6df     18 3C 00 00 
1f6e3     00 3C 66 00 
1f6e7     3C 18 18 18 
1f6eb     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1f6ef     18 3C 00 00 
1f6f3     00 00 00 36 
1f6f7     1C 08 00 3E 
1f6fb     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
1f6ff     63 3E 00 00 
1f703     00 18 18 18 
1f707     18 18 18 18 
1f70b     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
1f70f     00 00 00 00 
1f713     00 00 00 00 
1f717     00 00 00 00 | 	byte	$00[12]
1f71b     F8 18 18 18 
1f71f     18 18 18 18 
1f723     18 FF FF FF 
1f727     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1f72b     FF FF FF FF 
1f72f     FF FF FF FF 
1f733     FF          | 	byte	$ff[9]
1f734     00 00 00 00 
1f738     00 00 00    | 	byte	$00[7]
1f73b     FF FF FF FF 
1f73f     FF FF FF FF 
1f743     FF          | 	byte	$ff[9]
1f744     00 00 00 7E 
1f748     7E 5A 18 18 
1f74c     18 18 18 18 
1f750     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
1f754     1C 36 1C 63 
1f758     63 63 63 63 
1f75c     63 63 63 63 
1f760     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1f764     FF FF FF FF 
1f768     FF FF FF    | 	byte	$ff[7]
1f76b     00 00 00 00 
1f76f     00 00 00 00 
1f773     00          | 	byte	$00[9]
1f774     30 18 00 3E 
1f778     63 63 63 63 
1f77c     63 63 63 63 
1f780     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1f784     00 00 00 1E 
1f788     33 33 33 1B 
1f78c     33 63 63 63 
1f790     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
1f794     1C 36 00 3E 
1f798     63 63 63 63 
1f79c     63 63 63 63 
1f7a0     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1f7a4     30 18 00 63 
1f7a8     67 6F 7F 7B 
1f7ac     73 63 63 63 
1f7b0     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
1f7b4     00 00 60 30 
1f7b8     18 00 3B 66 
1f7bc     66 66 66 66 
1f7c0     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1f7c4     00 00 36 1C 
1f7c8     08 00 3B 66 
1f7cc     66 66 66 66 
1f7d0     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1f7d4     36 1C 00 3E 
1f7d8     63 63 06 1C 
1f7dc     30 60 63 63 
1f7e0     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
1f7e4     00 00 36 1C 
1f7e8     08 00 3E 63 
1f7ec     06 1C 30 63 
1f7f0     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
1f7f4     30 18 00 3F 
1f7f8     66 66 66 3E 
1f7fc     36 66 66 66 
1f800     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
1f804     30 18 00 63 
1f808     63 63 63 63 
1f80c     63 63 63 63 
1f810     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1f814     00 00 60 30 
1f818     18 00 3B 6E 
1f81c     66 06 06 06 
1f820     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
1f824     66 33 00 63 
1f828     63 63 63 63 
1f82c     63 63 63 63 
1f830     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1f834     00 00 60 30 
1f838     18 00 63 63 
1f83c     63 63 63 63 
1f840     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
1f844     30 18 00 66 
1f848     66 66 66 3C 
1f84c     18 18 18 18 
1f850     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
1f854     00 00 00 08 
1f858     0C 0C 3F 0C 
1f85c     0C 0C 0C 6C 
1f860     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
1f864     30 18 00 00 
1f868     00 00 00 00 
1f86c     00 00 00 00 
1f870     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f874     00 00 00 00 
1f878     00 00 00 00 | 	byte	$00[8]
1f87c     7F 00 00 00 
1f880     00 00 00 00 
1f884     66 33 00 00 
1f888     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
1f88c     00 00 00 00 
1f890     00 00 00 00 
1f894     00 00 00 00 
1f898     00 00 00 00 
1f89c     00 00 00 00 
1f8a0     00          | 	byte	$00[21]
1f8a1     0C 06 3C 36 
1f8a5     1C 00 00 00 
1f8a9     00 00 00 00 
1f8ad     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f8b1     00 00 00 63 
1f8b5     3E 00 00 00 
1f8b9     00 00 00 00 
1f8bd     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f8c1     00 00 00 00 
1f8c5     3E 63 06 1C 
1f8c9     36 63 63 36 
1f8cd     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
1f8d1     00 00 00 00 
1f8d5     00 00 00 00 | 	byte	$00[8]
1f8d9     18 00 7E 00 
1f8dd     18 00 00 00 
1f8e1     00 00 00 00 
1f8e5     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f8e9     00 00 00 00 
1f8ed     00 00 00 00 | 	byte	$00[8]
1f8f1     18 30 1E 00 
1f8f5     00 00 1C 36 
1f8f9     36 1C 00 00 
1f8fd     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
1f901     00 00 00 00 
1f905     63 00 00 00 
1f909     00 00 00 00 
1f90d     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f911     00 00 00 18 
1f915     18 00 00 00 
1f919     00 00 00 00 
1f91d     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f921     00 00 00 00 
1f925     00          | 	byte	$00[5]
1f926     CC 66 33 00 
1f92a     33 33 33 33 
1f92e     33 33 6E 00 
1f932     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
1f936     00 3F 66 66 
1f93a     66 3E 36 66 
1f93e     66 66 6F 00 
1f942     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
1f946     36 1C 08 00 
1f94a     3B 6E 66 06 
1f94e     06 06 0F 00 
1f952     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
1f956     00 00 00 7E 
1f95a     7E 7E 7E 7E 
1f95e     7E 7E 00 00 
1f962     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
1f966     00 00 00 00 
1f96a     00 00 00 00 
1f96e     00 00 00 00 
1f972     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f974     00 00 00 00 
      ...             
1f9a4     00 00 00 00 
1f9a8     00 00 00    | st_font        file "st4font.def"
1f9ab     FF FF 00 00 
1f9af     00 00 00 00 
1f9b3     00 18 18 18 
1f9b7     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1f9bb     18 18 18 18 
1f9bf     18 18 18 18 
1f9c3     18          | 	byte	$18[9]
1f9c4     00 00 00 00 
1f9c8     00 00 00    | 	byte	$00[7]
1f9cb     FF FF 18 18 
1f9cf     18 18 18 18 
1f9d3     18 18 18 18 
1f9d7     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f9db     FF FF 00 00 
1f9df     00 00 00 00 
1f9e3     00 18 18 18 
1f9e7     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1f9eb     1F 1F 18 18 
1f9ef     18 18 18 18 
1f9f3     18 18 18 18 
1f9f7     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f9fb     F8 F8 18 18 
1f9ff     18 18 18 18 
1fa03     18 00 00 00 
1fa07     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1fa0b     1F 1F 18 18 
1fa0f     18 18 18 18 
1fa13     18 00 00 00 
1fa17     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1fa1b     F8 F8 18 18 
1fa1f     18 18 18 18 
1fa23     18 18 18 18 
1fa27     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1fa2b     1F 1F 00 00 
1fa2f     00 00 00 00 
1fa33     00 18 18 18 
1fa37     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1fa3b     F8 F8 00 00 
1fa3f     00 00 00 00 
1fa43     00 18 18 18 
1fa47     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1fa4b     FF FF 18 18 
1fa4f     18 18 18 18 
1fa53     18 00 00 18 
1fa57     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
1fa5b     66 7E 7E 66 
1fa5f     66 66 66 30 
1fa63     18 00 00 7E 
1fa67     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
1fa6b     3E 06 06 06 
1fa6f     06 7E 7E 18 
1fa73     0C 30 18 3C 
1fa77     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
1fa7b     06 06 06 66 
1fa7f     66 7E 3C 00 
1fa83     00 30 18 66 
1fa87     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
1fa8b     7E 7E 76 76 
1fa8f     66 66 66 00 
1fa93     00 30 18 7C 
1fa97     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
1fa9b     1C 38 70 60 
1fa9f     60 7E 3E 00 
1faa3     00 30 18 7E 
1faa7     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
1faab     18 0C 0C 06 
1faaf     06 7E 7E 00 
1fab3     00 18 18 00 
1fab7     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1fabb     18 18 0C 0C 
1fabf     06 7E 7E 00 
1fac3     00 30 18 3C 
1fac7     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1facb     66 66 66 66 
1facf     66          | 	byte	$66[5]
1fad0     7E 3C 00 00 
1fad4     00 00 06 06 
1fad8     06 06 16 1E 
1fadc     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1fae0     7E 7E 00 00 
1fae4     00 00 00 00 
1fae8     00 3C 7C 60 
1faec     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1faf0     7E 7C 30 18 
1faf4     00 00 00 00 
1faf8     00 3C 7E 66 
1fafc     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1fb00     7E 7C 18 0C 
1fb04     00 00 30 18 
1fb08     00 3C 3E 06 
1fb0c     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1fb10     7E 7C 00 00 
1fb14     00 00 30 18 
1fb18     00 3E 7E 66 
1fb1c     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1fb20     66 66 00 00 
1fb24     00 00 30 18 
1fb28     00 7C 7E 06 
1fb2c     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1fb30     7E 3E 00 00 
1fb34     00 00 30 18 
1fb38     00 7E 7E 30 
1fb3c     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1fb40     7E 7E 00 00 
1fb44     00 00 18 18 
1fb48     00 7E 7E 30 
1fb4c     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1fb50     7E 7E 00 00 
1fb54     00 00 30 18 
1fb58     00 3C 7E 66 
1fb5c     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1fb60     7E 3C 00 00 
1fb64     00 00 1C 1C 
1fb68     18 18 38 3C 
1fb6c     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1fb70     3C 3C 00 00 
1fb74     00 00 00 00 
1fb78     00 00 00 00 
1fb7c     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fb80     00 00 00 00 
1fb84     00 00       | 	byte	$00[6]
1fb86     18 18 18 18 
1fb8a     18 18 18 18 | 	byte	$18[8]
1fb8e     00 00 18 18 
1fb92     00 00 00 00 
1fb96     66 66 66 66 
1fb9a     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1fb9e     00 00 00 00 
1fba2     00 00 00 00 
1fba6     00          | 	byte	$00[9]
1fba7     66 66 FF FF 
1fbab     66 66 FF FF 
1fbaf     66 66 00 00 
1fbb3     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1fbb7     7C 7E 06 06 
1fbbb     3E 7C 60 60 
1fbbf     7E 3E 18 18 
1fbc3     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1fbc7     66 30 30 18 
1fbcb     18 0C 0C 66 
1fbcf     66 00 00 00 
1fbd3     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1fbd7     66 66 3C 1C 
1fbdb     1C FC FE 66 
1fbdf     66 FE FC 00 
1fbe3     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1fbe7     18 18 18 18 
1fbeb     00 00 00 00 
1fbef     00 00 00 00 
1fbf3     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1fbf7     18 1C 0C 0C 
1fbfb     0C 0C 0C 0C 
1fbff     1C 18 30 00 
1fc03     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1fc07     18 38 30 30 
1fc0b     30 30 30 30 
1fc0f     38 18 0C 00 
1fc13     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1fc17     66 66 3C 3C 
1fc1b     FF FF 3C 3C 
1fc1f     66 66 00 00 
1fc23     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1fc27     00 18 18 18 
1fc2b     7E 7E 18 18 
1fc2f     18 00 00 00 
1fc33     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1fc37     00 00 00 00 
1fc3b     00 00       | 	byte	$00[6]
1fc3d     18 18 18 18 
1fc41     18          | 	byte	$18[5]
1fc42     0C 04 00 00 
1fc46     00 00 00 00 
1fc4a     7E 7E 00 00 
1fc4e     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
1fc52     00 00 00 00 
1fc56     00 00 00 00 
1fc5a     00 00 00 00 
1fc5e     00          | 	byte	$00[13]
1fc5f     18 18 18 00 
1fc63     00 00 00 60 
1fc67     60 60 30 30 
1fc6b     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
1fc6f     06 06 06 00 
1fc73     00 00 00 3C 
1fc77     7E 66 66 66 
1fc7b     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
1fc7f     66 7E 3C 00 
1fc83     00 00 00 18 
1fc87     18 1C 1C 18 
1fc8b     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
1fc8f     18 7E 7E 00 
1fc93     00 00 00 3C 
1fc97     7E 66 66 30 
1fc9b     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1fc9f     0C 7E 7E 00 
1fca3     00 00 00 7E 
1fca7     7E 30 30 18 
1fcab     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1fcaf     66 7E 3C 00 
1fcb3     00 00 00 30 
1fcb7     30 38 38 3C 
1fcbb     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1fcbf     7E 30 30 00 
1fcc3     00 00 00 7E 
1fcc7     7E 06 06 3E 
1fccb     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1fccf     66 7E 3C 00 
1fcd3     00 00 00 38 
1fcd7     3C 0E 06 06 
1fcdb     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
1fcdf     66 7E 3C 00 
1fce3     00 00 00 7E 
1fce7     7E 60 60 30 
1fceb     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
1fcef     0C 0C 0C 00 
1fcf3     00 00 00 3C 
1fcf7     7E 66 66 3C 
1fcfb     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
1fcff     66 7E 3C 00 
1fd03     00 00 00 3C 
1fd07     7E 66 66 7E 
1fd0b     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
1fd0f     70 3C 1C 00 
1fd13     00 00 00 00 
1fd17     00 00 18 18 
1fd1b     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
1fd1f     18 18 18 00 
1fd23     00 00 00 00 
1fd27     00 00 18 18 
1fd2b     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
1fd2f     18 18 18 0C 
1fd33     04 00 00 00 
1fd37     70 38 1C 0E 
1fd3b     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
1fd3f     70 00 00 00 
1fd43     00 00 00 00 
1fd47     00 00 7E 7E 
1fd4b     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
1fd4f     00 00 00 00 
1fd53     00 00 00 00 | 	byte	$00[8]
1fd57     0E 1C 38 70 
1fd5b     E0 70 38 1C 
1fd5f     0E 00 00 00 
1fd63     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
1fd67     7E 66 66 30 
1fd6b     30 18 18 18 
1fd6f     00 18 18 00 
1fd73     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
1fd77     7E 66 66 66 
1fd7b     66 36 06 66 
1fd7f     66 7E 3C 00 
1fd83     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
1fd87     3C 7E 66 66 
1fd8b     66 7E 7E 66 
1fd8f     66 66 66 00 
1fd93     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1fd97     7E 66 66 7E 
1fd9b     3E 66 66 66 
1fd9f     66 7E 3E 00 
1fda3     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1fda7     7E 66 66 06 
1fdab     06 06 06 66 
1fdaf     66 7E 3C 00 
1fdb3     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1fdb7     7E 66 66 66 
1fdbb     66 66 66 66 
1fdbf     66 7E 3E 00 
1fdc3     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1fdc7     7E 06 06 3E 
1fdcb     3E 06 06 06 
1fdcf     06 7E 7E 00 
1fdd3     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1fdd7     7E 06 06 3E 
1fddb     3E 06 06 06 
1fddf     06 06 06 00 
1fde3     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1fde7     7E 06 06 76 
1fdeb     76 66 66 66 
1fdef     66 7E 3C 00 
1fdf3     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1fdf7     66 66 66 7E 
1fdfb     7E 66 66 66 
1fdff     66 66 66 00 
1fe03     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1fe07     7E 18 18 18 
1fe0b     18 18 18 18 
1fe0f     18 7E 7E 00 
1fe13     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1fe17     60 60 60 60 
1fe1b     60 60 60    | 	byte	$60[7]
1fe1e     66 66 7E 3C 
1fe22     00 00 00 00 
1fe26     66 66 36 36 
1fe2a     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
1fe2e     66 66 C6 C6 
1fe32     00 00 00 00 
1fe36     06 06 06 06 
1fe3a     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
1fe3e     06 06 7E 7E 
1fe42     00 00 00 00 
1fe46     C6 C6 EE EE 
1fe4a     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
1fe4e     C6 C6 C6 C6 
1fe52     00 00 00 00 
1fe56     66 66 66 6E 
1fe5a     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
1fe5e     76 66 66 66 
1fe62     00 00 00 00 
1fe66     3C 7E 66 66 
1fe6a     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1fe6e     66 66 7E 3C 
1fe72     00 00 00 00 
1fe76     3E 7E 66 66 
1fe7a     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
1fe7e     06 06 06 06 
1fe82     00 00 00 00 
1fe86     3C 7E 66 66 
1fe8a     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1fe8e     66 56 3E 6C 
1fe92     00 00 00 00 
1fe96     3E 7E 66 66 
1fe9a     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1fe9e     66 66 C6 C6 
1fea2     00 00 00 00 
1fea6     7C 7E 06 06 
1feaa     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1feae     60 60 7E 3E 
1feb2     00 00 00 00 
1feb6     7E 7E 18 18 
1feba     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1febe     18 18 18 18 
1fec2     00 00 00 00 
1fec6     66 66 66 66 
1feca     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1fece     66 66 7E 3C 
1fed2     00 00 00 00 
1fed6     66 66 66 66 
1feda     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1fede     3C 3C 18 18 
1fee2     00 00 00 00 
1fee6     C6 C6 C6 C6 
1feea     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
1feee     FE EE C6 82 
1fef2     00 00 00 00 
1fef6     66 66 66 3C 
1fefa     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
1fefe     3C 66 66 66 
1ff02     00 00 00 00 
1ff06     66 66 66 66 
1ff0a     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
1ff0e     18 18 18 18 
1ff12     00 00 00 00 
1ff16     7E 7E 30 30 
1ff1a     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
1ff1e     06 06 7E 7E 
1ff22     00 00 00 00 
1ff26     3C 3C 0C 0C 
1ff2a     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
1ff2e     0C 0C 3C 3C 
1ff32     00 00 00 00 
1ff36     06 06 0C 0C 
1ff3a     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
1ff3e     60 60 C0 C0 
1ff42     00 00 00 00 
1ff46     3C 3C 30 30 
1ff4a     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
1ff4e     30 30 3C 3C 
1ff52     00 00 00 00 
1ff56     18 18 3C 3C 
1ff5a     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
1ff5e     00 00 00 00 
1ff62     00 00 00 00 
1ff66     00 00 00 00 
1ff6a     00 00 00 00 
1ff6e     00 00       | 	byte	$00[18]
1ff70     FE FE 00 00 
1ff74     00 00 0C 0C 
1ff78     18 18 00 00 
1ff7c     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
1ff80     00 00 00 00 
1ff84     00 00 00 00 
1ff88     00          | 	byte	$00[9]
1ff89     3C 7C 60 7C 
1ff8d     7E 66 66 7E 
1ff91     7C 00 00 00 
1ff95     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
1ff99     3E 7E 66 66 
1ff9d     66 66 66 7E 
1ffa1     3E 00 00 00 
1ffa5     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
1ffa9     3C 3E 06 06 
1ffad     06 06 06 7E 
1ffb1     7C 00 00 00 
1ffb5     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
1ffb9     7C 7E 66 66 
1ffbd     66 66 66 7E 
1ffc1     7C 00 00 00 
1ffc5     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
1ffc9     3C 7E 66 66 
1ffcd     7E 06 06 7E 
1ffd1     7C 00 00 00 
1ffd5     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
1ffd9     18 7E 7E 18 
1ffdd     18 18 18 18 
1ffe1     18 00 00 00 
1ffe5     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1ffe9     7C 7E 66 66 
1ffed     66 66 7E 7C 
1fff1     60 7E 3E 00 
1fff5     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
1fff9     3E 7E 66 66 
1fffd     66 66 66 66 
20001     66 00 00 00 
20005     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
20009     1C 1C 18 18 
2000d     18 18 18 3C 
20011     3C 00 00 00 
20015     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
20019     30 30 30 30 
2001d     30 30 30 30 
20021     30          | 	byte	$30[9]
20022     3E 1E 00 00 
20026     06 06 06 36 
2002a     36 1E 1E 1E 
2002e     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
20032     00 00 00 00 
20036     1C 1C 18 18 
2003a     18 18 18 18 
2003e     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
20042     00 00 00 00 
20046     00 00 00    | 	byte	$00[7]
20049     6C FE FE D6 
2004d     D6 C6 C6 C6 
20051     C6 00 00 00 
20055     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
20059     3E 7E 66 66 
2005d     66 66 66 66 
20061     66 00 00 00 
20065     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
20069     3C 7E 66 66 
2006d     66 66 66 7E 
20071     3C 00 00 00 
20075     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
20079     3E 7E 66 66 
2007d     66 66 66 7E 
20081     3E 06 06 00 
20085     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
20089     7C 7E 66 66 
2008d     66 66 66 7E 
20091     7C 60 60 00 
20095     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
20099     3E 7E 66 06 
2009d     06 06 06 06 
200a1     06 00 00 00 
200a5     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
200a9     7C 7E 06 0E 
200ad     3C 70 60 7E 
200b1     3E 00 00 00 
200b5     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
200b9     7E 7E 18 18 
200bd     18 18 18 78 
200c1     70 00 00 00 
200c5     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
200c9     66 66 66 66 
200cd     66 66 66    | 	byte	$66[7]
200d0     7E 7C 00 00 
200d4     00 00 00 00 
200d8     00 66 66 66 
200dc     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
200e0     18 18 00 00 
200e4     00 00 00 00 
200e8     00 C6 C6 D6 
200ec     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
200f0     C6 82 00 00 
200f4     00 00 00 00 
200f8     00 66 66 3C 
200fc     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
20100     66 66 00 00 
20104     00 00 00 00 
20108     00 66 66 66 
2010c     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
20110     7C 60 7E 3E 
20114     00 00 00 00 
20118     00 7E 7E 30 
2011c     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
20120     7E 7E 00 00 
20124     00 00 30 18 
20128     18 18 18 0C 
2012c     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
20130     18 30 00 00 
20134     00 00 18 18 
20138     18 18 18 18 
2013c     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
20140     18 18 00 00 
20144     00 00 0C 18 
20148     18 18 18 30 
2014c     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
20150     18 0C 00 00 
20154     00 00 6C 7E 
20158     36 00 00 00 
2015c     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
20160     00 00 00 00 
20164     00 00 00 00 
20168     00          | 	byte	$00[9]
20169     18 18 18 18 
2016d     18 18 00 00 
20171     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
20174     00 6C FE FE 
20178     7C 38 10 00 
2017c     18 18 18 F8 
20180     F8 18 18 18 | a8_font        file "atari8.fnt"
20184     C0 C0 C0 C0 
20188     C0 C0 C0 C0 | 	byte	$c0[8]
2018c     18 18 18 1F 
20190     1F 00 00 00 
20194     18 18 18 1F 
20198     1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2019c     00 00 00 1F 
201a0     1F 18 18 18 
201a4     C0 E0 70 38 
201a8     1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
201ac     03 07 0E 1C 
201b0     38 70 E0 C0 
201b4     80 C0 E0 F0 
201b8     F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
201bc     00 00 00 00 
201c0     F0 F0 F0 F0 
201c4     01 03 07 0F 
201c8     1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
201cc     F0 F0 F0 F0 
201d0     00 00 00 00 
201d4     0F 0F 0F 0F 
201d8     00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
201dc     FF FF 00 00 
201e0     00 00 00 00 
201e4     00 00 00 00 
201e8     00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
201ec     00 00 00 00 
201f0     0F 0F 0F 0F 
201f4     00 38 38 EE 
201f8     EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
201fc     00 00 00 F8 
20200     F8 18 18 18 
20204     00 00 00 FF 
20208     FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2020c     18 18 18 FF 
20210     FF 18 18 18 
20214     00 00 3C 7E 
20218     7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2021c     00 00 00 00 
20220     FF FF FF FF 
20224     03 03 03 03 
20228     03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2022c     00 00 00 FF 
20230     FF 18 18 18 
20234     18 18 18 FF 
20238     FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2023c     0F 0F 0F 0F 
20240     0F 0F 0F 0F | 	byte	$0f[8]
20244     18 18 18 F8 
20248     F8 00 00 00 
2024c     1E 06 1E 06 
20250     7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
20254     00 18 3C 7E 
20258     18 18 18 00 
2025c     00 18 18 18 
20260     7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
20264     00 18 0C 7E 
20268     0C 18 00 00 
2026c     00 18 30 7E 
20270     30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
20274     00 00 00 00 
20278     00 00 00 00 
2027c     00          | 	byte	$00[9]
2027d     18 18 18 18 
20281     00 18 00 00 
20285     66 66 66 00 
20289     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2028d     66 FF 66 66 
20291     FF 66 00 18 
20295     7C 06 3C 60 
20299     3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2029d     66 36 18 0C 
202a1     66 62 00 38 
202a5     6C 38 1C F6 
202a9     66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
202ad     18 18 18 00 
202b1     00 00 00 00 
202b5     70 38 18 18 
202b9     38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
202bd     0E 1C 18 18 
202c1     1C 0E 00 00 
202c5     66 3C FF 3C 
202c9     66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
202cd     18 18 7E 18 
202d1     18 00 00 00 
202d5     00 00 00 00 
202d9     18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
202dd     00 00 7E 00 
202e1     00 00 00 00 
202e5     00 00 00 00 
202e9     18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
202ed     60 30 18 0C 
202f1     06 02 00 00 
202f5     3C 66 76 6E 
202f9     66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
202fd     18 1C 18 18 
20301     18 7E 00 00 
20305     3C 66 30 18 
20309     0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2030d     7E 30 18 30 
20311     66 3C 00 00 
20315     30 38 3C 36 
20319     7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2031d     7E 06 3E 60 
20321     66 3C 00 00 
20325     3C 06 3E 66 
20329     66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2032d     7E 60 30 18 
20331     0C 0C 00 00 
20335     3C 66 3C 66 
20339     66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2033d     3C 66 7C 60 
20341     30 1C 00 00 
20345     00 18 18 00 
20349     18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2034d     00 18 18 00 
20351     18 18 0C 60 
20355     30 18 0C 18 
20359     30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2035d     00 7E 00 00 
20361     7E 00 00 06 
20365     0C 18 30 18 
20369     0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2036d     3C 66 30 18 
20371     00 18 00 00 
20375     3C 66 76 76 
20379     06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2037d     18 3C 66 66 
20381     7E 66 00 00 
20385     3E 66 3E 66 
20389     66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2038d     3C 66 06 06 
20391     66 3C 00 00 
20395     1E 36 66 66 
20399     36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2039d     7E 06 3E 06 
203a1     06 7E 00 00 
203a5     7E 06 3E 06 
203a9     06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
203ad     7C 06 06 76 
203b1     66 7C 00 00 
203b5     66 66 7E 66 
203b9     66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
203bd     7E 18 18 18 
203c1     18 7E 00 00 
203c5     60 60 60 60 
203c9     66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
203cd     66 36 1E 1E 
203d1     36 66 00 00 
203d5     06 06 06 06 
203d9     06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
203dd     C6 EE FE D6 
203e1     C6 C6 00 00 
203e5     66 6E 7E 7E 
203e9     76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
203ed     3C 66 66 66 
203f1     66 3C 00 00 
203f5     3E 66 66 3E 
203f9     06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
203fd     3C 66 66 66 
20401     36 6C 00 00 
20405     3E 66 66 3E 
20409     36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2040d     3C 06 3C 60 
20411     60 3C 00 00 
20415     7E 18 18 18 
20419     18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2041d     66 66 66 66 
20421     66          | 	byte	$66[5]
20422     7E 00 00 66 
20426     66 66 66 3C 
2042a     18 00 00 C6 
2042e     C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
20432     C6 00 00 66 
20436     66 3C 3C 66 
2043a     66 00 00 66 
2043e     66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
20442     18 00 00 7E 
20446     30 18 0C 06 
2044a     7E 00 00 78 
2044e     18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
20452     78 00 00 02 
20456     06 0C 18 30 
2045a     60 00 00 1E 
2045e     18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
20462     1E 00 00 10 
20466     38 6C C6 00 
2046a     00 00 00 00 
2046e     00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
20472     FF 00 00 18 
20476     3C 7E 7E 3C 
2047a     18 00 00 00 
2047e     3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
20482     7C 00 00 06 
20486     06 3E 66 66 
2048a     3E 00 00 00 
2048e     3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
20492     3C 00 00 60 
20496     60 7C 66 66 
2049a     7C 00 00 00 
2049e     3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
204a2     3C 00 00 70 
204a6     18 7C 18 18 
204aa     18 00 00 00 
204ae     7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
204b2     60 3E 00 06 
204b6     06 3E 66 66 
204ba     66 00 00 18 
204be     00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
204c2     3C 00 00 60 
204c6     00 60 60 60 
204ca     60 3C 00 06 
204ce     06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
204d2     66 00 00 1C 
204d6     18 18 18 18 
204da     3C 00 00 00 
204de     66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
204e2     C6 00 00 00 
204e6     3E 66 66 66 
204ea     66 00 00 00 
204ee     3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
204f2     3C 00 00 00 
204f6     3E 66 66 3E 
204fa     06 06 00 00 
204fe     7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
20502     60 60 00 00 
20506     3E 66 06 06 
2050a     06 00 00 00 
2050e     7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
20512     3E 00 00 18 
20516     7E 18 18 18 
2051a     70 00 00 00 
2051e     66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
20522     7C 00 00 00 
20526     66 66 66 3C 
2052a     18 00 00 00 
2052e     C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
20532     6C 00 00 00 
20536     66 3C 18 3C 
2053a     66 00 00 00 
2053e     66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
20542     30 1E 00 00 
20546     7E 30 18 0C 
2054a     7E 00 00 18 
2054e     3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
20552     3C 00 18 18 
20556     18 18 18 18 
2055a     18 18 00 7E 
2055e     1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
20562     60 00 10 18 
20566     1C 1E 1C 18 
2056a     10 00 08 18 
2056e     38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
20572     08 00       | 	byte	$08, $00
20574     00 00 00 00 
20578     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
2057c     00 00 00 00 
20580     00 80 80 80 
20584     00 00 00 FF 
20588     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
2058c     00 00 00 00 
20590     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
20591     80 00 00 00 
20595     00 80 00 00 
20599     80 80 00 00 
2059d     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
205a1     80 00 80 00 
205a5     00 40 80 00 
205a9     AA AA AA 00 
205ad     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
205b1     FF 00 00 00 
205b5     00 FF 00 00 
205b9     FF FF 00 00 
205bd     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
205c1     FF 00 FF 00 
205c5     00 FF FF 00 
205c9     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
205cc     00 00 00 00 
205d0     00          | ataripalette   file "ataripalettep2.def"
205d1     11 11 11 00 
205d5     22 22 22 00 
205d9     33 33 33 00 
205dd     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
205e1     55 55 55 00 
205e5     66 66 66 00 
205e9     77 77 77 00 
205ed     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
205f1     99 99 99 00 
205f5     AA AA AA 00 
205f9     BB BB BB 00 
205fd     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
20601     DD DD DD 00 
20605     EE EE EE 00 
20609     FF FF FF 00 
2060d     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
20611     00 14 40 00 
20615     00 1E 60 00 
20619     00 28 80 00 
2061d     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
20621     00 3C BF 00 
20625     00 46 DF 00 
20629     00 50 FF 00 
2062d     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
20631     39 77 FF 00 
20635     55 8A FF 00 
20639     71 9E FF 00 
2063d     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
20641     AA C5 FF 00 
20645     C6 D8 FF 00 
20649     E3 EC FF 00 
2064d     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
20651     00 00 40 00 
20655     00 00 60 00 
20659     00 00 80 00 
2065d     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
20661     00 00 BF 00 
20665     00 00 DF 00 
20669     00 00 FF 00 
2066d     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
20671     39 39 FF 00 
20675     55 55 FF 00 
20679     71 71 FF 00 
2067d     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
20681     AA AA FF 00 
20685     C6 C6 FF 00 
20689     E3 E3 FF 00 
2068d     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
20691     20 00 40 00 
20695     30 00 60 00 
20699     40 00 80 00 
2069d     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
206a1     60 00 BF 00 
206a5     70 00 DF 00 
206a9     80 00 FF 00 
206ad     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
206b1     9C 39 FF 00 
206b5     AA 55 FF 00 
206b9     B8 71 FF 00 
206bd     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
206c1     D5 AA FF 00 
206c5     E3 C6 FF 00 
206c9     F1 E3 FF 00 
206cd     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
206d1     40 00 40 00 
206d5     60 00 60 00 
206d9     80 00 80 00 
206dd     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
206e1     BF 00 BF 00 
206e5     DF 00 DF 00 
206e9     FF 00 FF 00 
206ed     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
206f1     FF 39 FF 00 
206f5     FF 55 FF 00 
206f9     FF 71 FF 00 
206fd     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
20701     FF AA FF 00 
20705     FF C6 FF 00 
20709     FF E3 FF 00 
2070d     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
20711     40 00 20 00 
20715     60 00 30 00 
20719     80 00 40 00 
2071d     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
20721     BF 00 60 00 
20725     DF 00 70 00 
20729     FF 00 80 00 
2072d     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
20731     FF 39 9C 00 
20735     FF 55 AA 00 
20739     FF 71 B8 00 
2073d     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
20741     FF AA D5 00 
20745     FF C6 E3 00 
20749     FF E3 F1 00 
2074d     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
20751     40 00 00 00 
20755     60 00 00 00 
20759     80 00 00 00 
2075d     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
20761     BF 00 00 00 
20765     DF 00 00 00 
20769     FF 00 00 00 
2076d     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
20771     FF 39 39 00 
20775     FF 55 55 00 
20779     FF 71 71 00 
2077d     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
20781     FF AA AA 00 
20785     FF C6 C6 00 
20789     FF E3 E3 00 
2078d     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
20791     40 10 00 00 
20795     60 18 00 00 
20799     80 20 00 00 
2079d     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
207a1     BF 30 00 00 
207a5     DF 38 00 00 
207a9     FF 40 00 00 
207ad     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
207b1     FF 6A 39 00 
207b5     FF 80 55 00 
207b9     FF 95 71 00 
207bd     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
207c1     FF BF AA 00 
207c5     FF D5 C6 00 
207c9     FF EA E3 00 
207cd     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
207d1     40 20 00 00 
207d5     60 30 00 00 
207d9     80 40 00 00 
207dd     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
207e1     BF 60 00 00 
207e5     DF 70 00 00 
207e9     FF 80 00 00 
207ed     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
207f1     FF 9C 39 00 
207f5     FF AA 55 00 
207f9     FF B8 71 00 
207fd     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
20801     FF D5 AA 00 
20805     FF E3 C6 00 
20809     FF F1 E3 00 
2080d     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
20811     40 30 00 00 
20815     60 48 00 00 
20819     80 60 00 00 
2081d     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
20821     BF 90 00 00 
20825     DF A8 00 00 
20829     FF C0 00 00 
2082d     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
20831     FF CE 39 00 
20835     FF D5 55 00 
20839     FF DC 71 00 
2083d     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
20841     FF EA AA 00 
20845     FF F1 C6 00 
20849     FF F8 E3 00 
2084d     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
20851     30 40 00 00 
20855     48 60 00 00 
20859     60 80 00 00 
2085d     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
20861     90 BF 00 00 
20865     A8 DF 00 00 
20869     C0 FF 00 00 
2086d     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
20871     CE FF 39 00 
20875     D5 FF 55 00 
20879     DC FF 71 00 
2087d     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
20881     EA FF AA 00 
20885     F1 FF C6 00 
20889     F8 FF E3 00 
2088d     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
20891     00 40 00 00 
20895     00 60 00 00 
20899     00 80 00 00 
2089d     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
208a1     00 BF 00 00 
208a5     00 DF 00 00 
208a9     00 FF 00 00 
208ad     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
208b1     39 FF 39 00 
208b5     55 FF 55 00 
208b9     71 FF 71 00 
208bd     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
208c1     AA FF AA 00 
208c5     C6 FF C6 00 
208c9     E3 FF E3 00 
208cd     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
208d1     00 40 14 00 
208d5     00 60 1E 00 
208d9     00 80 28 00 
208dd     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
208e1     00 BF 3C 00 
208e5     00 DF 46 00 
208e9     00 FF 50 00 
208ed     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
208f1     39 FF 77 00 
208f5     55 FF 8A 00 
208f9     71 FF 9E 00 
208fd     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
20901     AA FF C5 00 
20905     C6 FF D8 00 
20909     E3 FF EC 00 
2090d     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
20911     00 40 28 00 
20915     00 60 3C 00 
20919     00 80 50 00 
2091d     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
20921     00 BF 78 00 
20925     00 DF 8C 00 
20929     00 FF A0 00 
2092d     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
20931     39 FF B5 00 
20935     55 FF C0 00 
20939     71 FF CA 00 
2093d     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
20941     AA FF DF 00 
20945     C6 FF EA 00 
20949     E3 FF F4 00 
2094d     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
20951     00 40 40 00 
20955     00 60 60 00 
20959     00 80 80 00 
2095d     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
20961     00 BF BF 00 
20965     00 DF DF 00 
20969     00 FF FF 00 
2096d     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
20971     39 FF FF 00 
20975     55 FF FF 00 
20979     71 FF FF 00 
2097d     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
20981     AA FF FF 00 
20985     C6 FF FF 00 
20989     E3 FF FF 00 
2098d     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
20991     00 28 40 00 
20995     00 3C 60 00 
20999     00 50 80 00 
2099d     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
209a1     00 78 BF 00 
209a5     00 8C DF 00 
209a9     00 A0 FF 00 
209ad     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
209b1     39 B5 FF 00 
209b5     55 C0 FF 00 
209b9     71 CA FF 00 
209bd     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
209c1     AA DF FF 00 
209c5     C6 EA FF 00 
209c9     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
209cc                 | '**********************************************************************************
209cc                 | '
209cc                 | '        Timings and colors definitions
209cc                 | '
209cc                 | '**********************************************************************************
209cc                 | 
209cc                 |    'streamer sets for text mode, to add to timings[0..5]
209cc                 | ' todo for the retromachine: 768x576
209cc                 | 
209cc                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
209cc     10 00 00 00 
209d0     50 00 00 00 
209d4     14 00 00 00 
209d8     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
209dc     70 00 00 00 
209e0     08 00 00 00 
209e4     30 00 00 00 
209e8     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
209ec     10 00 00 00 
209f0     10 00 00 00 
209f4     00 00 00 00 
209f8     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
209fc     E0 01 00 00 
20a00     F6 32 24 15 
20a04     FB 6C C3 01 
20a08     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
20a0c                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
20a0c                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
20a0c     30 00 00 00 
20a10     50 00 00 00 
20a14     34 00 00 00 
20a18     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
20a1c     20 00 00 00 
20a20     08 00 00 00 
20a24     16 00 00 00 
20a28     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
20a2c     24 00 00 00 
20a30     18 00 00 00 
20a34     40 00 00 00 
20a38     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
20a3c     F0 01 00 00 
20a40     F6 32 24 15 
20a44     FB 6C C3 01 
20a48     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
20a4c                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
20a4c     10 00 00 00 
20a50     40 00 00 00 
20a54     10 00 00 00 
20a58     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
20a5c     08 00 00 00 
20a60     08 00 00 00 
20a64     08 00 00 00 
20a68     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
20a6c     40 00 00 00 
20a70     20 00 00 00 
20a74     80 00 00 00 
20a78     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
20a7c     E0 01 00 00 
20a80     70 AE E9 10 
20a84     FB 8B FF 01 
20a88     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
20a8c     10 00 00 00 
20a90     42 00 00 00 
20a94     14 00 00 00 
20a98     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
20a9c     00 00 00 00 
20aa0     08 00 00 00 
20aa4     00 00 00 00 
20aa8     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
20aac     10 00 00 00 
20ab0     10 00 00 00 
20ab4     C0 00 00 00 
20ab8     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
20abc     40 02 00 00 
20ac0     F6 32 24 15 
20ac4     FB 6C C3 01 
20ac8     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
20acc     50 00 00 00 
20ad0     A0 00 00 00 
20ad4     54 00 00 00 
20ad8     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
20adc     08 00 00 00 
20ae0     08 00 00 00 
20ae4     08 00 00 00 
20ae8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20aec     0C 00 00 00 
20af0     08 00 00 00 
20af4     00 01 00 00 
20af8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
20afc     E0 01 00 00 
20b00     10 06 56 15 
20b04     FB 64 C3 01 
20b08     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
20b0c     50 00 00 00 
20b10     32 00 00 00 
20b14     50 00 00 00 
20b18     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
20b1c     08 00 00 00 
20b20     08 00 00 00 
20b24     08 00 00 00 
20b28     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20b2c     0C 00 00 00 
20b30     08 00 00 00 
20b34     40 01 00 00 
20b38     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
20b3c     E0 01 00 00 
20b40     F2 CD 33 13 
20b44     FB 53 92 01 
20b48     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
20b4c     18 00 00 00 
20b50     30 00 00 00 
20b54     18 00 00 00 
20b58     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
20b5c     08 00 00 00 
20b60     08 00 00 00 
20b64     08 00 00 00 
20b68     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20b6c     0C 00 00 00 
20b70     08 00 00 00 
20b74     80 01 00 00 
20b78     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
20b7c     E0 01 00 00 
20b80     F4 8F 11 11 
20b84     FB 3A 55 01 
20b88     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
20b8c     20 00 00 00 
20b90     40 00 00 00 
20b94     22 00 00 00 
20b98     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
20b9c     00 00 00 00 
20ba0     08 00 00 00 
20ba4     00 00 00 00 
20ba8     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
20bac     0C 00 00 00 
20bb0     08 00 00 00 
20bb4     C0 01 00 00 
20bb8     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
20bbc     F0 01 00 00 
20bc0     F2 CD 33 13 
20bc4     FB 53 92 01 
20bc8     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
20bcc                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
20bcc     00 75 C7 97 
20bd0     27 47 F6 0A 
20bd4     05 79 CB 9B 
20bd8     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
20bdc                 | 
20bdc     28 12 64 FD | hdmi            setq    #9
20be0     00 F7 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
20be4     00 40 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
20be8     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
20bec     C0 11 07 F6 |                 mov     ii,#448                          '7 << 6          
20bf0     84 11 03 F1 |                 add     ii,hbase
20bf4     58 10 63 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
20bf8     7B 0B 80 FF 
20bfc     88 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
20c00                 | 
20c00     66 66 86 FF 
20c04     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
20c08                 | 
20c08                 | 
20c08                 | ''--------  frame rendering main loop  ---------------------------------------------------
20c08                 | 
20c08                 | p101
20c08     28 14 64 FD |                 setq    #10
20c0c     00 F7 06 FB |                 rdlong  framebuf,  ptra
20c10     28 1E 64 FD |                 setq    #15
20c14     80 B3 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
20c18     7D B1 02 FB |                 rdlong  border,borderptr
20c1c                 | 
20c1c     01 DC 06 F1 |                 add     frames,#1
20c20     82 0D 03 F6 |                 mov     dlptr2,dlptr
20c24                 | 
20c24     7F DF 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
20c28     6F E1 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
20c2c     6F DB F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
20c30     FF DE 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
20c34                 |  '' up porch
20c34                 | 
20c34     54 15 03 F6 |                 mov     hsync0,sync_000                  '
20c38     55 17 03 F6 |                 mov     hsync1,sync_001
20c3c     43 C0 46 FB |                 callpa  i_upporch ,#blank
20c40     7E 01 68 FC |                 wrlong  #0,vblankptr
20c44                 |                 
20c44     1F 02 17 F4 |                 testb   paletteptr,#31 wc
20c48     29 FE 65 3D |          if_nc  setq2   #255
20c4c     81 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
20c50                 |  
20c50                 | '' cursor blinking
20c50                 | 
20c50     04 DC 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
20c54     81 DE 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
20c58                 | 
20c58                 | '' main screen
20c58                 | 
20c58     00 D6 06 F6 |                 mov linenum,#0
20c5c     00 30 07 F6 |                 mov rcnt,#0
20c60     00 34 07 F6 |                 mov rcnt2a,#0
20c64                 | 
20c64                 | 
20c64     00 30 0F F2 | p301            cmp rcnt,#0 wz
20c68     18 00 90 AD |         if_z    jmp #p306
20c6c     01 30 87 F1 |                 sub rcnt,#1
20c70     9C 0F 03 F6 |                 mov dl,rdl
20c74     99 35 0B F7 |                 incmod rcnt2a,rcnt2 wz
20c78     9B 0F 03 A1 |    if_z         add dl,roffset  
20c7c     87 39 03 F6 |                 mov rdl,dl
20c80     04 00 90 FD |                 jmp #p307          
20c84                 |           
20c84                 |                 
20c84     86 0F 03 FB | p306            rdlong  dl,dlptr2                         'read DL enry
20c88     87 13 1B F6 | p307            mov     framebuf2,dl wcz                  'move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
20c8c     6A 12 7B FD |                 rczr    framebuf2 wcz                     'check if 2 lower bits=11. If yes, this is special command
20c90     64 00 90 7D |    if_nz_or_nc  jmp     #p303                             'if not, this is standard DL entry - start to interpret the line at p303 
20c94                 | 
20c94                 | '' Special entry:
20c94                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
20c94                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
20c94                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
20c94                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0010_0011    set border color to palette entry #p
20c94                 | '' - set font size          %0000_0000_0000_0000_0000_ssss_0011_0011    ssss - bit for font size, 3=8, 4=16
20c94                 | '' - set font pointer       %aaaa_aaaa_aaaa_aaaa_aaaa_0000_0100_0011
20c94                 | '' - set live change        %aaaa_aaaa_aaaa_aaaa_nnnn_cccc_cccc_1111    a: 16 bit addr. 00 added to 18 aligned, 2 upper bits=11; nnnn: new font line if charmode cccc cpl to change
20c94                 | '' - set hscroll            %0000_0000_0000_0000_0000_ssss_0100_0011
20c94                 | 
20c94                 | '' todo: set horizontal scroll (if needed)
20c94                 | 
20c94     04 0C 07 F1 |                  add dlptr2,#4               ' move the pointer to the next DL entry    
20c98     02 12 67 F0 |                  shl framebuf2,#2            ' restore the DL entry after rczr, now 2 lower bits are 00
20c9c     89 3B 43 F8 |                  getnib dlc,framebuf2,#0    
20ca0     04 3A 0F F2 |                  cmp dlc,#%0100 wz            ' %01 special command=repeat
20ca4     30 00 90 AD |                  if_z jmp #p390              ' start interpreting 'repeat' at p390
20ca8                 |                  
20ca8     00 3A 0F F2 |                  cmp dlc,#0 wz                  ' 00 - set border/font
20cac     04 00 90 AD |                  if_z jmp #p391
20cb0                 |                         
20cb0     B0 FF 9F FD |                  jmp #p301                    ' Instruction unknown or unimplemented:ignore 
20cb4                 |                              
20cb4                 | 
20cb4                 | 
20cb4     89 3B 4B F8 | p391             getnib dlc,framebuf2,#1
20cb8     03 3A 0F F2 | 		 		 cmp dlc,#%0011 wz          ' 0011: set font size
20cbc     89 3F 53 A8 | 	    if_z     getnib fontsize,framebuf2,#2		 
20cc0     A0 FF 9F AD |         if_z     jmp #p301
20cc4                 |         
20cc4     04 3A 0F F2 |                  cmp dlc,#%0100 wz
20cc8     0C 12 47 A0 |         if_z     shr framebuf2,#12
20ccc     89 F9 02 A6 |         if_z     mov fontbuf,framebuf2
20cd0     90 FF 9F AD |         if_z    jmp #p301
20cd4                 |         
20cd4     8C FF 9F FD |                   jmp #p301    ' not implemented yet
20cd8                 |         
20cd8                 | 
20cd8                 | 
20cd8     86 39 03 FB | p390             rdlong rdl,dlptr2
20cdc     89 31 3B F9 |                  getword rcnt,framebuf2,#1   ' nnnn_nnnn_nnqq_qqmm_mmmm_mmmm_mm01_1100
20ce0     04 30 47 F0 |                  shr rcnt,#4                 ' nnnn_nnnn_nnqq_qqmm ->4 =0000_nnnn_nnnn_nnnn_nnqq (!)
20ce4                 |              
20ce4     89 33 63 F8 |                  getnib rcnt2,framebuf2,#4
20ce8     89 37 33 F9 |                  getword roffset,framebuf2,#0
20cec                 |                 
20cec     04 36 47 F0 |                  shr roffset,#4
20cf0     0C 36 67 F0 |                  shl roffset,#12
20cf4                 |   
20cf4     6C FF 9F FD |                  jmp #p301
20cf8                 |                  
20cf8                 |                  
20cf8                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
20cf8     0C 12 47 F0 |                 shr     framebuf2,#12
20cfc     02 12 67 F0 |                 shl     framebuf2,#2
20d00                 | 
20d00     87 1B E3 F8 |                 getbyte t1,dl,#0
20d04     00 1A 0F F2 |                 cmp     t1,#0 wz
20d08     34 00 90 AD |     if_z        jmp     #borderline
20d0c                 | 
20d0c     00 0E 17 F4 |                  testb   dl,#0  wc                     ' bit 0 set = text OR extended:TODO
20d10     50 00 90 CD |           if_c   jmp     #textline
20d14     50 02 90 3D |           if_nc  jmp     #graphline
20d18                 | '
20d18     01 D6 06 F1 | p302            add     linenum,#1
20d1c     04 0C 07 F1 |                 add     dlptr2,#4
20d20     68 D7 0A F2 |                 cmp     linenum,i_totalvis  wz
20d24     3C FF 9F 5D |          if_nz  jmp     #p301
20d28                 | 
20d28     7E 03 68 FC | p112            wrlong  #1,vblankptr
20d2c     07 C4 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
20d30                 | 
20d30     56 15 03 F6 |                 mov     hsync0,sync_222                 'vsync on
20d34     57 17 03 F6 |                 mov     hsync1,sync_223
20d38     04 C2 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
20d3c     C8 FE 9F FD |                 jmp     #p101
20d40                 | 
20d40                 | '' ---------------  END of frame rendering loop -------------------------------------------
20d40                 | 
20d40                 | 
20d40     14 00 B0 FD | borderline      call    #hsync                      ' make a border
20d44     58 B9 C2 FC |                 xcont   m_vi,border
20d48     CC FF 9F FD |                 jmp     #p302
20d4c                 | 
20d4c                 | 
20d4c     08 00 B0 FD | blank           call    #hsync                          'blank lines
20d50     8A B9 C2 FC |                 xcont   m_vi,hsync0
20d54     FD ED 6F 0B |         _ret_   djnz    pa,#blank
20d58                 | 
20d58     8A B3 C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
20d5c     8B B5 B2 FC |                 xzero   m_sn,hsync1
20d60     8A B7 C2 0C |         _ret_   xcont   m_bv,hsync0
20d64                 | 
20d64                 | 
20d64                 | 
20d64                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
20d64                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
20d64                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
20d64                 | 
20d64                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
20d64                 | 
20d64     6F E5 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
20d68                 | 
20d68     87 19 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
20d6c     87 2F 5B F8 |                 getnib  zoom, dl,#3
20d70     03 2E 07 F5 |                 and             zoom, #3
20d74                 | 
20d74                 | 
20d74                 | 
20d74     87 D5 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
20d78     02 D4 46 F0 |                 shr     linestart,#2                    ' scanline to char line
20d7c     3F D4 06 F5 |                 and     linestart,#63
20d80     70 D5 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
20d84     81 E4 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
20d88                 | 
20d88     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
20d8c                 | 
20d8c                 |                        ' if fontline =0, get a border color
20d8c                 | 
20d8c     5D 1B 33 F9 | p102            getword t1,m_border,#0
20d90     00 1A 0F F2 |                 cmp     t1, #0 wz
20d94     58 BB C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
20d98                 | 
20d98     6D 19 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
20d9c     81 E2 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
20da0     72 E3 02 36 |          if_nc  mov     cursorpos,cursorpos2
20da4     01 E2 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
20da8     7C 1D 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
20dac     8C 1D 03 F1 |                 add     t2,fontline                     ' add a current font line
20db0     5E D3 02 F6 |                 mov m_lut2, m_lut1
20db4     76 D3 02 F1 |                 add m_lut2, lutt1
20db8     64 27 03 F6 |                 mov cpl2,i_cpl
20dbc                 | 
20dbc     02 2E 0F F2 |                cmp zoom,#2 wz
20dc0     E4 00 90 AD |           if_z jmp #p420
20dc4     01 2E 0F F2 |                cmp zoom,#1 wz
20dc8     64 00 90 AD |           if_z jmp #p410
20dcc     00 2E 0F F2 |                 cmp zoom,#0 wz
20dd0     04 00 90 AD |           if_z jmp #p400
20dd4     50 01 90 FD |                jmp #p430
20dd8                 | 
20dd8                 |                    '
20dd8                 |  ''---------------------------------------------------------------------------------------------------------
20dd8     89 29 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
20ddc     94 2B F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20de0     94 2D FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20de4     94 29 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20de8     04 12 07 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20dec     9F 29 63 F0 |                         shl     char,fontsize         ' 1 char=16 bytes in font def               '6
20df0     8E 29 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20df4     94 1B C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20df8     01 E2 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20dfc     FF 1A 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20e00                 | 
20e00     8D D3 C2 FC |                         xcont m_lut2,t1
20e04                 | 
20e04     95 23 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20e08     6C 23 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20e0c     01 D8 06 F1 |                         add     lutaddr,#1                                                          '15
20e10     96 23 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20e14     6C 23 33 FC |                         wrlut   t5,lutaddr                                                          '17
20e18     01 D8 86 F1 |                         sub     lutaddr,#1
20e1c                 | 
20e1c     10 D2 E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20e20     10 BC E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20e24     20 D8 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20e28                 | 
20e28     EB 27 6F FB |                         djnz   cpl2,#p400
20e2c                 |                         
20e2c                 | 
20e2c                 |                         
20e2c     28 01 90 FD |  p401                   jmp    #p103
20e30                 | 
20e30                 | ''------------------------------------------------------------------------------------------------------------
20e30                 | 
20e30     01 26 47 F0 |  p410                   shr cpl2,#1
20e34                 | 
20e34                 | ''---------------------------------------------------------------------------------------------------------
20e34     89 29 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
20e38     94 2B F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20e3c     94 2D FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20e40     94 29 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20e44     04 12 07 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20e48     9F 29 63 F0 |                         shl     char,fontsize           ' 1 char=16 bytes in font def               '6
20e4c     8E 29 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20e50     94 1B C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20e54     01 E2 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20e58     FF 1A 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20e5c                 | 
20e5c                 | 
20e5c     8D 1F 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
20e60     8D 1B 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
20e64     63 1A 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
20e68     03 1A 07 FA |                         mul t1,#3
20e6c     8D D3 C2 FC |                         xcont m_lut2,t1
20e70     95 23 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20e74     6C 23 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20e78     01 D8 06 F1 |                         add     lutaddr,#1                                                          '15
20e7c     96 23 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20e80     6C 23 33 FC |                         wrlut   t5,lutaddr                                                          '17
20e84     01 D8 86 F1 |                         sub     lutaddr,#1
20e88     63 1E 63 FD |                         mergew t3
20e8c     03 1E 07 FA |                         mul t3,#3
20e90     8F D3 C2 FC |                         xcont m_lut2,t3
20e94                 | 
20e94     10 D2 E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20e98     10 BC E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20e9c                 | 
20e9c     20 D8 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20ea0                 | 
20ea0     E4 27 6F FB |                         djnz   cpl2,#p412
20ea4     B0 00 90 FD |  p411                   jmp    #p103
20ea8                 | 
20ea8                 | ''------------------------------------------------------------------------------------------------------------
20ea8                 | 
20ea8     02 26 47 F0 |  p420                   shr cpl2,#2
20eac                 | 
20eac                 | ''---------------------------------------------------------------------------------------
20eac     89 29 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
20eb0     94 2B F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20eb4     94 2D FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20eb8     94 29 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20ebc     04 12 07 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20ec0     9F 29 63 F0 |                         shl     char,fontsize           ' 1 char=16 bytes in font def               '6
20ec4     8E 29 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20ec8     94 1B C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20ecc     01 E2 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20ed0     FF 1A 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20ed4                 | 
20ed4     61 1A 63 FD |                         mergeb t1
20ed8     8D 1F 3B F9 |                         getword t3,t1,#1
20edc     0F 1A 07 FA |                         mul t1,#15
20ee0     8D D3 C2 FC |                         xcont m_lut2,t1
20ee4                 | 
20ee4     95 23 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20ee8     6C 23 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20eec     01 D8 06 F1 |                         add     lutaddr,#1                                                          '15
20ef0     96 23 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20ef4     6C 23 33 FC |                         wrlut   t5,lutaddr                                                          '17
20ef8     01 D8 86 F1 |                         sub     lutaddr,#1
20efc                 | 
20efc     8D 21 EB F8 |                         getbyte t4,t1,#1        '
20f00     90 D3 C2 FC |                         xcont m_lut2,t4                                                                                                           '
20f04                 | 
20f04     0F 1E 07 FA |                         mul t3,#15
20f08     8F D3 C2 FC |                         xcont m_lut2,t3
20f0c                 | 
20f0c     8F 23 EB F8 |                         getbyte t5,t3,#1
20f10     91 D3 C2 FC |                         xcont m_lut2, t5
20f14     10 D2 E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20f18     10 BC E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20f1c                 | 
20f1c     20 D8 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20f20                 | 
20f20     E2 27 6F FB |                         djnz   cpl2,#p422
20f24     30 00 90 FD |  p421                   jmp    #p103
20f28                 | 
20f28                 | '--------------------------------------------------------------------------------------------------------------
20f28                 | 
20f28     89 29 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
20f2c     94 2B F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20f30     94 2D FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20f34                 | 
20f34     00 D2 C6 FC |                         xcont m_lut2,#0
20f38                 | 
20f38     95 23 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20f3c     6C 23 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20f40     01 D8 06 F1 |                         add     lutaddr,#1                                                          '15
20f44     96 23 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20f48     6C 23 33 FC |                         wrlut   t5,lutaddr                                                          '17
20f4c     01 D8 86 F1 |                         sub     lutaddr,#1
20f50                 | 
20f50     F5 27 6F FB |                         djnz   cpl2,#p430
20f54     00 00 90 FD |  p431                   jmp    #p103
20f58                 | 
20f58                 | ''------------------------------------------------------------------------------------------------------------
20f58                 | 
20f58                 | 
20f58                 | 
20f58     5D 3D 33 F9 | p103            getword  mb2,m_border,#0
20f5c     00 3C 0F F2 |                 cmp      mb2, #0 wz
20f60     58 BB C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
20f64                 | 
20f64     B0 FD 9F FD |                 jmp #p302
20f68                 | 
20f68                 | '' -------------------------------------- END of text line ---------------------------------
20f68                 | 
20f68                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
20f68                 | 
20f68     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
20f6c                 | 
20f6c                 | 
20f6c     5D 3D 33 F9 | p202            getword mb2,m_border,#0
20f70     00 3C 0F F2 |                 cmp     mb2, #0 wz
20f74     58 BB C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
20f78                 | 
20f78                 | '----------------------------------------- display pixels
20f78                 | 
20f78     5E D3 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
20f7c     64 27 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
20f80                 | 
20f80     87 2F 5B F8 |                 getnib  zoom, dl,#3
20f84     03 2E 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
20f88                 | 
20f88     87 D5 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
20f8c     0C D4 06 F5 |                 and     colordepth,#12
20f90                 | 
20f90     00 D4 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
20f94     77 D3 02 A1 |           if_z  add     m_lut2,lutg1
20f98     64 00 90 AD |           if_z  jmp     #p240
20f9c                 | 
20f9c     04 D4 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
20fa0     78 D3 02 A1 |           if_z  add     m_lut2,lutg2
20fa4     98 00 90 AD |           if_z  jmp     #p250
20fa8                 | 
20fa8     08 D4 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
20fac     79 D3 02 A1 |           if_z  add     m_lut2,lutg4
20fb0     FC 00 90 AD |           if_z  jmp     #p260
20fb4                 | 
20fb4     7A D3 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
20fb8                 | 
20fb8                 | '' --- 8 bit color modes
20fb8                 | 
20fb8     00 2E 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
20fbc     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
20fc0                 | 
20fc0     01 2E 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
20fc4     2A 24 07 A6 |                 if_z mov skippattern,#%101010
20fc8                 |        
20fc8                 |  '  
20fc8     02 2E 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
20fcc     25 24 07 A6 |                 if_z mov skippattern,#%100101
20fd0                 |     
20fd0                 |  
20fd0     05 24 07 56 |                 if_nz mov skippattern,#%000101
20fd4     01 26 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
20fd8                 |         
20fd8                 | 
20fd8                 |         
20fd8     89 29 03 FB | p235               rdlong  char,framebuf2
20fdc     32 24 63 FD |                    skipf skippattern
20fe0     02 12 07 F1 |                    add     framebuf2,#2             '0 1 1
20fe4     01 12 07 F1 |                    add     framebuf2,#1             '1 0 0
20fe8     50 28 FF F9 |                    movbyts char,#%01010000          '0 1 1
20fec     00 28 FF F9 |                    movbyts char,#%00000000          '1 0 0
20ff0     94 D3 C2 FC |                    xcont   m_lut2,char              '0 0 0
20ff4     94 D3 C2 FC |                    xcont   m_lut2,char              '1 1 0
20ff8     F7 27 6F FB |                    djnz    cpl2,#p235
20ffc                 | 
20ffc     20 01 90 FD |                jmp    #p203
21000                 |                   
21000                 | 
21000                 | 
21000                 | '' --- 1 bit color modes
21000                 | 
21000     00 2E 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
21004     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
21008                 | 
21008     01 2E 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
2100c     13 24 07 A6 |        if_z   mov skippattern,#%10011
21010     08 24 07 56 |        if_nz  mov skippattern,#%01000
21014                 | 
21014                 | 
21014     89 29 E3 FA | p241               rdword  char,framebuf2
21018     44 28 FF F9 |                    movbyts char,#%01000100
2101c     63 28 63 FD |                    mergew  char
21020     32 24 63 FD |                    skipf skippattern
21024     44 28 FF F9 |                    movbyts char,#%01000100         ' 1 0
21028     63 28 63 FD |                    mergew  char                    ' 1 0
2102c     94 D3 C2 FC |                    xcont   m_lut2,char             ' 0 0
21030     02 12 07 F1 |                    add     framebuf2,#2                    ' 0 1
21034     01 12 07 F1 |                    add     framebuf2,#1                ' 1 0
21038     F6 27 6F FB |                    djnz   cpl2,#p241
2103c                 | 
2103c                 | 
2103c     E0 00 90 FD |                jmp    #p203
21040                 | 
21040                 | '' --- 2 bit color modes
21040                 | 
21040     00 2E 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
21044     C8 00 90 AD |        if_z   jmp #p251
21048                 | 
21048     01 2E 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
2104c     30 00 90 AD |        if_z   jmp #p252
21050                 | 
21050                 | 
21050     89 29 C3 FA | p254               rdbyte char,framebuf2
21054     04 22 07 F6 |                    mov  t5,#4
21058     02 28 67 F0 | p255               shl  char,#2
2105c     94 1B 53 F8 |                    getnib  t1,char,#2
21060     03 1A 07 F5 |                    and     t1,#3
21064     55 1A 07 FA |                    mul     t1,#$55
21068     8D 1D 03 F9 |                    rolbyte  t2,t1,#0
2106c     FA 23 6F FB |                    djnz    t5,#p255
21070     8E D3 C2 FC |                    xcont   m_lut2,t2
21074     01 12 07 F1 |                    add     framebuf2,#1
21078     F5 27 6F FB |                    djnz    cpl2,#p254
2107c     A0 00 90 FD |                    jmp     #p203
21080                 | 
21080     89 29 E3 FA | p252               rdword char,framebuf2
21084     08 22 07 F6 |                    mov  t5,#8
21088     02 28 67 F0 | p253               shl  char,#2
2108c     94 1B 63 F8 |                    getnib  t1,char,#4
21090     03 1A 07 F5 |                    and     t1,#3
21094     05 1A 07 FA |                    mul     t1,#5
21098     8D 1D 83 F8 |                    rolnib  t2,t1,#0
2109c     FA 23 6F FB |                    djnz    t5,#p253
210a0     8E D3 C2 FC |                    xcont   m_lut2,t2
210a4     02 12 07 F1 |                    add     framebuf2,#2
210a8     F5 27 6F FB |                    djnz    cpl2,#p252
210ac     70 00 90 FD |                    jmp     #p203
210b0                 | 
210b0                 | '' ------ 4 bit color modes
210b0                 | 
210b0     00 2E 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
210b4     58 00 90 AD |        if_z   jmp #p251
210b8                 | 
210b8     01 2E 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
210bc     2C 00 90 AD |        if_z   jmp #p262
210c0                 | 
210c0                 | 
210c0     89 29 C3 FA | p263               rdbyte char,framebuf2
210c4     02 0A DC FC |                            rep #5,#2
210c8     94 1D 8B F8 |                              rolnib t2,char,#1
210cc     94 1D 8B F8 |                                  rolnib t2,char,#1
210d0     94 1D 8B F8 |                              rolnib t2,char,#1
210d4     94 1D 8B F8 |                                  rolnib t2,char,#1
210d8     04 28 67 F0 |                              shl char,#4
210dc     8E D3 C2 FC |                    xcont   m_lut2,t2
210e0     01 12 07 F1 |                    add     framebuf2,#1
210e4     F6 27 6F FB |                    djnz    cpl2,#p263
210e8     34 00 90 FD |                    jmp     #p203
210ec                 | 
210ec     89 29 E3 FA | p262               rdword  char,framebuf2
210f0     04 06 DC FC |                            rep #3,#4
210f4     94 1D 9B F8 |                              rolnib t2,char,#3
210f8     94 1D 9B F8 |                                  rolnib t2,char,#3
210fc     04 28 67 F0 |                              shl char,#4
21100     8E D3 C2 FC |                    xcont   m_lut2,t2
21104     02 12 07 F1 |                    add     framebuf2,#2
21108     F8 27 6F FB |                    djnz    cpl2,#p262
2110c     10 00 90 FD |                    jmp     #p203
21110                 | 
21110                 | ''---------- all color modes without zoom
21110                 | 
21110     93 07 D8 FC | p251               rep  #3,cpl2
21114     89 29 03 FB |                    rdlong  char,framebuf2
21118     04 12 07 F1 |                    add     framebuf2,#4
2111c     94 D3 C2 FC |                    xcont   m_lut2,char
21120                 |           
21120                 |  ''-----------------------------------------------------------------------------------------
21120                 | p203           ' getword  mb2,m_border,#0
21120     00 3C 0F F2 |                 cmp      mb2, #0 wz
21124     58 BB C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
21128                 | 
21128     EC FB 9F FD |                 jmp #p302
2112c                 | 
2112c                 | '' -------------------------------------- END of graph  line ---------------------------------
2112c                 | 
2112c                 | '' consts and vars
2112c                 | 
2112c     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
21130     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
21134     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
21138     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2113c                 | 
2113c     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
21140                 | 
21140                 | '------ these longs will be set by setmode function
21140                 | 
21140     00 00 00 00 | m_bs            long    0        'blanks before sync
21144     00 00 00 00 | m_sn            long    0        'sync
21148     00 00 00 00 | m_bv            long    0        'blanks before visible
2114c     00 00 00 00 | m_vi            long    0        'visible pixels #
21150     00 00 00 00 | m_border        long    0        'left/right borders
21154     00 00 00 00 | m_lut1          long    0        'characters
21158     00 00 00 00 | i_vborder       long    0        'up/down borders
2115c     00 00 00 00 | i_upporch       long    0        'up porch lines
21160     00 00 00 00 | i_vsync         long    0        'vsync lines
21164     00 00 00 00 | i_downporch     long    0        'down porch lines
21168     00 00 00 00 | i_modenum       long    0        'mode #
2116c     00 00 00 00 | i_cpl           long    0        'chars/longs per line
21170     00 00 00 00 | i_lines         long    0        'scanlines #
21174     00 00 00 00 | i_clock         long    0
21178     00 00 00 00 | i_hubset        long    0
2117c     00 00 00 00 | i_totalvis      long    0
21180                 | 
21180                 | '-------------------------------------
21180                 | 
21180     00 00 00 00 | m_lut2          long    0
21184                 | 
21184                 | colordepth
21184     00 00 00 00 | linestart       long    0
21188     00 00 00 00 | linenum         long    0
2118c     00 01 00 00 | lutaddr         long    256
21190                 | 
21190     0E 00 00 00 | cursorsh        long    14
21194     00 00 00 00 | frames          long    0
21198     00 00 00 00 | cursorx         long    0
2119c     00 00 00 00 | cursory         long    0
211a0     00 00 00 00 | cursorpos       long    0
211a4     00 00 00 00 | cursorpos2      long    0
211a8     00 00 00 00 | fontstart       long    0
211ac     00 00 00 00 | border2         long 0
211b0     00 00 81 70 | lutiv           long $70810000
211b4     00 00 88 00 | lutt1           long $00880000
211b8     00 00 80 00 | lutg1           long $00800000
211bc     00 00 80 10 | lutg2           long $10800000
211c0     00 00 80 20 | lutg4           long $20800000
211c4     00 00 80 30 | lutg8           long $30800000
211c8     00 00 00 00 | framebuf        long 0
211cc     00 00 00 00 | fontbuf         long 0
211d0     00 00 00 00 | borderptr       long 0
211d4     00 00 00 00 | vblankptr       long 0
211d8     00 00 00 00 | cursorptr       long 0
211dc     00 00 00 00 | modeptr         long 0
211e0     00 00 00 00 | paletteptr      long 0
211e4     00 00 00 00 | dlptr           long 0
211e8                 | 
211e8     01 00 00 00 | fontnumptr      long     1
211ec     01 00 00 00 | hbase           long     1
211f0     01 00 00 00 | borderptr2      long     1
211f4     01 00 00 00 | dlptr2 long 1
211f8     01 00 00 00 | dl              long 1
211fc     01 00 00 00 | ii              long     1
21200     01 00 00 00 | framebuf2       long     1
21204     01 00 00 00 | hsync0          long     1
21208     01 00 00 00 | hsync1          long     1
2120c     01 00 00 00 | fontline        long     1
21210     01 00 00 00 | t1              long     1
21214     01 00 00 00 | t2              long     1
21218     01 00 00 00 | t3 long 1
2121c     01 00 00 00 | t4 long 1
21220     01 00 00 00 | t5 long 1
21224     01 00 00 00 | skippattern long 1
21228     01 00 00 00 | cpl2 long 1
2122c     01 00 00 00 | char            long     1
21230     01 00 00 00 | backcolor       long     1
21234     01 00 00 00 | charcolor       long     1
21238     01 00 00 00 | zoom long 1
2123c     00 00 00 00 | rcnt long 0 'dl repeat count
21240     00 00 00 00 | rcnt2 long 0
21244     00 00 00 00 | rcnt2a long 0
21248     00 00 00 00 | roffset long 0
2124c     00 00 00 00 | rdl long 0  'dl repeat line
21250     00 00 00 00 | dlc long 0 'dl command
21254     00 00 00 00 | mb2 long 0
21258     03 00 00 00 | fontsize        long 3
2125c     00 00 00 00 | aend             long 0
21260                 |                 fit     496                     '
21260                 | _trackerplayer_spin2_dat_
21260                 | 
21260     00 00 00 00 | null             long  0
21264     46 52 45 51 
21268     46 52 45 51 
2126c     46 52 45 51 
21270     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
21274     46 52 45 51 
21278     46 52 45 51 
2127c     46 52 45 51 
21280     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21284     46 52 45 51 
21288     46 52 45 51 
2128c     46 52 45 51 
21290     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21294     46 52 45 51 
21298     46 52 45 51 
2129c     46 52 45 51 
212a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212a4     46 52 45 51 
212a8     46 52 45 51 
212ac     46 52 45 51 
212b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212b4     46 52 45 51 
212b8     46 52 45 51 
212bc     46 52 45 51 
212c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212c4     46 52 45 51 
212c8     46 52 45 51 
212cc     46 52 45 51 
212d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212d4     46 52 45 51 
212d8     46 52 45 51 
212dc     46 52 45 51 
212e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212e4     46 52 45 51 
212e8     46 52 45 51 
212ec     46 52 45 51 
212f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212f4     46 52 45 51 
212f8     46 52 45 51 
212fc     46 52 45 51 
21300     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21304     46 52 45 51 
21308     46 52 45 51 
2130c     46 52 45 51 
21310     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21314     46 52 45 51 
21318     46 52 45 51 
2131c     46 52 45 51 
21320     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21324     46 52 45 51 
21328     46 52 45 51 
2132c     46 52 45 51 
21330     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21334     46 52 45 51 
21338     46 52 45 51 
2133c     46 52 45 51 
21340     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21344     46 52 45 51 
21348     46 52 45 51 
2134c     46 52 45 51 
21350     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21354     46 52 45 51 
21358     46 52 45 51 
2135c     46 52 45 51 
21360     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21364     46 52 45 51 
21368     46 52 45 51 
2136c     46 52 45 51 
21370     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21374     46 52 45 51 
21378     46 52 45 51 
2137c     46 52 45 51 
21380     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21384     46 52 45 51 
21388     46 52 45 51 
2138c     46 52 45 51 
21390     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21394     46 52 45 51 
21398     46 52 45 51 
2139c     46 52 45 51 
213a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213a4     46 52 45 51 
213a8     46 52 45 51 
213ac     46 52 45 51 
213b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213b4     46 52 45 51 
213b8     46 52 45 51 
213bc     46 52 45 51 
213c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213c4     46 52 45 51 
213c8     46 52 45 51 
213cc     46 52 45 51 
213d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213d4     46 52 45 51 
213d8     46 52 45 51 
213dc     46 52 45 51 
213e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213e4     46 52 45 51 
213e8     46 52 45 51 
213ec     46 52 45 51 
213f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213f4     46 52 45 51 
213f8     46 52 45 51 
213fc     46 52 45 51 
21400     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21404     46 52 45 51 
21408     46 52 45 51 
2140c     46 52 45 51 
21410     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21414     46 52 45 51 
21418     46 52 45 51 
2141c     46 52 45 51 
21420     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21424     46 52 45 51 
21428     46 52 45 51 
2142c     46 52 45 51 
21430     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21434     46 52 45 51 
21438     46 52 45 51 
2143c     46 52 45 51 
21440     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21444     46 52 45 51 
21448     46 52 45 51 
2144c     46 52 45 51 
21450     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21454     46 52 45 51 
21458     46 52 45 51 
2145c     46 52 45 51 
21460     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21464     46 52 45 51 
21468     46 52 45 51 
2146c     46 52 45 51 
21470     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21474     46 52 45 51 
21478     46 52 45 51 
2147c     46 52 45 51 
21480     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21484     46 52 45 51 
21488     46 52 45 51 
2148c     46 52 45 51 
21490     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21494     46 52 45 51 
21498     46 52 45 51 
2149c     46 52 45 51 
214a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214a4     46 52 45 51 
214a8     46 52 45 51 
214ac     46 52 45 51 
214b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214b4     46 52 45 51 
214b8     46 52 45 51 
214bc     46 52 45 51 
214c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214c4     46 52 45 51 
214c8     46 52 45 51 
214cc     46 52 45 51 
214d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214d4     46 52 45 51 
214d8     46 52 45 51 
214dc     46 52 45 51 
214e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214e4     46 52 45 51 
214e8     46 52 45 51 
214ec     46 52 45 51 
214f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214f4     46 52 45 51 
214f8     46 52 45 51 
214fc     46 52 45 51 
21500     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21504     46 52 45 51 
21508     46 52 45 51 
2150c     46 52 45 51 
21510     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21514     46 52 45 51 
21518     46 52 45 51 
2151c     46 52 45 51 
21520     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21524     46 52 45 51 
21528     46 52 45 51 
2152c     46 52 45 51 
21530     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21534     46 52 45 51 
21538     46 52 45 51 
2153c     46 52 45 51 
21540     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21544     46 52 45 51 
21548     46 52 45 51 
2154c     46 52 45 51 
21550     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21554     46 52 45 51 
21558     46 52 45 51 
2155c     46 52 45 51 
21560     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21564     46 52 45 51 
21568     46 52 45 51 
2156c     46 52 45 51 
21570     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21574     46 52 45 51 
21578     46 52 45 51 
2157c     46 52 45 51 
21580     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21584     46 52 45 51 
21588     46 52 45 51 
2158c     46 52 45 51 
21590     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21594     46 52 45 51 
21598     46 52 45 51 
2159c     46 52 45 51 
215a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215a4     46 52 45 51 
215a8     46 52 45 51 
215ac     46 52 45 51 
215b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215b4     46 52 45 51 
215b8     46 52 45 51 
215bc     46 52 45 51 
215c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215c4     46 52 45 51 
215c8     46 52 45 51 
215cc     46 52 45 51 
215d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215d4     46 52 45 51 
215d8     46 52 45 51 
215dc     46 52 45 51 
215e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215e4     46 52 45 51 
215e8     46 52 45 51 
215ec     46 52 45 51 
215f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215f4     46 52 45 51 
215f8     46 52 45 51 
215fc     46 52 45 51 
21600     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21604     46 52 45 51 
21608     46 52 45 51 
2160c     46 52 45 51 
21610     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21614     46 52 45 51 
21618     46 52 45 51 
2161c     46 52 45 51 
21620     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21624     46 52 45 51 
21628     46 52 45 51 
2162c     46 52 45 51 
21630     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21634     46 52 45 51 
21638     46 52 45 51 
2163c     46 52 45 51 
21640     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21644     46 52 45 51 
21648     46 52 45 51 
2164c     46 52 45 51 
21650     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21654     46 52 45 51 
21658     46 52 45 51 
2165c     46 52 45 51 
21660     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21664     46 52 45 51 
21668     46 52 45 51 
2166c     46 52 45 51 
21670     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21674     46 52 45 51 
21678     46 52 45 51 
2167c     46 52 45 51 
21680     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21684     46 52 45 51 
21688     46 52 45 51 
2168c     46 52 45 51 
21690     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21694     46 52 45 51 
21698     46 52 45 51 
2169c     46 52 45 51 
216a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216a4     46 52 45 51 
216a8     46 52 45 51 
216ac     46 52 45 51 
216b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216b4     46 52 45 51 
216b8     46 52 45 51 
216bc     46 52 45 51 
216c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216c4     46 52 45 51 
216c8     46 52 45 51 
216cc     46 52 45 51 
216d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216d4     46 52 45 51 
216d8     46 52 45 51 
216dc     46 52 45 51 
216e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216e4     46 52 45 51 
216e8     46 52 45 51 
216ec     46 52 45 51 
216f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216f4     46 52 45 51 
216f8     46 52 45 51 
216fc     46 52 45 51 
21700     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21704     46 52 45 51 
21708     46 52 45 51 
2170c     46 52 45 51 
21710     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21714     46 52 45 51 
21718     46 52 45 51 
2171c     46 52 45 51 
21720     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21724     46 52 45 51 
21728     46 52 45 51 
2172c     46 52 45 51 
21730     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21734     46 52 45 51 
21738     46 52 45 51 
2173c     46 52 45 51 
21740     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21744     46 52 45 51 
21748     46 52 45 51 
2174c     46 52 45 51 
21750     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21754     46 52 45 51 
21758     46 52 45 51 
2175c     46 52 45 51 
21760     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21764     46 52 45 51 
21768     46 52 45 51 
2176c     46 52 45 51 
21770     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21774     46 52 45 51 
21778     46 52 45 51 
2177c     46 52 45 51 
21780     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21784     46 52 45 51 
21788     46 52 45 51 
2178c     46 52 45 51 
21790     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21794     46 52 45 51 
21798     46 52 45 51 
2179c     46 52 45 51 
217a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217a4     46 52 45 51 
217a8     46 52 45 51 
217ac     46 52 45 51 
217b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217b4     46 52 45 51 
217b8     46 52 45 51 
217bc     46 52 45 51 
217c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217c4     46 52 45 51 
217c8     46 52 45 51 
217cc     46 52 45 51 
217d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217d4     46 52 45 51 
217d8     46 52 45 51 
217dc     46 52 45 51 
217e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217e4     46 52 45 51 
217e8     46 52 45 51 
217ec     46 52 45 51 
217f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217f4     46 52 45 51 
217f8     46 52 45 51 
217fc     46 52 45 51 
21800     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21804     46 52 45 51 
21808     46 52 45 51 
2180c     46 52 45 51 
21810     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21814     46 52 45 51 
21818     46 52 45 51 
2181c     46 52 45 51 
21820     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21824     46 52 45 51 
21828     46 52 45 51 
2182c     46 52 45 51 
21830     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21834     46 52 45 51 
21838     46 52 45 51 
2183c     46 52 45 51 
21840     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21844     46 52 45 51 
21848     46 52 45 51 
2184c     46 52 45 51 
21850     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21854     46 52 45 51 
21858     46 52 45 51 
2185c     46 52 45 51 
21860     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21864     46 52 45 51 
21868     46 52 45 51 
2186c     46 52 45 51 
21870     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21874     46 52 45 51 
21878     46 52 45 51 
2187c     46 52 45 51 
21880     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21884     46 52 45 51 
21888     46 52 45 51 
2188c     46 52 45 51 
21890     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21894     46 52 45 51 
21898     46 52 45 51 
2189c     46 52 45 51 
218a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218a4     46 52 45 51 
218a8     46 52 45 51 
218ac     46 52 45 51 
218b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218b4     46 52 45 51 
218b8     46 52 45 51 
218bc     46 52 45 51 
218c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218c4     46 52 45 51 
218c8     46 52 45 51 
218cc     46 52 45 51 
218d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218d4     46 52 45 51 
218d8     46 52 45 51 
218dc     46 52 45 51 
218e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218e4     46 52 45 51 
218e8     46 52 45 51 
218ec     46 52 45 51 
218f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218f4     46 52 45 51 
218f8     46 52 45 51 
218fc     46 52 45 51 
21900     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21904     46 52 45 51 
21908     46 52 45 51 
2190c     46 52 45 51 
21910     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21914     46 52 45 51 
21918     46 52 45 51 
2191c     46 52 45 51 
21920     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21924     46 52 45 51 
21928     46 52 45 51 
2192c     46 52 45 51 
21930     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21934     46 52 45 51 
21938     46 52 45 51 
2193c     46 52 45 51 
21940     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21944     46 52 45 51 
21948     46 52 45 51 
2194c     46 52 45 51 
21950     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21954     46 52 45 51 
21958     46 52 45 51 
2195c     46 52 45 51 
21960     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21964     46 52 45 51 
21968     46 52 45 51 
2196c     46 52 45 51 
21970     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21974     46 52 45 51 
21978     46 52 45 51 
2197c     46 52 45 51 
21980     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21984     46 52 45 51 
21988     46 52 45 51 
2198c     46 52 45 51 
21990     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21994     46 52 45 51 
21998     46 52 45 51 
2199c     46 52 45 51 
219a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219a4     46 52 45 51 
219a8     46 52 45 51 
219ac     46 52 45 51 
219b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219b4     46 52 45 51 
219b8     46 52 45 51 
219bc     46 52 45 51 
219c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219c4     46 52 45 51 
219c8     46 52 45 51 
219cc     46 52 45 51 
219d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219d4     46 52 45 51 
219d8     46 52 45 51 
219dc     46 52 45 51 
219e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219e4     46 52 45 51 
219e8     46 52 45 51 
219ec     46 52 45 51 
219f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219f4     46 52 45 51 
219f8     46 52 45 51 
219fc     46 52 45 51 
21a00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a04     46 52 45 51 
21a08     46 52 45 51 
21a0c     46 52 45 51 
21a10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a14     46 52 45 51 
21a18     46 52 45 51 
21a1c     46 52 45 51 
21a20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a24     46 52 45 51 
21a28     46 52 45 51 
21a2c     46 52 45 51 
21a30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a34     46 52 45 51 
21a38     46 52 45 51 
21a3c     46 52 45 51 
21a40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a44     46 52 45 51 
21a48     46 52 45 51 
21a4c     46 52 45 51 
21a50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a54     46 52 45 51 
21a58     46 52 45 51 
21a5c     46 52 45 51 
21a60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a64     46 52 45 51 
21a68     46 52 45 51 
21a6c     46 52 45 51 
21a70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a74     46 52 45 51 
21a78     46 52 45 51 
21a7c     46 52 45 51 
21a80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a84     46 52 45 51 
21a88     46 52 45 51 
21a8c     46 52 45 51 
21a90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a94     46 52 45 51 
21a98     46 52 45 51 
21a9c     46 52 45 51 
21aa0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21aa4     46 52 45 51 
21aa8     46 52 45 51 
21aac     46 52 45 51 
21ab0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ab4     46 52 45 51 
21ab8     46 52 45 51 
21abc     46 52 45 51 
21ac0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ac4     46 52 45 51 
21ac8     46 52 45 51 
21acc     46 52 45 51 
21ad0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ad4     46 52 45 51 
21ad8     46 52 45 51 
21adc     46 52 45 51 
21ae0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ae4     46 52 45 51 
21ae8     46 52 45 51 
21aec     46 52 45 51 
21af0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21af4     46 52 45 51 
21af8     46 52 45 51 
21afc     46 52 45 51 
21b00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b04     46 52 45 51 
21b08     46 52 45 51 
21b0c     46 52 45 51 
21b10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b14     46 52 45 51 
21b18     46 52 45 51 
21b1c     46 52 45 51 
21b20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b24     46 52 45 51 
21b28     46 52 45 51 
21b2c     46 52 45 51 
21b30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b34     46 52 45 51 
21b38     46 52 45 51 
21b3c     46 52 45 51 
21b40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b44     46 52 45 51 
21b48     46 52 45 51 
21b4c     46 52 45 51 
21b50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b54     46 52 45 51 
21b58     46 52 45 51 
21b5c     46 52 45 51 
21b60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b64     46 52 45 51 
21b68     46 52 45 51 
21b6c     46 52 45 51 
21b70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b74     46 52 45 51 
21b78     46 52 45 51 
21b7c     46 52 45 51 
21b80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b84     46 52 45 51 
21b88     46 52 45 51 
21b8c     46 52 45 51 
21b90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b94     46 52 45 51 
21b98     46 52 45 51 
21b9c     46 52 45 51 
21ba0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ba4     46 52 45 51 
21ba8     46 52 45 51 
21bac     46 52 45 51 
21bb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bb4     46 52 45 51 
21bb8     46 52 45 51 
21bbc     46 52 45 51 
21bc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bc4     46 52 45 51 
21bc8     46 52 45 51 
21bcc     46 52 45 51 
21bd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bd4     46 52 45 51 
21bd8     46 52 45 51 
21bdc     46 52 45 51 
21be0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21be4     46 52 45 51 
21be8     46 52 45 51 
21bec     46 52 45 51 
21bf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bf4     46 52 45 51 
21bf8     46 52 45 51 
21bfc     46 52 45 51 
21c00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c04     46 52 45 51 
21c08     46 52 45 51 
21c0c     46 52 45 51 
21c10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c14     46 52 45 51 
21c18     46 52 45 51 
21c1c     46 52 45 51 
21c20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c24     46 52 45 51 
21c28     46 52 45 51 
21c2c     46 52 45 51 
21c30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c34     46 52 45 51 
21c38     46 52 45 51 
21c3c     46 52 45 51 
21c40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c44     46 52 45 51 
21c48     46 52 45 51 
21c4c     46 52 45 51 
21c50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c54     46 52 45 51 
21c58     46 52 45 51 
21c5c     46 52 45 51 
21c60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c64     46 52 45 51 
21c68     46 52 45 51 
21c6c     46 52 45 51 
21c70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c74     46 52 45 51 
21c78     46 52 45 51 
21c7c     46 52 45 51 
21c80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c84     46 52 45 51 
21c88     46 52 45 51 
21c8c     46 52 45 51 
21c90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c94     46 52 45 51 
21c98     46 52 45 51 
21c9c     46 52 45 51 
21ca0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ca4     46 52 45 51 
21ca8     46 52 45 51 
21cac     46 52 45 51 
21cb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cb4     46 52 45 51 
21cb8     46 52 45 51 
21cbc     46 52 45 51 
21cc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cc4     46 52 45 51 
21cc8     46 52 45 51 
21ccc     46 52 45 51 
21cd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cd4     46 52 45 51 
21cd8     46 52 45 51 
21cdc     46 52 45 51 
21ce0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ce4     46 52 45 51 
21ce8     46 52 45 51 
21cec     46 52 45 51 
21cf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cf4     46 52 45 51 
21cf8     46 52 45 51 
21cfc     46 52 45 51 
21d00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d04     46 52 45 51 
21d08     46 52 45 51 
21d0c     46 52 45 51 
21d10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d14     46 52 45 51 
21d18     46 52 45 51 
21d1c     46 52 45 51 
21d20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d24     46 52 45 51 
21d28     46 52 45 51 
21d2c     46 52 45 51 
21d30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d34     46 52 45 51 
21d38     46 52 45 51 
21d3c     46 52 45 51 
21d40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d44     46 52 45 51 
21d48     46 52 45 51 
21d4c     46 52 45 51 
21d50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d54     46 52 45 51 
21d58     46 52 45 51 
21d5c     46 52 45 51 
21d60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d64     46 52 45 51 
21d68     46 52 45 51 
21d6c     46 52 45 51 
21d70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d74     46 52 45 51 
21d78     46 52 45 51 
21d7c     46 52 45 51 
21d80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d84     46 52 45 51 
21d88     46 52 45 51 
21d8c     46 52 45 51 
21d90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d94     46 52 45 51 
21d98     46 52 45 51 
21d9c     46 52 45 51 
21da0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21da4     46 52 45 51 
21da8     46 52 45 51 
21dac     46 52 45 51 
21db0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21db4     46 52 45 51 
21db8     46 52 45 51 
21dbc     46 52 45 51 
21dc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21dc4     46 52 45 51 
21dc8     46 52 45 51 
21dcc     46 52 45 51 
21dd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21dd4     46 52 45 51 
21dd8     46 52 45 51 
21ddc     46 52 45 51 
21de0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21de4     46 52 45 51 
21de8     46 52 45 51 
21dec     46 52 45 51 
21df0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21df4     46 52 45 51 
21df8     46 52 45 51 
21dfc     46 52 45 51 
21e00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21e04                 | 
21e04     00 00 00 00 
21e08     18 00 00 00 
21e0c     31 00 00 00 
21e10     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
21e14     61 00 00 00 
21e18     78 00 00 00 
21e1c     8D 00 00 00 
21e20     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
21e24     B4 00 00 00 
21e28     C5 00 00 00 
21e2c     D4 00 00 00 
21e30     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
21e34     EB 00 00 00 
21e38     F4 00 00 00 
21e3c     FA 00 00 00 
21e40     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
21e44     FF 00 00 00 
21e48     FD 00 00 00 
21e4c     FA 00 00 00 
21e50     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
21e54     EB 00 00 00 
21e58     E0 00 00 00 
21e5c     D4 00 00 00 
21e60     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
21e64     B4 00 00 00 
21e68     A1 00 00 00 
21e6c     8D 00 00 00 
21e70     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
21e74     61 00 00 00 
21e78     4A 00 00 00 
21e7c     31 00 00 00 
21e80     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
21e84     00 00 00 00 
21e88     E8 FF FF FF 
21e8c     CF FF FF FF 
21e90     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
21e94     9F FF FF FF 
21e98     88 FF FF FF 
21e9c     73 FF FF FF 
21ea0     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
21ea4     4C FF FF FF 
21ea8     3B FF FF FF 
21eac     2C FF FF FF 
21eb0     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
21eb4     15 FF FF FF 
21eb8     0C FF FF FF 
21ebc     06 FF FF FF 
21ec0     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
21ec4     01 FF FF FF 
21ec8     03 FF FF FF 
21ecc     06 FF FF FF 
21ed0     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
21ed4     15 FF FF FF 
21ed8     20 FF FF FF 
21edc     2C FF FF FF 
21ee0     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
21ee4     4C FF FF FF 
21ee8     5F FF FF FF 
21eec     73 FF FF FF 
21ef0     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
21ef4     9F FF FF FF 
21ef8     B6 FF FF FF 
21efc     CF FF FF FF 
21f00     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
21f04                 | 
21f04     58 03 28 03 
21f08     FA 02 D0 02 
21f0c     A6 02 80 02 
21f10     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
21f14     1A 02 FC 01 
21f18     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
21f1c     AC 01 94 01 
21f20     7D 01 68 01 
21f24     53 01 40 01 
21f28     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
21f2c     0D 01 FE 00 
21f30     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
21f34     D6 00 CA 00 
21f38     BE 00 B4 00 
21f3c     AA 00 A0 00 
21f40     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
21f44     87 00 7F 00 
21f48     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
21f4c     6B 00 22 03 
21f50     F5 02 CB 02 
21f54     A2 02 7D 02 
21f58     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
21f5c     17 02 F9 01 
21f60     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
21f64     A9 01 91 01 
21f68     7B 01 65 01 
21f6c     51 01 3E 01 
21f70     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
21f74     0C 01 FD 00 
21f78     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
21f7c     D5 00 C9 00 
21f80     BD 00 B3 00 
21f84     A9 00 9F 00 
21f88     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
21f8c     86 00 7E 00 
21f90     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
21f94     4C 03 1C 03 
21f98     F0 02 C5 02 
21f9c     9E 02 78 02 
21fa0     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
21fa4     14 02 F6 01 
21fa8     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
21fac     A6 01 8E 01 
21fb0     78 01 63 01 
21fb4     4F 01 3C 01 
21fb8     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
21fbc     0A 01 FB 00 
21fc0     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
21fc4     D3 00 C7 00 
21fc8     BC 00 B1 00 
21fcc     A7 00 9E 00 
21fd0     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
21fd4     85 00 7D 00 
21fd8     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
21fdc     46 03 17 03 
21fe0     EA 02 C0 02 
21fe4     99 02 74 02 
21fe8     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
21fec     10 02 F2 01 
21ff0     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
21ff4     A3 01 8B 01 
21ff8     75 01 60 01 
21ffc     4C 01 3A 01 
22000     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
22004     08 01 F9 00 
22008     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
2200c     D1 00 C6 00 
22010     BB 00 B0 00 
22014     A6 00 9D 00 
22018     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
2201c     84 00 7D 00 
22020     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
22024     40 03 11 03 
22028     E5 02 BB 02 
2202c     94 02 6F 02 
22030     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
22034     0C 02 EF 01 
22038     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
2203c     A0 01 88 01 
22040     72 01 5E 01 
22044     4A 01 38 01 
22048     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
2204c     06 01 F7 00 
22050     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
22054     D0 00 C4 00 
22058     B9 00 AF 00 
2205c     A5 00 9C 00 
22060     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
22064     83 00 7C 00 
22068     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
2206c     3A 03 0B 03 
22070     E0 02 B6 02 
22074     8F 02 6B 02 
22078     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
2207c     08 02 EB 01 
22080     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
22084     9D 01 86 01 
22088     70 01 5B 01 
2208c     48 01 35 01 
22090     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
22094     04 01 F5 00 
22098     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
2209c     CE 00 C3 00 
220a0     B8 00 AE 00 
220a4     A4 00 9B 00 
220a8     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
220ac     82 00 7B 00 
220b0     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
220b4     34 03 06 03 
220b8     DA 02 B1 02 
220bc     8B 02 66 02 
220c0     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
220c4     04 02 E7 01 
220c8     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
220cc     9A 01 83 01 
220d0     6D 01 59 01 
220d4     45 01 33 01 
220d8     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
220dc     02 01 F4 00 
220e0     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
220e4     CD 00 C1 00 
220e8     B7 00 AC 00 
220ec     A3 00 9A 00 
220f0     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
220f4     81 00 7A 00 
220f8     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
220fc     2E 03 00 03 
22100     D5 02 AC 02 
22104     86 02 62 02 
22108     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
2210c     01 02 E4 01 
22110     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
22114     97 01 80 01 
22118     6B 01 56 01 
2211c     43 01 31 01 
22120     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
22124     00 01 F2 00 
22128     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
2212c     CC 00 C0 00 
22130     B5 00 AB 00 
22134     A1 00 98 00 
22138     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
2213c     80 00 79 00 
22140     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
22144     8B 03 58 03 
22148     28 03 FA 02 
2214c     D0 02 A6 02 
22150     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
22154     3A 02 1A 02 
22158     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
2215c     C5 01 AC 01 
22160     94 01 7D 01 
22164     68 01 53 01 
22168     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
2216c     1D 01 0D 01 
22170     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
22174     E2 00 D6 00 
22178     CA 00 BE 00 
2217c     B4 00 AA 00 
22180     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
22184     8F 00 87 00 
22188     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
2218c     84 03 52 03 
22190     22 03 F5 02 
22194     CB 02 A3 02 
22198     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
2219c     37 02 17 02 
221a0     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
221a4     C2 01 A9 01 
221a8     91 01 7B 01 
221ac     65 01 51 01 
221b0     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
221b4     1C 01 0C 01 
221b8     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
221bc     E1 00 D4 00 
221c0     C8 00 BD 00 
221c4     B3 00 A9 00 
221c8     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
221cc     8E 00 86 00 
221d0     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
221d4     7E 03 4C 03 
221d8     1C 03 F0 02 
221dc     C5 02 9E 02 
221e0     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
221e4     33 02 14 02 
221e8     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
221ec     BF 01 A6 01 
221f0     8E 01 78 01 
221f4     63 01 4F 01 
221f8     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
221fc     1A 01 0A 01 
22200     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
22204     DF 00 D3 00 
22208     C7 00 BC 00 
2220c     B1 00 A7 00 
22210     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
22214     8D 00 85 00 
22218     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
2221c     77 03 46 03 
22220     17 03 EA 02 
22224     C0 02 99 02 
22228     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
2222c     2F 02 10 02 
22230     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
22234     BC 01 A3 01 
22238     8B 01 75 01 
2223c     60 01 4C 01 
22240     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
22244     18 01 08 01 
22248     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
2224c     DE 00 D1 00 
22250     C6 00 BB 00 
22254     B0 00 A6 00 
22258     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
2225c     8C 00 84 00 
22260     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
22264     71 03 40 03 
22268     11 03 E5 02 
2226c     BB 02 94 02 
22270     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
22274     2B 02 0C 02 
22278     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
2227c     B9 01 A0 01 
22280     88 01 72 01 
22284     5E 01 4A 01 
22288     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
2228c     16 01 06 01 
22290     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
22294     DC 00 D0 00 
22298     C4 00 B9 00 
2229c     AF 00 A5 00 
222a0     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
222a4     8B 00 83 00 
222a8     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
222ac     6B 03 3A 03 
222b0     0B 03 E0 02 
222b4     B6 02 8F 02 
222b8     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
222bc     27 02 08 02 
222c0     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
222c4     B5 01 9D 01 
222c8     86 01 70 01 
222cc     5B 01 48 01 
222d0     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
222d4     14 01 04 01 
222d8     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
222dc     DB 00 CE 00 
222e0     C3 00 B8 00 
222e4     AE 00 A4 00 
222e8     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
222ec     8A 00 82 00 
222f0     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
222f4     64 03 34 03 
222f8     06 03 DA 02 
222fc     B1 02 8B 02 
22300     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
22304     23 02 04 02 
22308     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
2230c     B2 01 9A 01 
22310     83 01 6D 01 
22314     59 01 45 01 
22318     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
2231c     12 01 02 01 
22320     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
22324     D9 00 CD 00 
22328     C1 00 B7 00 
2232c     AC 00 A3 00 
22330     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
22334     89 00 81 00 
22338     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
2233c     5E 03 2E 03 
22340     00 03 D5 02 
22344     AC 02 86 02 
22348     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
2234c     1F 02 01 02 
22350     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
22354     AF 01 97 01 
22358     80 01 6B 01 
2235c     56 01 43 01 
22360     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
22364     10 01 00 01 
22368     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
2236c     D8 00 CB 00 
22370     C0 00 B5 00 
22374     AB 00 A1 00 
22378     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
2237c     88 00 80 00 
22380     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
22384                 | 	alignl
22384                 | _audio019_spin2_dat_
22384                 | 
22384                 | audio       org     0
22384     00 F2 07 F6 | 			mov     ptrb,#0
22388     0E 7A 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
2238c     0E C8 1C FC |             wxpin   #100,#left
22390     0F 7A 05 FC |             wrpin   dac,#right
22394     0F C8 1C FC |             wxpin   #100,#right
22398     41 9C 64 FD |             dirh    #left addpins 1
2239c     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
223a0     75 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
223a4     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
223a8                 |             
223a8                 | '---------------------------------------------------------------------------------        
223a8                 | '----------------- The main loop -------------------------------------------------
223a8                 | '---------------------------------------------------------------------------------
223a8                 | 
223a8     81 04 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
223ac     10 00 90 CD |       if_c  jmp     #loop1
223b0                 |   
223b0     09 4A 05 F6 |             mov     cn,#9
223b4     81 4A 8D F9 | p402        altd    cn,#a21000000
223b8     80 00 80 F1 |             sub     0-0,a20000000
223bc     FD 4B 6D FB |             djnz    cn,#p402
223c0                 |     
223c0     00 4A 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
223c4     83 4C 01 F6 |             mov     ct,time1           ' with the lowest next sample time
223c8     84 4C 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
223cc     01 4A 05 C6 |     if_c    mov     cn,#1
223d0     85 4C 39 F3 |             fle     ct,time3 wcz
223d4     02 4A 05 C6 |     if_c    mov     cn,#2     
223d8     86 4C 39 F3 |             fle     ct,time4 wcz
223dc     03 4A 05 C6 |     if_c    mov     cn,#3
223e0     87 4C 39 F3 |             fle     ct,time5 wcz
223e4     04 4A 05 C6 |     if_c    mov     cn,#4
223e8     88 4C 39 F3 |             fle     ct,time6 wcz
223ec     05 4A 05 C6 |     if_c    mov     cn,#5
223f0     89 4C 39 F3 |             fle     ct,time7 wcz
223f4     06 4A 05 C6 |     if_c    mov     cn,#6
223f8     8A 4C 39 F3 |             fle     ct,time8 wcz
223fc     07 4A 05 C6 |     if_c    mov     cn,#7
22400                 | 
22400                 | 
22400                 | '----------------------------------------------------------------------------------
22400                 | '------------- Compute channel samples --------------------------------------------
22400                 | '----------------------------------------------------------------------------------
22400                 | 
22400                 | 
22400     A5 20 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
22404     05 20 65 F0 |             shl     channeladd,#5
22408     90 F0 03 F1 |             add     ptra,channeladd
2240c                 | 
2240c     28 0E 64 FD |             setq    #7               
22410     00 31 05 FB |             rdlong  pointer0,ptra
22414                 |             
22414     9D 46 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
22418     9D 44 31 F9 |     	    getword avol0,volpan0,#0
2241c     9E 42 39 F9 | 	        getword askip0,freqskip0,#1    	    
22420     9E 40 31 F9 | 	        getword afreq0,freqskip0,#0
22424                 | 
22424     83 4A 95 F9 |             alts    cn, #time1
22428     00 4E 01 F6 |             mov     dt0,0-0   
2242c     82 4E 81 F1 |             sub     dt0,time0
22430                 | 
22430     83 4A 8D F9 |             altd    cn, #time1
22434     A0 00 00 F1 |             add     0-0,afreq0  	
22438                 | 
22438     A1 30 01 F1 |             add     pointer0,askip0
2243c     9C 30 19 F2 |             cmp     pointer0,lend0 wcz
22440     9C 30 81 31 |     if_ge   sub     pointer0,lend0	        
22444     9B 30 01 31 |     if_ge   add     pointer0,lstart0       
22448     98 24 01 F6 |             mov     qq,pointer0
2244c     9A 24 01 F1 |             add     qq,sstart0
22450                 | 
22450     1F 34 0D F4 |             testb   sstart0,#31 wz
22454                 | 
22454     92 26 C1 5A |     if_nz   rdbyte  spl,qq
22458     08 26 65 50 |     if_nz   shl     spl,#8
2245c     92 26 E1 AA |     if_z    rdword  spl,qq
22460                 | 
22460     A2 26 31 FA |             scas    spl,avol0
22464     00 26 01 F6 |             mov     spl,0-0
22468                 |  
22468     A3 26 31 FA |             scas    spl,apan0
2246c     00 50 01 F6 |             mov     ls0,0-0
22470                 |  
22470     AD 4A 8D F9 |             altd    cn,#ls1
22474     A8 00 00 F6 |             mov     0-0,ls0
22478                 |              
22478     20 00 00 FF 
2247c     00 24 05 F6 |             mov     qq,##16384
22480     A3 24 81 F1 |             sub     qq,apan0
22484     92 26 31 FA |             scas    spl,qq
22488     00 52 01 F6 |             mov     rs0, 0-0
2248c                 | 
2248c     B5 4A 8D F9 |             altd    cn,#rs1
22490     A9 00 00 F6 |             mov     0-0,rs0
22494                 | 
22494     A9 32 29 F9 |             setword sample0,rs0,#1
22498     A8 32 21 F9 |             setword sample0,ls0,#0
2249c                 |             
2249c                 | 
2249c     1E 34 1D F4 |             bitl   sstart0, #30 wcz            
224a0     00 30 05 A6 |     if_z    mov    pointer0, #0  
224a4     02 35 65 AC |     if_z    wrlong sstart0, ptra[2]
224a8     28 02 64 FD | p403        setq #1
224ac                 |      
224ac     00 31 65 FC |             wrlong  pointer0,ptra
224b0     90 F0 83 F1 |             sub     ptra, channeladd
224b4     00 00 90 FD |             jmp     #p101
224b8                 |                        
224b8                 |             
224b8                 |           
224b8                 |             
224b8                 | '------------------------ Channels end here --------------------       
224b8                 | 
224b8                 | ' Now add all channels and put the sample to the buffer    
224b8                 | 
224b8                 | 
224b8     82 48 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
224bc     01 22 85 A1 |     if_z    sub     front,#1         ' 
224c0     FF 23 05 A5 |     if_z    and     front,#511     
224c4                 |            
224c4                 |     
224c4     00 58 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
224c8     00 56 05 F6 |             mov     ls,#0
224cc     B5 58 01 F1 |             add     rs,rs1
224d0     B6 58 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
224d4     B7 58 01 F1 |             add     rs,rs3
224d8     B8 58 01 F1 |             add     rs,rs4
224dc     B9 58 01 F1 |             add     rs,rs5
224e0     BA 58 01 F1 |             add     rs,rs6
224e4     BB 58 01 F1 |             add     rs,rs7
224e8     BC 58 01 F1 |             add     rs,rs8
224ec                 | 
224ec                 |            
224ec     AD 56 01 F1 |             add     ls,ls1
224f0     AE 56 01 F1 |             add     ls,ls2
224f4     AF 56 01 F1 |             add     ls,ls3
224f8     B0 56 01 F1 |             add     ls,ls4
224fc     B1 56 01 F1 |             add     ls,ls5
22500     B2 56 01 F1 |             add     ls,ls6
22504     B3 56 01 F1 |             add     ls,ls7
22508     B4 56 01 F1 |             add     ls,ls8
2250c                 | 
2250c                 |  		
2250c     0F 56 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
22510     0F 58 E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
22514                 | 		    
22514     AB 58 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
22518     AC 16 01 F6 |             mov newsample, rs
2251c                 | 
2251c     82 48 01 F6 |             mov     oldt0,time0      ' update global time
22520     A7 04 01 F1 |             add     time0,dt0    
22524                 | 
22524                 |             
22524                 |  
22524                 |                                      ' now push dt0 samples to the buffer
22524     00 4E 0D F2 |             cmp      dt0,#0 wz
22528     94 FE 9F AD |     if_z    jmp      #loop1
2252c     A7 18 01 F6 |             mov      t1,dt0
22530                 |   
22530     F9 1B 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
22534     01 1A 85 F1 |             sub     t2,#1
22538     FF 1B 05 F5 |             and     t2,#511
2253c     91 1A 19 F2 |             cmp     t2,front wcz
22540     EC FF 9F AD |     if_e    jmp     #p301    
22544                 |     
22544     91 16 31 FC |             wrlut   newsample, front
22548     01 22 05 F1 |             add     front,#1
2254c     FF 23 05 F5 |             and     front,#511
22550     F7 19 6D FB |             djnz    t1,#p301
22554                 |             
22554     50 FE 9F FD |             jmp     #loop            'loop
22558                 | 
22558                 | '-------------------------------------------------------------------------
22558                 | '------------------ This is the end of the main loop ---------------------
22558                 | '-------------------------------------------------------------------------
22558                 | 
22558                 | '--------------------------------------------------------------------------
22558                 | '------ Interrupt service -------------------------------------------------
22558                 | '------ Output the sample, get the next one if exists ---------------------
22558                 | '--------------------------------------------------------------------------
22558                 | 
22558     0E 28 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2255c     0F 2A 25 FC |             wypin   rsample,#right       '4
22560                 |            
22560     91 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
22564     F5 FF 3B AB |     if_e    reti1                        '8/10
22568                 | 
22568     E1 2D A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
2256c     96 2A 39 F9 |           	getword rsample,lsnext,#1    '13
22570     96 28 31 F9 |           	getword lsample,lsnext,#0    '15
22574     F5 FF 3B FB |             reti1                        '17/19 
22578                 |           
22578                 | '---------------------------------------------------------------------------
22578                 | '-------- End of interrupt -------------------------------------------------
22578                 | '---------------------------------------------------------------------------    
22578                 | 
22578                 | 
22578                 | '---------------------------------------------------------------------------
22578                 | '------- Variables ---------------------------------------------------------
22578                 | '---------------------------------------------------------------------------
22578                 | 
22578                 | ' constants
22578                 | 
22578     00 00 00 00 | hp long 0
2257c     00 00 00 00 | lp long 0
22580     00 00 00 00 | bp long 0
22584     00 00 00 10 | a20000000   long $10000000
22588     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2258c                 | 
2258c                 | ' Time variables
2258c                 | 
2258c     00 00 00 00 | time0       long 0    ' Global sample computing time
22590     01 00 00 00 | time1       long 1    ' Local channels time
22594     02 00 00 00 | time2       long 2
22598     03 00 00 00 | time3       long 3
2259c     04 00 00 00 | time4       long 4
225a0     05 00 00 00 | time5       long 5
225a4     06 00 00 00 | time6       long 6
225a8     07 00 00 00 | time7       long 7
225ac     08 00 00 00 | time8       long 8
225b0                 | 
225b0                 | 
225b0                 | 
225b0     00 00 00 00 | newsample long 0
225b4                 | '
225b4     00 00 00 00 | t1 long 0
225b8     00 00 00 00 | t2 long 0
225bc                 | '
225bc     00 00 00 00 | nrsample long 0
225c0     00 00 00 00 | nlsample long 0
225c4                 | '
225c4     00 00 00 00 | channeladd long 0
225c8                 | 
225c8                 | 
225c8     00 00 00 00 | front       long 0
225cc                 | 
225cc                 | ' temporary variables 
225cc                 | '
225cc     00 00 00 00 | qq          long 0
225d0     00 00 00 00 | spl         long 0
225d4                 | 
225d4                 | ' circular buffer in LUT
225d4                 | 
225d4                 | 
225d4                 | '
225d4                 | 
225d4                 | ' Interrupt ISR variables
225d4                 | 
225d4                 | 
225d4     00 00 00 00 | lsample     long 0
225d8     00 00 00 00 | rsample     long 0
225dc     00 00 00 00 | lsnext      long 0
225e0     00 00 00 00 | rsnext      long 0 
225e4                 | 
225e4                 | 
225e4     00 00 00 00 | pointer0    long 0
225e8     00 00 00 00 | sample0     long 0
225ec     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
225f0     00 00 00 00 | lstart0     long 0
225f4     00 00 00 00 | lend0       long 0
225f8     00 00 00 00 | volpan0     long 0
225fc     00 00 00 00 | freqskip0   long 0
22600     00 00 00 00 | dummy0      long 0
22604                 | 
22604     00 00 00 00 | afreq0      long 0
22608     00 00 00 00 | askip0      long 0
2260c     00 00 00 00 | avol0       long 0
22610     00 00 00 00 | apan0       long 0
22614                 | 
22614     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
22618     00 00 00 00 | cn          long 0
2261c     00 00 00 00 | ct          long 0
22620     00 00 00 00 | dt0         long 0
22624                 | 
22624                 | ' Samples
22624     00 00 00 00 | ls0         long 0
22628     00 00 00 00 | rs0         long 0
2262c     00 00 00 00 | channel     long 0
22630     00 00 00 00 | ls          long 0    ' Global sample variable
22634     00 00 00 00 | rs          long 0
22638                 | 
22638     00 00 00 00 | ls1         long 0    ' Channel samples
2263c     00 00 00 00 | ls2         long 0
22640     00 00 00 00 | ls3         long 0
22644     00 00 00 00 | ls4         long 0
22648     00 00 00 00 | ls5         long 0
2264c     00 00 00 00 | ls6         long 0
22650     00 00 00 00 | ls7         long 0
22654     00 00 00 00 | ls8         long 0
22658     00 00 00 00 | rs1         long 0
2265c     00 00 00 00 | rs2         long 0
22660     00 00 00 00 | rs3         long 0
22664     00 00 00 00 | rs4         long 0
22668     00 00 00 00 | rs5         long 0
2266c     00 00 00 00 | rs6         long 0
22670     00 00 00 00 | rs7         long 0
22674     00 00 00 00 | rs8         long 0
22678                 | 
22678     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2267c                 | 
2267c     00 00 00 00 
22680     00 00 00 00 | null  			long 	0,0           ' for channel reset
22684     73 32 00 04 
22688     00 00 10 00 
2268c     00 00 00 00 
22690     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
22694     00 00 C9 00 
22698     92 01 5B 02 
2269c     24 03 ED 03 
226a0     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
226a4     48 06 11 07 
226a8     D9 07 A2 08 
226ac     6A 09 33 0A 
226b0     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
226b4     8C 0C 54 0D 
226b8     1C 0E E3 0E 
226bc     AB 0F 72 10 
226c0     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
226c4     C8 12 8F 13 
226c8     55 14 1C 15 
226cc     E2 15 A8 16 
226d0     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
226d4     F9 18 BE 19 
226d8     82 1A 47 1B 
226dc     0B 1C CF 1C 
226e0     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
226e4     1A 1F DD 1F 
226e8     9F 20 61 21 
226ec     23 22 E5 22 
226f0     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
226f4     28 25 E8 25 
226f8     A8 26 67 27 
226fc     26 28 E5 28 
22700     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
22704     1F 2B DC 2B 
22708     99 2C 55 2D 
2270c     11 2E CC 2E 
22710     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
22714     FB 30 B5 31 
22718     6E 32 26 33 
2271c     DF 33 96 34 
22720     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
22724     BA 36 6F 37 
22728     24 38 D9 38 
2272c     8C 39 40 3A 
22730     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
22734     56 3C 07 3D 
22738     B8 3D 68 3E 
2273c     17 3F C5 3F 
22740     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
22744     CE 41 7A 42 
22748     25 43 D0 43 
2274c     7A 44 24 45 
22750     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
22754     1C 47 C3 47 
22758     69 48 0F 49 
2275c     B4 49 58 4A 
22760     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
22764     3F 4C E0 4C 
22768     81 4D 20 4E 
2276c     BF 4E 5D 4F 
22770     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
22774     33 51 CE 51 
22778     68 52 02 53 
2277c     9B 53 32 54 
22780     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
22784     F5 55 8A 56 
22788     1D 57 B0 57 
2278c     42 58 D3 58 
22790     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
22794     82 5A 0F 5B 
22798     9C 5B 28 5C 
2279c     B3 5C 3E 5D 
227a0     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
227a4     D7 5E 5D 5F 
227a8     E3 5F 68 60 
227ac     EB 60 6E 61 
227b0     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
227b4     F1 62 70 63 
227b8     EE 63 6C 64 
227bc     E8 64 63 65 
227c0     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
227c4     CF 66 46 67 
227c8     BC 67 32 68 
227cc     A6 68 19 69 
227d0     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
227d4     6D 6A DC 6A 
227d8     4A 6B B7 6B 
227dc     23 6C 8E 6C 
227e0     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
227e4     C9 6D 30 6E 
227e8     96 6E FB 6E 
227ec     5E 6F C1 6F 
227f0     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
227f4     E2 70 40 71 
227f8     9D 71 F9 71 
227fc     54 72 AE 72 
22800     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
22804     B5 73 0A 74 
22808     5F 74 B2 74 
2280c     04 75 55 75 
22810     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
22814     41 76 8D 76 
22818     D8 76 22 77 
2281c     6B 77 B3 77 
22820     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
22824     84 78 C7 78 
22828     09 79 4A 79 
2282c     89 79 C8 79 
22830     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
22834     7C 7A B6 7A 
22838     EE 7A 26 7B 
2283c     5C 7B 91 7B 
22840     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
22844     29 7C 59 7C 
22848     88 7C B6 7C 
2284c     E3 7C 0E 7D 
22850     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
22854     89 7D B0 7D 
22858     D5 7D FA 7D 
2285c     1D 7E 3E 7E 
22860     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
22864     9C 7E B9 7E 
22868     D5 7E EF 7E 
2286c     09 7F 21 7F 
22870     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
22874     61 7F 74 7F 
22878     86 7F 97 7F 
2287c     A6 7F B4 7F 
22880     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
22884     D8 7F E1 7F 
22888     E9 7F F0 7F 
2288c     F5 7F F9 7F 
22890     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
22894     FF 7F FE 7F 
22898     FD 7F F9 7F 
2289c     F5 7F F0 7F 
228a0     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
228a4     D8 7F CD 7F 
228a8     C1 7F B4 7F 
228ac     A6 7F 97 7F 
228b0     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
228b4     61 7F 4D 7F 
228b8     37 7F 21 7F 
228bc     09 7F EF 7E 
228c0     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
228c4     9C 7E 7E 7E 
228c8     5F 7E 3E 7E 
228cc     1D 7E FA 7D 
228d0     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
228d4     89 7D 62 7D 
228d8     39 7D 0E 7D 
228dc     E3 7C B6 7C 
228e0     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
228e4     29 7C F8 7B 
228e8     C5 7B 91 7B 
228ec     5C 7B 26 7B 
228f0     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
228f4     7C 7A 41 7A 
228f8     05 7A C8 79 
228fc     89 79 4A 79 
22900     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
22904     84 78 3F 78 
22908     FA 77 B3 77 
2290c     6B 77 22 77 
22910     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
22914     41 76 F3 75 
22918     A5 75 55 75 
2291c     04 75 B2 74 
22920     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
22924     B5 73 5E 73 
22928     07 73 AE 72 
2292c     54 72 F9 71 
22930     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
22934     E2 70 83 70 
22938     22 70 C1 6F 
2293c     5E 6F FB 6E 
22940     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
22944     C9 6D 61 6D 
22948     F8 6C 8E 6C 
2294c     23 6C B7 6B 
22950     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
22954     6D 6A FD 69 
22958     8B 69 19 69 
2295c     A6 68 32 68 
22960     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
22964     CF 66 56 66 
22968     DD 65 63 65 
2296c     E8 64 6C 64 
22970     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
22974     F1 62 71 62 
22978     F0 61 6E 61 
2297c     EB 60 68 60 
22980     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
22984     D7 5E 4F 5E 
22988     C7 5D 3E 5D 
2298c     B3 5C 28 5C 
22990     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
22994     82 5A F3 59 
22998     64 59 D3 58 
2299c     42 58 B0 57 
229a0     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
229a4     F5 55 60 55 
229a8     C9 54 32 54 
229ac     9B 53 02 53 
229b0     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
229b4     33 51 97 50 
229b8     FB 4F 5D 4F 
229bc     BF 4E 20 4E 
229c0     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
229c4     3F 4C 9D 4B 
229c8     FB 4A 58 4A 
229cc     B4 49 0F 49 
229d0     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
229d4     1C 47 75 46 
229d8     CD 45 24 45 
229dc     7A 44 D0 43 
229e0     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
229e4     CE 41 21 41 
229e8     73 40 C5 3F 
229ec     17 3F 68 3E 
229f0     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
229f4     56 3C A5 3B 
229f8     F2 3A 40 3A 
229fc     8C 39 D9 38 
22a00     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
22a04     BA 36 04 36 
22a08     4D 35 96 34 
22a0c     DF 33 26 33 
22a10     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
22a14     FB 30 41 30 
22a18     87 2F CC 2E 
22a1c     11 2E 55 2D 
22a20     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
22a24     1F 2B 61 2A 
22a28     A3 29 E5 28 
22a2c     26 28 67 27 
22a30     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
22a34     28 25 67 24 
22a38     A6 23 E5 22 
22a3c     23 22 61 21 
22a40     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
22a44     1A 1F 57 1E 
22a48     93 1D CF 1C 
22a4c     0B 1C 47 1B 
22a50     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
22a54     F9 18 33 18 
22a58     6E 17 A8 16 
22a5c     E2 15 1C 15 
22a60     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
22a64     C8 12 01 12 
22a68     3A 11 72 10 
22a6c     AB 0F E3 0E 
22a70     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
22a74     8C 0C C4 0B 
22a78     FB 0A 33 0A 
22a7c     6A 09 A2 08 
22a80     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
22a84     48 06 7F 05 
22a88     B6 04 ED 03 
22a8c     24 03 5B 02 
22a90     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
22a94     00 00 37 FF 
22a98     6E FE A5 FD 
22a9c     DC FC 13 FC 
22aa0     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
22aa4     B8 F9 EF F8 
22aa8     27 F8 5E F7 
22aac     96 F6 CD F5 
22ab0     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
22ab4     74 F3 AC F2 
22ab8     E4 F1 1D F1 
22abc     55 F0 8E EF 
22ac0     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
22ac4     38 ED 71 EC 
22ac8     AB EB E4 EA 
22acc     1E EA 58 E9 
22ad0     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
22ad4     07 E7 42 E6 
22ad8     7E E5 B9 E4 
22adc     F5 E3 31 E3 
22ae0     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
22ae4     E6 E0 23 E0 
22ae8     61 DF 9F DE 
22aec     DD DD 1B DD 
22af0     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
22af4     D8 DA 18 DA 
22af8     58 D9 99 D8 
22afc     DA D7 1B D7 
22b00     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
22b04     E1 D4 24 D4 
22b08     67 D3 AB D2 
22b0c     EF D1 34 D1 
22b10     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
22b14     05 CF 4B CE 
22b18     92 CD DA CC 
22b1c     21 CC 6A CB 
22b20     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
22b24     46 C9 91 C8 
22b28     DC C7 27 C7 
22b2c     74 C6 C0 C5 
22b30     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
22b34     AA C3 F9 C2 
22b38     48 C2 98 C1 
22b3c     E9 C0 3B C0 
22b40     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
22b44     32 BE 86 BD 
22b48     DB BC 30 BC 
22b4c     86 BB DC BA 
22b50     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
22b54     E4 B8 3D B8 
22b58     97 B7 F1 B6 
22b5c     4C B6 A8 B5 
22b60     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
22b64     C1 B3 20 B3 
22b68     7F B2 E0 B1 
22b6c     41 B1 A3 B0 
22b70     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
22b74     CD AE 32 AE 
22b78     98 AD FE AC 
22b7c     65 AC CE AB 
22b80     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
22b84     0B AA 76 A9 
22b88     E3 A8 50 A8 
22b8c     BE A7 2D A7 
22b90     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
22b94     7E A5 F1 A4 
22b98     64 A4 D8 A3 
22b9c     4D A3 C2 A2 
22ba0     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
22ba4     29 A1 A3 A0 
22ba8     1D A0 98 9F 
22bac     15 9F 92 9E 
22bb0     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
22bb4     0F 9D 90 9C 
22bb8     12 9C 94 9B 
22bbc     18 9B 9D 9A 
22bc0     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
22bc4     31 99 BA 98 
22bc8     44 98 CE 97 
22bcc     5A 97 E7 96 
22bd0     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
22bd4     93 95 24 95 
22bd8     B6 94 49 94 
22bdc     DD 93 72 93 
22be0     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
22be4     37 92 D0 91 
22be8     6A 91 05 91 
22bec     A2 90 3F 90 
22bf0     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
22bf4     1E 8F C0 8E 
22bf8     63 8E 07 8E 
22bfc     AC 8D 52 8D 
22c00     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
22c04     4B 8C F6 8B 
22c08     A1 8B 4E 8B 
22c0c     FC 8A AB 8A 
22c10     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
22c14     BF 89 73 89 
22c18     28 89 DE 88 
22c1c     95 88 4D 88 
22c20     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
22c24     7C 87 39 87 
22c28     F7 86 B6 86 
22c2c     77 86 38 86 
22c30     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
22c34     84 85 4A 85 
22c38     12 85 DA 84 
22c3c     A4 84 6F 84 
22c40     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
22c44     D7 83 A7 83 
22c48     78 83 4A 83 
22c4c     1D 83 F2 82 
22c50     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
22c54     77 82 50 82 
22c58     2B 82 06 82 
22c5c     E3 81 C2 81 
22c60     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
22c64     64 81 47 81 
22c68     2B 81 11 81 
22c6c     F7 80 DF 80 
22c70     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
22c74     9F 80 8C 80 
22c78     7A 80 69 80 
22c7c     5A 80 4C 80 
22c80     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
22c84     28 80 1F 80 
22c88     17 80 10 80 
22c8c     0B 80 07 80 
22c90     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
22c94     01 80 02 80 
22c98     03 80 07 80 
22c9c     0B 80 10 80 
22ca0     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
22ca4     28 80 33 80 
22ca8     3F 80 4C 80 
22cac     5A 80 69 80 
22cb0     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
22cb4     9F 80 B3 80 
22cb8     C9 80 DF 80 
22cbc     F7 80 11 81 
22cc0     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
22cc4     64 81 82 81 
22cc8     A1 81 C2 81 
22ccc     E3 81 06 82 
22cd0     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
22cd4     77 82 9E 82 
22cd8     C7 82 F2 82 
22cdc     1D 83 4A 83 
22ce0     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
22ce4     D7 83 08 84 
22ce8     3B 84 6F 84 
22cec     A4 84 DA 84 
22cf0     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
22cf4     84 85 BF 85 
22cf8     FB 85 38 86 
22cfc     77 86 B6 86 
22d00     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
22d04     7C 87 C1 87 
22d08     06 88 4D 88 
22d0c     95 88 DE 88 
22d10     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
22d14     BF 89 0D 8A 
22d18     5B 8A AB 8A 
22d1c     FC 8A 4E 8B 
22d20     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
22d24     4B 8C A2 8C 
22d28     F9 8C 52 8D 
22d2c     AC 8D 07 8E 
22d30     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
22d34     1E 8F 7D 8F 
22d38     DE 8F 3F 90 
22d3c     A2 90 05 91 
22d40     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
22d44     37 92 9F 92 
22d48     08 93 72 93 
22d4c     DD 93 49 94 
22d50     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
22d54     93 95 03 96 
22d58     75 96 E7 96 
22d5c     5A 97 CE 97 
22d60     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
22d64     31 99 AA 99 
22d68     23 9A 9D 9A 
22d6c     18 9B 94 9B 
22d70     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
22d74     0F 9D 8F 9D 
22d78     10 9E 92 9E 
22d7c     15 9F 98 9F 
22d80     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
22d84     29 A1 B1 A1 
22d88     39 A2 C2 A2 
22d8c     4D A3 D8 A3 
22d90     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
22d94     7E A5 0D A6 
22d98     9C A6 2D A7 
22d9c     BE A7 50 A8 
22da0     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
22da4     0B AA A0 AA 
22da8     37 AB CE AB 
22dac     65 AC FE AC 
22db0     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
22db4     CD AE 69 AF 
22db8     05 B0 A3 B0 
22dbc     41 B1 E0 B1 
22dc0     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
22dc4     C1 B3 63 B4 
22dc8     05 B5 A8 B5 
22dcc     4C B6 F1 B6 
22dd0     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
22dd4     E4 B8 8B B9 
22dd8     33 BA DC BA 
22ddc     86 BB 30 BC 
22de0     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
22de4     32 BE DF BE 
22de8     8D BF 3B C0 
22dec     E9 C0 98 C1 
22df0     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
22df4     AA C3 5B C4 
22df8     0E C5 C0 C5 
22dfc     74 C6 27 C7 
22e00     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
22e04     46 C9 FC C9 
22e08     B3 CA 6A CB 
22e0c     21 CC DA CC 
22e10     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
22e14     05 CF BF CF 
22e18     79 D0 34 D1 
22e1c     EF D1 AB D2 
22e20     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
22e24     E1 D4 9F D5 
22e28     5D D6 1B D7 
22e2c     DA D7 99 D8 
22e30     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
22e34     D8 DA 99 DB 
22e38     5A DC 1B DD 
22e3c     DD DD 9F DE 
22e40     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
22e44     E6 E0 A9 E1 
22e48     6D E2 31 E3 
22e4c     F5 E3 B9 E4 
22e50     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
22e54     07 E7 CD E7 
22e58     92 E8 58 E9 
22e5c     1E EA E4 EA 
22e60     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
22e64     38 ED FF ED 
22e68     C6 EE 8E EF 
22e6c     55 F0 1D F1 
22e70     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
22e74     74 F3 3C F4 
22e78     05 F5 CD F5 
22e7c     96 F6 5E F7 
22e80     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
22e84     B8 F9 81 FA 
22e88     4A FB 13 FC 
22e8c     DC FC A5 FD 
22e90     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
22e94                 | 	alignl
22e94                 | __system__dat_
22e94     00 00 00 00 
22e98     00 00 00 00 | 	byte	$00[8]
22e9c     03 00 00 00 
22ea0     00 00 00 00 
22ea4     00 00 00 00 
22ea8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
22eac     00 00 00 00 
22eb0     00 00 00 00 
22eb4     00 00 00 00 
22eb8     00 00 00 00 
22ebc     00 00 00 00 | 	byte	$00[20]
22ec0     05 00 00 00 
22ec4     00 00 00 00 
22ec8     00 00 00 00 
22ecc     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
22ed0     98 30 02 00 | 	long	@@@__system__dat_ + 516
22ed4     A0 30 02 00 | 	long	@@@__system__dat_ + 524
22ed8     00 00 00 00 | 	byte	$00, $00, $00, $00
22edc     A8 30 02 00 | 	long	@@@__system__dat_ + 532
22ee0     B0 30 02 00 | 	long	@@@__system__dat_ + 540
22ee4     00 00 00 00 
22ee8     00 00 00 00 | 	byte	$00[8]
22eec     01 00 00 00 
22ef0     06 00 00 00 
22ef4     00 00 00 00 
22ef8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
22efc     00 00 00 00 | 	byte	$00, $00, $00, $00
22f00     B8 30 02 00 | 	long	@@@__system__dat_ + 548
22f04     C0 30 02 00 | 	long	@@@__system__dat_ + 556
22f08     00 00 00 00 | 	byte	$00, $00, $00, $00
22f0c     C8 30 02 00 | 	long	@@@__system__dat_ + 564
22f10     D0 30 02 00 | 	long	@@@__system__dat_ + 572
22f14     00 00 00 00 
22f18     00 00 00 00 | 	byte	$00[8]
22f1c     01 00 00 00 
22f20     06 00 00 00 
22f24     00 00 00 00 
22f28     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
22f2c     00 00 00 00 | 	byte	$00, $00, $00, $00
22f30     D8 30 02 00 | 	long	@@@__system__dat_ + 580
22f34     E0 30 02 00 | 	long	@@@__system__dat_ + 588
22f38     00 00 00 00 | 	byte	$00, $00, $00, $00
22f3c     E8 30 02 00 | 	long	@@@__system__dat_ + 596
22f40     F0 30 02 00 | 	long	@@@__system__dat_ + 604
22f44     00 00 00 00 
      ...             
23094     00 00 00 00 
23098     00 00 00 00 | 	byte	$00[344]
2309c     F4 6F 00 00 | 	long	@@@__system___tx
230a0     00 00 00 00 | 	byte	$00, $00, $00, $00
230a4     3C 70 00 00 | 	long	@@@__system___rx
230a8     00 00 00 00 | 	byte	$00, $00, $00, $00
230ac     B8 8A 00 00 | 	long	@@@__system___rxtxioctl_0179
230b0     00 00 00 00 | 	byte	$00, $00, $00, $00
230b4     28 8B 00 00 | 	long	@@@__system____dummy_flush_0180
230b8     00 00 00 00 | 	byte	$00, $00, $00, $00
230bc     F4 6F 00 00 | 	long	@@@__system___tx
230c0     00 00 00 00 | 	byte	$00, $00, $00, $00
230c4     3C 70 00 00 | 	long	@@@__system___rx
230c8     00 00 00 00 | 	byte	$00, $00, $00, $00
230cc     B8 8A 00 00 | 	long	@@@__system___rxtxioctl_0179
230d0     00 00 00 00 | 	byte	$00, $00, $00, $00
230d4     28 8B 00 00 | 	long	@@@__system____dummy_flush_0180
230d8     00 00 00 00 | 	byte	$00, $00, $00, $00
230dc     F4 6F 00 00 | 	long	@@@__system___tx
230e0     00 00 00 00 | 	byte	$00, $00, $00, $00
230e4     3C 70 00 00 | 	long	@@@__system___rx
230e8     00 00 00 00 | 	byte	$00, $00, $00, $00
230ec     B8 8A 00 00 | 	long	@@@__system___rxtxioctl_0179
230f0     00 00 00 00 | 	byte	$00, $00, $00, $00
230f4     28 8B 00 00 | 	long	@@@__system____dummy_flush_0180
230f8                 | __heap_base
230f8     00 00 00 00 
      ...             
240f8     00 00 00 00 
240fc     00 00 00 00 | 	long	0[1026]
24100                 | objmem
24100     00 00 00 00 
      ...             
2540c     00 00 00 00 
25410     00 00 00 00 | 	long	0[1221]
25414                 | stackspace
25414     00 00 00 00 | 	long	0[1]
25418 10f             | 	org	COG_BSS_START
25418 10f             | _var01
25418 10f             | 	res	1
25418 110             | _var02
25418 110             | 	res	1
25418 111             | _var03
25418 111             | 	res	1
25418 112             | _var04
25418 112             | 	res	1
25418 113             | _var05
25418 113             | 	res	1
25418 114             | _var06
25418 114             | 	res	1
25418 115             | _var07
25418 115             | 	res	1
25418 116             | _var08
25418 116             | 	res	1
25418 117             | _var09
25418 117             | 	res	1
25418 118             | _var10
25418 118             | 	res	1
25418 119             | _var11
25418 119             | 	res	1
25418 11a             | _var12
25418 11a             | 	res	1
25418 11b             | _var13
25418 11b             | 	res	1
25418 11c             | _var14
25418 11c             | 	res	1
25418 11d             | _var15
25418 11d             | 	res	1
25418 11e             | _var16
25418 11e             | 	res	1
25418 11f             | _var17
25418 11f             | 	res	1
25418 120             | _var18
25418 120             | 	res	1
25418 121             | _var19
25418 121             | 	res	1
25418 122             | _var20
25418 122             | 	res	1
25418 123             | _var21
25418 123             | 	res	1
25418 124             | _var22
25418 124             | 	res	1
25418 125             | _var23
25418 125             | 	res	1
25418 126             | _var24
25418 126             | 	res	1
25418 127             | _var25
25418 127             | 	res	1
25418 128             | _var26
25418 128             | 	res	1
25418 129             | _var27
25418 129             | 	res	1
25418 12a             | _var28
25418 12a             | 	res	1
25418 12b             | _var29
25418 12b             | 	res	1
25418 12c             | _var30
25418 12c             | 	res	1
25418 12d             | _var31
25418 12d             | 	res	1
25418 12e             | _var32
25418 12e             | 	res	1
25418 12f             | arg01
25418 12f             | 	res	1
25418 130             | arg02
25418 130             | 	res	1
25418 131             | arg03
25418 131             | 	res	1
25418 132             | arg04
25418 132             | 	res	1
25418 133             | arg05
25418 133             | 	res	1
25418 134             | arg06
25418 134             | 	res	1
25418 135             | arg07
25418 135             | 	res	1
25418 136             | local01
25418 136             | 	res	1
25418 137             | local02
25418 137             | 	res	1
25418 138             | local03
25418 138             | 	res	1
25418 139             | local04
25418 139             | 	res	1
25418 13a             | local05
25418 13a             | 	res	1
25418 13b             | local06
25418 13b             | 	res	1
25418 13c             | local07
25418 13c             | 	res	1
25418 13d             | local08
25418 13d             | 	res	1
25418 13e             | local09
25418 13e             | 	res	1
25418 13f             | local10
25418 13f             | 	res	1
25418 140             | local11
25418 140             | 	res	1
25418 141             | local12
25418 141             | 	res	1
25418 142             | local13
25418 142             | 	res	1
25418 143             | local14
25418 143             | 	res	1
25418 144             | local15
25418 144             | 	res	1
25418 145             | local16
25418 145             | 	res	1
25418 146             | local17
25418 146             | 	res	1
25418 147             | local18
25418 147             | 	res	1
25418 148             | local19
25418 148             | 	res	1
25418 149             | local20
25418 149             | 	res	1
25418 14a             | local21
25418 14a             | 	res	1
25418 14b             | local22
25418 14b             | 	res	1
25418 14c             | muldiva_
25418 14c             | 	res	1
25418 14d             | muldivb_
25418 14d             | 	res	1
25418 14e             | 	fit	480
25418 14e             | 
