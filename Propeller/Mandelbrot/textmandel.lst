00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/textmandel.p2asm"
00000                 | con
00000                 | 	_clkfreq = 320000000
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 1E 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 06 F1 03 F6 | 	mov	ptra, objptr
00410 003 3C F1 07 F1 | 	add	ptra, #316
00414 004 14 EC 0F FB | 	rdlong	pa, #20 wz
00418 005 E8 01 90 5D |  if_ne	jmp	#skip_clock_set_
0041c 006 00 00 64 FD | 	hubset	#0
00420 007 07 80 80 FF 
00424 008 00 F0 67 FD | 	hubset	##16781304
00428 009 86 01 80 FF 
0042c 00a 1F 80 66 FD | 	waitx	##200000
00430 00b 07 80 00 FF 
00434 00c FB ED 07 F6 | 	mov	pa, ##16781307
00438 00d 00 EC 63 FD | 	hubset	pa
0043c 00e 18 EC 67 FC | 	wrlong	pa, #24
00440 00f 68 89 89 FF 
00444 010 14 00 6C FC | 	wrlong	##320000000, #20
00448 011 B8 01 90 FD | 	jmp	#skip_clock_set_
0044c 012 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 4C 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 44 62 FD | 	cogid	arg01
00614 084 03 44 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0D 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 1F 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 45 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 47 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 49 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 4B 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 1E 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 48 56 F0 |         shr	arg03, #1 wc
00688 0a1 22 47 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 44 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 46 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 48 56 F0 |         shr	arg03, #1 wc
00698 0a5 22 47 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 44 06 C1 |  if_c   add	arg01, #2
006a0 0a7 23 47 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 22 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 48 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 24 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 46 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 4D 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 4D 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 77 ED 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 EE 62 FD |        getqx   muldivb_
00740 0cf 19 EC 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 76 ED 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0A 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 77 EF 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0A 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0A D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 76 ED 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0A D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 77 EF 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 1E 06 F6 |     mov result1, #0
00778 0dd 00 20 06 F6 |     mov result2, #0
0077c 0de 22 07 02 F6 |     mov abortchain, arg01
00780 0df 22 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 44 06 F1 |     add arg01, #4
00788 0e1 22 F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 44 06 F1 |     add arg01, #4
00790 0e3 22 0D 62 FC |     wrlong objptr, arg01
00794 0e4 04 44 06 F1 |     add arg01, #4
00798 0e5 22 B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 23 45 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 22 F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 44 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 44 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 23 1F 02 F6 |     mov result1, arg02
007d4 0f4 01 20 06 F6 |     mov result2, #1
007d8 0f5 22 47 02 FB |     rdlong arg02, arg01
007dc 0f6 04 44 06 F1 |     add arg01, #4
007e0 0f7 22 F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 44 06 F1 |     add arg01, #4
007e8 0f9 22 0D 02 FB |     rdlong objptr, arg01
007ec 0fa 04 44 06 F1 |     add arg01, #4
007f0 0fb 22 B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 44 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 48 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 AC 6B 00 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | itmp1_
00814 104 00 00 00 00 | 	long	0
00818 105             | itmp2_
00818 105 00 00 00 00 | 	long	0
0081c 106             | objptr
0081c 106 B4 7B 00 00 | 	long	@objmem
00820 107             | ptr___struct___bas_wrap_sender_tx_
00820 107 5C 44 00 00 | 	long	@__struct___bas_wrap_sender_tx
00824 108             | ptr___system__dat__
00824 108 4C 69 00 00 | 	long	@__system__dat_
00828 109             | ptr__hng030rm_spin2_dat__
00828 109 E8 44 00 00 | 	long	@_hng030rm_spin2_dat_
0082c 10a             | ptr__hng030rm_spin2_putchar_
0082c 10a 0C 12 00 00 | 	long	@_hng030rm_spin2_putchar
00830 10b             | ptr__hng030rm_spin2_putpixel1_
00830 10b CC 0E 00 00 | 	long	@_hng030rm_spin2_putpixel1
00834 10c             | ptr__hng030rm_spin2_putpixel2_
00834 10c B4 0F 00 00 | 	long	@_hng030rm_spin2_putpixel2
00838 10d             | ptr__hng030rm_spin2_putpixel4_
00838 10d 8C 10 00 00 | 	long	@_hng030rm_spin2_putpixel4
0083c 10e             | ptr__hng030rm_spin2_putpixel8_
0083c 10e 64 11 00 00 | 	long	@_hng030rm_spin2_putpixel8
00840 10f             | result1
00840 10f 00 00 00 00 | 	long	0
00844 110             | result2
00844 110 00 00 00 00 | 	long	0
00848 111             | result3
00848 111 00 00 00 00 | 	long	0
0084c 112             | COG_BSS_START
0084c 112             | 	fit	480
0084c                 | 	orgh
0084c                 | hubentry
0084c                 | 
0084c                 | _program
0084c     1B 5A 05 F6 | 	mov	COUNT_, #27
00850     B0 00 A0 FD | 	call	#pushregs_
00854     01 00 00 FF 
00858     30 4C 06 F6 | 	mov	local01, ##560
0085c     2C 0C 06 F1 | 	add	objptr, #44
00860     06 4F 02 F6 | 	mov	local02, objptr
00864                 | ' 
00864                 | ' ' initialize pointers and variables
00864                 | ' 
00864                 | ' border_ptr:=@bordercolor
00864     24 0C 86 F1 | 	sub	objptr, #36
00868     06 4F 62 FC | 	wrlong	local02, objptr
0086c     08 00 00 FF 
00870     00 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
00874                 | ' font_ptr:=@st_font
00874     04 0C 86 F1 | 	sub	objptr, #4
00878     06 13 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
0087c                 | ' hdmibase:=base
0087c     20 0C 06 F1 | 	add	objptr, #32
00880     06 01 68 FC | 	wrlong	#0, objptr
00884     24 0C 86 F1 | 	sub	objptr, #36
00888     0B 47 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
0088c                 | ' p1:=@putpixel1
0088c     06 45 02 F6 | 	mov	arg01, objptr
00890     08 00 00 FF 
00894     00 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00898     AC 18 B0 FD | 	call	#__system___make_methodptr
0089c     0F 51 02 F6 | 	mov	local03, result1
008a0     DC 0C 06 F1 | 	add	objptr, #220
008a4     06 51 62 FC | 	wrlong	local03, objptr
008a8     DC 0C 86 F1 | 	sub	objptr, #220
008ac     0C 47 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
008b0                 | ' p2:=@putpixel2
008b0     06 45 02 F6 | 	mov	arg01, objptr
008b4     90 18 B0 FD | 	call	#__system___make_methodptr
008b8     0F 51 02 F6 | 	mov	local03, result1
008bc     E0 0C 06 F1 | 	add	objptr, #224
008c0     06 51 62 FC | 	wrlong	local03, objptr
008c4     E0 0C 86 F1 | 	sub	objptr, #224
008c8     0D 47 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
008cc                 | ' p4:=@putpixel4
008cc     06 45 02 F6 | 	mov	arg01, objptr
008d0     74 18 B0 FD | 	call	#__system___make_methodptr
008d4     0F 51 02 F6 | 	mov	local03, result1
008d8     E4 0C 06 F1 | 	add	objptr, #228
008dc     06 51 62 FC | 	wrlong	local03, objptr
008e0     E4 0C 86 F1 | 	sub	objptr, #228
008e4     0E 47 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
008e8                 | ' p8:=@putpixel8
008e8     06 45 02 F6 | 	mov	arg01, objptr
008ec     58 18 B0 FD | 	call	#__system___make_methodptr
008f0     0F 51 02 F6 | 	mov	local03, result1
008f4     E8 0C 06 F1 | 	add	objptr, #232
008f8     06 51 62 FC | 	wrlong	local03, objptr
008fc     E8 0C 86 F1 | 	sub	objptr, #232
00900                 | ' 
00900                 | ' 
00900                 | ' ' the mode has to be set here to enable computing the buffer length
00900                 | ' 
00900                 | ' setmode(mode)
00900     01 00 00 FF 
00904     30 44 06 F6 | 	mov	arg01, ##560
00908     58 0B B0 FD | 	call	#_hng030rm_spin2_setmode
0090c     40 0C 06 F1 | 	add	objptr, #64
00910     06 53 02 F6 | 	mov	local04, objptr
00914                 | ' 
00914                 | ' vblank_ptr:=@vblank
00914     34 0C 86 F1 | 	sub	objptr, #52
00918     06 53 62 FC | 	wrlong	local04, objptr
0091c     28 0C 06 F1 | 	add	objptr, #40
00920     06 55 02 F6 | 	mov	local05, objptr
00924                 | ' cursor_ptr:=@cursor_x
00924     24 0C 86 F1 | 	sub	objptr, #36
00928     06 55 62 FC | 	wrlong	local05, objptr
0092c     88 0C 06 F1 | 	add	objptr, #136
00930     06 57 02 F6 | 	mov	local06, objptr
00934                 | ' 
00934                 | ' fontnum_ptr:=@fontnum
00934     78 0C 86 F1 | 	sub	objptr, #120
00938     06 57 62 FC | 	wrlong	local06, objptr
0093c                 | ' 
0093c                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
0093c     78 0C 06 F1 | 	add	objptr, #120
00940     06 01 68 FC | 	wrlong	#0, objptr
00944     1C 0C 06 F1 | 	add	objptr, #28
00948     06 45 02 F6 | 	mov	arg01, objptr
0094c     B4 0C 86 F1 | 	sub	objptr, #180
00950     0F 00 00 FF 
00954     58 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
00958     09 47 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
0095c     0F 00 00 FF 
00960     58 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
00964                 | ' bytemove(@colors,@vgacolors,16)
00964     10 48 06 F6 | 	mov	arg03, #16
00968     B4 16 B0 FD | 	call	#__system____builtin_memmove
0096c                 | ' 
0096c                 | ' ' initialize a cursor
0096c                 | ' 
0096c                 | ' cursor_x:=0
0096c     34 0C 06 F1 | 	add	objptr, #52
00970     06 01 48 FC | 	wrbyte	#0, objptr
00974                 | ' cursor_y:=0
00974     01 0C 06 F1 | 	add	objptr, #1
00978     06 01 48 FC | 	wrbyte	#0, objptr
0097c                 | ' cursor_sh:=14
0097c     01 0C 06 F1 | 	add	objptr, #1
00980     06 1D 48 FC | 	wrbyte	#14, objptr
00984     36 0C 86 F1 | 	sub	objptr, #54
00988                 | ' 
00988                 | ' 
00988                 | ' ' start the cog
00988                 | ' 
00988                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00988     0F 00 00 FF 
0098c     68 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00990     09 47 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00994     0F 00 00 FF 
00998     68 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
0099c     06 49 02 F6 | 	mov	arg03, objptr
009a0     10 44 06 F6 | 	mov	arg01, #16
009a4     28 48 62 FD | 	setq	arg03
009a8     23 45 F2 FC | 	coginit	arg01, arg02 wc
009ac     01 44 66 C6 |  if_b	neg	arg01, #1
009b0     22 1F 02 F6 | 	mov	result1, arg01
009b4     0F 59 02 F6 | 	mov	local07, result1
009b8     28 0C 06 F1 | 	add	objptr, #40
009bc     06 59 62 FC | 	wrlong	local07, objptr
009c0     28 0C 86 F1 | 	sub	objptr, #40
009c4                 | ' waitms(20)
009c4     14 44 06 F6 | 	mov	arg01, #20
009c8     B8 18 B0 FD | 	call	#__system___waitms
009cc                 | ' 
009cc                 | ' ' clear the screen and set the colors to green on black
009cc                 | ' 
009cc                 | ' cls(c_green,c_black)
009cc                 | ' 
009cc                 | ' if (graphmode<512)
009cc     C4 0C 06 F1 | 	add	objptr, #196
009d0     06 5B 02 FB | 	rdlong	local08, objptr
009d4     C4 0C 86 F1 | 	sub	objptr, #196
009d8     01 00 00 FF 
009dc     00 5A 5E F2 | 	cmps	local08, ##512 wcz
009e0     28 00 90 3D |  if_ae	jmp	#LR__0001
009e4     FF 7F 1C FF 
009e8     E0 5D 66 F6 | 	neg	local09, ##956301280
009ec                 | '   c:=fc<<24+bc<<16+$20
009ec                 | '   longfill(buf_ptr,c,buflen)
009ec     06 45 02 FB | 	rdlong	arg01, objptr
009f0     30 0C 06 F1 | 	add	objptr, #48
009f4     06 49 02 FB | 	rdlong	arg03, objptr
009f8     30 0C 86 F1 | 	sub	objptr, #48
009fc     00 80 63 FF 
00a00     20 46 06 F6 | 	mov	arg02, ##-956301280
00a04     A8 00 A0 FD | 	call	#\builtin_longfill_
00a08                 | ' else
00a08     70 00 90 FD | 	jmp	#LR__0004
00a0c                 | LR__0001
00a0c                 | '   if (graphmode & 48) ==48
00a0c     C4 0C 06 F1 | 	add	objptr, #196
00a10     06 5B 02 FB | 	rdlong	local08, objptr
00a14     C4 0C 86 F1 | 	sub	objptr, #196
00a18     30 5A 06 F5 | 	and	local08, #48
00a1c     30 5A 0E F2 | 	cmp	local08, #48 wz
00a20                 | '     c:=bc
00a20     00 5C 06 A6 |  if_e	mov	local09, #0
00a24     38 00 90 AD |  if_e	jmp	#LR__0003
00a28                 | '   elseif (graphmode & 48) ==32
00a28     C4 0C 06 F1 | 	add	objptr, #196
00a2c     06 5B 02 FB | 	rdlong	local08, objptr
00a30     C4 0C 86 F1 | 	sub	objptr, #196
00a34     30 5A 06 F5 | 	and	local08, #48
00a38     20 5A 0E F2 | 	cmp	local08, #32 wz
00a3c     00 5C 06 A6 |  if_e	mov	local09, #0
00a40                 | '     c:=bc<<4+bc
00a40     1C 00 90 AD |  if_e	jmp	#LR__0002
00a44                 | '   elseif (graphmode & 48) ==16
00a44     C4 0C 06 F1 | 	add	objptr, #196
00a48     06 5B 02 FB | 	rdlong	local08, objptr
00a4c     C4 0C 86 F1 | 	sub	objptr, #196
00a50     30 5A 06 F5 | 	and	local08, #48
00a54     10 5A 0E F2 | 	cmp	local08, #16 wz
00a58     00 5C 06 A6 |  if_e	mov	local09, #0
00a5c                 | '     c:=bc<<6+bc<<4+bc<<2+bc
00a5c                 | '   else
00a5c                 | '     if bc==1
00a5c                 | '       c:=255
00a5c                 | '     else
00a5c                 | '       c:=0
00a5c     00 5C 06 56 |  if_ne	mov	local09, #0
00a60                 | LR__0002
00a60                 | LR__0003
00a60     30 0C 06 F1 | 	add	objptr, #48
00a64     06 49 02 FB | 	rdlong	arg03, objptr
00a68     30 0C 86 F1 | 	sub	objptr, #48
00a6c     02 48 66 F0 | 	shl	arg03, #2
00a70                 | '   bytefill(buf_ptr,c,buflen*4)
00a70     06 45 02 FB | 	rdlong	arg01, objptr
00a74     2E 47 02 F6 | 	mov	arg02, local09
00a78     A0 00 A0 FD | 	call	#\builtin_bytefill_
00a7c                 | LR__0004
00a7c                 | ' setwritecolors(fc,bc)
00a7c     00 46 06 F6 | 	mov	arg02, #0
00a80                 | ' 
00a80                 | ' 
00a80                 | ' write_color:=ff
00a80     38 0C 06 F1 | 	add	objptr, #56
00a84     06 8F 69 FC | 	wrlong	#199, objptr
00a88                 | ' write_background:=bb
00a88     04 0C 06 F1 | 	add	objptr, #4
00a8c     06 01 68 FC | 	wrlong	#0, objptr
00a90                 | ' cursor_x:=0
00a90     08 0C 86 F1 | 	sub	objptr, #8
00a94     06 01 48 FC | 	wrbyte	#0, objptr
00a98                 | ' cursor_y:=0
00a98     01 0C 06 F1 | 	add	objptr, #1
00a9c     06 01 48 FC | 	wrbyte	#0, objptr
00aa0     35 0C 86 F1 | 	sub	objptr, #53
00aa4     2E 1F 02 F6 | 	mov	result1, local09
00aa8                 | ' setbordercolor(0,0,128)
00aa8     00 44 06 F6 | 	mov	arg01, #0
00aac     80 48 06 F6 | 	mov	arg03, #128
00ab0     34 07 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00ab4                 | ' setwritecolors(c_green,c_black)
00ab4     00 46 06 F6 | 	mov	arg02, #0
00ab8                 | ' 
00ab8                 | ' 
00ab8                 | ' write_color:=ff
00ab8     38 0C 06 F1 | 	add	objptr, #56
00abc     06 8F 69 FC | 	wrlong	#199, objptr
00ac0                 | ' write_background:=bb
00ac0     04 0C 06 F1 | 	add	objptr, #4
00ac4     06 01 68 FC | 	wrlong	#0, objptr
00ac8                 | ' 
00ac8                 | ' return cog
00ac8     14 0C 86 F1 | 	sub	objptr, #20
00acc     06 1F 02 FB | 	rdlong	result1, objptr
00ad0     28 0C 86 F1 | 	sub	objptr, #40
00ad4     00 44 06 F6 | 	mov	arg01, #0
00ad8     00 48 06 F6 | 	mov	arg03, #0
00adc     08 07 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00ae0                 | ' v030.start(mode,pin)
00ae0                 | ' v030.setbordercolor(0,0,0)
00ae0                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #2
00ae0     06 45 02 F6 | 	mov	arg01, objptr
00ae4     0A 47 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00ae8     5C 16 B0 FD | 	call	#__system___make_methodptr
00aec     00 22 06 F6 | 	mov	result3, #0
00af0     00 20 06 F6 | 	mov	result2, #0
00af4     0F 47 02 F6 | 	mov	arg02, result1
00af8     00 48 06 F6 | 	mov	arg03, #0
00afc     00 4A 06 F6 | 	mov	arg04, #0
00b00     02 44 06 F6 | 	mov	arg01, #2
00b04     F8 17 B0 FD | 	call	#__system___basic_open
00b08     EC 0C 06 F1 | 	add	objptr, #236
00b0c     99 09 E0 FF 
00b10     06 67 6A FC | 	wrlong	##-1072483533, objptr
00b14     04 0C 06 F1 | 	add	objptr, #4
00b18     CC EC 9F FF 
00b1c     06 35 6B FC | 	wrlong	##1071225242, objptr
00b20     04 0C 06 F1 | 	add	objptr, #4
00b24     CC CC DF FF 
00b28     06 35 6B FC | 	wrlong	##-1080452710, objptr
00b2c     04 0C 06 F1 | 	add	objptr, #4
00b30     CC CC 9F FF 
00b34     06 35 6B FC | 	wrlong	##1067030938, objptr
00b38     04 0C 06 F1 | 	add	objptr, #4
00b3c     06 01 6A FC | 	wrlong	#256, objptr
00b40     04 0C 06 F1 | 	add	objptr, #4
00b44     01 00 80 FF 
00b48     06 3F 6A FC | 	wrlong	##799, objptr
00b4c     04 0C 06 F1 | 	add	objptr, #4
00b50     06 BF 6B FC | 	wrlong	#479, objptr
00b54     14 0C 86 F1 | 	sub	objptr, #20
00b58     06 45 02 FB | 	rdlong	arg01, objptr
00b5c     04 0C 86 F1 | 	sub	objptr, #4
00b60     06 47 02 FB | 	rdlong	arg02, objptr
00b64     EC 0C 86 F1 | 	sub	objptr, #236
00b68     1F 46 E6 F4 | 	bitnot	arg02, #31
00b6c     23 1F 02 F6 | 	mov	result1, arg02
00b70     C4 18 B0 FD | 	call	#__system___float_add
00b74     0F 5F 02 F6 | 	mov	local10, result1
00b78     00 0D 06 F1 | 	add	objptr, #256
00b7c     06 45 02 FB | 	rdlong	arg01, objptr
00b80     00 0D 86 F1 | 	sub	objptr, #256
00b84     78 18 B0 FD | 	call	#__system___float_fromint
00b88     0F 47 02 F6 | 	mov	arg02, result1
00b8c     2F 45 02 F6 | 	mov	arg01, local10
00b90     28 1E B0 FD | 	call	#__system___float_div
00b94     08 0D 06 F1 | 	add	objptr, #264
00b98     06 1F 62 FC | 	wrlong	result1, objptr
00b9c     10 0C 86 F1 | 	sub	objptr, #16
00ba0     06 45 02 FB | 	rdlong	arg01, objptr
00ba4     04 0C 86 F1 | 	sub	objptr, #4
00ba8     06 47 02 FB | 	rdlong	arg02, objptr
00bac     F4 0C 86 F1 | 	sub	objptr, #244
00bb0     1F 46 E6 F4 | 	bitnot	arg02, #31
00bb4     23 1F 02 F6 | 	mov	result1, arg02
00bb8     7C 18 B0 FD | 	call	#__system___float_add
00bbc     0F 5F 02 F6 | 	mov	local10, result1
00bc0     04 0D 06 F1 | 	add	objptr, #260
00bc4     06 45 02 FB | 	rdlong	arg01, objptr
00bc8     04 0D 86 F1 | 	sub	objptr, #260
00bcc     30 18 B0 FD | 	call	#__system___float_fromint
00bd0     0F 47 02 F6 | 	mov	arg02, result1
00bd4     2F 45 02 F6 | 	mov	arg01, local10
00bd8     E0 1D B0 FD | 	call	#__system___float_div
00bdc     0F 61 02 F6 | 	mov	local11, result1
00be0     0C 0D 06 F1 | 	add	objptr, #268
00be4     06 61 62 FC | 	wrlong	local11, objptr
00be8     04 0C 06 F1 | 	add	objptr, #4
00bec     00 40 A0 FF 
00bf0     06 01 68 FC | 	wrlong	##1082130432, objptr
00bf4     1C 0C 86 F1 | 	sub	objptr, #28
00bf8     06 63 02 FB | 	rdlong	local12, objptr
00bfc     20 0C 06 F1 | 	add	objptr, #32
00c00     06 63 62 FC | 	wrlong	local12, objptr
00c04                 | ' #line 2 "D:/programowanie/20211226-P2-retromachine/Propeller/textmandel.bas"
00c04                 | ' startvideo (512+48,0)
00c04                 | ' '
00c04                 | ' ' translated to BASIC from mandelbrot16-20180406-fds.spin
00c04                 | ' '-------------------------------------------------------------------------------
00c04                 | ' 
00c04                 | ' xmin# = -2.3
00c04                 | ' xmax# =  1.7
00c04                 | ' 
00c04                 | ' ymin# = -1.2
00c04                 | ' ymax# =  1.2
00c04                 | ' 
00c04                 | ' maxiter = 256
00c04                 | ' 
00c04                 | ' MPX = 799 ' 0..79
00c04                 | ' MPY = 479 ' 0..24
00c04                 | ' 
00c04                 | ' dx# = (xmax#-xmin#)/MPX
00c04                 | ' dy# = (ymax#-ymin#)/MPY
00c04                 | ' 
00c04                 | ' c4# = 4.0 ' square of escape radius
00c04                 | '  
00c04                 | ' cy# = ymin#
00c04                 | ' for py = 0 to MPY
00c04     00 64 06 F6 | 	mov	local13, #0
00c08     10 0C 86 F1 | 	sub	objptr, #16
00c0c     06 63 02 FB | 	rdlong	local12, objptr
00c10     04 0D 86 F1 | 	sub	objptr, #260
00c14     31 67 02 F6 | 	mov	local14, local12
00c18     01 66 06 F1 | 	add	local14, #1
00c1c                 | LR__0005
00c1c     33 65 5A F2 | 	cmps	local13, local14 wcz
00c20     9C 02 90 3D |  if_ae	jmp	#LR__0012
00c24     EC 0C 06 F1 | 	add	objptr, #236
00c28     06 69 02 FB | 	rdlong	local15, objptr
00c2c     2C 0C 06 F1 | 	add	objptr, #44
00c30     06 69 62 FC | 	wrlong	local15, objptr
00c34                 | '   cx# = xmin#
00c34                 | '   for px = 0 to MPX
00c34     00 6A 06 F6 | 	mov	local16, #0
00c38     18 0C 86 F1 | 	sub	objptr, #24
00c3c     06 69 02 FB | 	rdlong	local15, objptr
00c40     00 0D 86 F1 | 	sub	objptr, #256
00c44     34 6D 02 F6 | 	mov	local17, local15
00c48     01 6C 06 F1 | 	add	local17, #1
00c4c                 | LR__0006
00c4c     36 6B 5A F2 | 	cmps	local16, local17 wcz
00c50     3C 02 90 3D |  if_ae	jmp	#LR__0011
00c54     1C 0D 06 F1 | 	add	objptr, #284
00c58     06 01 68 FC | 	wrlong	#0, objptr
00c5c     04 0C 06 F1 | 	add	objptr, #4
00c60     06 01 68 FC | 	wrlong	#0, objptr
00c64     04 0C 06 F1 | 	add	objptr, #4
00c68     06 01 68 FC | 	wrlong	#0, objptr
00c6c     04 0C 06 F1 | 	add	objptr, #4
00c70     06 01 68 FC | 	wrlong	#0, objptr
00c74     04 0C 06 F1 | 	add	objptr, #4
00c78     06 01 68 FC | 	wrlong	#0, objptr
00c7c     2C 0D 86 F1 | 	sub	objptr, #300
00c80                 | '     x# = 0.0
00c80                 | '     y#= 0.0
00c80                 | '     x2# = 0.0
00c80                 | '     y2# = 0.0
00c80                 | '     iter = 0
00c80                 | '     while iter < maxiter and x2#+y2# <= c4#
00c80                 | LR__0007
00c80     00 6E 06 F6 | 	mov	local18, #0
00c84     2C 0D 06 F1 | 	add	objptr, #300
00c88     06 71 02 FB | 	rdlong	local19, objptr
00c8c     30 0C 86 F1 | 	sub	objptr, #48
00c90     06 73 02 FB | 	rdlong	local20, objptr
00c94     39 71 5A F2 | 	cmps	local19, local20 wcz
00c98     01 6E 66 C6 |  if_b	neg	local18, #1
00c9c     00 74 06 F6 | 	mov	local21, #0
00ca0     28 0C 06 F1 | 	add	objptr, #40
00ca4     06 45 02 FB | 	rdlong	arg01, objptr
00ca8     04 0C 06 F1 | 	add	objptr, #4
00cac     06 47 02 FB | 	rdlong	arg02, objptr
00cb0     28 0D 86 F1 | 	sub	objptr, #296
00cb4     80 17 B0 FD | 	call	#__system___float_add
00cb8     0F 45 02 F6 | 	mov	arg01, result1
00cbc     10 0D 06 F1 | 	add	objptr, #272
00cc0     06 47 02 FB | 	rdlong	arg02, objptr
00cc4     10 0D 86 F1 | 	sub	objptr, #272
00cc8     01 48 06 F6 | 	mov	arg03, #1
00ccc     54 1F B0 FD | 	call	#__system___float_cmp
00cd0     00 1E 5E F2 | 	cmps	result1, #0 wcz
00cd4     FF FF 7F EF 
00cd8     FF 75 66 E5 |  if_be	xor	local21, ##-1
00cdc     3A 6F CA F7 | 	test	local18, local21 wz
00ce0     E0 00 90 AD |  if_e	jmp	#LR__0008
00ce4     1C 0D 06 F1 | 	add	objptr, #284
00ce8     06 47 02 FB | 	rdlong	arg02, objptr
00cec     1C 0D 86 F1 | 	sub	objptr, #284
00cf0     1E 44 C6 F9 | 	decod	arg01, #30
00cf4     88 1A B0 FD | 	call	#__system___float_mul
00cf8     0F 45 02 F6 | 	mov	arg01, result1
00cfc     20 0D 06 F1 | 	add	objptr, #288
00d00     06 47 02 FB | 	rdlong	arg02, objptr
00d04     20 0D 86 F1 | 	sub	objptr, #288
00d08     74 1A B0 FD | 	call	#__system___float_mul
00d0c     0F 45 02 F6 | 	mov	arg01, result1
00d10     14 0D 06 F1 | 	add	objptr, #276
00d14     06 47 02 FB | 	rdlong	arg02, objptr
00d18     14 0D 86 F1 | 	sub	objptr, #276
00d1c     18 17 B0 FD | 	call	#__system___float_add
00d20     0F 77 02 F6 | 	mov	local22, result1
00d24     20 0D 06 F1 | 	add	objptr, #288
00d28     06 77 62 FC | 	wrlong	local22, objptr
00d2c     04 0C 06 F1 | 	add	objptr, #4
00d30     06 45 02 FB | 	rdlong	arg01, objptr
00d34     04 0C 06 F1 | 	add	objptr, #4
00d38     06 47 02 FB | 	rdlong	arg02, objptr
00d3c     28 0D 86 F1 | 	sub	objptr, #296
00d40     1F 46 E6 F4 | 	bitnot	arg02, #31
00d44     23 1F 02 F6 | 	mov	result1, arg02
00d48     EC 16 B0 FD | 	call	#__system___float_add
00d4c     0F 45 02 F6 | 	mov	arg01, result1
00d50     18 0D 06 F1 | 	add	objptr, #280
00d54     06 47 02 FB | 	rdlong	arg02, objptr
00d58     18 0D 86 F1 | 	sub	objptr, #280
00d5c     D8 16 B0 FD | 	call	#__system___float_add
00d60     0F 79 02 F6 | 	mov	local23, result1
00d64     1C 0D 06 F1 | 	add	objptr, #284
00d68     06 79 62 FC | 	wrlong	local23, objptr
00d6c     10 0C 06 F1 | 	add	objptr, #16
00d70     06 6F 02 FB | 	rdlong	local18, objptr
00d74     01 6E 06 F1 | 	add	local18, #1
00d78     06 6F 62 FC | 	wrlong	local18, objptr
00d7c     10 0C 86 F1 | 	sub	objptr, #16
00d80     06 45 02 FB | 	rdlong	arg01, objptr
00d84     22 47 02 F6 | 	mov	arg02, arg01
00d88     1C 0D 86 F1 | 	sub	objptr, #284
00d8c     F0 19 B0 FD | 	call	#__system___float_mul
00d90     0F 7B 02 F6 | 	mov	local24, result1
00d94     24 0D 06 F1 | 	add	objptr, #292
00d98     06 7B 62 FC | 	wrlong	local24, objptr
00d9c     04 0C 86 F1 | 	sub	objptr, #4
00da0     06 45 02 FB | 	rdlong	arg01, objptr
00da4     22 47 02 F6 | 	mov	arg02, arg01
00da8     20 0D 86 F1 | 	sub	objptr, #288
00dac     D0 19 B0 FD | 	call	#__system___float_mul
00db0     0F 7B 02 F6 | 	mov	local24, result1
00db4     28 0D 06 F1 | 	add	objptr, #296
00db8     06 7B 62 FC | 	wrlong	local24, objptr
00dbc     28 0D 86 F1 | 	sub	objptr, #296
00dc0     BC FE 9F FD | 	jmp	#LR__0007
00dc4                 | LR__0008
00dc4     18 0D 06 F1 | 	add	objptr, #280
00dc8     06 45 02 FB | 	rdlong	arg01, objptr
00dcc     10 0C 86 F1 | 	sub	objptr, #16
00dd0     06 47 02 FB | 	rdlong	arg02, objptr
00dd4     08 0D 86 F1 | 	sub	objptr, #264
00dd8     5C 16 B0 FD | 	call	#__system___float_add
00ddc     0F 7B 02 F6 | 	mov	local24, result1
00de0     18 0D 06 F1 | 	add	objptr, #280
00de4     06 7B 62 FC | 	wrlong	local24, objptr
00de8                 | '     cx# = cx#+dx#
00de8                 | '     if iter=maxiter then
00de8     14 0C 06 F1 | 	add	objptr, #20
00dec     06 6F 02 FB | 	rdlong	local18, objptr
00df0     30 0C 86 F1 | 	sub	objptr, #48
00df4     06 5F 02 FB | 	rdlong	local10, objptr
00df8     FC 0C 86 F1 | 	sub	objptr, #252
00dfc     2F 6F 0A F2 | 	cmp	local18, local10 wz
00e00     10 00 90 5D |  if_ne	jmp	#LR__0009
00e04     30 0D 06 F1 | 	add	objptr, #304
00e08     06 01 68 FC | 	wrlong	#0, objptr
00e0c     30 0D 86 F1 | 	sub	objptr, #304
00e10     58 00 90 FD | 	jmp	#LR__0010
00e14                 | LR__0009
00e14     2C 0D 06 F1 | 	add	objptr, #300
00e18     06 7D 02 FB | 	rdlong	local25, objptr
00e1c     40 7C 06 F1 | 	add	local25, #64
00e20     3E 7F 52 F6 | 	abs	local26, local25 wc
00e24     04 7E 46 F0 | 	shr	local26, #4
00e28     3F 7F 62 C6 |  if_b	neg	local26, local26
00e2c     08 0C 06 F1 | 	add	objptr, #8
00e30     06 7F 62 FC | 	wrlong	local26, objptr
00e34     08 0C 86 F1 | 	sub	objptr, #8
00e38     06 6F 02 FB | 	rdlong	local18, objptr
00e3c     37 81 52 F6 | 	abs	local27, local18 wc
00e40     0F 80 06 F5 | 	and	local27, #15
00e44     40 81 62 C6 |  if_b	neg	local27, local27
00e48     0C 0C 06 F1 | 	add	objptr, #12
00e4c     06 81 62 FC | 	wrlong	local27, objptr
00e50     04 80 66 F0 | 	shl	local27, #4
00e54     04 0C 86 F1 | 	sub	objptr, #4
00e58     06 6F 02 FB | 	rdlong	local18, objptr
00e5c     37 81 02 F1 | 	add	local27, local18
00e60     04 0C 86 F1 | 	sub	objptr, #4
00e64     06 81 62 FC | 	wrlong	local27, objptr
00e68     30 0D 86 F1 | 	sub	objptr, #304
00e6c                 | LR__0010
00e6c     32 47 02 F6 | 	mov	arg02, local13
00e70     30 0D 06 F1 | 	add	objptr, #304
00e74     06 49 02 FB | 	rdlong	arg03, objptr
00e78     30 0D 86 F1 | 	sub	objptr, #304
00e7c     35 45 02 F6 | 	mov	arg01, local16
00e80     E0 02 B0 FD | 	call	#_hng030rm_spin2_putpixel8
00e84     00 1E 06 F6 | 	mov	result1, #0
00e88     01 6A 06 F1 | 	add	local16, #1
00e8c     BC FD 9F FD | 	jmp	#LR__0006
00e90                 | LR__0011
00e90     14 0D 06 F1 | 	add	objptr, #276
00e94     06 45 02 FB | 	rdlong	arg01, objptr
00e98     08 0C 86 F1 | 	sub	objptr, #8
00e9c     06 47 02 FB | 	rdlong	arg02, objptr
00ea0     0C 0D 86 F1 | 	sub	objptr, #268
00ea4     90 15 B0 FD | 	call	#__system___float_add
00ea8     0F 73 02 F6 | 	mov	local20, result1
00eac     14 0D 06 F1 | 	add	objptr, #276
00eb0     06 73 62 FC | 	wrlong	local20, objptr
00eb4     14 0D 86 F1 | 	sub	objptr, #276
00eb8     01 64 06 F1 | 	add	local13, #1
00ebc     5C FD 9F FD | 	jmp	#LR__0005
00ec0                 | LR__0012
00ec0     AF F0 03 F6 | 	mov	ptra, fp
00ec4     BF 00 A0 FD | 	call	#popregs_
00ec8                 | _program_ret
00ec8     2D 00 64 FD | 	ret
00ecc                 | 
00ecc                 | ' 
00ecc                 | ' 
00ecc                 | ' ''---------- putpixel - put a pixel on the screen
00ecc                 | ' 
00ecc                 | ' pub putpixel1(x,y,c) |byte b
00ecc                 | _hng030rm_spin2_putpixel1
00ecc                 | ' 
00ecc                 | ' 
00ecc                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
00ecc     00 24 06 F6 | 	mov	_var01, #0
00ed0     00 44 5E F2 | 	cmps	arg01, #0 wcz
00ed4     01 24 66 36 |  if_ae	neg	_var01, #1
00ed8     00 26 06 F6 | 	mov	_var02, #0
00edc     90 0C 06 F1 | 	add	objptr, #144
00ee0     06 29 02 FB | 	rdlong	_var03, objptr
00ee4     05 28 66 F0 | 	shl	_var03, #5
00ee8     14 45 5A F2 | 	cmps	arg01, _var03 wcz
00eec     01 26 66 C6 |  if_b	neg	_var02, #1
00ef0     13 25 02 F5 | 	and	_var01, _var02
00ef4     00 2A 06 F6 | 	mov	_var04, #0
00ef8     00 46 5E F2 | 	cmps	arg02, #0 wcz
00efc     01 2A 66 36 |  if_ae	neg	_var04, #1
00f00     15 25 02 F5 | 	and	_var01, _var04
00f04     00 2C 06 F6 | 	mov	_var05, #0
00f08     04 0C 06 F1 | 	add	objptr, #4
00f0c     06 2F 02 FB | 	rdlong	_var06, objptr
00f10     94 0C 86 F1 | 	sub	objptr, #148
00f14     17 47 5A F2 | 	cmps	arg02, _var06 wcz
00f18     01 2C 66 C6 |  if_b	neg	_var05, #1
00f1c     16 25 CA F7 | 	test	_var01, _var05 wz
00f20     8C 00 90 AD |  if_e	jmp	#LR__0015
00f24     90 0C 06 F1 | 	add	objptr, #144
00f28     06 31 02 FB | 	rdlong	_var07, objptr
00f2c     90 0C 86 F1 | 	sub	objptr, #144
00f30     02 30 66 F0 | 	shl	_var07, #2
00f34     23 31 02 FD | 	qmul	_var07, arg02
00f38     18 32 62 FD | 	getqx	_var08
00f3c     06 35 02 FB | 	rdlong	_var09, objptr
00f40     19 35 02 F1 | 	add	_var09, _var08
00f44     22 37 02 F6 | 	mov	_var10, arg01
00f48     03 36 46 F0 | 	shr	_var10, #3
00f4c     1B 35 02 F1 | 	add	_var09, _var10
00f50                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
00f50     1A 39 C2 FA | 	rdbyte	_var11, _var09
00f54                 | '     if (c==0)
00f54     00 48 0E F2 | 	cmp	arg03, #0 wz
00f58     18 00 90 5D |  if_ne	jmp	#LR__0013
00f5c     22 25 52 F6 | 	abs	_var01, arg01 wc
00f60     07 24 06 F5 | 	and	_var01, #7
00f64     12 25 62 C6 |  if_b	neg	_var01, _var01
00f68     12 3B C2 F9 | 	decod	_var12, _var01
00f6c                 | '       b:=b & !(1<<(x//8))
00f6c     1D 39 22 F5 | 	andn	_var11, _var12
00f70                 | '     else
00f70     14 00 90 FD | 	jmp	#LR__0014
00f74                 | LR__0013
00f74     22 25 52 F6 | 	abs	_var01, arg01 wc
00f78     07 24 06 F5 | 	and	_var01, #7
00f7c     12 25 62 C6 |  if_b	neg	_var01, _var01
00f80     12 3D C2 F9 | 	decod	_var13, _var01
00f84                 | '       b:=b |(1<<(x//8))
00f84     1E 39 42 F5 | 	or	_var11, _var13
00f88                 | LR__0014
00f88     90 0C 06 F1 | 	add	objptr, #144
00f8c     06 3F 02 FB | 	rdlong	_var14, objptr
00f90     90 0C 86 F1 | 	sub	objptr, #144
00f94     02 3E 66 F0 | 	shl	_var14, #2
00f98     23 3F 02 FD | 	qmul	_var14, arg02
00f9c     18 40 62 FD | 	getqx	_var15
00fa0     06 43 02 FB | 	rdlong	_var16, objptr
00fa4     20 43 02 F1 | 	add	_var16, _var15
00fa8     1B 43 02 F1 | 	add	_var16, _var10
00fac                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
00fac     21 39 42 FC | 	wrbyte	_var11, _var16
00fb0                 | LR__0015
00fb0                 | _hng030rm_spin2_putpixel1_ret
00fb0     2D 00 64 FD | 	ret
00fb4                 | 
00fb4                 | ' 
00fb4                 | ' 
00fb4                 | ' pub putpixel2(x,y,c) |byte b
00fb4                 | _hng030rm_spin2_putpixel2
00fb4                 | ' 
00fb4                 | ' 
00fb4                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
00fb4     00 24 06 F6 | 	mov	_var01, #0
00fb8     00 44 5E F2 | 	cmps	arg01, #0 wcz
00fbc     01 24 66 36 |  if_ae	neg	_var01, #1
00fc0     00 26 06 F6 | 	mov	_var02, #0
00fc4     90 0C 06 F1 | 	add	objptr, #144
00fc8     06 29 02 FB | 	rdlong	_var03, objptr
00fcc     04 28 66 F0 | 	shl	_var03, #4
00fd0     14 45 5A F2 | 	cmps	arg01, _var03 wcz
00fd4     01 26 66 C6 |  if_b	neg	_var02, #1
00fd8     13 25 02 F5 | 	and	_var01, _var02
00fdc     00 2A 06 F6 | 	mov	_var04, #0
00fe0     00 46 5E F2 | 	cmps	arg02, #0 wcz
00fe4     01 2A 66 36 |  if_ae	neg	_var04, #1
00fe8     15 25 02 F5 | 	and	_var01, _var04
00fec     00 2C 06 F6 | 	mov	_var05, #0
00ff0     04 0C 06 F1 | 	add	objptr, #4
00ff4     06 2F 02 FB | 	rdlong	_var06, objptr
00ff8     94 0C 86 F1 | 	sub	objptr, #148
00ffc     17 47 5A F2 | 	cmps	arg02, _var06 wcz
01000     01 2C 66 C6 |  if_b	neg	_var05, #1
01004     16 25 CA F7 | 	test	_var01, _var05 wz
01008     7C 00 90 AD |  if_e	jmp	#LR__0016
0100c     90 0C 06 F1 | 	add	objptr, #144
01010     06 31 02 FB | 	rdlong	_var07, objptr
01014     90 0C 86 F1 | 	sub	objptr, #144
01018     02 30 66 F0 | 	shl	_var07, #2
0101c     23 31 02 FD | 	qmul	_var07, arg02
01020     18 32 62 FD | 	getqx	_var08
01024     06 35 02 FB | 	rdlong	_var09, objptr
01028     19 35 02 F1 | 	add	_var09, _var08
0102c     22 37 02 F6 | 	mov	_var10, arg01
01030     02 36 46 F0 | 	shr	_var10, #2
01034     1B 35 02 F1 | 	add	_var09, _var10
01038                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01038     1A 39 C2 FA | 	rdbyte	_var11, _var09
0103c     22 25 52 F6 | 	abs	_var01, arg01 wc
01040     03 24 06 F5 | 	and	_var01, #3
01044     12 25 62 C6 |  if_b	neg	_var01, _var01
01048     01 24 66 F0 | 	shl	_var01, #1
0104c     03 3A 06 F6 | 	mov	_var12, #3
01050     12 3B 62 F0 | 	shl	_var12, _var01
01054                 | '     b:=b & !(%11<<((x//4)<<1))
01054     1D 39 22 F5 | 	andn	_var11, _var12
01058     12 49 62 F0 | 	shl	arg03, _var01
0105c                 | '     b:=b |(c<<((x//4)<<1))
0105c     24 39 42 F5 | 	or	_var11, arg03
01060     90 0C 06 F1 | 	add	objptr, #144
01064     06 3D 02 FB | 	rdlong	_var13, objptr
01068     90 0C 86 F1 | 	sub	objptr, #144
0106c     02 3C 66 F0 | 	shl	_var13, #2
01070     23 3D 02 FD | 	qmul	_var13, arg02
01074     18 3E 62 FD | 	getqx	_var14
01078     06 41 02 FB | 	rdlong	_var15, objptr
0107c     1F 41 02 F1 | 	add	_var15, _var14
01080     1B 41 02 F1 | 	add	_var15, _var10
01084                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
01084     20 39 42 FC | 	wrbyte	_var11, _var15
01088                 | LR__0016
01088                 | _hng030rm_spin2_putpixel2_ret
01088     2D 00 64 FD | 	ret
0108c                 | 
0108c                 | ' 
0108c                 | ' 
0108c                 | ' pub putpixel4(x,y,c) |byte b
0108c                 | _hng030rm_spin2_putpixel4
0108c                 | ' 
0108c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
0108c     00 24 06 F6 | 	mov	_var01, #0
01090     00 44 5E F2 | 	cmps	arg01, #0 wcz
01094     01 24 66 36 |  if_ae	neg	_var01, #1
01098     00 26 06 F6 | 	mov	_var02, #0
0109c     90 0C 06 F1 | 	add	objptr, #144
010a0     06 29 02 FB | 	rdlong	_var03, objptr
010a4     04 28 66 F0 | 	shl	_var03, #4
010a8     14 45 5A F2 | 	cmps	arg01, _var03 wcz
010ac     01 26 66 C6 |  if_b	neg	_var02, #1
010b0     13 25 02 F5 | 	and	_var01, _var02
010b4     00 2A 06 F6 | 	mov	_var04, #0
010b8     00 46 5E F2 | 	cmps	arg02, #0 wcz
010bc     01 2A 66 36 |  if_ae	neg	_var04, #1
010c0     15 25 02 F5 | 	and	_var01, _var04
010c4     00 2C 06 F6 | 	mov	_var05, #0
010c8     04 0C 06 F1 | 	add	objptr, #4
010cc     06 2F 02 FB | 	rdlong	_var06, objptr
010d0     94 0C 86 F1 | 	sub	objptr, #148
010d4     17 47 5A F2 | 	cmps	arg02, _var06 wcz
010d8     01 2C 66 C6 |  if_b	neg	_var05, #1
010dc     16 25 CA F7 | 	test	_var01, _var05 wz
010e0     7C 00 90 AD |  if_e	jmp	#LR__0017
010e4     90 0C 06 F1 | 	add	objptr, #144
010e8     06 31 02 FB | 	rdlong	_var07, objptr
010ec     90 0C 86 F1 | 	sub	objptr, #144
010f0     02 30 66 F0 | 	shl	_var07, #2
010f4     23 31 02 FD | 	qmul	_var07, arg02
010f8     18 32 62 FD | 	getqx	_var08
010fc     06 35 02 FB | 	rdlong	_var09, objptr
01100     19 35 02 F1 | 	add	_var09, _var08
01104     22 37 02 F6 | 	mov	_var10, arg01
01108     01 36 46 F0 | 	shr	_var10, #1
0110c     1B 35 02 F1 | 	add	_var09, _var10
01110                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
01110     1A 39 C2 FA | 	rdbyte	_var11, _var09
01114     22 25 52 F6 | 	abs	_var01, arg01 wc
01118     01 24 06 F5 | 	and	_var01, #1
0111c     12 25 62 C6 |  if_b	neg	_var01, _var01
01120     02 24 66 F0 | 	shl	_var01, #2
01124     0F 3A 06 F6 | 	mov	_var12, #15
01128     12 3B 62 F0 | 	shl	_var12, _var01
0112c                 | '     b:=b & !(%1111<<((x//2)<<2))
0112c     1D 39 22 F5 | 	andn	_var11, _var12
01130     12 49 62 F0 | 	shl	arg03, _var01
01134                 | '     b:=b |(c<<((x//2)<<2))
01134     24 39 42 F5 | 	or	_var11, arg03
01138     90 0C 06 F1 | 	add	objptr, #144
0113c     06 3D 02 FB | 	rdlong	_var13, objptr
01140     90 0C 86 F1 | 	sub	objptr, #144
01144     02 3C 66 F0 | 	shl	_var13, #2
01148     23 3D 02 FD | 	qmul	_var13, arg02
0114c     18 3E 62 FD | 	getqx	_var14
01150     06 41 02 FB | 	rdlong	_var15, objptr
01154     1F 41 02 F1 | 	add	_var15, _var14
01158     1B 41 02 F1 | 	add	_var15, _var10
0115c                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
0115c     20 39 42 FC | 	wrbyte	_var11, _var15
01160                 | LR__0017
01160                 | _hng030rm_spin2_putpixel4_ret
01160     2D 00 64 FD | 	ret
01164                 | 
01164                 | ' 
01164                 | ' 
01164                 | ' pub putpixel8(x,y,c)
01164                 | _hng030rm_spin2_putpixel8
01164                 | ' 
01164                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
01164     00 24 06 F6 | 	mov	_var01, #0
01168     00 44 5E F2 | 	cmps	arg01, #0 wcz
0116c     01 24 66 36 |  if_ae	neg	_var01, #1
01170     00 26 06 F6 | 	mov	_var02, #0
01174     90 0C 06 F1 | 	add	objptr, #144
01178     06 29 02 FB | 	rdlong	_var03, objptr
0117c     02 28 66 F0 | 	shl	_var03, #2
01180     14 45 5A F2 | 	cmps	arg01, _var03 wcz
01184     01 26 66 C6 |  if_b	neg	_var02, #1
01188     13 25 02 F5 | 	and	_var01, _var02
0118c     00 2A 06 F6 | 	mov	_var04, #0
01190     00 46 5E F2 | 	cmps	arg02, #0 wcz
01194     01 2A 66 36 |  if_ae	neg	_var04, #1
01198     15 25 02 F5 | 	and	_var01, _var04
0119c     00 2C 06 F6 | 	mov	_var05, #0
011a0     04 0C 06 F1 | 	add	objptr, #4
011a4     06 2F 02 FB | 	rdlong	_var06, objptr
011a8     94 0C 86 F1 | 	sub	objptr, #148
011ac     17 47 5A F2 | 	cmps	arg02, _var06 wcz
011b0     01 2C 66 C6 |  if_b	neg	_var05, #1
011b4     16 25 CA F7 | 	test	_var01, _var05 wz
011b8     28 00 90 AD |  if_e	jmp	#LR__0018
011bc     90 0C 06 F1 | 	add	objptr, #144
011c0     06 31 02 FB | 	rdlong	_var07, objptr
011c4     90 0C 86 F1 | 	sub	objptr, #144
011c8     02 30 66 F0 | 	shl	_var07, #2
011cc     23 31 02 FD | 	qmul	_var07, arg02
011d0     18 32 62 FD | 	getqx	_var08
011d4     06 35 02 FB | 	rdlong	_var09, objptr
011d8     19 35 02 F1 | 	add	_var09, _var08
011dc     22 35 02 F1 | 	add	_var09, arg01
011e0                 | '     byte[buf_ptr+4*cpl*y+x]:=c
011e0     1A 49 42 FC | 	wrbyte	arg03, _var09
011e4                 | LR__0018
011e4                 | _hng030rm_spin2_putpixel8_ret
011e4     2D 00 64 FD | 	ret
011e8                 | 
011e8                 | ' 
011e8                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
011e8                 | ' 
011e8                 | ' pub setbordercolor(r,g,b) | color
011e8                 | _hng030rm_spin2_setbordercolor
011e8     18 44 66 F0 | 	shl	arg01, #24
011ec     10 46 66 F0 | 	shl	arg02, #16
011f0     23 45 02 F1 | 	add	arg01, arg02
011f4     08 48 66 F0 | 	shl	arg03, #8
011f8     24 45 02 F1 | 	add	arg01, arg03
011fc                 | ' 
011fc                 | ' color:=r<<24+g<<16+b<<8
011fc                 | ' bordercolor:=color
011fc     2C 0C 06 F1 | 	add	objptr, #44
01200     06 45 62 FC | 	wrlong	arg01, objptr
01204     2C 0C 86 F1 | 	sub	objptr, #44
01208                 | _hng030rm_spin2_setbordercolor_ret
01208     2D 00 64 FD | 	ret
0120c                 | 
0120c                 | ' 
0120c                 | ' ''---------- Output a char at the cursor position, move the cursor
0120c                 | ' 
0120c                 | ' pub putchar(achar) | c,x,y
0120c                 | _hng030rm_spin2_putchar
0120c     12 5A 05 F6 | 	mov	COUNT_, #18
01210     B0 00 A0 FD | 	call	#pushregs_
01214     22 4D 02 F6 | 	mov	local01, arg01
01218                 | ' 
01218                 | ' if achar==10
01218     0A 4C 0E F2 | 	cmp	local01, #10 wz
0121c     58 00 90 5D |  if_ne	jmp	#LR__0019
01220                 | '   crlf()
01220                 | ' 
01220                 | ' cursor_x:=0
01220     34 0C 06 F1 | 	add	objptr, #52
01224     06 01 48 FC | 	wrbyte	#0, objptr
01228                 | ' cursor_y+=1
01228     01 0C 06 F1 | 	add	objptr, #1
0122c     06 4F C2 FA | 	rdbyte	local02, objptr
01230     01 4E 06 F1 | 	add	local02, #1
01234     06 4F 42 FC | 	wrbyte	local02, objptr
01238                 | ' if cursor_y>lines-1
01238     5F 0C 06 F1 | 	add	objptr, #95
0123c     06 4F 02 FB | 	rdlong	local02, objptr
01240     01 4E 86 F1 | 	sub	local02, #1
01244     5F 0C 86 F1 | 	sub	objptr, #95
01248     06 51 C2 FA | 	rdbyte	local03, objptr
0124c     35 0C 86 F1 | 	sub	objptr, #53
01250     27 51 5A F2 | 	cmps	local03, local02 wcz
01254     38 01 90 ED |  if_be	jmp	#LR__0022
01258                 | '   scrollup()
01258     40 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
0125c     94 0C 06 F1 | 	add	objptr, #148
01260     06 53 02 FB | 	rdlong	local04, objptr
01264     01 52 86 F1 | 	sub	local04, #1
01268                 | '   cursor_y:=lines-1
01268     5F 0C 86 F1 | 	sub	objptr, #95
0126c     06 53 42 FC | 	wrbyte	local04, objptr
01270     35 0C 86 F1 | 	sub	objptr, #53
01274                 | ' else  
01274     18 01 90 FD | 	jmp	#LR__0022
01278                 | LR__0019
01278                 | '   x:=cursor_x
01278     34 0C 06 F1 | 	add	objptr, #52
0127c     06 55 C2 FA | 	rdbyte	local05, objptr
01280                 | '   y:=cursor_y
01280     01 0C 06 F1 | 	add	objptr, #1
01284     06 57 C2 FA | 	rdbyte	local06, objptr
01288     03 0C 06 F1 | 	add	objptr, #3
0128c     06 59 02 FB | 	rdlong	local07, objptr
01290     18 58 66 F0 | 	shl	local07, #24
01294     04 0C 06 F1 | 	add	objptr, #4
01298     06 5B 02 FB | 	rdlong	local08, objptr
0129c     10 5A 66 F0 | 	shl	local08, #16
012a0     2D 59 02 F1 | 	add	local07, local08
012a4                 | '   c:=write_color<<24+write_background<<16
012a4     54 0C 06 F1 | 	add	objptr, #84
012a8     06 5D 02 FB | 	rdlong	local09, objptr
012ac     90 0C 86 F1 | 	sub	objptr, #144
012b0     2B 5D 02 FD | 	qmul	local09, local06
012b4     18 5E 62 FD | 	getqx	local10
012b8     2A 5F 02 F1 | 	add	local10, local05
012bc     02 5E 66 F0 | 	shl	local10, #2
012c0     06 61 02 FB | 	rdlong	local11, objptr
012c4     2F 61 02 F1 | 	add	local11, local10
012c8     30 63 02 FB | 	rdlong	local12, local11
012cc     7F 00 00 FF 
012d0     FF 63 06 F5 | 	and	local12, ##65535
012d4     2C 63 42 F5 | 	or	local12, local07
012d8                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
012d8     30 63 62 FC | 	wrlong	local12, local11
012dc     90 0C 06 F1 | 	add	objptr, #144
012e0     06 5D 02 FB | 	rdlong	local09, objptr
012e4     90 0C 86 F1 | 	sub	objptr, #144
012e8     2B 5D 02 FD | 	qmul	local09, local06
012ec     18 64 62 FD | 	getqx	local13
012f0     2A 65 02 F1 | 	add	local13, local05
012f4     02 64 66 F0 | 	shl	local13, #2
012f8     06 67 02 FB | 	rdlong	local14, objptr
012fc     32 67 02 F1 | 	add	local14, local13
01300     33 69 02 FB | 	rdlong	local15, local14
01304     FF 68 26 F5 | 	andn	local15, #255
01308     FF 4C 06 F5 | 	and	local01, #255
0130c     26 69 42 F5 | 	or	local15, local01
01310                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
01310     33 69 62 FC | 	wrlong	local15, local14
01314                 | '   cursor_x+=1
01314     34 0C 06 F1 | 	add	objptr, #52
01318     06 6B C2 FA | 	rdbyte	local16, objptr
0131c     01 6A 06 F1 | 	add	local16, #1
01320     06 6B 42 FC | 	wrbyte	local16, objptr
01324                 | '   if cursor_x==cpl
01324     06 6B C2 FA | 	rdbyte	local16, objptr
01328     5C 0C 06 F1 | 	add	objptr, #92
0132c     06 6D 02 FB | 	rdlong	local17, objptr
01330     90 0C 86 F1 | 	sub	objptr, #144
01334     36 6B 0A F2 | 	cmp	local16, local17 wz
01338     54 00 90 5D |  if_ne	jmp	#LR__0021
0133c                 | '     cursor_x:=0
0133c     34 0C 06 F1 | 	add	objptr, #52
01340     06 01 48 FC | 	wrbyte	#0, objptr
01344                 | '     cursor_y+=1
01344     01 0C 06 F1 | 	add	objptr, #1
01348     06 6B C2 FA | 	rdbyte	local16, objptr
0134c     01 6A 06 F1 | 	add	local16, #1
01350     06 6B 42 FC | 	wrbyte	local16, objptr
01354                 | '     if cursor_y>lines-1
01354     5F 0C 06 F1 | 	add	objptr, #95
01358     06 6B 02 FB | 	rdlong	local16, objptr
0135c     01 6A 86 F1 | 	sub	local16, #1
01360     5F 0C 86 F1 | 	sub	objptr, #95
01364     06 6D C2 FA | 	rdbyte	local17, objptr
01368     35 0C 86 F1 | 	sub	objptr, #53
0136c     35 6D 5A F2 | 	cmps	local17, local16 wcz
01370     1C 00 90 ED |  if_be	jmp	#LR__0020
01374                 | '       scrollup()
01374     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
01378     94 0C 06 F1 | 	add	objptr, #148
0137c     06 6F 02 FB | 	rdlong	local18, objptr
01380     01 6E 86 F1 | 	sub	local18, #1
01384                 | '       cursor_y:=lines-1
01384     5F 0C 86 F1 | 	sub	objptr, #95
01388     06 6F 42 FC | 	wrbyte	local18, objptr
0138c     35 0C 86 F1 | 	sub	objptr, #53
01390                 | LR__0020
01390                 | LR__0021
01390                 | LR__0022
01390     AF F0 03 F6 | 	mov	ptra, fp
01394     BF 00 A0 FD | 	call	#popregs_
01398                 | _hng030rm_spin2_putchar_ret
01398     2D 00 64 FD | 	ret
0139c                 | 
0139c                 | ' 
0139c                 | ' ''-----------  Scroll the screen one line up
0139c                 | ' 
0139c                 | ' pub scrollup() | i
0139c                 | _hng030rm_spin2_scrollup
0139c     0A 5A 05 F6 | 	mov	COUNT_, #10
013a0     B0 00 A0 FD | 	call	#pushregs_
013a4     90 0C 06 F1 | 	add	objptr, #144
013a8     06 4D 02 FB | 	rdlong	local01, objptr
013ac     90 0C 86 F1 | 	sub	objptr, #144
013b0     02 4C 66 F0 | 	shl	local01, #2
013b4     06 47 02 FB | 	rdlong	arg02, objptr
013b8     26 47 02 F1 | 	add	arg02, local01
013bc     30 0C 06 F1 | 	add	objptr, #48
013c0     06 49 02 FB | 	rdlong	arg03, objptr
013c4     60 0C 06 F1 | 	add	objptr, #96
013c8     06 4F 02 FB | 	rdlong	local02, objptr
013cc     90 0C 86 F1 | 	sub	objptr, #144
013d0     27 49 82 F1 | 	sub	arg03, local02
013d4                 | ' 
013d4                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
013d4     06 45 02 FB | 	rdlong	arg01, objptr
013d8     D4 0C B0 FD | 	call	#__system__longmove
013dc                 | ' repeat i from buflen-cpl to buflen-1
013dc     30 0C 06 F1 | 	add	objptr, #48
013e0     06 51 02 FB | 	rdlong	local03, objptr
013e4     60 0C 06 F1 | 	add	objptr, #96
013e8     06 4F 02 FB | 	rdlong	local02, objptr
013ec     27 51 82 F1 | 	sub	local03, local02
013f0     60 0C 86 F1 | 	sub	objptr, #96
013f4     06 53 02 FB | 	rdlong	local04, objptr
013f8     01 52 86 F1 | 	sub	local04, #1
013fc     06 55 02 FB | 	rdlong	local05, objptr
01400     60 0C 06 F1 | 	add	objptr, #96
01404     06 57 02 FB | 	rdlong	local06, objptr
01408     90 0C 86 F1 | 	sub	objptr, #144
0140c     2B 55 82 F1 | 	sub	local05, local06
01410     2A 53 5A F2 | 	cmps	local04, local05 wcz
01414     01 58 06 16 |  if_a	mov	local07, #1
01418     01 58 66 E6 |  if_be	neg	local07, #1
0141c     2C 53 02 F1 | 	add	local04, local07
01420     0C EC 9F FE | 	loc	pa,	#(@LR__0024-@LR__0023)
01424     93 00 A0 FD | 	call	#FCACHE_LOAD_
01428                 | LR__0023
01428     28 5B 02 F6 | 	mov	local08, local03
0142c     02 5A 66 F0 | 	shl	local08, #2
01430     06 5D 02 FB | 	rdlong	local09, objptr
01434     2D 5D 02 F1 | 	add	local09, local08
01438     2E 5F 02 FB | 	rdlong	local10, local09
0143c     80 FF 7F FF 
01440     00 5E 06 F5 | 	and	local10, ##-65536
01444     20 5E 46 F5 | 	or	local10, #32
01448                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
01448     2E 5F 62 FC | 	wrlong	local10, local09
0144c     2C 51 02 F1 | 	add	local03, local07
01450     29 51 0A F2 | 	cmp	local03, local04 wz
01454     D0 FF 9F 5D |  if_ne	jmp	#LR__0023
01458                 | LR__0024
01458     AF F0 03 F6 | 	mov	ptra, fp
0145c     BF 00 A0 FD | 	call	#popregs_
01460                 | _hng030rm_spin2_scrollup_ret
01460     2D 00 64 FD | 	ret
01464                 | 
01464                 | ' 
01464                 | ' 
01464                 | ' 
01464                 | ' '*************************************************************************
01464                 | ' '                                                                        *
01464                 | ' '  Mode setting and driver start                                                          *
01464                 | ' '                                                                        *
01464                 | ' '*************************************************************************
01464                 | ' 
01464                 | ' ''---------  Set the graphics mode
01464                 | ' 
01464                 | ' 
01464                 | ' 
01464                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
01464                 | _hng030rm_spin2_setmode
01464     50 5A 05 F6 | 	mov	COUNT_, #80
01468     B0 00 A0 FD | 	call	#pushregs_
0146c     22 4D 02 F6 | 	mov	local01, arg01
01470                 | ' 
01470                 | ' '' mode:tn_bb_cc_vv_hh
01470                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
01470                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
01470                 | ' 
01470                 | ' if mode==(512+192+48)
01470     01 00 00 FF 
01474     F0 4C 0E F2 | 	cmp	local01, ##752 wz
01478                 | '   return 'no RAM
01478     1C 0A 90 AD |  if_e	jmp	#LR__0065
0147c                 | ' 
0147c                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
0147c     26 4F 02 F6 | 	mov	local02, local01
01480     06 4E 46 F0 | 	shr	local02, #6
01484     07 4E 06 F5 | 	and	local02, #7
01488     08 4E 26 F3 | 	fle	local02, #8
0148c     27 51 02 F6 | 	mov	local03, local02
01490     30 50 62 FD | 	jmprel	local03
01494                 | LR__0025
01494     20 00 90 FD | 	jmp	#LR__0026
01498     58 00 90 FD | 	jmp	#LR__0027
0149c     90 00 90 FD | 	jmp	#LR__0028
014a0     C8 00 90 FD | 	jmp	#LR__0029
014a4     00 01 90 FD | 	jmp	#LR__0030
014a8     38 01 90 FD | 	jmp	#LR__0031
014ac     70 01 90 FD | 	jmp	#LR__0032
014b0     A8 01 90 FD | 	jmp	#LR__0033
014b4     E4 01 90 FD | 	jmp	#LR__0034
014b8                 | LR__0026
014b8                 | ' 
014b8                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
014b8     50 0C 06 F1 | 	add	objptr, #80
014bc     06 45 02 F6 | 	mov	arg01, objptr
014c0     50 0C 86 F1 | 	sub	objptr, #80
014c4     0E 00 00 FF 
014c8     58 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
014cc     09 53 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
014d0     29 55 02 F6 | 	mov	local05, local04
014d4     10 56 06 F6 | 	mov	local06, #16
014d8     2A 47 02 F6 | 	mov	arg02, local05
014dc     10 48 06 F6 | 	mov	arg03, #16
014e0     0E 00 00 FF 
014e4     58 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
014e8     C4 0B B0 FD | 	call	#__system__longmove
014ec     0F 59 02 F6 | 	mov	local07, result1
014f0     A8 01 90 FD | 	jmp	#LR__0034
014f4                 | LR__0027
014f4                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
014f4     50 0C 06 F1 | 	add	objptr, #80
014f8     06 45 02 F6 | 	mov	arg01, objptr
014fc     50 0C 86 F1 | 	sub	objptr, #80
01500     0E 00 00 FF 
01504     98 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
01508     09 53 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
0150c     29 55 02 F6 | 	mov	local05, local04
01510     10 56 06 F6 | 	mov	local06, #16
01514     2A 47 02 F6 | 	mov	arg02, local05
01518     10 48 06 F6 | 	mov	arg03, #16
0151c     0E 00 00 FF 
01520     98 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
01524     88 0B B0 FD | 	call	#__system__longmove
01528     0F 59 02 F6 | 	mov	local07, result1
0152c     6C 01 90 FD | 	jmp	#LR__0034
01530                 | LR__0028
01530                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
01530     50 0C 06 F1 | 	add	objptr, #80
01534     06 45 02 F6 | 	mov	arg01, objptr
01538     50 0C 86 F1 | 	sub	objptr, #80
0153c     0E 00 00 FF 
01540     D8 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
01544     09 53 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01548     29 55 02 F6 | 	mov	local05, local04
0154c     10 56 06 F6 | 	mov	local06, #16
01550     2A 47 02 F6 | 	mov	arg02, local05
01554     10 48 06 F6 | 	mov	arg03, #16
01558     0E 00 00 FF 
0155c     D8 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
01560     4C 0B B0 FD | 	call	#__system__longmove
01564     0F 59 02 F6 | 	mov	local07, result1
01568     30 01 90 FD | 	jmp	#LR__0034
0156c                 | LR__0029
0156c                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
0156c     50 0C 06 F1 | 	add	objptr, #80
01570     06 45 02 F6 | 	mov	arg01, objptr
01574     50 0C 86 F1 | 	sub	objptr, #80
01578     0E 00 00 FF 
0157c     18 13 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
01580     09 53 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01584     29 55 02 F6 | 	mov	local05, local04
01588     10 56 06 F6 | 	mov	local06, #16
0158c     2A 47 02 F6 | 	mov	arg02, local05
01590     10 48 06 F6 | 	mov	arg03, #16
01594     0E 00 00 FF 
01598     18 13 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
0159c     10 0B B0 FD | 	call	#__system__longmove
015a0     0F 59 02 F6 | 	mov	local07, result1
015a4     F4 00 90 FD | 	jmp	#LR__0034
015a8                 | LR__0030
015a8                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
015a8     50 0C 06 F1 | 	add	objptr, #80
015ac     06 45 02 F6 | 	mov	arg01, objptr
015b0     50 0C 86 F1 | 	sub	objptr, #80
015b4     0E 00 00 FF 
015b8     58 13 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
015bc     09 53 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
015c0     29 55 02 F6 | 	mov	local05, local04
015c4     10 56 06 F6 | 	mov	local06, #16
015c8     2A 47 02 F6 | 	mov	arg02, local05
015cc     10 48 06 F6 | 	mov	arg03, #16
015d0     0E 00 00 FF 
015d4     58 13 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
015d8     D4 0A B0 FD | 	call	#__system__longmove
015dc     0F 59 02 F6 | 	mov	local07, result1
015e0     B8 00 90 FD | 	jmp	#LR__0034
015e4                 | LR__0031
015e4                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
015e4     50 0C 06 F1 | 	add	objptr, #80
015e8     06 45 02 F6 | 	mov	arg01, objptr
015ec     50 0C 86 F1 | 	sub	objptr, #80
015f0     0E 00 00 FF 
015f4     98 13 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
015f8     09 53 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
015fc     29 55 02 F6 | 	mov	local05, local04
01600     10 56 06 F6 | 	mov	local06, #16
01604     2A 47 02 F6 | 	mov	arg02, local05
01608     10 48 06 F6 | 	mov	arg03, #16
0160c     0E 00 00 FF 
01610     98 13 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
01614     98 0A B0 FD | 	call	#__system__longmove
01618     0F 59 02 F6 | 	mov	local07, result1
0161c     7C 00 90 FD | 	jmp	#LR__0034
01620                 | LR__0032
01620                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
01620     50 0C 06 F1 | 	add	objptr, #80
01624     06 45 02 F6 | 	mov	arg01, objptr
01628     50 0C 86 F1 | 	sub	objptr, #80
0162c     0E 00 00 FF 
01630     D8 13 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
01634     09 53 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01638     29 55 02 F6 | 	mov	local05, local04
0163c     10 56 06 F6 | 	mov	local06, #16
01640     2A 47 02 F6 | 	mov	arg02, local05
01644     10 48 06 F6 | 	mov	arg03, #16
01648     0E 00 00 FF 
0164c     D8 13 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
01650     5C 0A B0 FD | 	call	#__system__longmove
01654     0F 59 02 F6 | 	mov	local07, result1
01658     40 00 90 FD | 	jmp	#LR__0034
0165c                 | LR__0033
0165c                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
0165c     50 0C 06 F1 | 	add	objptr, #80
01660     06 5B 02 F6 | 	mov	local08, objptr
01664     2D 5D 02 F6 | 	mov	local09, local08
01668     0F 00 00 FF 
0166c     18 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
01670     09 53 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01674     29 55 02 F6 | 	mov	local05, local04
01678     10 56 06 F6 | 	mov	local06, #16
0167c     2E 45 02 F6 | 	mov	arg01, local09
01680     2A 47 02 F6 | 	mov	arg02, local05
01684     10 48 06 F6 | 	mov	arg03, #16
01688     50 0C 86 F1 | 	sub	objptr, #80
0168c     0F 00 00 FF 
01690     18 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
01694     18 0A B0 FD | 	call	#__system__longmove
01698     0F 59 02 F6 | 	mov	local07, result1
0169c                 | LR__0034
0169c                 | ' 
0169c                 | ' ' 4-bit graphics: do nothing with timings :)
0169c                 | ' if mode<512
0169c     01 00 00 FF 
016a0     00 4C 5E F2 | 	cmps	local01, ##512 wcz
016a4     20 00 90 3D |  if_ae	jmp	#LR__0035
016a8     0C 00 00 FF 
016ac     58 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
016b0     09 5F 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
016b4                 | '   palette_ptr:=@ataripalette
016b4     18 0C 06 F1 | 	add	objptr, #24
016b8     06 5F 62 FC | 	wrlong	local10, objptr
016bc     18 0C 86 F1 | 	sub	objptr, #24
016c0     0C 00 00 FF 
016c4     58 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
016c8                 | LR__0035
016c8                 | ' 
016c8                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
016c8     26 4F 02 F6 | 	mov	local02, local01
016cc     01 00 00 FF 
016d0     30 4E 06 F5 | 	and	local02, ##560
016d4     01 00 00 FF 
016d8     30 4E 0E F2 | 	cmp	local02, ##560 wz
016dc     48 00 90 5D |  if_ne	jmp	#LR__0036
016e0                 | '   timings[5]:=4
016e0     64 0C 06 F1 | 	add	objptr, #100
016e4     06 09 68 FC | 	wrlong	#4, objptr
016e8     18 0C 06 F1 | 	add	objptr, #24
016ec     06 61 02 FB | 	rdlong	local11, objptr
016f0     01 60 66 F0 | 	shl	local11, #1
016f4                 | '   timings[11]:=timings[11]<<1
016f4     06 61 62 FC | 	wrlong	local11, objptr
016f8                 | '   putpixel:=p8
016f8     6C 0C 06 F1 | 	add	objptr, #108
016fc     06 4F 02 FB | 	rdlong	local02, objptr
01700     10 0C 86 F1 | 	sub	objptr, #16
01704     06 4F 62 FC | 	wrlong	local02, objptr
01708     0C 00 00 FF 
0170c     58 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
01710     09 63 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
01714                 | '   palette_ptr:=@ataripalette
01714     C0 0C 86 F1 | 	sub	objptr, #192
01718     06 63 62 FC | 	wrlong	local12, objptr
0171c     18 0C 86 F1 | 	sub	objptr, #24
01720     0C 00 00 FF 
01724     58 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
01728                 | LR__0036
01728                 | ' 
01728                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
01728     26 4F 02 F6 | 	mov	local02, local01
0172c     01 00 00 FF 
01730     30 4E 06 F5 | 	and	local02, ##560
01734     01 00 00 FF 
01738     10 4E 0E F2 | 	cmp	local02, ##528 wz
0173c     48 00 90 5D |  if_ne	jmp	#LR__0037
01740                 | '   timings[5]:=16
01740     64 0C 06 F1 | 	add	objptr, #100
01744     06 21 68 FC | 	wrlong	#16, objptr
01748     18 0C 06 F1 | 	add	objptr, #24
0174c     06 65 02 FB | 	rdlong	local13, objptr
01750     01 64 46 F0 | 	shr	local13, #1
01754                 | '   timings[11]:=timings[11]>>1
01754     06 65 62 FC | 	wrlong	local13, objptr
01758                 | '   putpixel:=p2
01758     64 0C 06 F1 | 	add	objptr, #100
0175c     06 4F 02 FB | 	rdlong	local02, objptr
01760     08 0C 86 F1 | 	sub	objptr, #8
01764     06 4F 62 FC | 	wrlong	local02, objptr
01768     0C 00 00 FF 
0176c     08 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
01770     09 67 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
01774                 | '   palette_ptr:=@fourcolors
01774     C0 0C 86 F1 | 	sub	objptr, #192
01778     06 67 62 FC | 	wrlong	local14, objptr
0177c     18 0C 86 F1 | 	sub	objptr, #24
01780     0C 00 00 FF 
01784     08 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
01788                 | LR__0037
01788                 | ' 
01788                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
01788     26 4F 02 F6 | 	mov	local02, local01
0178c     01 00 00 FF 
01790     30 4E 06 F5 | 	and	local02, ##560
01794     01 00 00 FF 
01798     00 4E 0E F2 | 	cmp	local02, ##512 wz
0179c     48 00 90 5D |  if_ne	jmp	#LR__0038
017a0                 | '   timings[5]:=32
017a0     64 0C 06 F1 | 	add	objptr, #100
017a4     06 41 68 FC | 	wrlong	#32, objptr
017a8     18 0C 06 F1 | 	add	objptr, #24
017ac     06 69 02 FB | 	rdlong	local15, objptr
017b0     02 68 46 F0 | 	shr	local15, #2
017b4                 | '   timings[11]:=timings[11]>>2
017b4     06 69 62 FC | 	wrlong	local15, objptr
017b8                 | '   putpixel:=p1
017b8     60 0C 06 F1 | 	add	objptr, #96
017bc     06 4F 02 FB | 	rdlong	local02, objptr
017c0     04 0C 86 F1 | 	sub	objptr, #4
017c4     06 4F 62 FC | 	wrlong	local02, objptr
017c8     0C 00 00 FF 
017cc     00 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
017d0     09 6B 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
017d4                 | '   palette_ptr:=@twocolors
017d4     C0 0C 86 F1 | 	sub	objptr, #192
017d8     06 6B 62 FC | 	wrlong	local16, objptr
017dc     18 0C 86 F1 | 	sub	objptr, #24
017e0     0C 00 00 FF 
017e4     00 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
017e8                 | LR__0038
017e8                 | ' 
017e8                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
017e8     26 4F 02 F6 | 	mov	local02, local01
017ec     01 00 00 FF 
017f0     30 4E 06 F5 | 	and	local02, ##560
017f4     01 00 00 FF 
017f8     20 4E 0E F2 | 	cmp	local02, ##544 wz
017fc     30 00 90 5D |  if_ne	jmp	#LR__0039
01800                 | '   putpixel:=p4
01800     E4 0C 06 F1 | 	add	objptr, #228
01804     06 4F 02 FB | 	rdlong	local02, objptr
01808     0C 0C 86 F1 | 	sub	objptr, #12
0180c     06 4F 62 FC | 	wrlong	local02, objptr
01810     0C 00 00 FF 
01814     18 12 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
01818     09 6D 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
0181c                 | '   palette_ptr:=@vga16
0181c     C0 0C 86 F1 | 	sub	objptr, #192
01820     06 6D 62 FC | 	wrlong	local17, objptr
01824     18 0C 86 F1 | 	sub	objptr, #24
01828     0C 00 00 FF 
0182c     18 12 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
01830                 | LR__0039
01830                 | ' 
01830                 | ' repeat i from 0 to 4
01830     00 6E 06 F6 | 	mov	local18, #0
01834     0C E8 9F FE | 	loc	pa,	#(@LR__0041-@LR__0040)
01838     93 00 A0 FD | 	call	#FCACHE_LOAD_
0183c                 | LR__0040
0183c     37 71 02 F6 | 	mov	local19, local18
01840     02 70 66 F0 | 	shl	local19, #2
01844     50 0C 06 F1 | 	add	objptr, #80
01848     06 71 02 F1 | 	add	local19, objptr
0184c     2C 0C 86 F1 | 	sub	objptr, #44
01850     06 73 02 FB | 	rdlong	local20, objptr
01854     24 0C 86 F1 | 	sub	objptr, #36
01858     11 72 66 F0 | 	shl	local20, #17
0185c     38 75 02 FB | 	rdlong	local21, local19
01860     39 75 02 F1 | 	add	local21, local20
01864     3A 77 02 F6 | 	mov	local22, local21
01868     80 40 38 FF 
0186c     00 76 06 F1 | 	add	local22, ##1887502336
01870                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
01870     38 77 62 FC | 	wrlong	local22, local19
01874     01 6E 06 F1 | 	add	local18, #1
01878     05 6E 5E F2 | 	cmps	local18, #5 wcz
0187c     BC FF 9F CD |  if_b	jmp	#LR__0040
01880                 | LR__0041
01880     24 0C 06 F1 | 	add	objptr, #36
01884     06 79 02 FB | 	rdlong	local23, objptr
01888     11 78 66 F0 | 	shl	local23, #17
0188c     40 0C 06 F1 | 	add	objptr, #64
01890     06 7B 02 FB | 	rdlong	local24, objptr
01894     3C 7B 02 F1 | 	add	local24, local23
01898                 | ' timings[5]:=timings[5]+hdmibase<<17
01898     06 7B 62 FC | 	wrlong	local24, objptr
0189c                 | ' clkfreq:=timings[13]
0189c     20 0C 06 F1 | 	add	objptr, #32
018a0     06 4F 02 FB | 	rdlong	local02, objptr
018a4     14 4E 66 FC | 	wrlong	local02, #20
018a8                 | ' hubset(timings[14])
018a8     04 0C 06 F1 | 	add	objptr, #4
018ac     06 45 02 FB | 	rdlong	arg01, objptr
018b0     88 0C 86 F1 | 	sub	objptr, #136
018b4     00 44 62 FD | 	hubset	arg01
018b8                 | ' waitms(1)
018b8     01 44 06 F6 | 	mov	arg01, #1
018bc     C4 09 B0 FD | 	call	#__system___waitms
018c0     26 7D 02 F6 | 	mov	local25, local01
018c4     03 7C 06 F5 | 	and	local25, #3
018c8     3E 7F C2 F9 | 	decod	local26, local25
018cc                 | ' 
018cc                 | ' 
018cc                 | ' xzoom:=1<<(mode & 3)
018cc     CC 0C 06 F1 | 	add	objptr, #204
018d0     06 7F 62 FC | 	wrlong	local26, objptr
018d4                 | ' 
018d4                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
018d4     3F 5B 02 F6 | 	mov	local08, local26
018d8     CC 0C 86 F1 | 	sub	objptr, #204
018dc     08 5A 0E F2 | 	cmp	local08, #8 wz
018e0     24 00 90 5D |  if_ne	jmp	#LR__0042
018e4     26 5D 02 F6 | 	mov	local09, local01
018e8     04 5C 46 F0 | 	shr	local09, #4
018ec     03 5C 06 F5 | 	and	local09, #3
018f0     03 5C 0E F2 | 	cmp	local09, #3 wz
018f4     10 00 90 AD |  if_e	jmp	#LR__0042
018f8                 | '   xzoom:=4
018f8     04 4E 06 F6 | 	mov	local02, #4
018fc     CC 0C 06 F1 | 	add	objptr, #204
01900     06 09 68 FC | 	wrlong	#4, objptr
01904     CC 0C 86 F1 | 	sub	objptr, #204
01908                 | LR__0042
01908     26 81 02 F6 | 	mov	local27, local01
0190c     02 80 46 F0 | 	shr	local27, #2
01910     03 80 06 F5 | 	and	local27, #3
01914     40 83 C2 F9 | 	decod	local28, local27
01918                 | ' 
01918                 | ' yzoom:=1<<((mode>>2) & 3)
01918     D0 0C 06 F1 | 	add	objptr, #208
0191c     06 83 62 FC | 	wrlong	local28, objptr
01920     04 0C 86 F1 | 	sub	objptr, #4
01924     06 5B 02 FB | 	rdlong	local08, objptr
01928     04 0C 06 F1 | 	add	objptr, #4
0192c     06 53 02 FB | 	rdlong	local04, objptr
01930     29 5B 02 FD | 	qmul	local08, local04
01934     18 84 62 FD | 	getqx	local29
01938                 | ' azoom:=xzoom*yzoom
01938     04 0C 06 F1 | 	add	objptr, #4
0193c     06 85 62 FC | 	wrlong	local29, objptr
01940                 | ' 
01940                 | ' cpl:=timings[11]
01940     58 0C 86 F1 | 	sub	objptr, #88
01944     06 4F 02 FB | 	rdlong	local02, objptr
01948     14 0C 06 F1 | 	add	objptr, #20
0194c     06 4F 62 FC | 	wrlong	local02, objptr
01950     90 0C 86 F1 | 	sub	objptr, #144
01954                 | ' if (mode<512)
01954     01 00 00 FF 
01958     00 4C 5E F2 | 	cmps	local01, ##512 wcz
0195c     60 00 90 3D |  if_ae	jmp	#LR__0043
01960     80 0C 06 F1 | 	add	objptr, #128
01964     06 ED 02 FB | 	rdlong	muldiva_, objptr
01968     04 EC 46 F0 | 	shr	muldiva_, #4
0196c     50 0C 06 F1 | 	add	objptr, #80
01970     06 EF 02 FB | 	rdlong	muldivb_, objptr
01974     D0 0C 86 F1 | 	sub	objptr, #208
01978     CC 00 A0 FD | 	call	#unsdivide_
0197c                 | '   lines:=(timings[12]>>4)+/yzoom
0197c     94 0C 06 F1 | 	add	objptr, #148
01980     06 EF 62 FC | 	wrlong	muldivb_, objptr
01984                 | '   if ((timings[12]>>4)+//yzoom) <>0
01984     14 0C 86 F1 | 	sub	objptr, #20
01988     06 ED 02 FB | 	rdlong	muldiva_, objptr
0198c     04 EC 46 F0 | 	shr	muldiva_, #4
01990     50 0C 06 F1 | 	add	objptr, #80
01994     06 EF 02 FB | 	rdlong	muldivb_, objptr
01998     D0 0C 86 F1 | 	sub	objptr, #208
0199c     CC 00 A0 FD | 	call	#unsdivide_
019a0     00 EC 0E F2 | 	cmp	muldiva_, #0 wz
019a4     AC 00 90 AD |  if_e	jmp	#LR__0046
019a8                 | '     lines +=1
019a8     94 0C 06 F1 | 	add	objptr, #148
019ac     06 4F 02 FB | 	rdlong	local02, objptr
019b0     01 4E 06 F1 | 	add	local02, #1
019b4     06 4F 62 FC | 	wrlong	local02, objptr
019b8     94 0C 86 F1 | 	sub	objptr, #148
019bc                 | ' 
019bc                 | ' else
019bc     94 00 90 FD | 	jmp	#LR__0046
019c0                 | LR__0043
019c0     80 0C 06 F1 | 	add	objptr, #128
019c4     06 ED 02 FB | 	rdlong	muldiva_, objptr
019c8     50 0C 06 F1 | 	add	objptr, #80
019cc     06 EF 02 FB | 	rdlong	muldivb_, objptr
019d0     D0 0C 86 F1 | 	sub	objptr, #208
019d4     D0 00 A0 FD | 	call	#divide_
019d8                 | '   lines:=timings[12]/yzoom
019d8     94 0C 06 F1 | 	add	objptr, #148
019dc     06 EF 62 FC | 	wrlong	muldivb_, objptr
019e0                 | '   if cpl//xzoom==0
019e0     04 0C 86 F1 | 	sub	objptr, #4
019e4     06 ED 02 FB | 	rdlong	muldiva_, objptr
019e8     3C 0C 06 F1 | 	add	objptr, #60
019ec     06 EF 02 FB | 	rdlong	muldivb_, objptr
019f0     CC 0C 86 F1 | 	sub	objptr, #204
019f4     D0 00 A0 FD | 	call	#divide_
019f8     00 EC 0E F2 | 	cmp	muldiva_, #0 wz
019fc     28 00 90 5D |  if_ne	jmp	#LR__0044
01a00                 | '     cpl:=cpl/xzoom
01a00     90 0C 06 F1 | 	add	objptr, #144
01a04     06 ED 02 FB | 	rdlong	muldiva_, objptr
01a08     3C 0C 06 F1 | 	add	objptr, #60
01a0c     06 EF 02 FB | 	rdlong	muldivb_, objptr
01a10     CC 0C 86 F1 | 	sub	objptr, #204
01a14     D0 00 A0 FD | 	call	#divide_
01a18     90 0C 06 F1 | 	add	objptr, #144
01a1c     06 EF 62 FC | 	wrlong	muldivb_, objptr
01a20     90 0C 86 F1 | 	sub	objptr, #144
01a24                 | '   else
01a24     2C 00 90 FD | 	jmp	#LR__0045
01a28                 | LR__0044
01a28     90 0C 06 F1 | 	add	objptr, #144
01a2c     06 ED 02 FB | 	rdlong	muldiva_, objptr
01a30     3C 0C 06 F1 | 	add	objptr, #60
01a34     06 EF 02 FB | 	rdlong	muldivb_, objptr
01a38     CC 0C 86 F1 | 	sub	objptr, #204
01a3c     D0 00 A0 FD | 	call	#divide_
01a40     77 87 02 F6 | 	mov	local30, muldivb_
01a44     01 86 06 F1 | 	add	local30, #1
01a48                 | '     cpl:=cpl/xzoom+1
01a48     90 0C 06 F1 | 	add	objptr, #144
01a4c     06 87 62 FC | 	wrlong	local30, objptr
01a50     90 0C 86 F1 | 	sub	objptr, #144
01a54                 | LR__0045
01a54                 | LR__0046
01a54     90 0C 06 F1 | 	add	objptr, #144
01a58     06 5B 02 FB | 	rdlong	local08, objptr
01a5c     04 0C 06 F1 | 	add	objptr, #4
01a60     06 53 02 FB | 	rdlong	local04, objptr
01a64     29 5B 02 FD | 	qmul	local08, local04
01a68     18 88 62 FD | 	getqx	local31
01a6c                 | ' 
01a6c                 | ' buflen:=(cpl*lines)
01a6c     64 0C 86 F1 | 	sub	objptr, #100
01a70     06 89 62 FC | 	wrlong	local31, objptr
01a74     30 0C 86 F1 | 	sub	objptr, #48
01a78     02 88 66 F0 | 	shl	local31, #2
01a7c     13 8A C6 F9 | 	decod	local32, #19
01a80     44 8B 82 F1 | 	sub	local32, local31
01a84                 | ' buf_ptr:=$80000-4*buflen
01a84     06 8B 62 FC | 	wrlong	local32, objptr
01a88     50 0C 06 F1 | 	add	objptr, #80
01a8c     06 8D 02 F6 | 	mov	local33, objptr
01a90                 | ' mode_ptr:=@timings
01a90     3C 0C 86 F1 | 	sub	objptr, #60
01a94     06 8D 62 FC | 	wrlong	local33, objptr
01a98                 | ' graphmode:=mode
01a98     B0 0C 06 F1 | 	add	objptr, #176
01a9c     06 4D 62 FC | 	wrlong	local01, objptr
01aa0     C4 0C 86 F1 | 	sub	objptr, #196
01aa4                 | ' makedl(mode)
01aa4     26 45 02 F6 | 	mov	arg01, local01
01aa8                 | ' 
01aa8                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
01aa8                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
01aa8                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
01aa8                 | ' 
01aa8                 | ' '   0 - display a up/down border line
01aa8                 | ' 
01aa8                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
01aa8                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
01aa8                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
01aa8                 | ' '    nnnn - font line to display, 0..15
01aa8                 | ' '    llllll - character line, determines the cursor Y position
01aa8                 | ' 
01aa8                 | ' 
01aa8                 | ' if (mode &256==0)
01aa8     00 45 CE F7 | 	test	arg01, #256 wz
01aac     1C 00 90 5D |  if_ne	jmp	#LR__0047
01ab0     06 8F 02 FB | 	rdlong	local34, objptr
01ab4     04 00 00 FF 
01ab8     00 8F 86 F1 | 	sub	local34, ##2304
01abc                 | '   dl_ptr:=buf_ptr-4*576
01abc     1C 0C 06 F1 | 	add	objptr, #28
01ac0     06 8F 62 FC | 	wrlong	local34, objptr
01ac4     1C 0C 86 F1 | 	sub	objptr, #28
01ac8                 | ' else
01ac8     18 00 90 FD | 	jmp	#LR__0048
01acc                 | LR__0047
01acc     06 91 02 FB | 	rdlong	local35, objptr
01ad0     03 00 00 FF 
01ad4     C0 91 86 F1 | 	sub	local35, ##1984
01ad8                 | '   dl_ptr:=buf_ptr-4*496
01ad8     1C 0C 06 F1 | 	add	objptr, #28
01adc     06 91 62 FC | 	wrlong	local35, objptr
01ae0     1C 0C 86 F1 | 	sub	objptr, #28
01ae4                 | LR__0048
01ae4     22 93 02 F6 | 	mov	local36, arg01
01ae8     02 92 46 F0 | 	shr	local36, #2
01aec     03 92 06 F5 | 	and	local36, #3
01af0                 | '  ' dl_ptr:=buf_ptr-4*540
01af0                 | ' 
01af0                 | ' vzoom:=((mode>>2) & 3)
01af0                 | ' 
01af0                 | ' 
01af0                 | ' if mode<512 '' text modes
01af0     01 00 00 FF 
01af4     00 44 5E F2 | 	cmps	arg01, ##512 wcz
01af8     E4 01 90 3D |  if_ae	jmp	#LR__0056
01afc                 | ' 
01afc                 | '   if timings[6]>0 'borders
01afc     68 0C 06 F1 | 	add	objptr, #104
01b00     06 95 02 FB | 	rdlong	local37, objptr
01b04     68 0C 86 F1 | 	sub	objptr, #104
01b08     00 94 5E F2 | 	cmps	local37, #0 wcz
01b0c     D4 00 90 ED |  if_be	jmp	#LR__0053
01b10                 | '     repeat i from 0 to timings[6]-1 '0 to -1
01b10     00 96 06 F6 | 	mov	local38, #0
01b14     68 0C 06 F1 | 	add	objptr, #104
01b18     06 99 02 FB | 	rdlong	local39, objptr
01b1c     68 0C 86 F1 | 	sub	objptr, #104
01b20     01 98 86 F1 | 	sub	local39, #1
01b24     00 98 5E F2 | 	cmps	local39, #0 wcz
01b28     01 9A 06 16 |  if_a	mov	local40, #1
01b2c     01 9A 66 E6 |  if_be	neg	local40, #1
01b30     4D 9D 02 F6 | 	mov	local41, local40
01b34     4D 99 02 F1 | 	add	local39, local40
01b38     EC E4 9F FE | 	loc	pa,	#(@LR__0050-@LR__0049)
01b3c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01b40                 | LR__0049
01b40     4B 9F 02 F6 | 	mov	local42, local38
01b44     02 9E 66 F0 | 	shl	local42, #2
01b48     1C 0C 06 F1 | 	add	objptr, #28
01b4c     06 A1 02 FB | 	rdlong	local43, objptr
01b50     1C 0C 86 F1 | 	sub	objptr, #28
01b54     4F A1 02 F1 | 	add	local43, local42
01b58                 | '       long[dl_ptr+4*i]:=$0
01b58     50 01 68 FC | 	wrlong	#0, local43
01b5c     4E 97 02 F1 | 	add	local38, local41
01b60     4C 97 0A F2 | 	cmp	local38, local39 wz
01b64     D8 FF 9F 5D |  if_ne	jmp	#LR__0049
01b68                 | LR__0050
01b68                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
01b68     68 0C 06 F1 | 	add	objptr, #104
01b6c     06 97 02 FB | 	rdlong	local38, objptr
01b70     18 0C 06 F1 | 	add	objptr, #24
01b74     06 9B 02 FB | 	rdlong	local40, objptr
01b78     4D 97 02 F1 | 	add	local38, local40
01b7c     0C 0C 06 F1 | 	add	objptr, #12
01b80     06 A3 02 FB | 	rdlong	local44, objptr
01b84     01 A2 86 F1 | 	sub	local44, #1
01b88     24 0C 86 F1 | 	sub	objptr, #36
01b8c     06 A5 02 FB | 	rdlong	local45, objptr
01b90     18 0C 06 F1 | 	add	objptr, #24
01b94     06 A7 02 FB | 	rdlong	local46, objptr
01b98     80 0C 86 F1 | 	sub	objptr, #128
01b9c     53 A5 02 F1 | 	add	local45, local46
01ba0     52 A3 5A F2 | 	cmps	local44, local45 wcz
01ba4     01 A8 06 16 |  if_a	mov	local47, #1
01ba8     01 A8 66 E6 |  if_be	neg	local47, #1
01bac     54 AB 02 F6 | 	mov	local48, local47
01bb0     54 A3 02 F1 | 	add	local44, local47
01bb4     70 E4 9F FE | 	loc	pa,	#(@LR__0052-@LR__0051)
01bb8     93 00 A0 FD | 	call	#FCACHE_LOAD_
01bbc                 | LR__0051
01bbc     4B AD 02 F6 | 	mov	local49, local38
01bc0     02 AC 66 F0 | 	shl	local49, #2
01bc4     1C 0C 06 F1 | 	add	objptr, #28
01bc8     06 AF 02 FB | 	rdlong	local50, objptr
01bcc     1C 0C 86 F1 | 	sub	objptr, #28
01bd0     56 AF 02 F1 | 	add	local50, local49
01bd4                 | '       long[dl_ptr+4*i]:=$0
01bd4     57 01 68 FC | 	wrlong	#0, local50
01bd8     55 97 02 F1 | 	add	local38, local48
01bdc     51 97 0A F2 | 	cmp	local38, local44 wz
01be0     D8 FF 9F 5D |  if_ne	jmp	#LR__0051
01be4                 | LR__0052
01be4                 | LR__0053
01be4     10 B0 06 F6 | 	mov	local51, #16
01be8     49 B1 62 F0 | 	shl	local51, local36
01bec                 | '   lpc:=16<<vzoom
01bec                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
01bec     68 0C 06 F1 | 	add	objptr, #104
01bf0     06 97 02 FB | 	rdlong	local38, objptr
01bf4     4B B3 02 F6 | 	mov	local52, local38
01bf8     18 0C 06 F1 | 	add	objptr, #24
01bfc     06 B5 02 FB | 	rdlong	local53, objptr
01c00     5A B3 02 F1 | 	add	local52, local53
01c04     01 B2 86 F1 | 	sub	local52, #1
01c08     18 0C 86 F1 | 	sub	objptr, #24
01c0c     06 A9 02 FB | 	rdlong	local47, objptr
01c10     68 0C 86 F1 | 	sub	objptr, #104
01c14     54 B3 5A F2 | 	cmps	local52, local47 wcz
01c18     01 B6 06 16 |  if_a	mov	local54, #1
01c1c     01 B6 66 E6 |  if_be	neg	local54, #1
01c20     5B B9 02 F6 | 	mov	local55, local54
01c24     5B B3 02 F1 | 	add	local52, local54
01c28     84 E4 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
01c2c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01c30                 | LR__0054
01c30     4B ED 02 F6 | 	mov	muldiva_, local38
01c34     68 0C 06 F1 | 	add	objptr, #104
01c38     06 BB 02 FB | 	rdlong	local56, objptr
01c3c     68 0C 86 F1 | 	sub	objptr, #104
01c40     5D ED 82 F1 | 	sub	muldiva_, local56
01c44     58 EF 02 F6 | 	mov	muldivb_, local51
01c48     CC 00 A0 FD | 	call	#unsdivide_
01c4c     49 ED 42 F0 | 	shr	muldiva_, local36
01c50                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
01c50     76 BD 02 F6 | 	mov	local57, muldiva_
01c54     4B ED 02 F6 | 	mov	muldiva_, local38
01c58     68 0C 06 F1 | 	add	objptr, #104
01c5c     06 BB 02 FB | 	rdlong	local56, objptr
01c60     68 0C 86 F1 | 	sub	objptr, #104
01c64     5D ED 82 F1 | 	sub	muldiva_, local56
01c68     58 EF 02 F6 | 	mov	muldivb_, local51
01c6c     CC 00 A0 FD | 	call	#unsdivide_
01c70     77 BF 02 F6 | 	mov	local58, muldivb_
01c74                 | '     charline:=(i-timings[6])+/lpc
01c74     90 0C 06 F1 | 	add	objptr, #144
01c78     06 BB 02 FB | 	rdlong	local56, objptr
01c7c     90 0C 86 F1 | 	sub	objptr, #144
01c80     5F BB 02 FD | 	qmul	local56, local58
01c84     18 C0 62 FD | 	getqx	local59
01c88     02 C0 66 F0 | 	shl	local59, #2
01c8c     06 C3 02 FB | 	rdlong	local60, objptr
01c90     60 C3 02 F1 | 	add	local60, local59
01c94     22 C5 02 F6 | 	mov	local61, arg01
01c98     03 C4 06 F5 | 	and	local61, #3
01c9c     62 C3 02 F1 | 	add	local60, local61
01ca0                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
01ca0     0C C2 66 F0 | 	shl	local60, #12
01ca4     08 BC 66 F0 | 	shl	local57, #8
01ca8     5E C3 02 F1 | 	add	local60, local57
01cac     02 BE 66 F0 | 	shl	local58, #2
01cb0     5F C3 02 F1 | 	add	local60, local58
01cb4     01 C2 06 F1 | 	add	local60, #1
01cb8     4B C7 02 F6 | 	mov	local62, local38
01cbc     02 C6 66 F0 | 	shl	local62, #2
01cc0     1C 0C 06 F1 | 	add	objptr, #28
01cc4     06 C9 02 FB | 	rdlong	local63, objptr
01cc8     1C 0C 86 F1 | 	sub	objptr, #28
01ccc     63 C9 02 F1 | 	add	local63, local62
01cd0                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
01cd0     64 C3 62 FC | 	wrlong	local60, local63
01cd4     5C 97 02 F1 | 	add	local38, local55
01cd8     59 97 0A F2 | 	cmp	local38, local52 wz
01cdc     50 FF 9F 5D |  if_ne	jmp	#LR__0054
01ce0                 | LR__0055
01ce0                 | LR__0056
01ce0                 | ' 
01ce0                 | ' 
01ce0                 | ' 
01ce0                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
01ce0     01 00 00 FF 
01ce4     00 44 5E F2 | 	cmps	arg01, ##512 wcz
01ce8     AC 01 90 CD |  if_b	jmp	#LR__0064
01cec                 | ' 
01cec                 | '   if timings[6]>0 'borders
01cec     68 0C 06 F1 | 	add	objptr, #104
01cf0     06 95 02 FB | 	rdlong	local37, objptr
01cf4     68 0C 86 F1 | 	sub	objptr, #104
01cf8     00 94 5E F2 | 	cmps	local37, #0 wcz
01cfc     D4 00 90 ED |  if_be	jmp	#LR__0061
01d00                 | '     repeat i from 0 to timings[6]-1 '0 to -1
01d00     00 96 06 F6 | 	mov	local38, #0
01d04     68 0C 06 F1 | 	add	objptr, #104
01d08     06 CB 02 FB | 	rdlong	local64, objptr
01d0c     68 0C 86 F1 | 	sub	objptr, #104
01d10     01 CA 86 F1 | 	sub	local64, #1
01d14     00 CA 5E F2 | 	cmps	local64, #0 wcz
01d18     01 9A 06 16 |  if_a	mov	local40, #1
01d1c     01 9A 66 E6 |  if_be	neg	local40, #1
01d20     4D CD 02 F6 | 	mov	local65, local40
01d24     4D CB 02 F1 | 	add	local64, local40
01d28     FC E2 9F FE | 	loc	pa,	#(@LR__0058-@LR__0057)
01d2c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01d30                 | LR__0057
01d30     4B CF 02 F6 | 	mov	local66, local38
01d34     02 CE 66 F0 | 	shl	local66, #2
01d38     1C 0C 06 F1 | 	add	objptr, #28
01d3c     06 D1 02 FB | 	rdlong	local67, objptr
01d40     1C 0C 86 F1 | 	sub	objptr, #28
01d44     67 D1 02 F1 | 	add	local67, local66
01d48                 | '       long[dl_ptr+4*i]:=$0
01d48     68 01 68 FC | 	wrlong	#0, local67
01d4c     66 97 02 F1 | 	add	local38, local65
01d50     65 97 0A F2 | 	cmp	local38, local64 wz
01d54     D8 FF 9F 5D |  if_ne	jmp	#LR__0057
01d58                 | LR__0058
01d58                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
01d58     68 0C 06 F1 | 	add	objptr, #104
01d5c     06 97 02 FB | 	rdlong	local38, objptr
01d60     18 0C 06 F1 | 	add	objptr, #24
01d64     06 9B 02 FB | 	rdlong	local40, objptr
01d68     4D 97 02 F1 | 	add	local38, local40
01d6c     0C 0C 06 F1 | 	add	objptr, #12
01d70     06 D3 02 FB | 	rdlong	local68, objptr
01d74     01 D2 86 F1 | 	sub	local68, #1
01d78     24 0C 86 F1 | 	sub	objptr, #36
01d7c     06 A5 02 FB | 	rdlong	local45, objptr
01d80     18 0C 06 F1 | 	add	objptr, #24
01d84     06 A7 02 FB | 	rdlong	local46, objptr
01d88     80 0C 86 F1 | 	sub	objptr, #128
01d8c     53 A5 02 F1 | 	add	local45, local46
01d90     52 D3 5A F2 | 	cmps	local68, local45 wcz
01d94     01 A8 06 16 |  if_a	mov	local47, #1
01d98     01 A8 66 E6 |  if_be	neg	local47, #1
01d9c     54 D5 02 F6 | 	mov	local69, local47
01da0     54 D3 02 F1 | 	add	local68, local47
01da4     80 E2 9F FE | 	loc	pa,	#(@LR__0060-@LR__0059)
01da8     93 00 A0 FD | 	call	#FCACHE_LOAD_
01dac                 | LR__0059
01dac     4B D7 02 F6 | 	mov	local70, local38
01db0     02 D6 66 F0 | 	shl	local70, #2
01db4     1C 0C 06 F1 | 	add	objptr, #28
01db8     06 D9 02 FB | 	rdlong	local71, objptr
01dbc     1C 0C 86 F1 | 	sub	objptr, #28
01dc0     6B D9 02 F1 | 	add	local71, local70
01dc4                 | '       long[dl_ptr+4*i]:=$0
01dc4     6C 01 68 FC | 	wrlong	#0, local71
01dc8     6A 97 02 F1 | 	add	local38, local69
01dcc     69 97 0A F2 | 	cmp	local38, local68 wz
01dd0     D8 FF 9F 5D |  if_ne	jmp	#LR__0059
01dd4                 | LR__0060
01dd4                 | LR__0061
01dd4                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
01dd4     68 0C 06 F1 | 	add	objptr, #104
01dd8     06 97 02 FB | 	rdlong	local38, objptr
01ddc     4B DB 02 F6 | 	mov	local72, local38
01de0     18 0C 06 F1 | 	add	objptr, #24
01de4     06 B5 02 FB | 	rdlong	local53, objptr
01de8     5A DB 02 F1 | 	add	local72, local53
01dec     01 DA 86 F1 | 	sub	local72, #1
01df0     18 0C 86 F1 | 	sub	objptr, #24
01df4     06 A9 02 FB | 	rdlong	local47, objptr
01df8     68 0C 86 F1 | 	sub	objptr, #104
01dfc     54 DB 5A F2 | 	cmps	local72, local47 wcz
01e00     01 B6 06 16 |  if_a	mov	local54, #1
01e04     01 B6 66 E6 |  if_be	neg	local54, #1
01e08     5B DD 02 F6 | 	mov	local73, local54
01e0c     5B DB 02 F1 | 	add	local72, local54
01e10     6C E2 9F FE | 	loc	pa,	#(@LR__0063-@LR__0062)
01e14     93 00 A0 FD | 	call	#FCACHE_LOAD_
01e18                 | LR__0062
01e18     4B DF 02 F6 | 	mov	local74, local38
01e1c     68 0C 06 F1 | 	add	objptr, #104
01e20     06 BB 02 FB | 	rdlong	local56, objptr
01e24     5D DF 82 F1 | 	sub	local74, local56
01e28     49 DF 42 F0 | 	shr	local74, local36
01e2c     28 0C 06 F1 | 	add	objptr, #40
01e30     06 BB 02 FB | 	rdlong	local56, objptr
01e34     90 0C 86 F1 | 	sub	objptr, #144
01e38     6F BB 02 FD | 	qmul	local56, local74
01e3c     18 E0 62 FD | 	getqx	local75
01e40     02 E0 66 F0 | 	shl	local75, #2
01e44     06 E3 02 FB | 	rdlong	local76, objptr
01e48     70 E3 02 F1 | 	add	local76, local75
01e4c     22 E5 02 F6 | 	mov	local77, arg01
01e50     03 E4 06 F5 | 	and	local77, #3
01e54     72 E3 02 F1 | 	add	local76, local77
01e58                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
01e58     0C E2 66 F0 | 	shl	local76, #12
01e5c     02 E2 06 F1 | 	add	local76, #2
01e60     22 E7 02 F6 | 	mov	local78, arg01
01e64     30 E6 06 F5 | 	and	local78, #48
01e68     02 E6 46 F0 | 	shr	local78, #2
01e6c     73 E3 02 F1 | 	add	local76, local78
01e70     4B E9 02 F6 | 	mov	local79, local38
01e74     02 E8 66 F0 | 	shl	local79, #2
01e78     1C 0C 06 F1 | 	add	objptr, #28
01e7c     06 EB 02 FB | 	rdlong	local80, objptr
01e80     1C 0C 86 F1 | 	sub	objptr, #28
01e84     74 EB 02 F1 | 	add	local80, local79
01e88                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
01e88     75 E3 62 FC | 	wrlong	local76, local80
01e8c     6E 97 02 F1 | 	add	local38, local73
01e90     6D 97 0A F2 | 	cmp	local38, local72 wz
01e94     80 FF 9F 5D |  if_ne	jmp	#LR__0062
01e98                 | LR__0063
01e98                 | LR__0064
01e98                 | LR__0065
01e98     AF F0 03 F6 | 	mov	ptra, fp
01e9c     BF 00 A0 FD | 	call	#popregs_
01ea0                 | _hng030rm_spin2_setmode_ret
01ea0     2D 00 64 FD | 	ret
01ea4                 | hubexit
01ea4     81 00 80 FD | 	jmp	#cogexit
01ea8                 | 
01ea8                 | __system___setbaud
01ea8     14 EC 06 FB | 	rdlong	muldiva_, #20
01eac     22 EF 02 F6 | 	mov	muldivb_, arg01
01eb0     D0 00 A0 FD | 	call	#divide_
01eb4     40 7C 64 FD | 	dirl	#62
01eb8     40 7E 64 FD | 	dirl	#63
01ebc     08 EF 62 FC | 	wrlong	muldivb_, ptr___system__dat__
01ec0     10 EE 66 F0 | 	shl	muldivb_, #16
01ec4     07 46 06 F6 | 	mov	arg02, #7
01ec8     77 47 02 F1 | 	add	arg02, muldivb_
01ecc     3E F8 0C FC | 	wrpin	#124, #62
01ed0     3E 46 16 FC | 	wxpin	arg02, #62
01ed4     3F 7C 0C FC | 	wrpin	#62, #63
01ed8     14 46 06 F1 | 	add	arg02, #20
01edc     3F 46 16 FC | 	wxpin	arg02, #63
01ee0     41 7C 64 FD | 	dirh	#62
01ee4     41 7E 64 FD | 	dirh	#63
01ee8                 | __system___setbaud_ret
01ee8     2D 00 64 FD | 	ret
01eec                 | 
01eec                 | __system___txraw
01eec     02 5A 05 F6 | 	mov	COUNT_, #2
01ef0     B0 00 A0 FD | 	call	#pushregs_
01ef4     22 4D 02 F6 | 	mov	local01, arg01
01ef8     08 4F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
01efc     0C 00 90 5D |  if_ne	jmp	#LR__0066
01f00     C2 01 00 FF 
01f04     00 44 06 F6 | 	mov	arg01, ##230400
01f08     9C FF BF FD | 	call	#__system___setbaud
01f0c                 | LR__0066
01f0c     3E 4C 26 FC | 	wypin	local01, #62
01f10     1F 02 64 FD | 	waitx	#1
01f14     F0 E0 9F FE | 	loc	pa,	#(@LR__0068-@LR__0067)
01f18     93 00 A0 FD | 	call	#FCACHE_LOAD_
01f1c                 | LR__0067
01f1c     40 7C 74 FD | 	testp	#62 wc
01f20     F8 FF 9F 3D |  if_nc	jmp	#LR__0067
01f24                 | LR__0068
01f24     01 1E 06 F6 | 	mov	result1, #1
01f28     AF F0 03 F6 | 	mov	ptra, fp
01f2c     BF 00 A0 FD | 	call	#popregs_
01f30                 | __system___txraw_ret
01f30     2D 00 64 FD | 	ret
01f34                 | 
01f34                 | __system___rxraw
01f34     0D 5A 05 F6 | 	mov	COUNT_, #13
01f38     B0 00 A0 FD | 	call	#pushregs_
01f3c     22 4D 02 F6 | 	mov	local01, arg01
01f40     08 4F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
01f44     0C 00 90 5D |  if_ne	jmp	#LR__0069
01f48     C2 01 00 FF 
01f4c     00 44 06 F6 | 	mov	arg01, ##230400
01f50     54 FF BF FD | 	call	#__system___setbaud
01f54                 | LR__0069
01f54     00 4C 0E F2 | 	cmp	local01, #0 wz
01f58     18 00 90 AD |  if_e	jmp	#LR__0070
01f5c     14 50 06 FB | 	rdlong	local03, #20
01f60     0A 50 46 F0 | 	shr	local03, #10
01f64     28 4D 02 FD | 	qmul	local01, local03
01f68     18 52 62 FD | 	getqx	local04
01f6c     1A 54 62 FD | 	getct	local05
01f70     29 55 02 F1 | 	add	local05, local04
01f74                 | LR__0070
01f74     01 56 66 F6 | 	neg	local06, #1
01f78     00 58 06 F6 | 	mov	local07, #0
01f7c     04 10 06 F1 | 	add	ptr___system__dat__, #4
01f80     08 5B 02 FB | 	rdlong	local08, ptr___system__dat__
01f84     04 10 86 F1 | 	sub	ptr___system__dat__, #4
01f88                 | LR__0071
01f88     08 5A 16 F4 | 	testb	local08, #8 wc
01f8c     09 5A 76 F4 | 	testbn	local08, #9 andc
01f90     0A 5A 46 F0 | 	shr	local08, #10
01f94     01 58 06 C6 |  if_b	mov	local07, #1
01f98     10 00 90 CD |  if_b	jmp	#LR__0072
01f9c     40 7E 6C FD | 	testp	#63 wz
01fa0     01 58 06 A6 |  if_e	mov	local07, #1
01fa4     3F 5A 8E AA |  if_e	rdpin	local08, #63
01fa8     04 5A 46 A0 |  if_e	shr	local08, #4
01fac                 | LR__0072
01fac     00 4E 06 F6 | 	mov	local02, #0
01fb0     00 58 0E F2 | 	cmp	local07, #0 wz
01fb4     01 4E 66 56 |  if_ne	neg	local02, #1
01fb8     00 5C 06 F6 | 	mov	local09, #0
01fbc     00 5E 06 F6 | 	mov	local10, #0
01fc0     00 4C 0E F2 | 	cmp	local01, #0 wz
01fc4     01 5E 66 56 |  if_ne	neg	local10, #1
01fc8     00 60 06 F6 | 	mov	local11, #0
01fcc     00 62 06 F6 | 	mov	local12, #0
01fd0     1A 64 62 FD | 	getct	local13
01fd4     2A 65 82 F1 | 	sub	local13, local05
01fd8     00 64 5E F2 | 	cmps	local13, #0 wcz
01fdc     01 62 66 C6 |  if_b	neg	local12, #1
01fe0     00 62 0E F2 | 	cmp	local12, #0 wz
01fe4     01 60 66 56 |  if_ne	neg	local11, #1
01fe8     30 5F CA F7 | 	test	local10, local11 wz
01fec     01 5C 66 56 |  if_ne	neg	local09, #1
01ff0     2E 4F 4A F5 | 	or	local02, local09 wz
01ff4     90 FF 9F AD |  if_e	jmp	#LR__0071
01ff8     00 58 0E F2 | 	cmp	local07, #0 wz
01ffc     2D 57 02 56 |  if_ne	mov	local06, local08
02000     FF 56 06 55 |  if_ne	and	local06, #255
02004     04 10 06 F1 | 	add	ptr___system__dat__, #4
02008     08 5B 62 FC | 	wrlong	local08, ptr___system__dat__
0200c     04 10 86 F1 | 	sub	ptr___system__dat__, #4
02010     2B 1F 02 F6 | 	mov	result1, local06
02014     AF F0 03 F6 | 	mov	ptra, fp
02018     BF 00 A0 FD | 	call	#popregs_
0201c                 | __system___rxraw_ret
0201c     2D 00 64 FD | 	ret
02020                 | 
02020                 | __system____builtin_memmove
02020     22 25 02 F6 | 	mov	_var01, arg01
02024     23 45 5A F2 | 	cmps	arg01, arg02 wcz
02028     50 00 90 3D |  if_ae	jmp	#LR__0080
0202c     F0 DF 9F FE | 	loc	pa,	#(@LR__0074-@LR__0073)
02030     93 00 A0 FD | 	call	#FCACHE_LOAD_
02034                 | LR__0073
02034     03 48 5E F2 | 	cmps	arg03, #3 wcz
02038     18 00 90 ED |  if_be	jmp	#LR__0075
0203c     23 27 02 FB | 	rdlong	_var02, arg02
02040     22 27 62 FC | 	wrlong	_var02, arg01
02044     04 44 06 F1 | 	add	arg01, #4
02048     04 46 06 F1 | 	add	arg02, #4
0204c     04 48 86 F1 | 	sub	arg03, #4
02050     E0 FF 9F FD | 	jmp	#LR__0073
02054                 | LR__0074
02054                 | LR__0075
02054     24 29 0A F6 | 	mov	_var03, arg03 wz
02058     4C 00 90 AD |  if_e	jmp	#LR__0086
0205c     B4 DF 9F FE | 	loc	pa,	#(@LR__0078-@LR__0076)
02060     93 00 A0 FD | 	call	#FCACHE_LOAD_
02064                 | LR__0076
02064     14 09 D8 FC | 	rep	@LR__0079, _var03
02068                 | LR__0077
02068     23 27 C2 FA | 	rdbyte	_var02, arg02
0206c     22 27 42 FC | 	wrbyte	_var02, arg01
02070     01 44 06 F1 | 	add	arg01, #1
02074     01 46 06 F1 | 	add	arg02, #1
02078                 | LR__0078
02078                 | LR__0079
02078     2C 00 90 FD | 	jmp	#LR__0086
0207c                 | LR__0080
0207c     24 45 02 F1 | 	add	arg01, arg03
02080     24 47 02 F1 | 	add	arg02, arg03
02084     24 2B 0A F6 | 	mov	_var04, arg03 wz
02088     1C 00 90 AD |  if_e	jmp	#LR__0085
0208c     84 DF 9F FE | 	loc	pa,	#(@LR__0083-@LR__0081)
02090     93 00 A0 FD | 	call	#FCACHE_LOAD_
02094                 | LR__0081
02094     15 09 D8 FC | 	rep	@LR__0084, _var04
02098                 | LR__0082
02098     01 44 86 F1 | 	sub	arg01, #1
0209c     01 46 86 F1 | 	sub	arg02, #1
020a0     23 27 C2 FA | 	rdbyte	_var02, arg02
020a4     22 27 42 FC | 	wrbyte	_var02, arg01
020a8                 | LR__0083
020a8                 | LR__0084
020a8                 | LR__0085
020a8                 | LR__0086
020a8     12 1F 02 F6 | 	mov	result1, _var01
020ac                 | __system____builtin_memmove_ret
020ac     2D 00 64 FD | 	ret
020b0                 | 
020b0                 | __system__longmove
020b0     22 25 02 F6 | 	mov	_var01, arg01
020b4     23 45 5A F2 | 	cmps	arg01, arg02 wcz
020b8     28 00 90 3D |  if_ae	jmp	#LR__0091
020bc     24 27 0A F6 | 	mov	_var02, arg03 wz
020c0     54 00 90 AD |  if_e	jmp	#LR__0097
020c4     4C DF 9F FE | 	loc	pa,	#(@LR__0089-@LR__0087)
020c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
020cc                 | LR__0087
020cc     13 09 D8 FC | 	rep	@LR__0090, _var02
020d0                 | LR__0088
020d0     23 29 02 FB | 	rdlong	_var03, arg02
020d4     22 29 62 FC | 	wrlong	_var03, arg01
020d8     04 44 06 F1 | 	add	arg01, #4
020dc     04 46 06 F1 | 	add	arg02, #4
020e0                 | LR__0089
020e0                 | LR__0090
020e0     34 00 90 FD | 	jmp	#LR__0097
020e4                 | LR__0091
020e4     24 2B 02 F6 | 	mov	_var04, arg03
020e8     02 2A 66 F0 | 	shl	_var04, #2
020ec     15 45 02 F1 | 	add	arg01, _var04
020f0     15 47 02 F1 | 	add	arg02, _var04
020f4     24 2D 0A F6 | 	mov	_var05, arg03 wz
020f8     1C 00 90 AD |  if_e	jmp	#LR__0096
020fc     14 DF 9F FE | 	loc	pa,	#(@LR__0094-@LR__0092)
02100     93 00 A0 FD | 	call	#FCACHE_LOAD_
02104                 | LR__0092
02104     16 09 D8 FC | 	rep	@LR__0095, _var05
02108                 | LR__0093
02108     04 44 86 F1 | 	sub	arg01, #4
0210c     04 46 86 F1 | 	sub	arg02, #4
02110     23 29 02 FB | 	rdlong	_var03, arg02
02114     22 29 62 FC | 	wrlong	_var03, arg01
02118                 | LR__0094
02118                 | LR__0095
02118                 | LR__0096
02118                 | LR__0097
02118     12 1F 02 F6 | 	mov	result1, _var01
0211c                 | __system__longmove_ret
0211c     2D 00 64 FD | 	ret
02120                 | 
02120                 | __system____topofstack
02120     00 5A 05 F6 | 	mov	COUNT_, #0
02124     B0 00 A0 FD | 	call	#pushregs_
02128     0C F0 07 F1 | 	add	ptra, #12
0212c     04 5E 05 F1 | 	add	fp, #4
02130     AF 44 62 FC | 	wrlong	arg01, fp
02134     AF 1E 02 F6 | 	mov	result1, fp
02138     04 5E 85 F1 | 	sub	fp, #4
0213c     AF F0 03 F6 | 	mov	ptra, fp
02140     BF 00 A0 FD | 	call	#popregs_
02144                 | __system____topofstack_ret
02144     2D 00 64 FD | 	ret
02148                 | 
02148                 | __system___make_methodptr
02148     04 5A 05 F6 | 	mov	COUNT_, #4
0214c     B0 00 A0 FD | 	call	#pushregs_
02150     22 4D 02 F6 | 	mov	local01, arg01
02154     23 4F 02 F6 | 	mov	local02, arg02
02158     08 44 06 F6 | 	mov	arg01, #8
0215c     00 0F B0 FD | 	call	#__system___gc_alloc_managed
02160     0F 51 0A F6 | 	mov	local03, result1 wz
02164     10 00 90 AD |  if_e	jmp	#LR__0098
02168     28 4D 62 FC | 	wrlong	local01, local03
0216c     28 53 02 F6 | 	mov	local04, local03
02170     04 52 06 F1 | 	add	local04, #4
02174     29 4F 62 FC | 	wrlong	local02, local04
02178                 | LR__0098
02178     28 1F 02 F6 | 	mov	result1, local03
0217c     AF F0 03 F6 | 	mov	ptra, fp
02180     BF 00 A0 FD | 	call	#popregs_
02184                 | __system___make_methodptr_ret
02184     2D 00 64 FD | 	ret
02188                 | 
02188                 | __system___lockmem
02188     02 5A 05 F6 | 	mov	COUNT_, #2
0218c     B0 00 A0 FD | 	call	#pushregs_
02190     01 1E 62 FD | 	cogid	result1
02194     0F 4D 02 F6 | 	mov	local01, result1
02198     00 4D 06 F1 | 	add	local01, #256
0219c                 | LR__0099
0219c     22 4F 0A FB | 	rdlong	local02, arg01 wz
021a0     22 4D 62 AC |  if_e	wrlong	local01, arg01
021a4     22 4F 02 AB |  if_e	rdlong	local02, arg01
021a8     22 4F 02 AB |  if_e	rdlong	local02, arg01
021ac     26 4F 0A F2 | 	cmp	local02, local01 wz
021b0     E8 FF 9F 5D |  if_ne	jmp	#LR__0099
021b4     AF F0 03 F6 | 	mov	ptra, fp
021b8     BF 00 A0 FD | 	call	#popregs_
021bc                 | __system___lockmem_ret
021bc     2D 00 64 FD | 	ret
021c0                 | 
021c0                 | __system___tx
021c0     02 5A 05 F6 | 	mov	COUNT_, #2
021c4     B0 00 A0 FD | 	call	#pushregs_
021c8     22 4D 02 F6 | 	mov	local01, arg01
021cc     0A 4C 0E F2 | 	cmp	local01, #10 wz
021d0     20 00 90 5D |  if_ne	jmp	#LR__0100
021d4     08 10 06 F1 | 	add	ptr___system__dat__, #8
021d8     08 4F 02 FB | 	rdlong	local02, ptr___system__dat__
021dc     08 10 86 F1 | 	sub	ptr___system__dat__, #8
021e0     02 4E CE F7 | 	test	local02, #2 wz
021e4     0C 00 90 AD |  if_e	jmp	#LR__0100
021e8     0D 4E 06 F6 | 	mov	local02, #13
021ec     0D 44 06 F6 | 	mov	arg01, #13
021f0     F8 FC BF FD | 	call	#__system___txraw
021f4                 | LR__0100
021f4     26 45 02 F6 | 	mov	arg01, local01
021f8     F0 FC BF FD | 	call	#__system___txraw
021fc     AF F0 03 F6 | 	mov	ptra, fp
02200     BF 00 A0 FD | 	call	#popregs_
02204                 | __system___tx_ret
02204     2D 00 64 FD | 	ret
02208                 | 
02208                 | __system___rx
02208     02 5A 05 F6 | 	mov	COUNT_, #2
0220c     B0 00 A0 FD | 	call	#pushregs_
02210                 | LR__0101
02210     00 44 06 F6 | 	mov	arg01, #0
02214     1C FD BF FD | 	call	#__system___rxraw
02218     0F 4D 02 F6 | 	mov	local01, result1
0221c     FF FF 7F FF 
02220     FF 4D 0E F2 | 	cmp	local01, ##-1 wz
02224     E8 FF 9F AD |  if_e	jmp	#LR__0101
02228     0D 4C 0E F2 | 	cmp	local01, #13 wz
0222c     14 00 90 5D |  if_ne	jmp	#LR__0102
02230     08 10 06 F1 | 	add	ptr___system__dat__, #8
02234     08 4F 02 FB | 	rdlong	local02, ptr___system__dat__
02238     08 10 86 F1 | 	sub	ptr___system__dat__, #8
0223c     02 4E CE F7 | 	test	local02, #2 wz
02240     0A 4C 06 56 |  if_ne	mov	local01, #10
02244                 | LR__0102
02244     08 10 06 F1 | 	add	ptr___system__dat__, #8
02248     08 4F 02 FB | 	rdlong	local02, ptr___system__dat__
0224c     08 10 86 F1 | 	sub	ptr___system__dat__, #8
02250     01 4E CE F7 | 	test	local02, #1 wz
02254     1C 00 90 AD |  if_e	jmp	#LR__0105
02258     7F 4C 0E F2 | 	cmp	local01, #127 wz
0225c     0C 00 90 5D |  if_ne	jmp	#LR__0103
02260     08 44 06 F6 | 	mov	arg01, #8
02264     58 FF BF FD | 	call	#__system___tx
02268     08 00 90 FD | 	jmp	#LR__0104
0226c                 | LR__0103
0226c     26 45 02 F6 | 	mov	arg01, local01
02270     4C FF BF FD | 	call	#__system___tx
02274                 | LR__0104
02274                 | LR__0105
02274     26 1F 02 F6 | 	mov	result1, local01
02278     AF F0 03 F6 | 	mov	ptra, fp
0227c     BF 00 A0 FD | 	call	#popregs_
02280                 | __system___rx_ret
02280     2D 00 64 FD | 	ret
02284                 | 
02284                 | __system___waitms
02284     03 5A 05 F6 | 	mov	COUNT_, #3
02288     B0 00 A0 FD | 	call	#pushregs_
0228c     22 4D 02 F6 | 	mov	local01, arg01
02290     14 4E 06 FB | 	rdlong	local02, #20
02294     80 DD 9F FE | 	loc	pa,	#(@LR__0107-@LR__0106)
02298     93 00 A0 FD | 	call	#FCACHE_LOAD_
0229c                 | LR__0106
0229c     01 00 00 FF 
022a0     E8 4D 5E F2 | 	cmps	local01, ##1000 wcz
022a4     1F 4E 62 1D |  if_a	waitx	local02
022a8     01 00 00 1F 
022ac     E8 4D 86 11 |  if_a	sub	local01, ##1000
022b0     E8 FF 9F 1D |  if_a	jmp	#LR__0106
022b4                 | LR__0107
022b4     0C 10 06 F1 | 	add	ptr___system__dat__, #12
022b8     08 51 0A FB | 	rdlong	local03, ptr___system__dat__ wz
022bc     0C 10 86 F1 | 	sub	ptr___system__dat__, #12
022c0     20 00 90 5D |  if_ne	jmp	#LR__0108
022c4     27 ED 02 F6 | 	mov	muldiva_, local02
022c8     01 00 00 FF 
022cc     E8 EF 06 F6 | 	mov	muldivb_, ##1000
022d0     CC 00 A0 FD | 	call	#unsdivide_
022d4     77 51 02 F6 | 	mov	local03, muldivb_
022d8     0C 10 06 F1 | 	add	ptr___system__dat__, #12
022dc     08 EF 62 FC | 	wrlong	muldivb_, ptr___system__dat__
022e0     0C 10 86 F1 | 	sub	ptr___system__dat__, #12
022e4                 | LR__0108
022e4     00 4C 5E F2 | 	cmps	local01, #0 wcz
022e8     28 4D 02 1D |  if_a	qmul	local01, local03
022ec     18 44 62 1D |  if_a	getqx	arg01
022f0     1F 44 62 1D |  if_a	waitx	arg01
022f4     AF F0 03 F6 | 	mov	ptra, fp
022f8     BF 00 A0 FD | 	call	#popregs_
022fc                 | __system___waitms_ret
022fc     2D 00 64 FD | 	ret
02300                 | 
02300                 | __system___basic_open
02300     05 5A 05 F6 | 	mov	COUNT_, #5
02304     B0 00 A0 FD | 	call	#pushregs_
02308     23 4D 02 F6 | 	mov	local01, arg02
0230c     24 4F 02 F6 | 	mov	local02, arg03
02310     25 51 02 F6 | 	mov	local03, arg04
02314     4C 15 B0 FD | 	call	#__system____getftab
02318     0F 53 0A F6 | 	mov	local04, result1 wz
0231c     18 00 90 5D |  if_ne	jmp	#LR__0109
02320     03 45 02 F6 | 	mov	arg01, abortchain
02324     0C 46 06 F6 | 	mov	arg02, #12
02328     01 48 06 F6 | 	mov	arg03, #1
0232c     F0 00 A0 FD | 	call	#__longjmp
02330     01 1E 66 F6 | 	neg	result1, #1
02334     70 00 90 FD | 	jmp	#LR__0113
02338                 | LR__0109
02338     00 4C 0E F2 | 	cmp	local01, #0 wz
0233c     48 00 90 AD |  if_e	jmp	#LR__0111
02340     04 44 06 F6 | 	mov	arg01, #4
02344     18 0D B0 FD | 	call	#__system___gc_alloc_managed
02348     0F 55 0A F6 | 	mov	local05, result1 wz
0234c     18 00 90 5D |  if_ne	jmp	#LR__0110
02350     03 45 02 F6 | 	mov	arg01, abortchain
02354     07 46 06 F6 | 	mov	arg02, #7
02358     01 48 06 F6 | 	mov	arg03, #1
0235c     F0 00 A0 FD | 	call	#__longjmp
02360     01 1E 66 F6 | 	neg	result1, #1
02364     40 00 90 FD | 	jmp	#LR__0113
02368                 | LR__0110
02368     2A 4D 62 FC | 	wrlong	local01, local05
0236c     07 47 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
02370     2A 45 02 F6 | 	mov	arg01, local05
02374     D0 FD BF FD | 	call	#__system___make_methodptr
02378     18 52 06 F1 | 	add	local04, #24
0237c     29 1F 62 FC | 	wrlong	result1, local04
02380     18 52 86 F1 | 	sub	local04, #24
02384     0C 00 90 FD | 	jmp	#LR__0112
02388                 | LR__0111
02388     18 52 06 F1 | 	add	local04, #24
0238c     29 4D 62 FC | 	wrlong	local01, local04
02390     18 52 86 F1 | 	sub	local04, #24
02394                 | LR__0112
02394     1C 52 06 F1 | 	add	local04, #28
02398     29 4F 62 FC | 	wrlong	local02, local04
0239c     04 52 06 F1 | 	add	local04, #4
023a0     29 51 62 FC | 	wrlong	local03, local04
023a4     00 1E 06 F6 | 	mov	result1, #0
023a8                 | LR__0113
023a8     AF F0 03 F6 | 	mov	ptra, fp
023ac     BF 00 A0 FD | 	call	#popregs_
023b0                 | __system___basic_open_ret
023b0     2D 00 64 FD | 	ret
023b4                 | 
023b4                 | __system___float_fromuns
023b4     02 5A 05 F6 | 	mov	COUNT_, #2
023b8     B0 00 A0 FD | 	call	#pushregs_
023bc     22 4D 0A F6 | 	mov	local01, arg01 wz
023c0     26 1F 02 A6 |  if_e	mov	result1, local01
023c4     2C 00 90 AD |  if_e	jmp	#LR__0114
023c8     26 47 02 F6 | 	mov	arg02, local01
023cc     23 47 92 F7 | 	encod	arg02, arg02 wc
023d0     01 46 06 C1 |  if_b	add	arg02, #1
023d4     01 46 86 F1 | 	sub	arg02, #1
023d8     1F 4E 06 F6 | 	mov	local02, #31
023dc     23 4F 82 F1 | 	sub	local02, arg02
023e0     27 4D 62 F0 | 	shl	local01, local02
023e4     02 4C 46 F0 | 	shr	local01, #2
023e8     00 44 06 F6 | 	mov	arg01, #0
023ec     26 49 02 F6 | 	mov	arg03, local01
023f0     E0 08 B0 FD | 	call	#__system___float_Pack
023f4                 | LR__0114
023f4     AF F0 03 F6 | 	mov	ptra, fp
023f8     BF 00 A0 FD | 	call	#popregs_
023fc                 | __system___float_fromuns_ret
023fc     2D 00 64 FD | 	ret
02400                 | 
02400                 | __system___float_fromint
02400     02 5A 05 F6 | 	mov	COUNT_, #2
02404     B0 00 A0 FD | 	call	#pushregs_
02408     22 4D 02 F6 | 	mov	local01, arg01
0240c     00 4C 5E F2 | 	cmps	local01, #0 wcz
02410     26 4D 62 C6 |  if_b	neg	local01, local01
02414     01 4E 06 C6 |  if_b	mov	local02, #1
02418     00 4E 06 36 |  if_ae	mov	local02, #0
0241c     26 45 02 F6 | 	mov	arg01, local01
02420     90 FF BF FD | 	call	#__system___float_fromuns
02424     00 4E 0E F2 | 	cmp	local02, #0 wz
02428     1F 1E E6 54 |  if_ne	bitnot	result1, #31
0242c     AF F0 03 F6 | 	mov	ptra, fp
02430     BF 00 A0 FD | 	call	#popregs_
02434                 | __system___float_fromint_ret
02434     2D 00 64 FD | 	ret
02438                 | 
02438                 | __system___float_add
02438     1F 5A 05 F6 | 	mov	COUNT_, #31
0243c     B0 00 A0 FD | 	call	#pushregs_
02440     22 4D 02 F6 | 	mov	local01, arg01
02444     23 4F 02 F6 | 	mov	local02, arg02
02448     00 50 06 F6 | 	mov	local03, #0
0244c     26 53 02 F6 | 	mov	local04, local01
02450     29 55 02 F6 | 	mov	local05, local04
02454     09 54 66 F0 | 	shl	local05, #9
02458     2A 57 02 F6 | 	mov	local06, local05
0245c     09 56 46 F0 | 	shr	local06, #9
02460     2B 59 02 F6 | 	mov	local07, local06
02464     29 5B 02 F6 | 	mov	local08, local04
02468     01 5A 66 F0 | 	shl	local08, #1
0246c     2D 5D 02 F6 | 	mov	local09, local08
02470     18 5C 46 F0 | 	shr	local09, #24
02474     2E 5F 02 F6 | 	mov	local10, local09
02478     1F 52 46 F0 | 	shr	local04, #31
0247c     27 45 02 F6 | 	mov	arg01, local02
02480     22 1F 02 F6 | 	mov	result1, arg01
02484     0F 61 02 F6 | 	mov	local11, result1
02488     30 63 02 F6 | 	mov	local12, local11
0248c     09 62 66 F0 | 	shl	local12, #9
02490     31 65 02 F6 | 	mov	local13, local12
02494     09 64 46 F0 | 	shr	local13, #9
02498     32 67 02 F6 | 	mov	local14, local13
0249c     30 69 02 F6 | 	mov	local15, local11
024a0     01 68 66 F0 | 	shl	local15, #1
024a4     34 6B 02 F6 | 	mov	local16, local15
024a8     18 6A 46 F0 | 	shr	local16, #24
024ac     35 6D 02 F6 | 	mov	local17, local16
024b0     30 6F 02 F6 | 	mov	local18, local11
024b4     1F 6E 46 F0 | 	shr	local18, #31
024b8     37 71 02 F6 | 	mov	local19, local18
024bc     00 72 06 F6 | 	mov	local20, #0
024c0     00 74 06 F6 | 	mov	local21, #0
024c4     36 5F 1A F2 | 	cmp	local10, local17 wcz
024c8     10 00 90 CD |  if_b	jmp	#LR__0115
024cc     36 5F 0A F2 | 	cmp	local10, local17 wz
024d0     2C 00 90 5D |  if_ne	jmp	#LR__0116
024d4     33 59 1A F2 | 	cmp	local07, local14 wcz
024d8     24 00 90 3D |  if_ae	jmp	#LR__0116
024dc                 | LR__0115
024dc     2C 77 02 F6 | 	mov	local22, local07
024e0     33 59 02 F6 | 	mov	local07, local14
024e4     3B 67 02 F6 | 	mov	local14, local22
024e8     2F 77 02 F6 | 	mov	local22, local10
024ec     36 5F 02 F6 | 	mov	local10, local17
024f0     3B 6D 02 F6 | 	mov	local17, local22
024f4     29 77 02 F6 | 	mov	local22, local04
024f8     38 53 02 F6 | 	mov	local04, local19
024fc     3B 71 02 F6 | 	mov	local19, local22
02500                 | LR__0116
02500     FF 5E 0E F2 | 	cmp	local10, #255 wz
02504     98 01 90 AD |  if_e	jmp	#LR__0132
02508     00 5E 0E F2 | 	cmp	local10, #0 wz
0250c     D4 01 90 AD |  if_e	jmp	#LR__0134
02510     17 58 26 F4 | 	bith	local07, #23
02514                 | LR__0117
02514     00 6C 0E F2 | 	cmp	local17, #0 wz
02518     14 02 90 AD |  if_e	jmp	#LR__0137
0251c     17 66 26 F4 | 	bith	local14, #23
02520                 | LR__0118
02520     7F 5E 86 F1 | 	sub	local10, #127
02524     36 6F 02 F6 | 	mov	local18, local17
02528     7F 6E 86 F1 | 	sub	local18, #127
0252c     37 6D 02 F6 | 	mov	local17, local18
02530     2F 79 02 F6 | 	mov	local23, local10
02534     36 79 82 F1 | 	sub	local23, local17
02538     3C 7B 02 F6 | 	mov	local24, local23
0253c     EC DA 9F FE | 	loc	pa,	#(@LR__0120-@LR__0119)
02540     93 00 A0 FD | 	call	#FCACHE_LOAD_
02544                 | LR__0119
02544     20 7A 5E F2 | 	cmps	local24, #32 wcz
02548     24 00 90 CD |  if_b	jmp	#LR__0121
0254c     00 72 0E F2 | 	cmp	local20, #0 wz
02550     6F 60 62 FD | 	wrnz	local11
02554     30 67 42 F5 | 	or	local14, local11
02558     33 73 02 F6 | 	mov	local20, local14
0255c     00 66 06 F6 | 	mov	local14, #0
02560     3D 6F 02 F6 | 	mov	local18, local24
02564     20 6E 86 F1 | 	sub	local18, #32
02568     37 7B 02 F6 | 	mov	local24, local18
0256c     D4 FF 9F FD | 	jmp	#LR__0119
02570                 | LR__0120
02570                 | LR__0121
02570     00 7A 0E F2 | 	cmp	local24, #0 wz
02574     40 00 90 AD |  if_e	jmp	#LR__0122
02578     33 7D 02 F6 | 	mov	local25, local14
0257c     20 60 06 F6 | 	mov	local11, #32
02580     3D 61 82 F1 | 	sub	local11, local24
02584     30 7D 62 F0 | 	shl	local25, local11
02588     39 7F 02 F6 | 	mov	local26, local20
0258c     20 60 06 F6 | 	mov	local11, #32
02590     3D 61 82 F1 | 	sub	local11, local24
02594     30 7F 6A F0 | 	shl	local26, local11 wz
02598     3D 73 42 F0 | 	shr	local20, local24
0259c     3D 67 42 F0 | 	shr	local14, local24
025a0     3E 73 42 F5 | 	or	local20, local25
025a4     39 6F 02 F6 | 	mov	local18, local20
025a8     00 60 06 F6 | 	mov	local11, #0
025ac     01 60 06 56 |  if_ne	mov	local11, #1
025b0     30 6F 42 F5 | 	or	local18, local11
025b4     37 73 02 F6 | 	mov	local20, local18
025b8                 | LR__0122
025b8     29 81 02 F6 | 	mov	local27, local04
025bc     38 81 62 F5 | 	xor	local27, local19
025c0     40 83 02 F6 | 	mov	local28, local27
025c4     01 82 06 F5 | 	and	local28, #1
025c8     41 85 0A F6 | 	mov	local29, local28 wz
025cc     18 00 90 AD |  if_e	jmp	#LR__0123
025d0     33 67 22 F6 | 	not	local14, local14
025d4     39 73 22 F6 | 	not	local20, local20
025d8     01 72 0E F1 | 	add	local20, #1 wz
025dc     00 60 06 F6 | 	mov	local11, #0
025e0     01 60 06 A6 |  if_e	mov	local11, #1
025e4     30 67 02 F1 | 	add	local14, local11
025e8                 | LR__0123
025e8     39 75 12 F1 | 	add	local21, local20 wc
025ec     33 59 22 F1 | 	addx	local07, local14
025f0     00 58 5E F2 | 	cmps	local07, #0 wcz
025f4     1C 00 90 3D |  if_ae	jmp	#LR__0124
025f8     01 52 66 F5 | 	xor	local04, #1
025fc     2C 59 22 F6 | 	not	local07, local07
02600     3A 75 22 F6 | 	not	local21, local21
02604     01 74 0E F1 | 	add	local21, #1 wz
02608     00 60 06 F6 | 	mov	local11, #0
0260c     01 60 06 A6 |  if_e	mov	local11, #1
02610     30 59 02 F1 | 	add	local07, local11
02614                 | LR__0124
02614     00 80 00 FF 
02618     00 58 1E F2 | 	cmp	local07, ##16777216 wcz
0261c     28 00 90 CD |  if_b	jmp	#LR__0125
02620     01 5E 06 F1 | 	add	local10, #1
02624     3A 87 02 F6 | 	mov	local30, local21
02628     01 86 06 F5 | 	and	local30, #1
0262c     01 74 46 F0 | 	shr	local21, #1
02630     2C 89 02 F6 | 	mov	local31, local07
02634     1F 88 66 F0 | 	shl	local31, #31
02638     44 75 42 F5 | 	or	local21, local31
0263c     43 75 42 F5 | 	or	local21, local30
02640     01 58 46 F0 | 	shr	local07, #1
02644     40 00 90 FD | 	jmp	#LR__0131
02648                 | LR__0125
02648     00 40 00 FF 
0264c     00 58 1E F2 | 	cmp	local07, ##8388608 wcz
02650     34 00 90 3D |  if_ae	jmp	#LR__0130
02654     00 58 0E F2 | 	cmp	local07, #0 wz
02658     10 00 90 5D |  if_ne	jmp	#LR__0126
0265c     00 74 0E F2 | 	cmp	local21, #0 wz
02660     08 52 46 A5 |  if_e	or	local04, #8
02664     01 52 26 A5 |  if_e	andn	local04, #1
02668     1C 00 90 AD |  if_e	jmp	#LR__0129
0266c                 | LR__0126
0266c                 | LR__0127
0266c     00 40 00 FF 
02670     00 58 1E F2 | 	cmp	local07, ##8388608 wcz
02674     10 00 90 3D |  if_ae	jmp	#LR__0128
02678     3A 75 12 F1 | 	add	local21, local21 wc
0267c     2C 59 22 F1 | 	addx	local07, local07
02680     01 5E 86 F1 | 	sub	local10, #1
02684     E4 FF 9F FD | 	jmp	#LR__0127
02688                 | LR__0128
02688                 | LR__0129
02688                 | LR__0130
02688                 | LR__0131
02688     2C 45 02 F6 | 	mov	arg01, local07
0268c     3A 47 02 F6 | 	mov	arg02, local21
02690     2F 49 02 F6 | 	mov	arg03, local10
02694     29 4B 02 F6 | 	mov	arg04, local04
02698     F4 11 B0 FD | 	call	#__system__pack_0134
0269c     D4 00 90 FD | 	jmp	#LR__0140
026a0                 | LR__0132
026a0     FF 6C 0E F2 | 	cmp	local17, #255 wz
026a4     10 00 90 5D |  if_ne	jmp	#LR__0133
026a8     29 71 0A F2 | 	cmp	local19, local04 wz
026ac     00 F8 3F 5F 
026b0     00 1E 06 56 |  if_ne	mov	result1, ##2146435072
026b4     BC 00 90 5D |  if_ne	jmp	#LR__0140
026b8                 | LR__0133
026b8     00 58 0E F2 | 	cmp	local07, #0 wz
026bc     00 F8 3F 5F 
026c0     00 1E 06 56 |  if_ne	mov	result1, ##2146435072
026c4     AC 00 90 5D |  if_ne	jmp	#LR__0140
026c8     29 4B 02 F6 | 	mov	arg04, local04
026cc     02 4A 46 F5 | 	or	arg04, #2
026d0     2C 45 02 F6 | 	mov	arg01, local07
026d4     3A 47 02 F6 | 	mov	arg02, local21
026d8     2F 49 02 F6 | 	mov	arg03, local10
026dc     B0 11 B0 FD | 	call	#__system__pack_0134
026e0     90 00 90 FD | 	jmp	#LR__0140
026e4                 | LR__0134
026e4     00 58 0E F2 | 	cmp	local07, #0 wz
026e8     24 00 90 AD |  if_e	jmp	#LR__0136
026ec     01 58 66 F0 | 	shl	local07, #1
026f0                 | LR__0135
026f0     00 40 00 FF 
026f4     00 58 1E F2 | 	cmp	local07, ##8388608 wcz
026f8     18 FE 9F 3D |  if_ae	jmp	#LR__0117
026fc     2F 61 02 F6 | 	mov	local11, local10
02700     01 60 86 F1 | 	sub	local11, #1
02704     30 5F 02 F6 | 	mov	local10, local11
02708     01 58 66 F0 | 	shl	local07, #1
0270c     E0 FF 9F FD | 	jmp	#LR__0135
02710                 | LR__0136
02710     38 53 02 F5 | 	and	local04, local19
02714     29 4B 02 F6 | 	mov	arg04, local04
02718     08 4A 46 F5 | 	or	arg04, #8
0271c     00 44 06 F6 | 	mov	arg01, #0
02720     00 46 06 F6 | 	mov	arg02, #0
02724     00 48 06 F6 | 	mov	arg03, #0
02728     64 11 B0 FD | 	call	#__system__pack_0134
0272c     44 00 90 FD | 	jmp	#LR__0140
02730                 | LR__0137
02730     00 66 0E F2 | 	cmp	local14, #0 wz
02734     24 00 90 AD |  if_e	jmp	#LR__0139
02738     01 66 66 F0 | 	shl	local14, #1
0273c                 | LR__0138
0273c     00 40 00 FF 
02740     00 66 1E F2 | 	cmp	local14, ##8388608 wcz
02744     D8 FD 9F 3D |  if_ae	jmp	#LR__0118
02748     36 61 02 F6 | 	mov	local11, local17
0274c     01 60 86 F1 | 	sub	local11, #1
02750     30 6D 02 F6 | 	mov	local17, local11
02754     01 66 66 F0 | 	shl	local14, #1
02758     E0 FF 9F FD | 	jmp	#LR__0138
0275c                 | LR__0139
0275c     2F 49 02 F6 | 	mov	arg03, local10
02760     7F 48 86 F1 | 	sub	arg03, #127
02764     2C 45 02 F6 | 	mov	arg01, local07
02768     3A 47 02 F6 | 	mov	arg02, local21
0276c     29 4B 02 F6 | 	mov	arg04, local04
02770     1C 11 B0 FD | 	call	#__system__pack_0134
02774                 | LR__0140
02774     AF F0 03 F6 | 	mov	ptra, fp
02778     BF 00 A0 FD | 	call	#popregs_
0277c                 | __system___float_add_ret
0277c     2D 00 64 FD | 	ret
02780                 | 
02780                 | __system___float_mul
02780     18 5A 05 F6 | 	mov	COUNT_, #24
02784     B0 00 A0 FD | 	call	#pushregs_
02788     22 4D 02 F6 | 	mov	local01, arg01
0278c     23 4F 02 F6 | 	mov	local02, arg02
02790     26 51 02 F6 | 	mov	local03, local01
02794     28 53 02 F6 | 	mov	local04, local03
02798     09 52 66 F0 | 	shl	local04, #9
0279c     29 55 02 F6 | 	mov	local05, local04
027a0     09 54 46 F0 | 	shr	local05, #9
027a4     2A 57 02 F6 | 	mov	local06, local05
027a8     28 59 02 F6 | 	mov	local07, local03
027ac     01 58 66 F0 | 	shl	local07, #1
027b0     2C 5B 02 F6 | 	mov	local08, local07
027b4     18 5A 46 F0 | 	shr	local08, #24
027b8     2D 5D 02 F6 | 	mov	local09, local08
027bc     1F 50 46 F0 | 	shr	local03, #31
027c0     27 5F 02 F6 | 	mov	local10, local02
027c4     2F 45 02 F6 | 	mov	arg01, local10
027c8     22 1F 02 F6 | 	mov	result1, arg01
027cc     0F 61 02 F6 | 	mov	local11, result1
027d0     30 63 02 F6 | 	mov	local12, local11
027d4     31 65 02 F6 | 	mov	local13, local12
027d8     09 64 66 F0 | 	shl	local13, #9
027dc     32 67 02 F6 | 	mov	local14, local13
027e0     09 66 46 F0 | 	shr	local14, #9
027e4     33 69 02 F6 | 	mov	local15, local14
027e8     31 6B 02 F6 | 	mov	local16, local12
027ec     01 6A 66 F0 | 	shl	local16, #1
027f0     35 6D 02 F6 | 	mov	local17, local16
027f4     18 6C 46 F0 | 	shr	local17, #24
027f8     36 6F 02 F6 | 	mov	local18, local17
027fc     1F 62 46 F0 | 	shr	local12, #31
02800     00 70 06 F6 | 	mov	local19, #0
02804     31 51 62 F5 | 	xor	local03, local12
02808     FF 5C 0E F2 | 	cmp	local09, #255 wz
0280c     84 00 90 AD |  if_e	jmp	#LR__0144
02810     FF 6E 0E F2 | 	cmp	local18, #255 wz
02814     D4 00 90 AD |  if_e	jmp	#LR__0147
02818     00 5C 0E F2 | 	cmp	local09, #0 wz
0281c     0C 01 90 AD |  if_e	jmp	#LR__0149
02820     17 56 26 F4 | 	bith	local06, #23
02824                 | LR__0141
02824     00 6E 0E F2 | 	cmp	local18, #0 wz
02828     40 01 90 AD |  if_e	jmp	#LR__0152
0282c     17 68 26 F4 | 	bith	local15, #23
02830                 | LR__0142
02830     2E 73 02 F6 | 	mov	local20, local09
02834     37 73 02 F1 | 	add	local20, local18
02838     FE 72 86 F1 | 	sub	local20, #254
0283c     2B 75 02 F6 | 	mov	local21, local06
02840     04 74 66 F0 | 	shl	local21, #4
02844     34 77 02 F6 | 	mov	local22, local15
02848     05 76 66 F0 | 	shl	local22, #5
0284c     3B 75 02 FD | 	qmul	local21, local22
02850     18 70 62 FD | 	getqx	local19
02854     19 78 62 FD | 	getqy	local23
02858     00 80 00 FF 
0285c     00 78 1E F2 | 	cmp	local23, ##16777216 wcz
02860     18 00 90 CD |  if_b	jmp	#LR__0143
02864     01 72 06 F1 | 	add	local20, #1
02868     01 70 46 F0 | 	shr	local19, #1
0286c     3C 7B 02 F6 | 	mov	local24, local23
02870     1F 7A 66 F0 | 	shl	local24, #31
02874     3D 71 42 F5 | 	or	local19, local24
02878     01 78 46 F0 | 	shr	local23, #1
0287c                 | LR__0143
0287c     3C 45 02 F6 | 	mov	arg01, local23
02880     38 47 02 F6 | 	mov	arg02, local19
02884     39 49 02 F6 | 	mov	arg03, local20
02888     28 4B 02 F6 | 	mov	arg04, local03
0288c     00 10 B0 FD | 	call	#__system__pack_0134
02890     1C 01 90 FD | 	jmp	#LR__0156
02894                 | LR__0144
02894     00 56 0E F2 | 	cmp	local06, #0 wz
02898     26 1F 02 56 |  if_ne	mov	result1, local01
0289c     10 01 90 5D |  if_ne	jmp	#LR__0156
028a0     FF 6E 5E F2 | 	cmps	local18, #255 wcz
028a4     1C 00 90 3D |  if_ae	jmp	#LR__0145
028a8     00 6E 0E F2 | 	cmp	local18, #0 wz
028ac     20 00 90 5D |  if_ne	jmp	#LR__0146
028b0     00 68 0E F2 | 	cmp	local15, #0 wz
028b4     18 00 90 5D |  if_ne	jmp	#LR__0146
028b8     00 F8 3F FF 
028bc     00 1E 06 F6 | 	mov	result1, ##2146435072
028c0     EC 00 90 FD | 	jmp	#LR__0156
028c4                 | LR__0145
028c4     00 68 0E F2 | 	cmp	local15, #0 wz
028c8     27 1F 02 56 |  if_ne	mov	result1, local02
028cc     E0 00 90 5D |  if_ne	jmp	#LR__0156
028d0                 | LR__0146
028d0     02 50 46 F5 | 	or	local03, #2
028d4     00 44 06 F6 | 	mov	arg01, #0
028d8     00 46 06 F6 | 	mov	arg02, #0
028dc     2E 49 02 F6 | 	mov	arg03, local09
028e0     28 4B 02 F6 | 	mov	arg04, local03
028e4     A8 0F B0 FD | 	call	#__system__pack_0134
028e8     C4 00 90 FD | 	jmp	#LR__0156
028ec                 | LR__0147
028ec     00 5C 0E F2 | 	cmp	local09, #0 wz
028f0     10 00 90 5D |  if_ne	jmp	#LR__0148
028f4     00 56 0E F2 | 	cmp	local06, #0 wz
028f8     00 F8 3F AF 
028fc     00 1E 06 A6 |  if_e	mov	result1, ##2146435072
02900     AC 00 90 AD |  if_e	jmp	#LR__0156
02904                 | LR__0148
02904     00 68 0E F2 | 	cmp	local15, #0 wz
02908     27 1F 02 56 |  if_ne	mov	result1, local02
0290c     A0 00 90 5D |  if_ne	jmp	#LR__0156
02910     28 4B 02 F6 | 	mov	arg04, local03
02914     02 4A 46 F5 | 	or	arg04, #2
02918     37 49 02 F6 | 	mov	arg03, local18
0291c     00 44 06 F6 | 	mov	arg01, #0
02920     00 46 06 F6 | 	mov	arg02, #0
02924     68 0F B0 FD | 	call	#__system__pack_0134
02928     84 00 90 FD | 	jmp	#LR__0156
0292c                 | LR__0149
0292c     00 56 0E F2 | 	cmp	local06, #0 wz
02930     1C 00 90 AD |  if_e	jmp	#LR__0151
02934     01 56 66 F0 | 	shl	local06, #1
02938                 | LR__0150
02938     00 40 00 FF 
0293c     00 56 1E F2 | 	cmp	local06, ##8388608 wcz
02940     E0 FE 9F 3D |  if_ae	jmp	#LR__0141
02944     01 5C 86 F1 | 	sub	local09, #1
02948     01 56 66 F0 | 	shl	local06, #1
0294c     E8 FF 9F FD | 	jmp	#LR__0150
02950                 | LR__0151
02950     08 50 46 F5 | 	or	local03, #8
02954     00 44 06 F6 | 	mov	arg01, #0
02958     00 46 06 F6 | 	mov	arg02, #0
0295c     00 48 06 F6 | 	mov	arg03, #0
02960     28 4B 02 F6 | 	mov	arg04, local03
02964     28 0F B0 FD | 	call	#__system__pack_0134
02968     44 00 90 FD | 	jmp	#LR__0156
0296c                 | LR__0152
0296c     00 68 0E F2 | 	cmp	local15, #0 wz
02970     24 00 90 AD |  if_e	jmp	#LR__0155
02974     01 68 66 F0 | 	shl	local15, #1
02978     98 D6 9F FE | 	loc	pa,	#(@LR__0154-@LR__0153)
0297c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02980                 | LR__0153
02980     00 40 00 FF 
02984     00 68 1E F2 | 	cmp	local15, ##8388608 wcz
02988     01 6E 86 C1 |  if_b	sub	local18, #1
0298c     01 68 66 C0 |  if_b	shl	local15, #1
02990     EC FF 9F CD |  if_b	jmp	#LR__0153
02994                 | LR__0154
02994     98 FE 9F FD | 	jmp	#LR__0142
02998                 | LR__0155
02998     28 4B 02 F6 | 	mov	arg04, local03
0299c     08 4A 46 F5 | 	or	arg04, #8
029a0     00 44 06 F6 | 	mov	arg01, #0
029a4     00 46 06 F6 | 	mov	arg02, #0
029a8     00 48 06 F6 | 	mov	arg03, #0
029ac     E0 0E B0 FD | 	call	#__system__pack_0134
029b0                 | LR__0156
029b0     AF F0 03 F6 | 	mov	ptra, fp
029b4     BF 00 A0 FD | 	call	#popregs_
029b8                 | __system___float_mul_ret
029b8     2D 00 64 FD | 	ret
029bc                 | 
029bc                 | __system___float_div
029bc     19 5A 05 F6 | 	mov	COUNT_, #25
029c0     B0 00 A0 FD | 	call	#pushregs_
029c4     22 51 02 F6 | 	mov	local03, arg01
029c8     23 53 02 F6 | 	mov	local04, arg02
029cc     28 55 02 F6 | 	mov	local05, local03
029d0     2A 57 02 F6 | 	mov	local06, local05
029d4     09 56 66 F0 | 	shl	local06, #9
029d8     2B 59 02 F6 | 	mov	local07, local06
029dc     09 58 46 F0 | 	shr	local07, #9
029e0     2C 5B 02 F6 | 	mov	local08, local07
029e4     2A 5D 02 F6 | 	mov	local09, local05
029e8     01 5C 66 F0 | 	shl	local09, #1
029ec     2E 5F 02 F6 | 	mov	local10, local09
029f0     18 5E 46 F0 | 	shr	local10, #24
029f4     2F 61 02 F6 | 	mov	local11, local10
029f8     1F 54 46 F0 | 	shr	local05, #31
029fc     29 1F 02 F6 | 	mov	result1, local04
02a00     0F 63 02 F6 | 	mov	local12, result1
02a04     31 65 02 F6 | 	mov	local13, local12
02a08     09 64 66 F0 | 	shl	local13, #9
02a0c     32 67 02 F6 | 	mov	local14, local13
02a10     09 66 46 F0 | 	shr	local14, #9
02a14     33 69 02 F6 | 	mov	local15, local14
02a18     31 6B 02 F6 | 	mov	local16, local12
02a1c     01 6A 66 F0 | 	shl	local16, #1
02a20     35 6D 02 F6 | 	mov	local17, local16
02a24     18 6C 46 F0 | 	shr	local17, #24
02a28     36 6F 02 F6 | 	mov	local18, local17
02a2c     1F 62 46 F0 | 	shr	local12, #31
02a30     31 55 62 F5 | 	xor	local05, local12
02a34     FF 60 0E F2 | 	cmp	local11, #255 wz
02a38     D8 00 90 AD |  if_e	jmp	#LR__0162
02a3c     FF 6E 0E F2 | 	cmp	local18, #255 wz
02a40     08 01 90 AD |  if_e	jmp	#LR__0163
02a44     00 60 0E F2 | 	cmp	local11, #0 wz
02a48     28 01 90 AD |  if_e	jmp	#LR__0164
02a4c     17 5A 26 F4 | 	bith	local08, #23
02a50                 | LR__0157
02a50     00 6E 0E F2 | 	cmp	local18, #0 wz
02a54     7C 01 90 AD |  if_e	jmp	#LR__0169
02a58     17 68 26 F4 | 	bith	local15, #23
02a5c                 | LR__0158
02a5c     30 71 02 F6 | 	mov	local19, local11
02a60     37 71 82 F1 | 	sub	local19, local18
02a64     2D 45 02 F6 | 	mov	arg01, local08
02a68     02 44 46 F0 | 	shr	arg01, #2
02a6c     2D 47 02 F6 | 	mov	arg02, local08
02a70     1E 46 66 F0 | 	shl	arg02, #30
02a74     34 49 02 F6 | 	mov	arg03, local15
02a78     28 44 62 FD | 	setq	arg01
02a7c     24 47 12 FD | 	qdiv	arg02, arg03
02a80     18 1E 62 FD | 	getqx	result1
02a84     19 20 62 FD | 	getqy	result2
02a88     0F 4D 02 F6 | 	mov	local01, result1
02a8c     10 4F 02 F6 | 	mov	local02, result2
02a90     26 73 02 F6 | 	mov	local20, local01
02a94     27 75 0A F6 | 	mov	local21, local02 wz
02a98     39 77 02 F6 | 	mov	local22, local20
02a9c     19 76 66 F0 | 	shl	local22, #25
02aa0     00 78 06 F6 | 	mov	local23, #0
02aa4     01 78 06 56 |  if_ne	mov	local23, #1
02aa8     3C 77 42 F5 | 	or	local22, local23
02aac     07 72 46 F0 | 	shr	local20, #7
02ab0     00 80 00 FF 
02ab4     00 72 1E F2 | 	cmp	local20, ##16777216 wcz
02ab8     1C 00 90 CD |  if_b	jmp	#LR__0159
02abc     01 70 06 F1 | 	add	local19, #1
02ac0     01 76 46 F0 | 	shr	local22, #1
02ac4     39 7B 02 F6 | 	mov	local24, local20
02ac8     1F 7A 66 F0 | 	shl	local24, #31
02acc     3D 77 42 F5 | 	or	local22, local24
02ad0     01 72 46 F0 | 	shr	local20, #1
02ad4     24 00 90 FD | 	jmp	#LR__0161
02ad8                 | LR__0159
02ad8     00 40 00 FF 
02adc     00 72 1E F2 | 	cmp	local20, ##8388608 wcz
02ae0     18 00 90 3D |  if_ae	jmp	#LR__0160
02ae4     01 70 86 F1 | 	sub	local19, #1
02ae8     01 72 66 F0 | 	shl	local20, #1
02aec     3B 7D 02 F6 | 	mov	local25, local22
02af0     1F 7C 46 F0 | 	shr	local25, #31
02af4     3E 73 42 F5 | 	or	local20, local25
02af8     01 76 66 F0 | 	shl	local22, #1
02afc                 | LR__0160
02afc                 | LR__0161
02afc     39 45 02 F6 | 	mov	arg01, local20
02b00     3B 47 02 F6 | 	mov	arg02, local22
02b04     38 49 02 F6 | 	mov	arg03, local19
02b08     2A 4B 02 F6 | 	mov	arg04, local05
02b0c     80 0D B0 FD | 	call	#__system__pack_0134
02b10     04 01 90 FD | 	jmp	#LR__0173
02b14                 | LR__0162
02b14     00 5A 0E F2 | 	cmp	local08, #0 wz
02b18     28 1F 02 56 |  if_ne	mov	result1, local03
02b1c     F8 00 90 5D |  if_ne	jmp	#LR__0173
02b20     FF 6E 0E F2 | 	cmp	local18, #255 wz
02b24     00 F8 3F AF 
02b28     00 1E 06 A6 |  if_e	mov	result1, ##2146435072
02b2c     E8 00 90 AD |  if_e	jmp	#LR__0173
02b30     02 54 46 F5 | 	or	local05, #2
02b34     00 44 06 F6 | 	mov	arg01, #0
02b38     00 46 06 F6 | 	mov	arg02, #0
02b3c     30 49 02 F6 | 	mov	arg03, local11
02b40     2A 4B 02 F6 | 	mov	arg04, local05
02b44     48 0D B0 FD | 	call	#__system__pack_0134
02b48     CC 00 90 FD | 	jmp	#LR__0173
02b4c                 | LR__0163
02b4c     00 68 0E F2 | 	cmp	local15, #0 wz
02b50     29 1F 02 56 |  if_ne	mov	result1, local04
02b54     C0 00 90 5D |  if_ne	jmp	#LR__0173
02b58     2A 4B 02 F6 | 	mov	arg04, local05
02b5c     08 4A 46 F5 | 	or	arg04, #8
02b60     00 44 06 F6 | 	mov	arg01, #0
02b64     00 46 06 F6 | 	mov	arg02, #0
02b68     00 48 06 F6 | 	mov	arg03, #0
02b6c     20 0D B0 FD | 	call	#__system__pack_0134
02b70     A4 00 90 FD | 	jmp	#LR__0173
02b74                 | LR__0164
02b74     00 5A 0E F2 | 	cmp	local08, #0 wz
02b78     24 00 90 AD |  if_e	jmp	#LR__0167
02b7c     01 5A 66 F0 | 	shl	local08, #1
02b80     90 D4 9F FE | 	loc	pa,	#(@LR__0166-@LR__0165)
02b84     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b88                 | LR__0165
02b88     00 40 00 FF 
02b8c     00 5A 1E F2 | 	cmp	local08, ##8388608 wcz
02b90     01 60 86 C1 |  if_b	sub	local11, #1
02b94     01 5A 66 C0 |  if_b	shl	local08, #1
02b98     EC FF 9F CD |  if_b	jmp	#LR__0165
02b9c                 | LR__0166
02b9c     B0 FE 9F FD | 	jmp	#LR__0157
02ba0                 | LR__0167
02ba0     00 6E 0E F2 | 	cmp	local18, #0 wz
02ba4     10 00 90 5D |  if_ne	jmp	#LR__0168
02ba8     00 68 0E F2 | 	cmp	local15, #0 wz
02bac     00 F8 3F AF 
02bb0     00 1E 06 A6 |  if_e	mov	result1, ##2146435072
02bb4     60 00 90 AD |  if_e	jmp	#LR__0173
02bb8                 | LR__0168
02bb8     2A 4B 02 F6 | 	mov	arg04, local05
02bbc     08 4A 46 F5 | 	or	arg04, #8
02bc0     00 44 06 F6 | 	mov	arg01, #0
02bc4     00 46 06 F6 | 	mov	arg02, #0
02bc8     00 48 06 F6 | 	mov	arg03, #0
02bcc     C0 0C B0 FD | 	call	#__system__pack_0134
02bd0     44 00 90 FD | 	jmp	#LR__0173
02bd4                 | LR__0169
02bd4     00 68 0E F2 | 	cmp	local15, #0 wz
02bd8     24 00 90 AD |  if_e	jmp	#LR__0172
02bdc     01 68 66 F0 | 	shl	local15, #1
02be0     30 D4 9F FE | 	loc	pa,	#(@LR__0171-@LR__0170)
02be4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02be8                 | LR__0170
02be8     00 40 00 FF 
02bec     00 68 1E F2 | 	cmp	local15, ##8388608 wcz
02bf0     01 6E 86 C1 |  if_b	sub	local18, #1
02bf4     01 68 66 C0 |  if_b	shl	local15, #1
02bf8     EC FF 9F CD |  if_b	jmp	#LR__0170
02bfc                 | LR__0171
02bfc     5C FE 9F FD | 	jmp	#LR__0158
02c00                 | LR__0172
02c00     2A 4B 02 F6 | 	mov	arg04, local05
02c04     02 4A 46 F5 | 	or	arg04, #2
02c08     00 44 06 F6 | 	mov	arg01, #0
02c0c     00 46 06 F6 | 	mov	arg02, #0
02c10     00 48 06 F6 | 	mov	arg03, #0
02c14     78 0C B0 FD | 	call	#__system__pack_0134
02c18                 | LR__0173
02c18     AF F0 03 F6 | 	mov	ptra, fp
02c1c     BF 00 A0 FD | 	call	#popregs_
02c20                 | __system___float_div_ret
02c20     2D 00 64 FD | 	ret
02c24                 | 
02c24                 | __system___float_cmp
02c24     22 25 02 F6 | 	mov	_var01, arg01
02c28     00 C0 3F FF 
02c2c     00 24 5E F2 | 	cmps	_var01, ##2139095040 wcz
02c30     0C 00 90 1D |  if_a	jmp	#LR__0174
02c34     00 C0 3F FF 
02c38     00 46 5E F2 | 	cmps	arg02, ##2139095040 wcz
02c3c     08 00 90 ED |  if_be	jmp	#LR__0175
02c40                 | LR__0174
02c40     24 1F 02 F6 | 	mov	result1, arg03
02c44     88 00 90 FD | 	jmp	#__system___float_cmp_ret
02c48                 | LR__0175
02c48     00 C0 7F FF 
02c4c     00 24 1E F2 | 	cmp	_var01, ##-8388608 wcz
02c50     0C 00 90 1D |  if_a	jmp	#LR__0176
02c54     00 C0 7F FF 
02c58     00 24 1E F2 | 	cmp	_var01, ##-8388608 wcz
02c5c     08 00 90 ED |  if_be	jmp	#LR__0177
02c60                 | LR__0176
02c60     24 1F 02 F6 | 	mov	result1, arg03
02c64     68 00 90 FD | 	jmp	#__system___float_cmp_ret
02c68                 | LR__0177
02c68     00 24 5E F2 | 	cmps	_var01, #0 wcz
02c6c     30 00 90 3D |  if_ae	jmp	#LR__0179
02c70     00 46 5E F2 | 	cmps	arg02, #0 wcz
02c74     23 1F 02 C6 |  if_b	mov	result1, arg02
02c78     12 1F 82 C1 |  if_b	sub	result1, _var01
02c7c     50 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
02c80     00 46 0E F2 | 	cmp	arg02, #0 wz
02c84     10 00 90 5D |  if_ne	jmp	#LR__0178
02c88     00 00 40 FF 
02c8c     00 24 0E F2 | 	cmp	_var01, ##-2147483648 wz
02c90     00 1E 06 A6 |  if_e	mov	result1, #0
02c94     38 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
02c98                 | LR__0178
02c98     01 1E 66 F6 | 	neg	result1, #1
02c9c     30 00 90 FD | 	jmp	#__system___float_cmp_ret
02ca0                 | LR__0179
02ca0     00 46 5E F2 | 	cmps	arg02, #0 wcz
02ca4     20 00 90 3D |  if_ae	jmp	#LR__0181
02ca8     00 24 0E F2 | 	cmp	_var01, #0 wz
02cac     10 00 90 5D |  if_ne	jmp	#LR__0180
02cb0     00 00 40 FF 
02cb4     00 46 0E F2 | 	cmp	arg02, ##-2147483648 wz
02cb8     00 1E 06 A6 |  if_e	mov	result1, #0
02cbc     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
02cc0                 | LR__0180
02cc0     01 1E 06 F6 | 	mov	result1, #1
02cc4     08 00 90 FD | 	jmp	#__system___float_cmp_ret
02cc8                 | LR__0181
02cc8     23 25 82 F1 | 	sub	_var01, arg02
02ccc     12 1F 02 F6 | 	mov	result1, _var01
02cd0                 | __system___float_cmp_ret
02cd0     2D 00 64 FD | 	ret
02cd4                 | 
02cd4                 | __system___float_Pack
02cd4     00 24 06 F6 | 	mov	_var01, #0
02cd8     00 48 0E F2 | 	cmp	arg03, #0 wz
02cdc     84 00 90 AD |  if_e	jmp	#LR__0183
02ce0     24 27 02 F6 | 	mov	_var02, arg03
02ce4     13 27 92 F7 | 	encod	_var02, _var02 wc
02ce8     01 26 06 C1 |  if_b	add	_var02, #1
02cec     21 24 06 F6 | 	mov	_var01, #33
02cf0     13 25 82 F1 | 	sub	_var01, _var02
02cf4     12 49 62 F0 | 	shl	arg03, _var01
02cf8     03 28 06 F6 | 	mov	_var03, #3
02cfc     12 29 82 F1 | 	sub	_var03, _var01
02d00     14 47 02 F1 | 	add	arg02, _var03
02d04     00 49 06 F1 | 	add	arg03, #256
02d08     24 2B 02 F6 | 	mov	_var04, arg03
02d0c     FF 2A 2E F5 | 	andn	_var04, #255 wz
02d10     01 46 06 A1 |  if_e	add	arg02, #1
02d14     7F 46 06 F1 | 	add	arg02, #127
02d18     FF FF 7F FF 
02d1c     E9 47 46 F3 | 	fges	arg02, ##-23
02d20     FF 46 66 F3 | 	fles	arg02, #255
02d24     01 46 5E F2 | 	cmps	arg02, #1 wcz
02d28     1C 00 90 3D |  if_ae	jmp	#LR__0182
02d2c     01 48 46 F0 | 	shr	arg03, #1
02d30     1F 2A C6 F9 | 	decod	_var04, #31
02d34     24 2B 02 F1 | 	add	_var04, arg03
02d38     23 47 62 F6 | 	neg	arg02, arg02
02d3c     23 2B 42 F0 | 	shr	_var04, arg02
02d40     15 49 02 F6 | 	mov	arg03, _var04
02d44     00 46 06 F6 | 	mov	arg02, #0
02d48                 | LR__0182
02d48     1F 44 66 F0 | 	shl	arg01, #31
02d4c     22 1F 02 F6 | 	mov	result1, arg01
02d50     17 46 66 F0 | 	shl	arg02, #23
02d54     23 1F 42 F5 | 	or	result1, arg02
02d58     09 48 46 F0 | 	shr	arg03, #9
02d5c     24 1F 42 F5 | 	or	result1, arg03
02d60     04 00 90 FD | 	jmp	#__system___float_Pack_ret
02d64                 | LR__0183
02d64     12 1F 02 F6 | 	mov	result1, _var01
02d68                 | __system___float_Pack_ret
02d68     2D 00 64 FD | 	ret
02d6c                 | 
02d6c                 | __system___gc_ptrs
02d6c     0A 5A 05 F6 | 	mov	COUNT_, #10
02d70     B0 00 A0 FD | 	call	#pushregs_
02d74     02 4D 02 F6 | 	mov	local01, __heap_ptr
02d78     26 4F 02 F6 | 	mov	local02, local01
02d7c     07 00 00 FF 
02d80     F8 4F 06 F1 | 	add	local02, ##4088
02d84     26 51 0A FB | 	rdlong	local03, local01 wz
02d88     74 00 90 5D |  if_ne	jmp	#LR__0184
02d8c     27 53 02 F6 | 	mov	local04, local02
02d90     26 53 82 F1 | 	sub	local04, local01
02d94     26 03 58 FC | 	wrword	#1, local01
02d98     26 55 02 F6 | 	mov	local05, local01
02d9c     02 54 06 F1 | 	add	local05, #2
02da0     36 00 80 FF 
02da4     2A 21 59 FC | 	wrword	##27792, local05
02da8     26 57 02 F6 | 	mov	local06, local01
02dac     04 56 06 F1 | 	add	local06, #4
02db0     2B 01 58 FC | 	wrword	#0, local06
02db4     26 59 02 F6 | 	mov	local07, local01
02db8     06 58 06 F1 | 	add	local07, #6
02dbc     2C 03 58 FC | 	wrword	#1, local07
02dc0     10 4C 06 F1 | 	add	local01, #16
02dc4     29 51 52 F6 | 	abs	local03, local04 wc
02dc8     04 50 46 F0 | 	shr	local03, #4
02dcc     28 51 62 C6 |  if_b	neg	local03, local03
02dd0     26 51 52 FC | 	wrword	local03, local01
02dd4     26 5B 02 F6 | 	mov	local08, local01
02dd8     02 5A 06 F1 | 	add	local08, #2
02ddc     36 00 80 FF 
02de0     2D 1F 59 FC | 	wrword	##27791, local08
02de4     26 5D 02 F6 | 	mov	local09, local01
02de8     04 5C 06 F1 | 	add	local09, #4
02dec     2E 01 58 FC | 	wrword	#0, local09
02df0     26 5F 02 F6 | 	mov	local10, local01
02df4     06 5E 06 F1 | 	add	local10, #6
02df8     2F 01 58 FC | 	wrword	#0, local10
02dfc     10 4C 86 F1 | 	sub	local01, #16
02e00                 | LR__0184
02e00     27 21 02 F6 | 	mov	result2, local02
02e04     26 1F 02 F6 | 	mov	result1, local01
02e08     AF F0 03 F6 | 	mov	ptra, fp
02e0c     BF 00 A0 FD | 	call	#popregs_
02e10                 | __system___gc_ptrs_ret
02e10     2D 00 64 FD | 	ret
02e14                 | 
02e14                 | __system___gc_nextBlockPtr
02e14     02 5A 05 F6 | 	mov	COUNT_, #2
02e18     B0 00 A0 FD | 	call	#pushregs_
02e1c     22 4D 02 F6 | 	mov	local01, arg01
02e20     26 4F EA FA | 	rdword	local02, local01 wz
02e24     10 00 90 5D |  if_ne	jmp	#LR__0185
02e28     22 00 00 FF 
02e2c     94 44 06 F6 | 	mov	arg01, ##@LR__0291
02e30     F8 01 B0 FD | 	call	#__system___gc_errmsg
02e34     0C 00 90 FD | 	jmp	#LR__0186
02e38                 | LR__0185
02e38     04 4E 66 F0 | 	shl	local02, #4
02e3c     26 1F 02 F6 | 	mov	result1, local01
02e40     27 1F 02 F1 | 	add	result1, local02
02e44                 | LR__0186
02e44     AF F0 03 F6 | 	mov	ptra, fp
02e48     BF 00 A0 FD | 	call	#popregs_
02e4c                 | __system___gc_nextBlockPtr_ret
02e4c     2D 00 64 FD | 	ret
02e50                 | 
02e50                 | __system___gc_tryalloc
02e50     1B 5A 05 F6 | 	mov	COUNT_, #27
02e54     B0 00 A0 FD | 	call	#pushregs_
02e58     22 4D 02 F6 | 	mov	local01, arg01
02e5c     23 4F 02 F6 | 	mov	local02, arg02
02e60     08 FF BF FD | 	call	#__system___gc_ptrs
02e64     0F 51 02 F6 | 	mov	local03, result1
02e68     10 53 02 F6 | 	mov	local04, result2
02e6c     28 55 02 F6 | 	mov	local05, local03
02e70     00 56 06 F6 | 	mov	local06, #0
02e74     E0 D1 9F FE | 	loc	pa,	#(@LR__0188-@LR__0187)
02e78     93 00 A0 FD | 	call	#FCACHE_LOAD_
02e7c                 | LR__0187
02e7c     2A 59 02 F6 | 	mov	local07, local05
02e80     06 54 06 F1 | 	add	local05, #6
02e84     2A 5B 02 F6 | 	mov	local08, local05
02e88     28 5D 02 F6 | 	mov	local09, local03
02e8c     2D 5F E2 FA | 	rdword	local10, local08
02e90     2E 45 02 F6 | 	mov	arg01, local09
02e94     2F 47 0A F6 | 	mov	arg02, local10 wz
02e98     00 1E 06 A6 |  if_e	mov	result1, #0
02e9c     04 46 66 50 |  if_ne	shl	arg02, #4
02ea0     23 45 02 51 |  if_ne	add	arg01, arg02
02ea4     22 1F 02 56 |  if_ne	mov	result1, arg01
02ea8     0F 61 02 F6 | 	mov	local11, result1
02eac     30 55 0A F6 | 	mov	local05, local11 wz
02eb0     2A 5D 02 56 |  if_ne	mov	local09, local05
02eb4     2E 63 02 56 |  if_ne	mov	local12, local09
02eb8     31 57 E2 5A |  if_ne	rdword	local06, local12
02ebc     00 54 0E F2 | 	cmp	local05, #0 wz
02ec0     10 00 90 AD |  if_e	jmp	#LR__0189
02ec4     29 55 5A F2 | 	cmps	local05, local04 wcz
02ec8     08 00 90 3D |  if_ae	jmp	#LR__0189
02ecc     2B 4D 5A F2 | 	cmps	local01, local06 wcz
02ed0     A8 FF 9F 1D |  if_a	jmp	#LR__0187
02ed4                 | LR__0188
02ed4                 | LR__0189
02ed4     00 54 0E F2 | 	cmp	local05, #0 wz
02ed8     2A 1F 02 A6 |  if_e	mov	result1, local05
02edc     40 01 90 AD |  if_e	jmp	#LR__0192
02ee0     2A 65 02 F6 | 	mov	local13, local05
02ee4     06 64 06 F1 | 	add	local13, #6
02ee8     32 67 E2 FA | 	rdword	local14, local13
02eec     2B 4D 5A F2 | 	cmps	local01, local06 wcz
02ef0     CC 00 90 3D |  if_ae	jmp	#LR__0191
02ef4     2A 69 02 F6 | 	mov	local15, local05
02ef8     34 4D 52 FC | 	wrword	local01, local15
02efc     26 6B 02 F6 | 	mov	local16, local01
02f00     04 6A 66 F0 | 	shl	local16, #4
02f04     2A 6D 02 F6 | 	mov	local17, local05
02f08     35 6D 02 F1 | 	add	local17, local16
02f0c     2B 6F 02 F6 | 	mov	local18, local06
02f10     26 6F 82 F1 | 	sub	local18, local01
02f14     36 71 02 F6 | 	mov	local19, local17
02f18     38 6F 52 FC | 	wrword	local18, local19
02f1c     36 73 02 F6 | 	mov	local20, local17
02f20     02 72 06 F1 | 	add	local20, #2
02f24     36 00 80 FF 
02f28     39 1F 59 FC | 	wrword	##27791, local20
02f2c     36 75 02 F6 | 	mov	local21, local17
02f30     04 74 06 F1 | 	add	local21, #4
02f34     2A 47 0A F6 | 	mov	arg02, local05 wz
02f38     00 1E 06 A6 |  if_e	mov	result1, #0
02f3c     28 47 82 51 |  if_ne	sub	arg02, local03
02f40     04 46 46 50 |  if_ne	shr	arg02, #4
02f44     23 1F 02 56 |  if_ne	mov	result1, arg02
02f48     3A 1F 52 FC | 	wrword	result1, local21
02f4c     36 77 02 F6 | 	mov	local22, local17
02f50     32 5D E2 FA | 	rdword	local09, local13
02f54     06 76 06 F1 | 	add	local22, #6
02f58     3B 5D 52 FC | 	wrword	local09, local22
02f5c     36 79 02 F6 | 	mov	local23, local17
02f60     3C 47 0A F6 | 	mov	arg02, local23 wz
02f64     00 1E 06 A6 |  if_e	mov	result1, #0
02f68     28 47 82 51 |  if_ne	sub	arg02, local03
02f6c     04 46 46 50 |  if_ne	shr	arg02, #4
02f70     23 1F 02 56 |  if_ne	mov	result1, arg02
02f74     0F 67 02 F6 | 	mov	local14, result1
02f78     36 45 02 F6 | 	mov	arg01, local17
02f7c     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
02f80     0F 7B 0A F6 | 	mov	local24, result1 wz
02f84     38 00 90 AD |  if_e	jmp	#LR__0190
02f88     29 7B 5A F2 | 	cmps	local24, local04 wcz
02f8c     30 00 90 3D |  if_ae	jmp	#LR__0190
02f90     3D 7D 02 F6 | 	mov	local25, local24
02f94     04 7C 06 F1 | 	add	local25, #4
02f98     28 5D 02 F6 | 	mov	local09, local03
02f9c     3C 5F 02 F6 | 	mov	local10, local23
02fa0     2E 45 02 F6 | 	mov	arg01, local09
02fa4     2F 47 0A F6 | 	mov	arg02, local10 wz
02fa8     00 1E 06 A6 |  if_e	mov	result1, #0
02fac     22 47 82 51 |  if_ne	sub	arg02, arg01
02fb0     04 46 46 50 |  if_ne	shr	arg02, #4
02fb4     23 1F 02 56 |  if_ne	mov	result1, arg02
02fb8     0F 61 02 F6 | 	mov	local11, result1
02fbc     3E 61 52 FC | 	wrword	local11, local25
02fc0                 | LR__0190
02fc0                 | LR__0191
02fc0     06 58 06 F1 | 	add	local07, #6
02fc4     2C 67 52 FC | 	wrword	local14, local07
02fc8     36 00 00 FF 
02fcc     80 5C 06 F6 | 	mov	local09, ##27776
02fd0     27 5D 42 F5 | 	or	local09, local02
02fd4     2A 7F 02 F6 | 	mov	local26, local05
02fd8     02 7E 06 F1 | 	add	local26, #2
02fdc     01 1E 62 FD | 	cogid	result1
02fe0     0F 5D 42 F5 | 	or	local09, result1
02fe4     3F 5D 52 FC | 	wrword	local09, local26
02fe8     28 81 02 F6 | 	mov	local27, local03
02fec     08 80 06 F1 | 	add	local27, #8
02ff0     40 5D E2 FA | 	rdword	local09, local27
02ff4     32 5D 52 FC | 	wrword	local09, local13
02ff8     2A 47 0A F6 | 	mov	arg02, local05 wz
02ffc     00 1E 06 A6 |  if_e	mov	result1, #0
03000     28 47 82 51 |  if_ne	sub	arg02, local03
03004     04 46 46 50 |  if_ne	shr	arg02, #4
03008     23 1F 02 56 |  if_ne	mov	result1, arg02
0300c     40 1F 52 FC | 	wrword	result1, local27
03010     08 54 06 F1 | 	add	local05, #8
03014     2A 1F 02 F6 | 	mov	result1, local05
03018     00 C0 31 FF 
0301c     00 1E 46 F5 | 	or	result1, ##1669332992
03020                 | LR__0192
03020     AF F0 03 F6 | 	mov	ptra, fp
03024     BF 00 A0 FD | 	call	#popregs_
03028                 | __system___gc_tryalloc_ret
03028     2D 00 64 FD | 	ret
0302c                 | 
0302c                 | __system___gc_errmsg
0302c     02 5A 05 F6 | 	mov	COUNT_, #2
03030     B0 00 A0 FD | 	call	#pushregs_
03034     22 4D 02 F6 | 	mov	local01, arg01
03038                 | LR__0193
03038     26 4F CA FA | 	rdbyte	local02, local01 wz
0303c     01 4C 06 F1 | 	add	local01, #1
03040     0C 00 90 AD |  if_e	jmp	#LR__0194
03044     27 45 02 F6 | 	mov	arg01, local02
03048     74 F1 BF FD | 	call	#__system___tx
0304c     E8 FF 9F FD | 	jmp	#LR__0193
03050                 | LR__0194
03050     00 1E 06 F6 | 	mov	result1, #0
03054     AF F0 03 F6 | 	mov	ptra, fp
03058     BF 00 A0 FD | 	call	#popregs_
0305c                 | __system___gc_errmsg_ret
0305c     2D 00 64 FD | 	ret
03060                 | 
03060                 | __system___gc_alloc_managed
03060     02 5A 05 F6 | 	mov	COUNT_, #2
03064     B0 00 A0 FD | 	call	#pushregs_
03068     22 4D 02 F6 | 	mov	local01, arg01
0306c     00 46 06 F6 | 	mov	arg02, #0
03070     30 00 B0 FD | 	call	#__system___gc_doalloc
03074     0F 4F 0A F6 | 	mov	local02, result1 wz
03078     18 00 90 5D |  if_ne	jmp	#LR__0195
0307c     00 4C 5E F2 | 	cmps	local01, #0 wcz
03080     10 00 90 ED |  if_be	jmp	#LR__0195
03084     22 00 00 FF 
03088     B0 44 06 F6 | 	mov	arg01, ##@LR__0292
0308c     9C FF BF FD | 	call	#__system___gc_errmsg
03090     04 00 90 FD | 	jmp	#LR__0196
03094                 | LR__0195
03094     27 1F 02 F6 | 	mov	result1, local02
03098                 | LR__0196
03098     AF F0 03 F6 | 	mov	ptra, fp
0309c     BF 00 A0 FD | 	call	#popregs_
030a0                 | __system___gc_alloc_managed_ret
030a0     2D 00 64 FD | 	ret
030a4                 | 
030a4                 | __system___gc_doalloc
030a4     07 5A 05 F6 | 	mov	COUNT_, #7
030a8     B0 00 A0 FD | 	call	#pushregs_
030ac     22 4D 0A F6 | 	mov	local01, arg01 wz
030b0     23 4F 02 F6 | 	mov	local02, arg02
030b4     00 1E 06 A6 |  if_e	mov	result1, #0
030b8     8C 00 90 AD |  if_e	jmp	#LR__0204
030bc     17 4C 06 F1 | 	add	local01, #23
030c0     0F 4C 26 F5 | 	andn	local01, #15
030c4     04 4C 46 F0 | 	shr	local01, #4
030c8     14 10 06 F1 | 	add	ptr___system__dat__, #20
030cc     08 51 02 F6 | 	mov	local03, ptr___system__dat__
030d0     28 45 02 F6 | 	mov	arg01, local03
030d4     14 10 86 F1 | 	sub	ptr___system__dat__, #20
030d8     AC F0 BF FD | 	call	#__system___lockmem
030dc     26 45 02 F6 | 	mov	arg01, local01
030e0     27 47 02 F6 | 	mov	arg02, local02
030e4     68 FD BF FD | 	call	#__system___gc_tryalloc
030e8     0F 53 0A F6 | 	mov	local04, result1 wz
030ec     14 00 90 5D |  if_ne	jmp	#LR__0197
030f0     10 03 B0 FD | 	call	#__system___gc_docollect
030f4     26 45 02 F6 | 	mov	arg01, local01
030f8     27 47 02 F6 | 	mov	arg02, local02
030fc     50 FD BF FD | 	call	#__system___gc_tryalloc
03100     0F 53 02 F6 | 	mov	local04, result1
03104                 | LR__0197
03104     28 01 68 FC | 	wrlong	#0, local03
03108     00 52 0E F2 | 	cmp	local04, #0 wz
0310c     34 00 90 AD |  if_e	jmp	#LR__0203
03110     04 4C 66 F0 | 	shl	local01, #4
03114     08 4C 86 F1 | 	sub	local01, #8
03118     26 55 52 F6 | 	abs	local05, local01 wc
0311c     02 54 46 F0 | 	shr	local05, #2
03120     2A 55 62 C6 |  if_b	neg	local05, local05
03124     2A 57 0A F6 | 	mov	local06, local05 wz
03128     29 59 02 F6 | 	mov	local07, local04
0312c     14 00 90 AD |  if_e	jmp	#LR__0202
03130     D8 CE 9F FE | 	loc	pa,	#(@LR__0200-@LR__0198)
03134     93 00 A0 FD | 	call	#FCACHE_LOAD_
03138                 | LR__0198
03138     2B 05 D8 FC | 	rep	@LR__0201, local06
0313c                 | LR__0199
0313c     2C 01 68 FC | 	wrlong	#0, local07
03140     04 58 06 F1 | 	add	local07, #4
03144                 | LR__0200
03144                 | LR__0201
03144                 | LR__0202
03144                 | LR__0203
03144     29 1F 02 F6 | 	mov	result1, local04
03148                 | LR__0204
03148     AF F0 03 F6 | 	mov	ptra, fp
0314c     BF 00 A0 FD | 	call	#popregs_
03150                 | __system___gc_doalloc_ret
03150     2D 00 64 FD | 	ret
03154                 | 
03154                 | __system___gc_isvalidptr
03154     24 25 02 F6 | 	mov	_var01, arg03
03158     12 27 02 F6 | 	mov	_var02, _var01
0315c     00 F8 7F FF 
03160     00 26 06 F5 | 	and	_var02, ##-1048576
03164     00 C0 31 FF 
03168     00 26 0E F2 | 	cmp	_var02, ##1669332992 wz
0316c     00 1E 06 56 |  if_ne	mov	result1, #0
03170     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
03174     08 24 86 F1 | 	sub	_var01, #8
03178     12 29 02 F6 | 	mov	_var03, _var01
0317c     00 F8 7F FF 
03180     00 28 26 F5 | 	andn	_var03, ##-1048576
03184     22 29 5A F2 | 	cmps	_var03, arg01 wcz
03188     08 00 90 CD |  if_b	jmp	#LR__0205
0318c     23 29 5A F2 | 	cmps	_var03, arg02 wcz
03190     08 00 90 CD |  if_b	jmp	#LR__0206
03194                 | LR__0205
03194     00 1E 06 F6 | 	mov	result1, #0
03198     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
0319c                 | LR__0206
0319c     14 27 02 F6 | 	mov	_var02, _var03
031a0     22 27 62 F5 | 	xor	_var02, arg01
031a4     0F 26 0E F5 | 	and	_var02, #15 wz
031a8     00 1E 06 56 |  if_ne	mov	result1, #0
031ac     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
031b0     14 2B 02 F6 | 	mov	_var04, _var03
031b4     02 2A 06 F1 | 	add	_var04, #2
031b8     15 27 E2 FA | 	rdword	_var02, _var04
031bc     7F 00 00 FF 
031c0     C0 27 06 F5 | 	and	_var02, ##65472
031c4     36 00 00 FF 
031c8     80 26 0E F2 | 	cmp	_var02, ##27776 wz
031cc     00 1E 06 56 |  if_ne	mov	result1, #0
031d0     14 1F 02 A6 |  if_e	mov	result1, _var03
031d4                 | __system___gc_isvalidptr_ret
031d4     2D 00 64 FD | 	ret
031d8                 | 
031d8                 | __system___gc_dofree
031d8     1A 5A 05 F6 | 	mov	COUNT_, #26
031dc     B0 00 A0 FD | 	call	#pushregs_
031e0     22 4D 02 F6 | 	mov	local01, arg01
031e4     84 FB BF FD | 	call	#__system___gc_ptrs
031e8     10 4F 02 F6 | 	mov	local02, result2
031ec     0F 51 02 F6 | 	mov	local03, result1
031f0     26 53 02 F6 | 	mov	local04, local01
031f4     02 52 06 F1 | 	add	local04, #2
031f8     36 00 80 FF 
031fc     29 1F 59 FC | 	wrword	##27791, local04
03200     26 55 02 F6 | 	mov	local05, local01
03204     26 45 02 F6 | 	mov	arg01, local01
03208     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
0320c     0F 57 02 F6 | 	mov	local06, result1
03210     3C CE 9F FE | 	loc	pa,	#(@LR__0208-@LR__0207)
03214     93 00 A0 FD | 	call	#FCACHE_LOAD_
03218                 | LR__0207
03218     04 54 06 F1 | 	add	local05, #4
0321c     2A 59 02 F6 | 	mov	local07, local05
03220     2C 47 EA FA | 	rdword	arg02, local07 wz
03224     28 45 02 F6 | 	mov	arg01, local03
03228     00 1E 06 A6 |  if_e	mov	result1, #0
0322c     04 46 66 50 |  if_ne	shl	arg02, #4
03230     23 45 02 51 |  if_ne	add	arg01, arg02
03234     22 1F 02 56 |  if_ne	mov	result1, arg01
03238     0F 55 0A F6 | 	mov	local05, result1 wz
0323c     28 00 90 AD |  if_e	jmp	#LR__0209
03240     2A 45 02 F6 | 	mov	arg01, local05
03244     00 5A 06 F6 | 	mov	local08, #0
03248     02 44 06 F1 | 	add	arg01, #2
0324c     22 5D E2 FA | 	rdword	local09, arg01
03250     36 00 00 FF 
03254     8F 5C 0E F2 | 	cmp	local09, ##27791 wz
03258     01 5A 66 A6 |  if_e	neg	local08, #1
0325c     2D 1F 02 F6 | 	mov	result1, local08
03260     0F 5F 0A F6 | 	mov	local10, result1 wz
03264     B0 FF 9F AD |  if_e	jmp	#LR__0207
03268                 | LR__0208
03268                 | LR__0209
03268     00 54 0E F2 | 	cmp	local05, #0 wz
0326c     28 55 02 A6 |  if_e	mov	local05, local03
03270     2A 61 02 F6 | 	mov	local11, local05
03274     06 60 06 F1 | 	add	local11, #6
03278     26 63 02 F6 | 	mov	local12, local01
0327c     30 65 E2 FA | 	rdword	local13, local11
03280     06 62 06 F1 | 	add	local12, #6
03284     31 65 52 FC | 	wrword	local13, local12
03288     26 47 0A F6 | 	mov	arg02, local01 wz
0328c     00 1E 06 A6 |  if_e	mov	result1, #0
03290     28 47 82 51 |  if_ne	sub	arg02, local03
03294     04 46 46 50 |  if_ne	shr	arg02, #4
03298     23 1F 02 56 |  if_ne	mov	result1, arg02
0329c     0F 67 02 F6 | 	mov	local14, result1
032a0     30 67 52 FC | 	wrword	local14, local11
032a4     28 55 0A F2 | 	cmp	local05, local03 wz
032a8     74 00 90 AD |  if_e	jmp	#LR__0212
032ac     2A 45 02 F6 | 	mov	arg01, local05
032b0     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
032b4     26 1F 0A F2 | 	cmp	result1, local01 wz
032b8     64 00 90 5D |  if_ne	jmp	#LR__0211
032bc     2A 69 02 F6 | 	mov	local15, local05
032c0     34 6B E2 FA | 	rdword	local16, local15
032c4     26 6D 02 F6 | 	mov	local17, local01
032c8     36 5F E2 FA | 	rdword	local10, local17
032cc     2F 6B 02 F1 | 	add	local16, local10
032d0     34 6B 52 FC | 	wrword	local16, local15
032d4     29 01 58 FC | 	wrword	#0, local04
032d8     26 45 02 F6 | 	mov	arg01, local01
032dc     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
032e0     0F 57 02 F6 | 	mov	local06, result1
032e4     27 57 5A F2 | 	cmps	local06, local02 wcz
032e8     24 00 90 3D |  if_ae	jmp	#LR__0210
032ec     2B 6F 02 F6 | 	mov	local18, local06
032f0     04 6E 06 F1 | 	add	local18, #4
032f4     2A 47 0A F6 | 	mov	arg02, local05 wz
032f8     00 1E 06 A6 |  if_e	mov	result1, #0
032fc     28 47 82 51 |  if_ne	sub	arg02, local03
03300     04 46 46 50 |  if_ne	shr	arg02, #4
03304     23 1F 02 56 |  if_ne	mov	result1, arg02
03308     0F 67 02 F6 | 	mov	local14, result1
0330c     37 67 52 FC | 	wrword	local14, local18
03310                 | LR__0210
03310     31 65 E2 FA | 	rdword	local13, local12
03314     30 65 52 FC | 	wrword	local13, local11
03318     31 01 58 FC | 	wrword	#0, local12
0331c     2A 4D 02 F6 | 	mov	local01, local05
03320                 | LR__0211
03320                 | LR__0212
03320     26 45 02 F6 | 	mov	arg01, local01
03324     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
03328     0F 71 0A F6 | 	mov	local19, result1 wz
0332c     C4 00 90 AD |  if_e	jmp	#LR__0214
03330     27 71 5A F2 | 	cmps	local19, local02 wcz
03334     BC 00 90 3D |  if_ae	jmp	#LR__0214
03338     38 45 02 F6 | 	mov	arg01, local19
0333c     00 5A 06 F6 | 	mov	local08, #0
03340     02 44 06 F1 | 	add	arg01, #2
03344     22 5D E2 FA | 	rdword	local09, arg01
03348     36 00 00 FF 
0334c     8F 5C 0E F2 | 	cmp	local09, ##27791 wz
03350     01 5A 66 A6 |  if_e	neg	local08, #1
03354     2D 1F 0A F6 | 	mov	result1, local08 wz
03358     98 00 90 AD |  if_e	jmp	#LR__0214
0335c     26 55 02 F6 | 	mov	local05, local01
03360     38 4D 02 F6 | 	mov	local01, local19
03364     2A 73 02 F6 | 	mov	local20, local05
03368     39 75 E2 FA | 	rdword	local21, local20
0336c     26 77 02 F6 | 	mov	local22, local01
03370     3B 5F E2 FA | 	rdword	local10, local22
03374     2F 75 02 F1 | 	add	local21, local10
03378     39 75 52 FC | 	wrword	local21, local20
0337c     26 79 02 F6 | 	mov	local23, local01
03380     06 78 06 F1 | 	add	local23, #6
03384     2A 7B 02 F6 | 	mov	local24, local05
03388     3C 65 E2 FA | 	rdword	local13, local23
0338c     06 7A 06 F1 | 	add	local24, #6
03390     3D 65 52 FC | 	wrword	local13, local24
03394     26 7D 02 F6 | 	mov	local25, local01
03398     02 7C 06 F1 | 	add	local25, #2
0339c     3E 55 59 FC | 	wrword	#170, local25
033a0     3C 01 58 FC | 	wrword	#0, local23
033a4     26 65 02 F6 | 	mov	local13, local01
033a8     32 45 02 F6 | 	mov	arg01, local13
033ac     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
033b0     0F 5F 02 F6 | 	mov	local10, result1
033b4     2F 57 0A F6 | 	mov	local06, local10 wz
033b8     38 00 90 AD |  if_e	jmp	#LR__0213
033bc     27 57 5A F2 | 	cmps	local06, local02 wcz
033c0     30 00 90 3D |  if_ae	jmp	#LR__0213
033c4     2B 7F 02 F6 | 	mov	local26, local06
033c8     04 7E 06 F1 | 	add	local26, #4
033cc     28 65 02 F6 | 	mov	local13, local03
033d0     2A 5F 02 F6 | 	mov	local10, local05
033d4     32 45 02 F6 | 	mov	arg01, local13
033d8     2F 47 0A F6 | 	mov	arg02, local10 wz
033dc     00 1E 06 A6 |  if_e	mov	result1, #0
033e0     22 47 82 51 |  if_ne	sub	arg02, arg01
033e4     04 46 46 50 |  if_ne	shr	arg02, #4
033e8     23 1F 02 56 |  if_ne	mov	result1, arg02
033ec     0F 67 02 F6 | 	mov	local14, result1
033f0     3F 67 52 FC | 	wrword	local14, local26
033f4                 | LR__0213
033f4                 | LR__0214
033f4     2B 1F 02 F6 | 	mov	result1, local06
033f8     AF F0 03 F6 | 	mov	ptra, fp
033fc     BF 00 A0 FD | 	call	#popregs_
03400                 | __system___gc_dofree_ret
03400     2D 00 64 FD | 	ret
03404                 | 
03404                 | __system___gc_docollect
03404     0C 5A 05 F6 | 	mov	COUNT_, #12
03408     B0 00 A0 FD | 	call	#pushregs_
0340c     5C F9 BF FD | 	call	#__system___gc_ptrs
03410     10 4D 02 F6 | 	mov	local01, result2
03414     0F 4F 02 F6 | 	mov	local02, result1
03418     27 45 02 F6 | 	mov	arg01, local02
0341c     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03420     0F 51 0A F6 | 	mov	local03, result1 wz
03424     01 1E 62 FD | 	cogid	result1
03428     0F 53 02 F6 | 	mov	local04, result1
0342c     2C 00 90 AD |  if_e	jmp	#LR__0216
03430                 | LR__0215
03430     26 51 5A F2 | 	cmps	local03, local01 wcz
03434     24 00 90 3D |  if_ae	jmp	#LR__0216
03438     28 55 02 F6 | 	mov	local05, local03
0343c     02 54 06 F1 | 	add	local05, #2
03440     2A 57 E2 FA | 	rdword	local06, local05
03444     20 56 26 F5 | 	andn	local06, #32
03448     2A 57 52 FC | 	wrword	local06, local05
0344c     28 45 02 F6 | 	mov	arg01, local03
03450     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03454     0F 51 0A F6 | 	mov	local03, result1 wz
03458     D4 FF 9F 5D |  if_ne	jmp	#LR__0215
0345c                 | LR__0216
0345c     00 58 06 F6 | 	mov	local07, #0
03460     00 44 06 F6 | 	mov	arg01, #0
03464     B8 EC BF FD | 	call	#__system____topofstack
03468     0F 5B 02 F6 | 	mov	local08, result1
0346c     2C 45 02 F6 | 	mov	arg01, local07
03470     2D 47 02 F6 | 	mov	arg02, local08
03474     A0 00 B0 FD | 	call	#__system___gc_markhub
03478     2C 01 B0 FD | 	call	#__system___gc_markcog
0347c     27 45 02 F6 | 	mov	arg01, local02
03480     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03484     0F 5D 0A F6 | 	mov	local09, result1 wz
03488     10 00 90 5D |  if_ne	jmp	#LR__0217
0348c     22 00 00 FF 
03490     CD 44 06 F6 | 	mov	arg01, ##@LR__0293
03494     94 FB BF FD | 	call	#__system___gc_errmsg
03498     70 00 90 FD | 	jmp	#LR__0223
0349c                 | LR__0217
0349c                 | LR__0218
0349c     2E 51 02 F6 | 	mov	local03, local09
034a0     28 45 02 F6 | 	mov	arg01, local03
034a4     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
034a8     0F 5D 02 F6 | 	mov	local09, result1
034ac     28 5F 02 F6 | 	mov	local10, local03
034b0     02 5E 06 F1 | 	add	local10, #2
034b4     2F 61 E2 FA | 	rdword	local11, local10
034b8     20 60 CE F7 | 	test	local11, #32 wz
034bc     3C 00 90 5D |  if_ne	jmp	#LR__0221
034c0     30 63 02 F6 | 	mov	local12, local11
034c4     10 62 0E F5 | 	and	local12, #16 wz
034c8     30 00 90 5D |  if_ne	jmp	#LR__0221
034cc     30 59 02 F6 | 	mov	local07, local11
034d0     0F 58 06 F5 | 	and	local07, #15
034d4     2C 61 02 F6 | 	mov	local11, local07
034d8     29 61 0A F2 | 	cmp	local11, local04 wz
034dc     08 00 90 AD |  if_e	jmp	#LR__0219
034e0     0E 60 0E F2 | 	cmp	local11, #14 wz
034e4     14 00 90 5D |  if_ne	jmp	#LR__0220
034e8                 | LR__0219
034e8     28 59 02 F6 | 	mov	local07, local03
034ec     2C 45 02 F6 | 	mov	arg01, local07
034f0     E4 FC BF FD | 	call	#__system___gc_dofree
034f4     0F 63 02 F6 | 	mov	local12, result1
034f8     31 5D 02 F6 | 	mov	local09, local12
034fc                 | LR__0220
034fc                 | LR__0221
034fc     00 5C 0E F2 | 	cmp	local09, #0 wz
03500     08 00 90 AD |  if_e	jmp	#LR__0222
03504     26 5D 5A F2 | 	cmps	local09, local01 wcz
03508     90 FF 9F CD |  if_b	jmp	#LR__0218
0350c                 | LR__0222
0350c                 | LR__0223
0350c     AF F0 03 F6 | 	mov	ptra, fp
03510     BF 00 A0 FD | 	call	#popregs_
03514                 | __system___gc_docollect_ret
03514     2D 00 64 FD | 	ret
03518                 | 
03518                 | __system___gc_markhub
03518     0A 5A 05 F6 | 	mov	COUNT_, #10
0351c     B0 00 A0 FD | 	call	#pushregs_
03520     22 4D 02 F6 | 	mov	local01, arg01
03524     23 4F 02 F6 | 	mov	local02, arg02
03528     40 F8 BF FD | 	call	#__system___gc_ptrs
0352c     0F 51 02 F6 | 	mov	local03, result1
03530     10 53 02 F6 | 	mov	local04, result2
03534                 | LR__0224
03534     27 4D 5A F2 | 	cmps	local01, local02 wcz
03538     60 00 90 3D |  if_ae	jmp	#LR__0225
0353c     26 49 02 FB | 	rdlong	arg03, local01
03540     04 4C 06 F1 | 	add	local01, #4
03544     28 45 02 F6 | 	mov	arg01, local03
03548     29 47 02 F6 | 	mov	arg02, local04
0354c     04 FC BF FD | 	call	#__system___gc_isvalidptr
03550     0F 55 0A F6 | 	mov	local05, result1 wz
03554     DC FF 9F AD |  if_e	jmp	#LR__0224
03558     2A 45 02 F6 | 	mov	arg01, local05
0355c     00 56 06 F6 | 	mov	local06, #0
03560     02 44 06 F1 | 	add	arg01, #2
03564     22 59 E2 FA | 	rdword	local07, arg01
03568     36 00 00 FF 
0356c     8F 58 0E F2 | 	cmp	local07, ##27791 wz
03570     01 56 66 A6 |  if_e	neg	local06, #1
03574     2B 1F 02 F6 | 	mov	result1, local06
03578     0F 5B 0A F6 | 	mov	local08, result1 wz
0357c     B4 FF 9F 5D |  if_ne	jmp	#LR__0224
03580     2A 5D 02 F6 | 	mov	local09, local05
03584     02 5C 06 F1 | 	add	local09, #2
03588     2E 5F E2 FA | 	rdword	local10, local09
0358c     0F 5E 26 F5 | 	andn	local10, #15
03590     2E 5E 46 F5 | 	or	local10, #46
03594     2E 5F 52 FC | 	wrword	local10, local09
03598     98 FF 9F FD | 	jmp	#LR__0224
0359c                 | LR__0225
0359c     AF F0 03 F6 | 	mov	ptra, fp
035a0     BF 00 A0 FD | 	call	#popregs_
035a4                 | __system___gc_markhub_ret
035a4     2D 00 64 FD | 	ret
035a8                 | 
035a8                 | __system___gc_markcog
035a8     06 5A 05 F6 | 	mov	COUNT_, #6
035ac     B0 00 A0 FD | 	call	#pushregs_
035b0     B8 F7 BF FD | 	call	#__system___gc_ptrs
035b4     0F 4D 02 F6 | 	mov	local01, result1
035b8     10 4F 02 F6 | 	mov	local02, result2
035bc     00 50 06 F6 | 	mov	local03, #0
035c0                 | LR__0226
035c0     F0 53 06 F6 | 	mov	local04, #496
035c4     28 53 82 F1 | 	sub	local04, local03
035c8     F0 53 06 F1 | 	add	local04, #496
035cc                 | 	'.live	local04
035cc     00 52 96 F9 | 	alts	local04, #0
035d0     29 55 02 F6 | 	mov	local05, local04
035d4     27 47 02 F6 | 	mov	arg02, local02
035d8     26 45 02 F6 | 	mov	arg01, local01
035dc     2A 49 02 F6 | 	mov	arg03, local05
035e0     70 FB BF FD | 	call	#__system___gc_isvalidptr
035e4     0F 55 0A F6 | 	mov	local05, result1 wz
035e8     10 00 90 AD |  if_e	jmp	#LR__0227
035ec     02 54 06 F1 | 	add	local05, #2
035f0     2A 57 E2 FA | 	rdword	local06, local05
035f4     20 56 46 F5 | 	or	local06, #32
035f8     2A 57 52 FC | 	wrword	local06, local05
035fc                 | LR__0227
035fc     01 50 06 F1 | 	add	local03, #1
03600     F0 51 5E F2 | 	cmps	local03, #496 wcz
03604     B8 FF 9F CD |  if_b	jmp	#LR__0226
03608     AF F0 03 F6 | 	mov	ptra, fp
0360c     BF 00 A0 FD | 	call	#popregs_
03610                 | __system___gc_markcog_ret
03610     2D 00 64 FD | 	ret
03614                 | 
03614                 | __system__write
03614     03 5A 05 F6 | 	mov	COUNT_, #3
03618     B0 00 A0 FD | 	call	#pushregs_
0361c     22 4D 02 F6 | 	mov	local01, arg01
03620     23 4F 02 F6 | 	mov	local02, arg02
03624     24 51 02 F6 | 	mov	local03, arg03
03628     0A 4C 1E F2 | 	cmp	local01, #10 wcz
0362c     1C 00 90 CD |  if_b	jmp	#LR__0228
03630     01 00 00 FF 
03634     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
03638     08 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0363c     01 00 00 FF 
03640     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
03644     01 1E 66 F6 | 	neg	result1, #1
03648     28 00 90 FD | 	jmp	#LR__0229
0364c                 | LR__0228
0364c     26 45 02 F6 | 	mov	arg01, local01
03650     01 44 66 F0 | 	shl	arg01, #1
03654     26 45 02 F1 | 	add	arg01, local01
03658     04 44 66 F0 | 	shl	arg01, #4
0365c     1C 10 06 F1 | 	add	ptr___system__dat__, #28
03660     08 45 02 F1 | 	add	arg01, ptr___system__dat__
03664     27 47 02 F6 | 	mov	arg02, local02
03668     28 49 02 F6 | 	mov	arg03, local03
0366c     1C 10 86 F1 | 	sub	ptr___system__dat__, #28
03670     50 08 B0 FD | 	call	#__system___vfswrite
03674                 | LR__0229
03674     AF F0 03 F6 | 	mov	ptra, fp
03678     BF 00 A0 FD | 	call	#popregs_
0367c                 | __system__write_ret
0367c     2D 00 64 FD | 	ret
03680                 | 
03680                 | __system__read
03680     03 5A 05 F6 | 	mov	COUNT_, #3
03684     B0 00 A0 FD | 	call	#pushregs_
03688     22 4D 02 F6 | 	mov	local01, arg01
0368c     23 4F 02 F6 | 	mov	local02, arg02
03690     24 51 02 F6 | 	mov	local03, arg03
03694     0A 4C 1E F2 | 	cmp	local01, #10 wcz
03698     1C 00 90 CD |  if_b	jmp	#LR__0230
0369c     01 00 00 FF 
036a0     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
036a4     08 0B 68 FC | 	wrlong	#5, ptr___system__dat__
036a8     01 00 00 FF 
036ac     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
036b0     01 1E 66 F6 | 	neg	result1, #1
036b4     28 00 90 FD | 	jmp	#LR__0231
036b8                 | LR__0230
036b8     26 45 02 F6 | 	mov	arg01, local01
036bc     01 44 66 F0 | 	shl	arg01, #1
036c0     26 45 02 F1 | 	add	arg01, local01
036c4     04 44 66 F0 | 	shl	arg01, #4
036c8     1C 10 06 F1 | 	add	ptr___system__dat__, #28
036cc     08 45 02 F1 | 	add	arg01, ptr___system__dat__
036d0     27 47 02 F6 | 	mov	arg02, local02
036d4     28 49 02 F6 | 	mov	arg03, local03
036d8     1C 10 86 F1 | 	sub	ptr___system__dat__, #28
036dc     A8 09 B0 FD | 	call	#__system___vfsread
036e0                 | LR__0231
036e0     AF F0 03 F6 | 	mov	ptra, fp
036e4     BF 00 A0 FD | 	call	#popregs_
036e8                 | __system__read_ret
036e8     2D 00 64 FD | 	ret
036ec                 | 
036ec                 | __system__close
036ec     01 5A 05 F6 | 	mov	COUNT_, #1
036f0     B0 00 A0 FD | 	call	#pushregs_
036f4     22 4D 02 F6 | 	mov	local01, arg01
036f8     0A 4C 1E F2 | 	cmp	local01, #10 wcz
036fc     1C 00 90 CD |  if_b	jmp	#LR__0232
03700     01 00 00 FF 
03704     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
03708     08 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0370c     01 00 00 FF 
03710     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
03714     01 1E 66 F6 | 	neg	result1, #1
03718     20 00 90 FD | 	jmp	#LR__0233
0371c                 | LR__0232
0371c     26 45 02 F6 | 	mov	arg01, local01
03720     01 44 66 F0 | 	shl	arg01, #1
03724     26 45 02 F1 | 	add	arg01, local01
03728     04 44 66 F0 | 	shl	arg01, #4
0372c     1C 10 06 F1 | 	add	ptr___system__dat__, #28
03730     08 45 02 F1 | 	add	arg01, ptr___system__dat__
03734     1C 10 86 F1 | 	sub	ptr___system__dat__, #28
03738     84 02 B0 FD | 	call	#__system___closeraw
0373c                 | LR__0233
0373c     AF F0 03 F6 | 	mov	ptra, fp
03740     BF 00 A0 FD | 	call	#popregs_
03744                 | __system__close_ret
03744     2D 00 64 FD | 	ret
03748                 | 
03748                 | __system__lseek
03748     09 5A 05 F6 | 	mov	COUNT_, #9
0374c     B0 00 A0 FD | 	call	#pushregs_
03750     22 4D 02 F6 | 	mov	local01, arg01
03754     23 4F 02 F6 | 	mov	local02, arg02
03758     24 51 02 F6 | 	mov	local03, arg03
0375c     0A 4C 1E F2 | 	cmp	local01, #10 wcz
03760     1C 00 90 CD |  if_b	jmp	#LR__0234
03764     01 00 00 FF 
03768     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
0376c     08 0B 68 FC | 	wrlong	#5, ptr___system__dat__
03770     01 00 00 FF 
03774     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
03778     01 1E 66 F6 | 	neg	result1, #1
0377c     D8 00 90 FD | 	jmp	#LR__0238
03780                 | LR__0234
03780     26 53 02 F6 | 	mov	local04, local01
03784     01 52 66 F0 | 	shl	local04, #1
03788     26 53 02 F1 | 	add	local04, local01
0378c     04 52 66 F0 | 	shl	local04, #4
03790     1C 10 06 F1 | 	add	ptr___system__dat__, #28
03794     08 53 02 F1 | 	add	local04, ptr___system__dat__
03798     2C 52 06 F1 | 	add	local04, #44
0379c     29 55 0A FB | 	rdlong	local05, local04 wz
037a0     2C 52 86 F1 | 	sub	local04, #44
037a4     1C 10 86 F1 | 	sub	ptr___system__dat__, #28
037a8     1C 00 90 5D |  if_ne	jmp	#LR__0235
037ac     01 00 00 FF 
037b0     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
037b4     08 21 68 FC | 	wrlong	#16, ptr___system__dat__
037b8     01 00 00 FF 
037bc     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
037c0     01 1E 66 F6 | 	neg	result1, #1
037c4     90 00 90 FD | 	jmp	#LR__0238
037c8                 | LR__0235
037c8     08 52 06 F1 | 	add	local04, #8
037cc     29 55 02 FB | 	rdlong	local05, local04
037d0     08 52 86 F1 | 	sub	local04, #8
037d4     40 54 CE F7 | 	test	local05, #64 wz
037d8     14 00 90 AD |  if_e	jmp	#LR__0236
037dc     08 52 06 F1 | 	add	local04, #8
037e0     29 55 02 FB | 	rdlong	local05, local04
037e4     80 54 46 F5 | 	or	local05, #128
037e8     29 55 62 FC | 	wrlong	local05, local04
037ec     08 52 86 F1 | 	sub	local04, #8
037f0                 | LR__0236
037f0     2C 52 06 F1 | 	add	local04, #44
037f4     29 55 02 FB | 	rdlong	local05, local04
037f8     2C 52 86 F1 | 	sub	local04, #44
037fc     2A 57 02 FB | 	rdlong	local06, local05
03800     04 54 06 F1 | 	add	local05, #4
03804     2A 59 02 FB | 	rdlong	local07, local05
03808     29 45 02 F6 | 	mov	arg01, local04
0380c     27 47 02 F6 | 	mov	arg02, local02
03810     28 49 02 F6 | 	mov	arg03, local03
03814     06 5B 02 F6 | 	mov	local08, objptr
03818     2B 0D 02 F6 | 	mov	objptr, local06
0381c     2D 58 62 FD | 	call	local07
03820     2D 0D 02 F6 | 	mov	objptr, local08
03824     0F 5D 02 F6 | 	mov	local09, result1
03828     00 5C 5E F2 | 	cmps	local09, #0 wcz
0382c     24 00 90 3D |  if_ae	jmp	#LR__0237
03830     2E 45 6A F6 | 	neg	arg01, local09 wz
03834     01 00 00 FF 
03838     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
0383c     08 45 62 FC | 	wrlong	arg01, ptr___system__dat__
03840     01 00 00 FF 
03844     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
03848     01 1E 66 56 |  if_ne	neg	result1, #1
0384c     00 1E 06 A6 |  if_e	mov	result1, #0
03850     04 00 90 FD | 	jmp	#LR__0238
03854                 | LR__0237
03854     2E 1F 02 F6 | 	mov	result1, local09
03858                 | LR__0238
03858     AF F0 03 F6 | 	mov	ptra, fp
0385c     BF 00 A0 FD | 	call	#popregs_
03860                 | __system__lseek_ret
03860     2D 00 64 FD | 	ret
03864                 | 
03864                 | __system____getftab
03864     0A 44 1E F2 | 	cmp	arg01, #10 wcz
03868     00 1E 06 36 |  if_ae	mov	result1, #0
0386c     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
03870     22 1F 02 F6 | 	mov	result1, arg01
03874     01 1E 66 F0 | 	shl	result1, #1
03878     22 1F 02 F1 | 	add	result1, arg01
0387c     04 1E 66 F0 | 	shl	result1, #4
03880     1C 10 06 F1 | 	add	ptr___system__dat__, #28
03884     08 1F 02 F1 | 	add	result1, ptr___system__dat__
03888     1C 10 86 F1 | 	sub	ptr___system__dat__, #28
0388c                 | __system____getftab_ret
0388c     2D 00 64 FD | 	ret
03890                 | 
03890                 | __system__pack_0134
03890     0A 5A 05 F6 | 	mov	COUNT_, #10
03894     B0 00 A0 FD | 	call	#pushregs_
03898     22 4D 02 F6 | 	mov	local01, arg01
0389c     23 4F 02 F6 | 	mov	local02, arg02
038a0     24 51 02 F6 | 	mov	local03, arg03
038a4     25 53 02 F6 | 	mov	local04, arg04
038a8     7F 50 06 F1 | 	add	local03, #127
038ac     04 52 CE F7 | 	test	local04, #4 wz
038b0     10 00 90 AD |  if_e	jmp	#LR__0239
038b4     00 4C 0E F2 | 	cmp	local01, #0 wz
038b8     16 4C C6 A9 |  if_e	decod	local01, #22
038bc     F7 4C 26 F4 | 	bith	local01, #247
038c0     C0 00 90 FD | 	jmp	#LR__0248
038c4                 | LR__0239
038c4     02 52 CE F7 | 	test	local04, #2 wz
038c8     00 C0 3F 5F 
038cc     00 4C 06 56 |  if_ne	mov	local01, ##2139095040
038d0     00 4E 06 56 |  if_ne	mov	local02, #0
038d4     AC 00 90 5D |  if_ne	jmp	#LR__0247
038d8     29 55 02 F6 | 	mov	local05, local04
038dc     08 54 CE F7 | 	test	local05, #8 wz
038e0     00 4C 06 56 |  if_ne	mov	local01, #0
038e4     9C 00 90 5D |  if_ne	jmp	#LR__0246
038e8     FF 50 5E F2 | 	cmps	local03, #255 wcz
038ec     00 C0 3F 3F 
038f0     00 4C 06 36 |  if_ae	mov	local01, ##2139095040
038f4     00 4E 06 36 |  if_ae	mov	local02, #0
038f8     88 00 90 3D |  if_ae	jmp	#LR__0245
038fc     00 50 5E F2 | 	cmps	local03, #0 wcz
03900     70 00 90 1D |  if_a	jmp	#LR__0243
03904     01 4E 46 F0 | 	shr	local02, #1
03908     26 57 02 F6 | 	mov	local06, local01
0390c     01 56 06 F5 | 	and	local06, #1
03910     1F 56 66 F0 | 	shl	local06, #31
03914     2B 4F 42 F5 | 	or	local02, local06
03918     01 4C 46 F0 | 	shr	local01, #1
0391c     1C C7 9F FE | 	loc	pa,	#(@LR__0241-@LR__0240)
03920     93 00 A0 FD | 	call	#FCACHE_LOAD_
03924                 | LR__0240
03924     00 50 5E F2 | 	cmps	local03, #0 wcz
03928     34 00 90 3D |  if_ae	jmp	#LR__0242
0392c     00 4C 0E F2 | 	cmp	local01, #0 wz
03930     2C 00 90 AD |  if_e	jmp	#LR__0242
03934     27 59 02 F6 | 	mov	local07, local02
03938     01 58 06 F5 | 	and	local07, #1
0393c     01 50 06 F1 | 	add	local03, #1
03940     01 4E 46 F0 | 	shr	local02, #1
03944     26 5B 02 F6 | 	mov	local08, local01
03948     01 5A 06 F5 | 	and	local08, #1
0394c     1F 5A 66 F0 | 	shl	local08, #31
03950     2D 4F 42 F5 | 	or	local02, local08
03954     2C 4F 42 F5 | 	or	local02, local07
03958     01 4C 46 F0 | 	shr	local01, #1
0395c     C4 FF 9F FD | 	jmp	#LR__0240
03960                 | LR__0241
03960                 | LR__0242
03960     00 50 5E F2 | 	cmps	local03, #0 wcz
03964     1C 00 90 3D |  if_ae	jmp	#LR__0244
03968     00 4E 0E F2 | 	cmp	local02, #0 wz
0396c     6F 4E 62 FD | 	wrnz	local02
03970     10 00 90 FD | 	jmp	#LR__0244
03974                 | LR__0243
03974     00 C0 7F FF 
03978     00 4C 26 F5 | 	andn	local01, ##-8388608
0397c     17 50 66 F0 | 	shl	local03, #23
03980     28 4D 42 F5 | 	or	local01, local03
03984                 | LR__0244
03984                 | LR__0245
03984                 | LR__0246
03984                 | LR__0247
03984                 | LR__0248
03984     01 4C CE F7 | 	test	local01, #1 wz
03988     01 4E 46 55 |  if_ne	or	local02, #1
0398c     27 5D 02 F6 | 	mov	local09, local02
03990     00 5E 06 F6 | 	mov	local10, #0
03994     FF FF 3F FF 
03998     FF 4F 06 F1 | 	add	local02, ##2147483647
0399c     2E 4F 1A F2 | 	cmp	local02, local09 wcz
039a0     01 5E 06 C6 |  if_b	mov	local10, #1
039a4     2F 4D 02 F1 | 	add	local01, local10
039a8     01 52 CE F7 | 	test	local04, #1 wz
039ac     1F 4C 26 54 |  if_ne	bith	local01, #31
039b0     26 1F 02 F6 | 	mov	result1, local01
039b4     AF F0 03 F6 | 	mov	ptra, fp
039b8     BF 00 A0 FD | 	call	#popregs_
039bc                 | __system__pack_0134_ret
039bc     2D 00 64 FD | 	ret
039c0                 | 
039c0                 | __system___closeraw
039c0     06 5A 05 F6 | 	mov	COUNT_, #6
039c4     B0 00 A0 FD | 	call	#pushregs_
039c8     22 4D 02 F6 | 	mov	local01, arg01
039cc     00 4E 06 F6 | 	mov	local02, #0
039d0     08 4C 06 F1 | 	add	local01, #8
039d4     26 51 0A FB | 	rdlong	local03, local01 wz
039d8     08 4C 86 F1 | 	sub	local01, #8
039dc     1C 00 90 5D |  if_ne	jmp	#LR__0249
039e0     01 00 00 FF 
039e4     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
039e8     08 0B 68 FC | 	wrlong	#5, ptr___system__dat__
039ec     01 00 00 FF 
039f0     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
039f4     01 1E 66 F6 | 	neg	result1, #1
039f8     90 00 90 FD | 	jmp	#LR__0252
039fc                 | LR__0249
039fc     28 4C 06 F1 | 	add	local01, #40
03a00     26 51 0A FB | 	rdlong	local03, local01 wz
03a04     28 4C 86 F1 | 	sub	local01, #40
03a08     2C 00 90 AD |  if_e	jmp	#LR__0250
03a0c     28 4C 06 F1 | 	add	local01, #40
03a10     26 51 02 FB | 	rdlong	local03, local01
03a14     28 4C 86 F1 | 	sub	local01, #40
03a18     28 53 02 FB | 	rdlong	local04, local03
03a1c     04 50 06 F1 | 	add	local03, #4
03a20     28 55 02 FB | 	rdlong	local05, local03
03a24     26 45 02 F6 | 	mov	arg01, local01
03a28     06 57 02 F6 | 	mov	local06, objptr
03a2c     29 0D 02 F6 | 	mov	objptr, local04
03a30     2D 54 62 FD | 	call	local05
03a34     2B 0D 02 F6 | 	mov	objptr, local06
03a38                 | LR__0250
03a38     20 4C 06 F1 | 	add	local01, #32
03a3c     26 51 0A FB | 	rdlong	local03, local01 wz
03a40     20 4C 86 F1 | 	sub	local01, #32
03a44     30 00 90 AD |  if_e	jmp	#LR__0251
03a48     20 4C 06 F1 | 	add	local01, #32
03a4c     26 51 02 FB | 	rdlong	local03, local01
03a50     20 4C 86 F1 | 	sub	local01, #32
03a54     28 53 02 FB | 	rdlong	local04, local03
03a58     04 50 06 F1 | 	add	local03, #4
03a5c     28 55 02 FB | 	rdlong	local05, local03
03a60     26 45 02 F6 | 	mov	arg01, local01
03a64     06 57 02 F6 | 	mov	local06, objptr
03a68     29 0D 02 F6 | 	mov	objptr, local04
03a6c     2D 54 62 FD | 	call	local05
03a70     2B 0D 02 F6 | 	mov	objptr, local06
03a74     0F 4F 02 F6 | 	mov	local02, result1
03a78                 | LR__0251
03a78     26 45 02 F6 | 	mov	arg01, local01
03a7c     00 46 06 F6 | 	mov	arg02, #0
03a80     30 48 06 F6 | 	mov	arg03, #48
03a84     A0 00 A0 FD | 	call	#\builtin_bytefill_
03a88     27 1F 02 F6 | 	mov	result1, local02
03a8c                 | LR__0252
03a8c     AF F0 03 F6 | 	mov	ptra, fp
03a90     BF 00 A0 FD | 	call	#popregs_
03a94                 | __system___closeraw_ret
03a94     2D 00 64 FD | 	ret
03a98                 | 
03a98                 | __system____default_getc
03a98     0C 5A 05 F6 | 	mov	COUNT_, #12
03a9c     B0 00 A0 FD | 	call	#pushregs_
03aa0     22 4D 02 F6 | 	mov	local01, arg01
03aa4     26 4F 02 FB | 	rdlong	local02, local01
03aa8     08 4E 06 F1 | 	add	local02, #8
03aac     27 51 02 FB | 	rdlong	local03, local02
03ab0     08 4E 86 F1 | 	sub	local02, #8
03ab4     02 50 CE F7 | 	test	local03, #2 wz
03ab8     08 00 90 AD |  if_e	jmp	#LR__0253
03abc     26 45 02 F6 | 	mov	arg01, local01
03ac0     FC 01 B0 FD | 	call	#__system____default_flush
03ac4                 | LR__0253
03ac4     08 4E 06 F1 | 	add	local02, #8
03ac8     27 51 02 FB | 	rdlong	local03, local02
03acc     01 50 46 F5 | 	or	local03, #1
03ad0     27 51 62 FC | 	wrlong	local03, local02
03ad4     08 4E 86 F1 | 	sub	local02, #8
03ad8     27 53 0A FB | 	rdlong	local04, local02 wz
03adc     7C 00 90 5D |  if_ne	jmp	#LR__0255
03ae0     26 45 02 F6 | 	mov	arg01, local01
03ae4     22 55 02 FB | 	rdlong	local05, arg01
03ae8     0C 54 06 F1 | 	add	local05, #12
03aec     2A 47 02 F6 | 	mov	arg02, local05
03af0     0C 54 86 F1 | 	sub	local05, #12
03af4     10 44 06 F1 | 	add	arg01, #16
03af8     22 57 02 FB | 	rdlong	local06, arg01
03afc     10 44 86 F1 | 	sub	arg01, #16
03b00     2B 59 02 FB | 	rdlong	local07, local06
03b04     04 56 06 F1 | 	add	local06, #4
03b08     2B 5B 02 FB | 	rdlong	local08, local06
03b0c     0A 48 C6 F9 | 	decod	arg03, #10
03b10     06 5D 02 F6 | 	mov	local09, objptr
03b14     2C 0D 02 F6 | 	mov	objptr, local07
03b18     2D 5A 62 FD | 	call	local08
03b1c     2E 0D 02 F6 | 	mov	objptr, local09
03b20     0F 5F 02 F6 | 	mov	local10, result1
03b24     00 5E 5E F2 | 	cmps	local10, #0 wcz
03b28     01 1E 66 C6 |  if_b	neg	result1, #1
03b2c     28 00 90 CD |  if_b	jmp	#LR__0254
03b30     2A 5F 62 FC | 	wrlong	local10, local05
03b34     0C 54 06 F1 | 	add	local05, #12
03b38     2A 61 02 F6 | 	mov	local11, local05
03b3c     08 54 86 F1 | 	sub	local05, #8
03b40     2A 61 62 FC | 	wrlong	local11, local05
03b44     04 54 06 F1 | 	add	local05, #4
03b48     2A 57 02 FB | 	rdlong	local06, local05
03b4c     01 56 46 F5 | 	or	local06, #1
03b50     2A 57 62 FC | 	wrlong	local06, local05
03b54     2F 1F 02 F6 | 	mov	result1, local10
03b58                 | LR__0254
03b58     0F 53 02 F6 | 	mov	local04, result1
03b5c                 | LR__0255
03b5c     00 52 5E F2 | 	cmps	local04, #0 wcz
03b60     01 1E 66 E6 |  if_be	neg	result1, #1
03b64     1C 00 90 ED |  if_be	jmp	#LR__0256
03b68     01 52 86 F1 | 	sub	local04, #1
03b6c     27 53 62 FC | 	wrlong	local04, local02
03b70     04 4E 06 F1 | 	add	local02, #4
03b74     27 63 02 FB | 	rdlong	local12, local02
03b78     31 1F C2 FA | 	rdbyte	result1, local12
03b7c     01 62 06 F1 | 	add	local12, #1
03b80     27 63 62 FC | 	wrlong	local12, local02
03b84                 | LR__0256
03b84     AF F0 03 F6 | 	mov	ptra, fp
03b88     BF 00 A0 FD | 	call	#popregs_
03b8c                 | __system____default_getc_ret
03b8c     2D 00 64 FD | 	ret
03b90                 | 
03b90                 | __system____default_putc
03b90     06 5A 05 F6 | 	mov	COUNT_, #6
03b94     B0 00 A0 FD | 	call	#pushregs_
03b98     22 4D 02 F6 | 	mov	local01, arg01
03b9c     23 4F 02 F6 | 	mov	local02, arg02
03ba0     27 51 02 FB | 	rdlong	local03, local02
03ba4     08 50 06 F1 | 	add	local03, #8
03ba8     28 53 02 FB | 	rdlong	local04, local03
03bac     08 50 86 F1 | 	sub	local03, #8
03bb0     01 52 CE F7 | 	test	local04, #1 wz
03bb4     08 00 90 AD |  if_e	jmp	#LR__0257
03bb8     27 45 02 F6 | 	mov	arg01, local02
03bbc     00 01 B0 FD | 	call	#__system____default_flush
03bc0                 | LR__0257
03bc0     08 50 06 F1 | 	add	local03, #8
03bc4     28 53 02 FB | 	rdlong	local04, local03
03bc8     02 52 46 F5 | 	or	local04, #2
03bcc     28 53 62 FC | 	wrlong	local04, local03
03bd0     08 50 86 F1 | 	sub	local03, #8
03bd4     28 55 02 FB | 	rdlong	local05, local03
03bd8     2A 57 02 F6 | 	mov	local06, local05
03bdc     0C 50 06 F1 | 	add	local03, #12
03be0     28 57 02 F1 | 	add	local06, local03
03be4     2B 4D 42 FC | 	wrbyte	local01, local06
03be8     FF 4C 06 F5 | 	and	local01, #255
03bec     01 54 06 F1 | 	add	local05, #1
03bf0     0C 50 86 F1 | 	sub	local03, #12
03bf4     28 55 62 FC | 	wrlong	local05, local03
03bf8     02 00 00 FF 
03bfc     00 54 0E F2 | 	cmp	local05, ##1024 wz
03c00     10 00 90 5D |  if_ne	jmp	#LR__0258
03c04     27 45 02 F6 | 	mov	arg01, local02
03c08     B4 00 B0 FD | 	call	#__system____default_flush
03c0c     00 1E 0E F2 | 	cmp	result1, #0 wz
03c10     01 4C 66 56 |  if_ne	neg	local01, #1
03c14                 | LR__0258
03c14     26 1F 02 F6 | 	mov	result1, local01
03c18     AF F0 03 F6 | 	mov	ptra, fp
03c1c     BF 00 A0 FD | 	call	#popregs_
03c20                 | __system____default_putc_ret
03c20     2D 00 64 FD | 	ret
03c24                 | 
03c24                 | __system____default_putc_terminal
03c24     06 5A 05 F6 | 	mov	COUNT_, #6
03c28     B0 00 A0 FD | 	call	#pushregs_
03c2c     22 4D 02 F6 | 	mov	local01, arg01
03c30     23 4F 02 F6 | 	mov	local02, arg02
03c34     27 51 02 FB | 	rdlong	local03, local02
03c38     08 50 06 F1 | 	add	local03, #8
03c3c     28 53 02 FB | 	rdlong	local04, local03
03c40     08 50 86 F1 | 	sub	local03, #8
03c44     01 52 CE F7 | 	test	local04, #1 wz
03c48     08 00 90 AD |  if_e	jmp	#LR__0259
03c4c     27 45 02 F6 | 	mov	arg01, local02
03c50     6C 00 B0 FD | 	call	#__system____default_flush
03c54                 | LR__0259
03c54     08 50 06 F1 | 	add	local03, #8
03c58     28 53 02 FB | 	rdlong	local04, local03
03c5c     02 52 46 F5 | 	or	local04, #2
03c60     28 53 62 FC | 	wrlong	local04, local03
03c64     08 50 86 F1 | 	sub	local03, #8
03c68     28 55 02 FB | 	rdlong	local05, local03
03c6c     2A 57 02 F6 | 	mov	local06, local05
03c70     0C 50 06 F1 | 	add	local03, #12
03c74     28 57 02 F1 | 	add	local06, local03
03c78     2B 4D 42 FC | 	wrbyte	local01, local06
03c7c     FF 4C 06 F5 | 	and	local01, #255
03c80     0C 50 86 F1 | 	sub	local03, #12
03c84     01 54 06 F1 | 	add	local05, #1
03c88     28 55 62 FC | 	wrlong	local05, local03
03c8c     0A 4C 0E F2 | 	cmp	local01, #10 wz
03c90     0C 00 90 AD |  if_e	jmp	#LR__0260
03c94     02 00 00 FF 
03c98     00 54 0E F2 | 	cmp	local05, ##1024 wz
03c9c     10 00 90 5D |  if_ne	jmp	#LR__0261
03ca0                 | LR__0260
03ca0     27 45 02 F6 | 	mov	arg01, local02
03ca4     18 00 B0 FD | 	call	#__system____default_flush
03ca8     00 1E 0E F2 | 	cmp	result1, #0 wz
03cac     01 4C 66 56 |  if_ne	neg	local01, #1
03cb0                 | LR__0261
03cb0     26 1F 02 F6 | 	mov	result1, local01
03cb4     AF F0 03 F6 | 	mov	ptra, fp
03cb8     BF 00 A0 FD | 	call	#popregs_
03cbc                 | __system____default_putc_terminal_ret
03cbc     2D 00 64 FD | 	ret
03cc0                 | 
03cc0                 | __system____default_flush
03cc0     0F 5A 05 F6 | 	mov	COUNT_, #15
03cc4     B0 00 A0 FD | 	call	#pushregs_
03cc8     22 4D 02 F6 | 	mov	local01, arg01
03ccc     26 4F 02 FB | 	rdlong	local02, local01
03cd0     27 51 02 FB | 	rdlong	local03, local02
03cd4     08 4E 06 F1 | 	add	local02, #8
03cd8     27 53 02 FB | 	rdlong	local04, local02
03cdc     08 4E 86 F1 | 	sub	local02, #8
03ce0     02 52 CE F7 | 	test	local04, #2 wz
03ce4     B8 00 90 AD |  if_e	jmp	#LR__0264
03ce8     00 50 5E F2 | 	cmps	local03, #0 wcz
03cec     30 01 90 ED |  if_be	jmp	#LR__0266
03cf0     08 4C 06 F1 | 	add	local01, #8
03cf4     26 53 02 FB | 	rdlong	local04, local01
03cf8     08 4C 86 F1 | 	sub	local01, #8
03cfc     40 52 CE F7 | 	test	local04, #64 wz
03d00     5C 00 90 AD |  if_e	jmp	#LR__0263
03d04     08 4C 06 F1 | 	add	local01, #8
03d08     26 53 02 FB | 	rdlong	local04, local01
03d0c     08 4C 86 F1 | 	sub	local01, #8
03d10     80 52 CE F7 | 	test	local04, #128 wz
03d14     48 00 90 AD |  if_e	jmp	#LR__0262
03d18     2C 4C 06 F1 | 	add	local01, #44
03d1c     26 53 02 FB | 	rdlong	local04, local01
03d20     2C 4C 86 F1 | 	sub	local01, #44
03d24     29 55 02 FB | 	rdlong	local05, local04
03d28     04 52 06 F1 | 	add	local04, #4
03d2c     29 57 02 FB | 	rdlong	local06, local04
03d30     26 45 02 F6 | 	mov	arg01, local01
03d34     00 46 06 F6 | 	mov	arg02, #0
03d38     02 48 06 F6 | 	mov	arg03, #2
03d3c     06 59 02 F6 | 	mov	local07, objptr
03d40     2A 0D 02 F6 | 	mov	objptr, local05
03d44     2D 56 62 FD | 	call	local06
03d48     2C 0D 02 F6 | 	mov	objptr, local07
03d4c     08 4C 06 F1 | 	add	local01, #8
03d50     26 53 02 FB | 	rdlong	local04, local01
03d54     80 52 26 F5 | 	andn	local04, #128
03d58     26 53 62 FC | 	wrlong	local04, local01
03d5c     08 4C 86 F1 | 	sub	local01, #8
03d60                 | LR__0262
03d60                 | LR__0263
03d60     0C 4E 06 F1 | 	add	local02, #12
03d64     27 47 02 F6 | 	mov	arg02, local02
03d68     0C 4E 86 F1 | 	sub	local02, #12
03d6c     14 4C 06 F1 | 	add	local01, #20
03d70     26 53 02 FB | 	rdlong	local04, local01
03d74     14 4C 86 F1 | 	sub	local01, #20
03d78     29 55 02 FB | 	rdlong	local05, local04
03d7c     04 52 06 F1 | 	add	local04, #4
03d80     29 57 02 FB | 	rdlong	local06, local04
03d84     26 45 02 F6 | 	mov	arg01, local01
03d88     28 49 02 F6 | 	mov	arg03, local03
03d8c     06 59 02 F6 | 	mov	local07, objptr
03d90     2A 0D 02 F6 | 	mov	objptr, local05
03d94     2D 56 62 FD | 	call	local06
03d98     2C 0D 02 F6 | 	mov	objptr, local07
03d9c     80 00 90 FD | 	jmp	#LR__0266
03da0                 | LR__0264
03da0     08 4E 06 F1 | 	add	local02, #8
03da4     27 53 02 FB | 	rdlong	local04, local02
03da8     08 4E 86 F1 | 	sub	local02, #8
03dac     01 52 CE F7 | 	test	local04, #1 wz
03db0     6C 00 90 AD |  if_e	jmp	#LR__0265
03db4     00 50 0E F2 | 	cmp	local03, #0 wz
03db8     64 00 90 AD |  if_e	jmp	#LR__0265
03dbc     2C 4C 06 F1 | 	add	local01, #44
03dc0     26 5B 02 FB | 	rdlong	local08, local01
03dc4     2C 4C 86 F1 | 	sub	local01, #44
03dc8     2D 53 02 F6 | 	mov	local04, local08
03dcc     29 55 02 FB | 	rdlong	local05, local04
03dd0     04 52 06 F1 | 	add	local04, #4
03dd4     29 5D 02 FB | 	rdlong	local09, local04
03dd8     04 52 86 F1 | 	sub	local04, #4
03ddc     2E 57 02 F6 | 	mov	local06, local09
03de0     26 5F 02 F6 | 	mov	local10, local01
03de4     28 61 02 F6 | 	mov	local11, local03
03de8     30 61 62 F6 | 	neg	local11, local11
03dec     30 63 02 F6 | 	mov	local12, local11
03df0     01 58 06 F6 | 	mov	local07, #1
03df4     2F 45 02 F6 | 	mov	arg01, local10
03df8     31 47 02 F6 | 	mov	arg02, local12
03dfc     01 48 06 F6 | 	mov	arg03, #1
03e00     06 65 02 F6 | 	mov	local13, objptr
03e04     2A 0D 02 F6 | 	mov	objptr, local05
03e08     2D 56 62 FD | 	call	local06
03e0c     32 0D 02 F6 | 	mov	objptr, local13
03e10     0F 67 02 F6 | 	mov	local14, result1
03e14     33 69 02 F6 | 	mov	local15, local14
03e18     00 68 5E F2 | 	cmps	local15, #0 wcz
03e1c     28 69 02 36 |  if_ae	mov	local15, local03
03e20                 | LR__0265
03e20                 | LR__0266
03e20     27 01 68 FC | 	wrlong	#0, local02
03e24     04 4E 06 F1 | 	add	local02, #4
03e28     27 01 68 FC | 	wrlong	#0, local02
03e2c     04 4E 06 F1 | 	add	local02, #4
03e30     27 01 68 FC | 	wrlong	#0, local02
03e34     00 1E 06 F6 | 	mov	result1, #0
03e38     AF F0 03 F6 | 	mov	ptra, fp
03e3c     BF 00 A0 FD | 	call	#popregs_
03e40                 | __system____default_flush_ret
03e40     2D 00 64 FD | 	ret
03e44                 | 
03e44                 | __system___rxtxioctl_0179
03e44     02 5A 05 F6 | 	mov	COUNT_, #2
03e48     B0 00 A0 FD | 	call	#pushregs_
03e4c     23 4D 02 F6 | 	mov	local01, arg02
03e50     24 4F 02 F6 | 	mov	local02, arg03
03e54     00 4D 0E F2 | 	cmp	local01, #256 wz
03e58     0C 00 90 AD |  if_e	jmp	#LR__0267
03e5c     01 4D 0E F2 | 	cmp	local01, #257 wz
03e60     1C 00 90 AD |  if_e	jmp	#LR__0268
03e64     30 00 90 FD | 	jmp	#LR__0269
03e68                 | LR__0267
03e68     08 10 06 F1 | 	add	ptr___system__dat__, #8
03e6c     08 1F 02 FB | 	rdlong	result1, ptr___system__dat__
03e70     08 10 86 F1 | 	sub	ptr___system__dat__, #8
03e74     27 1F 62 FC | 	wrlong	result1, local02
03e78     00 1E 06 F6 | 	mov	result1, #0
03e7c     30 00 90 FD | 	jmp	#LR__0270
03e80                 | LR__0268
03e80     27 45 02 FB | 	rdlong	arg01, local02
03e84     08 10 06 F1 | 	add	ptr___system__dat__, #8
03e88     08 45 62 FC | 	wrlong	arg01, ptr___system__dat__
03e8c     08 10 86 F1 | 	sub	ptr___system__dat__, #8
03e90     00 1E 06 F6 | 	mov	result1, #0
03e94     18 00 90 FD | 	jmp	#LR__0270
03e98                 | LR__0269
03e98     01 00 00 FF 
03e9c     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
03ea0     08 15 68 FC | 	wrlong	#10, ptr___system__dat__
03ea4     01 00 00 FF 
03ea8     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
03eac     01 1E 66 F6 | 	neg	result1, #1
03eb0                 | LR__0270
03eb0     AF F0 03 F6 | 	mov	ptra, fp
03eb4     BF 00 A0 FD | 	call	#popregs_
03eb8                 | __system___rxtxioctl_0179_ret
03eb8     2D 00 64 FD | 	ret
03ebc                 | 
03ebc                 | __system____dummy_flush_0180
03ebc     00 1E 06 F6 | 	mov	result1, #0
03ec0                 | __system____dummy_flush_0180_ret
03ec0     2D 00 64 FD | 	ret
03ec4                 | 
03ec4                 | __system___vfswrite
03ec4     0B 5A 05 F6 | 	mov	COUNT_, #11
03ec8     B0 00 A0 FD | 	call	#pushregs_
03ecc     22 4D 02 F6 | 	mov	local01, arg01
03ed0     23 4F 02 F6 | 	mov	local02, arg02
03ed4     24 51 02 F6 | 	mov	local03, arg03
03ed8     27 53 02 F6 | 	mov	local04, local02
03edc     08 4C 06 F1 | 	add	local01, #8
03ee0     26 55 02 FB | 	rdlong	local05, local01
03ee4     08 4C 86 F1 | 	sub	local01, #8
03ee8     02 54 CE F7 | 	test	local05, #2 wz
03eec     1C 00 90 5D |  if_ne	jmp	#LR__0271
03ef0     01 00 00 FF 
03ef4     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
03ef8     08 0D 68 FC | 	wrlong	#6, ptr___system__dat__
03efc     01 00 00 FF 
03f00     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
03f04     01 1E 66 F6 | 	neg	result1, #1
03f08     70 01 90 FD | 	jmp	#LR__0279
03f0c                 | LR__0271
03f0c     08 4C 06 F1 | 	add	local01, #8
03f10     26 55 02 FB | 	rdlong	local05, local01
03f14     08 4C 86 F1 | 	sub	local01, #8
03f18     40 54 CE F7 | 	test	local05, #64 wz
03f1c     5C 00 90 AD |  if_e	jmp	#LR__0273
03f20     08 4C 06 F1 | 	add	local01, #8
03f24     26 55 02 FB | 	rdlong	local05, local01
03f28     08 4C 86 F1 | 	sub	local01, #8
03f2c     80 54 CE F7 | 	test	local05, #128 wz
03f30     48 00 90 AD |  if_e	jmp	#LR__0272
03f34     2C 4C 06 F1 | 	add	local01, #44
03f38     26 55 02 FB | 	rdlong	local05, local01
03f3c     2C 4C 86 F1 | 	sub	local01, #44
03f40     2A 57 02 FB | 	rdlong	local06, local05
03f44     04 54 06 F1 | 	add	local05, #4
03f48     2A 59 02 FB | 	rdlong	local07, local05
03f4c     26 45 02 F6 | 	mov	arg01, local01
03f50     00 46 06 F6 | 	mov	arg02, #0
03f54     02 48 06 F6 | 	mov	arg03, #2
03f58     06 5B 02 F6 | 	mov	local08, objptr
03f5c     2B 0D 02 F6 | 	mov	objptr, local06
03f60     2D 58 62 FD | 	call	local07
03f64     2D 0D 02 F6 | 	mov	objptr, local08
03f68     08 4C 06 F1 | 	add	local01, #8
03f6c     26 55 02 FB | 	rdlong	local05, local01
03f70     80 54 26 F5 | 	andn	local05, #128
03f74     26 55 62 FC | 	wrlong	local05, local01
03f78     08 4C 86 F1 | 	sub	local01, #8
03f7c                 | LR__0272
03f7c                 | LR__0273
03f7c     14 4C 06 F1 | 	add	local01, #20
03f80     26 55 0A FB | 	rdlong	local05, local01 wz
03f84     14 4C 86 F1 | 	sub	local01, #20
03f88     7C 00 90 AD |  if_e	jmp	#LR__0275
03f8c     14 4C 06 F1 | 	add	local01, #20
03f90     26 55 02 FB | 	rdlong	local05, local01
03f94     14 4C 86 F1 | 	sub	local01, #20
03f98     2A 57 02 FB | 	rdlong	local06, local05
03f9c     04 54 06 F1 | 	add	local05, #4
03fa0     2A 59 02 FB | 	rdlong	local07, local05
03fa4     27 47 02 F6 | 	mov	arg02, local02
03fa8     28 49 02 F6 | 	mov	arg03, local03
03fac     26 45 02 F6 | 	mov	arg01, local01
03fb0     06 5B 02 F6 | 	mov	local08, objptr
03fb4     2B 0D 02 F6 | 	mov	objptr, local06
03fb8     2D 58 62 FD | 	call	local07
03fbc     2D 0D 02 F6 | 	mov	objptr, local08
03fc0     0F 5D 02 F6 | 	mov	local09, result1
03fc4     00 5C 5E F2 | 	cmps	local09, #0 wcz
03fc8     34 00 90 3D |  if_ae	jmp	#LR__0274
03fcc     08 4C 06 F1 | 	add	local01, #8
03fd0     26 55 02 FB | 	rdlong	local05, local01
03fd4     20 54 46 F5 | 	or	local05, #32
03fd8     26 55 62 FC | 	wrlong	local05, local01
03fdc     01 00 00 FF 
03fe0     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
03fe4     08 5D 62 FC | 	wrlong	local09, ptr___system__dat__
03fe8     01 00 00 FF 
03fec     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
03ff0     00 5C 0E F2 | 	cmp	local09, #0 wz
03ff4     01 1E 66 56 |  if_ne	neg	result1, #1
03ff8     00 1E 06 A6 |  if_e	mov	result1, #0
03ffc     7C 00 90 FD | 	jmp	#LR__0279
04000                 | LR__0274
04000     2E 1F 02 F6 | 	mov	result1, local09
04004     74 00 90 FD | 	jmp	#LR__0279
04008                 | LR__0275
04008     18 4C 06 F1 | 	add	local01, #24
0400c     26 5F 0A FB | 	rdlong	local10, local01 wz
04010     18 4C 86 F1 | 	sub	local01, #24
04014     1C 00 90 5D |  if_ne	jmp	#LR__0276
04018     01 00 00 FF 
0401c     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
04020     08 0D 68 FC | 	wrlong	#6, ptr___system__dat__
04024     01 00 00 FF 
04028     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
0402c     01 1E 66 F6 | 	neg	result1, #1
04030     48 00 90 FD | 	jmp	#LR__0279
04034                 | LR__0276
04034     00 5C 06 F6 | 	mov	local09, #0
04038                 | LR__0277
04038     00 50 1E F2 | 	cmp	local03, #0 wcz
0403c     38 00 90 ED |  if_be	jmp	#LR__0278
04040     2F 55 02 F6 | 	mov	local05, local10
04044     2A 57 02 FB | 	rdlong	local06, local05
04048     04 54 06 F1 | 	add	local05, #4
0404c     2A 59 02 FB | 	rdlong	local07, local05
04050     29 45 C2 FA | 	rdbyte	arg01, local04
04054     26 47 02 F6 | 	mov	arg02, local01
04058     06 61 02 F6 | 	mov	local11, objptr
0405c     2B 0D 02 F6 | 	mov	objptr, local06
04060     01 52 06 F1 | 	add	local04, #1
04064     2D 58 62 FD | 	call	local07
04068     30 0D 02 F6 | 	mov	objptr, local11
0406c     0F 5D 02 F1 | 	add	local09, result1
04070     01 50 86 F1 | 	sub	local03, #1
04074     C0 FF 9F FD | 	jmp	#LR__0277
04078                 | LR__0278
04078     2E 1F 02 F6 | 	mov	result1, local09
0407c                 | LR__0279
0407c     AF F0 03 F6 | 	mov	ptra, fp
04080     BF 00 A0 FD | 	call	#popregs_
04084                 | __system___vfswrite_ret
04084     2D 00 64 FD | 	ret
04088                 | 
04088                 | __system___vfsread
04088     0F 5A 05 F6 | 	mov	COUNT_, #15
0408c     B0 00 A0 FD | 	call	#pushregs_
04090     2C F0 07 F1 | 	add	ptra, #44
04094     04 5E 05 F1 | 	add	fp, #4
04098     AF 44 62 FC | 	wrlong	arg01, fp
0409c     04 5E 05 F1 | 	add	fp, #4
040a0     AF 46 62 FC | 	wrlong	arg02, fp
040a4     04 5E 05 F1 | 	add	fp, #4
040a8     AF 48 62 FC | 	wrlong	arg03, fp
040ac     04 5E 85 F1 | 	sub	fp, #4
040b0     AF 4C 02 FB | 	rdlong	local01, fp
040b4     14 5E 05 F1 | 	add	fp, #20
040b8     AF 4C 62 FC | 	wrlong	local01, fp
040bc     04 5E 05 F1 | 	add	fp, #4
040c0     AF 00 68 FC | 	wrlong	#0, fp
040c4     1C 5E 85 F1 | 	sub	fp, #28
040c8     AF 4E 02 FB | 	rdlong	local02, fp
040cc     04 5E 85 F1 | 	sub	fp, #4
040d0     08 4E 06 F1 | 	add	local02, #8
040d4     27 4D 02 FB | 	rdlong	local01, local02
040d8     01 4C CE F7 | 	test	local01, #1 wz
040dc     1C 00 90 5D |  if_ne	jmp	#LR__0280
040e0     01 00 00 FF 
040e4     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
040e8     08 0D 68 FC | 	wrlong	#6, ptr___system__dat__
040ec     01 00 00 FF 
040f0     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
040f4     01 1E 66 F6 | 	neg	result1, #1
040f8     9C 02 90 FD | 	jmp	#LR__0288
040fc                 | LR__0280
040fc     04 5E 05 F1 | 	add	fp, #4
04100     AF 4C 02 FB | 	rdlong	local01, fp
04104     04 5E 85 F1 | 	sub	fp, #4
04108     10 4C 06 F1 | 	add	local01, #16
0410c     26 51 0A FB | 	rdlong	local03, local01 wz
04110     B4 00 90 AD |  if_e	jmp	#LR__0282
04114     04 5E 05 F1 | 	add	fp, #4
04118     AF 52 02 FB | 	rdlong	local04, fp
0411c     10 52 06 F1 | 	add	local04, #16
04120     29 4D 02 FB | 	rdlong	local01, local04
04124     26 4F 02 FB | 	rdlong	local02, local01
04128     04 4C 06 F1 | 	add	local01, #4
0412c     26 51 02 FB | 	rdlong	local03, local01
04130     AF 44 02 FB | 	rdlong	arg01, fp
04134     04 5E 05 F1 | 	add	fp, #4
04138     AF 46 02 FB | 	rdlong	arg02, fp
0413c     04 5E 05 F1 | 	add	fp, #4
04140     AF 48 02 FB | 	rdlong	arg03, fp
04144     0C 5E 85 F1 | 	sub	fp, #12
04148     06 55 02 F6 | 	mov	local05, objptr
0414c     27 0D 02 F6 | 	mov	objptr, local02
04150     2D 50 62 FD | 	call	local03
04154     2A 0D 02 F6 | 	mov	objptr, local05
04158     10 5E 05 F1 | 	add	fp, #16
0415c     AF 1E 62 FC | 	wrlong	result1, fp
04160     10 5E 85 F1 | 	sub	fp, #16
04164     00 1E 5E F2 | 	cmps	result1, #0 wcz
04168     4C 00 90 3D |  if_ae	jmp	#LR__0281
0416c     04 5E 05 F1 | 	add	fp, #4
04170     AF 4C 02 FB | 	rdlong	local01, fp
04174     26 53 02 F6 | 	mov	local04, local01
04178     08 52 06 F1 | 	add	local04, #8
0417c     29 51 02 FB | 	rdlong	local03, local04
04180     20 50 46 F5 | 	or	local03, #32
04184     08 4C 06 F1 | 	add	local01, #8
04188     26 51 62 FC | 	wrlong	local03, local01
0418c     0C 5E 05 F1 | 	add	fp, #12
04190     AF 44 0A FB | 	rdlong	arg01, fp wz
04194     10 5E 85 F1 | 	sub	fp, #16
04198     01 00 00 FF 
0419c     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
041a0     08 45 62 FC | 	wrlong	arg01, ptr___system__dat__
041a4     01 00 00 FF 
041a8     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
041ac     01 1E 66 56 |  if_ne	neg	result1, #1
041b0     00 1E 06 A6 |  if_e	mov	result1, #0
041b4     E0 01 90 FD | 	jmp	#LR__0288
041b8                 | LR__0281
041b8     10 5E 05 F1 | 	add	fp, #16
041bc     AF 1E 02 FB | 	rdlong	result1, fp
041c0     10 5E 85 F1 | 	sub	fp, #16
041c4     D0 01 90 FD | 	jmp	#LR__0288
041c8                 | LR__0282
041c8     04 5E 05 F1 | 	add	fp, #4
041cc     AF 4C 02 FB | 	rdlong	local01, fp
041d0     1C 4C 06 F1 | 	add	local01, #28
041d4     26 51 02 FB | 	rdlong	local03, local01
041d8     14 5E 05 F1 | 	add	fp, #20
041dc     AF 50 62 FC | 	wrlong	local03, fp
041e0     AF 4C 0A FB | 	rdlong	local01, fp wz
041e4     18 5E 85 F1 | 	sub	fp, #24
041e8     1C 00 90 5D |  if_ne	jmp	#LR__0283
041ec     01 00 00 FF 
041f0     5C 10 06 F1 | 	add	ptr___system__dat__, ##604
041f4     08 0D 68 FC | 	wrlong	#6, ptr___system__dat__
041f8     01 00 00 FF 
041fc     5C 10 86 F1 | 	sub	ptr___system__dat__, ##604
04200     01 1E 66 F6 | 	neg	result1, #1
04204     90 01 90 FD | 	jmp	#LR__0288
04208                 | LR__0283
04208     04 5E 05 F1 | 	add	fp, #4
0420c     AF 4C 02 FB | 	rdlong	local01, fp
04210     04 5E 85 F1 | 	sub	fp, #4
04214     24 4C 06 F1 | 	add	local01, #36
04218     26 51 0A FB | 	rdlong	local03, local01 wz
0421c     A0 00 90 AD |  if_e	jmp	#LR__0285
04220     24 5E 05 F1 | 	add	fp, #36
04224     AF 56 02 F6 | 	mov	local06, fp
04228     20 5E 85 F1 | 	sub	fp, #32
0422c     AF 58 02 FB | 	rdlong	local07, fp
04230     2C 53 02 F6 | 	mov	local04, local07
04234     24 52 06 F1 | 	add	local04, #36
04238     29 5B 02 FB | 	rdlong	local08, local04
0423c     2D 4D 02 F6 | 	mov	local01, local08
04240     26 4F 02 FB | 	rdlong	local02, local01
04244     04 4C 06 F1 | 	add	local01, #4
04248     26 5D 02 FB | 	rdlong	local09, local01
0424c     2E 51 02 F6 | 	mov	local03, local09
04250     2C 5F 02 F6 | 	mov	local10, local07
04254     04 5E 85 F1 | 	sub	fp, #4
04258     2F 61 02 F6 | 	mov	local11, local10
0425c     00 63 06 F6 | 	mov	local12, #256
04260     2B 65 02 F6 | 	mov	local13, local06
04264     30 45 02 F6 | 	mov	arg01, local11
04268     00 47 06 F6 | 	mov	arg02, #256
0426c     32 49 02 F6 | 	mov	arg03, local13
04270     06 67 02 F6 | 	mov	local14, objptr
04274     27 0D 02 F6 | 	mov	objptr, local02
04278     2D 50 62 FD | 	call	local03
0427c     33 0D 02 F6 | 	mov	objptr, local14
04280     0F 69 02 F6 | 	mov	local15, result1
04284     10 5E 05 F1 | 	add	fp, #16
04288     AF 68 62 FC | 	wrlong	local15, fp
0428c     AF 4E 0A FB | 	rdlong	local02, fp wz
04290     10 5E 85 F1 | 	sub	fp, #16
04294     28 00 90 5D |  if_ne	jmp	#LR__0284
04298     24 5E 05 F1 | 	add	fp, #36
0429c     AF 52 02 FB | 	rdlong	local04, fp
042a0     24 5E 85 F1 | 	sub	fp, #36
042a4     29 51 02 F6 | 	mov	local03, local04
042a8     02 50 0E F5 | 	and	local03, #2 wz
042ac     10 00 90 AD |  if_e	jmp	#LR__0284
042b0     01 4C 06 F6 | 	mov	local01, #1
042b4     20 5E 05 F1 | 	add	fp, #32
042b8     AF 02 68 FC | 	wrlong	#1, fp
042bc     20 5E 85 F1 | 	sub	fp, #32
042c0                 | LR__0284
042c0                 | LR__0285
042c0     10 5E 05 F1 | 	add	fp, #16
042c4     AF 00 68 FC | 	wrlong	#0, fp
042c8     10 5E 85 F1 | 	sub	fp, #16
042cc                 | LR__0286
042cc     0C 5E 05 F1 | 	add	fp, #12
042d0     AF 4C 02 FB | 	rdlong	local01, fp
042d4     0C 5E 85 F1 | 	sub	fp, #12
042d8     00 4C 1E F2 | 	cmp	local01, #0 wcz
042dc     AC 00 90 ED |  if_be	jmp	#LR__0287
042e0     18 5E 05 F1 | 	add	fp, #24
042e4     AF 4C 02 FB | 	rdlong	local01, fp
042e8     26 4F 02 FB | 	rdlong	local02, local01
042ec     04 4C 06 F1 | 	add	local01, #4
042f0     26 51 02 FB | 	rdlong	local03, local01
042f4     14 5E 85 F1 | 	sub	fp, #20
042f8     AF 44 02 FB | 	rdlong	arg01, fp
042fc     04 5E 85 F1 | 	sub	fp, #4
04300     06 61 02 F6 | 	mov	local11, objptr
04304     27 0D 02 F6 | 	mov	objptr, local02
04308     2D 50 62 FD | 	call	local03
0430c     30 0D 02 F6 | 	mov	objptr, local11
04310     0F 5F 02 F6 | 	mov	local10, result1
04314     14 5E 05 F1 | 	add	fp, #20
04318     AF 5E 62 FC | 	wrlong	local10, fp
0431c     14 5E 85 F1 | 	sub	fp, #20
04320     00 5E 5E F2 | 	cmps	local10, #0 wcz
04324     64 00 90 CD |  if_b	jmp	#LR__0287
04328     1C 5E 05 F1 | 	add	fp, #28
0432c     AF 4C 02 FB | 	rdlong	local01, fp
04330     26 51 02 F6 | 	mov	local03, local01
04334     01 50 06 F1 | 	add	local03, #1
04338     AF 50 62 FC | 	wrlong	local03, fp
0433c     08 5E 85 F1 | 	sub	fp, #8
04340     AF 58 02 FB | 	rdlong	local07, fp
04344     26 59 42 FC | 	wrbyte	local07, local01
04348     04 5E 85 F1 | 	sub	fp, #4
0434c     AF 4C 02 FB | 	rdlong	local01, fp
04350     01 4C 06 F1 | 	add	local01, #1
04354     AF 4C 62 FC | 	wrlong	local01, fp
04358     04 5E 85 F1 | 	sub	fp, #4
0435c     AF 4C 02 FB | 	rdlong	local01, fp
04360     01 4C 86 F1 | 	sub	local01, #1
04364     AF 4C 62 FC | 	wrlong	local01, fp
04368     14 5E 05 F1 | 	add	fp, #20
0436c     AF 4C 0A FB | 	rdlong	local01, fp wz
04370     20 5E 85 F1 | 	sub	fp, #32
04374     54 FF 9F AD |  if_e	jmp	#LR__0286
04378     14 5E 05 F1 | 	add	fp, #20
0437c     AF 50 02 FB | 	rdlong	local03, fp
04380     14 5E 85 F1 | 	sub	fp, #20
04384     0A 50 0E F2 | 	cmp	local03, #10 wz
04388     40 FF 9F 5D |  if_ne	jmp	#LR__0286
0438c                 | LR__0287
0438c     10 5E 05 F1 | 	add	fp, #16
04390     AF 1E 02 FB | 	rdlong	result1, fp
04394     10 5E 85 F1 | 	sub	fp, #16
04398                 | LR__0288
04398     AF F0 03 F6 | 	mov	ptra, fp
0439c     BF 00 A0 FD | 	call	#popregs_
043a0                 | __system___vfsread_ret
043a0     2D 00 64 FD | 	ret
043a4                 | 
043a4                 | __struct__s_vfs_file_t_putchar
043a4     04 5A 05 F6 | 	mov	COUNT_, #4
043a8     B0 00 A0 FD | 	call	#pushregs_
043ac     18 0C 06 F1 | 	add	objptr, #24
043b0     06 4D 0A FB | 	rdlong	local01, objptr wz
043b4     18 0C 86 F1 | 	sub	objptr, #24
043b8     00 1E 06 A6 |  if_e	mov	result1, #0
043bc     3C 00 90 AD |  if_e	jmp	#LR__0289
043c0     18 0C 06 F1 | 	add	objptr, #24
043c4     06 4D 02 FB | 	rdlong	local01, objptr
043c8     18 0C 86 F1 | 	sub	objptr, #24
043cc     26 4F 02 FB | 	rdlong	local02, local01
043d0     04 4C 06 F1 | 	add	local01, #4
043d4     26 51 02 FB | 	rdlong	local03, local01
043d8     06 47 02 F6 | 	mov	arg02, objptr
043dc     06 53 02 F6 | 	mov	local04, objptr
043e0     27 0D 02 F6 | 	mov	objptr, local02
043e4     2D 50 62 FD | 	call	local03
043e8     29 0D 02 F6 | 	mov	objptr, local04
043ec     00 1E 5E F2 | 	cmps	result1, #0 wcz
043f0     00 4C 06 C6 |  if_b	mov	local01, #0
043f4     01 4C 06 36 |  if_ae	mov	local01, #1
043f8     26 1F 02 F6 | 	mov	result1, local01
043fc                 | LR__0289
043fc     AF F0 03 F6 | 	mov	ptra, fp
04400     BF 00 A0 FD | 	call	#popregs_
04404                 | __struct__s_vfs_file_t_putchar_ret
04404     2D 00 64 FD | 	ret
04408                 | 
04408                 | __struct__s_vfs_file_t_getchar
04408     04 5A 05 F6 | 	mov	COUNT_, #4
0440c     B0 00 A0 FD | 	call	#pushregs_
04410     1C 0C 06 F1 | 	add	objptr, #28
04414     06 4D 0A FB | 	rdlong	local01, objptr wz
04418     1C 0C 86 F1 | 	sub	objptr, #28
0441c     01 1E 66 A6 |  if_e	neg	result1, #1
04420     2C 00 90 AD |  if_e	jmp	#LR__0290
04424                 | '         return getcf(__this);
04424     1C 0C 06 F1 | 	add	objptr, #28
04428     06 4D 02 FB | 	rdlong	local01, objptr
0442c     1C 0C 86 F1 | 	sub	objptr, #28
04430     26 4F 02 FB | 	rdlong	local02, local01
04434     04 4C 06 F1 | 	add	local01, #4
04438     26 51 02 FB | 	rdlong	local03, local01
0443c     06 45 02 F6 | 	mov	arg01, objptr
04440     06 53 02 F6 | 	mov	local04, objptr
04444     27 0D 02 F6 | 	mov	objptr, local02
04448     2D 50 62 FD | 	call	local03
0444c     29 0D 02 F6 | 	mov	objptr, local04
04450                 | LR__0290
04450     AF F0 03 F6 | 	mov	ptra, fp
04454     BF 00 A0 FD | 	call	#popregs_
04458                 | __struct__s_vfs_file_t_getchar_ret
04458     2D 00 64 FD | 	ret
0445c                 | 
0445c                 | __struct___bas_wrap_sender_tx
0445c     04 5A 05 F6 | 	mov	COUNT_, #4
04460     B0 00 A0 FD | 	call	#pushregs_
04464     06 4D 02 FB | 	rdlong	local01, objptr
04468     26 4F 02 FB | 	rdlong	local02, local01
0446c     04 4C 06 F1 | 	add	local01, #4
04470     26 51 02 FB | 	rdlong	local03, local01
04474     06 53 02 F6 | 	mov	local04, objptr
04478     27 0D 02 F6 | 	mov	objptr, local02
0447c     2D 50 62 FD | 	call	local03
04480     29 0D 02 F6 | 	mov	objptr, local04
04484     01 1E 06 F6 | 	mov	result1, #1
04488     AF F0 03 F6 | 	mov	ptra, fp
0448c     BF 00 A0 FD | 	call	#popregs_
04490                 | __struct___bas_wrap_sender_tx_ret
04490     2D 00 64 FD | 	ret
04494                 | 
04494                 | LR__0291
04494     20 21 21 21 
04498     20 63 6F 72 
0449c     72 75 70 74 
044a0     65 64 20 68 
044a4     65 61 70 3F 
044a8     3F 3F 20 21 
044ac     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
044af     00          | 	byte	0
044b0                 | LR__0292
044b0     20 21 21 21 
044b4     20 6F 75 74 
044b8     20 6F 66 20 
044bc     68 65 61 70 
044c0     20 6D 65 6D 
044c4     6F 72 79 20 
044c8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
044cc     00          | 	byte	0
044cd                 | LR__0293
044cd     20 21 21 21 
044d1     20 63 6F 72 
044d5     72 75 70 74 
044d9     65 64 20 68 
044dd     65 61 70 20 
044e1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
044e5     00          | 	byte	0
044e6     00 00       | 	alignl
044e8                 | _hng030rm_spin2_dat_
044e8     00 00 00 00 
044ec     00 00 00 00 
044f0     00 00 00 00 
044f4     00 00 00 00 
044f8     00 00 00    | vga_font       file "vgafont.def"
044fb     7E 81 A5 81 
044ff     81 BD 99 81 
04503     81 7E 00 00 
04507     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
0450b     7E FF DB FF 
0450f     FF C3 E7 FF 
04513     FF 7E 00 00 
04517     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
0451b     00 36 7F 7F 
0451f     7F 7F 3E 1C 
04523     08 00 00 00 
04527     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
0452b     00 08 1C 3E 
0452f     7F 3E 1C 08 
04533     00 00 00 00 
04537     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
0453b     18 3C 3C E7 
0453f     E7 E7 18 18 
04543     3C 00 00 00 
04547     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0454b     18 3C 7E FF 
0454f     FF 7E 18 18 
04553     3C 00 00 00 
04557     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0455b     00 00 00 18 
0455f     3C 3C 18 00 
04563     00 00 00 00 
04567     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
0456b     FF FF FF E7 
0456f     C3 C3 E7 FF 
04573     FF FF FF FF 
04577     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
0457b     00 00 3C 66 
0457f     42 42 66 3C 
04583     00 00 00 00 
04587     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
0458b     FF FF C3 99 
0458f     BD BD 99 C3 
04593     FF FF FF FF 
04597     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
0459b     78 70 58 4C 
0459f     1E 33 33 33 
045a3     33 1E 00 00 
045a7     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
045ab     3C 66 66 66 
045af     66 3C 18 7E 
045b3     18 18 00 00 
045b7     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
045bb     FC CC FC 0C 
045bf     0C 0C 0C 0E 
045c3     0F 07 00 00 
045c7     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
045cb     FE C6 FE C6 
045cf     C6 C6 C6 E6 
045d3     E7 67 03 00 
045d7     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
045db     18 18 DB 3C 
045df     E7 3C DB 18 
045e3     18 00 00 00 
045e7     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
045eb     03 07 0F 1F 
045ef     7F 1F 0F 07 
045f3     03 01 00 00 
045f7     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
045fb     60 70 78 7C 
045ff     7F 7C 78 70 
04603     60 40 00 00 
04607     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
0460b     18 3C 7E 18 
0460f     18 18 7E 3C 
04613     18 00 00 00 
04617     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
0461b     66 66 66 66 
0461f     66 66 66    | 	byte	$66[7]
04622     00 66 66 00 
04626     00 00 00 00 
0462a     00 FE DB DB 
0462e     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
04632     D8 D8 D8 00 
04636     00 00 00 3E 
0463a     63 06 1C 36 
0463e     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
04642     30 63 3E 00 
04646     00 00 00 00 
0464a     00 00 00 00 
0464e     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
04652     7F 7F 7F 00 
04656     00 00 00 00 
0465a     00 18 3C 7E 
0465e     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
04662     3C 18 7E 00 
04666     00 00 00 00 
0466a     00 18 3C 7E 
0466e     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
04672     18 18 18 00 
04676     00 00 00 00 
0467a     00 18 18 18 
0467e     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04682     7E 3C 18 00 
04686     00 00 00 00 
0468a     00 00 00 18 
0468e     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
04692     00 00 00 00 
04696     00 00 00 00 
0469a     00 00 00    | 	byte	$00[11]
0469d     0C 06 7F 06 
046a1     0C 00 00 00 
046a5     00 00 00 00 
046a9     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
046ad     00 03 03 03 
046b1     7F 00 00 00 
046b5     00 00 00 00 
046b9     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
046bd     14 36 7F 36 
046c1     14 00 00 00 
046c5     00 00 00 00 
046c9     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
046cd     1C 1C 3E 3E 
046d1     7F 7F 00 00 
046d5     00 00 00 00 
046d9     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
046dd     7F 3E 3E 1C 
046e1     1C 08 00 00 
046e5     00 00 00 00 
046e9     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
046ed     00 00 00 00 
046f1     00 00 00 00 
046f5     00 00 00 00 
046f9     00 00       | 	byte	$00[14]
046fb     18 3C 3C 3C 
046ff     18 18 18 00 
04703     18 18 00 00 
04707     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
0470b     66 24 00 00 
0470f     00 00 00 00 
04713     00 00 00 00 
04717     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0471b     00 36 36 7F 
0471f     36 36 36 7F 
04723     36 36 00 00 
04727     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
0472b     3E 63 43 03 
0472f     3E 60 60 61 
04733     63 3E 18 18 
04737     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
0473b     00 00 43 63 
0473f     30 18 0C 06 
04743     63 61 00 00 
04747     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
0474b     1C 36 36 1C 
0474f     6E 3B 33 33 
04753     33 6E 00 00 
04757     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
0475b     0C 0C 0C 06 
0475f     00 00 00 00 
04763     00 00 00 00 
04767     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0476b     30 18 0C 0C 
0476f     0C 0C 0C 0C 
04773     18 30 00 00 
04777     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
0477b     0C 18 30 30 
0477f     30 30 30 30 
04783     18 0C 00 00 
04787     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
0478b     00 00 00 66 
0478f     3C FF 3C 66 
04793     00 00 00 00 
04797     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
0479b     00 00 00 18 
0479f     18 7E 18 18 
047a3     00 00 00 00 
047a7     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
047ab     00 00 00 00 
047af     00 00 00 00 | 	byte	$00[8]
047b3     18 18 18 0C 
047b7     00 00 00 00 
047bb     00 00 00 00 
047bf     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
047c3     00 00 00 00 
047c7     00 00 00 00 
047cb     00 00 00 00 
047cf     00 00 00 00 | 	byte	$00[16]
047d3     18 18 00 00 
047d7     00 00 00 00 
047db     00 00 40 60 
047df     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
047e3     03 01 00 00 
047e7     00 00 00 00 
047eb     1C 36 63 63 
047ef     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
047f3     36 1C 00 00 
047f7     00 00 00 00 
047fb     18 1C 1E 18 
047ff     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
04803     18 7E 00 00 
04807     00 00 00 00 
0480b     3E 63 60 30 
0480f     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
04813     63 7F 00 00 
04817     00 00 00 00 
0481b     3E 63 60 60 
0481f     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
04823     63 3E 00 00 
04827     00 00 00 00 
0482b     30 38 3C 36 
0482f     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
04833     30 78 00 00 
04837     00 00 00 00 
0483b     7F 03 03 03 
0483f     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
04843     63 3E 00 00 
04847     00 00 00 00 
0484b     1C 06 03 03 
0484f     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
04853     63 3E 00 00 
04857     00 00 00 00 
0485b     7F 63 60 60 
0485f     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
04863     0C 0C 00 00 
04867     00 00 00 00 
0486b     3E 63 63 63 
0486f     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
04873     63 3E 00 00 
04877     00 00 00 00 
0487b     3E 63 63 63 
0487f     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
04883     30 1E 00 00 
04887     00 00 00 00 
0488b     00 00 00 18 
0488f     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
04893     18 18 00 00 
04897     00 00 00 00 
0489b     00 00 00 18 
0489f     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
048a3     18 18 0C 00 
048a7     00 00 00 00 
048ab     00 60 30 18 
048af     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
048b3     30 60 00 00 
048b7     00 00 00 00 
048bb     00 00 00 7E 
048bf     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
048c3     00 00 00 00 
048c7     00 00 00 00 
048cb     00          | 	byte	$00[9]
048cc     06 0C 18 30 
048d0     60 30 18 0C 
048d4     06 00 00 00 
048d8     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
048dc     63 63 30 18 
048e0     18 18 00 18 
048e4     18 00 00 00 
048e8     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
048ec     3E 63 63 7B 
048f0     7B 7B 3B 03 
048f4     3E 00 00 00 
048f8     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
048fc     1C 36 63 63 
04900     7F 63 63 63 
04904     63 00 00 00 
04908     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
0490c     66 66 66 3E 
04910     66 66 66 66 
04914     3F 00 00 00 
04918     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
0491c     66 43 03 03 
04920     03 03 43 66 
04924     3C 00 00 00 
04928     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
0492c     36 66 66 66 
04930     66 66 66 36 
04934     1F 00 00 00 
04938     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
0493c     66 46 16 1E 
04940     16 06 46 66 
04944     7F 00 00 00 
04948     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
0494c     66 46 16 1E 
04950     16 06 06 06 
04954     0F 00 00 00 
04958     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
0495c     66 43 03 03 
04960     7B 63 63 66 
04964     5C 00 00 00 
04968     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
0496c     63 63 63 7F 
04970     63 63 63 63 
04974     63 00 00 00 
04978     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
0497c     18 18 18 18 
04980     18 18 18 18 | 	byte	$18[8]
04984     3C 00 00 00 
04988     00 00 00 78 
0498c     30 30 30 30 
04990     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
04994     1E 00 00 00 
04998     00 00 00 67 
0499c     66 66 36 1E 
049a0     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
049a4     67 00 00 00 
049a8     00 00 00 0F 
049ac     06 06 06 06 
049b0     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
049b4     7F 00 00 00 
049b8     00 00 00 63 
049bc     77 7F 7F 6B 
049c0     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
049c4     63 00 00 00 
049c8     00 00 00 63 
049cc     67 6F 7F 7B 
049d0     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
049d4     63 00 00 00 
049d8     00 00 00 3E 
049dc     63 63 63 63 
049e0     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
049e4     3E 00 00 00 
049e8     00 00 00 3F 
049ec     66 66 66 3E 
049f0     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
049f4     0F 00 00 00 
049f8     00 00 00 3E 
049fc     63 63 63 63 
04a00     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
04a04     3E 30 70 00 
04a08     00 00 00 3F 
04a0c     66 66 66 3E 
04a10     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
04a14     67 00 00 00 
04a18     00 00 00 3E 
04a1c     63 63 06 1C 
04a20     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
04a24     3E 00 00 00 
04a28     00 00 00 7E 
04a2c     7E 5A 18 18 
04a30     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04a34     3C 00 00 00 
04a38     00 00 00 63 
04a3c     63 63 63 63 
04a40     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
04a44     3E 00 00 00 
04a48     00 00 00 63 
04a4c     63 63 63 63 
04a50     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
04a54     08 00 00 00 
04a58     00 00 00 63 
04a5c     63 63 63 6B 
04a60     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
04a64     36 00 00 00 
04a68     00 00 00 63 
04a6c     63 36 3E 1C 
04a70     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
04a74     63 00 00 00 
04a78     00 00 00 66 
04a7c     66 66 66 3C 
04a80     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
04a84     3C 00 00 00 
04a88     00 00 00 7F 
04a8c     63 61 30 18 
04a90     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
04a94     7F 00 00 00 
04a98     00 00 00 3C 
04a9c     0C 0C 0C 0C 
04aa0     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
04aa4     3C 00 00 00 
04aa8     00 00 00 00 
04aac     01 03 07 0E 
04ab0     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
04ab4     40 00 00 00 
04ab8     00 00 00 3C 
04abc     30 30 30 30 
04ac0     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
04ac4     3C 00 00 00 
04ac8     1C 36 00 00 
04acc     00 00 00 00 
04ad0     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04ad4     00 00 00 00 
04ad8     00 00 00 00 
04adc     00 00 00 00 
04ae0     00 00 00 00 
04ae4     00          | 	byte	$00[17]
04ae5     FF 00 00 0C 
04ae9     18 00 00 00 
04aed     00 00 00 00 
04af1     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04af5     00 00 00 00 
04af9     00 00 00 00 
04afd     00          | 	byte	$00[9]
04afe     1E 30 3E 33 
04b02     33 33 6E 00 
04b06     00 00 00 00 
04b0a     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
04b0e     1E 36 66 66 
04b12     66 66 3E 00 
04b16     00 00 00 00 
04b1a     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
04b1e     3E 63 03 03 
04b22     03 63 3E 00 
04b26     00 00 00 00 
04b2a     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
04b2e     3C 36 33 33 
04b32     33 33 6E 00 
04b36     00 00 00 00 
04b3a     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
04b3e     3E 63 7F 03 
04b42     03 63 3E 00 
04b46     00 00 00 00 
04b4a     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
04b4e     0C 1E 0C 0C 
04b52     0C 0C 1E 00 
04b56     00 00 00 00 
04b5a     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
04b5e     6E 33 33 33 
04b62     33 33 3E 30 
04b66     33 1E 00 00 
04b6a     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
04b6e     36 6E 66 66 
04b72     66 66 67 00 
04b76     00 00 00 00 
04b7a     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
04b7e     1C 18 18 18 
04b82     18 18 3C 00 
04b86     00 00 00 00 
04b8a     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
04b8e     70 60 60 60 
04b92     60 60 60 66 
04b96     66 3C 00 00 
04b9a     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
04b9e     66 36 1E 1E 
04ba2     36 66 67 00 
04ba6     00 00 00 00 
04baa     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
04bae     18 18 18 18 
04bb2     18 18       | 	byte	$18[6]
04bb4     3C 00 00 00 
04bb8     00 00 00 00 
04bbc     00 00 37 7F 
04bc0     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
04bc4     63 00 00 00 
04bc8     00 00 00 00 
04bcc     00 00 3B 66 
04bd0     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
04bd4     66 00 00 00 
04bd8     00 00 00 00 
04bdc     00 00 3E 63 
04be0     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
04be4     3E 00 00 00 
04be8     00 00 00 00 
04bec     00 00 3B 66 
04bf0     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
04bf4     3E 06 06 0F 
04bf8     00 00 00 00 
04bfc     00 00 6E 33 
04c00     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
04c04     3E 30 30 78 
04c08     00 00 00 00 
04c0c     00 00 3B 6E 
04c10     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
04c14     0F 00 00 00 
04c18     00 00 00 00 
04c1c     00 00 3E 63 
04c20     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
04c24     3E 00 00 00 
04c28     00 00 00 08 
04c2c     0C 0C 3F 0C 
04c30     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04c34     38 00 00 00 
04c38     00 00 00 00 
04c3c     00 00 33 33 
04c40     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
04c44     6E 00 00 00 
04c48     00 00 00 00 
04c4c     00 00 63 63 
04c50     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
04c54     1C 00 00 00 
04c58     00 00 00 00 
04c5c     00 00 63 63 
04c60     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
04c64     36 00 00 00 
04c68     00 00 00 00 
04c6c     00 00 63 36 
04c70     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
04c74     63 00 00 00 
04c78     00 00 00 00 
04c7c     00 00 63 63 
04c80     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
04c84     7E 60 30 1F 
04c88     00 00 00 00 
04c8c     00 00 7F 33 
04c90     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
04c94     7F 00 00 00 
04c98     00 00 00 70 
04c9c     18 18 18 0E 
04ca0     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
04ca4     70 00 00 00 
04ca8     00 00 00 18 
04cac     18 18 18 18 
04cb0     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
04cb4     18 00 00 00 
04cb8     00 00 00 0E 
04cbc     18 18 18 70 
04cc0     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
04cc4     0E 00 00 00 
04cc8     6E 3B 00 00 
04ccc     00 00 00 00 
04cd0     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04cd4     00 00 00 00 
04cd8     00 00 00 00 
04cdc     00 00       | 	byte	$00[10]
04cde     08 1C 36 63 
04ce2     63 63 7F 00 
04ce6     00 00 00 00 
04cea     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
04cee     03 03 03 03 
04cf2     43 66 3C 18 
04cf6     30 1E 00 00 
04cfa     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
04cfe     33 33 33 33 
04d02     33 33       | 	byte	$33[6]
04d04     6E 00 00 00 
04d08     00 00 60 30 
04d0c     18 00 3E 63 
04d10     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
04d14     3E 00 00 00 
04d18     00 00 08 1C 
04d1c     36 00 1E 30 
04d20     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
04d24     6E 00 00 00 
04d28     00 00 00 00 
04d2c     33 00 1E 30 
04d30     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
04d34     6E 00 00 00 
04d38     00 00 1C 36 
04d3c     1C 00 33 33 
04d40     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
04d44     6E 00 00 00 
04d48     00 00 60 30 
04d4c     18 00 3E 63 
04d50     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
04d54     3E 00 00 00 
04d58     00 00 00 00 
04d5c     00 00 3E 63 
04d60     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
04d64     3E 18 30 1E 
04d68     00 00 00 1C 
04d6c     58 78 38 18 
04d70     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
04d74     3C 00 00 00 
04d78     00 00 00 00 
04d7c     63 00 3E 63 
04d80     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
04d84     3E 00 00 00 
04d88     66 33 00 3E 
04d8c     63 63 63 63 
04d90     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04d94     3E 00 00 00 
04d98     00 00 CC 66 
04d9c     33 00 3E 63 
04da0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
04da4     3E 00 00 00 
04da8     00 00 18 3C 
04dac     66 00 1C 18 
04db0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
04db4     3C 00 00 00 
04db8     30 18 00 7F 
04dbc     63 61 30 18 
04dc0     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
04dc4     7F 00 00 00 
04dc8     00 63 00 08 
04dcc     1C 36 63 63 
04dd0     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
04dd4     63 00 00 00 
04dd8     30 18 00 3C 
04ddc     66 43 03 03 
04de0     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
04de4     3C 00 00 00 
04de8     30 18 00 7F 
04dec     66 46 16 1E 
04df0     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
04df4     7F 00 00 00 
04df8     0C 06 00 0F 
04dfc     06 06 06 06 
04e00     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
04e04     7F 00 00 00 
04e08     30 18 00 1C 
04e0c     18 18 18 18 
04e10     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
04e14     3C 00 00 00 
04e18     00 00 08 1C 
04e1c     36 00 3E 63 
04e20     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
04e24     3E 00 00 00 
04e28     00 00 00 00 
04e2c     63 00 3E 63 
04e30     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
04e34     3E 00 00 00 
04e38     00 00 00 6F 
04e3c     46 26 06 06 
04e40     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
04e44     7F 00 00 00 
04e48     00 00 00 6E 
04e4c     4C 2C 0C 0C 
04e50     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
04e54     1E 00 00 00 
04e58     30 18 00 3E 
04e5c     63 63 06 1C 
04e60     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
04e64     3E 00 00 00 
04e68     00 00 60 30 
04e6c     18 00 3E 63 
04e70     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
04e74     3E 00 00 00 
04e78     00 63 00 3E 
04e7c     63 63 63 63 
04e80     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04e84     3E 00 00 00 
04e88     00 63 00 63 
04e8c     63 63 63 63 
04e90     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
04e94     3E 00 00 00 
04e98     6C 38 00 7E 
04e9c     7E 5A 18 18 
04ea0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04ea4     3C 00 00 00 
04ea8     00 00 60 48 
04eac     2C 0C 3F 0C 
04eb0     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04eb4     38 00 00 00 
04eb8     00 00 00 0F 
04ebc     26 36 1E 0E 
04ec0     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
04ec4     7F 00 00 00 
04ec8     00 00 00 00 
04ecc     00 63 36 1C 
04ed0     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
04ed4     00 00 00 00 
04ed8     00 00       | 	byte	$00[6]
04eda     36 1C 08 00 
04ede     3E 63 03 03 
04ee2     03 63 3E 00 
04ee6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
04eea     30 18 0C 00 
04eee     1E 30 3E 33 
04ef2     33 33 6E 00 
04ef6     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
04efa     60 30 18 00 
04efe     1C 18 18 18 
04f02     18 18 3C 00 
04f06     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
04f0a     60 30 18 00 
04f0e     3E 63 63 63 
04f12     63 63 3E 00 
04f16     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
04f1a     30 18 0C 00 
04f1e     33 33 33 33 
04f22     33 33 6E 00 
04f26     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
04f2a     00 08 1C 36 
04f2e     63 63 7F 63 
04f32     63 63 63 18 
04f36     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
04f3a     00 00 00 00 
04f3e     1E 30 3E 33 
04f42     33 33 6E 18 
04f46     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
04f4a     00 7F 63 61 
04f4e     30 18 0C 06 
04f52     43 63 7F 00 
04f56     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
04f5a     36 1C 08 00 
04f5e     7F 33 18 0C 
04f62     06 63 7F 00 
04f66     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
04f6a     00 7F 66 46 
04f6e     16 1E 16 06 
04f72     46 66 7F 18 
04f76     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
04f7a     00 00 00 00 
04f7e     3E 63 7F 03 
04f82     03 63 3E 18 
04f86     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
04f8a     00 3C 66 03 
04f8e     1F 03 0F 03 
04f92     03 66 3C 00 
04f96     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
04f9a     60 30 18 00 
04f9e     7F 33 18 0C 
04fa2     06 63 7F 00 
04fa6     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
04faa     00 3C 66 43 
04fae     03 03 03 03 
04fb2     43 66 3C 00 
04fb6     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
04fba     00 00 00 00 
04fbe     3E 63 06 1C 
04fc2     30 63 3E 18 
04fc6     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
04fca     00 00 00 00 
04fce     00 00       | 	byte	$00[6]
04fd0     6C 36 1B 36 
04fd4     6C 00 00 00 
04fd8     00 00 00 00 
04fdc     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04fe0     1B 36 6C 36 
04fe4     1B 00 00 00 
04fe8     88 22 88 22 
04fec     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
04ff0     88 22 88 22 
04ff4     88 22 88 22 
04ff8     AA 55 AA 55 
04ffc     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
05000     AA 55 AA 55 
05004     AA 55 AA 55 
05008     BB EE BB EE 
0500c     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
05010     BB EE BB EE 
05014     BB EE BB EE 
05018     18 18 18 18 
0501c     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
05020     18 18 18 18 
05024     18 18 18 18 
05028     18 18 18 18 
0502c     18 18 18    | 	byte	$18[15]
0502f     1F 18 18 18 
05033     18 18 18 18 
05037     18 30 18 00 
0503b     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
0503f     63 7F 63 63 
05043     63 63 00 00 
05047     00 1C 36 00 
0504b     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
0504f     63 7F 63 63 
05053     63 63 00 00 
05057     00 36 1C 00 
0505b     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
0505f     1E 16 06 46 
05063     66 7F 00 00 
05067     00 00 00 00 
0506b     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
0506f     1C 30 60 63 
05073     63 3E 18 30 
05077     1E 6C 6C 6C 
0507b     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
0507f     6F 6C 6C 6C 
05083     6C 6C 6C 6C 
05087     6C 6C 6C 6C 
0508b     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0508f     6C 6C 6C 6C 
05093     6C 6C 6C 6C 
05097     6C          | 	byte	$6c[9]
05098     00 00 00 00 
0509c     00          | 	byte	$00[5]
0509d     7F 60 6F 6C 
050a1     6C 6C 6C 6C 
050a5     6C 6C 6C 6C 
050a9     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
050ad     6F 60 7F 00 
050b1     00 00 00 00 
050b5     00 00 00 18 
050b9     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
050bd     61 30 18 0C 
050c1     06 43 63 7F 
050c5     00 00 00 00 
050c9     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
050cd     00 7F 33 18 
050d1     0C 06 63 7F 
050d5     00 00 00 00 
050d9     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
050dd     00 00 1F 18 
050e1     18 18 18 18 
050e5     18 18 18 18 
050e9     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
050ed     18 18 F8 00 
050f1     00 00 00 00 
050f5     00 00 00 18 
050f9     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
050fd     18 18 FF 00 
05101     00 00 00 00 
05105     00 00 00 00 
05109     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0510d     00 00 FF 18 
05111     18 18 18 18 
05115     18 18 18 18 
05119     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0511d     18 18 F8 18 
05121     18 18 18 18 
05125     18 18 18 00 
05129     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0512d     00 00 FF 00 
05131     00 00 00 00 
05135     00 00 00 18 
05139     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
0513d     18 18 FF 18 
05141     18 18 18 18 
05145     18 18 18 63 
05149     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
0514d     36 63 63 7F 
05151     63 63 63 63 
05155     00 00 00 00 
05159     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
0515d     00 1E 30 3E 
05161     33 33 33 6E 
05165     00 00 00 6C 
05169     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
0516d     EC 0C FC 00 
05171     00 00 00 00 
05175     00 00 00 00 
05179     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0517d     FC 0C EC 6C 
05181     6C 6C 6C 6C 
05185     6C 6C 6C 6C 
05189     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0518d     EF 00 FF 00 
05191     00 00 00 00 
05195     00 00 00 00 
05199     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0519d     FF 00 EF 6C 
051a1     6C 6C 6C 6C 
051a5     6C 6C 6C 6C 
051a9     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
051ad     EC 0C EC 6C 
051b1     6C 6C 6C 6C 
051b5     6C 6C 6C 00 
051b9     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
051bd     FF 00 FF 00 
051c1     00 00 00 00 
051c5     00 00 00 6C 
051c9     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
051cd     EF 00 EF 6C 
051d1     6C 6C 6C 6C 
051d5     6C 6C 6C 00 
051d9     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
051dd     63 3E 63 63 
051e1     63 63 3E 63 
051e5     00 00 00 00 
051e9     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
051ed     30 3C 36 33 
051f1     33 33 33 6E 
051f5     00 00 00 00 
051f9     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
051fd     66 66 6F 66 
05201     66 66 36 1F 
05205     00 00 00 36 
05209     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
0520d     66 66 66 66 
05211     66 66       | 	byte	$66[6]
05213     36 1F 00 00 
05217     00 00 63 00 
0521b     7F 66 46 16 
0521f     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
05223     66 7F 00 00 
05227     00 6C 38 00 
0522b     38 30 30 3C 
0522f     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
05233     33 6E 00 00 
05237     00 36 1C 00 
0523b     63 67 6F 7F 
0523f     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
05243     63 63 00 00 
05247     00 30 18 00 
0524b     3C 18 18 18 
0524f     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
05253     18 3C 00 00 
05257     00 3C 66 00 
0525b     3C 18 18 18 
0525f     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
05263     18 3C 00 00 
05267     00 00 00 36 
0526b     1C 08 00 3E 
0526f     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
05273     63 3E 00 00 
05277     00 18 18 18 
0527b     18 18 18 18 
0527f     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
05283     00 00 00 00 
05287     00 00 00 00 
0528b     00 00 00 00 | 	byte	$00[12]
0528f     F8 18 18 18 
05293     18 18 18 18 
05297     18 FF FF FF 
0529b     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
0529f     FF FF FF FF 
052a3     FF FF FF FF 
052a7     FF          | 	byte	$ff[9]
052a8     00 00 00 00 
052ac     00 00 00    | 	byte	$00[7]
052af     FF FF FF FF 
052b3     FF FF FF FF 
052b7     FF          | 	byte	$ff[9]
052b8     00 00 00 7E 
052bc     7E 5A 18 18 
052c0     18 18 18 18 
052c4     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
052c8     1C 36 1C 63 
052cc     63 63 63 63 
052d0     63 63 63 63 
052d4     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
052d8     FF FF FF FF 
052dc     FF FF FF    | 	byte	$ff[7]
052df     00 00 00 00 
052e3     00 00 00 00 
052e7     00          | 	byte	$00[9]
052e8     30 18 00 3E 
052ec     63 63 63 63 
052f0     63 63 63 63 
052f4     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
052f8     00 00 00 1E 
052fc     33 33 33 1B 
05300     33 63 63 63 
05304     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
05308     1C 36 00 3E 
0530c     63 63 63 63 
05310     63 63 63 63 
05314     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
05318     30 18 00 63 
0531c     67 6F 7F 7B 
05320     73 63 63 63 
05324     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
05328     00 00 60 30 
0532c     18 00 3B 66 
05330     66 66 66 66 
05334     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
05338     00 00 36 1C 
0533c     08 00 3B 66 
05340     66 66 66 66 
05344     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
05348     36 1C 00 3E 
0534c     63 63 06 1C 
05350     30 60 63 63 
05354     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
05358     00 00 36 1C 
0535c     08 00 3E 63 
05360     06 1C 30 63 
05364     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
05368     30 18 00 3F 
0536c     66 66 66 3E 
05370     36 66 66 66 
05374     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
05378     30 18 00 63 
0537c     63 63 63 63 
05380     63 63 63 63 
05384     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
05388     00 00 60 30 
0538c     18 00 3B 6E 
05390     66 06 06 06 
05394     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
05398     66 33 00 63 
0539c     63 63 63 63 
053a0     63 63 63 63 
053a4     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
053a8     00 00 60 30 
053ac     18 00 63 63 
053b0     63 63 63 63 
053b4     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
053b8     30 18 00 66 
053bc     66 66 66 3C 
053c0     18 18 18 18 
053c4     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
053c8     00 00 00 08 
053cc     0C 0C 3F 0C 
053d0     0C 0C 0C 6C 
053d4     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
053d8     30 18 00 00 
053dc     00 00 00 00 
053e0     00 00 00 00 
053e4     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
053e8     00 00 00 00 
053ec     00 00 00 00 | 	byte	$00[8]
053f0     7F 00 00 00 
053f4     00 00 00 00 
053f8     66 33 00 00 
053fc     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
05400     00 00 00 00 
05404     00 00 00 00 
05408     00 00 00 00 
0540c     00 00 00 00 
05410     00 00 00 00 
05414     00          | 	byte	$00[21]
05415     0C 06 3C 36 
05419     1C 00 00 00 
0541d     00 00 00 00 
05421     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05425     00 00 00 63 
05429     3E 00 00 00 
0542d     00 00 00 00 
05431     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05435     00 00 00 00 
05439     3E 63 06 1C 
0543d     36 63 63 36 
05441     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
05445     00 00 00 00 
05449     00 00 00 00 | 	byte	$00[8]
0544d     18 00 7E 00 
05451     18 00 00 00 
05455     00 00 00 00 
05459     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0545d     00 00 00 00 
05461     00 00 00 00 | 	byte	$00[8]
05465     18 30 1E 00 
05469     00 00 1C 36 
0546d     36 1C 00 00 
05471     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
05475     00 00 00 00 
05479     63 00 00 00 
0547d     00 00 00 00 
05481     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05485     00 00 00 18 
05489     18 00 00 00 
0548d     00 00 00 00 
05491     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05495     00 00 00 00 
05499     00          | 	byte	$00[5]
0549a     CC 66 33 00 
0549e     33 33 33 33 
054a2     33 33 6E 00 
054a6     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
054aa     00 3F 66 66 
054ae     66 3E 36 66 
054b2     66 66 6F 00 
054b6     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
054ba     36 1C 08 00 
054be     3B 6E 66 06 
054c2     06 06 0F 00 
054c6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
054ca     00 00 00 7E 
054ce     7E 7E 7E 7E 
054d2     7E 7E 00 00 
054d6     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
054da     00 00 00 00 
054de     00 00 00 00 
054e2     00 00 00 00 
054e6     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
054e8     00 00 00 00 
      ...             
05518     00 00 00 00 
0551c     00 00 00    | st_font        file "st4font.def"
0551f     FF FF 00 00 
05523     00 00 00 00 
05527     00 18 18 18 
0552b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0552f     18 18 18 18 
05533     18 18 18 18 
05537     18          | 	byte	$18[9]
05538     00 00 00 00 
0553c     00 00 00    | 	byte	$00[7]
0553f     FF FF 18 18 
05543     18 18 18 18 
05547     18 18 18 18 
0554b     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0554f     FF FF 00 00 
05553     00 00 00 00 
05557     00 18 18 18 
0555b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0555f     1F 1F 18 18 
05563     18 18 18 18 
05567     18 18 18 18 
0556b     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0556f     F8 F8 18 18 
05573     18 18 18 18 
05577     18 00 00 00 
0557b     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0557f     1F 1F 18 18 
05583     18 18 18 18 
05587     18 00 00 00 
0558b     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0558f     F8 F8 18 18 
05593     18 18 18 18 
05597     18 18 18 18 
0559b     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0559f     1F 1F 00 00 
055a3     00 00 00 00 
055a7     00 18 18 18 
055ab     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
055af     F8 F8 00 00 
055b3     00 00 00 00 
055b7     00 18 18 18 
055bb     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
055bf     FF FF 18 18 
055c3     18 18 18 18 
055c7     18 00 00 18 
055cb     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
055cf     66 7E 7E 66 
055d3     66 66 66 30 
055d7     18 00 00 7E 
055db     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
055df     3E 06 06 06 
055e3     06 7E 7E 18 
055e7     0C 30 18 3C 
055eb     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
055ef     06 06 06 66 
055f3     66 7E 3C 00 
055f7     00 30 18 66 
055fb     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
055ff     7E 7E 76 76 
05603     66 66 66 00 
05607     00 30 18 7C 
0560b     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
0560f     1C 38 70 60 
05613     60 7E 3E 00 
05617     00 30 18 7E 
0561b     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
0561f     18 0C 0C 06 
05623     06 7E 7E 00 
05627     00 18 18 00 
0562b     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
0562f     18 18 0C 0C 
05633     06 7E 7E 00 
05637     00 30 18 3C 
0563b     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
0563f     66 66 66 66 
05643     66          | 	byte	$66[5]
05644     7E 3C 00 00 
05648     00 00 06 06 
0564c     06 06 16 1E 
05650     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
05654     7E 7E 00 00 
05658     00 00 00 00 
0565c     00 3C 7C 60 
05660     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
05664     7E 7C 30 18 
05668     00 00 00 00 
0566c     00 3C 7E 66 
05670     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
05674     7E 7C 18 0C 
05678     00 00 30 18 
0567c     00 3C 3E 06 
05680     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
05684     7E 7C 00 00 
05688     00 00 30 18 
0568c     00 3E 7E 66 
05690     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
05694     66 66 00 00 
05698     00 00 30 18 
0569c     00 7C 7E 06 
056a0     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
056a4     7E 3E 00 00 
056a8     00 00 30 18 
056ac     00 7E 7E 30 
056b0     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
056b4     7E 7E 00 00 
056b8     00 00 18 18 
056bc     00 7E 7E 30 
056c0     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
056c4     7E 7E 00 00 
056c8     00 00 30 18 
056cc     00 3C 7E 66 
056d0     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
056d4     7E 3C 00 00 
056d8     00 00 1C 1C 
056dc     18 18 38 3C 
056e0     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
056e4     3C 3C 00 00 
056e8     00 00 00 00 
056ec     00 00 00 00 
056f0     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
056f4     00 00 00 00 
056f8     00 00       | 	byte	$00[6]
056fa     18 18 18 18 
056fe     18 18 18 18 | 	byte	$18[8]
05702     00 00 18 18 
05706     00 00 00 00 
0570a     66 66 66 66 
0570e     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
05712     00 00 00 00 
05716     00 00 00 00 
0571a     00          | 	byte	$00[9]
0571b     66 66 FF FF 
0571f     66 66 FF FF 
05723     66 66 00 00 
05727     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
0572b     7C 7E 06 06 
0572f     3E 7C 60 60 
05733     7E 3E 18 18 
05737     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
0573b     66 30 30 18 
0573f     18 0C 0C 66 
05743     66 00 00 00 
05747     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
0574b     66 66 3C 1C 
0574f     1C FC FE 66 
05753     66 FE FC 00 
05757     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
0575b     18 18 18 18 
0575f     00 00 00 00 
05763     00 00 00 00 
05767     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
0576b     18 1C 0C 0C 
0576f     0C 0C 0C 0C 
05773     1C 18 30 00 
05777     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
0577b     18 38 30 30 
0577f     30 30 30 30 
05783     38 18 0C 00 
05787     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
0578b     66 66 3C 3C 
0578f     FF FF 3C 3C 
05793     66 66 00 00 
05797     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
0579b     00 18 18 18 
0579f     7E 7E 18 18 
057a3     18 00 00 00 
057a7     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
057ab     00 00 00 00 
057af     00 00       | 	byte	$00[6]
057b1     18 18 18 18 
057b5     18          | 	byte	$18[5]
057b6     0C 04 00 00 
057ba     00 00 00 00 
057be     7E 7E 00 00 
057c2     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
057c6     00 00 00 00 
057ca     00 00 00 00 
057ce     00 00 00 00 
057d2     00          | 	byte	$00[13]
057d3     18 18 18 00 
057d7     00 00 00 60 
057db     60 60 30 30 
057df     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
057e3     06 06 06 00 
057e7     00 00 00 3C 
057eb     7E 66 66 66 
057ef     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
057f3     66 7E 3C 00 
057f7     00 00 00 18 
057fb     18 1C 1C 18 
057ff     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
05803     18 7E 7E 00 
05807     00 00 00 3C 
0580b     7E 66 66 30 
0580f     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
05813     0C 7E 7E 00 
05817     00 00 00 7E 
0581b     7E 30 30 18 
0581f     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
05823     66 7E 3C 00 
05827     00 00 00 30 
0582b     30 38 38 3C 
0582f     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
05833     7E 30 30 00 
05837     00 00 00 7E 
0583b     7E 06 06 3E 
0583f     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
05843     66 7E 3C 00 
05847     00 00 00 38 
0584b     3C 0E 06 06 
0584f     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
05853     66 7E 3C 00 
05857     00 00 00 7E 
0585b     7E 60 60 30 
0585f     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
05863     0C 0C 0C 00 
05867     00 00 00 3C 
0586b     7E 66 66 3C 
0586f     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
05873     66 7E 3C 00 
05877     00 00 00 3C 
0587b     7E 66 66 7E 
0587f     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
05883     70 3C 1C 00 
05887     00 00 00 00 
0588b     00 00 18 18 
0588f     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
05893     18 18 18 00 
05897     00 00 00 00 
0589b     00 00 18 18 
0589f     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
058a3     18 18 18 0C 
058a7     04 00 00 00 
058ab     70 38 1C 0E 
058af     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
058b3     70 00 00 00 
058b7     00 00 00 00 
058bb     00 00 7E 7E 
058bf     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
058c3     00 00 00 00 
058c7     00 00 00 00 | 	byte	$00[8]
058cb     0E 1C 38 70 
058cf     E0 70 38 1C 
058d3     0E 00 00 00 
058d7     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
058db     7E 66 66 30 
058df     30 18 18 18 
058e3     00 18 18 00 
058e7     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
058eb     7E 66 66 66 
058ef     66 36 06 66 
058f3     66 7E 3C 00 
058f7     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
058fb     3C 7E 66 66 
058ff     66 7E 7E 66 
05903     66 66 66 00 
05907     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
0590b     7E 66 66 7E 
0590f     3E 66 66 66 
05913     66 7E 3E 00 
05917     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
0591b     7E 66 66 06 
0591f     06 06 06 66 
05923     66 7E 3C 00 
05927     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
0592b     7E 66 66 66 
0592f     66 66 66 66 
05933     66 7E 3E 00 
05937     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
0593b     7E 06 06 3E 
0593f     3E 06 06 06 
05943     06 7E 7E 00 
05947     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
0594b     7E 06 06 3E 
0594f     3E 06 06 06 
05953     06 06 06 00 
05957     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
0595b     7E 06 06 76 
0595f     76 66 66 66 
05963     66 7E 3C 00 
05967     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
0596b     66 66 66 7E 
0596f     7E 66 66 66 
05973     66 66 66 00 
05977     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
0597b     7E 18 18 18 
0597f     18 18 18 18 
05983     18 7E 7E 00 
05987     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
0598b     60 60 60 60 
0598f     60 60 60    | 	byte	$60[7]
05992     66 66 7E 3C 
05996     00 00 00 00 
0599a     66 66 36 36 
0599e     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
059a2     66 66 C6 C6 
059a6     00 00 00 00 
059aa     06 06 06 06 
059ae     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
059b2     06 06 7E 7E 
059b6     00 00 00 00 
059ba     C6 C6 EE EE 
059be     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
059c2     C6 C6 C6 C6 
059c6     00 00 00 00 
059ca     66 66 66 6E 
059ce     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
059d2     76 66 66 66 
059d6     00 00 00 00 
059da     3C 7E 66 66 
059de     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
059e2     66 66 7E 3C 
059e6     00 00 00 00 
059ea     3E 7E 66 66 
059ee     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
059f2     06 06 06 06 
059f6     00 00 00 00 
059fa     3C 7E 66 66 
059fe     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
05a02     66 56 3E 6C 
05a06     00 00 00 00 
05a0a     3E 7E 66 66 
05a0e     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
05a12     66 66 C6 C6 
05a16     00 00 00 00 
05a1a     7C 7E 06 06 
05a1e     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
05a22     60 60 7E 3E 
05a26     00 00 00 00 
05a2a     7E 7E 18 18 
05a2e     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
05a32     18 18 18 18 
05a36     00 00 00 00 
05a3a     66 66 66 66 
05a3e     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
05a42     66 66 7E 3C 
05a46     00 00 00 00 
05a4a     66 66 66 66 
05a4e     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
05a52     3C 3C 18 18 
05a56     00 00 00 00 
05a5a     C6 C6 C6 C6 
05a5e     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
05a62     FE EE C6 82 
05a66     00 00 00 00 
05a6a     66 66 66 3C 
05a6e     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
05a72     3C 66 66 66 
05a76     00 00 00 00 
05a7a     66 66 66 66 
05a7e     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
05a82     18 18 18 18 
05a86     00 00 00 00 
05a8a     7E 7E 30 30 
05a8e     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
05a92     06 06 7E 7E 
05a96     00 00 00 00 
05a9a     3C 3C 0C 0C 
05a9e     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
05aa2     0C 0C 3C 3C 
05aa6     00 00 00 00 
05aaa     06 06 0C 0C 
05aae     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
05ab2     60 60 C0 C0 
05ab6     00 00 00 00 
05aba     3C 3C 30 30 
05abe     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
05ac2     30 30 3C 3C 
05ac6     00 00 00 00 
05aca     18 18 3C 3C 
05ace     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
05ad2     00 00 00 00 
05ad6     00 00 00 00 
05ada     00 00 00 00 
05ade     00 00 00 00 
05ae2     00 00       | 	byte	$00[18]
05ae4     FE FE 00 00 
05ae8     00 00 0C 0C 
05aec     18 18 00 00 
05af0     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
05af4     00 00 00 00 
05af8     00 00 00 00 
05afc     00          | 	byte	$00[9]
05afd     3C 7C 60 7C 
05b01     7E 66 66 7E 
05b05     7C 00 00 00 
05b09     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
05b0d     3E 7E 66 66 
05b11     66 66 66 7E 
05b15     3E 00 00 00 
05b19     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
05b1d     3C 3E 06 06 
05b21     06 06 06 7E 
05b25     7C 00 00 00 
05b29     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
05b2d     7C 7E 66 66 
05b31     66 66 66 7E 
05b35     7C 00 00 00 
05b39     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
05b3d     3C 7E 66 66 
05b41     7E 06 06 7E 
05b45     7C 00 00 00 
05b49     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
05b4d     18 7E 7E 18 
05b51     18 18 18 18 
05b55     18 00 00 00 
05b59     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
05b5d     7C 7E 66 66 
05b61     66 66 7E 7C 
05b65     60 7E 3E 00 
05b69     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
05b6d     3E 7E 66 66 
05b71     66 66 66 66 
05b75     66 00 00 00 
05b79     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
05b7d     1C 1C 18 18 
05b81     18 18 18 3C 
05b85     3C 00 00 00 
05b89     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
05b8d     30 30 30 30 
05b91     30 30 30 30 
05b95     30          | 	byte	$30[9]
05b96     3E 1E 00 00 
05b9a     06 06 06 36 
05b9e     36 1E 1E 1E 
05ba2     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
05ba6     00 00 00 00 
05baa     1C 1C 18 18 
05bae     18 18 18 18 
05bb2     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
05bb6     00 00 00 00 
05bba     00 00 00    | 	byte	$00[7]
05bbd     6C FE FE D6 
05bc1     D6 C6 C6 C6 
05bc5     C6 00 00 00 
05bc9     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
05bcd     3E 7E 66 66 
05bd1     66 66 66 66 
05bd5     66 00 00 00 
05bd9     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
05bdd     3C 7E 66 66 
05be1     66 66 66 7E 
05be5     3C 00 00 00 
05be9     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
05bed     3E 7E 66 66 
05bf1     66 66 66 7E 
05bf5     3E 06 06 00 
05bf9     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
05bfd     7C 7E 66 66 
05c01     66 66 66 7E 
05c05     7C 60 60 00 
05c09     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
05c0d     3E 7E 66 06 
05c11     06 06 06 06 
05c15     06 00 00 00 
05c19     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
05c1d     7C 7E 06 0E 
05c21     3C 70 60 7E 
05c25     3E 00 00 00 
05c29     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
05c2d     7E 7E 18 18 
05c31     18 18 18 78 
05c35     70 00 00 00 
05c39     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
05c3d     66 66 66 66 
05c41     66 66 66    | 	byte	$66[7]
05c44     7E 7C 00 00 
05c48     00 00 00 00 
05c4c     00 66 66 66 
05c50     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
05c54     18 18 00 00 
05c58     00 00 00 00 
05c5c     00 C6 C6 D6 
05c60     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
05c64     C6 82 00 00 
05c68     00 00 00 00 
05c6c     00 66 66 3C 
05c70     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
05c74     66 66 00 00 
05c78     00 00 00 00 
05c7c     00 66 66 66 
05c80     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
05c84     7C 60 7E 3E 
05c88     00 00 00 00 
05c8c     00 7E 7E 30 
05c90     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
05c94     7E 7E 00 00 
05c98     00 00 30 18 
05c9c     18 18 18 0C 
05ca0     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
05ca4     18 30 00 00 
05ca8     00 00 18 18 
05cac     18 18 18 18 
05cb0     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
05cb4     18 18 00 00 
05cb8     00 00 0C 18 
05cbc     18 18 18 30 
05cc0     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
05cc4     18 0C 00 00 
05cc8     00 00 6C 7E 
05ccc     36 00 00 00 
05cd0     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
05cd4     00 00 00 00 
05cd8     00 00 00 00 
05cdc     00          | 	byte	$00[9]
05cdd     18 18 18 18 
05ce1     18 18 00 00 
05ce5     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
05ce8     00 00 00 00 
05cec     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
05cf0     00 00 00 00 
05cf4     00 80 80 80 
05cf8     00 00 00 FF 
05cfc     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
05d00     00 00 00 00 
05d04     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
05d05     80 00 00 00 
05d09     00 80 00 00 
05d0d     80 80 00 00 
05d11     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
05d15     80 00 80 00 
05d19     00 40 80 00 
05d1d     AA AA AA 00 
05d21     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
05d25     FF 00 00 00 
05d29     00 FF 00 00 
05d2d     FF FF 00 00 
05d31     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
05d35     FF 00 FF 00 
05d39     00 FF FF 00 
05d3d     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
05d40     00 00 00 00 
05d44     00          | ataripalette   file "ataripalettep2.def"
05d45     11 11 11 00 
05d49     22 22 22 00 
05d4d     33 33 33 00 
05d51     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
05d55     55 55 55 00 
05d59     66 66 66 00 
05d5d     77 77 77 00 
05d61     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
05d65     99 99 99 00 
05d69     AA AA AA 00 
05d6d     BB BB BB 00 
05d71     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
05d75     DD DD DD 00 
05d79     EE EE EE 00 
05d7d     FF FF FF 00 
05d81     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
05d85     00 14 40 00 
05d89     00 1E 60 00 
05d8d     00 28 80 00 
05d91     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
05d95     00 3C BF 00 
05d99     00 46 DF 00 
05d9d     00 50 FF 00 
05da1     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
05da5     39 77 FF 00 
05da9     55 8A FF 00 
05dad     71 9E FF 00 
05db1     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
05db5     AA C5 FF 00 
05db9     C6 D8 FF 00 
05dbd     E3 EC FF 00 
05dc1     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
05dc5     00 00 40 00 
05dc9     00 00 60 00 
05dcd     00 00 80 00 
05dd1     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
05dd5     00 00 BF 00 
05dd9     00 00 DF 00 
05ddd     00 00 FF 00 
05de1     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
05de5     39 39 FF 00 
05de9     55 55 FF 00 
05ded     71 71 FF 00 
05df1     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
05df5     AA AA FF 00 
05df9     C6 C6 FF 00 
05dfd     E3 E3 FF 00 
05e01     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
05e05     20 00 40 00 
05e09     30 00 60 00 
05e0d     40 00 80 00 
05e11     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
05e15     60 00 BF 00 
05e19     70 00 DF 00 
05e1d     80 00 FF 00 
05e21     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
05e25     9C 39 FF 00 
05e29     AA 55 FF 00 
05e2d     B8 71 FF 00 
05e31     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
05e35     D5 AA FF 00 
05e39     E3 C6 FF 00 
05e3d     F1 E3 FF 00 
05e41     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
05e45     40 00 40 00 
05e49     60 00 60 00 
05e4d     80 00 80 00 
05e51     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
05e55     BF 00 BF 00 
05e59     DF 00 DF 00 
05e5d     FF 00 FF 00 
05e61     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
05e65     FF 39 FF 00 
05e69     FF 55 FF 00 
05e6d     FF 71 FF 00 
05e71     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
05e75     FF AA FF 00 
05e79     FF C6 FF 00 
05e7d     FF E3 FF 00 
05e81     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
05e85     40 00 20 00 
05e89     60 00 30 00 
05e8d     80 00 40 00 
05e91     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
05e95     BF 00 60 00 
05e99     DF 00 70 00 
05e9d     FF 00 80 00 
05ea1     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
05ea5     FF 39 9C 00 
05ea9     FF 55 AA 00 
05ead     FF 71 B8 00 
05eb1     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
05eb5     FF AA D5 00 
05eb9     FF C6 E3 00 
05ebd     FF E3 F1 00 
05ec1     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
05ec5     40 00 00 00 
05ec9     60 00 00 00 
05ecd     80 00 00 00 
05ed1     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
05ed5     BF 00 00 00 
05ed9     DF 00 00 00 
05edd     FF 00 00 00 
05ee1     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
05ee5     FF 39 39 00 
05ee9     FF 55 55 00 
05eed     FF 71 71 00 
05ef1     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
05ef5     FF AA AA 00 
05ef9     FF C6 C6 00 
05efd     FF E3 E3 00 
05f01     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
05f05     40 10 00 00 
05f09     60 18 00 00 
05f0d     80 20 00 00 
05f11     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
05f15     BF 30 00 00 
05f19     DF 38 00 00 
05f1d     FF 40 00 00 
05f21     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
05f25     FF 6A 39 00 
05f29     FF 80 55 00 
05f2d     FF 95 71 00 
05f31     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
05f35     FF BF AA 00 
05f39     FF D5 C6 00 
05f3d     FF EA E3 00 
05f41     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
05f45     40 20 00 00 
05f49     60 30 00 00 
05f4d     80 40 00 00 
05f51     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
05f55     BF 60 00 00 
05f59     DF 70 00 00 
05f5d     FF 80 00 00 
05f61     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
05f65     FF 9C 39 00 
05f69     FF AA 55 00 
05f6d     FF B8 71 00 
05f71     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
05f75     FF D5 AA 00 
05f79     FF E3 C6 00 
05f7d     FF F1 E3 00 
05f81     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
05f85     40 30 00 00 
05f89     60 48 00 00 
05f8d     80 60 00 00 
05f91     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
05f95     BF 90 00 00 
05f99     DF A8 00 00 
05f9d     FF C0 00 00 
05fa1     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
05fa5     FF CE 39 00 
05fa9     FF D5 55 00 
05fad     FF DC 71 00 
05fb1     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
05fb5     FF EA AA 00 
05fb9     FF F1 C6 00 
05fbd     FF F8 E3 00 
05fc1     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
05fc5     30 40 00 00 
05fc9     48 60 00 00 
05fcd     60 80 00 00 
05fd1     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
05fd5     90 BF 00 00 
05fd9     A8 DF 00 00 
05fdd     C0 FF 00 00 
05fe1     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
05fe5     CE FF 39 00 
05fe9     D5 FF 55 00 
05fed     DC FF 71 00 
05ff1     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
05ff5     EA FF AA 00 
05ff9     F1 FF C6 00 
05ffd     F8 FF E3 00 
06001     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
06005     00 40 00 00 
06009     00 60 00 00 
0600d     00 80 00 00 
06011     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
06015     00 BF 00 00 
06019     00 DF 00 00 
0601d     00 FF 00 00 
06021     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
06025     39 FF 39 00 
06029     55 FF 55 00 
0602d     71 FF 71 00 
06031     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
06035     AA FF AA 00 
06039     C6 FF C6 00 
0603d     E3 FF E3 00 
06041     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
06045     00 40 14 00 
06049     00 60 1E 00 
0604d     00 80 28 00 
06051     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
06055     00 BF 3C 00 
06059     00 DF 46 00 
0605d     00 FF 50 00 
06061     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
06065     39 FF 77 00 
06069     55 FF 8A 00 
0606d     71 FF 9E 00 
06071     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
06075     AA FF C5 00 
06079     C6 FF D8 00 
0607d     E3 FF EC 00 
06081     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
06085     00 40 28 00 
06089     00 60 3C 00 
0608d     00 80 50 00 
06091     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
06095     00 BF 78 00 
06099     00 DF 8C 00 
0609d     00 FF A0 00 
060a1     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
060a5     39 FF B5 00 
060a9     55 FF C0 00 
060ad     71 FF CA 00 
060b1     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
060b5     AA FF DF 00 
060b9     C6 FF EA 00 
060bd     E3 FF F4 00 
060c1     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
060c5     00 40 40 00 
060c9     00 60 60 00 
060cd     00 80 80 00 
060d1     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
060d5     00 BF BF 00 
060d9     00 DF DF 00 
060dd     00 FF FF 00 
060e1     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
060e5     39 FF FF 00 
060e9     55 FF FF 00 
060ed     71 FF FF 00 
060f1     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
060f5     AA FF FF 00 
060f9     C6 FF FF 00 
060fd     E3 FF FF 00 
06101     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
06105     00 28 40 00 
06109     00 3C 60 00 
0610d     00 50 80 00 
06111     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
06115     00 78 BF 00 
06119     00 8C DF 00 
0611d     00 A0 FF 00 
06121     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
06125     39 B5 FF 00 
06129     55 C0 FF 00 
0612d     71 CA FF 00 
06131     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
06135     AA DF FF 00 
06139     C6 EA FF 00 
0613d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
06140                 | '**********************************************************************************
06140                 | '
06140                 | '        Timings and colors definitions
06140                 | '
06140                 | '**********************************************************************************
06140                 | 
06140                 |    'streamer sets for text mode, to add to timings[0..5]
06140                 | 
06140                 | 
06140                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
06140     10 00 00 00 
06144     50 00 00 00 
06148     14 00 00 00 
0614c     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
06150     70 00 00 00 
06154     08 00 00 00 
06158     30 00 00 00 
0615c     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
06160     10 00 00 00 
06164     10 00 00 00 
06168     00 00 00 00 
0616c     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
06170     E0 01 00 00 
06174     F6 32 24 15 
06178     FB 6C C3 01 
0617c     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
06180                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
06180     12 00 00 00 
06184     30 00 00 00 
06188     10 00 00 00 
0618c     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
06190     18 00 00 00 
06194     08 00 00 00 
06198     18 00 00 00 
0619c     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
061a0     20 00 00 00 
061a4     18 00 00 00 
061a8     40 00 00 00 
061ac     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
061b0     F0 01 00 00 
061b4     00 D0 12 13 
061b8     FB 0F 00 01 
061bc     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
061c0     10 00 00 00 
061c4     40 00 00 00 
061c8     10 00 00 00 
061cc     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
061d0     08 00 00 00 
061d4     08 00 00 00 
061d8     08 00 00 00 
061dc     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
061e0     40 00 00 00 
061e4     20 00 00 00 
061e8     80 00 00 00 
061ec     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
061f0     E0 01 00 00 
061f4     70 AE E9 10 
061f8     FB 8B FF 01 
061fc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
06200     10 00 00 00 
06204     50 00 00 00 
06208     14 00 00 00 
0620c     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
06210     00 00 00 00 
06214     08 00 00 00 
06218     00 00 00 00 
0621c     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
06220     10 00 00 00 
06224     10 00 00 00 
06228     C0 00 00 00 
0622c     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
06230     40 02 00 00 
06234     F6 32 24 15 
06238     FB 6C C3 01 
0623c     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
06240     50 00 00 00 
06244     A0 00 00 00 
06248     54 00 00 00 
0624c     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
06250     08 00 00 00 
06254     08 00 00 00 
06258     08 00 00 00 
0625c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
06260     0C 00 00 00 
06264     08 00 00 00 
06268     00 01 00 00 
0626c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
06270     E0 01 00 00 
06274     10 06 56 15 
06278     FB 64 C3 01 
0627c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
06280     50 00 00 00 
06284     32 00 00 00 
06288     50 00 00 00 
0628c     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
06290     08 00 00 00 
06294     08 00 00 00 
06298     08 00 00 00 
0629c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
062a0     0C 00 00 00 
062a4     08 00 00 00 
062a8     40 01 00 00 
062ac     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
062b0     E0 01 00 00 
062b4     F2 CD 33 13 
062b8     FB 53 92 01 
062bc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
062c0     18 00 00 00 
062c4     30 00 00 00 
062c8     18 00 00 00 
062cc     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
062d0     08 00 00 00 
062d4     08 00 00 00 
062d8     08 00 00 00 
062dc     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
062e0     0C 00 00 00 
062e4     08 00 00 00 
062e8     80 01 00 00 
062ec     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
062f0     E0 01 00 00 
062f4     F4 8F 11 11 
062f8     FB 3A 55 01 
062fc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
06300     20 00 00 00 
06304     40 00 00 00 
06308     22 00 00 00 
0630c     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
06310     00 00 00 00 
06314     08 00 00 00 
06318     00 00 00 00 
0631c     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
06320     0C 00 00 00 
06324     08 00 00 00 
06328     C0 01 00 00 
0632c     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
06330     F0 01 00 00 
06334     F2 CD 33 13 
06338     FB 53 92 01 
0633c     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
06340                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
06340     00 75 C7 97 
06344     27 47 F6 0A 
06348     05 79 CB 9B 
0634c     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
06350                 | 
06350     28 12 64 FD | hdmi            setq    #9
06354     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
06358                 |            '     setq2   #255
06358                 |             '    rdlong  $100, paletteptr 
06358     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
0635c     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
06360     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
06364     78 F9 02 F1 |                 add     ii,hbase
06368     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
0636c     7B 0B 80 FF 
06370     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
06374                 | 
06374     66 66 86 FF 
06378     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
0637c                 | 
0637c                 | 
0637c                 | ''--------  frame rendering main loop  ---------------------------------------------------
0637c                 | 
0637c                 | p101
0637c     28 14 64 FD |                 setq    #10
06380     00 DF 06 FB |                 rdlong  framebuf,  ptra
06384     28 1E 64 FD |                 setq    #15
06388     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
0638c     71 99 02 FB |                 rdlong  border,borderptr
06390                 | 
06390     01 C4 06 F1 |                 add     frames,#1
06394     76 F5 02 F6 |                 mov     dlptr2,dlptr
06398                 | 
06398     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
0639c     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
063a0     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
063a4     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
063a8                 |  '' up porch
063a8                 | 
063a8     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
063ac     49 FF 02 F6 |                 mov     hsync1,sync_001
063b0     37 A8 46 FB |                 callpa  i_upporch ,#blank
063b4     72 01 68 FC |                 wrlong  #0,vblankptr
063b8                 |                 
063b8     1F EA 16 F4 |                 testb   paletteptr,#31 wc
063bc     29 FE 65 3D |          if_nc  setq2   #255
063c0     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
063c4                 | 
063c4                 | '' cursor blinking
063c4                 | 
063c4     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
063c8     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
063cc                 | 
063cc                 | '' main screen
063cc                 | 
063cc     00 BE 06 F6 |                 mov linenum,#0
063d0     00 18 07 F6 |                 mov rcnt,#0
063d4     00 1C 07 F6 |                 mov rcnt2a,#0
063d8                 | 
063d8                 | 
063d8     00 18 0F F2 | p301            cmp rcnt,#0 wz
063dc     18 00 90 AD |         if_z    jmp #p306
063e0     01 18 87 F1 |                 sub rcnt,#1
063e4     90 F7 02 F6 |                 mov dl,rdl
063e8     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
063ec     8F F7 02 A1 |    if_z        add dl,roffset  
063f0     7B 21 03 F6 |                 mov rdl,dl
063f4     04 00 90 FD |                 jmp #p307          
063f8                 |           
063f8                 |                 
063f8     7A F7 02 FB | p306            rdlong  dl,dlptr2
063fc     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
06400     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
06404     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
06408                 | 
06408                 | '' Special entry:
06408                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
06408                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
06408                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
06408                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
06408                 | '' todo: set horizontal scroll (if needed)
06408                 | 
06408     02 FA 66 F0 |                 shl framebuf2,#2
0640c     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
06410     04 22 0F F2 |                 cmp dlc,#%100 wz
06414                 |   
06414                 |                 
06414     04 F4 06 F1 |                 add dlptr2,#4
06418     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
0641c     7A 21 03 FB |                  rdlong rdl,dlptr2
06420     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
06424     04 18 47 F0 |                  shr rcnt,#4
06428                 |              
06428     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
0642c     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
06430                 |                 
06430     04 1E 47 F0 |                  shr roffset,#4
06434     0C 1E 67 F0 |                  shl roffset,#12
06438                 |   
06438     9C FF 9F FD |                  jmp #p301
0643c                 |                  
0643c                 |                  
0643c                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
0643c     0C FA 46 F0 |                 shr     framebuf2,#12
06440     02 FA 66 F0 |                 shl     framebuf2,#2
06444                 | 
06444     7B 03 E3 F8 |                 getbyte t1,dl,#0
06448     00 02 0F F2 |                 cmp     t1,#0 wz
0644c     34 00 90 AD |     if_z        jmp     #borderline
06450                 | 
06450     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
06454     50 00 90 CD |           if_c   jmp     #textline
06458     50 02 90 3D |           if_nc  jmp     #graphline
0645c                 | '
0645c     01 BE 06 F1 | p302            add     linenum,#1
06460     04 F4 06 F1 |                 add     dlptr2,#4
06464     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
06468     6C FF 9F 5D |          if_nz  jmp     #p301
0646c                 | 
0646c     72 03 68 FC | p112            wrlong  #1,vblankptr
06470     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
06474                 | 
06474     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
06478     4B FF 02 F6 |                 mov     hsync1,sync_223
0647c     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
06480     F8 FE 9F FD |                 jmp     #p101
06484                 | 
06484                 | '' ---------------  END of frame rendering loop -------------------------------------------
06484                 | 
06484                 | 
06484     14 00 B0 FD | borderline      call    #hsync                      ' make a border
06488     4C A1 C2 FC |                 xcont   m_vi,border
0648c     CC FF 9F FD |                 jmp     #p302
06490                 | 
06490                 | 
06490     08 00 B0 FD | blank           call    #hsync                          'blank lines
06494     7E A1 C2 FC |                 xcont   m_vi,hsync0
06498     FD ED 6F 0B |         _ret_   djnz    pa,#blank
0649c                 | 
0649c     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
064a0     7F 9D B2 FC |                 xzero   m_sn,hsync1
064a4     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
064a8                 | 
064a8                 | 
064a8                 | 
064a8                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
064a8                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
064a8                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
064a8                 | 
064a8                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
064a8                 | 
064a8     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
064ac                 | 
064ac     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
064b0     7B 17 5B F8 |                 getnib  zoom, dl,#3
064b4     03 16 07 F5 |                 and             zoom, #3
064b8                 | 
064b8                 | 
064b8                 | 
064b8     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
064bc     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
064c0     3F BC 06 F5 |                 and     linestart,#63
064c4     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
064c8     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
064cc                 | 
064cc     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
064d0                 | 
064d0                 |                        ' if fontline =0, get a border color
064d0                 | 
064d0     51 03 33 F9 | p102            getword t1,m_border,#0
064d4     00 02 0F F2 |                 cmp     t1, #0 wz
064d8     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
064dc                 | 
064dc     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
064e0     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
064e4     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
064e8     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
064ec     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
064f0     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
064f4     52 BB 02 F6 |                 mov m_lut2, m_lut1
064f8     6A BB 02 F1 |                 add m_lut2, lutt1
064fc     58 0F 03 F6 |                 mov cpl2,i_cpl
06500                 | 
06500     02 16 0F F2 |                cmp zoom,#2 wz
06504     E4 00 90 AD |           if_z jmp #p420
06508     01 16 0F F2 |                cmp zoom,#1 wz
0650c     64 00 90 AD |           if_z jmp #p410
06510     00 16 0F F2 |                 cmp zoom,#0 wz
06514     04 00 90 AD |           if_z jmp #p400
06518     50 01 90 FD |                jmp #p430
0651c                 | 
0651c                 |                    '
0651c                 |  ''---------------------------------------------------------------------------------------------------------
0651c     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
06520     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
06524     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
06528     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
0652c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
06530     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
06534     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
06538     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
0653c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
06540     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
06544                 | 
06544     81 BB C2 FC |                         xcont m_lut2,t1
06548                 | 
06548     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0654c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
06550     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
06554     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
06558     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0655c     01 C0 86 F1 |                         sub     lutaddr,#1
06560                 | 
06560     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
06564     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
06568     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
0656c                 | 
0656c     EB 0F 6F FB |                         djnz   cpl2,#p400
06570     28 01 90 FD |  p401                   jmp    #p103
06574                 | 
06574                 | ''------------------------------------------------------------------------------------------------------------
06574                 | 
06574     01 0E 47 F0 |  p410                   shr cpl2,#1
06578                 | 
06578                 | ''---------------------------------------------------------------------------------------------------------
06578     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
0657c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
06580     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
06584     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
06588     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
0658c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
06590     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
06594     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
06598     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
0659c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
065a0                 | 
065a0                 | 
065a0     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
065a4     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
065a8     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
065ac     03 02 07 FA |                         mul t1,#3
065b0     81 BB C2 FC |                         xcont m_lut2,t1
065b4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
065b8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
065bc     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
065c0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
065c4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
065c8     01 C0 86 F1 |                         sub     lutaddr,#1
065cc     63 06 63 FD |                         mergew t3
065d0     03 06 07 FA |                         mul t3,#3
065d4     83 BB C2 FC |                         xcont m_lut2,t3
065d8                 | 
065d8     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
065dc     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
065e0                 | 
065e0     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
065e4                 | 
065e4     E4 0F 6F FB |                         djnz   cpl2,#p412
065e8     B0 00 90 FD |  p411                   jmp    #p103
065ec                 | 
065ec                 | ''------------------------------------------------------------------------------------------------------------
065ec                 | 
065ec     02 0E 47 F0 |  p420                   shr cpl2,#2
065f0                 | 
065f0                 | ''---------------------------------------------------------------------------------------
065f0     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
065f4     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
065f8     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
065fc     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
06600     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
06604     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
06608     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
0660c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
06610     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
06614     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
06618                 | 
06618     61 02 63 FD |                         mergeb t1
0661c     81 07 3B F9 |                         getword t3,t1,#1
06620     0F 02 07 FA |                         mul t1,#15
06624     81 BB C2 FC |                         xcont m_lut2,t1
06628                 | 
06628     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0662c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
06630     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
06634     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
06638     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0663c     01 C0 86 F1 |                         sub     lutaddr,#1
06640                 | 
06640     81 09 EB F8 |                         getbyte t4,t1,#1        '
06644     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
06648                 | 
06648     0F 06 07 FA |                         mul t3,#15
0664c     83 BB C2 FC |                         xcont m_lut2,t3
06650                 | 
06650     83 0B EB F8 |                         getbyte t5,t3,#1
06654     85 BB C2 FC |                         xcont m_lut2, t5
06658     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
0665c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
06660                 | 
06660     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
06664                 | 
06664     E2 0F 6F FB |                         djnz   cpl2,#p422
06668     30 00 90 FD |  p421                   jmp    #p103
0666c                 | 
0666c                 | '--------------------------------------------------------------------------------------------------------------
0666c                 | 
0666c     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
06670     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
06674     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
06678                 | 
06678     00 BA C6 FC |                         xcont m_lut2,#0
0667c                 | 
0667c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
06680     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
06684     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
06688     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
0668c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
06690     01 C0 86 F1 |                         sub     lutaddr,#1
06694                 | 
06694     F5 0F 6F FB |                         djnz   cpl2,#p430
06698     00 00 90 FD |  p431                   jmp    #p103
0669c                 | 
0669c                 | ''------------------------------------------------------------------------------------------------------------
0669c                 | 
0669c                 | 
0669c                 | 
0669c     51 25 33 F9 | p103            getword  mb2,m_border,#0
066a0     00 24 0F F2 |                 cmp      mb2, #0 wz
066a4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
066a8                 | 
066a8     B0 FD 9F FD |                 jmp #p302
066ac                 | 
066ac                 | '' -------------------------------------- END of text line ---------------------------------
066ac                 | 
066ac                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
066ac                 | 
066ac     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
066b0                 | 
066b0                 | 
066b0     51 25 33 F9 | p202            getword mb2,m_border,#0
066b4     00 24 0F F2 |                 cmp     mb2, #0 wz
066b8     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
066bc                 | 
066bc                 | '----------------------------------------- display pixels
066bc                 | 
066bc     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
066c0     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
066c4                 | 
066c4     7B 17 5B F8 |                 getnib  zoom, dl,#3
066c8     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
066cc                 | 
066cc     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
066d0     0C BC 06 F5 |                 and     colordepth,#12
066d4                 | 
066d4     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
066d8     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
066dc     64 00 90 AD |           if_z  jmp     #p240
066e0                 | 
066e0     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
066e4     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
066e8     98 00 90 AD |           if_z  jmp     #p250
066ec                 | 
066ec     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
066f0     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
066f4     FC 00 90 AD |           if_z  jmp     #p260
066f8                 | 
066f8     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
066fc                 | 
066fc                 | '' --- 8 bit color modes
066fc                 | 
066fc     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
06700     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
06704                 | 
06704     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
06708     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
0670c                 |        
0670c                 |  '  
0670c     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
06710     25 0C 07 A6 |                 if_z mov skippattern,#%100101
06714                 |     
06714                 |  
06714     05 0C 07 56 |                 if_nz mov skippattern,#%000101
06718     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
0671c                 |         
0671c                 | 
0671c                 |         
0671c     7D 11 03 FB | p235               rdlong  char,framebuf2
06720     32 0C 63 FD |                    skipf skippattern
06724     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
06728     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
0672c     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
06730     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
06734     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
06738     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
0673c     F7 0F 6F FB |                    djnz    cpl2,#p235
06740                 | 
06740     20 01 90 FD |                jmp    #p203
06744                 |                   
06744                 | 
06744                 | 
06744                 | '' --- 1 bit color modes
06744                 | 
06744     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
06748     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
0674c                 | 
0674c     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
06750     13 0C 07 A6 |        if_z   mov skippattern,#%10011
06754     08 0C 07 56 |        if_nz  mov skippattern,#%01000
06758                 | 
06758                 | 
06758     7D 11 E3 FA | p241               rdword  char,framebuf2
0675c     44 10 FF F9 |                    movbyts char,#%01000100
06760     63 10 63 FD |                    mergew  char
06764     32 0C 63 FD |                    skipf skippattern
06768     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
0676c     63 10 63 FD |                    mergew  char                    ' 1 0
06770     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
06774     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
06778     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
0677c     F6 0F 6F FB |                    djnz   cpl2,#p241
06780                 | 
06780                 | 
06780     E0 00 90 FD |                jmp    #p203
06784                 | 
06784                 | '' --- 2 bit color modes
06784                 | 
06784     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
06788     C8 00 90 AD |        if_z   jmp #p251
0678c                 | 
0678c     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
06790     30 00 90 AD |        if_z   jmp #p252
06794                 | 
06794                 | 
06794     7D 11 C3 FA | p254               rdbyte char,framebuf2
06798     04 0A 07 F6 |                    mov  t5,#4
0679c     02 10 67 F0 | p255               shl  char,#2
067a0     88 03 53 F8 |                    getnib  t1,char,#2
067a4     03 02 07 F5 |                    and     t1,#3
067a8     55 02 07 FA |                    mul     t1,#$55
067ac     81 05 03 F9 |                    rolbyte  t2,t1,#0
067b0     FA 0B 6F FB |                    djnz    t5,#p255
067b4     82 BB C2 FC |                    xcont   m_lut2,t2
067b8     01 FA 06 F1 |                    add     framebuf2,#1
067bc     F5 0F 6F FB |                    djnz    cpl2,#p254
067c0     A0 00 90 FD |                    jmp     #p203
067c4                 | 
067c4     7D 11 E3 FA | p252               rdword char,framebuf2
067c8     08 0A 07 F6 |                    mov  t5,#8
067cc     02 10 67 F0 | p253               shl  char,#2
067d0     88 03 63 F8 |                    getnib  t1,char,#4
067d4     03 02 07 F5 |                    and     t1,#3
067d8     05 02 07 FA |                    mul     t1,#5
067dc     81 05 83 F8 |                    rolnib  t2,t1,#0
067e0     FA 0B 6F FB |                    djnz    t5,#p253
067e4     82 BB C2 FC |                    xcont   m_lut2,t2
067e8     02 FA 06 F1 |                    add     framebuf2,#2
067ec     F5 0F 6F FB |                    djnz    cpl2,#p252
067f0     70 00 90 FD |                    jmp     #p203
067f4                 | 
067f4                 | '' ------ 4 bit color modes
067f4                 | 
067f4     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
067f8     58 00 90 AD |        if_z   jmp #p251
067fc                 | 
067fc     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
06800     2C 00 90 AD |        if_z   jmp #p262
06804                 | 
06804                 | 
06804     7D 11 C3 FA | p263               rdbyte char,framebuf2
06808     02 0A DC FC |                            rep #5,#2
0680c     88 05 8B F8 |                              rolnib t2,char,#1
06810     88 05 8B F8 |                                  rolnib t2,char,#1
06814     88 05 8B F8 |                              rolnib t2,char,#1
06818     88 05 8B F8 |                                  rolnib t2,char,#1
0681c     04 10 67 F0 |                              shl char,#4
06820     82 BB C2 FC |                    xcont   m_lut2,t2
06824     01 FA 06 F1 |                    add     framebuf2,#1
06828     F6 0F 6F FB |                    djnz    cpl2,#p263
0682c     34 00 90 FD |                    jmp     #p203
06830                 | 
06830     7D 11 E3 FA | p262               rdword  char,framebuf2
06834     04 06 DC FC |                            rep #3,#4
06838     88 05 9B F8 |                              rolnib t2,char,#3
0683c     88 05 9B F8 |                                  rolnib t2,char,#3
06840     04 10 67 F0 |                              shl char,#4
06844     82 BB C2 FC |                    xcont   m_lut2,t2
06848     02 FA 06 F1 |                    add     framebuf2,#2
0684c     F8 0F 6F FB |                    djnz    cpl2,#p262
06850     10 00 90 FD |                    jmp     #p203
06854                 | 
06854                 | ''---------- all color modes without zoom
06854                 | 
06854     87 07 D8 FC | p251               rep  #3,cpl2
06858     7D 11 03 FB |                    rdlong  char,framebuf2
0685c     04 FA 06 F1 |                    add     framebuf2,#4
06860     88 BB C2 FC |                    xcont   m_lut2,char
06864                 |           
06864                 |  ''-----------------------------------------------------------------------------------------
06864                 | p203           ' getword  mb2,m_border,#0
06864     00 24 0F F2 |                 cmp      mb2, #0 wz
06868     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
0686c                 | 
0686c     EC FB 9F FD |                 jmp #p302
06870                 | 
06870                 | '' -------------------------------------- END of graph  line ---------------------------------
06870                 | 
06870                 | '' consts and vars
06870                 | 
06870     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
06874     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
06878     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
0687c     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
06880                 | 
06880     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
06884                 | 
06884                 | '------ these longs will be set by setmode function
06884                 | 
06884     00 00 00 00 | m_bs            long    0        'blanks before sync
06888     00 00 00 00 | m_sn            long    0        'sync
0688c     00 00 00 00 | m_bv            long    0        'blanks before visible
06890     00 00 00 00 | m_vi            long    0        'visible pixels #
06894     00 00 00 00 | m_border        long    0        'left/right borders
06898     00 00 00 00 | m_lut1          long    0        'characters
0689c     00 00 00 00 | i_vborder       long    0        'up/down borders
068a0     00 00 00 00 | i_upporch       long    0        'up porch lines
068a4     00 00 00 00 | i_vsync         long    0        'vsync lines
068a8     00 00 00 00 | i_downporch     long    0        'down porch lines
068ac     00 00 00 00 | i_modenum       long    0        'mode #
068b0     00 00 00 00 | i_cpl           long    0        'chars/longs per line
068b4     00 00 00 00 | i_lines         long    0        'scanlines #
068b8     00 00 00 00 | i_clock         long    0
068bc     00 00 00 00 | i_hubset        long    0
068c0     00 00 00 00 | i_totalvis      long    0
068c4                 | 
068c4                 | '-------------------------------------
068c4                 | 
068c4     00 00 00 00 | m_lut2          long    0
068c8                 | 
068c8                 | colordepth
068c8     00 00 00 00 | linestart       long    0
068cc     00 00 00 00 | linenum         long    0
068d0     00 01 00 00 | lutaddr         long    256
068d4                 | 
068d4     0E 00 00 00 | cursorsh        long    14
068d8     00 00 00 00 | frames          long    0
068dc     00 00 00 00 | cursorx         long    0
068e0     00 00 00 00 | cursory         long    0
068e4     00 00 00 00 | cursorpos       long    0
068e8     00 00 00 00 | cursorpos2      long    0
068ec     00 00 00 00 | fontstart       long    0
068f0     00 00 00 00 | border2         long 0
068f4     00 00 81 70 | lutiv           long $70810000
068f8     00 00 88 00 | lutt1           long $00880000
068fc     00 00 80 00 | lutg1           long $00800000
06900     00 00 80 10 | lutg2           long $10800000
06904     00 00 80 20 | lutg4           long $20800000
06908     00 00 80 30 | lutg8           long $30800000
0690c     00 00 00 00 | framebuf        long 0
06910     00 00 00 00 | fontbuf         long 0
06914     00 00 00 00 | borderptr       long 0
06918     00 00 00 00 | vblankptr       long 0
0691c     00 00 00 00 | cursorptr       long 0
06920     00 00 00 00 | modeptr         long 0
06924     00 00 00 00 | paletteptr      long 0
06928     00 00 00 00 | dlptr           long 0
0692c                 | fontnumptr      res     1
0692c                 | fontnumptr      res     1
0692c                 | hbase           res     1
0692c                 | hbase           res     1
0692c                 | borderptr2      res     1
0692c                 | borderptr2      res     1
0692c                 | dlptr2 res 1
0692c                 | dlptr2 res 1
0692c                 | dl              res 1
0692c                 | dl              res 1
0692c                 | ii              res     1
0692c                 | ii              res     1
0692c                 | framebuf2       res     1
0692c                 | framebuf2       res     1
0692c                 | hsync0          res     1
0692c                 | hsync0          res     1
0692c                 | hsync1          res     1
0692c                 | hsync1          res     1
0692c                 | fontline        res     1
0692c                 | fontline        res     1
0692c                 | t1              res     1
0692c                 | t1              res     1
0692c                 | t2              res     1
0692c                 | t2              res     1
0692c                 | t3 res 1
0692c                 | t3 res 1
0692c                 | t4 res 1
0692c                 | t4 res 1
0692c                 | t5 res 1
0692c                 | t5 res 1
0692c                 | skippattern res 1
0692c                 | skippattern res 1
0692c                 | cpl2 res 1
0692c                 | cpl2 res 1
0692c                 | char            res     1
0692c                 | char            res     1
0692c                 | backcolor       res     1
0692c                 | backcolor       res     1
0692c                 | charcolor       res     1
0692c                 | charcolor       res     1
0692c                 | zoom res 1
0692c                 | zoom res 1
0692c     00 00 00 00 | rcnt long 0 'dl repeat count
06930     00 00 00 00 | rcnt2 long 0
06934     00 00 00 00 | rcnt2a long 0
06938     00 00 00 00 | roffset long 0
0693c     00 00 00 00 | rdl long 0  'dl repeat line
06940     00 00 00 00 | dlc long 0 'dl command
06944     00 00 00 00 | mb2 long 0
06948     00 00 00 00 | aend             long 0
0694c                 |                 fit     496                     '
0694c                 | __system__dat_
0694c     00 00 00 00 
06950     00 00 00 00 | 	byte	$00[8]
06954     03 00 00 00 
06958     00 00 00 00 
0695c     00 00 00 00 
06960     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06964     00 00 00 00 
06968     00 00 00 00 
0696c     00 00 00 00 | 	byte	$00[12]
06970     05 00 00 00 
06974     00 00 00 00 
06978     00 00 00 00 
0697c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06980     48 6B 00 00 | 	long	@@@__system__dat_ + 508
06984     50 6B 00 00 | 	long	@@@__system__dat_ + 516
06988     00 00 00 00 | 	byte	$00, $00, $00, $00
0698c     58 6B 00 00 | 	long	@@@__system__dat_ + 524
06990     60 6B 00 00 | 	long	@@@__system__dat_ + 532
06994     00 00 00 00 
06998     00 00 00 00 | 	byte	$00[8]
0699c     01 00 00 00 
069a0     06 00 00 00 
069a4     00 00 00 00 
069a8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
069ac     00 00 00 00 | 	byte	$00, $00, $00, $00
069b0     68 6B 00 00 | 	long	@@@__system__dat_ + 540
069b4     70 6B 00 00 | 	long	@@@__system__dat_ + 548
069b8     00 00 00 00 | 	byte	$00, $00, $00, $00
069bc     78 6B 00 00 | 	long	@@@__system__dat_ + 556
069c0     80 6B 00 00 | 	long	@@@__system__dat_ + 564
069c4     00 00 00 00 
069c8     00 00 00 00 | 	byte	$00[8]
069cc     01 00 00 00 
069d0     06 00 00 00 
069d4     00 00 00 00 
069d8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
069dc     00 00 00 00 | 	byte	$00, $00, $00, $00
069e0     88 6B 00 00 | 	long	@@@__system__dat_ + 572
069e4     90 6B 00 00 | 	long	@@@__system__dat_ + 580
069e8     00 00 00 00 | 	byte	$00, $00, $00, $00
069ec     98 6B 00 00 | 	long	@@@__system__dat_ + 588
069f0     A0 6B 00 00 | 	long	@@@__system__dat_ + 596
069f4     00 00 00 00 
      ...             
06b44     00 00 00 00 
06b48     00 00 00 00 | 	byte	$00[344]
06b4c     C0 21 00 00 | 	long	@@@__system___tx
06b50     00 00 00 00 | 	byte	$00, $00, $00, $00
06b54     08 22 00 00 | 	long	@@@__system___rx
06b58     00 00 00 00 | 	byte	$00, $00, $00, $00
06b5c     44 3E 00 00 | 	long	@@@__system___rxtxioctl_0179
06b60     00 00 00 00 | 	byte	$00, $00, $00, $00
06b64     BC 3E 00 00 | 	long	@@@__system____dummy_flush_0180
06b68     00 00 00 00 | 	byte	$00, $00, $00, $00
06b6c     C0 21 00 00 | 	long	@@@__system___tx
06b70     00 00 00 00 | 	byte	$00, $00, $00, $00
06b74     08 22 00 00 | 	long	@@@__system___rx
06b78     00 00 00 00 | 	byte	$00, $00, $00, $00
06b7c     44 3E 00 00 | 	long	@@@__system___rxtxioctl_0179
06b80     00 00 00 00 | 	byte	$00, $00, $00, $00
06b84     BC 3E 00 00 | 	long	@@@__system____dummy_flush_0180
06b88     00 00 00 00 | 	byte	$00, $00, $00, $00
06b8c     C0 21 00 00 | 	long	@@@__system___tx
06b90     00 00 00 00 | 	byte	$00, $00, $00, $00
06b94     08 22 00 00 | 	long	@@@__system___rx
06b98     00 00 00 00 | 	byte	$00, $00, $00, $00
06b9c     44 3E 00 00 | 	long	@@@__system___rxtxioctl_0179
06ba0     00 00 00 00 | 	byte	$00, $00, $00, $00
06ba4     BC 3E 00 00 | 	long	@@@__system____dummy_flush_0180
06ba8     00 00 00 00 | 	byte	$00, $00, $00, $00
06bac                 | __heap_base
06bac     00 00 00 00 
      ...             
07bac     00 00 00 00 
07bb0     00 00 00 00 | 	long	0[1026]
07bb4                 | objmem
07bb4     00 00 00 00 | 	long	0[1]
07bb8 112             | 	org	COG_BSS_START
07bb8 112             | _var01
07bb8 112             | 	res	1
07bb8 113             | _var02
07bb8 113             | 	res	1
07bb8 114             | _var03
07bb8 114             | 	res	1
07bb8 115             | _var04
07bb8 115             | 	res	1
07bb8 116             | _var05
07bb8 116             | 	res	1
07bb8 117             | _var06
07bb8 117             | 	res	1
07bb8 118             | _var07
07bb8 118             | 	res	1
07bb8 119             | _var08
07bb8 119             | 	res	1
07bb8 11a             | _var09
07bb8 11a             | 	res	1
07bb8 11b             | _var10
07bb8 11b             | 	res	1
07bb8 11c             | _var11
07bb8 11c             | 	res	1
07bb8 11d             | _var12
07bb8 11d             | 	res	1
07bb8 11e             | _var13
07bb8 11e             | 	res	1
07bb8 11f             | _var14
07bb8 11f             | 	res	1
07bb8 120             | _var15
07bb8 120             | 	res	1
07bb8 121             | _var16
07bb8 121             | 	res	1
07bb8 122             | arg01
07bb8 122             | 	res	1
07bb8 123             | arg02
07bb8 123             | 	res	1
07bb8 124             | arg03
07bb8 124             | 	res	1
07bb8 125             | arg04
07bb8 125             | 	res	1
07bb8 126             | local01
07bb8 126             | 	res	1
07bb8 127             | local02
07bb8 127             | 	res	1
07bb8 128             | local03
07bb8 128             | 	res	1
07bb8 129             | local04
07bb8 129             | 	res	1
07bb8 12a             | local05
07bb8 12a             | 	res	1
07bb8 12b             | local06
07bb8 12b             | 	res	1
07bb8 12c             | local07
07bb8 12c             | 	res	1
07bb8 12d             | local08
07bb8 12d             | 	res	1
07bb8 12e             | local09
07bb8 12e             | 	res	1
07bb8 12f             | local10
07bb8 12f             | 	res	1
07bb8 130             | local11
07bb8 130             | 	res	1
07bb8 131             | local12
07bb8 131             | 	res	1
07bb8 132             | local13
07bb8 132             | 	res	1
07bb8 133             | local14
07bb8 133             | 	res	1
07bb8 134             | local15
07bb8 134             | 	res	1
07bb8 135             | local16
07bb8 135             | 	res	1
07bb8 136             | local17
07bb8 136             | 	res	1
07bb8 137             | local18
07bb8 137             | 	res	1
07bb8 138             | local19
07bb8 138             | 	res	1
07bb8 139             | local20
07bb8 139             | 	res	1
07bb8 13a             | local21
07bb8 13a             | 	res	1
07bb8 13b             | local22
07bb8 13b             | 	res	1
07bb8 13c             | local23
07bb8 13c             | 	res	1
07bb8 13d             | local24
07bb8 13d             | 	res	1
07bb8 13e             | local25
07bb8 13e             | 	res	1
07bb8 13f             | local26
07bb8 13f             | 	res	1
07bb8 140             | local27
07bb8 140             | 	res	1
07bb8 141             | local28
07bb8 141             | 	res	1
07bb8 142             | local29
07bb8 142             | 	res	1
07bb8 143             | local30
07bb8 143             | 	res	1
07bb8 144             | local31
07bb8 144             | 	res	1
07bb8 145             | local32
07bb8 145             | 	res	1
07bb8 146             | local33
07bb8 146             | 	res	1
07bb8 147             | local34
07bb8 147             | 	res	1
07bb8 148             | local35
07bb8 148             | 	res	1
07bb8 149             | local36
07bb8 149             | 	res	1
07bb8 14a             | local37
07bb8 14a             | 	res	1
07bb8 14b             | local38
07bb8 14b             | 	res	1
07bb8 14c             | local39
07bb8 14c             | 	res	1
07bb8 14d             | local40
07bb8 14d             | 	res	1
07bb8 14e             | local41
07bb8 14e             | 	res	1
07bb8 14f             | local42
07bb8 14f             | 	res	1
07bb8 150             | local43
07bb8 150             | 	res	1
07bb8 151             | local44
07bb8 151             | 	res	1
07bb8 152             | local45
07bb8 152             | 	res	1
07bb8 153             | local46
07bb8 153             | 	res	1
07bb8 154             | local47
07bb8 154             | 	res	1
07bb8 155             | local48
07bb8 155             | 	res	1
07bb8 156             | local49
07bb8 156             | 	res	1
07bb8 157             | local50
07bb8 157             | 	res	1
07bb8 158             | local51
07bb8 158             | 	res	1
07bb8 159             | local52
07bb8 159             | 	res	1
07bb8 15a             | local53
07bb8 15a             | 	res	1
07bb8 15b             | local54
07bb8 15b             | 	res	1
07bb8 15c             | local55
07bb8 15c             | 	res	1
07bb8 15d             | local56
07bb8 15d             | 	res	1
07bb8 15e             | local57
07bb8 15e             | 	res	1
07bb8 15f             | local58
07bb8 15f             | 	res	1
07bb8 160             | local59
07bb8 160             | 	res	1
07bb8 161             | local60
07bb8 161             | 	res	1
07bb8 162             | local61
07bb8 162             | 	res	1
07bb8 163             | local62
07bb8 163             | 	res	1
07bb8 164             | local63
07bb8 164             | 	res	1
07bb8 165             | local64
07bb8 165             | 	res	1
07bb8 166             | local65
07bb8 166             | 	res	1
07bb8 167             | local66
07bb8 167             | 	res	1
07bb8 168             | local67
07bb8 168             | 	res	1
07bb8 169             | local68
07bb8 169             | 	res	1
07bb8 16a             | local69
07bb8 16a             | 	res	1
07bb8 16b             | local70
07bb8 16b             | 	res	1
07bb8 16c             | local71
07bb8 16c             | 	res	1
07bb8 16d             | local72
07bb8 16d             | 	res	1
07bb8 16e             | local73
07bb8 16e             | 	res	1
07bb8 16f             | local74
07bb8 16f             | 	res	1
07bb8 170             | local75
07bb8 170             | 	res	1
07bb8 171             | local76
07bb8 171             | 	res	1
07bb8 172             | local77
07bb8 172             | 	res	1
07bb8 173             | local78
07bb8 173             | 	res	1
07bb8 174             | local79
07bb8 174             | 	res	1
07bb8 175             | local80
07bb8 175             | 	res	1
07bb8 176             | muldiva_
07bb8 176             | 	res	1
07bb8 177             | muldivb_
07bb8 177             | 	res	1
07bb8 178             | 	fit	480
07bb8 178             | 
