00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.p2asm"
00000                 | con
00000                 | 	_clkfreq = 320000000
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 24 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 02 00 00 FF 
00414 004 A4 F0 07 F1 | 	add	ptra, ##1188
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 07 80 80 FF 
00428 009 00 F0 67 FD | 	hubset	##16781304
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 07 80 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##16781307
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 68 89 89 FF 
00448 011 14 00 6C FC | 	wrlong	##320000000, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 58 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 4A 62 FD | 	cogid	arg01
00614 084 03 4A 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 25 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 4B 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 4D 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 4F 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 51 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 24 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 4E 56 F0 |         shr	arg03, #1 wc
00688 0a1 25 4D 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 4A 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 4C FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 4E 56 F0 |         shr	arg03, #1 wc
00698 0a5 25 4D 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 4A 06 C1 |  if_c   add	arg01, #2
006a0 0a7 26 4D 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 25 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 4E 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 27 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 4C 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 55 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 55 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 85 09 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0A 63 FD |        getqx   muldivb_
00740 0cf 19 08 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 84 09 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 85 0B 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 84 09 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 85 0B 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 24 06 F6 |     mov result1, #0
00778 0dd 00 26 06 F6 |     mov result2, #0
0077c 0de 25 07 02 F6 |     mov abortchain, arg01
00780 0df 25 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 4A 06 F1 |     add arg01, #4
00788 0e1 25 F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 4A 06 F1 |     add arg01, #4
00790 0e3 25 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 4A 06 F1 |     add arg01, #4
00798 0e5 25 B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 26 4B 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 25 F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 4A 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 4A 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 26 25 02 F6 |     mov result1, arg02
007d4 0f4 01 26 06 F6 |     mov result2, #1
007d8 0f5 25 4D 02 FB |     rdlong arg02, arg01
007dc 0f6 04 4A 06 F1 |     add arg01, #4
007e0 0f7 25 F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 4A 06 F1 |     add arg01, #4
007e8 0f9 25 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 4A 06 F1 |     add arg01, #4
007f0 0fb 25 B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 4A 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 4E 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 38 82 00 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 40 92 00 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 B4 58 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 FC 57 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a D8 7F 00 00 | 	long	@__system__dat_
00830 10b             | ptr__hng030rm_spin2_dat__
00830 10b 74 5B 00 00 | 	long	@_hng030rm_spin2_dat_
00834 10c             | ptr__hng030rm_spin2_putchar_
00834 10c B0 23 00 00 | 	long	@_hng030rm_spin2_putchar
00838 10d             | ptr__hng030rm_spin2_putpixel1_
00838 10d 34 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
0083c 10e             | ptr__hng030rm_spin2_putpixel2_
0083c 10e 1C 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00840 10f             | ptr__hng030rm_spin2_putpixel4_
00840 10f F4 20 00 00 | 	long	@_hng030rm_spin2_putpixel4
00844 110             | ptr__hng030rm_spin2_putpixel8_
00844 110 CC 21 00 00 | 	long	@_hng030rm_spin2_putpixel8
00848 111             | ptr__retrocog_spin2_serialcog_
00848 111 48 30 00 00 | 	long	@_retrocog_spin2_serialcog
0084c 112             | result1
0084c 112 00 00 00 00 | 	long	0
00850 113             | result2
00850 113 00 00 00 00 | 	long	0
00854 114             | result3
00854 114 00 00 00 00 | 	long	0
00858 115             | COG_BSS_START
00858 115             | 	fit	480
00858                 | 	orgh
00858                 | hubentry
00858                 | 
00858                 | _program
00858     5A 5A 05 F6 | 	mov	COUNT_, #90
0085c     B0 00 A0 FD | 	call	#pushregs_
00860     02 00 00 FF 
00864     84 0E 06 F1 | 	add	objptr, ##1156
00868     07 01 68 FC | 	wrlong	#0, objptr
0086c     40 54 06 F6 | 	mov	local01, #64
00870     02 00 00 FF 
00874     58 0E 86 F1 | 	sub	objptr, ##1112
00878     07 57 02 F6 | 	mov	local02, objptr
0087c                 | ' 
0087c                 | ' ' initialize pointers and variables
0087c                 | ' 
0087c                 | ' border_ptr:=@bordercolor
0087c     24 0E 86 F1 | 	sub	objptr, #36
00880     07 57 62 FC | 	wrlong	local02, objptr
00884     08 00 00 FF 
00888     00 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
0088c                 | ' font_ptr:=@st_font
0088c     04 0E 86 F1 | 	sub	objptr, #4
00890     07 17 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
00894                 | ' hdmibase:=base
00894     20 0E 06 F1 | 	add	objptr, #32
00898     07 01 68 FC | 	wrlong	#0, objptr
0089c     24 0E 86 F1 | 	sub	objptr, #36
008a0     0D 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
008a4                 | ' p1:=@putpixel1
008a4     07 4B 02 F6 | 	mov	arg01, objptr
008a8     08 00 00 FF 
008ac     00 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
008b0     C0 2F B0 FD | 	call	#__system___make_methodptr
008b4     12 59 02 F6 | 	mov	local03, result1
008b8     DC 0E 06 F1 | 	add	objptr, #220
008bc     07 59 62 FC | 	wrlong	local03, objptr
008c0     DC 0E 86 F1 | 	sub	objptr, #220
008c4     0E 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
008c8                 | ' p2:=@putpixel2
008c8     07 4B 02 F6 | 	mov	arg01, objptr
008cc     A4 2F B0 FD | 	call	#__system___make_methodptr
008d0     12 59 02 F6 | 	mov	local03, result1
008d4     E0 0E 06 F1 | 	add	objptr, #224
008d8     07 59 62 FC | 	wrlong	local03, objptr
008dc     E0 0E 86 F1 | 	sub	objptr, #224
008e0     0F 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
008e4                 | ' p4:=@putpixel4
008e4     07 4B 02 F6 | 	mov	arg01, objptr
008e8     88 2F B0 FD | 	call	#__system___make_methodptr
008ec     12 59 02 F6 | 	mov	local03, result1
008f0     E4 0E 06 F1 | 	add	objptr, #228
008f4     07 59 62 FC | 	wrlong	local03, objptr
008f8     E4 0E 86 F1 | 	sub	objptr, #228
008fc     10 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00900                 | ' p8:=@putpixel8
00900     07 4B 02 F6 | 	mov	arg01, objptr
00904     6C 2F B0 FD | 	call	#__system___make_methodptr
00908     12 59 02 F6 | 	mov	local03, result1
0090c     E8 0E 06 F1 | 	add	objptr, #232
00910     07 59 62 FC | 	wrlong	local03, objptr
00914     E8 0E 86 F1 | 	sub	objptr, #232
00918                 | ' 
00918                 | ' 
00918                 | ' ' the mode has to be set here to enable computing the buffer length
00918                 | ' 
00918                 | ' setmode(mode)
00918     40 4A 06 F6 | 	mov	arg01, #64
0091c     E8 1C B0 FD | 	call	#_hng030rm_spin2_setmode
00920     40 0E 06 F1 | 	add	objptr, #64
00924     07 5B 02 F6 | 	mov	local04, objptr
00928                 | ' 
00928                 | ' vblank_ptr:=@vblank
00928     34 0E 86 F1 | 	sub	objptr, #52
0092c     07 5B 62 FC | 	wrlong	local04, objptr
00930     28 0E 06 F1 | 	add	objptr, #40
00934     07 5D 02 F6 | 	mov	local05, objptr
00938                 | ' cursor_ptr:=@cursor_x
00938     24 0E 86 F1 | 	sub	objptr, #36
0093c     07 5D 62 FC | 	wrlong	local05, objptr
00940     88 0E 06 F1 | 	add	objptr, #136
00944     07 5F 02 F6 | 	mov	local06, objptr
00948                 | ' 
00948                 | ' fontnum_ptr:=@fontnum
00948     78 0E 86 F1 | 	sub	objptr, #120
0094c     07 5F 62 FC | 	wrlong	local06, objptr
00950                 | ' 
00950                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
00950     78 0E 06 F1 | 	add	objptr, #120
00954     07 01 68 FC | 	wrlong	#0, objptr
00958     1C 0E 06 F1 | 	add	objptr, #28
0095c     07 4B 02 F6 | 	mov	arg01, objptr
00960     B4 0E 86 F1 | 	sub	objptr, #180
00964     0F 00 00 FF 
00968     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
0096c     0B 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00970     0F 00 00 FF 
00974     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
00978                 | ' bytemove(@colors,@vgacolors,16)
00978     10 4E 06 F6 | 	mov	arg03, #16
0097c     CC 2D B0 FD | 	call	#__system____builtin_memmove
00980                 | ' 
00980                 | ' ' initialize a cursor
00980                 | ' 
00980                 | ' cursor_x:=0
00980     34 0E 06 F1 | 	add	objptr, #52
00984     07 01 48 FC | 	wrbyte	#0, objptr
00988                 | ' cursor_y:=0
00988     01 0E 06 F1 | 	add	objptr, #1
0098c     07 01 48 FC | 	wrbyte	#0, objptr
00990                 | ' cursor_sh:=14
00990     01 0E 06 F1 | 	add	objptr, #1
00994     07 1D 48 FC | 	wrbyte	#14, objptr
00998     36 0E 86 F1 | 	sub	objptr, #54
0099c                 | ' 
0099c                 | ' 
0099c                 | ' ' start the cog
0099c                 | ' 
0099c                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
0099c     0F 00 00 FF 
009a0     68 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
009a4     0B 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009a8     0F 00 00 FF 
009ac     68 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
009b0     07 4F 02 F6 | 	mov	arg03, objptr
009b4     10 4A 06 F6 | 	mov	arg01, #16
009b8     28 4E 62 FD | 	setq	arg03
009bc     26 4B F2 FC | 	coginit	arg01, arg02 wc
009c0     01 4A 66 C6 |  if_b	neg	arg01, #1
009c4     25 25 02 F6 | 	mov	result1, arg01
009c8     12 61 02 F6 | 	mov	local07, result1
009cc     28 0E 06 F1 | 	add	objptr, #40
009d0     07 61 62 FC | 	wrlong	local07, objptr
009d4     28 0E 86 F1 | 	sub	objptr, #40
009d8                 | ' waitms(20)
009d8     14 4A 06 F6 | 	mov	arg01, #20
009dc     D0 2F B0 FD | 	call	#__system___waitms
009e0                 | ' 
009e0                 | ' ' clear the screen and set the colors to green on black
009e0                 | ' 
009e0                 | ' cls(c_green,c_black)
009e0     C7 4A 06 F6 | 	mov	arg01, #199
009e4     00 4C 06 F6 | 	mov	arg02, #0
009e8     88 18 B0 FD | 	call	#_hng030rm_spin2_cls
009ec                 | ' setbordercolor(0,0,128)
009ec     00 4A 06 F6 | 	mov	arg01, #0
009f0     00 4C 06 F6 | 	mov	arg02, #0
009f4     80 4E 06 F6 | 	mov	arg03, #128
009f8     54 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
009fc                 | ' setwritecolors(c_green,c_black)
009fc     00 4C 06 F6 | 	mov	arg02, #0
00a00                 | ' 
00a00                 | ' 
00a00                 | ' write_color:=ff
00a00     38 0E 06 F1 | 	add	objptr, #56
00a04     07 8F 69 FC | 	wrlong	#199, objptr
00a08                 | ' write_background:=bb
00a08     04 0E 06 F1 | 	add	objptr, #4
00a0c     07 01 68 FC | 	wrlong	#0, objptr
00a10                 | ' 
00a10                 | ' return cog
00a10     14 0E 86 F1 | 	sub	objptr, #20
00a14     07 25 02 FB | 	rdlong	result1, objptr
00a18     28 0E 86 F1 | 	sub	objptr, #40
00a1c     00 4A 06 F6 | 	mov	arg01, #0
00a20     00 4E 06 F6 | 	mov	arg03, #0
00a24     28 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a28                 | ' v030.start(mode,pin)
00a28                 | ' v030.setbordercolor(0,0,0)
00a28                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a28     07 4B 02 F6 | 	mov	arg01, objptr
00a2c     0C 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a30     40 2E B0 FD | 	call	#__system___make_methodptr
00a34     00 28 06 F6 | 	mov	result3, #0
00a38     00 26 06 F6 | 	mov	result2, #0
00a3c     12 4D 02 F6 | 	mov	arg02, result1
00a40     00 4E 06 F6 | 	mov	arg03, #0
00a44     00 50 06 F6 | 	mov	arg04, #0
00a48     00 4A 06 F6 | 	mov	arg01, #0
00a4c     DC 2F B0 FD | 	call	#__system___basic_open
00a50     EC 0E 06 F1 | 	add	objptr, #236
00a54                 | ' 
00a54                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00a54     07 63 02 F6 | 	mov	local08, objptr
00a58     01 00 00 FF 
00a5c     18 0F 06 F1 | 	add	objptr, ##792
00a60     07 65 02 F6 | 	mov	local09, objptr
00a64     32 63 62 FC | 	wrlong	local08, local09
00a68     04 64 06 F1 | 	add	local09, #4
00a6c     32 23 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local09
00a70     07 4F 02 F6 | 	mov	arg03, objptr
00a74     10 4A 06 F6 | 	mov	arg01, #16
00a78     28 4E 62 FD | 	setq	arg03
00a7c     04 4B F2 FC | 	coginit	arg01, entryptr__ wc
00a80     01 4A 66 C6 |  if_b	neg	arg01, #1
00a84     25 25 02 F6 | 	mov	result1, arg01
00a88     02 00 00 FF 
00a8c     04 0E 86 F1 | 	sub	objptr, ##1028
00a90     9A 4A 06 F6 | 	mov	arg01, #154
00a94     93 4C 06 F6 | 	mov	arg02, #147
00a98     D8 17 B0 FD | 	call	#_hng030rm_spin2_cls
00a9c                 | ' #line 2 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.bas"
00a9c                 | ' 
00a9c                 | ' e=0 ' this strange thing makes the program run in full optimization
00a9c                 | ' 
00a9c                 | ' startvideo 
00a9c                 | ' rm.start
00a9c                 | ' 
00a9c                 | ' cls
00a9c                 | ' print "Basic test"
00a9c     00 4A 06 F6 | 	mov	arg01, #0
00aa0     E0 42 B0 FD | 	call	#__system___getiolock_0102
00aa4     12 4B 02 F6 | 	mov	arg01, result1
00aa8     08 2E B0 FD | 	call	#__system___lockmem
00aac     00 24 06 F6 | 	mov	result1, #0
00ab0     2C 00 00 FF 
00ab4     3E 4D 06 F6 | 	mov	arg02, ##@LR__0303
00ab8     00 4A 06 F6 | 	mov	arg01, #0
00abc     00 4E 06 F6 | 	mov	arg03, #0
00ac0     68 30 B0 FD | 	call	#__system___basic_print_string
00ac4     12 67 02 F6 | 	mov	local10, result1
00ac8     00 68 06 F6 | 	mov	local11, #0
00acc     00 4A 06 F6 | 	mov	arg01, #0
00ad0     0A 4C 06 F6 | 	mov	arg02, #10
00ad4     00 4E 06 F6 | 	mov	arg03, #0
00ad8     04 30 B0 FD | 	call	#__system___basic_print_char
00adc     01 24 06 F6 | 	mov	result1, #1
00ae0     01 6A 06 F6 | 	mov	local12, #1
00ae4     00 6C 06 F6 | 	mov	local13, #0
00ae8     00 4A 06 F6 | 	mov	arg01, #0
00aec     94 42 B0 FD | 	call	#__system___getiolock_0102
00af0     12 01 68 FC | 	wrlong	#0, result1
00af4     00 24 06 F6 | 	mov	result1, #0
00af8     00 6E 06 F6 | 	mov	local14, #0
00afc                 | ' print
00afc     00 4A 06 F6 | 	mov	arg01, #0
00b00     80 42 B0 FD | 	call	#__system___getiolock_0102
00b04     12 4B 02 F6 | 	mov	arg01, result1
00b08     A8 2D B0 FD | 	call	#__system___lockmem
00b0c     00 24 06 F6 | 	mov	result1, #0
00b10     00 70 06 F6 | 	mov	local15, #0
00b14     00 4A 06 F6 | 	mov	arg01, #0
00b18     0A 4C 06 F6 | 	mov	arg02, #10
00b1c     00 4E 06 F6 | 	mov	arg03, #0
00b20     BC 2F B0 FD | 	call	#__system___basic_print_char
00b24     01 24 06 F6 | 	mov	result1, #1
00b28     01 72 06 F6 | 	mov	local16, #1
00b2c     00 74 06 F6 | 	mov	local17, #0
00b30     00 4A 06 F6 | 	mov	arg01, #0
00b34     4C 42 B0 FD | 	call	#__system___getiolock_0102
00b38     12 01 68 FC | 	wrlong	#0, result1
00b3c     00 24 06 F6 | 	mov	result1, #0
00b40     00 76 06 F6 | 	mov	local18, #0
00b44                 | ' 
00b44                 | ' do
00b44                 | LR__0001
00b44                 | '   if lpeek($30)<>0 then
00b44                 | ' asm
00b44     30 24 0E FB | 	rdlong	result1, #48 wz
00b48                 | ' return r
00b48     F0 03 90 AD |  if_e	jmp	#LR__0013
00b4c                 | ' asm
00b4c     33 24 C6 FA | 	rdbyte	result1, #51
00b50                 | ' return r
00b50     12 79 02 F6 | 	mov	local19, result1
00b54     3C 7B 02 F6 | 	mov	local20, local19
00b58     07 7A 46 F7 | 	zerox	local20, #7
00b5c     02 00 00 FF 
00b60     88 0E 06 F1 | 	add	objptr, ##1160
00b64     07 7B 62 FC | 	wrlong	local20, objptr
00b68                 | '     cmd=peek($33)
00b68                 | '     if cmd<>0 then
00b68     07 7B 0A FB | 	rdlong	local20, objptr wz
00b6c                 | ' asm
00b6c     32 7C C6 5A |  if_ne	rdbyte	local21, #50
00b70                 | ' return r
00b70                 | ' asm
00b70     31 24 C6 5A |  if_ne	rdbyte	result1, #49
00b74                 | ' return r
00b74     12 7F 02 56 |  if_ne	mov	local22, result1
00b78     00 4C 06 F6 | 	mov	arg02, #0
00b7c                 | ' asm
00b7c     30 00 6C FC | 	wrlong	#0, #48
00b80                 | '     lpoke $30,0 
00b80                 | '     if cmd=$87 then print "Keyboard key released, scancode "; b11 
00b80     07 7B 02 FB | 	rdlong	local20, objptr
00b84     02 00 00 FF 
00b88     88 0E 86 F1 | 	sub	objptr, ##1160
00b8c     87 7A 0E F2 | 	cmp	local20, #135 wz
00b90     A0 00 90 5D |  if_ne	jmp	#LR__0002
00b94     3E 81 02 F6 | 	mov	local23, local21
00b98     07 80 46 F7 | 	zerox	local23, #7
00b9c     00 4A 06 F6 | 	mov	arg01, #0
00ba0     E0 41 B0 FD | 	call	#__system___getiolock_0102
00ba4     12 4B 02 F6 | 	mov	arg01, result1
00ba8     08 2D B0 FD | 	call	#__system___lockmem
00bac     00 24 06 F6 | 	mov	result1, #0
00bb0     00 70 06 F6 | 	mov	local15, #0
00bb4     2C 00 00 FF 
00bb8     49 73 06 F6 | 	mov	local16, ##@LR__0304
00bbc     39 75 02 F6 | 	mov	local17, local16
00bc0     00 76 06 F6 | 	mov	local18, #0
00bc4     00 4A 06 F6 | 	mov	arg01, #0
00bc8     3A 4D 02 F6 | 	mov	arg02, local17
00bcc     00 4E 06 F6 | 	mov	arg03, #0
00bd0     58 2F B0 FD | 	call	#__system___basic_print_string
00bd4     12 67 02 F6 | 	mov	local10, result1
00bd8     00 68 06 F6 | 	mov	local11, #0
00bdc     40 6B 02 F6 | 	mov	local12, local23
00be0     00 6C 06 F6 | 	mov	local13, #0
00be4     0A 6E 06 F6 | 	mov	local14, #10
00be8     00 4A 06 F6 | 	mov	arg01, #0
00bec     35 4D 02 F6 | 	mov	arg02, local12
00bf0     00 4E 06 F6 | 	mov	arg03, #0
00bf4     0A 50 06 F6 | 	mov	arg04, #10
00bf8     BC 2F B0 FD | 	call	#__system___basic_print_unsigned
00bfc     12 83 02 F6 | 	mov	local24, result1
00c00     00 84 06 F6 | 	mov	local25, #0
00c04     00 4A 06 F6 | 	mov	arg01, #0
00c08     0A 4C 06 F6 | 	mov	arg02, #10
00c0c     00 4E 06 F6 | 	mov	arg03, #0
00c10     CC 2E B0 FD | 	call	#__system___basic_print_char
00c14     01 24 06 F6 | 	mov	result1, #1
00c18     01 86 06 F6 | 	mov	local26, #1
00c1c     00 88 06 F6 | 	mov	local27, #0
00c20     00 4A 06 F6 | 	mov	arg01, #0
00c24     5C 41 B0 FD | 	call	#__system___getiolock_0102
00c28     12 01 68 FC | 	wrlong	#0, result1
00c2c     00 24 06 F6 | 	mov	result1, #0
00c30     00 8A 06 F6 | 	mov	local28, #0
00c34                 | LR__0002
00c34                 | '     if cmd=$88 then print "Keyboard key pressed,  scancode "; b11   ; ", charcode "; b12
00c34     02 00 00 FF 
00c38     88 0E 06 F1 | 	add	objptr, ##1160
00c3c     07 7B 02 FB | 	rdlong	local20, objptr
00c40     02 00 00 FF 
00c44     88 0E 86 F1 | 	sub	objptr, ##1160
00c48     88 7A 0E F2 | 	cmp	local20, #136 wz
00c4c     F8 00 90 5D |  if_ne	jmp	#LR__0003
00c50     3E 8D 02 F6 | 	mov	local29, local21
00c54     07 8C 46 F7 | 	zerox	local29, #7
00c58     3F 8F 02 F6 | 	mov	local30, local22
00c5c     07 8E 46 F7 | 	zerox	local30, #7
00c60     00 4A 06 F6 | 	mov	arg01, #0
00c64     1C 41 B0 FD | 	call	#__system___getiolock_0102
00c68     12 4B 02 F6 | 	mov	arg01, result1
00c6c     44 2C B0 FD | 	call	#__system___lockmem
00c70     00 24 06 F6 | 	mov	result1, #0
00c74     00 70 06 F6 | 	mov	local15, #0
00c78     2C 00 00 FF 
00c7c     6A 73 06 F6 | 	mov	local16, ##@LR__0305
00c80     39 75 02 F6 | 	mov	local17, local16
00c84     00 76 06 F6 | 	mov	local18, #0
00c88     00 4A 06 F6 | 	mov	arg01, #0
00c8c     3A 4D 02 F6 | 	mov	arg02, local17
00c90     00 4E 06 F6 | 	mov	arg03, #0
00c94     94 2E B0 FD | 	call	#__system___basic_print_string
00c98     12 67 02 F6 | 	mov	local10, result1
00c9c     00 68 06 F6 | 	mov	local11, #0
00ca0     46 6B 02 F6 | 	mov	local12, local29
00ca4     00 6C 06 F6 | 	mov	local13, #0
00ca8     0A 6E 06 F6 | 	mov	local14, #10
00cac     00 4A 06 F6 | 	mov	arg01, #0
00cb0     35 4D 02 F6 | 	mov	arg02, local12
00cb4     00 4E 06 F6 | 	mov	arg03, #0
00cb8     0A 50 06 F6 | 	mov	arg04, #10
00cbc     F8 2E B0 FD | 	call	#__system___basic_print_unsigned
00cc0     12 83 02 F6 | 	mov	local24, result1
00cc4     00 84 06 F6 | 	mov	local25, #0
00cc8     2C 00 00 FF 
00ccc     8B 87 06 F6 | 	mov	local26, ##@LR__0306
00cd0     43 89 02 F6 | 	mov	local27, local26
00cd4     00 8A 06 F6 | 	mov	local28, #0
00cd8     00 4A 06 F6 | 	mov	arg01, #0
00cdc     44 4D 02 F6 | 	mov	arg02, local27
00ce0     00 4E 06 F6 | 	mov	arg03, #0
00ce4     44 2E B0 FD | 	call	#__system___basic_print_string
00ce8     12 91 02 F6 | 	mov	local31, result1
00cec     00 92 06 F6 | 	mov	local32, #0
00cf0     47 95 02 F6 | 	mov	local33, local30
00cf4     00 96 06 F6 | 	mov	local34, #0
00cf8     0A 98 06 F6 | 	mov	local35, #10
00cfc     00 4A 06 F6 | 	mov	arg01, #0
00d00     4A 4D 02 F6 | 	mov	arg02, local33
00d04     00 4E 06 F6 | 	mov	arg03, #0
00d08     0A 50 06 F6 | 	mov	arg04, #10
00d0c     A8 2E B0 FD | 	call	#__system___basic_print_unsigned
00d10     12 9B 02 F6 | 	mov	local36, result1
00d14     00 9C 06 F6 | 	mov	local37, #0
00d18     00 4A 06 F6 | 	mov	arg01, #0
00d1c     0A 4C 06 F6 | 	mov	arg02, #10
00d20     00 4E 06 F6 | 	mov	arg03, #0
00d24     B8 2D B0 FD | 	call	#__system___basic_print_char
00d28     01 24 06 F6 | 	mov	result1, #1
00d2c     01 9E 06 F6 | 	mov	local38, #1
00d30     00 A0 06 F6 | 	mov	local39, #0
00d34     00 4A 06 F6 | 	mov	arg01, #0
00d38     48 40 B0 FD | 	call	#__system___getiolock_0102
00d3c     12 01 68 FC | 	wrlong	#0, result1
00d40     00 24 06 F6 | 	mov	result1, #0
00d44     00 A2 06 F6 | 	mov	local40, #0
00d48                 | LR__0003
00d48                 | '     if cmd=$89 then 
00d48     02 00 00 FF 
00d4c     88 0E 06 F1 | 	add	objptr, ##1160
00d50     07 7B 02 FB | 	rdlong	local20, objptr
00d54     02 00 00 FF 
00d58     88 0E 86 F1 | 	sub	objptr, ##1160
00d5c     89 7A 0E F2 | 	cmp	local20, #137 wz
00d60     D8 01 90 5D |  if_ne	jmp	#LR__0012
00d64                 | '       if b11=0 then 
00d64     3E 7B 02 F6 | 	mov	local20, local21
00d68     07 7A 4E F7 | 	zerox	local20, #7 wz
00d6c     70 00 90 5D |  if_ne	jmp	#LR__0004
00d70                 | '         print "Keyboard modifiers released"
00d70     00 4A 06 F6 | 	mov	arg01, #0
00d74     0C 40 B0 FD | 	call	#__system___getiolock_0102
00d78     12 4B 02 F6 | 	mov	arg01, result1
00d7c     34 2B B0 FD | 	call	#__system___lockmem
00d80     00 24 06 F6 | 	mov	result1, #0
00d84     00 70 06 F6 | 	mov	local15, #0
00d88     2C 00 00 FF 
00d8c     97 73 06 F6 | 	mov	local16, ##@LR__0307
00d90     39 75 02 F6 | 	mov	local17, local16
00d94     00 76 06 F6 | 	mov	local18, #0
00d98     00 4A 06 F6 | 	mov	arg01, #0
00d9c     3A 4D 02 F6 | 	mov	arg02, local17
00da0     00 4E 06 F6 | 	mov	arg03, #0
00da4     84 2D B0 FD | 	call	#__system___basic_print_string
00da8     12 67 02 F6 | 	mov	local10, result1
00dac     00 68 06 F6 | 	mov	local11, #0
00db0     00 4A 06 F6 | 	mov	arg01, #0
00db4     0A 4C 06 F6 | 	mov	arg02, #10
00db8     00 4E 06 F6 | 	mov	arg03, #0
00dbc     20 2D B0 FD | 	call	#__system___basic_print_char
00dc0     01 24 06 F6 | 	mov	result1, #1
00dc4     01 6A 06 F6 | 	mov	local12, #1
00dc8     00 6C 06 F6 | 	mov	local13, #0
00dcc     00 4A 06 F6 | 	mov	arg01, #0
00dd0     B0 3F B0 FD | 	call	#__system___getiolock_0102
00dd4     12 01 68 FC | 	wrlong	#0, result1
00dd8     00 6E 06 F6 | 	mov	local14, #0
00ddc     5C 01 90 FD | 	jmp	#LR__0011
00de0                 | LR__0004
00de0     3E A5 02 F6 | 	mov	local41, local21
00de4     07 A4 46 F7 | 	zerox	local41, #7
00de8                 | '         print "Keyboard modifiers pressed: ";hex$(b11)
00de8     00 4A 06 F6 | 	mov	arg01, #0
00dec     94 3F B0 FD | 	call	#__system___getiolock_0102
00df0     12 4B 02 F6 | 	mov	arg01, result1
00df4     BC 2A B0 FD | 	call	#__system___lockmem
00df8     00 24 06 F6 | 	mov	result1, #0
00dfc     00 70 06 F6 | 	mov	local15, #0
00e00     2C 00 00 FF 
00e04     B3 73 06 F6 | 	mov	local16, ##@LR__0308
00e08     39 75 02 F6 | 	mov	local17, local16
00e0c     00 76 06 F6 | 	mov	local18, #0
00e10     00 4A 06 F6 | 	mov	arg01, #0
00e14     3A 4D 02 F6 | 	mov	arg02, local17
00e18     00 4E 06 F6 | 	mov	arg03, #0
00e1c     0C 2D B0 FD | 	call	#__system___basic_print_string
00e20     12 67 02 F6 | 	mov	local10, result1
00e24     00 68 06 F6 | 	mov	local11, #0
00e28     52 6B 02 F6 | 	mov	local12, local41
00e2c     00 6C 06 F6 | 	mov	local13, #0
00e30     35 A7 02 F6 | 	mov	local42, local12
00e34     00 4C 06 F6 | 	mov	arg02, #0
00e38     10 4E 06 F6 | 	mov	arg03, #16
00e3c     00 A8 0E F6 | 	mov	local43, #0 wz
00e40     01 A8 06 F6 | 	mov	local43, #1
00e44     10 AA 06 F6 | 	mov	local44, #16
00e48     01 AC 06 F6 | 	mov	local45, #1
00e4c     E4 F1 9F FE | 	loc	pa,	#(@LR__0006-@LR__0005)
00e50     93 00 A0 FD | 	call	#FCACHE_LOAD_
00e54                 | LR__0005
00e54     00 AE 06 F6 | 	mov	local46, #0
00e58     53 AB 1A F2 | 	cmp	local44, local42 wcz
00e5c     01 AE 66 E6 |  if_be	neg	local46, #1
00e60     00 B0 06 F6 | 	mov	local47, #0
00e64     55 AD 1A F2 | 	cmp	local45, local44 wcz
00e68     01 B0 66 C6 |  if_b	neg	local47, #1
00e6c     58 AF CA F7 | 	test	local46, local47 wz
00e70     14 00 90 AD |  if_e	jmp	#LR__0007
00e74     55 AD 02 F6 | 	mov	local45, local44
00e78     10 AA 06 FD | 	qmul	local44, #16
00e7c     18 AA 62 FD | 	getqx	local44
00e80     01 A8 06 F1 | 	add	local43, #1
00e84     CC FF 9F FD | 	jmp	#LR__0005
00e88                 | LR__0006
00e88                 | LR__0007
00e88     20 A8 3E F3 | 	fle	local43, #32 wcz
00e8c     54 4B 02 F6 | 	mov	arg01, local43
00e90     02 4A 06 F1 | 	add	arg01, #2
00e94     DC 34 B0 FD | 	call	#__system___gc_alloc_managed
00e98     12 B3 02 F6 | 	mov	local48, result1
00e9c     54 B5 02 F6 | 	mov	local49, local43
00ea0     59 B5 02 F1 | 	add	local49, local48
00ea4     5A 01 48 FC | 	wrbyte	#0, local49
00ea8     90 F1 9F FE | 	loc	pa,	#(@LR__0009-@LR__0008)
00eac     93 00 A0 FD | 	call	#FCACHE_LOAD_
00eb0                 | LR__0008
00eb0     00 A8 1E F2 | 	cmp	local43, #0 wcz
00eb4     34 00 90 ED |  if_be	jmp	#LR__0010
00eb8     01 A8 86 F1 | 	sub	local43, #1
00ebc     53 09 03 F6 | 	mov	muldiva_, local42
00ec0     10 0A 07 F6 | 	mov	muldivb_, #16
00ec4     CC 00 A0 FD | 	call	#unsdivide_
00ec8     84 B7 02 F6 | 	mov	local50, muldiva_
00ecc     85 A7 02 F6 | 	mov	local42, muldivb_
00ed0     0A B6 1E F2 | 	cmp	local50, #10 wcz
00ed4     30 B6 06 C1 |  if_b	add	local50, #48
00ed8     37 B6 06 31 |  if_ae	add	local50, #55
00edc     54 B9 02 F6 | 	mov	local51, local43
00ee0     59 B9 02 F1 | 	add	local51, local48
00ee4     5C B7 42 FC | 	wrbyte	local50, local51
00ee8     C4 FF 9F FD | 	jmp	#LR__0008
00eec                 | LR__0009
00eec                 | LR__0010
00eec     59 25 02 F6 | 	mov	result1, local48
00ef0     12 6F 02 F6 | 	mov	local14, result1
00ef4     00 82 06 F6 | 	mov	local24, #0
00ef8     34 4B 02 F6 | 	mov	arg01, local11
00efc     37 4D 02 F6 | 	mov	arg02, local14
00f00     00 4E 06 F6 | 	mov	arg03, #0
00f04     24 2C B0 FD | 	call	#__system___basic_print_string
00f08     12 85 02 F6 | 	mov	local25, result1
00f0c     00 86 06 F6 | 	mov	local26, #0
00f10     00 4A 06 F6 | 	mov	arg01, #0
00f14     0A 4C 06 F6 | 	mov	arg02, #10
00f18     00 4E 06 F6 | 	mov	arg03, #0
00f1c     C0 2B B0 FD | 	call	#__system___basic_print_char
00f20     01 24 06 F6 | 	mov	result1, #1
00f24     01 88 06 F6 | 	mov	local27, #1
00f28     00 8A 06 F6 | 	mov	local28, #0
00f2c     00 4A 06 F6 | 	mov	arg01, #0
00f30     50 3E B0 FD | 	call	#__system___getiolock_0102
00f34     12 01 68 FC | 	wrlong	#0, result1
00f38     00 90 06 F6 | 	mov	local31, #0
00f3c                 | LR__0011
00f3c                 | LR__0012
00f3c                 | LR__0013
00f3c                 | '   
00f3c                 | '   if lpeek($34)<>0 then
00f3c                 | ' asm
00f3c     34 24 0E FB | 	rdlong	result1, #52 wz
00f40                 | ' return r
00f40     C0 05 90 AD |  if_e	jmp	#LR__0020
00f44                 | ' asm
00f44     37 24 C6 FA | 	rdbyte	result1, #55
00f48                 | ' return r
00f48     12 79 02 F6 | 	mov	local19, result1
00f4c     3C 7B 02 F6 | 	mov	local20, local19
00f50     07 7A 46 F7 | 	zerox	local20, #7
00f54     02 00 00 FF 
00f58     88 0E 06 F1 | 	add	objptr, ##1160
00f5c     07 7B 62 FC | 	wrlong	local20, objptr
00f60                 | '     cmd=peek($37)
00f60                 | '     if cmd<>0 then
00f60     07 7B 0A FB | 	rdlong	local20, objptr wz
00f64                 | ' asm
00f64     36 7C C6 5A |  if_ne	rdbyte	local21, #54
00f68                 | ' return r
00f68                 | ' asm
00f68     35 24 C6 5A |  if_ne	rdbyte	result1, #53
00f6c                 | ' return r
00f6c     12 7F 02 56 |  if_ne	mov	local22, result1
00f70     00 4C 06 F6 | 	mov	arg02, #0
00f74                 | ' asm
00f74     34 00 6C FC | 	wrlong	#0, #52
00f78                 | '     lpoke $34,0
00f78                 | '     if cmd=$81 then mousex=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
00f78     07 7B 02 FB | 	rdlong	local20, objptr
00f7c     02 00 00 FF 
00f80     88 0E 86 F1 | 	sub	objptr, ##1160
00f84     81 7A 0E F2 | 	cmp	local20, #129 wz
00f88     48 01 90 5D |  if_ne	jmp	#LR__0014
00f8c     3E BB 02 F6 | 	mov	local52, local21
00f90     07 BA 46 F7 | 	zerox	local52, #7
00f94     3F BD 02 F6 | 	mov	local53, local22
00f98     07 BC 46 F7 | 	zerox	local53, #7
00f9c     5E BF 02 F6 | 	mov	local54, local53
00fa0     07 BE 66 F0 | 	shl	local54, #7
00fa4     5D C1 02 F6 | 	mov	local55, local52
00fa8     5F C1 02 F1 | 	add	local55, local54
00fac     02 00 00 FF 
00fb0     94 0E 06 F1 | 	add	objptr, ##1172
00fb4     07 C1 62 FC | 	wrlong	local55, objptr
00fb8     02 00 00 FF 
00fbc     94 0E 86 F1 | 	sub	objptr, ##1172
00fc0     00 4A 06 F6 | 	mov	arg01, #0
00fc4     BC 3D B0 FD | 	call	#__system___getiolock_0102
00fc8     12 4B 02 F6 | 	mov	arg01, result1
00fcc     E4 28 B0 FD | 	call	#__system___lockmem
00fd0     00 24 06 F6 | 	mov	result1, #0
00fd4     00 78 06 F6 | 	mov	local19, #0
00fd8     00 70 06 F6 | 	mov	local15, #0
00fdc     2C 00 00 FF 
00fe0     D0 73 06 F6 | 	mov	local16, ##@LR__0309
00fe4     39 75 02 F6 | 	mov	local17, local16
00fe8     00 76 06 F6 | 	mov	local18, #0
00fec     00 4A 06 F6 | 	mov	arg01, #0
00ff0     3A 4D 02 F6 | 	mov	arg02, local17
00ff4     00 4E 06 F6 | 	mov	arg03, #0
00ff8     30 2B B0 FD | 	call	#__system___basic_print_string
00ffc     12 67 02 F6 | 	mov	local10, result1
01000     00 68 06 F6 | 	mov	local11, #0
01004     02 00 00 FF 
01008     94 0E 06 F1 | 	add	objptr, ##1172
0100c     07 6D 02 FB | 	rdlong	local13, objptr
01010     02 00 00 FF 
01014     94 0E 86 F1 | 	sub	objptr, ##1172
01018     36 6B 02 F6 | 	mov	local12, local13
0101c     00 6E 06 F6 | 	mov	local14, #0
01020     0A 82 06 F6 | 	mov	local24, #10
01024     00 4A 06 F6 | 	mov	arg01, #0
01028     35 4D 02 F6 | 	mov	arg02, local12
0102c     00 4E 06 F6 | 	mov	arg03, #0
01030     0A 50 06 F6 | 	mov	arg04, #10
01034     3C 2B B0 FD | 	call	#__system___basic_print_integer
01038     12 85 02 F6 | 	mov	local25, result1
0103c     00 86 06 F6 | 	mov	local26, #0
01040     2C 00 00 FF 
01044     E1 89 06 F6 | 	mov	local27, ##@LR__0310
01048     44 8B 02 F6 | 	mov	local28, local27
0104c     00 90 06 F6 | 	mov	local31, #0
01050     00 4A 06 F6 | 	mov	arg01, #0
01054     45 4D 02 F6 | 	mov	arg02, local28
01058     00 4E 06 F6 | 	mov	arg03, #0
0105c     CC 2A B0 FD | 	call	#__system___basic_print_string
01060     12 93 02 F6 | 	mov	local32, result1
01064     00 94 06 F6 | 	mov	local33, #0
01068     02 00 00 FF 
0106c     98 0E 06 F1 | 	add	objptr, ##1176
01070     07 99 02 FB | 	rdlong	local35, objptr
01074     02 00 00 FF 
01078     98 0E 86 F1 | 	sub	objptr, ##1176
0107c     4C 97 02 F6 | 	mov	local34, local35
01080     00 9A 06 F6 | 	mov	local36, #0
01084     0A 9C 06 F6 | 	mov	local37, #10
01088     00 4A 06 F6 | 	mov	arg01, #0
0108c     4B 4D 02 F6 | 	mov	arg02, local34
01090     00 4E 06 F6 | 	mov	arg03, #0
01094     0A 50 06 F6 | 	mov	arg04, #10
01098     D8 2A B0 FD | 	call	#__system___basic_print_integer
0109c     12 9F 02 F6 | 	mov	local38, result1
010a0     00 A0 06 F6 | 	mov	local39, #0
010a4     00 4A 06 F6 | 	mov	arg01, #0
010a8     0A 4C 06 F6 | 	mov	arg02, #10
010ac     00 4E 06 F6 | 	mov	arg03, #0
010b0     2C 2A B0 FD | 	call	#__system___basic_print_char
010b4     01 24 06 F6 | 	mov	result1, #1
010b8     01 A2 06 F6 | 	mov	local40, #1
010bc     00 C2 06 F6 | 	mov	local56, #0
010c0     00 4A 06 F6 | 	mov	arg01, #0
010c4     BC 3C B0 FD | 	call	#__system___getiolock_0102
010c8     12 01 68 FC | 	wrlong	#0, result1
010cc     00 24 06 F6 | 	mov	result1, #0
010d0     00 C4 06 F6 | 	mov	local57, #0
010d4                 | LR__0014
010d4                 | '     if cmd=$82 then mousey=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
010d4     02 00 00 FF 
010d8     88 0E 06 F1 | 	add	objptr, ##1160
010dc     07 7B 02 FB | 	rdlong	local20, objptr
010e0     02 00 00 FF 
010e4     88 0E 86 F1 | 	sub	objptr, ##1160
010e8     82 7A 0E F2 | 	cmp	local20, #130 wz
010ec     48 01 90 5D |  if_ne	jmp	#LR__0015
010f0     3E C7 02 F6 | 	mov	local58, local21
010f4     07 C6 46 F7 | 	zerox	local58, #7
010f8     3F C9 02 F6 | 	mov	local59, local22
010fc     07 C8 46 F7 | 	zerox	local59, #7
01100     64 CB 02 F6 | 	mov	local60, local59
01104     07 CA 66 F0 | 	shl	local60, #7
01108     63 CD 02 F6 | 	mov	local61, local58
0110c     65 CD 02 F1 | 	add	local61, local60
01110     02 00 00 FF 
01114     98 0E 06 F1 | 	add	objptr, ##1176
01118     07 CD 62 FC | 	wrlong	local61, objptr
0111c     02 00 00 FF 
01120     98 0E 86 F1 | 	sub	objptr, ##1176
01124     00 4A 06 F6 | 	mov	arg01, #0
01128     58 3C B0 FD | 	call	#__system___getiolock_0102
0112c     12 4B 02 F6 | 	mov	arg01, result1
01130     80 27 B0 FD | 	call	#__system___lockmem
01134     00 24 06 F6 | 	mov	result1, #0
01138     00 78 06 F6 | 	mov	local19, #0
0113c     00 70 06 F6 | 	mov	local15, #0
01140     2C 00 00 FF 
01144     E6 73 06 F6 | 	mov	local16, ##@LR__0311
01148     39 75 02 F6 | 	mov	local17, local16
0114c     00 76 06 F6 | 	mov	local18, #0
01150     00 4A 06 F6 | 	mov	arg01, #0
01154     3A 4D 02 F6 | 	mov	arg02, local17
01158     00 4E 06 F6 | 	mov	arg03, #0
0115c     CC 29 B0 FD | 	call	#__system___basic_print_string
01160     12 67 02 F6 | 	mov	local10, result1
01164     00 68 06 F6 | 	mov	local11, #0
01168     02 00 00 FF 
0116c     94 0E 06 F1 | 	add	objptr, ##1172
01170     07 6D 02 FB | 	rdlong	local13, objptr
01174     02 00 00 FF 
01178     94 0E 86 F1 | 	sub	objptr, ##1172
0117c     36 6B 02 F6 | 	mov	local12, local13
01180     00 6E 06 F6 | 	mov	local14, #0
01184     0A 82 06 F6 | 	mov	local24, #10
01188     00 4A 06 F6 | 	mov	arg01, #0
0118c     35 4D 02 F6 | 	mov	arg02, local12
01190     00 4E 06 F6 | 	mov	arg03, #0
01194     0A 50 06 F6 | 	mov	arg04, #10
01198     D8 29 B0 FD | 	call	#__system___basic_print_integer
0119c     12 85 02 F6 | 	mov	local25, result1
011a0     00 86 06 F6 | 	mov	local26, #0
011a4     2C 00 00 FF 
011a8     F7 89 06 F6 | 	mov	local27, ##@LR__0312
011ac     44 8B 02 F6 | 	mov	local28, local27
011b0     00 90 06 F6 | 	mov	local31, #0
011b4     00 4A 06 F6 | 	mov	arg01, #0
011b8     45 4D 02 F6 | 	mov	arg02, local28
011bc     00 4E 06 F6 | 	mov	arg03, #0
011c0     68 29 B0 FD | 	call	#__system___basic_print_string
011c4     12 93 02 F6 | 	mov	local32, result1
011c8     00 94 06 F6 | 	mov	local33, #0
011cc     02 00 00 FF 
011d0     98 0E 06 F1 | 	add	objptr, ##1176
011d4     07 99 02 FB | 	rdlong	local35, objptr
011d8     02 00 00 FF 
011dc     98 0E 86 F1 | 	sub	objptr, ##1176
011e0     4C 97 02 F6 | 	mov	local34, local35
011e4     00 9A 06 F6 | 	mov	local36, #0
011e8     0A 9C 06 F6 | 	mov	local37, #10
011ec     00 4A 06 F6 | 	mov	arg01, #0
011f0     4B 4D 02 F6 | 	mov	arg02, local34
011f4     00 4E 06 F6 | 	mov	arg03, #0
011f8     0A 50 06 F6 | 	mov	arg04, #10
011fc     74 29 B0 FD | 	call	#__system___basic_print_integer
01200     12 9F 02 F6 | 	mov	local38, result1
01204     00 A0 06 F6 | 	mov	local39, #0
01208     00 4A 06 F6 | 	mov	arg01, #0
0120c     0A 4C 06 F6 | 	mov	arg02, #10
01210     00 4E 06 F6 | 	mov	arg03, #0
01214     C8 28 B0 FD | 	call	#__system___basic_print_char
01218     01 24 06 F6 | 	mov	result1, #1
0121c     01 A2 06 F6 | 	mov	local40, #1
01220     00 C2 06 F6 | 	mov	local56, #0
01224     00 4A 06 F6 | 	mov	arg01, #0
01228     58 3B B0 FD | 	call	#__system___getiolock_0102
0122c     12 01 68 FC | 	wrlong	#0, result1
01230     00 24 06 F6 | 	mov	result1, #0
01234     00 C4 06 F6 | 	mov	local57, #0
01238                 | LR__0015
01238                 | '     if cmd=$83 then mousewheel=b11+b12 shl 7 : print "Mousewheel: ";mousewheel
01238     02 00 00 FF 
0123c     88 0E 06 F1 | 	add	objptr, ##1160
01240     07 7B 02 FB | 	rdlong	local20, objptr
01244     02 00 00 FF 
01248     88 0E 86 F1 | 	sub	objptr, ##1160
0124c     83 7A 0E F2 | 	cmp	local20, #131 wz
01250     E0 00 90 5D |  if_ne	jmp	#LR__0016
01254     3E CF 02 F6 | 	mov	local62, local21
01258     07 CE 46 F7 | 	zerox	local62, #7
0125c     3F D1 02 F6 | 	mov	local63, local22
01260     07 D0 46 F7 | 	zerox	local63, #7
01264     68 D3 02 F6 | 	mov	local64, local63
01268     07 D2 66 F0 | 	shl	local64, #7
0126c     67 D5 02 F6 | 	mov	local65, local62
01270     69 D5 02 F1 | 	add	local65, local64
01274     02 00 00 FF 
01278     9C 0E 06 F1 | 	add	objptr, ##1180
0127c     07 D5 62 FC | 	wrlong	local65, objptr
01280     02 00 00 FF 
01284     9C 0E 86 F1 | 	sub	objptr, ##1180
01288     00 4A 06 F6 | 	mov	arg01, #0
0128c     F4 3A B0 FD | 	call	#__system___getiolock_0102
01290     12 4B 02 F6 | 	mov	arg01, result1
01294     1C 26 B0 FD | 	call	#__system___lockmem
01298     00 24 06 F6 | 	mov	result1, #0
0129c     00 70 06 F6 | 	mov	local15, #0
012a0     2C 00 00 FF 
012a4     FC 73 06 F6 | 	mov	local16, ##@LR__0313
012a8     39 75 02 F6 | 	mov	local17, local16
012ac     00 76 06 F6 | 	mov	local18, #0
012b0     00 4A 06 F6 | 	mov	arg01, #0
012b4     3A 4D 02 F6 | 	mov	arg02, local17
012b8     00 4E 06 F6 | 	mov	arg03, #0
012bc     6C 28 B0 FD | 	call	#__system___basic_print_string
012c0     12 67 02 F6 | 	mov	local10, result1
012c4     00 68 06 F6 | 	mov	local11, #0
012c8     02 00 00 FF 
012cc     9C 0E 06 F1 | 	add	objptr, ##1180
012d0     07 6D 02 FB | 	rdlong	local13, objptr
012d4     02 00 00 FF 
012d8     9C 0E 86 F1 | 	sub	objptr, ##1180
012dc     36 6B 02 F6 | 	mov	local12, local13
012e0     00 6E 06 F6 | 	mov	local14, #0
012e4     0A 82 06 F6 | 	mov	local24, #10
012e8     00 4A 06 F6 | 	mov	arg01, #0
012ec     35 4D 02 F6 | 	mov	arg02, local12
012f0     00 4E 06 F6 | 	mov	arg03, #0
012f4     0A 50 06 F6 | 	mov	arg04, #10
012f8     78 28 B0 FD | 	call	#__system___basic_print_integer
012fc     12 85 02 F6 | 	mov	local25, result1
01300     00 86 06 F6 | 	mov	local26, #0
01304     00 4A 06 F6 | 	mov	arg01, #0
01308     0A 4C 06 F6 | 	mov	arg02, #10
0130c     00 4E 06 F6 | 	mov	arg03, #0
01310     CC 27 B0 FD | 	call	#__system___basic_print_char
01314     01 24 06 F6 | 	mov	result1, #1
01318     01 88 06 F6 | 	mov	local27, #1
0131c     00 8A 06 F6 | 	mov	local28, #0
01320     00 4A 06 F6 | 	mov	arg01, #0
01324     5C 3A B0 FD | 	call	#__system___getiolock_0102
01328     12 01 68 FC | 	wrlong	#0, result1
0132c     00 24 06 F6 | 	mov	result1, #0
01330     00 90 06 F6 | 	mov	local31, #0
01334                 | LR__0016
01334                 | '     if cmd=$84 then print "Mouse key: ";b11
01334     02 00 00 FF 
01338     88 0E 06 F1 | 	add	objptr, ##1160
0133c     07 7B 02 FB | 	rdlong	local20, objptr
01340     02 00 00 FF 
01344     88 0E 86 F1 | 	sub	objptr, ##1160
01348     84 7A 0E F2 | 	cmp	local20, #132 wz
0134c     A0 00 90 5D |  if_ne	jmp	#LR__0017
01350     3E D7 02 F6 | 	mov	local66, local21
01354     07 D6 46 F7 | 	zerox	local66, #7
01358     00 4A 06 F6 | 	mov	arg01, #0
0135c     24 3A B0 FD | 	call	#__system___getiolock_0102
01360     12 4B 02 F6 | 	mov	arg01, result1
01364     4C 25 B0 FD | 	call	#__system___lockmem
01368     00 24 06 F6 | 	mov	result1, #0
0136c     00 70 06 F6 | 	mov	local15, #0
01370     2D 00 00 FF 
01374     09 72 06 F6 | 	mov	local16, ##@LR__0314
01378     39 75 02 F6 | 	mov	local17, local16
0137c     00 76 06 F6 | 	mov	local18, #0
01380     00 4A 06 F6 | 	mov	arg01, #0
01384     3A 4D 02 F6 | 	mov	arg02, local17
01388     00 4E 06 F6 | 	mov	arg03, #0
0138c     9C 27 B0 FD | 	call	#__system___basic_print_string
01390     12 67 02 F6 | 	mov	local10, result1
01394     00 68 06 F6 | 	mov	local11, #0
01398     6B 6B 02 F6 | 	mov	local12, local66
0139c     00 6C 06 F6 | 	mov	local13, #0
013a0     0A 6E 06 F6 | 	mov	local14, #10
013a4     00 4A 06 F6 | 	mov	arg01, #0
013a8     35 4D 02 F6 | 	mov	arg02, local12
013ac     00 4E 06 F6 | 	mov	arg03, #0
013b0     0A 50 06 F6 | 	mov	arg04, #10
013b4     00 28 B0 FD | 	call	#__system___basic_print_unsigned
013b8     12 83 02 F6 | 	mov	local24, result1
013bc     00 84 06 F6 | 	mov	local25, #0
013c0     00 4A 06 F6 | 	mov	arg01, #0
013c4     0A 4C 06 F6 | 	mov	arg02, #10
013c8     00 4E 06 F6 | 	mov	arg03, #0
013cc     10 27 B0 FD | 	call	#__system___basic_print_char
013d0     01 24 06 F6 | 	mov	result1, #1
013d4     01 86 06 F6 | 	mov	local26, #1
013d8     00 88 06 F6 | 	mov	local27, #0
013dc     00 4A 06 F6 | 	mov	arg01, #0
013e0     A0 39 B0 FD | 	call	#__system___getiolock_0102
013e4     12 01 68 FC | 	wrlong	#0, result1
013e8     00 24 06 F6 | 	mov	result1, #0
013ec     00 8A 06 F6 | 	mov	local28, #0
013f0                 | LR__0017
013f0                 | '     if cmd=$85 then print "Mouse clicked"
013f0     02 00 00 FF 
013f4     88 0E 06 F1 | 	add	objptr, ##1160
013f8     07 7B 02 FB | 	rdlong	local20, objptr
013fc     02 00 00 FF 
01400     88 0E 86 F1 | 	sub	objptr, ##1160
01404     85 7A 0E F2 | 	cmp	local20, #133 wz
01408     70 00 90 5D |  if_ne	jmp	#LR__0018
0140c     00 4A 06 F6 | 	mov	arg01, #0
01410     70 39 B0 FD | 	call	#__system___getiolock_0102
01414     12 4B 02 F6 | 	mov	arg01, result1
01418     98 24 B0 FD | 	call	#__system___lockmem
0141c     00 24 06 F6 | 	mov	result1, #0
01420     00 70 06 F6 | 	mov	local15, #0
01424     2D 00 00 FF 
01428     15 72 06 F6 | 	mov	local16, ##@LR__0315
0142c     39 75 02 F6 | 	mov	local17, local16
01430     00 76 06 F6 | 	mov	local18, #0
01434     00 4A 06 F6 | 	mov	arg01, #0
01438     3A 4D 02 F6 | 	mov	arg02, local17
0143c     00 4E 06 F6 | 	mov	arg03, #0
01440     E8 26 B0 FD | 	call	#__system___basic_print_string
01444     12 67 02 F6 | 	mov	local10, result1
01448     00 68 06 F6 | 	mov	local11, #0
0144c     00 4A 06 F6 | 	mov	arg01, #0
01450     0A 4C 06 F6 | 	mov	arg02, #10
01454     00 4E 06 F6 | 	mov	arg03, #0
01458     84 26 B0 FD | 	call	#__system___basic_print_char
0145c     01 24 06 F6 | 	mov	result1, #1
01460     01 6A 06 F6 | 	mov	local12, #1
01464     00 6C 06 F6 | 	mov	local13, #0
01468     00 4A 06 F6 | 	mov	arg01, #0
0146c     14 39 B0 FD | 	call	#__system___getiolock_0102
01470     12 01 68 FC | 	wrlong	#0, result1
01474     00 24 06 F6 | 	mov	result1, #0
01478     00 6E 06 F6 | 	mov	local14, #0
0147c                 | LR__0018
0147c                 | '     if cmd=$86 then print "Mouse double clicked"
0147c     02 00 00 FF 
01480     88 0E 06 F1 | 	add	objptr, ##1160
01484     07 7B 02 FB | 	rdlong	local20, objptr
01488     02 00 00 FF 
0148c     88 0E 86 F1 | 	sub	objptr, ##1160
01490     86 7A 0E F2 | 	cmp	local20, #134 wz
01494     6C 00 90 5D |  if_ne	jmp	#LR__0019
01498     00 4A 06 F6 | 	mov	arg01, #0
0149c     E4 38 B0 FD | 	call	#__system___getiolock_0102
014a0     12 4B 02 F6 | 	mov	arg01, result1
014a4     0C 24 B0 FD | 	call	#__system___lockmem
014a8     00 24 06 F6 | 	mov	result1, #0
014ac     00 70 06 F6 | 	mov	local15, #0
014b0     2D 00 00 FF 
014b4     23 72 06 F6 | 	mov	local16, ##@LR__0316
014b8     39 75 02 F6 | 	mov	local17, local16
014bc     00 76 06 F6 | 	mov	local18, #0
014c0     00 4A 06 F6 | 	mov	arg01, #0
014c4     3A 4D 02 F6 | 	mov	arg02, local17
014c8     00 4E 06 F6 | 	mov	arg03, #0
014cc     5C 26 B0 FD | 	call	#__system___basic_print_string
014d0     12 67 02 F6 | 	mov	local10, result1
014d4     00 68 06 F6 | 	mov	local11, #0
014d8     00 4A 06 F6 | 	mov	arg01, #0
014dc     0A 4C 06 F6 | 	mov	arg02, #10
014e0     00 4E 06 F6 | 	mov	arg03, #0
014e4     F8 25 B0 FD | 	call	#__system___basic_print_char
014e8     01 24 06 F6 | 	mov	result1, #1
014ec     01 6A 06 F6 | 	mov	local12, #1
014f0     00 6C 06 F6 | 	mov	local13, #0
014f4     00 4A 06 F6 | 	mov	arg01, #0
014f8     88 38 B0 FD | 	call	#__system___getiolock_0102
014fc     12 01 68 FC | 	wrlong	#0, result1
01500     00 6E 06 F6 | 	mov	local14, #0
01504                 | LR__0019
01504                 | LR__0020
01504                 | ' 
01504                 | '   if lpeek($38)<>0 then 
01504     38 4A 06 F6 | 	mov	arg01, #56
01508                 | ' asm
01508     38 24 06 FB | 	rdlong	result1, #56
0150c                 | ' return r
0150c     12 D9 0A F6 | 	mov	local67, result1 wz
01510     30 F6 9F AD |  if_e	jmp	#LR__0001
01514                 | ' asm
01514     3B 7A C6 FA | 	rdbyte	local20, #59
01518                 | ' return r
01518     07 7A 46 F7 | 	zerox	local20, #7
0151c     04 7A 46 F0 | 	shr	local20, #4
01520     02 00 00 FF 
01524     88 0E 06 F1 | 	add	objptr, ##1160
01528     07 7B 62 FC | 	wrlong	local20, objptr
0152c                 | ' asm
0152c     3B 78 C6 FA | 	rdbyte	local19, #59
01530                 | ' return r
01530     3C 7B 02 F6 | 	mov	local20, local19
01534     07 7A 46 F7 | 	zerox	local20, #7
01538     0F 7A 06 F5 | 	and	local20, #15
0153c     18 0E 06 F1 | 	add	objptr, #24
01540     07 7B 62 FC | 	wrlong	local20, objptr
01544                 | ' asm
01544     39 7C C6 FA | 	rdbyte	local21, #57
01548                 | ' return r
01548     38 4A 06 F6 | 	mov	arg01, #56
0154c                 | ' asm
0154c     38 24 C6 FA | 	rdbyte	result1, #56
01550                 | ' return r
01550     12 7F 02 F6 | 	mov	local22, result1
01554     00 4C 06 F6 | 	mov	arg02, #0
01558                 | ' asm
01558     38 00 6C FC | 	wrlong	#0, #56
0155c                 | '     b11=peek($39)
0155c                 | '     b12=peek($38)
0155c                 | '     lpoke $38,0
0155c                 | '     if cmd=8 then print "Midi note off, channel ";channel;", note ";b11
0155c     18 0E 86 F1 | 	sub	objptr, #24
01560     07 7B 02 FB | 	rdlong	local20, objptr
01564     02 00 00 FF 
01568     88 0E 86 F1 | 	sub	objptr, ##1160
0156c     08 7A 0E F2 | 	cmp	local20, #8 wz
01570     08 01 90 5D |  if_ne	jmp	#LR__0021
01574     3E DB 02 F6 | 	mov	local68, local21
01578     07 DA 46 F7 | 	zerox	local68, #7
0157c     00 4A 06 F6 | 	mov	arg01, #0
01580     00 38 B0 FD | 	call	#__system___getiolock_0102
01584     12 4B 02 F6 | 	mov	arg01, result1
01588     28 23 B0 FD | 	call	#__system___lockmem
0158c     00 24 06 F6 | 	mov	result1, #0
01590     00 78 06 F6 | 	mov	local19, #0
01594     00 70 06 F6 | 	mov	local15, #0
01598     2D 00 00 FF 
0159c     38 72 06 F6 | 	mov	local16, ##@LR__0317
015a0     39 75 02 F6 | 	mov	local17, local16
015a4     00 76 06 F6 | 	mov	local18, #0
015a8     00 4A 06 F6 | 	mov	arg01, #0
015ac     3A 4D 02 F6 | 	mov	arg02, local17
015b0     00 4E 06 F6 | 	mov	arg03, #0
015b4     74 25 B0 FD | 	call	#__system___basic_print_string
015b8     12 67 02 F6 | 	mov	local10, result1
015bc     00 68 06 F6 | 	mov	local11, #0
015c0     02 00 00 FF 
015c4     A0 0E 06 F1 | 	add	objptr, ##1184
015c8     07 6D 02 FB | 	rdlong	local13, objptr
015cc     02 00 00 FF 
015d0     A0 0E 86 F1 | 	sub	objptr, ##1184
015d4     36 6B 02 F6 | 	mov	local12, local13
015d8     00 6E 06 F6 | 	mov	local14, #0
015dc     0A 82 06 F6 | 	mov	local24, #10
015e0     00 4A 06 F6 | 	mov	arg01, #0
015e4     35 4D 02 F6 | 	mov	arg02, local12
015e8     00 4E 06 F6 | 	mov	arg03, #0
015ec     0A 50 06 F6 | 	mov	arg04, #10
015f0     80 25 B0 FD | 	call	#__system___basic_print_integer
015f4     12 85 02 F6 | 	mov	local25, result1
015f8     00 86 06 F6 | 	mov	local26, #0
015fc     2D 00 00 FF 
01600     50 88 06 F6 | 	mov	local27, ##@LR__0318
01604     44 8B 02 F6 | 	mov	local28, local27
01608     00 90 06 F6 | 	mov	local31, #0
0160c     00 4A 06 F6 | 	mov	arg01, #0
01610     45 4D 02 F6 | 	mov	arg02, local28
01614     00 4E 06 F6 | 	mov	arg03, #0
01618     10 25 B0 FD | 	call	#__system___basic_print_string
0161c     12 93 02 F6 | 	mov	local32, result1
01620     00 94 06 F6 | 	mov	local33, #0
01624     6D 97 02 F6 | 	mov	local34, local68
01628     00 98 06 F6 | 	mov	local35, #0
0162c     0A 9A 06 F6 | 	mov	local36, #10
01630     00 4A 06 F6 | 	mov	arg01, #0
01634     4B 4D 02 F6 | 	mov	arg02, local34
01638     00 4E 06 F6 | 	mov	arg03, #0
0163c     0A 50 06 F6 | 	mov	arg04, #10
01640     74 25 B0 FD | 	call	#__system___basic_print_unsigned
01644     12 9D 02 F6 | 	mov	local37, result1
01648     00 9E 06 F6 | 	mov	local38, #0
0164c     00 4A 06 F6 | 	mov	arg01, #0
01650     0A 4C 06 F6 | 	mov	arg02, #10
01654     00 4E 06 F6 | 	mov	arg03, #0
01658     84 24 B0 FD | 	call	#__system___basic_print_char
0165c     01 24 06 F6 | 	mov	result1, #1
01660     01 A0 06 F6 | 	mov	local39, #1
01664     00 A2 06 F6 | 	mov	local40, #0
01668     00 4A 06 F6 | 	mov	arg01, #0
0166c     14 37 B0 FD | 	call	#__system___getiolock_0102
01670     12 01 68 FC | 	wrlong	#0, result1
01674     00 24 06 F6 | 	mov	result1, #0
01678     00 C2 06 F6 | 	mov	local56, #0
0167c                 | LR__0021
0167c                 | '     if cmd=9 then print "Midi note on,  channel ";channel;", note ";b11;", velocity ";b12
0167c     02 00 00 FF 
01680     88 0E 06 F1 | 	add	objptr, ##1160
01684     07 7B 02 FB | 	rdlong	local20, objptr
01688     02 00 00 FF 
0168c     88 0E 86 F1 | 	sub	objptr, ##1160
01690     09 7A 0E F2 | 	cmp	local20, #9 wz
01694     60 01 90 5D |  if_ne	jmp	#LR__0022
01698     3E DD 02 F6 | 	mov	local69, local21
0169c     07 DC 46 F7 | 	zerox	local69, #7
016a0     3F DF 02 F6 | 	mov	local70, local22
016a4     07 DE 46 F7 | 	zerox	local70, #7
016a8     00 4A 06 F6 | 	mov	arg01, #0
016ac     D4 36 B0 FD | 	call	#__system___getiolock_0102
016b0     12 4B 02 F6 | 	mov	arg01, result1
016b4     FC 21 B0 FD | 	call	#__system___lockmem
016b8     00 24 06 F6 | 	mov	result1, #0
016bc     00 78 06 F6 | 	mov	local19, #0
016c0     00 70 06 F6 | 	mov	local15, #0
016c4     2D 00 00 FF 
016c8     58 72 06 F6 | 	mov	local16, ##@LR__0319
016cc     39 75 02 F6 | 	mov	local17, local16
016d0     00 76 06 F6 | 	mov	local18, #0
016d4     00 4A 06 F6 | 	mov	arg01, #0
016d8     3A 4D 02 F6 | 	mov	arg02, local17
016dc     00 4E 06 F6 | 	mov	arg03, #0
016e0     48 24 B0 FD | 	call	#__system___basic_print_string
016e4     12 67 02 F6 | 	mov	local10, result1
016e8     00 68 06 F6 | 	mov	local11, #0
016ec     02 00 00 FF 
016f0     A0 0E 06 F1 | 	add	objptr, ##1184
016f4     07 6D 02 FB | 	rdlong	local13, objptr
016f8     02 00 00 FF 
016fc     A0 0E 86 F1 | 	sub	objptr, ##1184
01700     36 6B 02 F6 | 	mov	local12, local13
01704     00 6E 06 F6 | 	mov	local14, #0
01708     0A 82 06 F6 | 	mov	local24, #10
0170c     00 4A 06 F6 | 	mov	arg01, #0
01710     35 4D 02 F6 | 	mov	arg02, local12
01714     00 4E 06 F6 | 	mov	arg03, #0
01718     0A 50 06 F6 | 	mov	arg04, #10
0171c     54 24 B0 FD | 	call	#__system___basic_print_integer
01720     12 85 02 F6 | 	mov	local25, result1
01724     00 86 06 F6 | 	mov	local26, #0
01728     2D 00 00 FF 
0172c     70 88 06 F6 | 	mov	local27, ##@LR__0320
01730     44 8B 02 F6 | 	mov	local28, local27
01734     00 90 06 F6 | 	mov	local31, #0
01738     00 4A 06 F6 | 	mov	arg01, #0
0173c     45 4D 02 F6 | 	mov	arg02, local28
01740     00 4E 06 F6 | 	mov	arg03, #0
01744     E4 23 B0 FD | 	call	#__system___basic_print_string
01748     12 93 02 F6 | 	mov	local32, result1
0174c     00 94 06 F6 | 	mov	local33, #0
01750     6E 97 02 F6 | 	mov	local34, local69
01754     00 98 06 F6 | 	mov	local35, #0
01758     0A 9A 06 F6 | 	mov	local36, #10
0175c     00 4A 06 F6 | 	mov	arg01, #0
01760     4B 4D 02 F6 | 	mov	arg02, local34
01764     00 4E 06 F6 | 	mov	arg03, #0
01768     0A 50 06 F6 | 	mov	arg04, #10
0176c     48 24 B0 FD | 	call	#__system___basic_print_unsigned
01770     12 9D 02 F6 | 	mov	local37, result1
01774     00 9E 06 F6 | 	mov	local38, #0
01778     2D 00 00 FF 
0177c     78 A0 06 F6 | 	mov	local39, ##@LR__0321
01780     50 A3 02 F6 | 	mov	local40, local39
01784     00 C2 06 F6 | 	mov	local56, #0
01788     00 4A 06 F6 | 	mov	arg01, #0
0178c     51 4D 02 F6 | 	mov	arg02, local40
01790     00 4E 06 F6 | 	mov	arg03, #0
01794     94 23 B0 FD | 	call	#__system___basic_print_string
01798     12 C5 02 F6 | 	mov	local57, result1
0179c     00 E0 06 F6 | 	mov	local71, #0
017a0     6F E3 02 F6 | 	mov	local72, local70
017a4     00 E4 06 F6 | 	mov	local73, #0
017a8     0A E6 06 F6 | 	mov	local74, #10
017ac     00 4A 06 F6 | 	mov	arg01, #0
017b0     71 4D 02 F6 | 	mov	arg02, local72
017b4     00 4E 06 F6 | 	mov	arg03, #0
017b8     0A 50 06 F6 | 	mov	arg04, #10
017bc     F8 23 B0 FD | 	call	#__system___basic_print_unsigned
017c0     12 E9 02 F6 | 	mov	local75, result1
017c4     00 EA 06 F6 | 	mov	local76, #0
017c8     00 4A 06 F6 | 	mov	arg01, #0
017cc     0A 4C 06 F6 | 	mov	arg02, #10
017d0     00 4E 06 F6 | 	mov	arg03, #0
017d4     08 23 B0 FD | 	call	#__system___basic_print_char
017d8     01 24 06 F6 | 	mov	result1, #1
017dc     01 EC 06 F6 | 	mov	local77, #1
017e0     00 EE 06 F6 | 	mov	local78, #0
017e4     00 4A 06 F6 | 	mov	arg01, #0
017e8     98 35 B0 FD | 	call	#__system___getiolock_0102
017ec     12 01 68 FC | 	wrlong	#0, result1
017f0     00 24 06 F6 | 	mov	result1, #0
017f4     00 F0 06 F6 | 	mov	local79, #0
017f8                 | LR__0022
017f8                 | '     if cmd=10 then print "Midi poly aftertouch, channel ";channel;" note ";b11;", velocity ";b12
017f8     02 00 00 FF 
017fc     88 0E 06 F1 | 	add	objptr, ##1160
01800     07 7B 02 FB | 	rdlong	local20, objptr
01804     02 00 00 FF 
01808     88 0E 86 F1 | 	sub	objptr, ##1160
0180c     0A 7A 0E F2 | 	cmp	local20, #10 wz
01810     60 01 90 5D |  if_ne	jmp	#LR__0023
01814     3E F3 02 F6 | 	mov	local80, local21
01818     07 F2 46 F7 | 	zerox	local80, #7
0181c     3F F5 02 F6 | 	mov	local81, local22
01820     07 F4 46 F7 | 	zerox	local81, #7
01824     00 4A 06 F6 | 	mov	arg01, #0
01828     58 35 B0 FD | 	call	#__system___getiolock_0102
0182c     12 4B 02 F6 | 	mov	arg01, result1
01830     80 20 B0 FD | 	call	#__system___lockmem
01834     00 24 06 F6 | 	mov	result1, #0
01838     00 78 06 F6 | 	mov	local19, #0
0183c     00 70 06 F6 | 	mov	local15, #0
01840     2D 00 00 FF 
01844     84 72 06 F6 | 	mov	local16, ##@LR__0322
01848     39 75 02 F6 | 	mov	local17, local16
0184c     00 76 06 F6 | 	mov	local18, #0
01850     00 4A 06 F6 | 	mov	arg01, #0
01854     3A 4D 02 F6 | 	mov	arg02, local17
01858     00 4E 06 F6 | 	mov	arg03, #0
0185c     CC 22 B0 FD | 	call	#__system___basic_print_string
01860     12 67 02 F6 | 	mov	local10, result1
01864     00 68 06 F6 | 	mov	local11, #0
01868     02 00 00 FF 
0186c     A0 0E 06 F1 | 	add	objptr, ##1184
01870     07 6D 02 FB | 	rdlong	local13, objptr
01874     02 00 00 FF 
01878     A0 0E 86 F1 | 	sub	objptr, ##1184
0187c     36 6B 02 F6 | 	mov	local12, local13
01880     00 6E 06 F6 | 	mov	local14, #0
01884     0A 82 06 F6 | 	mov	local24, #10
01888     00 4A 06 F6 | 	mov	arg01, #0
0188c     35 4D 02 F6 | 	mov	arg02, local12
01890     00 4E 06 F6 | 	mov	arg03, #0
01894     0A 50 06 F6 | 	mov	arg04, #10
01898     D8 22 B0 FD | 	call	#__system___basic_print_integer
0189c     12 85 02 F6 | 	mov	local25, result1
018a0     00 86 06 F6 | 	mov	local26, #0
018a4     2D 00 00 FF 
018a8     A3 88 06 F6 | 	mov	local27, ##@LR__0323
018ac     44 8B 02 F6 | 	mov	local28, local27
018b0     00 90 06 F6 | 	mov	local31, #0
018b4     00 4A 06 F6 | 	mov	arg01, #0
018b8     45 4D 02 F6 | 	mov	arg02, local28
018bc     00 4E 06 F6 | 	mov	arg03, #0
018c0     68 22 B0 FD | 	call	#__system___basic_print_string
018c4     12 93 02 F6 | 	mov	local32, result1
018c8     00 94 06 F6 | 	mov	local33, #0
018cc     79 97 02 F6 | 	mov	local34, local80
018d0     00 98 06 F6 | 	mov	local35, #0
018d4     0A 9A 06 F6 | 	mov	local36, #10
018d8     00 4A 06 F6 | 	mov	arg01, #0
018dc     4B 4D 02 F6 | 	mov	arg02, local34
018e0     00 4E 06 F6 | 	mov	arg03, #0
018e4     0A 50 06 F6 | 	mov	arg04, #10
018e8     CC 22 B0 FD | 	call	#__system___basic_print_unsigned
018ec     12 9D 02 F6 | 	mov	local37, result1
018f0     00 9E 06 F6 | 	mov	local38, #0
018f4     2D 00 00 FF 
018f8     AA A0 06 F6 | 	mov	local39, ##@LR__0324
018fc     50 A3 02 F6 | 	mov	local40, local39
01900     00 C2 06 F6 | 	mov	local56, #0
01904     00 4A 06 F6 | 	mov	arg01, #0
01908     51 4D 02 F6 | 	mov	arg02, local40
0190c     00 4E 06 F6 | 	mov	arg03, #0
01910     18 22 B0 FD | 	call	#__system___basic_print_string
01914     12 C5 02 F6 | 	mov	local57, result1
01918     00 E0 06 F6 | 	mov	local71, #0
0191c     7A E3 02 F6 | 	mov	local72, local81
01920     00 E4 06 F6 | 	mov	local73, #0
01924     0A E6 06 F6 | 	mov	local74, #10
01928     00 4A 06 F6 | 	mov	arg01, #0
0192c     71 4D 02 F6 | 	mov	arg02, local72
01930     00 4E 06 F6 | 	mov	arg03, #0
01934     0A 50 06 F6 | 	mov	arg04, #10
01938     7C 22 B0 FD | 	call	#__system___basic_print_unsigned
0193c     12 E9 02 F6 | 	mov	local75, result1
01940     00 EA 06 F6 | 	mov	local76, #0
01944     00 4A 06 F6 | 	mov	arg01, #0
01948     0A 4C 06 F6 | 	mov	arg02, #10
0194c     00 4E 06 F6 | 	mov	arg03, #0
01950     8C 21 B0 FD | 	call	#__system___basic_print_char
01954     01 24 06 F6 | 	mov	result1, #1
01958     01 EC 06 F6 | 	mov	local77, #1
0195c     00 EE 06 F6 | 	mov	local78, #0
01960     00 4A 06 F6 | 	mov	arg01, #0
01964     1C 34 B0 FD | 	call	#__system___getiolock_0102
01968     12 01 68 FC | 	wrlong	#0, result1
0196c     00 24 06 F6 | 	mov	result1, #0
01970     00 F0 06 F6 | 	mov	local79, #0
01974                 | LR__0023
01974                 | '     if cmd=11 then print "Midi control change, channel ";channel;" controller ";b11;", value ";b12
01974     02 00 00 FF 
01978     88 0E 06 F1 | 	add	objptr, ##1160
0197c     07 7B 02 FB | 	rdlong	local20, objptr
01980     02 00 00 FF 
01984     88 0E 86 F1 | 	sub	objptr, ##1160
01988     0B 7A 0E F2 | 	cmp	local20, #11 wz
0198c     60 01 90 5D |  if_ne	jmp	#LR__0024
01990     3E F7 02 F6 | 	mov	local82, local21
01994     07 F6 46 F7 | 	zerox	local82, #7
01998     3F F9 02 F6 | 	mov	local83, local22
0199c     07 F8 46 F7 | 	zerox	local83, #7
019a0     00 4A 06 F6 | 	mov	arg01, #0
019a4     DC 33 B0 FD | 	call	#__system___getiolock_0102
019a8     12 4B 02 F6 | 	mov	arg01, result1
019ac     04 1F B0 FD | 	call	#__system___lockmem
019b0     00 24 06 F6 | 	mov	result1, #0
019b4     00 78 06 F6 | 	mov	local19, #0
019b8     00 70 06 F6 | 	mov	local15, #0
019bc     2D 00 00 FF 
019c0     B6 72 06 F6 | 	mov	local16, ##@LR__0325
019c4     39 75 02 F6 | 	mov	local17, local16
019c8     00 76 06 F6 | 	mov	local18, #0
019cc     00 4A 06 F6 | 	mov	arg01, #0
019d0     3A 4D 02 F6 | 	mov	arg02, local17
019d4     00 4E 06 F6 | 	mov	arg03, #0
019d8     50 21 B0 FD | 	call	#__system___basic_print_string
019dc     12 67 02 F6 | 	mov	local10, result1
019e0     00 68 06 F6 | 	mov	local11, #0
019e4     02 00 00 FF 
019e8     A0 0E 06 F1 | 	add	objptr, ##1184
019ec     07 6D 02 FB | 	rdlong	local13, objptr
019f0     02 00 00 FF 
019f4     A0 0E 86 F1 | 	sub	objptr, ##1184
019f8     36 6B 02 F6 | 	mov	local12, local13
019fc     00 6E 06 F6 | 	mov	local14, #0
01a00     0A 82 06 F6 | 	mov	local24, #10
01a04     00 4A 06 F6 | 	mov	arg01, #0
01a08     35 4D 02 F6 | 	mov	arg02, local12
01a0c     00 4E 06 F6 | 	mov	arg03, #0
01a10     0A 50 06 F6 | 	mov	arg04, #10
01a14     5C 21 B0 FD | 	call	#__system___basic_print_integer
01a18     12 85 02 F6 | 	mov	local25, result1
01a1c     00 86 06 F6 | 	mov	local26, #0
01a20     2D 00 00 FF 
01a24     D4 88 06 F6 | 	mov	local27, ##@LR__0326
01a28     44 8B 02 F6 | 	mov	local28, local27
01a2c     00 90 06 F6 | 	mov	local31, #0
01a30     00 4A 06 F6 | 	mov	arg01, #0
01a34     45 4D 02 F6 | 	mov	arg02, local28
01a38     00 4E 06 F6 | 	mov	arg03, #0
01a3c     EC 20 B0 FD | 	call	#__system___basic_print_string
01a40     12 93 02 F6 | 	mov	local32, result1
01a44     00 94 06 F6 | 	mov	local33, #0
01a48     7B 97 02 F6 | 	mov	local34, local82
01a4c     00 98 06 F6 | 	mov	local35, #0
01a50     0A 9A 06 F6 | 	mov	local36, #10
01a54     00 4A 06 F6 | 	mov	arg01, #0
01a58     4B 4D 02 F6 | 	mov	arg02, local34
01a5c     00 4E 06 F6 | 	mov	arg03, #0
01a60     0A 50 06 F6 | 	mov	arg04, #10
01a64     50 21 B0 FD | 	call	#__system___basic_print_unsigned
01a68     12 9D 02 F6 | 	mov	local37, result1
01a6c     00 9E 06 F6 | 	mov	local38, #0
01a70     2D 00 00 FF 
01a74     E1 A0 06 F6 | 	mov	local39, ##@LR__0327
01a78     50 A3 02 F6 | 	mov	local40, local39
01a7c     00 C2 06 F6 | 	mov	local56, #0
01a80     00 4A 06 F6 | 	mov	arg01, #0
01a84     51 4D 02 F6 | 	mov	arg02, local40
01a88     00 4E 06 F6 | 	mov	arg03, #0
01a8c     9C 20 B0 FD | 	call	#__system___basic_print_string
01a90     12 C5 02 F6 | 	mov	local57, result1
01a94     00 E0 06 F6 | 	mov	local71, #0
01a98     7C E3 02 F6 | 	mov	local72, local83
01a9c     00 E4 06 F6 | 	mov	local73, #0
01aa0     0A E6 06 F6 | 	mov	local74, #10
01aa4     00 4A 06 F6 | 	mov	arg01, #0
01aa8     71 4D 02 F6 | 	mov	arg02, local72
01aac     00 4E 06 F6 | 	mov	arg03, #0
01ab0     0A 50 06 F6 | 	mov	arg04, #10
01ab4     00 21 B0 FD | 	call	#__system___basic_print_unsigned
01ab8     12 E9 02 F6 | 	mov	local75, result1
01abc     00 EA 06 F6 | 	mov	local76, #0
01ac0     00 4A 06 F6 | 	mov	arg01, #0
01ac4     0A 4C 06 F6 | 	mov	arg02, #10
01ac8     00 4E 06 F6 | 	mov	arg03, #0
01acc     10 20 B0 FD | 	call	#__system___basic_print_char
01ad0     01 24 06 F6 | 	mov	result1, #1
01ad4     01 EC 06 F6 | 	mov	local77, #1
01ad8     00 EE 06 F6 | 	mov	local78, #0
01adc     00 4A 06 F6 | 	mov	arg01, #0
01ae0     A0 32 B0 FD | 	call	#__system___getiolock_0102
01ae4     12 01 68 FC | 	wrlong	#0, result1
01ae8     00 24 06 F6 | 	mov	result1, #0
01aec     00 F0 06 F6 | 	mov	local79, #0
01af0                 | LR__0024
01af0                 | '     if cmd=12 then print "Midi program change, channel ";channel;" program ";b12
01af0     02 00 00 FF 
01af4     88 0E 06 F1 | 	add	objptr, ##1160
01af8     07 7B 02 FB | 	rdlong	local20, objptr
01afc     02 00 00 FF 
01b00     88 0E 86 F1 | 	sub	objptr, ##1160
01b04     0C 7A 0E F2 | 	cmp	local20, #12 wz
01b08     04 01 90 5D |  if_ne	jmp	#LR__0025
01b0c     3F FB 02 F6 | 	mov	local84, local22
01b10     07 FA 46 F7 | 	zerox	local84, #7
01b14     00 4A 06 F6 | 	mov	arg01, #0
01b18     68 32 B0 FD | 	call	#__system___getiolock_0102
01b1c     12 4B 02 F6 | 	mov	arg01, result1
01b20     90 1D B0 FD | 	call	#__system___lockmem
01b24     00 24 06 F6 | 	mov	result1, #0
01b28     00 70 06 F6 | 	mov	local15, #0
01b2c     2D 00 00 FF 
01b30     EA 72 06 F6 | 	mov	local16, ##@LR__0328
01b34     39 75 02 F6 | 	mov	local17, local16
01b38     00 76 06 F6 | 	mov	local18, #0
01b3c     00 4A 06 F6 | 	mov	arg01, #0
01b40     3A 4D 02 F6 | 	mov	arg02, local17
01b44     00 4E 06 F6 | 	mov	arg03, #0
01b48     E0 1F B0 FD | 	call	#__system___basic_print_string
01b4c     12 67 02 F6 | 	mov	local10, result1
01b50     00 68 06 F6 | 	mov	local11, #0
01b54     02 00 00 FF 
01b58     A0 0E 06 F1 | 	add	objptr, ##1184
01b5c     07 6D 02 FB | 	rdlong	local13, objptr
01b60     02 00 00 FF 
01b64     A0 0E 86 F1 | 	sub	objptr, ##1184
01b68     36 6B 02 F6 | 	mov	local12, local13
01b6c     00 6E 06 F6 | 	mov	local14, #0
01b70     0A 82 06 F6 | 	mov	local24, #10
01b74     00 4A 06 F6 | 	mov	arg01, #0
01b78     35 4D 02 F6 | 	mov	arg02, local12
01b7c     00 4E 06 F6 | 	mov	arg03, #0
01b80     0A 50 06 F6 | 	mov	arg04, #10
01b84     EC 1F B0 FD | 	call	#__system___basic_print_integer
01b88     12 85 02 F6 | 	mov	local25, result1
01b8c     00 86 06 F6 | 	mov	local26, #0
01b90     2D 00 00 FF 
01b94     08 89 06 F6 | 	mov	local27, ##@LR__0329
01b98     44 8B 02 F6 | 	mov	local28, local27
01b9c     00 90 06 F6 | 	mov	local31, #0
01ba0     00 4A 06 F6 | 	mov	arg01, #0
01ba4     45 4D 02 F6 | 	mov	arg02, local28
01ba8     00 4E 06 F6 | 	mov	arg03, #0
01bac     7C 1F B0 FD | 	call	#__system___basic_print_string
01bb0     12 93 02 F6 | 	mov	local32, result1
01bb4     00 94 06 F6 | 	mov	local33, #0
01bb8     7D 97 02 F6 | 	mov	local34, local84
01bbc     00 98 06 F6 | 	mov	local35, #0
01bc0     0A 9A 06 F6 | 	mov	local36, #10
01bc4     00 4A 06 F6 | 	mov	arg01, #0
01bc8     4B 4D 02 F6 | 	mov	arg02, local34
01bcc     00 4E 06 F6 | 	mov	arg03, #0
01bd0     0A 50 06 F6 | 	mov	arg04, #10
01bd4     E0 1F B0 FD | 	call	#__system___basic_print_unsigned
01bd8     12 9D 02 F6 | 	mov	local37, result1
01bdc     00 9E 06 F6 | 	mov	local38, #0
01be0     00 4A 06 F6 | 	mov	arg01, #0
01be4     0A 4C 06 F6 | 	mov	arg02, #10
01be8     00 4E 06 F6 | 	mov	arg03, #0
01bec     F0 1E B0 FD | 	call	#__system___basic_print_char
01bf0     01 24 06 F6 | 	mov	result1, #1
01bf4     01 A0 06 F6 | 	mov	local39, #1
01bf8     00 A2 06 F6 | 	mov	local40, #0
01bfc     00 4A 06 F6 | 	mov	arg01, #0
01c00     80 31 B0 FD | 	call	#__system___getiolock_0102
01c04     12 01 68 FC | 	wrlong	#0, result1
01c08     00 24 06 F6 | 	mov	result1, #0
01c0c     00 C2 06 F6 | 	mov	local56, #0
01c10                 | LR__0025
01c10                 | '     if cmd=13 then print "Midi mono aftertouch, channel ";channel;" value ";b12
01c10     02 00 00 FF 
01c14     88 0E 06 F1 | 	add	objptr, ##1160
01c18     07 7B 02 FB | 	rdlong	local20, objptr
01c1c     02 00 00 FF 
01c20     88 0E 86 F1 | 	sub	objptr, ##1160
01c24     0D 7A 0E F2 | 	cmp	local20, #13 wz
01c28     04 01 90 5D |  if_ne	jmp	#LR__0026
01c2c     3F FD 02 F6 | 	mov	local85, local22
01c30     07 FC 46 F7 | 	zerox	local85, #7
01c34     00 4A 06 F6 | 	mov	arg01, #0
01c38     48 31 B0 FD | 	call	#__system___getiolock_0102
01c3c     12 4B 02 F6 | 	mov	arg01, result1
01c40     70 1C B0 FD | 	call	#__system___lockmem
01c44     00 24 06 F6 | 	mov	result1, #0
01c48     00 70 06 F6 | 	mov	local15, #0
01c4c     2D 00 00 FF 
01c50     12 73 06 F6 | 	mov	local16, ##@LR__0330
01c54     39 75 02 F6 | 	mov	local17, local16
01c58     00 76 06 F6 | 	mov	local18, #0
01c5c     00 4A 06 F6 | 	mov	arg01, #0
01c60     3A 4D 02 F6 | 	mov	arg02, local17
01c64     00 4E 06 F6 | 	mov	arg03, #0
01c68     C0 1E B0 FD | 	call	#__system___basic_print_string
01c6c     12 67 02 F6 | 	mov	local10, result1
01c70     00 68 06 F6 | 	mov	local11, #0
01c74     02 00 00 FF 
01c78     A0 0E 06 F1 | 	add	objptr, ##1184
01c7c     07 6D 02 FB | 	rdlong	local13, objptr
01c80     02 00 00 FF 
01c84     A0 0E 86 F1 | 	sub	objptr, ##1184
01c88     36 6B 02 F6 | 	mov	local12, local13
01c8c     00 6E 06 F6 | 	mov	local14, #0
01c90     0A 82 06 F6 | 	mov	local24, #10
01c94     00 4A 06 F6 | 	mov	arg01, #0
01c98     35 4D 02 F6 | 	mov	arg02, local12
01c9c     00 4E 06 F6 | 	mov	arg03, #0
01ca0     0A 50 06 F6 | 	mov	arg04, #10
01ca4     CC 1E B0 FD | 	call	#__system___basic_print_integer
01ca8     12 85 02 F6 | 	mov	local25, result1
01cac     00 86 06 F6 | 	mov	local26, #0
01cb0     2D 00 00 FF 
01cb4     31 89 06 F6 | 	mov	local27, ##@LR__0331
01cb8     44 8B 02 F6 | 	mov	local28, local27
01cbc     00 90 06 F6 | 	mov	local31, #0
01cc0     00 4A 06 F6 | 	mov	arg01, #0
01cc4     45 4D 02 F6 | 	mov	arg02, local28
01cc8     00 4E 06 F6 | 	mov	arg03, #0
01ccc     5C 1E B0 FD | 	call	#__system___basic_print_string
01cd0     12 93 02 F6 | 	mov	local32, result1
01cd4     00 94 06 F6 | 	mov	local33, #0
01cd8     7E 97 02 F6 | 	mov	local34, local85
01cdc     00 98 06 F6 | 	mov	local35, #0
01ce0     0A 9A 06 F6 | 	mov	local36, #10
01ce4     00 4A 06 F6 | 	mov	arg01, #0
01ce8     4B 4D 02 F6 | 	mov	arg02, local34
01cec     00 4E 06 F6 | 	mov	arg03, #0
01cf0     0A 50 06 F6 | 	mov	arg04, #10
01cf4     C0 1E B0 FD | 	call	#__system___basic_print_unsigned
01cf8     12 9D 02 F6 | 	mov	local37, result1
01cfc     00 9E 06 F6 | 	mov	local38, #0
01d00     00 4A 06 F6 | 	mov	arg01, #0
01d04     0A 4C 06 F6 | 	mov	arg02, #10
01d08     00 4E 06 F6 | 	mov	arg03, #0
01d0c     D0 1D B0 FD | 	call	#__system___basic_print_char
01d10     01 24 06 F6 | 	mov	result1, #1
01d14     01 A0 06 F6 | 	mov	local39, #1
01d18     00 A2 06 F6 | 	mov	local40, #0
01d1c     00 4A 06 F6 | 	mov	arg01, #0
01d20     60 30 B0 FD | 	call	#__system___getiolock_0102
01d24     12 01 68 FC | 	wrlong	#0, result1
01d28     00 24 06 F6 | 	mov	result1, #0
01d2c     00 C2 06 F6 | 	mov	local56, #0
01d30                 | LR__0026
01d30                 | '     if cmd=14 then print "Midi pitch bend, channel ";channel;" value ";b11+b12 shl 7
01d30     02 00 00 FF 
01d34     88 0E 06 F1 | 	add	objptr, ##1160
01d38     07 7B 02 FB | 	rdlong	local20, objptr
01d3c     02 00 00 FF 
01d40     88 0E 86 F1 | 	sub	objptr, ##1160
01d44     0E 7A 0E F2 | 	cmp	local20, #14 wz
01d48     1C 01 90 5D |  if_ne	jmp	#LR__0027
01d4c     3E FF 02 F6 | 	mov	local86, local21
01d50     07 FE 46 F7 | 	zerox	local86, #7
01d54     3F 01 03 F6 | 	mov	local87, local22
01d58     07 00 47 F7 | 	zerox	local87, #7
01d5c     80 03 03 F6 | 	mov	local88, local87
01d60     07 02 67 F0 | 	shl	local88, #7
01d64     7F 05 03 F6 | 	mov	local89, local86
01d68     81 05 03 F1 | 	add	local89, local88
01d6c     00 4A 06 F6 | 	mov	arg01, #0
01d70     10 30 B0 FD | 	call	#__system___getiolock_0102
01d74     12 4B 02 F6 | 	mov	arg01, result1
01d78     38 1B B0 FD | 	call	#__system___lockmem
01d7c     00 24 06 F6 | 	mov	result1, #0
01d80     00 70 06 F6 | 	mov	local15, #0
01d84     2D 00 00 FF 
01d88     39 73 06 F6 | 	mov	local16, ##@LR__0332
01d8c     39 75 02 F6 | 	mov	local17, local16
01d90     00 76 06 F6 | 	mov	local18, #0
01d94     00 4A 06 F6 | 	mov	arg01, #0
01d98     3A 4D 02 F6 | 	mov	arg02, local17
01d9c     00 4E 06 F6 | 	mov	arg03, #0
01da0     88 1D B0 FD | 	call	#__system___basic_print_string
01da4     12 67 02 F6 | 	mov	local10, result1
01da8     00 68 06 F6 | 	mov	local11, #0
01dac     02 00 00 FF 
01db0     A0 0E 06 F1 | 	add	objptr, ##1184
01db4     07 6D 02 FB | 	rdlong	local13, objptr
01db8     02 00 00 FF 
01dbc     A0 0E 86 F1 | 	sub	objptr, ##1184
01dc0     36 6B 02 F6 | 	mov	local12, local13
01dc4     00 6E 06 F6 | 	mov	local14, #0
01dc8     0A 82 06 F6 | 	mov	local24, #10
01dcc     00 4A 06 F6 | 	mov	arg01, #0
01dd0     35 4D 02 F6 | 	mov	arg02, local12
01dd4     00 4E 06 F6 | 	mov	arg03, #0
01dd8     0A 50 06 F6 | 	mov	arg04, #10
01ddc     94 1D B0 FD | 	call	#__system___basic_print_integer
01de0     12 85 02 F6 | 	mov	local25, result1
01de4     00 86 06 F6 | 	mov	local26, #0
01de8     2D 00 00 FF 
01dec     53 89 06 F6 | 	mov	local27, ##@LR__0333
01df0     44 8B 02 F6 | 	mov	local28, local27
01df4     00 90 06 F6 | 	mov	local31, #0
01df8     00 4A 06 F6 | 	mov	arg01, #0
01dfc     45 4D 02 F6 | 	mov	arg02, local28
01e00     00 4E 06 F6 | 	mov	arg03, #0
01e04     24 1D B0 FD | 	call	#__system___basic_print_string
01e08     12 93 02 F6 | 	mov	local32, result1
01e0c     00 94 06 F6 | 	mov	local33, #0
01e10     82 97 02 F6 | 	mov	local34, local89
01e14     00 98 06 F6 | 	mov	local35, #0
01e18     0A 9A 06 F6 | 	mov	local36, #10
01e1c     00 4A 06 F6 | 	mov	arg01, #0
01e20     4B 4D 02 F6 | 	mov	arg02, local34
01e24     00 4E 06 F6 | 	mov	arg03, #0
01e28     0A 50 06 F6 | 	mov	arg04, #10
01e2c     44 1D B0 FD | 	call	#__system___basic_print_integer
01e30     12 9D 02 F6 | 	mov	local37, result1
01e34     00 9E 06 F6 | 	mov	local38, #0
01e38     00 4A 06 F6 | 	mov	arg01, #0
01e3c     0A 4C 06 F6 | 	mov	arg02, #10
01e40     00 4E 06 F6 | 	mov	arg03, #0
01e44     98 1C B0 FD | 	call	#__system___basic_print_char
01e48     01 24 06 F6 | 	mov	result1, #1
01e4c     01 A0 06 F6 | 	mov	local39, #1
01e50     00 A2 06 F6 | 	mov	local40, #0
01e54     00 4A 06 F6 | 	mov	arg01, #0
01e58     28 2F B0 FD | 	call	#__system___getiolock_0102
01e5c     12 01 68 FC | 	wrlong	#0, result1
01e60     00 24 06 F6 | 	mov	result1, #0
01e64     00 C2 06 F6 | 	mov	local56, #0
01e68                 | LR__0027
01e68                 | '     if cmd=15 then print "Novation control key "; b12 ' TODO Sysex has to be properly processed 
01e68     02 00 00 FF 
01e6c     88 0E 06 F1 | 	add	objptr, ##1160
01e70     07 D9 02 FB | 	rdlong	local67, objptr
01e74     02 00 00 FF 
01e78     88 0E 86 F1 | 	sub	objptr, ##1160
01e7c     0F D8 0E F2 | 	cmp	local67, #15 wz
01e80     C0 EC 9F 5D |  if_ne	jmp	#LR__0001
01e84     3F 07 03 F6 | 	mov	local90, local22
01e88     07 06 47 F7 | 	zerox	local90, #7
01e8c     00 D8 06 F6 | 	mov	local67, #0
01e90     00 4A 06 F6 | 	mov	arg01, #0
01e94     EC 2E B0 FD | 	call	#__system___getiolock_0102
01e98     12 4B 02 F6 | 	mov	arg01, result1
01e9c     14 1A B0 FD | 	call	#__system___lockmem
01ea0     00 24 06 F6 | 	mov	result1, #0
01ea4     00 70 06 F6 | 	mov	local15, #0
01ea8     2D 00 00 FF 
01eac     5B 73 06 F6 | 	mov	local16, ##@LR__0334
01eb0     39 75 02 F6 | 	mov	local17, local16
01eb4     00 76 06 F6 | 	mov	local18, #0
01eb8     00 4A 06 F6 | 	mov	arg01, #0
01ebc     3A 4D 02 F6 | 	mov	arg02, local17
01ec0     00 4E 06 F6 | 	mov	arg03, #0
01ec4     64 1C B0 FD | 	call	#__system___basic_print_string
01ec8     12 67 02 F6 | 	mov	local10, result1
01ecc     00 68 06 F6 | 	mov	local11, #0
01ed0     83 6B 02 F6 | 	mov	local12, local90
01ed4     00 6C 06 F6 | 	mov	local13, #0
01ed8     0A 6E 06 F6 | 	mov	local14, #10
01edc     00 4A 06 F6 | 	mov	arg01, #0
01ee0     35 4D 02 F6 | 	mov	arg02, local12
01ee4     00 4E 06 F6 | 	mov	arg03, #0
01ee8     0A 50 06 F6 | 	mov	arg04, #10
01eec     C8 1C B0 FD | 	call	#__system___basic_print_unsigned
01ef0     12 83 02 F6 | 	mov	local24, result1
01ef4     00 84 06 F6 | 	mov	local25, #0
01ef8     00 4A 06 F6 | 	mov	arg01, #0
01efc     0A 4C 06 F6 | 	mov	arg02, #10
01f00     00 4E 06 F6 | 	mov	arg03, #0
01f04     D8 1B B0 FD | 	call	#__system___basic_print_char
01f08     01 24 06 F6 | 	mov	result1, #1
01f0c     01 86 06 F6 | 	mov	local26, #1
01f10     00 88 06 F6 | 	mov	local27, #0
01f14     00 4A 06 F6 | 	mov	arg01, #0
01f18     68 2E B0 FD | 	call	#__system___getiolock_0102
01f1c     12 01 68 FC | 	wrlong	#0, result1
01f20     00 8A 06 F6 | 	mov	local28, #0
01f24     1C EC 9F FD | 	jmp	#LR__0001
01f28     AF F0 03 F6 | 	mov	ptra, fp
01f2c     BF 00 A0 FD | 	call	#popregs_
01f30                 | _program_ret
01f30     2D 00 64 FD | 	ret
01f34                 | 
01f34                 | ' 
01f34                 | ' 
01f34                 | ' ''---------- putpixel - put a pixel on the screen
01f34                 | ' 
01f34                 | ' pub putpixel1(x,y,c) |byte b
01f34                 | _hng030rm_spin2_putpixel1
01f34                 | ' 
01f34                 | ' 
01f34                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01f34     00 2A 06 F6 | 	mov	_var01, #0
01f38     00 4A 5E F2 | 	cmps	arg01, #0 wcz
01f3c     01 2A 66 36 |  if_ae	neg	_var01, #1
01f40     00 2C 06 F6 | 	mov	_var02, #0
01f44     90 0E 06 F1 | 	add	objptr, #144
01f48     07 2F 02 FB | 	rdlong	_var03, objptr
01f4c     05 2E 66 F0 | 	shl	_var03, #5
01f50     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
01f54     01 2C 66 C6 |  if_b	neg	_var02, #1
01f58     16 2B 02 F5 | 	and	_var01, _var02
01f5c     00 30 06 F6 | 	mov	_var04, #0
01f60     00 4C 5E F2 | 	cmps	arg02, #0 wcz
01f64     01 30 66 36 |  if_ae	neg	_var04, #1
01f68     18 2B 02 F5 | 	and	_var01, _var04
01f6c     00 32 06 F6 | 	mov	_var05, #0
01f70     04 0E 06 F1 | 	add	objptr, #4
01f74     07 35 02 FB | 	rdlong	_var06, objptr
01f78     94 0E 86 F1 | 	sub	objptr, #148
01f7c     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
01f80     01 32 66 C6 |  if_b	neg	_var05, #1
01f84     19 2B CA F7 | 	test	_var01, _var05 wz
01f88     8C 00 90 AD |  if_e	jmp	#LR__0030
01f8c     90 0E 06 F1 | 	add	objptr, #144
01f90     07 37 02 FB | 	rdlong	_var07, objptr
01f94     90 0E 86 F1 | 	sub	objptr, #144
01f98     02 36 66 F0 | 	shl	_var07, #2
01f9c     26 37 02 FD | 	qmul	_var07, arg02
01fa0     18 38 62 FD | 	getqx	_var08
01fa4     07 3B 02 FB | 	rdlong	_var09, objptr
01fa8     1C 3B 02 F1 | 	add	_var09, _var08
01fac     25 3D 02 F6 | 	mov	_var10, arg01
01fb0     03 3C 46 F0 | 	shr	_var10, #3
01fb4     1E 3B 02 F1 | 	add	_var09, _var10
01fb8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01fb8     1D 3F C2 FA | 	rdbyte	_var11, _var09
01fbc                 | '     if (c==0)
01fbc     00 4E 0E F2 | 	cmp	arg03, #0 wz
01fc0     18 00 90 5D |  if_ne	jmp	#LR__0028
01fc4     25 2B 52 F6 | 	abs	_var01, arg01 wc
01fc8     07 2A 06 F5 | 	and	_var01, #7
01fcc     15 2B 62 C6 |  if_b	neg	_var01, _var01
01fd0     15 41 C2 F9 | 	decod	_var12, _var01
01fd4                 | '       b:=b & !(1<<(x//8))
01fd4     20 3F 22 F5 | 	andn	_var11, _var12
01fd8                 | '     else
01fd8     14 00 90 FD | 	jmp	#LR__0029
01fdc                 | LR__0028
01fdc     25 2B 52 F6 | 	abs	_var01, arg01 wc
01fe0     07 2A 06 F5 | 	and	_var01, #7
01fe4     15 2B 62 C6 |  if_b	neg	_var01, _var01
01fe8     15 43 C2 F9 | 	decod	_var13, _var01
01fec                 | '       b:=b |(1<<(x//8))
01fec     21 3F 42 F5 | 	or	_var11, _var13
01ff0                 | LR__0029
01ff0     90 0E 06 F1 | 	add	objptr, #144
01ff4     07 45 02 FB | 	rdlong	_var14, objptr
01ff8     90 0E 86 F1 | 	sub	objptr, #144
01ffc     02 44 66 F0 | 	shl	_var14, #2
02000     26 45 02 FD | 	qmul	_var14, arg02
02004     18 46 62 FD | 	getqx	_var15
02008     07 49 02 FB | 	rdlong	_var16, objptr
0200c     23 49 02 F1 | 	add	_var16, _var15
02010     1E 49 02 F1 | 	add	_var16, _var10
02014                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
02014     24 3F 42 FC | 	wrbyte	_var11, _var16
02018                 | LR__0030
02018                 | _hng030rm_spin2_putpixel1_ret
02018     2D 00 64 FD | 	ret
0201c                 | 
0201c                 | ' 
0201c                 | ' 
0201c                 | ' pub putpixel2(x,y,c) |byte b
0201c                 | _hng030rm_spin2_putpixel2
0201c                 | ' 
0201c                 | ' 
0201c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
0201c     00 2A 06 F6 | 	mov	_var01, #0
02020     00 4A 5E F2 | 	cmps	arg01, #0 wcz
02024     01 2A 66 36 |  if_ae	neg	_var01, #1
02028     00 2C 06 F6 | 	mov	_var02, #0
0202c     90 0E 06 F1 | 	add	objptr, #144
02030     07 2F 02 FB | 	rdlong	_var03, objptr
02034     04 2E 66 F0 | 	shl	_var03, #4
02038     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
0203c     01 2C 66 C6 |  if_b	neg	_var02, #1
02040     16 2B 02 F5 | 	and	_var01, _var02
02044     00 30 06 F6 | 	mov	_var04, #0
02048     00 4C 5E F2 | 	cmps	arg02, #0 wcz
0204c     01 30 66 36 |  if_ae	neg	_var04, #1
02050     18 2B 02 F5 | 	and	_var01, _var04
02054     00 32 06 F6 | 	mov	_var05, #0
02058     04 0E 06 F1 | 	add	objptr, #4
0205c     07 35 02 FB | 	rdlong	_var06, objptr
02060     94 0E 86 F1 | 	sub	objptr, #148
02064     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
02068     01 32 66 C6 |  if_b	neg	_var05, #1
0206c     19 2B CA F7 | 	test	_var01, _var05 wz
02070     7C 00 90 AD |  if_e	jmp	#LR__0031
02074     90 0E 06 F1 | 	add	objptr, #144
02078     07 37 02 FB | 	rdlong	_var07, objptr
0207c     90 0E 86 F1 | 	sub	objptr, #144
02080     02 36 66 F0 | 	shl	_var07, #2
02084     26 37 02 FD | 	qmul	_var07, arg02
02088     18 38 62 FD | 	getqx	_var08
0208c     07 3B 02 FB | 	rdlong	_var09, objptr
02090     1C 3B 02 F1 | 	add	_var09, _var08
02094     25 3D 02 F6 | 	mov	_var10, arg01
02098     02 3C 46 F0 | 	shr	_var10, #2
0209c     1E 3B 02 F1 | 	add	_var09, _var10
020a0                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
020a0     1D 3F C2 FA | 	rdbyte	_var11, _var09
020a4     25 2B 52 F6 | 	abs	_var01, arg01 wc
020a8     03 2A 06 F5 | 	and	_var01, #3
020ac     15 2B 62 C6 |  if_b	neg	_var01, _var01
020b0     01 2A 66 F0 | 	shl	_var01, #1
020b4     03 40 06 F6 | 	mov	_var12, #3
020b8     15 41 62 F0 | 	shl	_var12, _var01
020bc                 | '     b:=b & !(%11<<((x//4)<<1))
020bc     20 3F 22 F5 | 	andn	_var11, _var12
020c0     15 4F 62 F0 | 	shl	arg03, _var01
020c4                 | '     b:=b |(c<<((x//4)<<1))
020c4     27 3F 42 F5 | 	or	_var11, arg03
020c8     90 0E 06 F1 | 	add	objptr, #144
020cc     07 43 02 FB | 	rdlong	_var13, objptr
020d0     90 0E 86 F1 | 	sub	objptr, #144
020d4     02 42 66 F0 | 	shl	_var13, #2
020d8     26 43 02 FD | 	qmul	_var13, arg02
020dc     18 44 62 FD | 	getqx	_var14
020e0     07 47 02 FB | 	rdlong	_var15, objptr
020e4     22 47 02 F1 | 	add	_var15, _var14
020e8     1E 47 02 F1 | 	add	_var15, _var10
020ec                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
020ec     23 3F 42 FC | 	wrbyte	_var11, _var15
020f0                 | LR__0031
020f0                 | _hng030rm_spin2_putpixel2_ret
020f0     2D 00 64 FD | 	ret
020f4                 | 
020f4                 | ' 
020f4                 | ' 
020f4                 | ' pub putpixel4(x,y,c) |byte b
020f4                 | _hng030rm_spin2_putpixel4
020f4                 | ' 
020f4                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
020f4     00 2A 06 F6 | 	mov	_var01, #0
020f8     00 4A 5E F2 | 	cmps	arg01, #0 wcz
020fc     01 2A 66 36 |  if_ae	neg	_var01, #1
02100     00 2C 06 F6 | 	mov	_var02, #0
02104     90 0E 06 F1 | 	add	objptr, #144
02108     07 2F 02 FB | 	rdlong	_var03, objptr
0210c     04 2E 66 F0 | 	shl	_var03, #4
02110     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
02114     01 2C 66 C6 |  if_b	neg	_var02, #1
02118     16 2B 02 F5 | 	and	_var01, _var02
0211c     00 30 06 F6 | 	mov	_var04, #0
02120     00 4C 5E F2 | 	cmps	arg02, #0 wcz
02124     01 30 66 36 |  if_ae	neg	_var04, #1
02128     18 2B 02 F5 | 	and	_var01, _var04
0212c     00 32 06 F6 | 	mov	_var05, #0
02130     04 0E 06 F1 | 	add	objptr, #4
02134     07 35 02 FB | 	rdlong	_var06, objptr
02138     94 0E 86 F1 | 	sub	objptr, #148
0213c     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
02140     01 32 66 C6 |  if_b	neg	_var05, #1
02144     19 2B CA F7 | 	test	_var01, _var05 wz
02148     7C 00 90 AD |  if_e	jmp	#LR__0032
0214c     90 0E 06 F1 | 	add	objptr, #144
02150     07 37 02 FB | 	rdlong	_var07, objptr
02154     90 0E 86 F1 | 	sub	objptr, #144
02158     02 36 66 F0 | 	shl	_var07, #2
0215c     26 37 02 FD | 	qmul	_var07, arg02
02160     18 38 62 FD | 	getqx	_var08
02164     07 3B 02 FB | 	rdlong	_var09, objptr
02168     1C 3B 02 F1 | 	add	_var09, _var08
0216c     25 3D 02 F6 | 	mov	_var10, arg01
02170     01 3C 46 F0 | 	shr	_var10, #1
02174     1E 3B 02 F1 | 	add	_var09, _var10
02178                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02178     1D 3F C2 FA | 	rdbyte	_var11, _var09
0217c     25 2B 52 F6 | 	abs	_var01, arg01 wc
02180     01 2A 06 F5 | 	and	_var01, #1
02184     15 2B 62 C6 |  if_b	neg	_var01, _var01
02188     02 2A 66 F0 | 	shl	_var01, #2
0218c     0F 40 06 F6 | 	mov	_var12, #15
02190     15 41 62 F0 | 	shl	_var12, _var01
02194                 | '     b:=b & !(%1111<<((x//2)<<2))
02194     20 3F 22 F5 | 	andn	_var11, _var12
02198     15 4F 62 F0 | 	shl	arg03, _var01
0219c                 | '     b:=b |(c<<((x//2)<<2))
0219c     27 3F 42 F5 | 	or	_var11, arg03
021a0     90 0E 06 F1 | 	add	objptr, #144
021a4     07 43 02 FB | 	rdlong	_var13, objptr
021a8     90 0E 86 F1 | 	sub	objptr, #144
021ac     02 42 66 F0 | 	shl	_var13, #2
021b0     26 43 02 FD | 	qmul	_var13, arg02
021b4     18 44 62 FD | 	getqx	_var14
021b8     07 47 02 FB | 	rdlong	_var15, objptr
021bc     22 47 02 F1 | 	add	_var15, _var14
021c0     1E 47 02 F1 | 	add	_var15, _var10
021c4                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
021c4     23 3F 42 FC | 	wrbyte	_var11, _var15
021c8                 | LR__0032
021c8                 | _hng030rm_spin2_putpixel4_ret
021c8     2D 00 64 FD | 	ret
021cc                 | 
021cc                 | ' 
021cc                 | ' 
021cc                 | ' pub putpixel8(x,y,c)
021cc                 | _hng030rm_spin2_putpixel8
021cc                 | ' 
021cc                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
021cc     00 2A 06 F6 | 	mov	_var01, #0
021d0     00 4A 5E F2 | 	cmps	arg01, #0 wcz
021d4     01 2A 66 36 |  if_ae	neg	_var01, #1
021d8     00 2C 06 F6 | 	mov	_var02, #0
021dc     90 0E 06 F1 | 	add	objptr, #144
021e0     07 2F 02 FB | 	rdlong	_var03, objptr
021e4     02 2E 66 F0 | 	shl	_var03, #2
021e8     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
021ec     01 2C 66 C6 |  if_b	neg	_var02, #1
021f0     16 2B 02 F5 | 	and	_var01, _var02
021f4     00 30 06 F6 | 	mov	_var04, #0
021f8     00 4C 5E F2 | 	cmps	arg02, #0 wcz
021fc     01 30 66 36 |  if_ae	neg	_var04, #1
02200     18 2B 02 F5 | 	and	_var01, _var04
02204     00 32 06 F6 | 	mov	_var05, #0
02208     04 0E 06 F1 | 	add	objptr, #4
0220c     07 35 02 FB | 	rdlong	_var06, objptr
02210     94 0E 86 F1 | 	sub	objptr, #148
02214     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
02218     01 32 66 C6 |  if_b	neg	_var05, #1
0221c     19 2B CA F7 | 	test	_var01, _var05 wz
02220     28 00 90 AD |  if_e	jmp	#LR__0033
02224     90 0E 06 F1 | 	add	objptr, #144
02228     07 37 02 FB | 	rdlong	_var07, objptr
0222c     90 0E 86 F1 | 	sub	objptr, #144
02230     02 36 66 F0 | 	shl	_var07, #2
02234     26 37 02 FD | 	qmul	_var07, arg02
02238     18 38 62 FD | 	getqx	_var08
0223c     07 3B 02 FB | 	rdlong	_var09, objptr
02240     1C 3B 02 F1 | 	add	_var09, _var08
02244     25 3B 02 F1 | 	add	_var09, arg01
02248                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02248     1D 4F 42 FC | 	wrbyte	arg03, _var09
0224c                 | LR__0033
0224c                 | _hng030rm_spin2_putpixel8_ret
0224c     2D 00 64 FD | 	ret
02250                 | 
02250                 | ' 
02250                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02250                 | ' 
02250                 | ' pub setbordercolor(r,g,b) | color
02250                 | _hng030rm_spin2_setbordercolor
02250     18 4A 66 F0 | 	shl	arg01, #24
02254     10 4C 66 F0 | 	shl	arg02, #16
02258     26 4B 02 F1 | 	add	arg01, arg02
0225c     08 4E 66 F0 | 	shl	arg03, #8
02260     27 4B 02 F1 | 	add	arg01, arg03
02264                 | ' 
02264                 | ' color:=r<<24+g<<16+b<<8
02264                 | ' bordercolor:=color
02264     2C 0E 06 F1 | 	add	objptr, #44
02268     07 4B 62 FC | 	wrlong	arg01, objptr
0226c     2C 0E 86 F1 | 	sub	objptr, #44
02270                 | _hng030rm_spin2_setbordercolor_ret
02270     2D 00 64 FD | 	ret
02274                 | 
02274                 | ' 
02274                 | ' 
02274                 | ' '*************************************************************************
02274                 | ' '                                                                        *
02274                 | ' '  Text functions                                                        *
02274                 | ' '                                                                        *
02274                 | ' '*************************************************************************
02274                 | ' 
02274                 | ' ''---------- Clear the screen, set its foreground/background color
02274                 | ' 
02274                 | ' pub cls(fc,bc)   :c
02274                 | _hng030rm_spin2_cls
02274     07 5A 05 F6 | 	mov	COUNT_, #7
02278     B0 00 A0 FD | 	call	#pushregs_
0227c     25 55 02 F6 | 	mov	local01, arg01
02280     26 57 02 F6 | 	mov	local02, arg02
02284                 | ' 
02284                 | ' if (graphmode<512)
02284     C4 0E 06 F1 | 	add	objptr, #196
02288     07 59 02 FB | 	rdlong	local03, objptr
0228c     C4 0E 86 F1 | 	sub	objptr, #196
02290     01 00 00 FF 
02294     00 58 5E F2 | 	cmps	local03, ##512 wcz
02298     34 00 90 3D |  if_ae	jmp	#LR__0034
0229c     2A 5B 02 F6 | 	mov	local04, local01
022a0     18 5A 66 F0 | 	shl	local04, #24
022a4     2B 5D 02 F6 | 	mov	local05, local02
022a8     10 5C 66 F0 | 	shl	local05, #16
022ac     2E 5B 02 F1 | 	add	local04, local05
022b0     20 5A 06 F1 | 	add	local04, #32
022b4                 | '   c:=fc<<24+bc<<16+$20
022b4                 | '   longfill(buf_ptr,c,buflen)
022b4     07 4B 02 FB | 	rdlong	arg01, objptr
022b8     30 0E 06 F1 | 	add	objptr, #48
022bc     07 4F 02 FB | 	rdlong	arg03, objptr
022c0     30 0E 86 F1 | 	sub	objptr, #48
022c4     2D 4D 02 F6 | 	mov	arg02, local04
022c8     A8 00 A0 FD | 	call	#\builtin_longfill_
022cc                 | ' else
022cc     AC 00 90 FD | 	jmp	#LR__0040
022d0                 | LR__0034
022d0                 | '   if (graphmode & 48) ==48
022d0     C4 0E 06 F1 | 	add	objptr, #196
022d4     07 59 02 FB | 	rdlong	local03, objptr
022d8     C4 0E 86 F1 | 	sub	objptr, #196
022dc     30 58 06 F5 | 	and	local03, #48
022e0     30 58 0E F2 | 	cmp	local03, #48 wz
022e4                 | '     c:=bc
022e4     2B 5B 02 A6 |  if_e	mov	local04, local02
022e8     74 00 90 AD |  if_e	jmp	#LR__0039
022ec                 | '   elseif (graphmode & 48) ==32
022ec     C4 0E 06 F1 | 	add	objptr, #196
022f0     07 59 02 FB | 	rdlong	local03, objptr
022f4     C4 0E 86 F1 | 	sub	objptr, #196
022f8     30 58 06 F5 | 	and	local03, #48
022fc     20 58 0E F2 | 	cmp	local03, #32 wz
02300     10 00 90 5D |  if_ne	jmp	#LR__0035
02304     2B 5B 02 F6 | 	mov	local04, local02
02308     04 5A 66 F0 | 	shl	local04, #4
0230c     2B 5B 02 F1 | 	add	local04, local02
02310                 | '     c:=bc<<4+bc
02310     4C 00 90 FD | 	jmp	#LR__0038
02314                 | LR__0035
02314                 | '   elseif (graphmode & 48) ==16
02314     C4 0E 06 F1 | 	add	objptr, #196
02318     07 59 02 FB | 	rdlong	local03, objptr
0231c     C4 0E 86 F1 | 	sub	objptr, #196
02320     30 58 06 F5 | 	and	local03, #48
02324     10 58 0E F2 | 	cmp	local03, #16 wz
02328     28 00 90 5D |  if_ne	jmp	#LR__0036
0232c     2B 5B 02 F6 | 	mov	local04, local02
02330     06 5A 66 F0 | 	shl	local04, #6
02334     2B 5F 02 F6 | 	mov	local06, local02
02338     04 5E 66 F0 | 	shl	local06, #4
0233c     2F 5B 02 F1 | 	add	local04, local06
02340     2B 61 02 F6 | 	mov	local07, local02
02344     02 60 66 F0 | 	shl	local07, #2
02348     30 5B 02 F1 | 	add	local04, local07
0234c     2B 5B 02 F1 | 	add	local04, local02
02350                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02350                 | '   else
02350     0C 00 90 FD | 	jmp	#LR__0037
02354                 | LR__0036
02354                 | '     if bc==1
02354     01 56 0E F2 | 	cmp	local02, #1 wz
02358                 | '       c:=255
02358     FF 5A 06 A6 |  if_e	mov	local04, #255
0235c                 | '     else
0235c                 | '       c:=0
0235c     00 5A 06 56 |  if_ne	mov	local04, #0
02360                 | LR__0037
02360                 | LR__0038
02360                 | LR__0039
02360     30 0E 06 F1 | 	add	objptr, #48
02364     07 4F 02 FB | 	rdlong	arg03, objptr
02368     30 0E 86 F1 | 	sub	objptr, #48
0236c     02 4E 66 F0 | 	shl	arg03, #2
02370                 | '   bytefill(buf_ptr,c,buflen*4)
02370     07 4B 02 FB | 	rdlong	arg01, objptr
02374     2D 4D 02 F6 | 	mov	arg02, local04
02378     A0 00 A0 FD | 	call	#\builtin_bytefill_
0237c                 | LR__0040
0237c                 | ' setwritecolors(fc,bc)
0237c                 | ' 
0237c                 | ' 
0237c                 | ' write_color:=ff
0237c     38 0E 06 F1 | 	add	objptr, #56
02380     07 55 62 FC | 	wrlong	local01, objptr
02384                 | ' write_background:=bb
02384     04 0E 06 F1 | 	add	objptr, #4
02388     07 57 62 FC | 	wrlong	local02, objptr
0238c                 | ' cursor_x:=0
0238c     08 0E 86 F1 | 	sub	objptr, #8
02390     07 01 48 FC | 	wrbyte	#0, objptr
02394                 | ' cursor_y:=0
02394     01 0E 06 F1 | 	add	objptr, #1
02398     07 01 48 FC | 	wrbyte	#0, objptr
0239c     35 0E 86 F1 | 	sub	objptr, #53
023a0     2D 25 02 F6 | 	mov	result1, local04
023a4     AF F0 03 F6 | 	mov	ptra, fp
023a8     BF 00 A0 FD | 	call	#popregs_
023ac                 | _hng030rm_spin2_cls_ret
023ac     2D 00 64 FD | 	ret
023b0                 | 
023b0                 | ' 
023b0                 | ' ''---------- Output a char at the cursor position, move the cursor
023b0                 | ' 
023b0                 | ' pub putchar(achar) | c,x,y
023b0                 | _hng030rm_spin2_putchar
023b0     12 5A 05 F6 | 	mov	COUNT_, #18
023b4     B0 00 A0 FD | 	call	#pushregs_
023b8     25 55 02 F6 | 	mov	local01, arg01
023bc                 | ' 
023bc                 | ' if achar==10
023bc     0A 54 0E F2 | 	cmp	local01, #10 wz
023c0     58 00 90 5D |  if_ne	jmp	#LR__0041
023c4                 | '   crlf()
023c4                 | ' 
023c4                 | ' cursor_x:=0
023c4     34 0E 06 F1 | 	add	objptr, #52
023c8     07 01 48 FC | 	wrbyte	#0, objptr
023cc                 | ' cursor_y+=1
023cc     01 0E 06 F1 | 	add	objptr, #1
023d0     07 57 C2 FA | 	rdbyte	local02, objptr
023d4     01 56 06 F1 | 	add	local02, #1
023d8     07 57 42 FC | 	wrbyte	local02, objptr
023dc                 | ' if cursor_y>lines-1
023dc     5F 0E 06 F1 | 	add	objptr, #95
023e0     07 57 02 FB | 	rdlong	local02, objptr
023e4     01 56 86 F1 | 	sub	local02, #1
023e8     5F 0E 86 F1 | 	sub	objptr, #95
023ec     07 59 C2 FA | 	rdbyte	local03, objptr
023f0     35 0E 86 F1 | 	sub	objptr, #53
023f4     2B 59 5A F2 | 	cmps	local03, local02 wcz
023f8     38 01 90 ED |  if_be	jmp	#LR__0044
023fc                 | '   scrollup()
023fc     40 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
02400     94 0E 06 F1 | 	add	objptr, #148
02404     07 5B 02 FB | 	rdlong	local04, objptr
02408     01 5A 86 F1 | 	sub	local04, #1
0240c                 | '   cursor_y:=lines-1
0240c     5F 0E 86 F1 | 	sub	objptr, #95
02410     07 5B 42 FC | 	wrbyte	local04, objptr
02414     35 0E 86 F1 | 	sub	objptr, #53
02418                 | ' else  
02418     18 01 90 FD | 	jmp	#LR__0044
0241c                 | LR__0041
0241c                 | '   x:=cursor_x
0241c     34 0E 06 F1 | 	add	objptr, #52
02420     07 5D C2 FA | 	rdbyte	local05, objptr
02424                 | '   y:=cursor_y
02424     01 0E 06 F1 | 	add	objptr, #1
02428     07 5F C2 FA | 	rdbyte	local06, objptr
0242c     03 0E 06 F1 | 	add	objptr, #3
02430     07 61 02 FB | 	rdlong	local07, objptr
02434     18 60 66 F0 | 	shl	local07, #24
02438     04 0E 06 F1 | 	add	objptr, #4
0243c     07 63 02 FB | 	rdlong	local08, objptr
02440     10 62 66 F0 | 	shl	local08, #16
02444     31 61 02 F1 | 	add	local07, local08
02448                 | '   c:=write_color<<24+write_background<<16
02448     54 0E 06 F1 | 	add	objptr, #84
0244c     07 65 02 FB | 	rdlong	local09, objptr
02450     90 0E 86 F1 | 	sub	objptr, #144
02454     2F 65 02 FD | 	qmul	local09, local06
02458     18 66 62 FD | 	getqx	local10
0245c     2E 67 02 F1 | 	add	local10, local05
02460     02 66 66 F0 | 	shl	local10, #2
02464     07 69 02 FB | 	rdlong	local11, objptr
02468     33 69 02 F1 | 	add	local11, local10
0246c     34 6B 02 FB | 	rdlong	local12, local11
02470     7F 00 00 FF 
02474     FF 6B 06 F5 | 	and	local12, ##65535
02478     30 6B 42 F5 | 	or	local12, local07
0247c                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
0247c     34 6B 62 FC | 	wrlong	local12, local11
02480     90 0E 06 F1 | 	add	objptr, #144
02484     07 65 02 FB | 	rdlong	local09, objptr
02488     90 0E 86 F1 | 	sub	objptr, #144
0248c     2F 65 02 FD | 	qmul	local09, local06
02490     18 6C 62 FD | 	getqx	local13
02494     2E 6D 02 F1 | 	add	local13, local05
02498     02 6C 66 F0 | 	shl	local13, #2
0249c     07 6F 02 FB | 	rdlong	local14, objptr
024a0     36 6F 02 F1 | 	add	local14, local13
024a4     37 71 02 FB | 	rdlong	local15, local14
024a8     FF 70 26 F5 | 	andn	local15, #255
024ac     FF 54 06 F5 | 	and	local01, #255
024b0     2A 71 42 F5 | 	or	local15, local01
024b4                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
024b4     37 71 62 FC | 	wrlong	local15, local14
024b8                 | '   cursor_x+=1
024b8     34 0E 06 F1 | 	add	objptr, #52
024bc     07 73 C2 FA | 	rdbyte	local16, objptr
024c0     01 72 06 F1 | 	add	local16, #1
024c4     07 73 42 FC | 	wrbyte	local16, objptr
024c8                 | '   if cursor_x==cpl
024c8     07 73 C2 FA | 	rdbyte	local16, objptr
024cc     5C 0E 06 F1 | 	add	objptr, #92
024d0     07 75 02 FB | 	rdlong	local17, objptr
024d4     90 0E 86 F1 | 	sub	objptr, #144
024d8     3A 73 0A F2 | 	cmp	local16, local17 wz
024dc     54 00 90 5D |  if_ne	jmp	#LR__0043
024e0                 | '     cursor_x:=0
024e0     34 0E 06 F1 | 	add	objptr, #52
024e4     07 01 48 FC | 	wrbyte	#0, objptr
024e8                 | '     cursor_y+=1
024e8     01 0E 06 F1 | 	add	objptr, #1
024ec     07 73 C2 FA | 	rdbyte	local16, objptr
024f0     01 72 06 F1 | 	add	local16, #1
024f4     07 73 42 FC | 	wrbyte	local16, objptr
024f8                 | '     if cursor_y>lines-1
024f8     5F 0E 06 F1 | 	add	objptr, #95
024fc     07 73 02 FB | 	rdlong	local16, objptr
02500     01 72 86 F1 | 	sub	local16, #1
02504     5F 0E 86 F1 | 	sub	objptr, #95
02508     07 75 C2 FA | 	rdbyte	local17, objptr
0250c     35 0E 86 F1 | 	sub	objptr, #53
02510     39 75 5A F2 | 	cmps	local17, local16 wcz
02514     1C 00 90 ED |  if_be	jmp	#LR__0042
02518                 | '       scrollup()
02518     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
0251c     94 0E 06 F1 | 	add	objptr, #148
02520     07 77 02 FB | 	rdlong	local18, objptr
02524     01 76 86 F1 | 	sub	local18, #1
02528                 | '       cursor_y:=lines-1
02528     5F 0E 86 F1 | 	sub	objptr, #95
0252c     07 77 42 FC | 	wrbyte	local18, objptr
02530     35 0E 86 F1 | 	sub	objptr, #53
02534                 | LR__0042
02534                 | LR__0043
02534                 | LR__0044
02534     AF F0 03 F6 | 	mov	ptra, fp
02538     BF 00 A0 FD | 	call	#popregs_
0253c                 | _hng030rm_spin2_putchar_ret
0253c     2D 00 64 FD | 	ret
02540                 | 
02540                 | ' 
02540                 | ' ''-----------  Scroll the screen one line up
02540                 | ' 
02540                 | ' pub scrollup() | i
02540                 | _hng030rm_spin2_scrollup
02540     0A 5A 05 F6 | 	mov	COUNT_, #10
02544     B0 00 A0 FD | 	call	#pushregs_
02548     90 0E 06 F1 | 	add	objptr, #144
0254c     07 55 02 FB | 	rdlong	local01, objptr
02550     90 0E 86 F1 | 	sub	objptr, #144
02554     02 54 66 F0 | 	shl	local01, #2
02558     07 4D 02 FB | 	rdlong	arg02, objptr
0255c     2A 4D 02 F1 | 	add	arg02, local01
02560     30 0E 06 F1 | 	add	objptr, #48
02564     07 4F 02 FB | 	rdlong	arg03, objptr
02568     60 0E 06 F1 | 	add	objptr, #96
0256c     07 57 02 FB | 	rdlong	local02, objptr
02570     90 0E 86 F1 | 	sub	objptr, #144
02574     2B 4F 82 F1 | 	sub	arg03, local02
02578                 | ' 
02578                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02578     07 4B 02 FB | 	rdlong	arg01, objptr
0257c     5C 12 B0 FD | 	call	#__system__longmove
02580                 | ' repeat i from buflen-cpl to buflen-1
02580     30 0E 06 F1 | 	add	objptr, #48
02584     07 59 02 FB | 	rdlong	local03, objptr
02588     60 0E 06 F1 | 	add	objptr, #96
0258c     07 57 02 FB | 	rdlong	local02, objptr
02590     2B 59 82 F1 | 	sub	local03, local02
02594     60 0E 86 F1 | 	sub	objptr, #96
02598     07 5B 02 FB | 	rdlong	local04, objptr
0259c     01 5A 86 F1 | 	sub	local04, #1
025a0     07 5D 02 FB | 	rdlong	local05, objptr
025a4     60 0E 06 F1 | 	add	objptr, #96
025a8     07 5F 02 FB | 	rdlong	local06, objptr
025ac     90 0E 86 F1 | 	sub	objptr, #144
025b0     2F 5D 82 F1 | 	sub	local05, local06
025b4     2E 5B 5A F2 | 	cmps	local04, local05 wcz
025b8     01 60 06 16 |  if_a	mov	local07, #1
025bc     01 60 66 E6 |  if_be	neg	local07, #1
025c0     30 5B 02 F1 | 	add	local04, local07
025c4     68 DA 9F FE | 	loc	pa,	#(@LR__0046-@LR__0045)
025c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
025cc                 | LR__0045
025cc     2C 63 02 F6 | 	mov	local08, local03
025d0     02 62 66 F0 | 	shl	local08, #2
025d4     07 65 02 FB | 	rdlong	local09, objptr
025d8     31 65 02 F1 | 	add	local09, local08
025dc     32 67 02 FB | 	rdlong	local10, local09
025e0     80 FF 7F FF 
025e4     00 66 06 F5 | 	and	local10, ##-65536
025e8     20 66 46 F5 | 	or	local10, #32
025ec                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
025ec     32 67 62 FC | 	wrlong	local10, local09
025f0     30 59 02 F1 | 	add	local03, local07
025f4     2D 59 0A F2 | 	cmp	local03, local04 wz
025f8     D0 FF 9F 5D |  if_ne	jmp	#LR__0045
025fc                 | LR__0046
025fc     AF F0 03 F6 | 	mov	ptra, fp
02600     BF 00 A0 FD | 	call	#popregs_
02604                 | _hng030rm_spin2_scrollup_ret
02604     2D 00 64 FD | 	ret
02608                 | 
02608                 | ' 
02608                 | ' 
02608                 | ' 
02608                 | ' '*************************************************************************
02608                 | ' '                                                                        *
02608                 | ' '  Mode setting and driver start                                                          *
02608                 | ' '                                                                        *
02608                 | ' '*************************************************************************
02608                 | ' 
02608                 | ' ''---------  Set the graphics mode
02608                 | ' 
02608                 | ' 
02608                 | ' 
02608                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02608                 | _hng030rm_spin2_setmode
02608     50 5A 05 F6 | 	mov	COUNT_, #80
0260c     B0 00 A0 FD | 	call	#pushregs_
02610     25 55 02 F6 | 	mov	local01, arg01
02614                 | ' 
02614                 | ' '' mode:tn_bb_cc_vv_hh
02614                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02614                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02614                 | ' 
02614                 | ' if mode==(512+192+48)
02614     01 00 00 FF 
02618     F0 54 0E F2 | 	cmp	local01, ##752 wz
0261c                 | '   return 'no RAM
0261c     1C 0A 90 AD |  if_e	jmp	#LR__0087
02620                 | ' 
02620                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02620     2A 57 02 F6 | 	mov	local02, local01
02624     06 56 46 F0 | 	shr	local02, #6
02628     07 56 06 F5 | 	and	local02, #7
0262c     08 56 26 F3 | 	fle	local02, #8
02630     2B 59 02 F6 | 	mov	local03, local02
02634     30 58 62 FD | 	jmprel	local03
02638                 | LR__0047
02638     20 00 90 FD | 	jmp	#LR__0048
0263c     58 00 90 FD | 	jmp	#LR__0049
02640     90 00 90 FD | 	jmp	#LR__0050
02644     C8 00 90 FD | 	jmp	#LR__0051
02648     00 01 90 FD | 	jmp	#LR__0052
0264c     38 01 90 FD | 	jmp	#LR__0053
02650     70 01 90 FD | 	jmp	#LR__0054
02654     A8 01 90 FD | 	jmp	#LR__0055
02658     E4 01 90 FD | 	jmp	#LR__0056
0265c                 | LR__0048
0265c                 | ' 
0265c                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
0265c     50 0E 06 F1 | 	add	objptr, #80
02660     07 4B 02 F6 | 	mov	arg01, objptr
02664     50 0E 86 F1 | 	sub	objptr, #80
02668     0E 00 00 FF 
0266c     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02670     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02674     2D 5D 02 F6 | 	mov	local05, local04
02678     10 5E 06 F6 | 	mov	local06, #16
0267c     2E 4D 02 F6 | 	mov	arg02, local05
02680     10 4E 06 F6 | 	mov	arg03, #16
02684     0E 00 00 FF 
02688     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
0268c     4C 11 B0 FD | 	call	#__system__longmove
02690     12 61 02 F6 | 	mov	local07, result1
02694     A8 01 90 FD | 	jmp	#LR__0056
02698                 | LR__0049
02698                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02698     50 0E 06 F1 | 	add	objptr, #80
0269c     07 4B 02 F6 | 	mov	arg01, objptr
026a0     50 0E 86 F1 | 	sub	objptr, #80
026a4     0E 00 00 FF 
026a8     98 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
026ac     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
026b0     2D 5D 02 F6 | 	mov	local05, local04
026b4     10 5E 06 F6 | 	mov	local06, #16
026b8     2E 4D 02 F6 | 	mov	arg02, local05
026bc     10 4E 06 F6 | 	mov	arg03, #16
026c0     0E 00 00 FF 
026c4     98 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
026c8     10 11 B0 FD | 	call	#__system__longmove
026cc     12 61 02 F6 | 	mov	local07, result1
026d0     6C 01 90 FD | 	jmp	#LR__0056
026d4                 | LR__0050
026d4                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
026d4     50 0E 06 F1 | 	add	objptr, #80
026d8     07 4B 02 F6 | 	mov	arg01, objptr
026dc     50 0E 86 F1 | 	sub	objptr, #80
026e0     0E 00 00 FF 
026e4     D8 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
026e8     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
026ec     2D 5D 02 F6 | 	mov	local05, local04
026f0     10 5E 06 F6 | 	mov	local06, #16
026f4     2E 4D 02 F6 | 	mov	arg02, local05
026f8     10 4E 06 F6 | 	mov	arg03, #16
026fc     0E 00 00 FF 
02700     D8 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02704     D4 10 B0 FD | 	call	#__system__longmove
02708     12 61 02 F6 | 	mov	local07, result1
0270c     30 01 90 FD | 	jmp	#LR__0056
02710                 | LR__0051
02710                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02710     50 0E 06 F1 | 	add	objptr, #80
02714     07 4B 02 F6 | 	mov	arg01, objptr
02718     50 0E 86 F1 | 	sub	objptr, #80
0271c     0E 00 00 FF 
02720     18 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02724     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02728     2D 5D 02 F6 | 	mov	local05, local04
0272c     10 5E 06 F6 | 	mov	local06, #16
02730     2E 4D 02 F6 | 	mov	arg02, local05
02734     10 4E 06 F6 | 	mov	arg03, #16
02738     0E 00 00 FF 
0273c     18 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02740     98 10 B0 FD | 	call	#__system__longmove
02744     12 61 02 F6 | 	mov	local07, result1
02748     F4 00 90 FD | 	jmp	#LR__0056
0274c                 | LR__0052
0274c                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
0274c     50 0E 06 F1 | 	add	objptr, #80
02750     07 4B 02 F6 | 	mov	arg01, objptr
02754     50 0E 86 F1 | 	sub	objptr, #80
02758     0E 00 00 FF 
0275c     58 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02760     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02764     2D 5D 02 F6 | 	mov	local05, local04
02768     10 5E 06 F6 | 	mov	local06, #16
0276c     2E 4D 02 F6 | 	mov	arg02, local05
02770     10 4E 06 F6 | 	mov	arg03, #16
02774     0E 00 00 FF 
02778     58 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
0277c     5C 10 B0 FD | 	call	#__system__longmove
02780     12 61 02 F6 | 	mov	local07, result1
02784     B8 00 90 FD | 	jmp	#LR__0056
02788                 | LR__0053
02788                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02788     50 0E 06 F1 | 	add	objptr, #80
0278c     07 4B 02 F6 | 	mov	arg01, objptr
02790     50 0E 86 F1 | 	sub	objptr, #80
02794     0E 00 00 FF 
02798     98 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
0279c     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
027a0     2D 5D 02 F6 | 	mov	local05, local04
027a4     10 5E 06 F6 | 	mov	local06, #16
027a8     2E 4D 02 F6 | 	mov	arg02, local05
027ac     10 4E 06 F6 | 	mov	arg03, #16
027b0     0E 00 00 FF 
027b4     98 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
027b8     20 10 B0 FD | 	call	#__system__longmove
027bc     12 61 02 F6 | 	mov	local07, result1
027c0     7C 00 90 FD | 	jmp	#LR__0056
027c4                 | LR__0054
027c4                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
027c4     50 0E 06 F1 | 	add	objptr, #80
027c8     07 4B 02 F6 | 	mov	arg01, objptr
027cc     50 0E 86 F1 | 	sub	objptr, #80
027d0     0E 00 00 FF 
027d4     D8 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
027d8     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
027dc     2D 5D 02 F6 | 	mov	local05, local04
027e0     10 5E 06 F6 | 	mov	local06, #16
027e4     2E 4D 02 F6 | 	mov	arg02, local05
027e8     10 4E 06 F6 | 	mov	arg03, #16
027ec     0E 00 00 FF 
027f0     D8 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
027f4     E4 0F B0 FD | 	call	#__system__longmove
027f8     12 61 02 F6 | 	mov	local07, result1
027fc     40 00 90 FD | 	jmp	#LR__0056
02800                 | LR__0055
02800                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02800     50 0E 06 F1 | 	add	objptr, #80
02804     07 63 02 F6 | 	mov	local08, objptr
02808     31 65 02 F6 | 	mov	local09, local08
0280c     0F 00 00 FF 
02810     18 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02814     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02818     2D 5D 02 F6 | 	mov	local05, local04
0281c     10 5E 06 F6 | 	mov	local06, #16
02820     32 4B 02 F6 | 	mov	arg01, local09
02824     2E 4D 02 F6 | 	mov	arg02, local05
02828     10 4E 06 F6 | 	mov	arg03, #16
0282c     50 0E 86 F1 | 	sub	objptr, #80
02830     0F 00 00 FF 
02834     18 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02838     A0 0F B0 FD | 	call	#__system__longmove
0283c     12 61 02 F6 | 	mov	local07, result1
02840                 | LR__0056
02840                 | ' 
02840                 | ' ' 4-bit graphics: do nothing with timings :)
02840                 | ' if mode<512
02840     01 00 00 FF 
02844     00 54 5E F2 | 	cmps	local01, ##512 wcz
02848     20 00 90 3D |  if_ae	jmp	#LR__0057
0284c     0C 00 00 FF 
02850     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02854     0B 67 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02858                 | '   palette_ptr:=@ataripalette
02858     18 0E 06 F1 | 	add	objptr, #24
0285c     07 67 62 FC | 	wrlong	local10, objptr
02860     18 0E 86 F1 | 	sub	objptr, #24
02864     0C 00 00 FF 
02868     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
0286c                 | LR__0057
0286c                 | ' 
0286c                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
0286c     2A 57 02 F6 | 	mov	local02, local01
02870     01 00 00 FF 
02874     30 56 06 F5 | 	and	local02, ##560
02878     01 00 00 FF 
0287c     30 56 0E F2 | 	cmp	local02, ##560 wz
02880     48 00 90 5D |  if_ne	jmp	#LR__0058
02884                 | '   timings[5]:=4
02884     64 0E 06 F1 | 	add	objptr, #100
02888     07 09 68 FC | 	wrlong	#4, objptr
0288c     18 0E 06 F1 | 	add	objptr, #24
02890     07 69 02 FB | 	rdlong	local11, objptr
02894     01 68 66 F0 | 	shl	local11, #1
02898                 | '   timings[11]:=timings[11]<<1
02898     07 69 62 FC | 	wrlong	local11, objptr
0289c                 | '   putpixel:=p8
0289c     6C 0E 06 F1 | 	add	objptr, #108
028a0     07 57 02 FB | 	rdlong	local02, objptr
028a4     10 0E 86 F1 | 	sub	objptr, #16
028a8     07 57 62 FC | 	wrlong	local02, objptr
028ac     0C 00 00 FF 
028b0     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
028b4     0B 6B 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
028b8                 | '   palette_ptr:=@ataripalette
028b8     C0 0E 86 F1 | 	sub	objptr, #192
028bc     07 6B 62 FC | 	wrlong	local12, objptr
028c0     18 0E 86 F1 | 	sub	objptr, #24
028c4     0C 00 00 FF 
028c8     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
028cc                 | LR__0058
028cc                 | ' 
028cc                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
028cc     2A 57 02 F6 | 	mov	local02, local01
028d0     01 00 00 FF 
028d4     30 56 06 F5 | 	and	local02, ##560
028d8     01 00 00 FF 
028dc     10 56 0E F2 | 	cmp	local02, ##528 wz
028e0     48 00 90 5D |  if_ne	jmp	#LR__0059
028e4                 | '   timings[5]:=16
028e4     64 0E 06 F1 | 	add	objptr, #100
028e8     07 21 68 FC | 	wrlong	#16, objptr
028ec     18 0E 06 F1 | 	add	objptr, #24
028f0     07 6D 02 FB | 	rdlong	local13, objptr
028f4     01 6C 46 F0 | 	shr	local13, #1
028f8                 | '   timings[11]:=timings[11]>>1
028f8     07 6D 62 FC | 	wrlong	local13, objptr
028fc                 | '   putpixel:=p2
028fc     64 0E 06 F1 | 	add	objptr, #100
02900     07 57 02 FB | 	rdlong	local02, objptr
02904     08 0E 86 F1 | 	sub	objptr, #8
02908     07 57 62 FC | 	wrlong	local02, objptr
0290c     0C 00 00 FF 
02910     08 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02914     0B 6F 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02918                 | '   palette_ptr:=@fourcolors
02918     C0 0E 86 F1 | 	sub	objptr, #192
0291c     07 6F 62 FC | 	wrlong	local14, objptr
02920     18 0E 86 F1 | 	sub	objptr, #24
02924     0C 00 00 FF 
02928     08 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
0292c                 | LR__0059
0292c                 | ' 
0292c                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
0292c     2A 57 02 F6 | 	mov	local02, local01
02930     01 00 00 FF 
02934     30 56 06 F5 | 	and	local02, ##560
02938     01 00 00 FF 
0293c     00 56 0E F2 | 	cmp	local02, ##512 wz
02940     48 00 90 5D |  if_ne	jmp	#LR__0060
02944                 | '   timings[5]:=32
02944     64 0E 06 F1 | 	add	objptr, #100
02948     07 41 68 FC | 	wrlong	#32, objptr
0294c     18 0E 06 F1 | 	add	objptr, #24
02950     07 71 02 FB | 	rdlong	local15, objptr
02954     02 70 46 F0 | 	shr	local15, #2
02958                 | '   timings[11]:=timings[11]>>2
02958     07 71 62 FC | 	wrlong	local15, objptr
0295c                 | '   putpixel:=p1
0295c     60 0E 06 F1 | 	add	objptr, #96
02960     07 57 02 FB | 	rdlong	local02, objptr
02964     04 0E 86 F1 | 	sub	objptr, #4
02968     07 57 62 FC | 	wrlong	local02, objptr
0296c     0C 00 00 FF 
02970     00 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02974     0B 73 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02978                 | '   palette_ptr:=@twocolors
02978     C0 0E 86 F1 | 	sub	objptr, #192
0297c     07 73 62 FC | 	wrlong	local16, objptr
02980     18 0E 86 F1 | 	sub	objptr, #24
02984     0C 00 00 FF 
02988     00 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
0298c                 | LR__0060
0298c                 | ' 
0298c                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
0298c     2A 57 02 F6 | 	mov	local02, local01
02990     01 00 00 FF 
02994     30 56 06 F5 | 	and	local02, ##560
02998     01 00 00 FF 
0299c     20 56 0E F2 | 	cmp	local02, ##544 wz
029a0     30 00 90 5D |  if_ne	jmp	#LR__0061
029a4                 | '   putpixel:=p4
029a4     E4 0E 06 F1 | 	add	objptr, #228
029a8     07 57 02 FB | 	rdlong	local02, objptr
029ac     0C 0E 86 F1 | 	sub	objptr, #12
029b0     07 57 62 FC | 	wrlong	local02, objptr
029b4     0C 00 00 FF 
029b8     18 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
029bc     0B 75 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
029c0                 | '   palette_ptr:=@vga16
029c0     C0 0E 86 F1 | 	sub	objptr, #192
029c4     07 75 62 FC | 	wrlong	local17, objptr
029c8     18 0E 86 F1 | 	sub	objptr, #24
029cc     0C 00 00 FF 
029d0     18 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
029d4                 | LR__0061
029d4                 | ' 
029d4                 | ' repeat i from 0 to 4
029d4     00 76 06 F6 | 	mov	local18, #0
029d8     68 D6 9F FE | 	loc	pa,	#(@LR__0063-@LR__0062)
029dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
029e0                 | LR__0062
029e0     3B 79 02 F6 | 	mov	local19, local18
029e4     02 78 66 F0 | 	shl	local19, #2
029e8     50 0E 06 F1 | 	add	objptr, #80
029ec     07 79 02 F1 | 	add	local19, objptr
029f0     2C 0E 86 F1 | 	sub	objptr, #44
029f4     07 7B 02 FB | 	rdlong	local20, objptr
029f8     24 0E 86 F1 | 	sub	objptr, #36
029fc     11 7A 66 F0 | 	shl	local20, #17
02a00     3C 7D 02 FB | 	rdlong	local21, local19
02a04     3D 7D 02 F1 | 	add	local21, local20
02a08     3E 7F 02 F6 | 	mov	local22, local21
02a0c     80 40 38 FF 
02a10     00 7E 06 F1 | 	add	local22, ##1887502336
02a14                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02a14     3C 7F 62 FC | 	wrlong	local22, local19
02a18     01 76 06 F1 | 	add	local18, #1
02a1c     05 76 5E F2 | 	cmps	local18, #5 wcz
02a20     BC FF 9F CD |  if_b	jmp	#LR__0062
02a24                 | LR__0063
02a24     24 0E 06 F1 | 	add	objptr, #36
02a28     07 81 02 FB | 	rdlong	local23, objptr
02a2c     11 80 66 F0 | 	shl	local23, #17
02a30     40 0E 06 F1 | 	add	objptr, #64
02a34     07 83 02 FB | 	rdlong	local24, objptr
02a38     40 83 02 F1 | 	add	local24, local23
02a3c                 | ' timings[5]:=timings[5]+hdmibase<<17
02a3c     07 83 62 FC | 	wrlong	local24, objptr
02a40                 | ' clkfreq:=timings[13]
02a40     20 0E 06 F1 | 	add	objptr, #32
02a44     07 57 02 FB | 	rdlong	local02, objptr
02a48     14 56 66 FC | 	wrlong	local02, #20
02a4c                 | ' hubset(timings[14])
02a4c     04 0E 06 F1 | 	add	objptr, #4
02a50     07 4B 02 FB | 	rdlong	arg01, objptr
02a54     88 0E 86 F1 | 	sub	objptr, #136
02a58     00 4A 62 FD | 	hubset	arg01
02a5c                 | ' waitms(1)
02a5c     01 4A 06 F6 | 	mov	arg01, #1
02a60     4C 0F B0 FD | 	call	#__system___waitms
02a64     2A 85 02 F6 | 	mov	local25, local01
02a68     03 84 06 F5 | 	and	local25, #3
02a6c     42 87 C2 F9 | 	decod	local26, local25
02a70                 | ' 
02a70                 | ' 
02a70                 | ' xzoom:=1<<(mode & 3)
02a70     CC 0E 06 F1 | 	add	objptr, #204
02a74     07 87 62 FC | 	wrlong	local26, objptr
02a78                 | ' 
02a78                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02a78     43 63 02 F6 | 	mov	local08, local26
02a7c     CC 0E 86 F1 | 	sub	objptr, #204
02a80     08 62 0E F2 | 	cmp	local08, #8 wz
02a84     24 00 90 5D |  if_ne	jmp	#LR__0064
02a88     2A 65 02 F6 | 	mov	local09, local01
02a8c     04 64 46 F0 | 	shr	local09, #4
02a90     03 64 06 F5 | 	and	local09, #3
02a94     03 64 0E F2 | 	cmp	local09, #3 wz
02a98     10 00 90 AD |  if_e	jmp	#LR__0064
02a9c                 | '   xzoom:=4
02a9c     04 56 06 F6 | 	mov	local02, #4
02aa0     CC 0E 06 F1 | 	add	objptr, #204
02aa4     07 09 68 FC | 	wrlong	#4, objptr
02aa8     CC 0E 86 F1 | 	sub	objptr, #204
02aac                 | LR__0064
02aac     2A 89 02 F6 | 	mov	local27, local01
02ab0     02 88 46 F0 | 	shr	local27, #2
02ab4     03 88 06 F5 | 	and	local27, #3
02ab8     44 8B C2 F9 | 	decod	local28, local27
02abc                 | ' 
02abc                 | ' yzoom:=1<<((mode>>2) & 3)
02abc     D0 0E 06 F1 | 	add	objptr, #208
02ac0     07 8B 62 FC | 	wrlong	local28, objptr
02ac4     04 0E 86 F1 | 	sub	objptr, #4
02ac8     07 63 02 FB | 	rdlong	local08, objptr
02acc     04 0E 06 F1 | 	add	objptr, #4
02ad0     07 5B 02 FB | 	rdlong	local04, objptr
02ad4     2D 63 02 FD | 	qmul	local08, local04
02ad8     18 8C 62 FD | 	getqx	local29
02adc                 | ' azoom:=xzoom*yzoom
02adc     04 0E 06 F1 | 	add	objptr, #4
02ae0     07 8D 62 FC | 	wrlong	local29, objptr
02ae4                 | ' 
02ae4                 | ' cpl:=timings[11]
02ae4     58 0E 86 F1 | 	sub	objptr, #88
02ae8     07 57 02 FB | 	rdlong	local02, objptr
02aec     14 0E 06 F1 | 	add	objptr, #20
02af0     07 57 62 FC | 	wrlong	local02, objptr
02af4     90 0E 86 F1 | 	sub	objptr, #144
02af8                 | ' if (mode<512)
02af8     01 00 00 FF 
02afc     00 54 5E F2 | 	cmps	local01, ##512 wcz
02b00     60 00 90 3D |  if_ae	jmp	#LR__0065
02b04     80 0E 06 F1 | 	add	objptr, #128
02b08     07 09 03 FB | 	rdlong	muldiva_, objptr
02b0c     04 08 47 F0 | 	shr	muldiva_, #4
02b10     50 0E 06 F1 | 	add	objptr, #80
02b14     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b18     D0 0E 86 F1 | 	sub	objptr, #208
02b1c     CC 00 A0 FD | 	call	#unsdivide_
02b20                 | '   lines:=(timings[12]>>4)+/yzoom
02b20     94 0E 06 F1 | 	add	objptr, #148
02b24     07 0B 63 FC | 	wrlong	muldivb_, objptr
02b28                 | '   if ((timings[12]>>4)+//yzoom) <>0
02b28     14 0E 86 F1 | 	sub	objptr, #20
02b2c     07 09 03 FB | 	rdlong	muldiva_, objptr
02b30     04 08 47 F0 | 	shr	muldiva_, #4
02b34     50 0E 06 F1 | 	add	objptr, #80
02b38     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b3c     D0 0E 86 F1 | 	sub	objptr, #208
02b40     CC 00 A0 FD | 	call	#unsdivide_
02b44     00 08 0F F2 | 	cmp	muldiva_, #0 wz
02b48     AC 00 90 AD |  if_e	jmp	#LR__0068
02b4c                 | '     lines +=1
02b4c     94 0E 06 F1 | 	add	objptr, #148
02b50     07 57 02 FB | 	rdlong	local02, objptr
02b54     01 56 06 F1 | 	add	local02, #1
02b58     07 57 62 FC | 	wrlong	local02, objptr
02b5c     94 0E 86 F1 | 	sub	objptr, #148
02b60                 | ' 
02b60                 | ' else
02b60     94 00 90 FD | 	jmp	#LR__0068
02b64                 | LR__0065
02b64     80 0E 06 F1 | 	add	objptr, #128
02b68     07 09 03 FB | 	rdlong	muldiva_, objptr
02b6c     50 0E 06 F1 | 	add	objptr, #80
02b70     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b74     D0 0E 86 F1 | 	sub	objptr, #208
02b78     D0 00 A0 FD | 	call	#divide_
02b7c                 | '   lines:=timings[12]/yzoom
02b7c     94 0E 06 F1 | 	add	objptr, #148
02b80     07 0B 63 FC | 	wrlong	muldivb_, objptr
02b84                 | '   if cpl//xzoom==0
02b84     04 0E 86 F1 | 	sub	objptr, #4
02b88     07 09 03 FB | 	rdlong	muldiva_, objptr
02b8c     3C 0E 06 F1 | 	add	objptr, #60
02b90     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b94     CC 0E 86 F1 | 	sub	objptr, #204
02b98     D0 00 A0 FD | 	call	#divide_
02b9c     00 08 0F F2 | 	cmp	muldiva_, #0 wz
02ba0     28 00 90 5D |  if_ne	jmp	#LR__0066
02ba4                 | '     cpl:=cpl/xzoom
02ba4     90 0E 06 F1 | 	add	objptr, #144
02ba8     07 09 03 FB | 	rdlong	muldiva_, objptr
02bac     3C 0E 06 F1 | 	add	objptr, #60
02bb0     07 0B 03 FB | 	rdlong	muldivb_, objptr
02bb4     CC 0E 86 F1 | 	sub	objptr, #204
02bb8     D0 00 A0 FD | 	call	#divide_
02bbc     90 0E 06 F1 | 	add	objptr, #144
02bc0     07 0B 63 FC | 	wrlong	muldivb_, objptr
02bc4     90 0E 86 F1 | 	sub	objptr, #144
02bc8                 | '   else
02bc8     2C 00 90 FD | 	jmp	#LR__0067
02bcc                 | LR__0066
02bcc     90 0E 06 F1 | 	add	objptr, #144
02bd0     07 09 03 FB | 	rdlong	muldiva_, objptr
02bd4     3C 0E 06 F1 | 	add	objptr, #60
02bd8     07 0B 03 FB | 	rdlong	muldivb_, objptr
02bdc     CC 0E 86 F1 | 	sub	objptr, #204
02be0     D0 00 A0 FD | 	call	#divide_
02be4     85 8F 02 F6 | 	mov	local30, muldivb_
02be8     01 8E 06 F1 | 	add	local30, #1
02bec                 | '     cpl:=cpl/xzoom+1
02bec     90 0E 06 F1 | 	add	objptr, #144
02bf0     07 8F 62 FC | 	wrlong	local30, objptr
02bf4     90 0E 86 F1 | 	sub	objptr, #144
02bf8                 | LR__0067
02bf8                 | LR__0068
02bf8     90 0E 06 F1 | 	add	objptr, #144
02bfc     07 63 02 FB | 	rdlong	local08, objptr
02c00     04 0E 06 F1 | 	add	objptr, #4
02c04     07 5B 02 FB | 	rdlong	local04, objptr
02c08     2D 63 02 FD | 	qmul	local08, local04
02c0c     18 90 62 FD | 	getqx	local31
02c10                 | ' 
02c10                 | ' buflen:=(cpl*lines)
02c10     64 0E 86 F1 | 	sub	objptr, #100
02c14     07 91 62 FC | 	wrlong	local31, objptr
02c18     30 0E 86 F1 | 	sub	objptr, #48
02c1c     02 90 66 F0 | 	shl	local31, #2
02c20     13 92 C6 F9 | 	decod	local32, #19
02c24     48 93 82 F1 | 	sub	local32, local31
02c28                 | ' buf_ptr:=$80000-4*buflen
02c28     07 93 62 FC | 	wrlong	local32, objptr
02c2c     50 0E 06 F1 | 	add	objptr, #80
02c30     07 95 02 F6 | 	mov	local33, objptr
02c34                 | ' mode_ptr:=@timings
02c34     3C 0E 86 F1 | 	sub	objptr, #60
02c38     07 95 62 FC | 	wrlong	local33, objptr
02c3c                 | ' graphmode:=mode
02c3c     B0 0E 06 F1 | 	add	objptr, #176
02c40     07 55 62 FC | 	wrlong	local01, objptr
02c44     C4 0E 86 F1 | 	sub	objptr, #196
02c48                 | ' makedl(mode)
02c48     2A 4B 02 F6 | 	mov	arg01, local01
02c4c                 | ' 
02c4c                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02c4c                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02c4c                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02c4c                 | ' 
02c4c                 | ' '   0 - display a up/down border line
02c4c                 | ' 
02c4c                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02c4c                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02c4c                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02c4c                 | ' '    nnnn - font line to display, 0..15
02c4c                 | ' '    llllll - character line, determines the cursor Y position
02c4c                 | ' 
02c4c                 | ' 
02c4c                 | ' if (mode &256==0)
02c4c     00 4B CE F7 | 	test	arg01, #256 wz
02c50     1C 00 90 5D |  if_ne	jmp	#LR__0069
02c54     07 97 02 FB | 	rdlong	local34, objptr
02c58     04 00 00 FF 
02c5c     00 97 86 F1 | 	sub	local34, ##2304
02c60                 | '   dl_ptr:=buf_ptr-4*576
02c60     1C 0E 06 F1 | 	add	objptr, #28
02c64     07 97 62 FC | 	wrlong	local34, objptr
02c68     1C 0E 86 F1 | 	sub	objptr, #28
02c6c                 | ' else
02c6c     18 00 90 FD | 	jmp	#LR__0070
02c70                 | LR__0069
02c70     07 99 02 FB | 	rdlong	local35, objptr
02c74     03 00 00 FF 
02c78     C0 99 86 F1 | 	sub	local35, ##1984
02c7c                 | '   dl_ptr:=buf_ptr-4*496
02c7c     1C 0E 06 F1 | 	add	objptr, #28
02c80     07 99 62 FC | 	wrlong	local35, objptr
02c84     1C 0E 86 F1 | 	sub	objptr, #28
02c88                 | LR__0070
02c88     25 9B 02 F6 | 	mov	local36, arg01
02c8c     02 9A 46 F0 | 	shr	local36, #2
02c90     03 9A 06 F5 | 	and	local36, #3
02c94                 | '  ' dl_ptr:=buf_ptr-4*540
02c94                 | ' 
02c94                 | ' vzoom:=((mode>>2) & 3)
02c94                 | ' 
02c94                 | ' 
02c94                 | ' if mode<512 '' text modes
02c94     01 00 00 FF 
02c98     00 4A 5E F2 | 	cmps	arg01, ##512 wcz
02c9c     E4 01 90 3D |  if_ae	jmp	#LR__0078
02ca0                 | ' 
02ca0                 | '   if timings[6]>0 'borders
02ca0     68 0E 06 F1 | 	add	objptr, #104
02ca4     07 9D 02 FB | 	rdlong	local37, objptr
02ca8     68 0E 86 F1 | 	sub	objptr, #104
02cac     00 9C 5E F2 | 	cmps	local37, #0 wcz
02cb0     D4 00 90 ED |  if_be	jmp	#LR__0075
02cb4                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02cb4     00 9E 06 F6 | 	mov	local38, #0
02cb8     68 0E 06 F1 | 	add	objptr, #104
02cbc     07 A1 02 FB | 	rdlong	local39, objptr
02cc0     68 0E 86 F1 | 	sub	objptr, #104
02cc4     01 A0 86 F1 | 	sub	local39, #1
02cc8     00 A0 5E F2 | 	cmps	local39, #0 wcz
02ccc     01 A2 06 16 |  if_a	mov	local40, #1
02cd0     01 A2 66 E6 |  if_be	neg	local40, #1
02cd4     51 A5 02 F6 | 	mov	local41, local40
02cd8     51 A1 02 F1 | 	add	local39, local40
02cdc     48 D3 9F FE | 	loc	pa,	#(@LR__0072-@LR__0071)
02ce0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02ce4                 | LR__0071
02ce4     4F A7 02 F6 | 	mov	local42, local38
02ce8     02 A6 66 F0 | 	shl	local42, #2
02cec     1C 0E 06 F1 | 	add	objptr, #28
02cf0     07 A9 02 FB | 	rdlong	local43, objptr
02cf4     1C 0E 86 F1 | 	sub	objptr, #28
02cf8     53 A9 02 F1 | 	add	local43, local42
02cfc                 | '       long[dl_ptr+4*i]:=$0
02cfc     54 01 68 FC | 	wrlong	#0, local43
02d00     52 9F 02 F1 | 	add	local38, local41
02d04     50 9F 0A F2 | 	cmp	local38, local39 wz
02d08     D8 FF 9F 5D |  if_ne	jmp	#LR__0071
02d0c                 | LR__0072
02d0c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02d0c     68 0E 06 F1 | 	add	objptr, #104
02d10     07 9F 02 FB | 	rdlong	local38, objptr
02d14     18 0E 06 F1 | 	add	objptr, #24
02d18     07 A3 02 FB | 	rdlong	local40, objptr
02d1c     51 9F 02 F1 | 	add	local38, local40
02d20     0C 0E 06 F1 | 	add	objptr, #12
02d24     07 AB 02 FB | 	rdlong	local44, objptr
02d28     01 AA 86 F1 | 	sub	local44, #1
02d2c     24 0E 86 F1 | 	sub	objptr, #36
02d30     07 AD 02 FB | 	rdlong	local45, objptr
02d34     18 0E 06 F1 | 	add	objptr, #24
02d38     07 AF 02 FB | 	rdlong	local46, objptr
02d3c     80 0E 86 F1 | 	sub	objptr, #128
02d40     57 AD 02 F1 | 	add	local45, local46
02d44     56 AB 5A F2 | 	cmps	local44, local45 wcz
02d48     01 B0 06 16 |  if_a	mov	local47, #1
02d4c     01 B0 66 E6 |  if_be	neg	local47, #1
02d50     58 B3 02 F6 | 	mov	local48, local47
02d54     58 AB 02 F1 | 	add	local44, local47
02d58     CC D2 9F FE | 	loc	pa,	#(@LR__0074-@LR__0073)
02d5c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d60                 | LR__0073
02d60     4F B5 02 F6 | 	mov	local49, local38
02d64     02 B4 66 F0 | 	shl	local49, #2
02d68     1C 0E 06 F1 | 	add	objptr, #28
02d6c     07 B7 02 FB | 	rdlong	local50, objptr
02d70     1C 0E 86 F1 | 	sub	objptr, #28
02d74     5A B7 02 F1 | 	add	local50, local49
02d78                 | '       long[dl_ptr+4*i]:=$0
02d78     5B 01 68 FC | 	wrlong	#0, local50
02d7c     59 9F 02 F1 | 	add	local38, local48
02d80     55 9F 0A F2 | 	cmp	local38, local44 wz
02d84     D8 FF 9F 5D |  if_ne	jmp	#LR__0073
02d88                 | LR__0074
02d88                 | LR__0075
02d88     10 B8 06 F6 | 	mov	local51, #16
02d8c     4D B9 62 F0 | 	shl	local51, local36
02d90                 | '   lpc:=16<<vzoom
02d90                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02d90     68 0E 06 F1 | 	add	objptr, #104
02d94     07 9F 02 FB | 	rdlong	local38, objptr
02d98     4F BB 02 F6 | 	mov	local52, local38
02d9c     18 0E 06 F1 | 	add	objptr, #24
02da0     07 BD 02 FB | 	rdlong	local53, objptr
02da4     5E BB 02 F1 | 	add	local52, local53
02da8     01 BA 86 F1 | 	sub	local52, #1
02dac     18 0E 86 F1 | 	sub	objptr, #24
02db0     07 B1 02 FB | 	rdlong	local47, objptr
02db4     68 0E 86 F1 | 	sub	objptr, #104
02db8     58 BB 5A F2 | 	cmps	local52, local47 wcz
02dbc     01 BE 06 16 |  if_a	mov	local54, #1
02dc0     01 BE 66 E6 |  if_be	neg	local54, #1
02dc4     5F C1 02 F6 | 	mov	local55, local54
02dc8     5F BB 02 F1 | 	add	local52, local54
02dcc     E0 D2 9F FE | 	loc	pa,	#(@LR__0077-@LR__0076)
02dd0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02dd4                 | LR__0076
02dd4     4F 09 03 F6 | 	mov	muldiva_, local38
02dd8     68 0E 06 F1 | 	add	objptr, #104
02ddc     07 C3 02 FB | 	rdlong	local56, objptr
02de0     68 0E 86 F1 | 	sub	objptr, #104
02de4     61 09 83 F1 | 	sub	muldiva_, local56
02de8     5C 0B 03 F6 | 	mov	muldivb_, local51
02dec     CC 00 A0 FD | 	call	#unsdivide_
02df0     4D 09 43 F0 | 	shr	muldiva_, local36
02df4                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
02df4     84 C5 02 F6 | 	mov	local57, muldiva_
02df8     4F 09 03 F6 | 	mov	muldiva_, local38
02dfc     68 0E 06 F1 | 	add	objptr, #104
02e00     07 C3 02 FB | 	rdlong	local56, objptr
02e04     68 0E 86 F1 | 	sub	objptr, #104
02e08     61 09 83 F1 | 	sub	muldiva_, local56
02e0c     5C 0B 03 F6 | 	mov	muldivb_, local51
02e10     CC 00 A0 FD | 	call	#unsdivide_
02e14     85 C7 02 F6 | 	mov	local58, muldivb_
02e18                 | '     charline:=(i-timings[6])+/lpc
02e18     90 0E 06 F1 | 	add	objptr, #144
02e1c     07 C3 02 FB | 	rdlong	local56, objptr
02e20     90 0E 86 F1 | 	sub	objptr, #144
02e24     63 C3 02 FD | 	qmul	local56, local58
02e28     18 C8 62 FD | 	getqx	local59
02e2c     02 C8 66 F0 | 	shl	local59, #2
02e30     07 CB 02 FB | 	rdlong	local60, objptr
02e34     64 CB 02 F1 | 	add	local60, local59
02e38     25 CD 02 F6 | 	mov	local61, arg01
02e3c     03 CC 06 F5 | 	and	local61, #3
02e40     66 CB 02 F1 | 	add	local60, local61
02e44                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
02e44     0C CA 66 F0 | 	shl	local60, #12
02e48     08 C4 66 F0 | 	shl	local57, #8
02e4c     62 CB 02 F1 | 	add	local60, local57
02e50     02 C6 66 F0 | 	shl	local58, #2
02e54     63 CB 02 F1 | 	add	local60, local58
02e58     01 CA 06 F1 | 	add	local60, #1
02e5c     4F CF 02 F6 | 	mov	local62, local38
02e60     02 CE 66 F0 | 	shl	local62, #2
02e64     1C 0E 06 F1 | 	add	objptr, #28
02e68     07 D1 02 FB | 	rdlong	local63, objptr
02e6c     1C 0E 86 F1 | 	sub	objptr, #28
02e70     67 D1 02 F1 | 	add	local63, local62
02e74                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
02e74     68 CB 62 FC | 	wrlong	local60, local63
02e78     60 9F 02 F1 | 	add	local38, local55
02e7c     5D 9F 0A F2 | 	cmp	local38, local52 wz
02e80     50 FF 9F 5D |  if_ne	jmp	#LR__0076
02e84                 | LR__0077
02e84                 | LR__0078
02e84                 | ' 
02e84                 | ' 
02e84                 | ' 
02e84                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
02e84     01 00 00 FF 
02e88     00 4A 5E F2 | 	cmps	arg01, ##512 wcz
02e8c     AC 01 90 CD |  if_b	jmp	#LR__0086
02e90                 | ' 
02e90                 | '   if timings[6]>0 'borders
02e90     68 0E 06 F1 | 	add	objptr, #104
02e94     07 9D 02 FB | 	rdlong	local37, objptr
02e98     68 0E 86 F1 | 	sub	objptr, #104
02e9c     00 9C 5E F2 | 	cmps	local37, #0 wcz
02ea0     D4 00 90 ED |  if_be	jmp	#LR__0083
02ea4                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02ea4     00 9E 06 F6 | 	mov	local38, #0
02ea8     68 0E 06 F1 | 	add	objptr, #104
02eac     07 D3 02 FB | 	rdlong	local64, objptr
02eb0     68 0E 86 F1 | 	sub	objptr, #104
02eb4     01 D2 86 F1 | 	sub	local64, #1
02eb8     00 D2 5E F2 | 	cmps	local64, #0 wcz
02ebc     01 A2 06 16 |  if_a	mov	local40, #1
02ec0     01 A2 66 E6 |  if_be	neg	local40, #1
02ec4     51 D5 02 F6 | 	mov	local65, local40
02ec8     51 D3 02 F1 | 	add	local64, local40
02ecc     58 D1 9F FE | 	loc	pa,	#(@LR__0080-@LR__0079)
02ed0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02ed4                 | LR__0079
02ed4     4F D7 02 F6 | 	mov	local66, local38
02ed8     02 D6 66 F0 | 	shl	local66, #2
02edc     1C 0E 06 F1 | 	add	objptr, #28
02ee0     07 D9 02 FB | 	rdlong	local67, objptr
02ee4     1C 0E 86 F1 | 	sub	objptr, #28
02ee8     6B D9 02 F1 | 	add	local67, local66
02eec                 | '       long[dl_ptr+4*i]:=$0
02eec     6C 01 68 FC | 	wrlong	#0, local67
02ef0     6A 9F 02 F1 | 	add	local38, local65
02ef4     69 9F 0A F2 | 	cmp	local38, local64 wz
02ef8     D8 FF 9F 5D |  if_ne	jmp	#LR__0079
02efc                 | LR__0080
02efc                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02efc     68 0E 06 F1 | 	add	objptr, #104
02f00     07 9F 02 FB | 	rdlong	local38, objptr
02f04     18 0E 06 F1 | 	add	objptr, #24
02f08     07 A3 02 FB | 	rdlong	local40, objptr
02f0c     51 9F 02 F1 | 	add	local38, local40
02f10     0C 0E 06 F1 | 	add	objptr, #12
02f14     07 DB 02 FB | 	rdlong	local68, objptr
02f18     01 DA 86 F1 | 	sub	local68, #1
02f1c     24 0E 86 F1 | 	sub	objptr, #36
02f20     07 AD 02 FB | 	rdlong	local45, objptr
02f24     18 0E 06 F1 | 	add	objptr, #24
02f28     07 AF 02 FB | 	rdlong	local46, objptr
02f2c     80 0E 86 F1 | 	sub	objptr, #128
02f30     57 AD 02 F1 | 	add	local45, local46
02f34     56 DB 5A F2 | 	cmps	local68, local45 wcz
02f38     01 B0 06 16 |  if_a	mov	local47, #1
02f3c     01 B0 66 E6 |  if_be	neg	local47, #1
02f40     58 DD 02 F6 | 	mov	local69, local47
02f44     58 DB 02 F1 | 	add	local68, local47
02f48     DC D0 9F FE | 	loc	pa,	#(@LR__0082-@LR__0081)
02f4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02f50                 | LR__0081
02f50     4F DF 02 F6 | 	mov	local70, local38
02f54     02 DE 66 F0 | 	shl	local70, #2
02f58     1C 0E 06 F1 | 	add	objptr, #28
02f5c     07 E1 02 FB | 	rdlong	local71, objptr
02f60     1C 0E 86 F1 | 	sub	objptr, #28
02f64     6F E1 02 F1 | 	add	local71, local70
02f68                 | '       long[dl_ptr+4*i]:=$0
02f68     70 01 68 FC | 	wrlong	#0, local71
02f6c     6E 9F 02 F1 | 	add	local38, local69
02f70     6D 9F 0A F2 | 	cmp	local38, local68 wz
02f74     D8 FF 9F 5D |  if_ne	jmp	#LR__0081
02f78                 | LR__0082
02f78                 | LR__0083
02f78                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02f78     68 0E 06 F1 | 	add	objptr, #104
02f7c     07 9F 02 FB | 	rdlong	local38, objptr
02f80     4F E3 02 F6 | 	mov	local72, local38
02f84     18 0E 06 F1 | 	add	objptr, #24
02f88     07 BD 02 FB | 	rdlong	local53, objptr
02f8c     5E E3 02 F1 | 	add	local72, local53
02f90     01 E2 86 F1 | 	sub	local72, #1
02f94     18 0E 86 F1 | 	sub	objptr, #24
02f98     07 B1 02 FB | 	rdlong	local47, objptr
02f9c     68 0E 86 F1 | 	sub	objptr, #104
02fa0     58 E3 5A F2 | 	cmps	local72, local47 wcz
02fa4     01 BE 06 16 |  if_a	mov	local54, #1
02fa8     01 BE 66 E6 |  if_be	neg	local54, #1
02fac     5F E5 02 F6 | 	mov	local73, local54
02fb0     5F E3 02 F1 | 	add	local72, local54
02fb4     C8 D0 9F FE | 	loc	pa,	#(@LR__0085-@LR__0084)
02fb8     93 00 A0 FD | 	call	#FCACHE_LOAD_
02fbc                 | LR__0084
02fbc     4F E7 02 F6 | 	mov	local74, local38
02fc0     68 0E 06 F1 | 	add	objptr, #104
02fc4     07 C3 02 FB | 	rdlong	local56, objptr
02fc8     61 E7 82 F1 | 	sub	local74, local56
02fcc     4D E7 42 F0 | 	shr	local74, local36
02fd0     28 0E 06 F1 | 	add	objptr, #40
02fd4     07 C3 02 FB | 	rdlong	local56, objptr
02fd8     90 0E 86 F1 | 	sub	objptr, #144
02fdc     73 C3 02 FD | 	qmul	local56, local74
02fe0     18 E8 62 FD | 	getqx	local75
02fe4     02 E8 66 F0 | 	shl	local75, #2
02fe8     07 EB 02 FB | 	rdlong	local76, objptr
02fec     74 EB 02 F1 | 	add	local76, local75
02ff0     25 ED 02 F6 | 	mov	local77, arg01
02ff4     03 EC 06 F5 | 	and	local77, #3
02ff8     76 EB 02 F1 | 	add	local76, local77
02ffc                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
02ffc     0C EA 66 F0 | 	shl	local76, #12
03000     02 EA 06 F1 | 	add	local76, #2
03004     25 EF 02 F6 | 	mov	local78, arg01
03008     30 EE 06 F5 | 	and	local78, #48
0300c     02 EE 46 F0 | 	shr	local78, #2
03010     77 EB 02 F1 | 	add	local76, local78
03014     4F F1 02 F6 | 	mov	local79, local38
03018     02 F0 66 F0 | 	shl	local79, #2
0301c     1C 0E 06 F1 | 	add	objptr, #28
03020     07 F3 02 FB | 	rdlong	local80, objptr
03024     1C 0E 86 F1 | 	sub	objptr, #28
03028     78 F3 02 F1 | 	add	local80, local79
0302c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
0302c     79 EB 62 FC | 	wrlong	local76, local80
03030     72 9F 02 F1 | 	add	local38, local73
03034     71 9F 0A F2 | 	cmp	local38, local72 wz
03038     80 FF 9F 5D |  if_ne	jmp	#LR__0084
0303c                 | LR__0085
0303c                 | LR__0086
0303c                 | LR__0087
0303c     AF F0 03 F6 | 	mov	ptra, fp
03040     BF 00 A0 FD | 	call	#popregs_
03044                 | _hng030rm_spin2_setmode_ret
03044     2D 00 64 FD | 	ret
03048                 | 
03048                 | ' 
03048                 | ' pub serialcog()| rr, mrr, b, mb, midireport, kbmreport
03048                 | _retrocog_spin2_serialcog
03048     19 5A 05 F6 | 	mov	COUNT_, #25
0304c     B0 00 A0 FD | 	call	#pushregs_
03050                 | ' 
03050                 | ' 'start serial and midi
03050                 | ' 
03050                 | ' serial_start(rxpin, txpin, baudrate)
03050     20 4A 06 F6 | 	mov	arg01, #32
03054     21 4C 06 F6 | 	mov	arg02, #33
03058     A6 0E 00 FF 
0305c     00 4E 06 F6 | 	mov	arg03, ##1920000
03060     AC 04 B0 FD | 	call	#_retrocog_spin2_serial_start
03064                 | ' serial_start(midiin,midiout,mbaudrate)
03064     3D 00 00 FF 
03068     12 54 06 F6 | 	mov	local01, ##31250
0306c     1D 4A 06 F6 | 	mov	arg01, #29
03070     1E 4C 06 F6 | 	mov	arg02, #30
03074     3D 00 00 FF 
03078     12 4E 06 F6 | 	mov	arg03, ##31250
0307c     90 04 B0 FD | 	call	#_retrocog_spin2_serial_start
03080                 | ' 
03080                 | ' mb:=(-1)
03080     01 56 66 F6 | 	neg	local02, #1
03084                 | ' b:=(-1)
03084     01 58 66 F6 | 	neg	local03, #1
03088                 | ' 
03088                 | ' mousefront:=0
03088     00 5A 06 F6 | 	mov	local04, #0
0308c     08 0E 06 F1 | 	add	objptr, #8
03090     07 01 68 FC | 	wrlong	#0, objptr
03094                 | ' mousetail:=0
03094     04 0E 06 F1 | 	add	objptr, #4
03098     07 01 68 FC | 	wrlong	#0, objptr
0309c     0C 0E 86 F1 | 	sub	objptr, #12
030a0                 | ' kbdfront:=0
030a0     07 01 68 FC | 	wrlong	#0, objptr
030a4                 | ' kbdtail:=0
030a4     04 0E 06 F1 | 	add	objptr, #4
030a8     07 01 68 FC | 	wrlong	#0, objptr
030ac                 | ' midifront:=0
030ac     0C 0E 06 F1 | 	add	objptr, #12
030b0     07 01 68 FC | 	wrlong	#0, objptr
030b4                 | ' miditail:=0
030b4     04 0E 06 F1 | 	add	objptr, #4
030b8     07 01 68 FC | 	wrlong	#0, objptr
030bc                 | ' long[$30]:=0
030bc     30 00 6C FC | 	wrlong	#0, #48
030c0                 | ' long[$34]:=0
030c0     34 00 6C FC | 	wrlong	#0, #52
030c4     14 0E 86 F1 | 	sub	objptr, #20
030c8                 | ' long[$38]:=0
030c8     38 00 6C FC | 	wrlong	#0, #56
030cc                 | ' 
030cc                 | ' repeat
030cc                 | LR__0088
030cc                 | ' 
030cc                 | '   repeat 
030cc                 | LR__0089
030cc                 | '     rr:=rxcheck(rxpin)
030cc     20 4A 06 F6 | 	mov	arg01, #32
030d0     B0 04 B0 FD | 	call	#_retrocog_spin2_rxcheck
030d4     12 5D 02 F6 | 	mov	local05, result1
030d8                 | '     mrr:=rxcheck(midiin)
030d8     1D 5A 06 F6 | 	mov	local04, #29
030dc     1D 4A 06 F6 | 	mov	arg01, #29
030e0     A0 04 B0 FD | 	call	#_retrocog_spin2_rxcheck
030e4     12 5F 02 F6 | 	mov	local06, result1
030e8     2F 61 02 F6 | 	mov	local07, local06
030ec     00 5C 5E F2 | 	cmps	local05, #0 wcz
030f0     08 00 90 3D |  if_ae	jmp	#LR__0090
030f4     00 60 5E F2 | 	cmps	local07, #0 wcz
030f8     D0 FF 9F CD |  if_b	jmp	#LR__0089
030fc                 | LR__0090
030fc                 | ' 
030fc                 | '   until rr>=0 || mrr>=0  
030fc                 | ' 
030fc                 | '   
030fc                 | ' ' midi. Must be >= $80 for a command
030fc                 | ' '$80-$8F - 3 bytes note off. note, velocity
030fc                 | ' '$90-$9F - 3 bytes note on, note, velocity
030fc                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
030fc                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
030fc                 | ' '$C0-$CF - 2 bytes program change
030fc                 | ' '$D0-$DF - 2 bytes mono aftertouch
030fc                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
030fc                 | ' '$F0-$FF - 1 byte
030fc                 | '   
030fc                 | ' 
030fc                 | '     
030fc                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
030fc     80 60 5E F2 | 	cmps	local07, #128 wcz
03100     08 00 90 CD |  if_b	jmp	#LR__0091
03104     BF 60 5E F2 | 	cmps	local07, #191 wcz
03108     10 00 90 ED |  if_be	jmp	#LR__0092
0310c                 | LR__0091
0310c     E0 60 5E F2 | 	cmps	local07, #224 wcz
03110     1C 00 90 CD |  if_b	jmp	#LR__0093
03114     EF 60 5E F2 | 	cmps	local07, #239 wcz
03118     14 00 90 1D |  if_a	jmp	#LR__0093
0311c                 | LR__0092
0311c                 | '     mb:=2
0311c     02 56 06 F6 | 	mov	local02, #2
03120     30 5B 02 F6 | 	mov	local04, local07
03124     18 5A 66 F0 | 	shl	local04, #24
03128     2D 63 02 F6 | 	mov	local08, local04
0312c                 | '     midireport:=mrr<<24
0312c     31 65 02 F6 | 	mov	local09, local08
03130                 | LR__0093
03130                 | ' 
03130                 | '   if (mrr>=$C0) && (mrr<=$DF)
03130     C0 60 5E F2 | 	cmps	local07, #192 wcz
03134     1C 00 90 CD |  if_b	jmp	#LR__0094
03138     DF 60 5E F2 | 	cmps	local07, #223 wcz
0313c     14 00 90 1D |  if_a	jmp	#LR__0094
03140                 | '     mb:=1
03140     01 56 06 F6 | 	mov	local02, #1
03144     30 5B 02 F6 | 	mov	local04, local07
03148     18 5A 66 F0 | 	shl	local04, #24
0314c     2D 67 02 F6 | 	mov	local10, local04
03150                 | '     midireport:=mrr<<24
03150     33 65 02 F6 | 	mov	local09, local10
03154                 | LR__0094
03154                 | '   
03154                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
03154     F0 60 5E F2 | 	cmps	local07, #240 wcz
03158     10 00 90 CD |  if_b	jmp	#LR__0095
0315c                 | '     mb:=4
0315c     04 56 06 F6 | 	mov	local02, #4
03160     30 69 02 F6 | 	mov	local11, local07
03164     18 68 66 F0 | 	shl	local11, #24
03168                 | '     midireport:=mrr<<24  
03168     34 65 02 F6 | 	mov	local09, local11
0316c                 | LR__0095
0316c                 | '   
0316c                 | '   if (mrr<$80) && (mb>0)
0316c     80 60 5E F2 | 	cmps	local07, #128 wcz
03170     3C 00 90 3D |  if_ae	jmp	#LR__0097
03174     00 56 5E F2 | 	cmps	local02, #0 wcz
03178     34 00 90 ED |  if_be	jmp	#LR__0097
0317c                 | '     
0317c                 | '     mb--
0317c     2B 5B 02 F6 | 	mov	local04, local02
03180     2B 5F 02 F6 | 	mov	local06, local02
03184     01 5E 86 F1 | 	sub	local06, #1
03188     2F 57 02 F6 | 	mov	local02, local06
0318c                 | '     if mb<3
0318c     03 56 5E F2 | 	cmps	local02, #3 wcz
03190     1C 00 90 3D |  if_ae	jmp	#LR__0096
03194     2B 6B 02 F6 | 	mov	local12, local02
03198     03 6A 66 F0 | 	shl	local12, #3
0319c     30 6D 02 F6 | 	mov	local13, local07
031a0     35 6D 62 F0 | 	shl	local13, local12
031a4                 | '       midireport+=mrr<<(mb<<3)
031a4     32 5B 02 F6 | 	mov	local04, local09
031a8     36 5B 02 F1 | 	add	local04, local13
031ac     2D 65 02 F6 | 	mov	local09, local04
031b0                 | LR__0096
031b0                 | LR__0097
031b0                 | '   
031b0                 | '   if mb==0
031b0     00 56 0E F2 | 	cmp	local02, #0 wz
031b4     84 00 90 5D |  if_ne	jmp	#LR__0099
031b8                 | '     
031b8                 | '     if midifront<>((miditail-1) //32)
031b8     14 0E 06 F1 | 	add	objptr, #20
031bc     07 5F 02 FB | 	rdlong	local06, objptr
031c0     2F 5B 02 F6 | 	mov	local04, local06
031c4     01 5A 86 F1 | 	sub	local04, #1
031c8     2D 55 52 F6 | 	abs	local01, local04 wc
031cc     1F 54 06 F5 | 	and	local01, #31
031d0     2A 55 62 C6 |  if_b	neg	local01, local01
031d4     04 0E 86 F1 | 	sub	objptr, #4
031d8     07 6F 02 FB | 	rdlong	local14, objptr
031dc     10 0E 86 F1 | 	sub	objptr, #16
031e0     37 71 02 F6 | 	mov	local15, local14
031e4     2A 71 0A F2 | 	cmp	local15, local01 wz
031e8     4C 00 90 AD |  if_e	jmp	#LR__0098
031ec     10 0E 06 F1 | 	add	objptr, #16
031f0     07 71 02 FB | 	rdlong	local15, objptr
031f4     02 70 66 F0 | 	shl	local15, #2
031f8     01 00 00 FF 
031fc     88 0E 06 F1 | 	add	objptr, ##648
03200     07 71 02 F1 | 	add	local15, objptr
03204     38 73 02 F6 | 	mov	local16, local15
03208                 | '       midibuf[midifront]:=midireport
03208     39 65 62 FC | 	wrlong	local09, local16
0320c                 | '       midifront+=1
0320c     01 00 00 FF 
03210     88 0E 86 F1 | 	sub	objptr, ##648
03214     07 55 02 FB | 	rdlong	local01, objptr
03218     01 54 06 F1 | 	add	local01, #1
0321c     07 55 62 FC | 	wrlong	local01, objptr
03220                 | '       midifront:=midifront // 32
03220     2A 5F 02 F6 | 	mov	local06, local01
03224     2F 5B 52 F6 | 	abs	local04, local06 wc
03228     1F 5A 06 F5 | 	and	local04, #31
0322c     2D 5B 62 C6 |  if_b	neg	local04, local04
03230     07 5B 62 FC | 	wrlong	local04, objptr
03234     10 0E 86 F1 | 	sub	objptr, #16
03238                 | LR__0098
03238                 | '     mb:=(-1)
03238     01 56 66 F6 | 	neg	local02, #1
0323c                 | LR__0099
0323c                 | ' 
0323c                 | ' 'Keyboard and mouse
0323c                 | ' 
0323c                 | '   if (rr>=$80) && (rr<>$FF)
0323c     80 5C 5E F2 | 	cmps	local05, #128 wcz
03240     1C 00 90 CD |  if_b	jmp	#LR__0100
03244     FF 5C 0E F2 | 	cmp	local05, #255 wz
03248     14 00 90 AD |  if_e	jmp	#LR__0100
0324c                 | '     b:=3
0324c     03 58 06 F6 | 	mov	local03, #3
03250     2E 5B 02 F6 | 	mov	local04, local05
03254     18 5A 66 F0 | 	shl	local04, #24
03258     2D 75 02 F6 | 	mov	local17, local04
0325c                 | '     kbmreport:=rr<<24
0325c     3A 77 02 F6 | 	mov	local18, local17
03260                 | LR__0100
03260                 | '   
03260                 | '   if (rr<$80) && (b>0)
03260     80 5C 5E F2 | 	cmps	local05, #128 wcz
03264     30 00 90 3D |  if_ae	jmp	#LR__0101
03268     00 58 5E F2 | 	cmps	local03, #0 wcz
0326c     28 00 90 ED |  if_be	jmp	#LR__0101
03270                 | '     b--
03270     2C 5F 02 F6 | 	mov	local06, local03
03274     01 5E 86 F1 | 	sub	local06, #1
03278     2F 59 02 F6 | 	mov	local03, local06
0327c     2C 79 02 F6 | 	mov	local19, local03
03280     03 78 66 F0 | 	shl	local19, #3
03284     2E 7B 02 F6 | 	mov	local20, local05
03288     3C 7B 62 F0 | 	shl	local20, local19
0328c                 | '     kbmreport+=rr<<(b<<3)  
0328c     3B 5B 02 F6 | 	mov	local04, local18
03290     3D 5B 02 F1 | 	add	local04, local20
03294     2D 77 02 F6 | 	mov	local18, local04
03298                 | LR__0101
03298                 | '   
03298                 | '   if (rr==$FF)
03298     FF 5C 0E F2 | 	cmp	local05, #255 wz
0329c                 | '     b:=0   
0329c     00 58 06 A6 |  if_e	mov	local03, #0
032a0                 | ' 
032a0                 | '   if b==0  
032a0     00 58 0E F2 | 	cmp	local03, #0 wz
032a4     14 01 90 5D |  if_ne	jmp	#LR__0106
032a8                 | '  
032a8                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
032a8     00 00 40 FF 
032ac     00 76 1E F2 | 	cmp	local18, ##-2147483648 wcz
032b0     84 00 90 CD |  if_b	jmp	#LR__0103
032b4     00 80 43 FF 
032b8     00 76 1E F2 | 	cmp	local18, ##-2030043136 wcz
032bc     78 00 90 3D |  if_ae	jmp	#LR__0103
032c0                 | '       if mousefront<>((mousetail-1) //128)
032c0     0C 0E 06 F1 | 	add	objptr, #12
032c4     07 5F 02 FB | 	rdlong	local06, objptr
032c8     2F 5B 02 F6 | 	mov	local04, local06
032cc     01 5A 86 F1 | 	sub	local04, #1
032d0     2D 55 52 F6 | 	abs	local01, local04 wc
032d4     7F 54 06 F5 | 	and	local01, #127
032d8     2A 55 62 C6 |  if_b	neg	local01, local01
032dc     04 0E 86 F1 | 	sub	objptr, #4
032e0     07 6F 02 FB | 	rdlong	local14, objptr
032e4     08 0E 86 F1 | 	sub	objptr, #8
032e8     37 71 02 F6 | 	mov	local15, local14
032ec     2A 71 0A F2 | 	cmp	local15, local01 wz
032f0     44 00 90 AD |  if_e	jmp	#LR__0102
032f4     08 0E 06 F1 | 	add	objptr, #8
032f8     07 71 02 FB | 	rdlong	local15, objptr
032fc     02 70 66 F0 | 	shl	local15, #2
03300     90 0E 06 F1 | 	add	objptr, #144
03304     07 71 02 F1 | 	add	local15, objptr
03308     38 7D 02 F6 | 	mov	local21, local15
0330c                 | '         mousebuf[mousefront]:=kbmreport
0330c     3E 77 62 FC | 	wrlong	local18, local21
03310                 | '         mousefront+=1
03310     90 0E 86 F1 | 	sub	objptr, #144
03314     07 55 02 FB | 	rdlong	local01, objptr
03318     01 54 06 F1 | 	add	local01, #1
0331c     07 55 62 FC | 	wrlong	local01, objptr
03320                 | '         mousefront:=mousefront // 128
03320     2A 5F 02 F6 | 	mov	local06, local01
03324     2F 5B 52 F6 | 	abs	local04, local06 wc
03328     7F 5A 06 F5 | 	and	local04, #127
0332c     2D 5B 62 C6 |  if_b	neg	local04, local04
03330     07 5B 62 FC | 	wrlong	local04, objptr
03334     08 0E 86 F1 | 	sub	objptr, #8
03338                 | LR__0102
03338                 | LR__0103
03338                 | '     b:=(-1)
03338     01 58 66 F6 | 	neg	local03, #1
0333c                 | ' 
0333c                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
0333c     00 80 43 FF 
03340     00 76 1E F2 | 	cmp	local18, ##-2030043136 wcz
03344     70 00 90 CD |  if_b	jmp	#LR__0105
03348     00 00 45 FF 
0334c     00 76 1E F2 | 	cmp	local18, ##-1979711488 wcz
03350     64 00 90 3D |  if_ae	jmp	#LR__0105
03354                 | '       if kbdfront<>((kbdtail-1) //32)
03354     04 0E 06 F1 | 	add	objptr, #4
03358     07 5F 02 FB | 	rdlong	local06, objptr
0335c     04 0E 86 F1 | 	sub	objptr, #4
03360     2F 5B 02 F6 | 	mov	local04, local06
03364     01 5A 86 F1 | 	sub	local04, #1
03368     2D 55 52 F6 | 	abs	local01, local04 wc
0336c     1F 54 06 F5 | 	and	local01, #31
03370     2A 55 62 C6 |  if_b	neg	local01, local01
03374     07 71 02 FB | 	rdlong	local15, objptr
03378     2A 71 0A F2 | 	cmp	local15, local01 wz
0337c     38 00 90 AD |  if_e	jmp	#LR__0104
03380     07 55 02 FB | 	rdlong	local01, objptr
03384     02 54 66 F0 | 	shl	local01, #2
03388     18 0E 06 F1 | 	add	objptr, #24
0338c     07 55 02 F1 | 	add	local01, objptr
03390     2A 7F 02 F6 | 	mov	local22, local01
03394                 | '         kbdbuf[kbdfront]:=kbmreport
03394     3F 77 62 FC | 	wrlong	local18, local22
03398                 | '         kbdfront+=1
03398     18 0E 86 F1 | 	sub	objptr, #24
0339c     07 5F 02 FB | 	rdlong	local06, objptr
033a0     01 5E 06 F1 | 	add	local06, #1
033a4     07 5F 62 FC | 	wrlong	local06, objptr
033a8                 | '         kbdfront:=kbdfront // 32
033a8     2F 5B 52 F6 | 	abs	local04, local06 wc
033ac     1F 5A 06 F5 | 	and	local04, #31
033b0     2D 5B 62 C6 |  if_b	neg	local04, local04
033b4     07 5B 62 FC | 	wrlong	local04, objptr
033b8                 | LR__0104
033b8                 | LR__0105
033b8                 | '     b:=(-1)
033b8     01 58 66 F6 | 	neg	local03, #1
033bc                 | LR__0106
033bc                 | ' 
033bc                 | ' 
033bc                 | '   if long[$30]==0
033bc     30 5A 0E FB | 	rdlong	local04, #48 wz
033c0     5C 00 90 5D |  if_ne	jmp	#LR__0108
033c4                 | '     if kbdfront<>kbdtail
033c4     07 5B 02 FB | 	rdlong	local04, objptr
033c8     04 0E 06 F1 | 	add	objptr, #4
033cc     07 55 02 FB | 	rdlong	local01, objptr
033d0     04 0E 86 F1 | 	sub	objptr, #4
033d4     2A 5B 0A F2 | 	cmp	local04, local01 wz
033d8     44 00 90 AD |  if_e	jmp	#LR__0107
033dc     04 0E 06 F1 | 	add	objptr, #4
033e0     07 81 02 FB | 	rdlong	local23, objptr
033e4     02 80 66 F0 | 	shl	local23, #2
033e8     14 0E 06 F1 | 	add	objptr, #20
033ec     07 81 02 F1 | 	add	local23, objptr
033f0                 | '       long[$30]:=kbdbuf[kbdtail]
033f0     40 5B 02 FB | 	rdlong	local04, local23
033f4     30 5A 66 FC | 	wrlong	local04, #48
033f8                 | '       kbdtail++
033f8     14 0E 86 F1 | 	sub	objptr, #20
033fc     07 71 02 FB | 	rdlong	local15, objptr
03400     38 55 02 F6 | 	mov	local01, local15
03404     01 54 06 F1 | 	add	local01, #1
03408     07 55 62 FC | 	wrlong	local01, objptr
0340c                 | '       kbdtail:= kbdtail // 32
0340c     2A 5B 52 F6 | 	abs	local04, local01 wc
03410     1F 5A 06 F5 | 	and	local04, #31
03414     2D 5B 62 C6 |  if_b	neg	local04, local04
03418     07 5B 62 FC | 	wrlong	local04, objptr
0341c     04 0E 86 F1 | 	sub	objptr, #4
03420                 | LR__0107
03420                 | LR__0108
03420                 | '       
03420                 | '   if long[$34]==0
03420     34 5A 0E FB | 	rdlong	local04, #52 wz
03424     64 00 90 5D |  if_ne	jmp	#LR__0110
03428                 | '     if mousefront<>mousetail
03428     08 0E 06 F1 | 	add	objptr, #8
0342c     07 5B 02 FB | 	rdlong	local04, objptr
03430     04 0E 06 F1 | 	add	objptr, #4
03434     07 71 02 FB | 	rdlong	local15, objptr
03438     0C 0E 86 F1 | 	sub	objptr, #12
0343c     38 55 02 F6 | 	mov	local01, local15
03440     2A 5B 0A F2 | 	cmp	local04, local01 wz
03444     44 00 90 AD |  if_e	jmp	#LR__0109
03448     0C 0E 06 F1 | 	add	objptr, #12
0344c     07 83 02 FB | 	rdlong	local24, objptr
03450     02 82 66 F0 | 	shl	local24, #2
03454     8C 0E 06 F1 | 	add	objptr, #140
03458     07 83 02 F1 | 	add	local24, objptr
0345c                 | '       long[$34]:=mousebuf[mousetail]
0345c     41 5B 02 FB | 	rdlong	local04, local24
03460     34 5A 66 FC | 	wrlong	local04, #52
03464                 | '       mousetail++
03464     8C 0E 86 F1 | 	sub	objptr, #140
03468     07 71 02 FB | 	rdlong	local15, objptr
0346c     38 55 02 F6 | 	mov	local01, local15
03470     01 54 06 F1 | 	add	local01, #1
03474     07 55 62 FC | 	wrlong	local01, objptr
03478                 | '       mousetail:= mousetail // 128
03478     2A 5B 52 F6 | 	abs	local04, local01 wc
0347c     7F 5A 06 F5 | 	and	local04, #127
03480     2D 5B 62 C6 |  if_b	neg	local04, local04
03484     07 5B 62 FC | 	wrlong	local04, objptr
03488     0C 0E 86 F1 | 	sub	objptr, #12
0348c                 | LR__0109
0348c                 | LR__0110
0348c                 | ' 
0348c                 | '       
0348c                 | '   if long[$38]==0
0348c     38 5A 0E FB | 	rdlong	local04, #56 wz
03490     38 FC 9F 5D |  if_ne	jmp	#LR__0088
03494                 | '     if midifront<>miditail
03494     10 0E 06 F1 | 	add	objptr, #16
03498     07 5B 02 FB | 	rdlong	local04, objptr
0349c     04 0E 06 F1 | 	add	objptr, #4
034a0     07 71 02 FB | 	rdlong	local15, objptr
034a4     14 0E 86 F1 | 	sub	objptr, #20
034a8     38 55 02 F6 | 	mov	local01, local15
034ac     2A 5B 0A F2 | 	cmp	local04, local01 wz
034b0     18 FC 9F AD |  if_e	jmp	#LR__0088
034b4     14 0E 06 F1 | 	add	objptr, #20
034b8     07 85 02 FB | 	rdlong	local25, objptr
034bc     02 84 66 F0 | 	shl	local25, #2
034c0     01 00 00 FF 
034c4     84 0E 06 F1 | 	add	objptr, ##644
034c8     07 85 02 F1 | 	add	local25, objptr
034cc                 | '       long[$38]:=midibuf[miditail]
034cc     42 5B 02 FB | 	rdlong	local04, local25
034d0     38 5A 66 FC | 	wrlong	local04, #56
034d4                 | '       miditail++
034d4     01 00 00 FF 
034d8     84 0E 86 F1 | 	sub	objptr, ##644
034dc     07 71 02 FB | 	rdlong	local15, objptr
034e0     38 55 02 F6 | 	mov	local01, local15
034e4     01 54 06 F1 | 	add	local01, #1
034e8     07 55 62 FC | 	wrlong	local01, objptr
034ec                 | '       miditail:= miditail // 32
034ec     2A 5B 52 F6 | 	abs	local04, local01 wc
034f0     1F 5A 06 F5 | 	and	local04, #31
034f4     2D 5B 62 C6 |  if_b	neg	local04, local04
034f8     07 5B 62 FC | 	wrlong	local04, objptr
034fc     14 0E 86 F1 | 	sub	objptr, #20
03500     C8 FB 9F FD | 	jmp	#LR__0088
03504     AF F0 03 F6 | 	mov	ptra, fp
03508     BF 00 A0 FD | 	call	#popregs_
0350c                 | _retrocog_spin2_serialcog_ret
0350c     2D 00 64 FD | 	ret
03510                 | 
03510                 | '       
03510                 | ' 
03510                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03510                 | ' 
03510                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03510                 | _retrocog_spin2_serial_start
03510     04 5A 05 F6 | 	mov	COUNT_, #4
03514     B0 00 A0 FD | 	call	#pushregs_
03518     25 55 02 F6 | 	mov	local01, arg01
0351c     26 57 02 F6 | 	mov	local02, arg02
03520                 | ' 
03520                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03520     14 4A 06 FB | 	rdlong	arg01, #20
03524     10 4C C6 F9 | 	decod	arg02, #16
03528     26 4B 02 FD | 	qmul	arg01, arg02
0352c     19 58 62 FD | 	getqy	local03
03530     18 5A 62 FD | 	getqx	local04
03534     28 58 62 FD | 	setq	local03
03538     27 5B 12 FD | 	qdiv	local04, arg03
0353c     18 24 62 FD | 	getqx	result1
03540     12 4F 02 F6 | 	mov	arg03, result1
03544     FE FF 7F FF 
03548     00 4E 06 F5 | 	and	arg03, ##-1024
0354c                 | ' bitmode |= 7                                                  ' set bits (8)
0354c     07 4E 46 F5 | 	or	arg03, #7
03550                 | ' pinstart(rxpin,P_ASYNC_RX,bitmode,0)
03550     40 54 62 FD | 	dirl	local01
03554     2A 7D 08 FC | 	wrpin	#62, local01
03558     2A 4F 12 FC | 	wxpin	arg03, local01
0355c     2A 01 28 FC | 	wypin	#0, local01
03560     41 54 62 FD | 	dirh	local01
03564                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03564     40 56 62 FD | 	dirl	local02
03568     2B F9 08 FC | 	wrpin	#124, local02
0356c     2B 4F 12 FC | 	wxpin	arg03, local02
03570     2B 01 28 FC | 	wypin	#0, local02
03574     41 56 62 FD | 	dirh	local02
03578     AF F0 03 F6 | 	mov	ptra, fp
0357c     BF 00 A0 FD | 	call	#popregs_
03580                 | _retrocog_spin2_serial_start_ret
03580     2D 00 64 FD | 	ret
03584                 | 
03584                 | ' 
03584                 | ' 
03584                 | ' pub rxcheck(pin) : rxbyte | check
03584                 | _retrocog_spin2_rxcheck
03584     04 5A 05 F6 | 	mov	COUNT_, #4
03588     B0 00 A0 FD | 	call	#pushregs_
0358c     25 55 02 F6 | 	mov	local01, arg01
03590                 | ' 
03590                 | ' '' Check for serial input
03590                 | ' '' -- returns -1 if nothing available
03590                 | ' 
03590                 | '   rxbyte := -1
03590     01 56 66 F6 | 	neg	local02, #1
03594                 | '   check := pinr(pin)
03594     2A 4B 02 F6 | 	mov	arg01, local01
03598     20 4A CE F7 | 	test	arg01, #32 wz
0359c     FF 59 02 56 |  if_ne	mov	local03, inb
035a0     FE 59 02 A6 |  if_e	mov	local03, ina
035a4     25 59 42 F0 | 	shr	local03, arg01
035a8     06 4A 46 F0 | 	shr	arg01, #6
035ac     25 59 42 F7 | 	zerox	local03, arg01
035b0     2C 5B 0A F6 | 	mov	local04, local03 wz
035b4                 | '   if (check)
035b4                 | '     rxbyte := rdpin(pin) >> 24
035b4     00 56 06 56 |  if_ne	mov	local02, #0
035b8     2A 57 8A 5A |  if_ne	rdpin	local02, local01
035bc     18 56 46 50 |  if_ne	shr	local02, #24
035c0     2B 25 02 F6 | 	mov	result1, local02
035c4     AF F0 03 F6 | 	mov	ptra, fp
035c8     BF 00 A0 FD | 	call	#popregs_
035cc                 | _retrocog_spin2_rxcheck_ret
035cc     2D 00 64 FD | 	ret
035d0                 | hubexit
035d0     81 00 80 FD | 	jmp	#cogexit
035d4                 | 
035d4                 | __system___setbaud
035d4     14 08 07 FB | 	rdlong	muldiva_, #20
035d8     25 0B 03 F6 | 	mov	muldivb_, arg01
035dc     D0 00 A0 FD | 	call	#divide_
035e0     40 7C 64 FD | 	dirl	#62
035e4     40 7E 64 FD | 	dirl	#63
035e8     0A 0B 63 FC | 	wrlong	muldivb_, ptr___system__dat__
035ec     10 0A 67 F0 | 	shl	muldivb_, #16
035f0     07 4C 06 F6 | 	mov	arg02, #7
035f4     85 4D 02 F1 | 	add	arg02, muldivb_
035f8     3E F8 0C FC | 	wrpin	#124, #62
035fc     3E 4C 16 FC | 	wxpin	arg02, #62
03600     3F 7C 0C FC | 	wrpin	#62, #63
03604     14 4C 06 F1 | 	add	arg02, #20
03608     3F 4C 16 FC | 	wxpin	arg02, #63
0360c     41 7C 64 FD | 	dirh	#62
03610     41 7E 64 FD | 	dirh	#63
03614                 | __system___setbaud_ret
03614     2D 00 64 FD | 	ret
03618                 | 
03618                 | __system___txraw
03618     02 5A 05 F6 | 	mov	COUNT_, #2
0361c     B0 00 A0 FD | 	call	#pushregs_
03620     25 55 02 F6 | 	mov	local01, arg01
03624     0A 57 0A FB | 	rdlong	local02, ptr___system__dat__ wz
03628     0C 00 90 5D |  if_ne	jmp	#LR__0111
0362c     C2 01 00 FF 
03630     00 4A 06 F6 | 	mov	arg01, ##230400
03634     9C FF BF FD | 	call	#__system___setbaud
03638                 | LR__0111
03638     3E 54 26 FC | 	wypin	local01, #62
0363c     1F 02 64 FD | 	waitx	#1
03640     C4 C9 9F FE | 	loc	pa,	#(@LR__0113-@LR__0112)
03644     93 00 A0 FD | 	call	#FCACHE_LOAD_
03648                 | LR__0112
03648     40 7C 74 FD | 	testp	#62 wc
0364c     F8 FF 9F 3D |  if_nc	jmp	#LR__0112
03650                 | LR__0113
03650     01 24 06 F6 | 	mov	result1, #1
03654     AF F0 03 F6 | 	mov	ptra, fp
03658     BF 00 A0 FD | 	call	#popregs_
0365c                 | __system___txraw_ret
0365c     2D 00 64 FD | 	ret
03660                 | 
03660                 | __system___rxraw
03660     0D 5A 05 F6 | 	mov	COUNT_, #13
03664     B0 00 A0 FD | 	call	#pushregs_
03668     25 55 02 F6 | 	mov	local01, arg01
0366c     0A 57 0A FB | 	rdlong	local02, ptr___system__dat__ wz
03670     0C 00 90 5D |  if_ne	jmp	#LR__0114
03674     C2 01 00 FF 
03678     00 4A 06 F6 | 	mov	arg01, ##230400
0367c     54 FF BF FD | 	call	#__system___setbaud
03680                 | LR__0114
03680     00 54 0E F2 | 	cmp	local01, #0 wz
03684     18 00 90 AD |  if_e	jmp	#LR__0115
03688     14 58 06 FB | 	rdlong	local03, #20
0368c     0A 58 46 F0 | 	shr	local03, #10
03690     2C 55 02 FD | 	qmul	local01, local03
03694     18 5A 62 FD | 	getqx	local04
03698     1A 5C 62 FD | 	getct	local05
0369c     2D 5D 02 F1 | 	add	local05, local04
036a0                 | LR__0115
036a0     01 5E 66 F6 | 	neg	local06, #1
036a4     00 60 06 F6 | 	mov	local07, #0
036a8     04 14 06 F1 | 	add	ptr___system__dat__, #4
036ac     0A 63 02 FB | 	rdlong	local08, ptr___system__dat__
036b0     04 14 86 F1 | 	sub	ptr___system__dat__, #4
036b4                 | LR__0116
036b4     08 62 16 F4 | 	testb	local08, #8 wc
036b8     09 62 76 F4 | 	testbn	local08, #9 andc
036bc     0A 62 46 F0 | 	shr	local08, #10
036c0     01 60 06 C6 |  if_b	mov	local07, #1
036c4     10 00 90 CD |  if_b	jmp	#LR__0117
036c8     40 7E 6C FD | 	testp	#63 wz
036cc     01 60 06 A6 |  if_e	mov	local07, #1
036d0     3F 62 8E AA |  if_e	rdpin	local08, #63
036d4     04 62 46 A0 |  if_e	shr	local08, #4
036d8                 | LR__0117
036d8     00 56 06 F6 | 	mov	local02, #0
036dc     00 60 0E F2 | 	cmp	local07, #0 wz
036e0     01 56 66 56 |  if_ne	neg	local02, #1
036e4     00 64 06 F6 | 	mov	local09, #0
036e8     00 66 06 F6 | 	mov	local10, #0
036ec     00 54 0E F2 | 	cmp	local01, #0 wz
036f0     01 66 66 56 |  if_ne	neg	local10, #1
036f4     00 68 06 F6 | 	mov	local11, #0
036f8     00 6A 06 F6 | 	mov	local12, #0
036fc     1A 6C 62 FD | 	getct	local13
03700     2E 6D 82 F1 | 	sub	local13, local05
03704     00 6C 5E F2 | 	cmps	local13, #0 wcz
03708     01 6A 66 C6 |  if_b	neg	local12, #1
0370c     00 6A 0E F2 | 	cmp	local12, #0 wz
03710     01 68 66 56 |  if_ne	neg	local11, #1
03714     34 67 CA F7 | 	test	local10, local11 wz
03718     01 64 66 56 |  if_ne	neg	local09, #1
0371c     32 57 4A F5 | 	or	local02, local09 wz
03720     90 FF 9F AD |  if_e	jmp	#LR__0116
03724     00 60 0E F2 | 	cmp	local07, #0 wz
03728     31 5F 02 56 |  if_ne	mov	local06, local08
0372c     FF 5E 06 55 |  if_ne	and	local06, #255
03730     04 14 06 F1 | 	add	ptr___system__dat__, #4
03734     0A 63 62 FC | 	wrlong	local08, ptr___system__dat__
03738     04 14 86 F1 | 	sub	ptr___system__dat__, #4
0373c     2F 25 02 F6 | 	mov	result1, local06
03740     AF F0 03 F6 | 	mov	ptra, fp
03744     BF 00 A0 FD | 	call	#popregs_
03748                 | __system___rxraw_ret
03748     2D 00 64 FD | 	ret
0374c                 | 
0374c                 | __system____builtin_memmove
0374c     25 2B 02 F6 | 	mov	_var01, arg01
03750     26 4B 5A F2 | 	cmps	arg01, arg02 wcz
03754     50 00 90 3D |  if_ae	jmp	#LR__0125
03758     C4 C8 9F FE | 	loc	pa,	#(@LR__0119-@LR__0118)
0375c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03760                 | LR__0118
03760     03 4E 5E F2 | 	cmps	arg03, #3 wcz
03764     18 00 90 ED |  if_be	jmp	#LR__0120
03768     26 2D 02 FB | 	rdlong	_var02, arg02
0376c     25 2D 62 FC | 	wrlong	_var02, arg01
03770     04 4A 06 F1 | 	add	arg01, #4
03774     04 4C 06 F1 | 	add	arg02, #4
03778     04 4E 86 F1 | 	sub	arg03, #4
0377c     E0 FF 9F FD | 	jmp	#LR__0118
03780                 | LR__0119
03780                 | LR__0120
03780     27 2F 0A F6 | 	mov	_var03, arg03 wz
03784     4C 00 90 AD |  if_e	jmp	#LR__0131
03788     88 C8 9F FE | 	loc	pa,	#(@LR__0123-@LR__0121)
0378c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03790                 | LR__0121
03790     17 09 D8 FC | 	rep	@LR__0124, _var03
03794                 | LR__0122
03794     26 2D C2 FA | 	rdbyte	_var02, arg02
03798     25 2D 42 FC | 	wrbyte	_var02, arg01
0379c     01 4A 06 F1 | 	add	arg01, #1
037a0     01 4C 06 F1 | 	add	arg02, #1
037a4                 | LR__0123
037a4                 | LR__0124
037a4     2C 00 90 FD | 	jmp	#LR__0131
037a8                 | LR__0125
037a8     27 4B 02 F1 | 	add	arg01, arg03
037ac     27 4D 02 F1 | 	add	arg02, arg03
037b0     27 31 0A F6 | 	mov	_var04, arg03 wz
037b4     1C 00 90 AD |  if_e	jmp	#LR__0130
037b8     58 C8 9F FE | 	loc	pa,	#(@LR__0128-@LR__0126)
037bc     93 00 A0 FD | 	call	#FCACHE_LOAD_
037c0                 | LR__0126
037c0     18 09 D8 FC | 	rep	@LR__0129, _var04
037c4                 | LR__0127
037c4     01 4A 86 F1 | 	sub	arg01, #1
037c8     01 4C 86 F1 | 	sub	arg02, #1
037cc     26 2D C2 FA | 	rdbyte	_var02, arg02
037d0     25 2D 42 FC | 	wrbyte	_var02, arg01
037d4                 | LR__0128
037d4                 | LR__0129
037d4                 | LR__0130
037d4                 | LR__0131
037d4     15 25 02 F6 | 	mov	result1, _var01
037d8                 | __system____builtin_memmove_ret
037d8     2D 00 64 FD | 	ret
037dc                 | 
037dc                 | __system__longmove
037dc     25 2B 02 F6 | 	mov	_var01, arg01
037e0     26 4B 5A F2 | 	cmps	arg01, arg02 wcz
037e4     28 00 90 3D |  if_ae	jmp	#LR__0136
037e8     27 2D 0A F6 | 	mov	_var02, arg03 wz
037ec     54 00 90 AD |  if_e	jmp	#LR__0142
037f0     20 C8 9F FE | 	loc	pa,	#(@LR__0134-@LR__0132)
037f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
037f8                 | LR__0132
037f8     16 09 D8 FC | 	rep	@LR__0135, _var02
037fc                 | LR__0133
037fc     26 2F 02 FB | 	rdlong	_var03, arg02
03800     25 2F 62 FC | 	wrlong	_var03, arg01
03804     04 4A 06 F1 | 	add	arg01, #4
03808     04 4C 06 F1 | 	add	arg02, #4
0380c                 | LR__0134
0380c                 | LR__0135
0380c     34 00 90 FD | 	jmp	#LR__0142
03810                 | LR__0136
03810     27 31 02 F6 | 	mov	_var04, arg03
03814     02 30 66 F0 | 	shl	_var04, #2
03818     18 4B 02 F1 | 	add	arg01, _var04
0381c     18 4D 02 F1 | 	add	arg02, _var04
03820     27 33 0A F6 | 	mov	_var05, arg03 wz
03824     1C 00 90 AD |  if_e	jmp	#LR__0141
03828     E8 C7 9F FE | 	loc	pa,	#(@LR__0139-@LR__0137)
0382c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03830                 | LR__0137
03830     19 09 D8 FC | 	rep	@LR__0140, _var05
03834                 | LR__0138
03834     04 4A 86 F1 | 	sub	arg01, #4
03838     04 4C 86 F1 | 	sub	arg02, #4
0383c     26 2F 02 FB | 	rdlong	_var03, arg02
03840     25 2F 62 FC | 	wrlong	_var03, arg01
03844                 | LR__0139
03844                 | LR__0140
03844                 | LR__0141
03844                 | LR__0142
03844     15 25 02 F6 | 	mov	result1, _var01
03848                 | __system__longmove_ret
03848     2D 00 64 FD | 	ret
0384c                 | 
0384c                 | __system____topofstack
0384c     00 5A 05 F6 | 	mov	COUNT_, #0
03850     B0 00 A0 FD | 	call	#pushregs_
03854     0C F0 07 F1 | 	add	ptra, #12
03858     04 5E 05 F1 | 	add	fp, #4
0385c     AF 4A 62 FC | 	wrlong	arg01, fp
03860     AF 24 02 F6 | 	mov	result1, fp
03864     04 5E 85 F1 | 	sub	fp, #4
03868     AF F0 03 F6 | 	mov	ptra, fp
0386c     BF 00 A0 FD | 	call	#popregs_
03870                 | __system____topofstack_ret
03870     2D 00 64 FD | 	ret
03874                 | 
03874                 | __system___make_methodptr
03874     04 5A 05 F6 | 	mov	COUNT_, #4
03878     B0 00 A0 FD | 	call	#pushregs_
0387c     25 55 02 F6 | 	mov	local01, arg01
03880     26 57 02 F6 | 	mov	local02, arg02
03884     08 4A 06 F6 | 	mov	arg01, #8
03888     E8 0A B0 FD | 	call	#__system___gc_alloc_managed
0388c     12 59 0A F6 | 	mov	local03, result1 wz
03890     10 00 90 AD |  if_e	jmp	#LR__0143
03894     2C 55 62 FC | 	wrlong	local01, local03
03898     2C 5B 02 F6 | 	mov	local04, local03
0389c     04 5A 06 F1 | 	add	local04, #4
038a0     2D 57 62 FC | 	wrlong	local02, local04
038a4                 | LR__0143
038a4     2C 25 02 F6 | 	mov	result1, local03
038a8     AF F0 03 F6 | 	mov	ptra, fp
038ac     BF 00 A0 FD | 	call	#popregs_
038b0                 | __system___make_methodptr_ret
038b0     2D 00 64 FD | 	ret
038b4                 | 
038b4                 | __system___lockmem
038b4     02 5A 05 F6 | 	mov	COUNT_, #2
038b8     B0 00 A0 FD | 	call	#pushregs_
038bc     01 24 62 FD | 	cogid	result1
038c0     12 55 02 F6 | 	mov	local01, result1
038c4     00 55 06 F1 | 	add	local01, #256
038c8                 | LR__0144
038c8     25 57 0A FB | 	rdlong	local02, arg01 wz
038cc     25 55 62 AC |  if_e	wrlong	local01, arg01
038d0     25 57 02 AB |  if_e	rdlong	local02, arg01
038d4     25 57 02 AB |  if_e	rdlong	local02, arg01
038d8     2A 57 0A F2 | 	cmp	local02, local01 wz
038dc     E8 FF 9F 5D |  if_ne	jmp	#LR__0144
038e0     AF F0 03 F6 | 	mov	ptra, fp
038e4     BF 00 A0 FD | 	call	#popregs_
038e8                 | __system___lockmem_ret
038e8     2D 00 64 FD | 	ret
038ec                 | 
038ec                 | __system___tx
038ec     02 5A 05 F6 | 	mov	COUNT_, #2
038f0     B0 00 A0 FD | 	call	#pushregs_
038f4     25 55 02 F6 | 	mov	local01, arg01
038f8     0A 54 0E F2 | 	cmp	local01, #10 wz
038fc     20 00 90 5D |  if_ne	jmp	#LR__0145
03900     08 14 06 F1 | 	add	ptr___system__dat__, #8
03904     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
03908     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0390c     02 56 CE F7 | 	test	local02, #2 wz
03910     0C 00 90 AD |  if_e	jmp	#LR__0145
03914     0D 56 06 F6 | 	mov	local02, #13
03918     0D 4A 06 F6 | 	mov	arg01, #13
0391c     F8 FC BF FD | 	call	#__system___txraw
03920                 | LR__0145
03920     2A 4B 02 F6 | 	mov	arg01, local01
03924     F0 FC BF FD | 	call	#__system___txraw
03928     AF F0 03 F6 | 	mov	ptra, fp
0392c     BF 00 A0 FD | 	call	#popregs_
03930                 | __system___tx_ret
03930     2D 00 64 FD | 	ret
03934                 | 
03934                 | __system___rx
03934     02 5A 05 F6 | 	mov	COUNT_, #2
03938     B0 00 A0 FD | 	call	#pushregs_
0393c                 | LR__0146
0393c     00 4A 06 F6 | 	mov	arg01, #0
03940     1C FD BF FD | 	call	#__system___rxraw
03944     12 55 02 F6 | 	mov	local01, result1
03948     FF FF 7F FF 
0394c     FF 55 0E F2 | 	cmp	local01, ##-1 wz
03950     E8 FF 9F AD |  if_e	jmp	#LR__0146
03954     0D 54 0E F2 | 	cmp	local01, #13 wz
03958     14 00 90 5D |  if_ne	jmp	#LR__0147
0395c     08 14 06 F1 | 	add	ptr___system__dat__, #8
03960     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
03964     08 14 86 F1 | 	sub	ptr___system__dat__, #8
03968     02 56 CE F7 | 	test	local02, #2 wz
0396c     0A 54 06 56 |  if_ne	mov	local01, #10
03970                 | LR__0147
03970     08 14 06 F1 | 	add	ptr___system__dat__, #8
03974     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
03978     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0397c     01 56 CE F7 | 	test	local02, #1 wz
03980     1C 00 90 AD |  if_e	jmp	#LR__0150
03984     7F 54 0E F2 | 	cmp	local01, #127 wz
03988     0C 00 90 5D |  if_ne	jmp	#LR__0148
0398c     08 4A 06 F6 | 	mov	arg01, #8
03990     58 FF BF FD | 	call	#__system___tx
03994     08 00 90 FD | 	jmp	#LR__0149
03998                 | LR__0148
03998     2A 4B 02 F6 | 	mov	arg01, local01
0399c     4C FF BF FD | 	call	#__system___tx
039a0                 | LR__0149
039a0                 | LR__0150
039a0     2A 25 02 F6 | 	mov	result1, local01
039a4     AF F0 03 F6 | 	mov	ptra, fp
039a8     BF 00 A0 FD | 	call	#popregs_
039ac                 | __system___rx_ret
039ac     2D 00 64 FD | 	ret
039b0                 | 
039b0                 | __system___waitms
039b0     03 5A 05 F6 | 	mov	COUNT_, #3
039b4     B0 00 A0 FD | 	call	#pushregs_
039b8     25 55 02 F6 | 	mov	local01, arg01
039bc     14 56 06 FB | 	rdlong	local02, #20
039c0     54 C6 9F FE | 	loc	pa,	#(@LR__0152-@LR__0151)
039c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
039c8                 | LR__0151
039c8     01 00 00 FF 
039cc     E8 55 5E F2 | 	cmps	local01, ##1000 wcz
039d0     1F 56 62 1D |  if_a	waitx	local02
039d4     01 00 00 1F 
039d8     E8 55 86 11 |  if_a	sub	local01, ##1000
039dc     E8 FF 9F 1D |  if_a	jmp	#LR__0151
039e0                 | LR__0152
039e0     0C 14 06 F1 | 	add	ptr___system__dat__, #12
039e4     0A 59 0A FB | 	rdlong	local03, ptr___system__dat__ wz
039e8     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
039ec     20 00 90 5D |  if_ne	jmp	#LR__0153
039f0     2B 09 03 F6 | 	mov	muldiva_, local02
039f4     01 00 00 FF 
039f8     E8 0B 07 F6 | 	mov	muldivb_, ##1000
039fc     CC 00 A0 FD | 	call	#unsdivide_
03a00     85 59 02 F6 | 	mov	local03, muldivb_
03a04     0C 14 06 F1 | 	add	ptr___system__dat__, #12
03a08     0A 0B 63 FC | 	wrlong	muldivb_, ptr___system__dat__
03a0c     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
03a10                 | LR__0153
03a10     00 54 5E F2 | 	cmps	local01, #0 wcz
03a14     2C 55 02 1D |  if_a	qmul	local01, local03
03a18     18 4A 62 1D |  if_a	getqx	arg01
03a1c     1F 4A 62 1D |  if_a	waitx	arg01
03a20     AF F0 03 F6 | 	mov	ptra, fp
03a24     BF 00 A0 FD | 	call	#popregs_
03a28                 | __system___waitms_ret
03a28     2D 00 64 FD | 	ret
03a2c                 | 
03a2c                 | __system___basic_open
03a2c     05 5A 05 F6 | 	mov	COUNT_, #5
03a30     B0 00 A0 FD | 	call	#pushregs_
03a34     26 55 02 F6 | 	mov	local01, arg02
03a38     27 57 02 F6 | 	mov	local02, arg03
03a3c     28 59 02 F6 | 	mov	local03, arg04
03a40     34 11 B0 FD | 	call	#__system____getftab
03a44     12 5B 0A F6 | 	mov	local04, result1 wz
03a48     18 00 90 5D |  if_ne	jmp	#LR__0154
03a4c     03 4B 02 F6 | 	mov	arg01, abortchain
03a50     0C 4C 06 F6 | 	mov	arg02, #12
03a54     01 4E 06 F6 | 	mov	arg03, #1
03a58     F0 00 A0 FD | 	call	#__longjmp
03a5c     01 24 66 F6 | 	neg	result1, #1
03a60     70 00 90 FD | 	jmp	#LR__0158
03a64                 | LR__0154
03a64     00 54 0E F2 | 	cmp	local01, #0 wz
03a68     48 00 90 AD |  if_e	jmp	#LR__0156
03a6c     04 4A 06 F6 | 	mov	arg01, #4
03a70     00 09 B0 FD | 	call	#__system___gc_alloc_managed
03a74     12 5D 0A F6 | 	mov	local05, result1 wz
03a78     18 00 90 5D |  if_ne	jmp	#LR__0155
03a7c     03 4B 02 F6 | 	mov	arg01, abortchain
03a80     07 4C 06 F6 | 	mov	arg02, #7
03a84     01 4E 06 F6 | 	mov	arg03, #1
03a88     F0 00 A0 FD | 	call	#__longjmp
03a8c     01 24 66 F6 | 	neg	result1, #1
03a90     40 00 90 FD | 	jmp	#LR__0158
03a94                 | LR__0155
03a94     2E 55 62 FC | 	wrlong	local01, local05
03a98     08 4D 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
03a9c     2E 4B 02 F6 | 	mov	arg01, local05
03aa0     D0 FD BF FD | 	call	#__system___make_methodptr
03aa4     18 5A 06 F1 | 	add	local04, #24
03aa8     2D 25 62 FC | 	wrlong	result1, local04
03aac     18 5A 86 F1 | 	sub	local04, #24
03ab0     0C 00 90 FD | 	jmp	#LR__0157
03ab4                 | LR__0156
03ab4     18 5A 06 F1 | 	add	local04, #24
03ab8     2D 55 62 FC | 	wrlong	local01, local04
03abc     18 5A 86 F1 | 	sub	local04, #24
03ac0                 | LR__0157
03ac0     1C 5A 06 F1 | 	add	local04, #28
03ac4     2D 57 62 FC | 	wrlong	local02, local04
03ac8     04 5A 06 F1 | 	add	local04, #4
03acc     2D 59 62 FC | 	wrlong	local03, local04
03ad0     00 24 06 F6 | 	mov	result1, #0
03ad4                 | LR__0158
03ad4     AF F0 03 F6 | 	mov	ptra, fp
03ad8     BF 00 A0 FD | 	call	#popregs_
03adc                 | __system___basic_open_ret
03adc     2D 00 64 FD | 	ret
03ae0                 | 
03ae0                 | __system___basic_print_char
03ae0     05 5A 05 F6 | 	mov	COUNT_, #5
03ae4     B0 00 A0 FD | 	call	#pushregs_
03ae8     26 55 02 F6 | 	mov	local01, arg02
03aec     4C 12 B0 FD | 	call	#__system___gettxfunc
03af0     12 57 0A F6 | 	mov	local02, result1 wz
03af4     00 24 06 A6 |  if_e	mov	result1, #0
03af8     24 00 90 AD |  if_e	jmp	#LR__0159
03afc     2B 59 02 FB | 	rdlong	local03, local02
03b00     04 56 06 F1 | 	add	local02, #4
03b04     2B 5B 02 FB | 	rdlong	local04, local02
03b08     2A 4B 02 F6 | 	mov	arg01, local01
03b0c     07 5D 02 F6 | 	mov	local05, objptr
03b10     2C 0F 02 F6 | 	mov	objptr, local03
03b14     2D 5A 62 FD | 	call	local04
03b18     2E 0F 02 F6 | 	mov	objptr, local05
03b1c     01 24 06 F6 | 	mov	result1, #1
03b20                 | LR__0159
03b20     AF F0 03 F6 | 	mov	ptra, fp
03b24     BF 00 A0 FD | 	call	#popregs_
03b28                 | __system___basic_print_char_ret
03b28     2D 00 64 FD | 	ret
03b2c                 | 
03b2c                 | __system___basic_print_string
03b2c     03 5A 05 F6 | 	mov	COUNT_, #3
03b30     B0 00 A0 FD | 	call	#pushregs_
03b34     26 55 02 F6 | 	mov	local01, arg02
03b38     27 57 02 F6 | 	mov	local02, arg03
03b3c     FC 11 B0 FD | 	call	#__system___gettxfunc
03b40     12 59 0A F6 | 	mov	local03, result1 wz
03b44     00 24 06 A6 |  if_e	mov	result1, #0
03b48     1C 00 90 AD |  if_e	jmp	#LR__0160
03b4c     00 54 0E F2 | 	cmp	local01, #0 wz
03b50     00 24 06 A6 |  if_e	mov	result1, #0
03b54     10 00 90 AD |  if_e	jmp	#LR__0160
03b58     2C 4B 02 F6 | 	mov	arg01, local03
03b5c     2B 4D 02 F6 | 	mov	arg02, local02
03b60     2A 4F 02 F6 | 	mov	arg03, local01
03b64     F8 00 B0 FD | 	call	#__system___fmtstr
03b68                 | LR__0160
03b68     AF F0 03 F6 | 	mov	ptra, fp
03b6c     BF 00 A0 FD | 	call	#popregs_
03b70                 | __system___basic_print_string_ret
03b70     2D 00 64 FD | 	ret
03b74                 | 
03b74                 | __system___basic_print_integer
03b74     04 5A 05 F6 | 	mov	COUNT_, #4
03b78     B0 00 A0 FD | 	call	#pushregs_
03b7c     26 55 02 F6 | 	mov	local01, arg02
03b80     27 57 02 F6 | 	mov	local02, arg03
03b84     28 59 02 F6 | 	mov	local03, arg04
03b88     B0 11 B0 FD | 	call	#__system___gettxfunc
03b8c     12 5B 0A F6 | 	mov	local04, result1 wz
03b90     00 24 06 A6 |  if_e	mov	result1, #0
03b94     14 00 90 AD |  if_e	jmp	#LR__0161
03b98     2D 4B 02 F6 | 	mov	arg01, local04
03b9c     2B 4D 02 F6 | 	mov	arg02, local02
03ba0     2A 4F 02 F6 | 	mov	arg03, local01
03ba4     2C 51 02 F6 | 	mov	arg04, local03
03ba8     A8 01 B0 FD | 	call	#__system___fmtnum
03bac                 | LR__0161
03bac     AF F0 03 F6 | 	mov	ptra, fp
03bb0     BF 00 A0 FD | 	call	#popregs_
03bb4                 | __system___basic_print_integer_ret
03bb4     2D 00 64 FD | 	ret
03bb8                 | 
03bb8                 | __system___basic_print_unsigned
03bb8     04 5A 05 F6 | 	mov	COUNT_, #4
03bbc     B0 00 A0 FD | 	call	#pushregs_
03bc0     26 55 02 F6 | 	mov	local01, arg02
03bc4     27 57 02 F6 | 	mov	local02, arg03
03bc8     28 59 02 F6 | 	mov	local03, arg04
03bcc     6C 11 B0 FD | 	call	#__system___gettxfunc
03bd0     12 5B 0A F6 | 	mov	local04, result1 wz
03bd4     00 24 06 A6 |  if_e	mov	result1, #0
03bd8     18 00 90 AD |  if_e	jmp	#LR__0162
03bdc     3A 56 26 F4 | 	bith	local02, #58
03be0     2D 4B 02 F6 | 	mov	arg01, local04
03be4     2B 4D 02 F6 | 	mov	arg02, local02
03be8     2A 4F 02 F6 | 	mov	arg03, local01
03bec     2C 51 02 F6 | 	mov	arg04, local03
03bf0     60 01 B0 FD | 	call	#__system___fmtnum
03bf4                 | LR__0162
03bf4     AF F0 03 F6 | 	mov	ptra, fp
03bf8     BF 00 A0 FD | 	call	#popregs_
03bfc                 | __system___basic_print_unsigned_ret
03bfc     2D 00 64 FD | 	ret
03c00                 | 
03c00                 | __system___fmtchar
03c00     00 5A 05 F6 | 	mov	COUNT_, #0
03c04     B0 00 A0 FD | 	call	#pushregs_
03c08     18 F0 07 F1 | 	add	ptra, #24
03c0c     04 5E 05 F1 | 	add	fp, #4
03c10     AF 4A 62 FC | 	wrlong	arg01, fp
03c14     04 5E 05 F1 | 	add	fp, #4
03c18     AF 4C 62 FC | 	wrlong	arg02, fp
03c1c     04 5E 05 F1 | 	add	fp, #4
03c20     AF 4E 62 FC | 	wrlong	arg03, fp
03c24     04 5E 05 F1 | 	add	fp, #4
03c28     AF 4E 42 FC | 	wrbyte	arg03, fp
03c2c     01 5E 05 F1 | 	add	fp, #1
03c30     AF 00 48 FC | 	wrbyte	#0, fp
03c34     01 5E 85 F1 | 	sub	fp, #1
03c38     AF 4E 02 F6 | 	mov	arg03, fp
03c3c     0C 5E 85 F1 | 	sub	fp, #12
03c40     AF 4A 02 FB | 	rdlong	arg01, fp
03c44     04 5E 05 F1 | 	add	fp, #4
03c48     AF 4C 02 FB | 	rdlong	arg02, fp
03c4c     08 5E 85 F1 | 	sub	fp, #8
03c50     0C 00 B0 FD | 	call	#__system___fmtstr
03c54     AF F0 03 F6 | 	mov	ptra, fp
03c58     BF 00 A0 FD | 	call	#popregs_
03c5c                 | __system___fmtchar_ret
03c5c     2D 00 64 FD | 	ret
03c60                 | 
03c60                 | __system___fmtstr
03c60     0E 5A 05 F6 | 	mov	COUNT_, #14
03c64     B0 00 A0 FD | 	call	#pushregs_
03c68     25 55 02 F6 | 	mov	local01, arg01
03c6c     26 57 02 F6 | 	mov	local02, arg02
03c70     27 59 02 F6 | 	mov	local03, arg03
03c74     2B 5B 02 F6 | 	mov	local04, local02
03c78     FF 5A 06 F5 | 	and	local04, #255
03c7c     2C 4B 02 F6 | 	mov	arg01, local03
03c80     00 5C 06 F6 | 	mov	local05, #0
03c84     88 C3 9F FE | 	loc	pa,	#(@LR__0164-@LR__0163)
03c88     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c8c                 | LR__0163
03c8c     25 5F CA FA | 	rdbyte	local06, arg01 wz
03c90     01 5C 06 51 |  if_ne	add	local05, #1
03c94     01 4A 06 51 |  if_ne	add	arg01, #1
03c98     F0 FF 9F 5D |  if_ne	jmp	#LR__0163
03c9c                 | LR__0164
03c9c     2E 25 02 F6 | 	mov	result1, local05
03ca0     12 61 02 F6 | 	mov	local07, result1
03ca4     00 5A 0E F2 | 	cmp	local04, #0 wz
03ca8     04 00 90 AD |  if_e	jmp	#LR__0165
03cac     2D 61 7A F3 | 	fles	local07, local04 wcz
03cb0                 | LR__0165
03cb0     2A 4B 02 F6 | 	mov	arg01, local01
03cb4     2B 4D 02 F6 | 	mov	arg02, local02
03cb8     30 4F 02 F6 | 	mov	arg03, local07
03cbc     02 50 06 F6 | 	mov	arg04, #2
03cc0     2C 0F B0 FD | 	call	#__system___fmtpad
03cc4     12 63 02 F6 | 	mov	local08, result1
03cc8     00 62 5E F2 | 	cmps	local08, #0 wcz
03ccc     31 25 02 C6 |  if_b	mov	result1, local08
03cd0     74 00 90 CD |  if_b	jmp	#LR__0168
03cd4     00 60 5E F2 | 	cmps	local07, #0 wcz
03cd8     44 00 90 ED |  if_be	jmp	#LR__0167
03cdc     30 65 02 F6 | 	mov	local09, local07
03ce0                 | LR__0166
03ce0     2A 67 02 F6 | 	mov	local10, local01
03ce4     33 69 02 FB | 	rdlong	local11, local10
03ce8     04 66 06 F1 | 	add	local10, #4
03cec     33 6B 02 FB | 	rdlong	local12, local10
03cf0     2C 4B C2 FA | 	rdbyte	arg01, local03
03cf4     07 6D 02 F6 | 	mov	local13, objptr
03cf8     34 0F 02 F6 | 	mov	objptr, local11
03cfc     01 58 06 F1 | 	add	local03, #1
03d00     2D 6A 62 FD | 	call	local12
03d04     36 0F 02 F6 | 	mov	objptr, local13
03d08     12 6F 02 F6 | 	mov	local14, result1
03d0c     00 6E 5E F2 | 	cmps	local14, #0 wcz
03d10     37 25 02 C6 |  if_b	mov	result1, local14
03d14     30 00 90 CD |  if_b	jmp	#LR__0168
03d18     37 63 02 F1 | 	add	local08, local14
03d1c     F0 65 6E FB | 	djnz	local09, #LR__0166
03d20                 | LR__0167
03d20     2A 4B 02 F6 | 	mov	arg01, local01
03d24     2B 4D 02 F6 | 	mov	arg02, local02
03d28     30 4F 02 F6 | 	mov	arg03, local07
03d2c     01 50 06 F6 | 	mov	arg04, #1
03d30     BC 0E B0 FD | 	call	#__system___fmtpad
03d34     12 6F 02 F6 | 	mov	local14, result1
03d38     00 6E 5E F2 | 	cmps	local14, #0 wcz
03d3c     37 25 02 C6 |  if_b	mov	result1, local14
03d40     37 63 02 31 |  if_ae	add	local08, local14
03d44     31 25 02 36 |  if_ae	mov	result1, local08
03d48                 | LR__0168
03d48     AF F0 03 F6 | 	mov	ptra, fp
03d4c     BF 00 A0 FD | 	call	#popregs_
03d50                 | __system___fmtstr_ret
03d50     2D 00 64 FD | 	ret
03d54                 | 
03d54                 | __system___fmtnum
03d54     07 5A 05 F6 | 	mov	COUNT_, #7
03d58     B0 00 A0 FD | 	call	#pushregs_
03d5c     78 F0 07 F1 | 	add	ptra, #120
03d60     04 5E 05 F1 | 	add	fp, #4
03d64     AF 4A 62 FC | 	wrlong	arg01, fp
03d68     04 5E 05 F1 | 	add	fp, #4
03d6c     AF 4C 62 FC | 	wrlong	arg02, fp
03d70     04 5E 05 F1 | 	add	fp, #4
03d74     AF 4E 62 FC | 	wrlong	arg03, fp
03d78     04 5E 05 F1 | 	add	fp, #4
03d7c     AF 50 62 FC | 	wrlong	arg04, fp
03d80     04 5E 05 F1 | 	add	fp, #4
03d84     AF 54 02 F6 | 	mov	local01, fp
03d88     44 5E 05 F1 | 	add	fp, #68
03d8c     AF 54 62 FC | 	wrlong	local01, fp
03d90     04 5E 05 F1 | 	add	fp, #4
03d94     AF 00 68 FC | 	wrlong	#0, fp
03d98     54 5E 85 F1 | 	sub	fp, #84
03d9c     AF 54 02 FB | 	rdlong	local01, fp
03da0     10 54 46 F0 | 	shr	local01, #16
03da4     3F 54 06 F5 | 	and	local01, #63
03da8     58 5E 05 F1 | 	add	fp, #88
03dac     AF 54 62 FC | 	wrlong	local01, fp
03db0     58 5E 85 F1 | 	sub	fp, #88
03db4     AF 54 02 FB | 	rdlong	local01, fp
03db8     FF 54 06 F5 | 	and	local01, #255
03dbc     5C 5E 05 F1 | 	add	fp, #92
03dc0     AF 54 62 FC | 	wrlong	local01, fp
03dc4     5C 5E 85 F1 | 	sub	fp, #92
03dc8     AF 54 02 FB | 	rdlong	local01, fp
03dcc     1A 54 46 F0 | 	shr	local01, #26
03dd0     03 54 06 F5 | 	and	local01, #3
03dd4     60 5E 05 F1 | 	add	fp, #96
03dd8     AF 54 62 FC | 	wrlong	local01, fp
03ddc     08 5E 85 F1 | 	sub	fp, #8
03de0     AF 54 02 FB | 	rdlong	local01, fp
03de4     60 5E 85 F1 | 	sub	fp, #96
03de8     00 54 5E F2 | 	cmps	local01, #0 wcz
03dec     14 00 90 ED |  if_be	jmp	#LR__0169
03df0     60 5E 05 F1 | 	add	fp, #96
03df4     AF 54 02 FB | 	rdlong	local01, fp
03df8     01 54 86 F1 | 	sub	local01, #1
03dfc     AF 54 62 FC | 	wrlong	local01, fp
03e00     60 5E 85 F1 | 	sub	fp, #96
03e04                 | LR__0169
03e04     64 5E 05 F1 | 	add	fp, #100
03e08     AF 56 02 FB | 	rdlong	local02, fp
03e0c     64 5E 85 F1 | 	sub	fp, #100
03e10     40 56 5E F2 | 	cmps	local02, #64 wcz
03e14     14 00 90 1D |  if_a	jmp	#LR__0170
03e18     64 5E 05 F1 | 	add	fp, #100
03e1c     AF 58 02 FB | 	rdlong	local03, fp
03e20     64 5E 85 F1 | 	sub	fp, #100
03e24     2C 5B 0A F6 | 	mov	local04, local03 wz
03e28     0C 00 90 5D |  if_ne	jmp	#LR__0171
03e2c                 | LR__0170
03e2c     64 5E 05 F1 | 	add	fp, #100
03e30     AF 80 68 FC | 	wrlong	#64, fp
03e34     64 5E 85 F1 | 	sub	fp, #100
03e38                 | LR__0171
03e38     68 5E 05 F1 | 	add	fp, #104
03e3c     AF 54 02 FB | 	rdlong	local01, fp
03e40     68 5E 85 F1 | 	sub	fp, #104
03e44     03 54 0E F2 | 	cmp	local01, #3 wz
03e48     10 00 90 5D |  if_ne	jmp	#LR__0172
03e4c     68 5E 05 F1 | 	add	fp, #104
03e50     AF 00 68 FC | 	wrlong	#0, fp
03e54     68 5E 85 F1 | 	sub	fp, #104
03e58     30 00 90 FD | 	jmp	#LR__0174
03e5c                 | LR__0172
03e5c     0C 5E 05 F1 | 	add	fp, #12
03e60     AF 54 02 FB | 	rdlong	local01, fp
03e64     0C 5E 85 F1 | 	sub	fp, #12
03e68     00 54 5E F2 | 	cmps	local01, #0 wcz
03e6c     1C 00 90 3D |  if_ae	jmp	#LR__0173
03e70     68 5E 05 F1 | 	add	fp, #104
03e74     AF 08 68 FC | 	wrlong	#4, fp
03e78     5C 5E 85 F1 | 	sub	fp, #92
03e7c     AF 54 02 FB | 	rdlong	local01, fp
03e80     2A 55 62 F6 | 	neg	local01, local01
03e84     AF 54 62 FC | 	wrlong	local01, fp
03e88     0C 5E 85 F1 | 	sub	fp, #12
03e8c                 | LR__0173
03e8c                 | LR__0174
03e8c     68 5E 05 F1 | 	add	fp, #104
03e90     AF 54 0A FB | 	rdlong	local01, fp wz
03e94     68 5E 85 F1 | 	sub	fp, #104
03e98     EC 00 90 AD |  if_e	jmp	#LR__0181
03e9c     5C 5E 05 F1 | 	add	fp, #92
03ea0     AF 5A 02 FB | 	rdlong	local04, fp
03ea4     01 5A 06 F1 | 	add	local04, #1
03ea8     AF 5A 62 FC | 	wrlong	local04, fp
03eac     04 5E 05 F1 | 	add	fp, #4
03eb0     AF 54 02 FB | 	rdlong	local01, fp
03eb4     04 5E 05 F1 | 	add	fp, #4
03eb8     AF 5A 02 FB | 	rdlong	local04, fp
03ebc     64 5E 85 F1 | 	sub	fp, #100
03ec0     2D 55 0A F2 | 	cmp	local01, local04 wz
03ec4     3C 00 90 5D |  if_ne	jmp	#LR__0176
03ec8     60 5E 05 F1 | 	add	fp, #96
03ecc     AF 5A 02 FB | 	rdlong	local04, fp
03ed0     01 5A 86 F1 | 	sub	local04, #1
03ed4     AF 5A 62 FC | 	wrlong	local04, fp
03ed8     AF 54 0A FB | 	rdlong	local01, fp wz
03edc     60 5E 85 F1 | 	sub	fp, #96
03ee0     20 00 90 5D |  if_ne	jmp	#LR__0175
03ee4     04 5E 05 F1 | 	add	fp, #4
03ee8     AF 4A 02 FB | 	rdlong	arg01, fp
03eec     04 5E 05 F1 | 	add	fp, #4
03ef0     AF 4C 02 FB | 	rdlong	arg02, fp
03ef4     08 5E 85 F1 | 	sub	fp, #8
03ef8     23 4E 06 F6 | 	mov	arg03, #35
03efc     00 FD BF FD | 	call	#__system___fmtchar
03f00     70 01 90 FD | 	jmp	#LR__0186
03f04                 | LR__0175
03f04                 | LR__0176
03f04     68 5E 05 F1 | 	add	fp, #104
03f08     AF 54 02 FB | 	rdlong	local01, fp
03f0c     68 5E 85 F1 | 	sub	fp, #104
03f10     02 54 0E F2 | 	cmp	local01, #2 wz
03f14     20 00 90 5D |  if_ne	jmp	#LR__0177
03f18     58 5E 05 F1 | 	add	fp, #88
03f1c     AF 54 02 FB | 	rdlong	local01, fp
03f20     2A 5B 02 F6 | 	mov	local04, local01
03f24     01 5A 06 F1 | 	add	local04, #1
03f28     AF 5A 62 FC | 	wrlong	local04, fp
03f2c     58 5E 85 F1 | 	sub	fp, #88
03f30     2A 41 48 FC | 	wrbyte	#32, local01
03f34     50 00 90 FD | 	jmp	#LR__0180
03f38                 | LR__0177
03f38     68 5E 05 F1 | 	add	fp, #104
03f3c     AF 54 02 FB | 	rdlong	local01, fp
03f40     68 5E 85 F1 | 	sub	fp, #104
03f44     04 54 0E F2 | 	cmp	local01, #4 wz
03f48     20 00 90 5D |  if_ne	jmp	#LR__0178
03f4c     58 5E 05 F1 | 	add	fp, #88
03f50     AF 54 02 FB | 	rdlong	local01, fp
03f54     2A 5B 02 F6 | 	mov	local04, local01
03f58     01 5A 06 F1 | 	add	local04, #1
03f5c     AF 5A 62 FC | 	wrlong	local04, fp
03f60     58 5E 85 F1 | 	sub	fp, #88
03f64     2A 5B 48 FC | 	wrbyte	#45, local01
03f68     1C 00 90 FD | 	jmp	#LR__0179
03f6c                 | LR__0178
03f6c     58 5E 05 F1 | 	add	fp, #88
03f70     AF 54 02 FB | 	rdlong	local01, fp
03f74     2A 5B 02 F6 | 	mov	local04, local01
03f78     01 5A 06 F1 | 	add	local04, #1
03f7c     AF 5A 62 FC | 	wrlong	local04, fp
03f80     58 5E 85 F1 | 	sub	fp, #88
03f84     2A 57 48 FC | 	wrbyte	#43, local01
03f88                 | LR__0179
03f88                 | LR__0180
03f88                 | LR__0181
03f88     58 5E 05 F1 | 	add	fp, #88
03f8c     AF 4A 02 FB | 	rdlong	arg01, fp
03f90     4C 5E 85 F1 | 	sub	fp, #76
03f94     AF 4C 02 FB | 	rdlong	arg02, fp
03f98     04 5E 05 F1 | 	add	fp, #4
03f9c     AF 4E 02 FB | 	rdlong	arg03, fp
03fa0     50 5E 05 F1 | 	add	fp, #80
03fa4     AF 50 02 FB | 	rdlong	arg04, fp
03fa8     00 5C 06 F6 | 	mov	local05, #0
03fac     58 5E 85 F1 | 	sub	fp, #88
03fb0     AF 5E 02 FB | 	rdlong	local06, fp
03fb4     08 5E 85 F1 | 	sub	fp, #8
03fb8     1D 5E 2E F4 | 	testbn	local06, #29 wz
03fbc     01 5C 06 56 |  if_ne	mov	local05, #1
03fc0     2E 53 02 F6 | 	mov	arg05, local05
03fc4     E8 0C B0 FD | 	call	#__system___uitoa
03fc8     12 61 02 F6 | 	mov	local07, result1
03fcc     5C 5E 05 F1 | 	add	fp, #92
03fd0     AF 54 02 FB | 	rdlong	local01, fp
03fd4     30 55 02 F1 | 	add	local01, local07
03fd8     AF 54 62 FC | 	wrlong	local01, fp
03fdc     08 5E 05 F1 | 	add	fp, #8
03fe0     AF 5A 02 FB | 	rdlong	local04, fp
03fe4     64 5E 85 F1 | 	sub	fp, #100
03fe8     2D 55 5A F2 | 	cmps	local01, local04 wcz
03fec     64 00 90 ED |  if_be	jmp	#LR__0185
03ff0     4C C0 9F FE | 	loc	pa,	#(@LR__0183-@LR__0182)
03ff4     93 00 A0 FD | 	call	#FCACHE_LOAD_
03ff8                 | LR__0182
03ff8     64 5E 05 F1 | 	add	fp, #100
03ffc     AF 54 02 FB | 	rdlong	local01, fp
04000     2A 5B 02 F6 | 	mov	local04, local01
04004     01 5A 86 F1 | 	sub	local04, #1
04008     AF 5A 62 FC | 	wrlong	local04, fp
0400c     64 5E 85 F1 | 	sub	fp, #100
04010     00 54 5E F2 | 	cmps	local01, #0 wcz
04014     20 00 90 ED |  if_be	jmp	#LR__0184
04018     58 5E 05 F1 | 	add	fp, #88
0401c     AF 54 02 FB | 	rdlong	local01, fp
04020     2A 5B 02 F6 | 	mov	local04, local01
04024     01 5A 06 F1 | 	add	local04, #1
04028     AF 5A 62 FC | 	wrlong	local04, fp
0402c     58 5E 85 F1 | 	sub	fp, #88
04030     2A 47 48 FC | 	wrbyte	#35, local01
04034     C0 FF 9F FD | 	jmp	#LR__0182
04038                 | LR__0183
04038                 | LR__0184
04038     58 5E 05 F1 | 	add	fp, #88
0403c     AF 54 02 FB | 	rdlong	local01, fp
04040     2A 5B 02 F6 | 	mov	local04, local01
04044     01 5A 06 F1 | 	add	local04, #1
04048     AF 5A 62 FC | 	wrlong	local04, fp
0404c     58 5E 85 F1 | 	sub	fp, #88
04050     2A 01 48 FC | 	wrbyte	#0, local01
04054                 | LR__0185
04054     14 5E 05 F1 | 	add	fp, #20
04058     AF 4E 02 F6 | 	mov	arg03, fp
0405c     10 5E 85 F1 | 	sub	fp, #16
04060     AF 4A 02 FB | 	rdlong	arg01, fp
04064     04 5E 05 F1 | 	add	fp, #4
04068     AF 4C 02 FB | 	rdlong	arg02, fp
0406c     08 5E 85 F1 | 	sub	fp, #8
04070     EC FB BF FD | 	call	#__system___fmtstr
04074                 | LR__0186
04074     AF F0 03 F6 | 	mov	ptra, fp
04078     BF 00 A0 FD | 	call	#popregs_
0407c                 | __system___fmtnum_ret
0407c     2D 00 64 FD | 	ret
04080                 | 
04080                 | __system___gc_ptrs
04080     0A 5A 05 F6 | 	mov	COUNT_, #10
04084     B0 00 A0 FD | 	call	#pushregs_
04088     02 55 02 F6 | 	mov	local01, __heap_ptr
0408c     2A 57 02 F6 | 	mov	local02, local01
04090     07 00 00 FF 
04094     F8 57 06 F1 | 	add	local02, ##4088
04098     2A 59 0A FB | 	rdlong	local03, local01 wz
0409c     74 00 90 5D |  if_ne	jmp	#LR__0187
040a0     2B 5B 02 F6 | 	mov	local04, local02
040a4     2A 5B 82 F1 | 	sub	local04, local01
040a8     2A 03 58 FC | 	wrword	#1, local01
040ac     2A 5D 02 F6 | 	mov	local05, local01
040b0     02 5C 06 F1 | 	add	local05, #2
040b4     36 00 80 FF 
040b8     2E 21 59 FC | 	wrword	##27792, local05
040bc     2A 5F 02 F6 | 	mov	local06, local01
040c0     04 5E 06 F1 | 	add	local06, #4
040c4     2F 01 58 FC | 	wrword	#0, local06
040c8     2A 61 02 F6 | 	mov	local07, local01
040cc     06 60 06 F1 | 	add	local07, #6
040d0     30 03 58 FC | 	wrword	#1, local07
040d4     10 54 06 F1 | 	add	local01, #16
040d8     2D 59 52 F6 | 	abs	local03, local04 wc
040dc     04 58 46 F0 | 	shr	local03, #4
040e0     2C 59 62 C6 |  if_b	neg	local03, local03
040e4     2A 59 52 FC | 	wrword	local03, local01
040e8     2A 63 02 F6 | 	mov	local08, local01
040ec     02 62 06 F1 | 	add	local08, #2
040f0     36 00 80 FF 
040f4     31 1F 59 FC | 	wrword	##27791, local08
040f8     2A 65 02 F6 | 	mov	local09, local01
040fc     04 64 06 F1 | 	add	local09, #4
04100     32 01 58 FC | 	wrword	#0, local09
04104     2A 67 02 F6 | 	mov	local10, local01
04108     06 66 06 F1 | 	add	local10, #6
0410c     33 01 58 FC | 	wrword	#0, local10
04110     10 54 86 F1 | 	sub	local01, #16
04114                 | LR__0187
04114     2B 27 02 F6 | 	mov	result2, local02
04118     2A 25 02 F6 | 	mov	result1, local01
0411c     AF F0 03 F6 | 	mov	ptra, fp
04120     BF 00 A0 FD | 	call	#popregs_
04124                 | __system___gc_ptrs_ret
04124     2D 00 64 FD | 	ret
04128                 | 
04128                 | __system___gc_nextBlockPtr
04128     02 5A 05 F6 | 	mov	COUNT_, #2
0412c     B0 00 A0 FD | 	call	#pushregs_
04130     25 55 02 F6 | 	mov	local01, arg01
04134     2A 57 EA FA | 	rdword	local02, local01 wz
04138     10 00 90 5D |  if_ne	jmp	#LR__0188
0413c     2C 00 00 FF 
04140     EC 4A 06 F6 | 	mov	arg01, ##@LR__0300
04144     F8 01 B0 FD | 	call	#__system___gc_errmsg
04148     0C 00 90 FD | 	jmp	#LR__0189
0414c                 | LR__0188
0414c     04 56 66 F0 | 	shl	local02, #4
04150     2A 25 02 F6 | 	mov	result1, local01
04154     2B 25 02 F1 | 	add	result1, local02
04158                 | LR__0189
04158     AF F0 03 F6 | 	mov	ptra, fp
0415c     BF 00 A0 FD | 	call	#popregs_
04160                 | __system___gc_nextBlockPtr_ret
04160     2D 00 64 FD | 	ret
04164                 | 
04164                 | __system___gc_tryalloc
04164     1B 5A 05 F6 | 	mov	COUNT_, #27
04168     B0 00 A0 FD | 	call	#pushregs_
0416c     25 55 02 F6 | 	mov	local01, arg01
04170     26 57 02 F6 | 	mov	local02, arg02
04174     08 FF BF FD | 	call	#__system___gc_ptrs
04178     12 59 02 F6 | 	mov	local03, result1
0417c     13 5B 02 F6 | 	mov	local04, result2
04180     2C 5D 02 F6 | 	mov	local05, local03
04184     00 5E 06 F6 | 	mov	local06, #0
04188     CC BE 9F FE | 	loc	pa,	#(@LR__0191-@LR__0190)
0418c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04190                 | LR__0190
04190     2E 61 02 F6 | 	mov	local07, local05
04194     06 5C 06 F1 | 	add	local05, #6
04198     2E 63 02 F6 | 	mov	local08, local05
0419c     2C 65 02 F6 | 	mov	local09, local03
041a0     31 67 E2 FA | 	rdword	local10, local08
041a4     32 4B 02 F6 | 	mov	arg01, local09
041a8     33 4D 0A F6 | 	mov	arg02, local10 wz
041ac     00 24 06 A6 |  if_e	mov	result1, #0
041b0     04 4C 66 50 |  if_ne	shl	arg02, #4
041b4     26 4B 02 51 |  if_ne	add	arg01, arg02
041b8     25 25 02 56 |  if_ne	mov	result1, arg01
041bc     12 69 02 F6 | 	mov	local11, result1
041c0     34 5D 0A F6 | 	mov	local05, local11 wz
041c4     2E 65 02 56 |  if_ne	mov	local09, local05
041c8     32 6B 02 56 |  if_ne	mov	local12, local09
041cc     35 5F E2 5A |  if_ne	rdword	local06, local12
041d0     00 5C 0E F2 | 	cmp	local05, #0 wz
041d4     10 00 90 AD |  if_e	jmp	#LR__0192
041d8     2D 5D 5A F2 | 	cmps	local05, local04 wcz
041dc     08 00 90 3D |  if_ae	jmp	#LR__0192
041e0     2F 55 5A F2 | 	cmps	local01, local06 wcz
041e4     A8 FF 9F 1D |  if_a	jmp	#LR__0190
041e8                 | LR__0191
041e8                 | LR__0192
041e8     00 5C 0E F2 | 	cmp	local05, #0 wz
041ec     2E 25 02 A6 |  if_e	mov	result1, local05
041f0     40 01 90 AD |  if_e	jmp	#LR__0195
041f4     2E 6D 02 F6 | 	mov	local13, local05
041f8     06 6C 06 F1 | 	add	local13, #6
041fc     36 6F E2 FA | 	rdword	local14, local13
04200     2F 55 5A F2 | 	cmps	local01, local06 wcz
04204     CC 00 90 3D |  if_ae	jmp	#LR__0194
04208     2E 71 02 F6 | 	mov	local15, local05
0420c     38 55 52 FC | 	wrword	local01, local15
04210     2A 73 02 F6 | 	mov	local16, local01
04214     04 72 66 F0 | 	shl	local16, #4
04218     2E 75 02 F6 | 	mov	local17, local05
0421c     39 75 02 F1 | 	add	local17, local16
04220     2F 77 02 F6 | 	mov	local18, local06
04224     2A 77 82 F1 | 	sub	local18, local01
04228     3A 79 02 F6 | 	mov	local19, local17
0422c     3C 77 52 FC | 	wrword	local18, local19
04230     3A 7B 02 F6 | 	mov	local20, local17
04234     02 7A 06 F1 | 	add	local20, #2
04238     36 00 80 FF 
0423c     3D 1F 59 FC | 	wrword	##27791, local20
04240     3A 7D 02 F6 | 	mov	local21, local17
04244     04 7C 06 F1 | 	add	local21, #4
04248     2E 4D 0A F6 | 	mov	arg02, local05 wz
0424c     00 24 06 A6 |  if_e	mov	result1, #0
04250     2C 4D 82 51 |  if_ne	sub	arg02, local03
04254     04 4C 46 50 |  if_ne	shr	arg02, #4
04258     26 25 02 56 |  if_ne	mov	result1, arg02
0425c     3E 25 52 FC | 	wrword	result1, local21
04260     3A 7F 02 F6 | 	mov	local22, local17
04264     36 65 E2 FA | 	rdword	local09, local13
04268     06 7E 06 F1 | 	add	local22, #6
0426c     3F 65 52 FC | 	wrword	local09, local22
04270     3A 81 02 F6 | 	mov	local23, local17
04274     40 4D 0A F6 | 	mov	arg02, local23 wz
04278     00 24 06 A6 |  if_e	mov	result1, #0
0427c     2C 4D 82 51 |  if_ne	sub	arg02, local03
04280     04 4C 46 50 |  if_ne	shr	arg02, #4
04284     26 25 02 56 |  if_ne	mov	result1, arg02
04288     12 6F 02 F6 | 	mov	local14, result1
0428c     3A 4B 02 F6 | 	mov	arg01, local17
04290     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
04294     12 83 0A F6 | 	mov	local24, result1 wz
04298     38 00 90 AD |  if_e	jmp	#LR__0193
0429c     2D 83 5A F2 | 	cmps	local24, local04 wcz
042a0     30 00 90 3D |  if_ae	jmp	#LR__0193
042a4     41 85 02 F6 | 	mov	local25, local24
042a8     04 84 06 F1 | 	add	local25, #4
042ac     2C 65 02 F6 | 	mov	local09, local03
042b0     40 67 02 F6 | 	mov	local10, local23
042b4     32 4B 02 F6 | 	mov	arg01, local09
042b8     33 4D 0A F6 | 	mov	arg02, local10 wz
042bc     00 24 06 A6 |  if_e	mov	result1, #0
042c0     25 4D 82 51 |  if_ne	sub	arg02, arg01
042c4     04 4C 46 50 |  if_ne	shr	arg02, #4
042c8     26 25 02 56 |  if_ne	mov	result1, arg02
042cc     12 69 02 F6 | 	mov	local11, result1
042d0     42 69 52 FC | 	wrword	local11, local25
042d4                 | LR__0193
042d4                 | LR__0194
042d4     06 60 06 F1 | 	add	local07, #6
042d8     30 6F 52 FC | 	wrword	local14, local07
042dc     36 00 00 FF 
042e0     80 64 06 F6 | 	mov	local09, ##27776
042e4     2B 65 42 F5 | 	or	local09, local02
042e8     2E 87 02 F6 | 	mov	local26, local05
042ec     02 86 06 F1 | 	add	local26, #2
042f0     01 24 62 FD | 	cogid	result1
042f4     12 65 42 F5 | 	or	local09, result1
042f8     43 65 52 FC | 	wrword	local09, local26
042fc     2C 89 02 F6 | 	mov	local27, local03
04300     08 88 06 F1 | 	add	local27, #8
04304     44 65 E2 FA | 	rdword	local09, local27
04308     36 65 52 FC | 	wrword	local09, local13
0430c     2E 4D 0A F6 | 	mov	arg02, local05 wz
04310     00 24 06 A6 |  if_e	mov	result1, #0
04314     2C 4D 82 51 |  if_ne	sub	arg02, local03
04318     04 4C 46 50 |  if_ne	shr	arg02, #4
0431c     26 25 02 56 |  if_ne	mov	result1, arg02
04320     44 25 52 FC | 	wrword	result1, local27
04324     08 5C 06 F1 | 	add	local05, #8
04328     2E 25 02 F6 | 	mov	result1, local05
0432c     00 C0 31 FF 
04330     00 24 46 F5 | 	or	result1, ##1669332992
04334                 | LR__0195
04334     AF F0 03 F6 | 	mov	ptra, fp
04338     BF 00 A0 FD | 	call	#popregs_
0433c                 | __system___gc_tryalloc_ret
0433c     2D 00 64 FD | 	ret
04340                 | 
04340                 | __system___gc_errmsg
04340     02 5A 05 F6 | 	mov	COUNT_, #2
04344     B0 00 A0 FD | 	call	#pushregs_
04348     25 55 02 F6 | 	mov	local01, arg01
0434c                 | LR__0196
0434c     2A 57 CA FA | 	rdbyte	local02, local01 wz
04350     01 54 06 F1 | 	add	local01, #1
04354     0C 00 90 AD |  if_e	jmp	#LR__0197
04358     2B 4B 02 F6 | 	mov	arg01, local02
0435c     8C F5 BF FD | 	call	#__system___tx
04360     E8 FF 9F FD | 	jmp	#LR__0196
04364                 | LR__0197
04364     00 24 06 F6 | 	mov	result1, #0
04368     AF F0 03 F6 | 	mov	ptra, fp
0436c     BF 00 A0 FD | 	call	#popregs_
04370                 | __system___gc_errmsg_ret
04370     2D 00 64 FD | 	ret
04374                 | 
04374                 | __system___gc_alloc_managed
04374     02 5A 05 F6 | 	mov	COUNT_, #2
04378     B0 00 A0 FD | 	call	#pushregs_
0437c     25 55 02 F6 | 	mov	local01, arg01
04380     00 4C 06 F6 | 	mov	arg02, #0
04384     30 00 B0 FD | 	call	#__system___gc_doalloc
04388     12 57 0A F6 | 	mov	local02, result1 wz
0438c     18 00 90 5D |  if_ne	jmp	#LR__0198
04390     00 54 5E F2 | 	cmps	local01, #0 wcz
04394     10 00 90 ED |  if_be	jmp	#LR__0198
04398     2C 00 00 FF 
0439c     08 4B 06 F6 | 	mov	arg01, ##@LR__0301
043a0     9C FF BF FD | 	call	#__system___gc_errmsg
043a4     04 00 90 FD | 	jmp	#LR__0199
043a8                 | LR__0198
043a8     2B 25 02 F6 | 	mov	result1, local02
043ac                 | LR__0199
043ac     AF F0 03 F6 | 	mov	ptra, fp
043b0     BF 00 A0 FD | 	call	#popregs_
043b4                 | __system___gc_alloc_managed_ret
043b4     2D 00 64 FD | 	ret
043b8                 | 
043b8                 | __system___gc_doalloc
043b8     07 5A 05 F6 | 	mov	COUNT_, #7
043bc     B0 00 A0 FD | 	call	#pushregs_
043c0     25 55 0A F6 | 	mov	local01, arg01 wz
043c4     26 57 02 F6 | 	mov	local02, arg02
043c8     00 24 06 A6 |  if_e	mov	result1, #0
043cc     8C 00 90 AD |  if_e	jmp	#LR__0207
043d0     17 54 06 F1 | 	add	local01, #23
043d4     0F 54 26 F5 | 	andn	local01, #15
043d8     04 54 46 F0 | 	shr	local01, #4
043dc     14 14 06 F1 | 	add	ptr___system__dat__, #20
043e0     0A 59 02 F6 | 	mov	local03, ptr___system__dat__
043e4     2C 4B 02 F6 | 	mov	arg01, local03
043e8     14 14 86 F1 | 	sub	ptr___system__dat__, #20
043ec     C4 F4 BF FD | 	call	#__system___lockmem
043f0     2A 4B 02 F6 | 	mov	arg01, local01
043f4     2B 4D 02 F6 | 	mov	arg02, local02
043f8     68 FD BF FD | 	call	#__system___gc_tryalloc
043fc     12 5B 0A F6 | 	mov	local04, result1 wz
04400     14 00 90 5D |  if_ne	jmp	#LR__0200
04404     10 03 B0 FD | 	call	#__system___gc_docollect
04408     2A 4B 02 F6 | 	mov	arg01, local01
0440c     2B 4D 02 F6 | 	mov	arg02, local02
04410     50 FD BF FD | 	call	#__system___gc_tryalloc
04414     12 5B 02 F6 | 	mov	local04, result1
04418                 | LR__0200
04418     2C 01 68 FC | 	wrlong	#0, local03
0441c     00 5A 0E F2 | 	cmp	local04, #0 wz
04420     34 00 90 AD |  if_e	jmp	#LR__0206
04424     04 54 66 F0 | 	shl	local01, #4
04428     08 54 86 F1 | 	sub	local01, #8
0442c     2A 5D 52 F6 | 	abs	local05, local01 wc
04430     02 5C 46 F0 | 	shr	local05, #2
04434     2E 5D 62 C6 |  if_b	neg	local05, local05
04438     2E 5F 0A F6 | 	mov	local06, local05 wz
0443c     2D 61 02 F6 | 	mov	local07, local04
04440     14 00 90 AD |  if_e	jmp	#LR__0205
04444     C4 BB 9F FE | 	loc	pa,	#(@LR__0203-@LR__0201)
04448     93 00 A0 FD | 	call	#FCACHE_LOAD_
0444c                 | LR__0201
0444c     2F 05 D8 FC | 	rep	@LR__0204, local06
04450                 | LR__0202
04450     30 01 68 FC | 	wrlong	#0, local07
04454     04 60 06 F1 | 	add	local07, #4
04458                 | LR__0203
04458                 | LR__0204
04458                 | LR__0205
04458                 | LR__0206
04458     2D 25 02 F6 | 	mov	result1, local04
0445c                 | LR__0207
0445c     AF F0 03 F6 | 	mov	ptra, fp
04460     BF 00 A0 FD | 	call	#popregs_
04464                 | __system___gc_doalloc_ret
04464     2D 00 64 FD | 	ret
04468                 | 
04468                 | __system___gc_isvalidptr
04468     27 2B 02 F6 | 	mov	_var01, arg03
0446c     15 2D 02 F6 | 	mov	_var02, _var01
04470     00 F8 7F FF 
04474     00 2C 06 F5 | 	and	_var02, ##-1048576
04478     00 C0 31 FF 
0447c     00 2C 0E F2 | 	cmp	_var02, ##1669332992 wz
04480     00 24 06 56 |  if_ne	mov	result1, #0
04484     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
04488     08 2A 86 F1 | 	sub	_var01, #8
0448c     15 2F 02 F6 | 	mov	_var03, _var01
04490     00 F8 7F FF 
04494     00 2E 26 F5 | 	andn	_var03, ##-1048576
04498     25 2F 5A F2 | 	cmps	_var03, arg01 wcz
0449c     08 00 90 CD |  if_b	jmp	#LR__0208
044a0     26 2F 5A F2 | 	cmps	_var03, arg02 wcz
044a4     08 00 90 CD |  if_b	jmp	#LR__0209
044a8                 | LR__0208
044a8     00 24 06 F6 | 	mov	result1, #0
044ac     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
044b0                 | LR__0209
044b0     17 2D 02 F6 | 	mov	_var02, _var03
044b4     25 2D 62 F5 | 	xor	_var02, arg01
044b8     0F 2C 0E F5 | 	and	_var02, #15 wz
044bc     00 24 06 56 |  if_ne	mov	result1, #0
044c0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
044c4     17 31 02 F6 | 	mov	_var04, _var03
044c8     02 30 06 F1 | 	add	_var04, #2
044cc     18 2D E2 FA | 	rdword	_var02, _var04
044d0     7F 00 00 FF 
044d4     C0 2D 06 F5 | 	and	_var02, ##65472
044d8     36 00 00 FF 
044dc     80 2C 0E F2 | 	cmp	_var02, ##27776 wz
044e0     00 24 06 56 |  if_ne	mov	result1, #0
044e4     17 25 02 A6 |  if_e	mov	result1, _var03
044e8                 | __system___gc_isvalidptr_ret
044e8     2D 00 64 FD | 	ret
044ec                 | 
044ec                 | __system___gc_dofree
044ec     1A 5A 05 F6 | 	mov	COUNT_, #26
044f0     B0 00 A0 FD | 	call	#pushregs_
044f4     25 55 02 F6 | 	mov	local01, arg01
044f8     84 FB BF FD | 	call	#__system___gc_ptrs
044fc     13 57 02 F6 | 	mov	local02, result2
04500     12 59 02 F6 | 	mov	local03, result1
04504     2A 5B 02 F6 | 	mov	local04, local01
04508     02 5A 06 F1 | 	add	local04, #2
0450c     36 00 80 FF 
04510     2D 1F 59 FC | 	wrword	##27791, local04
04514     2A 5D 02 F6 | 	mov	local05, local01
04518     2A 4B 02 F6 | 	mov	arg01, local01
0451c     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
04520     12 5F 02 F6 | 	mov	local06, result1
04524     28 BB 9F FE | 	loc	pa,	#(@LR__0211-@LR__0210)
04528     93 00 A0 FD | 	call	#FCACHE_LOAD_
0452c                 | LR__0210
0452c     04 5C 06 F1 | 	add	local05, #4
04530     2E 61 02 F6 | 	mov	local07, local05
04534     30 4D EA FA | 	rdword	arg02, local07 wz
04538     2C 4B 02 F6 | 	mov	arg01, local03
0453c     00 24 06 A6 |  if_e	mov	result1, #0
04540     04 4C 66 50 |  if_ne	shl	arg02, #4
04544     26 4B 02 51 |  if_ne	add	arg01, arg02
04548     25 25 02 56 |  if_ne	mov	result1, arg01
0454c     12 5D 0A F6 | 	mov	local05, result1 wz
04550     28 00 90 AD |  if_e	jmp	#LR__0212
04554     2E 4B 02 F6 | 	mov	arg01, local05
04558     00 62 06 F6 | 	mov	local08, #0
0455c     02 4A 06 F1 | 	add	arg01, #2
04560     25 65 E2 FA | 	rdword	local09, arg01
04564     36 00 00 FF 
04568     8F 64 0E F2 | 	cmp	local09, ##27791 wz
0456c     01 62 66 A6 |  if_e	neg	local08, #1
04570     31 25 02 F6 | 	mov	result1, local08
04574     12 67 0A F6 | 	mov	local10, result1 wz
04578     B0 FF 9F AD |  if_e	jmp	#LR__0210
0457c                 | LR__0211
0457c                 | LR__0212
0457c     00 5C 0E F2 | 	cmp	local05, #0 wz
04580     2C 5D 02 A6 |  if_e	mov	local05, local03
04584     2E 69 02 F6 | 	mov	local11, local05
04588     06 68 06 F1 | 	add	local11, #6
0458c     2A 6B 02 F6 | 	mov	local12, local01
04590     34 6D E2 FA | 	rdword	local13, local11
04594     06 6A 06 F1 | 	add	local12, #6
04598     35 6D 52 FC | 	wrword	local13, local12
0459c     2A 4D 0A F6 | 	mov	arg02, local01 wz
045a0     00 24 06 A6 |  if_e	mov	result1, #0
045a4     2C 4D 82 51 |  if_ne	sub	arg02, local03
045a8     04 4C 46 50 |  if_ne	shr	arg02, #4
045ac     26 25 02 56 |  if_ne	mov	result1, arg02
045b0     12 6F 02 F6 | 	mov	local14, result1
045b4     34 6F 52 FC | 	wrword	local14, local11
045b8     2C 5D 0A F2 | 	cmp	local05, local03 wz
045bc     74 00 90 AD |  if_e	jmp	#LR__0215
045c0     2E 4B 02 F6 | 	mov	arg01, local05
045c4     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
045c8     2A 25 0A F2 | 	cmp	result1, local01 wz
045cc     64 00 90 5D |  if_ne	jmp	#LR__0214
045d0     2E 71 02 F6 | 	mov	local15, local05
045d4     38 73 E2 FA | 	rdword	local16, local15
045d8     2A 75 02 F6 | 	mov	local17, local01
045dc     3A 67 E2 FA | 	rdword	local10, local17
045e0     33 73 02 F1 | 	add	local16, local10
045e4     38 73 52 FC | 	wrword	local16, local15
045e8     2D 01 58 FC | 	wrword	#0, local04
045ec     2A 4B 02 F6 | 	mov	arg01, local01
045f0     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
045f4     12 5F 02 F6 | 	mov	local06, result1
045f8     2B 5F 5A F2 | 	cmps	local06, local02 wcz
045fc     24 00 90 3D |  if_ae	jmp	#LR__0213
04600     2F 77 02 F6 | 	mov	local18, local06
04604     04 76 06 F1 | 	add	local18, #4
04608     2E 4D 0A F6 | 	mov	arg02, local05 wz
0460c     00 24 06 A6 |  if_e	mov	result1, #0
04610     2C 4D 82 51 |  if_ne	sub	arg02, local03
04614     04 4C 46 50 |  if_ne	shr	arg02, #4
04618     26 25 02 56 |  if_ne	mov	result1, arg02
0461c     12 6F 02 F6 | 	mov	local14, result1
04620     3B 6F 52 FC | 	wrword	local14, local18
04624                 | LR__0213
04624     35 6D E2 FA | 	rdword	local13, local12
04628     34 6D 52 FC | 	wrword	local13, local11
0462c     35 01 58 FC | 	wrword	#0, local12
04630     2E 55 02 F6 | 	mov	local01, local05
04634                 | LR__0214
04634                 | LR__0215
04634     2A 4B 02 F6 | 	mov	arg01, local01
04638     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
0463c     12 79 0A F6 | 	mov	local19, result1 wz
04640     C4 00 90 AD |  if_e	jmp	#LR__0217
04644     2B 79 5A F2 | 	cmps	local19, local02 wcz
04648     BC 00 90 3D |  if_ae	jmp	#LR__0217
0464c     3C 4B 02 F6 | 	mov	arg01, local19
04650     00 62 06 F6 | 	mov	local08, #0
04654     02 4A 06 F1 | 	add	arg01, #2
04658     25 65 E2 FA | 	rdword	local09, arg01
0465c     36 00 00 FF 
04660     8F 64 0E F2 | 	cmp	local09, ##27791 wz
04664     01 62 66 A6 |  if_e	neg	local08, #1
04668     31 25 0A F6 | 	mov	result1, local08 wz
0466c     98 00 90 AD |  if_e	jmp	#LR__0217
04670     2A 5D 02 F6 | 	mov	local05, local01
04674     3C 55 02 F6 | 	mov	local01, local19
04678     2E 7B 02 F6 | 	mov	local20, local05
0467c     3D 7D E2 FA | 	rdword	local21, local20
04680     2A 7F 02 F6 | 	mov	local22, local01
04684     3F 67 E2 FA | 	rdword	local10, local22
04688     33 7D 02 F1 | 	add	local21, local10
0468c     3D 7D 52 FC | 	wrword	local21, local20
04690     2A 81 02 F6 | 	mov	local23, local01
04694     06 80 06 F1 | 	add	local23, #6
04698     2E 83 02 F6 | 	mov	local24, local05
0469c     40 6D E2 FA | 	rdword	local13, local23
046a0     06 82 06 F1 | 	add	local24, #6
046a4     41 6D 52 FC | 	wrword	local13, local24
046a8     2A 85 02 F6 | 	mov	local25, local01
046ac     02 84 06 F1 | 	add	local25, #2
046b0     42 55 59 FC | 	wrword	#170, local25
046b4     40 01 58 FC | 	wrword	#0, local23
046b8     2A 6D 02 F6 | 	mov	local13, local01
046bc     36 4B 02 F6 | 	mov	arg01, local13
046c0     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
046c4     12 67 02 F6 | 	mov	local10, result1
046c8     33 5F 0A F6 | 	mov	local06, local10 wz
046cc     38 00 90 AD |  if_e	jmp	#LR__0216
046d0     2B 5F 5A F2 | 	cmps	local06, local02 wcz
046d4     30 00 90 3D |  if_ae	jmp	#LR__0216
046d8     2F 87 02 F6 | 	mov	local26, local06
046dc     04 86 06 F1 | 	add	local26, #4
046e0     2C 6D 02 F6 | 	mov	local13, local03
046e4     2E 67 02 F6 | 	mov	local10, local05
046e8     36 4B 02 F6 | 	mov	arg01, local13
046ec     33 4D 0A F6 | 	mov	arg02, local10 wz
046f0     00 24 06 A6 |  if_e	mov	result1, #0
046f4     25 4D 82 51 |  if_ne	sub	arg02, arg01
046f8     04 4C 46 50 |  if_ne	shr	arg02, #4
046fc     26 25 02 56 |  if_ne	mov	result1, arg02
04700     12 6F 02 F6 | 	mov	local14, result1
04704     43 6F 52 FC | 	wrword	local14, local26
04708                 | LR__0216
04708                 | LR__0217
04708     2F 25 02 F6 | 	mov	result1, local06
0470c     AF F0 03 F6 | 	mov	ptra, fp
04710     BF 00 A0 FD | 	call	#popregs_
04714                 | __system___gc_dofree_ret
04714     2D 00 64 FD | 	ret
04718                 | 
04718                 | __system___gc_docollect
04718     0C 5A 05 F6 | 	mov	COUNT_, #12
0471c     B0 00 A0 FD | 	call	#pushregs_
04720     5C F9 BF FD | 	call	#__system___gc_ptrs
04724     13 55 02 F6 | 	mov	local01, result2
04728     12 57 02 F6 | 	mov	local02, result1
0472c     2B 4B 02 F6 | 	mov	arg01, local02
04730     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04734     12 59 0A F6 | 	mov	local03, result1 wz
04738     01 24 62 FD | 	cogid	result1
0473c     12 5B 02 F6 | 	mov	local04, result1
04740     2C 00 90 AD |  if_e	jmp	#LR__0219
04744                 | LR__0218
04744     2A 59 5A F2 | 	cmps	local03, local01 wcz
04748     24 00 90 3D |  if_ae	jmp	#LR__0219
0474c     2C 5D 02 F6 | 	mov	local05, local03
04750     02 5C 06 F1 | 	add	local05, #2
04754     2E 5F E2 FA | 	rdword	local06, local05
04758     20 5E 26 F5 | 	andn	local06, #32
0475c     2E 5F 52 FC | 	wrword	local06, local05
04760     2C 4B 02 F6 | 	mov	arg01, local03
04764     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04768     12 59 0A F6 | 	mov	local03, result1 wz
0476c     D4 FF 9F 5D |  if_ne	jmp	#LR__0218
04770                 | LR__0219
04770     00 60 06 F6 | 	mov	local07, #0
04774     00 4A 06 F6 | 	mov	arg01, #0
04778     D0 F0 BF FD | 	call	#__system____topofstack
0477c     12 63 02 F6 | 	mov	local08, result1
04780     30 4B 02 F6 | 	mov	arg01, local07
04784     31 4D 02 F6 | 	mov	arg02, local08
04788     A0 00 B0 FD | 	call	#__system___gc_markhub
0478c     2C 01 B0 FD | 	call	#__system___gc_markcog
04790     2B 4B 02 F6 | 	mov	arg01, local02
04794     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04798     12 65 0A F6 | 	mov	local09, result1 wz
0479c     10 00 90 5D |  if_ne	jmp	#LR__0220
047a0     2C 00 00 FF 
047a4     25 4B 06 F6 | 	mov	arg01, ##@LR__0302
047a8     94 FB BF FD | 	call	#__system___gc_errmsg
047ac     70 00 90 FD | 	jmp	#LR__0226
047b0                 | LR__0220
047b0                 | LR__0221
047b0     32 59 02 F6 | 	mov	local03, local09
047b4     2C 4B 02 F6 | 	mov	arg01, local03
047b8     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
047bc     12 65 02 F6 | 	mov	local09, result1
047c0     2C 67 02 F6 | 	mov	local10, local03
047c4     02 66 06 F1 | 	add	local10, #2
047c8     33 69 E2 FA | 	rdword	local11, local10
047cc     20 68 CE F7 | 	test	local11, #32 wz
047d0     3C 00 90 5D |  if_ne	jmp	#LR__0224
047d4     34 6B 02 F6 | 	mov	local12, local11
047d8     10 6A 0E F5 | 	and	local12, #16 wz
047dc     30 00 90 5D |  if_ne	jmp	#LR__0224
047e0     34 61 02 F6 | 	mov	local07, local11
047e4     0F 60 06 F5 | 	and	local07, #15
047e8     30 69 02 F6 | 	mov	local11, local07
047ec     2D 69 0A F2 | 	cmp	local11, local04 wz
047f0     08 00 90 AD |  if_e	jmp	#LR__0222
047f4     0E 68 0E F2 | 	cmp	local11, #14 wz
047f8     14 00 90 5D |  if_ne	jmp	#LR__0223
047fc                 | LR__0222
047fc     2C 61 02 F6 | 	mov	local07, local03
04800     30 4B 02 F6 | 	mov	arg01, local07
04804     E4 FC BF FD | 	call	#__system___gc_dofree
04808     12 6B 02 F6 | 	mov	local12, result1
0480c     35 65 02 F6 | 	mov	local09, local12
04810                 | LR__0223
04810                 | LR__0224
04810     00 64 0E F2 | 	cmp	local09, #0 wz
04814     08 00 90 AD |  if_e	jmp	#LR__0225
04818     2A 65 5A F2 | 	cmps	local09, local01 wcz
0481c     90 FF 9F CD |  if_b	jmp	#LR__0221
04820                 | LR__0225
04820                 | LR__0226
04820     AF F0 03 F6 | 	mov	ptra, fp
04824     BF 00 A0 FD | 	call	#popregs_
04828                 | __system___gc_docollect_ret
04828     2D 00 64 FD | 	ret
0482c                 | 
0482c                 | __system___gc_markhub
0482c     0A 5A 05 F6 | 	mov	COUNT_, #10
04830     B0 00 A0 FD | 	call	#pushregs_
04834     25 55 02 F6 | 	mov	local01, arg01
04838     26 57 02 F6 | 	mov	local02, arg02
0483c     40 F8 BF FD | 	call	#__system___gc_ptrs
04840     12 59 02 F6 | 	mov	local03, result1
04844     13 5B 02 F6 | 	mov	local04, result2
04848                 | LR__0227
04848     2B 55 5A F2 | 	cmps	local01, local02 wcz
0484c     60 00 90 3D |  if_ae	jmp	#LR__0228
04850     2A 4F 02 FB | 	rdlong	arg03, local01
04854     04 54 06 F1 | 	add	local01, #4
04858     2C 4B 02 F6 | 	mov	arg01, local03
0485c     2D 4D 02 F6 | 	mov	arg02, local04
04860     04 FC BF FD | 	call	#__system___gc_isvalidptr
04864     12 5D 0A F6 | 	mov	local05, result1 wz
04868     DC FF 9F AD |  if_e	jmp	#LR__0227
0486c     2E 4B 02 F6 | 	mov	arg01, local05
04870     00 5E 06 F6 | 	mov	local06, #0
04874     02 4A 06 F1 | 	add	arg01, #2
04878     25 61 E2 FA | 	rdword	local07, arg01
0487c     36 00 00 FF 
04880     8F 60 0E F2 | 	cmp	local07, ##27791 wz
04884     01 5E 66 A6 |  if_e	neg	local06, #1
04888     2F 25 02 F6 | 	mov	result1, local06
0488c     12 63 0A F6 | 	mov	local08, result1 wz
04890     B4 FF 9F 5D |  if_ne	jmp	#LR__0227
04894     2E 65 02 F6 | 	mov	local09, local05
04898     02 64 06 F1 | 	add	local09, #2
0489c     32 67 E2 FA | 	rdword	local10, local09
048a0     0F 66 26 F5 | 	andn	local10, #15
048a4     2E 66 46 F5 | 	or	local10, #46
048a8     32 67 52 FC | 	wrword	local10, local09
048ac     98 FF 9F FD | 	jmp	#LR__0227
048b0                 | LR__0228
048b0     AF F0 03 F6 | 	mov	ptra, fp
048b4     BF 00 A0 FD | 	call	#popregs_
048b8                 | __system___gc_markhub_ret
048b8     2D 00 64 FD | 	ret
048bc                 | 
048bc                 | __system___gc_markcog
048bc     06 5A 05 F6 | 	mov	COUNT_, #6
048c0     B0 00 A0 FD | 	call	#pushregs_
048c4     B8 F7 BF FD | 	call	#__system___gc_ptrs
048c8     12 55 02 F6 | 	mov	local01, result1
048cc     13 57 02 F6 | 	mov	local02, result2
048d0     00 58 06 F6 | 	mov	local03, #0
048d4                 | LR__0229
048d4     F0 5B 06 F6 | 	mov	local04, #496
048d8     2C 5B 82 F1 | 	sub	local04, local03
048dc     F0 5B 06 F1 | 	add	local04, #496
048e0                 | 	'.live	local04
048e0     00 5A 96 F9 | 	alts	local04, #0
048e4     2D 5D 02 F6 | 	mov	local05, local04
048e8     2B 4D 02 F6 | 	mov	arg02, local02
048ec     2A 4B 02 F6 | 	mov	arg01, local01
048f0     2E 4F 02 F6 | 	mov	arg03, local05
048f4     70 FB BF FD | 	call	#__system___gc_isvalidptr
048f8     12 5D 0A F6 | 	mov	local05, result1 wz
048fc     10 00 90 AD |  if_e	jmp	#LR__0230
04900     02 5C 06 F1 | 	add	local05, #2
04904     2E 5F E2 FA | 	rdword	local06, local05
04908     20 5E 46 F5 | 	or	local06, #32
0490c     2E 5F 52 FC | 	wrword	local06, local05
04910                 | LR__0230
04910     01 58 06 F1 | 	add	local03, #1
04914     F0 59 5E F2 | 	cmps	local03, #496 wcz
04918     B8 FF 9F CD |  if_b	jmp	#LR__0229
0491c     AF F0 03 F6 | 	mov	ptra, fp
04920     BF 00 A0 FD | 	call	#popregs_
04924                 | __system___gc_markcog_ret
04924     2D 00 64 FD | 	ret
04928                 | 
04928                 | __system__write
04928     03 5A 05 F6 | 	mov	COUNT_, #3
0492c     B0 00 A0 FD | 	call	#pushregs_
04930     25 55 02 F6 | 	mov	local01, arg01
04934     26 57 02 F6 | 	mov	local02, arg02
04938     27 59 02 F6 | 	mov	local03, arg03
0493c     0A 54 1E F2 | 	cmp	local01, #10 wcz
04940     1C 00 90 CD |  if_b	jmp	#LR__0231
04944     01 00 00 FF 
04948     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0494c     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04950     01 00 00 FF 
04954     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04958     01 24 66 F6 | 	neg	result1, #1
0495c     28 00 90 FD | 	jmp	#LR__0232
04960                 | LR__0231
04960     2A 4B 02 F6 | 	mov	arg01, local01
04964     01 4A 66 F0 | 	shl	arg01, #1
04968     2A 4B 02 F1 | 	add	arg01, local01
0496c     04 4A 66 F0 | 	shl	arg01, #4
04970     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04974     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
04978     2B 4D 02 F6 | 	mov	arg02, local02
0497c     2C 4F 02 F6 | 	mov	arg03, local03
04980     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04984     4C 09 B0 FD | 	call	#__system___vfswrite
04988                 | LR__0232
04988     AF F0 03 F6 | 	mov	ptra, fp
0498c     BF 00 A0 FD | 	call	#popregs_
04990                 | __system__write_ret
04990     2D 00 64 FD | 	ret
04994                 | 
04994                 | __system__read
04994     03 5A 05 F6 | 	mov	COUNT_, #3
04998     B0 00 A0 FD | 	call	#pushregs_
0499c     25 55 02 F6 | 	mov	local01, arg01
049a0     26 57 02 F6 | 	mov	local02, arg02
049a4     27 59 02 F6 | 	mov	local03, arg03
049a8     0A 54 1E F2 | 	cmp	local01, #10 wcz
049ac     1C 00 90 CD |  if_b	jmp	#LR__0233
049b0     01 00 00 FF 
049b4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
049b8     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
049bc     01 00 00 FF 
049c0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
049c4     01 24 66 F6 | 	neg	result1, #1
049c8     28 00 90 FD | 	jmp	#LR__0234
049cc                 | LR__0233
049cc     2A 4B 02 F6 | 	mov	arg01, local01
049d0     01 4A 66 F0 | 	shl	arg01, #1
049d4     2A 4B 02 F1 | 	add	arg01, local01
049d8     04 4A 66 F0 | 	shl	arg01, #4
049dc     1C 14 06 F1 | 	add	ptr___system__dat__, #28
049e0     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
049e4     2B 4D 02 F6 | 	mov	arg02, local02
049e8     2C 4F 02 F6 | 	mov	arg03, local03
049ec     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
049f0     A4 0A B0 FD | 	call	#__system___vfsread
049f4                 | LR__0234
049f4     AF F0 03 F6 | 	mov	ptra, fp
049f8     BF 00 A0 FD | 	call	#popregs_
049fc                 | __system__read_ret
049fc     2D 00 64 FD | 	ret
04a00                 | 
04a00                 | __system__close
04a00     01 5A 05 F6 | 	mov	COUNT_, #1
04a04     B0 00 A0 FD | 	call	#pushregs_
04a08     25 55 02 F6 | 	mov	local01, arg01
04a0c     0A 54 1E F2 | 	cmp	local01, #10 wcz
04a10     1C 00 90 CD |  if_b	jmp	#LR__0235
04a14     01 00 00 FF 
04a18     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04a1c     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04a20     01 00 00 FF 
04a24     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04a28     01 24 66 F6 | 	neg	result1, #1
04a2c     20 00 90 FD | 	jmp	#LR__0236
04a30                 | LR__0235
04a30     2A 4B 02 F6 | 	mov	arg01, local01
04a34     01 4A 66 F0 | 	shl	arg01, #1
04a38     2A 4B 02 F1 | 	add	arg01, local01
04a3c     04 4A 66 F0 | 	shl	arg01, #4
04a40     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04a44     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
04a48     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04a4c     80 03 B0 FD | 	call	#__system___closeraw
04a50                 | LR__0236
04a50     AF F0 03 F6 | 	mov	ptra, fp
04a54     BF 00 A0 FD | 	call	#popregs_
04a58                 | __system__close_ret
04a58     2D 00 64 FD | 	ret
04a5c                 | 
04a5c                 | __system__lseek
04a5c     09 5A 05 F6 | 	mov	COUNT_, #9
04a60     B0 00 A0 FD | 	call	#pushregs_
04a64     25 55 02 F6 | 	mov	local01, arg01
04a68     26 57 02 F6 | 	mov	local02, arg02
04a6c     27 59 02 F6 | 	mov	local03, arg03
04a70     0A 54 1E F2 | 	cmp	local01, #10 wcz
04a74     1C 00 90 CD |  if_b	jmp	#LR__0237
04a78     01 00 00 FF 
04a7c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04a80     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04a84     01 00 00 FF 
04a88     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04a8c     01 24 66 F6 | 	neg	result1, #1
04a90     D8 00 90 FD | 	jmp	#LR__0241
04a94                 | LR__0237
04a94     2A 5B 02 F6 | 	mov	local04, local01
04a98     01 5A 66 F0 | 	shl	local04, #1
04a9c     2A 5B 02 F1 | 	add	local04, local01
04aa0     04 5A 66 F0 | 	shl	local04, #4
04aa4     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04aa8     0A 5B 02 F1 | 	add	local04, ptr___system__dat__
04aac     2C 5A 06 F1 | 	add	local04, #44
04ab0     2D 5D 0A FB | 	rdlong	local05, local04 wz
04ab4     2C 5A 86 F1 | 	sub	local04, #44
04ab8     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04abc     1C 00 90 5D |  if_ne	jmp	#LR__0238
04ac0     01 00 00 FF 
04ac4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04ac8     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
04acc     01 00 00 FF 
04ad0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04ad4     01 24 66 F6 | 	neg	result1, #1
04ad8     90 00 90 FD | 	jmp	#LR__0241
04adc                 | LR__0238
04adc     08 5A 06 F1 | 	add	local04, #8
04ae0     2D 5D 02 FB | 	rdlong	local05, local04
04ae4     08 5A 86 F1 | 	sub	local04, #8
04ae8     40 5C CE F7 | 	test	local05, #64 wz
04aec     14 00 90 AD |  if_e	jmp	#LR__0239
04af0     08 5A 06 F1 | 	add	local04, #8
04af4     2D 5D 02 FB | 	rdlong	local05, local04
04af8     80 5C 46 F5 | 	or	local05, #128
04afc     2D 5D 62 FC | 	wrlong	local05, local04
04b00     08 5A 86 F1 | 	sub	local04, #8
04b04                 | LR__0239
04b04     2C 5A 06 F1 | 	add	local04, #44
04b08     2D 5D 02 FB | 	rdlong	local05, local04
04b0c     2C 5A 86 F1 | 	sub	local04, #44
04b10     2E 5F 02 FB | 	rdlong	local06, local05
04b14     04 5C 06 F1 | 	add	local05, #4
04b18     2E 61 02 FB | 	rdlong	local07, local05
04b1c     2D 4B 02 F6 | 	mov	arg01, local04
04b20     2B 4D 02 F6 | 	mov	arg02, local02
04b24     2C 4F 02 F6 | 	mov	arg03, local03
04b28     07 63 02 F6 | 	mov	local08, objptr
04b2c     2F 0F 02 F6 | 	mov	objptr, local06
04b30     2D 60 62 FD | 	call	local07
04b34     31 0F 02 F6 | 	mov	objptr, local08
04b38     12 65 02 F6 | 	mov	local09, result1
04b3c     00 64 5E F2 | 	cmps	local09, #0 wcz
04b40     24 00 90 3D |  if_ae	jmp	#LR__0240
04b44     32 4B 6A F6 | 	neg	arg01, local09 wz
04b48     01 00 00 FF 
04b4c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04b50     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
04b54     01 00 00 FF 
04b58     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04b5c     01 24 66 56 |  if_ne	neg	result1, #1
04b60     00 24 06 A6 |  if_e	mov	result1, #0
04b64     04 00 90 FD | 	jmp	#LR__0241
04b68                 | LR__0240
04b68     32 25 02 F6 | 	mov	result1, local09
04b6c                 | LR__0241
04b6c     AF F0 03 F6 | 	mov	ptra, fp
04b70     BF 00 A0 FD | 	call	#popregs_
04b74                 | __system__lseek_ret
04b74     2D 00 64 FD | 	ret
04b78                 | 
04b78                 | __system____getftab
04b78     0A 4A 1E F2 | 	cmp	arg01, #10 wcz
04b7c     00 24 06 36 |  if_ae	mov	result1, #0
04b80     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
04b84     25 25 02 F6 | 	mov	result1, arg01
04b88     01 24 66 F0 | 	shl	result1, #1
04b8c     25 25 02 F1 | 	add	result1, arg01
04b90     04 24 66 F0 | 	shl	result1, #4
04b94     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04b98     0A 25 02 F1 | 	add	result1, ptr___system__dat__
04b9c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04ba0                 | __system____getftab_ret
04ba0     2D 00 64 FD | 	ret
04ba4                 | 
04ba4                 | __system___strrev
04ba4     25 2B CA FA | 	rdbyte	_var01, arg01 wz
04ba8     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
04bac     25 2D 02 F6 | 	mov	_var02, arg01
04bb0     58 B4 9F FE | 	loc	pa,	#(@LR__0243-@LR__0242)
04bb4     93 00 A0 FD | 	call	#FCACHE_LOAD_
04bb8                 | LR__0242
04bb8     16 2B CA FA | 	rdbyte	_var01, _var02 wz
04bbc     01 2C 06 51 |  if_ne	add	_var02, #1
04bc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0242
04bc4                 | LR__0243
04bc4     01 2C 86 F1 | 	sub	_var02, #1
04bc8                 | LR__0244
04bc8     25 2D 5A F2 | 	cmps	_var02, arg01 wcz
04bcc     1C 00 90 ED |  if_be	jmp	#LR__0245
04bd0     25 2F C2 FA | 	rdbyte	_var03, arg01
04bd4     16 31 C2 FA | 	rdbyte	_var04, _var02
04bd8     25 31 42 FC | 	wrbyte	_var04, arg01
04bdc     16 2F 42 FC | 	wrbyte	_var03, _var02
04be0     01 4A 06 F1 | 	add	arg01, #1
04be4     01 2C 86 F1 | 	sub	_var02, #1
04be8     DC FF 9F FD | 	jmp	#LR__0244
04bec                 | LR__0245
04bec                 | __system___strrev_ret
04bec     2D 00 64 FD | 	ret
04bf0                 | 
04bf0                 | __system___fmtpad
04bf0     0C 5A 05 F6 | 	mov	COUNT_, #12
04bf4     B0 00 A0 FD | 	call	#pushregs_
04bf8     25 55 02 F6 | 	mov	local01, arg01
04bfc     26 57 02 F6 | 	mov	local02, arg02
04c00     28 59 02 F6 | 	mov	local03, arg04
04c04     2B 5B EA F8 | 	getbyte	local04, local02, #1
04c08     16 56 46 F0 | 	shr	local02, #22
04c0c     03 56 0E F5 | 	and	local02, #3 wz
04c10     00 5C 06 F6 | 	mov	local05, #0
04c14     01 56 06 A6 |  if_e	mov	local02, #1
04c18     2C 57 CA F7 | 	test	local02, local03 wz
04c1c     00 24 06 A6 |  if_e	mov	result1, #0
04c20     80 00 90 AD |  if_e	jmp	#LR__0249
04c24     27 5B 82 F1 | 	sub	local04, arg03
04c28     2D 5F 02 F6 | 	mov	local06, local04
04c2c     00 5E 5E F2 | 	cmps	local06, #0 wcz
04c30     00 24 06 E6 |  if_be	mov	result1, #0
04c34     6C 00 90 ED |  if_be	jmp	#LR__0249
04c38     03 56 0E F2 | 	cmp	local02, #3 wz
04c3c     18 00 90 5D |  if_ne	jmp	#LR__0246
04c40     01 58 0E F2 | 	cmp	local03, #1 wz
04c44     6E 60 62 FD | 	wrz	local07
04c48     30 5F 02 F1 | 	add	local06, local07
04c4c     2F 5F 52 F6 | 	abs	local06, local06 wc
04c50     01 5E 46 F0 | 	shr	local06, #1
04c54     2F 5F 62 C6 |  if_b	neg	local06, local06
04c58                 | LR__0246
04c58     00 5E 5E F2 | 	cmps	local06, #0 wcz
04c5c     40 00 90 ED |  if_be	jmp	#LR__0248
04c60     2F 63 02 F6 | 	mov	local08, local06
04c64                 | LR__0247
04c64     2A 65 02 F6 | 	mov	local09, local01
04c68     32 61 02 FB | 	rdlong	local07, local09
04c6c     04 64 06 F1 | 	add	local09, #4
04c70     32 67 02 FB | 	rdlong	local10, local09
04c74     20 4A 06 F6 | 	mov	arg01, #32
04c78     07 69 02 F6 | 	mov	local11, objptr
04c7c     30 0F 02 F6 | 	mov	objptr, local07
04c80     2D 66 62 FD | 	call	local10
04c84     34 0F 02 F6 | 	mov	objptr, local11
04c88     12 6B 02 F6 | 	mov	local12, result1
04c8c     00 6A 5E F2 | 	cmps	local12, #0 wcz
04c90     35 25 02 C6 |  if_b	mov	result1, local12
04c94     0C 00 90 CD |  if_b	jmp	#LR__0249
04c98     35 5D 02 F1 | 	add	local05, local12
04c9c     F1 63 6E FB | 	djnz	local08, #LR__0247
04ca0                 | LR__0248
04ca0     2E 25 02 F6 | 	mov	result1, local05
04ca4                 | LR__0249
04ca4     AF F0 03 F6 | 	mov	ptra, fp
04ca8     BF 00 A0 FD | 	call	#popregs_
04cac                 | __system___fmtpad_ret
04cac     2D 00 64 FD | 	ret
04cb0                 | 
04cb0                 | __system___uitoa
04cb0     09 5A 05 F6 | 	mov	COUNT_, #9
04cb4     B0 00 A0 FD | 	call	#pushregs_
04cb8     25 55 02 F6 | 	mov	local01, arg01
04cbc     26 57 02 F6 | 	mov	local02, arg02
04cc0     27 59 02 F6 | 	mov	local03, arg03
04cc4     28 5B 02 F6 | 	mov	local04, arg04
04cc8     29 5D 0A F6 | 	mov	local05, arg05 wz
04ccc     2A 5F 02 F6 | 	mov	local06, local01
04cd0     00 60 06 F6 | 	mov	local07, #0
04cd4     37 62 06 56 |  if_ne	mov	local08, #55
04cd8     57 62 06 A6 |  if_e	mov	local08, #87
04cdc                 | LR__0250
04cdc     2B 09 03 F6 | 	mov	muldiva_, local02
04ce0     2C 0B 03 F6 | 	mov	muldivb_, local03
04ce4     CC 00 A0 FD | 	call	#unsdivide_
04ce8     84 65 02 F6 | 	mov	local09, muldiva_
04cec     0A 64 1E F2 | 	cmp	local09, #10 wcz
04cf0     30 64 06 C1 |  if_b	add	local09, #48
04cf4     31 65 02 31 |  if_ae	add	local09, local08
04cf8     2F 65 42 FC | 	wrbyte	local09, local06
04cfc     2B 09 03 F6 | 	mov	muldiva_, local02
04d00     2C 0B 03 F6 | 	mov	muldivb_, local03
04d04     01 5E 06 F1 | 	add	local06, #1
04d08     CC 00 A0 FD | 	call	#unsdivide_
04d0c     85 57 0A F6 | 	mov	local02, muldivb_ wz
04d10     01 60 06 F1 | 	add	local07, #1
04d14     C4 FF 9F 5D |  if_ne	jmp	#LR__0250
04d18     2D 61 1A F2 | 	cmp	local07, local04 wcz
04d1c     BC FF 9F CD |  if_b	jmp	#LR__0250
04d20     2F 01 48 FC | 	wrbyte	#0, local06
04d24     2A 4B 02 F6 | 	mov	arg01, local01
04d28     78 FE BF FD | 	call	#__system___strrev
04d2c     30 25 02 F6 | 	mov	result1, local07
04d30     AF F0 03 F6 | 	mov	ptra, fp
04d34     BF 00 A0 FD | 	call	#popregs_
04d38                 | __system___uitoa_ret
04d38     2D 00 64 FD | 	ret
04d3c                 | 
04d3c                 | __system___gettxfunc
04d3c     03 5A 05 F6 | 	mov	COUNT_, #3
04d40     B0 00 A0 FD | 	call	#pushregs_
04d44     30 FE BF FD | 	call	#__system____getftab
04d48     12 55 0A F6 | 	mov	local01, result1 wz
04d4c     14 00 90 AD |  if_e	jmp	#LR__0251
04d50     08 54 06 F1 | 	add	local01, #8
04d54     2A 57 02 FB | 	rdlong	local02, local01
04d58     08 54 86 F1 | 	sub	local01, #8
04d5c     2B 59 0A F6 | 	mov	local03, local02 wz
04d60     08 00 90 5D |  if_ne	jmp	#LR__0252
04d64                 | LR__0251
04d64     00 24 06 F6 | 	mov	result1, #0
04d68     0C 00 90 FD | 	jmp	#LR__0253
04d6c                 | LR__0252
04d6c     2A 4B 02 F6 | 	mov	arg01, local01
04d70     09 4D 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
04d74     FC EA BF FD | 	call	#__system___make_methodptr
04d78                 | LR__0253
04d78     AF F0 03 F6 | 	mov	ptra, fp
04d7c     BF 00 A0 FD | 	call	#popregs_
04d80                 | __system___gettxfunc_ret
04d80     2D 00 64 FD | 	ret
04d84                 | 
04d84                 | __system___getiolock_0102
04d84     03 5A 05 F6 | 	mov	COUNT_, #3
04d88     B0 00 A0 FD | 	call	#pushregs_
04d8c     E8 FD BF FD | 	call	#__system____getftab
04d90     12 55 0A F6 | 	mov	local01, result1 wz
04d94     14 00 90 AD |  if_e	jmp	#LR__0254
04d98     08 54 06 F1 | 	add	local01, #8
04d9c     2A 57 02 FB | 	rdlong	local02, local01
04da0     08 54 86 F1 | 	sub	local01, #8
04da4     2B 59 0A F6 | 	mov	local03, local02 wz
04da8     10 00 90 5D |  if_ne	jmp	#LR__0255
04dac                 | LR__0254
04dac     18 14 06 F1 | 	add	ptr___system__dat__, #24
04db0     0A 25 02 F6 | 	mov	result1, ptr___system__dat__
04db4     18 14 86 F1 | 	sub	ptr___system__dat__, #24
04db8     08 00 90 FD | 	jmp	#LR__0256
04dbc                 | LR__0255
04dbc     0C 54 06 F1 | 	add	local01, #12
04dc0     2A 25 02 F6 | 	mov	result1, local01
04dc4                 | LR__0256
04dc4     AF F0 03 F6 | 	mov	ptra, fp
04dc8     BF 00 A0 FD | 	call	#popregs_
04dcc                 | __system___getiolock_0102_ret
04dcc     2D 00 64 FD | 	ret
04dd0                 | 
04dd0                 | __system___closeraw
04dd0     06 5A 05 F6 | 	mov	COUNT_, #6
04dd4     B0 00 A0 FD | 	call	#pushregs_
04dd8     25 55 02 F6 | 	mov	local01, arg01
04ddc     00 56 06 F6 | 	mov	local02, #0
04de0     08 54 06 F1 | 	add	local01, #8
04de4     2A 59 0A FB | 	rdlong	local03, local01 wz
04de8     08 54 86 F1 | 	sub	local01, #8
04dec     1C 00 90 5D |  if_ne	jmp	#LR__0257
04df0     01 00 00 FF 
04df4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04df8     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04dfc     01 00 00 FF 
04e00     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04e04     01 24 66 F6 | 	neg	result1, #1
04e08     90 00 90 FD | 	jmp	#LR__0260
04e0c                 | LR__0257
04e0c     28 54 06 F1 | 	add	local01, #40
04e10     2A 59 0A FB | 	rdlong	local03, local01 wz
04e14     28 54 86 F1 | 	sub	local01, #40
04e18     2C 00 90 AD |  if_e	jmp	#LR__0258
04e1c     28 54 06 F1 | 	add	local01, #40
04e20     2A 59 02 FB | 	rdlong	local03, local01
04e24     28 54 86 F1 | 	sub	local01, #40
04e28     2C 5B 02 FB | 	rdlong	local04, local03
04e2c     04 58 06 F1 | 	add	local03, #4
04e30     2C 5D 02 FB | 	rdlong	local05, local03
04e34     2A 4B 02 F6 | 	mov	arg01, local01
04e38     07 5F 02 F6 | 	mov	local06, objptr
04e3c     2D 0F 02 F6 | 	mov	objptr, local04
04e40     2D 5C 62 FD | 	call	local05
04e44     2F 0F 02 F6 | 	mov	objptr, local06
04e48                 | LR__0258
04e48     20 54 06 F1 | 	add	local01, #32
04e4c     2A 59 0A FB | 	rdlong	local03, local01 wz
04e50     20 54 86 F1 | 	sub	local01, #32
04e54     30 00 90 AD |  if_e	jmp	#LR__0259
04e58     20 54 06 F1 | 	add	local01, #32
04e5c     2A 59 02 FB | 	rdlong	local03, local01
04e60     20 54 86 F1 | 	sub	local01, #32
04e64     2C 5B 02 FB | 	rdlong	local04, local03
04e68     04 58 06 F1 | 	add	local03, #4
04e6c     2C 5D 02 FB | 	rdlong	local05, local03
04e70     2A 4B 02 F6 | 	mov	arg01, local01
04e74     07 5F 02 F6 | 	mov	local06, objptr
04e78     2D 0F 02 F6 | 	mov	objptr, local04
04e7c     2D 5C 62 FD | 	call	local05
04e80     2F 0F 02 F6 | 	mov	objptr, local06
04e84     12 57 02 F6 | 	mov	local02, result1
04e88                 | LR__0259
04e88     2A 4B 02 F6 | 	mov	arg01, local01
04e8c     00 4C 06 F6 | 	mov	arg02, #0
04e90     30 4E 06 F6 | 	mov	arg03, #48
04e94     A0 00 A0 FD | 	call	#\builtin_bytefill_
04e98     2B 25 02 F6 | 	mov	result1, local02
04e9c                 | LR__0260
04e9c     AF F0 03 F6 | 	mov	ptra, fp
04ea0     BF 00 A0 FD | 	call	#popregs_
04ea4                 | __system___closeraw_ret
04ea4     2D 00 64 FD | 	ret
04ea8                 | 
04ea8                 | __system____default_getc
04ea8     0C 5A 05 F6 | 	mov	COUNT_, #12
04eac     B0 00 A0 FD | 	call	#pushregs_
04eb0     25 55 02 F6 | 	mov	local01, arg01
04eb4     2A 57 02 FB | 	rdlong	local02, local01
04eb8     08 56 06 F1 | 	add	local02, #8
04ebc     2B 59 02 FB | 	rdlong	local03, local02
04ec0     08 56 86 F1 | 	sub	local02, #8
04ec4     02 58 CE F7 | 	test	local03, #2 wz
04ec8     08 00 90 AD |  if_e	jmp	#LR__0261
04ecc     2A 4B 02 F6 | 	mov	arg01, local01
04ed0     FC 01 B0 FD | 	call	#__system____default_flush
04ed4                 | LR__0261
04ed4     08 56 06 F1 | 	add	local02, #8
04ed8     2B 59 02 FB | 	rdlong	local03, local02
04edc     01 58 46 F5 | 	or	local03, #1
04ee0     2B 59 62 FC | 	wrlong	local03, local02
04ee4     08 56 86 F1 | 	sub	local02, #8
04ee8     2B 5B 0A FB | 	rdlong	local04, local02 wz
04eec     7C 00 90 5D |  if_ne	jmp	#LR__0263
04ef0     2A 4B 02 F6 | 	mov	arg01, local01
04ef4     25 5D 02 FB | 	rdlong	local05, arg01
04ef8     0C 5C 06 F1 | 	add	local05, #12
04efc     2E 4D 02 F6 | 	mov	arg02, local05
04f00     0C 5C 86 F1 | 	sub	local05, #12
04f04     10 4A 06 F1 | 	add	arg01, #16
04f08     25 5F 02 FB | 	rdlong	local06, arg01
04f0c     10 4A 86 F1 | 	sub	arg01, #16
04f10     2F 61 02 FB | 	rdlong	local07, local06
04f14     04 5E 06 F1 | 	add	local06, #4
04f18     2F 63 02 FB | 	rdlong	local08, local06
04f1c     0A 4E C6 F9 | 	decod	arg03, #10
04f20     07 65 02 F6 | 	mov	local09, objptr
04f24     30 0F 02 F6 | 	mov	objptr, local07
04f28     2D 62 62 FD | 	call	local08
04f2c     32 0F 02 F6 | 	mov	objptr, local09
04f30     12 67 02 F6 | 	mov	local10, result1
04f34     00 66 5E F2 | 	cmps	local10, #0 wcz
04f38     01 24 66 C6 |  if_b	neg	result1, #1
04f3c     28 00 90 CD |  if_b	jmp	#LR__0262
04f40     2E 67 62 FC | 	wrlong	local10, local05
04f44     0C 5C 06 F1 | 	add	local05, #12
04f48     2E 69 02 F6 | 	mov	local11, local05
04f4c     08 5C 86 F1 | 	sub	local05, #8
04f50     2E 69 62 FC | 	wrlong	local11, local05
04f54     04 5C 06 F1 | 	add	local05, #4
04f58     2E 5F 02 FB | 	rdlong	local06, local05
04f5c     01 5E 46 F5 | 	or	local06, #1
04f60     2E 5F 62 FC | 	wrlong	local06, local05
04f64     33 25 02 F6 | 	mov	result1, local10
04f68                 | LR__0262
04f68     12 5B 02 F6 | 	mov	local04, result1
04f6c                 | LR__0263
04f6c     00 5A 5E F2 | 	cmps	local04, #0 wcz
04f70     01 24 66 E6 |  if_be	neg	result1, #1
04f74     1C 00 90 ED |  if_be	jmp	#LR__0264
04f78     01 5A 86 F1 | 	sub	local04, #1
04f7c     2B 5B 62 FC | 	wrlong	local04, local02
04f80     04 56 06 F1 | 	add	local02, #4
04f84     2B 6B 02 FB | 	rdlong	local12, local02
04f88     35 25 C2 FA | 	rdbyte	result1, local12
04f8c     01 6A 06 F1 | 	add	local12, #1
04f90     2B 6B 62 FC | 	wrlong	local12, local02
04f94                 | LR__0264
04f94     AF F0 03 F6 | 	mov	ptra, fp
04f98     BF 00 A0 FD | 	call	#popregs_
04f9c                 | __system____default_getc_ret
04f9c     2D 00 64 FD | 	ret
04fa0                 | 
04fa0                 | __system____default_putc
04fa0     06 5A 05 F6 | 	mov	COUNT_, #6
04fa4     B0 00 A0 FD | 	call	#pushregs_
04fa8     25 55 02 F6 | 	mov	local01, arg01
04fac     26 57 02 F6 | 	mov	local02, arg02
04fb0     2B 59 02 FB | 	rdlong	local03, local02
04fb4     08 58 06 F1 | 	add	local03, #8
04fb8     2C 5B 02 FB | 	rdlong	local04, local03
04fbc     08 58 86 F1 | 	sub	local03, #8
04fc0     01 5A CE F7 | 	test	local04, #1 wz
04fc4     08 00 90 AD |  if_e	jmp	#LR__0265
04fc8     2B 4B 02 F6 | 	mov	arg01, local02
04fcc     00 01 B0 FD | 	call	#__system____default_flush
04fd0                 | LR__0265
04fd0     08 58 06 F1 | 	add	local03, #8
04fd4     2C 5B 02 FB | 	rdlong	local04, local03
04fd8     02 5A 46 F5 | 	or	local04, #2
04fdc     2C 5B 62 FC | 	wrlong	local04, local03
04fe0     08 58 86 F1 | 	sub	local03, #8
04fe4     2C 5D 02 FB | 	rdlong	local05, local03
04fe8     2E 5F 02 F6 | 	mov	local06, local05
04fec     0C 58 06 F1 | 	add	local03, #12
04ff0     2C 5F 02 F1 | 	add	local06, local03
04ff4     2F 55 42 FC | 	wrbyte	local01, local06
04ff8     FF 54 06 F5 | 	and	local01, #255
04ffc     01 5C 06 F1 | 	add	local05, #1
05000     0C 58 86 F1 | 	sub	local03, #12
05004     2C 5D 62 FC | 	wrlong	local05, local03
05008     02 00 00 FF 
0500c     00 5C 0E F2 | 	cmp	local05, ##1024 wz
05010     10 00 90 5D |  if_ne	jmp	#LR__0266
05014     2B 4B 02 F6 | 	mov	arg01, local02
05018     B4 00 B0 FD | 	call	#__system____default_flush
0501c     00 24 0E F2 | 	cmp	result1, #0 wz
05020     01 54 66 56 |  if_ne	neg	local01, #1
05024                 | LR__0266
05024     2A 25 02 F6 | 	mov	result1, local01
05028     AF F0 03 F6 | 	mov	ptra, fp
0502c     BF 00 A0 FD | 	call	#popregs_
05030                 | __system____default_putc_ret
05030     2D 00 64 FD | 	ret
05034                 | 
05034                 | __system____default_putc_terminal
05034     06 5A 05 F6 | 	mov	COUNT_, #6
05038     B0 00 A0 FD | 	call	#pushregs_
0503c     25 55 02 F6 | 	mov	local01, arg01
05040     26 57 02 F6 | 	mov	local02, arg02
05044     2B 59 02 FB | 	rdlong	local03, local02
05048     08 58 06 F1 | 	add	local03, #8
0504c     2C 5B 02 FB | 	rdlong	local04, local03
05050     08 58 86 F1 | 	sub	local03, #8
05054     01 5A CE F7 | 	test	local04, #1 wz
05058     08 00 90 AD |  if_e	jmp	#LR__0267
0505c     2B 4B 02 F6 | 	mov	arg01, local02
05060     6C 00 B0 FD | 	call	#__system____default_flush
05064                 | LR__0267
05064     08 58 06 F1 | 	add	local03, #8
05068     2C 5B 02 FB | 	rdlong	local04, local03
0506c     02 5A 46 F5 | 	or	local04, #2
05070     2C 5B 62 FC | 	wrlong	local04, local03
05074     08 58 86 F1 | 	sub	local03, #8
05078     2C 5D 02 FB | 	rdlong	local05, local03
0507c     2E 5F 02 F6 | 	mov	local06, local05
05080     0C 58 06 F1 | 	add	local03, #12
05084     2C 5F 02 F1 | 	add	local06, local03
05088     2F 55 42 FC | 	wrbyte	local01, local06
0508c     FF 54 06 F5 | 	and	local01, #255
05090     0C 58 86 F1 | 	sub	local03, #12
05094     01 5C 06 F1 | 	add	local05, #1
05098     2C 5D 62 FC | 	wrlong	local05, local03
0509c     0A 54 0E F2 | 	cmp	local01, #10 wz
050a0     0C 00 90 AD |  if_e	jmp	#LR__0268
050a4     02 00 00 FF 
050a8     00 5C 0E F2 | 	cmp	local05, ##1024 wz
050ac     10 00 90 5D |  if_ne	jmp	#LR__0269
050b0                 | LR__0268
050b0     2B 4B 02 F6 | 	mov	arg01, local02
050b4     18 00 B0 FD | 	call	#__system____default_flush
050b8     00 24 0E F2 | 	cmp	result1, #0 wz
050bc     01 54 66 56 |  if_ne	neg	local01, #1
050c0                 | LR__0269
050c0     2A 25 02 F6 | 	mov	result1, local01
050c4     AF F0 03 F6 | 	mov	ptra, fp
050c8     BF 00 A0 FD | 	call	#popregs_
050cc                 | __system____default_putc_terminal_ret
050cc     2D 00 64 FD | 	ret
050d0                 | 
050d0                 | __system____default_flush
050d0     0F 5A 05 F6 | 	mov	COUNT_, #15
050d4     B0 00 A0 FD | 	call	#pushregs_
050d8     25 55 02 F6 | 	mov	local01, arg01
050dc     2A 57 02 FB | 	rdlong	local02, local01
050e0     2B 59 02 FB | 	rdlong	local03, local02
050e4     08 56 06 F1 | 	add	local02, #8
050e8     2B 5B 02 FB | 	rdlong	local04, local02
050ec     08 56 86 F1 | 	sub	local02, #8
050f0     02 5A CE F7 | 	test	local04, #2 wz
050f4     B8 00 90 AD |  if_e	jmp	#LR__0272
050f8     00 58 5E F2 | 	cmps	local03, #0 wcz
050fc     30 01 90 ED |  if_be	jmp	#LR__0274
05100     08 54 06 F1 | 	add	local01, #8
05104     2A 5B 02 FB | 	rdlong	local04, local01
05108     08 54 86 F1 | 	sub	local01, #8
0510c     40 5A CE F7 | 	test	local04, #64 wz
05110     5C 00 90 AD |  if_e	jmp	#LR__0271
05114     08 54 06 F1 | 	add	local01, #8
05118     2A 5B 02 FB | 	rdlong	local04, local01
0511c     08 54 86 F1 | 	sub	local01, #8
05120     80 5A CE F7 | 	test	local04, #128 wz
05124     48 00 90 AD |  if_e	jmp	#LR__0270
05128     2C 54 06 F1 | 	add	local01, #44
0512c     2A 5B 02 FB | 	rdlong	local04, local01
05130     2C 54 86 F1 | 	sub	local01, #44
05134     2D 5D 02 FB | 	rdlong	local05, local04
05138     04 5A 06 F1 | 	add	local04, #4
0513c     2D 5F 02 FB | 	rdlong	local06, local04
05140     2A 4B 02 F6 | 	mov	arg01, local01
05144     00 4C 06 F6 | 	mov	arg02, #0
05148     02 4E 06 F6 | 	mov	arg03, #2
0514c     07 61 02 F6 | 	mov	local07, objptr
05150     2E 0F 02 F6 | 	mov	objptr, local05
05154     2D 5E 62 FD | 	call	local06
05158     30 0F 02 F6 | 	mov	objptr, local07
0515c     08 54 06 F1 | 	add	local01, #8
05160     2A 5B 02 FB | 	rdlong	local04, local01
05164     80 5A 26 F5 | 	andn	local04, #128
05168     2A 5B 62 FC | 	wrlong	local04, local01
0516c     08 54 86 F1 | 	sub	local01, #8
05170                 | LR__0270
05170                 | LR__0271
05170     0C 56 06 F1 | 	add	local02, #12
05174     2B 4D 02 F6 | 	mov	arg02, local02
05178     0C 56 86 F1 | 	sub	local02, #12
0517c     14 54 06 F1 | 	add	local01, #20
05180     2A 5B 02 FB | 	rdlong	local04, local01
05184     14 54 86 F1 | 	sub	local01, #20
05188     2D 5D 02 FB | 	rdlong	local05, local04
0518c     04 5A 06 F1 | 	add	local04, #4
05190     2D 5F 02 FB | 	rdlong	local06, local04
05194     2A 4B 02 F6 | 	mov	arg01, local01
05198     2C 4F 02 F6 | 	mov	arg03, local03
0519c     07 61 02 F6 | 	mov	local07, objptr
051a0     2E 0F 02 F6 | 	mov	objptr, local05
051a4     2D 5E 62 FD | 	call	local06
051a8     30 0F 02 F6 | 	mov	objptr, local07
051ac     80 00 90 FD | 	jmp	#LR__0274
051b0                 | LR__0272
051b0     08 56 06 F1 | 	add	local02, #8
051b4     2B 5B 02 FB | 	rdlong	local04, local02
051b8     08 56 86 F1 | 	sub	local02, #8
051bc     01 5A CE F7 | 	test	local04, #1 wz
051c0     6C 00 90 AD |  if_e	jmp	#LR__0273
051c4     00 58 0E F2 | 	cmp	local03, #0 wz
051c8     64 00 90 AD |  if_e	jmp	#LR__0273
051cc     2C 54 06 F1 | 	add	local01, #44
051d0     2A 63 02 FB | 	rdlong	local08, local01
051d4     2C 54 86 F1 | 	sub	local01, #44
051d8     31 5B 02 F6 | 	mov	local04, local08
051dc     2D 5D 02 FB | 	rdlong	local05, local04
051e0     04 5A 06 F1 | 	add	local04, #4
051e4     2D 65 02 FB | 	rdlong	local09, local04
051e8     04 5A 86 F1 | 	sub	local04, #4
051ec     32 5F 02 F6 | 	mov	local06, local09
051f0     2A 67 02 F6 | 	mov	local10, local01
051f4     2C 69 02 F6 | 	mov	local11, local03
051f8     34 69 62 F6 | 	neg	local11, local11
051fc     34 6B 02 F6 | 	mov	local12, local11
05200     01 60 06 F6 | 	mov	local07, #1
05204     33 4B 02 F6 | 	mov	arg01, local10
05208     35 4D 02 F6 | 	mov	arg02, local12
0520c     01 4E 06 F6 | 	mov	arg03, #1
05210     07 6D 02 F6 | 	mov	local13, objptr
05214     2E 0F 02 F6 | 	mov	objptr, local05
05218     2D 5E 62 FD | 	call	local06
0521c     36 0F 02 F6 | 	mov	objptr, local13
05220     12 6F 02 F6 | 	mov	local14, result1
05224     37 71 02 F6 | 	mov	local15, local14
05228     00 70 5E F2 | 	cmps	local15, #0 wcz
0522c     2C 71 02 36 |  if_ae	mov	local15, local03
05230                 | LR__0273
05230                 | LR__0274
05230     2B 01 68 FC | 	wrlong	#0, local02
05234     04 56 06 F1 | 	add	local02, #4
05238     2B 01 68 FC | 	wrlong	#0, local02
0523c     04 56 06 F1 | 	add	local02, #4
05240     2B 01 68 FC | 	wrlong	#0, local02
05244     00 24 06 F6 | 	mov	result1, #0
05248     AF F0 03 F6 | 	mov	ptra, fp
0524c     BF 00 A0 FD | 	call	#popregs_
05250                 | __system____default_flush_ret
05250     2D 00 64 FD | 	ret
05254                 | 
05254                 | __system___rxtxioctl_0131
05254     02 5A 05 F6 | 	mov	COUNT_, #2
05258     B0 00 A0 FD | 	call	#pushregs_
0525c     26 55 02 F6 | 	mov	local01, arg02
05260     27 57 02 F6 | 	mov	local02, arg03
05264     00 55 0E F2 | 	cmp	local01, #256 wz
05268     0C 00 90 AD |  if_e	jmp	#LR__0275
0526c     01 55 0E F2 | 	cmp	local01, #257 wz
05270     1C 00 90 AD |  if_e	jmp	#LR__0276
05274     30 00 90 FD | 	jmp	#LR__0277
05278                 | LR__0275
05278     08 14 06 F1 | 	add	ptr___system__dat__, #8
0527c     0A 25 02 FB | 	rdlong	result1, ptr___system__dat__
05280     08 14 86 F1 | 	sub	ptr___system__dat__, #8
05284     2B 25 62 FC | 	wrlong	result1, local02
05288     00 24 06 F6 | 	mov	result1, #0
0528c     30 00 90 FD | 	jmp	#LR__0278
05290                 | LR__0276
05290     2B 4B 02 FB | 	rdlong	arg01, local02
05294     08 14 06 F1 | 	add	ptr___system__dat__, #8
05298     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
0529c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
052a0     00 24 06 F6 | 	mov	result1, #0
052a4     18 00 90 FD | 	jmp	#LR__0278
052a8                 | LR__0277
052a8     01 00 00 FF 
052ac     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
052b0     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
052b4     01 00 00 FF 
052b8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
052bc     01 24 66 F6 | 	neg	result1, #1
052c0                 | LR__0278
052c0     AF F0 03 F6 | 	mov	ptra, fp
052c4     BF 00 A0 FD | 	call	#popregs_
052c8                 | __system___rxtxioctl_0131_ret
052c8     2D 00 64 FD | 	ret
052cc                 | 
052cc                 | __system____dummy_flush_0132
052cc     00 24 06 F6 | 	mov	result1, #0
052d0                 | __system____dummy_flush_0132_ret
052d0     2D 00 64 FD | 	ret
052d4                 | 
052d4                 | __system___vfswrite
052d4     0B 5A 05 F6 | 	mov	COUNT_, #11
052d8     B0 00 A0 FD | 	call	#pushregs_
052dc     25 55 02 F6 | 	mov	local01, arg01
052e0     26 57 02 F6 | 	mov	local02, arg02
052e4     27 59 02 F6 | 	mov	local03, arg03
052e8     2B 5B 02 F6 | 	mov	local04, local02
052ec     08 54 06 F1 | 	add	local01, #8
052f0     2A 5D 02 FB | 	rdlong	local05, local01
052f4     08 54 86 F1 | 	sub	local01, #8
052f8     02 5C CE F7 | 	test	local05, #2 wz
052fc     1C 00 90 5D |  if_ne	jmp	#LR__0279
05300     01 00 00 FF 
05304     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05308     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
0530c     01 00 00 FF 
05310     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05314     01 24 66 F6 | 	neg	result1, #1
05318     70 01 90 FD | 	jmp	#LR__0287
0531c                 | LR__0279
0531c     08 54 06 F1 | 	add	local01, #8
05320     2A 5D 02 FB | 	rdlong	local05, local01
05324     08 54 86 F1 | 	sub	local01, #8
05328     40 5C CE F7 | 	test	local05, #64 wz
0532c     5C 00 90 AD |  if_e	jmp	#LR__0281
05330     08 54 06 F1 | 	add	local01, #8
05334     2A 5D 02 FB | 	rdlong	local05, local01
05338     08 54 86 F1 | 	sub	local01, #8
0533c     80 5C CE F7 | 	test	local05, #128 wz
05340     48 00 90 AD |  if_e	jmp	#LR__0280
05344     2C 54 06 F1 | 	add	local01, #44
05348     2A 5D 02 FB | 	rdlong	local05, local01
0534c     2C 54 86 F1 | 	sub	local01, #44
05350     2E 5F 02 FB | 	rdlong	local06, local05
05354     04 5C 06 F1 | 	add	local05, #4
05358     2E 61 02 FB | 	rdlong	local07, local05
0535c     2A 4B 02 F6 | 	mov	arg01, local01
05360     00 4C 06 F6 | 	mov	arg02, #0
05364     02 4E 06 F6 | 	mov	arg03, #2
05368     07 63 02 F6 | 	mov	local08, objptr
0536c     2F 0F 02 F6 | 	mov	objptr, local06
05370     2D 60 62 FD | 	call	local07
05374     31 0F 02 F6 | 	mov	objptr, local08
05378     08 54 06 F1 | 	add	local01, #8
0537c     2A 5D 02 FB | 	rdlong	local05, local01
05380     80 5C 26 F5 | 	andn	local05, #128
05384     2A 5D 62 FC | 	wrlong	local05, local01
05388     08 54 86 F1 | 	sub	local01, #8
0538c                 | LR__0280
0538c                 | LR__0281
0538c     14 54 06 F1 | 	add	local01, #20
05390     2A 5D 0A FB | 	rdlong	local05, local01 wz
05394     14 54 86 F1 | 	sub	local01, #20
05398     7C 00 90 AD |  if_e	jmp	#LR__0283
0539c     14 54 06 F1 | 	add	local01, #20
053a0     2A 5D 02 FB | 	rdlong	local05, local01
053a4     14 54 86 F1 | 	sub	local01, #20
053a8     2E 5F 02 FB | 	rdlong	local06, local05
053ac     04 5C 06 F1 | 	add	local05, #4
053b0     2E 61 02 FB | 	rdlong	local07, local05
053b4     2B 4D 02 F6 | 	mov	arg02, local02
053b8     2C 4F 02 F6 | 	mov	arg03, local03
053bc     2A 4B 02 F6 | 	mov	arg01, local01
053c0     07 63 02 F6 | 	mov	local08, objptr
053c4     2F 0F 02 F6 | 	mov	objptr, local06
053c8     2D 60 62 FD | 	call	local07
053cc     31 0F 02 F6 | 	mov	objptr, local08
053d0     12 65 02 F6 | 	mov	local09, result1
053d4     00 64 5E F2 | 	cmps	local09, #0 wcz
053d8     34 00 90 3D |  if_ae	jmp	#LR__0282
053dc     08 54 06 F1 | 	add	local01, #8
053e0     2A 5D 02 FB | 	rdlong	local05, local01
053e4     20 5C 46 F5 | 	or	local05, #32
053e8     2A 5D 62 FC | 	wrlong	local05, local01
053ec     01 00 00 FF 
053f0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
053f4     0A 65 62 FC | 	wrlong	local09, ptr___system__dat__
053f8     01 00 00 FF 
053fc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05400     00 64 0E F2 | 	cmp	local09, #0 wz
05404     01 24 66 56 |  if_ne	neg	result1, #1
05408     00 24 06 A6 |  if_e	mov	result1, #0
0540c     7C 00 90 FD | 	jmp	#LR__0287
05410                 | LR__0282
05410     32 25 02 F6 | 	mov	result1, local09
05414     74 00 90 FD | 	jmp	#LR__0287
05418                 | LR__0283
05418     18 54 06 F1 | 	add	local01, #24
0541c     2A 67 0A FB | 	rdlong	local10, local01 wz
05420     18 54 86 F1 | 	sub	local01, #24
05424     1C 00 90 5D |  if_ne	jmp	#LR__0284
05428     01 00 00 FF 
0542c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05430     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
05434     01 00 00 FF 
05438     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0543c     01 24 66 F6 | 	neg	result1, #1
05440     48 00 90 FD | 	jmp	#LR__0287
05444                 | LR__0284
05444     00 64 06 F6 | 	mov	local09, #0
05448                 | LR__0285
05448     00 58 1E F2 | 	cmp	local03, #0 wcz
0544c     38 00 90 ED |  if_be	jmp	#LR__0286
05450     33 5D 02 F6 | 	mov	local05, local10
05454     2E 5F 02 FB | 	rdlong	local06, local05
05458     04 5C 06 F1 | 	add	local05, #4
0545c     2E 61 02 FB | 	rdlong	local07, local05
05460     2D 4B C2 FA | 	rdbyte	arg01, local04
05464     2A 4D 02 F6 | 	mov	arg02, local01
05468     07 69 02 F6 | 	mov	local11, objptr
0546c     2F 0F 02 F6 | 	mov	objptr, local06
05470     01 5A 06 F1 | 	add	local04, #1
05474     2D 60 62 FD | 	call	local07
05478     34 0F 02 F6 | 	mov	objptr, local11
0547c     12 65 02 F1 | 	add	local09, result1
05480     01 58 86 F1 | 	sub	local03, #1
05484     C0 FF 9F FD | 	jmp	#LR__0285
05488                 | LR__0286
05488     32 25 02 F6 | 	mov	result1, local09
0548c                 | LR__0287
0548c     AF F0 03 F6 | 	mov	ptra, fp
05490     BF 00 A0 FD | 	call	#popregs_
05494                 | __system___vfswrite_ret
05494     2D 00 64 FD | 	ret
05498                 | 
05498                 | __system___vfsread
05498     0F 5A 05 F6 | 	mov	COUNT_, #15
0549c     B0 00 A0 FD | 	call	#pushregs_
054a0     2C F0 07 F1 | 	add	ptra, #44
054a4     04 5E 05 F1 | 	add	fp, #4
054a8     AF 4A 62 FC | 	wrlong	arg01, fp
054ac     04 5E 05 F1 | 	add	fp, #4
054b0     AF 4C 62 FC | 	wrlong	arg02, fp
054b4     04 5E 05 F1 | 	add	fp, #4
054b8     AF 4E 62 FC | 	wrlong	arg03, fp
054bc     04 5E 85 F1 | 	sub	fp, #4
054c0     AF 54 02 FB | 	rdlong	local01, fp
054c4     14 5E 05 F1 | 	add	fp, #20
054c8     AF 54 62 FC | 	wrlong	local01, fp
054cc     04 5E 05 F1 | 	add	fp, #4
054d0     AF 00 68 FC | 	wrlong	#0, fp
054d4     1C 5E 85 F1 | 	sub	fp, #28
054d8     AF 56 02 FB | 	rdlong	local02, fp
054dc     04 5E 85 F1 | 	sub	fp, #4
054e0     08 56 06 F1 | 	add	local02, #8
054e4     2B 55 02 FB | 	rdlong	local01, local02
054e8     01 54 CE F7 | 	test	local01, #1 wz
054ec     1C 00 90 5D |  if_ne	jmp	#LR__0288
054f0     01 00 00 FF 
054f4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
054f8     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
054fc     01 00 00 FF 
05500     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05504     01 24 66 F6 | 	neg	result1, #1
05508     9C 02 90 FD | 	jmp	#LR__0296
0550c                 | LR__0288
0550c     04 5E 05 F1 | 	add	fp, #4
05510     AF 54 02 FB | 	rdlong	local01, fp
05514     04 5E 85 F1 | 	sub	fp, #4
05518     10 54 06 F1 | 	add	local01, #16
0551c     2A 59 0A FB | 	rdlong	local03, local01 wz
05520     B4 00 90 AD |  if_e	jmp	#LR__0290
05524     04 5E 05 F1 | 	add	fp, #4
05528     AF 5A 02 FB | 	rdlong	local04, fp
0552c     10 5A 06 F1 | 	add	local04, #16
05530     2D 55 02 FB | 	rdlong	local01, local04
05534     2A 57 02 FB | 	rdlong	local02, local01
05538     04 54 06 F1 | 	add	local01, #4
0553c     2A 59 02 FB | 	rdlong	local03, local01
05540     AF 4A 02 FB | 	rdlong	arg01, fp
05544     04 5E 05 F1 | 	add	fp, #4
05548     AF 4C 02 FB | 	rdlong	arg02, fp
0554c     04 5E 05 F1 | 	add	fp, #4
05550     AF 4E 02 FB | 	rdlong	arg03, fp
05554     0C 5E 85 F1 | 	sub	fp, #12
05558     07 5D 02 F6 | 	mov	local05, objptr
0555c     2B 0F 02 F6 | 	mov	objptr, local02
05560     2D 58 62 FD | 	call	local03
05564     2E 0F 02 F6 | 	mov	objptr, local05
05568     10 5E 05 F1 | 	add	fp, #16
0556c     AF 24 62 FC | 	wrlong	result1, fp
05570     10 5E 85 F1 | 	sub	fp, #16
05574     00 24 5E F2 | 	cmps	result1, #0 wcz
05578     4C 00 90 3D |  if_ae	jmp	#LR__0289
0557c     04 5E 05 F1 | 	add	fp, #4
05580     AF 54 02 FB | 	rdlong	local01, fp
05584     2A 5B 02 F6 | 	mov	local04, local01
05588     08 5A 06 F1 | 	add	local04, #8
0558c     2D 59 02 FB | 	rdlong	local03, local04
05590     20 58 46 F5 | 	or	local03, #32
05594     08 54 06 F1 | 	add	local01, #8
05598     2A 59 62 FC | 	wrlong	local03, local01
0559c     0C 5E 05 F1 | 	add	fp, #12
055a0     AF 4A 0A FB | 	rdlong	arg01, fp wz
055a4     10 5E 85 F1 | 	sub	fp, #16
055a8     01 00 00 FF 
055ac     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
055b0     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
055b4     01 00 00 FF 
055b8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
055bc     01 24 66 56 |  if_ne	neg	result1, #1
055c0     00 24 06 A6 |  if_e	mov	result1, #0
055c4     E0 01 90 FD | 	jmp	#LR__0296
055c8                 | LR__0289
055c8     10 5E 05 F1 | 	add	fp, #16
055cc     AF 24 02 FB | 	rdlong	result1, fp
055d0     10 5E 85 F1 | 	sub	fp, #16
055d4     D0 01 90 FD | 	jmp	#LR__0296
055d8                 | LR__0290
055d8     04 5E 05 F1 | 	add	fp, #4
055dc     AF 54 02 FB | 	rdlong	local01, fp
055e0     1C 54 06 F1 | 	add	local01, #28
055e4     2A 59 02 FB | 	rdlong	local03, local01
055e8     14 5E 05 F1 | 	add	fp, #20
055ec     AF 58 62 FC | 	wrlong	local03, fp
055f0     AF 54 0A FB | 	rdlong	local01, fp wz
055f4     18 5E 85 F1 | 	sub	fp, #24
055f8     1C 00 90 5D |  if_ne	jmp	#LR__0291
055fc     01 00 00 FF 
05600     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05604     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
05608     01 00 00 FF 
0560c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05610     01 24 66 F6 | 	neg	result1, #1
05614     90 01 90 FD | 	jmp	#LR__0296
05618                 | LR__0291
05618     04 5E 05 F1 | 	add	fp, #4
0561c     AF 54 02 FB | 	rdlong	local01, fp
05620     04 5E 85 F1 | 	sub	fp, #4
05624     24 54 06 F1 | 	add	local01, #36
05628     2A 59 0A FB | 	rdlong	local03, local01 wz
0562c     A0 00 90 AD |  if_e	jmp	#LR__0293
05630     24 5E 05 F1 | 	add	fp, #36
05634     AF 5E 02 F6 | 	mov	local06, fp
05638     20 5E 85 F1 | 	sub	fp, #32
0563c     AF 60 02 FB | 	rdlong	local07, fp
05640     30 5B 02 F6 | 	mov	local04, local07
05644     24 5A 06 F1 | 	add	local04, #36
05648     2D 63 02 FB | 	rdlong	local08, local04
0564c     31 55 02 F6 | 	mov	local01, local08
05650     2A 57 02 FB | 	rdlong	local02, local01
05654     04 54 06 F1 | 	add	local01, #4
05658     2A 65 02 FB | 	rdlong	local09, local01
0565c     32 59 02 F6 | 	mov	local03, local09
05660     30 67 02 F6 | 	mov	local10, local07
05664     04 5E 85 F1 | 	sub	fp, #4
05668     33 69 02 F6 | 	mov	local11, local10
0566c     00 6B 06 F6 | 	mov	local12, #256
05670     2F 6D 02 F6 | 	mov	local13, local06
05674     34 4B 02 F6 | 	mov	arg01, local11
05678     00 4D 06 F6 | 	mov	arg02, #256
0567c     36 4F 02 F6 | 	mov	arg03, local13
05680     07 6F 02 F6 | 	mov	local14, objptr
05684     2B 0F 02 F6 | 	mov	objptr, local02
05688     2D 58 62 FD | 	call	local03
0568c     37 0F 02 F6 | 	mov	objptr, local14
05690     12 71 02 F6 | 	mov	local15, result1
05694     10 5E 05 F1 | 	add	fp, #16
05698     AF 70 62 FC | 	wrlong	local15, fp
0569c     AF 56 0A FB | 	rdlong	local02, fp wz
056a0     10 5E 85 F1 | 	sub	fp, #16
056a4     28 00 90 5D |  if_ne	jmp	#LR__0292
056a8     24 5E 05 F1 | 	add	fp, #36
056ac     AF 5A 02 FB | 	rdlong	local04, fp
056b0     24 5E 85 F1 | 	sub	fp, #36
056b4     2D 59 02 F6 | 	mov	local03, local04
056b8     02 58 0E F5 | 	and	local03, #2 wz
056bc     10 00 90 AD |  if_e	jmp	#LR__0292
056c0     01 54 06 F6 | 	mov	local01, #1
056c4     20 5E 05 F1 | 	add	fp, #32
056c8     AF 02 68 FC | 	wrlong	#1, fp
056cc     20 5E 85 F1 | 	sub	fp, #32
056d0                 | LR__0292
056d0                 | LR__0293
056d0     10 5E 05 F1 | 	add	fp, #16
056d4     AF 00 68 FC | 	wrlong	#0, fp
056d8     10 5E 85 F1 | 	sub	fp, #16
056dc                 | LR__0294
056dc     0C 5E 05 F1 | 	add	fp, #12
056e0     AF 54 02 FB | 	rdlong	local01, fp
056e4     0C 5E 85 F1 | 	sub	fp, #12
056e8     00 54 1E F2 | 	cmp	local01, #0 wcz
056ec     AC 00 90 ED |  if_be	jmp	#LR__0295
056f0     18 5E 05 F1 | 	add	fp, #24
056f4     AF 54 02 FB | 	rdlong	local01, fp
056f8     2A 57 02 FB | 	rdlong	local02, local01
056fc     04 54 06 F1 | 	add	local01, #4
05700     2A 59 02 FB | 	rdlong	local03, local01
05704     14 5E 85 F1 | 	sub	fp, #20
05708     AF 4A 02 FB | 	rdlong	arg01, fp
0570c     04 5E 85 F1 | 	sub	fp, #4
05710     07 69 02 F6 | 	mov	local11, objptr
05714     2B 0F 02 F6 | 	mov	objptr, local02
05718     2D 58 62 FD | 	call	local03
0571c     34 0F 02 F6 | 	mov	objptr, local11
05720     12 67 02 F6 | 	mov	local10, result1
05724     14 5E 05 F1 | 	add	fp, #20
05728     AF 66 62 FC | 	wrlong	local10, fp
0572c     14 5E 85 F1 | 	sub	fp, #20
05730     00 66 5E F2 | 	cmps	local10, #0 wcz
05734     64 00 90 CD |  if_b	jmp	#LR__0295
05738     1C 5E 05 F1 | 	add	fp, #28
0573c     AF 54 02 FB | 	rdlong	local01, fp
05740     2A 59 02 F6 | 	mov	local03, local01
05744     01 58 06 F1 | 	add	local03, #1
05748     AF 58 62 FC | 	wrlong	local03, fp
0574c     08 5E 85 F1 | 	sub	fp, #8
05750     AF 60 02 FB | 	rdlong	local07, fp
05754     2A 61 42 FC | 	wrbyte	local07, local01
05758     04 5E 85 F1 | 	sub	fp, #4
0575c     AF 54 02 FB | 	rdlong	local01, fp
05760     01 54 06 F1 | 	add	local01, #1
05764     AF 54 62 FC | 	wrlong	local01, fp
05768     04 5E 85 F1 | 	sub	fp, #4
0576c     AF 54 02 FB | 	rdlong	local01, fp
05770     01 54 86 F1 | 	sub	local01, #1
05774     AF 54 62 FC | 	wrlong	local01, fp
05778     14 5E 05 F1 | 	add	fp, #20
0577c     AF 54 0A FB | 	rdlong	local01, fp wz
05780     20 5E 85 F1 | 	sub	fp, #32
05784     54 FF 9F AD |  if_e	jmp	#LR__0294
05788     14 5E 05 F1 | 	add	fp, #20
0578c     AF 58 02 FB | 	rdlong	local03, fp
05790     14 5E 85 F1 | 	sub	fp, #20
05794     0A 58 0E F2 | 	cmp	local03, #10 wz
05798     40 FF 9F 5D |  if_ne	jmp	#LR__0294
0579c                 | LR__0295
0579c     10 5E 05 F1 | 	add	fp, #16
057a0     AF 24 02 FB | 	rdlong	result1, fp
057a4     10 5E 85 F1 | 	sub	fp, #16
057a8                 | LR__0296
057a8     AF F0 03 F6 | 	mov	ptra, fp
057ac     BF 00 A0 FD | 	call	#popregs_
057b0                 | __system___vfsread_ret
057b0     2D 00 64 FD | 	ret
057b4                 | 
057b4                 | ' 	
057b4                 | ' 	FUNCTION pfunc(c as integer) as integer
057b4                 | ___strs_cl_pfunc
057b4                 | ' 		if (i < 16) then
057b4     04 0E 06 F1 | 	add	objptr, #4
057b8     07 2B 02 FB | 	rdlong	_var01, objptr
057bc     04 0E 86 F1 | 	sub	objptr, #4
057c0     10 2A 5E F2 | 	cmps	_var01, #16 wcz
057c4     2C 00 90 3D |  if_ae	jmp	#LR__0297
057c8     07 2D 02 FB | 	rdlong	_var02, objptr
057cc     04 0E 06 F1 | 	add	objptr, #4
057d0     07 2F 02 FB | 	rdlong	_var03, objptr
057d4     16 2F 02 F1 | 	add	_var03, _var02
057d8     17 4B 42 FC | 	wrbyte	arg01, _var03
057dc     07 2B 02 FB | 	rdlong	_var01, objptr
057e0     01 2A 06 F1 | 	add	_var01, #1
057e4     07 2B 62 FC | 	wrlong	_var01, objptr
057e8     04 0E 86 F1 | 	sub	objptr, #4
057ec                 | ' 			p(i) = c
057ec                 | ' 			i = i+1
057ec                 | ' 			return 1
057ec     01 24 06 F6 | 	mov	result1, #1
057f0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
057f4                 | LR__0297
057f4                 | ' 			return -1
057f4     01 24 66 F6 | 	neg	result1, #1
057f8                 | ___strs_cl_pfunc_ret
057f8     2D 00 64 FD | 	ret
057fc                 | 
057fc                 | __struct__s_vfs_file_t_putchar
057fc     04 5A 05 F6 | 	mov	COUNT_, #4
05800     B0 00 A0 FD | 	call	#pushregs_
05804     18 0E 06 F1 | 	add	objptr, #24
05808     07 55 0A FB | 	rdlong	local01, objptr wz
0580c     18 0E 86 F1 | 	sub	objptr, #24
05810     00 24 06 A6 |  if_e	mov	result1, #0
05814     3C 00 90 AD |  if_e	jmp	#LR__0298
05818     18 0E 06 F1 | 	add	objptr, #24
0581c     07 55 02 FB | 	rdlong	local01, objptr
05820     18 0E 86 F1 | 	sub	objptr, #24
05824     2A 57 02 FB | 	rdlong	local02, local01
05828     04 54 06 F1 | 	add	local01, #4
0582c     2A 59 02 FB | 	rdlong	local03, local01
05830     07 4D 02 F6 | 	mov	arg02, objptr
05834     07 5B 02 F6 | 	mov	local04, objptr
05838     2B 0F 02 F6 | 	mov	objptr, local02
0583c     2D 58 62 FD | 	call	local03
05840     2D 0F 02 F6 | 	mov	objptr, local04
05844     00 24 5E F2 | 	cmps	result1, #0 wcz
05848     00 54 06 C6 |  if_b	mov	local01, #0
0584c     01 54 06 36 |  if_ae	mov	local01, #1
05850     2A 25 02 F6 | 	mov	result1, local01
05854                 | LR__0298
05854     AF F0 03 F6 | 	mov	ptra, fp
05858     BF 00 A0 FD | 	call	#popregs_
0585c                 | __struct__s_vfs_file_t_putchar_ret
0585c     2D 00 64 FD | 	ret
05860                 | 
05860                 | __struct__s_vfs_file_t_getchar
05860     04 5A 05 F6 | 	mov	COUNT_, #4
05864     B0 00 A0 FD | 	call	#pushregs_
05868     1C 0E 06 F1 | 	add	objptr, #28
0586c     07 55 0A FB | 	rdlong	local01, objptr wz
05870     1C 0E 86 F1 | 	sub	objptr, #28
05874     01 24 66 A6 |  if_e	neg	result1, #1
05878     2C 00 90 AD |  if_e	jmp	#LR__0299
0587c                 | '         return getcf(__this);
0587c     1C 0E 06 F1 | 	add	objptr, #28
05880     07 55 02 FB | 	rdlong	local01, objptr
05884     1C 0E 86 F1 | 	sub	objptr, #28
05888     2A 57 02 FB | 	rdlong	local02, local01
0588c     04 54 06 F1 | 	add	local01, #4
05890     2A 59 02 FB | 	rdlong	local03, local01
05894     07 4B 02 F6 | 	mov	arg01, objptr
05898     07 5B 02 F6 | 	mov	local04, objptr
0589c     2B 0F 02 F6 | 	mov	objptr, local02
058a0     2D 58 62 FD | 	call	local03
058a4     2D 0F 02 F6 | 	mov	objptr, local04
058a8                 | LR__0299
058a8     AF F0 03 F6 | 	mov	ptra, fp
058ac     BF 00 A0 FD | 	call	#popregs_
058b0                 | __struct__s_vfs_file_t_getchar_ret
058b0     2D 00 64 FD | 	ret
058b4                 | 
058b4                 | __struct___bas_wrap_sender_tx
058b4     04 5A 05 F6 | 	mov	COUNT_, #4
058b8     B0 00 A0 FD | 	call	#pushregs_
058bc     07 55 02 FB | 	rdlong	local01, objptr
058c0     2A 57 02 FB | 	rdlong	local02, local01
058c4     04 54 06 F1 | 	add	local01, #4
058c8     2A 59 02 FB | 	rdlong	local03, local01
058cc     07 5B 02 F6 | 	mov	local04, objptr
058d0     2B 0F 02 F6 | 	mov	objptr, local02
058d4     2D 58 62 FD | 	call	local03
058d8     2D 0F 02 F6 | 	mov	objptr, local04
058dc     01 24 06 F6 | 	mov	result1, #1
058e0     AF F0 03 F6 | 	mov	ptra, fp
058e4     BF 00 A0 FD | 	call	#popregs_
058e8                 | __struct___bas_wrap_sender_tx_ret
058e8     2D 00 64 FD | 	ret
058ec                 | 
058ec                 | LR__0300
058ec     20 21 21 21 
058f0     20 63 6F 72 
058f4     72 75 70 74 
058f8     65 64 20 68 
058fc     65 61 70 3F 
05900     3F 3F 20 21 
05904     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
05907     00          | 	byte	0
05908                 | LR__0301
05908     20 21 21 21 
0590c     20 6F 75 74 
05910     20 6F 66 20 
05914     68 65 61 70 
05918     20 6D 65 6D 
0591c     6F 72 79 20 
05920     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
05924     00          | 	byte	0
05925                 | LR__0302
05925     20 21 21 21 
05929     20 63 6F 72 
0592d     72 75 70 74 
05931     65 64 20 68 
05935     65 61 70 20 
05939     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0593d     00          | 	byte	0
0593e                 | LR__0303
0593e     42 61 73 69 
05942     63 20 74 65 
05946     73 74       | 	byte	"Basic test"
05948     00          | 	byte	0
05949                 | LR__0304
05949     4B 65 79 62 
0594d     6F 61 72 64 
05951     20 6B 65 79 
05955     20 72 65 6C 
05959     65 61 73 65 
0595d     64 2C 20 73 
05961     63 61 6E 63 
05965     6F 64 65 20 | 	byte	"Keyboard key released, scancode "
05969     00          | 	byte	0
0596a                 | LR__0305
0596a     4B 65 79 62 
0596e     6F 61 72 64 
05972     20 6B 65 79 
05976     20 70 72 65 
0597a     73 73 65 64 
0597e     2C 20 20 73 
05982     63 61 6E 63 
05986     6F 64 65 20 | 	byte	"Keyboard key pressed,  scancode "
0598a     00          | 	byte	0
0598b                 | LR__0306
0598b     2C 20 63 68 
0598f     61 72 63 6F 
05993     64 65 20    | 	byte	", charcode "
05996     00          | 	byte	0
05997                 | LR__0307
05997     4B 65 79 62 
0599b     6F 61 72 64 
0599f     20 6D 6F 64 
059a3     69 66 69 65 
059a7     72 73 20 72 
059ab     65 6C 65 61 
059af     73 65 64    | 	byte	"Keyboard modifiers released"
059b2     00          | 	byte	0
059b3                 | LR__0308
059b3     4B 65 79 62 
059b7     6F 61 72 64 
059bb     20 6D 6F 64 
059bf     69 66 69 65 
059c3     72 73 20 70 
059c7     72 65 73 73 
059cb     65 64 3A 20 | 	byte	"Keyboard modifiers pressed: "
059cf     00          | 	byte	0
059d0                 | LR__0309
059d0     4D 6F 75 73 
059d4     65 20 6D 6F 
059d8     76 65 64 2C 
059dc     20 78 3D 20 | 	byte	"Mouse moved, x= "
059e0     00          | 	byte	0
059e1                 | LR__0310
059e1     20 79 3D 20 | 	byte	" y= "
059e5     00          | 	byte	0
059e6                 | LR__0311
059e6     4D 6F 75 73 
059ea     65 20 6D 6F 
059ee     76 65 64 2C 
059f2     20 78 3D 20 | 	byte	"Mouse moved, x= "
059f6     00          | 	byte	0
059f7                 | LR__0312
059f7     20 79 3D 20 | 	byte	" y= "
059fb     00          | 	byte	0
059fc                 | LR__0313
059fc     4D 6F 75 73 
05a00     65 77 68 65 
05a04     65 6C 3A 20 | 	byte	"Mousewheel: "
05a08     00          | 	byte	0
05a09                 | LR__0314
05a09     4D 6F 75 73 
05a0d     65 20 6B 65 
05a11     79 3A 20    | 	byte	"Mouse key: "
05a14     00          | 	byte	0
05a15                 | LR__0315
05a15     4D 6F 75 73 
05a19     65 20 63 6C 
05a1d     69 63 6B 65 
05a21     64          | 	byte	"Mouse clicked"
05a22     00          | 	byte	0
05a23                 | LR__0316
05a23     4D 6F 75 73 
05a27     65 20 64 6F 
05a2b     75 62 6C 65 
05a2f     20 63 6C 69 
05a33     63 6B 65 64 | 	byte	"Mouse double clicked"
05a37     00          | 	byte	0
05a38                 | LR__0317
05a38     4D 69 64 69 
05a3c     20 6E 6F 74 
05a40     65 20 6F 66 
05a44     66 2C 20 63 
05a48     68 61 6E 6E 
05a4c     65 6C 20    | 	byte	"Midi note off, channel "
05a4f     00          | 	byte	0
05a50                 | LR__0318
05a50     2C 20 6E 6F 
05a54     74 65 20    | 	byte	", note "
05a57     00          | 	byte	0
05a58                 | LR__0319
05a58     4D 69 64 69 
05a5c     20 6E 6F 74 
05a60     65 20 6F 6E 
05a64     2C 20 20 63 
05a68     68 61 6E 6E 
05a6c     65 6C 20    | 	byte	"Midi note on,  channel "
05a6f     00          | 	byte	0
05a70                 | LR__0320
05a70     2C 20 6E 6F 
05a74     74 65 20    | 	byte	", note "
05a77     00          | 	byte	0
05a78                 | LR__0321
05a78     2C 20 76 65 
05a7c     6C 6F 63 69 
05a80     74 79 20    | 	byte	", velocity "
05a83     00          | 	byte	0
05a84                 | LR__0322
05a84     4D 69 64 69 
05a88     20 70 6F 6C 
05a8c     79 20 61 66 
05a90     74 65 72 74 
05a94     6F 75 63 68 
05a98     2C 20 63 68 
05a9c     61 6E 6E 65 
05aa0     6C 20       | 	byte	"Midi poly aftertouch, channel "
05aa2     00          | 	byte	0
05aa3                 | LR__0323
05aa3     20 6E 6F 74 
05aa7     65 20       | 	byte	" note "
05aa9     00          | 	byte	0
05aaa                 | LR__0324
05aaa     2C 20 76 65 
05aae     6C 6F 63 69 
05ab2     74 79 20    | 	byte	", velocity "
05ab5     00          | 	byte	0
05ab6                 | LR__0325
05ab6     4D 69 64 69 
05aba     20 63 6F 6E 
05abe     74 72 6F 6C 
05ac2     20 63 68 61 
05ac6     6E 67 65 2C 
05aca     20 63 68 61 
05ace     6E 6E 65 6C 
05ad2     20          | 	byte	"Midi control change, channel "
05ad3     00          | 	byte	0
05ad4                 | LR__0326
05ad4     20 63 6F 6E 
05ad8     74 72 6F 6C 
05adc     6C 65 72 20 | 	byte	" controller "
05ae0     00          | 	byte	0
05ae1                 | LR__0327
05ae1     2C 20 76 61 
05ae5     6C 75 65 20 | 	byte	", value "
05ae9     00          | 	byte	0
05aea                 | LR__0328
05aea     4D 69 64 69 
05aee     20 70 72 6F 
05af2     67 72 61 6D 
05af6     20 63 68 61 
05afa     6E 67 65 2C 
05afe     20 63 68 61 
05b02     6E 6E 65 6C 
05b06     20          | 	byte	"Midi program change, channel "
05b07     00          | 	byte	0
05b08                 | LR__0329
05b08     20 70 72 6F 
05b0c     67 72 61 6D 
05b10     20          | 	byte	" program "
05b11     00          | 	byte	0
05b12                 | LR__0330
05b12     4D 69 64 69 
05b16     20 6D 6F 6E 
05b1a     6F 20 61 66 
05b1e     74 65 72 74 
05b22     6F 75 63 68 
05b26     2C 20 63 68 
05b2a     61 6E 6E 65 
05b2e     6C 20       | 	byte	"Midi mono aftertouch, channel "
05b30     00          | 	byte	0
05b31                 | LR__0331
05b31     20 76 61 6C 
05b35     75 65 20    | 	byte	" value "
05b38     00          | 	byte	0
05b39                 | LR__0332
05b39     4D 69 64 69 
05b3d     20 70 69 74 
05b41     63 68 20 62 
05b45     65 6E 64 2C 
05b49     20 63 68 61 
05b4d     6E 6E 65 6C 
05b51     20          | 	byte	"Midi pitch bend, channel "
05b52     00          | 	byte	0
05b53                 | LR__0333
05b53     20 76 61 6C 
05b57     75 65 20    | 	byte	" value "
05b5a     00          | 	byte	0
05b5b                 | LR__0334
05b5b     4E 6F 76 61 
05b5f     74 69 6F 6E 
05b63     20 63 6F 6E 
05b67     74 72 6F 6C 
05b6b     20 6B 65 79 
05b6f     20          | 	byte	"Novation control key "
05b70     00          | 	byte	0
05b71     00 00 00    | 	alignl
05b74                 | _hng030rm_spin2_dat_
05b74     00 00 00 00 
05b78     00 00 00 00 
05b7c     00 00 00 00 
05b80     00 00 00 00 
05b84     00 00 00    | vga_font       file "vgafont.def"
05b87     7E 81 A5 81 
05b8b     81 BD 99 81 
05b8f     81 7E 00 00 
05b93     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
05b97     7E FF DB FF 
05b9b     FF C3 E7 FF 
05b9f     FF 7E 00 00 
05ba3     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
05ba7     00 36 7F 7F 
05bab     7F 7F 3E 1C 
05baf     08 00 00 00 
05bb3     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
05bb7     00 08 1C 3E 
05bbb     7F 3E 1C 08 
05bbf     00 00 00 00 
05bc3     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
05bc7     18 3C 3C E7 
05bcb     E7 E7 18 18 
05bcf     3C 00 00 00 
05bd3     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
05bd7     18 3C 7E FF 
05bdb     FF 7E 18 18 
05bdf     3C 00 00 00 
05be3     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
05be7     00 00 00 18 
05beb     3C 3C 18 00 
05bef     00 00 00 00 
05bf3     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
05bf7     FF FF FF E7 
05bfb     C3 C3 E7 FF 
05bff     FF FF FF FF 
05c03     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
05c07     00 00 3C 66 
05c0b     42 42 66 3C 
05c0f     00 00 00 00 
05c13     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
05c17     FF FF C3 99 
05c1b     BD BD 99 C3 
05c1f     FF FF FF FF 
05c23     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
05c27     78 70 58 4C 
05c2b     1E 33 33 33 
05c2f     33 1E 00 00 
05c33     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
05c37     3C 66 66 66 
05c3b     66 3C 18 7E 
05c3f     18 18 00 00 
05c43     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
05c47     FC CC FC 0C 
05c4b     0C 0C 0C 0E 
05c4f     0F 07 00 00 
05c53     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
05c57     FE C6 FE C6 
05c5b     C6 C6 C6 E6 
05c5f     E7 67 03 00 
05c63     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
05c67     18 18 DB 3C 
05c6b     E7 3C DB 18 
05c6f     18 00 00 00 
05c73     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
05c77     03 07 0F 1F 
05c7b     7F 1F 0F 07 
05c7f     03 01 00 00 
05c83     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
05c87     60 70 78 7C 
05c8b     7F 7C 78 70 
05c8f     60 40 00 00 
05c93     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
05c97     18 3C 7E 18 
05c9b     18 18 7E 3C 
05c9f     18 00 00 00 
05ca3     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
05ca7     66 66 66 66 
05cab     66 66 66    | 	byte	$66[7]
05cae     00 66 66 00 
05cb2     00 00 00 00 
05cb6     00 FE DB DB 
05cba     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
05cbe     D8 D8 D8 00 
05cc2     00 00 00 3E 
05cc6     63 06 1C 36 
05cca     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
05cce     30 63 3E 00 
05cd2     00 00 00 00 
05cd6     00 00 00 00 
05cda     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
05cde     7F 7F 7F 00 
05ce2     00 00 00 00 
05ce6     00 18 3C 7E 
05cea     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
05cee     3C 18 7E 00 
05cf2     00 00 00 00 
05cf6     00 18 3C 7E 
05cfa     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
05cfe     18 18 18 00 
05d02     00 00 00 00 
05d06     00 18 18 18 
05d0a     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
05d0e     7E 3C 18 00 
05d12     00 00 00 00 
05d16     00 00 00 18 
05d1a     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
05d1e     00 00 00 00 
05d22     00 00 00 00 
05d26     00 00 00    | 	byte	$00[11]
05d29     0C 06 7F 06 
05d2d     0C 00 00 00 
05d31     00 00 00 00 
05d35     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d39     00 03 03 03 
05d3d     7F 00 00 00 
05d41     00 00 00 00 
05d45     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d49     14 36 7F 36 
05d4d     14 00 00 00 
05d51     00 00 00 00 
05d55     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
05d59     1C 1C 3E 3E 
05d5d     7F 7F 00 00 
05d61     00 00 00 00 
05d65     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
05d69     7F 3E 3E 1C 
05d6d     1C 08 00 00 
05d71     00 00 00 00 
05d75     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d79     00 00 00 00 
05d7d     00 00 00 00 
05d81     00 00 00 00 
05d85     00 00       | 	byte	$00[14]
05d87     18 3C 3C 3C 
05d8b     18 18 18 00 
05d8f     18 18 00 00 
05d93     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
05d97     66 24 00 00 
05d9b     00 00 00 00 
05d9f     00 00 00 00 
05da3     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05da7     00 36 36 7F 
05dab     36 36 36 7F 
05daf     36 36 00 00 
05db3     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
05db7     3E 63 43 03 
05dbb     3E 60 60 61 
05dbf     63 3E 18 18 
05dc3     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
05dc7     00 00 43 63 
05dcb     30 18 0C 06 
05dcf     63 61 00 00 
05dd3     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
05dd7     1C 36 36 1C 
05ddb     6E 3B 33 33 
05ddf     33 6E 00 00 
05de3     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
05de7     0C 0C 0C 06 
05deb     00 00 00 00 
05def     00 00 00 00 
05df3     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05df7     30 18 0C 0C 
05dfb     0C 0C 0C 0C 
05dff     18 30 00 00 
05e03     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
05e07     0C 18 30 30 
05e0b     30 30 30 30 
05e0f     18 0C 00 00 
05e13     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
05e17     00 00 00 66 
05e1b     3C FF 3C 66 
05e1f     00 00 00 00 
05e23     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
05e27     00 00 00 18 
05e2b     18 7E 18 18 
05e2f     00 00 00 00 
05e33     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
05e37     00 00 00 00 
05e3b     00 00 00 00 | 	byte	$00[8]
05e3f     18 18 18 0C 
05e43     00 00 00 00 
05e47     00 00 00 00 
05e4b     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
05e4f     00 00 00 00 
05e53     00 00 00 00 
05e57     00 00 00 00 
05e5b     00 00 00 00 | 	byte	$00[16]
05e5f     18 18 00 00 
05e63     00 00 00 00 
05e67     00 00 40 60 
05e6b     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
05e6f     03 01 00 00 
05e73     00 00 00 00 
05e77     1C 36 63 63 
05e7b     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
05e7f     36 1C 00 00 
05e83     00 00 00 00 
05e87     18 1C 1E 18 
05e8b     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
05e8f     18 7E 00 00 
05e93     00 00 00 00 
05e97     3E 63 60 30 
05e9b     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
05e9f     63 7F 00 00 
05ea3     00 00 00 00 
05ea7     3E 63 60 60 
05eab     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
05eaf     63 3E 00 00 
05eb3     00 00 00 00 
05eb7     30 38 3C 36 
05ebb     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
05ebf     30 78 00 00 
05ec3     00 00 00 00 
05ec7     7F 03 03 03 
05ecb     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
05ecf     63 3E 00 00 
05ed3     00 00 00 00 
05ed7     1C 06 03 03 
05edb     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
05edf     63 3E 00 00 
05ee3     00 00 00 00 
05ee7     7F 63 60 60 
05eeb     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
05eef     0C 0C 00 00 
05ef3     00 00 00 00 
05ef7     3E 63 63 63 
05efb     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
05eff     63 3E 00 00 
05f03     00 00 00 00 
05f07     3E 63 63 63 
05f0b     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
05f0f     30 1E 00 00 
05f13     00 00 00 00 
05f17     00 00 00 18 
05f1b     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
05f1f     18 18 00 00 
05f23     00 00 00 00 
05f27     00 00 00 18 
05f2b     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
05f2f     18 18 0C 00 
05f33     00 00 00 00 
05f37     00 60 30 18 
05f3b     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
05f3f     30 60 00 00 
05f43     00 00 00 00 
05f47     00 00 00 7E 
05f4b     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
05f4f     00 00 00 00 
05f53     00 00 00 00 
05f57     00          | 	byte	$00[9]
05f58     06 0C 18 30 
05f5c     60 30 18 0C 
05f60     06 00 00 00 
05f64     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
05f68     63 63 30 18 
05f6c     18 18 00 18 
05f70     18 00 00 00 
05f74     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
05f78     3E 63 63 7B 
05f7c     7B 7B 3B 03 
05f80     3E 00 00 00 
05f84     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
05f88     1C 36 63 63 
05f8c     7F 63 63 63 
05f90     63 00 00 00 
05f94     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
05f98     66 66 66 3E 
05f9c     66 66 66 66 
05fa0     3F 00 00 00 
05fa4     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
05fa8     66 43 03 03 
05fac     03 03 43 66 
05fb0     3C 00 00 00 
05fb4     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
05fb8     36 66 66 66 
05fbc     66 66 66 36 
05fc0     1F 00 00 00 
05fc4     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
05fc8     66 46 16 1E 
05fcc     16 06 46 66 
05fd0     7F 00 00 00 
05fd4     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
05fd8     66 46 16 1E 
05fdc     16 06 06 06 
05fe0     0F 00 00 00 
05fe4     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
05fe8     66 43 03 03 
05fec     7B 63 63 66 
05ff0     5C 00 00 00 
05ff4     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
05ff8     63 63 63 7F 
05ffc     63 63 63 63 
06000     63 00 00 00 
06004     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
06008     18 18 18 18 
0600c     18 18 18 18 | 	byte	$18[8]
06010     3C 00 00 00 
06014     00 00 00 78 
06018     30 30 30 30 
0601c     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
06020     1E 00 00 00 
06024     00 00 00 67 
06028     66 66 36 1E 
0602c     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
06030     67 00 00 00 
06034     00 00 00 0F 
06038     06 06 06 06 
0603c     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
06040     7F 00 00 00 
06044     00 00 00 63 
06048     77 7F 7F 6B 
0604c     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
06050     63 00 00 00 
06054     00 00 00 63 
06058     67 6F 7F 7B 
0605c     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
06060     63 00 00 00 
06064     00 00 00 3E 
06068     63 63 63 63 
0606c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06070     3E 00 00 00 
06074     00 00 00 3F 
06078     66 66 66 3E 
0607c     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
06080     0F 00 00 00 
06084     00 00 00 3E 
06088     63 63 63 63 
0608c     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
06090     3E 30 70 00 
06094     00 00 00 3F 
06098     66 66 66 3E 
0609c     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
060a0     67 00 00 00 
060a4     00 00 00 3E 
060a8     63 63 06 1C 
060ac     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
060b0     3E 00 00 00 
060b4     00 00 00 7E 
060b8     7E 5A 18 18 
060bc     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
060c0     3C 00 00 00 
060c4     00 00 00 63 
060c8     63 63 63 63 
060cc     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
060d0     3E 00 00 00 
060d4     00 00 00 63 
060d8     63 63 63 63 
060dc     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
060e0     08 00 00 00 
060e4     00 00 00 63 
060e8     63 63 63 6B 
060ec     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
060f0     36 00 00 00 
060f4     00 00 00 63 
060f8     63 36 3E 1C 
060fc     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
06100     63 00 00 00 
06104     00 00 00 66 
06108     66 66 66 3C 
0610c     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
06110     3C 00 00 00 
06114     00 00 00 7F 
06118     63 61 30 18 
0611c     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
06120     7F 00 00 00 
06124     00 00 00 3C 
06128     0C 0C 0C 0C 
0612c     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
06130     3C 00 00 00 
06134     00 00 00 00 
06138     01 03 07 0E 
0613c     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
06140     40 00 00 00 
06144     00 00 00 3C 
06148     30 30 30 30 
0614c     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
06150     3C 00 00 00 
06154     1C 36 00 00 
06158     00 00 00 00 
0615c     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06160     00 00 00 00 
06164     00 00 00 00 
06168     00 00 00 00 
0616c     00 00 00 00 
06170     00          | 	byte	$00[17]
06171     FF 00 00 0C 
06175     18 00 00 00 
06179     00 00 00 00 
0617d     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06181     00 00 00 00 
06185     00 00 00 00 
06189     00          | 	byte	$00[9]
0618a     1E 30 3E 33 
0618e     33 33 6E 00 
06192     00 00 00 00 
06196     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
0619a     1E 36 66 66 
0619e     66 66 3E 00 
061a2     00 00 00 00 
061a6     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
061aa     3E 63 03 03 
061ae     03 63 3E 00 
061b2     00 00 00 00 
061b6     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
061ba     3C 36 33 33 
061be     33 33 6E 00 
061c2     00 00 00 00 
061c6     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
061ca     3E 63 7F 03 
061ce     03 63 3E 00 
061d2     00 00 00 00 
061d6     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
061da     0C 1E 0C 0C 
061de     0C 0C 1E 00 
061e2     00 00 00 00 
061e6     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
061ea     6E 33 33 33 
061ee     33 33 3E 30 
061f2     33 1E 00 00 
061f6     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
061fa     36 6E 66 66 
061fe     66 66 67 00 
06202     00 00 00 00 
06206     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
0620a     1C 18 18 18 
0620e     18 18 3C 00 
06212     00 00 00 00 
06216     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
0621a     70 60 60 60 
0621e     60 60 60 66 
06222     66 3C 00 00 
06226     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
0622a     66 36 1E 1E 
0622e     36 66 67 00 
06232     00 00 00 00 
06236     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
0623a     18 18 18 18 
0623e     18 18       | 	byte	$18[6]
06240     3C 00 00 00 
06244     00 00 00 00 
06248     00 00 37 7F 
0624c     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
06250     63 00 00 00 
06254     00 00 00 00 
06258     00 00 3B 66 
0625c     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
06260     66 00 00 00 
06264     00 00 00 00 
06268     00 00 3E 63 
0626c     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
06270     3E 00 00 00 
06274     00 00 00 00 
06278     00 00 3B 66 
0627c     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
06280     3E 06 06 0F 
06284     00 00 00 00 
06288     00 00 6E 33 
0628c     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
06290     3E 30 30 78 
06294     00 00 00 00 
06298     00 00 3B 6E 
0629c     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
062a0     0F 00 00 00 
062a4     00 00 00 00 
062a8     00 00 3E 63 
062ac     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
062b0     3E 00 00 00 
062b4     00 00 00 08 
062b8     0C 0C 3F 0C 
062bc     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
062c0     38 00 00 00 
062c4     00 00 00 00 
062c8     00 00 33 33 
062cc     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
062d0     6E 00 00 00 
062d4     00 00 00 00 
062d8     00 00 63 63 
062dc     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
062e0     1C 00 00 00 
062e4     00 00 00 00 
062e8     00 00 63 63 
062ec     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
062f0     36 00 00 00 
062f4     00 00 00 00 
062f8     00 00 63 36 
062fc     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
06300     63 00 00 00 
06304     00 00 00 00 
06308     00 00 63 63 
0630c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
06310     7E 60 30 1F 
06314     00 00 00 00 
06318     00 00 7F 33 
0631c     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
06320     7F 00 00 00 
06324     00 00 00 70 
06328     18 18 18 0E 
0632c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
06330     70 00 00 00 
06334     00 00 00 18 
06338     18 18 18 18 
0633c     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
06340     18 00 00 00 
06344     00 00 00 0E 
06348     18 18 18 70 
0634c     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
06350     0E 00 00 00 
06354     6E 3B 00 00 
06358     00 00 00 00 
0635c     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06360     00 00 00 00 
06364     00 00 00 00 
06368     00 00       | 	byte	$00[10]
0636a     08 1C 36 63 
0636e     63 63 7F 00 
06372     00 00 00 00 
06376     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
0637a     03 03 03 03 
0637e     43 66 3C 18 
06382     30 1E 00 00 
06386     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
0638a     33 33 33 33 
0638e     33 33       | 	byte	$33[6]
06390     6E 00 00 00 
06394     00 00 60 30 
06398     18 00 3E 63 
0639c     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
063a0     3E 00 00 00 
063a4     00 00 08 1C 
063a8     36 00 1E 30 
063ac     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
063b0     6E 00 00 00 
063b4     00 00 00 00 
063b8     33 00 1E 30 
063bc     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
063c0     6E 00 00 00 
063c4     00 00 1C 36 
063c8     1C 00 33 33 
063cc     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
063d0     6E 00 00 00 
063d4     00 00 60 30 
063d8     18 00 3E 63 
063dc     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
063e0     3E 00 00 00 
063e4     00 00 00 00 
063e8     00 00 3E 63 
063ec     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
063f0     3E 18 30 1E 
063f4     00 00 00 1C 
063f8     58 78 38 18 
063fc     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
06400     3C 00 00 00 
06404     00 00 00 00 
06408     63 00 3E 63 
0640c     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
06410     3E 00 00 00 
06414     66 33 00 3E 
06418     63 63 63 63 
0641c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06420     3E 00 00 00 
06424     00 00 CC 66 
06428     33 00 3E 63 
0642c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
06430     3E 00 00 00 
06434     00 00 18 3C 
06438     66 00 1C 18 
0643c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
06440     3C 00 00 00 
06444     30 18 00 7F 
06448     63 61 30 18 
0644c     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
06450     7F 00 00 00 
06454     00 63 00 08 
06458     1C 36 63 63 
0645c     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
06460     63 00 00 00 
06464     30 18 00 3C 
06468     66 43 03 03 
0646c     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
06470     3C 00 00 00 
06474     30 18 00 7F 
06478     66 46 16 1E 
0647c     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
06480     7F 00 00 00 
06484     0C 06 00 0F 
06488     06 06 06 06 
0648c     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
06490     7F 00 00 00 
06494     30 18 00 1C 
06498     18 18 18 18 
0649c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
064a0     3C 00 00 00 
064a4     00 00 08 1C 
064a8     36 00 3E 63 
064ac     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
064b0     3E 00 00 00 
064b4     00 00 00 00 
064b8     63 00 3E 63 
064bc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
064c0     3E 00 00 00 
064c4     00 00 00 6F 
064c8     46 26 06 06 
064cc     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
064d0     7F 00 00 00 
064d4     00 00 00 6E 
064d8     4C 2C 0C 0C 
064dc     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
064e0     1E 00 00 00 
064e4     30 18 00 3E 
064e8     63 63 06 1C 
064ec     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
064f0     3E 00 00 00 
064f4     00 00 60 30 
064f8     18 00 3E 63 
064fc     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
06500     3E 00 00 00 
06504     00 63 00 3E 
06508     63 63 63 63 
0650c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06510     3E 00 00 00 
06514     00 63 00 63 
06518     63 63 63 63 
0651c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
06520     3E 00 00 00 
06524     6C 38 00 7E 
06528     7E 5A 18 18 
0652c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
06530     3C 00 00 00 
06534     00 00 60 48 
06538     2C 0C 3F 0C 
0653c     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
06540     38 00 00 00 
06544     00 00 00 0F 
06548     26 36 1E 0E 
0654c     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
06550     7F 00 00 00 
06554     00 00 00 00 
06558     00 63 36 1C 
0655c     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
06560     00 00 00 00 
06564     00 00       | 	byte	$00[6]
06566     36 1C 08 00 
0656a     3E 63 03 03 
0656e     03 63 3E 00 
06572     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
06576     30 18 0C 00 
0657a     1E 30 3E 33 
0657e     33 33 6E 00 
06582     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
06586     60 30 18 00 
0658a     1C 18 18 18 
0658e     18 18 3C 00 
06592     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
06596     60 30 18 00 
0659a     3E 63 63 63 
0659e     63 63 3E 00 
065a2     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
065a6     30 18 0C 00 
065aa     33 33 33 33 
065ae     33 33 6E 00 
065b2     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
065b6     00 08 1C 36 
065ba     63 63 7F 63 
065be     63 63 63 18 
065c2     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
065c6     00 00 00 00 
065ca     1E 30 3E 33 
065ce     33 33 6E 18 
065d2     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
065d6     00 7F 63 61 
065da     30 18 0C 06 
065de     43 63 7F 00 
065e2     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
065e6     36 1C 08 00 
065ea     7F 33 18 0C 
065ee     06 63 7F 00 
065f2     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
065f6     00 7F 66 46 
065fa     16 1E 16 06 
065fe     46 66 7F 18 
06602     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
06606     00 00 00 00 
0660a     3E 63 7F 03 
0660e     03 63 3E 18 
06612     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
06616     00 3C 66 03 
0661a     1F 03 0F 03 
0661e     03 66 3C 00 
06622     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
06626     60 30 18 00 
0662a     7F 33 18 0C 
0662e     06 63 7F 00 
06632     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
06636     00 3C 66 43 
0663a     03 03 03 03 
0663e     43 66 3C 00 
06642     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
06646     00 00 00 00 
0664a     3E 63 06 1C 
0664e     30 63 3E 18 
06652     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
06656     00 00 00 00 
0665a     00 00       | 	byte	$00[6]
0665c     6C 36 1B 36 
06660     6C 00 00 00 
06664     00 00 00 00 
06668     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0666c     1B 36 6C 36 
06670     1B 00 00 00 
06674     88 22 88 22 
06678     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
0667c     88 22 88 22 
06680     88 22 88 22 
06684     AA 55 AA 55 
06688     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
0668c     AA 55 AA 55 
06690     AA 55 AA 55 
06694     BB EE BB EE 
06698     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
0669c     BB EE BB EE 
066a0     BB EE BB EE 
066a4     18 18 18 18 
066a8     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
066ac     18 18 18 18 
066b0     18 18 18 18 
066b4     18 18 18 18 
066b8     18 18 18    | 	byte	$18[15]
066bb     1F 18 18 18 
066bf     18 18 18 18 
066c3     18 30 18 00 
066c7     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
066cb     63 7F 63 63 
066cf     63 63 00 00 
066d3     00 1C 36 00 
066d7     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
066db     63 7F 63 63 
066df     63 63 00 00 
066e3     00 36 1C 00 
066e7     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
066eb     1E 16 06 46 
066ef     66 7F 00 00 
066f3     00 00 00 00 
066f7     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
066fb     1C 30 60 63 
066ff     63 3E 18 30 
06703     1E 6C 6C 6C 
06707     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
0670b     6F 6C 6C 6C 
0670f     6C 6C 6C 6C 
06713     6C 6C 6C 6C 
06717     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0671b     6C 6C 6C 6C 
0671f     6C 6C 6C 6C 
06723     6C          | 	byte	$6c[9]
06724     00 00 00 00 
06728     00          | 	byte	$00[5]
06729     7F 60 6F 6C 
0672d     6C 6C 6C 6C 
06731     6C 6C 6C 6C 
06735     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06739     6F 60 7F 00 
0673d     00 00 00 00 
06741     00 00 00 18 
06745     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
06749     61 30 18 0C 
0674d     06 43 63 7F 
06751     00 00 00 00 
06755     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
06759     00 7F 33 18 
0675d     0C 06 63 7F 
06761     00 00 00 00 
06765     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
06769     00 00 1F 18 
0676d     18 18 18 18 
06771     18 18 18 18 
06775     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06779     18 18 F8 00 
0677d     00 00 00 00 
06781     00 00 00 18 
06785     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
06789     18 18 FF 00 
0678d     00 00 00 00 
06791     00 00 00 00 
06795     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06799     00 00 FF 18 
0679d     18 18 18 18 
067a1     18 18 18 18 
067a5     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
067a9     18 18 F8 18 
067ad     18 18 18 18 
067b1     18 18 18 00 
067b5     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
067b9     00 00 FF 00 
067bd     00 00 00 00 
067c1     00 00 00 18 
067c5     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
067c9     18 18 FF 18 
067cd     18 18 18 18 
067d1     18 18 18 63 
067d5     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
067d9     36 63 63 7F 
067dd     63 63 63 63 
067e1     00 00 00 00 
067e5     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
067e9     00 1E 30 3E 
067ed     33 33 33 6E 
067f1     00 00 00 6C 
067f5     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
067f9     EC 0C FC 00 
067fd     00 00 00 00 
06801     00 00 00 00 
06805     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06809     FC 0C EC 6C 
0680d     6C 6C 6C 6C 
06811     6C 6C 6C 6C 
06815     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06819     EF 00 FF 00 
0681d     00 00 00 00 
06821     00 00 00 00 
06825     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06829     FF 00 EF 6C 
0682d     6C 6C 6C 6C 
06831     6C 6C 6C 6C 
06835     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06839     EC 0C EC 6C 
0683d     6C 6C 6C 6C 
06841     6C 6C 6C 00 
06845     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
06849     FF 00 FF 00 
0684d     00 00 00 00 
06851     00 00 00 6C 
06855     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
06859     EF 00 EF 6C 
0685d     6C 6C 6C 6C 
06861     6C 6C 6C 00 
06865     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
06869     63 3E 63 63 
0686d     63 63 3E 63 
06871     00 00 00 00 
06875     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
06879     30 3C 36 33 
0687d     33 33 33 6E 
06881     00 00 00 00 
06885     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
06889     66 66 6F 66 
0688d     66 66 36 1F 
06891     00 00 00 36 
06895     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
06899     66 66 66 66 
0689d     66 66       | 	byte	$66[6]
0689f     36 1F 00 00 
068a3     00 00 63 00 
068a7     7F 66 46 16 
068ab     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
068af     66 7F 00 00 
068b3     00 6C 38 00 
068b7     38 30 30 3C 
068bb     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
068bf     33 6E 00 00 
068c3     00 36 1C 00 
068c7     63 67 6F 7F 
068cb     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
068cf     63 63 00 00 
068d3     00 30 18 00 
068d7     3C 18 18 18 
068db     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
068df     18 3C 00 00 
068e3     00 3C 66 00 
068e7     3C 18 18 18 
068eb     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
068ef     18 3C 00 00 
068f3     00 00 00 36 
068f7     1C 08 00 3E 
068fb     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
068ff     63 3E 00 00 
06903     00 18 18 18 
06907     18 18 18 18 
0690b     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
0690f     00 00 00 00 
06913     00 00 00 00 
06917     00 00 00 00 | 	byte	$00[12]
0691b     F8 18 18 18 
0691f     18 18 18 18 
06923     18 FF FF FF 
06927     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
0692b     FF FF FF FF 
0692f     FF FF FF FF 
06933     FF          | 	byte	$ff[9]
06934     00 00 00 00 
06938     00 00 00    | 	byte	$00[7]
0693b     FF FF FF FF 
0693f     FF FF FF FF 
06943     FF          | 	byte	$ff[9]
06944     00 00 00 7E 
06948     7E 5A 18 18 
0694c     18 18 18 18 
06950     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
06954     1C 36 1C 63 
06958     63 63 63 63 
0695c     63 63 63 63 
06960     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06964     FF FF FF FF 
06968     FF FF FF    | 	byte	$ff[7]
0696b     00 00 00 00 
0696f     00 00 00 00 
06973     00          | 	byte	$00[9]
06974     30 18 00 3E 
06978     63 63 63 63 
0697c     63 63 63 63 
06980     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06984     00 00 00 1E 
06988     33 33 33 1B 
0698c     33 63 63 63 
06990     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
06994     1C 36 00 3E 
06998     63 63 63 63 
0699c     63 63 63 63 
069a0     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
069a4     30 18 00 63 
069a8     67 6F 7F 7B 
069ac     73 63 63 63 
069b0     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
069b4     00 00 60 30 
069b8     18 00 3B 66 
069bc     66 66 66 66 
069c0     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
069c4     00 00 36 1C 
069c8     08 00 3B 66 
069cc     66 66 66 66 
069d0     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
069d4     36 1C 00 3E 
069d8     63 63 06 1C 
069dc     30 60 63 63 
069e0     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
069e4     00 00 36 1C 
069e8     08 00 3E 63 
069ec     06 1C 30 63 
069f0     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
069f4     30 18 00 3F 
069f8     66 66 66 3E 
069fc     36 66 66 66 
06a00     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
06a04     30 18 00 63 
06a08     63 63 63 63 
06a0c     63 63 63 63 
06a10     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06a14     00 00 60 30 
06a18     18 00 3B 6E 
06a1c     66 06 06 06 
06a20     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
06a24     66 33 00 63 
06a28     63 63 63 63 
06a2c     63 63 63 63 
06a30     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06a34     00 00 60 30 
06a38     18 00 63 63 
06a3c     63 63 63 63 
06a40     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
06a44     30 18 00 66 
06a48     66 66 66 3C 
06a4c     18 18 18 18 
06a50     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
06a54     00 00 00 08 
06a58     0C 0C 3F 0C 
06a5c     0C 0C 0C 6C 
06a60     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
06a64     30 18 00 00 
06a68     00 00 00 00 
06a6c     00 00 00 00 
06a70     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06a74     00 00 00 00 
06a78     00 00 00 00 | 	byte	$00[8]
06a7c     7F 00 00 00 
06a80     00 00 00 00 
06a84     66 33 00 00 
06a88     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
06a8c     00 00 00 00 
06a90     00 00 00 00 
06a94     00 00 00 00 
06a98     00 00 00 00 
06a9c     00 00 00 00 
06aa0     00          | 	byte	$00[21]
06aa1     0C 06 3C 36 
06aa5     1C 00 00 00 
06aa9     00 00 00 00 
06aad     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ab1     00 00 00 63 
06ab5     3E 00 00 00 
06ab9     00 00 00 00 
06abd     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ac1     00 00 00 00 
06ac5     3E 63 06 1C 
06ac9     36 63 63 36 
06acd     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
06ad1     00 00 00 00 
06ad5     00 00 00 00 | 	byte	$00[8]
06ad9     18 00 7E 00 
06add     18 00 00 00 
06ae1     00 00 00 00 
06ae5     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ae9     00 00 00 00 
06aed     00 00 00 00 | 	byte	$00[8]
06af1     18 30 1E 00 
06af5     00 00 1C 36 
06af9     36 1C 00 00 
06afd     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
06b01     00 00 00 00 
06b05     63 00 00 00 
06b09     00 00 00 00 
06b0d     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b11     00 00 00 18 
06b15     18 00 00 00 
06b19     00 00 00 00 
06b1d     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b21     00 00 00 00 
06b25     00          | 	byte	$00[5]
06b26     CC 66 33 00 
06b2a     33 33 33 33 
06b2e     33 33 6E 00 
06b32     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
06b36     00 3F 66 66 
06b3a     66 3E 36 66 
06b3e     66 66 6F 00 
06b42     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
06b46     36 1C 08 00 
06b4a     3B 6E 66 06 
06b4e     06 06 0F 00 
06b52     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
06b56     00 00 00 7E 
06b5a     7E 7E 7E 7E 
06b5e     7E 7E 00 00 
06b62     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
06b66     00 00 00 00 
06b6a     00 00 00 00 
06b6e     00 00 00 00 
06b72     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b74     00 00 00 00 
      ...             
06ba4     00 00 00 00 
06ba8     00 00 00    | st_font        file "st4font.def"
06bab     FF FF 00 00 
06baf     00 00 00 00 
06bb3     00 18 18 18 
06bb7     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06bbb     18 18 18 18 
06bbf     18 18 18 18 
06bc3     18          | 	byte	$18[9]
06bc4     00 00 00 00 
06bc8     00 00 00    | 	byte	$00[7]
06bcb     FF FF 18 18 
06bcf     18 18 18 18 
06bd3     18 18 18 18 
06bd7     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06bdb     FF FF 00 00 
06bdf     00 00 00 00 
06be3     00 18 18 18 
06be7     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06beb     1F 1F 18 18 
06bef     18 18 18 18 
06bf3     18 18 18 18 
06bf7     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06bfb     F8 F8 18 18 
06bff     18 18 18 18 
06c03     18 00 00 00 
06c07     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06c0b     1F 1F 18 18 
06c0f     18 18 18 18 
06c13     18 00 00 00 
06c17     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06c1b     F8 F8 18 18 
06c1f     18 18 18 18 
06c23     18 18 18 18 
06c27     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06c2b     1F 1F 00 00 
06c2f     00 00 00 00 
06c33     00 18 18 18 
06c37     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06c3b     F8 F8 00 00 
06c3f     00 00 00 00 
06c43     00 18 18 18 
06c47     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06c4b     FF FF 18 18 
06c4f     18 18 18 18 
06c53     18 00 00 18 
06c57     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
06c5b     66 7E 7E 66 
06c5f     66 66 66 30 
06c63     18 00 00 7E 
06c67     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
06c6b     3E 06 06 06 
06c6f     06 7E 7E 18 
06c73     0C 30 18 3C 
06c77     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
06c7b     06 06 06 66 
06c7f     66 7E 3C 00 
06c83     00 30 18 66 
06c87     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
06c8b     7E 7E 76 76 
06c8f     66 66 66 00 
06c93     00 30 18 7C 
06c97     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
06c9b     1C 38 70 60 
06c9f     60 7E 3E 00 
06ca3     00 30 18 7E 
06ca7     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
06cab     18 0C 0C 06 
06caf     06 7E 7E 00 
06cb3     00 18 18 00 
06cb7     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
06cbb     18 18 0C 0C 
06cbf     06 7E 7E 00 
06cc3     00 30 18 3C 
06cc7     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
06ccb     66 66 66 66 
06ccf     66          | 	byte	$66[5]
06cd0     7E 3C 00 00 
06cd4     00 00 06 06 
06cd8     06 06 16 1E 
06cdc     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
06ce0     7E 7E 00 00 
06ce4     00 00 00 00 
06ce8     00 3C 7C 60 
06cec     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
06cf0     7E 7C 30 18 
06cf4     00 00 00 00 
06cf8     00 3C 7E 66 
06cfc     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
06d00     7E 7C 18 0C 
06d04     00 00 30 18 
06d08     00 3C 3E 06 
06d0c     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
06d10     7E 7C 00 00 
06d14     00 00 30 18 
06d18     00 3E 7E 66 
06d1c     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
06d20     66 66 00 00 
06d24     00 00 30 18 
06d28     00 7C 7E 06 
06d2c     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
06d30     7E 3E 00 00 
06d34     00 00 30 18 
06d38     00 7E 7E 30 
06d3c     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
06d40     7E 7E 00 00 
06d44     00 00 18 18 
06d48     00 7E 7E 30 
06d4c     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
06d50     7E 7E 00 00 
06d54     00 00 30 18 
06d58     00 3C 7E 66 
06d5c     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
06d60     7E 3C 00 00 
06d64     00 00 1C 1C 
06d68     18 18 38 3C 
06d6c     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
06d70     3C 3C 00 00 
06d74     00 00 00 00 
06d78     00 00 00 00 
06d7c     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06d80     00 00 00 00 
06d84     00 00       | 	byte	$00[6]
06d86     18 18 18 18 
06d8a     18 18 18 18 | 	byte	$18[8]
06d8e     00 00 18 18 
06d92     00 00 00 00 
06d96     66 66 66 66 
06d9a     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
06d9e     00 00 00 00 
06da2     00 00 00 00 
06da6     00          | 	byte	$00[9]
06da7     66 66 FF FF 
06dab     66 66 FF FF 
06daf     66 66 00 00 
06db3     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
06db7     7C 7E 06 06 
06dbb     3E 7C 60 60 
06dbf     7E 3E 18 18 
06dc3     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
06dc7     66 30 30 18 
06dcb     18 0C 0C 66 
06dcf     66 00 00 00 
06dd3     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
06dd7     66 66 3C 1C 
06ddb     1C FC FE 66 
06ddf     66 FE FC 00 
06de3     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
06de7     18 18 18 18 
06deb     00 00 00 00 
06def     00 00 00 00 
06df3     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
06df7     18 1C 0C 0C 
06dfb     0C 0C 0C 0C 
06dff     1C 18 30 00 
06e03     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
06e07     18 38 30 30 
06e0b     30 30 30 30 
06e0f     38 18 0C 00 
06e13     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
06e17     66 66 3C 3C 
06e1b     FF FF 3C 3C 
06e1f     66 66 00 00 
06e23     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
06e27     00 18 18 18 
06e2b     7E 7E 18 18 
06e2f     18 00 00 00 
06e33     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06e37     00 00 00 00 
06e3b     00 00       | 	byte	$00[6]
06e3d     18 18 18 18 
06e41     18          | 	byte	$18[5]
06e42     0C 04 00 00 
06e46     00 00 00 00 
06e4a     7E 7E 00 00 
06e4e     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
06e52     00 00 00 00 
06e56     00 00 00 00 
06e5a     00 00 00 00 
06e5e     00          | 	byte	$00[13]
06e5f     18 18 18 00 
06e63     00 00 00 60 
06e67     60 60 30 30 
06e6b     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
06e6f     06 06 06 00 
06e73     00 00 00 3C 
06e77     7E 66 66 66 
06e7b     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
06e7f     66 7E 3C 00 
06e83     00 00 00 18 
06e87     18 1C 1C 18 
06e8b     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
06e8f     18 7E 7E 00 
06e93     00 00 00 3C 
06e97     7E 66 66 30 
06e9b     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
06e9f     0C 7E 7E 00 
06ea3     00 00 00 7E 
06ea7     7E 30 30 18 
06eab     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
06eaf     66 7E 3C 00 
06eb3     00 00 00 30 
06eb7     30 38 38 3C 
06ebb     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
06ebf     7E 30 30 00 
06ec3     00 00 00 7E 
06ec7     7E 06 06 3E 
06ecb     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
06ecf     66 7E 3C 00 
06ed3     00 00 00 38 
06ed7     3C 0E 06 06 
06edb     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
06edf     66 7E 3C 00 
06ee3     00 00 00 7E 
06ee7     7E 60 60 30 
06eeb     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
06eef     0C 0C 0C 00 
06ef3     00 00 00 3C 
06ef7     7E 66 66 3C 
06efb     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
06eff     66 7E 3C 00 
06f03     00 00 00 3C 
06f07     7E 66 66 7E 
06f0b     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
06f0f     70 3C 1C 00 
06f13     00 00 00 00 
06f17     00 00 18 18 
06f1b     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
06f1f     18 18 18 00 
06f23     00 00 00 00 
06f27     00 00 18 18 
06f2b     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
06f2f     18 18 18 0C 
06f33     04 00 00 00 
06f37     70 38 1C 0E 
06f3b     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
06f3f     70 00 00 00 
06f43     00 00 00 00 
06f47     00 00 7E 7E 
06f4b     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
06f4f     00 00 00 00 
06f53     00 00 00 00 | 	byte	$00[8]
06f57     0E 1C 38 70 
06f5b     E0 70 38 1C 
06f5f     0E 00 00 00 
06f63     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
06f67     7E 66 66 30 
06f6b     30 18 18 18 
06f6f     00 18 18 00 
06f73     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
06f77     7E 66 66 66 
06f7b     66 36 06 66 
06f7f     66 7E 3C 00 
06f83     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
06f87     3C 7E 66 66 
06f8b     66 7E 7E 66 
06f8f     66 66 66 00 
06f93     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
06f97     7E 66 66 7E 
06f9b     3E 66 66 66 
06f9f     66 7E 3E 00 
06fa3     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
06fa7     7E 66 66 06 
06fab     06 06 06 66 
06faf     66 7E 3C 00 
06fb3     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
06fb7     7E 66 66 66 
06fbb     66 66 66 66 
06fbf     66 7E 3E 00 
06fc3     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
06fc7     7E 06 06 3E 
06fcb     3E 06 06 06 
06fcf     06 7E 7E 00 
06fd3     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
06fd7     7E 06 06 3E 
06fdb     3E 06 06 06 
06fdf     06 06 06 00 
06fe3     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
06fe7     7E 06 06 76 
06feb     76 66 66 66 
06fef     66 7E 3C 00 
06ff3     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
06ff7     66 66 66 7E 
06ffb     7E 66 66 66 
06fff     66 66 66 00 
07003     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
07007     7E 18 18 18 
0700b     18 18 18 18 
0700f     18 7E 7E 00 
07013     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
07017     60 60 60 60 
0701b     60 60 60    | 	byte	$60[7]
0701e     66 66 7E 3C 
07022     00 00 00 00 
07026     66 66 36 36 
0702a     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
0702e     66 66 C6 C6 
07032     00 00 00 00 
07036     06 06 06 06 
0703a     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
0703e     06 06 7E 7E 
07042     00 00 00 00 
07046     C6 C6 EE EE 
0704a     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
0704e     C6 C6 C6 C6 
07052     00 00 00 00 
07056     66 66 66 6E 
0705a     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
0705e     76 66 66 66 
07062     00 00 00 00 
07066     3C 7E 66 66 
0706a     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0706e     66 66 7E 3C 
07072     00 00 00 00 
07076     3E 7E 66 66 
0707a     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
0707e     06 06 06 06 
07082     00 00 00 00 
07086     3C 7E 66 66 
0708a     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0708e     66 56 3E 6C 
07092     00 00 00 00 
07096     3E 7E 66 66 
0709a     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
0709e     66 66 C6 C6 
070a2     00 00 00 00 
070a6     7C 7E 06 06 
070aa     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
070ae     60 60 7E 3E 
070b2     00 00 00 00 
070b6     7E 7E 18 18 
070ba     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
070be     18 18 18 18 
070c2     00 00 00 00 
070c6     66 66 66 66 
070ca     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
070ce     66 66 7E 3C 
070d2     00 00 00 00 
070d6     66 66 66 66 
070da     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
070de     3C 3C 18 18 
070e2     00 00 00 00 
070e6     C6 C6 C6 C6 
070ea     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
070ee     FE EE C6 82 
070f2     00 00 00 00 
070f6     66 66 66 3C 
070fa     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
070fe     3C 66 66 66 
07102     00 00 00 00 
07106     66 66 66 66 
0710a     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
0710e     18 18 18 18 
07112     00 00 00 00 
07116     7E 7E 30 30 
0711a     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
0711e     06 06 7E 7E 
07122     00 00 00 00 
07126     3C 3C 0C 0C 
0712a     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
0712e     0C 0C 3C 3C 
07132     00 00 00 00 
07136     06 06 0C 0C 
0713a     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
0713e     60 60 C0 C0 
07142     00 00 00 00 
07146     3C 3C 30 30 
0714a     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
0714e     30 30 3C 3C 
07152     00 00 00 00 
07156     18 18 3C 3C 
0715a     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
0715e     00 00 00 00 
07162     00 00 00 00 
07166     00 00 00 00 
0716a     00 00 00 00 
0716e     00 00       | 	byte	$00[18]
07170     FE FE 00 00 
07174     00 00 0C 0C 
07178     18 18 00 00 
0717c     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
07180     00 00 00 00 
07184     00 00 00 00 
07188     00          | 	byte	$00[9]
07189     3C 7C 60 7C 
0718d     7E 66 66 7E 
07191     7C 00 00 00 
07195     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
07199     3E 7E 66 66 
0719d     66 66 66 7E 
071a1     3E 00 00 00 
071a5     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
071a9     3C 3E 06 06 
071ad     06 06 06 7E 
071b1     7C 00 00 00 
071b5     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
071b9     7C 7E 66 66 
071bd     66 66 66 7E 
071c1     7C 00 00 00 
071c5     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
071c9     3C 7E 66 66 
071cd     7E 06 06 7E 
071d1     7C 00 00 00 
071d5     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
071d9     18 7E 7E 18 
071dd     18 18 18 18 
071e1     18 00 00 00 
071e5     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
071e9     7C 7E 66 66 
071ed     66 66 7E 7C 
071f1     60 7E 3E 00 
071f5     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
071f9     3E 7E 66 66 
071fd     66 66 66 66 
07201     66 00 00 00 
07205     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
07209     1C 1C 18 18 
0720d     18 18 18 3C 
07211     3C 00 00 00 
07215     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
07219     30 30 30 30 
0721d     30 30 30 30 
07221     30          | 	byte	$30[9]
07222     3E 1E 00 00 
07226     06 06 06 36 
0722a     36 1E 1E 1E 
0722e     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
07232     00 00 00 00 
07236     1C 1C 18 18 
0723a     18 18 18 18 
0723e     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
07242     00 00 00 00 
07246     00 00 00    | 	byte	$00[7]
07249     6C FE FE D6 
0724d     D6 C6 C6 C6 
07251     C6 00 00 00 
07255     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
07259     3E 7E 66 66 
0725d     66 66 66 66 
07261     66 00 00 00 
07265     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
07269     3C 7E 66 66 
0726d     66 66 66 7E 
07271     3C 00 00 00 
07275     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
07279     3E 7E 66 66 
0727d     66 66 66 7E 
07281     3E 06 06 00 
07285     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
07289     7C 7E 66 66 
0728d     66 66 66 7E 
07291     7C 60 60 00 
07295     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
07299     3E 7E 66 06 
0729d     06 06 06 06 
072a1     06 00 00 00 
072a5     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
072a9     7C 7E 06 0E 
072ad     3C 70 60 7E 
072b1     3E 00 00 00 
072b5     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
072b9     7E 7E 18 18 
072bd     18 18 18 78 
072c1     70 00 00 00 
072c5     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
072c9     66 66 66 66 
072cd     66 66 66    | 	byte	$66[7]
072d0     7E 7C 00 00 
072d4     00 00 00 00 
072d8     00 66 66 66 
072dc     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
072e0     18 18 00 00 
072e4     00 00 00 00 
072e8     00 C6 C6 D6 
072ec     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
072f0     C6 82 00 00 
072f4     00 00 00 00 
072f8     00 66 66 3C 
072fc     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
07300     66 66 00 00 
07304     00 00 00 00 
07308     00 66 66 66 
0730c     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
07310     7C 60 7E 3E 
07314     00 00 00 00 
07318     00 7E 7E 30 
0731c     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
07320     7E 7E 00 00 
07324     00 00 30 18 
07328     18 18 18 0C 
0732c     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
07330     18 30 00 00 
07334     00 00 18 18 
07338     18 18 18 18 
0733c     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
07340     18 18 00 00 
07344     00 00 0C 18 
07348     18 18 18 30 
0734c     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
07350     18 0C 00 00 
07354     00 00 6C 7E 
07358     36 00 00 00 
0735c     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
07360     00 00 00 00 
07364     00 00 00 00 
07368     00          | 	byte	$00[9]
07369     18 18 18 18 
0736d     18 18 00 00 
07371     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
07374     00 00 00 00 
07378     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
0737c     00 00 00 00 
07380     00 80 80 80 
07384     00 00 00 FF 
07388     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
0738c     00 00 00 00 
07390     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
07391     80 00 00 00 
07395     00 80 00 00 
07399     80 80 00 00 
0739d     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
073a1     80 00 80 00 
073a5     00 40 80 00 
073a9     AA AA AA 00 
073ad     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
073b1     FF 00 00 00 
073b5     00 FF 00 00 
073b9     FF FF 00 00 
073bd     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
073c1     FF 00 FF 00 
073c5     00 FF FF 00 
073c9     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
073cc     00 00 00 00 
073d0     00          | ataripalette   file "ataripalettep2.def"
073d1     11 11 11 00 
073d5     22 22 22 00 
073d9     33 33 33 00 
073dd     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
073e1     55 55 55 00 
073e5     66 66 66 00 
073e9     77 77 77 00 
073ed     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
073f1     99 99 99 00 
073f5     AA AA AA 00 
073f9     BB BB BB 00 
073fd     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
07401     DD DD DD 00 
07405     EE EE EE 00 
07409     FF FF FF 00 
0740d     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
07411     00 14 40 00 
07415     00 1E 60 00 
07419     00 28 80 00 
0741d     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
07421     00 3C BF 00 
07425     00 46 DF 00 
07429     00 50 FF 00 
0742d     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
07431     39 77 FF 00 
07435     55 8A FF 00 
07439     71 9E FF 00 
0743d     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
07441     AA C5 FF 00 
07445     C6 D8 FF 00 
07449     E3 EC FF 00 
0744d     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
07451     00 00 40 00 
07455     00 00 60 00 
07459     00 00 80 00 
0745d     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
07461     00 00 BF 00 
07465     00 00 DF 00 
07469     00 00 FF 00 
0746d     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
07471     39 39 FF 00 
07475     55 55 FF 00 
07479     71 71 FF 00 
0747d     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
07481     AA AA FF 00 
07485     C6 C6 FF 00 
07489     E3 E3 FF 00 
0748d     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
07491     20 00 40 00 
07495     30 00 60 00 
07499     40 00 80 00 
0749d     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
074a1     60 00 BF 00 
074a5     70 00 DF 00 
074a9     80 00 FF 00 
074ad     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
074b1     9C 39 FF 00 
074b5     AA 55 FF 00 
074b9     B8 71 FF 00 
074bd     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
074c1     D5 AA FF 00 
074c5     E3 C6 FF 00 
074c9     F1 E3 FF 00 
074cd     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
074d1     40 00 40 00 
074d5     60 00 60 00 
074d9     80 00 80 00 
074dd     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
074e1     BF 00 BF 00 
074e5     DF 00 DF 00 
074e9     FF 00 FF 00 
074ed     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
074f1     FF 39 FF 00 
074f5     FF 55 FF 00 
074f9     FF 71 FF 00 
074fd     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
07501     FF AA FF 00 
07505     FF C6 FF 00 
07509     FF E3 FF 00 
0750d     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
07511     40 00 20 00 
07515     60 00 30 00 
07519     80 00 40 00 
0751d     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
07521     BF 00 60 00 
07525     DF 00 70 00 
07529     FF 00 80 00 
0752d     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
07531     FF 39 9C 00 
07535     FF 55 AA 00 
07539     FF 71 B8 00 
0753d     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
07541     FF AA D5 00 
07545     FF C6 E3 00 
07549     FF E3 F1 00 
0754d     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
07551     40 00 00 00 
07555     60 00 00 00 
07559     80 00 00 00 
0755d     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
07561     BF 00 00 00 
07565     DF 00 00 00 
07569     FF 00 00 00 
0756d     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
07571     FF 39 39 00 
07575     FF 55 55 00 
07579     FF 71 71 00 
0757d     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
07581     FF AA AA 00 
07585     FF C6 C6 00 
07589     FF E3 E3 00 
0758d     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
07591     40 10 00 00 
07595     60 18 00 00 
07599     80 20 00 00 
0759d     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
075a1     BF 30 00 00 
075a5     DF 38 00 00 
075a9     FF 40 00 00 
075ad     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
075b1     FF 6A 39 00 
075b5     FF 80 55 00 
075b9     FF 95 71 00 
075bd     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
075c1     FF BF AA 00 
075c5     FF D5 C6 00 
075c9     FF EA E3 00 
075cd     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
075d1     40 20 00 00 
075d5     60 30 00 00 
075d9     80 40 00 00 
075dd     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
075e1     BF 60 00 00 
075e5     DF 70 00 00 
075e9     FF 80 00 00 
075ed     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
075f1     FF 9C 39 00 
075f5     FF AA 55 00 
075f9     FF B8 71 00 
075fd     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
07601     FF D5 AA 00 
07605     FF E3 C6 00 
07609     FF F1 E3 00 
0760d     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
07611     40 30 00 00 
07615     60 48 00 00 
07619     80 60 00 00 
0761d     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
07621     BF 90 00 00 
07625     DF A8 00 00 
07629     FF C0 00 00 
0762d     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
07631     FF CE 39 00 
07635     FF D5 55 00 
07639     FF DC 71 00 
0763d     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
07641     FF EA AA 00 
07645     FF F1 C6 00 
07649     FF F8 E3 00 
0764d     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
07651     30 40 00 00 
07655     48 60 00 00 
07659     60 80 00 00 
0765d     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
07661     90 BF 00 00 
07665     A8 DF 00 00 
07669     C0 FF 00 00 
0766d     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
07671     CE FF 39 00 
07675     D5 FF 55 00 
07679     DC FF 71 00 
0767d     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
07681     EA FF AA 00 
07685     F1 FF C6 00 
07689     F8 FF E3 00 
0768d     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
07691     00 40 00 00 
07695     00 60 00 00 
07699     00 80 00 00 
0769d     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
076a1     00 BF 00 00 
076a5     00 DF 00 00 
076a9     00 FF 00 00 
076ad     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
076b1     39 FF 39 00 
076b5     55 FF 55 00 
076b9     71 FF 71 00 
076bd     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
076c1     AA FF AA 00 
076c5     C6 FF C6 00 
076c9     E3 FF E3 00 
076cd     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
076d1     00 40 14 00 
076d5     00 60 1E 00 
076d9     00 80 28 00 
076dd     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
076e1     00 BF 3C 00 
076e5     00 DF 46 00 
076e9     00 FF 50 00 
076ed     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
076f1     39 FF 77 00 
076f5     55 FF 8A 00 
076f9     71 FF 9E 00 
076fd     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
07701     AA FF C5 00 
07705     C6 FF D8 00 
07709     E3 FF EC 00 
0770d     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
07711     00 40 28 00 
07715     00 60 3C 00 
07719     00 80 50 00 
0771d     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
07721     00 BF 78 00 
07725     00 DF 8C 00 
07729     00 FF A0 00 
0772d     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
07731     39 FF B5 00 
07735     55 FF C0 00 
07739     71 FF CA 00 
0773d     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
07741     AA FF DF 00 
07745     C6 FF EA 00 
07749     E3 FF F4 00 
0774d     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
07751     00 40 40 00 
07755     00 60 60 00 
07759     00 80 80 00 
0775d     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
07761     00 BF BF 00 
07765     00 DF DF 00 
07769     00 FF FF 00 
0776d     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
07771     39 FF FF 00 
07775     55 FF FF 00 
07779     71 FF FF 00 
0777d     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
07781     AA FF FF 00 
07785     C6 FF FF 00 
07789     E3 FF FF 00 
0778d     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
07791     00 28 40 00 
07795     00 3C 60 00 
07799     00 50 80 00 
0779d     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
077a1     00 78 BF 00 
077a5     00 8C DF 00 
077a9     00 A0 FF 00 
077ad     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
077b1     39 B5 FF 00 
077b5     55 C0 FF 00 
077b9     71 CA FF 00 
077bd     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
077c1     AA DF FF 00 
077c5     C6 EA FF 00 
077c9     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
077cc                 | '**********************************************************************************
077cc                 | '
077cc                 | '        Timings and colors definitions
077cc                 | '
077cc                 | '**********************************************************************************
077cc                 | 
077cc                 |    'streamer sets for text mode, to add to timings[0..5]
077cc                 | 
077cc                 | 
077cc                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
077cc     10 00 00 00 
077d0     50 00 00 00 
077d4     14 00 00 00 
077d8     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
077dc     70 00 00 00 
077e0     08 00 00 00 
077e4     30 00 00 00 
077e8     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
077ec     10 00 00 00 
077f0     10 00 00 00 
077f4     00 00 00 00 
077f8     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
077fc     E0 01 00 00 
07800     F6 32 24 15 
07804     FB 6C C3 01 
07808     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
0780c                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
0780c     12 00 00 00 
07810     30 00 00 00 
07814     10 00 00 00 
07818     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
0781c     18 00 00 00 
07820     08 00 00 00 
07824     18 00 00 00 
07828     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
0782c     20 00 00 00 
07830     18 00 00 00 
07834     40 00 00 00 
07838     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
0783c     F0 01 00 00 
07840     00 D0 12 13 
07844     FB 0F 00 01 
07848     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
0784c     10 00 00 00 
07850     40 00 00 00 
07854     10 00 00 00 
07858     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
0785c     08 00 00 00 
07860     08 00 00 00 
07864     08 00 00 00 
07868     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
0786c     40 00 00 00 
07870     20 00 00 00 
07874     80 00 00 00 
07878     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
0787c     E0 01 00 00 
07880     70 AE E9 10 
07884     FB 8B FF 01 
07888     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
0788c     10 00 00 00 
07890     50 00 00 00 
07894     14 00 00 00 
07898     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
0789c     00 00 00 00 
078a0     08 00 00 00 
078a4     00 00 00 00 
078a8     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
078ac     10 00 00 00 
078b0     10 00 00 00 
078b4     C0 00 00 00 
078b8     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
078bc     40 02 00 00 
078c0     F6 32 24 15 
078c4     FB 6C C3 01 
078c8     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
078cc     50 00 00 00 
078d0     A0 00 00 00 
078d4     54 00 00 00 
078d8     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
078dc     08 00 00 00 
078e0     08 00 00 00 
078e4     08 00 00 00 
078e8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
078ec     0C 00 00 00 
078f0     08 00 00 00 
078f4     00 01 00 00 
078f8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
078fc     E0 01 00 00 
07900     10 06 56 15 
07904     FB 64 C3 01 
07908     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
0790c     50 00 00 00 
07910     32 00 00 00 
07914     50 00 00 00 
07918     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
0791c     08 00 00 00 
07920     08 00 00 00 
07924     08 00 00 00 
07928     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
0792c     0C 00 00 00 
07930     08 00 00 00 
07934     40 01 00 00 
07938     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
0793c     E0 01 00 00 
07940     F2 CD 33 13 
07944     FB 53 92 01 
07948     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
0794c     18 00 00 00 
07950     30 00 00 00 
07954     18 00 00 00 
07958     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
0795c     08 00 00 00 
07960     08 00 00 00 
07964     08 00 00 00 
07968     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
0796c     0C 00 00 00 
07970     08 00 00 00 
07974     80 01 00 00 
07978     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
0797c     E0 01 00 00 
07980     F4 8F 11 11 
07984     FB 3A 55 01 
07988     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
0798c     20 00 00 00 
07990     40 00 00 00 
07994     22 00 00 00 
07998     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
0799c     00 00 00 00 
079a0     08 00 00 00 
079a4     00 00 00 00 
079a8     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
079ac     0C 00 00 00 
079b0     08 00 00 00 
079b4     C0 01 00 00 
079b8     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
079bc     F0 01 00 00 
079c0     F2 CD 33 13 
079c4     FB 53 92 01 
079c8     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
079cc                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
079cc     00 75 C7 97 
079d0     27 47 F6 0A 
079d4     05 79 CB 9B 
079d8     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
079dc                 | 
079dc     28 12 64 FD | hdmi            setq    #9
079e0     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
079e4                 |            '     setq2   #255
079e4                 |             '    rdlong  $100, paletteptr 
079e4     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
079e8     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
079ec     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
079f0     78 F9 02 F1 |                 add     ii,hbase
079f4     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
079f8     7B 0B 80 FF 
079fc     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
07a00                 | 
07a00     66 66 86 FF 
07a04     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
07a08                 | 
07a08                 | 
07a08                 | ''--------  frame rendering main loop  ---------------------------------------------------
07a08                 | 
07a08                 | p101
07a08     28 14 64 FD |                 setq    #10
07a0c     00 DF 06 FB |                 rdlong  framebuf,  ptra
07a10     28 1E 64 FD |                 setq    #15
07a14     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
07a18     71 99 02 FB |                 rdlong  border,borderptr
07a1c                 | 
07a1c     01 C4 06 F1 |                 add     frames,#1
07a20     76 F5 02 F6 |                 mov     dlptr2,dlptr
07a24                 | 
07a24     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
07a28     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
07a2c     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
07a30     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
07a34                 |  '' up porch
07a34                 | 
07a34     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
07a38     49 FF 02 F6 |                 mov     hsync1,sync_001
07a3c     37 A8 46 FB |                 callpa  i_upporch ,#blank
07a40     72 01 68 FC |                 wrlong  #0,vblankptr
07a44                 |                 
07a44     1F EA 16 F4 |                 testb   paletteptr,#31 wc
07a48     29 FE 65 3D |          if_nc  setq2   #255
07a4c     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
07a50                 | 
07a50                 | '' cursor blinking
07a50                 | 
07a50     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
07a54     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
07a58                 | 
07a58                 | '' main screen
07a58                 | 
07a58     00 BE 06 F6 |                 mov linenum,#0
07a5c     00 18 07 F6 |                 mov rcnt,#0
07a60     00 1C 07 F6 |                 mov rcnt2a,#0
07a64                 | 
07a64                 | 
07a64     00 18 0F F2 | p301            cmp rcnt,#0 wz
07a68     18 00 90 AD |         if_z    jmp #p306
07a6c     01 18 87 F1 |                 sub rcnt,#1
07a70     90 F7 02 F6 |                 mov dl,rdl
07a74     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
07a78     8F F7 02 A1 |    if_z        add dl,roffset  
07a7c     7B 21 03 F6 |                 mov rdl,dl
07a80     04 00 90 FD |                 jmp #p307          
07a84                 |           
07a84                 |                 
07a84     7A F7 02 FB | p306            rdlong  dl,dlptr2
07a88     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
07a8c     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
07a90     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
07a94                 | 
07a94                 | '' Special entry:
07a94                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
07a94                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
07a94                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
07a94                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
07a94                 | '' todo: set horizontal scroll (if needed)
07a94                 | 
07a94     02 FA 66 F0 |                 shl framebuf2,#2
07a98     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
07a9c     04 22 0F F2 |                 cmp dlc,#%100 wz
07aa0                 |   
07aa0                 |                 
07aa0     04 F4 06 F1 |                 add dlptr2,#4
07aa4     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
07aa8     7A 21 03 FB |                  rdlong rdl,dlptr2
07aac     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
07ab0     04 18 47 F0 |                  shr rcnt,#4
07ab4                 |              
07ab4     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
07ab8     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
07abc                 |                 
07abc     04 1E 47 F0 |                  shr roffset,#4
07ac0     0C 1E 67 F0 |                  shl roffset,#12
07ac4                 |   
07ac4     9C FF 9F FD |                  jmp #p301
07ac8                 |                  
07ac8                 |                  
07ac8                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
07ac8     0C FA 46 F0 |                 shr     framebuf2,#12
07acc     02 FA 66 F0 |                 shl     framebuf2,#2
07ad0                 | 
07ad0     7B 03 E3 F8 |                 getbyte t1,dl,#0
07ad4     00 02 0F F2 |                 cmp     t1,#0 wz
07ad8     34 00 90 AD |     if_z        jmp     #borderline
07adc                 | 
07adc     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
07ae0     50 00 90 CD |           if_c   jmp     #textline
07ae4     50 02 90 3D |           if_nc  jmp     #graphline
07ae8                 | '
07ae8     01 BE 06 F1 | p302            add     linenum,#1
07aec     04 F4 06 F1 |                 add     dlptr2,#4
07af0     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
07af4     6C FF 9F 5D |          if_nz  jmp     #p301
07af8                 | 
07af8     72 03 68 FC | p112            wrlong  #1,vblankptr
07afc     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
07b00                 | 
07b00     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
07b04     4B FF 02 F6 |                 mov     hsync1,sync_223
07b08     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
07b0c     F8 FE 9F FD |                 jmp     #p101
07b10                 | 
07b10                 | '' ---------------  END of frame rendering loop -------------------------------------------
07b10                 | 
07b10                 | 
07b10     14 00 B0 FD | borderline      call    #hsync                      ' make a border
07b14     4C A1 C2 FC |                 xcont   m_vi,border
07b18     CC FF 9F FD |                 jmp     #p302
07b1c                 | 
07b1c                 | 
07b1c     08 00 B0 FD | blank           call    #hsync                          'blank lines
07b20     7E A1 C2 FC |                 xcont   m_vi,hsync0
07b24     FD ED 6F 0B |         _ret_   djnz    pa,#blank
07b28                 | 
07b28     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
07b2c     7F 9D B2 FC |                 xzero   m_sn,hsync1
07b30     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
07b34                 | 
07b34                 | 
07b34                 | 
07b34                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
07b34                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
07b34                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
07b34                 | 
07b34                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
07b34                 | 
07b34     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
07b38                 | 
07b38     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
07b3c     7B 17 5B F8 |                 getnib  zoom, dl,#3
07b40     03 16 07 F5 |                 and             zoom, #3
07b44                 | 
07b44                 | 
07b44                 | 
07b44     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
07b48     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
07b4c     3F BC 06 F5 |                 and     linestart,#63
07b50     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
07b54     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
07b58                 | 
07b58     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
07b5c                 | 
07b5c                 |                        ' if fontline =0, get a border color
07b5c                 | 
07b5c     51 03 33 F9 | p102            getword t1,m_border,#0
07b60     00 02 0F F2 |                 cmp     t1, #0 wz
07b64     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
07b68                 | 
07b68     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
07b6c     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
07b70     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
07b74     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
07b78     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
07b7c     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
07b80     52 BB 02 F6 |                 mov m_lut2, m_lut1
07b84     6A BB 02 F1 |                 add m_lut2, lutt1
07b88     58 0F 03 F6 |                 mov cpl2,i_cpl
07b8c                 | 
07b8c     02 16 0F F2 |                cmp zoom,#2 wz
07b90     E4 00 90 AD |           if_z jmp #p420
07b94     01 16 0F F2 |                cmp zoom,#1 wz
07b98     64 00 90 AD |           if_z jmp #p410
07b9c     00 16 0F F2 |                 cmp zoom,#0 wz
07ba0     04 00 90 AD |           if_z jmp #p400
07ba4     50 01 90 FD |                jmp #p430
07ba8                 | 
07ba8                 |                    '
07ba8                 |  ''---------------------------------------------------------------------------------------------------------
07ba8     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
07bac     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07bb0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07bb4     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07bb8     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07bbc     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07bc0     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07bc4     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07bc8     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07bcc     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07bd0                 | 
07bd0     81 BB C2 FC |                         xcont m_lut2,t1
07bd4                 | 
07bd4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07bd8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07bdc     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07be0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07be4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07be8     01 C0 86 F1 |                         sub     lutaddr,#1
07bec                 | 
07bec     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07bf0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07bf4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07bf8                 | 
07bf8     EB 0F 6F FB |                         djnz   cpl2,#p400
07bfc     28 01 90 FD |  p401                   jmp    #p103
07c00                 | 
07c00                 | ''------------------------------------------------------------------------------------------------------------
07c00                 | 
07c00     01 0E 47 F0 |  p410                   shr cpl2,#1
07c04                 | 
07c04                 | ''---------------------------------------------------------------------------------------------------------
07c04     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
07c08     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07c0c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07c10     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07c14     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07c18     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07c1c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07c20     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07c24     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07c28     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07c2c                 | 
07c2c                 | 
07c2c     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
07c30     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
07c34     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
07c38     03 02 07 FA |                         mul t1,#3
07c3c     81 BB C2 FC |                         xcont m_lut2,t1
07c40     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07c44     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07c48     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07c4c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07c50     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07c54     01 C0 86 F1 |                         sub     lutaddr,#1
07c58     63 06 63 FD |                         mergew t3
07c5c     03 06 07 FA |                         mul t3,#3
07c60     83 BB C2 FC |                         xcont m_lut2,t3
07c64                 | 
07c64     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07c68     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07c6c                 | 
07c6c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07c70                 | 
07c70     E4 0F 6F FB |                         djnz   cpl2,#p412
07c74     B0 00 90 FD |  p411                   jmp    #p103
07c78                 | 
07c78                 | ''------------------------------------------------------------------------------------------------------------
07c78                 | 
07c78     02 0E 47 F0 |  p420                   shr cpl2,#2
07c7c                 | 
07c7c                 | ''---------------------------------------------------------------------------------------
07c7c     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
07c80     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07c84     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07c88     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07c8c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07c90     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07c94     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07c98     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07c9c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07ca0     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07ca4                 | 
07ca4     61 02 63 FD |                         mergeb t1
07ca8     81 07 3B F9 |                         getword t3,t1,#1
07cac     0F 02 07 FA |                         mul t1,#15
07cb0     81 BB C2 FC |                         xcont m_lut2,t1
07cb4                 | 
07cb4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07cb8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07cbc     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07cc0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07cc4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07cc8     01 C0 86 F1 |                         sub     lutaddr,#1
07ccc                 | 
07ccc     81 09 EB F8 |                         getbyte t4,t1,#1        '
07cd0     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
07cd4                 | 
07cd4     0F 06 07 FA |                         mul t3,#15
07cd8     83 BB C2 FC |                         xcont m_lut2,t3
07cdc                 | 
07cdc     83 0B EB F8 |                         getbyte t5,t3,#1
07ce0     85 BB C2 FC |                         xcont m_lut2, t5
07ce4     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07ce8     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07cec                 | 
07cec     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07cf0                 | 
07cf0     E2 0F 6F FB |                         djnz   cpl2,#p422
07cf4     30 00 90 FD |  p421                   jmp    #p103
07cf8                 | 
07cf8                 | '--------------------------------------------------------------------------------------------------------------
07cf8                 | 
07cf8     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
07cfc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07d00     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07d04                 | 
07d04     00 BA C6 FC |                         xcont m_lut2,#0
07d08                 | 
07d08     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07d0c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07d10     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07d14     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07d18     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07d1c     01 C0 86 F1 |                         sub     lutaddr,#1
07d20                 | 
07d20     F5 0F 6F FB |                         djnz   cpl2,#p430
07d24     00 00 90 FD |  p431                   jmp    #p103
07d28                 | 
07d28                 | ''------------------------------------------------------------------------------------------------------------
07d28                 | 
07d28                 | 
07d28                 | 
07d28     51 25 33 F9 | p103            getword  mb2,m_border,#0
07d2c     00 24 0F F2 |                 cmp      mb2, #0 wz
07d30     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
07d34                 | 
07d34     B0 FD 9F FD |                 jmp #p302
07d38                 | 
07d38                 | '' -------------------------------------- END of text line ---------------------------------
07d38                 | 
07d38                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
07d38                 | 
07d38     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
07d3c                 | 
07d3c                 | 
07d3c     51 25 33 F9 | p202            getword mb2,m_border,#0
07d40     00 24 0F F2 |                 cmp     mb2, #0 wz
07d44     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
07d48                 | 
07d48                 | '----------------------------------------- display pixels
07d48                 | 
07d48     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
07d4c     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
07d50                 | 
07d50     7B 17 5B F8 |                 getnib  zoom, dl,#3
07d54     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
07d58                 | 
07d58     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
07d5c     0C BC 06 F5 |                 and     colordepth,#12
07d60                 | 
07d60     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
07d64     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
07d68     64 00 90 AD |           if_z  jmp     #p240
07d6c                 | 
07d6c     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
07d70     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
07d74     98 00 90 AD |           if_z  jmp     #p250
07d78                 | 
07d78     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
07d7c     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
07d80     FC 00 90 AD |           if_z  jmp     #p260
07d84                 | 
07d84     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
07d88                 | 
07d88                 | '' --- 8 bit color modes
07d88                 | 
07d88     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
07d8c     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
07d90                 | 
07d90     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
07d94     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
07d98                 |        
07d98                 |  '  
07d98     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
07d9c     25 0C 07 A6 |                 if_z mov skippattern,#%100101
07da0                 |     
07da0                 |  
07da0     05 0C 07 56 |                 if_nz mov skippattern,#%000101
07da4     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
07da8                 |         
07da8                 | 
07da8                 |         
07da8     7D 11 03 FB | p235               rdlong  char,framebuf2
07dac     32 0C 63 FD |                    skipf skippattern
07db0     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
07db4     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
07db8     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
07dbc     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
07dc0     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
07dc4     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
07dc8     F7 0F 6F FB |                    djnz    cpl2,#p235
07dcc                 | 
07dcc     20 01 90 FD |                jmp    #p203
07dd0                 |                   
07dd0                 | 
07dd0                 | 
07dd0                 | '' --- 1 bit color modes
07dd0                 | 
07dd0     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
07dd4     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
07dd8                 | 
07dd8     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
07ddc     13 0C 07 A6 |        if_z   mov skippattern,#%10011
07de0     08 0C 07 56 |        if_nz  mov skippattern,#%01000
07de4                 | 
07de4                 | 
07de4     7D 11 E3 FA | p241               rdword  char,framebuf2
07de8     44 10 FF F9 |                    movbyts char,#%01000100
07dec     63 10 63 FD |                    mergew  char
07df0     32 0C 63 FD |                    skipf skippattern
07df4     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
07df8     63 10 63 FD |                    mergew  char                    ' 1 0
07dfc     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
07e00     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
07e04     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
07e08     F6 0F 6F FB |                    djnz   cpl2,#p241
07e0c                 | 
07e0c                 | 
07e0c     E0 00 90 FD |                jmp    #p203
07e10                 | 
07e10                 | '' --- 2 bit color modes
07e10                 | 
07e10     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
07e14     C8 00 90 AD |        if_z   jmp #p251
07e18                 | 
07e18     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
07e1c     30 00 90 AD |        if_z   jmp #p252
07e20                 | 
07e20                 | 
07e20     7D 11 C3 FA | p254               rdbyte char,framebuf2
07e24     04 0A 07 F6 |                    mov  t5,#4
07e28     02 10 67 F0 | p255               shl  char,#2
07e2c     88 03 53 F8 |                    getnib  t1,char,#2
07e30     03 02 07 F5 |                    and     t1,#3
07e34     55 02 07 FA |                    mul     t1,#$55
07e38     81 05 03 F9 |                    rolbyte  t2,t1,#0
07e3c     FA 0B 6F FB |                    djnz    t5,#p255
07e40     82 BB C2 FC |                    xcont   m_lut2,t2
07e44     01 FA 06 F1 |                    add     framebuf2,#1
07e48     F5 0F 6F FB |                    djnz    cpl2,#p254
07e4c     A0 00 90 FD |                    jmp     #p203
07e50                 | 
07e50     7D 11 E3 FA | p252               rdword char,framebuf2
07e54     08 0A 07 F6 |                    mov  t5,#8
07e58     02 10 67 F0 | p253               shl  char,#2
07e5c     88 03 63 F8 |                    getnib  t1,char,#4
07e60     03 02 07 F5 |                    and     t1,#3
07e64     05 02 07 FA |                    mul     t1,#5
07e68     81 05 83 F8 |                    rolnib  t2,t1,#0
07e6c     FA 0B 6F FB |                    djnz    t5,#p253
07e70     82 BB C2 FC |                    xcont   m_lut2,t2
07e74     02 FA 06 F1 |                    add     framebuf2,#2
07e78     F5 0F 6F FB |                    djnz    cpl2,#p252
07e7c     70 00 90 FD |                    jmp     #p203
07e80                 | 
07e80                 | '' ------ 4 bit color modes
07e80                 | 
07e80     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
07e84     58 00 90 AD |        if_z   jmp #p251
07e88                 | 
07e88     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
07e8c     2C 00 90 AD |        if_z   jmp #p262
07e90                 | 
07e90                 | 
07e90     7D 11 C3 FA | p263               rdbyte char,framebuf2
07e94     02 0A DC FC |                            rep #5,#2
07e98     88 05 8B F8 |                              rolnib t2,char,#1
07e9c     88 05 8B F8 |                                  rolnib t2,char,#1
07ea0     88 05 8B F8 |                              rolnib t2,char,#1
07ea4     88 05 8B F8 |                                  rolnib t2,char,#1
07ea8     04 10 67 F0 |                              shl char,#4
07eac     82 BB C2 FC |                    xcont   m_lut2,t2
07eb0     01 FA 06 F1 |                    add     framebuf2,#1
07eb4     F6 0F 6F FB |                    djnz    cpl2,#p263
07eb8     34 00 90 FD |                    jmp     #p203
07ebc                 | 
07ebc     7D 11 E3 FA | p262               rdword  char,framebuf2
07ec0     04 06 DC FC |                            rep #3,#4
07ec4     88 05 9B F8 |                              rolnib t2,char,#3
07ec8     88 05 9B F8 |                                  rolnib t2,char,#3
07ecc     04 10 67 F0 |                              shl char,#4
07ed0     82 BB C2 FC |                    xcont   m_lut2,t2
07ed4     02 FA 06 F1 |                    add     framebuf2,#2
07ed8     F8 0F 6F FB |                    djnz    cpl2,#p262
07edc     10 00 90 FD |                    jmp     #p203
07ee0                 | 
07ee0                 | ''---------- all color modes without zoom
07ee0                 | 
07ee0     87 07 D8 FC | p251               rep  #3,cpl2
07ee4     7D 11 03 FB |                    rdlong  char,framebuf2
07ee8     04 FA 06 F1 |                    add     framebuf2,#4
07eec     88 BB C2 FC |                    xcont   m_lut2,char
07ef0                 |           
07ef0                 |  ''-----------------------------------------------------------------------------------------
07ef0                 | p203           ' getword  mb2,m_border,#0
07ef0     00 24 0F F2 |                 cmp      mb2, #0 wz
07ef4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
07ef8                 | 
07ef8     EC FB 9F FD |                 jmp #p302
07efc                 | 
07efc                 | '' -------------------------------------- END of graph  line ---------------------------------
07efc                 | 
07efc                 | '' consts and vars
07efc                 | 
07efc     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
07f00     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
07f04     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
07f08     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
07f0c                 | 
07f0c     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
07f10                 | 
07f10                 | '------ these longs will be set by setmode function
07f10                 | 
07f10     00 00 00 00 | m_bs            long    0        'blanks before sync
07f14     00 00 00 00 | m_sn            long    0        'sync
07f18     00 00 00 00 | m_bv            long    0        'blanks before visible
07f1c     00 00 00 00 | m_vi            long    0        'visible pixels #
07f20     00 00 00 00 | m_border        long    0        'left/right borders
07f24     00 00 00 00 | m_lut1          long    0        'characters
07f28     00 00 00 00 | i_vborder       long    0        'up/down borders
07f2c     00 00 00 00 | i_upporch       long    0        'up porch lines
07f30     00 00 00 00 | i_vsync         long    0        'vsync lines
07f34     00 00 00 00 | i_downporch     long    0        'down porch lines
07f38     00 00 00 00 | i_modenum       long    0        'mode #
07f3c     00 00 00 00 | i_cpl           long    0        'chars/longs per line
07f40     00 00 00 00 | i_lines         long    0        'scanlines #
07f44     00 00 00 00 | i_clock         long    0
07f48     00 00 00 00 | i_hubset        long    0
07f4c     00 00 00 00 | i_totalvis      long    0
07f50                 | 
07f50                 | '-------------------------------------
07f50                 | 
07f50     00 00 00 00 | m_lut2          long    0
07f54                 | 
07f54                 | colordepth
07f54     00 00 00 00 | linestart       long    0
07f58     00 00 00 00 | linenum         long    0
07f5c     00 01 00 00 | lutaddr         long    256
07f60                 | 
07f60     0E 00 00 00 | cursorsh        long    14
07f64     00 00 00 00 | frames          long    0
07f68     00 00 00 00 | cursorx         long    0
07f6c     00 00 00 00 | cursory         long    0
07f70     00 00 00 00 | cursorpos       long    0
07f74     00 00 00 00 | cursorpos2      long    0
07f78     00 00 00 00 | fontstart       long    0
07f7c     00 00 00 00 | border2         long 0
07f80     00 00 81 70 | lutiv           long $70810000
07f84     00 00 88 00 | lutt1           long $00880000
07f88     00 00 80 00 | lutg1           long $00800000
07f8c     00 00 80 10 | lutg2           long $10800000
07f90     00 00 80 20 | lutg4           long $20800000
07f94     00 00 80 30 | lutg8           long $30800000
07f98     00 00 00 00 | framebuf        long 0
07f9c     00 00 00 00 | fontbuf         long 0
07fa0     00 00 00 00 | borderptr       long 0
07fa4     00 00 00 00 | vblankptr       long 0
07fa8     00 00 00 00 | cursorptr       long 0
07fac     00 00 00 00 | modeptr         long 0
07fb0     00 00 00 00 | paletteptr      long 0
07fb4     00 00 00 00 | dlptr           long 0
07fb8                 | fontnumptr      res     1
07fb8                 | fontnumptr      res     1
07fb8                 | hbase           res     1
07fb8                 | hbase           res     1
07fb8                 | borderptr2      res     1
07fb8                 | borderptr2      res     1
07fb8                 | dlptr2 res 1
07fb8                 | dlptr2 res 1
07fb8                 | dl              res 1
07fb8                 | dl              res 1
07fb8                 | ii              res     1
07fb8                 | ii              res     1
07fb8                 | framebuf2       res     1
07fb8                 | framebuf2       res     1
07fb8                 | hsync0          res     1
07fb8                 | hsync0          res     1
07fb8                 | hsync1          res     1
07fb8                 | hsync1          res     1
07fb8                 | fontline        res     1
07fb8                 | fontline        res     1
07fb8                 | t1              res     1
07fb8                 | t1              res     1
07fb8                 | t2              res     1
07fb8                 | t2              res     1
07fb8                 | t3 res 1
07fb8                 | t3 res 1
07fb8                 | t4 res 1
07fb8                 | t4 res 1
07fb8                 | t5 res 1
07fb8                 | t5 res 1
07fb8                 | skippattern res 1
07fb8                 | skippattern res 1
07fb8                 | cpl2 res 1
07fb8                 | cpl2 res 1
07fb8                 | char            res     1
07fb8                 | char            res     1
07fb8                 | backcolor       res     1
07fb8                 | backcolor       res     1
07fb8                 | charcolor       res     1
07fb8                 | charcolor       res     1
07fb8                 | zoom res 1
07fb8                 | zoom res 1
07fb8     00 00 00 00 | rcnt long 0 'dl repeat count
07fbc     00 00 00 00 | rcnt2 long 0
07fc0     00 00 00 00 | rcnt2a long 0
07fc4     00 00 00 00 | roffset long 0
07fc8     00 00 00 00 | rdl long 0  'dl repeat line
07fcc     00 00 00 00 | dlc long 0 'dl command
07fd0     00 00 00 00 | mb2 long 0
07fd4     00 00 00 00 | aend             long 0
07fd8                 |                 fit     496                     '
07fd8                 | __system__dat_
07fd8     00 00 00 00 
07fdc     00 00 00 00 | 	byte	$00[8]
07fe0     03 00 00 00 
07fe4     00 00 00 00 
07fe8     00 00 00 00 
07fec     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07ff0     00 00 00 00 
07ff4     00 00 00 00 
07ff8     00 00 00 00 | 	byte	$00[12]
07ffc     05 00 00 00 
08000     00 00 00 00 
08004     00 00 00 00 
08008     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0800c     D4 81 00 00 | 	long	@@@__system__dat_ + 508
08010     DC 81 00 00 | 	long	@@@__system__dat_ + 516
08014     00 00 00 00 | 	byte	$00, $00, $00, $00
08018     E4 81 00 00 | 	long	@@@__system__dat_ + 524
0801c     EC 81 00 00 | 	long	@@@__system__dat_ + 532
08020     00 00 00 00 
08024     00 00 00 00 | 	byte	$00[8]
08028     01 00 00 00 
0802c     06 00 00 00 
08030     00 00 00 00 
08034     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08038     00 00 00 00 | 	byte	$00, $00, $00, $00
0803c     F4 81 00 00 | 	long	@@@__system__dat_ + 540
08040     FC 81 00 00 | 	long	@@@__system__dat_ + 548
08044     00 00 00 00 | 	byte	$00, $00, $00, $00
08048     04 82 00 00 | 	long	@@@__system__dat_ + 556
0804c     0C 82 00 00 | 	long	@@@__system__dat_ + 564
08050     00 00 00 00 
08054     00 00 00 00 | 	byte	$00[8]
08058     01 00 00 00 
0805c     06 00 00 00 
08060     00 00 00 00 
08064     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08068     00 00 00 00 | 	byte	$00, $00, $00, $00
0806c     14 82 00 00 | 	long	@@@__system__dat_ + 572
08070     1C 82 00 00 | 	long	@@@__system__dat_ + 580
08074     00 00 00 00 | 	byte	$00, $00, $00, $00
08078     24 82 00 00 | 	long	@@@__system__dat_ + 588
0807c     2C 82 00 00 | 	long	@@@__system__dat_ + 596
08080     00 00 00 00 
      ...             
081d0     00 00 00 00 
081d4     00 00 00 00 | 	byte	$00[344]
081d8     EC 38 00 00 | 	long	@@@__system___tx
081dc     00 00 00 00 | 	byte	$00, $00, $00, $00
081e0     34 39 00 00 | 	long	@@@__system___rx
081e4     00 00 00 00 | 	byte	$00, $00, $00, $00
081e8     54 52 00 00 | 	long	@@@__system___rxtxioctl_0131
081ec     00 00 00 00 | 	byte	$00, $00, $00, $00
081f0     CC 52 00 00 | 	long	@@@__system____dummy_flush_0132
081f4     00 00 00 00 | 	byte	$00, $00, $00, $00
081f8     EC 38 00 00 | 	long	@@@__system___tx
081fc     00 00 00 00 | 	byte	$00, $00, $00, $00
08200     34 39 00 00 | 	long	@@@__system___rx
08204     00 00 00 00 | 	byte	$00, $00, $00, $00
08208     54 52 00 00 | 	long	@@@__system___rxtxioctl_0131
0820c     00 00 00 00 | 	byte	$00, $00, $00, $00
08210     CC 52 00 00 | 	long	@@@__system____dummy_flush_0132
08214     00 00 00 00 | 	byte	$00, $00, $00, $00
08218     EC 38 00 00 | 	long	@@@__system___tx
0821c     00 00 00 00 | 	byte	$00, $00, $00, $00
08220     34 39 00 00 | 	long	@@@__system___rx
08224     00 00 00 00 | 	byte	$00, $00, $00, $00
08228     54 52 00 00 | 	long	@@@__system___rxtxioctl_0131
0822c     00 00 00 00 | 	byte	$00, $00, $00, $00
08230     CC 52 00 00 | 	long	@@@__system____dummy_flush_0132
08234     00 00 00 00 | 	byte	$00, $00, $00, $00
08238                 | __heap_base
08238     00 00 00 00 
      ...             
09238     00 00 00 00 
0923c     00 00 00 00 | 	long	0[1026]
09240                 | objmem
09240     00 00 00 00 | 	long	0[1]
09244 115             | 	org	COG_BSS_START
09244 115             | _var01
09244 115             | 	res	1
09244 116             | _var02
09244 116             | 	res	1
09244 117             | _var03
09244 117             | 	res	1
09244 118             | _var04
09244 118             | 	res	1
09244 119             | _var05
09244 119             | 	res	1
09244 11a             | _var06
09244 11a             | 	res	1
09244 11b             | _var07
09244 11b             | 	res	1
09244 11c             | _var08
09244 11c             | 	res	1
09244 11d             | _var09
09244 11d             | 	res	1
09244 11e             | _var10
09244 11e             | 	res	1
09244 11f             | _var11
09244 11f             | 	res	1
09244 120             | _var12
09244 120             | 	res	1
09244 121             | _var13
09244 121             | 	res	1
09244 122             | _var14
09244 122             | 	res	1
09244 123             | _var15
09244 123             | 	res	1
09244 124             | _var16
09244 124             | 	res	1
09244 125             | arg01
09244 125             | 	res	1
09244 126             | arg02
09244 126             | 	res	1
09244 127             | arg03
09244 127             | 	res	1
09244 128             | arg04
09244 128             | 	res	1
09244 129             | arg05
09244 129             | 	res	1
09244 12a             | local01
09244 12a             | 	res	1
09244 12b             | local02
09244 12b             | 	res	1
09244 12c             | local03
09244 12c             | 	res	1
09244 12d             | local04
09244 12d             | 	res	1
09244 12e             | local05
09244 12e             | 	res	1
09244 12f             | local06
09244 12f             | 	res	1
09244 130             | local07
09244 130             | 	res	1
09244 131             | local08
09244 131             | 	res	1
09244 132             | local09
09244 132             | 	res	1
09244 133             | local10
09244 133             | 	res	1
09244 134             | local11
09244 134             | 	res	1
09244 135             | local12
09244 135             | 	res	1
09244 136             | local13
09244 136             | 	res	1
09244 137             | local14
09244 137             | 	res	1
09244 138             | local15
09244 138             | 	res	1
09244 139             | local16
09244 139             | 	res	1
09244 13a             | local17
09244 13a             | 	res	1
09244 13b             | local18
09244 13b             | 	res	1
09244 13c             | local19
09244 13c             | 	res	1
09244 13d             | local20
09244 13d             | 	res	1
09244 13e             | local21
09244 13e             | 	res	1
09244 13f             | local22
09244 13f             | 	res	1
09244 140             | local23
09244 140             | 	res	1
09244 141             | local24
09244 141             | 	res	1
09244 142             | local25
09244 142             | 	res	1
09244 143             | local26
09244 143             | 	res	1
09244 144             | local27
09244 144             | 	res	1
09244 145             | local28
09244 145             | 	res	1
09244 146             | local29
09244 146             | 	res	1
09244 147             | local30
09244 147             | 	res	1
09244 148             | local31
09244 148             | 	res	1
09244 149             | local32
09244 149             | 	res	1
09244 14a             | local33
09244 14a             | 	res	1
09244 14b             | local34
09244 14b             | 	res	1
09244 14c             | local35
09244 14c             | 	res	1
09244 14d             | local36
09244 14d             | 	res	1
09244 14e             | local37
09244 14e             | 	res	1
09244 14f             | local38
09244 14f             | 	res	1
09244 150             | local39
09244 150             | 	res	1
09244 151             | local40
09244 151             | 	res	1
09244 152             | local41
09244 152             | 	res	1
09244 153             | local42
09244 153             | 	res	1
09244 154             | local43
09244 154             | 	res	1
09244 155             | local44
09244 155             | 	res	1
09244 156             | local45
09244 156             | 	res	1
09244 157             | local46
09244 157             | 	res	1
09244 158             | local47
09244 158             | 	res	1
09244 159             | local48
09244 159             | 	res	1
09244 15a             | local49
09244 15a             | 	res	1
09244 15b             | local50
09244 15b             | 	res	1
09244 15c             | local51
09244 15c             | 	res	1
09244 15d             | local52
09244 15d             | 	res	1
09244 15e             | local53
09244 15e             | 	res	1
09244 15f             | local54
09244 15f             | 	res	1
09244 160             | local55
09244 160             | 	res	1
09244 161             | local56
09244 161             | 	res	1
09244 162             | local57
09244 162             | 	res	1
09244 163             | local58
09244 163             | 	res	1
09244 164             | local59
09244 164             | 	res	1
09244 165             | local60
09244 165             | 	res	1
09244 166             | local61
09244 166             | 	res	1
09244 167             | local62
09244 167             | 	res	1
09244 168             | local63
09244 168             | 	res	1
09244 169             | local64
09244 169             | 	res	1
09244 16a             | local65
09244 16a             | 	res	1
09244 16b             | local66
09244 16b             | 	res	1
09244 16c             | local67
09244 16c             | 	res	1
09244 16d             | local68
09244 16d             | 	res	1
09244 16e             | local69
09244 16e             | 	res	1
09244 16f             | local70
09244 16f             | 	res	1
09244 170             | local71
09244 170             | 	res	1
09244 171             | local72
09244 171             | 	res	1
09244 172             | local73
09244 172             | 	res	1
09244 173             | local74
09244 173             | 	res	1
09244 174             | local75
09244 174             | 	res	1
09244 175             | local76
09244 175             | 	res	1
09244 176             | local77
09244 176             | 	res	1
09244 177             | local78
09244 177             | 	res	1
09244 178             | local79
09244 178             | 	res	1
09244 179             | local80
09244 179             | 	res	1
09244 17a             | local81
09244 17a             | 	res	1
09244 17b             | local82
09244 17b             | 	res	1
09244 17c             | local83
09244 17c             | 	res	1
09244 17d             | local84
09244 17d             | 	res	1
09244 17e             | local85
09244 17e             | 	res	1
09244 17f             | local86
09244 17f             | 	res	1
09244 180             | local87
09244 180             | 	res	1
09244 181             | local88
09244 181             | 	res	1
09244 182             | local89
09244 182             | 	res	1
09244 183             | local90
09244 183             | 	res	1
09244 184             | muldiva_
09244 184             | 	res	1
09244 185             | muldivb_
09244 185             | 	res	1
09244 186             | 	fit	480
09244 186             | 
