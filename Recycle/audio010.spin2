' A Paula inspired sample based synthesizer/audio driver for a P2
' v. 0.11 alpha - 20220103
' MIT license
' Piotr Kardasz pik33@o2.pl
'-------------------------------------------------------------------
con

 '_clkfreq = 319220550 ' This is 90x Amiga PAL   =3546895, change to NTSC freq if needed
'_clkfreq = 322159050 ' This is 90x Amiga NTSC = 3579545

' audio pins TODO: make a variable for start() instead of const

left= 14
right=15

' 4th octave frequencies, rounded to integer

c4=262
d4=294
e4=330
f4=349
g4=392
a4=440
h4=494

var

' channel registers. 9 regs per channel: TODO: reduce the memory usage for this 

'0 - samplestart   - a pointer to the sample start
'1 - sampletype    - 0: 16 bit, 1 8 bit, both signed
'2 - loopstart     - loop start
'3 - loopend       - loop end, has to be >=loopstart+2
'4 - volume        - sample volume, 16384=1
'5 - pan           - 0..16384
'6 - synthfreq     - the frequency divider for the channel. The channel sample rate will be 3546895 or 3579545 Hz divided by this
'7 - skip          - value to add to the phase accumulator for the next sample, 1 for 8 bit, 2 for 16 bit, more for special purposes
'8 - cmd           - 0 here will reset and keep the phase accumulator at 0. Use before the new sample or to restart the current one if it loops

var
long mailboxaddr
long channel1[9]
long channel2[9]
long channel3[9]
long channel4[9]
long channel5[9]
long channel6[9]
long channel7[9]
long channel8[9]



'--------------------------------------------------------------
'---------- Init the variables, start the cog. ----------------
'--------------------------------------------------------------

pub start(mbox) :cog

mailboxaddr:=mbox ' save mailbox address


channel1[0]:=@null
channel1[1]:=0
channel1[2]:=0
channel1[3]:=2
channel1[4]:=0
channel1[5]:=8192
channel1[6]:=101
channel1[7]:=2

channel2[0]:=@null
channel2[1]:=0
channel2[2]:=0
channel2[3]:=2
channel2[4]:=0
channel2[5]:=8192
channel2[6]:=103
channel2[7]:=2

channel3[0]:=@null
channel3[1]:=0
channel3[2]:=0
channel3[3]:=2
channel3[4]:=0
channel3[5]:=8192
channel3[6]:=107
channel3[7]:=2

channel4[0]:=@null
channel4[1]:=0
channel4[2]:=0
channel4[3]:=2
channel4[4]:=0
channel4[5]:=8192
channel4[6]:=109
channel4[7]:=2
channel4[8]:=1

channel5[0]:=@null
channel5[1]:=0
channel5[2]:=0
channel5[3]:=2
channel5[4]:=0
channel5[5]:=8192
channel5[6]:=113
channel5[7]:=2

channel6[0]:=@null
channel6[1]:=0
channel6[2]:=0
channel6[3]:=2
channel6[4]:=0
channel6[5]:=8192
channel6[6]:=127
channel6[7]:=2

channel7[0]:=@null
channel7[1]:=0
channel7[2]:=0
channel7[3]:=2
channel7[4]:=0
channel7[5]:=8192
channel7[6]:=131
channel7[7]:=2

channel8[0]:=@null
channel8[1]:=0
channel8[2]:=0
channel8[3]:=2
channel8[4]:=0
channel8[5]:=8192
channel8[6]:=137
channel8[7]:=2

channel1[8]:=1
channel2[8]:=1
channel3[8]:=1
channel4[8]:=1
channel5[8]:=1
channel6[8]:=1
channel7[8]:=1
channel8[8]:=1

cog:=coginit(16,@audio,@mailboxaddr)
return cog

'--------------------------------------------------------------
'------ PASM driver code --------------------------------------
'-------------------------------------------------------------- 

dat

audio       org     0

            rdlong  mailbox, ptra++ ' get start address of all mailboxes
            cogid   pa              ' copute cogid
            mul     pa, #12         ' and mailbox spacing
            add     mailbox, pa     ' add offset to find this COG's mailbox

            wrpin   dac,#left       ' Noise dither DACs at clk/90
            wxpin   #90,#left

            wrpin   dac,#right
            wxpin   #90,#right

            dirh    #left addpins 1

            setse1  #%001<<6 + left ' Set the event - DAC empty
            mov     ijmp1,#isr1     ' Init the interrupt
            setint1 #4              ' Interrupt from DAC empty event
            
'---------------------------------------------------------------------------------        
'----------------- The main loop -------------------------------------------------
'---------------------------------------------------------------------------------

loop        setq    #8              ' Read channel regs from the hub
            rdlong  sstart1,ptra++
            setq    #8              ' Cannot do one big setq+rdlong as it interferes with interrupts
            rdlong  sstart2,ptra++
            setq    #8
            rdlong  sstart3,ptra++
            setq    #8
            rdlong  sstart4,ptra++


            sub     ptra,#9*4*4    
            
            cmp     time1,a1FFFFFFF wc   ' Main counter overflow workaround
     if_nc  cmp     time2,a1FFFFFFF wc   ' before the time is written to the buffer, it is ANDed with $1FFFFFFF  
     if_nc  cmp     time3,a1FFFFFFF wc   ' Also, the interrupt procedure ands the counter  
     if_nc  cmp     time4,a1FFFFFFF wc   ' So, if the counter is >=$20000000, the compare sequence still works  
   ' was 7FFFFFFF - reduced to make debugging easier 
     if_nc  sub     time1,a20000000
     if_nc  sub     time2,a20000000
     if_nc  sub     time3,a20000000
     if_nc  sub     time4,a20000000
     if_nc  sub     time0,a20000000

       
    
            cmp     acmd1,#0 wz     ' if cmd=0, zero the phase accumulator
    if_e    mov     p1,#0
            cmp     acmd2,#0 wz
    if_e    mov     p2,#0
            cmp     acmd3,#0 wz
    if_e    mov     p3,#0
            cmp     acmd4,#0 wz
    if_e    mov     p4,#0

          
            mov     qq,tail         ' Check if the buffer is full	
            sub     qq,#2
            and     qq,#511
            cmp     qq,front wcz
    if_e    jmp     #loop           ' If the buffer is full, do nothing               
      
            mov     cn,#p201           ' Find the channel to compute
            mov     ct,time1        ' with the lowest next sample time
            fle     ct,time2 wcz   
    if_c    mov     cn,#p202 
            fle     ct,time3 wcz
    if_c    mov     cn,#p203     
            fle     ct,time4 wcz
    if_c    mov     cn,#p204

 
            jmp     cn
   
'----------------------------------------------------------------------------------
'------------- Compute channel samples --------------------------------------------
'----------------------------------------------------------------------------------
	
' ------------  Channel 1
 
 
p201        mov     dt0,time1      ' compute the delta to add to the global time
            sub     dt0,time0
            add     time1,freq1    ' compute the next channel time	
	        
            add     p1,askip1      ' update the phase accumulator
            cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
    if_ge   sub     p1,lend1	        
    if_ge   add     p1,lstart1       
            mov     qq,p1          ' compute the pointer to the next sample
            add     qq,sstart1
            
            callpa  type1, #readsample

            scas    spl,vol1       ' apply the volume
            mov     spl,0-0

            scas    spl,apan1      ' apply the pan
            mov     ls1,0-0
            mov     qq,##16384
            sub     qq,apan1
            scas    spl,qq
            mov     rs1,0-0
            
            jmp     #p101              
        

' ------------  Channel 2
 
p202        mov     dt0,time2
            sub     dt0,time0
            add     time2,freq2  	
	        
            add     p2,askip2
            cmp     p2,lend2 wcz
    if_ge   sub     p2,lend2	        
    if_ge   add     p2,lstart2       
            mov     qq,p2
            add     qq,sstart2

            callpa  type2, #readsample

            scas    spl,vol2
            mov     spl,0-0
            
            scas    spl,apan2
            mov     ls2,0-0
            mov     qq,##16384
            sub     qq,apan2
            scas    spl,qq
            mov     rs2,0-0
            
            jmp     #p101

' ------------  Channel 3
 
p203        mov     dt0,time3
            sub     dt0,time0
            add     time3,freq3  	
	        
            add     p3,askip3
            cmp     p3,lend3 wcz
    if_ge   sub     p3,lend3	        
    if_ge   add     p3,lstart3       
            mov     qq,p3
            add     qq,sstart3
            
            callpa  type3, #readsample

            scas    spl,vol3
            mov     spl,0-0
    	
            scas    spl,apan3
            mov     ls3,0-0
            
            mov     qq,##16384
            sub     qq,apan3
            scas    spl,qq
            mov     rs3,0-0

            jmp     #p101
            
' ------------  Channel 4
 
p204        mov     dt0,time4
            sub     dt0,time0
            add     time4,freq4  	

	        
            add     p4,askip4
            cmp     p4,lend4 wcz
    if_ge   sub     p4,lend4	        
    if_ge   add     p4,lstart4       
            mov     qq,p4
            add     qq,sstart4
            
            callpa  type4, #readsample

            scas    spl,vol4
            mov     spl,0-0
    	
            scas    spl,apan4
            mov     ls4,0-0
            
            mov     qq,##16384
            sub     qq,apan4
            scas    spl,qq
            mov     rs4,0-0

            jmp     #p101
            
          
'------------------------ Channels end here --------------------       

' read a new sample from external RAM via the mailbox
readsample
           ' cmp     pa, #0 wz       ' test for 8 or 16 bit data
       setnib  qq, #%1000, #7  ' read byte from external memory
 '   if_z    setnib  qq, #%1001, #7  ' read word from external memory
            rep     #2, #1          ' disable interrupts for write burst consistency
            setq    #2              ' write 3 longs
            wrlong  qq, mailbox     ' write command request to external mem driver mailbox
poll        setq    #1              ' read 2 longs
            rdlong  qq, mailbox     ' poll mailbox for result
            tjs     qq, #poll       ' retry until valid (doesn't handle errors!)
 _ret_  shl     spl, #8         ' align data if 8 bit sample
         '   ret     'wcz             ' return to caller

'---------------------------------------------------------------       
' Now add all channels and put the sample to the buffer    


p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
    if_z    sub     front,#2         ' 
    if_z    and     front,#511     
  
            mov     rs,#0            ' Mix all channels to rs and ls
            mov     ls,#0
            add     rs,rs1
            add     rs,rs2
            add     rs,rs3
            add     rs,rs4

            
            add     ls,ls1
            add     ls,ls2
            add     ls,ls3
            add     ls,ls4

 		
            bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
            bitnot  rs,#15		
		
            setword rs,ls,#1         ' Pack L and R to one long    		
            wrlut   rs,front         ' and write it to LUT
            add     front,#1         ' Write the sample time
            mov     qq,time0
            and     qq,a1fffffff
            wrlut   qq,front
            wrlong  qq,#$80

            add     front,#1         ' move the front pointer
            and     front,#511       ' and loop at #512
            mov     oldt0,time0      ' update global time
            add     time0,dt0        
            jmp     #loop            'loop

'-------------------------------------------------------------------------
'------------------ This is the end of the main loop ---------------------
'-------------------------------------------------------------------------

'--------------------------------------------------------------------------
'------ Interrupt service -------------------------------------------------
'------ Output the sample, get the next one if exists ---------------------
'--------------------------------------------------------------------------

isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
            wypin   rsample,#right       '4
										
            add     counter,#1           '6     Increment the counter
            and     counter,a1fffffff
            cmp     counter,irqtime wcz  '8     Check if it is time for the next sample
    if_ne   reti1                        '10/12 If not, do nothing
		
          	getword rsample,lsnext,#1    '12
          	getword lsample,lsnext,#0    '14
            cmp     tail,front wcz       '16    If the buffer is empty, do nothing 
            if_e    reti1                '18/20

            rdlut   lsnext,tail          '21    else read the sample and its time from LUT
            add     tail, #1             '23
            rdlut   irqtime,tail         '26    Read the time for this sample
            add     tail,#1              '28    Go to the next entry
            and     tail,#511            '30
            reti1                        '34 
            
         '' 3 nops left    
          
'---------------------------------------------------------------------------
'-------- End of interrupt -------------------------------------------------
'---------------------------------------------------------------------------    

'---------------------------------------------------------------------------
'------- Variables ---------------------------------------------------------
'---------------------------------------------------------------------------

' constants

a1fffffff long $1fffffff
a20000000 long $20000000

' phase accumulators

p1          long 0
p2          long 0
p3          long 0
p4          long 0
p5          long 0
p6          long 0
p7          long 0
p8          long 0

' temporary variables 

qq          long 0
spl         long 0
zero        long 0
mailbox     long 0

' circular buffer in LUT

front       long 0
tail        long 0

' Interrupt ISR variables

counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
lsample     long 0
rsample     long 0
lsnext      long 0
rsnext      long 0 
irqtime     long 0

' Channel 1 registers. TODO - optimize the memory usage

sstart1     long 0       ' Sample start pointer
type1       long 0       ' type 0 16 bit, 1 8 bit
lstart1     long 0       ' Loop start
lend1       long 2       ' Loop end
vol1        long 0       ' volume, 0..16384
apan1       long 0       ' pan, 0..16384
freq1       long 101     ' frequency divider
askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
acmd1       long 0       ' command, 0 = reset the phase accumulator

' Channel 2 registers

sstart2     long 0
type2       long 0
lstart2     long 0
lend2       long 2        		
vol2        long 0
apan2       long 0
freq2       long 103
askip2      long 2
acmd2       long 0

' Channel 3 registers

sstart3     long 0
type3       long 0
lstart3     long 0
lend3       long 2       		'
vol3        long 0
apan3       long 0
freq3       long 107 '109 113 127 131 137 ...
askip3      long 2
acmd3       long 0

' Channel 4 registers

sstart4     long 0
type4       long 0
lstart4     long 0
lend4       long 2       		'
vol4        long 0
apan4       long 0
freq4       long 109 '109 113 127 131 137 ...
askip4      long 2
acmd4       long 0

' Channel 5 registers

sstart5     long 0
type5       long 0
lstart5     long 0
lend5       long 2       		'
vol5        long 0
apan5       long 0
freq5       long 113 '109 113 127 131 137 ...
askip5      long 2
acmd5       long 0

' Channel 6 registers

sstart6     long 0
type6       long 0
lstart6     long 0
lend6       long 2       		'
vol6        long 0
apan6       long 0
freq6       long 127 '109 113 127 131 137 ...
askip6      long 2
acmd6       long 0

' Channel 7 registers

sstart7     long 0
type7       long 0
lstart7     long 0
lend7       long 2       		'
vol7        long 0
apan7       long 0
freq7       long 131 '109 113 127 131 137 ...
askip7      long 2
acmd7       long 0

' Channel 8 registers

sstart8     long 0
type8       long 0
lstart8     long 0
lend8       long 2       		'
vol8        long 0
apan8       long 0
freq8       long 131 '109 113 127 131 137 ...
askip8      long 2
acmd8       long 0

' Time variables

time0       long 0    ' Global sample computing time
time1       long 1    ' Local channels time
time2       long 2
time3       long 3
time4       long 4
time5       long 5
time6       long 6
time7       long 7
time8       long 8

oldt0       long 0    'Temporary time variables
cn          long 0
ct          long 0
dt0         long 0

' Samples

ls          long 0    ' Global sample variable
rs          long 0

ls1         long 0    ' Channel samples
rs1         long 0
ls2         long 0
rs2         long 0
ls3         long 0
rs3         long 0
rs4         long 0
ls4         long 0
rs5         long 0
ls5         long 0
rs6         long 0
ls6         long 0
rs7         long 0
ls7         long 0
rs8         long 0
ls8         long 0

dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
'dac        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   

    fit 502
'-----------------------------------------------------------------------------------------
'------ PASM driver ends here ------------------------------------------------------------
'----------------------------------------------------------------------------------------- 

'
dat 

null  			long 	0,0           ' for channel reset
