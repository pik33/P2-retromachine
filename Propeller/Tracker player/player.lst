00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/Tracker player/player.p2asm"
00000                 | con
00000                 | 	_clkfreq = 319215686
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 319215798
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1cb2dfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 04 00 00 FF 
00414 004 14 F1 07 F1 | 	add	ptra, ##2324
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 96 E5 80 FF 
00428 009 00 F0 67 FD | 	hubset	##30092792
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 96 E5 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##30092795
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 6C 83 89 FF 
00448 011 14 6C 6D FC | 	wrlong	##319215798, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5C 62 FD | 	cogid	arg01
00614 084 03 5C 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2B 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5D 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 5F 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 61 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 63 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2A 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 60 56 F0 |         shr	arg03, #1 wc
00688 0a1 2E 5F 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5C 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 5E FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 60 56 F0 |         shr	arg03, #1 wc
00698 0a5 2E 5F 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5C 06 C1 |  if_c   add	arg01, #2
006a0 0a7 2F 5F 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2E 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 60 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 30 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 5E 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 6B 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 6B 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 86 0B 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0C 63 FD |        getqx   muldivb_
00740 0cf 19 0A 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 85 0B 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 86 0D 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 85 0B 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 86 0D 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2A 06 F6 |     mov result1, #0
00778 0dd 00 2C 06 F6 |     mov result2, #0
0077c 0de 2E 07 02 F6 |     mov abortchain, arg01
00780 0df 2E 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 5C 06 F1 |     add arg01, #4
00788 0e1 2E F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 5C 06 F1 |     add arg01, #4
00790 0e3 2E 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 5C 06 F1 |     add arg01, #4
00798 0e5 2E B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 2F 5D 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 2E F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 5C 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 5C 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 2F 2B 02 F6 |     mov result1, arg02
007d4 0f4 01 2C 06 F6 |     mov result2, #1
007d8 0f5 2E 5F 02 FB |     rdlong arg02, arg01
007dc 0f6 04 5C 06 F1 |     add arg01, #4
007e0 0f7 2E F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 5C 06 F1 |     add arg01, #4
007e8 0f9 2E 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 5C 06 F1 |     add arg01, #4
007f0 0fb 2E B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 5C 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 60 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 A4 06 02 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 AC 16 02 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 EC 80 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 34 80 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a 44 04 02 00 | 	long	@__system__dat_
00830 10b             | ptr__audio012_spin2_dat__
00830 10b 58 FD 01 00 | 	long	@_audio012_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 18 82 00 00 | 	long	@_dat_
00838 10d             | ptr__hng030rm_spin2_dat__
00838 10d D0 C7 01 00 | 	long	@_hng030rm_spin2_dat_
0083c 10e             | ptr__hng030rm_spin2_putchar_
0083c 10e 30 25 00 00 | 	long	@_hng030rm_spin2_putchar
00840 10f             | ptr__hng030rm_spin2_putpixel1_
00840 10f 04 20 00 00 | 	long	@_hng030rm_spin2_putpixel1
00844 110             | ptr__hng030rm_spin2_putpixel2_
00844 110 EC 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00848 111             | ptr__hng030rm_spin2_putpixel4_
00848 111 C4 21 00 00 | 	long	@_hng030rm_spin2_putpixel4
0084c 112             | ptr__hng030rm_spin2_putpixel8_
0084c 112 9C 22 00 00 | 	long	@_hng030rm_spin2_putpixel8
00850 113             | ptr__retrocog_spin2_serialcog_
00850 113 2C 34 00 00 | 	long	@_retrocog_spin2_serialcog
00854 114             | ptr__trackerplayer_spin2_dat__
00854 114 34 EC 01 00 | 	long	@_trackerplayer_spin2_dat_
00858 115             | result1
00858 115 00 00 00 00 | 	long	0
0085c 116             | result2
0085c 116 00 00 00 00 | 	long	0
00860 117             | result3
00860 117 00 00 00 00 | 	long	0
00864 118             | COG_BSS_START
00864 118             | 	fit	480
00864                 | 	orgh
00864                 | hubentry
00864                 | 
00864                 | ' 
00864                 | ' function addr(byref v as any)
00864                 | _addr
00864     00 5A 05 F6 | 	mov	COUNT_, #0
00868     B0 00 A0 FD | 	call	#pushregs_
0086c     08 F0 07 F1 | 	add	ptra, #8
00870     04 5E 05 F1 | 	add	fp, #4
00874     AF 5C 62 FC | 	wrlong	arg01, fp
00878                 | ' 
00878                 | ' return(cast(ulong,@v))
00878     2E 2B 02 F6 | 	mov	result1, arg01
0087c     04 5E 85 F1 | 	sub	fp, #4
00880     AF F0 03 F6 | 	mov	ptra, fp
00884     BF 00 A0 FD | 	call	#popregs_
00888                 | _addr_ret
00888     2D 00 64 FD | 	ret
0088c                 | 
0088c                 | _program
0088c     3B 5A 05 F6 | 	mov	COUNT_, #59
00890     B0 00 A0 FD | 	call	#pushregs_
00894     EC 0E 06 F1 | 	add	objptr, #236
00898                 | ' 
00898                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00898     07 6B 02 F6 | 	mov	local01, objptr
0089c     01 00 00 FF 
008a0     40 0F 06 F1 | 	add	objptr, ##832
008a4     07 6D 02 F6 | 	mov	local02, objptr
008a8     36 6B 62 FC | 	wrlong	local01, local02
008ac     04 6C 06 F1 | 	add	local02, #4
008b0     36 27 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
008b4     10 5C 06 F6 | 	mov	arg01, #16
008b8     28 0E 62 FD | 	setq	objptr
008bc     04 5D F2 FC | 	coginit	arg01, entryptr__ wc
008c0     01 5C 66 C6 |  if_b	neg	arg01, #1
008c4     2E 2B 02 F6 | 	mov	result1, arg01
008c8                 | ' return cog
008c8     00 0F 06 F1 | 	add	objptr, #256
008cc     07 2B 62 FC | 	wrlong	result1, objptr
008d0                 | ' c=rm.start()
008d0                 | ' return c
008d0     40 6E 06 F6 | 	mov	local03, #64
008d4     02 00 00 FF 
008d8     00 0F 86 F1 | 	sub	objptr, ##1280
008dc     07 71 02 F6 | 	mov	local04, objptr
008e0                 | ' 
008e0                 | ' ' initialize pointers and variables
008e0                 | ' 
008e0                 | ' border_ptr:=@bordercolor
008e0     24 0E 86 F1 | 	sub	objptr, #36
008e4     07 71 62 FC | 	wrlong	local04, objptr
008e8     08 00 00 FF 
008ec     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
008f0                 | ' font_ptr:=@st_font
008f0     04 0E 86 F1 | 	sub	objptr, #4
008f4     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
008f8                 | ' hdmibase:=base
008f8     20 0E 06 F1 | 	add	objptr, #32
008fc     07 01 68 FC | 	wrlong	#0, objptr
00900     24 0E 86 F1 | 	sub	objptr, #36
00904     0F 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00908                 | ' p1:=@putpixel1
00908     07 5D 02 F6 | 	mov	arg01, objptr
0090c     08 00 00 FF 
00910     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00914     20 56 B0 FD | 	call	#__system___make_methodptr
00918     15 73 02 F6 | 	mov	local05, result1
0091c     DC 0E 06 F1 | 	add	objptr, #220
00920     07 73 62 FC | 	wrlong	local05, objptr
00924     DC 0E 86 F1 | 	sub	objptr, #220
00928     10 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
0092c                 | ' p2:=@putpixel2
0092c     07 5D 02 F6 | 	mov	arg01, objptr
00930     04 56 B0 FD | 	call	#__system___make_methodptr
00934     15 73 02 F6 | 	mov	local05, result1
00938     E0 0E 06 F1 | 	add	objptr, #224
0093c     07 73 62 FC | 	wrlong	local05, objptr
00940     E0 0E 86 F1 | 	sub	objptr, #224
00944     11 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
00948                 | ' p4:=@putpixel4
00948     07 5D 02 F6 | 	mov	arg01, objptr
0094c     E8 55 B0 FD | 	call	#__system___make_methodptr
00950     15 73 02 F6 | 	mov	local05, result1
00954     E4 0E 06 F1 | 	add	objptr, #228
00958     07 73 62 FC | 	wrlong	local05, objptr
0095c     E4 0E 86 F1 | 	sub	objptr, #228
00960     12 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00964                 | ' p8:=@putpixel8
00964     07 5D 02 F6 | 	mov	arg01, objptr
00968     CC 55 B0 FD | 	call	#__system___make_methodptr
0096c     15 73 02 F6 | 	mov	local05, result1
00970     E8 0E 06 F1 | 	add	objptr, #232
00974     07 73 62 FC | 	wrlong	local05, objptr
00978     E8 0E 86 F1 | 	sub	objptr, #232
0097c                 | ' 
0097c                 | ' 
0097c                 | ' ' the mode has to be set here to enable computing the buffer length
0097c                 | ' 
0097c                 | ' setmode(mode)
0097c     40 5C 06 F6 | 	mov	arg01, #64
00980     68 20 B0 FD | 	call	#_hng030rm_spin2_setmode
00984     40 0E 06 F1 | 	add	objptr, #64
00988     07 75 02 F6 | 	mov	local06, objptr
0098c                 | ' 
0098c                 | ' vblank_ptr:=@vblank
0098c     34 0E 86 F1 | 	sub	objptr, #52
00990     07 75 62 FC | 	wrlong	local06, objptr
00994     28 0E 06 F1 | 	add	objptr, #40
00998     07 77 02 F6 | 	mov	local07, objptr
0099c                 | ' cursor_ptr:=@cursor_x
0099c     24 0E 86 F1 | 	sub	objptr, #36
009a0     07 77 62 FC | 	wrlong	local07, objptr
009a4     88 0E 06 F1 | 	add	objptr, #136
009a8     07 79 02 F6 | 	mov	local08, objptr
009ac                 | ' 
009ac                 | ' fontnum_ptr:=@fontnum
009ac     78 0E 86 F1 | 	sub	objptr, #120
009b0     07 79 62 FC | 	wrlong	local08, objptr
009b4                 | ' 
009b4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
009b4     78 0E 06 F1 | 	add	objptr, #120
009b8     07 01 68 FC | 	wrlong	#0, objptr
009bc     1C 0E 06 F1 | 	add	objptr, #28
009c0     07 5D 02 F6 | 	mov	arg01, objptr
009c4     B4 0E 86 F1 | 	sub	objptr, #180
009c8     0F 00 00 FF 
009cc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
009d0     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009d4     0F 00 00 FF 
009d8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
009dc                 | ' bytemove(@colors,@vgacolors,16)
009dc     10 60 06 F6 | 	mov	arg03, #16
009e0     2C 54 B0 FD | 	call	#__system____builtin_memmove
009e4                 | ' 
009e4                 | ' ' initialize a cursor
009e4                 | ' 
009e4                 | ' cursor_x:=0
009e4     34 0E 06 F1 | 	add	objptr, #52
009e8     07 01 48 FC | 	wrbyte	#0, objptr
009ec                 | ' cursor_y:=0
009ec     01 0E 06 F1 | 	add	objptr, #1
009f0     07 01 48 FC | 	wrbyte	#0, objptr
009f4                 | ' cursor_sh:=14
009f4     01 0E 06 F1 | 	add	objptr, #1
009f8     07 1D 48 FC | 	wrbyte	#14, objptr
009fc     36 0E 86 F1 | 	sub	objptr, #54
00a00                 | ' 
00a00                 | ' 
00a00                 | ' ' start the cog
00a00                 | ' 
00a00                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00a00     0F 00 00 FF 
00a04     68 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00a08     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00a0c     0F 00 00 FF 
00a10     68 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
00a14     07 61 02 F6 | 	mov	arg03, objptr
00a18     10 5C 06 F6 | 	mov	arg01, #16
00a1c     28 60 62 FD | 	setq	arg03
00a20     2F 5D F2 FC | 	coginit	arg01, arg02 wc
00a24     01 5C 66 C6 |  if_b	neg	arg01, #1
00a28     2E 2B 02 F6 | 	mov	result1, arg01
00a2c     15 7B 02 F6 | 	mov	local09, result1
00a30     28 0E 06 F1 | 	add	objptr, #40
00a34     07 7B 62 FC | 	wrlong	local09, objptr
00a38     28 0E 86 F1 | 	sub	objptr, #40
00a3c                 | ' waitms(20)
00a3c     14 5C 06 F6 | 	mov	arg01, #20
00a40     FC 56 B0 FD | 	call	#__system___waitms
00a44                 | ' 
00a44                 | ' ' clear the screen and set the colors to green on black
00a44                 | ' 
00a44                 | ' cls(c_green,c_black)
00a44     C7 5C 06 F6 | 	mov	arg01, #199
00a48     00 5E 06 F6 | 	mov	arg02, #0
00a4c     F4 18 B0 FD | 	call	#_hng030rm_spin2_cls
00a50                 | ' setbordercolor(0,0,128)
00a50     00 5C 06 F6 | 	mov	arg01, #0
00a54     00 5E 06 F6 | 	mov	arg02, #0
00a58     80 60 06 F6 | 	mov	arg03, #128
00a5c     C0 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a60                 | ' setwritecolors(c_green,c_black)
00a60     00 5E 06 F6 | 	mov	arg02, #0
00a64                 | ' 
00a64                 | ' 
00a64                 | ' write_color:=ff
00a64     38 0E 06 F1 | 	add	objptr, #56
00a68     07 8F 69 FC | 	wrlong	#199, objptr
00a6c                 | ' write_background:=bb
00a6c     04 0E 06 F1 | 	add	objptr, #4
00a70     07 01 68 FC | 	wrlong	#0, objptr
00a74                 | ' 
00a74                 | ' return cog
00a74     14 0E 86 F1 | 	sub	objptr, #20
00a78     07 2B 02 FB | 	rdlong	result1, objptr
00a7c     28 0E 86 F1 | 	sub	objptr, #40
00a80     00 5C 06 F6 | 	mov	arg01, #0
00a84     00 60 06 F6 | 	mov	arg03, #0
00a88     94 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a8c                 | ' v030.start(mode,pin)
00a8c                 | ' v030.setbordercolor(0,0,0)
00a8c                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a8c     07 5D 02 F6 | 	mov	arg01, objptr
00a90     0E 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a94     A0 54 B0 FD | 	call	#__system___make_methodptr
00a98     00 2E 06 F6 | 	mov	result3, #0
00a9c     00 2C 06 F6 | 	mov	result2, #0
00aa0     15 5F 02 F6 | 	mov	arg02, result1
00aa4     00 60 06 F6 | 	mov	arg03, #0
00aa8     00 62 06 F6 | 	mov	arg04, #0
00aac     00 5C 06 F6 | 	mov	arg01, #0
00ab0     5C 57 B0 FD | 	call	#__system___basic_open
00ab4     00 2A 06 F6 | 	mov	result1, #0
00ab8     9A 5C 06 F6 | 	mov	arg01, #154
00abc     93 5E 06 F6 | 	mov	arg02, #147
00ac0     80 18 B0 FD | 	call	#_hng030rm_spin2_cls
00ac4     40 00 00 FF 
00ac8     EF 7D 06 F6 | 	mov	local10, ##@LR__0459
00acc     04 00 00 FF 
00ad0     D0 0E 06 F1 | 	add	objptr, ##2256
00ad4     07 7D 62 FC | 	wrlong	local10, objptr
00ad8     04 00 00 FF 
00adc     D0 0E 86 F1 | 	sub	objptr, ##2256
00ae0     0C 7F 02 F6 | 	mov	local11, ptr__dat__
00ae4     3F 5D 02 F6 | 	mov	arg01, local11
00ae8     78 FD BF FD | 	call	#_addr
00aec     04 00 00 FF 
00af0     D4 0E 06 F1 | 	add	objptr, ##2260
00af4     07 2B 62 FC | 	wrlong	result1, objptr
00af8     15 5D 02 F6 | 	mov	arg01, result1
00afc     00 5E 06 F6 | 	mov	arg02, #0
00b00     01 00 00 FF 
00b04     A4 0F 86 F1 | 	sub	objptr, ##932
00b08     C8 2F B0 FD | 	call	#_trackerplayer_spin2_initModule
00b0c     01 5E 06 F6 | 	mov	arg02, #1
00b10                 | ' 
00b10                 | ' ''---------- Set the (x,y) position of cursor
00b10                 | ' 
00b10                 | ' cursor_x:=x
00b10     02 00 00 FF 
00b14     FC 0E 86 F1 | 	sub	objptr, ##1276
00b18     07 03 48 FC | 	wrbyte	#1, objptr
00b1c                 | ' cursor_y:=y
00b1c     01 0E 06 F1 | 	add	objptr, #1
00b20     07 03 48 FC | 	wrbyte	#1, objptr
00b24                 | ' 
00b24                 | ' emptystr$="                      "
00b24                 | ' 
00b24                 | ' ma=addr(module)
00b24                 | ' tracker.initmodule(ma,0)
00b24                 | ' 
00b24                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
00b24     04 00 00 FF 
00b28     9F 0E 06 F1 | 	add	objptr, ##2207
00b2c     07 81 02 FB | 	rdlong	local12, objptr
00b30     40 83 02 F6 | 	mov	local13, local12
00b34     04 00 00 FF 
00b38     D4 0E 86 F1 | 	sub	objptr, ##2260
00b3c     14 82 06 F1 | 	add	local13, #20
00b40                 | LR__0001
00b40     41 81 5A F2 | 	cmps	local12, local13 wcz
00b44     44 00 90 3D |  if_ae	jmp	#LR__0002
00b48     00 5C 06 F6 | 	mov	arg01, #0
00b4c     6C 6A B0 FD | 	call	#__system___getiolock_0145
00b50     15 5D 02 F6 | 	mov	arg01, result1
00b54     20 54 B0 FD | 	call	#__system___lockmem
00b58     00 84 06 F6 | 	mov	local14, #0
00b5c                 | ' asm
00b5c     40 2B C2 FA | 	rdbyte	result1, local12
00b60                 | ' return r
00b60     15 5F 02 F6 | 	mov	arg02, result1
00b64     07 5E 46 F7 | 	zerox	arg02, #7
00b68     00 5C 06 F6 | 	mov	arg01, #0
00b6c     00 60 06 F6 | 	mov	arg03, #0
00b70     50 57 B0 FD | 	call	#__system___basic_print_char
00b74     00 5C 06 F6 | 	mov	arg01, #0
00b78     40 6A B0 FD | 	call	#__system___getiolock_0145
00b7c     15 01 68 FC | 	wrlong	#0, result1
00b80     00 2A 06 F6 | 	mov	result1, #0
00b84     01 80 06 F1 | 	add	local12, #1
00b88     B4 FF 9F FD | 	jmp	#LR__0001
00b8c                 | LR__0002
00b8c     04 00 00 FF 
00b90     D8 0E 06 F1 | 	add	objptr, ##2264
00b94     07 1F 68 FC | 	wrlong	#15, objptr
00b98                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
00b98     00 7C 06 F6 | 	mov	local10, #0
00b9c     04 0E 86 F1 | 	sub	objptr, #4
00ba0     07 5D 02 FB | 	rdlong	arg01, objptr
00ba4     02 00 00 FF 
00ba8     38 5C 06 F1 | 	add	arg01, ##1080
00bac                 | ' asm
00bac     2E 87 C2 FA | 	rdbyte	local15, arg01
00bb0                 | ' return r
00bb0     07 86 46 F7 | 	zerox	local15, #7
00bb4     4D 86 0E F2 | 	cmp	local15, #77 wz
00bb8     01 7C 66 A6 |  if_e	neg	local10, #1
00bbc     00 88 06 F6 | 	mov	local16, #0
00bc0     07 5D 02 FB | 	rdlong	arg01, objptr
00bc4     04 00 00 FF 
00bc8     D4 0E 86 F1 | 	sub	objptr, ##2260
00bcc     02 00 00 FF 
00bd0     3A 5C 06 F1 | 	add	arg01, ##1082
00bd4                 | ' asm
00bd4     2E 2B C2 FA | 	rdbyte	result1, arg01
00bd8                 | ' return r
00bd8     15 8B 02 F6 | 	mov	local17, result1
00bdc     07 8A 46 F7 | 	zerox	local17, #7
00be0     4B 8A 0E F2 | 	cmp	local17, #75 wz
00be4     01 88 66 A6 |  if_e	neg	local16, #1
00be8     44 7D CA F7 | 	test	local10, local16 wz
00bec     04 00 00 5F 
00bf0     D8 0E 06 51 |  if_ne	add	objptr, ##2264
00bf4     07 3F 68 5C |  if_ne	wrlong	#31, objptr
00bf8     04 00 00 5F 
00bfc     D8 0E 86 51 |  if_ne	sub	objptr, ##2264
00c00     02 5E 06 F6 | 	mov	arg02, #2
00c04                 | ' 
00c04                 | ' ''---------- Set the (x,y) position of cursor
00c04                 | ' 
00c04                 | ' cursor_x:=x
00c04     34 0E 06 F1 | 	add	objptr, #52
00c08     07 03 48 FC | 	wrbyte	#1, objptr
00c0c                 | ' cursor_y:=y
00c0c     01 0E 06 F1 | 	add	objptr, #1
00c10     07 05 48 FC | 	wrbyte	#2, objptr
00c14     35 0E 86 F1 | 	sub	objptr, #53
00c18                 | ' position 1,2 : print samples;" ";"samples module"
00c18     00 5C 06 F6 | 	mov	arg01, #0
00c1c     9C 69 B0 FD | 	call	#__system___getiolock_0145
00c20     15 5D 02 F6 | 	mov	arg01, result1
00c24     50 53 B0 FD | 	call	#__system___lockmem
00c28     00 2A 06 F6 | 	mov	result1, #0
00c2c     04 00 00 FF 
00c30     D8 0E 06 F1 | 	add	objptr, ##2264
00c34     07 5F 02 FB | 	rdlong	arg02, objptr
00c38     04 00 00 FF 
00c3c     D8 0E 86 F1 | 	sub	objptr, ##2264
00c40     00 5C 06 F6 | 	mov	arg01, #0
00c44     00 60 06 F6 | 	mov	arg03, #0
00c48     0A 62 06 F6 | 	mov	arg04, #10
00c4c     08 57 B0 FD | 	call	#__system___basic_print_integer
00c50     41 00 00 FF 
00c54     06 5E 06 F6 | 	mov	arg02, ##@LR__0460
00c58     00 5C 06 F6 | 	mov	arg01, #0
00c5c     00 60 06 F6 | 	mov	arg03, #0
00c60     AC 56 B0 FD | 	call	#__system___basic_print_string
00c64     41 00 00 FF 
00c68     08 5E 06 F6 | 	mov	arg02, ##@LR__0461
00c6c     00 5C 06 F6 | 	mov	arg01, #0
00c70     00 60 06 F6 | 	mov	arg03, #0
00c74     98 56 B0 FD | 	call	#__system___basic_print_string
00c78     00 5C 06 F6 | 	mov	arg01, #0
00c7c     0A 5E 06 F6 | 	mov	arg02, #10
00c80     00 60 06 F6 | 	mov	arg03, #0
00c84     3C 56 B0 FD | 	call	#__system___basic_print_char
00c88     01 2A 06 F6 | 	mov	result1, #1
00c8c     00 5C 06 F6 | 	mov	arg01, #0
00c90     28 69 B0 FD | 	call	#__system___getiolock_0145
00c94     15 01 68 FC | 	wrlong	#0, result1
00c98     00 2A 06 F6 | 	mov	result1, #0
00c9c     04 00 00 FF 
00ca0     D4 0E 06 F1 | 	add	objptr, ##2260
00ca4     07 8D 02 FB | 	rdlong	local18, objptr
00ca8     04 0E 06 F1 | 	add	objptr, #4
00cac     07 8F 02 FB | 	rdlong	local19, objptr
00cb0     04 5E 06 F6 | 	mov	arg02, #4
00cb4                 | ' 
00cb4                 | ' ''---------- Set the (x,y) position of cursor
00cb4                 | ' 
00cb4                 | ' cursor_x:=x
00cb4     04 00 00 FF 
00cb8     A4 0E 86 F1 | 	sub	objptr, ##2212
00cbc     07 03 48 FC | 	wrbyte	#1, objptr
00cc0                 | ' cursor_y:=y
00cc0     01 0E 06 F1 | 	add	objptr, #1
00cc4     07 09 48 FC | 	wrbyte	#4, objptr
00cc8     35 0E 86 F1 | 	sub	objptr, #53
00ccc                 | ' 'v030. setwritecolors(170,147):
00ccc                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00ccc     00 5C 06 F6 | 	mov	arg01, #0
00cd0     E8 68 B0 FD | 	call	#__system___getiolock_0145
00cd4     15 5D 02 F6 | 	mov	arg01, result1
00cd8     9C 52 B0 FD | 	call	#__system___lockmem
00cdc     00 2A 06 F6 | 	mov	result1, #0
00ce0     40 00 00 FF 
00ce4     84 5F 06 F6 | 	mov	arg02, ##@LR__0457
00ce8     00 5C 06 F6 | 	mov	arg01, #0
00cec     00 60 06 F6 | 	mov	arg03, #0
00cf0     1C 56 B0 FD | 	call	#__system___basic_print_string
00cf4     00 5C 06 F6 | 	mov	arg01, #0
00cf8     0A 5E 06 F6 | 	mov	arg02, #10
00cfc     00 60 06 F6 | 	mov	arg03, #0
00d00     C0 55 B0 FD | 	call	#__system___basic_print_char
00d04     01 2A 06 F6 | 	mov	result1, #1
00d08     00 5C 06 F6 | 	mov	arg01, #0
00d0c     AC 68 B0 FD | 	call	#__system___getiolock_0145
00d10     15 01 68 FC | 	wrlong	#0, result1
00d14     00 2A 06 F6 | 	mov	result1, #0
00d18     04 00 00 FF 
00d1c     4C 0E 06 F1 | 	add	objptr, ##2124
00d20     07 91 02 F6 | 	mov	local20, objptr
00d24     00 92 06 F6 | 	mov	local21, #0
00d28     04 00 00 FF 
00d2c     4C 0E 86 F1 | 	sub	objptr, ##2124
00d30                 | LR__0003
00d30     40 00 00 FF 
00d34     ED 95 06 F6 | 	mov	local22, ##@LR__0458
00d38     49 97 02 F6 | 	mov	local23, local21
00d3c     02 5E 06 F6 | 	mov	arg02, #2
00d40     0A 60 06 F6 | 	mov	arg03, #10
00d44     02 98 0E F6 | 	mov	local24, #2 wz
00d48     34 00 90 FD | 	jmp	#LR__0006
00d4c                 | LR__0004
00d4c     00 9A 06 F6 | 	mov	local25, #0
00d50     4B 9D 1A F2 | 	cmp	local26, local23 wcz
00d54     01 9A 66 E6 |  if_be	neg	local25, #1
00d58     00 9E 06 F6 | 	mov	local27, #0
00d5c     4E A1 1A F2 | 	cmp	local28, local26 wcz
00d60     01 9E 66 C6 |  if_b	neg	local27, #1
00d64     4F 9B CA F7 | 	test	local25, local27 wz
00d68     14 00 90 AD |  if_e	jmp	#LR__0005
00d6c     4E A1 02 F6 | 	mov	local28, local26
00d70     0A 9C 06 FD | 	qmul	local26, #10
00d74     18 9C 62 FD | 	getqx	local26
00d78     01 98 06 F1 | 	add	local24, #1
00d7c     CC FF 9F FD | 	jmp	#LR__0004
00d80                 | LR__0005
00d80                 | LR__0006
00d80     20 98 3E F3 | 	fle	local24, #32 wcz
00d84     4C 5D 02 F6 | 	mov	arg01, local24
00d88     02 5C 06 F1 | 	add	arg01, #2
00d8c     1C 5E B0 FD | 	call	#__system___gc_alloc_managed
00d90     15 A3 02 F6 | 	mov	local29, result1
00d94     4C A5 02 F6 | 	mov	local30, local24
00d98     51 A5 02 F1 | 	add	local30, local29
00d9c     52 01 48 FC | 	wrbyte	#0, local30
00da0     98 F2 9F FE | 	loc	pa,	#(@LR__0008-@LR__0007)
00da4     93 00 A0 FD | 	call	#FCACHE_LOAD_
00da8                 | LR__0007
00da8     00 98 1E F2 | 	cmp	local24, #0 wcz
00dac     34 00 90 ED |  if_be	jmp	#LR__0009
00db0     01 98 86 F1 | 	sub	local24, #1
00db4     4B 0B 03 F6 | 	mov	muldiva_, local23
00db8     0A 0C 07 F6 | 	mov	muldivb_, #10
00dbc     CC 00 A0 FD | 	call	#unsdivide_
00dc0     85 A7 02 F6 | 	mov	local31, muldiva_
00dc4     86 97 02 F6 | 	mov	local23, muldivb_
00dc8     0A A6 1E F2 | 	cmp	local31, #10 wcz
00dcc     30 A6 06 C1 |  if_b	add	local31, #48
00dd0     37 A6 06 31 |  if_ae	add	local31, #55
00dd4     4C A9 02 F6 | 	mov	local32, local24
00dd8     51 A9 02 F1 | 	add	local32, local29
00ddc     54 A7 42 FC | 	wrbyte	local31, local32
00de0     C4 FF 9F FD | 	jmp	#LR__0007
00de4                 | LR__0008
00de4                 | LR__0009
00de4     51 2B 02 F6 | 	mov	result1, local29
00de8     15 5F 02 F6 | 	mov	arg02, result1
00dec     4A 5D 02 F6 | 	mov	arg01, local22
00df0     BC 51 B0 FD | 	call	#__system___string_concat
00df4     15 AB 02 F6 | 	mov	local33, result1
00df8     13 5C 06 F6 | 	mov	arg01, #19
00dfc     40 00 00 FF 
00e00     24 5F 06 F6 | 	mov	arg02, ##@LR__0450
00e04     14 5A B0 FD | 	call	#__system__String_S
00e08     15 5F 02 F6 | 	mov	arg02, result1
00e0c     55 5D 02 F6 | 	mov	arg01, local33
00e10     9C 51 B0 FD | 	call	#__system___string_concat
00e14     48 2B 62 FC | 	wrlong	result1, local20
00e18     01 92 06 F1 | 	add	local21, #1
00e1c     04 90 06 F1 | 	add	local20, #4
00e20     20 92 5E F2 | 	cmps	local21, #32 wcz
00e24     08 FF 9F CD |  if_b	jmp	#LR__0003
00e28                 | ' for i=1 to num
00e28     01 92 06 F6 | 	mov	local21, #1
00e2c     01 8E 06 F1 | 	add	local19, #1
00e30     46 AD 02 F6 | 	mov	local34, local18
00e34     14 AC 06 F1 | 	add	local34, #20
00e38     00 AE 06 F6 | 	mov	local35, #0
00e3c     04 00 00 FF 
00e40     50 0E 06 F1 | 	add	objptr, ##2128
00e44     07 B1 02 F6 | 	mov	local36, objptr
00e48     14 8C 06 F1 | 	add	local18, #20
00e4c     00 B2 06 F6 | 	mov	local37, #0
00e50     04 00 00 FF 
00e54     50 0E 86 F1 | 	sub	objptr, ##2128
00e58                 | LR__0010
00e58     47 93 5A F2 | 	cmps	local21, local19 wcz
00e5c     0C 07 90 3D |  if_ae	jmp	#LR__0015
00e60     56 B5 02 F6 | 	mov	local38, local34
00e64     57 B5 02 F1 | 	add	local38, local35
00e68     00 B6 06 F6 | 	mov	local39, #0
00e6c                 | LR__0011
00e6c     58 5D 02 F6 | 	mov	arg01, local36
00e70     F0 F9 BF FD | 	call	#_addr
00e74                 | ' asm
00e74     15 B9 02 FB | 	rdlong	local40, result1
00e78                 | ' return r
00e78     04 00 00 FF 
00e7c     F8 0E 06 F1 | 	add	objptr, ##2296
00e80     07 B9 62 FC | 	wrlong	local40, objptr
00e84     5A 5D 02 F6 | 	mov	arg01, local38
00e88     5B 5D 02 F1 | 	add	arg01, local39
00e8c                 | ' asm
00e8c     2E 2B C2 FA | 	rdbyte	result1, arg01
00e90                 | ' return r
00e90     15 95 02 F6 | 	mov	local22, result1
00e94     07 94 46 F7 | 	zerox	local22, #7
00e98     04 0E 06 F1 | 	add	objptr, #4
00e9c     07 95 62 FC | 	wrlong	local22, objptr
00ea0                 | '     a=lpeek(addr(sn$(i)))
00ea0                 | '     b=(peek(ma+20+30*(i-1)+j))
00ea0                 | '     if b>=32 then poke a+j,b
00ea0     04 00 00 FF 
00ea4     FC 0E 86 F1 | 	sub	objptr, ##2300
00ea8     20 94 5E F2 | 	cmps	local22, #32 wcz
00eac     24 00 90 CD |  if_b	jmp	#LR__0012
00eb0     04 00 00 FF 
00eb4     F8 0E 06 F1 | 	add	objptr, ##2296
00eb8     07 5D 02 FB | 	rdlong	arg01, objptr
00ebc     5B 5D 02 F1 | 	add	arg01, local39
00ec0     04 0E 06 F1 | 	add	objptr, #4
00ec4     07 5F 02 FB | 	rdlong	arg02, objptr
00ec8     04 00 00 FF 
00ecc     FC 0E 86 F1 | 	sub	objptr, ##2300
00ed0                 | ' asm
00ed0     2E 5F 42 FC | 	wrbyte	arg02, arg01
00ed4                 | LR__0012
00ed4     01 B6 06 F1 | 	add	local39, #1
00ed8     16 B6 5E F2 | 	cmps	local39, #22 wcz
00edc     8C FF 9F CD |  if_b	jmp	#LR__0011
00ee0     46 BB 02 F6 | 	mov	local41, local18
00ee4     59 BB 02 F1 | 	add	local41, local37
00ee8     5D 5D 02 F6 | 	mov	arg01, local41
00eec     16 5C 06 F1 | 	add	arg01, #22
00ef0     5D BD 02 F6 | 	mov	local42, local41
00ef4     17 BC 06 F1 | 	add	local42, #23
00ef8                 | ' asm
00ef8     2E AB C2 FA | 	rdbyte	local33, arg01
00efc                 | ' return r
00efc     07 AA 46 F7 | 	zerox	local33, #7
00f00     08 AA 66 F0 | 	shl	local33, #8
00f04                 | ' asm
00f04     5E BF C2 FA | 	rdbyte	local43, local42
00f08                 | ' return r
00f08     07 BE 46 F7 | 	zerox	local43, #7
00f0c     5F AB 02 F1 | 	add	local33, local43
00f10     01 AA 66 F0 | 	shl	local33, #1
00f14     04 00 00 FF 
00f18     00 0F 06 F1 | 	add	objptr, ##2304
00f1c     07 AB 62 FC | 	wrlong	local33, objptr
00f20     5D 5D 02 F6 | 	mov	arg01, local41
00f24     1A 5C 06 F1 | 	add	arg01, #26
00f28     5D C1 02 F6 | 	mov	local44, local41
00f2c     1B C0 06 F1 | 	add	local44, #27
00f30                 | ' asm
00f30     2E AB C2 FA | 	rdbyte	local33, arg01
00f34                 | ' return r
00f34     07 AA 46 F7 | 	zerox	local33, #7
00f38     08 AA 66 F0 | 	shl	local33, #8
00f3c                 | ' asm
00f3c     60 BF C2 FA | 	rdbyte	local43, local44
00f40                 | ' return r
00f40     07 BE 46 F7 | 	zerox	local43, #7
00f44     5F AB 02 F1 | 	add	local33, local43
00f48     01 AA 66 F0 | 	shl	local33, #1
00f4c     04 0E 06 F1 | 	add	objptr, #4
00f50     07 AB 62 FC | 	wrlong	local33, objptr
00f54     5D 5D 02 F6 | 	mov	arg01, local41
00f58     1C 5C 06 F1 | 	add	arg01, #28
00f5c     5D C3 02 F6 | 	mov	local45, local41
00f60     1D C2 06 F1 | 	add	local45, #29
00f64                 | ' asm
00f64     2E AB C2 FA | 	rdbyte	local33, arg01
00f68                 | ' return r
00f68     07 AA 46 F7 | 	zerox	local33, #7
00f6c     08 AA 66 F0 | 	shl	local33, #8
00f70                 | ' asm
00f70     61 BF C2 FA | 	rdbyte	local43, local45
00f74                 | ' return r
00f74     07 BE 46 F7 | 	zerox	local43, #7
00f78     5F AB 02 F1 | 	add	local33, local43
00f7c     01 AA 66 F0 | 	shl	local33, #1
00f80     04 0E 06 F1 | 	add	objptr, #4
00f84     07 AB 62 FC | 	wrlong	local33, objptr
00f88     5D 5D 02 F6 | 	mov	arg01, local41
00f8c     18 5C 06 F1 | 	add	arg01, #24
00f90                 | ' asm
00f90     2E 95 C2 FA | 	rdbyte	local22, arg01
00f94                 | ' return r
00f94     07 94 46 F7 | 	zerox	local22, #7
00f98     04 0E 06 F1 | 	add	objptr, #4
00f9c     07 95 62 FC | 	wrlong	local22, objptr
00fa0     19 BA 06 F1 | 	add	local41, #25
00fa4                 | ' asm
00fa4     5D 2B C2 FA | 	rdbyte	result1, local41
00fa8                 | ' return r
00fa8     15 95 02 F6 | 	mov	local22, result1
00fac     07 94 46 F7 | 	zerox	local22, #7
00fb0     04 0E 06 F1 | 	add	objptr, #4
00fb4     07 95 62 FC | 	wrlong	local22, objptr
00fb8     04 00 00 FF 
00fbc     10 0F 86 F1 | 	sub	objptr, ##2320
00fc0                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00fc0                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00fc0                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00fc0                 | ' ft=peek(ma+20+30*(i-1)+24)
00fc0                 | ' vl=peek(ma+20+30*(i-1)+25)
00fc0                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00fc0     10 92 5E F2 | 	cmps	local21, #16 wcz
00fc4     C4 02 90 3D |  if_ae	jmp	#LR__0013
00fc8     05 C4 06 F6 | 	mov	local46, #5
00fcc     49 C5 02 F1 | 	add	local46, local21
00fd0     62 5F 02 F6 | 	mov	arg02, local46
00fd4                 | ' 
00fd4                 | ' ''---------- Set the (x,y) position of cursor
00fd4                 | ' 
00fd4                 | ' cursor_x:=x
00fd4     34 0E 06 F1 | 	add	objptr, #52
00fd8     07 03 48 FC | 	wrbyte	#1, objptr
00fdc                 | ' cursor_y:=y
00fdc     01 0E 06 F1 | 	add	objptr, #1
00fe0     07 5F 42 FC | 	wrbyte	arg02, objptr
00fe4     49 C7 02 F6 | 	mov	local47, local21
00fe8     02 C6 66 F0 | 	shl	local47, #2
00fec     04 00 00 FF 
00ff0     17 0E 06 F1 | 	add	objptr, ##2071
00ff4     07 C7 02 F1 | 	add	local47, objptr
00ff8     00 5C 06 F6 | 	mov	arg01, #0
00ffc     04 00 00 FF 
01000     4C 0E 86 F1 | 	sub	objptr, ##2124
01004     B4 65 B0 FD | 	call	#__system___getiolock_0145
01008     15 5D 02 F6 | 	mov	arg01, result1
0100c     68 4F B0 FD | 	call	#__system___lockmem
01010     00 2A 06 F6 | 	mov	result1, #0
01014     63 5F 02 FB | 	rdlong	arg02, local47
01018     00 5C 06 F6 | 	mov	arg01, #0
0101c     00 60 06 F6 | 	mov	arg03, #0
01020     EC 52 B0 FD | 	call	#__system___basic_print_string
01024     00 5C 06 F6 | 	mov	arg01, #0
01028     0A 5E 06 F6 | 	mov	arg02, #10
0102c     00 60 06 F6 | 	mov	arg03, #0
01030     90 52 B0 FD | 	call	#__system___basic_print_char
01034     01 2A 06 F6 | 	mov	result1, #1
01038     00 5C 06 F6 | 	mov	arg01, #0
0103c     7C 65 B0 FD | 	call	#__system___getiolock_0145
01040     15 01 68 FC | 	wrlong	#0, result1
01044     00 2A 06 F6 | 	mov	result1, #0
01048     62 5F 02 F6 | 	mov	arg02, local46
0104c                 | ' 
0104c                 | ' ''---------- Set the (x,y) position of cursor
0104c                 | ' 
0104c                 | ' cursor_x:=x
0104c     34 0E 06 F1 | 	add	objptr, #52
01050     07 31 48 FC | 	wrbyte	#24, objptr
01054                 | ' cursor_y:=y
01054     01 0E 06 F1 | 	add	objptr, #1
01058     07 5F 42 FC | 	wrbyte	arg02, objptr
0105c     35 0E 86 F1 | 	sub	objptr, #53
01060     00 5C 06 F6 | 	mov	arg01, #0
01064     54 65 B0 FD | 	call	#__system___getiolock_0145
01068     15 5D 02 F6 | 	mov	arg01, result1
0106c     08 4F B0 FD | 	call	#__system___lockmem
01070     00 2A 06 F6 | 	mov	result1, #0
01074     04 00 00 FF 
01078     00 0F 06 F1 | 	add	objptr, ##2304
0107c     07 5F 02 FB | 	rdlong	arg02, objptr
01080     04 00 00 FF 
01084     00 0F 86 F1 | 	sub	objptr, ##2304
01088     00 5C 06 F6 | 	mov	arg01, #0
0108c     00 60 06 F6 | 	mov	arg03, #0
01090     0A 62 06 F6 | 	mov	arg04, #10
01094     C0 52 B0 FD | 	call	#__system___basic_print_integer
01098     00 5C 06 F6 | 	mov	arg01, #0
0109c     0A 5E 06 F6 | 	mov	arg02, #10
010a0     00 60 06 F6 | 	mov	arg03, #0
010a4     1C 52 B0 FD | 	call	#__system___basic_print_char
010a8     01 2A 06 F6 | 	mov	result1, #1
010ac     00 5C 06 F6 | 	mov	arg01, #0
010b0     08 65 B0 FD | 	call	#__system___getiolock_0145
010b4     15 01 68 FC | 	wrlong	#0, result1
010b8     00 2A 06 F6 | 	mov	result1, #0
010bc     62 5F 02 F6 | 	mov	arg02, local46
010c0                 | ' 
010c0                 | ' ''---------- Set the (x,y) position of cursor
010c0                 | ' 
010c0                 | ' cursor_x:=x
010c0     34 0E 06 F1 | 	add	objptr, #52
010c4     07 3F 48 FC | 	wrbyte	#31, objptr
010c8                 | ' cursor_y:=y
010c8     01 0E 06 F1 | 	add	objptr, #1
010cc     07 5F 42 FC | 	wrbyte	arg02, objptr
010d0     35 0E 86 F1 | 	sub	objptr, #53
010d4     00 5C 06 F6 | 	mov	arg01, #0
010d8     E0 64 B0 FD | 	call	#__system___getiolock_0145
010dc     15 5D 02 F6 | 	mov	arg01, result1
010e0     94 4E B0 FD | 	call	#__system___lockmem
010e4     00 2A 06 F6 | 	mov	result1, #0
010e8     04 00 00 FF 
010ec     0C 0F 06 F1 | 	add	objptr, ##2316
010f0     07 5F 02 FB | 	rdlong	arg02, objptr
010f4     04 00 00 FF 
010f8     0C 0F 86 F1 | 	sub	objptr, ##2316
010fc     00 5C 06 F6 | 	mov	arg01, #0
01100     00 60 06 F6 | 	mov	arg03, #0
01104     0A 62 06 F6 | 	mov	arg04, #10
01108     4C 52 B0 FD | 	call	#__system___basic_print_integer
0110c     00 5C 06 F6 | 	mov	arg01, #0
01110     0A 5E 06 F6 | 	mov	arg02, #10
01114     00 60 06 F6 | 	mov	arg03, #0
01118     A8 51 B0 FD | 	call	#__system___basic_print_char
0111c     01 2A 06 F6 | 	mov	result1, #1
01120     00 5C 06 F6 | 	mov	arg01, #0
01124     94 64 B0 FD | 	call	#__system___getiolock_0145
01128     15 01 68 FC | 	wrlong	#0, result1
0112c     00 2A 06 F6 | 	mov	result1, #0
01130     62 5F 02 F6 | 	mov	arg02, local46
01134                 | ' 
01134                 | ' ''---------- Set the (x,y) position of cursor
01134                 | ' 
01134                 | ' cursor_x:=x
01134     34 0E 06 F1 | 	add	objptr, #52
01138     07 45 48 FC | 	wrbyte	#34, objptr
0113c                 | ' cursor_y:=y
0113c     01 0E 06 F1 | 	add	objptr, #1
01140     07 5F 42 FC | 	wrbyte	arg02, objptr
01144     35 0E 86 F1 | 	sub	objptr, #53
01148     00 5C 06 F6 | 	mov	arg01, #0
0114c     6C 64 B0 FD | 	call	#__system___getiolock_0145
01150     15 5D 02 F6 | 	mov	arg01, result1
01154     20 4E B0 FD | 	call	#__system___lockmem
01158     00 2A 06 F6 | 	mov	result1, #0
0115c     04 00 00 FF 
01160     10 0F 06 F1 | 	add	objptr, ##2320
01164     07 5F 02 FB | 	rdlong	arg02, objptr
01168     04 00 00 FF 
0116c     10 0F 86 F1 | 	sub	objptr, ##2320
01170     00 5C 06 F6 | 	mov	arg01, #0
01174     00 60 06 F6 | 	mov	arg03, #0
01178     0A 62 06 F6 | 	mov	arg04, #10
0117c     D8 51 B0 FD | 	call	#__system___basic_print_integer
01180     00 5C 06 F6 | 	mov	arg01, #0
01184     0A 5E 06 F6 | 	mov	arg02, #10
01188     00 60 06 F6 | 	mov	arg03, #0
0118c     34 51 B0 FD | 	call	#__system___basic_print_char
01190     01 2A 06 F6 | 	mov	result1, #1
01194     00 5C 06 F6 | 	mov	arg01, #0
01198     20 64 B0 FD | 	call	#__system___getiolock_0145
0119c     15 01 68 FC | 	wrlong	#0, result1
011a0     00 2A 06 F6 | 	mov	result1, #0
011a4     62 5F 02 F6 | 	mov	arg02, local46
011a8                 | ' 
011a8                 | ' ''---------- Set the (x,y) position of cursor
011a8                 | ' 
011a8                 | ' cursor_x:=x
011a8     34 0E 06 F1 | 	add	objptr, #52
011ac     07 4B 48 FC | 	wrbyte	#37, objptr
011b0                 | ' cursor_y:=y
011b0     01 0E 06 F1 | 	add	objptr, #1
011b4     07 5F 42 FC | 	wrbyte	arg02, objptr
011b8     35 0E 86 F1 | 	sub	objptr, #53
011bc     00 5C 06 F6 | 	mov	arg01, #0
011c0     F8 63 B0 FD | 	call	#__system___getiolock_0145
011c4     15 5D 02 F6 | 	mov	arg01, result1
011c8     AC 4D B0 FD | 	call	#__system___lockmem
011cc     00 2A 06 F6 | 	mov	result1, #0
011d0     04 00 00 FF 
011d4     04 0F 06 F1 | 	add	objptr, ##2308
011d8     07 5F 02 FB | 	rdlong	arg02, objptr
011dc     04 00 00 FF 
011e0     04 0F 86 F1 | 	sub	objptr, ##2308
011e4     00 5C 06 F6 | 	mov	arg01, #0
011e8     00 60 06 F6 | 	mov	arg03, #0
011ec     0A 62 06 F6 | 	mov	arg04, #10
011f0     64 51 B0 FD | 	call	#__system___basic_print_integer
011f4     00 5C 06 F6 | 	mov	arg01, #0
011f8     0A 5E 06 F6 | 	mov	arg02, #10
011fc     00 60 06 F6 | 	mov	arg03, #0
01200     C0 50 B0 FD | 	call	#__system___basic_print_char
01204     01 2A 06 F6 | 	mov	result1, #1
01208     00 5C 06 F6 | 	mov	arg01, #0
0120c     AC 63 B0 FD | 	call	#__system___getiolock_0145
01210     15 01 68 FC | 	wrlong	#0, result1
01214     00 2A 06 F6 | 	mov	result1, #0
01218     62 5F 02 F6 | 	mov	arg02, local46
0121c                 | ' 
0121c                 | ' ''---------- Set the (x,y) position of cursor
0121c                 | ' 
0121c                 | ' cursor_x:=x
0121c     34 0E 06 F1 | 	add	objptr, #52
01220     07 57 48 FC | 	wrbyte	#43, objptr
01224                 | ' cursor_y:=y
01224     01 0E 06 F1 | 	add	objptr, #1
01228     07 5F 42 FC | 	wrbyte	arg02, objptr
0122c     35 0E 86 F1 | 	sub	objptr, #53
01230     00 5C 06 F6 | 	mov	arg01, #0
01234     84 63 B0 FD | 	call	#__system___getiolock_0145
01238     15 5D 02 F6 | 	mov	arg01, result1
0123c     38 4D B0 FD | 	call	#__system___lockmem
01240     00 2A 06 F6 | 	mov	result1, #0
01244     04 00 00 FF 
01248     08 0F 06 F1 | 	add	objptr, ##2312
0124c     07 5F 02 FB | 	rdlong	arg02, objptr
01250     04 00 00 FF 
01254     08 0F 86 F1 | 	sub	objptr, ##2312
01258     00 5C 06 F6 | 	mov	arg01, #0
0125c     00 60 06 F6 | 	mov	arg03, #0
01260     0A 62 06 F6 | 	mov	arg04, #10
01264     F0 50 B0 FD | 	call	#__system___basic_print_integer
01268     00 5C 06 F6 | 	mov	arg01, #0
0126c     0A 5E 06 F6 | 	mov	arg02, #10
01270     00 60 06 F6 | 	mov	arg03, #0
01274     4C 50 B0 FD | 	call	#__system___basic_print_char
01278     01 2A 06 F6 | 	mov	result1, #1
0127c     00 5C 06 F6 | 	mov	arg01, #0
01280     38 63 B0 FD | 	call	#__system___getiolock_0145
01284     15 01 68 FC | 	wrlong	#0, result1
01288     00 2A 06 F6 | 	mov	result1, #0
0128c                 | LR__0013
0128c                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
0128c     10 92 5E F2 | 	cmps	local21, #16 wcz
01290     C4 02 90 CD |  if_b	jmp	#LR__0014
01294     49 C9 02 F6 | 	mov	local48, local21
01298     0B C8 86 F1 | 	sub	local48, #11
0129c     64 5F 02 F6 | 	mov	arg02, local48
012a0                 | ' 
012a0                 | ' ''---------- Set the (x,y) position of cursor
012a0                 | ' 
012a0                 | ' cursor_x:=x
012a0     34 0E 06 F1 | 	add	objptr, #52
012a4     07 73 48 FC | 	wrbyte	#57, objptr
012a8                 | ' cursor_y:=y
012a8     01 0E 06 F1 | 	add	objptr, #1
012ac     07 5F 42 FC | 	wrbyte	arg02, objptr
012b0     49 CB 02 F6 | 	mov	local49, local21
012b4     02 CA 66 F0 | 	shl	local49, #2
012b8     04 00 00 FF 
012bc     17 0E 06 F1 | 	add	objptr, ##2071
012c0     07 CB 02 F1 | 	add	local49, objptr
012c4     00 5C 06 F6 | 	mov	arg01, #0
012c8     04 00 00 FF 
012cc     4C 0E 86 F1 | 	sub	objptr, ##2124
012d0     E8 62 B0 FD | 	call	#__system___getiolock_0145
012d4     15 5D 02 F6 | 	mov	arg01, result1
012d8     9C 4C B0 FD | 	call	#__system___lockmem
012dc     00 2A 06 F6 | 	mov	result1, #0
012e0     65 5F 02 FB | 	rdlong	arg02, local49
012e4     00 5C 06 F6 | 	mov	arg01, #0
012e8     00 60 06 F6 | 	mov	arg03, #0
012ec     20 50 B0 FD | 	call	#__system___basic_print_string
012f0     00 5C 06 F6 | 	mov	arg01, #0
012f4     0A 5E 06 F6 | 	mov	arg02, #10
012f8     00 60 06 F6 | 	mov	arg03, #0
012fc     C4 4F B0 FD | 	call	#__system___basic_print_char
01300     01 2A 06 F6 | 	mov	result1, #1
01304     00 5C 06 F6 | 	mov	arg01, #0
01308     B0 62 B0 FD | 	call	#__system___getiolock_0145
0130c     15 01 68 FC | 	wrlong	#0, result1
01310     00 2A 06 F6 | 	mov	result1, #0
01314     64 5F 02 F6 | 	mov	arg02, local48
01318                 | ' 
01318                 | ' ''---------- Set the (x,y) position of cursor
01318                 | ' 
01318                 | ' cursor_x:=x
01318     34 0E 06 F1 | 	add	objptr, #52
0131c     07 A1 48 FC | 	wrbyte	#80, objptr
01320                 | ' cursor_y:=y
01320     01 0E 06 F1 | 	add	objptr, #1
01324     07 5F 42 FC | 	wrbyte	arg02, objptr
01328     35 0E 86 F1 | 	sub	objptr, #53
0132c     00 5C 06 F6 | 	mov	arg01, #0
01330     88 62 B0 FD | 	call	#__system___getiolock_0145
01334     15 5D 02 F6 | 	mov	arg01, result1
01338     3C 4C B0 FD | 	call	#__system___lockmem
0133c     00 2A 06 F6 | 	mov	result1, #0
01340     04 00 00 FF 
01344     00 0F 06 F1 | 	add	objptr, ##2304
01348     07 5F 02 FB | 	rdlong	arg02, objptr
0134c     04 00 00 FF 
01350     00 0F 86 F1 | 	sub	objptr, ##2304
01354     00 5C 06 F6 | 	mov	arg01, #0
01358     00 60 06 F6 | 	mov	arg03, #0
0135c     0A 62 06 F6 | 	mov	arg04, #10
01360     F4 4F B0 FD | 	call	#__system___basic_print_integer
01364     00 5C 06 F6 | 	mov	arg01, #0
01368     0A 5E 06 F6 | 	mov	arg02, #10
0136c     00 60 06 F6 | 	mov	arg03, #0
01370     50 4F B0 FD | 	call	#__system___basic_print_char
01374     01 2A 06 F6 | 	mov	result1, #1
01378     00 5C 06 F6 | 	mov	arg01, #0
0137c     3C 62 B0 FD | 	call	#__system___getiolock_0145
01380     15 01 68 FC | 	wrlong	#0, result1
01384     00 2A 06 F6 | 	mov	result1, #0
01388     64 5F 02 F6 | 	mov	arg02, local48
0138c                 | ' 
0138c                 | ' ''---------- Set the (x,y) position of cursor
0138c                 | ' 
0138c                 | ' cursor_x:=x
0138c     34 0E 06 F1 | 	add	objptr, #52
01390     07 AF 48 FC | 	wrbyte	#87, objptr
01394                 | ' cursor_y:=y
01394     01 0E 06 F1 | 	add	objptr, #1
01398     07 5F 42 FC | 	wrbyte	arg02, objptr
0139c     35 0E 86 F1 | 	sub	objptr, #53
013a0     00 5C 06 F6 | 	mov	arg01, #0
013a4     14 62 B0 FD | 	call	#__system___getiolock_0145
013a8     15 5D 02 F6 | 	mov	arg01, result1
013ac     C8 4B B0 FD | 	call	#__system___lockmem
013b0     00 2A 06 F6 | 	mov	result1, #0
013b4     04 00 00 FF 
013b8     0C 0F 06 F1 | 	add	objptr, ##2316
013bc     07 5F 02 FB | 	rdlong	arg02, objptr
013c0     04 00 00 FF 
013c4     0C 0F 86 F1 | 	sub	objptr, ##2316
013c8     00 5C 06 F6 | 	mov	arg01, #0
013cc     00 60 06 F6 | 	mov	arg03, #0
013d0     0A 62 06 F6 | 	mov	arg04, #10
013d4     80 4F B0 FD | 	call	#__system___basic_print_integer
013d8     00 5C 06 F6 | 	mov	arg01, #0
013dc     0A 5E 06 F6 | 	mov	arg02, #10
013e0     00 60 06 F6 | 	mov	arg03, #0
013e4     DC 4E B0 FD | 	call	#__system___basic_print_char
013e8     01 2A 06 F6 | 	mov	result1, #1
013ec     00 5C 06 F6 | 	mov	arg01, #0
013f0     C8 61 B0 FD | 	call	#__system___getiolock_0145
013f4     15 01 68 FC | 	wrlong	#0, result1
013f8     00 2A 06 F6 | 	mov	result1, #0
013fc     64 5F 02 F6 | 	mov	arg02, local48
01400                 | ' 
01400                 | ' ''---------- Set the (x,y) position of cursor
01400                 | ' 
01400                 | ' cursor_x:=x
01400     34 0E 06 F1 | 	add	objptr, #52
01404     07 B5 48 FC | 	wrbyte	#90, objptr
01408                 | ' cursor_y:=y
01408     01 0E 06 F1 | 	add	objptr, #1
0140c     07 5F 42 FC | 	wrbyte	arg02, objptr
01410     35 0E 86 F1 | 	sub	objptr, #53
01414     00 5C 06 F6 | 	mov	arg01, #0
01418     A0 61 B0 FD | 	call	#__system___getiolock_0145
0141c     15 5D 02 F6 | 	mov	arg01, result1
01420     54 4B B0 FD | 	call	#__system___lockmem
01424     00 2A 06 F6 | 	mov	result1, #0
01428     04 00 00 FF 
0142c     10 0F 06 F1 | 	add	objptr, ##2320
01430     07 5F 02 FB | 	rdlong	arg02, objptr
01434     04 00 00 FF 
01438     10 0F 86 F1 | 	sub	objptr, ##2320
0143c     00 5C 06 F6 | 	mov	arg01, #0
01440     00 60 06 F6 | 	mov	arg03, #0
01444     0A 62 06 F6 | 	mov	arg04, #10
01448     0C 4F B0 FD | 	call	#__system___basic_print_integer
0144c     00 5C 06 F6 | 	mov	arg01, #0
01450     0A 5E 06 F6 | 	mov	arg02, #10
01454     00 60 06 F6 | 	mov	arg03, #0
01458     68 4E B0 FD | 	call	#__system___basic_print_char
0145c     01 2A 06 F6 | 	mov	result1, #1
01460     00 5C 06 F6 | 	mov	arg01, #0
01464     54 61 B0 FD | 	call	#__system___getiolock_0145
01468     15 01 68 FC | 	wrlong	#0, result1
0146c     00 2A 06 F6 | 	mov	result1, #0
01470     64 5F 02 F6 | 	mov	arg02, local48
01474                 | ' 
01474                 | ' ''---------- Set the (x,y) position of cursor
01474                 | ' 
01474                 | ' cursor_x:=x
01474     34 0E 06 F1 | 	add	objptr, #52
01478     07 BB 48 FC | 	wrbyte	#93, objptr
0147c                 | ' cursor_y:=y
0147c     01 0E 06 F1 | 	add	objptr, #1
01480     07 5F 42 FC | 	wrbyte	arg02, objptr
01484     35 0E 86 F1 | 	sub	objptr, #53
01488     00 5C 06 F6 | 	mov	arg01, #0
0148c     2C 61 B0 FD | 	call	#__system___getiolock_0145
01490     15 5D 02 F6 | 	mov	arg01, result1
01494     E0 4A B0 FD | 	call	#__system___lockmem
01498     00 2A 06 F6 | 	mov	result1, #0
0149c     04 00 00 FF 
014a0     04 0F 06 F1 | 	add	objptr, ##2308
014a4     07 5F 02 FB | 	rdlong	arg02, objptr
014a8     04 00 00 FF 
014ac     04 0F 86 F1 | 	sub	objptr, ##2308
014b0     00 5C 06 F6 | 	mov	arg01, #0
014b4     00 60 06 F6 | 	mov	arg03, #0
014b8     0A 62 06 F6 | 	mov	arg04, #10
014bc     98 4E B0 FD | 	call	#__system___basic_print_integer
014c0     00 5C 06 F6 | 	mov	arg01, #0
014c4     0A 5E 06 F6 | 	mov	arg02, #10
014c8     00 60 06 F6 | 	mov	arg03, #0
014cc     F4 4D B0 FD | 	call	#__system___basic_print_char
014d0     01 2A 06 F6 | 	mov	result1, #1
014d4     00 5C 06 F6 | 	mov	arg01, #0
014d8     E0 60 B0 FD | 	call	#__system___getiolock_0145
014dc     15 01 68 FC | 	wrlong	#0, result1
014e0     00 2A 06 F6 | 	mov	result1, #0
014e4     64 5F 02 F6 | 	mov	arg02, local48
014e8                 | ' 
014e8                 | ' ''---------- Set the (x,y) position of cursor
014e8                 | ' 
014e8                 | ' cursor_x:=x
014e8     34 0E 06 F1 | 	add	objptr, #52
014ec     07 C7 48 FC | 	wrbyte	#99, objptr
014f0                 | ' cursor_y:=y
014f0     01 0E 06 F1 | 	add	objptr, #1
014f4     07 5F 42 FC | 	wrbyte	arg02, objptr
014f8     35 0E 86 F1 | 	sub	objptr, #53
014fc     00 5C 06 F6 | 	mov	arg01, #0
01500     B8 60 B0 FD | 	call	#__system___getiolock_0145
01504     15 5D 02 F6 | 	mov	arg01, result1
01508     6C 4A B0 FD | 	call	#__system___lockmem
0150c     00 2A 06 F6 | 	mov	result1, #0
01510     04 00 00 FF 
01514     08 0F 06 F1 | 	add	objptr, ##2312
01518     07 5F 02 FB | 	rdlong	arg02, objptr
0151c     04 00 00 FF 
01520     08 0F 86 F1 | 	sub	objptr, ##2312
01524     00 5C 06 F6 | 	mov	arg01, #0
01528     00 60 06 F6 | 	mov	arg03, #0
0152c     0A 62 06 F6 | 	mov	arg04, #10
01530     24 4E B0 FD | 	call	#__system___basic_print_integer
01534     00 5C 06 F6 | 	mov	arg01, #0
01538     0A 5E 06 F6 | 	mov	arg02, #10
0153c     00 60 06 F6 | 	mov	arg03, #0
01540     80 4D B0 FD | 	call	#__system___basic_print_char
01544     01 2A 06 F6 | 	mov	result1, #1
01548     00 5C 06 F6 | 	mov	arg01, #0
0154c     6C 60 B0 FD | 	call	#__system___getiolock_0145
01550     15 01 68 FC | 	wrlong	#0, result1
01554     00 2A 06 F6 | 	mov	result1, #0
01558                 | LR__0014
01558     01 92 06 F1 | 	add	local21, #1
0155c     1E AE 06 F1 | 	add	local35, #30
01560     04 B0 06 F1 | 	add	local36, #4
01564     1E B2 06 F1 | 	add	local37, #30
01568     EC F8 9F FD | 	jmp	#LR__0010
0156c                 | LR__0015
0156c                 | ' print
0156c     00 5C 06 F6 | 	mov	arg01, #0
01570     48 60 B0 FD | 	call	#__system___getiolock_0145
01574     15 5D 02 F6 | 	mov	arg01, result1
01578     FC 49 B0 FD | 	call	#__system___lockmem
0157c     00 2A 06 F6 | 	mov	result1, #0
01580     00 5C 06 F6 | 	mov	arg01, #0
01584     0A 5E 06 F6 | 	mov	arg02, #10
01588     00 60 06 F6 | 	mov	arg03, #0
0158c     34 4D B0 FD | 	call	#__system___basic_print_char
01590     01 2A 06 F6 | 	mov	result1, #1
01594     00 5C 06 F6 | 	mov	arg01, #0
01598     20 60 B0 FD | 	call	#__system___getiolock_0145
0159c     15 01 68 FC | 	wrlong	#0, result1
015a0     03 00 00 FF 
015a4     2C 0F 06 F1 | 	add	objptr, ##1836
015a8     03 00 00 FF 
015ac     E4 16 06 F1 | 	add	ptr__audio012_spin2_dat__, ##1764
015b0                 | ' 
015b0                 | ' 
015b0                 | ' channel1[0]:=@null
015b0     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
015b4                 | ' channel1[1]:=0
015b4     04 0E 06 F1 | 	add	objptr, #4
015b8     07 01 68 FC | 	wrlong	#0, objptr
015bc                 | ' channel1[2]:=0
015bc     04 0E 06 F1 | 	add	objptr, #4
015c0     07 01 68 FC | 	wrlong	#0, objptr
015c4                 | ' channel1[3]:=2
015c4     04 0E 06 F1 | 	add	objptr, #4
015c8     07 05 68 FC | 	wrlong	#2, objptr
015cc                 | ' channel1[4]:=0
015cc     04 0E 06 F1 | 	add	objptr, #4
015d0     07 01 68 FC | 	wrlong	#0, objptr
015d4                 | ' channel1[5]:=8192
015d4     04 0E 06 F1 | 	add	objptr, #4
015d8     10 00 80 FF 
015dc     07 01 68 FC | 	wrlong	##8192, objptr
015e0                 | ' channel1[6]:=101
015e0     04 0E 06 F1 | 	add	objptr, #4
015e4     07 CB 68 FC | 	wrlong	#101, objptr
015e8                 | ' channel1[7]:=2
015e8     04 0E 06 F1 | 	add	objptr, #4
015ec     07 05 68 FC | 	wrlong	#2, objptr
015f0                 | ' 
015f0                 | ' channel2[0]:=@null
015f0     08 0E 06 F1 | 	add	objptr, #8
015f4     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
015f8                 | ' channel2[1]:=0
015f8     04 0E 06 F1 | 	add	objptr, #4
015fc     07 01 68 FC | 	wrlong	#0, objptr
01600                 | ' channel2[2]:=0
01600     04 0E 06 F1 | 	add	objptr, #4
01604     07 01 68 FC | 	wrlong	#0, objptr
01608                 | ' channel2[3]:=2
01608     04 0E 06 F1 | 	add	objptr, #4
0160c     07 05 68 FC | 	wrlong	#2, objptr
01610                 | ' channel2[4]:=0
01610     04 0E 06 F1 | 	add	objptr, #4
01614     07 01 68 FC | 	wrlong	#0, objptr
01618                 | ' channel2[5]:=8192
01618     04 0E 06 F1 | 	add	objptr, #4
0161c     10 00 80 FF 
01620     07 01 68 FC | 	wrlong	##8192, objptr
01624                 | ' channel2[6]:=103
01624     04 0E 06 F1 | 	add	objptr, #4
01628     07 CF 68 FC | 	wrlong	#103, objptr
0162c                 | ' channel2[7]:=2
0162c     04 0E 06 F1 | 	add	objptr, #4
01630     07 05 68 FC | 	wrlong	#2, objptr
01634                 | ' 
01634                 | ' channel3[0]:=@null
01634     08 0E 06 F1 | 	add	objptr, #8
01638     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
0163c                 | ' channel3[1]:=0
0163c     04 0E 06 F1 | 	add	objptr, #4
01640     07 01 68 FC | 	wrlong	#0, objptr
01644                 | ' channel3[2]:=0
01644     04 0E 06 F1 | 	add	objptr, #4
01648     07 01 68 FC | 	wrlong	#0, objptr
0164c                 | ' channel3[3]:=2
0164c     04 0E 06 F1 | 	add	objptr, #4
01650     07 05 68 FC | 	wrlong	#2, objptr
01654                 | ' channel3[4]:=0
01654     04 0E 06 F1 | 	add	objptr, #4
01658     07 01 68 FC | 	wrlong	#0, objptr
0165c                 | ' channel3[5]:=8192
0165c     04 0E 06 F1 | 	add	objptr, #4
01660     10 00 80 FF 
01664     07 01 68 FC | 	wrlong	##8192, objptr
01668                 | ' channel3[6]:=107
01668     04 0E 06 F1 | 	add	objptr, #4
0166c     07 D7 68 FC | 	wrlong	#107, objptr
01670                 | ' channel3[7]:=2
01670     04 0E 06 F1 | 	add	objptr, #4
01674     07 05 68 FC | 	wrlong	#2, objptr
01678                 | ' 
01678                 | ' channel4[0]:=@null
01678     08 0E 06 F1 | 	add	objptr, #8
0167c     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
01680                 | ' channel4[1]:=0
01680     04 0E 06 F1 | 	add	objptr, #4
01684     07 01 68 FC | 	wrlong	#0, objptr
01688                 | ' channel4[2]:=0
01688     04 0E 06 F1 | 	add	objptr, #4
0168c     07 01 68 FC | 	wrlong	#0, objptr
01690                 | ' channel4[3]:=2
01690     04 0E 06 F1 | 	add	objptr, #4
01694     07 05 68 FC | 	wrlong	#2, objptr
01698                 | ' channel4[4]:=0
01698     04 0E 06 F1 | 	add	objptr, #4
0169c     07 01 68 FC | 	wrlong	#0, objptr
016a0                 | ' channel4[5]:=8192
016a0     04 0E 06 F1 | 	add	objptr, #4
016a4     10 00 80 FF 
016a8     07 01 68 FC | 	wrlong	##8192, objptr
016ac                 | ' channel4[6]:=109
016ac     04 0E 06 F1 | 	add	objptr, #4
016b0     07 DB 68 FC | 	wrlong	#109, objptr
016b4                 | ' channel4[7]:=2
016b4     04 0E 06 F1 | 	add	objptr, #4
016b8     07 05 68 FC | 	wrlong	#2, objptr
016bc                 | ' channel4[8]:=1
016bc     04 0E 06 F1 | 	add	objptr, #4
016c0     07 03 68 FC | 	wrlong	#1, objptr
016c4                 | ' 
016c4                 | ' channel5[0]:=@null
016c4     04 0E 06 F1 | 	add	objptr, #4
016c8     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
016cc                 | ' channel5[1]:=0
016cc     04 0E 06 F1 | 	add	objptr, #4
016d0     07 01 68 FC | 	wrlong	#0, objptr
016d4                 | ' channel5[2]:=0
016d4     04 0E 06 F1 | 	add	objptr, #4
016d8     07 01 68 FC | 	wrlong	#0, objptr
016dc                 | ' channel5[3]:=2
016dc     04 0E 06 F1 | 	add	objptr, #4
016e0     07 05 68 FC | 	wrlong	#2, objptr
016e4                 | ' channel5[4]:=0
016e4     04 0E 06 F1 | 	add	objptr, #4
016e8     07 01 68 FC | 	wrlong	#0, objptr
016ec                 | ' channel5[5]:=8192
016ec     04 0E 06 F1 | 	add	objptr, #4
016f0     10 00 80 FF 
016f4     07 01 68 FC | 	wrlong	##8192, objptr
016f8                 | ' channel5[6]:=113
016f8     04 0E 06 F1 | 	add	objptr, #4
016fc     07 E3 68 FC | 	wrlong	#113, objptr
01700                 | ' channel5[7]:=2
01700     04 0E 06 F1 | 	add	objptr, #4
01704     07 05 68 FC | 	wrlong	#2, objptr
01708                 | ' 
01708                 | ' channel6[0]:=@null
01708     08 0E 06 F1 | 	add	objptr, #8
0170c     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
01710                 | ' channel6[1]:=0
01710     04 0E 06 F1 | 	add	objptr, #4
01714     07 01 68 FC | 	wrlong	#0, objptr
01718                 | ' channel6[2]:=0
01718     04 0E 06 F1 | 	add	objptr, #4
0171c     07 01 68 FC | 	wrlong	#0, objptr
01720                 | ' channel6[3]:=2
01720     04 0E 06 F1 | 	add	objptr, #4
01724     07 05 68 FC | 	wrlong	#2, objptr
01728                 | ' channel6[4]:=0
01728     04 0E 06 F1 | 	add	objptr, #4
0172c     07 01 68 FC | 	wrlong	#0, objptr
01730                 | ' channel6[5]:=8192
01730     04 0E 06 F1 | 	add	objptr, #4
01734     10 00 80 FF 
01738     07 01 68 FC | 	wrlong	##8192, objptr
0173c                 | ' channel6[6]:=127
0173c     04 0E 06 F1 | 	add	objptr, #4
01740     07 FF 68 FC | 	wrlong	#127, objptr
01744                 | ' channel6[7]:=2
01744     04 0E 06 F1 | 	add	objptr, #4
01748     07 05 68 FC | 	wrlong	#2, objptr
0174c                 | ' 
0174c                 | ' channel7[0]:=@null
0174c     08 0E 06 F1 | 	add	objptr, #8
01750     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
01754                 | ' channel7[1]:=0
01754     04 0E 06 F1 | 	add	objptr, #4
01758     07 01 68 FC | 	wrlong	#0, objptr
0175c                 | ' channel7[2]:=0
0175c     04 0E 06 F1 | 	add	objptr, #4
01760     07 01 68 FC | 	wrlong	#0, objptr
01764                 | ' channel7[3]:=2
01764     04 0E 06 F1 | 	add	objptr, #4
01768     07 05 68 FC | 	wrlong	#2, objptr
0176c                 | ' channel7[4]:=0
0176c     04 0E 06 F1 | 	add	objptr, #4
01770     07 01 68 FC | 	wrlong	#0, objptr
01774                 | ' channel7[5]:=8192
01774     04 0E 06 F1 | 	add	objptr, #4
01778     10 00 80 FF 
0177c     07 01 68 FC | 	wrlong	##8192, objptr
01780                 | ' channel7[6]:=131
01780     04 0E 06 F1 | 	add	objptr, #4
01784     07 07 69 FC | 	wrlong	#131, objptr
01788                 | ' channel7[7]:=2
01788     04 0E 06 F1 | 	add	objptr, #4
0178c     07 05 68 FC | 	wrlong	#2, objptr
01790                 | ' 
01790                 | ' channel8[0]:=@null
01790     08 0E 06 F1 | 	add	objptr, #8
01794     07 17 62 FC | 	wrlong	ptr__audio012_spin2_dat__, objptr
01798                 | ' channel8[1]:=0
01798     04 0E 06 F1 | 	add	objptr, #4
0179c     07 01 68 FC | 	wrlong	#0, objptr
017a0                 | ' channel8[2]:=0
017a0     04 0E 06 F1 | 	add	objptr, #4
017a4     07 01 68 FC | 	wrlong	#0, objptr
017a8                 | ' channel8[3]:=2
017a8     04 0E 06 F1 | 	add	objptr, #4
017ac     07 05 68 FC | 	wrlong	#2, objptr
017b0                 | ' channel8[4]:=0
017b0     04 0E 06 F1 | 	add	objptr, #4
017b4     07 01 68 FC | 	wrlong	#0, objptr
017b8                 | ' channel8[5]:=8192
017b8     04 0E 06 F1 | 	add	objptr, #4
017bc     10 00 80 FF 
017c0     07 01 68 FC | 	wrlong	##8192, objptr
017c4                 | ' channel8[6]:=137
017c4     04 0E 06 F1 | 	add	objptr, #4
017c8     07 13 69 FC | 	wrlong	#137, objptr
017cc                 | ' channel8[7]:=2
017cc     04 0E 06 F1 | 	add	objptr, #4
017d0     07 05 68 FC | 	wrlong	#2, objptr
017d4                 | ' 
017d4                 | ' channel1[8]:=1
017d4     F8 0E 86 F1 | 	sub	objptr, #248
017d8     07 03 68 FC | 	wrlong	#1, objptr
017dc                 | ' channel2[8]:=1
017dc     24 0E 06 F1 | 	add	objptr, #36
017e0     07 03 68 FC | 	wrlong	#1, objptr
017e4                 | ' channel3[8]:=1
017e4     24 0E 06 F1 | 	add	objptr, #36
017e8     07 03 68 FC | 	wrlong	#1, objptr
017ec                 | ' channel4[8]:=1
017ec     24 0E 06 F1 | 	add	objptr, #36
017f0     07 03 68 FC | 	wrlong	#1, objptr
017f4                 | ' channel5[8]:=1
017f4     24 0E 06 F1 | 	add	objptr, #36
017f8     07 03 68 FC | 	wrlong	#1, objptr
017fc                 | ' channel6[8]:=1
017fc     24 0E 06 F1 | 	add	objptr, #36
01800     07 03 68 FC | 	wrlong	#1, objptr
01804                 | ' channel7[8]:=1
01804     24 0E 06 F1 | 	add	objptr, #36
01808     07 03 68 FC | 	wrlong	#1, objptr
0180c                 | ' channel8[8]:=1
0180c     24 0E 06 F1 | 	add	objptr, #36
01810     07 03 68 FC | 	wrlong	#1, objptr
01814     1C 0F 86 F1 | 	sub	objptr, #284
01818                 | ' 
01818                 | ' cog:=coginit(16,@audio,@channel1)
01818     03 00 00 FF 
0181c     E4 16 86 F1 | 	sub	ptr__audio012_spin2_dat__, ##1764
01820     0B 5F 02 F6 | 	mov	arg02, ptr__audio012_spin2_dat__
01824     07 61 02 F6 | 	mov	arg03, objptr
01828     10 5C 06 F6 | 	mov	arg01, #16
0182c     28 60 62 FD | 	setq	arg03
01830     2F 5D F2 FC | 	coginit	arg01, arg02 wc
01834     01 5C 66 C6 |  if_b	neg	arg01, #1
01838     2E 2B 02 F6 | 	mov	result1, arg01
0183c                 | ' return cog
0183c     B0 0F 06 F1 | 	add	objptr, #432
01840     07 01 68 FC | 	wrlong	#0, objptr
01844     04 0E 06 F1 | 	add	objptr, #4
01848     07 01 68 FC | 	wrlong	#0, objptr
0184c     04 0E 06 F1 | 	add	objptr, #4
01850     07 01 68 FC | 	wrlong	#0, objptr
01854     04 0E 06 F1 | 	add	objptr, #4
01858     07 01 68 FC | 	wrlong	#0, objptr
0185c     04 00 00 FF 
01860     E8 0E 86 F1 | 	sub	objptr, ##2280
01864                 | ' getinfo(ma,samples)
01864                 | ' 
01864                 | ' paula.start
01864                 | ' 
01864                 | ' old1=0 : old2=0 :old3=0 : old4=0
01864                 | ' 
01864                 | ' do
01864                 | LR__0016
01864                 | ' 
01864                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01864                 | ' 
01864                 | ' repeat i from 1 to amount
01864     01 CC 06 F6 | 	mov	local50, #1
01868                 | LR__0017
01868                 | '   repeat until vblank==0
01868                 | LR__0018
01868     40 0E 06 F1 | 	add	objptr, #64
0186c     07 CF 0A FB | 	rdlong	local51, objptr wz
01870     40 0E 86 F1 | 	sub	objptr, #64
01874     0C 00 90 AD |  if_e	jmp	#LR__0019
01878                 | '     waitus(100)
01878     64 5C 06 F6 | 	mov	arg01, #100
0187c     3C 49 B0 FD | 	call	#__system___waitus
01880     E4 FF 9F FD | 	jmp	#LR__0018
01884                 | LR__0019
01884                 | '   repeat until vblank==1
01884                 | LR__0020
01884     40 0E 06 F1 | 	add	objptr, #64
01888     07 CF 02 FB | 	rdlong	local51, objptr
0188c     40 0E 86 F1 | 	sub	objptr, #64
01890     01 CE 0E F2 | 	cmp	local51, #1 wz
01894     0C 00 90 AD |  if_e	jmp	#LR__0021
01898                 | '     waitus(100)
01898     64 5C 06 F6 | 	mov	arg01, #100
0189c     1C 49 B0 FD | 	call	#__system___waitus
018a0     E0 FF 9F FD | 	jmp	#LR__0020
018a4                 | LR__0021
018a4     F0 CD 6E FB | 	djnz	local50, #LR__0017
018a8     02 00 00 FF 
018ac     30 0F 06 F1 | 	add	objptr, ##1328
018b0     FC 28 B0 FD | 	call	#_trackerplayer_spin2_tick
018b4     A7 0E 06 F1 | 	add	objptr, #167
018b8     07 7D 02 FB | 	rdlong	local10, objptr
018bc     55 0F 06 F1 | 	add	objptr, #341
018c0     07 7D 62 FC | 	wrlong	local10, objptr
018c4     04 0E 06 F1 | 	add	objptr, #4
018c8     07 03 68 FC | 	wrlong	#1, objptr
018cc     45 0F 86 F1 | 	sub	objptr, #325
018d0     07 7D E2 FA | 	rdword	local10, objptr
018d4     08 0E 06 F1 | 	add	objptr, #8
018d8     07 D1 02 FB | 	rdlong	local52, objptr
018dc     68 7D 82 F1 | 	sub	local10, local52
018e0     41 0F 06 F1 | 	add	objptr, #321
018e4     07 7D 62 FC | 	wrlong	local10, objptr
018e8     49 0F 86 F1 | 	sub	objptr, #329
018ec     07 7D E2 FA | 	rdword	local10, objptr
018f0     4D 0F 06 F1 | 	add	objptr, #333
018f4     07 7D 62 FC | 	wrlong	local10, objptr
018f8     09 0F 86 F1 | 	sub	objptr, #265
018fc     07 D3 02 FB | 	rdlong	local53, objptr
01900     10 0E 06 F1 | 	add	objptr, #16
01904     07 D1 02 FB | 	rdlong	local52, objptr
01908     68 D3 02 F1 | 	add	local53, local52
0190c     07 D2 66 F0 | 	shl	local53, #7
01910     FD 0E 06 F1 | 	add	objptr, #253
01914     07 D3 62 FC | 	wrlong	local53, objptr
01918     04 0E 06 F1 | 	add	objptr, #4
0191c     0C 00 80 FF 
01920     07 01 68 FC | 	wrlong	##6144, objptr
01924     31 0F 86 F1 | 	sub	objptr, #305
01928     07 7D 02 FB | 	rdlong	local10, objptr
0192c     10 0E 06 F1 | 	add	objptr, #16
01930     07 D1 02 FB | 	rdlong	local52, objptr
01934     68 7D 02 F1 | 	add	local10, local52
01938     25 0F 06 F1 | 	add	objptr, #293
0193c     07 7D 62 FC | 	wrlong	local10, objptr
01940     04 0E 06 F1 | 	add	objptr, #4
01944     07 03 68 FC | 	wrlong	#1, objptr
01948                 | ' 
01948                 | '     waitvbl
01948                 | '     tracker.tick
01948                 | '     
01948                 | ' 	paula.channel1(0)=tracker.currSamplePtr(0)
01948                 | ' 	paula.channel1(1)=1
01948                 | ' 	paula.channel1(2)=tracker.currsamplelength(0)-tracker.currrepeatLength(0)
01948                 | ' 	paula.channel1(3)=tracker.currsamplelength(0)
01948                 | ' 	paula.channel1(4)=(tracker.currVolume(0)+tracker.deltavolume(0))*128
01948                 | ' 	paula.channel1(5)=8192-2048
01948                 | ' 	paula.channel1(6)=tracker.currPeriod(0)+tracker.deltaperiod(0)
01948                 | ' 	paula.channel1(7)=1
01948                 | '     if tracker.trigger(0) <> old1 then paula.channel1(8)=0 :waitus 10 : paula.channel1(8)=1 :old1=tracker.trigger(0)
01948     22 0E 86 F1 | 	sub	objptr, #34
0194c     07 7D C2 FA | 	rdbyte	local10, objptr
01950     B6 0F 06 F1 | 	add	objptr, #438
01954     07 D1 02 FB | 	rdlong	local52, objptr
01958     04 00 00 FF 
0195c     DC 0E 86 F1 | 	sub	objptr, ##2268
01960     68 7D 0A F2 | 	cmp	local10, local52 wz
01964     40 00 90 AD |  if_e	jmp	#LR__0022
01968     03 00 00 FF 
0196c     4C 0F 06 F1 | 	add	objptr, ##1868
01970     07 01 68 FC | 	wrlong	#0, objptr
01974     03 00 00 FF 
01978     4C 0F 86 F1 | 	sub	objptr, ##1868
0197c     0A 5C 06 F6 | 	mov	arg01, #10
01980     38 48 B0 FD | 	call	#__system___waitus
01984     03 00 00 FF 
01988     4C 0F 06 F1 | 	add	objptr, ##1868
0198c     07 03 68 FC | 	wrlong	#1, objptr
01990     26 0E 86 F1 | 	sub	objptr, #38
01994     07 7D C2 FA | 	rdbyte	local10, objptr
01998     B6 0F 06 F1 | 	add	objptr, #438
0199c     07 7D 62 FC | 	wrlong	local10, objptr
019a0     04 00 00 FF 
019a4     DC 0E 86 F1 | 	sub	objptr, ##2268
019a8                 | LR__0022
019a8     03 00 00 FF 
019ac     50 0F 06 F1 | 	add	objptr, ##1872
019b0     07 7D 02 FB | 	rdlong	local10, objptr
019b4     9C 0F 06 F1 | 	add	objptr, #412
019b8     07 7D 62 FC | 	wrlong	local10, objptr
019bc     01 00 00 FF 
019c0     11 0F 86 F1 | 	sub	objptr, ##785
019c4     07 7D 02 FB | 	rdlong	local10, objptr
019c8     75 0F 06 F1 | 	add	objptr, #373
019cc     07 7D 62 FC | 	wrlong	local10, objptr
019d0     04 0E 06 F1 | 	add	objptr, #4
019d4     07 03 68 FC | 	wrlong	#1, objptr
019d8     67 0F 86 F1 | 	sub	objptr, #359
019dc     07 7D E2 FA | 	rdword	local10, objptr
019e0     0A 0E 06 F1 | 	add	objptr, #10
019e4     07 D1 02 FB | 	rdlong	local52, objptr
019e8     68 7D 82 F1 | 	sub	local10, local52
019ec     61 0F 06 F1 | 	add	objptr, #353
019f0     07 7D 62 FC | 	wrlong	local10, objptr
019f4     6B 0F 86 F1 | 	sub	objptr, #363
019f8     07 7D E2 FA | 	rdword	local10, objptr
019fc     6F 0F 06 F1 | 	add	objptr, #367
01a00     07 7D 62 FC | 	wrlong	local10, objptr
01a04     29 0F 86 F1 | 	sub	objptr, #297
01a08     07 D3 02 FB | 	rdlong	local53, objptr
01a0c     10 0E 06 F1 | 	add	objptr, #16
01a10     07 D1 02 FB | 	rdlong	local52, objptr
01a14     68 D3 02 F1 | 	add	local53, local52
01a18     07 D2 66 F0 | 	shl	local53, #7
01a1c     1D 0F 06 F1 | 	add	objptr, #285
01a20     07 D3 62 FC | 	wrlong	local53, objptr
01a24     04 0E 06 F1 | 	add	objptr, #4
01a28     14 00 80 FF 
01a2c     07 01 68 FC | 	wrlong	##10240, objptr
01a30     51 0F 86 F1 | 	sub	objptr, #337
01a34     07 7D 02 FB | 	rdlong	local10, objptr
01a38     10 0E 06 F1 | 	add	objptr, #16
01a3c     07 D1 02 FB | 	rdlong	local52, objptr
01a40     68 7D 02 F1 | 	add	local10, local52
01a44     45 0F 06 F1 | 	add	objptr, #325
01a48     07 7D 62 FC | 	wrlong	local10, objptr
01a4c     04 0E 06 F1 | 	add	objptr, #4
01a50     07 03 68 FC | 	wrlong	#1, objptr
01a54                 | ' 
01a54                 | '     old12=paula.channel2(0)
01a54                 | ' 	paula.channel2(0)=tracker.currSamplePtr(1)
01a54                 | ' 	paula.channel2(1)=1
01a54                 | ' 	paula.channel2(2)=tracker.currSampleLength(1)-tracker.currrepeatLength(1)
01a54                 | ' 	paula.channel2(3)=tracker.currSampleLength(1)
01a54                 | ' 	paula.channel2(4)=(tracker.currVolume(1)+tracker.deltavolume(1))*128
01a54                 | ' 	paula.channel2(5)=8192+2048
01a54                 | ' 	paula.channel2(6)=tracker.currPeriod(1)+tracker.deltaperiod(1)
01a54                 | ' 	paula.channel2(7)=1
01a54                 | '     if tracker.trigger(1) <> old2 then paula.channel2(8)=0 :waitus 10 : paula.channel2(8)=1 :old2=tracker.trigger(1)
01a54     45 0E 86 F1 | 	sub	objptr, #69
01a58     07 7D C2 FA | 	rdbyte	local10, objptr
01a5c     B9 0F 06 F1 | 	add	objptr, #441
01a60     07 D1 02 FB | 	rdlong	local52, objptr
01a64     04 00 00 FF 
01a68     E0 0E 86 F1 | 	sub	objptr, ##2272
01a6c     68 7D 0A F2 | 	cmp	local10, local52 wz
01a70     40 00 90 AD |  if_e	jmp	#LR__0023
01a74     03 00 00 FF 
01a78     70 0F 06 F1 | 	add	objptr, ##1904
01a7c     07 01 68 FC | 	wrlong	#0, objptr
01a80     03 00 00 FF 
01a84     70 0F 86 F1 | 	sub	objptr, ##1904
01a88     0A 5C 06 F6 | 	mov	arg01, #10
01a8c     2C 47 B0 FD | 	call	#__system___waitus
01a90     03 00 00 FF 
01a94     70 0F 06 F1 | 	add	objptr, ##1904
01a98     07 03 68 FC | 	wrlong	#1, objptr
01a9c     49 0E 86 F1 | 	sub	objptr, #73
01aa0     07 7D C2 FA | 	rdbyte	local10, objptr
01aa4     B9 0F 06 F1 | 	add	objptr, #441
01aa8     07 7D 62 FC | 	wrlong	local10, objptr
01aac     04 00 00 FF 
01ab0     E0 0E 86 F1 | 	sub	objptr, ##2272
01ab4                 | LR__0023
01ab4     03 00 00 FF 
01ab8     74 0F 06 F1 | 	add	objptr, ##1908
01abc     07 7D 02 FB | 	rdlong	local10, objptr
01ac0     7C 0F 06 F1 | 	add	objptr, #380
01ac4     07 7D 62 FC | 	wrlong	local10, objptr
01ac8     01 00 00 FF 
01acc     11 0F 86 F1 | 	sub	objptr, ##785
01ad0     07 7D 02 FB | 	rdlong	local10, objptr
01ad4     95 0F 06 F1 | 	add	objptr, #405
01ad8     07 7D 62 FC | 	wrlong	local10, objptr
01adc     04 0E 06 F1 | 	add	objptr, #4
01ae0     07 03 68 FC | 	wrlong	#1, objptr
01ae4     89 0F 86 F1 | 	sub	objptr, #393
01ae8     07 7D E2 FA | 	rdword	local10, objptr
01aec     0C 0E 06 F1 | 	add	objptr, #12
01af0     07 D1 02 FB | 	rdlong	local52, objptr
01af4     68 7D 82 F1 | 	sub	local10, local52
01af8     81 0F 06 F1 | 	add	objptr, #385
01afc     07 7D 62 FC | 	wrlong	local10, objptr
01b00     8D 0F 86 F1 | 	sub	objptr, #397
01b04     07 7D E2 FA | 	rdword	local10, objptr
01b08     91 0F 06 F1 | 	add	objptr, #401
01b0c     07 7D 62 FC | 	wrlong	local10, objptr
01b10     49 0F 86 F1 | 	sub	objptr, #329
01b14     07 D3 02 FB | 	rdlong	local53, objptr
01b18     10 0E 06 F1 | 	add	objptr, #16
01b1c     07 D1 02 FB | 	rdlong	local52, objptr
01b20     68 D3 02 F1 | 	add	local53, local52
01b24     07 D2 66 F0 | 	shl	local53, #7
01b28     3D 0F 06 F1 | 	add	objptr, #317
01b2c     07 D3 62 FC | 	wrlong	local53, objptr
01b30     04 0E 06 F1 | 	add	objptr, #4
01b34     14 00 80 FF 
01b38     07 01 68 FC | 	wrlong	##10240, objptr
01b3c     71 0F 86 F1 | 	sub	objptr, #369
01b40     07 7D 02 FB | 	rdlong	local10, objptr
01b44     10 0E 06 F1 | 	add	objptr, #16
01b48     07 D1 02 FB | 	rdlong	local52, objptr
01b4c     68 7D 02 F1 | 	add	local10, local52
01b50     65 0F 06 F1 | 	add	objptr, #357
01b54     07 7D 62 FC | 	wrlong	local10, objptr
01b58     04 0E 06 F1 | 	add	objptr, #4
01b5c     07 03 68 FC | 	wrlong	#1, objptr
01b60                 | ' 
01b60                 | '     old13=paula.channel3(0)
01b60                 | ' 	paula.channel3(0)=tracker.currSamplePtr(2)
01b60                 | ' 	paula.channel3(1)=1
01b60                 | ' 	paula.channel3(2)=tracker.currSampleLength(2)-tracker.currrepeatLength(2)
01b60                 | ' 	paula.channel3(3)=tracker.currSampleLength(2)
01b60                 | ' 	paula.channel3(4)=(tracker.currVolume(2)+tracker.deltavolume(2))*128
01b60                 | ' 	paula.channel3(5)=8192+2048
01b60                 | ' 	paula.channel3(6)=tracker.currPeriod(2)+tracker.deltaperiod(2)
01b60                 | ' 	paula.channel3(7)=1
01b60                 | '     if tracker.trigger(2) <> old3 then paula.channel3(8)=0 :waitus 10 : paula.channel3(8)=1 :old3=tracker.trigger(2)
01b60     68 0E 86 F1 | 	sub	objptr, #104
01b64     07 7D C2 FA | 	rdbyte	local10, objptr
01b68     BC 0F 06 F1 | 	add	objptr, #444
01b6c     07 D1 02 FB | 	rdlong	local52, objptr
01b70     04 00 00 FF 
01b74     E4 0E 86 F1 | 	sub	objptr, ##2276
01b78     68 7D 0A F2 | 	cmp	local10, local52 wz
01b7c     40 00 90 AD |  if_e	jmp	#LR__0024
01b80     03 00 00 FF 
01b84     94 0F 06 F1 | 	add	objptr, ##1940
01b88     07 01 68 FC | 	wrlong	#0, objptr
01b8c     03 00 00 FF 
01b90     94 0F 86 F1 | 	sub	objptr, ##1940
01b94     0A 5C 06 F6 | 	mov	arg01, #10
01b98     20 46 B0 FD | 	call	#__system___waitus
01b9c     03 00 00 FF 
01ba0     94 0F 06 F1 | 	add	objptr, ##1940
01ba4     07 03 68 FC | 	wrlong	#1, objptr
01ba8     6C 0E 86 F1 | 	sub	objptr, #108
01bac     07 7D C2 FA | 	rdbyte	local10, objptr
01bb0     BC 0F 06 F1 | 	add	objptr, #444
01bb4     07 7D 62 FC | 	wrlong	local10, objptr
01bb8     04 00 00 FF 
01bbc     E4 0E 86 F1 | 	sub	objptr, ##2276
01bc0                 | LR__0024
01bc0     03 00 00 FF 
01bc4     98 0F 06 F1 | 	add	objptr, ##1944
01bc8     07 7D 02 FB | 	rdlong	local10, objptr
01bcc     5C 0F 06 F1 | 	add	objptr, #348
01bd0     07 7D 62 FC | 	wrlong	local10, objptr
01bd4     01 00 00 FF 
01bd8     11 0F 86 F1 | 	sub	objptr, ##785
01bdc     07 7D 02 FB | 	rdlong	local10, objptr
01be0     B5 0F 06 F1 | 	add	objptr, #437
01be4     07 7D 62 FC | 	wrlong	local10, objptr
01be8     04 0E 06 F1 | 	add	objptr, #4
01bec     07 03 68 FC | 	wrlong	#1, objptr
01bf0     AB 0F 86 F1 | 	sub	objptr, #427
01bf4     07 7D E2 FA | 	rdword	local10, objptr
01bf8     0E 0E 06 F1 | 	add	objptr, #14
01bfc     07 D1 02 FB | 	rdlong	local52, objptr
01c00     68 7D 82 F1 | 	sub	local10, local52
01c04     A1 0F 06 F1 | 	add	objptr, #417
01c08     07 7D 62 FC | 	wrlong	local10, objptr
01c0c     AF 0F 86 F1 | 	sub	objptr, #431
01c10     07 7D E2 FA | 	rdword	local10, objptr
01c14     B3 0F 06 F1 | 	add	objptr, #435
01c18     07 7D 62 FC | 	wrlong	local10, objptr
01c1c     69 0F 86 F1 | 	sub	objptr, #361
01c20     07 D3 02 FB | 	rdlong	local53, objptr
01c24     10 0E 06 F1 | 	add	objptr, #16
01c28     07 D1 02 FB | 	rdlong	local52, objptr
01c2c     68 D3 02 F1 | 	add	local53, local52
01c30     07 D2 66 F0 | 	shl	local53, #7
01c34     5D 0F 06 F1 | 	add	objptr, #349
01c38     07 D3 62 FC | 	wrlong	local53, objptr
01c3c     04 0E 06 F1 | 	add	objptr, #4
01c40     0C 00 80 FF 
01c44     07 01 68 FC | 	wrlong	##6144, objptr
01c48     91 0F 86 F1 | 	sub	objptr, #401
01c4c     07 7D 02 FB | 	rdlong	local10, objptr
01c50     10 0E 06 F1 | 	add	objptr, #16
01c54     07 D1 02 FB | 	rdlong	local52, objptr
01c58     68 7D 02 F1 | 	add	local10, local52
01c5c     85 0F 06 F1 | 	add	objptr, #389
01c60     07 7D 62 FC | 	wrlong	local10, objptr
01c64     04 0E 06 F1 | 	add	objptr, #4
01c68     07 03 68 FC | 	wrlong	#1, objptr
01c6c                 | ' 
01c6c                 | '     old14=paula.channel4(0)    
01c6c                 | ' 	paula.channel4(0)=tracker.currSamplePtr(3)
01c6c                 | ' 	paula.channel4(1)=1
01c6c                 | ' 	paula.channel4(2)=tracker.currSampleLength(3)-tracker.currrepeatLength(3)
01c6c                 | ' 	paula.channel4(3)=tracker.currSampleLength(3)
01c6c                 | ' 	paula.channel4(4)=(tracker.currVolume(3)+tracker.deltavolume(3))*128
01c6c                 | ' 	paula.channel4(5)=8192-2048
01c6c                 | ' 	paula.channel4(6)=tracker.currPeriod(3)+tracker.deltaperiod(3)
01c6c                 | ' 	paula.channel4(7)=1
01c6c                 | '     if tracker.trigger(3) <> old4 then paula.channel4(8)=0 :waitus 10 : paula.channel4(8)=1 :old4=tracker.trigger(3)
01c6c     8B 0E 86 F1 | 	sub	objptr, #139
01c70     07 7D C2 FA | 	rdbyte	local10, objptr
01c74     BF 0F 06 F1 | 	add	objptr, #447
01c78     07 D1 02 FB | 	rdlong	local52, objptr
01c7c     04 00 00 FF 
01c80     E8 0E 86 F1 | 	sub	objptr, ##2280
01c84     68 7D 0A F2 | 	cmp	local10, local52 wz
01c88     40 00 90 AD |  if_e	jmp	#LR__0025
01c8c     03 00 00 FF 
01c90     B8 0F 06 F1 | 	add	objptr, ##1976
01c94     07 01 68 FC | 	wrlong	#0, objptr
01c98     03 00 00 FF 
01c9c     B8 0F 86 F1 | 	sub	objptr, ##1976
01ca0     0A 5C 06 F6 | 	mov	arg01, #10
01ca4     14 45 B0 FD | 	call	#__system___waitus
01ca8     03 00 00 FF 
01cac     B8 0F 06 F1 | 	add	objptr, ##1976
01cb0     07 03 68 FC | 	wrlong	#1, objptr
01cb4     8F 0E 86 F1 | 	sub	objptr, #143
01cb8     07 7D C2 FA | 	rdbyte	local10, objptr
01cbc     BF 0F 06 F1 | 	add	objptr, #447
01cc0     07 7D 62 FC | 	wrlong	local10, objptr
01cc4     04 00 00 FF 
01cc8     E8 0E 86 F1 | 	sub	objptr, ##2280
01ccc                 | LR__0025
01ccc     1D 5E 06 F6 | 	mov	arg02, #29
01cd0                 | ' 
01cd0                 | ' ''---------- Set the (x,y) position of cursor
01cd0                 | ' 
01cd0                 | ' cursor_x:=x
01cd0     34 0E 06 F1 | 	add	objptr, #52
01cd4     07 0B 48 FC | 	wrbyte	#5, objptr
01cd8                 | ' cursor_y:=y
01cd8     01 0E 06 F1 | 	add	objptr, #1
01cdc     07 3B 48 FC | 	wrbyte	#29, objptr
01ce0     02 00 00 FF 
01ce4     B2 0F 06 F1 | 	add	objptr, ##1458
01ce8     07 D5 C2 FA | 	rdbyte	local54, objptr
01cec     02 D4 66 F0 | 	shl	local54, #2
01cf0     01 00 00 FF 
01cf4     65 0E 06 F1 | 	add	objptr, ##613
01cf8     07 D5 02 F1 | 	add	local54, objptr
01cfc     6A 5D 02 FB | 	rdlong	arg01, local54
01d00     04 00 00 FF 
01d04     4C 0E 86 F1 | 	sub	objptr, ##2124
01d08     B4 09 B0 FD | 	call	#_hng030rm_spin2_write
01d0c     04 00 00 FF 
01d10     D0 0E 06 F1 | 	add	objptr, ##2256
01d14     07 5D 02 FB | 	rdlong	arg01, objptr
01d18     04 00 00 FF 
01d1c     D0 0E 86 F1 | 	sub	objptr, ##2256
01d20     9C 09 B0 FD | 	call	#_hng030rm_spin2_write
01d24                 | ' 
01d24                 | ' ''---------- Set the (x,y) position of cursor
01d24                 | ' 
01d24                 | ' cursor_x:=x
01d24     34 0E 06 F1 | 	add	objptr, #52
01d28     07 03 48 FC | 	wrbyte	#1, objptr
01d2c                 | ' cursor_y:=y
01d2c     01 0E 06 F1 | 	add	objptr, #1
01d30     07 3B 48 FC | 	wrbyte	#29, objptr
01d34     02 00 00 FF 
01d38     DA 0F 06 F1 | 	add	objptr, ##1498
01d3c     07 5D 02 FB | 	rdlong	arg01, objptr
01d40     10 0E 06 F1 | 	add	objptr, #16
01d44     07 D5 02 FB | 	rdlong	local54, objptr
01d48     03 00 00 FF 
01d4c     1F 0E 86 F1 | 	sub	objptr, ##1567
01d50     6A 5D 02 F1 | 	add	arg01, local54
01d54     03 5E 06 F6 | 	mov	arg02, #3
01d58     E0 0B B0 FD | 	call	#_hng030rm_spin2_inttostr2
01d5c     15 5D 02 F6 | 	mov	arg01, result1
01d60     5C 09 B0 FD | 	call	#_hng030rm_spin2_write
01d64     1D 5E 06 F6 | 	mov	arg02, #29
01d68                 | ' 
01d68                 | ' ''---------- Set the (x,y) position of cursor
01d68                 | ' 
01d68                 | ' cursor_x:=x
01d68     34 0E 06 F1 | 	add	objptr, #52
01d6c     07 41 48 FC | 	wrbyte	#32, objptr
01d70                 | ' cursor_y:=y
01d70     01 0E 06 F1 | 	add	objptr, #1
01d74     07 3B 48 FC | 	wrbyte	#29, objptr
01d78     02 00 00 FF 
01d7c     B3 0F 06 F1 | 	add	objptr, ##1459
01d80     07 D5 C2 FA | 	rdbyte	local54, objptr
01d84     02 D4 66 F0 | 	shl	local54, #2
01d88     01 00 00 FF 
01d8c     64 0E 06 F1 | 	add	objptr, ##612
01d90     07 D5 02 F1 | 	add	local54, objptr
01d94     6A 5D 02 FB | 	rdlong	arg01, local54
01d98     04 00 00 FF 
01d9c     4C 0E 86 F1 | 	sub	objptr, ##2124
01da0     1C 09 B0 FD | 	call	#_hng030rm_spin2_write
01da4     04 00 00 FF 
01da8     D0 0E 06 F1 | 	add	objptr, ##2256
01dac     07 5D 02 FB | 	rdlong	arg01, objptr
01db0     04 00 00 FF 
01db4     D0 0E 86 F1 | 	sub	objptr, ##2256
01db8     04 09 B0 FD | 	call	#_hng030rm_spin2_write
01dbc                 | ' 
01dbc                 | ' ''---------- Set the (x,y) position of cursor
01dbc                 | ' 
01dbc                 | ' cursor_x:=x
01dbc     34 0E 06 F1 | 	add	objptr, #52
01dc0     07 39 48 FC | 	wrbyte	#28, objptr
01dc4                 | ' cursor_y:=y
01dc4     01 0E 06 F1 | 	add	objptr, #1
01dc8     07 3B 48 FC | 	wrbyte	#29, objptr
01dcc     02 00 00 FF 
01dd0     DE 0F 06 F1 | 	add	objptr, ##1502
01dd4     07 5D 02 FB | 	rdlong	arg01, objptr
01dd8     10 0E 06 F1 | 	add	objptr, #16
01ddc     07 D5 02 FB | 	rdlong	local54, objptr
01de0     03 00 00 FF 
01de4     23 0E 86 F1 | 	sub	objptr, ##1571
01de8     6A 5D 02 F1 | 	add	arg01, local54
01dec     03 5E 06 F6 | 	mov	arg02, #3
01df0     48 0B B0 FD | 	call	#_hng030rm_spin2_inttostr2
01df4     15 5D 02 F6 | 	mov	arg01, result1
01df8     C4 08 B0 FD | 	call	#_hng030rm_spin2_write
01dfc     1D 5E 06 F6 | 	mov	arg02, #29
01e00                 | ' 
01e00                 | ' ''---------- Set the (x,y) position of cursor
01e00                 | ' 
01e00                 | ' cursor_x:=x
01e00     34 0E 06 F1 | 	add	objptr, #52
01e04     07 79 48 FC | 	wrbyte	#60, objptr
01e08                 | ' cursor_y:=y
01e08     01 0E 06 F1 | 	add	objptr, #1
01e0c     07 3B 48 FC | 	wrbyte	#29, objptr
01e10     02 00 00 FF 
01e14     B4 0F 06 F1 | 	add	objptr, ##1460
01e18     07 D5 C2 FA | 	rdbyte	local54, objptr
01e1c     02 D4 66 F0 | 	shl	local54, #2
01e20     01 00 00 FF 
01e24     63 0E 06 F1 | 	add	objptr, ##611
01e28     07 D5 02 F1 | 	add	local54, objptr
01e2c     6A 5D 02 FB | 	rdlong	arg01, local54
01e30     04 00 00 FF 
01e34     4C 0E 86 F1 | 	sub	objptr, ##2124
01e38     84 08 B0 FD | 	call	#_hng030rm_spin2_write
01e3c     04 00 00 FF 
01e40     D0 0E 06 F1 | 	add	objptr, ##2256
01e44     07 5D 02 FB | 	rdlong	arg01, objptr
01e48     04 00 00 FF 
01e4c     D0 0E 86 F1 | 	sub	objptr, ##2256
01e50     6C 08 B0 FD | 	call	#_hng030rm_spin2_write
01e54                 | ' 
01e54                 | ' ''---------- Set the (x,y) position of cursor
01e54                 | ' 
01e54                 | ' cursor_x:=x
01e54     34 0E 06 F1 | 	add	objptr, #52
01e58     07 71 48 FC | 	wrbyte	#56, objptr
01e5c                 | ' cursor_y:=y
01e5c     01 0E 06 F1 | 	add	objptr, #1
01e60     07 3B 48 FC | 	wrbyte	#29, objptr
01e64     02 00 00 FF 
01e68     E2 0F 06 F1 | 	add	objptr, ##1506
01e6c     07 5D 02 FB | 	rdlong	arg01, objptr
01e70     10 0E 06 F1 | 	add	objptr, #16
01e74     07 D5 02 FB | 	rdlong	local54, objptr
01e78     03 00 00 FF 
01e7c     27 0E 86 F1 | 	sub	objptr, ##1575
01e80     6A 5D 02 F1 | 	add	arg01, local54
01e84     03 5E 06 F6 | 	mov	arg02, #3
01e88     B0 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01e8c     15 5D 02 F6 | 	mov	arg01, result1
01e90     2C 08 B0 FD | 	call	#_hng030rm_spin2_write
01e94                 | ' 
01e94                 | ' ''---------- Set the (x,y) position of cursor
01e94                 | ' 
01e94                 | ' cursor_x:=x
01e94     34 0E 06 F1 | 	add	objptr, #52
01e98     07 A9 48 FC | 	wrbyte	#84, objptr
01e9c                 | ' cursor_y:=y
01e9c     01 0E 06 F1 | 	add	objptr, #1
01ea0     07 3B 48 FC | 	wrbyte	#29, objptr
01ea4     02 00 00 FF 
01ea8     E6 0F 06 F1 | 	add	objptr, ##1510
01eac     07 5D 02 FB | 	rdlong	arg01, objptr
01eb0     10 0E 06 F1 | 	add	objptr, #16
01eb4     07 D5 02 FB | 	rdlong	local54, objptr
01eb8     03 00 00 FF 
01ebc     2B 0E 86 F1 | 	sub	objptr, ##1579
01ec0     6A 5D 02 F1 | 	add	arg01, local54
01ec4     03 5E 06 F6 | 	mov	arg02, #3
01ec8     70 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01ecc     15 5D 02 F6 | 	mov	arg01, result1
01ed0     EC 07 B0 FD | 	call	#_hng030rm_spin2_write
01ed4     1D 5E 06 F6 | 	mov	arg02, #29
01ed8                 | ' 
01ed8                 | ' ''---------- Set the (x,y) position of cursor
01ed8                 | ' 
01ed8                 | ' cursor_x:=x
01ed8     34 0E 06 F1 | 	add	objptr, #52
01edc     07 B1 48 FC | 	wrbyte	#88, objptr
01ee0                 | ' cursor_y:=y
01ee0     01 0E 06 F1 | 	add	objptr, #1
01ee4     07 3B 48 FC | 	wrbyte	#29, objptr
01ee8     02 00 00 FF 
01eec     B5 0F 06 F1 | 	add	objptr, ##1461
01ef0     07 D5 C2 FA | 	rdbyte	local54, objptr
01ef4     02 D4 66 F0 | 	shl	local54, #2
01ef8     01 00 00 FF 
01efc     62 0E 06 F1 | 	add	objptr, ##610
01f00     07 D5 02 F1 | 	add	local54, objptr
01f04     6A 5D 02 FB | 	rdlong	arg01, local54
01f08     04 00 00 FF 
01f0c     4C 0E 86 F1 | 	sub	objptr, ##2124
01f10     AC 07 B0 FD | 	call	#_hng030rm_spin2_write
01f14     04 00 00 FF 
01f18     D0 0E 06 F1 | 	add	objptr, ##2256
01f1c     07 5D 02 FB | 	rdlong	arg01, objptr
01f20     04 00 00 FF 
01f24     D0 0E 86 F1 | 	sub	objptr, ##2256
01f28     94 07 B0 FD | 	call	#_hng030rm_spin2_write
01f2c     01 5E 06 F6 | 	mov	arg02, #1
01f30                 | ' 
01f30                 | ' ''---------- Set the (x,y) position of cursor
01f30                 | ' 
01f30                 | ' cursor_x:=x
01f30     34 0E 06 F1 | 	add	objptr, #52
01f34     07 B5 48 FC | 	wrbyte	#90, objptr
01f38                 | ' cursor_y:=y
01f38     01 0E 06 F1 | 	add	objptr, #1
01f3c     07 03 48 FC | 	wrbyte	#1, objptr
01f40     35 0E 86 F1 | 	sub	objptr, #53
01f44     40 00 00 FF 
01f48     7A 5D 06 F6 | 	mov	arg01, ##@LR__0456
01f4c     70 07 B0 FD | 	call	#_hng030rm_spin2_write
01f50                 | ' asm
01f50     80 5C 06 FB | 	rdlong	arg01, #128
01f54                 | ' return r
01f54     08 5E 06 F6 | 	mov	arg02, #8
01f58                 | ' 
01f58                 | ' j:=i
01f58                 | ' pos:=d-1
01f58     07 D6 06 F6 | 	mov	local55, #7
01f5c                 | ' k:=0
01f5c     44 0E 06 F1 | 	add	objptr, #68
01f60     07 5F 02 F1 | 	add	arg02, objptr
01f64                 | ' n_string[d]:=0
01f64     2F 01 48 FC | 	wrbyte	#0, arg02
01f68                 | ' repeat k from 0 to d-1
01f68     00 D8 06 F6 | 	mov	local56, #0
01f6c     44 0E 86 F1 | 	sub	objptr, #68
01f70     AC E0 9F FE | 	loc	pa,	#(@LR__0027-@LR__0026)
01f74     93 00 A0 FD | 	call	#FCACHE_LOAD_
01f78                 | LR__0026
01f78     6C DB 02 F6 | 	mov	local57, local56
01f7c     44 0E 06 F1 | 	add	objptr, #68
01f80     07 DB 02 F1 | 	add	local57, objptr
01f84                 | '   n_string[k]:=48
01f84     6D 61 48 FC | 	wrbyte	#48, local57
01f88     01 D8 06 F1 | 	add	local56, #1
01f8c     08 D8 0E F2 | 	cmp	local56, #8 wz
01f90     44 0E 86 F1 | 	sub	objptr, #68
01f94     E0 FF 9F 5D |  if_ne	jmp	#LR__0026
01f98                 | LR__0027
01f98                 | ' if (j<>0)
01f98     00 5C 0E F2 | 	cmp	arg01, #0 wz
01f9c     40 00 90 AD |  if_e	jmp	#LR__0030
01fa0                 | ' 
01fa0                 | '   repeat while (pos>-1)
01fa0                 | LR__0028
01fa0     FF FF 7F FF 
01fa4     FF D7 5E F2 | 	cmps	local55, ##-1 wcz
01fa8     34 00 90 ED |  if_be	jmp	#LR__0029
01fac     2E DD 02 F6 | 	mov	local58, arg01
01fb0     0F DC 06 F5 | 	and	local58, #15
01fb4                 | '     q:=j+//16
01fb4                 | '     if (q>9)
01fb4     09 DC 5E F2 | 	cmps	local58, #9 wcz
01fb8                 | '       q:=q+7
01fb8     07 DC 06 11 |  if_a	add	local58, #7
01fbc                 | '     q:=48+q
01fbc     30 DC 06 F1 | 	add	local58, #48
01fc0     6B DF 02 F6 | 	mov	local59, local55
01fc4     44 0E 06 F1 | 	add	objptr, #68
01fc8     07 DF 02 F1 | 	add	local59, objptr
01fcc                 | '     n_string[pos]:=q
01fcc     6F DD 42 FC | 	wrbyte	local58, local59
01fd0                 | '     j:=j+/16
01fd0     04 5C 46 F0 | 	shr	arg01, #4
01fd4                 | '     pos-=1
01fd4     01 D6 86 F1 | 	sub	local55, #1
01fd8     44 0E 86 F1 | 	sub	objptr, #68
01fdc     C0 FF 9F FD | 	jmp	#LR__0028
01fe0                 | LR__0029
01fe0                 | LR__0030
01fe0     44 0E 06 F1 | 	add	objptr, #68
01fe4     07 2B 02 F6 | 	mov	result1, objptr
01fe8     44 0E 86 F1 | 	sub	objptr, #68
01fec                 | ' 
01fec                 | ' q:=@n_string
01fec                 | ' return q
01fec     15 5D 02 F6 | 	mov	arg01, result1
01ff0     CC 06 B0 FD | 	call	#_hng030rm_spin2_write
01ff4     6C F8 9F FD | 	jmp	#LR__0016
01ff8     AF F0 03 F6 | 	mov	ptra, fp
01ffc     BF 00 A0 FD | 	call	#popregs_
02000                 | _program_ret
02000     2D 00 64 FD | 	ret
02004                 | 
02004                 | ' 
02004                 | ' 
02004                 | ' ''---------- putpixel - put a pixel on the screen
02004                 | ' 
02004                 | ' pub putpixel1(x,y,c) |byte b
02004                 | _hng030rm_spin2_putpixel1
02004                 | ' 
02004                 | ' 
02004                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
02004     00 30 06 F6 | 	mov	_var01, #0
02008     00 5C 5E F2 | 	cmps	arg01, #0 wcz
0200c     01 30 66 36 |  if_ae	neg	_var01, #1
02010     00 32 06 F6 | 	mov	_var02, #0
02014     90 0E 06 F1 | 	add	objptr, #144
02018     07 35 02 FB | 	rdlong	_var03, objptr
0201c     05 34 66 F0 | 	shl	_var03, #5
02020     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02024     01 32 66 C6 |  if_b	neg	_var02, #1
02028     19 31 02 F5 | 	and	_var01, _var02
0202c     00 36 06 F6 | 	mov	_var04, #0
02030     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02034     01 36 66 36 |  if_ae	neg	_var04, #1
02038     1B 31 02 F5 | 	and	_var01, _var04
0203c     00 38 06 F6 | 	mov	_var05, #0
02040     04 0E 06 F1 | 	add	objptr, #4
02044     07 3B 02 FB | 	rdlong	_var06, objptr
02048     94 0E 86 F1 | 	sub	objptr, #148
0204c     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02050     01 38 66 C6 |  if_b	neg	_var05, #1
02054     1C 31 CA F7 | 	test	_var01, _var05 wz
02058     8C 00 90 AD |  if_e	jmp	#LR__0033
0205c     90 0E 06 F1 | 	add	objptr, #144
02060     07 3D 02 FB | 	rdlong	_var07, objptr
02064     90 0E 86 F1 | 	sub	objptr, #144
02068     02 3C 66 F0 | 	shl	_var07, #2
0206c     2F 3D 02 FD | 	qmul	_var07, arg02
02070     18 3E 62 FD | 	getqx	_var08
02074     07 41 02 FB | 	rdlong	_var09, objptr
02078     1F 41 02 F1 | 	add	_var09, _var08
0207c     2E 43 02 F6 | 	mov	_var10, arg01
02080     03 42 46 F0 | 	shr	_var10, #3
02084     21 41 02 F1 | 	add	_var09, _var10
02088                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
02088     20 45 C2 FA | 	rdbyte	_var11, _var09
0208c                 | '     if (c==0)
0208c     00 60 0E F2 | 	cmp	arg03, #0 wz
02090     18 00 90 5D |  if_ne	jmp	#LR__0031
02094     2E 31 52 F6 | 	abs	_var01, arg01 wc
02098     07 30 06 F5 | 	and	_var01, #7
0209c     18 31 62 C6 |  if_b	neg	_var01, _var01
020a0     18 47 C2 F9 | 	decod	_var12, _var01
020a4                 | '       b:=b & !(1<<(x//8))
020a4     23 45 22 F5 | 	andn	_var11, _var12
020a8                 | '     else
020a8     14 00 90 FD | 	jmp	#LR__0032
020ac                 | LR__0031
020ac     2E 31 52 F6 | 	abs	_var01, arg01 wc
020b0     07 30 06 F5 | 	and	_var01, #7
020b4     18 31 62 C6 |  if_b	neg	_var01, _var01
020b8     18 49 C2 F9 | 	decod	_var13, _var01
020bc                 | '       b:=b |(1<<(x//8))
020bc     24 45 42 F5 | 	or	_var11, _var13
020c0                 | LR__0032
020c0     90 0E 06 F1 | 	add	objptr, #144
020c4     07 4B 02 FB | 	rdlong	_var14, objptr
020c8     90 0E 86 F1 | 	sub	objptr, #144
020cc     02 4A 66 F0 | 	shl	_var14, #2
020d0     2F 4B 02 FD | 	qmul	_var14, arg02
020d4     18 4C 62 FD | 	getqx	_var15
020d8     07 4F 02 FB | 	rdlong	_var16, objptr
020dc     26 4F 02 F1 | 	add	_var16, _var15
020e0     21 4F 02 F1 | 	add	_var16, _var10
020e4                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
020e4     27 45 42 FC | 	wrbyte	_var11, _var16
020e8                 | LR__0033
020e8                 | _hng030rm_spin2_putpixel1_ret
020e8     2D 00 64 FD | 	ret
020ec                 | 
020ec                 | ' 
020ec                 | ' 
020ec                 | ' pub putpixel2(x,y,c) |byte b
020ec                 | _hng030rm_spin2_putpixel2
020ec                 | ' 
020ec                 | ' 
020ec                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
020ec     00 30 06 F6 | 	mov	_var01, #0
020f0     00 5C 5E F2 | 	cmps	arg01, #0 wcz
020f4     01 30 66 36 |  if_ae	neg	_var01, #1
020f8     00 32 06 F6 | 	mov	_var02, #0
020fc     90 0E 06 F1 | 	add	objptr, #144
02100     07 35 02 FB | 	rdlong	_var03, objptr
02104     04 34 66 F0 | 	shl	_var03, #4
02108     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
0210c     01 32 66 C6 |  if_b	neg	_var02, #1
02110     19 31 02 F5 | 	and	_var01, _var02
02114     00 36 06 F6 | 	mov	_var04, #0
02118     00 5E 5E F2 | 	cmps	arg02, #0 wcz
0211c     01 36 66 36 |  if_ae	neg	_var04, #1
02120     1B 31 02 F5 | 	and	_var01, _var04
02124     00 38 06 F6 | 	mov	_var05, #0
02128     04 0E 06 F1 | 	add	objptr, #4
0212c     07 3B 02 FB | 	rdlong	_var06, objptr
02130     94 0E 86 F1 | 	sub	objptr, #148
02134     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02138     01 38 66 C6 |  if_b	neg	_var05, #1
0213c     1C 31 CA F7 | 	test	_var01, _var05 wz
02140     7C 00 90 AD |  if_e	jmp	#LR__0034
02144     90 0E 06 F1 | 	add	objptr, #144
02148     07 3D 02 FB | 	rdlong	_var07, objptr
0214c     90 0E 86 F1 | 	sub	objptr, #144
02150     02 3C 66 F0 | 	shl	_var07, #2
02154     2F 3D 02 FD | 	qmul	_var07, arg02
02158     18 3E 62 FD | 	getqx	_var08
0215c     07 41 02 FB | 	rdlong	_var09, objptr
02160     1F 41 02 F1 | 	add	_var09, _var08
02164     2E 43 02 F6 | 	mov	_var10, arg01
02168     02 42 46 F0 | 	shr	_var10, #2
0216c     21 41 02 F1 | 	add	_var09, _var10
02170                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02170     20 45 C2 FA | 	rdbyte	_var11, _var09
02174     2E 31 52 F6 | 	abs	_var01, arg01 wc
02178     03 30 06 F5 | 	and	_var01, #3
0217c     18 31 62 C6 |  if_b	neg	_var01, _var01
02180     01 30 66 F0 | 	shl	_var01, #1
02184     03 46 06 F6 | 	mov	_var12, #3
02188     18 47 62 F0 | 	shl	_var12, _var01
0218c                 | '     b:=b & !(%11<<((x//4)<<1))
0218c     23 45 22 F5 | 	andn	_var11, _var12
02190     18 61 62 F0 | 	shl	arg03, _var01
02194                 | '     b:=b |(c<<((x//4)<<1))
02194     30 45 42 F5 | 	or	_var11, arg03
02198     90 0E 06 F1 | 	add	objptr, #144
0219c     07 49 02 FB | 	rdlong	_var13, objptr
021a0     90 0E 86 F1 | 	sub	objptr, #144
021a4     02 48 66 F0 | 	shl	_var13, #2
021a8     2F 49 02 FD | 	qmul	_var13, arg02
021ac     18 4A 62 FD | 	getqx	_var14
021b0     07 4D 02 FB | 	rdlong	_var15, objptr
021b4     25 4D 02 F1 | 	add	_var15, _var14
021b8     21 4D 02 F1 | 	add	_var15, _var10
021bc                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
021bc     26 45 42 FC | 	wrbyte	_var11, _var15
021c0                 | LR__0034
021c0                 | _hng030rm_spin2_putpixel2_ret
021c0     2D 00 64 FD | 	ret
021c4                 | 
021c4                 | ' 
021c4                 | ' 
021c4                 | ' pub putpixel4(x,y,c) |byte b
021c4                 | _hng030rm_spin2_putpixel4
021c4                 | ' 
021c4                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
021c4     00 30 06 F6 | 	mov	_var01, #0
021c8     00 5C 5E F2 | 	cmps	arg01, #0 wcz
021cc     01 30 66 36 |  if_ae	neg	_var01, #1
021d0     00 32 06 F6 | 	mov	_var02, #0
021d4     90 0E 06 F1 | 	add	objptr, #144
021d8     07 35 02 FB | 	rdlong	_var03, objptr
021dc     04 34 66 F0 | 	shl	_var03, #4
021e0     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
021e4     01 32 66 C6 |  if_b	neg	_var02, #1
021e8     19 31 02 F5 | 	and	_var01, _var02
021ec     00 36 06 F6 | 	mov	_var04, #0
021f0     00 5E 5E F2 | 	cmps	arg02, #0 wcz
021f4     01 36 66 36 |  if_ae	neg	_var04, #1
021f8     1B 31 02 F5 | 	and	_var01, _var04
021fc     00 38 06 F6 | 	mov	_var05, #0
02200     04 0E 06 F1 | 	add	objptr, #4
02204     07 3B 02 FB | 	rdlong	_var06, objptr
02208     94 0E 86 F1 | 	sub	objptr, #148
0220c     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02210     01 38 66 C6 |  if_b	neg	_var05, #1
02214     1C 31 CA F7 | 	test	_var01, _var05 wz
02218     7C 00 90 AD |  if_e	jmp	#LR__0035
0221c     90 0E 06 F1 | 	add	objptr, #144
02220     07 3D 02 FB | 	rdlong	_var07, objptr
02224     90 0E 86 F1 | 	sub	objptr, #144
02228     02 3C 66 F0 | 	shl	_var07, #2
0222c     2F 3D 02 FD | 	qmul	_var07, arg02
02230     18 3E 62 FD | 	getqx	_var08
02234     07 41 02 FB | 	rdlong	_var09, objptr
02238     1F 41 02 F1 | 	add	_var09, _var08
0223c     2E 43 02 F6 | 	mov	_var10, arg01
02240     01 42 46 F0 | 	shr	_var10, #1
02244     21 41 02 F1 | 	add	_var09, _var10
02248                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02248     20 45 C2 FA | 	rdbyte	_var11, _var09
0224c     2E 31 52 F6 | 	abs	_var01, arg01 wc
02250     01 30 06 F5 | 	and	_var01, #1
02254     18 31 62 C6 |  if_b	neg	_var01, _var01
02258     02 30 66 F0 | 	shl	_var01, #2
0225c     0F 46 06 F6 | 	mov	_var12, #15
02260     18 47 62 F0 | 	shl	_var12, _var01
02264                 | '     b:=b & !(%1111<<((x//2)<<2))
02264     23 45 22 F5 | 	andn	_var11, _var12
02268     18 61 62 F0 | 	shl	arg03, _var01
0226c                 | '     b:=b |(c<<((x//2)<<2))
0226c     30 45 42 F5 | 	or	_var11, arg03
02270     90 0E 06 F1 | 	add	objptr, #144
02274     07 49 02 FB | 	rdlong	_var13, objptr
02278     90 0E 86 F1 | 	sub	objptr, #144
0227c     02 48 66 F0 | 	shl	_var13, #2
02280     2F 49 02 FD | 	qmul	_var13, arg02
02284     18 4A 62 FD | 	getqx	_var14
02288     07 4D 02 FB | 	rdlong	_var15, objptr
0228c     25 4D 02 F1 | 	add	_var15, _var14
02290     21 4D 02 F1 | 	add	_var15, _var10
02294                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
02294     26 45 42 FC | 	wrbyte	_var11, _var15
02298                 | LR__0035
02298                 | _hng030rm_spin2_putpixel4_ret
02298     2D 00 64 FD | 	ret
0229c                 | 
0229c                 | ' 
0229c                 | ' 
0229c                 | ' pub putpixel8(x,y,c)
0229c                 | _hng030rm_spin2_putpixel8
0229c                 | ' 
0229c                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
0229c     00 30 06 F6 | 	mov	_var01, #0
022a0     00 5C 5E F2 | 	cmps	arg01, #0 wcz
022a4     01 30 66 36 |  if_ae	neg	_var01, #1
022a8     00 32 06 F6 | 	mov	_var02, #0
022ac     90 0E 06 F1 | 	add	objptr, #144
022b0     07 35 02 FB | 	rdlong	_var03, objptr
022b4     02 34 66 F0 | 	shl	_var03, #2
022b8     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
022bc     01 32 66 C6 |  if_b	neg	_var02, #1
022c0     19 31 02 F5 | 	and	_var01, _var02
022c4     00 36 06 F6 | 	mov	_var04, #0
022c8     00 5E 5E F2 | 	cmps	arg02, #0 wcz
022cc     01 36 66 36 |  if_ae	neg	_var04, #1
022d0     1B 31 02 F5 | 	and	_var01, _var04
022d4     00 38 06 F6 | 	mov	_var05, #0
022d8     04 0E 06 F1 | 	add	objptr, #4
022dc     07 3B 02 FB | 	rdlong	_var06, objptr
022e0     94 0E 86 F1 | 	sub	objptr, #148
022e4     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
022e8     01 38 66 C6 |  if_b	neg	_var05, #1
022ec     1C 31 CA F7 | 	test	_var01, _var05 wz
022f0     28 00 90 AD |  if_e	jmp	#LR__0036
022f4     90 0E 06 F1 | 	add	objptr, #144
022f8     07 3D 02 FB | 	rdlong	_var07, objptr
022fc     90 0E 86 F1 | 	sub	objptr, #144
02300     02 3C 66 F0 | 	shl	_var07, #2
02304     2F 3D 02 FD | 	qmul	_var07, arg02
02308     18 3E 62 FD | 	getqx	_var08
0230c     07 41 02 FB | 	rdlong	_var09, objptr
02310     1F 41 02 F1 | 	add	_var09, _var08
02314     2E 41 02 F1 | 	add	_var09, arg01
02318                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02318     20 61 42 FC | 	wrbyte	arg03, _var09
0231c                 | LR__0036
0231c                 | _hng030rm_spin2_putpixel8_ret
0231c     2D 00 64 FD | 	ret
02320                 | 
02320                 | ' 
02320                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02320                 | ' 
02320                 | ' pub setbordercolor(r,g,b) | color
02320                 | _hng030rm_spin2_setbordercolor
02320     18 5C 66 F0 | 	shl	arg01, #24
02324     10 5E 66 F0 | 	shl	arg02, #16
02328     2F 5D 02 F1 | 	add	arg01, arg02
0232c     08 60 66 F0 | 	shl	arg03, #8
02330     30 5D 02 F1 | 	add	arg01, arg03
02334                 | ' 
02334                 | ' color:=r<<24+g<<16+b<<8
02334                 | ' bordercolor:=color
02334     2C 0E 06 F1 | 	add	objptr, #44
02338     07 5D 62 FC | 	wrlong	arg01, objptr
0233c     2C 0E 86 F1 | 	sub	objptr, #44
02340                 | _hng030rm_spin2_setbordercolor_ret
02340     2D 00 64 FD | 	ret
02344                 | 
02344                 | ' 
02344                 | ' 
02344                 | ' '*************************************************************************
02344                 | ' '                                                                        *
02344                 | ' '  Text functions                                                        *
02344                 | ' '                                                                        *
02344                 | ' '*************************************************************************
02344                 | ' 
02344                 | ' ''---------- Clear the screen, set its foreground/background color
02344                 | ' 
02344                 | ' pub cls(fc,bc)   :c
02344                 | _hng030rm_spin2_cls
02344     07 5A 05 F6 | 	mov	COUNT_, #7
02348     B0 00 A0 FD | 	call	#pushregs_
0234c     2E 6B 02 F6 | 	mov	local01, arg01
02350     2F 6D 02 F6 | 	mov	local02, arg02
02354                 | ' 
02354                 | ' if (graphmode<512)
02354     C4 0E 06 F1 | 	add	objptr, #196
02358     07 6F 02 FB | 	rdlong	local03, objptr
0235c     C4 0E 86 F1 | 	sub	objptr, #196
02360     01 00 00 FF 
02364     00 6E 5E F2 | 	cmps	local03, ##512 wcz
02368     34 00 90 3D |  if_ae	jmp	#LR__0037
0236c     35 71 02 F6 | 	mov	local04, local01
02370     18 70 66 F0 | 	shl	local04, #24
02374     36 73 02 F6 | 	mov	local05, local02
02378     10 72 66 F0 | 	shl	local05, #16
0237c     39 71 02 F1 | 	add	local04, local05
02380     20 70 06 F1 | 	add	local04, #32
02384                 | '   c:=fc<<24+bc<<16+$20
02384                 | '   longfill(buf_ptr,c,buflen)
02384     07 5D 02 FB | 	rdlong	arg01, objptr
02388     30 0E 06 F1 | 	add	objptr, #48
0238c     07 61 02 FB | 	rdlong	arg03, objptr
02390     30 0E 86 F1 | 	sub	objptr, #48
02394     38 5F 02 F6 | 	mov	arg02, local04
02398     A8 00 A0 FD | 	call	#\builtin_longfill_
0239c                 | ' else
0239c     AC 00 90 FD | 	jmp	#LR__0043
023a0                 | LR__0037
023a0                 | '   if (graphmode & 48) ==48
023a0     C4 0E 06 F1 | 	add	objptr, #196
023a4     07 6F 02 FB | 	rdlong	local03, objptr
023a8     C4 0E 86 F1 | 	sub	objptr, #196
023ac     30 6E 06 F5 | 	and	local03, #48
023b0     30 6E 0E F2 | 	cmp	local03, #48 wz
023b4                 | '     c:=bc
023b4     36 71 02 A6 |  if_e	mov	local04, local02
023b8     74 00 90 AD |  if_e	jmp	#LR__0042
023bc                 | '   elseif (graphmode & 48) ==32
023bc     C4 0E 06 F1 | 	add	objptr, #196
023c0     07 6F 02 FB | 	rdlong	local03, objptr
023c4     C4 0E 86 F1 | 	sub	objptr, #196
023c8     30 6E 06 F5 | 	and	local03, #48
023cc     20 6E 0E F2 | 	cmp	local03, #32 wz
023d0     10 00 90 5D |  if_ne	jmp	#LR__0038
023d4     36 71 02 F6 | 	mov	local04, local02
023d8     04 70 66 F0 | 	shl	local04, #4
023dc     36 71 02 F1 | 	add	local04, local02
023e0                 | '     c:=bc<<4+bc
023e0     4C 00 90 FD | 	jmp	#LR__0041
023e4                 | LR__0038
023e4                 | '   elseif (graphmode & 48) ==16
023e4     C4 0E 06 F1 | 	add	objptr, #196
023e8     07 6F 02 FB | 	rdlong	local03, objptr
023ec     C4 0E 86 F1 | 	sub	objptr, #196
023f0     30 6E 06 F5 | 	and	local03, #48
023f4     10 6E 0E F2 | 	cmp	local03, #16 wz
023f8     28 00 90 5D |  if_ne	jmp	#LR__0039
023fc     36 71 02 F6 | 	mov	local04, local02
02400     06 70 66 F0 | 	shl	local04, #6
02404     36 75 02 F6 | 	mov	local06, local02
02408     04 74 66 F0 | 	shl	local06, #4
0240c     3A 71 02 F1 | 	add	local04, local06
02410     36 77 02 F6 | 	mov	local07, local02
02414     02 76 66 F0 | 	shl	local07, #2
02418     3B 71 02 F1 | 	add	local04, local07
0241c     36 71 02 F1 | 	add	local04, local02
02420                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02420                 | '   else
02420     0C 00 90 FD | 	jmp	#LR__0040
02424                 | LR__0039
02424                 | '     if bc==1
02424     01 6C 0E F2 | 	cmp	local02, #1 wz
02428                 | '       c:=255
02428     FF 70 06 A6 |  if_e	mov	local04, #255
0242c                 | '     else
0242c                 | '       c:=0
0242c     00 70 06 56 |  if_ne	mov	local04, #0
02430                 | LR__0040
02430                 | LR__0041
02430                 | LR__0042
02430     30 0E 06 F1 | 	add	objptr, #48
02434     07 61 02 FB | 	rdlong	arg03, objptr
02438     30 0E 86 F1 | 	sub	objptr, #48
0243c     02 60 66 F0 | 	shl	arg03, #2
02440                 | '   bytefill(buf_ptr,c,buflen*4)
02440     07 5D 02 FB | 	rdlong	arg01, objptr
02444     38 5F 02 F6 | 	mov	arg02, local04
02448     A0 00 A0 FD | 	call	#\builtin_bytefill_
0244c                 | LR__0043
0244c                 | ' setwritecolors(fc,bc)
0244c                 | ' 
0244c                 | ' 
0244c                 | ' write_color:=ff
0244c     38 0E 06 F1 | 	add	objptr, #56
02450     07 6B 62 FC | 	wrlong	local01, objptr
02454                 | ' write_background:=bb
02454     04 0E 06 F1 | 	add	objptr, #4
02458     07 6D 62 FC | 	wrlong	local02, objptr
0245c                 | ' cursor_x:=0
0245c     08 0E 86 F1 | 	sub	objptr, #8
02460     07 01 48 FC | 	wrbyte	#0, objptr
02464                 | ' cursor_y:=0
02464     01 0E 06 F1 | 	add	objptr, #1
02468     07 01 48 FC | 	wrbyte	#0, objptr
0246c     35 0E 86 F1 | 	sub	objptr, #53
02470     38 2B 02 F6 | 	mov	result1, local04
02474     AF F0 03 F6 | 	mov	ptra, fp
02478     BF 00 A0 FD | 	call	#popregs_
0247c                 | _hng030rm_spin2_cls_ret
0247c     2D 00 64 FD | 	ret
02480                 | 
02480                 | ' 
02480                 | ' ''--------- Output a string at position x,y without changing colors
02480                 | ' 
02480                 | ' pub outtextxy(x,y,text) | iii
02480                 | _hng030rm_spin2_outtextxy
02480     0B 5A 05 F6 | 	mov	COUNT_, #11
02484     B0 00 A0 FD | 	call	#pushregs_
02488     2E 6B 02 F6 | 	mov	local01, arg01
0248c                 | ' 
0248c                 | ' repeat iii from 0 to strsize(text)-1
0248c     00 6C 06 F6 | 	mov	local02, #0
02490     30 5D 02 F6 | 	mov	arg01, arg03
02494     00 6E 06 F6 | 	mov	local03, #0
02498     74 DB 9F FE | 	loc	pa,	#(@LR__0045-@LR__0044)
0249c     93 00 A0 FD | 	call	#FCACHE_LOAD_
024a0                 | LR__0044
024a0     2E 71 CA FA | 	rdbyte	local04, arg01 wz
024a4     01 6E 06 51 |  if_ne	add	local03, #1
024a8     01 5C 06 51 |  if_ne	add	arg01, #1
024ac     F0 FF 9F 5D |  if_ne	jmp	#LR__0044
024b0                 | LR__0045
024b0     37 2B 02 F6 | 	mov	result1, local03
024b4     15 73 02 F6 | 	mov	local05, result1
024b8     01 72 86 F1 | 	sub	local05, #1
024bc     00 72 5E F2 | 	cmps	local05, #0 wcz
024c0     01 74 06 16 |  if_a	mov	local06, #1
024c4     01 74 66 E6 |  if_be	neg	local06, #1
024c8     3A 73 02 F1 | 	add	local05, local06
024cc     80 DB 9F FE | 	loc	pa,	#(@LR__0047-@LR__0046)
024d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
024d4                 | LR__0046
024d4     90 0E 06 F1 | 	add	objptr, #144
024d8     07 77 02 FB | 	rdlong	local07, objptr
024dc     90 0E 86 F1 | 	sub	objptr, #144
024e0     2F 77 02 FD | 	qmul	local07, arg02
024e4     18 78 62 FD | 	getqx	local08
024e8     35 79 02 F1 | 	add	local08, local01
024ec     36 79 02 F1 | 	add	local08, local02
024f0     02 78 66 F0 | 	shl	local08, #2
024f4     07 7B 02 FB | 	rdlong	local09, objptr
024f8     3C 7B 02 F1 | 	add	local09, local08
024fc     3D 7D 02 FB | 	rdlong	local10, local09
02500     FF 7C 26 F5 | 	andn	local10, #255
02504     30 7F 02 F6 | 	mov	local11, arg03
02508     36 7F 02 F1 | 	add	local11, local02
0250c     3F 77 C2 FA | 	rdbyte	local07, local11
02510     3B 7D 42 F5 | 	or	local10, local07
02514                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
02514     3D 7D 62 FC | 	wrlong	local10, local09
02518     3A 6D 02 F1 | 	add	local02, local06
0251c     39 6D 0A F2 | 	cmp	local02, local05 wz
02520     B0 FF 9F 5D |  if_ne	jmp	#LR__0046
02524                 | LR__0047
02524     AF F0 03 F6 | 	mov	ptra, fp
02528     BF 00 A0 FD | 	call	#popregs_
0252c                 | _hng030rm_spin2_outtextxy_ret
0252c     2D 00 64 FD | 	ret
02530                 | 
02530                 | ' 
02530                 | ' ''---------- Output a char at the cursor position, move the cursor
02530                 | ' 
02530                 | ' pub putchar(achar) | c,x,y
02530                 | _hng030rm_spin2_putchar
02530     12 5A 05 F6 | 	mov	COUNT_, #18
02534     B0 00 A0 FD | 	call	#pushregs_
02538     2E 6B 02 F6 | 	mov	local01, arg01
0253c                 | ' 
0253c                 | ' if achar==10
0253c     0A 6A 0E F2 | 	cmp	local01, #10 wz
02540     58 00 90 5D |  if_ne	jmp	#LR__0048
02544                 | '   crlf()
02544                 | ' 
02544                 | ' cursor_x:=0
02544     34 0E 06 F1 | 	add	objptr, #52
02548     07 01 48 FC | 	wrbyte	#0, objptr
0254c                 | ' cursor_y+=1
0254c     01 0E 06 F1 | 	add	objptr, #1
02550     07 6D C2 FA | 	rdbyte	local02, objptr
02554     01 6C 06 F1 | 	add	local02, #1
02558     07 6D 42 FC | 	wrbyte	local02, objptr
0255c                 | ' if cursor_y>lines-1
0255c     5F 0E 06 F1 | 	add	objptr, #95
02560     07 6D 02 FB | 	rdlong	local02, objptr
02564     01 6C 86 F1 | 	sub	local02, #1
02568     5F 0E 86 F1 | 	sub	objptr, #95
0256c     07 6F C2 FA | 	rdbyte	local03, objptr
02570     35 0E 86 F1 | 	sub	objptr, #53
02574     36 6F 5A F2 | 	cmps	local03, local02 wcz
02578     38 01 90 ED |  if_be	jmp	#LR__0051
0257c                 | '   scrollup()
0257c     F4 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
02580     94 0E 06 F1 | 	add	objptr, #148
02584     07 71 02 FB | 	rdlong	local04, objptr
02588     01 70 86 F1 | 	sub	local04, #1
0258c                 | '   cursor_y:=lines-1
0258c     5F 0E 86 F1 | 	sub	objptr, #95
02590     07 71 42 FC | 	wrbyte	local04, objptr
02594     35 0E 86 F1 | 	sub	objptr, #53
02598                 | ' else  
02598     18 01 90 FD | 	jmp	#LR__0051
0259c                 | LR__0048
0259c                 | '   x:=cursor_x
0259c     34 0E 06 F1 | 	add	objptr, #52
025a0     07 73 C2 FA | 	rdbyte	local05, objptr
025a4                 | '   y:=cursor_y
025a4     01 0E 06 F1 | 	add	objptr, #1
025a8     07 75 C2 FA | 	rdbyte	local06, objptr
025ac     03 0E 06 F1 | 	add	objptr, #3
025b0     07 77 02 FB | 	rdlong	local07, objptr
025b4     18 76 66 F0 | 	shl	local07, #24
025b8     04 0E 06 F1 | 	add	objptr, #4
025bc     07 79 02 FB | 	rdlong	local08, objptr
025c0     10 78 66 F0 | 	shl	local08, #16
025c4     3C 77 02 F1 | 	add	local07, local08
025c8                 | '   c:=write_color<<24+write_background<<16
025c8     54 0E 06 F1 | 	add	objptr, #84
025cc     07 7B 02 FB | 	rdlong	local09, objptr
025d0     90 0E 86 F1 | 	sub	objptr, #144
025d4     3A 7B 02 FD | 	qmul	local09, local06
025d8     18 7C 62 FD | 	getqx	local10
025dc     39 7D 02 F1 | 	add	local10, local05
025e0     02 7C 66 F0 | 	shl	local10, #2
025e4     07 7F 02 FB | 	rdlong	local11, objptr
025e8     3E 7F 02 F1 | 	add	local11, local10
025ec     3F 81 02 FB | 	rdlong	local12, local11
025f0     7F 00 00 FF 
025f4     FF 81 06 F5 | 	and	local12, ##65535
025f8     3B 81 42 F5 | 	or	local12, local07
025fc                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
025fc     3F 81 62 FC | 	wrlong	local12, local11
02600     90 0E 06 F1 | 	add	objptr, #144
02604     07 7B 02 FB | 	rdlong	local09, objptr
02608     90 0E 86 F1 | 	sub	objptr, #144
0260c     3A 7B 02 FD | 	qmul	local09, local06
02610     18 82 62 FD | 	getqx	local13
02614     39 83 02 F1 | 	add	local13, local05
02618     02 82 66 F0 | 	shl	local13, #2
0261c     07 85 02 FB | 	rdlong	local14, objptr
02620     41 85 02 F1 | 	add	local14, local13
02624     42 87 02 FB | 	rdlong	local15, local14
02628     FF 86 26 F5 | 	andn	local15, #255
0262c     FF 6A 06 F5 | 	and	local01, #255
02630     35 87 42 F5 | 	or	local15, local01
02634                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
02634     42 87 62 FC | 	wrlong	local15, local14
02638                 | '   cursor_x+=1
02638     34 0E 06 F1 | 	add	objptr, #52
0263c     07 89 C2 FA | 	rdbyte	local16, objptr
02640     01 88 06 F1 | 	add	local16, #1
02644     07 89 42 FC | 	wrbyte	local16, objptr
02648                 | '   if cursor_x==cpl
02648     07 89 C2 FA | 	rdbyte	local16, objptr
0264c     5C 0E 06 F1 | 	add	objptr, #92
02650     07 8B 02 FB | 	rdlong	local17, objptr
02654     90 0E 86 F1 | 	sub	objptr, #144
02658     45 89 0A F2 | 	cmp	local16, local17 wz
0265c     54 00 90 5D |  if_ne	jmp	#LR__0050
02660                 | '     cursor_x:=0
02660     34 0E 06 F1 | 	add	objptr, #52
02664     07 01 48 FC | 	wrbyte	#0, objptr
02668                 | '     cursor_y+=1
02668     01 0E 06 F1 | 	add	objptr, #1
0266c     07 89 C2 FA | 	rdbyte	local16, objptr
02670     01 88 06 F1 | 	add	local16, #1
02674     07 89 42 FC | 	wrbyte	local16, objptr
02678                 | '     if cursor_y>lines-1
02678     5F 0E 06 F1 | 	add	objptr, #95
0267c     07 89 02 FB | 	rdlong	local16, objptr
02680     01 88 86 F1 | 	sub	local16, #1
02684     5F 0E 86 F1 | 	sub	objptr, #95
02688     07 8B C2 FA | 	rdbyte	local17, objptr
0268c     35 0E 86 F1 | 	sub	objptr, #53
02690     44 8B 5A F2 | 	cmps	local17, local16 wcz
02694     1C 00 90 ED |  if_be	jmp	#LR__0049
02698                 | '       scrollup()
02698     D8 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
0269c     94 0E 06 F1 | 	add	objptr, #148
026a0     07 8D 02 FB | 	rdlong	local18, objptr
026a4     01 8C 86 F1 | 	sub	local18, #1
026a8                 | '       cursor_y:=lines-1
026a8     5F 0E 86 F1 | 	sub	objptr, #95
026ac     07 8D 42 FC | 	wrbyte	local18, objptr
026b0     35 0E 86 F1 | 	sub	objptr, #53
026b4                 | LR__0049
026b4                 | LR__0050
026b4                 | LR__0051
026b4     AF F0 03 F6 | 	mov	ptra, fp
026b8     BF 00 A0 FD | 	call	#popregs_
026bc                 | _hng030rm_spin2_putchar_ret
026bc     2D 00 64 FD | 	ret
026c0                 | 
026c0                 | ' 
026c0                 | ' ''--------- Output a string at the cursor position, move the cursor
026c0                 | ' 
026c0                 | ' pub write(text) | iii,c,ncx,ncy
026c0                 | _hng030rm_spin2_write
026c0     11 5A 05 F6 | 	mov	COUNT_, #17
026c4     B0 00 A0 FD | 	call	#pushregs_
026c8     2E 6B 02 F6 | 	mov	local01, arg01
026cc     38 0E 06 F1 | 	add	objptr, #56
026d0     07 6D 02 FB | 	rdlong	local02, objptr
026d4     18 6C 66 F0 | 	shl	local02, #24
026d8     04 0E 06 F1 | 	add	objptr, #4
026dc     07 6F 02 FB | 	rdlong	local03, objptr
026e0     10 6E 66 F0 | 	shl	local03, #16
026e4     37 6D 02 F1 | 	add	local02, local03
026e8                 | ' 
026e8                 | ' c:=write_color<<24+write_background<<16
026e8                 | ' 'debug(uhex_long(write_color))
026e8                 | ' ncy:=cursor_y
026e8     07 0E 86 F1 | 	sub	objptr, #7
026ec     07 71 C2 FA | 	rdbyte	local04, objptr
026f0                 | ' ncx:=cursor_x+strsize(text)
026f0     01 0E 86 F1 | 	sub	objptr, #1
026f4     07 73 C2 FA | 	rdbyte	local05, objptr
026f8     34 0E 86 F1 | 	sub	objptr, #52
026fc     35 5D 02 F6 | 	mov	arg01, local01
02700     00 74 06 F6 | 	mov	local06, #0
02704     08 D9 9F FE | 	loc	pa,	#(@LR__0053-@LR__0052)
02708     93 00 A0 FD | 	call	#FCACHE_LOAD_
0270c                 | LR__0052
0270c     2E 77 CA FA | 	rdbyte	local07, arg01 wz
02710     01 74 06 51 |  if_ne	add	local06, #1
02714     01 5C 06 51 |  if_ne	add	arg01, #1
02718     F0 FF 9F 5D |  if_ne	jmp	#LR__0052
0271c                 | LR__0053
0271c     3A 2B 02 F6 | 	mov	result1, local06
02720     3A 73 02 F1 | 	add	local05, local06
02724     39 79 02 F6 | 	mov	local08, local05
02728     04 D9 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
0272c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02730                 | ' repeat while ncx>cpl-1
02730                 | LR__0054
02730     90 0E 06 F1 | 	add	objptr, #144
02734     07 73 02 FB | 	rdlong	local05, objptr
02738     90 0E 86 F1 | 	sub	objptr, #144
0273c     01 72 86 F1 | 	sub	local05, #1
02740     39 79 5A F2 | 	cmps	local08, local05 wcz
02744     18 00 90 ED |  if_be	jmp	#LR__0056
02748                 | '   ncx-=cpl
02748     90 0E 06 F1 | 	add	objptr, #144
0274c     07 7B 02 FB | 	rdlong	local09, objptr
02750     90 0E 86 F1 | 	sub	objptr, #144
02754     3D 79 82 F1 | 	sub	local08, local09
02758                 | '   ncy+=1
02758     01 70 06 F1 | 	add	local04, #1
0275c     D0 FF 9F FD | 	jmp	#LR__0054
02760                 | LR__0055
02760                 | LR__0056
02760                 | ' repeat while ncy>lines-1
02760                 | LR__0057
02760     94 0E 06 F1 | 	add	objptr, #148
02764     07 73 02 FB | 	rdlong	local05, objptr
02768     94 0E 86 F1 | 	sub	objptr, #148
0276c     01 72 86 F1 | 	sub	local05, #1
02770     39 71 5A F2 | 	cmps	local04, local05 wcz
02774     20 00 90 ED |  if_be	jmp	#LR__0058
02778                 | '   ncy-=1
02778     01 70 86 F1 | 	sub	local04, #1
0277c                 | '   scrollup()
0277c     F4 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
02780                 | '   cursor_y-=1
02780     35 0E 06 F1 | 	add	objptr, #53
02784     07 73 C2 FA | 	rdbyte	local05, objptr
02788     01 72 86 F1 | 	sub	local05, #1
0278c     07 73 42 FC | 	wrbyte	local05, objptr
02790     35 0E 86 F1 | 	sub	objptr, #53
02794     C8 FF 9F FD | 	jmp	#LR__0057
02798                 | LR__0058
02798                 | ' 
02798                 | ' repeat iii from 0 to strsize(text)-1
02798     00 7C 06 F6 | 	mov	local10, #0
0279c     35 5D 02 F6 | 	mov	arg01, local01
027a0     00 74 06 F6 | 	mov	local06, #0
027a4     68 D8 9F FE | 	loc	pa,	#(@LR__0060-@LR__0059)
027a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
027ac                 | LR__0059
027ac     2E 77 CA FA | 	rdbyte	local07, arg01 wz
027b0     01 74 06 51 |  if_ne	add	local06, #1
027b4     01 5C 06 51 |  if_ne	add	arg01, #1
027b8     F0 FF 9F 5D |  if_ne	jmp	#LR__0059
027bc                 | LR__0060
027bc     3A 2B 02 F6 | 	mov	result1, local06
027c0     15 7F 02 F6 | 	mov	local11, result1
027c4     01 7E 86 F1 | 	sub	local11, #1
027c8     00 7E 5E F2 | 	cmps	local11, #0 wcz
027cc     01 80 06 16 |  if_a	mov	local12, #1
027d0     01 80 66 E6 |  if_be	neg	local12, #1
027d4     40 7F 02 F1 | 	add	local11, local12
027d8     7C D8 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
027dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
027e0                 | LR__0061
027e0     90 0E 06 F1 | 	add	objptr, #144
027e4     07 83 02 FB | 	rdlong	local13, objptr
027e8     5B 0E 86 F1 | 	sub	objptr, #91
027ec     07 85 C2 FA | 	rdbyte	local14, objptr
027f0     42 83 02 FD | 	qmul	local13, local14
027f4     18 86 62 FD | 	getqx	local15
027f8     01 0E 86 F1 | 	sub	objptr, #1
027fc     07 83 C2 FA | 	rdbyte	local13, objptr
02800     34 0E 86 F1 | 	sub	objptr, #52
02804     41 87 02 F1 | 	add	local15, local13
02808     3E 87 02 F1 | 	add	local15, local10
0280c     02 86 66 F0 | 	shl	local15, #2
02810     07 89 02 FB | 	rdlong	local16, objptr
02814     43 89 02 F1 | 	add	local16, local15
02818     44 8B 02 FB | 	rdlong	local17, local16
0281c     7F 00 00 FF 
02820     FF 8B 06 F5 | 	and	local17, ##65535
02824     36 8B 42 F5 | 	or	local17, local02
02828                 | ' 
02828                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
02828     44 8B 62 FC | 	wrlong	local17, local16
0282c     40 7D 02 F1 | 	add	local10, local12
02830     3F 7D 0A F2 | 	cmp	local10, local11 wz
02834     A8 FF 9F 5D |  if_ne	jmp	#LR__0061
02838                 | LR__0062
02838                 | ' 
02838                 | ' outtextxy(cursor_x,cursor_y,text)
02838     34 0E 06 F1 | 	add	objptr, #52
0283c     07 5D C2 FA | 	rdbyte	arg01, objptr
02840     01 0E 06 F1 | 	add	objptr, #1
02844     07 5F C2 FA | 	rdbyte	arg02, objptr
02848     35 0E 86 F1 | 	sub	objptr, #53
0284c     35 61 02 F6 | 	mov	arg03, local01
02850     2C FC BF FD | 	call	#_hng030rm_spin2_outtextxy
02854                 | ' 
02854                 | ' cursor_x:=ncx
02854     34 0E 06 F1 | 	add	objptr, #52
02858     07 79 42 FC | 	wrbyte	local08, objptr
0285c                 | ' cursor_y:=ncy
0285c     01 0E 06 F1 | 	add	objptr, #1
02860     07 71 42 FC | 	wrbyte	local04, objptr
02864     35 0E 86 F1 | 	sub	objptr, #53
02868     AF F0 03 F6 | 	mov	ptra, fp
0286c     BF 00 A0 FD | 	call	#popregs_
02870                 | _hng030rm_spin2_write_ret
02870     2D 00 64 FD | 	ret
02874                 | 
02874                 | ' 
02874                 | ' ''-----------  Scroll the screen one line up
02874                 | ' 
02874                 | ' pub scrollup() | i
02874                 | _hng030rm_spin2_scrollup
02874     0A 5A 05 F6 | 	mov	COUNT_, #10
02878     B0 00 A0 FD | 	call	#pushregs_
0287c     90 0E 06 F1 | 	add	objptr, #144
02880     07 6B 02 FB | 	rdlong	local01, objptr
02884     90 0E 86 F1 | 	sub	objptr, #144
02888     02 6A 66 F0 | 	shl	local01, #2
0288c     07 5F 02 FB | 	rdlong	arg02, objptr
02890     35 5F 02 F1 | 	add	arg02, local01
02894     30 0E 06 F1 | 	add	objptr, #48
02898     07 61 02 FB | 	rdlong	arg03, objptr
0289c     60 0E 06 F1 | 	add	objptr, #96
028a0     07 6D 02 FB | 	rdlong	local02, objptr
028a4     90 0E 86 F1 | 	sub	objptr, #144
028a8     36 61 82 F1 | 	sub	arg03, local02
028ac                 | ' 
028ac                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
028ac     07 5D 02 FB | 	rdlong	arg01, objptr
028b0     EC 35 B0 FD | 	call	#__system__longmove
028b4                 | ' repeat i from buflen-cpl to buflen-1
028b4     30 0E 06 F1 | 	add	objptr, #48
028b8     07 6F 02 FB | 	rdlong	local03, objptr
028bc     60 0E 06 F1 | 	add	objptr, #96
028c0     07 6D 02 FB | 	rdlong	local02, objptr
028c4     36 6F 82 F1 | 	sub	local03, local02
028c8     60 0E 86 F1 | 	sub	objptr, #96
028cc     07 71 02 FB | 	rdlong	local04, objptr
028d0     01 70 86 F1 | 	sub	local04, #1
028d4     07 73 02 FB | 	rdlong	local05, objptr
028d8     60 0E 06 F1 | 	add	objptr, #96
028dc     07 75 02 FB | 	rdlong	local06, objptr
028e0     90 0E 86 F1 | 	sub	objptr, #144
028e4     3A 73 82 F1 | 	sub	local05, local06
028e8     39 71 5A F2 | 	cmps	local04, local05 wcz
028ec     01 76 06 16 |  if_a	mov	local07, #1
028f0     01 76 66 E6 |  if_be	neg	local07, #1
028f4     3B 71 02 F1 | 	add	local04, local07
028f8     34 D7 9F FE | 	loc	pa,	#(@LR__0064-@LR__0063)
028fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
02900                 | LR__0063
02900     37 79 02 F6 | 	mov	local08, local03
02904     02 78 66 F0 | 	shl	local08, #2
02908     07 7B 02 FB | 	rdlong	local09, objptr
0290c     3C 7B 02 F1 | 	add	local09, local08
02910     3D 7D 02 FB | 	rdlong	local10, local09
02914     80 FF 7F FF 
02918     00 7C 06 F5 | 	and	local10, ##-65536
0291c     20 7C 46 F5 | 	or	local10, #32
02920                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
02920     3D 7D 62 FC | 	wrlong	local10, local09
02924     3B 6F 02 F1 | 	add	local03, local07
02928     38 6F 0A F2 | 	cmp	local03, local04 wz
0292c     D0 FF 9F 5D |  if_ne	jmp	#LR__0063
02930                 | LR__0064
02930     AF F0 03 F6 | 	mov	ptra, fp
02934     BF 00 A0 FD | 	call	#popregs_
02938                 | _hng030rm_spin2_scrollup_ret
02938     2D 00 64 FD | 	ret
0293c                 | 
0293c                 | ' 
0293c                 | ' 
0293c                 | ' 
0293c                 | ' pub inttostr2(i,d):result |q,pos,k,j
0293c                 | _hng030rm_spin2_inttostr2
0293c                 | ' 
0293c                 | ' j:=i
0293c     2F 31 02 F6 | 	mov	_var01, arg02
02940     01 30 86 F1 | 	sub	_var01, #1
02944                 | ' pos:=d-1
02944     18 33 02 F6 | 	mov	_var02, _var01
02948                 | ' k:=0
02948     44 0E 06 F1 | 	add	objptr, #68
0294c     07 5F 02 F1 | 	add	arg02, objptr
02950                 | ' 
02950                 | ' n_string[d]:=0
02950     2F 01 48 FC | 	wrbyte	#0, arg02
02954                 | ' repeat k from 0 to d-1
02954     00 34 06 F6 | 	mov	_var03, #0
02958     00 30 5E F2 | 	cmps	_var01, #0 wcz
0295c     44 0E 86 F1 | 	sub	objptr, #68
02960     01 36 06 16 |  if_a	mov	_var04, #1
02964     01 36 66 E6 |  if_be	neg	_var04, #1
02968     1B 31 02 F1 | 	add	_var01, _var04
0296c     B0 D6 9F FE | 	loc	pa,	#(@LR__0066-@LR__0065)
02970     93 00 A0 FD | 	call	#FCACHE_LOAD_
02974                 | LR__0065
02974     1A 39 02 F6 | 	mov	_var05, _var03
02978     44 0E 06 F1 | 	add	objptr, #68
0297c     07 39 02 F1 | 	add	_var05, objptr
02980                 | '   n_string[k]:=48
02980     1C 61 48 FC | 	wrbyte	#48, _var05
02984     1B 35 02 F1 | 	add	_var03, _var04
02988     18 35 0A F2 | 	cmp	_var03, _var01 wz
0298c     44 0E 86 F1 | 	sub	objptr, #68
02990     E0 FF 9F 5D |  if_ne	jmp	#LR__0065
02994                 | LR__0066
02994                 | ' 
02994                 | ' if (j<>0)
02994     00 5C 0E F2 | 	cmp	arg01, #0 wz
02998     40 00 90 AD |  if_e	jmp	#LR__0069
0299c                 | ' 
0299c                 | '   repeat while (pos>-1)
0299c                 | LR__0067
0299c     FF FF 7F FF 
029a0     FF 33 5E F2 | 	cmps	_var02, ##-1 wcz
029a4     34 00 90 ED |  if_be	jmp	#LR__0068
029a8     2E 0B 03 F6 | 	mov	muldiva_, arg01
029ac     0A 0C 07 F6 | 	mov	muldivb_, #10
029b0     CC 00 A0 FD | 	call	#unsdivide_
029b4     85 3B 02 F6 | 	mov	_var06, muldiva_
029b8                 | '     q:=j+//10
029b8                 | '     q:=48+q
029b8     30 3A 06 F1 | 	add	_var06, #48
029bc     19 3D 02 F6 | 	mov	_var07, _var02
029c0     44 0E 06 F1 | 	add	objptr, #68
029c4     07 3D 02 F1 | 	add	_var07, objptr
029c8                 | '     n_string[pos]:=q
029c8     1E 3B 42 FC | 	wrbyte	_var06, _var07
029cc                 | '     j:=j+/10
029cc     86 5D 02 F6 | 	mov	arg01, muldivb_
029d0                 | '     pos-=1
029d0     01 32 86 F1 | 	sub	_var02, #1
029d4     44 0E 86 F1 | 	sub	objptr, #68
029d8     C0 FF 9F FD | 	jmp	#LR__0067
029dc                 | LR__0068
029dc                 | LR__0069
029dc     44 0E 06 F1 | 	add	objptr, #68
029e0     07 2B 02 F6 | 	mov	result1, objptr
029e4     44 0E 86 F1 | 	sub	objptr, #68
029e8                 | ' 
029e8                 | ' 
029e8                 | ' q:=@n_string
029e8                 | ' return q
029e8                 | _hng030rm_spin2_inttostr2_ret
029e8     2D 00 64 FD | 	ret
029ec                 | 
029ec                 | ' 
029ec                 | ' 
029ec                 | ' 
029ec                 | ' '*************************************************************************
029ec                 | ' '                                                                        *
029ec                 | ' '  Mode setting and driver start                                                          *
029ec                 | ' '                                                                        *
029ec                 | ' '*************************************************************************
029ec                 | ' 
029ec                 | ' ''---------  Set the graphics mode
029ec                 | ' 
029ec                 | ' 
029ec                 | ' 
029ec                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
029ec                 | _hng030rm_spin2_setmode
029ec     50 5A 05 F6 | 	mov	COUNT_, #80
029f0     B0 00 A0 FD | 	call	#pushregs_
029f4     2E 6B 02 F6 | 	mov	local01, arg01
029f8                 | ' 
029f8                 | ' '' mode:tn_bb_cc_vv_hh
029f8                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
029f8                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
029f8                 | ' 
029f8                 | ' if mode==(512+192+48)
029f8     01 00 00 FF 
029fc     F0 6A 0E F2 | 	cmp	local01, ##752 wz
02a00                 | '   return 'no RAM
02a00     1C 0A 90 AD |  if_e	jmp	#LR__0110
02a04                 | ' 
02a04                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02a04     35 6D 02 F6 | 	mov	local02, local01
02a08     06 6C 46 F0 | 	shr	local02, #6
02a0c     07 6C 06 F5 | 	and	local02, #7
02a10     08 6C 26 F3 | 	fle	local02, #8
02a14     36 6F 02 F6 | 	mov	local03, local02
02a18     30 6E 62 FD | 	jmprel	local03
02a1c                 | LR__0070
02a1c     20 00 90 FD | 	jmp	#LR__0071
02a20     58 00 90 FD | 	jmp	#LR__0072
02a24     90 00 90 FD | 	jmp	#LR__0073
02a28     C8 00 90 FD | 	jmp	#LR__0074
02a2c     00 01 90 FD | 	jmp	#LR__0075
02a30     38 01 90 FD | 	jmp	#LR__0076
02a34     70 01 90 FD | 	jmp	#LR__0077
02a38     A8 01 90 FD | 	jmp	#LR__0078
02a3c     E4 01 90 FD | 	jmp	#LR__0079
02a40                 | LR__0071
02a40                 | ' 
02a40                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02a40     50 0E 06 F1 | 	add	objptr, #80
02a44     07 5D 02 F6 | 	mov	arg01, objptr
02a48     50 0E 86 F1 | 	sub	objptr, #80
02a4c     0E 00 00 FF 
02a50     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02a54     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a58     38 73 02 F6 | 	mov	local05, local04
02a5c     10 74 06 F6 | 	mov	local06, #16
02a60     39 5F 02 F6 | 	mov	arg02, local05
02a64     10 60 06 F6 | 	mov	arg03, #16
02a68     0E 00 00 FF 
02a6c     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
02a70     2C 34 B0 FD | 	call	#__system__longmove
02a74     15 77 02 F6 | 	mov	local07, result1
02a78     A8 01 90 FD | 	jmp	#LR__0079
02a7c                 | LR__0072
02a7c                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02a7c     50 0E 06 F1 | 	add	objptr, #80
02a80     07 5D 02 F6 | 	mov	arg01, objptr
02a84     50 0E 86 F1 | 	sub	objptr, #80
02a88     0E 00 00 FF 
02a8c     98 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02a90     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a94     38 73 02 F6 | 	mov	local05, local04
02a98     10 74 06 F6 | 	mov	local06, #16
02a9c     39 5F 02 F6 | 	mov	arg02, local05
02aa0     10 60 06 F6 | 	mov	arg03, #16
02aa4     0E 00 00 FF 
02aa8     98 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
02aac     F0 33 B0 FD | 	call	#__system__longmove
02ab0     15 77 02 F6 | 	mov	local07, result1
02ab4     6C 01 90 FD | 	jmp	#LR__0079
02ab8                 | LR__0073
02ab8                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02ab8     50 0E 06 F1 | 	add	objptr, #80
02abc     07 5D 02 F6 | 	mov	arg01, objptr
02ac0     50 0E 86 F1 | 	sub	objptr, #80
02ac4     0E 00 00 FF 
02ac8     D8 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02acc     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02ad0     38 73 02 F6 | 	mov	local05, local04
02ad4     10 74 06 F6 | 	mov	local06, #16
02ad8     39 5F 02 F6 | 	mov	arg02, local05
02adc     10 60 06 F6 | 	mov	arg03, #16
02ae0     0E 00 00 FF 
02ae4     D8 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02ae8     B4 33 B0 FD | 	call	#__system__longmove
02aec     15 77 02 F6 | 	mov	local07, result1
02af0     30 01 90 FD | 	jmp	#LR__0079
02af4                 | LR__0074
02af4                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02af4     50 0E 06 F1 | 	add	objptr, #80
02af8     07 5D 02 F6 | 	mov	arg01, objptr
02afc     50 0E 86 F1 | 	sub	objptr, #80
02b00     0E 00 00 FF 
02b04     18 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02b08     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b0c     38 73 02 F6 | 	mov	local05, local04
02b10     10 74 06 F6 | 	mov	local06, #16
02b14     39 5F 02 F6 | 	mov	arg02, local05
02b18     10 60 06 F6 | 	mov	arg03, #16
02b1c     0E 00 00 FF 
02b20     18 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02b24     78 33 B0 FD | 	call	#__system__longmove
02b28     15 77 02 F6 | 	mov	local07, result1
02b2c     F4 00 90 FD | 	jmp	#LR__0079
02b30                 | LR__0075
02b30                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02b30     50 0E 06 F1 | 	add	objptr, #80
02b34     07 5D 02 F6 | 	mov	arg01, objptr
02b38     50 0E 86 F1 | 	sub	objptr, #80
02b3c     0E 00 00 FF 
02b40     58 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02b44     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b48     38 73 02 F6 | 	mov	local05, local04
02b4c     10 74 06 F6 | 	mov	local06, #16
02b50     39 5F 02 F6 | 	mov	arg02, local05
02b54     10 60 06 F6 | 	mov	arg03, #16
02b58     0E 00 00 FF 
02b5c     58 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02b60     3C 33 B0 FD | 	call	#__system__longmove
02b64     15 77 02 F6 | 	mov	local07, result1
02b68     B8 00 90 FD | 	jmp	#LR__0079
02b6c                 | LR__0076
02b6c                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02b6c     50 0E 06 F1 | 	add	objptr, #80
02b70     07 5D 02 F6 | 	mov	arg01, objptr
02b74     50 0E 86 F1 | 	sub	objptr, #80
02b78     0E 00 00 FF 
02b7c     98 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02b80     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b84     38 73 02 F6 | 	mov	local05, local04
02b88     10 74 06 F6 | 	mov	local06, #16
02b8c     39 5F 02 F6 | 	mov	arg02, local05
02b90     10 60 06 F6 | 	mov	arg03, #16
02b94     0E 00 00 FF 
02b98     98 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02b9c     00 33 B0 FD | 	call	#__system__longmove
02ba0     15 77 02 F6 | 	mov	local07, result1
02ba4     7C 00 90 FD | 	jmp	#LR__0079
02ba8                 | LR__0077
02ba8                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02ba8     50 0E 06 F1 | 	add	objptr, #80
02bac     07 5D 02 F6 | 	mov	arg01, objptr
02bb0     50 0E 86 F1 | 	sub	objptr, #80
02bb4     0E 00 00 FF 
02bb8     D8 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02bbc     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02bc0     38 73 02 F6 | 	mov	local05, local04
02bc4     10 74 06 F6 | 	mov	local06, #16
02bc8     39 5F 02 F6 | 	mov	arg02, local05
02bcc     10 60 06 F6 | 	mov	arg03, #16
02bd0     0E 00 00 FF 
02bd4     D8 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02bd8     C4 32 B0 FD | 	call	#__system__longmove
02bdc     15 77 02 F6 | 	mov	local07, result1
02be0     40 00 90 FD | 	jmp	#LR__0079
02be4                 | LR__0078
02be4                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02be4     50 0E 06 F1 | 	add	objptr, #80
02be8     07 79 02 F6 | 	mov	local08, objptr
02bec     3C 7B 02 F6 | 	mov	local09, local08
02bf0     0F 00 00 FF 
02bf4     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02bf8     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02bfc     38 73 02 F6 | 	mov	local05, local04
02c00     10 74 06 F6 | 	mov	local06, #16
02c04     3D 5D 02 F6 | 	mov	arg01, local09
02c08     39 5F 02 F6 | 	mov	arg02, local05
02c0c     10 60 06 F6 | 	mov	arg03, #16
02c10     50 0E 86 F1 | 	sub	objptr, #80
02c14     0F 00 00 FF 
02c18     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02c1c     80 32 B0 FD | 	call	#__system__longmove
02c20     15 77 02 F6 | 	mov	local07, result1
02c24                 | LR__0079
02c24                 | ' 
02c24                 | ' ' 4-bit graphics: do nothing with timings :)
02c24                 | ' if mode<512
02c24     01 00 00 FF 
02c28     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02c2c     20 00 90 3D |  if_ae	jmp	#LR__0080
02c30     0C 00 00 FF 
02c34     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c38     0D 7D 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02c3c                 | '   palette_ptr:=@ataripalette
02c3c     18 0E 06 F1 | 	add	objptr, #24
02c40     07 7D 62 FC | 	wrlong	local10, objptr
02c44     18 0E 86 F1 | 	sub	objptr, #24
02c48     0C 00 00 FF 
02c4c     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02c50                 | LR__0080
02c50                 | ' 
02c50                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02c50     35 6D 02 F6 | 	mov	local02, local01
02c54     01 00 00 FF 
02c58     30 6C 06 F5 | 	and	local02, ##560
02c5c     01 00 00 FF 
02c60     30 6C 0E F2 | 	cmp	local02, ##560 wz
02c64     48 00 90 5D |  if_ne	jmp	#LR__0081
02c68                 | '   timings[5]:=4
02c68     64 0E 06 F1 | 	add	objptr, #100
02c6c     07 09 68 FC | 	wrlong	#4, objptr
02c70     18 0E 06 F1 | 	add	objptr, #24
02c74     07 7F 02 FB | 	rdlong	local11, objptr
02c78     01 7E 66 F0 | 	shl	local11, #1
02c7c                 | '   timings[11]:=timings[11]<<1
02c7c     07 7F 62 FC | 	wrlong	local11, objptr
02c80                 | '   putpixel:=p8
02c80     6C 0E 06 F1 | 	add	objptr, #108
02c84     07 6D 02 FB | 	rdlong	local02, objptr
02c88     10 0E 86 F1 | 	sub	objptr, #16
02c8c     07 6D 62 FC | 	wrlong	local02, objptr
02c90     0C 00 00 FF 
02c94     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02c98     0D 81 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
02c9c                 | '   palette_ptr:=@ataripalette
02c9c     C0 0E 86 F1 | 	sub	objptr, #192
02ca0     07 81 62 FC | 	wrlong	local12, objptr
02ca4     18 0E 86 F1 | 	sub	objptr, #24
02ca8     0C 00 00 FF 
02cac     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02cb0                 | LR__0081
02cb0                 | ' 
02cb0                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02cb0     35 6D 02 F6 | 	mov	local02, local01
02cb4     01 00 00 FF 
02cb8     30 6C 06 F5 | 	and	local02, ##560
02cbc     01 00 00 FF 
02cc0     10 6C 0E F2 | 	cmp	local02, ##528 wz
02cc4     48 00 90 5D |  if_ne	jmp	#LR__0082
02cc8                 | '   timings[5]:=16
02cc8     64 0E 06 F1 | 	add	objptr, #100
02ccc     07 21 68 FC | 	wrlong	#16, objptr
02cd0     18 0E 06 F1 | 	add	objptr, #24
02cd4     07 83 02 FB | 	rdlong	local13, objptr
02cd8     01 82 46 F0 | 	shr	local13, #1
02cdc                 | '   timings[11]:=timings[11]>>1
02cdc     07 83 62 FC | 	wrlong	local13, objptr
02ce0                 | '   putpixel:=p2
02ce0     64 0E 06 F1 | 	add	objptr, #100
02ce4     07 6D 02 FB | 	rdlong	local02, objptr
02ce8     08 0E 86 F1 | 	sub	objptr, #8
02cec     07 6D 62 FC | 	wrlong	local02, objptr
02cf0     0C 00 00 FF 
02cf4     08 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02cf8     0D 85 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02cfc                 | '   palette_ptr:=@fourcolors
02cfc     C0 0E 86 F1 | 	sub	objptr, #192
02d00     07 85 62 FC | 	wrlong	local14, objptr
02d04     18 0E 86 F1 | 	sub	objptr, #24
02d08     0C 00 00 FF 
02d0c     08 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02d10                 | LR__0082
02d10                 | ' 
02d10                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02d10     35 6D 02 F6 | 	mov	local02, local01
02d14     01 00 00 FF 
02d18     30 6C 06 F5 | 	and	local02, ##560
02d1c     01 00 00 FF 
02d20     00 6C 0E F2 | 	cmp	local02, ##512 wz
02d24     48 00 90 5D |  if_ne	jmp	#LR__0083
02d28                 | '   timings[5]:=32
02d28     64 0E 06 F1 | 	add	objptr, #100
02d2c     07 41 68 FC | 	wrlong	#32, objptr
02d30     18 0E 06 F1 | 	add	objptr, #24
02d34     07 87 02 FB | 	rdlong	local15, objptr
02d38     02 86 46 F0 | 	shr	local15, #2
02d3c                 | '   timings[11]:=timings[11]>>2
02d3c     07 87 62 FC | 	wrlong	local15, objptr
02d40                 | '   putpixel:=p1
02d40     60 0E 06 F1 | 	add	objptr, #96
02d44     07 6D 02 FB | 	rdlong	local02, objptr
02d48     04 0E 86 F1 | 	sub	objptr, #4
02d4c     07 6D 62 FC | 	wrlong	local02, objptr
02d50     0C 00 00 FF 
02d54     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02d58     0D 89 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02d5c                 | '   palette_ptr:=@twocolors
02d5c     C0 0E 86 F1 | 	sub	objptr, #192
02d60     07 89 62 FC | 	wrlong	local16, objptr
02d64     18 0E 86 F1 | 	sub	objptr, #24
02d68     0C 00 00 FF 
02d6c     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02d70                 | LR__0083
02d70                 | ' 
02d70                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02d70     35 6D 02 F6 | 	mov	local02, local01
02d74     01 00 00 FF 
02d78     30 6C 06 F5 | 	and	local02, ##560
02d7c     01 00 00 FF 
02d80     20 6C 0E F2 | 	cmp	local02, ##544 wz
02d84     30 00 90 5D |  if_ne	jmp	#LR__0084
02d88                 | '   putpixel:=p4
02d88     E4 0E 06 F1 | 	add	objptr, #228
02d8c     07 6D 02 FB | 	rdlong	local02, objptr
02d90     0C 0E 86 F1 | 	sub	objptr, #12
02d94     07 6D 62 FC | 	wrlong	local02, objptr
02d98     0C 00 00 FF 
02d9c     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02da0     0D 8B 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
02da4                 | '   palette_ptr:=@vga16
02da4     C0 0E 86 F1 | 	sub	objptr, #192
02da8     07 8B 62 FC | 	wrlong	local17, objptr
02dac     18 0E 86 F1 | 	sub	objptr, #24
02db0     0C 00 00 FF 
02db4     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02db8                 | LR__0084
02db8                 | ' 
02db8                 | ' repeat i from 0 to 4
02db8     00 8C 06 F6 | 	mov	local18, #0
02dbc     84 D2 9F FE | 	loc	pa,	#(@LR__0086-@LR__0085)
02dc0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02dc4                 | LR__0085
02dc4     46 8F 02 F6 | 	mov	local19, local18
02dc8     02 8E 66 F0 | 	shl	local19, #2
02dcc     50 0E 06 F1 | 	add	objptr, #80
02dd0     07 8F 02 F1 | 	add	local19, objptr
02dd4     2C 0E 86 F1 | 	sub	objptr, #44
02dd8     07 91 02 FB | 	rdlong	local20, objptr
02ddc     24 0E 86 F1 | 	sub	objptr, #36
02de0     11 90 66 F0 | 	shl	local20, #17
02de4     47 93 02 FB | 	rdlong	local21, local19
02de8     48 93 02 F1 | 	add	local21, local20
02dec     49 95 02 F6 | 	mov	local22, local21
02df0     80 40 38 FF 
02df4     00 94 06 F1 | 	add	local22, ##1887502336
02df8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02df8     47 95 62 FC | 	wrlong	local22, local19
02dfc     01 8C 06 F1 | 	add	local18, #1
02e00     05 8C 5E F2 | 	cmps	local18, #5 wcz
02e04     BC FF 9F CD |  if_b	jmp	#LR__0085
02e08                 | LR__0086
02e08     24 0E 06 F1 | 	add	objptr, #36
02e0c     07 97 02 FB | 	rdlong	local23, objptr
02e10     11 96 66 F0 | 	shl	local23, #17
02e14     40 0E 06 F1 | 	add	objptr, #64
02e18     07 99 02 FB | 	rdlong	local24, objptr
02e1c     4B 99 02 F1 | 	add	local24, local23
02e20                 | ' timings[5]:=timings[5]+hdmibase<<17
02e20     07 99 62 FC | 	wrlong	local24, objptr
02e24                 | ' clkfreq:=timings[13]
02e24     20 0E 06 F1 | 	add	objptr, #32
02e28     07 6D 02 FB | 	rdlong	local02, objptr
02e2c     14 6C 66 FC | 	wrlong	local02, #20
02e30                 | ' hubset(timings[14])
02e30     04 0E 06 F1 | 	add	objptr, #4
02e34     07 5D 02 FB | 	rdlong	arg01, objptr
02e38     88 0E 86 F1 | 	sub	objptr, #136
02e3c     00 5C 62 FD | 	hubset	arg01
02e40                 | ' waitms(1)
02e40     01 5C 06 F6 | 	mov	arg01, #1
02e44     F8 32 B0 FD | 	call	#__system___waitms
02e48     35 9B 02 F6 | 	mov	local25, local01
02e4c     03 9A 06 F5 | 	and	local25, #3
02e50     4D 9D C2 F9 | 	decod	local26, local25
02e54                 | ' 
02e54                 | ' 
02e54                 | ' xzoom:=1<<(mode & 3)
02e54     CC 0E 06 F1 | 	add	objptr, #204
02e58     07 9D 62 FC | 	wrlong	local26, objptr
02e5c                 | ' 
02e5c                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02e5c     4E 79 02 F6 | 	mov	local08, local26
02e60     CC 0E 86 F1 | 	sub	objptr, #204
02e64     08 78 0E F2 | 	cmp	local08, #8 wz
02e68     24 00 90 5D |  if_ne	jmp	#LR__0087
02e6c     35 7B 02 F6 | 	mov	local09, local01
02e70     04 7A 46 F0 | 	shr	local09, #4
02e74     03 7A 06 F5 | 	and	local09, #3
02e78     03 7A 0E F2 | 	cmp	local09, #3 wz
02e7c     10 00 90 AD |  if_e	jmp	#LR__0087
02e80                 | '   xzoom:=4
02e80     04 6C 06 F6 | 	mov	local02, #4
02e84     CC 0E 06 F1 | 	add	objptr, #204
02e88     07 09 68 FC | 	wrlong	#4, objptr
02e8c     CC 0E 86 F1 | 	sub	objptr, #204
02e90                 | LR__0087
02e90     35 9F 02 F6 | 	mov	local27, local01
02e94     02 9E 46 F0 | 	shr	local27, #2
02e98     03 9E 06 F5 | 	and	local27, #3
02e9c     4F A1 C2 F9 | 	decod	local28, local27
02ea0                 | ' 
02ea0                 | ' yzoom:=1<<((mode>>2) & 3)
02ea0     D0 0E 06 F1 | 	add	objptr, #208
02ea4     07 A1 62 FC | 	wrlong	local28, objptr
02ea8     04 0E 86 F1 | 	sub	objptr, #4
02eac     07 79 02 FB | 	rdlong	local08, objptr
02eb0     04 0E 06 F1 | 	add	objptr, #4
02eb4     07 71 02 FB | 	rdlong	local04, objptr
02eb8     38 79 02 FD | 	qmul	local08, local04
02ebc     18 A2 62 FD | 	getqx	local29
02ec0                 | ' azoom:=xzoom*yzoom
02ec0     04 0E 06 F1 | 	add	objptr, #4
02ec4     07 A3 62 FC | 	wrlong	local29, objptr
02ec8                 | ' 
02ec8                 | ' cpl:=timings[11]
02ec8     58 0E 86 F1 | 	sub	objptr, #88
02ecc     07 6D 02 FB | 	rdlong	local02, objptr
02ed0     14 0E 06 F1 | 	add	objptr, #20
02ed4     07 6D 62 FC | 	wrlong	local02, objptr
02ed8     90 0E 86 F1 | 	sub	objptr, #144
02edc                 | ' if (mode<512)
02edc     01 00 00 FF 
02ee0     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02ee4     60 00 90 3D |  if_ae	jmp	#LR__0088
02ee8     80 0E 06 F1 | 	add	objptr, #128
02eec     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ef0     04 0A 47 F0 | 	shr	muldiva_, #4
02ef4     50 0E 06 F1 | 	add	objptr, #80
02ef8     07 0D 03 FB | 	rdlong	muldivb_, objptr
02efc     D0 0E 86 F1 | 	sub	objptr, #208
02f00     CC 00 A0 FD | 	call	#unsdivide_
02f04                 | '   lines:=(timings[12]>>4)+/yzoom
02f04     94 0E 06 F1 | 	add	objptr, #148
02f08     07 0D 63 FC | 	wrlong	muldivb_, objptr
02f0c                 | '   if ((timings[12]>>4)+//yzoom) <>0
02f0c     14 0E 86 F1 | 	sub	objptr, #20
02f10     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f14     04 0A 47 F0 | 	shr	muldiva_, #4
02f18     50 0E 06 F1 | 	add	objptr, #80
02f1c     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f20     D0 0E 86 F1 | 	sub	objptr, #208
02f24     CC 00 A0 FD | 	call	#unsdivide_
02f28     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02f2c     AC 00 90 AD |  if_e	jmp	#LR__0091
02f30                 | '     lines +=1
02f30     94 0E 06 F1 | 	add	objptr, #148
02f34     07 6D 02 FB | 	rdlong	local02, objptr
02f38     01 6C 06 F1 | 	add	local02, #1
02f3c     07 6D 62 FC | 	wrlong	local02, objptr
02f40     94 0E 86 F1 | 	sub	objptr, #148
02f44                 | ' 
02f44                 | ' else
02f44     94 00 90 FD | 	jmp	#LR__0091
02f48                 | LR__0088
02f48     80 0E 06 F1 | 	add	objptr, #128
02f4c     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f50     50 0E 06 F1 | 	add	objptr, #80
02f54     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f58     D0 0E 86 F1 | 	sub	objptr, #208
02f5c     D0 00 A0 FD | 	call	#divide_
02f60                 | '   lines:=timings[12]/yzoom
02f60     94 0E 06 F1 | 	add	objptr, #148
02f64     07 0D 63 FC | 	wrlong	muldivb_, objptr
02f68                 | '   if cpl//xzoom==0
02f68     04 0E 86 F1 | 	sub	objptr, #4
02f6c     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f70     3C 0E 06 F1 | 	add	objptr, #60
02f74     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f78     CC 0E 86 F1 | 	sub	objptr, #204
02f7c     D0 00 A0 FD | 	call	#divide_
02f80     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02f84     28 00 90 5D |  if_ne	jmp	#LR__0089
02f88                 | '     cpl:=cpl/xzoom
02f88     90 0E 06 F1 | 	add	objptr, #144
02f8c     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f90     3C 0E 06 F1 | 	add	objptr, #60
02f94     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f98     CC 0E 86 F1 | 	sub	objptr, #204
02f9c     D0 00 A0 FD | 	call	#divide_
02fa0     90 0E 06 F1 | 	add	objptr, #144
02fa4     07 0D 63 FC | 	wrlong	muldivb_, objptr
02fa8     90 0E 86 F1 | 	sub	objptr, #144
02fac                 | '   else
02fac     2C 00 90 FD | 	jmp	#LR__0090
02fb0                 | LR__0089
02fb0     90 0E 06 F1 | 	add	objptr, #144
02fb4     07 0B 03 FB | 	rdlong	muldiva_, objptr
02fb8     3C 0E 06 F1 | 	add	objptr, #60
02fbc     07 0D 03 FB | 	rdlong	muldivb_, objptr
02fc0     CC 0E 86 F1 | 	sub	objptr, #204
02fc4     D0 00 A0 FD | 	call	#divide_
02fc8     86 A5 02 F6 | 	mov	local30, muldivb_
02fcc     01 A4 06 F1 | 	add	local30, #1
02fd0                 | '     cpl:=cpl/xzoom+1
02fd0     90 0E 06 F1 | 	add	objptr, #144
02fd4     07 A5 62 FC | 	wrlong	local30, objptr
02fd8     90 0E 86 F1 | 	sub	objptr, #144
02fdc                 | LR__0090
02fdc                 | LR__0091
02fdc     90 0E 06 F1 | 	add	objptr, #144
02fe0     07 79 02 FB | 	rdlong	local08, objptr
02fe4     04 0E 06 F1 | 	add	objptr, #4
02fe8     07 71 02 FB | 	rdlong	local04, objptr
02fec     38 79 02 FD | 	qmul	local08, local04
02ff0     18 A6 62 FD | 	getqx	local31
02ff4                 | ' 
02ff4                 | ' buflen:=(cpl*lines)
02ff4     64 0E 86 F1 | 	sub	objptr, #100
02ff8     07 A7 62 FC | 	wrlong	local31, objptr
02ffc     30 0E 86 F1 | 	sub	objptr, #48
03000     02 A6 66 F0 | 	shl	local31, #2
03004     13 A8 C6 F9 | 	decod	local32, #19
03008     53 A9 82 F1 | 	sub	local32, local31
0300c                 | ' buf_ptr:=$80000-4*buflen
0300c     07 A9 62 FC | 	wrlong	local32, objptr
03010     50 0E 06 F1 | 	add	objptr, #80
03014     07 AB 02 F6 | 	mov	local33, objptr
03018                 | ' mode_ptr:=@timings
03018     3C 0E 86 F1 | 	sub	objptr, #60
0301c     07 AB 62 FC | 	wrlong	local33, objptr
03020                 | ' graphmode:=mode
03020     B0 0E 06 F1 | 	add	objptr, #176
03024     07 6B 62 FC | 	wrlong	local01, objptr
03028     C4 0E 86 F1 | 	sub	objptr, #196
0302c                 | ' makedl(mode)
0302c     35 5D 02 F6 | 	mov	arg01, local01
03030                 | ' 
03030                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
03030                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
03030                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
03030                 | ' 
03030                 | ' '   0 - display a up/down border line
03030                 | ' 
03030                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
03030                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
03030                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
03030                 | ' '    nnnn - font line to display, 0..15
03030                 | ' '    llllll - character line, determines the cursor Y position
03030                 | ' 
03030                 | ' 
03030                 | ' if (mode &256==0)
03030     00 5D CE F7 | 	test	arg01, #256 wz
03034     1C 00 90 5D |  if_ne	jmp	#LR__0092
03038     07 AD 02 FB | 	rdlong	local34, objptr
0303c     04 00 00 FF 
03040     00 AD 86 F1 | 	sub	local34, ##2304
03044                 | '   dl_ptr:=buf_ptr-4*576
03044     1C 0E 06 F1 | 	add	objptr, #28
03048     07 AD 62 FC | 	wrlong	local34, objptr
0304c     1C 0E 86 F1 | 	sub	objptr, #28
03050                 | ' else
03050     18 00 90 FD | 	jmp	#LR__0093
03054                 | LR__0092
03054     07 AF 02 FB | 	rdlong	local35, objptr
03058     03 00 00 FF 
0305c     C0 AF 86 F1 | 	sub	local35, ##1984
03060                 | '   dl_ptr:=buf_ptr-4*496
03060     1C 0E 06 F1 | 	add	objptr, #28
03064     07 AF 62 FC | 	wrlong	local35, objptr
03068     1C 0E 86 F1 | 	sub	objptr, #28
0306c                 | LR__0093
0306c     2E B1 02 F6 | 	mov	local36, arg01
03070     02 B0 46 F0 | 	shr	local36, #2
03074     03 B0 06 F5 | 	and	local36, #3
03078                 | '  ' dl_ptr:=buf_ptr-4*540
03078                 | ' 
03078                 | ' vzoom:=((mode>>2) & 3)
03078                 | ' 
03078                 | ' 
03078                 | ' if mode<512 '' text modes
03078     01 00 00 FF 
0307c     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
03080     E4 01 90 3D |  if_ae	jmp	#LR__0101
03084                 | ' 
03084                 | '   if timings[6]>0 'borders
03084     68 0E 06 F1 | 	add	objptr, #104
03088     07 B3 02 FB | 	rdlong	local37, objptr
0308c     68 0E 86 F1 | 	sub	objptr, #104
03090     00 B2 5E F2 | 	cmps	local37, #0 wcz
03094     D4 00 90 ED |  if_be	jmp	#LR__0098
03098                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03098     00 B4 06 F6 | 	mov	local38, #0
0309c     68 0E 06 F1 | 	add	objptr, #104
030a0     07 B7 02 FB | 	rdlong	local39, objptr
030a4     68 0E 86 F1 | 	sub	objptr, #104
030a8     01 B6 86 F1 | 	sub	local39, #1
030ac     00 B6 5E F2 | 	cmps	local39, #0 wcz
030b0     01 B8 06 16 |  if_a	mov	local40, #1
030b4     01 B8 66 E6 |  if_be	neg	local40, #1
030b8     5C BB 02 F6 | 	mov	local41, local40
030bc     5C B7 02 F1 | 	add	local39, local40
030c0     64 CF 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
030c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
030c8                 | LR__0094
030c8     5A BD 02 F6 | 	mov	local42, local38
030cc     02 BC 66 F0 | 	shl	local42, #2
030d0     1C 0E 06 F1 | 	add	objptr, #28
030d4     07 BF 02 FB | 	rdlong	local43, objptr
030d8     1C 0E 86 F1 | 	sub	objptr, #28
030dc     5E BF 02 F1 | 	add	local43, local42
030e0                 | '       long[dl_ptr+4*i]:=$0
030e0     5F 01 68 FC | 	wrlong	#0, local43
030e4     5D B5 02 F1 | 	add	local38, local41
030e8     5B B5 0A F2 | 	cmp	local38, local39 wz
030ec     D8 FF 9F 5D |  if_ne	jmp	#LR__0094
030f0                 | LR__0095
030f0                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
030f0     68 0E 06 F1 | 	add	objptr, #104
030f4     07 B5 02 FB | 	rdlong	local38, objptr
030f8     18 0E 06 F1 | 	add	objptr, #24
030fc     07 B9 02 FB | 	rdlong	local40, objptr
03100     5C B5 02 F1 | 	add	local38, local40
03104     0C 0E 06 F1 | 	add	objptr, #12
03108     07 C1 02 FB | 	rdlong	local44, objptr
0310c     01 C0 86 F1 | 	sub	local44, #1
03110     24 0E 86 F1 | 	sub	objptr, #36
03114     07 C3 02 FB | 	rdlong	local45, objptr
03118     18 0E 06 F1 | 	add	objptr, #24
0311c     07 C5 02 FB | 	rdlong	local46, objptr
03120     80 0E 86 F1 | 	sub	objptr, #128
03124     62 C3 02 F1 | 	add	local45, local46
03128     61 C1 5A F2 | 	cmps	local44, local45 wcz
0312c     01 C6 06 16 |  if_a	mov	local47, #1
03130     01 C6 66 E6 |  if_be	neg	local47, #1
03134     63 C9 02 F6 | 	mov	local48, local47
03138     63 C1 02 F1 | 	add	local44, local47
0313c     E8 CE 9F FE | 	loc	pa,	#(@LR__0097-@LR__0096)
03140     93 00 A0 FD | 	call	#FCACHE_LOAD_
03144                 | LR__0096
03144     5A CB 02 F6 | 	mov	local49, local38
03148     02 CA 66 F0 | 	shl	local49, #2
0314c     1C 0E 06 F1 | 	add	objptr, #28
03150     07 CD 02 FB | 	rdlong	local50, objptr
03154     1C 0E 86 F1 | 	sub	objptr, #28
03158     65 CD 02 F1 | 	add	local50, local49
0315c                 | '       long[dl_ptr+4*i]:=$0
0315c     66 01 68 FC | 	wrlong	#0, local50
03160     64 B5 02 F1 | 	add	local38, local48
03164     60 B5 0A F2 | 	cmp	local38, local44 wz
03168     D8 FF 9F 5D |  if_ne	jmp	#LR__0096
0316c                 | LR__0097
0316c                 | LR__0098
0316c     10 CE 06 F6 | 	mov	local51, #16
03170     58 CF 62 F0 | 	shl	local51, local36
03174                 | '   lpc:=16<<vzoom
03174                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03174     68 0E 06 F1 | 	add	objptr, #104
03178     07 B5 02 FB | 	rdlong	local38, objptr
0317c     5A D1 02 F6 | 	mov	local52, local38
03180     18 0E 06 F1 | 	add	objptr, #24
03184     07 D3 02 FB | 	rdlong	local53, objptr
03188     69 D1 02 F1 | 	add	local52, local53
0318c     01 D0 86 F1 | 	sub	local52, #1
03190     18 0E 86 F1 | 	sub	objptr, #24
03194     07 C7 02 FB | 	rdlong	local47, objptr
03198     68 0E 86 F1 | 	sub	objptr, #104
0319c     63 D1 5A F2 | 	cmps	local52, local47 wcz
031a0     01 D4 06 16 |  if_a	mov	local54, #1
031a4     01 D4 66 E6 |  if_be	neg	local54, #1
031a8     6A D7 02 F6 | 	mov	local55, local54
031ac     6A D1 02 F1 | 	add	local52, local54
031b0     FC CE 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
031b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
031b8                 | LR__0099
031b8     5A 0B 03 F6 | 	mov	muldiva_, local38
031bc     68 0E 06 F1 | 	add	objptr, #104
031c0     07 D9 02 FB | 	rdlong	local56, objptr
031c4     68 0E 86 F1 | 	sub	objptr, #104
031c8     6C 0B 83 F1 | 	sub	muldiva_, local56
031cc     67 0D 03 F6 | 	mov	muldivb_, local51
031d0     CC 00 A0 FD | 	call	#unsdivide_
031d4     58 0B 43 F0 | 	shr	muldiva_, local36
031d8                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
031d8     85 DB 02 F6 | 	mov	local57, muldiva_
031dc     5A 0B 03 F6 | 	mov	muldiva_, local38
031e0     68 0E 06 F1 | 	add	objptr, #104
031e4     07 D9 02 FB | 	rdlong	local56, objptr
031e8     68 0E 86 F1 | 	sub	objptr, #104
031ec     6C 0B 83 F1 | 	sub	muldiva_, local56
031f0     67 0D 03 F6 | 	mov	muldivb_, local51
031f4     CC 00 A0 FD | 	call	#unsdivide_
031f8     86 DD 02 F6 | 	mov	local58, muldivb_
031fc                 | '     charline:=(i-timings[6])+/lpc
031fc     90 0E 06 F1 | 	add	objptr, #144
03200     07 D9 02 FB | 	rdlong	local56, objptr
03204     90 0E 86 F1 | 	sub	objptr, #144
03208     6E D9 02 FD | 	qmul	local56, local58
0320c     18 DE 62 FD | 	getqx	local59
03210     02 DE 66 F0 | 	shl	local59, #2
03214     07 E1 02 FB | 	rdlong	local60, objptr
03218     6F E1 02 F1 | 	add	local60, local59
0321c     2E E3 02 F6 | 	mov	local61, arg01
03220     03 E2 06 F5 | 	and	local61, #3
03224     71 E1 02 F1 | 	add	local60, local61
03228                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
03228     0C E0 66 F0 | 	shl	local60, #12
0322c     08 DA 66 F0 | 	shl	local57, #8
03230     6D E1 02 F1 | 	add	local60, local57
03234     02 DC 66 F0 | 	shl	local58, #2
03238     6E E1 02 F1 | 	add	local60, local58
0323c     01 E0 06 F1 | 	add	local60, #1
03240     5A E5 02 F6 | 	mov	local62, local38
03244     02 E4 66 F0 | 	shl	local62, #2
03248     1C 0E 06 F1 | 	add	objptr, #28
0324c     07 E7 02 FB | 	rdlong	local63, objptr
03250     1C 0E 86 F1 | 	sub	objptr, #28
03254     72 E7 02 F1 | 	add	local63, local62
03258                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03258     73 E1 62 FC | 	wrlong	local60, local63
0325c     6B B5 02 F1 | 	add	local38, local55
03260     68 B5 0A F2 | 	cmp	local38, local52 wz
03264     50 FF 9F 5D |  if_ne	jmp	#LR__0099
03268                 | LR__0100
03268                 | LR__0101
03268                 | ' 
03268                 | ' 
03268                 | ' 
03268                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
03268     01 00 00 FF 
0326c     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
03270     AC 01 90 CD |  if_b	jmp	#LR__0109
03274                 | ' 
03274                 | '   if timings[6]>0 'borders
03274     68 0E 06 F1 | 	add	objptr, #104
03278     07 B3 02 FB | 	rdlong	local37, objptr
0327c     68 0E 86 F1 | 	sub	objptr, #104
03280     00 B2 5E F2 | 	cmps	local37, #0 wcz
03284     D4 00 90 ED |  if_be	jmp	#LR__0106
03288                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03288     00 B4 06 F6 | 	mov	local38, #0
0328c     68 0E 06 F1 | 	add	objptr, #104
03290     07 E9 02 FB | 	rdlong	local64, objptr
03294     68 0E 86 F1 | 	sub	objptr, #104
03298     01 E8 86 F1 | 	sub	local64, #1
0329c     00 E8 5E F2 | 	cmps	local64, #0 wcz
032a0     01 B8 06 16 |  if_a	mov	local40, #1
032a4     01 B8 66 E6 |  if_be	neg	local40, #1
032a8     5C EB 02 F6 | 	mov	local65, local40
032ac     5C E9 02 F1 | 	add	local64, local40
032b0     74 CD 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
032b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
032b8                 | LR__0102
032b8     5A ED 02 F6 | 	mov	local66, local38
032bc     02 EC 66 F0 | 	shl	local66, #2
032c0     1C 0E 06 F1 | 	add	objptr, #28
032c4     07 EF 02 FB | 	rdlong	local67, objptr
032c8     1C 0E 86 F1 | 	sub	objptr, #28
032cc     76 EF 02 F1 | 	add	local67, local66
032d0                 | '       long[dl_ptr+4*i]:=$0
032d0     77 01 68 FC | 	wrlong	#0, local67
032d4     75 B5 02 F1 | 	add	local38, local65
032d8     74 B5 0A F2 | 	cmp	local38, local64 wz
032dc     D8 FF 9F 5D |  if_ne	jmp	#LR__0102
032e0                 | LR__0103
032e0                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
032e0     68 0E 06 F1 | 	add	objptr, #104
032e4     07 B5 02 FB | 	rdlong	local38, objptr
032e8     18 0E 06 F1 | 	add	objptr, #24
032ec     07 B9 02 FB | 	rdlong	local40, objptr
032f0     5C B5 02 F1 | 	add	local38, local40
032f4     0C 0E 06 F1 | 	add	objptr, #12
032f8     07 F1 02 FB | 	rdlong	local68, objptr
032fc     01 F0 86 F1 | 	sub	local68, #1
03300     24 0E 86 F1 | 	sub	objptr, #36
03304     07 C3 02 FB | 	rdlong	local45, objptr
03308     18 0E 06 F1 | 	add	objptr, #24
0330c     07 C5 02 FB | 	rdlong	local46, objptr
03310     80 0E 86 F1 | 	sub	objptr, #128
03314     62 C3 02 F1 | 	add	local45, local46
03318     61 F1 5A F2 | 	cmps	local68, local45 wcz
0331c     01 C6 06 16 |  if_a	mov	local47, #1
03320     01 C6 66 E6 |  if_be	neg	local47, #1
03324     63 F3 02 F6 | 	mov	local69, local47
03328     63 F1 02 F1 | 	add	local68, local47
0332c     F8 CC 9F FE | 	loc	pa,	#(@LR__0105-@LR__0104)
03330     93 00 A0 FD | 	call	#FCACHE_LOAD_
03334                 | LR__0104
03334     5A F5 02 F6 | 	mov	local70, local38
03338     02 F4 66 F0 | 	shl	local70, #2
0333c     1C 0E 06 F1 | 	add	objptr, #28
03340     07 F7 02 FB | 	rdlong	local71, objptr
03344     1C 0E 86 F1 | 	sub	objptr, #28
03348     7A F7 02 F1 | 	add	local71, local70
0334c                 | '       long[dl_ptr+4*i]:=$0
0334c     7B 01 68 FC | 	wrlong	#0, local71
03350     79 B5 02 F1 | 	add	local38, local69
03354     78 B5 0A F2 | 	cmp	local38, local68 wz
03358     D8 FF 9F 5D |  if_ne	jmp	#LR__0104
0335c                 | LR__0105
0335c                 | LR__0106
0335c                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
0335c     68 0E 06 F1 | 	add	objptr, #104
03360     07 B5 02 FB | 	rdlong	local38, objptr
03364     5A F9 02 F6 | 	mov	local72, local38
03368     18 0E 06 F1 | 	add	objptr, #24
0336c     07 D3 02 FB | 	rdlong	local53, objptr
03370     69 F9 02 F1 | 	add	local72, local53
03374     01 F8 86 F1 | 	sub	local72, #1
03378     18 0E 86 F1 | 	sub	objptr, #24
0337c     07 C7 02 FB | 	rdlong	local47, objptr
03380     68 0E 86 F1 | 	sub	objptr, #104
03384     63 F9 5A F2 | 	cmps	local72, local47 wcz
03388     01 D4 06 16 |  if_a	mov	local54, #1
0338c     01 D4 66 E6 |  if_be	neg	local54, #1
03390     6A FB 02 F6 | 	mov	local73, local54
03394     6A F9 02 F1 | 	add	local72, local54
03398     E4 CC 9F FE | 	loc	pa,	#(@LR__0108-@LR__0107)
0339c     93 00 A0 FD | 	call	#FCACHE_LOAD_
033a0                 | LR__0107
033a0     5A FD 02 F6 | 	mov	local74, local38
033a4     68 0E 06 F1 | 	add	objptr, #104
033a8     07 D9 02 FB | 	rdlong	local56, objptr
033ac     6C FD 82 F1 | 	sub	local74, local56
033b0     58 FD 42 F0 | 	shr	local74, local36
033b4     28 0E 06 F1 | 	add	objptr, #40
033b8     07 D9 02 FB | 	rdlong	local56, objptr
033bc     90 0E 86 F1 | 	sub	objptr, #144
033c0     7E D9 02 FD | 	qmul	local56, local74
033c4     18 FE 62 FD | 	getqx	local75
033c8     02 FE 66 F0 | 	shl	local75, #2
033cc     07 01 03 FB | 	rdlong	local76, objptr
033d0     7F 01 03 F1 | 	add	local76, local75
033d4     2E 03 03 F6 | 	mov	local77, arg01
033d8     03 02 07 F5 | 	and	local77, #3
033dc     81 01 03 F1 | 	add	local76, local77
033e0                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
033e0     0C 00 67 F0 | 	shl	local76, #12
033e4     02 00 07 F1 | 	add	local76, #2
033e8     2E 05 03 F6 | 	mov	local78, arg01
033ec     30 04 07 F5 | 	and	local78, #48
033f0     02 04 47 F0 | 	shr	local78, #2
033f4     82 01 03 F1 | 	add	local76, local78
033f8     5A 07 03 F6 | 	mov	local79, local38
033fc     02 06 67 F0 | 	shl	local79, #2
03400     1C 0E 06 F1 | 	add	objptr, #28
03404     07 09 03 FB | 	rdlong	local80, objptr
03408     1C 0E 86 F1 | 	sub	objptr, #28
0340c     83 09 03 F1 | 	add	local80, local79
03410                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
03410     84 01 63 FC | 	wrlong	local76, local80
03414     7D B5 02 F1 | 	add	local38, local73
03418     7C B5 0A F2 | 	cmp	local38, local72 wz
0341c     80 FF 9F 5D |  if_ne	jmp	#LR__0107
03420                 | LR__0108
03420                 | LR__0109
03420                 | LR__0110
03420     AF F0 03 F6 | 	mov	ptra, fp
03424     BF 00 A0 FD | 	call	#popregs_
03428                 | _hng030rm_spin2_setmode_ret
03428     2D 00 64 FD | 	ret
0342c                 | 
0342c                 | ' 
0342c                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
0342c                 | _retrocog_spin2_serialcog
0342c     1C 5A 05 F6 | 	mov	COUNT_, #28
03430     B0 00 A0 FD | 	call	#pushregs_
03434                 | ' 
03434                 | ' 'start serial and midi
03434                 | ' 
03434                 | ' serial_start(rxpin, txpin, baudrate)
03434     20 5C 06 F6 | 	mov	arg01, #32
03438     21 5E 06 F6 | 	mov	arg02, #33
0343c     A6 0E 00 FF 
03440     00 60 06 F6 | 	mov	arg03, ##1920000
03444     D8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03448                 | ' serial_start(midiin,midiout,mbaudrate)
03448     1D 5C 06 F6 | 	mov	arg01, #29
0344c     1E 5E 06 F6 | 	mov	arg02, #30
03450     3D 00 00 FF 
03454     12 60 06 F6 | 	mov	arg03, ##31250
03458     C4 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0345c                 | ' serial_start(srxpin,stxpin,sbaudrate)
0345c     42 0F 00 FF 
03460     80 6A 06 F6 | 	mov	local01, ##2000000
03464     3F 5C 06 F6 | 	mov	arg01, #63
03468     3E 5E 06 F6 | 	mov	arg02, #62
0346c     42 0F 00 FF 
03470     80 60 06 F6 | 	mov	arg03, ##2000000
03474     A8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03478                 | ' 
03478                 | ' mb:=(-1)
03478     01 6C 66 F6 | 	neg	local02, #1
0347c                 | ' b:=(-1)
0347c     01 6E 66 F6 | 	neg	local03, #1
03480                 | ' 
03480                 | ' mousefront:=0
03480     00 70 06 F6 | 	mov	local04, #0
03484     08 0E 06 F1 | 	add	objptr, #8
03488     07 01 68 FC | 	wrlong	#0, objptr
0348c                 | ' mousetail:=0
0348c     04 0E 06 F1 | 	add	objptr, #4
03490     07 01 68 FC | 	wrlong	#0, objptr
03494     0C 0E 86 F1 | 	sub	objptr, #12
03498                 | ' kbdfront:=0
03498     07 01 68 FC | 	wrlong	#0, objptr
0349c                 | ' kbdtail:=0
0349c     04 0E 06 F1 | 	add	objptr, #4
034a0     07 01 68 FC | 	wrlong	#0, objptr
034a4                 | ' midifront:=0
034a4     0C 0E 06 F1 | 	add	objptr, #12
034a8     07 01 68 FC | 	wrlong	#0, objptr
034ac                 | ' miditail:=0
034ac     04 0E 06 F1 | 	add	objptr, #4
034b0     07 01 68 FC | 	wrlong	#0, objptr
034b4                 | ' serialfront:=0
034b4     04 0E 06 F1 | 	add	objptr, #4
034b8     07 01 68 FC | 	wrlong	#0, objptr
034bc                 | ' serialtail:=0
034bc     04 0E 06 F1 | 	add	objptr, #4
034c0     07 01 68 FC | 	wrlong	#0, objptr
034c4                 | ' long[$30]:=0
034c4     30 00 6C FC | 	wrlong	#0, #48
034c8                 | ' long[$34]:=0
034c8     34 00 6C FC | 	wrlong	#0, #52
034cc                 | ' long[$38]:=0
034cc     38 00 6C FC | 	wrlong	#0, #56
034d0     1C 0E 86 F1 | 	sub	objptr, #28
034d4                 | ' long[$3C]:=0
034d4     3C 00 6C FC | 	wrlong	#0, #60
034d8                 | ' 
034d8                 | ' repeat
034d8                 | LR__0111
034d8                 | ' 
034d8                 | ' '  repeat 
034d8                 | '   rr:=rxcheck(rxpin)
034d8     20 5C 06 F6 | 	mov	arg01, #32
034dc     BC 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
034e0     15 73 02 F6 | 	mov	local05, result1
034e4                 | '   mrr:=rxcheck(midiin)
034e4     1D 5C 06 F6 | 	mov	arg01, #29
034e8     B0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
034ec     15 75 02 F6 | 	mov	local06, result1
034f0                 | '   srr:=rxcheck(srxpin)
034f0     3F 70 06 F6 | 	mov	local04, #63
034f4     3F 5C 06 F6 | 	mov	arg01, #63
034f8     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
034fc     15 77 02 F6 | 	mov	local07, result1
03500     3B 79 02 F6 | 	mov	local08, local07
03504                 | ' 
03504                 | ' '  until rr>=0 || mrr>=0  || srr>=0
03504                 | ' 
03504                 | '   
03504                 | ' ' midi. Must be >= $80 for a command
03504                 | ' '$80-$8F - 3 bytes note off. note, velocity
03504                 | ' '$90-$9F - 3 bytes note on, note, velocity
03504                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
03504                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
03504                 | ' '$C0-$CF - 2 bytes program change
03504                 | ' '$D0-$DF - 2 bytes mono aftertouch
03504                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
03504                 | ' '$F0-$FF - 1 byte
03504                 | '   
03504                 | '   if srr>=0
03504     00 78 5E F2 | 	cmps	local08, #0 wcz
03508     7C 00 90 CD |  if_b	jmp	#LR__0113
0350c                 | '   
0350c                 | '     if serialfront<>((serialtail-1) //32)
0350c     1C 0E 06 F1 | 	add	objptr, #28
03510     07 77 02 FB | 	rdlong	local07, objptr
03514     3B 71 02 F6 | 	mov	local04, local07
03518     01 70 86 F1 | 	sub	local04, #1
0351c     38 6B 52 F6 | 	abs	local01, local04 wc
03520     1F 6A 06 F5 | 	and	local01, #31
03524     35 6B 62 C6 |  if_b	neg	local01, local01
03528     04 0E 86 F1 | 	sub	objptr, #4
0352c     07 7B 02 FB | 	rdlong	local09, objptr
03530     18 0E 86 F1 | 	sub	objptr, #24
03534     3D 7D 02 F6 | 	mov	local10, local09
03538     35 7D 0A F2 | 	cmp	local10, local01 wz
0353c     48 00 90 AD |  if_e	jmp	#LR__0112
03540     18 0E 06 F1 | 	add	objptr, #24
03544     07 7D 02 FB | 	rdlong	local10, objptr
03548     01 00 00 FF 
0354c     08 0F 06 F1 | 	add	objptr, ##776
03550     07 7D 02 F1 | 	add	local10, objptr
03554     3E 7F 02 F6 | 	mov	local11, local10
03558                 | '       serialbuf[serialfront]:=srr
03558     3F 79 42 FC | 	wrbyte	local08, local11
0355c                 | '       serialfront+=1
0355c     01 00 00 FF 
03560     08 0F 86 F1 | 	sub	objptr, ##776
03564     07 6B 02 FB | 	rdlong	local01, objptr
03568     01 6A 06 F1 | 	add	local01, #1
0356c     07 6B 62 FC | 	wrlong	local01, objptr
03570                 | '       serialfront:=serialfront // 32
03570     35 77 02 F6 | 	mov	local07, local01
03574     3B 71 52 F6 | 	abs	local04, local07 wc
03578     1F 70 06 F5 | 	and	local04, #31
0357c     38 71 62 C6 |  if_b	neg	local04, local04
03580     07 71 62 FC | 	wrlong	local04, objptr
03584     18 0E 86 F1 | 	sub	objptr, #24
03588                 | LR__0112
03588                 | LR__0113
03588                 | '     
03588                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
03588     80 74 5E F2 | 	cmps	local06, #128 wcz
0358c     08 00 90 CD |  if_b	jmp	#LR__0114
03590     BF 74 5E F2 | 	cmps	local06, #191 wcz
03594     10 00 90 ED |  if_be	jmp	#LR__0115
03598                 | LR__0114
03598     E0 74 5E F2 | 	cmps	local06, #224 wcz
0359c     1C 00 90 CD |  if_b	jmp	#LR__0116
035a0     EF 74 5E F2 | 	cmps	local06, #239 wcz
035a4     14 00 90 1D |  if_a	jmp	#LR__0116
035a8                 | LR__0115
035a8                 | '     mb:=2
035a8     02 6C 06 F6 | 	mov	local02, #2
035ac     3A 71 02 F6 | 	mov	local04, local06
035b0     18 70 66 F0 | 	shl	local04, #24
035b4     38 81 02 F6 | 	mov	local12, local04
035b8                 | '     midireport:=mrr<<24
035b8     40 83 02 F6 | 	mov	local13, local12
035bc                 | LR__0116
035bc                 | ' 
035bc                 | '   if (mrr>=$C0) && (mrr<=$DF)
035bc     C0 74 5E F2 | 	cmps	local06, #192 wcz
035c0     1C 00 90 CD |  if_b	jmp	#LR__0117
035c4     DF 74 5E F2 | 	cmps	local06, #223 wcz
035c8     14 00 90 1D |  if_a	jmp	#LR__0117
035cc                 | '     mb:=1
035cc     01 6C 06 F6 | 	mov	local02, #1
035d0     3A 71 02 F6 | 	mov	local04, local06
035d4     18 70 66 F0 | 	shl	local04, #24
035d8     38 85 02 F6 | 	mov	local14, local04
035dc                 | '     midireport:=mrr<<24
035dc     42 83 02 F6 | 	mov	local13, local14
035e0                 | LR__0117
035e0                 | '   
035e0                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
035e0     F0 74 5E F2 | 	cmps	local06, #240 wcz
035e4     10 00 90 CD |  if_b	jmp	#LR__0118
035e8                 | '     mb:=4
035e8     04 6C 06 F6 | 	mov	local02, #4
035ec     3A 87 02 F6 | 	mov	local15, local06
035f0     18 86 66 F0 | 	shl	local15, #24
035f4                 | '     midireport:=mrr<<24  
035f4     43 83 02 F6 | 	mov	local13, local15
035f8                 | LR__0118
035f8                 | '   
035f8                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
035f8     80 74 5E F2 | 	cmps	local06, #128 wcz
035fc     44 00 90 3D |  if_ae	jmp	#LR__0120
03600     00 6C 5E F2 | 	cmps	local02, #0 wcz
03604     3C 00 90 ED |  if_be	jmp	#LR__0120
03608     00 74 5E F2 | 	cmps	local06, #0 wcz
0360c     34 00 90 CD |  if_b	jmp	#LR__0120
03610                 | '     
03610                 | '     mb--
03610     36 71 02 F6 | 	mov	local04, local02
03614     36 77 02 F6 | 	mov	local07, local02
03618     01 76 86 F1 | 	sub	local07, #1
0361c     3B 6D 02 F6 | 	mov	local02, local07
03620                 | '     if mb<3
03620     03 6C 5E F2 | 	cmps	local02, #3 wcz
03624     1C 00 90 3D |  if_ae	jmp	#LR__0119
03628     36 89 02 F6 | 	mov	local16, local02
0362c     03 88 66 F0 | 	shl	local16, #3
03630     3A 8B 02 F6 | 	mov	local17, local06
03634     44 8B 62 F0 | 	shl	local17, local16
03638                 | '       midireport+=mrr<<(mb<<3)
03638     41 71 02 F6 | 	mov	local04, local13
0363c     45 71 02 F1 | 	add	local04, local17
03640     38 83 02 F6 | 	mov	local13, local04
03644                 | LR__0119
03644                 | LR__0120
03644                 | '   
03644                 | '   if mb==0
03644     00 6C 0E F2 | 	cmp	local02, #0 wz
03648     84 00 90 5D |  if_ne	jmp	#LR__0122
0364c                 | '     
0364c                 | '     if midifront<>((miditail-1) //32)
0364c     14 0E 06 F1 | 	add	objptr, #20
03650     07 77 02 FB | 	rdlong	local07, objptr
03654     3B 71 02 F6 | 	mov	local04, local07
03658     01 70 86 F1 | 	sub	local04, #1
0365c     38 6B 52 F6 | 	abs	local01, local04 wc
03660     1F 6A 06 F5 | 	and	local01, #31
03664     35 6B 62 C6 |  if_b	neg	local01, local01
03668     04 0E 86 F1 | 	sub	objptr, #4
0366c     07 7B 02 FB | 	rdlong	local09, objptr
03670     10 0E 86 F1 | 	sub	objptr, #16
03674     3D 7D 02 F6 | 	mov	local10, local09
03678     35 7D 0A F2 | 	cmp	local10, local01 wz
0367c     4C 00 90 AD |  if_e	jmp	#LR__0121
03680     10 0E 06 F1 | 	add	objptr, #16
03684     07 7D 02 FB | 	rdlong	local10, objptr
03688     02 7C 66 F0 | 	shl	local10, #2
0368c     01 00 00 FF 
03690     90 0E 06 F1 | 	add	objptr, ##656
03694     07 7D 02 F1 | 	add	local10, objptr
03698     3E 8D 02 F6 | 	mov	local18, local10
0369c                 | '       midibuf[midifront]:=midireport
0369c     46 83 62 FC | 	wrlong	local13, local18
036a0                 | '       midifront+=1
036a0     01 00 00 FF 
036a4     90 0E 86 F1 | 	sub	objptr, ##656
036a8     07 6B 02 FB | 	rdlong	local01, objptr
036ac     01 6A 06 F1 | 	add	local01, #1
036b0     07 6B 62 FC | 	wrlong	local01, objptr
036b4                 | '       midifront:=midifront // 32
036b4     35 77 02 F6 | 	mov	local07, local01
036b8     3B 71 52 F6 | 	abs	local04, local07 wc
036bc     1F 70 06 F5 | 	and	local04, #31
036c0     38 71 62 C6 |  if_b	neg	local04, local04
036c4     07 71 62 FC | 	wrlong	local04, objptr
036c8     10 0E 86 F1 | 	sub	objptr, #16
036cc                 | LR__0121
036cc                 | '     mb:=(-1)
036cc     01 6C 66 F6 | 	neg	local02, #1
036d0                 | LR__0122
036d0                 | ' 
036d0                 | ' 'Keyboard and mouse
036d0                 | ' 
036d0                 | '   if (rr>=$80) && (rr<>$FF)
036d0     80 72 5E F2 | 	cmps	local05, #128 wcz
036d4     1C 00 90 CD |  if_b	jmp	#LR__0123
036d8     FF 72 0E F2 | 	cmp	local05, #255 wz
036dc     14 00 90 AD |  if_e	jmp	#LR__0123
036e0                 | '     b:=3
036e0     03 6E 06 F6 | 	mov	local03, #3
036e4     39 71 02 F6 | 	mov	local04, local05
036e8     18 70 66 F0 | 	shl	local04, #24
036ec     38 8F 02 F6 | 	mov	local19, local04
036f0                 | '     kbmreport:=rr<<24
036f0     47 91 02 F6 | 	mov	local20, local19
036f4                 | LR__0123
036f4                 | '   
036f4                 | '   if (rr<$80) && (b>0) && (rr>=0)
036f4     80 72 5E F2 | 	cmps	local05, #128 wcz
036f8     38 00 90 3D |  if_ae	jmp	#LR__0124
036fc     00 6E 5E F2 | 	cmps	local03, #0 wcz
03700     30 00 90 ED |  if_be	jmp	#LR__0124
03704     00 72 5E F2 | 	cmps	local05, #0 wcz
03708     28 00 90 CD |  if_b	jmp	#LR__0124
0370c                 | '     b--
0370c     37 77 02 F6 | 	mov	local07, local03
03710     01 76 86 F1 | 	sub	local07, #1
03714     3B 6F 02 F6 | 	mov	local03, local07
03718     37 93 02 F6 | 	mov	local21, local03
0371c     03 92 66 F0 | 	shl	local21, #3
03720     39 95 02 F6 | 	mov	local22, local05
03724     49 95 62 F0 | 	shl	local22, local21
03728                 | '     kbmreport+=rr<<(b<<3)  
03728     48 71 02 F6 | 	mov	local04, local20
0372c     4A 71 02 F1 | 	add	local04, local22
03730     38 91 02 F6 | 	mov	local20, local04
03734                 | LR__0124
03734                 | '   
03734                 | '   if (rr==$FF)
03734     FF 72 0E F2 | 	cmp	local05, #255 wz
03738                 | '     b:=0   
03738     00 6E 06 A6 |  if_e	mov	local03, #0
0373c                 | ' 
0373c                 | '   if b==0  
0373c     00 6E 0E F2 | 	cmp	local03, #0 wz
03740     14 01 90 5D |  if_ne	jmp	#LR__0129
03744                 | '  
03744                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03744     00 00 40 FF 
03748     00 90 1E F2 | 	cmp	local20, ##-2147483648 wcz
0374c     84 00 90 CD |  if_b	jmp	#LR__0126
03750     00 80 43 FF 
03754     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
03758     78 00 90 3D |  if_ae	jmp	#LR__0126
0375c                 | '       if mousefront<>((mousetail-1) //128)
0375c     0C 0E 06 F1 | 	add	objptr, #12
03760     07 77 02 FB | 	rdlong	local07, objptr
03764     3B 71 02 F6 | 	mov	local04, local07
03768     01 70 86 F1 | 	sub	local04, #1
0376c     38 6B 52 F6 | 	abs	local01, local04 wc
03770     7F 6A 06 F5 | 	and	local01, #127
03774     35 6B 62 C6 |  if_b	neg	local01, local01
03778     04 0E 86 F1 | 	sub	objptr, #4
0377c     07 7B 02 FB | 	rdlong	local09, objptr
03780     08 0E 86 F1 | 	sub	objptr, #8
03784     3D 7D 02 F6 | 	mov	local10, local09
03788     35 7D 0A F2 | 	cmp	local10, local01 wz
0378c     44 00 90 AD |  if_e	jmp	#LR__0125
03790     08 0E 06 F1 | 	add	objptr, #8
03794     07 7D 02 FB | 	rdlong	local10, objptr
03798     02 7C 66 F0 | 	shl	local10, #2
0379c     98 0E 06 F1 | 	add	objptr, #152
037a0     07 7D 02 F1 | 	add	local10, objptr
037a4     3E 97 02 F6 | 	mov	local23, local10
037a8                 | '         mousebuf[mousefront]:=kbmreport
037a8     4B 91 62 FC | 	wrlong	local20, local23
037ac                 | '         mousefront+=1
037ac     98 0E 86 F1 | 	sub	objptr, #152
037b0     07 6B 02 FB | 	rdlong	local01, objptr
037b4     01 6A 06 F1 | 	add	local01, #1
037b8     07 6B 62 FC | 	wrlong	local01, objptr
037bc                 | '         mousefront:=mousefront // 128
037bc     35 77 02 F6 | 	mov	local07, local01
037c0     3B 71 52 F6 | 	abs	local04, local07 wc
037c4     7F 70 06 F5 | 	and	local04, #127
037c8     38 71 62 C6 |  if_b	neg	local04, local04
037cc     07 71 62 FC | 	wrlong	local04, objptr
037d0     08 0E 86 F1 | 	sub	objptr, #8
037d4                 | LR__0125
037d4                 | LR__0126
037d4                 | '     b:=(-1)
037d4     01 6E 66 F6 | 	neg	local03, #1
037d8                 | ' 
037d8                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
037d8     00 80 43 FF 
037dc     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
037e0     70 00 90 CD |  if_b	jmp	#LR__0128
037e4     00 00 45 FF 
037e8     00 90 1E F2 | 	cmp	local20, ##-1979711488 wcz
037ec     64 00 90 3D |  if_ae	jmp	#LR__0128
037f0                 | '       if kbdfront<>((kbdtail-1) //32)
037f0     04 0E 06 F1 | 	add	objptr, #4
037f4     07 77 02 FB | 	rdlong	local07, objptr
037f8     04 0E 86 F1 | 	sub	objptr, #4
037fc     3B 71 02 F6 | 	mov	local04, local07
03800     01 70 86 F1 | 	sub	local04, #1
03804     38 6B 52 F6 | 	abs	local01, local04 wc
03808     1F 6A 06 F5 | 	and	local01, #31
0380c     35 6B 62 C6 |  if_b	neg	local01, local01
03810     07 7D 02 FB | 	rdlong	local10, objptr
03814     35 7D 0A F2 | 	cmp	local10, local01 wz
03818     38 00 90 AD |  if_e	jmp	#LR__0127
0381c     07 6B 02 FB | 	rdlong	local01, objptr
03820     02 6A 66 F0 | 	shl	local01, #2
03824     20 0E 06 F1 | 	add	objptr, #32
03828     07 6B 02 F1 | 	add	local01, objptr
0382c     35 99 02 F6 | 	mov	local24, local01
03830                 | '         kbdbuf[kbdfront]:=kbmreport
03830     4C 91 62 FC | 	wrlong	local20, local24
03834                 | '         kbdfront+=1
03834     20 0E 86 F1 | 	sub	objptr, #32
03838     07 77 02 FB | 	rdlong	local07, objptr
0383c     01 76 06 F1 | 	add	local07, #1
03840     07 77 62 FC | 	wrlong	local07, objptr
03844                 | '         kbdfront:=kbdfront // 32
03844     3B 71 52 F6 | 	abs	local04, local07 wc
03848     1F 70 06 F5 | 	and	local04, #31
0384c     38 71 62 C6 |  if_b	neg	local04, local04
03850     07 71 62 FC | 	wrlong	local04, objptr
03854                 | LR__0127
03854                 | LR__0128
03854                 | '     b:=(-1)
03854     01 6E 66 F6 | 	neg	local03, #1
03858                 | LR__0129
03858                 | ' 
03858                 | ' 
03858                 | '   if long[$30]==0
03858     30 70 0E FB | 	rdlong	local04, #48 wz
0385c     5C 00 90 5D |  if_ne	jmp	#LR__0131
03860                 | '     if kbdfront<>kbdtail
03860     07 71 02 FB | 	rdlong	local04, objptr
03864     04 0E 06 F1 | 	add	objptr, #4
03868     07 6B 02 FB | 	rdlong	local01, objptr
0386c     04 0E 86 F1 | 	sub	objptr, #4
03870     35 71 0A F2 | 	cmp	local04, local01 wz
03874     44 00 90 AD |  if_e	jmp	#LR__0130
03878     04 0E 06 F1 | 	add	objptr, #4
0387c     07 9B 02 FB | 	rdlong	local25, objptr
03880     02 9A 66 F0 | 	shl	local25, #2
03884     1C 0E 06 F1 | 	add	objptr, #28
03888     07 9B 02 F1 | 	add	local25, objptr
0388c                 | '       long[$30]:=kbdbuf[kbdtail]
0388c     4D 71 02 FB | 	rdlong	local04, local25
03890     30 70 66 FC | 	wrlong	local04, #48
03894                 | '       kbdtail++
03894     1C 0E 86 F1 | 	sub	objptr, #28
03898     07 7D 02 FB | 	rdlong	local10, objptr
0389c     3E 6B 02 F6 | 	mov	local01, local10
038a0     01 6A 06 F1 | 	add	local01, #1
038a4     07 6B 62 FC | 	wrlong	local01, objptr
038a8                 | '       kbdtail:= kbdtail // 32
038a8     35 71 52 F6 | 	abs	local04, local01 wc
038ac     1F 70 06 F5 | 	and	local04, #31
038b0     38 71 62 C6 |  if_b	neg	local04, local04
038b4     07 71 62 FC | 	wrlong	local04, objptr
038b8     04 0E 86 F1 | 	sub	objptr, #4
038bc                 | LR__0130
038bc                 | LR__0131
038bc                 | '       
038bc                 | '   if long[$34]==0
038bc     34 70 0E FB | 	rdlong	local04, #52 wz
038c0     64 00 90 5D |  if_ne	jmp	#LR__0133
038c4                 | '     if mousefront<>mousetail
038c4     08 0E 06 F1 | 	add	objptr, #8
038c8     07 71 02 FB | 	rdlong	local04, objptr
038cc     04 0E 06 F1 | 	add	objptr, #4
038d0     07 7D 02 FB | 	rdlong	local10, objptr
038d4     0C 0E 86 F1 | 	sub	objptr, #12
038d8     3E 6B 02 F6 | 	mov	local01, local10
038dc     35 71 0A F2 | 	cmp	local04, local01 wz
038e0     44 00 90 AD |  if_e	jmp	#LR__0132
038e4     0C 0E 06 F1 | 	add	objptr, #12
038e8     07 9D 02 FB | 	rdlong	local26, objptr
038ec     02 9C 66 F0 | 	shl	local26, #2
038f0     94 0E 06 F1 | 	add	objptr, #148
038f4     07 9D 02 F1 | 	add	local26, objptr
038f8                 | '       long[$34]:=mousebuf[mousetail]
038f8     4E 71 02 FB | 	rdlong	local04, local26
038fc     34 70 66 FC | 	wrlong	local04, #52
03900                 | '       mousetail++
03900     94 0E 86 F1 | 	sub	objptr, #148
03904     07 7D 02 FB | 	rdlong	local10, objptr
03908     3E 6B 02 F6 | 	mov	local01, local10
0390c     01 6A 06 F1 | 	add	local01, #1
03910     07 6B 62 FC | 	wrlong	local01, objptr
03914                 | '       mousetail:= mousetail // 128
03914     35 71 52 F6 | 	abs	local04, local01 wc
03918     7F 70 06 F5 | 	and	local04, #127
0391c     38 71 62 C6 |  if_b	neg	local04, local04
03920     07 71 62 FC | 	wrlong	local04, objptr
03924     0C 0E 86 F1 | 	sub	objptr, #12
03928                 | LR__0132
03928                 | LR__0133
03928                 | ' 
03928                 | '       
03928                 | '   if long[$38]==0
03928     38 70 0E FB | 	rdlong	local04, #56 wz
0392c     6C 00 90 5D |  if_ne	jmp	#LR__0135
03930                 | '     if midifront<>miditail
03930     10 0E 06 F1 | 	add	objptr, #16
03934     07 71 02 FB | 	rdlong	local04, objptr
03938     04 0E 06 F1 | 	add	objptr, #4
0393c     07 7D 02 FB | 	rdlong	local10, objptr
03940     14 0E 86 F1 | 	sub	objptr, #20
03944     3E 6B 02 F6 | 	mov	local01, local10
03948     35 71 0A F2 | 	cmp	local04, local01 wz
0394c     4C 00 90 AD |  if_e	jmp	#LR__0134
03950     14 0E 06 F1 | 	add	objptr, #20
03954     07 9F 02 FB | 	rdlong	local27, objptr
03958     02 9E 66 F0 | 	shl	local27, #2
0395c     01 00 00 FF 
03960     8C 0E 06 F1 | 	add	objptr, ##652
03964     07 9F 02 F1 | 	add	local27, objptr
03968                 | '       long[$38]:=midibuf[miditail]
03968     4F 71 02 FB | 	rdlong	local04, local27
0396c     38 70 66 FC | 	wrlong	local04, #56
03970                 | '       miditail++
03970     01 00 00 FF 
03974     8C 0E 86 F1 | 	sub	objptr, ##652
03978     07 7D 02 FB | 	rdlong	local10, objptr
0397c     3E 6B 02 F6 | 	mov	local01, local10
03980     01 6A 06 F1 | 	add	local01, #1
03984     07 6B 62 FC | 	wrlong	local01, objptr
03988                 | '       miditail:= miditail // 32
03988     35 71 52 F6 | 	abs	local04, local01 wc
0398c     1F 70 06 F5 | 	and	local04, #31
03990     38 71 62 C6 |  if_b	neg	local04, local04
03994     07 71 62 FC | 	wrlong	local04, objptr
03998     14 0E 86 F1 | 	sub	objptr, #20
0399c                 | LR__0134
0399c                 | LR__0135
0399c                 | '       
0399c                 | '   if long[$3c]==0
0399c     3C 70 0E FB | 	rdlong	local04, #60 wz
039a0     34 FB 9F 5D |  if_ne	jmp	#LR__0111
039a4                 | '     if serialfront<>serialtail
039a4     18 0E 06 F1 | 	add	objptr, #24
039a8     07 71 02 FB | 	rdlong	local04, objptr
039ac     04 0E 06 F1 | 	add	objptr, #4
039b0     07 7D 02 FB | 	rdlong	local10, objptr
039b4     1C 0E 86 F1 | 	sub	objptr, #28
039b8     3E 6B 02 F6 | 	mov	local01, local10
039bc     35 71 0A F2 | 	cmp	local04, local01 wz
039c0     14 FB 9F AD |  if_e	jmp	#LR__0111
039c4                 | '       byte[$3c]:=255
039c4     3C FE 4D FC | 	wrbyte	#255, #60
039c8     1C 0E 06 F1 | 	add	objptr, #28
039cc     07 A1 02 FB | 	rdlong	local28, objptr
039d0     01 00 00 FF 
039d4     04 0F 06 F1 | 	add	objptr, ##772
039d8     07 A1 02 F1 | 	add	local28, objptr
039dc                 | '       byte[$3D]:=serialbuf[serialtail]
039dc     50 71 C2 FA | 	rdbyte	local04, local28
039e0     3D 70 46 FC | 	wrbyte	local04, #61
039e4                 | '       serialtail++
039e4     01 00 00 FF 
039e8     04 0F 86 F1 | 	sub	objptr, ##772
039ec     07 7D 02 FB | 	rdlong	local10, objptr
039f0     3E 6B 02 F6 | 	mov	local01, local10
039f4     01 6A 06 F1 | 	add	local01, #1
039f8     07 6B 62 FC | 	wrlong	local01, objptr
039fc                 | '       serialtail:= serialtail // 32
039fc     35 71 52 F6 | 	abs	local04, local01 wc
03a00     1F 70 06 F5 | 	and	local04, #31
03a04     38 71 62 C6 |  if_b	neg	local04, local04
03a08     07 71 62 FC | 	wrlong	local04, objptr
03a0c     1C 0E 86 F1 | 	sub	objptr, #28
03a10     C4 FA 9F FD | 	jmp	#LR__0111
03a14     AF F0 03 F6 | 	mov	ptra, fp
03a18     BF 00 A0 FD | 	call	#popregs_
03a1c                 | _retrocog_spin2_serialcog_ret
03a1c     2D 00 64 FD | 	ret
03a20                 | 
03a20                 | '       
03a20                 | ' 
03a20                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03a20                 | ' 
03a20                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03a20                 | _retrocog_spin2_serial_start
03a20     04 5A 05 F6 | 	mov	COUNT_, #4
03a24     B0 00 A0 FD | 	call	#pushregs_
03a28     2E 6B 02 F6 | 	mov	local01, arg01
03a2c     2F 6D 02 F6 | 	mov	local02, arg02
03a30                 | ' 
03a30                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03a30     14 5C 06 FB | 	rdlong	arg01, #20
03a34     10 5E C6 F9 | 	decod	arg02, #16
03a38     2F 5D 02 FD | 	qmul	arg01, arg02
03a3c     19 6E 62 FD | 	getqy	local03
03a40     18 70 62 FD | 	getqx	local04
03a44     28 6E 62 FD | 	setq	local03
03a48     30 71 12 FD | 	qdiv	local04, arg03
03a4c     18 2A 62 FD | 	getqx	result1
03a50     15 61 02 F6 | 	mov	arg03, result1
03a54     FE FF 7F FF 
03a58     00 60 06 F5 | 	and	arg03, ##-1024
03a5c                 | ' bitmode |= 7                                                  ' set bits (8)
03a5c     07 60 46 F5 | 	or	arg03, #7
03a60                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03a60     40 6A 62 FD | 	dirl	local01
03a64     08 00 80 FF 
03a68     35 7D 08 FC | 	wrpin	##4158, local01
03a6c     35 61 12 FC | 	wxpin	arg03, local01
03a70     35 01 28 FC | 	wypin	#0, local01
03a74     41 6A 62 FD | 	dirh	local01
03a78                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03a78     40 6C 62 FD | 	dirl	local02
03a7c     36 F9 08 FC | 	wrpin	#124, local02
03a80     36 61 12 FC | 	wxpin	arg03, local02
03a84     36 01 28 FC | 	wypin	#0, local02
03a88     41 6C 62 FD | 	dirh	local02
03a8c                 | ' pinhigh(rxpin)
03a8c     59 6A 62 FD | 	drvh	local01
03a90     AF F0 03 F6 | 	mov	ptra, fp
03a94     BF 00 A0 FD | 	call	#popregs_
03a98                 | _retrocog_spin2_serial_start_ret
03a98     2D 00 64 FD | 	ret
03a9c                 | 
03a9c                 | ' 
03a9c                 | ' pub rxcheck(pin) : rxbyte | check
03a9c                 | _retrocog_spin2_rxcheck
03a9c     03 5A 05 F6 | 	mov	COUNT_, #3
03aa0     B0 00 A0 FD | 	call	#pushregs_
03aa4     2E 6B 02 F6 | 	mov	local01, arg01
03aa8                 | ' 
03aa8                 | ' '' Check for serial input
03aa8                 | ' '' -- returns -1 if nothing available
03aa8                 | ' 
03aa8                 | '   rxbyte := -1
03aa8     01 6C 66 F6 | 	neg	local02, #1
03aac                 | '   check := pinr(pin)
03aac     35 5D 02 F6 | 	mov	arg01, local01
03ab0     6C 26 B0 FD | 	call	#__system___pinread
03ab4     15 6F 0A F6 | 	mov	local03, result1 wz
03ab8                 | '   if (check)
03ab8                 | '     rxbyte := rdpin(pin) >> 24
03ab8     00 6C 06 56 |  if_ne	mov	local02, #0
03abc     35 6D 8A 5A |  if_ne	rdpin	local02, local01
03ac0     18 6C 46 50 |  if_ne	shr	local02, #24
03ac4     36 2B 02 F6 | 	mov	result1, local02
03ac8     AF F0 03 F6 | 	mov	ptra, fp
03acc     BF 00 A0 FD | 	call	#popregs_
03ad0                 | _retrocog_spin2_rxcheck_ret
03ad0     2D 00 64 FD | 	ret
03ad4                 | 
03ad4                 | _trackerplayer_spin2_initModule
03ad4     3E 5A 05 F6 | 	mov	COUNT_, #62
03ad8     B0 00 A0 FD | 	call	#pushregs_
03adc     24 F1 07 F1 | 	add	ptra, #292
03ae0     AF 5C 62 FC | 	wrlong	arg01, fp
03ae4     04 5E 05 F1 | 	add	fp, #4
03ae8     AF 5E 62 FC | 	wrlong	arg02, fp
03aec     04 5E 85 F1 | 	sub	fp, #4
03af0     AF 6A 02 FB | 	rdlong	local01, fp
03af4     02 00 00 FF 
03af8     38 6A 06 F1 | 	add	local01, ##1080
03afc                 | ' 
03afc                 | '   ' Set some data pointers
03afc                 | '   magicFour      := hubPtr + 1080
03afc     9D 0E 06 F1 | 	add	objptr, #157
03b00     07 6B 62 FC | 	wrlong	local01, objptr
03b04                 | '   nameStr        := hubPtr
03b04     AF 6C 02 FB | 	rdlong	local02, fp
03b08     97 0E 86 F1 | 	sub	objptr, #151
03b0c     07 6D 62 FC | 	wrlong	local02, objptr
03b10     AF 6E 02 FB | 	rdlong	local03, fp
03b14     14 6E 06 F1 | 	add	local03, #20
03b18                 | '   samplesInfoLut := hubPtr + 20
03b18     04 0E 06 F1 | 	add	objptr, #4
03b1c     07 6F 62 FC | 	wrlong	local03, objptr
03b20                 | ' 
03b20                 | '   ' Is this a 31 sample module?
03b20                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03b20     93 0E 06 F1 | 	add	objptr, #147
03b24     07 6D 02 FB | 	rdlong	local02, objptr
03b28     9D 0E 86 F1 | 	sub	objptr, #157
03b2c     36 71 C2 FA | 	rdbyte	local04, local02
03b30     4D 70 0E F2 | 	cmp	local04, #77 wz
03b34     48 01 90 5D |  if_ne	jmp	#LR__0139
03b38     9D 0E 06 F1 | 	add	objptr, #157
03b3c     07 73 02 FB | 	rdlong	local05, objptr
03b40     9D 0E 86 F1 | 	sub	objptr, #157
03b44     02 72 06 F1 | 	add	local05, #2
03b48     39 75 C2 FA | 	rdbyte	local06, local05
03b4c     4B 74 0E F2 | 	cmp	local06, #75 wz
03b50     2C 01 90 5D |  if_ne	jmp	#LR__0139
03b54     AF 76 02 FB | 	rdlong	local07, fp
03b58     01 00 00 FF 
03b5c     B6 77 06 F1 | 	add	local07, ##950
03b60                 | '     songLength          := byte[hubPtr + 950]
03b60     3B 6D C2 FA | 	rdbyte	local02, local07
03b64     9A 0E 06 F1 | 	add	objptr, #154
03b68     07 6D 42 FC | 	wrbyte	local02, objptr
03b6c     AF 78 02 FB | 	rdlong	local08, fp
03b70     01 00 00 FF 
03b74     B7 79 06 F1 | 	add	local08, ##951
03b78                 | '     unknown1            := byte[hubPtr + 951]
03b78     3C 6D C2 FA | 	rdbyte	local02, local08
03b7c     02 0E 06 F1 | 	add	objptr, #2
03b80     07 6D 42 FC | 	wrbyte	local02, objptr
03b84     AF 7A 02 FB | 	rdlong	local09, fp
03b88     01 00 00 FF 
03b8c     B8 7B 06 F1 | 	add	local09, ##952
03b90                 | '     songPositionsLut    :=      hubPtr + 952
03b90     06 0E 86 F1 | 	sub	objptr, #6
03b94     07 7B 62 FC | 	wrlong	local09, objptr
03b98     AF 7C 02 FB | 	rdlong	local10, fp
03b9c     02 00 00 FF 
03ba0     3C 7C 06 F1 | 	add	local10, ##1084
03ba4                 | '     patternsData        :=      hubPtr + 1084
03ba4     04 0E 86 F1 | 	sub	objptr, #4
03ba8     07 7D 62 FC | 	wrlong	local10, objptr
03bac                 | '     numberOfInstruments := 31
03bac     14 0E 06 F1 | 	add	objptr, #20
03bb0     07 3F 48 FC | 	wrbyte	#31, objptr
03bb4                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03bb4     0B 0E 86 F1 | 	sub	objptr, #11
03bb8     07 01 48 FC | 	wrbyte	#0, objptr
03bbc     9B 0E 86 F1 | 	sub	objptr, #155
03bc0                 | '     repeat i from 952 to 1079
03bc0     08 5E 05 F1 | 	add	fp, #8
03bc4     01 00 80 FF 
03bc8     AF 70 6B FC | 	wrlong	##952, fp
03bcc     08 5E 85 F1 | 	sub	fp, #8
03bd0     9C C4 9F FE | 	loc	pa,	#(@LR__0138-@LR__0136)
03bd4     93 00 A0 FD | 	call	#FCACHE_LOAD_
03bd8                 | LR__0136
03bd8                 | '       if byte[hubPtr][i] > numberOfPatterns
03bd8     AF 7E 02 FB | 	rdlong	local11, fp
03bdc     08 5E 05 F1 | 	add	fp, #8
03be0     AF 70 02 FB | 	rdlong	local04, fp
03be4     08 5E 85 F1 | 	sub	fp, #8
03be8     3F 71 02 F1 | 	add	local04, local11
03bec     38 75 C2 FA | 	rdbyte	local06, local04
03bf0     9B 0E 06 F1 | 	add	objptr, #155
03bf4     07 81 C2 FA | 	rdbyte	local12, objptr
03bf8     9B 0E 86 F1 | 	sub	objptr, #155
03bfc     40 75 5A F2 | 	cmps	local06, local12 wcz
03c00     24 00 90 ED |  if_be	jmp	#LR__0137
03c04     AF 7E 02 FB | 	rdlong	local11, fp
03c08     08 5E 05 F1 | 	add	fp, #8
03c0c     AF 82 02 FB | 	rdlong	local13, fp
03c10     08 5E 85 F1 | 	sub	fp, #8
03c14     3F 83 02 F1 | 	add	local13, local11
03c18                 | '         numberOfPatterns := byte[hubPtr][i]
03c18     41 85 C2 FA | 	rdbyte	local14, local13
03c1c     9B 0E 06 F1 | 	add	objptr, #155
03c20     07 85 42 FC | 	wrbyte	local14, objptr
03c24     9B 0E 86 F1 | 	sub	objptr, #155
03c28                 | LR__0137
03c28     08 5E 05 F1 | 	add	fp, #8
03c2c     AF 84 02 FB | 	rdlong	local14, fp
03c30     01 84 06 F1 | 	add	local14, #1
03c34     AF 84 62 FC | 	wrlong	local14, fp
03c38     08 5E 85 F1 | 	sub	fp, #8
03c3c     02 00 00 FF 
03c40     38 84 5E F2 | 	cmps	local14, ##1080 wcz
03c44     90 FF 9F CD |  if_b	jmp	#LR__0136
03c48                 | LR__0138
03c48                 | '     numberOfPatterns++
03c48     9B 0E 06 F1 | 	add	objptr, #155
03c4c     07 85 C2 FA | 	rdbyte	local14, objptr
03c50     07 71 C2 FA | 	rdbyte	local04, objptr
03c54     01 70 06 F1 | 	add	local04, #1
03c58     07 71 42 FC | 	wrbyte	local04, objptr
03c5c     07 87 C2 FA | 	rdbyte	local15, objptr
03c60     0A 86 66 F0 | 	shl	local15, #10
03c64     09 0E 86 F1 | 	sub	objptr, #9
03c68     07 89 02 FB | 	rdlong	local16, objptr
03c6c     43 89 02 F1 | 	add	local16, local15
03c70                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03c70     84 0E 86 F1 | 	sub	objptr, #132
03c74     07 89 62 FC | 	wrlong	local16, objptr
03c78     0E 0E 86 F1 | 	sub	objptr, #14
03c7c                 | ' 
03c7c                 | '   ' This must be an oldschool 15 sample soundtracker module
03c7c                 | '   else
03c7c     18 01 90 FD | 	jmp	#LR__0143
03c80                 | LR__0139
03c80     AF 8A 02 FB | 	rdlong	local17, fp
03c84     D6 8B 06 F1 | 	add	local17, #470
03c88                 | '     songLength          := byte[hubPtr + 470]
03c88     45 6D C2 FA | 	rdbyte	local02, local17
03c8c     9A 0E 06 F1 | 	add	objptr, #154
03c90     07 6D 42 FC | 	wrbyte	local02, objptr
03c94     AF 8C 02 FB | 	rdlong	local18, fp
03c98     D7 8D 06 F1 | 	add	local18, #471
03c9c                 | '     unknown1            := byte[hubPtr + 471]
03c9c     46 6D C2 FA | 	rdbyte	local02, local18
03ca0     02 0E 06 F1 | 	add	objptr, #2
03ca4     07 6D 42 FC | 	wrbyte	local02, objptr
03ca8     AF 8E 02 FB | 	rdlong	local19, fp
03cac     D8 8F 06 F1 | 	add	local19, #472
03cb0                 | '     songPositionsLut    :=      hubPtr + 472
03cb0     06 0E 86 F1 | 	sub	objptr, #6
03cb4     07 8F 62 FC | 	wrlong	local19, objptr
03cb8     AF 90 02 FB | 	rdlong	local20, fp
03cbc     01 00 00 FF 
03cc0     58 90 06 F1 | 	add	local20, ##600
03cc4                 | '     patternsData        :=      hubPtr + 600
03cc4     04 0E 86 F1 | 	sub	objptr, #4
03cc8     07 91 62 FC | 	wrlong	local20, objptr
03ccc                 | '     numberOfInstruments := 15
03ccc     14 0E 06 F1 | 	add	objptr, #20
03cd0     07 1F 48 FC | 	wrbyte	#15, objptr
03cd4                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03cd4     0B 0E 86 F1 | 	sub	objptr, #11
03cd8     07 01 48 FC | 	wrbyte	#0, objptr
03cdc     9B 0E 86 F1 | 	sub	objptr, #155
03ce0                 | '     repeat i from 472 to 599
03ce0     08 5E 05 F1 | 	add	fp, #8
03ce4     AF B0 6B FC | 	wrlong	#472, fp
03ce8     08 5E 85 F1 | 	sub	fp, #8
03cec     80 C3 9F FE | 	loc	pa,	#(@LR__0142-@LR__0140)
03cf0     93 00 A0 FD | 	call	#FCACHE_LOAD_
03cf4                 | LR__0140
03cf4                 | '       if byte[hubPtr][i] > numberOfPatterns
03cf4     AF 7E 02 FB | 	rdlong	local11, fp
03cf8     08 5E 05 F1 | 	add	fp, #8
03cfc     AF 70 02 FB | 	rdlong	local04, fp
03d00     08 5E 85 F1 | 	sub	fp, #8
03d04     3F 71 02 F1 | 	add	local04, local11
03d08     38 75 C2 FA | 	rdbyte	local06, local04
03d0c     9B 0E 06 F1 | 	add	objptr, #155
03d10     07 81 C2 FA | 	rdbyte	local12, objptr
03d14     9B 0E 86 F1 | 	sub	objptr, #155
03d18     40 75 5A F2 | 	cmps	local06, local12 wcz
03d1c     24 00 90 ED |  if_be	jmp	#LR__0141
03d20     AF 7E 02 FB | 	rdlong	local11, fp
03d24     08 5E 05 F1 | 	add	fp, #8
03d28     AF 92 02 FB | 	rdlong	local21, fp
03d2c     08 5E 85 F1 | 	sub	fp, #8
03d30     3F 93 02 F1 | 	add	local21, local11
03d34                 | '         numberOfPatterns := byte[hubPtr][i]
03d34     49 85 C2 FA | 	rdbyte	local14, local21
03d38     9B 0E 06 F1 | 	add	objptr, #155
03d3c     07 85 42 FC | 	wrbyte	local14, objptr
03d40     9B 0E 86 F1 | 	sub	objptr, #155
03d44                 | LR__0141
03d44     08 5E 05 F1 | 	add	fp, #8
03d48     AF 84 02 FB | 	rdlong	local14, fp
03d4c     01 84 06 F1 | 	add	local14, #1
03d50     AF 84 62 FC | 	wrlong	local14, fp
03d54     08 5E 85 F1 | 	sub	fp, #8
03d58     01 00 00 FF 
03d5c     58 84 5E F2 | 	cmps	local14, ##600 wcz
03d60     90 FF 9F CD |  if_b	jmp	#LR__0140
03d64                 | LR__0142
03d64                 | '     numberOfPatterns++
03d64     9B 0E 06 F1 | 	add	objptr, #155
03d68     07 85 C2 FA | 	rdbyte	local14, objptr
03d6c     07 71 C2 FA | 	rdbyte	local04, objptr
03d70     01 70 06 F1 | 	add	local04, #1
03d74     07 71 42 FC | 	wrbyte	local04, objptr
03d78     07 95 C2 FA | 	rdbyte	local22, objptr
03d7c     0A 94 66 F0 | 	shl	local22, #10
03d80     09 0E 86 F1 | 	sub	objptr, #9
03d84     07 97 02 FB | 	rdlong	local23, objptr
03d88     4A 97 02 F1 | 	add	local23, local22
03d8c                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03d8c     84 0E 86 F1 | 	sub	objptr, #132
03d90     07 97 62 FC | 	wrlong	local23, objptr
03d94     0E 0E 86 F1 | 	sub	objptr, #14
03d98                 | LR__0143
03d98                 | ' 
03d98                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03d98                 | '   tmpPtr := sampleDataPtr
03d98     0E 0E 06 F1 | 	add	objptr, #14
03d9c     07 6D 02 FB | 	rdlong	local02, objptr
03da0     0C 5E 05 F1 | 	add	fp, #12
03da4     AF 6C 62 FC | 	wrlong	local02, fp
03da8                 | '   repeat i from 1 to numberOfInstruments
03da8     04 5E 85 F1 | 	sub	fp, #4
03dac     AF 02 68 FC | 	wrlong	#1, fp
03db0     08 5E 85 F1 | 	sub	fp, #8
03db4     98 0E 06 F1 | 	add	objptr, #152
03db8     07 71 C2 FA | 	rdbyte	local04, objptr
03dbc     01 70 5E F2 | 	cmps	local04, #1 wcz
03dc0     01 84 06 16 |  if_a	mov	local14, #1
03dc4     01 84 66 E6 |  if_be	neg	local14, #1
03dc8     42 99 02 F6 | 	mov	local24, local14
03dcc     07 9B C2 FA | 	rdbyte	local25, objptr
03dd0     A6 0E 86 F1 | 	sub	objptr, #166
03dd4     4C 9B 02 F1 | 	add	local25, local24
03dd8                 | LR__0144
03dd8     08 5E 05 F1 | 	add	fp, #8
03ddc     AF 9C 02 FB | 	rdlong	local26, fp
03de0     01 9C 86 F1 | 	sub	local26, #1
03de4     02 9C 66 F0 | 	shl	local26, #2
03de8     12 0E 06 F1 | 	add	objptr, #18
03dec     07 9D 02 F1 | 	add	local26, objptr
03df0                 | '     samplesPtrLut[i-1] := tmpPtr
03df0     04 5E 05 F1 | 	add	fp, #4
03df4     AF 80 02 FB | 	rdlong	local12, fp
03df8     4E 81 62 FC | 	wrlong	local12, local26
03dfc     18 5E 05 F1 | 	add	fp, #24
03e00     AF 5E 02 F6 | 	mov	arg02, fp
03e04     14 5E 85 F1 | 	sub	fp, #20
03e08     AF 60 02 F6 | 	mov	arg03, fp
03e0c     04 5E 05 F1 | 	add	fp, #4
03e10     AF 62 02 F6 | 	mov	arg04, fp
03e14     04 5E 05 F1 | 	add	fp, #4
03e18     AF 64 02 F6 | 	mov	arg05, fp
03e1c     04 5E 05 F1 | 	add	fp, #4
03e20     AF 66 02 F6 | 	mov	arg06, fp
03e24     04 5E 05 F1 | 	add	fp, #4
03e28     AF 68 02 F6 | 	mov	arg07, fp
03e2c                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03e2c     18 5E 85 F1 | 	sub	fp, #24
03e30     AF 5C 02 FB | 	rdlong	arg01, fp
03e34     08 5E 85 F1 | 	sub	fp, #8
03e38     12 0E 86 F1 | 	sub	objptr, #18
03e3c     A0 07 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03e40                 | '     tmpPtr += samLength
03e40     0C 5E 05 F1 | 	add	fp, #12
03e44     AF 80 02 FB | 	rdlong	local12, fp
03e48     04 5E 05 F1 | 	add	fp, #4
03e4c     AF 9E 02 FB | 	rdlong	local27, fp
03e50     4F 81 02 F1 | 	add	local12, local27
03e54     04 5E 85 F1 | 	sub	fp, #4
03e58     AF 80 62 FC | 	wrlong	local12, fp
03e5c     04 5E 85 F1 | 	sub	fp, #4
03e60     AF 80 02 FB | 	rdlong	local12, fp
03e64     4C 81 02 F1 | 	add	local12, local24
03e68     AF 80 62 FC | 	wrlong	local12, fp
03e6c     08 5E 85 F1 | 	sub	fp, #8
03e70     4D 81 0A F2 | 	cmp	local12, local25 wz
03e74     60 FF 9F 5D |  if_ne	jmp	#LR__0144
03e78                 | ' 
03e78                 | '   ' Below this point, all play routine variables are resest to their default values
03e78                 | '   tickCounter                 := 0
03e78     A1 0E 06 F1 | 	add	objptr, #161
03e7c     07 01 48 FC | 	wrbyte	#0, objptr
03e80                 | '   patternRow                  := 0
03e80     01 0E 06 F1 | 	add	objptr, #1
03e84     07 01 48 FC | 	wrbyte	#0, objptr
03e88                 | '   songPosition                := startPattern
03e88     04 5E 05 F1 | 	add	fp, #4
03e8c     AF 6C 02 FB | 	rdlong	local02, fp
03e90     04 5E 85 F1 | 	sub	fp, #4
03e94     01 0E 06 F1 | 	add	objptr, #1
03e98     07 6D 42 FC | 	wrbyte	local02, objptr
03e9c                 | '   currentSongSpeed            := 6
03e9c     01 0E 06 F1 | 	add	objptr, #1
03ea0     07 0D 48 FC | 	wrbyte	#6, objptr
03ea4                 | '   patternDelay                := 0
03ea4     01 0E 06 F1 | 	add	objptr, #1
03ea8     07 01 48 FC | 	wrbyte	#0, objptr
03eac                 | '   ticksPerMinute              := 50 * 60
03eac     02 0F 06 F1 | 	add	objptr, #258
03eb0     05 00 80 FF 
03eb4     07 71 6B FC | 	wrlong	##3000, objptr
03eb8     A7 0F 86 F1 | 	sub	objptr, #423
03ebc     07 0B 03 FB | 	rdlong	muldiva_, objptr
03ec0     32 0C 07 F6 | 	mov	muldivb_, #50
03ec4     D0 00 A0 FD | 	call	#divide_
03ec8                 | '   cyclesToWait                := systemClock / 50
03ec8     AB 0F 06 F1 | 	add	objptr, #427
03ecc     07 0D 63 FC | 	wrlong	muldivb_, objptr
03ed0                 | '   sampleNumber_memory         := 0
03ed0     35 0E 06 F1 | 	add	objptr, #53
03ed4     07 01 48 FC | 	wrbyte	#0, objptr
03ed8                 | '   lpFilter                    := 0
03ed8     25 0E 86 F1 | 	sub	objptr, #37
03edc     07 01 48 FC | 	wrbyte	#0, objptr
03ee0                 | '   cmdD_memoryX                := 0
03ee0     29 0E 06 F1 | 	add	objptr, #41
03ee4     07 01 48 FC | 	wrbyte	#0, objptr
03ee8                 | '   cmdD_memoryY                := 0
03ee8     01 0E 06 F1 | 	add	objptr, #1
03eec     07 01 48 FC | 	wrbyte	#0, objptr
03ef0                 | '   cmdD_updatePosition         := false
03ef0     01 0E 06 F1 | 	add	objptr, #1
03ef4     07 01 48 FC | 	wrbyte	#0, objptr
03ef8                 | '   cmdB_memoryZ                := 0
03ef8     01 0E 06 F1 | 	add	objptr, #1
03efc     07 01 48 FC | 	wrbyte	#0, objptr
03f00                 | '   cmdB_updatePosition         := false
03f00     01 0E 06 F1 | 	add	objptr, #1
03f04     07 01 48 FC | 	wrbyte	#0, objptr
03f08                 | '   cmdE6_updatePositionCommon  := false
03f08     0D 0E 06 F1 | 	add	objptr, #13
03f0c     07 01 48 FC | 	wrbyte	#0, objptr
03f10     F5 0F 86 F1 | 	sub	objptr, #501
03f14                 | ' 
03f14                 | '   repeat i from 0 to LAST_CHANNEL
03f14     08 5E 05 F1 | 	add	fp, #8
03f18     AF 00 68 FC | 	wrlong	#0, fp
03f1c     08 5E 85 F1 | 	sub	fp, #8
03f20                 | LR__0145
03f20     08 5E 05 F1 | 	add	fp, #8
03f24     AF A0 02 FB | 	rdlong	local28, fp
03f28     01 A0 66 F0 | 	shl	local28, #1
03f2c     D7 0E 06 F1 | 	add	objptr, #215
03f30     07 A1 02 F1 | 	add	local28, objptr
03f34                 | ' 
03f34                 | '     currRepeatPoint[i]        := 0
03f34     50 01 58 FC | 	wrword	#0, local28
03f38     AF A2 02 FB | 	rdlong	local29, fp
03f3c     01 A2 66 F0 | 	shl	local29, #1
03f40     1C 0E 86 F1 | 	sub	objptr, #28
03f44     07 A3 02 F1 | 	add	local29, objptr
03f48                 | '     currSampleLength[i]       := 4
03f48     51 09 58 FC | 	wrword	#4, local29
03f4c     14 A5 02 F6 | 	mov	local30, ptr__trackerplayer_spin2_dat__
03f50     AF A6 02 FB | 	rdlong	local31, fp
03f54     02 A6 66 F0 | 	shl	local31, #2
03f58     14 0E 86 F1 | 	sub	objptr, #20
03f5c     07 A7 02 F1 | 	add	local31, objptr
03f60                 | '     currSamplePtr[i]          := @null
03f60     53 A5 62 FC | 	wrlong	local30, local31
03f64     AF A8 02 FB | 	rdlong	local32, fp
03f68     10 0E 06 F1 | 	add	objptr, #16
03f6c     07 A9 02 F1 | 	add	local32, objptr
03f70                 | '     currSampleNr[i]           := 0
03f70     54 01 48 FC | 	wrbyte	#0, local32
03f74     AF AA 02 FB | 	rdlong	local33, fp
03f78     02 AA 66 F0 | 	shl	local33, #2
03f7c     0C 0E 06 F1 | 	add	objptr, #12
03f80     07 AB 02 F1 | 	add	local33, objptr
03f84                 | '     currRepeatLength[i]       := 1
03f84     55 03 68 FC | 	wrlong	#1, local33
03f88     AF AC 02 FB | 	rdlong	local34, fp
03f8c     02 AC 66 F0 | 	shl	local34, #2
03f90     1C 0E 06 F1 | 	add	objptr, #28
03f94     07 AD 02 F1 | 	add	local34, objptr
03f98                 | '     currPeriod[i]             := 400
03f98     56 21 6B FC | 	wrlong	#400, local34
03f9c     AF AE 02 FB | 	rdlong	local35, fp
03fa0     02 AE 66 F0 | 	shl	local35, #2
03fa4     48 0E 06 F1 | 	add	objptr, #72
03fa8     07 AF 02 F1 | 	add	local35, objptr
03fac                 | '     lastSetPeriod[i]          := 400
03fac     57 21 6B FC | 	wrlong	#400, local35
03fb0     AF B0 02 FB | 	rdlong	local36, fp
03fb4     02 B0 66 F0 | 	shl	local36, #2
03fb8     10 0E 06 F1 | 	add	objptr, #16
03fbc     07 B1 02 F1 | 	add	local36, objptr
03fc0                 | '     lastSetSamplePtr[i]       := 0
03fc0     58 01 68 FC | 	wrlong	#0, local36
03fc4     AF B2 02 FB | 	rdlong	local37, fp
03fc8     02 B2 66 F0 | 	shl	local37, #2
03fcc     10 0E 06 F1 | 	add	objptr, #16
03fd0     07 B3 02 F1 | 	add	local37, objptr
03fd4                 | '     lastSetSampleNr[i]        := 0
03fd4     59 01 68 FC | 	wrlong	#0, local37
03fd8     AF B4 02 FB | 	rdlong	local38, fp
03fdc     02 B4 66 F0 | 	shl	local38, #2
03fe0     10 0E 06 F1 | 	add	objptr, #16
03fe4     07 B5 02 F1 | 	add	local38, objptr
03fe8                 | '     lastSetSampleLength[i]    := 0
03fe8     5A 01 68 FC | 	wrlong	#0, local38
03fec     AF B6 02 FB | 	rdlong	local39, fp
03ff0     02 B6 66 F0 | 	shl	local39, #2
03ff4     10 0E 06 F1 | 	add	objptr, #16
03ff8     07 B7 02 F1 | 	add	local39, objptr
03ffc                 | '     lastSetRepeatLength[i]    := 0
03ffc     5B 01 68 FC | 	wrlong	#0, local39
04000     AF B8 02 FB | 	rdlong	local40, fp
04004     02 B8 66 F0 | 	shl	local40, #2
04008     10 0E 06 F1 | 	add	objptr, #16
0400c     07 B9 02 F1 | 	add	local40, objptr
04010                 | '     lastSetRepeatPoint[i]     := 0
04010     5C 01 68 FC | 	wrlong	#0, local40
04014     AF BA 02 FB | 	rdlong	local41, fp
04018     02 BA 66 F0 | 	shl	local41, #2
0401c     78 0E 86 F1 | 	sub	objptr, #120
04020     07 BB 02 F1 | 	add	local41, objptr
04024                 | '     currVolume[i]             := 0
04024     5D 01 68 FC | 	wrlong	#0, local41
04028     AF BC 02 FB | 	rdlong	local42, fp
0402c     01 BC 66 F0 | 	shl	local42, #1
04030     20 0E 06 F1 | 	add	objptr, #32
04034     07 BD 02 F1 | 	add	local42, objptr
04038                 | '     currPanning[i]            := 0
04038     5E 01 58 FC | 	wrword	#0, local42
0403c     AF BE 02 FB | 	rdlong	local43, fp
04040     A9 0E 06 F1 | 	add	objptr, #169
04044     07 BF 02 F1 | 	add	local43, objptr
04048                 | '     cmd3_memoryZ[i]           := 0
04048     5F 01 48 FC | 	wrbyte	#0, local43
0404c     AF C0 02 FB | 	rdlong	local44, fp
04050     04 0E 06 F1 | 	add	objptr, #4
04054     07 C1 02 F1 | 	add	local44, objptr
04058                 | '     cmd4_memoryY[i]           := 0
04058     60 01 48 FC | 	wrbyte	#0, local44
0405c     AF C2 02 FB | 	rdlong	local45, fp
04060     04 0E 06 F1 | 	add	objptr, #4
04064     07 C3 02 F1 | 	add	local45, objptr
04068                 | '     cmd4_memoryX[i]           := 0
04068     61 01 48 FC | 	wrbyte	#0, local45
0406c     AF C4 02 FB | 	rdlong	local46, fp
04070     04 0E 06 F1 | 	add	objptr, #4
04074     07 C5 02 F1 | 	add	local46, objptr
04078                 | '     cmd7_memoryY[i]           := 0
04078     62 01 48 FC | 	wrbyte	#0, local46
0407c     AF C6 02 FB | 	rdlong	local47, fp
04080     04 0E 06 F1 | 	add	objptr, #4
04084     07 C7 02 F1 | 	add	local47, objptr
04088                 | '     cmd7_memoryX[i]           := 0
04088     63 01 48 FC | 	wrbyte	#0, local47
0408c     AF C8 02 FB | 	rdlong	local48, fp
04090     04 0E 06 F1 | 	add	objptr, #4
04094     07 C9 02 F1 | 	add	local48, objptr
04098                 | '     cmd9_memoryZ[i]           := 0
04098     64 01 48 FC | 	wrbyte	#0, local48
0409c     AF CA 02 FB | 	rdlong	local49, fp
040a0     0D 0E 06 F1 | 	add	objptr, #13
040a4     07 CB 02 F1 | 	add	local49, objptr
040a8                 | '     cmdE6_memory[i]           := 0
040a8     65 01 48 FC | 	wrbyte	#0, local49
040ac     AF CC 02 FB | 	rdlong	local50, fp
040b0     04 0E 06 F1 | 	add	objptr, #4
040b4     07 CD 02 F1 | 	add	local50, objptr
040b8                 | '     cmdE6_counter[i]          := 0
040b8     66 01 48 FC | 	wrbyte	#0, local50
040bc     AF CE 02 FB | 	rdlong	local51, fp
040c0     04 0E 06 F1 | 	add	objptr, #4
040c4     07 CF 02 F1 | 	add	local51, objptr
040c8                 | '     cmdE6_updatePosition[i]   := false
040c8     67 01 48 FC | 	wrbyte	#0, local51
040cc     AF D0 02 FB | 	rdlong	local52, fp
040d0     11 0E 86 F1 | 	sub	objptr, #17
040d4     07 D1 02 F1 | 	add	local52, objptr
040d8                 | '     sampleNumber_memory[i]    := 0
040d8     68 01 48 FC | 	wrbyte	#0, local52
040dc     AF D2 02 FB | 	rdlong	local53, fp
040e0     59 0E 86 F1 | 	sub	objptr, #89
040e4     07 D3 02 F1 | 	add	local53, objptr
040e8                 | '     vibratoPos[i]             := 0
040e8     69 01 48 FC | 	wrbyte	#0, local53
040ec     AF D4 02 FB | 	rdlong	local54, fp
040f0     02 D4 66 F0 | 	shl	local54, #2
040f4     10 0E 06 F1 | 	add	objptr, #16
040f8     07 D5 02 F1 | 	add	local54, objptr
040fc                 | '     portamentoPeriodMemory[i] := 0
040fc     6A 01 68 FC | 	wrlong	#0, local54
04100     AF D6 02 FB | 	rdlong	local55, fp
04104     25 0E 06 F1 | 	add	objptr, #37
04108     07 D7 02 F1 | 	add	local55, objptr
0410c                 | '     portaGlissando[i]         := 0
0410c     6B 01 48 FC | 	wrbyte	#0, local55
04110     AF D8 02 FB | 	rdlong	local56, fp
04114     04 0E 06 F1 | 	add	objptr, #4
04118     07 D9 02 F1 | 	add	local56, objptr
0411c                 | '     vibratoType[i]            := 0
0411c     6C 01 48 FC | 	wrbyte	#0, local56
04120     AF DA 02 FB | 	rdlong	local57, fp
04124     04 0E 06 F1 | 	add	objptr, #4
04128     07 DB 02 F1 | 	add	local57, objptr
0412c                 | '     tremoloType[i]            := 0
0412c     6D 01 48 FC | 	wrbyte	#0, local57
04130     AF DC 02 FB | 	rdlong	local58, fp
04134     39 0E 86 F1 | 	sub	objptr, #57
04138     07 DD 02 F1 | 	add	local58, objptr
0413c                 | '     tremoloPos[i]             := 0
0413c     6E 01 48 FC | 	wrbyte	#0, local58
04140     AF DE 02 FB | 	rdlong	local59, fp
04144     02 DE 66 F0 | 	shl	local59, #2
04148     7C 0E 86 F1 | 	sub	objptr, #124
0414c     07 DF 02 F1 | 	add	local59, objptr
04150                 | '     deltaVolume[i]            := 0
04150     6F 01 68 FC | 	wrlong	#0, local59
04154     AF E0 02 FB | 	rdlong	local60, fp
04158     02 E0 66 F0 | 	shl	local60, #2
0415c     20 0E 86 F1 | 	sub	objptr, #32
04160     07 E1 02 F1 | 	add	local60, objptr
04164                 | '     deltaPeriod[i]            := 0
04164     70 01 68 FC | 	wrlong	#0, local60
04168     AF E2 02 FB | 	rdlong	local61, fp
0416c     A0 0E 06 F1 | 	add	objptr, #160
04170     07 E3 02 F1 | 	add	local61, objptr
04174                 | '     resetTremolo[i]           := 0
04174     71 01 48 FC | 	wrbyte	#0, local61
04178     AF E4 02 FB | 	rdlong	local62, fp
0417c     04 0E 06 F1 | 	add	objptr, #4
04180     07 E5 02 F1 | 	add	local62, objptr
04184                 | '     resetVibrato[i]           := 0
04184     72 01 48 FC | 	wrbyte	#0, local62
04188     AF 84 02 FB | 	rdlong	local14, fp
0418c     01 84 06 F1 | 	add	local14, #1
04190     AF 84 62 FC | 	wrlong	local14, fp
04194     08 5E 85 F1 | 	sub	fp, #8
04198     04 84 5E F2 | 	cmps	local14, #4 wcz
0419c     93 0F 86 F1 | 	sub	objptr, #403
041a0     7C FD 9F CD |  if_b	jmp	#LR__0145
041a4     AF F0 03 F6 | 	mov	ptra, fp
041a8     BF 00 A0 FD | 	call	#popregs_
041ac                 | _trackerplayer_spin2_initModule_ret
041ac     2D 00 64 FD | 	ret
041b0                 | 
041b0                 | ' 
041b0                 | ' 
041b0                 | ' ' This routine needs to be ticked X number of times per second
041b0                 | ' ' in order to advance the tracker play routine
041b0                 | ' '
041b0                 | ' PUB tick() | channel, sampleNumber, period, effect, i
041b0                 | _trackerplayer_spin2_tick
041b0     12 5A 05 F6 | 	mov	COUNT_, #18
041b4     B0 00 A0 FD | 	call	#pushregs_
041b8     30 F0 07 F1 | 	add	ptra, #48
041bc                 | ' 
041bc                 | '   if currentSongSpeed == 0
041bc     A4 0E 06 F1 | 	add	objptr, #164
041c0     07 6B CA FA | 	rdbyte	local01, objptr wz
041c4     A4 0E 86 F1 | 	sub	objptr, #164
041c8                 | '     return
041c8     34 03 90 AD |  if_e	jmp	#LR__0157
041cc                 | ' 
041cc                 | '   ' Iterate over the channels and process everything
041cc                 | '   repeat channel from 0 to LAST_CHANNEL
041cc     AF 00 68 FC | 	wrlong	#0, fp
041d0                 | LR__0146
041d0     04 5E 05 F1 | 	add	fp, #4
041d4     AF 62 02 F6 | 	mov	arg04, fp
041d8     04 5E 05 F1 | 	add	fp, #4
041dc     AF 64 02 F6 | 	mov	arg05, fp
041e0     04 5E 05 F1 | 	add	fp, #4
041e4     AF 66 02 F6 | 	mov	arg06, fp
041e8     0C 5E 85 F1 | 	sub	fp, #12
041ec                 | ' 
041ec                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
041ec     AF 5C 02 FB | 	rdlong	arg01, fp
041f0     A3 0E 06 F1 | 	add	objptr, #163
041f4     07 5F C2 FA | 	rdbyte	arg02, objptr
041f8     01 0E 86 F1 | 	sub	objptr, #1
041fc     07 61 C2 FA | 	rdbyte	arg03, objptr
04200     7F 5E 06 F5 | 	and	arg02, #127
04204     0C 0E 86 F1 | 	sub	objptr, #12
04208     07 6D 02 FB | 	rdlong	local02, objptr
0420c     36 5F 02 F1 | 	add	arg02, local02
04210                 | ' 
04210                 | '   ' Get the note data for a specific channel/song position/pattern row
04210                 | '   patternNumber := byte[songPositionsLut][position & 127]
04210     2F 6F C2 FA | 	rdbyte	local03, arg02
04214     0A 6E 66 F0 | 	shl	local03, #10
04218     04 0E 86 F1 | 	sub	objptr, #4
0421c     07 71 02 FB | 	rdlong	local04, objptr
04220     92 0E 86 F1 | 	sub	objptr, #146
04224     37 71 02 F1 | 	add	local04, local03
04228                 | '   patternPtr    := patternsData + (patternNumber << 10)
04228     3F 60 06 F5 | 	and	arg03, #63
0422c     04 60 66 F0 | 	shl	arg03, #4
04230     30 71 02 F1 | 	add	local04, arg03
04234     03 5C 06 F5 | 	and	arg01, #3
04238     02 5C 66 F0 | 	shl	arg01, #2
0423c     2E 71 02 F1 | 	add	local04, arg01
04240                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
04240     38 73 C2 FA | 	rdbyte	local05, local04
04244     18 72 66 F0 | 	shl	local05, #24
04248     01 70 06 F1 | 	add	local04, #1
0424c     38 75 C2 FA | 	rdbyte	local06, local04
04250     10 74 66 F0 | 	shl	local06, #16
04254     3A 73 42 F5 | 	or	local05, local06
04258     01 70 06 F1 | 	add	local04, #1
0425c     38 77 C2 FA | 	rdbyte	local07, local04
04260     08 76 66 F0 | 	shl	local07, #8
04264     3B 73 42 F5 | 	or	local05, local07
04268     01 70 06 F1 | 	add	local04, #1
0426c     38 79 C2 FA | 	rdbyte	local08, local04
04270     3C 73 42 F5 | 	or	local05, local08
04274                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
04274     39 7B 02 F6 | 	mov	local09, local05
04278     0C 7A 46 F0 | 	shr	local09, #12
0427c     0F 7A 06 F5 | 	and	local09, #15
04280     39 7D 02 F6 | 	mov	local10, local05
04284     18 7C 46 F0 | 	shr	local10, #24
04288     F0 7C 06 F5 | 	and	local10, #240
0428c     3E 7B 42 F5 | 	or	local09, local10
04290                 | ' 
04290                 | '   ' Extract the different sub parts from the data
04290                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
04290     31 7B 62 FC | 	wrlong	local09, arg04
04294     39 7F 02 F6 | 	mov	local11, local05
04298     10 7E 46 F0 | 	shr	local11, #16
0429c     07 00 00 FF 
042a0     FF 7F 06 F5 | 	and	local11, ##4095
042a4                 | '   long[period]       :=  (data >> 16) & $FFF
042a4     32 7F 62 FC | 	wrlong	local11, arg05
042a8     07 00 00 FF 
042ac     FF 73 06 F5 | 	and	local05, ##4095
042b0                 | '   long[effect]       :=   data & $FFF
042b0     33 73 62 FC | 	wrlong	local05, arg06
042b4                 | '     processChannel(channel, sampleNumber, period, effect)
042b4     AF 5C 02 FB | 	rdlong	arg01, fp
042b8     04 5E 05 F1 | 	add	fp, #4
042bc     AF 5E 02 FB | 	rdlong	arg02, fp
042c0     04 5E 05 F1 | 	add	fp, #4
042c4     AF 60 02 FB | 	rdlong	arg03, fp
042c8     04 5E 05 F1 | 	add	fp, #4
042cc     AF 62 02 FB | 	rdlong	arg04, fp
042d0     0C 5E 85 F1 | 	sub	fp, #12
042d4     0C 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
042d8     AF 80 02 FB | 	rdlong	local12, fp
042dc     01 80 06 F1 | 	add	local12, #1
042e0     AF 80 62 FC | 	wrlong	local12, fp
042e4     04 80 5E F2 | 	cmps	local12, #4 wcz
042e8     E4 FE 9F CD |  if_b	jmp	#LR__0146
042ec                 | ' 
042ec                 | '   ' Incrementation the main counter that drives the whole play routine
042ec                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
042ec     A1 0E 06 F1 | 	add	objptr, #161
042f0     07 6B C2 FA | 	rdbyte	local01, objptr
042f4     01 6A 06 F1 | 	add	local01, #1
042f8     07 6B 42 FC | 	wrbyte	local01, objptr
042fc     03 0E 06 F1 | 	add	objptr, #3
04300     07 83 C2 FA | 	rdbyte	local13, objptr
04304     01 0E 06 F1 | 	add	objptr, #1
04308     07 85 C2 FA | 	rdbyte	local14, objptr
0430c     42 83 02 F1 | 	add	local13, local14
04310     04 0E 86 F1 | 	sub	objptr, #4
04314     07 87 C2 FA | 	rdbyte	local15, objptr
04318     A1 0E 86 F1 | 	sub	objptr, #161
0431c     41 87 5A F2 | 	cmps	local15, local13 wcz
04320                 | '     tickCounter := 0
04320     A1 0E 06 31 |  if_ae	add	objptr, #161
04324     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04328     A1 0E 86 31 |  if_ae	sub	objptr, #161
0432c                 | ' 
0432c                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
0432c                 | '   if tickCounter == 0
0432c     A1 0E 06 F1 | 	add	objptr, #161
04330     07 6B CA FA | 	rdbyte	local01, objptr wz
04334     A1 0E 86 F1 | 	sub	objptr, #161
04338     C4 01 90 5D |  if_ne	jmp	#LR__0156
0433c                 | ' 
0433c                 | '     ' Handle the "pattern repeat" command, "E6"
0433c                 | '     if cmdE6_updatePositionCommon
0433c     F5 0F 06 F1 | 	add	objptr, #501
04340     07 6B CA FA | 	rdbyte	local01, objptr wz
04344     F5 0F 86 F1 | 	sub	objptr, #501
04348     8C 00 90 AD |  if_e	jmp	#LR__0150
0434c                 | '       repeat i from 0 to LAST_CHANNEL
0434c     10 5E 05 F1 | 	add	fp, #16
04350     AF 00 68 FC | 	wrlong	#0, fp
04354     10 5E 85 F1 | 	sub	fp, #16
04358     18 BD 9F FE | 	loc	pa,	#(@LR__0149-@LR__0147)
0435c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04360                 | LR__0147
04360                 | '         if cmdE6_updatePosition[i]
04360     10 5E 05 F1 | 	add	fp, #16
04364     AF 80 02 FB | 	rdlong	local12, fp
04368     10 5E 85 F1 | 	sub	fp, #16
0436c     F1 0F 06 F1 | 	add	objptr, #497
04370     07 81 02 F1 | 	add	local12, objptr
04374     40 85 CA FA | 	rdbyte	local14, local12 wz
04378     F1 0F 86 F1 | 	sub	objptr, #497
0437c     24 00 90 AD |  if_e	jmp	#LR__0148
04380     10 5E 05 F1 | 	add	fp, #16
04384     AF 88 02 FB | 	rdlong	local16, fp
04388     10 5E 85 F1 | 	sub	fp, #16
0438c     E9 0F 06 F1 | 	add	objptr, #489
04390     07 89 02 F1 | 	add	local16, objptr
04394                 | '           patternRow := cmdE6_memory[i]
04394     44 81 C2 FA | 	rdbyte	local12, local16
04398     47 0F 86 F1 | 	sub	objptr, #327
0439c     07 81 42 FC | 	wrbyte	local12, objptr
043a0     A2 0E 86 F1 | 	sub	objptr, #162
043a4                 | LR__0148
043a4     10 5E 05 F1 | 	add	fp, #16
043a8     AF 8A 02 FB | 	rdlong	local17, fp
043ac     F1 0F 06 F1 | 	add	objptr, #497
043b0     07 8B 02 F1 | 	add	local17, objptr
043b4                 | '         cmdE6_updatePosition[i] := false
043b4     45 01 48 FC | 	wrbyte	#0, local17
043b8     AF 80 02 FB | 	rdlong	local12, fp
043bc     01 80 06 F1 | 	add	local12, #1
043c0     AF 80 62 FC | 	wrlong	local12, fp
043c4     10 5E 85 F1 | 	sub	fp, #16
043c8     04 80 5E F2 | 	cmps	local12, #4 wcz
043cc     F1 0F 86 F1 | 	sub	objptr, #497
043d0     8C FF 9F CD |  if_b	jmp	#LR__0147
043d4                 | LR__0149
043d4     CC 00 90 FD | 	jmp	#LR__0154
043d8                 | LR__0150
043d8                 | ' 
043d8                 | '     ' Handle the "skip to next pattern with offset command", "D"
043d8                 | '     elseif cmdD_updatePosition
043d8     E6 0F 06 F1 | 	add	objptr, #486
043dc     07 6B CA FA | 	rdbyte	local01, objptr wz
043e0     E6 0F 86 F1 | 	sub	objptr, #486
043e4     64 00 90 AD |  if_e	jmp	#LR__0151
043e8                 | '       if ++songPosition >= songLength
043e8     A3 0E 06 F1 | 	add	objptr, #163
043ec     07 6B C2 FA | 	rdbyte	local01, objptr
043f0     01 6A 06 F1 | 	add	local01, #1
043f4     07 6B 42 FC | 	wrbyte	local01, objptr
043f8     07 83 C2 FA | 	rdbyte	local13, objptr
043fc     09 0E 86 F1 | 	sub	objptr, #9
04400     07 85 C2 FA | 	rdbyte	local14, objptr
04404     9A 0E 86 F1 | 	sub	objptr, #154
04408     42 83 5A F2 | 	cmps	local13, local14 wcz
0440c                 | '         songPosition := 0
0440c     A3 0E 06 31 |  if_ae	add	objptr, #163
04410     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04414     A3 0E 86 31 |  if_ae	sub	objptr, #163
04418     E4 0F 06 F1 | 	add	objptr, #484
0441c     07 81 C2 FA | 	rdbyte	local12, objptr
04420     40 8D 02 F6 | 	mov	local18, local12
04424     02 8C 66 F0 | 	shl	local18, #2
04428     40 8D 02 F1 | 	add	local18, local12
0442c     01 8C 66 F0 | 	shl	local18, #1
04430     01 0E 06 F1 | 	add	objptr, #1
04434     07 81 C2 FA | 	rdbyte	local12, objptr
04438     40 8D 02 F1 | 	add	local18, local12
0443c                 | ' 
0443c                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
0443c     43 0F 86 F1 | 	sub	objptr, #323
04440     07 8D 42 FC | 	wrbyte	local18, objptr
04444     A2 0E 86 F1 | 	sub	objptr, #162
04448                 | ' 
04448                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
04448                 | '     else
04448     58 00 90 FD | 	jmp	#LR__0153
0444c                 | LR__0151
0444c                 | '       if ++patternRow >= PATTERN_LENGTH
0444c     A2 0E 06 F1 | 	add	objptr, #162
04450     07 6B C2 FA | 	rdbyte	local01, objptr
04454     01 6A 06 F1 | 	add	local01, #1
04458     07 6B 42 FC | 	wrbyte	local01, objptr
0445c     07 83 C2 FA | 	rdbyte	local13, objptr
04460     A2 0E 86 F1 | 	sub	objptr, #162
04464     40 82 5E F2 | 	cmps	local13, #64 wcz
04468     38 00 90 CD |  if_b	jmp	#LR__0152
0446c                 | '         patternRow := 0
0446c     A2 0E 06 F1 | 	add	objptr, #162
04470     07 01 48 FC | 	wrbyte	#0, objptr
04474                 | ' 
04474                 | '         if ++songPosition >= songLength
04474     01 0E 06 F1 | 	add	objptr, #1
04478     07 6B C2 FA | 	rdbyte	local01, objptr
0447c     01 6A 06 F1 | 	add	local01, #1
04480     07 6B 42 FC | 	wrbyte	local01, objptr
04484     07 83 C2 FA | 	rdbyte	local13, objptr
04488     09 0E 86 F1 | 	sub	objptr, #9
0448c     07 85 C2 FA | 	rdbyte	local14, objptr
04490     9A 0E 86 F1 | 	sub	objptr, #154
04494     42 83 5A F2 | 	cmps	local13, local14 wcz
04498                 | '           songPosition := 0
04498     A3 0E 06 31 |  if_ae	add	objptr, #163
0449c     07 01 48 3C |  if_ae	wrbyte	#0, objptr
044a0     A3 0E 86 31 |  if_ae	sub	objptr, #163
044a4                 | LR__0152
044a4                 | LR__0153
044a4                 | LR__0154
044a4                 | ' 
044a4                 | '     ' Handle "jump to song position" command, "B"
044a4                 | '     if cmdB_updatePosition
044a4     E8 0F 06 F1 | 	add	objptr, #488
044a8     07 6B CA FA | 	rdbyte	local01, objptr wz
044ac     E8 0F 86 F1 | 	sub	objptr, #488
044b0     28 00 90 AD |  if_e	jmp	#LR__0155
044b4                 | ' 
044b4                 | '       songPosition := cmdB_memoryZ
044b4     E7 0F 06 F1 | 	add	objptr, #487
044b8     07 6B C2 FA | 	rdbyte	local01, objptr
044bc     44 0F 86 F1 | 	sub	objptr, #324
044c0     07 6B 42 FC | 	wrbyte	local01, objptr
044c4                 | ' 
044c4                 | '       ifnot cmdD_updatePosition
044c4     43 0F 06 F1 | 	add	objptr, #323
044c8     07 6B CA FA | 	rdbyte	local01, objptr wz
044cc     E6 0F 86 F1 | 	sub	objptr, #486
044d0                 | '         patternRow := 0
044d0     A2 0E 06 A1 |  if_e	add	objptr, #162
044d4     07 01 48 AC |  if_e	wrbyte	#0, objptr
044d8     A2 0E 86 A1 |  if_e	sub	objptr, #162
044dc                 | LR__0155
044dc                 | ' 
044dc                 | '     ' We need to be sure that all positioning commands are reset for the next tick
044dc                 | '     cmdE6_updatePositionCommon := false
044dc     F5 0F 06 F1 | 	add	objptr, #501
044e0     07 01 48 FC | 	wrbyte	#0, objptr
044e4                 | '     cmdB_updatePosition := false
044e4     0D 0E 86 F1 | 	sub	objptr, #13
044e8     07 01 48 FC | 	wrbyte	#0, objptr
044ec                 | '     cmdD_updatePosition := false
044ec     02 0E 86 F1 | 	sub	objptr, #2
044f0     07 01 48 FC | 	wrbyte	#0, objptr
044f4                 | '     patternDelay := 0
044f4     41 0F 86 F1 | 	sub	objptr, #321
044f8     07 01 48 FC | 	wrbyte	#0, objptr
044fc     A5 0E 86 F1 | 	sub	objptr, #165
04500                 | LR__0156
04500                 | LR__0157
04500     AF F0 03 F6 | 	mov	ptra, fp
04504     BF 00 A0 FD | 	call	#popregs_
04508                 | _trackerplayer_spin2_tick_ret
04508     2D 00 64 FD | 	ret
0450c                 | 
0450c                 | ' 
0450c                 | ' 
0450c                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
0450c                 | _trackerplayer_spin2_amigaPeriodToNote
0450c                 | ' 
0450c                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
0450c     00 30 06 F6 | 	mov	_var01, #0
04510     38 BB 9F FE | 	loc	pa,	#(@LR__0159-@LR__0158)
04514     93 00 A0 FD | 	call	#FCACHE_LOAD_
04518                 | LR__0158
04518                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
04518     06 00 00 FF 
0451c     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04520     14 33 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
04524     2F 35 02 F6 | 	mov	_var03, arg02
04528     03 34 66 F0 | 	shl	_var03, #3
0452c     2F 35 02 F1 | 	add	_var03, arg02
04530     03 34 66 F0 | 	shl	_var03, #3
04534     1A 33 02 F1 | 	add	_var02, _var03
04538     18 37 02 F6 | 	mov	_var04, _var01
0453c     01 36 66 F0 | 	shl	_var04, #1
04540     19 37 02 F1 | 	add	_var04, _var02
04544     1B 39 E2 FA | 	rdword	_var05, _var04
04548     2E 39 5A F2 | 	cmps	_var05, arg01 wcz
0454c                 | '       quit
0454c     06 00 00 FF 
04550     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04554     0C 00 90 ED |  if_be	jmp	#LR__0160
04558     01 30 06 F1 | 	add	_var01, #1
0455c     24 30 5E F2 | 	cmps	_var01, #36 wcz
04560     B4 FF 9F CD |  if_b	jmp	#LR__0158
04564                 | LR__0159
04564                 | LR__0160
04564                 | ' 
04564                 | '   return i
04564     18 2B 02 F6 | 	mov	result1, _var01
04568                 | _trackerplayer_spin2_amigaPeriodToNote_ret
04568     2D 00 64 FD | 	ret
0456c                 | 
0456c                 | ' 
0456c                 | ' 
0456c                 | ' PRI retunePeriod(period, fTune) | noteNumber
0456c                 | _trackerplayer_spin2_retunePeriod
0456c     06 5A 05 F6 | 	mov	COUNT_, #6
04570     B0 00 A0 FD | 	call	#pushregs_
04574     2E 6B 02 F6 | 	mov	local01, arg01
04578     2F 6D 02 F6 | 	mov	local02, arg02
0457c                 | ' 
0457c                 | '   if period > 0 and fTune < 16
0457c     00 6A 5E F2 | 	cmps	local01, #0 wcz
04580     50 00 90 ED |  if_be	jmp	#LR__0161
04584     10 6C 5E F2 | 	cmps	local02, #16 wcz
04588     48 00 90 3D |  if_ae	jmp	#LR__0161
0458c                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
0458c     35 5D E2 FA | 	rdword	arg01, local01
04590     00 5E 06 F6 | 	mov	arg02, #0
04594     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
04598     15 6F 02 F6 | 	mov	local03, result1
0459c     06 00 00 FF 
045a0     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
045a4     14 71 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
045a8     36 73 02 F6 | 	mov	local05, local02
045ac     03 72 66 F0 | 	shl	local05, #3
045b0     36 73 02 F1 | 	add	local05, local02
045b4     03 72 66 F0 | 	shl	local05, #3
045b8     39 71 02 F1 | 	add	local04, local05
045bc     01 6E 66 F0 | 	shl	local03, #1
045c0     38 6F 02 F1 | 	add	local03, local04
045c4                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
045c4     37 75 E2 FA | 	rdword	local06, local03
045c8     35 75 52 FC | 	wrword	local06, local01
045cc     06 00 00 FF 
045d0     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
045d4                 | LR__0161
045d4     AF F0 03 F6 | 	mov	ptra, fp
045d8     BF 00 A0 FD | 	call	#popregs_
045dc                 | _trackerplayer_spin2_retunePeriod_ret
045dc     2D 00 64 FD | 	ret
045e0                 | 
045e0                 | ' 
045e0                 | ' 
045e0                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
045e0                 | _trackerplayer_spin2_getSampleInfo
045e0     2E 31 0A F6 | 	mov	_var01, arg01 wz
045e4                 | ' 
045e4                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
045e4     08 00 90 AD |  if_e	jmp	#LR__0162
045e8     1F 30 5E F2 | 	cmps	_var01, #31 wcz
045ec     08 00 90 ED |  if_be	jmp	#LR__0163
045f0                 | LR__0162
045f0                 | '     long[samplePtr] := 0
045f0     2F 01 68 FC | 	wrlong	#0, arg02
045f4                 | '     return
045f4     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
045f8                 | LR__0163
045f8                 | ' 
045f8                 | '   sampleNumber--
045f8     01 30 86 F1 | 	sub	_var01, #1
045fc     18 33 02 F6 | 	mov	_var02, _var01
04600     04 32 66 F0 | 	shl	_var02, #4
04604     18 33 82 F1 | 	sub	_var02, _var01
04608     01 32 66 F0 | 	shl	_var02, #1
0460c     0A 0E 06 F1 | 	add	objptr, #10
04610     07 35 02 FB | 	rdlong	_var03, objptr
04614     19 35 02 F1 | 	add	_var03, _var02
04618                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
04618     1A 37 02 F6 | 	mov	_var04, _var03
0461c     16 36 06 F1 | 	add	_var04, #22
04620     1B 39 C2 FA | 	rdbyte	_var05, _var04
04624     08 38 66 F0 | 	shl	_var05, #8
04628     1A 3B 02 F6 | 	mov	_var06, _var03
0462c     17 3A 06 F1 | 	add	_var06, #23
04630     1D 3D C2 FA | 	rdbyte	_var07, _var06
04634     1E 39 42 F5 | 	or	_var05, _var07
04638     01 38 66 F0 | 	shl	_var05, #1
0463c                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
0463c     30 39 62 FC | 	wrlong	_var05, arg03
04640     1A 3F 02 F6 | 	mov	_var08, _var03
04644     18 3E 06 F1 | 	add	_var08, #24
04648                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
04648     1F 41 C2 FA | 	rdbyte	_var09, _var08
0464c     31 41 62 FC | 	wrlong	_var09, arg04
04650     1A 43 02 F6 | 	mov	_var10, _var03
04654     19 42 06 F1 | 	add	_var10, #25
04658                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
04658     21 41 C2 FA | 	rdbyte	_var09, _var10
0465c     32 41 62 FC | 	wrlong	_var09, arg05
04660     1A 45 02 F6 | 	mov	_var11, _var03
04664     1A 44 06 F1 | 	add	_var11, #26
04668     22 47 C2 FA | 	rdbyte	_var12, _var11
0466c     08 46 66 F0 | 	shl	_var12, #8
04670     1A 49 02 F6 | 	mov	_var13, _var03
04674     1B 48 06 F1 | 	add	_var13, #27
04678     24 3D C2 FA | 	rdbyte	_var07, _var13
0467c     1E 47 42 F5 | 	or	_var12, _var07
04680     01 46 66 F0 | 	shl	_var12, #1
04684                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
04684     33 47 62 FC | 	wrlong	_var12, arg06
04688     1A 4B 02 F6 | 	mov	_var14, _var03
0468c     1C 4A 06 F1 | 	add	_var14, #28
04690     25 4D C2 FA | 	rdbyte	_var15, _var14
04694     08 4C 66 F0 | 	shl	_var15, #8
04698     1D 34 06 F1 | 	add	_var03, #29
0469c     1A 3D C2 FA | 	rdbyte	_var07, _var03
046a0     1E 4D 42 F5 | 	or	_var15, _var07
046a4     01 4C 66 F0 | 	shl	_var15, #1
046a8                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
046a8     34 4D 62 FC | 	wrlong	_var15, arg07
046ac     02 30 66 F0 | 	shl	_var01, #2
046b0     08 0E 06 F1 | 	add	objptr, #8
046b4     07 31 02 F1 | 	add	_var01, objptr
046b8                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
046b8     18 41 02 FB | 	rdlong	_var09, _var01
046bc     2F 41 62 FC | 	wrlong	_var09, arg02
046c0                 | ' 
046c0                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
046c0     34 41 02 FB | 	rdlong	_var09, arg07
046c4     02 40 0E F2 | 	cmp	_var09, #2 wz
046c8     12 0E 86 F1 | 	sub	objptr, #18
046cc     08 00 90 5D |  if_ne	jmp	#LR__0164
046d0     33 3D 0A FB | 	rdlong	_var07, arg06 wz
046d4                 | '     long[repeatLength] := 1
046d4     34 03 68 AC |  if_e	wrlong	#1, arg07
046d8                 | LR__0164
046d8                 | _trackerplayer_spin2_getSampleInfo_ret
046d8     2D 00 64 FD | 	ret
046dc                 | 
046dc                 | ' 
046dc                 | ' 
046dc                 | ' PRI triggerNote(channel)
046dc                 | _trackerplayer_spin2_triggerNote
046dc     2E 31 02 F6 | 	mov	_var01, arg01
046e0     02 30 66 F0 | 	shl	_var01, #2
046e4     47 0F 06 F1 | 	add	objptr, #327
046e8     07 31 02 F1 | 	add	_var01, objptr
046ec     2E 33 02 F6 | 	mov	_var02, arg01
046f0     90 0E 86 F1 | 	sub	objptr, #144
046f4                 | ' 
046f4                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
046f4     18 35 02 FB | 	rdlong	_var03, _var01
046f8     07 33 02 F1 | 	add	_var02, objptr
046fc     19 35 42 FC | 	wrbyte	_var03, _var02
04700     2E 37 02 F6 | 	mov	_var04, arg01
04704     02 36 66 F0 | 	shl	_var04, #2
04708     80 0E 06 F1 | 	add	objptr, #128
0470c     07 37 02 F1 | 	add	_var04, objptr
04710     2E 39 02 F6 | 	mov	_var05, arg01
04714     02 38 66 F0 | 	shl	_var05, #2
04718     90 0E 86 F1 | 	sub	objptr, #144
0471c                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
0471c     1B 35 02 FB | 	rdlong	_var03, _var04
04720     07 39 02 F1 | 	add	_var05, objptr
04724     1C 35 62 FC | 	wrlong	_var03, _var05
04728     2E 3B 02 F6 | 	mov	_var06, arg01
0472c     02 3A 66 F0 | 	shl	_var06, #2
04730     80 0E 06 F1 | 	add	objptr, #128
04734     07 3B 02 F1 | 	add	_var06, objptr
04738     2E 3D 02 F6 | 	mov	_var07, arg01
0473c     02 3C 66 F0 | 	shl	_var07, #2
04740     48 0E 86 F1 | 	sub	objptr, #72
04744                 | '   currPeriod[channel]       := lastSetPeriod[channel]
04744     1D 35 02 FB | 	rdlong	_var03, _var06
04748     07 3D 02 F1 | 	add	_var07, objptr
0474c     1E 35 62 FC | 	wrlong	_var03, _var07
04750     2E 3F 02 F6 | 	mov	_var08, arg01
04754     02 3E 66 F0 | 	shl	_var08, #2
04758     78 0E 06 F1 | 	add	objptr, #120
0475c     07 3F 02 F1 | 	add	_var08, objptr
04760     2E 41 02 F6 | 	mov	_var09, arg01
04764     01 40 66 F0 | 	shl	_var09, #1
04768     9C 0E 86 F1 | 	sub	objptr, #156
0476c                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
0476c     1F 35 02 FB | 	rdlong	_var03, _var08
04770     07 41 02 F1 | 	add	_var09, objptr
04774     20 35 52 FC | 	wrword	_var03, _var09
04778     2E 43 02 F6 | 	mov	_var10, arg01
0477c     02 42 66 F0 | 	shl	_var10, #2
04780     AC 0E 06 F1 | 	add	objptr, #172
04784     07 43 02 F1 | 	add	_var10, objptr
04788     2E 45 02 F6 | 	mov	_var11, arg01
0478c     02 44 66 F0 | 	shl	_var11, #2
04790     A4 0E 86 F1 | 	sub	objptr, #164
04794                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04794     21 35 02 FB | 	rdlong	_var03, _var10
04798     07 45 02 F1 | 	add	_var11, objptr
0479c     22 35 62 FC | 	wrlong	_var03, _var11
047a0     2E 47 02 F6 | 	mov	_var12, arg01
047a4     02 46 66 F0 | 	shl	_var12, #2
047a8     B4 0E 06 F1 | 	add	objptr, #180
047ac     07 47 02 F1 | 	add	_var12, objptr
047b0     2E 49 02 F6 | 	mov	_var13, arg01
047b4     01 48 66 F0 | 	shl	_var13, #1
047b8     A0 0E 86 F1 | 	sub	objptr, #160
047bc                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
047bc     23 35 02 FB | 	rdlong	_var03, _var12
047c0     07 49 02 F1 | 	add	_var13, objptr
047c4     24 35 52 FC | 	wrword	_var03, _var13
047c8     1F 0F 06 F1 | 	add	objptr, #287
047cc     07 5D 02 F1 | 	add	arg01, objptr
047d0     2E 4B C2 FA | 	rdbyte	_var14, arg01
047d4     01 4A 06 F1 | 	add	_var14, #1
047d8                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
047d8     2E 4B 42 FC | 	wrbyte	_var14, arg01
047dc     F6 0F 86 F1 | 	sub	objptr, #502
047e0                 | _trackerplayer_spin2_triggerNote_ret
047e0     2D 00 64 FD | 	ret
047e4                 | 
047e4                 | ' 
047e4                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
047e4                 | _trackerplayer_spin2_processChannel
047e4     31 5A 05 F6 | 	mov	COUNT_, #49
047e8     B0 00 A0 FD | 	call	#pushregs_
047ec     D0 F0 07 F1 | 	add	ptra, #208
047f0     AF 5C 62 FC | 	wrlong	arg01, fp
047f4     04 5E 05 F1 | 	add	fp, #4
047f8     AF 5E 62 FC | 	wrlong	arg02, fp
047fc     04 5E 05 F1 | 	add	fp, #4
04800     AF 60 62 FC | 	wrlong	arg03, fp
04804     04 5E 05 F1 | 	add	fp, #4
04808     AF 62 62 FC | 	wrlong	arg04, fp
0480c     0C 5E 85 F1 | 	sub	fp, #12
04810                 | ' 
04810                 | '   channel := channel & 3
04810     AF 6A 02 FB | 	rdlong	local01, fp
04814     03 6A 06 F5 | 	and	local01, #3
04818     AF 6A 62 FC | 	wrlong	local01, fp
0481c     0C 5E 05 F1 | 	add	fp, #12
04820     AF 6C 02 FB | 	rdlong	local02, fp
04824     08 6C 46 F0 | 	shr	local02, #8
04828     36 6F 02 F6 | 	mov	local03, local02
0482c     0F 6E 06 F5 | 	and	local03, #15
04830                 | '   cmd     := (effect >> 8) & $F
04830     BA 0F 06 F1 | 	add	objptr, #442
04834     07 6F 42 FC | 	wrbyte	local03, objptr
04838     AF 70 02 FB | 	rdlong	local04, fp
0483c     04 70 46 F0 | 	shr	local04, #4
04840     38 73 02 F6 | 	mov	local05, local04
04844     0F 72 06 F5 | 	and	local05, #15
04848                 | '   x       := (effect >> 4) & $F
04848     03 0E 86 F1 | 	sub	objptr, #3
0484c     07 73 42 FC | 	wrbyte	local05, objptr
04850     AF 74 02 FB | 	rdlong	local06, fp
04854     0F 74 06 F5 | 	and	local06, #15
04858                 | '   y       := (effect     ) & $F
04858     01 0E 06 F1 | 	add	objptr, #1
0485c     07 75 42 FC | 	wrbyte	local06, objptr
04860     AF 76 02 FB | 	rdlong	local07, fp
04864     0C 5E 85 F1 | 	sub	fp, #12
04868     FF 76 06 F5 | 	and	local07, #255
0486c                 | '   z       := (effect     ) & $FF
0486c     01 0E 06 F1 | 	add	objptr, #1
04870     07 77 42 FC | 	wrbyte	local07, objptr
04874                 | ' 
04874                 | '   ' Handle everything that executes on "tick zero"
04874                 | '   if tickCounter == 0
04874     18 0F 86 F1 | 	sub	objptr, #280
04878     07 6B CA FA | 	rdbyte	local01, objptr wz
0487c     A1 0E 86 F1 | 	sub	objptr, #161
04880     F0 03 90 5D |  if_ne	jmp	#LR__0175
04884     AF 78 02 FB | 	rdlong	local08, fp
04888     02 78 66 F0 | 	shl	local08, #2
0488c     EF 0E 06 F1 | 	add	objptr, #239
04890     07 79 02 F1 | 	add	local08, objptr
04894                 | ' 
04894                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
04894                 | '     deltaPeriod[channel] := 0
04894     3C 01 68 FC | 	wrlong	#0, local08
04898     AF 7A 02 FB | 	rdlong	local09, fp
0489c     02 7A 66 F0 | 	shl	local09, #2
048a0     20 0E 06 F1 | 	add	objptr, #32
048a4     07 7B 02 F1 | 	add	local09, objptr
048a8                 | '     deltaVolume[channel] := 0
048a8     3D 01 68 FC | 	wrlong	#0, local09
048ac                 | ' 
048ac                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
048ac                 | '     if sampleNumber > 0
048ac     04 5E 05 F1 | 	add	fp, #4
048b0     AF 6A 02 FB | 	rdlong	local01, fp
048b4     04 5E 85 F1 | 	sub	fp, #4
048b8     00 6A 5E F2 | 	cmps	local01, #0 wcz
048bc     0F 0F 86 F1 | 	sub	objptr, #271
048c0     20 00 90 ED |  if_be	jmp	#LR__0165
048c4     AF 7C 02 FB | 	rdlong	local10, fp
048c8     E0 0F 06 F1 | 	add	objptr, #480
048cc     07 7D 02 F1 | 	add	local10, objptr
048d0                 | '       sampleNumber_memory[channel] := sampleNumber
048d0     04 5E 05 F1 | 	add	fp, #4
048d4     AF 6A 02 FB | 	rdlong	local01, fp
048d8     04 5E 85 F1 | 	sub	fp, #4
048dc     3E 6B 42 FC | 	wrbyte	local01, local10
048e0     E0 0F 86 F1 | 	sub	objptr, #480
048e4                 | LR__0165
048e4     AF 7E 02 FB | 	rdlong	local11, fp
048e8     E0 0F 06 F1 | 	add	objptr, #480
048ec     07 7F 02 F1 | 	add	local11, objptr
048f0     20 5E 05 F1 | 	add	fp, #32
048f4     AF 80 02 F6 | 	mov	local12, fp
048f8     10 5E 85 F1 | 	sub	fp, #16
048fc     AF 82 02 F6 | 	mov	local13, fp
04900     31 0E 86 F1 | 	sub	objptr, #49
04904     07 85 02 F6 | 	mov	local14, objptr
04908     04 5E 05 F1 | 	add	fp, #4
0490c     AF 86 02 F6 | 	mov	local15, fp
04910     04 5E 05 F1 | 	add	fp, #4
04914     AF 88 02 F6 | 	mov	local16, fp
04918     04 5E 05 F1 | 	add	fp, #4
0491c     AF 8A 02 F6 | 	mov	local17, fp
04920                 | ' 
04920                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
04920                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
04920     3F 5D C2 FA | 	rdbyte	arg01, local11
04924     42 63 02 F6 | 	mov	arg04, local14
04928     43 8D 02 F6 | 	mov	local18, local15
0492c     44 8F 02 F6 | 	mov	local19, local16
04930     45 91 02 F6 | 	mov	local20, local17
04934     40 5F 02 F6 | 	mov	arg02, local12
04938     41 61 02 F6 | 	mov	arg03, local13
0493c     46 65 02 F6 | 	mov	arg05, local18
04940     47 67 02 F6 | 	mov	arg06, local19
04944     48 69 02 F6 | 	mov	arg07, local20
04948     AF 0F 86 F1 | 	sub	objptr, #431
0494c     1C 5E 85 F1 | 	sub	fp, #28
04950     8C FC BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
04954                 | ' 
04954                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
04954                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
04954                 | '     if sampleNumber > 0
04954     04 5E 05 F1 | 	add	fp, #4
04958     AF 6A 02 FB | 	rdlong	local01, fp
0495c     04 5E 85 F1 | 	sub	fp, #4
04960     00 6A 5E F2 | 	cmps	local01, #0 wcz
04964     24 00 90 ED |  if_be	jmp	#LR__0166
04968     AF 92 02 FB | 	rdlong	local21, fp
0496c     02 92 66 F0 | 	shl	local21, #2
04970     FF 0E 06 F1 | 	add	objptr, #255
04974     07 93 02 F1 | 	add	local21, objptr
04978                 | '       currVolume[channel] := volume
04978     14 5E 05 F1 | 	add	fp, #20
0497c     AF 6A 02 FB | 	rdlong	local01, fp
04980     14 5E 85 F1 | 	sub	fp, #20
04984     49 6B 62 FC | 	wrlong	local01, local21
04988     FF 0E 86 F1 | 	sub	objptr, #255
0498c                 | LR__0166
0498c                 | ' 
0498c                 | '     ' Handle all commands that executes on "zero tick"
0498c                 | '     sampleOffset := 0
0498c     B3 0F 06 F1 | 	add	objptr, #435
04990     07 01 68 FC | 	wrlong	#0, objptr
04994     B3 0F 86 F1 | 	sub	objptr, #435
04998                 | '     handleZeroTickCommands(channel)
04998     AF 5C 02 FB | 	rdlong	arg01, fp
0499c     60 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
049a0                 | ' 
049a0                 | '     ' Prepare sample data for triggering (now or later)
049a0                 | '     if period > 0
049a0     08 5E 05 F1 | 	add	fp, #8
049a4     AF 6A 02 FB | 	rdlong	local01, fp
049a8     08 5E 85 F1 | 	sub	fp, #8
049ac     00 6A 5E F2 | 	cmps	local01, #0 wcz
049b0     C8 02 90 ED |  if_be	jmp	#LR__0176
049b4     08 5E 05 F1 | 	add	fp, #8
049b8     AF 94 02 F6 | 	mov	local22, fp
049bc                 | ' 
049bc                 | '       retunePeriod(@period, fineTune)
049bc     AF 0F 06 F1 | 	add	objptr, #431
049c0     07 5F 02 FB | 	rdlong	arg02, objptr
049c4     AF 0F 86 F1 | 	sub	objptr, #431
049c8     4A 5D 02 F6 | 	mov	arg01, local22
049cc     08 5E 85 F1 | 	sub	fp, #8
049d0     98 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
049d4     AF 96 02 FB | 	rdlong	local23, fp
049d8     D3 0E 06 F1 | 	add	objptr, #211
049dc     07 97 02 F1 | 	add	local23, objptr
049e0                 | '       currFineTune[channel]        := fineTune
049e0     DC 0E 06 F1 | 	add	objptr, #220
049e4     07 6B 02 FB | 	rdlong	local01, objptr
049e8     4B 6B 42 FC | 	wrbyte	local01, local23
049ec     AF 98 02 FB | 	rdlong	local24, fp
049f0     02 98 66 F0 | 	shl	local24, #2
049f4     88 0E 86 F1 | 	sub	objptr, #136
049f8     07 99 02 F1 | 	add	local24, objptr
049fc                 | '       lastSetPeriod[channel]       := period
049fc     08 5E 05 F1 | 	add	fp, #8
04a00     AF 6A 02 FB | 	rdlong	local01, fp
04a04     4C 6B 62 FC | 	wrlong	local01, local24
04a08     08 5E 85 F1 | 	sub	fp, #8
04a0c     AF 9A 02 FB | 	rdlong	local25, fp
04a10     02 9A 66 F0 | 	shl	local25, #2
04a14     40 0E 06 F1 | 	add	objptr, #64
04a18     07 9B 02 F1 | 	add	local25, objptr
04a1c                 | '       lastSetRepeatLength[channel] := repeatLength
04a1c     1C 5E 05 F1 | 	add	fp, #28
04a20     AF 6A 02 FB | 	rdlong	local01, fp
04a24     4D 6B 62 FC | 	wrlong	local01, local25
04a28     1C 5E 85 F1 | 	sub	fp, #28
04a2c     AF 9C 02 FB | 	rdlong	local26, fp
04a30     02 9C 66 F0 | 	shl	local26, #2
04a34     10 0E 06 F1 | 	add	objptr, #16
04a38     07 9D 02 F1 | 	add	local26, objptr
04a3c                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04a3c     18 5E 05 F1 | 	add	fp, #24
04a40     AF 6A 02 FB | 	rdlong	local01, fp
04a44     4E 6B 62 FC | 	wrlong	local01, local26
04a48     08 5E 05 F1 | 	add	fp, #8
04a4c     AF 9E 02 FB | 	rdlong	local27, fp
04a50     20 5E 85 F1 | 	sub	fp, #32
04a54     3C 0E 06 F1 | 	add	objptr, #60
04a58     07 A1 02 FB | 	rdlong	local28, objptr
04a5c     50 9F 02 F1 | 	add	local27, local28
04a60     AF A2 02 FB | 	rdlong	local29, fp
04a64     02 A2 66 F0 | 	shl	local29, #2
04a68     7C 0E 86 F1 | 	sub	objptr, #124
04a6c     07 A3 02 F1 | 	add	local29, objptr
04a70                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
04a70     51 9F 62 FC | 	wrlong	local27, local29
04a74     AF A4 02 FB | 	rdlong	local30, fp
04a78     02 A4 66 F0 | 	shl	local30, #2
04a7c     10 0E 06 F1 | 	add	objptr, #16
04a80     07 A5 02 F1 | 	add	local30, objptr
04a84                 | '       lastSetSampleNr[channel]     := sampleNumber
04a84     04 5E 05 F1 | 	add	fp, #4
04a88     AF 6A 02 FB | 	rdlong	local01, fp
04a8c     52 6B 62 FC | 	wrlong	local01, local30
04a90                 | ' 
04a90                 | '       ' This calculates the correct sample length in all situations
04a90                 | '       if repeatLength > 2
04a90     18 5E 05 F1 | 	add	fp, #24
04a94     AF 6A 02 FB | 	rdlong	local01, fp
04a98     1C 5E 85 F1 | 	sub	fp, #28
04a9c     02 6A 5E F2 | 	cmps	local01, #2 wcz
04aa0     47 0F 86 F1 | 	sub	objptr, #327
04aa4     20 00 90 ED |  if_be	jmp	#LR__0167
04aa8     18 5E 05 F1 | 	add	fp, #24
04aac     AF A6 02 FB | 	rdlong	local31, fp
04ab0     04 5E 05 F1 | 	add	fp, #4
04ab4     AF A0 02 FB | 	rdlong	local28, fp
04ab8     50 A7 02 F1 | 	add	local31, local28
04abc                 | '         sampleLength := repeatPoint + repeatLength
04abc     0C 5E 85 F1 | 	sub	fp, #12
04ac0     AF A6 62 FC | 	wrlong	local31, fp
04ac4     10 5E 85 F1 | 	sub	fp, #16
04ac8                 | LR__0167
04ac8                 | ' 
04ac8                 | '       if sampleLength - sampleOffset < 1
04ac8     10 5E 05 F1 | 	add	fp, #16
04acc     AF 6A 02 FB | 	rdlong	local01, fp
04ad0     10 5E 85 F1 | 	sub	fp, #16
04ad4     B3 0F 06 F1 | 	add	objptr, #435
04ad8     07 A1 02 FB | 	rdlong	local28, objptr
04adc     B3 0F 86 F1 | 	sub	objptr, #435
04ae0     50 6B 82 F1 | 	sub	local01, local28
04ae4     01 6A 5E F2 | 	cmps	local01, #1 wcz
04ae8     1C 00 90 3D |  if_ae	jmp	#LR__0168
04aec     AF A8 02 FB | 	rdlong	local32, fp
04af0     02 A8 66 F0 | 	shl	local32, #2
04af4     57 0F 06 F1 | 	add	objptr, #343
04af8     07 A9 02 F1 | 	add	local32, objptr
04afc                 | '         lastSetSampleLength[channel] := 1
04afc     54 03 68 FC | 	wrlong	#1, local32
04b00                 | '       else
04b00     57 0F 86 F1 | 	sub	objptr, #343
04b04     30 00 90 FD | 	jmp	#LR__0169
04b08                 | LR__0168
04b08     10 5E 05 F1 | 	add	fp, #16
04b0c     AF AA 02 FB | 	rdlong	local33, fp
04b10     10 5E 85 F1 | 	sub	fp, #16
04b14     B3 0F 06 F1 | 	add	objptr, #435
04b18     07 A1 02 FB | 	rdlong	local28, objptr
04b1c     50 AB 82 F1 | 	sub	local33, local28
04b20     AF AC 02 FB | 	rdlong	local34, fp
04b24     02 AC 66 F0 | 	shl	local34, #2
04b28     5C 0E 86 F1 | 	sub	objptr, #92
04b2c     07 AD 02 F1 | 	add	local34, objptr
04b30                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04b30     56 AB 62 FC | 	wrlong	local33, local34
04b34     57 0F 86 F1 | 	sub	objptr, #343
04b38                 | LR__0169
04b38                 | ' 
04b38                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04b38                 | '       if sampleOffset > sampleLength
04b38     B3 0F 06 F1 | 	add	objptr, #435
04b3c     07 6B 02 FB | 	rdlong	local01, objptr
04b40     B3 0F 86 F1 | 	sub	objptr, #435
04b44     10 5E 05 F1 | 	add	fp, #16
04b48     AF A0 02 FB | 	rdlong	local28, fp
04b4c     10 5E 85 F1 | 	sub	fp, #16
04b50     50 6B 5A F2 | 	cmps	local01, local28 wcz
04b54     50 00 90 ED |  if_be	jmp	#LR__0170
04b58     20 5E 05 F1 | 	add	fp, #32
04b5c     AF AE 02 FB | 	rdlong	local35, fp
04b60     08 5E 85 F1 | 	sub	fp, #8
04b64     AF A0 02 FB | 	rdlong	local28, fp
04b68     18 5E 85 F1 | 	sub	fp, #24
04b6c     50 AF 02 F1 | 	add	local35, local28
04b70     AF B0 02 FB | 	rdlong	local36, fp
04b74     02 B0 66 F0 | 	shl	local36, #2
04b78     37 0F 06 F1 | 	add	objptr, #311
04b7c     07 B1 02 F1 | 	add	local36, objptr
04b80                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04b80     58 AF 62 FC | 	wrlong	local35, local36
04b84     AF B2 02 FB | 	rdlong	local37, fp
04b88     02 B2 66 F0 | 	shl	local37, #2
04b8c     20 0E 06 F1 | 	add	objptr, #32
04b90     07 B3 02 F1 | 	add	local37, objptr
04b94                 | '         lastSetSampleLength[channel] := repeatLength
04b94     1C 5E 05 F1 | 	add	fp, #28
04b98     AF 6A 02 FB | 	rdlong	local01, fp
04b9c     1C 5E 85 F1 | 	sub	fp, #28
04ba0     59 6B 62 FC | 	wrlong	local01, local37
04ba4     57 0F 86 F1 | 	sub	objptr, #343
04ba8                 | LR__0170
04ba8                 | ' 
04ba8                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04ba8                 | '       ifnot cmd == $3 || cmd == $5
04ba8     BA 0F 06 F1 | 	add	objptr, #442
04bac     07 6B C2 FA | 	rdbyte	local01, objptr
04bb0     BA 0F 86 F1 | 	sub	objptr, #442
04bb4     03 6A 0E F2 | 	cmp	local01, #3 wz
04bb8     54 00 90 AD |  if_e	jmp	#LR__0173
04bbc     BA 0F 06 F1 | 	add	objptr, #442
04bc0     07 B5 C2 FA | 	rdbyte	local38, objptr
04bc4     BA 0F 86 F1 | 	sub	objptr, #442
04bc8     5A A1 02 F6 | 	mov	local28, local38
04bcc     05 A0 0E F2 | 	cmp	local28, #5 wz
04bd0     3C 00 90 AD |  if_e	jmp	#LR__0173
04bd4                 | '         ifnot cmd == $E && x == $D
04bd4     BA 0F 06 F1 | 	add	objptr, #442
04bd8     07 B7 C2 FA | 	rdbyte	local39, objptr
04bdc     BA 0F 86 F1 | 	sub	objptr, #442
04be0     5B 6B 02 F6 | 	mov	local01, local39
04be4     0E 6A 0E F2 | 	cmp	local01, #14 wz
04be8     18 00 90 5D |  if_ne	jmp	#LR__0171
04bec     B7 0F 06 F1 | 	add	objptr, #439
04bf0     07 B5 C2 FA | 	rdbyte	local38, objptr
04bf4     B7 0F 86 F1 | 	sub	objptr, #439
04bf8     5A A1 02 F6 | 	mov	local28, local38
04bfc     0D A0 0E F2 | 	cmp	local28, #13 wz
04c00     0C 00 90 AD |  if_e	jmp	#LR__0172
04c04                 | LR__0171
04c04                 | '           triggerNote(channel)
04c04     AF 6A 02 FB | 	rdlong	local01, fp
04c08     35 5D 02 F6 | 	mov	arg01, local01
04c0c     CC FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04c10                 | LR__0172
04c10                 | LR__0173
04c10                 | ' 
04c10                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04c10                 | '       if resetTremolo[channel] > 0
04c10     AF 6A 02 FB | 	rdlong	local01, fp
04c14     8F 0F 06 F1 | 	add	objptr, #399
04c18     07 6B 02 F1 | 	add	local01, objptr
04c1c     35 A1 C2 FA | 	rdbyte	local28, local01
04c20     00 A0 5E F2 | 	cmps	local28, #0 wcz
04c24     8F 0F 86 F1 | 	sub	objptr, #399
04c28     14 00 90 ED |  if_be	jmp	#LR__0174
04c2c     AF B8 02 FB | 	rdlong	local40, fp
04c30     8B 0F 06 F1 | 	add	objptr, #395
04c34     07 B9 02 F1 | 	add	local40, objptr
04c38                 | '         tremoloPos[channel] := 0
04c38     5C 01 48 FC | 	wrbyte	#0, local40
04c3c     8B 0F 86 F1 | 	sub	objptr, #395
04c40                 | LR__0174
04c40                 | ' 
04c40                 | '       if resetVibrato[channel] > 0
04c40     AF 6A 02 FB | 	rdlong	local01, fp
04c44     93 0F 06 F1 | 	add	objptr, #403
04c48     07 6B 02 F1 | 	add	local01, objptr
04c4c     35 A1 C2 FA | 	rdbyte	local28, local01
04c50     00 A0 5E F2 | 	cmps	local28, #0 wcz
04c54     93 0F 86 F1 | 	sub	objptr, #403
04c58     20 00 90 ED |  if_be	jmp	#LR__0176
04c5c     AF BA 02 FB | 	rdlong	local41, fp
04c60     87 0F 06 F1 | 	add	objptr, #391
04c64     07 BB 02 F1 | 	add	local41, objptr
04c68                 | '         vibratoPos[channel] := 0
04c68     5D 01 48 FC | 	wrbyte	#0, local41
04c6c     87 0F 86 F1 | 	sub	objptr, #391
04c70                 | ' 
04c70                 | '   else
04c70     08 00 90 FD | 	jmp	#LR__0176
04c74                 | LR__0175
04c74                 | '     ' Handle commands that executes on all "non zero ticks"
04c74                 | '     handleNonZeroTickCommands(channel)
04c74     AF 5C 02 FB | 	rdlong	arg01, fp
04c78     E4 04 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04c7c                 | LR__0176
04c7c                 | ' 
04c7c                 | '   ' Handle commands that executes on every tick
04c7c                 | '   handleEveryTickCommands(channel)
04c7c     AF 5C 02 FB | 	rdlong	arg01, fp
04c80     40 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04c84     AF BC 02 FB | 	rdlong	local42, fp
04c88     02 BC 66 F0 | 	shl	local42, #2
04c8c     DF 0E 06 F1 | 	add	objptr, #223
04c90     07 BD 02 F1 | 	add	local42, objptr
04c94     5E BF 02 FB | 	rdlong	local43, local42
04c98     01 00 00 FF 
04c9c     58 BF 66 F3 | 	fles	local43, ##856
04ca0                 | ' 
04ca0                 | '   ' Handle boundaries that should be kept
04ca0                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04ca0     5E BF 62 FC | 	wrlong	local43, local42
04ca4     AF C0 02 FB | 	rdlong	local44, fp
04ca8     02 C0 66 F0 | 	shl	local44, #2
04cac     07 C1 02 F1 | 	add	local44, objptr
04cb0     60 C3 02 FB | 	rdlong	local45, local44
04cb4     71 C2 46 F3 | 	fges	local45, #113
04cb8                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04cb8     60 C3 62 FC | 	wrlong	local45, local44
04cbc     AF C4 02 FB | 	rdlong	local46, fp
04cc0     02 C4 66 F0 | 	shl	local46, #2
04cc4     20 0E 06 F1 | 	add	objptr, #32
04cc8     07 C5 02 F1 | 	add	local46, objptr
04ccc     62 C7 02 FB | 	rdlong	local47, local46
04cd0     40 C6 66 F3 | 	fles	local47, #64
04cd4                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04cd4     62 C7 62 FC | 	wrlong	local47, local46
04cd8     AF C8 02 FB | 	rdlong	local48, fp
04cdc     02 C8 66 F0 | 	shl	local48, #2
04ce0     07 C9 02 F1 | 	add	local48, objptr
04ce4     64 CB 02 FB | 	rdlong	local49, local48
04ce8     00 CA 46 F3 | 	fges	local49, #0
04cec                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04cec     64 CB 62 FC | 	wrlong	local49, local48
04cf0     FF 0E 86 F1 | 	sub	objptr, #255
04cf4     AF F0 03 F6 | 	mov	ptra, fp
04cf8     BF 00 A0 FD | 	call	#popregs_
04cfc                 | _trackerplayer_spin2_processChannel_ret
04cfc     2D 00 64 FD | 	ret
04d00                 | 
04d00                 | ' 
04d00                 | ' 
04d00                 | ' ' Handle all commands that executes on tick zero
04d00                 | ' '
04d00                 | ' PRI handleZeroTickCommands(channel)
04d00                 | _trackerplayer_spin2_handleZeroTickCommands
04d00     2E 31 02 F6 | 	mov	_var01, arg01
04d04                 | ' 
04d04                 | '   CASE_FAST cmd
04d04     BA 0F 06 F1 | 	add	objptr, #442
04d08     07 33 C2 FA | 	rdbyte	_var02, objptr
04d0c     BA 0F 86 F1 | 	sub	objptr, #442
04d10     19 35 02 F6 | 	mov	_var03, _var02
04d14     09 34 86 F1 | 	sub	_var03, #9
04d18     07 34 26 F3 | 	fle	_var03, #7
04d1c     1A 37 02 F6 | 	mov	_var04, _var03
04d20     30 36 62 FD | 	jmprel	_var04
04d24                 | LR__0177
04d24     1C 00 90 FD | 	jmp	#LR__0178
04d28     30 04 90 FD | 	jmp	#LR__0201
04d2c     64 00 90 FD | 	jmp	#LR__0180
04d30     84 00 90 FD | 	jmp	#LR__0181
04d34     A0 00 90 FD | 	jmp	#LR__0182
04d38     D0 00 90 FD | 	jmp	#LR__0183
04d3c     9C 03 90 FD | 	jmp	#LR__0198
04d40     18 04 90 FD | 	jmp	#LR__0201
04d44                 | LR__0178
04d44                 | ' 
04d44                 | '     $9:                          ' Set sample offset
04d44                 | '       if z > 0
04d44     B9 0F 06 F1 | 	add	objptr, #441
04d48     07 39 C2 FA | 	rdbyte	_var05, objptr
04d4c     B9 0F 86 F1 | 	sub	objptr, #441
04d50     00 38 5E F2 | 	cmps	_var05, #0 wcz
04d54     1C 00 90 ED |  if_be	jmp	#LR__0179
04d58                 | '         cmd9_memoryZ[channel] := z
04d58     18 39 02 F6 | 	mov	_var05, _var01
04d5c     DC 0F 06 F1 | 	add	objptr, #476
04d60     07 39 02 F1 | 	add	_var05, objptr
04d64     23 0E 86 F1 | 	sub	objptr, #35
04d68     07 3B C2 FA | 	rdbyte	_var06, objptr
04d6c     B9 0F 86 F1 | 	sub	objptr, #441
04d70     1C 3B 42 FC | 	wrbyte	_var06, _var05
04d74                 | LR__0179
04d74                 | ' 
04d74                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04d74     DC 0F 06 F1 | 	add	objptr, #476
04d78     07 31 02 F1 | 	add	_var01, objptr
04d7c     18 39 C2 FA | 	rdbyte	_var05, _var01
04d80     08 38 66 F0 | 	shl	_var05, #8
04d84     29 0E 86 F1 | 	sub	objptr, #41
04d88     07 39 62 FC | 	wrlong	_var05, objptr
04d8c     B3 0F 86 F1 | 	sub	objptr, #435
04d90     C8 03 90 FD | 	jmp	#LR__0201
04d94                 | LR__0180
04d94                 | ' 
04d94                 | '     $B:                          ' Jump position
04d94                 | '       cmdB_memoryZ := z
04d94     B9 0F 06 F1 | 	add	objptr, #441
04d98     07 39 C2 FA | 	rdbyte	_var05, objptr
04d9c     2E 0E 06 F1 | 	add	objptr, #46
04da0     07 39 42 FC | 	wrbyte	_var05, objptr
04da4                 | '       cmdB_updatePosition := true
04da4     01 0E 06 F1 | 	add	objptr, #1
04da8     FF FF FF FF 
04dac     07 FF 4B FC | 	wrbyte	##-1, objptr
04db0     E8 0F 86 F1 | 	sub	objptr, #488
04db4     A4 03 90 FD | 	jmp	#LR__0201
04db8                 | LR__0181
04db8                 | ' 
04db8                 | '     $C:                          ' Set volume
04db8                 | '       currVolume[channel] := z
04db8     02 30 66 F0 | 	shl	_var01, #2
04dbc     FF 0E 06 F1 | 	add	objptr, #255
04dc0     07 31 02 F1 | 	add	_var01, objptr
04dc4     BA 0E 06 F1 | 	add	objptr, #186
04dc8     07 3B C2 FA | 	rdbyte	_var06, objptr
04dcc     B9 0F 86 F1 | 	sub	objptr, #441
04dd0     18 3B 62 FC | 	wrlong	_var06, _var01
04dd4     84 03 90 FD | 	jmp	#LR__0201
04dd8                 | LR__0182
04dd8                 | ' 
04dd8                 | '     $D:                          ' Pattern break
04dd8                 | '       cmdD_memoryX := x
04dd8     B7 0F 06 F1 | 	add	objptr, #439
04ddc     07 39 C2 FA | 	rdbyte	_var05, objptr
04de0     2D 0E 06 F1 | 	add	objptr, #45
04de4     07 39 42 FC | 	wrbyte	_var05, objptr
04de8                 | '       cmdD_memoryY := y
04de8     2C 0E 86 F1 | 	sub	objptr, #44
04dec     07 39 C2 FA | 	rdbyte	_var05, objptr
04df0     2D 0E 06 F1 | 	add	objptr, #45
04df4     07 39 42 FC | 	wrbyte	_var05, objptr
04df8                 | '       cmdD_updatePosition := true
04df8     01 0E 06 F1 | 	add	objptr, #1
04dfc     FF FF FF FF 
04e00     07 FF 4B FC | 	wrbyte	##-1, objptr
04e04     E6 0F 86 F1 | 	sub	objptr, #486
04e08     50 03 90 FD | 	jmp	#LR__0201
04e0c                 | LR__0183
04e0c                 | ' 
04e0c                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04e0c                 | ' 
04e0c                 | '       CASE_FAST x
04e0c     B7 0F 06 F1 | 	add	objptr, #439
04e10     07 3D C2 FA | 	rdbyte	_var07, objptr
04e14     B7 0F 86 F1 | 	sub	objptr, #439
04e18     1E 39 02 F6 | 	mov	_var05, _var07
04e1c     0F 38 26 F3 | 	fle	_var05, #15
04e20     1C 3F 02 F6 | 	mov	_var08, _var05
04e24     30 3E 62 FD | 	jmprel	_var08
04e28                 | LR__0184
04e28     3C 00 90 FD | 	jmp	#LR__0185
04e2c     58 00 90 FD | 	jmp	#LR__0186
04e30     8C 00 90 FD | 	jmp	#LR__0187
04e34     C0 00 90 FD | 	jmp	#LR__0188
04e38     DC 00 90 FD | 	jmp	#LR__0189
04e3c     14 01 90 FD | 	jmp	#LR__0190
04e40     28 01 90 FD | 	jmp	#LR__0191
04e44     C0 01 90 FD | 	jmp	#LR__0194
04e48     10 03 90 FD | 	jmp	#LR__0201
04e4c     0C 03 90 FD | 	jmp	#LR__0201
04e50     F0 01 90 FD | 	jmp	#LR__0195
04e54     24 02 90 FD | 	jmp	#LR__0196
04e58     00 03 90 FD | 	jmp	#LR__0201
04e5c     FC 02 90 FD | 	jmp	#LR__0201
04e60     50 02 90 FD | 	jmp	#LR__0197
04e64     F4 02 90 FD | 	jmp	#LR__0201
04e68                 | LR__0185
04e68                 | ' 
04e68                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04e68     B8 0F 06 F1 | 	add	objptr, #440
04e6c     07 3B C2 FA | 	rdbyte	_var06, objptr
04e70     1D 3B 22 F6 | 	not	_var06, _var06
04e74     01 3A 06 F5 | 	and	_var06, #1
04e78     03 0E 06 F1 | 	add	objptr, #3
04e7c     07 3B 42 FC | 	wrbyte	_var06, objptr
04e80     BB 0F 86 F1 | 	sub	objptr, #443
04e84     D4 02 90 FD | 	jmp	#LR__0201
04e88                 | LR__0186
04e88                 | ' 
04e88                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04e88     18 41 02 F6 | 	mov	_var09, _var01
04e8c     02 40 66 F0 | 	shl	_var09, #2
04e90     DF 0E 06 F1 | 	add	objptr, #223
04e94     07 41 02 F1 | 	add	_var09, objptr
04e98     20 3B 02 FB | 	rdlong	_var06, _var09
04e9c     D9 0E 06 F1 | 	add	objptr, #217
04ea0     07 43 C2 FA | 	rdbyte	_var10, objptr
04ea4     21 3B 82 F1 | 	sub	_var06, _var10
04ea8     02 30 66 F0 | 	shl	_var01, #2
04eac     D9 0E 86 F1 | 	sub	objptr, #217
04eb0     07 31 02 F1 | 	add	_var01, objptr
04eb4     18 3B 62 FC | 	wrlong	_var06, _var01
04eb8     DF 0E 86 F1 | 	sub	objptr, #223
04ebc     9C 02 90 FD | 	jmp	#LR__0201
04ec0                 | LR__0187
04ec0                 | ' 
04ec0                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04ec0     18 41 02 F6 | 	mov	_var09, _var01
04ec4     02 40 66 F0 | 	shl	_var09, #2
04ec8     DF 0E 06 F1 | 	add	objptr, #223
04ecc     07 41 02 F1 | 	add	_var09, objptr
04ed0     20 3B 02 FB | 	rdlong	_var06, _var09
04ed4     D9 0E 06 F1 | 	add	objptr, #217
04ed8     07 43 C2 FA | 	rdbyte	_var10, objptr
04edc     21 3B 02 F1 | 	add	_var06, _var10
04ee0     02 30 66 F0 | 	shl	_var01, #2
04ee4     D9 0E 86 F1 | 	sub	objptr, #217
04ee8     07 31 02 F1 | 	add	_var01, objptr
04eec     18 3B 62 FC | 	wrlong	_var06, _var01
04ef0     DF 0E 86 F1 | 	sub	objptr, #223
04ef4     64 02 90 FD | 	jmp	#LR__0201
04ef8                 | LR__0188
04ef8                 | ' 
04ef8                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
04ef8     B8 0F 06 F1 | 	add	objptr, #440
04efc     07 3B C2 FA | 	rdbyte	_var06, objptr
04f00     01 3A 06 F5 | 	and	_var06, #1
04f04     04 0E 06 F1 | 	add	objptr, #4
04f08     07 31 02 F1 | 	add	_var01, objptr
04f0c     18 3B 42 FC | 	wrbyte	_var06, _var01
04f10     BC 0F 86 F1 | 	sub	objptr, #444
04f14     44 02 90 FD | 	jmp	#LR__0201
04f18                 | LR__0189
04f18                 | ' 
04f18                 | '         $4:                                      ' Set vibrato waveform type
04f18                 | '           vibratoType[channel]  := y & 3
04f18     B8 0F 06 F1 | 	add	objptr, #440
04f1c     07 3B C2 FA | 	rdbyte	_var06, objptr
04f20     03 3A 06 F5 | 	and	_var06, #3
04f24     18 45 02 F6 | 	mov	_var11, _var01
04f28     08 0E 06 F1 | 	add	objptr, #8
04f2c     07 45 02 F1 | 	add	_var11, objptr
04f30     22 3B 42 FC | 	wrbyte	_var06, _var11
04f34                 | '           resetVibrato[channel] := y & 4
04f34     08 0E 86 F1 | 	sub	objptr, #8
04f38     07 3B C2 FA | 	rdbyte	_var06, objptr
04f3c     04 3A 06 F5 | 	and	_var06, #4
04f40     25 0E 86 F1 | 	sub	objptr, #37
04f44     07 31 02 F1 | 	add	_var01, objptr
04f48     18 3B 42 FC | 	wrbyte	_var06, _var01
04f4c     93 0F 86 F1 | 	sub	objptr, #403
04f50     08 02 90 FD | 	jmp	#LR__0201
04f54                 | LR__0190
04f54                 | ' 
04f54                 | '         $5: fineTune := y                        ' Set finetune
04f54     B8 0F 06 F1 | 	add	objptr, #440
04f58     07 3B C2 FA | 	rdbyte	_var06, objptr
04f5c     09 0E 86 F1 | 	sub	objptr, #9
04f60     07 3B 62 FC | 	wrlong	_var06, objptr
04f64     AF 0F 86 F1 | 	sub	objptr, #431
04f68     F0 01 90 FD | 	jmp	#LR__0201
04f6c                 | LR__0191
04f6c                 | ' 
04f6c                 | '         $6:                                      ' Pattern looping
04f6c                 | '           if y == 0
04f6c     B8 0F 06 F1 | 	add	objptr, #440
04f70     07 3B CA FA | 	rdbyte	_var06, objptr wz
04f74     B8 0F 86 F1 | 	sub	objptr, #440
04f78     1C 00 90 5D |  if_ne	jmp	#LR__0192
04f7c                 | '             cmdE6_memory[channel] := patternRow
04f7c     E9 0F 06 F1 | 	add	objptr, #489
04f80     07 31 02 F1 | 	add	_var01, objptr
04f84     47 0F 86 F1 | 	sub	objptr, #327
04f88     07 45 C2 FA | 	rdbyte	_var11, objptr
04f8c     A2 0E 86 F1 | 	sub	objptr, #162
04f90     18 45 42 FC | 	wrbyte	_var11, _var01
04f94                 | '           else
04f94     C4 01 90 FD | 	jmp	#LR__0201
04f98                 | LR__0192
04f98                 | '             if ++cmdE6_counter[channel] <= y
04f98     18 41 02 F6 | 	mov	_var09, _var01
04f9c     ED 0F 06 F1 | 	add	objptr, #493
04fa0     07 41 02 F1 | 	add	_var09, objptr
04fa4     20 3B C2 FA | 	rdbyte	_var06, _var09
04fa8     01 3A 06 F1 | 	add	_var06, #1
04fac     18 43 02 F6 | 	mov	_var10, _var01
04fb0     07 43 02 F1 | 	add	_var10, objptr
04fb4     21 3B 42 FC | 	wrbyte	_var06, _var10
04fb8     21 47 C2 FA | 	rdbyte	_var12, _var10
04fbc     35 0E 86 F1 | 	sub	objptr, #53
04fc0     07 49 C2 FA | 	rdbyte	_var13, objptr
04fc4     B8 0F 86 F1 | 	sub	objptr, #440
04fc8     24 47 5A F2 | 	cmps	_var12, _var13 wcz
04fcc     24 00 90 1D |  if_a	jmp	#LR__0193
04fd0                 | '               cmdE6_updatePosition[channel] := true
04fd0     F1 0F 06 F1 | 	add	objptr, #497
04fd4     07 31 02 F1 | 	add	_var01, objptr
04fd8     FF FF FF FF 
04fdc     18 FF 4B FC | 	wrbyte	##-1, _var01
04fe0                 | '               cmdE6_updatePositionCommon    := true
04fe0     04 0E 06 F1 | 	add	objptr, #4
04fe4     FF FF FF FF 
04fe8     07 FF 4B FC | 	wrbyte	##-1, objptr
04fec     F5 0F 86 F1 | 	sub	objptr, #501
04ff0                 | '             else
04ff0     68 01 90 FD | 	jmp	#LR__0201
04ff4                 | LR__0193
04ff4                 | '               cmdE6_counter[channel] := 0
04ff4     ED 0F 06 F1 | 	add	objptr, #493
04ff8     07 31 02 F1 | 	add	_var01, objptr
04ffc     18 01 48 FC | 	wrbyte	#0, _var01
05000     ED 0F 86 F1 | 	sub	objptr, #493
05004     54 01 90 FD | 	jmp	#LR__0201
05008                 | LR__0194
05008                 | ' 
05008                 | '         $7:                                      ' Set tremolo waveform type
05008                 | '           tremoloType[channel] := y & 3
05008     B8 0F 06 F1 | 	add	objptr, #440
0500c     07 3B C2 FA | 	rdbyte	_var06, objptr
05010     03 3A 06 F5 | 	and	_var06, #3
05014     18 45 02 F6 | 	mov	_var11, _var01
05018     0C 0E 06 F1 | 	add	objptr, #12
0501c     07 45 02 F1 | 	add	_var11, objptr
05020     22 3B 42 FC | 	wrbyte	_var06, _var11
05024                 | '           resetTremolo[channel] := y & 4
05024     0C 0E 86 F1 | 	sub	objptr, #12
05028     07 3B C2 FA | 	rdbyte	_var06, objptr
0502c     04 3A 06 F5 | 	and	_var06, #4
05030     29 0E 86 F1 | 	sub	objptr, #41
05034     07 31 02 F1 | 	add	_var01, objptr
05038     18 3B 42 FC | 	wrbyte	_var06, _var01
0503c     8F 0F 86 F1 | 	sub	objptr, #399
05040     18 01 90 FD | 	jmp	#LR__0201
05044                 | LR__0195
05044                 | ' 
05044                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
05044     18 41 02 F6 | 	mov	_var09, _var01
05048     02 40 66 F0 | 	shl	_var09, #2
0504c     FF 0E 06 F1 | 	add	objptr, #255
05050     07 41 02 F1 | 	add	_var09, objptr
05054     20 3B 02 FB | 	rdlong	_var06, _var09
05058     B9 0E 06 F1 | 	add	objptr, #185
0505c     07 43 C2 FA | 	rdbyte	_var10, objptr
05060     21 3B 02 F1 | 	add	_var06, _var10
05064     02 30 66 F0 | 	shl	_var01, #2
05068     B9 0E 86 F1 | 	sub	objptr, #185
0506c     07 31 02 F1 | 	add	_var01, objptr
05070     18 3B 62 FC | 	wrlong	_var06, _var01
05074     FF 0E 86 F1 | 	sub	objptr, #255
05078     E0 00 90 FD | 	jmp	#LR__0201
0507c                 | LR__0196
0507c                 | ' 
0507c                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
0507c     18 41 02 F6 | 	mov	_var09, _var01
05080     02 40 66 F0 | 	shl	_var09, #2
05084     FF 0E 06 F1 | 	add	objptr, #255
05088     07 41 02 F1 | 	add	_var09, objptr
0508c     20 3B 02 FB | 	rdlong	_var06, _var09
05090     B9 0E 06 F1 | 	add	objptr, #185
05094     07 43 C2 FA | 	rdbyte	_var10, objptr
05098     21 3B 82 F1 | 	sub	_var06, _var10
0509c     02 30 66 F0 | 	shl	_var01, #2
050a0     B9 0E 86 F1 | 	sub	objptr, #185
050a4     07 31 02 F1 | 	add	_var01, objptr
050a8     18 3B 62 FC | 	wrlong	_var06, _var01
050ac     FF 0E 86 F1 | 	sub	objptr, #255
050b0     A8 00 90 FD | 	jmp	#LR__0201
050b4                 | LR__0197
050b4                 | ' 
050b4                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
050b4     B8 0F 06 F1 | 	add	objptr, #440
050b8     07 41 C2 FA | 	rdbyte	_var09, objptr
050bc     14 0F 86 F1 | 	sub	objptr, #276
050c0     07 43 C2 FA | 	rdbyte	_var10, objptr
050c4     21 41 02 FD | 	qmul	_var09, _var10
050c8     18 3A 62 FD | 	getqx	_var06
050cc     01 0E 06 F1 | 	add	objptr, #1
050d0     07 3B 42 FC | 	wrbyte	_var06, objptr
050d4     A5 0E 86 F1 | 	sub	objptr, #165
050d8     80 00 90 FD | 	jmp	#LR__0201
050dc                 | LR__0198
050dc                 | ' 
050dc                 | '     $F:                          ' Set speed
050dc                 | '       if z < 32
050dc     B9 0F 06 F1 | 	add	objptr, #441
050e0     07 39 C2 FA | 	rdbyte	_var05, objptr
050e4     B9 0F 86 F1 | 	sub	objptr, #441
050e8     20 38 5E F2 | 	cmps	_var05, #32 wcz
050ec     18 00 90 3D |  if_ae	jmp	#LR__0199
050f0                 | '         currentSongSpeed := z
050f0     B9 0F 06 F1 | 	add	objptr, #441
050f4     07 39 C2 FA | 	rdbyte	_var05, objptr
050f8     15 0F 86 F1 | 	sub	objptr, #277
050fc     07 39 42 FC | 	wrbyte	_var05, objptr
05100     A4 0E 86 F1 | 	sub	objptr, #164
05104                 | '       else
05104     54 00 90 FD | 	jmp	#LR__0200
05108                 | LR__0199
05108                 | '         ticksPerMinute := z * 24
05108     B9 0F 06 F1 | 	add	objptr, #441
0510c     07 3D C2 FA | 	rdbyte	_var07, objptr
05110     1E 39 02 F6 | 	mov	_var05, _var07
05114     01 38 66 F0 | 	shl	_var05, #1
05118     1E 39 02 F1 | 	add	_var05, _var07
0511c     03 38 66 F0 | 	shl	_var05, #3
05120     12 0E 86 F1 | 	sub	objptr, #18
05124     07 39 62 FC | 	wrlong	_var05, objptr
05128     A7 0F 86 F1 | 	sub	objptr, #423
0512c                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
0512c     07 0B 03 FB | 	rdlong	muldiva_, objptr
05130     A7 0F 06 F1 | 	add	objptr, #423
05134     07 0D 03 FB | 	rdlong	muldivb_, objptr
05138     A7 0F 86 F1 | 	sub	objptr, #423
0513c     D0 00 A0 FD | 	call	#divide_
05140     86 3B 02 F6 | 	mov	_var06, muldivb_
05144     04 3A 66 F0 | 	shl	_var06, #4
05148     86 3B 82 F1 | 	sub	_var06, muldivb_
0514c     02 3A 66 F0 | 	shl	_var06, #2
05150     AB 0F 06 F1 | 	add	objptr, #427
05154     07 3B 62 FC | 	wrlong	_var06, objptr
05158     AB 0F 86 F1 | 	sub	objptr, #427
0515c                 | LR__0200
0515c                 | LR__0201
0515c                 | _trackerplayer_spin2_handleZeroTickCommands_ret
0515c     2D 00 64 FD | 	ret
05160                 | 
05160                 | ' 
05160                 | ' 
05160                 | ' ' Handle all commands that executes on "non zero ticks"
05160                 | ' '
05160                 | ' PRI handleNonZeroTickCommands(channel)
05160                 | _trackerplayer_spin2_handleNonZeroTickCommands
05160     0A 5A 05 F6 | 	mov	COUNT_, #10
05164     B0 00 A0 FD | 	call	#pushregs_
05168     2E 6B 02 F6 | 	mov	local01, arg01
0516c                 | ' 
0516c                 | '   CASE_FAST cmd
0516c     BA 0F 06 F1 | 	add	objptr, #442
05170     07 6D C2 FA | 	rdbyte	local02, objptr
05174     BA 0F 86 F1 | 	sub	objptr, #442
05178     36 6F 02 F6 | 	mov	local03, local02
0517c     01 6E 86 F1 | 	sub	local03, #1
05180     0E 6E 26 F3 | 	fle	local03, #14
05184     37 71 02 F6 | 	mov	local04, local03
05188     30 70 62 FD | 	jmprel	local04
0518c                 | LR__0202
0518c     38 00 90 FD | 	jmp	#LR__0203
05190     A0 00 90 FD | 	jmp	#LR__0204
05194     D4 00 90 FD | 	jmp	#LR__0205
05198     1C 02 90 FD | 	jmp	#LR__0215
0519c     20 01 90 FD | 	jmp	#LR__0207
051a0     48 01 90 FD | 	jmp	#LR__0208
051a4     50 01 90 FD | 	jmp	#LR__0209
051a8     0C 02 90 FD | 	jmp	#LR__0215
051ac     08 02 90 FD | 	jmp	#LR__0215
051b0     B0 01 90 FD | 	jmp	#LR__0212
051b4     00 02 90 FD | 	jmp	#LR__0215
051b8     FC 01 90 FD | 	jmp	#LR__0215
051bc     F8 01 90 FD | 	jmp	#LR__0215
051c0     AC 01 90 FD | 	jmp	#LR__0213
051c4     F0 01 90 FD | 	jmp	#LR__0215
051c8                 | LR__0203
051c8                 | ' 
051c8                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
051c8     35 73 02 F6 | 	mov	local05, local01
051cc     02 72 66 F0 | 	shl	local05, #2
051d0     DF 0E 06 F1 | 	add	objptr, #223
051d4     07 73 02 F1 | 	add	local05, objptr
051d8     39 75 02 FB | 	rdlong	local06, local05
051dc     DA 0E 06 F1 | 	add	objptr, #218
051e0     07 77 C2 FA | 	rdbyte	local07, objptr
051e4     3B 75 82 F1 | 	sub	local06, local07
051e8     35 79 02 F6 | 	mov	local08, local01
051ec     02 78 66 F0 | 	shl	local08, #2
051f0     DA 0E 86 F1 | 	sub	objptr, #218
051f4     07 79 02 F1 | 	add	local08, objptr
051f8     3C 75 62 FC | 	wrlong	local06, local08
051fc                 | ' 
051fc                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
051fc                 | '       if currPeriod[channel] < 0
051fc     35 75 02 F6 | 	mov	local06, local01
05200     02 74 66 F0 | 	shl	local06, #2
05204     07 75 02 F1 | 	add	local06, objptr
05208     3A 7B 02 FB | 	rdlong	local09, local06
0520c     00 7A 5E F2 | 	cmps	local09, #0 wcz
05210     DF 0E 86 F1 | 	sub	objptr, #223
05214     A0 01 90 3D |  if_ae	jmp	#LR__0215
05218                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05218     02 6A 66 F0 | 	shl	local01, #2
0521c     DF 0E 06 F1 | 	add	objptr, #223
05220     07 6B 02 F1 | 	add	local01, objptr
05224     01 00 80 FF 
05228     35 B1 6A FC | 	wrlong	##856, local01
0522c     DF 0E 86 F1 | 	sub	objptr, #223
05230     84 01 90 FD | 	jmp	#LR__0215
05234                 | LR__0204
05234                 | ' 
05234                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
05234     35 73 02 F6 | 	mov	local05, local01
05238     02 72 66 F0 | 	shl	local05, #2
0523c     DF 0E 06 F1 | 	add	objptr, #223
05240     07 73 02 F1 | 	add	local05, objptr
05244     39 75 02 FB | 	rdlong	local06, local05
05248     DA 0E 06 F1 | 	add	objptr, #218
0524c     07 77 C2 FA | 	rdbyte	local07, objptr
05250     3B 75 02 F1 | 	add	local06, local07
05254     02 6A 66 F0 | 	shl	local01, #2
05258     DA 0E 86 F1 | 	sub	objptr, #218
0525c     07 6B 02 F1 | 	add	local01, objptr
05260     35 75 62 FC | 	wrlong	local06, local01
05264     DF 0E 86 F1 | 	sub	objptr, #223
05268     4C 01 90 FD | 	jmp	#LR__0215
0526c                 | LR__0205
0526c                 | ' 
0526c                 | '     $3:                                 ' Slide to note (portamento)
0526c                 | '       if z > 0
0526c     B9 0F 06 F1 | 	add	objptr, #441
05270     07 75 C2 FA | 	rdbyte	local06, objptr
05274     B9 0F 86 F1 | 	sub	objptr, #441
05278     00 74 5E F2 | 	cmps	local06, #0 wcz
0527c     1C 00 90 ED |  if_be	jmp	#LR__0206
05280                 | '         cmd3_memoryZ[channel] := z
05280     35 75 02 F6 | 	mov	local06, local01
05284     C8 0F 06 F1 | 	add	objptr, #456
05288     07 75 02 F1 | 	add	local06, objptr
0528c     0F 0E 86 F1 | 	sub	objptr, #15
05290     07 7B C2 FA | 	rdbyte	local09, objptr
05294     B9 0F 86 F1 | 	sub	objptr, #441
05298     3A 7B 42 FC | 	wrbyte	local09, local06
0529c                 | LR__0206
0529c                 | ' 
0529c                 | '       doPortamento(channel, lastSetPeriod[channel])
0529c     35 73 02 F6 | 	mov	local05, local01
052a0     02 72 66 F0 | 	shl	local05, #2
052a4     27 0F 06 F1 | 	add	objptr, #295
052a8     07 73 02 F1 | 	add	local05, objptr
052ac     39 5F 02 FB | 	rdlong	arg02, local05
052b0     35 5D 02 F6 | 	mov	arg01, local01
052b4     27 0F 86 F1 | 	sub	objptr, #295
052b8     64 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
052bc     F8 00 90 FD | 	jmp	#LR__0215
052c0                 | LR__0207
052c0                 | ' 
052c0                 | '     $5:                                 ' Volume slide + portamento
052c0                 | '       doVolumeSlide(channel)
052c0     35 5D 02 F6 | 	mov	arg01, local01
052c4     54 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
052c8                 | '       doPortamento(channel, lastSetPeriod[channel])
052c8     35 73 02 F6 | 	mov	local05, local01
052cc     02 72 66 F0 | 	shl	local05, #2
052d0     27 0F 06 F1 | 	add	objptr, #295
052d4     07 73 02 F1 | 	add	local05, objptr
052d8     39 5F 02 FB | 	rdlong	arg02, local05
052dc     35 5D 02 F6 | 	mov	arg01, local01
052e0     27 0F 86 F1 | 	sub	objptr, #295
052e4     38 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
052e8     CC 00 90 FD | 	jmp	#LR__0215
052ec                 | LR__0208
052ec                 | ' 
052ec                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
052ec     35 5D 02 F6 | 	mov	arg01, local01
052f0     28 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
052f4     C0 00 90 FD | 	jmp	#LR__0215
052f8                 | LR__0209
052f8                 | ' 
052f8                 | '     $7:                                 ' Tremolo
052f8                 | '       if x > 0
052f8     B7 0F 06 F1 | 	add	objptr, #439
052fc     07 75 C2 FA | 	rdbyte	local06, objptr
05300     B7 0F 86 F1 | 	sub	objptr, #439
05304     00 74 5E F2 | 	cmps	local06, #0 wcz
05308     1C 00 90 ED |  if_be	jmp	#LR__0210
0530c                 | '         cmd7_memoryX[channel] := x
0530c     35 75 02 F6 | 	mov	local06, local01
05310     D8 0F 06 F1 | 	add	objptr, #472
05314     07 75 02 F1 | 	add	local06, objptr
05318     21 0E 86 F1 | 	sub	objptr, #33
0531c     07 7B C2 FA | 	rdbyte	local09, objptr
05320     B7 0F 86 F1 | 	sub	objptr, #439
05324     3A 7B 42 FC | 	wrbyte	local09, local06
05328                 | LR__0210
05328                 | '       if y > 0
05328     B8 0F 06 F1 | 	add	objptr, #440
0532c     07 75 C2 FA | 	rdbyte	local06, objptr
05330     B8 0F 86 F1 | 	sub	objptr, #440
05334     00 74 5E F2 | 	cmps	local06, #0 wcz
05338     1C 00 90 ED |  if_be	jmp	#LR__0211
0533c                 | '         cmd7_memoryY[channel] := y
0533c     35 75 02 F6 | 	mov	local06, local01
05340     D4 0F 06 F1 | 	add	objptr, #468
05344     07 75 02 F1 | 	add	local06, objptr
05348     1C 0E 86 F1 | 	sub	objptr, #28
0534c     07 7B C2 FA | 	rdbyte	local09, objptr
05350     B8 0F 86 F1 | 	sub	objptr, #440
05354     3A 7B 42 FC | 	wrbyte	local09, local06
05358                 | LR__0211
05358                 | ' 
05358                 | '       doTremolo(channel)
05358     35 5D 02 F6 | 	mov	arg01, local01
0535c     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
05360     54 00 90 FD | 	jmp	#LR__0215
05364                 | LR__0212
05364                 | ' 
05364                 | '     $A: doVolumeSlide(channel)          ' Volume slide
05364     35 5D 02 F6 | 	mov	arg01, local01
05368     B0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
0536c     48 00 90 FD | 	jmp	#LR__0215
05370                 | LR__0213
05370                 | ' 
05370                 | '     $E:                                 ' Retrig every Y ticks
05370                 | '       if (x == $9) && ((tickcounter // y) == 0)
05370     B7 0F 06 F1 | 	add	objptr, #439
05374     07 73 C2 FA | 	rdbyte	local05, objptr
05378     B7 0F 86 F1 | 	sub	objptr, #439
0537c     09 72 0E F2 | 	cmp	local05, #9 wz
05380     34 00 90 5D |  if_ne	jmp	#LR__0214
05384     A1 0E 06 F1 | 	add	objptr, #161
05388     07 77 C2 FA | 	rdbyte	local07, objptr
0538c     3B 0B 03 F6 | 	mov	muldiva_, local07
05390     17 0F 06 F1 | 	add	objptr, #279
05394     07 7D C2 FA | 	rdbyte	local10, objptr
05398     B8 0F 86 F1 | 	sub	objptr, #440
0539c     3E 0D 03 F6 | 	mov	muldivb_, local10
053a0     D0 00 A0 FD | 	call	#divide_
053a4     85 7B 0A F6 | 	mov	local09, muldiva_ wz
053a8     0C 00 90 5D |  if_ne	jmp	#LR__0214
053ac                 | '         triggerNote(channel)
053ac     35 75 02 F6 | 	mov	local06, local01
053b0     3A 5D 02 F6 | 	mov	arg01, local06
053b4     24 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
053b8                 | LR__0214
053b8                 | LR__0215
053b8     AF F0 03 F6 | 	mov	ptra, fp
053bc     BF 00 A0 FD | 	call	#popregs_
053c0                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
053c0     2D 00 64 FD | 	ret
053c4                 | 
053c4                 | ' 
053c4                 | ' 
053c4                 | ' ' Handle all commands that executes on every tick
053c4                 | ' '
053c4                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
053c4                 | _trackerplayer_spin2_handleEveryTickCommands
053c4     12 5A 05 F6 | 	mov	COUNT_, #18
053c8     B0 00 A0 FD | 	call	#pushregs_
053cc     2E 6B 02 F6 | 	mov	local01, arg01
053d0                 | ' 
053d0                 | '   CASE_FAST cmd
053d0     BA 0F 06 F1 | 	add	objptr, #442
053d4     07 6D C2 FA | 	rdbyte	local02, objptr
053d8     BA 0F 86 F1 | 	sub	objptr, #442
053dc     36 6F 02 F6 | 	mov	local03, local02
053e0     0F 6E 26 F3 | 	fle	local03, #15
053e4     37 71 02 F6 | 	mov	local04, local03
053e8     30 70 62 FD | 	jmprel	local04
053ec                 | LR__0216
053ec     3C 00 90 FD | 	jmp	#LR__0217
053f0     68 03 90 FD | 	jmp	#LR__0231
053f4     64 03 90 FD | 	jmp	#LR__0231
053f8     60 03 90 FD | 	jmp	#LR__0231
053fc     E8 01 90 FD | 	jmp	#LR__0220
05400     58 03 90 FD | 	jmp	#LR__0231
05404     4C 02 90 FD | 	jmp	#LR__0223
05408     50 03 90 FD | 	jmp	#LR__0231
0540c     4C 03 90 FD | 	jmp	#LR__0231
05410     48 03 90 FD | 	jmp	#LR__0231
05414     44 03 90 FD | 	jmp	#LR__0231
05418     40 03 90 FD | 	jmp	#LR__0231
0541c     3C 03 90 FD | 	jmp	#LR__0231
05420     38 03 90 FD | 	jmp	#LR__0231
05424     38 02 90 FD | 	jmp	#LR__0224
05428     30 03 90 FD | 	jmp	#LR__0231
0542c                 | LR__0217
0542c                 | ' 
0542c                 | '     $0:                                 ' Arpeggio
0542c                 | '       arpCounter := tickCounter // 3
0542c     A1 0E 06 F1 | 	add	objptr, #161
05430     07 0B C3 FA | 	rdbyte	muldiva_, objptr
05434     A1 0E 86 F1 | 	sub	objptr, #161
05438     03 0C 07 F6 | 	mov	muldivb_, #3
0543c     D0 00 A0 FD | 	call	#divide_
05440     85 73 02 F6 | 	mov	local05, muldiva_
05444                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
05444     35 75 02 F6 | 	mov	local06, local01
05448     02 74 66 F0 | 	shl	local06, #2
0544c     DF 0E 06 F1 | 	add	objptr, #223
05450     07 75 02 F1 | 	add	local06, objptr
05454     3A 5D 02 FB | 	rdlong	arg01, local06
05458     35 77 02 F6 | 	mov	local07, local01
0545c     0C 0E 86 F1 | 	sub	objptr, #12
05460     07 77 02 F1 | 	add	local07, objptr
05464     3B 5F C2 FA | 	rdbyte	arg02, local07
05468     D3 0E 86 F1 | 	sub	objptr, #211
0546c     9C F0 BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
05470     15 79 02 F6 | 	mov	local08, result1
05474     3C 7B 02 F6 | 	mov	local09, local08
05478     24 78 5E F2 | 	cmps	local08, #36 wcz
0547c     DC 02 90 3D |  if_ae	jmp	#LR__0231
05480                 | '         if arpCounter == 1 and x > 0
05480     01 72 0E F2 | 	cmp	local05, #1 wz
05484     8C 00 90 5D |  if_ne	jmp	#LR__0218
05488     B7 0F 06 F1 | 	add	objptr, #439
0548c     07 75 C2 FA | 	rdbyte	local06, objptr
05490     B7 0F 86 F1 | 	sub	objptr, #439
05494     00 74 5E F2 | 	cmps	local06, #0 wcz
05498     78 00 90 ED |  if_be	jmp	#LR__0218
0549c                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
0549c     3D 7D 02 F6 | 	mov	local10, local09
054a0     B7 0F 06 F1 | 	add	objptr, #439
054a4     07 77 C2 FA | 	rdbyte	local07, objptr
054a8     3B 7F 02 F6 | 	mov	local11, local07
054ac     3B 7D 02 F1 | 	add	local10, local07
054b0     3E 81 02 F6 | 	mov	local12, local10
054b4     40 5D 02 F6 | 	mov	arg01, local12
054b8     06 00 00 FF 
054bc     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
054c0     01 5C 66 F0 | 	shl	arg01, #1
054c4     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
054c8                 | ' 
054c8                 | '   return word[@periodTable][noteNumber]
054c8     2E 2B E2 FA | 	rdword	result1, arg01
054cc     06 00 00 FF 
054d0     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
054d4     15 83 02 F6 | 	mov	local13, result1
054d8     35 85 02 F6 | 	mov	local14, local01
054dc     02 84 66 F0 | 	shl	local14, #2
054e0     D8 0E 86 F1 | 	sub	objptr, #216
054e4     07 87 02 F6 | 	mov	local15, objptr
054e8     07 85 02 F1 | 	add	local14, objptr
054ec     41 75 02 F6 | 	mov	local06, local13
054f0     42 89 02 FB | 	rdlong	local16, local14
054f4     44 75 82 F1 | 	sub	local06, local16
054f8     35 8B 02 F6 | 	mov	local17, local01
054fc     02 8A 66 F0 | 	shl	local17, #2
05500     10 0E 06 F1 | 	add	objptr, #16
05504     07 8D 02 F6 | 	mov	local18, objptr
05508     07 8B 02 F1 | 	add	local17, objptr
0550c     45 75 62 FC | 	wrlong	local06, local17
05510     EF 0E 86 F1 | 	sub	objptr, #239
05514                 | LR__0218
05514                 | '         if arpCounter == 2 and y > 0
05514     02 72 0E F2 | 	cmp	local05, #2 wz
05518     8C 00 90 5D |  if_ne	jmp	#LR__0219
0551c     B8 0F 06 F1 | 	add	objptr, #440
05520     07 75 C2 FA | 	rdbyte	local06, objptr
05524     B8 0F 86 F1 | 	sub	objptr, #440
05528     00 74 5E F2 | 	cmps	local06, #0 wcz
0552c     78 00 90 ED |  if_be	jmp	#LR__0219
05530                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
05530     3D 7D 02 F6 | 	mov	local10, local09
05534     B8 0F 06 F1 | 	add	objptr, #440
05538     07 77 C2 FA | 	rdbyte	local07, objptr
0553c     3B 7F 02 F6 | 	mov	local11, local07
05540     3B 7D 02 F1 | 	add	local10, local07
05544     3E 81 02 F6 | 	mov	local12, local10
05548     40 5D 02 F6 | 	mov	arg01, local12
0554c     06 00 00 FF 
05550     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05554     01 5C 66 F0 | 	shl	arg01, #1
05558     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
0555c                 | ' 
0555c                 | '   return word[@periodTable][noteNumber]
0555c     2E 2B E2 FA | 	rdword	result1, arg01
05560     06 00 00 FF 
05564     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05568     15 83 02 F6 | 	mov	local13, result1
0556c     35 85 02 F6 | 	mov	local14, local01
05570     02 84 66 F0 | 	shl	local14, #2
05574     D9 0E 86 F1 | 	sub	objptr, #217
05578     07 87 02 F6 | 	mov	local15, objptr
0557c     07 85 02 F1 | 	add	local14, objptr
05580     41 75 02 F6 | 	mov	local06, local13
05584     42 89 02 FB | 	rdlong	local16, local14
05588     44 75 82 F1 | 	sub	local06, local16
0558c     35 8B 02 F6 | 	mov	local17, local01
05590     02 8A 66 F0 | 	shl	local17, #2
05594     10 0E 06 F1 | 	add	objptr, #16
05598     07 8D 02 F6 | 	mov	local18, objptr
0559c     07 8B 02 F1 | 	add	local17, objptr
055a0     45 75 62 FC | 	wrlong	local06, local17
055a4     EF 0E 86 F1 | 	sub	objptr, #239
055a8                 | LR__0219
055a8                 | '         if arpCounter == 0 and (x + y) > 0
055a8     00 72 0E F2 | 	cmp	local05, #0 wz
055ac     AC 01 90 5D |  if_ne	jmp	#LR__0231
055b0     B7 0F 06 F1 | 	add	objptr, #439
055b4     07 75 C2 FA | 	rdbyte	local06, objptr
055b8     01 0E 06 F1 | 	add	objptr, #1
055bc     07 77 C2 FA | 	rdbyte	local07, objptr
055c0     B8 0F 86 F1 | 	sub	objptr, #440
055c4     3B 75 02 F1 | 	add	local06, local07
055c8     00 74 5E F2 | 	cmps	local06, #0 wcz
055cc     8C 01 90 ED |  if_be	jmp	#LR__0231
055d0                 | '           deltaPeriod[channel] := 0
055d0     02 6A 66 F0 | 	shl	local01, #2
055d4     EF 0E 06 F1 | 	add	objptr, #239
055d8     07 6B 02 F1 | 	add	local01, objptr
055dc     35 01 68 FC | 	wrlong	#0, local01
055e0     EF 0E 86 F1 | 	sub	objptr, #239
055e4     74 01 90 FD | 	jmp	#LR__0231
055e8                 | LR__0220
055e8                 | ' 
055e8                 | '     $4:                                 ' Vibrato
055e8                 | '       if x > 0
055e8     B7 0F 06 F1 | 	add	objptr, #439
055ec     07 75 C2 FA | 	rdbyte	local06, objptr
055f0     B7 0F 86 F1 | 	sub	objptr, #439
055f4     00 74 5E F2 | 	cmps	local06, #0 wcz
055f8     1C 00 90 ED |  if_be	jmp	#LR__0221
055fc                 | '         cmd4_memoryX[channel] := x
055fc     35 75 02 F6 | 	mov	local06, local01
05600     D0 0F 06 F1 | 	add	objptr, #464
05604     07 75 02 F1 | 	add	local06, objptr
05608     19 0E 86 F1 | 	sub	objptr, #25
0560c     07 7F C2 FA | 	rdbyte	local11, objptr
05610     B7 0F 86 F1 | 	sub	objptr, #439
05614     3A 7F 42 FC | 	wrbyte	local11, local06
05618                 | LR__0221
05618                 | '       if y > 0
05618     B8 0F 06 F1 | 	add	objptr, #440
0561c     07 75 C2 FA | 	rdbyte	local06, objptr
05620     B8 0F 86 F1 | 	sub	objptr, #440
05624     00 74 5E F2 | 	cmps	local06, #0 wcz
05628     1C 00 90 ED |  if_be	jmp	#LR__0222
0562c                 | '         cmd4_memoryY[channel] := y
0562c     35 75 02 F6 | 	mov	local06, local01
05630     CC 0F 06 F1 | 	add	objptr, #460
05634     07 75 02 F1 | 	add	local06, objptr
05638     14 0E 86 F1 | 	sub	objptr, #20
0563c     07 7F C2 FA | 	rdbyte	local11, objptr
05640     B8 0F 86 F1 | 	sub	objptr, #440
05644     3A 7F 42 FC | 	wrbyte	local11, local06
05648                 | LR__0222
05648                 | ' 
05648                 | '       doVibrato(channel)
05648     35 5D 02 F6 | 	mov	arg01, local01
0564c     74 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05650     08 01 90 FD | 	jmp	#LR__0231
05654                 | LR__0223
05654                 | ' 
05654                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
05654     35 5D 02 F6 | 	mov	arg01, local01
05658     68 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
0565c     FC 00 90 FD | 	jmp	#LR__0231
05660                 | LR__0224
05660                 | ' 
05660                 | '     $E:
05660                 | '       if x == $C                        ' Cut note after Y ticks
05660     B7 0F 06 F1 | 	add	objptr, #439
05664     07 75 C2 FA | 	rdbyte	local06, objptr
05668     B7 0F 86 F1 | 	sub	objptr, #439
0566c     0C 74 0E F2 | 	cmp	local06, #12 wz
05670     34 00 90 5D |  if_ne	jmp	#LR__0225
05674                 | '         if tickcounter == y
05674     A1 0E 06 F1 | 	add	objptr, #161
05678     07 75 C2 FA | 	rdbyte	local06, objptr
0567c     17 0F 06 F1 | 	add	objptr, #279
05680     07 7F C2 FA | 	rdbyte	local11, objptr
05684     B8 0F 86 F1 | 	sub	objptr, #440
05688     3F 75 0A F2 | 	cmp	local06, local11 wz
0568c     CC 00 90 5D |  if_ne	jmp	#LR__0230
05690                 | '           currVolume[channel] := 0
05690     02 6A 66 F0 | 	shl	local01, #2
05694     FF 0E 06 F1 | 	add	objptr, #255
05698     07 6B 02 F1 | 	add	local01, objptr
0569c     35 01 68 FC | 	wrlong	#0, local01
056a0     FF 0E 86 F1 | 	sub	objptr, #255
056a4     B4 00 90 FD | 	jmp	#LR__0230
056a8                 | LR__0225
056a8                 | ' 
056a8                 | '       elseif x == $D                    ' Delay note Y ticks
056a8     B7 0F 06 F1 | 	add	objptr, #439
056ac     07 75 C2 FA | 	rdbyte	local06, objptr
056b0     B7 0F 86 F1 | 	sub	objptr, #439
056b4     0D 74 0E F2 | 	cmp	local06, #13 wz
056b8     A0 00 90 5D |  if_ne	jmp	#LR__0229
056bc                 | '         if tickcounter == y
056bc     A1 0E 06 F1 | 	add	objptr, #161
056c0     07 75 C2 FA | 	rdbyte	local06, objptr
056c4     17 0F 06 F1 | 	add	objptr, #279
056c8     07 7F C2 FA | 	rdbyte	local11, objptr
056cc     B8 0F 86 F1 | 	sub	objptr, #440
056d0     3F 75 0A F2 | 	cmp	local06, local11 wz
056d4     0C 00 90 5D |  if_ne	jmp	#LR__0226
056d8                 | '           triggerNote(channel)
056d8     35 5D 02 F6 | 	mov	arg01, local01
056dc     FC EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
056e0     78 00 90 FD | 	jmp	#LR__0228
056e4                 | LR__0226
056e4                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
056e4                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
056e4     B8 0F 06 F1 | 	add	objptr, #440
056e8     07 75 C2 FA | 	rdbyte	local06, objptr
056ec     14 0F 86 F1 | 	sub	objptr, #276
056f0     07 7F C2 FA | 	rdbyte	local11, objptr
056f4     A4 0E 86 F1 | 	sub	objptr, #164
056f8     3F 75 5A F2 | 	cmps	local06, local11 wcz
056fc     5C 00 90 CD |  if_b	jmp	#LR__0227
05700     A4 0E 06 F1 | 	add	objptr, #164
05704     07 83 C2 FA | 	rdbyte	local13, objptr
05708     41 81 02 F6 | 	mov	local12, local13
0570c     01 80 86 F1 | 	sub	local12, #1
05710     03 0E 86 F1 | 	sub	objptr, #3
05714     07 87 C2 FA | 	rdbyte	local15, objptr
05718     A1 0E 86 F1 | 	sub	objptr, #161
0571c     43 85 02 F6 | 	mov	local14, local15
05720     40 85 0A F2 | 	cmp	local14, local12 wz
05724     34 00 90 5D |  if_ne	jmp	#LR__0227
05728                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
05728     35 75 02 F6 | 	mov	local06, local01
0572c     02 74 66 F0 | 	shl	local06, #2
05730     27 0F 06 F1 | 	add	objptr, #295
05734     07 7D 02 F6 | 	mov	local10, objptr
05738     07 75 02 F1 | 	add	local06, objptr
0573c     35 7F 02 F6 | 	mov	local11, local01
05740     02 7E 66 F0 | 	shl	local11, #2
05744     48 0E 86 F1 | 	sub	objptr, #72
05748     07 77 02 F6 | 	mov	local07, objptr
0574c     3A 81 02 FB | 	rdlong	local12, local06
05750     3B 7F 02 F1 | 	add	local11, local07
05754     3F 81 62 FC | 	wrlong	local12, local11
05758     DF 0E 86 F1 | 	sub	objptr, #223
0575c                 | LR__0227
0575c                 | LR__0228
0575c                 | LR__0229
0575c                 | LR__0230
0575c                 | LR__0231
0575c     AF F0 03 F6 | 	mov	ptra, fp
05760     BF 00 A0 FD | 	call	#popregs_
05764                 | _trackerplayer_spin2_handleEveryTickCommands_ret
05764     2D 00 64 FD | 	ret
05768                 | 
05768                 | ' 
05768                 | ' 
05768                 | ' PRI doTremolo(channel) | depth, sineWave, speed
05768                 | _trackerplayer_spin2_doTremolo
05768     2E 31 02 F6 | 	mov	_var01, arg01
0576c     18 33 02 F6 | 	mov	_var02, _var01
05770     8B 0F 06 F1 | 	add	objptr, #395
05774     07 33 02 F1 | 	add	_var02, objptr
05778     05 00 00 FF 
0577c     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05780     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05784     19 37 C2 FA | 	rdbyte	_var04, _var02
05788     02 36 66 F0 | 	shl	_var04, #2
0578c     1A 37 02 F1 | 	add	_var04, _var03
05790                 | ' 
05790                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
05790     1B 39 02 FB | 	rdlong	_var05, _var04
05794     18 3B 02 F6 | 	mov	_var06, _var01
05798     49 0E 06 F1 | 	add	objptr, #73
0579c     07 3B 02 F1 | 	add	_var06, objptr
057a0                 | '   depth    := cmd7_memoryY[channel]
057a0     1D 3D C2 FA | 	rdbyte	_var07, _var06
057a4     18 3F 02 F6 | 	mov	_var08, _var01
057a8     04 0E 06 F1 | 	add	objptr, #4
057ac     07 3F 02 F1 | 	add	_var08, objptr
057b0                 | '   speed    := cmd7_memoryX[channel]
057b0     1F 41 C2 FA | 	rdbyte	_var09, _var08
057b4                 | ' 
057b4                 | '   CASE_FAST vibratoType[channel]
057b4     18 43 02 F6 | 	mov	_var10, _var01
057b8     18 0E 86 F1 | 	sub	objptr, #24
057bc     07 45 02 F6 | 	mov	_var11, objptr
057c0     07 43 02 F1 | 	add	_var10, objptr
057c4     21 47 C2 FA | 	rdbyte	_var12, _var10
057c8     03 46 26 F3 | 	fle	_var12, #3
057cc     23 49 02 F6 | 	mov	_var13, _var12
057d0     05 00 00 FF 
057d4     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
057d8     C0 0F 86 F1 | 	sub	objptr, #448
057dc     30 48 62 FD | 	jmprel	_var13
057e0                 | LR__0232
057e0     0C 00 90 FD | 	jmp	#LR__0233
057e4     30 00 90 FD | 	jmp	#LR__0234
057e8     6C 00 90 FD | 	jmp	#LR__0235
057ec     B4 00 90 FD | 	jmp	#LR__0236
057f0                 | LR__0233
057f0                 | ' 
057f0                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
057f0     1C 3D 02 FD | 	qmul	_var07, _var05
057f4     18 4A 62 FD | 	getqx	_var14
057f8     06 4A C6 F0 | 	sar	_var14, #6
057fc     18 4D 02 F6 | 	mov	_var15, _var01
05800     02 4C 66 F0 | 	shl	_var15, #2
05804     0F 0F 06 F1 | 	add	objptr, #271
05808     07 4D 02 F1 | 	add	_var15, objptr
0580c     26 4B 62 FC | 	wrlong	_var14, _var15
05810     0F 0F 86 F1 | 	sub	objptr, #271
05814     8C 00 90 FD | 	jmp	#LR__0236
05818                 | LR__0234
05818                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
05818     18 4D 02 F6 | 	mov	_var15, _var01
0581c     8B 0F 06 F1 | 	add	objptr, #395
05820     07 4D 02 F1 | 	add	_var15, objptr
05824     26 4F C2 FA | 	rdbyte	_var16, _var15
05828     03 4E 66 F0 | 	shl	_var16, #3
0582c     27 3D 02 FD | 	qmul	_var07, _var16
05830     18 4A 62 FD | 	getqx	_var14
05834     00 4B 86 F1 | 	sub	_var14, #256
05838     06 4A C6 F0 | 	sar	_var14, #6
0583c     18 51 02 F6 | 	mov	_var17, _var01
05840     02 50 66 F0 | 	shl	_var17, #2
05844     7C 0E 86 F1 | 	sub	objptr, #124
05848     07 51 02 F1 | 	add	_var17, objptr
0584c     28 4B 62 FC | 	wrlong	_var14, _var17
05850     0F 0F 86 F1 | 	sub	objptr, #271
05854     4C 00 90 FD | 	jmp	#LR__0236
05858                 | LR__0235
05858                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
05858     18 4D 02 F6 | 	mov	_var15, _var01
0585c     8B 0F 06 F1 | 	add	objptr, #395
05860     07 53 02 F6 | 	mov	_var18, objptr
05864     07 4D 02 F1 | 	add	_var15, objptr
05868     26 4F C2 FA | 	rdbyte	_var16, _var15
0586c     20 4E 06 F5 | 	and	_var16, #32
05870     04 4E 66 F0 | 	shl	_var16, #4
05874     27 3D 02 FD | 	qmul	_var07, _var16
05878     18 54 62 FD | 	getqx	_var19
0587c     2A 4B 02 F6 | 	mov	_var14, _var19
05880     00 4B 86 F1 | 	sub	_var14, #256
05884     06 4A C6 F0 | 	sar	_var14, #6
05888     18 51 02 F6 | 	mov	_var17, _var01
0588c     02 50 66 F0 | 	shl	_var17, #2
05890     7C 0E 86 F1 | 	sub	objptr, #124
05894     07 57 02 F6 | 	mov	_var20, objptr
05898     07 51 02 F1 | 	add	_var17, objptr
0589c     28 4B 62 FC | 	wrlong	_var14, _var17
058a0     0F 0F 86 F1 | 	sub	objptr, #271
058a4                 | LR__0236
058a4     8B 0F 06 F1 | 	add	objptr, #395
058a8     07 31 02 F1 | 	add	_var01, objptr
058ac     18 59 C2 FA | 	rdbyte	_var21, _var01
058b0     20 59 02 F1 | 	add	_var21, _var09
058b4     3F 58 06 F5 | 	and	_var21, #63
058b8                 | ' 
058b8                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
058b8     18 59 42 FC | 	wrbyte	_var21, _var01
058bc     8B 0F 86 F1 | 	sub	objptr, #395
058c0                 | _trackerplayer_spin2_doTremolo_ret
058c0     2D 00 64 FD | 	ret
058c4                 | 
058c4                 | ' 
058c4                 | ' 
058c4                 | ' PRI doVibrato(channel) | depth, sineWave, speed
058c4                 | _trackerplayer_spin2_doVibrato
058c4     2E 31 02 F6 | 	mov	_var01, arg01
058c8     18 33 02 F6 | 	mov	_var02, _var01
058cc     87 0F 06 F1 | 	add	objptr, #391
058d0     07 33 02 F1 | 	add	_var02, objptr
058d4     05 00 00 FF 
058d8     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
058dc     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
058e0     19 37 C2 FA | 	rdbyte	_var04, _var02
058e4     02 36 66 F0 | 	shl	_var04, #2
058e8     1A 37 02 F1 | 	add	_var04, _var03
058ec                 | ' 
058ec                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
058ec     1B 39 02 FB | 	rdlong	_var05, _var04
058f0     18 3B 02 F6 | 	mov	_var06, _var01
058f4     45 0E 06 F1 | 	add	objptr, #69
058f8     07 3B 02 F1 | 	add	_var06, objptr
058fc                 | '   depth    := cmd4_memoryY[channel]
058fc     1D 3D C2 FA | 	rdbyte	_var07, _var06
05900     18 3F 02 F6 | 	mov	_var08, _var01
05904     04 0E 06 F1 | 	add	objptr, #4
05908     07 3F 02 F1 | 	add	_var08, objptr
0590c                 | '   speed    := cmd4_memoryX[channel]
0590c     1F 41 C2 FA | 	rdbyte	_var09, _var08
05910                 | ' 
05910                 | '   CASE_FAST vibratoType[channel]
05910     18 43 02 F6 | 	mov	_var10, _var01
05914     10 0E 86 F1 | 	sub	objptr, #16
05918     07 45 02 F6 | 	mov	_var11, objptr
0591c     07 43 02 F1 | 	add	_var10, objptr
05920     21 47 C2 FA | 	rdbyte	_var12, _var10
05924     03 46 26 F3 | 	fle	_var12, #3
05928     23 49 02 F6 | 	mov	_var13, _var12
0592c     05 00 00 FF 
05930     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05934     C0 0F 86 F1 | 	sub	objptr, #448
05938     30 48 62 FD | 	jmprel	_var13
0593c                 | LR__0237
0593c     0C 00 90 FD | 	jmp	#LR__0238
05940     30 00 90 FD | 	jmp	#LR__0239
05944     6C 00 90 FD | 	jmp	#LR__0240
05948     B4 00 90 FD | 	jmp	#LR__0241
0594c                 | LR__0238
0594c                 | ' 
0594c                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
0594c     1C 3D 02 FD | 	qmul	_var07, _var05
05950     18 4A 62 FD | 	getqx	_var14
05954     07 4A C6 F0 | 	sar	_var14, #7
05958     18 4D 02 F6 | 	mov	_var15, _var01
0595c     02 4C 66 F0 | 	shl	_var15, #2
05960     EF 0E 06 F1 | 	add	objptr, #239
05964     07 4D 02 F1 | 	add	_var15, objptr
05968     26 4B 62 FC | 	wrlong	_var14, _var15
0596c     EF 0E 86 F1 | 	sub	objptr, #239
05970     8C 00 90 FD | 	jmp	#LR__0241
05974                 | LR__0239
05974                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
05974     18 4D 02 F6 | 	mov	_var15, _var01
05978     87 0F 06 F1 | 	add	objptr, #391
0597c     07 4D 02 F1 | 	add	_var15, objptr
05980     26 4F C2 FA | 	rdbyte	_var16, _var15
05984     03 4E 66 F0 | 	shl	_var16, #3
05988     27 3D 02 FD | 	qmul	_var07, _var16
0598c     18 4A 62 FD | 	getqx	_var14
05990     00 4B 86 F1 | 	sub	_var14, #256
05994     07 4A C6 F0 | 	sar	_var14, #7
05998     18 51 02 F6 | 	mov	_var17, _var01
0599c     02 50 66 F0 | 	shl	_var17, #2
059a0     98 0E 86 F1 | 	sub	objptr, #152
059a4     07 51 02 F1 | 	add	_var17, objptr
059a8     28 4B 62 FC | 	wrlong	_var14, _var17
059ac     EF 0E 86 F1 | 	sub	objptr, #239
059b0     4C 00 90 FD | 	jmp	#LR__0241
059b4                 | LR__0240
059b4                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
059b4     18 4D 02 F6 | 	mov	_var15, _var01
059b8     87 0F 06 F1 | 	add	objptr, #391
059bc     07 53 02 F6 | 	mov	_var18, objptr
059c0     07 4D 02 F1 | 	add	_var15, objptr
059c4     26 4F C2 FA | 	rdbyte	_var16, _var15
059c8     20 4E 06 F5 | 	and	_var16, #32
059cc     04 4E 66 F0 | 	shl	_var16, #4
059d0     27 3D 02 FD | 	qmul	_var07, _var16
059d4     18 54 62 FD | 	getqx	_var19
059d8     2A 4B 02 F6 | 	mov	_var14, _var19
059dc     00 4B 86 F1 | 	sub	_var14, #256
059e0     07 4A C6 F0 | 	sar	_var14, #7
059e4     18 51 02 F6 | 	mov	_var17, _var01
059e8     02 50 66 F0 | 	shl	_var17, #2
059ec     98 0E 86 F1 | 	sub	objptr, #152
059f0     07 57 02 F6 | 	mov	_var20, objptr
059f4     07 51 02 F1 | 	add	_var17, objptr
059f8     28 4B 62 FC | 	wrlong	_var14, _var17
059fc     EF 0E 86 F1 | 	sub	objptr, #239
05a00                 | LR__0241
05a00     87 0F 06 F1 | 	add	objptr, #391
05a04     07 31 02 F1 | 	add	_var01, objptr
05a08     18 59 C2 FA | 	rdbyte	_var21, _var01
05a0c     20 59 02 F1 | 	add	_var21, _var09
05a10     3F 58 06 F5 | 	and	_var21, #63
05a14                 | ' 
05a14                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05a14     18 59 42 FC | 	wrbyte	_var21, _var01
05a18     87 0F 86 F1 | 	sub	objptr, #391
05a1c                 | _trackerplayer_spin2_doVibrato_ret
05a1c     2D 00 64 FD | 	ret
05a20                 | 
05a20                 | ' 
05a20                 | ' 
05a20                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05a20                 | _trackerplayer_spin2_doPortamento
05a20                 | ' 
05a20                 | '   if period == currPeriod[channel]
05a20     2E 31 02 F6 | 	mov	_var01, arg01
05a24     02 30 66 F0 | 	shl	_var01, #2
05a28     DF 0E 06 F1 | 	add	objptr, #223
05a2c     07 33 02 F6 | 	mov	_var02, objptr
05a30     07 31 02 F1 | 	add	_var01, objptr
05a34     18 35 02 FB | 	rdlong	_var03, _var01
05a38     1A 5F 0A F2 | 	cmp	arg02, _var03 wz
05a3c                 | '     return
05a3c     DF 0E 86 F1 | 	sub	objptr, #223
05a40     D4 01 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
05a44                 | ' 
05a44                 | '   if period > 0
05a44     00 5E 5E F2 | 	cmps	arg02, #0 wcz
05a48     1C 00 90 ED |  if_be	jmp	#LR__0242
05a4c     2E 37 02 F6 | 	mov	_var04, arg01
05a50     02 36 66 F0 | 	shl	_var04, #2
05a54     97 0F 06 F1 | 	add	objptr, #407
05a58     07 37 02 F1 | 	add	_var04, objptr
05a5c                 | '     portamentoPeriodMemory[channel] := period
05a5c     1B 5F 62 FC | 	wrlong	arg02, _var04
05a60                 | '   else
05a60     97 0F 86 F1 | 	sub	objptr, #407
05a64     18 00 90 FD | 	jmp	#LR__0243
05a68                 | LR__0242
05a68     2E 39 02 F6 | 	mov	_var05, arg01
05a6c     02 38 66 F0 | 	shl	_var05, #2
05a70     97 0F 06 F1 | 	add	objptr, #407
05a74     07 39 02 F1 | 	add	_var05, objptr
05a78                 | '     period := portamentoPeriodMemory[channel]
05a78     1C 5F 02 FB | 	rdlong	arg02, _var05
05a7c     97 0F 86 F1 | 	sub	objptr, #407
05a80                 | LR__0243
05a80                 | ' 
05a80                 | '   if period > currPeriod[channel]
05a80     2E 31 02 F6 | 	mov	_var01, arg01
05a84     02 30 66 F0 | 	shl	_var01, #2
05a88     DF 0E 06 F1 | 	add	objptr, #223
05a8c     07 31 02 F1 | 	add	_var01, objptr
05a90     18 35 02 FB | 	rdlong	_var03, _var01
05a94     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a98     DF 0E 86 F1 | 	sub	objptr, #223
05a9c     50 00 90 ED |  if_be	jmp	#LR__0244
05aa0     2E 3B 02 F6 | 	mov	_var06, arg01
05aa4     02 3A 66 F0 | 	shl	_var06, #2
05aa8     DF 0E 06 F1 | 	add	objptr, #223
05aac     07 3B 02 F1 | 	add	_var06, objptr
05ab0     2E 3D 02 F6 | 	mov	_var07, arg01
05ab4     E9 0E 06 F1 | 	add	objptr, #233
05ab8     1D 3F 02 FB | 	rdlong	_var08, _var06
05abc     07 3D 02 F1 | 	add	_var07, objptr
05ac0     1E 33 C2 FA | 	rdbyte	_var02, _var07
05ac4     19 3F 02 F1 | 	add	_var08, _var02
05ac8                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05ac8     1D 3F 62 FC | 	wrlong	_var08, _var06
05acc     2E 41 02 F6 | 	mov	_var09, arg01
05ad0     02 40 66 F0 | 	shl	_var09, #2
05ad4     E9 0E 86 F1 | 	sub	objptr, #233
05ad8     07 41 02 F1 | 	add	_var09, objptr
05adc     20 43 02 FB | 	rdlong	_var10, _var09
05ae0     2F 43 62 F3 | 	fles	_var10, arg02
05ae4                 | '     currPeriod[channel] <#= period
05ae4     20 43 62 FC | 	wrlong	_var10, _var09
05ae8     DF 0E 86 F1 | 	sub	objptr, #223
05aec     6C 00 90 FD | 	jmp	#LR__0246
05af0                 | LR__0244
05af0                 | ' 
05af0                 | '   elseif period < currPeriod[channel]
05af0     2E 31 02 F6 | 	mov	_var01, arg01
05af4     02 30 66 F0 | 	shl	_var01, #2
05af8     DF 0E 06 F1 | 	add	objptr, #223
05afc     07 31 02 F1 | 	add	_var01, objptr
05b00     18 35 02 FB | 	rdlong	_var03, _var01
05b04     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05b08     DF 0E 86 F1 | 	sub	objptr, #223
05b0c     4C 00 90 3D |  if_ae	jmp	#LR__0245
05b10     2E 45 02 F6 | 	mov	_var11, arg01
05b14     02 44 66 F0 | 	shl	_var11, #2
05b18     DF 0E 06 F1 | 	add	objptr, #223
05b1c     07 45 02 F1 | 	add	_var11, objptr
05b20     2E 47 02 F6 | 	mov	_var12, arg01
05b24     E9 0E 06 F1 | 	add	objptr, #233
05b28     22 49 02 FB | 	rdlong	_var13, _var11
05b2c     07 47 02 F1 | 	add	_var12, objptr
05b30     23 33 C2 FA | 	rdbyte	_var02, _var12
05b34     19 49 82 F1 | 	sub	_var13, _var02
05b38                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05b38     22 49 62 FC | 	wrlong	_var13, _var11
05b3c     2E 4B 02 F6 | 	mov	_var14, arg01
05b40     02 4A 66 F0 | 	shl	_var14, #2
05b44     E9 0E 86 F1 | 	sub	objptr, #233
05b48     07 4B 02 F1 | 	add	_var14, objptr
05b4c     25 4D 02 FB | 	rdlong	_var15, _var14
05b50     2F 4D 42 F3 | 	fges	_var15, arg02
05b54                 | '     currPeriod[channel] #>= period
05b54     25 4D 62 FC | 	wrlong	_var15, _var14
05b58     DF 0E 86 F1 | 	sub	objptr, #223
05b5c                 | LR__0245
05b5c                 | LR__0246
05b5c                 | ' 
05b5c                 | '   ' Handle glissando if activated
05b5c                 | '   if portaGlissando[channel] > 0
05b5c     2E 31 02 F6 | 	mov	_var01, arg01
05b60     BC 0F 06 F1 | 	add	objptr, #444
05b64     07 31 02 F1 | 	add	_var01, objptr
05b68     18 35 C2 FA | 	rdbyte	_var03, _var01
05b6c     00 34 5E F2 | 	cmps	_var03, #0 wcz
05b70     BC 0F 86 F1 | 	sub	objptr, #444
05b74     A0 00 90 ED |  if_be	jmp	#LR__0249
05b78     2E 4F 02 F6 | 	mov	_var16, arg01
05b7c     02 4E 66 F0 | 	shl	_var16, #2
05b80     DF 0E 06 F1 | 	add	objptr, #223
05b84     07 4F 02 F1 | 	add	_var16, objptr
05b88                 | ' 
05b88                 | '     tempPeriod := currPeriod[channel]
05b88     27 51 02 FB | 	rdlong	_var17, _var16
05b8c                 | ' 
05b8c                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05b8c     00 52 06 F6 | 	mov	_var18, #0
05b90     DF 0E 86 F1 | 	sub	objptr, #223
05b94     CC A4 9F FE | 	loc	pa,	#(@LR__0248-@LR__0247)
05b98     93 00 A0 FD | 	call	#FCACHE_LOAD_
05b9c                 | LR__0247
05b9c     06 00 00 FF 
05ba0     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05ba4     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05ba8     2E 55 02 F6 | 	mov	_var19, arg01
05bac     D3 0E 06 F1 | 	add	objptr, #211
05bb0     07 55 02 F1 | 	add	_var19, objptr
05bb4     2A 33 C2 FA | 	rdbyte	_var02, _var19
05bb8     19 57 02 F6 | 	mov	_var20, _var02
05bbc     03 56 66 F0 | 	shl	_var20, #3
05bc0     19 57 02 F1 | 	add	_var20, _var02
05bc4     03 56 66 F0 | 	shl	_var20, #3
05bc8     2B 35 02 F1 | 	add	_var03, _var20
05bcc     29 59 02 F6 | 	mov	_var21, _var18
05bd0     01 58 66 F0 | 	shl	_var21, #1
05bd4     1A 59 02 F1 | 	add	_var21, _var03
05bd8                 | ' 
05bd8                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05bd8     2C 5B E2 FA | 	rdword	_var22, _var21
05bdc                 | '       if tempPeriod >= periodStep
05bdc     2D 51 5A F2 | 	cmps	_var17, _var22 wcz
05be0                 | '         i += 1000
05be0     06 00 00 FF 
05be4     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05be8     D3 0E 86 F1 | 	sub	objptr, #211
05bec     01 00 00 3F 
05bf0     E8 53 06 31 |  if_ae	add	_var18, ##1000
05bf4     01 52 06 F1 | 	add	_var18, #1
05bf8     24 52 5E F2 | 	cmps	_var18, #36 wcz
05bfc     9C FF 9F CD |  if_b	jmp	#LR__0247
05c00                 | LR__0248
05c00     28 5B 82 F1 | 	sub	_var22, _var17
05c04     02 5C 66 F0 | 	shl	arg01, #2
05c08     EF 0E 06 F1 | 	add	objptr, #239
05c0c     07 5D 02 F1 | 	add	arg01, objptr
05c10                 | ' 
05c10                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05c10     2E 5B 62 FC | 	wrlong	_var22, arg01
05c14     EF 0E 86 F1 | 	sub	objptr, #239
05c18                 | LR__0249
05c18                 | _trackerplayer_spin2_doPortamento_ret
05c18     2D 00 64 FD | 	ret
05c1c                 | 
05c1c                 | ' 
05c1c                 | ' 
05c1c                 | ' PRI doVolumeSlide(channel)
05c1c                 | _trackerplayer_spin2_doVolumeSlide
05c1c                 | ' 
05c1c                 | '   if x > 0
05c1c     B7 0F 06 F1 | 	add	objptr, #439
05c20     07 31 C2 FA | 	rdbyte	_var01, objptr
05c24     B7 0F 86 F1 | 	sub	objptr, #439
05c28     00 30 5E F2 | 	cmps	_var01, #0 wcz
05c2c     28 00 90 ED |  if_be	jmp	#LR__0250
05c30     2E 33 02 F6 | 	mov	_var02, arg01
05c34     02 32 66 F0 | 	shl	_var02, #2
05c38     FF 0E 06 F1 | 	add	objptr, #255
05c3c     07 33 02 F1 | 	add	_var02, objptr
05c40     19 35 02 FB | 	rdlong	_var03, _var02
05c44     B8 0E 06 F1 | 	add	objptr, #184
05c48     07 37 C2 FA | 	rdbyte	_var04, objptr
05c4c     B7 0F 86 F1 | 	sub	objptr, #439
05c50     1B 35 02 F1 | 	add	_var03, _var04
05c54                 | '     currVolume[channel] += x
05c54     19 35 62 FC | 	wrlong	_var03, _var02
05c58                 | LR__0250
05c58                 | '   if y > 0
05c58     B8 0F 06 F1 | 	add	objptr, #440
05c5c     07 31 C2 FA | 	rdbyte	_var01, objptr
05c60     B8 0F 86 F1 | 	sub	objptr, #440
05c64     00 30 5E F2 | 	cmps	_var01, #0 wcz
05c68     24 00 90 ED |  if_be	jmp	#LR__0251
05c6c     02 5C 66 F0 | 	shl	arg01, #2
05c70     FF 0E 06 F1 | 	add	objptr, #255
05c74     07 5D 02 F1 | 	add	arg01, objptr
05c78     2E 39 02 FB | 	rdlong	_var05, arg01
05c7c     B9 0E 06 F1 | 	add	objptr, #185
05c80     07 37 C2 FA | 	rdbyte	_var04, objptr
05c84     B8 0F 86 F1 | 	sub	objptr, #440
05c88     1B 39 82 F1 | 	sub	_var05, _var04
05c8c                 | '     currVolume[channel] -= y
05c8c     2E 39 62 FC | 	wrlong	_var05, arg01
05c90                 | LR__0251
05c90                 | _trackerplayer_spin2_doVolumeSlide_ret
05c90     2D 00 64 FD | 	ret
05c94                 | hubexit
05c94     81 00 80 FD | 	jmp	#cogexit
05c98                 | 
05c98                 | __system___setbaud
05c98     14 0A 07 FB | 	rdlong	muldiva_, #20
05c9c     2E 0D 03 F6 | 	mov	muldivb_, arg01
05ca0     D0 00 A0 FD | 	call	#divide_
05ca4     40 7C 64 FD | 	dirl	#62
05ca8     40 7E 64 FD | 	dirl	#63
05cac     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
05cb0     10 0C 67 F0 | 	shl	muldivb_, #16
05cb4     07 5E 06 F6 | 	mov	arg02, #7
05cb8     86 5F 02 F1 | 	add	arg02, muldivb_
05cbc     3E F8 0C FC | 	wrpin	#124, #62
05cc0     3E 5E 16 FC | 	wxpin	arg02, #62
05cc4     3F 7C 0C FC | 	wrpin	#62, #63
05cc8     14 5E 06 F1 | 	add	arg02, #20
05ccc     3F 5E 16 FC | 	wxpin	arg02, #63
05cd0     41 7C 64 FD | 	dirh	#62
05cd4     41 7E 64 FD | 	dirh	#63
05cd8                 | __system___setbaud_ret
05cd8     2D 00 64 FD | 	ret
05cdc                 | 
05cdc                 | __system___txraw
05cdc     02 5A 05 F6 | 	mov	COUNT_, #2
05ce0     B0 00 A0 FD | 	call	#pushregs_
05ce4     2E 6B 02 F6 | 	mov	local01, arg01
05ce8     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05cec     0C 00 90 5D |  if_ne	jmp	#LR__0252
05cf0     42 0F 00 FF 
05cf4     80 5C 06 F6 | 	mov	arg01, ##2000000
05cf8     9C FF BF FD | 	call	#__system___setbaud
05cfc                 | LR__0252
05cfc     3E 6A 26 FC | 	wypin	local01, #62
05d00     1F 02 64 FD | 	waitx	#1
05d04     00 A3 9F FE | 	loc	pa,	#(@LR__0254-@LR__0253)
05d08     93 00 A0 FD | 	call	#FCACHE_LOAD_
05d0c                 | LR__0253
05d0c     40 7C 74 FD | 	testp	#62 wc
05d10     F8 FF 9F 3D |  if_nc	jmp	#LR__0253
05d14                 | LR__0254
05d14     01 2A 06 F6 | 	mov	result1, #1
05d18     AF F0 03 F6 | 	mov	ptra, fp
05d1c     BF 00 A0 FD | 	call	#popregs_
05d20                 | __system___txraw_ret
05d20     2D 00 64 FD | 	ret
05d24                 | 
05d24                 | __system___rxraw
05d24     0D 5A 05 F6 | 	mov	COUNT_, #13
05d28     B0 00 A0 FD | 	call	#pushregs_
05d2c     2E 6B 02 F6 | 	mov	local01, arg01
05d30     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05d34     0C 00 90 5D |  if_ne	jmp	#LR__0255
05d38     42 0F 00 FF 
05d3c     80 5C 06 F6 | 	mov	arg01, ##2000000
05d40     54 FF BF FD | 	call	#__system___setbaud
05d44                 | LR__0255
05d44     00 6A 0E F2 | 	cmp	local01, #0 wz
05d48     18 00 90 AD |  if_e	jmp	#LR__0256
05d4c     14 6E 06 FB | 	rdlong	local03, #20
05d50     0A 6E 46 F0 | 	shr	local03, #10
05d54     37 6B 02 FD | 	qmul	local01, local03
05d58     18 70 62 FD | 	getqx	local04
05d5c     1A 72 62 FD | 	getct	local05
05d60     38 73 02 F1 | 	add	local05, local04
05d64                 | LR__0256
05d64     01 74 66 F6 | 	neg	local06, #1
05d68     00 76 06 F6 | 	mov	local07, #0
05d6c     04 14 06 F1 | 	add	ptr___system__dat__, #4
05d70     0A 79 02 FB | 	rdlong	local08, ptr___system__dat__
05d74     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05d78                 | LR__0257
05d78     08 78 16 F4 | 	testb	local08, #8 wc
05d7c     09 78 76 F4 | 	testbn	local08, #9 andc
05d80     0A 78 46 F0 | 	shr	local08, #10
05d84     01 76 06 C6 |  if_b	mov	local07, #1
05d88     10 00 90 CD |  if_b	jmp	#LR__0258
05d8c     40 7E 6C FD | 	testp	#63 wz
05d90     01 76 06 A6 |  if_e	mov	local07, #1
05d94     3F 78 8E AA |  if_e	rdpin	local08, #63
05d98     04 78 46 A0 |  if_e	shr	local08, #4
05d9c                 | LR__0258
05d9c     00 6C 06 F6 | 	mov	local02, #0
05da0     00 76 0E F2 | 	cmp	local07, #0 wz
05da4     01 6C 66 56 |  if_ne	neg	local02, #1
05da8     00 7A 06 F6 | 	mov	local09, #0
05dac     00 7C 06 F6 | 	mov	local10, #0
05db0     00 6A 0E F2 | 	cmp	local01, #0 wz
05db4     01 7C 66 56 |  if_ne	neg	local10, #1
05db8     00 7E 06 F6 | 	mov	local11, #0
05dbc     00 80 06 F6 | 	mov	local12, #0
05dc0     1A 82 62 FD | 	getct	local13
05dc4     39 83 82 F1 | 	sub	local13, local05
05dc8     00 82 5E F2 | 	cmps	local13, #0 wcz
05dcc     01 80 66 C6 |  if_b	neg	local12, #1
05dd0     00 80 0E F2 | 	cmp	local12, #0 wz
05dd4     01 7E 66 56 |  if_ne	neg	local11, #1
05dd8     3F 7D CA F7 | 	test	local10, local11 wz
05ddc     01 7A 66 56 |  if_ne	neg	local09, #1
05de0     3D 6D 4A F5 | 	or	local02, local09 wz
05de4     90 FF 9F AD |  if_e	jmp	#LR__0257
05de8     00 76 0E F2 | 	cmp	local07, #0 wz
05dec     3C 75 02 56 |  if_ne	mov	local06, local08
05df0     FF 74 06 55 |  if_ne	and	local06, #255
05df4     04 14 06 F1 | 	add	ptr___system__dat__, #4
05df8     0A 79 62 FC | 	wrlong	local08, ptr___system__dat__
05dfc     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05e00     3A 2B 02 F6 | 	mov	result1, local06
05e04     AF F0 03 F6 | 	mov	ptra, fp
05e08     BF 00 A0 FD | 	call	#popregs_
05e0c                 | __system___rxraw_ret
05e0c     2D 00 64 FD | 	ret
05e10                 | 
05e10                 | __system____builtin_memmove
05e10     2E 31 02 F6 | 	mov	_var01, arg01
05e14     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05e18     50 00 90 3D |  if_ae	jmp	#LR__0266
05e1c     00 A2 9F FE | 	loc	pa,	#(@LR__0260-@LR__0259)
05e20     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e24                 | LR__0259
05e24     03 60 5E F2 | 	cmps	arg03, #3 wcz
05e28     18 00 90 ED |  if_be	jmp	#LR__0261
05e2c     2F 33 02 FB | 	rdlong	_var02, arg02
05e30     2E 33 62 FC | 	wrlong	_var02, arg01
05e34     04 5C 06 F1 | 	add	arg01, #4
05e38     04 5E 06 F1 | 	add	arg02, #4
05e3c     04 60 86 F1 | 	sub	arg03, #4
05e40     E0 FF 9F FD | 	jmp	#LR__0259
05e44                 | LR__0260
05e44                 | LR__0261
05e44     30 35 0A F6 | 	mov	_var03, arg03 wz
05e48     4C 00 90 AD |  if_e	jmp	#LR__0272
05e4c     C4 A1 9F FE | 	loc	pa,	#(@LR__0264-@LR__0262)
05e50     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e54                 | LR__0262
05e54     1A 09 D8 FC | 	rep	@LR__0265, _var03
05e58                 | LR__0263
05e58     2F 33 C2 FA | 	rdbyte	_var02, arg02
05e5c     2E 33 42 FC | 	wrbyte	_var02, arg01
05e60     01 5C 06 F1 | 	add	arg01, #1
05e64     01 5E 06 F1 | 	add	arg02, #1
05e68                 | LR__0264
05e68                 | LR__0265
05e68     2C 00 90 FD | 	jmp	#LR__0272
05e6c                 | LR__0266
05e6c     30 5D 02 F1 | 	add	arg01, arg03
05e70     30 5F 02 F1 | 	add	arg02, arg03
05e74     30 37 0A F6 | 	mov	_var04, arg03 wz
05e78     1C 00 90 AD |  if_e	jmp	#LR__0271
05e7c     94 A1 9F FE | 	loc	pa,	#(@LR__0269-@LR__0267)
05e80     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e84                 | LR__0267
05e84     1B 09 D8 FC | 	rep	@LR__0270, _var04
05e88                 | LR__0268
05e88     01 5C 86 F1 | 	sub	arg01, #1
05e8c     01 5E 86 F1 | 	sub	arg02, #1
05e90     2F 33 C2 FA | 	rdbyte	_var02, arg02
05e94     2E 33 42 FC | 	wrbyte	_var02, arg01
05e98                 | LR__0269
05e98                 | LR__0270
05e98                 | LR__0271
05e98                 | LR__0272
05e98     18 2B 02 F6 | 	mov	result1, _var01
05e9c                 | __system____builtin_memmove_ret
05e9c     2D 00 64 FD | 	ret
05ea0                 | 
05ea0                 | __system__longmove
05ea0     2E 31 02 F6 | 	mov	_var01, arg01
05ea4     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05ea8     28 00 90 3D |  if_ae	jmp	#LR__0277
05eac     30 33 0A F6 | 	mov	_var02, arg03 wz
05eb0     54 00 90 AD |  if_e	jmp	#LR__0283
05eb4     5C A1 9F FE | 	loc	pa,	#(@LR__0275-@LR__0273)
05eb8     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ebc                 | LR__0273
05ebc     19 09 D8 FC | 	rep	@LR__0276, _var02
05ec0                 | LR__0274
05ec0     2F 35 02 FB | 	rdlong	_var03, arg02
05ec4     2E 35 62 FC | 	wrlong	_var03, arg01
05ec8     04 5C 06 F1 | 	add	arg01, #4
05ecc     04 5E 06 F1 | 	add	arg02, #4
05ed0                 | LR__0275
05ed0                 | LR__0276
05ed0     34 00 90 FD | 	jmp	#LR__0283
05ed4                 | LR__0277
05ed4     30 37 02 F6 | 	mov	_var04, arg03
05ed8     02 36 66 F0 | 	shl	_var04, #2
05edc     1B 5D 02 F1 | 	add	arg01, _var04
05ee0     1B 5F 02 F1 | 	add	arg02, _var04
05ee4     30 39 0A F6 | 	mov	_var05, arg03 wz
05ee8     1C 00 90 AD |  if_e	jmp	#LR__0282
05eec     24 A1 9F FE | 	loc	pa,	#(@LR__0280-@LR__0278)
05ef0     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ef4                 | LR__0278
05ef4     1C 09 D8 FC | 	rep	@LR__0281, _var05
05ef8                 | LR__0279
05ef8     04 5C 86 F1 | 	sub	arg01, #4
05efc     04 5E 86 F1 | 	sub	arg02, #4
05f00     2F 35 02 FB | 	rdlong	_var03, arg02
05f04     2E 35 62 FC | 	wrlong	_var03, arg01
05f08                 | LR__0280
05f08                 | LR__0281
05f08                 | LR__0282
05f08                 | LR__0283
05f08     18 2B 02 F6 | 	mov	result1, _var01
05f0c                 | __system__longmove_ret
05f0c     2D 00 64 FD | 	ret
05f10                 | 
05f10                 | __system____topofstack
05f10     00 5A 05 F6 | 	mov	COUNT_, #0
05f14     B0 00 A0 FD | 	call	#pushregs_
05f18     0C F0 07 F1 | 	add	ptra, #12
05f1c     04 5E 05 F1 | 	add	fp, #4
05f20     AF 5C 62 FC | 	wrlong	arg01, fp
05f24     AF 2A 02 F6 | 	mov	result1, fp
05f28     04 5E 85 F1 | 	sub	fp, #4
05f2c     AF F0 03 F6 | 	mov	ptra, fp
05f30     BF 00 A0 FD | 	call	#popregs_
05f34                 | __system____topofstack_ret
05f34     2D 00 64 FD | 	ret
05f38                 | 
05f38                 | __system___make_methodptr
05f38     04 5A 05 F6 | 	mov	COUNT_, #4
05f3c     B0 00 A0 FD | 	call	#pushregs_
05f40     2E 6B 02 F6 | 	mov	local01, arg01
05f44     2F 6D 02 F6 | 	mov	local02, arg02
05f48     08 5C 06 F6 | 	mov	arg01, #8
05f4c     5C 0C B0 FD | 	call	#__system___gc_alloc_managed
05f50     15 6F 0A F6 | 	mov	local03, result1 wz
05f54     10 00 90 AD |  if_e	jmp	#LR__0284
05f58     37 6B 62 FC | 	wrlong	local01, local03
05f5c     37 71 02 F6 | 	mov	local04, local03
05f60     04 70 06 F1 | 	add	local04, #4
05f64     38 6D 62 FC | 	wrlong	local02, local04
05f68                 | LR__0284
05f68     37 2B 02 F6 | 	mov	result1, local03
05f6c     AF F0 03 F6 | 	mov	ptra, fp
05f70     BF 00 A0 FD | 	call	#popregs_
05f74                 | __system___make_methodptr_ret
05f74     2D 00 64 FD | 	ret
05f78                 | 
05f78                 | __system___lockmem
05f78     02 5A 05 F6 | 	mov	COUNT_, #2
05f7c     B0 00 A0 FD | 	call	#pushregs_
05f80     01 2A 62 FD | 	cogid	result1
05f84     15 6B 02 F6 | 	mov	local01, result1
05f88     00 6B 06 F1 | 	add	local01, #256
05f8c                 | LR__0285
05f8c     2E 6D 0A FB | 	rdlong	local02, arg01 wz
05f90     2E 6B 62 AC |  if_e	wrlong	local01, arg01
05f94     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f98     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05f9c     35 6D 0A F2 | 	cmp	local02, local01 wz
05fa0     E8 FF 9F 5D |  if_ne	jmp	#LR__0285
05fa4     AF F0 03 F6 | 	mov	ptra, fp
05fa8     BF 00 A0 FD | 	call	#popregs_
05fac                 | __system___lockmem_ret
05fac     2D 00 64 FD | 	ret
05fb0                 | 
05fb0                 | __system___string_concat
05fb0     07 5A 05 F6 | 	mov	COUNT_, #7
05fb4     B0 00 A0 FD | 	call	#pushregs_
05fb8     2E 6B 02 F6 | 	mov	local01, arg01
05fbc     2F 6D 02 F6 | 	mov	local02, arg02
05fc0     35 5D 02 F6 | 	mov	arg01, local01
05fc4     00 6E 06 F6 | 	mov	local03, #0
05fc8     44 A0 9F FE | 	loc	pa,	#(@LR__0287-@LR__0286)
05fcc     93 00 A0 FD | 	call	#FCACHE_LOAD_
05fd0                 | LR__0286
05fd0     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05fd4     01 6E 06 51 |  if_ne	add	local03, #1
05fd8     01 5C 06 51 |  if_ne	add	arg01, #1
05fdc     F0 FF 9F 5D |  if_ne	jmp	#LR__0286
05fe0                 | LR__0287
05fe0     37 73 02 F6 | 	mov	local05, local03
05fe4     36 5D 02 F6 | 	mov	arg01, local02
05fe8     00 6E 06 F6 | 	mov	local03, #0
05fec     20 A0 9F FE | 	loc	pa,	#(@LR__0289-@LR__0288)
05ff0     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ff4                 | LR__0288
05ff4     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05ff8     01 6E 06 51 |  if_ne	add	local03, #1
05ffc     01 5C 06 51 |  if_ne	add	arg01, #1
06000     F0 FF 9F 5D |  if_ne	jmp	#LR__0288
06004                 | LR__0289
06004     37 2B 02 F6 | 	mov	result1, local03
06008     15 75 02 F6 | 	mov	local06, result1
0600c     39 5D 02 F6 | 	mov	arg01, local05
06010     3A 5D 02 F1 | 	add	arg01, local06
06014     01 5C 06 F1 | 	add	arg01, #1
06018     90 0B B0 FD | 	call	#__system___gc_alloc_managed
0601c     15 77 0A F6 | 	mov	local07, result1 wz
06020     28 00 90 AD |  if_e	jmp	#LR__0290
06024     3B 5D 02 F6 | 	mov	arg01, local07
06028     35 5F 02 F6 | 	mov	arg02, local01
0602c     39 61 02 F6 | 	mov	arg03, local05
06030     DC FD BF FD | 	call	#__system____builtin_memmove
06034     3B 5D 02 F6 | 	mov	arg01, local07
06038     39 5D 02 F1 | 	add	arg01, local05
0603c     01 74 06 F1 | 	add	local06, #1
06040     36 5F 02 F6 | 	mov	arg02, local02
06044     3A 61 02 F6 | 	mov	arg03, local06
06048     C4 FD BF FD | 	call	#__system____builtin_memmove
0604c                 | LR__0290
0604c     3B 2B 02 F6 | 	mov	result1, local07
06050     AF F0 03 F6 | 	mov	ptra, fp
06054     BF 00 A0 FD | 	call	#popregs_
06058                 | __system___string_concat_ret
06058     2D 00 64 FD | 	ret
0605c                 | 
0605c                 | __system___tx
0605c     02 5A 05 F6 | 	mov	COUNT_, #2
06060     B0 00 A0 FD | 	call	#pushregs_
06064     2E 6B 02 F6 | 	mov	local01, arg01
06068     0A 6A 0E F2 | 	cmp	local01, #10 wz
0606c     20 00 90 5D |  if_ne	jmp	#LR__0291
06070     08 14 06 F1 | 	add	ptr___system__dat__, #8
06074     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
06078     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0607c     02 6C CE F7 | 	test	local02, #2 wz
06080     0C 00 90 AD |  if_e	jmp	#LR__0291
06084     0D 6C 06 F6 | 	mov	local02, #13
06088     0D 5C 06 F6 | 	mov	arg01, #13
0608c     4C FC BF FD | 	call	#__system___txraw
06090                 | LR__0291
06090     35 5D 02 F6 | 	mov	arg01, local01
06094     44 FC BF FD | 	call	#__system___txraw
06098     AF F0 03 F6 | 	mov	ptra, fp
0609c     BF 00 A0 FD | 	call	#popregs_
060a0                 | __system___tx_ret
060a0     2D 00 64 FD | 	ret
060a4                 | 
060a4                 | __system___rx
060a4     02 5A 05 F6 | 	mov	COUNT_, #2
060a8     B0 00 A0 FD | 	call	#pushregs_
060ac                 | LR__0292
060ac     00 5C 06 F6 | 	mov	arg01, #0
060b0     70 FC BF FD | 	call	#__system___rxraw
060b4     15 6B 02 F6 | 	mov	local01, result1
060b8     FF FF 7F FF 
060bc     FF 6B 0E F2 | 	cmp	local01, ##-1 wz
060c0     E8 FF 9F AD |  if_e	jmp	#LR__0292
060c4     0D 6A 0E F2 | 	cmp	local01, #13 wz
060c8     14 00 90 5D |  if_ne	jmp	#LR__0293
060cc     08 14 06 F1 | 	add	ptr___system__dat__, #8
060d0     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
060d4     08 14 86 F1 | 	sub	ptr___system__dat__, #8
060d8     02 6C CE F7 | 	test	local02, #2 wz
060dc     0A 6A 06 56 |  if_ne	mov	local01, #10
060e0                 | LR__0293
060e0     08 14 06 F1 | 	add	ptr___system__dat__, #8
060e4     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
060e8     08 14 86 F1 | 	sub	ptr___system__dat__, #8
060ec     01 6C CE F7 | 	test	local02, #1 wz
060f0     1C 00 90 AD |  if_e	jmp	#LR__0296
060f4     7F 6A 0E F2 | 	cmp	local01, #127 wz
060f8     0C 00 90 5D |  if_ne	jmp	#LR__0294
060fc     08 5C 06 F6 | 	mov	arg01, #8
06100     58 FF BF FD | 	call	#__system___tx
06104     08 00 90 FD | 	jmp	#LR__0295
06108                 | LR__0294
06108     35 5D 02 F6 | 	mov	arg01, local01
0610c     4C FF BF FD | 	call	#__system___tx
06110                 | LR__0295
06110                 | LR__0296
06110     35 2B 02 F6 | 	mov	result1, local01
06114     AF F0 03 F6 | 	mov	ptra, fp
06118     BF 00 A0 FD | 	call	#popregs_
0611c                 | __system___rx_ret
0611c     2D 00 64 FD | 	ret
06120                 | 
06120                 | __system___pinread
06120     20 5C CE F7 | 	test	arg01, #32 wz
06124     FF 31 02 56 |  if_ne	mov	_var01, inb
06128     FE 31 02 A6 |  if_e	mov	_var01, ina
0612c     18 2B 02 F6 | 	mov	result1, _var01
06130     2E 2B 42 F0 | 	shr	result1, arg01
06134     06 5C 46 F0 | 	shr	arg01, #6
06138     2E 2B 42 F7 | 	zerox	result1, arg01
0613c                 | __system___pinread_ret
0613c     2D 00 64 FD | 	ret
06140                 | 
06140                 | __system___waitms
06140     03 5A 05 F6 | 	mov	COUNT_, #3
06144     B0 00 A0 FD | 	call	#pushregs_
06148     2E 6B 02 F6 | 	mov	local01, arg01
0614c     14 6C 06 FB | 	rdlong	local02, #20
06150     C4 9E 9F FE | 	loc	pa,	#(@LR__0298-@LR__0297)
06154     93 00 A0 FD | 	call	#FCACHE_LOAD_
06158                 | LR__0297
06158     01 00 00 FF 
0615c     E8 6B 5E F2 | 	cmps	local01, ##1000 wcz
06160     1F 6C 62 1D |  if_a	waitx	local02
06164     01 00 00 1F 
06168     E8 6B 86 11 |  if_a	sub	local01, ##1000
0616c     E8 FF 9F 1D |  if_a	jmp	#LR__0297
06170                 | LR__0298
06170     0C 14 06 F1 | 	add	ptr___system__dat__, #12
06174     0A 6F 0A FB | 	rdlong	local03, ptr___system__dat__ wz
06178     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
0617c     20 00 90 5D |  if_ne	jmp	#LR__0299
06180     36 0B 03 F6 | 	mov	muldiva_, local02
06184     01 00 00 FF 
06188     E8 0D 07 F6 | 	mov	muldivb_, ##1000
0618c     CC 00 A0 FD | 	call	#unsdivide_
06190     86 6F 02 F6 | 	mov	local03, muldivb_
06194     0C 14 06 F1 | 	add	ptr___system__dat__, #12
06198     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
0619c     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
061a0                 | LR__0299
061a0     00 6A 5E F2 | 	cmps	local01, #0 wcz
061a4     37 6B 02 1D |  if_a	qmul	local01, local03
061a8     18 5C 62 1D |  if_a	getqx	arg01
061ac     1F 5C 62 1D |  if_a	waitx	arg01
061b0     AF F0 03 F6 | 	mov	ptra, fp
061b4     BF 00 A0 FD | 	call	#popregs_
061b8                 | __system___waitms_ret
061b8     2D 00 64 FD | 	ret
061bc                 | 
061bc                 | __system___waitus
061bc     02 5A 05 F6 | 	mov	COUNT_, #2
061c0     B0 00 A0 FD | 	call	#pushregs_
061c4     2E 6B 02 F6 | 	mov	local01, arg01
061c8     10 14 06 F1 | 	add	ptr___system__dat__, #16
061cc     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
061d0     10 14 86 F1 | 	sub	ptr___system__dat__, #16
061d4     20 00 90 5D |  if_ne	jmp	#LR__0300
061d8     14 0A 07 FB | 	rdlong	muldiva_, #20
061dc     A1 07 00 FF 
061e0     40 0C 07 F6 | 	mov	muldivb_, ##1000000
061e4     CC 00 A0 FD | 	call	#unsdivide_
061e8     86 6D 02 F6 | 	mov	local02, muldivb_
061ec     10 14 06 F1 | 	add	ptr___system__dat__, #16
061f0     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
061f4     10 14 86 F1 | 	sub	ptr___system__dat__, #16
061f8                 | LR__0300
061f8     36 6B 02 FD | 	qmul	local01, local02
061fc     18 5C 62 FD | 	getqx	arg01
06200     1F 5C 62 FD | 	waitx	arg01
06204     AF F0 03 F6 | 	mov	ptra, fp
06208     BF 00 A0 FD | 	call	#popregs_
0620c                 | __system___waitus_ret
0620c     2D 00 64 FD | 	ret
06210                 | 
06210                 | __system___basic_open
06210     05 5A 05 F6 | 	mov	COUNT_, #5
06214     B0 00 A0 FD | 	call	#pushregs_
06218     2F 6B 02 F6 | 	mov	local01, arg02
0621c     30 6D 02 F6 | 	mov	local02, arg03
06220     31 6F 02 F6 | 	mov	local03, arg04
06224     88 11 B0 FD | 	call	#__system____getftab
06228     15 71 0A F6 | 	mov	local04, result1 wz
0622c     18 00 90 5D |  if_ne	jmp	#LR__0301
06230     03 5D 02 F6 | 	mov	arg01, abortchain
06234     0C 5E 06 F6 | 	mov	arg02, #12
06238     01 60 06 F6 | 	mov	arg03, #1
0623c     F0 00 A0 FD | 	call	#__longjmp
06240     01 2A 66 F6 | 	neg	result1, #1
06244     70 00 90 FD | 	jmp	#LR__0305
06248                 | LR__0301
06248     00 6A 0E F2 | 	cmp	local01, #0 wz
0624c     48 00 90 AD |  if_e	jmp	#LR__0303
06250     04 5C 06 F6 | 	mov	arg01, #4
06254     54 09 B0 FD | 	call	#__system___gc_alloc_managed
06258     15 73 0A F6 | 	mov	local05, result1 wz
0625c     18 00 90 5D |  if_ne	jmp	#LR__0302
06260     03 5D 02 F6 | 	mov	arg01, abortchain
06264     07 5E 06 F6 | 	mov	arg02, #7
06268     01 60 06 F6 | 	mov	arg03, #1
0626c     F0 00 A0 FD | 	call	#__longjmp
06270     01 2A 66 F6 | 	neg	result1, #1
06274     40 00 90 FD | 	jmp	#LR__0305
06278                 | LR__0302
06278     39 6B 62 FC | 	wrlong	local01, local05
0627c     08 5F 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
06280     39 5D 02 F6 | 	mov	arg01, local05
06284     B0 FC BF FD | 	call	#__system___make_methodptr
06288     18 70 06 F1 | 	add	local04, #24
0628c     38 2B 62 FC | 	wrlong	result1, local04
06290     18 70 86 F1 | 	sub	local04, #24
06294     0C 00 90 FD | 	jmp	#LR__0304
06298                 | LR__0303
06298     18 70 06 F1 | 	add	local04, #24
0629c     38 6B 62 FC | 	wrlong	local01, local04
062a0     18 70 86 F1 | 	sub	local04, #24
062a4                 | LR__0304
062a4     1C 70 06 F1 | 	add	local04, #28
062a8     38 6D 62 FC | 	wrlong	local02, local04
062ac     04 70 06 F1 | 	add	local04, #4
062b0     38 6F 62 FC | 	wrlong	local03, local04
062b4     00 2A 06 F6 | 	mov	result1, #0
062b8                 | LR__0305
062b8     AF F0 03 F6 | 	mov	ptra, fp
062bc     BF 00 A0 FD | 	call	#popregs_
062c0                 | __system___basic_open_ret
062c0     2D 00 64 FD | 	ret
062c4                 | 
062c4                 | __system___basic_print_char
062c4     05 5A 05 F6 | 	mov	COUNT_, #5
062c8     B0 00 A0 FD | 	call	#pushregs_
062cc     2F 6B 02 F6 | 	mov	local01, arg02
062d0     A0 12 B0 FD | 	call	#__system___gettxfunc
062d4     15 6D 0A F6 | 	mov	local02, result1 wz
062d8     00 2A 06 A6 |  if_e	mov	result1, #0
062dc     24 00 90 AD |  if_e	jmp	#LR__0306
062e0     36 6F 02 FB | 	rdlong	local03, local02
062e4     04 6C 06 F1 | 	add	local02, #4
062e8     36 71 02 FB | 	rdlong	local04, local02
062ec     35 5D 02 F6 | 	mov	arg01, local01
062f0     07 73 02 F6 | 	mov	local05, objptr
062f4     37 0F 02 F6 | 	mov	objptr, local03
062f8     2D 70 62 FD | 	call	local04
062fc     39 0F 02 F6 | 	mov	objptr, local05
06300     01 2A 06 F6 | 	mov	result1, #1
06304                 | LR__0306
06304     AF F0 03 F6 | 	mov	ptra, fp
06308     BF 00 A0 FD | 	call	#popregs_
0630c                 | __system___basic_print_char_ret
0630c     2D 00 64 FD | 	ret
06310                 | 
06310                 | __system___basic_print_string
06310     03 5A 05 F6 | 	mov	COUNT_, #3
06314     B0 00 A0 FD | 	call	#pushregs_
06318     2F 6B 02 F6 | 	mov	local01, arg02
0631c     30 6D 02 F6 | 	mov	local02, arg03
06320     50 12 B0 FD | 	call	#__system___gettxfunc
06324     15 6F 0A F6 | 	mov	local03, result1 wz
06328     00 2A 06 A6 |  if_e	mov	result1, #0
0632c     1C 00 90 AD |  if_e	jmp	#LR__0307
06330     00 6A 0E F2 | 	cmp	local01, #0 wz
06334     00 2A 06 A6 |  if_e	mov	result1, #0
06338     10 00 90 AD |  if_e	jmp	#LR__0307
0633c     37 5D 02 F6 | 	mov	arg01, local03
06340     36 5F 02 F6 | 	mov	arg02, local02
06344     35 61 02 F6 | 	mov	arg03, local01
06348     B0 00 B0 FD | 	call	#__system___fmtstr
0634c                 | LR__0307
0634c     AF F0 03 F6 | 	mov	ptra, fp
06350     BF 00 A0 FD | 	call	#popregs_
06354                 | __system___basic_print_string_ret
06354     2D 00 64 FD | 	ret
06358                 | 
06358                 | __system___basic_print_integer
06358     04 5A 05 F6 | 	mov	COUNT_, #4
0635c     B0 00 A0 FD | 	call	#pushregs_
06360     2F 6B 02 F6 | 	mov	local01, arg02
06364     30 6D 02 F6 | 	mov	local02, arg03
06368     31 6F 02 F6 | 	mov	local03, arg04
0636c     04 12 B0 FD | 	call	#__system___gettxfunc
06370     15 71 0A F6 | 	mov	local04, result1 wz
06374     00 2A 06 A6 |  if_e	mov	result1, #0
06378     14 00 90 AD |  if_e	jmp	#LR__0308
0637c     38 5D 02 F6 | 	mov	arg01, local04
06380     36 5F 02 F6 | 	mov	arg02, local02
06384     35 61 02 F6 | 	mov	arg03, local01
06388     37 63 02 F6 | 	mov	arg04, local03
0638c     60 01 B0 FD | 	call	#__system___fmtnum
06390                 | LR__0308
06390     AF F0 03 F6 | 	mov	ptra, fp
06394     BF 00 A0 FD | 	call	#popregs_
06398                 | __system___basic_print_integer_ret
06398     2D 00 64 FD | 	ret
0639c                 | 
0639c                 | __system___fmtchar
0639c     00 5A 05 F6 | 	mov	COUNT_, #0
063a0     B0 00 A0 FD | 	call	#pushregs_
063a4     18 F0 07 F1 | 	add	ptra, #24
063a8     04 5E 05 F1 | 	add	fp, #4
063ac     AF 5C 62 FC | 	wrlong	arg01, fp
063b0     04 5E 05 F1 | 	add	fp, #4
063b4     AF 5E 62 FC | 	wrlong	arg02, fp
063b8     04 5E 05 F1 | 	add	fp, #4
063bc     AF 60 62 FC | 	wrlong	arg03, fp
063c0     04 5E 05 F1 | 	add	fp, #4
063c4     AF 60 42 FC | 	wrbyte	arg03, fp
063c8     01 5E 05 F1 | 	add	fp, #1
063cc     AF 00 48 FC | 	wrbyte	#0, fp
063d0     01 5E 85 F1 | 	sub	fp, #1
063d4     AF 60 02 F6 | 	mov	arg03, fp
063d8     0C 5E 85 F1 | 	sub	fp, #12
063dc     AF 5C 02 FB | 	rdlong	arg01, fp
063e0     04 5E 05 F1 | 	add	fp, #4
063e4     AF 5E 02 FB | 	rdlong	arg02, fp
063e8     08 5E 85 F1 | 	sub	fp, #8
063ec     0C 00 B0 FD | 	call	#__system___fmtstr
063f0     AF F0 03 F6 | 	mov	ptra, fp
063f4     BF 00 A0 FD | 	call	#popregs_
063f8                 | __system___fmtchar_ret
063f8     2D 00 64 FD | 	ret
063fc                 | 
063fc                 | __system___fmtstr
063fc     0E 5A 05 F6 | 	mov	COUNT_, #14
06400     B0 00 A0 FD | 	call	#pushregs_
06404     2E 6B 02 F6 | 	mov	local01, arg01
06408     2F 6D 02 F6 | 	mov	local02, arg02
0640c     30 6F 02 F6 | 	mov	local03, arg03
06410     36 71 02 F6 | 	mov	local04, local02
06414     FF 70 06 F5 | 	and	local04, #255
06418     37 5D 02 F6 | 	mov	arg01, local03
0641c     00 72 06 F6 | 	mov	local05, #0
06420     EC 9B 9F FE | 	loc	pa,	#(@LR__0310-@LR__0309)
06424     93 00 A0 FD | 	call	#FCACHE_LOAD_
06428                 | LR__0309
06428     2E 75 CA FA | 	rdbyte	local06, arg01 wz
0642c     01 72 06 51 |  if_ne	add	local05, #1
06430     01 5C 06 51 |  if_ne	add	arg01, #1
06434     F0 FF 9F 5D |  if_ne	jmp	#LR__0309
06438                 | LR__0310
06438     39 2B 02 F6 | 	mov	result1, local05
0643c     15 77 02 F6 | 	mov	local07, result1
06440     00 70 0E F2 | 	cmp	local04, #0 wz
06444     04 00 90 AD |  if_e	jmp	#LR__0311
06448     38 77 7A F3 | 	fles	local07, local04 wcz
0644c                 | LR__0311
0644c     35 5D 02 F6 | 	mov	arg01, local01
06450     36 5F 02 F6 | 	mov	arg02, local02
06454     3B 61 02 F6 | 	mov	arg03, local07
06458     02 62 06 F6 | 	mov	arg04, #2
0645c     C8 0F B0 FD | 	call	#__system___fmtpad
06460     15 79 02 F6 | 	mov	local08, result1
06464     00 78 5E F2 | 	cmps	local08, #0 wcz
06468     3C 2B 02 C6 |  if_b	mov	result1, local08
0646c     74 00 90 CD |  if_b	jmp	#LR__0314
06470     00 76 5E F2 | 	cmps	local07, #0 wcz
06474     44 00 90 ED |  if_be	jmp	#LR__0313
06478     3B 7B 02 F6 | 	mov	local09, local07
0647c                 | LR__0312
0647c     35 7D 02 F6 | 	mov	local10, local01
06480     3E 7F 02 FB | 	rdlong	local11, local10
06484     04 7C 06 F1 | 	add	local10, #4
06488     3E 81 02 FB | 	rdlong	local12, local10
0648c     37 5D C2 FA | 	rdbyte	arg01, local03
06490     07 83 02 F6 | 	mov	local13, objptr
06494     3F 0F 02 F6 | 	mov	objptr, local11
06498     01 6E 06 F1 | 	add	local03, #1
0649c     2D 80 62 FD | 	call	local12
064a0     41 0F 02 F6 | 	mov	objptr, local13
064a4     15 85 02 F6 | 	mov	local14, result1
064a8     00 84 5E F2 | 	cmps	local14, #0 wcz
064ac     42 2B 02 C6 |  if_b	mov	result1, local14
064b0     30 00 90 CD |  if_b	jmp	#LR__0314
064b4     42 79 02 F1 | 	add	local08, local14
064b8     F0 7B 6E FB | 	djnz	local09, #LR__0312
064bc                 | LR__0313
064bc     35 5D 02 F6 | 	mov	arg01, local01
064c0     36 5F 02 F6 | 	mov	arg02, local02
064c4     3B 61 02 F6 | 	mov	arg03, local07
064c8     01 62 06 F6 | 	mov	arg04, #1
064cc     58 0F B0 FD | 	call	#__system___fmtpad
064d0     15 85 02 F6 | 	mov	local14, result1
064d4     00 84 5E F2 | 	cmps	local14, #0 wcz
064d8     42 2B 02 C6 |  if_b	mov	result1, local14
064dc     42 79 02 31 |  if_ae	add	local08, local14
064e0     3C 2B 02 36 |  if_ae	mov	result1, local08
064e4                 | LR__0314
064e4     AF F0 03 F6 | 	mov	ptra, fp
064e8     BF 00 A0 FD | 	call	#popregs_
064ec                 | __system___fmtstr_ret
064ec     2D 00 64 FD | 	ret
064f0                 | 
064f0                 | __system___fmtnum
064f0     07 5A 05 F6 | 	mov	COUNT_, #7
064f4     B0 00 A0 FD | 	call	#pushregs_
064f8     78 F0 07 F1 | 	add	ptra, #120
064fc     04 5E 05 F1 | 	add	fp, #4
06500     AF 5C 62 FC | 	wrlong	arg01, fp
06504     04 5E 05 F1 | 	add	fp, #4
06508     AF 5E 62 FC | 	wrlong	arg02, fp
0650c     04 5E 05 F1 | 	add	fp, #4
06510     AF 60 62 FC | 	wrlong	arg03, fp
06514     04 5E 05 F1 | 	add	fp, #4
06518     AF 62 62 FC | 	wrlong	arg04, fp
0651c     04 5E 05 F1 | 	add	fp, #4
06520     AF 6A 02 F6 | 	mov	local01, fp
06524     44 5E 05 F1 | 	add	fp, #68
06528     AF 6A 62 FC | 	wrlong	local01, fp
0652c     04 5E 05 F1 | 	add	fp, #4
06530     AF 00 68 FC | 	wrlong	#0, fp
06534     54 5E 85 F1 | 	sub	fp, #84
06538     AF 6A 02 FB | 	rdlong	local01, fp
0653c     10 6A 46 F0 | 	shr	local01, #16
06540     3F 6A 06 F5 | 	and	local01, #63
06544     58 5E 05 F1 | 	add	fp, #88
06548     AF 6A 62 FC | 	wrlong	local01, fp
0654c     58 5E 85 F1 | 	sub	fp, #88
06550     AF 6A 02 FB | 	rdlong	local01, fp
06554     FF 6A 06 F5 | 	and	local01, #255
06558     5C 5E 05 F1 | 	add	fp, #92
0655c     AF 6A 62 FC | 	wrlong	local01, fp
06560     5C 5E 85 F1 | 	sub	fp, #92
06564     AF 6A 02 FB | 	rdlong	local01, fp
06568     1A 6A 46 F0 | 	shr	local01, #26
0656c     03 6A 06 F5 | 	and	local01, #3
06570     60 5E 05 F1 | 	add	fp, #96
06574     AF 6A 62 FC | 	wrlong	local01, fp
06578     08 5E 85 F1 | 	sub	fp, #8
0657c     AF 6A 02 FB | 	rdlong	local01, fp
06580     60 5E 85 F1 | 	sub	fp, #96
06584     00 6A 5E F2 | 	cmps	local01, #0 wcz
06588     14 00 90 ED |  if_be	jmp	#LR__0315
0658c     60 5E 05 F1 | 	add	fp, #96
06590     AF 6A 02 FB | 	rdlong	local01, fp
06594     01 6A 86 F1 | 	sub	local01, #1
06598     AF 6A 62 FC | 	wrlong	local01, fp
0659c     60 5E 85 F1 | 	sub	fp, #96
065a0                 | LR__0315
065a0     64 5E 05 F1 | 	add	fp, #100
065a4     AF 6C 02 FB | 	rdlong	local02, fp
065a8     64 5E 85 F1 | 	sub	fp, #100
065ac     40 6C 5E F2 | 	cmps	local02, #64 wcz
065b0     14 00 90 1D |  if_a	jmp	#LR__0316
065b4     64 5E 05 F1 | 	add	fp, #100
065b8     AF 6E 02 FB | 	rdlong	local03, fp
065bc     64 5E 85 F1 | 	sub	fp, #100
065c0     37 71 0A F6 | 	mov	local04, local03 wz
065c4     0C 00 90 5D |  if_ne	jmp	#LR__0317
065c8                 | LR__0316
065c8     64 5E 05 F1 | 	add	fp, #100
065cc     AF 80 68 FC | 	wrlong	#64, fp
065d0     64 5E 85 F1 | 	sub	fp, #100
065d4                 | LR__0317
065d4     68 5E 05 F1 | 	add	fp, #104
065d8     AF 6A 02 FB | 	rdlong	local01, fp
065dc     68 5E 85 F1 | 	sub	fp, #104
065e0     03 6A 0E F2 | 	cmp	local01, #3 wz
065e4     10 00 90 5D |  if_ne	jmp	#LR__0318
065e8     68 5E 05 F1 | 	add	fp, #104
065ec     AF 00 68 FC | 	wrlong	#0, fp
065f0     68 5E 85 F1 | 	sub	fp, #104
065f4     30 00 90 FD | 	jmp	#LR__0320
065f8                 | LR__0318
065f8     0C 5E 05 F1 | 	add	fp, #12
065fc     AF 6A 02 FB | 	rdlong	local01, fp
06600     0C 5E 85 F1 | 	sub	fp, #12
06604     00 6A 5E F2 | 	cmps	local01, #0 wcz
06608     1C 00 90 3D |  if_ae	jmp	#LR__0319
0660c     68 5E 05 F1 | 	add	fp, #104
06610     AF 08 68 FC | 	wrlong	#4, fp
06614     5C 5E 85 F1 | 	sub	fp, #92
06618     AF 6A 02 FB | 	rdlong	local01, fp
0661c     35 6B 62 F6 | 	neg	local01, local01
06620     AF 6A 62 FC | 	wrlong	local01, fp
06624     0C 5E 85 F1 | 	sub	fp, #12
06628                 | LR__0319
06628                 | LR__0320
06628     68 5E 05 F1 | 	add	fp, #104
0662c     AF 6A 0A FB | 	rdlong	local01, fp wz
06630     68 5E 85 F1 | 	sub	fp, #104
06634     EC 00 90 AD |  if_e	jmp	#LR__0327
06638     5C 5E 05 F1 | 	add	fp, #92
0663c     AF 70 02 FB | 	rdlong	local04, fp
06640     01 70 06 F1 | 	add	local04, #1
06644     AF 70 62 FC | 	wrlong	local04, fp
06648     04 5E 05 F1 | 	add	fp, #4
0664c     AF 6A 02 FB | 	rdlong	local01, fp
06650     04 5E 05 F1 | 	add	fp, #4
06654     AF 70 02 FB | 	rdlong	local04, fp
06658     64 5E 85 F1 | 	sub	fp, #100
0665c     38 6B 0A F2 | 	cmp	local01, local04 wz
06660     3C 00 90 5D |  if_ne	jmp	#LR__0322
06664     60 5E 05 F1 | 	add	fp, #96
06668     AF 70 02 FB | 	rdlong	local04, fp
0666c     01 70 86 F1 | 	sub	local04, #1
06670     AF 70 62 FC | 	wrlong	local04, fp
06674     AF 6A 0A FB | 	rdlong	local01, fp wz
06678     60 5E 85 F1 | 	sub	fp, #96
0667c     20 00 90 5D |  if_ne	jmp	#LR__0321
06680     04 5E 05 F1 | 	add	fp, #4
06684     AF 5C 02 FB | 	rdlong	arg01, fp
06688     04 5E 05 F1 | 	add	fp, #4
0668c     AF 5E 02 FB | 	rdlong	arg02, fp
06690     08 5E 85 F1 | 	sub	fp, #8
06694     23 60 06 F6 | 	mov	arg03, #35
06698     00 FD BF FD | 	call	#__system___fmtchar
0669c     70 01 90 FD | 	jmp	#LR__0332
066a0                 | LR__0321
066a0                 | LR__0322
066a0     68 5E 05 F1 | 	add	fp, #104
066a4     AF 6A 02 FB | 	rdlong	local01, fp
066a8     68 5E 85 F1 | 	sub	fp, #104
066ac     02 6A 0E F2 | 	cmp	local01, #2 wz
066b0     20 00 90 5D |  if_ne	jmp	#LR__0323
066b4     58 5E 05 F1 | 	add	fp, #88
066b8     AF 6A 02 FB | 	rdlong	local01, fp
066bc     35 71 02 F6 | 	mov	local04, local01
066c0     01 70 06 F1 | 	add	local04, #1
066c4     AF 70 62 FC | 	wrlong	local04, fp
066c8     58 5E 85 F1 | 	sub	fp, #88
066cc     35 41 48 FC | 	wrbyte	#32, local01
066d0     50 00 90 FD | 	jmp	#LR__0326
066d4                 | LR__0323
066d4     68 5E 05 F1 | 	add	fp, #104
066d8     AF 6A 02 FB | 	rdlong	local01, fp
066dc     68 5E 85 F1 | 	sub	fp, #104
066e0     04 6A 0E F2 | 	cmp	local01, #4 wz
066e4     20 00 90 5D |  if_ne	jmp	#LR__0324
066e8     58 5E 05 F1 | 	add	fp, #88
066ec     AF 6A 02 FB | 	rdlong	local01, fp
066f0     35 71 02 F6 | 	mov	local04, local01
066f4     01 70 06 F1 | 	add	local04, #1
066f8     AF 70 62 FC | 	wrlong	local04, fp
066fc     58 5E 85 F1 | 	sub	fp, #88
06700     35 5B 48 FC | 	wrbyte	#45, local01
06704     1C 00 90 FD | 	jmp	#LR__0325
06708                 | LR__0324
06708     58 5E 05 F1 | 	add	fp, #88
0670c     AF 6A 02 FB | 	rdlong	local01, fp
06710     35 71 02 F6 | 	mov	local04, local01
06714     01 70 06 F1 | 	add	local04, #1
06718     AF 70 62 FC | 	wrlong	local04, fp
0671c     58 5E 85 F1 | 	sub	fp, #88
06720     35 57 48 FC | 	wrbyte	#43, local01
06724                 | LR__0325
06724                 | LR__0326
06724                 | LR__0327
06724     58 5E 05 F1 | 	add	fp, #88
06728     AF 5C 02 FB | 	rdlong	arg01, fp
0672c     4C 5E 85 F1 | 	sub	fp, #76
06730     AF 5E 02 FB | 	rdlong	arg02, fp
06734     04 5E 05 F1 | 	add	fp, #4
06738     AF 60 02 FB | 	rdlong	arg03, fp
0673c     50 5E 05 F1 | 	add	fp, #80
06740     AF 62 02 FB | 	rdlong	arg04, fp
06744     00 72 06 F6 | 	mov	local05, #0
06748     58 5E 85 F1 | 	sub	fp, #88
0674c     AF 74 02 FB | 	rdlong	local06, fp
06750     08 5E 85 F1 | 	sub	fp, #8
06754     1D 74 2E F4 | 	testbn	local06, #29 wz
06758     01 72 06 56 |  if_ne	mov	local05, #1
0675c     39 65 02 F6 | 	mov	arg05, local05
06760     84 0D B0 FD | 	call	#__system___uitoa
06764     15 77 02 F6 | 	mov	local07, result1
06768     5C 5E 05 F1 | 	add	fp, #92
0676c     AF 6A 02 FB | 	rdlong	local01, fp
06770     3B 6B 02 F1 | 	add	local01, local07
06774     AF 6A 62 FC | 	wrlong	local01, fp
06778     08 5E 05 F1 | 	add	fp, #8
0677c     AF 70 02 FB | 	rdlong	local04, fp
06780     64 5E 85 F1 | 	sub	fp, #100
06784     38 6B 5A F2 | 	cmps	local01, local04 wcz
06788     64 00 90 ED |  if_be	jmp	#LR__0331
0678c     B0 98 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
06790     93 00 A0 FD | 	call	#FCACHE_LOAD_
06794                 | LR__0328
06794     64 5E 05 F1 | 	add	fp, #100
06798     AF 6A 02 FB | 	rdlong	local01, fp
0679c     35 71 02 F6 | 	mov	local04, local01
067a0     01 70 86 F1 | 	sub	local04, #1
067a4     AF 70 62 FC | 	wrlong	local04, fp
067a8     64 5E 85 F1 | 	sub	fp, #100
067ac     00 6A 5E F2 | 	cmps	local01, #0 wcz
067b0     20 00 90 ED |  if_be	jmp	#LR__0330
067b4     58 5E 05 F1 | 	add	fp, #88
067b8     AF 6A 02 FB | 	rdlong	local01, fp
067bc     35 71 02 F6 | 	mov	local04, local01
067c0     01 70 06 F1 | 	add	local04, #1
067c4     AF 70 62 FC | 	wrlong	local04, fp
067c8     58 5E 85 F1 | 	sub	fp, #88
067cc     35 47 48 FC | 	wrbyte	#35, local01
067d0     C0 FF 9F FD | 	jmp	#LR__0328
067d4                 | LR__0329
067d4                 | LR__0330
067d4     58 5E 05 F1 | 	add	fp, #88
067d8     AF 6A 02 FB | 	rdlong	local01, fp
067dc     35 71 02 F6 | 	mov	local04, local01
067e0     01 70 06 F1 | 	add	local04, #1
067e4     AF 70 62 FC | 	wrlong	local04, fp
067e8     58 5E 85 F1 | 	sub	fp, #88
067ec     35 01 48 FC | 	wrbyte	#0, local01
067f0                 | LR__0331
067f0     14 5E 05 F1 | 	add	fp, #20
067f4     AF 60 02 F6 | 	mov	arg03, fp
067f8     10 5E 85 F1 | 	sub	fp, #16
067fc     AF 5C 02 FB | 	rdlong	arg01, fp
06800     04 5E 05 F1 | 	add	fp, #4
06804     AF 5E 02 FB | 	rdlong	arg02, fp
06808     08 5E 85 F1 | 	sub	fp, #8
0680c     EC FB BF FD | 	call	#__system___fmtstr
06810                 | LR__0332
06810     AF F0 03 F6 | 	mov	ptra, fp
06814     BF 00 A0 FD | 	call	#popregs_
06818                 | __system___fmtnum_ret
06818     2D 00 64 FD | 	ret
0681c                 | 
0681c                 | __system__String_S
0681c     06 5A 05 F6 | 	mov	COUNT_, #6
06820     B0 00 A0 FD | 	call	#pushregs_
06824     2E 6B 02 F6 | 	mov	local01, arg01
06828     2F 6D 02 F6 | 	mov	local02, arg02
0682c     36 5D 02 F6 | 	mov	arg01, local02
06830     00 6E 06 F6 | 	mov	local03, #0
06834     D8 97 9F FE | 	loc	pa,	#(@LR__0334-@LR__0333)
06838     93 00 A0 FD | 	call	#FCACHE_LOAD_
0683c                 | LR__0333
0683c     2E 71 CA FA | 	rdbyte	local04, arg01 wz
06840     01 6E 06 51 |  if_ne	add	local03, #1
06844     01 5C 06 51 |  if_ne	add	arg01, #1
06848     F0 FF 9F 5D |  if_ne	jmp	#LR__0333
0684c                 | LR__0334
0684c     37 2B 0A F6 | 	mov	result1, local03 wz
06850     40 00 00 AF 
06854     26 2B 06 A6 |  if_e	mov	result1, ##@LR__0451
06858     50 00 90 AD |  if_e	jmp	#LR__0336
0685c     00 6A 5E F2 | 	cmps	local01, #0 wcz
06860     40 00 00 EF 
06864     27 2B 06 E6 |  if_be	mov	result1, ##@LR__0452
06868     40 00 90 ED |  if_be	jmp	#LR__0336
0686c     35 73 02 F6 | 	mov	local05, local01
06870     01 72 06 F1 | 	add	local05, #1
06874     39 5D 02 F6 | 	mov	arg01, local05
06878     01 5C 06 F1 | 	add	arg01, #1
0687c     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
06880     15 75 0A F6 | 	mov	local06, result1 wz
06884     20 00 90 AD |  if_e	jmp	#LR__0335
06888     36 5F C2 FA | 	rdbyte	arg02, local02
0688c     3A 5D 02 F6 | 	mov	arg01, local06
06890     35 61 02 F6 | 	mov	arg03, local01
06894     A0 00 A0 FD | 	call	#\builtin_bytefill_
06898     3A 73 02 F1 | 	add	local05, local06
0689c     39 01 48 FC | 	wrbyte	#0, local05
068a0     3A 2B 02 F6 | 	mov	result1, local06
068a4     04 00 90 FD | 	jmp	#LR__0336
068a8                 | LR__0335
068a8     3A 2B 02 F6 | 	mov	result1, local06
068ac                 | LR__0336
068ac     AF F0 03 F6 | 	mov	ptra, fp
068b0     BF 00 A0 FD | 	call	#popregs_
068b4                 | __system__String_S_ret
068b4     2D 00 64 FD | 	ret
068b8                 | 
068b8                 | __system___gc_ptrs
068b8     0A 5A 05 F6 | 	mov	COUNT_, #10
068bc     B0 00 A0 FD | 	call	#pushregs_
068c0     02 6B 02 F6 | 	mov	local01, __heap_ptr
068c4     35 6D 02 F6 | 	mov	local02, local01
068c8     07 00 00 FF 
068cc     F8 6D 06 F1 | 	add	local02, ##4088
068d0     35 6F 0A FB | 	rdlong	local03, local01 wz
068d4     74 00 90 5D |  if_ne	jmp	#LR__0337
068d8     36 71 02 F6 | 	mov	local04, local02
068dc     35 71 82 F1 | 	sub	local04, local01
068e0     35 03 58 FC | 	wrword	#1, local01
068e4     35 73 02 F6 | 	mov	local05, local01
068e8     02 72 06 F1 | 	add	local05, #2
068ec     36 00 80 FF 
068f0     39 21 59 FC | 	wrword	##27792, local05
068f4     35 75 02 F6 | 	mov	local06, local01
068f8     04 74 06 F1 | 	add	local06, #4
068fc     3A 01 58 FC | 	wrword	#0, local06
06900     35 77 02 F6 | 	mov	local07, local01
06904     06 76 06 F1 | 	add	local07, #6
06908     3B 03 58 FC | 	wrword	#1, local07
0690c     10 6A 06 F1 | 	add	local01, #16
06910     38 6F 52 F6 | 	abs	local03, local04 wc
06914     04 6E 46 F0 | 	shr	local03, #4
06918     37 6F 62 C6 |  if_b	neg	local03, local03
0691c     35 6F 52 FC | 	wrword	local03, local01
06920     35 79 02 F6 | 	mov	local08, local01
06924     02 78 06 F1 | 	add	local08, #2
06928     36 00 80 FF 
0692c     3C 1F 59 FC | 	wrword	##27791, local08
06930     35 7B 02 F6 | 	mov	local09, local01
06934     04 7A 06 F1 | 	add	local09, #4
06938     3D 01 58 FC | 	wrword	#0, local09
0693c     35 7D 02 F6 | 	mov	local10, local01
06940     06 7C 06 F1 | 	add	local10, #6
06944     3E 01 58 FC | 	wrword	#0, local10
06948     10 6A 86 F1 | 	sub	local01, #16
0694c                 | LR__0337
0694c     36 2D 02 F6 | 	mov	result2, local02
06950     35 2B 02 F6 | 	mov	result1, local01
06954     AF F0 03 F6 | 	mov	ptra, fp
06958     BF 00 A0 FD | 	call	#popregs_
0695c                 | __system___gc_ptrs_ret
0695c     2D 00 64 FD | 	ret
06960                 | 
06960                 | __system___gc_nextBlockPtr
06960     02 5A 05 F6 | 	mov	COUNT_, #2
06964     B0 00 A0 FD | 	call	#pushregs_
06968     2E 6B 02 F6 | 	mov	local01, arg01
0696c     35 6D EA FA | 	rdword	local02, local01 wz
06970     10 00 90 5D |  if_ne	jmp	#LR__0338
06974     40 00 00 FF 
06978     28 5D 06 F6 | 	mov	arg01, ##@LR__0453
0697c     F8 01 B0 FD | 	call	#__system___gc_errmsg
06980     0C 00 90 FD | 	jmp	#LR__0339
06984                 | LR__0338
06984     04 6C 66 F0 | 	shl	local02, #4
06988     35 2B 02 F6 | 	mov	result1, local01
0698c     36 2B 02 F1 | 	add	result1, local02
06990                 | LR__0339
06990     AF F0 03 F6 | 	mov	ptra, fp
06994     BF 00 A0 FD | 	call	#popregs_
06998                 | __system___gc_nextBlockPtr_ret
06998     2D 00 64 FD | 	ret
0699c                 | 
0699c                 | __system___gc_tryalloc
0699c     1B 5A 05 F6 | 	mov	COUNT_, #27
069a0     B0 00 A0 FD | 	call	#pushregs_
069a4     2E 6B 02 F6 | 	mov	local01, arg01
069a8     2F 6D 02 F6 | 	mov	local02, arg02
069ac     08 FF BF FD | 	call	#__system___gc_ptrs
069b0     15 6F 02 F6 | 	mov	local03, result1
069b4     16 71 02 F6 | 	mov	local04, result2
069b8     37 73 02 F6 | 	mov	local05, local03
069bc     00 74 06 F6 | 	mov	local06, #0
069c0     94 96 9F FE | 	loc	pa,	#(@LR__0341-@LR__0340)
069c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
069c8                 | LR__0340
069c8     39 77 02 F6 | 	mov	local07, local05
069cc     06 72 06 F1 | 	add	local05, #6
069d0     39 79 02 F6 | 	mov	local08, local05
069d4     37 7B 02 F6 | 	mov	local09, local03
069d8     3C 7D E2 FA | 	rdword	local10, local08
069dc     3D 5D 02 F6 | 	mov	arg01, local09
069e0     3E 5F 0A F6 | 	mov	arg02, local10 wz
069e4     00 2A 06 A6 |  if_e	mov	result1, #0
069e8     04 5E 66 50 |  if_ne	shl	arg02, #4
069ec     2F 5D 02 51 |  if_ne	add	arg01, arg02
069f0     2E 2B 02 56 |  if_ne	mov	result1, arg01
069f4     15 7F 02 F6 | 	mov	local11, result1
069f8     3F 73 0A F6 | 	mov	local05, local11 wz
069fc     39 7B 02 56 |  if_ne	mov	local09, local05
06a00     3D 81 02 56 |  if_ne	mov	local12, local09
06a04     40 75 E2 5A |  if_ne	rdword	local06, local12
06a08     00 72 0E F2 | 	cmp	local05, #0 wz
06a0c     10 00 90 AD |  if_e	jmp	#LR__0342
06a10     38 73 5A F2 | 	cmps	local05, local04 wcz
06a14     08 00 90 3D |  if_ae	jmp	#LR__0342
06a18     3A 6B 5A F2 | 	cmps	local01, local06 wcz
06a1c     A8 FF 9F 1D |  if_a	jmp	#LR__0340
06a20                 | LR__0341
06a20                 | LR__0342
06a20     00 72 0E F2 | 	cmp	local05, #0 wz
06a24     39 2B 02 A6 |  if_e	mov	result1, local05
06a28     40 01 90 AD |  if_e	jmp	#LR__0345
06a2c     39 83 02 F6 | 	mov	local13, local05
06a30     06 82 06 F1 | 	add	local13, #6
06a34     41 85 E2 FA | 	rdword	local14, local13
06a38     3A 6B 5A F2 | 	cmps	local01, local06 wcz
06a3c     CC 00 90 3D |  if_ae	jmp	#LR__0344
06a40     39 87 02 F6 | 	mov	local15, local05
06a44     43 6B 52 FC | 	wrword	local01, local15
06a48     35 89 02 F6 | 	mov	local16, local01
06a4c     04 88 66 F0 | 	shl	local16, #4
06a50     39 8B 02 F6 | 	mov	local17, local05
06a54     44 8B 02 F1 | 	add	local17, local16
06a58     3A 8D 02 F6 | 	mov	local18, local06
06a5c     35 8D 82 F1 | 	sub	local18, local01
06a60     45 8F 02 F6 | 	mov	local19, local17
06a64     47 8D 52 FC | 	wrword	local18, local19
06a68     45 91 02 F6 | 	mov	local20, local17
06a6c     02 90 06 F1 | 	add	local20, #2
06a70     36 00 80 FF 
06a74     48 1F 59 FC | 	wrword	##27791, local20
06a78     45 93 02 F6 | 	mov	local21, local17
06a7c     04 92 06 F1 | 	add	local21, #4
06a80     39 5F 0A F6 | 	mov	arg02, local05 wz
06a84     00 2A 06 A6 |  if_e	mov	result1, #0
06a88     37 5F 82 51 |  if_ne	sub	arg02, local03
06a8c     04 5E 46 50 |  if_ne	shr	arg02, #4
06a90     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a94     49 2B 52 FC | 	wrword	result1, local21
06a98     45 95 02 F6 | 	mov	local22, local17
06a9c     41 7B E2 FA | 	rdword	local09, local13
06aa0     06 94 06 F1 | 	add	local22, #6
06aa4     4A 7B 52 FC | 	wrword	local09, local22
06aa8     45 97 02 F6 | 	mov	local23, local17
06aac     4B 5F 0A F6 | 	mov	arg02, local23 wz
06ab0     00 2A 06 A6 |  if_e	mov	result1, #0
06ab4     37 5F 82 51 |  if_ne	sub	arg02, local03
06ab8     04 5E 46 50 |  if_ne	shr	arg02, #4
06abc     2F 2B 02 56 |  if_ne	mov	result1, arg02
06ac0     15 85 02 F6 | 	mov	local14, result1
06ac4     45 5D 02 F6 | 	mov	arg01, local17
06ac8     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
06acc     15 99 0A F6 | 	mov	local24, result1 wz
06ad0     38 00 90 AD |  if_e	jmp	#LR__0343
06ad4     38 99 5A F2 | 	cmps	local24, local04 wcz
06ad8     30 00 90 3D |  if_ae	jmp	#LR__0343
06adc     4C 9B 02 F6 | 	mov	local25, local24
06ae0     04 9A 06 F1 | 	add	local25, #4
06ae4     37 7B 02 F6 | 	mov	local09, local03
06ae8     4B 7D 02 F6 | 	mov	local10, local23
06aec     3D 5D 02 F6 | 	mov	arg01, local09
06af0     3E 5F 0A F6 | 	mov	arg02, local10 wz
06af4     00 2A 06 A6 |  if_e	mov	result1, #0
06af8     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06afc     04 5E 46 50 |  if_ne	shr	arg02, #4
06b00     2F 2B 02 56 |  if_ne	mov	result1, arg02
06b04     15 7F 02 F6 | 	mov	local11, result1
06b08     4D 7F 52 FC | 	wrword	local11, local25
06b0c                 | LR__0343
06b0c                 | LR__0344
06b0c     06 76 06 F1 | 	add	local07, #6
06b10     3B 85 52 FC | 	wrword	local14, local07
06b14     36 00 00 FF 
06b18     80 7A 06 F6 | 	mov	local09, ##27776
06b1c     36 7B 42 F5 | 	or	local09, local02
06b20     39 9D 02 F6 | 	mov	local26, local05
06b24     02 9C 06 F1 | 	add	local26, #2
06b28     01 2A 62 FD | 	cogid	result1
06b2c     15 7B 42 F5 | 	or	local09, result1
06b30     4E 7B 52 FC | 	wrword	local09, local26
06b34     37 9F 02 F6 | 	mov	local27, local03
06b38     08 9E 06 F1 | 	add	local27, #8
06b3c     4F 7B E2 FA | 	rdword	local09, local27
06b40     41 7B 52 FC | 	wrword	local09, local13
06b44     39 5F 0A F6 | 	mov	arg02, local05 wz
06b48     00 2A 06 A6 |  if_e	mov	result1, #0
06b4c     37 5F 82 51 |  if_ne	sub	arg02, local03
06b50     04 5E 46 50 |  if_ne	shr	arg02, #4
06b54     2F 2B 02 56 |  if_ne	mov	result1, arg02
06b58     4F 2B 52 FC | 	wrword	result1, local27
06b5c     08 72 06 F1 | 	add	local05, #8
06b60     39 2B 02 F6 | 	mov	result1, local05
06b64     00 C0 31 FF 
06b68     00 2A 46 F5 | 	or	result1, ##1669332992
06b6c                 | LR__0345
06b6c     AF F0 03 F6 | 	mov	ptra, fp
06b70     BF 00 A0 FD | 	call	#popregs_
06b74                 | __system___gc_tryalloc_ret
06b74     2D 00 64 FD | 	ret
06b78                 | 
06b78                 | __system___gc_errmsg
06b78     02 5A 05 F6 | 	mov	COUNT_, #2
06b7c     B0 00 A0 FD | 	call	#pushregs_
06b80     2E 6B 02 F6 | 	mov	local01, arg01
06b84                 | LR__0346
06b84     35 6D CA FA | 	rdbyte	local02, local01 wz
06b88     01 6A 06 F1 | 	add	local01, #1
06b8c     0C 00 90 AD |  if_e	jmp	#LR__0347
06b90     36 5D 02 F6 | 	mov	arg01, local02
06b94     C4 F4 BF FD | 	call	#__system___tx
06b98     E8 FF 9F FD | 	jmp	#LR__0346
06b9c                 | LR__0347
06b9c     00 2A 06 F6 | 	mov	result1, #0
06ba0     AF F0 03 F6 | 	mov	ptra, fp
06ba4     BF 00 A0 FD | 	call	#popregs_
06ba8                 | __system___gc_errmsg_ret
06ba8     2D 00 64 FD | 	ret
06bac                 | 
06bac                 | __system___gc_alloc_managed
06bac     02 5A 05 F6 | 	mov	COUNT_, #2
06bb0     B0 00 A0 FD | 	call	#pushregs_
06bb4     2E 6B 02 F6 | 	mov	local01, arg01
06bb8     00 5E 06 F6 | 	mov	arg02, #0
06bbc     30 00 B0 FD | 	call	#__system___gc_doalloc
06bc0     15 6D 0A F6 | 	mov	local02, result1 wz
06bc4     18 00 90 5D |  if_ne	jmp	#LR__0348
06bc8     00 6A 5E F2 | 	cmps	local01, #0 wcz
06bcc     10 00 90 ED |  if_be	jmp	#LR__0348
06bd0     40 00 00 FF 
06bd4     44 5D 06 F6 | 	mov	arg01, ##@LR__0454
06bd8     9C FF BF FD | 	call	#__system___gc_errmsg
06bdc     04 00 90 FD | 	jmp	#LR__0349
06be0                 | LR__0348
06be0     36 2B 02 F6 | 	mov	result1, local02
06be4                 | LR__0349
06be4     AF F0 03 F6 | 	mov	ptra, fp
06be8     BF 00 A0 FD | 	call	#popregs_
06bec                 | __system___gc_alloc_managed_ret
06bec     2D 00 64 FD | 	ret
06bf0                 | 
06bf0                 | __system___gc_doalloc
06bf0     07 5A 05 F6 | 	mov	COUNT_, #7
06bf4     B0 00 A0 FD | 	call	#pushregs_
06bf8     2E 6B 0A F6 | 	mov	local01, arg01 wz
06bfc     2F 6D 02 F6 | 	mov	local02, arg02
06c00     00 2A 06 A6 |  if_e	mov	result1, #0
06c04     8C 00 90 AD |  if_e	jmp	#LR__0357
06c08     17 6A 06 F1 | 	add	local01, #23
06c0c     0F 6A 26 F5 | 	andn	local01, #15
06c10     04 6A 46 F0 | 	shr	local01, #4
06c14     14 14 06 F1 | 	add	ptr___system__dat__, #20
06c18     0A 6F 02 F6 | 	mov	local03, ptr___system__dat__
06c1c     37 5D 02 F6 | 	mov	arg01, local03
06c20     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06c24     50 F3 BF FD | 	call	#__system___lockmem
06c28     35 5D 02 F6 | 	mov	arg01, local01
06c2c     36 5F 02 F6 | 	mov	arg02, local02
06c30     68 FD BF FD | 	call	#__system___gc_tryalloc
06c34     15 71 0A F6 | 	mov	local04, result1 wz
06c38     14 00 90 5D |  if_ne	jmp	#LR__0350
06c3c     10 03 B0 FD | 	call	#__system___gc_docollect
06c40     35 5D 02 F6 | 	mov	arg01, local01
06c44     36 5F 02 F6 | 	mov	arg02, local02
06c48     50 FD BF FD | 	call	#__system___gc_tryalloc
06c4c     15 71 02 F6 | 	mov	local04, result1
06c50                 | LR__0350
06c50     37 01 68 FC | 	wrlong	#0, local03
06c54     00 70 0E F2 | 	cmp	local04, #0 wz
06c58     34 00 90 AD |  if_e	jmp	#LR__0356
06c5c     04 6A 66 F0 | 	shl	local01, #4
06c60     08 6A 86 F1 | 	sub	local01, #8
06c64     35 73 52 F6 | 	abs	local05, local01 wc
06c68     02 72 46 F0 | 	shr	local05, #2
06c6c     39 73 62 C6 |  if_b	neg	local05, local05
06c70     39 75 0A F6 | 	mov	local06, local05 wz
06c74     38 77 02 F6 | 	mov	local07, local04
06c78     14 00 90 AD |  if_e	jmp	#LR__0355
06c7c     8C 93 9F FE | 	loc	pa,	#(@LR__0353-@LR__0351)
06c80     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c84                 | LR__0351
06c84     3A 05 D8 FC | 	rep	@LR__0354, local06
06c88                 | LR__0352
06c88     3B 01 68 FC | 	wrlong	#0, local07
06c8c     04 76 06 F1 | 	add	local07, #4
06c90                 | LR__0353
06c90                 | LR__0354
06c90                 | LR__0355
06c90                 | LR__0356
06c90     38 2B 02 F6 | 	mov	result1, local04
06c94                 | LR__0357
06c94     AF F0 03 F6 | 	mov	ptra, fp
06c98     BF 00 A0 FD | 	call	#popregs_
06c9c                 | __system___gc_doalloc_ret
06c9c     2D 00 64 FD | 	ret
06ca0                 | 
06ca0                 | __system___gc_isvalidptr
06ca0     30 31 02 F6 | 	mov	_var01, arg03
06ca4     18 33 02 F6 | 	mov	_var02, _var01
06ca8     00 F8 7F FF 
06cac     00 32 06 F5 | 	and	_var02, ##-1048576
06cb0     00 C0 31 FF 
06cb4     00 32 0E F2 | 	cmp	_var02, ##1669332992 wz
06cb8     00 2A 06 56 |  if_ne	mov	result1, #0
06cbc     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06cc0     08 30 86 F1 | 	sub	_var01, #8
06cc4     18 35 02 F6 | 	mov	_var03, _var01
06cc8     00 F8 7F FF 
06ccc     00 34 26 F5 | 	andn	_var03, ##-1048576
06cd0     2E 35 5A F2 | 	cmps	_var03, arg01 wcz
06cd4     08 00 90 CD |  if_b	jmp	#LR__0358
06cd8     2F 35 5A F2 | 	cmps	_var03, arg02 wcz
06cdc     08 00 90 CD |  if_b	jmp	#LR__0359
06ce0                 | LR__0358
06ce0     00 2A 06 F6 | 	mov	result1, #0
06ce4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
06ce8                 | LR__0359
06ce8     1A 33 02 F6 | 	mov	_var02, _var03
06cec     2E 33 62 F5 | 	xor	_var02, arg01
06cf0     0F 32 0E F5 | 	and	_var02, #15 wz
06cf4     00 2A 06 56 |  if_ne	mov	result1, #0
06cf8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06cfc     1A 37 02 F6 | 	mov	_var04, _var03
06d00     02 36 06 F1 | 	add	_var04, #2
06d04     1B 33 E2 FA | 	rdword	_var02, _var04
06d08     7F 00 00 FF 
06d0c     C0 33 06 F5 | 	and	_var02, ##65472
06d10     36 00 00 FF 
06d14     80 32 0E F2 | 	cmp	_var02, ##27776 wz
06d18     00 2A 06 56 |  if_ne	mov	result1, #0
06d1c     1A 2B 02 A6 |  if_e	mov	result1, _var03
06d20                 | __system___gc_isvalidptr_ret
06d20     2D 00 64 FD | 	ret
06d24                 | 
06d24                 | __system___gc_dofree
06d24     1A 5A 05 F6 | 	mov	COUNT_, #26
06d28     B0 00 A0 FD | 	call	#pushregs_
06d2c     2E 6B 02 F6 | 	mov	local01, arg01
06d30     84 FB BF FD | 	call	#__system___gc_ptrs
06d34     16 6D 02 F6 | 	mov	local02, result2
06d38     15 6F 02 F6 | 	mov	local03, result1
06d3c     35 71 02 F6 | 	mov	local04, local01
06d40     02 70 06 F1 | 	add	local04, #2
06d44     36 00 80 FF 
06d48     38 1F 59 FC | 	wrword	##27791, local04
06d4c     35 73 02 F6 | 	mov	local05, local01
06d50     35 5D 02 F6 | 	mov	arg01, local01
06d54     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
06d58     15 75 02 F6 | 	mov	local06, result1
06d5c     F0 92 9F FE | 	loc	pa,	#(@LR__0361-@LR__0360)
06d60     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d64                 | LR__0360
06d64     04 72 06 F1 | 	add	local05, #4
06d68     39 77 02 F6 | 	mov	local07, local05
06d6c     3B 5F EA FA | 	rdword	arg02, local07 wz
06d70     37 5D 02 F6 | 	mov	arg01, local03
06d74     00 2A 06 A6 |  if_e	mov	result1, #0
06d78     04 5E 66 50 |  if_ne	shl	arg02, #4
06d7c     2F 5D 02 51 |  if_ne	add	arg01, arg02
06d80     2E 2B 02 56 |  if_ne	mov	result1, arg01
06d84     15 73 0A F6 | 	mov	local05, result1 wz
06d88     28 00 90 AD |  if_e	jmp	#LR__0362
06d8c     39 5D 02 F6 | 	mov	arg01, local05
06d90     00 78 06 F6 | 	mov	local08, #0
06d94     02 5C 06 F1 | 	add	arg01, #2
06d98     2E 7B E2 FA | 	rdword	local09, arg01
06d9c     36 00 00 FF 
06da0     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06da4     01 78 66 A6 |  if_e	neg	local08, #1
06da8     3C 2B 02 F6 | 	mov	result1, local08
06dac     15 7D 0A F6 | 	mov	local10, result1 wz
06db0     B0 FF 9F AD |  if_e	jmp	#LR__0360
06db4                 | LR__0361
06db4                 | LR__0362
06db4     00 72 0E F2 | 	cmp	local05, #0 wz
06db8     37 73 02 A6 |  if_e	mov	local05, local03
06dbc     39 7F 02 F6 | 	mov	local11, local05
06dc0     06 7E 06 F1 | 	add	local11, #6
06dc4     35 81 02 F6 | 	mov	local12, local01
06dc8     3F 83 E2 FA | 	rdword	local13, local11
06dcc     06 80 06 F1 | 	add	local12, #6
06dd0     40 83 52 FC | 	wrword	local13, local12
06dd4     35 5F 0A F6 | 	mov	arg02, local01 wz
06dd8     00 2A 06 A6 |  if_e	mov	result1, #0
06ddc     37 5F 82 51 |  if_ne	sub	arg02, local03
06de0     04 5E 46 50 |  if_ne	shr	arg02, #4
06de4     2F 2B 02 56 |  if_ne	mov	result1, arg02
06de8     15 85 02 F6 | 	mov	local14, result1
06dec     3F 85 52 FC | 	wrword	local14, local11
06df0     37 73 0A F2 | 	cmp	local05, local03 wz
06df4     74 00 90 AD |  if_e	jmp	#LR__0365
06df8     39 5D 02 F6 | 	mov	arg01, local05
06dfc     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
06e00     35 2B 0A F2 | 	cmp	result1, local01 wz
06e04     64 00 90 5D |  if_ne	jmp	#LR__0364
06e08     39 87 02 F6 | 	mov	local15, local05
06e0c     43 89 E2 FA | 	rdword	local16, local15
06e10     35 8B 02 F6 | 	mov	local17, local01
06e14     45 7D E2 FA | 	rdword	local10, local17
06e18     3E 89 02 F1 | 	add	local16, local10
06e1c     43 89 52 FC | 	wrword	local16, local15
06e20     38 01 58 FC | 	wrword	#0, local04
06e24     35 5D 02 F6 | 	mov	arg01, local01
06e28     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
06e2c     15 75 02 F6 | 	mov	local06, result1
06e30     36 75 5A F2 | 	cmps	local06, local02 wcz
06e34     24 00 90 3D |  if_ae	jmp	#LR__0363
06e38     3A 8D 02 F6 | 	mov	local18, local06
06e3c     04 8C 06 F1 | 	add	local18, #4
06e40     39 5F 0A F6 | 	mov	arg02, local05 wz
06e44     00 2A 06 A6 |  if_e	mov	result1, #0
06e48     37 5F 82 51 |  if_ne	sub	arg02, local03
06e4c     04 5E 46 50 |  if_ne	shr	arg02, #4
06e50     2F 2B 02 56 |  if_ne	mov	result1, arg02
06e54     15 85 02 F6 | 	mov	local14, result1
06e58     46 85 52 FC | 	wrword	local14, local18
06e5c                 | LR__0363
06e5c     40 83 E2 FA | 	rdword	local13, local12
06e60     3F 83 52 FC | 	wrword	local13, local11
06e64     40 01 58 FC | 	wrword	#0, local12
06e68     39 6B 02 F6 | 	mov	local01, local05
06e6c                 | LR__0364
06e6c                 | LR__0365
06e6c     35 5D 02 F6 | 	mov	arg01, local01
06e70     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
06e74     15 8F 0A F6 | 	mov	local19, result1 wz
06e78     C4 00 90 AD |  if_e	jmp	#LR__0367
06e7c     36 8F 5A F2 | 	cmps	local19, local02 wcz
06e80     BC 00 90 3D |  if_ae	jmp	#LR__0367
06e84     47 5D 02 F6 | 	mov	arg01, local19
06e88     00 78 06 F6 | 	mov	local08, #0
06e8c     02 5C 06 F1 | 	add	arg01, #2
06e90     2E 7B E2 FA | 	rdword	local09, arg01
06e94     36 00 00 FF 
06e98     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06e9c     01 78 66 A6 |  if_e	neg	local08, #1
06ea0     3C 2B 0A F6 | 	mov	result1, local08 wz
06ea4     98 00 90 AD |  if_e	jmp	#LR__0367
06ea8     35 73 02 F6 | 	mov	local05, local01
06eac     47 6B 02 F6 | 	mov	local01, local19
06eb0     39 91 02 F6 | 	mov	local20, local05
06eb4     48 93 E2 FA | 	rdword	local21, local20
06eb8     35 95 02 F6 | 	mov	local22, local01
06ebc     4A 7D E2 FA | 	rdword	local10, local22
06ec0     3E 93 02 F1 | 	add	local21, local10
06ec4     48 93 52 FC | 	wrword	local21, local20
06ec8     35 97 02 F6 | 	mov	local23, local01
06ecc     06 96 06 F1 | 	add	local23, #6
06ed0     39 99 02 F6 | 	mov	local24, local05
06ed4     4B 83 E2 FA | 	rdword	local13, local23
06ed8     06 98 06 F1 | 	add	local24, #6
06edc     4C 83 52 FC | 	wrword	local13, local24
06ee0     35 9B 02 F6 | 	mov	local25, local01
06ee4     02 9A 06 F1 | 	add	local25, #2
06ee8     4D 55 59 FC | 	wrword	#170, local25
06eec     4B 01 58 FC | 	wrword	#0, local23
06ef0     35 83 02 F6 | 	mov	local13, local01
06ef4     41 5D 02 F6 | 	mov	arg01, local13
06ef8     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
06efc     15 7D 02 F6 | 	mov	local10, result1
06f00     3E 75 0A F6 | 	mov	local06, local10 wz
06f04     38 00 90 AD |  if_e	jmp	#LR__0366
06f08     36 75 5A F2 | 	cmps	local06, local02 wcz
06f0c     30 00 90 3D |  if_ae	jmp	#LR__0366
06f10     3A 9D 02 F6 | 	mov	local26, local06
06f14     04 9C 06 F1 | 	add	local26, #4
06f18     37 83 02 F6 | 	mov	local13, local03
06f1c     39 7D 02 F6 | 	mov	local10, local05
06f20     41 5D 02 F6 | 	mov	arg01, local13
06f24     3E 5F 0A F6 | 	mov	arg02, local10 wz
06f28     00 2A 06 A6 |  if_e	mov	result1, #0
06f2c     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06f30     04 5E 46 50 |  if_ne	shr	arg02, #4
06f34     2F 2B 02 56 |  if_ne	mov	result1, arg02
06f38     15 85 02 F6 | 	mov	local14, result1
06f3c     4E 85 52 FC | 	wrword	local14, local26
06f40                 | LR__0366
06f40                 | LR__0367
06f40     3A 2B 02 F6 | 	mov	result1, local06
06f44     AF F0 03 F6 | 	mov	ptra, fp
06f48     BF 00 A0 FD | 	call	#popregs_
06f4c                 | __system___gc_dofree_ret
06f4c     2D 00 64 FD | 	ret
06f50                 | 
06f50                 | __system___gc_docollect
06f50     0C 5A 05 F6 | 	mov	COUNT_, #12
06f54     B0 00 A0 FD | 	call	#pushregs_
06f58     5C F9 BF FD | 	call	#__system___gc_ptrs
06f5c     16 6B 02 F6 | 	mov	local01, result2
06f60     15 6D 02 F6 | 	mov	local02, result1
06f64     36 5D 02 F6 | 	mov	arg01, local02
06f68     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f6c     15 6F 0A F6 | 	mov	local03, result1 wz
06f70     01 2A 62 FD | 	cogid	result1
06f74     15 71 02 F6 | 	mov	local04, result1
06f78     2C 00 90 AD |  if_e	jmp	#LR__0369
06f7c                 | LR__0368
06f7c     35 6F 5A F2 | 	cmps	local03, local01 wcz
06f80     24 00 90 3D |  if_ae	jmp	#LR__0369
06f84     37 73 02 F6 | 	mov	local05, local03
06f88     02 72 06 F1 | 	add	local05, #2
06f8c     39 75 E2 FA | 	rdword	local06, local05
06f90     20 74 26 F5 | 	andn	local06, #32
06f94     39 75 52 FC | 	wrword	local06, local05
06f98     37 5D 02 F6 | 	mov	arg01, local03
06f9c     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06fa0     15 6F 0A F6 | 	mov	local03, result1 wz
06fa4     D4 FF 9F 5D |  if_ne	jmp	#LR__0368
06fa8                 | LR__0369
06fa8     00 76 06 F6 | 	mov	local07, #0
06fac     00 5C 06 F6 | 	mov	arg01, #0
06fb0     5C EF BF FD | 	call	#__system____topofstack
06fb4     15 79 02 F6 | 	mov	local08, result1
06fb8     3B 5D 02 F6 | 	mov	arg01, local07
06fbc     3C 5F 02 F6 | 	mov	arg02, local08
06fc0     A0 00 B0 FD | 	call	#__system___gc_markhub
06fc4     2C 01 B0 FD | 	call	#__system___gc_markcog
06fc8     36 5D 02 F6 | 	mov	arg01, local02
06fcc     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06fd0     15 7B 0A F6 | 	mov	local09, result1 wz
06fd4     10 00 90 5D |  if_ne	jmp	#LR__0370
06fd8     40 00 00 FF 
06fdc     61 5D 06 F6 | 	mov	arg01, ##@LR__0455
06fe0     94 FB BF FD | 	call	#__system___gc_errmsg
06fe4     70 00 90 FD | 	jmp	#LR__0376
06fe8                 | LR__0370
06fe8                 | LR__0371
06fe8     3D 6F 02 F6 | 	mov	local03, local09
06fec     37 5D 02 F6 | 	mov	arg01, local03
06ff0     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
06ff4     15 7B 02 F6 | 	mov	local09, result1
06ff8     37 7D 02 F6 | 	mov	local10, local03
06ffc     02 7C 06 F1 | 	add	local10, #2
07000     3E 7F E2 FA | 	rdword	local11, local10
07004     20 7E CE F7 | 	test	local11, #32 wz
07008     3C 00 90 5D |  if_ne	jmp	#LR__0374
0700c     3F 81 02 F6 | 	mov	local12, local11
07010     10 80 0E F5 | 	and	local12, #16 wz
07014     30 00 90 5D |  if_ne	jmp	#LR__0374
07018     3F 77 02 F6 | 	mov	local07, local11
0701c     0F 76 06 F5 | 	and	local07, #15
07020     3B 7F 02 F6 | 	mov	local11, local07
07024     38 7F 0A F2 | 	cmp	local11, local04 wz
07028     08 00 90 AD |  if_e	jmp	#LR__0372
0702c     0E 7E 0E F2 | 	cmp	local11, #14 wz
07030     14 00 90 5D |  if_ne	jmp	#LR__0373
07034                 | LR__0372
07034     37 77 02 F6 | 	mov	local07, local03
07038     3B 5D 02 F6 | 	mov	arg01, local07
0703c     E4 FC BF FD | 	call	#__system___gc_dofree
07040     15 81 02 F6 | 	mov	local12, result1
07044     40 7B 02 F6 | 	mov	local09, local12
07048                 | LR__0373
07048                 | LR__0374
07048     00 7A 0E F2 | 	cmp	local09, #0 wz
0704c     08 00 90 AD |  if_e	jmp	#LR__0375
07050     35 7B 5A F2 | 	cmps	local09, local01 wcz
07054     90 FF 9F CD |  if_b	jmp	#LR__0371
07058                 | LR__0375
07058                 | LR__0376
07058     AF F0 03 F6 | 	mov	ptra, fp
0705c     BF 00 A0 FD | 	call	#popregs_
07060                 | __system___gc_docollect_ret
07060     2D 00 64 FD | 	ret
07064                 | 
07064                 | __system___gc_markhub
07064     0A 5A 05 F6 | 	mov	COUNT_, #10
07068     B0 00 A0 FD | 	call	#pushregs_
0706c     2E 6B 02 F6 | 	mov	local01, arg01
07070     2F 6D 02 F6 | 	mov	local02, arg02
07074     40 F8 BF FD | 	call	#__system___gc_ptrs
07078     15 6F 02 F6 | 	mov	local03, result1
0707c     16 71 02 F6 | 	mov	local04, result2
07080                 | LR__0377
07080     36 6B 5A F2 | 	cmps	local01, local02 wcz
07084     60 00 90 3D |  if_ae	jmp	#LR__0378
07088     35 61 02 FB | 	rdlong	arg03, local01
0708c     04 6A 06 F1 | 	add	local01, #4
07090     37 5D 02 F6 | 	mov	arg01, local03
07094     38 5F 02 F6 | 	mov	arg02, local04
07098     04 FC BF FD | 	call	#__system___gc_isvalidptr
0709c     15 73 0A F6 | 	mov	local05, result1 wz
070a0     DC FF 9F AD |  if_e	jmp	#LR__0377
070a4     39 5D 02 F6 | 	mov	arg01, local05
070a8     00 74 06 F6 | 	mov	local06, #0
070ac     02 5C 06 F1 | 	add	arg01, #2
070b0     2E 77 E2 FA | 	rdword	local07, arg01
070b4     36 00 00 FF 
070b8     8F 76 0E F2 | 	cmp	local07, ##27791 wz
070bc     01 74 66 A6 |  if_e	neg	local06, #1
070c0     3A 2B 02 F6 | 	mov	result1, local06
070c4     15 79 0A F6 | 	mov	local08, result1 wz
070c8     B4 FF 9F 5D |  if_ne	jmp	#LR__0377
070cc     39 7B 02 F6 | 	mov	local09, local05
070d0     02 7A 06 F1 | 	add	local09, #2
070d4     3D 7D E2 FA | 	rdword	local10, local09
070d8     0F 7C 26 F5 | 	andn	local10, #15
070dc     2E 7C 46 F5 | 	or	local10, #46
070e0     3D 7D 52 FC | 	wrword	local10, local09
070e4     98 FF 9F FD | 	jmp	#LR__0377
070e8                 | LR__0378
070e8     AF F0 03 F6 | 	mov	ptra, fp
070ec     BF 00 A0 FD | 	call	#popregs_
070f0                 | __system___gc_markhub_ret
070f0     2D 00 64 FD | 	ret
070f4                 | 
070f4                 | __system___gc_markcog
070f4     06 5A 05 F6 | 	mov	COUNT_, #6
070f8     B0 00 A0 FD | 	call	#pushregs_
070fc     B8 F7 BF FD | 	call	#__system___gc_ptrs
07100     15 6B 02 F6 | 	mov	local01, result1
07104     16 6D 02 F6 | 	mov	local02, result2
07108     00 6E 06 F6 | 	mov	local03, #0
0710c                 | LR__0379
0710c     F0 71 06 F6 | 	mov	local04, #496
07110     37 71 82 F1 | 	sub	local04, local03
07114     F0 71 06 F1 | 	add	local04, #496
07118                 | 	'.live	local04
07118     00 70 96 F9 | 	alts	local04, #0
0711c     38 73 02 F6 | 	mov	local05, local04
07120     36 5F 02 F6 | 	mov	arg02, local02
07124     35 5D 02 F6 | 	mov	arg01, local01
07128     39 61 02 F6 | 	mov	arg03, local05
0712c     70 FB BF FD | 	call	#__system___gc_isvalidptr
07130     15 73 0A F6 | 	mov	local05, result1 wz
07134     10 00 90 AD |  if_e	jmp	#LR__0380
07138     02 72 06 F1 | 	add	local05, #2
0713c     39 75 E2 FA | 	rdword	local06, local05
07140     20 74 46 F5 | 	or	local06, #32
07144     39 75 52 FC | 	wrword	local06, local05
07148                 | LR__0380
07148     01 6E 06 F1 | 	add	local03, #1
0714c     F0 6F 5E F2 | 	cmps	local03, #496 wcz
07150     B8 FF 9F CD |  if_b	jmp	#LR__0379
07154     AF F0 03 F6 | 	mov	ptra, fp
07158     BF 00 A0 FD | 	call	#popregs_
0715c                 | __system___gc_markcog_ret
0715c     2D 00 64 FD | 	ret
07160                 | 
07160                 | __system__write
07160     03 5A 05 F6 | 	mov	COUNT_, #3
07164     B0 00 A0 FD | 	call	#pushregs_
07168     2E 6B 02 F6 | 	mov	local01, arg01
0716c     2F 6D 02 F6 | 	mov	local02, arg02
07170     30 6F 02 F6 | 	mov	local03, arg03
07174     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07178     1C 00 90 CD |  if_b	jmp	#LR__0381
0717c     01 00 00 FF 
07180     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07184     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07188     01 00 00 FF 
0718c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07190     01 2A 66 F6 | 	neg	result1, #1
07194     28 00 90 FD | 	jmp	#LR__0382
07198                 | LR__0381
07198     35 5D 02 F6 | 	mov	arg01, local01
0719c     01 5C 66 F0 | 	shl	arg01, #1
071a0     35 5D 02 F1 | 	add	arg01, local01
071a4     04 5C 66 F0 | 	shl	arg01, #4
071a8     1C 14 06 F1 | 	add	ptr___system__dat__, #28
071ac     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
071b0     36 5F 02 F6 | 	mov	arg02, local02
071b4     37 61 02 F6 | 	mov	arg03, local03
071b8     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
071bc     4C 09 B0 FD | 	call	#__system___vfswrite
071c0                 | LR__0382
071c0     AF F0 03 F6 | 	mov	ptra, fp
071c4     BF 00 A0 FD | 	call	#popregs_
071c8                 | __system__write_ret
071c8     2D 00 64 FD | 	ret
071cc                 | 
071cc                 | __system__read
071cc     03 5A 05 F6 | 	mov	COUNT_, #3
071d0     B0 00 A0 FD | 	call	#pushregs_
071d4     2E 6B 02 F6 | 	mov	local01, arg01
071d8     2F 6D 02 F6 | 	mov	local02, arg02
071dc     30 6F 02 F6 | 	mov	local03, arg03
071e0     0A 6A 1E F2 | 	cmp	local01, #10 wcz
071e4     1C 00 90 CD |  if_b	jmp	#LR__0383
071e8     01 00 00 FF 
071ec     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
071f0     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
071f4     01 00 00 FF 
071f8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
071fc     01 2A 66 F6 | 	neg	result1, #1
07200     28 00 90 FD | 	jmp	#LR__0384
07204                 | LR__0383
07204     35 5D 02 F6 | 	mov	arg01, local01
07208     01 5C 66 F0 | 	shl	arg01, #1
0720c     35 5D 02 F1 | 	add	arg01, local01
07210     04 5C 66 F0 | 	shl	arg01, #4
07214     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07218     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
0721c     36 5F 02 F6 | 	mov	arg02, local02
07220     37 61 02 F6 | 	mov	arg03, local03
07224     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07228     A4 0A B0 FD | 	call	#__system___vfsread
0722c                 | LR__0384
0722c     AF F0 03 F6 | 	mov	ptra, fp
07230     BF 00 A0 FD | 	call	#popregs_
07234                 | __system__read_ret
07234     2D 00 64 FD | 	ret
07238                 | 
07238                 | __system__close
07238     01 5A 05 F6 | 	mov	COUNT_, #1
0723c     B0 00 A0 FD | 	call	#pushregs_
07240     2E 6B 02 F6 | 	mov	local01, arg01
07244     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07248     1C 00 90 CD |  if_b	jmp	#LR__0385
0724c     01 00 00 FF 
07250     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07254     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07258     01 00 00 FF 
0725c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07260     01 2A 66 F6 | 	neg	result1, #1
07264     20 00 90 FD | 	jmp	#LR__0386
07268                 | LR__0385
07268     35 5D 02 F6 | 	mov	arg01, local01
0726c     01 5C 66 F0 | 	shl	arg01, #1
07270     35 5D 02 F1 | 	add	arg01, local01
07274     04 5C 66 F0 | 	shl	arg01, #4
07278     1C 14 06 F1 | 	add	ptr___system__dat__, #28
0727c     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
07280     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07284     80 03 B0 FD | 	call	#__system___closeraw
07288                 | LR__0386
07288     AF F0 03 F6 | 	mov	ptra, fp
0728c     BF 00 A0 FD | 	call	#popregs_
07290                 | __system__close_ret
07290     2D 00 64 FD | 	ret
07294                 | 
07294                 | __system__lseek
07294     09 5A 05 F6 | 	mov	COUNT_, #9
07298     B0 00 A0 FD | 	call	#pushregs_
0729c     2E 6B 02 F6 | 	mov	local01, arg01
072a0     2F 6D 02 F6 | 	mov	local02, arg02
072a4     30 6F 02 F6 | 	mov	local03, arg03
072a8     0A 6A 1E F2 | 	cmp	local01, #10 wcz
072ac     1C 00 90 CD |  if_b	jmp	#LR__0387
072b0     01 00 00 FF 
072b4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
072b8     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
072bc     01 00 00 FF 
072c0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
072c4     01 2A 66 F6 | 	neg	result1, #1
072c8     D8 00 90 FD | 	jmp	#LR__0391
072cc                 | LR__0387
072cc     35 71 02 F6 | 	mov	local04, local01
072d0     01 70 66 F0 | 	shl	local04, #1
072d4     35 71 02 F1 | 	add	local04, local01
072d8     04 70 66 F0 | 	shl	local04, #4
072dc     1C 14 06 F1 | 	add	ptr___system__dat__, #28
072e0     0A 71 02 F1 | 	add	local04, ptr___system__dat__
072e4     2C 70 06 F1 | 	add	local04, #44
072e8     38 73 0A FB | 	rdlong	local05, local04 wz
072ec     2C 70 86 F1 | 	sub	local04, #44
072f0     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
072f4     1C 00 90 5D |  if_ne	jmp	#LR__0388
072f8     01 00 00 FF 
072fc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07300     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
07304     01 00 00 FF 
07308     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0730c     01 2A 66 F6 | 	neg	result1, #1
07310     90 00 90 FD | 	jmp	#LR__0391
07314                 | LR__0388
07314     08 70 06 F1 | 	add	local04, #8
07318     38 73 02 FB | 	rdlong	local05, local04
0731c     08 70 86 F1 | 	sub	local04, #8
07320     40 72 CE F7 | 	test	local05, #64 wz
07324     14 00 90 AD |  if_e	jmp	#LR__0389
07328     08 70 06 F1 | 	add	local04, #8
0732c     38 73 02 FB | 	rdlong	local05, local04
07330     80 72 46 F5 | 	or	local05, #128
07334     38 73 62 FC | 	wrlong	local05, local04
07338     08 70 86 F1 | 	sub	local04, #8
0733c                 | LR__0389
0733c     2C 70 06 F1 | 	add	local04, #44
07340     38 73 02 FB | 	rdlong	local05, local04
07344     2C 70 86 F1 | 	sub	local04, #44
07348     39 75 02 FB | 	rdlong	local06, local05
0734c     04 72 06 F1 | 	add	local05, #4
07350     39 77 02 FB | 	rdlong	local07, local05
07354     38 5D 02 F6 | 	mov	arg01, local04
07358     36 5F 02 F6 | 	mov	arg02, local02
0735c     37 61 02 F6 | 	mov	arg03, local03
07360     07 79 02 F6 | 	mov	local08, objptr
07364     3A 0F 02 F6 | 	mov	objptr, local06
07368     2D 76 62 FD | 	call	local07
0736c     3C 0F 02 F6 | 	mov	objptr, local08
07370     15 7B 02 F6 | 	mov	local09, result1
07374     00 7A 5E F2 | 	cmps	local09, #0 wcz
07378     24 00 90 3D |  if_ae	jmp	#LR__0390
0737c     3D 5D 6A F6 | 	neg	arg01, local09 wz
07380     01 00 00 FF 
07384     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07388     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
0738c     01 00 00 FF 
07390     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07394     01 2A 66 56 |  if_ne	neg	result1, #1
07398     00 2A 06 A6 |  if_e	mov	result1, #0
0739c     04 00 90 FD | 	jmp	#LR__0391
073a0                 | LR__0390
073a0     3D 2B 02 F6 | 	mov	result1, local09
073a4                 | LR__0391
073a4     AF F0 03 F6 | 	mov	ptra, fp
073a8     BF 00 A0 FD | 	call	#popregs_
073ac                 | __system__lseek_ret
073ac     2D 00 64 FD | 	ret
073b0                 | 
073b0                 | __system____getftab
073b0     0A 5C 1E F2 | 	cmp	arg01, #10 wcz
073b4     00 2A 06 36 |  if_ae	mov	result1, #0
073b8     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
073bc     2E 2B 02 F6 | 	mov	result1, arg01
073c0     01 2A 66 F0 | 	shl	result1, #1
073c4     2E 2B 02 F1 | 	add	result1, arg01
073c8     04 2A 66 F0 | 	shl	result1, #4
073cc     1C 14 06 F1 | 	add	ptr___system__dat__, #28
073d0     0A 2B 02 F1 | 	add	result1, ptr___system__dat__
073d4     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
073d8                 | __system____getftab_ret
073d8     2D 00 64 FD | 	ret
073dc                 | 
073dc                 | __system___strrev
073dc     2E 31 CA FA | 	rdbyte	_var01, arg01 wz
073e0     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
073e4     2E 33 02 F6 | 	mov	_var02, arg01
073e8     20 8C 9F FE | 	loc	pa,	#(@LR__0393-@LR__0392)
073ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
073f0                 | LR__0392
073f0     19 31 CA FA | 	rdbyte	_var01, _var02 wz
073f4     01 32 06 51 |  if_ne	add	_var02, #1
073f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0392
073fc                 | LR__0393
073fc     01 32 86 F1 | 	sub	_var02, #1
07400                 | LR__0394
07400     2E 33 5A F2 | 	cmps	_var02, arg01 wcz
07404     1C 00 90 ED |  if_be	jmp	#LR__0395
07408     2E 35 C2 FA | 	rdbyte	_var03, arg01
0740c     19 37 C2 FA | 	rdbyte	_var04, _var02
07410     2E 37 42 FC | 	wrbyte	_var04, arg01
07414     19 35 42 FC | 	wrbyte	_var03, _var02
07418     01 5C 06 F1 | 	add	arg01, #1
0741c     01 32 86 F1 | 	sub	_var02, #1
07420     DC FF 9F FD | 	jmp	#LR__0394
07424                 | LR__0395
07424                 | __system___strrev_ret
07424     2D 00 64 FD | 	ret
07428                 | 
07428                 | __system___fmtpad
07428     0C 5A 05 F6 | 	mov	COUNT_, #12
0742c     B0 00 A0 FD | 	call	#pushregs_
07430     2E 6B 02 F6 | 	mov	local01, arg01
07434     2F 6D 02 F6 | 	mov	local02, arg02
07438     31 6F 02 F6 | 	mov	local03, arg04
0743c     36 71 EA F8 | 	getbyte	local04, local02, #1
07440     16 6C 46 F0 | 	shr	local02, #22
07444     03 6C 0E F5 | 	and	local02, #3 wz
07448     00 72 06 F6 | 	mov	local05, #0
0744c     01 6C 06 A6 |  if_e	mov	local02, #1
07450     37 6D CA F7 | 	test	local02, local03 wz
07454     00 2A 06 A6 |  if_e	mov	result1, #0
07458     80 00 90 AD |  if_e	jmp	#LR__0399
0745c     30 71 82 F1 | 	sub	local04, arg03
07460     38 75 02 F6 | 	mov	local06, local04
07464     00 74 5E F2 | 	cmps	local06, #0 wcz
07468     00 2A 06 E6 |  if_be	mov	result1, #0
0746c     6C 00 90 ED |  if_be	jmp	#LR__0399
07470     03 6C 0E F2 | 	cmp	local02, #3 wz
07474     18 00 90 5D |  if_ne	jmp	#LR__0396
07478     01 6E 0E F2 | 	cmp	local03, #1 wz
0747c     6E 76 62 FD | 	wrz	local07
07480     3B 75 02 F1 | 	add	local06, local07
07484     3A 75 52 F6 | 	abs	local06, local06 wc
07488     01 74 46 F0 | 	shr	local06, #1
0748c     3A 75 62 C6 |  if_b	neg	local06, local06
07490                 | LR__0396
07490     00 74 5E F2 | 	cmps	local06, #0 wcz
07494     40 00 90 ED |  if_be	jmp	#LR__0398
07498     3A 79 02 F6 | 	mov	local08, local06
0749c                 | LR__0397
0749c     35 7B 02 F6 | 	mov	local09, local01
074a0     3D 77 02 FB | 	rdlong	local07, local09
074a4     04 7A 06 F1 | 	add	local09, #4
074a8     3D 7D 02 FB | 	rdlong	local10, local09
074ac     20 5C 06 F6 | 	mov	arg01, #32
074b0     07 7F 02 F6 | 	mov	local11, objptr
074b4     3B 0F 02 F6 | 	mov	objptr, local07
074b8     2D 7C 62 FD | 	call	local10
074bc     3F 0F 02 F6 | 	mov	objptr, local11
074c0     15 81 02 F6 | 	mov	local12, result1
074c4     00 80 5E F2 | 	cmps	local12, #0 wcz
074c8     40 2B 02 C6 |  if_b	mov	result1, local12
074cc     0C 00 90 CD |  if_b	jmp	#LR__0399
074d0     40 73 02 F1 | 	add	local05, local12
074d4     F1 79 6E FB | 	djnz	local08, #LR__0397
074d8                 | LR__0398
074d8     39 2B 02 F6 | 	mov	result1, local05
074dc                 | LR__0399
074dc     AF F0 03 F6 | 	mov	ptra, fp
074e0     BF 00 A0 FD | 	call	#popregs_
074e4                 | __system___fmtpad_ret
074e4     2D 00 64 FD | 	ret
074e8                 | 
074e8                 | __system___uitoa
074e8     09 5A 05 F6 | 	mov	COUNT_, #9
074ec     B0 00 A0 FD | 	call	#pushregs_
074f0     2E 6B 02 F6 | 	mov	local01, arg01
074f4     2F 6D 02 F6 | 	mov	local02, arg02
074f8     30 6F 02 F6 | 	mov	local03, arg03
074fc     31 71 02 F6 | 	mov	local04, arg04
07500     32 73 0A F6 | 	mov	local05, arg05 wz
07504     35 75 02 F6 | 	mov	local06, local01
07508     00 76 06 F6 | 	mov	local07, #0
0750c     37 78 06 56 |  if_ne	mov	local08, #55
07510     57 78 06 A6 |  if_e	mov	local08, #87
07514                 | LR__0400
07514     36 0B 03 F6 | 	mov	muldiva_, local02
07518     37 0D 03 F6 | 	mov	muldivb_, local03
0751c     CC 00 A0 FD | 	call	#unsdivide_
07520     85 7B 02 F6 | 	mov	local09, muldiva_
07524     0A 7A 1E F2 | 	cmp	local09, #10 wcz
07528     30 7A 06 C1 |  if_b	add	local09, #48
0752c     3C 7B 02 31 |  if_ae	add	local09, local08
07530     3A 7B 42 FC | 	wrbyte	local09, local06
07534     36 0B 03 F6 | 	mov	muldiva_, local02
07538     37 0D 03 F6 | 	mov	muldivb_, local03
0753c     01 74 06 F1 | 	add	local06, #1
07540     CC 00 A0 FD | 	call	#unsdivide_
07544     86 6D 0A F6 | 	mov	local02, muldivb_ wz
07548     01 76 06 F1 | 	add	local07, #1
0754c     C4 FF 9F 5D |  if_ne	jmp	#LR__0400
07550     38 77 1A F2 | 	cmp	local07, local04 wcz
07554     BC FF 9F CD |  if_b	jmp	#LR__0400
07558     3A 01 48 FC | 	wrbyte	#0, local06
0755c     35 5D 02 F6 | 	mov	arg01, local01
07560     78 FE BF FD | 	call	#__system___strrev
07564     3B 2B 02 F6 | 	mov	result1, local07
07568     AF F0 03 F6 | 	mov	ptra, fp
0756c     BF 00 A0 FD | 	call	#popregs_
07570                 | __system___uitoa_ret
07570     2D 00 64 FD | 	ret
07574                 | 
07574                 | __system___gettxfunc
07574     03 5A 05 F6 | 	mov	COUNT_, #3
07578     B0 00 A0 FD | 	call	#pushregs_
0757c     30 FE BF FD | 	call	#__system____getftab
07580     15 6B 0A F6 | 	mov	local01, result1 wz
07584     14 00 90 AD |  if_e	jmp	#LR__0401
07588     08 6A 06 F1 | 	add	local01, #8
0758c     35 6D 02 FB | 	rdlong	local02, local01
07590     08 6A 86 F1 | 	sub	local01, #8
07594     36 6F 0A F6 | 	mov	local03, local02 wz
07598     08 00 90 5D |  if_ne	jmp	#LR__0402
0759c                 | LR__0401
0759c     00 2A 06 F6 | 	mov	result1, #0
075a0     0C 00 90 FD | 	jmp	#LR__0403
075a4                 | LR__0402
075a4     35 5D 02 F6 | 	mov	arg01, local01
075a8     09 5F 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
075ac     88 E9 BF FD | 	call	#__system___make_methodptr
075b0                 | LR__0403
075b0     AF F0 03 F6 | 	mov	ptra, fp
075b4     BF 00 A0 FD | 	call	#popregs_
075b8                 | __system___gettxfunc_ret
075b8     2D 00 64 FD | 	ret
075bc                 | 
075bc                 | __system___getiolock_0145
075bc     03 5A 05 F6 | 	mov	COUNT_, #3
075c0     B0 00 A0 FD | 	call	#pushregs_
075c4     E8 FD BF FD | 	call	#__system____getftab
075c8     15 6B 0A F6 | 	mov	local01, result1 wz
075cc     14 00 90 AD |  if_e	jmp	#LR__0404
075d0     08 6A 06 F1 | 	add	local01, #8
075d4     35 6D 02 FB | 	rdlong	local02, local01
075d8     08 6A 86 F1 | 	sub	local01, #8
075dc     36 6F 0A F6 | 	mov	local03, local02 wz
075e0     10 00 90 5D |  if_ne	jmp	#LR__0405
075e4                 | LR__0404
075e4     18 14 06 F1 | 	add	ptr___system__dat__, #24
075e8     0A 2B 02 F6 | 	mov	result1, ptr___system__dat__
075ec     18 14 86 F1 | 	sub	ptr___system__dat__, #24
075f0     08 00 90 FD | 	jmp	#LR__0406
075f4                 | LR__0405
075f4     0C 6A 06 F1 | 	add	local01, #12
075f8     35 2B 02 F6 | 	mov	result1, local01
075fc                 | LR__0406
075fc     AF F0 03 F6 | 	mov	ptra, fp
07600     BF 00 A0 FD | 	call	#popregs_
07604                 | __system___getiolock_0145_ret
07604     2D 00 64 FD | 	ret
07608                 | 
07608                 | __system___closeraw
07608     06 5A 05 F6 | 	mov	COUNT_, #6
0760c     B0 00 A0 FD | 	call	#pushregs_
07610     2E 6B 02 F6 | 	mov	local01, arg01
07614     00 6C 06 F6 | 	mov	local02, #0
07618     08 6A 06 F1 | 	add	local01, #8
0761c     35 6F 0A FB | 	rdlong	local03, local01 wz
07620     08 6A 86 F1 | 	sub	local01, #8
07624     1C 00 90 5D |  if_ne	jmp	#LR__0407
07628     01 00 00 FF 
0762c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07630     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07634     01 00 00 FF 
07638     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0763c     01 2A 66 F6 | 	neg	result1, #1
07640     90 00 90 FD | 	jmp	#LR__0410
07644                 | LR__0407
07644     28 6A 06 F1 | 	add	local01, #40
07648     35 6F 0A FB | 	rdlong	local03, local01 wz
0764c     28 6A 86 F1 | 	sub	local01, #40
07650     2C 00 90 AD |  if_e	jmp	#LR__0408
07654     28 6A 06 F1 | 	add	local01, #40
07658     35 6F 02 FB | 	rdlong	local03, local01
0765c     28 6A 86 F1 | 	sub	local01, #40
07660     37 71 02 FB | 	rdlong	local04, local03
07664     04 6E 06 F1 | 	add	local03, #4
07668     37 73 02 FB | 	rdlong	local05, local03
0766c     35 5D 02 F6 | 	mov	arg01, local01
07670     07 75 02 F6 | 	mov	local06, objptr
07674     38 0F 02 F6 | 	mov	objptr, local04
07678     2D 72 62 FD | 	call	local05
0767c     3A 0F 02 F6 | 	mov	objptr, local06
07680                 | LR__0408
07680     20 6A 06 F1 | 	add	local01, #32
07684     35 6F 0A FB | 	rdlong	local03, local01 wz
07688     20 6A 86 F1 | 	sub	local01, #32
0768c     30 00 90 AD |  if_e	jmp	#LR__0409
07690     20 6A 06 F1 | 	add	local01, #32
07694     35 6F 02 FB | 	rdlong	local03, local01
07698     20 6A 86 F1 | 	sub	local01, #32
0769c     37 71 02 FB | 	rdlong	local04, local03
076a0     04 6E 06 F1 | 	add	local03, #4
076a4     37 73 02 FB | 	rdlong	local05, local03
076a8     35 5D 02 F6 | 	mov	arg01, local01
076ac     07 75 02 F6 | 	mov	local06, objptr
076b0     38 0F 02 F6 | 	mov	objptr, local04
076b4     2D 72 62 FD | 	call	local05
076b8     3A 0F 02 F6 | 	mov	objptr, local06
076bc     15 6D 02 F6 | 	mov	local02, result1
076c0                 | LR__0409
076c0     35 5D 02 F6 | 	mov	arg01, local01
076c4     00 5E 06 F6 | 	mov	arg02, #0
076c8     30 60 06 F6 | 	mov	arg03, #48
076cc     A0 00 A0 FD | 	call	#\builtin_bytefill_
076d0     36 2B 02 F6 | 	mov	result1, local02
076d4                 | LR__0410
076d4     AF F0 03 F6 | 	mov	ptra, fp
076d8     BF 00 A0 FD | 	call	#popregs_
076dc                 | __system___closeraw_ret
076dc     2D 00 64 FD | 	ret
076e0                 | 
076e0                 | __system____default_getc
076e0     0C 5A 05 F6 | 	mov	COUNT_, #12
076e4     B0 00 A0 FD | 	call	#pushregs_
076e8     2E 6B 02 F6 | 	mov	local01, arg01
076ec     35 6D 02 FB | 	rdlong	local02, local01
076f0     08 6C 06 F1 | 	add	local02, #8
076f4     36 6F 02 FB | 	rdlong	local03, local02
076f8     08 6C 86 F1 | 	sub	local02, #8
076fc     02 6E CE F7 | 	test	local03, #2 wz
07700     08 00 90 AD |  if_e	jmp	#LR__0411
07704     35 5D 02 F6 | 	mov	arg01, local01
07708     FC 01 B0 FD | 	call	#__system____default_flush
0770c                 | LR__0411
0770c     08 6C 06 F1 | 	add	local02, #8
07710     36 6F 02 FB | 	rdlong	local03, local02
07714     01 6E 46 F5 | 	or	local03, #1
07718     36 6F 62 FC | 	wrlong	local03, local02
0771c     08 6C 86 F1 | 	sub	local02, #8
07720     36 71 0A FB | 	rdlong	local04, local02 wz
07724     7C 00 90 5D |  if_ne	jmp	#LR__0413
07728     35 5D 02 F6 | 	mov	arg01, local01
0772c     2E 73 02 FB | 	rdlong	local05, arg01
07730     0C 72 06 F1 | 	add	local05, #12
07734     39 5F 02 F6 | 	mov	arg02, local05
07738     0C 72 86 F1 | 	sub	local05, #12
0773c     10 5C 06 F1 | 	add	arg01, #16
07740     2E 75 02 FB | 	rdlong	local06, arg01
07744     10 5C 86 F1 | 	sub	arg01, #16
07748     3A 77 02 FB | 	rdlong	local07, local06
0774c     04 74 06 F1 | 	add	local06, #4
07750     3A 79 02 FB | 	rdlong	local08, local06
07754     0A 60 C6 F9 | 	decod	arg03, #10
07758     07 7B 02 F6 | 	mov	local09, objptr
0775c     3B 0F 02 F6 | 	mov	objptr, local07
07760     2D 78 62 FD | 	call	local08
07764     3D 0F 02 F6 | 	mov	objptr, local09
07768     15 7D 02 F6 | 	mov	local10, result1
0776c     00 7C 5E F2 | 	cmps	local10, #0 wcz
07770     01 2A 66 C6 |  if_b	neg	result1, #1
07774     28 00 90 CD |  if_b	jmp	#LR__0412
07778     39 7D 62 FC | 	wrlong	local10, local05
0777c     0C 72 06 F1 | 	add	local05, #12
07780     39 7F 02 F6 | 	mov	local11, local05
07784     08 72 86 F1 | 	sub	local05, #8
07788     39 7F 62 FC | 	wrlong	local11, local05
0778c     04 72 06 F1 | 	add	local05, #4
07790     39 75 02 FB | 	rdlong	local06, local05
07794     01 74 46 F5 | 	or	local06, #1
07798     39 75 62 FC | 	wrlong	local06, local05
0779c     3E 2B 02 F6 | 	mov	result1, local10
077a0                 | LR__0412
077a0     15 71 02 F6 | 	mov	local04, result1
077a4                 | LR__0413
077a4     00 70 5E F2 | 	cmps	local04, #0 wcz
077a8     01 2A 66 E6 |  if_be	neg	result1, #1
077ac     1C 00 90 ED |  if_be	jmp	#LR__0414
077b0     01 70 86 F1 | 	sub	local04, #1
077b4     36 71 62 FC | 	wrlong	local04, local02
077b8     04 6C 06 F1 | 	add	local02, #4
077bc     36 81 02 FB | 	rdlong	local12, local02
077c0     40 2B C2 FA | 	rdbyte	result1, local12
077c4     01 80 06 F1 | 	add	local12, #1
077c8     36 81 62 FC | 	wrlong	local12, local02
077cc                 | LR__0414
077cc     AF F0 03 F6 | 	mov	ptra, fp
077d0     BF 00 A0 FD | 	call	#popregs_
077d4                 | __system____default_getc_ret
077d4     2D 00 64 FD | 	ret
077d8                 | 
077d8                 | __system____default_putc
077d8     06 5A 05 F6 | 	mov	COUNT_, #6
077dc     B0 00 A0 FD | 	call	#pushregs_
077e0     2E 6B 02 F6 | 	mov	local01, arg01
077e4     2F 6D 02 F6 | 	mov	local02, arg02
077e8     36 6F 02 FB | 	rdlong	local03, local02
077ec     08 6E 06 F1 | 	add	local03, #8
077f0     37 71 02 FB | 	rdlong	local04, local03
077f4     08 6E 86 F1 | 	sub	local03, #8
077f8     01 70 CE F7 | 	test	local04, #1 wz
077fc     08 00 90 AD |  if_e	jmp	#LR__0415
07800     36 5D 02 F6 | 	mov	arg01, local02
07804     00 01 B0 FD | 	call	#__system____default_flush
07808                 | LR__0415
07808     08 6E 06 F1 | 	add	local03, #8
0780c     37 71 02 FB | 	rdlong	local04, local03
07810     02 70 46 F5 | 	or	local04, #2
07814     37 71 62 FC | 	wrlong	local04, local03
07818     08 6E 86 F1 | 	sub	local03, #8
0781c     37 73 02 FB | 	rdlong	local05, local03
07820     39 75 02 F6 | 	mov	local06, local05
07824     0C 6E 06 F1 | 	add	local03, #12
07828     37 75 02 F1 | 	add	local06, local03
0782c     3A 6B 42 FC | 	wrbyte	local01, local06
07830     FF 6A 06 F5 | 	and	local01, #255
07834     01 72 06 F1 | 	add	local05, #1
07838     0C 6E 86 F1 | 	sub	local03, #12
0783c     37 73 62 FC | 	wrlong	local05, local03
07840     02 00 00 FF 
07844     00 72 0E F2 | 	cmp	local05, ##1024 wz
07848     10 00 90 5D |  if_ne	jmp	#LR__0416
0784c     36 5D 02 F6 | 	mov	arg01, local02
07850     B4 00 B0 FD | 	call	#__system____default_flush
07854     00 2A 0E F2 | 	cmp	result1, #0 wz
07858     01 6A 66 56 |  if_ne	neg	local01, #1
0785c                 | LR__0416
0785c     35 2B 02 F6 | 	mov	result1, local01
07860     AF F0 03 F6 | 	mov	ptra, fp
07864     BF 00 A0 FD | 	call	#popregs_
07868                 | __system____default_putc_ret
07868     2D 00 64 FD | 	ret
0786c                 | 
0786c                 | __system____default_putc_terminal
0786c     06 5A 05 F6 | 	mov	COUNT_, #6
07870     B0 00 A0 FD | 	call	#pushregs_
07874     2E 6B 02 F6 | 	mov	local01, arg01
07878     2F 6D 02 F6 | 	mov	local02, arg02
0787c     36 6F 02 FB | 	rdlong	local03, local02
07880     08 6E 06 F1 | 	add	local03, #8
07884     37 71 02 FB | 	rdlong	local04, local03
07888     08 6E 86 F1 | 	sub	local03, #8
0788c     01 70 CE F7 | 	test	local04, #1 wz
07890     08 00 90 AD |  if_e	jmp	#LR__0417
07894     36 5D 02 F6 | 	mov	arg01, local02
07898     6C 00 B0 FD | 	call	#__system____default_flush
0789c                 | LR__0417
0789c     08 6E 06 F1 | 	add	local03, #8
078a0     37 71 02 FB | 	rdlong	local04, local03
078a4     02 70 46 F5 | 	or	local04, #2
078a8     37 71 62 FC | 	wrlong	local04, local03
078ac     08 6E 86 F1 | 	sub	local03, #8
078b0     37 73 02 FB | 	rdlong	local05, local03
078b4     39 75 02 F6 | 	mov	local06, local05
078b8     0C 6E 06 F1 | 	add	local03, #12
078bc     37 75 02 F1 | 	add	local06, local03
078c0     3A 6B 42 FC | 	wrbyte	local01, local06
078c4     FF 6A 06 F5 | 	and	local01, #255
078c8     0C 6E 86 F1 | 	sub	local03, #12
078cc     01 72 06 F1 | 	add	local05, #1
078d0     37 73 62 FC | 	wrlong	local05, local03
078d4     0A 6A 0E F2 | 	cmp	local01, #10 wz
078d8     0C 00 90 AD |  if_e	jmp	#LR__0418
078dc     02 00 00 FF 
078e0     00 72 0E F2 | 	cmp	local05, ##1024 wz
078e4     10 00 90 5D |  if_ne	jmp	#LR__0419
078e8                 | LR__0418
078e8     36 5D 02 F6 | 	mov	arg01, local02
078ec     18 00 B0 FD | 	call	#__system____default_flush
078f0     00 2A 0E F2 | 	cmp	result1, #0 wz
078f4     01 6A 66 56 |  if_ne	neg	local01, #1
078f8                 | LR__0419
078f8     35 2B 02 F6 | 	mov	result1, local01
078fc     AF F0 03 F6 | 	mov	ptra, fp
07900     BF 00 A0 FD | 	call	#popregs_
07904                 | __system____default_putc_terminal_ret
07904     2D 00 64 FD | 	ret
07908                 | 
07908                 | __system____default_flush
07908     0F 5A 05 F6 | 	mov	COUNT_, #15
0790c     B0 00 A0 FD | 	call	#pushregs_
07910     2E 6B 02 F6 | 	mov	local01, arg01
07914     35 6D 02 FB | 	rdlong	local02, local01
07918     36 6F 02 FB | 	rdlong	local03, local02
0791c     08 6C 06 F1 | 	add	local02, #8
07920     36 71 02 FB | 	rdlong	local04, local02
07924     08 6C 86 F1 | 	sub	local02, #8
07928     02 70 CE F7 | 	test	local04, #2 wz
0792c     B8 00 90 AD |  if_e	jmp	#LR__0422
07930     00 6E 5E F2 | 	cmps	local03, #0 wcz
07934     30 01 90 ED |  if_be	jmp	#LR__0424
07938     08 6A 06 F1 | 	add	local01, #8
0793c     35 71 02 FB | 	rdlong	local04, local01
07940     08 6A 86 F1 | 	sub	local01, #8
07944     40 70 CE F7 | 	test	local04, #64 wz
07948     5C 00 90 AD |  if_e	jmp	#LR__0421
0794c     08 6A 06 F1 | 	add	local01, #8
07950     35 71 02 FB | 	rdlong	local04, local01
07954     08 6A 86 F1 | 	sub	local01, #8
07958     80 70 CE F7 | 	test	local04, #128 wz
0795c     48 00 90 AD |  if_e	jmp	#LR__0420
07960     2C 6A 06 F1 | 	add	local01, #44
07964     35 71 02 FB | 	rdlong	local04, local01
07968     2C 6A 86 F1 | 	sub	local01, #44
0796c     38 73 02 FB | 	rdlong	local05, local04
07970     04 70 06 F1 | 	add	local04, #4
07974     38 75 02 FB | 	rdlong	local06, local04
07978     35 5D 02 F6 | 	mov	arg01, local01
0797c     00 5E 06 F6 | 	mov	arg02, #0
07980     02 60 06 F6 | 	mov	arg03, #2
07984     07 77 02 F6 | 	mov	local07, objptr
07988     39 0F 02 F6 | 	mov	objptr, local05
0798c     2D 74 62 FD | 	call	local06
07990     3B 0F 02 F6 | 	mov	objptr, local07
07994     08 6A 06 F1 | 	add	local01, #8
07998     35 71 02 FB | 	rdlong	local04, local01
0799c     80 70 26 F5 | 	andn	local04, #128
079a0     35 71 62 FC | 	wrlong	local04, local01
079a4     08 6A 86 F1 | 	sub	local01, #8
079a8                 | LR__0420
079a8                 | LR__0421
079a8     0C 6C 06 F1 | 	add	local02, #12
079ac     36 5F 02 F6 | 	mov	arg02, local02
079b0     0C 6C 86 F1 | 	sub	local02, #12
079b4     14 6A 06 F1 | 	add	local01, #20
079b8     35 71 02 FB | 	rdlong	local04, local01
079bc     14 6A 86 F1 | 	sub	local01, #20
079c0     38 73 02 FB | 	rdlong	local05, local04
079c4     04 70 06 F1 | 	add	local04, #4
079c8     38 75 02 FB | 	rdlong	local06, local04
079cc     35 5D 02 F6 | 	mov	arg01, local01
079d0     37 61 02 F6 | 	mov	arg03, local03
079d4     07 77 02 F6 | 	mov	local07, objptr
079d8     39 0F 02 F6 | 	mov	objptr, local05
079dc     2D 74 62 FD | 	call	local06
079e0     3B 0F 02 F6 | 	mov	objptr, local07
079e4     80 00 90 FD | 	jmp	#LR__0424
079e8                 | LR__0422
079e8     08 6C 06 F1 | 	add	local02, #8
079ec     36 71 02 FB | 	rdlong	local04, local02
079f0     08 6C 86 F1 | 	sub	local02, #8
079f4     01 70 CE F7 | 	test	local04, #1 wz
079f8     6C 00 90 AD |  if_e	jmp	#LR__0423
079fc     00 6E 0E F2 | 	cmp	local03, #0 wz
07a00     64 00 90 AD |  if_e	jmp	#LR__0423
07a04     2C 6A 06 F1 | 	add	local01, #44
07a08     35 79 02 FB | 	rdlong	local08, local01
07a0c     2C 6A 86 F1 | 	sub	local01, #44
07a10     3C 71 02 F6 | 	mov	local04, local08
07a14     38 73 02 FB | 	rdlong	local05, local04
07a18     04 70 06 F1 | 	add	local04, #4
07a1c     38 7B 02 FB | 	rdlong	local09, local04
07a20     04 70 86 F1 | 	sub	local04, #4
07a24     3D 75 02 F6 | 	mov	local06, local09
07a28     35 7D 02 F6 | 	mov	local10, local01
07a2c     37 7F 02 F6 | 	mov	local11, local03
07a30     3F 7F 62 F6 | 	neg	local11, local11
07a34     3F 81 02 F6 | 	mov	local12, local11
07a38     01 76 06 F6 | 	mov	local07, #1
07a3c     3E 5D 02 F6 | 	mov	arg01, local10
07a40     40 5F 02 F6 | 	mov	arg02, local12
07a44     01 60 06 F6 | 	mov	arg03, #1
07a48     07 83 02 F6 | 	mov	local13, objptr
07a4c     39 0F 02 F6 | 	mov	objptr, local05
07a50     2D 74 62 FD | 	call	local06
07a54     41 0F 02 F6 | 	mov	objptr, local13
07a58     15 85 02 F6 | 	mov	local14, result1
07a5c     42 87 02 F6 | 	mov	local15, local14
07a60     00 86 5E F2 | 	cmps	local15, #0 wcz
07a64     37 87 02 36 |  if_ae	mov	local15, local03
07a68                 | LR__0423
07a68                 | LR__0424
07a68     36 01 68 FC | 	wrlong	#0, local02
07a6c     04 6C 06 F1 | 	add	local02, #4
07a70     36 01 68 FC | 	wrlong	#0, local02
07a74     04 6C 06 F1 | 	add	local02, #4
07a78     36 01 68 FC | 	wrlong	#0, local02
07a7c     00 2A 06 F6 | 	mov	result1, #0
07a80     AF F0 03 F6 | 	mov	ptra, fp
07a84     BF 00 A0 FD | 	call	#popregs_
07a88                 | __system____default_flush_ret
07a88     2D 00 64 FD | 	ret
07a8c                 | 
07a8c                 | __system___rxtxioctl_0174
07a8c     02 5A 05 F6 | 	mov	COUNT_, #2
07a90     B0 00 A0 FD | 	call	#pushregs_
07a94     2F 6B 02 F6 | 	mov	local01, arg02
07a98     30 6D 02 F6 | 	mov	local02, arg03
07a9c     00 6B 0E F2 | 	cmp	local01, #256 wz
07aa0     0C 00 90 AD |  if_e	jmp	#LR__0425
07aa4     01 6B 0E F2 | 	cmp	local01, #257 wz
07aa8     1C 00 90 AD |  if_e	jmp	#LR__0426
07aac     30 00 90 FD | 	jmp	#LR__0427
07ab0                 | LR__0425
07ab0     08 14 06 F1 | 	add	ptr___system__dat__, #8
07ab4     0A 2B 02 FB | 	rdlong	result1, ptr___system__dat__
07ab8     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07abc     36 2B 62 FC | 	wrlong	result1, local02
07ac0     00 2A 06 F6 | 	mov	result1, #0
07ac4     30 00 90 FD | 	jmp	#LR__0428
07ac8                 | LR__0426
07ac8     36 5D 02 FB | 	rdlong	arg01, local02
07acc     08 14 06 F1 | 	add	ptr___system__dat__, #8
07ad0     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07ad4     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07ad8     00 2A 06 F6 | 	mov	result1, #0
07adc     18 00 90 FD | 	jmp	#LR__0428
07ae0                 | LR__0427
07ae0     01 00 00 FF 
07ae4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07ae8     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
07aec     01 00 00 FF 
07af0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07af4     01 2A 66 F6 | 	neg	result1, #1
07af8                 | LR__0428
07af8     AF F0 03 F6 | 	mov	ptra, fp
07afc     BF 00 A0 FD | 	call	#popregs_
07b00                 | __system___rxtxioctl_0174_ret
07b00     2D 00 64 FD | 	ret
07b04                 | 
07b04                 | __system____dummy_flush_0175
07b04     00 2A 06 F6 | 	mov	result1, #0
07b08                 | __system____dummy_flush_0175_ret
07b08     2D 00 64 FD | 	ret
07b0c                 | 
07b0c                 | __system___vfswrite
07b0c     0B 5A 05 F6 | 	mov	COUNT_, #11
07b10     B0 00 A0 FD | 	call	#pushregs_
07b14     2E 6B 02 F6 | 	mov	local01, arg01
07b18     2F 6D 02 F6 | 	mov	local02, arg02
07b1c     30 6F 02 F6 | 	mov	local03, arg03
07b20     36 71 02 F6 | 	mov	local04, local02
07b24     08 6A 06 F1 | 	add	local01, #8
07b28     35 73 02 FB | 	rdlong	local05, local01
07b2c     08 6A 86 F1 | 	sub	local01, #8
07b30     02 72 CE F7 | 	test	local05, #2 wz
07b34     1C 00 90 5D |  if_ne	jmp	#LR__0429
07b38     01 00 00 FF 
07b3c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07b40     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07b44     01 00 00 FF 
07b48     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07b4c     01 2A 66 F6 | 	neg	result1, #1
07b50     70 01 90 FD | 	jmp	#LR__0437
07b54                 | LR__0429
07b54     08 6A 06 F1 | 	add	local01, #8
07b58     35 73 02 FB | 	rdlong	local05, local01
07b5c     08 6A 86 F1 | 	sub	local01, #8
07b60     40 72 CE F7 | 	test	local05, #64 wz
07b64     5C 00 90 AD |  if_e	jmp	#LR__0431
07b68     08 6A 06 F1 | 	add	local01, #8
07b6c     35 73 02 FB | 	rdlong	local05, local01
07b70     08 6A 86 F1 | 	sub	local01, #8
07b74     80 72 CE F7 | 	test	local05, #128 wz
07b78     48 00 90 AD |  if_e	jmp	#LR__0430
07b7c     2C 6A 06 F1 | 	add	local01, #44
07b80     35 73 02 FB | 	rdlong	local05, local01
07b84     2C 6A 86 F1 | 	sub	local01, #44
07b88     39 75 02 FB | 	rdlong	local06, local05
07b8c     04 72 06 F1 | 	add	local05, #4
07b90     39 77 02 FB | 	rdlong	local07, local05
07b94     35 5D 02 F6 | 	mov	arg01, local01
07b98     00 5E 06 F6 | 	mov	arg02, #0
07b9c     02 60 06 F6 | 	mov	arg03, #2
07ba0     07 79 02 F6 | 	mov	local08, objptr
07ba4     3A 0F 02 F6 | 	mov	objptr, local06
07ba8     2D 76 62 FD | 	call	local07
07bac     3C 0F 02 F6 | 	mov	objptr, local08
07bb0     08 6A 06 F1 | 	add	local01, #8
07bb4     35 73 02 FB | 	rdlong	local05, local01
07bb8     80 72 26 F5 | 	andn	local05, #128
07bbc     35 73 62 FC | 	wrlong	local05, local01
07bc0     08 6A 86 F1 | 	sub	local01, #8
07bc4                 | LR__0430
07bc4                 | LR__0431
07bc4     14 6A 06 F1 | 	add	local01, #20
07bc8     35 73 0A FB | 	rdlong	local05, local01 wz
07bcc     14 6A 86 F1 | 	sub	local01, #20
07bd0     7C 00 90 AD |  if_e	jmp	#LR__0433
07bd4     14 6A 06 F1 | 	add	local01, #20
07bd8     35 73 02 FB | 	rdlong	local05, local01
07bdc     14 6A 86 F1 | 	sub	local01, #20
07be0     39 75 02 FB | 	rdlong	local06, local05
07be4     04 72 06 F1 | 	add	local05, #4
07be8     39 77 02 FB | 	rdlong	local07, local05
07bec     36 5F 02 F6 | 	mov	arg02, local02
07bf0     37 61 02 F6 | 	mov	arg03, local03
07bf4     35 5D 02 F6 | 	mov	arg01, local01
07bf8     07 79 02 F6 | 	mov	local08, objptr
07bfc     3A 0F 02 F6 | 	mov	objptr, local06
07c00     2D 76 62 FD | 	call	local07
07c04     3C 0F 02 F6 | 	mov	objptr, local08
07c08     15 7B 02 F6 | 	mov	local09, result1
07c0c     00 7A 5E F2 | 	cmps	local09, #0 wcz
07c10     34 00 90 3D |  if_ae	jmp	#LR__0432
07c14     08 6A 06 F1 | 	add	local01, #8
07c18     35 73 02 FB | 	rdlong	local05, local01
07c1c     20 72 46 F5 | 	or	local05, #32
07c20     35 73 62 FC | 	wrlong	local05, local01
07c24     01 00 00 FF 
07c28     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07c2c     0A 7B 62 FC | 	wrlong	local09, ptr___system__dat__
07c30     01 00 00 FF 
07c34     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07c38     00 7A 0E F2 | 	cmp	local09, #0 wz
07c3c     01 2A 66 56 |  if_ne	neg	result1, #1
07c40     00 2A 06 A6 |  if_e	mov	result1, #0
07c44     7C 00 90 FD | 	jmp	#LR__0437
07c48                 | LR__0432
07c48     3D 2B 02 F6 | 	mov	result1, local09
07c4c     74 00 90 FD | 	jmp	#LR__0437
07c50                 | LR__0433
07c50     18 6A 06 F1 | 	add	local01, #24
07c54     35 7D 0A FB | 	rdlong	local10, local01 wz
07c58     18 6A 86 F1 | 	sub	local01, #24
07c5c     1C 00 90 5D |  if_ne	jmp	#LR__0434
07c60     01 00 00 FF 
07c64     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07c68     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07c6c     01 00 00 FF 
07c70     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07c74     01 2A 66 F6 | 	neg	result1, #1
07c78     48 00 90 FD | 	jmp	#LR__0437
07c7c                 | LR__0434
07c7c     00 7A 06 F6 | 	mov	local09, #0
07c80                 | LR__0435
07c80     00 6E 1E F2 | 	cmp	local03, #0 wcz
07c84     38 00 90 ED |  if_be	jmp	#LR__0436
07c88     3E 73 02 F6 | 	mov	local05, local10
07c8c     39 75 02 FB | 	rdlong	local06, local05
07c90     04 72 06 F1 | 	add	local05, #4
07c94     39 77 02 FB | 	rdlong	local07, local05
07c98     38 5D C2 FA | 	rdbyte	arg01, local04
07c9c     35 5F 02 F6 | 	mov	arg02, local01
07ca0     07 7F 02 F6 | 	mov	local11, objptr
07ca4     3A 0F 02 F6 | 	mov	objptr, local06
07ca8     01 70 06 F1 | 	add	local04, #1
07cac     2D 76 62 FD | 	call	local07
07cb0     3F 0F 02 F6 | 	mov	objptr, local11
07cb4     15 7B 02 F1 | 	add	local09, result1
07cb8     01 6E 86 F1 | 	sub	local03, #1
07cbc     C0 FF 9F FD | 	jmp	#LR__0435
07cc0                 | LR__0436
07cc0     3D 2B 02 F6 | 	mov	result1, local09
07cc4                 | LR__0437
07cc4     AF F0 03 F6 | 	mov	ptra, fp
07cc8     BF 00 A0 FD | 	call	#popregs_
07ccc                 | __system___vfswrite_ret
07ccc     2D 00 64 FD | 	ret
07cd0                 | 
07cd0                 | __system___vfsread
07cd0     0F 5A 05 F6 | 	mov	COUNT_, #15
07cd4     B0 00 A0 FD | 	call	#pushregs_
07cd8     2C F0 07 F1 | 	add	ptra, #44
07cdc     04 5E 05 F1 | 	add	fp, #4
07ce0     AF 5C 62 FC | 	wrlong	arg01, fp
07ce4     04 5E 05 F1 | 	add	fp, #4
07ce8     AF 5E 62 FC | 	wrlong	arg02, fp
07cec     04 5E 05 F1 | 	add	fp, #4
07cf0     AF 60 62 FC | 	wrlong	arg03, fp
07cf4     04 5E 85 F1 | 	sub	fp, #4
07cf8     AF 6A 02 FB | 	rdlong	local01, fp
07cfc     14 5E 05 F1 | 	add	fp, #20
07d00     AF 6A 62 FC | 	wrlong	local01, fp
07d04     04 5E 05 F1 | 	add	fp, #4
07d08     AF 00 68 FC | 	wrlong	#0, fp
07d0c     1C 5E 85 F1 | 	sub	fp, #28
07d10     AF 6C 02 FB | 	rdlong	local02, fp
07d14     04 5E 85 F1 | 	sub	fp, #4
07d18     08 6C 06 F1 | 	add	local02, #8
07d1c     36 6B 02 FB | 	rdlong	local01, local02
07d20     01 6A CE F7 | 	test	local01, #1 wz
07d24     1C 00 90 5D |  if_ne	jmp	#LR__0438
07d28     01 00 00 FF 
07d2c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07d30     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07d34     01 00 00 FF 
07d38     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07d3c     01 2A 66 F6 | 	neg	result1, #1
07d40     9C 02 90 FD | 	jmp	#LR__0446
07d44                 | LR__0438
07d44     04 5E 05 F1 | 	add	fp, #4
07d48     AF 6A 02 FB | 	rdlong	local01, fp
07d4c     04 5E 85 F1 | 	sub	fp, #4
07d50     10 6A 06 F1 | 	add	local01, #16
07d54     35 6F 0A FB | 	rdlong	local03, local01 wz
07d58     B4 00 90 AD |  if_e	jmp	#LR__0440
07d5c     04 5E 05 F1 | 	add	fp, #4
07d60     AF 70 02 FB | 	rdlong	local04, fp
07d64     10 70 06 F1 | 	add	local04, #16
07d68     38 6B 02 FB | 	rdlong	local01, local04
07d6c     35 6D 02 FB | 	rdlong	local02, local01
07d70     04 6A 06 F1 | 	add	local01, #4
07d74     35 6F 02 FB | 	rdlong	local03, local01
07d78     AF 5C 02 FB | 	rdlong	arg01, fp
07d7c     04 5E 05 F1 | 	add	fp, #4
07d80     AF 5E 02 FB | 	rdlong	arg02, fp
07d84     04 5E 05 F1 | 	add	fp, #4
07d88     AF 60 02 FB | 	rdlong	arg03, fp
07d8c     0C 5E 85 F1 | 	sub	fp, #12
07d90     07 73 02 F6 | 	mov	local05, objptr
07d94     36 0F 02 F6 | 	mov	objptr, local02
07d98     2D 6E 62 FD | 	call	local03
07d9c     39 0F 02 F6 | 	mov	objptr, local05
07da0     10 5E 05 F1 | 	add	fp, #16
07da4     AF 2A 62 FC | 	wrlong	result1, fp
07da8     10 5E 85 F1 | 	sub	fp, #16
07dac     00 2A 5E F2 | 	cmps	result1, #0 wcz
07db0     4C 00 90 3D |  if_ae	jmp	#LR__0439
07db4     04 5E 05 F1 | 	add	fp, #4
07db8     AF 6A 02 FB | 	rdlong	local01, fp
07dbc     35 71 02 F6 | 	mov	local04, local01
07dc0     08 70 06 F1 | 	add	local04, #8
07dc4     38 6F 02 FB | 	rdlong	local03, local04
07dc8     20 6E 46 F5 | 	or	local03, #32
07dcc     08 6A 06 F1 | 	add	local01, #8
07dd0     35 6F 62 FC | 	wrlong	local03, local01
07dd4     0C 5E 05 F1 | 	add	fp, #12
07dd8     AF 5C 0A FB | 	rdlong	arg01, fp wz
07ddc     10 5E 85 F1 | 	sub	fp, #16
07de0     01 00 00 FF 
07de4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07de8     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07dec     01 00 00 FF 
07df0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07df4     01 2A 66 56 |  if_ne	neg	result1, #1
07df8     00 2A 06 A6 |  if_e	mov	result1, #0
07dfc     E0 01 90 FD | 	jmp	#LR__0446
07e00                 | LR__0439
07e00     10 5E 05 F1 | 	add	fp, #16
07e04     AF 2A 02 FB | 	rdlong	result1, fp
07e08     10 5E 85 F1 | 	sub	fp, #16
07e0c     D0 01 90 FD | 	jmp	#LR__0446
07e10                 | LR__0440
07e10     04 5E 05 F1 | 	add	fp, #4
07e14     AF 6A 02 FB | 	rdlong	local01, fp
07e18     1C 6A 06 F1 | 	add	local01, #28
07e1c     35 6F 02 FB | 	rdlong	local03, local01
07e20     14 5E 05 F1 | 	add	fp, #20
07e24     AF 6E 62 FC | 	wrlong	local03, fp
07e28     AF 6A 0A FB | 	rdlong	local01, fp wz
07e2c     18 5E 85 F1 | 	sub	fp, #24
07e30     1C 00 90 5D |  if_ne	jmp	#LR__0441
07e34     01 00 00 FF 
07e38     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07e3c     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07e40     01 00 00 FF 
07e44     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07e48     01 2A 66 F6 | 	neg	result1, #1
07e4c     90 01 90 FD | 	jmp	#LR__0446
07e50                 | LR__0441
07e50     04 5E 05 F1 | 	add	fp, #4
07e54     AF 6A 02 FB | 	rdlong	local01, fp
07e58     04 5E 85 F1 | 	sub	fp, #4
07e5c     24 6A 06 F1 | 	add	local01, #36
07e60     35 6F 0A FB | 	rdlong	local03, local01 wz
07e64     A0 00 90 AD |  if_e	jmp	#LR__0443
07e68     24 5E 05 F1 | 	add	fp, #36
07e6c     AF 74 02 F6 | 	mov	local06, fp
07e70     20 5E 85 F1 | 	sub	fp, #32
07e74     AF 76 02 FB | 	rdlong	local07, fp
07e78     3B 71 02 F6 | 	mov	local04, local07
07e7c     24 70 06 F1 | 	add	local04, #36
07e80     38 79 02 FB | 	rdlong	local08, local04
07e84     3C 6B 02 F6 | 	mov	local01, local08
07e88     35 6D 02 FB | 	rdlong	local02, local01
07e8c     04 6A 06 F1 | 	add	local01, #4
07e90     35 7B 02 FB | 	rdlong	local09, local01
07e94     3D 6F 02 F6 | 	mov	local03, local09
07e98     3B 7D 02 F6 | 	mov	local10, local07
07e9c     04 5E 85 F1 | 	sub	fp, #4
07ea0     3E 7F 02 F6 | 	mov	local11, local10
07ea4     00 81 06 F6 | 	mov	local12, #256
07ea8     3A 83 02 F6 | 	mov	local13, local06
07eac     3F 5D 02 F6 | 	mov	arg01, local11
07eb0     00 5F 06 F6 | 	mov	arg02, #256
07eb4     41 61 02 F6 | 	mov	arg03, local13
07eb8     07 85 02 F6 | 	mov	local14, objptr
07ebc     36 0F 02 F6 | 	mov	objptr, local02
07ec0     2D 6E 62 FD | 	call	local03
07ec4     42 0F 02 F6 | 	mov	objptr, local14
07ec8     15 87 02 F6 | 	mov	local15, result1
07ecc     10 5E 05 F1 | 	add	fp, #16
07ed0     AF 86 62 FC | 	wrlong	local15, fp
07ed4     AF 6C 0A FB | 	rdlong	local02, fp wz
07ed8     10 5E 85 F1 | 	sub	fp, #16
07edc     28 00 90 5D |  if_ne	jmp	#LR__0442
07ee0     24 5E 05 F1 | 	add	fp, #36
07ee4     AF 70 02 FB | 	rdlong	local04, fp
07ee8     24 5E 85 F1 | 	sub	fp, #36
07eec     38 6F 02 F6 | 	mov	local03, local04
07ef0     02 6E 0E F5 | 	and	local03, #2 wz
07ef4     10 00 90 AD |  if_e	jmp	#LR__0442
07ef8     01 6A 06 F6 | 	mov	local01, #1
07efc     20 5E 05 F1 | 	add	fp, #32
07f00     AF 02 68 FC | 	wrlong	#1, fp
07f04     20 5E 85 F1 | 	sub	fp, #32
07f08                 | LR__0442
07f08                 | LR__0443
07f08     10 5E 05 F1 | 	add	fp, #16
07f0c     AF 00 68 FC | 	wrlong	#0, fp
07f10     10 5E 85 F1 | 	sub	fp, #16
07f14                 | LR__0444
07f14     0C 5E 05 F1 | 	add	fp, #12
07f18     AF 6A 02 FB | 	rdlong	local01, fp
07f1c     0C 5E 85 F1 | 	sub	fp, #12
07f20     00 6A 1E F2 | 	cmp	local01, #0 wcz
07f24     AC 00 90 ED |  if_be	jmp	#LR__0445
07f28     18 5E 05 F1 | 	add	fp, #24
07f2c     AF 6A 02 FB | 	rdlong	local01, fp
07f30     35 6D 02 FB | 	rdlong	local02, local01
07f34     04 6A 06 F1 | 	add	local01, #4
07f38     35 6F 02 FB | 	rdlong	local03, local01
07f3c     14 5E 85 F1 | 	sub	fp, #20
07f40     AF 5C 02 FB | 	rdlong	arg01, fp
07f44     04 5E 85 F1 | 	sub	fp, #4
07f48     07 7F 02 F6 | 	mov	local11, objptr
07f4c     36 0F 02 F6 | 	mov	objptr, local02
07f50     2D 6E 62 FD | 	call	local03
07f54     3F 0F 02 F6 | 	mov	objptr, local11
07f58     15 7D 02 F6 | 	mov	local10, result1
07f5c     14 5E 05 F1 | 	add	fp, #20
07f60     AF 7C 62 FC | 	wrlong	local10, fp
07f64     14 5E 85 F1 | 	sub	fp, #20
07f68     00 7C 5E F2 | 	cmps	local10, #0 wcz
07f6c     64 00 90 CD |  if_b	jmp	#LR__0445
07f70     1C 5E 05 F1 | 	add	fp, #28
07f74     AF 6A 02 FB | 	rdlong	local01, fp
07f78     35 6F 02 F6 | 	mov	local03, local01
07f7c     01 6E 06 F1 | 	add	local03, #1
07f80     AF 6E 62 FC | 	wrlong	local03, fp
07f84     08 5E 85 F1 | 	sub	fp, #8
07f88     AF 76 02 FB | 	rdlong	local07, fp
07f8c     35 77 42 FC | 	wrbyte	local07, local01
07f90     04 5E 85 F1 | 	sub	fp, #4
07f94     AF 6A 02 FB | 	rdlong	local01, fp
07f98     01 6A 06 F1 | 	add	local01, #1
07f9c     AF 6A 62 FC | 	wrlong	local01, fp
07fa0     04 5E 85 F1 | 	sub	fp, #4
07fa4     AF 6A 02 FB | 	rdlong	local01, fp
07fa8     01 6A 86 F1 | 	sub	local01, #1
07fac     AF 6A 62 FC | 	wrlong	local01, fp
07fb0     14 5E 05 F1 | 	add	fp, #20
07fb4     AF 6A 0A FB | 	rdlong	local01, fp wz
07fb8     20 5E 85 F1 | 	sub	fp, #32
07fbc     54 FF 9F AD |  if_e	jmp	#LR__0444
07fc0     14 5E 05 F1 | 	add	fp, #20
07fc4     AF 6E 02 FB | 	rdlong	local03, fp
07fc8     14 5E 85 F1 | 	sub	fp, #20
07fcc     0A 6E 0E F2 | 	cmp	local03, #10 wz
07fd0     40 FF 9F 5D |  if_ne	jmp	#LR__0444
07fd4                 | LR__0445
07fd4     10 5E 05 F1 | 	add	fp, #16
07fd8     AF 2A 02 FB | 	rdlong	result1, fp
07fdc     10 5E 85 F1 | 	sub	fp, #16
07fe0                 | LR__0446
07fe0     AF F0 03 F6 | 	mov	ptra, fp
07fe4     BF 00 A0 FD | 	call	#popregs_
07fe8                 | __system___vfsread_ret
07fe8     2D 00 64 FD | 	ret
07fec                 | 
07fec                 | ' 	
07fec                 | ' 	FUNCTION pfunc(c as integer) as integer
07fec                 | ___strs_cl_pfunc
07fec                 | ' 		if (i < 16) then
07fec     04 0E 06 F1 | 	add	objptr, #4
07ff0     07 31 02 FB | 	rdlong	_var01, objptr
07ff4     04 0E 86 F1 | 	sub	objptr, #4
07ff8     10 30 5E F2 | 	cmps	_var01, #16 wcz
07ffc     2C 00 90 3D |  if_ae	jmp	#LR__0447
08000     07 33 02 FB | 	rdlong	_var02, objptr
08004     04 0E 06 F1 | 	add	objptr, #4
08008     07 35 02 FB | 	rdlong	_var03, objptr
0800c     19 35 02 F1 | 	add	_var03, _var02
08010     1A 5D 42 FC | 	wrbyte	arg01, _var03
08014     07 31 02 FB | 	rdlong	_var01, objptr
08018     01 30 06 F1 | 	add	_var01, #1
0801c     07 31 62 FC | 	wrlong	_var01, objptr
08020     04 0E 86 F1 | 	sub	objptr, #4
08024                 | ' 			p(i) = c
08024                 | ' 			i = i+1
08024                 | ' 			return 1
08024     01 2A 06 F6 | 	mov	result1, #1
08028     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
0802c                 | LR__0447
0802c                 | ' 			return -1
0802c     01 2A 66 F6 | 	neg	result1, #1
08030                 | ___strs_cl_pfunc_ret
08030     2D 00 64 FD | 	ret
08034                 | 
08034                 | __struct__s_vfs_file_t_putchar
08034     04 5A 05 F6 | 	mov	COUNT_, #4
08038     B0 00 A0 FD | 	call	#pushregs_
0803c     18 0E 06 F1 | 	add	objptr, #24
08040     07 6B 0A FB | 	rdlong	local01, objptr wz
08044     18 0E 86 F1 | 	sub	objptr, #24
08048     00 2A 06 A6 |  if_e	mov	result1, #0
0804c     3C 00 90 AD |  if_e	jmp	#LR__0448
08050     18 0E 06 F1 | 	add	objptr, #24
08054     07 6B 02 FB | 	rdlong	local01, objptr
08058     18 0E 86 F1 | 	sub	objptr, #24
0805c     35 6D 02 FB | 	rdlong	local02, local01
08060     04 6A 06 F1 | 	add	local01, #4
08064     35 6F 02 FB | 	rdlong	local03, local01
08068     07 5F 02 F6 | 	mov	arg02, objptr
0806c     07 71 02 F6 | 	mov	local04, objptr
08070     36 0F 02 F6 | 	mov	objptr, local02
08074     2D 6E 62 FD | 	call	local03
08078     38 0F 02 F6 | 	mov	objptr, local04
0807c     00 2A 5E F2 | 	cmps	result1, #0 wcz
08080     00 6A 06 C6 |  if_b	mov	local01, #0
08084     01 6A 06 36 |  if_ae	mov	local01, #1
08088     35 2B 02 F6 | 	mov	result1, local01
0808c                 | LR__0448
0808c     AF F0 03 F6 | 	mov	ptra, fp
08090     BF 00 A0 FD | 	call	#popregs_
08094                 | __struct__s_vfs_file_t_putchar_ret
08094     2D 00 64 FD | 	ret
08098                 | 
08098                 | __struct__s_vfs_file_t_getchar
08098     04 5A 05 F6 | 	mov	COUNT_, #4
0809c     B0 00 A0 FD | 	call	#pushregs_
080a0     1C 0E 06 F1 | 	add	objptr, #28
080a4     07 6B 0A FB | 	rdlong	local01, objptr wz
080a8     1C 0E 86 F1 | 	sub	objptr, #28
080ac     01 2A 66 A6 |  if_e	neg	result1, #1
080b0     2C 00 90 AD |  if_e	jmp	#LR__0449
080b4                 | '         return getcf(__this);
080b4     1C 0E 06 F1 | 	add	objptr, #28
080b8     07 6B 02 FB | 	rdlong	local01, objptr
080bc     1C 0E 86 F1 | 	sub	objptr, #28
080c0     35 6D 02 FB | 	rdlong	local02, local01
080c4     04 6A 06 F1 | 	add	local01, #4
080c8     35 6F 02 FB | 	rdlong	local03, local01
080cc     07 5D 02 F6 | 	mov	arg01, objptr
080d0     07 71 02 F6 | 	mov	local04, objptr
080d4     36 0F 02 F6 | 	mov	objptr, local02
080d8     2D 6E 62 FD | 	call	local03
080dc     38 0F 02 F6 | 	mov	objptr, local04
080e0                 | LR__0449
080e0     AF F0 03 F6 | 	mov	ptra, fp
080e4     BF 00 A0 FD | 	call	#popregs_
080e8                 | __struct__s_vfs_file_t_getchar_ret
080e8     2D 00 64 FD | 	ret
080ec                 | 
080ec                 | __struct___bas_wrap_sender_tx
080ec     04 5A 05 F6 | 	mov	COUNT_, #4
080f0     B0 00 A0 FD | 	call	#pushregs_
080f4     07 6B 02 FB | 	rdlong	local01, objptr
080f8     35 6D 02 FB | 	rdlong	local02, local01
080fc     04 6A 06 F1 | 	add	local01, #4
08100     35 6F 02 FB | 	rdlong	local03, local01
08104     07 71 02 F6 | 	mov	local04, objptr
08108     36 0F 02 F6 | 	mov	objptr, local02
0810c     2D 6E 62 FD | 	call	local03
08110     38 0F 02 F6 | 	mov	objptr, local04
08114     01 2A 06 F6 | 	mov	result1, #1
08118     AF F0 03 F6 | 	mov	ptra, fp
0811c     BF 00 A0 FD | 	call	#popregs_
08120                 | __struct___bas_wrap_sender_tx_ret
08120     2D 00 64 FD | 	ret
08124                 | 
08124                 | LR__0450
08124     20          | 	byte	" "
08125     00          | 	byte	0
08126                 | LR__0451
08126                 | 	byte	
08126     00          | 	byte	0
08127                 | LR__0452
08127                 | 	byte	
08127     00          | 	byte	0
08128                 | LR__0453
08128     20 21 21 21 
0812c     20 63 6F 72 
08130     72 75 70 74 
08134     65 64 20 68 
08138     65 61 70 3F 
0813c     3F 3F 20 21 
08140     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
08143     00          | 	byte	0
08144                 | LR__0454
08144     20 21 21 21 
08148     20 6F 75 74 
0814c     20 6F 66 20 
08150     68 65 61 70 
08154     20 6D 65 6D 
08158     6F 72 79 20 
0815c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
08160     00          | 	byte	0
08161                 | LR__0455
08161     20 21 21 21 
08165     20 63 6F 72 
08169     72 75 70 74 
0816d     65 64 20 68 
08171     65 61 70 20 
08175     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
08179     00          | 	byte	0
0817a                 | LR__0456
0817a     43 6F 75 6E 
0817e     74 65 72 3A 
08182     20          | 	byte	"Counter: "
08183     00          | 	byte	0
08184                 | LR__0457
08184     4E 61 6D 65 
08188     20 20 20 20 
0818c     20 20 20 20 
08190     20 20 20 20 
08194     20 20 20 20 
08198     20 20 20 6C 
0819c     65 6E 20 20 
081a0     20 66 74 20 
081a4     76 6F 6C 20 
081a8     72 65 70 20 
081ac     20 20 72 2E 
081b0     6C 65 6E 20 
081b4     20 20 20 20 
081b8     20 20 20 20 
081bc     4E 61 6D 65 
081c0     20 20 20 20 
081c4     20 20 20 20 
081c8     20 20 20 20 
081cc     20 20 20 20 
081d0     20 20 20 6C 
081d4     65 6E 20 20 
081d8     20 66 74 20 
081dc     76 6F 6C 20 
081e0     72 65 70 20 
081e4     20 20 72 2E 
081e8     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
081ec     00          | 	byte	0
081ed                 | LR__0458
081ed     53          | 	byte	"S"
081ee     00          | 	byte	0
081ef                 | LR__0459
081ef     20 20 20 20 
081f3     20 20 20 20 
081f7     20 20 20 20 
081fb     20 20 20 20 
081ff     20 20 20 20 
08203     20 20       | 	byte	"                      "
08205     00          | 	byte	0
08206                 | LR__0460
08206     20          | 	byte	" "
08207     00          | 	byte	0
08208                 | LR__0461
08208     73 61 6D 70 
0820c     6C 65 73 20 
08210     6D 6F 64 75 
08214     6C 65       | 	byte	"samples module"
08216     00          | 	byte	0
08217     00          | 	alignl
08218                 | _dat_
08218     6B 61 64 69 
0821c     27 73 2D 68 
08220     61 72 63 00 
08224     00 00 00 00 | module file "../../../mod/kadiharc.mod"
08228     00 00 00 00 
      ...             
08244     00 00 00 00 
08248     00          | 	byte	$00[33]
08249     01 00 00 00 
0824d     00 00 00 00 
08251     00 00 00 00 
08255     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08259     00 00 00 00 
0825d     00 00 00 00 
08261     00 00 00 00 
08265     00 00       | 	byte	$00[14]
08267     01 00 00 00 
0826b     00 00 00 00 
0826f     00 00 00 00 
08273     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08277     00 00 00 00 
0827b     00 00 00 00 
0827f     00 00 00 00 
08283     00 00       | 	byte	$00[14]
08285     01 00 00 00 
08289     00 00 00 00 
0828d     00 00 00 00 
08291     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08295     00 00 00 00 
08299     00 00 00 00 
0829d     00 00 00 00 
082a1     00 00       | 	byte	$00[14]
082a3     01 00 00 00 
082a7     00 00 00 00 
082ab     00 00 00 00 
082af     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
082b3     00 00 00 00 
082b7     00 00 00 00 
082bb     00 00 00 00 
082bf     00 00       | 	byte	$00[14]
082c1     01 00 00 00 
082c5     00 00 00 00 
082c9     00 00 00 00 
082cd     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
082d1     00 00 00 00 
082d5     00 00 00 00 
082d9     00 00 00 00 
082dd     00 00       | 	byte	$00[14]
082df     01 00 00 00 
082e3     00 00 00 00 
082e7     00 00 00 00 
082eb     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
082ef     00 00 00 00 
082f3     00 00 00 00 
082f7     00 00 00 00 
082fb     00 00       | 	byte	$00[14]
082fd     01 00 00 00 
08301     00 00 00 00 
08305     00 00 00 00 
08309     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0830d     00 00 00 00 
08311     00 00 00 00 
08315     00 00 00 00 
08319     00 00       | 	byte	$00[14]
0831b     01 00 00 00 
0831f     00 00 00 00 
08323     00 00 00 00 
08327     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0832b     00 00 00 00 
0832f     00 00 00 00 
08333     00 00 00 00 
08337     00 00       | 	byte	$00[14]
08339     01 00 00 00 
0833d     00 00 00 00 
08341     00 00 00 00 
08345     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08349     00 00 00 00 
0834d     00 00 00 00 
08351     00 00 00 00 
08355     00 00       | 	byte	$00[14]
08357     01 53 54 2D 
0835b     31 36 3A 73 
0835f     69 72 65 6E 
08363     65 00 00 00 | 	byte	$01, $53, $54, $2d, $31, $36, $3a, $73, $69, $72, $65, $6e, $65, $00, $00, $00
08367     00 00 00 00 
0836b     00 00 00    | 	byte	$00[7]
0836e     0A 42 00 40 
08372     00 00 00 01 
08376     53 54 2D 31 
0837a     33 3A 63 2E | 	byte	$0a, $42, $00, $40, $00, $00, $00, $01, $53, $54, $2d, $31, $33, $3a, $63, $2e
0837e     67 6C 69 6E 
08382     79 00 2E 73 
08386     73 00 00 00 
0838a     00 00 17 B1 | 	byte	$67, $6c, $69, $6e, $79, $00, $2e, $73, $73, $00, $00, $00, $00, $00, $17, $b1
0838e     00 40 00 00 
08392     00 01 53 54 
08396     2D 33 37 3A 
0839a     66 61 74 63 | 	byte	$00, $40, $00, $00, $00, $01, $53, $54, $2d, $33, $37, $3a, $66, $61, $74, $63
0839e     6C 61 70 00 
083a2     2E 73 73 00 
083a6     00 00 00 00 
083aa     0B A1 00 40 | 	byte	$6c, $61, $70, $00, $2e, $73, $73, $00, $00, $00, $00, $00, $0b, $a1, $00, $40
083ae     00 00 00 01 
083b2     53 54 2D 33 
083b6     37 3A 66 61 
083ba     74 68 69 68 | 	byte	$00, $00, $00, $01, $53, $54, $2d, $33, $37, $3a, $66, $61, $74, $68, $69, $68
083be     61 74 32 00 
083c2     2E 73 73 00 
083c6     00 00 02 71 
083ca     00 40 00 00 | 	byte	$61, $74, $32, $00, $2e, $73, $73, $00, $00, $00, $02, $71, $00, $40, $00, $00
083ce     00 01 53 54 
083d2     2D 33 37 3A 
083d6     66 61 74 73 
083da     6E 61 72 65 | 	byte	$00, $01, $53, $54, $2d, $33, $37, $3a, $66, $61, $74, $73, $6e, $61, $72, $65
083de     33 00 2E 73 
083e2     73 00 00 00 
083e6     0C D1 00 40 
083ea     00 00 00 01 | 	byte	$33, $00, $2e, $73, $73, $00, $00, $00, $0c, $d1, $00, $40, $00, $00, $00, $01
083ee     53 54 2D 31 
083f2     33 3A 66 61 
083f6     74 62 62 61 
083fa     73 73 64 2E | 	byte	$53, $54, $2d, $31, $33, $3a, $66, $61, $74, $62, $62, $61, $73, $73, $64, $2e
083fe     76 00 2E 73 
08402     73 00 0C 71 
08406     00 40 00 00 
0840a     00 01 53 54 | 	byte	$76, $00, $2e, $73, $73, $00, $0c, $71, $00, $40, $00, $00, $00, $01, $53, $54
0840e     2D 33 37 3A 
08412     66 61 74 6F 
08416     70 65 6E 68 
0841a     68 32 00 2E | 	byte	$2d, $33, $37, $3a, $66, $61, $74, $6f, $70, $65, $6e, $68, $68, $32, $00, $2e
0841e     73 73 00 00 
08422     08 51 00 40 
08426     00 00 00 01 
0842a     53 54 2D 31 | 	byte	$73, $73, $00, $00, $08, $51, $00, $40, $00, $00, $00, $01, $53, $54, $2d, $31
0842e     31 3A 41 63 
08432     63 32 44 75 
08436     72 00 00 00 
0843a     00 00 00 00 | 	byte	$31, $3a, $41, $63, $63, $32, $44, $75, $72, $00, $00, $00, $00, $00, $00, $00
0843e     00 00 06 C9 
08442     00 40 00 00 
08446     00 01 53 54 
0844a     2D 31 31 3A | 	byte	$00, $00, $06, $c9, $00, $40, $00, $00, $00, $01, $53, $54, $2d, $31, $31, $3a
0844e     41 63 63 32 
08452     4D 6F 6C 6C 
08456     00 00 00 00 
0845a     00 00 00 00 | 	byte	$41, $63, $63, $32, $4d, $6f, $6c, $6c, $00, $00, $00, $00, $00, $00, $00, $00
0845e     06 C9 00 40 
08462     00 00 00 01 
08466     53 54 2D 31 
0846a     31 3A 42 53 | 	byte	$06, $c9, $00, $40, $00, $00, $00, $01, $53, $54, $2d, $31, $31, $3a, $42, $53
0846e     54 52 49 4E 
08472     47 31 00 00 
08476     00 00 00 00 
0847a     00 00 08 4C | 	byte	$54, $52, $49, $4e, $47, $31, $00, $00, $00, $00, $00, $00, $00, $00, $08, $4c
0847e     00 40 07 0C 
08482     00 82 53 54 
08486     2D 31 31 3A 
0848a     43 68 69 6E | 	byte	$00, $40, $07, $0c, $00, $82, $53, $54, $2d, $31, $31, $3a, $43, $68, $69, $6e
0848e     61 48 69 00 
08492     00 00 00 00 
08496     00 00 00 00 
0849a     03 47 00 40 | 	byte	$61, $48, $69, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $47, $00, $40
0849e     00 00 00 01 
084a2     53 54 2D 31 
084a6     31 3A 50 69 
084aa     61 6E 6F 33 | 	byte	$00, $00, $00, $01, $53, $54, $2d, $31, $31, $3a, $50, $69, $61, $6e, $6f, $33
084ae     00 00 00 00 
084b2     00 00 00 00 
084b6     00 00       | 	byte	$00[10]
084b8     0A 00 00 40 
084bc     09 EE 00 10 
084c0     53 54 2D 31 
084c4     31 3A 56 49 | 	byte	$0a, $00, $00, $40, $09, $ee, $00, $10, $53, $54, $2d, $31, $31, $3a, $56, $49
084c8     42 42 44 52 
084cc     55 4D 00 00 
084d0     00 00 00 00 
084d4     00 00 00 00 | 	byte	$42, $42, $44, $52, $55, $4d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084d8     00 40 00 00 
084dc     00 01 00 00 
084e0     00 00 00 00 
084e4     00 00 00 00 | 	byte	$00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084e8     00 00 00 00 
084ec     00 00 00 00 
084f0     00 00 00 00 
084f4     00 00 00 00 
084f8     00 00 00    | 	byte	$00[19]
084fb     01 00 00 00 
084ff     00 00 00 00 
08503     00 00 00 00 
08507     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0850b     00 00 00 00 
0850f     00 00 00 00 
08513     00 00 00 00 
08517     00 00       | 	byte	$00[14]
08519     01 00 00 00 
0851d     00 00 00 00 
08521     00 00 00 00 
08525     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08529     00 00 00 00 
0852d     00 00 00 00 
08531     00 00 00 00 
08535     00 00       | 	byte	$00[14]
08537     01 00 00 00 
0853b     00 00 00 00 
0853f     00 00 00 00 
08543     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08547     00 00 00 00 
0854b     00 00 00 00 
0854f     00 00 00 00 
08553     00 00       | 	byte	$00[14]
08555     01 00 00 00 
08559     00 00 00 00 
0855d     00 00 00 00 
08561     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08565     00 00 00 00 
08569     00 00 00 00 
0856d     00 00 00 00 
08571     00 00       | 	byte	$00[14]
08573     01 00 00 00 
08577     00 00 00 00 
0857b     00 00 00 00 
0857f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08583     00 00 00 00 
08587     00 00 00 00 
0858b     00 00 00 00 
0858f     00 00       | 	byte	$00[14]
08591     01 00 00 00 
08595     00 00 00 00 
08599     00 00 00 00 
0859d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085a1     00 00 00 00 
085a5     00 00 00 00 
085a9     00 00 00 00 
085ad     00 00       | 	byte	$00[14]
085af     01 00 00 00 
085b3     00 00 00 00 
085b7     00 00 00 00 
085bb     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085bf     00 00 00 00 
085c3     00 00 00 00 
085c7     00 00 00 00 
085cb     00 00       | 	byte	$00[14]
085cd     01 1B 00 00 
085d1     0A 0B 0C 0D 
085d5     0E 0E 0F 0F 
085d9     10 11 0E 0E | 	byte	$01, $1b, $00, $00, $0a, $0b, $0c, $0d, $0e, $0e, $0f, $0f, $10, $11, $0e, $0e
085dd     12 13 0F 0F 
085e1     10 11 0E 0E 
085e5     12 13 12 13 
085e9     14 15 00 00 | 	byte	$12, $13, $0f, $0f, $10, $11, $0e, $0e, $12, $13, $12, $13, $14, $15, $00, $00
085ed     00 00 00 00 
      ...             
08649     00 00 00 00 
0864d     00 00 00    | 	byte	$00[99]
08650     4D 2E 4B 2E 
08654     10 BE 00 00 
08658     00 8F EF 06 
0865c     00 00 00 00 | 	byte	$4d, $2e, $4b, $2e, $10, $be, $00, $00, $00, $8f, $ef, $06, $00, $00, $00, $00
08660     00 00 00 00 
08664     00 00 00 00 
08668     00          | 	byte	$00[9]
08669     8F E0 00 00 
0866d     00 00 00 00 
08671     00 00 00 00 
08675     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
08679     AA 10 00 00 
0867d     00 00 00 00 
08681     00 00 00 00 
08685     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08689     00 00 00 00 
0868d     00 00 00 00 
08691     00 00 00 00 | 	byte	$00[12]
08695     D6 F0 00 00 
08699     8F E0 00 00 
0869d     00 00 00 00 
086a1     00 00 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
086a5     00 00 00 00 
086a9     8F E0 00 00 
086ad     00 00 00 00 
086b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
086b5     00 00 00 10 
086b9     AA 10 00 00 
086bd     00 00 00 00 
086c1     00 00 00 00 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
086c5     00 00 00 00 
086c9     00 00 00 00 
086cd     00 00 00 00 
086d1     00 00 00    | 	byte	$00[15]
086d4     10 BE 00 00 
086d8     00 8F E0 00 
086dc     00 00 00 00 
086e0     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00
086e4     00 00 00 00 
086e8     00          | 	byte	$00[5]
086e9     8F E0 00 00 
086ed     00 00 00 00 
086f1     00 00 00 00 
086f5     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
086f9     AA 10 00 00 
086fd     00 00 00 00 
08701     00 00 00 00 
08705     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08709     00 00 00 00 
0870d     00 00 00 00 
08711     00 00 00 00 | 	byte	$00[12]
08715     D6 F0 00 00 
08719     8F E0 00 00 
0871d     00 00 00 00 
08721     00 00 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08725     00 00 00 00 
08729     8F E0 00 00 
0872d     00 00 00 00 
08731     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08735     00 00 00 10 
08739     AA 10 00 00 
0873d     00 00 00 00 
08741     00 00 00 00 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08745     00 00 00 00 
08749     00 00 00 00 
0874d     00 00 00 00 
08751     00 00 00    | 	byte	$00[15]
08754     10 BE 00 00 
08758     00 8F E0 00 
0875c     00 00 00 00 
08760     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00
08764     00 00 00 00 
08768     00          | 	byte	$00[5]
08769     8F E0 00 00 
0876d     00 00 00 00 
08771     00 00 00 00 
08775     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
08779     AA 10 00 00 
0877d     00 00 00 00 
08781     00 00 00 00 
08785     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08789     00 00 00 00 
0878d     00 00 00 00 
08791     00 00 00 00 | 	byte	$00[12]
08795     D6 F0 00 00 
08799     8F E0 00 00 
0879d     00 00 00 00 
087a1     00 00 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087a5     00 00 00 00 
087a9     8F E0 00 00 
087ad     00 00 00 00 
087b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087b5     00 00 00 10 
087b9     AA 10 00 00 
087bd     00 00 00 00 
087c1     00 00 00 00 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087c5     00 00 00 00 
087c9     00 00 00 00 
087cd     00 00 00 00 
087d1     00 00 00    | 	byte	$00[15]
087d4     10 BE 00 00 
087d8     00 8F E0 00 
087dc     00 00 00 00 
087e0     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00
087e4     00 00 00 00 
087e8     00          | 	byte	$00[5]
087e9     8F E0 00 00 
087ed     00 00 00 00 
087f1     00 00 00 00 
087f5     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
087f9     AA 10 00 00 
087fd     00 00 00 00 
08801     00 00 00 00 
08805     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08809     00 00 00 00 
0880d     00 00 00 00 
08811     00 00 00 00 | 	byte	$00[12]
08815     D6 F0 00 00 
08819     8F E0 00 00 
0881d     00 00 00 00 
08821     00 00 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08825     00 00 00 00 
08829     8F E0 00 00 
0882d     00 00 00 00 
08831     00 00 00 10 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
08835     BE 00 00 10 
08839     AA 10 00 00 
0883d     00 00 00 00 
08841     00 00 00 00 | 	byte	$be, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08845     00 00 00 00 
08849     00 00 00 00 
0884d     00 00 00 00 
08851     00 00 00    | 	byte	$00[15]
08854     10 BE 00 00 
08858     00 8F E0 00 
0885c     00 00 00 00 
08860     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00
08864     00 00 00 00 
08868     00          | 	byte	$00[5]
08869     8F E0 00 00 
0886d     00 00 00 00 
08871     00 00 00 00 
08875     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
08879     AA 10 00 00 
0887d     00 00 00 00 
08881     00 00 00 00 
08885     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08889     00 00 00 00 
0888d     00 00 00 00 
08891     00 00 00 00 | 	byte	$00[12]
08895     D6 F0 00 00 
08899     8F E0 00 00 
0889d     00 00 00 00 
088a1     00 00 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088a5     00 00 00 00 
088a9     8F E0 00 00 
088ad     00 00 00 00 
088b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088b5     00 00 00 10 
088b9     AA 10 00 00 
088bd     00 00 00 00 
088c1     00 00 00 00 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088c5     00 00 00 00 
088c9     00 00 00 00 
088cd     00 00 00 00 
088d1     00 00 00    | 	byte	$00[15]
088d4     10 BE 00 00 
088d8     00 8F E0 00 
088dc     00 00 00 00 
088e0     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00
088e4     00 00 00 00 
088e8     00          | 	byte	$00[5]
088e9     8F E0 00 00 
088ed     00 00 00 00 
088f1     00 00 00 00 
088f5     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
088f9     AA 10 00 00 
088fd     00 00 00 00 
08901     00 00 00 00 
08905     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08909     00 00 00 00 
0890d     00 00 00 00 
08911     00 00 00 00 | 	byte	$00[12]
08915     D6 F0 00 00 
08919     8F E0 00 00 
0891d     00 00 00 00 
08921     00 00 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08925     00 00 00 00 
08929     8F E0 00 00 
0892d     00 00 00 00 
08931     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08935     00 00 00 10 
08939     AA 10 00 00 
0893d     00 00 00 00 
08941     00 00 00 10 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
08945     BE 00 00 00 
08949     00 00 00 00 
0894d     00 00 00 00 
08951     00 00 00 10 | 	byte	$be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
08955     BE 00 00 00 
08959     8F E0 00 00 
0895d     00 00 00 00 
08961     00 00 00 00 | 	byte	$be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08965     00 00 00 00 
08969     8F E0 00 00 
0896d     00 00 00 00 
08971     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08975     00 00 00 10 
08979     AA 10 00 00 
0897d     00 00 00 00 
08981     00 00 00 00 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08985     00 00 00 00 
08989     00 00 00 00 
0898d     00 00 00 00 
08991     00 00 00 00 | 	byte	$00[16]
08995     D6 F0 00 00 
08999     8F E0 00 00 
0899d     00 00 00 00 
089a1     00 00 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089a5     00 00 00 00 
089a9     8F E0 00 00 
089ad     00 00 00 00 
089b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089b5     00 00 00 10 
089b9     AA 10 00 00 
089bd     00 00 00 00 
089c1     00 00 00 10 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
089c5     BE 00 00 00 
089c9     00 00 00 00 
089cd     00 00 00 00 
089d1     00 00 00 10 | 	byte	$be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
089d5     BE 00 00 00 
089d9     8F E0 00 00 
089dd     00 00 00 00 
089e1     00 00 00 00 | 	byte	$be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089e5     00 00 00 00 
089e9     8F E0 00 00 
089ed     00 00 00 00 
089f1     00 00 00 10 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
089f5     BE 00 00 10 
089f9     AA 10 00 00 
089fd     00 00 00 00 
08a01     00 00 00 00 | 	byte	$be, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a05     00 00 00 00 
08a09     00 00 00 00 
08a0d     00 00 00 00 
08a11     00 00 00 00 | 	byte	$00[16]
08a15     D6 F0 00 10 
08a19     AA 10 00 00 
08a1d     00 00 00 00 
08a21     00 00 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a25     00 00 00 00 
08a29     00 00 00 00 
08a2d     00 00 00 00 
08a31     00 00 00 00 | 	byte	$00[16]
08a35     D6 F0 00 10 
08a39     AA 10 00 00 
08a3d     00 00 00 00 
08a41     00 00 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a45     00 00 00 00 
      ...             
0ae4d     00 00 00 00 
0ae51     00 00 00    | 	byte	$00[9231]
0ae54     10 BE 00 00 
0ae58     00 8F E0 00 
0ae5c     11 1D 30 00 
0ae60     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00
0ae64     00 00 00 00 
0ae68     00          | 	byte	$00[5]
0ae69     8F E0 00 00 
0ae6d     00 00 00 00 
0ae71     00 00 00 00 
0ae75     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0ae79     AA 10 00 00 
0ae7d     00 00 00 12 
0ae81     3A 50 00 00 
0ae85     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0ae89     00 00 00 11 
0ae8d     1D 30 00 00 
0ae91     00 00 00 00 
0ae95     D6 F0 00 00 | 	byte	$00, $00, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0ae99     8F E0 00 11 
0ae9d     1D 30 00 12 
0aea1     3A 50 00 00 
0aea5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0aea9     8F E0 00 00 
0aead     00 00 00 00 
0aeb1     00 00 00 00 
0aeb5     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0aeb9     AA 10 00 00 
0aebd     00 00 00 12 
0aec1     3A 50 00 00 
0aec5     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0aec9     00 00 00 10 
0aecd     BE 30 00 11 
0aed1     FC 50 00 10 
0aed5     BE 00 00 00 | 	byte	$00, $00, $00, $10, $be, $30, $00, $11, $fc, $50, $00, $10, $be, $00, $00, $00
0aed9     8F E0 00 00 
0aedd     00 00 00 00 
0aee1     00 00 00 00 
0aee5     00 00 00 00 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aee9     8F E0 00 10 
0aeed     BE 30 00 12 
0aef1     80 50 00 00 
0aef5     00 00 00 10 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $12, $80, $50, $00, $00, $00, $00, $00, $10
0aef9     AA 10 00 00 
0aefd     00 00 00 00 
0af01     00 00 00 00 
0af05     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af09     00 00 00 10 
0af0d     BE 30 00 00 
0af11     00 00 00 00 
0af15     D6 F0 00 00 | 	byte	$00, $00, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0af19     8F E0 00 10 
0af1d     BE 30 00 12 
0af21     FA 50 00 00 
0af25     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $12, $fa, $50, $00, $00, $00, $00, $00, $00
0af29     8F E0 00 00 
0af2d     00 00 00 00 
0af31     00 00 00 00 
0af35     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0af39     AA 10 00 10 
0af3d     BE 30 00 11 
0af41     FC 50 00 00 
0af45     00 00 00 00 | 	byte	$aa, $10, $00, $10, $be, $30, $00, $11, $fc, $50, $00, $00, $00, $00, $00, $00
0af49     00 00 00 00 
0af4d     00 00 00 00 
0af51     00 00 00    | 	byte	$00[11]
0af54     10 BE 00 00 
0af58     00 8F E0 00 
0af5c     10 D6 30 00 
0af60     12 3A 50 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $12, $3a, $50, $00
0af64     00 00 00 00 
0af68     00          | 	byte	$00[5]
0af69     8F E0 00 00 
0af6d     00 00 00 12 
0af71     3A 50 00 00 
0af75     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $10
0af79     AA 10 00 00 
0af7d     00 00 00 00 
0af81     00 00 00 00 
0af85     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af89     00 00 00 10 
0af8d     D6 30 00 00 
0af91     00 00 00 00 
0af95     D6 F0 00 00 | 	byte	$00, $00, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0af99     8F E0 00 10 
0af9d     D6 30 00 00 
0afa1     A0 BC 10 00 
0afa5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $a0, $bc, $10, $00, $00, $00, $00, $00
0afa9     8F E0 00 00 
0afad     00 00 00 00 
0afb1     00 00 00 00 
0afb5     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0afb9     AA 10 00 10 
0afbd     D6 30 00 00 
0afc1     A0 BC 28 00 
0afc5     00 00 00 00 | 	byte	$aa, $10, $00, $10, $d6, $30, $00, $00, $a0, $bc, $28, $00, $00, $00, $00, $00
0afc9     00 00 00 10 
0afcd     D6 30 00 00 
0afd1     00 00 00 10 
0afd5     BE 00 00 00 | 	byte	$00, $00, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00
0afd9     8F E0 00 00 
0afdd     00 00 00 00 
0afe1     A0 BC 40 00 
0afe5     00 00 00 00 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $a0, $bc, $40, $00, $00, $00, $00, $00
0afe9     8F E0 00 10 
0afed     D6 30 00 00 
0aff1     00 00 00 00 
0aff5     00 00 00 10 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0aff9     AA 10 00 11 
0affd     40 20 00 12 
0b001     80 50 00 00 
0b005     00 00 00 00 | 	byte	$aa, $10, $00, $11, $40, $20, $00, $12, $80, $50, $00, $00, $00, $00, $00, $00
0b009     00 00 00 00 
0b00d     00 00 00    | 	byte	$00[7]
0b010     12 80 5C 20 
0b014     00 D6 F0 00 
0b018     00 8F E0 00 
0b01c     11 40 20 00 | 	byte	$12, $80, $5c, $20, $00, $d6, $f0, $00, $00, $8f, $e0, $00, $11, $40, $20, $00
0b020     12 80 50 00 
0b024     00 00 00 00 
0b028     00 8F E0 00 
0b02c     00 00 00 00 | 	byte	$12, $80, $50, $00, $00, $00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00
0b030     12 80 5C 20 
0b034     10 BE 00 00 
0b038     10 AA 10 00 
0b03c     11 2E 20 00 | 	byte	$12, $80, $5c, $20, $10, $be, $00, $00, $10, $aa, $10, $00, $11, $2e, $20, $00
0b040     12 5C 50 00 
0b044     00 00 00 00 
0b048     00 00 00 00 
0b04c     00 00 00 00 | 	byte	$12, $5c, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b050     12 5C 5C 20 
0b054     10 BE 00 00 
0b058     00 8F E0 00 
0b05c     11 1D 30 00 | 	byte	$12, $5c, $5c, $20, $10, $be, $00, $00, $00, $8f, $e0, $00, $11, $1d, $30, $00
0b060     00 00 00 00 
0b064     00 00 00 00 
0b068     00          | 	byte	$00[9]
0b069     8F E0 00 00 
0b06d     00 00 00 00 
0b071     00 00 00 00 
0b075     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b079     AA 10 00 00 
0b07d     00 00 00 12 
0b081     3A 50 00 00 
0b085     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b089     00 00 00 11 
0b08d     1D 30 00 00 
0b091     00 00 00 00 
0b095     D6 F0 00 00 | 	byte	$00, $00, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0b099     8F E0 00 11 
0b09d     1D 30 00 12 
0b0a1     3A 50 00 00 
0b0a5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b0a9     8F E0 00 00 
0b0ad     00 00 00 00 
0b0b1     00 00 00 00 
0b0b5     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b0b9     AA 10 00 00 
0b0bd     00 00 00 12 
0b0c1     3A 50 00 00 
0b0c5     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b0c9     00 00 00 10 
0b0cd     BE 30 00 11 
0b0d1     FC 50 00 10 
0b0d5     BE 00 00 00 | 	byte	$00, $00, $00, $10, $be, $30, $00, $11, $fc, $50, $00, $10, $be, $00, $00, $00
0b0d9     8F E0 00 00 
0b0dd     00 00 00 00 
0b0e1     00 00 00 00 
0b0e5     00 00 00 00 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0e9     8F E0 00 10 
0b0ed     BE 30 00 12 
0b0f1     80 50 00 00 
0b0f5     00 00 00 10 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $12, $80, $50, $00, $00, $00, $00, $00, $10
0b0f9     AA 10 00 00 
0b0fd     00 00 00 00 
0b101     00 00 00 00 
0b105     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b109     00 00 00 10 
0b10d     BE 30 00 00 
0b111     00 00 00 00 
0b115     D6 F0 00 00 | 	byte	$00, $00, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0b119     8F E0 00 10 
0b11d     BE 30 00 12 
0b121     FA 50 00 00 
0b125     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $12, $fa, $50, $00, $00, $00, $00, $00, $00
0b129     8F E0 00 00 
0b12d     00 00 00 00 
0b131     00 00 00 00 
0b135     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b139     AA 10 00 10 
0b13d     BE 30 00 11 
0b141     FC 50 00 10 
0b145     BE 00 00 00 | 	byte	$aa, $10, $00, $10, $be, $30, $00, $11, $fc, $50, $00, $10, $be, $00, $00, $00
0b149     00 00 00 00 
0b14d     00 00 00 00 
0b151     00 00 00    | 	byte	$00[11]
0b154     10 BE 00 00 
0b158     00 8F E0 00 
0b15c     10 D6 30 00 
0b160     12 3A 50 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $12, $3a, $50, $00
0b164     00 00 00 00 
0b168     00          | 	byte	$00[5]
0b169     8F E0 00 00 
0b16d     00 00 00 12 
0b171     3A 50 00 00 
0b175     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $10
0b179     AA 10 00 00 
0b17d     00 00 00 00 
0b181     00 00 00 00 
0b185     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b189     00 00 00 10 
0b18d     D6 30 00 00 
0b191     00 00 00 00 
0b195     D6 F0 00 00 | 	byte	$00, $00, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0b199     8F E0 00 10 
0b19d     D6 30 00 00 
0b1a1     00 00 00 00 
0b1a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1a9     8F E0 00 00 
0b1ad     00 00 00 00 
0b1b1     00 00 00 00 
0b1b5     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b1b9     AA 10 00 10 
0b1bd     D6 30 00 00 
0b1c1     00 00 00 10 
0b1c5     BE 00 00 00 | 	byte	$aa, $10, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00
0b1c9     00 00 00 10 
0b1cd     D6 30 00 00 
0b1d1     00 00 00 10 
0b1d5     BE 00 00 00 | 	byte	$00, $00, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00
0b1d9     8F E0 00 00 
0b1dd     00 00 00 00 
0b1e1     00 00 00 00 
0b1e5     00 00 00 00 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1e9     8F E0 00 10 
0b1ed     D6 30 00 00 
0b1f1     00 00 00 10 
0b1f5     BE 00 00 10 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $10
0b1f9     AA 10 00 11 
0b1fd     40 20 00 12 
0b201     80 50 00 00 
0b205     00 00 00 00 | 	byte	$aa, $10, $00, $11, $40, $20, $00, $12, $80, $50, $00, $00, $00, $00, $00, $00
0b209     00 00 00 00 
0b20d     00 00 00    | 	byte	$00[7]
0b210     12 80 5C 20 
0b214     00 D6 F0 00 
0b218     10 AA 10 00 
0b21c     11 40 20 00 | 	byte	$12, $80, $5c, $20, $00, $d6, $f0, $00, $10, $aa, $10, $00, $11, $40, $20, $00
0b220     12 80 50 00 
0b224     00 00 00 00 
0b228     00 00 00 00 
0b22c     00 00 00 00 | 	byte	$12, $80, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b230     12 80 5C 20 
0b234     00 D6 F0 00 
0b238     10 AA 10 00 
0b23c     11 2E 20 00 | 	byte	$12, $80, $5c, $20, $00, $d6, $f0, $00, $10, $aa, $10, $00, $11, $2e, $20, $00
0b240     12 5C 50 00 
0b244     00 00 00 00 
0b248     00 00 00 00 
0b24c     00 00 00 00 | 	byte	$12, $5c, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b250     12 5C 5C 20 
0b254     10 BE 00 00 
0b258     00 8F E0 00 
0b25c     10 D6 30 00 | 	byte	$12, $5c, $5c, $20, $10, $be, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00
0b260     00 00 00 00 
0b264     00 00 00 00 
0b268     00          | 	byte	$00[9]
0b269     8F E0 00 00 
0b26d     00 00 00 00 
0b271     00 00 00 00 
0b275     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b279     AA 10 00 10 
0b27d     D6 30 00 12 
0b281     3A 50 00 00 
0b285     00 00 00 00 | 	byte	$aa, $10, $00, $10, $d6, $30, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b289     00 00 00 00 
0b28d     00 00 00 00 
0b291     00 00 00 00 | 	byte	$00[12]
0b295     D6 F0 00 00 
0b299     8F E0 00 10 
0b29d     D6 30 00 12 
0b2a1     3A 50 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $12, $3a, $50, $00, $00
0b2a5     00 00 00 00 
0b2a9     8F E0 00 00 
0b2ad     00 00 00 00 
0b2b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b2b5     00 00 00 10 
0b2b9     AA 10 00 00 
0b2bd     00 00 00 12 
0b2c1     3A 50 00 00 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00
0b2c5     00 00 00 00 
0b2c9     00 00 00    | 	byte	$00[7]
0b2cc     10 D6 30 00 
0b2d0     11 E0 50 00 
0b2d4     10 BE 00 00 
0b2d8     00 8F E0 00 | 	byte	$10, $d6, $30, $00, $11, $e0, $50, $00, $10, $be, $00, $00, $00, $8f, $e0, $00
0b2dc     00 00 00 00 
0b2e0     00 00 00 00 
0b2e4     00 00 00 00 
0b2e8     00          | 	byte	$00[13]
0b2e9     8F E0 00 10 
0b2ed     D6 30 00 12 
0b2f1     3A 50 00 00 
0b2f5     00 00 00 10 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $10
0b2f9     AA 10 00 00 
0b2fd     00 00 00 00 
0b301     00 00 00 00 
0b305     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b309     00 00 00 10 
0b30d     D6 30 00 00 
0b311     00 00 00 00 
0b315     D6 F0 00 00 | 	byte	$00, $00, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0b319     8F E0 00 10 
0b31d     D6 30 00 00 
0b321     00 00 00 00 
0b325     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b329     8F E0 00 00 
0b32d     00 00 00 00 
0b331     00 00 00 00 
0b335     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b339     AA 10 00 10 
0b33d     D6 30 00 00 
0b341     00 00 00 00 
0b345     00 00 00 00 | 	byte	$aa, $10, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b349     00 00 00 10 
0b34d     CA 30 00 00 
0b351     00 00 00 10 
0b355     BE 00 00 00 | 	byte	$00, $00, $00, $10, $ca, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00
0b359     8F E0 00 10 
0b35d     BE 30 00 00 
0b361     00 00 00 00 
0b365     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b369     8F E0 00 00 
0b36d     00 00 00 00 
0b371     00 00 00 00 
0b375     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b379     AA 10 00 10 
0b37d     BE 30 00 11 
0b381     FC 50 00 00 
0b385     00 00 00 00 | 	byte	$aa, $10, $00, $10, $be, $30, $00, $11, $fc, $50, $00, $00, $00, $00, $00, $00
0b389     00 00 00 00 
0b38d     00 00 00 00 
0b391     00 00 00 00 | 	byte	$00[12]
0b395     D6 F0 00 00 
0b399     8F E0 00 10 
0b39d     BE 30 00 11 
0b3a1     FC 50 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $11, $fc, $50, $00, $00
0b3a5     00 00 00 00 
0b3a9     8F E0 00 00 
0b3ad     00 00 00 00 
0b3b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b3b5     00 00 00 10 
0b3b9     AA 10 00 00 
0b3bd     00 00 00 11 
0b3c1     FC 50 00 00 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $11, $fc, $50, $00, $00
0b3c5     00 00 00 00 
0b3c9     00 00 00    | 	byte	$00[7]
0b3cc     10 BE 30 00 
0b3d0     11 FC 50 00 
0b3d4     10 BE 00 00 
0b3d8     00 8F E0 00 | 	byte	$10, $be, $30, $00, $11, $fc, $50, $00, $10, $be, $00, $00, $00, $8f, $e0, $00
0b3dc     00 00 00 00 
0b3e0     00 00 00 00 
0b3e4     00 00 00 00 
0b3e8     00          | 	byte	$00[13]
0b3e9     8F E0 00 10 
0b3ed     BE 30 00 11 
0b3f1     FC 50 00 00 
0b3f5     00 00 00 10 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $11, $fc, $50, $00, $00, $00, $00, $00, $10
0b3f9     AA 10 00 00 
0b3fd     00 00 00 00 
0b401     00 00 00 00 
0b405     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b409     00 00 00 10 
0b40d     BE 30 00 00 
0b411     00 00 00 00 
0b415     D6 F0 00 00 | 	byte	$00, $00, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0b419     8F E0 00 10 
0b41d     BE 30 00 00 
0b421     00 00 00 00 
0b425     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b429     8F E0 00 00 
0b42d     00 00 00 00 
0b431     00 00 00 10 
0b435     BE 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $be, $00, $00, $10
0b439     AA 10 00 10 
0b43d     BE 30 00 11 
0b441     FC 50 00 00 
0b445     00 00 00 00 | 	byte	$aa, $10, $00, $10, $be, $30, $00, $11, $fc, $50, $00, $00, $00, $00, $00, $00
0b449     00 00 00 00 
0b44d     00 00 00 00 
0b451     00 00 00    | 	byte	$00[11]
0b454     10 BE 00 00 
0b458     00 8F E0 00 
0b45c     11 1D 30 00 
0b460     12 3A 50 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $11, $1d, $30, $00, $12, $3a, $50, $00
0b464     00 00 00 00 
0b468     00          | 	byte	$00[5]
0b469     8F E0 00 00 
0b46d     00 00 00 12 
0b471     3A 50 00 00 
0b475     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $10
0b479     AA 10 00 11 
0b47d     1D 30 00 00 
0b481     00 00 00 00 
0b485     00 00 00 00 | 	byte	$aa, $10, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b489     00 00 00 00 
0b48d     00 00 00 00 
0b491     00 00 00 00 | 	byte	$00[12]
0b495     D6 F0 00 00 
0b499     8F E0 00 11 
0b49d     1D 30 00 00 
0b4a1     00 00 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00
0b4a5     00 00 00 00 
0b4a9     8F E0 00 00 
0b4ad     00 00 00 00 
0b4b1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4b5     00 00 00 10 
0b4b9     AA 10 00 00 
0b4bd     00 00 00 00 
0b4c1     00 00 00 00 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4c5     00 00 00 00 
0b4c9     00 00 00    | 	byte	$00[7]
0b4cc     10 BE 30 00 
0b4d0     00 00 00 00 
0b4d4     10 BE 00 00 
0b4d8     00 8F E0 00 | 	byte	$10, $be, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00, $8f, $e0, $00
0b4dc     00 00 00 00 
0b4e0     00 00 00 00 
0b4e4     00 00 00 00 
0b4e8     00          | 	byte	$00[13]
0b4e9     8F E0 00 10 
0b4ed     BE 30 00 00 
0b4f1     00 00 00 00 
0b4f5     00 00 00 10 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b4f9     AA 10 00 00 
0b4fd     00 00 00 11 
0b501     FC 50 00 00 
0b505     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $11, $fc, $50, $00, $00, $00, $00, $00, $00
0b509     00 00 00 10 
0b50d     BE 30 00 11 
0b511     FC 5C 20 00 
0b515     D6 F0 00 00 | 	byte	$00, $00, $00, $10, $be, $30, $00, $11, $fc, $5c, $20, $00, $d6, $f0, $00, $00
0b519     8F E0 00 10 
0b51d     BE 30 00 12 
0b521     80 50 00 00 
0b525     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $12, $80, $50, $00, $00, $00, $00, $00, $00
0b529     8F E0 00 00 
0b52d     00 00 00 12 
0b531     80 5C 20 00 
0b535     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $12, $80, $5c, $20, $00, $00, $00, $00, $10
0b539     AA 10 00 10 
0b53d     BE 30 00 12 
0b541     FA 50 00 10 
0b545     BE 00 00 00 | 	byte	$aa, $10, $00, $10, $be, $30, $00, $12, $fa, $50, $00, $10, $be, $00, $00, $00
0b549     00 00 00 00 
0b54d     00 00 00    | 	byte	$00[7]
0b550     12 FA 5C 20 
0b554     10 BE 00 00 
0b558     00 8F E0 00 
0b55c     10 D6 30 00 | 	byte	$12, $fa, $5c, $20, $10, $be, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00
0b560     12 3A 5C 40 
0b564     00 00 00 00 
0b568     00 8F E0 00 
0b56c     00 00 00 00 | 	byte	$12, $3a, $5c, $40, $00, $00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00
0b570     12 3A 5C 30 
0b574     00 00 00 00 
0b578     10 AA 10 00 
0b57c     00 00 00 00 | 	byte	$12, $3a, $5c, $30, $00, $00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00
0b580     12 3A 5C 20 
0b584     00 00 00 00 
0b588     00 00 00 00 
0b58c     10 D6 30 00 | 	byte	$12, $3a, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $10, $d6, $30, $00
0b590     12 3A 5C 10 
0b594     00 D6 F0 00 
0b598     00 8F E0 00 
0b59c     10 D6 30 00 | 	byte	$12, $3a, $5c, $10, $00, $d6, $f0, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00
0b5a0     12 3A 5C 0A 
0b5a4     00 00 00 00 
0b5a8     00 8F E0 00 
0b5ac     00 00 00 00 | 	byte	$12, $3a, $5c, $0a, $00, $00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00
0b5b0     12 3A 5C 05 
0b5b4     00 00 00 00 
0b5b8     10 AA 10 00 
0b5bc     10 D6 30 00 | 	byte	$12, $3a, $5c, $05, $00, $00, $00, $00, $10, $aa, $10, $00, $10, $d6, $30, $00
0b5c0     12 3A 50 00 
0b5c4     10 BE 00 00 
0b5c8     00 00 00 00 
0b5cc     10 D6 30 00 | 	byte	$12, $3a, $50, $00, $10, $be, $00, $00, $00, $00, $00, $00, $10, $d6, $30, $00
0b5d0     12 80 50 00 
0b5d4     10 BE 00 00 
0b5d8     00 8F E0 00 
0b5dc     00 00 00 00 | 	byte	$12, $80, $50, $00, $10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00
0b5e0     12 3A 50 00 
0b5e4     00 00 00 00 
0b5e8     00 8F E0 00 
0b5ec     10 D6 30 00 | 	byte	$12, $3a, $50, $00, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00
0b5f0     12 80 50 00 
0b5f4     10 BE 00 00 
0b5f8     10 AA 10 00 
0b5fc     11 40 20 00 | 	byte	$12, $80, $50, $00, $10, $be, $00, $00, $10, $aa, $10, $00, $11, $40, $20, $00
0b600     12 80 50 00 
0b604     00 00 00 00 
0b608     00 00 00 00 
0b60c     11 40 2C 20 | 	byte	$12, $80, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $40, $2c, $20
0b610     12 80 5C 20 
0b614     00 D6 F0 00 
0b618     10 AA 10 00 
0b61c     11 40 20 00 | 	byte	$12, $80, $5c, $20, $00, $d6, $f0, $00, $10, $aa, $10, $00, $11, $40, $20, $00
0b620     12 80 50 00 
0b624     00 00 00 00 
0b628     00 00 00 00 
0b62c     11 40 2C 20 | 	byte	$12, $80, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $40, $2c, $20
0b630     12 80 5C 20 
0b634     00 D6 F0 00 
0b638     10 AA 10 00 
0b63c     11 2E 20 00 | 	byte	$12, $80, $5c, $20, $00, $d6, $f0, $00, $10, $aa, $10, $00, $11, $2e, $20, $00
0b640     12 5C 50 00 
0b644     00 00 00 00 
0b648     00 00 00 00 
0b64c     11 2E 2C 20 | 	byte	$12, $5c, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $2e, $2c, $20
0b650     12 5C 5C 20 
0b654     10 BE 00 00 
0b658     00 8F E0 00 
0b65c     12 3A 30 00 | 	byte	$12, $5c, $5c, $20, $10, $be, $00, $00, $00, $8f, $e0, $00, $12, $3a, $30, $00
0b660     00 00 00 00 
0b664     00 00 00 00 
0b668     00          | 	byte	$00[9]
0b669     8F E0 00 00 
0b66d     00 00 00 00 
0b671     00 00 00 00 
0b675     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b679     AA 10 00 00 
0b67d     00 00 00 12 
0b681     3A 50 00 00 
0b685     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b689     00 00 00 12 
0b68d     3A 30 00 00 
0b691     00 00 00 00 
0b695     D6 F0 00 00 | 	byte	$00, $00, $00, $12, $3a, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0b699     8F E0 00 12 
0b69d     3A 30 00 12 
0b6a1     3A 50 00 00 
0b6a5     00 00 00 00 | 	byte	$8f, $e0, $00, $12, $3a, $30, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b6a9     8F E0 00 00 
0b6ad     00 00 00 00 
0b6b1     00 00 00 00 
0b6b5     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b6b9     AA 10 00 00 
0b6bd     00 00 00 12 
0b6c1     3A 50 00 00 
0b6c5     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b6c9     00 00 00 11 
0b6cd     7D 30 00 11 
0b6d1     FC 50 00 10 
0b6d5     BE 00 00 00 | 	byte	$00, $00, $00, $11, $7d, $30, $00, $11, $fc, $50, $00, $10, $be, $00, $00, $00
0b6d9     8F E0 00 00 
0b6dd     00 00 00 00 
0b6e1     00 00 00 00 
0b6e5     00 00 00 00 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6e9     8F E0 00 11 
0b6ed     7D 30 00 12 
0b6f1     80 50 00 00 
0b6f5     00 00 00 10 | 	byte	$8f, $e0, $00, $11, $7d, $30, $00, $12, $80, $50, $00, $00, $00, $00, $00, $10
0b6f9     AA 10 00 00 
0b6fd     00 00 00 00 
0b701     00 00 00 00 
0b705     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b709     00 00 00 11 
0b70d     7D 30 00 00 
0b711     00 00 00 00 
0b715     D6 F0 00 00 | 	byte	$00, $00, $00, $11, $7d, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0b719     8F E0 00 11 
0b71d     7D 30 00 12 
0b721     FA 50 00 00 
0b725     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $7d, $30, $00, $12, $fa, $50, $00, $00, $00, $00, $00, $00
0b729     8F E0 00 00 
0b72d     00 00 00 00 
0b731     00 00 00 00 
0b735     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b739     AA 10 00 11 
0b73d     7D 30 00 11 
0b741     FC 50 00 00 
0b745     00 00 00 00 | 	byte	$aa, $10, $00, $11, $7d, $30, $00, $11, $fc, $50, $00, $00, $00, $00, $00, $00
0b749     00 00 00 11 
0b74d     7D 30 00 00 
0b751     00 00 00 10 
0b755     BE 00 00 00 | 	byte	$00, $00, $00, $11, $7d, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00
0b759     8F E0 00 11 
0b75d     AC 30 00 12 
0b761     3A 50 00 00 
0b765     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $ac, $30, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b769     8F E0 00 00 
0b76d     00 00 00 12 
0b771     3A 50 00 00 
0b775     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $10
0b779     AA 10 00 00 
0b77d     00 00 00 00 
0b781     00 00 00 00 
0b785     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b789     00 00 00 11 
0b78d     AC 30 00 00 
0b791     00 00 00 00 
0b795     D6 F0 00 00 | 	byte	$00, $00, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0b799     8F E0 00 11 
0b79d     AC 30 00 00 
0b7a1     00 00 00 00 
0b7a5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7a9     8F E0 00 00 
0b7ad     00 00 00 00 
0b7b1     00 00 00 00 
0b7b5     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b7b9     AA 10 00 11 
0b7bd     AC 30 00 00 
0b7c1     00 00 00 00 
0b7c5     00 00 00 00 | 	byte	$aa, $10, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7c9     00 00 00 11 
0b7cd     AC 30 00 00 
0b7d1     00 00 00 10 
0b7d5     BE 00 00 00 | 	byte	$00, $00, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00
0b7d9     8F E0 00 00 
0b7dd     00 00 00 00 
0b7e1     00 00 00 00 
0b7e5     00 00 00 00 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7e9     8F E0 00 11 
0b7ed     AC 30 00 00 
0b7f1     00 00 00 00 
0b7f5     00 00 00 10 | 	byte	$8f, $e0, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b7f9     AA 10 00 12 
0b7fd     80 20 00 12 
0b801     80 50 00 00 
0b805     00 00 00 00 | 	byte	$aa, $10, $00, $12, $80, $20, $00, $12, $80, $50, $00, $00, $00, $00, $00, $00
0b809     00 00 00 00 
0b80d     00 00 00    | 	byte	$00[7]
0b810     12 80 5C 20 
0b814     00 D6 F0 00 
0b818     00 8F E0 00 
0b81c     12 80 20 00 | 	byte	$12, $80, $5c, $20, $00, $d6, $f0, $00, $00, $8f, $e0, $00, $12, $80, $20, $00
0b820     12 80 50 00 
0b824     00 00 00 00 
0b828     00 8F E0 00 
0b82c     00 00 00 00 | 	byte	$12, $80, $50, $00, $00, $00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00
0b830     12 80 5C 20 
0b834     10 BE 00 00 
0b838     10 AA 10 00 
0b83c     12 5C 20 00 | 	byte	$12, $80, $5c, $20, $10, $be, $00, $00, $10, $aa, $10, $00, $12, $5c, $20, $00
0b840     12 5C 50 00 
0b844     00 00 00 00 
0b848     00 00 00 00 
0b84c     00 00 00 00 | 	byte	$12, $5c, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b850     12 5C 5C 20 
0b854     10 BE 00 00 
0b858     00 8F E0 00 
0b85c     12 3A 30 00 | 	byte	$12, $5c, $5c, $20, $10, $be, $00, $00, $00, $8f, $e0, $00, $12, $3a, $30, $00
0b860     00 00 00 00 
0b864     00 00 00 00 
0b868     00          | 	byte	$00[9]
0b869     8F E0 00 00 
0b86d     00 00 00 00 
0b871     00 00 00 00 
0b875     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b879     AA 10 00 00 
0b87d     00 00 00 12 
0b881     3A 50 00 00 
0b885     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b889     00 00 00 12 
0b88d     3A 30 00 00 
0b891     00 00 00 00 
0b895     D6 F0 00 00 | 	byte	$00, $00, $00, $12, $3a, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0b899     8F E0 00 12 
0b89d     3A 30 00 12 
0b8a1     3A 50 00 00 
0b8a5     00 00 00 00 | 	byte	$8f, $e0, $00, $12, $3a, $30, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b8a9     8F E0 00 00 
0b8ad     00 00 00 00 
0b8b1     00 00 00 00 
0b8b5     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b8b9     AA 10 00 00 
0b8bd     00 00 00 12 
0b8c1     3A 50 00 00 
0b8c5     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b8c9     00 00 00 11 
0b8cd     7D 30 00 11 
0b8d1     FC 50 00 10 
0b8d5     BE 00 00 00 | 	byte	$00, $00, $00, $11, $7d, $30, $00, $11, $fc, $50, $00, $10, $be, $00, $00, $00
0b8d9     8F E0 00 00 
0b8dd     00 00 00 00 
0b8e1     00 00 00 00 
0b8e5     00 00 00 00 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8e9     8F E0 00 11 
0b8ed     7D 30 00 12 
0b8f1     80 50 00 00 
0b8f5     00 00 00 10 | 	byte	$8f, $e0, $00, $11, $7d, $30, $00, $12, $80, $50, $00, $00, $00, $00, $00, $10
0b8f9     AA 10 00 00 
0b8fd     00 00 00 00 
0b901     00 00 00 00 
0b905     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b909     00 00 00 11 
0b90d     7D 30 00 00 
0b911     00 00 00 00 
0b915     D6 F0 00 00 | 	byte	$00, $00, $00, $11, $7d, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0b919     8F E0 00 11 
0b91d     7D 30 00 12 
0b921     FA 50 00 00 
0b925     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $7d, $30, $00, $12, $fa, $50, $00, $00, $00, $00, $00, $00
0b929     8F E0 00 00 
0b92d     00 00 00 00 
0b931     00 00 00 00 
0b935     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b939     AA 10 00 11 
0b93d     7D 30 00 11 
0b941     FC 50 00 10 
0b945     BE 00 00 00 | 	byte	$aa, $10, $00, $11, $7d, $30, $00, $11, $fc, $50, $00, $10, $be, $00, $00, $00
0b949     00 00 00 11 
0b94d     7D 30 00 00 
0b951     00 00 00 10 
0b955     BE 00 00 00 | 	byte	$00, $00, $00, $11, $7d, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00
0b959     8F E0 00 11 
0b95d     AC 30 00 12 
0b961     3A 50 00 00 
0b965     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $ac, $30, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0b969     8F E0 00 00 
0b96d     00 00 00 12 
0b971     3A 50 00 00 
0b975     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $10
0b979     AA 10 00 00 
0b97d     00 00 00 00 
0b981     00 00 00 00 
0b985     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b989     00 00 00 11 
0b98d     AC 30 00 00 
0b991     00 00 00 00 
0b995     D6 F0 00 00 | 	byte	$00, $00, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0b999     8F E0 00 11 
0b99d     AC 30 00 00 
0b9a1     00 00 00 00 
0b9a5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9a9     8F E0 00 00 
0b9ad     00 00 00 00 
0b9b1     00 00 00 00 
0b9b5     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0b9b9     AA 10 00 11 
0b9bd     AC 30 00 00 
0b9c1     00 00 00 10 
0b9c5     BE 00 00 00 | 	byte	$aa, $10, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00
0b9c9     00 00 00 11 
0b9cd     AC 30 00 00 
0b9d1     00 00 00 10 
0b9d5     BE 00 00 00 | 	byte	$00, $00, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00
0b9d9     8F E0 00 00 
0b9dd     00 00 00 00 
0b9e1     00 00 00 00 
0b9e5     00 00 00 00 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9e9     8F E0 00 11 
0b9ed     AC 30 00 00 
0b9f1     00 00 00 10 
0b9f5     BE 00 00 10 | 	byte	$8f, $e0, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $10
0b9f9     AA 10 00 12 
0b9fd     80 20 00 12 
0ba01     80 50 00 00 
0ba05     00 00 00 00 | 	byte	$aa, $10, $00, $12, $80, $20, $00, $12, $80, $50, $00, $00, $00, $00, $00, $00
0ba09     00 00 00 00 
0ba0d     00 00 00    | 	byte	$00[7]
0ba10     12 80 5C 20 
0ba14     00 D6 F0 00 
0ba18     10 AA 10 00 
0ba1c     12 80 20 00 | 	byte	$12, $80, $5c, $20, $00, $d6, $f0, $00, $10, $aa, $10, $00, $12, $80, $20, $00
0ba20     12 80 50 00 
0ba24     00 00 00 00 
0ba28     00 00 00 00 
0ba2c     00 00 00 00 | 	byte	$12, $80, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba30     12 80 5C 20 
0ba34     00 D6 F0 00 
0ba38     10 AA 10 00 
0ba3c     12 5C 20 00 | 	byte	$12, $80, $5c, $20, $00, $d6, $f0, $00, $10, $aa, $10, $00, $12, $5c, $20, $00
0ba40     12 5C 50 00 
0ba44     00 00 00 00 
0ba48     00 00 00 00 
0ba4c     00 00 00 00 | 	byte	$12, $5c, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba50     12 5C 5C 20 
0ba54     10 BE 00 00 
0ba58     00 8F EF 06 
0ba5c     11 AC 30 00 | 	byte	$12, $5c, $5c, $20, $10, $be, $00, $00, $00, $8f, $ef, $06, $11, $ac, $30, $00
0ba60     00 00 00 00 
0ba64     00 00 00 00 
0ba68     00          | 	byte	$00[9]
0ba69     8F E0 00 00 
0ba6d     00 00 00 00 
0ba71     00 00 00 00 
0ba75     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0ba79     AA 10 00 11 
0ba7d     AC 30 00 12 
0ba81     3A 50 00 00 
0ba85     00 00 00 00 | 	byte	$aa, $10, $00, $11, $ac, $30, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $00
0ba89     00 00 00 00 
0ba8d     00 00 00 00 
0ba91     00 00 00 00 | 	byte	$00[12]
0ba95     D6 F0 00 00 
0ba99     8F E0 00 11 
0ba9d     AC 30 00 12 
0baa1     3A 50 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $11, $ac, $30, $00, $12, $3a, $50, $00, $00
0baa5     00 00 00 00 
0baa9     8F E0 00 00 
0baad     00 00 00 00 
0bab1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bab5     00 00 00 10 
0bab9     AA 10 00 00 
0babd     00 00 00 12 
0bac1     3A 50 00 00 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00
0bac5     00 00 00 00 
0bac9     00 00 00    | 	byte	$00[7]
0bacc     11 AC 30 00 
0bad0     11 E0 50 00 
0bad4     10 BE 00 00 
0bad8     00 8F E0 00 | 	byte	$11, $ac, $30, $00, $11, $e0, $50, $00, $10, $be, $00, $00, $00, $8f, $e0, $00
0badc     00 00 00 00 
0bae0     00 00 00 00 
0bae4     00 00 00 00 
0bae8     00          | 	byte	$00[13]
0bae9     8F E0 00 11 
0baed     AC 30 00 12 
0baf1     3A 50 00 00 
0baf5     00 00 00 10 | 	byte	$8f, $e0, $00, $11, $ac, $30, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $10
0baf9     AA 10 00 00 
0bafd     00 00 00 00 
0bb01     00 00 00 00 
0bb05     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb09     00 00 00 11 
0bb0d     AC 30 00 00 
0bb11     00 00 00 00 
0bb15     D6 F0 00 00 | 	byte	$00, $00, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0bb19     8F E0 00 11 
0bb1d     AC 30 00 00 
0bb21     00 00 00 00 
0bb25     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb29     8F E0 00 00 
0bb2d     00 00 00 00 
0bb31     00 00 00 00 
0bb35     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0bb39     AA 10 00 11 
0bb3d     AC 30 00 00 
0bb41     00 00 00 00 
0bb45     00 00 00 00 | 	byte	$aa, $10, $00, $11, $ac, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb49     00 00 00 11 
0bb4d     94 30 00 00 
0bb51     00 00 00 10 
0bb55     BE 00 00 00 | 	byte	$00, $00, $00, $11, $94, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00
0bb59     8F E0 00 11 
0bb5d     7D 30 00 00 
0bb61     00 00 00 00 
0bb65     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $7d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb69     8F E0 00 00 
0bb6d     00 00 00 00 
0bb71     00 00 00 00 
0bb75     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0bb79     AA 10 00 11 
0bb7d     7D 30 00 11 
0bb81     FC 50 00 00 
0bb85     00 00 00 00 | 	byte	$aa, $10, $00, $11, $7d, $30, $00, $11, $fc, $50, $00, $00, $00, $00, $00, $00
0bb89     00 00 00 00 
0bb8d     00 00 00 00 
0bb91     00 00 00 00 | 	byte	$00[12]
0bb95     D6 F0 00 00 
0bb99     8F E0 00 11 
0bb9d     7D 30 00 11 
0bba1     FC 50 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $11, $7d, $30, $00, $11, $fc, $50, $00, $00
0bba5     00 00 00 00 
0bba9     8F E0 00 00 
0bbad     00 00 00 00 
0bbb1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbb5     00 00 00 10 
0bbb9     AA 10 00 00 
0bbbd     00 00 00 11 
0bbc1     FC 50 00 00 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $11, $fc, $50, $00, $00
0bbc5     00 00 00 00 
0bbc9     00 00 00    | 	byte	$00[7]
0bbcc     11 7D 30 00 
0bbd0     11 FC 50 00 
0bbd4     10 BE 00 00 
0bbd8     00 8F E0 00 | 	byte	$11, $7d, $30, $00, $11, $fc, $50, $00, $10, $be, $00, $00, $00, $8f, $e0, $00
0bbdc     00 00 00 00 
0bbe0     00 00 00 00 
0bbe4     00 00 00 00 
0bbe8     00          | 	byte	$00[13]
0bbe9     8F E0 00 11 
0bbed     7D 30 00 11 
0bbf1     FC 50 00 00 
0bbf5     00 00 00 10 | 	byte	$8f, $e0, $00, $11, $7d, $30, $00, $11, $fc, $50, $00, $00, $00, $00, $00, $10
0bbf9     AA 10 00 00 
0bbfd     00 00 00 00 
0bc01     00 00 00 00 
0bc05     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc09     00 00 00 11 
0bc0d     7D 30 00 00 
0bc11     00 00 00 00 
0bc15     D6 F0 00 00 | 	byte	$00, $00, $00, $11, $7d, $30, $00, $00, $00, $00, $00, $00, $d6, $f0, $00, $00
0bc19     8F E0 00 11 
0bc1d     7D 30 00 00 
0bc21     00 00 00 00 
0bc25     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $7d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc29     8F E0 00 00 
0bc2d     00 00 00 00 
0bc31     00 00 00 10 
0bc35     BE 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $be, $00, $00, $10
0bc39     AA 10 00 11 
0bc3d     7D 30 00 11 
0bc41     FC 50 00 00 
0bc45     00 00 00 00 | 	byte	$aa, $10, $00, $11, $7d, $30, $00, $11, $fc, $50, $00, $00, $00, $00, $00, $00
0bc49     00 00 00 00 
0bc4d     00 00 00 00 
0bc51     00 00 00    | 	byte	$00[11]
0bc54     10 BE 00 00 
0bc58     00 8F E0 00 
0bc5c     12 3A 30 00 
0bc60     12 3A 50 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $12, $3a, $30, $00, $12, $3a, $50, $00
0bc64     00 00 00 00 
0bc68     00          | 	byte	$00[5]
0bc69     8F E0 00 00 
0bc6d     00 00 00 12 
0bc71     3A 50 00 00 
0bc75     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $12, $3a, $50, $00, $00, $00, $00, $00, $10
0bc79     AA 10 00 12 
0bc7d     3A 30 00 00 
0bc81     00 00 00 00 
0bc85     00 00 00 00 | 	byte	$aa, $10, $00, $12, $3a, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc89     00 00 00 00 
0bc8d     00 00 00 00 
0bc91     00 00 00 00 | 	byte	$00[12]
0bc95     D6 F0 00 00 
0bc99     8F E0 00 12 
0bc9d     3A 30 00 00 
0bca1     00 00 00 00 | 	byte	$d6, $f0, $00, $00, $8f, $e0, $00, $12, $3a, $30, $00, $00, $00, $00, $00, $00
0bca5     00 00 00 00 
0bca9     8F E0 00 00 
0bcad     00 00 00 00 
0bcb1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcb5     00 00 00 10 
0bcb9     AA 10 00 12 
0bcbd     3A 30 00 00 
0bcc1     00 00 00 00 | 	byte	$00, $00, $00, $10, $aa, $10, $00, $12, $3a, $30, $00, $00, $00, $00, $00, $00
0bcc5     00 00 00 00 
0bcc9     00 00 00    | 	byte	$00[7]
0bccc     11 7D 30 00 
0bcd0     00 00 00 00 
0bcd4     10 BE 00 00 
0bcd8     00 8F E0 00 | 	byte	$11, $7d, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00, $8f, $e0, $00
0bcdc     00 00 00 00 
0bce0     00 00 00 00 
0bce4     00 00 00 00 
0bce8     00          | 	byte	$00[13]
0bce9     8F E0 00 11 
0bced     7D 30 00 00 
0bcf1     00 00 00 00 
0bcf5     00 00 00 10 | 	byte	$8f, $e0, $00, $11, $7d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
0bcf9     AA 10 00 00 
0bcfd     00 00 00 11 
0bd01     FC 50 00 00 
0bd05     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $11, $fc, $50, $00, $00, $00, $00, $00, $00
0bd09     00 00 00 11 
0bd0d     7D 30 00 11 
0bd11     FC 5C 20 00 
0bd15     D6 F0 00 00 | 	byte	$00, $00, $00, $11, $7d, $30, $00, $11, $fc, $5c, $20, $00, $d6, $f0, $00, $00
0bd19     8F E0 00 11 
0bd1d     7D 30 00 12 
0bd21     80 50 00 00 
0bd25     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $7d, $30, $00, $12, $80, $50, $00, $00, $00, $00, $00, $00
0bd29     8F E0 00 00 
0bd2d     00 00 00 12 
0bd31     80 5C 20 00 
0bd35     00 00 00 10 | 	byte	$8f, $e0, $00, $00, $00, $00, $00, $12, $80, $5c, $20, $00, $00, $00, $00, $10
0bd39     AA 10 00 11 
0bd3d     7D 30 00 12 
0bd41     FA 50 00 10 
0bd45     BE 00 00 00 | 	byte	$aa, $10, $00, $11, $7d, $30, $00, $12, $fa, $50, $00, $10, $be, $00, $00, $00
0bd49     00 00 00 00 
0bd4d     00 00 00    | 	byte	$00[7]
0bd50     12 FA 5C 20 
0bd54     10 BE 00 00 
0bd58     00 8F E0 00 
0bd5c     11 AC 30 00 | 	byte	$12, $fa, $5c, $20, $10, $be, $00, $00, $00, $8f, $e0, $00, $11, $ac, $30, $00
0bd60     12 3A 50 00 
0bd64     00 00 00 00 
0bd68     00 8F E0 00 
0bd6c     11 AC 3C 30 | 	byte	$12, $3a, $50, $00, $00, $00, $00, $00, $00, $8f, $e0, $00, $11, $ac, $3c, $30
0bd70     12 3A 50 00 
0bd74     00 00 00 00 
0bd78     10 AA 10 00 
0bd7c     11 AC 3C 20 | 	byte	$12, $3a, $50, $00, $00, $00, $00, $00, $10, $aa, $10, $00, $11, $ac, $3c, $20
0bd80     12 3A 50 00 
0bd84     00 00 00 00 
0bd88     00 00 00 00 
0bd8c     11 AC 3C 10 | 	byte	$12, $3a, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $ac, $3c, $10
0bd90     12 3A 50 00 
0bd94     00 D6 F0 00 
0bd98     00 8F E0 00 
0bd9c     11 AC 3C 08 | 	byte	$12, $3a, $50, $00, $00, $d6, $f0, $00, $00, $8f, $e0, $00, $11, $ac, $3c, $08
0bda0     12 3A 50 00 
0bda4     00 00 00 00 
0bda8     00 8F E0 00 
0bdac     00 00 00 00 | 	byte	$12, $3a, $50, $00, $00, $00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00
0bdb0     12 3A 50 00 
0bdb4     00 00 00 00 
0bdb8     10 AA 10 00 
0bdbc     00 00 00 00 | 	byte	$12, $3a, $50, $00, $00, $00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00
0bdc0     12 3A 50 00 
0bdc4     10 BE 00 00 
0bdc8     00 00 00 00 
0bdcc     11 AC 30 00 | 	byte	$12, $3a, $50, $00, $10, $be, $00, $00, $00, $00, $00, $00, $11, $ac, $30, $00
0bdd0     12 80 50 00 
0bdd4     10 BE 00 00 
0bdd8     00 8F E0 00 
0bddc     00 00 00 00 | 	byte	$12, $80, $50, $00, $10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00
0bde0     12 3A 50 00 
0bde4     00 00 00 00 
0bde8     00 8F E0 00 
0bdec     11 AC 30 00 | 	byte	$12, $3a, $50, $00, $00, $00, $00, $00, $00, $8f, $e0, $00, $11, $ac, $30, $00
0bdf0     12 80 50 00 
0bdf4     10 BE 00 00 
0bdf8     10 AA 10 00 
0bdfc     12 80 20 00 | 	byte	$12, $80, $50, $00, $10, $be, $00, $00, $10, $aa, $10, $00, $12, $80, $20, $00
0be00     12 80 50 00 
0be04     00 00 00 00 
0be08     00 00 00 00 
0be0c     12 80 2C 20 | 	byte	$12, $80, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $12, $80, $2c, $20
0be10     12 80 5C 20 
0be14     00 D6 F0 00 
0be18     10 AA 10 00 
0be1c     12 80 20 00 | 	byte	$12, $80, $5c, $20, $00, $d6, $f0, $00, $10, $aa, $10, $00, $12, $80, $20, $00
0be20     12 80 50 00 
0be24     00 00 00 00 
0be28     00 00 00 00 
0be2c     12 80 2C 20 | 	byte	$12, $80, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $12, $80, $2c, $20
0be30     12 80 5C 20 
0be34     00 D6 F0 00 
0be38     10 AA 10 00 
0be3c     12 5C 20 00 | 	byte	$12, $80, $5c, $20, $00, $d6, $f0, $00, $10, $aa, $10, $00, $12, $5c, $20, $00
0be40     12 5C 50 00 
0be44     00 00 00 00 
0be48     00 00 00 00 
0be4c     12 5C 2C 20 | 	byte	$12, $5c, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $12, $5c, $2c, $20
0be50     12 5C 5C 20 
0be54     10 BE 00 00 
0be58     00 8F EF 03 
0be5c     11 1D 30 00 | 	byte	$12, $5c, $5c, $20, $10, $be, $00, $00, $00, $8f, $ef, $03, $11, $1d, $30, $00
0be60     11 1D 40 00 
0be64     00 00 00 00 
0be68     00 00 00 00 
0be6c     00 00 00 00 | 	byte	$11, $1d, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be70     00 00 00 00 
0be74     00 00 00 00 
0be78     00          | 	byte	$00[9]
0be79     8F E0 00 11 
0be7d     1D 30 00 00 
0be81     00 00 00 00 
0be85     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be89     8F E0 00 11 
0be8d     1D 30 00 00 
0be91     00 00 00 00 
0be95     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be99     8F E0 00 11 
0be9d     1D 30 00 00 
0bea1     00 00 00 00 
0bea5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bea9     00 00 00 00 
0bead     00 00 00 00 
0beb1     00 00 00 00 
0beb5     00 00 00 00 | 	byte	$00[16]
0beb9     8F E0 00 11 
0bebd     1D 30 00 11 
0bec1     1D 40 00 00 
0bec5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $11, $1d, $40, $00, $00, $00, $00, $00, $00
0bec9     00 00 00 00 
0becd     00 00 00 00 
0bed1     00 00 00 00 | 	byte	$00[12]
0bed5     D6 F0 00 10 
0bed9     AA 10 00 11 
0bedd     1D 30 00 11 
0bee1     1D 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $11, $1d, $30, $00, $11, $1d, $40, $00, $00
0bee5     00 00 00 00 
0bee9     00 00 00 00 
0beed     00 00 00 00 
0bef1     00 00 00 00 
0bef5     00 00 00 00 
0bef9     00 00 00    | 	byte	$00[23]
0befc     11 1D 30 00 
0bf00     00 00 00 00 
0bf04     00 00 00 00 
0bf08     00 00 00 00 | 	byte	$11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf0c     00 00 00 00 
0bf10     00 00 00 00 
0bf14     00 00 00 00 
0bf18     00          | 	byte	$00[13]
0bf19     8F E0 00 11 
0bf1d     1D 30 00 00 
0bf21     00 00 00 00 
0bf25     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf29     00 00 00 00 
0bf2d     00 00 00 00 
0bf31     00 00 00 00 
0bf35     00 00 00 00 | 	byte	$00[16]
0bf39     8F E0 00 10 
0bf3d     BE 30 00 10 
0bf41     BE 40 00 00 
0bf45     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0bf49     00 00 00 00 
0bf4d     00 00 00 00 
0bf51     00 00 00    | 	byte	$00[11]
0bf54     10 BE 00 00 
0bf58     00 8F E0 00 
0bf5c     00 00 00 00 
0bf60     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf64     00 00 00 00 
0bf68     00 00 00 00 
0bf6c     00 00 00 00 
0bf70     00 00 00 00 
0bf74     00 00 00 00 
0bf78     00          | 	byte	$00[21]
0bf79     8F E0 00 10 
0bf7d     BE 30 00 10 
0bf81     BE 40 00 00 
0bf85     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0bf89     8F E0 00 10 
0bf8d     BE 30 00 10 
0bf91     BE 40 00 00 
0bf95     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0bf99     8F E0 00 10 
0bf9d     BE 30 00 10 
0bfa1     BE 40 00 00 
0bfa5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0bfa9     00 00 00 00 
0bfad     00 00 00 00 
0bfb1     00 00 00 00 
0bfb5     00 00 00 00 | 	byte	$00[16]
0bfb9     8F E0 00 10 
0bfbd     BE 30 00 10 
0bfc1     BE 40 00 00 
0bfc5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0bfc9     00 00 00 00 
0bfcd     00 00 00 00 
0bfd1     00 00 00 00 | 	byte	$00[12]
0bfd5     D6 F0 00 10 
0bfd9     AA 10 00 10 
0bfdd     BE 30 00 10 
0bfe1     BE 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00
0bfe5     00 00 00 00 
0bfe9     00 00 00 00 
0bfed     00 00 00 00 
0bff1     00 00 00 00 
0bff5     00 00 00    | 	byte	$00[19]
0bff8     10 AA 10 00 
0bffc     10 BE 30 00 
0c000     10 BE 40 00 
0c004     00 00 00 00 | 	byte	$10, $aa, $10, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00
0c008     00 00 00 00 
0c00c     00 00 00 00 
0c010     00 00 00 00 
0c014     00 00 00 00 
0c018     00 00 00 00 | 	byte	$00[20]
0c01c     10 BE 30 00 
0c020     10 BE 40 00 
0c024     00 00 00 00 
0c028     00 00 00 00 | 	byte	$10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c02c     00 00 00 00 
0c030     00 00 00 00 | 	byte	$00[8]
0c034     10 BE 00 00 
0c038     00 8F E0 00 
0c03c     10 BE 30 00 
0c040     10 BE 40 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00
0c044     00 00 00 00 
0c048     00 00 00 00 
0c04c     00 00 00 00 
0c050     00 00 00 00 | 	byte	$00[16]
0c054     10 BE 00 00 
0c058     00 8F E0 00 
0c05c     10 D6 30 00 
0c060     10 D6 40 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $10, $d6, $40, $00
0c064     00 00 00 00 
0c068     00 00 00 00 
0c06c     00 00 00 00 
0c070     00 00 00 00 
0c074     00 00 00 00 
0c078     00          | 	byte	$00[21]
0c079     8F E0 00 10 
0c07d     D6 30 00 00 
0c081     00 00 00 00 
0c085     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c089     8F E0 00 10 
0c08d     D6 30 00 00 
0c091     00 00 00 00 
0c095     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c099     8F E0 00 10 
0c09d     D6 30 00 00 
0c0a1     00 00 00 00 
0c0a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0a9     00 00 00 00 
0c0ad     00 00 00 00 
0c0b1     00 00 00 00 
0c0b5     00 00 00 00 | 	byte	$00[16]
0c0b9     8F E0 00 10 
0c0bd     D6 30 00 10 
0c0c1     D6 40 00 00 
0c0c5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00
0c0c9     00 00 00 00 
0c0cd     00 00 00 00 
0c0d1     00 00 00 00 | 	byte	$00[12]
0c0d5     D6 F0 00 10 
0c0d9     AA 10 00 10 
0c0dd     D6 30 00 10 
0c0e1     D6 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00
0c0e5     00 00 00 00 
0c0e9     00 00 00 00 
0c0ed     00 00 00 00 
0c0f1     00 00 00 00 
0c0f5     00 00 00 00 
0c0f9     00 00 00    | 	byte	$00[23]
0c0fc     10 D6 30 00 
0c100     10 D6 40 00 
0c104     00 00 00 00 
0c108     00 00 00 00 | 	byte	$10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c10c     00 00 00 00 
0c110     10 D6 40 00 
0c114     00 00 00 00 
0c118     00 8F E0 00 | 	byte	$00, $00, $00, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00, $8f, $e0, $00
0c11c     10 D6 30 00 
0c120     10 D6 40 00 
0c124     00 00 00 00 
0c128     00 00 00 00 | 	byte	$10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c12c     00 00 00 00 
0c130     00 00 00 00 
0c134     00 00 00 00 
0c138     00          | 	byte	$00[13]
0c139     8F E0 00 10 
0c13d     D6 30 00 10 
0c141     D6 40 00 00 
0c145     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00
0c149     00 00 00 00 
0c14d     00 00 00 00 
0c151     00 00 00    | 	byte	$00[11]
0c154     10 BE 00 00 
0c158     00 8F E0 00 
0c15c     00 00 00 00 
0c160     10 D6 40 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $10, $d6, $40, $00
0c164     00 00 00 00 
0c168     00 00 00 00 
0c16c     00 00 00 00 
0c170     00 00 00 00 
0c174     00 00 00 00 
0c178     00          | 	byte	$00[21]
0c179     8F E0 00 11 
0c17d     40 20 00 00 
0c181     00 00 00 00 
0c185     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $40, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c189     8F E0 00 11 
0c18d     40 20 00 00 
0c191     00 00 00 00 
0c195     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $40, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c199     8F E0 00 11 
0c19d     40 20 00 11 
0c1a1     40 40 00 00 
0c1a5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $40, $20, $00, $11, $40, $40, $00, $00, $00, $00, $00, $00
0c1a9     00 00 00 00 
0c1ad     00 00 00 00 
0c1b1     00 00 00    | 	byte	$00[11]
0c1b4     10 BE 00 00 
0c1b8     00 8F E0 00 
0c1bc     11 40 20 00 
0c1c0     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $11, $40, $20, $00, $00, $00, $00, $00
0c1c4     00 00 00 00 
0c1c8     00 00 00 00 
0c1cc     00 00 00 00 
0c1d0     00 00 00 00 
0c1d4     00          | 	byte	$00[17]
0c1d5     D6 F0 00 10 
0c1d9     AA 10 00 11 
0c1dd     40 20 00 11 
0c1e1     40 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $11, $40, $20, $00, $11, $40, $40, $00, $00
0c1e5     00 00 00 00 
0c1e9     00 00 00 00 
0c1ed     00 00 00 00 
0c1f1     00 00 00 00 
0c1f5     00 00 00    | 	byte	$00[19]
0c1f8     10 AA 10 00 
0c1fc     11 40 20 00 
0c200     11 40 40 00 
0c204     00 00 00 00 | 	byte	$10, $aa, $10, $00, $11, $40, $20, $00, $11, $40, $40, $00, $00, $00, $00, $00
0c208     00 00 00 00 
0c20c     00 00 00 00 
0c210     00 00 00 00 
0c214     00 00 00 00 | 	byte	$00[16]
0c218     10 AA 10 00 
0c21c     11 2E 20 00 
0c220     11 2E 40 00 
0c224     00 00 00 00 | 	byte	$10, $aa, $10, $00, $11, $2e, $20, $00, $11, $2e, $40, $00, $00, $00, $00, $00
0c228     00 00 00 00 
0c22c     00 00 00 00 
0c230     00 00 00 00 | 	byte	$00[12]
0c234     10 BE 00 00 
0c238     10 AA 10 00 
0c23c     11 2E 20 00 
0c240     11 2E 40 00 | 	byte	$10, $be, $00, $00, $10, $aa, $10, $00, $11, $2e, $20, $00, $11, $2e, $40, $00
0c244     10 BE 00 00 
0c248     00 00 00 00 
0c24c     00 00 00 00 
0c250     11 2E 40 00 | 	byte	$10, $be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $2e, $40, $00
0c254     10 BE 00 00 
0c258     00 8F EF 03 
0c25c     11 1D 30 00 
0c260     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $ef, $03, $11, $1d, $30, $00, $00, $00, $00, $00
0c264     00 00 00 00 
0c268     00 00 00 00 
0c26c     00 00 00 00 
0c270     00 00 00 00 
0c274     00 00 00 00 
0c278     00          | 	byte	$00[21]
0c279     8F E0 00 11 
0c27d     1D 30 00 00 
0c281     00 00 00 00 
0c285     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c289     8F E0 00 11 
0c28d     1D 30 00 00 
0c291     00 00 00 00 
0c295     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c299     8F E0 00 11 
0c29d     1D 30 00 11 
0c2a1     1D 60 00 00 
0c2a5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $11, $1d, $60, $00, $00, $00, $00, $00, $00
0c2a9     00 00 00 00 
0c2ad     00 00 00 00 
0c2b1     00 00 00 00 
0c2b5     00 00 00 00 | 	byte	$00[16]
0c2b9     8F E0 00 11 
0c2bd     1D 30 00 00 
0c2c1     00 00 00 00 
0c2c5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c2c9     00 00 00 00 
0c2cd     00 00 00 00 
0c2d1     00 00 00 00 | 	byte	$00[12]
0c2d5     D6 F0 00 10 
0c2d9     AA 10 00 11 
0c2dd     1D 30 00 11 
0c2e1     1D 60 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $11, $1d, $30, $00, $11, $1d, $60, $00, $00
0c2e5     00 00 00 00 
0c2e9     00 00 00 00 
0c2ed     00 00 00 00 
0c2f1     00 00 00 00 
0c2f5     00 00 00 00 
0c2f9     00 00 00    | 	byte	$00[23]
0c2fc     11 1D 30 00 
0c300     00 00 00 00 
0c304     00 00 00 00 
0c308     00 00 00 00 | 	byte	$11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c30c     00 00 00 00 
0c310     00 00 00 00 
0c314     00 00 00 00 
0c318     00          | 	byte	$00[13]
0c319     8F E0 00 11 
0c31d     1D 30 00 11 
0c321     1D 60 00 00 
0c325     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $11, $1d, $60, $00, $00, $00, $00, $00, $00
0c329     00 00 00 00 
0c32d     00 00 00 00 
0c331     00 00 00 00 
0c335     00 00 00 00 | 	byte	$00[16]
0c339     8F E0 00 10 
0c33d     BE 30 00 10 
0c341     FE 60 00 00 
0c345     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $fe, $60, $00, $00, $00, $00, $00, $00
0c349     00 00 00 00 
0c34d     00 00 00 00 
0c351     00 00 00    | 	byte	$00[11]
0c354     10 BE 00 00 
0c358     00 8F E0 00 
0c35c     00 00 00 00 
0c360     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c364     00 00 00 00 
0c368     00 00 00 00 
0c36c     00 00 00 00 
0c370     00 00 00 00 
0c374     00 00 00 00 
0c378     00          | 	byte	$00[21]
0c379     8F E0 00 10 
0c37d     BE 30 00 11 
0c381     40 60 00 00 
0c385     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $11, $40, $60, $00, $00, $00, $00, $00, $00
0c389     8F E0 00 10 
0c38d     BE 30 00 00 
0c391     00 00 00 00 
0c395     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c399     8F E0 00 10 
0c39d     BE 30 00 00 
0c3a1     00 00 00 00 
0c3a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c3a9     00 00 00 00 
0c3ad     00 00 00 00 
0c3b1     00 00 00 00 
0c3b5     00 00 00 00 | 	byte	$00[16]
0c3b9     8F E0 00 10 
0c3bd     BE 30 00 11 
0c3c1     7D 60 00 00 
0c3c5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $11, $7d, $60, $00, $00, $00, $00, $00, $00
0c3c9     00 00 00 00 
0c3cd     00 00 00 00 
0c3d1     00 00 00 00 | 	byte	$00[12]
0c3d5     D6 F0 00 10 
0c3d9     AA 10 00 10 
0c3dd     BE 30 00 00 
0c3e1     00 00 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00
0c3e5     00 00 00 00 
0c3e9     00 00 00 00 
0c3ed     00 00 00 00 
0c3f1     00 00 00 00 
0c3f5     00 00 00    | 	byte	$00[19]
0c3f8     10 AA 10 00 
0c3fc     10 BE 30 00 
0c400     10 FE 60 00 
0c404     00 00 00 00 | 	byte	$10, $aa, $10, $00, $10, $be, $30, $00, $10, $fe, $60, $00, $00, $00, $00, $00
0c408     00 00 00 00 
0c40c     00 00 00 00 
0c410     00 00 00 00 
0c414     00 00 00 00 
0c418     00 00 00 00 | 	byte	$00[20]
0c41c     10 BE 30 00 
0c420     00 00 00 00 
0c424     00 00 00 00 
0c428     00 00 00 00 | 	byte	$10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c42c     00 00 00 00 
0c430     00 00 00 00 | 	byte	$00[8]
0c434     10 BE 00 00 
0c438     00 8F E0 00 
0c43c     10 BE 30 00 
0c440     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00
0c444     00 00 00 00 
0c448     00 00 00 00 
0c44c     00 00 00 00 
0c450     00 00 00 00 | 	byte	$00[16]
0c454     10 BE 00 00 
0c458     00 8F E0 00 
0c45c     10 D6 30 00 
0c460     11 1D 60 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $11, $1d, $60, $00
0c464     00 00 00 00 
0c468     00 00 00 00 
0c46c     00 00 00 00 
0c470     00 00 00 00 
0c474     00 00 00 00 
0c478     00          | 	byte	$00[21]
0c479     8F E0 00 10 
0c47d     D6 30 00 11 
0c481     1D 60 00 00 
0c485     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $11, $1d, $60, $00, $00, $00, $00, $00, $00
0c489     8F E0 00 10 
0c48d     D6 30 00 00 
0c491     00 00 00 00 
0c495     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c499     8F E0 00 10 
0c49d     D6 30 00 00 
0c4a1     00 00 00 00 
0c4a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4a9     00 00 00 00 
0c4ad     00 00 00 00 
0c4b1     00 00 00 00 
0c4b5     00 00 00 00 | 	byte	$00[16]
0c4b9     8F E0 00 10 
0c4bd     D6 30 00 00 
0c4c1     00 02 04 00 
0c4c5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $02, $04, $00, $00, $00, $00, $00
0c4c9     00 00 00 00 
0c4cd     00 00 00 00 
0c4d1     00          | 	byte	$00[9]
0c4d2     01 04 00 D6 
0c4d6     F0 00 10 AA 
0c4da     10 00 10 D6 
0c4de     30 00 00 00 | 	byte	$01, $04, $00, $d6, $f0, $00, $10, $aa, $10, $00, $10, $d6, $30, $00, $00, $00
0c4e2     02 04 00 00 
0c4e6     00 00 00 00 
0c4ea     00 00 00 00 
0c4ee     00 00 00 00 | 	byte	$02, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4f2     01 04 00 00 
0c4f6     00 00 00 00 
0c4fa     00 00 10 D6 
0c4fe     30 00 00 00 | 	byte	$01, $04, $00, $00, $00, $00, $00, $00, $00, $00, $10, $d6, $30, $00, $00, $00
0c502     02 04 00 00 
0c506     00 00 00 00 
0c50a     00 00 00 00 
0c50e     00 00 00 00 | 	byte	$02, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c512     01 04 00 00 
0c516     00 00 00 8F 
0c51a     E0 00 10 D6 
0c51e     30 00 00 00 | 	byte	$01, $04, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $00, $00
0c522     02 03 00 00 
0c526     00 00 00 00 
0c52a     00 00 00 00 
0c52e     00 00 00 00 | 	byte	$02, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c532     02 03 00 00 
0c536     00 00 00 8F 
0c53a     E0 00 10 D6 
0c53e     30 00 00 00 | 	byte	$02, $03, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $00, $00
0c542     02 03 00 00 
0c546     00 00 00 00 
0c54a     00 00 00 00 
0c54e     00 00 00 00 | 	byte	$02, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c552     02 03 10 BE 
0c556     00 00 00 8F 
0c55a     E0 00 00 00 
0c55e     00 00 00 00 | 	byte	$02, $03, $10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00
0c562     02 03 00 00 
0c566     00 00 00 00 
0c56a     00 00 00 00 
0c56e     00 00 00 00 | 	byte	$02, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c572     02 03 00 00 
0c576     00 00 00 8F 
0c57a     E0 00 11 40 
0c57e     20 00 00 00 | 	byte	$02, $03, $00, $00, $00, $00, $00, $8f, $e0, $00, $11, $40, $20, $00, $00, $00
0c582     02 03 00 00 
0c586     00 00 00 8F 
0c58a     E0 00 11 40 
0c58e     20 00 00 00 | 	byte	$02, $03, $00, $00, $00, $00, $00, $8f, $e0, $00, $11, $40, $20, $00, $00, $00
0c592     02 03 00 00 
0c596     00 00 00 8F 
0c59a     E0 00 11 40 
0c59e     20 00 12 80 | 	byte	$02, $03, $00, $00, $00, $00, $00, $8f, $e0, $00, $11, $40, $20, $00, $12, $80
0c5a2     60 00 00 00 
0c5a6     00 00 00 00 
0c5aa     00 00 00 00 
0c5ae     00 00 00 00 | 	byte	$60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5b2     00 00 10 BE 
0c5b6     00 00 00 8F 
0c5ba     E0 00 11 40 
0c5be     20 00 00 00 | 	byte	$00, $00, $10, $be, $00, $00, $00, $8f, $e0, $00, $11, $40, $20, $00, $00, $00
0c5c2     00 00 00 00 
0c5c6     00 00 00 00 
0c5ca     00 00 00 00 
0c5ce     00 00 00 00 
0c5d2     00 00 00    | 	byte	$00[19]
0c5d5     D6 F0 00 10 
0c5d9     AA 10 00 11 
0c5dd     40 20 00 12 
0c5e1     80 60 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $11, $40, $20, $00, $12, $80, $60, $00, $00
0c5e5     00 00 00 00 
0c5e9     00 00 00 00 
0c5ed     00 00 00 00 
0c5f1     00 00 00 00 
0c5f5     00 00 00    | 	byte	$00[19]
0c5f8     10 AA 10 00 
0c5fc     11 40 20 00 
0c600     00 00 00 00 
0c604     00 00 00 00 | 	byte	$10, $aa, $10, $00, $11, $40, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c608     00 00 00 00 
0c60c     00 00 00 00 
0c610     00 00 00 00 
0c614     00 00 00 00 | 	byte	$00[16]
0c618     10 AA 10 00 
0c61c     11 2E 20 00 
0c620     12 5C 60 00 
0c624     00 00 00 00 | 	byte	$10, $aa, $10, $00, $11, $2e, $20, $00, $12, $5c, $60, $00, $00, $00, $00, $00
0c628     00 00 00 00 
0c62c     00 00 00 00 
0c630     00 00 00 00 | 	byte	$00[12]
0c634     10 BE 00 00 
0c638     10 AA 10 00 
0c63c     11 2E 20 00 
0c640     00 00 00 00 | 	byte	$10, $be, $00, $00, $10, $aa, $10, $00, $11, $2e, $20, $00, $00, $00, $00, $00
0c644     10 BE 00 00 
0c648     00 00 00 00 
0c64c     00 00 00 00 
0c650     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c654     10 BE 00 00 
0c658     00 8F EF 03 
0c65c     10 D6 30 00 
0c660     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $ef, $03, $10, $d6, $30, $00, $00, $00, $00, $00
0c664     00 00 00 00 
0c668     00 00 00 00 
0c66c     00 00 00 00 
0c670     00 00 00 00 
0c674     00 00 00 00 
0c678     00          | 	byte	$00[21]
0c679     8F E0 00 10 
0c67d     D6 30 00 00 
0c681     00 00 00 00 
0c685     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c689     8F E0 00 10 
0c68d     D6 30 00 00 
0c691     00 00 00 00 
0c695     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c699     8F E0 00 10 
0c69d     D6 30 00 11 
0c6a1     1D 60 00 00 
0c6a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $11, $1d, $60, $00, $00, $00, $00, $00, $00
0c6a9     00 00 00 00 
0c6ad     00 00 00 00 
0c6b1     00 00 00 00 
0c6b5     00 00 00 00 | 	byte	$00[16]
0c6b9     8F E0 00 10 
0c6bd     D6 30 00 00 
0c6c1     00 00 00 00 
0c6c5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6c9     00 00 00 00 
0c6cd     00 00 00 00 
0c6d1     00 00 00 00 | 	byte	$00[12]
0c6d5     D6 F0 00 10 
0c6d9     AA 10 00 00 
0c6dd     00 00 00 11 
0c6e1     1D 60 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $11, $1d, $60, $00, $00
0c6e5     00 00 00 00 
0c6e9     00 00 00 00 
0c6ed     00 00 00 00 
0c6f1     00 00 00 00 
0c6f5     00 00 00 00 
0c6f9     00 00 00    | 	byte	$00[23]
0c6fc     10 D6 30 00 
0c700     00 00 00 00 
0c704     00 00 00 00 
0c708     00 00 00 00 | 	byte	$10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c70c     00 00 00 00 
0c710     00 00 00 00 
0c714     00 00 00 00 
0c718     00          | 	byte	$00[13]
0c719     8F E0 00 10 
0c71d     D6 30 00 11 
0c721     1D 60 00 00 
0c725     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $11, $1d, $60, $00, $00, $00, $00, $00, $00
0c729     00 00 00 00 
0c72d     00 00 00 00 
0c731     00 00 00 00 
0c735     00 00 00 00 | 	byte	$00[16]
0c739     8F E0 00 10 
0c73d     D6 30 00 10 
0c741     F0 60 00 00 
0c745     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $10, $f0, $60, $00, $00, $00, $00, $00, $00
0c749     00 00 00 00 
0c74d     00 00 00 00 
0c751     00 00 00    | 	byte	$00[11]
0c754     10 BE 00 00 
0c758     00 8F E0 00 
0c75c     10 D6 30 00 
0c760     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00
0c764     00 00 00 00 
0c768     00 00 00 00 
0c76c     00 00 00 00 
0c770     00 00 00 00 
0c774     00 00 00 00 
0c778     00          | 	byte	$00[21]
0c779     8F E0 00 10 
0c77d     D6 30 00 11 
0c781     1D 60 00 00 
0c785     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $11, $1d, $60, $00, $00, $00, $00, $00, $00
0c789     8F E0 00 10 
0c78d     D6 30 00 00 
0c791     00 00 00 00 
0c795     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c799     8F E0 00 10 
0c79d     D6 30 00 00 
0c7a1     00 00 00 00 
0c7a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7a9     00 00 00 00 
0c7ad     00 00 00 00 
0c7b1     00 00 00 00 
0c7b5     00 00 00 00 | 	byte	$00[16]
0c7b9     8F E0 00 10 
0c7bd     D6 30 00 00 
0c7c1     00 01 03 00 
0c7c5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $01, $03, $00, $00, $00, $00, $00
0c7c9     00 00 00 00 
0c7cd     00 00 00 00 
0c7d1     00          | 	byte	$00[9]
0c7d2     02 03 00 D6 
0c7d6     F0 00 10 AA 
0c7da     10 00 10 D6 
0c7de     30 00 00 00 | 	byte	$02, $03, $00, $d6, $f0, $00, $10, $aa, $10, $00, $10, $d6, $30, $00, $00, $00
0c7e2     01 03 00 00 
0c7e6     00 00 00 00 
0c7ea     00 00 00 00 
0c7ee     00 00 00 00 | 	byte	$01, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7f2     02 03 00 00 
0c7f6     00 00 10 AA 
0c7fa     10 00 10 D6 
0c7fe     30 00 00 00 | 	byte	$02, $03, $00, $00, $00, $00, $10, $aa, $10, $00, $10, $d6, $30, $00, $00, $00
0c802     01 03 00 00 
0c806     00 00 00 00 
0c80a     00 00 00 00 
0c80e     00 00 00 00 | 	byte	$01, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c812     02 03 00 00 
0c816     00 00 00 00 
0c81a     00 00 10 D6 
0c81e     30 00 00 00 | 	byte	$02, $03, $00, $00, $00, $00, $00, $00, $00, $00, $10, $d6, $30, $00, $00, $00
0c822     01 03 00 00 
0c826     00 00 00 00 
0c82a     00 00 00 00 
0c82e     00 00 00 00 | 	byte	$01, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c832     02 03 10 BE 
0c836     00 00 00 8F 
0c83a     E0 00 10 D6 
0c83e     30 00 00 00 | 	byte	$02, $03, $10, $be, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $00, $00
0c842     01 03 00 00 
0c846     00 00 00 00 
0c84a     00 00 10 CA 
0c84e     30 00 00 00 | 	byte	$01, $03, $00, $00, $00, $00, $00, $00, $00, $00, $10, $ca, $30, $00, $00, $00
0c852     01 03 10 BE 
0c856     00 00 00 8F 
0c85a     E0 00 10 BE 
0c85e     30 00 00 00 | 	byte	$01, $03, $10, $be, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $00, $00
0c862     01 03 00 00 
0c866     00 00 00 00 
0c86a     00 00 00 00 
0c86e     00 00 00 00 | 	byte	$01, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c872     01 03 00 00 
0c876     00 00 00 8F 
0c87a     E0 00 10 BE 
0c87e     30 00 00 00 | 	byte	$01, $03, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $00, $00
0c882     01 03 00 00 
0c886     00 00 00 8F 
0c88a     E0 00 10 BE 
0c88e     30 00 00 00 | 	byte	$01, $03, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $00, $00
0c892     00 00 00 00 
0c896     00 00 00    | 	byte	$00[7]
0c899     8F E0 00 10 
0c89d     BE 30 00 10 
0c8a1     FE 60 00 00 
0c8a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $fe, $60, $00, $00, $00, $00, $00, $00
0c8a9     00 00 00 00 
0c8ad     00 00 00 00 
0c8b1     00 00 00 00 
0c8b5     00 00 00 00 | 	byte	$00[16]
0c8b9     8F E0 00 10 
0c8bd     BE 30 00 00 
0c8c1     00 00 00 00 
0c8c5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8c9     00 00 00 00 
0c8cd     00 00 00 00 
0c8d1     00 00 00 00 | 	byte	$00[12]
0c8d5     D6 F0 00 10 
0c8d9     AA 10 00 10 
0c8dd     BE 30 00 10 
0c8e1     FE 60 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $10, $fe, $60, $00, $00
0c8e5     00 00 00 00 
0c8e9     00 00 00 00 
0c8ed     00 00 00 00 
0c8f1     00 00 00 00 
0c8f5     00 00 00 00 
0c8f9     00 00 00    | 	byte	$00[23]
0c8fc     10 BE 30 00 
0c900     00 00 00 00 
0c904     00 00 00 00 
0c908     00 00 00 00 | 	byte	$10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c90c     00 00 00 00 
0c910     00 00 00 00 
0c914     00 00 00 00 
0c918     00          | 	byte	$00[13]
0c919     8F E0 00 10 
0c91d     BE 30 00 10 
0c921     FE 60 00 00 
0c925     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $fe, $60, $00, $00, $00, $00, $00, $00
0c929     00 00 00 00 
0c92d     00 00 00 00 
0c931     00 00 00 00 
0c935     00 00 00 00 | 	byte	$00[16]
0c939     8F E0 00 10 
0c93d     BE 30 00 10 
0c941     FE 60 00 00 
0c945     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $fe, $60, $00, $00, $00, $00, $00, $00
0c949     00 00 00 00 
0c94d     00 00 00 00 
0c951     00 00 00    | 	byte	$00[11]
0c954     10 BE 00 00 
0c958     00 8F E0 00 
0c95c     00 00 00 00 
0c960     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c964     00 00 00 00 
0c968     00 00 00 00 
0c96c     00 00 00 00 
0c970     00 00 00 00 
0c974     00 00 00 00 
0c978     00          | 	byte	$00[21]
0c979     8F E0 00 10 
0c97d     BE 30 00 10 
0c981     FE 60 00 00 
0c985     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $fe, $60, $00, $00, $00, $00, $00, $00
0c989     8F E0 00 10 
0c98d     BE 30 00 00 
0c991     00 00 00 00 
0c995     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c999     8F E0 00 10 
0c99d     BE 30 00 00 
0c9a1     00 01 03 00 
0c9a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $01, $03, $00, $00, $00, $00, $00
0c9a9     00 00 00 00 
0c9ad     00 00 00 00 
0c9b1     00          | 	byte	$00[9]
0c9b2     02 03 10 BE 
0c9b6     00 00 00 8F 
0c9ba     E0 00 10 BE 
0c9be     30 00 00 00 | 	byte	$02, $03, $10, $be, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $00, $00
0c9c2     01 03 00 00 
0c9c6     00 00 00 00 
0c9ca     00 00 00 00 
0c9ce     00 00 00 00 | 	byte	$01, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c9d2     02 03 00 D6 
0c9d6     F0 00 10 AA 
0c9da     10 00 10 BE 
0c9de     30 00 00 00 | 	byte	$02, $03, $00, $d6, $f0, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $00, $00
0c9e2     01 03 00 00 
0c9e6     00 00 00 00 
0c9ea     00 00 00 00 
0c9ee     00 00 00 00 | 	byte	$01, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c9f2     02 03 00 00 
0c9f6     00 00 10 AA 
0c9fa     10 00 10 BE 
0c9fe     30 00 00 00 | 	byte	$02, $03, $00, $00, $00, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $00, $00
0ca02     01 03 00 00 
0ca06     00 00 00 00 
0ca0a     00 00 00 00 
0ca0e     00 00 00 00 | 	byte	$01, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ca12     02 03 00 00 
0ca16     00 00 10 AA 
0ca1a     10 00 10 BE 
0ca1e     30 00 10 FE | 	byte	$02, $03, $00, $00, $00, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $10, $fe
0ca22     60 00 00 00 
0ca26     00 00 00 00 
0ca2a     00 00 00 00 
0ca2e     00 00 00 00 | 	byte	$60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ca32     00 00 10 BE 
0ca36     00 00 10 AA 
0ca3a     10 00 10 BE 
0ca3e     30 00 00 00 | 	byte	$00, $00, $10, $be, $00, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $00, $00
0ca42     00 00 10 BE 
0ca46     00 00 00 00 
0ca4a     00 00 00 00 
0ca4e     00 00 00 00 | 	byte	$00, $00, $10, $be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ca52     00 00 10 BE 
0ca56     00 00 00 8F 
0ca5a     EF 03 11 1D 
0ca5e     30 00 11 1D | 	byte	$00, $00, $10, $be, $00, $00, $00, $8f, $ef, $03, $11, $1d, $30, $00, $11, $1d
0ca62     60 00 00 00 
0ca66     00 00 00 00 
0ca6a     00 00 00 00 
0ca6e     00 00 00 00 | 	byte	$60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ca72     00 00 00 00 
0ca76     00 00 00    | 	byte	$00[7]
0ca79     8F E0 00 11 
0ca7d     1D 30 00 11 
0ca81     1D 60 00 00 
0ca85     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $11, $1d, $60, $00, $00, $00, $00, $00, $00
0ca89     8F E0 00 11 
0ca8d     1D 30 00 00 
0ca91     00 00 00 00 
0ca95     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ca99     8F E0 00 11 
0ca9d     1D 30 00 00 
0caa1     00 00 00 00 
0caa5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0caa9     00 00 00 00 
0caad     00 00 00 00 
0cab1     00          | 	byte	$00[9]
0cab2     01 02 00 00 
0cab6     00 00 00 8F 
0caba     E0 00 11 1D 
0cabe     30 00 00 00 | 	byte	$01, $02, $00, $00, $00, $00, $00, $8f, $e0, $00, $11, $1d, $30, $00, $00, $00
0cac2     02 02 00 00 
0cac6     00 00 00 00 
0caca     00 00 00 00 
0cace     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cad2     01 02 00 D6 
0cad6     F0 00 10 AA 
0cada     10 00 11 1D 
0cade     30 00 00 00 | 	byte	$01, $02, $00, $d6, $f0, $00, $10, $aa, $10, $00, $11, $1d, $30, $00, $00, $00
0cae2     02 02 00 00 
0cae6     00 00 00 00 
0caea     00 00 00 00 
0caee     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0caf2     01 02 00 00 
0caf6     00 00 00 00 
0cafa     00 00 11 1D 
0cafe     30 00 00 00 | 	byte	$01, $02, $00, $00, $00, $00, $00, $00, $00, $00, $11, $1d, $30, $00, $00, $00
0cb02     02 02 00 00 
0cb06     00 00 00 00 
0cb0a     00 00 00 00 
0cb0e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cb12     01 02 00 00 
0cb16     00 00 00 8F 
0cb1a     E0 00 11 1D 
0cb1e     30 00 00 00 | 	byte	$01, $02, $00, $00, $00, $00, $00, $8f, $e0, $00, $11, $1d, $30, $00, $00, $00
0cb22     02 02 00 00 
0cb26     00 00 00 00 
0cb2a     00 00 00 00 
0cb2e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cb32     01 02 00 00 
0cb36     00 00 00 8F 
0cb3a     E0 00 10 BE 
0cb3e     30 00 00 00 | 	byte	$01, $02, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $00, $00
0cb42     02 02 00 00 
0cb46     00 00 00 00 
0cb4a     00 00 00 00 
0cb4e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cb52     01 02 10 BE 
0cb56     00 00 00 8F 
0cb5a     E0 00 00 00 
0cb5e     00 00 00 00 | 	byte	$01, $02, $10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00
0cb62     02 02 00 00 
0cb66     00 00 00 00 
0cb6a     00 00 00 00 
0cb6e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cb72     01 02 00 00 
0cb76     00 00 00 8F 
0cb7a     E0 00 10 BE 
0cb7e     30 00 00 00 | 	byte	$01, $02, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $00, $00
0cb82     02 02 00 00 
0cb86     00 00 00 8F 
0cb8a     E0 00 10 BE 
0cb8e     30 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $00, $00
0cb92     01 02 00 00 
0cb96     00 00 00 8F 
0cb9a     E0 00 10 BE 
0cb9e     30 00 10 FE | 	byte	$01, $02, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $10, $fe
0cba2     60 00 00 00 
0cba6     00 00 00 00 
0cbaa     00 00 00 00 
0cbae     00 00 00 00 | 	byte	$60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cbb2     00 00 00 00 
0cbb6     00 00 00    | 	byte	$00[7]
0cbb9     8F E0 00 10 
0cbbd     BE 30 00 10 
0cbc1     FE 6C 20 00 
0cbc5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $fe, $6c, $20, $00, $00, $00, $00, $00
0cbc9     00 00 00 00 
0cbcd     00 00 00 00 
0cbd1     00 00 00 00 | 	byte	$00[12]
0cbd5     D6 F0 00 10 
0cbd9     AA 10 00 10 
0cbdd     BE 30 00 11 
0cbe1     40 60 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $11, $40, $60, $00, $00
0cbe5     00 00 00 00 
0cbe9     00 00 00 00 
0cbed     00 00 00 00 
0cbf1     00 00 00 00 
0cbf5     00 00 00    | 	byte	$00[19]
0cbf8     10 AA 10 00 
0cbfc     10 BE 30 00 
0cc00     11 40 6C 20 
0cc04     00 00 00 00 | 	byte	$10, $aa, $10, $00, $10, $be, $30, $00, $11, $40, $6c, $20, $00, $00, $00, $00
0cc08     00 00 00 00 
0cc0c     00 00 00 00 
0cc10     00 00 00 00 
0cc14     00 00 00 00 
0cc18     00 00 00 00 | 	byte	$00[20]
0cc1c     10 BE 30 00 
0cc20     11 7D 60 00 
0cc24     00 00 00 00 
0cc28     00 00 00 00 | 	byte	$10, $be, $30, $00, $11, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cc2c     00 00 00 00 
0cc30     00 00 00 00 | 	byte	$00[8]
0cc34     10 BE 00 00 
0cc38     00 8F E0 00 
0cc3c     10 BE 30 00 
0cc40     11 7D 6C 20 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $11, $7d, $6c, $20
0cc44     00 00 00 00 
0cc48     00 00 00 00 
0cc4c     00 00 00 00 
0cc50     00 00 00 00 | 	byte	$00[16]
0cc54     10 BE 00 00 
0cc58     00 8F E0 00 
0cc5c     10 D6 30 00 
0cc60     11 1D 60 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $11, $1d, $60, $00
0cc64     00 00 00 00 
0cc68     00 00 00 00 
0cc6c     00 00 00 00 
0cc70     00 00 00 00 
0cc74     00 00 00 00 
0cc78     00          | 	byte	$00[21]
0cc79     8F E0 00 10 
0cc7d     D6 30 00 11 
0cc81     1D 60 00 00 
0cc85     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $11, $1d, $60, $00, $00, $00, $00, $00, $00
0cc89     8F E0 00 10 
0cc8d     D6 30 00 00 
0cc91     00 00 00 00 
0cc95     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cc99     8F E0 00 10 
0cc9d     D6 30 00 00 
0cca1     00 02 01 00 
0cca5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $02, $01, $00, $00, $00, $00, $00
0cca9     00 00 00 00 
0ccad     00 00 00 00 
0ccb1     00          | 	byte	$00[9]
0ccb2     01 01 00 00 
0ccb6     00 00 00 8F 
0ccba     E0 00 10 D6 
0ccbe     30 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $00, $00
0ccc2     02 01 00 00 
0ccc6     00 00 00 00 
0ccca     00 00 00 00 
0ccce     00 00 00 00 | 	byte	$02, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ccd2     01 01 00 D6 
0ccd6     F0 00 10 AA 
0ccda     10 00 10 D6 
0ccde     30 00 00 00 | 	byte	$01, $01, $00, $d6, $f0, $00, $10, $aa, $10, $00, $10, $d6, $30, $00, $00, $00
0cce2     02 02 00 00 
0cce6     00 00 00 00 
0ccea     00 00 00 00 
0ccee     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ccf2     01 02 00 00 
0ccf6     00 00 00 00 
0ccfa     00 00 10 D6 
0ccfe     30 00 00 00 | 	byte	$01, $02, $00, $00, $00, $00, $00, $00, $00, $00, $10, $d6, $30, $00, $00, $00
0cd02     02 02 00 00 
0cd06     00 00 00 00 
0cd0a     00 00 00 00 
0cd0e     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cd12     01 03 00 00 
0cd16     00 00 00 8F 
0cd1a     E0 00 10 D6 
0cd1e     30 00 00 00 | 	byte	$01, $03, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $00, $00
0cd22     02 03 00 00 
0cd26     00 00 00 00 
0cd2a     00 00 00 00 
0cd2e     00 00 00 00 | 	byte	$02, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cd32     01 03 00 00 
0cd36     00 00 00 8F 
0cd3a     E0 00 10 D6 
0cd3e     30 00 11 40 | 	byte	$01, $03, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $11, $40
0cd42     60 00 00 00 
0cd46     00 00 00 00 
0cd4a     00 00 00 00 
0cd4e     00 00 00 00 | 	byte	$60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cd52     00 00 10 BE 
0cd56     00 00 00 8F 
0cd5a     E0 00 10 D6 
0cd5e     30 00 00 00 | 	byte	$00, $00, $10, $be, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00, $00, $00
0cd62     00 00 00 00 
0cd66     00 00 00 00 
0cd6a     00 00 00 00 
0cd6e     00 00 00 00 
0cd72     00 00 00 00 
0cd76     00 00 00    | 	byte	$00[23]
0cd79     8F E0 00 11 
0cd7d     40 20 00 00 
0cd81     00 00 00 00 
0cd85     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $40, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cd89     8F E0 00 11 
0cd8d     40 20 00 00 
0cd91     00 00 00 00 
0cd95     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $40, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cd99     8F E0 00 11 
0cd9d     40 20 00 12 
0cda1     80 60 00 00 
0cda5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $40, $20, $00, $12, $80, $60, $00, $00, $00, $00, $00, $00
0cda9     00 00 00 00 
0cdad     00 00 00 00 
0cdb1     00 00 00    | 	byte	$00[11]
0cdb4     10 BE 00 00 
0cdb8     00 8F E0 00 
0cdbc     11 40 20 00 
0cdc0     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $11, $40, $20, $00, $00, $00, $00, $00
0cdc4     00 00 00 00 
0cdc8     00 00 00 00 
0cdcc     00 00 00 00 
0cdd0     00 00 00 00 
0cdd4     00          | 	byte	$00[17]
0cdd5     D6 F0 00 10 
0cdd9     AA 10 00 11 
0cddd     2E 20 00 12 
0cde1     80 60 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $11, $2e, $20, $00, $12, $80, $60, $00, $00
0cde5     00 00 00 00 
0cde9     00 00 00 00 
0cded     00 00 00 00 
0cdf1     00 00 00 00 
0cdf5     00 00 00    | 	byte	$00[19]
0cdf8     10 AA 10 00 
0cdfc     11 2E 20 00 
0ce00     00 00 00 00 
0ce04     00 00 00 00 | 	byte	$10, $aa, $10, $00, $11, $2e, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ce08     00 00 00 00 
0ce0c     00 00 00 00 
0ce10     00 00 00 00 
0ce14     00 00 00 00 | 	byte	$00[16]
0ce18     10 AA 10 00 
0ce1c     11 1D 20 00 
0ce20     12 5C 60 00 
0ce24     00 00 00 00 | 	byte	$10, $aa, $10, $00, $11, $1d, $20, $00, $12, $5c, $60, $00, $00, $00, $00, $00
0ce28     00 00 00 00 
0ce2c     00 00 00 00 
0ce30     00 00 00 00 | 	byte	$00[12]
0ce34     10 BE 00 00 
0ce38     10 AA 10 00 
0ce3c     10 BE 30 00 
0ce40     00 00 00 00 | 	byte	$10, $be, $00, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $00, $00, $00, $00
0ce44     10 BE 00 00 
0ce48     00 00 00 00 
0ce4c     00 00 00 00 
0ce50     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ce54     10 BE 00 00 
0ce58     00 8F EF 03 
0ce5c     10 D6 30 00 
0ce60     10 D6 40 00 | 	byte	$10, $be, $00, $00, $00, $8f, $ef, $03, $10, $d6, $30, $00, $10, $d6, $40, $00
0ce64     00 00 00 00 
0ce68     00 00 00 00 
0ce6c     00 00 00 00 
0ce70     00 00 00 00 
0ce74     00 00 00 00 
0ce78     00          | 	byte	$00[21]
0ce79     8F E0 00 10 
0ce7d     D6 30 00 00 
0ce81     00 00 00 00 
0ce85     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ce89     8F E0 00 10 
0ce8d     D6 30 00 00 
0ce91     00 00 00 00 
0ce95     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ce99     8F E0 00 10 
0ce9d     D6 30 00 00 
0cea1     00 00 00 00 
0cea5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cea9     00 00 00 00 
0cead     00 00 00 00 
0ceb1     00 00 00 00 
0ceb5     00 00 00 00 | 	byte	$00[16]
0ceb9     8F E0 00 10 
0cebd     D6 30 00 10 
0cec1     D6 40 00 00 
0cec5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00
0cec9     00 00 00 00 
0cecd     00 00 00 00 
0ced1     00 00 00 00 | 	byte	$00[12]
0ced5     D6 F0 00 10 
0ced9     AA 10 00 00 
0cedd     00 00 00 10 
0cee1     D6 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $00, $00, $00, $00, $10, $d6, $40, $00, $00
0cee5     00 00 00 00 
0cee9     00 00 00 00 
0ceed     00 00 00 00 
0cef1     00 00 00 00 
0cef5     00 00 00 00 
0cef9     00 00 00    | 	byte	$00[23]
0cefc     10 D6 30 00 
0cf00     00 00 00 00 
0cf04     00 00 00 00 
0cf08     00 00 00 00 | 	byte	$10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf0c     00 00 00 00 
0cf10     00 00 00 00 
0cf14     00 00 00 00 
0cf18     00          | 	byte	$00[13]
0cf19     8F E0 00 10 
0cf1d     D6 30 00 00 
0cf21     00 00 00 00 
0cf25     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf29     00 00 00 00 
0cf2d     00 00 00 00 
0cf31     00 00 00 00 
0cf35     00 00 00 00 | 	byte	$00[16]
0cf39     8F E0 00 10 
0cf3d     D6 30 00 10 
0cf41     D6 40 00 00 
0cf45     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00
0cf49     00 00 00 00 
0cf4d     00 00 00 00 
0cf51     00 00 00    | 	byte	$00[11]
0cf54     10 BE 00 00 
0cf58     00 8F E0 00 
0cf5c     00 00 00 00 
0cf60     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf64     00 00 00 00 
0cf68     00 00 00 00 
0cf6c     00 00 00 00 
0cf70     00 00 00 00 
0cf74     00 00 00 00 
0cf78     00          | 	byte	$00[21]
0cf79     8F E0 00 10 
0cf7d     D6 30 00 10 
0cf81     D6 40 00 00 
0cf85     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00
0cf89     8F E0 00 10 
0cf8d     D6 30 00 00 
0cf91     00 00 00 00 
0cf95     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf99     8F E0 00 10 
0cf9d     D6 30 00 00 
0cfa1     00 00 00 00 
0cfa5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cfa9     00 00 00 00 
0cfad     00 00 00 00 
0cfb1     00 00 00 00 
0cfb5     00 00 00 00 | 	byte	$00[16]
0cfb9     8F E0 00 10 
0cfbd     D6 30 00 10 
0cfc1     D6 40 00 00 
0cfc5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00
0cfc9     00 00 00 00 
0cfcd     00 00 00 00 
0cfd1     00 00 00 00 | 	byte	$00[12]
0cfd5     D6 F0 00 10 
0cfd9     AA 10 00 10 
0cfdd     D6 30 00 10 
0cfe1     D6 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00
0cfe5     00 00 00 00 
0cfe9     00 00 00 00 
0cfed     00 00 00 00 
0cff1     00 00 00 00 
0cff5     00 00 00    | 	byte	$00[19]
0cff8     10 AA 10 00 
0cffc     10 D6 30 00 
0d000     10 D6 40 00 
0d004     00 00 00 00 | 	byte	$10, $aa, $10, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00
0d008     00 00 00 00 
0d00c     00 00 00 00 
0d010     00 00 00 00 
0d014     00 00 00 00 
0d018     00 00 00 00 | 	byte	$00[20]
0d01c     10 D6 30 00 
0d020     10 D6 40 00 
0d024     00 00 00 00 
0d028     00 00 00 00 | 	byte	$10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d02c     00 00 00 00 
0d030     10 D6 40 00 
0d034     10 BE 00 00 
0d038     00 8F E0 00 | 	byte	$00, $00, $00, $00, $10, $d6, $40, $00, $10, $be, $00, $00, $00, $8f, $e0, $00
0d03c     10 D6 30 00 
0d040     10 CA 40 00 
0d044     00 00 00 00 
0d048     00 00 00 00 | 	byte	$10, $d6, $30, $00, $10, $ca, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d04c     10 CA 30 00 
0d050     00 00 00 00 
0d054     10 BE 00 00 
0d058     00 8F E0 00 | 	byte	$10, $ca, $30, $00, $00, $00, $00, $00, $10, $be, $00, $00, $00, $8f, $e0, $00
0d05c     10 BE 30 00 
0d060     10 BE 40 00 
0d064     00 00 00 00 
0d068     00 00 00 00 | 	byte	$10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d06c     00 00 00 00 
0d070     00 00 00 00 
0d074     00 00 00 00 
0d078     00          | 	byte	$00[13]
0d079     8F E0 00 10 
0d07d     BE 30 00 00 
0d081     00 00 00 00 
0d085     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d089     8F E0 00 10 
0d08d     BE 30 00 00 
0d091     00 00 00 00 
0d095     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d099     8F E0 00 10 
0d09d     BE 30 00 00 
0d0a1     00 00 00 00 
0d0a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d0a9     00 00 00 00 
0d0ad     00 00 00 00 
0d0b1     00 00 00 00 
0d0b5     00 00 00 00 | 	byte	$00[16]
0d0b9     8F E0 00 10 
0d0bd     BE 30 00 10 
0d0c1     BE 40 00 00 
0d0c5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0d0c9     00 00 00 00 
0d0cd     00 00 00 00 
0d0d1     00 00 00 00 | 	byte	$00[12]
0d0d5     D6 F0 00 10 
0d0d9     AA 10 00 10 
0d0dd     BE 30 00 10 
0d0e1     BE 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00
0d0e5     00 00 00 00 
0d0e9     00 00 00 00 
0d0ed     00 00 00 00 
0d0f1     00 00 00 00 
0d0f5     00 00 00 00 
0d0f9     00 00 00    | 	byte	$00[23]
0d0fc     10 BE 30 00 
0d100     00 00 00 00 
0d104     00 00 00 00 
0d108     00 00 00 00 | 	byte	$10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d10c     00 00 00 00 
0d110     00 00 00 00 
0d114     00 00 00 00 
0d118     00          | 	byte	$00[13]
0d119     8F E0 00 10 
0d11d     BE 30 00 00 
0d121     00 00 00 00 
0d125     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d129     00 00 00 00 
0d12d     00 00 00 00 
0d131     00 00 00 00 
0d135     00 00 00 00 | 	byte	$00[16]
0d139     8F E0 00 10 
0d13d     BE 30 00 10 
0d141     BE 40 00 00 
0d145     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0d149     00 00 00 00 
0d14d     00 00 00 00 
0d151     00 00 00    | 	byte	$00[11]
0d154     10 BE 00 00 
0d158     00 8F E0 00 
0d15c     00 00 00 00 
0d160     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d164     00 00 00 00 
0d168     00 00 00 00 
0d16c     00 00 00 00 
0d170     00 00 00 00 
0d174     00 00 00 00 
0d178     00          | 	byte	$00[21]
0d179     8F E0 00 10 
0d17d     BE 30 00 10 
0d181     BE 40 00 00 
0d185     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0d189     8F E0 00 10 
0d18d     BE 30 00 00 
0d191     00 00 00 00 
0d195     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d199     8F E0 00 10 
0d19d     BE 30 00 10 
0d1a1     BE 40 00 00 
0d1a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0d1a9     00 00 00 00 
0d1ad     00 00 00 00 
0d1b1     00 00 00    | 	byte	$00[11]
0d1b4     10 BE 00 00 
0d1b8     00 8F E0 00 
0d1bc     10 BE 30 00 
0d1c0     10 BE 40 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00
0d1c4     00 00 00 00 
0d1c8     00 00 00 00 
0d1cc     00 00 00 00 
0d1d0     00 00 00 00 
0d1d4     00          | 	byte	$00[17]
0d1d5     D6 F0 00 10 
0d1d9     AA 10 00 10 
0d1dd     BE 30 00 10 
0d1e1     BE 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00
0d1e5     00 00 00 00 
0d1e9     00 00 00 00 
0d1ed     00 00 00 00 
0d1f1     00 00 00 00 
0d1f5     00 00 00    | 	byte	$00[19]
0d1f8     10 AA 10 00 
0d1fc     10 BE 30 00 
0d200     10 BE 40 00 
0d204     00 00 00 00 | 	byte	$10, $aa, $10, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00
0d208     00 00 00 00 
0d20c     00 00 00 00 
0d210     00 00 00 00 
0d214     00 00 00 00 | 	byte	$00[16]
0d218     10 AA 10 00 
0d21c     10 BE 30 00 
0d220     10 BE 40 00 
0d224     00 00 00 00 | 	byte	$10, $aa, $10, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00
0d228     00 00 00 00 
0d22c     00 00 00 00 | 	byte	$00[8]
0d230     10 BE 40 00 
0d234     10 BE 00 00 
0d238     10 AA 10 00 
0d23c     10 BE 30 00 | 	byte	$10, $be, $40, $00, $10, $be, $00, $00, $10, $aa, $10, $00, $10, $be, $30, $00
0d240     10 BE 40 00 
0d244     10 BE 00 00 
0d248     00 00 00 00 
0d24c     00 00 00 00 | 	byte	$10, $be, $40, $00, $10, $be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d250     00 00 00 00 
0d254     10 BE 00 00 
0d258     00 8F EF 03 
0d25c     11 1D 30 00 | 	byte	$00, $00, $00, $00, $10, $be, $00, $00, $00, $8f, $ef, $03, $11, $1d, $30, $00
0d260     11 1D 40 00 
0d264     00 00 00 00 
0d268     00 00 00 00 
0d26c     00 00 00 00 | 	byte	$11, $1d, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d270     00 00 00 00 
0d274     00 00 00 00 
0d278     00          | 	byte	$00[9]
0d279     8F E0 00 11 
0d27d     1D 30 00 00 
0d281     00 00 00 00 
0d285     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d289     8F E0 00 11 
0d28d     1D 30 00 00 
0d291     00 00 00 00 
0d295     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d299     8F E0 00 11 
0d29d     1D 30 00 00 
0d2a1     00 00 00 00 
0d2a5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d2a9     00 00 00 00 
0d2ad     00 00 00 00 
0d2b1     00 00 00 00 
0d2b5     00 00 00 00 | 	byte	$00[16]
0d2b9     8F E0 00 11 
0d2bd     1D 30 00 11 
0d2c1     1D 40 00 00 
0d2c5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $11, $1d, $40, $00, $00, $00, $00, $00, $00
0d2c9     00 00 00 00 
0d2cd     00 00 00 00 
0d2d1     00 00 00 00 | 	byte	$00[12]
0d2d5     D6 F0 00 10 
0d2d9     AA 10 00 11 
0d2dd     1D 30 00 11 
0d2e1     1D 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $11, $1d, $30, $00, $11, $1d, $40, $00, $00
0d2e5     00 00 00 00 
0d2e9     00 00 00 00 
0d2ed     00 00 00 00 
0d2f1     00 00 00 00 
0d2f5     00 00 00 00 
0d2f9     00 00 00    | 	byte	$00[23]
0d2fc     11 1D 30 00 
0d300     00 00 00 00 
0d304     00 00 00 00 
0d308     00 00 00 00 | 	byte	$11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d30c     00 00 00 00 
0d310     00 00 00 00 
0d314     00 00 00 00 
0d318     00          | 	byte	$00[13]
0d319     8F E0 00 11 
0d31d     1D 30 00 00 
0d321     00 00 00 00 
0d325     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $1d, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d329     00 00 00 00 
0d32d     00 00 00 00 
0d331     00 00 00 00 
0d335     00 00 00 00 | 	byte	$00[16]
0d339     8F E0 00 10 
0d33d     BE 30 00 10 
0d341     BE 40 00 00 
0d345     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0d349     00 00 00 00 
0d34d     00 00 00 00 
0d351     00 00 00    | 	byte	$00[11]
0d354     10 BE 00 00 
0d358     00 8F E0 00 
0d35c     00 00 00 00 
0d360     00 00 00 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d364     00 00 00 00 
0d368     00 00 00 00 
0d36c     00 00 00 00 
0d370     00 00 00 00 
0d374     00 00 00 00 
0d378     00          | 	byte	$00[21]
0d379     8F E0 00 10 
0d37d     BE 30 00 10 
0d381     BE 40 00 00 
0d385     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0d389     8F E0 00 10 
0d38d     BE 30 00 10 
0d391     BE 40 00 00 
0d395     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0d399     8F E0 00 10 
0d39d     BE 30 00 10 
0d3a1     BE 40 00 00 
0d3a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0d3a9     00 00 00 00 
0d3ad     00 00 00 00 
0d3b1     00 00 00 00 
0d3b5     00 00 00 00 | 	byte	$00[16]
0d3b9     8F E0 00 10 
0d3bd     BE 30 00 10 
0d3c1     BE 40 00 00 
0d3c5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00
0d3c9     00 00 00 00 
0d3cd     00 00 00 00 
0d3d1     00 00 00 00 | 	byte	$00[12]
0d3d5     D6 F0 00 10 
0d3d9     AA 10 00 10 
0d3dd     BE 30 00 10 
0d3e1     BE 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00
0d3e5     00 00 00 00 
0d3e9     00 00 00 00 
0d3ed     00 00 00 00 
0d3f1     00 00 00 00 
0d3f5     00 00 00    | 	byte	$00[19]
0d3f8     10 AA 10 00 
0d3fc     10 BE 30 00 
0d400     10 BE 40 00 
0d404     00 00 00 00 | 	byte	$10, $aa, $10, $00, $10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00
0d408     00 00 00 00 
0d40c     00 00 00 00 
0d410     00 00 00 00 
0d414     00 00 00 00 
0d418     00 00 00 00 | 	byte	$00[20]
0d41c     10 BE 30 00 
0d420     10 BE 40 00 
0d424     00 00 00 00 
0d428     00 00 00 00 | 	byte	$10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d42c     00 00 00 00 
0d430     11 7D 40 00 
0d434     10 BE 00 00 
0d438     00 8F E0 00 | 	byte	$00, $00, $00, $00, $11, $7d, $40, $00, $10, $be, $00, $00, $00, $8f, $e0, $00
0d43c     10 BE 30 00 
0d440     10 BE 40 00 
0d444     00 00 00 00 
0d448     00 00 00 00 | 	byte	$10, $be, $30, $00, $10, $be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d44c     00 00 00 00 
0d450     11 7D 40 00 
0d454     10 BE 00 00 
0d458     00 8F E0 00 | 	byte	$00, $00, $00, $00, $11, $7d, $40, $00, $10, $be, $00, $00, $00, $8f, $e0, $00
0d45c     10 D6 30 00 
0d460     10 D6 40 00 
0d464     00 00 00 00 
0d468     00 00 00 00 | 	byte	$10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d46c     00 00 00 00 
0d470     00 00 00 00 
0d474     00 00 00 00 
0d478     00          | 	byte	$00[13]
0d479     8F E0 00 10 
0d47d     D6 30 00 00 
0d481     00 00 00 00 
0d485     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d489     8F E0 00 10 
0d48d     D6 30 00 00 
0d491     00 00 00 00 
0d495     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d499     8F E0 00 10 
0d49d     D6 30 00 00 
0d4a1     00 00 00 00 
0d4a5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d4a9     00 00 00 00 
0d4ad     00 00 00 00 
0d4b1     00 00 00 00 
0d4b5     00 00 00 00 | 	byte	$00[16]
0d4b9     8F E0 00 10 
0d4bd     D6 30 00 10 
0d4c1     D6 40 00 00 
0d4c5     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00
0d4c9     00 00 00 00 
0d4cd     00 00 00 00 
0d4d1     00 00 00 00 | 	byte	$00[12]
0d4d5     D6 F0 00 10 
0d4d9     AA 10 00 10 
0d4dd     D6 30 00 10 
0d4e1     D6 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00
0d4e5     00 00 00 00 
0d4e9     00 00 00 00 
0d4ed     00 00 00 00 
0d4f1     00 00 00 00 
0d4f5     00 00 00 00 
0d4f9     00 00 00    | 	byte	$00[23]
0d4fc     10 D6 30 00 
0d500     10 D6 40 00 
0d504     00 00 00 00 
0d508     00 00 00 00 | 	byte	$10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d50c     00 00 00 00 
0d510     00 00 00 00 
0d514     00 00 00 00 
0d518     00          | 	byte	$00[13]
0d519     8F E0 00 10 
0d51d     D6 30 00 10 
0d521     D6 40 00 00 
0d525     00 00 00 00 | 	byte	$8f, $e0, $00, $10, $d6, $30, $00, $10, $d6, $40, $00, $00, $00, $00, $00, $00
0d529     00 00 00 00 
0d52d     00 00 00    | 	byte	$00[7]
0d530     10 D6 40 00 
0d534     00 00 00 00 
0d538     00 8F E0 00 
0d53c     10 D6 30 00 | 	byte	$10, $d6, $40, $00, $00, $00, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00
0d540     00 00 00 00 
0d544     00 00 00 00 
0d548     00 00 00 00 
0d54c     00 00 00 00 | 	byte	$00[16]
0d550     10 D6 40 00 
0d554     10 BE 00 00 
0d558     00 8F E0 00 
0d55c     10 D6 30 00 | 	byte	$10, $d6, $40, $00, $10, $be, $00, $00, $00, $8f, $e0, $00, $10, $d6, $30, $00
0d560     10 D6 40 00 
0d564     00 00 00 00 
0d568     00 00 00 00 
0d56c     00 00 00 00 | 	byte	$10, $d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d570     00 00 00 00 
0d574     00 00 00 00 
0d578     00          | 	byte	$00[9]
0d579     8F E0 00 11 
0d57d     40 20 00 00 
0d581     00 00 00 00 
0d585     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $40, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d589     8F E0 00 11 
0d58d     40 20 00 00 
0d591     00 00 00 00 
0d595     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $40, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d599     8F E0 00 11 
0d59d     40 20 00 11 
0d5a1     40 40 00 00 
0d5a5     00 00 00 00 | 	byte	$8f, $e0, $00, $11, $40, $20, $00, $11, $40, $40, $00, $00, $00, $00, $00, $00
0d5a9     00 00 00 00 
0d5ad     00 00 00 00 
0d5b1     00 00 00    | 	byte	$00[11]
0d5b4     10 BE 00 00 
0d5b8     00 8F E0 00 
0d5bc     11 40 20 00 
0d5c0     11 40 40 00 | 	byte	$10, $be, $00, $00, $00, $8f, $e0, $00, $11, $40, $20, $00, $11, $40, $40, $00
0d5c4     00 00 00 00 
0d5c8     00 00 00 00 
0d5cc     00 00 00 00 
0d5d0     00 00 00 00 
0d5d4     00          | 	byte	$00[17]
0d5d5     D6 F0 00 10 
0d5d9     AA 10 00 11 
0d5dd     40 20 00 11 
0d5e1     40 40 00 00 | 	byte	$d6, $f0, $00, $10, $aa, $10, $00, $11, $40, $20, $00, $11, $40, $40, $00, $00
0d5e5     00 00 00 00 
0d5e9     00 00 00 00 
0d5ed     00 00 00 00 
0d5f1     00 00 00 00 
0d5f5     00 00 00    | 	byte	$00[19]
0d5f8     10 AA 10 00 
0d5fc     11 40 20 00 
0d600     11 40 40 00 
0d604     00 00 00 00 | 	byte	$10, $aa, $10, $00, $11, $40, $20, $00, $11, $40, $40, $00, $00, $00, $00, $00
0d608     00 00 00 00 
0d60c     00 00 00 00 
0d610     00 00 00 00 
0d614     00 00 00 00 | 	byte	$00[16]
0d618     10 AA 10 00 
0d61c     11 2E 20 00 
0d620     11 2E 40 00 
0d624     00 00 00 00 | 	byte	$10, $aa, $10, $00, $11, $2e, $20, $00, $11, $2e, $40, $00, $00, $00, $00, $00
0d628     00 00 00 00 
0d62c     00 00 00 00 | 	byte	$00[8]
0d630     11 2E 40 00 
0d634     10 BE 00 00 
0d638     10 AA 10 00 
0d63c     11 2E 20 00 | 	byte	$11, $2e, $40, $00, $10, $be, $00, $00, $10, $aa, $10, $00, $11, $2e, $20, $00
0d640     11 2E 40 00 
0d644     10 BE 00 00 
0d648     00 00 00 00 
0d64c     00 00 00 00 | 	byte	$11, $2e, $40, $00, $10, $be, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d650     11 2E 40 00 
0d654     10 BE 0C 20 
0d658     00 8F EF 06 
0d65c     11 FC 30 00 | 	byte	$11, $2e, $40, $00, $10, $be, $0c, $20, $00, $8f, $ef, $06, $11, $fc, $30, $00
0d660     10 FE 4C 20 
0d664     00 00 00 00 
0d668     00 8F E0 00 
0d66c     00 00 00 00 | 	byte	$10, $fe, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00
0d670     10 FE 4C 20 
0d674     00 00 00 00 
0d678     10 AA 10 00 
0d67c     10 FE 30 00 | 	byte	$10, $fe, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00, $10, $fe, $30, $00
0d680     00 00 00 00 
0d684     00 00 00 00 
0d688     00 00 00 00 | 	byte	$00[12]
0d68c     11 FC 30 00 
0d690     11 1D 4C 20 
0d694     00 D6 FC 20 
0d698     00 8F E0 00 | 	byte	$11, $fc, $30, $00, $11, $1d, $4c, $20, $00, $d6, $fc, $20, $00, $8f, $e0, $00
0d69c     11 FC 30 00 
0d6a0     10 FE 4C 20 
0d6a4     00 00 00 00 
0d6a8     00 8F E0 00 | 	byte	$11, $fc, $30, $00, $10, $fe, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d6ac     00 00 00 00 
0d6b0     10 FE 4C 20 
0d6b4     00 00 00 00 
0d6b8     10 AA 10 00 | 	byte	$00, $00, $00, $00, $10, $fe, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00
0d6bc     10 FE 30 00 
0d6c0     10 FE 4C 20 
0d6c4     00 00 00 00 
0d6c8     00 00 00 00 | 	byte	$10, $fe, $30, $00, $10, $fe, $4c, $20, $00, $00, $00, $00, $00, $00, $00, $00
0d6cc     11 FC 30 00 
0d6d0     11 1D 4C 20 
0d6d4     10 BE 0C 20 
0d6d8     00 8F E0 00 | 	byte	$11, $fc, $30, $00, $11, $1d, $4c, $20, $10, $be, $0c, $20, $00, $8f, $e0, $00
0d6dc     11 FC 30 00 
0d6e0     10 FE 4C 20 
0d6e4     00 00 00 00 
0d6e8     00 8F E0 00 | 	byte	$11, $fc, $30, $00, $10, $fe, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d6ec     00 00 00 00 
0d6f0     10 FE 4C 20 
0d6f4     00 00 00 00 
0d6f8     10 AA 10 00 | 	byte	$00, $00, $00, $00, $10, $fe, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00
0d6fc     10 FE 30 00 
0d700     00 00 00 00 
0d704     00 00 00 00 
0d708     00 00 00 00 | 	byte	$10, $fe, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d70c     11 FC 30 00 
0d710     11 1D 4C 20 
0d714     00 D6 FC 20 
0d718     00 8F E0 00 | 	byte	$11, $fc, $30, $00, $11, $1d, $4c, $20, $00, $d6, $fc, $20, $00, $8f, $e0, $00
0d71c     11 FC 30 00 
0d720     10 FE 4C 20 
0d724     00 00 00 00 
0d728     00 8F E0 00 | 	byte	$11, $fc, $30, $00, $10, $fe, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d72c     12 3A 30 00 
0d730     10 FE 4C 20 
0d734     00 00 00 00 
0d738     10 AA 10 00 | 	byte	$12, $3a, $30, $00, $10, $fe, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00
0d73c     11 FC 30 00 
0d740     10 FE 4C 20 
0d744     00 00 00 00 
0d748     00 00 00 00 | 	byte	$11, $fc, $30, $00, $10, $fe, $4c, $20, $00, $00, $00, $00, $00, $00, $00, $00
0d74c     10 FE 30 00 
0d750     11 1D 4C 20 
0d754     10 BE 0C 20 
0d758     00 8F E0 00 | 	byte	$10, $fe, $30, $00, $11, $1d, $4c, $20, $10, $be, $0c, $20, $00, $8f, $e0, $00
0d75c     11 AC 30 00 
0d760     10 D6 4C 20 
0d764     00 00 00 00 
0d768     00 8F E0 00 | 	byte	$11, $ac, $30, $00, $10, $d6, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d76c     00 00 00 00 
0d770     10 D6 4C 20 
0d774     00 00 00 00 
0d778     10 AA 10 00 | 	byte	$00, $00, $00, $00, $10, $d6, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00
0d77c     10 D6 30 00 
0d780     00 00 00 00 
0d784     00 00 00 00 
0d788     00 00 00 00 | 	byte	$10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d78c     11 AC 30 00 
0d790     10 F0 4C 20 
0d794     00 D6 FC 20 
0d798     00 8F E0 00 | 	byte	$11, $ac, $30, $00, $10, $f0, $4c, $20, $00, $d6, $fc, $20, $00, $8f, $e0, $00
0d79c     11 AC 30 00 
0d7a0     10 D6 4C 20 
0d7a4     00 00 00 00 
0d7a8     00 8F E0 00 | 	byte	$11, $ac, $30, $00, $10, $d6, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d7ac     00 00 00 00 
0d7b0     10 D6 4C 20 
0d7b4     00 00 00 00 
0d7b8     10 AA 10 00 | 	byte	$00, $00, $00, $00, $10, $d6, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00
0d7bc     10 D6 30 00 
0d7c0     10 D6 4C 20 
0d7c4     00 00 00 00 
0d7c8     00 00 00 00 | 	byte	$10, $d6, $30, $00, $10, $d6, $4c, $20, $00, $00, $00, $00, $00, $00, $00, $00
0d7cc     11 AC 30 00 
0d7d0     10 F0 4C 20 
0d7d4     10 BE 0C 20 
0d7d8     00 8F E0 00 | 	byte	$11, $ac, $30, $00, $10, $f0, $4c, $20, $10, $be, $0c, $20, $00, $8f, $e0, $00
0d7dc     11 AC 30 00 
0d7e0     10 D6 4C 20 
0d7e4     00 00 00 00 
0d7e8     00 8F E0 00 | 	byte	$11, $ac, $30, $00, $10, $d6, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d7ec     00 00 00 00 
0d7f0     10 D6 4C 20 
0d7f4     00 00 00 00 
0d7f8     10 AA 10 00 | 	byte	$00, $00, $00, $00, $10, $d6, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00
0d7fc     10 D6 30 00 
0d800     00 00 00 00 
0d804     00 00 00 00 
0d808     00 00 00 00 | 	byte	$10, $d6, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d80c     11 E0 30 00 
0d810     10 F0 4C 20 
0d814     00 D6 FC 20 
0d818     00 8F E0 00 | 	byte	$11, $e0, $30, $00, $10, $f0, $4c, $20, $00, $d6, $fc, $20, $00, $8f, $e0, $00
0d81c     11 AC 30 00 
0d820     10 D6 4C 20 
0d824     00 00 00 00 
0d828     00 8F E0 00 | 	byte	$11, $ac, $30, $00, $10, $d6, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d82c     11 E0 30 00 
0d830     10 D6 4C 20 
0d834     10 BE 0C 20 
0d838     10 AA 10 00 | 	byte	$11, $e0, $30, $00, $10, $d6, $4c, $20, $10, $be, $0c, $20, $10, $aa, $10, $00
0d83c     11 AC 30 00 
0d840     10 D6 4C 20 
0d844     00 00 00 00 
0d848     00 00 00 00 | 	byte	$11, $ac, $30, $00, $10, $d6, $4c, $20, $00, $00, $00, $00, $00, $00, $00, $00
0d84c     11 68 30 00 
0d850     10 F0 4C 20 
0d854     10 BE 0C 20 
0d858     00 8F E0 00 | 	byte	$11, $68, $30, $00, $10, $f0, $4c, $20, $10, $be, $0c, $20, $00, $8f, $e0, $00
0d85c     11 7D 30 00 
0d860     10 BE 4C 20 
0d864     00 00 00 00 
0d868     00 8F E0 00 | 	byte	$11, $7d, $30, $00, $10, $be, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d86c     00 00 00 00 
0d870     10 BE 4C 20 
0d874     00 00 00 00 
0d878     10 AA 10 00 | 	byte	$00, $00, $00, $00, $10, $be, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00
0d87c     10 BE 30 00 
0d880     00 00 00 00 
0d884     00 00 00 00 
0d888     00 00 00 00 | 	byte	$10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d88c     11 7D 30 00 
0d890     10 D6 4C 20 
0d894     00 D6 FC 20 
0d898     00 8F E0 00 | 	byte	$11, $7d, $30, $00, $10, $d6, $4c, $20, $00, $d6, $fc, $20, $00, $8f, $e0, $00
0d89c     11 7D 30 00 
0d8a0     10 BE 4C 20 
0d8a4     00 00 00 00 
0d8a8     00 8F E0 00 | 	byte	$11, $7d, $30, $00, $10, $be, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d8ac     00 00 00 00 
0d8b0     10 BE 4C 20 
0d8b4     00 00 00 00 
0d8b8     10 AA 10 00 | 	byte	$00, $00, $00, $00, $10, $be, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00
0d8bc     10 BE 30 00 
0d8c0     10 BE 4C 20 
0d8c4     00 00 00 00 
0d8c8     00 00 00 00 | 	byte	$10, $be, $30, $00, $10, $be, $4c, $20, $00, $00, $00, $00, $00, $00, $00, $00
0d8cc     11 7D 30 00 
0d8d0     10 D6 4C 20 
0d8d4     10 BE 0C 20 
0d8d8     00 8F E0 00 | 	byte	$11, $7d, $30, $00, $10, $d6, $4c, $20, $10, $be, $0c, $20, $00, $8f, $e0, $00
0d8dc     11 7D 30 00 
0d8e0     10 BE 4C 20 
0d8e4     00 00 00 00 
0d8e8     00 8F E0 00 | 	byte	$11, $7d, $30, $00, $10, $be, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d8ec     00 00 00 00 
0d8f0     10 BE 4C 20 
0d8f4     00 00 00 00 
0d8f8     10 AA 10 00 | 	byte	$00, $00, $00, $00, $10, $be, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00
0d8fc     10 BE 30 00 
0d900     00 00 00 00 
0d904     00 00 00 00 
0d908     00 00 00 00 | 	byte	$10, $be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d90c     11 AC 30 00 
0d910     10 D6 4C 20 
0d914     00 D6 FC 20 
0d918     00 8F E0 00 | 	byte	$11, $ac, $30, $00, $10, $d6, $4c, $20, $00, $d6, $fc, $20, $00, $8f, $e0, $00
0d91c     11 7D 30 00 
0d920     10 BE 4C 20 
0d924     00 00 00 00 
0d928     00 8F E0 00 | 	byte	$11, $7d, $30, $00, $10, $be, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d92c     11 AC 30 00 
0d930     10 BE 4C 20 
0d934     00 00 00 00 
0d938     10 AA 10 00 | 	byte	$11, $ac, $30, $00, $10, $be, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00
0d93c     10 BE 30 00 
0d940     10 BE 4C 20 
0d944     10 BE 0C 20 
0d948     00 00 00 00 | 	byte	$10, $be, $30, $00, $10, $be, $4c, $20, $10, $be, $0c, $20, $00, $00, $00, $00
0d94c     11 40 30 00 
0d950     10 D6 4C 20 
0d954     10 BE 0C 20 
0d958     00 8F E0 00 | 	byte	$11, $40, $30, $00, $10, $d6, $4c, $20, $10, $be, $0c, $20, $00, $8f, $e0, $00
0d95c     01 53 C0 00 
0d960     10 A0 4C 20 
0d964     00 00 00 00 
0d968     00 8F E0 00 | 	byte	$01, $53, $c0, $00, $10, $a0, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00
0d96c     00 00 00 00 
0d970     10 A0 4C 20 
0d974     00 00 00 00 
0d978     10 AA 10 00 | 	byte	$00, $00, $00, $00, $10, $a0, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00
0d97c     00 00 00 00 
0d980     00 00 00 00 
0d984     00 00 00 00 
0d988     00 00 00 00 
0d98c     00 00 00 00 | 	byte	$00[20]
0d990     10 B4 4C 20 
0d994     00 D6 FC 20 
0d998     00 8F E0 00 
0d99c     00 00 00 00 | 	byte	$10, $b4, $4c, $20, $00, $d6, $fc, $20, $00, $8f, $e0, $00, $00, $00, $00, $00
0d9a0     10 A0 4C 20 
0d9a4     00 00 00 00 
0d9a8     00 8F E0 00 
0d9ac     00 00 00 00 | 	byte	$10, $a0, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00
0d9b0     10 A0 4C 20 
0d9b4     00 00 00 00 
0d9b8     10 AA 10 00 
0d9bc     00 00 00 00 | 	byte	$10, $a0, $4c, $20, $00, $00, $00, $00, $10, $aa, $10, $00, $00, $00, $00, $00
0d9c0     10 A0 4C 20 
0d9c4     10 BE 0C 20 
0d9c8     00 00 00 00 
0d9cc     00 00 00 00 | 	byte	$10, $a0, $4c, $20, $10, $be, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00
0d9d0     10 B4 4C 20 
0d9d4     10 BE 0C 20 
0d9d8     00 8F E0 00 
0d9dc     00 A0 F0 00 | 	byte	$10, $b4, $4c, $20, $10, $be, $0c, $20, $00, $8f, $e0, $00, $00, $a0, $f0, $00
0d9e0     10 A0 4C 20 
0d9e4     00 00 00 00 
0d9e8     00 8F E0 00 
0d9ec     00 00 00 00 | 	byte	$10, $a0, $4c, $20, $00, $00, $00, $00, $00, $8f, $e0, $00, $00, $00, $00, $00
0d9f0     10 A0 4C 20 
0d9f4     10 BE 0C 20 
0d9f8     10 AA 10 00 
0d9fc     00 AA F0 00 | 	byte	$10, $a0, $4c, $20, $10, $be, $0c, $20, $10, $aa, $10, $00, $00, $aa, $f0, $00
0da00     00 00 00 00 
0da04     00 00 00 00 
0da08     00 00 00 00 
0da0c     00 00 00 00 | 	byte	$00[16]
0da10     10 B4 4C 20 
0da14     00 D6 FC 20 
0da18     10 AA 10 00 
0da1c     00 BE F0 00 | 	byte	$10, $b4, $4c, $20, $00, $d6, $fc, $20, $10, $aa, $10, $00, $00, $be, $f0, $00
0da20     10 A0 4C 20 
0da24     00 00 00 00 
0da28     00 00 00 00 
0da2c     00 BE F0 00 | 	byte	$10, $a0, $4c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $f0, $00
0da30     10 A0 4C 20 
0da34     00 D6 FC 20 
0da38     10 AA 10 00 
0da3c     00 D6 F0 00 | 	byte	$10, $a0, $4c, $20, $00, $d6, $fc, $20, $10, $aa, $10, $00, $00, $d6, $f0, $00
0da40     10 A0 4C 20 
0da44     00 00 00 00 
0da48     00 00 00 00 
0da4c     00 00 00 00 | 	byte	$10, $a0, $4c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0da50     10 B4 4C 20 
0da54     00 D6 F0 00 
0da58     00 00 00 00 
0da5c     01 53 C0 00 | 	byte	$10, $b4, $4c, $20, $00, $d6, $f0, $00, $00, $00, $00, $00, $01, $53, $c0, $00
0da60     00 00 00 00 
0da64     00 00 00 00 
0da68     00 00 00 00 
0da6c     00 00 00 00 
0da70     00 00 00 00 
0da74     00 00 00 00 
0da78     00          | 	byte	$00[25]
0da79     D6 FC 38 00 
0da7d     00 00 00 01 
0da81     53 CC 38 00 
0da85     00 00 00 00 | 	byte	$d6, $fc, $38, $00, $00, $00, $00, $01, $53, $cc, $38, $00, $00, $00, $00, $00
0da89     00 00 00 00 
0da8d     00 00 00 00 
0da91     00 00 00 00 | 	byte	$00[12]
0da95     D6 FC 32 00 
0da99     00 00 00 01 
0da9d     53 CC 32 00 
0daa1     00 00 00 00 | 	byte	$d6, $fc, $32, $00, $00, $00, $00, $01, $53, $cc, $32, $00, $00, $00, $00, $00
0daa5     00 00 00 00 
0daa9     00 00 00 00 
0daad     00 00 00 00 
0dab1     00 00 00 00 
0dab5     00 00 00 00 | 	byte	$00[20]
0dab9     D6 FC 2D 00 
0dabd     00 00 00 01 
0dac1     53 CC 2D 00 
0dac5     00 00 00 00 | 	byte	$d6, $fc, $2d, $00, $00, $00, $00, $01, $53, $cc, $2d, $00, $00, $00, $00, $00
0dac9     00 00 00 00 
0dacd     00 00 00 00 
0dad1     00 00 00 00 | 	byte	$00[12]
0dad5     D6 FC 27 00 
0dad9     00 00 00 01 
0dadd     53 CC 27 00 
0dae1     00 00 00 00 | 	byte	$d6, $fc, $27, $00, $00, $00, $00, $01, $53, $cc, $27, $00, $00, $00, $00, $00
0dae5     00 00 00 00 
0dae9     00 00 00 00 
0daed     00 00 00 00 
0daf1     00 00 00 00 
0daf5     00 00 00 00 | 	byte	$00[20]
0daf9     D6 FC 25 00 
0dafd     00 00 00 01 
0db01     53 CC 25 00 
0db05     00 00 00 00 | 	byte	$d6, $fc, $25, $00, $00, $00, $00, $01, $53, $cc, $25, $00, $00, $00, $00, $00
0db09     00 00 00 00 
0db0d     00 00 00 00 
0db11     00 00 00 00 | 	byte	$00[12]
0db15     D6 FC 20 00 
0db19     00 00 00 01 
0db1d     53 CC 20 00 
0db21     00 00 00 00 | 	byte	$d6, $fc, $20, $00, $00, $00, $00, $01, $53, $cc, $20, $00, $00, $00, $00, $00
0db25     00 00 00 00 
0db29     00 00 00 00 
0db2d     00 00 00 00 
0db31     00 00 00 00 
0db35     00 00 00 00 | 	byte	$00[20]
0db39     D6 FC 1D 00 
0db3d     00 00 00 01 
0db41     53 CC 1D 00 
0db45     00 00 00 00 | 	byte	$d6, $fc, $1d, $00, $00, $00, $00, $01, $53, $cc, $1d, $00, $00, $00, $00, $00
0db49     00 00 00 00 
0db4d     00 00 00 00 
0db51     00 00 00 00 | 	byte	$00[12]
0db55     D6 FC 19 00 
0db59     00 00 00 01 
0db5d     53 CC 19 00 
0db61     00 00 00 00 | 	byte	$d6, $fc, $19, $00, $00, $00, $00, $01, $53, $cc, $19, $00, $00, $00, $00, $00
0db65     00 00 00 00 
0db69     00 00 00 00 
0db6d     00 00 00 00 
0db71     00 00 00 00 
0db75     00 00 00 00 | 	byte	$00[20]
0db79     D6 FC 15 00 
0db7d     00 00 00 01 
0db81     53 CC 15 00 
0db85     00 00 00 00 | 	byte	$d6, $fc, $15, $00, $00, $00, $00, $01, $53, $cc, $15, $00, $00, $00, $00, $00
0db89     00 00 00 00 
0db8d     00 00 00 00 
0db91     00 00 00 00 | 	byte	$00[12]
0db95     D6 FC 10 00 
0db99     00 00 00 01 
0db9d     53 CC 10 00 
0dba1     00 00 00 00 | 	byte	$d6, $fc, $10, $00, $00, $00, $00, $01, $53, $cc, $10, $00, $00, $00, $00, $00
0dba5     00 00 00 00 
0dba9     00 00 00 00 
0dbad     00 00 00 00 
0dbb1     00 00 00 00 
0dbb5     00 00 00 00 | 	byte	$00[20]
0dbb9     D6 FC 0D 00 
0dbbd     00 00 00 01 
0dbc1     53 CC 0D 00 
0dbc5     00 00 00 00 | 	byte	$d6, $fc, $0d, $00, $00, $00, $00, $01, $53, $cc, $0d, $00, $00, $00, $00, $00
0dbc9     00 00 00 00 
0dbcd     00 00 00 00 
0dbd1     00 00 00 00 | 	byte	$00[12]
0dbd5     D6 FC 09 00 
0dbd9     00 00 00 01 
0dbdd     53 CC 09 00 
0dbe1     00 00 00 00 | 	byte	$d6, $fc, $09, $00, $00, $00, $00, $01, $53, $cc, $09, $00, $00, $00, $00, $00
0dbe5     00 00 00 00 
0dbe9     00 00 00 00 
0dbed     00 00 00 00 
0dbf1     00 00 00 00 
0dbf5     00 00 00 00 | 	byte	$00[20]
0dbf9     D6 FC 05 00 
0dbfd     00 00 00 01 
0dc01     53 CC 05 00 
0dc05     00 00 00 00 | 	byte	$d6, $fc, $05, $00, $00, $00, $00, $01, $53, $cc, $05, $00, $00, $00, $00, $00
0dc09     00 00 00 00 
0dc0d     00 00 00 00 
0dc11     00 00 00 00 | 	byte	$00[12]
0dc15     D6 FC 04 00 
0dc19     00 00 00 01 
0dc1d     53 CC 04 00 
0dc21     00 00 00 00 | 	byte	$d6, $fc, $04, $00, $00, $00, $00, $01, $53, $cc, $04, $00, $00, $00, $00, $00
0dc25     00 00 00 00 
0dc29     00 00 00 00 
0dc2d     00 00 00 00 
0dc31     00 00 00 00 
0dc35     00 00 00 00 | 	byte	$00[20]
0dc39     D6 FC 03 00 
0dc3d     00 00 00 01 
0dc41     53 CC 03 00 
0dc45     00 00 00 00 | 	byte	$d6, $fc, $03, $00, $00, $00, $00, $01, $53, $cc, $03, $00, $00, $00, $00, $00
0dc49     00 00 00 00 
      ...             
0dd4d     00 00 00 00 
0dd51     00 00 00 00 | 	byte	$00[268]
0dd55     D6 F0 00 00 
0dd59     D6 F0 00 10 
0dd5d     AA 10 00 10 
0dd61     AA 11 02 00 | 	byte	$d6, $f0, $00, $00, $d6, $f0, $00, $10, $aa, $10, $00, $10, $aa, $11, $02, $00
0dd65     00 00 00 00 
      ...             
0dd7d     00 00 00 00 
0dd81     00 00 00 00 | 	byte	$00[32]
0dd85     BE F0 00 00 
0dd89     BE F0 00 00 
0dd8d     00 00 00 00 
0dd91     00 00 00 00 | 	byte	$be, $f0, $00, $00, $be, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dd95     D6 F0 00 00 
0dd99     D6 F0 00 10 
0dd9d     AA 10 00 10 
0dda1     AA 11 02 00 | 	byte	$d6, $f0, $00, $00, $d6, $f0, $00, $10, $aa, $10, $00, $10, $aa, $11, $02, $00
0dda5     00 00 00 00 
      ...             
0ddbd     00 00 00 00 
0ddc1     00 00 00 00 | 	byte	$00[32]
0ddc5     BE F0 00 00 
0ddc9     BE F0 00 00 
0ddcd     00 00 00 00 
0ddd1     00 00 00 00 | 	byte	$be, $f0, $00, $00, $be, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ddd5     D6 F0 00 00 
0ddd9     D6 F0 00 10 
0dddd     AA 10 00 10 
0dde1     AA 11 02 00 | 	byte	$d6, $f0, $00, $00, $d6, $f0, $00, $10, $aa, $10, $00, $10, $aa, $11, $02, $00
0dde5     00 00 00 00 
0dde9     00 00 00 00 
0dded     00 00 00 00 
0ddf1     00 00 00 00 | 	byte	$00[16]
0ddf5     D6 F0 00 00 
0ddf9     D6 F0 00 10 
0ddfd     AA 10 00 10 
0de01     AA 11 02 00 | 	byte	$d6, $f0, $00, $00, $d6, $f0, $00, $10, $aa, $10, $00, $10, $aa, $11, $02, $00
0de05     00 00 00 00 
0de09     00 00 00 00 
0de0d     00 00 00 00 
0de11     00 00 00 00 | 	byte	$00[16]
0de15     D6 F0 00 00 
0de19     D6 F0 00 10 
0de1d     AA 10 00 10 
0de21     AA 11 02 00 | 	byte	$d6, $f0, $00, $00, $d6, $f0, $00, $10, $aa, $10, $00, $10, $aa, $11, $02, $00
0de25     D6 F0 00 00 
0de29     00 00 00 00 
0de2d     00 00 00 00 
0de31     00 00 00 00 | 	byte	$d6, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0de35     FE F0 00 01 
0de39     0D F0 00 10 
0de3d     AA 10 00 10 
0de41     AA 11 02 00 | 	byte	$fe, $f0, $00, $01, $0d, $f0, $00, $10, $aa, $10, $00, $10, $aa, $11, $02, $00
0de45     D6 F0 00 00 
0de49     00 00 00 00 
0de4d     00 00 00 00 
0de51     00 00 00 00 | 	byte	$d6, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0de55     00 00 00 E4 
0de59     DC EF 15 33 
0de5d     34 18 F0 CE 
0de61     CE DF F7 09 | 	byte	$00, $00, $00, $e4, $dc, $ef, $15, $33, $34, $18, $f0, $ce, $ce, $df, $f7, $09
0de65     17 08 E6 D2 
0de69     E3 FD 23 3B 
0de6d     39 1A 00 E4 
0de71     E7 FF 1C 1C | 	byte	$17, $08, $e6, $d2, $e3, $fd, $23, $3b, $39, $1a, $00, $e4, $e7, $ff, $1c, $1c
0de75     04 E4 C5 C4 
0de79     D7 EF 09 19 
0de7d     0C ED E0 EC 
0de81     05 27 39 30 | 	byte	$04, $e4, $c5, $c4, $d7, $ef, $09, $19, $0c, $ed, $e0, $ec, $05, $27, $39, $30
0de85     1C 00 E6 EF 
0de89     0F 25 22 0C 
0de8d     E4 CA C4 CF 
0de91     EF 09 0E FA | 	byte	$1c, $00, $e6, $ef, $0f, $25, $22, $0c, $e4, $ca, $c4, $cf, $ef, $09, $0e, $fa
0de95     DA D3 E5 FF 
0de99     27 3A 34 14 
0de9d     FC F8 05 23 
0dea1     2D 1A FA D8 | 	byte	$da, $d3, $e5, $ff, $27, $3a, $34, $14, $fc, $f8, $05, $23, $2d, $1a, $fa, $d8
0dea5     C8 CF DF FA 
0dea9     FD F8 E5 D8 
0dead     E3 FB 1F 34 
0deb1     3F 2C 0C F8 | 	byte	$c8, $cf, $df, $fa, $fd, $f8, $e5, $d8, $e3, $fb, $1f, $34, $3f, $2c, $0c, $f8
0deb5     FB 0F 1B 10 
0deb9     F4 DC CB D9 
0debd     E7 F9 07 04 
0dec1     F2 ED F9 0B | 	byte	$fb, $0f, $1b, $10, $f4, $dc, $cb, $d9, $e7, $f9, $07, $04, $f2, $ed, $f9, $0b
0dec5     23 31 26 10 
0dec9     F9 F7 07 15 
0decd     18 02 E9 D2 
0ded1     C9 D7 EF 0B | 	byte	$23, $31, $26, $10, $f9, $f7, $07, $15, $18, $02, $e9, $d2, $c9, $d7, $ef, $0b
0ded5     16 08 FC F4 
0ded9     FB 17 2A 2E 
0dedd     20 F8 E6 E7 
0dee1     FD 0C 04 F4 | 	byte	$16, $08, $fc, $f4, $fb, $17, $2a, $2e, $20, $f8, $e6, $e7, $fd, $0c, $04, $f4
0dee5     E0 D1 DD F7 
0dee9     0B 1C 18 02 
0deed     F8 FF 0E 1D 
0def1     1F 12 00 EC | 	byte	$e0, $d1, $dd, $f7, $0b, $1c, $18, $02, $f8, $ff, $0e, $1d, $1f, $12, $00, $ec
0def5     EF FF 0B 09 
0def9     FC E8 DF E7 
0defd     F2 FF 0F 0E 
0df01     01 FE F7 FA | 	byte	$ef, $ff, $0b, $09, $fc, $e8, $df, $e7, $f2, $ff, $0f, $0e, $01, $fe, $f7, $fa
0df05     06 0F 10 0A 
0df09     00 04 0F 19 
0df0d     1C 0A F8 E2 
0df11     E3 E8 F3 FE | 	byte	$06, $0f, $10, $0a, $00, $04, $0f, $19, $1c, $0a, $f8, $e2, $e3, $e8, $f3, $fe
0df15     FA E8 E0 DF 
0df19     EF 07 17 1B 
0df1d     10 04 07 1F 
0df21     33 30 1A F0 | 	byte	$fa, $e8, $e0, $df, $ef, $07, $17, $1b, $10, $04, $07, $1f, $33, $30, $1a, $f0
0df25     D8 DD EE FF 
0df29     0D 02 EC E0 
0df2d     E3 F7 0B 13 
0df31     10 06 03 17 | 	byte	$d8, $dd, $ee, $ff, $0d, $02, $ec, $e0, $e3, $f7, $0b, $13, $10, $06, $03, $17
0df35     27 28 18 FC 
0df39     E1 E3 E5 F3 
0df3d     FD F8 F6 F9 
0df41     03 13 1F 24 | 	byte	$27, $28, $18, $fc, $e1, $e3, $e5, $f3, $fd, $f8, $f6, $f9, $03, $13, $1f, $24
0df45     11 04 FC 0F 
0df49     27 2C 20 00 
0df4d     D8 CA CD E3 
0df51     F3 01 00 F9 | 	byte	$11, $04, $fc, $0f, $27, $2c, $20, $00, $d8, $ca, $cd, $e3, $f3, $01, $00, $f9
0df55     FD 05 15 1D 
0df59     19 13 11 13 
0df5d     1C 1E 12 04 
0df61     F1 E8 E4 E3 | 	byte	$fd, $05, $15, $1d, $19, $13, $11, $13, $1c, $1e, $12, $04, $f1, $e8, $e4, $e3
0df65     E9 E6 EE FD 
0df69     0D 17 1B 14 
0df6d     0A 00 01 0B 
0df71     15 14 0A F2 | 	byte	$e9, $e6, $ee, $fd, $0d, $17, $1b, $14, $0a, $00, $01, $0b, $15, $14, $0a, $f2
0df75     E4 E9 EB F3 
0df79     F5 F8 FA F7 
0df7d     05 17 27 26 
0df81     1C 17 14 08 | 	byte	$e4, $e9, $eb, $f3, $f5, $f8, $fa, $f7, $05, $17, $27, $26, $1c, $17, $14, $08
0df85     06 F9 EF E8 
0df89     E9 E7 E6 E9 
0df8d     E4 ED FB 07 
0df91     1A 27 2E 2B | 	byte	$06, $f9, $ef, $e8, $e9, $e7, $e6, $e9, $e4, $ed, $fb, $07, $1a, $27, $2e, $2b
0df95     26 1C 14 0C 
0df99     00 F0 F0 EC 
0df9d     E4 D6 DB E2 
0dfa1     EB F6 FF 0A | 	byte	$26, $1c, $14, $0c, $00, $f0, $f0, $ec, $e4, $d6, $db, $e2, $eb, $f6, $ff, $0a
0dfa5     0D 17 24 27 
0dfa9     2B 2A 16 08 
0dfad     F2 E4 DF E0 
0dfb1     F7 E8 E2 FF | 	byte	$0d, $17, $24, $27, $2b, $2a, $16, $08, $f2, $e4, $df, $e0, $f7, $e8, $e2, $ff
0dfb5     C4 FF EF 0D 
0dfb9     2E 28 10 24 
0dfbd     07 08 13 08 
0dfc1     EF 00 D7 E0 | 	byte	$c4, $ff, $ef, $0d, $2e, $28, $10, $24, $07, $08, $13, $08, $ef, $00, $d7, $e0
0dfc5     DF E0 FF E4 
0dfc9     04 F5 EF 24 
0dfcd     F7 18 37 09 
0dfd1     2C 24 08 FF | 	byte	$df, $e0, $ff, $e4, $04, $f5, $ef, $24, $f7, $18, $37, $09, $2c, $24, $08, $ff
0dfd5     D8 FF D4 E7 
0dfd9     EB D8 EF D0 
0dfdd     F9 EF 00 37 
0dfe1     EF 30 1F 09 | 	byte	$d8, $ff, $d4, $e7, $eb, $d8, $ef, $d0, $f9, $ef, $00, $37, $ef, $30, $1f, $09
0dfe5     3D 1C 17 20 
0dfe9     FF E0 E8 CF 
0dfed     E0 E8 DF E0 
0dff1     00 FF 00 1A | 	byte	$3d, $1c, $17, $20, $ff, $e0, $e8, $cf, $e0, $e8, $df, $e0, $00, $ff, $00, $1a
0dff5     13 21 18 1F 
0dff9     20 0C F6 EF 
0dffd     08 C7 04 E0 
0e001     D7 EC CA 17 | 	byte	$13, $21, $18, $1f, $20, $0c, $f6, $ef, $08, $c7, $04, $e0, $d7, $ec, $ca, $17
0e005     DF 30 17 14 
0e009     3F 17 10 2A 
0e00d     E4 08 CF 0C 
0e011     B9 F8 DB C0 | 	byte	$df, $30, $17, $14, $3f, $17, $10, $2a, $e4, $08, $cf, $0c, $b9, $f8, $db, $c0
0e015     FF C8 1B DF 
0e019     34 EF 42 1B 
0e01d     40 1F 10 16 
0e021     E5 F0 EF E4 | 	byte	$ff, $c8, $1b, $df, $34, $ef, $42, $1b, $40, $1f, $10, $16, $e5, $f0, $ef, $e4
0e025     D5 F4 CF F8 
0e029     FB 00 FB 18 
0e02d     0F 20 2B 10 
0e031     34 FF 00 E4 | 	byte	$d5, $f4, $cf, $f8, $fb, $00, $fb, $18, $0f, $20, $2b, $10, $34, $ff, $00, $e4
0e035     F1 DB E8 E7 
0e039     E8 FF 00 2F 
0e03d     0F 24 14 1F 
0e041     00 2F F0 17 | 	byte	$f1, $db, $e8, $e7, $e8, $ff, $00, $2f, $0f, $24, $14, $1f, $00, $2f, $f0, $17
0e045     00 F7 D8 EC 
0e049     DE D4 DF E8 
0e04d     FF 01 28 0F 
0e051     28 1F 00 30 | 	byte	$00, $f7, $d8, $ec, $de, $d4, $df, $e8, $ff, $01, $28, $0f, $28, $1f, $00, $30
0e055     EF 20 FF D8 
0e059     00 DF D0 F7 
0e05d     D7 F4 FF 05 
0e061     00 17 20 0F | 	byte	$ef, $20, $ff, $d8, $00, $df, $d0, $f7, $d7, $f4, $ff, $05, $00, $17, $20, $0f
0e065     40 09 0B 00 
0e069     EF F4 F4 CF 
0e06d     00 C0 FF CF 
0e071     0C 09 EF 48 | 	byte	$40, $09, $0b, $00, $ef, $f4, $f4, $cf, $00, $c0, $ff, $cf, $0c, $09, $ef, $48
0e075     F4 1B 30 0F 
0e079     28 17 F0 E8 
0e07d     E7 F8 C7 E4 
0e081     F7 E0 CF 10 | 	byte	$f4, $1b, $30, $0f, $28, $17, $f0, $e8, $e7, $f8, $c7, $e4, $f7, $e0, $cf, $10
0e085     EF 28 27 19 
0e089     30 23 1F F9 
0e08d     14 16 D8 E8 
0e091     F8 BF F0 F7 | 	byte	$ef, $28, $27, $19, $30, $23, $1f, $f9, $14, $16, $d8, $e8, $f8, $bf, $f0, $f7
0e095     E0 E0 1A EF 
0e099     10 FF 20 2F 
0e09d     07 40 00 0F 
0e0a1     DC F0 FF C3 | 	byte	$e0, $e0, $1a, $ef, $10, $ff, $20, $2f, $07, $40, $00, $0f, $dc, $f0, $ff, $c3
0e0a5     00 BF F8 C7 
0e0a9     15 DF 26 0A 
0e0ad     2F 18 34 1B 
0e0b1     09 F8 10 C7 | 	byte	$00, $bf, $f8, $c7, $15, $df, $26, $0a, $2f, $18, $34, $1b, $09, $f8, $10, $c7
0e0b5     0C B7 F0 D7 
0e0b9     E0 EF F0 E0 
0e0bd     1F E8 37 40 
0e0c1     1F 1D 20 02 | 	byte	$0c, $b7, $f0, $d7, $e0, $ef, $f0, $e0, $1f, $e8, $37, $40, $1f, $1d, $20, $02
0e0c5     DF 10 DF 00 
0e0c9     EB C8 0F C0 
0e0cd     0A E7 00 2F 
0e0d1     FD 28 14 1F | 	byte	$df, $10, $df, $00, $eb, $c8, $0f, $c0, $0a, $e7, $00, $2f, $fd, $28, $14, $1f
0e0d5     08 FF 10 FF 
0e0d9     E8 E8 DF D8 
0e0dd     EF E4 17 E5 
0e0e1     2B D8 2F 00 | 	byte	$08, $ff, $10, $ff, $e8, $e8, $df, $d8, $ef, $e4, $17, $e5, $2b, $d8, $2f, $00
0e0e5     2F 09 20 0E 
0e0e9     F3 E0 FF D0 
0e0ed     E6 E7 D8 F5 
0e0f1     FF E0 37 E9 | 	byte	$2f, $09, $20, $0e, $f3, $e0, $ff, $d0, $e6, $e7, $d8, $f5, $ff, $e0, $37, $e9
0e0f5     37 00 2F FB 
0e0f9     00 0F DF 10 
0e0fd     DC FF 00 C9 
0e101     FE EB E8 FF | 	byte	$37, $00, $2f, $fb, $00, $0f, $df, $10, $dc, $ff, $00, $c9, $fe, $eb, $e8, $ff
0e105     3A 07 42 1A 
0e109     10 06 F4 E8 
0e10d     E8 E9 D9 E0 
0e111     D5 DA E3 ED | 	byte	$3a, $07, $42, $1a, $10, $06, $f4, $e8, $e8, $e9, $d9, $e0, $d5, $da, $e3, $ed
0e115     00 0B 18 2F 
0e119     24 32 27 18 
0e11d     08 0F D4 E7 
0e121     E0 BF E0 CF | 	byte	$00, $0b, $18, $2f, $24, $32, $27, $18, $08, $0f, $d4, $e7, $e0, $bf, $e0, $cf
0e125     E8 EF 00 FF 
0e129     08 17 28 23 
0e12d     2A 00 1B F0 
0e131     FB CD F9 CF | 	byte	$e8, $ef, $00, $ff, $08, $17, $28, $23, $2a, $00, $1b, $f0, $fb, $cd, $f9, $cf
0e135     EE D9 CF 02 
0e139     DF 20 1F 24 
0e13d     38 23 20 06 
0e141     07 E8 FF E0 | 	byte	$ee, $d9, $cf, $02, $df, $20, $1f, $24, $38, $23, $20, $06, $07, $e8, $ff, $e0
0e145     E0 DF CA DF 
0e149     D0 FF F0 17 
0e14d     10 1F 28 1C 
0e151     25 14 10 03 | 	byte	$e0, $df, $ca, $df, $d0, $ff, $f0, $17, $10, $1f, $28, $1c, $25, $14, $10, $03
0e155     EA EE E4 DB 
0e159     E0 E7 E8 F7 
0e15d     FE 0F 13 19 
0e161     16 10 0A 08 | 	byte	$ea, $ee, $e4, $db, $e0, $e7, $e8, $f7, $fe, $0f, $13, $19, $16, $10, $0a, $08
0e165     04 02 FC F0 
0e169     EF E0 E7 E5 
0e16d     F7 F6 0D 0F 
0e171     12 14 04 FC | 	byte	$04, $02, $fc, $f0, $ef, $e0, $e7, $e5, $f7, $f6, $0d, $0f, $12, $14, $04, $fc
0e175     F9 F1 F7 F6 
0e179     F5 F7 F5 F9 
0e17d     F9 00 02 05 
0e181     0A 0F 11 08 | 	byte	$f9, $f1, $f7, $f6, $f5, $f7, $f5, $f9, $f9, $00, $02, $05, $0a, $0f, $11, $08
0e185     04 F0 E6 DD 
0e189     DF E3 EB F2 
0e18d     F9 FC 02 05 
0e191     09 11 16 16 | 	byte	$04, $f0, $e6, $dd, $df, $e3, $eb, $f2, $f9, $fc, $02, $05, $09, $11, $16, $16
0e195     0C 00 F0 E8 
0e199     E3 E3 E5 E4 
0e19d     E7 ED F5 FF 
0e1a1     0F 1B 22 22 | 	byte	$0c, $00, $f0, $e8, $e3, $e3, $e5, $e4, $e7, $ed, $f5, $ff, $0f, $1b, $22, $22
0e1a5     1E 16 0A FC 
0e1a9     EE E0 D4 CD 
0e1ad     CB CF DA EA 
0e1b1     FB 0B 11 13 | 	byte	$1e, $16, $0a, $fc, $ee, $e0, $d4, $cd, $cb, $cf, $da, $ea, $fb, $0b, $11, $13
0e1b5     19 1F 29 29 
0e1b9     1C 0A F2 E0 
0e1bd     D7 D7 DB E1 
0e1c1     E4 E8 EE F7 | 	byte	$19, $1f, $29, $29, $1c, $0a, $f2, $e0, $d7, $d7, $db, $e1, $e4, $e8, $ee, $f7
0e1c5     06 13 1F 24 
0e1c9     20 10 00 EE 
0e1cd     EA E9 EB EA 
0e1d1     E5 E0 E0 E7 | 	byte	$06, $13, $1f, $24, $20, $10, $00, $ee, $ea, $e9, $eb, $ea, $e5, $e0, $e0, $e7
0e1d5     F9 0F 1F 2B 
0e1d9     2A 20 12 02 
0e1dd     F5 EA E0 D8 
0e1e1     D5 D4 D9 E3 | 	byte	$f9, $0f, $1f, $2b, $2a, $20, $12, $02, $f5, $ea, $e0, $d8, $d5, $d4, $d9, $e3
0e1e5     F1 FF 0F 19 
0e1e9     1F 22 20 1B 
0e1ed     14 08 F4 E2 
0e1f1     D4 CD CF D6 | 	byte	$f1, $ff, $0f, $19, $1f, $22, $20, $1b, $14, $08, $f4, $e2, $d4, $cd, $cf, $d6
0e1f5     E2 EF FD 09 
0e1f9     15 21 29 2A 
0e1fd     25 1A 09 F8 
0e201     E8 DC D1 CB | 	byte	$e2, $ef, $fd, $09, $15, $21, $29, $2a, $25, $1a, $09, $f8, $e8, $dc, $d1, $cb
0e205     CB D1 DC EB 
0e209     FA 0D 1F 2D 
0e20d     33 32 2A 16 
0e211     04 F4 E9 DE | 	byte	$cb, $d1, $dc, $eb, $fa, $0d, $1f, $2d, $33, $32, $2a, $16, $04, $f4, $e9, $de
0e215     D4 D1 D3 D9 
0e219     E3 F1 FF 0D 
0e21d     18 1C 1D 1D 
0e221     19 10 00 ED | 	byte	$d4, $d1, $d3, $d9, $e3, $f1, $ff, $0d, $18, $1c, $1d, $1d, $19, $10, $00, $ed
0e225     E4 DC DC DF 
0e229     E3 EC F5 02 
0e22d     0F 1A 1C 19 
0e231     11 06 FC F4 | 	byte	$e4, $dc, $dc, $df, $e3, $ec, $f5, $02, $0f, $1a, $1c, $19, $11, $06, $fc, $f4
0e235     F2 F0 EC E4 
0e239     DC DA DF EF 
0e23d     05 1B 21 19 
0e241     0A FC F6 F7 | 	byte	$f2, $f0, $ec, $e4, $dc, $da, $df, $ef, $05, $1b, $21, $19, $0a, $fc, $f6, $f7
0e245     F9 F7 F2 EA 
0e249     E7 E8 EE F9 
0e24d     03 0F 19 1B 
0e251     16 0E 07 00 | 	byte	$f9, $f7, $f2, $ea, $e7, $e8, $ee, $f9, $03, $0f, $19, $1b, $16, $0e, $07, $00
0e255     F4 E8 DC D7 
0e259     DA E3 EC F7 
0e25d     FD 04 0B 16 
0e261     1F 20 1A 0A | 	byte	$f4, $e8, $dc, $d7, $da, $e3, $ec, $f7, $fd, $04, $0b, $16, $1f, $20, $1a, $0a
0e265     FA EE EB EB 
0e269     EB E9 E5 E5 
0e26d     E8 F1 FF 0F 
0e271     1B 1F 1A 0F | 	byte	$fa, $ee, $eb, $eb, $eb, $e9, $e5, $e5, $e8, $f1, $ff, $0f, $1b, $1f, $1a, $0f
0e275     04 F8 EC E4 
0e279     E1 E0 E1 E5 
0e27d     EB F7 02 0C 
0e281     13 17 15 0F | 	byte	$04, $f8, $ec, $e4, $e1, $e0, $e1, $e5, $eb, $f7, $02, $0c, $13, $17, $15, $0f
0e285     0A 02 F8 EC 
0e289     E3 DF DE E4 
0e28d     EC F6 FD 05 
0e291     0F 1A 21 22 | 	byte	$0a, $02, $f8, $ec, $e3, $df, $de, $e4, $ec, $f6, $fd, $05, $0f, $1a, $21, $22
0e295     1A 0B F8 E5 
0e299     D9 D0 CD CF 
0e29d     D6 DF EB FB 
0e2a1     07 17 25 2B | 	byte	$1a, $0b, $f8, $e5, $d9, $d0, $cd, $cf, $d6, $df, $eb, $fb, $07, $17, $25, $2b
0e2a5     2C 28 21 12 
0e2a9     01 EA D8 CD 
0e2ad     CD D5 DD E9 
0e2b1     F1 FB 07 0F | 	byte	$2c, $28, $21, $12, $01, $ea, $d8, $cd, $cd, $d5, $dd, $e9, $f1, $fb, $07, $0f
0e2b5     15 18 18 13 
0e2b9     09 00 F2 EA 
0e2bd     E4 E3 E5 E9 
0e2c1     EE F4 FB 07 | 	byte	$15, $18, $18, $13, $09, $00, $f2, $ea, $e4, $e3, $e5, $e9, $ee, $f4, $fb, $07
0e2c5     13 1B 1B 14 
0e2c9     04 FA F0 EB 
0e2cd     EA E9 E8 E9 
0e2d1     EF F5 FF 08 | 	byte	$13, $1b, $1b, $14, $04, $fa, $f0, $eb, $ea, $e9, $e8, $e9, $ef, $f5, $ff, $08
0e2d5     0F 11 10 0C 
0e2d9     08 00 F4 EA 
0e2dd     E0 DD E1 E7 
0e2e1     EC F5 FF 0F | 	byte	$0f, $11, $10, $0c, $08, $00, $f4, $ea, $e0, $dd, $e1, $e7, $ec, $f5, $ff, $0f
0e2e5     1D 29 2A 24 
0e2e9     18 08 F8 EB 
0e2ed     E4 DE D9 D9 
0e2f1     DA DF EB FB | 	byte	$1d, $29, $2a, $24, $18, $08, $f8, $eb, $e4, $de, $d9, $d9, $da, $df, $eb, $fb
0e2f5     0B 1D 29 2B 
0e2f9     28 1A 0E 00 
0e2fd     F2 E8 DD D8 
0e301     D7 DB E6 F3 | 	byte	$0b, $1d, $29, $2b, $28, $1a, $0e, $00, $f2, $e8, $dd, $d8, $d7, $db, $e6, $f3
0e305     FF 0E 1B 23 
0e309     27 29 26 18 
0e30d     08 F5 E4 DA 
0e311     D6 D5 D6 D8 | 	byte	$ff, $0e, $1b, $23, $27, $29, $26, $18, $08, $f5, $e4, $da, $d6, $d5, $d6, $d8
0e315     DF EB FF 13 
0e319     25 2D 2A 20 
0e31d     11 04 FD FA 
0e321     F5 EE E6 E0 | 	byte	$df, $eb, $ff, $13, $25, $2d, $2a, $20, $11, $04, $fd, $fa, $f5, $ee, $e6, $e0
0e325     E3 EF FD 0B 
0e329     12 10 0C 08 
0e32d     08 07 06 00 
0e331     F4 E9 E4 E5 | 	byte	$e3, $ef, $fd, $0b, $12, $10, $0c, $08, $08, $07, $06, $00, $f4, $e9, $e4, $e5
0e335     ED FB 07 13 
0e339     19 16 11 08 
0e33d     00 FD FA F2 
0e341     EE E6 E6 ED | 	byte	$ed, $fb, $07, $13, $19, $16, $11, $08, $00, $fd, $fa, $f2, $ee, $e6, $e6, $ed
0e345     F7 03 0E 13 
0e349     15 17 1B 1A 
0e34d     18 0A F8 E8 
0e351     DC D6 D7 DA | 	byte	$f7, $03, $0e, $13, $15, $17, $1b, $1a, $18, $0a, $f8, $e8, $dc, $d6, $d7, $da
0e355     E2 EB FB 0B 
0e359     1E 2B 30 2E 
0e35d     25 1C 0C F8 
0e361     E6 DC D5 D6 | 	byte	$e2, $eb, $fb, $0b, $1e, $2b, $30, $2e, $25, $1c, $0c, $f8, $e6, $dc, $d5, $d6
0e365     DB E3 EB F4 
0e369     FF 0F 1F 2F 
0e36d     34 32 26 12 
0e371     F8 E8 DA D1 | 	byte	$db, $e3, $eb, $f4, $ff, $0f, $1f, $2f, $34, $32, $26, $12, $f8, $e8, $da, $d1
0e375     D2 D7 DE E7 
0e379     F3 03 13 1F 
0e37d     2F 32 2F 23 
0e381     12 00 F2 E8 | 	byte	$d2, $d7, $de, $e7, $f3, $03, $13, $1f, $2f, $32, $2f, $23, $12, $00, $f2, $e8
0e385     E0 DA D9 DC 
0e389     E2 EF FF 0F 
0e38d     1B 22 21 1B 
0e391     16 10 06 FD | 	byte	$e0, $da, $d9, $dc, $e2, $ef, $ff, $0f, $1b, $22, $21, $1b, $16, $10, $06, $fd
0e395     F4 EA E6 E6 
0e399     EB F6 FF 0F 
0e39d     19 1A 16 10 
0e3a1     07 00 F9 F6 | 	byte	$f4, $ea, $e6, $e6, $eb, $f6, $ff, $0f, $19, $1a, $16, $10, $07, $00, $f9, $f6
0e3a5     F5 F5 F3 F0 
0e3a9     EC F1 FD 0E 
0e3ad     1D 25 22 16 
0e3b1     06 FC F7 F6 | 	byte	$f5, $f5, $f3, $f0, $ec, $f1, $fd, $0e, $1d, $25, $22, $16, $06, $fc, $f7, $f6
0e3b5     F5 F2 EC E9 
0e3b9     E8 EF FD 0D 
0e3bd     1B 21 1E 14 
0e3c1     08 00 FD FA | 	byte	$f5, $f2, $ec, $e9, $e8, $ef, $fd, $0d, $1b, $21, $1e, $14, $08, $00, $fd, $fa
0e3c5     FA F7 F4 EF 
0e3c9     ED EF F9 03 
0e3cd     0F 15 12 0B 
0e3d1     08 09 07 02 | 	byte	$fa, $f7, $f4, $ef, $ed, $ef, $f9, $03, $0f, $15, $12, $0b, $08, $09, $07, $02
0e3d5     F8 EB E8 E9 
0e3d9     F2 FC 03 07 
0e3dd     09 0A 0B 09 
0e3e1     08 07 00 F8 | 	byte	$f8, $eb, $e8, $e9, $f2, $fc, $03, $07, $09, $0a, $0b, $09, $08, $07, $00, $f8
0e3e5     F0 EB EE F6 
0e3e9     FF 05 0A 0B 
0e3ed     0D 13 15 16 
0e3f1     11 05 F5 E6 | 	byte	$f0, $eb, $ee, $f6, $ff, $05, $0a, $0b, $0d, $13, $15, $16, $11, $05, $f5, $e6
0e3f5     DC DA DD E3 
0e3f9     E7 EF F9 0B 
0e3fd     1D 2F 35 31 
0e401     25 14 04 F9 | 	byte	$dc, $da, $dd, $e3, $e7, $ef, $f9, $0b, $1d, $2f, $35, $31, $25, $14, $04, $f9
0e405     F1 EB E5 DC 
0e409     D6 D6 DD EB 
0e40d     FF 13 23 2B 
0e411     2B 25 1D 12 | 	byte	$f1, $eb, $e5, $dc, $d6, $d6, $dd, $eb, $ff, $13, $23, $2b, $2b, $25, $1d, $12
0e415     05 F6 EA E0 
0e419     DD DD E4 EF 
0e41d     FF 0F 1A 1C 
0e421     18 14 11 10 | 	byte	$05, $f6, $ea, $e0, $dd, $dd, $e4, $ef, $ff, $0f, $1a, $1c, $18, $14, $11, $10
0e425     0C 00 F0 DE 
0e429     D8 D9 E3 EF 
0e42d     FF 07 0F 1B 
0e431     23 28 26 1B | 	byte	$0c, $00, $f0, $de, $d8, $d9, $e3, $ef, $ff, $07, $0f, $1b, $23, $28, $26, $1b
0e435     0C F9 ED E3 
0e439     E0 E3 E5 E7 
0e43d     ED F2 FD 09 
0e441     19 27 2D 2D | 	byte	$0c, $f9, $ed, $e3, $e0, $e3, $e5, $e7, $ed, $f2, $fd, $09, $19, $27, $2d, $2d
0e445     22 10 00 F0 
0e449     E4 DE DD DA 
0e44d     DD E2 ED FF 
0e451     0F 21 29 29 | 	byte	$22, $10, $00, $f0, $e4, $de, $dd, $da, $dd, $e2, $ed, $ff, $0f, $21, $29, $29
0e455     26 20 14 09 
0e459     FD F4 EC E6 
0e45d     E0 DD DF EB 
0e461     F7 0B 19 21 | 	byte	$26, $20, $14, $09, $fd, $f4, $ec, $e6, $e0, $dd, $df, $eb, $f7, $0b, $19, $21
0e465     20 1B 12 09 
0e469     00 F9 EE E6 
0e46d     E1 E1 E7 F5 
0e471     FF 0D 15 14 | 	byte	$20, $1b, $12, $09, $00, $f9, $ee, $e6, $e1, $e1, $e7, $f5, $ff, $0d, $15, $14
0e475     10 0C 0B 0C 
0e479     0E 0C 00 F1 
0e47d     E7 E2 E4 EB 
0e481     F1 F9 FF 0B | 	byte	$10, $0c, $0b, $0c, $0e, $0c, $00, $f1, $e7, $e2, $e4, $eb, $f1, $f9, $ff, $0b
0e485     12 13 10 06 
0e489     FC F5 F2 F2 
0e48d     F5 F6 F7 F6 
0e491     F9 FE 09 12 | 	byte	$12, $13, $10, $06, $fc, $f5, $f2, $f2, $f5, $f6, $f7, $f6, $f9, $fe, $09, $12
0e495     19 1A 13 09 
0e499     00 F8 F3 EE 
0e49d     EA E4 E1 E1 
0e4a1     E7 F5 06 14 | 	byte	$19, $1a, $13, $09, $00, $f8, $f3, $ee, $ea, $e4, $e1, $e1, $e7, $f5, $06, $14
0e4a5     1F 25 23 19 
0e4a9     0E 01 FB F5 
0e4ad     ED E6 E0 DF 
0e4b1     E1 EA F5 FF | 	byte	$1f, $25, $23, $19, $0e, $01, $fb, $f5, $ed, $e6, $e0, $df, $e1, $ea, $f5, $ff
0e4b5     0C 17 1F 23 
0e4b9     25 1D 12 04 
0e4bd     F4 E5 DD DC 
0e4c1     DF E9 EF F5 | 	byte	$0c, $17, $1f, $23, $25, $1d, $12, $04, $f4, $e5, $dd, $dc, $df, $e9, $ef, $f5
0e4c5     FA 05 11 1C 
0e4c9     21 1E 16 08 
0e4cd     FC F4 EC E8 
0e4d1     E5 E7 EE F7 | 	byte	$fa, $05, $11, $1c, $21, $1e, $16, $08, $fc, $f4, $ec, $e8, $e5, $e7, $ee, $f7
0e4d5     04 11 19 1A 
0e4d9     19 14 0B 07 
0e4dd     FC F0 E1 D8 
0e4e1     D4 DA E5 F3 | 	byte	$04, $11, $19, $1a, $19, $14, $0b, $07, $fc, $f0, $e1, $d8, $d4, $da, $e5, $f3
0e4e5     FE 0B 13 1D 
0e4e9     27 2F 30 22 
0e4ed     12 F8 E4 D6 
0e4f1     CE CD CF D7 | 	byte	$fe, $0b, $13, $1d, $27, $2f, $30, $22, $12, $f8, $e4, $d6, $ce, $cd, $cf, $d7
0e4f5     E2 ED FF 0F 
0e4f9     25 35 3E 38 
0e4fd     2C 1A 08 F6 
0e501     E8 D6 C8 C1 | 	byte	$e2, $ed, $ff, $0f, $25, $35, $3e, $38, $2c, $1a, $08, $f6, $e8, $d6, $c8, $c1
0e505     C1 C9 D7 EB 
0e509     05 1B 2D 37 
0e50d     3C 38 30 20 
0e511     0A F1 DC D2 | 	byte	$c1, $c9, $d7, $eb, $05, $1b, $2d, $37, $3c, $38, $30, $20, $0a, $f1, $dc, $d2
0e515     CE D2 D3 D5 
0e519     D9 E3 F9 13 
0e51d     29 33 34 28 
0e521     18 04 FC F4 | 	byte	$ce, $d2, $d3, $d5, $d9, $e3, $f9, $13, $29, $33, $34, $28, $18, $04, $fc, $f4
0e525     EE E6 E0 D8 
0e529     DA E4 F5 07 
0e52d     13 1F 20 17 
0e531     11 0D 06 FD | 	byte	$ee, $e6, $e0, $d8, $da, $e4, $f5, $07, $13, $1f, $20, $17, $11, $0d, $06, $fd
0e535     F2 E4 DB D8 
0e539     DA E2 EB FB 
0e53d     07 11 1B 23 
0e541     25 24 1A 09 | 	byte	$f2, $e4, $db, $d8, $da, $e2, $eb, $fb, $07, $11, $1b, $23, $25, $24, $1a, $09
0e545     F3 E8 E0 DD 
0e549     DE E0 E2 E3 
0e54d     ED F9 07 1B 
0e551     29 2E 24 18 | 	byte	$f3, $e8, $e0, $dd, $de, $e0, $e2, $e3, $ed, $f9, $07, $1b, $29, $2e, $24, $18
0e555     06 F8 EE E5 
0e559     E0 DB DB DD 
0e55d     E4 EE FD 0B 
0e561     19 23 29 24 | 	byte	$06, $f8, $ee, $e5, $e0, $db, $db, $dd, $e4, $ee, $fd, $0b, $19, $23, $29, $24
0e565     1C 10 00 F0 
0e569     E2 DB D9 DB 
0e56d     DE E3 E6 EF 
0e571     FC 0F 21 2F | 	byte	$1c, $10, $00, $f0, $e2, $db, $d9, $db, $de, $e3, $e6, $ef, $fc, $0f, $21, $2f
0e575     32 24 14 00 
0e579     F0 E8 DE D5 
0e57d     D3 D4 D9 E3 
0e581     EE FD 0D 1E | 	byte	$32, $24, $14, $00, $f0, $e8, $de, $d5, $d3, $d4, $d9, $e3, $ee, $fd, $0d, $1e
0e585     2A 31 2E 24 
0e589     19 06 F4 E3 
0e58d     D2 CA C7 CB 
0e591     D3 DD E9 FB | 	byte	$2a, $31, $2e, $24, $19, $06, $f4, $e3, $d2, $ca, $c7, $cb, $d3, $dd, $e9, $fb
0e595     0F 23 2F 32 
0e599     2C 20 12 00 
0e59d     F4 E9 DE D3 
0e5a1     CE D2 DA E1 | 	byte	$0f, $23, $2f, $32, $2c, $20, $12, $00, $f4, $e9, $de, $d3, $ce, $d2, $da, $e1
0e5a5     EF FF 0E 1E 
0e5a9     27 26 1C 12 
0e5ad     04 F7 EC E2 
0e5b1     DA D6 D5 DF | 	byte	$ef, $ff, $0e, $1e, $27, $26, $1c, $12, $04, $f7, $ec, $e2, $da, $d6, $d5, $df
0e5b5     EB FB 07 0C 
0e5b9     14 1C 22 24 
0e5bd     1C 10 FA EA 
0e5c1     DB D7 D1 D2 | 	byte	$eb, $fb, $07, $0c, $14, $1c, $22, $24, $1c, $10, $fa, $ea, $db, $d7, $d1, $d2
0e5c5     D8 E5 EF FD 
0e5c9     0B 17 1F 26 
0e5cd     25 1C 0C 00 
0e5d1     F0 E4 DF D7 | 	byte	$d8, $e5, $ef, $fd, $0b, $17, $1f, $26, $25, $1c, $0c, $00, $f0, $e4, $df, $d7
0e5d5     D3 D7 DB E9 
0e5d9     F4 07 17 1E 
0e5dd     23 26 21 1A 
0e5e1     0C F8 E0 D2 | 	byte	$d3, $d7, $db, $e9, $f4, $07, $17, $1e, $23, $26, $21, $1a, $0c, $f8, $e0, $d2
0e5e5     CC CF D3 DE 
0e5e9     E9 F3 FF 0B 
0e5ed     19 23 2D 30 
0e5f1     28 16 05 F4 | 	byte	$cc, $cf, $d3, $de, $e9, $f3, $ff, $0b, $19, $23, $2d, $30, $28, $16, $05, $f4
0e5f5     E3 D4 CC C7 
0e5f9     C7 CF DF EF 
0e5fd     03 15 1F 2A 
0e601     2F 30 2A 1A | 	byte	$e3, $d4, $cc, $c7, $c7, $cf, $df, $ef, $03, $15, $1f, $2a, $2f, $30, $2a, $1a
0e605     08 F2 E6 DB 
0e609     D0 CB CA CF 
0e60d     DD EF FF 14 
0e611     1D 23 28 28 | 	byte	$08, $f2, $e6, $db, $d0, $cb, $ca, $cf, $dd, $ef, $ff, $14, $1d, $23, $28, $28
0e615     21 16 08 F4 
0e619     E0 D7 D0 D2 
0e61d     D5 DF E7 F4 
0e621     03 0F 19 1E | 	byte	$21, $16, $08, $f4, $e0, $d7, $d0, $d2, $d5, $df, $e7, $f4, $03, $0f, $19, $1e
0e625     21 21 1A 0C 
0e629     00 EC E3 DA 
0e62d     D4 D5 DC E1 
0e631     EF F9 05 0F | 	byte	$21, $21, $1a, $0c, $00, $ec, $e3, $da, $d4, $d5, $dc, $e1, $ef, $f9, $05, $0f
0e635     12 17 1D 1B 
0e639     16 08 FA E8 
0e63d     E5 E2 DF E1 
0e641     E2 E9 F3 FB | 	byte	$12, $17, $1d, $1b, $16, $08, $fa, $e8, $e5, $e2, $df, $e1, $e2, $e9, $f3, $fb
0e645     05 0B 0F 11 
0e649     13 15 0F 02 
0e64d     F2 E8 E5 E8 
0e651     E8 E8 EB EF | 	byte	$05, $0b, $0f, $11, $13, $15, $0f, $02, $f2, $e8, $e5, $e8, $e8, $e8, $eb, $ef
0e655     F9 01 05 09 
0e659     07 09 0A 0F 
0e65d     0E 05 F8 EE 
0e661     EC EB ED F2 | 	byte	$f9, $01, $05, $09, $07, $09, $0a, $0f, $0e, $05, $f8, $ee, $ec, $eb, $ed, $f2
0e665     F0 F1 F2 F7 
0e669     FD 04 0B 0B 
0e66d     07 04 02 FE 
0e671     F9 FB FB FA | 	byte	$f0, $f1, $f2, $f7, $fd, $04, $0b, $0b, $07, $04, $02, $fe, $f9, $fb, $fb, $fa
0e675     F9 F6 EE EC 
0e679     EC F1 F6 FB 
0e67d     FE FB FB FD 
0e681     03 0A 0D 08 | 	byte	$f9, $f6, $ee, $ec, $ec, $f1, $f6, $fb, $fe, $fb, $fb, $fd, $03, $0a, $0d, $08
0e685     07 06 02 FE 
0e689     F8 F1 EE EA 
0e68d     E9 E5 E0 E2 
0e691     E7 F5 FF 0F | 	byte	$07, $06, $02, $fe, $f8, $f1, $ee, $ea, $e9, $e5, $e0, $e2, $e7, $f5, $ff, $0f
0e695     1B 1D 16 13 
0e699     0E 0C 02 F8 
0e69d     EA E0 D8 D8 
0e6a1     D7 DA E6 EC | 	byte	$1b, $1d, $16, $13, $0e, $0c, $02, $f8, $ea, $e0, $d8, $d8, $d7, $da, $e6, $ec
0e6a5     F9 0A 1D 29 
0e6a9     2B 28 1C 0E 
0e6ad     00 F5 E6 D9 
0e6b1     CE CB D0 D9 | 	byte	$f9, $0a, $1d, $29, $2b, $28, $1c, $0e, $00, $f5, $e6, $d9, $ce, $cb, $d0, $d9
0e6b5     E7 F6 01 0E 
0e6b9     17 25 2C 2A 
0e6bd     24 18 08 F8 
0e6c1     E1 D5 CA CC | 	byte	$e7, $f6, $01, $0e, $17, $25, $2c, $2a, $24, $18, $08, $f8, $e1, $d5, $ca, $cc
0e6c5     D1 DB E7 F5 
0e6c9     01 07 16 26 
0e6cd     2C 2B 20 12 
0e6d1     02 F6 E8 DE | 	byte	$d1, $db, $e7, $f5, $01, $07, $16, $26, $2c, $2b, $20, $12, $02, $f6, $e8, $de
0e6d5     D6 D3 D5 DD 
0e6d9     E5 F6 02 0D 
0e6dd     1B 21 28 27 
0e6e1     15 08 FA F1 | 	byte	$d6, $d3, $d5, $dd, $e5, $f6, $02, $0d, $1b, $21, $28, $27, $15, $08, $fa, $f1
0e6e5     EC E4 E1 E0 
0e6e9     E1 E2 E7 EF 
0e6ed     FD 06 0B 15 
0e6f1     1B 1E 1B 15 | 	byte	$ec, $e4, $e1, $e0, $e1, $e2, $e7, $ef, $fd, $06, $0b, $15, $1b, $1e, $1b, $15
0e6f5     0C 02 F5 EA 
0e6f9     E6 E5 EA EF 
0e6fd     F2 F1 EF F0 
0e701     F5 FF 0B 19 | 	byte	$0c, $02, $f5, $ea, $e6, $e5, $ea, $ef, $f2, $f1, $ef, $f0, $f5, $ff, $0b, $19
0e705     1D 18 0C 0A 
0e709     05 00 FA F4 
0e70d     EC E8 E7 E8 
0e711     E4 E6 EC F3 | 	byte	$1d, $18, $0c, $0a, $05, $00, $fa, $f4, $ec, $e8, $e7, $e8, $e4, $e6, $ec, $f3
0e715     FF 0D 19 1F 
0e719     23 1A 19 12 
0e71d     0A 00 F0 E0 
0e721     D2 CE D6 D7 | 	byte	$ff, $0d, $19, $1f, $23, $1a, $19, $12, $0a, $00, $f0, $e0, $d2, $ce, $d6, $d7
0e725     DE E9 F5 FF 
0e729     13 27 35 34 
0e72d     2A 20 16 09 
0e731     F6 E8 D6 CA | 	byte	$de, $e9, $f5, $ff, $13, $27, $35, $34, $2a, $20, $16, $09, $f6, $e8, $d6, $ca
0e735     BF C4 CF DD 
0e739     EF FF 12 1D 
0e73d     2D 35 3B 36 
0e741     2C 1A 00 E0 | 	byte	$bf, $c4, $cf, $dd, $ef, $ff, $12, $1d, $2d, $35, $3b, $36, $2c, $1a, $00, $e0
0e745     C8 BD BF CB 
0e749     D9 E7 E9 F3 
0e74d     FF 11 2B 3D 
0e751     44 40 2E 15 | 	byte	$c8, $bd, $bf, $cb, $d9, $e7, $e9, $f3, $ff, $11, $2b, $3d, $44, $40, $2e, $15
0e755     08 F4 E0 D1 
0e759     C3 C6 CB D4 
0e75d     E7 F1 FF 0F 
0e761     1F 2B 33 35 | 	byte	$08, $f4, $e0, $d1, $c3, $c6, $cb, $d4, $e7, $f1, $ff, $0f, $1f, $2b, $33, $35
0e765     33 26 12 02 
0e769     F8 F0 E4 D8 
0e76d     CE CD D2 E4 
0e771     F7 05 13 18 | 	byte	$33, $26, $12, $02, $f8, $f0, $e4, $d8, $ce, $cd, $d2, $e4, $f7, $05, $13, $18
0e775     1A 18 15 18 
0e779     22 21 1A 0C 
0e77d     FC EA E2 E3 
0e781     E4 E8 E7 E4 | 	byte	$1a, $18, $15, $18, $22, $21, $1a, $0c, $fc, $ea, $e2, $e3, $e4, $e8, $e7, $e4
0e785     EB F1 FB 09 
0e789     0F 17 1D 22 
0e78d     22 1E 14 10 
0e791     03 F7 F0 E8 | 	byte	$eb, $f1, $fb, $09, $0f, $17, $1d, $22, $22, $1e, $14, $10, $03, $f7, $f0, $e8
0e795     DF D8 D9 DA 
0e799     E2 EC FD 0F 
0e79d     1F 2A 2C 28 
0e7a1     26 1C 1A 10 | 	byte	$df, $d8, $d9, $da, $e2, $ec, $fd, $0f, $1f, $2a, $2c, $28, $26, $1c, $1a, $10
0e7a5     F6 E8 D6 CC 
0e7a9     CE D2 DD E2 
0e7ad     E5 F3 07 19 
0e7b1     25 3B 3F 3C | 	byte	$f6, $e8, $d6, $cc, $ce, $d2, $dd, $e2, $e5, $f3, $07, $19, $25, $3b, $3f, $3c
0e7b5     2C 18 00 F0 
0e7b9     E8 E4 E2 DC 
0e7bd     D4 CD D5 E3 
0e7c1     F7 0F 17 21 | 	byte	$2c, $18, $00, $f0, $e8, $e4, $e2, $dc, $d4, $cd, $d5, $e3, $f7, $0f, $17, $21
0e7c5     1F 21 25 24 
0e7c9     20 10 FA E8 
0e7cd     E1 E2 E5 EC 
0e7d1     EC F2 F5 FA | 	byte	$1f, $21, $25, $24, $20, $10, $fa, $e8, $e1, $e2, $e5, $ec, $ec, $f2, $f5, $fa
0e7d5     06 0E 0D 13 
0e7d9     17 18 16 0B 
0e7dd     00 FC F7 F5 
0e7e1     F9 F3 EE EC | 	byte	$06, $0e, $0d, $13, $17, $18, $16, $0b, $00, $fc, $f7, $f5, $f9, $f3, $ee, $ec
0e7e5     E6 F1 F9 05 
0e7e9     0F 0A 06 02 
0e7ed     05 0F 1D 1E 
0e7f1     23 14 02 F8 | 	byte	$e6, $f1, $f9, $05, $0f, $0a, $06, $02, $05, $0f, $1d, $1e, $23, $14, $02, $f8
0e7f5     F1 EF EC E9 
0e7f9     E5 E4 E2 E7 
0e7fd     F3 FB FF 0B 
0e801     14 27 32 2F | 	byte	$f1, $ef, $ec, $e9, $e5, $e4, $e2, $e7, $f3, $fb, $ff, $0b, $14, $27, $32, $2f
0e805     2A 20 0E 00 
0e809     F0 E8 DC D5 
0e80d     D2 D9 E3 F2 
0e811     FD 05 0E 16 | 	byte	$2a, $20, $0e, $00, $f0, $e8, $dc, $d5, $d2, $d9, $e3, $f2, $fd, $05, $0e, $16
0e815     1F 2B 31 2E 
0e819     20 10 00 F0 
0e81d     E8 DC D1 D3 
0e821     D9 E9 F7 03 | 	byte	$1f, $2b, $31, $2e, $20, $10, $00, $f0, $e8, $dc, $d1, $d3, $d9, $e9, $f7, $03
0e825     0C 15 1B 23 
0e829     2B 31 2A 20 
0e82d     0A FC EC E5 
0e831     E5 E0 DE DF | 	byte	$0c, $15, $1b, $23, $2b, $31, $2a, $20, $0a, $fc, $ec, $e5, $e5, $e0, $de, $df
0e835     E7 EB FB 0B 
0e839     1B 20 20 1D 
0e83d     1A 19 19 18 
0e841     0D 04 F8 F3 | 	byte	$e7, $eb, $fb, $0b, $1b, $20, $20, $1d, $1a, $19, $19, $18, $0d, $04, $f8, $f3
0e845     EF EC EB E7 
0e849     E2 E7 F3 03 
0e84d     0B 0D 12 10 
0e851     13 19 21 22 | 	byte	$ef, $ec, $eb, $e7, $e2, $e7, $f3, $03, $0b, $0d, $12, $10, $13, $19, $21, $22
0e855     1A 12 04 FF 
0e859     FC F8 EC DE 
0e85d     DB DB E3 EF 
0e861     FF 04 0D 14 | 	byte	$1a, $12, $04, $ff, $fc, $f8, $ec, $de, $db, $db, $e3, $ef, $ff, $04, $0d, $14
0e865     1B 27 28 2B 
0e869     23 1A 09 FC 
0e86d     EC E2 DC D6 
0e871     D8 DD E3 F1 | 	byte	$1b, $27, $28, $2b, $23, $1a, $09, $fc, $ec, $e2, $dc, $d6, $d8, $dd, $e3, $f1
0e875     03 13 1F 26 
0e879     2E 30 30 2E 
0e87d     1D 0A F2 E0 
0e881     D6 D4 D6 D9 | 	byte	$03, $13, $1f, $26, $2e, $30, $30, $2e, $1d, $0a, $f2, $e0, $d6, $d4, $d6, $d9
0e885     DF E4 F3 FF 
0e889     0B 1F 27 31 
0e88d     2D 28 1A 10 
0e891     0A 03 00 F0 | 	byte	$df, $e4, $f3, $ff, $0b, $1f, $27, $31, $2d, $28, $1a, $10, $0a, $03, $00, $f0
0e895     E6 E2 E6 EB 
0e899     F3 FD FB 03 
0e89d     0A 0D 12 0A 
0e8a1     06 04 05 0B | 	byte	$e6, $e2, $e6, $eb, $f3, $fd, $fb, $03, $0a, $0d, $12, $0a, $06, $04, $05, $0b
0e8a5     0F 0D 08 00 
0e8a9     FC 05 0B 0E 
0e8ad     08 FE F5 F4 
0e8b1     F4 FB F8 F0 | 	byte	$0f, $0d, $08, $00, $fc, $05, $0b, $0e, $08, $fe, $f5, $f4, $f4, $fb, $f8, $f0
0e8b5     E9 EF FF 0F 
0e8b9     1F 2B 29 1C 
0e8bd     0C 0C 0C 02 
0e8c1     FC F0 E0 D6 | 	byte	$e9, $ef, $ff, $0f, $1f, $2b, $29, $1c, $0c, $0c, $0c, $02, $fc, $f0, $e0, $d6
0e8c5     DB E3 EB F7 
0e8c9     FF 0B 17 29 
0e8cd     36 38 38 2D 
0e8d1     1C 04 F2 E0 | 	byte	$db, $e3, $eb, $f7, $ff, $0b, $17, $29, $36, $38, $38, $2d, $1c, $04, $f2, $e0
0e8d5     DC D8 D7 DA 
0e8d9     DC E3 EF FF 
0e8dd     11 19 2B 36 
0e8e1     38 30 28 1C | 	byte	$dc, $d8, $d7, $da, $dc, $e3, $ef, $ff, $11, $19, $2b, $36, $38, $30, $28, $1c
0e8e5     0A FA EB E2 
0e8e9     DE DB DE E5 
0e8ed     ED F1 F9 07 
0e8f1     0D 16 1D 21 | 	byte	$0a, $fa, $eb, $e2, $de, $db, $de, $e5, $ed, $f1, $f9, $07, $0d, $16, $1d, $21
0e8f5     1E 12 0B 0C 
0e8f9     11 0E 03 FA 
0e8fd     F0 EF EC EF 
0e901     F4 F5 F3 F1 | 	byte	$1e, $12, $0b, $0c, $11, $0e, $03, $fa, $f0, $ef, $ec, $ef, $f4, $f5, $f3, $f1
0e905     F1 F7 FB 09 
0e909     16 1D 1F 20 
0e90d     1D 23 1D 12 
0e911     07 F4 EC E0 | 	byte	$f1, $f7, $fb, $09, $16, $1d, $1f, $20, $1d, $23, $1d, $12, $07, $f4, $ec, $e0
0e915     DE DA DE DB 
0e919     DE E3 F5 FF 
0e91d     17 26 36 39 
0e921     34 32 2A 1D | 	byte	$de, $da, $de, $db, $de, $e3, $f5, $ff, $17, $26, $36, $39, $34, $32, $2a, $1d
0e925     04 F0 DC CF 
0e929     C4 C7 CE D5 
0e92d     DF EE FF 13 
0e931     21 2F 36 3C | 	byte	$04, $f0, $dc, $cf, $c4, $c7, $ce, $d5, $df, $ee, $ff, $13, $21, $2f, $36, $3c
0e935     3A 2A 1E 0A 
0e939     F8 E0 D0 CD 
0e93d     CD D5 DF E1 
0e941     EF FB 07 15 | 	byte	$3a, $2a, $1e, $0a, $f8, $e0, $d0, $cd, $cd, $d5, $df, $e1, $ef, $fb, $07, $15
0e945     23 28 24 22 
0e949     1A 14 09 06 
0e94d     FF F6 EE E4 
0e951     E2 E6 EE FA | 	byte	$23, $28, $24, $22, $1a, $14, $09, $06, $ff, $f6, $ee, $e4, $e2, $e6, $ee, $fa
0e955     03 04 01 FD 
0e959     FC FD 05 0C 
0e95d     16 16 09 01 
0e961     FF 07 10 0F | 	byte	$03, $04, $01, $fd, $fc, $fd, $05, $0c, $16, $16, $09, $01, $ff, $07, $10, $0f
0e965     09 03 F4 F5 
0e969     EF F6 F3 F2 
0e96d     F1 F3 F3 FF 
0e971     06 15 1A 1C | 	byte	$09, $03, $f4, $f5, $ef, $f6, $f3, $f2, $f1, $f3, $f3, $ff, $06, $15, $1a, $1c
0e975     17 14 11 12 
0e979     0D 04 FE F2 
0e97d     E2 DF DD EA 
0e981     EF F6 FC FF | 	byte	$17, $14, $11, $12, $0d, $04, $fe, $f2, $e2, $df, $dd, $ea, $ef, $f6, $fc, $ff
0e985     0C 13 15 1D 
0e989     1C 1A 16 10 
0e98d     0B 04 F4 F0 
0e991     E6 E5 E6 EA | 	byte	$0c, $13, $15, $1d, $1c, $1a, $16, $10, $0b, $04, $f4, $f0, $e6, $e5, $e6, $ea
0e995     F3 F6 FC FF 
0e999     05 0D 0F 0E 
0e99d     12 12 0A FC 
0e9a1     FF 01 04 07 | 	byte	$f3, $f6, $fc, $ff, $05, $0d, $0f, $0e, $12, $12, $0a, $fc, $ff, $01, $04, $07
0e9a5     FA F7 F6 F8 
0e9a9     FF 01 05 FB 
0e9ad     F6 F1 F3 F2 
0e9b1     FB FB 00 01 | 	byte	$fa, $f7, $f6, $f8, $ff, $01, $05, $fb, $f6, $f1, $f3, $f2, $fb, $fb, $00, $01
0e9b5     F8 FA 02 0D 
0e9b9     16 11 0F 08 
0e9bd     07 06 FD FD 
0e9c1     F2 E7 E0 DD | 	byte	$f8, $fa, $02, $0d, $16, $11, $0f, $08, $07, $06, $fd, $fd, $f2, $e7, $e0, $dd
0e9c5     E3 EF F3 FA 
0e9c9     FF FD FF 0F 
0e9cd     1B 27 24 1E 
0e9d1     14 05 FA EC | 	byte	$e3, $ef, $f3, $fa, $ff, $fd, $ff, $0f, $1b, $27, $24, $1e, $14, $05, $fa, $ec
0e9d5     E0 D8 D2 D7 
0e9d9     DA EB E9 E9 
0e9dd     F7 05 17 2E 
0e9e1     33 3C 30 22 | 	byte	$e0, $d8, $d2, $d7, $da, $eb, $e9, $e9, $f7, $05, $17, $2e, $33, $3c, $30, $22
0e9e5     0C 08 FC F0 
0e9e9     DA D0 C2 BE 
0e9ed     C2 C9 DF EF 
0e9f1     01 13 27 2F | 	byte	$0c, $08, $fc, $f0, $da, $d0, $c2, $be, $c2, $c9, $df, $ef, $01, $13, $27, $2f
0e9f5     38 33 32 2F 
0e9f9     28 16 00 EA 
0e9fd     DA CA C0 C0 
0ea01     BF CD DD ED | 	byte	$38, $33, $32, $2f, $28, $16, $00, $ea, $da, $ca, $c0, $c0, $bf, $cd, $dd, $ed
0ea05     FF 13 1F 1F 
0ea09     28 2A 24 25 
0ea0d     14 37 00 10 
0ea11     D4 DF E0 CF | 	byte	$ff, $13, $1f, $1f, $28, $2a, $24, $25, $14, $37, $00, $10, $d4, $df, $e0, $cf
0ea15     E0 E3 E5 E8 
0ea19     E0 F7 EE 0D 
0ea1d     FF 1C E0 3F 
0ea21     E8 3D E8 2C | 	byte	$e0, $e3, $e5, $e8, $e0, $f7, $ee, $0d, $ff, $1c, $e0, $3f, $e8, $3d, $e8, $2c
0ea25     EF 08 0B FB 
0ea29     E4 23 CA 08 
0ea2d     DF E0 DF ED 
0ea31     EC DF F8 E7 | 	byte	$ef, $08, $0b, $fb, $e4, $23, $ca, $08, $df, $e0, $df, $ed, $ec, $df, $f8, $e7
0ea35     14 EF 0D 28 
0ea39     FF 34 17 0C 
0ea3d     14 0F E0 13 
0ea41     CF E0 DF D4 | 	byte	$14, $ef, $0d, $28, $ff, $34, $17, $0c, $14, $0f, $e0, $13, $cf, $e0, $df, $d4
0ea45     BD FA BB 10 
0ea49     E7 E0 29 27 
0ea4d     00 40 1F 08 
0ea51     20 0F F8 00 | 	byte	$bd, $fa, $bb, $10, $e7, $e0, $29, $27, $00, $40, $1f, $08, $20, $0f, $f8, $00
0ea55     F0 CF E8 CF 
0ea59     CC C2 02 C0 
0ea5d     0F 10 DF 2C 
0ea61     00 1F 20 2F | 	byte	$f0, $cf, $e8, $cf, $cc, $c2, $02, $c0, $0f, $10, $df, $2c, $00, $1f, $20, $2f
0ea65     EF 18 FF F0 
0ea69     F4 FF E0 FF 
0ea6d     C0 0B C0 F7 
0ea71     DE F8 EF 00 | 	byte	$ef, $18, $ff, $f0, $f4, $ff, $e0, $ff, $c0, $0b, $c0, $f7, $de, $f8, $ef, $00
0ea75     FF E0 2B DC 
0ea79     32 EB 30 F7 
0ea7d     14 0F F4 20 
0ea81     EB 08 D8 FA | 	byte	$ff, $e0, $2b, $dc, $32, $eb, $30, $f7, $14, $0f, $f4, $20, $eb, $08, $d8, $fa
0ea85     B9 F0 DD E4 
0ea89     CF 0B D5 20 
0ea8d     EF 20 37 12 
0ea91     30 1A 17 08 | 	byte	$b9, $f0, $dd, $e4, $cf, $0b, $d5, $20, $ef, $20, $37, $12, $30, $1a, $17, $08
0ea95     10 E3 00 C7 
0ea99     E8 DB C8 E4 
0ea9d     DE E7 00 FF 
0eaa1     10 FF 2C FF | 	byte	$10, $e3, $00, $c7, $e8, $db, $c8, $e4, $de, $e7, $00, $ff, $10, $ff, $2c, $ff
0eaa5     30 23 12 08 
0eaa9     DF 04 DF E0 
0eaad     F3 D7 00 DB 
0eab1     D8 19 CF 24 | 	byte	$30, $23, $12, $08, $df, $04, $df, $e0, $f3, $d7, $00, $db, $d8, $19, $cf, $24
0eab5     EF 08 1F EF 
0eab9     08 FF F0 08 
0eabd     FF F5 F0 DF 
0eac1     00 D7 1D F5 | 	byte	$ef, $08, $1f, $ef, $08, $ff, $f0, $08, $ff, $f5, $f0, $df, $00, $d7, $1d, $f5
0eac5     06 12 EF 08 
0eac9     04 DF 18 D8 
0eacd     0F D3 00 EC 
0ead1     CF 20 D6 FF | 	byte	$06, $12, $ef, $08, $04, $df, $18, $d8, $0f, $d3, $00, $ec, $cf, $20, $d6, $ff
0ead5     10 EF 18 0F 
0ead9     FF 08 0B 18 
0eadd     EB 00 FF E0 
0eae1     D7 00 D7 F0 | 	byte	$10, $ef, $18, $0f, $ff, $08, $0b, $18, $eb, $00, $ff, $e0, $d7, $00, $d7, $f0
0eae5     FF E3 F8 FF 
0eae9     07 EE 1A 28 
0eaed     F0 07 10 EF 
0eaf1     14 1B 00 E2 | 	byte	$ff, $e3, $f8, $ff, $07, $ee, $1a, $28, $f0, $07, $10, $ef, $14, $1b, $00, $e2
0eaf5     00 D7 D0 E7 
0eaf9     E8 FD DF 00 
0eafd     E0 0D E9 08 
0eb01     2F FB 40 FB | 	byte	$00, $d7, $d0, $e7, $e8, $fd, $df, $00, $e0, $0d, $e9, $08, $2f, $fb, $40, $fb
0eb05     20 E7 20 E7 
0eb09     15 E0 07 CF 
0eb0d     F0 DF DF E0 
0eb11     0C DB 28 DB | 	byte	$20, $e7, $20, $e7, $15, $e0, $07, $cf, $f0, $df, $df, $e0, $0c, $db, $28, $db
0eb15     18 FF 10 1F 
0eb19     14 F4 26 CC 
0eb1d     0E F0 E7 EF 
0eb21     00 F0 DF 00 | 	byte	$18, $ff, $10, $1f, $14, $f4, $26, $cc, $0e, $f0, $e7, $ef, $00, $f0, $df, $00
0eb25     DF 00 FB DA 
0eb29     2F E0 1B EF 
0eb2d     E4 1D EF 0A 
0eb31     F0 17 E0 FF | 	byte	$df, $00, $fb, $da, $2f, $e0, $1b, $ef, $e4, $1d, $ef, $0a, $f0, $17, $e0, $ff
0eb35     F0 FF 00 0C 
0eb39     FF 00 FF E0 
0eb3d     08 D7 19 C5 
0eb41     24 C4 0D D7 | 	byte	$f0, $ff, $00, $0c, $ff, $00, $ff, $e0, $08, $d7, $19, $c5, $24, $c4, $0d, $d7
0eb45     00 05 FF 00 
0eb49     2B F0 00 07 
0eb4d     EC 11 13 E1 
0eb51     24 CF 13 C8 | 	byte	$00, $05, $ff, $00, $2b, $f0, $00, $07, $ec, $11, $13, $e1, $24, $cf, $13, $c8
0eb55     14 EF E8 10 
0eb59     DF 08 D1 0F 
0eb5d     00 EB 24 07 
0eb61     E8 0F 08 EF | 	byte	$14, $ef, $e8, $10, $df, $08, $d1, $0f, $00, $eb, $24, $07, $e8, $0f, $08, $ef
0eb65     2A 17 0F 0C 
0eb69     FA ED EB F2 
0eb6d     E7 F0 E7 E0 
0eb71     E7 E7 EE 0F | 	byte	$2a, $17, $0f, $0c, $fa, $ed, $eb, $f2, $e7, $f0, $e7, $e0, $e7, $e7, $ee, $0f
0eb75     02 2F 15 18 
0eb79     0E 09 04 23 
0eb7d     F4 0F 00 E7 
0eb81     D0 E7 C8 F7 | 	byte	$02, $2f, $15, $18, $0e, $09, $04, $23, $f4, $0f, $00, $e7, $d0, $e7, $c8, $f7
0eb85     E0 FF F1 FB 
0eb89     04 07 16 F9 
0eb8d     2F 00 2D ED 
0eb91     08 DF 00 F6 | 	byte	$e0, $ff, $f1, $fb, $04, $07, $16, $f9, $2f, $00, $2d, $ed, $08, $df, $00, $f6
0eb95     F7 14 E7 00 
0eb99     F7 E7 00 FF 
0eb9d     04 FD 07 E0 
0eba1     FF EB F8 07 | 	byte	$f7, $14, $e7, $00, $f7, $e7, $00, $ff, $04, $fd, $07, $e0, $ff, $eb, $f8, $07
0eba5     F4 16 E6 15 
0eba9     ED 10 09 1D 
0ebad     18 07 00 EF 
0ebb1     EE F4 E6 FB | 	byte	$f4, $16, $e6, $15, $ed, $10, $09, $1d, $18, $07, $00, $ef, $ee, $f4, $e6, $fb
0ebb5     E0 FB DC F2 
0ebb9     F2 FF 07 13 
0ebbd     14 11 0E 08 
0ebc1     07 0A 09 04 | 	byte	$e0, $fb, $dc, $f2, $f2, $ff, $07, $13, $14, $11, $0e, $08, $07, $0a, $09, $04
0ebc5     04 ED F7 E9 
0ebc9     ED EA F9 ED 
0ebcd     FD FB F0 FB 
0ebd1     F5 F9 06 09 | 	byte	$04, $ed, $f7, $e9, $ed, $ea, $f9, $ed, $fd, $fb, $f0, $fb, $f5, $f9, $06, $09
0ebd5     10 0D 01 02 
0ebd9     F8 07 0B 10 
0ebdd     0E 03 F6 EC 
0ebe1     E8 E3 EA E6 | 	byte	$10, $0d, $01, $02, $f8, $07, $0b, $10, $0e, $03, $f6, $ec, $e8, $e3, $ea, $e6
0ebe5     EF EB EF EF 
0ebe9     F7 FF 0E 19 
0ebed     1C 1A 11 09 
0ebf1     03 01 01 01 | 	byte	$ef, $eb, $ef, $ef, $f7, $ff, $0e, $19, $1c, $1a, $11, $09, $03, $01, $01, $01
0ebf5     FA F0 E9 E4 
0ebf9     E4 E9 EF F7 
0ebfd     FB FC FD FF 
0ec01     04 07 09 0A | 	byte	$fa, $f0, $e9, $e4, $e4, $e9, $ef, $f7, $fb, $fc, $fd, $ff, $04, $07, $09, $0a
0ec05     0B 08 00 F5 
0ec09     EF EF F6 FE 
0ec0d     04 05 00 F9 
0ec11     F4 F5 F9 FF | 	byte	$0b, $08, $00, $f5, $ef, $ef, $f6, $fe, $04, $05, $00, $f9, $f4, $f5, $f9, $ff
0ec15     02 FE F8 F0 
0ec19     EC EF F9 01 
0ec1d     09 08 02 FA 
0ec21     F3 F7 FF 0A | 	byte	$02, $fe, $f8, $f0, $ec, $ef, $f9, $01, $09, $08, $02, $fa, $f3, $f7, $ff, $0a
0ec25     11 11 09 FC 
0ec29     F3 F0 F1 F7 
0ec2d     FC FD F9 F3 
0ec31     EC EC EF F7 | 	byte	$11, $11, $09, $fc, $f3, $f0, $f1, $f7, $fc, $fd, $f9, $f3, $ec, $ec, $ef, $f7
0ec35     FF 04 03 FE 
0ec39     F8 FA 03 0F 
0ec3d     17 19 12 06 
0ec41     FC F5 F4 F3 | 	byte	$ff, $04, $03, $fe, $f8, $fa, $03, $0f, $17, $19, $12, $06, $fc, $f5, $f4, $f3
0ec45     F2 EC E4 DF 
0ec49     DE E3 EC F9 
0ec4d     07 0F 14 12 
0ec51     0E 0E 13 1A | 	byte	$f2, $ec, $e4, $df, $de, $e3, $ec, $f9, $07, $0f, $14, $12, $0e, $0e, $13, $1a
0ec55     1B 14 04 F2 
0ec59     E4 DE DF E4 
0ec5d     E9 ED EC EB 
0ec61     EE F7 03 0F | 	byte	$1b, $14, $04, $f2, $e4, $de, $df, $e4, $e9, $ed, $ec, $eb, $ee, $f7, $03, $0f
0ec65     1D 20 1C 11 
0ec69     05 FF 01 05 
0ec6d     07 01 F5 E9 
0ec71     E0 DF E4 ED | 	byte	$1d, $20, $1c, $11, $05, $ff, $01, $05, $07, $01, $f5, $e9, $e0, $df, $e4, $ed
0ec75     F7 FD FC F9 
0ec79     F8 FF 0B 16 
0ec7d     1D 1B 12 05 
0ec81     FC F7 F9 FD | 	byte	$f7, $fd, $fc, $f9, $f8, $ff, $0b, $16, $1d, $1b, $12, $05, $fc, $f7, $f9, $fd
0ec85     00 FE F6 EC 
0ec89     E5 E5 ED F7 
0ec8d     01 08 08 06 
0ec91     04 06 0D 13 | 	byte	$00, $fe, $f6, $ec, $e5, $e5, $ed, $f7, $01, $08, $08, $06, $04, $06, $0d, $13
0ec95     14 0E 04 F9 
0ec99     EE E5 E1 E5 
0ec9d     EE F5 FA FF 
0eca1     05 0B 13 16 | 	byte	$14, $0e, $04, $f9, $ee, $e5, $e1, $e5, $ee, $f5, $fa, $ff, $05, $0b, $13, $16
0eca5     16 11 0C 06 
0eca9     02 FD F8 EE 
0ecad     E5 E0 E0 E5 
0ecb1     EB F0 F3 F8 | 	byte	$16, $11, $0c, $06, $02, $fd, $f8, $ee, $e5, $e0, $e0, $e5, $eb, $f0, $f3, $f8
0ecb5     FF 0D 1B 27 
0ecb9     2D 28 20 10 
0ecbd     00 F8 F1 F0 
0ecc1     EF EA E2 D7 | 	byte	$ff, $0d, $1b, $27, $2d, $28, $20, $10, $00, $f8, $f1, $f0, $ef, $ea, $e2, $d7
0ecc5     D0 D3 DF F7 
0ecc9     07 17 1B 14 
0eccd     0D 0F 1D 2B 
0ecd1     31 29 18 00 | 	byte	$d0, $d3, $df, $f7, $07, $17, $1b, $14, $0d, $0f, $1d, $2b, $31, $29, $18, $00
0ecd5     EC E1 DE E1 
0ecd9     E2 E0 DC D8 
0ecdd     DD E7 F7 0D 
0ece1     1D 26 26 22 | 	byte	$ec, $e1, $de, $e1, $e2, $e0, $dc, $d8, $dd, $e7, $f7, $0d, $1d, $26, $26, $22
0ece5     1C 1A 19 19 
0ece9     14 0C 00 F0 
0eced     E8 E1 E1 E1 
0ecf1     E5 EA F2 F9 | 	byte	$1c, $1a, $19, $19, $14, $0c, $00, $f0, $e8, $e1, $e1, $e1, $e5, $ea, $f2, $f9
0ecf5     FC FF 02 07 
0ecf9     11 19 1F 1C 
0ecfd     11 02 FA F9 
0ed01     FF 0B 0E 0A | 	byte	$fc, $ff, $02, $07, $11, $19, $1f, $1c, $11, $02, $fa, $f9, $ff, $0b, $0e, $0a
0ed05     00 F4 F0 EF 
0ed09     F3 F7 FA FB 
0ed0d     F9 F5 F2 F3 
0ed11     F9 03 0D 13 | 	byte	$00, $f4, $f0, $ef, $f3, $f7, $fa, $fb, $f9, $f5, $f2, $f3, $f9, $03, $0d, $13
0ed15     15 12 0C 03 
0ed19     01 05 0A 0C 
0ed1d     09 01 F9 F5 
0ed21     F2 EF ED EF | 	byte	$15, $12, $0c, $03, $01, $05, $0a, $0c, $09, $01, $f9, $f5, $f2, $ef, $ed, $ef
0ed25     F6 FE 07 09 
0ed29     06 01 FF 03 
0ed2d     0B 11 12 0A 
0ed31     FC F0 F1 FD | 	byte	$f6, $fe, $07, $09, $06, $01, $ff, $03, $0b, $11, $12, $0a, $fc, $f0, $f1, $fd
0ed35     0D 16 14 08 
0ed39     FB F4 F6 FC 
0ed3d     05 0A 09 00 
0ed41     F6 EC E8 EE | 	byte	$0d, $16, $14, $08, $fb, $f4, $f6, $fc, $05, $0a, $09, $00, $f6, $ec, $e8, $ee
0ed45     F9 06 0F 10 
0ed49     0D 04 FE FF 
0ed4d     07 15 1E 1C 
0ed51     10 02 F9 F2 | 	byte	$f9, $06, $0f, $10, $0d, $04, $fe, $ff, $07, $15, $1e, $1c, $10, $02, $f9, $f2
0ed55     EF EE F1 F3 
0ed59     F4 F2 ED EA 
0ed5d     EB F5 03 13 
0ed61     1D 1E 1A 12 | 	byte	$ef, $ee, $f1, $f3, $f4, $f2, $ed, $ea, $eb, $f5, $03, $13, $1d, $1e, $1a, $12
0ed65     0C 0C 11 16 
0ed69     14 0A FD F1 
0ed6d     EA E4 DE DC 
0ed71     DF E7 F4 FF | 	byte	$0c, $0c, $11, $16, $14, $0a, $fd, $f1, $ea, $e4, $de, $dc, $df, $e7, $f4, $ff
0ed75     03 04 05 09 
0ed79     11 1D 25 27 
0ed7d     20 10 FC F0 
0ed81     ED F2 F8 F9 | 	byte	$03, $04, $05, $09, $11, $1d, $25, $27, $20, $10, $fc, $f0, $ed, $f2, $f8, $f9
0ed85     F6 F1 EE EC 
0ed89     EF F6 FE 07 
0ed8d     0D 0E 08 00 
0ed91     FA FC 02 0B | 	byte	$f6, $f1, $ee, $ec, $ef, $f6, $fe, $07, $0d, $0e, $08, $00, $fa, $fc, $02, $0b
0ed95     10 10 08 FD 
0ed99     F1 ED F1 FD 
0ed9d     0B 0E 0B 04 
0eda1     FC F5 F4 F7 | 	byte	$10, $10, $08, $fd, $f1, $ed, $f1, $fd, $0b, $0e, $0b, $04, $fc, $f5, $f4, $f7
0eda5     FC 03 06 04 
0eda9     FC F1 EE F1 
0edad     FB 07 0E 0F 
0edb1     0C 02 FA F5 | 	byte	$fc, $03, $06, $04, $fc, $f1, $ee, $f1, $fb, $07, $0e, $0f, $0c, $02, $fa, $f5
0edb5     F5 02 0D 13 
0edb9     11 09 00 F5 
0edbd     F0 EF F2 F7 
0edc1     FD FE F8 F0 | 	byte	$f5, $02, $0d, $13, $11, $09, $00, $f5, $f0, $ef, $f2, $f7, $fd, $fe, $f8, $f0
0edc5     EC EF F9 05 
0edc9     13 1A 1C 16 
0edcd     08 FC F6 FC 
0edd1     09 11 0C FC | 	byte	$ec, $ef, $f9, $05, $13, $1a, $1c, $16, $08, $fc, $f6, $fc, $09, $11, $0c, $fc
0edd5     ED E6 E7 EF 
0edd9     F7 FB FD FF 
0eddd     01 00 01 03 
0ede1     08 0D 13 14 | 	byte	$ed, $e6, $e7, $ef, $f7, $fb, $fd, $ff, $01, $00, $01, $03, $08, $0d, $13, $14
0ede5     10 0A 04 F9 
0ede9     F0 EB ED F6 
0eded     FE 03 06 05 
0edf1     04 FF FF 04 | 	byte	$10, $0a, $04, $f9, $f0, $eb, $ed, $f6, $fe, $03, $06, $05, $04, $ff, $ff, $04
0edf5     0A 0F 0F 06 
0edf9     F9 EE EB EF 
0edfd     F9 03 08 07 
0ee01     00 F8 EE F1 | 	byte	$0a, $0f, $0f, $06, $f9, $ee, $eb, $ef, $f9, $03, $08, $07, $00, $f8, $ee, $f1
0ee05     FD 0F 21 24 
0ee09     20 12 05 00 
0ee0d     FB FA FA F6 
0ee11     F2 EA E2 DE | 	byte	$fd, $0f, $21, $24, $20, $12, $05, $00, $fb, $fa, $fa, $f6, $f2, $ea, $e2, $de
0ee15     E3 EE FE 0E 
0ee19     16 18 18 16 
0ee1d     10 09 05 07 
0ee21     0D 0A 01 F8 | 	byte	$e3, $ee, $fe, $0e, $16, $18, $18, $16, $10, $09, $05, $07, $0d, $0a, $01, $f8
0ee25     EE EA E9 EB 
0ee29     EF F7 FF 09 
0ee2d     0A 06 02 00 
0ee31     00 05 06 03 | 	byte	$ee, $ea, $e9, $eb, $ef, $f7, $ff, $09, $0a, $06, $02, $00, $00, $05, $06, $03
0ee35     FE F8 F2 EB 
0ee39     E9 EF F9 0B 
0ee3d     1A 1C 19 14 
0ee41     10 0A 05 FE | 	byte	$fe, $f8, $f2, $eb, $e9, $ef, $f9, $0b, $1a, $1c, $19, $14, $10, $0a, $05, $fe
0ee45     F9 F6 F0 E9 
0ee49     E0 DB DB E3 
0ee4d     EC FA 04 0C 
0ee51     11 14 14 12 | 	byte	$f9, $f6, $f0, $e9, $e0, $db, $db, $e3, $ec, $fa, $04, $0c, $11, $14, $14, $12
0ee55     12 18 1B 19 
0ee59     11 05 F8 ED 
0ee5d     E4 E0 DE E1 
0ee61     E9 F1 F2 F1 | 	byte	$12, $18, $1b, $19, $11, $05, $f8, $ed, $e4, $e0, $de, $e1, $e9, $f1, $f2, $f1
0ee65     EF F3 F7 04 
0ee69     0F 17 1A 18 
0ee6d     12 09 00 FE 
0ee71     03 0B 0D 08 | 	byte	$ef, $f3, $f7, $04, $0f, $17, $1a, $18, $12, $09, $00, $fe, $03, $0b, $0d, $08
0ee75     F9 E8 D9 D5 
0ee79     D9 E5 EF F9 
0ee7d     FF FF FF 01 
0ee81     0B 13 1A 1A | 	byte	$f9, $e8, $d9, $d5, $d9, $e5, $ef, $f9, $ff, $ff, $ff, $01, $0b, $13, $1a, $1a
0ee85     14 09 FC F0 
0ee89     E7 E2 E7 F3 
0ee8d     FD FE FC F5 
0ee91     F4 F9 FF 08 | 	byte	$14, $09, $fc, $f0, $e7, $e2, $e7, $f3, $fd, $fe, $fc, $f5, $f4, $f9, $ff, $08
0ee95     0B 0B 07 00 
0ee99     F5 EE EB EC 
0ee9d     F3 F5 F7 F9 
0eea1     FB FE FF FF | 	byte	$0b, $0b, $07, $00, $f5, $ee, $eb, $ec, $f3, $f5, $f7, $f9, $fb, $fe, $ff, $ff
0eea5     02 07 0D 11 
0eea9     0E 05 FA F4 
0eead     EE EC EC EE 
0eeb1     EF F3 F6 F8 | 	byte	$02, $07, $0d, $11, $0e, $05, $fa, $f4, $ee, $ec, $ec, $ee, $ef, $f3, $f6, $f8
0eeb5     F8 F9 FC 02 
0eeb9     07 0A 0A 02 
0eebd     F9 F1 EE F3 
0eec1     FB 07 0D 08 | 	byte	$f8, $f9, $fc, $02, $07, $0a, $0a, $02, $f9, $f1, $ee, $f3, $fb, $07, $0d, $08
0eec5     02 FC FA FC 
0eec9     FD FA F7 F1 
0eecd     EE EE EE ED 
0eed1     EF F4 FD 01 | 	byte	$02, $fc, $fa, $fc, $fd, $fa, $f7, $f1, $ee, $ee, $ee, $ed, $ef, $f4, $fd, $01
0eed5     01 FF FF 05 
0eed9     0B 0E 0A 01 
0eedd     FB FA FB F6 
0eee1     F1 EE EC ED | 	byte	$01, $ff, $ff, $05, $0b, $0e, $0a, $01, $fb, $fa, $fb, $f6, $f1, $ee, $ec, $ed
0eee5     F0 F3 FB 00 
0eee9     04 03 FE F9 
0eeed     F5 F6 F7 FA 
0eef1     FA F8 F6 F4 | 	byte	$f0, $f3, $fb, $00, $04, $03, $fe, $f9, $f5, $f6, $f7, $fa, $fa, $f8, $f6, $f4
0eef5     F2 F2 F2 FA 
0eef9     03 09 0C 08 
0eefd     02 FE FD FC 
0ef01     FA F7 F4 F2 | 	byte	$f2, $f2, $f2, $fa, $03, $09, $0c, $08, $02, $fe, $fd, $fc, $fa, $f7, $f4, $f2
0ef05     EC E4 E1 E1 
0ef09     E7 EE F3 FB 
0ef0d     01 04 04 03 
0ef11     02 01 03 06 | 	byte	$ec, $e4, $e1, $e1, $e7, $ee, $f3, $fb, $01, $04, $04, $03, $02, $01, $03, $06
0ef15     0D 0D 06 F9 
0ef19     EE EA EB EF 
0ef1d     ED E8 E2 E1 
0ef21     E6 EF FD 06 | 	byte	$0d, $0d, $06, $f9, $ee, $ea, $eb, $ef, $ed, $e8, $e2, $e1, $e6, $ef, $fd, $06
0ef25     09 09 02 FE 
0ef29     FD 01 07 0A 
0ef2d     07 00 F2 E9 
0ef31     E8 EC F5 02 | 	byte	$09, $09, $02, $fe, $fd, $01, $07, $0a, $07, $00, $f2, $e9, $e8, $ec, $f5, $02
0ef35     07 07 00 F4 
0ef39     EF F1 F7 FD 
0ef3d     01 00 F8 EE 
0ef41     E5 E6 EB F3 | 	byte	$07, $07, $00, $f4, $ef, $f1, $f7, $fd, $01, $00, $f8, $ee, $e5, $e6, $eb, $f3
0ef45     FF 09 0F 10 
0ef49     0A 06 04 06 
0ef4d     07 06 03 FC 
0ef51     F4 EB E5 E0 | 	byte	$ff, $09, $0f, $10, $0a, $06, $04, $06, $07, $06, $03, $fc, $f4, $eb, $e5, $e0
0ef55     E0 E9 F3 FE 
0ef59     05 03 00 FE 
0ef5d     FF 05 08 08 
0ef61     08 02 FF F8 | 	byte	$e0, $e9, $f3, $fe, $05, $03, $00, $fe, $ff, $05, $08, $08, $08, $02, $ff, $f8
0ef65     F2 EC F1 FF 
0ef69     0B 12 0E 01 
0ef6d     FA F8 F8 F6 
0ef71     F4 F1 F1 F3 | 	byte	$f2, $ec, $f1, $ff, $0b, $12, $0e, $01, $fa, $f8, $f8, $f6, $f4, $f1, $f1, $f3
0ef75     F7 F8 F2 EE 
0ef79     EF F5 FD 07 
0ef7d     0D 10 10 0C 
0ef81     03 FB F9 FD | 	byte	$f7, $f8, $f2, $ee, $ef, $f5, $fd, $07, $0d, $10, $10, $0c, $03, $fb, $f9, $fd
0ef85     04 06 04 00 
0ef89     F8 EF EA E7 
0ef8d     EE F7 FF 02 
0ef91     00 F8 F1 EF | 	byte	$04, $06, $04, $00, $f8, $ef, $ea, $e7, $ee, $f7, $ff, $02, $00, $f8, $f1, $ef
0ef95     F4 FA FF 03 
0ef99     02 00 01 00 
0ef9d     01 00 00 00 
0efa1     03 04 05 03 | 	byte	$f4, $fa, $ff, $03, $02, $00, $01, $00, $01, $00, $00, $00, $03, $04, $05, $03
0efa5     01 FB F4 EF 
0efa9     EB EB EF F4 
0efad     F8 F8 F2 EE 
0efb1     EE F1 F9 02 | 	byte	$01, $fb, $f4, $ef, $eb, $eb, $ef, $f4, $f8, $f8, $f2, $ee, $ee, $f1, $f9, $02
0efb5     09 0F 0D 08 
0efb9     00 F9 F7 F9 
0efbd     02 0D 0D 04 
0efc1     F4 EB EA EA | 	byte	$09, $0f, $0d, $08, $00, $f9, $f7, $f9, $02, $0d, $0d, $04, $f4, $eb, $ea, $ea
0efc5     F0 F1 F0 EE 
0efc9     F1 F4 F6 F8 
0efcd     FD 00 04 00 
0efd1     FB F7 FA FF | 	byte	$f0, $f1, $f0, $ee, $f1, $f4, $f6, $f8, $fd, $00, $04, $00, $fb, $f7, $fa, $ff
0efd5     07 07 02 FA 
0efd9     F6 F5 FB FE 
0efdd     FE FC F8 F3 
0efe1     E9 E8 E9 F1 | 	byte	$07, $07, $02, $fa, $f6, $f5, $fb, $fe, $fe, $fc, $f8, $f3, $e9, $e8, $e9, $f1
0efe5     FB FF 03 FE 
0efe9     F5 F0 EF EF 
0efed     F3 FA FC 00 
0eff1     FC FC F6 F3 | 	byte	$fb, $ff, $03, $fe, $f5, $f0, $ef, $ef, $f3, $fa, $fc, $00, $fc, $fc, $f6, $f3
0eff5     F1 F7 04 0F 
0eff9     15 0F 06 FE 
0effd     F3 F0 EC EA 
0f001     E8 E6 E7 E4 | 	byte	$f1, $f7, $04, $0f, $15, $0f, $06, $fe, $f3, $f0, $ec, $ea, $e8, $e6, $e7, $e4
0f005     E2 E5 E7 F3 
0f009     FB 03 0B 0E 
0f00d     13 17 17 12 
0f011     04 F6 F3 F7 | 	byte	$e2, $e5, $e7, $f3, $fb, $03, $0b, $0e, $13, $17, $17, $12, $04, $f6, $f3, $f7
0f015     F5 F4 F2 F0 
0f019     F0 EB E9 E5 
0f01d     E8 F3 FF 0B 
0f021     0D 04 F8 EE | 	byte	$f5, $f4, $f2, $f0, $f0, $eb, $e9, $e5, $e8, $f3, $ff, $0b, $0d, $04, $f8, $ee
0f025     EA EE F6 FF 
0f029     06 09 05 02 
0f02d     FD FB FF 05 
0f031     0B 0C 08 02 | 	byte	$ea, $ee, $f6, $ff, $06, $09, $05, $02, $fd, $fb, $ff, $05, $0b, $0c, $08, $02
0f035     FB F3 EA E0 
0f039     DB DC E3 F2 
0f03d     FF 08 04 F8 
0f041     F3 F5 FD 0D | 	byte	$fb, $f3, $ea, $e0, $db, $dc, $e3, $f2, $ff, $08, $04, $f8, $f3, $f5, $fd, $0d
0f045     19 1C 14 0A 
0f049     FA EE E8 EB 
0f04d     F7 02 09 03 
0f051     FC F2 F1 F3 | 	byte	$19, $1c, $14, $0a, $fa, $ee, $e8, $eb, $f7, $02, $09, $03, $fc, $f2, $f1, $f3
0f055     F5 F8 F8 F8 
0f059     FD 01 03 FC 
0f05d     F6 F6 F6 FA 
0f061     FD 06 0A 11 | 	byte	$f5, $f8, $f8, $f8, $fd, $01, $03, $fc, $f6, $f6, $f6, $fa, $fd, $06, $0a, $11
0f065     14 0E 02 F5 
0f069     EC EE FB 02 
0f06d     06 01 FD F3 
0f071     EC EB EF F5 | 	byte	$14, $0e, $02, $f5, $ec, $ee, $fb, $02, $06, $01, $fd, $f3, $ec, $eb, $ef, $f5
0f075     FE 05 01 FD 
0f079     F8 F5 F7 FA 
0f07d     FD 04 08 0A 
0f081     0A 09 07 08 | 	byte	$fe, $05, $01, $fd, $f8, $f5, $f7, $fa, $fd, $04, $08, $0a, $0a, $09, $07, $08
0f085     03 FC F3 F7 
0f089     FA FD FD FA 
0f08d     F2 EC E7 E2 
0f091     E8 EF FF 16 | 	byte	$03, $fc, $f3, $f7, $fa, $fd, $fd, $fa, $f2, $ec, $e7, $e2, $e8, $ef, $ff, $16
0f095     24 1D 14 00 
0f099     FC 02 0A 12 
0f09d     0B 02 F5 EC 
0f0a1     E8 E5 E4 E6 | 	byte	$24, $1d, $14, $00, $fc, $02, $0a, $12, $0b, $02, $f5, $ec, $e8, $e5, $e4, $e6
0f0a5     EB F9 06 0C 
0f0a9     10 13 1A 1A 
0f0ad     15 0D 06 03 
0f0b1     05 07 00 F0 | 	byte	$eb, $f9, $06, $0c, $10, $13, $1a, $1a, $15, $0d, $06, $03, $05, $07, $00, $f0
0f0b5     E0 D6 D7 DD 
0f0b9     E9 F3 FF 0E 
0f0bd     16 1A 18 11 
0f0c1     0C 07 0F 17 | 	byte	$e0, $d6, $d7, $dd, $e9, $f3, $ff, $0e, $16, $1a, $18, $11, $0c, $07, $0f, $17
0f0c5     1C 16 06 F8 
0f0c9     EB E0 D9 DD 
0f0cd     E3 F3 03 0B 
0f0d1     08 FC F5 FE | 	byte	$1c, $16, $06, $f8, $eb, $e0, $d9, $dd, $e3, $f3, $03, $0b, $08, $fc, $f5, $fe
0f0d5     0E 1C 21 16 
0f0d9     06 FA F6 FB 
0f0dd     FD FC F8 F5 
0f0e1     F7 FF 07 0E | 	byte	$0e, $1c, $21, $16, $06, $fa, $f6, $fb, $fd, $fc, $f8, $f5, $f7, $ff, $07, $0e
0f0e5     11 0C 04 FC 
0f0e9     F7 F9 FF 06 
0f0ed     0B 03 FC EF 
0f0f1     EC F2 F6 02 | 	byte	$11, $0c, $04, $fc, $f7, $f9, $ff, $06, $0b, $03, $fc, $ef, $ec, $f2, $f6, $02
0f0f5     06 04 02 02 
0f0f9     09 11 12 0B 
0f0fd     00 F6 F7 03 
0f101     0E 0C 03 F9 | 	byte	$06, $04, $02, $02, $09, $11, $12, $0b, $00, $f6, $f7, $03, $0e, $0c, $03, $f9
0f105     F7 FB 02 03 
0f109     07 08 09 06 
0f10d     00 FC F9 FB 
0f111     F7 F7 F1 EE | 	byte	$f7, $fb, $02, $03, $07, $08, $09, $06, $00, $fc, $f9, $fb, $f7, $f7, $f1, $ee
0f115     F3 F9 FF 08 
0f119     0B 0A 04 00 
0f11d     03 0B 17 1B 
0f121     12 0C 00 F8 | 	byte	$f3, $f9, $ff, $08, $0b, $0a, $04, $00, $03, $0b, $17, $1b, $12, $0c, $00, $f8
0f125     F0 EB E4 E7 
0f129     ED FB FF 01 
0f12d     F9 F0 F4 F9 
0f131     01 0A 0F 11 | 	byte	$f0, $eb, $e4, $e7, $ed, $fb, $ff, $01, $f9, $f0, $f4, $f9, $01, $0a, $0f, $11
0f135     16 10 06 FC 
0f139     F2 E9 EF 05 
0f13d     12 18 10 05 
0f141     00 FB FE FF | 	byte	$16, $10, $06, $fc, $f2, $e9, $ef, $05, $12, $18, $10, $05, $00, $fb, $fe, $ff
0f145     FB F9 F3 F0 
0f149     ED EB EA ED 
0f14d     F4 FD 04 06 
0f151     07 0C 17 1F | 	byte	$fb, $f9, $f3, $f0, $ed, $eb, $ea, $ed, $f4, $fd, $04, $06, $07, $0c, $17, $1f
0f155     24 1D 10 FC 
0f159     F1 F1 FA FD 
0f15d     F9 F8 F5 F5 
0f161     F6 F1 F2 F5 | 	byte	$24, $1d, $10, $fc, $f1, $f1, $fa, $fd, $f9, $f8, $f5, $f5, $f6, $f1, $f2, $f5
0f165     FD 05 13 1D 
0f169     19 14 06 F8 
0f16d     EE EC EB EF 
0f171     F9 03 10 12 | 	byte	$fd, $05, $13, $1d, $19, $14, $06, $f8, $ee, $ec, $eb, $ef, $f9, $03, $10, $12
0f175     10 02 F6 EE 
0f179     FF 13 23 28 
0f17d     20 10 00 EE 
0f181     E2 E1 EA EE | 	byte	$10, $02, $f6, $ee, $ff, $13, $23, $28, $20, $10, $00, $ee, $e2, $e1, $ea, $ee
0f185     FD 06 05 FC 
0f189     EE E9 F0 FF 
0f18d     0B 13 13 1D 
0f191     18 18 14 09 | 	byte	$fd, $06, $05, $fc, $ee, $e9, $f0, $ff, $0b, $13, $13, $1d, $18, $18, $14, $09
0f195     F8 EA ED FB 
0f199     0D 10 06 FE 
0f19d     FD FD 04 FF 
0f1a1     F9 F8 F6 FE | 	byte	$f8, $ea, $ed, $fb, $0d, $10, $06, $fe, $fd, $fd, $04, $ff, $f9, $f8, $f6, $fe
0f1a5     09 15 10 00 
0f1a9     EF ED F5 FB 
0f1ad     FF 01 05 0A 
0f1b1     10 12 0D FC | 	byte	$09, $15, $10, $00, $ef, $ed, $f5, $fb, $ff, $01, $05, $0a, $10, $12, $0d, $fc
0f1b5     EF F2 05 17 
0f1b9     28 29 20 0C 
0f1bd     FA F0 E8 E7 
0f1c1     E9 EF FD 07 | 	byte	$ef, $f2, $05, $17, $28, $29, $20, $0c, $fa, $f0, $e8, $e7, $e9, $ef, $fd, $07
0f1c5     06 FA EC EA 
0f1c9     F5 07 11 17 
0f1cd     12 11 0F 1A 
0f1d1     1E 20 14 00 | 	byte	$06, $fa, $ec, $ea, $f5, $07, $11, $17, $12, $11, $0f, $1a, $1e, $20, $14, $00
0f1d5     EE F3 FD 0A 
0f1d9     0E 0A 00 F3 
0f1dd     EB E4 E9 F5 
0f1e1     06 13 27 28 | 	byte	$ee, $f3, $fd, $0a, $0e, $0a, $00, $f3, $eb, $e4, $e9, $f5, $06, $13, $27, $28
0f1e5     18 FA E8 E9 
0f1e9     FA 05 0F 0A 
0f1ed     05 FE 03 0C 
0f1f1     15 10 04 F8 | 	byte	$18, $fa, $e8, $e9, $fa, $05, $0f, $0a, $05, $fe, $03, $0c, $15, $10, $04, $f8
0f1f5     03 0F 1F 29 
0f1f9     1E 0C F6 E8 
0f1fd     E1 E5 EA EF 
0f201     F6 FF 05 02 | 	byte	$03, $0f, $1f, $29, $1e, $0c, $f6, $e8, $e1, $e5, $ea, $ef, $f6, $ff, $05, $02
0f205     FC F6 FF 0B 
0f209     19 24 28 1A 
0f20d     0E 09 06 0B 
0f211     02 F8 E8 E7 | 	byte	$fc, $f6, $ff, $0b, $19, $24, $28, $1a, $0e, $09, $06, $0b, $02, $f8, $e8, $e7
0f215     F3 05 0B 08 
0f219     02 FF 02 09 
0f21d     09 05 FE FA 
0f221     FD 07 0F 0C | 	byte	$f3, $05, $0b, $08, $02, $ff, $02, $09, $09, $05, $fe, $fa, $fd, $07, $0f, $0c
0f225     00 F2 EB EE 
0f229     F6 FF 07 0B 
0f22d     0D 15 15 11 
0f231     0C FC F3 F7 | 	byte	$00, $f2, $eb, $ee, $f6, $ff, $07, $0b, $0d, $15, $15, $11, $0c, $fc, $f3, $f7
0f235     02 0D 0D 05 
0f239     FC F8 F8 F8 
0f23d     F9 F6 F6 F7 
0f241     FF 05 05 00 | 	byte	$02, $0d, $0d, $05, $fc, $f8, $f8, $f8, $f9, $f6, $f6, $f7, $ff, $05, $05, $00
0f245     F5 F7 FF 09 
0f249     0F 0D 0A 04 
0f24d     05 0C 12 0E 
0f251     02 F0 E6 EC | 	byte	$f5, $f7, $ff, $09, $0f, $0d, $0a, $04, $05, $0c, $12, $0e, $02, $f0, $e6, $ec
0f255     F3 02 05 06 
0f259     05 04 FE FC 
0f25d     F7 F8 FA 03 
0f261     0D 19 18 10 | 	byte	$f3, $02, $05, $06, $05, $04, $fe, $fc, $f7, $f8, $fa, $03, $0d, $19, $18, $10
0f265     F9 E8 E3 E7 
0f269     F5 02 03 09 
0f26d     06 0C 09 0D 
0f271     08 00 FA FB | 	byte	$f9, $e8, $e3, $e7, $f5, $02, $03, $09, $06, $0c, $09, $0d, $08, $00, $fa, $fb
0f275     0F 1F 27 19 
0f279     04 F6 F1 F3 
0f27d     F4 F4 E9 E3 
0f281     EB FF 0F 12 | 	byte	$0f, $1f, $27, $19, $04, $f6, $f1, $f3, $f4, $f4, $e9, $e3, $eb, $ff, $0f, $12
0f285     0A F8 F6 FB 
0f289     07 10 10 11 
0f28d     0F 13 1A 1B 
0f291     10 F0 D4 D3 | 	byte	$0a, $f8, $f6, $fb, $07, $10, $10, $11, $0f, $13, $1a, $1b, $10, $f0, $d4, $d3
0f295     E7 05 19 12 
0f299     04 FC FE 06 
0f29d     04 00 F2 F3 
0f2a1     03 1B 26 12 | 	byte	$e7, $05, $19, $12, $04, $fc, $fe, $06, $04, $00, $f2, $f3, $03, $1b, $26, $12
0f2a5     F4 D4 D5 E3 
0f2a9     F9 01 0B 0C 
0f2ad     0C 0D 11 12 
0f2b1     08 F8 F1 F9 | 	byte	$f4, $d4, $d5, $e3, $f9, $01, $0b, $0c, $0c, $0d, $11, $12, $08, $f8, $f1, $f9
0f2b5     0B 1D 1D 0A 
0f2b9     FB ED EA EB 
0f2bd     EA E2 DC E3 
0f2c1     F3 0B 12 0C | 	byte	$0b, $1d, $1d, $0a, $fb, $ed, $ea, $eb, $ea, $e2, $dc, $e3, $f3, $0b, $12, $0c
0f2c5     FA F5 FB 03 
0f2c9     08 0C 0F 14 
0f2cd     16 0F 01 F4 
0f2d1     E4 E4 F7 F8 | 	byte	$fa, $f5, $fb, $03, $08, $0c, $0f, $14, $16, $0f, $01, $f4, $e4, $e4, $f7, $f8
0f2d5     F4 EF F1 00 
0f2d9     00 00 00 05 
0f2dd     05 00 FF 00 
0f2e1     00 00 00 00 | 	byte	$f4, $ef, $f1, $00, $00, $00, $00, $05, $05, $00, $ff, $00, $00, $00, $00, $00
0f2e5     00 00 00 00 
      ...             
0f311     00 00 00 00 
0f315     00          | 	byte	$00[49]
0f316     F7 F9 01 01 
0f31a     F9 FC 04 FE 
0f31e     FF FF F6 FB 
0f322     FB F9 FE 00 | 	byte	$f7, $f9, $01, $01, $f9, $fc, $04, $fe, $ff, $ff, $f6, $fb, $fb, $f9, $fe, $00
0f326     01 FC F3 F4 
0f32a     F8 F9 FD FD 
0f32e     00 FD F4 F3 
0f332     F3 F2 F6 FA | 	byte	$01, $fc, $f3, $f4, $f8, $f9, $fd, $fd, $00, $fd, $f4, $f3, $f3, $f2, $f6, $fa
0f336     FC 04 07 05 
0f33a     06 FE F6 00 
0f33e     06 06 08 0E 
0f342     0A 01 FA F6 | 	byte	$fc, $04, $07, $05, $06, $fe, $f6, $00, $06, $06, $08, $0e, $0a, $01, $fa, $f6
0f346     F9 FF 06 0A 
0f34a     0D 08 01 F9 
0f34e     F9 F6 FF 03 
0f352     05 0A 0F 0A | 	byte	$f9, $ff, $06, $0a, $0d, $08, $01, $f9, $f9, $f6, $ff, $03, $05, $0a, $0f, $0a
0f356     03 FD 02 0D 
0f35a     0B 08 0F 11 
0f35e     0A 00 F7 F7 
0f362     01 04 04 0B | 	byte	$03, $fd, $02, $0d, $0b, $08, $0f, $11, $0a, $00, $f7, $f7, $01, $04, $04, $0b
0f366     0E 07 F7 F2 
0f36a     EF F1 F9 FE 
0f36e     02 09 07 F4 
0f372     E7 ED F6 FC | 	byte	$0e, $07, $f7, $f2, $ef, $f1, $f9, $fe, $02, $09, $07, $f4, $e7, $ed, $f6, $fc
0f376     00 04 05 01 
0f37a     F5 EC F0 FA 
0f37e     05 0A 0F 0D 
0f382     0B F9 ED F5 | 	byte	$00, $04, $05, $01, $f5, $ec, $f0, $fa, $05, $0a, $0f, $0d, $0b, $f9, $ed, $f5
0f386     FF 09 12 18 
0f38a     11 05 F6 EB 
0f38e     EB F6 FC 07 
0f392     0A 03 F8 F0 | 	byte	$ff, $09, $12, $18, $11, $05, $f6, $eb, $eb, $f6, $fc, $07, $0a, $03, $f8, $f0
0f396     ED EF F9 06 
0f39a     0A 0A 09 FB 
0f39e     EF EC F3 F9 
0f3a2     0A 14 11 05 | 	byte	$ed, $ef, $f9, $06, $0a, $0a, $09, $fb, $ef, $ec, $f3, $f9, $0a, $14, $11, $05
0f3a6     FA F3 EC EF 
0f3aa     FA 07 0D 09 
0f3ae     FF F7 F2 EC 
0f3b2     F1 F8 01 06 | 	byte	$fa, $f3, $ec, $ef, $fa, $07, $0d, $09, $ff, $f7, $f2, $ec, $f1, $f8, $01, $06
0f3b6     FE F2 EE ED 
0f3ba     ED F7 09 0E 
0f3be     0C 09 05 FA 
0f3c2     F3 F6 07 14 | 	byte	$fe, $f2, $ee, $ed, $ed, $f7, $09, $0e, $0c, $09, $05, $fa, $f3, $f6, $07, $14
0f3c6     14 0D 0B 08 
0f3ca     F9 F4 F5 FA 
0f3ce     03 06 FD F7 
0f3d2     F9 F4 F1 F7 | 	byte	$14, $0d, $0b, $08, $f9, $f4, $f5, $fa, $03, $06, $fd, $f7, $f9, $f4, $f1, $f7
0f3d6     07 0B 08 07 
0f3da     06 FE F6 F2 
0f3de     F7 01 06 04 
0f3e2     FD F9 F4 EE | 	byte	$07, $0b, $08, $07, $06, $fe, $f6, $f2, $f7, $01, $06, $04, $fd, $f9, $f4, $ee
0f3e6     E6 EE F9 FC 
0f3ea     FB FA F8 F8 
0f3ee     F6 F5 FD 07 
0f3f2     0C 0F 0E 09 | 	byte	$e6, $ee, $f9, $fc, $fb, $fa, $f8, $f8, $f6, $f5, $fd, $07, $0c, $0f, $0e, $09
0f3f6     05 04 05 06 
0f3fa     0C 0D 0C 08 
0f3fe     06 FC F4 F6 
0f402     FC FD FB 00 | 	byte	$05, $04, $05, $06, $0c, $0d, $0c, $08, $06, $fc, $f4, $f6, $fc, $fd, $fb, $00
0f406     03 05 01 FA 
0f40a     F9 05 0D 0C 
0f40e     0C 0E 0B 03 
0f412     FB FC 01 02 | 	byte	$03, $05, $01, $fa, $f9, $05, $0d, $0c, $0c, $0e, $0b, $03, $fb, $fc, $01, $02
0f416     03 03 FC F5 
0f41a     EF EA E6 EB 
0f41e     F2 F7 FB FF 
0f422     FD F2 F0 F7 | 	byte	$03, $03, $fc, $f5, $ef, $ea, $e6, $eb, $f2, $f7, $fb, $ff, $fd, $f2, $f0, $f7
0f426     FE 02 08 0B 
0f42a     09 03 FE F7 
0f42e     F8 01 07 03 
0f432     FF FD F9 F0 | 	byte	$fe, $02, $08, $0b, $09, $03, $fe, $f7, $f8, $01, $07, $03, $ff, $fd, $f9, $f0
0f436     E8 EC F4 FA 
0f43a     00 FE F9 FB 
0f43e     FD FB FB 07 
0f442     10 12 0B 09 | 	byte	$e8, $ec, $f4, $fa, $00, $fe, $f9, $fb, $fd, $fb, $fb, $07, $10, $12, $0b, $09
0f446     0C 06 02 04 
0f44a     04 04 02 00 
0f44e     F9 F6 F4 F3 
0f452     F6 00 04 FD | 	byte	$0c, $06, $02, $04, $04, $04, $02, $00, $f9, $f6, $f4, $f3, $f6, $00, $04, $fd
0f456     FB 00 FE FA 
0f45a     FA 01 06 03 
0f45e     01 00 FD FB 
0f462     FC FB FA FB | 	byte	$fb, $00, $fe, $fa, $fa, $01, $06, $03, $01, $00, $fd, $fb, $fc, $fb, $fa, $fb
0f466     FC F8 F5 F9 
0f46a     FB FC 01 02 
0f46e     FE FC 00 FE 
0f472     FA FB FD 01 | 	byte	$fc, $f8, $f5, $f9, $fb, $fc, $01, $02, $fe, $fc, $00, $fe, $fa, $fb, $fd, $01
0f476     00 02 05 05 
0f47a     05 08 08 04 
0f47e     06 07 01 FD 
0f482     01 02 01 00 | 	byte	$00, $02, $05, $05, $05, $08, $08, $04, $06, $07, $01, $fd, $01, $02, $01, $00
0f486     03 FB F6 FC 
0f48a     FD F9 F7 FA 
0f48e     FC F8 F5 FA 
0f492     FD F9 FB FF | 	byte	$03, $fb, $f6, $fc, $fd, $f9, $f7, $fa, $fc, $f8, $f5, $fa, $fd, $f9, $fb, $ff
0f496     FA F7 F6 F2 
0f49a     F1 F4 F8 FB 
0f49e     00 03 F7 F6 
0f4a2     00 06 03 01 | 	byte	$fa, $f7, $f6, $f2, $f1, $f4, $f8, $fb, $00, $03, $f7, $f6, $00, $06, $03, $01
0f4a6     08 09 03 FD 
0f4aa     FF FF FE 01 
0f4ae     FE F8 FA FA 
0f4b2     F2 EE F8 02 | 	byte	$08, $09, $03, $fd, $ff, $ff, $fe, $01, $fe, $f8, $fa, $fa, $f2, $ee, $f8, $02
0f4b6     04 09 0F 10 
0f4ba     0C 0B 10 0D 
0f4be     0B 0E 0A 05 
0f4c2     02 01 F8 F1 | 	byte	$04, $09, $0f, $10, $0c, $0b, $10, $0d, $0b, $0e, $0a, $05, $02, $01, $f8, $f1
0f4c6     F5 F6 F1 ED 
0f4ca     EE EC EA E9 
0f4ce     ED F1 F8 FB 
0f4d2     F5 F1 FF 03 | 	byte	$f5, $f6, $f1, $ed, $ee, $ec, $ea, $e9, $ed, $f1, $f8, $fb, $f5, $f1, $ff, $03
0f4d6     F9 F8 FE 01 
0f4da     F9 F7 FC F9 
0f4de     F5 F5 E9 D9 
0f4e2     D6 F7 21 35 | 	byte	$f9, $f8, $fe, $01, $f9, $f7, $fc, $f9, $f5, $f5, $e9, $d9, $d6, $f7, $21, $35
0f4e6     32 FB DB ED 
0f4ea     C7 C5 2C 76 
0f4ee     6D 58 18 EE 
0f4f2     03 E2 E4 45 | 	byte	$32, $fb, $db, $ed, $c7, $c5, $2c, $76, $6d, $58, $18, $ee, $03, $e2, $e4, $45
0f4f6     73 42 09 CD 
0f4fa     BD D5 C7 E1 
0f4fe     26 32 0B DB 
0f502     B8 C9 E1 E2 | 	byte	$73, $42, $09, $cd, $bd, $d5, $c7, $e1, $26, $32, $0b, $db, $b8, $c9, $e1, $e2
0f506     FA 22 1F FA 
0f50a     D8 C9 E0 F8 
0f50e     02 0C 0D FB 
0f512     E2 D3 D5 EE | 	byte	$fa, $22, $1f, $fa, $d8, $c9, $e0, $f8, $02, $0c, $0d, $fb, $e2, $d3, $d5, $ee
0f516     07 0E 0C 04 
0f51a     F3 EC F1 F8 
0f51e     12 2C 30 2C 
0f522     2B 1C 16 1B | 	byte	$07, $0e, $0c, $04, $f3, $ec, $f1, $f8, $12, $2c, $30, $2c, $2b, $1c, $16, $1b
0f526     1D 22 29 24 
0f52a     1A 10 02 F2 
0f52e     E9 DD D4 DB 
0f532     EE F5 05 0C | 	byte	$1d, $22, $29, $24, $1a, $10, $02, $f2, $e9, $dd, $d4, $db, $ee, $f5, $05, $0c
0f536     03 F7 EC DD 
0f53a     DB E8 05 1F 
0f53e     1F 0F F9 D5 
0f542     B6 AE B9 E5 | 	byte	$03, $f7, $ec, $dd, $db, $e8, $05, $1f, $1f, $0f, $f9, $d5, $b6, $ae, $b9, $e5
0f546     0B 0E FA F2 
0f54a     E5 CC D3 FA 
0f54e     24 33 29 21 
0f552     2B 30 2C 2B | 	byte	$0b, $0e, $fa, $f2, $e5, $cc, $d3, $fa, $24, $33, $29, $21, $2b, $30, $2c, $2b
0f556     26 18 1E 2B 
0f55a     26 08 F2 EC 
0f55e     EB 02 16 06 
0f562     EC EA E4 DD | 	byte	$26, $18, $1e, $2b, $26, $08, $f2, $ec, $eb, $02, $16, $06, $ec, $ea, $e4, $dd
0f566     E9 F9 0D 16 
0f56a     13 01 EA E1 
0f56e     E0 DB D2 CB 
0f572     D1 DF DC D4 | 	byte	$e9, $f9, $0d, $16, $13, $01, $ea, $e1, $e0, $db, $d2, $cb, $d1, $df, $dc, $d4
0f576     EA F8 F2 FA 
0f57a     07 01 FA 13 
0f57e     20 28 2D 14 
0f582     16 2B 2D 22 | 	byte	$ea, $f8, $f2, $fa, $07, $01, $fa, $13, $20, $28, $2d, $14, $16, $2b, $2d, $22
0f586     23 22 03 F1 
0f58a     FA 02 04 07 
0f58e     01 ED F3 0C 
0f592     07 F3 FB 0E | 	byte	$23, $22, $03, $f1, $fa, $02, $04, $07, $01, $ed, $f3, $0c, $07, $f3, $fb, $0e
0f596     07 F5 E9 F3 
0f59a     F3 D9 C4 DC 
0f59e     0C 16 11 EB 
0f5a2     D0 CE DB E7 | 	byte	$07, $f5, $e9, $f3, $f3, $d9, $c4, $dc, $0c, $16, $11, $eb, $d0, $ce, $db, $e7
0f5a6     F1 19 3D 3A 
0f5aa     1E 0F 19 2E 
0f5ae     4B 48 32 16 
0f5b2     11 1B 0C F2 | 	byte	$f1, $19, $3d, $3a, $1e, $0f, $19, $2e, $4b, $48, $32, $16, $11, $1b, $0c, $f2
0f5b6     D1 BF E4 FC 
0f5ba     EB CB D7 E6 
0f5be     CD C0 D4 F8 
0f5c2     E5 D0 D2 E3 | 	byte	$d1, $bf, $e4, $fc, $eb, $cb, $d7, $e6, $cd, $c0, $d4, $f8, $e5, $d0, $d2, $e3
0f5c6     F5 0E 2B 03 
0f5ca     D0 E8 11 FD 
0f5ce     E4 38 64 49 
0f5d2     3A 3C 35 36 | 	byte	$f5, $0e, $2b, $03, $d0, $e8, $11, $fd, $e4, $38, $64, $49, $3a, $3c, $35, $36
0f5d6     53 43 1E 0A 
0f5da     1D 15 FB 06 
0f5de     E9 BC C2 EB 
0f5e2     D1 A5 C9 DA | 	byte	$53, $43, $1e, $0a, $1d, $15, $fb, $06, $e9, $bc, $c2, $eb, $d1, $a5, $c9, $da
0f5e6     CB A3 94 9A 
0f5ea     AD D4 F1 0D 
0f5ee     1B 15 08 12 
0f5f2     1C 05 20 6F | 	byte	$cb, $a3, $94, $9a, $ad, $d4, $f1, $0d, $1b, $15, $08, $12, $1c, $05, $20, $6f
0f5f6     7F 5D 25 2A 
0f5fa     33 3B 40 25 
0f5fe     FC F8 F3 BA 
0f602     A2 BD E1 EB | 	byte	$7f, $5d, $25, $2a, $33, $3b, $40, $25, $fc, $f8, $f3, $ba, $a2, $bd, $e1, $eb
0f606     D9 A9 98 BE 
0f60a     F7 00 DB C6 
0f60e     CC D4 ED 1C 
0f612     44 37 10 07 | 	byte	$d9, $a9, $98, $be, $f7, $00, $db, $c6, $cc, $d4, $ed, $1c, $44, $37, $10, $07
0f616     FC F4 EB 29 
0f61a     7A 6E 27 FC 
0f61e     27 41 5C 5E 
0f622     2E 0D 22 1B | 	byte	$fc, $f4, $eb, $29, $7a, $6e, $27, $fc, $27, $41, $5c, $5e, $2e, $0d, $22, $1b
0f626     E0 E2 E8 E6 
0f62a     E2 BB 98 A8 
0f62e     CB BA 96 91 
0f632     9F AA C8 ED | 	byte	$e0, $e2, $e8, $e6, $e2, $bb, $98, $a8, $cb, $ba, $96, $91, $9f, $aa, $c8, $ed
0f636     06 04 09 19 
0f63a     1E 22 12 30 
0f63e     77 7F 72 55 
0f642     5B 51 51 5C | 	byte	$06, $04, $09, $19, $1e, $22, $12, $30, $77, $7f, $72, $55, $5b, $51, $51, $5c
0f646     39 19 17 FF 
0f64a     B5 9C B3 C9 
0f64e     DB CB 95 93 
0f652     BB CD B7 A9 | 	byte	$39, $19, $17, $ff, $b5, $9c, $b3, $c9, $db, $cb, $95, $93, $bb, $cd, $b7, $a9
0f656     BC CA DC 0B 
0f65a     2D 26 10 0A 
0f65e     F2 E2 EB 3C 
0f662     7B 64 25 0C | 	byte	$bc, $ca, $dc, $0b, $2d, $26, $10, $0a, $f2, $e2, $eb, $3c, $7b, $64, $25, $0c
0f666     21 2F 41 47 
0f66a     38 34 17 D1 
0f66e     A4 C2 FC FE 
0f672     D5 B8 B5 AF | 	byte	$21, $2f, $41, $47, $38, $34, $17, $d1, $a4, $c2, $fc, $fe, $d5, $b8, $b5, $af
0f676     BA B3 AE B9 
0f67a     C7 CD DD 07 
0f67e     20 1C 04 F7 
0f682     E4 F8 59 7F | 	byte	$ba, $b3, $ae, $b9, $c7, $cd, $dd, $07, $20, $1c, $04, $f7, $e4, $f8, $59, $7f
0f686     6C 49 3C 27 
0f68a     2E 53 4B 31 
0f68e     24 14 BA 91 
0f692     B5 E1 E1 BF | 	byte	$6c, $49, $3c, $27, $2e, $53, $4b, $31, $24, $14, $ba, $91, $b5, $e1, $e1, $bf
0f696     A1 92 9E A8 
0f69a     B7 C3 C3 DA 
0f69e     F6 24 2D 1D 
0f6a2     0F 29 1C F6 | 	byte	$a1, $92, $9e, $a8, $b7, $c3, $c3, $da, $f6, $24, $2d, $1d, $0f, $29, $1c, $f6
0f6a6     41 7E 75 40 
0f6aa     26 15 06 28 
0f6ae     34 35 1D F7 
0f6b2     B5 93 B4 E7 | 	byte	$41, $7e, $75, $40, $26, $15, $06, $28, $34, $35, $1d, $f7, $b5, $93, $b4, $e7
0f6b6     E9 D8 D0 B5 
0f6ba     9B AB CB DD 
0f6be     F6 0C 22 42 
0f6c2     41 00 EB 09 | 	byte	$e9, $d8, $d0, $b5, $9b, $ab, $cb, $dd, $f6, $0c, $22, $42, $41, $00, $eb, $09
0f6c6     09 3D 66 47 
0f6ca     39 4C 36 00 
0f6ce     10 4A 4A 2A 
0f6d2     ED C5 C8 F9 | 	byte	$09, $3d, $66, $47, $39, $4c, $36, $00, $10, $4a, $4a, $2a, $ed, $c5, $c8, $f9
0f6d6     F2 BA B7 DE 
0f6da     C0 86 8E C0 
0f6de     CF BD CE F6 
0f6e2     0C 1E 22 18 | 	byte	$f2, $ba, $b7, $de, $c0, $86, $8e, $c0, $cf, $bd, $ce, $f6, $0c, $1e, $22, $18
0f6e6     14 1F 55 68 
0f6ea     76 7A 60 3A 
0f6ee     22 3A 45 2E 
0f6f2     08 F3 E4 B8 | 	byte	$14, $1f, $55, $68, $76, $7a, $60, $3a, $22, $3a, $45, $2e, $08, $f3, $e4, $b8
0f6f6     A1 AF DC DB 
0f6fa     B7 91 88 9A 
0f6fe     B7 CC E0 09 
0f702     29 25 09 F6 | 	byte	$a1, $af, $dc, $db, $b7, $91, $88, $9a, $b7, $cc, $e0, $09, $29, $25, $09, $f6
0f706     1B FB 0A 71 
0f70a     64 08 16 4C 
0f70e     2C 44 3E 1A 
0f712     21 12 DD C9 | 	byte	$1b, $fb, $0a, $71, $64, $08, $16, $4c, $2c, $44, $3e, $1a, $21, $12, $dd, $c9
0f716     FC 0B E5 B8 
0f71a     B2 B9 A0 B7 
0f71e     D7 B8 B9 FB 
0f722     16 01 F0 07 | 	byte	$fc, $0b, $e5, $b8, $b2, $b9, $a0, $b7, $d7, $b8, $b9, $fb, $16, $01, $f0, $07
0f726     33 FC F8 6A 
0f72a     76 33 3D 44 
0f72e     05 35 58 19 
0f732     10 16 CF 9A | 	byte	$33, $fc, $f8, $6a, $76, $33, $3d, $44, $05, $35, $58, $19, $10, $16, $cf, $9a
0f736     C7 EF E7 CE 
0f73a     C0 BC B1 B1 
0f73e     CA E8 F2 0D 
0f742     19 16 31 13 | 	byte	$c7, $ef, $e7, $ce, $c0, $bc, $b1, $b1, $ca, $e8, $f2, $0d, $19, $16, $31, $13
0f746     F2 0B 23 38 
0f74a     3C 25 05 21 
0f74e     27 06 07 20 
0f752     40 32 FA CF | 	byte	$f2, $0b, $23, $38, $3c, $25, $05, $21, $27, $06, $07, $20, $40, $32, $fa, $cf
0f756     EB 14 F2 D0 
0f75a     C0 D9 C7 9C 
0f75e     AB CA D9 DB 
0f762     0D 26 0C D8 | 	byte	$eb, $14, $f2, $d0, $c0, $d9, $c7, $9c, $ab, $ca, $d9, $db, $0d, $26, $0c, $d8
0f766     DC FD 28 6C 
0f76a     47 1A 41 5E 
0f76e     1C 16 5E 62 
0f772     32 F1 D9 D4 | 	byte	$dc, $fd, $28, $6c, $47, $1a, $41, $5e, $1c, $16, $5e, $62, $32, $f1, $d9, $d4
0f776     EE F3 CE BB 
0f77a     BE A3 82 90 
0f77e     D2 D3 AE C5 
0f782     FD 04 EC 1C | 	byte	$ee, $f3, $ce, $bb, $be, $a3, $82, $90, $d2, $d3, $ae, $c5, $fd, $04, $ec, $1c
0f786     25 25 63 5E 
0f78a     3D 4D 6D 50 
0f78e     28 32 25 10 
0f792     01 03 DF DD | 	byte	$25, $25, $63, $5e, $3d, $4d, $6d, $50, $28, $32, $25, $10, $01, $03, $df, $dd
0f796     DC BD CF D9 
0f79a     C2 90 92 C4 
0f79e     CC BF CB 10 
0f7a2     3B 26 EA BB | 	byte	$dc, $bd, $cf, $d9, $c2, $90, $92, $c4, $cc, $bf, $cb, $10, $3b, $26, $ea, $bb
0f7a6     0A 77 45 F8 
0f7aa     29 44 08 F4 
0f7ae     18 2F 49 14 
0f7b2     DE D0 F6 0C | 	byte	$0a, $77, $45, $f8, $29, $44, $08, $f4, $18, $2f, $49, $14, $de, $d0, $f6, $0c
0f7b6     E4 FA FF CD 
0f7ba     88 96 C2 C6 
0f7be     D7 DD ED 02 
0f7c2     06 D5 D6 3A | 	byte	$e4, $fa, $ff, $cd, $88, $96, $c2, $c6, $d7, $dd, $ed, $02, $06, $d5, $d6, $3a
0f7c6     7F 69 25 4A 
0f7ca     6C 51 20 2A 
0f7ce     3F 31 08 D6 
0f7d2     BA D5 EB BB | 	byte	$7f, $69, $25, $4a, $6c, $51, $20, $2a, $3f, $31, $08, $d6, $ba, $d5, $eb, $bb
0f7d6     BF DA C0 92 
0f7da     A1 D9 F7 F7 
0f7de     EB 10 38 23 
0f7e2     CD D4 5F 7F | 	byte	$bf, $da, $c0, $92, $a1, $d9, $f7, $f7, $eb, $10, $38, $23, $cd, $d4, $5f, $7f
0f7e6     46 0B 1C 32 
0f7ea     2F 3E 2E 16 
0f7ee     12 DF C2 CB 
0f7f2     E7 EA F0 DE | 	byte	$46, $0b, $1c, $32, $2f, $3e, $2e, $16, $12, $df, $c2, $cb, $e7, $ea, $f0, $de
0f7f6     AB 90 B8 0E 
0f7fa     1A D9 BD EC 
0f7fe     28 25 E2 C7 
0f802     1B 79 53 03 | 	byte	$ab, $90, $b8, $0e, $1a, $d9, $bd, $ec, $28, $25, $e2, $c7, $1b, $79, $53, $03
0f806     2A 6B 61 2E 
0f80a     FC F8 3F 38 
0f80e     FE C0 B6 CD 
0f812     D1 C7 AD 97 | 	byte	$2a, $6b, $61, $2e, $fc, $f8, $3f, $38, $fe, $c0, $b6, $cd, $d1, $c7, $ad, $97
0f816     9D F5 04 C1 
0f81a     EA 21 1D F1 
0f81e     C8 B0 32 7B 
0f822     1B DB 17 58 | 	byte	$9d, $f5, $04, $c1, $ea, $21, $1d, $f1, $c8, $b0, $32, $7b, $1b, $db, $17, $58
0f826     69 53 FF D9 
0f82a     21 26 F3 C7 
0f82e     E2 E3 AC 85 
0f832     88 9A D5 1A | 	byte	$69, $53, $ff, $d9, $21, $26, $f3, $c7, $e2, $e3, $ac, $85, $88, $9a, $d5, $1a
0f836     CF BF 32 59 
0f83a     0C F0 E3 03 
0f83e     73 7D 09 0A 
0f842     76 71 3A 0F | 	byte	$cf, $bf, $32, $59, $0c, $f0, $e3, $03, $73, $7d, $09, $0a, $76, $71, $3a, $0f
0f846     E9 03 25 EF 
0f84a     B5 BE E6 C9 
0f84e     8D 82 A3 B3 
0f852     C6 E6 E0 27 | 	byte	$e9, $03, $25, $ef, $b5, $be, $e6, $c9, $8d, $82, $a3, $b3, $c6, $e6, $e0, $27
0f856     6C 28 E7 F5 
0f85a     08 70 7F 4D 
0f85e     F2 19 5E 66 
0f862     3B FE D6 D2 | 	byte	$6c, $28, $e7, $f5, $08, $70, $7f, $4d, $f2, $19, $5e, $66, $3b, $fe, $d6, $d2
0f866     D1 D3 DD DF 
0f86a     BA 8A 82 99 
0f86e     BB C0 CC D0 
0f872     F3 3D 3F 10 | 	byte	$d1, $d3, $dd, $df, $ba, $8a, $82, $99, $bb, $c0, $cc, $d0, $f3, $3d, $3f, $10
0f876     08 F1 4D 7F 
0f87a     72 28 31 5D 
0f87e     65 3A 0B 0C 
0f882     07 E4 C1 BE | 	byte	$08, $f1, $4d, $7f, $72, $28, $31, $5d, $65, $3a, $0b, $0c, $07, $e4, $c1, $be
0f886     EF F6 A5 84 
0f88a     8E A1 AB CC 
0f88e     E0 E4 14 25 
0f892     F5 EC ED 27 | 	byte	$ef, $f6, $a5, $84, $8e, $a1, $ab, $cc, $e0, $e4, $14, $25, $f5, $ec, $ed, $27
0f896     77 73 25 13 
0f89a     4B 76 5C 16 
0f89e     03 0F F8 DC 
0f8a2     D4 DE E6 C6 | 	byte	$77, $73, $25, $13, $4b, $76, $5c, $16, $03, $0f, $f8, $dc, $d4, $de, $e6, $c6
0f8a6     91 8B A3 B6 
0f8aa     C5 C1 CE 05 
0f8ae     2C 09 E7 D2 
0f8b2     0A 6B 79 33 | 	byte	$91, $8b, $a3, $b6, $c5, $c1, $ce, $05, $2c, $09, $e7, $d2, $0a, $6b, $79, $33
0f8b6     16 45 71 62 
0f8ba     3A 0D 02 01 
0f8be     ED D6 ED EF 
0f8c2     B8 98 93 A7 | 	byte	$16, $45, $71, $62, $3a, $0d, $02, $01, $ed, $d6, $ed, $ef, $b8, $98, $93, $a7
0f8c6     AE B2 CD E0 
0f8ca     E0 02 13 0C 
0f8ce     FC FA 46 71 
0f8d2     47 0C 27 6A | 	byte	$ae, $b2, $cd, $e0, $e0, $02, $13, $0c, $fc, $fa, $46, $71, $47, $0c, $27, $6a
0f8d6     6A 3E 0B F4 
0f8da     06 0D E9 E0 
0f8de     E5 CE AD 9A 
0f8e2     A3 B1 C6 D6 | 	byte	$6a, $3e, $0b, $f4, $06, $0d, $e9, $e0, $e5, $ce, $ad, $9a, $a3, $b1, $c6, $d6
0f8e6     E4 FF 07 F5 
0f8ea     F7 E3 11 70 
0f8ee     6C 24 07 41 
0f8f2     74 6C 42 12 | 	byte	$e4, $ff, $07, $f5, $f7, $e3, $11, $70, $6c, $24, $07, $41, $74, $6c, $42, $12
0f8f6     09 FD FD F0 
0f8fa     EE E6 C8 AB 
0f8fe     AA BF B8 C2 
0f902     DB EC F7 FE | 	byte	$09, $fd, $fd, $f0, $ee, $e6, $c8, $ab, $aa, $bf, $b8, $c2, $db, $ec, $f7, $fe
0f906     F7 E2 CB 18 
0f90a     7D 57 FF EA 
0f90e     57 7D 5C 1F 
0f912     0F 0B 08 00 | 	byte	$f7, $e2, $cb, $18, $7d, $57, $ff, $ea, $57, $7d, $5c, $1f, $0f, $0b, $08, $00
0f916     E9 F5 D9 AD 
0f91a     9F B0 C6 D3 
0f91e     CD CF FC 12 
0f922     07 ED BF F2 | 	byte	$e9, $f5, $d9, $ad, $9f, $b0, $c6, $d3, $cd, $cf, $fc, $12, $07, $ed, $bf, $f2
0f926     63 66 1C E2 
0f92a     1A 70 67 29 
0f92e     1C 22 02 F0 
0f932     E3 E2 E4 BA | 	byte	$63, $66, $1c, $e2, $1a, $70, $67, $29, $1c, $22, $02, $f0, $e3, $e2, $e4, $ba
0f936     A0 A9 B5 C6 
0f93a     DD EC 1E 2D 
0f93e     02 F4 CD 02 
0f942     74 76 11 C5 | 	byte	$a0, $a9, $b5, $c6, $dd, $ec, $1e, $2d, $02, $f4, $cd, $02, $74, $76, $11, $c5
0f946     00 73 6F 20 
0f94a     DF DF E2 F9 
0f94e     E1 C7 C6 9B 
0f952     86 9F BE B7 | 	byte	$00, $73, $6f, $20, $df, $df, $e2, $f9, $e1, $c7, $c6, $9b, $86, $9f, $be, $b7
0f956     CB D6 0D 3E 
0f95a     39 1D EC F9 
0f95e     70 7F 4D E7 
0f962     03 7D 7E 3C | 	byte	$cb, $d6, $0d, $3e, $39, $1d, $ec, $f9, $70, $7f, $4d, $e7, $03, $7d, $7e, $3c
0f966     E0 E0 FA 04 
0f96a     C5 AB C0 96 
0f96e     83 8F A3 99 
0f972     B6 E7 12 2D | 	byte	$e0, $e0, $fa, $04, $c5, $ab, $c0, $96, $83, $8f, $a3, $99, $b6, $e7, $12, $2d
0f976     31 20 E5 E3 
0f97a     6D 7F 5A FB 
0f97e     03 6E 7F 65 
0f982     10 F4 FD FB | 	byte	$31, $20, $e5, $e3, $6d, $7f, $5a, $fb, $03, $6e, $7f, $65, $10, $f4, $fd, $fb
0f986     E7 DA DC A0 
0f98a     82 92 B9 9E 
0f98e     A3 BF F5 2A 
0f992     1B E9 D1 F8 | 	byte	$e7, $da, $dc, $a0, $82, $92, $b9, $9e, $a3, $bf, $f5, $2a, $1b, $e9, $d1, $f8
0f996     78 7F 4F E7 
0f99a     03 69 7F 5B 
0f99e     0F F3 08 10 
0f9a2     F5 D8 D5 AB | 	byte	$78, $7f, $4f, $e7, $03, $69, $7f, $5b, $0f, $f3, $08, $10, $f5, $d8, $d5, $ab
0f9a6     85 91 B5 A2 
0f9aa     A1 BF EE 31 
0f9ae     3A 07 C1 D0 
0f9b2     61 7F 58 E5 | 	byte	$85, $91, $b5, $a2, $a1, $bf, $ee, $31, $3a, $07, $c1, $d0, $61, $7f, $58, $e5
0f9b6     F0 5D 7F 64 
0f9ba     01 DB 03 12 
0f9be     E9 B9 C5 B9 
0f9c2     8A 8B B4 A7 | 	byte	$f0, $5d, $7f, $64, $01, $db, $03, $12, $e9, $b9, $c5, $b9, $8a, $8b, $b4, $a7
0f9c6     9D B6 E6 30 
0f9ca     48 06 B7 C9 
0f9ce     50 7F 64 F4 
0f9d2     DF 56 7F 75 | 	byte	$9d, $b6, $e6, $30, $48, $06, $b7, $c9, $50, $7f, $64, $f4, $df, $56, $7f, $75
0f9d6     10 D7 03 2A 
0f9da     0D E6 D5 AB 
0f9de     88 99 D2 B7 
0f9e2     9B AF DB 2B | 	byte	$10, $d7, $03, $2a, $0d, $e6, $d5, $ab, $88, $99, $d2, $b7, $9b, $af, $db, $2b
0f9e6     52 0F B3 B7 
0f9ea     3A 7F 7A 0C 
0f9ee     D2 26 7B 7A 
0f9f2     34 CE D8 0E | 	byte	$52, $0f, $b3, $b7, $3a, $7f, $7a, $0c, $d2, $26, $7b, $7a, $34, $ce, $d8, $0e
0f9f6     14 E8 CD BA 
0f9fa     94 91 BE C5 
0f9fe     A9 B3 CF 1C 
0fa02     51 21 D8 BC | 	byte	$14, $e8, $cd, $ba, $94, $91, $be, $c5, $a9, $b3, $cf, $1c, $51, $21, $d8, $bc
0fa06     2B 7F 7C 04 
0fa0a     CB 33 7C 72 
0fa0e     1F E5 F1 F9 
0fa12     E7 DC DD C6 | 	byte	$2b, $7f, $7c, $04, $cb, $33, $7c, $72, $1f, $e5, $f1, $f9, $e7, $dc, $dd, $c6
0fa16     8D 8D CD E8 
0fa1a     AE 9D D0 2F 
0fa1e     60 2C D1 C3 
0fa22     13 7A 7B 2D | 	byte	$8d, $8d, $cd, $e8, $ae, $9d, $d0, $2f, $60, $2c, $d1, $c3, $13, $7a, $7b, $2d
0fa26     D5 08 78 7C 
0fa2a     48 EA D7 F2 
0fa2e     02 ED DE D5 
0fa32     99 8A B5 F2 | 	byte	$d5, $08, $78, $7c, $48, $ea, $d7, $f2, $02, $ed, $de, $d5, $99, $8a, $b5, $f2
0fa36     C4 9A AC FB 
0fa3a     50 55 05 BC 
0fa3e     CE 45 7F 6F 
0fa42     F6 BF 27 7C | 	byte	$c4, $9a, $ac, $fb, $50, $55, $05, $bc, $ce, $45, $7f, $6f, $f6, $bf, $27, $7c
0fa46     6B 17 CB E0 
0fa4a     07 F2 CE D7 
0fa4e     DA A4 8D AF 
0fa52     E4 D1 A4 B6 | 	byte	$6b, $17, $cb, $e0, $07, $f2, $ce, $d7, $da, $a4, $8d, $af, $e4, $d1, $a4, $b6
0fa56     FF 49 5B 13 
0fa5a     C2 D2 46 7F 
0fa5e     63 F2 DC 58 
0fa62     7B 53 08 DC | 	byte	$ff, $49, $5b, $13, $c2, $d2, $46, $7f, $63, $f2, $dc, $58, $7b, $53, $08, $dc
0fa66     E4 EE DE D3 
0fa6a     E2 C5 9F 9A 
0fa6e     CA F0 D0 AA 
0fa72     BD 05 4A 63 | 	byte	$e4, $ee, $de, $d3, $e2, $c5, $9f, $9a, $ca, $f0, $d0, $aa, $bd, $05, $4a, $63
0fa76     2B D8 D0 30 
0fa7a     7F 77 23 CE 
0fa7e     11 57 62 2D 
0fa82     E0 BE D1 E0 | 	byte	$2b, $d8, $d0, $30, $7f, $77, $23, $ce, $11, $57, $62, $2d, $e0, $be, $d1, $e0
0fa86     DD EA D7 AA 
0fa8a     8F C2 10 22 
0fa8e     C7 91 C8 43 
0fa92     7E 58 D8 9B | 	byte	$dd, $ea, $d7, $aa, $8f, $c2, $10, $22, $c7, $91, $c8, $43, $7e, $58, $d8, $9b
0fa96     DF 6C 7F 47 
0fa9a     D0 C7 1F 68 
0fa9e     69 24 BF A6 
0faa2     C4 ED 15 13 | 	byte	$df, $6c, $7f, $47, $d0, $c7, $1f, $68, $69, $24, $bf, $a6, $c4, $ed, $15, $13
0faa6     CD 8B 9F EF 
0faaa     36 11 A8 90 
0faae     E3 55 7D 3D 
0fab2     C9 95 C6 50 | 	byte	$cd, $8b, $9f, $ef, $36, $11, $a8, $90, $e3, $55, $7d, $3d, $c9, $95, $c6, $50
0fab6     7F 47 BD A4 
0faba     FB 62 72 21 
0fabe     B3 AE E8 06 
0fac2     1E 1E E9 BD | 	byte	$7f, $47, $bd, $a4, $fb, $62, $72, $21, $b3, $ae, $e8, $06, $1e, $1e, $e9, $bd
0fac6     B9 E0 14 41 
0faca     0D AA AA 1B 
0face     76 68 00 97 
0fad2     A3 14 77 56 | 	byte	$b9, $e0, $14, $41, $0d, $aa, $aa, $1b, $76, $68, $00, $97, $a3, $14, $77, $56
0fad6     E3 B8 EA 2B 
0fada     4B 2F F3 D5 
0fade     DF E8 FA 24 
0fae2     2B F7 BD C2 | 	byte	$e3, $b8, $ea, $2b, $4b, $2f, $f3, $d5, $df, $e8, $fa, $24, $2b, $f7, $bd, $c2
0fae6     FA 3C 32 DD 
0faea     9E C7 28 55 
0faee     21 C5 94 BA 
0faf2     0F 4B 23 E7 | 	byte	$fa, $3c, $32, $dd, $9e, $c7, $28, $55, $21, $c5, $94, $ba, $0f, $4b, $23, $e7
0faf6     DB F4 1B 2E 
0fafa     18 05 0E 15 
0fafe     02 F7 09 15 
0fb02     0C 06 F1 E6 | 	byte	$db, $f4, $1b, $2e, $18, $05, $0e, $15, $02, $f7, $09, $15, $0c, $06, $f1, $e6
0fb06     FE 03 DD CB 
0fb0a     D9 F5 08 EA 
0fb0e     B6 A9 E4 21 
0fb12     21 F3 E5 0A | 	byte	$fe, $03, $dd, $cb, $d9, $f5, $08, $ea, $b6, $a9, $e4, $21, $21, $f3, $e5, $0a
0fb16     3E 47 1F 01 
0fb1a     22 4A 42 13 
0fb1e     F5 F9 17 27 
0fb22     0D DC C9 DE | 	byte	$3e, $47, $1f, $01, $22, $4a, $42, $13, $f5, $f9, $17, $27, $0d, $dc, $c9, $de
0fb26     EB D8 C2 C0 
0fb2a     D4 E2 D2 BD 
0fb2e     C1 E8 08 0F 
0fb32     01 0C 2A 3F | 	byte	$eb, $d8, $c2, $c0, $d4, $e2, $d2, $bd, $c1, $e8, $08, $0f, $01, $0c, $2a, $3f
0fb36     32 1A 16 3B 
0fb3a     51 3D 11 F4 
0fb3e     01 1D 18 F6 
0fb42     D1 C9 D8 E5 | 	byte	$32, $1a, $16, $3b, $51, $3d, $11, $f4, $01, $1d, $18, $f6, $d1, $c9, $d8, $e5
0fb46     D3 B9 B4 D4 
0fb4a     E7 E0 CF D1 
0fb4e     EC 15 29 2B 
0fb52     2D 2E 2F 2D | 	byte	$d3, $b9, $b4, $d4, $e7, $e0, $cf, $d1, $ec, $15, $29, $2b, $2d, $2e, $2f, $2d
0fb56     36 3D 41 36 
0fb5a     20 06 FB 07 
0fb5e     0D F9 D6 C4 
0fb62     C3 D1 D3 CA | 	byte	$36, $3d, $41, $36, $20, $06, $fb, $07, $0d, $f9, $d6, $c4, $c3, $d1, $d3, $ca
0fb66     BF C5 DA E5 
0fb6a     E4 E7 F4 0C 
0fb6e     21 28 24 2D 
0fb72     42 47 3D 30 | 	byte	$bf, $c5, $da, $e5, $e4, $e7, $f4, $0c, $21, $28, $24, $2d, $42, $47, $3d, $30
0fb76     34 39 2F 1D 
0fb7a     0C F8 EF E6 
0fb7e     D9 CC C3 BE 
0fb82     BE C6 CC D0 | 	byte	$34, $39, $2f, $1d, $0c, $f8, $ef, $e6, $d9, $cc, $c3, $be, $be, $c6, $cc, $d0
0fb86     CA CC DF FA 
0fb8a     0F 0B F9 FF 
0fb8e     21 40 44 32 
0fb92     25 25 2F 36 | 	byte	$ca, $cc, $df, $fa, $0f, $0b, $f9, $ff, $21, $40, $44, $32, $25, $25, $2f, $36
0fb96     37 2D 14 FC 
0fb9a     E7 DF E2 E5 
0fb9e     D9 BF B2 C2 
0fba2     E7 F6 E5 D1 | 	byte	$37, $2d, $14, $fc, $e7, $df, $e2, $e5, $d9, $bf, $b2, $c2, $e7, $f6, $e5, $d1
0fba6     DC FC 13 0F 
0fbaa     00 F7 0A 26 
0fbae     3D 38 1D 0C 
0fbb2     1A 35 40 32 | 	byte	$dc, $fc, $13, $0f, $00, $f7, $0a, $26, $3d, $38, $1d, $0c, $1a, $35, $40, $32
0fbb6     12 F8 F1 F1 
0fbba     F2 F2 EA DA 
0fbbe     CE CC DB F4 
0fbc2     FD EE DA DC | 	byte	$12, $f8, $f1, $f1, $f2, $f2, $ea, $da, $ce, $cc, $db, $f4, $fd, $ee, $da, $dc
0fbc6     F9 10 0E F7 
0fbca     EE 09 29 30 
0fbce     1A 08 09 20 
0fbd2     36 32 17 02 | 	byte	$f9, $10, $0e, $f7, $ee, $09, $29, $30, $1a, $08, $09, $20, $36, $32, $17, $02
0fbd6     FA 03 0B FE 
0fbda     EE E1 DF E8 
0fbde     F0 EF EA E8 
0fbe2     ED F3 F2 F3 | 	byte	$fa, $03, $0b, $fe, $ee, $e1, $df, $e8, $f0, $ef, $ea, $e8, $ed, $f3, $f2, $f3
0fbe6     F3 F3 F0 F7 
0fbea     09 15 16 0B 
0fbee     03 00 0C 1C 
0fbf2     21 16 09 0A | 	byte	$f3, $f3, $f0, $f7, $09, $15, $16, $0b, $03, $00, $0c, $1c, $21, $16, $09, $0a
0fbf6     0C 0E 06 F5 
0fbfa     ED F2 F5 EF 
0fbfe     E7 E3 E6 F1 
0fc02     F7 F7 EB E2 | 	byte	$0c, $0e, $06, $f5, $ed, $f2, $f5, $ef, $e7, $e3, $e6, $f1, $f7, $f7, $eb, $e2
0fc06     E1 E9 F4 FF 
0fc0a     04 02 01 FD 
0fc0e     05 0D 10 11 
0fc12     15 1A 1A 1A | 	byte	$e1, $e9, $f4, $ff, $04, $02, $01, $fd, $05, $0d, $10, $11, $15, $1a, $1a, $1a
0fc16     18 1A 13 06 
0fc1a     FC F8 F9 FA 
0fc1e     F0 E2 E4 EE 
0fc22     F5 F1 E5 DC | 	byte	$18, $1a, $13, $06, $fc, $f8, $f9, $fa, $f0, $e2, $e4, $ee, $f5, $f1, $e5, $dc
0fc26     DA E4 EC EF 
0fc2a     EB EC F9 03 
0fc2e     0A 0F 0E 13 
0fc32     1F 2A 2E 26 | 	byte	$da, $e4, $ec, $ef, $eb, $ec, $f9, $03, $0a, $0f, $0e, $13, $1f, $2a, $2e, $26
0fc36     19 12 13 19 
0fc3a     11 FE F0 E8 
0fc3e     E8 EA E8 E5 
0fc42     E2 E2 DD DB | 	byte	$19, $12, $13, $19, $11, $fe, $f0, $e8, $e8, $ea, $e8, $e5, $e2, $e2, $dd, $db
0fc46     DE E4 EA EF 
0fc4a     F4 FF 10 16 
0fc4e     13 0D 13 21 
0fc52     27 2D 27 20 | 	byte	$de, $e4, $ea, $ef, $f4, $ff, $10, $16, $13, $0d, $13, $21, $27, $2d, $27, $20
0fc56     1C 1C 1D 14 
0fc5a     06 F5 E9 E9 
0fc5e     F0 EF E1 D4 
0fc62     D2 DF E8 EA | 	byte	$1c, $1c, $1d, $14, $06, $f5, $e9, $e9, $f0, $ef, $e1, $d4, $d2, $df, $e8, $ea
0fc66     E1 D8 DC E5 
0fc6a     F2 00 0D 13 
0fc6e     0E 0F 16 20 
0fc72     24 25 26 26 | 	byte	$e1, $d8, $dc, $e5, $f2, $00, $0d, $13, $0e, $0f, $16, $20, $24, $25, $26, $26
0fc76     29 20 16 0D 
0fc7a     09 FD EE E9 
0fc7e     E5 E3 DA D3 
0fc82     D5 E4 EF EC | 	byte	$29, $20, $16, $0d, $09, $fd, $ee, $e9, $e5, $e3, $da, $d3, $d5, $e4, $ef, $ec
0fc86     E0 DB E9 F5 
0fc8a     FF 02 FF 0F 
0fc8e     1A 1E 18 15 
0fc92     17 1C 1E 22 | 	byte	$e0, $db, $e9, $f5, $ff, $02, $ff, $0f, $1a, $1e, $18, $15, $17, $1c, $1e, $22
0fc96     27 1B 0D 07 
0fc9a     0A 07 F7 EC 
0fc9e     E9 ED EA E7 
0fca2     EB F1 F6 F8 | 	byte	$27, $1b, $0d, $07, $0a, $07, $f7, $ec, $e9, $ed, $ea, $e7, $eb, $f1, $f6, $f8
0fca6     F5 F5 F5 F8 
0fcaa     FB 00 05 0D 
0fcae     14 13 0F 0E 
0fcb2     12 11 13 19 | 	byte	$f5, $f5, $f5, $f8, $fb, $00, $05, $0d, $14, $13, $0f, $0e, $12, $11, $13, $19
0fcb6     1B 15 0F 06 
0fcba     02 07 04 F2 
0fcbe     E6 E7 EF F4 
0fcc2     EA E3 E8 F2 | 	byte	$1b, $15, $0f, $06, $02, $07, $04, $f2, $e6, $e7, $ef, $f4, $ea, $e3, $e8, $f2
0fcc6     F3 ED E8 E5 
0fcca     ED F2 F8 FD 
0fcce     0A 12 07 FF 
0fcd2     03 08 0A 11 | 	byte	$f3, $ed, $e8, $e5, $ed, $f2, $f8, $fd, $0a, $12, $07, $ff, $03, $08, $0a, $11
0fcd6     11 11 12 0C 
0fcda     0A 11 12 07 
0fcde     F4 EC F3 F8 
0fce2     F3 EA E3 F4 | 	byte	$11, $11, $12, $0c, $0a, $11, $12, $07, $f4, $ec, $f3, $f8, $f3, $ea, $e3, $f4
0fce6     04 FC F2 EC 
0fcea     EF F4 F7 F4 
0fcee     FB 0D 0D 06 
0fcf2     FB 01 0B 10 | 	byte	$04, $fc, $f2, $ec, $ef, $f4, $f7, $f4, $fb, $0d, $0d, $06, $fb, $01, $0b, $10
0fcf6     0D 13 1D 19 
0fcfa     0C 05 0A 0D 
0fcfe     FF EB E7 F2 
0fd02     F1 E7 DB DE | 	byte	$0d, $13, $1d, $19, $0c, $05, $0a, $0d, $ff, $eb, $e7, $f2, $f1, $e7, $db, $de
0fd06     F2 F8 EB DC 
0fd0a     DF EE F5 F1 
0fd0e     EA F8 08 0D 
0fd12     03 FF 07 10 | 	byte	$f2, $f8, $eb, $dc, $df, $ee, $f5, $f1, $ea, $f8, $08, $0d, $03, $ff, $07, $10
0fd16     13 16 1B 22 
0fd1a     1E 13 0F 12 
0fd1e     15 08 F4 EC 
0fd22     F6 FE F7 E9 | 	byte	$13, $16, $1b, $22, $1e, $13, $0f, $12, $15, $08, $f4, $ec, $f6, $fe, $f7, $e9
0fd26     E3 F1 02 FB 
0fd2a     EF EA EC EE 
0fd2e     EB ED 02 0F 
0fd32     09 F6 F5 06 | 	byte	$e3, $f1, $02, $fb, $ef, $ea, $ec, $ee, $eb, $ed, $02, $0f, $09, $f6, $f5, $06
0fd36     12 13 0F 13 
0fd3a     1C 1E 10 09 
0fd3e     11 15 03 ED 
0fd42     E8 F4 FC EE | 	byte	$12, $13, $0f, $13, $1c, $1e, $10, $09, $11, $15, $03, $ed, $e8, $f4, $fc, $ee
0fd46     DC DC F2 FB 
0fd4a     F1 E0 DD EE 
0fd4e     F6 F0 E7 F0 
0fd52     05 0A 01 FA | 	byte	$dc, $dc, $f2, $fb, $f1, $e0, $dd, $ee, $f6, $f0, $e7, $f0, $05, $0a, $01, $fa
0fd56     08 12 11 0A 
0fd5a     15 24 29 1B 
0fd5e     05 0F 1D 1F 
0fd62     FE EA EC 02 | 	byte	$08, $12, $11, $0a, $15, $24, $29, $1b, $05, $0f, $1d, $1f, $fe, $ea, $ec, $02
0fd66     04 EA DB E4 
0fd6a     FC FB ED E3 
0fd6e     EC F7 F4 E8 
0fd72     E5 FC 0B 05 | 	byte	$04, $ea, $db, $e4, $fc, $fb, $ed, $e3, $ec, $f7, $f4, $e8, $e5, $fc, $0b, $05
0fd76     F5 F3 09 13 
0fd7a     0E 03 11 22 
0fd7e     25 19 0D 0F 
0fd82     1B 15 FA ED | 	byte	$f5, $f3, $09, $13, $0e, $03, $11, $22, $25, $19, $0d, $0f, $1b, $15, $fa, $ed
0fd86     F4 07 06 ED 
0fd8a     E0 E9 FD FF 
0fd8e     F1 E8 F3 FB 
0fd92     F3 EB F1 06 | 	byte	$f4, $07, $06, $ed, $e0, $e9, $fd, $ff, $f1, $e8, $f3, $fb, $f3, $eb, $f1, $06
0fd96     11 08 FA 02 
0fd9a     15 19 0F 0C 
0fd9e     20 2E 29 0E 
0fda2     08 13 1F 0A | 	byte	$11, $08, $fa, $02, $15, $19, $0f, $0c, $20, $2e, $29, $0e, $08, $13, $1f, $0a
0fda6     EB E0 F5 05 
0fdaa     EF D6 D1 E8 
0fdae     F6 EF DF DA 
0fdb2     EC F3 E7 DF | 	byte	$eb, $e0, $f5, $05, $ef, $d6, $d1, $e8, $f6, $ef, $df, $da, $ec, $f3, $e7, $df
0fdb6     F1 0A 11 FD 
0fdba     ED 02 19 1B 
0fdbe     09 0A 1E 30 
0fdc2     21 06 FC 10 | 	byte	$f1, $0a, $11, $fd, $ed, $02, $19, $1b, $09, $0a, $1e, $30, $21, $06, $fc, $10
0fdc6     19 04 E6 DC 
0fdca     EF FE F0 DA 
0fdce     DA EE FC F6 
0fdd2     E9 F1 02 02 | 	byte	$19, $04, $e6, $dc, $ef, $fe, $f0, $da, $da, $ee, $fc, $f6, $e9, $f1, $02, $02
0fdd6     EE E4 F8 13 
0fdda     16 FB F0 FF 
0fdde     18 1A 0C 0B 
0fde2     1D 2D 1F 08 | 	byte	$ee, $e4, $f8, $13, $16, $fb, $f0, $ff, $18, $1a, $0c, $0b, $1d, $2d, $1f, $08
0fde6     04 15 1A 00 
0fdea     E5 E4 F8 04 
0fdee     F0 D8 D9 F1 
0fdf2     FE F5 E1 E6 | 	byte	$04, $15, $1a, $00, $e5, $e4, $f8, $04, $f0, $d8, $d9, $f1, $fe, $f5, $e1, $e6
0fdf6     FC 01 EA DB 
0fdfa     EC 0A 13 F7 
0fdfe     E8 F9 19 1B 
0fe02     08 FC 19 33 | 	byte	$fc, $01, $ea, $db, $ec, $0a, $13, $f7, $e8, $f9, $19, $1b, $08, $fc, $19, $33
0fe06     2A 05 F3 0A 
0fe0a     22 10 E4 D4 
0fe0e     EC 08 01 D9 
0fe12     CE E9 06 FF | 	byte	$2a, $05, $f3, $0a, $22, $10, $e4, $d4, $ec, $08, $01, $d9, $ce, $e9, $06, $ff
0fe16     E6 E0 F9 0D 
0fe1a     F6 DC E3 0B 
0fe1e     1F 0A E6 F0 
0fe22     1B 31 17 F8 | 	byte	$e6, $e0, $f9, $0d, $f6, $dc, $e3, $0b, $1f, $0a, $e6, $f0, $1b, $31, $17, $f8
0fe26     07 30 38 0E 
0fe2a     ED 00 23 1B 
0fe2e     E9 CE E8 0B 
0fe32     06 DA C6 E5 | 	byte	$07, $30, $38, $0e, $ed, $00, $23, $1b, $e9, $ce, $e8, $0b, $06, $da, $c6, $e5
0fe36     0E 0A E8 D5 
0fe3a     F4 15 0A E1 
0fe3e     DC 04 2C 1D 
0fe42     EC E2 11 36 | 	byte	$0e, $0a, $e8, $d5, $f4, $15, $0a, $e1, $dc, $04, $2c, $1d, $ec, $e2, $11, $36
0fe46     25 F9 F6 23 
0fe4a     3B 1B E8 EC 
0fe4e     17 2B 06 CE 
0fe52     D4 06 1A F7 | 	byte	$25, $f9, $f6, $23, $3b, $1b, $e8, $ec, $17, $2b, $06, $ce, $d4, $06, $1a, $f7
0fe56     C4 D4 08 21 
0fe5a     FB D4 E5 1D 
0fe5e     25 F2 D2 ED 
0fe62     21 26 F5 D2 | 	byte	$c4, $d4, $08, $21, $fb, $d4, $e5, $1d, $25, $f2, $d2, $ed, $21, $26, $f5, $d2
0fe66     F3 29 2E FB 
0fe6a     E0 01 34 2E 
0fe6e     FC DA F8 28 
0fe72     1F E1 C9 F0 | 	byte	$f3, $29, $2e, $fb, $e0, $01, $34, $2e, $fc, $da, $f8, $28, $1f, $e1, $c9, $f0
0fe76     22 16 DB C4 
0fe7a     F0 29 21 EA 
0fe7e     D5 FF 27 0F 
0fe82     D0 DF 2C 34 | 	byte	$22, $16, $db, $c4, $f0, $29, $21, $ea, $d5, $ff, $27, $0f, $d0, $df, $2c, $34
0fe86     EC C8 F0 40 
0fe8a     38 F9 E6 09 
0fe8e     28 1B F0 FF 
0fe92     37 2E F6 C0 | 	byte	$ec, $c8, $f0, $40, $38, $f9, $e6, $09, $28, $1b, $f0, $ff, $37, $2e, $f6, $c0
0fe96     C2 14 3D FE 
0fe9a     C3 C0 F9 1F 
0fe9e     F7 D1 F2 17 
0fea2     05 CB C2 01 | 	byte	$c2, $14, $3d, $fe, $c3, $c0, $f9, $1f, $f7, $d1, $f2, $17, $05, $cb, $c2, $01
0fea6     4A 35 CB 96 
0feaa     DC 53 63 FF 
0feae     BB F1 3B 2E 
0feb2     E5 E8 37 53 | 	byte	$4a, $35, $cb, $96, $dc, $53, $63, $ff, $bb, $f1, $3b, $2e, $e5, $e8, $37, $53
0feb6     05 B1 B9 1A 
0feba     55 1A B4 AC 
0febe     F6 33 13 CF 
0fec2     E2 12 08 CA | 	byte	$05, $b1, $b9, $1a, $55, $1a, $b4, $ac, $f6, $33, $13, $cf, $e2, $12, $08, $ca
0fec6     BA 06 65 39 
0feca     CE 99 CB 35 
0fece     60 13 D8 E0 
0fed2     11 1F 0A 04 | 	byte	$ba, $06, $65, $39, $ce, $99, $cb, $35, $60, $13, $d8, $e0, $11, $1f, $0a, $04
0fed6     23 2A F6 BD 
0feda     D3 27 47 12 
0fede     BF B0 E8 1E 
0fee2     1B F0 DC F0 | 	byte	$23, $2a, $f6, $bd, $d3, $27, $47, $12, $bf, $b0, $e8, $1e, $1b, $f0, $dc, $f0
0fee6     E8 D3 D4 FD 
0feea     3C 49 FB B7 
0feee     AC F2 4B 50 
0fef2     FD C8 DF 19 | 	byte	$e8, $d3, $d4, $fd, $3c, $49, $fb, $b7, $ac, $f2, $4b, $50, $fd, $c8, $df, $19
0fef6     32 21 0D 0A 
0fefa     FF E5 D9 F7 
0fefe     2E 27 E6 B0 
0ff02     C0 00 2C 15 | 	byte	$32, $21, $0d, $0a, $ff, $e5, $d9, $f7, $2e, $27, $e6, $b0, $c0, $00, $2c, $15
0ff06     E1 C6 DC EE 
0ff0a     F5 EE FE 20 
0ff0e     15 E8 E3 E6 
0ff12     08 36 27 FE | 	byte	$e1, $c6, $dc, $ee, $f5, $ee, $fe, $20, $15, $e8, $e3, $e6, $08, $36, $27, $fe
0ff16     EC FE 29 3D 
0ff1a     24 FD F4 06 
0ff1e     17 09 00 02 
0ff22     FA E0 D1 DB | 	byte	$ec, $fe, $29, $3d, $24, $fd, $f4, $06, $17, $09, $00, $02, $fa, $e0, $d1, $db
0ff26     F8 12 F9 CF 
0ff2a     C5 E6 F8 F8 
0ff2e     DD E4 1F 3F 
0ff32     1C E6 B9 ED | 	byte	$f8, $12, $f9, $cf, $c5, $e6, $f8, $f8, $dd, $e4, $1f, $3f, $1c, $e6, $b9, $ed
0ff36     4C 58 0D D8 
0ff3a     FB 35 3D 15 
0ff3e     F8 0B 1B 02 
0ff42     DF F5 22 12 | 	byte	$4c, $58, $0d, $d8, $fb, $35, $3d, $15, $f8, $0b, $1b, $02, $df, $f5, $22, $12
0ff46     D6 B4 D5 0B 
0ff4a     23 F2 C1 D2 
0ff4e     FE F6 E0 D8 
0ff52     11 46 27 FB | 	byte	$d6, $b4, $d5, $0b, $23, $f2, $c1, $d2, $fe, $f6, $e0, $d8, $11, $46, $27, $fb
0ff56     E9 DA 1D 52 
0ff5a     3A 0B F5 0E 
0ff5e     31 34 1A 03 
0ff62     FB 05 FA ED | 	byte	$e9, $da, $1d, $52, $3a, $0b, $f5, $0e, $31, $34, $1a, $03, $fb, $05, $fa, $ed
0ff66     F9 02 EC C7 
0ff6a     C4 D2 F0 06 
0ff6e     E7 C6 D0 E5 
0ff72     E4 E3 DE 14 | 	byte	$f9, $02, $ec, $c7, $c4, $d2, $f0, $06, $e7, $c6, $d0, $e5, $e4, $e3, $de, $14
0ff76     43 2B 0A DF 
0ff7a     CA 27 6E 50 
0ff7e     0D DF 0D 4D 
0ff82     46 15 EC F6 | 	byte	$43, $2b, $0a, $df, $ca, $27, $6e, $50, $0d, $df, $0d, $4d, $46, $15, $ec, $f6
0ff86     16 F7 DA F1 
0ff8a     09 EF BB AC 
0ff8e     CB 00 10 D8 
0ff92     A8 C2 EF EA | 	byte	$16, $f7, $da, $f1, $09, $ef, $bb, $ac, $cb, $00, $10, $d8, $a8, $c2, $ef, $ea
0ff96     D4 DB 25 43 
0ff9a     19 FB DC E5 
0ff9e     4C 68 39 F8 
0ffa2     FA 30 52 39 | 	byte	$d4, $db, $25, $43, $19, $fb, $dc, $e5, $4c, $68, $39, $f8, $fa, $30, $52, $39
0ffa6     08 F6 01 16 
0ffaa     F5 E3 F9 03 
0ffae     DC B5 BE DE 
0ffb2     04 F1 B9 B1 | 	byte	$08, $f6, $01, $16, $f5, $e3, $f9, $03, $dc, $b5, $be, $de, $04, $f1, $b9, $b1
0ffb6     E5 EF DA C3 
0ffba     EE 3E 42 0D 
0ffbe     EE D9 11 60 
0ffc2     5D 26 F6 0C | 	byte	$e5, $ef, $da, $c3, $ee, $3e, $42, $0d, $ee, $d9, $11, $60, $5d, $26, $f6, $0c
0ffc6     3F 4F 2A 08 
0ffca     F8 02 08 E9 
0ffce     F3 04 EC B3 
0ffd2     AB CD EF FB | 	byte	$3f, $4f, $2a, $08, $f8, $02, $08, $e9, $f3, $04, $ec, $b3, $ab, $cd, $ef, $fb
0ffd6     CD A7 B8 F5 
0ffda     E6 C1 BA 10 
0ffde     55 2B F5 F1 
0ffe2     ED 37 60 4A | 	byte	$cd, $a7, $b8, $f5, $e6, $c1, $ba, $10, $55, $2b, $f5, $f1, $ed, $37, $60, $4a
0ffe6     22 09 25 42 
0ffea     49 2B 11 F1 
0ffee     00 0B FD 00 
0fff2     F3 CE AC CA | 	byte	$22, $09, $25, $42, $49, $2b, $11, $f1, $00, $0b, $fd, $00, $f3, $ce, $ac, $ca
0fff6     DB E8 E0 B6 
0fffa     AB D1 F0 DE 
0fffe     CD DF 19 1D 
10002     0E 30 39 E2 | 	byte	$db, $e8, $e0, $b6, $ab, $d1, $f0, $de, $cd, $df, $19, $1d, $0e, $30, $39, $e2
10006     F5 44 78 63 
1000a     09 F3 35 74 
1000e     4C 09 D2 14 
10012     2A 05 E0 DA | 	byte	$f5, $44, $78, $63, $09, $f3, $35, $74, $4c, $09, $d2, $14, $2a, $05, $e0, $da
10016     F1 D2 C4 AC 
1001a     E3 F7 D3 9A 
1001e     AC E6 E7 C4 
10022     C8 0B 2F 26 | 	byte	$f1, $d2, $c4, $ac, $e3, $f7, $d3, $9a, $ac, $e6, $e7, $c4, $c8, $0b, $2f, $26
10026     23 EC D8 44 
1002a     74 67 08 03 
1002e     31 6C 57 20 
10032     F1 01 3A 00 | 	byte	$23, $ec, $d8, $44, $74, $67, $08, $03, $31, $6c, $57, $20, $f1, $01, $3a, $00
10036     F0 DD F5 C2 
1003a     B5 C0 CF EA 
1003e     C4 9F A1 E6 
10042     ED BF A2 F0 | 	byte	$f0, $dd, $f5, $c2, $b5, $c0, $cf, $ea, $c4, $9f, $a1, $e6, $ed, $bf, $a2, $f0
10046     44 34 F4 21 
1004a     FC EF 4B 69 
1004e     73 19 04 0D 
10052     71 67 34 CA | 	byte	$44, $34, $f4, $21, $fc, $ef, $4b, $69, $73, $19, $04, $0d, $71, $67, $34, $ca
10056     DA 3D 14 F8 
1005a     C0 D3 BA E0 
1005e     BE BF D2 CC 
10062     AC A9 DD DB | 	byte	$da, $3d, $14, $f8, $c0, $d3, $ba, $e0, $be, $bf, $d2, $cc, $ac, $a9, $dd, $db
10066     C2 C7 FE 08 
1006a     1E 3C 48 B9 
1006e     BE 3D 7F 6C 
10072     EC CE 33 7F | 	byte	$c2, $c7, $fe, $08, $1e, $3c, $48, $b9, $be, $3d, $7f, $6c, $ec, $ce, $33, $7f
10076     6D 0B A5 16 
1007a     60 28 D4 C1 
1007e     F4 DC D7 9F 
10082     DB F6 D9 91 | 	byte	$6d, $0b, $a5, $16, $60, $28, $d4, $c1, $f4, $dc, $d7, $9f, $db, $f6, $d9, $91
10086     A2 F7 0D B2 
1008a     A2 FC 5B 50 
1008e     19 D9 C8 52 
10092     7E 6E FA E8 | 	byte	$a2, $f7, $0d, $b2, $a2, $fc, $5b, $50, $19, $d9, $c8, $52, $7e, $6e, $fa, $e8
10096     2B 7F 72 31 
1009a     E5 DC 4E 30 
1009e     09 CD E3 C0 
100a2     C1 D5 D4 DD | 	byte	$2b, $7f, $72, $31, $e5, $dc, $4e, $30, $09, $cd, $e3, $c0, $c1, $d5, $d4, $dd
100a6     B3 A2 9D F1 
100aa     04 B7 92 E9 
100ae     40 34 F2 2E 
100b2     15 D5 28 6A | 	byte	$b3, $a2, $9d, $f1, $04, $b7, $92, $e9, $40, $34, $f2, $2e, $15, $d5, $28, $6a
100b6     76 1C E6 F7 
100ba     78 74 2B B7 
100be     C9 50 4A 03 
100c2     9E B0 CB 16 | 	byte	$76, $1c, $e6, $f7, $78, $74, $2b, $b7, $c9, $50, $4a, $03, $9e, $b0, $cb, $16
100c6     D9 A7 A4 C6 
100ca     CD B0 CE D3 
100ce     AC BD FD 15 
100d2     1C 28 31 A9 | 	byte	$d9, $a7, $a4, $c6, $cd, $b0, $ce, $d3, $ac, $bd, $fd, $15, $1c, $28, $31, $a9
100d6     CF 4C 7F 4A 
100da     C1 C9 4A 7F 
100de     59 D6 98 2F 
100e2     79 39 9F 8E | 	byte	$cf, $4c, $7f, $4a, $c1, $c9, $4a, $7f, $59, $d6, $98, $2f, $79, $39, $9f, $8e
100e6     D1 1A 11 AB 
100ea     99 B7 DF BA 
100ee     C6 E2 D4 9A 
100f2     C4 35 63 0E | 	byte	$d1, $1a, $11, $ab, $99, $b7, $df, $ba, $c6, $e2, $d4, $9a, $c4, $35, $63, $0e
100f6     F6 E2 E4 5B 
100fa     7B 61 ED ED 
100fe     34 7F 6D 18 
10102     C1 E2 75 5D | 	byte	$f6, $e2, $e4, $5b, $7b, $61, $ed, $ed, $34, $7f, $6d, $18, $c1, $e2, $75, $5d
10106     F4 8F C0 ED 
1010a     2B E8 9F 95 
1010e     C4 E8 D8 D1 
10112     BC A8 C8 18 | 	byte	$f4, $8f, $c0, $ed, $2b, $e8, $9f, $95, $c4, $e8, $d8, $d1, $bc, $a8, $c8, $18
10116     25 05 EF 4E 
1011a     06 C9 0A 7C 
1011e     75 0D C8 08 
10122     7F 7B 1F A1 | 	byte	$25, $05, $ef, $4e, $06, $c9, $0a, $7c, $75, $0d, $c8, $08, $7f, $7b, $1f, $a1
10126     D2 74 6F F3 
1012a     84 A7 13 66 
1012e     EA 86 8E EA 
10132     30 E5 9D 9A | 	byte	$d2, $74, $6f, $f3, $84, $a7, $13, $66, $ea, $86, $8e, $ea, $30, $e5, $9d, $9a
10136     BE FD 1E 0A 
1013a     E1 FC 37 E7 
1013e     E4 24 7D 49 
10142     EC E7 4C 7E | 	byte	$be, $fd, $1e, $0a, $e1, $fc, $37, $e7, $e4, $24, $7d, $49, $ec, $e7, $4c, $7e
10146     49 E4 AB 38 
1014a     77 35 A1 89 
1014e     F0 43 25 9F 
10152     86 BD 27 0A | 	byte	$49, $e4, $ab, $38, $77, $35, $a1, $89, $f0, $43, $25, $9f, $86, $bd, $27, $0a
10156     B0 99 BB ED 
1015a     19 10 ED D6 
1015e     1F 47 EC D7 
10162     19 76 46 00 | 	byte	$b0, $99, $bb, $ed, $19, $10, $ed, $d6, $1f, $47, $ec, $d7, $19, $76, $46, $00
10166     D7 23 6F 53 
1016a     FC B1 15 5C 
1016e     3A C8 9D D8 
10172     2D 2C BE 91 | 	byte	$d7, $23, $6f, $53, $fc, $b1, $15, $5c, $3a, $c8, $9d, $d8, $2d, $2c, $be, $91
10176     B9 15 14 C0 
1017a     9C B4 F1 21 
1017e     FF CC D5 34 
10182     4C DC BE 13 | 	byte	$b9, $15, $14, $c0, $9c, $b4, $f1, $21, $ff, $cc, $d5, $34, $4c, $dc, $be, $13
10186     7A 54 F5 BE 
1018a     21 76 53 DF 
1018e     A4 05 65 3F 
10192     B9 86 CD 45 | 	byte	$7a, $54, $f5, $be, $21, $76, $53, $df, $a4, $05, $65, $3f, $b9, $86, $cd, $45
10196     45 BA 83 BB 
1019a     26 34 CA 8C 
1019e     A5 00 34 1A 
101a2     D2 CA 14 3D | 	byte	$45, $ba, $83, $bb, $26, $34, $ca, $8c, $a5, $00, $34, $1a, $d2, $ca, $14, $3d
101a6     07 EE 08 4B 
101aa     3C 0C F8 2A 
101ae     47 2D F0 D2 
101b2     1E 3D 0F BD | 	byte	$07, $ee, $08, $4b, $3c, $0c, $f8, $2a, $47, $2d, $f0, $d2, $1e, $3d, $0f, $bd
101b6     B0 E8 24 0E 
101ba     B7 9B D2 1C 
101be     11 CA AB CE 
101c2     15 27 01 D2 | 	byte	$b0, $e8, $24, $0e, $b7, $9b, $d2, $1c, $11, $ca, $ab, $ce, $15, $27, $01, $d2
101c6     E1 28 46 F1 
101ca     C5 F7 4D 4D 
101ce     03 C6 F8 54 
101d2     51 FC B6 F8 | 	byte	$e1, $28, $46, $f1, $c5, $f7, $4d, $4d, $03, $c6, $f8, $54, $51, $fc, $b6, $f8
101d6     50 42 DC A8 
101da     D8 43 45 D8 
101de     91 C8 3A 44 
101e2     D9 9B C6 26 | 	byte	$50, $42, $dc, $a8, $d8, $43, $45, $d8, $91, $c8, $3a, $44, $d9, $9b, $c6, $26
101e6     3A FF C0 D5 
101ea     26 41 F6 B7 
101ee     E1 36 53 0B 
101f2     D3 E7 48 55 | 	byte	$3a, $ff, $c0, $d5, $26, $41, $f6, $b7, $e1, $36, $53, $0b, $d3, $e7, $48, $55
101f6     12 CB FB 4C 
101fa     39 E6 BD E8 
101fe     30 29 D9 A4 
10202     D1 20 28 D9 | 	byte	$12, $cb, $fb, $4c, $39, $e6, $bd, $e8, $30, $29, $d9, $a4, $d1, $20, $28, $d9
10206     AE CA 19 28 
1020a     F4 D1 E7 13 
1020e     13 F6 D3 EA 
10212     0F 32 24 EC | 	byte	$ae, $ca, $19, $28, $f4, $d1, $e7, $13, $13, $f6, $d3, $ea, $0f, $32, $24, $ec
10216     E6 15 49 2A 
1021a     01 F0 21 2E 
1021e     18 F2 E7 08 
10222     12 F7 D7 D9 | 	byte	$e6, $15, $49, $2a, $01, $f0, $21, $2e, $18, $f2, $e7, $08, $12, $f7, $d7, $d9
10226     F4 08 F4 D2 
1022a     D2 ED 10 02 
1022e     E7 E8 F6 03 
10232     03 F2 E4 F7 | 	byte	$f4, $08, $f4, $d2, $d2, $ed, $10, $02, $e7, $e8, $f6, $03, $03, $f2, $e4, $f7
10236     18 26 0C F3 
1023a     04 2A 33 1C 
1023e     0C 10 1C 22 
10242     16 04 F8 FA | 	byte	$18, $26, $0c, $f3, $04, $2a, $33, $1c, $0c, $10, $1c, $22, $16, $04, $f8, $fa
10246     FE F4 EF ED 
1024a     EF EB E8 E4 
1024e     EE F6 F6 EF 
10252     F6 FB F3 F1 | 	byte	$fe, $f4, $ef, $ed, $ef, $eb, $e8, $e4, $ee, $f6, $f6, $ef, $f6, $fb, $f3, $f1
10256     F0 F2 FF 10 
1025a     0B 02 06 1C 
1025e     21 1B 16 1E 
10262     23 21 1F 13 | 	byte	$f0, $f2, $ff, $10, $0b, $02, $06, $1c, $21, $1b, $16, $1e, $23, $21, $1f, $13
10266     09 02 01 FF 
1026a     F6 EC E7 ED 
1026e     F0 EA DE E2 
10272     F0 FA F9 F4 | 	byte	$09, $02, $01, $ff, $f6, $ec, $e7, $ed, $f0, $ea, $de, $e2, $f0, $fa, $f9, $f4
10276     EE F9 00 FE 
1027a     EC EC FD 08 
1027e     02 F5 02 0D 
10282     17 13 11 09 | 	byte	$ee, $f9, $00, $fe, $ec, $ec, $fd, $08, $02, $f5, $02, $0d, $17, $13, $11, $09
10286     12 1B 1A 08 
1028a     F5 00 04 FF 
1028e     E8 E4 EB F3 
10292     E6 D6 D6 E8 | 	byte	$12, $1b, $1a, $08, $f5, $00, $04, $ff, $e8, $e4, $eb, $f3, $e6, $d6, $d6, $e8
10296     F5 F2 E6 E2 
1029a     F5 09 04 EA 
1029e     E9 FC 0D 02 
102a2     F4 F7 07 15 | 	byte	$f5, $f2, $e6, $e2, $f5, $09, $04, $ea, $e9, $fc, $0d, $02, $f4, $f7, $07, $15
102a6     16 0B FF 0D 
102aa     1B 1F 10 01 
102ae     04 0C 0C F8 
102b2     EC EF FB F6 | 	byte	$16, $0b, $ff, $0d, $1b, $1f, $10, $01, $04, $0c, $0c, $f8, $ec, $ef, $fb, $f6
102b6     E3 DC E6 F6 
102ba     F9 E8 DC EE 
102be     07 0E F4 EB 
102c2     F6 06 02 F7 | 	byte	$e3, $dc, $e6, $f6, $f9, $e8, $dc, $ee, $07, $0e, $f4, $eb, $f6, $06, $02, $f7
102c6     EE F5 06 0D 
102ca     08 FB 01 14 
102ce     1F 13 07 0B 
102d2     18 1C 0B FD | 	byte	$ee, $f5, $06, $0d, $08, $fb, $01, $14, $1f, $13, $07, $0b, $18, $1c, $0b, $fd
102d6     FB 05 01 F2 
102da     E9 EE FB FD 
102de     EA E1 ED 02 
102e2     06 F5 F2 FD | 	byte	$fb, $05, $01, $f2, $e9, $ee, $fb, $fd, $ea, $e1, $ed, $02, $06, $f5, $f2, $fd
102e6     0C 0B 04 F5 
102ea     F8 04 0F 02 
102ee     F2 FB 0D 14 
102f2     07 FE 04 17 | 	byte	$0c, $0b, $04, $f5, $f8, $04, $0f, $02, $f2, $fb, $0d, $14, $07, $fe, $04, $17
102f6     1A 0F 06 0C 
102fa     14 10 03 F9 
102fe     FD 08 09 F6 
10302     E9 EC FE 06 | 	byte	$1a, $0f, $06, $0c, $14, $10, $03, $f9, $fd, $08, $09, $f6, $e9, $ec, $fe, $06
10306     F9 EC F2 03 
1030a     09 08 00 00 
1030e     09 15 0B FC 
10312     F3 FD 06 01 | 	byte	$f9, $ec, $f2, $03, $09, $08, $00, $00, $09, $15, $0b, $fc, $f3, $fd, $06, $01
10316     F7 F4 FE 08 
1031a     0C 04 04 0D 
1031e     13 12 0B 08 
10322     0E 12 07 FA | 	byte	$f7, $f4, $fe, $08, $0c, $04, $04, $0d, $13, $12, $0b, $08, $0e, $12, $07, $fa
10326     F9 03 05 FB 
1032a     ED EC F9 04 
1032e     FD F0 EB FC 
10332     13 07 F3 EF | 	byte	$f9, $03, $05, $fb, $ed, $ec, $f9, $04, $fd, $f0, $eb, $fc, $13, $07, $f3, $ef
10336     01 0B 00 EB 
1033a     E3 F0 FA F5 
1033e     E8 E4 F6 0B 
10342     0C F8 FA 10 | 	byte	$01, $0b, $00, $eb, $e3, $f0, $fa, $f5, $e8, $e4, $f6, $0b, $0c, $f8, $fa, $10
10346     1F 15 08 09 
1034a     12 19 15 FE 
1034e     F8 04 0B FF 
10352     EA E9 FA 08 | 	byte	$1f, $15, $08, $09, $12, $19, $15, $fe, $f8, $04, $0b, $ff, $ea, $e9, $fa, $08
10356     F4 E3 E4 FA 
1035a     04 F9 ED EF 
1035e     FC 04 F4 E7 
10362     E8 F5 F6 ED | 	byte	$f4, $e3, $e4, $fa, $04, $f9, $ed, $ef, $fc, $04, $f4, $e7, $e8, $f5, $f6, $ed
10366     EA F2 FF 07 
1036a     00 01 10 1D 
1036e     1C 15 11 18 
10372     1D 1C 14 08 | 	byte	$ea, $f2, $ff, $07, $00, $01, $10, $1d, $1c, $15, $11, $18, $1d, $1c, $14, $08
10376     05 0E 0E F8 
1037a     EC EC F4 F4 
1037e     EC E7 E6 EF 
10382     F4 F1 EC EE | 	byte	$05, $0e, $0e, $f8, $ec, $ec, $f4, $f4, $ec, $e7, $e6, $ef, $f4, $f1, $ec, $ee
10386     F7 FB F2 ED 
1038a     F0 EF F2 F0 
1038e     F1 F6 FF 03 
10392     04 05 0C 1A | 	byte	$f7, $fb, $f2, $ed, $f0, $ef, $f2, $f0, $f1, $f6, $ff, $03, $04, $05, $0c, $1a
10396     22 19 13 1A 
1039a     26 22 13 05 
1039e     03 08 08 F7 
103a2     E3 E2 F0 F4 | 	byte	$22, $19, $13, $1a, $26, $22, $13, $05, $03, $08, $08, $f7, $e3, $e2, $f0, $f4
103a6     E8 DF DE EC 
103aa     F7 F4 EF EF 
103ae     FA 05 00 F9 
103b2     F8 FA F9 F3 | 	byte	$e8, $df, $de, $ec, $f7, $f4, $ef, $ef, $fa, $05, $00, $f9, $f8, $fa, $f9, $f3
103b6     F0 F0 F2 F9 
103ba     FA F8 04 0E 
103be     0E 0D 0D 16 
103c2     20 1E 12 0C | 	byte	$f0, $f0, $f2, $f9, $fa, $f8, $04, $0e, $0e, $0d, $0d, $16, $20, $1e, $12, $0c
103c6     0E 12 0A FB 
103ca     F2 F4 F8 F6 
103ce     EF EC EE F5 
103d2     F4 F4 FA FB | 	byte	$0e, $12, $0a, $fb, $f2, $f4, $f8, $f6, $ef, $ec, $ee, $f5, $f4, $f4, $fa, $fb
103d6     FB 05 05 FF 
103da     01 05 03 F9 
103de     F3 F5 F5 EE 
103e2     E8 E9 F3 FA | 	byte	$fb, $05, $05, $ff, $01, $05, $03, $f9, $f3, $f5, $f5, $ee, $e8, $e9, $f3, $fa
103e6     FD F9 FF 0B 
103ea     15 17 16 16 
103ee     1A 1B 1A 15 
103f2     0F 09 05 04 | 	byte	$fd, $f9, $ff, $0b, $15, $17, $16, $16, $1a, $1b, $1a, $15, $0f, $09, $05, $04
103f6     04 02 FB F8 
103fa     F7 F7 F9 FA 
103fe     F9 FA FA FF 
10402     02 01 FD FA | 	byte	$04, $02, $fb, $f8, $f7, $f7, $f9, $fa, $f9, $fa, $fa, $ff, $02, $01, $fd, $fa
10406     F9 FB FA F5 
1040a     F1 EF F0 F1 
1040e     EF ED EF F4 
10412     FA 03 06 08 | 	byte	$f9, $fb, $fa, $f5, $f1, $ef, $f0, $f1, $ef, $ed, $ef, $f4, $fa, $03, $06, $08
10416     0B 10 17 19 
1041a     17 15 14 13 
1041e     0F 09 03 00 
10422     FC F8 F5 F4 | 	byte	$0b, $10, $17, $19, $17, $15, $14, $13, $0f, $09, $03, $00, $fc, $f8, $f5, $f4
10426     F3 EE ED EF 
1042a     F3 F4 F2 F1 
1042e     F5 FA FD F9 
10432     F6 F4 F7 FE | 	byte	$f3, $ee, $ed, $ef, $f3, $f4, $f2, $f1, $f5, $fa, $fd, $f9, $f6, $f4, $f7, $fe
10436     00 F3 F0 F2 
1043a     F4 F3 F0 EC 
1043e     F0 F9 FE 02 
10442     03 07 11 12 | 	byte	$00, $f3, $f0, $f2, $f4, $f3, $f0, $ec, $f0, $f9, $fe, $02, $03, $07, $11, $12
10446     12 17 1B 19 
1044a     14 10 0F 0F 
1044e     08 FE F3 F3 
10452     F8 F7 EC E6 | 	byte	$12, $17, $1b, $19, $14, $10, $0f, $0f, $08, $fe, $f3, $f3, $f8, $f7, $ec, $e6
10456     EB F2 F6 F4 
1045a     F3 F4 FD 04 
1045e     05 FF FC 04 
10462     06 04 FE FC | 	byte	$eb, $f2, $f6, $f4, $f3, $f4, $fd, $04, $05, $ff, $fc, $04, $06, $04, $fe, $fc
10466     FD F9 F6 F5 
1046a     F6 F3 ED EB 
1046e     EF F4 F7 F5 
10472     F6 01 0B 11 | 	byte	$fd, $f9, $f6, $f5, $f6, $f3, $ed, $eb, $ef, $f4, $f7, $f5, $f6, $01, $0b, $11
10476     0E 0B 10 16 
1047a     18 17 0E 0B 
1047e     0C 0C 08 03 
10482     F8 F5 F7 F8 | 	byte	$0e, $0b, $10, $16, $18, $17, $0e, $0b, $0c, $0c, $08, $03, $f8, $f5, $f7, $f8
10486     F5 F2 F2 F7 
1048a     FA FD 00 01 
1048e     01 02 02 01 
10492     01 FD F8 F5 | 	byte	$f5, $f2, $f2, $f7, $fa, $fd, $00, $01, $01, $02, $02, $01, $01, $fd, $f8, $f5
10496     F5 F6 F3 EE 
1049a     EC ED EF F1 
1049e     F2 EE EC F2 
104a2     F9 FC FE FB | 	byte	$f5, $f6, $f3, $ee, $ec, $ed, $ef, $f1, $f2, $ee, $ec, $f2, $f9, $fc, $fe, $fb
104a6     06 12 17 16 
104aa     14 18 1E 21 
104ae     1E 18 15 15 
104b2     12 0B 06 02 | 	byte	$06, $12, $17, $16, $14, $18, $1e, $21, $1e, $18, $15, $15, $12, $0b, $06, $02
104b6     01 FB F6 F5 
104ba     F6 F6 F1 F0 
104be     EF F3 F5 F4 
104c2     F0 F0 F5 F9 | 	byte	$01, $fb, $f6, $f5, $f6, $f6, $f1, $f0, $ef, $f3, $f5, $f4, $f0, $f0, $f5, $f9
104c6     F9 F3 EE F0 
104ca     F5 F6 F1 ED 
104ce     EF F2 F3 F2 
104d2     F1 F6 F9 FB | 	byte	$f9, $f3, $ee, $f0, $f5, $f6, $f1, $ed, $ef, $f2, $f3, $f2, $f1, $f6, $f9, $fb
104d6     FB FC FD 02 
104da     07 07 09 10 
104de     14 14 15 17 
104e2     1A 1D 1B 17 | 	byte	$fb, $fc, $fd, $02, $07, $07, $09, $10, $14, $14, $15, $17, $1a, $1d, $1b, $17
104e6     15 15 15 0E 
104ea     05 01 FE 02 
104ee     FE F5 F2 F1 
104f2     F5 F5 F0 EE | 	byte	$15, $15, $15, $0e, $05, $01, $fe, $02, $fe, $f5, $f2, $f1, $f5, $f5, $f0, $ee
104f6     F0 F2 F4 F2 
104fa     F0 EF F1 F4 
104fe     F0 EE EE F2 
10502     F4 F3 F1 F6 | 	byte	$f0, $f2, $f4, $f2, $f0, $ef, $f1, $f4, $f0, $ee, $ee, $f2, $f4, $f3, $f1, $f6
10506     F9 FA FB FC 
1050a     03 09 0B 09 
1050e     07 08 0B 0B 
10512     09 06 05 05 | 	byte	$f9, $fa, $fb, $fc, $03, $09, $0b, $09, $07, $08, $0b, $0b, $09, $06, $05, $05
10516     09 0A 07 07 
1051a     09 0A 0B 0A 
1051e     09 0A 0A 08 
10522     05 01 FF FB | 	byte	$09, $0a, $07, $07, $09, $0a, $0b, $0a, $09, $0a, $0a, $08, $05, $01, $ff, $fb
10526     F9 F6 F4 F4 
1052a     F2 F0 F0 F2 
1052e     F6 F7 F7 F9 
10532     FD 02 04 03 | 	byte	$f9, $f6, $f4, $f4, $f2, $f0, $f0, $f2, $f6, $f7, $f7, $f9, $fd, $02, $04, $03
10536     02 02 05 05 
1053a     03 FC FA FA 
1053e     FA F8 F4 F2 
10542     F3 F5 F5 F4 | 	byte	$02, $02, $05, $05, $03, $fc, $fa, $fa, $fa, $f8, $f4, $f2, $f3, $f5, $f5, $f4
10546     F5 F6 F9 FF 
1054a     FD FD 00 01 
1054e     00 FC FD 01 
10552     02 03 05 08 | 	byte	$f5, $f6, $f9, $ff, $fd, $fd, $00, $01, $00, $fc, $fd, $01, $02, $03, $05, $08
10556     0C 0C 0D 0E 
1055a     11 12 13 11 
1055e     0E 0C 0B 07 
10562     03 FE F9 F9 | 	byte	$0c, $0c, $0d, $0e, $11, $12, $13, $11, $0e, $0c, $0b, $07, $03, $fe, $f9, $f9
10566     F6 F1 EF EE 
1056a     ED EB EA EB 
1056e     EB EE EE EF 
10572     F0 F3 F6 F6 | 	byte	$f6, $f1, $ef, $ee, $ed, $eb, $ea, $eb, $eb, $ee, $ee, $ef, $f0, $f3, $f6, $f6
10576     F6 F8 FA FC 
1057a     FC FB FA FD 
1057e     FF 00 00 01 
10582     02 05 07 06 | 	byte	$f6, $f8, $fa, $fc, $fc, $fb, $fa, $fd, $ff, $00, $00, $01, $02, $05, $07, $06
10586     06 09 0A 0A 
1058a     0B 0A 08 09 
1058e     07 04 01 FD 
10592     FD FD FF 00 | 	byte	$06, $09, $0a, $0a, $0b, $0a, $08, $09, $07, $04, $01, $fd, $fd, $fd, $ff, $00
10596     03 05 06 06 
1059a     08 0A 0D 0B 
1059e     0B 0A 08 07 
105a2     05 FF FA F8 | 	byte	$03, $05, $06, $06, $08, $0a, $0d, $0b, $0b, $0a, $08, $07, $05, $ff, $fa, $f8
105a6     F8 F6 F4 F3 
105aa     F1 F2 F4 F4 
105ae     F4 F3 F5 F8 
105b2     F9 F8 F6 F8 | 	byte	$f8, $f6, $f4, $f3, $f1, $f2, $f4, $f4, $f4, $f3, $f5, $f8, $f9, $f8, $f6, $f8
105b6     F8 F8 F9 FA 
105ba     FC FB FB FC 
105be     FF 02 02 02 
105c2     03 06 09 09 | 	byte	$f8, $f8, $f9, $fa, $fc, $fb, $fb, $fc, $ff, $02, $02, $02, $03, $06, $09, $09
105c6     06 05 07 07 
105ca     07 07 05 07 
105ce     07 0A 09 09 
105d2     09 09 08 05 | 	byte	$06, $05, $07, $07, $07, $07, $05, $07, $07, $0a, $09, $09, $09, $09, $08, $05
105d6     03 01 03 05 
105da     05 05 06 06 
105de     08 09 09 09 
105e2     09 09 09 05 | 	byte	$03, $01, $03, $05, $05, $05, $06, $06, $08, $09, $09, $09, $09, $09, $09, $05
105e6     01 00 FC F8 
105ea     F5 F1 EE ED 
105ee     EB EA E9 EB 
105f2     ED F0 F1 F4 | 	byte	$01, $00, $fc, $f8, $f5, $f1, $ee, $ed, $eb, $ea, $e9, $eb, $ed, $f0, $f1, $f4
105f6     F7 F9 FB FC 
105fa     FF 02 04 05 
105fe     02 01 00 01 
10602     02 FD FD FC | 	byte	$f7, $f9, $fb, $fc, $ff, $02, $04, $05, $02, $01, $00, $01, $02, $fd, $fd, $fc
10606     FD 00 FD FD 
1060a     03 06 06 04 
1060e     05 07 07 09 
10612     07 06 05 06 | 	byte	$fd, $00, $fd, $fd, $03, $06, $06, $04, $05, $07, $07, $09, $07, $06, $05, $06
10616     03 01 FE FE 
1061a     FD FB F9 F7 
1061e     F6 F4 F4 F3 
10622     F5 F5 F7 F8 | 	byte	$03, $01, $fe, $fe, $fd, $fb, $f9, $f7, $f6, $f4, $f4, $f3, $f5, $f5, $f7, $f8
10626     FB FC 02 03 
1062a     02 05 07 08 
1062e     06 04 01 00 
10632     00 FC F9 F7 | 	byte	$fb, $fc, $02, $03, $02, $05, $07, $08, $06, $04, $01, $00, $00, $fc, $f9, $f7
10636     F6 F6 F4 F1 
1063a     F0 F2 F6 F7 
1063e     F8 F8 FB FD 
10642     01 FE 00 03 | 	byte	$f6, $f6, $f4, $f1, $f0, $f2, $f6, $f7, $f8, $f8, $fb, $fd, $01, $fe, $00, $03
10646     02 00 FE FD 
1064a     FC FC FC F9 
1064e     F8 F8 F9 FA 
10652     F8 F8 F8 FA | 	byte	$02, $00, $fe, $fd, $fc, $fc, $fc, $f9, $f8, $f8, $f9, $fa, $f8, $f8, $f8, $fa
10656     FB FB FB FD 
1065a     FE FB FB FB 
1065e     FA F8 F6 F4 
10662     F0 E7 E0 E5 | 	byte	$fb, $fb, $fb, $fd, $fe, $fb, $fb, $fb, $fa, $f8, $f6, $f4, $f0, $e7, $e0, $e5
10666     F4 27 45 36 
1066a     03 C6 DD 1D 
1066e     1D 1F 15 FA 
10672     F0 DC EC 18 | 	byte	$f4, $27, $45, $36, $03, $c6, $dd, $1d, $1d, $1f, $15, $fa, $f0, $dc, $ec, $18
10676     18 FE E9 ED 
1067a     0C 17 0A 05 
1067e     03 FD E9 E3 
10682     FB 0A 00 F0 | 	byte	$18, $fe, $e9, $ed, $0c, $17, $0a, $05, $03, $fd, $e9, $e3, $fb, $0a, $00, $f0
10686     EC ED EF F8 
1068a     0A 17 11 08 
1068e     FE EE EA E7 
10692     F5 09 0C 08 | 	byte	$ec, $ed, $ef, $f8, $0a, $17, $11, $08, $fe, $ee, $ea, $e7, $f5, $09, $0c, $08
10696     FA E6 DD EE 
1069a     0A 17 0C FE 
1069e     F3 EE F0 03 
106a2     1E 2A 1B 02 | 	byte	$fa, $e6, $dd, $ee, $0a, $17, $0c, $fe, $f3, $ee, $f0, $03, $1e, $2a, $1b, $02
106a6     F4 F2 F6 02 
106aa     0A 14 1F 1D 
106ae     12 0D 17 18 
106b2     06 F6 F5 01 | 	byte	$f4, $f2, $f6, $02, $0a, $14, $1f, $1d, $12, $0d, $17, $18, $06, $f6, $f5, $01
106b6     05 FE F8 F9 
106ba     F9 FD 0B 14 
106be     10 FA EC E7 
106c2     ED F8 02 FD | 	byte	$05, $fe, $f8, $f9, $f9, $fd, $0b, $14, $10, $fa, $ec, $e7, $ed, $f8, $02, $fd
106c6     F0 E4 E0 F0 
106ca     08 1B 23 21 
106ce     01 C9 CD 04 
106d2     30 2F 06 DB | 	byte	$f0, $e4, $e0, $f0, $08, $1b, $23, $21, $01, $c9, $cd, $04, $30, $2f, $06, $db
106d6     D6 ED 1D 36 
106da     07 C5 B0 B9 
106de     F1 36 44 25 
106e2     EF CE CE DB | 	byte	$d6, $ed, $1d, $36, $07, $c5, $b0, $b9, $f1, $36, $44, $25, $ef, $ce, $ce, $db
106e6     EE 0F 26 1B 
106ea     FB D9 D4 F8 
106ee     27 32 1C 08 
106f2     02 15 2E 34 | 	byte	$ee, $0f, $26, $1b, $fb, $d9, $d4, $f8, $27, $32, $1c, $08, $02, $15, $2e, $34
106f6     28 10 FD F4 
106fa     F7 10 19 12 
106fe     07 F7 E8 DE 
10702     E2 EA F2 EA | 	byte	$28, $10, $fd, $f4, $f7, $10, $19, $12, $07, $f7, $e8, $de, $e2, $ea, $f2, $ea
10706     D9 D3 D9 EF 
1070a     01 F3 E6 E1 
1070e     E2 F5 08 0B 
10712     FD F2 EF F1 | 	byte	$d9, $d3, $d9, $ef, $01, $f3, $e6, $e1, $e2, $f5, $08, $0b, $fd, $f2, $ef, $f1
10716     F7 FB FA 02 
1071a     00 EE E6 EC 
1071e     FB 10 0F F9 
10722     F4 01 1D 35 | 	byte	$f7, $fb, $fa, $02, $00, $ee, $e6, $ec, $fb, $10, $0f, $f9, $f4, $01, $1d, $35
10726     30 1C 13 17 
1072a     29 35 37 27 
1072e     19 0F 0D 16 
10732     1D 09 E9 DF | 	byte	$30, $1c, $13, $17, $29, $35, $37, $27, $19, $0f, $0d, $16, $1d, $09, $e9, $df
10736     E2 FB F9 E6 
1073a     DF DB D9 E7 
1073e     EF EB E5 E9 
10742     ED F2 F1 EC | 	byte	$e2, $fb, $f9, $e6, $df, $db, $d9, $e7, $ef, $eb, $e5, $e9, $ed, $f2, $f1, $ec
10746     ED F3 EF E4 
1074a     E2 EA F0 ED 
1074e     F5 F3 F4 00 
10752     00 06 10 16 | 	byte	$ed, $f3, $ef, $e4, $e2, $ea, $f0, $ed, $f5, $f3, $f4, $00, $00, $06, $10, $16
10756     0C 18 19 27 
1075a     31 1F 1E 14 
1075e     13 20 27 0D 
10762     04 F8 F0 F8 | 	byte	$0c, $18, $19, $27, $31, $1f, $1e, $14, $13, $20, $27, $0d, $04, $f8, $f0, $f8
10766     FC FD FC F3 
1076a     E5 EE F9 FD 
1076e     06 F9 E0 DF 
10772     D3 D2 1D 1B | 	byte	$fc, $fd, $fc, $f3, $e5, $ee, $f9, $fd, $06, $f9, $e0, $df, $d3, $d2, $1d, $1b
10776     04 DF D6 01 
1077a     0D FF EF FA 
1077e     13 18 E8 D4 
10782     13 30 11 09 | 	byte	$04, $df, $d6, $01, $0d, $ff, $ef, $fa, $13, $18, $e8, $d4, $13, $30, $11, $09
10786     EE 22 1C 08 
1078a     F6 04 17 1C 
1078e     FD DE 08 17 
10792     FB E0 DE E2 | 	byte	$ee, $22, $1c, $08, $f6, $04, $17, $1c, $fd, $de, $08, $17, $fb, $e0, $de, $e2
10796     16 FC D9 E5 
1079a     EF 00 FF DF 
1079e     FB 1A F6 DE 
107a2     E2 EE 0B 06 | 	byte	$16, $fc, $d9, $e5, $ef, $00, $ff, $df, $fb, $1a, $f6, $de, $e2, $ee, $0b, $06
107a6     D9 E7 27 23 
107aa     08 D0 03 4A 
107ae     1F 13 F5 37 
107b2     55 22 EC 01 | 	byte	$d9, $e7, $27, $23, $08, $d0, $03, $4a, $1f, $13, $f5, $37, $55, $22, $ec, $01
107b6     32 3A 14 E0 
107ba     F0 24 03 DE 
107be     E5 E0 16 02 
107c2     C8 DD 00 F9 | 	byte	$32, $3a, $14, $e0, $f0, $24, $03, $de, $e5, $e0, $16, $02, $c8, $dd, $00, $f9
107c6     FB D3 E6 13 
107ca     06 E1 E4 F3 
107ce     04 04 E7 FD 
107d2     26 1F DA CA | 	byte	$fb, $d3, $e6, $13, $06, $e1, $e4, $f3, $04, $04, $e7, $fd, $26, $1f, $da, $ca
107d6     14 29 2C E5 
107da     05 32 20 F9 
107de     EE 0D 3D 20 
107e2     DC E1 0F 1A | 	byte	$14, $29, $2c, $e5, $05, $32, $20, $f9, $ee, $0d, $3d, $20, $dc, $e1, $0f, $1a
107e6     EA E2 D0 14 
107ea     1B D8 CD F7 
107ee     FD 0F ED D0 
107f2     00 1F F3 D1 | 	byte	$ea, $e2, $d0, $14, $1b, $d8, $cd, $f7, $fd, $0f, $ed, $d0, $00, $1f, $f3, $d1
107f6     EB FC 12 1B 
107fa     F7 FE E5 E4 
107fe     17 0B 22 02 
10802     FA 25 0E F0 | 	byte	$eb, $fc, $12, $1b, $f7, $fe, $e5, $e4, $17, $0b, $22, $02, $fa, $25, $0e, $f0
10806     09 10 26 0D 
1080a     D1 E2 1A 0D 
1080e     DF F1 D3 FB 
10812     0E C3 D2 12 | 	byte	$09, $10, $26, $0d, $d1, $e2, $1a, $0d, $df, $f1, $d3, $fb, $0e, $c3, $d2, $12
10816     F1 FD E4 D5 
1081a     06 0A D9 F2 
1081e     FF 0D 20 0F 
10822     00 DC 13 31 | 	byte	$f1, $fd, $e4, $d5, $06, $0a, $d9, $f2, $ff, $0d, $20, $0f, $00, $dc, $13, $31
10826     13 0D EE 2E 
1082a     4A 12 E3 00 
1082e     22 33 04 D1 
10832     E6 25 F6 C1 | 	byte	$13, $0d, $ee, $2e, $4a, $12, $e3, $00, $22, $33, $04, $d1, $e6, $25, $f6, $c1
10836     D3 E0 15 FA 
1083a     B0 CC FF F2 
1083e     F9 D5 DE 11 
10842     F7 D1 F2 1A | 	byte	$d3, $e0, $15, $fa, $b0, $cc, $ff, $f2, $f9, $d5, $de, $11, $f7, $d1, $f2, $1a
10846     2D 24 03 C1 
1084a     0F 50 14 19 
1084e     F5 30 5A 04 
10852     D4 1E 4A 49 | 	byte	$2d, $24, $03, $c1, $0f, $50, $14, $19, $f5, $30, $5a, $04, $d4, $1e, $4a, $49
10856     F8 C5 FA 41 
1085a     03 B6 DD F2 
1085e     17 EF 9E D5 
10862     0F DE E1 BE | 	byte	$f8, $c5, $fa, $41, $03, $b6, $dd, $f2, $17, $ef, $9e, $d5, $0f, $de, $e1, $be
10866     D6 0A E2 C4 
1086a     E0 0F 27 12 
1086e     F1 C0 31 49 
10872     0C 03 FE 56 | 	byte	$d6, $0a, $e2, $c4, $e0, $0f, $27, $12, $f1, $c0, $31, $49, $0c, $03, $fe, $56
10876     54 F6 EC 31 
1087a     55 32 CE E7 
1087e     2F 31 E1 CF 
10882     EF 13 10 C9 | 	byte	$54, $f6, $ec, $31, $55, $32, $ce, $e7, $2f, $31, $e1, $cf, $ef, $13, $10, $c9
10886     BA 00 EC E6 
1088a     DE D2 F6 F9 
1088e     D2 E0 0C 15 
10892     05 EA CF 2F | 	byte	$ba, $00, $ec, $e6, $de, $d2, $f6, $f9, $d2, $e0, $0c, $15, $05, $ea, $cf, $2f
10896     3A 01 F4 09 
1089a     5A 4C ED EB 
1089e     34 4F 2C CB 
108a2     EF 30 2D D3 | 	byte	$3a, $01, $f4, $09, $5a, $4c, $ed, $eb, $34, $4f, $2c, $cb, $ef, $30, $2d, $d3
108a6     D5 EE 1A 11 
108aa     BD C6 08 E0 
108ae     D9 DB C7 E9 
108b2     F7 C2 E7 1E | 	byte	$d5, $ee, $1a, $11, $bd, $c6, $08, $e0, $d9, $db, $c7, $e9, $f7, $c2, $e7, $1e
108b6     FC EF CE FB 
108ba     57 0C F5 F7 
108be     5D 66 02 D6 
108c2     33 60 51 E1 | 	byte	$fc, $ef, $ce, $fb, $57, $0c, $f5, $f7, $5d, $66, $02, $d6, $33, $60, $51, $e1
108c6     D2 3C 49 D7 
108ca     BA F3 19 21 
108ce     CF A7 08 0D 
108d2     CB DA C6 DA | 	byte	$d2, $3c, $49, $d7, $ba, $f3, $19, $21, $cf, $a7, $08, $0d, $cb, $da, $c6, $da
108d6     08 C9 D2 17 
108da     04 E6 C5 04 
108de     37 0F F7 E9 
108e2     4C 5E EC DF | 	byte	$08, $c9, $d2, $17, $04, $e6, $c5, $04, $37, $0f, $f7, $e9, $4c, $5e, $ec, $df
108e6     27 55 49 F1 
108ea     D3 28 3F DD 
108ee     BB FC 19 16 
108f2     E5 B4 06 0F | 	byte	$27, $55, $49, $f1, $d3, $28, $3f, $dd, $bb, $fc, $19, $16, $e5, $b4, $06, $0f
108f6     D8 E1 DA E8 
108fa     07 DA F5 0B 
108fe     08 E3 CB 36 
10902     17 F5 F4 06 | 	byte	$d8, $e1, $da, $e8, $07, $da, $f5, $0b, $08, $e3, $cb, $36, $17, $f5, $f4, $06
10906     6B 29 C5 F6 
1090a     4B 4E 05 BD 
1090e     F1 41 1C 9E 
10912     B9 24 1E EF | 	byte	$6b, $29, $c5, $f6, $4b, $4e, $05, $bd, $f1, $41, $1c, $9e, $b9, $24, $1e, $ef
10916     AA B9 2C FB 
1091a     BF CD E0 22 
1091e     F8 D1 1B 13 
10922     04 B9 18 3E | 	byte	$aa, $b9, $2c, $fb, $bf, $cd, $e0, $22, $f8, $d1, $1b, $13, $04, $b9, $18, $3e
10926     FA FB EE 47 
1092a     56 DA CD 39 
1092e     4D 29 BB D8 
10932     33 1F B6 B0 | 	byte	$fa, $fb, $ee, $47, $56, $da, $cd, $39, $4d, $29, $bb, $d8, $33, $1f, $b6, $b0
10936     FD 1F F3 BD 
1093a     B3 0B 08 D1 
1093e     D0 E0 12 00 
10942     F3 0A 17 05 | 	byte	$fd, $1f, $f3, $bd, $b3, $0b, $08, $d1, $d0, $e0, $12, $00, $f3, $0a, $17, $05
10946     CE 38 2E 0B 
1094a     14 15 6F 49 
1094e     DB F5 50 4F 
10952     1A C9 F0 38 | 	byte	$ce, $38, $2e, $0b, $14, $15, $6f, $49, $db, $f5, $50, $4f, $1a, $c9, $f0, $38
10956     11 B0 B9 00 
1095a     13 E4 B7 B7 
1095e     FE F2 C0 BC 
10962     DC 09 FE FA | 	byte	$11, $b0, $b9, $00, $13, $e4, $b7, $b7, $fe, $f2, $c0, $bc, $dc, $09, $fe, $fa
10966     EC 03 E9 EB 
1096a     48 02 10 0E 
1096e     35 6C 0E D4 
10972     28 53 3E 02 | 	byte	$ec, $03, $e9, $eb, $48, $02, $10, $0e, $35, $6c, $0e, $d4, $28, $53, $3e, $02
10976     D0 18 36 F2 
1097a     AD D8 0D 05 
1097e     DC AC C5 01 
10982     E1 C5 C0 D6 | 	byte	$d0, $18, $36, $f2, $ad, $d8, $0d, $05, $dc, $ac, $c5, $01, $e1, $c5, $c0, $d6
10986     ED 0B 01 E8 
1098a     F6 D1 2A 3F 
1098e     E6 1F 18 5D 
10992     61 E8 F0 50 | 	byte	$ed, $0b, $01, $e8, $f6, $d1, $2a, $3f, $e6, $1f, $18, $5d, $61, $e8, $f0, $50
10996     3F 29 E4 F3 
1099a     38 14 C7 C9 
1099e     00 05 FA D1 
109a2     B9 EB EF CC | 	byte	$3f, $29, $e4, $f3, $38, $14, $c7, $c9, $00, $05, $fa, $d1, $b9, $eb, $ef, $cc
109a6     DC DC DC 19 
109aa     0F ED F5 D0 
109ae     29 41 E3 05 
109b2     0B 4E 56 E6 | 	byte	$dc, $dc, $dc, $19, $0f, $ed, $f5, $d0, $29, $41, $e3, $05, $0b, $4e, $56, $e6
109b6     E4 49 45 2A 
109ba     F5 E7 2F 21 
109be     DB CE 01 FD 
109c2     EB E8 CF DF | 	byte	$e4, $49, $45, $2a, $f5, $e7, $2f, $21, $db, $ce, $01, $fd, $eb, $e8, $cf, $df
109c6     EC C4 E1 F4 
109ca     CA FE 22 07 
109ce     0A AA DC 47 
109d2     11 33 04 FE | 	byte	$ec, $c4, $e1, $f4, $ca, $fe, $22, $07, $0a, $aa, $dc, $47, $11, $33, $04, $fe
109d6     4A 0E FD 44 
109da     20 1F 07 DD 
109de     00 02 EA E8 
109e2     EE C6 B7 F5 | 	byte	$4a, $0e, $fd, $44, $20, $1f, $07, $dd, $00, $02, $ea, $e8, $ee, $c6, $b7, $f5
109e6     F0 DD D0 9A 
109ea     D7 0D CC 13 
109ee     2F 2A F9 94 
109f2     F2 6F 6E 35 | 	byte	$f0, $dd, $d0, $9a, $d7, $0d, $cc, $13, $2f, $2a, $f9, $94, $f2, $6f, $6e, $35
109f6     B1 DA 68 66 
109fa     38 DF CC 23 
109fe     2D F7 DB E7 
10a02     F4 DC C0 B6 | 	byte	$b1, $da, $68, $66, $38, $df, $cc, $23, $2d, $f7, $db, $e7, $f4, $dc, $c0, $b6
10a06     F0 1B C5 96 
10a0a     9E D6 23 EA 
10a0e     C8 0C 40 29 
10a12     B0 D2 56 7E | 	byte	$f0, $1b, $c5, $96, $9e, $d6, $23, $ea, $c8, $0c, $40, $29, $b0, $d2, $56, $7e
10a16     47 CA D9 64 
10a1a     7C 43 DD D3 
10a1e     4F 52 EF C0 
10a22     DC 0F ED B5 | 	byte	$47, $ca, $d9, $64, $7c, $43, $dd, $d3, $4f, $52, $ef, $c0, $dc, $0f, $ed, $b5
10a26     C0 EC 05 C2 
10a2a     90 B0 ED FB 
10a2e     C6 C9 1F 5F 
10a32     13 A5 D6 65 | 	byte	$c0, $ec, $05, $c2, $90, $b0, $ed, $fb, $c6, $c9, $1f, $5f, $13, $a5, $d6, $65
10a36     7E 46 BF EB 
10a3a     7F 7F 3F DF 
10a3e     DD 59 63 02 
10a42     D1 EA 02 E1 | 	byte	$7e, $46, $bf, $eb, $7f, $7f, $3f, $df, $dd, $59, $63, $02, $d1, $ea, $02, $e1
10a46     C2 E6 F9 D6 
10a4a     99 95 C5 DA 
10a4e     C4 AA E5 23 
10a52     3E E5 96 0B | 	byte	$c2, $e6, $f9, $d6, $99, $95, $c5, $da, $c4, $aa, $e5, $23, $3e, $e5, $96, $0b
10a56     73 77 18 AA 
10a5a     0A 79 78 26 
10a5e     D2 F5 67 61 
10a62     01 CA E5 EA | 	byte	$73, $77, $18, $aa, $0a, $79, $78, $26, $d2, $f5, $67, $61, $01, $ca, $e5, $ea
10a66     EA FA DD C0 
10a6a     B3 A2 C2 C2 
10a6e     BB A9 CA 1E 
10a72     33 32 A8 BD | 	byte	$ea, $fa, $dd, $c0, $b3, $a2, $c2, $c2, $bb, $a9, $ca, $1e, $33, $32, $a8, $bd
10a76     50 7C 5E CA 
10a7a     B2 63 7F 6A 
10a7e     E9 CC 40 73 
10a82     34 D4 BC ED | 	byte	$50, $7c, $5e, $ca, $b2, $63, $7f, $6a, $e9, $cc, $40, $73, $34, $d4, $bc, $ed
10a86     E2 F8 F8 B6 
10a8a     B4 B3 C6 E7 
10a8e     B3 A7 C0 1A 
10a92     3E 3F D7 AC | 	byte	$e2, $f8, $f8, $b6, $b4, $b3, $c6, $e7, $b3, $a7, $c0, $1a, $3e, $3f, $d7, $ac
10a96     31 7E 6B 0F 
10a9a     A5 18 7F 7F 
10a9e     2F CC E4 6A 
10aa2     62 0A BA C5 | 	byte	$31, $7e, $6b, $0f, $a5, $18, $7f, $7f, $2f, $cc, $e4, $6a, $62, $0a, $ba, $c5
10aa6     E2 F8 FD C7 
10aaa     94 A3 BE DC 
10aae     BF 9A AC 11 
10ab2     3A 45 E6 98 | 	byte	$e2, $f8, $fd, $c7, $94, $a3, $be, $dc, $bf, $9a, $ac, $11, $3a, $45, $e6, $98
10ab6     0D 7C 74 15 
10aba     9C 0D 7F 7F 
10abe     35 BC DE 6E 
10ac2     62 EE 98 B8 | 	byte	$0d, $7c, $74, $15, $9c, $0d, $7f, $7f, $35, $bc, $de, $6e, $62, $ee, $98, $b8
10ac6     F8 16 02 9C 
10aca     80 9B BE D9 
10ace     AD 8D BC 22 
10ad2     39 44 DF 9E | 	byte	$f8, $16, $02, $9c, $80, $9b, $be, $d9, $ad, $8d, $bc, $22, $39, $44, $df, $9e
10ad6     33 7F 6A 16 
10ada     9D 14 7F 7F 
10ade     3E D1 EA 69 
10ae2     59 F4 95 A5 | 	byte	$33, $7f, $6a, $16, $9d, $14, $7f, $7f, $3e, $d1, $ea, $69, $59, $f4, $95, $a5
10ae6     E1 18 11 9E 
10aea     80 8F C1 E3 
10aee     BD 8F B9 35 
10af2     57 4E C7 AD | 	byte	$e1, $18, $11, $9e, $80, $8f, $c1, $e3, $bd, $8f, $b9, $35, $57, $4e, $c7, $ad
10af6     5B 7F 68 FE 
10afa     A0 31 7F 7F 
10afe     2C C2 F3 77 
10b02     64 F3 90 A4 | 	byte	$5b, $7f, $68, $fe, $a0, $31, $7f, $7f, $2c, $c2, $f3, $77, $64, $f3, $90, $a4
10b06     D2 17 F0 81 
10b0a     80 9C BD DF 
10b0e     A7 81 B4 0D 
10b12     42 29 9A D6 | 	byte	$d2, $17, $f0, $81, $80, $9c, $bd, $df, $a7, $81, $b4, $0d, $42, $29, $9a, $d6
10b16     76 74 36 9E 
10b1a     C1 63 7F 59 
10b1e     EF D9 46 7D 
10b22     51 DF 98 BA | 	byte	$76, $74, $36, $9e, $c1, $63, $7f, $59, $ef, $d9, $46, $7d, $51, $df, $98, $ba
10b26     C4 03 C0 81 
10b2a     80 93 AE D2 
10b2e     9A A0 04 43 
10b32     60 FE AA 22 | 	byte	$c4, $03, $c0, $81, $80, $93, $ae, $d2, $9a, $a0, $04, $43, $60, $fe, $aa, $22
10b36     7C 67 18 A5 
10b3a     0B 7F 7F 55 
10b3e     F6 EA 69 76 
10b42     2E B2 A4 D4 | 	byte	$7c, $67, $18, $a5, $0b, $7f, $7f, $55, $f6, $ea, $69, $76, $2e, $b2, $a4, $d4
10b46     1E 29 A3 80 
10b4a     8A AF DA C1 
10b4e     81 AC 07 4F 
10b52     51 AB DA 7F | 	byte	$1e, $29, $a3, $80, $8a, $af, $da, $c1, $81, $ac, $07, $4f, $51, $ab, $da, $7f
10b56     7F 57 BB B4 
10b5a     5D 7F 74 06 
10b5e     B8 15 7F 69 
10b62     E5 88 B3 E0 | 	byte	$7f, $57, $bb, $b4, $5d, $7f, $74, $06, $b8, $15, $7f, $69, $e5, $88, $b3, $e0
10b66     54 06 80 80 
10b6a     8B B9 01 A1 
10b6e     85 D6 18 52 
10b72     DA 93 2A 7D | 	byte	$54, $06, $80, $80, $8b, $b9, $01, $a1, $85, $d6, $18, $52, $da, $93, $2a, $7d
10b76     6E 25 94 2A 
10b7a     7F 7F 5A F4 
10b7e     B6 40 55 03 
10b82     90 A5 9D 08 | 	byte	$6e, $25, $94, $2a, $7f, $7f, $5a, $f4, $b6, $40, $55, $03, $90, $a5, $9d, $08
10b86     3A A2 80 8D 
10b8a     AA 1F DB 80 
10b8e     BC 01 4F 1D 
10b92     8D FD 69 62 | 	byte	$3a, $a2, $80, $8d, $aa, $1f, $db, $80, $bc, $01, $4f, $1d, $8d, $fd, $69, $62
10b96     4D BC FA 7C 
10b9a     7D 58 21 EB 
10b9e     5F 64 22 CD 
10ba2     D6 BE B5 1F | 	byte	$4d, $bc, $fa, $7c, $7d, $58, $21, $eb, $5f, $64, $22, $cd, $d6, $be, $b5, $1f
10ba6     C6 88 A7 95 
10baa     C5 FF 87 C9 
10bae     10 2F 2F 98 
10bb2     DA 55 3B 56 | 	byte	$c6, $88, $a7, $95, $c5, $ff, $87, $c9, $10, $2f, $2f, $98, $da, $55, $3b, $56
10bb6     E8 FF 79 7F 
10bba     5C 0F EE 2C 
10bbe     63 16 B1 A1 
10bc2     ED B6 0F BE | 	byte	$e8, $ff, $79, $7f, $5c, $0f, $ee, $2c, $63, $16, $b1, $a1, $ed, $b6, $0f, $be
10bc6     80 A4 AD A9 
10bca     00 8F BC 2F 
10bce     30 27 A1 D6 
10bd2     5D 4D 66 E4 | 	byte	$80, $a4, $ad, $a9, $00, $8f, $bc, $2f, $30, $27, $a1, $d6, $5d, $4d, $66, $e4
10bd6     E7 7F 7F 6A 
10bda     20 DD 32 7B 
10bde     45 CD 9C 01 
10be2     CE 0F DF 80 | 	byte	$e7, $7f, $7f, $6a, $20, $dd, $32, $7b, $45, $cd, $9c, $01, $ce, $0f, $df, $80
10be6     90 B7 B0 FF 
10bea     8F A2 1B 33 
10bee     34 9E BB 5E 
10bf2     4B 67 E4 CA | 	byte	$90, $b7, $b0, $ff, $8f, $a2, $1b, $33, $34, $9e, $bb, $5e, $4b, $67, $e4, $ca
10bf6     69 7F 6B 2D 
10bfa     C4 08 78 48 
10bfe     D5 93 EE CC 
10c02     17 15 85 84 | 	byte	$69, $7f, $6b, $2d, $c4, $08, $78, $48, $d5, $93, $ee, $cc, $17, $15, $85, $84
10c06     A5 9E 02 AA 
10c0a     83 ED 30 3E 
10c0e     A9 BE 4F 3E 
10c12     6A 14 CE 5D | 	byte	$a5, $9e, $02, $aa, $83, $ed, $30, $3e, $a9, $be, $4f, $3e, $6a, $14, $ce, $5d
10c16     7C 5E 2F D3 
10c1a     FF 63 30 CE 
10c1e     A8 DC C2 0A 
10c22     F6 80 89 9F | 	byte	$7c, $5e, $2f, $d3, $ff, $63, $30, $ce, $a8, $dc, $c2, $0a, $f6, $80, $89, $9f
10c26     AC FE 9C A3 
10c2a     08 35 16 9C 
10c2e     02 4F 32 5F 
10c32     F4 04 79 79 | 	byte	$ac, $fe, $9c, $a3, $08, $35, $16, $9c, $02, $4f, $32, $5f, $f4, $04, $79, $79
10c36     5E 2E E6 27 
10c3a     63 19 BF BE 
10c3e     DA C0 0F D5 
10c42     81 A8 A7 C6 | 	byte	$5e, $2e, $e6, $27, $63, $19, $bf, $be, $da, $c0, $0f, $d5, $81, $a8, $a7, $c6
10c46     F7 95 C8 1E 
10c4a     35 FC BB 39 
10c4e     56 5B 75 0C 
10c52     31 7F 6F 4C | 	byte	$f7, $95, $c8, $1e, $35, $fc, $bb, $39, $56, $5b, $75, $0c, $31, $7f, $6f, $4c
10c56     1D D6 39 51 
10c5a     F2 A9 D6 D4 
10c5e     D9 18 A5 80 
10c62     AB 98 E3 D2 | 	byte	$1d, $d6, $39, $51, $f2, $a9, $d6, $d4, $d9, $18, $a5, $80, $ab, $98, $e3, $d2
10c66     86 DD 2D 44 
10c6a     D1 D2 57 39 
10c6e     65 31 CA 51 
10c72     7C 59 4C FD | 	byte	$86, $dd, $2d, $44, $d1, $d2, $57, $39, $65, $31, $ca, $51, $7c, $59, $4c, $fd
10c76     D9 4E 3D D0 
10c7a     97 C4 A4 E1 
10c7e     12 87 80 9F 
10c82     9D FA B2 95 | 	byte	$d9, $4e, $3d, $d0, $97, $c4, $a4, $e1, $12, $87, $80, $9f, $9d, $fa, $b2, $95
10c86     FA 35 29 A4 
10c8a     02 5B 30 78 
10c8e     1F FD 77 6F 
10c92     47 4A E4 18 | 	byte	$fa, $35, $29, $a4, $02, $5b, $30, $78, $1f, $fd, $77, $6f, $47, $4a, $e4, $18
10c96     6F 18 B7 C7 
10c9a     D1 9E FF C0 
10c9e     80 91 92 B8 
10ca2     EF 8C BF 22 | 	byte	$6f, $18, $b7, $c7, $d1, $9e, $ff, $c0, $80, $91, $92, $b8, $ef, $8c, $bf, $22
10ca6     37 DA BF 5B 
10caa     49 5E 67 01 
10cae     4B 7F 5C 49 
10cb2     27 EC 5A 58 | 	byte	$37, $da, $bf, $5b, $49, $5e, $67, $01, $4b, $7f, $5c, $49, $27, $ec, $5a, $58
10cb6     EA A9 E4 B4 
10cba     C6 FF 82 81 
10cbe     AA 8F E2 BD 
10cc2     8D FD 3B 1C | 	byte	$ea, $a9, $e4, $b4, $c6, $ff, $82, $81, $aa, $8f, $e2, $bd, $8d, $fd, $3b, $1c
10cc6     9D F8 5D 32 
10cca     6F 2A FD 73 
10cce     73 42 45 ED 
10cd2     03 6B 25 B7 | 	byte	$9d, $f8, $5d, $32, $6f, $2a, $fd, $73, $73, $42, $45, $ed, $03, $6b, $25, $b7
10cd6     C6 CF 98 F5 
10cda     C5 80 98 9C 
10cde     BA FF 92 B4 
10ce2     1F 33 D3 B5 | 	byte	$c6, $cf, $98, $f5, $c5, $80, $98, $9c, $ba, $ff, $92, $b4, $1f, $33, $d3, $b5
10ce6     4B 40 5B 66 
10cea     03 43 7F 53 
10cee     44 34 F2 43 
10cf2     51 EC BD F7 | 	byte	$4b, $40, $5b, $66, $03, $43, $7f, $53, $44, $34, $f2, $43, $51, $ec, $bd, $f7
10cf6     BB B5 FA 9B 
10cfa     84 AD 9A CD 
10cfe     D4 9C DE 20 
10d02     12 BC F9 4F | 	byte	$bb, $b5, $fa, $9b, $84, $ad, $9a, $cd, $d4, $9c, $de, $20, $12, $bc, $f9, $4f
10d06     2D 5D 2E 0A 
10d0a     67 7A 3B 43 
10d0e     0B 10 4D 1D 
10d12     D0 DD EE BA | 	byte	$2d, $5d, $2e, $0a, $67, $7a, $3b, $43, $0b, $10, $4d, $1d, $d0, $dd, $ee, $ba
10d16     E1 D7 88 9E 
10d1a     AC AD D8 AF 
10d1e     BB FE 1D E7 
10d22     CB 28 38 48 | 	byte	$e1, $d7, $88, $9e, $ac, $ad, $d8, $af, $bb, $fe, $1d, $e7, $cb, $28, $38, $48
10d26     53 11 35 7A 
10d2a     58 37 37 0A 
10d2e     38 4B 0C DA 
10d32     F5 E5 C6 EE | 	byte	$53, $11, $35, $7a, $58, $37, $37, $0a, $38, $4b, $0c, $da, $f5, $e5, $c6, $ee
10d36     C2 8D A7 A9 
10d3a     B8 D3 AE C7 
10d3e     07 16 D8 D4 
10d42     34 34 4F 4D | 	byte	$c2, $8d, $a7, $a9, $b8, $d3, $ae, $c7, $07, $16, $d8, $d4, $34, $34, $4f, $4d
10d46     0E 43 7E 50 
10d4a     3F 2E 0D 47 
10d4e     43 F6 DC FB 
10d52     CF CA ED 9F | 	byte	$0e, $43, $7e, $50, $3f, $2e, $0d, $47, $43, $f6, $dc, $fb, $cf, $ca, $ed, $9f
10d56     87 9E 9B CB 
10d5a     C4 A0 D4 15 
10d5e     15 B6 E9 49 
10d62     3A 6B 3C 05 | 	byte	$87, $9e, $9b, $cb, $c4, $a0, $d4, $15, $15, $b6, $e9, $49, $3a, $6b, $3c, $05
10d66     6A 7E 50 50 
10d6a     28 0C 5F 43 
10d6e     E5 D3 F7 B6 
10d72     CE E8 88 84 | 	byte	$6a, $7e, $50, $50, $28, $0c, $5f, $43, $e5, $d3, $f7, $b6, $ce, $e8, $88, $84
10d76     91 91 CC BA 
10d7a     A1 D3 0D 05 
10d7e     B4 10 48 36 
10d82     71 2D 00 74 | 	byte	$91, $91, $cc, $ba, $a1, $d3, $0d, $05, $b4, $10, $48, $36, $71, $2d, $00, $74
10d86     74 40 52 1A 
10d8a     2C 62 26 D2 
10d8e     E9 F5 B0 DA 
10d92     D2 83 92 92 | 	byte	$74, $40, $52, $1a, $2c, $62, $26, $d2, $e9, $f5, $b0, $da, $d2, $83, $92, $92
10d96     97 D7 AD A8 
10d9a     E9 1C ED BA 
10d9e     30 41 56 72 
10da2     0A 2A 7D 68 | 	byte	$97, $d7, $ad, $a8, $e9, $1c, $ed, $ba, $30, $41, $56, $72, $0a, $2a, $7d, $68
10da6     4D 41 F8 4C 
10daa     5F 0F CA EF 
10dae     D0 AF ED B4 
10db2     80 8D 85 A7 | 	byte	$4d, $41, $f8, $4c, $5f, $0f, $ca, $ef, $d0, $af, $ed, $b4, $80, $8d, $85, $a7
10db6     DA A5 B4 E7 
10dba     07 C6 E3 45 
10dbe     29 5C 59 FC 
10dc2     5C 7D 4F 51 | 	byte	$da, $a5, $b4, $e7, $07, $c6, $e3, $45, $29, $5c, $59, $fc, $5c, $7d, $4f, $51
10dc6     25 0C 64 3A 
10dca     E3 D6 F3 C1 
10dce     C6 D9 98 91 
10dd2     98 8A B6 CC | 	byte	$25, $0c, $64, $3a, $e3, $d6, $f3, $c1, $c6, $d9, $98, $91, $98, $8a, $b6, $cc
10dd6     B0 D2 F7 02 
10dda     C8 FE 3C 36 
10dde     6A 49 F9 69 
10de2     7A 50 54 10 | 	byte	$b0, $d2, $f7, $02, $c8, $fe, $3c, $36, $6a, $49, $f9, $69, $7a, $50, $54, $10
10de6     08 5D 33 E5 
10dea     E4 ED BD C8 
10dee     D9 9C A8 95 
10df2     8D C7 D2 CD | 	byte	$08, $5d, $33, $e5, $e4, $ed, $bd, $c8, $d9, $9c, $a8, $95, $8d, $c7, $d2, $cd
10df6     EF FF E6 CB 
10dfa     33 42 41 6D 
10dfe     0C 17 7C 67 
10e02     4D 41 EA 34 | 	byte	$ef, $ff, $e6, $cb, $33, $42, $41, $6d, $0c, $17, $7c, $67, $4d, $41, $ea, $34
10e06     53 0D D8 E3 
10e0a     D1 B9 DB C6 
10e0e     A3 BF 90 94 
10e12     D2 CB E9 0D | 	byte	$53, $0d, $d8, $e3, $d1, $b9, $db, $c6, $a3, $bf, $90, $94, $d2, $cb, $e9, $0d
10e16     08 EA DF 28 
10e1a     3C 47 69 00 
10e1e     02 77 57 53 
10e22     38 D2 1D 43 | 	byte	$08, $ea, $df, $28, $3c, $47, $69, $00, $02, $77, $57, $53, $38, $d2, $1d, $43
10e26     06 ED F1 E0 
10e2a     C2 D9 C9 C2 
10e2e     DE 9E 9C D4 
10e32     D9 15 27 02 | 	byte	$06, $ed, $f1, $e0, $c2, $d9, $c9, $c2, $de, $9e, $9c, $d4, $d9, $15, $27, $02
10e36     E2 D9 0A 29 
10e3a     38 51 FF 01 
10e3e     49 41 5D 33 
10e42     EC 1F 2B 0D | 	byte	$e2, $d9, $0a, $29, $38, $51, $ff, $01, $49, $41, $5d, $33, $ec, $1f, $2b, $0d
10e46     0D 01 EF DA 
10e4a     D6 CC DE EE 
10e4e     B6 A5 BC D4 
10e52     19 23 FD E9 | 	byte	$0d, $01, $ef, $da, $d6, $cc, $de, $ee, $b6, $a5, $bc, $d4, $19, $23, $fd, $e9
10e56     C9 F4 1D 31 
10e5a     4B 09 F6 31 
10e5e     36 55 3E 04 
10e62     16 08 FE 11 | 	byte	$c9, $f4, $1d, $31, $4b, $09, $f6, $31, $36, $55, $3e, $04, $16, $08, $fe, $11
10e66     06 F6 D5 BE 
10e6a     BB D5 F4 CD 
10e6e     AB B1 C7 0C 
10e72     28 08 F0 BA | 	byte	$06, $f6, $d5, $be, $bb, $d5, $f4, $cd, $ab, $b1, $c7, $0c, $28, $08, $f0, $ba
10e76     DD 0B 23 51 
10e7a     20 FC 20 22 
10e7e     44 4D 1F 1E 
10e82     09 FA 07 07 | 	byte	$dd, $0b, $23, $51, $20, $fc, $20, $22, $44, $4d, $1f, $1e, $09, $fa, $07, $07
10e86     10 F4 CF C2 
10e8a     C8 EC E7 BB 
10e8e     B4 BC ED 17 
10e92     12 05 D9 C3 | 	byte	$10, $f4, $cf, $c2, $c8, $ec, $e7, $bb, $b4, $bc, $ed, $17, $12, $05, $d9, $c3
10e96     E8 06 38 43 
10e9a     18 10 1A 25 
10e9e     3F 36 22 15 
10ea2     FE F6 F4 0A | 	byte	$e8, $06, $38, $43, $18, $10, $1a, $25, $3f, $36, $22, $15, $fe, $f6, $f4, $0a
10ea6     05 E5 D4 C1 
10eaa     D5 EB D1 C7 
10eae     CE D5 F4 07 
10eb2     04 F9 D2 D9 | 	byte	$05, $e5, $d4, $c1, $d5, $eb, $d1, $c7, $ce, $d5, $f4, $07, $04, $f9, $d2, $d9
10eb6     F3 13 4E 3C 
10eba     18 23 1D 2C 
10ebe     4B 31 28 22 
10ec2     FD EE F6 05 | 	byte	$f3, $13, $4e, $3c, $18, $23, $1d, $2c, $4b, $31, $28, $22, $fd, $ee, $f6, $05
10ec6     06 EF CE BC 
10eca     D2 E0 D4 D6 
10ece     D4 DE FE 00 
10ed2     04 FB D4 DD | 	byte	$06, $ef, $ce, $bc, $d2, $e0, $d4, $d6, $d4, $de, $fe, $00, $04, $fb, $d4, $dd
10ed6     F5 1E 54 37 
10eda     18 1D 1B 32 
10ede     38 24 25 13 
10ee2     F1 E2 E9 0E | 	byte	$f5, $1e, $54, $37, $18, $1d, $1b, $32, $38, $24, $25, $13, $f1, $e2, $e9, $0e
10ee6     09 E1 C3 B8 
10eea     D8 E9 D3 CF 
10eee     D2 E4 FD FC 
10ef2     05 02 D3 D6 | 	byte	$09, $e1, $c3, $b8, $d8, $e9, $d3, $cf, $d2, $e4, $fd, $fc, $05, $02, $d3, $d6
10ef6     FC 1A 4A 40 
10efa     0C 1C 2A 27 
10efe     36 29 1B 19 
10f02     F8 EC FF 11 | 	byte	$fc, $1a, $4a, $40, $0c, $1c, $2a, $27, $36, $29, $1b, $19, $f8, $ec, $ff, $11
10f06     01 DF CC D1 
10f0a     EA ED D3 CB 
10f0e     DA EA FB 01 
10f12     04 06 EC DE | 	byte	$01, $df, $cc, $d1, $ea, $ed, $d3, $cb, $da, $ea, $fb, $01, $04, $06, $ec, $de
10f16     F3 18 36 3A 
10f1a     21 17 26 29 
10f1e     26 24 17 12 
10f22     14 06 00 05 | 	byte	$f3, $18, $36, $3a, $21, $17, $26, $29, $26, $24, $17, $12, $14, $06, $00, $05
10f26     F2 DE DD DC 
10f2a     E4 E5 D2 C4 
10f2e     D3 E6 EB F1 
10f32     F6 FF 0B E5 | 	byte	$f2, $de, $dd, $dc, $e4, $e5, $d2, $c4, $d3, $e6, $eb, $f1, $f6, $ff, $0b, $e5
10f36     D6 FE 15 2E 
10f3a     3F 12 1E 38 
10f3e     13 13 15 1A 
10f42     36 24 FF F3 | 	byte	$d6, $fe, $15, $2e, $3f, $12, $1e, $38, $13, $13, $15, $1a, $36, $24, $ff, $f3
10f46     F0 F4 E7 E9 
10f4a     E5 D8 DB C4 
10f4e     D2 E3 D8 E7 
10f52     EF F7 0D 06 | 	byte	$f0, $f4, $e7, $e9, $e5, $d8, $db, $c4, $d2, $e3, $d8, $e7, $ef, $f7, $0d, $06
10f56     ED E4 FD 0D 
10f5a     18 38 29 1B 
10f5e     29 00 0C 31 
10f62     2A 33 1A F4 | 	byte	$ed, $e4, $fd, $0d, $18, $38, $29, $1b, $29, $00, $0c, $31, $2a, $33, $1a, $f4
10f66     F3 F8 F7 EE 
10f6a     E5 E0 D1 DE 
10f6e     D5 D0 E9 DC 
10f72     E0 F4 F0 0B | 	byte	$f3, $f8, $f7, $ee, $e5, $e0, $d1, $de, $d5, $d0, $e9, $dc, $e0, $f4, $f0, $0b
10f76     21 0D F6 E5 
10f7a     FB 0F 29 39 
10f7e     10 1B 21 06 
10f82     26 20 12 25 | 	byte	$21, $0d, $f6, $e5, $fb, $0f, $29, $39, $10, $1b, $21, $06, $26, $20, $12, $25
10f86     03 F0 F0 E3 
10f8a     E9 E3 E0 D5 
10f8e     D9 E3 D4 DF 
10f92     E1 D7 F3 F7 | 	byte	$03, $f0, $f0, $e3, $e9, $e3, $e0, $d5, $d9, $e3, $d4, $df, $e1, $d7, $f3, $f7
10f96     06 21 19 17 
10f9a     F0 E0 F9 02 
10f9e     2D 39 12 22 
10fa2     0C FA 19 10 | 	byte	$06, $21, $19, $17, $f0, $e0, $f9, $02, $2d, $39, $12, $22, $0c, $fa, $19, $10
10fa6     1D 25 01 F6 
10faa     F2 EF F6 EC 
10fae     F0 EC EA E7 
10fb2     D9 EA EA E3 | 	byte	$1d, $25, $01, $f6, $f2, $ef, $f6, $ec, $f0, $ec, $ea, $e7, $d9, $ea, $ea, $e3
10fb6     F5 F4 10 2C 
10fba     16 0E EE D5 
10fbe     F4 F8 1F 35 
10fc2     0C 1D 0C F8 | 	byte	$f5, $f4, $10, $2c, $16, $0e, $ee, $d5, $f4, $f8, $1f, $35, $0c, $1d, $0c, $f8
10fc6     16 0B 1E 33 
10fca     11 FF EA EF 
10fce     FC F2 F9 ED 
10fd2     EA EA D5 E9 | 	byte	$16, $0b, $1e, $33, $11, $ff, $ea, $ef, $fc, $f2, $f9, $ed, $ea, $ea, $d5, $e9
10fd6     EB E1 F0 DD 
10fda     F6 1A 0D 11 
10fde     F2 C5 DB E3 
10fe2     03 36 1C 11 | 	byte	$eb, $e1, $f0, $dd, $f6, $1a, $0d, $11, $f2, $c5, $db, $e3, $03, $36, $1c, $11
10fe6     0E F7 13 23 
10fea     24 35 22 0D 
10fee     FE F7 04 04 
10ff2     07 F4 EC F2 | 	byte	$0e, $f7, $13, $23, $24, $35, $22, $0d, $fe, $f7, $04, $04, $07, $f4, $ec, $f2
10ff6     DF E9 ED D4 
10ffa     DA DB DE 0B 
10ffe     1B 11 13 DA 
11002     C0 E6 ED 1B | 	byte	$df, $e9, $ed, $d4, $da, $db, $de, $0b, $1b, $11, $13, $da, $c0, $e6, $ed, $1b
11006     44 1B 28 23 
1100a     06 24 27 2F 
1100e     43 22 05 F6 
11012     F9 04 F9 FC | 	byte	$44, $1b, $28, $23, $06, $24, $27, $2f, $43, $22, $05, $f6, $f9, $04, $f9, $fc
11016     EB EC EA D0 
1101a     DC DE CB D3 
1101e     D2 DD 06 10 
11022     11 14 E0 C6 | 	byte	$eb, $ec, $ea, $d0, $dc, $de, $cb, $d3, $d2, $dd, $06, $10, $11, $14, $e0, $c6
11026     EC FE 2D 4F 
1102a     23 29 2F 0E 
1102e     21 27 28 43 
11032     23 FC F6 F3 | 	byte	$ec, $fe, $2d, $4f, $23, $29, $2f, $0e, $21, $27, $28, $43, $23, $fc, $f6, $f3
11036     F3 EC E5 E0 
1103a     E0 DF C9 D2 
1103e     DA C5 C9 D1 
11042     D4 FB 11 12 | 	byte	$f3, $ec, $e5, $e0, $e0, $df, $c9, $d2, $da, $c5, $c9, $d1, $d4, $fb, $11, $12
11046     2D 11 D1 E2 
1104a     F9 11 53 40 
1104e     1D 3F 19 03 
11052     22 1D 34 41 | 	byte	$2d, $11, $d1, $e2, $f9, $11, $53, $40, $1d, $3f, $19, $03, $22, $1d, $34, $41
11056     0E ED DD DB 
1105a     E1 D9 EB E3 
1105e     DF CB B8 DB 
11062     D4 BD CB CD | 	byte	$0e, $ed, $dd, $db, $e1, $d9, $eb, $e3, $df, $cb, $b8, $db, $d4, $bd, $cb, $cd
11066     DC 09 0C 1F 
1106a     45 19 D3 E7 
1106e     FA 1D 5C 3D 
11072     1F 48 13 FB | 	byte	$dc, $09, $0c, $1f, $45, $19, $d3, $e7, $fa, $1d, $5c, $3d, $1f, $48, $13, $fb
11076     1B 0D 32 2F 
1107a     EC E1 DC D1 
1107e     D5 DB EE E8 
11082     E1 C5 B8 E3 | 	byte	$1b, $0d, $32, $2f, $ec, $e1, $dc, $d1, $d5, $db, $ee, $e8, $e1, $c5, $b8, $e3
11086     D3 BE CA CD 
1108a     E0 F8 06 25 
1108e     4C 39 F1 D7 
11092     01 0B 48 53 | 	byte	$d3, $be, $ca, $cd, $e0, $f8, $06, $25, $4c, $39, $f1, $d7, $01, $0b, $48, $53
11096     1B 4B 23 EB 
1109a     1A 0F 20 39 
1109e     F8 E7 E4 C9 
110a2     CC D5 F7 ED | 	byte	$1b, $4b, $23, $eb, $1a, $0f, $20, $39, $f8, $e7, $e4, $c9, $cc, $d5, $f7, $ed
110a6     DD CE B6 D9 
110aa     D6 C2 D7 D5 
110ae     E3 EC F5 24 
110b2     48 54 29 E2 | 	byte	$dd, $ce, $b6, $d9, $d6, $c2, $d7, $d5, $e3, $ec, $f5, $24, $48, $54, $29, $e2
110b6     FA 00 15 63 
110ba     46 44 50 FE 
110be     FA 21 16 33 
110c2     2E FB E6 CD | 	byte	$fa, $00, $15, $63, $46, $44, $50, $fe, $fa, $21, $16, $33, $2e, $fb, $e6, $cd
110c6     BB CF E1 F8 
110ca     E4 D9 C6 BB 
110ce     D6 D3 DB E2 
110d2     DA E3 E2 F9 | 	byte	$bb, $cf, $e1, $f8, $e4, $d9, $c6, $bb, $d6, $d3, $db, $e2, $da, $e3, $e2, $f9
110d6     28 46 56 32 
110da     E0 02 03 1B 
110de     71 50 4E 54 
110e2     09 00 17 10 | 	byte	$28, $46, $56, $32, $e0, $02, $03, $1b, $71, $50, $4e, $54, $09, $00, $17, $10
110e6     32 26 F2 DB 
110ea     CB C1 CA E3 
110ee     EF DE DC B1 
110f2     B4 CD C6 D8 | 	byte	$32, $26, $f2, $db, $cb, $c1, $ca, $e3, $ef, $de, $dc, $b1, $b4, $cd, $c6, $d8
110f6     D6 CC D2 CA 
110fa     E5 22 46 69 
110fe     4F FE 00 1D 
11102     1F 70 77 51 | 	byte	$d6, $cc, $d2, $ca, $e5, $22, $46, $69, $4f, $fe, $00, $1d, $1f, $70, $77, $51
11106     67 29 F8 27 
1110a     1A 26 3C 03 
1110e     CC BD A5 B1 
11112     C8 E3 CA C0 | 	byte	$67, $29, $f8, $27, $1a, $26, $3c, $03, $cc, $bd, $a5, $b1, $c8, $e3, $ca, $c0
11116     A6 9D BC C3 
1111a     D4 DA C9 C0 
1111e     C0 D2 15 50 
11122     6D 74 29 F7 | 	byte	$a6, $9d, $bc, $c3, $d4, $da, $c9, $c0, $c0, $d2, $15, $50, $6d, $74, $29, $f7
11126     3D 2D 64 7F 
1112a     59 60 46 E7 
1112e     1C 41 27 35 
11132     F9 89 87 96 | 	byte	$3d, $2d, $64, $7f, $59, $60, $46, $e7, $1c, $41, $27, $35, $f9, $89, $87, $96
11136     9D BA D0 9F 
1113a     91 96 8D B9 
1113e     E6 E3 E9 C5 
11142     B2 DD 04 4B | 	byte	$9d, $ba, $d0, $9f, $91, $96, $8d, $b9, $e6, $e3, $e9, $c5, $b2, $dd, $04, $4b
11146     79 70 76 69 
1114a     2F 41 6D 4D 
1114e     72 66 27 4D 
11152     15 EE 2A 13 | 	byte	$79, $70, $76, $69, $2f, $41, $6d, $4d, $72, $66, $27, $4d, $15, $ee, $2a, $13
11156     E0 F0 A1 80 
1115a     A9 99 9F B5 
1115e     A4 8E A3 A6 
11162     BF 06 FD E7 | 	byte	$e0, $f0, $a1, $80, $a9, $99, $9f, $b5, $a4, $8e, $a3, $a6, $bf, $06, $fd, $e7
11166     ED E0 E2 27 
1116a     32 5E 75 59 
1116e     6C 76 3F 52 
11172     65 26 5F 41 | 	byte	$ed, $e0, $e2, $27, $32, $5e, $75, $59, $6c, $76, $3f, $52, $65, $26, $5f, $41
11176     00 46 06 C1 
1117a     FF CD A0 DD 
1117e     95 81 AB 87 
11182     88 A9 9F 9B | 	byte	$00, $46, $06, $c1, $ff, $cd, $a0, $dd, $95, $81, $ab, $87, $88, $a9, $9f, $9b
11186     C6 BA DF 26 
1118a     01 F7 22 0F 
1118e     0D 42 33 59 
11192     78 5C 6F 7D | 	byte	$c6, $ba, $df, $26, $01, $f7, $22, $0f, $0d, $42, $33, $59, $78, $5c, $6f, $7d
11196     3C 3A 55 07 
1119a     4F 41 E6 35 
1119e     05 8D D3 D0 
111a2     A0 EC A7 81 | 	byte	$3c, $3a, $55, $07, $4f, $41, $e6, $35, $05, $8d, $d3, $d0, $a0, $ec, $a7, $81
111a6     AB 8F 8B BF 
111aa     BE AB D3 C4 
111ae     D4 36 2A 0D 
111b2     46 2E 04 25 | 	byte	$ab, $8f, $8b, $bf, $be, $ab, $d3, $c4, $d4, $36, $2a, $0d, $46, $2e, $04, $25
111b6     27 40 6D 65 
111ba     4E 79 57 0B 
111be     46 0B 17 4E 
111c2     E5 05 24 A9 | 	byte	$27, $40, $6d, $65, $4e, $79, $57, $0b, $46, $0b, $17, $4e, $e5, $05, $24, $a9
111c6     BD F6 B4 E6 
111ca     D2 80 A5 B3 
111ce     94 BA DC B4 
111d2     CC D9 CF 24 | 	byte	$bd, $f6, $b4, $e6, $d2, $80, $a5, $b3, $94, $ba, $dc, $b4, $cc, $d9, $cf, $24
111d6     40 0B 3B 34 
111da     10 23 1D 32 
111de     4A 53 3E 5B 
111e2     6D 22 1A 32 | 	byte	$40, $0b, $3b, $34, $10, $23, $1d, $32, $4a, $53, $3e, $5b, $6d, $22, $1a, $32
111e6     ED 29 21 E7 
111ea     34 FE AD EE 
111ee     DF C9 F5 AF 
111f2     91 C5 A6 A7 | 	byte	$ed, $29, $21, $e7, $34, $fe, $ad, $ee, $df, $c9, $f5, $af, $91, $c5, $a6, $a7
111f6     DD D6 B9 E3 
111fa     DA EA 37 15 
111fe     18 3B 1A 11 
11202     18 11 2A 3B | 	byte	$dd, $d6, $b9, $e3, $da, $ea, $37, $15, $18, $3b, $1a, $11, $18, $11, $2a, $3b
11206     35 42 67 50 
1120a     09 25 06 F2 
1120e     37 F7 07 3E 
11212     D3 C7 11 CA | 	byte	$35, $42, $67, $50, $09, $25, $06, $f2, $37, $f7, $07, $3e, $d3, $c7, $11, $ca
11216     DA F7 90 A1 
1121a     CB 8C B7 F3 
1121e     AB C8 EE C0 
11222     00 45 00 32 | 	byte	$da, $f7, $90, $a1, $cb, $8c, $b7, $f3, $ab, $c8, $ee, $c0, $00, $45, $00, $32
11226     45 02 0F 16 
1122a     F1 28 39 28 
1122e     4D 63 58 09 
11232     F4 23 D1 28 | 	byte	$45, $02, $0f, $16, $f1, $28, $39, $28, $4d, $63, $58, $09, $f4, $23, $d1, $28
11236     30 D6 4E F8 
1123a     A1 1E DF BE 
1123e     1F A9 8C E1 
11242     97 AA FB C5 | 	byte	$30, $d6, $4e, $f8, $a1, $1e, $df, $be, $1f, $a9, $8c, $e1, $97, $aa, $fb, $c5
11246     B8 F8 BD E4 
1124a     4E 0E 1D 49 
1124e     ED 09 12 D1 
11252     1B 2F 10 3B | 	byte	$b8, $f8, $bd, $e4, $4e, $0e, $1d, $49, $ed, $09, $12, $d1, $1b, $2f, $10, $3b
11256     47 4F 48 E9 
1125a     20 FA EB 5D 
1125e     01 28 52 C1 
11262     DB 0E B4 FD | 	byte	$47, $4f, $48, $e9, $20, $fa, $eb, $5d, $01, $28, $52, $c1, $db, $0e, $b4, $fd
11266     FF 86 AC CA 
1126a     8D B4 EC A8 
1126e     D9 DB AE 0D 
11272     32 F7 34 23 | 	byte	$ff, $86, $ac, $ca, $8d, $b4, $ec, $a8, $d9, $db, $ae, $0d, $32, $f7, $34, $23
11276     F2 28 F1 E3 
1127a     26 11 18 40 
1127e     3B 62 51 E6 
11282     20 06 E9 60 | 	byte	$f2, $28, $f1, $e3, $26, $11, $18, $40, $3b, $62, $51, $e6, $20, $06, $e9, $60
11286     23 1A 5D EB 
1128a     BE 1C D6 EF 
1128e     12 A1 9B D2 
11292     95 B1 F3 BB | 	byte	$23, $1a, $5d, $eb, $be, $1c, $d6, $ef, $12, $a1, $9b, $d2, $95, $b1, $f3, $bb
11296     C2 DF B1 E5 
1129a     30 02 19 36 
1129e     F9 03 10 DF 
112a2     06 24 09 2B | 	byte	$c2, $df, $b1, $e5, $30, $02, $19, $36, $f9, $03, $10, $df, $06, $24, $09, $2b
112a6     47 40 50 2E 
112aa     F0 2E 0B 23 
112ae     56 0F 3E 2F 
112b2     CA F0 15 E0 | 	byte	$47, $40, $50, $2e, $f0, $2e, $0b, $23, $56, $0f, $3e, $2f, $ca, $f0, $15, $e0
112b6     0F ED 95 B7 
112ba     B6 9E D0 E6 
112be     A8 D1 CA C5 
112c2     1A 30 10 2E | 	byte	$0f, $ed, $95, $b7, $b6, $9e, $d0, $e6, $a8, $d1, $ca, $c5, $1a, $30, $10, $2e
112c6     13 F6 18 00 
112ca     04 1B 18 10 
112ce     2D 3B 45 57 
112d2     26 F4 35 08 | 	byte	$13, $f6, $18, $00, $04, $1b, $18, $10, $2d, $3b, $45, $57, $26, $f4, $35, $08
112d6     27 59 0F 40 
112da     2D D1 FC 0E 
112de     DD 0F D3 8E 
112e2     B6 A3 9A CA | 	byte	$27, $59, $0f, $40, $2d, $d1, $fc, $0e, $dd, $0f, $d3, $8e, $b6, $a3, $9a, $ca
112e6     D9 A0 CA C8 
112ea     B8 20 20 FC 
112ee     33 04 F7 2B 
112f2     15 02 16 0B | 	byte	$d9, $a0, $ca, $c8, $b8, $20, $20, $fc, $33, $04, $f7, $2b, $15, $02, $16, $0b
112f6     EC 31 42 39 
112fa     67 34 BA 29 
112fe     06 0A 7B 1B 
11302     22 53 CE C6 | 	byte	$ec, $31, $42, $39, $67, $34, $ba, $29, $06, $0a, $7b, $1b, $22, $53, $ce, $c6
11306     43 D9 FA 07 
1130a     86 94 C0 83 
1130e     B2 00 98 B7 
11312     D2 A0 0D 42 | 	byte	$43, $d9, $fa, $07, $86, $94, $c0, $83, $b2, $00, $98, $b7, $d2, $a0, $0d, $42
11316     F2 37 23 EC 
1131a     28 23 14 13 
1131e     03 DD 11 3D 
11322     30 4F 59 F8 | 	byte	$f2, $37, $23, $ec, $28, $23, $14, $13, $03, $dd, $11, $3d, $30, $4f, $59, $f8
11326     E6 2E F8 6B 
1132a     52 F6 4E 06 
1132e     BC 3D FC E0 
11332     0D 92 89 BB | 	byte	$e6, $2e, $f8, $6b, $52, $f6, $4e, $06, $bc, $3d, $fc, $e0, $0d, $92, $89, $bb
11336     97 A8 FA B4 
1133a     A5 D2 AE FD 
1133e     51 0F 26 29 
11342     E9 0F 2D 1D | 	byte	$97, $a8, $fa, $b4, $a5, $d2, $ae, $fd, $51, $0f, $26, $29, $e9, $0f, $2d, $1d
11346     19 0D DE DA 
1134a     30 3D 35 68 
1134e     2D C2 28 02 
11352     18 77 07 F8 | 	byte	$19, $0d, $de, $da, $30, $3d, $35, $68, $2d, $c2, $28, $02, $18, $77, $07, $f8
11356     45 CC F4 34 
1135a     C7 03 D9 80 
1135e     A5 CB 8D E3 
11362     E4 8F C6 C1 | 	byte	$45, $cc, $f4, $34, $c7, $03, $d9, $80, $a5, $cb, $8d, $e3, $e4, $8f, $c6, $c1
11366     CF 46 43 01 
1136a     22 FF FA 36 
1136e     42 1D F9 E5 
11372     C3 0C 66 44 | 	byte	$cf, $46, $43, $01, $22, $ff, $fa, $36, $42, $1d, $f9, $e5, $c3, $0c, $66, $44
11376     5A 60 F1 D1 
1137a     3F 01 57 65 
1137e     D5 27 2B B0 
11382     2F 1A BD 1C | 	byte	$5a, $60, $f1, $d1, $3f, $01, $57, $65, $d5, $27, $2b, $b0, $2f, $1a, $bd, $1c
11386     A9 81 CB B6 
1138a     A3 0F B3 90 
1138e     D3 B8 F1 5E 
11392     13 F9 22 E5 | 	byte	$a9, $81, $cb, $b6, $a3, $0f, $b3, $90, $d3, $b8, $f1, $5e, $13, $f9, $22, $e5
11396     17 4D 33 1C 
1139a     ED CF D6 34 
1139e     72 59 68 4F 
113a2     D3 E4 4D 10 | 	byte	$17, $4d, $33, $1c, $ed, $cf, $d6, $34, $72, $59, $68, $4f, $d3, $e4, $4d, $10
113a6     67 5B C2 27 
113aa     0F A9 39 1D 
113ae     B0 03 95 81 
113b2     CB BA 9D 02 | 	byte	$67, $5b, $c2, $27, $0f, $a9, $39, $1d, $b0, $03, $95, $81, $cb, $ba, $9d, $02
113b6     B6 88 D0 BB 
113ba     FC 6B 12 F3 
113be     2A F4 16 67 
113c2     31 0E DC CD | 	byte	$b6, $88, $d0, $bb, $fc, $6b, $12, $f3, $2a, $f4, $16, $67, $31, $0e, $dc, $cd
113c6     E5 54 73 55 
113ca     69 31 C3 00 
113ce     3F 2C 7A 2B 
113d2     D1 1F FF CD | 	byte	$e5, $54, $73, $55, $69, $31, $c3, $00, $3f, $2c, $7a, $2b, $d1, $1f, $ff, $cd
113d6     41 02 C1 E9 
113da     80 88 DB B8 
113de     B1 EF 93 8D 
113e2     C9 BC 1D 4F | 	byte	$41, $02, $c1, $e9, $80, $88, $db, $b8, $b1, $ef, $93, $8d, $c9, $bc, $1d, $4f
113e6     F5 F7 0D F6 
113ea     32 5B 1F F2 
113ee     D7 CA 05 6C 
113f2     5F 58 61 FF | 	byte	$f5, $f7, $0d, $f6, $32, $5b, $1f, $f2, $d7, $ca, $05, $6c, $5f, $58, $61, $ff
113f6     B9 2E 20 3B 
113fa     7A FA F0 29 
113fe     BC FC 50 DD 
11402     E8 C3 80 9B | 	byte	$b9, $2e, $20, $3b, $7a, $fa, $f0, $29, $bc, $fc, $50, $dd, $e8, $c3, $80, $9b
11406     D4 9C CB CC 
1140a     80 95 B7 CA 
1140e     2E 41 E9 F7 
11412     FF FD 48 5A | 	byte	$d4, $9c, $cb, $cc, $80, $95, $b7, $ca, $2e, $41, $e9, $f7, $ff, $fd, $48, $5a
11416     27 F7 DA DE 
1141a     1D 73 6D 63 
1141e     52 E4 D5 43 
11422     20 71 52 D8 | 	byte	$27, $f7, $da, $de, $1d, $73, $6d, $63, $52, $e4, $d5, $43, $20, $71, $52, $d8
11426     22 EB BC 39 
1142a     24 D9 EF 82 
1142e     80 A2 B6 AA 
11432     CF 9D 82 AD | 	byte	$22, $eb, $bc, $39, $24, $d9, $ef, $82, $80, $a2, $b6, $aa, $cf, $9d, $82, $ad
11436     BE F7 49 1D 
1143a     E5 01 FE 34 
1143e     65 44 08 F0 
11442     EB 03 71 79 | 	byte	$be, $f7, $49, $1d, $e5, $01, $fe, $34, $65, $44, $08, $f0, $eb, $03, $71, $79
11446     64 66 0A D0 
1144a     35 2D 4C 63 
1144e     EB 04 02 B5 
11452     16 2F D2 E7 | 	byte	$64, $66, $0a, $d0, $35, $2d, $4c, $63, $eb, $04, $02, $b5, $16, $2f, $d2, $e7
11456     8F 80 96 A5 
1145a     A8 C4 9B 84 
1145e     A5 BA FA 44 
11462     28 E9 F0 FE | 	byte	$8f, $80, $96, $a5, $a8, $c4, $9b, $84, $a5, $ba, $fa, $44, $28, $e9, $f0, $fe
11466     30 67 59 1D 
1146a     F1 F4 EE 61 
1146e     7F 68 6C 17 
11472     B9 34 37 37 | 	byte	$30, $67, $59, $1d, $f1, $f4, $ee, $61, $7f, $68, $6c, $17, $b9, $34, $37, $37
11476     7D EA D1 1C 
1147a     A0 F4 48 B5 
1147e     D4 A9 80 96 
11482     9E A5 CB 98 | 	byte	$7d, $ea, $d1, $1c, $a0, $f4, $48, $b5, $d4, $a9, $80, $96, $9e, $a5, $cb, $98
11486     82 A5 BE F3 
1148a     4D 2E F0 EE 
1148e     06 42 6B 5F 
11492     17 EC 05 01 | 	byte	$82, $a5, $be, $f3, $4d, $2e, $f0, $ee, $06, $42, $6b, $5f, $17, $ec, $05, $01
11496     70 7F 6C 70 
1149a     1C CA 40 3B 
1149e     3B 6C D7 E8 
114a2     14 A2 0F 2B | 	byte	$70, $7f, $6c, $70, $1c, $ca, $40, $3b, $3b, $6c, $d7, $e8, $14, $a2, $0f, $2b
114a6     9D D9 A5 80 
114aa     B8 A1 AE CE 
114ae     8C 94 C1 CB 
114b2     1B 42 0E 00 | 	byte	$9d, $d9, $a5, $80, $b8, $a1, $ae, $ce, $8c, $94, $c1, $cb, $1b, $42, $0e, $00
114b6     01 19 5B 64 
114ba     3B 05 F6 06 
114be     2B 7F 70 5F 
114c2     51 DE F1 5A | 	byte	$01, $19, $5b, $64, $3b, $05, $f6, $06, $2b, $7f, $70, $5f, $51, $de, $f1, $5a
114c6     19 57 31 B9 
114ca     05 EB AD 36 
114ce     02 9C DF 8B 
114d2     81 D6 9D B3 | 	byte	$19, $57, $31, $b9, $05, $eb, $ad, $36, $02, $9c, $df, $8b, $81, $d6, $9d, $b3
114d6     D2 80 95 C7 
114da     C8 26 38 E6 
114de     F3 F9 0D 64 
114e2     55 12 E9 09 | 	byte	$d2, $80, $95, $c7, $c8, $26, $38, $e6, $f3, $f9, $0d, $64, $55, $12, $e9, $09
114e6     00 58 7D 51 
114ea     65 1B B4 30 
114ee     48 24 67 E9 
114f2     BD 1F BA FE | 	byte	$00, $58, $7d, $51, $65, $1b, $b4, $30, $48, $24, $67, $e9, $bd, $1f, $ba, $fe
114f6     48 BA C1 BB 
114fa     80 C5 DA 94 
114fe     DE 94 85 C4 
11502     D1 EE 3C F4 | 	byte	$48, $ba, $c1, $bb, $80, $c5, $da, $94, $de, $94, $85, $c4, $d1, $ee, $3c, $f4
11506     DB F7 03 42 
1150a     5A 2D DA FB 
1150e     14 2F 7C 62 
11512     59 3E C3 16 | 	byte	$db, $f7, $03, $42, $5a, $2d, $da, $fb, $14, $2f, $7c, $62, $59, $3e, $c3, $16
11516     62 23 72 04 
1151a     C6 3E D0 FB 
1151e     56 C1 C1 D9 
11522     83 C3 EB 90 | 	byte	$62, $23, $72, $04, $c6, $3e, $d0, $fb, $56, $c1, $c1, $d9, $83, $c3, $eb, $90
11526     D7 B1 80 BA 
1152a     C8 DA 2F ED 
1152e     D0 F9 F9 33 
11532     59 21 E3 F2 | 	byte	$d7, $b1, $80, $ba, $c8, $da, $2f, $ed, $d0, $f9, $f9, $33, $59, $21, $e3, $f2
11536     0F 38 7C 69 
1153a     4E 42 D1 0F 
1153e     70 2A 62 1B 
11542     CC 29 EB F2 | 	byte	$0f, $38, $7c, $69, $4e, $42, $d1, $0f, $70, $2a, $62, $1b, $cc, $29, $eb, $f2
11546     4C DC B3 DB 
1154a     80 B1 F6 9B 
1154e     BD B9 80 AF 
11552     D3 D2 1B FD | 	byte	$4c, $dc, $b3, $db, $80, $b1, $f6, $9b, $bd, $b9, $80, $af, $d3, $d2, $1b, $fd
11556     BB E7 FF 21 
1155a     49 1E DB E0 
1155e     16 31 7C 79 
11562     4E 3A C4 13 | 	byte	$bb, $e7, $ff, $21, $49, $1e, $db, $e0, $16, $31, $7c, $79, $4e, $3a, $c4, $13
11566     71 34 70 27 
1156a     C3 3C F7 EB 
1156e     5F DC A3 E2 
11572     87 B2 0F 98 | 	byte	$71, $34, $70, $27, $c3, $3c, $f7, $eb, $5f, $dc, $a3, $e2, $87, $b2, $0f, $98
11576     AB AE 82 B6 
1157a     E4 D2 0C E9 
1157e     B6 EC 12 34 
11582     3C 01 CB FC | 	byte	$ab, $ae, $82, $b6, $e4, $d2, $0c, $e9, $b6, $ec, $12, $34, $3c, $01, $cb, $fc
11586     2E 55 7D 6F 
1158a     55 20 CE 46 
1158e     77 52 7A 0E 
11592     D7 4E F1 08 | 	byte	$2e, $55, $7d, $6f, $55, $20, $ce, $46, $77, $52, $7a, $0e, $d7, $4e, $f1, $08
11596     5F C4 A0 DB 
1159a     80 C4 0C 8F 
1159e     97 A6 82 B6 
115a2     F8 D4 02 E1 | 	byte	$5f, $c4, $a0, $db, $80, $c4, $0c, $8f, $97, $a6, $82, $b6, $f8, $d4, $02, $e1
115a6     AD F3 23 35 
115aa     29 E8 BE FC 
115ae     3B 6B 7F 60 
115b2     4D 06 DB 60 | 	byte	$ad, $f3, $23, $35, $29, $e8, $be, $fc, $3b, $6b, $7f, $60, $4d, $06, $db, $60
115b6     72 5C 6D F2 
115ba     F4 4F FD 1F 
115be     4A BB A9 C6 
115c2     85 D5 EF 8D | 	byte	$72, $5c, $6d, $f2, $f4, $4f, $fd, $1f, $4a, $bb, $a9, $c6, $85, $d5, $ef, $8d
115c6     91 93 88 C2 
115ca     DF D4 DF C1 
115ce     C1 ED 15 1F 
115d2     FC D2 E9 0E | 	byte	$91, $93, $88, $c2, $df, $d4, $df, $c1, $c1, $ed, $15, $1f, $fc, $d2, $e9, $0e
115d6     41 69 5E 4F 
115da     38 F5 29 62 
115de     42 5B 31 F8 
115e2     39 23 05 3F | 	byte	$41, $69, $5e, $4f, $38, $f5, $29, $62, $42, $5b, $31, $f8, $39, $23, $05, $3f
115e6     00 CE E8 B3 
115ea     C8 F8 BD A5 
115ee     B4 A1 BD DB 
115f2     DA E4 DC CD | 	byte	$00, $ce, $e8, $b3, $c8, $f8, $bd, $a5, $b4, $a1, $bd, $db, $da, $e4, $dc, $cd
115f6     D8 02 17 05 
115fa     E8 DA 00 2A 
115fe     4E 5D 54 45 
11602     09 FD 57 51 | 	byte	$d8, $02, $17, $05, $e8, $da, $00, $2a, $4e, $5d, $54, $45, $09, $fd, $57, $51
11606     4F 51 F8 22 
1160a     47 F5 41 24 
1160e     C2 EF BD AA 
11612     00 C6 91 AF | 	byte	$4f, $51, $f8, $22, $47, $f5, $41, $24, $c2, $ef, $bd, $aa, $00, $c6, $91, $af
11616     89 AB D5 C2 
1161a     DD D5 C0 CF 
1161e     FB 12 06 DC 
11622     C5 F6 28 54 | 	byte	$89, $ab, $d5, $c2, $dd, $d5, $c0, $cf, $fb, $12, $06, $dc, $c5, $f6, $28, $54
11626     66 53 4A 11 
1162a     EC 5B 4F 4B 
1162e     64 FD 10 61 
11632     F0 31 33 B3 | 	byte	$66, $53, $4a, $11, $ec, $5b, $4f, $4b, $64, $fd, $10, $61, $f0, $31, $33, $b3
11636     06 D1 98 12 
1163a     E1 8C C6 99 
1163e     B0 EF CA D7 
11642     EA D6 DF FA | 	byte	$06, $d1, $98, $12, $e1, $8c, $c6, $99, $b0, $ef, $ca, $d7, $ea, $d6, $df, $fa
11646     13 0A D7 CE 
1164a     FB 20 4D 50 
1164e     38 4D FE EE 
11652     6D 3F 47 5D | 	byte	$13, $0a, $d7, $ce, $fb, $20, $4d, $50, $38, $4d, $fe, $ee, $6d, $3f, $47, $5d
11656     D4 26 5F D8 
1165a     41 16 A8 12 
1165e     C7 AE 1F CA 
11662     90 C6 9E D2 | 	byte	$d4, $26, $5f, $d8, $41, $16, $a8, $12, $c7, $ae, $1f, $ca, $90, $c6, $9e, $d2
11666     EC C2 D1 D4 
1166a     E0 F2 09 1A 
1166e     F5 BE DA 0D 
11672     3E 5E 3F 3D | 	byte	$ec, $c2, $d1, $d4, $e0, $f2, $09, $1a, $f5, $be, $da, $0d, $3e, $5e, $3f, $3d
11676     2B E0 3D 6B 
1167a     33 6A 0F E4 
1167e     6F 1A 11 4B 
11682     AD E2 03 91 | 	byte	$2b, $e0, $3d, $6b, $33, $6a, $0f, $e4, $6f, $1a, $11, $4b, $ad, $e2, $03, $91
11686     0E 05 85 BF 
1168a     AE AE F4 CF 
1168e     C5 D3 CD ED 
11692     F6 17 0D C6 | 	byte	$0e, $05, $85, $bf, $ae, $ae, $f4, $cf, $c5, $d3, $cd, $ed, $f6, $17, $0d, $c6
11696     CC FF 1F 5B 
1169a     53 27 47 EB 
1169e     02 6B 35 50 
116a2     46 D7 31 4B | 	byte	$cc, $ff, $1f, $5b, $53, $27, $47, $eb, $02, $6b, $35, $50, $46, $d7, $31, $4b
116a6     F6 41 01 B6 
116aa     0C B0 CC 15 
116ae     BC A8 C1 A1 
116b2     DF DE C3 D5 | 	byte	$f6, $41, $01, $b6, $0c, $b0, $cc, $15, $bc, $a8, $c1, $a1, $df, $de, $c3, $d5
116b6     D6 E3 F8 0C 
116ba     18 EC C7 FD 
116be     1E 46 67 30 
116c2     4D 1A E3 63 | 	byte	$d6, $e3, $f8, $0c, $18, $ec, $c7, $fd, $1e, $46, $67, $30, $4d, $1a, $e3, $63
116c6     4A 36 59 DB 
116ca     0C 63 EE 2A 
116ce     0F A2 09 C0 
116d2     AC 18 B9 93 | 	byte	$4a, $36, $59, $db, $0c, $63, $ee, $2a, $0f, $a2, $09, $c0, $ac, $18, $b9, $93
116d6     C6 A1 EB E8 
116da     B7 D1 DC EF 
116de     F7 0E 1E E4 
116e2     C3 F2 24 49 | 	byte	$c6, $a1, $eb, $e8, $b7, $d1, $dc, $ef, $f7, $0e, $1e, $e4, $c3, $f2, $24, $49
116e6     6A 34 38 27 
116ea     CB 52 50 22 
116ee     68 E0 F7 73 
116f2     ED 1C 1A 94 | 	byte	$6a, $34, $38, $27, $cb, $52, $50, $22, $68, $e0, $f7, $73, $ed, $1c, $1a, $94
116f6     F8 C1 98 07 
116fa     B6 8A BC 9C 
116fe     E4 EE BA D1 
11702     DB EB F6 03 | 	byte	$f8, $c1, $98, $07, $b6, $8a, $bc, $9c, $e4, $ee, $ba, $d1, $db, $eb, $f6, $03
11706     1E FE D6 F8 
1170a     22 3A 5F 42 
1170e     3B 48 E0 36 
11712     60 18 6B F7 | 	byte	$1e, $fe, $d6, $f8, $22, $3a, $5f, $42, $3b, $48, $e0, $36, $60, $18, $6b, $f7
11716     DF 6F 04 F4 
1171a     39 9D DD FA 
1171e     89 EA EE 85 
11722     C1 B8 BC F7 | 	byte	$df, $6f, $04, $f4, $39, $9d, $dd, $fa, $89, $ea, $ee, $85, $c1, $b8, $bc, $f7
11726     C6 C6 EA FB 
1172a     04 FD 0F 0A 
1172e     E8 F7 30 3E 
11732     57 4D 28 55 | 	byte	$c6, $c6, $ea, $fb, $04, $fd, $0f, $0a, $e8, $f7, $30, $3e, $57, $4d, $28, $55
11736     08 1B 6E 22 
1173a     57 1E CC 5F 
1173e     27 DE 39 A7 
11742     C5 0B 8A CE | 	byte	$08, $1b, $6e, $22, $57, $1e, $cc, $5f, $27, $de, $39, $a7, $c5, $0b, $8a, $ce
11746     E0 84 A8 B5 
1174a     AE ED CC B3 
1174e     D3 F7 0F 03 
11752     11 0D EB F5 | 	byte	$e0, $84, $a8, $b5, $ae, $ed, $cc, $b3, $d3, $f7, $0f, $03, $11, $0d, $eb, $f5
11756     2A 48 5E 5D 
1175a     2B 55 2A 0E 
1175e     72 41 3C 4B 
11762     D6 1E 5A F0 | 	byte	$2a, $48, $5e, $5d, $2b, $55, $2a, $0e, $72, $41, $3c, $4b, $d6, $1e, $5a, $f0
11766     21 EE A0 02 
1176a     CA A4 F7 A5 
1176e     95 C1 AB DA 
11772     E3 BB C6 EA | 	byte	$21, $ee, $a0, $02, $ca, $a4, $f7, $a5, $95, $c1, $ab, $da, $e3, $bb, $c6, $ea
11776     0C 06 0E 18 
1177a     F1 F7 17 39 
1177e     5B 5C 3A 48 
11782     46 F7 5B 53 | 	byte	$0c, $06, $0e, $18, $f1, $f7, $17, $39, $5b, $5c, $3a, $48, $46, $f7, $5b, $53
11786     26 57 E6 FA 
1178a     63 FE 07 07 
1178e     97 ED E6 8D 
11792     E6 C2 81 B2 | 	byte	$26, $57, $e6, $fa, $63, $fe, $07, $07, $97, $ed, $e6, $8d, $e6, $c2, $81, $b2
11796     9C C2 E3 B4 
1179a     B2 CB FD 0B 
1179e     F9 14 F9 E2 
117a2     FE 31 4D 6D | 	byte	$9c, $c2, $e3, $b4, $b2, $cb, $fd, $0b, $f9, $14, $f9, $e2, $fe, $31, $4d, $6d
117a6     59 34 55 08 
117aa     2B 79 25 5A 
117ae     18 CD 66 16 
117b2     EF 2F 9C CA | 	byte	$59, $34, $55, $08, $2b, $79, $25, $5a, $18, $cd, $66, $16, $ef, $2f, $9c, $ca
117b6     02 8F D2 D4 
117ba     80 AE 9A AC 
117be     E3 BE AD C3 
117c2     EE 04 00 01 | 	byte	$02, $8f, $d2, $d4, $80, $ae, $9a, $ac, $e3, $be, $ad, $c3, $ee, $04, $00, $01
117c6     06 E4 F7 29 
117ca     49 63 68 3C 
117ce     51 25 1A 79 
117d2     4C 4E 3B D2 | 	byte	$06, $e4, $f7, $29, $49, $63, $68, $3c, $51, $25, $1a, $79, $4c, $4e, $3b, $d2
117d6     42 41 EA 3C 
117da     C6 A5 0C 97 
117de     B8 E6 89 9A 
117e2     AD 9A D3 BD | 	byte	$42, $41, $ea, $3c, $c6, $a5, $0c, $97, $b8, $e6, $89, $9a, $ad, $9a, $d3, $bd
117e6     A7 B8 DE F3 
117ea     F4 01 01 EB 
117ee     FB 0C 3E 59 
117f2     61 51 50 3F | 	byte	$a7, $b8, $de, $f3, $f4, $01, $01, $eb, $fb, $0c, $3e, $59, $61, $51, $50, $3f
117f6     1B 67 67 48 
117fa     55 FA 11 56 
117fe     03 24 FA AB 
11802     FB D4 A4 E8 | 	byte	$1b, $67, $67, $48, $55, $fa, $11, $56, $03, $24, $fa, $ab, $fb, $d4, $a4, $e8
11806     A7 8D BD 9E 
1180a     C0 D1 AC B1 
1180e     CF E8 EF FD 
11812     01 EC F9 FD | 	byte	$a7, $8d, $bd, $9e, $c0, $d1, $ac, $b1, $cf, $e8, $ef, $fd, $01, $ec, $f9, $fd
11816     35 54 5D 58 
1181a     50 4A 13 65 
1181e     71 4C 65 0B 
11822     FD 5B 10 0E | 	byte	$35, $54, $5d, $58, $50, $4a, $13, $65, $71, $4c, $65, $0b, $fd, $5b, $10, $0e
11826     13 9F F0 DC 
1182a     8F EF B0 80 
1182e     AF 96 AA D6 
11832     A8 A4 C3 E5 | 	byte	$13, $9f, $f0, $dc, $8f, $ef, $b0, $80, $af, $96, $aa, $d6, $a8, $a4, $c3, $e5
11836     E8 F6 0E E3 
1183a     F4 F4 14 55 
1183e     60 5D 55 51 
11842     FA 4A 79 3D | 	byte	$e8, $f6, $0e, $e3, $f4, $f4, $14, $55, $60, $5d, $55, $51, $fa, $4a, $79, $3d
11846     69 26 D0 5D 
1184a     39 F0 35 AA 
1184e     C1 06 91 C7 
11852     DA 80 9E A8 | 	byte	$69, $26, $d0, $5d, $39, $f0, $35, $aa, $c1, $06, $91, $c7, $da, $80, $9e, $a8
11856     9D D2 C3 A4 
1185a     C0 E6 E3 EC 
1185e     0F EB FB 09 
11862     ED 41 5B 58 | 	byte	$9d, $d2, $c3, $a4, $c0, $e6, $e3, $ec, $0f, $eb, $fb, $09, $ed, $41, $5b, $58
11866     67 5B 0F 2C 
1186a     7F 53 65 55 
1186e     D3 3D 64 ED 
11872     3E F1 98 0F | 	byte	$67, $5b, $0f, $2c, $7f, $53, $65, $55, $d3, $3d, $64, $ed, $3e, $f1, $98, $0f
11876     B7 A3 F1 97 
1187a     8E BF 9B BD 
1187e     D1 A9 AE DF 
11882     EA E3 07 FC | 	byte	$b7, $a3, $f1, $97, $8e, $bf, $9b, $bd, $d1, $a9, $ae, $df, $ea, $e3, $07, $fc
11886     EC 1B EC 16 
1188a     5C 49 61 6B 
1188e     43 00 5C 79 
11892     4A 70 0F EA | 	byte	$ec, $1b, $ec, $16, $5c, $49, $61, $6b, $43, $00, $5c, $79, $4a, $70, $0f, $ea
11896     6A 3A 0C 3A 
1189a     A5 C2 04 89 
1189e     D5 C6 80 AB 
118a2     A8 A3 CA BB | 	byte	$6a, $3a, $0c, $3a, $a5, $c2, $04, $89, $d5, $c6, $80, $ab, $a8, $a3, $ca, $bb
118a6     A4 C0 E8 E4 
118aa     ED 08 E7 03 
118ae     0B E7 36 4B 
118b2     43 6B 4C 17 | 	byte	$a4, $c0, $e8, $e4, $ed, $08, $e7, $03, $0b, $e7, $36, $4b, $43, $6b, $4c, $17
118b6     0F 6F 5C 48 
118ba     68 DC 0E 72 
118be     02 34 10 9A 
118c2     F5 DF A0 E4 | 	byte	$0f, $6f, $5c, $48, $68, $dc, $0e, $72, $02, $34, $10, $9a, $f5, $df, $a0, $e4
118c6     9D 80 B0 9C 
118ca     AF BE AD A1 
118ce     D2 DF D8 FA 
118d2     EC EA 15 F2 | 	byte	$9d, $80, $b0, $9c, $af, $be, $ad, $a1, $d2, $df, $d8, $fa, $ec, $ea, $15, $f2
118d6     F4 3C 37 48 
118da     6C 41 20 20 
118de     60 55 58 50 
118e2     F3 29 62 14 | 	byte	$f4, $3c, $37, $48, $6c, $41, $20, $20, $60, $55, $58, $50, $f3, $29, $62, $14
118e6     40 09 B1 07 
118ea     D5 B8 F4 A1 
118ee     97 C5 A4 B9 
118f2     CC B8 B2 DB | 	byte	$40, $09, $b1, $07, $d5, $b8, $f4, $a1, $97, $c5, $a4, $b9, $cc, $b8, $b2, $db
118f6     DD E3 FB EB 
118fa     F3 10 FD EA 
118fe     2F 36 3F 66 
11902     47 21 19 5C | 	byte	$dd, $e3, $fb, $eb, $f3, $10, $fd, $ea, $2f, $36, $3f, $66, $47, $21, $19, $5c
11906     53 5B 49 E2 
1190a     33 57 07 52 
1190e     E7 BA 25 C1 
11912     C9 FE 91 AD | 	byte	$53, $5b, $49, $e2, $33, $57, $07, $52, $e7, $ba, $25, $c1, $c9, $fe, $91, $ad
11916     C2 A0 C8 C5 
1191a     A8 BD DD D7 
1191e     E6 F6 DC F7 
11922     0C F1 F2 23 | 	byte	$c2, $a0, $c8, $c5, $a8, $bd, $dd, $d7, $e6, $f6, $dc, $f7, $0c, $f1, $f2, $23
11926     2B 38 65 3E 
1192a     19 1B 4D 4F 
1192e     57 4D E7 31 
11932     57 03 46 02 | 	byte	$2b, $38, $65, $3e, $19, $1b, $4d, $4f, $57, $4d, $e7, $31, $57, $03, $46, $02
11936     AF 1C E0 BB 
1193a     05 A9 A5 D3 
1193e     A0 CB CE AD 
11942     B8 E0 DC E4 | 	byte	$af, $1c, $e0, $bb, $05, $a9, $a5, $d3, $a0, $cb, $ce, $ad, $b8, $e0, $dc, $e4
11946     FC E1 EF 15 
1194a     06 EA 18 2B 
1194e     2B 68 57 21 
11952     0C 3A 51 52 | 	byte	$fc, $e1, $ef, $15, $06, $ea, $18, $2b, $2b, $68, $57, $21, $0c, $3a, $51, $52
11956     6B FB 03 72 
1195a     11 30 3D B3 
1195e     0C 00 B3 0A 
11962     C6 91 D7 A5 | 	byte	$6b, $fb, $03, $72, $11, $30, $3d, $b3, $0c, $00, $b3, $0a, $c6, $91, $d7, $a5
11966     BA D7 AE AA 
1196a     CE D5 E0 F1 
1196e     E3 E7 05 0A 
11972     E8 FA 20 26 | 	byte	$ba, $d7, $ae, $aa, $ce, $d5, $e0, $f1, $e3, $e7, $05, $0a, $e8, $fa, $20, $26
11976     57 63 2C 07 
1197a     24 4B 4E 61 
1197e     24 DF 53 28 
11982     0F 38 C0 F7 | 	byte	$57, $63, $2c, $07, $24, $4b, $4e, $61, $24, $df, $53, $28, $0f, $38, $c0, $f7
11986     11 AE FC DA 
1198a     93 D3 B0 AB 
1198e     DE B9 AD C5 
11992     D2 E1 ED EA | 	byte	$11, $ae, $fc, $da, $93, $d3, $b0, $ab, $de, $b9, $ad, $c5, $d2, $e1, $ed, $ea
11996     E8 F0 13 F5 
1199a     E7 12 21 34 
1199e     67 43 14 0A 
119a2     3A 46 54 58 | 	byte	$e8, $f0, $13, $f5, $e7, $12, $21, $34, $67, $43, $14, $0a, $3a, $46, $54, $58
119a6     EC 1F 5C 00 
119aa     44 12 C0 29 
119ae     D5 D9 12 A9 
119b2     BC D6 9C D7 | 	byte	$ec, $1f, $5c, $00, $44, $12, $c0, $29, $d5, $d9, $12, $a9, $bc, $d6, $9c, $d7
119b6     CC A9 BB C6 
119ba     CE E6 E2 E1 
119be     DF 01 F9 DC 
119c2     04 1F 1E 65 | 	byte	$cc, $a9, $bb, $c6, $ce, $e6, $e2, $e1, $df, $01, $f9, $dc, $04, $1f, $1e, $65
119c6     49 18 00 23 
119ca     42 4D 5F FF 
119ce     F9 5D 0D 31 
119d2     30 BC 27 06 | 	byte	$49, $18, $00, $23, $42, $4d, $5f, $ff, $f9, $5d, $0d, $31, $30, $bc, $27, $06
119d6     BD 29 C2 BA 
119da     EA 9C C6 DF 
119de     AE BC C3 C2 
119e2     EA DF EA DC | 	byte	$bd, $29, $c2, $ba, $ea, $9c, $c6, $df, $ae, $bc, $c3, $c2, $ea, $df, $ea, $dc
119e6     F0 09 DC FA 
119ea     27 17 55 65 
119ee     2C 24 0E 49 
119f2     5C 66 41 E9 | 	byte	$f0, $09, $dc, $fa, $27, $17, $55, $65, $2c, $24, $0e, $49, $5c, $66, $41, $e9
119f6     52 39 18 4D 
119fa     CB 0B 1D B8 
119fe     1F E1 AA ED 
11a02     A6 B0 E0 B3 | 	byte	$52, $39, $18, $4d, $cb, $0b, $1d, $b8, $1f, $e1, $aa, $ed, $a6, $b0, $e0, $b3
11a06     B4 BC B9 DF 
11a0a     D8 E9 E0 DD 
11a0e     0A EC EB 16 
11a12     0F 26 62 3F | 	byte	$b4, $bc, $b9, $df, $d8, $e9, $e0, $dd, $0a, $ec, $eb, $16, $0f, $26, $62, $3f
11a16     2B F4 21 4E 
11a1a     44 61 FB 14 
11a1e     5F 11 46 11 
11a22     E4 2D D8 F0 | 	byte	$2b, $f4, $21, $4e, $44, $61, $fb, $14, $5f, $11, $46, $11, $e4, $2d, $d8, $f0
11a26     09 B8 DE C2 
11a2a     AB E2 BF C1 
11a2e     C2 BC E3 DA 
11a32     E1 EE D2 03 | 	byte	$09, $b8, $de, $c2, $ab, $e2, $bf, $c1, $c2, $bc, $e3, $da, $e1, $ee, $d2, $03
11a36     FE E7 05 0C 
11a3a     18 4A 49 2E 
11a3e     FB 14 45 40 
11a42     5D 17 FE 5A | 	byte	$fe, $e7, $05, $0c, $18, $4a, $49, $2e, $fb, $14, $45, $40, $5d, $17, $fe, $5a
11a46     1D 3B 32 DB 
11a4a     2F FA E2 1B 
11a4e     CA CC CE B0 
11a52     D6 BE C3 C3 | 	byte	$1d, $3b, $32, $db, $2f, $fa, $e2, $1b, $ca, $cc, $ce, $b0, $d6, $be, $c3, $c3
11a56     B2 DE DA CC 
11a5a     FA D0 F2 15 
11a5e     E6 FC 01 07 
11a62     3A 49 43 17 | 	byte	$b2, $de, $da, $cc, $fa, $d0, $f2, $15, $e6, $fc, $01, $07, $3a, $49, $43, $17
11a66     E7 3B 37 48 
11a6a     49 E7 37 45 
11a6e     11 51 DF 0B 
11a72     22 CF 24 DE | 	byte	$e7, $3b, $37, $48, $49, $e7, $37, $45, $11, $51, $df, $0b, $22, $cf, $24, $de
11a76     C8 E2 B6 DF 
11a7a     C2 C0 D3 AB 
11a7e     E1 DF BF F2 
11a82     D9 E4 0F EB | 	byte	$c8, $e2, $b6, $df, $c2, $c0, $d3, $ab, $e1, $df, $bf, $f2, $d9, $e4, $0f, $eb
11a86     F6 EF F2 22 
11a8a     2C 45 33 E2 
11a8e     05 3C 1F 59 
11a92     11 F1 58 1C | 	byte	$f6, $ef, $f2, $22, $2c, $45, $33, $e2, $05, $3c, $1f, $59, $11, $f1, $58, $1c
11a96     36 39 DB 30 
11a9a     F9 03 11 C9 
11a9e     EA CA DE DB 
11aa2     B0 DF BA CA | 	byte	$36, $39, $db, $30, $f9, $03, $11, $c9, $ea, $ca, $de, $db, $b0, $df, $ba, $ca
11aa6     F1 BF D9 E5 
11aaa     D2 00 F3 E4 
11aae     F2 E0 FD 1D 
11ab2     22 45 0F E0 | 	byte	$f1, $bf, $d9, $e5, $d2, $00, $f3, $e4, $f2, $e0, $fd, $1d, $22, $45, $0f, $e0
11ab6     20 27 28 54 
11aba     EE 15 51 03 
11abe     4C 17 EC 31 
11ac2     EE 1D FF D1 | 	byte	$20, $27, $28, $54, $ee, $15, $51, $03, $4c, $17, $ec, $31, $ee, $1d, $ff, $d1
11ac6     FA CF E7 DD 
11aca     B4 DB C0 D8 
11ace     EE C0 DA E4 
11ad2     DC 08 F6 E8 | 	byte	$fa, $cf, $e7, $dd, $b4, $db, $c0, $d8, $ee, $c0, $da, $e4, $dc, $08, $f6, $e8
11ad6     F3 DF 08 28 
11ada     29 49 04 DC 
11ade     30 26 37 55 
11ae2     E2 35 4A 08 | 	byte	$f3, $df, $08, $28, $29, $49, $04, $dc, $30, $26, $37, $55, $e2, $35, $4a, $08
11ae6     69 04 F7 47 
11aea     EE 26 FE D3 
11aee     F3 CA EF D0 
11af2     AC E1 C4 DA | 	byte	$69, $04, $f7, $47, $ee, $26, $fe, $d3, $f3, $ca, $ef, $d0, $ac, $e1, $c4, $da
11af6     F1 B6 D4 E1 
11afa     DA 09 F2 DB 
11afe     EE DA 02 23 
11b02     17 49 13 DD | 	byte	$f1, $b6, $d4, $e1, $da, $09, $f2, $db, $ee, $da, $02, $23, $17, $49, $13, $dd
11b06     26 2C 25 66 
11b0a     EC 31 61 01 
11b0e     60 FF 04 46 
11b12     E4 30 00 D1 | 	byte	$26, $2c, $25, $66, $ec, $31, $61, $01, $60, $ff, $04, $46, $e4, $30, $00, $d1
11b16     FE D4 EC D6 
11b1a     AC E0 C5 DF 
11b1e     EE A5 D1 E2 
11b22     DC 08 E7 D7 | 	byte	$fe, $d4, $ec, $d6, $ac, $e0, $c5, $df, $ee, $a5, $d1, $e2, $dc, $08, $e7, $d7
11b26     F1 DE FB 13 
11b2a     12 40 28 E3 
11b2e     0F 35 1C 60 
11b32     00 23 62 FA | 	byte	$f1, $de, $fb, $13, $12, $40, $28, $e3, $0f, $35, $1c, $60, $00, $23, $62, $fa
11b36     5A 27 02 4C 
11b3a     00 21 F9 E9 
11b3e     F2 DE E9 D3 
11b42     B5 D3 D3 D3 | 	byte	$5a, $27, $02, $4c, $00, $21, $f9, $e9, $f2, $de, $e9, $d3, $b5, $d3, $d3, $d3
11b46     E9 BA C1 E8 
11b4a     D8 FA EA D9 
11b4e     EB EA E9 05 
11b52     11 2F 40 01 | 	byte	$e9, $ba, $c1, $e8, $d8, $fa, $ea, $d9, $eb, $ea, $e9, $05, $11, $2f, $40, $01
11b56     F4 36 0C 54 
11b5a     22 06 59 16 
11b5e     3C 38 0F 3B 
11b62     05 14 08 F4 | 	byte	$f4, $36, $0c, $54, $22, $06, $59, $16, $3c, $38, $0f, $3b, $05, $14, $08, $f4
11b66     F1 E0 E7 D7 
11b6a     CC C7 D3 CE 
11b6e     DD C6 C4 DE 
11b72     D5 E9 E4 DD | 	byte	$f1, $e0, $e7, $d7, $cc, $c7, $d3, $ce, $dd, $c6, $c4, $de, $d5, $e9, $e4, $dd
11b76     E5 E7 E3 F3 
11b7a     0A 1B 37 12 
11b7e     ED 2B 12 3B 
11b82     38 07 4E 1F | 	byte	$e5, $e7, $e3, $f3, $0a, $1b, $37, $12, $ed, $2b, $12, $3b, $38, $07, $4e, $1f
11b86     29 48 06 37 
11b8a     0E 0E 0E F1 
11b8e     04 DC E9 DF 
11b92     CF C3 D2 C2 | 	byte	$29, $48, $06, $37, $0e, $0e, $0e, $f1, $04, $dc, $e9, $df, $cf, $c3, $d2, $c2
11b96     D5 D6 AE D3 
11b9a     CA D9 E6 D1 
11b9e     E1 E0 E0 DB 
11ba2     FD 0F 36 2F | 	byte	$d5, $d6, $ae, $d3, $ca, $d9, $e6, $d1, $e1, $e0, $e0, $db, $fd, $0f, $36, $2f
11ba6     E5 14 1D 24 
11baa     5F F5 3D 4A 
11bae     0D 59 0B 3F 
11bb2     30 00 31 E8 | 	byte	$e5, $14, $1d, $24, $5f, $f5, $3d, $4a, $0d, $59, $0b, $3f, $30, $00, $31, $e8
11bb6     13 D7 E8 EA 
11bba     C8 C1 CD BC 
11bbe     D4 E0 B0 D5 
11bc2     C9 CC F4 D1 | 	byte	$13, $d7, $e8, $ea, $c8, $c1, $cd, $bc, $d4, $e0, $b0, $d5, $c9, $cc, $f4, $d1
11bc6     EA E2 E9 E8 
11bca     F0 12 31 49 
11bce     1F EA 37 22 
11bd2     51 49 08 5F | 	byte	$ea, $e2, $e9, $e8, $f0, $12, $31, $49, $1f, $ea, $37, $22, $51, $49, $08, $5f
11bd6     32 40 3E 20 
11bda     4F 0C 26 02 
11bde     F9 10 D2 F7 
11be2     DE CB C9 C7 | 	byte	$32, $40, $3e, $20, $4f, $0c, $26, $02, $f9, $10, $d2, $f7, $de, $cb, $c9, $c7
11be6     C4 DD D2 B9 
11bea     D7 C5 DE E1 
11bee     E3 EE E6 F8 
11bf2     E3 FC 1F 26 | 	byte	$c4, $dd, $d2, $b9, $d7, $c5, $de, $e1, $e3, $ee, $e6, $f8, $e3, $fc, $1f, $26
11bf6     56 13 F2 41 
11bfa     13 56 3D 05 
11bfe     6A 28 3C 34 
11c02     20 4B 07 1E | 	byte	$56, $13, $f2, $41, $13, $56, $3d, $05, $6a, $28, $3c, $34, $20, $4b, $07, $1e
11c06     F9 FC F8 D0 
11c0a     F4 D6 CA C4 
11c0e     BF BE E5 C2 
11c12     BB D2 BC DE | 	byte	$f9, $fc, $f8, $d0, $f4, $d6, $ca, $c4, $bf, $be, $e5, $c2, $bb, $d2, $bc, $de
11c16     D8 EB E7 ED 
11c1a     F1 DD 02 08 
11c1e     2B 4D 26 F0 
11c22     32 18 48 47 | 	byte	$d8, $eb, $e7, $ed, $f1, $dd, $02, $08, $2b, $4d, $26, $f0, $32, $18, $48, $47
11c26     02 68 20 2B 
11c2a     35 1D 41 07 
11c2e     19 EB FF F5 
11c32     D3 F2 CF C9 | 	byte	$02, $68, $20, $2b, $35, $1d, $41, $07, $19, $eb, $ff, $f5, $d3, $f2, $cf, $c9
11c36     C0 B8 BF D4 
11c3a     C3 BE C1 C4 
11c3e     D6 D7 EE E3 
11c42     F3 F5 E4 FE | 	byte	$c0, $b8, $bf, $d4, $c3, $be, $c1, $c4, $d6, $d7, $ee, $e3, $f3, $f5, $e4, $fe
11c46     04 19 4F 40 
11c4a     F9 2B 24 27 
11c4e     67 0B 59 51 
11c52     16 63 25 2E | 	byte	$04, $19, $4f, $40, $f9, $2b, $24, $27, $67, $0b, $59, $51, $16, $63, $25, $2e
11c56     38 15 0F E9 
11c5a     05 DA E6 D7 
11c5e     C7 C9 BA AD 
11c62     C7 C2 BA C3 | 	byte	$38, $15, $0f, $e9, $05, $da, $e6, $d7, $c7, $c9, $ba, $ad, $c7, $c2, $ba, $c3
11c66     B5 CB D5 DE 
11c6a     E4 ED F7 EA 
11c6e     F9 F7 0F 40 
11c72     44 39 08 30 | 	byte	$b5, $cb, $d5, $de, $e4, $ed, $f7, $ea, $f9, $f7, $0f, $40, $44, $39, $08, $30
11c76     2E 4D 4D 1F 
11c7a     63 38 40 35 
11c7e     14 3B 1A 12 
11c82     F0 F6 DB DC | 	byte	$2e, $4d, $4d, $1f, $63, $38, $40, $35, $14, $3b, $1a, $12, $f0, $f6, $db, $dc
11c86     D2 C1 C7 AD 
11c8a     AD B1 BA BC 
11c8e     BD BA C5 D3 
11c92     D4 E5 E4 F5 | 	byte	$d2, $c1, $c7, $ad, $ad, $b1, $ba, $bc, $bd, $ba, $c5, $d3, $d4, $e5, $e4, $f5
11c96     F5 F0 03 01 
11c9a     1A 39 36 44 
11c9e     11 3F 2D 45 
11ca2     53 32 5B 3C | 	byte	$f5, $f0, $03, $01, $1a, $39, $36, $44, $11, $3f, $2d, $45, $53, $32, $5b, $3c
11ca6     3A 2B 17 2C 
11caa     20 0C EC EB 
11cae     DA D3 CC BD 
11cb2     C2 BB B4 B5 | 	byte	$3a, $2b, $17, $2c, $20, $0c, $ec, $eb, $da, $d3, $cc, $bd, $c2, $bb, $b4, $b5
11cb6     B8 BC C6 C3 
11cba     D6 D4 DA E9 
11cbe     E5 FE 04 F9 
11cc2     16 0A 11 31 | 	byte	$b8, $bc, $c6, $c3, $d6, $d4, $da, $e9, $e5, $fe, $04, $f9, $16, $0a, $11, $31
11cc6     39 59 3F 24 
11cca     40 2C 59 3F 
11cce     38 5A 29 39 
11cd2     11 08 24 00 | 	byte	$39, $59, $3f, $24, $40, $2c, $59, $3f, $38, $5a, $29, $39, $11, $08, $24, $00
11cd6     FA DC D2 CB 
11cda     C4 B0 BE B6 
11cde     B4 B5 A4 B7 
11ce2     CB C6 D2 D1 | 	byte	$fa, $dc, $d2, $cb, $c4, $b0, $be, $b6, $b4, $b5, $a4, $b7, $cb, $c6, $d2, $d1
11ce6     D8 EF F2 F4 
11cea     0F 0E 1F 26 
11cee     18 28 30 4A 
11cf2     65 4B 2D 43 | 	byte	$d8, $ef, $f2, $f4, $0f, $0e, $1f, $26, $18, $28, $30, $4a, $65, $4b, $2d, $43
11cf6     32 51 40 32 
11cfa     57 28 2E 03 
11cfe     F5 18 FE EC 
11d02     C5 CA C7 B5 | 	byte	$32, $51, $40, $32, $57, $28, $2e, $03, $f5, $18, $fe, $ec, $c5, $ca, $c7, $b5
11d06     B1 AD BB C2 
11d0a     BA AC BE C9 
11d0e     D3 DA DE EC 
11d12     FC FA 05 14 | 	byte	$b1, $ad, $bb, $c2, $ba, $ac, $be, $c9, $d3, $da, $de, $ec, $fc, $fa, $05, $14
11d16     1B 29 2D 28 
11d1a     32 33 36 52 
11d1e     54 45 33 2A 
11d22     2C 41 34 28 | 	byte	$1b, $29, $2d, $28, $32, $33, $36, $52, $54, $45, $33, $2a, $2c, $41, $34, $28
11d26     37 0E 17 EE 
11d2a     E6 F1 E5 DB 
11d2e     B7 C7 B3 AF 
11d32     B3 AF C3 C5 | 	byte	$37, $0e, $17, $ee, $e6, $f1, $e5, $db, $b7, $c7, $b3, $af, $b3, $af, $c3, $c5
11d36     BA BD CC D3 
11d3a     E7 E1 EC 02 
11d3e     0A 13 0D 1B 
11d42     2E 36 33 2A | 	byte	$ba, $bd, $cc, $d3, $e7, $e1, $ec, $02, $0a, $13, $0d, $1b, $2e, $36, $33, $2a
11d46     2C 3B 2C 34 
11d4a     42 46 26 25 
11d4e     12 14 34 F6 
11d52     17 0B F7 F0 | 	byte	$2c, $3b, $2c, $34, $42, $46, $26, $25, $12, $14, $34, $f6, $17, $0b, $f7, $f0
11d56     D3 D0 E6 D7 
11d5a     CB C4 C4 C1 
11d5e     C7 B2 C9 D5 
11d62     D7 D6 DB E3 | 	byte	$d3, $d0, $e6, $d7, $cb, $c4, $c4, $c1, $c7, $b2, $c9, $d5, $d7, $d6, $db, $e3
11d66     F7 F7 FA 0C 
11d6a     1A 1E 22 1D 
11d6e     2A 31 2D 2B 
11d72     2A 2A 24 1B | 	byte	$f7, $f7, $fa, $0c, $1a, $1e, $22, $1d, $2a, $31, $2d, $2b, $2a, $2a, $24, $1b
11d76     20 2F 2E 08 
11d7a     0C F6 05 0E 
11d7e     EF 02 F3 F3 
11d82     DF CB D8 E0 | 	byte	$20, $2f, $2e, $08, $0c, $f6, $05, $0e, $ef, $02, $f3, $f3, $df, $cb, $d8, $e0
11d86     DA CB D5 CF 
11d8a     D9 D0 D1 E3 
11d8e     EF F0 F3 F5 
11d92     FE 0A 05 13 | 	byte	$da, $cb, $d5, $cf, $d9, $d0, $d1, $e3, $ef, $f0, $f3, $f5, $fe, $0a, $05, $13
11d96     1E 24 24 1B 
11d9a     21 2B 25 25 
11d9e     1B 1E 1D 10 
11da2     06 07 11 1C | 	byte	$1e, $24, $24, $1b, $21, $2b, $25, $25, $1b, $1e, $1d, $10, $06, $07, $11, $1c
11da6     FB F4 F3 EA 
11daa     11 E3 EA 09 
11dae     EE F4 D6 D6 
11db2     ED E9 E5 E3 | 	byte	$fb, $f4, $f3, $ea, $11, $e3, $ea, $09, $ee, $f4, $d6, $d6, $ed, $e9, $e5, $e3
11db6     ED E8 EE E0 
11dba     F1 FF 05 FE 
11dbe     01 07 0E 0C 
11dc2     06 15 19 1B | 	byte	$ed, $e8, $ee, $e0, $f1, $ff, $05, $fe, $01, $07, $0e, $0c, $06, $15, $19, $1b
11dc6     15 10 15 18 
11dca     0F 0F 08 0B 
11dce     06 F5 F5 F2 
11dd2     03 0A F2 ED | 	byte	$15, $10, $15, $18, $0f, $0f, $08, $0b, $06, $f5, $f5, $f2, $03, $0a, $f2, $ed
11dd6     F0 F0 03 EF 
11dda     F4 0B FB FF 
11dde     F2 EC FE FF 
11de2     F8 FA 02 FF | 	byte	$f0, $f0, $03, $ef, $f4, $0b, $fb, $ff, $f2, $ec, $fe, $ff, $f8, $fa, $02, $ff
11de6     03 F8 FC 08 
11dea     0A 04 06 07 
11dee     05 07 01 02 
11df2     0B 06 05 04 | 	byte	$03, $f8, $fc, $08, $0a, $04, $06, $07, $05, $07, $01, $02, $0b, $06, $05, $04
11df6     02 04 F9 F9 
11dfa     F7 F9 F6 ED 
11dfe     EE EC F0 F9 
11e02     03 F6 FB F9 | 	byte	$02, $04, $f9, $f9, $f7, $f9, $f6, $ed, $ee, $ec, $f0, $f9, $03, $f6, $fb, $f9
11e06     F6 10 FE 0B 
11e0a     1D 14 1A 0C 
11e0e     04 13 10 0A 
11e12     0A 07 05 0A | 	byte	$f6, $10, $fe, $0b, $1d, $14, $1a, $0c, $04, $13, $10, $0a, $0a, $07, $05, $0a
11e16     F8 F8 FB FC 
11e1a     F8 F5 F4 F2 
11e1e     F5 EA F1 F3 
11e22     F4 F4 F3 F1 | 	byte	$f8, $f8, $fb, $fc, $f8, $f5, $f4, $f2, $f5, $ea, $f1, $f3, $f4, $f4, $f3, $f1
11e26     F6 F3 F0 F1 
11e2a     F2 F6 F8 F2 
11e2e     F7 F5 05 13 
11e32     11 08 15 13 | 	byte	$f6, $f3, $f0, $f1, $f2, $f6, $f8, $f2, $f7, $f5, $05, $13, $11, $08, $15, $13
11e36     20 1E 14 2D 
11e3a     2C 27 1D 0F 
11e3e     0B 12 FF F9 
11e42     01 FC FB EB | 	byte	$20, $1e, $14, $2d, $2c, $27, $1d, $0f, $0b, $12, $ff, $f9, $01, $fc, $fb, $eb
11e46     E2 E5 E3 E1 
11e4a     DF DF E2 E1 
11e4e     DE DD E4 E5 
11e52     EA E9 EE F5 | 	byte	$e2, $e5, $e3, $e1, $df, $df, $e2, $e1, $de, $dd, $e4, $e5, $ea, $e9, $ee, $f5
11e56     F2 F4 F1 F9 
11e5a     FA FD 00 04 
11e5e     09 07 16 1E 
11e62     1F 18 19 1E | 	byte	$f2, $f4, $f1, $f9, $fa, $fd, $00, $04, $09, $07, $16, $1e, $1f, $18, $19, $1e
11e66     28 1F 16 22 
11e6a     20 1C 0E 03 
11e6e     03 01 F7 EE 
11e72     ED EA E7 DA | 	byte	$28, $1f, $16, $22, $20, $1c, $0e, $03, $03, $01, $f7, $ee, $ed, $ea, $e7, $da
11e76     D6 D6 DA DB 
11e7a     DC DC E4 E6 
11e7e     E3 E5 EB F5 
11e82     F3 F8 FA 03 | 	byte	$d6, $d6, $da, $db, $dc, $dc, $e4, $e6, $e3, $e5, $eb, $f5, $f3, $f8, $fa, $03
11e86     05 05 06 09 
11e8a     0F 10 11 12 
11e8e     15 16 19 21 
11e92     21 1F 1E 1C | 	byte	$05, $05, $06, $09, $0f, $10, $11, $12, $15, $16, $19, $21, $21, $1f, $1e, $1c
11e96     1C 1A 13 17 
11e9a     18 14 09 FE 
11e9e     F5 F7 EE EA 
11ea2     E6 E6 E4 DC | 	byte	$1c, $1a, $13, $17, $18, $14, $09, $fe, $f5, $f7, $ee, $ea, $e6, $e6, $e4, $dc
11ea6     D7 D5 D9 DC 
11eaa     DB E1 E3 EA 
11eae     EE EE F5 FD 
11eb2     02 05 09 10 | 	byte	$d7, $d5, $d9, $dc, $db, $e1, $e3, $ea, $ee, $ee, $f5, $fd, $02, $05, $09, $10
11eb6     15 12 14 16 
11eba     1B 1B 16 16 
11ebe     18 1A 1B 1C 
11ec2     24 23 1A 1A | 	byte	$15, $12, $14, $16, $1b, $1b, $16, $16, $18, $1a, $1b, $1c, $24, $23, $1a, $1a
11ec6     16 17 11 0C 
11eca     0E 0C 00 F8 
11ece     EF ED E8 E4 
11ed2     E1 E2 E1 DD | 	byte	$16, $17, $11, $0c, $0e, $0c, $00, $f8, $ef, $ed, $e8, $e4, $e1, $e2, $e1, $dd
11ed6     DC E0 E3 E4 
11eda     E4 E7 F1 F6 
11ede     F8 FA FE 05 
11ee2     0A 0C 0F 14 | 	byte	$dc, $e0, $e3, $e4, $e4, $e7, $f1, $f6, $f8, $fa, $fe, $05, $0a, $0c, $0f, $14
11ee6     15 17 15 15 
11eea     18 14 11 11 
11eee     11 0D 0A 07 
11ef2     0C 13 10 09 | 	byte	$15, $17, $15, $15, $18, $14, $11, $11, $11, $0d, $0a, $07, $0c, $13, $10, $09
11ef6     09 06 08 00 
11efa     FA 03 04 FC 
11efe     F2 ED EC EA 
11f02     E2 DE E2 E8 | 	byte	$09, $06, $08, $00, $fa, $03, $04, $fc, $f2, $ed, $ec, $ea, $e2, $de, $e2, $e8
11f06     E5 E0 E4 E7 
11f0a     EC EA EC F4 
11f0e     F8 F9 FA FC 
11f12     03 07 06 06 | 	byte	$e5, $e0, $e4, $e7, $ec, $ea, $ec, $f4, $f8, $f9, $fa, $fc, $03, $07, $06, $06
11f16     0B 0C 0C 07 
11f1a     07 0B 0A 08 
11f1e     05 04 04 03 
11f22     02 02 08 0B | 	byte	$0b, $0c, $0c, $07, $07, $0b, $0a, $08, $05, $04, $04, $03, $02, $02, $08, $0b
11f26     0E 09 0C 0C 
11f2a     08 05 02 04 
11f2e     03 FF F8 F5 
11f32     F1 EF E9 EA | 	byte	$0e, $09, $0c, $0c, $08, $05, $02, $04, $03, $ff, $f8, $f5, $f1, $ef, $e9, $ea
11f36     ED EC ED EB 
11f3a     F0 F0 EF F1 
11f3e     F3 F9 FA FB 
11f42     FA 00 00 01 | 	byte	$ed, $ec, $ed, $eb, $f0, $f0, $ef, $f1, $f3, $f9, $fa, $fb, $fa, $00, $00, $01
11f46     00 01 02 03 
11f4a     03 02 04 04 
11f4e     01 02 03 05 
11f52     06 04 05 07 | 	byte	$00, $01, $02, $03, $03, $02, $04, $04, $01, $02, $03, $05, $06, $04, $05, $07
11f56     06 07 0C 11 
11f5a     11 10 0E 0D 
11f5e     0D 0A 06 06 
11f62     04 02 FC F8 | 	byte	$06, $07, $0c, $11, $11, $10, $0e, $0d, $0d, $0a, $06, $06, $04, $02, $fc, $f8
11f66     F4 F4 F2 F1 
11f6a     F0 F0 EF EE 
11f6e     EF EE EE EE 
11f72     F0 F3 F6 F7 | 	byte	$f4, $f4, $f2, $f1, $f0, $f0, $ef, $ee, $ef, $ee, $ee, $ee, $f0, $f3, $f6, $f7
11f76     F7 F9 F9 FC 
11f7a     FD 02 03 05 
11f7e     07 06 06 08 
11f82     08 09 0B 09 | 	byte	$f7, $f9, $f9, $fc, $fd, $02, $03, $05, $07, $06, $06, $08, $08, $09, $0b, $09
11f86     0B 0A 09 0B 
11f8a     08 0A 09 0B 
11f8e     09 0A 0A 08 
11f92     06 05 03 03 | 	byte	$0b, $0a, $09, $0b, $08, $0a, $09, $0b, $09, $0a, $0a, $08, $06, $05, $03, $03
11f96     02 00 FA F7 
11f9a     F5 F4 EF EE 
11f9e     EE ED ED EC 
11fa2     EB EC ED ED | 	byte	$02, $00, $fa, $f7, $f5, $f4, $ef, $ee, $ee, $ed, $ed, $ec, $eb, $ec, $ed, $ed
11fa6     F2 F3 F5 F9 
11faa     F9 FB 00 01 
11fae     01 04 05 06 
11fb2     07 06 07 06 | 	byte	$f2, $f3, $f5, $f9, $f9, $fb, $00, $01, $01, $04, $05, $06, $07, $06, $07, $06
11fb6     06 06 06 06 
11fba     06          | 	byte	$06[5]
11fbb     07 04 04 04 
11fbf     06 06 06 06 
11fc3     07 06 05 05 
11fc7     04 04 05 08 | 	byte	$07, $04, $04, $04, $06, $06, $06, $06, $07, $06, $05, $05, $04, $04, $05, $08
11fcb     09 0A 09 08 
11fcf     0A 0A 08 08 
11fd3     08 07 04 00 
11fd7     FF FC F9 F7 | 	byte	$09, $0a, $09, $08, $0a, $0a, $08, $08, $08, $07, $04, $00, $ff, $fc, $f9, $f7
11fdb     F7 F5 F4 F2 
11fdf     F3 F4 F5 F5 
11fe3     F5 F7 F9 F9 
11fe7     F8 FB FC FE | 	byte	$f7, $f5, $f4, $f2, $f3, $f4, $f5, $f5, $f5, $f7, $f9, $f9, $f8, $fb, $fc, $fe
11feb     00 FD 02 01 
11fef     00 FF FD 01 
11ff3     00 01 01 02 
11ff7     03 02 02 02 | 	byte	$00, $fd, $02, $01, $00, $ff, $fd, $01, $00, $01, $01, $02, $03, $02, $02, $02
11ffb     03 06 06 05 
11fff     07 06 05 05 
12003     03 02 00 00 
12007     00 00 FD FC | 	byte	$03, $06, $06, $05, $07, $06, $05, $05, $03, $02, $00, $00, $00, $00, $fd, $fc
1200b     FC FC FC FA 
1200f     FA FC FA F9 
12013     F9 F8 F8 F4 
12017     F4 F4 F3 F2 | 	byte	$fc, $fc, $fc, $fa, $fa, $fc, $fa, $f9, $f9, $f8, $f8, $f4, $f4, $f4, $f3, $f2
1201b     F0 F0 F0 F0 
1201f     EE F0 F2 F3 
12023     F5 F7 F7 F9 
12027     F9 FA FC 00 | 	byte	$f0, $f0, $f0, $f0, $ee, $f0, $f2, $f3, $f5, $f7, $f7, $f9, $f9, $fa, $fc, $00
1202b     02 04 04 04 
1202f     04 04 06 06 
12033     06 05 05 04 
12037     02 02 03 02 | 	byte	$02, $04, $04, $04, $04, $04, $06, $06, $06, $05, $05, $04, $02, $02, $03, $02
1203b     01 02 02 00 
1203f     00 FF FC FD 
12043     FC FC FD 02 
12047     03 02 01 00 | 	byte	$01, $02, $02, $00, $00, $ff, $fc, $fd, $fc, $fc, $fd, $02, $03, $02, $01, $00
1204b     01 FE FD FD 
1204f     FD FF F9 F9 
12053     F7 F8 F8 F8 
12057     F9 F9 F6 F4 | 	byte	$01, $fe, $fd, $fd, $fd, $ff, $f9, $f9, $f7, $f8, $f8, $f8, $f9, $f9, $f6, $f4
1205b     F7 F8 FA F9 
1205f     F9 FA FD FD 
12063     FD FC FC FD 
12067     00 02 02 03 | 	byte	$f7, $f8, $fa, $f9, $f9, $fa, $fd, $fd, $fd, $fc, $fc, $fd, $00, $02, $02, $03
1206b     03 02 02 02 
1206f     05 07 07 07 
12073     09 09 09 09 
12077     09 09 0B 0A | 	byte	$03, $02, $02, $02, $05, $07, $07, $07, $09, $09, $09, $09, $09, $09, $0b, $0a
1207b     0B 0C 0B 0B 
1207f     08 08 09 08 
12083     08 07 05 03 
12087     01 01 FD FB | 	byte	$0b, $0c, $0b, $0b, $08, $08, $09, $08, $08, $07, $05, $03, $01, $01, $fd, $fb
1208b     FA FB FB FA 
1208f     F8 F7 F7 F9 
12093     F9 F9 F8 F6 
12097     F8 F7 F7 F8 | 	byte	$fa, $fb, $fb, $fa, $f8, $f7, $f7, $f9, $f9, $f9, $f8, $f6, $f8, $f7, $f7, $f8
1209b     F5 F5 F9 FB 
1209f     F8 F9 FA FB 
120a3     FC FB FA FB 
120a7     FA FA FB FC | 	byte	$f5, $f5, $f9, $fb, $f8, $f9, $fa, $fb, $fc, $fb, $fa, $fb, $fa, $fa, $fb, $fc
120ab     FF 00 02 01 
120af     01 02 03 02 
120b3     02 02 04 05 
120b7     04 03 03 03 | 	byte	$ff, $00, $02, $01, $01, $02, $03, $02, $02, $02, $04, $05, $04, $03, $03, $03
120bb     05 04 03 02 
120bf     03 02 01 01 
120c3     00 FD FE FB 
120c7     FA F8 F7 F6 | 	byte	$05, $04, $03, $02, $03, $02, $01, $01, $00, $fd, $fe, $fb, $fa, $f8, $f7, $f6
120cb     F6 F4 F3 F4 
120cf     F5 F6 F7 F7 
120d3     F7 F9 FA FB 
120d7     FC FC 00 02 | 	byte	$f6, $f4, $f3, $f4, $f5, $f6, $f7, $f7, $f7, $f9, $fa, $fb, $fc, $fc, $00, $02
120db     02 03 05 07 
120df     08 06 06 08 
120e3     09 09 0B 0A 
120e7     09 09 0A 09 | 	byte	$02, $03, $05, $07, $08, $06, $06, $08, $09, $09, $0b, $0a, $09, $09, $0a, $09
120eb     09 07 06 05 
120ef     04 02 01 FD 
120f3     FB FA F8 F6 
120f7     F7 F7 F6 F5 | 	byte	$09, $07, $06, $05, $04, $02, $01, $fd, $fb, $fa, $f8, $f6, $f7, $f7, $f6, $f5
120fb     F5 F5 F6 F7 
120ff     F8 F6 F8 FA 
12103     F9 F9 F8 FA 
12107     FA FA FA FB | 	byte	$f5, $f5, $f6, $f7, $f8, $f6, $f8, $fa, $f9, $f9, $f8, $fa, $fa, $fa, $fa, $fb
1210b     FD FE FF 01 
1210f     03 02 04 03 
12113     04 04 03 03 
12117     03 02 02 00 | 	byte	$fd, $fe, $ff, $01, $03, $02, $04, $03, $04, $04, $03, $03, $03, $02, $02, $00
1211b     00 FE FB FB 
1211f     FA FA F8 F7 
12123     F6 F5 F5 F6 
12127     F6 F4 F6 F5 | 	byte	$00, $fe, $fb, $fb, $fa, $fa, $f8, $f7, $f6, $f5, $f5, $f6, $f6, $f4, $f6, $f5
1212b     F4 F6 F6 F7 
1212f     F5 F7 F6 F6 
12133     F7 F7 F7 F9 
12137     FA FC FB FC | 	byte	$f4, $f6, $f6, $f7, $f5, $f7, $f6, $f6, $f7, $f7, $f7, $f9, $fa, $fc, $fb, $fc
1213b     01 01 02 03 
1213f     04 05 07 08 
12143     09 08 05 05 
12147     05 05 04 03 | 	byte	$01, $01, $02, $03, $04, $05, $07, $08, $09, $08, $05, $05, $05, $05, $04, $03
1214b     00 00 FD FD 
1214f     FC FB FB FB 
12153     FC FC FC FB 
12157     FC FE FC FD | 	byte	$00, $00, $fd, $fd, $fc, $fb, $fb, $fb, $fc, $fc, $fc, $fb, $fc, $fe, $fc, $fd
1215b     FD FD FB FD 
1215f     00 FD FD FE 
12163     00 01 03 02 
12167     02 03 02 03 | 	byte	$fd, $fd, $fb, $fd, $00, $fd, $fd, $fe, $00, $01, $03, $02, $02, $03, $02, $03
1216b     06 06 05 06 
1216f     04 04 03 04 
12173     04 03 02 02 
12177     FF FD FC FA | 	byte	$06, $06, $05, $06, $04, $04, $03, $04, $04, $03, $02, $02, $ff, $fd, $fc, $fa
1217b     F9 F8 FA F9 
1217f     F7 F7 F8 F8 
12183     F8 F9 FA FB 
12187     FC 02 03 02 | 	byte	$f9, $f8, $fa, $f9, $f7, $f7, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $02, $03, $02
1218b     04 04 04 05 
1218f     05 05 04 04 
12193     02 03 03 03 
12197     02 01 03 02 | 	byte	$04, $04, $04, $05, $05, $05, $04, $04, $02, $03, $03, $03, $02, $01, $03, $02
1219b     02 02 02 03 
1219f     02 02 04 03 
121a3     03 01 02 03 
121a7     04 04 02 02 | 	byte	$02, $02, $02, $03, $02, $02, $04, $03, $03, $01, $02, $03, $04, $04, $02, $02
121ab     00 00 00 01 
121af     FE FD FD FC 
121b3     FC FC FC FC 
121b7     FB FA F9 FB | 	byte	$00, $00, $00, $01, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fa, $f9, $fb
121bb     FC FD FD FC 
121bf     FC FC FC FD 
121c3     FC FC FD FC 
121c7     FC FC FC FC | 	byte	$fc, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fc, $fc, $fd, $fc, $fc, $fc, $fc, $fc
121cb     FD FC FC FC 
121cf     FF 00 FD FF 
121d3     00 01 02 02 
121d7     01 01 FF 00 | 	byte	$fd, $fc, $fc, $fc, $ff, $00, $fd, $ff, $00, $01, $02, $02, $01, $01, $ff, $00
121db     00 FE FD FD 
121df     FD FD FB FC 
121e3     FB FA FB FB 
121e7     FC FB FC FC | 	byte	$00, $fe, $fd, $fd, $fd, $fd, $fb, $fc, $fb, $fa, $fb, $fb, $fc, $fb, $fc, $fc
121eb     FD 00 01 01 
121ef     00 01 01 01 
121f3     01 01 01 02 
121f7     00 00 00 FD | 	byte	$fd, $00, $01, $01, $00, $01, $01, $01, $01, $01, $01, $02, $00, $00, $00, $fd
121fb     FF FD FD 00 
121ff     FD 00 FD FE 
12203     FC FD FF 01 
12207     01 02 02 02 | 	byte	$ff, $fd, $fd, $00, $fd, $00, $fd, $fe, $fc, $fd, $ff, $01, $01, $02, $02, $02
1220b     02 02 02 00 
1220f     00 FD FD FC 
12213     FC FC FC FA 
12217     F8 F8 F8 F7 | 	byte	$02, $02, $02, $00, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fa, $f8, $f8, $f8, $f7
1221b     F7 F6 F7 F7 
1221f     F6 F6 F6 F8 
12223     F9 F9 F9 F9 
12227     FA FB FB FC | 	byte	$f7, $f6, $f7, $f7, $f6, $f6, $f6, $f8, $f9, $f9, $f9, $f9, $fa, $fb, $fb, $fc
1222b     FC FD 01 02 
1222f     02 00 01 01 
12233     01 01 01 00 
12237     00 00 00 00 | 	byte	$fc, $fd, $01, $02, $02, $00, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00
1223b     00 00 00 05 
1223f     05 00 FF 00 
12243     00 00 00 00 
12247     00 00 00 00 | 	byte	$00, $00, $00, $05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00
1224b     00 00 00 00 
      ...             
12273     00 00 00 00 
12277     00          | 	byte	$00[45]
12278     FF 20 FF 08 
1227c     1F E8 2F EC 
12280     10 15 10 0A 
12284     11 07 11 09 | 	byte	$ff, $20, $ff, $08, $1f, $e8, $2f, $ec, $10, $15, $10, $0a, $11, $07, $11, $09
12288     18 01 08 0A 
1228c     0A 02 0F 18 
12290     17 20 FF 00 
12294     00 BD FF 2E | 	byte	$18, $01, $08, $0a, $0a, $02, $0f, $18, $17, $20, $ff, $00, $00, $bd, $ff, $2e
12298     3F 20 0A F0 
1229c     FF 3A 22 F0 
122a0     AA 9F 0F 7F 
122a4     78 17 00 87 | 	byte	$3f, $20, $0a, $f0, $ff, $3a, $22, $f0, $aa, $9f, $0f, $7f, $78, $17, $00, $87
122a8     37 27 E8 FF 
122ac     4F 78 E0 80 
122b0     C0 AF 2A 18 
122b4     74 EF 4F 10 | 	byte	$37, $27, $e8, $ff, $4f, $78, $e0, $80, $c0, $af, $2a, $18, $74, $ef, $4f, $10
122b8     FF 08 00 BF 
122bc     00 FF 28 05 
122c0     4E F7 50 2C 
122c4     3B 20 ED A4 | 	byte	$ff, $08, $00, $bf, $00, $ff, $28, $05, $4e, $f7, $50, $2c, $3b, $20, $ed, $a4
122c8     E7 FF 37 40 
122cc     1F 08 3F 5A 
122d0     08 E0 9B 98 
122d4     CF 1B 5F 76 | 	byte	$e7, $ff, $37, $40, $1f, $08, $3f, $5a, $08, $e0, $9b, $98, $cf, $1b, $5f, $76
122d8     5B 30 D6 C8 
122dc     A8 B7 FF 4F 
122e0     60 3F 70 C9 
122e4     CD D0 3F 1F | 	byte	$5b, $30, $d6, $c8, $a8, $b7, $ff, $4f, $60, $3f, $70, $c9, $cd, $d0, $3f, $1f
122e8     60 EB C0 CF 
122ec     ED 5F ED 50 
122f0     DF 20 FF 00 
122f4     FF E0 CC FF | 	byte	$60, $eb, $c0, $cf, $ed, $5f, $ed, $50, $df, $20, $ff, $00, $ff, $e0, $cc, $ff
122f8     FF 48 30 11 
122fc     C8 FF D1 2F 
12300     30 17 20 FF 
12304     60 64 20 A0 | 	byte	$ff, $48, $30, $11, $c8, $ff, $d1, $2f, $30, $17, $20, $ff, $60, $64, $20, $a0
12308     8F 80 FF 7F 
1230c     20 7F C0 97 
12310     EA 5F 60 F0 
12314     80 9F BF 58 | 	byte	$8f, $80, $ff, $7f, $20, $7f, $c0, $97, $ea, $5f, $60, $f0, $80, $9f, $bf, $58
12318     27 7F 40 83 
1231c     F8 FF 5B 60 
12320     00 90 8F BF 
12324     37 66 67 7F | 	byte	$27, $7f, $40, $83, $f8, $ff, $5b, $60, $00, $90, $8f, $bf, $37, $66, $67, $7f
12328     00 BB B0 BF 
1232c     48 FF 40 AB 
12330     FF 12 7F 54 
12334     10 AB BC EF | 	byte	$00, $bb, $b0, $bf, $48, $ff, $40, $ab, $ff, $12, $7f, $54, $10, $ab, $bc, $ef
12338     08 3F 3C 20 
1233c     09 27 20 27 
12340     C0 EF 97 38 
12344     FF 60 FF 00 | 	byte	$08, $3f, $3c, $20, $09, $27, $20, $27, $c0, $ef, $97, $38, $ff, $60, $ff, $00
12348     1F EB 68 D7 
1234c     30 B7 E8 FF 
12350     1D 01 48 F7 
12354     34 18 FF 2A | 	byte	$1f, $eb, $68, $d7, $30, $b7, $e8, $ff, $1d, $01, $48, $f7, $34, $18, $ff, $2a
12358     E8 17 00 DC 
1235c     E6 1F 20 5F 
12360     28 00 E4 B7 
12364     00 1F E0 3F | 	byte	$e8, $17, $00, $dc, $e6, $1f, $20, $5f, $28, $00, $e4, $b7, $00, $1f, $e0, $3f
12368     E0 37 0B 18 
1236c     F0 1F 00 2F 
12370     00 20 DF 00 
12374     DF 02 27 00 | 	byte	$e0, $37, $0b, $18, $f0, $1f, $00, $2f, $00, $20, $df, $00, $df, $02, $27, $00
12378     3F D4 18 DF 
1237c     20 FF 10 FF 
12380     10 E0 1F 21 
12384     E8 FF 10 0F | 	byte	$3f, $d4, $18, $df, $20, $ff, $10, $ff, $10, $e0, $1f, $21, $e8, $ff, $10, $0f
12388     14 30 DB F0 
1238c     E9 0A 4C C8 
12390     3F 93 3E FF 
12394     40 20 FF E0 | 	byte	$14, $30, $db, $f0, $e9, $0a, $4c, $c8, $3f, $93, $3e, $ff, $40, $20, $ff, $e0
12398     E7 2C CF 40 
1239c     DF 00 FF E0 
123a0     3F F7 40 C5 
123a4     D0 D3 FF 2C | 	byte	$e7, $2c, $cf, $40, $df, $00, $ff, $e0, $3f, $f7, $40, $c5, $d0, $d3, $ff, $2c
123a8     3F 4F 10 C0 
123ac     9A 9B DF 3F 
123b0     68 00 37 E2 
123b4     E0 1F 08 4F | 	byte	$3f, $4f, $10, $c0, $9a, $9b, $df, $3f, $68, $00, $37, $e2, $e0, $1f, $08, $4f
123b8     E0 F6 80 FF 
123bc     1F 54 50 E0 
123c0     0F 9D 5F F2 
123c4     0F 00 DF C0 | 	byte	$e0, $f6, $80, $ff, $1f, $54, $50, $e0, $0f, $9d, $5f, $f2, $0f, $00, $df, $c0
123c8     FF 3B 0B 68 
123cc     1F E0 17 00 
123d0     F3 F4 DF 08 
123d4     2F 00 2F D2 | 	byte	$ff, $3b, $0b, $68, $1f, $e0, $17, $00, $f3, $f4, $df, $08, $2f, $00, $2f, $d2
123d8     48 D7 40 FF 
123dc     00 FF 20 D3 
123e0     3E CF 28 E4 
123e4     DF 00 24 DF | 	byte	$48, $d7, $40, $ff, $00, $ff, $20, $d3, $3e, $cf, $28, $e4, $df, $00, $24, $df
123e8     18 3F 40 ED 
123ec     2F A0 1E DF 
123f0     40 1F 40 2F 
123f4     C0 FF 9B 10 | 	byte	$18, $3f, $40, $ed, $2f, $a0, $1e, $df, $40, $1f, $40, $2f, $c0, $ff, $9b, $10
123f8     FF 70 00 1F 
123fc     C0 0F EF 48 
12400     FF 20 38 A0 
12404     37 E3 18 2F | 	byte	$ff, $70, $00, $1f, $c0, $0f, $ef, $48, $ff, $20, $38, $a0, $37, $e3, $18, $2f
12408     20 FF 20 DF 
1240c     30 BF 40 FF 
12410     00 FF C4 4F 
12414     00 F7 20 FF | 	byte	$20, $ff, $20, $df, $30, $bf, $40, $ff, $00, $ff, $c4, $4f, $00, $f7, $20, $ff
12418     10 0B 30 BF 
1241c     40 DF 40 DF 
12420     0D C8 3F F7 
12424     40 1F 10 FF | 	byte	$10, $0b, $30, $bf, $40, $df, $40, $df, $0d, $c8, $3f, $f7, $40, $1f, $10, $ff
12428     C0 BF 30 DB 
1242c     58 44 FD D0 
12430     E0 B7 35 30 
12434     F7 7B 10 8D | 	byte	$c0, $bf, $30, $db, $58, $44, $fd, $d0, $e0, $b7, $35, $30, $f7, $7b, $10, $8d
12438     CF D0 FF 40 
1243c     CF 0C 40 80 
12440     3F 80 BF 3F 
12444     18 EF 7E A0 | 	byte	$cf, $d0, $ff, $40, $cf, $0c, $40, $80, $3f, $80, $bf, $3f, $18, $ef, $7e, $a0
12448     6F 40 DF 20 
1244c     F7 DF 70 AF 
12450     30 DF C0 1F 
12454     B7 7C D3 74 | 	byte	$6f, $40, $df, $20, $f7, $df, $70, $af, $30, $df, $c0, $1f, $b7, $7c, $d3, $74
12458     E4 A5 00 87 
1245c     FF C0 1F 60 
12460     27 77 60 FA 
12464     00 87 26 07 | 	byte	$e4, $a5, $00, $87, $ff, $c0, $1f, $60, $27, $77, $60, $fa, $00, $87, $26, $07
12468     F7 20 BD 3B 
1246c     D3 0E E0 FF 
12470     00 5F 20 E0 
12474     10 17 00 3F | 	byte	$f7, $20, $bd, $3b, $d3, $0e, $e0, $ff, $00, $5f, $20, $e0, $10, $17, $00, $3f
12478     68 E8 F5 C8 
1247c     80 BF EF 7F 
12480     08 26 DB E0 
12484     FF 40 7F 20 | 	byte	$68, $e8, $f5, $c8, $80, $bf, $ef, $7f, $08, $26, $db, $e0, $ff, $40, $7f, $20
12488     3F 50 C0 E8 
1248c     A9 9F 3F A0 
12490     1F CF E8 5F 
12494     40 64 E7 40 | 	byte	$3f, $50, $c0, $e8, $a9, $9f, $3f, $a0, $1f, $cf, $e8, $5f, $40, $64, $e7, $40
12498     BF 00 DF A0 
1249c     F9 80 1F 5D 
124a0     20 73 7E 00 
124a4     F7 C5 40 DF | 	byte	$bf, $00, $df, $a0, $f9, $80, $1f, $5d, $20, $73, $7e, $00, $f7, $c5, $40, $df
124a8     C0 FF 80 3C 
124ac     A1 28 FF 40 
124b0     FF 40 E8 B5 
124b4     C8 FF F8 0F | 	byte	$c0, $ff, $80, $3c, $a1, $28, $ff, $40, $ff, $40, $e8, $b5, $c8, $ff, $f8, $0f
124b8     50 5F 1A 7F 
124bc     20 3F 10 EF 
124c0     28 9B D2 80 
124c4     DF 2F 40 5F | 	byte	$50, $5f, $1a, $7f, $20, $3f, $10, $ef, $28, $9b, $d2, $80, $df, $2f, $40, $5f
124c8     60 77 00 E8 
124cc     80 A0 BF 00 
124d0     6F 00 7F F1 
124d4     40 97 D6 FF | 	byte	$60, $77, $00, $e8, $80, $a0, $bf, $00, $6f, $00, $7f, $f1, $40, $97, $d6, $ff
124d8     57 20 60 FF 
124dc     50 E4 DF F0 
124e0     D0 80 F0 80 
124e4     FF 3F 24 53 | 	byte	$57, $20, $60, $ff, $50, $e4, $df, $f0, $d0, $80, $f0, $80, $ff, $3f, $24, $53
124e8     3A 7B 60 F0 
124ec     34 A0 C4 80 
124f0     BF 05 26 74 
124f4     27 63 50 0F | 	byte	$3a, $7b, $60, $f0, $34, $a0, $c4, $80, $bf, $05, $26, $74, $27, $63, $50, $0f
124f8     F0 14 BF 20 
124fc     E7 0C 0F 4F 
12500     00 E8 BF 20 
12504     1F 60 17 18 | 	byte	$f0, $14, $bf, $20, $e7, $0c, $0f, $4f, $00, $e8, $bf, $20, $1f, $60, $17, $18
12508     FF 58 EF 40 
1250c     BF C0 BF FB 
12510     48 3F 00 FF 
12514     08 EB 6F 00 | 	byte	$ff, $58, $ef, $40, $bf, $c0, $bf, $fb, $48, $3f, $00, $ff, $08, $eb, $6f, $00
12518     70 90 F8 9F 
1251c     17 60 C0 3F 
12520     C0 DB E2 FF 
12524     00 4F 78 14 | 	byte	$70, $90, $f8, $9f, $17, $60, $c0, $3f, $c0, $db, $e2, $ff, $00, $4f, $78, $14
12528     40 C0 FF C0 
1252c     FF FF 40 1F 
12530     40 FF 00 EB 
12534     28 DF 20 FF | 	byte	$40, $c0, $ff, $c0, $ff, $ff, $40, $1f, $40, $ff, $00, $eb, $28, $df, $20, $ff
12538     48 20 AF E8 
1253c     87 4F 02 3F 
12540     00 1F A8 CF 
12544     10 FF 20 3F | 	byte	$48, $20, $af, $e8, $87, $4f, $02, $3f, $00, $1f, $a8, $cf, $10, $ff, $20, $3f
12548     40 FF 40 EF 
1254c     68 DF A0 9F 
12550     9F 4F 07 28 
12554     57 08 EF C0 | 	byte	$40, $ff, $40, $ef, $68, $df, $a0, $9f, $9f, $4f, $07, $28, $57, $08, $ef, $c0
12558     FF C3 28 17 
1255c     00 17 14 C8 
12560     CF 28 B3 2B 
12564     00 DF 00 7F | 	byte	$ff, $c3, $28, $17, $00, $17, $14, $c8, $cf, $28, $b3, $2b, $00, $df, $00, $7f
12568     18 2F 78 1B 
1256c     68 D2 1F C0 
12570     EC 88 87 B2 
12574     EF 44 17 7F | 	byte	$18, $2f, $78, $1b, $68, $d2, $1f, $c0, $ec, $88, $87, $b2, $ef, $44, $17, $7f
12578     00 4B 20 DB 
1257c     80 BF 0F 03 
12580     50 57 65 60 
12584     30 9F F0 97 | 	byte	$00, $4b, $20, $db, $80, $bf, $0f, $03, $50, $57, $65, $60, $30, $9f, $f0, $97
12588     C0 EF A0 F7 
1258c     10 DF 40 1F 
12590     40 5F 40 7F 
12594     00 37 C8 FF | 	byte	$c0, $ef, $a0, $f7, $10, $df, $40, $1f, $40, $5f, $40, $7f, $00, $37, $c8, $ff
12598     E0 BF A0 8A 
1259c     AF 14 CF 2F 
125a0     5F 7F 4C 7B 
125a4     20 5C D9 B0 | 	byte	$e0, $bf, $a0, $8a, $af, $14, $cf, $2f, $5f, $7f, $4c, $7b, $20, $5c, $d9, $b0
125a8     BF 80 CF 00 
125ac     FF 40 3F 40 
125b0     3F A0 D2 83 
125b4     3F 7F 2B 7F | 	byte	$bf, $80, $cf, $00, $ff, $40, $3f, $40, $3f, $a0, $d2, $83, $3f, $7f, $2b, $7f
125b8     78 4F 00 DF 
125bc     F0 1C B0 80 
125c0     8A 8F FF 6F 
125c4     30 7F 78 70 | 	byte	$78, $4f, $00, $df, $f0, $1c, $b0, $80, $8a, $8f, $ff, $6f, $30, $7f, $78, $70
125c8     FB 10 BF C0 
125cc     9F EF 13 67 
125d0     2C 27 00 BF 
125d4     EF 58 B0 FF | 	byte	$fb, $10, $bf, $c0, $9f, $ef, $13, $67, $2c, $27, $00, $bf, $ef, $58, $b0, $ff
125d8     40 2B 65 77 
125dc     10 1F 40 1D 
125e0     1F 2E 20 A8 
125e4     8F A0 EB 1F | 	byte	$40, $2b, $65, $77, $10, $1f, $40, $1d, $1f, $2e, $20, $a8, $8f, $a0, $eb, $1f
125e8     30 BF E0 B4 
125ec     EF 7F 68 7F 
125f0     00 1F 00 5F 
125f4     40 10 D0 80 | 	byte	$30, $bf, $e0, $b4, $ef, $7f, $68, $7f, $00, $1f, $00, $5f, $40, $10, $d0, $80
125f8     B0 EF FF 4F 
125fc     70 01 00 DF 
12600     E0 3F 30 1F 
12604     60 BF 27 30 | 	byte	$b0, $ef, $ff, $4f, $70, $01, $00, $df, $e0, $3f, $30, $1f, $60, $bf, $27, $30
12608     E0 8C A0 9F 
1260c     FF 09 6F 70 
12610     6F 2D 3A 10 
12614     A0 B4 90 DF | 	byte	$e0, $8c, $a0, $9f, $ff, $09, $6f, $70, $6f, $2d, $3a, $10, $a0, $b4, $90, $df
12618     2F 7C 60 E0 
1261c     B7 BF 1F 77 
12620     40 60 08 EF 
12624     27 21 14 CB | 	byte	$2f, $7c, $60, $e0, $b7, $bf, $1f, $77, $40, $60, $08, $ef, $27, $21, $14, $cb
12628     48 A3 E8 98 
1262c     BF 00 73 0F 
12630     40 B7 FF 72 
12634     19 57 78 E0 | 	byte	$48, $a3, $e8, $98, $bf, $00, $73, $0f, $40, $b7, $ff, $72, $19, $57, $78, $e0
12638     CF F0 BA BF 
1263c     E0 EF CF 60 
12640     DF 30 2F 7F 
12644     7E 20 E8 A1 | 	byte	$cf, $f0, $ba, $bf, $e0, $ef, $cf, $60, $df, $30, $2f, $7f, $7e, $20, $e8, $a1
12648     DF 10 BF 10 
1264c     80 B0 9F 20 
12650     3F 38 77 78 
12654     50 1D 00 DF | 	byte	$df, $10, $bf, $10, $80, $b0, $9f, $20, $3f, $38, $77, $78, $50, $1d, $00, $df
12658     80 D7 CF 50 
1265c     FF 60 28 13 
12660     35 08 77 04 
12664     00 19 C1 2F | 	byte	$80, $d7, $cf, $50, $ff, $60, $28, $13, $35, $08, $77, $04, $00, $19, $c1, $2f
12668     00 D7 C4 80 
1266c     DF 2F 35 67 
12670     68 40 10 B9 
12674     E2 CB DB 1E | 	byte	$00, $d7, $c4, $80, $df, $2f, $35, $67, $68, $40, $10, $b9, $e2, $cb, $db, $1e
12678     1D 4F 08 2F 
1267c     6A 0B 00 80 
12680     80 80 1F 5D 
12684     6B 7F 48 37 | 	byte	$1d, $4f, $08, $2f, $6a, $0b, $00, $80, $80, $80, $1f, $5d, $6b, $7f, $48, $37
12688     E0 1F 10 DF 
1268c     C0 85 80 AF 
12690     3F 70 5F 60 
12694     6F 40 F8 EF | 	byte	$e0, $1f, $10, $df, $c0, $85, $80, $af, $3f, $70, $5f, $60, $6f, $40, $f8, $ef
12698     E0 80 AF 07 
1269c     3F 28 4E 5A 
126a0     23 30 07 2F 
126a4     00 98 80 AF | 	byte	$e0, $80, $af, $07, $3f, $28, $4e, $5a, $23, $30, $07, $2f, $00, $98, $80, $af
126a8     1F 44 5B 63 
126ac     55 34 0B 08 
126b0     16 05 37 48 
126b4     E0 FF E2 E7 | 	byte	$1f, $44, $5b, $63, $55, $34, $0b, $08, $16, $05, $37, $48, $e0, $ff, $e2, $e7
126b8     98 87 DF 1F 
126bc     42 6B 7F 70 
126c0     30 E2 C0 9B 
126c4     AE C7 E5 F7 | 	byte	$98, $87, $df, $1f, $42, $6b, $7f, $70, $30, $e2, $c0, $9b, $ae, $c7, $e5, $f7
126c8     27 20 27 74 
126cc     68 48 08 C8 
126d0     80 80 DF 25 
126d4     44 3A 3A 3B | 	byte	$27, $20, $27, $74, $68, $48, $08, $c8, $80, $80, $df, $25, $44, $3a, $3a, $3b
126d8     4F 50 08 CD 
126dc     F7 23 3B 40 
126e0     3F 40 20 00 
126e4     E4 B6 AC 9D | 	byte	$4f, $50, $08, $cd, $f7, $23, $3b, $40, $3f, $40, $20, $00, $e4, $b6, $ac, $9d
126e8     B4 B3 ED D4 
126ec     EF 4F 68 58 
126f0     22 0B 26 3F 
126f4     20 0A F2 17 | 	byte	$b4, $b3, $ed, $d4, $ef, $4f, $68, $58, $22, $0b, $26, $3f, $20, $0a, $f2, $17
126f8     08 1F 48 10 
126fc     D0 B8 A3 D7 
12700     17 37 30 25 
12704     22 10 C0 CE | 	byte	$08, $1f, $48, $10, $d0, $b8, $a3, $d7, $17, $37, $30, $25, $22, $10, $c0, $ce
12708     BF FA 2F 2C 
1270c     08 0F 4C 5B 
12710     52 00 D7 E8 
12714     80 80 C5 BF | 	byte	$bf, $fa, $2f, $2c, $08, $0f, $4c, $5b, $52, $00, $d7, $e8, $80, $80, $c5, $bf
12718     2F 7F 60 7F 
1271c     40 EA FF A0 
12720     D7 E0 08 BF 
12724     68 E4 2F 4C | 	byte	$2f, $7f, $60, $7f, $40, $ea, $ff, $a0, $d7, $e0, $08, $bf, $68, $e4, $2f, $4c
12728     40 01 1F 3F 
1272c     40 AD B0 80 
12730     DF 00 3F 59 
12734     44 34 D0 E4 | 	byte	$40, $01, $1f, $3f, $40, $ad, $b0, $80, $df, $00, $3f, $59, $44, $34, $d0, $e4
12738     AE F5 FF 00 
1273c     3F 65 7B 64 
12740     00 E7 D8 D0 
12744     88 80 9F FF | 	byte	$ae, $f5, $ff, $00, $3f, $65, $7b, $64, $00, $e7, $d8, $d0, $88, $80, $9f, $ff
12748     3B 27 30 3F 
1274c     7F 40 F7 00 
12750     27 F5 30 B0 
12754     EF 2C 00 FF | 	byte	$3b, $27, $30, $3f, $7f, $40, $f7, $00, $27, $f5, $30, $b0, $ef, $2c, $00, $ff
12758     EF 20 B0 DF 
1275c     00 08 DF 3B 
12760     28 07 14 1F 
12764     5F 50 F8 F0 | 	byte	$ef, $20, $b0, $df, $00, $08, $df, $3b, $28, $07, $14, $1f, $5f, $50, $f8, $f0
12768     9F F4 EB 3F 
1276c     48 46 49 10 
12770     F1 0F E4 FF 
12774     60 16 29 18 | 	byte	$9f, $f4, $eb, $3f, $48, $46, $49, $10, $f1, $0f, $e4, $ff, $60, $16, $29, $18
12778     E0 B0 AD DF 
1277c     47 65 40 10 
12780     C4 A4 CB 80 
12784     BF 27 44 37 | 	byte	$e0, $b0, $ad, $df, $47, $65, $40, $10, $c4, $a4, $cb, $80, $bf, $27, $44, $37
12788     5F 10 FF 24 
1278c     3B 1C 18 E5 
12790     FF 4C 7F 50 
12794     45 20 1D E0 | 	byte	$5f, $10, $ff, $24, $3b, $1c, $18, $e5, $ff, $4c, $7f, $50, $45, $20, $1d, $e0
12798     A7 A0 80 BF 
1279c     FF D8 2F 7F 
127a0     68 4F 08 FF 
127a4     0C 00 BF F3 | 	byte	$a7, $a0, $80, $bf, $ff, $d8, $2f, $7f, $68, $4f, $08, $ff, $0c, $00, $bf, $f3
127a8     D8 0B 00 F3 
127ac     FC 17 57 64 
127b0     40 28 C8 C0 
127b4     83 EF 1C 0E | 	byte	$d8, $0b, $00, $f3, $fc, $17, $57, $64, $40, $28, $c8, $c0, $83, $ef, $1c, $0e
127b8     31 23 10 17 
127bc     10 E0 EF 2F 
127c0     60 20 BC DF 
127c4     D5 E5 EF 37 | 	byte	$31, $23, $10, $17, $10, $e0, $ef, $2f, $60, $20, $bc, $df, $d5, $e5, $ef, $37
127c8     5C 44 2C 38 
127cc     0C 05 04 C0 
127d0     87 80 AF 1B 
127d4     1D 2B 48 37 | 	byte	$5c, $44, $2c, $38, $0c, $05, $04, $c0, $87, $80, $af, $1b, $1d, $2b, $48, $37
127d8     43 50 30 00 
127dc     FA D8 A8 AF 
127e0     FF 28 10 E7 
127e4     0C 2F 7F 58 | 	byte	$43, $50, $30, $00, $fa, $d8, $a8, $af, $ff, $28, $10, $e7, $0c, $2f, $7f, $58
127e8     08 EB 0F D0 
127ec     9D DD 1F 50 
127f0     E0 EF 30 17 
127f4     E8 90 AF B0 | 	byte	$08, $eb, $0f, $d0, $9d, $dd, $1f, $50, $e0, $ef, $30, $17, $e8, $90, $af, $b0
127f8     FF 7F 40 A1 
127fc     1A 2F 50 E8 
12800     81 DB 27 2F 
12804     6F 78 48 C0 | 	byte	$ff, $7f, $40, $a1, $1a, $2f, $50, $e8, $81, $db, $27, $2f, $6f, $78, $48, $c0
12808     94 80 FF 56 
1280c     40 13 00 0B 
12810     F2 A8 80 AF 
12814     3F 7B 7F 7C | 	byte	$94, $80, $ff, $56, $40, $13, $00, $0b, $f2, $a8, $80, $af, $3f, $7b, $7f, $7c
12818     10 E0 80 99 
1281c     AF DF 02 07 
12820     2B 38 17 7F 
12824     60 F0 A8 80 | 	byte	$10, $e0, $80, $99, $af, $df, $02, $07, $2b, $38, $17, $7f, $60, $f0, $a8, $80
12828     8F BF 0F 3B 
1282c     7D 68 E0 AF 
12830     C8 E7 37 30 
12834     37 60 28 E8 | 	byte	$8f, $bf, $0f, $3b, $7d, $68, $e0, $af, $c8, $e7, $37, $30, $37, $60, $28, $e8
12838     C8 C7 D2 E7 
1283c     2E 23 30 00 
12840     0F 5F 7F 74 
12844     40 10 C0 B0 | 	byte	$c8, $c7, $d2, $e7, $2e, $23, $30, $00, $0f, $5f, $7f, $74, $40, $10, $c0, $b0
12848     80 9D 93 1F 
1284c     34 5F 7E 30 
12850     E7 18 D8 88 
12854     83 FF 6F 78 | 	byte	$80, $9d, $93, $1f, $34, $5f, $7e, $30, $e7, $18, $d8, $88, $83, $ff, $6f, $78
12858     7F 7F 78 30 
1285c     D0 C5 88 80 
12860     80 BF F7 37 
12864     3F 48 43 54 | 	byte	$7f, $7f, $78, $30, $d0, $c5, $88, $80, $80, $bf, $f7, $37, $3f, $48, $43, $54
12868     6F 64 40 D0 
1286c     CF E4 EF 41 
12870     00 DF D3 FF 
12874     48 00 E7 37 | 	byte	$6f, $64, $40, $d0, $cf, $e4, $ef, $41, $00, $df, $d3, $ff, $48, $00, $e7, $37
12878     4F 62 50 24 
1287c     E0 DF C0 80 
12880     80 CF 2F 53 
12884     5F 54 20 10 | 	byte	$4f, $62, $50, $24, $e0, $df, $c0, $80, $80, $cf, $2f, $53, $5f, $54, $20, $10
12888     A0 9F FF 3B 
1288c     74 30 7F 7F 
12890     48 F0 27 F0 
12894     D0 80 AB A4 | 	byte	$a0, $9f, $ff, $3b, $74, $30, $7f, $7f, $48, $f0, $27, $f0, $d0, $80, $ab, $a4
12898     BF 4F 48 4B 
1289c     72 5A 10 80 
128a0     D0 9F 27 36 
128a4     57 74 48 18 | 	byte	$bf, $4f, $48, $4b, $72, $5a, $10, $80, $d0, $9f, $27, $36, $57, $74, $48, $18
128a8     00 81 A8 80 
128ac     9F DC EF 67 
128b0     6A 30 31 28 
128b4     57 61 58 10 | 	byte	$00, $81, $a8, $80, $9f, $dc, $ef, $67, $6a, $30, $31, $28, $57, $61, $58, $10
128b8     FF 00 C0 DF 
128bc     F0 E0 CF E0 
128c0     DF C0 FF 03 
128c4     3F 20 1F 56 | 	byte	$ff, $00, $c0, $df, $f0, $e0, $cf, $e0, $df, $c0, $ff, $03, $3f, $20, $1f, $56
128c8     57 54 10 07 
128cc     F0 E3 F2 DF 
128d0     00 C8 FB E9 
128d4     D0 A4 B8 B5 | 	byte	$57, $54, $10, $07, $f0, $e3, $f2, $df, $00, $c8, $fb, $e9, $d0, $a4, $b8, $b5
128d8     FB 5F 7A 7F 
128dc     7F 40 A4 80 
128e0     80 AF EF 4F 
128e4     67 7F 68 24 | 	byte	$fb, $5f, $7a, $7f, $7f, $40, $a4, $80, $80, $af, $ef, $4f, $67, $7f, $68, $24
128e8     00 D0 C4 80 
128ec     8F CF 2B 36 
128f0     6F 60 00 DB 
128f4     D2 2F 20 A0 | 	byte	$00, $d0, $c4, $80, $8f, $cf, $2b, $36, $6f, $60, $00, $db, $d2, $2f, $20, $a0
128f8     EF EF 49 6F 
128fc     78 10 E4 B0 
12900     9B 99 93 EF 
12904     1F 3F 7F 7F | 	byte	$ef, $ef, $49, $6f, $78, $10, $e4, $b0, $9b, $99, $93, $ef, $1f, $3f, $7f, $7f
12908     20 EE 2F 60 
1290c     1F 40 B0 80 
12910     9F DE CA 3F 
12914     20 C0 FF 44 | 	byte	$20, $ee, $2f, $60, $1f, $40, $b0, $80, $9f, $de, $ca, $3f, $20, $c0, $ff, $44
12918     0D 37 33 28 
1291c     3F 00 DF 40 
12920     C3 D0 80 B7 
12924     FB 2F 7F 78 | 	byte	$0d, $37, $33, $28, $3f, $00, $df, $40, $c3, $d0, $80, $b7, $fb, $2f, $7f, $78
12928     28 00 1F 00 
1292c     F4 DF 23 00 
12930     DF 4B 48 15 
12934     00 04 1F 08 | 	byte	$28, $00, $1f, $00, $f4, $df, $23, $00, $df, $4b, $48, $15, $00, $04, $1f, $08
12938     0E C4 CB DF 
1293c     3F 69 6B 30 
12940     88 AF D7 17 
12944     6F 78 10 3C | 	byte	$0e, $c4, $cb, $df, $3f, $69, $6b, $30, $88, $af, $d7, $17, $6f, $78, $10, $3c
12948     10 E0 94 90 
1294c     85 BF 1F 57 
12950     7E 40 27 61 
12954     40 C8 80 80 | 	byte	$10, $e0, $94, $90, $85, $bf, $1f, $57, $7e, $40, $27, $61, $40, $c8, $80, $80
12958     87 CF 27 40 
1295c     6B 7F 7F 70 
12960     20 B0 80 80 
12964     BF EF 27 67 | 	byte	$87, $cf, $27, $40, $6b, $7f, $7f, $70, $20, $b0, $80, $80, $bf, $ef, $27, $67
12968     7F 34 00 FA 
1296c     A0 8F FF 00 
12970     CF 3F 6F 50 
12974     60 31 24 F1 | 	byte	$7f, $34, $00, $fa, $a0, $8f, $ff, $00, $cf, $3f, $6f, $50, $60, $31, $24, $f1
12978     E8 B7 E5 E8 
1297c     DE 14 0F 4F 
12980     64 40 14 F4 
12984     C0 AB C0 FF | 	byte	$e8, $b7, $e5, $e8, $de, $14, $0f, $4f, $64, $40, $14, $f4, $c0, $ab, $c0, $ff
12988     2B 7F 7C 20 
1298c     FA C0 DB A2 
12990     C7 C1 DF FF 
12994     2F 67 50 6F | 	byte	$2b, $7f, $7c, $20, $fa, $c0, $db, $a2, $c7, $c1, $df, $ff, $2f, $67, $50, $6f
12998     60 10 DB A0 
1299c     8F DB 3F 7F 
129a0     40 EF 10 DF 
129a4     C3 0B 10 F1 | 	byte	$60, $10, $db, $a0, $8f, $db, $3f, $7f, $40, $ef, $10, $df, $c3, $0b, $10, $f1
129a8     1F 67 68 10 
129ac     EF EF 3D 14 
129b0     DD E2 0F 56 
129b4     72 60 2A 34 | 	byte	$1f, $67, $68, $10, $ef, $ef, $3d, $14, $dd, $e2, $0f, $56, $72, $60, $2a, $34
129b8     1D 00 C0 97 
129bc     8F 9F B8 B7 
129c0     FF 2D 46 5F 
129c4     7F 7C 00 A0 | 	byte	$1d, $00, $c0, $97, $8f, $9f, $b8, $b7, $ff, $2d, $46, $5f, $7f, $7c, $00, $a0
129c8     98 AF FF 4B 
129cc     50 40 D4 0F 
129d0     14 FA 1D 27 
129d4     23 10 E0 C5 | 	byte	$98, $af, $ff, $4b, $50, $40, $d4, $0f, $14, $fa, $1d, $27, $23, $10, $e0, $c5
129d8     D7 FF 5F 78 
129dc     30 00 98 B3 
129e0     B3 D7 3B 6F 
129e4     7F 78 00 E8 | 	byte	$d7, $ff, $5f, $78, $30, $00, $98, $b3, $b3, $d7, $3b, $6f, $7f, $78, $00, $e8
129e8     B3 FF E1 EB 
129ec     C4 C8 B7 FF 
129f0     3F 5B 5F 6C 
129f4     40 24 D0 EC | 	byte	$b3, $ff, $e1, $eb, $c4, $c8, $b7, $ff, $3f, $5b, $5f, $6c, $40, $24, $d0, $ec
129f8     C3 FF 3A E8 
129fc     1F 00 A8 9F 
12a00     D7 1F 30 2F 
12a04     54 53 77 60 | 	byte	$c3, $ff, $3a, $e8, $1f, $00, $a8, $9f, $d7, $1f, $30, $2f, $54, $53, $77, $60
12a08     10 C8 88 8C 
12a0c     A7 C0 DF 3A 
12a10     4E 5B 7F 56 
12a14     44 D0 97 A8 | 	byte	$10, $c8, $88, $8c, $a7, $c0, $df, $3a, $4e, $5b, $7f, $56, $44, $d0, $97, $a8
12a18     83 93 D7 0A 
12a1c     0F 7F 7F 70 
12a20     E9 E0 80 BF 
12a24     D9 2F 3F 50 | 	byte	$83, $93, $d7, $0a, $0f, $7f, $7f, $70, $e9, $e0, $80, $bf, $d9, $2f, $3f, $50
12a28     08 0F 58 08 
12a2c     FE E0 D8 80 
12a30     AF E7 27 2D 
12a34     6F 70 20 08 | 	byte	$08, $0f, $58, $08, $fe, $e0, $d8, $80, $af, $e7, $27, $2d, $6f, $70, $20, $08
12a38     EF 2C 1F 15 
12a3c     20 D0 D0 CB 
12a40     EF 07 0C FF 
12a44     1F 36 4B 6F | 	byte	$ef, $2c, $1f, $15, $20, $d0, $d0, $cb, $ef, $07, $0c, $ff, $1f, $36, $4b, $6f
12a48     5A 20 A0 D0 
12a4c     83 B8 B7 1B 
12a50     4F 7F 48 37 
12a54     10 DB E8 A0 | 	byte	$5a, $20, $a0, $d0, $83, $b8, $b7, $1b, $4f, $7f, $48, $37, $10, $db, $e8, $a0
12a58     A7 DE E2 FF 
12a5c     2D 57 7B 7F 
12a60     78 00 A4 80 
12a64     87 BF 27 69 | 	byte	$a7, $de, $e2, $ff, $2d, $57, $7b, $7f, $78, $00, $a4, $80, $87, $bf, $27, $69
12a68     7B 78 48 08 
12a6c     A8 9F 9A A7 
12a70     C7 E8 DF 3F 
12a74     7B 7F 7F 44 | 	byte	$7b, $78, $48, $08, $a8, $9f, $9a, $a7, $c7, $e8, $df, $3f, $7b, $7f, $7f, $44
12a78     18 1A 00 F7 
12a7c     D0 9E A4 9E 
12a80     DF 4F 5F 7F 
12a84     40 C0 9D E5 | 	byte	$18, $1a, $00, $f7, $d0, $9e, $a4, $9e, $df, $4f, $5f, $7f, $40, $c0, $9d, $e5
12a88     EF 23 6F 50 
12a8c     3F 48 30 C4 
12a90     C0 88 9F E7 
12a94     0E F8 F2 3F | 	byte	$ef, $23, $6f, $50, $3f, $48, $30, $c4, $c0, $88, $9f, $e7, $0e, $f8, $f2, $3f
12a98     6C 51 30 F2 
12a9c     FA FF 04 F4 
12aa0     FB 16 24 08 
12aa4     E4 C0 A7 C0 | 	byte	$6c, $51, $30, $f2, $fa, $ff, $04, $f4, $fb, $16, $24, $08, $e4, $c0, $a7, $c0
12aa8     CF 0F 4B 6A 
12aac     57 64 14 D2 
12ab0     F2 DF F8 DF 
12ab4     0F 18 F0 2F | 	byte	$cf, $0f, $4b, $6a, $57, $64, $14, $d2, $f2, $df, $f8, $df, $0f, $18, $f0, $2f
12ab8     38 1F 28 D0 
12abc     DF E0 C9 C8 
12ac0     BF EF 1F 04 
12ac4     D7 FB 1D 08 | 	byte	$38, $1f, $28, $d0, $df, $e0, $c9, $c8, $bf, $ef, $1f, $04, $d7, $fb, $1d, $08
12ac8     1B 33 5E 50 
12acc     38 40 90 97 
12ad0     F1 3F 54 E0 
12ad4     A7 FF 08 FF | 	byte	$1b, $33, $5e, $50, $38, $40, $90, $97, $f1, $3f, $54, $e0, $a7, $ff, $08, $ff
12ad8     77 60 34 04 
12adc     C0 99 EF 2F 
12ae0     34 2D 18 27 
12ae4     E0 AD EF F3 | 	byte	$77, $60, $34, $04, $c0, $99, $ef, $2f, $34, $2d, $18, $27, $e0, $ad, $ef, $f3
12ae8     39 11 3F 20 
12aec     E7 18 E0 F5 
12af0     0B 1F 14 C0 
12af4     DB ED FB 57 | 	byte	$39, $11, $3f, $20, $e7, $18, $e0, $f5, $0b, $1f, $14, $c0, $db, $ed, $fb, $57
12af8     60 30 08 D5 
12afc     CD F7 1F 26 
12b00     4B 48 D0 B7 
12b04     C0 CF 17 29 | 	byte	$60, $30, $08, $d5, $cd, $f7, $1f, $26, $4b, $48, $d0, $b7, $c0, $cf, $17, $29
12b08     10 F7 32 13 
12b0c     3F 24 E8 CB 
12b10     EB F3 08 F6 
12b14     E9 37 7F 78 | 	byte	$10, $f7, $32, $13, $3f, $24, $e8, $cb, $eb, $f3, $08, $f6, $e9, $37, $7f, $78
12b18     40 00 CB C0 
12b1c     B3 C8 DB 3B 
12b20     31 45 30 02 
12b24     08 1F 08 A0 | 	byte	$40, $00, $cb, $c0, $b3, $c8, $db, $3b, $31, $45, $30, $02, $08, $1f, $08, $a0
12b28     8B FF 4D 54 
12b2c     35 77 7F 68 
12b30     28 B0 A0 80 
12b34     80 BF F6 1F | 	byte	$8b, $ff, $4d, $54, $35, $77, $7f, $68, $28, $b0, $a0, $80, $80, $bf, $f6, $1f
12b38     20 EB 08 FD 
12b3c     2F 6F 50 00 
12b40     D1 E7 E9 27 
12b44     30 FB 3F 10 | 	byte	$20, $eb, $08, $fd, $2f, $6f, $50, $00, $d1, $e7, $e9, $27, $30, $fb, $3f, $10
12b48     2F 00 0F 38 
12b4c     E8 D3 B4 BF 
12b50     2D 28 F0 D9 
12b54     E3 17 5F 7F | 	byte	$2f, $00, $0f, $38, $e8, $d3, $b4, $bf, $2d, $28, $f0, $d9, $e3, $17, $5f, $7f
12b58     60 40 D8 A4 
12b5c     93 B3 CB DE 
12b60     FF 03 3F 7F 
12b64     78 70 30 E8 | 	byte	$60, $40, $d8, $a4, $93, $b3, $cb, $de, $ff, $03, $3f, $7f, $78, $70, $30, $e8
12b68     A0 80 97 DB 
12b6c     FF 4F 60 4D 
12b70     28 D0 96 B7 
12b74     FF 29 4B 67 | 	byte	$a0, $80, $97, $db, $ff, $4f, $60, $4d, $28, $d0, $96, $b7, $ff, $29, $4b, $67
12b78     7F 70 37 28 
12b7c     F4 A0 87 80 
12b80     8F CF 1F 5F 
12b84     40 2F 36 10 | 	byte	$7f, $70, $37, $28, $f4, $a0, $87, $80, $8f, $cf, $1f, $5f, $40, $2f, $36, $10
12b88     0E 08 0B 2F 
12b8c     33 6F 28 E8 
12b90     A0 AF C7 E0 
12b94     D7 0F 28 09 | 	byte	$0e, $08, $0b, $2f, $33, $6f, $28, $e8, $a0, $af, $c7, $e0, $d7, $0f, $28, $09
12b98     12 DA FF 2F 
12b9c     68 40 D8 D4 
12ba0     8B B5 EB 3F 
12ba4     75 40 4E 00 | 	byte	$12, $da, $ff, $2f, $68, $40, $d8, $d4, $8b, $b5, $eb, $3f, $75, $40, $4e, $00
12ba8     D7 EA C0 AF 
12bac     F7 2F 24 12 
12bb0     04 F9 07 3F 
12bb4     4C 48 10 E0 | 	byte	$d7, $ea, $c0, $af, $f7, $2f, $24, $12, $04, $f9, $07, $3f, $4c, $48, $10, $e0
12bb8     B8 BF CF 37 
12bbc     3E 44 20 C1 
12bc0     C9 DF F9 17 
12bc4     2E 08 E5 FB | 	byte	$b8, $bf, $cf, $37, $3e, $44, $20, $c1, $c9, $df, $f9, $17, $2e, $08, $e5, $fb
12bc8     2F 40 10 E3 
12bcc     FF 37 42 10 
12bd0     B0 9F A7 E7 
12bd4     F0 F3 2F 7D | 	byte	$2f, $40, $10, $e3, $ff, $37, $42, $10, $b0, $9f, $a7, $e7, $f0, $f3, $2f, $7d
12bd8     71 7F 7F 20 
12bdc     C4 90 BC BB 
12be0     EF E5 E8 DF 
12be4     EF 37 6A 6C | 	byte	$71, $7f, $7f, $20, $c4, $90, $bc, $bb, $ef, $e5, $e8, $df, $ef, $37, $6a, $6c
12be8     30 C3 EE E5 
12bec     D3 F4 DF 3F 
12bf0     6C 12 3F 00 
12bf4     DF C0 DF 2B | 	byte	$30, $c3, $ee, $e5, $d3, $f4, $df, $3f, $6c, $12, $3f, $00, $df, $c0, $df, $2b
12bf8     24 37 30 C4 
12bfc     A7 9B D7 17 
12c00     2D 6F 79 60 
12c04     4F 20 E4 D4 | 	byte	$24, $37, $30, $c4, $a7, $9b, $d7, $17, $2d, $6f, $79, $60, $4f, $20, $e4, $d4
12c08     D7 EB 0F 24 
12c0c     08 F0 D3 02 
12c10     CF 08 FA 05 
12c14     0D 3F 18 09 | 	byte	$d7, $eb, $0f, $24, $08, $f0, $d3, $02, $cf, $08, $fa, $05, $0d, $3f, $18, $09
12c18     3E 0E 2F 30 
12c1c     F8 D8 BA D7 
12c20     F1 FB F0 EF 
12c24     1D 3F 50 2A | 	byte	$3e, $0e, $2f, $30, $f8, $d8, $ba, $d7, $f1, $fb, $f0, $ef, $1d, $3f, $50, $2a
12c28     10 C2 D1 BF 
12c2c     FF E8 F7 2F 
12c30     65 7F 6C 10 
12c34     CB C0 97 BF | 	byte	$10, $c2, $d1, $bf, $ff, $e8, $f7, $2f, $65, $7f, $6c, $10, $cb, $c0, $97, $bf
12c38     E7 07 2B 33 
12c3c     54 30 F8 E0 
12c40     D2 F7 00 D9 
12c44     0F 1A 23 4F | 	byte	$e7, $07, $2b, $33, $54, $30, $f8, $e0, $d2, $f7, $00, $d9, $0f, $1a, $23, $4f
12c48     40 3F 62 10 
12c4c     FF E8 DF E0 
12c50     C4 C6 B2 B7 
12c54     E7 1F 33 4A | 	byte	$40, $3f, $62, $10, $ff, $e8, $df, $e0, $c4, $c6, $b2, $b7, $e7, $1f, $33, $4a
12c58     57 70 28 2F 
12c5c     20 E8 EF E1 
12c60     DD 04 E9 13 
12c64     E8 2B 53 7D | 	byte	$57, $70, $28, $2f, $20, $e8, $ef, $e1, $dd, $04, $e9, $13, $e8, $2b, $53, $7d
12c68     58 00 F2 B0 
12c6c     AF DF 10 EB 
12c70     4B 47 60 E0 
12c74     DF FB 2B 28 | 	byte	$58, $00, $f2, $b0, $af, $df, $10, $eb, $4b, $47, $60, $e0, $df, $fb, $2b, $28
12c78     2E 00 DB 0D 
12c7c     3F 55 38 E0 
12c80     C0 CF C0 CB 
12c84     0F 26 20 2F | 	byte	$2e, $00, $db, $0d, $3f, $55, $38, $e0, $c0, $cf, $c0, $cb, $0f, $26, $20, $2f
12c88     42 00 F3 17 
12c8c     45 52 38 1A 
12c90     C0 92 84 AF 
12c94     DF 37 7F 7C | 	byte	$42, $00, $f3, $17, $45, $52, $38, $1a, $c0, $92, $84, $af, $df, $37, $7f, $7c
12c98     40 E0 BF D7 
12c9c     07 1F 40 10 
12ca0     D4 C0 EB 29 
12ca4     30 59 57 50 | 	byte	$40, $e0, $bf, $d7, $07, $1f, $40, $10, $d4, $c0, $eb, $29, $30, $59, $57, $50
12ca8     08 F0 A8 AF 
12cac     D3 E7 2B 18 
12cb0     27 32 26 3E 
12cb4     00 D3 F5 03 | 	byte	$08, $f0, $a8, $af, $d3, $e7, $2b, $18, $27, $32, $26, $3e, $00, $d3, $f5, $03
12cb8     1F 28 12 20 
12cbc     FB 13 E0 DB 
12cc0     C4 DF FF 37 
12cc4     14 0B 30 0F | 	byte	$1f, $28, $12, $20, $fb, $13, $e0, $db, $c4, $df, $ff, $37, $14, $0b, $30, $0f
12cc8     34 F0 CF FF 
12ccc     0F 3F 38 04 
12cd0     1A D8 B8 C7 
12cd4     DB 0B 2B 4F | 	byte	$34, $f0, $cf, $ff, $0f, $3f, $38, $04, $1a, $d8, $b8, $c7, $db, $0b, $2b, $4f
12cd8     7E 76 50 F0 
12cdc     BD CC D3 DE 
12ce0     E7 F3 1F 38 
12ce4     18 1F 2A 0D | 	byte	$7e, $76, $50, $f0, $bd, $cc, $d3, $de, $e7, $f3, $1f, $38, $18, $1f, $2a, $0d
12ce8     08 FD 03 20 
12cec     F0 FB 26 08 
12cf0     BB 2B 37 10 
12cf4     DB F0 FF 27 | 	byte	$08, $fd, $03, $20, $f0, $fb, $26, $08, $bb, $2b, $37, $10, $db, $f0, $ff, $27
12cf8     2E 5D 63 50 
12cfc     F1 07 00 B0 
12d00     BF D7 0F 3B 
12d04     38 18 2F 00 | 	byte	$2e, $5d, $63, $50, $f1, $07, $00, $b0, $bf, $d7, $0f, $3b, $38, $18, $2f, $00
12d08     EF E8 C5 D3 
12d0c     E3 0B 1F 33 
12d10     27 3F 40 33 
12d14     44 10 CC B0 | 	byte	$ef, $e8, $c5, $d3, $e3, $0b, $1f, $33, $27, $3f, $40, $33, $44, $10, $cc, $b0
12d18     AF D7 F7 37 
12d1c     40 22 00 FF 
12d20     08 FF E8 E3 
12d24     FF 09 00 EA | 	byte	$af, $d7, $f7, $37, $40, $22, $00, $ff, $08, $ff, $e8, $e3, $ff, $09, $00, $ea
12d28     1D 1B 5B 42 
12d2c     00 E7 EB 0F 
12d30     2A 1E 08 E1 
12d34     EC D0 B0 BF | 	byte	$1d, $1b, $5b, $42, $00, $e7, $eb, $0f, $2a, $1e, $08, $e1, $ec, $d0, $b0, $bf
12d38     D7 EF 0F 4F 
12d3c     5C 50 28 E4 
12d40     E0 C6 C7 02 
12d44     F7 17 40 18 | 	byte	$d7, $ef, $0f, $4f, $5c, $50, $28, $e4, $e0, $c6, $c7, $02, $f7, $17, $40, $18
12d48     15 3A E0 E7 
12d4c     0D 1C 2F 51 
12d50     28 00 C0 A4 
12d54     AF CF 1D 2C | 	byte	$15, $3a, $e0, $e7, $0d, $1c, $2f, $51, $28, $00, $c0, $a4, $af, $cf, $1d, $2c
12d58     3F 38 11 0C 
12d5c     0F 09 1A F8 
12d60     F6 F0 F6 E8 
12d64     ED F9 FF 1F | 	byte	$3f, $38, $11, $0c, $0f, $09, $1a, $f8, $f6, $f0, $f6, $e8, $ed, $f9, $ff, $1f
12d68     2F 40 00 F1 
12d6c     0F 26 18 09 
12d70     E9 FF 0F 00 
12d74     B9 DF 17 36 | 	byte	$2f, $40, $00, $f1, $0f, $26, $18, $09, $e9, $ff, $0f, $00, $b9, $df, $17, $36
12d78     3F 58 00 D5 
12d7c     C0 9F CF 1F 
12d80     4B 5B 76 40 
12d84     F0 D8 E7 ED | 	byte	$3f, $58, $00, $d5, $c0, $9f, $cf, $1f, $4b, $5b, $76, $40, $f0, $d8, $e7, $ed
12d88     F3 0F 1A 00 
12d8c     07 20 F4 07 
12d90     14 1A 1A EA 
12d94     FD 1A 08 10 | 	byte	$f3, $0f, $1a, $00, $07, $20, $f4, $07, $14, $1a, $1a, $ea, $fd, $1a, $08, $10
12d98     E9 E7 0C 07 
12d9c     21 26 35 5F 
12da0     74 00 8A BF 
12da4     CF 1F 61 40 | 	byte	$e9, $e7, $0c, $07, $21, $26, $35, $5f, $74, $00, $8a, $bf, $cf, $1f, $61, $40
12da8     E8 D1 B4 DF 
12dac     FF 4C 18 1F 
12db0     28 F7 18 0F 
12db4     21 18 F8 1F | 	byte	$e8, $d1, $b4, $df, $ff, $4c, $18, $1f, $28, $f7, $18, $0f, $21, $18, $f8, $1f
12db8     20 00 EB FB 
12dbc     05 05 0D 23 
12dc0     20 FB 27 35 
12dc4     30 1A 1A 00 | 	byte	$20, $00, $eb, $fb, $05, $05, $0d, $23, $20, $fb, $27, $35, $30, $1a, $1a, $00
12dc8     C8 BF EF 17 
12dcc     57 54 20 24 
12dd0     E2 C3 D8 EB 
12dd4     EB 0B 26 2B | 	byte	$c8, $bf, $ef, $17, $57, $54, $20, $24, $e2, $c3, $d8, $eb, $eb, $0b, $26, $2b
12dd8     21 0E F8 F3 
12ddc     24 0A 04 27 
12de0     37 46 14 B4 
12de4     A2 BB F7 10 | 	byte	$21, $0e, $f8, $f3, $24, $0a, $04, $27, $37, $46, $14, $b4, $a2, $bb, $f7, $10
12de8     1D 2C 1F 57 
12dec     5B 40 00 FF 
12df0     0F 0C E3 ED 
12df4     EB EF 0F 04 | 	byte	$1d, $2c, $1f, $57, $5b, $40, $00, $ff, $0f, $0c, $e3, $ed, $eb, $ef, $0f, $04
12df8     F3 0D 27 38 
12dfc     00 E1 EF 03 
12e00     1F 29 1C 2C 
12e04     08 E4 E0 DF | 	byte	$f3, $0d, $27, $38, $00, $e1, $ef, $03, $1f, $29, $1c, $2c, $08, $e4, $e0, $df
12e08     FB 1E 15 F8 
12e0c     D5 FA 17 3B 
12e10     38 24 1E 16 
12e14     1B 14 0B 20 | 	byte	$fb, $1e, $15, $f8, $d5, $fa, $17, $3b, $38, $24, $1e, $16, $1b, $14, $0b, $20
12e18     08 00 E7 0B 
12e1c     04 FE F0 DF 
12e20     13 08 F8 E0 
12e24     DF 2F 50 18 | 	byte	$08, $00, $e7, $0b, $04, $fe, $f0, $df, $13, $08, $f8, $e0, $df, $2f, $50, $18
12e28     FB 16 10 23 
12e2c     1D 1B 18 EC 
12e30     D5 DE E4 DE 
12e34     F3 33 54 3D | 	byte	$fb, $16, $10, $23, $1d, $1b, $18, $ec, $d5, $de, $e4, $de, $f3, $33, $54, $3d
12e38     42 20 04 E0 
12e3c     B8 CA C7 EF 
12e40     27 37 31 18 
12e44     EB 2F 18 1F | 	byte	$42, $20, $04, $e0, $b8, $ca, $c7, $ef, $27, $37, $31, $18, $eb, $2f, $18, $1f
12e48     23 26 20 E2 
12e4c     CF 0F 12 17 
12e50     2F 08 E8 DD 
12e54     E8 CF EE F7 | 	byte	$23, $26, $20, $e2, $cf, $0f, $12, $17, $2f, $08, $e8, $dd, $e8, $cf, $ee, $f7
12e58     29 15 2B 54 
12e5c     30 E8 F5 CC 
12e60     DB F7 13 28 
12e64     1A 00 FB 1F | 	byte	$29, $15, $2b, $54, $30, $e8, $f5, $cc, $db, $f7, $13, $28, $1a, $00, $fb, $1f
12e68     30 26 1E 04 
12e6c     00 F8 E8 CA 
12e70     EA F7 07 00 
12e74     0F 22 17 23 | 	byte	$30, $26, $1e, $04, $00, $f8, $e8, $ca, $ea, $f7, $07, $00, $0f, $22, $17, $23
12e78     2F 42 20 F0 
12e7c     ED C2 EF 28 
12e80     00 DB FD 10 
12e84     F8 EF FB 1B | 	byte	$2f, $42, $20, $f0, $ed, $c2, $ef, $28, $00, $db, $fd, $10, $f8, $ef, $fb, $1b
12e88     1F 4F 50 34 
12e8c     12 E0 C2 BF 
12e90     EB 15 29 3D 
12e94     30 28 3E 24 | 	byte	$1f, $4f, $50, $34, $12, $e0, $c2, $bf, $eb, $15, $29, $3d, $30, $28, $3e, $24
12e98     C8 B5 CF F3 
12e9c     F0 FF 4F 60 
12ea0     38 18 D8 E0 
12ea4     ED E5 FD 0C | 	byte	$c8, $b5, $cf, $f3, $f0, $ff, $4f, $60, $38, $18, $d8, $e0, $ed, $e5, $fd, $0c
12ea8     EF 05 18 E0 
12eac     0F 3F 64 38 
12eb0     28 E0 CF B9 
12eb4     CE BF FB 35 | 	byte	$ef, $05, $18, $e0, $0f, $3f, $64, $38, $28, $e0, $cf, $b9, $ce, $bf, $fb, $35
12eb8     33 10 EF 0B 
12ebc     2B 49 40 08 
12ec0     E5 CA CE D7 
12ec4     0B 1B 5F 70 | 	byte	$33, $10, $ef, $0b, $2b, $49, $40, $08, $e5, $ca, $ce, $d7, $0b, $1b, $5f, $70
12ec8     30 E0 B0 BF 
12ecc     EF 1F 40 28 
12ed0     0A E0 C0 C9 
12ed4     DB 1F 36 29 | 	byte	$30, $e0, $b0, $bf, $ef, $1f, $40, $28, $0a, $e0, $c0, $c9, $db, $1f, $36, $29
12ed8     3D 20 24 07 
12edc     2B 2C 18 0E 
12ee0     00 CA E7 F5 
12ee4     F9 E9 15 F4 | 	byte	$3d, $20, $24, $07, $2b, $2c, $18, $0e, $00, $ca, $e7, $f5, $f9, $e9, $15, $f4
12ee8     27 25 14 F0 
12eec     EF E6 FD 0B 
12ef0     3B 3D 3D 40 
12ef4     24 00 CA C1 | 	byte	$27, $25, $14, $f0, $ef, $e6, $fd, $0b, $3b, $3d, $3d, $40, $24, $00, $ca, $c1
12ef8     A0 BF DF 13 
12efc     1B 34 2F 4B 
12f00     64 28 02 08 
12f04     E8 B9 FF 0B | 	byte	$a0, $bf, $df, $13, $1b, $34, $2f, $4b, $64, $28, $02, $08, $e8, $b9, $ff, $0b
12f08     FB 12 0B 33 
12f0c     24 00 D8 CB 
12f10     E7 0C 14 0E 
12f14     27 20 15 32 | 	byte	$fb, $12, $0b, $33, $24, $00, $d8, $cb, $e7, $0c, $14, $0e, $27, $20, $15, $32
12f18     10 E0 D3 E8 
12f1c     F7 EB 07 19 
12f20     0F 1D 36 32 
12f24     2C F0 DF D6 | 	byte	$10, $e0, $d3, $e8, $f7, $eb, $07, $19, $0f, $1d, $36, $32, $2c, $f0, $df, $d6
12f28     CD FB 0B 19 
12f2c     25 10 07 28 
12f30     2B 28 04 F2 
12f34     E0 D3 F2 F4 | 	byte	$cd, $fb, $0b, $19, $25, $10, $07, $28, $2b, $28, $04, $f2, $e0, $d3, $f2, $f4
12f38     FB FF F0 0B 
12f3c     37 4F 6E 48 
12f40     00 AF C0 9C 
12f44     BF F7 3B 40 | 	byte	$fb, $ff, $f0, $0b, $37, $4f, $6e, $48, $00, $af, $c0, $9c, $bf, $f7, $3b, $40
12f48     4D 40 00 C0 
12f4c     EF FF 1D 25 
12f50     24 0A F0 FF 
12f54     1F 2E 2C F4 | 	byte	$4d, $40, $00, $c0, $ef, $ff, $1d, $25, $24, $0a, $f0, $ff, $1f, $2e, $2c, $f4
12f58     DC C4 BC EB 
12f5c     37 24 1C 2D 
12f60     3F 30 E0 EB 
12f64     FF 12 22 14 | 	byte	$dc, $c4, $bc, $eb, $37, $24, $1c, $2d, $3f, $30, $e0, $eb, $ff, $12, $22, $14
12f68     04 DC D8 D3 
12f6c     FB 2F 3D 14 
12f70     F9 F5 0B 3B 
12f74     4D 50 20 E4 | 	byte	$04, $dc, $d8, $d3, $fb, $2f, $3d, $14, $f9, $f5, $0b, $3b, $4d, $50, $20, $e4
12f78     BA C7 CF EF 
12f7c     2A 1A 37 6A 
12f80     50 42 20 D8 
12f84     DF E8 BC D3 | 	byte	$ba, $c7, $cf, $ef, $2a, $1a, $37, $6a, $50, $42, $20, $d8, $df, $e8, $bc, $d3
12f88     EF 17 3B 52 
12f8c     48 14 E4 D7 
12f90     E7 0D 1B 3F 
12f94     20 EA F0 EF | 	byte	$ef, $17, $3b, $52, $48, $14, $e4, $d7, $e7, $0d, $1b, $3f, $20, $ea, $f0, $ef
12f98     07 07 33 42 
12f9c     18 D4 F9 D0 
12fa0     E5 0B 23 3F 
12fa4     60 40 24 0C | 	byte	$07, $07, $33, $42, $18, $d4, $f9, $d0, $e5, $0b, $23, $3f, $60, $40, $24, $0c
12fa8     08 E0 DA D3 
12fac     E6 FF 34 39 
12fb0     39 28 07 F8 
12fb4     E0 F1 E8 E6 | 	byte	$08, $e0, $da, $d3, $e6, $ff, $34, $39, $39, $28, $07, $f8, $e0, $f1, $e8, $e6
12fb8     07 25 38 1D 
12fbc     04 F9 03 14 
12fc0     0F 27 31 20 
12fc4     F0 D3 F9 F0 | 	byte	$07, $25, $38, $1d, $04, $f9, $03, $14, $0f, $27, $31, $20, $f0, $d3, $f9, $f0
12fc8     E5 FF 10 04 
12fcc     F2 FB FF 37 
12fd0     46 38 10 FA 
12fd4     D8 CD F6 C8 | 	byte	$e5, $ff, $10, $04, $f2, $fb, $ff, $37, $46, $38, $10, $fa, $d8, $cd, $f6, $c8
12fd8     CF 0C 37 55 
12fdc     5C 40 F2 E8 
12fe0     CA C9 C0 CF 
12fe4     EB 1B 30 2A | 	byte	$cf, $0c, $37, $55, $5c, $40, $f2, $e8, $ca, $c9, $c0, $cf, $eb, $1b, $30, $2a
12fe8     29 1D 38 20 
12fec     15 0A EE F4 
12ff0     E4 DE D1 F7 
12ff4     00 17 28 1F | 	byte	$29, $1d, $38, $20, $15, $0a, $ee, $f4, $e4, $de, $d1, $f7, $00, $17, $28, $1f
12ff8     37 10 EA F0 
12ffc     EA F8 EB 0F 
13000     07 22 10 00 
13004     D0 D5 FF 3F | 	byte	$37, $10, $ea, $f0, $ea, $f8, $eb, $0f, $07, $22, $10, $00, $d0, $d5, $ff, $3f
13008     5E 40 10 D8 
1300c     DE E2 CC DB 
13010     F3 17 33 3C 
13014     35 30 00 E9 | 	byte	$5e, $40, $10, $d8, $de, $e2, $cc, $db, $f3, $17, $33, $3c, $35, $30, $00, $e9
13018     E1 E9 E7 FF 
1301c     00 07 1F 24 
13020     1B 18 F2 ED 
13024     FF 00 05 0C | 	byte	$e1, $e9, $e7, $ff, $00, $07, $1f, $24, $1b, $18, $f2, $ed, $ff, $00, $05, $0c
13028     0F 12 0F 16 
1302c     04 05 02 FC 
13030     00 13 1D 24 
13034     20 E0 FB 1B | 	byte	$0f, $12, $0f, $16, $04, $05, $02, $fc, $00, $13, $1d, $24, $20, $e0, $fb, $1b
13038     2F 4D 35 08 
1303c     E0 E9 D7 FF 
13040     0F 3B 20 02 
13044     06 0F 3B 2C | 	byte	$2f, $4d, $35, $08, $e0, $e9, $d7, $ff, $0f, $3b, $20, $02, $06, $0f, $3b, $2c
13048     10 F4 E8 E6 
1304c     E7 FB 1F 4D 
13050     59 40 10 E0 
13054     D9 BE EF FE | 	byte	$10, $f4, $e8, $e6, $e7, $fb, $1f, $4d, $59, $40, $10, $e0, $d9, $be, $ef, $fe
13058     1F 37 47 38 
1305c     14 F0 F7 F0 
13060     F7 1F 2C 1E 
13064     12 10 19 0C | 	byte	$1f, $37, $47, $38, $14, $f0, $f7, $f0, $f7, $1f, $2c, $1e, $12, $10, $19, $0c
13068     04 F9 00 EE 
1306c     FF 27 30 1A 
13070     2C 08 E2 F2 
13074     EF F9 0B 2F | 	byte	$04, $f9, $00, $ee, $ff, $27, $30, $1a, $2c, $08, $e2, $f2, $ef, $f9, $0b, $2f
13078     53 40 E0 CF 
1307c     F9 FB 2F 3A 
13080     18 12 00 CD 
13084     FF 00 13 12 | 	byte	$53, $40, $e0, $cf, $f9, $fb, $2f, $3a, $18, $12, $00, $cd, $ff, $00, $13, $12
13088     06 F1 FE 05 
1308c     02 0F 2D 25 
13090     2A 20 14 04 
13094     04 04 E2 E7 | 	byte	$06, $f1, $fe, $05, $02, $0f, $2d, $25, $2a, $20, $14, $04, $04, $04, $e2, $e7
13098     FB 01 05 13 
1309c     0B 0F 1F 20 
130a0     15 00 E9 FE 
130a4     0D 17 14 F0 | 	byte	$fb, $01, $05, $13, $0b, $0f, $1f, $20, $15, $00, $e9, $fe, $0d, $17, $14, $f0
130a8     F9 F2 FB 07 
130ac     09 F8 FB 13 
130b0     25 31 15 22 
130b4     F4 FF 1C 35 | 	byte	$f9, $f2, $fb, $07, $09, $f8, $fb, $13, $25, $31, $15, $22, $f4, $ff, $1c, $35
130b8     34 10 E8 C8 
130bc     BF DB 07 1D 
130c0     26 23 18 00 
130c4     FB 0F 37 20 | 	byte	$34, $10, $e8, $c8, $bf, $db, $07, $1d, $26, $23, $18, $00, $fb, $0f, $37, $20
130c8     FF 1D 17 00 
130cc     EC DA C8 EF 
130d0     19 1E 0A 17 
130d4     0B 21 0A 05 | 	byte	$ff, $1d, $17, $00, $ec, $da, $c8, $ef, $19, $1e, $0a, $17, $0b, $21, $0a, $05
130d8     13 3A 28 04 
130dc     D8 C6 CA EF 
130e0     FA 2B 4F 50 
130e4     34 08 F0 EA | 	byte	$13, $3a, $28, $04, $d8, $c6, $ca, $ef, $fa, $2b, $4f, $50, $34, $08, $f0, $ea
130e8     F7 02 0A 00 
130ec     FE 17 26 08 
130f0     F5 F9 F9 F0 
130f4     FF 16 1F 16 | 	byte	$f7, $02, $0a, $00, $fe, $17, $26, $08, $f5, $f9, $f9, $f0, $ff, $16, $1f, $16
130f8     F4 ED F2 0F 
130fc     0F 0C 25 3F 
13100     28 08 04 13 
13104     00 F4 E9 EF | 	byte	$f4, $ed, $f2, $0f, $0f, $0c, $25, $3f, $28, $08, $04, $13, $00, $f4, $e9, $ef
13108     E8 D5 FD 17 
1310c     38 19 27 38 
13110     02 07 00 E7 
13114     E0 DB F7 05 | 	byte	$e8, $d5, $fd, $17, $38, $19, $27, $38, $02, $07, $00, $e7, $e0, $db, $f7, $05
13118     0F 33 50 24 
1311c     EB E8 D3 FF 
13120     1B 4E 30 1D 
13124     08 C9 D5 EF | 	byte	$0f, $33, $50, $24, $eb, $e8, $d3, $ff, $1b, $4e, $30, $1d, $08, $c9, $d5, $ef
13128     1B 14 08 00 
1312c     FB 09 01 17 
13130     37 38 27 10 
13134     0B 1D 08 E5 | 	byte	$1b, $14, $08, $00, $fb, $09, $01, $17, $37, $38, $27, $10, $0b, $1d, $08, $e5
13138     E2 FE F4 EA 
1313c     F3 FB FA F1 
13140     FF 27 2A 14 
13144     0F 10 F2 13 | 	byte	$e2, $fe, $f4, $ea, $f3, $fb, $fa, $f1, $ff, $27, $2a, $14, $0f, $10, $f2, $13
13148     11 18 FA F0 
1314c     EB 07 37 45 
13150     3E 26 21 00 
13154     D4 C9 E7 09 | 	byte	$11, $18, $fa, $f0, $eb, $07, $37, $45, $3e, $26, $21, $00, $d4, $c9, $e7, $09
13158     0B 1F 2C 00 
1315c     F6 F4 0F 18 
13160     15 12 09 13 
13164     04 FB 27 20 | 	byte	$0b, $1f, $2c, $00, $f6, $f4, $0f, $18, $15, $12, $09, $13, $04, $fb, $27, $20
13168     1A 0E F0 06 
1316c     F0 FF 14 23 
13170     2F 34 10 E8 
13174     D8 E6 F3 F7 | 	byte	$1a, $0e, $f0, $06, $f0, $ff, $14, $23, $2f, $34, $10, $e8, $d8, $e6, $f3, $f7
13178     23 2C 28 0A 
1317c     0F 19 12 1F 
13180     29 24 04 EF 
13184     E0 EB 07 17 | 	byte	$23, $2c, $28, $0a, $0f, $19, $12, $1f, $29, $24, $04, $ef, $e0, $eb, $07, $17
13188     25 10 F0 EB 
1318c     07 26 1E 17 
13190     14 08 01 05 
13194     02 FF 05 0F | 	byte	$25, $10, $f0, $eb, $07, $26, $1e, $17, $14, $08, $01, $05, $02, $ff, $05, $0f
13198     16 10 13 00 
1319c     F5 FE 1B 27 
131a0     36 2C 14 00 
131a4     CA C7 DF 07 | 	byte	$16, $10, $13, $00, $f5, $fe, $1b, $27, $36, $2c, $14, $00, $ca, $c7, $df, $07
131a8     16 21 1D 10 
131ac     FB 0B 08 1B 
131b0     1C 10 10 09 
131b4     F6 05 0F 16 | 	byte	$16, $21, $1d, $10, $fb, $0b, $08, $1b, $1c, $10, $10, $09, $f6, $05, $0f, $16
131b8     0A 07 08 E8 
131bc     FF 15 1A 18 
131c0     02 00 F3 0A 
131c4     08 00 13 29 | 	byte	$0a, $07, $08, $e8, $ff, $15, $1a, $18, $02, $00, $f3, $0a, $08, $00, $13, $29
131c8     25 10 F0 04 
131cc     FB 06 F8 FF 
131d0     1F 05 FA FA 
131d4     FE 0A 07 1F | 	byte	$25, $10, $f0, $04, $fb, $06, $f8, $ff, $1f, $05, $fa, $fa, $fe, $0a, $07, $1f
131d8     1D 0E 1A 10 
131dc     F8 F0 09 0C 
131e0     0B 0E ED FF 
131e4     10 0B 0B F2 | 	byte	$1d, $0e, $1a, $10, $f8, $f0, $09, $0c, $0b, $0e, $ed, $ff, $10, $0b, $0b, $f2
131e8     F8 06 0C 19 
131ec     1B 14 1C 1A 
131f0     14 10 10 EA 
131f4     E3 F1 FD 1B | 	byte	$f8, $06, $0c, $19, $1b, $14, $1c, $1a, $14, $10, $10, $ea, $e3, $f1, $fd, $1b
131f8     2F 23 08 FD 
131fc     FF 12 F4 E7 
13200     F8 F8 0B 18 
13204     18 2A 21 08 | 	byte	$2f, $23, $08, $fd, $ff, $12, $f4, $e7, $f8, $f8, $0b, $18, $18, $2a, $21, $08
13208     FA 01 05 F8 
1320c     E8 E6 F3 F7 
13210     0F 1C 1E 1C 
13214     12 F0 F7 F9 | 	byte	$fa, $01, $05, $f8, $e8, $e6, $f3, $f7, $0f, $1c, $1e, $1c, $12, $f0, $f7, $f9
13218     04 09 05 0A 
1321c     0D 10 0A F3 
13220     0B 1B 18 06 
13224     EC DD EB FF | 	byte	$04, $09, $05, $0a, $0d, $10, $0a, $f3, $0b, $1b, $18, $06, $ec, $dd, $eb, $ff
13228     16 13 1E 24 
1322c     00 DC E9 F3 
13230     0D 0F 00 EF 
13234     07 10 1B 26 | 	byte	$16, $13, $1e, $24, $00, $dc, $e9, $f3, $0d, $0f, $00, $ef, $07, $10, $1b, $26
13238     18 0C E9 F7 
1323c     E8 EE F3 FB 
13240     13 27 24 1F 
13244     10 EA E7 F7 | 	byte	$18, $0c, $e9, $f7, $e8, $ee, $f3, $fb, $13, $27, $24, $1f, $10, $ea, $e7, $f7
13248     FA 05 17 1B 
1324c     1C 0F 1A 0B 
13250     13 00 E8 ED 
13254     FC FA 07 10 | 	byte	$fa, $05, $17, $1b, $1c, $0f, $1a, $0b, $13, $00, $e8, $ed, $fc, $fa, $07, $10
13258     08 01 09 06 
1325c     04 0F 26 20 
13260     1B 08 F7 F6 
13264     E7 FD 0F 25 | 	byte	$08, $01, $09, $06, $04, $0f, $26, $20, $1b, $08, $f7, $f6, $e7, $fd, $0f, $25
13268     28 20 08 E4 
1326c     D3 EB 09 15 
13270     2D 2C 24 00 
13274     F8 FD 02 F5 | 	byte	$28, $20, $08, $e4, $d3, $eb, $09, $15, $2d, $2c, $24, $00, $f8, $fd, $02, $f5
13278     F2 FB 00 F6 
1327c     FA 0B 1B 33 
13280     3A 28 12 00 
13284     DD E9 E9 04 | 	byte	$f2, $fb, $00, $f6, $fa, $0b, $1b, $33, $3a, $28, $12, $00, $dd, $e9, $e9, $04
13288     0B 1F 20 0B 
1328c     0F 08 03 FA 
13290     EB F6 00 FF 
13294     13 1A 15 1F | 	byte	$0b, $1f, $20, $0b, $0f, $08, $03, $fa, $eb, $f6, $00, $ff, $13, $1a, $15, $1f
13298     08 04 08 F6 
1329c     FA FD 08 08 
132a0     01 F8 0A 10 
132a4     02 0F 12 15 | 	byte	$08, $04, $08, $f6, $fa, $fd, $08, $08, $01, $f8, $0a, $10, $02, $0f, $12, $15
132a8     0D FD 07 0C 
132ac     0A F8 E4 F3 
132b0     FF 0B 1A 02 
132b4     00 F1 FB 1B | 	byte	$0d, $fd, $07, $0c, $0a, $f8, $e4, $f3, $ff, $0b, $1a, $02, $00, $f1, $fb, $1b
132b8     3F 41 18 00 
132bc     E3 E2 E9 FF 
132c0     0E 23 20 00 
132c4     ED 07 25 19 | 	byte	$3f, $41, $18, $00, $e3, $e2, $e9, $ff, $0e, $23, $20, $00, $ed, $07, $25, $19
132c8     1B 10 F6 F7 
132cc     FC FA 00 15 
132d0     1B 0F 16 00 
132d4     ED F3 07 33 | 	byte	$1b, $10, $f6, $f7, $fc, $fa, $00, $15, $1b, $0f, $16, $00, $ed, $f3, $07, $33
132d8     40 30 14 F2 
132dc     E5 EA DA F7 
132e0     0C 1F 2A 3C 
132e4     2A 28 08 FD | 	byte	$40, $30, $14, $f2, $e5, $ea, $da, $f7, $0c, $1f, $2a, $3c, $2a, $28, $08, $fd
132e8     FC F6 EE 07 
132ec     13 16 1E 1E 
132f0     10 0A 04 0F 
132f4     0D 06 08 F0 | 	byte	$fc, $f6, $ee, $07, $13, $16, $1e, $1e, $10, $0a, $04, $0f, $0d, $06, $08, $f0
132f8     EC F4 F7 13 
132fc     27 2C 20 15 
13300     00 07 0E 01 
13304     0B 0E 0A 13 | 	byte	$ec, $f4, $f7, $13, $27, $2c, $20, $15, $00, $07, $0e, $01, $0b, $0e, $0a, $13
13308     18 14 0E 01 
1330c     E5 EF FF 19 
13310     02 F9 F3 13 
13314     1E 24 17 22 | 	byte	$18, $14, $0e, $01, $e5, $ef, $ff, $19, $02, $f9, $f3, $13, $1e, $24, $17, $22
13318     11 00 E4 E2 
1331c     EB 08 14 14 
13320     18 13 1B 10 
13324     EC D6 DF F7 | 	byte	$11, $00, $e4, $e2, $eb, $08, $14, $14, $18, $13, $1b, $10, $ec, $d6, $df, $f7
13328     07 1F 26 21 
1332c     1B 08 ED FD 
13330     FB F8 F2 FE 
13334     06 03 12 0F | 	byte	$07, $1f, $26, $21, $1b, $08, $ed, $fd, $fb, $f8, $f2, $fe, $06, $03, $12, $0f
13338     0F 08 14 08 
1333c     05 09 15 10 
13340     08 ED F6 03 
13344     1A 0A FE F8 | 	byte	$0f, $08, $14, $08, $05, $09, $15, $10, $08, $ed, $f6, $03, $1a, $0a, $fe, $f8
13348     E8 EB 0B 1F 
1334c     31 31 18 FA 
13350     EE F3 E9 EF 
13354     FC 01 10 0F | 	byte	$e8, $eb, $0b, $1f, $31, $31, $18, $fa, $ee, $f3, $e9, $ef, $fc, $01, $10, $0f
13358     03 00 07 1C 
1335c     1B 14 F4 EC 
13360     EF ED F7 0B 
13364     17 1F 10 F0 | 	byte	$03, $00, $07, $1c, $1b, $14, $f4, $ec, $ef, $ed, $f7, $0b, $17, $1f, $10, $f0
13368     E8 EF FF 25 
1336c     20 10 15 17 
13370     11 08 04 E4 
13374     EB EB EB F7 | 	byte	$e8, $ef, $ff, $25, $20, $10, $15, $17, $11, $08, $04, $e4, $eb, $eb, $eb, $f7
13378     1A 18 25 29 
1337c     18 02 F2 F0 
13380     EA F1 07 0C 
13384     13 0D 0C 14 | 	byte	$1a, $18, $25, $29, $18, $02, $f2, $f0, $ea, $f1, $07, $0c, $13, $0d, $0c, $14
13388     1C 12 0B 06 
1338c     0F 1A 05 F1 
13390     FD 06 15 15 
13394     13 10 F4 EF | 	byte	$1c, $12, $0b, $06, $0f, $1a, $05, $f1, $fd, $06, $15, $15, $13, $10, $f4, $ef
13398     ED FB 1B 24 
1339c     18 0D 08 F9 
133a0     03 03 02 0E 
133a4     02 EE F2 F5 | 	byte	$ed, $fb, $1b, $24, $18, $0d, $08, $f9, $03, $03, $02, $0e, $02, $ee, $f2, $f5
133a8     03 03 0B 1A 
133ac     11 1C 0E 08 
133b0     01 FA 0A FC 
133b4     FA FF 10 15 | 	byte	$03, $03, $0b, $1a, $11, $1c, $0e, $08, $01, $fa, $0a, $fc, $fa, $ff, $10, $15
133b8     1E 10 08 FB 
133bc     05 FA FF 08 
133c0     06 0B 16 10 
133c4     00 F7 15 1C | 	byte	$1e, $10, $08, $fb, $05, $fa, $ff, $08, $06, $0b, $16, $10, $00, $f7, $15, $1c
133c8     14 0A 04 00 
133cc     F3 F6 13 25 
133d0     1B 15 09 01 
133d4     E1 EC F3 0D | 	byte	$14, $0a, $04, $00, $f3, $f6, $13, $25, $1b, $15, $09, $01, $e1, $ec, $f3, $0d
133d8     16 18 1A 2A 
133dc     27 10 08 00 
133e0     F3 F2 FD F3 
133e4     F3 F1 FF 13 | 	byte	$16, $18, $1a, $2a, $27, $10, $08, $00, $f3, $f2, $fd, $f3, $f3, $f1, $ff, $13
133e8     1F 24 23 11 
133ec     0C 09 0A 01 
133f0     02 00 07 0D 
133f4     09 01 05 22 | 	byte	$1f, $24, $23, $11, $0c, $09, $0a, $01, $02, $00, $07, $0d, $09, $01, $05, $22
133f8     0D 16 08 02 
133fc     16 12 13 12 
13400     11 03 12 F4 
13404     FD 1B 0E 01 | 	byte	$0d, $16, $08, $02, $16, $12, $13, $12, $11, $03, $12, $f4, $fd, $1b, $0e, $01
13408     F6 FF 0F 1F 
1340c     2F 3A 20 00 
13410     F0 EB F6 0B 
13414     0C 0B 14 09 | 	byte	$f6, $ff, $0f, $1f, $2f, $3a, $20, $00, $f0, $eb, $f6, $0b, $0c, $0b, $14, $09
13418     10 04 07 16 
1341c     12 14 12 00 
13420     FB 07 0E 0D 
13424     11 21 1B 08 | 	byte	$10, $04, $07, $16, $12, $14, $12, $00, $fb, $07, $0e, $0d, $11, $21, $1b, $08
13428     00 FA 0B 0A 
1342c     FF 0D 0D 13 
13430     0D 16 0A 0B 
13434     02 FA 01 07 | 	byte	$00, $fa, $0b, $0a, $ff, $0d, $0d, $13, $0d, $16, $0a, $0b, $02, $fa, $01, $07
13438     1B 1A 1C 19 
1343c     00 FF 07 15 
13440     04 F7 0B 16 
13444     13 16 0C 00 | 	byte	$1b, $1a, $1c, $19, $00, $ff, $07, $15, $04, $f7, $0b, $16, $13, $16, $0c, $00
13448     F0 E7 FF 12 
1344c     11 1A 16 08 
13450     00 03 15 0A 
13454     07 11 02 FA | 	byte	$f0, $e7, $ff, $12, $11, $1a, $16, $08, $00, $03, $15, $0a, $07, $11, $02, $fa
13458     FD 07 15 08 
1345c     06 03 0B 10 
13460     0A F5 03 13 
13464     1E 16 FB F8 | 	byte	$fd, $07, $15, $08, $06, $03, $0b, $10, $0a, $f5, $03, $13, $1e, $16, $fb, $f8
13468     F5 07 09 0D 
1346c     0C 05 04 11 
13470     13 28 24 08 
13474     F0 E2 E7 FF | 	byte	$f5, $07, $09, $0d, $0c, $05, $04, $11, $13, $28, $24, $08, $f0, $e2, $e7, $ff
13478     10 15 13 2C 
1347c     20 0F 0F 00 
13480     F6 ED F4 01 
13484     0C 03 02 11 | 	byte	$10, $15, $13, $2c, $20, $0f, $0f, $00, $f6, $ed, $f4, $01, $0c, $03, $02, $11
13488     13 2E 33 18 
1348c     08 E9 F3 F7 
13490     FC 00 0C 0D 
13494     08 05 0F 1E | 	byte	$13, $2e, $33, $18, $08, $e9, $f3, $f7, $fc, $00, $0c, $0d, $08, $05, $0f, $1e
13498     23 17 1D 0C 
1349c     00 F9 01 0F 
134a0     10 12 0D 1A 
134a4     00 FB F8 FD | 	byte	$23, $17, $1d, $0c, $00, $f9, $01, $0f, $10, $12, $0d, $1a, $00, $fb, $f8, $fd
134a8     1E 16 05 F0 
134ac     F3 09 0B 1F 
134b0     19 10 0F 1A 
134b4     16 02 EF F1 | 	byte	$1e, $16, $05, $f0, $f3, $09, $0b, $1f, $19, $10, $0f, $1a, $16, $02, $ef, $f1
134b8     EF 17 15 1A 
134bc     0B 0F 1C 17 
134c0     1E 00 FA FB 
134c4     F0 FB 1F 2F | 	byte	$ef, $17, $15, $1a, $0b, $0f, $1c, $17, $1e, $00, $fa, $fb, $f0, $fb, $1f, $2f
134c8     2E 1A 02 03 
134cc     EC EF EF FA 
134d0     F9 0D 17 1B 
134d4     10 0E 1B 25 | 	byte	$2e, $1a, $02, $03, $ec, $ef, $ef, $fa, $f9, $0d, $17, $1b, $10, $0e, $1b, $25
134d8     28 0A F8 E2 
134dc     E7 ED 07 1B 
134e0     10 07 15 14 
134e4     0A FB FC 13 | 	byte	$28, $0a, $f8, $e2, $e7, $ed, $07, $1b, $10, $07, $15, $14, $0a, $fb, $fc, $13
134e8     12 0C 0A 01 
134ec     EC F3 0F 1F 
134f0     19 0F 09 08 
134f4     0A 0A 0D 00 | 	byte	$12, $0c, $0a, $01, $ec, $f3, $0f, $1f, $19, $0f, $09, $08, $0a, $0a, $0d, $00
134f8     01 02 FF FC 
134fc     13 29 22 08 
13500     F8 F0 F7 F1 
13504     F7 08 1F 28 | 	byte	$01, $02, $ff, $fc, $13, $29, $22, $08, $f8, $f0, $f7, $f1, $f7, $08, $1f, $28
13508     20 10 02 00 
1350c     FA FC F7 13 
13510     1A 14 08 0D 
13514     15 19 08 FC | 	byte	$20, $10, $02, $00, $fa, $fc, $f7, $13, $1a, $14, $08, $0d, $15, $19, $08, $fc
13518     00 F8 F5 0D 
1351c     15 1B 1D 08 
13520     09 00 00 FD 
13524     00 FA 15 1F | 	byte	$00, $f8, $f5, $0d, $15, $1b, $1d, $08, $09, $00, $00, $fd, $00, $fa, $15, $1f
13528     1D 1C 10 0A 
1352c     05 02 F0 FB 
13530     09 12 0A 0C 
13534     07 0D 0E 19 | 	byte	$1d, $1c, $10, $0a, $05, $02, $f0, $fb, $09, $12, $0a, $0c, $07, $0d, $0e, $19
13538     10 00 0C 0F 
1353c     0E 0F 08 F5 
13540     F4 F6 0B 19 
13544     19 1B 09 01 | 	byte	$10, $00, $0c, $0f, $0e, $0f, $08, $f5, $f4, $f6, $0b, $19, $19, $1b, $09, $01
13548     F2 EF 01 0D 
1354c     1F 28 10 0A 
13550     FD FA F0 FB 
13554     09 0F 15 09 | 	byte	$f2, $ef, $01, $0d, $1f, $28, $10, $0a, $fd, $fa, $f0, $fb, $09, $0f, $15, $09
13558     0A 0F 15 17 
1355c     18 0D FB 03 
13560     03 06 00 FF 
13564     01 09 0D 0B | 	byte	$0a, $0f, $15, $17, $18, $0d, $fb, $03, $03, $06, $00, $ff, $01, $09, $0d, $0b
13568     0B 02 0A 0E 
1356c     05 13 09 F0 
13570     F1 FE 06 14 
13574     0C 01 0F 0A | 	byte	$0b, $02, $0a, $0e, $05, $13, $09, $f0, $f1, $fe, $06, $14, $0c, $01, $0f, $0a
13578     0D 04 FB 03 
1357c     0C 0B 09 13 
13580     04 01 03 06 
13584     01 01 03 13 | 	byte	$0d, $04, $fb, $03, $0c, $0b, $09, $13, $04, $01, $03, $06, $01, $01, $03, $13
13588     14 08 0D 00 
1358c     F1 F4 FA F0 
13590     FE 0D 1D 31 
13594     20 0C EA F5 | 	byte	$14, $08, $0d, $00, $f1, $f4, $fa, $f0, $fe, $0d, $1d, $31, $20, $0c, $ea, $f5
13598     F7 0D 08 0A 
1359c     14 02 F2 FD 
135a0     17 2F 28 15 
135a4     00 EF F6 FB | 	byte	$f7, $0d, $08, $0a, $14, $02, $f2, $fd, $17, $2f, $28, $15, $00, $ef, $f6, $fb
135a8     09 0D 15 18 
135ac     08 F8 04 07 
135b0     0F 19 19 24 
135b4     18 08 F1 EE | 	byte	$09, $0d, $15, $18, $08, $f8, $04, $07, $0f, $19, $19, $24, $18, $08, $f1, $ee
135b8     07 19 0C 0C 
135bc     02 0B 12 15 
135c0     18 12 08 10 
135c4     10 10 09 0B | 	byte	$07, $19, $0c, $0c, $02, $0b, $12, $15, $18, $12, $08, $10, $10, $10, $09, $0b
135c8     05 08 FD F6 
135cc     09 14 18 0F 
135d0     0A 09 04 0B 
135d4     0B 07 0B 0F | 	byte	$05, $08, $fd, $f6, $09, $14, $18, $0f, $0a, $09, $04, $0b, $0b, $07, $0b, $0f
135d8     0B 0B 1F 11 
135dc     0F 17 04 FA 
135e0     FA FF 15 10 
135e4     0B 0B 09 07 | 	byte	$0b, $0b, $1f, $11, $0f, $17, $04, $fa, $fa, $ff, $15, $10, $0b, $0b, $09, $07
135e8     16 11 15 09 
135ec     F7 09 13 0F 
135f0     0C 04 06 0D 
135f4     02 0D 08 07 | 	byte	$16, $11, $15, $09, $f7, $09, $13, $0f, $0c, $04, $06, $0d, $02, $0d, $08, $07
135f8     06 05 12 09 
135fc     0B 13 05 09 
13600     03 07 0C F9 
13604     F8 FF 13 14 | 	byte	$06, $05, $12, $09, $0b, $13, $05, $09, $03, $07, $0c, $f9, $f8, $ff, $13, $14
13608     08 00 0E 0F 
1360c     04 08 04 07 
13610     14 0C 15 06 
13614     F7 04 0D 08 | 	byte	$08, $00, $0e, $0f, $04, $08, $04, $07, $14, $0c, $15, $06, $f7, $04, $0d, $08
13618     09 09 F9 05 
1361c     02 08 04 0D 
13620     01 FF 15 10 
13624     0E 0E 1A 0C | 	byte	$09, $09, $f9, $05, $02, $08, $04, $0d, $01, $ff, $15, $10, $0e, $0e, $1a, $0c
13628     00 F5 F3 F3 
1362c     00 01 FD 0D 
13630     1C 1C 17 00 
13634     F8 FA 0E 0E | 	byte	$00, $f5, $f3, $f3, $00, $01, $fd, $0d, $1c, $1c, $17, $00, $f8, $fa, $0e, $0e
13638     0D 00 02 FD 
1363c     03 00 07 0F 
13640     13 08 08 0D 
13644     07 0B 0B 04 | 	byte	$0d, $00, $02, $fd, $03, $00, $07, $0f, $13, $08, $08, $0d, $07, $0b, $0b, $04
13648     FB 01 00 00 
1364c     0F 0A 0D 18 
13650     21 19 00 F1 
13654     F4 F5 0B 10 | 	byte	$fb, $01, $00, $00, $0f, $0a, $0d, $18, $21, $19, $00, $f1, $f4, $f5, $0b, $10
13658     16 0D 0C 08 
1365c     0C 13 19 03 
13660     FC 03 00 11 
13664     13 16 10 02 | 	byte	$16, $0d, $0c, $08, $0c, $13, $19, $03, $fc, $03, $00, $11, $13, $16, $10, $02
13668     03 00 F4 FA 
1366c     FA 06 16 1A 
13670     09 FA F9 0F 
13674     18 14 13 08 | 	byte	$03, $00, $f4, $fa, $fa, $06, $16, $1a, $09, $fa, $f9, $0f, $18, $14, $13, $08
13678     EE F5 F9 0F 
1367c     24 1E 13 11 
13680     0A 00 F6 F9 
13684     FA 00 0A 0D | 	byte	$ee, $f5, $f9, $0f, $24, $1e, $13, $11, $0a, $00, $f6, $f9, $fa, $00, $0a, $0d
13688     14 15 18 12 
1368c     04 F1 F4 F9 
13690     F7 05 14 1B 
13694     26 11 00 EB | 	byte	$14, $15, $18, $12, $04, $f1, $f4, $f9, $f7, $05, $14, $1b, $26, $11, $00, $eb
13698     F9 0F 15 19 
1369c     09 FB FB 07 
136a0     11 1A 15 10 
136a4     04 00 F3 F2 | 	byte	$f9, $0f, $15, $19, $09, $fb, $fb, $07, $11, $1a, $15, $10, $04, $00, $f3, $f2
136a8     FA 0E 1A 10 
136ac     14 15 02 FF 
136b0     06 FB 02 FD 
136b4     FF 07 01 06 | 	byte	$fa, $0e, $1a, $10, $14, $15, $02, $ff, $06, $fb, $02, $fd, $ff, $07, $01, $06
136b8     11 12 18 17 
136bc     12 04 F7 F5 
136c0     F6 FB 07 0F 
136c4     15 0A 04 09 | 	byte	$11, $12, $18, $17, $12, $04, $f7, $f5, $f6, $fb, $07, $0f, $15, $0a, $04, $09
136c8     14 10 05 00 
136cc     F8 FA 0D 14 
136d0     10 0C 08 09 
136d4     01 05 0B 0B | 	byte	$14, $10, $05, $00, $f8, $fa, $0d, $14, $10, $0c, $08, $09, $01, $05, $0b, $0b
136d8     0D 13 15 0A 
136dc     08 00 F3 F7 
136e0     FD 15 20 13 
136e4     0D 00 FF 0D | 	byte	$0d, $13, $15, $0a, $08, $00, $f3, $f7, $fd, $15, $20, $13, $0d, $00, $ff, $0d
136e8     0F 11 0D 0A 
136ec     07 07 06 08 
136f0     12 08 06 05 
136f4     0B 0E 0D 1F | 	byte	$0f, $11, $0d, $0a, $07, $07, $06, $08, $12, $08, $06, $05, $0b, $0e, $0d, $1f
136f8     1C 10 0B 0D 
136fc     00 F5 FD 04 
13700     FC FE 0F 15 
13704     0A 0F 1D 1D | 	byte	$1c, $10, $0b, $0d, $00, $f5, $fd, $04, $fc, $fe, $0f, $15, $0a, $0f, $1d, $1d
13708     14 0A 03 07 
1370c     01 01 FA F8 
13710     05 0A 10 11 
13714     1C 10 06 F8 | 	byte	$14, $0a, $03, $07, $01, $01, $fa, $f8, $05, $0a, $10, $11, $1c, $10, $06, $f8
13718     F8 03 17 1A 
1371c     04 F4 F7 FF 
13720     03 00 0F 15 
13724     0B 08 07 08 | 	byte	$f8, $03, $17, $1a, $04, $f4, $f7, $ff, $03, $00, $0f, $15, $0b, $08, $07, $08
13728     0A 0C 04 00 
1372c     FF 07 0A 08 
13730     0D 17 12 08 
13734     FB E6 ED 0A | 	byte	$0a, $0c, $04, $00, $ff, $07, $0a, $08, $0d, $17, $12, $08, $fb, $e6, $ed, $0a
13738     1B 18 14 0E 
1373c     10 06 07 0A 
13740     06 08 03 F9 
13744     07 09 15 0D | 	byte	$1b, $18, $14, $0e, $10, $06, $07, $0a, $06, $08, $03, $f9, $07, $09, $15, $0d
13748     08 02 02 0A 
1374c     05 0A 15 13 
13750     0D 08 04 F4 
13754     FA F5 04 12 | 	byte	$08, $02, $02, $0a, $05, $0a, $15, $13, $0d, $08, $04, $f4, $fa, $f5, $04, $12
13758     1E 10 08 01 
1375c     05 FF 06 0E 
13760     0E 11 01 00 
13764     F8 FC 07 0F | 	byte	$1e, $10, $08, $01, $05, $ff, $06, $0e, $0e, $11, $01, $00, $f8, $fc, $07, $0f
13768     16 13 12 09 
1376c     07 00 F1 FF 
13770     F9 00 07 1B 
13774     1F 18 11 0A | 	byte	$16, $13, $12, $09, $07, $00, $f1, $ff, $f9, $00, $07, $1b, $1f, $18, $11, $0a
13778     F5 EB F1 06 
1377c     13 10 06 0A 
13780     15 10 0B 00 
13784     01 0D 0C 0B | 	byte	$f5, $eb, $f1, $06, $13, $10, $06, $0a, $15, $10, $0b, $00, $01, $0d, $0c, $0b
13788     06 03 0B 04 
1378c     05 10 02 FA 
13790     FF 17 14 13 
13794     11 00 FF 0A | 	byte	$06, $03, $0b, $04, $05, $10, $02, $fa, $ff, $17, $14, $13, $11, $00, $ff, $0a
13798     07 0E 08 0C 
1379c     0A 0C F7 F8 
137a0     0D 0D 0D 11 
137a4     15 1A 0C F0 | 	byte	$07, $0e, $08, $0c, $0a, $0c, $f7, $f8, $0d, $0d, $0d, $11, $15, $1a, $0c, $f0
137a8     F3 06 0A 13 
137ac     05 00 02 0B 
137b0     11 13 16 0A 
137b4     06 F9 F7 05 | 	byte	$f3, $06, $0a, $13, $05, $00, $02, $0b, $11, $13, $16, $0a, $06, $f9, $f7, $05
137b8     09 F8 F9 FE 
137bc     1B 1F 1B 10 
137c0     08 FC F7 03 
137c4     0B 0F 07 0D | 	byte	$09, $f8, $f9, $fe, $1b, $1f, $1b, $10, $08, $fc, $f7, $03, $0b, $0f, $07, $0d
137c8     04 01 F4 F7 
137cc     FD 06 07 13 
137d0     14 10 09 07 
137d4     07 15 14 01 | 	byte	$04, $01, $f4, $f7, $fd, $06, $07, $13, $14, $10, $09, $07, $07, $15, $14, $01
137d8     F8 F5 01 05 
137dc     0F 1D 19 12 
137e0     03 F3 F4 0A 
137e4     1B 11 08 FA | 	byte	$f8, $f5, $01, $05, $0f, $1d, $19, $12, $03, $f3, $f4, $0a, $1b, $11, $08, $fa
137e8     07 0F 04 08 
137ec     01 0D 0B 08 
137f0     05 0E 08 0C 
137f4     09 13 13 0D | 	byte	$07, $0f, $04, $08, $01, $0d, $0b, $08, $05, $0e, $08, $0c, $09, $13, $13, $0d
137f8     03 04 FC FD 
137fc     05 13 18 16 
13800     08 F6 FF 05 
13804     17 0F 04 06 | 	byte	$03, $04, $fc, $fd, $05, $13, $18, $16, $08, $f6, $ff, $05, $17, $0f, $04, $06
13808     0E 0F 17 12 
1380c     10 05 00 03 
13810     00 0A 03 1D 
13814     26 23 14 08 | 	byte	$0e, $0f, $17, $12, $10, $05, $00, $03, $00, $0a, $03, $1d, $26, $23, $14, $08
13818     F6 F9 F7 0A 
1381c     0C F4 F2 F2 
13820     0A 21 27 1D 
13824     18 0A FB F5 | 	byte	$f6, $f9, $f7, $0a, $0c, $f4, $f2, $f2, $0a, $21, $27, $1d, $18, $0a, $fb, $f5
13828     FC 08 17 11 
1382c     01 03 0A 06 
13830     07 13 0E 11 
13834     0B FC FA 06 | 	byte	$fc, $08, $17, $11, $01, $03, $0a, $06, $07, $13, $0e, $11, $0b, $fc, $fa, $06
13838     0B 13 12 12 
1383c     0A FD 01 06 
13840     14 1B 20 0C 
13844     00 F6 FD FA | 	byte	$0b, $13, $12, $12, $0a, $fd, $01, $06, $14, $1b, $20, $0c, $00, $f6, $fd, $fa
13848     00 07 12 0F 
1384c     0D 11 0C 13 
13850     12 06 04 F9 
13854     FE 05 08 0D | 	byte	$00, $07, $12, $0f, $0d, $11, $0c, $13, $12, $06, $04, $f9, $fe, $05, $08, $0d
13858     0D 11 10 08 
1385c     01 F8 F7 02 
13860     0B 0E 12 0A 
13864     00 FB 05 11 | 	byte	$0d, $11, $10, $08, $01, $f8, $f7, $02, $0b, $0e, $12, $0a, $00, $fb, $05, $11
13868     19 15 01 F4 
1386c     F6 FF 08 04 
13870     0A 0A 09 07 
13874     12 0D 11 0C | 	byte	$19, $15, $01, $f4, $f6, $ff, $08, $04, $0a, $0a, $09, $07, $12, $0d, $11, $0c
13878     F6 F4 ED FB 
1387c     0B 05 0F 0C 
13880     0B 0F 10 10 
13884     0A 07 02 05 | 	byte	$f6, $f4, $ed, $fb, $0b, $05, $0f, $0c, $0b, $0f, $10, $10, $0a, $07, $02, $05
13888     07 03 02 0F 
1388c     0C 07 05 02 
13890     02 00 05 15 
13894     10 0A 06 03 | 	byte	$07, $03, $02, $0f, $0c, $07, $05, $02, $02, $00, $05, $15, $10, $0a, $06, $03
13898     08 0F 0C 0B 
1389c     09 0C 0F 02 
138a0     FD 04 0F 19 
138a4     10 06 00 02 | 	byte	$08, $0f, $0c, $0b, $09, $0c, $0f, $02, $fd, $04, $0f, $19, $10, $06, $00, $02
138a8     F4 FA 00 06 
138ac     0F 19 18 0D 
138b0     06 F9 00 06 
138b4     08 02 02 05 | 	byte	$f4, $fa, $00, $06, $0f, $19, $18, $0d, $06, $f9, $00, $06, $08, $02, $02, $05
138b8     0A 0C 0D 15 
138bc     10 00 F6 ED 
138c0     EF FC 0D 0F 
138c4     17 12 1E 12 | 	byte	$0a, $0c, $0d, $15, $10, $00, $f6, $ed, $ef, $fc, $0d, $0f, $17, $12, $1e, $12
138c8     01 02 FB FE 
138cc     02 05 10 09 
138d0     05 FB 03 0D 
138d4     07 0C 10 03 | 	byte	$01, $02, $fb, $fe, $02, $05, $10, $09, $05, $fb, $03, $0d, $07, $0c, $10, $03
138d8     00 FF 0F 14 
138dc     13 0D 02 F8 
138e0     F7 F7 FF 08 
138e4     0D 07 0F 19 | 	byte	$00, $ff, $0f, $14, $13, $0d, $02, $f8, $f7, $f7, $ff, $08, $0d, $07, $0f, $19
138e8     16 0C 07 04 
138ec     09 04 03 02 
138f0     08 0E 14 08 
138f4     00 04 0F 14 | 	byte	$16, $0c, $07, $04, $09, $04, $03, $02, $08, $0e, $14, $08, $00, $04, $0f, $14
138f8     05 06 02 07 
138fc     0A 0C 11 0E 
13900     08 07 02 02 
13904     10 12 12 08 | 	byte	$05, $06, $02, $07, $0a, $0c, $11, $0e, $08, $07, $02, $02, $10, $12, $12, $08
13908     FA EF FB 0F 
1390c     1C 16 0E 0A 
13910     04 FE 00 0E 
13914     17 10 08 01 | 	byte	$fa, $ef, $fb, $0f, $1c, $16, $0e, $0a, $04, $fe, $00, $0e, $17, $10, $08, $01
13918     FC 07 0F 13 
1391c     1C 16 10 08 
13920     F7 FB 06 0B 
13924     0F 0C 13 15 | 	byte	$fc, $07, $0f, $13, $1c, $16, $10, $08, $f7, $fb, $06, $0b, $0f, $0c, $13, $15
13928     0C 0B 07 0C 
1392c     10 0A F9 00 
13930     05 12 1B 18 
13934     1A 08 05 03 | 	byte	$0c, $0b, $07, $0c, $10, $0a, $f9, $00, $05, $12, $1b, $18, $1a, $08, $05, $03
13938     09 0A 0C 0B 
1393c     10 13 10 0D 
13940     0F 07 06 03 
13944     01 0D 10 0D | 	byte	$09, $0a, $0c, $0b, $10, $13, $10, $0d, $0f, $07, $06, $03, $01, $0d, $10, $0d
13948     15 10 10 09 
1394c     02 07 0B 0E 
13950     08 0D 0B 13 
13954     08 03 05 06 | 	byte	$15, $10, $10, $09, $02, $07, $0b, $0e, $08, $0d, $0b, $13, $08, $03, $05, $06
13958     F8 04 0F 15 
1395c     12 04 09 10 
13960     0E 11 02 00 
13964     F5 F3 FF 0B | 	byte	$f8, $04, $0f, $15, $12, $04, $09, $10, $0e, $11, $02, $00, $f5, $f3, $ff, $0b
13968     13 1D 18 09 
1396c     04 02 08 04 
13970     00 09 09 02 
13974     0B 11 05 03 | 	byte	$13, $1d, $18, $09, $04, $02, $08, $04, $00, $09, $09, $02, $0b, $11, $05, $03
13978     00 00 00 00 
1397c     00 00 00 00 | 	byte	$00[8]
13980     05 05 00 FF 
13984     00 00 00 00 
13988     00 00 00 00 
1398c     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13990     00 00 00 00 
      ...             
139b4     00 00 00 00 
139b8     00 00       | 	byte	$00[42]
139ba     FE F4 FF 0E 
139be     17 10 00 EA 
139c2     E6 F6 0B 16 
139c6     15 08 FA F4 | 	byte	$fe, $f4, $ff, $0e, $17, $10, $00, $ea, $e6, $f6, $0b, $16, $15, $08, $fa, $f4
139ca     F0 FA 04 08 
139ce     0B 05 00 EC 
139d2     EF FD 03 0C 
139d6     00 F4 F1 F4 | 	byte	$f0, $fa, $04, $08, $0b, $05, $00, $ec, $ef, $fd, $03, $0c, $00, $f4, $f1, $f4
139da     F8 F9 F7 03 
139de     02 F9 F4 EF 
139e2     F8 FD 04 01 
139e6     F6 EB E6 F3 | 	byte	$f8, $f9, $f7, $03, $02, $f9, $f4, $ef, $f8, $fd, $04, $01, $f6, $eb, $e6, $f3
139ea     FF 04 FD F8 
139ee     F0 F9 F8 FC 
139f2     00 F1 F5 F1 
139f6     F6 FC FD 00 | 	byte	$ff, $04, $fd, $f8, $f0, $f9, $f8, $fc, $00, $f1, $f5, $f1, $f6, $fc, $fd, $00
139fa     F2 EE F3 FE 
139fe     0B 04 F4 ED 
13a02     EF FA 04 FA 
13a06     FC F3 F7 FD | 	byte	$f2, $ee, $f3, $fe, $0b, $04, $f4, $ed, $ef, $fa, $04, $fa, $fc, $f3, $f7, $fd
13a0a     FD FF 06 08 
13a0e     F5 E8 E7 0D 
13a12     15 12 F8 EE 
13a16     EB FF 10 FF | 	byte	$fd, $ff, $06, $08, $f5, $e8, $e7, $0d, $15, $12, $f8, $ee, $eb, $ff, $10, $ff
13a1a     28 BF 0C 35 
13a1e     C0 1F 55 C0 
13a22     FC BF 23 56 
13a26     00 BF 4F 20 | 	byte	$28, $bf, $0c, $35, $c0, $1f, $55, $c0, $fc, $bf, $23, $56, $00, $bf, $4f, $20
13a2a     FC 8F 2F 34 
13a2e     0F 0F 28 0F 
13a32     C1 FB 1B 3B 
13a36     24 E0 F7 48 | 	byte	$fc, $8f, $2f, $34, $0f, $0f, $28, $0f, $c1, $fb, $1b, $3b, $24, $e0, $f7, $48
13a3a     01 E0 FF 1F 
13a3e     40 F3 1D E1 
13a42     18 2F 20 F2 
13a46     17 E2 6F 00 | 	byte	$01, $e0, $ff, $1f, $40, $f3, $1d, $e1, $18, $2f, $20, $f2, $17, $e2, $6f, $00
13a4a     13 B0 3F 28 
13a4e     F5 17 40 FF 
13a52     20 FE EF 40 
13a56     EF 20 FF 40 | 	byte	$13, $b0, $3f, $28, $f5, $17, $40, $ff, $20, $fe, $ef, $40, $ef, $20, $ff, $40
13a5a     FA 10 FF 40 
13a5e     E0 FB 2F 70 
13a62     00 DF E8 3E 
13a66     15 00 1F 40 | 	byte	$fa, $10, $ff, $40, $e0, $fb, $2f, $70, $00, $df, $e8, $3e, $15, $00, $1f, $40
13a6a     10 E0 11 1F 
13a6e     40 00 0F 10 
13a72     17 50 EF 12 
13a76     50 C0 2F 6E | 	byte	$10, $e0, $11, $1f, $40, $00, $0f, $10, $17, $50, $ef, $12, $50, $c0, $2f, $6e
13a7a     00 FF D7 58 
13a7e     5F C0 BF 6F 
13a82     7F E0 97 48 
13a86     2F 00 3F 70 | 	byte	$00, $ff, $d7, $58, $5f, $c0, $bf, $6f, $7f, $e0, $97, $48, $2f, $00, $3f, $70
13a8a     F1 E0 FF 0F 
13a8e     58 60 D4 DF 
13a92     7D 20 D8 FF 
13a96     30 7F B0 1F | 	byte	$f1, $e0, $ff, $0f, $58, $60, $d4, $df, $7d, $20, $d8, $ff, $30, $7f, $b0, $1f
13a9a     10 1D 1F 60 
13a9e     FF EF 20 2F 
13aa2     40 FF 00 1F 
13aa6     30 20 DB 58 | 	byte	$10, $1d, $1f, $60, $ff, $ef, $20, $2f, $40, $ff, $00, $1f, $30, $20, $db, $58
13aaa     CB 7C 07 E0 
13aae     1F 1B 20 FF 
13ab2     30 32 F7 1C 
13ab6     08 FF 00 FF | 	byte	$cb, $7c, $07, $e0, $1f, $1b, $20, $ff, $30, $32, $f7, $1c, $08, $ff, $00, $ff
13aba     70 FF D0 FF 
13abe     60 DF 20 FF 
13ac2     70 E2 08 DF 
13ac6     50 28 F0 D3 | 	byte	$70, $ff, $d0, $ff, $60, $df, $20, $ff, $70, $e2, $08, $df, $50, $28, $f0, $d3
13aca     1F 30 7F C0 
13ace     2F D0 20 1F 
13ad2     00 4F E0 19 
13ad6     40 04 D7 50 | 	byte	$1f, $30, $7f, $c0, $2f, $d0, $20, $1f, $00, $4f, $e0, $19, $40, $04, $d7, $50
13ada     F0 EF 08 FF 
13ade     78 AF 08 3F 
13ae2     E0 20 9F 7F 
13ae6     C0 67 A0 3F | 	byte	$f0, $ef, $08, $ff, $78, $af, $08, $3f, $e0, $20, $9f, $7f, $c0, $67, $a0, $3f
13aea     E4 1F 20 D0 
13aee     FF 20 2F E0 
13af2     F8 1F 00 EF 
13af6     60 BF 00 58 | 	byte	$e4, $1f, $20, $d0, $ff, $20, $2f, $e0, $f8, $1f, $00, $ef, $60, $bf, $00, $58
13afa     9F 60 9F 40 
13afe     1E AD 2F 48 
13b02     B0 1F E7 20 
13b06     04 BF 68 C0 | 	byte	$9f, $60, $9f, $40, $1e, $ad, $2f, $48, $b0, $1f, $e7, $20, $04, $bf, $68, $c0
13b0a     2F C0 54 D7 
13b0e     34 80 3F 00 
13b12     3F E0 FF 00 
13b16     1F 20 BF CF | 	byte	$2f, $c0, $54, $d7, $34, $80, $3f, $00, $3f, $e0, $ff, $00, $1f, $20, $bf, $cf
13b1a     4C 0F 00 E7 
13b1e     FF 20 FB 18 
13b22     A1 4A A3 7F 
13b26     C0 FF E4 48 | 	byte	$4c, $0f, $00, $e7, $ff, $20, $fb, $18, $a1, $4a, $a3, $7f, $c0, $ff, $e4, $48
13b2a     CB D0 3F 40 
13b2e     BF 10 F7 BF 
13b32     40 FF C0 FF 
13b36     30 FF 00 FF | 	byte	$cb, $d0, $3f, $40, $bf, $10, $f7, $bf, $40, $ff, $c0, $ff, $30, $ff, $00, $ff
13b3a     20 B0 FB D7 
13b3e     7F C0 FF 90 
13b42     3F 1B 00 1B 
13b46     C8 EF 20 2F | 	byte	$20, $b0, $fb, $d7, $7f, $c0, $ff, $90, $3f, $1b, $00, $1b, $c8, $ef, $20, $2f
13b4a     00 E0 CF 08 
13b4e     EF 60 BF 20 
13b52     20 87 60 9F 
13b56     60 CF 10 FB | 	byte	$00, $e0, $cf, $08, $ef, $60, $bf, $20, $20, $87, $60, $9f, $60, $cf, $10, $fb
13b5a     EF 10 BF 7C 
13b5e     C0 1F C1 38 
13b62     F7 FB 20 EB 
13b66     0F D0 3F 00 | 	byte	$ef, $10, $bf, $7c, $c0, $1f, $c1, $38, $f7, $fb, $20, $eb, $0f, $d0, $3f, $00
13b6a     3F A0 1A EF 
13b6e     28 F0 FF 40 
13b72     AF 40 BF 50 
13b76     BF 40 BF 30 | 	byte	$3f, $a0, $1a, $ef, $28, $f0, $ff, $40, $af, $40, $bf, $50, $bf, $40, $bf, $30
13b7a     1B 00 FF 00 
13b7e     FF 34 26 E0 
13b82     FF C0 1F 0B 
13b86     28 F7 30 0C | 	byte	$1b, $00, $ff, $00, $ff, $34, $26, $e0, $ff, $c0, $1f, $0b, $28, $f7, $30, $0c
13b8a     BF 10 3F 00 
13b8e     E0 3F 08 DF 
13b92     40 FF 00 FF 
13b96     20 DF 7E 97 | 	byte	$bf, $10, $3f, $00, $e0, $3f, $08, $df, $40, $ff, $00, $ff, $20, $df, $7e, $97
13b9a     50 CF 46 1D 
13b9e     0C C0 2F 10 
13ba2     6A D2 1F 04 
13ba6     FF 01 42 0A | 	byte	$50, $cf, $46, $1d, $0c, $c0, $2f, $10, $6a, $d2, $1f, $04, $ff, $01, $42, $0a
13baa     09 0B 14 1F 
13bae     20 FF 10 FF 
13bb2     70 8F 7E 9F 
13bb6     7F 87 5C DF | 	byte	$09, $0b, $14, $1f, $20, $ff, $10, $ff, $70, $8f, $7e, $9f, $7f, $87, $5c, $df
13bba     60 B1 6F 08 
13bbe     1A DF 10 2F 
13bc2     60 DF 10 ED 
13bc6     1F 50 DF 20 | 	byte	$60, $b1, $6f, $08, $1a, $df, $10, $2f, $60, $df, $10, $ed, $1f, $50, $df, $20
13bca     1F E0 2C F7 
13bce     60 F7 10 DF 
13bd2     20 EF 7D D0 
13bd6     3F B0 7F 00 | 	byte	$1f, $e0, $2c, $f7, $60, $f7, $10, $df, $20, $ef, $7d, $d0, $3f, $b0, $7f, $00
13bda     1B E7 40 EF 
13bde     20 3F 00 3B 
13be2     00 D7 6C EB 
13be6     30 F7 F7 48 | 	byte	$1b, $e7, $40, $ef, $20, $3f, $00, $3b, $00, $d7, $6c, $eb, $30, $f7, $f7, $48
13bea     E0 3F F3 30 
13bee     FF 1C E0 3F 
13bf2     00 1F 2F 20 
13bf6     FF 00 EF EF | 	byte	$e0, $3f, $f3, $30, $ff, $1c, $e0, $3f, $00, $1f, $2f, $20, $ff, $00, $ef, $ef
13bfa     54 0F 20 FF 
13bfe     00 1F 0A FF 
13c02     10 CF 5F 03 
13c06     20 FF 00 FF | 	byte	$54, $0f, $20, $ff, $00, $1f, $0a, $ff, $10, $cf, $5f, $03, $20, $ff, $00, $ff
13c0a     E8 3F DF 50 
13c0e     D3 10 0B 00 
13c12     2F 00 FD 0F 
13c16     F0 2F 00 1F | 	byte	$e8, $3f, $df, $50, $d3, $10, $0b, $00, $2f, $00, $fd, $0f, $f0, $2f, $00, $1f
13c1a     00 FF 20 E8 
13c1e     FF 10 FF E0 
13c22     0F E0 2C E7 
13c26     18 EF 00 FF | 	byte	$00, $ff, $20, $e8, $ff, $10, $ff, $e0, $0f, $e0, $2c, $e7, $18, $ef, $00, $ff
13c2a     00 0C 07 E4 
13c2e     08 CB 1F FF 
13c32     00 DF 20 DF 
13c36     E0 FF D0 3C | 	byte	$00, $0c, $07, $e4, $08, $cb, $1f, $ff, $00, $df, $20, $df, $e0, $ff, $d0, $3c
13c3a     DF E0 FF 00 
13c3e     34 AB 10 EF 
13c42     E8 FF E1 08 
13c46     DF 00 F9 0C | 	byte	$df, $e0, $ff, $00, $34, $ab, $10, $ef, $e8, $ff, $e1, $08, $df, $00, $f9, $0c
13c4a     D1 00 D7 00 
13c4e     F0 FF 00 DF 
13c52     10 C9 FF EC 
13c56     D7 02 F7 05 | 	byte	$d1, $00, $d7, $00, $f0, $ff, $00, $df, $10, $c9, $ff, $ec, $d7, $02, $f7, $05
13c5a     F8 B6 FF E3 
13c5e     04 F7 C0 1F 
13c62     D0 FF D0 00 
13c66     FF E0 FF E0 | 	byte	$f8, $b6, $ff, $e3, $04, $f7, $c0, $1f, $d0, $ff, $d0, $00, $ff, $e0, $ff, $e0
13c6a     DF E7 FA 0F 
13c6e     F0 EA CF 28 
13c72     BF 10 CF E5 
13c76     F4 DB 2F C0 | 	byte	$df, $e7, $fa, $0f, $f0, $ea, $cf, $28, $bf, $10, $cf, $e5, $f4, $db, $2f, $c0
13c7a     FF D8 F5 FF 
13c7e     E0 EF 20 AF 
13c82     00 DF 2A F0 
13c86     F9 B4 27 D4 | 	byte	$ff, $d8, $f5, $ff, $e0, $ef, $20, $af, $00, $df, $2a, $f0, $f9, $b4, $27, $d4
13c8a     30 B4 1A D3 
13c8e     00 17 E0 EF 
13c92     00 EF 24 00 
13c96     FF 00 E7 17 | 	byte	$30, $b4, $1a, $d3, $00, $17, $e0, $ef, $00, $ef, $24, $00, $ff, $00, $e7, $17
13c9a     E8 FF E0 29 
13c9e     EF E0 FF 00 
13ca2     FF 40 AF 1E 
13ca6     EF 10 FB E9 | 	byte	$e8, $ff, $e0, $29, $ef, $e0, $ff, $00, $ff, $40, $af, $1e, $ef, $10, $fb, $e9
13caa     37 E0 FF 00 
13cae     1F EB 30 DF 
13cb2     40 EF D8 1F 
13cb6     14 1D 10 DF | 	byte	$37, $e0, $ff, $00, $1f, $eb, $30, $df, $40, $ef, $d8, $1f, $14, $1d, $10, $df
13cba     40 F8 07 26 
13cbe     F1 30 DD 07 
13cc2     3C 0F 10 0F 
13cc6     08 49 D4 1E | 	byte	$40, $f8, $07, $26, $f1, $30, $dd, $07, $3c, $0f, $10, $0f, $08, $49, $d4, $1e
13cca     F7 40 1F 08 
13cce     1F 11 03 2B 
13cd2     00 1F 28 2E 
13cd6     02 1B 33 10 | 	byte	$f7, $40, $1f, $08, $1f, $11, $03, $2b, $00, $1f, $28, $2e, $02, $1b, $33, $10
13cda     37 E0 3F 07 
13cde     64 D3 38 F8 
13ce2     4F 10 2F 17 
13ce6     18 1F 10 2B | 	byte	$37, $e0, $3f, $07, $64, $d3, $38, $f8, $4f, $10, $2f, $17, $18, $1f, $10, $2b
13cea     20 1F 20 2F 
13cee     08 3F 04 17 
13cf2     3F 20 1F 30 
13cf6     0F 34 25 07 | 	byte	$20, $1f, $20, $2f, $08, $3f, $04, $17, $3f, $20, $1f, $30, $0f, $34, $25, $07
13cfa     36 1F 12 4F 
13cfe     F0 3F 07 30 
13d02     1A 09 44 F0 
13d06     5F 20 1F 07 | 	byte	$36, $1f, $12, $4f, $f0, $3f, $07, $30, $1a, $09, $44, $f0, $5f, $20, $1f, $07
13d0a     20 FF 40 FF 
13d0e     20 1F 3F 20 
13d12     10 FF 28 1B 
13d16     07 3B 28 0F | 	byte	$20, $ff, $40, $ff, $20, $1f, $3f, $20, $10, $ff, $28, $1b, $07, $3b, $28, $0f
13d1a     FF 37 11 2A 
13d1e     F4 35 1D 08 
13d22     27 00 2D 14 
13d26     07 25 13 2C | 	byte	$ff, $37, $11, $2a, $f4, $35, $1d, $08, $27, $00, $2d, $14, $07, $25, $13, $2c
13d2a     00 08 13 10 
13d2e     1D 0C FF 0C 
13d32     0F 0B 3C E3 
13d36     3A E8 FF 14 | 	byte	$00, $08, $13, $10, $1d, $0c, $ff, $0c, $0f, $0b, $3c, $e3, $3a, $e8, $ff, $14
13d3a     1F 00 F5 14 
13d3e     10 0B 00 08 
13d42     07 0C 10 F5 
13d46     04 FF 20 EC | 	byte	$1f, $00, $f5, $14, $10, $0b, $00, $08, $07, $0c, $10, $f5, $04, $ff, $20, $ec
13d4a     F7 30 EB FE 
13d4e     F8 F7 02 0D 
13d52     04 0F F9 E6 
13d56     EC 0F 08 0A | 	byte	$f7, $30, $eb, $fe, $f8, $f7, $02, $0d, $04, $0f, $f9, $e6, $ec, $0f, $08, $0a
13d5a     ED F0 FF 10 
13d5e     E3 0C E2 05 
13d62     E9 FF 10 EF 
13d66     F0 F3 EC 14 | 	byte	$ed, $f0, $ff, $10, $e3, $0c, $e2, $05, $e9, $ff, $10, $ef, $f0, $f3, $ec, $14
13d6a     00 E8 CF 08 
13d6e     F7 00 0F EA 
13d72     EC 00 E7 02 
13d76     D8 EF F8 F0 | 	byte	$00, $e8, $cf, $08, $f7, $00, $0f, $ea, $ec, $00, $e7, $02, $d8, $ef, $f8, $f0
13d7a     08 E9 F6 F3 
13d7e     F9 D5 09 DB 
13d82     17 D8 F5 EC 
13d86     F3 FD 00 FA | 	byte	$08, $e9, $f6, $f3, $f9, $d5, $09, $db, $17, $d8, $f5, $ec, $f3, $fd, $00, $fa
13d8a     F0 E5 ED EB 
13d8e     F2 FB EA FF 
13d92     00 03 E7 E0 
13d96     ED EF 0A E5 | 	byte	$f0, $e5, $ed, $eb, $f2, $fb, $ea, $ff, $00, $03, $e7, $e0, $ed, $ef, $0a, $e5
13d9a     F8 DB 2D E8 
13d9e     DE FB 00 FF 
13da2     E0 F4 EF 00 
13da6     FF 00 02 EE | 	byte	$f8, $db, $2d, $e8, $de, $fb, $00, $ff, $e0, $f4, $ef, $00, $ff, $00, $02, $ee
13daa     F5 F5 F3 0E 
13dae     00 F5 05 0F 
13db2     F4 F3 F8 F5 
13db6     0E 0B 00 0F | 	byte	$f5, $f5, $f3, $0e, $00, $f5, $05, $0f, $f4, $f3, $f8, $f5, $0e, $0b, $00, $0f
13dba     00 F5 FB 0C 
13dbe     10 01 0B 00 
13dc2     0F 08 FF F8 
13dc6     07 00 12 11 | 	byte	$00, $f5, $fb, $0c, $10, $01, $0b, $00, $0f, $08, $ff, $f8, $07, $00, $12, $11
13dca     10 17 04 07 
13dce     08 16 0D 14 
13dd2     F3 1B 0F 18 
13dd6     1B 08 08 FD | 	byte	$10, $17, $04, $07, $08, $16, $0d, $14, $f3, $1b, $0f, $18, $1b, $08, $08, $fd
13dda     26 20 17 04 
13dde     17 0D 0E 1B 
13de2     18 0F 20 1B 
13de6     24 0C 16 F9 | 	byte	$26, $20, $17, $04, $17, $0d, $0e, $1b, $18, $0f, $20, $1b, $24, $0c, $16, $f9
13dea     0B 22 22 11 
13dee     22 13 2E 1B 
13df2     18 00 FE 1F 
13df6     27 1F 20 1B | 	byte	$0b, $22, $22, $11, $22, $13, $2e, $1b, $18, $00, $fe, $1f, $27, $1f, $20, $1b
13dfa     20 0F 1A 17 
13dfe     0F 20 1B 24 
13e02     0F 11 13 23 
13e06     24 28 1F 04 | 	byte	$20, $0f, $1a, $17, $0f, $20, $1b, $24, $0f, $11, $13, $23, $24, $28, $1f, $04
13e0a     0C 17 16 1F 
13e0e     2F 20 27 08 
13e12     1C 17 10 1D 
13e16     0D 1F 25 21 | 	byte	$0c, $17, $16, $1f, $2f, $20, $27, $08, $1c, $17, $10, $1d, $0d, $1f, $25, $21
13e1a     13 18 1D 28 
13e1e     18 08 16 0F 
13e22     12 2B 1C 20 
13e26     09 10 1B 22 | 	byte	$13, $18, $1d, $28, $18, $08, $16, $0f, $12, $2b, $1c, $20, $09, $10, $1b, $22
13e2a     19 15 0D 13 
13e2e     16 1D 0A 1A 
13e32     20 0E 10 1F 
13e36     11 0A 0F 15 | 	byte	$19, $15, $0d, $13, $16, $1d, $0a, $1a, $20, $0e, $10, $1f, $11, $0a, $0f, $15
13e3a     1A 15 FD 0E 
13e3e     19 07 1F 08 
13e42     0F 08 29 02 
13e46     F7 08 0B 1A | 	byte	$1a, $15, $fd, $0e, $19, $07, $1f, $08, $0f, $08, $29, $02, $f7, $08, $0b, $1a
13e4a     1B 19 00 EF 
13e4e     1F 03 10 EF 
13e52     0D 13 15 12 
13e56     0B F2 FF 00 | 	byte	$1b, $19, $00, $ef, $1f, $03, $10, $ef, $0d, $13, $15, $12, $0b, $f2, $ff, $00
13e5a     00 00 00 00 
13e5e     00 00 00 00 | 	byte	$00[8]
13e62     05 05 00 FF 
13e66     00 00 00 00 
13e6a     00 00 00 00 
13e6e     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
13e72     00 00 00 00 
      ...             
13e96     00 00 00 00 
13e9a     00 00       | 	byte	$00[42]
13e9c     0C 0B 0A 06 
13ea0     09 06 0E 07 
13ea4     09 0A 07 0D 
13ea8     00 0D 01 0C | 	byte	$0c, $0b, $0a, $06, $09, $06, $0e, $07, $09, $0a, $07, $0d, $00, $0d, $01, $0c
13eac     01 0B 04 0A 
13eb0     05 03 06 05 
13eb4     05 07 02 08 
13eb8     06 05 04 05 | 	byte	$01, $0b, $04, $0a, $05, $03, $06, $05, $05, $07, $02, $08, $06, $05, $04, $05
13ebc     07 09 07 04 
13ec0     09 05 08 04 
13ec4     07 06 0B 03 
13ec8     08 07 09 00 | 	byte	$07, $09, $07, $04, $09, $05, $08, $04, $07, $06, $0b, $03, $08, $07, $09, $00
13ecc     0D 04 FF 12 
13ed0     F9 0C 08 07 
13ed4     0F 01 14 07 
13ed8     14 1F 39 30 | 	byte	$0d, $04, $ff, $12, $f9, $0c, $08, $07, $0f, $01, $14, $07, $14, $1f, $39, $30
13edc     C0 98 80 FF 
13ee0     70 90 BF 80 
13ee4     BF 08 1C EF 
13ee8     7F A0 DF 7E | 	byte	$c0, $98, $80, $ff, $70, $90, $bf, $80, $bf, $08, $1c, $ef, $7f, $a0, $df, $7e
13eec     00 6F 60 3F 
13ef0     70 7F 79 7C 
13ef4     E0 80 3F 7F 
13ef8     60 E0 D8 88 | 	byte	$00, $6f, $60, $3f, $70, $7f, $79, $7c, $e0, $80, $3f, $7f, $60, $e0, $d8, $88
13efc     9A 80 80 D7 
13f00     10 80 F4 80 
13f04     80 80 80 DF 
13f08     7F D0 80 A8 | 	byte	$9a, $80, $80, $d7, $10, $80, $f4, $80, $80, $80, $80, $df, $7f, $d0, $80, $a8
13f0c     9F 07 7D 4A 
13f10     7F 50 DF 7F 
13f14     40 6F 7F 10 
13f18     0F 7F 60 7F | 	byte	$9f, $07, $7d, $4a, $7f, $50, $df, $7f, $40, $6f, $7f, $10, $0f, $7f, $60, $7f
13f1c     20 7F 60 EB 
13f20     5F 7F 40 00 
13f24     F4 B0 80 80 
13f28     83 3F 00 83 | 	byte	$20, $7f, $60, $eb, $5f, $7f, $40, $00, $f4, $b0, $80, $80, $83, $3f, $00, $83
13f2c     67 3F 80 80 
13f30     80 FF 7F 40 
13f34     80 87 1F 2B 
13f38     7F 7F 60 00 | 	byte	$67, $3f, $80, $80, $80, $ff, $7f, $40, $80, $87, $1f, $2b, $7f, $7f, $60, $00
13f3c     DF 7F 7F 00 
13f40     3F 60 EF 08 
13f44     6F E0 EC C8 
13f48     F7 C0 AF 10 | 	byte	$df, $7f, $7f, $00, $3f, $60, $ef, $08, $6f, $e0, $ec, $c8, $f7, $c0, $af, $10
13f4c     80 3F 10 80 
13f50     BF 2F 40 FF 
13f54     7F 20 97 4F 
13f58     C0 80 37 4E | 	byte	$80, $3f, $10, $80, $bf, $2f, $40, $ff, $7f, $20, $97, $4f, $c0, $80, $37, $4e
13f5c     6F 7F 7F 7F 
13f60     7F 30 BF 54 
13f64     1F 7F 7F 60 
13f68     17 50 83 B0 | 	byte	$6f, $7f, $7f, $7f, $7f, $30, $bf, $54, $1f, $7f, $7f, $60, $17, $50, $83, $b0
13f6c     80 80 BF E8 
13f70     80 80 FF 4F 
13f74     20 81 20 FF 
13f78     18 4C 01 10 | 	byte	$80, $80, $bf, $e8, $80, $80, $ff, $4f, $20, $81, $20, $ff, $18, $4c, $01, $10
13f7c     06 1F 3F 68 
13f80     44 21 18 19 
13f84     E0 4F 42 10 
13f88     17 4F 58 40 | 	byte	$06, $1f, $3f, $68, $44, $21, $18, $19, $e0, $4f, $42, $10, $17, $4f, $58, $40
13f8c     95 C0 9F D4 
13f90     80 3F 70 E0 
13f94     FF D0 C8 BF 
13f98     C0 AA 80 80 | 	byte	$95, $c0, $9f, $d4, $80, $3f, $70, $e0, $ff, $d0, $c8, $bf, $c0, $aa, $80, $80
13f9c     80 8F FF 60 
13fa0     88 2F E0 E8 
13fa4     7F 60 A0 D8 
13fa8     80 BF 1F 7E | 	byte	$80, $8f, $ff, $60, $88, $2f, $e0, $e8, $7f, $60, $a0, $d8, $80, $bf, $1f, $7e
13fac     2F 60 D7 C7 
13fb0     5F 37 40 3F 
13fb4     40 AF 34 FF 
13fb8     20 2F 00 1F | 	byte	$2f, $60, $d7, $c7, $5f, $37, $40, $3f, $40, $af, $34, $ff, $20, $2f, $00, $1f
13fbc     C3 48 90 5F 
13fc0     40 C0 1F 7F 
13fc4     7F 48 2F 50 
13fc8     3F 70 3F 40 | 	byte	$c3, $48, $90, $5f, $40, $c0, $1f, $7f, $7f, $48, $2f, $50, $3f, $70, $3f, $40
13fcc     6F 00 7F 0B 
13fd0     60 DF 50 1F 
13fd4     20 AF 60 9A 
13fd8     88 2F 28 77 | 	byte	$6f, $00, $7f, $0b, $60, $df, $50, $1f, $20, $af, $60, $9a, $88, $2f, $28, $77
13fdc     00 BF 44 A0 
13fe0     FF 00 80 BF 
13fe4     AF 38 00 80 
13fe8     83 90 9F 6D | 	byte	$00, $bf, $44, $a0, $ff, $00, $80, $bf, $af, $38, $00, $80, $83, $90, $9f, $6d
13fec     20 C4 A0 80 
13ff0     87 18 DF 78 
13ff4     C7 3D 40 80 
13ff8     1F 15 00 EF | 	byte	$20, $c4, $a0, $80, $87, $18, $df, $78, $c7, $3d, $40, $80, $1f, $15, $00, $ef
13ffc     B0 FF 00 9F 
14000     78 C8 F6 A0 
14004     28 FF C0 DF 
14008     E0 DF 80 5F | 	byte	$b0, $ff, $00, $9f, $78, $c8, $f6, $a0, $28, $ff, $c0, $df, $e0, $df, $80, $5f
1400c     20 D9 3F E0 
14010     AF 20 CF DF 
14014     7F C0 BF 44 
14018     7E C0 38 8F | 	byte	$20, $d9, $3f, $e0, $af, $20, $cf, $df, $7f, $c0, $bf, $44, $7e, $c0, $38, $8f
1401c     D0 1F 60 FF 
14020     20 3F E3 30 
14024     BF 00 9F 60 
14028     37 08 2F 7F | 	byte	$d0, $1f, $60, $ff, $20, $3f, $e3, $30, $bf, $00, $9f, $60, $37, $08, $2f, $7f
1402c     1A F7 50 C8 
14030     9F 40 3F 1F 
14034     7F 1A 37 50 
14038     F0 4F 68 40 | 	byte	$1a, $f7, $50, $c8, $9f, $40, $3f, $1f, $7f, $1a, $37, $50, $f0, $4f, $68, $40
1403c     C0 1B B7 44 
14040     1F 60 08 BF 
14044     22 DF 5A EE 
14048     F9 F1 27 D8 | 	byte	$c0, $1b, $b7, $44, $1f, $60, $08, $bf, $22, $df, $5a, $ee, $f9, $f1, $27, $d8
1404c     A0 FF E0 FF 
14050     0B 12 FF 00 
14054     DF D1 40 80 
14058     DF 40 F0 1F | 	byte	$a0, $ff, $e0, $ff, $0b, $12, $ff, $00, $df, $d1, $40, $80, $df, $40, $f0, $1f
1405c     22 D8 E0 EF 
14060     D1 33 4D E0 
14064     B7 5F 00 3F 
14068     10 44 D7 7F | 	byte	$22, $d8, $e0, $ef, $d1, $33, $4d, $e0, $b7, $5f, $00, $3f, $10, $44, $d7, $7f
1406c     00 0B 1B 40 
14070     DF 50 08 BF 
14074     F7 7F 60 00 
14078     EF 7F 00 00 | 	byte	$00, $0b, $1b, $40, $df, $50, $08, $bf, $f7, $7f, $60, $00, $ef, $7f, $00, $00
1407c     DF F0 3F 20 
14080     9F 18 BF 27 
14084     7F 47 30 BF 
14088     7F 00 17 20 | 	byte	$df, $f0, $3f, $20, $9f, $18, $bf, $27, $7f, $47, $30, $bf, $7f, $00, $17, $20
1408c     3F 70 1F 32 
14090     34 17 68 14 
14094     B0 FF 20 CB 
14098     1F 50 F0 FF | 	byte	$3f, $70, $1f, $32, $34, $17, $68, $14, $b0, $ff, $20, $cb, $1f, $50, $f0, $ff
1409c     00 A7 80 FF 
140a0     1F 40 BD C0 
140a4     80 80 DF 3F 
140a8     00 DF 80 8F | 	byte	$00, $a7, $80, $ff, $1f, $40, $bd, $c0, $80, $80, $df, $3f, $00, $df, $80, $8f
140ac     BF E0 EE BF 
140b0     70 9B EF C8 
140b4     85 F7 CF 4C 
140b8     C3 30 A7 A0 | 	byte	$bf, $e0, $ee, $bf, $70, $9b, $ef, $c8, $85, $f7, $cf, $4c, $c3, $30, $a7, $a0
140bc     AF 83 6F 00 
140c0     90 BF C0 80 
140c4     90 80 8F A0 
140c8     80 80 1F A0 | 	byte	$af, $83, $6f, $00, $90, $bf, $c0, $80, $90, $80, $8f, $a0, $80, $80, $1f, $a0
140cc     BF A0 BF D4 
140d0     E8 BF 08 92 
140d4     B0 9F E0 EF 
140d8     C0 4F DD 50 | 	byte	$bf, $a0, $bf, $d4, $e8, $bf, $08, $92, $b0, $9f, $e0, $ef, $c0, $4f, $dd, $50
140dc     CC C7 1E C0 
140e0     FF 0A 37 39 
140e4     10 5F 40 33 
140e8     00 C7 3F 40 | 	byte	$cc, $c7, $1e, $c0, $ff, $0a, $37, $39, $10, $5f, $40, $33, $00, $c7, $3f, $40
140ec     0F 50 C3 5F 
140f0     08 DF 18 AF 
140f4     40 FF 7F 00 
140f8     3F 40 3B 7F | 	byte	$0f, $50, $c3, $5f, $08, $df, $18, $af, $40, $ff, $7f, $00, $3f, $40, $3b, $7f
140fc     00 37 10 EF 
14100     7C C7 7F 08 
14104     1F 7F A8 57 
14108     C0 7F 7F 7F | 	byte	$00, $37, $10, $ef, $7c, $c7, $7f, $08, $1f, $7f, $a8, $57, $c0, $7f, $7f, $7f
1410c     11 7F 00 EF 
14110     7F E0 77 00 
14114     3F 7F 7F 7B 
14118     50 00 80 2F | 	byte	$11, $7f, $00, $ef, $7f, $e0, $77, $00, $3f, $7f, $7f, $7b, $50, $00, $80, $2f
1411c     7F 78 D0 EF 
14120     80 9F 80 BF 
14124     7F 7E 2F 7F 
14128     04 D0 80 AF | 	byte	$7f, $78, $d0, $ef, $80, $9f, $80, $bf, $7f, $7e, $2f, $7f, $04, $d0, $80, $af
1412c     5F 7F A0 EF 
14130     50 20 2F 7F 
14134     7F 10 28 B7 
14138     7F 59 48 5F | 	byte	$5f, $7f, $a0, $ef, $50, $20, $2f, $7f, $7f, $10, $28, $b7, $7f, $59, $48, $5f
1413c     7F 41 7F 78 
14140     7F 7F 67 78 
14144     D8 5F 7E 24 
14148     34 B3 10 BF | 	byte	$7f, $41, $7f, $78, $7f, $7f, $67, $78, $d8, $5f, $7e, $24, $34, $b3, $10, $bf
1414c     B3 1F 3F 00 
14150     DF 7F 40 B0 
14154     FF 60 7F 7F 
14158     40 00 E7 5F | 	byte	$b3, $1f, $3f, $00, $df, $7f, $40, $b0, $ff, $60, $7f, $7f, $40, $00, $e7, $5f
1415c     7A 6C 6B 58 
14160     2E 0F 7F 1A 
14164     10 0A 20 BF 
14168     E0 4F C0 4F | 	byte	$7a, $6c, $6b, $58, $2e, $0f, $7f, $1a, $10, $0a, $20, $bf, $e0, $4f, $c0, $4f
1416c     1A F0 FF 10 
14170     D7 95 2F 90 
14174     81 BF 1F 20 
14178     CF 70 EC A0 | 	byte	$1a, $f0, $ff, $10, $d7, $95, $2f, $90, $81, $bf, $1f, $20, $cf, $70, $ec, $a0
1417c     DF 81 81 BF 
14180     07 08 1C FB 
14184     04 E1 C0 80 
14188     D4 9F 50 BB | 	byte	$df, $81, $81, $bf, $07, $08, $1c, $fb, $04, $e1, $c0, $80, $d4, $9f, $50, $bb
1418c     E0 87 00 80 
14190     80 80 80 80 
14194     9F C0 80 80 
14198     FF E0 80 9F | 	byte	$e0, $87, $00, $80, $80, $80, $80, $80, $9f, $c0, $80, $80, $ff, $e0, $80, $9f
1419c     E0 DF 80 80 
141a0     87 1C 80 81 
141a4     24 E0 87 E0 
141a8     8F E0 FF 40 | 	byte	$e0, $df, $80, $80, $87, $1c, $80, $81, $24, $e0, $87, $e0, $8f, $e0, $ff, $40
141ac     A3 E0 80 4F 
141b0     E0 8F A0 80 
141b4     EF 18 9F 7F 
141b8     20 E7 4C AA | 	byte	$a3, $e0, $80, $4f, $e0, $8f, $a0, $80, $ef, $18, $9f, $7f, $20, $e7, $4c, $aa
141bc     C1 3F 30 80 
141c0     9F 80 A9 2F 
141c4     7C 20 80 EF 
141c8     30 DF 7F 57 | 	byte	$c1, $3f, $30, $80, $9f, $80, $a9, $2f, $7c, $20, $80, $ef, $30, $df, $7f, $57
141cc     10 00 80 FF 
141d0     75 7F 20 FF 
141d4     A8 EF 7F 28 
141d8     30 3F 70 A1 | 	byte	$10, $00, $80, $ff, $75, $7f, $20, $ff, $a8, $ef, $7f, $28, $30, $3f, $70, $a1
141dc     CF 1F 40 3F 
141e0     20 1F 40 AD 
141e4     80 6F 60 80 
141e8     DF 7F 40 57 | 	byte	$cf, $1f, $40, $3f, $20, $1f, $40, $ad, $80, $6f, $60, $80, $df, $7f, $40, $57
141ec     17 7F 1F 7F 
141f0     0F 7F 10 23 
141f4     7F 00 17 CF 
141f8     68 C0 6C C0 | 	byte	$17, $7f, $1f, $7f, $0f, $7f, $10, $23, $7f, $00, $17, $cf, $68, $c0, $6c, $c0
141fc     5F 70 F0 FF 
14200     60 37 C0 1F 
14204     78 00 FF 7F 
14208     7B 40 17 50 | 	byte	$5f, $70, $f0, $ff, $60, $37, $c0, $1f, $78, $00, $ff, $7f, $7b, $40, $17, $50
1420c     24 88 2F 26 
14210     E0 7F 7F 40 
14214     7F 7B 7C 7F 
14218     7F 7B 70 2F | 	byte	$24, $88, $2f, $26, $e0, $7f, $7f, $40, $7f, $7b, $7c, $7f, $7f, $7b, $70, $2f
1421c     78 40 DF 7F 
14220     07 4F 68 FF 
14224     7F 50 7F 7F 
14228     77 7F 20 6F | 	byte	$78, $40, $df, $7f, $07, $4f, $68, $ff, $7f, $50, $7f, $7f, $77, $7f, $20, $6f
1422c     60 FF 7E CF 
14230     5F 40 7F 70 
14234     5F 40 08 DF 
14238     70 A3 3F 7F | 	byte	$60, $ff, $7e, $cf, $5f, $40, $7f, $70, $5f, $40, $08, $df, $70, $a3, $3f, $7f
1423c     30 5F 70 7F 
14240     08 47 E0 2F 
14244     BB 7A F3 28 
14248     5F 50 2A EF | 	byte	$30, $5f, $70, $7f, $08, $47, $e0, $2f, $bb, $7a, $f3, $28, $5f, $50, $2a, $ef
1424c     40 8B 3F 00 
14250     83 DF D0 EB 
14254     34 A0 B7 D7 
14258     08 83 3F 60 | 	byte	$40, $8b, $3f, $00, $83, $df, $d0, $eb, $34, $a0, $b7, $d7, $08, $83, $3f, $60
1425c     C0 1F 50 DF 
14260     5D E1 48 92 
14264     3F C0 B6 82 
14268     C8 84 AF C0 | 	byte	$c0, $1f, $50, $df, $5d, $e1, $48, $92, $3f, $c0, $b6, $82, $c8, $84, $af, $c0
1426c     81 FF 10 D6 
14270     E7 04 9F 6E 
14274     A0 DF 40 C1 
14278     1F 40 CE C0 | 	byte	$81, $ff, $10, $d6, $e7, $04, $9f, $6e, $a0, $df, $40, $c1, $1f, $40, $ce, $c0
1427c     CF 17 E0 83 
14280     1E 27 0F 00 
14284     EF C9 34 CF 
14288     C8 3F 00 80 | 	byte	$cf, $17, $e0, $83, $1e, $27, $0f, $00, $ef, $c9, $34, $cf, $c8, $3f, $00, $80
1428c     FF 20 81 1F 
14290     E7 E4 1F 0C 
14294     01 25 E0 E7 
14298     DB E8 80 BF | 	byte	$ff, $20, $81, $1f, $e7, $e4, $1f, $0c, $01, $25, $e0, $e7, $db, $e8, $80, $bf
1429c     C0 FF 70 DF 
142a0     00 C0 97 18 
142a4     9F 24 C0 D4 
142a8     80 1F 90 FF | 	byte	$c0, $ff, $70, $df, $00, $c0, $97, $18, $9f, $24, $c0, $d4, $80, $1f, $90, $ff
142ac     E0 FF C0 80 
142b0     EF 80 FF 00 
142b4     FF 00 87 EF 
142b8     C0 BF 10 C0 | 	byte	$e0, $ff, $c0, $80, $ef, $80, $ff, $00, $ff, $00, $87, $ef, $c0, $bf, $10, $c0
142bc     80 9F 00 80 
142c0     8F 80 80 BF 
142c4     80 B0 8F 10 
142c8     3F 10 8F C0 | 	byte	$80, $9f, $00, $80, $8f, $80, $80, $bf, $80, $b0, $8f, $10, $3f, $10, $8f, $c0
142cc     FF 80 80 EF 
142d0     E0 80 A0 80 
142d4     1F C0 DF 24 
142d8     7F C0 DF 1D | 	byte	$ff, $80, $80, $ef, $e0, $80, $a0, $80, $1f, $c0, $df, $24, $7f, $c0, $df, $1d
142dc     10 83 E0 9F 
142e0     6F 7C A0 FF 
142e4     44 5F 60 AF 
142e8     10 BF 00 7F | 	byte	$10, $83, $e0, $9f, $6f, $7c, $a0, $ff, $44, $5f, $60, $af, $10, $bf, $00, $7f
142ec     60 80 BF D0 
142f0     5F 03 7F 28 
142f4     7F 7F 7F 4F 
142f8     7C 07 7F 7F | 	byte	$60, $80, $bf, $d0, $5f, $03, $7f, $28, $7f, $7f, $7f, $4f, $7c, $07, $7f, $7f
142fc     1B 7F 7E 3F 
14300     7F 7F 78 7F 
14304     E0 EF 7C E4 
14308     3F 7F 60 3F | 	byte	$1b, $7f, $7e, $3f, $7f, $7f, $78, $7f, $e0, $ef, $7c, $e4, $3f, $7f, $60, $3f
1430c     78 FF 20 7F 
14310     C0 BF F7 E8 
14314     BF 2F 67 E0 
14318     3F 40 6C A0 | 	byte	$78, $ff, $20, $7f, $c0, $bf, $f7, $e8, $bf, $2f, $67, $e0, $3f, $40, $6c, $a0
1431c     3F 37 7C 84 
14320     5F 7F 60 7F 
14324     2F 7F 1F 7F 
14328     C0 3F 7E C0 | 	byte	$3f, $37, $7c, $84, $5f, $7f, $60, $7f, $2f, $7f, $1f, $7f, $c0, $3f, $7e, $c0
1432c     3F 78 D0 3F 
14330     40 7B 40 DF 
14334     04 3E 82 5F 
14338     7E D3 C0 BF | 	byte	$3f, $78, $d0, $3f, $40, $7b, $40, $df, $04, $3e, $82, $5f, $7e, $d3, $c0, $bf
1433c     4B 60 89 1F 
14340     7F 00 5F 7E 
14344     7F C0 1F 68 
14348     C0 FF A4 7F | 	byte	$4b, $60, $89, $1f, $7f, $00, $5f, $7e, $7f, $c0, $1f, $68, $c0, $ff, $a4, $7f
1434c     78 00 7F 7F 
14350     7E 0E 59 17 
14354     20 83 DF 5F 
14358     7F 00 3F D7 | 	byte	$78, $00, $7f, $7f, $7e, $0e, $59, $17, $20, $83, $df, $5f, $7f, $00, $3f, $d7
1435c     40 2F 20 FF 
14360     78 30 FF 7F 
14364     7F 70 4B 7F 
14368     70 14 3F 20 | 	byte	$40, $2f, $20, $ff, $78, $30, $ff, $7f, $7f, $70, $4b, $7f, $70, $14, $3f, $20
1436c     00 B7 0F 40 
14370     8F 6C 88 3F 
14374     70 00 D7 78 
14378     E0 AF 7F D8 | 	byte	$00, $b7, $0f, $40, $8f, $6c, $88, $3f, $70, $00, $d7, $78, $e0, $af, $7f, $d8
1437c     1F D0 D9 BF 
14380     18 A0 DF 30 
14384     8B 5F D0 3F 
14388     84 EF A0 BF | 	byte	$1f, $d0, $d9, $bf, $18, $a0, $df, $30, $8b, $5f, $d0, $3f, $84, $ef, $a0, $bf
1438c     83 BF 84 C0 
14390     EF 00 60 E0 
14394     A0 9F C0 83 
14398     A0 84 80 87 | 	byte	$83, $bf, $84, $c0, $ef, $00, $60, $e0, $a0, $9f, $c0, $83, $a0, $84, $80, $87
1439c     CF C8 BF 74 
143a0     E0 81 87 EF 
143a4     80 8F 00 98 
143a8     BF 00 BF 40 | 	byte	$cf, $c8, $bf, $74, $e0, $81, $87, $ef, $80, $8f, $00, $98, $bf, $00, $bf, $40
143ac     DF C0 DF C0 
143b0     BF 00 8F 80 
143b4     2F A0 80 BF 
143b8     00 80 9F 97 | 	byte	$df, $c0, $df, $c0, $bf, $00, $8f, $80, $2f, $a0, $80, $bf, $00, $80, $9f, $97
143bc     80 80 DF 0F 
143c0     50 2F 00 FF 
143c4     90 CF 8B FF 
143c8     F0 80 9F 70 | 	byte	$80, $80, $df, $0f, $50, $2f, $00, $ff, $90, $cf, $8b, $ff, $f0, $80, $9f, $70
143cc     C0 3F 68 28 
143d0     DF 20 A7 5F 
143d4     20 DF 20 8F 
143d8     7F A0 DF 68 | 	byte	$c0, $3f, $68, $28, $df, $20, $a7, $5f, $20, $df, $20, $8f, $7f, $a0, $df, $68
143dc     30 3F 00 DF 
143e0     08 80 FF 68 
143e4     17 00 FF 10 
143e8     DF 10 DF 80 | 	byte	$30, $3f, $00, $df, $08, $80, $ff, $68, $17, $00, $ff, $10, $df, $10, $df, $80
143ec     A8 81 6F E0 
143f0     BF 58 6F 20 
143f4     83 0F FF 7E 
143f8     00 80 E0 BF | 	byte	$a8, $81, $6f, $e0, $bf, $58, $6f, $20, $83, $0f, $ff, $7e, $00, $80, $e0, $bf
143fc     28 00 8F 17 
14400     7E 20 87 48 
14404     E8 97 C8 97 
14408     5F E0 83 5F | 	byte	$28, $00, $8f, $17, $7e, $20, $87, $48, $e8, $97, $c8, $97, $5f, $e0, $83, $5f
1440c     7E C0 FF 31 
14410     40 AF 44 1F 
14414     48 49 08 7F 
14418     50 0C 7F 00 | 	byte	$7e, $c0, $ff, $31, $40, $af, $44, $1f, $48, $49, $08, $7f, $50, $0c, $7f, $00
1441c     9F 10 FF 68 
14420     FF 48 7F 6B 
14424     7F 49 7F 20 
14428     E5 3F 60 EF | 	byte	$9f, $10, $ff, $68, $ff, $48, $7f, $6b, $7f, $49, $7f, $20, $e5, $3f, $60, $ef
1442c     1F 45 7F 70 
14430     0F 70 3F 00 
14434     FF 4F 40 AF 
14438     7F 7F 3F 7F | 	byte	$1f, $45, $7f, $70, $0f, $70, $3f, $00, $ff, $4f, $40, $af, $7f, $7f, $3f, $7f
1443c     7C 08 6F 20 
14440     00 FF 20 3C 
14444     82 3F D0 EF 
14448     7F 40 7F 60 | 	byte	$7c, $08, $6f, $20, $00, $ff, $20, $3c, $82, $3f, $d0, $ef, $7f, $40, $7f, $60
1444c     2F 6C 7F 00 
14450     F7 FA E0 81 
14454     10 3F 40 FF 
14458     48 1F F0 28 | 	byte	$2f, $6c, $7f, $00, $f7, $fa, $e0, $81, $10, $3f, $40, $ff, $48, $1f, $f0, $28
1445c     9F 20 BF A0 
14460     FF E0 BF 24 
14464     0C D3 58 A8 
14468     37 DF C0 FF | 	byte	$9f, $20, $bf, $a0, $ff, $e0, $bf, $24, $0c, $d3, $58, $a8, $37, $df, $c0, $ff
1446c     40 9F 1F 10 
14470     DF 50 DF 00 
14474     BF 18 81 DF 
14478     82 FF DB 20 | 	byte	$40, $9f, $1f, $10, $df, $50, $df, $00, $bf, $18, $81, $df, $82, $ff, $db, $20
1447c     AF 7F 08 A0 
14480     5F 00 D0 DF 
14484     7C 20 3F 50 
14488     2F C0 3F C0 | 	byte	$af, $7f, $08, $a0, $5f, $00, $d0, $df, $7c, $20, $3f, $50, $2f, $c0, $3f, $c0
1448c     BF 50 A4 8F 
14490     20 1B 81 2F 
14494     20 48 7F 20 
14498     5F 59 70 B3 | 	byte	$bf, $50, $a4, $8f, $20, $1b, $81, $2f, $20, $48, $7f, $20, $5f, $59, $70, $b3
1449c     7F 00 FF 68 
144a0     FF 4C 04 5F 
144a4     53 40 EF 6F 
144a8     50 20 D5 2C | 	byte	$7f, $00, $ff, $68, $ff, $4c, $04, $5f, $53, $40, $ef, $6f, $50, $20, $d5, $2c
144ac     EF 7C 57 00 
144b0     5C 88 DF FF 
144b4     C0 83 5F 68 
144b8     A5 10 BF 30 | 	byte	$ef, $7c, $57, $00, $5c, $88, $df, $ff, $c0, $83, $5f, $68, $a5, $10, $bf, $30
144bc     FF AF 6F A5 
144c0     28 81 3D 90 
144c4     7F 00 5F 20 
144c8     AF A7 00 BF | 	byte	$ff, $af, $6f, $a5, $28, $81, $3d, $90, $7f, $00, $5f, $20, $af, $a7, $00, $bf
144cc     A0 BF 00 00 
144d0     8B BF 00 8F 
144d4     A0 9F D6 C0 
144d8     97 13 5F 40 | 	byte	$a0, $bf, $00, $00, $8b, $bf, $00, $8f, $a0, $9f, $d6, $c0, $97, $13, $5f, $40
144dc     D0 D7 3F C0 
144e0     CF A0 8F 80 
144e4     3F 02 00 80 
144e8     81 D0 DF 27 | 	byte	$d0, $d7, $3f, $c0, $cf, $a0, $8f, $80, $3f, $02, $00, $80, $81, $d0, $df, $27
144ec     30 2F E0 5F 
144f0     40 1F FF 60 
144f4     D7 30 D7 78 
144f8     AF 0B 02 AF | 	byte	$30, $2f, $e0, $5f, $40, $1f, $ff, $60, $d7, $30, $d7, $78, $af, $0b, $02, $af
144fc     28 37 C7 6C 
14500     90 04 9F 00 
14504     FF 60 DB 3F 
14508     7F 20 BF 5F | 	byte	$28, $37, $c7, $6c, $90, $04, $9f, $00, $ff, $60, $db, $3f, $7f, $20, $bf, $5f
1450c     1F 00 EF 10 
14510     57 08 5F 20 
14514     BF 68 DF 40 
14518     9F 20 9F 3F | 	byte	$1f, $00, $ef, $10, $57, $08, $5f, $20, $bf, $68, $df, $40, $9f, $20, $9f, $3f
1451c     30 26 B3 6E 
14520     00 25 C0 83 
14524     5F 5C B0 7F 
14528     40 B0 AF C0 | 	byte	$30, $26, $b3, $6e, $00, $25, $c0, $83, $5f, $5c, $b0, $7f, $40, $b0, $af, $c0
1452c     AF 60 80 80 
14530     3F 00 9F 00 
14534     87 D0 81 F7 
14538     C0 1F E0 80 | 	byte	$af, $60, $80, $80, $3f, $00, $9f, $00, $87, $d0, $81, $f7, $c0, $1f, $e0, $80
1453c     EF 00 87 00 
14540     EA 80 C0 80 
14544     00 9B 90 FF 
14548     E8 3F 40 EF | 	byte	$ef, $00, $87, $00, $ea, $80, $c0, $80, $00, $9b, $90, $ff, $e8, $3f, $40, $ef
1454c     7F 0A 30 AF 
14550     24 80 DF E0 
14554     37 C0 BF 20 
14558     FF A0 3B B0 | 	byte	$7f, $0a, $30, $af, $24, $80, $df, $e0, $37, $c0, $bf, $20, $ff, $a0, $3b, $b0
1455c     47 3F 70 4F 
14560     3C C0 B3 DF 
14564     03 5F 40 7F 
14568     7C 78 F3 64 | 	byte	$47, $3f, $70, $4f, $3c, $c0, $b3, $df, $03, $5f, $40, $7f, $7c, $78, $f3, $64
1456c     80 3F 50 00 
14570     FF 40 1F 7F 
14574     67 7E 2F 30 
14578     7F 3B 00 7C | 	byte	$80, $3f, $50, $00, $ff, $40, $1f, $7f, $67, $7e, $2f, $30, $7f, $3b, $00, $7c
1457c     DF 7F 70 7F 
14580     00 7D CB 75 
14584     00 97 5F 7F 
14588     40 1F 68 2B | 	byte	$df, $7f, $70, $7f, $00, $7d, $cb, $75, $00, $97, $5f, $7f, $40, $1f, $68, $2b
1458c     10 3F 70 A8 
14590     EF 1F 60 C8 
14594     DF 7F 28 EF 
14598     40 BF 7F 00 | 	byte	$10, $3f, $70, $a8, $ef, $1f, $60, $c8, $df, $7f, $28, $ef, $40, $bf, $7f, $00
1459c     D7 BD 3F 30 
145a0     C3 3D D0 BF 
145a4     C0 EF A8 1F 
145a8     3F 20 FF B7 | 	byte	$d7, $bd, $3f, $30, $c3, $3d, $d0, $bf, $c0, $ef, $a8, $1f, $3f, $20, $ff, $b7
145ac     24 AF 70 80 
145b0     EF E0 E0 FF 
145b4     20 54 A8 FF 
145b8     FF 70 0F 78 | 	byte	$24, $af, $70, $80, $ef, $e0, $e0, $ff, $20, $54, $a8, $ff, $ff, $70, $0f, $78
145bc     DF 40 FF 60 
145c0     D0 6F 40 5F 
145c4     40 FF 7F 7F 
145c8     40 20 6F 00 | 	byte	$df, $40, $ff, $60, $d0, $6f, $40, $5f, $40, $ff, $7f, $7f, $40, $20, $6f, $00
145cc     DF 7F 30 2F 
145d0     7F 4F 7E 27 
145d4     78 40 5F 7F 
145d8     34 00 C8 E7 | 	byte	$df, $7f, $30, $2f, $7f, $4f, $7e, $27, $78, $40, $5f, $7f, $34, $00, $c8, $e7
145dc     3F 10 3F 40 
145e0     AF 6C C0 10 
145e4     B7 00 EF 7E 
145e8     00 6F 50 7F | 	byte	$3f, $10, $3f, $40, $af, $6c, $c0, $10, $b7, $00, $ef, $7e, $00, $6f, $50, $7f
145ec     D0 1F C0 BF 
145f0     08 85 3F 3F 
145f4     60 1F 37 00 
145f8     E8 2F D5 30 | 	byte	$d0, $1f, $c0, $bf, $08, $85, $3f, $3f, $60, $1f, $37, $00, $e8, $2f, $d5, $30
145fc     84 A8 DF 30 
14600     97 2F 1F 40 
14604     E4 81 F4 81 
14608     81 FF E0 DF | 	byte	$84, $a8, $df, $30, $97, $2f, $1f, $40, $e4, $81, $f4, $81, $81, $ff, $e0, $df
1460c     60 C0 B7 B0 
14610     A0 87 B0 15 
14614     81 E7 80 BF 
14618     D9 B8 FF C0 | 	byte	$60, $c0, $b7, $b0, $a0, $87, $b0, $15, $81, $e7, $80, $bf, $d9, $b8, $ff, $c0
1461c     80 9F 28 80 
14620     80 F0 2B A0 
14624     A8 9B 9F 3A 
14628     F0 D0 BF E0 | 	byte	$80, $9f, $28, $80, $80, $f0, $2b, $a0, $a8, $9b, $9f, $3a, $f0, $d0, $bf, $e0
1462c     FF 00 80 2B 
14630     E0 BF 74 E0 
14634     83 2F 10 1F 
14638     00 BF 20 4F | 	byte	$ff, $00, $80, $2b, $e0, $bf, $74, $e0, $83, $2f, $10, $1f, $00, $bf, $20, $4f
1463c     D0 DF 10 BF 
14640     10 DF E4 2F 
14644     10 EF 7F 50 
14648     FF 7F 20 FF | 	byte	$d0, $df, $10, $bf, $10, $df, $e4, $2f, $10, $ef, $7f, $50, $ff, $7f, $20, $ff
1464c     60 5F E0 5F 
14650     E0 EF 68 90 
14654     3F 6F 70 1D 
14658     D4 77 00 87 | 	byte	$60, $5f, $e0, $5f, $e0, $ef, $68, $90, $3f, $6f, $70, $1d, $d4, $77, $00, $87
1465c     17 55 E0 3F 
14660     7F 30 DF 00 
14664     80 CF D0 D8 
14668     FF 40 EF C0 | 	byte	$17, $55, $e0, $3f, $7f, $30, $df, $00, $80, $cf, $d0, $d8, $ff, $40, $ef, $c0
1466c     FF 30 D0 FF 
14670     8B 57 E0 DF 
14674     20 3F 60 57 
14678     40 20 81 CF | 	byte	$ff, $30, $d0, $ff, $8b, $57, $e0, $df, $20, $3f, $60, $57, $40, $20, $81, $cf
1467c     DF 6F 78 0F 
14680     40 FF EF F0 
14684     1C DF 60 9F 
14688     6A EF 7F 00 | 	byte	$df, $6f, $78, $0f, $40, $ff, $ef, $f0, $1c, $df, $60, $9f, $6a, $ef, $7f, $00
1468c     1F 00 BF 6F 
14690     10 BE 1F 3F 
14694     78 01 5F 3B 
14698     08 1E CF 64 | 	byte	$1f, $00, $bf, $6f, $10, $be, $1f, $3f, $78, $01, $5f, $3b, $08, $1e, $cf, $64
1469c     10 FF E0 6B 
146a0     07 7F 78 2F 
146a4     7F 08 BB 5F 
146a8     7F E0 3F 4B | 	byte	$10, $ff, $e0, $6b, $07, $7f, $78, $2f, $7f, $08, $bb, $5f, $7f, $e0, $3f, $4b
146ac     7B 78 6F 78 
146b0     57 C0 5F F0 
146b4     FF 7F 40 DF 
146b8     3F 7A D0 28 | 	byte	$7b, $78, $6f, $78, $57, $c0, $5f, $f0, $ff, $7f, $40, $df, $3f, $7a, $d0, $28
146bc     AF 7F 6E 00 
146c0     7F 40 08 9F 
146c4     7F 08 AD 0F 
146c8     56 00 3F 50 | 	byte	$af, $7f, $6e, $00, $7f, $40, $08, $9f, $7f, $08, $ad, $0f, $56, $00, $3f, $50
146cc     1F 00 1D 91 
146d0     57 A0 20 8D 
146d4     D7 7E 19 A8 
146d8     FF 81 BF F2 | 	byte	$1f, $00, $1d, $91, $57, $a0, $20, $8d, $d7, $7e, $19, $a8, $ff, $81, $bf, $f2
146dc     94 82 BB FF 
146e0     D0 83 97 E8 
146e4     1F C0 80 DF 
146e8     C0 81 D0 BF | 	byte	$94, $82, $bb, $ff, $d0, $83, $97, $e8, $1f, $c0, $80, $df, $c0, $81, $d0, $bf
146ec     11 20 DF 28 
146f0     81 80 D8 BF 
146f4     80 E8 BF 20 
146f8     DF 60 E6 B3 | 	byte	$11, $20, $df, $28, $81, $80, $d8, $bf, $80, $e8, $bf, $20, $df, $60, $e6, $b3
146fc     A0 9F 40 DF 
14700     04 FF 00 E7 
14704     AF 0B 52 DB 
14708     38 90 FF A0 | 	byte	$a0, $9f, $40, $df, $04, $ff, $00, $e7, $af, $0b, $52, $db, $38, $90, $ff, $a0
1470c     BF DF 72 E0 
14710     FF 20 EF CB 
14714     46 90 AF 2A 
14718     1F 20 FF 10 | 	byte	$bf, $df, $72, $e0, $ff, $20, $ef, $cb, $46, $90, $af, $2a, $1f, $20, $ff, $10
1471c     1F E0 6F 20 
14720     A6 3F 00 EC 
14724     DF 56 D1 67 
14728     21 00 80 1F | 	byte	$1f, $e0, $6f, $20, $a6, $3f, $00, $ec, $df, $56, $d1, $67, $21, $00, $80, $1f
1472c     0D 20 AF 25 
14730     2F 51 E8 DF 
14734     50 C8 F6 E7 
14738     48 3F 68 A0 | 	byte	$0d, $20, $af, $25, $2f, $51, $e8, $df, $50, $c8, $f6, $e7, $48, $3f, $68, $a0
1473c     1F 00 ED 00 
14740     DF E0 DF 0B 
14744     C7 18 EF 10 
14748     5A D0 9F E0 | 	byte	$1f, $00, $ed, $00, $df, $e0, $df, $0b, $c7, $18, $ef, $10, $5a, $d0, $9f, $e0
1474c     FF 78 E0 1F 
14750     28 1E 80 E8 
14754     DF 40 AC DB 
14758     16 00 DA 11 | 	byte	$ff, $78, $e0, $1f, $28, $1e, $80, $e8, $df, $40, $ac, $db, $16, $00, $da, $11
1475c     FF 00 EF 7F 
14760     7F 00 FF 6F 
14764     00 CF E8 FF 
14768     20 17 C0 FF | 	byte	$ff, $00, $ef, $7f, $7f, $00, $ff, $6f, $00, $cf, $e8, $ff, $20, $17, $c0, $ff
1476c     50 00 1F 38 
14770     57 6F 40 7F 
14774     78 EF 7F 30 
14778     AC 57 6F 60 | 	byte	$50, $00, $1f, $38, $57, $6f, $40, $7f, $78, $ef, $7f, $30, $ac, $57, $6f, $60
1477c     5F 4F 7F 40 
14780     00 7F E8 5F 
14784     20 7F 20 7F 
14788     40 7F 10 7F | 	byte	$5f, $4f, $7f, $40, $00, $7f, $e8, $5f, $20, $7f, $20, $7f, $40, $7f, $10, $7f
1478c     7F 7F 00 3F 
14790     7F 40 DF 7F 
14794     E0 BF 1F 58 
14798     8B 3F 6F 40 | 	byte	$7f, $7f, $00, $3f, $7f, $40, $df, $7f, $e0, $bf, $1f, $58, $8b, $3f, $6f, $40
1479c     27 D0 EF 3B 
147a0     70 81 DF 40 
147a4     2E 7F 70 20 
147a8     AF 70 CF F3 | 	byte	$27, $d0, $ef, $3b, $70, $81, $df, $40, $2e, $7f, $70, $20, $af, $70, $cf, $f3
147ac     F0 1F 30 68 
147b0     CB 6C 10 B5 
147b4     0C 3F C0 9F 
147b8     AB F8 F0 82 | 	byte	$f0, $1f, $30, $68, $cb, $6c, $10, $b5, $0c, $3f, $c0, $9f, $ab, $f8, $f0, $82
147bc     3F 20 D7 08 
147c0     89 E7 04 06 
147c4     E8 84 DF D6 
147c8     EF 6F E0 DF | 	byte	$3f, $20, $d7, $08, $89, $e7, $04, $06, $e8, $84, $df, $d6, $ef, $6f, $e0, $df
147cc     20 CF 1F 00 
147d0     1F 50 9F BF 
147d4     00 BF 7E A8 
147d8     FF 00 BF 38 | 	byte	$20, $cf, $1f, $00, $1f, $50, $9f, $bf, $00, $bf, $7e, $a8, $ff, $00, $bf, $38
147dc     1F E0 20 FF 
147e0     C0 9F A8 FF 
147e4     C0 AF 3F 45 
147e8     54 E0 3C 1F | 	byte	$1f, $e0, $20, $ff, $c0, $9f, $a8, $ff, $c0, $af, $3f, $45, $54, $e0, $3c, $1f
147ec     40 BF 20 FF 
147f0     00 1F 50 C0 
147f4     DF 15 00 9F 
147f8     1C 3F 38 D2 | 	byte	$40, $bf, $20, $ff, $00, $1f, $50, $c0, $df, $15, $00, $9f, $1c, $3f, $38, $d2
147fc     7F 00 EF 7F 
14800     D0 DF C0 9F 
14804     EF 90 DF 11 
14808     F0 FB 89 5F | 	byte	$7f, $00, $ef, $7f, $d0, $df, $c0, $9f, $ef, $90, $df, $11, $f0, $fb, $89, $5f
1480c     C0 AF A4 FF 
14810     BF 20 BF 40 
14814     00 80 CE 80 
14818     8F A9 FF 10 | 	byte	$c0, $af, $a4, $ff, $bf, $20, $bf, $40, $00, $80, $ce, $80, $8f, $a9, $ff, $10
1481c     E0 C0 8B C8 
14820     AF CC 00 C8 
14824     80 CF 90 F3 
14828     88 EF 40 00 | 	byte	$e0, $c0, $8b, $c8, $af, $cc, $00, $c8, $80, $cf, $90, $f3, $88, $ef, $40, $00
1482c     9F B0 BF D0 
14830     18 A0 DB A7 
14834     1C 2F A0 2F 
14838     C4 FF 78 D6 | 	byte	$9f, $b0, $bf, $d0, $18, $a0, $db, $a7, $1c, $2f, $a0, $2f, $c4, $ff, $78, $d6
1483c     D0 81 08 80 
14840     FF 08 6F 74 
14844     00 BF 40 FD 
14848     AF DF 6F 20 | 	byte	$d0, $81, $08, $80, $ff, $08, $6f, $74, $00, $bf, $40, $fd, $af, $df, $6f, $20
1484c     BF 46 07 20 
14850     5F 27 78 A7 
14854     7F 30 C0 1F 
14858     40 F7 1F 20 | 	byte	$bf, $46, $07, $20, $5f, $27, $78, $a7, $7f, $30, $c0, $1f, $40, $f7, $1f, $20
1485c     1F 77 78 5F 
14860     60 24 5F C4 
14864     FF D8 FF 40 
14868     1F 20 DF 60 | 	byte	$1f, $77, $78, $5f, $60, $24, $5f, $c4, $ff, $d8, $ff, $40, $1f, $20, $df, $60
1486c     27 5C 35 54 
14870     30 3F 50 B0 
14874     3F 60 F3 74 
14878     1B 40 FF 60 | 	byte	$27, $5c, $35, $54, $30, $3f, $50, $b0, $3f, $60, $f3, $74, $1b, $40, $ff, $60
1487c     B4 FF 7F 20 
14880     1F C0 1F C0 
14884     DF 04 1F 7F 
14888     60 E0 4A C8 | 	byte	$b4, $ff, $7f, $20, $1f, $c0, $1f, $c0, $df, $04, $1f, $7f, $60, $e0, $4a, $c8
1488c     EF 1F 44 FF 
14890     40 27 48 F0 
14894     0F 4C B0 36 
14898     17 00 3F E0 | 	byte	$ef, $1f, $44, $ff, $40, $27, $48, $f0, $0f, $4c, $b0, $36, $17, $00, $3f, $e0
1489c     1F 08 2F 70 
148a0     0F 50 27 10 
148a4     3B 00 DF 7C 
148a8     F0 F0 D3 1F | 	byte	$1f, $08, $2f, $70, $0f, $50, $27, $10, $3b, $00, $df, $7c, $f0, $f0, $d3, $1f
148ac     50 00 0F 7D 
148b0     60 13 30 1F 
148b4     70 A7 38 DD 
148b8     57 10 7B 00 | 	byte	$50, $00, $0f, $7d, $60, $13, $30, $1f, $70, $a7, $38, $dd, $57, $10, $7b, $00
148bc     3F 3F 40 0F 
148c0     F3 10 1F 20 
148c4     EF 63 5F 60 
148c8     1F 70 3F 60 | 	byte	$3f, $3f, $40, $0f, $f3, $10, $1f, $20, $ef, $63, $5f, $60, $1f, $70, $3f, $60
148cc     C1 5F E0 AF 
148d0     5F 7F 40 1F 
148d4     64 0B 10 BF 
148d8     00 97 30 83 | 	byte	$c1, $5f, $e0, $af, $5f, $7f, $40, $1f, $64, $0b, $10, $bf, $00, $97, $30, $83
148dc     FF 00 FF 7F 
148e0     DF 4D 26 E0 
148e4     DB 82 1F 00 
148e8     BB DF 10 C7 | 	byte	$ff, $00, $ff, $7f, $df, $4d, $26, $e0, $db, $82, $1f, $00, $bb, $df, $10, $c7
148ec     E0 BF 40 D8 
148f0     8B 18 80 92 
148f4     CB FF 00 AF 
148f8     24 1D 00 81 | 	byte	$e0, $bf, $40, $d8, $8b, $18, $80, $92, $cb, $ff, $00, $af, $24, $1d, $00, $81
148fc     34 DF F8 F0 
14900     BF A0 FF CF 
14904     20 80 3F 90 
14908     8F D0 83 D8 | 	byte	$34, $df, $f8, $f0, $bf, $a0, $ff, $cf, $20, $80, $3f, $90, $8f, $d0, $83, $d8
1490c     DF 1F C4 08 
14910     BF 50 81 EF 
14914     DF 7F 40 00 
14918     BF 40 80 87 | 	byte	$df, $1f, $c4, $08, $bf, $50, $81, $ef, $df, $7f, $40, $00, $bf, $40, $80, $87
1491c     F9 4C C0 04 
14920     FF E0 FF 00 
14924     4F 1B 00 EF 
14928     00 3F 90 FF | 	byte	$f9, $4c, $c0, $04, $ff, $e0, $ff, $00, $4f, $1b, $00, $ef, $00, $3f, $90, $ff
1492c     00 CF EF 3F 
14930     48 E7 5A F7 
14934     10 DF 1E FB 
14938     30 EF 53 44 | 	byte	$00, $cf, $ef, $3f, $48, $e7, $5a, $f7, $10, $df, $1e, $fb, $30, $ef, $53, $44
1493c     C8 FF 10 9F 
14940     17 EB 3F 50 
14944     FF E0 1F E0 
14948     36 AB 57 4E | 	byte	$c8, $ff, $10, $9f, $17, $eb, $3f, $50, $ff, $e0, $1f, $e0, $36, $ab, $57, $4e
1494c     D0 3F 00 1F 
14950     C0 4F C0 1F 
14954     20 3F 00 30 
14958     81 1F 2F 20 | 	byte	$d0, $3f, $00, $1f, $c0, $4f, $c0, $1f, $20, $3f, $00, $30, $81, $1f, $2f, $20
1495c     B7 17 D0 19 
14960     FF 20 CF 3C 
14964     FC 80 DF 00 
14968     FF 10 FF 10 | 	byte	$b7, $17, $d0, $19, $ff, $20, $cf, $3c, $fc, $80, $df, $00, $ff, $10, $ff, $10
1496c     1F 00 CF 26 
14970     D0 BF 17 48 
14974     F1 30 FB 6A 
14978     20 E0 3F 35 | 	byte	$1f, $00, $cf, $26, $d0, $bf, $17, $48, $f1, $30, $fb, $6a, $20, $e0, $3f, $35
1497c     10 1F 4F 70 
14980     17 7E 2F 60 
14984     00 2F 5E 20 
14988     CF 33 7F 68 | 	byte	$10, $1f, $4f, $70, $17, $7e, $2f, $60, $00, $2f, $5e, $20, $cf, $33, $7f, $68
1498c     20 37 60 D7 
14990     40 0F E0 FF 
14994     62 4C 00 4F 
14998     08 3F 7F 40 | 	byte	$20, $37, $60, $d7, $40, $0f, $e0, $ff, $62, $4c, $00, $4f, $08, $3f, $7f, $40
1499c     3F 50 60 EF 
149a0     10 EB 10 DF 
149a4     24 5F 20 FF 
149a8     7C 24 09 FF | 	byte	$3f, $50, $60, $ef, $10, $eb, $10, $df, $24, $5f, $20, $ff, $7c, $24, $09, $ff
149ac     00 FF C0 3F 
149b0     40 0D 20 1F 
149b4     E0 3F E8 5F 
149b8     00 DF 10 CD | 	byte	$00, $ff, $c0, $3f, $40, $0d, $20, $1f, $e0, $3f, $e8, $5f, $00, $df, $10, $cd
149bc     DF D0 FC B7 
149c0     EF 47 10 3F 
149c4     40 D7 10 9F 
149c8     00 B0 B7 08 | 	byte	$df, $d0, $fc, $b7, $ef, $47, $10, $3f, $40, $d7, $10, $9f, $00, $b0, $b7, $08
149cc     9F 08 FF E0 
149d0     3F D0 9F 3C 
149d4     CB C0 BF 10 
149d8     FF 38 C0 EF | 	byte	$9f, $08, $ff, $e0, $3f, $d0, $9f, $3c, $cb, $c0, $bf, $10, $ff, $38, $c0, $ef
149dc     08 00 B7 00 
149e0     DF 27 00 DF 
149e4     E0 D0 97 E8 
149e8     FF E0 CF EB | 	byte	$08, $00, $b7, $00, $df, $27, $00, $df, $e0, $d0, $97, $e8, $ff, $e0, $cf, $eb
149ec     E3 3D F0 E8 
149f0     EF 00 EF E8 
149f4     F7 00 DA 27 
149f8     10 37 00 FF | 	byte	$e3, $3d, $f0, $e8, $ef, $00, $ef, $e8, $f7, $00, $da, $27, $10, $37, $00, $ff
149fc     10 BF F4 D3 
14a00     3F 7A 30 F7 
14a04     00 0F C8 77 
14a08     30 35 14 17 | 	byte	$10, $bf, $f4, $d3, $3f, $7a, $30, $f7, $00, $0f, $c8, $77, $30, $35, $14, $17
14a0c     10 80 0F 1A 
14a10     CB 52 08 4F 
14a14     10 0F FF E0 
14a18     FF A9 EB 00 | 	byte	$10, $80, $0f, $1a, $cb, $52, $08, $4f, $10, $0f, $ff, $e0, $ff, $a9, $eb, $00
14a1c     DF 7C DA E0 
14a20     EF 00 F9 EF 
14a24     39 E0 2B 1F 
14a28     28 05 08 D7 | 	byte	$df, $7c, $da, $e0, $ef, $00, $f9, $ef, $39, $e0, $2b, $1f, $28, $05, $08, $d7
14a2c     00 CF F7 E8 
14a30     DF 00 14 D7 
14a34     40 BF 00 0A 
14a38     0F 10 B2 FF | 	byte	$00, $cf, $f7, $e8, $df, $00, $14, $d7, $40, $bf, $00, $0a, $0f, $10, $b2, $ff
14a3c     C0 FF 30 C1 
14a40     DF 1F 10 9F 
14a44     00 DF 3F 28 
14a48     DB F3 00 F7 | 	byte	$c0, $ff, $30, $c1, $df, $1f, $10, $9f, $00, $df, $3f, $28, $db, $f3, $00, $f7
14a4c     50 FB 6A F7 
14a50     38 E4 FF 48 
14a54     2F 3F 78 18 
14a58     28 15 10 EF | 	byte	$50, $fb, $6a, $f7, $38, $e4, $ff, $48, $2f, $3f, $78, $18, $28, $15, $10, $ef
14a5c     F3 17 1D 58 
14a60     25 04 5F 64 
14a64     40 3F 78 0B 
14a68     3F 00 2F 00 | 	byte	$f3, $17, $1d, $58, $25, $04, $5f, $64, $40, $3f, $78, $0b, $3f, $00, $2f, $00
14a6c     56 0B 58 1B 
14a70     54 30 07 19 
14a74     4F 24 5B 4A 
14a78     5F 60 2F 40 | 	byte	$56, $0b, $58, $1b, $54, $30, $07, $19, $4f, $24, $5b, $4a, $5f, $60, $2f, $40
14a7c     FF 2C D0 2F 
14a80     4C 38 33 3F 
14a84     70 07 17 28 
14a88     E8 37 18 2F | 	byte	$ff, $2c, $d0, $2f, $4c, $38, $33, $3f, $70, $07, $17, $28, $e8, $37, $18, $2f
14a8c     12 15 F0 F8 
14a90     0F 37 50 DF 
14a94     55 C0 FF 08 
14a98     3F 74 30 C0 | 	byte	$12, $15, $f0, $f8, $0f, $37, $50, $df, $55, $c0, $ff, $08, $3f, $74, $30, $c0
14a9c     FF 20 E9 27 
14aa0     00 F0 BF 08 
14aa4     C6 1F 00 02 
14aa8     F7 C0 FF FF | 	byte	$ff, $20, $e9, $27, $00, $f0, $bf, $08, $c6, $1f, $00, $02, $f7, $c0, $ff, $ff
14aac     40 80 EF 17 
14ab0     30 CF EF 2B 
14ab4     00 F7 F8 D7 
14ab8     04 D8 F7 08 | 	byte	$40, $80, $ef, $17, $30, $cf, $ef, $2b, $00, $f7, $f8, $d7, $04, $d8, $f7, $08
14abc     EF 20 08 FF 
14ac0     08 27 E0 FF 
14ac4     D3 38 A0 1F 
14ac8     13 E0 0B 3F | 	byte	$ef, $20, $08, $ff, $08, $27, $e0, $ff, $d3, $38, $a0, $1f, $13, $e0, $0b, $3f
14acc     00 FF 02 0F 
14ad0     0C 22 04 E8 
14ad4     F7 D4 DF BF 
14ad8     55 12 4C E0 | 	byte	$00, $ff, $02, $0f, $0c, $22, $04, $e8, $f7, $d4, $df, $bf, $55, $12, $4c, $e0
14adc     0F E0 37 00 
14ae0     F7 FA 04 E0 
14ae4     FF 67 20 D0 
14ae8     FF E7 00 AF | 	byte	$0f, $e0, $37, $00, $f7, $fa, $04, $e0, $ff, $67, $20, $d0, $ff, $e7, $00, $af
14aec     C0 DF 08 F0 
14af0     CF 5B 20 E0 
14af4     1F E0 BF 20 
14af8     CF D0 9F 1E | 	byte	$c0, $df, $08, $f0, $cf, $5b, $20, $e0, $1f, $e0, $bf, $20, $cf, $d0, $9f, $1e
14afc     FF 00 14 FF 
14b00     00 1F E0 AF 
14b04     C0 BB DF D2 
14b08     0F 5E 10 17 | 	byte	$ff, $00, $14, $ff, $00, $1f, $e0, $af, $c0, $bb, $df, $d2, $0f, $5e, $10, $17
14b0c     20 CF 20 07 
14b10     00 9F D0 CF 
14b14     E8 1C 09 B3 
14b18     3F 28 E0 E7 | 	byte	$20, $cf, $20, $07, $00, $9f, $d0, $cf, $e8, $1c, $09, $b3, $3f, $28, $e0, $e7
14b1c     D7 E8 ED C8 
14b20     17 2B 30 CB 
14b24     2E FE E8 CF 
14b28     07 FF 34 04 | 	byte	$d7, $e8, $ed, $c8, $17, $2b, $30, $cb, $2e, $fe, $e8, $cf, $07, $ff, $34, $04
14b2c     02 EF 0F 3F 
14b30     10 FF 40 C0 
14b34     FF C4 EF 2B 
14b38     0A 2B 00 DF | 	byte	$02, $ef, $0f, $3f, $10, $ff, $40, $c0, $ff, $c4, $ef, $2b, $0a, $2b, $00, $df
14b3c     1F 30 28 17 
14b40     10 1F 40 FF 
14b44     00 EB 37 20 
14b48     04 2B 50 10 | 	byte	$1f, $30, $28, $17, $10, $1f, $40, $ff, $00, $eb, $37, $20, $04, $2b, $50, $10
14b4c     F4 F3 3A 3B 
14b50     74 3F 20 0D 
14b54     A7 2C F7 00 
14b58     2F 40 3B 30 | 	byte	$f4, $f3, $3a, $3b, $74, $3f, $20, $0d, $a7, $2c, $f7, $00, $2f, $40, $3b, $30
14b5c     1B 13 28 10 
14b60     C5 10 E7 27 
14b64     10 3F 60 0B 
14b68     2A 08 B6 FD | 	byte	$1b, $13, $28, $10, $c5, $10, $e7, $27, $10, $3f, $60, $0b, $2a, $08, $b6, $fd
14b6c     17 00 FE 0F 
14b70     00 CB 17 F3 
14b74     F4 E7 5A 00 
14b78     F8 F7 10 CF | 	byte	$17, $00, $fe, $0f, $00, $cb, $17, $f3, $f4, $e7, $5a, $00, $f8, $f7, $10, $cf
14b7c     40 E2 0F 5E 
14b80     00 DF 2F C0 
14b84     A7 FB 27 03 
14b88     20 E6 3F 40 | 	byte	$40, $e2, $0f, $5e, $00, $df, $2f, $c0, $a7, $fb, $27, $03, $20, $e6, $3f, $40
14b8c     18 F7 34 D4 
14b90     F7 F0 F3 E4 
14b94     1F 22 35 20 
14b98     FF 05 10 FF | 	byte	$18, $f7, $34, $d4, $f7, $f0, $f3, $e4, $1f, $22, $35, $20, $ff, $05, $10, $ff
14b9c     00 17 17 20 
14ba0     00 1F 00 BF 
14ba4     F0 DF E0 FF 
14ba8     F5 2B 38 1F | 	byte	$00, $17, $17, $20, $00, $1f, $00, $bf, $f0, $df, $e0, $ff, $f5, $2b, $38, $1f
14bac     10 3F 37 40 
14bb0     BF 24 0A F9 
14bb4     08 2F 02 30 
14bb8     0F 00 EB 10 | 	byte	$10, $3f, $37, $40, $bf, $24, $0a, $f9, $08, $2f, $02, $30, $0f, $00, $eb, $10
14bbc     02 00 D0 F2 
14bc0     1B 20 DF 40 
14bc4     FF 50 2C 04 
14bc8     F8 FD EB F0 | 	byte	$02, $00, $d0, $f2, $1b, $20, $df, $40, $ff, $50, $2c, $04, $f8, $fd, $eb, $f0
14bcc     C7 FC DF 10 
14bd0     FF 20 06 2B 
14bd4     23 00 BF 1F 
14bd8     10 D5 05 17 | 	byte	$c7, $fc, $df, $10, $ff, $20, $06, $2b, $23, $00, $bf, $1f, $10, $d5, $05, $17
14bdc     02 F0 1F D5 
14be0     00 FE FF 10 
14be4     F8 C3 0C 0F 
14be8     00 EF 30 08 | 	byte	$02, $f0, $1f, $d5, $00, $fe, $ff, $10, $f8, $c3, $0c, $0f, $00, $ef, $30, $08
14bec     CD FA E7 2C 
14bf0     E8 CF 17 00 
14bf4     DF FA 0B 24 
14bf8     03 00 1B 18 | 	byte	$cd, $fa, $e7, $2c, $e8, $cf, $17, $00, $df, $fa, $0b, $24, $03, $00, $1b, $18
14bfc     FB 27 10 E7 
14c00     14 FF 26 08 
14c04     17 20 EF 17 
14c08     64 2A 3F 20 | 	byte	$fb, $27, $10, $e7, $14, $ff, $26, $08, $17, $20, $ef, $17, $64, $2a, $3f, $20
14c0c     FF 13 3F 00 
14c10     F7 11 F0 FF 
14c14     37 20 EB 1F 
14c18     0F 0C 27 2A | 	byte	$ff, $13, $3f, $00, $f7, $11, $f0, $ff, $37, $20, $eb, $1f, $0f, $0c, $27, $2a
14c1c     18 00 F7 00 
14c20     0F 20 0C E7 
14c24     1E 0F 30 D7 
14c28     D0 2F E8 17 | 	byte	$18, $00, $f7, $00, $0f, $20, $0c, $e7, $1e, $0f, $30, $d7, $d0, $2f, $e8, $17
14c2c     48 00 00 3F 
14c30     08 13 25 05 
14c34     3E C0 FF 64 
14c38     20 CF F0 FB | 	byte	$48, $00, $00, $3f, $08, $13, $25, $05, $3e, $c0, $ff, $64, $20, $cf, $f0, $fb
14c3c     3B E0 DD EF 
14c40     00 F7 F7 00 
14c44     1F EC 00 DF 
14c48     3A 00 0B F0 | 	byte	$3b, $e0, $dd, $ef, $00, $f7, $f7, $00, $1f, $ec, $00, $df, $3a, $00, $0b, $f0
14c4c     E5 35 00 CF 
14c50     12 08 DD 4F 
14c54     00 E0 F7 0F 
14c58     08 1F 38 C0 | 	byte	$e5, $35, $00, $cf, $12, $08, $dd, $4f, $00, $e0, $f7, $0f, $08, $1f, $38, $c0
14c5c     EF F2 C0 DF 
14c60     18 E8 DC C0 
14c64     F7 38 E0 EF 
14c68     00 C2 17 E0 | 	byte	$ef, $f2, $c0, $df, $18, $e8, $dc, $c0, $f7, $38, $e0, $ef, $00, $c2, $17, $e0
14c6c     D7 0C F0 EF 
14c70     4F 30 F0 FF 
14c74     30 27 31 38 
14c78     07 47 20 CC | 	byte	$d7, $0c, $f0, $ef, $4f, $30, $f0, $ff, $30, $27, $31, $38, $07, $47, $20, $cc
14c7c     F9 0F F0 1F 
14c80     38 00 0F 18 
14c84     E8 FF 00 FF 
14c88     37 40 EF 00 | 	byte	$f9, $0f, $f0, $1f, $38, $00, $0f, $18, $e8, $ff, $00, $ff, $37, $40, $ef, $00
14c8c     E8 DB 08 FD 
14c90     2F 20 27 38 
14c94     28 DC F6 F3 
14c98     F5 16 07 3D | 	byte	$e8, $db, $08, $fd, $2f, $20, $27, $38, $28, $dc, $f6, $f3, $f5, $16, $07, $3d
14c9c     20 FB 38 2E 
14ca0     00 3A E0 FF 
14ca4     50 E0 EF 18 
14ca8     F0 C7 0B EF | 	byte	$20, $fb, $38, $2e, $00, $3a, $e0, $ff, $50, $e0, $ef, $18, $f0, $c7, $0b, $ef
14cac     10 C0 DF 0F 
14cb0     08 D8 1B 08 
14cb4     E2 2F 00 E7 
14cb8     D0 D5 0F 27 | 	byte	$10, $c0, $df, $0f, $08, $d8, $1b, $08, $e2, $2f, $00, $e7, $d0, $d5, $0f, $27
14cbc     26 2F 28 03 
14cc0     10 07 38 1E 
14cc4     18 20 D2 D4 
14cc8     FF 3A 10 25 | 	byte	$26, $2f, $28, $03, $10, $07, $38, $1e, $18, $20, $d2, $d4, $ff, $3a, $10, $25
14ccc     04 06 F4 04 
14cd0     FF 04 F0 A3 
14cd4     FB 1B F0 07 
14cd8     1F 44 0A 11 | 	byte	$04, $06, $f4, $04, $ff, $04, $f0, $a3, $fb, $1b, $f0, $07, $1f, $44, $0a, $11
14cdc     FB 0C EF F0 
14ce0     FF 0F 2C 0B 
14ce4     37 4B 65 40 
14ce8     FF 48 D0 F7 | 	byte	$fb, $0c, $ef, $f0, $ff, $0f, $2c, $0b, $37, $4b, $65, $40, $ff, $48, $d0, $f7
14cec     35 00 FF 14 
14cf0     FD 35 10 07 
14cf4     2F 00 EF 38 
14cf8     00 FF 3B 4C | 	byte	$35, $00, $ff, $14, $fd, $35, $10, $07, $2f, $00, $ef, $38, $00, $ff, $3b, $4c
14cfc     28 20 F6 0B 
14d00     24 E3 2B 00 
14d04     FF 34 F0 0B 
14d08     2F 42 1C 18 | 	byte	$28, $20, $f6, $0b, $24, $e3, $2b, $00, $ff, $34, $f0, $0b, $2f, $42, $1c, $18
14d0c     07 19 14 23 
14d10     0A F1 1F 28 
14d14     D0 FE D9 E7 
14d18     2F E8 27 E8 | 	byte	$07, $19, $14, $23, $0a, $f1, $1f, $28, $d0, $fe, $d9, $e7, $2f, $e8, $27, $e8
14d1c     3F 40 C0 FF 
14d20     E0 E0 AF EF 
14d24     11 D0 1F 20 
14d28     00 17 26 00 | 	byte	$3f, $40, $c0, $ff, $e0, $e0, $af, $ef, $11, $d0, $1f, $20, $00, $17, $26, $00
14d2c     FF 08 FF 08 
14d30     E3 1F 30 F1 
14d34     1F 14 2B 35 
14d38     3E 24 1F 38 | 	byte	$ff, $08, $ff, $08, $e3, $1f, $30, $f1, $1f, $14, $2b, $35, $3e, $24, $1f, $38
14d3c     E8 F7 12 FF 
14d40     3B 30 07 10 
14d44     F3 06 F4 E5 
14d48     27 18 1D 4F | 	byte	$e8, $f7, $12, $ff, $3b, $30, $07, $10, $f3, $06, $f4, $e5, $27, $18, $1d, $4f
14d4c     28 FE 00 ED 
14d50     10 E1 F7 3B 
14d54     10 27 20 FF 
14d58     20 17 18 1C | 	byte	$28, $fe, $00, $ed, $10, $e1, $f7, $3b, $10, $27, $20, $ff, $20, $17, $18, $1c
14d5c     EC 1F 30 04 
14d60     0F 58 20 EF 
14d64     18 D4 DF 13 
14d68     0B F0 0B 2E | 	byte	$ec, $1f, $30, $04, $0f, $58, $20, $ef, $18, $d4, $df, $13, $0b, $f0, $0b, $2e
14d6c     34 10 00 DD 
14d70     0F 02 F3 29 
14d74     08 0B 0F 2D 
14d78     00 FF 72 10 | 	byte	$34, $10, $00, $dd, $0f, $02, $f3, $29, $08, $0b, $0f, $2d, $00, $ff, $72, $10
14d7c     0F 10 D9 16 
14d80     14 F6 12 07 
14d84     0F 04 EA E7 
14d88     12 F7 10 C0 | 	byte	$0f, $10, $d9, $16, $14, $f6, $12, $07, $0f, $04, $ea, $e7, $12, $f7, $10, $c0
14d8c     CF EF E1 EA 
14d90     F0 EB 0A 02 
14d94     1A E0 FF 00 
14d98     E5 E0 CA DF | 	byte	$cf, $ef, $e1, $ea, $f0, $eb, $0a, $02, $1a, $e0, $ff, $00, $e5, $e0, $ca, $df
14d9c     00 EA 1F 20 
14da0     F3 13 1B 1C 
14da4     04 F7 22 1A 
14da8     F2 0F 1A 14 | 	byte	$00, $ea, $1f, $20, $f3, $13, $1b, $1c, $04, $f7, $22, $1a, $f2, $0f, $1a, $14
14dac     00 EB F8 DD 
14db0     F5 1B 04 EF 
14db4     E0 D9 FF 12 
14db8     03 2D 28 1F | 	byte	$00, $eb, $f8, $dd, $f5, $1b, $04, $ef, $e0, $d9, $ff, $12, $03, $2d, $28, $1f
14dbc     28 FB 00 0F 
14dc0     1F 38 F3 FE 
14dc4     27 20 08 F3 
14dc8     28 F4 EF EF | 	byte	$28, $fb, $00, $0f, $1f, $38, $f3, $fe, $27, $20, $08, $f3, $28, $f4, $ef, $ef
14dcc     17 26 14 FF 
14dd0     18 00 EF 20 
14dd4     D0 EF 04 E9 
14dd8     1F 40 E4 F7 | 	byte	$17, $26, $14, $ff, $18, $00, $ef, $20, $d0, $ef, $04, $e9, $1f, $40, $e4, $f7
14ddc     0C 06 0D 1B 
14de0     19 F8 EF 29 
14de4     1A F4 FF 10 
14de8     13 18 07 4B | 	byte	$0c, $06, $0d, $1b, $19, $f8, $ef, $29, $1a, $f4, $ff, $10, $13, $18, $07, $4b
14dec     20 F7 37 00 
14df0     0F 00 DF 1C 
14df4     F0 F7 18 F5 
14df8     14 04 F0 C8 | 	byte	$20, $f7, $37, $00, $0f, $00, $df, $1c, $f0, $f7, $18, $f5, $14, $04, $f0, $c8
14dfc     DF 07 32 10 
14e00     F0 F7 2F 00 
14e04     A7 1F 01 F1 
14e08     37 04 0B 32 | 	byte	$df, $07, $32, $10, $f0, $f7, $2f, $00, $a7, $1f, $01, $f1, $37, $04, $0b, $32
14e0c     04 23 00 FF 
14e10     14 0B 13 20 
14e14     26 12 1B 23 
14e18     18 17 00 07 | 	byte	$04, $23, $00, $ff, $14, $0b, $13, $20, $26, $12, $1b, $23, $18, $17, $00, $07
14e1c     1B 13 23 F0 
14e20     EF 3F 3A E0 
14e24     17 44 00 FF 
14e28     32 05 2F 2A | 	byte	$1b, $13, $23, $f0, $ef, $3f, $3a, $e0, $17, $44, $00, $ff, $32, $05, $2f, $2a
14e2c     28 0A 12 E3 
14e30     FF 40 E0 EF 
14e34     38 2F 40 00 
14e38     1F 26 29 3F | 	byte	$28, $0a, $12, $e3, $ff, $40, $e0, $ef, $38, $2f, $40, $00, $1f, $26, $29, $3f
14e3c     20 10 ED FB 
14e40     06 FC 2F 28 
14e44     19 14 F8 16 
14e48     1C D8 1F 20 | 	byte	$20, $10, $ed, $fb, $06, $fc, $2f, $28, $19, $14, $f8, $16, $1c, $d8, $1f, $20
14e4c     07 10 E4 FF 
14e50     32 F4 0B 12 
14e54     F0 DC DF 09 
14e58     F1 07 2F 18 | 	byte	$07, $10, $e4, $ff, $32, $f4, $0b, $12, $f0, $dc, $df, $09, $f1, $07, $2f, $18
14e5c     0B 1F 27 14 
14e60     06 E8 0B 00 
14e64     D7 0B F8 F7 
14e68     F0 D7 0C EB | 	byte	$0b, $1f, $27, $14, $06, $e8, $0b, $00, $d7, $0b, $f8, $f7, $f0, $d7, $0c, $eb
14e6c     EC F3 04 E4 
14e70     F7 F6 07 04 
14e74     E3 FF 18 E0 
14e78     FF D8 ED F4 | 	byte	$ec, $f3, $04, $e4, $f7, $f6, $07, $04, $e3, $ff, $18, $e0, $ff, $d8, $ed, $f4
14e7c     EF 07 1B 12 
14e80     02 17 10 E0 
14e84     0F 20 E2 05 
14e88     F4 F5 2B E0 | 	byte	$ef, $07, $1b, $12, $02, $17, $10, $e0, $0f, $20, $e2, $05, $f4, $f5, $2b, $e0
14e8c     E7 49 08 FF 
14e90     38 10 F7 28 
14e94     00 DF 14 E0 
14e98     0F 1C 16 26 | 	byte	$e7, $49, $08, $ff, $38, $10, $f7, $28, $00, $df, $14, $e0, $0f, $1c, $16, $26
14e9c     24 05 14 F0 
14ea0     0D 0C 04 1B 
14ea4     24 27 34 20 
14ea8     CA 2F 20 EF | 	byte	$24, $05, $14, $f0, $0d, $0c, $04, $1b, $24, $27, $34, $20, $ca, $2f, $20, $ef
14eac     2B F0 CE E7 
14eb0     C8 EF 23 04 
14eb4     D5 1F 18 C0 
14eb8     BF 18 D0 F7 | 	byte	$2b, $f0, $ce, $e7, $c8, $ef, $23, $04, $d5, $1f, $18, $c0, $bf, $18, $d0, $f7
14ebc     00 F7 47 10 
14ec0     D7 0C C4 F7 
14ec4     0C 07 10 DF 
14ec8     2A 00 E9 22 | 	byte	$00, $f7, $47, $10, $d7, $0c, $c4, $f7, $0c, $07, $10, $df, $2a, $00, $e9, $22
14ecc     14 06 04 D8 
14ed0     DF FA D8 DF 
14ed4     2A 00 DF 06 
14ed8     E0 FF 00 EA | 	byte	$14, $06, $04, $d8, $df, $fa, $d8, $df, $2a, $00, $df, $06, $e0, $ff, $00, $ea
14edc     EA D9 FD 00 
14ee0     F1 D6 F7 E0 
14ee4     D3 0B 1A 1F 
14ee8     24 15 39 10 | 	byte	$ea, $d9, $fd, $00, $f1, $d6, $f7, $e0, $d3, $0b, $1a, $1f, $24, $15, $39, $10
14eec     EF 04 FD 02 
14ef0     0F 27 00 F3 
14ef4     F4 EF 1B 0A 
14ef8     03 2C 1B 10 | 	byte	$ef, $04, $fd, $02, $0f, $27, $00, $f3, $f4, $ef, $1b, $0a, $03, $2c, $1b, $10
14efc     F4 07 00 ED 
14f00     04 0B 20 14 
14f04     15 20 09 2D 
14f08     30 12 3F 00 | 	byte	$f4, $07, $00, $ed, $04, $0b, $20, $14, $15, $20, $09, $2d, $30, $12, $3f, $00
14f0c     EF 18 0A 14 
14f10     08 1F 59 34 
14f14     2E 28 24 10 
14f18     1B 00 F5 0F | 	byte	$ef, $18, $0a, $14, $08, $1f, $59, $34, $2e, $28, $24, $10, $1b, $00, $f5, $0f
14f1c     08 0D 1A 10 
14f20     07 0F 20 F0 
14f24     FB 29 30 24 
14f28     00 0F 28 0B | 	byte	$08, $0d, $1a, $10, $07, $0f, $20, $f0, $fb, $29, $30, $24, $00, $0f, $28, $0b
14f2c     10 0B 2A 08 
14f30     FF 29 13 12 
14f34     02 FB 18 00 
14f38     FF 32 09 17 | 	byte	$10, $0b, $2a, $08, $ff, $29, $13, $12, $02, $fb, $18, $00, $ff, $32, $09, $17
14f3c     20 00 EF 18 
14f40     00 0D 2F 18 
14f44     0E 10 F6 16 
14f48     F4 EB 0A F2 | 	byte	$20, $00, $ef, $18, $00, $0d, $2f, $18, $0e, $10, $f6, $16, $f4, $eb, $0a, $f2
14f4c     FD 09 15 00 
14f50     E4 FF 18 F8 
14f54     F7 11 0E FD 
14f58     27 1A F5 0F | 	byte	$fd, $09, $15, $00, $e4, $ff, $18, $f8, $f7, $11, $0e, $fd, $27, $1a, $f5, $0f
14f5c     24 F0 FF 22 
14f60     00 FF 12 E0 
14f64     EB 01 03 0F 
14f68     09 37 10 ED | 	byte	$24, $f0, $ff, $22, $00, $ff, $12, $e0, $eb, $01, $03, $0f, $09, $37, $10, $ed
14f6c     05 F0 FF E8 
14f70     CF F2 CD 17 
14f74     25 21 00 DB 
14f78     2D D0 DF 28 | 	byte	$05, $f0, $ff, $e8, $cf, $f2, $cd, $17, $25, $21, $00, $db, $2d, $d0, $df, $28
14f7c     FF 08 EC FF 
14f80     28 00 F7 08 
14f84     14 22 04 EB 
14f88     14 0C 00 FD | 	byte	$ff, $08, $ec, $ff, $28, $00, $f7, $08, $14, $22, $04, $eb, $14, $0c, $00, $fd
14f8c     E2 EF FF 10 
14f90     0C 0E E0 DF 
14f94     00 E3 FD F0 
14f98     EB 20 D8 DF | 	byte	$e2, $ef, $ff, $10, $0c, $0e, $e0, $df, $00, $e3, $fd, $f0, $eb, $20, $d8, $df
14f9c     34 08 EC DF 
14fa0     FB 2B F0 EF 
14fa4     D8 E7 01 FF 
14fa8     15 1B 20 02 | 	byte	$34, $08, $ec, $df, $fb, $2b, $f0, $ef, $d8, $e7, $01, $ff, $15, $1b, $20, $02
14fac     DD EF FF 1F 
14fb0     1A F8 13 00 
14fb4     F3 EC F5 0F 
14fb8     20 F0 FF 10 | 	byte	$dd, $ef, $ff, $1f, $1a, $f8, $13, $00, $f3, $ec, $f5, $0f, $20, $f0, $ff, $10
14fbc     F0 DF 0D 07 
14fc0     11 F8 F7 2B 
14fc4     08 EF 52 00 
14fc8     CF 34 F7 1F | 	byte	$f0, $df, $0d, $07, $11, $f8, $f7, $2b, $08, $ef, $52, $00, $cf, $34, $f7, $1f
14fcc     34 02 2A E8 
14fd0     0B 19 2B 38 
14fd4     19 1F 20 FD 
14fd8     00 EF 23 10 | 	byte	$34, $02, $2a, $e8, $0b, $19, $2b, $38, $19, $1f, $20, $fd, $00, $ef, $23, $10
14fdc     17 20 EB 3F 
14fe0     36 10 F7 2B 
14fe4     1C 01 07 2F 
14fe8     18 0B 2B 1C | 	byte	$17, $20, $eb, $3f, $36, $10, $f7, $2b, $1c, $01, $07, $2f, $18, $0b, $2b, $1c
14fec     27 36 10 F7 
14ff0     19 10 19 23 
14ff4     3A 00 FF 1F 
14ff8     10 0D 20 0D | 	byte	$27, $36, $10, $f7, $19, $10, $19, $23, $3a, $00, $ff, $1f, $10, $0d, $20, $0d
14ffc     1A 18 E8 1D 
15000     2A 20 FB 17 
15004     30 00 17 33 
15008     2A F0 EF 13 | 	byte	$1a, $18, $e8, $1d, $2a, $20, $fb, $17, $30, $00, $17, $33, $2a, $f0, $ef, $13
1500c     02 03 2B 20 
15010     F5 0B 27 24 
15014     08 00 03 F4 
15018     FA 1F 3C 08 | 	byte	$02, $03, $2b, $20, $f5, $0b, $27, $24, $08, $00, $03, $f4, $fa, $1f, $3c, $08
1501c     15 20 00 F5 
15020     0B 18 F0 17 
15024     10 FD 0D 08 
15028     E3 0D 0A FC | 	byte	$15, $20, $00, $f5, $0b, $18, $f0, $17, $10, $fd, $0d, $08, $e3, $0d, $0a, $fc
1502c     13 E8 0F 10 
15030     12 1B 10 EF 
15034     25 10 1D 08 
15038     F6 F0 F3 0F | 	byte	$13, $e8, $0f, $10, $12, $1b, $10, $ef, $25, $10, $1d, $08, $f6, $f0, $f3, $0f
1503c     F8 E1 FF 2F 
15040     38 E0 F7 39 
15044     00 DF 16 00 
15048     CF 0F 12 14 | 	byte	$f8, $e1, $ff, $2f, $38, $e0, $f7, $39, $00, $df, $16, $00, $cf, $0f, $12, $14
1504c     17 04 23 08 
15050     C4 FF 0C E8 
15054     FF 08 FF 29 
15058     00 F7 24 08 | 	byte	$17, $04, $23, $08, $c4, $ff, $0c, $e8, $ff, $08, $ff, $29, $00, $f7, $24, $08
1505c     F7 2E 04 01 
15060     04 F7 1F 18 
15064     17 14 EC F4 
15068     EC F0 E0 FF | 	byte	$f7, $2e, $04, $01, $04, $f7, $1f, $18, $17, $14, $ec, $f4, $ec, $f0, $e0, $ff
1506c     10 E0 E7 F0 
15070     E5 1D 00 E7 
15074     27 F0 FF 20 
15078     C5 FF E8 AF | 	byte	$10, $e0, $e7, $f0, $e5, $1d, $00, $e7, $27, $f0, $ff, $20, $c5, $ff, $e8, $af
1507c     1F 12 F0 E4 
15080     DB 06 F2 E4 
15084     F5 F4 07 FA 
15088     00 E0 F7 0A | 	byte	$1f, $12, $f0, $e4, $db, $06, $f2, $e4, $f5, $f4, $07, $fa, $00, $e0, $f7, $0a
1508c     EC FF F0 EF 
15090     F4 F3 02 E4 
15094     EF 28 05 F9 
15098     0C E6 EF 12 | 	byte	$ec, $ff, $f0, $ef, $f4, $f3, $02, $e4, $ef, $28, $05, $f9, $0c, $e6, $ef, $12
1509c     E8 0F 14 F6 
150a0     05 00 F7 31 
150a4     12 FD 19 18 
150a8     14 17 18 E0 | 	byte	$e8, $0f, $14, $f6, $05, $00, $f7, $31, $12, $fd, $19, $18, $14, $17, $18, $e0
150ac     17 20 16 10 
150b0     F7 1F 28 F4 
150b4     0F 00 FF 30 
150b8     00 0D 37 20 | 	byte	$17, $20, $16, $10, $f7, $1f, $28, $f4, $0f, $00, $ff, $30, $00, $0d, $37, $20
150bc     E1 1F 28 E8 
150c0     FF 20 0E 15 
150c4     10 22 00 0F 
150c8     30 00 F3 FA | 	byte	$e1, $1f, $28, $e8, $ff, $20, $0e, $15, $10, $22, $00, $0f, $30, $00, $f3, $fa
150cc     FF 28 2D 24 
150d0     0F 3B 18 0B 
150d4     2A 00 17 18 
150d8     0B 2D 08 0F | 	byte	$ff, $28, $2d, $24, $0f, $3b, $18, $0b, $2a, $00, $17, $18, $0b, $2d, $08, $0f
150dc     24 08 0B 17 
150e0     30 2E 0A 1F 
150e4     22 23 08 FB 
150e8     1F 35 14 F3 | 	byte	$24, $08, $0b, $17, $30, $2e, $0a, $1f, $22, $23, $08, $fb, $1f, $35, $14, $f3
150ec     1E 26 16 ED 
150f0     1F 20 E4 DF 
150f4     24 0D 1F 32 
150f8     01 2F 44 14 | 	byte	$1e, $26, $16, $ed, $1f, $20, $e4, $df, $24, $0d, $1f, $32, $01, $2f, $44, $14
150fc     1B 18 F8 FB 
15100     0E 19 0D 27 
15104     30 3D 2C 1A 
15108     1F 20 F1 07 | 	byte	$1b, $18, $f8, $fb, $0e, $19, $0d, $27, $30, $3d, $2c, $1a, $1f, $20, $f1, $07
1510c     10 0D 1F 0C 
15110     2F 30 17 11 
15114     16 17 20 08 
15118     07 1F 2C 14 | 	byte	$10, $0d, $1f, $0c, $2f, $30, $17, $11, $16, $17, $20, $08, $07, $1f, $2c, $14
1511c     27 20 F8 23 
15120     2F 22 27 30 
15124     09 2E 00 EF 
15128     6E 20 FF 20 | 	byte	$27, $20, $f8, $23, $2f, $22, $27, $30, $09, $2e, $00, $ef, $6e, $20, $ff, $20
1512c     E5 0B F9 17 
15130     10 FF 40 F0 
15134     EF 12 07 16 
15138     00 E9 0F 24 | 	byte	$e5, $0b, $f9, $17, $10, $ff, $40, $f0, $ef, $12, $07, $16, $00, $e9, $0f, $24
1513c     E0 FB 18 F5 
15140     00 EB 0B 0F 
15144     24 09 E8 FF 
15148     1E 1C 11 02 | 	byte	$e0, $fb, $18, $f5, $00, $eb, $0b, $0f, $24, $09, $e8, $ff, $1e, $1c, $11, $02
1514c     25 08 0D F4 
15150     F7 0F 24 02 
15154     1F 00 DF 08 
15158     EE E5 FF 0C | 	byte	$25, $08, $0d, $f4, $f7, $0f, $24, $02, $1f, $00, $df, $08, $ee, $e5, $ff, $0c
1515c     F0 E7 F7 F8 
15160     EF 1C 00 DF 
15164     17 00 E0 CF 
15168     F3 17 20 D6 | 	byte	$f0, $e7, $f7, $f8, $ef, $1c, $00, $df, $17, $00, $e0, $cf, $f3, $17, $20, $d6
1516c     1F 10 E5 1F 
15170     F0 F7 10 CF 
15174     17 10 E0 DF 
15178     F9 F2 ED F7 | 	byte	$1f, $10, $e5, $1f, $f0, $f7, $10, $cf, $17, $10, $e0, $df, $f9, $f2, $ed, $f7
1517c     07 00 EB 00 
15180     EC DF 1D E0 
15184     DF 0A E4 F7 
15188     24 00 00 FF | 	byte	$07, $00, $eb, $00, $ec, $df, $1d, $e0, $df, $0a, $e4, $f7, $24, $00, $00, $ff
1518c     14 CC FF 08 
15190     07 14 E2 EF 
15194     2B 08 EF E8 
15198     F6 14 FA DD | 	byte	$14, $cc, $ff, $08, $07, $14, $e2, $ef, $2b, $08, $ef, $e8, $f6, $14, $fa, $dd
1519c     07 EC FF 14 
151a0     E0 0F 08 C1 
151a4     FF 02 EA EF 
151a8     0A E0 D5 10 | 	byte	$07, $ec, $ff, $14, $e0, $0f, $08, $c1, $ff, $02, $ea, $ef, $0a, $e0, $d5, $10
151ac     D8 FF 04 F7 
151b0     2E 08 FF 10 
151b4     FF 1A F0 DF 
151b8     04 FB 19 07 | 	byte	$d8, $ff, $04, $f7, $2e, $08, $ff, $10, $ff, $1a, $f0, $df, $04, $fb, $19, $07
151bc     13 00 0F 48 
151c0     E8 EF 30 E8 
151c4     FF 00 FF 28 
151c8     00 E4 EF 34 | 	byte	$13, $00, $0f, $48, $e8, $ef, $30, $e8, $ff, $00, $ff, $28, $00, $e4, $ef, $34
151cc     10 F7 11 0A 
151d0     1B 24 03 1B 
151d4     20 0D 13 1A 
151d8     10 FA 27 20 | 	byte	$10, $f7, $11, $0a, $1b, $24, $03, $1b, $20, $0d, $13, $1a, $10, $fa, $27, $20
151dc     F4 FB 1B 18 
151e0     0F 22 0D 3B 
151e4     10 EF 3B 04 
151e8     F7 08 0D 37 | 	byte	$f4, $fb, $1b, $18, $0f, $22, $0d, $3b, $10, $ef, $3b, $04, $f7, $08, $0d, $37
151ec     14 05 16 1D 
151f0     1C 00 FF 24 
151f4     17 2C 0D 1F 
151f8     28 F1 1F 42 | 	byte	$14, $05, $16, $1d, $1c, $00, $ff, $24, $17, $2c, $0d, $1f, $28, $f1, $1f, $42
151fc     18 05 1F 10 
15200     F5 0F 34 24 
15204     0C 0F 20 2E 
15208     10 0F 3A 20 | 	byte	$18, $05, $1f, $10, $f5, $0f, $34, $24, $0c, $0f, $20, $2e, $10, $0f, $3a, $20
1520c     1F 38 10 2F 
15210     30 0E 0F 3B 
15214     20 33 08 F7 
15218     1A 00 FF 18 | 	byte	$1f, $38, $10, $2f, $30, $0e, $0f, $3b, $20, $33, $08, $f7, $1a, $00, $ff, $18
1521c     00 17 3A 00 
15220     EF 3F 18 F0 
15224     0F 18 06 FA 
15228     1F 12 1F 10 | 	byte	$00, $17, $3a, $00, $ef, $3f, $18, $f0, $0f, $18, $06, $fa, $1f, $12, $1f, $10
1522c     F7 25 00 DF 
15230     2C 01 0B 20 
15234     EF 31 00 15 
15238     00 0F 30 E0 | 	byte	$f7, $25, $00, $df, $2c, $01, $0b, $20, $ef, $31, $00, $15, $00, $0f, $30, $e0
1523c     FB 14 FF 1C 
15240     D8 FF 28 F7 
15244     1B 00 FB 21 
15248     F4 FF 10 0B | 	byte	$fb, $14, $ff, $1c, $d8, $ff, $28, $f7, $1b, $00, $fb, $21, $f4, $ff, $10, $0b
1524c     14 10 FE 25 
15250     14 22 E9 E7 
15254     F9 10 F1 0B 
15258     F0 0B 0A F1 | 	byte	$14, $10, $fe, $25, $14, $22, $e9, $e7, $f9, $10, $f1, $0b, $f0, $0b, $0a, $f1
1525c     EC D3 1F 10 
15260     E2 F3 EB 12 
15264     F0 F3 1B 08 
15268     F0 E7 E8 DF | 	byte	$ec, $d3, $1f, $10, $e2, $f3, $eb, $12, $f0, $f3, $1b, $08, $f0, $e7, $e8, $df
1526c     FF 10 EB 07 
15270     00 EB 1D 10 
15274     F0 FD 07 10 
15278     F0 EF 05 FF | 	byte	$ff, $10, $eb, $07, $00, $eb, $1d, $10, $f0, $fd, $07, $10, $f0, $ef, $05, $ff
1527c     24 00 FB 08 
15280     0F 00 F8 E7 
15284     12 08 02 0B 
15288     0C 00 E7 13 | 	byte	$24, $00, $fb, $08, $0f, $00, $f8, $e7, $12, $08, $02, $0b, $0c, $00, $e7, $13
1528c     E4 F7 F4 FF 
15290     FA 05 09 08 
15294     E8 FF 12 06 
15298     08 0F 08 DB | 	byte	$e4, $f7, $f4, $ff, $fa, $05, $09, $08, $e8, $ff, $12, $06, $08, $0f, $08, $db
1529c     07 23 10 F0 
152a0     FF 1E 04 FB 
152a4     0E 04 F6 EE 
152a8     FF 1A 00 FB | 	byte	$07, $23, $10, $f0, $ff, $1e, $04, $fb, $0e, $04, $f6, $ee, $ff, $1a, $00, $fb
152ac     0C 04 13 10 
152b0     FF 10 F4 07 
152b4     1E F0 EF 1F 
152b8     18 05 00 01 | 	byte	$0c, $04, $13, $10, $ff, $10, $f4, $07, $1e, $f0, $ef, $1f, $18, $05, $00, $01
152bc     1F 20 00 F7 
152c0     10 FA 17 18 
152c4     01 07 15 F8 
152c8     F4 F7 07 18 | 	byte	$1f, $20, $00, $f7, $10, $fa, $17, $18, $01, $07, $15, $f8, $f4, $f7, $07, $18
152cc     E4 17 20 06 
152d0     ED 1B 08 EA 
152d4     0B 1D 08 F0 
152d8     E3 1B 00 17 | 	byte	$e4, $17, $20, $06, $ed, $1b, $08, $ea, $0b, $1d, $08, $f0, $e3, $1b, $00, $17
152dc     08 FF 20 E6 
152e0     17 00 DF 32 
152e4     04 17 02 09 
152e8     05 F9 1E 12 | 	byte	$08, $ff, $20, $e6, $17, $00, $df, $32, $04, $17, $02, $09, $05, $f9, $1e, $12
152ec     F8 F3 F3 1F 
152f0     22 10 E6 1B 
152f4     20 00 EB 0B 
152f8     24 E0 17 10 | 	byte	$f8, $f3, $f3, $1f, $22, $10, $e6, $1b, $20, $00, $eb, $0b, $24, $e0, $17, $10
152fc     F7 07 02 FF 
15300     1F 08 E9 1F 
15304     10 EA 0F 10 
15308     0F 1A 13 2A | 	byte	$f7, $07, $02, $ff, $1f, $08, $e9, $1f, $10, $ea, $0f, $10, $0f, $1a, $13, $2a
1530c     00 FF 1C F0 
15310     FF 20 FF 18 
15314     05 0B 14 E8 
15318     0D 04 EE FB | 	byte	$00, $ff, $1c, $f0, $ff, $20, $ff, $18, $05, $0b, $14, $e8, $0d, $04, $ee, $fb
1531c     F3 1B 0C 08 
15320     05 09 00 F1 
15324     0F 18 10 1F 
15328     18 F0 FF 1C | 	byte	$f3, $1b, $0c, $08, $05, $09, $00, $f1, $0f, $18, $10, $1f, $18, $f0, $ff, $1c
1532c     01 1F 14 EB 
15330     FF 04 F3 08 
15334     EF 34 04 1F 
15338     28 00 F6 05 | 	byte	$01, $1f, $14, $eb, $ff, $04, $f3, $08, $ef, $34, $04, $1f, $28, $00, $f6, $05
1533c     15 10 F7 08 
15340     F9 10 F4 04 
15344     0B 14 0D 0A 
15348     F6 F3 F8 F5 | 	byte	$15, $10, $f7, $08, $f9, $10, $f4, $04, $0b, $14, $0d, $0a, $f6, $f3, $f8, $f5
1534c     E6 FB 00 12 
15350     16 F8 17 20 
15354     E4 17 01 2F 
15358     08 F3 2F 10 | 	byte	$e6, $fb, $00, $12, $16, $f8, $17, $20, $e4, $17, $01, $2f, $08, $f3, $2f, $10
1535c     E9 13 20 14 
15360     02 0E F8 1F 
15364     00 FB 19 1D 
15368     00 DA EF FD | 	byte	$e9, $13, $20, $14, $02, $0e, $f8, $1f, $00, $fb, $19, $1d, $00, $da, $ef, $fd
1536c     3F 10 F9 0F 
15370     1F 19 F4 F7 
15374     30 E9 0F 30 
15378     0B 34 00 07 | 	byte	$3f, $10, $f9, $0f, $1f, $19, $f4, $f7, $30, $e9, $0f, $30, $0b, $34, $00, $07
1537c     15 1F 14 EF 
15380     1F 20 07 3F 
15384     20 F1 17 14 
15388     09 04 FF 13 | 	byte	$15, $1f, $14, $ef, $1f, $20, $07, $3f, $20, $f1, $17, $14, $09, $04, $ff, $13
1538c     F9 FF 12 F9 
15390     0F 1C 04 1B 
15394     27 10 FF 22 
15398     00 E7 27 08 | 	byte	$f9, $ff, $12, $f9, $0f, $1c, $04, $1b, $27, $10, $ff, $22, $00, $e7, $27, $08
1539c     07 20 E0 17 
153a0     34 00 EF 30 
153a4     F0 EF 2D 04 
153a8     07 1E 0C 0F | 	byte	$07, $20, $e0, $17, $34, $00, $ef, $30, $f0, $ef, $2d, $04, $07, $1e, $0c, $0f
153ac     26 06 19 14 
153b0     1B 18 FD 17 
153b4     1C 00 0F 18 
153b8     0E 08 05 15 | 	byte	$26, $06, $19, $14, $1b, $18, $fd, $17, $1c, $00, $0f, $18, $0e, $08, $05, $15
153bc     18 08 0B 22 
153c0     ED 0F 14 FD 
153c4     0F 19 0E 0A 
153c8     FF 2C 0C 15 | 	byte	$18, $08, $0b, $22, $ed, $0f, $14, $fd, $0f, $19, $0e, $0a, $ff, $2c, $0c, $15
153cc     F8 EF 23 08 
153d0     E2 0F 30 0C 
153d4     EB 0F 1C FB 
153d8     13 1C 09 FD | 	byte	$f8, $ef, $23, $08, $e2, $0f, $30, $0c, $eb, $0f, $1c, $fb, $13, $1c, $09, $fd
153dc     13 14 11 08 
153e0     EF 1F 10 03 
153e4     FF 14 00 07 
153e8     2C 00 DF 1F | 	byte	$13, $14, $11, $08, $ef, $1f, $10, $03, $ff, $14, $00, $07, $2c, $00, $df, $1f
153ec     20 EB 0D 00 
153f0     F7 19 00 FF 
153f4     14 F4 09 00 
153f8     F7 0C E0 DF | 	byte	$20, $eb, $0d, $00, $f7, $19, $00, $ff, $14, $f4, $09, $00, $f7, $0c, $e0, $df
153fc     0A F8 FD 1A 
15400     10 EF 0A F0 
15404     F3 0E 00 EF 
15408     10 ED 1A 00 | 	byte	$0a, $f8, $fd, $1a, $10, $ef, $0a, $f0, $f3, $0e, $00, $ef, $10, $ed, $1a, $00
1540c     EB F7 FD FC 
15410     DB EF 1D F0 
15414     EF F4 FF 10 
15418     E6 EB FF 00 | 	byte	$eb, $f7, $fd, $fc, $db, $ef, $1d, $f0, $ef, $f4, $ff, $10, $e6, $eb, $ff, $00
1541c     F3 0F 06 F8 
15420     FF 00 DF 16 
15424     E0 EF 20 E7 
15428     0B 00 EF 0B | 	byte	$f3, $0f, $06, $f8, $ff, $00, $df, $16, $e0, $ef, $20, $e7, $0b, $00, $ef, $0b
1542c     04 0D 0A DC 
15430     FF 0C 00 13 
15434     08 FF 26 F0 
15438     FB 2A 08 E4 | 	byte	$04, $0d, $0a, $dc, $ff, $0c, $00, $13, $08, $ff, $26, $f0, $fb, $2a, $08, $e4
1543c     FF 1B 04 FB 
15440     20 F2 FF 20 
15444     04 0D F0 07 
15448     06 FB 1B 14 | 	byte	$ff, $1b, $04, $fb, $20, $f2, $ff, $20, $04, $0d, $f0, $07, $06, $fb, $1b, $14
1544c     F7 17 04 07 
15450     17 09 F7 06 
15454     04 15 00 F7 
15458     18 F4 1F 18 | 	byte	$f7, $17, $04, $07, $17, $09, $f7, $06, $04, $15, $00, $f7, $18, $f4, $1f, $18
1545c     1B 31 10 FD 
15460     07 1F 0A 03 
15464     27 00 EB 09 
15468     1B 1B 04 07 | 	byte	$1b, $31, $10, $fd, $07, $1f, $0a, $03, $27, $00, $eb, $09, $1b, $1b, $04, $07
1546c     1F 00 E7 0B 
15470     22 09 07 1C 
15474     F0 EF 14 07 
15478     00 FF 12 17 | 	byte	$1f, $00, $e7, $0b, $22, $09, $07, $1c, $f0, $ef, $14, $07, $00, $ff, $12, $17
1547c     14 0C 12 10 
15480     07 1C 14 0D 
15484     1E 18 13 05 
15488     1E 10 23 2C | 	byte	$14, $0c, $12, $10, $07, $1c, $14, $0d, $1e, $18, $13, $05, $1e, $10, $23, $2c
1548c     35 08 F7 37 
15490     18 0B 23 04 
15494     1B 20 0B 2D 
15498     28 14 15 1C | 	byte	$35, $08, $f7, $37, $18, $0b, $23, $04, $1b, $20, $0b, $2d, $28, $14, $15, $1c
1549c     04 F9 2B 10 
154a0     15 35 15 36 
154a4     08 17 1A F9 
154a8     0D 14 11 09 | 	byte	$04, $f9, $2b, $10, $15, $35, $15, $36, $08, $17, $1a, $f9, $0d, $14, $11, $09
154ac     1D 1E 1A 17 
154b0     0A 27 20 F8 
154b4     FF 14 13 20 
154b8     07 27 10 17 | 	byte	$1d, $1e, $1a, $17, $0a, $27, $20, $f8, $ff, $14, $13, $20, $07, $27, $10, $17
154bc     11 F7 00 07 
154c0     20 00 F3 21 
154c4     00 F7 0F 1F 
154c8     18 F6 07 05 | 	byte	$11, $f7, $00, $07, $20, $00, $f3, $21, $00, $f7, $0f, $1f, $18, $f6, $07, $05
154cc     05 18 00 0F 
154d0     10 F3 0F 00 
154d4     FF 08 ED F5 
154d8     FF 20 E0 FF | 	byte	$05, $18, $00, $0f, $10, $f3, $0f, $00, $ff, $08, $ed, $f5, $ff, $20, $e0, $ff
154dc     08 EA 07 00 
154e0     0B 0C EB FD 
154e4     0B 11 0C D4 
154e8     0F 00 F3 F7 | 	byte	$08, $ea, $07, $00, $0b, $0c, $eb, $fd, $0b, $11, $0c, $d4, $0f, $00, $f3, $f7
154ec     F4 10 E9 FF 
154f0     10 E9 13 00 
154f4     F7 00 FF 20 
154f8     E0 EF 2C 00 | 	byte	$f4, $10, $e9, $ff, $10, $e9, $13, $00, $f7, $00, $ff, $20, $e0, $ef, $2c, $00
154fc     ED FB 14 15 
15500     09 0F 09 F0 
15504     EF 02 ED FF 
15508     0A F7 0B 08 | 	byte	$ed, $fb, $14, $15, $09, $0f, $09, $f0, $ef, $02, $ed, $ff, $0a, $f7, $0b, $08
1550c     F3 27 10 FB 
15510     20 E8 0D 08 
15514     F7 0F 00 F7 
15518     0F 18 E2 EF | 	byte	$f3, $27, $10, $fb, $20, $e8, $0d, $08, $f7, $0f, $00, $f7, $0f, $18, $e2, $ef
1551c     07 FF 0C F0 
15520     FF F0 EB 03 
15524     02 07 02 FF 
15528     0C F3 0B 00 | 	byte	$07, $ff, $0c, $f0, $ff, $f0, $eb, $03, $02, $07, $02, $ff, $0c, $f3, $0b, $00
1552c     FF 0C E7 1B 
15530     08 F7 0F FC 
15534     F4 E6 EF 17 
15538     09 00 03 0F | 	byte	$ff, $0c, $e7, $1b, $08, $f7, $0f, $fc, $f4, $e6, $ef, $17, $09, $00, $03, $0f
1553c     18 EC FF 12 
15540     F8 F7 04 02 
15544     EF 0D 11 20 
15548     F0 EF 15 F4 | 	byte	$18, $ec, $ff, $12, $f8, $f7, $04, $02, $ef, $0d, $11, $20, $f0, $ef, $15, $f4
1554c     F5 0F 00 0F 
15550     14 F5 0F 10 
15554     FB 14 04 FB 
15558     13 10 0B F4 | 	byte	$f5, $0f, $00, $0f, $14, $f5, $0f, $10, $fb, $14, $04, $fb, $13, $10, $0b, $f4
1555c     FD 17 02 FB 
15560     14 04 17 10 
15564     F5 0F 10 16 
15568     14 09 0E 06 | 	byte	$fd, $17, $02, $fb, $14, $04, $17, $10, $f5, $0f, $10, $16, $14, $09, $0e, $06
1556c     21 00 FF 2B 
15570     0A 07 20 05 
15574     19 04 13 26 
15578     0D 00 0B 1D | 	byte	$21, $00, $ff, $2b, $0a, $07, $20, $05, $19, $04, $13, $26, $0d, $00, $0b, $1d
1557c     10 FB 1E 14 
15580     0B 0F 1A 16 
15584     0E 0B 13 14 
15588     0B 20 00 0B | 	byte	$10, $fb, $1e, $14, $0b, $0f, $1a, $16, $0e, $0b, $13, $14, $0b, $20, $00, $0b
1558c     18 FB 1F 01 
15590     07 13 0B 0F 
15594     00 07 1D 0B 
15598     0F 1A 29 20 | 	byte	$18, $fb, $1f, $01, $07, $13, $0b, $0f, $00, $07, $1d, $0b, $0f, $1a, $29, $20
1559c     FA 0F 20 10 
155a0     0F 13 10 08 
155a4     FC 17 1D 10 
155a8     07 14 14 F8 | 	byte	$fa, $0f, $20, $10, $0f, $13, $10, $08, $fc, $17, $1d, $10, $07, $14, $14, $f8
155ac     0B 1B 18 00 
155b0     07 1C 11 1E 
155b4     17 13 13 0C 
155b8     08 FA 07 0B | 	byte	$0b, $1b, $18, $00, $07, $1c, $11, $1e, $17, $13, $13, $0c, $08, $fa, $07, $0b
155bc     05 1D 10 0F 
155c0     11 00 FF 03 
155c4     48 CF 30 0D 
155c8     04 1C 05 0A | 	byte	$05, $1d, $10, $0f, $11, $00, $ff, $03, $48, $cf, $30, $0d, $04, $1c, $05, $0a
155cc     04 0F 18 05 
155d0     08 07 19 14 
155d4     12 05 0B 04 
155d8     02 0F 1A FA | 	byte	$04, $0f, $18, $05, $08, $07, $19, $14, $12, $05, $0b, $04, $02, $0f, $1a, $fa
155dc     17 24 F8 17 
155e0     10 F3 1F 00 
155e4     EF 18 FD 10 
155e8     0C FD 05 07 | 	byte	$17, $24, $f8, $17, $10, $f3, $1f, $00, $ef, $18, $fd, $10, $0c, $fd, $05, $07
155ec     08 07 05 F9 
155f0     0A 10 00 ED 
155f4     F7 23 00 EB 
155f8     20 EF 0F 08 | 	byte	$08, $07, $05, $f9, $0a, $10, $00, $ed, $f7, $23, $00, $eb, $20, $ef, $0f, $08
155fc     F1 0F 04 EF 
15600     F9 F4 FC F7 
15604     07 F0 FB 06 
15608     FB 00 EB 17 | 	byte	$f1, $0f, $04, $ef, $f9, $f4, $fc, $f7, $07, $f0, $fb, $06, $fb, $00, $eb, $17
1560c     10 DA 0F 00 
15610     DF 09 00 F7 
15614     09 08 F4 01 
15618     FD FF 14 F0 | 	byte	$10, $da, $0f, $00, $df, $09, $00, $f7, $09, $08, $f4, $01, $fd, $ff, $14, $f0
1561c     EB 09 0D 02 
15620     00 06 15 02 
15624     02 F7 12 F4 
15628     F7 17 F4 0B | 	byte	$eb, $09, $0d, $02, $00, $06, $15, $02, $02, $f7, $12, $f4, $f7, $17, $f4, $0b
1562c     12 EF 19 08 
15630     F7 03 09 0A 
15634     F5 0F 14 00 
15638     07 14 08 FD | 	byte	$12, $ef, $19, $08, $f7, $03, $09, $0a, $f5, $0f, $14, $00, $07, $14, $08, $fd
1563c     0F 04 ED 1E 
15640     08 FD 1A 02 
15644     FF 2E 00 F3 
15648     0D 0E 13 0C | 	byte	$0f, $04, $ed, $1e, $08, $fd, $1a, $02, $ff, $2e, $00, $f3, $0d, $0e, $13, $0c
1564c     F0 0F 28 00 
15650     07 14 FA 0B 
15654     0C 01 0B 17 
15658     08 FE 11 F9 | 	byte	$f0, $0f, $28, $00, $07, $14, $fa, $0b, $0c, $01, $0b, $17, $08, $fe, $11, $f9
1565c     1D 04 F3 17 
15660     00 02 F0 05 
15664     23 08 F7 00 
15668     07 10 ED 0B | 	byte	$1d, $04, $f3, $17, $00, $02, $f0, $05, $23, $08, $f7, $00, $07, $10, $ed, $0b
1566c     18 F0 F5 FD 
15670     0C 14 FA 15 
15674     08 F7 14 00 
15678     09 01 0C 00 | 	byte	$18, $f0, $f5, $fd, $0c, $14, $fa, $15, $08, $f7, $14, $00, $09, $01, $0c, $00
1567c     07 1A 00 FF 
15680     1A 0B 11 0F 
15684     0E 09 07 04 
15688     03 1F 0A FD | 	byte	$07, $1a, $00, $ff, $1a, $0b, $11, $0f, $0e, $09, $07, $04, $03, $1f, $0a, $fd
1568c     20 15 10 00 
15690     07 18 FB 1C 
15694     11 18 04 F7 
15698     12 0D 18 14 | 	byte	$20, $15, $10, $00, $07, $18, $fb, $1c, $11, $18, $04, $f7, $12, $0d, $18, $14
1569c     17 14 06 1F 
156a0     0D 1B 18 FB 
156a4     19 04 07 18 
156a8     05 19 10 15 | 	byte	$17, $14, $06, $1f, $0d, $1b, $18, $fb, $19, $04, $07, $18, $05, $19, $10, $15
156ac     18 0D 11 08 
156b0     0B 11 08 17 
156b4     08 FF 2A 08 
156b8     07 0C FC 0D | 	byte	$18, $0d, $11, $08, $0b, $11, $08, $17, $08, $ff, $2a, $08, $07, $0c, $fc, $0d
156bc     05 09 12 FD 
156c0     0B 12 1D 0C 
156c4     04 09 08 06 
156c8     01 FE 0E 04 | 	byte	$05, $09, $12, $fd, $0b, $12, $1d, $0c, $04, $09, $08, $06, $01, $fe, $0e, $04
156cc     FF 0E 10 01 
156d0     05 0D 03 13 
156d4     14 02 0D 02 
156d8     0F 18 00 11 | 	byte	$ff, $0e, $10, $01, $05, $0d, $03, $13, $14, $02, $0d, $02, $0f, $18, $00, $11
156dc     08 08 06 07 
156e0     16 0C 08 0C 
156e4     FD 07 0D 0D 
156e8     16 00 E9 17 | 	byte	$08, $08, $06, $07, $16, $0c, $08, $0c, $fd, $07, $0d, $0d, $16, $00, $e9, $17
156ec     08 F2 0F 04 
156f0     1B 10 FB 0E 
156f4     09 0B 04 0B 
156f8     10 03 0F 00 | 	byte	$08, $f2, $0f, $04, $1b, $10, $fb, $0e, $09, $0b, $04, $0b, $10, $03, $0f, $00
156fc     0E 10 F7 27 
15700     0C F7 1A 04 
15704     FF 11 0A 02 
15708     0D 10 09 FA | 	byte	$0e, $10, $f7, $27, $0c, $f7, $1a, $04, $ff, $11, $0a, $02, $0d, $10, $09, $fa
1570c     0B 00 0F 1C 
15710     02 07 12 00 
15714     0E 00 FF 09 
15718     07 24 F0 FF | 	byte	$0b, $00, $0f, $1c, $02, $07, $12, $00, $0e, $00, $ff, $09, $07, $24, $f0, $ff
1571c     1A 00 07 16 
15720     02 0B 00 13 
15724     10 0C 11 08 
15728     FD 0F 02 FD | 	byte	$1a, $00, $07, $16, $02, $0b, $00, $13, $10, $0c, $11, $08, $fd, $0f, $02, $fd
1572c     1A 08 EF 07 
15730     0C 07 00 0D 
15734     10 F8 FF 0E 
15738     01 FE 0F 06 | 	byte	$1a, $08, $ef, $07, $0c, $07, $00, $0d, $10, $f8, $ff, $0e, $01, $fe, $0f, $06
1573c     00 FD 26 0A 
15740     F8 03 11 06 
15744     F9 07 10 0F 
15748     0C FA 0F 14 | 	byte	$00, $fd, $26, $0a, $f8, $03, $11, $06, $f9, $07, $10, $0f, $0c, $fa, $0f, $14
1574c     00 0F 09 19 
15750     00 0D 18 0D 
15754     09 0D 16 00 
15758     F9 19 18 08 | 	byte	$00, $0f, $09, $19, $00, $0d, $18, $0d, $09, $0d, $16, $00, $f9, $19, $18, $08
1575c     F0 07 20 F4 
15760     F7 1C 0B 0F 
15764     18 00 0F 18 
15768     E8 FF 18 F4 | 	byte	$f0, $07, $20, $f4, $f7, $1c, $0b, $0f, $18, $00, $0f, $18, $e8, $ff, $18, $f4
1576c     0F 18 00 FA 
15770     07 1A F4 0F 
15774     22 02 0F 00 
15778     FF 18 05 11 | 	byte	$0f, $18, $00, $fa, $07, $1a, $f4, $0f, $22, $02, $0f, $00, $ff, $18, $05, $11
1577c     02 0D 10 FC 
15780     0F 18 F5 0F 
15784     24 01 F2 1B 
15788     08 FF 15 04 | 	byte	$02, $0d, $10, $fc, $0f, $18, $f5, $0f, $24, $01, $f2, $1b, $08, $ff, $15, $04
1578c     FB 15 00 0A 
15790     0A EF 13 20 
15794     F4 F7 17 12 
15798     04 F6 17 00 | 	byte	$fb, $15, $00, $0a, $0a, $ef, $13, $20, $f4, $f7, $17, $12, $04, $f6, $17, $00
1579c     07 0B 05 0A 
157a0     00 07 09 FD 
157a4     07 02 10 08 
157a8     F9 15 F4 07 | 	byte	$07, $0b, $05, $0a, $00, $07, $09, $fd, $07, $02, $10, $08, $f9, $15, $f4, $07
157ac     08 FB 10 F3 
157b0     0F 18 EA 1F 
157b4     10 F2 03 FD 
157b8     17 10 00 FF | 	byte	$08, $fb, $10, $f3, $0f, $18, $ea, $1f, $10, $f2, $03, $fd, $17, $10, $00, $ff
157bc     0C 13 10 02 
157c0     FF 27 00 F3 
157c4     2C 02 0B 19 
157c8     11 06 0D 10 | 	byte	$0c, $13, $10, $02, $ff, $27, $00, $f3, $2c, $02, $0b, $19, $11, $06, $0d, $10
157cc     09 0F 16 1A 
157d0     10 02 15 04 
157d4     0B 18 03 17 
157d8     11 0F 17 03 | 	byte	$09, $0f, $16, $1a, $10, $02, $15, $04, $0b, $18, $03, $17, $11, $0f, $17, $03
157dc     13 14 00 0D 
157e0     08 04 F7 17 
157e4     10 0F 20 04 
157e8     03 02 0F 10 | 	byte	$13, $14, $00, $0d, $08, $04, $f7, $17, $10, $0f, $20, $04, $03, $02, $0f, $10
157ec     FF 12 00 07 
157f0     01 13 04 F7 
157f4     24 00 F9 18 
157f8     00 F8 FF 1A | 	byte	$ff, $12, $00, $07, $01, $13, $04, $f7, $24, $00, $f9, $18, $00, $f8, $ff, $1a
157fc     00 00 00 00 
15800     00 00 00 00 | 	byte	$00[8]
15804     05 05 00 FF 
15808     00 00 00 00 
1580c     00 00 00 00 
15810     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15814     00 00 00 00 
      ...             
15838     00 00 00 00 
1583c     00 00       | 	byte	$00[42]
1583e     14 15 16 17 
15842     16 16 15 18 
15846     16 15 15 14 
1584a     16 15 14 14 | 	byte	$14, $15, $16, $17, $16, $16, $15, $18, $16, $15, $15, $14, $16, $15, $14, $14
1584e     14 13 12 14 
15852     12 15 13 11 
15856     10 13 12 11 
1585a     10 12 13 11 | 	byte	$14, $13, $12, $14, $12, $15, $13, $11, $10, $13, $12, $11, $10, $12, $13, $11
1585e     10 0C 11 11 
15862     0E 0E 0F 0E 
15866     0E 0C 0C 0C 
1586a     0D 0B 0B 0C | 	byte	$10, $0c, $11, $11, $0e, $0e, $0f, $0e, $0e, $0c, $0c, $0c, $0d, $0b, $0b, $0c
1586e     0C 06 0F 00 
15872     17 25 E8 20 
15876     DF 40 BF 20 
1587a     E8 3F 00 DF | 	byte	$0c, $06, $0f, $00, $17, $25, $e8, $20, $df, $40, $bf, $20, $e8, $3f, $00, $df
1587e     00 EF 40 C8 
15882     FF 00 FF 00 
15886     AF 60 C7 E8 
1588a     2F 00 D3 39 | 	byte	$00, $ef, $40, $c8, $ff, $00, $ff, $00, $af, $60, $c7, $e8, $2f, $00, $d3, $39
1588e     84 5F C0 2C 
15892     EB C0 30 BF 
15896     20 BB 5F 90 
1589a     3F C0 FF 00 | 	byte	$84, $5f, $c0, $2c, $eb, $c0, $30, $bf, $20, $bb, $5f, $90, $3f, $c0, $ff, $00
1589e     BF 50 81 3F 
158a2     E0 DF 10 DF 
158a6     08 FF E0 FF 
158aa     11 E0 FF D0 | 	byte	$bf, $50, $81, $3f, $e0, $df, $10, $df, $08, $ff, $e0, $ff, $11, $e0, $ff, $d0
158ae     2F A1 50 C0 
158b2     FF 00 D0 FF 
158b6     00 F7 E0 DF 
158ba     C0 DF 80 6F | 	byte	$2f, $a1, $50, $c0, $ff, $00, $d0, $ff, $00, $f7, $e0, $df, $c0, $df, $80, $6f
158be     7F 50 B0 D0 
158c2     8F DF 20 7F 
158c6     00 34 FF A1 
158ca     6F F7 00 55 | 	byte	$7f, $50, $b0, $d0, $8f, $df, $20, $7f, $00, $34, $ff, $a1, $6f, $f7, $00, $55
158ce     E0 3F B1 3F 
158d2     54 F1 10 3F 
158d6     EB 70 AF 73 
158da     E0 38 3F DB | 	byte	$e0, $3f, $b1, $3f, $54, $f1, $10, $3f, $eb, $70, $af, $73, $e0, $38, $3f, $db
158de     70 3E 98 0F 
158e2     7F 60 8F 1F 
158e6     7F 7F A0 80 
158ea     3F 7F 7E 80 | 	byte	$70, $3e, $98, $0f, $7f, $60, $8f, $1f, $7f, $7f, $a0, $80, $3f, $7f, $7e, $80
158ee     80 3F 7F 7F 
158f2     00 80 80 FF 
158f6     7F 7F 7F E0 
158fa     80 80 DF 68 | 	byte	$80, $3f, $7f, $7f, $00, $80, $80, $ff, $7f, $7f, $7f, $e0, $80, $80, $df, $68
158fe     78 C0 EF D3 
15902     F6 EF C0 FF 
15906     CF DF 10 B7 
1590a     E0 FF C0 FF | 	byte	$78, $c0, $ef, $d3, $f6, $ef, $c0, $ff, $cf, $df, $10, $b7, $e0, $ff, $c0, $ff
1590e     C0 1F A7 20 
15912     D3 DF 40 B3 
15916     FF 34 C0 FF 
1591a     F0 30 EF 10 | 	byte	$c0, $1f, $a7, $20, $d3, $df, $40, $b3, $ff, $34, $c0, $ff, $f0, $30, $ef, $10
1591e     1F 1F 00 3C 
15922     3C EF 50 20 
15926     58 DF 7F FF 
1592a     38 60 1F 37 | 	byte	$1f, $1f, $00, $3c, $3c, $ef, $50, $20, $58, $df, $7f, $ff, $38, $60, $1f, $37
1592e     50 5F F7 7F 
15932     6B 28 2F 7F 
15936     E9 7B 20 7F 
1593a     2F 40 7E FF | 	byte	$50, $5f, $f7, $7f, $6b, $28, $2f, $7f, $e9, $7b, $20, $7f, $2f, $40, $7e, $ff
1593e     7F 20 57 03 
15942     7F 3F 12 7E 
15946     1F 40 50 3F 
1594a     60 3F 38 EF | 	byte	$7f, $20, $57, $03, $7f, $3f, $12, $7e, $1f, $40, $50, $3f, $60, $3f, $38, $ef
1594e     40 3F 40 40 
15952     FF 10 00 3F 
15956     40 3F C0 3D 
1595a     57 EF 20 EF | 	byte	$40, $3f, $40, $40, $ff, $10, $00, $3f, $40, $3f, $c0, $3d, $57, $ef, $20, $ef
1595e     27 E8 1F 10 
15962     FF E8 28 1F 
15966     00 3B D0 2F 
1596a     CD E8 2B CF | 	byte	$27, $e8, $1f, $10, $ff, $e8, $28, $1f, $00, $3b, $d0, $2f, $cd, $e8, $2b, $cf
1596e     20 CC FF C0 
15972     1F CB 10 9F 
15976     E8 F7 91 04 
1597a     A8 F7 80 E2 | 	byte	$20, $cc, $ff, $c0, $1f, $cb, $10, $9f, $e8, $f7, $91, $04, $a8, $f7, $80, $e2
1597e     E0 8F C0 8C 
15982     EA 80 C0 D7 
15986     80 90 C0 8F 
1598a     80 C0 9F 80 | 	byte	$e0, $8f, $c0, $8c, $ea, $80, $c0, $d7, $80, $90, $c0, $8f, $80, $c0, $9f, $80
1598e     80 A0 87 80 
15992     83 A0 80 80 
15996     80 83 80 80 
1599a     8C 80 83 80 | 	byte	$80, $a0, $87, $80, $83, $a0, $80, $80, $80, $83, $80, $80, $8c, $80, $83, $80
1599e     A4 80 88 98 
159a2     80 A0 80 80 
159a6     BC 80 A0 81 
159aa     A8 83 98 90 | 	byte	$a4, $80, $88, $98, $80, $a0, $80, $80, $bc, $80, $a0, $81, $a8, $83, $98, $90
159ae     B7 98 87 C6 
159b2     B0 B7 9F C8 
159b6     DC BF C0 CF 
159ba     F7 B3 10 AF | 	byte	$b7, $98, $87, $c6, $b0, $b7, $9f, $c8, $dc, $bf, $c0, $cf, $f7, $b3, $10, $af
159be     F9 E8 F8 1F 
159c2     D4 34 1F E0 
159c6     1F 28 2F 48 
159ca     2B 40 1F 20 | 	byte	$f9, $e8, $f8, $1f, $d4, $34, $1f, $e0, $1f, $28, $2f, $48, $2b, $40, $1f, $20
159ce     3F 60 68 18 
159d2     5F 7D 50 68 
159d6     3F 60 7E 6F 
159da     60 77 78 7F | 	byte	$3f, $60, $68, $18, $5f, $7d, $50, $68, $3f, $60, $7e, $6f, $60, $77, $78, $7f
159de     4B 7E 7F 4F 
159e2     7F 71 7F 7E 
159e6     7F 70 7F 7F 
159ea     78 7F 7F 7F | 	byte	$4b, $7e, $7f, $4f, $7f, $71, $7f, $7e, $7f, $70, $7f, $7f, $78, $7f, $7f, $7f
159ee     7F 7F 7F 7F 
159f2     7F 7F 7F 7F 
159f6     7F          | 	byte	$7f[9]
159f7     73 7F 7F 7F 
159fb     7F 7F 7F 7F 
159ff     7F 65 7F 52 
15a03     7F 7F 7E 7F | 	byte	$73, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $65, $7f, $52, $7f, $7f, $7e, $7f
15a07     7F 7F 7F 7F 
15a0b     7F 7F 7F 7F 
15a0f     7F 7F 7F    | 	byte	$7f[11]
15a12     77 74 7F 57 
15a16     7F 7F 70 7E 
15a1a     70 57 7F 67 
15a1e     40 7F 37 70 | 	byte	$77, $74, $7f, $57, $7f, $7f, $70, $7e, $70, $57, $7f, $67, $40, $7f, $37, $70
15a22     42 5F 2F 60 
15a26     3F 2E 2F 40 
15a2a     1F 40 0F 47 
15a2e     00 FB 30 FF | 	byte	$42, $5f, $2f, $60, $3f, $2e, $2f, $40, $1f, $40, $0f, $47, $00, $fb, $30, $ff
15a32     08 00 FF C5 
15a36     24 D3 E0 F7 
15a3a     B5 F2 D0 B2 
15a3e     EA 9D E0 9F | 	byte	$08, $00, $ff, $c5, $24, $d3, $e0, $f7, $b5, $f2, $d0, $b2, $ea, $9d, $e0, $9f
15a42     D0 B3 85 E0 
15a46     85 AF 90 99 
15a4a     94 8F 88 84 
15a4e     82 82 81 87 | 	byte	$d0, $b3, $85, $e0, $85, $af, $90, $99, $94, $8f, $88, $84, $82, $82, $81, $87
15a52     80 97 80 80 
15a56     80 80 80 80 
15a5a     80 80 80 80 
15a5e     80 80 80 84 | 	byte	$80, $97, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $84
15a62     80 80 80 80 
      ...             
15a82     80 80 80 80 
15a86     80          | 	byte	$80[37]
15a87     8A 80 87 80 
15a8b     97 80 9D 80 
15a8f     B3 A8 80 A4 
15a93     BD 94 BD A7 | 	byte	$8a, $80, $87, $80, $97, $80, $9d, $80, $b3, $a8, $80, $a4, $bd, $94, $bd, $a7
15a97     C4 AB EE 9B 
15a9b     E4 BF D0 EB 
15a9f     D1 E0 E7 ED 
15aa3     00 F7 EF 00 | 	byte	$c4, $ab, $ee, $9b, $e4, $bf, $d0, $eb, $d1, $e0, $e7, $ed, $00, $f7, $ef, $00
15aa7     FF 2C F9 10 
15aab     FF 30 27 12 
15aaf     1E 35 4F 50 
15ab3     19 28 37 5F | 	byte	$ff, $2c, $f9, $10, $ff, $30, $27, $12, $1e, $35, $4f, $50, $19, $28, $37, $5f
15ab7     78 50 3F 40 
15abb     4F 30 7F 6F 
15abf     7E 51 6C 57 
15ac3     7C 7B 6C 70 | 	byte	$78, $50, $3f, $40, $4f, $30, $7f, $6f, $7e, $51, $6c, $57, $7c, $7b, $6c, $70
15ac7     7F 7B 70 7F 
15acb     7F 7D 7F 7F 
15acf     7E 7D 7F 7F 
15ad3     7F 7F 7F 7F | 	byte	$7f, $7b, $70, $7f, $7f, $7d, $7f, $7f, $7e, $7d, $7f, $7f, $7f, $7f, $7f, $7f
15ad7     7F 7F 7F 7F 
      ...             
15afb     7F 7F 7F 7F 
15aff     7F          | 	byte	$7f[41]
15b00     7D 7F 7F 7F 
15b04     7F 7F 7C 7F 
15b08     7F 7F 7E 7F 
15b0c     7F 73 7F 7F | 	byte	$7d, $7f, $7f, $7f, $7f, $7f, $7c, $7f, $7f, $7f, $7e, $7f, $7f, $73, $7f, $7f
15b10     77 6A 7E 7F 
15b14     50 7F 3B 6F 
15b18     6C 59 50 60 
15b1c     5F 30 5F 30 | 	byte	$77, $6a, $7e, $7f, $50, $7f, $3b, $6f, $6c, $59, $50, $60, $5f, $30, $5f, $30
15b20     3F 40 2F 2D 
15b24     2A 30 1F 10 
15b28     22 00 17 00 
15b2c     10 FF E0 1F | 	byte	$3f, $40, $2f, $2d, $2a, $30, $1f, $10, $22, $00, $17, $00, $10, $ff, $e0, $1f
15b30     D4 E5 F4 D4 
15b34     DF D8 DF C9 
15b38     CC C7 B7 D0 
15b3c     BF B8 AF C8 | 	byte	$d4, $e5, $f4, $d4, $df, $d8, $df, $c9, $cc, $c7, $b7, $d0, $bf, $b8, $af, $c8
15b40     9F B0 AB AB 
15b44     A4 8F B0 97 
15b48     90 97 87 90 
15b4c     95 9B 81 98 | 	byte	$9f, $b0, $ab, $ab, $a4, $8f, $b0, $97, $90, $97, $87, $90, $95, $9b, $81, $98
15b50     83 82 83 88 
15b54     87 80 90 80 
15b58     80 80 82 81 
15b5c     80 80 80 80 | 	byte	$83, $82, $83, $88, $87, $80, $90, $80, $80, $80, $82, $81, $80, $80, $80, $80
15b60     80 80 80 80 
15b64     80 80 80 80 
15b68     80          | 	byte	$80[9]
15b69     97 80 95 80 
15b6d     80 80 80 80 
15b71     80 80 8E 80 
15b75     90 80 80 80 | 	byte	$97, $80, $95, $80, $80, $80, $80, $80, $80, $80, $8e, $80, $90, $80, $80, $80
15b79     80 80 80 80 
15b7d     80          | 	byte	$80[5]
15b7e     8A 8A 80 90 
15b82     80 80 8C 83 
15b86     88 83 80 8F 
15b8a     81 A0 83 90 | 	byte	$8a, $8a, $80, $90, $80, $80, $8c, $83, $88, $83, $80, $8f, $81, $a0, $83, $90
15b8e     9B 84 B7 87 
15b92     B0 8F 9F A8 
15b96     94 C2 9F A0 
15b9a     AF A4 BF 8D | 	byte	$9b, $84, $b7, $87, $b0, $8f, $9f, $a8, $94, $c2, $9f, $a0, $af, $a4, $bf, $8d
15b9e     D0 A8 AF C8 
15ba2     AF C0 DF 99 
15ba6     D8 BF E0 C1 
15baa     CB D0 F7 BF | 	byte	$d0, $a8, $af, $c8, $af, $c0, $df, $99, $d8, $bf, $e0, $c1, $cb, $d0, $f7, $bf
15bae     00 D7 EA DB 
15bb2     EF 00 F7 D0 
15bb6     1F CB 1D FF 
15bba     02 0F 08 17 | 	byte	$00, $d7, $ea, $db, $ef, $00, $f7, $d0, $1f, $cb, $1d, $ff, $02, $0f, $08, $17
15bbe     00 1F 30 EF 
15bc2     38 2D 10 40 
15bc6     1B 30 3B 2F 
15bca     60 1B 57 2F | 	byte	$00, $1f, $30, $ef, $38, $2d, $10, $40, $1b, $30, $3b, $2f, $60, $1b, $57, $2f
15bce     40 5B 30 67 
15bd2     40 6F 40 44 
15bd6     7F 20 76 6A 
15bda     57 68 6F 53 | 	byte	$40, $5b, $30, $67, $40, $6f, $40, $44, $7f, $20, $76, $6a, $57, $68, $6f, $53
15bde     7C 6F 68 7C 
15be2     5F 78 7D 6F 
15be6     7E 6F 7F 74 
15bea     7F 7C 78 7F | 	byte	$7c, $6f, $68, $7c, $5f, $78, $7d, $6f, $7e, $6f, $7f, $74, $7f, $7c, $78, $7f
15bee     68 7F 66 7F 
15bf2     7F 7F 7C 7F 
15bf6     7F 7F 7F 7F 
15bfa     68 7F 7F 7F | 	byte	$68, $7f, $66, $7f, $7f, $7f, $7c, $7f, $7f, $7f, $7f, $7f, $68, $7f, $7f, $7f
15bfe     7F 7F 78 7F 
15c02     78 7F 7F 7D 
15c06     7F 7D 7D 7F 
15c0a     7F 7F 7F 7F | 	byte	$7f, $7f, $78, $7f, $78, $7f, $7f, $7d, $7f, $7d, $7d, $7f, $7f, $7f, $7f, $7f
15c0e     7A 7F 7F 7F 
15c12     7F 7F 7F 7F 
15c16     79 7F 7B 7F 
15c1a     7D 7F 6F 7F | 	byte	$7a, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $79, $7f, $7b, $7f, $7d, $7f, $6f, $7f
15c1e     67 7F 6F 70 
15c22     7F 68 77 70 
15c26     7B 79 64 6C 
15c2a     7F 50 77 52 | 	byte	$67, $7f, $6f, $70, $7f, $68, $77, $70, $7b, $79, $64, $6c, $7f, $50, $77, $52
15c2e     69 54 69 52 
15c32     51 5B 58 40 
15c36     57 32 5C 3D 
15c3a     40 24 3A 2F | 	byte	$69, $54, $69, $52, $51, $5b, $58, $40, $57, $32, $5c, $3d, $40, $24, $3a, $2f
15c3e     48 2F 28 26 
15c42     0B 20 22 1F 
15c46     08 14 0B 0E 
15c4a     09 02 00 FF | 	byte	$48, $2f, $28, $26, $0b, $20, $22, $1f, $08, $14, $0b, $0e, $09, $02, $00, $ff
15c4e     E8 FD F7 E3 
15c52     08 D7 E0 F2 
15c56     CF E0 E7 D0 
15c5a     DB D0 D5 BD | 	byte	$e8, $fd, $f7, $e3, $08, $d7, $e0, $f2, $cf, $e0, $e7, $d0, $db, $d0, $d5, $bd
15c5e     D4 D1 B5 D8 
15c62     B7 B7 C0 CA 
15c66     A7 C4 B2 C0 
15c6a     A0 B4 A7 AC | 	byte	$d4, $d1, $b5, $d8, $b7, $b7, $c0, $ca, $a7, $c4, $b2, $c0, $a0, $b4, $a7, $ac
15c6e     AF B4 9F A8 
15c72     9F A5 A0 A7 
15c76     A0 97 98 AF 
15c7a     90 A0 9F 9F | 	byte	$af, $b4, $9f, $a8, $9f, $a5, $a0, $a7, $a0, $97, $98, $af, $90, $a0, $9f, $9f
15c7e     90 AF 9F 88 
15c82     A7 9D 94 9F 
15c86     99 A7 9A 9D 
15c8a     9C 98 9F A4 | 	byte	$90, $af, $9f, $88, $a7, $9d, $94, $9f, $99, $a7, $9a, $9d, $9c, $98, $9f, $a4
15c8e     9B A2 8D A9 
15c92     A5 98 A5 98 
15c96     B7 98 9F B0 
15c9a     97 B4 AA A3 | 	byte	$9b, $a2, $8d, $a9, $a5, $98, $a5, $98, $b7, $98, $9f, $b0, $97, $b4, $aa, $a3
15c9e     98 B7 A7 AA 
15ca2     B5 9B A4 9F 
15ca6     B0 AF C0 B1 
15caa     AB 98 CC AF | 	byte	$98, $b7, $a7, $aa, $b5, $9b, $a4, $9f, $b0, $af, $c0, $b1, $ab, $98, $cc, $af
15cae     C0 97 C8 A7 
15cb2     D0 AF C8 B2 
15cb6     B8 BF C2 BF 
15cba     B9 CB C8 D7 | 	byte	$c0, $97, $c8, $a7, $d0, $af, $c8, $b2, $b8, $bf, $c2, $bf, $b9, $cb, $c8, $d7
15cbe     C0 BC B5 E7 
15cc2     C0 CB D5 CB 
15cc6     D0 DF C0 F7 
15cca     B1 F7 C0 DF | 	byte	$c0, $bc, $b5, $e7, $c0, $cb, $d5, $cb, $d0, $df, $c0, $f7, $b1, $f7, $c0, $df
15cce     F0 D7 EB D0 
15cd2     E7 D5 FF CA 
15cd6     F8 DF EB F0 
15cda     EF C0 F0 0F | 	byte	$f0, $d7, $eb, $d0, $e7, $d5, $ff, $ca, $f8, $df, $eb, $f0, $ef, $c0, $f0, $0f
15cde     E4 F7 00 D7 
15ce2     E9 12 07 E0 
15ce6     EF 00 CF 20 
15cea     17 E0 18 EF | 	byte	$e4, $f7, $00, $d7, $e9, $12, $07, $e0, $ef, $00, $cf, $20, $17, $e0, $18, $ef
15cee     ED 28 FF F0 
15cf2     FF 10 14 F7 
15cf6     20 EB 1F 28 
15cfa     F7 10 27 1B | 	byte	$ed, $28, $ff, $f0, $ff, $10, $14, $f7, $20, $eb, $1f, $28, $f7, $10, $27, $1b
15cfe     18 FF 30 0F 
15d02     34 24 1D 29 
15d06     10 1F 17 40 
15d0a     4F 30 33 04 | 	byte	$18, $ff, $30, $0f, $34, $24, $1d, $29, $10, $1f, $17, $40, $4f, $30, $33, $04
15d0e     3F 48 4B 20 
15d12     37 48 2F 40 
15d16     37 52 62 2E 
15d1a     32 4F 54 48 | 	byte	$3f, $48, $4b, $20, $37, $48, $2f, $40, $37, $52, $62, $2e, $32, $4f, $54, $48
15d1e     5D 60 45 40 
15d22     3A 3F 7F 67 
15d26     68 37 40 5F 
15d2a     7F 5F 60 3F | 	byte	$5d, $60, $45, $40, $3a, $3f, $7f, $67, $68, $37, $40, $5f, $7f, $5f, $60, $3f
15d2e     58 6D 72 73 
15d32     61 58 5E 77 
15d36     6A 77 60 67 
15d3a     78 6F 7C 60 | 	byte	$58, $6d, $72, $73, $61, $58, $5e, $77, $6a, $77, $60, $67, $78, $6f, $7c, $60
15d3e     51 67 67 7F 
15d42     6D 7F 5B 68 
15d46     6B 7F 64 74 
15d4a     64 6F 70 6B | 	byte	$51, $67, $67, $7f, $6d, $7f, $5b, $68, $6b, $7f, $64, $74, $64, $6f, $70, $6b
15d4e     6A 61 7F 69 
15d52     78 4F 60 57 
15d56     77 7C 5F 60 
15d5a     57 50 5F 67 | 	byte	$6a, $61, $7f, $69, $78, $4f, $60, $57, $77, $7c, $5f, $60, $57, $50, $5f, $67
15d5e     58 73 5D 50 
15d62     4F 63 40 5F 
15d66     51 5E 69 40 
15d6a     34 3A 3F 7A | 	byte	$58, $73, $5d, $50, $4f, $63, $40, $5f, $51, $5e, $69, $40, $34, $3a, $3f, $7a
15d6e     44 40 36 2F 
15d72     5D 48 4F 20 
15d76     3D 2D 17 3F 
15d7a     37 57 38 10 | 	byte	$44, $40, $36, $2f, $5d, $48, $4f, $20, $3d, $2d, $17, $3f, $37, $57, $38, $10
15d7e     23 07 38 3F 
15d82     44 1B 08 CF 
15d86     1F 2E 4F 28 
15d8a     11 F5 03 33 | 	byte	$23, $07, $38, $3f, $44, $1b, $08, $cf, $1f, $2e, $4f, $28, $11, $f5, $03, $33
15d8e     00 00 FD 07 
15d92     27 04 F8 FB 
15d96     E6 F0 EF FB 
15d9a     20 00 D8 DD | 	byte	$00, $00, $fd, $07, $27, $04, $f8, $fb, $e6, $f0, $ef, $fb, $20, $00, $d8, $dd
15d9e     DA EF EC F7 
15da2     E8 E6 D9 CD 
15da6     E4 EB D0 CF 
15daa     DC CF C3 E4 | 	byte	$da, $ef, $ec, $f7, $e8, $e6, $d9, $cd, $e4, $eb, $d0, $cf, $dc, $cf, $c3, $e4
15dae     CF C8 D8 C4 
15db2     A8 CB DA D7 
15db6     D0 C2 95 D4 
15dba     D3 DE A4 B0 | 	byte	$cf, $c8, $d8, $c4, $a8, $cb, $da, $d7, $d0, $c2, $95, $d4, $d3, $de, $a4, $b0
15dbe     A3 CF D0 B5 
15dc2     D0 BB C8 B7 
15dc6     B0 A8 B3 BF 
15dca     E0 C2 B0 9C | 	byte	$a3, $cf, $d0, $b5, $d0, $bb, $c8, $b7, $b0, $a8, $b3, $bf, $e0, $c2, $b0, $9c
15dce     A3 BA BF C6 
15dd2     C3 C0 9F A8 
15dd6     BB C7 B2 D4 
15dda     9B A5 AF CC | 	byte	$a3, $ba, $bf, $c6, $c3, $c0, $9f, $a8, $bb, $c7, $b2, $d4, $9b, $a5, $af, $cc
15dde     C5 AD C0 AF 
15de2     AA C2 AF B8 
15de6     B7 BA C3 A8 
15dea     A6 B3 D8 BF | 	byte	$c5, $ad, $c0, $af, $aa, $c2, $af, $b8, $b7, $ba, $c3, $a8, $a6, $b3, $d8, $bf
15dee     C0 9B A7 B7 
15df2     DE D0 A1 A8 
15df6     AF AB DF E8 
15dfa     AB C0 A8 B7 | 	byte	$c0, $9b, $a7, $b7, $de, $d0, $a1, $a8, $af, $ab, $df, $e8, $ab, $c0, $a8, $b7
15dfe     C0 C4 B7 E6 
15e02     C8 D4 AF B0 
15e06     CF D6 D2 D6 
15e0a     CC E7 D4 C8 | 	byte	$c0, $c4, $b7, $e6, $c8, $d4, $af, $b0, $cf, $d6, $d2, $d6, $cc, $e7, $d4, $c8
15e0e     BF CC DF 00 
15e12     06 C8 D7 C0 
15e16     CF F7 18 ED 
15e1a     F8 C7 14 EB | 	byte	$bf, $cc, $df, $00, $06, $c8, $d7, $c0, $cf, $f7, $18, $ed, $f8, $c7, $14, $eb
15e1e     00 0F E0 F7 
15e22     E3 27 03 20 
15e26     FD FF 02 0D 
15e2a     1D 13 0A FB | 	byte	$00, $0f, $e0, $f7, $e3, $27, $03, $20, $fd, $ff, $02, $0d, $1d, $13, $0a, $fb
15e2e     FB 3F 26 2E 
15e32     18 00 17 24 
15e36     3B 19 08 2F 
15e3a     42 34 22 3C | 	byte	$fb, $3f, $26, $2e, $18, $00, $17, $24, $3b, $19, $08, $2f, $42, $34, $22, $3c
15e3e     20 01 37 2F 
15e42     5F 50 22 00 
15e46     1F 5F 63 50 
15e4a     24 10 37 30 | 	byte	$20, $01, $37, $2f, $5f, $50, $22, $00, $1f, $5f, $63, $50, $24, $10, $37, $30
15e4e     3F 6D 51 48 
15e52     0F 33 3B 6D 
15e56     48 30 20 3F 
15e5a     66 5E 40 3F | 	byte	$3f, $6d, $51, $48, $0f, $33, $3b, $6d, $48, $30, $20, $3f, $66, $5e, $40, $3f
15e5e     20 27 4F 57 
15e62     52 44 37 38 
15e66     48 33 3C 3F 
15e6a     60 47 58 4E | 	byte	$20, $27, $4f, $57, $52, $44, $37, $38, $48, $33, $3c, $3f, $60, $47, $58, $4e
15e6e     48 18 27 4F 
15e72     5E 58 3C 3D 
15e76     4B 50 38 1F 
15e7a     4E 6B 48 3F | 	byte	$48, $18, $27, $4f, $5e, $58, $3c, $3d, $4b, $50, $38, $1f, $4e, $6b, $48, $3f
15e7e     34 2F 47 6B 
15e82     60 40 1A 2B 
15e86     46 5B 58 38 
15e8a     3D 57 50 4E | 	byte	$34, $2f, $47, $6b, $60, $40, $1a, $2b, $46, $5b, $58, $38, $3d, $57, $50, $4e
15e8e     20 1B 57 5B 
15e92     59 3E 50 2B 
15e96     32 1D 3F 4D 
15e9a     59 38 2B 30 | 	byte	$20, $1b, $57, $5b, $59, $3e, $50, $2b, $32, $1d, $3f, $4d, $59, $38, $2b, $30
15e9e     3F 5D 48 08 
15ea2     DF 37 62 50 
15ea6     30 1A 12 28 
15eaa     2B 19 20 1B | 	byte	$3f, $5d, $48, $08, $df, $37, $62, $50, $30, $1a, $12, $28, $2b, $19, $20, $1b
15eae     22 3F 34 18 
15eb2     EC E8 0F 3F 
15eb6     48 00 EA F9 
15eba     16 19 10 F0 | 	byte	$22, $3f, $34, $18, $ec, $e8, $0f, $3f, $48, $00, $ea, $f9, $16, $19, $10, $f0
15ebe     FD 1B 0C 02 
15ec2     FB E4 FF 08 
15ec6     FE 0C 01 EB 
15eca     E3 FA 1B 24 | 	byte	$fd, $1b, $0c, $02, $fb, $e4, $ff, $08, $fe, $0c, $01, $eb, $e3, $fa, $1b, $24
15ece     00 D7 D8 F7 
15ed2     11 14 DF D2 
15ed6     FF FF 34 E4 
15eda     CA DF C8 EF | 	byte	$00, $d7, $d8, $f7, $11, $14, $df, $d2, $ff, $ff, $34, $e4, $ca, $df, $c8, $ef
15ede     2D 08 F4 DA 
15ee2     EF F0 EA D7 
15ee6     E0 DF FF 00 
15eea     EC C0 DE DE | 	byte	$2d, $08, $f4, $da, $ef, $f0, $ea, $d7, $e0, $df, $ff, $00, $ec, $c0, $de, $de
15eee     F6 E2 E4 DF 
15ef2     00 D0 A0 CF 
15ef6     DF 10 F5 E0 
15efa     B7 A8 C7 E8 | 	byte	$f6, $e2, $e4, $df, $00, $d0, $a0, $cf, $df, $10, $f5, $e0, $b7, $a8, $c7, $e8
15efe     E3 D0 D5 D0 
15f02     D3 C7 F6 CC 
15f06     B2 CB DF EC 
15f0a     C9 C2 CB F8 | 	byte	$e3, $d0, $d5, $d0, $d3, $c7, $f6, $cc, $b2, $cb, $df, $ec, $c9, $c2, $cb, $f8
15f0e     FA D0 C4 A9 
15f12     EB F5 F0 D3 
15f16     E9 D8 D9 D5 
15f1a     DF F4 E7 E0 | 	byte	$fa, $d0, $c4, $a9, $eb, $f5, $f0, $d3, $e9, $d8, $d9, $d5, $df, $f4, $e7, $e0
15f1e     DD CF FB F8 
15f22     F3 CA F3 DB 
15f26     00 E4 C7 EF 
15f2a     07 07 F8 EA | 	byte	$dd, $cf, $fb, $f8, $f3, $ca, $f3, $db, $00, $e4, $c7, $ef, $07, $07, $f8, $ea
15f2e     B0 CF EF 27 
15f32     20 0C E0 A7 
15f36     E3 0F 28 05 
15f3a     E0 CF FD 1F | 	byte	$b0, $cf, $ef, $27, $20, $0c, $e0, $a7, $e3, $0f, $28, $05, $e0, $cf, $fd, $1f
15f3e     08 E5 F6 FA 
15f42     F3 00 00 F4 
15f46     FF 08 20 D7 
15f4a     F8 DF 0F 18 | 	byte	$08, $e5, $f6, $fa, $f3, $00, $00, $f4, $ff, $08, $20, $d7, $f8, $df, $0f, $18
15f4e     09 D8 EF 17 
15f52     3A 20 EA DF 
15f56     EF 25 30 1D 
15f5a     24 00 FD ED | 	byte	$09, $d8, $ef, $17, $3a, $20, $ea, $df, $ef, $25, $30, $1d, $24, $00, $fd, $ed
15f5e     1F 25 23 30 
15f62     17 24 10 2F 
15f66     30 0C 15 1C 
15f6a     27 46 40 1B | 	byte	$1f, $25, $23, $30, $17, $24, $10, $2f, $30, $0c, $15, $1c, $27, $46, $40, $1b
15f6e     34 28 27 37 
15f72     37 32 3B 47 
15f76     36 59 20 22 
15f7a     2B 37 6F 60 | 	byte	$34, $28, $27, $37, $37, $32, $3b, $47, $36, $59, $20, $22, $2b, $37, $6f, $60
15f7e     40 25 0B 3F 
15f82     65 50 58 30 
15f86     31 3B 2B 46 
15f8a     47 5F 44 3D | 	byte	$40, $25, $0b, $3f, $65, $50, $58, $30, $31, $3b, $2b, $46, $47, $5f, $44, $3d
15f8e     2A 31 3F 47 
15f92     4C 47 28 2D 
15f96     30 33 4D 50 
15f9a     30 14 1B 49 | 	byte	$2a, $31, $3f, $47, $4c, $47, $28, $2d, $30, $33, $4d, $50, $30, $14, $1b, $49
15f9e     33 28 1B 26 
15fa2     1A 19 37 34 
15fa6     30 10 FA 2B 
15faa     27 28 08 00 | 	byte	$33, $28, $1b, $26, $1a, $19, $37, $34, $30, $10, $fa, $2b, $27, $28, $08, $00
15fae     0F 37 0A 00 
15fb2     FF 28 14 00 
15fb6     F7 07 2F 18 
15fba     EC E3 FF 09 | 	byte	$0f, $37, $0a, $00, $ff, $28, $14, $00, $f7, $07, $2f, $18, $ec, $e3, $ff, $09
15fbe     10 18 01 EA 
15fc2     E1 F7 1F 15 
15fc6     00 D8 DB 03 
15fca     0F 20 00 CF | 	byte	$10, $18, $01, $ea, $e1, $f7, $1f, $15, $00, $d8, $db, $03, $0f, $20, $00, $cf
15fce     FD 0D 00 F6 
15fd2     EF 0A 00 0B 
15fd6     EA F4 F7 F1 
15fda     0F 0A 02 EA | 	byte	$fd, $0d, $00, $f6, $ef, $0a, $00, $0b, $ea, $f4, $f7, $f1, $0f, $0a, $02, $ea
15fde     FE FE 06 17 
15fe2     00 E7 F3 0E 
15fe6     FB 0E 00 F2 
15fea     EA 0A 09 13 | 	byte	$fe, $fe, $06, $17, $00, $e7, $f3, $0e, $fb, $0e, $00, $f2, $ea, $0a, $09, $13
15fee     00 E9 FD 00 
15ff2     15 01 E8 EB 
15ff6     F7 1F 18 04 
15ffa     EC E8 ED 0D | 	byte	$00, $e9, $fd, $00, $15, $01, $e8, $eb, $f7, $1f, $18, $04, $ec, $e8, $ed, $0d
15ffe     2E 20 08 E1 
16002     E7 0B 1C 10 
16006     06 10 08 F3 
1600a     F6 0F 01 1B | 	byte	$2e, $20, $08, $e1, $e7, $0b, $1c, $10, $06, $10, $08, $f3, $f6, $0f, $01, $1b
1600e     10 0A EF 04 
16012     0F 1A 0E E9 
16016     F5 0F 21 12 
1601a     24 F8 FD 00 | 	byte	$10, $0a, $ef, $04, $0f, $1a, $0e, $e9, $f5, $0f, $21, $12, $24, $f8, $fd, $00
1601e     FB 17 1B 24 
16022     0C E0 EA 07 
16026     33 18 1E 00 
1602a     F4 EB 0C 1E | 	byte	$fb, $17, $1b, $24, $0c, $e0, $ea, $07, $33, $18, $1e, $00, $f4, $eb, $0c, $1e
1602e     03 10 F4 17 
16032     17 18 FF E7 
16036     F5 0F 1E 15 
1603a     1A 01 F4 E1 | 	byte	$03, $10, $f4, $17, $17, $18, $ff, $e7, $f5, $0f, $1e, $15, $1a, $01, $f4, $e1
1603e     F3 1F 14 10 
16042     F2 F9 F6 FD 
16046     FD 00 FD F4 
1604a     F8 07 14 F4 | 	byte	$f3, $1f, $14, $10, $f2, $f9, $f6, $fd, $fd, $00, $fd, $f4, $f8, $07, $14, $f4
1604e     F3 E0 E7 FF 
16052     1B 08 F2 F2 
16056     E0 EE F5 F2 
1605a     EF F1 E8 DB | 	byte	$f3, $e0, $e7, $ff, $1b, $08, $f2, $f2, $e0, $ee, $f5, $f2, $ef, $f1, $e8, $db
1605e     FB 10 00 D4 
16062     C0 E7 EA F8 
16066     CD ED E8 E4 
1606a     DB D8 E3 D8 | 	byte	$fb, $10, $00, $d4, $c0, $e7, $ea, $f8, $cd, $ed, $e8, $e4, $db, $d8, $e3, $d8
1606e     E2 C0 E4 ED 
16072     E0 DC B8 D1 
16076     CF ED DF D0 
1607a     C3 B9 D3 F7 | 	byte	$e2, $c0, $e4, $ed, $e0, $dc, $b8, $d1, $cf, $ed, $df, $d0, $c3, $b9, $d3, $f7
1607e     E0 D4 C0 C0 
16082     BF DB E6 D4 
16086     D1 D6 D8 C8 
1608a     C7 D1 EB E9 | 	byte	$e0, $d4, $c0, $c0, $bf, $db, $e6, $d4, $d1, $d6, $d8, $c8, $c7, $d1, $eb, $e9
1608e     D0 BA D3 EF 
16092     F0 E9 D0 CB 
16096     D5 F5 0E 00 
1609a     E4 C2 D3 F3 | 	byte	$d0, $ba, $d3, $ef, $f0, $e9, $d0, $cb, $d5, $f5, $0e, $00, $e4, $c2, $d3, $f3
1609e     16 10 F2 E7 
160a2     EE FF 11 0E 
160a6     FB F0 E0 0F 
160aa     27 24 04 F1 | 	byte	$16, $10, $f2, $e7, $ee, $ff, $11, $0e, $fb, $f0, $e0, $0f, $27, $24, $04, $f1
160ae     0F 15 24 18 
160b2     00 07 1F 38 
160b6     1B 28 12 08 
160ba     1B 25 2E 1C | 	byte	$0f, $15, $24, $18, $00, $07, $1f, $38, $1b, $28, $12, $08, $1b, $25, $2e, $1c
160be     27 32 30 2D 
160c2     24 2B 33 36 
160c6     40 23 31 3E 
160ca     3B 4A 3F 33 | 	byte	$27, $32, $30, $2d, $24, $2b, $33, $36, $40, $23, $31, $3e, $3b, $4a, $3f, $33
160ce     46 45 44 45 
160d2     40 3F 48 5F 
160d6     52 54 4F 54 
160da     4D 50 56 53 | 	byte	$46, $45, $44, $45, $40, $3f, $48, $5f, $52, $54, $4f, $54, $4d, $50, $56, $53
160de     5A 58 5A 5B 
160e2     50 47 57 69 
160e6     6E 58 38 4B 
160ea     5F 70 58 4B | 	byte	$5a, $58, $5a, $5b, $50, $47, $57, $69, $6e, $58, $38, $4b, $5f, $70, $58, $4b
160ee     66 54 50 47 
160f2     5F 6A 62 4A 
160f6     31 3A 55 73 
160fa     70 48 40 35 | 	byte	$66, $54, $50, $47, $5f, $6a, $62, $4a, $31, $3a, $55, $73, $70, $48, $40, $35
160fe     42 4B 50 42 
16102     3F 42 47 44 
16106     3C 30 23 37 
1610a     53 40 14 1C | 	byte	$42, $4b, $50, $42, $3f, $42, $47, $44, $3c, $30, $23, $37, $53, $40, $14, $1c
1610e     27 3C 2D 28 
16112     23 10 27 30 
16116     10 0A FF 1F 
1611a     10 09 08 0D | 	byte	$27, $3c, $2d, $28, $23, $10, $27, $30, $10, $0a, $ff, $1f, $10, $09, $08, $0d
1611e     18 0E 08 F4 
16122     EE F2 FF 13 
16126     00 F5 F8 E2 
1612a     E5 E6 E9 F0 | 	byte	$18, $0e, $08, $f4, $ee, $f2, $ff, $13, $00, $f5, $f8, $e2, $e5, $e6, $e9, $f0
1612e     EA E4 D0 D7 
16132     E6 E0 D0 D7 
16136     E0 D9 C8 B7 
1613a     CB DA D5 CA | 	byte	$ea, $e4, $d0, $d7, $e6, $e0, $d0, $d7, $e0, $d9, $c8, $b7, $cb, $da, $d5, $ca
1613e     CA B3 B0 DB 
16142     CC C8 B4 B7 
16146     AE BF B6 B0 
1614a     CB B7 C0 B1 | 	byte	$ca, $b3, $b0, $db, $cc, $c8, $b4, $b7, $ae, $bf, $b6, $b0, $cb, $b7, $c0, $b1
1614e     A1 BF C3 B0 
16152     9F BF D2 B4 
16156     94 9F C0 DF 
1615a     C8 B0 8A 9F | 	byte	$a1, $bf, $c3, $b0, $9f, $bf, $d2, $b4, $94, $9f, $c0, $df, $c8, $b0, $8a, $9f
1615e     BF CF D0 C0 
16162     A0 97 BE D2 
16166     D6 B0 AC B7 
1616a     DB D0 B8 A8 | 	byte	$bf, $cf, $d0, $c0, $a0, $97, $be, $d2, $d6, $b0, $ac, $b7, $db, $d0, $b8, $a8
1616e     CF D4 C9 D5 
16172     D0 DB E6 C8 
16176     BF CB ED F8 
1617a     E1 D4 DF F5 | 	byte	$cf, $d4, $c9, $d5, $d0, $db, $e6, $c8, $bf, $cb, $ed, $f8, $e1, $d4, $df, $f5
1617e     D4 E0 DF FB 
16182     18 E9 F2 F0 
16186     EF FF 02 EA 
1618a     13 2C 00 FF | 	byte	$d4, $e0, $df, $fb, $18, $e9, $f2, $f0, $ef, $ff, $02, $ea, $13, $2c, $00, $ff
1618e     0C 0B 0C 09 
16192     1C 22 1F 2B 
16196     28 1A 11 17 
1619a     1B 37 38 27 | 	byte	$0c, $0b, $0c, $09, $1c, $22, $1f, $2b, $28, $1a, $11, $17, $1b, $37, $38, $27
1619e     32 2D 39 2B 
161a2     46 3E 38 29 
161a6     27 33 4D 56 
161aa     40 3C 35 56 | 	byte	$32, $2d, $39, $2b, $46, $3e, $38, $29, $27, $33, $4d, $56, $40, $3c, $35, $56
161ae     40 3B 38 3F 
161b2     57 59 4A 4A 
161b6     3C 3C 3F 5F 
161ba     65 4C 3F 46 | 	byte	$40, $3b, $38, $3f, $57, $59, $4a, $4a, $3c, $3c, $3f, $5f, $65, $4c, $3f, $46
161be     57 5A 58 28 
161c2     47 5F 60 49 
161c6     44 47 5F 54 
161ca     42 34 3F 52 | 	byte	$57, $5a, $58, $28, $47, $5f, $60, $49, $44, $47, $5f, $54, $42, $34, $3f, $52
161ce     5B 51 40 37 
161d2     38 3F 3D 55 
161d6     56 44 2E 22 
161da     2F 3B 4F 54 | 	byte	$5b, $51, $40, $37, $38, $3f, $3d, $55, $56, $44, $2e, $22, $2f, $3b, $4f, $54
161de     44 30 10 0B 
161e2     12 3F 5A 40 
161e6     20 0C 0B 2F 
161ea     38 21 10 16 | 	byte	$44, $30, $10, $0b, $12, $3f, $5a, $40, $20, $0c, $0b, $2f, $38, $21, $10, $16
161ee     13 21 26 1C 
161f2     08 FE 03 14 
161f6     12 16 08 FB 
161fa     00 EE FF 0B | 	byte	$13, $21, $26, $1c, $08, $fe, $03, $14, $12, $16, $08, $fb, $00, $ee, $ff, $0b
161fe     16 00 E0 DF 
16202     EF 02 0C E4 
16206     D5 DD E2 D5 
1620a     F6 F2 E4 D0 | 	byte	$16, $00, $e0, $df, $ef, $02, $0c, $e4, $d5, $dd, $e2, $d5, $f6, $f2, $e4, $d0
1620e     C5 D4 EB E0 
16212     D3 C8 BE BF 
16216     EF F2 D0 B8 
1621a     AA BB DF D8 | 	byte	$c5, $d4, $eb, $e0, $d3, $c8, $be, $bf, $ef, $f2, $d0, $b8, $aa, $bb, $df, $d8
1621e     D6 C4 CD D2 
16222     C9 C9 C0 C5 
16226     C8 D3 E2 DB 
1622a     CC B3 B7 D1 | 	byte	$d6, $c4, $cd, $d2, $c9, $c9, $c0, $c5, $c8, $d3, $e2, $db, $cc, $b3, $b7, $d1
1622e     DF E8 C2 B9 
16232     C7 E3 E2 DB 
16236     CA C0 CF E3 
1623a     D0 D7 DC DB | 	byte	$df, $e8, $c2, $b9, $c7, $e3, $e2, $db, $ca, $c0, $cf, $e3, $d0, $d7, $dc, $db
1623e     E2 DC C8 CA 
16242     D5 ED F5 EC 
16246     D2 C7 DF FA 
1624a     04 E0 CC D3 | 	byte	$e2, $dc, $c8, $ca, $d5, $ed, $f5, $ec, $d2, $c7, $df, $fa, $04, $e0, $cc, $d3
1624e     F5 0B 02 EC 
16252     D8 D5 EF 07 
16256     0F 0C E8 EF 
1625a     FB 03 0B 01 | 	byte	$f5, $0b, $02, $ec, $d8, $d5, $ef, $07, $0f, $0c, $e8, $ef, $fb, $03, $0b, $01
1625e     06 05 12 04 
16262     17 19 06 13 
16266     10 17 18 17 
1626a     1E 22 26 28 | 	byte	$06, $05, $12, $04, $17, $19, $06, $13, $10, $17, $18, $17, $1e, $22, $26, $28
1626e     1A 1C 34 24 
16272     27 2E 30 2D 
16276     31 3E 3A 1C 
1627a     35 3B 32 32 | 	byte	$1a, $1c, $34, $24, $27, $2e, $30, $2d, $31, $3e, $3a, $1c, $35, $3b, $32, $32
1627e     31 3A 43 3A 
16282     37 34 3B 39 
16286     4A 3D 34 2F 
1628a     44 3D 3A 3B | 	byte	$31, $3a, $43, $3a, $37, $34, $3b, $39, $4a, $3d, $34, $2f, $44, $3d, $3a, $3b
1628e     3D 40 3D 48 
16292     3F 34 2F 3D 
16296     4B 45 38 26 
1629a     35 3F 55 48 | 	byte	$3d, $40, $3d, $48, $3f, $34, $2f, $3d, $4b, $45, $38, $26, $35, $3f, $55, $48
1629e     2A 25 1F 4D 
162a2     4D 50 33 18 
162a6     21 2F 59 48 
162aa     38 20 14 27 | 	byte	$2a, $25, $1f, $4d, $4d, $50, $33, $18, $21, $2f, $59, $48, $38, $20, $14, $27
162ae     37 35 33 30 
162b2     20 1B 12 2B 
162b6     2C 30 1C 15 
162ba     27 18 13 16 | 	byte	$37, $35, $33, $30, $20, $1b, $12, $2b, $2c, $30, $1c, $15, $27, $18, $13, $16
162be     1B 22 20 14 
162c2     0E 08 0E 07 
162c6     11 1F 29 10 
162ca     F4 EE 0B 1E | 	byte	$1b, $22, $20, $14, $0e, $08, $0e, $07, $11, $1f, $29, $10, $f4, $ee, $0b, $1e
162ce     14 02 FD 0B 
162d2     08 F6 F9 0E 
162d6     08 F0 EA FB 
162da     FC 00 02 F1 | 	byte	$14, $02, $fd, $0b, $08, $f6, $f9, $0e, $08, $f0, $ea, $fb, $fc, $00, $02, $f1
162de     F3 EE E8 F5 
162e2     F8 F5 EA EC 
162e6     EF EE F6 EC 
162ea     E1 EF F7 F4 | 	byte	$f3, $ee, $e8, $f5, $f8, $f5, $ea, $ec, $ef, $ee, $f6, $ec, $e1, $ef, $f7, $f4
162ee     DB F7 EE E6 
162f2     F5 F5 E8 E7 
162f6     F8 FE F8 EC 
162fa     E2 E8 E3 F3 | 	byte	$db, $f7, $ee, $e6, $f5, $f5, $e8, $e7, $f8, $fe, $f8, $ec, $e2, $e8, $e3, $f3
162fe     06 04 ED EA 
16302     F3 FA F1 EF 
16306     F0 EF 06 0D 
1630a     00 F4 F6 E8 | 	byte	$06, $04, $ed, $ea, $f3, $fa, $f1, $ef, $f0, $ef, $06, $0d, $00, $f4, $f6, $e8
1630e     DB 07 1B 1A 
16312     F4 E8 F2 F9 
16316     0F 18 08 FB 
1631a     FB 05 07 0E | 	byte	$db, $07, $1b, $1a, $f4, $e8, $f2, $f9, $0f, $18, $08, $fb, $fb, $05, $07, $0e
1631e     00 FA 09 08 
16322     0A 16 12 00 
16326     04 FB 02 17 
1632a     2C 08 FC FB | 	byte	$00, $fa, $09, $08, $0a, $16, $12, $00, $04, $fb, $02, $17, $2c, $08, $fc, $fb
1632e     0F 17 23 20 
16332     00 F8 07 0F 
16336     22 12 0B 1A 
1633a     1D 0C 00 FF | 	byte	$0f, $17, $23, $20, $00, $f8, $07, $0f, $22, $12, $0b, $1a, $1d, $0c, $00, $ff
1633e     13 1F 18 0A 
16342     0B 1E 0D 00 
16346     FF 1F 21 0D 
1634a     06 03 0F 1A | 	byte	$13, $1f, $18, $0a, $0b, $1e, $0d, $00, $ff, $1f, $21, $0d, $06, $03, $0f, $1a
1634e     09 02 FB FF 
16352     19 0B 0C 00 
16356     FA F9 00 06 
1635a     F8 02 F5 0A | 	byte	$09, $02, $fb, $ff, $19, $0b, $0c, $00, $fa, $f9, $00, $06, $f8, $02, $f5, $0a
1635e     08 FA E6 E9 
16362     05 10 08 E2 
16366     EB F7 00 FE 
1636a     EA EE E6 EB | 	byte	$08, $fa, $e6, $e9, $05, $10, $08, $e2, $eb, $f7, $00, $fe, $ea, $ee, $e6, $eb
1636e     FF F8 FA EC 
16372     DC E7 F3 EE 
16376     F0 E7 E6 F3 
1637a     F0 EF F5 E8 | 	byte	$ff, $f8, $fa, $ec, $dc, $e7, $f3, $ee, $f0, $e7, $e6, $f3, $f0, $ef, $f5, $e8
1637e     DC EC E7 07 
16382     F0 DF E2 DF 
16386     FD 01 F6 DD 
1638a     ED E6 EF 00 | 	byte	$dc, $ec, $e7, $07, $f0, $df, $e2, $df, $fd, $01, $f6, $dd, $ed, $e6, $ef, $00
1638e     EB F5 ED F7 
16392     F6 F5 F2 F0 
16396     EB F3 05 04 
1639a     F2 F4 F3 08 | 	byte	$eb, $f5, $ed, $f7, $f6, $f5, $f2, $f0, $eb, $f3, $05, $04, $f2, $f4, $f3, $08
1639e     00 00 F4 F5 
163a2     00 FE 03 09 
163a6     08 01 F9 FF 
163aa     08 05 0B 06 | 	byte	$00, $00, $f4, $f5, $00, $fe, $03, $09, $08, $01, $f9, $ff, $08, $05, $0b, $06
163ae     0B 09 06 12 
163b2     0F 12 0F 10 
163b6     0F 12 14 14 
163ba     14 10 1B 22 | 	byte	$0b, $09, $06, $12, $0f, $12, $0f, $10, $0f, $12, $14, $14, $14, $10, $1b, $22
163be     1B 16 0E 1B 
163c2     2D 22 1A 1C 
163c6     1E 1F 1D 23 
163ca     2D 2C 2C 1D | 	byte	$1b, $16, $0e, $1b, $2d, $22, $1a, $1c, $1e, $1f, $1d, $23, $2d, $2c, $2c, $1d
163ce     24 27 34 36 
163d2     2C 27 2A 31 
163d6     31 2C 33 37 
163da     3D 3A 35 2D | 	byte	$24, $27, $34, $36, $2c, $27, $2a, $31, $31, $2c, $33, $37, $3d, $3a, $35, $2d
163de     2F 36 3B 41 
163e2     48 40 2C 2B 
163e6     3B 4B 49 3A 
163ea     30 3F 44 40 | 	byte	$2f, $36, $3b, $41, $48, $40, $2c, $2b, $3b, $4b, $49, $3a, $30, $3f, $44, $40
163ee     39 38 3F 41 
163f2     36 39 3C 3D 
163f6     3C 37 38 37 
163fa     34 37 43 40 | 	byte	$39, $38, $3f, $41, $36, $39, $3c, $3d, $3c, $37, $38, $37, $34, $37, $43, $40
163fe     34 25 2F 3F 
16402     48 3A 28 27 
16406     33 3A 30 3B 
1640a     3C 2E 28 1F | 	byte	$34, $25, $2f, $3f, $48, $3a, $28, $27, $33, $3a, $30, $3b, $3c, $2e, $28, $1f
1640e     3F 32 32 24 
16412     25 35 2C 31 
16416     2C 18 19 1F 
1641a     25 2F 30 20 | 	byte	$3f, $32, $32, $24, $25, $35, $2c, $31, $2c, $18, $19, $1f, $25, $2f, $30, $20
1641e     18 17 1D 22 
16422     1F 14 1C 19 
16426     16 1C 11 0C 
1642a     0C 0F 22 0C | 	byte	$18, $17, $1d, $22, $1f, $14, $1c, $19, $16, $1c, $11, $0c, $0c, $0f, $22, $0c
1642e     0D 0A 0B 0D 
16432     08 0A 05 0A 
16436     0C 00 F8 00 
1643a     FC 06 FA FB | 	byte	$0d, $0a, $0b, $0d, $08, $0a, $05, $0a, $0c, $00, $f8, $00, $fc, $06, $fa, $fb
1643e     FA F5 F0 F8 
16442     04 F8 EA E4 
16446     EB F3 FA F5 
1644a     E2 D7 E3 F2 | 	byte	$fa, $f5, $f0, $f8, $04, $f8, $ea, $e4, $eb, $f3, $fa, $f5, $e2, $d7, $e3, $f2
1644e     F1 E0 DE DA 
16452     DA DB E8 E8 
16456     DC D4 CD E1 
1645a     DC D6 CD D1 | 	byte	$f1, $e0, $de, $da, $da, $db, $e8, $e8, $dc, $d4, $cd, $e1, $dc, $d6, $cd, $d1
1645e     DF D8 CF C6 
16462     DD D4 D4 CB 
16466     CC CB D9 D5 
1646a     CC CB D3 CA | 	byte	$df, $d8, $cf, $c6, $dd, $d4, $d4, $cb, $cc, $cb, $d9, $d5, $cc, $cb, $d3, $ca
1646e     CB D4 CA C4 
16472     CB D2 D7 C8 
16476     C0 BF D3 DB 
1647a     E2 C4 B5 C5 | 	byte	$cb, $d4, $ca, $c4, $cb, $d2, $d7, $c8, $c0, $bf, $d3, $db, $e2, $c4, $b5, $c5
1647e     D2 D1 CB D0 
16482     D5 D0 CF CE 
16486     CE C6 CF D9 
1648a     DA D8 D9 D2 | 	byte	$d2, $d1, $cb, $d0, $d5, $d0, $cf, $ce, $ce, $c6, $cf, $d9, $da, $d8, $d9, $d2
1648e     D4 D2 D4 DC 
16492     D5 DC E1 D5 
16496     DB D2 D9 DC 
1649a     DF DB E5 E2 | 	byte	$d4, $d2, $d4, $dc, $d5, $dc, $e1, $d5, $db, $d2, $d9, $dc, $df, $db, $e5, $e2
1649e     DC DE DF E8 
164a2     DE DE DB E5 
164a6     FA F2 E0 DB 
164aa     DE E9 F4 F7 | 	byte	$dc, $de, $df, $e8, $de, $de, $db, $e5, $fa, $f2, $e0, $db, $de, $e9, $f4, $f7
164ae     F0 E8 E9 F5 
164b2     FB 00 F5 F1 
164b6     F0 F9 00 FC 
164ba     06 FB 02 08 | 	byte	$f0, $e8, $e9, $f5, $fb, $00, $f5, $f1, $f0, $f9, $00, $fc, $06, $fb, $02, $08
164be     01 01 0D 0B 
164c2     0F 13 0B 06 
164c6     0B 1A 1A 20 
164ca     10 11 17 1F | 	byte	$01, $01, $0d, $0b, $0f, $13, $0b, $06, $0b, $1a, $1a, $20, $10, $11, $17, $1f
164ce     27 28 26 16 
164d2     1E 28 2C 2B 
164d6     34 1B 38 2F 
164da     47 28 2F 30 | 	byte	$27, $28, $26, $16, $1e, $28, $2c, $2b, $34, $1b, $38, $2f, $47, $28, $2f, $30
164de     3F 48 37 40 
164e2     30 3F 44 3F 
164e6     44 37 46 51 
164ea     48 4B 42 3B | 	byte	$3f, $48, $37, $40, $30, $3f, $44, $3f, $44, $37, $46, $51, $48, $4b, $42, $3b
164ee     55 43 5D 50 
164f2     48 46 45 5A 
164f6     4B 52 44 57 
164fa     44 4F 54 55 | 	byte	$55, $43, $5d, $50, $48, $46, $45, $5a, $4b, $52, $44, $57, $44, $4f, $54, $55
164fe     51 42 53 49 
16502     5C 55 46 40 
16506     47 55 53 4C 
1650a     4F 49 44 43 | 	byte	$51, $42, $53, $49, $5c, $55, $46, $40, $47, $55, $53, $4c, $4f, $49, $44, $43
1650e     3F 58 3A 4C 
16512     38 3B 44 40 
16516     3B 40 3B 34 
1651a     35 40 3F 2A | 	byte	$3f, $58, $3a, $4c, $38, $3b, $44, $40, $3b, $40, $3b, $34, $35, $40, $3f, $2a
1651e     2C 2B 2C 39 
16522     3C 26 1A 1D 
16526     23 30 30 2D 
1652a     10 17 1A 16 | 	byte	$2c, $2b, $2c, $39, $3c, $26, $1a, $1d, $23, $30, $30, $2d, $10, $17, $1a, $16
1652e     27 18 17 10 
16532     10 0F 16 11 
16536     15 00 1F 00 
1653a     0D 04 FE 07 | 	byte	$27, $18, $17, $10, $10, $0f, $16, $11, $15, $00, $1f, $00, $0d, $04, $fe, $07
1653e     08 06 FC F5 
16542     0E F3 00 FA 
16546     04 F8 FB F2 
1654a     F4 F7 F7 F4 | 	byte	$08, $06, $fc, $f5, $0e, $f3, $00, $fa, $04, $f8, $fb, $f2, $f4, $f7, $f7, $f4
1654e     ED F8 DF 00 
16552     FE EF E0 EF 
16556     EC F7 E8 DF 
1655a     E7 E9 F7 E2 | 	byte	$ed, $f8, $df, $00, $fe, $ef, $e0, $ef, $ec, $f7, $e8, $df, $e7, $e9, $f7, $e2
1655e     F0 D8 DF D5 
16562     EB F1 E5 E4 
16566     CE E2 E5 EB 
1656a     DA DB D1 EF | 	byte	$f0, $d8, $df, $d5, $eb, $f1, $e5, $e4, $ce, $e2, $e5, $eb, $da, $db, $d1, $ef
1656e     D6 EB DA E4 
16572     CF D9 DB E7 
16576     E8 DA D0 ED 
1657a     DA DF D4 E6 | 	byte	$d6, $eb, $da, $e4, $cf, $d9, $db, $e7, $e8, $da, $d0, $ed, $da, $df, $d4, $e6
1657e     EC D2 D9 D6 
16582     DE E9 EA D6 
16586     D5 D6 DF CF 
1658a     F8 E7 DC D8 | 	byte	$ec, $d2, $d9, $d6, $de, $e9, $ea, $d6, $d5, $d6, $df, $cf, $f8, $e7, $dc, $d8
1658e     D9 DA EC E7 
16592     D0 E5 DF EE 
16596     E3 F1 D8 E7 
1659a     E4 ED E0 EA | 	byte	$d9, $da, $ec, $e7, $d0, $e5, $df, $ee, $e3, $f1, $d8, $e7, $e4, $ed, $e0, $ea
1659e     EF D8 F4 F0 
165a2     EF E4 F3 E7 
165a6     E0 F7 F9 F8 
165aa     F8 D3 ED EF | 	byte	$ef, $d8, $f4, $f0, $ef, $e4, $f3, $e7, $e0, $f7, $f9, $f8, $f8, $d3, $ed, $ef
165ae     03 F9 F8 DF 
165b2     EA FB F7 04 
165b6     08 F3 EA EB 
165ba     F2 FF 01 00 | 	byte	$03, $f9, $f8, $df, $ea, $fb, $f7, $04, $08, $f3, $ea, $eb, $f2, $ff, $01, $00
165be     FB F5 F3 FA 
165c2     F7 FB FD 02 
165c6     00 F6 0B 00 
165ca     00 F4 01 0A | 	byte	$fb, $f5, $f3, $fa, $f7, $fb, $fd, $02, $00, $f6, $0b, $00, $00, $f4, $01, $0a
165ce     01 10 0B 08 
165d2     01 0B 02 0A 
165d6     0F 14 06 0B 
165da     19 0B 1A 09 | 	byte	$01, $10, $0b, $08, $01, $0b, $02, $0a, $0f, $14, $06, $0b, $19, $0b, $1a, $09
165de     0B 0B 19 20 
165e2     12 19 0E 16 
165e6     13 10 1F 19 
165ea     16 13 17 19 | 	byte	$0b, $0b, $19, $20, $12, $19, $0e, $16, $13, $10, $1f, $19, $16, $13, $17, $19
165ee     20 1E 19 17 
165f2     18 19 15 1E 
165f6     29 1C 1B 14 
165fa     19 25 21 20 | 	byte	$20, $1e, $19, $17, $18, $19, $15, $1e, $29, $1c, $1b, $14, $19, $25, $21, $20
165fe     1B 21 24 20 
16602     1F 1F 28 1F 
16606     20 26 1F 20 
1660a     1F 26 2D 20 | 	byte	$1b, $21, $24, $20, $1f, $1f, $28, $1f, $20, $26, $1f, $20, $1f, $26, $2d, $20
1660e     20 27 23 2F 
16612     24 23 25 2A 
16616     27 2B 29 20 
1661a     2F 26 31 30 | 	byte	$20, $27, $23, $2f, $24, $23, $25, $2a, $27, $2b, $29, $20, $2f, $26, $31, $30
1661e     23 20 2F 37 
16622     2E 28 2C 2D 
16626     2A 34 29 30 
1662a     31 30 2B 33 | 	byte	$23, $20, $2f, $37, $2e, $28, $2c, $2d, $2a, $34, $29, $30, $31, $30, $2b, $33
1662e     2A 3A 32 30 
16632     28 2A 2F 36 
16636     34 26 2A 38 
1663a     37 2A 30 27 | 	byte	$2a, $3a, $32, $30, $28, $2a, $2f, $36, $34, $26, $2a, $38, $37, $2a, $30, $27
1663e     35 2D 34 27 
16642     1D 30 35 2D 
16646     2A 30 1B 2D 
1664a     26 2D 20 1F | 	byte	$35, $2d, $34, $27, $1d, $30, $35, $2d, $2a, $30, $1b, $2d, $26, $2d, $20, $1f
1664e     2A 26 27 25 
16652     28 1C 13 26 
16656     25 20 1F 18 
1665a     24 15 20 29 | 	byte	$2a, $26, $27, $25, $28, $1c, $13, $26, $25, $20, $1f, $18, $24, $15, $20, $29
1665e     20 1C 0A 13 
16662     12 2D 20 18 
16666     0E 0E 1B 12 
1666a     18 0D 13 0F | 	byte	$20, $1c, $0a, $13, $12, $2d, $20, $18, $0e, $0e, $1b, $12, $18, $0d, $13, $0f
1666e     0A 11 0F 14 
16672     06 0B 0E 10 
16676     10 F8 02 FF 
1667a     13 0C 05 F8 | 	byte	$0a, $11, $0f, $14, $06, $0b, $0e, $10, $10, $f8, $02, $ff, $13, $0c, $05, $f8
1667e     09 08 FA 06 
16682     FA 0B 01 F9 
16686     EE 05 FD 06 
1668a     F8 F8 E7 02 | 	byte	$09, $08, $fa, $06, $fa, $0b, $01, $f9, $ee, $05, $fd, $06, $f8, $f8, $e7, $02
1668e     F3 FA 00 F4 
16692     F9 E9 F4 F4 
16696     F5 F0 FD F3 
1669a     ED EE E8 EE | 	byte	$f3, $fa, $00, $f4, $f9, $e9, $f4, $f4, $f5, $f0, $fd, $f3, $ed, $ee, $e8, $ee
1669e     F8 F8 F3 E4 
166a2     ED E6 F9 FB 
166a6     E8 EB E7 ED 
166aa     F1 F3 F2 E8 | 	byte	$f8, $f8, $f3, $e4, $ed, $e6, $f9, $fb, $e8, $eb, $e7, $ed, $f1, $f3, $f2, $e8
166ae     EB F1 EC E8 
166b2     EB EF F0 F5 
166b6     F0 E6 EF F1 
166ba     F4 F5 E6 EB | 	byte	$eb, $f1, $ec, $e8, $eb, $ef, $f0, $f5, $f0, $e6, $ef, $f1, $f4, $f5, $e6, $eb
166be     E9 F7 F1 F8 
166c2     E8 F5 E5 EF 
166c6     F3 00 F0 E9 
166ca     EB F4 F1 F8 | 	byte	$e9, $f7, $f1, $f8, $e8, $f5, $e5, $ef, $f3, $00, $f0, $e9, $eb, $f4, $f1, $f8
166ce     EF EC E9 F5 
166d2     F9 F2 F0 E6 
166d6     F2 F5 F2 E8 
166da     F1 EC FA F5 | 	byte	$ef, $ec, $e9, $f5, $f9, $f2, $f0, $e6, $f2, $f5, $f2, $e8, $f1, $ec, $fa, $f5
166de     EE F2 EF E9 
166e2     F2 F1 00 EB 
166e6     F2 E9 F4 F7 
166ea     F2 F1 F4 EF | 	byte	$ee, $f2, $ef, $e9, $f2, $f1, $00, $eb, $f2, $e9, $f4, $f7, $f2, $f1, $f4, $ef
166ee     FC F5 F4 EF 
166f2     FB F8 FA F5 
166f6     F5 F7 F5 FD 
166fa     04 FF F4 F5 | 	byte	$fc, $f5, $f4, $ef, $fb, $f8, $fa, $f5, $f5, $f7, $f5, $fd, $04, $ff, $f4, $f5
166fe     FD 11 FB 00 
16702     FC FC 02 09 
16706     04 02 05 02 
1670a     05 09 0F 02 | 	byte	$fd, $11, $fb, $00, $fc, $fc, $02, $09, $04, $02, $05, $02, $05, $09, $0f, $02
1670e     0B 00 08 0F 
16712     0F 08 07 0E 
16716     0E 0E 10 07 
1671a     11 0B 15 02 | 	byte	$0b, $00, $08, $0f, $0f, $08, $07, $0e, $0e, $0e, $10, $07, $11, $0b, $15, $02
1671e     16 0B 14 11 
16722     0C 07 0A 17 
16726     15 18 0F 04 
1672a     07 17 17 14 | 	byte	$16, $0b, $14, $11, $0c, $07, $0a, $17, $15, $18, $0f, $04, $07, $17, $17, $14
1672e     11 09 0F 16 
16732     16 11 12 0B 
16736     08 1B 10 15 
1673a     11 13 13 0A | 	byte	$11, $09, $0f, $16, $16, $11, $12, $0b, $08, $1b, $10, $15, $11, $13, $13, $0a
1673e     13 13 18 18 
16742     15 14 10 17 
16746     11 1A 11 15 
1674a     1A 16 1B 1B | 	byte	$13, $13, $18, $18, $15, $14, $10, $17, $11, $1a, $11, $15, $1a, $16, $1b, $1b
1674e     1A 12 13 1D 
16752     1B 1E 22 18 
16756     19 16 1F 20 
1675a     1A 1B 1C 1F | 	byte	$1a, $12, $13, $1d, $1b, $1e, $22, $18, $19, $16, $1f, $20, $1a, $1b, $1c, $1f
1675e     20 25 25 18 
16762     1B 15 25 23 
16766     20 1C 1B 18 
1676a     24 23 22 1C | 	byte	$20, $25, $25, $18, $1b, $15, $25, $23, $20, $1c, $1b, $18, $24, $23, $22, $1c
1676e     17 1A 1C 1A 
16772     23 1B 1C 1C 
16776     17 1A 1D 13 
1677a     19 20 1A 16 | 	byte	$17, $1a, $1c, $1a, $23, $1b, $1c, $1c, $17, $1a, $1d, $13, $19, $20, $1a, $16
1677e     10 15 1C 22 
16782     10 07 17 1B 
16786     1B 14 0F 13 
1678a     15 11 11 13 | 	byte	$10, $15, $1c, $22, $10, $07, $17, $1b, $1b, $14, $0f, $13, $15, $11, $11, $13
1678e     20 14 0F 10 
16792     0F 15 17 14 
16796     12 15 14 14 
1679a     10 11 13 16 | 	byte	$20, $14, $0f, $10, $0f, $15, $17, $14, $12, $15, $14, $14, $10, $11, $13, $16
1679e     19 11 0E 0D 
167a2     13 0E 17 17 
167a6     15 1A 0D 17 
167aa     10 15 0F 0E | 	byte	$19, $11, $0e, $0d, $13, $0e, $17, $17, $15, $1a, $0d, $17, $10, $15, $0f, $0e
167ae     19 14 14 12 
167b2     0F 0E 16 0E 
167b6     13 10 10 0F 
167ba     0C 0F 09 09 | 	byte	$19, $14, $14, $12, $0f, $0e, $16, $0e, $13, $10, $10, $0f, $0c, $0f, $09, $09
167be     09 0E 0C 05 
167c2     07 07 08 07 
167c6     0B 08 01 FC 
167ca     06 02 FE 0A | 	byte	$09, $0e, $0c, $05, $07, $07, $08, $07, $0b, $08, $01, $fc, $06, $02, $fe, $0a
167ce     FA 07 FB FB 
167d2     FD 01 FF 00 
167d6     FD F8 FB 01 
167da     F9 F6 FB F6 | 	byte	$fa, $07, $fb, $fb, $fd, $01, $ff, $00, $fd, $f8, $fb, $01, $f9, $f6, $fb, $f6
167de     F8 FC FA F9 
167e2     F9 F0 EF FA 
167e6     FA FB F6 F6 
167ea     F4 F9 F3 F4 | 	byte	$f8, $fc, $fa, $f9, $f9, $f0, $ef, $fa, $fa, $fb, $f6, $f6, $f4, $f9, $f3, $f4
167ee     FB F8 F9 F5 
167f2     F5 F3 F7 FA 
167f6     F7 F7 FA F4 
167fa     F5 F8 F9 F3 | 	byte	$fb, $f8, $f9, $f5, $f5, $f3, $f7, $fa, $f7, $f7, $fa, $f4, $f5, $f8, $f9, $f3
167fe     F6 F7 F7 F6 
16802     F4 F3 F7 F7 
16806     F9 F3 F8 F7 
1680a     F1 F2 F3 F4 | 	byte	$f6, $f7, $f7, $f6, $f4, $f3, $f7, $f7, $f9, $f3, $f8, $f7, $f1, $f2, $f3, $f4
1680e     F6 F6 EF F9 
16812     EE F6 F5 EE 
16816     F0 EF F9 F6 
1681a     F0 ED ED F0 | 	byte	$f6, $f6, $ef, $f9, $ee, $f6, $f5, $ee, $f0, $ef, $f9, $f6, $f0, $ed, $ed, $f0
1681e     F2 F2 F3 F4 
16822     F1 F3 ED EC 
16826     F0 F0 F3 EE 
1682a     F0 F1 F4 FC | 	byte	$f2, $f2, $f3, $f4, $f1, $f3, $ed, $ec, $f0, $f0, $f3, $ee, $f0, $f1, $f4, $fc
1682e     EC EE EC EF 
16832     F6 F8 F9 F0 
16836     EF F8 F4 F9 
1683a     F6 F5 F2 F5 | 	byte	$ec, $ee, $ec, $ef, $f6, $f8, $f9, $f0, $ef, $f8, $f4, $f9, $f6, $f5, $f2, $f5
1683e     00 FA F5 FB 
16842     FB F9 FC F7 
16846     03 01 FB FD 
1684a     FE 05 04 05 | 	byte	$00, $fa, $f5, $fb, $fb, $f9, $fc, $f7, $03, $01, $fb, $fd, $fe, $05, $04, $05
1684e     04 01 07 07 
16852     0E 04 05 0A 
16856     0C 0D 0C 0E 
1685a     0E 0D 13 0A | 	byte	$04, $01, $07, $07, $0e, $04, $05, $0a, $0c, $0d, $0c, $0e, $0e, $0d, $13, $0a
1685e     0D 0E 0F 12 
16862     17 10 14 0C 
16866     14 19 0D 14 
1686a     16 17 18 14 | 	byte	$0d, $0e, $0f, $12, $17, $10, $14, $0c, $14, $19, $0d, $14, $16, $17, $18, $14
1686e     11 13 1C 1C 
16872     19 1A 11 19 
16876     1D 1C 1E 1D 
1687a     1D 1F 20 22 | 	byte	$11, $13, $1c, $1c, $19, $1a, $11, $19, $1d, $1c, $1e, $1d, $1d, $1f, $20, $22
1687e     1C 25 28 23 
16882     21 23 21 26 
16886     26 2C 28 26 
1688a     26 26 2E 31 | 	byte	$1c, $25, $28, $23, $21, $23, $21, $26, $26, $2c, $28, $26, $26, $26, $2e, $31
1688e     2C 28 25 2A 
16892     33 36 2E 26 
16896     27 31 32 32 
1689a     34 2D 2F 2B | 	byte	$2c, $28, $25, $2a, $33, $36, $2e, $26, $27, $31, $32, $32, $34, $2d, $2f, $2b
1689e     32 32 38 2C 
168a2     2D 2F 32 36 
168a6     30 30 30 30 
168aa     2D 2D 33 35 | 	byte	$32, $32, $38, $2c, $2d, $2f, $32, $36, $30, $30, $30, $30, $2d, $2d, $33, $35
168ae     37 2D 30 27 
168b2     2C 2E 37 30 
168b6     2E 2B 24 2F 
168ba     31 30 28 26 | 	byte	$37, $2d, $30, $27, $2c, $2e, $37, $30, $2e, $2b, $24, $2f, $31, $30, $28, $26
168be     28 2D 30 2B 
168c2     24 27 2B 28 
168c6     27 22 22 25 
168ca     22 23 20 1E | 	byte	$28, $2d, $30, $2b, $24, $27, $2b, $28, $27, $22, $22, $25, $22, $23, $20, $1e
168ce     18 1D 1E 24 
168d2     1A 18 12 14 
168d6     1A 15 17 13 
168da     14 0F 11 0E | 	byte	$18, $1d, $1e, $24, $1a, $18, $12, $14, $1a, $15, $17, $13, $14, $0f, $11, $0e
168de     0D 0C 0D 0A 
168e2     07 0A 07 02 
168e6     09 09 04 FD 
168ea     FC FE 02 04 | 	byte	$0d, $0c, $0d, $0a, $07, $0a, $07, $02, $09, $09, $04, $fd, $fc, $fe, $02, $04
168ee     F5 F8 F6 FC 
168f2     F8 F6 F3 F0 
168f6     F2 F0 F3 F1 
168fa     ED EF E9 EF | 	byte	$f5, $f8, $f6, $fc, $f8, $f6, $f3, $f0, $f2, $f0, $f3, $f1, $ed, $ef, $e9, $ef
168fe     EC EA EA EA 
16902     E6 E8 E7 E4 
16906     E8 DB E5 E1 
1690a     E6 E2 E0 E4 | 	byte	$ec, $ea, $ea, $ea, $e6, $e8, $e7, $e4, $e8, $db, $e5, $e1, $e6, $e2, $e0, $e4
1690e     DF D6 DE D7 
16912     DF E0 E5 D8 
16916     D9 D8 D9 DA 
1691a     DC D8 D7 D9 | 	byte	$df, $d6, $de, $d7, $df, $e0, $e5, $d8, $d9, $d8, $d9, $da, $dc, $d8, $d7, $d9
1691e     DC DA DB DB 
16922     D5 D5 DA D9 
16926     DC DC DE D9 
1692a     DA DD D8 DF | 	byte	$dc, $da, $db, $db, $d5, $d5, $da, $d9, $dc, $dc, $de, $d9, $da, $dd, $d8, $df
1692e     E4 DD DE DB 
16932     E3 E6 E1 DD 
16936     DF E3 E7 E6 
1693a     E4 EA E7 E4 | 	byte	$e4, $dd, $de, $db, $e3, $e6, $e1, $dd, $df, $e3, $e7, $e6, $e4, $ea, $e7, $e4
1693e     E3 EB EE EC 
16942     EB E6 ED F3 
16946     F2 F0 E7 EF 
1694a     EE F6 F8 F8 | 	byte	$e3, $eb, $ee, $ec, $eb, $e6, $ed, $f3, $f2, $f0, $e7, $ef, $ee, $f6, $f8, $f8
1694e     F5 F1 F2 FA 
16952     FE 03 F8 F9 
16956     FD FD 02 03 
1695a     06 08 02 03 | 	byte	$f5, $f1, $f2, $fa, $fe, $03, $f8, $f9, $fd, $fd, $02, $03, $06, $08, $02, $03
1695e     05 0A 0C 06 
16962     0D 0D 0D 0E 
16966     10 10 12 0F 
1696a     11 13 14 1A | 	byte	$05, $0a, $0c, $06, $0d, $0d, $0d, $0e, $10, $10, $12, $0f, $11, $13, $14, $1a
1696e     14 18 10 18 
16972     18 20 1A 1D 
16976     1C 1B 18 1E 
1697a     1F 1E 1F 1C | 	byte	$14, $18, $10, $18, $18, $20, $1a, $1d, $1c, $1b, $18, $1e, $1f, $1e, $1f, $1c
1697e     22 22 20 20 
16982     1E 23 26 28 
16986     25 21 23 24 
1698a     28 26 29 2B | 	byte	$22, $22, $20, $20, $1e, $23, $26, $28, $25, $21, $23, $24, $28, $26, $29, $2b
1698e     27 20 2B 2B 
16992     2B 29 28 2D 
16996     2B 2B 2A 25 
1699a     2E 29 2D 30 | 	byte	$27, $20, $2b, $2b, $2b, $29, $28, $2d, $2b, $2b, $2a, $25, $2e, $29, $2d, $30
1699e     2E 2C 29 2B 
169a2     2C 2A 2D 2D 
169a6     2A 2D 2C 26 
169aa     28 26 2B 2A | 	byte	$2e, $2c, $29, $2b, $2c, $2a, $2d, $2d, $2a, $2d, $2c, $26, $28, $26, $2b, $2a
169ae     2B 25 25 2B 
169b2     25 24 1E 23 
169b6     25 24 23 20 
169ba     20 1D 1E 22 | 	byte	$2b, $25, $25, $2b, $25, $24, $1e, $23, $25, $24, $23, $20, $20, $1d, $1e, $22
169be     1E 1D 1C 16 
169c2     18 17 18 17 
169c6     19 14 15 11 
169ca     0E 13 11 12 | 	byte	$1e, $1d, $1c, $16, $18, $17, $18, $17, $19, $14, $15, $11, $0e, $13, $11, $12
169ce     12 0B 0E 08 
169d2     09 0D 0E 0E 
169d6     06 07 04 09 
169da     0B 02 00 01 | 	byte	$12, $0b, $0e, $08, $09, $0d, $0e, $0e, $06, $07, $04, $09, $0b, $02, $00, $01
169de     07 04 01 03 
169e2     FC 01 FC FB 
169e6     F9 FD F9 FD 
169ea     FA FA F8 F6 | 	byte	$07, $04, $01, $03, $fc, $01, $fc, $fb, $f9, $fd, $f9, $fd, $fa, $fa, $f8, $f6
169ee     F5 F5 FC F9 
169f2     F6 F4 F3 F9 
169f6     FB FC F8 F6 
169fa     F7 F7 FA FA | 	byte	$f5, $f5, $fc, $f9, $f6, $f4, $f3, $f9, $fb, $fc, $f8, $f6, $f7, $f7, $fa, $fa
169fe     F8 F6 FC F8 
16a02     F7 F8 F9 FB 
16a06     FA FA F5 F7 
16a0a     FA FB F8 F8 | 	byte	$f8, $f6, $fc, $f8, $f7, $f8, $f9, $fb, $fa, $fa, $f5, $f7, $fa, $fb, $f8, $f8
16a0e     F8 F8 01 FE 
16a12     F9 F9 F9 F8 
16a16     FD FA FA FA 
16a1a     FE F7 00 FA | 	byte	$f8, $f8, $01, $fe, $f9, $f9, $f9, $f8, $fd, $fa, $fa, $fa, $fe, $f7, $00, $fa
16a1e     FC F5 F9 FA 
16a22     FB 02 FB FA 
16a26     FD FA FB FB 
16a2a     FB FD FF 02 | 	byte	$fc, $f5, $f9, $fa, $fb, $02, $fb, $fa, $fd, $fa, $fb, $fb, $fb, $fd, $ff, $02
16a2e     01 00 FB F9 
16a32     03 08 02 03 
16a36     FB 04 01 05 
16a3a     06 03 05 04 | 	byte	$01, $00, $fb, $f9, $03, $08, $02, $03, $fb, $04, $01, $05, $06, $03, $05, $04
16a3e     06 09 04 04 
16a42     03 07 09 06 
16a46     04 06 06 07 
16a4a     04 07 09 09 | 	byte	$06, $09, $04, $04, $03, $07, $09, $06, $04, $06, $06, $07, $04, $07, $09, $09
16a4e     05 03 0D 08 
16a52     06 05 07 0B 
16a56     08 09 07 08 
16a5a     06 08 03 09 | 	byte	$05, $03, $0d, $08, $06, $05, $07, $0b, $08, $09, $07, $08, $06, $08, $03, $09
16a5e     0A 0A 08 05 
16a62     03 05 0A 0A 
16a66     08 0B 0A 04 
16a6a     03 04 05 0A | 	byte	$0a, $0a, $08, $05, $03, $05, $0a, $0a, $08, $0b, $0a, $04, $03, $04, $05, $0a
16a6e     09 09 02 02 
16a72     03 03 07 08 
16a76     08 00 F7 05 
16a7a     0D 03 FC FC | 	byte	$09, $09, $02, $02, $03, $03, $07, $08, $08, $00, $f7, $05, $0d, $03, $fc, $fc
16a7e     07 02 00 FD 
16a82     00 07 00 FC 
16a86     FD 04 FD F9 
16a8a     FD 02 00 FB | 	byte	$07, $02, $00, $fd, $00, $07, $00, $fc, $fd, $04, $fd, $f9, $fd, $02, $00, $fb
16a8e     FB FD 00 00 
16a92     FB FC 01 00 
16a96     FA FD FD FC 
16a9a     00 F9 FD 00 | 	byte	$fb, $fd, $00, $00, $fb, $fc, $01, $00, $fa, $fd, $fd, $fc, $00, $f9, $fd, $00
16a9e     FB FD FC FA 
16aa2     02 FB FC F7 
16aa6     FA 00 FD F8 
16aaa     F8 F9 FE FA | 	byte	$fb, $fd, $fc, $fa, $02, $fb, $fc, $f7, $fa, $00, $fd, $f8, $f8, $f9, $fe, $fa
16aae     F7 F7 F9 FC 
16ab2     F6 FB F9 FD 
16ab6     F8 FA F4 F6 
16aba     F9 FA FA FC | 	byte	$f7, $f7, $f9, $fc, $f6, $fb, $f9, $fd, $f8, $fa, $f4, $f6, $f9, $fa, $fa, $fc
16abe     FA F9 F8 FC 
16ac2     FB F8 FD 01 
16ac6     FD FA FD FF 
16aca     08 FC 01 FD | 	byte	$fa, $f9, $f8, $fc, $fb, $f8, $fd, $01, $fd, $fa, $fd, $ff, $08, $fc, $01, $fd
16ace     06 06 07 01 
16ad2     02 09 0A 0B 
16ad6     08 04 07 0E 
16ada     10 0D 0C 0C | 	byte	$06, $06, $07, $01, $02, $09, $0a, $0b, $08, $04, $07, $0e, $10, $0d, $0c, $0c
16ade     0E 11 12 14 
16ae2     15 15 12 15 
16ae6     15 19 1A 18 
16aea     18 16 1C 1E | 	byte	$0e, $11, $12, $14, $15, $15, $12, $15, $15, $19, $1a, $18, $18, $16, $1c, $1e
16aee     20 1F 1D 1B 
16af2     20 1F 22 20 
16af6     25 22 21 25 
16afa     28 28 29 29 | 	byte	$20, $1f, $1d, $1b, $20, $1f, $22, $20, $25, $22, $21, $25, $28, $28, $29, $29
16afe     26 27 25 2E 
16b02     2C 28 2B 2D 
16b06     2D 2A 29 2E 
16b0a     2E 30 2C 2A | 	byte	$26, $27, $25, $2e, $2c, $28, $2b, $2d, $2d, $2a, $29, $2e, $2e, $30, $2c, $2a
16b0e     34 2E 2D 2E 
16b12     2E 2E 2B 31 
16b16     2D 2D 30 2D 
16b1a     2F 2E 2E 29 | 	byte	$34, $2e, $2d, $2e, $2e, $2e, $2b, $31, $2d, $2d, $30, $2d, $2f, $2e, $2e, $29
16b1e     2A 2B 2B 31 
16b22     2F 2C 28 26 
16b26     29 2C 2A 2A 
16b2a     29 27 25 26 | 	byte	$2a, $2b, $2b, $31, $2f, $2c, $28, $26, $29, $2c, $2a, $2a, $29, $27, $25, $26
16b2e     25 26 23 20 
16b32     24 25 22 1D 
16b36     1B 1A 1B 1E 
16b3a     20 1E 19 15 | 	byte	$25, $26, $23, $20, $24, $25, $22, $1d, $1b, $1a, $1b, $1e, $20, $1e, $19, $15
16b3e     13 15 17 19 
16b42     15 12 10 11 
16b46     11 14 13 0C 
16b4a     09 09 0C 10 | 	byte	$13, $15, $17, $19, $15, $12, $10, $11, $11, $14, $13, $0c, $09, $09, $0c, $10
16b4e     0B 08 04 0A 
16b52     09 05 FE 04 
16b56     05 01 03 00 
16b5a     00 FD FC FD | 	byte	$0b, $08, $04, $0a, $09, $05, $fe, $04, $05, $01, $03, $00, $00, $fd, $fc, $fd
16b5e     FA F9 F3 F5 
16b62     F9 FB F8 F0 
16b66     EE F3 F2 F5 
16b6a     F3 EF F0 EE | 	byte	$fa, $f9, $f3, $f5, $f9, $fb, $f8, $f0, $ee, $f3, $f2, $f5, $f3, $ef, $f0, $ee
16b6e     F0 EF EE EA 
16b72     E3 EB ED F3 
16b76     E8 E9 E7 E9 
16b7a     E8 E4 E5 E8 | 	byte	$f0, $ef, $ee, $ea, $e3, $eb, $ed, $f3, $e8, $e9, $e7, $e9, $e8, $e4, $e5, $e8
16b7e     EA E4 E4 E7 
16b82     E2 E2 E5 E7 
16b86     E4 E5 E4 E5 
16b8a     E5 E1 E0 E2 | 	byte	$ea, $e4, $e4, $e7, $e2, $e2, $e5, $e7, $e4, $e5, $e4, $e5, $e5, $e1, $e0, $e2
16b8e     E1 E5 E7 E6 
16b92     E3 E1 E3 E6 
16b96     E4 E5 E1 E3 
16b9a     E6 E8 E7 E6 | 	byte	$e1, $e5, $e7, $e6, $e3, $e1, $e3, $e6, $e4, $e5, $e1, $e3, $e6, $e8, $e7, $e6
16b9e     E2 E5 E6 EA 
16ba2     E9 E8 E4 DF 
16ba6     E7 E9 E8 EA 
16baa     EA E7 E6 EA | 	byte	$e2, $e5, $e6, $ea, $e9, $e8, $e4, $df, $e7, $e9, $e8, $ea, $ea, $e7, $e6, $ea
16bae     EB EB EA EE 
16bb2     EE EF EC EC 
16bb6     EE F0 F2 F0 
16bba     F3 F2 F4 F7 | 	byte	$eb, $eb, $ea, $ee, $ee, $ef, $ec, $ec, $ee, $f0, $f2, $f0, $f3, $f2, $f4, $f7
16bbe     F8 F5 F8 FB 
16bc2     FC 00 FD FC 
16bc6     FC 05 04 08 
16bca     07 07 08 07 | 	byte	$f8, $f5, $f8, $fb, $fc, $00, $fd, $fc, $fc, $05, $04, $08, $07, $07, $08, $07
16bce     0B 0A 08 0C 
16bd2     0D 13 10 12 
16bd6     10 0D 13 17 
16bda     1A 16 14 15 | 	byte	$0b, $0a, $08, $0c, $0d, $13, $10, $12, $10, $0d, $13, $17, $1a, $16, $14, $15
16bde     1B 1D 1D 19 
16be2     1A 1D 1D 23 
16be6     24 21 1B 20 
16bea     26 26 27 25 | 	byte	$1b, $1d, $1d, $19, $1a, $1d, $1d, $23, $24, $21, $1b, $20, $26, $26, $27, $25
16bee     27 28 25 25 
16bf2     2A 2D 2D 2E 
16bf6     2B 2A 2B 2A 
16bfa     2D 2F 30 2D | 	byte	$27, $28, $25, $25, $2a, $2d, $2d, $2e, $2b, $2a, $2b, $2a, $2d, $2f, $30, $2d
16bfe     2D 2D 30 30 
16c02     2E 2D 30 30 
16c06     31 2E 2E 2E 
16c0a     2F 32 31 2D | 	byte	$2d, $2d, $30, $30, $2e, $2d, $30, $30, $31, $2e, $2e, $2e, $2f, $32, $31, $2d
16c0e     2C 2F 33 32 
16c12     31 2E 30 2E 
16c16     31 31 30 33 
16c1a     2E 2D 2F 31 | 	byte	$2c, $2f, $33, $32, $31, $2e, $30, $2e, $31, $31, $30, $33, $2e, $2d, $2f, $31
16c1e     30 2B 2B 2B 
16c22     2C 2F 2E 2E 
16c26     2C 29 29 2D 
16c2a     28 25 28 2C | 	byte	$30, $2b, $2b, $2b, $2c, $2f, $2e, $2e, $2c, $29, $29, $2d, $28, $25, $28, $2c
16c2e     27 25 23 23 
16c32     22 21 24 22 
16c36     20 20 1D 1F 
16c3a     1C 1D 1C 1A | 	byte	$27, $25, $23, $23, $22, $21, $24, $22, $20, $20, $1d, $1f, $1c, $1d, $1c, $1a
16c3e     1A 1D 1A 18 
16c42     16 1A 18 16 
16c46     10 15 17 13 
16c4a     14 12 11 10 | 	byte	$1a, $1d, $1a, $18, $16, $1a, $18, $16, $10, $15, $17, $13, $14, $12, $11, $10
16c4e     12 11 0E 0D 
16c52     0C 0A 09 0C 
16c56     0D 0C 08 08 
16c5a     09 07 05 02 | 	byte	$12, $11, $0e, $0d, $0c, $0a, $09, $0c, $0d, $0c, $08, $08, $09, $07, $05, $02
16c5e     03 06 07 06 
16c62     FC 00 00 02 
16c66     01 02 02 02 
16c6a     FD FA FB 01 | 	byte	$03, $06, $07, $06, $fc, $00, $00, $02, $01, $02, $02, $02, $fd, $fa, $fb, $01
16c6e     FC FD 00 01 
16c72     FA FB F8 FB 
16c76     FA FA FB F9 
16c7a     F7 F8 FB F9 | 	byte	$fc, $fd, $00, $01, $fa, $fb, $f8, $fb, $fa, $fa, $fb, $f9, $f7, $f8, $fb, $f9
16c7e     F7 F4 F7 FB 
16c82     F9 F6 F5 F6 
16c86     F6 F5 F6 F5 
16c8a     F3 F2 F5 F4 | 	byte	$f7, $f4, $f7, $fb, $f9, $f6, $f5, $f6, $f6, $f5, $f6, $f5, $f3, $f2, $f5, $f4
16c8e     F4 F1 F3 F5 
16c92     F3 EF EF F1 
16c96     F4 F1 F2 EF 
16c9a     EE F0 F2 EF | 	byte	$f4, $f1, $f3, $f5, $f3, $ef, $ef, $f1, $f4, $f1, $f2, $ef, $ee, $f0, $f2, $ef
16c9e     EF EF EE ED 
16ca2     ED EF F1 EF 
16ca6     EC EB EA EE 
16caa     EF EE EF EE | 	byte	$ef, $ef, $ee, $ed, $ed, $ef, $f1, $ef, $ec, $eb, $ea, $ee, $ef, $ee, $ef, $ee
16cae     F0 EE ED ED 
16cb2     EF EE EF EF 
16cb6     F1 F1 F0 F0 
16cba     EF F1 F1 F2 | 	byte	$f0, $ee, $ed, $ed, $ef, $ee, $ef, $ef, $f1, $f1, $f0, $f0, $ef, $f1, $f1, $f2
16cbe     F1 F2 F1 F1 
16cc2     F1 F1 F2 F2 
16cc6     F0 F2 F3 F3 
16cca     F3 F3 F1 F4 | 	byte	$f1, $f2, $f1, $f1, $f1, $f1, $f2, $f2, $f0, $f2, $f3, $f3, $f3, $f3, $f1, $f4
16cce     F5 F6 F6 F3 
16cd2     F4 F6 F8 F7 
16cd6     F5 F5 F9 FB 
16cda     F9 F8 F7 F8 | 	byte	$f5, $f6, $f6, $f3, $f4, $f6, $f8, $f7, $f5, $f5, $f9, $fb, $f9, $f8, $f7, $f8
16cde     FC 01 FC FB 
16ce2     F9 FA 00 01 
16ce6     03 02 03 01 
16cea     04 03 03 05 | 	byte	$fc, $01, $fc, $fb, $f9, $fa, $00, $01, $03, $02, $03, $01, $04, $03, $03, $05
16cee     03 07 0A 09 
16cf2     05 05 06 09 
16cf6     09 0A 0C 0B 
16cfa     0A 09 0C 0E | 	byte	$03, $07, $0a, $09, $05, $05, $06, $09, $09, $0a, $0c, $0b, $0a, $09, $0c, $0e
16cfe     0C 0C 0C 0C 
16d02     0D 0F 12 10 
16d06     11 10 10 12 
16d0a     15 16 16 13 | 	byte	$0c, $0c, $0c, $0c, $0d, $0f, $12, $10, $11, $10, $10, $12, $15, $16, $16, $13
16d0e     13 15 18 17 
16d12     18 19 1B 1A 
16d16     19 19 1B 1A 
16d1a     1D 1D 20 20 | 	byte	$13, $15, $18, $17, $18, $19, $1b, $1a, $19, $19, $1b, $1a, $1d, $1d, $20, $20
16d1e     1C 18 1B 21 
16d22     23 22 1D 1C 
16d26     1E 23 25 23 
16d2a     22 20 21 22 | 	byte	$1c, $18, $1b, $21, $23, $22, $1d, $1c, $1e, $23, $25, $23, $22, $20, $21, $22
16d2e     21 23 24 25 
16d32     23 23 24 24 
16d36     23 23 27 29 
16d3a     26 22 23 27 | 	byte	$21, $23, $24, $25, $23, $23, $24, $24, $23, $23, $27, $29, $26, $22, $23, $27
16d3e     27 25 26 24 
16d42     27 27 28 26 
16d46     25 25 24 26 
16d4a     28 27 22 1F | 	byte	$27, $25, $26, $24, $27, $27, $28, $26, $25, $25, $24, $26, $28, $27, $22, $1f
16d4e     24 27 26 22 
16d52     20 21 23 22 
16d56     23 21 21 21 
16d5a     20 20 1E 1C | 	byte	$24, $27, $26, $22, $20, $21, $23, $22, $23, $21, $21, $21, $20, $20, $1e, $1c
16d5e     1F 20 20 1F 
16d62     1D 1C 19 1C 
16d66     1D 1C 1C 1A 
16d6a     19 19 1B 19 | 	byte	$1f, $20, $20, $1f, $1d, $1c, $19, $1c, $1d, $1c, $1c, $1a, $19, $19, $1b, $19
16d6e     18 17 17 18 
16d72     19 19 18 16 
16d76     17 17 19 14 
16d7a     11 13 14 17 | 	byte	$18, $17, $17, $18, $19, $19, $18, $16, $17, $17, $19, $14, $11, $13, $14, $17
16d7e     14 13 13 10 
16d82     10 0F 14 12 
16d86     10 0E 0C 0E 
16d8a     12 10 0B 0B | 	byte	$14, $13, $13, $10, $10, $0f, $14, $12, $10, $0e, $0c, $0e, $12, $10, $0b, $0b
16d8e     0A 09 0B 0A 
16d92     09 07 07 06 
16d96     05 06 05 04 
16d9a     02 03 03 00 | 	byte	$0a, $09, $0b, $0a, $09, $07, $07, $06, $05, $06, $05, $04, $02, $03, $03, $00
16d9e     FD 00 FB FD 
16da2     FC FA FB FC 
16da6     FA F5 F5 F7 
16daa     F9 F7 F6 F6 | 	byte	$fd, $00, $fb, $fd, $fc, $fa, $fb, $fc, $fa, $f5, $f5, $f7, $f9, $f7, $f6, $f6
16dae     F5 F3 F3 F2 
16db2     F4 F1 EF F0 
16db6     F0 F0 EE EF 
16dba     EF EE EC EB | 	byte	$f5, $f3, $f3, $f2, $f4, $f1, $ef, $f0, $f0, $f0, $ee, $ef, $ef, $ee, $ec, $eb
16dbe     ED ED EE EA 
16dc2     E7 E9 EC EC 
16dc6     EA EA E8 E8 
16dca     E8 EA E9 E8 | 	byte	$ed, $ed, $ee, $ea, $e7, $e9, $ec, $ec, $ea, $ea, $e8, $e8, $e8, $ea, $e9, $e8
16dce     E8 E9 E9 E9 
16dd2     E8 E7 E7 E8 
16dd6     E8 EA EA E9 
16dda     E9 E9 EB EB | 	byte	$e8, $e9, $e9, $e9, $e8, $e7, $e7, $e8, $e8, $ea, $ea, $e9, $e9, $e9, $eb, $eb
16dde     EA E9 EA EC 
16de2     EB EA EC EC 
16de6     EE ED ED EC 
16dea     EC ED ED F0 | 	byte	$ea, $e9, $ea, $ec, $eb, $ea, $ec, $ec, $ee, $ed, $ed, $ec, $ec, $ed, $ed, $f0
16dee     F1 F0 EE EC 
16df2     EF F2 F3 F3 
16df6     F0 EF EF F3 
16dfa     F3 F4 F5 F4 | 	byte	$f1, $f0, $ee, $ec, $ef, $f2, $f3, $f3, $f0, $ef, $ef, $f3, $f3, $f4, $f5, $f4
16dfe     F3 F6 F8 F5 
16e02     F5 F3 F6 F8 
16e06     FA F9 F8 F8 
16e0a     F8 F9 FA FA | 	byte	$f3, $f6, $f8, $f5, $f5, $f3, $f6, $f8, $fa, $f9, $f8, $f8, $f8, $f9, $fa, $fa
16e0e     FB FD FD FC 
16e12     FB FD FD FC 
16e16     00 02 03 04 
16e1a     03 04 05 03 | 	byte	$fb, $fd, $fd, $fc, $fb, $fd, $fd, $fc, $00, $02, $03, $04, $03, $04, $05, $03
16e1e     04 06 09 0A 
16e22     08 08 08 0B 
16e26     0B 0C 0E 0E 
16e2a     0E 0E 0E 11 | 	byte	$04, $06, $09, $0a, $08, $08, $08, $0b, $0b, $0c, $0e, $0e, $0e, $0e, $0e, $11
16e2e     11 11 11 11 
16e32     13 14 15 15 
16e36     16 15 17 18 
16e3a     18 19 19 1A | 	byte	$11, $11, $11, $11, $13, $14, $15, $15, $16, $15, $17, $18, $18, $19, $19, $1a
16e3e     1B 1C 1B 1C 
16e42     1D 1E 1D 1D 
16e46     1D 1E 1C 1F 
16e4a     22 22 20 1F | 	byte	$1b, $1c, $1b, $1c, $1d, $1e, $1d, $1d, $1d, $1e, $1c, $1f, $22, $22, $20, $1f
16e4e     20 20 20 23 
16e52     25 25 22 23 
16e56     20 22 25 26 
16e5a     25 24 23 22 | 	byte	$20, $20, $20, $23, $25, $25, $22, $23, $20, $22, $25, $26, $25, $24, $23, $22
16e5e     23 25 26 26 
16e62     22 23 22 26 
16e66     23 23 25 23 
16e6a     22 23 25 23 | 	byte	$23, $25, $26, $26, $22, $23, $22, $26, $23, $23, $25, $23, $22, $23, $25, $23
16e6e     22 21 21 22 
16e72     24 24 24 21 
16e76     1E 1F 21 22 
16e7a     21 20 21 20 | 	byte	$22, $21, $21, $22, $24, $24, $24, $21, $1e, $1f, $21, $22, $21, $20, $21, $20
16e7e     1E 1D 1E 1D 
16e82     1E 1E 1E 20 
16e86     1E 1B 1A 1A 
16e8a     18 19 1A 1B | 	byte	$1e, $1d, $1e, $1d, $1e, $1e, $1e, $20, $1e, $1b, $1a, $1a, $18, $19, $1a, $1b
16e8e     19 16 18 18 
16e92     18 18 16 16 
16e96     13 15 13 13 
16e9a     13 13 15 14 | 	byte	$19, $16, $18, $18, $18, $18, $16, $16, $13, $15, $13, $13, $13, $13, $15, $14
16e9e     13 0E 0E 10 
16ea2     12 11 0F 0D 
16ea6     0D 0E 0C 09 
16eaa     0A 0B 0C 09 | 	byte	$13, $0e, $0e, $10, $12, $11, $0f, $0d, $0d, $0e, $0c, $09, $0a, $0b, $0c, $09
16eae     08 08 09 07 
16eb2     07 08 08 03 
16eb6     02 03 04 06 
16eba     04 01 00 00 | 	byte	$08, $08, $09, $07, $07, $08, $08, $03, $02, $03, $04, $06, $04, $01, $00, $00
16ebe     FE 00 FC FC 
16ec2     FD FB FB F9 
16ec6     FB F9 F8 F7 
16eca     F7 F8 F8 F7 | 	byte	$fe, $00, $fc, $fc, $fd, $fb, $fb, $f9, $fb, $f9, $f8, $f7, $f7, $f8, $f8, $f7
16ece     F6 F6 F5 F4 
16ed2     F5 F5 F5 F2 
16ed6     F4 F3 F3 F2 
16eda     F0 EF F2 F2 | 	byte	$f6, $f6, $f5, $f4, $f5, $f5, $f5, $f2, $f4, $f3, $f3, $f2, $f0, $ef, $f2, $f2
16ede     F0 EE F0 F0 
16ee2     EE EF EE ED 
16ee6     EB ED F0 EE 
16eea     EC EC ED ED | 	byte	$f0, $ee, $f0, $f0, $ee, $ef, $ee, $ed, $eb, $ed, $f0, $ee, $ec, $ec, $ed, $ed
16eee     EC ED ED EC 
16ef2     EE ED EF ED 
16ef6     ED EE EE EF 
16efa     EC EE EF F1 | 	byte	$ec, $ed, $ed, $ec, $ee, $ed, $ef, $ed, $ed, $ee, $ee, $ef, $ec, $ee, $ef, $f1
16efe     F0 F1 EF EF 
16f02     F1 F2 F0 F1 
16f06     F0 F1 F2 F2 
16f0a     F1 F1 F3 F2 | 	byte	$f0, $f1, $ef, $ef, $f1, $f2, $f0, $f1, $f0, $f1, $f2, $f2, $f1, $f1, $f3, $f2
16f0e     F5 F6 F3 F2 
16f12     F4 F5 F5 F5 
16f16     F6 F7 F6 F7 
16f1a     F6 F8 FA FB | 	byte	$f5, $f6, $f3, $f2, $f4, $f5, $f5, $f5, $f6, $f7, $f6, $f7, $f6, $f8, $fa, $fb
16f1e     FA F7 F9 FA 
16f22     FB FA FD FC 
16f26     FD 00 FC FD 
16f2a     FD FC 00 01 | 	byte	$fa, $f7, $f9, $fa, $fb, $fa, $fd, $fc, $fd, $00, $fc, $fd, $fd, $fc, $00, $01
16f2e     01 03 03 03 
16f32     04 02 03 03 
16f36     05 06 05 06 
16f3a     09 08 06 06 | 	byte	$01, $03, $03, $03, $04, $02, $03, $03, $05, $06, $05, $06, $09, $08, $06, $06
16f3e     08 09 0D 0B 
16f42     09 08 0A 0B 
16f46     0D 0D 0D 0D 
16f4a     0C 0C 0D 10 | 	byte	$08, $09, $0d, $0b, $09, $08, $0a, $0b, $0d, $0d, $0d, $0d, $0c, $0c, $0d, $10
16f4e     0F 11 0F 0F 
16f52     12 12 13 12 
16f56     14 13 14 15 
16f5a     16 17 16 15 | 	byte	$0f, $11, $0f, $0f, $12, $12, $13, $12, $14, $13, $14, $15, $16, $17, $16, $15
16f5e     18 19 18 19 
16f62     17 1A 1A 19 
16f66     18 1B 1B 1A 
16f6a     18 19 19 1C | 	byte	$18, $19, $18, $19, $17, $1a, $1a, $19, $18, $1b, $1b, $1a, $18, $19, $19, $1c
16f6e     1A 1A 19 1C 
16f72     1B 1D 1B 19 
16f76     1A 1A 1B 1A 
16f7a     1C 1D 1D 1C | 	byte	$1a, $1a, $19, $1c, $1b, $1d, $1b, $19, $1a, $1a, $1b, $1a, $1c, $1d, $1d, $1c
16f7e     1C 1A 1A 1B 
16f82     1D 1D 1D 1B 
16f86     1B 1A 1C 1B 
16f8a     1C 1A 1D 1C | 	byte	$1c, $1a, $1a, $1b, $1d, $1d, $1d, $1b, $1b, $1a, $1c, $1b, $1c, $1a, $1d, $1c
16f8e     1A 19 19 1B 
16f92     1A 1B 19 1D 
16f96     1C 18 18 17 
16f9a     19 1B 1B 1A | 	byte	$1a, $19, $19, $1b, $1a, $1b, $19, $1d, $1c, $18, $18, $17, $19, $1b, $1b, $1a
16f9e     18 1A 18 17 
16fa2     18 18 18 18 
16fa6     18 19 16 15 
16faa     16 19 19 18 | 	byte	$18, $1a, $18, $17, $18, $18, $18, $18, $18, $19, $16, $15, $16, $19, $19, $18
16fae     16 14 16 16 
16fb2     16 15 16 16 
16fb6     15 15 15 15 
16fba     14 11 13 12 | 	byte	$16, $14, $16, $16, $16, $15, $16, $16, $15, $15, $15, $15, $14, $11, $13, $12
16fbe     13 12 12 11 
16fc2     0F 10 10 12 
16fc6     12 0D 0C 0E 
16fca     0E 0E 0E 0E | 	byte	$13, $12, $12, $11, $0f, $10, $10, $12, $12, $0d, $0c, $0e, $0e, $0e, $0e, $0e
16fce     0D 0B 0B 0A 
16fd2     0B 0A 0B 0B 
16fd6     0A 0A 08 07 
16fda     06 07 08 06 | 	byte	$0d, $0b, $0b, $0a, $0b, $0a, $0b, $0b, $0a, $0a, $08, $07, $06, $07, $08, $06
16fde     05 05 05 04 
16fe2     05 02 04 03 
16fe6     01 02 02 04 
16fea     03 01 01 FD | 	byte	$05, $05, $05, $04, $05, $02, $04, $03, $01, $02, $02, $04, $03, $01, $01, $fd
16fee     00 FD 02 00 
16ff2     01 FE FA FB 
16ff6     FC 01 FC FC 
16ffa     FB FB FC FA | 	byte	$00, $fd, $02, $00, $01, $fe, $fa, $fb, $fc, $01, $fc, $fc, $fb, $fb, $fc, $fa
16ffe     FC FB FC FB 
17002     FA FB F9 FB 
17006     FA F8 FA FA 
1700a     FA FA F9 F9 | 	byte	$fc, $fb, $fc, $fb, $fa, $fb, $f9, $fb, $fa, $f8, $fa, $fa, $fa, $fa, $f9, $f9
1700e     F8 F8 F9 F9 
17012     FA FA F9 F8 
17016     F9 F9 FB FA 
1701a     FB F8 F9 F9 | 	byte	$f8, $f8, $f9, $f9, $fa, $fa, $f9, $f8, $f9, $f9, $fb, $fa, $fb, $f8, $f9, $f9
1701e     F9 FB FB FA 
17022     F9 F8 F9 FB 
17026     FB F9 F8 F8 
1702a     F9 FB F9 FC | 	byte	$f9, $fb, $fb, $fa, $f9, $f8, $f9, $fb, $fb, $f9, $f8, $f8, $f9, $fb, $f9, $fc
1702e     FC F9 F8 F8 
17032     FA FA F9 FA 
17036     F9 FB FB FB 
1703a     FB F9 FA FB | 	byte	$fc, $f9, $f8, $f8, $fa, $fa, $f9, $fa, $f9, $fb, $fb, $fb, $fb, $f9, $fa, $fb
1703e     FC FB 00 FD 
17042     FC FD 00 01 
17046     01 00 01 02 
1704a     05 05 05 04 | 	byte	$fc, $fb, $00, $fd, $fc, $fd, $00, $01, $01, $00, $01, $02, $05, $05, $05, $04
1704e     02 06 07 07 
17052     06 06 09 07 
17056     09 09 09 09 
1705a     0A 08 09 08 | 	byte	$02, $06, $07, $07, $06, $06, $09, $07, $09, $09, $09, $09, $0a, $08, $09, $08
1705e     0B 0B 0A 0C 
17062     0B 0B 0B 0B 
17066     0C 0C 0B 0B 
1706a     0A 0C 0D 0A | 	byte	$0b, $0b, $0a, $0c, $0b, $0b, $0b, $0b, $0c, $0c, $0b, $0b, $0a, $0c, $0d, $0a
1706e     0C 0A 0E 0C 
17072     0B 0A 0B 0B 
17076     0B 0C 0C 0C 
1707a     0B 0B 0C 0C | 	byte	$0c, $0a, $0e, $0c, $0b, $0a, $0b, $0b, $0b, $0c, $0c, $0c, $0b, $0b, $0c, $0c
1707e     0B 09 0B 0C 
17082     0C 0B 0A 0A 
17086     0B 0B 0C 09 
1708a     09 0A 0B 0C | 	byte	$0b, $09, $0b, $0c, $0c, $0b, $0a, $0a, $0b, $0b, $0c, $09, $09, $0a, $0b, $0c
1708e     0E 0C 0D 0D 
17092     0C 0C 0B 0D 
17096     0D 0E 0F 0D 
1709a     0E 0C 0D 0E | 	byte	$0e, $0c, $0d, $0d, $0c, $0c, $0b, $0d, $0d, $0e, $0f, $0d, $0e, $0c, $0d, $0e
1709e     0F 0E 11 0E 
170a2     0E 0E 0E 0F 
170a6     10 0F 10 10 
170aa     10 0F 10 13 | 	byte	$0f, $0e, $11, $0e, $0e, $0e, $0e, $0f, $10, $0f, $10, $10, $10, $0f, $10, $13
170ae     12 11 11 11 
170b2     13 11 11 13 
170b6     14 12 13 13 
170ba     14 14 13 14 | 	byte	$12, $11, $11, $11, $13, $11, $11, $13, $14, $12, $13, $13, $14, $14, $13, $14
170be     15 14 13 14 
170c2     14 15 16 16 
170c6     16 14 14 15 
170ca     17 17 16 16 | 	byte	$15, $14, $13, $14, $14, $15, $16, $16, $16, $14, $14, $15, $17, $17, $16, $16
170ce     16 16 18 1A 
170d2     1A 19 17 18 
170d6     18 17 19 1A 
170da     1A 1A 18 18 | 	byte	$16, $16, $18, $1a, $1a, $19, $17, $18, $18, $17, $19, $1a, $1a, $1a, $18, $18
170de     00 00 00 00 
170e2     00 00 00 00 | 	byte	$00[8]
170e6     05 05 00 FF 
170ea     00 00 00 00 
170ee     00 00 00 00 
170f2     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
170f6     00 00 00 00 
      ...             
1711a     00 00 00 00 
1711e     00 00       | 	byte	$00[42]
17120     07 0A 0D 0C 
17124     09 09 08 0C 
17128     0B 0C 0C 09 
1712c     09 0A 0B 0B | 	byte	$07, $0a, $0d, $0c, $09, $09, $08, $0c, $0b, $0c, $0c, $09, $09, $0a, $0b, $0b
17130     0C 0A 0C F8 
17134     17 10 FF 10 
17138     DF 20 38 C0 
1713c     0F 47 E2 10 | 	byte	$0c, $0a, $0c, $f8, $17, $10, $ff, $10, $df, $20, $38, $c0, $0f, $47, $e2, $10
17140     DF 24 3F E0 
17144     CF 4F 40 EB 
17148     B0 3F 38 F0 
1714c     EB 32 FF 00 | 	byte	$df, $24, $3f, $e0, $cf, $4f, $40, $eb, $b0, $3f, $38, $f0, $eb, $32, $ff, $00
17150     F7 FF 2B 28 
17154     F0 D7 3B 10 
17158     F4 EF 1C 47 
1715c     E8 EF 00 17 | 	byte	$f7, $ff, $2b, $28, $f0, $d7, $3b, $10, $f4, $ef, $1c, $47, $e8, $ef, $00, $17
17160     15 30 00 DF 
17164     04 FF 48 DF 
17168     00 DF 58 F0 
1716c     EA 1F E8 3F | 	byte	$15, $30, $00, $df, $04, $ff, $48, $df, $00, $df, $58, $f0, $ea, $1f, $e8, $3f
17170     F0 F0 1F 00 
17174     1F E0 2F 00 
17178     FF 00 37 10 
1717c     CF F8 3F 28 | 	byte	$f0, $f0, $1f, $00, $1f, $e0, $2f, $00, $ff, $00, $37, $10, $cf, $f8, $3f, $28
17180     D3 0E FF 18 
17184     1E E3 1F 20 
17188     02 EB 04 3F 
1718c     00 EC FB 2B | 	byte	$d3, $0e, $ff, $18, $1e, $e3, $1f, $20, $02, $eb, $04, $3f, $00, $ec, $fb, $2b
17190     2F E8 FF 00 
17194     1F 00 1F 20 
17198     08 CF 2F 40 
1719c     F0 E0 F7 10 | 	byte	$2f, $e8, $ff, $00, $1f, $00, $1f, $20, $08, $cf, $2f, $40, $f0, $e0, $f7, $10
171a0     68 C0 FF 40 
171a4     25 D0 DF 4B 
171a8     20 C7 1F 38 
171ac     03 00 D7 FF | 	byte	$68, $c0, $ff, $40, $25, $d0, $df, $4b, $20, $c7, $1f, $38, $03, $00, $d7, $ff
171b0     4F 40 C8 D7 
171b4     30 28 C8 FF 
171b8     30 2A CF 20 
171bc     DF 08 3B 28 | 	byte	$4f, $40, $c8, $d7, $30, $28, $c8, $ff, $30, $2a, $cf, $20, $df, $08, $3b, $28
171c0     F0 DF 00 1F 
171c4     20 1F E0 FF 
171c8     38 E4 0F 1F 
171cc     E0 5F C8 EF | 	byte	$f0, $df, $00, $1f, $20, $1f, $e0, $ff, $38, $e4, $0f, $1f, $e0, $5f, $c8, $ef
171d0     20 19 0F F1 
171d4     18 DF 40 DF 
171d8     50 B7 10 DF 
171dc     7F C0 E0 F7 | 	byte	$20, $19, $0f, $f1, $18, $df, $40, $df, $50, $b7, $10, $df, $7f, $c0, $e0, $f7
171e0     4A 00 FF C3 
171e4     77 00 E4 CF 
171e8     1D 24 1F 20 
171ec     B7 28 3F E0 | 	byte	$4a, $00, $ff, $c3, $77, $00, $e4, $cf, $1d, $24, $1f, $20, $b7, $28, $3f, $e0
171f0     FA FF 40 C8 
171f4     27 F6 E4 7F 
171f8     00 E0 FF DC 
171fc     4F 00 18 BF | 	byte	$fa, $ff, $40, $c8, $27, $f6, $e4, $7f, $00, $e0, $ff, $dc, $4f, $00, $18, $bf
17200     58 D4 F8 FF 
17204     60 CF 08 DF 
17208     60 EB 00 0F 
1720c     C0 5F 07 10 | 	byte	$58, $d4, $f8, $ff, $60, $cf, $08, $df, $60, $eb, $00, $0f, $c0, $5f, $07, $10
17210     F7 D0 3F 00 
17214     FF 28 20 DF 
17218     10 EF 30 FF 
1721c     28 FF D0 DF | 	byte	$f7, $d0, $3f, $00, $ff, $28, $20, $df, $10, $ef, $30, $ff, $28, $ff, $d0, $df
17220     78 C0 FF 3A 
17224     00 10 CF 20 
17228     34 D7 F1 57 
1722c     E0 1F C0 3F | 	byte	$78, $c0, $ff, $3a, $00, $10, $cf, $20, $34, $d7, $f1, $57, $e0, $1f, $c0, $3f
17230     00 1F E0 2F 
17234     00 1F 00 FF 
17238     E0 57 20 E7 
1723c     D8 1F 00 F2 | 	byte	$00, $1f, $e0, $2f, $00, $1f, $00, $ff, $e0, $57, $20, $e7, $d8, $1f, $00, $f2
17240     37 D0 5F C0 
17244     37 C0 33 E3 
17248     5F 00 BF 1C 
1724c     3C CF 28 FF | 	byte	$37, $d0, $5f, $c0, $37, $c0, $33, $e3, $5f, $00, $bf, $1c, $3c, $cf, $28, $ff
17250     10 BF 3A EF 
17254     FB 78 A9 F0 
17258     FF 10 3F DA 
1725c     CF 5F E4 0F | 	byte	$10, $bf, $3a, $ef, $fb, $78, $a9, $f0, $ff, $10, $3f, $da, $cf, $5f, $e4, $0f
17260     CB 48 EF 0F 
17264     04 1F E0 DF 
17268     44 20 CB 48 
1726c     B7 0C 3F B9 | 	byte	$cb, $48, $ef, $0f, $04, $1f, $e0, $df, $44, $20, $cb, $48, $b7, $0c, $3f, $b9
17270     64 9F 70 DB 
17274     E0 3F C0 3F 
17278     10 10 EF 10 
1727c     DF 40 EF E5 | 	byte	$64, $9f, $70, $db, $e0, $3f, $c0, $3f, $10, $10, $ef, $10, $df, $40, $ef, $e5
17280     17 40 C7 40 
17284     EF E0 20 BF 
17288     7F C3 28 CF 
1728c     E8 7F C0 F7 | 	byte	$17, $40, $c7, $40, $ef, $e0, $20, $bf, $7f, $c3, $28, $cf, $e8, $7f, $c0, $f7
17290     28 00 FF C0 
17294     7F C0 1F D0 
17298     3F 00 FF 40 
1729c     BF 30 EF 10 | 	byte	$28, $00, $ff, $c0, $7f, $c0, $1f, $d0, $3f, $00, $ff, $40, $bf, $30, $ef, $10
172a0     28 A7 7C 92 
172a4     3F 07 00 EF 
172a8     17 00 FF ED 
172ac     72 00 81 3F | 	byte	$28, $a7, $7c, $92, $3f, $07, $00, $ef, $17, $00, $ff, $ed, $72, $00, $81, $3f
172b0     50 CF F8 3F 
172b4     B1 20 3C D7 
172b8     60 AF 00 2F 
172bc     00 3F D0 C7 | 	byte	$50, $cf, $f8, $3f, $b1, $20, $3c, $d7, $60, $af, $00, $2f, $00, $3f, $d0, $c7
172c0     77 D8 58 88 
172c4     1F 0F 40 DF 
172c8     17 00 CF 10 
172cc     2C EF 40 BF | 	byte	$77, $d8, $58, $88, $1f, $0f, $40, $df, $17, $00, $cf, $10, $2c, $ef, $40, $bf
172d0     20 FF 00 FF 
172d4     20 DF 48 BF 
172d8     20 BF 7C A0 
172dc     3F C8 5E A0 | 	byte	$20, $ff, $00, $ff, $20, $df, $48, $bf, $20, $bf, $7c, $a0, $3f, $c8, $5e, $a0
172e0     3F 00 FF EA 
172e4     0C FF 60 D7 
172e8     D8 08 F7 7E 
172ec     C0 CF 3F D0 | 	byte	$3f, $00, $ff, $ea, $0c, $ff, $60, $d7, $d8, $08, $f7, $7e, $c0, $cf, $3f, $d0
172f0     3F C2 44 E9 
172f4     0F E0 FF 00 
172f8     3F 00 EF 20 
172fc     DF 40 EF DF | 	byte	$3f, $c2, $44, $e9, $0f, $e0, $ff, $00, $3f, $00, $ef, $20, $df, $40, $ef, $df
17300     68 BF 00 FF 
17304     E0 4F E8 C0 
17308     5F 00 1F CC 
1730c     00 3F 00 FF | 	byte	$68, $bf, $00, $ff, $e0, $4f, $e8, $c0, $5f, $00, $1f, $cc, $00, $3f, $00, $ff
17310     00 1F E0 25 
17314     00 FF 20 CF 
17318     1B 30 CF 34 
1731c     EF D2 68 D7 | 	byte	$00, $1f, $e0, $25, $00, $ff, $20, $cf, $1b, $30, $cf, $34, $ef, $d2, $68, $d7
17320     28 D7 00 1B 
17324     00 EF 4F D0 
17328     3F 00 AF 1F 
1732c     20 FF 40 BF | 	byte	$28, $d7, $00, $1b, $00, $ef, $4f, $d0, $3f, $00, $af, $1f, $20, $ff, $40, $bf
17330     50 BF 50 DF 
17334     08 03 F7 07 
17338     3F D0 1F 00 
1733c     FF 0D 10 DF | 	byte	$50, $bf, $50, $df, $08, $03, $f7, $07, $3f, $d0, $1f, $00, $ff, $0d, $10, $df
17340     40 EF D7 30 
17344     BF 70 8F 74 
17348     C0 4F C0 08 
1734c     FF 40 CE 1F | 	byte	$40, $ef, $d7, $30, $bf, $70, $8f, $74, $c0, $4f, $c0, $08, $ff, $40, $ce, $1f
17350     10 EF 40 F7 
17354     CB 40 CF 60 
17358     9F 7F B0 E7 
1735c     3B C0 7F E0 | 	byte	$10, $ef, $40, $f7, $cb, $40, $cf, $60, $9f, $7f, $b0, $e7, $3b, $c0, $7f, $e0
17360     E0 3F C0 2F 
17364     D0 3B 37 00 
17368     CF E8 5F 20 
1736c     DF 08 16 C0 | 	byte	$e0, $3f, $c0, $2f, $d0, $3b, $37, $00, $cf, $e8, $5f, $20, $df, $08, $16, $c0
17370     58 FF 10 1F 
17374     C0 1F 08 2F 
17378     00 D3 3B 10 
1737c     DF 08 07 3F | 	byte	$58, $ff, $10, $1f, $c0, $1f, $08, $2f, $00, $d3, $3b, $10, $df, $08, $07, $3f
17380     00 BF 10 0F 
17384     07 40 BF 74 
17388     C0 BF 5B 00 
1738c     3F 00 CF 47 | 	byte	$00, $bf, $10, $0f, $07, $40, $bf, $74, $c0, $bf, $5b, $00, $3f, $00, $cf, $47
17390     F0 EB 42 00 
17394     EF 00 DF 70 
17398     CF 38 D4 DF 
1739c     44 D8 57 D0 | 	byte	$f0, $eb, $42, $00, $ef, $00, $df, $70, $cf, $38, $d4, $df, $44, $d8, $57, $d0
173a0     1F C0 5F C0 
173a4     30 D7 78 B0 
173a8     FF D2 3F 10 
173ac     00 BF 60 AF | 	byte	$1f, $c0, $5f, $c0, $30, $d7, $78, $b0, $ff, $d2, $3f, $10, $00, $bf, $60, $af
173b0     70 AF 60 A7 
173b4     38 DF 20 1F 
173b8     00 EF E0 47 
173bc     AB 7F E0 DF | 	byte	$70, $af, $60, $a7, $38, $df, $20, $1f, $00, $ef, $e0, $47, $ab, $7f, $e0, $df
173c0     50 A8 EF 70 
173c4     14 DF E0 DF 
173c8     00 7F E0 1F 
173cc     A0 5F A0 5F | 	byte	$50, $a8, $ef, $70, $14, $df, $e0, $df, $00, $7f, $e0, $1f, $a0, $5f, $a0, $5f
173d0     10 F8 BF 20 
173d4     FF 60 BF D4 
173d8     2F 20 00 BB 
173dc     2F 40 20 A8 | 	byte	$10, $f8, $bf, $20, $ff, $60, $bf, $d4, $2f, $20, $00, $bb, $2f, $40, $20, $a8
173e0     FF 06 10 FF 
173e4     40 E8 17 C0 
173e8     EF 70 10 BF 
173ec     00 BF 70 EE | 	byte	$ff, $06, $10, $ff, $40, $e8, $17, $c0, $ef, $70, $10, $bf, $00, $bf, $70, $ee
173f0     D5 28 F0 FF 
173f4     0C FB 58 B1 
173f8     32 B0 2F 28 
173fc     00 FF E0 EF | 	byte	$d5, $28, $f0, $ff, $0c, $fb, $58, $b1, $32, $b0, $2f, $28, $00, $ff, $e0, $ef
17400     0F 40 DF 50 
17404     BF 40 9F 50 
17408     B7 7C C0 18 
1740c     D9 1C 17 E0 | 	byte	$0f, $40, $df, $50, $bf, $40, $9f, $50, $b7, $7c, $c0, $18, $d9, $1c, $17, $e0
17410     1F E0 FF 20 
17414     DF 40 E7 FF 
17418     00 BF 60 DF 
1741c     6C C0 FF DB | 	byte	$1f, $e0, $ff, $20, $df, $40, $e7, $ff, $00, $bf, $60, $df, $6c, $c0, $ff, $db
17420     F0 3F 08 00 
17424     DF 20 BF 60 
17428     FD 07 C0 1F 
1742c     00 FF 7C C8 | 	byte	$f0, $3f, $08, $00, $df, $20, $bf, $60, $fd, $07, $c0, $1f, $00, $ff, $7c, $c8
17430     CF 0B F0 5F 
17434     00 04 9F 60 
17438     0B E0 FE 3F 
1743c     00 EB DB 58 | 	byte	$cf, $0b, $f0, $5f, $00, $04, $9f, $60, $0b, $e0, $fe, $3f, $00, $eb, $db, $58
17440     FF 00 1F 40 
17444     DF 00 BF 2F 
17448     44 E0 FF D0 
1744c     3F 10 F0 FF | 	byte	$ff, $00, $1f, $40, $df, $00, $bf, $2f, $44, $e0, $ff, $d0, $3f, $10, $f0, $ff
17450     04 E5 3F 14 
17454     F8 08 F7 00 
17458     FF 20 1F 00 
1745c     FF D0 5F E3 | 	byte	$04, $e5, $3f, $14, $f8, $08, $f7, $00, $ff, $20, $1f, $00, $ff, $d0, $5f, $e3
17460     00 EF 40 30 
17464     BF F0 EF 68 
17468     10 E5 FF E0 
1746c     3F 00 D4 FF | 	byte	$00, $ef, $40, $30, $bf, $f0, $ef, $68, $10, $e5, $ff, $e0, $3f, $00, $d4, $ff
17470     40 10 E1 1F 
17474     14 E8 2F C0 
17478     3F 17 00 FF 
1747c     0F 18 CF 2A | 	byte	$40, $10, $e1, $1f, $14, $e8, $2f, $c0, $3f, $17, $00, $ff, $0f, $18, $cf, $2a
17480     ED 3F 30 B9 
17484     0A FF 40 DF 
17488     40 ED E8 FF 
1748c     00 3F 30 EB | 	byte	$ed, $3f, $30, $b9, $0a, $ff, $40, $df, $40, $ed, $e8, $ff, $00, $3f, $30, $eb
17490     F0 D7 5F 20 
17494     E0 EF 00 38 
17498     CF 48 03 D0 
1749c     3F CF 4C D8 | 	byte	$f0, $d7, $5f, $20, $e0, $ef, $00, $38, $cf, $48, $03, $d0, $3f, $cf, $4c, $d8
174a0     FF 57 10 D7 
174a4     D7 2F 06 1F 
174a8     20 EF 00 1F 
174ac     E0 2F DB 3C | 	byte	$ff, $57, $10, $d7, $d7, $2f, $06, $1f, $20, $ef, $00, $1f, $e0, $2f, $db, $3c
174b0     D7 38 2F E8 
174b4     F2 B7 3F 58 
174b8     C0 3F 00 EF 
174bc     28 1F 08 C0 | 	byte	$d7, $38, $2f, $e8, $f2, $b7, $3f, $58, $c0, $3f, $00, $ef, $28, $1f, $08, $c0
174c0     2F 3F 30 C0 
174c4     DB 17 60 1A 
174c8     E3 08 EF 20 
174cc     EF F0 4F 00 | 	byte	$2f, $3f, $30, $c0, $db, $17, $60, $1a, $e3, $08, $ef, $20, $ef, $f0, $4f, $00
174d0     1A EB 20 1D 
174d4     E7 D0 1F 50 
174d8     E0 EF 34 F2 
174dc     FC 1F 00 17 | 	byte	$1a, $eb, $20, $1d, $e7, $d0, $1f, $50, $e0, $ef, $34, $f2, $fc, $1f, $00, $17
174e0     10 FF C0 5F 
174e4     20 E8 FF 00 
174e8     FF 09 0A FF 
174ec     3F D4 1F D0 | 	byte	$10, $ff, $c0, $5f, $20, $e8, $ff, $00, $ff, $09, $0a, $ff, $3f, $d4, $1f, $d0
174f0     2F 40 C9 13 
174f4     F2 2F 20 EC 
174f8     CC 1F 20 32 
174fc     A2 3F 2C D0 | 	byte	$2f, $40, $c9, $13, $f2, $2f, $20, $ec, $cc, $1f, $20, $32, $a2, $3f, $2c, $d0
17500     FF 48 CF E8 
17504     1F 20 EC 5B 
17508     CD 00 FF C8 
1750c     7F C0 FF E0 | 	byte	$ff, $48, $cf, $e8, $1f, $20, $ec, $5b, $cd, $00, $ff, $c8, $7f, $c0, $ff, $e0
17510     5F D9 0C 10 
17514     AF 37 4C 0F 
17518     00 EF 01 08 
1751c     2F 00 3F D0 | 	byte	$5f, $d9, $0c, $10, $af, $37, $4c, $0f, $00, $ef, $01, $08, $2f, $00, $3f, $d0
17520     1F 18 20 BF 
17524     28 20 FF 10 
17528     08 1F E0 DF 
1752c     60 E8 DF 6F | 	byte	$1f, $18, $20, $bf, $28, $20, $ff, $10, $08, $1f, $e0, $df, $60, $e8, $df, $6f
17530     E0 CB 3F 20 
17534     EC FF 20 DF 
17538     00 1F 30 08 
1753c     D1 08 FF 20 | 	byte	$e0, $cb, $3f, $20, $ec, $ff, $20, $df, $00, $1f, $30, $08, $d1, $08, $ff, $20
17540     27 F0 D4 17 
17544     2B 24 0F A0 
17548     57 E0 FF 40 
1754c     20 AF E0 3F | 	byte	$27, $f0, $d4, $17, $2b, $24, $0f, $a0, $57, $e0, $ff, $40, $20, $af, $e0, $3f
17550     40 00 DF 10 
17554     F7 40 DF 40 
17558     C0 1F 1B E0 
1755c     FF 33 20 D7 | 	byte	$40, $00, $df, $10, $f7, $40, $df, $40, $c0, $1f, $1b, $e0, $ff, $33, $20, $d7
17560     F9 44 EF E0 
17564     1F 56 00 FF 
17568     20 B9 18 FF 
1756c     68 C8 1F E9 | 	byte	$f9, $44, $ef, $e0, $1f, $56, $00, $ff, $20, $b9, $18, $ff, $68, $c8, $1f, $e9
17570     50 A7 2F 10 
17574     EF FF 50 FF 
17578     00 0E AF 3C 
1757c     20 DF 70 AB | 	byte	$50, $a7, $2f, $10, $ef, $ff, $50, $ff, $00, $0e, $af, $3c, $20, $df, $70, $ab
17580     5C AF 20 FF 
17584     E4 6F D0 EF 
17588     14 30 DF 00 
1758c     1F 00 EF 60 | 	byte	$5c, $af, $20, $ff, $e4, $6f, $d0, $ef, $14, $30, $df, $00, $1f, $00, $ef, $60
17590     CF 20 EF 00 
17594     1D 20 C0 5F 
17598     C0 2B FF 40 
1759c     BF 1F E8 FF | 	byte	$cf, $20, $ef, $00, $1d, $20, $c0, $5f, $c0, $2b, $ff, $40, $bf, $1f, $e8, $ff
175a0     2B 00 EF 20 
175a4     FF 20 FF C7 
175a8     28 DF 76 00 
175ac     08 CF 00 1F | 	byte	$2b, $00, $ef, $20, $ff, $20, $ff, $c7, $28, $df, $76, $00, $08, $cf, $00, $1f
175b0     18 F1 EB 3F 
175b4     00 FF F0 1F 
175b8     FF 20 EF 20 
175bc     1F 20 DB 10 | 	byte	$18, $f1, $eb, $3f, $00, $ff, $f0, $1f, $ff, $20, $ef, $20, $1f, $20, $db, $10
175c0     EF 18 09 F0 
175c4     0F 64 00 BB 
175c8     1B E4 37 40 
175cc     E7 E7 2A EF | 	byte	$ef, $18, $09, $f0, $0f, $64, $00, $bb, $1b, $e4, $37, $40, $e7, $e7, $2a, $ef
175d0     20 EF E7 28 
175d4     0F 40 E0 1B 
175d8     D3 08 3F C0 
175dc     5F 00 20 DF | 	byte	$20, $ef, $e7, $28, $0f, $40, $e0, $1b, $d3, $08, $3f, $c0, $5f, $00, $20, $df
175e0     00 FF E4 1F 
175e4     F7 48 DD 10 
175e8     F7 10 1F D0 
175ec     2D C7 58 DF | 	byte	$00, $ff, $e4, $1f, $f7, $48, $dd, $10, $f7, $10, $1f, $d0, $2d, $c7, $58, $df
175f0     68 C0 D7 4F 
175f4     D0 3F 10 E0 
175f8     2F 00 1F 00 
175fc     2F 20 AC FF | 	byte	$68, $c0, $d7, $4f, $d0, $3f, $10, $e0, $2f, $00, $1f, $00, $2f, $20, $ac, $ff
17600     20 FF 7E B0 
17604     EF 08 DA 1F 
17608     3B 00 5A B4 
1760c     E8 3F 00 1F | 	byte	$20, $ff, $7e, $b0, $ef, $08, $da, $1f, $3b, $00, $5a, $b4, $e8, $3f, $00, $1f
17610     00 F7 27 48 
17614     C7 24 B9 3F 
17618     30 DF 34 F5 
1761c     FC E7 2E F3 | 	byte	$00, $f7, $27, $48, $c7, $24, $b9, $3f, $30, $df, $34, $f5, $fc, $e7, $2e, $f3
17620     10 EF 58 F0 
17624     13 F0 DA F7 
17628     40 17 40 B8 
1762c     2F E0 FF 34 | 	byte	$10, $ef, $58, $f0, $13, $f0, $da, $f7, $40, $17, $40, $b8, $2f, $e0, $ff, $34
17630     FB D9 27 20 
17634     10 E0 1F E0 
17638     3F ED 20 DF 
1763c     10 3F EF 00 | 	byte	$fb, $d9, $27, $20, $10, $e0, $1f, $e0, $3f, $ed, $20, $df, $10, $3f, $ef, $00
17640     EF 00 1F 20 
17644     FF 00 DF 07 
17648     54 C3 5C A4 
1764c     2F 20 03 27 | 	byte	$ef, $00, $1f, $20, $ff, $00, $df, $07, $54, $c3, $5c, $a4, $2f, $20, $03, $27
17650     E0 DF 27 10 
17654     FF 20 BF 60 
17658     C8 FF 10 15 
1765c     00 E7 18 0D | 	byte	$e0, $df, $27, $10, $ff, $20, $bf, $60, $c8, $ff, $10, $15, $00, $e7, $18, $0d
17660     1F 20 FF E2 
17664     F0 BF 65 47 
17668     C0 3F 00 BF 
1766c     27 40 DF 20 | 	byte	$1f, $20, $ff, $e2, $f0, $bf, $65, $47, $c0, $3f, $00, $bf, $27, $40, $df, $20
17670     FF 10 17 B0 
17674     3F 00 FF 60 
17678     BF 48 F0 E0 
1767c     DA 37 3B 00 | 	byte	$ff, $10, $17, $b0, $3f, $00, $ff, $60, $bf, $48, $f0, $e0, $da, $37, $3b, $00
17680     BF 44 00 FF 
17684     E0 FF DB 5F 
17688     08 32 C0 2F 
1768c     00 DF 30 DF | 	byte	$bf, $44, $00, $ff, $e0, $ff, $db, $5f, $08, $32, $c0, $2f, $00, $df, $30, $df
17690     60 E3 00 BF 
17694     78 AD 2E D7 
17698     14 3F 00 EF 
1769c     0F 28 FF E0 | 	byte	$60, $e3, $00, $bf, $78, $ad, $2e, $d7, $14, $3f, $00, $ef, $0f, $28, $ff, $e0
176a0     1F 07 48 F0 
176a4     BF 37 F4 4F 
176a8     10 AF 18 DF 
176ac     78 E3 D0 17 | 	byte	$1f, $07, $48, $f0, $bf, $37, $f4, $4f, $10, $af, $18, $df, $78, $e3, $d0, $17
176b0     E8 3F 18 00 
176b4     DF D0 7E E0 
176b8     DF 1F 40 9F 
176bc     26 3F 10 00 | 	byte	$e8, $3f, $18, $00, $df, $d0, $7e, $e0, $df, $1f, $40, $9f, $26, $3f, $10, $00
176c0     BF 1B 30 00 
176c4     DF 00 2F 28 
176c8     E0 27 D0 FF 
176cc     0B 00 3F 00 | 	byte	$bf, $1b, $30, $00, $df, $00, $2f, $28, $e0, $27, $d0, $ff, $0b, $00, $3f, $00
176d0     20 AF 08 3F 
176d4     20 00 B7 50 
176d8     DF 60 AF 20 
176dc     EF 2A 13 00 | 	byte	$20, $af, $08, $3f, $20, $00, $b7, $50, $df, $60, $af, $20, $ef, $2a, $13, $00
176e0     04 FF D4 3F 
176e4     F1 28 DF DF 
176e8     5E 00 D7 30 
176ec     EF EB 13 3F | 	byte	$04, $ff, $d4, $3f, $f1, $28, $df, $df, $5e, $00, $d7, $30, $ef, $eb, $13, $3f
176f0     00 FF E8 07 
176f4     1F D0 3F 00 
176f8     2F D4 F7 40 
176fc     15 E4 E0 FF | 	byte	$00, $ff, $e8, $07, $1f, $d0, $3f, $00, $2f, $d4, $f7, $40, $15, $e4, $e0, $ff
17700     40 EF 68 8B 
17704     1F 31 D1 5F 
17708     D7 10 DF 10 
1770c     4B 08 E8 C5 | 	byte	$40, $ef, $68, $8b, $1f, $31, $d1, $5f, $d7, $10, $df, $10, $4b, $08, $e8, $c5
17710     3B 30 F7 20 
17714     D7 DF 28 1F 
17718     00 EF 50 AF 
1771c     50 DF 10 1D | 	byte	$3b, $30, $f7, $20, $d7, $df, $28, $1f, $00, $ef, $50, $af, $50, $df, $10, $1d
17720     AF 5F F0 E8 
17724     3F 00 2F C0 
17728     5F E8 07 EA 
1772c     E0 3F 40 D7 | 	byte	$af, $5f, $f0, $e8, $3f, $00, $2f, $c0, $5f, $e8, $07, $ea, $e0, $3f, $40, $d7
17730     10 BF 30 FF 
17734     58 D4 D0 FF 
17738     30 28 F7 E8 
1773c     15 0B F4 2F | 	byte	$10, $bf, $30, $ff, $58, $d4, $d0, $ff, $30, $28, $f7, $e8, $15, $0b, $f4, $2f
17740     10 CF 20 FF 
17744     10 27 10 E0 
17748     DF 2F 06 20 
1774c     FF 00 CF 67 | 	byte	$10, $cf, $20, $ff, $10, $27, $10, $e0, $df, $2f, $06, $20, $ff, $00, $cf, $67
17750     00 FF E0 14 
17754     EF 08 2F 08 
17758     1F 00 BF 20 
1775c     1F 20 FB FA | 	byte	$00, $ff, $e0, $14, $ef, $08, $2f, $08, $1f, $00, $bf, $20, $1f, $20, $fb, $fa
17760     E7 FF 5F C0 
17764     1F E3 40 FB 
17768     D0 3F 20 FF 
1776c     E0 FF 1F 50 | 	byte	$e7, $ff, $5f, $c0, $1f, $e3, $40, $fb, $d0, $3f, $20, $ff, $e0, $ff, $1f, $50
17770     CF 00 D7 40 
17774     44 C0 FF 18 
17778     28 CF 2F 00 
1777c     3F 00 EE FF | 	byte	$cf, $00, $d7, $40, $44, $c0, $ff, $18, $28, $cf, $2f, $00, $3f, $00, $ee, $ff
17780     40 DF 22 08 
17784     BF 70 F3 E4 
17788     E5 3F E4 1F 
1778c     07 D8 5F 00 | 	byte	$40, $df, $22, $08, $bf, $70, $f3, $e4, $e5, $3f, $e4, $1f, $07, $d8, $5f, $00
17790     F0 FF 00 FF 
17794     27 40 CF 00 
17798     1F 28 FC E0 
1779c     FF 28 EF 40 | 	byte	$f0, $ff, $00, $ff, $27, $40, $cf, $00, $1f, $28, $fc, $e0, $ff, $28, $ef, $40
177a0     BF 50 1B C0 
177a4     2F 00 27 15 
177a8     C0 FF 14 14 
177ac     17 20 BF 40 | 	byte	$bf, $50, $1b, $c0, $2f, $00, $27, $15, $c0, $ff, $14, $14, $17, $20, $bf, $40
177b0     FF E0 F7 50 
177b4     C0 4C D9 F3 
177b8     5E C8 36 A5 
177bc     19 37 40 BF | 	byte	$ff, $e0, $f7, $50, $c0, $4c, $d9, $f3, $5e, $c8, $36, $a5, $19, $37, $40, $bf
177c0     F0 FF 20 57 
177c4     C0 FF FF 40 
177c8     D7 ED 38 DF 
177cc     50 9F 18 5F | 	byte	$f0, $ff, $20, $57, $c0, $ff, $ff, $40, $d7, $ed, $38, $df, $50, $9f, $18, $5f
177d0     00 D0 EF 2A 
177d4     5C A0 DF 5F 
177d8     00 1F E0 00 
177dc     FF 20 14 DF | 	byte	$00, $d0, $ef, $2a, $5c, $a0, $df, $5f, $00, $1f, $e0, $00, $ff, $20, $14, $df
177e0     10 EF 30 04 
177e4     DF 08 3F C0 
177e8     4D E7 10 DF 
177ec     60 AF 20 EF | 	byte	$10, $ef, $30, $04, $df, $08, $3f, $c0, $4d, $e7, $10, $df, $60, $af, $20, $ef
177f0     5A 08 A0 FF 
177f4     60 E0 2F C0 
177f8     FF 44 28 D0 
177fc     CF 3F 00 2F | 	byte	$5a, $08, $a0, $ff, $60, $e0, $2f, $c0, $ff, $44, $28, $d0, $cf, $3f, $00, $2f
17800     CB 7F D0 F4 
17804     BF 3F 1C F7 
17808     20 FF E0 1F 
1780c     10 1C AF 4F | 	byte	$cb, $7f, $d0, $f4, $bf, $3f, $1c, $f7, $20, $ff, $e0, $1f, $10, $1c, $af, $4f
17810     08 DF 38 F7 
17814     40 DF DF 08 
17818     2F 20 FF 00 
1781c     0F BF 7C D0 | 	byte	$08, $df, $38, $f7, $40, $df, $df, $08, $2f, $20, $ff, $00, $0f, $bf, $7c, $d0
17820     DF 10 37 EF 
17824     20 DF 40 E5 
17828     FF 30 CB 2F 
1782c     30 C0 1F 0D | 	byte	$df, $10, $37, $ef, $20, $df, $40, $e5, $ff, $30, $cb, $2f, $30, $c0, $1f, $0d
17830     08 FF E0 28 
17834     1F D0 1F 20 
17838     E0 3F 00 CF 
1783c     3A 14 FF 10 | 	byte	$08, $ff, $e0, $28, $1f, $d0, $1f, $20, $e0, $3f, $00, $cf, $3a, $14, $ff, $10
17840     CF 24 EF 50 
17844     BF 78 B3 E0 
17848     1F 10 12 CF 
1784c     50 DF 10 BF | 	byte	$cf, $24, $ef, $50, $bf, $78, $b3, $e0, $1f, $10, $12, $cf, $50, $df, $10, $bf
17850     58 40 85 1F 
17854     48 CF 5A E0 
17858     BF 34 37 D3 
1785c     28 B7 60 AF | 	byte	$58, $40, $85, $1f, $48, $cf, $5a, $e0, $bf, $34, $37, $d3, $28, $b7, $60, $af
17860     7C D1 08 DF 
17864     1F E0 3F 00 
17868     3F 00 CE FF 
1786c     40 30 C3 08 | 	byte	$7c, $d1, $08, $df, $1f, $e0, $3f, $00, $3f, $00, $ce, $ff, $40, $30, $c3, $08
17870     DF 60 E7 22 
17874     11 A0 1F 32 
17878     FF 40 BF 60 
1787c     C4 DF 2F 01 | 	byte	$df, $60, $e7, $22, $11, $a0, $1f, $32, $ff, $40, $bf, $60, $c4, $df, $2f, $01
17880     10 1F E8 00 
17884     FF 1A 30 A1 
17888     3F 10 04 FF 
1788c     20 FF F0 08 | 	byte	$10, $1f, $e8, $00, $ff, $1a, $30, $a1, $3f, $10, $04, $ff, $20, $ff, $f0, $08
17890     0F 0F 2B 10 
17894     B7 30 F7 00 
17898     4F D2 28 B7 
1789c     34 27 E0 1F | 	byte	$0f, $0f, $2b, $10, $b7, $30, $f7, $00, $4f, $d2, $28, $b7, $34, $27, $e0, $1f
178a0     D0 2C EF 34 
178a4     EC 2F E0 BF 
178a8     40 48 CF 20 
178ac     DF 15 20 06 | 	byte	$d0, $2c, $ef, $34, $ec, $2f, $e0, $bf, $40, $48, $cf, $20, $df, $15, $20, $06
178b0     0B 24 CF 0C 
178b4     FD FF 60 D7 
178b8     00 CF 3D 15 
178bc     32 E0 E7 FF | 	byte	$0b, $24, $cf, $0c, $fd, $ff, $60, $d7, $00, $cf, $3d, $15, $32, $e0, $e7, $ff
178c0     5C C8 1F E0 
178c4     3F C0 2F 10 
178c8     FF 08 08 BF 
178cc     58 28 D1 10 | 	byte	$5c, $c8, $1f, $e0, $3f, $c0, $2f, $10, $ff, $08, $08, $bf, $58, $28, $d1, $10
178d0     DF 60 12 C2 
178d4     FF EF 20 3F 
178d8     E0 E7 36 00 
178dc     EF 0F 00 3F | 	byte	$df, $60, $12, $c2, $ff, $ef, $20, $3f, $e0, $e7, $36, $00, $ef, $0f, $00, $3f
178e0     C2 2F 00 0F 
178e4     D9 57 10 BF 
178e8     00 5F E0 EF 
178ec     50 CF 30 10 | 	byte	$c2, $2f, $00, $0f, $d9, $57, $10, $bf, $00, $5f, $e0, $ef, $50, $cf, $30, $10
178f0     AF 7E E0 F0 
178f4     FF D3 3C BF 
178f8     77 00 DF F0 
178fc     48 F1 F6 FB | 	byte	$af, $7e, $e0, $f0, $ff, $d3, $3c, $bf, $77, $00, $df, $f0, $48, $f1, $f6, $fb
17900     42 AB 17 60 
17904     EF 20 BF D7 
17908     50 17 40 DB 
1790c     D0 2F F3 3C | 	byte	$42, $ab, $17, $60, $ef, $20, $bf, $d7, $50, $17, $40, $db, $d0, $2f, $f3, $3c
17910     EE 24 BD 3E 
17914     E7 38 16 AA 
17918     3F 00 FF 40 
1791c     40 9F DC FF | 	byte	$ee, $24, $bd, $3e, $e7, $38, $16, $aa, $3f, $00, $ff, $40, $40, $9f, $dc, $ff
17920     75 00 BF 40 
17924     E4 FF 50 C7 
17928     E8 2F 27 00 
1792c     EF 4C 08 D7 | 	byte	$75, $00, $bf, $40, $e4, $ff, $50, $c7, $e8, $2f, $27, $00, $ef, $4c, $08, $d7
17930     CD 4F 51 E0 
17934     BF 04 5F 02 
17938     00 AF 38 3C 
1793c     B0 3F 30 C0 | 	byte	$cd, $4f, $51, $e0, $bf, $04, $5f, $02, $00, $af, $38, $3c, $b0, $3f, $30, $c0
17940     3A DF 0D 30 
17944     D1 FF 50 C0 
17948     4F D0 1B 10 
1794c     BF 7F C8 EF | 	byte	$3a, $df, $0d, $30, $d1, $ff, $50, $c0, $4f, $d0, $1b, $10, $bf, $7f, $c8, $ef
17950     E8 FF 78 EA 
17954     BA 3B C0 3F 
17958     28 20 AF 0F 
1795c     0F 20 CF 6F | 	byte	$e8, $ff, $78, $ea, $ba, $3b, $c0, $3f, $28, $20, $af, $0f, $0f, $20, $cf, $6f
17960     00 D0 DF 30 
17964     46 E0 08 AF 
17968     62 FB 40 F0 
1796c     AF 10 3F 20 | 	byte	$00, $d0, $df, $30, $46, $e0, $08, $af, $62, $fb, $40, $f0, $af, $10, $3f, $20
17970     FF EB 20 9F 
17974     5F 3C 10 D5 
17978     DF F9 0F 70 
1797c     F9 E0 AF 37 | 	byte	$ff, $eb, $20, $9f, $5f, $3c, $10, $d5, $df, $f9, $0f, $70, $f9, $e0, $af, $37
17980     40 3C A0 2F 
17984     E9 20 FF 50 
17988     BB FF 30 DF 
1798c     20 1F 40 B3 | 	byte	$40, $3c, $a0, $2f, $e9, $20, $ff, $50, $bb, $ff, $30, $df, $20, $1f, $40, $b3
17990     04 EF 68 00 
17994     D7 07 00 5F 
17998     00 B7 30 FF 
1799c     00 34 DB 30 | 	byte	$04, $ef, $68, $00, $d7, $07, $00, $5f, $00, $b7, $30, $ff, $00, $34, $db, $30
179a0     CF 30 EF 17 
179a4     40 CD FF 0A 
179a8     22 00 FF 00 
179ac     2F D0 5F DB | 	byte	$cf, $30, $ef, $17, $40, $cd, $ff, $0a, $22, $00, $ff, $00, $2f, $d0, $5f, $db
179b0     10 BF 08 3F 
179b4     10 E0 FF 00 
179b8     FF 60 BF 00 
179bc     FF 10 D7 4F | 	byte	$10, $bf, $08, $3f, $10, $e0, $ff, $00, $ff, $60, $bf, $00, $ff, $10, $d7, $4f
179c0     18 10 B0 DF 
179c4     5F 28 D2 FF 
179c8     C0 5F 00 30 
179cc     B7 D0 FF 70 | 	byte	$18, $10, $b0, $df, $5f, $28, $d2, $ff, $c0, $5f, $00, $30, $b7, $d0, $ff, $70
179d0     E8 EF 24 C6 
179d4     DF 5F 20 00 
179d8     D7 F5 18 0F 
179dc     48 E5 C0 FF | 	byte	$e8, $ef, $24, $c6, $df, $5f, $20, $00, $d7, $f5, $18, $0f, $48, $e5, $c0, $ff
179e0     13 64 E0 9F 
179e4     3F 00 3F 00 
179e8     08 EF 20 EF 
179ec     00 FF 50 10 | 	byte	$13, $64, $e0, $9f, $3f, $00, $3f, $00, $08, $ef, $20, $ef, $00, $ff, $50, $10
179f0     A0 FF 5D 08 
179f4     00 AF 3A 2B 
179f8     00 1A AF 7F 
179fc     C0 1F F7 F0 | 	byte	$a0, $ff, $5d, $08, $00, $af, $3a, $2b, $00, $1a, $af, $7f, $c0, $1f, $f7, $f0
17a00     FF 00 3C C7 
17a04     3F 08 D3 F7 
17a08     28 1F 20 DF 
17a0c     F7 00 F7 70 | 	byte	$ff, $00, $3c, $c7, $3f, $08, $d3, $f7, $28, $1f, $20, $df, $f7, $00, $f7, $70
17a10     DF 00 DB EF 
17a14     7E D0 FF F0 
17a18     28 EE 2F E0 
17a1c     3F C0 FF 2F | 	byte	$df, $00, $db, $ef, $7e, $d0, $ff, $f0, $28, $ee, $2f, $e0, $3f, $c0, $ff, $2f
17a20     48 ED D0 FF 
17a24     08 FF 50 0F 
17a28     B0 17 FF 50 
17a2c     08 C8 E7 3F | 	byte	$48, $ed, $d0, $ff, $08, $ff, $50, $0f, $b0, $17, $ff, $50, $08, $c8, $e7, $3f
17a30     50 C2 17 FB 
17a34     08 FF 03 60 
17a38     F0 BB F7 5B 
17a3c     30 DB 10 CF | 	byte	$50, $c2, $17, $fb, $08, $ff, $03, $60, $f0, $bb, $f7, $5b, $30, $db, $10, $cf
17a40     F7 58 1F 00 
17a44     9F 19 4F 00 
17a48     38 8F 32 44 
17a4c     C8 3F C0 5A | 	byte	$f7, $58, $1f, $00, $9f, $19, $4f, $00, $38, $8f, $32, $44, $c8, $3f, $c0, $5a
17a50     CF 40 B0 3F 
17a54     24 11 C0 FF 
17a58     4F 20 D0 FB 
17a5c     FF 40 EF 40 | 	byte	$cf, $40, $b0, $3f, $24, $11, $c0, $ff, $4f, $20, $d0, $fb, $ff, $40, $ef, $40
17a60     9F 50 2F D0 
17a64     F7 1F 50 00 
17a68     AF 37 00 FF 
17a6c     10 08 FF E0 | 	byte	$9f, $50, $2f, $d0, $f7, $1f, $50, $00, $af, $37, $00, $ff, $10, $08, $ff, $e0
17a70     3F 00 DF 0C 
17a74     2C FF 00 FF 
17a78     20 FF 20 DF 
17a7c     20 FF 70 9A | 	byte	$3f, $00, $df, $0c, $2c, $ff, $00, $ff, $20, $ff, $20, $df, $20, $ff, $70, $9a
17a80     EF 4F 00 39 
17a84     A6 3F F0 2F 
17a88     00 1F E0 3F 
17a8c     E0 00 2E D0 | 	byte	$ef, $4f, $00, $39, $a6, $3f, $f0, $2f, $00, $1f, $e0, $3f, $e0, $00, $2e, $d0
17a90     3F 20 C6 0F 
17a94     2F E0 0F 1F 
17a98     E4 5E A9 24 
17a9c     EF 40 1F E0 | 	byte	$3f, $20, $c6, $0f, $2f, $e0, $0f, $1f, $e4, $5e, $a9, $24, $ef, $40, $1f, $e0
17aa0     10 BF 48 30 
17aa4     E7 00 BF 58 
17aa8     2F 00 FF E4 
17aac     3F 00 FF 10 | 	byte	$10, $bf, $48, $30, $e7, $00, $bf, $58, $2f, $00, $ff, $e4, $3f, $00, $ff, $10
17ab0     17 10 DF 40 
17ab4     D7 1C 0B 00 
17ab8     17 10 FF 10 
17abc     0B E9 52 AB | 	byte	$17, $10, $df, $40, $d7, $1c, $0b, $00, $17, $10, $ff, $10, $0b, $e9, $52, $ab
17ac0     49 C8 3F 60 
17ac4     D6 CF 00 1F 
17ac8     40 0C CD 10 
17acc     EF 2C 20 DF | 	byte	$49, $c8, $3f, $60, $d6, $cf, $00, $1f, $40, $0c, $cd, $10, $ef, $2c, $20, $df
17ad0     40 EF 08 E0 
17ad4     2F 40 00 BF 
17ad8     38 F4 3F E0 
17adc     1B DF 40 FF | 	byte	$40, $ef, $08, $e0, $2f, $40, $00, $bf, $38, $f4, $3f, $e0, $1b, $df, $40, $ff
17ae0     20 C9 13 EF 
17ae4     1B 50 DF D0 
17ae8     FF 40 CF 3C 
17aec     00 DF 30 04 | 	byte	$20, $c9, $13, $ef, $1b, $50, $df, $d0, $ff, $40, $cf, $3c, $00, $df, $30, $04
17af0     CF 58 F5 00 
17af4     DF 40 3F CC 
17af8     F8 DF 58 DD 
17afc     FD 3B E0 FF | 	byte	$cf, $58, $f5, $00, $df, $40, $3f, $cc, $f8, $df, $58, $dd, $fd, $3b, $e0, $ff
17b00     01 40 D7 20 
17b04     DF 08 44 C7 
17b08     50 AF 70 A9 
17b0c     17 47 00 EF | 	byte	$01, $40, $d7, $20, $df, $08, $44, $c7, $50, $af, $70, $a9, $17, $47, $00, $ef
17b10     EF 50 FF 00 
17b14     DF 17 30 DF 
17b18     20 FF 20 DF 
17b1c     20 F7 00 37 | 	byte	$ef, $50, $ff, $00, $df, $17, $30, $df, $20, $ff, $20, $df, $20, $f7, $00, $37
17b20     D1 50 BF 20 
17b24     DF 70 E0 DF 
17b28     10 DB 5F 20 
17b2c     CF 14 FF 20 | 	byte	$d1, $50, $bf, $20, $df, $70, $e0, $df, $10, $db, $5f, $20, $cf, $14, $ff, $20
17b30     DF 40 DF 40 
17b34     DF 00 1F 00 
17b38     28 C0 FF 40 
17b3c     00 3F E0 DF | 	byte	$df, $40, $df, $40, $df, $00, $1f, $00, $28, $c0, $ff, $40, $00, $3f, $e0, $df
17b40     E3 3F 50 C0 
17b44     E8 FF 30 0F 
17b48     40 CF 00 1F 
17b4c     10 1F 20 AD | 	byte	$e3, $3f, $50, $c0, $e8, $ff, $30, $0f, $40, $cf, $00, $1f, $10, $1f, $20, $ad
17b50     FF 00 6F 00 
17b54     E7 CB 00 3F 
17b58     40 FF CA F7 
17b5c     FF 40 FF F0 | 	byte	$ff, $00, $6f, $00, $e7, $cb, $00, $3f, $40, $ff, $ca, $f7, $ff, $40, $ff, $f0
17b60     08 CF 70 BF 
17b64     30 FF 00 FF 
17b68     F5 28 FF 24 
17b6c     C8 2F E0 3F | 	byte	$08, $cf, $70, $bf, $30, $ff, $00, $ff, $f5, $28, $ff, $24, $c8, $2f, $e0, $3f
17b70     00 E0 BF 3C 
17b74     64 D0 D7 24 
17b78     EF 30 BF 70 
17b7c     BF 28 CF F9 | 	byte	$00, $e0, $bf, $3c, $64, $d0, $d7, $24, $ef, $30, $bf, $70, $bf, $28, $cf, $f9
17b80     6A D0 2F C4 
17b84     13 3F E0 FF 
17b88     00 18 FF 10 
17b8c     FF E3 00 FF | 	byte	$6a, $d0, $2f, $c4, $13, $3f, $e0, $ff, $00, $18, $ff, $10, $ff, $e3, $00, $ff
17b90     50 BF 60 BF 
17b94     10 DF 30 F3 
17b98     48 00 C4 F7 
17b9c     3F 10 FF E0 | 	byte	$50, $bf, $60, $bf, $10, $df, $30, $f3, $48, $00, $c4, $f7, $3f, $10, $ff, $e0
17ba0     1F E0 3F 00 
17ba4     FF 00 FF 00 
17ba8     DF 50 DF 20 
17bac     C9 ED 40 17 | 	byte	$1f, $e0, $3f, $00, $ff, $00, $ff, $00, $df, $50, $df, $20, $c9, $ed, $40, $17
17bb0     50 A0 EF 0F 
17bb4     00 5F 20 D8 
17bb8     9F 14 57 40 
17bbc     B5 F7 10 FF | 	byte	$50, $a0, $ef, $0f, $00, $5f, $20, $d8, $9f, $14, $57, $40, $b5, $f7, $10, $ff
17bc0     60 BF E8 30 
17bc4     CF 7E AB 00 
17bc8     FF E8 4F 08 
17bcc     E8 FF E0 44 | 	byte	$60, $bf, $e8, $30, $cf, $7e, $ab, $00, $ff, $e8, $4f, $08, $e8, $ff, $e0, $44
17bd0     CF 30 1B C0 
17bd4     1F 20 00 FF 
17bd8     E0 1F 20 BF 
17bdc     20 1F 00 E0 | 	byte	$cf, $30, $1b, $c0, $1f, $20, $00, $ff, $e0, $1f, $20, $bf, $20, $1f, $00, $e0
17be0     FF 2F 00 1F 
17be4     08 CF 1E 13 
17be8     3B C0 FF 20 
17bec     0F 0F 00 F8 | 	byte	$ff, $2f, $00, $1f, $08, $cf, $1e, $13, $3b, $c0, $ff, $20, $0f, $0f, $00, $f8
17bf0     2D B0 3F 20 
17bf4     FB 00 DF 0F 
17bf8     30 CF 14 2C 
17bfc     FF D0 DF 7C | 	byte	$2d, $b0, $3f, $20, $fb, $00, $df, $0f, $30, $cf, $14, $2c, $ff, $d0, $df, $7c
17c00     E0 BF 40 E9 
17c04     EA 3F C8 57 
17c08     89 5A FB 00 
17c0c     4C A5 04 37 | 	byte	$e0, $bf, $40, $e9, $ea, $3f, $c8, $57, $89, $5a, $fb, $00, $4c, $a5, $04, $37
17c10     C8 5F D0 37 
17c14     B7 20 FF E0 
17c18     5F E0 F0 D7 
17c1c     20 1F 20 BF | 	byte	$c8, $5f, $d0, $37, $b7, $20, $ff, $e0, $5f, $e0, $f0, $d7, $20, $1f, $20, $bf
17c20     48 DF 40 A0 
17c24     3F 00 08 FF 
17c28     20 FF C8 DF 
17c2c     58 00 35 90 | 	byte	$48, $df, $40, $a0, $3f, $00, $08, $ff, $20, $ff, $c8, $df, $58, $00, $35, $90
17c30     FF 0B 78 D0 
17c34     EC CB F7 7F 
17c38     E0 EF 00 FF 
17c3c     08 EF 42 00 | 	byte	$ff, $0b, $78, $d0, $ec, $cb, $f7, $7f, $e0, $ef, $00, $ff, $08, $ef, $42, $00
17c40     E0 1F 00 EF 
17c44     3F E0 FF E0 
17c48     FF 2B 10 1F 
17c4c     D0 DF 40 DF | 	byte	$e0, $1f, $00, $ef, $3f, $e0, $ff, $e0, $ff, $2b, $10, $1f, $d0, $df, $40, $df
17c50     40 AF 2F 40 
17c54     9B 0A 3F 20 
17c58     BF 00 1F 40 
17c5c     BF 1F 40 BF | 	byte	$40, $af, $2f, $40, $9b, $0a, $3f, $20, $bf, $00, $1f, $40, $bf, $1f, $40, $bf
17c60     28 DF 60 BF 
17c64     17 0C 1F 20 
17c68     C7 1F 20 DF 
17c6c     5C F0 C1 48 | 	byte	$28, $df, $60, $bf, $17, $0c, $1f, $20, $c7, $1f, $20, $df, $5c, $f0, $c1, $48
17c70     AF 70 02 C0 
17c74     3A B3 74 DF 
17c78     10 FF D0 2F 
17c7c     10 50 C1 D0 | 	byte	$af, $70, $02, $c0, $3a, $b3, $74, $df, $10, $ff, $d0, $2f, $10, $50, $c1, $d0
17c80     3F E0 1F F5 
17c84     58 A0 2E D7 
17c88     10 2C DF 60 
17c8c     C3 10 BF 60 | 	byte	$3f, $e0, $1f, $f5, $58, $a0, $2e, $d7, $10, $2c, $df, $60, $c3, $10, $bf, $60
17c90     F0 27 C0 30 
17c94     EF 48 C0 FF 
17c98     29 00 FF 20 
17c9c     FF 20 EF E0 | 	byte	$f0, $27, $c0, $30, $ef, $48, $c0, $ff, $29, $00, $ff, $20, $ff, $20, $ef, $e0
17ca0     2F 40 B5 E7 
17ca4     2F 40 E0 F7 
17ca8     E7 10 1F 00 
17cac     20 CB 30 EF | 	byte	$2f, $40, $b5, $e7, $2f, $40, $e0, $f7, $e7, $10, $1f, $00, $20, $cb, $30, $ef
17cb0     00 FF 40 F7 
17cb4     DB 54 DF F2 
17cb8     E0 1F 20 FF 
17cbc     20 BF 10 FF | 	byte	$00, $ff, $40, $f7, $db, $54, $df, $f2, $e0, $1f, $20, $ff, $20, $bf, $10, $ff
17cc0     E5 58 B3 60 
17cc4     9F 7F A0 0F 
17cc8     CF 7F 00 D7 
17ccc     E0 1F 10 0F | 	byte	$e5, $58, $b3, $60, $9f, $7f, $a0, $0f, $cf, $7f, $00, $d7, $e0, $1f, $10, $0f
17cd0     08 22 9F 3A 
17cd4     3F D0 3F 94 
17cd8     FF 60 C7 68 
17cdc     A3 40 93 3F | 	byte	$08, $22, $9f, $3a, $3f, $d0, $3f, $94, $ff, $60, $c7, $68, $a3, $40, $93, $3f
17ce0     40 10 DF D0 
17ce4     FF 63 00 FF 
17ce8     00 FF E0 1F 
17cec     0F 30 CF 15 | 	byte	$40, $10, $df, $d0, $ff, $63, $00, $ff, $00, $ff, $e0, $1f, $0f, $30, $cf, $15
17cf0     FF 14 FB 1A 
17cf4     D0 2D 1C FF 
17cf8     30 B0 17 37 
17cfc     20 DB FF 28 | 	byte	$ff, $14, $fb, $1a, $d0, $2d, $1c, $ff, $30, $b0, $17, $37, $20, $db, $ff, $28
17d00     F3 F1 2D 20 
17d04     F3 E8 EF 17 
17d08     44 10 D3 00 
17d0c     ED 1B 5C E0 | 	byte	$f3, $f1, $2d, $20, $f3, $e8, $ef, $17, $44, $10, $d3, $00, $ed, $1b, $5c, $e0
17d10     FB EF 10 11 
17d14     05 13 18 D2 
17d18     2F 20 FB D5 
17d1c     1F 00 27 00 | 	byte	$fb, $ef, $10, $11, $05, $13, $18, $d2, $2f, $20, $fb, $d5, $1f, $00, $27, $00
17d20     FF 00 EF 18 
17d24     D7 67 08 D0 
17d28     BF 5B 08 DF 
17d2c     00 4C 00 F7 | 	byte	$ff, $00, $ef, $18, $d7, $67, $08, $d0, $bf, $5b, $08, $df, $00, $4c, $00, $f7
17d30     D0 3F 08 FD 
17d34     F6 17 EB 2F 
17d38     00 DF 38 FD 
17d3c     E0 3C D1 0A | 	byte	$d0, $3f, $08, $fd, $f6, $17, $eb, $2f, $00, $df, $38, $fd, $e0, $3c, $d1, $0a
17d40     1F 38 C0 2F 
17d44     E0 20 0F 00 
17d48     EF 30 20 CF 
17d4c     24 F7 17 10 | 	byte	$1f, $38, $c0, $2f, $e0, $20, $0f, $00, $ef, $30, $20, $cf, $24, $f7, $17, $10
17d50     02 FF 10 0F 
17d54     00 0F 10 EF 
17d58     10 1D 18 F0 
17d5c     DB 1F 40 00 | 	byte	$02, $ff, $10, $0f, $00, $0f, $10, $ef, $10, $1d, $18, $f0, $db, $1f, $40, $00
17d60     EF FB 28 0A 
17d64     E9 1F 20 00 
17d68     ED FB 27 24 
17d6c     00 EB 0D 0F | 	byte	$ef, $fb, $28, $0a, $e9, $1f, $20, $00, $ed, $fb, $27, $24, $00, $eb, $0d, $0f
17d70     18 1B 04 00 
17d74     F8 1B 1C E8 
17d78     0F 10 0B 24 
17d7c     E0 17 14 F8 | 	byte	$18, $1b, $04, $00, $f8, $1b, $1c, $e8, $0f, $10, $0b, $24, $e0, $17, $14, $f8
17d80     F7 3F 20 ED 
17d84     E8 0F 3B 00 
17d88     DF 3D 38 E4 
17d8c     DF 0B 22 02 | 	byte	$f7, $3f, $20, $ed, $e8, $0f, $3b, $00, $df, $3d, $38, $e4, $df, $0b, $22, $02
17d90     23 10 FF 00 
17d94     FF F4 2F 28 
17d98     F0 DF 30 18 
17d9c     E0 17 0F 30 | 	byte	$23, $10, $ff, $00, $ff, $f4, $2f, $28, $f0, $df, $30, $18, $e0, $17, $0f, $30
17da0     EF 09 F0 FF 
17da4     3E 10 F8 FA 
17da8     EC 2F 30 DF 
17dac     20 EF 34 E8 | 	byte	$ef, $09, $f0, $ff, $3e, $10, $f8, $fa, $ec, $2f, $30, $df, $20, $ef, $34, $e8
17db0     0F 09 07 10 
17db4     FF 00 2F 00 
17db8     FF 00 1F 10 
17dbc     F7 00 2F 18 | 	byte	$0f, $09, $07, $10, $ff, $00, $2f, $00, $ff, $00, $1f, $10, $f7, $00, $2f, $18
17dc0     D5 13 27 30 
17dc4     E3 12 F7 20 
17dc8     FF 1F 10 FF 
17dcc     F2 10 0F 18 | 	byte	$d5, $13, $27, $30, $e3, $12, $f7, $20, $ff, $1f, $10, $ff, $f2, $10, $0f, $18
17dd0     17 00 E7 17 
17dd4     20 FF 28 F7 
17dd8     EA 17 18 1A 
17ddc     FA FA 3C F0 | 	byte	$17, $00, $e7, $17, $20, $ff, $28, $f7, $ea, $17, $18, $1a, $fa, $fa, $3c, $f0
17de0     17 DB 40 DD 
17de4     3D D4 4F D0 
17de8     0F 13 20 EF 
17dec     04 2D 08 00 | 	byte	$17, $db, $40, $dd, $3d, $d4, $4f, $d0, $0f, $13, $20, $ef, $04, $2d, $08, $00
17df0     FF 10 EF 30 
17df4     16 F5 10 CF 
17df8     44 EF 27 19 
17dfc     E0 EF 60 D8 | 	byte	$ff, $10, $ef, $30, $16, $f5, $10, $cf, $44, $ef, $27, $19, $e0, $ef, $60, $d8
17e00     0F 07 28 F7 
17e04     F3 11 18 EF 
17e08     2F 04 13 E4 
17e0c     FF 27 20 E0 | 	byte	$0f, $07, $28, $f7, $f3, $11, $18, $ef, $2f, $04, $13, $e4, $ff, $27, $20, $e0
17e10     27 20 EF 10 
17e14     EF 20 FF 20 
17e18     C7 64 D4 3D 
17e1c     C0 3F E7 34 | 	byte	$27, $20, $ef, $10, $ef, $20, $ff, $20, $c7, $64, $d4, $3d, $c0, $3f, $e7, $34
17e20     DF 14 FF 10 
17e24     F2 2B 10 0B 
17e28     F0 0F 08 0B 
17e2c     00 2B 20 CB | 	byte	$df, $14, $ff, $10, $f2, $2b, $10, $0b, $f0, $0f, $08, $0b, $00, $2b, $20, $cb
17e30     34 07 00 1B 
17e34     E7 38 F3 0C 
17e38     05 F0 37 00 
17e3c     14 F8 0C F9 | 	byte	$34, $07, $00, $1b, $e7, $38, $f3, $0c, $05, $f0, $37, $00, $14, $f8, $0c, $f9
17e40     1F 08 17 00 
17e44     EB 04 2F 28 
17e48     E3 20 DF 20 
17e4c     07 11 1A E4 | 	byte	$1f, $08, $17, $00, $eb, $04, $2f, $28, $e3, $20, $df, $20, $07, $11, $1a, $e4
17e50     1F 0B 04 17 
17e54     E8 1F 00 13 
17e58     13 00 1F 20 
17e5c     DF 40 FF 10 | 	byte	$1f, $0b, $04, $17, $e8, $1f, $00, $13, $13, $00, $1f, $20, $df, $40, $ff, $10
17e60     FF 20 FB 18 
17e64     E8 0F 42 F0 
17e68     FF F9 0C 2D 
17e6c     F0 0D 1C F4 | 	byte	$ff, $20, $fb, $18, $e8, $0f, $42, $f0, $ff, $f9, $0c, $2d, $f0, $0d, $1c, $f4
17e70     1B E8 2F 00 
17e74     17 F0 1D EF 
17e78     20 07 10 D7 
17e7c     3B 12 18 CF | 	byte	$1b, $e8, $2f, $00, $17, $f0, $1d, $ef, $20, $07, $10, $d7, $3b, $12, $18, $cf
17e80     30 DD 28 20 
17e84     D6 35 F0 01 
17e88     0A 0F 28 06 
17e8c     E0 17 08 0F | 	byte	$30, $dd, $28, $20, $d6, $35, $f0, $01, $0a, $0f, $28, $06, $e0, $17, $08, $0f
17e90     FB 38 FB E5 
17e94     F4 2F 20 E7 
17e98     1B 00 FA 2C 
17e9c     00 EF 30 ED | 	byte	$fb, $38, $fb, $e5, $f4, $2f, $20, $e7, $1b, $00, $fa, $2c, $00, $ef, $30, $ed
17ea0     23 05 02 FF 
17ea4     00 FF 30 F1 
17ea8     0D E8 15 2E 
17eac     08 FF 00 0B | 	byte	$23, $05, $02, $ff, $00, $ff, $30, $f1, $0d, $e8, $15, $2e, $08, $ff, $00, $0b
17eb0     08 17 08 FF 
17eb4     10 0B 0F 08 
17eb8     0D 00 0F 1F 
17ebc     00 FF 00 FF | 	byte	$08, $17, $08, $ff, $10, $0b, $0f, $08, $0d, $00, $0f, $1f, $00, $ff, $00, $ff
17ec0     10 FF 20 FF 
17ec4     08 FF 23 F4 
17ec8     FF 20 F5 32 
17ecc     E7 1B F6 08 | 	byte	$10, $ff, $20, $ff, $08, $ff, $23, $f4, $ff, $20, $f5, $32, $e7, $1b, $f6, $08
17ed0     23 F9 10 FF 
17ed4     08 FF 10 FF 
17ed8     1C F7 04 0F 
17edc     F0 2F 10 EB | 	byte	$23, $f9, $10, $ff, $08, $ff, $10, $ff, $1c, $f7, $04, $0f, $f0, $2f, $10, $eb
17ee0     10 F7 3A F0 
17ee4     EF 26 00 19 
17ee8     E9 18 FF 28 
17eec     F0 0F 00 2F | 	byte	$10, $f7, $3a, $f0, $ef, $26, $00, $19, $e9, $18, $ff, $28, $f0, $0f, $00, $2f
17ef0     00 F6 0F 20 
17ef4     EF 12 1D F0 
17ef8     FF 1B F4 2C 
17efc     E2 1B FF 04 | 	byte	$00, $f6, $0f, $20, $ef, $12, $1d, $f0, $ff, $1b, $f4, $2c, $e2, $1b, $ff, $04
17f00     17 00 F9 1D 
17f04     08 17 04 F7 
17f08     00 16 F8 3E 
17f0c     E8 F7 10 0F | 	byte	$17, $00, $f9, $1d, $08, $17, $04, $f7, $00, $16, $f8, $3e, $e8, $f7, $10, $0f
17f10     0F 20 DF 28 
17f14     DF 3C E0 2A 
17f18     E4 14 0D 00 
17f1c     1B 20 EF 0B | 	byte	$0f, $20, $df, $28, $df, $3c, $e0, $2a, $e4, $14, $0d, $00, $1b, $20, $ef, $0b
17f20     00 1F 08 FF 
17f24     20 EF 18 F7 
17f28     10 FF 24 EB 
17f2c     15 EF 27 08 | 	byte	$00, $1f, $08, $ff, $20, $ef, $18, $f7, $10, $ff, $24, $eb, $15, $ef, $27, $08
17f30     F0 17 00 17 
17f34     00 15 04 0B 
17f38     00 0E ED 27 
17f3c     00 FF 28 DB | 	byte	$f0, $17, $00, $17, $00, $15, $04, $0b, $00, $0e, $ed, $27, $00, $ff, $28, $db
17f40     0C 16 07 20 
17f44     EF 06 0F 18 
17f48     00 FF 02 1F 
17f4c     F0 09 0F 08 | 	byte	$0c, $16, $07, $20, $ef, $06, $0f, $18, $00, $ff, $02, $1f, $f0, $09, $0f, $08
17f50     07 FB 1C F8 
17f54     0F F8 0F 18 
17f58     F0 0F 08 0F 
17f5c     10 F7 FF 20 | 	byte	$07, $fb, $1c, $f8, $0f, $f8, $0f, $18, $f0, $0f, $08, $0f, $10, $f7, $ff, $20
17f60     EF 20 F7 11 
17f64     14 E8 17 04 
17f68     12 0B E8 2F 
17f6c     00 F7 08 10 | 	byte	$ef, $20, $f7, $11, $14, $e8, $17, $04, $12, $0b, $e8, $2f, $00, $f7, $08, $10
17f70     FF 08 FF 04 
17f74     07 0B 0A FF 
17f78     04 18 E5 2C 
17f7c     E7 1C FB 00 | 	byte	$ff, $08, $ff, $04, $07, $0b, $0a, $ff, $04, $18, $e5, $2c, $e7, $1c, $fb, $00
17f80     17 F0 37 E8 
17f84     0F E8 1F 00 
17f88     00 FF 20 E7 
17f8c     10 FF 14 FD | 	byte	$17, $f0, $37, $e8, $0f, $e8, $1f, $00, $00, $ff, $20, $e7, $10, $ff, $14, $fd
17f90     10 EF 20 F3 
17f94     20 EF 0C 0F 
17f98     F3 2E E0 25 
17f9c     F0 F9 1F F0 | 	byte	$10, $ef, $20, $f3, $20, $ef, $0c, $0f, $f3, $2e, $e0, $25, $f0, $f9, $1f, $f0
17fa0     13 0D 00 FF 
17fa4     00 FF 05 14 
17fa8     0D 00 F7 20 
17fac     F7 10 FF 03 | 	byte	$13, $0d, $00, $ff, $00, $ff, $05, $14, $0d, $00, $f7, $20, $f7, $10, $ff, $03
17fb0     18 F7 00 0F 
17fb4     14 F8 0F F1 
17fb8     1F 00 FE 0B 
17fbc     10 00 FB 0F | 	byte	$18, $f7, $00, $0f, $14, $f8, $0f, $f1, $1f, $00, $fe, $0b, $10, $00, $fb, $0f
17fc0     0C 0F 00 FF 
17fc4     0C 09 FD 20 
17fc8     EF 14 FE F0 
17fcc     1F 00 0A FB | 	byte	$0c, $0f, $00, $ff, $0c, $09, $fd, $20, $ef, $14, $fe, $f0, $1f, $00, $0a, $fb
17fd0     02 17 00 07 
17fd4     01 15 F7 05 
17fd8     0F 04 04 07 
17fdc     04 FF 10 0F | 	byte	$02, $17, $00, $07, $01, $15, $f7, $05, $0f, $04, $04, $07, $04, $ff, $10, $0f
17fe0     F9 0F 02 07 
17fe4     10 F7 10 FB 
17fe8     18 F2 13 F2 
17fec     22 F8 06 07 | 	byte	$f9, $0f, $02, $07, $10, $f7, $10, $fb, $18, $f2, $13, $f2, $22, $f8, $06, $07
17ff0     0A FB 11 07 
17ff4     00 FF 10 07 
17ff8     05 02 06 06 
17ffc     08 10 F9 16 | 	byte	$0a, $fb, $11, $07, $00, $ff, $10, $07, $05, $02, $06, $06, $08, $10, $f9, $16
18000     EE 0B 12 F8 
18004     11 03 04 0F 
18008     00 FF 04 11 
1800c     0B F5 0F 0A | 	byte	$ee, $0b, $12, $f8, $11, $03, $04, $0f, $00, $ff, $04, $11, $0b, $f5, $0f, $0a
18010     EF 1F F0 09 
18014     16 F1 22 EA 
18018     10 FF 08 07 
1801c     FE 0A 0F 00 | 	byte	$ef, $1f, $f0, $09, $16, $f1, $22, $ea, $10, $ff, $08, $07, $fe, $0a, $0f, $00
18020     FE 06 10 08 
18024     F5 14 06 0E 
18028     F4 FF 10 06 
1802c     0D 08 FB 08 | 	byte	$fe, $06, $10, $08, $f5, $14, $06, $0e, $f4, $ff, $10, $06, $0d, $08, $fb, $08
18030     07 0A 0B F9 
18034     16 00 FF 09 
18038     0B 0C F4 0B 
1803c     10 0A 0E 00 | 	byte	$07, $0a, $0b, $f9, $16, $00, $ff, $09, $0b, $0c, $f4, $0b, $10, $0a, $0e, $00
18040     FF 18 09 FB 
18044     10 FF 0E FB 
18048     FF 11 06 0F 
1804c     02 09 01 10 | 	byte	$ff, $18, $09, $fb, $10, $ff, $0e, $fb, $ff, $11, $06, $0f, $02, $09, $01, $10
18050     00 0F 09 15 
18054     F5 FF 11 0C 
18058     07 04 F7 14 
1805c     0E 04 0A 06 | 	byte	$00, $0f, $09, $15, $f5, $ff, $11, $0c, $07, $04, $f7, $14, $0e, $04, $0a, $06
18060     00 07 12 04 
18064     10 00 00 0F 
18068     10 FF 08 FF 
1806c     12 02 07 0A | 	byte	$00, $07, $12, $04, $10, $00, $00, $0f, $10, $ff, $08, $ff, $12, $02, $07, $0a
18070     0E 00 04 08 
18074     11 07 0A F7 
18078     12 0C 00 17 
1807c     00 07 0B 0C | 	byte	$0e, $00, $04, $08, $11, $07, $0a, $f7, $12, $0c, $00, $17, $00, $07, $0b, $0c
18080     08 09 FD 16 
18084     02 05 07 08 
18088     0B 0C 06 0B 
1808c     08 0C 00 FF | 	byte	$08, $09, $fd, $16, $02, $05, $07, $08, $0b, $0c, $06, $0b, $08, $0c, $00, $ff
18090     13 06 04 0E 
18094     09 08 05 0D 
18098     04 0B 04 1F 
1809c     00 FB 09 16 | 	byte	$13, $06, $04, $0e, $09, $08, $05, $0d, $04, $0b, $04, $1f, $00, $fb, $09, $16
180a0     FC 0A 0B 0B 
180a4     10 00 09 FD 
180a8     1B 07 04 0A 
180ac     09 12 00 02 | 	byte	$fc, $0a, $0b, $0b, $10, $00, $09, $fd, $1b, $07, $04, $0a, $09, $12, $00, $02
180b0     13 0C 03 0A 
180b4     0E 06 04 0D 
180b8     07 11 05 01 
180bc     0A 10 12 02 | 	byte	$13, $0c, $03, $0a, $0e, $06, $04, $0d, $07, $11, $05, $01, $0a, $10, $12, $02
180c0     07 FA 17 0C 
180c4     09 09 04 03 
180c8     0A 11 11 00 
180cc     06 05 0B 14 | 	byte	$07, $fa, $17, $0c, $09, $09, $04, $03, $0a, $11, $11, $00, $06, $05, $0b, $14
180d0     09 08 FB 10 
180d4     0A 05 0A 0B 
180d8     0B 05 07 10 
180dc     08 01 09 0C | 	byte	$09, $08, $fb, $10, $0a, $05, $0a, $0b, $0b, $05, $07, $10, $08, $01, $09, $0c
180e0     0C 09 09 07 
180e4     02 0B 10 05 
180e8     01 0F 0C 05 
180ec     0A 00 0F 08 | 	byte	$0c, $09, $09, $07, $02, $0b, $10, $05, $01, $0f, $0c, $05, $0a, $00, $0f, $08
180f0     0F 08 06 0A 
180f4     09 09 00 0F 
180f8     10 FF 04 0F 
180fc     08 0D FB 10 | 	byte	$0f, $08, $06, $0a, $09, $09, $00, $0f, $10, $ff, $04, $0f, $08, $0d, $fb, $10
18100     02 0B 0F 0C 
18104     00 06 0E 06 
18108     07 0D 06 01 
1810c     0C 04 11 08 | 	byte	$02, $0b, $0f, $0c, $00, $06, $0e, $06, $07, $0d, $06, $01, $0c, $04, $11, $08
18110     03 10 09 03 
18114     13 00 07 04 
18118     0F 0D 05 0C 
1811c     05 03 0D 0C | 	byte	$03, $10, $09, $03, $13, $00, $07, $04, $0f, $0d, $05, $0c, $05, $03, $0d, $0c
18120     08 0B 00 0A 
18124     0C 13 06 04 
18128     05 09 0F 08 
1812c     0E 0A 08 FF | 	byte	$08, $0b, $00, $0a, $0c, $13, $06, $04, $05, $09, $0f, $08, $0e, $0a, $08, $ff
18130     10 0D 08 08 
18134     04 0D 0B 10 
18138     04 08 07 0D 
1813c     0C 08 0D 0D | 	byte	$10, $0d, $08, $08, $04, $0d, $0b, $10, $04, $08, $07, $0d, $0c, $08, $0d, $0d
18140     02 09 0D 0E 
18144     07 07 0C 0C 
18148     07 0E 07 07 
1814c     10 05 15 00 | 	byte	$02, $09, $0d, $0e, $07, $07, $0c, $0c, $07, $0e, $07, $07, $10, $05, $15, $00
18150     0F 07 10 FF 
18154     0E 07 0E 0C 
18158     0A 11 02 07 
1815c     0C 0B 11 06 | 	byte	$0f, $07, $10, $ff, $0e, $07, $0e, $0c, $0a, $11, $02, $07, $0c, $0b, $11, $06
18160     10 FE 0F 0B 
18164     0C 07 08 0B 
18168     08 0B 10 09 
1816c     00 0C 10 0B | 	byte	$10, $fe, $0f, $0b, $0c, $07, $08, $0b, $08, $0b, $10, $09, $00, $0c, $10, $0b
18170     0B 0C 03 08 
18174     0F 08 0E 0D 
18178     FB 15 00 0F 
1817c     10 05 04 0C | 	byte	$0b, $0c, $03, $08, $0f, $08, $0e, $0d, $fb, $15, $00, $0f, $10, $05, $04, $0c
18180     00 00 00 00 
18184     00 00 00 00 
18188     00          | 	byte	$00[9]
18189     FF 00 FE 00 
1818d     FD ED F5 E1 
18191     F9 F9 E0 FC 
18195     04 D5 04 F9 | 	byte	$ff, $00, $fe, $00, $fd, $ed, $f5, $e1, $f9, $f9, $e0, $fc, $04, $d5, $04, $f9
18199     E5 02 08 1E 
1819d     08 E5 EC 15 
181a1     07 F8 BA EE 
181a5     FE F9 1F 0B | 	byte	$e5, $02, $08, $1e, $08, $e5, $ec, $15, $07, $f8, $ba, $ee, $fe, $f9, $1f, $0b
181a9     DB 01 D8 06 
181ad     07 E4 ED F4 
181b1     39 15 B9 F2 
181b5     FA DA 13 0B | 	byte	$db, $01, $d8, $06, $07, $e4, $ed, $f4, $39, $15, $b9, $f2, $fa, $da, $13, $0b
181b9     FF 08 D8 EA 
181bd     FB C1 E3 F2 
181c1     03 11 E1 0A 
181c5     EB 16 5F 16 | 	byte	$ff, $08, $d8, $ea, $fb, $c1, $e3, $f2, $03, $11, $e1, $0a, $eb, $16, $5f, $16
181c9     D9 00 C8 EA 
181cd     0D DC DF DF 
181d1     FB 2D F7 0F 
181d5     FC B0 1A F1 | 	byte	$d9, $00, $c8, $ea, $0d, $dc, $df, $df, $fb, $2d, $f7, $0f, $fc, $b0, $1a, $f1
181d9     EA 01 E5 17 
181dd     3E A7 D5 00 
181e1     27 E4 D2 04 
181e5     D1 DD 3B 1C | 	byte	$ea, $01, $e5, $17, $3e, $a7, $d5, $00, $27, $e4, $d2, $04, $d1, $dd, $3b, $1c
181e9     ED F9 BE 24 
181ed     2B FE F1 16 
181f1     24 16 B9 C9 
181f5     C7 BC 08 ED | 	byte	$ed, $f9, $be, $24, $2b, $fe, $f1, $16, $24, $16, $b9, $c9, $c7, $bc, $08, $ed
181f9     05 14 BA E3 
181fd     30 A8 D6 21 
18201     E0 0D 01 15 
18205     1D 2A 7F 16 | 	byte	$05, $14, $ba, $e3, $30, $a8, $d6, $21, $e0, $0d, $01, $15, $1d, $2a, $7f, $16
18209     E6 F5 A9 FC 
1820d     E3 B7 D1 F7 
18211     C2 0B DA F7 
18215     D4 DD FD FE | 	byte	$e6, $f5, $a9, $fc, $e3, $b7, $d1, $f7, $c2, $0b, $da, $f7, $d4, $dd, $fd, $fe
18219     27 F8 DF 26 
1821d     42 C1 FF 2A 
18221     E7 CB F3 FC 
18225     10 EE 3F 0B | 	byte	$27, $f8, $df, $26, $42, $c1, $ff, $2a, $e7, $cb, $f3, $fc, $10, $ee, $3f, $0b
18229     EE E1 B6 00 
1822d     0E D9 FD 35 
18231     F0 24 D5 D5 
18235     F2 CC EE 07 | 	byte	$ee, $e1, $b6, $00, $0e, $d9, $fd, $35, $f0, $24, $d5, $d5, $f2, $cc, $ee, $07
18239     27 1C B3 FE 
1823d     02 B6 E4 08 
18241     EE FD 06 F1 
18245     21 21 41 16 | 	byte	$27, $1c, $b3, $fe, $02, $b6, $e4, $08, $ee, $fd, $06, $f1, $21, $21, $41, $16
18249     0E D2 CA 0E 
1824d     E5 CF FE 15 
18251     E1 31 FC D5 
18255     DC CF E1 04 | 	byte	$0e, $d2, $ca, $0e, $e5, $cf, $fe, $15, $e1, $31, $fc, $d5, $dc, $cf, $e1, $04
18259     F1 09 ED 5B 
1825d     35 BB F2 F5 
18261     C5 E8 E7 DA 
18265     1F EE 35 2B | 	byte	$f1, $09, $ed, $5b, $35, $bb, $f2, $f5, $c5, $e8, $e7, $da, $1f, $ee, $35, $2b
18269     1A ED DF 0F 
1826d     F6 D4 FA 13 
18271     15 2E DC CE 
18275     DD E4 D3 13 | 	byte	$1a, $ed, $df, $0f, $f6, $d4, $fa, $13, $15, $2e, $dc, $ce, $dd, $e4, $d3, $13
18279     1C FB CF 13 
1827d     FB CF F0 DF 
18281     DE 1C 15 16 
18285     65 35 29 31 | 	byte	$1c, $fb, $cf, $13, $fb, $cf, $f0, $df, $de, $1c, $15, $16, $65, $35, $29, $31
18289     E6 C8 BD D0 
1828d     E3 AC 0F FC 
18291     F8 36 F7 DD 
18295     F4 CE DA 01 | 	byte	$e6, $c8, $bd, $d0, $e3, $ac, $0f, $fc, $f8, $36, $f7, $dd, $f4, $ce, $da, $01
18299     FB 03 17 53 
1829d     2A 0E 04 E9 
182a1     CA F7 CC FE 
182a5     20 FC 0F 24 | 	byte	$fb, $03, $17, $53, $2a, $0e, $04, $e9, $ca, $f7, $cc, $fe, $20, $fc, $0f, $24
182a9     05 D6 E7 EA 
182ad     ED CF 13 27 
182b1     0B 31 D2 D8 
182b5     FD D6 03 31 | 	byte	$05, $d6, $e7, $ea, $ed, $cf, $13, $27, $0b, $31, $d2, $d8, $fd, $d6, $03, $31
182b9     0F F7 ED F4 
182bd     FC D2 D0 EA 
182c1     C8 18 CF 2C 
182c5     5A 3D 43 45 | 	byte	$0f, $f7, $ed, $f4, $fc, $d2, $d0, $ea, $c8, $18, $cf, $2c, $5a, $3d, $43, $45
182c9     E9 C1 CD E0 
182cd     DA EB 15 17 
182d1     23 26 D6 C9 
182d5     FE AA F5 FC | 	byte	$e9, $c1, $cd, $e0, $da, $eb, $15, $17, $23, $26, $d6, $c9, $fe, $aa, $f5, $fc
182d9     01 0B 35 2B 
182dd     27 E2 C4 E6 
182e1     B6 FE BA 0A 
182e5     38 05 40 47 | 	byte	$01, $0b, $35, $2b, $27, $e2, $c4, $e6, $b6, $fe, $ba, $0a, $38, $05, $40, $47
182e9     05 0A E6 E1 
182ed     DC D8 F8 1C 
182f1     2B 18 F0 EA 
182f5     01 C0 10 03 | 	byte	$05, $0a, $e6, $e1, $dc, $d8, $f8, $1c, $2b, $18, $f0, $ea, $01, $c0, $10, $03
182f9     ED F4 09 FC 
182fd     00 E1 BB FB 
18301     DC 1A FF 37 
18305     5E 26 46 39 | 	byte	$ed, $f4, $09, $fc, $00, $e1, $bb, $fb, $dc, $1a, $ff, $37, $5e, $26, $46, $39
18309     B7 E2 A6 D5 
1830d     E5 EB F4 30 
18311     06 08 D9 D7 
18315     05 AA 01 FB | 	byte	$b7, $e2, $a6, $d5, $e5, $eb, $f4, $30, $06, $08, $d9, $d7, $05, $aa, $01, $fb
18319     F5 32 40 58 
1831d     4D F0 D5 C7 
18321     C7 CC DF 09 
18325     3C 26 45 37 | 	byte	$f5, $32, $40, $58, $4d, $f0, $d5, $c7, $c7, $cc, $df, $09, $3c, $26, $45, $37
18329     D8 F1 C2 CA 
1832d     DA D5 E3 31 
18331     31 10 01 F9 
18335     12 F5 19 1A | 	byte	$d8, $f1, $c2, $ca, $da, $d5, $e3, $31, $31, $10, $01, $f9, $12, $f5, $19, $1a
18339     C0 09 F7 E7 
1833d     28 A9 D4 F4 
18341     E3 FA 07 20 
18345     4C 3D 5B 26 | 	byte	$c0, $09, $f7, $e7, $28, $a9, $d4, $f4, $e3, $fa, $07, $20, $4c, $3d, $5b, $26
18349     BA D7 9B D6 
1834d     FB F1 16 55 
18351     09 FE D7 DC 
18355     D0 DE E7 FF | 	byte	$ba, $d7, $9b, $d6, $fb, $f1, $16, $55, $09, $fe, $d7, $dc, $d0, $de, $e7, $ff
18359     DC 1D 40 38 
1835d     4B C4 B1 D9 
18361     B6 CF 05 FF 
18365     43 3F 5A 4D | 	byte	$dc, $1d, $40, $38, $4b, $c4, $b1, $d9, $b6, $cf, $05, $ff, $43, $3f, $5a, $4d
18369     FB ED CF B2 
1836d     F0 A9 F3 38 
18371     13 24 02 F8 
18375     E7 EB FD 02 | 	byte	$fb, $ed, $cf, $b2, $f0, $a9, $f3, $38, $13, $24, $02, $f8, $e7, $eb, $fd, $02
18379     CF 04 F2 FF 
1837d     13 A5 C8 16 
18381     E1 0F 2D 0B 
18385     35 56 41 28 | 	byte	$cf, $04, $f2, $ff, $13, $a5, $c8, $16, $e1, $0f, $2d, $0b, $35, $56, $41, $28
18389     DA A3 BC C5 
1838d     0F E0 0E 50 
18391     E0 F8 EC C5 
18395     E4 EA E6 1F | 	byte	$da, $a3, $bc, $c5, $0f, $e0, $0e, $50, $e0, $f8, $ec, $c5, $e4, $ea, $e6, $1f
18399     ED 31 48 66 
1839d     44 BA A7 E4 
183a1     90 E5 05 FC 
183a5     47 49 4D 28 | 	byte	$ed, $31, $48, $66, $44, $ba, $a7, $e4, $90, $e5, $05, $fc, $47, $49, $4d, $28
183a9     F4 A9 C4 BA 
183ad     E1 A9 FB 3F 
183b1     15 2B 2C FB 
183b5     0F FD EC 00 | 	byte	$f4, $a9, $c4, $ba, $e1, $a9, $fb, $3f, $15, $2b, $2c, $fb, $0f, $fd, $ec, $00
183b9     DC E6 FC 10 
183bd     F9 BC C5 31 
183c1     C6 0A 1D F0 
183c5     37 50 46 3D | 	byte	$dc, $e6, $fc, $10, $f9, $bc, $c5, $31, $c6, $0a, $1d, $f0, $37, $50, $46, $3d
183c9     E6 A1 BE D8 
183cd     05 F1 30 3F 
183d1     F0 E7 E7 C2 
183d5     E9 ED EE 24 | 	byte	$e6, $a1, $be, $d8, $05, $f1, $30, $3f, $f0, $e7, $e7, $c2, $e9, $ed, $ee, $24
183d9     FB 05 23 54 
183dd     05 C8 AD E8 
183e1     9E EB 15 0F 
183e5     4E 6B 51 56 | 	byte	$fb, $05, $23, $54, $05, $c8, $ad, $e8, $9e, $eb, $15, $0f, $4e, $6b, $51, $56
183e9     F9 A1 C9 BA 
183ed     D2 BA FE 20 
183f1     1A 37 3C F8 
183f5     07 D6 D8 01 | 	byte	$f9, $a1, $c9, $ba, $d2, $ba, $fe, $20, $1a, $37, $3c, $f8, $07, $d6, $d8, $01
183f9     E5 E3 05 19 
183fd     E6 C4 E3 1A 
18401     F2 1F 16 05 
18405     1A 43 3C 45 | 	byte	$e5, $e3, $05, $19, $e6, $c4, $e3, $1a, $f2, $1f, $16, $05, $1a, $43, $3c, $45
18409     EB 97 D8 E7 
1840d     EE FB 0C 12 
18411     F4 E1 01 D1 
18415     FF E9 E7 3F | 	byte	$eb, $97, $d8, $e7, $ee, $fb, $0c, $12, $f4, $e1, $01, $d1, $ff, $e9, $e7, $3f
18419     07 0A 4C 4D 
1841d     0A CA AD C2 
18421     A7 EE 03 1F 
18425     53 59 35 3C | 	byte	$07, $0a, $4c, $4d, $0a, $ca, $ad, $c2, $a7, $ee, $03, $1f, $53, $59, $35, $3c
18429     C4 99 C8 D6 
1842d     DC E3 FB 0F 
18431     32 3E 43 15 
18435     09 DA DC 04 | 	byte	$c4, $99, $c8, $d6, $dc, $e3, $fb, $0f, $32, $3e, $43, $15, $09, $da, $dc, $04
18439     DC C8 24 00 
1843d     FA DF D5 05 
18441     E5 F4 12 FE 
18445     2B 40 2F 5B | 	byte	$dc, $c8, $24, $00, $fa, $df, $d5, $05, $e5, $f4, $12, $fe, $2b, $40, $2f, $5b
18449     C7 A6 E0 E5 
1844d     0A 0C 01 1A 
18451     EA ED ED DA 
18455     F2 E2 0C 40 | 	byte	$c7, $a6, $e0, $e5, $0a, $0c, $01, $1a, $ea, $ed, $ed, $da, $f2, $e2, $0c, $40
18459     04 E9 22 18 
1845d     07 D1 B8 D2 
18461     D2 E7 1D 27 
18465     52 5F 43 4E | 	byte	$04, $e9, $22, $18, $07, $d1, $b8, $d2, $d2, $e7, $1d, $27, $52, $5f, $43, $4e
18469     BE 8B C8 BF 
1846d     D8 02 E0 2D 
18471     29 2F 3F 00 
18475     ED CA DD 19 | 	byte	$be, $8b, $c8, $bf, $d8, $02, $e0, $2d, $29, $2f, $3f, $00, $ed, $ca, $dd, $19
18479     D6 D5 18 F8 
1847d     04 E7 DB 1B 
18481     00 EF 27 00 
18485     26 29 3D 47 | 	byte	$d6, $d5, $18, $f8, $04, $e7, $db, $1b, $00, $ef, $27, $00, $26, $29, $3d, $47
18489     E0 AF DF E4 
1848d     F0 00 DC 09 
18491     F2 E1 09 01 
18495     EB 01 02 44 | 	byte	$e0, $af, $df, $e4, $f0, $00, $dc, $09, $f2, $e1, $09, $01, $eb, $01, $02, $44
18499     17 F9 1F 0D 
1849d     F8 D6 B0 DF 
184a1     DE DA 35 29 
184a5     4C 46 26 25 | 	byte	$17, $f9, $1f, $0d, $f8, $d6, $b0, $df, $de, $da, $35, $29, $4c, $46, $26, $25
184a9     C1 92 CD D6 
184ad     ED 0C F4 1B 
184b1     27 27 4E 24 
184b5     E0 E4 DA 07 | 	byte	$c1, $92, $cd, $d6, $ed, $0c, $f4, $1b, $27, $27, $4e, $24, $e0, $e4, $da, $07
184b9     E3 D8 FD 05 
184bd     FC FB DD FC 
184c1     F4 C8 16 17 
184c5     16 34 49 3F | 	byte	$e3, $d8, $fd, $05, $fc, $fb, $dd, $fc, $f4, $c8, $16, $17, $16, $34, $49, $3f
184c9     F1 B2 EB F5 
184cd     02 0E E2 F9 
184d1     ED CF 0C 0C 
184d5     EA 11 13 30 | 	byte	$f1, $b2, $eb, $f5, $02, $0e, $e2, $f9, $ed, $cf, $0c, $0c, $ea, $11, $13, $30
184d9     07 E9 E7 02 
184dd     EF ED CC F5 
184e1     F2 E6 2A 39 
184e5     39 53 34 09 | 	byte	$07, $e9, $e7, $02, $ef, $ed, $cc, $f5, $f2, $e6, $2a, $39, $39, $53, $34, $09
184e9     D5 92 BF E4 
184ed     EA 05 04 13 
184f1     26 10 2E 09 
184f5     CA E9 EE 08 | 	byte	$d5, $92, $bf, $e4, $ea, $05, $04, $13, $26, $10, $2e, $09, $ca, $e9, $ee, $08
184f9     F4 E9 F3 03 
184fd     F2 FE FA 11 
18501     FC E2 0B 1A 
18505     0B 31 3E 2A | 	byte	$f4, $e9, $f3, $03, $f2, $fe, $fa, $11, $fc, $e2, $0b, $1a, $0b, $31, $3e, $2a
18509     FE C5 D5 F2 
1850d     E9 E1 E2 F0 
18511     02 EE 17 1D 
18515     F0 0C 1F 24 | 	byte	$fe, $c5, $d5, $f2, $e9, $e1, $e2, $f0, $02, $ee, $17, $1d, $f0, $0c, $1f, $24
18519     19 F0 DA FD 
1851d     E7 E9 DD F6 
18521     F5 F9 2B 30 
18525     19 35 1C FC | 	byte	$19, $f0, $da, $fd, $e7, $e9, $dd, $f6, $f5, $f9, $2b, $30, $19, $35, $1c, $fc
18529     D5 B9 CF F5 
1852d     F9 FB 04 0D 
18531     23 27 37 11 
18535     D6 DF FC FF | 	byte	$d5, $b9, $cf, $f5, $f9, $fb, $04, $0d, $23, $27, $37, $11, $d6, $df, $fc, $ff
18539     F7 EA E7 08 
1853d     F0 EB F3 F3 
18541     EE E7 0C 23 
18545     0F 3E 3C 26 | 	byte	$f7, $ea, $e7, $08, $f0, $eb, $f3, $f3, $ee, $e7, $0c, $23, $0f, $3e, $3c, $26
18549     FE D5 DF 05 
1854d     F4 E1 E6 F0 
18551     F7 F2 16 10 
18555     F9 0B 1A 11 | 	byte	$fe, $d5, $df, $05, $f4, $e1, $e6, $f0, $f7, $f2, $16, $10, $f9, $0b, $1a, $11
18559     F4 DC D8 F8 
1855d     FE EE F4 00 
18561     FD 02 21 32 
18565     27 31 17 F8 | 	byte	$f4, $dc, $d8, $f8, $fe, $ee, $f4, $00, $fd, $02, $21, $32, $27, $31, $17, $f8
18569     D5 C0 CF FF 
1856d     F6 F9 06 10 
18571     0F 0D 18 02 
18575     D6 EE 0D 09 | 	byte	$d5, $c0, $cf, $ff, $f6, $f9, $06, $10, $0f, $0d, $18, $02, $d6, $ee, $0d, $09
18579     F9 E3 EC FA 
1857d     FB F9 06 08 
18581     F3 EE 14 17 
18585     19 2D 33 20 | 	byte	$f9, $e3, $ec, $fa, $fb, $f9, $06, $08, $f3, $ee, $14, $17, $19, $2d, $33, $20
18589     EF CE CD EB 
1858d     E9 E0 EE 01 
18591     FF 03 19 13 
18595     F8 0C 2A 17 | 	byte	$ef, $ce, $cd, $eb, $e9, $e0, $ee, $01, $ff, $03, $19, $13, $f8, $0c, $2a, $17
18599     F5 D1 D4 F7 
1859d     F9 F2 FF 01 
185a1     00 02 23 1A 
185a5     06 16 0E F9 | 	byte	$f5, $d1, $d4, $f7, $f9, $f2, $ff, $01, $00, $02, $23, $1a, $06, $16, $0e, $f9
185a9     DC CB E9 07 
185ad     FC FB 02 16 
185b1     12 15 1D FB 
185b5     D8 F8 15 15 | 	byte	$dc, $cb, $e9, $07, $fc, $fb, $02, $16, $12, $15, $1d, $fb, $d8, $f8, $15, $15
185b9     EB D0 DE 00 
185bd     F9 EB F7 F9 
185c1     F0 F8 1E 1D 
185c5     13 25 33 23 | 	byte	$eb, $d0, $de, $00, $f9, $eb, $f7, $f9, $f0, $f8, $1e, $1d, $13, $25, $33, $23
185c9     FA D1 E0 FD 
185cd     EB E2 EF FB 
185d1     FD 00 14 0E 
185d5     F0 08 19 0B | 	byte	$fa, $d1, $e0, $fd, $eb, $e2, $ef, $fb, $fd, $00, $14, $0e, $f0, $08, $19, $0b
185d9     E3 C3 D9 09 
185dd     0C 05 06 FF 
185e1     FB 05 29 1F 
185e5     08 0C 0C 00 | 	byte	$e3, $c3, $d9, $09, $0c, $05, $06, $ff, $fb, $05, $29, $1f, $08, $0c, $0c, $00
185e9     E3 C8 E4 08 
185ed     FB F7 04 02 
185f1     01 0B 19 04 
185f5     DE F9 19 1A | 	byte	$e3, $c8, $e4, $08, $fb, $f7, $04, $02, $01, $0b, $19, $04, $de, $f9, $19, $1a
185f9     F0 CC DE 09 
185fd     01 F7 00 FB 
18601     F8 01 1F 19 
18605     05 12 27 28 | 	byte	$f0, $cc, $de, $09, $01, $f7, $00, $fb, $f8, $01, $1f, $19, $05, $12, $27, $28
18609     F7 BF CB F1 
1860d     EF F2 05 00 
18611     FD 01 15 0B 
18615     F4 07 1E 14 | 	byte	$f7, $bf, $cb, $f1, $ef, $f2, $05, $00, $fd, $01, $15, $0b, $f4, $07, $1e, $14
18619     E6 C1 D8 0C 
1861d     11 06 08 F7 
18621     F2 08 1D 12 
18625     F6 F5 09 12 | 	byte	$e6, $c1, $d8, $0c, $11, $06, $08, $f7, $f2, $08, $1d, $12, $f6, $f5, $09, $12
18629     F9 D6 E7 03 
1862d     FB FB 0E 0C 
18631     00 0B 18 0A 
18635     E7 E9 0B 16 | 	byte	$f9, $d6, $e7, $03, $fb, $fb, $0e, $0c, $00, $0b, $18, $0a, $e7, $e9, $0b, $16
18639     F3 CD D6 FA 
1863d     F7 F3 02 FE 
18641     FB 09 1D 20 
18645     09 04 1D 2E | 	byte	$f3, $cd, $d6, $fa, $f7, $f3, $02, $fe, $fb, $09, $1d, $20, $09, $04, $1d, $2e
18649     0B DA CC E6 
1864d     E7 F9 0F 00 
18651     F2 F9 0E 12 
18655     F8 EE 01 09 | 	byte	$0b, $da, $cc, $e6, $e7, $f9, $0f, $00, $f2, $f9, $0e, $12, $f8, $ee, $01, $09
18659     ED D3 E4 0B 
1865d     17 16 0F F7 
18661     EA 03 1F 1F 
18665     FD E6 FC 17 | 	byte	$ed, $d3, $e4, $0b, $17, $16, $0f, $f7, $ea, $03, $1f, $1f, $fd, $e6, $fc, $17
18669     03 E7 DD F2 
1866d     F3 00 0B FB 
18671     F1 FF 1C 27 
18675     00 E0 F4 09 | 	byte	$03, $e7, $dd, $f2, $f3, $00, $0b, $fb, $f1, $ff, $1c, $27, $00, $e0, $f4, $09
18679     FF DF E1 FE 
1867d     02 00 05 FE 
18681     F9 01 15 1A 
18685     04 F1 0A 27 | 	byte	$ff, $df, $e1, $fe, $02, $00, $05, $fe, $f9, $01, $15, $1a, $04, $f1, $0a, $27
18689     11 E5 CE D5 
1868d     E7 09 1B 0A 
18691     EE EE 07 1E 
18695     0D F4 FB FF | 	byte	$11, $e5, $ce, $d5, $e7, $09, $1b, $0a, $ee, $ee, $07, $1e, $0d, $f4, $fb, $ff
18699     EA DB E9 02 
1869d     14 19 17 FC 
186a1     E4 E9 05 1C 
186a5     07 EE FD 11 | 	byte	$ea, $db, $e9, $02, $14, $19, $17, $fc, $e4, $e9, $05, $1c, $07, $ee, $fd, $11
186a9     05 F0 E7 EE 
186ad     F2 08 19 10 
186b1     FA F1 10 2C 
186b5     0E E2 DD ED | 	byte	$05, $f0, $e7, $ee, $f2, $08, $19, $10, $fa, $f1, $10, $2c, $0e, $e2, $dd, $ed
186b9     F0 EB ED F3 
186bd     F5 FC 0B 11 
186c1     08 FE 07 13 
186c5     08 F8 0C 28 | 	byte	$f0, $eb, $ed, $f3, $f5, $fc, $0b, $11, $08, $fe, $07, $13, $08, $f8, $0c, $28
186c9     1C F8 D4 C9 
186cd     DD 01 1C 14 
186d1     F5 E0 F6 17 
186d5     0C F6 F0 EE | 	byte	$1c, $f8, $d4, $c9, $dd, $01, $1c, $14, $f5, $e0, $f6, $17, $0c, $f6, $f0, $ee
186d9     ED F0 FB 07 
186dd     0D 15 1B 0F 
186e1     F8 E5 F7 0B 
186e5     06 FF 08 0B | 	byte	$ed, $f0, $fb, $07, $0d, $15, $1b, $0f, $f8, $e5, $f7, $0b, $06, $ff, $08, $0b
186e9     00 EC E6 E9 
186ed     F2 FD 06 07 
186f1     F8 F6 15 32 
186f5     19 EF D9 D6 | 	byte	$00, $ec, $e6, $e9, $f2, $fd, $06, $07, $f8, $f6, $15, $32, $19, $ef, $d9, $d6
186f9     E5 F9 0B 0E 
186fd     01 F0 FB 0A 
18701     09 FE FE 04 
18705     00 00 0E 17 | 	byte	$e5, $f9, $0b, $0e, $01, $f0, $fb, $0a, $09, $fe, $fe, $04, $00, $00, $0e, $17
18709     11 FB E3 DA 
1870d     E0 F3 0B 12 
18711     01 F1 FF 15 
18715     12 02 F0 E1 | 	byte	$11, $fb, $e3, $da, $e0, $f3, $0b, $12, $01, $f1, $ff, $15, $12, $02, $f0, $e1
18719     E0 ED FF 0E 
1871d     11 10 16 10 
18721     F4 DC E1 F8 
18725     05 10 15 0A | 	byte	$e0, $ed, $ff, $0e, $11, $10, $16, $10, $f4, $dc, $e1, $f8, $05, $10, $15, $0a
18729     FB EC EA F4 
1872d     FF 07 0F 06 
18731     F5 F2 10 27 
18735     1A F9 DA C5 | 	byte	$fb, $ec, $ea, $f4, $ff, $07, $0f, $06, $f5, $f2, $10, $27, $1a, $f9, $da, $c5
18739     D1 EA 03 13 
1873d     0C 01 05 0B 
18741     01 F9 F8 FE 
18745     00 09 18 23 | 	byte	$d1, $ea, $03, $13, $0c, $01, $05, $0b, $01, $f9, $f8, $fe, $00, $09, $18, $23
18749     19 00 E7 DB 
1874d     DB E9 FF 07 
18751     00 FB 03 09 
18755     04 F9 EE E4 | 	byte	$19, $00, $e7, $db, $db, $e9, $ff, $07, $00, $fb, $03, $09, $04, $f9, $ee, $e4
18759     E9 F2 02 11 
1875d     12 14 1D 17 
18761     05 F0 E1 E2 
18765     F2 07 17 15 | 	byte	$e9, $f2, $02, $11, $12, $14, $1d, $17, $05, $f0, $e1, $e2, $f2, $07, $17, $15
18769     04 EC E1 E9 
1876d     F1 FE 09 05 
18771     FD 01 15 1F 
18775     18 FC DC C9 | 	byte	$04, $ec, $e1, $e9, $f1, $fe, $09, $05, $fd, $01, $15, $1f, $18, $fc, $dc, $c9
18779     D1 EE 11 24 
1877d     17 05 00 FA 
18781     F5 F7 F3 F7 
18785     FC 05 12 1A | 	byte	$d1, $ee, $11, $24, $17, $05, $00, $fa, $f5, $f7, $f3, $f7, $fc, $05, $12, $1a
18789     17 04 F7 EB 
1878d     DF E4 F1 F9 
18791     FD 08 17 1F 
18795     16 FB E0 D3 | 	byte	$17, $04, $f7, $eb, $df, $e4, $f1, $f9, $fd, $08, $17, $1f, $16, $fb, $e0, $d3
18799     D6 EB 06 18 
1879d     17 18 1B 0F 
187a1     FE EC DD E0 
187a5     F0 04 17 18 | 	byte	$d6, $eb, $06, $18, $17, $18, $1b, $0f, $fe, $ec, $dd, $e0, $f0, $04, $17, $18
187a9     08 F6 F0 F5 
187ad     FB 05 09 FD 
187b1     F0 F7 0B 1F 
187b5     1D 05 E7 CE | 	byte	$08, $f6, $f0, $f5, $fb, $05, $09, $fd, $f0, $f7, $0b, $1f, $1d, $05, $e7, $ce
187b9     C5 D6 FC 17 
187bd     1C 1C 15 05 
187c1     F5 EC E9 F0 
187c5     00 10 23 27 | 	byte	$c5, $d6, $fc, $17, $1c, $1c, $15, $05, $f5, $ec, $e9, $f0, $00, $10, $23, $27
187c9     16 01 F4 E9 
187cd     E1 E5 EA EB 
187d1     F0 FF 11 1C 
187d5     17 01 EE DE | 	byte	$16, $01, $f4, $e9, $e1, $e5, $ea, $eb, $f0, $ff, $11, $1c, $17, $01, $ee, $de
187d9     D5 E3 FD 10 
187dd     19 24 2C 22 
187e1     10 F6 DC D3 
187e5     D7 EB 09 19 | 	byte	$d5, $e3, $fd, $10, $19, $24, $2c, $22, $10, $f6, $dc, $d3, $d7, $eb, $09, $19
187e9     13 08 00 F5 
187ed     EE F2 F5 F5 
187f1     F5 FE 12 21 
187f5     1D 0C F7 E1 | 	byte	$13, $08, $00, $f5, $ee, $f2, $f5, $f5, $f5, $fe, $12, $21, $1d, $0c, $f7, $e1
187f9     D5 DF FA 0B 
187fd     0F 13 0E 04 
18801     F9 EE E9 EE 
18805     F7 03 13 1A | 	byte	$d5, $df, $fa, $0b, $0f, $13, $0e, $04, $f9, $ee, $e9, $ee, $f7, $03, $13, $1a
18809     13 0E 0C FF 
1880d     EF E5 E0 DE 
18811     EA 00 20 31 
18815     25 07 E9 CC | 	byte	$13, $0e, $0c, $ff, $ef, $e5, $e0, $de, $ea, $00, $20, $31, $25, $07, $e9, $cc
18819     C2 D4 F7 0F 
1881d     20 29 28 1A 
18821     04 F0 E3 E0 
18825     E4 EE 01 0C | 	byte	$c2, $d4, $f7, $0f, $20, $29, $28, $1a, $04, $f0, $e3, $e0, $e4, $ee, $01, $0c
18829     09 0C 0F 0E 
1882d     09 00 F2 E5 
18831     DE E7 02 1D 
18835     21 17 05 E9 | 	byte	$09, $0c, $0f, $0e, $09, $00, $f2, $e5, $de, $e7, $02, $1d, $21, $17, $05, $e9
18839     D2 D3 E5 FB 
1883d     0B 19 1A 10 
18841     FE EF EB F4 
18845     00 12 20 1B | 	byte	$d2, $d3, $e5, $fb, $0b, $19, $1a, $10, $fe, $ef, $eb, $f4, $00, $12, $20, $1b
18849     0B 00 FB F5 
1884d     F1 ED E7 E4 
18851     E5 F3 09 1A 
18855     19 0D FB E6 | 	byte	$0b, $00, $fb, $f5, $f1, $ed, $e7, $e4, $e5, $f3, $09, $1a, $19, $0d, $fb, $e6
18859     D8 DD F1 06 
1885d     17 29 32 2B 
18861     14 F9 E2 D6 
18865     D3 E1 F5 04 | 	byte	$d8, $dd, $f1, $06, $17, $29, $32, $2b, $14, $f9, $e2, $d6, $d3, $e1, $f5, $04
18869     09 0E 12 0C 
1886d     04 F8 EC E5 
18871     E3 EF 07 1A 
18875     1F 19 0C FE | 	byte	$09, $0e, $12, $0c, $04, $f8, $ec, $e5, $e3, $ef, $07, $1a, $1f, $19, $0c, $fe
18879     ED E7 E9 F0 
1887d     F7 FD 04 07 
18881     01 FB F9 FD 
18885     00 07 0C 07 | 	byte	$ed, $e7, $e9, $f0, $f7, $fd, $04, $07, $01, $fb, $f9, $fd, $00, $07, $0c, $07
18889     02 01 04 05 
1888d     01 F9 F0 E7 
18891     E7 F5 0B 18 
18895     16 0A F4 E1 | 	byte	$02, $01, $04, $05, $01, $f9, $f0, $e7, $e7, $f5, $0b, $18, $16, $0a, $f4, $e1
18899     D5 DA EE 05 
1889d     17 25 2A 1F 
188a1     09 F5 EA E6 
188a5     E9 F2 FA FD | 	byte	$d5, $da, $ee, $05, $17, $25, $2a, $1f, $09, $f5, $ea, $e6, $e9, $f2, $fa, $fd
188a9     00 04 0F 19 
188ad     15 08 F6 E3 
188b1     D5 D8 F0 09 
188b5     1C 23 1C 0A | 	byte	$00, $04, $0f, $19, $15, $08, $f6, $e3, $d5, $d8, $f0, $09, $1c, $23, $1c, $0a
188b9     F5 E6 E1 E6 
188bd     F0 FC 07 08 
188c1     03 FE 00 07 
188c5     10 17 16 09 | 	byte	$f5, $e6, $e1, $e6, $f0, $fc, $07, $08, $03, $fe, $00, $07, $10, $17, $16, $09
188c9     FA ED EE F2 
188cd     FB 00 00 F9 
188d1     EF ED F3 FB 
188d5     02 05 01 F9 | 	byte	$fa, $ed, $ee, $f2, $fb, $00, $00, $f9, $ef, $ed, $f3, $fb, $02, $05, $01, $f9
188d9     F1 EC F4 01 
188dd     10 20 2A 23 
188e1     0F F9 E9 E1 
188e5     E4 ED F9 FF | 	byte	$f1, $ec, $f4, $01, $10, $20, $2a, $23, $0f, $f9, $e9, $e1, $e4, $ed, $f9, $ff
188e9     01 00 04 05 
188ed     04 02 FB F0 
188f1     E7 E7 F2 04 
188f5     16 20 23 1A | 	byte	$01, $00, $04, $05, $04, $02, $fb, $f0, $e7, $e7, $f2, $04, $16, $20, $23, $1a
188f9     09 F7 EA E3 
188fd     E1 EA F1 F8 
18901     FB FE 04 0D 
18905     15 18 14 08 | 	byte	$09, $f7, $ea, $e3, $e1, $ea, $f1, $f8, $fb, $fe, $04, $0d, $15, $18, $14, $08
18909     F8 F0 EF F5 
1890d     FC 04 07 04 
18911     FF FB FB FF 
18915     FF FC F5 F0 | 	byte	$f8, $f0, $ef, $f5, $fc, $04, $07, $04, $ff, $fb, $fb, $ff, $ff, $fc, $f5, $f0
18919     E8 E8 F2 01 
1891d     10 1F 24 1A 
18921     09 F6 EA E8 
18925     F0 FB 03 04 | 	byte	$e8, $e8, $f2, $01, $10, $1f, $24, $1a, $09, $f6, $ea, $e8, $f0, $fb, $03, $04
18929     03 01 04 05 
1892d     05 04 FC F0 
18931     E6 E1 E8 FA 
18935     0C 1D 23 1A | 	byte	$03, $01, $04, $05, $05, $04, $fc, $f0, $e6, $e1, $e8, $fa, $0c, $1d, $23, $1a
18939     08 F5 E8 E0 
1893d     E3 EC F9 00 
18941     04 04 08 10 
18945     19 1D 19 0B | 	byte	$08, $f5, $e8, $e0, $e3, $ec, $f9, $00, $04, $04, $08, $10, $19, $1d, $19, $0b
18949     FB EA E5 E4 
1894d     EB FB 05 09 
18951     04 FE F8 F6 
18955     F5 F5 F9 F9 | 	byte	$fb, $ea, $e5, $e4, $eb, $fb, $05, $09, $04, $fe, $f8, $f6, $f5, $f5, $f9, $f9
18959     F5 F7 FC 04 
1895d     10 1D 21 1B 
18961     0D F9 EA E3 
18965     E7 F2 FF 04 | 	byte	$f5, $f7, $fc, $04, $10, $1d, $21, $1b, $0d, $f9, $ea, $e3, $e7, $f2, $ff, $04
18969     04 02 00 FC 
1896d     F8 F9 F8 F4 
18971     F2 F3 F9 02 
18975     10 1D 22 1C | 	byte	$04, $02, $00, $fc, $f8, $f9, $f8, $f4, $f2, $f3, $f9, $02, $10, $1d, $22, $1c
18979     0C FC EC DF 
1897d     DD E3 EB F5 
18981     FE 04 09 0F 
18985     13 16 13 0B | 	byte	$0c, $fc, $ec, $df, $dd, $e3, $eb, $f5, $fe, $04, $09, $0f, $13, $16, $13, $0b
18989     FF F5 EC EB 
1898d     F0 FB 06 0D 
18991     0C 07 00 F9 
18995     F3 F0 F0 F0 | 	byte	$ff, $f5, $ec, $eb, $f0, $fb, $06, $0d, $0c, $07, $00, $f9, $f3, $f0, $f0, $f0
18999     F0 F4 FC 01 
1899d     0B 14 17 12 
189a1     09 FC F2 EF 
189a5     F2 FE 08 0C | 	byte	$f0, $f4, $fc, $01, $0b, $14, $17, $12, $09, $fc, $f2, $ef, $f2, $fe, $08, $0c
189a9     0C 09 01 F9 
189ad     F3 F1 F1 F1 
189b1     F2 F2 F9 01 
189b5     0C 15 17 12 | 	byte	$0c, $09, $01, $f9, $f3, $f1, $f1, $f1, $f2, $f2, $f9, $01, $0c, $15, $17, $12
189b9     06 F9 EE E6 
189bd     E4 EA F4 FE 
189c1     04 0B 10 15 
189c5     17 17 13 09 | 	byte	$06, $f9, $ee, $e6, $e4, $ea, $f4, $fe, $04, $0b, $10, $15, $17, $17, $13, $09
189c9     FE F2 E7 E3 
189cd     E5 F0 FB 04 
189d1     07 05 00 FB 
189d5     F7 F5 F6 F8 | 	byte	$fe, $f2, $e7, $e3, $e5, $f0, $fb, $04, $07, $05, $00, $fb, $f7, $f5, $f6, $f8
189d9     FB FF 02 07 
189dd     0C 12 13 0F 
189e1     08 FC F2 ED 
189e5     F1 F8 02 08 | 	byte	$fb, $ff, $02, $07, $0c, $12, $13, $0f, $08, $fc, $f2, $ed, $f1, $f8, $02, $08
189e9     08 02 FC F2 
189ed     EC EB F0 F4 
189f1     FA 00 08 0E 
189f5     15 19 18 10 | 	byte	$08, $02, $fc, $f2, $ec, $eb, $f0, $f4, $fa, $00, $08, $0e, $15, $19, $18, $10
189f9     05 F9 EE E6 
189fd     E1 E5 EC F4 
18a01     FD 03 09 0F 
18a05     12 15 13 0C | 	byte	$05, $f9, $ee, $e6, $e1, $e5, $ec, $f4, $fd, $03, $09, $0f, $12, $15, $13, $0c
18a09     04 FB F2 EC 
18a0d     EB F3 FC 05 
18a11     09 09 05 00 
18a15     FA F7 F5 F2 | 	byte	$04, $fb, $f2, $ec, $eb, $f3, $fc, $05, $09, $09, $05, $00, $fa, $f7, $f5, $f2
18a19     F3 F6 FA FE 
18a1d     02 07 0B 0A 
18a21     05 00 FE FC 
18a25     00 06 0B 0D | 	byte	$f3, $f6, $fa, $fe, $02, $07, $0b, $0a, $05, $00, $fe, $fc, $00, $06, $0b, $0d
18a29     0A 04 FB F0 
18a2d     E9 E9 EB F1 
18a31     F8 00 05 0B 
18a35     0E 0F 0C 05 | 	byte	$0a, $04, $fb, $f0, $e9, $e9, $eb, $f1, $f8, $00, $05, $0b, $0e, $0f, $0c, $05
18a39     FE F6 F1 ED 
18a3d     EC F0 F7 FC 
18a41     01 08 0E 13 
18a45     15 16 14 0C | 	byte	$fe, $f6, $f1, $ed, $ec, $f0, $f7, $fc, $01, $08, $0e, $13, $15, $16, $14, $0c
18a49     01 F8 EE E4 
18a4d     E3 E7 EF F8 
18a51     00 04 05 04 
18a55     00 00 FE FC | 	byte	$01, $f8, $ee, $e4, $e3, $e7, $ef, $f8, $00, $04, $05, $04, $00, $00, $fe, $fc
18a59     FC FC FF 02 
18a5d     05 08 0A 08 
18a61     04 00 FC FD 
18a65     FF 02 06 05 | 	byte	$fc, $fc, $ff, $02, $05, $08, $0a, $08, $04, $00, $fc, $fd, $ff, $02, $06, $05
18a69     00 F9 F1 E8 
18a6d     E5 E8 EE F7 
18a71     00 09 11 16 
18a75     19 17 12 07 | 	byte	$00, $f9, $f1, $e8, $e5, $e8, $ee, $f7, $00, $09, $11, $16, $19, $17, $12, $07
18a79     FE F4 EC E8 
18a7d     E7 E9 EE F5 
18a81     FC 01 07 0D 
18a85     10 13 13 0F | 	byte	$fe, $f4, $ec, $e8, $e7, $e9, $ee, $f5, $fc, $01, $07, $0d, $10, $13, $13, $0f
18a89     07 00 F7 EF 
18a8d     ED F0 F6 FC 
18a91     01 04 05 03 
18a95     00 FD FB F8 | 	byte	$07, $00, $f7, $ef, $ed, $f0, $f6, $fc, $01, $04, $05, $03, $00, $fd, $fb, $f8
18a99     F7 F7 F8 F9 
18a9d     FC FF 01 03 
18aa1     02 02 04 07 
18aa5     0A 0E 10 0E | 	byte	$f7, $f7, $f8, $f9, $fc, $ff, $01, $03, $02, $02, $04, $07, $0a, $0e, $10, $0e
18aa9     09 00 F6 EA 
18aad     E5 E3 E6 ED 
18ab1     F7 00 09 10 
18ab5     14 13 0E 05 | 	byte	$09, $00, $f6, $ea, $e5, $e3, $e6, $ed, $f7, $00, $09, $10, $14, $13, $0e, $05
18ab9     FE F6 F0 EB 
18abd     EC EF F5 FB 
18ac1     02 09 10 13 
18ac5     15 15 11 0B | 	byte	$fe, $f6, $f0, $eb, $ec, $ef, $f5, $fb, $02, $09, $10, $13, $15, $15, $11, $0b
18ac9     04 FB F2 EA 
18acd     E7 E9 EB F2 
18ad1     F8 FF 03 06 
18ad5     07 07 05 03 | 	byte	$04, $fb, $f2, $ea, $e7, $e9, $eb, $f2, $f8, $ff, $03, $06, $07, $07, $05, $03
18ad9     02 00 00 FF 
18add     FE FD FE FF 
18ae1     00 00 00 04 
18ae5     07 0B 0C 08 | 	byte	$02, $00, $00, $ff, $fe, $fd, $fe, $ff, $00, $00, $00, $04, $07, $0b, $0c, $08
18ae9     02 FB F0 E9 
18aed     E5 E6 E9 F2 
18af1     FD 05 10 19 
18af5     1D 1D 16 0B | 	byte	$02, $fb, $f0, $e9, $e5, $e6, $e9, $f2, $fd, $05, $10, $19, $1d, $1d, $16, $0b
18af9     00 F5 EB E5 
18afd     E3 E6 EB F2 
18b01     F9 00 09 0E 
18b05     13 16 15 10 | 	byte	$00, $f5, $eb, $e5, $e3, $e6, $eb, $f2, $f9, $00, $09, $0e, $13, $16, $15, $10
18b09     0B 04 FE F7 
18b0d     F1 F1 F1 F2 
18b11     F5 F9 FE 01 
18b15     04 05 04 02 | 	byte	$0b, $04, $fe, $f7, $f1, $f1, $f1, $f2, $f5, $f9, $fe, $01, $04, $05, $04, $02
18b19     FF FD F9 F5 
18b1d     F4 F5 F8 FC 
18b21     00 03 08 0E 
18b25     12 15 15 11 | 	byte	$ff, $fd, $f9, $f5, $f4, $f5, $f8, $fc, $00, $03, $08, $0e, $12, $15, $15, $11
18b29     09 FF F4 EA 
18b2d     E2 E3 E4 E9 
18b31     F2 FC 05 0F 
18b35     16 17 13 0B | 	byte	$09, $ff, $f4, $ea, $e2, $e3, $e4, $e9, $f2, $fc, $05, $0f, $16, $17, $13, $0b
18b39     02 FB F2 ED 
18b3d     EA EC F2 F9 
18b41     00 06 0C 10 
18b45     13 14 11 0B | 	byte	$02, $fb, $f2, $ed, $ea, $ec, $f2, $f9, $00, $06, $0c, $10, $13, $14, $11, $0b
18b49     04 00 F9 F2 
18b4d     EC EA EA EA 
18b51     EE F5 FB 02 
18b55     0A 0E 0F 0F | 	byte	$04, $00, $f9, $f2, $ec, $ea, $ea, $ea, $ee, $f5, $fb, $02, $0a, $0e, $0f, $0f
18b59     0B 07 01 FB 
18b5d     F4 F2 F3 F6 
18b61     FB FF 02 08 
18b65     0C 0F 0E 09 | 	byte	$0b, $07, $01, $fb, $f4, $f2, $f3, $f6, $fb, $ff, $02, $08, $0c, $0f, $0e, $09
18b69     03 FD F5 EE 
18b6d     E9 EA EB F0 
18b71     F8 00 08 12 
18b75     19 1A 16 0D | 	byte	$03, $fd, $f5, $ee, $e9, $ea, $eb, $f0, $f8, $00, $08, $12, $19, $1a, $16, $0d
18b79     02 F9 F0 E9 
18b7d     E5 E4 E9 F0 
18b81     F7 FE 05 0C 
18b85     13 16 16 12 | 	byte	$02, $f9, $f0, $e9, $e5, $e4, $e9, $f0, $f7, $fe, $05, $0c, $13, $16, $16, $12
18b89     0D 08 04 FE 
18b8d     F7 F1 EE EB 
18b91     EB F0 F5 FC 
18b95     02 07 09 08 | 	byte	$0d, $08, $04, $fe, $f7, $f1, $ee, $eb, $eb, $f0, $f5, $fc, $02, $07, $09, $08
18b99     05 00 FD F7 
18b9d     F3 F2 F5 FA 
18ba1     00 04 0A 10 
18ba5     13 14 13 0E | 	byte	$05, $00, $fd, $f7, $f3, $f2, $f5, $fa, $00, $04, $0a, $10, $13, $14, $13, $0e
18ba9     05 FD F7 EE 
18bad     E9 E6 E6 E9 
18bb1     F0 F7 00 08 
18bb5     0F 14 15 0F | 	byte	$05, $fd, $f7, $ee, $e9, $e6, $e6, $e9, $f0, $f7, $00, $08, $0f, $14, $15, $0f
18bb9     08 00 F9 F3 
18bbd     EE EE F2 F6 
18bc1     FC 00 04 09 
18bc5     0E 10 0F 0C | 	byte	$08, $00, $f9, $f3, $ee, $ee, $f2, $f6, $fc, $00, $04, $09, $0e, $10, $0f, $0c
18bc9     08 04 00 F8 
18bcd     F3 ED EA E9 
18bd1     EC F1 F8 FF 
18bd5     07 0C 0F 10 | 	byte	$08, $04, $00, $f8, $f3, $ed, $ea, $e9, $ec, $f1, $f8, $ff, $07, $0c, $0f, $10
18bd9     0C 07 01 FB 
18bdd     F5 F2 F4 F7 
18be1     FB 00 02 07 
18be5     0A 0B 0B 07 | 	byte	$0c, $07, $01, $fb, $f5, $f2, $f4, $f7, $fb, $00, $02, $07, $0a, $0b, $0b, $07
18be9     03 FE FC F6 
18bed     F2 F0 EF F1 
18bf1     F6 FC 01 08 
18bf5     0F 12 12 0C | 	byte	$03, $fe, $fc, $f6, $f2, $f0, $ef, $f1, $f6, $fc, $01, $08, $0f, $12, $12, $0c
18bf9     05 FF F7 F0 
18bfd     EB EA EB F0 
18c01     F7 FE 02 08 
18c05     0D 11 13 12 | 	byte	$05, $ff, $f7, $f0, $eb, $ea, $eb, $f0, $f7, $fe, $02, $08, $0d, $11, $13, $12
18c09     10 0C 08 04 
18c0d     FD F4 EE EB 
18c11     EA ED F1 F8 
18c15     00 05 08 08 | 	byte	$10, $0c, $08, $04, $fd, $f4, $ee, $eb, $ea, $ed, $f1, $f8, $00, $05, $08, $08
18c19     05 01 FE FA 
18c1d     F7 F7 F9 FE 
18c21     01 05 08 0C 
18c25     0E 0E 0C 08 | 	byte	$05, $01, $fe, $fa, $f7, $f7, $f9, $fe, $01, $05, $08, $0c, $0e, $0e, $0c, $08
18c29     04 00 FC F7 
18c2d     F2 EE ED ED 
18c31     EF F3 F9 00 
18c35     07 0D 0F 0D | 	byte	$04, $00, $fc, $f7, $f2, $ee, $ed, $ed, $ef, $f3, $f9, $00, $07, $0d, $0f, $0d
18c39     08 04 FE FA 
18c3d     F7 F5 F5 F8 
18c41     FC FF 00 04 
18c45     07 0A 0B 0A | 	byte	$08, $04, $fe, $fa, $f7, $f5, $f5, $f8, $fc, $ff, $00, $04, $07, $0a, $0b, $0a
18c49     08 07 04 01 
18c4d     FB F5 F2 EE 
18c51     ED F0 F4 FB 
18c55     00 07 0A 0B | 	byte	$08, $07, $04, $01, $fb, $f5, $f2, $ee, $ed, $f0, $f4, $fb, $00, $07, $0a, $0b
18c59     09 05 00 FE 
18c5d     FB F9 FA FC 
18c61     FF 00 00 01 
18c65     01 02 04 04 | 	byte	$09, $05, $00, $fe, $fb, $f9, $fa, $fc, $ff, $00, $00, $01, $01, $02, $04, $04
18c69     03 02 00 00 
18c6d     FC F9 F7 F5 
18c71     F7 F9 FC 01 
18c75     05 09 09 07 | 	byte	$03, $02, $00, $00, $fc, $f9, $f7, $f5, $f7, $f9, $fc, $01, $05, $09, $09, $07
18c79     02 FE F9 F5 
18c7d     F2 F2 F3 F7 
18c81     FB FF 00 04 
18c85     08 0B 0C 0E | 	byte	$02, $fe, $f9, $f5, $f2, $f2, $f3, $f7, $fb, $ff, $00, $04, $08, $0b, $0c, $0e
18c89     0D 0E 0C 08 
18c8d     01 FA F5 EE 
18c91     ED EC F0 F4 
18c95     FA FF 00 00 | 	byte	$0d, $0e, $0c, $08, $01, $fa, $f5, $ee, $ed, $ec, $f0, $f4, $fa, $ff, $00, $00
18c99     00 00 FF FF 
18c9d     FE FF 01 04 
18ca1     07 07 06 07 
18ca5     06 05 04 02 | 	byte	$00, $00, $ff, $ff, $fe, $ff, $01, $04, $07, $07, $06, $07, $06, $05, $04, $02
18ca9     02 00 FF FC 
18cad     F9 F6 F2 F1 
18cb1     F1 F4 F8 FF 
18cb5     05 08 0B 09 | 	byte	$02, $00, $ff, $fc, $f9, $f6, $f2, $f1, $f1, $f4, $f8, $ff, $05, $08, $0b, $09
18cb9     05 01 FD FC 
18cbd     F9 FA FB FE 
18cc1     FF 00 00 01 
18cc5     02 03 04 05 | 	byte	$05, $01, $fd, $fc, $f9, $fa, $fb, $fe, $ff, $00, $00, $01, $02, $03, $04, $05
18cc9     06 07 06 04 
18ccd     00 FB F6 F2 
18cd1     F2 F2 F6 FB 
18cd5     FF 02 05 05 | 	byte	$06, $07, $06, $04, $00, $fb, $f6, $f2, $f2, $f2, $f6, $fb, $ff, $02, $05, $05
18cd9     03 00 FE FC 
18cdd     FC FC FF 01 
18ce1     02 02 01 00 
18ce5     00 00 01 02 | 	byte	$03, $00, $fe, $fc, $fc, $fc, $ff, $01, $02, $02, $01, $00, $00, $00, $01, $02
18ce9     02 04 02 00 
18ced     FE FB F9 F7 
18cf1     F8 FA FC 00 
18cf5     05 07 07 04 | 	byte	$02, $04, $02, $00, $fe, $fb, $f9, $f7, $f8, $fa, $fc, $00, $05, $07, $07, $04
18cf9     00 FC F7 F5 
18cfd     F4 F6 F9 FC 
18d01     FF 00 02 04 
18d05     05 07 09 0B | 	byte	$00, $fc, $f7, $f5, $f4, $f6, $f9, $fc, $ff, $00, $02, $04, $05, $07, $09, $0b
18d09     0C 0C 0B 07 
18d0d     01 FB F7 F1 
18d11     EE F0 F2 F7 
18d15     FC FE 00 00 | 	byte	$0c, $0c, $0b, $07, $01, $fb, $f7, $f1, $ee, $f0, $f2, $f7, $fc, $fe, $00, $00
18d19     00 FF FE FF 
18d1d     00 01 02 06 
18d21     07 07 05 06 
18d25     05 04 02 02 | 	byte	$00, $ff, $fe, $ff, $00, $01, $02, $06, $07, $07, $05, $06, $05, $04, $02, $02
18d29     02 00 FE FB 
18d2d     F8 F6 F4 F1 
18d31     F2 F6 FA 00 
18d35     05 09 09 06 | 	byte	$02, $00, $fe, $fb, $f8, $f6, $f4, $f1, $f2, $f6, $fa, $00, $05, $09, $09, $06
18d39     03 FF FE FC 
18d3d     FB FD FF FF 
18d41     00 00 00 00 
18d45     00 01 02 04 | 	byte	$03, $ff, $fe, $fc, $fb, $fd, $ff, $ff, $00, $00, $00, $00, $00, $01, $02, $04
18d49     06 06 07 04 
18d4d     00 FB F8 F5 
18d51     F4 F5 F8 FC 
18d55     00 02 04 04 | 	byte	$06, $06, $07, $04, $00, $fb, $f8, $f5, $f4, $f5, $f8, $fc, $00, $02, $04, $04
18d59     01 FE FE FB 
18d5d     FB FC FF 01 
18d61     04 02 01 01 
18d65     01 01 02 04 | 	byte	$01, $fe, $fe, $fb, $fb, $fc, $ff, $01, $04, $02, $01, $01, $01, $01, $02, $04
18d69     04 04 01 00 
18d6d     FE FB F9 F8 
18d71     F9 FB FD 00 
18d75     04 05 03 00 | 	byte	$04, $04, $01, $00, $fe, $fb, $f9, $f8, $f9, $fb, $fd, $00, $04, $05, $03, $00
18d79     FF FB F8 F7 
18d7d     F8 FA FE 00 
18d81     00 01 02 03 
18d85     04 05 08 09 | 	byte	$ff, $fb, $f8, $f7, $f8, $fa, $fe, $00, $00, $01, $02, $03, $04, $05, $08, $09
18d89     0B 0B 08 06 
18d8d     00 FA F5 F1 
18d91     F0 F1 F4 F8 
18d95     FC FE 00 00 | 	byte	$0b, $0b, $08, $06, $00, $fa, $f5, $f1, $f0, $f1, $f4, $f8, $fc, $fe, $00, $00
18d99     FF FE FD FE 
18d9d     FF 01 04 07 
18da1     08 09 07 07 
18da5     04 01 01 01 | 	byte	$ff, $fe, $fd, $fe, $ff, $01, $04, $07, $08, $09, $07, $07, $04, $01, $01, $01
18da9     00 FF FC FA 
18dad     F8 F6 F4 F4 
18db1     F7 FA FC 00 
18db5     05 07 06 04 | 	byte	$00, $ff, $fc, $fa, $f8, $f6, $f4, $f4, $f7, $fa, $fc, $00, $05, $07, $06, $04
18db9     01 00 FE FE 
18dbd     FD FF 00 00 
18dc1     00 00 00 FF 
18dc5     FF 00 02 02 | 	byte	$01, $00, $fe, $fe, $fd, $ff, $00, $00, $00, $00, $00, $ff, $ff, $00, $02, $02
18dc9     05 05 07 03 
18dcd     00 FC F8 F7 
18dd1     F7 F8 FB 00 
18dd5     01 02 02 01 | 	byte	$05, $05, $07, $03, $00, $fc, $f8, $f7, $f7, $f8, $fb, $00, $01, $02, $02, $01
18dd9     FF FD FA FA 
18ddd     FB FD 00 02 
18de1     05 05 03 03 
18de5     02 02 02 02 | 	byte	$ff, $fd, $fa, $fa, $fb, $fd, $00, $02, $05, $05, $03, $03, $02, $02, $02, $02
18de9     02 01 00 FF 
18ded     FE FC FB FA 
18df1     FA FB FD FF 
18df5     01 02 00 FE | 	byte	$02, $01, $00, $ff, $fe, $fc, $fb, $fa, $fa, $fb, $fd, $ff, $01, $02, $00, $fe
18df9     FD FB FB FB 
18dfd     FC FE 00 00 
18e01     00 01 01 01 
18e05     03 04 07 08 | 	byte	$fd, $fb, $fb, $fb, $fc, $fe, $00, $00, $00, $01, $01, $01, $03, $04, $07, $08
18e09     09 08 06 03 
18e0d     FE F9 F5 F3 
18e11     F2 F4 F7 FB 
18e15     FE FF 00 00 | 	byte	$09, $08, $06, $03, $fe, $f9, $f5, $f3, $f2, $f4, $f7, $fb, $fe, $ff, $00, $00
18e19     FE FE FD FE 
18e1d     00 01 05 08 
18e21     09 09 07 05 
18e25     02 02 00 FF | 	byte	$fe, $fe, $fd, $fe, $00, $01, $05, $08, $09, $09, $07, $05, $02, $02, $00, $ff
18e29     00 FD FC FB 
18e2d     FA F9 F8 F8 
18e31     F9 FB FD 00 
18e35     03 05 04 02 | 	byte	$00, $fd, $fc, $fb, $fa, $f9, $f8, $f8, $f9, $fb, $fd, $00, $03, $05, $04, $02
18e39     02 00 00 00 
18e3d     00 00 00 00 
18e41     FF FF FF FE 
18e45     00 00 02 04 | 	byte	$02, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff, $fe, $00, $00, $02, $04
18e49     04 04 05 02 
18e4d     FF FD FB F9 
18e51     F9 FB FE 00 
18e55     01 01 00 00 | 	byte	$04, $04, $05, $02, $ff, $fd, $fb, $f9, $f9, $fb, $fe, $00, $01, $01, $00, $00
18e59     FE FB FB FB 
18e5d     FC FE 00 04 
18e61     05 05 03 03 
18e65     02 01 01 01 | 	byte	$fe, $fb, $fb, $fb, $fc, $fe, $00, $04, $05, $05, $03, $03, $02, $01, $01, $01
18e69     01 00 01 00 
18e6d     00 FF FD FC 
18e71     FB FB FA FC 
18e75     FE FF FF FE | 	byte	$01, $00, $01, $00, $00, $ff, $fd, $fc, $fb, $fb, $fa, $fc, $fe, $ff, $ff, $fe
18e79     FF FE FE FE 
18e7d     FE 00 00 00 
18e81     01 02 01 03 
18e85     05 07 08 07 | 	byte	$ff, $fe, $fe, $fe, $fe, $00, $00, $00, $01, $02, $01, $03, $05, $07, $08, $07
18e89     05 04 03 00 
18e8d     FC F9 F7 F5 
18e91     F7 F9 FB FD 
18e95     FE FF FF FF | 	byte	$05, $04, $03, $00, $fc, $f9, $f7, $f5, $f7, $f9, $fb, $fd, $fe, $ff, $ff, $ff
18e99     FD FE FE 00 
18e9d     00 02 05 08 
18ea1     09 08 05 03 
18ea5     01 FF FF FE | 	byte	$fd, $fe, $fe, $00, $00, $02, $05, $08, $09, $08, $05, $03, $01, $ff, $ff, $fe
18ea9     FE FD FD FD 
18ead     FE FB FB FB 
18eb1     FC FC FC FF 
18eb5     00 01 02 02 | 	byte	$fe, $fd, $fd, $fd, $fe, $fb, $fb, $fb, $fc, $fc, $fc, $ff, $00, $01, $02, $02
18eb9     02 02 01 00 
18ebd     FF 00 00 FF 
18ec1     FF FF FF 00 
18ec5     01 03 03 02 | 	byte	$02, $02, $01, $00, $ff, $00, $00, $ff, $ff, $ff, $ff, $00, $01, $03, $03, $02
18ec9     02 02 01 00 
18ecd     FE FD FD FD 
18ed1     FE FF 00 00 
18ed5     00 00 FE FD | 	byte	$02, $02, $01, $00, $fe, $fd, $fd, $fd, $fe, $ff, $00, $00, $00, $00, $fe, $fd
18ed9     FB FB FB FC 
18edd     FE 00 01 04 
18ee1     04 04 03 02 
18ee5     01 01 01 00 | 	byte	$fb, $fb, $fb, $fc, $fe, $00, $01, $04, $04, $04, $03, $02, $01, $01, $01, $00
18ee9     01 01 02 02 
18eed     01 FF FE FC 
18ef1     FB F9 F9 F9 
18ef5     FB FD FF FF | 	byte	$01, $01, $02, $02, $01, $ff, $fe, $fc, $fb, $f9, $f9, $f9, $fb, $fd, $ff, $ff
18ef9     FF 00 FF FF 
18efd     FF FF 00 00 
18f01     01 03 04 05 
18f05     07 07 07 04 | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $00, $00, $01, $03, $04, $05, $07, $07, $07, $04
18f09     02 00 FF FD 
18f0d     FB F9 FA FB 
18f11     FB FC FC FC 
18f15     FE 00 00 00 | 	byte	$02, $00, $ff, $fd, $fb, $f9, $fa, $fb, $fb, $fc, $fc, $fc, $fe, $00, $00, $00
18f19     00 00 FF 00 
18f1d     FE 00 FE ED 
18f21     F6 E9 F5 FF 
18f25     DE F4 08 DF | 	byte	$00, $00, $ff, $00, $fe, $00, $fe, $ed, $f6, $e9, $f5, $ff, $de, $f4, $08, $df
18f29     FE F2 EE 00 
18f2d     00 2F 0F D0 
18f31     EB 01 FA 0F 
18f35     E3 EA F6 01 | 	byte	$fe, $f2, $ee, $00, $00, $2f, $0f, $d0, $eb, $01, $fa, $0f, $e3, $ea, $f6, $01
18f39     1C 00 E8 09 
18f3d     C8 FC FF DF 
18f41     FE 12 31 07 
18f45     BE F4 F1 E4 | 	byte	$1c, $00, $e8, $09, $c8, $fc, $ff, $df, $fe, $12, $31, $07, $be, $f4, $f1, $e4
18f49     17 00 D9 EE 
18f4d     D1 14 23 DA 
18f51     DE DF F5 13 
18f55     E7 16 00 13 | 	byte	$17, $00, $d9, $ee, $d1, $14, $23, $da, $de, $df, $f5, $13, $e7, $16, $00, $13
18f59     4C 12 EA 00 
18f5d     CB F9 E0 C3 
18f61     ED C4 01 3D 
18f65     E3 E7 0F C1 | 	byte	$4c, $12, $ea, $00, $cb, $f9, $e0, $c3, $ed, $c4, $01, $3d, $e3, $e7, $0f, $c1
18f69     1D 18 18 EA 
18f6d     E2 3C 3C B4 
18f71     F4 ED F1 E3 
18f75     CA DB EA FE | 	byte	$1d, $18, $18, $ea, $e2, $3c, $3c, $b4, $f4, $ed, $f1, $e3, $ca, $db, $ea, $fe
18f79     3F 09 F2 F9 
18f7d     A2 13 FD E8 
18f81     07 1E 2D 3E 
18f85     DA FD C5 C2 | 	byte	$3f, $09, $f2, $f9, $a2, $13, $fd, $e8, $07, $1e, $2d, $3e, $da, $fd, $c5, $c2
18f89     0F E6 00 FB 
18f8d     B1 F1 24 B3 
18f91     E5 06 00 08 
18f95     D6 04 09 F4 | 	byte	$0f, $e6, $00, $fb, $b1, $f1, $24, $b3, $e5, $06, $00, $08, $d6, $04, $09, $f4
18f99     62 2B F7 00 
18f9d     D3 02 F1 E1 
18fa1     F7 DB C1 16 
18fa5     B4 F0 F7 D1 | 	byte	$62, $2b, $f7, $00, $d3, $02, $f1, $e1, $f7, $db, $c1, $16, $b4, $f0, $f7, $d1
18fa9     F5 06 15 E4 
18fad     E1 3A 2C AA 
18fb1     F7 F9 DB FE 
18fb5     E4 03 17 F1 | 	byte	$f5, $06, $15, $e4, $e1, $3a, $2c, $aa, $f7, $f9, $db, $fe, $e4, $03, $17, $f1
18fb9     50 27 1D F3 
18fbd     B4 FF F8 DC 
18fc1     07 27 E9 1C 
18fc5     C5 D8 E3 E1 | 	byte	$50, $27, $1d, $f3, $b4, $ff, $f8, $dc, $07, $27, $e9, $1c, $c5, $d8, $e3, $e1
18fc9     F8 F0 F1 07 
18fcd     C1 F8 12 C5 
18fd1     EB 10 05 07 
18fd5     10 1C 3B EA | 	byte	$f8, $f0, $f1, $07, $c1, $f8, $12, $c5, $eb, $10, $05, $07, $10, $1c, $3b, $ea
18fd9     46 24 F5 D4 
18fdd     C5 00 DB CF 
18fe1     F8 F3 F5 32 
18fe5     CA D7 F1 CE | 	byte	$46, $24, $f5, $d4, $c5, $00, $db, $cf, $f8, $f3, $f5, $32, $ca, $d7, $f1, $ce
18fe9     EB 06 FA 16 
18fed     00 60 38 DA 
18ff1     04 EA C5 E7 
18ff5     E3 CE 17 E4 | 	byte	$eb, $06, $fa, $16, $00, $60, $38, $da, $04, $ea, $c5, $e7, $e3, $ce, $17, $e4
18ff9     2A 26 17 DD 
18ffd     CA FB F4 D1 
19001     FC 1B 1A 2F 
19005     F2 DF EB E4 | 	byte	$2a, $26, $17, $dd, $ca, $fb, $f4, $d1, $fc, $1b, $1a, $2f, $f2, $df, $eb, $e4
19009     F7 12 0C 1F 
1900d     D1 0C FB D8 
19011     E3 ED D9 05 
19015     E1 10 38 09 | 	byte	$f7, $12, $0c, $1f, $d1, $0c, $fb, $d8, $e3, $ed, $d9, $05, $e1, $10, $38, $09
19019     61 45 E6 D1 
1901d     C9 CE DF C4 
19021     FE F3 04 37 
19025     F9 0B 1E CF | 	byte	$61, $45, $e6, $d1, $c9, $ce, $df, $c4, $fe, $f3, $04, $37, $f9, $0b, $1e, $cf
19029     D8 00 F1 F8 
1902d     16 2E 17 DA 
19031     E9 E0 E3 1D 
19035     E2 01 1A FE | 	byte	$d8, $00, $f1, $f8, $16, $2e, $17, $da, $e9, $e0, $e3, $1d, $e2, $01, $1a, $fe
19039     17 07 FF E1 
1903d     D2 F0 10 EF 
19041     3F 46 16 14 
19045     D1 CC DD BA | 	byte	$17, $07, $ff, $e1, $d2, $f0, $10, $ef, $3f, $46, $16, $14, $d1, $cc, $dd, $ba
19049     E5 FE 02 13 
1904d     F6 0B 1A DE 
19051     C7 F9 BE 0E 
19055     C6 27 3B 3E | 	byte	$e5, $fe, $02, $13, $f6, $0b, $1a, $de, $c7, $f9, $be, $0e, $c6, $27, $3b, $3e
19059     5F 5C 01 F5 
1905d     E0 DD D1 D4 
19061     EE F4 FF 02 
19065     CC E7 0D BA | 	byte	$5f, $5c, $01, $f5, $e0, $dd, $d1, $d4, $ee, $f4, $ff, $02, $cc, $e7, $0d, $ba
19069     0E 09 0C 08 
1906d     27 21 16 CB 
19071     C7 DF CF 14 
19075     EC 2D 54 1F | 	byte	$0e, $09, $0c, $08, $27, $21, $16, $cb, $c7, $df, $cf, $14, $ec, $2d, $54, $1f
19079     24 1B DA D9 
1907d     B8 DD E8 DD 
19081     10 3C 33 2E 
19085     0C DC E8 B7 | 	byte	$24, $1b, $da, $d9, $b8, $dd, $e8, $dd, $10, $3c, $33, $2e, $0c, $dc, $e8, $b7
19089     01 E2 F5 04 
1908d     FF 15 26 F4 
19091     EE 16 D5 EC 
19095     C5 0C 2D 37 | 	byte	$01, $e2, $f5, $04, $ff, $15, $26, $f4, $ee, $16, $d5, $ec, $c5, $0c, $2d, $37
19099     58 35 CC F2 
1909d     AC EF EE E5 
190a1     E8 15 FB 01 
190a5     DA E1 FF C5 | 	byte	$58, $35, $cc, $f2, $ac, $ef, $ee, $e5, $e8, $15, $fb, $01, $da, $e1, $ff, $c5
190a9     0F 1B 18 3F 
190ad     43 40 17 C3 
190b1     CB C5 CD E4 
190b5     E3 04 5F 2A | 	byte	$0f, $1b, $18, $3f, $43, $40, $17, $c3, $cb, $c5, $cd, $e4, $e3, $04, $5f, $2a
190b9     43 32 D5 D9 
190bd     A3 E3 E2 C3 
190c1     02 28 28 36 
190c5     10 02 07 F0 | 	byte	$43, $32, $d5, $d9, $a3, $e3, $e2, $c3, $02, $28, $28, $36, $10, $02, $07, $f0
190c9     02 EA D8 05 
190cd     EF 06 23 A6 
190d1     E3 00 DC F5 
190d5     08 11 3C 44 | 	byte	$02, $ea, $d8, $05, $ef, $06, $23, $a6, $e3, $00, $dc, $f5, $08, $11, $3c, $44
190d9     5A 25 C0 DD 
190dd     98 D9 FF F1 
190e1     17 4F 0B 12 
190e5     CD D9 D5 CB | 	byte	$5a, $25, $c0, $dd, $98, $d9, $ff, $f1, $17, $4f, $0b, $12, $cd, $d9, $d5, $cb
190e9     EB 07 D4 0F 
190ed     38 45 3F D2 
190f1     DC C5 B4 E7 
190f5     F1 F5 53 1C | 	byte	$eb, $07, $d4, $0f, $38, $45, $3f, $d2, $dc, $c5, $b4, $e7, $f1, $f5, $53, $1c
190f9     3C 37 F9 EB 
190fd     F1 EE F1 B4 
19101     03 1C 0C 2F 
19105     F2 CB DD F2 | 	byte	$3c, $37, $f9, $eb, $f1, $ee, $f1, $b4, $03, $1c, $0c, $2f, $f2, $cb, $dd, $f2
19109     F8 21 F8 05 
1910d     EB 01 0D 9B 
19111     C5 00 AF F4 
19115     1C 1F 70 7F | 	byte	$f8, $21, $f8, $05, $eb, $01, $0d, $9b, $c5, $00, $af, $f4, $1c, $1f, $70, $7f
19119     6D 30 CF A5 
1911d     A3 B9 EC C3 
19121     00 38 11 28 
19125     FA F0 EA D1 | 	byte	$6d, $30, $cf, $a5, $a3, $b9, $ec, $c3, $00, $38, $11, $28, $fa, $f0, $ea, $d1
19129     E2 1C D2 07 
1912d     28 37 20 E8 
19131     E0 10 D5 08 
19135     F4 EE 48 19 | 	byte	$e2, $1c, $d2, $07, $28, $37, $20, $e8, $e0, $10, $d5, $08, $f4, $ee, $48, $19
19139     21 20 D9 99 
1913d     E9 E6 F9 C8 
19141     24 25 05 2A 
19145     00 C1 E7 D7 | 	byte	$21, $20, $d9, $99, $e9, $e6, $f9, $c8, $24, $25, $05, $2a, $00, $c1, $e7, $d7
19149     E1 21 06 24 
1914d     31 42 04 B0 
19151     B8 FB A2 EE 
19155     02 02 41 61 | 	byte	$e1, $21, $06, $24, $31, $42, $04, $b0, $b8, $fb, $a2, $ee, $02, $02, $41, $61
19159     70 58 F7 BC 
1915d     BD AA DB C4 
19161     F9 1D 0C F7 
19165     FB FA 1E 04 | 	byte	$70, $58, $f7, $bc, $bd, $aa, $db, $c4, $f9, $1d, $0c, $f7, $fb, $fa, $1e, $04
19169     13 36 C5 E7 
1916d     0E 26 FD E9 
19171     C1 DF C5 12 
19175     0B 31 55 2E | 	byte	$13, $36, $c5, $e7, $0e, $26, $fd, $e9, $c1, $df, $c5, $12, $0b, $31, $55, $2e
19179     11 24 CC 97 
1917d     E3 D8 DD E1 
19181     23 3F 4A 42 
19185     1E CE DF BB | 	byte	$11, $24, $cc, $97, $e3, $d8, $dd, $e1, $23, $3f, $4a, $42, $1e, $ce, $df, $bb
19189     D6 0C F1 F0 
1918d     11 24 05 D6 
19191     DA FE B5 E4 
19195     00 13 23 4C | 	byte	$d6, $0c, $f1, $f0, $11, $24, $05, $d6, $da, $fe, $b5, $e4, $00, $13, $23, $4c
19199     5A 3F F0 CA 
1919d     F9 E9 00 EA 
191a1     E1 04 04 E0 
191a5     F7 F6 F2 DF | 	byte	$5a, $3f, $f0, $ca, $f9, $e9, $00, $ea, $e1, $04, $04, $e0, $f7, $f6, $f2, $df
191a9     11 3C ED FB 
191ad     2B 19 FC E9 
191b1     B4 C2 C8 EC 
191b5     FB 3B 5B 60 | 	byte	$11, $3c, $ed, $fb, $2b, $19, $fc, $e9, $b4, $c2, $c8, $ec, $fb, $3b, $5b, $60
191b9     45 4D BE 94 
191bd     CE C4 D7 EA 
191c1     F9 17 2F 3F 
191c5     31 FE F9 D1 | 	byte	$45, $4d, $be, $94, $ce, $c4, $d7, $ea, $f9, $17, $2f, $3f, $31, $fe, $f9, $d1
191c9     E1 FF ED E1 
191cd     0E 05 FC C5 
191d1     D2 12 FC 0E 
191d5     3E 14 15 34 | 	byte	$e1, $ff, $ed, $e1, $0e, $05, $fc, $c5, $d2, $12, $fc, $0e, $3e, $14, $15, $34
191d9     37 32 CA B4 
191dd     C3 CF 04 05 
191e1     F7 30 08 DF 
191e5     F1 EE DC D9 | 	byte	$37, $32, $ca, $b4, $c3, $cf, $04, $05, $f7, $30, $08, $df, $f1, $ee, $dc, $d9
191e9     0E 1D E4 F8 
191ed     3C 3D 43 07 
191f1     B4 C8 BE C9 
191f5     06 1F 39 32 | 	byte	$0e, $1d, $e4, $f8, $3c, $3d, $43, $07, $b4, $c8, $be, $c9, $06, $1f, $39, $32
191f9     2C 47 D7 BB 
191fd     E5 D3 D8 E3 
19201     E4 17 10 21 
19205     1F F6 F4 00 | 	byte	$2c, $47, $d7, $bb, $e5, $d3, $d8, $e3, $e4, $17, $10, $21, $1f, $f6, $f4, $00
19209     18 38 08 D9 
1920d     F2 ED EA BB 
19211     C1 F8 E4 EB 
19215     53 32 3B 4C | 	byte	$18, $38, $08, $d9, $f2, $ed, $ea, $bb, $c1, $f8, $e4, $eb, $53, $32, $3b, $4c
19219     3A 27 C8 A9 
1921d     B7 CC F8 EE 
19221     EE 3C 1D 0D 
19225     32 0F D5 E7 | 	byte	$3a, $27, $c8, $a9, $b7, $cc, $f8, $ee, $ee, $3c, $1d, $0d, $32, $0f, $d5, $e7
19229     EA 09 E1 DF 
1922d     02 1C 24 06 
19231     E1 F4 E3 C9 
19235     12 08 2A 29 | 	byte	$ea, $09, $e1, $df, $02, $1c, $24, $06, $e1, $f4, $e3, $c9, $12, $08, $2a, $29
19239     1F 26 DA AF 
1923d     EA 02 10 1B 
19241     07 0B F6 FB 
19245     12 F2 E3 02 | 	byte	$1f, $26, $da, $af, $ea, $02, $10, $1b, $07, $0b, $f6, $fb, $12, $f2, $e3, $02
19249     F3 28 11 EA 
1924d     FC 0B DE C2 
19251     C6 EE DB E8 
19255     3C 1F 25 53 | 	byte	$f3, $28, $11, $ea, $fc, $0b, $de, $c2, $c6, $ee, $db, $e8, $3c, $1f, $25, $53
19259     5A 52 0F B7 
1925d     B7 C2 D3 DC 
19261     F0 17 04 EC 
19265     20 1B F0 19 | 	byte	$5a, $52, $0f, $b7, $b7, $c2, $d3, $dc, $f0, $17, $04, $ec, $20, $1b, $f0, $19
19269     07 04 E9 CE 
1926d     E6 17 0C 01 
19271     D8 F4 F7 04 
19275     43 3D 23 1A | 	byte	$07, $04, $e9, $ce, $e6, $17, $0c, $01, $d8, $f4, $f7, $04, $43, $3d, $23, $1a
19279     FF FF DD A4 
1927d     DA F9 E9 0B 
19281     1D 0C 15 13 
19285     07 EA DD F8 | 	byte	$ff, $ff, $dd, $a4, $da, $f9, $e9, $0b, $1d, $0c, $15, $13, $07, $ea, $dd, $f8
19289     ED 1B 0C D9 
1928d     F0 25 F9 FF 
19291     00 EF D5 E7 
19295     12 13 17 3C | 	byte	$ed, $1b, $0c, $d9, $f0, $25, $f9, $ff, $00, $ef, $d5, $e7, $12, $13, $17, $3c
19299     2F 24 10 C4 
1929d     D3 FE E5 D3 
192a1     E7 F5 FD F1 
192a5     17 10 ED 0B | 	byte	$2f, $24, $10, $c4, $d3, $fe, $e5, $d3, $e7, $f5, $fd, $f1, $17, $10, $ed, $0b
192a9     20 27 1A F7 
192ad     E7 FF E4 EA 
192b1     DC E4 F8 FF 
192b5     14 31 26 2D | 	byte	$20, $27, $1a, $f7, $e7, $ff, $e4, $ea, $dc, $e4, $f8, $ff, $14, $31, $26, $2d
192b9     26 11 D1 A5 
192bd     D1 F4 DA 06 
192c1     15 F8 19 2E 
192c5     30 25 06 EE | 	byte	$26, $11, $d1, $a5, $d1, $f4, $da, $06, $15, $f8, $19, $2e, $30, $25, $06, $ee
192c9     E7 F9 E7 C8 
192cd     ED 13 DF E8 
192d1     07 F9 FF 12 
192d5     15 07 02 25 | 	byte	$e7, $f9, $e7, $c8, $ed, $13, $df, $e8, $07, $f9, $ff, $12, $15, $07, $02, $25
192d9     21 1B 07 CF 
192dd     C9 01 FB 04 
192e1     18 0E FB E0 
192e5     F2 FD EA 02 | 	byte	$21, $1b, $07, $cf, $c9, $01, $fb, $04, $18, $0e, $fb, $e0, $f2, $fd, $ea, $02
192e9     20 12 F7 F2 
192ed     F8 0B 02 F1 
192f1     D8 D8 FB FC 
192f5     0B 2F 1F 1A | 	byte	$20, $12, $f7, $f2, $f8, $0b, $02, $f1, $d8, $d8, $fb, $fc, $0b, $2f, $1f, $1a
192f9     25 26 F8 DD 
192fd     EE EB CD EB 
19301     F9 F1 13 23 
19305     10 13 02 FA | 	byte	$25, $26, $f8, $dd, $ee, $eb, $cd, $eb, $f9, $f1, $13, $23, $10, $13, $02, $fa
19309     09 15 E5 BF 
1930d     DA FA E3 E7 
19311     0C 00 02 0F 
19315     2B 32 2A 2E | 	byte	$09, $15, $e5, $bf, $da, $fa, $e3, $e7, $0c, $00, $02, $0f, $2b, $32, $2a, $2e
19319     1F 06 D9 BB 
1931d     C7 FB FD F9 
19321     01 0C 05 F7 
19325     07 06 DE F0 | 	byte	$1f, $06, $d9, $bb, $c7, $fb, $fd, $f9, $01, $0c, $05, $f7, $07, $06, $de, $f0
19329     1B 0B EB ED 
1932d     F9 00 07 0A 
19331     04 04 0E F2 
19335     FC 0E 00 07 | 	byte	$1b, $0b, $eb, $ed, $f9, $00, $07, $0a, $04, $04, $0e, $f2, $fc, $0e, $00, $07
19339     28 19 DF D0 
1933d     F5 FF ED FE 
19341     FA EC F9 10 
19345     13 13 FB FF | 	byte	$28, $19, $df, $d0, $f5, $ff, $ed, $fe, $fa, $ec, $f9, $10, $13, $13, $fb, $ff
19349     15 17 F4 DD 
1934d     F0 05 E1 DB 
19351     F0 F8 00 0C 
19355     23 17 0C 24 | 	byte	$15, $17, $f4, $dd, $f0, $05, $e1, $db, $f0, $f8, $00, $0c, $23, $17, $0c, $24
19359     32 1C EE BD 
1935d     BB E7 FA F9 
19361     FF 0B 02 FB 
19365     15 20 F8 09 | 	byte	$32, $1c, $ee, $bd, $bb, $e7, $fa, $f9, $ff, $0b, $02, $fb, $15, $20, $f8, $09
19369     24 FD D1 D0 
1936d     E1 05 11 0A 
19371     FB F9 09 01 
19375     13 14 F3 F5 | 	byte	$24, $fd, $d1, $d0, $e1, $05, $11, $0a, $fb, $f9, $09, $01, $13, $14, $f3, $f5
19379     15 11 E7 D1 
1937d     F1 07 FB 00 
19381     0E 09 0F 12 
19385     0F 00 DE F2 | 	byte	$15, $11, $e7, $d1, $f1, $07, $fb, $00, $0e, $09, $0f, $12, $0f, $00, $de, $f2
19389     14 1A EE CB 
1938d     DE 09 F9 EC 
19391     FD FB F1 FF 
19395     1D 16 06 1C | 	byte	$14, $1a, $ee, $cb, $de, $09, $f9, $ec, $fd, $fb, $f1, $ff, $1d, $16, $06, $1c
19399     30 23 FE D3 
1939d     D8 03 00 EA 
193a1     F0 F4 F5 FB 
193a5     18 0F EA FF | 	byte	$30, $23, $fe, $d3, $d8, $03, $00, $ea, $f0, $f4, $f5, $fb, $18, $0f, $ea, $ff
193a9     1F 0F EB D3 
193ad     D6 F9 09 05 
193b1     06 00 FF 08 
193b5     1C 1C 05 08 | 	byte	$1f, $0f, $eb, $d3, $d6, $f9, $09, $05, $06, $00, $ff, $08, $1c, $1c, $05, $08
193b9     1D 0F E0 C2 
193bd     DC 00 00 00 
193c1     09 FC FB 12 
193c5     23 12 E6 D9 | 	byte	$1d, $0f, $e0, $c2, $dc, $00, $00, $00, $09, $fc, $fb, $12, $23, $12, $e6, $d9
193c9     F8 0E FC D7 
193cd     DF 04 FC F8 
193d1     12 12 05 09 
193d5     0F 04 F7 03 | 	byte	$f8, $0e, $fc, $d7, $df, $04, $fc, $f8, $12, $12, $05, $09, $0f, $04, $f7, $03
193d9     1F 2B 07 D5 
193dd     C7 F3 FC FE 
193e1     08 F5 E0 EE 
193e5     12 17 FB F8 | 	byte	$1f, $2b, $07, $d5, $c7, $f3, $fc, $fe, $08, $f5, $e0, $ee, $12, $17, $fb, $f8
193e9     0C 0F F9 E3 
193ed     EA 0B 14 08 
193f1     00 ED E7 FF 
193f5     1A 1F 00 F0 | 	byte	$0c, $0f, $f9, $e3, $ea, $0b, $14, $08, $00, $ed, $e7, $ff, $1a, $1f, $00, $f0
193f9     04 15 FD DE 
193fd     D7 ED F0 02 
19401     12 02 FE 0C 
19405     26 25 FF E3 | 	byte	$04, $15, $fd, $de, $d7, $ed, $f0, $02, $12, $02, $fe, $0c, $26, $25, $ff, $e3
19409     F4 0A FA D0 
1940d     D2 F3 00 09 
19411     19 07 F5 FD 
19415     0B 12 05 F2 | 	byte	$f4, $0a, $fa, $d0, $d2, $f3, $00, $09, $19, $07, $f5, $fd, $0b, $12, $05, $f2
19419     02 1E 15 EE 
1941d     DB E9 EE 02 
19421     14 07 F5 FB 
19425     0C 0F F3 E3 | 	byte	$02, $1e, $15, $ee, $db, $e9, $ee, $02, $14, $07, $f5, $fb, $0c, $0f, $f3, $e3
19429     F8 0B 02 E6 
1942d     E1 F8 0C 1B 
19431     1D FE DD DE 
19435     01 23 18 FE | 	byte	$f8, $0b, $02, $e6, $e1, $f8, $0c, $1b, $1d, $fe, $dd, $de, $01, $23, $18, $fe
19439     FF 08 FB ED 
1943d     F2 FE FB 00 
19441     01 F8 F6 04 
19445     21 31 07 D4 | 	byte	$ff, $08, $fb, $ed, $f2, $fe, $fb, $00, $01, $f8, $f6, $04, $21, $31, $07, $d4
19449     D8 F4 FB EC 
1944d     E9 ED EC 02 
19451     1D 16 06 F9 
19455     FF 10 10 04 | 	byte	$d8, $f4, $fb, $ec, $e9, $ed, $ec, $02, $1d, $16, $06, $f9, $ff, $10, $10, $04
19459     0F 1F 0F E6 
1945d     D5 DA E6 03 
19461     19 0B F1 E7 
19465     FD 16 0A F4 | 	byte	$0f, $1f, $0f, $e6, $d5, $da, $e6, $03, $19, $0b, $f1, $e7, $fd, $16, $0a, $f4
19469     EC EF F2 F2 
1946d     F9 06 0E 17 
19471     1D 0F F5 E2 
19475     F5 0F 08 FC | 	byte	$ec, $ef, $f2, $f2, $f9, $06, $0e, $17, $1d, $0f, $f5, $e2, $f5, $0f, $08, $fc
19479     02 05 01 F4 
1947d     F0 ED EE FC 
19481     05 07 FF F7 
19485     09 28 17 F1 | 	byte	$02, $05, $01, $f4, $f0, $ed, $ee, $fc, $05, $07, $ff, $f7, $09, $28, $17, $f1
19489     E3 E1 E5 ED 
1948d     00 0B 09 08 
19491     0A FF F8 F4 
19495     FE 12 10 02 | 	byte	$e3, $e1, $e5, $ed, $00, $0b, $09, $08, $0a, $ff, $f8, $f4, $fe, $12, $10, $02
19499     04 10 10 00 
1949d     ED DC D2 E0 
194a1     04 17 10 01 
194a5     FF 02 FE FC | 	byte	$04, $10, $10, $00, $ed, $dc, $d2, $e0, $04, $17, $10, $01, $ff, $02, $fe, $fc
194a9     00 FE F7 EA 
194ad     E6 FB 11 23 
194b1     2C 19 EE CD 
194b5     DA FE 0E 10 | 	byte	$00, $fe, $f7, $ea, $e6, $fb, $11, $23, $2c, $19, $ee, $cd, $da, $fe, $0e, $10
194b9     0B F9 ED F3 
194bd     FC 01 FE F9 
194c1     FA FF 05 0E 
194c5     22 2A 0A E3 | 	byte	$0b, $f9, $ed, $f3, $fc, $01, $fe, $f9, $fa, $ff, $05, $0e, $22, $2a, $0a, $e3
194c9     D5 D6 E4 F8 
194cd     04 08 01 02 
194d1     0A 08 FC F0 
194d5     EC FC 0B 10 | 	byte	$d5, $d6, $e4, $f8, $04, $08, $01, $02, $0a, $08, $fc, $f0, $ec, $fc, $0b, $10
194d9     15 17 0E FF 
194dd     F4 EE E9 ED 
194e1     FC 00 FB FF 
194e5     0A 0F 07 F7 | 	byte	$15, $17, $0e, $ff, $f4, $ee, $e9, $ed, $fc, $00, $fb, $ff, $0a, $0f, $07, $f7
194e9     EA E0 E5 F0 
194ed     FE 0D 13 15 
194f1     1C 14 FC E4 
194f5     DF EB FB 0B | 	byte	$ea, $e0, $e5, $f0, $fe, $0d, $13, $15, $1c, $14, $fc, $e4, $df, $eb, $fb, $0b
194f9     1A 19 0C FB 
194fd     E9 E3 E7 F8 
19501     08 0C 05 00 
19505     08 13 10 FD | 	byte	$1a, $19, $0c, $fb, $e9, $e3, $e7, $f8, $08, $0c, $05, $00, $08, $13, $10, $fd
19509     E6 D2 CB DD 
1950d     00 1A 21 1A 
19511     0E FA ED F1 
19515     FD 0C 0F 05 | 	byte	$e6, $d2, $cb, $dd, $00, $1a, $21, $1a, $0e, $fa, $ed, $f1, $fd, $0c, $0f, $05
19519     00 06 10 0F 
1951d     07 F4 D7 CF 
19521     E3 F9 08 12 
19525     12 08 FC F4 | 	byte	$00, $06, $10, $0f, $07, $f4, $d7, $cf, $e3, $f9, $08, $12, $12, $08, $fc, $f4
19529     F0 EE ED EE 
1952d     F8 09 1A 2C 
19531     34 1C F5 D3 
19535     CC DE FC 10 | 	byte	$f0, $ee, $ed, $ee, $f8, $09, $1a, $2c, $34, $1c, $f5, $d3, $cc, $de, $fc, $10
19539     19 0B F9 F0 
1953d     F4 F9 F7 F5 
19541     F5 F6 FF 0E 
19545     1F 25 14 F9 | 	byte	$19, $0b, $f9, $f0, $f4, $f9, $f7, $f5, $f5, $f6, $ff, $0e, $1f, $25, $14, $f9
19549     E4 D9 DA EA 
1954d     01 0E 0C 10 
19551     13 09 FB ED 
19555     E4 E9 F8 07 | 	byte	$e4, $d9, $da, $ea, $01, $0e, $0c, $10, $13, $09, $fb, $ed, $e4, $e9, $f8, $07
19559     16 1C 13 08 
1955d     02 FA EA E7 
19561     E6 E7 ED 00 
19565     19 27 23 0B | 	byte	$16, $1c, $13, $08, $02, $fa, $ea, $e7, $e6, $e7, $ed, $00, $19, $27, $23, $0b
19569     EC D3 CA DC 
1956d     FD 16 20 23 
19571     1F 0E FC ED 
19575     E3 E3 E7 F5 | 	byte	$ec, $d3, $ca, $dc, $fd, $16, $20, $23, $1f, $0e, $fc, $ed, $e3, $e3, $e7, $f5
19579     0A 16 15 0C 
1957d     01 F3 E9 F0 
19581     FE 05 04 01 
19585     07 0F 13 0C | 	byte	$0a, $16, $15, $0c, $01, $f3, $e9, $f0, $fe, $05, $04, $01, $07, $0f, $13, $0c
19589     00 E5 CC C7 
1958d     E0 FF 18 2D 
19591     27 0F F5 E4 
19595     E4 F0 FD 05 | 	byte	$00, $e5, $cc, $c7, $e0, $ff, $18, $2d, $27, $0f, $f5, $e4, $e4, $f0, $fd, $05
19599     0C 13 15 1D 
1959d     22 10 F1 D6 
195a1     CD D1 E7 01 
195a5     19 1F 12 00 | 	byte	$0c, $13, $15, $1d, $22, $10, $f1, $d6, $cd, $d1, $e7, $01, $19, $1f, $12, $00
195a9     F2 E5 DE E2 
195ad     F4 05 15 26 
195b1     2A 1C 02 EA 
195b5     DF E6 F5 05 | 	byte	$f2, $e5, $de, $e2, $f4, $05, $15, $26, $2a, $1c, $02, $ea, $df, $e6, $f5, $05
195b9     11 0B FD FA 
195bd     FD 00 FD F7 
195c1     ED E7 EB FA 
195c5     15 28 23 12 | 	byte	$11, $0b, $fd, $fa, $fd, $00, $fd, $f7, $ed, $e7, $eb, $fa, $15, $28, $23, $12
195c9     FC E1 CF D2 
195cd     E5 FB 0B 1D 
195d1     25 21 10 FC 
195d5     EA E3 E3 F1 | 	byte	$fc, $e1, $cf, $d2, $e5, $fb, $0b, $1d, $25, $21, $10, $fc, $ea, $e3, $e3, $f1
195d9     05 13 13 13 
195dd     0F 05 F8 F0 
195e1     E6 E0 E0 ED 
195e5     01 15 19 10 | 	byte	$05, $13, $13, $13, $0f, $05, $f8, $f0, $e6, $e0, $e0, $ed, $01, $15, $19, $10
195e9     00 ED DF E6 
195ed     FE 16 1F 20 
195f1     18 07 F5 ED 
195f5     EB ED EE F4 | 	byte	$00, $ed, $df, $e6, $fe, $16, $1f, $20, $18, $07, $f5, $ed, $eb, $ed, $ee, $f4
195f9     FB 00 02 08 
195fd     0D 07 FF F4 
19601     EB EA EB F8 
19605     0C 1E 26 24 | 	byte	$fb, $00, $02, $08, $0d, $07, $ff, $f4, $eb, $ea, $eb, $f8, $0c, $1e, $26, $24
19609     16 FB DC CB 
1960d     CC E0 FB 11 
19611     1D 1A 08 F8 
19615     F0 F2 F9 01 | 	byte	$16, $fb, $dc, $cb, $cc, $e0, $fb, $11, $1d, $1a, $08, $f8, $f0, $f2, $f9, $01
19619     08 07 04 06 
1961d     0B 0B 03 F9 
19621     F0 EA EB F7 
19625     05 0C 08 00 | 	byte	$08, $07, $04, $06, $0b, $0b, $03, $f9, $f0, $ea, $eb, $f7, $05, $0c, $08, $00
19629     F5 ED E6 E8 
1962d     F4 02 0D 1A 
19631     23 1C 0B FA 
19635     EE EA EC F3 | 	byte	$f5, $ed, $e6, $e8, $f4, $02, $0d, $1a, $23, $1c, $0b, $fa, $ee, $ea, $ec, $f3
19639     F9 FB FE 01 
1963d     0C 16 15 09 
19641     F8 E6 D8 DC 
19645     F3 0C 1A 1F | 	byte	$f9, $fb, $fe, $01, $0c, $16, $15, $09, $f8, $e6, $d8, $dc, $f3, $0c, $1a, $1f
19649     16 03 F0 E6 
1964d     E6 EC F6 00 
19651     08 07 02 FB 
19655     F9 FD 05 10 | 	byte	$16, $03, $f0, $e6, $e6, $ec, $f6, $00, $08, $07, $02, $fb, $f9, $fd, $05, $10
19659     19 15 0B 00 
1965d     F8 F3 F2 F4 
19661     F5 F0 EA EB 
19665     F5 00 0B 0F | 	byte	$19, $15, $0b, $00, $f8, $f3, $f2, $f4, $f5, $f0, $ea, $eb, $f5, $00, $0b, $0f
19669     09 00 F2 E8 
1966d     ED F9 03 10 
19671     1B 1B 14 0C 
19675     06 FE F8 F1 | 	byte	$09, $00, $f2, $e8, $ed, $f9, $03, $10, $1b, $1b, $14, $0c, $06, $fe, $f8, $f1
19679     EB E8 E9 ED 
1967d     F8 02 0A 0D 
19681     09 01 F5 EF 
19685     F2 FD 08 0F | 	byte	$eb, $e8, $e9, $ed, $f8, $02, $0a, $0d, $09, $01, $f5, $ef, $f2, $fd, $08, $0f
19689     10 06 FA F2 
1968d     F2 FB 04 0E 
19691     0C 02 F3 E4 
19695     E3 EE FE 0E | 	byte	$10, $06, $fa, $f2, $f2, $fb, $04, $0e, $0c, $02, $f3, $e4, $e3, $ee, $fe, $0e
19699     19 17 0E 08 
1969d     02 00 FC FB 
196a1     F6 ED E7 E6 
196a5     ED FB 07 13 | 	byte	$19, $17, $0e, $08, $02, $00, $fc, $fb, $f6, $ed, $e7, $e6, $ed, $fb, $07, $13
196a9     19 16 08 FA 
196ad     F0 EB EC F7 
196b1     04 0B 0B 06 
196b5     03 02 05 07 | 	byte	$19, $16, $08, $fa, $f0, $eb, $ec, $f7, $04, $0b, $0b, $06, $03, $02, $05, $07
196b9     04 FB F1 E8 
196bd     E7 ED F8 01 
196c1     08 08 07 07 
196c5     08 0E 10 0E | 	byte	$04, $fb, $f1, $e8, $e7, $ed, $f8, $01, $08, $08, $07, $07, $08, $0e, $10, $0e
196c9     04 F5 E7 DF 
196cd     E3 EB FA 07 
196d1     10 10 09 FE 
196d5     F6 F5 F9 00 | 	byte	$04, $f5, $e7, $df, $e3, $eb, $fa, $07, $10, $10, $09, $fe, $f6, $f5, $f9, $00
196d9     08 09 08 04 
196dd     04 06 09 0F 
196e1     0B 00 EE E0 
196e5     DA DF EA FA | 	byte	$08, $09, $08, $04, $04, $06, $09, $0f, $0b, $00, $ee, $e0, $da, $df, $ea, $fa
196e9     07 0E 0B 07 
196ed     04 00 00 03 
196f1     05 04 00 F9 
196f5     F7 F9 00 0B | 	byte	$07, $0e, $0b, $07, $04, $00, $00, $03, $05, $04, $00, $f9, $f7, $f9, $00, $0b
196f9     14 14 0C 01 
196fd     F5 EB E6 E7 
19701     EC F0 F7 FC 
19705     05 0E 17 1C | 	byte	$14, $14, $0c, $01, $f5, $eb, $e6, $e7, $ec, $f0, $f7, $fc, $05, $0e, $17, $1c
19709     18 0A FB EB 
1970d     E1 DF E7 F2 
19711     FF 05 0B 0E 
19715     0F 11 10 12 | 	byte	$18, $0a, $fb, $eb, $e1, $df, $e7, $f2, $ff, $05, $0b, $0e, $0f, $11, $10, $12
19719     0E 03 F7 EF 
1971d     E8 E9 EF FB 
19721     05 0B 09 01 
19725     FA F5 F2 F3 | 	byte	$0e, $03, $f7, $ef, $e8, $e9, $ef, $fb, $05, $0b, $09, $01, $fa, $f5, $f2, $f3
19729     F6 F8 F9 FC 
1972d     FE 03 0C 17 
19731     1D 1A 10 01 
19735     F2 E8 E9 EF | 	byte	$f6, $f8, $f9, $fc, $fe, $03, $0c, $17, $1d, $1a, $10, $01, $f2, $e8, $e9, $ef
19739     F8 FF 00 01 
1973d     00 FE FB FB 
19741     FB F9 F8 F6 
19745     F8 FF 07 0E | 	byte	$f8, $ff, $00, $01, $00, $fe, $fb, $fb, $fb, $f9, $f8, $f6, $f8, $ff, $07, $0e
19749     13 15 11 09 
1974d     00 F6 EE EA 
19751     E9 EB ED F2 
19755     FB 04 12 1E | 	byte	$13, $15, $11, $09, $00, $f6, $ee, $ea, $e9, $eb, $ed, $f2, $fb, $04, $12, $1e
19759     22 1D 10 02 
1975d     F2 E6 E0 E4 
19761     ED F6 FE 05 
19765     0A 0F 0F 0C | 	byte	$22, $1d, $10, $02, $f2, $e6, $e0, $e4, $ed, $f6, $fe, $05, $0a, $0f, $0f, $0c
19769     07 FF F4 EB 
1976d     E7 E7 EE FB 
19771     08 13 18 15 
19775     0E 04 FF FC | 	byte	$07, $ff, $f4, $eb, $e7, $e7, $ee, $fb, $08, $13, $18, $15, $0e, $04, $ff, $fc
19779     FA F7 F2 F0 
1977d     EE F0 F7 00 
19781     0B 10 10 0C 
19785     07 FF F9 F6 | 	byte	$fa, $f7, $f2, $f0, $ee, $f0, $f7, $00, $0b, $10, $10, $0c, $07, $ff, $f9, $f6
19789     F5 F3 F6 F8 
1978d     FD 00 00 01 
19791     00 FD F8 F4 
19795     F4 F8 00 0C | 	byte	$f5, $f3, $f6, $f8, $fd, $00, $00, $01, $00, $fd, $f8, $f4, $f4, $f8, $00, $0c
19799     15 1A 1B 16 
1979d     0C FF F1 EB 
197a1     E6 E6 E7 EC 
197a5     F2 FA 01 09 | 	byte	$15, $1a, $1b, $16, $0c, $ff, $f1, $eb, $e6, $e6, $e7, $ec, $f2, $fa, $01, $09
197a9     0E 0E 09 02 
197ad     FB F4 F1 F3 
197b1     F9 00 04 08 
197b5     0D 12 16 17 | 	byte	$0e, $0e, $09, $02, $fb, $f4, $f1, $f3, $f9, $00, $04, $08, $0d, $12, $16, $17
197b9     13 09 FC ED 
197bd     DF D6 D6 E0 
197c1     ED FE 0B 16 
197c5     1A 1A 13 0B | 	byte	$13, $09, $fc, $ed, $df, $d6, $d6, $e0, $ed, $fe, $0b, $16, $1a, $1a, $13, $0b
197c9     01 F6 EE EA 
197cd     EB EF F6 FF 
197d1     08 0C 0D 0B 
197d5     07 04 01 00 | 	byte	$01, $f6, $ee, $ea, $eb, $ef, $f6, $ff, $08, $0c, $0d, $0b, $07, $04, $01, $00
197d9     01 FF FE FC 
197dd     FA F7 F7 F8 
197e1     FA FB FC FB 
197e5     FA F9 F9 FC | 	byte	$01, $ff, $fe, $fc, $fa, $f7, $f7, $f8, $fa, $fb, $fc, $fb, $fa, $f9, $f9, $fc
197e9     FF 01 04 07 
197ed     09 08 06 05 
197f1     02 FF F9 F5 
197f5     F5 FA 00 08 | 	byte	$ff, $01, $04, $07, $09, $08, $06, $05, $02, $ff, $f9, $f5, $f5, $fa, $00, $08
197f9     0F 0F 09 00 
197fd     F4 E9 E2 E2 
19801     E7 F1 FC 07 
19805     12 19 1E 1D | 	byte	$0f, $0f, $09, $00, $f4, $e9, $e2, $e2, $e7, $f1, $fc, $07, $12, $19, $1e, $1d
19809     16 0B FF F4 
1980d     EA E4 E1 E4 
19811     EB F2 FB 03 
19815     0B 12 15 16 | 	byte	$16, $0b, $ff, $f4, $ea, $e4, $e1, $e4, $eb, $f2, $fb, $03, $0b, $12, $15, $16
19819     13 0D 04 FB 
1981d     F1 E9 E9 ED 
19821     F5 FF 07 0C 
19825     0E 0A 04 FF | 	byte	$13, $0d, $04, $fb, $f1, $e9, $e9, $ed, $f5, $ff, $07, $0c, $0e, $0a, $04, $ff
19829     F9 F4 F0 EE 
1982d     F1 F6 FB 01 
19831     07 09 08 07 
19835     04 03 02 04 | 	byte	$f9, $f4, $f0, $ee, $f1, $f6, $fb, $01, $07, $09, $08, $07, $04, $03, $02, $04
19839     05 04 01 FF 
1983d     FB F6 F4 F2 
19841     F3 F7 FB FE 
19845     02 05 07 08 | 	byte	$05, $04, $01, $ff, $fb, $f6, $f4, $f2, $f3, $f7, $fb, $fe, $02, $05, $07, $08
19849     08 03 00 FC 
1984d     F8 F2 F0 F0 
19851     F1 F3 F7 FE 
19855     05 0D 16 1D | 	byte	$08, $03, $00, $fc, $f8, $f2, $f0, $f0, $f1, $f3, $f7, $fe, $05, $0d, $16, $1d
19859     1E 1A 12 07 
1985d     FB EE E4 E0 
19861     E0 E6 F0 FB 
19865     02 09 0B 0C | 	byte	$1e, $1a, $12, $07, $fb, $ee, $e4, $e0, $e0, $e6, $f0, $fb, $02, $09, $0b, $0c
19869     08 02 FF F8 
1986d     F5 F4 F4 F9 
19871     FF 06 0C 10 
19875     12 12 0F 0C | 	byte	$08, $02, $ff, $f8, $f5, $f4, $f4, $f9, $ff, $06, $0c, $10, $12, $12, $0f, $0c
19879     08 00 F8 F0 
1987d     E7 E4 E5 EA 
19881     EE F8 00 04 
19885     0B 0F 11 10 | 	byte	$08, $00, $f8, $f0, $e7, $e4, $e5, $ea, $ee, $f8, $00, $04, $0b, $0f, $11, $10
19889     0D 07 00 FC 
1988d     F8 F6 F5 F6 
19891     F7 F8 F9 FC 
19895     00 03 08 0E | 	byte	$0d, $07, $00, $fc, $f8, $f6, $f5, $f6, $f7, $f8, $f9, $fc, $00, $03, $08, $0e
19899     0F 0E 0B 05 
1989d     00 F7 EE EA 
198a1     E9 EA F0 F7 
198a5     FF 06 0D 12 | 	byte	$0f, $0e, $0b, $05, $00, $f7, $ee, $ea, $e9, $ea, $f0, $f7, $ff, $06, $0d, $12
198a9     13 10 09 02 
198ad     FB F4 F0 EF 
198b1     F1 F5 FB 00 
198b5     04 0B 0E 10 | 	byte	$13, $10, $09, $02, $fb, $f4, $f0, $ef, $f1, $f5, $fb, $00, $04, $0b, $0e, $10
198b9     10 09 02 FB 
198bd     F1 EA E6 EA 
198c1     ED F5 FF 07 
198c5     0F 16 19 17 | 	byte	$10, $09, $02, $fb, $f1, $ea, $e6, $ea, $ed, $f5, $ff, $07, $0f, $16, $19, $17
198c9     11 06 FE F4 
198cd     EB E6 E6 E8 
198d1     EE F5 FB 01 
198d5     08 0C 11 14 | 	byte	$11, $06, $fe, $f4, $eb, $e6, $e6, $e8, $ee, $f5, $fb, $01, $08, $0c, $11, $14
198d9     12 0F 0A 05 
198dd     01 FD F7 F5 
198e1     F2 F0 F0 F4 
198e5     F8 FD 01 04 | 	byte	$12, $0f, $0a, $05, $01, $fd, $f7, $f5, $f2, $f0, $f0, $f4, $f8, $fd, $01, $04
198e9     05 05 02 00 
198ed     FC F8 F5 F4 
198f1     F6 F9 FF 02 
198f5     06 0C 10 13 | 	byte	$05, $05, $02, $00, $fc, $f8, $f5, $f4, $f6, $f9, $ff, $02, $06, $0c, $10, $13
198f9     13 10 0B 02 
198fd     F9 F1 E9 E7 
19901     E6 E9 EF F7 
19905     FF 08 11 16 | 	byte	$13, $10, $0b, $02, $f9, $f1, $e9, $e7, $e6, $e9, $ef, $f7, $ff, $08, $11, $16
19909     15 0F 06 FE 
1990d     F5 ED EA E9 
19911     ED F4 FC 04 
19915     0C 13 18 19 | 	byte	$15, $0f, $06, $fe, $f5, $ed, $ea, $e9, $ed, $f4, $fc, $04, $0c, $13, $18, $19
19919     15 0E 07 00 
1991d     F9 F2 EC E9 
19921     E9 EA EE F5 
19925     FB 00 06 09 | 	byte	$15, $0e, $07, $00, $f9, $f2, $ec, $e9, $e9, $ea, $ee, $f5, $fb, $00, $06, $09
19929     0B 09 05 01 
1992d     00 FC FB FB 
19931     FE 00 02 04 
19935     04 07 07 07 | 	byte	$0b, $09, $05, $01, $00, $fc, $fb, $fb, $fe, $00, $02, $04, $04, $07, $07, $07
19939     05 02 FF FB 
1993d     F8 F3 F0 EC 
19941     ED EE F3 F9 
19945     01 08 10 16 | 	byte	$05, $02, $ff, $fb, $f8, $f3, $f0, $ec, $ed, $ee, $f3, $f9, $01, $08, $10, $16
19949     19 15 0F 07 
1994d     FD F4 EC E9 
19951     E8 EB F1 F9 
19955     FF 05 0E 13 | 	byte	$19, $15, $0f, $07, $fd, $f4, $ec, $e9, $e8, $eb, $f1, $f9, $ff, $05, $0e, $13
19959     13 10 0C 07 
1995d     01 FA F4 EE 
19961     EC ED F1 F7 
19965     FE 04 0B 0E | 	byte	$13, $10, $0c, $07, $01, $fa, $f4, $ee, $ec, $ed, $f1, $f7, $fe, $04, $0b, $0e
19969     0C 0A 03 FE 
1996d     F9 F4 F1 F1 
19971     F5 FB 00 04 
19975     06 09 0B 0B | 	byte	$0c, $0a, $03, $fe, $f9, $f4, $f1, $f1, $f5, $fb, $00, $04, $06, $09, $0b, $0b
19979     09 05 02 FF 
1997d     FE FB F8 F5 
19981     F5 F5 F7 F9 
19985     FD 01 07 0B | 	byte	$09, $05, $02, $ff, $fe, $fb, $f8, $f5, $f5, $f5, $f7, $f9, $fd, $01, $07, $0b
19989     0C 09 04 FF 
1998d     F9 F4 F0 EE 
19991     EF F3 F8 FE 
19995     02 07 0D 11 | 	byte	$0c, $09, $04, $ff, $f9, $f4, $f0, $ee, $ef, $f3, $f8, $fe, $02, $07, $0d, $11
19999     13 13 12 0E 
1999d     08 02 FB F1 
199a1     EB E8 E7 EB 
199a5     F0 F8 00 06 | 	byte	$13, $13, $12, $0e, $08, $02, $fb, $f1, $eb, $e8, $e7, $eb, $f0, $f8, $00, $06
199a9     0A 0A 08 02 
199ad     FF FB F7 F7 
199b1     F9 FE 02 06 
199b5     09 0D 0F 0E | 	byte	$0a, $0a, $08, $02, $ff, $fb, $f7, $f7, $f9, $fe, $02, $06, $09, $0d, $0f, $0e
199b9     0B 06 01 FE 
199bd     FA F6 F1 EE 
199c1     ED EE F2 F7 
199c5     FB 02 08 0C | 	byte	$0b, $06, $01, $fe, $fa, $f6, $f1, $ee, $ed, $ee, $f2, $f7, $fb, $02, $08, $0c
199c9     0E 0C 06 02 
199cd     FC F9 F7 F6 
199d1     F8 FB FE 00 
199d5     01 03 05 08 | 	byte	$0e, $0c, $06, $02, $fc, $f9, $f7, $f6, $f8, $fb, $fe, $00, $01, $03, $05, $08
199d9     09 08 07 06 
199dd     05 02 FD F7 
199e1     F2 EF ED EF 
199e5     F3 F9 FF 05 | 	byte	$09, $08, $07, $06, $05, $02, $fd, $f7, $f2, $ef, $ed, $ef, $f3, $f9, $ff, $05
199e9     09 0A 09 07 
199ed     04 00 FE FC 
199f1     FB FD FF 00 
199f5     00 00 01 02 | 	byte	$09, $0a, $09, $07, $04, $00, $fe, $fc, $fb, $fd, $ff, $00, $00, $00, $01, $02
199f9     02 02 02 01 
199fd     FF FE FA F7 
19a01     F5 F4 F7 F9 
19a05     FE 04 09 0E | 	byte	$02, $02, $02, $01, $ff, $fe, $fa, $f7, $f5, $f4, $f7, $f9, $fe, $04, $09, $0e
19a09     0D 09 05 FF 
19a0d     FA F5 F2 F1 
19a11     F3 F7 F9 FD 
19a15     00 02 04 07 | 	byte	$0d, $09, $05, $ff, $fa, $f5, $f2, $f1, $f3, $f7, $f9, $fd, $00, $02, $04, $07
19a19     09 0A 0A 0B 
19a1d     0A 08 03 FE 
19a21     F9 F5 F4 F2 
19a25     F4 F7 FB FF | 	byte	$09, $0a, $0a, $0b, $0a, $08, $03, $fe, $f9, $f5, $f4, $f2, $f4, $f7, $fb, $ff
19a29     00 00 00 FF 
19a2d     FC FC FB FB 
19a31     00 01 04 05 
19a35     03 04 04 04 | 	byte	$00, $00, $00, $ff, $fc, $fc, $fb, $fb, $00, $01, $04, $05, $03, $04, $04, $04
19a39     05 05 06 05 
19a3d     04 01 FE FA 
19a41     F5 F3 F2 F4 
19a45     F7 FD 01 05 | 	byte	$05, $05, $06, $05, $04, $01, $fe, $fa, $f5, $f3, $f2, $f4, $f7, $fd, $01, $05
19a49     07 05 01 FE 
19a4d     FA F9 F7 F7 
19a51     FA FE 00 01 
19a55     04 06 08 09 | 	byte	$07, $05, $01, $fe, $fa, $f9, $f7, $f7, $fa, $fe, $00, $01, $04, $06, $08, $09
19a59     0A 09 09 09 
19a5d     07 04 FF F8 
19a61     F3 EE ED EE 
19a65     F1 F7 FC FF | 	byte	$0a, $09, $09, $09, $07, $04, $ff, $f8, $f3, $ee, $ed, $ee, $f1, $f7, $fc, $ff
19a69     01 02 01 00 
19a6d     FF FF 00 01 
19a71     04 08 09 08 
19a75     05 02 01 00 | 	byte	$01, $02, $01, $00, $ff, $ff, $00, $01, $04, $08, $09, $08, $05, $02, $01, $00
19a79     FF 00 FF FF 
19a7d     FF FC F9 F7 
19a81     F5 F3 F5 F8 
19a85     FB 01 07 09 | 	byte	$ff, $00, $ff, $ff, $ff, $fc, $f9, $f7, $f5, $f3, $f5, $f8, $fb, $01, $07, $09
19a89     0A 08 04 01 
19a8d     FE FB F9 FA 
19a91     FB FD FE FF 
19a95     FF FF 00 01 | 	byte	$0a, $08, $04, $01, $fe, $fb, $f9, $fa, $fb, $fd, $fe, $ff, $ff, $ff, $00, $01
19a99     04 04 06 07 
19a9d     07 05 00 FC 
19aa1     F9 F5 F4 F5 
19aa5     F9 FE 01 03 | 	byte	$04, $04, $06, $07, $07, $05, $00, $fc, $f9, $f5, $f4, $f5, $f9, $fe, $01, $03
19aa9     04 04 01 FF 
19aad     FD FD FC FD 
19ab1     FF 02 03 02 
19ab5     00 00 00 01 | 	byte	$04, $04, $01, $ff, $fd, $fd, $fc, $fd, $ff, $02, $03, $02, $00, $00, $00, $01
19ab9     01 02 03 02 
19abd     01 00 FF FD 
19ac1     FA F8 F9 FB 
19ac5     FD 00 05 08 | 	byte	$01, $02, $03, $02, $01, $00, $ff, $fd, $fa, $f8, $f9, $fb, $fd, $00, $05, $08
19ac9     06 02 00 FC 
19acd     F9 F7 F6 F7 
19ad1     FB FC FF 00 
19ad5     01 02 04 06 | 	byte	$06, $02, $00, $fc, $f9, $f7, $f6, $f7, $fb, $fc, $ff, $00, $01, $02, $04, $06
19ad9     08 09 0B 0B 
19add     0A 08 03 FD 
19ae1     F8 F4 F2 F2 
19ae5     F4 F8 FC FE | 	byte	$08, $09, $0b, $0b, $0a, $08, $03, $fd, $f8, $f4, $f2, $f2, $f4, $f8, $fc, $fe
19ae9     FF FF FE FB 
19aed     FC FB FE 00 
19af1     03 07 08 07 
19af5     05 05 04 04 | 	byte	$ff, $ff, $fe, $fb, $fc, $fb, $fe, $00, $03, $07, $08, $07, $05, $05, $04, $04
19af9     04 04 04 03 
19afd     00 FE FB F7 
19b01     F5 F2 F4 F6 
19b05     F9 FE 02 05 | 	byte	$04, $04, $04, $03, $00, $fe, $fb, $f7, $f5, $f2, $f4, $f6, $f9, $fe, $02, $05
19b09     05 03 01 FF 
19b0d     FD FB FB FE 
19b11     00 01 02 02 
19b15     04 03 03 04 | 	byte	$05, $03, $01, $ff, $fd, $fb, $fb, $fe, $00, $01, $02, $02, $04, $03, $03, $04
19b19     04 04 05 05 
19b1d     04 02 FE F8 
19b21     F5 F2 F2 F4 
19b25     F8 FC 00 01 | 	byte	$04, $04, $05, $05, $04, $02, $fe, $f8, $f5, $f2, $f2, $f4, $f8, $fc, $00, $01
19b29     01 02 00 FF 
19b2d     FF FF 00 02 
19b31     04 06 07 05 
19b35     01 01 00 FF | 	byte	$01, $02, $00, $ff, $ff, $ff, $00, $02, $04, $06, $07, $05, $01, $01, $00, $ff
19b39     FF 00 00 00 
19b3d     FE FC FC F9 
19b41     F8 F7 F9 FC 
19b45     FE 02 06 08 | 	byte	$ff, $00, $00, $00, $fe, $fc, $fc, $f9, $f8, $f7, $f9, $fc, $fe, $02, $06, $08
19b49     08 05 02 FF 
19b4d     FC FB FA FB 
19b51     FC FE FE FF 
19b55     FF FF 00 00 | 	byte	$08, $05, $02, $ff, $fc, $fb, $fa, $fb, $fc, $fe, $fe, $ff, $ff, $ff, $00, $00
19b59     02 04 07 07 
19b5d     07 05 01 FD 
19b61     F9 F8 F8 F9 
19b65     FC 00 00 00 | 	byte	$02, $04, $07, $07, $07, $05, $01, $fd, $f9, $f8, $f8, $f9, $fc, $00, $00, $00
19b69     00 00 FE FB 
19b6d     F9 FA FC FE 
19b71     01 03 04 04 
19b75     03 02 02 02 | 	byte	$00, $00, $fe, $fb, $f9, $fa, $fc, $fe, $01, $03, $04, $04, $03, $02, $02, $02
19b79     04 03 03 02 
19b7d     00 00 FF FC 
19b81     F9 F8 F9 FB 
19b85     FC FF 01 02 | 	byte	$04, $03, $03, $02, $00, $00, $ff, $fc, $f9, $f8, $f9, $fb, $fc, $ff, $01, $02
19b89     01 FF FD FB 
19b8d     F9 F9 FB FE 
19b91     00 00 01 02 
19b95     02 02 02 04 | 	byte	$01, $ff, $fd, $fb, $f9, $f9, $fb, $fe, $00, $00, $01, $02, $02, $02, $02, $04
19b99     07 07 08 08 
19b9d     06 03 00 FB 
19ba1     F7 F5 F4 F4 
19ba5     F7 FA FC FD | 	byte	$07, $07, $08, $08, $06, $03, $00, $fb, $f7, $f5, $f4, $f4, $f7, $fa, $fc, $fd
19ba9     FF FF FE FE 
19bad     FE FF 00 01 
19bb1     04 06 08 07 
19bb5     06 06 04 03 | 	byte	$ff, $ff, $fe, $fe, $fe, $ff, $00, $01, $04, $06, $08, $07, $06, $06, $04, $03
19bb9     02 01 01 FF 
19bbd     FD FB F8 F7 
19bc1     F5 F6 F8 FA 
19bc5     FC 00 03 05 | 	byte	$02, $01, $01, $ff, $fd, $fb, $f8, $f7, $f5, $f6, $f8, $fa, $fc, $00, $03, $05
19bc9     04 02 00 FF 
19bcd     FE FE 00 01 
19bd1     02 02 01 02 
19bd5     01 00 00 00 | 	byte	$04, $02, $00, $ff, $fe, $fe, $00, $01, $02, $02, $01, $02, $01, $00, $00, $00
19bd9     00 00 01 01 
19bdd     02 01 FF FC 
19be1     FB F9 F9 FB 
19be5     FC FF FF 00 | 	byte	$00, $00, $01, $01, $02, $01, $ff, $fc, $fb, $f9, $f9, $fb, $fc, $ff, $ff, $00
19be9     00 01 00 00 
19bed     00 00 00 00 
19bf1     01 02 02 01 
19bf5     00 00 00 00 | 	byte	$00, $01, $00, $00, $00, $00, $00, $00, $01, $02, $02, $01, $00, $00, $00, $00
19bf9     00 00 00 00 
19bfd     00          | 	byte	$00[5]
19bfe     FF FF FB FB 
19c02     FB FC FF 00 
19c06     02 04 04 03 
19c0a     00 FF FD FB | 	byte	$ff, $ff, $fb, $fb, $fb, $fc, $ff, $00, $02, $04, $04, $03, $00, $ff, $fd, $fb
19c0e     FA FB FC FE 
19c12     FF 00 00 00 
19c16     01 02 02 03 
19c1a     03 03 04 04 | 	byte	$fa, $fb, $fc, $fe, $ff, $00, $00, $00, $01, $02, $02, $03, $03, $03, $04, $04
19c1e     03 01 00 FF 
19c22     FD FC FC FC 
19c26     FD FC FC FC 
19c2a     FB FA FB FC | 	byte	$03, $01, $00, $ff, $fd, $fc, $fc, $fc, $fd, $fc, $fc, $fc, $fb, $fa, $fb, $fc
19c2e     FF 00 00 02 
19c32     04 05 04 03 
19c36     02 02 01 02 
19c3a     02 03 02 01 | 	byte	$ff, $00, $00, $02, $04, $05, $04, $03, $02, $02, $01, $02, $02, $03, $02, $01
19c3e     00 FF FC FB 
19c42     F9 F9 F9 F9 
19c46     FC FE 00 00 
19c4a     FF FF FF FF | 	byte	$00, $ff, $fc, $fb, $f9, $f9, $f9, $f9, $fc, $fe, $00, $00, $ff, $ff, $ff, $ff
19c4e     FF FF 00 00 
19c52     01 02 03 04 
19c56     04 05 06 05 
19c5a     03 02 01 00 | 	byte	$ff, $ff, $00, $00, $01, $02, $03, $04, $04, $05, $06, $05, $03, $02, $01, $00
19c5e     FF FB F9 F9 
19c62     F9 F9 FB FC 
19c66     FD FE FF FF 
19c6a     FF FE FF FF | 	byte	$ff, $fb, $f9, $f9, $f9, $f9, $fb, $fc, $fd, $fe, $ff, $ff, $ff, $fe, $ff, $ff
19c6e     00 01 02 05 
19c72     07 07 05 04 
19c76     03 00 00 FF 
19c7a     FE FD FD FD | 	byte	$00, $01, $02, $05, $07, $07, $05, $04, $03, $00, $00, $ff, $fe, $fd, $fd, $fd
19c7e     FE FD FC FC 
19c82     FC FD FD FE 
19c86     FE FF 00 01 
19c8a     01 01 02 01 | 	byte	$fe, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $fe, $ff, $00, $01, $01, $01, $02, $01
19c8e     01 00 00 01 
19c92     00 00 00 FF 
19c96     FF 00 00 01 
19c9a     01 01 01 01 | 	byte	$01, $00, $00, $01, $00, $00, $00, $ff, $ff, $00, $00, $01, $01, $01, $01, $01
19c9e     00 FF FE FE 
19ca2     FD FC FE FF 
19ca6     00 00 00 00 
19caa     00 00 00 FB | 	byte	$00, $ff, $fe, $fe, $fd, $fc, $fe, $ff, $00, $00, $00, $00, $00, $00, $00, $fb
19cae     01 02 03 04 
19cb2     06 00 0C 04 
19cb6     00 0B 09 00 
19cba     FD F0 F1 F1 | 	byte	$01, $02, $03, $04, $06, $00, $0c, $04, $00, $0b, $09, $00, $fd, $f0, $f1, $f1
19cbe     F2 F3 EC F6 
19cc2     FB ED ED E8 
19cc6     ED F1 D8 D2 
19cca     D8 E4 E3 E0 | 	byte	$f2, $f3, $ec, $f6, $fb, $ed, $ed, $e8, $ed, $f1, $d8, $d2, $d8, $e4, $e3, $e0
19cce     EC E9 E5 F4 
19cd2     F8 FA 05 F2 
19cd6     01 13 06 FE 
19cda     E9 E4 F2 EC | 	byte	$ec, $e9, $e5, $f4, $f8, $fa, $05, $f2, $01, $13, $06, $fe, $e9, $e4, $f2, $ec
19cde     F2 F2 F0 05 
19ce2     01 F8 FD F7 
19ce6     0C 07 02 0B 
19cea     0E 1F 2A 2B | 	byte	$f2, $f2, $f0, $05, $01, $f8, $fd, $f7, $0c, $07, $02, $0b, $0e, $1f, $2a, $2b
19cee     34 29 1A 2E 
19cf2     36 30 29 23 
19cf6     35 3B 33 31 
19cfa     27 3B 43 2A | 	byte	$34, $29, $1a, $2e, $36, $30, $29, $23, $35, $3b, $33, $31, $27, $3b, $43, $2a
19cfe     31 34 28 2A 
19d02     24 20 12 0E 
19d06     21 1C 09 F3 
19d0a     F2 03 03 F4 | 	byte	$31, $34, $28, $2a, $24, $20, $12, $0e, $21, $1c, $09, $f3, $f2, $03, $03, $f4
19d0e     FE 01 F9 01 
19d12     FE F7 F3 EF 
19d16     FA F8 E6 E0 
19d1a     ED F7 ED EE | 	byte	$fe, $01, $f9, $01, $fe, $f7, $f3, $ef, $fa, $f8, $e6, $e0, $ed, $f7, $ed, $ee
19d1e     05 FC F1 FA 
19d22     02 FA 01 11 
19d26     10 0A F6 EF 
19d2a     FF FC E4 E1 | 	byte	$05, $fc, $f1, $fa, $02, $fa, $01, $11, $10, $0a, $f6, $ef, $ff, $fc, $e4, $e1
19d2e     F4 07 06 FF 
19d32     F2 F3 FC FB 
19d36     05 FC EB FD 
19d3a     0A EE E4 F6 | 	byte	$f4, $07, $06, $ff, $f2, $f3, $fc, $fb, $05, $fc, $eb, $fd, $0a, $ee, $e4, $f6
19d3e     FA F7 F9 EB 
19d42     E1 E8 F0 E9 
19d46     D8 DC E6 F1 
19d4a     EB D3 CF E1 | 	byte	$fa, $f7, $f9, $eb, $e1, $e8, $f0, $e9, $d8, $dc, $e6, $f1, $eb, $d3, $cf, $e1
19d4e     F8 0B 11 FB 
19d52     FD 03 FE 10 
19d56     06 FB 0B 21 
19d5a     21 F3 F1 11 | 	byte	$f8, $0b, $11, $fb, $fd, $03, $fe, $10, $06, $fb, $0b, $21, $21, $f3, $f1, $11
19d5e     17 1C 26 1A 
19d62     16 0B 14 24 
19d66     1F 2C 34 2D 
19d6a     19 F8 FC 20 | 	byte	$17, $1c, $26, $1a, $16, $0b, $14, $24, $1f, $2c, $34, $2d, $19, $f8, $fc, $20
19d6e     33 37 2A 10 
19d72     14 17 19 27 
19d76     1F 33 35 1F 
19d7a     1D 08 0C 19 | 	byte	$33, $37, $2a, $10, $14, $17, $19, $27, $1f, $33, $35, $1f, $1d, $08, $0c, $19
19d7e     13 18 08 EE 
19d82     F3 FC FB ED 
19d86     F0 05 0A FB 
19d8a     01 FD F8 FB | 	byte	$13, $18, $08, $ee, $f3, $fc, $fb, $ed, $f0, $05, $0a, $fb, $01, $fd, $f8, $fb
19d8e     F4 FF F1 D4 
19d92     E0 E7 F0 E2 
19d96     EC 06 03 F4 
19d9a     E5 E1 EB E9 | 	byte	$f4, $ff, $f1, $d4, $e0, $e7, $f0, $e2, $ec, $06, $03, $f4, $e5, $e1, $eb, $e9
19d9e     E3 FF F8 DD 
19da2     DF EE DD D8 
19da6     EF FF F8 DC 
19daa     CF D6 E7 DA | 	byte	$e3, $ff, $f8, $dd, $df, $ee, $dd, $d8, $ef, $ff, $f8, $dc, $cf, $d6, $e7, $da
19dae     CC E2 DB CC 
19db2     DA DB DE E0 
19db6     E0 DC DD D6 
19dba     BF D1 E5 D4 | 	byte	$cc, $e2, $db, $cc, $da, $db, $de, $e0, $e0, $dc, $dd, $d6, $bf, $d1, $e5, $d4
19dbe     CB D9 E4 DE 
19dc2     D7 D7 DB EF 
19dc6     F1 E3 DC D4 
19dca     D2 E6 F5 EE | 	byte	$cb, $d9, $e4, $de, $d7, $d7, $db, $ef, $f1, $e3, $dc, $d4, $d2, $e6, $f5, $ee
19dce     F8 0B 1B 30 
19dd2     2F 1C 25 38 
19dd6     3B 2D 2F 29 
19dda     15 28 31 25 | 	byte	$f8, $0b, $1b, $30, $2f, $1c, $25, $38, $3b, $2d, $2f, $29, $15, $28, $31, $25
19dde     27 19 1B 2E 
19de2     26 2A 41 44 
19de6     3F 4B 56 5D 
19dea     56 62 5A 3E | 	byte	$27, $19, $1b, $2e, $26, $2a, $41, $44, $3f, $4b, $56, $5d, $56, $62, $5a, $3e
19dee     45 4B 36 47 
19df2     31 35 34 23 
19df6     35 22 23 32 
19dfa     2C 3C 2B 0B | 	byte	$45, $4b, $36, $47, $31, $35, $34, $23, $35, $22, $23, $32, $2c, $3c, $2b, $0b
19dfe     0B FB F4 0B 
19e02     01 FC F0 DD 
19e06     F6 EA E4 DC 
19e0a     D0 E0 CA B4 | 	byte	$0b, $fb, $f4, $0b, $01, $fc, $f0, $dd, $f6, $ea, $e4, $dc, $d0, $e0, $ca, $b4
19e0e     D8 DD D5 BD 
19e12     B1 D2 D3 D3 
19e16     C5 AF B3 A8 
19e1a     96 AD B3 9E | 	byte	$d8, $dd, $d5, $bd, $b1, $d2, $d3, $d3, $c5, $af, $b3, $a8, $96, $ad, $b3, $9e
19e1e     AA C1 D9 E0 
19e22     D6 E1 E8 E6 
19e26     D3 CB D7 C0 
19e2a     A6 C5 DE C8 | 	byte	$aa, $c1, $d9, $e0, $d6, $e1, $e8, $e6, $d3, $cb, $d7, $c0, $a6, $c5, $de, $c8
19e2e     BD CA CC C6 
19e32     D5 E1 FF F8 
19e36     D5 DE 04 FF 
19e3a     E2 E4 F3 F1 | 	byte	$bd, $ca, $cc, $c6, $d5, $e1, $ff, $f8, $d5, $de, $04, $ff, $e2, $e4, $f3, $f1
19e3e     FC 07 FC 01 
19e42     F3 E7 F9 F2 
19e46     E0 0A 2E 13 
19e4a     08 1A 33 44 | 	byte	$fc, $07, $fc, $01, $f3, $e7, $f9, $f2, $e0, $0a, $2e, $13, $08, $1a, $33, $44
19e4e     36 1B 0F 27 
19e52     2E 1D 36 3F 
19e56     42 53 51 38 
19e5a     36 3D 4D 5F | 	byte	$36, $1b, $0f, $27, $2e, $1d, $36, $3f, $42, $53, $51, $38, $36, $3d, $4d, $5f
19e5e     51 4B 4C 4F 
19e62     35 1F 40 51 
19e66     36 31 33 2D 
19e6a     38 33 1D 21 | 	byte	$51, $4b, $4c, $4f, $35, $1f, $40, $51, $36, $31, $33, $2d, $38, $33, $1d, $21
19e6e     24 1F 16 1B 
19e72     39 2D 1B 1C 
19e76     22 35 27 15 
19e7a     1E 14 08 0B | 	byte	$24, $1f, $16, $1b, $39, $2d, $1b, $1c, $22, $35, $27, $15, $1e, $14, $08, $0b
19e7e     09 FC 06 00 
19e82     0B 06 01 15 
19e86     FE 0A 0C FE 
19e8a     11 07 EF E9 | 	byte	$09, $fc, $06, $00, $0b, $06, $01, $15, $fe, $0a, $0c, $fe, $11, $07, $ef, $e9
19e8e     E1 EB F3 F4 
19e92     FE F5 ED F7 
19e96     F2 ED E9 E4 
19e9a     EE D5 CA E7 | 	byte	$e1, $eb, $f3, $f4, $fe, $f5, $ed, $f7, $f2, $ed, $e9, $e4, $ee, $d5, $ca, $e7
19e9e     E8 E2 E6 EC 
19ea2     F7 E0 DB D9 
19ea6     D4 E4 EC E6 
19eaa     EE E1 CA D1 | 	byte	$e8, $e2, $e6, $ec, $f7, $e0, $db, $d9, $d4, $e4, $ec, $e6, $ee, $e1, $ca, $d1
19eae     EB FF F1 E1 
19eb2     D5 C8 D2 DF 
19eb6     D6 CE DE EA 
19eba     EB EC FD 0F | 	byte	$eb, $ff, $f1, $e1, $d5, $c8, $d2, $df, $d6, $ce, $de, $ea, $eb, $ec, $fd, $0f
19ebe     FC EE F8 03 
19ec2     F2 E6 F2 F1 
19ec6     E2 DE F0 F7 
19eca     FC FF 07 1C | 	byte	$fc, $ee, $f8, $03, $f2, $e6, $f2, $f1, $e2, $de, $f0, $f7, $fc, $ff, $07, $1c
19ece     27 18 28 44 
19ed2     3E 3E 3D 36 
19ed6     2D 27 2B 3E 
19eda     41 26 16 1F | 	byte	$27, $18, $28, $44, $3e, $3e, $3d, $36, $2d, $27, $2b, $3e, $41, $26, $16, $1f
19ede     2D 29 38 4E 
19ee2     51 45 31 37 
19ee6     51 5B 52 56 
19eea     48 3A 3A 37 | 	byte	$2d, $29, $38, $4e, $51, $45, $31, $37, $51, $5b, $52, $56, $48, $3a, $3a, $37
19eee     39 2A 26 3A 
19ef2     44 42 36 29 
19ef6     36 3C 3A 37 
19efa     2F 24 12 13 | 	byte	$39, $2a, $26, $3a, $44, $42, $36, $29, $36, $3c, $3a, $37, $2f, $24, $12, $13
19efe     19 05 F3 F9 
19f02     F2 E0 E8 F4 
19f06     FF E9 CD D5 
19f0a     E1 E3 DA D9 | 	byte	$19, $05, $f3, $f9, $f2, $e0, $e8, $f4, $ff, $e9, $cd, $d5, $e1, $e3, $da, $d9
19f0e     E4 DF C3 B6 
19f12     C7 D3 B6 94 
19f16     96 93 8B 94 
19f1a     A0 A2 AC BE | 	byte	$e4, $df, $c3, $b6, $c7, $d3, $b6, $94, $96, $93, $8b, $94, $a0, $a2, $ac, $be
19f1e     D3 CE B8 C6 
19f22     CC CB BE A2 
19f26     A3 AF AC A0 
19f2a     A8 C2 D0 AD | 	byte	$d3, $ce, $b8, $c6, $cc, $cb, $be, $a2, $a3, $af, $ac, $a0, $a8, $c2, $d0, $ad
19f2e     A1 BB DD E4 
19f32     CD C8 C6 D0 
19f36     E7 F1 EE F2 
19f3a     F7 FC F9 F4 | 	byte	$a1, $bb, $dd, $e4, $cd, $c8, $c6, $d0, $e7, $f1, $ee, $f2, $f7, $fc, $f9, $f4
19f3e     FE F4 E6 E8 
19f42     ED FB 0D 14 
19f46     14 20 2A 28 
19f4a     20 25 24 1A | 	byte	$fe, $f4, $e6, $e8, $ed, $fb, $0d, $14, $14, $20, $2a, $28, $20, $25, $24, $1a
19f4e     1C 28 38 2D 
19f52     28 33 40 41 
19f56     46 50 4E 4C 
19f5a     47 4D 56 50 | 	byte	$1c, $28, $38, $2d, $28, $33, $40, $41, $46, $50, $4e, $4c, $47, $4d, $56, $50
19f5e     3C 35 4D 55 
19f62     40 2E 38 33 
19f66     26 28 34 32 
19f6a     1C 10 0C 19 | 	byte	$3c, $35, $4d, $55, $40, $2e, $38, $33, $26, $28, $34, $32, $1c, $10, $0c, $19
19f6e     29 35 34 27 
19f72     1A 15 0C 11 
19f76     1B 0C 09 11 
19f7a     0E FB F0 F1 | 	byte	$29, $35, $34, $27, $1a, $15, $0c, $11, $1b, $0c, $09, $11, $0e, $fb, $f0, $f1
19f7e     FA FB F4 ED 
19f82     EF F1 E8 E9 
19f86     EE F0 D8 BD 
19f8a     C7 D5 CF C9 | 	byte	$fa, $fb, $f4, $ed, $ef, $f1, $e8, $e9, $ee, $f0, $d8, $bd, $c7, $d5, $cf, $c9
19f8e     CB DC E2 CD 
19f92     C6 D2 D4 BE 
19f96     B3 CB D7 D0 
19f9a     C7 C0 C3 CA | 	byte	$cb, $dc, $e2, $cd, $c6, $d2, $d4, $be, $b3, $cb, $d7, $d0, $c7, $c0, $c3, $ca
19f9e     D4 DE DB CA 
19fa2     CC D4 D5 D9 
19fa6     D7 E2 E6 E5 
19faa     ED F0 F8 F9 | 	byte	$d4, $de, $db, $ca, $cc, $d4, $d5, $d9, $d7, $e2, $e6, $e5, $ed, $f0, $f8, $f9
19fae     EE EA E0 D9 
19fb2     DB DD E2 E3 
19fb6     ED 01 06 04 
19fba     06 0C 09 00 | 	byte	$ee, $ea, $e0, $d9, $db, $dd, $e2, $e3, $ed, $01, $06, $04, $06, $0c, $09, $00
19fbe     FF 05 F7 ED 
19fc2     FE 00 05 F7 
19fc6     E6 F9 16 1E 
19fca     17 22 30 28 | 	byte	$ff, $05, $f7, $ed, $fe, $00, $05, $f7, $e6, $f9, $16, $1e, $17, $22, $30, $28
19fce     23 3E 54 5E 
19fd2     49 33 3C 49 
19fd6     45 3B 3A 41 
19fda     49 3D 3B 47 | 	byte	$23, $3e, $54, $5e, $49, $33, $3c, $49, $45, $3b, $3a, $41, $49, $3d, $3b, $47
19fde     4C 4B 55 63 
19fe2     5B 4A 51 5D 
19fe6     57 52 53 57 
19fea     4F 3F 39 4A | 	byte	$4c, $4b, $55, $63, $5b, $4a, $51, $5d, $57, $52, $53, $57, $4f, $3f, $39, $4a
19fee     4C 29 23 31 
19ff2     3D 44 42 40 
19ff6     3E 3B 2C 17 
19ffa     19 14 0A 0A | 	byte	$4c, $29, $23, $31, $3d, $44, $42, $40, $3e, $3b, $2c, $17, $19, $14, $0a, $0a
19ffe     F9 E1 E3 EB 
1a002     F0 F2 E3 D0 
1a006     CD D4 E3 EC 
1a00a     E9 DE CD C8 | 	byte	$f9, $e1, $e3, $eb, $f0, $f2, $e3, $d0, $cd, $d4, $e3, $ec, $e9, $de, $cd, $c8
1a00e     CA C4 C6 C8 
1a012     C6 AE 8E 8E 
1a016     A3 AC AD B4 
1a01a     BB BF BC BA | 	byte	$ca, $c4, $c6, $c8, $c6, $ae, $8e, $8e, $a3, $ac, $ad, $b4, $bb, $bf, $bc, $ba
1a01e     C1 D7 E6 D6 
1a022     BE AE A7 AF 
1a026     C5 D2 D7 CB 
1a02a     BD C1 C0 BE | 	byte	$c1, $d7, $e6, $d6, $be, $ae, $a7, $af, $c5, $d2, $d7, $cb, $bd, $c1, $c0, $be
1a02e     C9 DC E0 CD 
1a032     C6 E2 F7 FE 
1a036     FD F5 F5 F9 
1a03a     F9 F4 F9 F4 | 	byte	$c9, $dc, $e0, $cd, $c6, $e2, $f7, $fe, $fd, $f5, $f5, $f9, $f9, $f4, $f9, $f4
1a03e     EA EB FE 0A 
1a042     07 10 1A 26 
1a046     25 14 10 1F 
1a04a     25 23 21 1B | 	byte	$ea, $eb, $fe, $0a, $07, $10, $1a, $26, $25, $14, $10, $1f, $25, $23, $21, $1b
1a04e     19 17 21 39 
1a052     3C 37 3A 3F 
1a056     3E 40 3E 41 
1a05a     3D 37 34 3A | 	byte	$19, $17, $21, $39, $3c, $37, $3a, $3f, $3e, $40, $3e, $41, $3d, $37, $34, $3a
1a05e     52 51 42 3F 
1a062     35 2D 2C 23 
1a066     22 24 1B 1A 
1a06a     1C 20 24 29 | 	byte	$52, $51, $42, $3f, $35, $2d, $2c, $23, $22, $24, $1b, $1a, $1c, $20, $24, $29
1a06e     2C 24 1F 20 
1a072     14 05 0B 10 
1a076     0E 01 FA 02 
1a07a     00 F7 F2 FF | 	byte	$2c, $24, $1f, $20, $14, $05, $0b, $10, $0e, $01, $fa, $02, $00, $f7, $f2, $ff
1a07e     08 FC F5 F8 
1a082     F1 DC CF D0 
1a086     DA DF D8 D7 
1a08a     D4 C6 BE C7 | 	byte	$08, $fc, $f5, $f8, $f1, $dc, $cf, $d0, $da, $df, $d8, $d7, $d4, $c6, $be, $c7
1a08e     CE D1 D3 CB 
1a092     C7 C4 B2 AD 
1a096     C6 D2 C1 B6 
1a09a     CB DA D9 D5 | 	byte	$ce, $d1, $d3, $cb, $c7, $c4, $b2, $ad, $c6, $d2, $c1, $b6, $cb, $da, $d9, $d5
1a09e     CF CF D6 D0 
1a0a2     C8 CF D8 E6 
1a0a6     F2 F7 F4 EC 
1a0aa     F0 F0 EF EA | 	byte	$cf, $cf, $d6, $d0, $c8, $cf, $d8, $e6, $f2, $f7, $f4, $ec, $f0, $f0, $ef, $ea
1a0ae     DD DF ED E6 
1a0b2     E5 F0 FD 08 
1a0b6     01 03 0B 12 
1a0ba     10 FD F4 F7 | 	byte	$dd, $df, $ed, $e6, $e5, $f0, $fd, $08, $01, $03, $0b, $12, $10, $fd, $f4, $f7
1a0be     F5 F7 00 F8 
1a0c2     E9 E1 F4 03 
1a0c6     F9 00 0F 1B 
1a0ca     2A 22 23 2F | 	byte	$f5, $f7, $00, $f8, $e9, $e1, $f4, $03, $f9, $00, $0f, $1b, $2a, $22, $23, $2f
1a0ce     40 54 4F 37 
1a0d2     33 33 36 3B 
1a0d6     36 33 3D 4F 
1a0da     53 4A 50 5D | 	byte	$40, $54, $4f, $37, $33, $33, $36, $3b, $36, $33, $3d, $4f, $53, $4a, $50, $5d
1a0de     61 57 48 4A 
1a0e2     5A 5B 5C 5E 
1a0e6     5D 5E 5E 51 
1a0ea     3F 3D 46 4C | 	byte	$61, $57, $48, $4a, $5a, $5b, $5c, $5e, $5d, $5e, $5e, $51, $3f, $3d, $46, $4c
1a0ee     46 3D 3B 3E 
1a0f2     40 43 42 3D 
1a0f6     3E 3C 36 20 
1a0fa     11 0A 04 F7 | 	byte	$46, $3d, $3b, $3e, $40, $43, $42, $3d, $3e, $3c, $36, $20, $11, $0a, $04, $f7
1a0fe     F7 FE F8 EB 
1a102     E5 E7 DE DF 
1a106     EC F5 EE DA 
1a10a     D0 D2 D0 CB | 	byte	$f7, $fe, $f8, $eb, $e5, $e7, $de, $df, $ec, $f5, $ee, $da, $d0, $d2, $d0, $cb
1a10e     D1 CA BB B2 
1a112     AB A5 A6 B1 
1a116     C1 C8 C1 B3 
1a11a     AF BA C2 CC | 	byte	$d1, $ca, $bb, $b2, $ab, $a5, $a6, $b1, $c1, $c8, $c1, $b3, $af, $ba, $c2, $cc
1a11e     D2 C8 C1 BE 
1a122     BA C1 CF D6 
1a126     CD BE B5 B1 
1a12a     C2 D5 D1 C7 | 	byte	$d2, $c8, $c1, $be, $ba, $c1, $cf, $d6, $cd, $be, $b5, $b1, $c2, $d5, $d1, $c7
1a12e     D0 D7 CF CE 
1a132     E1 02 0A FC 
1a136     F3 F3 EB E6 
1a13a     F8 FD F2 F5 | 	byte	$d0, $d7, $cf, $ce, $e1, $02, $0a, $fc, $f3, $f3, $eb, $e6, $f8, $fd, $f2, $f5
1a13e     FF FB F4 FB 
1a142     0F 1A 13 13 
1a146     1E 23 1E 12 
1a14a     08 05 10 20 | 	byte	$ff, $fb, $f4, $fb, $0f, $1a, $13, $13, $1e, $23, $1e, $12, $08, $05, $10, $20
1a14e     2A 2E 2D 27 
1a152     25 2E 33 2F 
1a156     2C 2D 33 35 
1a15a     2C 2B 33 39 | 	byte	$2a, $2e, $2d, $27, $25, $2e, $33, $2f, $2c, $2d, $33, $35, $2c, $2b, $33, $39
1a15e     41 46 3C 27 
1a162     1F 25 25 1A 
1a166     15 1A 16 10 
1a16a     17 24 32 39 | 	byte	$41, $46, $3c, $27, $1f, $25, $25, $1a, $15, $1a, $16, $10, $17, $24, $32, $39
1a16e     30 1F 1D 20 
1a172     19 06 F8 FC 
1a176     0A 17 1B 0E 
1a17a     03 02 FF F8 | 	byte	$30, $1f, $1d, $20, $19, $06, $f8, $fc, $0a, $17, $1b, $0e, $03, $02, $ff, $f8
1a17e     F2 FB F9 ED 
1a182     E3 DB E0 E8 
1a186     E5 D8 D1 D8 
1a18a     DE CD BE C5 | 	byte	$f2, $fb, $f9, $ed, $e3, $db, $e0, $e8, $e5, $d8, $d1, $d8, $de, $cd, $be, $c5
1a18e     CE C6 B3 A7 
1a192     A4 B0 C1 D0 
1a196     D3 CA C1 C3 
1a19a     C4 C6 D4 DB | 	byte	$ce, $c6, $b3, $a7, $a4, $b0, $c1, $d0, $d3, $ca, $c1, $c3, $c4, $c6, $d4, $db
1a19e     D0 C6 C9 D4 
1a1a2     DE E1 DE DE 
1a1a6     E0 E0 E4 EA 
1a1aa     EC EF F2 F1 | 	byte	$d0, $c6, $c9, $d4, $de, $e1, $de, $de, $e0, $e0, $e4, $ea, $ec, $ef, $f2, $f1
1a1ae     E8 E2 EE FD 
1a1b2     0A 0B 04 05 
1a1b6     05 FB F1 F1 
1a1ba     F4 F1 EB EE | 	byte	$e8, $e2, $ee, $fd, $0a, $0b, $04, $05, $05, $fb, $f1, $f1, $f4, $f1, $eb, $ee
1a1be     F3 F3 EC EB 
1a1c2     F5 F7 F2 F8 
1a1c6     01 04 07 10 
1a1ca     18 1B 19 25 | 	byte	$f3, $f3, $ec, $eb, $f5, $f7, $f2, $f8, $01, $04, $07, $10, $18, $1b, $19, $25
1a1ce     31 31 2F 34 
1a1d2     38 2D 29 35 
1a1d6     45 4E 4D 4E 
1a1da     4D 56 5C 5D | 	byte	$31, $31, $2f, $34, $38, $2d, $29, $35, $45, $4e, $4d, $4e, $4d, $56, $5c, $5d
1a1de     60 5B 50 43 
1a1e2     45 5C 71 78 
1a1e6     76 72 6A 5F 
1a1ea     5D 5F 5E 54 | 	byte	$60, $5b, $50, $43, $45, $5c, $71, $78, $76, $72, $6a, $5f, $5d, $5f, $5e, $54
1a1ee     4E 4F 47 40 
1a1f2     46 49 46 43 
1a1f6     40 3A 32 33 
1a1fa     2D 1E 13 0C | 	byte	$4e, $4f, $47, $40, $46, $49, $46, $43, $40, $3a, $32, $33, $2d, $1e, $13, $0c
1a1fe     02 F8 F9 04 
1a202     09 01 F7 EE 
1a206     E7 E2 E5 E5 
1a20a     D3 C4 BD BC | 	byte	$02, $f8, $f9, $04, $09, $01, $f7, $ee, $e7, $e2, $e5, $e5, $d3, $c4, $bd, $bc
1a20e     BE C2 C9 C8 
1a212     B7 AA AD B6 
1a216     B7 B7 BC B6 
1a21a     A8 A5 AE BE | 	byte	$be, $c2, $c9, $c8, $b7, $aa, $ad, $b6, $b7, $b7, $bc, $b6, $a8, $a5, $ae, $be
1a21e     CE D1 C6 BA 
1a222     BC C3 BE BA 
1a226     BA B5 B2 B2 
1a22a     B1 B9 CF DC | 	byte	$ce, $d1, $c6, $ba, $bc, $c3, $be, $ba, $ba, $b5, $b2, $b2, $b1, $b9, $cf, $dc
1a22e     DC D1 D4 E6 
1a232     ED EB ED F6 
1a236     F8 EC D9 D2 
1a23a     E2 FD 09 01 | 	byte	$dc, $d1, $d4, $e6, $ed, $eb, $ed, $f6, $f8, $ec, $d9, $d2, $e2, $fd, $09, $01
1a23e     F2 E7 F1 09 
1a242     14 11 10 0F 
1a246     14 1B 18 1F 
1a24a     23 1E 16 15 | 	byte	$f2, $e7, $f1, $09, $14, $11, $10, $0f, $14, $1b, $18, $1f, $23, $1e, $16, $15
1a24e     1A 1B 21 2D 
1a252     33 2E 2B 2C 
1a256     3A 3B 2F 30 
1a25a     40 45 31 21 | 	byte	$1a, $1b, $21, $2d, $33, $2e, $2b, $2c, $3a, $3b, $2f, $30, $40, $45, $31, $21
1a25e     2B 3C 3A 2D 
1a262     21 1A 1E 24 
1a266     2B 29 1C 18 
1a26a     21 27 27 23 | 	byte	$2b, $3c, $3a, $2d, $21, $1a, $1e, $24, $2b, $29, $1c, $18, $21, $27, $27, $23
1a26e     2A 30 24 1A 
1a272     17 15 0E 04 
1a276     03 09 14 15 
1a27a     03 F7 FC FF | 	byte	$2a, $30, $24, $1a, $17, $15, $0e, $04, $03, $09, $14, $15, $03, $f7, $fc, $ff
1a27e     FE FB F2 E8 
1a282     DE E7 F8 F4 
1a286     DF D5 D6 D4 
1a28a     C9 C5 C3 B9 | 	byte	$fe, $fb, $f2, $e8, $de, $e7, $f8, $f4, $df, $d5, $d6, $d4, $c9, $c5, $c3, $b9
1a28e     B5 B1 B7 BC 
1a292     B7 B5 BA BF 
1a296     C0 BC BB C4 
1a29a     C7 C7 C7 C9 | 	byte	$b5, $b1, $b7, $bc, $b7, $b5, $ba, $bf, $c0, $bc, $bb, $c4, $c7, $c7, $c7, $c9
1a29e     C6 BE C4 D8 
1a2a2     E1 E0 D7 D3 
1a2a6     D6 E1 E9 EB 
1a2aa     E8 E2 E1 F2 | 	byte	$c6, $be, $c4, $d8, $e1, $e0, $d7, $d3, $d6, $e1, $e9, $eb, $e8, $e2, $e1, $f2
1a2ae     FE FE 02 06 
1a2b2     FF FB FD 01 
1a2b6     02 F9 E9 DF 
1a2ba     E8 F2 F0 ED | 	byte	$fe, $fe, $02, $06, $ff, $fb, $fd, $01, $02, $f9, $e9, $df, $e8, $f2, $f0, $ed
1a2be     ED F4 F7 F5 
1a2c2     FC 01 F6 F2 
1a2c6     FB FE FF 07 
1a2ca     16 1B 16 1A | 	byte	$ed, $f4, $f7, $f5, $fc, $01, $f6, $f2, $fb, $fe, $ff, $07, $16, $1b, $16, $1a
1a2ce     20 22 21 24 
1a2d2     34 42 44 42 
1a2d6     3E 44 4F 55 
1a2da     57 58 56 52 | 	byte	$20, $22, $21, $24, $34, $42, $44, $42, $3e, $44, $4f, $55, $57, $58, $56, $52
1a2de     51 5A 61 60 
1a2e2     65 6C 69 6A 
1a2e6     73 76 71 6A 
1a2ea     63 5F 5B 56 | 	byte	$51, $5a, $61, $60, $65, $6c, $69, $6a, $73, $76, $71, $6a, $63, $5f, $5b, $56
1a2ee     55 57 54 50 
1a2f2     4D 4B 48 44 
1a2f6     41 37 39 35 
1a2fa     26 19 14 13 | 	byte	$55, $57, $54, $50, $4d, $4b, $48, $44, $41, $37, $39, $35, $26, $19, $14, $13
1a2fe     0F 0A 06 07 
1a302     0A 04 FC F3 
1a306     E8 E4 DF CF 
1a30a     C2 C5 D3 DA | 	byte	$0f, $0a, $06, $07, $0a, $04, $fc, $f3, $e8, $e4, $df, $cf, $c2, $c5, $d3, $da
1a30e     CE BF BE C8 
1a312     C7 BB B5 B3 
1a316     AD A7 A9 B6 
1a31a     C4 C4 BC B8 | 	byte	$ce, $bf, $be, $c8, $c7, $bb, $b5, $b3, $ad, $a7, $a9, $b6, $c4, $c4, $bc, $b8
1a31e     BC C2 C6 C9 
1a322     C6 BE B4 AD 
1a326     AE AD A6 A9 
1a32a     BF D2 D7 D8 | 	byte	$bc, $c2, $c6, $c9, $c6, $be, $b4, $ad, $ae, $ad, $a6, $a9, $bf, $d2, $d7, $d8
1a32e     D6 D2 D7 E1 
1a332     E7 DD D2 D7 
1a336     E9 F1 ED EA 
1a33a     F0 ED E7 EA | 	byte	$d6, $d2, $d7, $e1, $e7, $dd, $d2, $d7, $e9, $f1, $ed, $ea, $f0, $ed, $e7, $ea
1a33e     F3 FC 04 07 
1a342     09 0B 10 17 
1a346     15 10 12 1C 
1a34a     26 25 1B 13 | 	byte	$f3, $fc, $04, $07, $09, $0b, $10, $17, $15, $10, $12, $1c, $26, $25, $1b, $13
1a34e     12 14 17 20 
1a352     2B 2E 2A 2B 
1a356     34 41 43 37 
1a35a     29 23 23 2F | 	byte	$12, $14, $17, $20, $2b, $2e, $2a, $2b, $34, $41, $43, $37, $29, $23, $23, $2f
1a35e     3D 3C 31 2B 
1a362     29 26 22 22 
1a366     24 20 1A 20 
1a36a     2A 29 24 24 | 	byte	$3d, $3c, $31, $2b, $29, $26, $22, $22, $24, $20, $1a, $20, $2a, $29, $24, $24
1a36e     26 29 2A 2A 
1a372     22 18 19 15 
1a376     07 FC FC 01 
1a37a     FD FD 04 07 | 	byte	$26, $29, $2a, $2a, $22, $18, $19, $15, $07, $fc, $fc, $01, $fd, $fd, $04, $07
1a37e     FC EF F0 F8 
1a382     FA EE E3 DD 
1a386     E0 E6 E1 DB 
1a38a     D8 C8 B5 AD | 	byte	$fc, $ef, $f0, $f8, $fa, $ee, $e3, $dd, $e0, $e6, $e1, $db, $d8, $c8, $b5, $ad
1a38e     B1 BB C0 BA 
1a392     AD A6 AE BF 
1a396     C7 C4 BE C4 
1a39a     D0 D8 D5 CB | 	byte	$b1, $bb, $c0, $ba, $ad, $a6, $ae, $bf, $c7, $c4, $be, $c4, $d0, $d8, $d5, $cb
1a39e     C8 CD CB C9 
1a3a2     CE D7 D8 D7 
1a3a6     E1 EA E6 DF 
1a3aa     E4 F2 FB 01 | 	byte	$c8, $cd, $cb, $c9, $ce, $d7, $d8, $d7, $e1, $ea, $e6, $df, $e4, $f2, $fb, $01
1a3ae     07 0C 0B 06 
1a3b2     06 04 F7 F1 
1a3b6     F2 F0 E9 EB 
1a3ba     F8 FD EE DF | 	byte	$07, $0c, $0b, $06, $06, $04, $f7, $f1, $f2, $f0, $e9, $eb, $f8, $fd, $ee, $df
1a3be     E5 F7 FE F9 
1a3c2     F9 FF 02 FC 
1a3c6     F6 F8 00 FE 
1a3ca     FC 04 0C 15 | 	byte	$e5, $f7, $fe, $f9, $f9, $ff, $02, $fc, $f6, $f8, $00, $fe, $fc, $04, $0c, $15
1a3ce     23 2A 23 1C 
1a3d2     28 39 3C 39 
1a3d6     3D 4A 51 50 
1a3da     48 41 42 4D | 	byte	$23, $2a, $23, $1c, $28, $39, $3c, $39, $3d, $4a, $51, $50, $48, $41, $42, $4d
1a3de     58 62 68 63 
1a3e2     57 55 68 6F 
1a3e6     62 61 6C 6D 
1a3ea     66 65 62 56 | 	byte	$58, $62, $68, $63, $57, $55, $68, $6f, $62, $61, $6c, $6d, $66, $65, $62, $56
1a3ee     49 4C 54 51 
1a3f2     4E 4D 4A 44 
1a3f6     3C 3E 3D 32 
1a3fa     1F 0E 11 1C | 	byte	$49, $4c, $54, $51, $4e, $4d, $4a, $44, $3c, $3e, $3d, $32, $1f, $0e, $11, $1c
1a3fe     1A 13 11 12 
1a402     09 FB F2 EB 
1a406     E2 E2 E3 E1 
1a40a     DE D9 D2 CB | 	byte	$1a, $13, $11, $12, $09, $fb, $f2, $eb, $e2, $e2, $e3, $e1, $de, $d9, $d2, $cb
1a40e     C7 CE D4 D0 
1a412     BF B8 BC BF 
1a416     BA B0 AD B3 
1a41a     BC C5 D0 D1 | 	byte	$c7, $ce, $d4, $d0, $bf, $b8, $bc, $bf, $ba, $b0, $ad, $b3, $bc, $c5, $d0, $d1
1a41e     CB C5 BD B3 
1a422     B3 B8 B3 AA 
1a426     AA B4 BF C3 
1a42a     C1 C6 CC D5 | 	byte	$cb, $c5, $bd, $b3, $b3, $b8, $b3, $aa, $aa, $b4, $bf, $c3, $c1, $c6, $cc, $d5
1a42e     DC DD DD E0 
1a432     E1 DD D6 DB 
1a436     E6 ED F2 F3 
1a43a     EF EF F0 EF | 	byte	$dc, $dd, $dd, $e0, $e1, $dd, $d6, $db, $e6, $ed, $f2, $f3, $ef, $ef, $f0, $ef
1a43e     F0 F8 01 04 
1a442     06 0C 0F 14 
1a446     1A 21 22 13 
1a44a     02 01 10 1B | 	byte	$f0, $f8, $01, $04, $06, $0c, $0f, $14, $1a, $21, $22, $13, $02, $01, $10, $1b
1a44e     1D 18 16 1A 
1a452     1F 22 25 27 
1a456     24 26 29 20 
1a45a     1B 21 29 26 | 	byte	$1d, $18, $16, $1a, $1f, $22, $25, $27, $24, $26, $29, $20, $1b, $21, $29, $26
1a45e     1D 1F 2C 36 
1a462     2E 20 1E 1E 
1a466     17 11 13 1C 
1a46a     21 25 2A 2D | 	byte	$1d, $1f, $2c, $36, $2e, $20, $1e, $1e, $17, $11, $13, $1c, $21, $25, $2a, $2d
1a46e     2A 2A 2E 29 
1a472     18 10 0F 0E 
1a476     0F 12 0E 0B 
1a47a     04 FC FB 02 | 	byte	$2a, $2a, $2e, $29, $18, $10, $0f, $0e, $0f, $12, $0e, $0b, $04, $fc, $fb, $02
1a47e     06 02 FF FA 
1a482     EF E7 EF F7 
1a486     F5 E8 DC D4 
1a48a     CF CE CF C7 | 	byte	$06, $02, $ff, $fa, $ef, $e7, $ef, $f7, $f5, $e8, $dc, $d4, $cf, $ce, $cf, $c7
1a48e     BC B5 B0 AB 
1a492     AD BA C2 C6 
1a496     C9 C6 C1 C5 
1a49a     D4 DB DB DF | 	byte	$bc, $b5, $b0, $ab, $ad, $ba, $c2, $c6, $c9, $c6, $c1, $c5, $d4, $db, $db, $df
1a49e     E2 E1 DE DD 
1a4a2     DA D5 D7 E1 
1a4a6     E7 E8 E9 F3 
1a4aa     FD 07 08 02 | 	byte	$e2, $e1, $de, $dd, $da, $d5, $d7, $e1, $e7, $e8, $e9, $f3, $fd, $07, $08, $02
1a4ae     07 12 16 0F 
1a4b2     0C 0D 09 00 
1a4b6     FD FA F4 F1 
1a4ba     ED E9 E9 F2 | 	byte	$07, $12, $16, $0f, $0c, $0d, $09, $00, $fd, $fa, $f4, $f1, $ed, $e9, $e9, $f2
1a4be     FA FA F7 F4 
1a4c2     F0 F3 FA F9 
1a4c6     F4 F3 F7 FA 
1a4ca     FA FE 05 09 | 	byte	$fa, $fa, $f7, $f4, $f0, $f3, $fa, $f9, $f4, $f3, $f7, $fa, $fa, $fe, $05, $09
1a4ce     09 12 1C 1E 
1a4d2     17 18 24 32 
1a4d6     3A 3D 3E 41 
1a4da     45 46 43 44 | 	byte	$09, $12, $1c, $1e, $17, $18, $24, $32, $3a, $3d, $3e, $41, $45, $46, $43, $44
1a4de     4B 52 50 4C 
1a4e2     53 5A 5C 59 
1a4e6     54 52 57 61 
1a4ea     60 55 56 5D | 	byte	$4b, $52, $50, $4c, $53, $5a, $5c, $59, $54, $52, $57, $61, $60, $55, $56, $5d
1a4ee     5E 57 4F 4C 
1a4f2     4C 4B 43 3B 
1a4f6     38 36 32 29 
1a4fa     22 21 21 19 | 	byte	$5e, $57, $4f, $4c, $4c, $4b, $43, $3b, $38, $36, $32, $29, $22, $21, $21, $19
1a4fe     17 19 13 0A 
1a502     06 02 FC F4 
1a506     EA E5 E6 E3 
1a50a     DF DE E2 E4 | 	byte	$17, $19, $13, $0a, $06, $02, $fc, $f4, $ea, $e5, $e6, $e3, $df, $de, $e2, $e4
1a50e     DF D0 C5 C5 
1a512     C7 C8 C7 C5 
1a516     C5 CB CD C3 
1a51a     BB C3 CD D2 | 	byte	$df, $d0, $c5, $c5, $c7, $c8, $c7, $c5, $c5, $cb, $cd, $c3, $bb, $c3, $cd, $d2
1a51e     CB C5 C9 CC 
1a522     C4 B7 B0 B1 
1a526     BA C2 C7 CC 
1a52a     D3 D9 D9 D4 | 	byte	$cb, $c5, $c9, $cc, $c4, $b7, $b0, $b1, $ba, $c2, $c7, $cc, $d3, $d9, $d9, $d4
1a52e     D3 D9 E0 E2 
1a532     DD DC E2 EB 
1a536     F2 F4 F2 F2 
1a53a     F4 EE E9 EC | 	byte	$d3, $d9, $e0, $e2, $dd, $dc, $e2, $eb, $f2, $f4, $f2, $f2, $f4, $ee, $e9, $ec
1a53e     F0 F3 FC 04 
1a542     06 06 09 13 
1a546     19 13 09 04 
1a54a     06 0C 0E 08 | 	byte	$f0, $f3, $fc, $04, $06, $06, $09, $13, $19, $13, $09, $04, $06, $0c, $0e, $08
1a54e     03 06 10 15 
1a552     18 19 18 16 
1a556     12 0B 07 0B 
1a55a     15 1A 15 10 | 	byte	$03, $06, $10, $15, $18, $19, $18, $16, $12, $0b, $07, $0b, $15, $1a, $15, $10
1a55e     16 21 26 1F 
1a562     18 17 19 10 
1a566     09 08 0D 15 
1a56a     18 18 19 1B | 	byte	$16, $21, $26, $1f, $18, $17, $19, $10, $09, $08, $0d, $15, $18, $18, $19, $1b
1a56e     1E 23 20 19 
1a572     15 15 15 14 
1a576     12 12 16 14 
1a57a     0A 05 07 0B | 	byte	$1e, $23, $20, $19, $15, $15, $15, $14, $12, $12, $16, $14, $0a, $05, $07, $0b
1a57e     0E 0C 09 03 
1a582     FC FA 01 05 
1a586     FE F3 EC E6 
1a58a     E1 E1 E2 DB | 	byte	$0e, $0c, $09, $03, $fc, $fa, $01, $05, $fe, $f3, $ec, $e6, $e1, $e1, $e2, $db
1a58e     D2 C9 C3 BD 
1a592     BE C5 C9 C8 
1a596     C4 C4 C8 D1 
1a59a     DD E4 E6 E7 | 	byte	$d2, $c9, $c3, $bd, $be, $c5, $c9, $c8, $c4, $c4, $c8, $d1, $dd, $e4, $e6, $e7
1a59e     E9 EA E8 E9 
1a5a2     EA E8 E6 E4 
1a5a6     E5 EA F4 FD 
1a5aa     03 07 04 00 | 	byte	$e9, $ea, $e8, $e9, $ea, $e8, $e6, $e4, $e5, $ea, $f4, $fd, $03, $07, $04, $00
1a5ae     FD 06 13 1D 
1a5b2     1E 13 07 02 
1a5b6     03 05 00 FA 
1a5ba     F6 F3 EE EE | 	byte	$fd, $06, $13, $1d, $1e, $13, $07, $02, $03, $05, $00, $fa, $f6, $f3, $ee, $ee
1a5be     F3 F8 F9 F4 
1a5c2     F1 ED EC F1 
1a5c6     F6 F7 F6 F4 
1a5ca     F3 EB E6 EE | 	byte	$f3, $f8, $f9, $f4, $f1, $ed, $ec, $f1, $f6, $f7, $f6, $f4, $f3, $eb, $e6, $ee
1a5ce     FB 01 04 09 
1a5d2     13 19 1B 1B 
1a5d6     1E 20 23 2A 
1a5da     36 41 44 44 | 	byte	$fb, $01, $04, $09, $13, $19, $1b, $1b, $1e, $20, $23, $2a, $36, $41, $44, $44
1a5de     43 3F 3E 3F 
1a5e2     43 47 49 4A 
1a5e6     50 52 4E 4D 
1a5ea     54 57 4F 48 | 	byte	$43, $3f, $3e, $3f, $43, $47, $49, $4a, $50, $52, $4e, $4d, $54, $57, $4f, $48
1a5ee     4C 52 4E 46 
1a5f2     43 43 41 3C 
1a5f6     37 34 33 34 
1a5fa     35 2D 24 20 | 	byte	$4c, $52, $4e, $46, $43, $43, $41, $3c, $37, $34, $33, $34, $35, $2d, $24, $20
1a5fe     1D 19 13 0D 
1a602     07 05 06 01 
1a606     F7 F4 F7 F4 
1a60a     EE EC E9 E5 | 	byte	$1d, $19, $13, $0d, $07, $05, $06, $01, $f7, $f4, $f7, $f4, $ee, $ec, $e9, $e5
1a60e     E1 E1 E3 E3 
1a612     DF DC D4 CE 
1a616     CD CD CB CA 
1a61a     CA C9 CA CC | 	byte	$e1, $e1, $e3, $e3, $df, $dc, $d4, $ce, $cd, $cd, $cb, $ca, $ca, $c9, $ca, $cc
1a61e     CD D2 D8 DA 
1a622     D4 CB C8 C5 
1a626     C4 CA D1 D0 
1a62a     C9 C7 CD D3 | 	byte	$cd, $d2, $d8, $da, $d4, $cb, $c8, $c5, $c4, $ca, $d1, $d0, $c9, $c7, $cd, $d3
1a62e     D8 D8 D5 D3 
1a632     D6 E2 EF F4 
1a636     F3 F3 F4 F2 
1a63a     ED ED F4 F7 | 	byte	$d8, $d8, $d5, $d3, $d6, $e2, $ef, $f4, $f3, $f3, $f4, $f2, $ed, $ed, $f4, $f7
1a63e     F0 EA ED F5 
1a642     FE 04 07 08 
1a646     06 03 03 05 
1a64a     05 07 0B 0A | 	byte	$f0, $ea, $ed, $f5, $fe, $04, $07, $08, $06, $03, $03, $05, $05, $07, $0b, $0a
1a64e     02 FB 01 0E 
1a652     14 13 0F 0A 
1a656     01 FF 08 0F 
1a65a     0D 08 09 0F | 	byte	$02, $fb, $01, $0e, $14, $13, $0f, $0a, $01, $ff, $08, $0f, $0d, $08, $09, $0f
1a65e     13 15 18 1B 
1a662     16 0A 02 02 
1a666     09 11 13 0E 
1a66a     08 06 09 12 | 	byte	$13, $15, $18, $1b, $16, $0a, $02, $02, $09, $11, $13, $0e, $08, $06, $09, $12
1a66e     19 18 17 1C 
1a672     1E 18 12 17 
1a676     1B 16 0C 06 
1a67a     03 04 0C 12 | 	byte	$19, $18, $17, $1c, $1e, $18, $12, $17, $1b, $16, $0c, $06, $03, $04, $0c, $12
1a67e     0F 07 04 06 
1a682     08 0C 10 10 
1a686     0B 04 FD F5 
1a68a     F2 F5 F5 ED | 	byte	$0f, $07, $04, $06, $08, $0c, $10, $10, $0b, $04, $fd, $f5, $f2, $f5, $f5, $ed
1a68e     E2 D7 D1 CF 
1a692     CE CB C9 CA 
1a696     CC D0 D5 DF 
1a69a     E9 EE EF EA | 	byte	$e2, $d7, $d1, $cf, $ce, $cb, $c9, $ca, $cc, $d0, $d5, $df, $e9, $ee, $ef, $ea
1a69e     E0 DC E4 E9 
1a6a2     E9 E8 E6 E5 
1a6a6     E7 EC F1 F2 
1a6aa     F5 F9 FE 02 | 	byte	$e0, $dc, $e4, $e9, $e9, $e8, $e6, $e5, $e7, $ec, $f1, $f2, $f5, $f9, $fe, $02
1a6ae     07 11 19 1D 
1a6b2     19 0E 05 05 
1a6b6     09 07 FC F2 
1a6ba     ED EE F1 F0 | 	byte	$07, $11, $19, $1d, $19, $0e, $05, $05, $09, $07, $fc, $f2, $ed, $ee, $f1, $f0
1a6be     F0 F3 FC 01 
1a6c2     FC F7 F5 F7 
1a6c6     F7 F1 EA E9 
1a6ca     ED F1 EF EC | 	byte	$f0, $f3, $fc, $01, $fc, $f7, $f5, $f7, $f7, $f1, $ea, $e9, $ed, $f1, $ef, $ec
1a6ce     EE F3 F3 F0 
1a6d2     F2 FD 08 14 
1a6d6     1C 1D 1F 25 
1a6da     29 2B 2D 30 | 	byte	$ee, $f3, $f3, $f0, $f2, $fd, $08, $14, $1c, $1d, $1f, $25, $29, $2b, $2d, $30
1a6de     31 2B 2B 34 
1a6e2     3D 42 43 47 
1a6e6     4C 4E 4E 4E 
1a6ea     52 55 4F 47 | 	byte	$31, $2b, $2b, $34, $3d, $42, $43, $47, $4c, $4e, $4e, $4e, $52, $55, $4f, $47
1a6ee     43 42 43 42 
1a6f2     3E 3C 3C 40 
1a6f6     40 3B 34 37 
1a6fa     3B 39 2F 29 | 	byte	$43, $42, $43, $42, $3e, $3c, $3c, $40, $40, $3b, $34, $37, $3b, $39, $2f, $29
1a6fe     27 26 23 1D 
1a702     18 14 0C 05 
1a706     02 03 FE F3 
1a70a     ED EC EE EF | 	byte	$27, $26, $23, $1d, $18, $14, $0c, $05, $02, $03, $fe, $f3, $ed, $ec, $ee, $ef
1a70e     F0 F1 F1 F0 
1a712     EC E8 E3 E0 
1a716     DD D4 CB C7 
1a71a     CB D1 D3 D3 | 	byte	$f0, $f1, $f1, $f0, $ec, $e8, $e3, $e0, $dd, $d4, $cb, $c7, $cb, $d1, $d3, $d3
1a71e     D1 D2 D5 D6 
1a722     D2 D0 D6 D9 
1a726     D5 CF CC CA 
1a72a     CA CE D2 D4 | 	byte	$d1, $d2, $d5, $d6, $d2, $d0, $d6, $d9, $d5, $cf, $cc, $ca, $ca, $ce, $d2, $d4
1a72e     D0 D1 D3 D7 
1a732     DD E5 E8 E8 
1a736     EC F0 F3 F5 
1a73a     F6 F4 F3 F1 | 	byte	$d0, $d1, $d3, $d7, $dd, $e5, $e8, $e8, $ec, $f0, $f3, $f5, $f6, $f4, $f3, $f1
1a73e     F0 F2 F7 FC 
1a742     FE 00 03 06 
1a746     05 01 FF 02 
1a74a     06 06 03 01 | 	byte	$f0, $f2, $f7, $fc, $fe, $00, $03, $06, $05, $01, $ff, $02, $06, $06, $03, $01
1a74e     09 0E 0C 06 
1a752     02 06 0C 0D 
1a756     09 04 03 06 
1a75a     08 09 0A 0C | 	byte	$09, $0e, $0c, $06, $02, $06, $0c, $0d, $09, $04, $03, $06, $08, $09, $0a, $0c
1a75e     0E 0C 09 08 
1a762     07 06 03 00 
1a766     FF FF 04 08 
1a76a     0B 0C 0A 09 | 	byte	$0e, $0c, $09, $08, $07, $06, $03, $00, $ff, $ff, $04, $08, $0b, $0c, $0a, $09
1a76e     0D 12 15 18 
1a772     1A 1A 18 14 
1a776     10 0D 09 07 
1a77a     05 04 04 0B | 	byte	$0d, $12, $15, $18, $1a, $1a, $18, $14, $10, $0d, $09, $07, $05, $04, $04, $0b
1a77e     13 12 0D 08 
1a782     05 05 07 09 
1a786     0B 0E 10 0A 
1a78a     00 F9 F6 EC | 	byte	$13, $12, $0d, $08, $05, $05, $07, $09, $0b, $0e, $10, $0a, $00, $f9, $f6, $ec
1a78e     DE D5 D2 D2 
1a792     D3 D3 D4 D7 
1a796     DA DE E1 E4 
1a79a     EA ED ED E6 | 	byte	$de, $d5, $d2, $d2, $d3, $d3, $d4, $d7, $da, $de, $e1, $e4, $ea, $ed, $ed, $e6
1a79e     DE DC E1 E5 
1a7a2     E7 E9 E8 E7 
1a7a6     E8 ED F2 F5 
1a7aa     F4 F7 FC 03 | 	byte	$de, $dc, $e1, $e5, $e7, $e9, $e8, $e7, $e8, $ed, $f2, $f5, $f4, $f7, $fc, $03
1a7ae     0F 19 1E 1F 
1a7b2     1C 12 06 FC 
1a7b6     F9 FA FA F7 
1a7ba     F4 F5 F9 FB | 	byte	$0f, $19, $1e, $1f, $1c, $12, $06, $fc, $f9, $fa, $fa, $f7, $f4, $f5, $f9, $fb
1a7be     FE 02 03 FF 
1a7c2     F8 F4 F6 FA 
1a7c6     FB F7 F2 EE 
1a7ca     ED ED E9 E4 | 	byte	$fe, $02, $03, $ff, $f8, $f4, $f6, $fa, $fb, $f7, $f2, $ee, $ed, $ed, $e9, $e4
1a7ce     E5 E9 ED EF 
1a7d2     F2 FA 06 0F 
1a7d6     13 17 1B 1D 
1a7da     1C 1B 19 16 | 	byte	$e5, $e9, $ed, $ef, $f2, $fa, $06, $0f, $13, $17, $1b, $1d, $1c, $1b, $19, $16
1a7de     18 20 28 2E 
1a7e2     38 42 47 43 
1a7e6     3E 40 45 47 
1a7ea     44 3E 3C 3B | 	byte	$18, $20, $28, $2e, $38, $42, $47, $43, $3e, $40, $45, $47, $44, $3e, $3c, $3b
1a7ee     3D 3F 3E 38 
1a7f2     33 32 35 37 
1a7f6     39 3B 3B 3A 
1a7fa     37 34 32 2F | 	byte	$3d, $3f, $3e, $38, $33, $32, $35, $37, $39, $3b, $3b, $3a, $37, $34, $32, $2f
1a7fe     2B 26 20 19 
1a802     14 12 10 0A 
1a806     FF FC FD FE 
1a80a     FB F9 FA FF | 	byte	$2b, $26, $20, $19, $14, $12, $10, $0a, $ff, $fc, $fd, $fe, $fb, $f9, $fa, $ff
1a80e     00 FD F8 F5 
1a812     F5 F4 E8 DB 
1a816     D5 D7 D9 D7 
1a81a     D5 D7 D8 DB | 	byte	$00, $fd, $f8, $f5, $f5, $f4, $e8, $db, $d5, $d7, $d9, $d7, $d5, $d7, $d8, $db
1a81e     DA D9 DC E1 
1a822     E1 D8 D2 D4 
1a826     D9 DB D9 D4 
1a82a     D1 D1 D5 DA | 	byte	$da, $d9, $dc, $e1, $e1, $d8, $d2, $d4, $d9, $db, $d9, $d4, $d1, $d1, $d5, $da
1a82e     DD DC DE DE 
1a832     E0 E3 EA F0 
1a836     F3 F5 F7 F8 
1a83a     F9 FB FD FF | 	byte	$dd, $dc, $de, $de, $e0, $e3, $ea, $f0, $f3, $f5, $f7, $f8, $f9, $fb, $fd, $ff
1a83e     FB F5 F4 F9 
1a842     03 0A 0D 0D 
1a846     0B 08 05 03 
1a84a     04 06 06 04 | 	byte	$fb, $f5, $f4, $f9, $03, $0a, $0d, $0d, $0b, $08, $05, $03, $04, $06, $06, $04
1a84e     FF FF 04 06 
1a852     06 03 00 FD 
1a856     FE 02 05 05 
1a85a     03 02 01 FF | 	byte	$ff, $ff, $04, $06, $06, $03, $00, $fd, $fe, $02, $05, $05, $03, $02, $01, $ff
1a85e     FD FC FE 03 
1a862     03 FF FA F6 
1a866     F5 F8 FB FC 
1a86a     FE 05 0D 13 | 	byte	$fd, $fc, $fe, $03, $03, $ff, $fa, $f6, $f5, $f8, $fb, $fc, $fe, $05, $0d, $13
1a86e     13 11 0F 0E 
1a872     0C 0C 0E 0D 
1a876     0B 09 08 07 
1a87a     07 09 09 09 | 	byte	$13, $11, $0f, $0e, $0c, $0c, $0e, $0d, $0b, $09, $08, $07, $07, $09, $09, $09
1a87e     09 09 09 0B 
1a882     0E 10 0E 0E 
1a886     0E 0B 06 01 
1a88a     FC F5 ED E2 | 	byte	$09, $09, $09, $0b, $0e, $10, $0e, $0e, $0e, $0b, $06, $01, $fc, $f5, $ed, $e2
1a88e     DA D5 D9 DE 
1a892     E0 E2 E8 ED 
1a896     EF EB E6 E5 
1a89a     E7 E9 E9 E8 | 	byte	$da, $d5, $d9, $de, $e0, $e2, $e8, $ed, $ef, $eb, $e6, $e5, $e7, $e9, $e9, $e8
1a89e     E8 E8 EA EC 
1a8a2     EA E8 E8 EC 
1a8a6     F1 F3 F7 00 
1a8aa     07 0C 0E 0F | 	byte	$e8, $e8, $ea, $ec, $ea, $e8, $e8, $ec, $f1, $f3, $f7, $00, $07, $0c, $0e, $0f
1a8ae     11 13 14 0F 
1a8b2     0A 07 03 FE 
1a8b6     F9 F7 F8 FB 
1a8ba     FD FF FD FD | 	byte	$11, $13, $14, $0f, $0a, $07, $03, $fe, $f9, $f7, $f8, $fb, $fd, $ff, $fd, $fd
1a8be     FF 01 02 00 
1a8c2     FC F9 F6 F5 
1a8c6     F4 F3 EF EC 
1a8ca     EB EA E9 E9 | 	byte	$ff, $01, $02, $00, $fc, $f9, $f6, $f5, $f4, $f3, $ef, $ec, $eb, $ea, $e9, $e9
1a8ce     EC F2 F5 F7 
1a8d2     FB 01 07 09 
1a8d6     08 08 0A 0D 
1a8da     0F 11 13 16 | 	byte	$ec, $f2, $f5, $f7, $fb, $01, $07, $09, $08, $08, $0a, $0d, $0f, $11, $13, $16
1a8de     1C 21 24 2A 
1a8e2     32 39 3C 39 
1a8e6     37 38 3A 3A 
1a8ea     38 36 35 33 | 	byte	$1c, $21, $24, $2a, $32, $39, $3c, $39, $37, $38, $3a, $3a, $38, $36, $35, $33
1a8ee     30 2D 2F 33 
1a8f2     35 37 35 32 
1a8f6     33 37 37 35 
1a8fa     32 2D 28 23 | 	byte	$30, $2d, $2f, $33, $35, $37, $35, $32, $33, $37, $37, $35, $32, $2d, $28, $23
1a8fe     21 1F 1B 15 
1a902     0F 0C 08 05 
1a906     02 01 00 02 
1a90a     03 04 05 03 | 	byte	$21, $1f, $1b, $15, $0f, $0c, $08, $05, $02, $01, $00, $02, $03, $04, $05, $03
1a90e     01 FC F6 EF 
1a912     EB E8 E7 E6 
1a916     E4 E1 DF DF 
1a91a     E1 E4 E6 E5 | 	byte	$01, $fc, $f6, $ef, $eb, $e8, $e7, $e6, $e4, $e1, $df, $df, $e1, $e4, $e6, $e5
1a91e     E5 E4 E3 E2 
1a922     E0 DE DC DB 
1a926     DC DE E0 E1 
1a92a     E1 E1 DF DE | 	byte	$e5, $e4, $e3, $e2, $e0, $de, $dc, $db, $dc, $de, $e0, $e1, $e1, $e1, $df, $de
1a92e     DE DF E2 E7 
1a932     EF F4 F7 F6 
1a936     F5 F6 F7 F7 
1a93a     F4 F3 F3 F6 | 	byte	$de, $df, $e2, $e7, $ef, $f4, $f7, $f6, $f5, $f6, $f7, $f7, $f4, $f3, $f3, $f6
1a93e     FC 01 02 02 
1a942     02 02 02 03 
1a946     05 06 04 01 
1a94a     FE FD FD FD | 	byte	$fc, $01, $02, $02, $02, $02, $02, $03, $05, $06, $04, $01, $fe, $fd, $fd, $fd
1a94e     00 03 05 05 
1a952     03 01 FD FB 
1a956     FD FF FE FF 
1a95a     03 06 06 02 | 	byte	$00, $03, $05, $05, $03, $01, $fd, $fb, $fd, $ff, $fe, $ff, $03, $06, $06, $02
1a95e     FE F9 F6 F7 
1a962     F7 F8 F8 FC 
1a966     02 05 03 02 
1a96a     06 0A 0B 09 | 	byte	$fe, $f9, $f6, $f7, $f7, $f8, $f8, $fc, $02, $05, $03, $02, $06, $0a, $0b, $09
1a96e     09 0A 0B 0C 
1a972     0C 0B 08 06 
1a976     05 03 03 05 
1a97a     07 07 04 04 | 	byte	$09, $0a, $0b, $0c, $0c, $0b, $08, $06, $05, $03, $03, $05, $07, $07, $04, $04
1a97e     06 0A 0E 12 
1a982     13 12 0E 08 
1a986     01 FA F4 F0 
1a98a     ED EA E8 E7 | 	byte	$06, $0a, $0e, $12, $13, $12, $0e, $08, $01, $fa, $f4, $f0, $ed, $ea, $e8, $e7
1a98e     E8 EA EC EC 
1a992     EB EA EB EF 
1a996     F2 F1 EE EC 
1a99a     EB EC ED ED | 	byte	$e8, $ea, $ec, $ec, $eb, $ea, $eb, $ef, $f2, $f1, $ee, $ec, $eb, $ec, $ed, $ed
1a99e     EC EB E9 E9 
1a9a2     EC F3 FA FD 
1a9a6     FE FF 03 08 
1a9aa     0C 0F 10 10 | 	byte	$ec, $eb, $e9, $e9, $ec, $f3, $fa, $fd, $fe, $ff, $03, $08, $0c, $0f, $10, $10
1a9ae     0F 0B 06 02 
1a9b2     01 01 00 FC 
1a9b6     FA FD 00 01 
1a9ba     03 03 01 01 | 	byte	$0f, $0b, $06, $02, $01, $01, $00, $fc, $fa, $fd, $00, $01, $03, $03, $01, $01
1a9be     01 01 01 00 
1a9c2     FC F7 F1 EE 
1a9c6     EF F1 F2 F2 
1a9ca     F0 F0 F1 F3 | 	byte	$01, $01, $01, $00, $fc, $f7, $f1, $ee, $ef, $f1, $f2, $f2, $f0, $f0, $f1, $f3
1a9ce     F8 FC FE FE 
1a9d2     FE 02 05 06 
1a9d6     08 09 0A 0C 
1a9da     0F 13 16 1A | 	byte	$f8, $fc, $fe, $fe, $fe, $02, $05, $06, $08, $09, $0a, $0c, $0f, $13, $16, $1a
1a9de     20 25 28 2A 
1a9e2     2B 2D 2D 2C 
1a9e6     2A 28 28 28 
1a9ea     27 27 27 26 | 	byte	$20, $25, $28, $2a, $2b, $2d, $2d, $2c, $2a, $28, $28, $28, $27, $27, $27, $26
1a9ee     26 26 2A 2B 
1a9f2     2B 2C 2B 29 
1a9f6     28 2A 2B 27 
1a9fa     23 1D 19 15 | 	byte	$26, $26, $2a, $2b, $2b, $2c, $2b, $29, $28, $2a, $2b, $27, $23, $1d, $19, $15
1a9fe     13 10 0D 0A 
1aa02     09 08 07 07 
1aa06     07 06 06 05 
1aa0a     04 01 FE FC | 	byte	$13, $10, $0d, $0a, $09, $08, $07, $07, $07, $06, $06, $05, $04, $01, $fe, $fc
1aa0e     F9 F7 F3 EE 
1aa12     E9 EA ED EE 
1aa16     ED EE EE ED 
1aa1a     EC EC EB E8 | 	byte	$f9, $f7, $f3, $ee, $e9, $ea, $ed, $ee, $ed, $ee, $ee, $ed, $ec, $ec, $eb, $e8
1aa1e     E6 E6 E6 E8 
1aa22     E9 E8 E7 E5 
1aa26     E4 E5 E6 E4 
1aa2a     E3 E6 EB EE | 	byte	$e6, $e6, $e6, $e8, $e9, $e8, $e7, $e5, $e4, $e5, $e6, $e4, $e3, $e6, $eb, $ee
1aa2e     EE EE F1 F3 
1aa32     F5 F5 F5 F6 
1aa36     F8 F9 F4 F0 
1aa3a     F0 F5 FB FF | 	byte	$ee, $ee, $f1, $f3, $f5, $f5, $f5, $f6, $f8, $f9, $f4, $f0, $f0, $f5, $fb, $ff
1aa3e     01 04 04 02 
1aa42     00 FD FD FE 
1aa46     FF FD FE 00 
1aa4a     03 04 02 FF | 	byte	$01, $04, $04, $02, $00, $fd, $fd, $fe, $ff, $fd, $fe, $00, $03, $04, $02, $ff
1aa4e     FD FD FD FE 
1aa52     FE FF 01 02 
1aa56     03 04 03 00 
1aa5a     FE FD FB FB | 	byte	$fd, $fd, $fd, $fe, $fe, $ff, $01, $02, $03, $04, $03, $00, $fe, $fd, $fb, $fb
1aa5e     FC FC FC FC 
1aa62     FB FC FE 01 
1aa66     04 06 05 04 
1aa6a     03 04 07 0B | 	byte	$fc, $fc, $fc, $fc, $fb, $fc, $fe, $01, $04, $06, $05, $04, $03, $04, $07, $0b
1aa6e     0C 0B 07 04 
1aa72     03 04 03 FF 
1aa76     FC FC 01 05 
1aa7a     09 0C 0E 0F | 	byte	$0c, $0b, $07, $04, $03, $04, $03, $ff, $fc, $fc, $01, $05, $09, $0c, $0e, $0f
1aa7e     0E 0B 09 07 
1aa82     08 06 01 FC 
1aa86     F9 F8 F7 F5 
1aa8a     F2 F1 EF EE | 	byte	$0e, $0b, $09, $07, $08, $06, $01, $fc, $f9, $f8, $f7, $f5, $f2, $f1, $ef, $ee
1aa8e     EE F1 F4 F5 
1aa92     F4 F3 F3 F4 
1aa96     F4 F4 F3 F1 
1aa9a     ED EB EC EF | 	byte	$ee, $f1, $f4, $f5, $f4, $f3, $f3, $f4, $f4, $f4, $f3, $f1, $ed, $eb, $ec, $ef
1aa9e     F3 F4 F6 F8 
1aaa2     FC 01 04 06 
1aaa6     08 08 07 05 
1aaaa     06 0A 0C 09 | 	byte	$f3, $f4, $f6, $f8, $fc, $01, $04, $06, $08, $08, $07, $05, $06, $0a, $0c, $09
1aaae     05 01 FF FF 
1aab2     00 00 01 03 
1aab6     04 04 04 06 
1aaba     08 08 05 01 | 	byte	$05, $01, $ff, $ff, $00, $00, $01, $03, $04, $04, $04, $06, $08, $08, $05, $01
1aabe     FD FB F9 F7 
1aac2     F7 F8 F7 F5 
1aac6     F3 F4 F7 F8 
1aaca     F8 F8 FA FD | 	byte	$fd, $fb, $f9, $f7, $f7, $f8, $f7, $f5, $f3, $f4, $f7, $f8, $f8, $f8, $fa, $fd
1aace     FF 01 01 01 
1aad2     01 03 04 06 
1aad6     08 09 0A 0D 
1aada     11 15 19 1C | 	byte	$ff, $01, $01, $01, $01, $03, $04, $06, $08, $09, $0a, $0d, $11, $15, $19, $1c
1aade     1D 1E 1D 1C 
1aae2     1C 1C 1D 1E 
1aae6     1D 1B 1A 19 
1aaea     1B 1D 1E 1D | 	byte	$1d, $1e, $1d, $1c, $1c, $1c, $1d, $1e, $1d, $1b, $1a, $19, $1b, $1d, $1e, $1d
1aaee     1D 1D 1E 20 
1aaf2     22 23 21 1C 
1aaf6     19 17 15 12 
1aafa     11 0F 0F 0C | 	byte	$1d, $1d, $1e, $20, $22, $23, $21, $1c, $19, $17, $15, $12, $11, $0f, $0f, $0c
1aafe     0A 08 07 08 
1ab02     07 05 05 07 
1ab06     08 07 03 00 
1ab0a     FE FD FA F9 | 	byte	$0a, $08, $07, $08, $07, $05, $05, $07, $08, $07, $03, $00, $fe, $fd, $fa, $f9
1ab0e     F8 F8 F7 F4 
1ab12     F2 F2 F3 F3 
1ab16     F2 F1 F1 F3 
1ab1a     F5 F5 F3 F1 | 	byte	$f8, $f8, $f7, $f4, $f2, $f2, $f3, $f3, $f2, $f1, $f1, $f3, $f5, $f5, $f3, $f1
1ab1e     EE ED EC EC 
1ab22     EC EE EE EE 
1ab26     ED EC EC EF 
1ab2a     F2 F4 F5 F5 | 	byte	$ee, $ed, $ec, $ec, $ec, $ee, $ee, $ee, $ed, $ec, $ec, $ef, $f2, $f4, $f5, $f5
1ab2e     F5 F6 F6 F6 
1ab32     F5 F6 F6 F7 
1ab36     F8 FA FC FD 
1ab3a     FD FD FD FE | 	byte	$f5, $f6, $f6, $f6, $f5, $f6, $f6, $f7, $f8, $fa, $fc, $fd, $fd, $fd, $fd, $fe
1ab3e     FF 00 FF FE 
1ab42     FF 01 02 01 
1ab46     01 00 00 01 
1ab4a     00 FF FF FF | 	byte	$ff, $00, $ff, $fe, $ff, $01, $02, $01, $01, $00, $00, $01, $00, $ff, $ff, $ff
1ab4e     FF FE FE FF 
1ab52     00 00 01 01 
1ab56     00 FF FE FD 
1ab5a     FD FC FB FB | 	byte	$ff, $fe, $fe, $ff, $00, $00, $01, $01, $00, $ff, $fe, $fd, $fd, $fc, $fb, $fb
1ab5e     FC FD FD FD 
1ab62     FD FE 00 01 
1ab66     02 03 04 05 
1ab6a     06 06 06 05 | 	byte	$fc, $fd, $fd, $fd, $fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $06, $05
1ab6e     04 01 FF FD 
1ab72     FF 00 02 03 
1ab76     04 05 05 04 
1ab7a     05 07 09 09 | 	byte	$04, $01, $ff, $fd, $ff, $00, $02, $03, $04, $05, $05, $04, $05, $07, $09, $09
1ab7e     07 06 06 05 
1ab82     04 02 FF FD 
1ab86     FB F9 F8 F7 
1ab8a     F7 F7 F7 F7 | 	byte	$07, $06, $06, $05, $04, $02, $ff, $fd, $fb, $f9, $f8, $f7, $f7, $f7, $f7, $f7
1ab8e     F8 F9 FA F9 
1ab92     F9 F9 F8 F5 
1ab96     F4 F4 F5 F5 
1ab9a     F6 F6 F8 FA | 	byte	$f8, $f9, $fa, $f9, $f9, $f9, $f8, $f5, $f4, $f4, $f5, $f5, $f6, $f6, $f8, $fa
1ab9e     FC FE FF 00 
1aba2     00 00 02 04 
1aba6     06 06 06 06 
1abaa     05 04 03 01 | 	byte	$fc, $fe, $ff, $00, $00, $00, $02, $04, $06, $06, $06, $06, $05, $04, $03, $01
1abae     00 00 01 02 
1abb2     03 04 06 06 
1abb6     06 06 06 05 
1abba     04 04 04 02 | 	byte	$00, $00, $01, $02, $03, $04, $06, $06, $06, $06, $06, $05, $04, $04, $04, $02
1abbe     00 FE FC FB 
1abc2     FC FD FC FB 
1abc6     FA FA FB FD 
1abca     FE FF 00 00 | 	byte	$00, $fe, $fc, $fb, $fc, $fd, $fc, $fb, $fa, $fa, $fb, $fd, $fe, $ff, $00, $00
1abce     00 00 02 03 
1abd2     04 04 04 05 
1abd6     07 09 0A 0D 
1abda     0E 10 10 11 | 	byte	$00, $00, $02, $03, $04, $04, $04, $05, $07, $09, $0a, $0d, $0e, $10, $10, $11
1abde     11 11 11 11 
1abe2     11 11 11 11 | 	byte	$11[8]
1abe6     12 12 12 12 
1abea     12          | 	byte	$12[5]
1abeb     13 14 14 14 
1abef     15 15 15 14 
1abf3     13 12 11 0F 
1abf7     0D 0B 0A 09 | 	byte	$13, $14, $14, $14, $15, $15, $15, $14, $13, $12, $11, $0f, $0d, $0b, $0a, $09
1abfb     08 07 06 05 
1abff     05 05 05 05 
1ac03     04 03 03 02 
1ac07     01 01 00 FF | 	byte	$08, $07, $06, $05, $05, $05, $05, $05, $04, $03, $03, $02, $01, $01, $00, $ff
1ac0b     FD FB F9 F8 
1ac0f     F8 F8 F8 F8 
1ac13     F8 F8 F7 F7 
1ac17     F8 F8 F8 F8 | 	byte	$fd, $fb, $f9, $f8, $f8, $f8, $f8, $f8, $f8, $f8, $f7, $f7, $f8, $f8, $f8, $f8
1ac1b     F8 F7 F5 F5 
1ac1f     F5 F4 F4 F4 
1ac23     F5 F5 F6 F6 
1ac27     F7 F8 F8 F8 | 	byte	$f8, $f7, $f5, $f5, $f5, $f4, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f8, $f8, $f8
1ac2b     F8 F8 F8 F9 
1ac2f     FA FA FB FB 
1ac33     FB FC FC FD 
1ac37     FE FF FF FF | 	byte	$f8, $f8, $f8, $f9, $fa, $fa, $fb, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $ff, $ff
1ac3b     FF FF FF FF 
1ac3f     00 00 01 01 
1ac43     01 01 01 01 
1ac47     01 01 01 00 | 	byte	$ff, $ff, $ff, $ff, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00
1ac4b     00 00 00 00 
1ac4f     00 00 00    | 	byte	$00[7]
1ac52     FF 00 00 00 
1ac56     FF FE FE FD 
1ac5a     FD FD FD FD 
1ac5e     FD FE FE FF | 	byte	$ff, $00, $00, $00, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff
1ac62     00 00 01 01 
1ac66     01 00 00 00 
1ac6a     00 FF 00 00 
1ac6e     FF FF FF FF | 	byte	$00, $00, $01, $01, $01, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $ff, $ff
1ac72     00 00 00 01 
1ac76     01 02 03 03 
1ac7a     02 03 03 03 
1ac7e     03 03 02 02 | 	byte	$00, $00, $00, $01, $01, $02, $03, $03, $02, $03, $03, $03, $03, $03, $02, $02
1ac82     01 FF FE FD 
1ac86     FD FD FD FD 
1ac8a     FD FD FE FE 
1ac8e     FD FC FC FB | 	byte	$01, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fd, $fc, $fc, $fb
1ac92     FB FA FA FA 
1ac96     FB FB FB FC 
1ac9a     FC FD FE FE 
1ac9e     FF 00 01 01 | 	byte	$fb, $fa, $fa, $fa, $fb, $fb, $fb, $fc, $fc, $fd, $fe, $fe, $ff, $00, $01, $01
1aca2     02 03 03 03 
1aca6     03 02 02 02 
1acaa     01 02 02 02 
1acae     02 02 03 04 | 	byte	$02, $03, $03, $03, $03, $02, $02, $02, $01, $02, $02, $02, $02, $02, $03, $04
1acb2     04 05 05 05 
1acb6     05 04 04 04 
1acba     04 04 03 03 
1acbe     02 02 01 01 | 	byte	$04, $05, $05, $05, $05, $04, $04, $04, $04, $04, $03, $03, $02, $02, $01, $01
1acc2     01 01 01 01 
1acc6     01          | 	byte	$01[5]
1acc7     00 01 01 01 
1accb     02 02 02 02 
1accf     02 03 03 03 
1acd3     04 05 06 06 | 	byte	$00, $01, $01, $01, $02, $02, $02, $02, $02, $03, $03, $03, $04, $05, $06, $06
1acd7     07 08 09 09 
1acdb     09 09 09 09 
1acdf     09 09 09 09 
1ace3     09 09 0A 0A | 	byte	$07, $08, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $0a, $0a
1ace7     0A 0A 0A 0B 
1aceb     0B 0B 0C 0C 
1acef     0B 0B 0A 09 
1acf3     09 08 07 06 | 	byte	$0a, $0a, $0a, $0b, $0b, $0b, $0c, $0c, $0b, $0b, $0a, $09, $09, $08, $07, $06
1acf7     06 05 04 04 
1acfb     03 02 02 02 
1acff     02 02 02 02 
1ad03     01 01 00 00 | 	byte	$06, $05, $04, $04, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00
1ad07     00 FF FF FE 
1ad0b     FE FD FC FC 
1ad0f     FB FB FB FC 
1ad13     FC FC FC FC | 	byte	$00, $ff, $ff, $fe, $fe, $fd, $fc, $fc, $fb, $fb, $fb, $fc, $fc, $fc, $fc, $fc
1ad17     FC FB FB FB 
1ad1b     FB FB FB FB 
1ad1f     FB FB FB FB 
1ad23     FB FB FC FC | 	byte	$fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fc
1ad27     FC FC FC FD 
1ad2b     FD FD FD FD 
1ad2f     FD FD FD FE 
1ad33     FE FE FE FF | 	byte	$fc, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff
1ad37     FF FF FF FF 
1ad3b     00 00 00 00 
1ad3f     00 00 00 00 
1ad43     00 15 0A E3 | 	byte	$ff, $ff, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $15, $0a, $e3
1ad47     D5 E2 EC 46 
1ad4b     29 13 03 DD 
1ad4f     CF D6 03 49 
1ad53     38 1C FF D4 | 	byte	$d5, $e2, $ec, $46, $29, $13, $03, $dd, $cf, $d6, $03, $49, $38, $1c, $ff, $d4
1ad57     C4 CC 02 49 
1ad5b     3A 20 FE D0 
1ad5f     BD C4 03 48 
1ad63     39 23 FB CB | 	byte	$c4, $cc, $02, $49, $3a, $20, $fe, $d0, $bd, $c4, $03, $48, $39, $23, $fb, $cb
1ad67     B7 BE 01 47 
1ad6b     38 26 F9 C7 
1ad6f     B3 B9 FF 48 
1ad73     38 28 F8 C5 | 	byte	$b7, $be, $01, $47, $38, $26, $f9, $c7, $b3, $b9, $ff, $48, $38, $28, $f8, $c5
1ad77     AF B5 06 49 
1ad7b     37 2B F9 C4 
1ad7f     AE B3 02 49 
1ad83     37 2E FA C3 | 	byte	$af, $b5, $06, $49, $37, $2b, $f9, $c4, $ae, $b3, $02, $49, $37, $2e, $fa, $c3
1ad87     AD B2 06 48 
1ad8b     38 2F FB C2 
1ad8f     AD B2 07 4A 
1ad93     39 32 FC C3 | 	byte	$ad, $b2, $06, $48, $38, $2f, $fb, $c2, $ad, $b2, $07, $4a, $39, $32, $fc, $c3
1ad97     AE B1 0B 4D 
1ad9b     37 34 FC C3 
1ad9f     AF B2 12 52 
1ada3     34 38 FD C2 | 	byte	$ae, $b1, $0b, $4d, $37, $34, $fc, $c3, $af, $b2, $12, $52, $34, $38, $fd, $c2
1ada7     B2 B2 1E 52 
1adab     2F 3A FD C3 
1adaf     B2 B2 29 53 
1adb3     31 3C FC C3 | 	byte	$b2, $b2, $1e, $52, $2f, $3a, $fd, $c3, $b2, $b2, $29, $53, $31, $3c, $fc, $c3
1adb7     B4 B1 33 52 
1adbb     33 3E FD C4 
1adbf     B5 AD 3A 51 
1adc3     39 40 FB C5 | 	byte	$b4, $b1, $33, $52, $33, $3e, $fd, $c4, $b5, $ad, $3a, $51, $39, $40, $fb, $c5
1adc7     B7 A6 44 4E 
1adcb     3C 41 F9 C4 
1adcf     B7 A4 4C 4D 
1add3     40 41 F9 C4 | 	byte	$b7, $a6, $44, $4e, $3c, $41, $f9, $c4, $b7, $a4, $4c, $4d, $40, $41, $f9, $c4
1add7     B7 A1 4F 48 
1addb     43 42 F5 C4 
1addf     B7 A0 52 47 
1ade3     49 41 F4 C4 | 	byte	$b7, $a1, $4f, $48, $43, $42, $f5, $c4, $b7, $a0, $52, $47, $49, $41, $f4, $c4
1ade7     B6 9C 53 43 
1adeb     4F 41 F2 C3 
1adef     B5 98 57 40 
1adf3     56 42 F0 C3 | 	byte	$b6, $9c, $53, $43, $4f, $41, $f2, $c3, $b5, $98, $57, $40, $56, $42, $f0, $c3
1adf7     B5 91 59 3F 
1adfb     5C 40 ED C2 
1adff     B3 8D 58 3B 
1ae03     61 3E EA C1 | 	byte	$b5, $91, $59, $3f, $5c, $40, $ed, $c2, $b3, $8d, $58, $3b, $61, $3e, $ea, $c1
1ae07     B2 8A 57 37 
1ae0b     67 3C E8 C1 
1ae0f     B0 87 55 36 
1ae13     6A 3C E5 C2 | 	byte	$b2, $8a, $57, $37, $67, $3c, $e8, $c1, $b0, $87, $55, $36, $6a, $3c, $e5, $c2
1ae17     AF 8A 51 2F 
1ae1b     6B 37 E2 C3 
1ae1f     AE 8D 4E 27 
1ae23     6A 35 E1 C3 | 	byte	$af, $8a, $51, $2f, $6b, $37, $e2, $c3, $ae, $8d, $4e, $27, $6a, $35, $e1, $c3
1ae27     AC 98 4C 22 
1ae2b     69 30 DF C3 
1ae2f     AC 9E 4B 20 
1ae33     69 2D DE C2 | 	byte	$ac, $98, $4c, $22, $69, $30, $df, $c3, $ac, $9e, $4b, $20, $69, $2d, $de, $c2
1ae37     AA A3 49 25 
1ae3b     66 2A DC C1 
1ae3f     A9 AD 48 28 
1ae43     65 26 DC C0 | 	byte	$aa, $a3, $49, $25, $66, $2a, $dc, $c1, $a9, $ad, $48, $28, $65, $26, $dc, $c0
1ae47     A8 AF 45 2F 
1ae4b     62 26 DA BF 
1ae4f     A6 B3 43 36 
1ae53     60 22 DA BE | 	byte	$a8, $af, $45, $2f, $62, $26, $da, $bf, $a6, $b3, $43, $36, $60, $22, $da, $be
1ae57     A5 BA 40 3C 
1ae5b     5E 20 DA BC 
1ae5f     A2 C0 3D 47 
1ae63     5C 1C DA BC | 	byte	$a5, $ba, $40, $3c, $5e, $20, $da, $bc, $a2, $c0, $3d, $47, $5c, $1c, $da, $bc
1ae67     A1 C6 3A 4C 
1ae6b     5A 1A DA BB 
1ae6f     9F CF 32 55 
1ae73     5A 18 DA B9 | 	byte	$a1, $c6, $3a, $4c, $5a, $1a, $da, $bb, $9f, $cf, $32, $55, $5a, $18, $da, $b9
1ae77     9A D5 2E 5C 
1ae7b     59 15 DC B9 
1ae7f     96 D7 26 61 
1ae83     58 14 DD B8 | 	byte	$9a, $d5, $2e, $5c, $59, $15, $dc, $b9, $96, $d7, $26, $61, $58, $14, $dd, $b8
1ae87     90 DF 20 63 
1ae8b     56 10 DE B7 
1ae8f     8F E3 19 66 
1ae93     54 10 DE B8 | 	byte	$90, $df, $20, $63, $56, $10, $de, $b7, $8f, $e3, $19, $66, $54, $10, $de, $b8
1ae97     8C E9 18 67 
1ae9b     51 0E DE B7 
1ae9f     8B ED 16 68 
1aea3     50 0B DE B8 | 	byte	$8c, $e9, $18, $67, $51, $0e, $de, $b7, $8b, $ed, $16, $68, $50, $0b, $de, $b8
1aea7     8C F1 15 68 
1aeab     4E 0B DE B7 
1aeaf     8B F8 15 68 
1aeb3     4D 09 DE B7 | 	byte	$8c, $f1, $15, $68, $4e, $0b, $de, $b7, $8b, $f8, $15, $68, $4d, $09, $de, $b7
1aeb7     8B FB 16 67 
1aebb     4B 08 DE B7 
1aebf     8B FE 18 66 
1aec3     49 06 DE B8 | 	byte	$8b, $fb, $16, $67, $4b, $08, $de, $b7, $8b, $fe, $18, $66, $49, $06, $de, $b8
1aec7     8B 05 19 65 
1aecb     48 05 DD B8 
1aecf     8B 07 1B 63 
1aed3     49 06 DD B8 | 	byte	$8b, $05, $19, $65, $48, $05, $dd, $b8, $8b, $07, $1b, $63, $49, $06, $dd, $b8
1aed7     8B 0C 1B 62 
1aedb     47 06 DC B9 
1aedf     8A 0E 1D 62 
1aee3     48 06 DC B9 | 	byte	$8b, $0c, $1b, $62, $47, $06, $dc, $b9, $8a, $0e, $1d, $62, $48, $06, $dc, $b9
1aee7     8C 0F 1E 60 
1aeeb     46 05 DC B7 
1aeef     8E 11 21 61 
1aef3     44 04 DB B5 | 	byte	$8c, $0f, $1e, $60, $46, $05, $dc, $b7, $8e, $11, $21, $61, $44, $04, $db, $b5
1aef7     94 13 21 60 
1aefb     41 03 DC B1 
1aeff     98 15 22 60 
1af03     3D 02 DB AF | 	byte	$94, $13, $21, $60, $41, $03, $dc, $b1, $98, $15, $22, $60, $3d, $02, $db, $af
1af07     9D 17 22 60 
1af0b     3A 02 DA AC 
1af0f     A2 19 22 60 
1af13     38 00 D9 A8 | 	byte	$9d, $17, $22, $60, $3a, $02, $da, $ac, $a2, $19, $22, $60, $38, $00, $d9, $a8
1af17     A9 1A 22 61 
1af1b     35 00 D9 A5 
1af1f     AE 1A 23 62 
1af23     32 FF DA A1 | 	byte	$a9, $1a, $22, $61, $35, $00, $d9, $a5, $ae, $1a, $23, $62, $32, $ff, $da, $a1
1af27     B7 1A 22 63 
1af2b     2F FF D9 9C 
1af2f     BD 19 23 67 
1af33     2B FE D8 96 | 	byte	$b7, $1a, $22, $63, $2f, $ff, $d9, $9c, $bd, $19, $23, $67, $2b, $fe, $d8, $96
1af37     C4 16 22 68 
1af3b     28 FF D7 95 
1af3f     CD 13 23 69 
1af43     27 FF D7 92 | 	byte	$c4, $16, $22, $68, $28, $ff, $d7, $95, $cd, $13, $23, $69, $27, $ff, $d7, $92
1af47     D8 0F 25 68 
1af4b     25 00 D7 92 
1af4f     DD 0B 27 66 
1af53     23 00 D6 93 | 	byte	$d8, $0f, $25, $68, $25, $00, $d7, $92, $dd, $0b, $27, $66, $23, $00, $d6, $93
1af57     E2 07 29 62 
1af5b     21 03 D4 94 
1af5f     ED 05 29 60 
1af63     20 02 D3 96 | 	byte	$e2, $07, $29, $62, $21, $03, $d4, $94, $ed, $05, $29, $60, $20, $02, $d3, $96
1af67     F0 04 2F 5E 
1af6b     1F 01 CF 97 
1af6f     F3 02 33 5A 
1af73     1D 01 CB 98 | 	byte	$f0, $04, $2f, $5e, $1f, $01, $cf, $97, $f3, $02, $33, $5a, $1d, $01, $cb, $98
1af77     F8 01 39 58 
1af7b     1D FF C8 9A 
1af7f     FA 01 3E 54 
1af83     1D FE C3 9B | 	byte	$f8, $01, $39, $58, $1d, $ff, $c8, $9a, $fa, $01, $3e, $54, $1d, $fe, $c3, $9b
1af87     FD 01 42 52 
1af8b     1C FC BF 9C 
1af8f     FE FF 49 4F 
1af93     1C FA BA 9E | 	byte	$fd, $01, $42, $52, $1c, $fc, $bf, $9c, $fe, $ff, $49, $4f, $1c, $fa, $ba, $9e
1af97     FE FF 4E 4C 
1af9b     1D F8 B6 A0 
1af9f     FC FF 52 4A 
1afa3     1F F6 B1 A1 | 	byte	$fe, $ff, $4e, $4c, $1d, $f8, $b6, $a0, $fc, $ff, $52, $4a, $1f, $f6, $b1, $a1
1afa7     F9 01 58 46 
1afab     21 F4 AE A3 
1afaf     F8 01 5D 43 
1afb3     22 F2 AC A4 | 	byte	$f9, $01, $58, $46, $21, $f4, $ae, $a3, $f8, $01, $5d, $43, $22, $f2, $ac, $a4
1afb7     F6 03 5C 41 
1afbb     21 F1 AC AB 
1afbf     F5 05 5E 3E 
1afc3     20 EF AC AE | 	byte	$f6, $03, $5c, $41, $21, $f1, $ac, $ab, $f5, $05, $5e, $3e, $20, $ef, $ac, $ae
1afc7     F5 08 5D 3D 
1afcb     1F ED AB AF 
1afcf     F6 0C 5D 3B 
1afd3     1D EB AC B2 | 	byte	$f5, $08, $5d, $3d, $1f, $ed, $ab, $af, $f6, $0c, $5d, $3b, $1d, $eb, $ac, $b2
1afd7     F5 11 5C 3B 
1afdb     1B E7 AC B4 
1afdf     F5 16 5C 3A 
1afe3     19 E5 AC B5 | 	byte	$f5, $11, $5c, $3b, $1b, $e7, $ac, $b4, $f5, $16, $5c, $3a, $19, $e5, $ac, $b5
1afe7     F6 1A 5B 3A 
1afeb     18 E2 AD B6 
1afef     F7 1F 5C 3A 
1aff3     15 DE AD B6 | 	byte	$f6, $1a, $5b, $3a, $18, $e2, $ad, $b6, $f7, $1f, $5c, $3a, $15, $de, $ad, $b6
1aff7     F8 22 5A 3B 
1affb     12 DB AE B8 
1afff     F7 27 59 3A 
1b003     11 D9 AF B8 | 	byte	$f8, $22, $5a, $3b, $12, $db, $ae, $b8, $f7, $27, $59, $3a, $11, $d9, $af, $b8
1b007     F8 2B 58 3A 
1b00b     0E D6 AF B8 
1b00f     F9 2E 57 3B 
1b013     0B D3 AF B7 | 	byte	$f8, $2b, $58, $3a, $0e, $d6, $af, $b8, $f9, $2e, $57, $3b, $0b, $d3, $af, $b7
1b017     FC 33 55 3B 
1b01b     09 D1 B0 B8 
1b01f     FC 38 53 3A 
1b023     08 CE B1 BB | 	byte	$fc, $33, $55, $3b, $09, $d1, $b0, $b8, $fc, $38, $53, $3a, $08, $ce, $b1, $bb
1b027     FE 38 51 38 
1b02b     04 CD B2 BD 
1b02f     FD 3B 4F 36 
1b033     03 CB B2 BF | 	byte	$fe, $38, $51, $38, $04, $cd, $b2, $bd, $fd, $3b, $4f, $36, $03, $cb, $b2, $bf
1b037     FE 3F 4D 33 
1b03b     01 C9 B2 C0 
1b03f     01 41 4C 31 
1b043     FF C8 B3 C4 | 	byte	$fe, $3f, $4d, $33, $01, $c9, $b2, $c0, $01, $41, $4c, $31, $ff, $c8, $b3, $c4
1b047     04 41 4C 2E 
1b04b     FC C8 B4 C7 
1b04f     06 43 4B 2C 
1b053     FA C6 B4 C9 | 	byte	$04, $41, $4c, $2e, $fc, $c8, $b4, $c7, $06, $43, $4b, $2c, $fa, $c6, $b4, $c9
1b057     09 43 4B 2B 
1b05b     F8 C6 B5 CE 
1b05f     0D 43 4A 28 
1b063     F5 C6 B6 CF | 	byte	$09, $43, $4b, $2b, $f8, $c6, $b5, $ce, $0d, $43, $4a, $28, $f5, $c6, $b6, $cf
1b067     0F 43 4A 25 
1b06b     F4 C5 B6 D2 
1b06f     13 42 4A 23 
1b073     F0 C7 B7 D7 | 	byte	$0f, $43, $4a, $25, $f4, $c5, $b6, $d2, $13, $42, $4a, $23, $f0, $c7, $b7, $d7
1b077     14 40 47 20 
1b07b     EF C7 B9 D9 
1b07f     17 3E 45 1D 
1b083     ED C7 BA DC | 	byte	$14, $40, $47, $20, $ef, $c7, $b9, $d9, $17, $3e, $45, $1d, $ed, $c7, $ba, $dc
1b087     19 3B 44 1C 
1b08b     EA C8 BB DF 
1b08f     1A 3A 40 1A 
1b093     E8 C9 BD E4 | 	byte	$19, $3b, $44, $1c, $ea, $c8, $bb, $df, $1a, $3a, $40, $1a, $e8, $c9, $bd, $e4
1b097     1D 39 3F 18 
1b09b     E6 C9 BF E6 
1b09f     1E 36 3C 14 
1b0a3     E6 CA C1 E9 | 	byte	$1d, $39, $3f, $18, $e6, $c9, $bf, $e6, $1e, $36, $3c, $14, $e6, $ca, $c1, $e9
1b0a7     20 34 39 12 
1b0ab     E4 CB C2 ED 
1b0af     1F 33 36 10 
1b0b3     E3 CC C5 F0 | 	byte	$20, $34, $39, $12, $e4, $cb, $c2, $ed, $1f, $33, $36, $10, $e3, $cc, $c5, $f0
1b0b7     20 31 34 0E 
1b0bb     E2 CC C7 F5 
1b0bf     1F 30 32 0C 
1b0c3     E2 CE C9 F5 | 	byte	$20, $31, $34, $0e, $e2, $cc, $c7, $f5, $1f, $30, $32, $0c, $e2, $ce, $c9, $f5
1b0c7     1E 30 2F 0A 
1b0cb     E1 CF CB FA 
1b0cf     1E 2F 2D 08 
1b0d3     E1 D0 CD FD | 	byte	$1e, $30, $2f, $0a, $e1, $cf, $cb, $fa, $1e, $2f, $2d, $08, $e1, $d0, $cd, $fd
1b0d7     1D 2F 2B 06 
1b0db     E1 D1 D0 00 
1b0df     1D 2D 2A 04 
1b0e3     E2 D1 D1 01 | 	byte	$1d, $2f, $2b, $06, $e1, $d1, $d0, $00, $1d, $2d, $2a, $04, $e2, $d1, $d1, $01
1b0e7     1D 2D 27 02 
1b0eb     E2 D1 D3 03 
1b0ef     1B 2D 26 01 
1b0f3     E2 D3 D5 07 | 	byte	$1d, $2d, $27, $02, $e2, $d1, $d3, $03, $1b, $2d, $26, $01, $e2, $d3, $d5, $07
1b0f7     1A 2B 23 02 
1b0fb     E1 D4 D7 08 
1b0ff     1A 2B 23 00 
1b103     E3 D5 D8 09 | 	byte	$1a, $2b, $23, $02, $e1, $d4, $d7, $08, $1a, $2b, $23, $00, $e3, $d5, $d8, $09
1b107     1A 29 21 FF 
1b10b     E4 D5 DA 0A 
1b10f     1A 29 20 FD 
1b113     E4 D6 DC 0B | 	byte	$1a, $29, $21, $ff, $e4, $d5, $da, $0a, $1a, $29, $20, $fd, $e4, $d6, $dc, $0b
1b117     19 29 1E FC 
1b11b     E4 D7 DD 0C 
1b11f     1A 28 1C FC 
1b123     E4 D7 DE 0C | 	byte	$19, $29, $1e, $fc, $e4, $d7, $dd, $0c, $1a, $28, $1c, $fc, $e4, $d7, $de, $0c
1b127     19 27 1C FC 
1b12b     E4 D8 DF 0D 
1b12f     1A 26 1B FA 
1b133     E5 D8 E1 0D | 	byte	$19, $27, $1c, $fc, $e4, $d8, $df, $0d, $1a, $26, $1b, $fa, $e5, $d8, $e1, $0d
1b137     1A 25 18 FA 
1b13b     E4 D8 E1 0E 
1b13f     1A 24 18 F9 
1b143     E5 D9 E4 0D | 	byte	$1a, $25, $18, $fa, $e4, $d8, $e1, $0e, $1a, $24, $18, $f9, $e5, $d9, $e4, $0d
1b147     1A 24 16 F9 
1b14b     E5 DA E4 0D 
1b14f     1B 24 15 F9 
1b153     E5 D9 E7 0C | 	byte	$1a, $24, $16, $f9, $e5, $da, $e4, $0d, $1b, $24, $15, $f9, $e5, $d9, $e7, $0c
1b157     1A 23 15 FA 
1b15b     E7 DA E8 0D 
1b15f     1B 23 13 FA 
1b163     E6 DA E8 0C | 	byte	$1a, $23, $15, $fa, $e7, $da, $e8, $0d, $1b, $23, $13, $fa, $e6, $da, $e8, $0c
1b167     1B 23 12 F9 
1b16b     E6 DA EA 0D 
1b16f     1B 22 11 F9 
1b173     E7 DA EB 0D | 	byte	$1b, $23, $12, $f9, $e6, $da, $ea, $0d, $1b, $22, $11, $f9, $e7, $da, $eb, $0d
1b177     1C 22 12 F9 
1b17b     E7 DA ED 0D 
1b17f     1C 23 0F FA 
1b183     E7 DA EE 0D | 	byte	$1c, $22, $12, $f9, $e7, $da, $ed, $0d, $1c, $23, $0f, $fa, $e7, $da, $ee, $0d
1b187     1B 22 0E FA 
1b18b     E8 DC EF 0C 
1b18f     1B 21 0E F9 
1b193     E8 DA EF 0B | 	byte	$1b, $22, $0e, $fa, $e8, $dc, $ef, $0c, $1b, $21, $0e, $f9, $e8, $da, $ef, $0b
1b197     1C 20 0D F9 
1b19b     E7 DB EF 0B 
1b19f     1B 20 0D F8 
1b1a3     E8 DC F0 0B | 	byte	$1c, $20, $0d, $f9, $e7, $db, $ef, $0b, $1b, $20, $0d, $f8, $e8, $dc, $f0, $0b
1b1a7     1B 1F 0B F9 
1b1ab     E8 DE F1 0B 
1b1af     1C 1E 0B F9 
1b1b3     E6 DF F2 0A | 	byte	$1b, $1f, $0b, $f9, $e8, $de, $f1, $0b, $1c, $1e, $0b, $f9, $e6, $df, $f2, $0a
1b1b7     1C 1C 0A F9 
1b1bb     E7 DF F3 0A 
1b1bf     1B 1C 0A F8 
1b1c3     E6 DF F4 0A | 	byte	$1c, $1c, $0a, $f9, $e7, $df, $f3, $0a, $1b, $1c, $0a, $f8, $e6, $df, $f4, $0a
1b1c7     1C 1B 09 F8 
1b1cb     E7 E1 F4 0B 
1b1cf     1C 1B 09 F7 
1b1d3     E6 E2 F6 0A | 	byte	$1c, $1b, $09, $f8, $e7, $e1, $f4, $0b, $1c, $1b, $09, $f7, $e6, $e2, $f6, $0a
1b1d7     1C 19 09 F8 
1b1db     E7 E3 F6 0B 
1b1df     1C 18 08 F7 
1b1e3     E7 E5 F7 0B | 	byte	$1c, $19, $09, $f8, $e7, $e3, $f6, $0b, $1c, $18, $08, $f7, $e7, $e5, $f7, $0b
1b1e7     1C 17 08 F8 
1b1eb     E7 E6 F8 0C 
1b1ef     1B 16 07 F7 
1b1f3     E8 E7 F8 0D | 	byte	$1c, $17, $08, $f8, $e7, $e6, $f8, $0c, $1b, $16, $07, $f7, $e8, $e7, $f8, $0d
1b1f7     1B 16 06 F7 
1b1fb     E7 E8 F9 0C 
1b1ff     1A 15 06 F6 
1b203     E8 E9 FA 0C | 	byte	$1b, $16, $06, $f7, $e7, $e8, $f9, $0c, $1a, $15, $06, $f6, $e8, $e9, $fa, $0c
1b207     19 14 05 F6 
1b20b     E9 EA FB 0E 
1b20f     19 13 04 F6 
1b213     E8 EA FB 0D | 	byte	$19, $14, $05, $f6, $e9, $ea, $fb, $0e, $19, $13, $04, $f6, $e8, $ea, $fb, $0d
1b217     19 12 04 F4 
1b21b     E8 EC FC 0E 
1b21f     18 11 03 F5 
1b223     E9 ED FD 0F | 	byte	$19, $12, $04, $f4, $e8, $ec, $fc, $0e, $18, $11, $03, $f5, $e9, $ed, $fd, $0f
1b227     16 11 02 F4 
1b22b     EB ED FF 0D 
1b22f     15 0F 01 F3 
1b233     EB EE FF 0F | 	byte	$16, $11, $02, $f4, $eb, $ed, $ff, $0d, $15, $0f, $01, $f3, $eb, $ee, $ff, $0f
1b237     15 0E 01 F4 
1b23b     EC F0 FF 0F 
1b23f     14 0D 01 F3 
1b243     EC F1 FF 0E | 	byte	$15, $0e, $01, $f4, $ec, $f0, $ff, $0f, $14, $0d, $01, $f3, $ec, $f1, $ff, $0e
1b247     13 0D 01 F4 
1b24b     EC F2 00 0E 
1b24f     12 0C 00 F3 
1b253     ED F4 01 0E | 	byte	$13, $0d, $01, $f4, $ec, $f2, $00, $0e, $12, $0c, $00, $f3, $ed, $f4, $01, $0e
1b257     11 0B FF F3 
1b25b     EE F4 01 0D 
1b25f     11 0B FF F4 
1b263     EF F5 01 0E | 	byte	$11, $0b, $ff, $f3, $ee, $f4, $01, $0d, $11, $0b, $ff, $f4, $ef, $f5, $01, $0e
1b267     10 09 FF F4 
1b26b     F0 F6 02 0E 
1b26f     10 09 FF F4 
1b273     F0 F7 02 0D | 	byte	$10, $09, $ff, $f4, $f0, $f6, $02, $0e, $10, $09, $ff, $f4, $f0, $f7, $02, $0d
1b277     0E 08 FE F4 
1b27b     F1 F8 03 0C 
1b27f     0D 08 FE F4 
1b283     F2 F8 04 0C | 	byte	$0e, $08, $fe, $f4, $f1, $f8, $03, $0c, $0d, $08, $fe, $f4, $f2, $f8, $04, $0c
1b287     0D 07 FD F4 
1b28b     F2 F9 05 0C 
1b28f     0C 06 FE F6 
1b293     F3 F9 04 0B | 	byte	$0d, $07, $fd, $f4, $f2, $f9, $05, $0c, $0c, $06, $fe, $f6, $f3, $f9, $04, $0b
1b297     0C 06 FE F6 
1b29b     F3 FA 05 0B 
1b29f     0B 05 FD F6 
1b2a3     F4 FB 05 0A | 	byte	$0c, $06, $fe, $f6, $f3, $fa, $05, $0b, $0b, $05, $fd, $f6, $f4, $fb, $05, $0a
1b2a7     0A 04 FC F6 
1b2ab     F5 FB 05 0A 
1b2af     0A 04 FD F6 
1b2b3     F5 FC 05 0A | 	byte	$0a, $04, $fc, $f6, $f5, $fb, $05, $0a, $0a, $04, $fd, $f6, $f5, $fc, $05, $0a
1b2b7     09 03 FC F7 
1b2bb     F6 FC 05 09 
1b2bf     08 03 FC F7 
1b2c3     F6 FD 05 09 | 	byte	$09, $03, $fc, $f7, $f6, $fc, $05, $09, $08, $03, $fc, $f7, $f6, $fd, $05, $09
1b2c7     08 03 FD F7 
1b2cb     F7 FD 05 09 
1b2cf     08 02 FC F7 
1b2d3     F7 FE 05 08 | 	byte	$08, $03, $fd, $f7, $f7, $fd, $05, $09, $08, $02, $fc, $f7, $f7, $fe, $05, $08
1b2d7     08 02 FD F8 
1b2db     F7 FE 05 08 
1b2df     07 01 FC F8 
1b2e3     F8 FF 05 08 | 	byte	$08, $02, $fd, $f8, $f7, $fe, $05, $08, $07, $01, $fc, $f8, $f8, $ff, $05, $08
1b2e7     07 01 FC F8 
1b2eb     F8 FF 05 08 
1b2ef     06 01 FC F8 
1b2f3     F9 FF 05 07 | 	byte	$07, $01, $fc, $f8, $f8, $ff, $05, $08, $06, $01, $fc, $f8, $f9, $ff, $05, $07
1b2f7     06 02 FD F9 
1b2fb     F9 FE 04 07 
1b2ff     06 02 FD FA 
1b303     F9 FE 04 07 | 	byte	$06, $02, $fd, $f9, $f9, $fe, $04, $07, $06, $02, $fd, $fa, $f9, $fe, $04, $07
1b307     06 01 FD FA 
1b30b     F9 FF 04 07 
1b30f     06 01 FD FA 
1b313     FA FF 04 06 | 	byte	$06, $01, $fd, $fa, $f9, $ff, $04, $07, $06, $01, $fd, $fa, $fa, $ff, $04, $06
1b317     05 01 FD FA 
1b31b     FA FF 04 06 
1b31f     05 01 FD FA 
1b323     FA FF 04 06 | 	byte	$05, $01, $fd, $fa, $fa, $ff, $04, $06, $05, $01, $fd, $fa, $fa, $ff, $04, $06
1b327     05 00 FD FA 
1b32b     FA FF 03 06 
1b32f     05 00 FD FA 
1b333     FB 00 03 06 | 	byte	$05, $00, $fd, $fa, $fa, $ff, $03, $06, $05, $00, $fd, $fa, $fb, $00, $03, $06
1b337     04 00 FD FA 
1b33b     FB 00 03 05 
1b33f     04 00 FD FA 
1b343     FB 00 03 05 | 	byte	$04, $00, $fd, $fa, $fb, $00, $03, $05, $04, $00, $fd, $fa, $fb, $00, $03, $05
1b347     04 00 FD FB 
1b34b     FB 00 03 05 
1b34f     03 00 FD FB 
1b353     FC 00 03 05 | 	byte	$04, $00, $fd, $fb, $fb, $00, $03, $05, $03, $00, $fd, $fb, $fc, $00, $03, $05
1b357     03 00 FD FB 
1b35b     FC 00 04 05 
1b35f     03 00 FE FB 
1b363     FC 00 03 05 | 	byte	$03, $00, $fd, $fb, $fc, $00, $04, $05, $03, $00, $fe, $fb, $fc, $00, $03, $05
1b367     03 00 FE FB 
1b36b     FC 00 03 04 
1b36f     03 00 FE FC 
1b373     FD 00 02 04 | 	byte	$03, $00, $fe, $fb, $fc, $00, $03, $04, $03, $00, $fe, $fc, $fd, $00, $02, $04
1b377     03 00 FE FC 
1b37b     FD 00 03 04 
1b37f     03 00 FE FC 
1b383     FD 00 03 04 | 	byte	$03, $00, $fe, $fc, $fd, $00, $03, $04, $03, $00, $fe, $fc, $fd, $00, $03, $04
1b387     02 00 FE FC 
1b38b     FD 00 03 04 
1b38f     02 00 FE FC 
1b393     FE 00 03 04 | 	byte	$02, $00, $fe, $fc, $fd, $00, $03, $04, $02, $00, $fe, $fc, $fe, $00, $03, $04
1b397     02 00 FE FD 
1b39b     FE 00 02 03 
1b39f     01 00 FE FD 
1b3a3     FE 00 02 03 | 	byte	$02, $00, $fe, $fd, $fe, $00, $02, $03, $01, $00, $fe, $fd, $fe, $00, $02, $03
1b3a7     01 00 FE FD 
1b3ab     FF 00 02 03 
1b3af     01 00 FE FD 
1b3b3     FF 00 02 02 | 	byte	$01, $00, $fe, $fd, $ff, $00, $02, $03, $01, $00, $fe, $fd, $ff, $00, $02, $02
1b3b7     01 00 FE FD 
1b3bb     FF 00 02 02 
1b3bf     01 00 FE FE 
1b3c3     FF 00 02 02 | 	byte	$01, $00, $fe, $fd, $ff, $00, $02, $02, $01, $00, $fe, $fe, $ff, $00, $02, $02
1b3c7     01 00 FE FE 
1b3cb     FF 00 02 00 
1b3cf     00 00 00 00 
1b3d3     00 00 F8 FD | 	byte	$01, $00, $fe, $fe, $ff, $00, $02, $00, $00, $00, $00, $00, $00, $00, $f8, $fd
1b3d7     FA FD F9 FC 
1b3db     FF FC 13 1B 
1b3df     18 17 13 0D 
1b3e3     10 0D 09 FA | 	byte	$fa, $fd, $f9, $fc, $ff, $fc, $13, $1b, $18, $17, $13, $0d, $10, $0d, $09, $fa
1b3e7     00 02 F8 D9 
1b3eb     B9 A9 A0 A7 
1b3ef     B1 A7 C3 E4 
1b3f3     FC 1C 31 31 | 	byte	$00, $02, $f8, $d9, $b9, $a9, $a0, $a7, $b1, $a7, $c3, $e4, $fc, $1c, $31, $31
1b3f7     21 05 FB E6 
1b3fb     F1 FE 09 12 
1b3ff     21 1F 13 1D 
1b403     3E 40 34 27 | 	byte	$21, $05, $fb, $e6, $f1, $fe, $09, $12, $21, $1f, $13, $1d, $3e, $40, $34, $27
1b407     31 42 40 36 
1b40b     20 E5 DB C0 
1b40f     B4 C9 DD CE 
1b413     E1 18 17 0C | 	byte	$31, $42, $40, $36, $20, $e5, $db, $c0, $b4, $c9, $dd, $ce, $e1, $18, $17, $0c
1b417     F9 DF CD C6 
1b41b     D4 E1 EB 0F 
1b41f     1C 28 2B 3F 
1b423     4D 4D 56 47 | 	byte	$f9, $df, $cd, $c6, $d4, $e1, $eb, $0f, $1c, $28, $2b, $3f, $4d, $4d, $56, $47
1b427     54 47 5F 5C 
1b42b     13 D9 C1 9E 
1b42f     AC C6 C5 BB 
1b433     D2 07 10 20 | 	byte	$54, $47, $5f, $5c, $13, $d9, $c1, $9e, $ac, $c6, $c5, $bb, $d2, $07, $10, $20
1b437     F6 EA C9 BA 
1b43b     B1 B7 CE F4 
1b43f     02 07 1A 19 
1b443     33 3E 5C 58 | 	byte	$f6, $ea, $c9, $ba, $b1, $b7, $ce, $f4, $02, $07, $1a, $19, $33, $3e, $5c, $58
1b447     46 51 7B 54 
1b44b     19 07 DE EA 
1b44f     F4 E9 B9 BD 
1b453     CD E6 EE E7 | 	byte	$46, $51, $7b, $54, $19, $07, $de, $ea, $f4, $e9, $b9, $bd, $cd, $e6, $ee, $e7
1b457     CA C1 BD B4 
1b45b     BA B8 F5 12 
1b45f     2C 42 3F 5E 
1b463     5A 5A 4B 1C | 	byte	$ca, $c1, $bd, $b4, $ba, $b8, $f5, $12, $2c, $42, $3f, $5e, $5a, $5a, $4b, $1c
1b467     09 2C 22 00 
1b46b     DF BC AA C5 
1b46f     DD C9 BC AE 
1b473     D6 EF FE E8 | 	byte	$09, $2c, $22, $00, $df, $bc, $aa, $c5, $dd, $c9, $bc, $ae, $d6, $ef, $fe, $e8
1b477     CE CC BD C1 
1b47b     B2 E9 06 2D 
1b47f     3F 3C 4B 5E 
1b483     5A 6C 3F 1F | 	byte	$ce, $cc, $bd, $c1, $b2, $e9, $06, $2d, $3f, $3c, $4b, $5e, $5a, $6c, $3f, $1f
1b487     38 33 2E 02 
1b48b     E5 AD BA D5 
1b48f     E3 DD CB D2 
1b493     EE 08 02 F6 | 	byte	$38, $33, $2e, $02, $e5, $ad, $ba, $d5, $e3, $dd, $cb, $d2, $ee, $08, $02, $f6
1b497     D0 D5 BD BD 
1b49b     D0 F5 1D 32 
1b49f     32 3B 54 4F 
1b4a3     78 60 36 26 | 	byte	$d0, $d5, $bd, $bd, $d0, $f5, $1d, $32, $32, $3b, $54, $4f, $78, $60, $36, $26
1b4a7     29 20 22 F6 
1b4ab     B8 8C 93 B1 
1b4af     B3 BE A9 D5 
1b4b3     F4 0B 0D E8 | 	byte	$29, $20, $22, $f6, $b8, $8c, $93, $b1, $b3, $be, $a9, $d5, $f4, $0b, $0d, $e8
1b4b7     E9 D0 C8 D0 
1b4bb     D8 FF 27 24 
1b4bf     3E 45 54 6C 
1b4c3     79 56 38 38 | 	byte	$e9, $d0, $c8, $d0, $d8, $ff, $27, $24, $3e, $45, $54, $6c, $79, $56, $38, $38
1b4c7     25 39 27 F5 
1b4cb     B5 92 A6 BE 
1b4cf     DF D6 E3 FF 
1b4d3     27 40 32 27 | 	byte	$25, $39, $27, $f5, $b5, $92, $a6, $be, $df, $d6, $e3, $ff, $27, $40, $32, $27
1b4d7     1F FC FA E8 
1b4db     F1 18 0C 30 
1b4df     29 28 3C 57 
1b4e3     4F 30 29 1A | 	byte	$1f, $fc, $fa, $e8, $f1, $18, $0c, $30, $29, $28, $3c, $57, $4f, $30, $29, $1a
1b4e7     26 33 1D DD 
1b4eb     A8 81 9F B2 
1b4ef     C7 C1 C6 F3 
1b4f3     15 29 23 25 | 	byte	$26, $33, $1d, $dd, $a8, $81, $9f, $b2, $c7, $c1, $c6, $f3, $15, $29, $23, $25
1b4f7     05 FB D7 D1 
1b4fb     E5 ED FF 13 
1b4ff     FE 08 29 33 
1b503     39 1F 1E 0F | 	byte	$05, $fb, $d7, $d1, $e5, $ed, $ff, $13, $fe, $08, $29, $33, $39, $1f, $1e, $0f
1b507     31 37 12 E0 
1b50b     99 99 A7 C3 
1b50f     C8 B7 CC F8 
1b513     04 23 13 0F | 	byte	$31, $37, $12, $e0, $99, $99, $a7, $c3, $c8, $b7, $cc, $f8, $04, $23, $13, $0f
1b517     01 E5 D4 D6 
1b51b     DC E2 03 F1 
1b51f     EE 09 1D 2D 
1b523     22 1A 09 1A | 	byte	$01, $e5, $d4, $d6, $dc, $e2, $03, $f1, $ee, $09, $1d, $2d, $22, $1a, $09, $1a
1b527     37 3E 1C DF 
1b52b     AF AD BE DB 
1b52f     CC C8 E9 F6 
1b533     21 28 28 2E | 	byte	$37, $3e, $1c, $df, $af, $ad, $be, $db, $cc, $c8, $e9, $f6, $21, $28, $28, $2e
1b537     0A F3 EB DF 
1b53b     E3 01 03 F5 
1b53f     F5 19 22 35 
1b543     27 15 14 23 | 	byte	$0a, $f3, $eb, $df, $e3, $01, $03, $f5, $f5, $19, $22, $35, $27, $15, $14, $23
1b547     4E 49 2C F1 
1b54b     D0 D3 F8 F9 
1b54f     F6 FF 0A 28 
1b553     3C 3C 47 37 | 	byte	$4e, $49, $2c, $f1, $d0, $d3, $f8, $f9, $f6, $ff, $0a, $28, $3c, $3c, $47, $37
1b557     0C 0C EC EA 
1b55b     F6 0D 07 F8 
1b55f     0C 12 2E 34 
1b563     25 15 11 2E | 	byte	$0c, $0c, $ec, $ea, $f6, $0d, $07, $f8, $0c, $12, $2e, $34, $25, $15, $11, $2e
1b567     4C 3D 25 E2 
1b56b     C9 DC E5 F2 
1b56f     E6 ED 00 1B 
1b573     1E 2F 2D 0A | 	byte	$4c, $3d, $25, $e2, $c9, $dc, $e5, $f2, $e6, $ed, $00, $1b, $1e, $2f, $2d, $0a
1b577     FF E5 CC CD 
1b57b     E9 F0 EB EA 
1b57f     F9 07 25 22 
1b583     13 00 05 29 | 	byte	$ff, $e5, $cc, $cd, $e9, $f0, $eb, $ea, $f9, $07, $25, $22, $13, $00, $05, $29
1b587     33 36 FD C0 
1b58b     BC C0 CF D0 
1b58f     C0 D1 E6 EF 
1b593     0E 18 11 FA | 	byte	$33, $36, $fd, $c0, $bc, $c0, $cf, $d0, $c0, $d1, $e6, $ef, $0e, $18, $11, $fa
1b597     ED C8 B2 C6 
1b59b     CC D7 CF D7 
1b59f     E6 00 19 19 
1b5a3     03 FD 0A 28 | 	byte	$ed, $c8, $b2, $c6, $cc, $d7, $cf, $d7, $e6, $00, $19, $19, $03, $fd, $0a, $28
1b5a7     40 2C F4 D0 
1b5ab     CC CE EB D1 
1b5af     DD EE EF 0E 
1b5b3     20 2E 1B 15 | 	byte	$40, $2c, $f4, $d0, $cc, $ce, $eb, $d1, $dd, $ee, $ef, $0e, $20, $2e, $1b, $15
1b5b7     F6 D1 CE D9 
1b5bb     E1 E9 DF EE 
1b5bf     FE 1D 38 26 
1b5c3     21 13 27 4C | 	byte	$f6, $d1, $ce, $d9, $e1, $e9, $df, $ee, $fe, $1d, $38, $26, $21, $13, $27, $4c
1b5c7     5B 36 09 E6 
1b5cb     DC EB E1 DD 
1b5cf     E7 EC F9 1E 
1b5d3     2E 37 37 27 | 	byte	$5b, $36, $09, $e6, $dc, $eb, $e1, $dd, $e7, $ec, $f9, $1e, $2e, $37, $37, $27
1b5d7     00 E6 E8 E9 
1b5db     F7 F0 F4 F6 
1b5df     0A 2F 34 2E 
1b5e3     21 0E 32 55 | 	byte	$00, $e6, $e8, $e9, $f7, $f0, $f4, $f6, $0a, $2f, $34, $2e, $21, $0e, $32, $55
1b5e7     4F 3A 00 EB 
1b5eb     E9 E4 DC DD 
1b5ef     E2 DE FD 14 
1b5f3     22 30 2F 15 | 	byte	$4f, $3a, $00, $eb, $e9, $e4, $dc, $dd, $e2, $de, $fd, $14, $22, $30, $2f, $15
1b5f7     F7 E4 E5 E9 
1b5fb     ED EE E5 EF 
1b5ff     0A 23 29 27 
1b603     07 10 36 46 | 	byte	$f7, $e4, $e5, $e9, $ed, $ee, $e5, $ef, $0a, $23, $29, $27, $07, $10, $36, $46
1b607     4C 1E F5 E6 
1b60b     DE D3 D3 D2 
1b60f     CA D3 F0 FE 
1b613     13 24 15 02 | 	byte	$4c, $1e, $f5, $e6, $de, $d3, $d3, $d2, $ca, $d3, $f0, $fe, $13, $24, $15, $02
1b617     DC D8 D2 D7 
1b61b     E2 D3 CD E2 
1b61f     F4 0E 1C 02 
1b623     F5 00 23 3C | 	byte	$dc, $d8, $d2, $d7, $e2, $d3, $cd, $e2, $f4, $0e, $1c, $02, $f5, $00, $23, $3c
1b627     34 06 EF E2 
1b62b     CE D1 CE C8 
1b62f     C7 DC EC 01 
1b633     1D 28 1C 00 | 	byte	$34, $06, $ef, $e2, $ce, $d1, $ce, $c8, $c7, $dc, $ec, $01, $1d, $28, $1c, $00
1b637     E8 E0 D9 E8 
1b63b     E7 D4 E3 E6 
1b63f     03 1F 17 06 
1b643     F9 0D 32 48 | 	byte	$e8, $e0, $d9, $e8, $e7, $d4, $e3, $e6, $03, $1f, $17, $06, $f9, $0d, $32, $48
1b647     2B 0A FD E5 
1b64b     DB E2 D6 D5 
1b64f     DA E9 FE 15 
1b653     35 37 27 0C | 	byte	$2b, $0a, $fd, $e5, $db, $e2, $d6, $d5, $da, $e9, $fe, $15, $35, $37, $27, $0c
1b657     F9 EA F5 FC 
1b65b     EE F1 EC FD 
1b65f     22 2F 26 12 
1b663     07 28 4C 4D | 	byte	$f9, $ea, $f5, $fc, $ee, $f1, $ec, $fd, $22, $2f, $26, $12, $07, $28, $4c, $4d
1b667     33 1B 03 ED 
1b66b     F0 E6 DF DE 
1b66f     E1 ED 00 1F 
1b673     3B 35 26 0E | 	byte	$33, $1b, $03, $ed, $f0, $e6, $df, $de, $e1, $ed, $00, $1f, $3b, $35, $26, $0e
1b677     F1 F6 F8 F6 
1b67b     F3 EA EA 05 
1b67f     24 2C 27 04 
1b683     0A 31 46 3F | 	byte	$f1, $f6, $f8, $f6, $f3, $ea, $ea, $05, $24, $2c, $27, $04, $0a, $31, $46, $3f
1b687     2F 13 FA EE 
1b68b     EA DE D9 D7 
1b68f     D9 E3 F7 21 
1b693     2A 2C 1D F5 | 	byte	$2f, $13, $fa, $ee, $ea, $de, $d9, $d7, $d9, $e3, $f7, $21, $2a, $2c, $1d, $f5
1b697     EE E7 E5 E6 
1b69b     DC D2 DD F8 
1b69f     16 21 0D F3 
1b6a3     0B 2A 36 38 | 	byte	$ee, $e7, $e5, $e6, $dc, $d2, $dd, $f8, $16, $21, $0d, $f3, $0b, $2a, $36, $38
1b6a7     22 08 F3 E9 
1b6ab     E0 D5 CF D0 
1b6af     CB D4 F9 0F 
1b6b3     24 27 08 F3 | 	byte	$22, $08, $f3, $e9, $e0, $d5, $cf, $d0, $cb, $d4, $f9, $0f, $24, $27, $08, $f3
1b6b7     ED E1 E9 E5 
1b6bb     D5 D5 E0 00 
1b6bf     22 24 06 FF 
1b6c3     18 2D 3F 3C | 	byte	$ed, $e1, $e9, $e5, $d5, $d5, $e0, $00, $22, $24, $06, $ff, $18, $2d, $3f, $3c
1b6c7     21 0B F6 F0 
1b6cb     E3 D5 DB CD 
1b6cf     CD E2 F7 17 
1b6d3     2B 24 0B FE | 	byte	$21, $0b, $f6, $f0, $e3, $d5, $db, $cd, $cd, $e2, $f7, $17, $2b, $24, $0b, $fe
1b6d7     ED EC F0 E2 
1b6db     DA D4 DF 0C 
1b6df     27 18 00 02 
1b6e3     18 2E 42 38 | 	byte	$ed, $ec, $f0, $e2, $da, $d4, $df, $0c, $27, $18, $00, $02, $18, $2e, $42, $38
1b6e7     22 0A FE F6 
1b6eb     E0 E6 DA CF 
1b6ef     DA E4 01 28 
1b6f3     31 2A 14 00 | 	byte	$22, $0a, $fe, $f6, $e0, $e6, $da, $cf, $da, $e4, $01, $28, $31, $2a, $14, $00
1b6f7     F4 F8 F4 E9 
1b6fb     DE D0 EF 1B 
1b6ff     26 18 06 0B 
1b703     1F 39 48 3C | 	byte	$f4, $f8, $f4, $e9, $de, $d0, $ef, $1b, $26, $18, $06, $0b, $1f, $39, $48, $3c
1b707     23 15 04 F3 
1b70b     EB E5 D2 D3 
1b70f     D3 DC 06 1F 
1b713     2D 26 0A FD | 	byte	$23, $15, $04, $f3, $eb, $e5, $d2, $d3, $d3, $dc, $06, $1f, $2d, $26, $0a, $fd
1b717     F6 F7 F5 E8 
1b71b     D1 CD FD 1A 
1b71f     20 13 00 0B 
1b723     1C 3A 42 2C | 	byte	$f6, $f7, $f5, $e8, $d1, $cd, $fd, $1a, $20, $13, $00, $0b, $1c, $3a, $42, $2c
1b727     23 12 FF F5 
1b72b     EC DE D8 D3 
1b72f     CF E9 08 20 
1b733     30 1B 07 FA | 	byte	$23, $12, $ff, $f5, $ec, $de, $d8, $d3, $cf, $e9, $08, $20, $30, $1b, $07, $fa
1b737     F2 F4 F3 DC 
1b73b     C5 D2 FD 10 
1b73f     15 00 FA FF 
1b743     18 34 2D 22 | 	byte	$f2, $f4, $f3, $dc, $c5, $d2, $fd, $10, $15, $00, $fa, $ff, $18, $34, $2d, $22
1b747     19 FF F7 EA 
1b74b     D9 D8 CD C2 
1b74f     C8 E1 FE 1A 
1b753     21 0B 00 EE | 	byte	$19, $ff, $f7, $ea, $d9, $d8, $cd, $c2, $c8, $e1, $fe, $1a, $21, $0b, $00, $ee
1b757     EC F6 EC CD 
1b75b     C2 D8 00 11 
1b75f     11 01 F9 06 
1b763     27 33 2F 2C | 	byte	$ec, $f6, $ec, $cd, $c2, $d8, $00, $11, $11, $01, $f9, $06, $27, $33, $2f, $2c
1b767     15 09 01 ED 
1b76b     EA E2 D4 D0 
1b76f     D3 ED 0C 27 
1b773     26 19 08 F2 | 	byte	$15, $09, $01, $ed, $ea, $e2, $d4, $d0, $d3, $ed, $0c, $27, $26, $19, $08, $f2
1b777     FD 00 EB CF 
1b77b     C6 E7 04 14 
1b77f     15 FD FD 14 
1b783     29 33 37 2C | 	byte	$fd, $00, $eb, $cf, $c6, $e7, $04, $14, $15, $fd, $fd, $14, $29, $33, $37, $2c
1b787     1A 17 00 F8 
1b78b     F3 E5 DB D4 
1b78f     D7 F7 13 28 
1b793     28 1C 01 FA | 	byte	$1a, $17, $00, $f8, $f3, $e5, $db, $d4, $d7, $f7, $13, $28, $28, $1c, $01, $fa
1b797     06 01 E9 CB 
1b79b     D2 EF 07 1B 
1b79f     0E FD 08 17 
1b7a3     2A 3B 33 2B | 	byte	$06, $01, $e9, $cb, $d2, $ef, $07, $1b, $0e, $fd, $08, $17, $2a, $3b, $33, $2b
1b7a7     1F 13 FF FB 
1b7ab     EB E2 D6 CA 
1b7af     D7 F5 0D 26 
1b7b3     23 0F F8 F9 | 	byte	$1f, $13, $ff, $fb, $eb, $e2, $d6, $ca, $d7, $f5, $0d, $26, $23, $0f, $f8, $f9
1b7b7     05 F7 D9 C5 
1b7bb     CF E5 05 0F 
1b7bf     F9 FB 00 11 
1b7c3     2B 30 2C 27 | 	byte	$05, $f7, $d9, $c5, $cf, $e5, $05, $0f, $f9, $fb, $00, $11, $2b, $30, $2c, $27
1b7c7     18 0A FE F4 
1b7cb     E7 DE CB C5 
1b7cf     D7 ED 0B 20 
1b7d3     19 03 F2 FE | 	byte	$18, $0a, $fe, $f4, $e7, $de, $cb, $c5, $d7, $ed, $0b, $20, $19, $03, $f2, $fe
1b7d7     03 EC D5 C6 
1b7db     CF EF 0C 07 
1b7df     03 FF 05 1E 
1b7e3     31 34 38 2B | 	byte	$03, $ec, $d5, $c6, $cf, $ef, $0c, $07, $03, $ff, $05, $1e, $31, $34, $38, $2b
1b7e7     1F 13 03 FB 
1b7eb     F0 E0 CC CF 
1b7ef     DB F2 12 22 
1b7f3     19 FF FC 08 | 	byte	$1f, $13, $03, $fb, $f0, $e0, $cc, $cf, $db, $f2, $12, $22, $19, $ff, $fc, $08
1b7f7     00 EB D8 C2 
1b7fb     DC F7 0A 09 
1b7ff     03 FD 0C 23 
1b803     30 39 38 2B | 	byte	$00, $eb, $d8, $c2, $dc, $f7, $0a, $09, $03, $fd, $0c, $23, $30, $39, $38, $2b
1b807     25 15 08 03 
1b80b     F3 E2 D3 D4 
1b80f     DE F9 1C 27 
1b813     17 00 0C 0D | 	byte	$25, $15, $08, $03, $f3, $e2, $d3, $d4, $de, $f9, $1c, $27, $17, $00, $0c, $0d
1b817     08 F5 D4 D0 
1b81b     EA FF 11 0E 
1b81f     05 05 15 27 
1b823     36 3E 37 33 | 	byte	$08, $f5, $d4, $d0, $ea, $ff, $11, $0e, $05, $05, $15, $27, $36, $3e, $37, $33
1b827     2A 1A 12 04 
1b82b     F3 E2 D4 D3 
1b82f     DC FE 1E 1C 
1b833     09 05 07 0B | 	byte	$2a, $1a, $12, $04, $f3, $e2, $d4, $d3, $dc, $fe, $1e, $1c, $09, $05, $07, $0b
1b837     03 E7 CC D3 
1b83b     E5 FD 0C 01 
1b83f     FE 00 0C 20 
1b843     2D 2E 2A 24 | 	byte	$03, $e7, $cc, $d3, $e5, $fd, $0c, $01, $fe, $00, $0c, $20, $2d, $2e, $2a, $24
1b847     14 0C 01 F4 
1b84b     DE D0 C2 C3 
1b84f     CC FE 0D 08 
1b853     FE F9 FF 06 | 	byte	$14, $0c, $01, $f4, $de, $d0, $c2, $c3, $cc, $fe, $0d, $08, $fe, $f9, $ff, $06
1b857     F8 D8 CB CD 
1b85b     E3 FE 02 FD 
1b85f     FD 00 11 24 
1b863     2C 32 2C 26 | 	byte	$f8, $d8, $cb, $cd, $e3, $fe, $02, $fd, $fd, $00, $11, $24, $2c, $32, $2c, $26
1b867     18 15 07 FB 
1b86b     E5 D9 C9 C3 
1b86f     E0 06 10 0F 
1b873     04 00 0F 0F | 	byte	$18, $15, $07, $fb, $e5, $d9, $c9, $c3, $e0, $06, $10, $0f, $04, $00, $0f, $0f
1b877     FA E2 D4 DA 
1b87b     F4 05 08 07 
1b87f     01 09 1C 2A 
1b883     33 38 31 28 | 	byte	$fa, $e2, $d4, $da, $f4, $05, $08, $07, $01, $09, $1c, $2a, $33, $38, $31, $28
1b887     1F 1A 0F FA 
1b88b     EE DC C5 CD 
1b88f     EF 09 16 14 
1b893     07 10 1A 12 | 	byte	$1f, $1a, $0f, $fa, $ee, $dc, $c5, $cd, $ef, $09, $16, $14, $07, $10, $1a, $12
1b897     00 E5 D8 E3 
1b89b     FB 06 0B 02 
1b89f     01 0A 1C 25 
1b8a3     34 31 2D 20 | 	byte	$00, $e5, $d8, $e3, $fb, $06, $0b, $02, $01, $0a, $1c, $25, $34, $31, $2d, $20
1b8a7     1D 17 02 F7 
1b8ab     E7 CC BA CA 
1b8af     E4 01 0B 02 
1b8b3     00 0A 10 07 | 	byte	$1d, $17, $02, $f7, $e7, $cc, $ba, $ca, $e4, $01, $0b, $02, $00, $0a, $10, $07
1b8b7     F5 D2 D2 D9 
1b8bb     F4 FD 00 F6 
1b8bf     FC 02 13 20 
1b8c3     2C 2D 23 1F | 	byte	$f5, $d2, $d2, $d9, $f4, $fd, $00, $f6, $fc, $02, $13, $20, $2c, $2d, $23, $1f
1b8c7     1D 0F 00 FB 
1b8cb     E0 C5 BD C9 
1b8cf     E9 01 04 FE 
1b8d3     02 08 0F 03 | 	byte	$1d, $0f, $00, $fb, $e0, $c5, $bd, $c9, $e9, $01, $04, $fe, $02, $08, $0f, $03
1b8d7     EA D2 CF DB 
1b8db     F1 F9 F6 F5 
1b8df     F7 02 0C 1D 
1b8e3     2A 25 20 20 | 	byte	$ea, $d2, $cf, $db, $f1, $f9, $f6, $f5, $f7, $02, $0c, $1d, $2a, $25, $20, $20
1b8e7     1A 0A 06 FA 
1b8eb     D9 C6 BD D0 
1b8ef     F2 02 03 04 
1b8f3     04 13 14 08 | 	byte	$1a, $0a, $06, $fa, $d9, $c6, $bd, $d0, $f2, $02, $03, $04, $04, $13, $14, $08
1b8f7     EC DA D5 E8 
1b8fb     F8 FE FE FA 
1b8ff     01 07 16 29 
1b903     2F 28 2A 2A | 	byte	$ec, $da, $d5, $e8, $f8, $fe, $fe, $fa, $01, $07, $16, $29, $2f, $28, $2a, $2a
1b907     1C 1A 12 00 
1b90b     E3 CF C7 E5 
1b90f     F9 0A 09 09 
1b913     0D 1C 18 08 | 	byte	$1c, $1a, $12, $00, $e3, $cf, $c7, $e5, $f9, $0a, $09, $09, $0d, $1c, $18, $08
1b917     EE D9 DE EA 
1b91b     FC FC FE FD 
1b91f     01 07 1B 2E 
1b923     29 2E 2E 25 | 	byte	$ee, $d9, $de, $ea, $fc, $fc, $fe, $fd, $01, $07, $1b, $2e, $29, $2e, $2e, $25
1b927     1D 1E 0F 00 
1b92b     DE C8 CB E3 
1b92f     F7 03 03 03 
1b933     0E 14 15 00 | 	byte	$1d, $1e, $0f, $00, $de, $c8, $cb, $e3, $f7, $03, $03, $03, $0e, $14, $15, $00
1b937     E6 D8 DC ED 
1b93b     F6 F8 FB FD 
1b93f     FD 09 1F 25 
1b943     29 2F 29 22 | 	byte	$e6, $d8, $dc, $ed, $f6, $f8, $fb, $fd, $fd, $09, $1f, $25, $29, $2f, $29, $22
1b947     21 18 14 F9 
1b94b     D9 C8 CD E2 
1b94f     F7 FE FD 03 
1b953     0B 16 10 FA | 	byte	$21, $18, $14, $f9, $d9, $c8, $cd, $e2, $f7, $fe, $fd, $03, $0b, $16, $10, $fa
1b957     E0 D4 DC E9 
1b95b     F1 F3 FB F2 
1b95f     FB 0A 1A 1E 
1b963     2B 25 23 1D | 	byte	$e0, $d4, $dc, $e9, $f1, $f3, $fb, $f2, $fb, $0a, $1a, $1e, $2b, $25, $23, $1d
1b967     18 17 0D EF 
1b96b     D2 C4 CA E3 
1b96f     EF F9 F8 FF 
1b973     0C 13 0C F2 | 	byte	$18, $17, $0d, $ef, $d2, $c4, $ca, $e3, $ef, $f9, $f8, $ff, $0c, $13, $0c, $f2
1b977     DE D3 E0 E6 
1b97b     F1 F7 F8 F0 
1b97f     03 0C 1A 27 
1b983     2C 2B 27 21 | 	byte	$de, $d3, $e0, $e6, $f1, $f7, $f8, $f0, $03, $0c, $1a, $27, $2c, $2b, $27, $21
1b987     20 22 0B F3 
1b98b     D4 C9 D6 E6 
1b98f     F6 FA FD 05 
1b993     15 19 0F F5 | 	byte	$20, $22, $0b, $f3, $d4, $c9, $d6, $e6, $f6, $fa, $fd, $05, $15, $19, $0f, $f5
1b997     E2 E0 E6 EC 
1b99b     F9 FE F4 FE 
1b99f     07 12 23 2C 
1b9a3     32 32 2A 29 | 	byte	$e2, $e0, $e6, $ec, $f9, $fe, $f4, $fe, $07, $12, $23, $2c, $32, $32, $2a, $29
1b9a7     2C 25 13 F2 
1b9ab     D8 D1 DB ED 
1b9af     F7 FC FD 0D 
1b9b3     17 21 0C F5 | 	byte	$2c, $25, $13, $f2, $d8, $d1, $db, $ed, $f7, $fc, $fd, $0d, $17, $21, $0c, $f5
1b9b7     E4 E5 E1 F1 
1b9bb     FB F5 F7 FD 
1b9bf     05 13 20 29 
1b9c3     32 29 28 28 | 	byte	$e4, $e5, $e1, $f1, $fb, $f5, $f7, $fd, $05, $13, $20, $29, $32, $29, $28, $28
1b9c7     2A 27 0B EF 
1b9cb     D3 D1 D9 ED 
1b9cf     F0 F7 FB 0C 
1b9d3     1A 1F 05 F3 | 	byte	$2a, $27, $0b, $ef, $d3, $d1, $d9, $ed, $f0, $f7, $fb, $0c, $1a, $1f, $05, $f3
1b9d7     E9 DC E7 F3 
1b9db     F6 F4 F8 FA 
1b9df     07 10 1E 2C 
1b9e3     29 27 21 25 | 	byte	$e9, $dc, $e7, $f3, $f6, $f4, $f8, $fa, $07, $10, $1e, $2c, $29, $27, $21, $25
1b9e7     29 21 04 E8 
1b9eb     CE CD DA E7 
1b9ef     EC EF F7 09 
1b9f3     1C 10 00 F2 | 	byte	$29, $21, $04, $e8, $ce, $cd, $da, $e7, $ec, $ef, $f7, $09, $1c, $10, $00, $f2
1b9f7     DE DA E8 ED 
1b9fb     F1 F1 F1 FD 
1b9ff     01 0F 1E 26 
1ba03     29 21 21 26 | 	byte	$de, $da, $e8, $ed, $f1, $f1, $f1, $fd, $01, $0f, $1e, $26, $29, $21, $21, $26
1ba07     2B 1B 03 E2 
1ba0b     CF CF DB E4 
1ba0f     EA EA F6 11 
1ba13     16 0E 00 ED | 	byte	$2b, $1b, $03, $e2, $cf, $cf, $db, $e4, $ea, $ea, $f6, $11, $16, $0e, $00, $ed
1ba17     DB E1 E5 EE 
1ba1b     EF EB F6 F5 
1ba1f     04 0C 1F 25 
1ba23     27 1C 24 28 | 	byte	$db, $e1, $e5, $ee, $ef, $eb, $f6, $f5, $04, $0c, $1f, $25, $27, $1c, $24, $28
1ba27     2D 1D 01 E2 
1ba2b     D2 D7 DD EC 
1ba2f     E7 EC 01 16 
1ba33     17 15 03 ED | 	byte	$2d, $1d, $01, $e2, $d2, $d7, $dd, $ec, $e7, $ec, $01, $16, $17, $15, $03, $ed
1ba37     E6 E3 F0 F1 
1ba3b     F4 F5 FA FF 
1ba3f     0A 15 27 2D 
1ba43     29 27 2A 33 | 	byte	$e6, $e3, $f0, $f1, $f4, $f5, $fa, $ff, $0a, $15, $27, $2d, $29, $27, $2a, $33
1ba47     32 23 00 E6 
1ba4b     D8 D9 E8 EC 
1ba4f     E5 F2 08 13 
1ba53     1F 14 02 EF | 	byte	$32, $23, $00, $e6, $d8, $d9, $e8, $ec, $e5, $f2, $08, $13, $1f, $14, $02, $ef
1ba57     E3 EB EE F2 
1ba5b     F4 F6 F9 00 
1ba5f     06 19 27 2B 
1ba63     26 27 2C 32 | 	byte	$e3, $eb, $ee, $f2, $f4, $f6, $f9, $00, $06, $19, $27, $2b, $26, $27, $2c, $32
1ba67     33 1B 00 E3 
1ba6b     D5 DD E8 E1 
1ba6f     E4 F4 01 17 
1ba73     15 11 FA EA | 	byte	$33, $1b, $00, $e3, $d5, $dd, $e8, $e1, $e4, $f4, $01, $17, $15, $11, $fa, $ea
1ba77     E0 E6 E5 ED 
1ba7b     EB EE F3 F6 
1ba7f     03 11 21 1E 
1ba83     1F 1C 25 2F | 	byte	$e0, $e6, $e5, $ed, $eb, $ee, $f3, $f6, $03, $11, $21, $1e, $1f, $1c, $25, $2f
1ba87     28 12 F6 D6 
1ba8b     CF DF D7 DC 
1ba8f     DA ED FE 0E 
1ba93     10 07 F2 E3 | 	byte	$28, $12, $f6, $d6, $cf, $df, $d7, $dc, $da, $ed, $fe, $0e, $10, $07, $f2, $e3
1ba97     DF DE E6 E5 
1ba9b     E9 EA EF F3 
1ba9f     02 11 1B 1E 
1baa3     1B 1E 2A 32 | 	byte	$df, $de, $e6, $e5, $e9, $ea, $ef, $f3, $02, $11, $1b, $1e, $1b, $1e, $2a, $32
1baa7     28 18 F2 DC 
1baab     DE DE E0 DD 
1baaf     E3 F2 05 14 
1bab3     18 06 F8 E8 | 	byte	$28, $18, $f2, $dc, $de, $de, $e0, $dd, $e3, $f2, $05, $14, $18, $06, $f8, $e8
1bab7     E5 E7 E9 ED 
1babb     EE F2 F1 FC 
1babf     09 17 22 22 
1bac3     1F 26 31 33 | 	byte	$e5, $e7, $e9, $ed, $ee, $f2, $f1, $fc, $09, $17, $22, $22, $1f, $26, $31, $33
1bac7     37 13 F7 E5 
1bacb     E5 E4 E3 E1 
1bacf     EA F7 0C 1D 
1bad3     16 0C F7 EE | 	byte	$37, $13, $f7, $e5, $e5, $e4, $e3, $e1, $ea, $f7, $0c, $1d, $16, $0c, $f7, $ee
1bad7     E8 EB EB EE 
1badb     F1 F1 F5 FE 
1badf     0C 19 26 1C 
1bae3     28 27 33 3E | 	byte	$e8, $eb, $eb, $ee, $f1, $f1, $f5, $fe, $0c, $19, $26, $1c, $28, $27, $33, $3e
1bae7     33 13 F6 E9 
1baeb     E6 E6 DF E3 
1baef     E3 F9 0B 19 
1baf3     13 05 F3 E9 | 	byte	$33, $13, $f6, $e9, $e6, $e6, $df, $e3, $e3, $f9, $0b, $19, $13, $05, $f3, $e9
1baf7     E8 E5 E9 EA 
1bafb     ED EA F3 F7 
1baff     09 19 18 1E 
1bb03     1D 21 32 39 | 	byte	$e8, $e5, $e9, $ea, $ed, $ea, $f3, $f7, $09, $19, $18, $1e, $1d, $21, $32, $39
1bb07     28 0D F0 E9 
1bb0b     E3 E1 DF DA 
1bb0f     E6 F7 0D 15 
1bb13     11 00 F2 EB | 	byte	$28, $0d, $f0, $e9, $e3, $e1, $df, $da, $e6, $f7, $0d, $15, $11, $00, $f2, $eb
1bb17     E5 E5 E9 EB 
1bb1b     E7 F0 EC FD 
1bb1f     0B 15 1B 1E 
1bb23     19 24 37 39 | 	byte	$e5, $e5, $e9, $eb, $e7, $f0, $ec, $fd, $0b, $15, $1b, $1e, $19, $24, $37, $39
1bb27     29 07 F7 E8 
1bb2b     E5 E1 DB DA 
1bb2f     E5 F9 0B 15 
1bb33     0A FE EE ED | 	byte	$29, $07, $f7, $e8, $e5, $e1, $db, $da, $e5, $f9, $0b, $15, $0a, $fe, $ee, $ed
1bb37     E0 EB E7 E8 
1bb3b     ED E9 F2 00 
1bb3f     0B 16 1F 19 
1bb43     1E 29 3E 3A | 	byte	$e0, $eb, $e7, $e8, $ed, $e9, $f2, $00, $0b, $16, $1f, $19, $1e, $29, $3e, $3a
1bb47     26 0B F7 ED 
1bb4b     E8 E6 DB E0 
1bb4f     E5 FF 0E 16 
1bb53     08 FD F4 E6 | 	byte	$26, $0b, $f7, $ed, $e8, $e6, $db, $e0, $e5, $ff, $0e, $16, $08, $fd, $f4, $e6
1bb57     EA E6 E7 EC 
1bb5b     E9 E7 F7 FD 
1bb5f     0E 19 1D 1C 
1bb63     1C 31 3E 3B | 	byte	$ea, $e6, $e7, $ec, $e9, $e7, $f7, $fd, $0e, $19, $1d, $1c, $1c, $31, $3e, $3b
1bb67     25 0C FA F2 
1bb6b     ED E5 DF DF 
1bb6f     ED 00 16 12 
1bb73     0D 00 F3 EE | 	byte	$25, $0c, $fa, $f2, $ed, $e5, $df, $df, $ed, $00, $16, $12, $0d, $00, $f3, $ee
1bb77     EA E7 EC EC 
1bb7b     E7 F0 F2 01 
1bb7f     0E 1B 1C 16 
1bb83     21 34 41 3A | 	byte	$ea, $e7, $ec, $ec, $e7, $f0, $f2, $01, $0e, $1b, $1c, $16, $21, $34, $41, $3a
1bb87     28 0B 00 F3 
1bb8b     F3 E3 E1 DE 
1bb8f     EE 09 0F 15 
1bb93     0B FD F3 EF | 	byte	$28, $0b, $00, $f3, $f3, $e3, $e1, $de, $ee, $09, $0f, $15, $0b, $fd, $f3, $ef
1bb97     E5 EC E8 E8 
1bb9b     E8 EB F3 FD 
1bb9f     0E 15 14 0F 
1bba3     21 2F 3C 33 | 	byte	$e5, $ec, $e8, $e8, $e8, $eb, $f3, $fd, $0e, $15, $14, $0f, $21, $2f, $3c, $33
1bba7     1F 08 FB F4 
1bbab     E9 E4 D7 DC 
1bbaf     F0 02 0D 14 
1bbb3     03 FD F4 E7 | 	byte	$1f, $08, $fb, $f4, $e9, $e4, $d7, $dc, $f0, $02, $0d, $14, $03, $fd, $f4, $e7
1bbb7     EA E8 E9 E5 
1bbbb     E8 EB F1 FF 
1bbbf     10 13 0E 12 
1bbc3     1F 34 38 33 | 	byte	$ea, $e8, $e9, $e5, $e8, $eb, $f1, $ff, $10, $13, $0e, $12, $1f, $34, $38, $33
1bbc7     19 0A FB F2 
1bbcb     EC DD D5 DE 
1bbcf     F0 00 11 0A 
1bbd3     04 FA EE E9 | 	byte	$19, $0a, $fb, $f2, $ec, $dd, $d5, $de, $f0, $00, $11, $0a, $04, $fa, $ee, $e9
1bbd7     E7 E7 E3 E5 
1bbdb     E5 EA ED 04 
1bbdf     0C 12 0C 13 
1bbe3     23 33 3D 2C | 	byte	$e7, $e7, $e3, $e5, $e5, $ea, $ed, $04, $0c, $12, $0c, $13, $23, $33, $3d, $2c
1bbe7     1E 08 FC F7 
1bbeb     EE DB DD DF 
1bbef     F4 09 0E 10 
1bbf3     05 FE EE EF | 	byte	$1e, $08, $fc, $f7, $ee, $db, $dd, $df, $f4, $09, $0e, $10, $05, $fe, $ee, $ef
1bbf7     E8 E9 E3 E8 
1bbfb     E6 E6 F4 03 
1bbff     10 0C 0E 13 
1bc03     28 38 3B 2F | 	byte	$e8, $e9, $e3, $e8, $e6, $e6, $f4, $03, $10, $0c, $0e, $13, $28, $38, $3b, $2f
1bc07     1F 09 04 FE 
1bc0b     EB E3 DA E6 
1bc0f     FA 0A 10 11 
1bc13     07 FC F2 EF | 	byte	$1f, $09, $04, $fe, $eb, $e3, $da, $e6, $fa, $0a, $10, $11, $07, $fc, $f2, $ef
1bc17     ED E5 EA E7 
1bc1b     E7 E7 F9 08 
1bc1f     0E 0F 0A 17 
1bc23     2B 38 3A 30 | 	byte	$ed, $e5, $ea, $e7, $e7, $e7, $f9, $08, $0e, $0f, $0a, $17, $2b, $38, $3a, $30
1bc27     16 0C 05 F8 
1bc2b     ED DD DA E5 
1bc2f     FA 05 11 0B 
1bc33     06 F5 F2 ED | 	byte	$16, $0c, $05, $f8, $ed, $dd, $da, $e5, $fa, $05, $11, $0b, $06, $f5, $f2, $ed
1bc37     E6 E7 E6 E6 
1bc3b     DF E8 F6 05 
1bc3f     0B 08 06 19 
1bc43     27 36 3A 23 | 	byte	$e6, $e7, $e6, $e6, $df, $e8, $f6, $05, $0b, $08, $06, $19, $27, $36, $3a, $23
1bc47     18 09 02 F5 
1bc4b     E9 D7 D9 E4 
1bc4f     F6 04 0B 0A 
1bc53     FC F8 F0 EC | 	byte	$18, $09, $02, $f5, $e9, $d7, $d9, $e4, $f6, $04, $0b, $0a, $fc, $f8, $f0, $ec
1bc57     E2 E9 E6 E1 
1bc5b     DF E8 F8 06 
1bc5f     07 01 0D 14 
1bc63     2B 39 33 25 | 	byte	$e2, $e9, $e6, $e1, $df, $e8, $f8, $06, $07, $01, $0d, $14, $2b, $39, $33, $25
1bc67     19 0C 05 FA 
1bc6b     E6 DD DB EB 
1bc6f     F7 09 0E 08 
1bc73     FF F9 F4 E8 | 	byte	$19, $0c, $05, $fa, $e6, $dd, $db, $eb, $f7, $09, $0e, $08, $ff, $f9, $f4, $e8
1bc77     E8 EB E6 E1 
1bc7b     E1 E9 00 06 
1bc7f     03 07 09 1B 
1bc83     2F 3A 30 29 | 	byte	$e8, $eb, $e6, $e1, $e1, $e9, $00, $06, $03, $07, $09, $1b, $2f, $3a, $30, $29
1bc87     16 12 08 F9 
1bc8b     E9 DB E2 E9 
1bc8f     FC 0A 0F 05 
1bc93     01 FB F1 E9 | 	byte	$16, $12, $08, $f9, $e9, $db, $e2, $e9, $fc, $0a, $0f, $05, $01, $fb, $f1, $e9
1bc97     EC EB E6 E3 
1bc9b     DD F4 FF 06 
1bc9f     06 06 0A 21 
1bca3     31 37 33 24 | 	byte	$ec, $eb, $e6, $e3, $dd, $f4, $ff, $06, $06, $06, $0a, $21, $31, $37, $33, $24
1bca7     1C 11 0A F7 
1bcab     E9 DE E2 EB 
1bcaf     00 0D 0B 08 
1bcb3     03 FC EE EF | 	byte	$1c, $11, $0a, $f7, $e9, $de, $e2, $eb, $00, $0d, $0b, $08, $03, $fc, $ee, $ef
1bcb7     EA ED E6 DB 
1bcbb     E2 F3 FD 05 
1bcbf     04 FF 10 1E 
1bcc3     33 34 2F 23 | 	byte	$ea, $ed, $e6, $db, $e2, $f3, $fd, $05, $04, $ff, $10, $1e, $33, $34, $2f, $23
1bcc7     19 13 05 F4 
1bccb     E5 DE DE ED 
1bccf     00 09 07 0A 
1bcd3     02 F8 F2 E9 | 	byte	$19, $13, $05, $f4, $e5, $de, $de, $ed, $00, $09, $07, $0a, $02, $f8, $f2, $e9
1bcd7     EF EB E1 DB 
1bcdb     E5 EE FE 01 
1bcdf     FD 01 0B 22 
1bce3     2F 33 2B 23 | 	byte	$ef, $eb, $e1, $db, $e5, $ee, $fe, $01, $fd, $01, $0b, $22, $2f, $33, $2b, $23
1bce7     1C 15 04 F6 
1bceb     E8 DE E2 F1 
1bcef     04 04 0E 07 
1bcf3     03 FB EF EE | 	byte	$1c, $15, $04, $f6, $e8, $de, $e2, $f1, $04, $04, $0e, $07, $03, $fb, $ef, $ee
1bcf7     F3 E9 DF E0 
1bcfb     E1 F6 FD 01 
1bcff     FC 02 10 24 
1bd03     31 32 2D 23 | 	byte	$f3, $e9, $df, $e0, $e1, $f6, $fd, $01, $fc, $02, $10, $24, $31, $32, $2d, $23
1bd07     20 14 06 F7 
1bd0b     E8 DC E7 F4 
1bd0f     FF 08 0A 0A 
1bd13     03 F9 ED F6 | 	byte	$20, $14, $06, $f7, $e8, $dc, $e7, $f4, $ff, $08, $0a, $0a, $03, $f9, $ed, $f6
1bd17     EC E9 DF DC 
1bd1b     E7 F5 00 FE 
1bd1f     FC 02 13 26 
1bd23     32 31 2C 27 | 	byte	$ec, $e9, $df, $dc, $e7, $f5, $00, $fe, $fc, $02, $13, $26, $32, $31, $2c, $27
1bd27     23 14 08 F9 
1bd2b     E0 E2 E7 F5 
1bd2f     00 07 09 0C 
1bd33     01 F3 F4 F1 | 	byte	$23, $14, $08, $f9, $e0, $e2, $e7, $f5, $00, $07, $09, $0c, $01, $f3, $f4, $f1
1bd37     EF E7 DD DC 
1bd3b     EA F7 FE FB 
1bd3f     FB 03 13 2A 
1bd43     2E 30 2B 2B | 	byte	$ef, $e7, $dd, $dc, $ea, $f7, $fe, $fb, $fb, $03, $13, $2a, $2e, $30, $2b, $2b
1bd47     1F 17 0A F3 
1bd4b     E4 E2 EA F6 
1bd4f     01 02 11 08 
1bd53     00 F5 F5 F3 | 	byte	$1f, $17, $0a, $f3, $e4, $e2, $ea, $f6, $01, $02, $11, $08, $00, $f5, $f5, $f3
1bd57     EF E6 DA E0 
1bd5b     EA FA FB FB 
1bd5f     F9 04 16 29 
1bd63     2B 2D 2E 25 | 	byte	$ef, $e6, $da, $e0, $ea, $fa, $fb, $fb, $f9, $04, $16, $29, $2b, $2d, $2e, $25
1bd67     21 17 08 F0 
1bd6b     E8 DF ED F6 
1bd6f     FB 09 0D 07 
1bd73     FE F7 F4 F3 | 	byte	$21, $17, $08, $f0, $e8, $df, $ed, $f6, $fb, $09, $0d, $07, $fe, $f7, $f4, $f3
1bd77     ED E3 DA E1 
1bd7b     EE F8 FB F8 
1bd7f     FA 03 1C 24 
1bd83     2B 2F 2B 25 | 	byte	$ed, $e3, $da, $e1, $ee, $f8, $fb, $f8, $fa, $03, $1c, $24, $2b, $2f, $2b, $25
1bd87     23 17 02 F2 
1bd8b     E1 E4 EB F1 
1bd8f     FC 09 0A 05 
1bd93     FD F5 F7 F2 | 	byte	$23, $17, $02, $f2, $e1, $e4, $eb, $f1, $fc, $09, $0a, $05, $fd, $f5, $f7, $f2
1bd97     EF DE DC E2 
1bd9b     F0 F8 F9 F6 
1bd9f     F8 0A 19 23 
1bda3     2B 2E 26 2B | 	byte	$ef, $de, $dc, $e2, $f0, $f8, $f9, $f6, $f8, $0a, $19, $23, $2b, $2e, $26, $2b
1bda7     21 17 03 ED 
1bdab     E5 E5 E9 ED 
1bdaf     FE 04 09 01 
1bdb3     FA F4 F6 F2 | 	byte	$21, $17, $03, $ed, $e5, $e5, $e9, $ed, $fe, $04, $09, $01, $fa, $f4, $f6, $f2
1bdb7     E9 DC D9 E4 
1bdbb     EC FA F3 F3 
1bdbf     F9 0C 15 24 
1bdc3     2A 26 2B 27 | 	byte	$e9, $dc, $d9, $e4, $ec, $fa, $f3, $f3, $f9, $0c, $15, $24, $2a, $26, $2b, $27
1bdc7     23 17 00 ED 
1bdcb     E8 E4 E8 EF 
1bdcf     FE 06 07 02 
1bdd3     F8 F9 F7 F6 | 	byte	$23, $17, $00, $ed, $e8, $e4, $e8, $ef, $fe, $06, $07, $02, $f8, $f9, $f7, $f6
1bdd7     E7 DF DE E6 
1bddb     F4 F9 F4 F5 
1bddf     00 09 1B 25 
1bde3     28 29 2A 29 | 	byte	$e7, $df, $de, $e6, $f4, $f9, $f4, $f5, $00, $09, $1b, $25, $28, $29, $2a, $29
1bde7     26 16 FD F3 
1bdeb     E7 E6 E7 F2 
1bdef     FE 07 08 00 
1bdf3     FA FA FD F2 | 	byte	$26, $16, $fd, $f3, $e7, $e6, $e7, $f2, $fe, $07, $08, $00, $fa, $fa, $fd, $f2
1bdf7     E9 DD E0 E8 
1bdfb     F9 F5 F4 FA 
1bdff     FD 0F 1B 26 
1be03     28 2B 29 2E | 	byte	$e9, $dd, $e0, $e8, $f9, $f5, $f4, $fa, $fd, $0f, $1b, $26, $28, $2b, $29, $2e
1be07     25 11 FE F1 
1be0b     E8 E4 E8 F1 
1be0f     00 05 09 FD 
1be13     FD FD FC F3 | 	byte	$25, $11, $fe, $f1, $e8, $e4, $e8, $f1, $00, $05, $09, $fd, $fd, $fd, $fc, $f3
1be17     E7 DE DD F0 
1be1b     F2 F4 F4 F5 
1be1f     FE 0E 18 24 
1be23     27 25 2C 2C | 	byte	$e7, $de, $dd, $f0, $f2, $f4, $f4, $f5, $fe, $0e, $18, $24, $27, $25, $2c, $2c
1be27     24 0C FF EE 
1be2b     E8 E1 E7 F1 
1be2f     FF 08 02 FD 
1be33     FD FF F9 F4 | 	byte	$24, $0c, $ff, $ee, $e8, $e1, $e7, $f1, $ff, $08, $02, $fd, $fd, $ff, $f9, $f4
1be37     E3 DC E5 ED 
1be3b     F2 F3 F2 F3 
1be3f     01 0B 1C 23 
1be43     24 28 2F 2E | 	byte	$e3, $dc, $e5, $ed, $f2, $f3, $f2, $f3, $01, $0b, $1c, $23, $24, $28, $2f, $2e
1be47     21 10 FF F3 
1be4b     E7 E7 E7 F6 
1be4f     02 08 02 00 
1be53     01 FD 01 F1 | 	byte	$21, $10, $ff, $f3, $e7, $e7, $e7, $f6, $02, $08, $02, $00, $01, $fd, $01, $f1
1be57     E3 E0 E8 EE 
1be5b     F6 F2 F2 F6 
1be5f     FF 0F 1C 23 
1be63     1F 2C 2D 2F | 	byte	$e3, $e0, $e8, $ee, $f6, $f2, $f2, $f6, $ff, $0f, $1c, $23, $1f, $2c, $2d, $2f
1be67     1E 0F FF F1 
1be6b     E9 E2 E8 F6 
1be6f     04 01 02 FF 
1be73     FE 00 FE ED | 	byte	$1e, $0f, $ff, $f1, $e9, $e2, $e8, $f6, $04, $01, $02, $ff, $fe, $00, $fe, $ed
1be77     E3 E2 E5 F1 
1be7b     EF F1 F0 F5 
1be7f     FE 11 1A 1E 
1be83     21 2A 30 2B | 	byte	$e3, $e2, $e5, $f1, $ef, $f1, $f0, $f5, $fe, $11, $1a, $1e, $21, $2a, $30, $2b
1be87     1F 0E 00 F2 
1be8b     EB E2 EB FD 
1be8f     00 06 01 00 
1be93     00 06 FA EF | 	byte	$1f, $0e, $00, $f2, $eb, $e2, $eb, $fd, $00, $06, $01, $00, $00, $06, $fa, $ef
1be97     E4 E2 EB F0 
1be9b     F0 F2 F1 F3 
1be9f     02 0F 1B 1C 
1bea3     23 2C 31 2D | 	byte	$e4, $e2, $eb, $f0, $f0, $f2, $f1, $f3, $02, $0f, $1b, $1c, $23, $2c, $31, $2d
1bea7     1E 10 00 FA 
1beab     E8 E7 F1 FC 
1beaf     03 07 00 00 
1beb3     07 02 FC EC | 	byte	$1e, $10, $00, $fa, $e8, $e7, $f1, $fc, $03, $07, $00, $00, $07, $02, $fc, $ec
1beb7     E4 E2 ED EB 
1bebb     F2 EF ED F5 
1bebf     02 13 16 1D 
1bec3     23 30 30 2E | 	byte	$e4, $e2, $ed, $eb, $f2, $ef, $ed, $f5, $02, $13, $16, $1d, $23, $30, $30, $2e
1bec7     1D 0F 05 F5 
1becb     E9 E9 F2 FB 
1becf     08 00 00 02 
1bed3     06 02 FA E9 | 	byte	$1d, $0f, $05, $f5, $e9, $e9, $f2, $fb, $08, $00, $00, $02, $06, $02, $fa, $e9
1bed7     E4 E5 E8 EE 
1bedb     EF ED EA F6 
1bedf     03 11 14 1A 
1bee3     26 2B 32 26 | 	byte	$e4, $e5, $e8, $ee, $ef, $ed, $ea, $f6, $03, $11, $14, $1a, $26, $2b, $32, $26
1bee7     1A 10 01 F0 
1beeb     E9 E7 F0 FE 
1beef     01 FE FF 02 
1bef3     04 03 F3 E9 | 	byte	$1a, $10, $01, $f0, $e9, $e7, $f0, $fe, $01, $fe, $ff, $02, $04, $03, $f3, $e9
1bef7     E3 E3 E9 ED 
1befb     F0 E8 EC F5 
1beff     07 0D 14 1B 
1bf03     24 30 30 24 | 	byte	$e3, $e3, $e9, $ed, $f0, $e8, $ec, $f5, $07, $0d, $14, $1b, $24, $30, $30, $24
1bf07     1C 12 FE F4 
1bf0b     E6 E8 F2 FF 
1bf0f     FF 00 00 03 
1bf13     08 00 F6 E9 | 	byte	$1c, $12, $fe, $f4, $e6, $e8, $f2, $ff, $ff, $00, $00, $03, $08, $00, $f6, $e9
1bf17     E5 E4 EC EE 
1bf1b     EF E8 ED FC 
1bf1f     03 0F 12 1B 
1bf23     26 33 2A 28 | 	byte	$e5, $e4, $ec, $ee, $ef, $e8, $ed, $fc, $03, $0f, $12, $1b, $26, $33, $2a, $28
1bf27     1E 10 00 F2 
1bf2b     E5 EB F7 FD 
1bf2f     00 FD 01 06 
1bf33     08 FF F5 EA | 	byte	$1e, $10, $00, $f2, $e5, $eb, $f7, $fd, $00, $fd, $01, $06, $08, $ff, $f5, $ea
1bf37     E3 E7 EA F1 
1bf3b     E8 E7 EE FA 
1bf3f     04 0D 0F 1C 
1bf43     2B 2E 2D 28 | 	byte	$e3, $e7, $ea, $f1, $e8, $e7, $ee, $fa, $04, $0d, $0f, $1c, $2b, $2e, $2d, $28
1bf47     1E 10 03 EE 
1bf4b     E9 ED F5 FF 
1bf4f     FC FE 01 09 
1bf53     04 FF F2 E9 | 	byte	$1e, $10, $03, $ee, $e9, $ed, $f5, $ff, $fc, $fe, $01, $09, $04, $ff, $f2, $e9
1bf57     E3 E6 EF EC 
1bf5b     E7 E7 EE F8 
1bf5f     07 05 0F 1E 
1bf63     28 2C 2D 27 | 	byte	$e3, $e6, $ef, $ec, $e7, $e7, $ee, $f8, $07, $05, $0f, $1e, $28, $2c, $2d, $27
1bf67     1D 13 FD F0 
1bf6b     E8 EE F7 FD 
1bf6f     FA FE 03 07 
1bf73     06 FB F5 E6 | 	byte	$1d, $13, $fd, $f0, $e8, $ee, $f7, $fd, $fa, $fe, $03, $07, $06, $fb, $f5, $e6
1bf77     E5 E9 EF E9 
1bf7b     E7 E5 ED FC 
1bf7f     00 05 11 1F 
1bf83     26 2F 2A 28 | 	byte	$e5, $e9, $ef, $e9, $e7, $e5, $ed, $fc, $00, $05, $11, $1f, $26, $2f, $2a, $28
1bf87     1F 11 FE EE 
1bf8b     EA EE F9 F7 
1bf8f     FB FC 04 06 
1bf93     03 FD F1 E3 | 	byte	$1f, $11, $fe, $ee, $ea, $ee, $f9, $f7, $fb, $fc, $04, $06, $03, $fd, $f1, $e3
1bf97     E6 EB EB EB 
1bf9b     E3 E5 F1 FB 
1bf9f     FD 06 12 1D 
1bfa3     2B 2C 2C 29 | 	byte	$e6, $eb, $eb, $eb, $e3, $e5, $f1, $fb, $fd, $06, $12, $1d, $2b, $2c, $2c, $29
1bfa7     21 10 FF EE 
1bfab     ED F3 F7 F9 
1bfaf     F9 00 04 06 
1bfb3     03 FF EC E7 | 	byte	$21, $10, $ff, $ee, $ed, $f3, $f7, $f9, $f9, $00, $04, $06, $03, $ff, $ec, $e7
1bfb7     E9 EA F0 E8 
1bfbb     E3 E9 F6 F8 
1bfbf     00 06 13 20 
1bfc3     2A 2B 2D 2B | 	byte	$e9, $ea, $f0, $e8, $e3, $e9, $f6, $f8, $00, $06, $13, $20, $2a, $2b, $2d, $2b
1bfc7     1F 13 FA F1 
1bfcb     ED F5 F7 F8 
1bfcf     FA 01 03 06 
1bfd3     06 F8 ED E7 | 	byte	$1f, $13, $fa, $f1, $ed, $f5, $f7, $f8, $fa, $01, $03, $06, $06, $f8, $ed, $e7
1bfd7     E8 EC EF E3 
1bfdb     E5 EC F2 F9 
1bfdf     FE 07 12 22 
1bfe3     26 2C 2B 2B | 	byte	$e8, $ec, $ef, $e3, $e5, $ec, $f2, $f9, $fe, $07, $12, $22, $26, $2c, $2b, $2b
1bfe7     21 0E FB F0 
1bfeb     F0 F5 F5 F6 
1bfef     FE FE 05 09 
1bff3     02 F7 EC E6 | 	byte	$21, $0e, $fb, $f0, $f0, $f5, $f5, $f6, $fe, $fe, $05, $09, $02, $f7, $ec, $e6
1bff7     E9 F0 E8 E5 
1bffb     E6 ED F2 F9 
1bfff     FC 07 15 1F 
1c003     28 28 2D 2A | 	byte	$e9, $f0, $e8, $e5, $e6, $ed, $f2, $f9, $fc, $07, $15, $1f, $28, $28, $2d, $2a
1c007     1F 0A FA F0 
1c00b     F2 F3 F1 F9 
1c00f     F9 FF 05 08 
1c013     00 F8 E9 E8 | 	byte	$1f, $0a, $fa, $f0, $f2, $f3, $f1, $f9, $f9, $ff, $05, $08, $00, $f8, $e9, $e8
1c017     EE EE E8 E5 
1c01b     E9 EC F6 F5 
1c01f     FF 07 15 20 
1c023     25 2A 2E 2B | 	byte	$ee, $ee, $e8, $e5, $e9, $ec, $f6, $f5, $ff, $07, $15, $20, $25, $2a, $2e, $2b
1c027     1E 0B F6 F6 
1c02b     F1 F2 F4 F9 
1c02f     F8 01 07 06 
1c033     04 F3 EB EA | 	byte	$1e, $0b, $f6, $f6, $f1, $f2, $f4, $f9, $f8, $01, $07, $06, $04, $f3, $eb, $ea
1c037     F2 EC EA E5 
1c03b     EA F0 F3 F7 
1c03f     FF 0A 17 21 
1c043     24 2D 2F 2E | 	byte	$f2, $ec, $ea, $e5, $ea, $f0, $f3, $f7, $ff, $0a, $17, $21, $24, $2d, $2f, $2e
1c047     1F 08 FE F7 
1c04b     F3 F4 F7 F5 
1c04f     FC 01 07 08 
1c053     01 F1 EB EF | 	byte	$1f, $08, $fe, $f7, $f3, $f4, $f7, $f5, $fc, $01, $07, $08, $01, $f1, $eb, $ef
1c057     EE EE E6 E7 
1c05b     EB F0 F3 F7 
1c05f     FF 0B 19 1D 
1c063     27 2A 33 2C | 	byte	$ee, $ee, $e6, $e7, $eb, $f0, $f3, $f7, $ff, $0b, $19, $1d, $27, $2a, $33, $2c
1c067     1A 08 FF F3 
1c06b     F3 F4 F3 F7 
1c06f     F9 01 07 0A 
1c073     FB F1 EE EF | 	byte	$1a, $08, $ff, $f3, $f3, $f4, $f3, $f7, $f9, $01, $07, $0a, $fb, $f1, $ee, $ef
1c077     F0 EB E6 E7 
1c07b     EB EE F3 F3 
1c07f     00 0A 16 1E 
1c083     22 2C 32 29 | 	byte	$f0, $eb, $e6, $e7, $eb, $ee, $f3, $f3, $00, $0a, $16, $1e, $22, $2c, $32, $29
1c087     16 0B FB F6 
1c08b     F2 F4 F3 F7 
1c08f     F8 02 0B 06 
1c093     FB F0 EF F0 | 	byte	$16, $0b, $fb, $f6, $f2, $f4, $f3, $f7, $f8, $02, $0b, $06, $fb, $f0, $ef, $f0
1c097     F1 E8 E8 E7 
1c09b     EC F0 EE F6 
1c09f     FF 0C 16 1B 
1c0a3     22 30 2F 27 | 	byte	$f1, $e8, $e8, $e7, $ec, $f0, $ee, $f6, $ff, $0c, $16, $1b, $22, $30, $2f, $27
1c0a7     19 09 FD F7 
1c0ab     F4 F1 F5 F2 
1c0af     FA 05 09 04 
1c0b3     F9 F0 F0 F3 | 	byte	$19, $09, $fd, $f7, $f4, $f1, $f5, $f2, $fa, $05, $09, $04, $f9, $f0, $f0, $f3
1c0b7     EE EB E5 EA 
1c0bb     ED EE EF F5 
1c0bf     FF 0D 14 17 
1c0c3     28 2E 30 26 | 	byte	$ee, $eb, $e5, $ea, $ed, $ee, $ef, $f5, $ff, $0d, $14, $17, $28, $2e, $30, $26
1c0c7     19 06 FE F6 
1c0cb     F3 F5 F1 F2 
1c0cf     FB 06 08 04 
1c0d3     F5 F3 F1 F2 | 	byte	$19, $06, $fe, $f6, $f3, $f5, $f1, $f2, $fb, $06, $08, $04, $f5, $f3, $f1, $f2
1c0d7     EF E7 E7 E9 
1c0db     EC EC EF F1 
1c0df     03 0A 10 19 
1c0e3     26 2C 2E 26 | 	byte	$ef, $e7, $e7, $e9, $ec, $ec, $ef, $f1, $03, $0a, $10, $19, $26, $2c, $2e, $26
1c0e7     14 09 FC F6 
1c0eb     F4 F4 EE F3 
1c0ef     FC 06 09 FE 
1c0f3     F8 F2 F3 F2 | 	byte	$14, $09, $fc, $f6, $f4, $f4, $ee, $f3, $fc, $06, $09, $fe, $f8, $f2, $f3, $f2
1c0f7     EC E6 E9 E7 
1c0fb     ED EB EA F7 
1c0ff     01 09 0E 1C 
1c103     24 2E 2E 23 | 	byte	$ec, $e6, $e9, $e7, $ed, $eb, $ea, $f7, $01, $09, $0e, $1c, $24, $2e, $2e, $23
1c107     16 08 FD F8 
1c10b     F7 F1 F1 F1 
1c10f     00 08 07 00 
1c113     F7 F4 F5 F2 | 	byte	$16, $08, $fd, $f8, $f7, $f1, $f1, $f1, $00, $08, $07, $00, $f7, $f4, $f5, $f2
1c117     EA EA E5 EC 
1c11b     EC E8 EC F8 
1c11f     01 07 12 1A 
1c123     27 2F 2E 23 | 	byte	$ea, $ea, $e5, $ec, $ec, $e8, $ec, $f8, $01, $07, $12, $1a, $27, $2f, $2e, $23
1c127     19 06 00 FA 
1c12b     F6 F3 EC F6 
1c12f     00 09 05 FF 
1c133     F4 F8 F3 EF | 	byte	$19, $06, $00, $fa, $f6, $f3, $ec, $f6, $00, $09, $05, $ff, $f4, $f8, $f3, $ef
1c137     EB E5 E8 EB 
1c13b     E8 E4 EF F6 
1c13f     00 06 10 1A 
1c143     28 2E 2C 26 | 	byte	$eb, $e5, $e8, $eb, $e8, $e4, $ef, $f6, $00, $06, $10, $1a, $28, $2e, $2c, $26
1c147     13 09 FF FC 
1c14b     F8 F1 EE F9 
1c14f     01 09 04 FB 
1c153     FB F5 F5 F0 | 	byte	$13, $09, $ff, $fc, $f8, $f1, $ee, $f9, $01, $09, $04, $fb, $fb, $f5, $f5, $f0
1c157     EA E6 EC EB 
1c15b     E5 E9 EE F8 
1c15f     00 07 0E 1F 
1c163     27 2F 2E 23 | 	byte	$ea, $e6, $ec, $eb, $e5, $e9, $ee, $f8, $00, $07, $0e, $1f, $27, $2f, $2e, $23
1c167     15 06 00 FD 
1c16b     F7 ED F1 F6 
1c16f     05 07 00 FD 
1c173     F9 F8 F6 F0 | 	byte	$15, $06, $00, $fd, $f7, $ed, $f1, $f6, $05, $07, $00, $fd, $f9, $f8, $f6, $f0
1c177     E8 EC EB EA 
1c17b     E6 EA EE F9 
1c17f     00 04 12 1B 
1c183     29 2E 2E 22 | 	byte	$e8, $ec, $eb, $ea, $e6, $ea, $ee, $f9, $00, $04, $12, $1b, $29, $2e, $2e, $22
1c187     14 07 04 FD 
1c18b     F5 F0 EE FD 
1c18f     05 07 01 FF 
1c193     F8 FC F6 ED | 	byte	$14, $07, $04, $fd, $f5, $f0, $ee, $fd, $05, $07, $01, $ff, $f8, $fc, $f6, $ed
1c197     EB EC EC E7 
1c19b     E8 E7 F2 F7 
1c19f     FE 05 10 1B 
1c1a3     29 2E 2D 20 | 	byte	$eb, $ec, $ec, $e7, $e8, $e7, $f2, $f7, $fe, $05, $10, $1b, $29, $2e, $2d, $20
1c1a7     0F 0B 02 FE 
1c1ab     F4 EC F1 FD 
1c1af     03 05 01 FA 
1c1b3     FB FA F3 EB | 	byte	$0f, $0b, $02, $fe, $f4, $ec, $f1, $fd, $03, $05, $01, $fa, $fb, $fa, $f3, $eb
1c1b7     ED EA EA E7 
1c1bb     E3 EA F0 F7 
1c1bf     FE 06 0F 1E 
1c1c3     27 32 2C 1D | 	byte	$ed, $ea, $ea, $e7, $e3, $ea, $f0, $f7, $fe, $06, $0f, $1e, $27, $32, $2c, $1d
1c1c7     14 09 06 FE 
1c1cb     F3 EC F7 FC 
1c1cf     06 04 00 FC 
1c1d3     FE FA F0 F0 | 	byte	$14, $09, $06, $fe, $f3, $ec, $f7, $fc, $06, $04, $00, $fc, $fe, $fa, $f0, $f0
1c1d7     EA ED EA E6 
1c1db     E6 EB F0 F9 
1c1df     FE 06 12 1C 
1c1e3     2D 30 2B 1E | 	byte	$ea, $ed, $ea, $e6, $e6, $eb, $f0, $f9, $fe, $06, $12, $1c, $2d, $30, $2b, $1e
1c1e7     14 0C 09 FD 
1c1eb     F2 F1 F5 00 
1c1ef     05 04 FE 00 
1c1f3     FE F9 F3 EF | 	byte	$14, $0c, $09, $fd, $f2, $f1, $f5, $00, $05, $04, $fe, $00, $fe, $f9, $f3, $ef
1c1f7     EE EE EA E6 
1c1fb     E9 E9 F4 F6 
1c1ff     00 06 0F 1F 
1c203     2C 2F 29 1D | 	byte	$ee, $ee, $ea, $e6, $e9, $e9, $f4, $f6, $00, $06, $0f, $1f, $2c, $2f, $29, $1d
1c207     12 10 06 FB 
1c20b     F1 F1 F6 01 
1c20f     05 00 00 FF 
1c213     FD F7 F2 EE | 	byte	$12, $10, $06, $fb, $f1, $f1, $f6, $01, $05, $00, $00, $ff, $fd, $f7, $f2, $ee
1c217     EF EB E8 E6 
1c21b     E5 EC EE F7 
1c21f     FE 03 0E 20 
1c223     29 2F 25 1A | 	byte	$ef, $eb, $e8, $e6, $e5, $ec, $ee, $f7, $fe, $03, $0e, $20, $29, $2f, $25, $1a
1c227     16 10 06 F9 
1c22b     F3 EE FA 00 
1c22f     01 00 00 00 
1c233     FD F7 F0 F2 | 	byte	$16, $10, $06, $f9, $f3, $ee, $fa, $00, $01, $00, $00, $00, $fd, $f7, $f0, $f2
1c237     EC EE E6 E6 
1c23b     E8 EB F0 F9 
1c23f     FD 03 12 1E 
1c243     2E 2C 24 1B | 	byte	$ec, $ee, $e6, $e6, $e8, $eb, $f0, $f9, $fd, $03, $12, $1e, $2e, $2c, $24, $1b
1c247     19 0F 05 FA 
1c24b     EF F2 FB 00 
1c24f     00 00 FE 01 
1c253     FB F6 F2 EF | 	byte	$19, $0f, $05, $fa, $ef, $f2, $fb, $00, $00, $00, $fe, $01, $fb, $f6, $f2, $ef
1c257     F0 EA E6 E6 
1c25b     E7 E9 F4 F5 
1c25f     FD 03 10 22 
1c263     2D 2B 22 1F | 	byte	$f0, $ea, $e6, $e6, $e7, $e9, $f4, $f5, $fd, $03, $10, $22, $2d, $2b, $22, $1f
1c267     17 12 05 F8 
1c26b     F0 F5 FB 00 
1c26f     00 FF 03 00 
1c273     FC F6 F3 F2 | 	byte	$17, $12, $05, $f8, $f0, $f5, $fb, $00, $00, $ff, $03, $00, $fc, $f6, $f3, $f2
1c277     F0 E9 E9 E6 
1c27b     E6 EE F0 F8 
1c27f     FA 03 10 24 
1c283     2A 28 24 1D | 	byte	$f0, $e9, $e9, $e6, $e6, $ee, $f0, $f8, $fa, $03, $10, $24, $2a, $28, $24, $1d
1c287     19 12 04 F5 
1c28b     F4 F4 FF FE 
1c28f     FF 00 01 00 
1c293     FB F5 F4 F4 | 	byte	$19, $12, $04, $f5, $f4, $f4, $ff, $fe, $ff, $00, $01, $00, $fb, $f5, $f4, $f4
1c297     EC ED E6 E6 
1c29b     E7 ED F1 F6 
1c29f     F9 00 14 22 
1c2a3     29 26 23 1C | 	byte	$ec, $ed, $e6, $e6, $e7, $ed, $f1, $f6, $f9, $00, $14, $22, $29, $26, $23, $1c
1c2a7     1D 10 02 F7 
1c2ab     F2 F9 FC FE 
1c2af     FF 01 01 01 
1c2b3     F8 F7 F5 F1 | 	byte	$1d, $10, $02, $f7, $f2, $f9, $fc, $fe, $ff, $01, $01, $01, $f8, $f7, $f5, $f1
1c2b7     F0 EB E8 E6 
1c2bb     E9 EB F3 F5 
1c2bf     F7 03 15 22 
1c2c3     29 27 1F 21 | 	byte	$f0, $eb, $e8, $e6, $e9, $eb, $f3, $f5, $f7, $03, $15, $22, $29, $27, $1f, $21
1c2c7     1B 11 00 F5 
1c2cb     F4 F9 FA FD 
1c2cf     FF 00 04 FC 
1c2d3     FB F6 F4 F1 | 	byte	$1b, $11, $00, $f5, $f4, $f9, $fa, $fd, $ff, $00, $04, $fc, $fb, $f6, $f4, $f1
1c2d7     EF EA E7 E7 
1c2db     E7 EF F1 F3 
1c2df     F6 06 13 23 
1c2e3     26 23 22 20 | 	byte	$ef, $ea, $e7, $e7, $e7, $ef, $f1, $f3, $f6, $06, $13, $23, $26, $23, $22, $20
1c2e7     1C 0E FF F5 
1c2eb     F7 F7 FD FB 
1c2ef     00 03 01 FE 
1c2f3     FA F8 F4 F5 | 	byte	$1c, $0e, $ff, $f5, $f7, $f7, $fd, $fb, $00, $03, $01, $fe, $fa, $f8, $f4, $f5
1c2f7     EE ED E8 E7 
1c2fb     EA F2 F1 F1 
1c2ff     F9 04 17 22 
1c303     25 22 23 22 | 	byte	$ee, $ed, $e8, $e7, $ea, $f2, $f1, $f1, $f9, $04, $17, $22, $25, $22, $23, $22
1c307     1E 0B 00 F8 
1c30b     F6 FB FA FD 
1c30f     00 03 00 00 
1c313     FA F8 F8 F4 | 	byte	$1e, $0b, $00, $f8, $f6, $fb, $fa, $fd, $00, $03, $00, $00, $fa, $f8, $f8, $f4
1c317     F1 ED E9 E7 
1c31b     EF F0 F1 F2 
1c31f     F8 07 17 21 
1c323     23 22 23 26 | 	byte	$f1, $ed, $e9, $e7, $ef, $f0, $f1, $f2, $f8, $07, $17, $21, $23, $22, $23, $26
1c327     19 0C FF F8 
1c32b     F9 F9 F9 FD 
1c32f     01 00 03 FD 
1c333     FC F8 F8 F2 | 	byte	$19, $0c, $ff, $f8, $f9, $f9, $f9, $fd, $01, $00, $03, $fd, $fc, $f8, $f8, $f2
1c337     F2 EB E6 EB 
1c33b     ED F0 EE F0 
1c33f     F8 08 15 21 
1c343     1F 21 25 22 | 	byte	$f2, $eb, $e6, $eb, $ed, $f0, $ee, $f0, $f8, $08, $15, $21, $1f, $21, $25, $22
1c347     1A 09 FF F9 
1c34b     FB F6 FB FD 
1c34f     00 02 01 FD 
1c353     FB FA F5 F7 | 	byte	$1a, $09, $ff, $f9, $fb, $f6, $fb, $fd, $00, $02, $01, $fd, $fb, $fa, $f5, $f7
1c357     F0 EA E7 EB 
1c35b     EE F0 ED F0 
1c35f     FB 08 1A 1C 
1c363     20 22 26 23 | 	byte	$f0, $ea, $e7, $eb, $ee, $f0, $ed, $f0, $fb, $08, $1a, $1c, $20, $22, $26, $23
1c367     19 07 00 FD 
1c36b     F8 F9 FA FE 
1c36f     00 03 FF 00 
1c373     FC F8 F8 F6 | 	byte	$19, $07, $00, $fd, $f8, $f9, $fa, $fe, $00, $03, $ff, $00, $fc, $f8, $f8, $f6
1c377     F0 E9 E9 EA 
1c37b     F1 ED EE F0 
1c37f     FB 0D 17 1C 
1c383     1F 24 26 26 | 	byte	$f0, $e9, $e9, $ea, $f1, $ed, $ee, $f0, $fb, $0d, $17, $1c, $1f, $24, $26, $26
1c387     15 09 00 FC 
1c38b     F9 F9 FA FE 
1c38f     03 00 02 FF 
1c393     FB F9 FA F5 | 	byte	$15, $09, $00, $fc, $f9, $f9, $fa, $fe, $03, $00, $02, $ff, $fb, $f9, $fa, $f5
1c397     F0 E9 E8 EE 
1c39b     ED F0 EA F1 
1c39f     FD 0F 15 1D 
1c3a3     1E 25 2A 22 | 	byte	$f0, $e9, $e8, $ee, $ed, $f0, $ea, $f1, $fd, $0f, $15, $1d, $1e, $25, $2a, $22
1c3a7     15 0A 02 FC 
1c3ab     FC F8 FC 00 
1c3af     01 02 02 FE 
1c3b3     FA FC F9 F8 | 	byte	$15, $0a, $02, $fc, $fc, $f8, $fc, $00, $01, $02, $02, $fe, $fa, $fc, $f9, $f8
1c3b7     ED EA EA EE 
1c3bb     EF ED E9 F1 
1c3bf     FF 0B 16 18 
1c3c3     1E 26 29 1E | 	byte	$ed, $ea, $ea, $ee, $ef, $ed, $e9, $f1, $ff, $0b, $16, $18, $1e, $26, $29, $1e
1c3c7     15 09 00 FE 
1c3cb     F7 F8 FB FF 
1c3cf     FF 04 00 FE 
1c3d3     FB FB FC F5 | 	byte	$15, $09, $00, $fe, $f7, $f8, $fb, $ff, $ff, $04, $00, $fe, $fb, $fb, $fc, $f5
1c3d7     EE EA EC EE 
1c3db     F1 E9 EB F2 
1c3df     00 0D 12 17 
1c3e3     1F 28 25 20 | 	byte	$ee, $ea, $ec, $ee, $f1, $e9, $eb, $f2, $00, $0d, $12, $17, $1f, $28, $25, $20
1c3e7     13 08 02 FC 
1c3eb     F7 F9 FB FC 
1c3ef     01 00 01 FB 
1c3f3     FD FC FC F4 | 	byte	$13, $08, $02, $fc, $f7, $f9, $fb, $fc, $01, $00, $01, $fb, $fd, $fc, $fc, $f4
1c3f7     EE E9 EC F1 
1c3fb     EC EA E9 F3 
1c3ff     00 0C 0E 17 
1c403     20 25 26 1D | 	byte	$ee, $e9, $ec, $f1, $ec, $ea, $e9, $f3, $00, $0c, $0e, $17, $20, $25, $26, $1d
1c407     12 09 03 FA 
1c40b     FC F7 FB FD 
1c40f     00 02 FF FC 
1c413     FC FD F9 F5 | 	byte	$12, $09, $03, $fa, $fc, $f7, $fb, $fd, $00, $02, $ff, $fc, $fc, $fd, $f9, $f5
1c417     EB EB EE EF 
1c41b     EC E9 E9 F3 
1c41f     01 07 0F 17 
1c423     20 27 26 1C | 	byte	$eb, $eb, $ee, $ef, $ec, $e9, $e9, $f3, $01, $07, $0f, $17, $20, $27, $26, $1c
1c427     14 0B 01 FE 
1c42b     FA FB FB FF 
1c42f     01 03 FE FE 
1c433     FE FD FC F1 | 	byte	$14, $0b, $01, $fe, $fa, $fb, $fb, $ff, $01, $03, $fe, $fe, $fe, $fd, $fc, $f1
1c437     EC EC EF EE 
1c43b     ED E6 EB F7 
1c43f     00 07 0E 17 
1c443     20 28 22 1E | 	byte	$ec, $ec, $ef, $ee, $ed, $e6, $eb, $f7, $00, $07, $0e, $17, $20, $28, $22, $1e
1c447     13 0B 02 FE 
1c44b     FC FB FB FF 
1c44f     03 00 00 FD 
1c453     FE FF FA F1 | 	byte	$13, $0b, $02, $fe, $fc, $fb, $fb, $ff, $03, $00, $00, $fd, $fe, $ff, $fa, $f1
1c457     ED ED EF F1 
1c45b     E8 E7 EC F7 
1c45f     FE 07 0B 17 
1c463     21 24 23 1C | 	byte	$ed, $ed, $ef, $f1, $e8, $e7, $ec, $f7, $fe, $07, $0b, $17, $21, $24, $23, $1c
1c467     13 09 03 FE 
1c46b     FD F9 FC 00 
1c46f     01 00 FE FD 
1c473     FF FF F7 F2 | 	byte	$13, $09, $03, $fe, $fd, $f9, $fc, $00, $01, $00, $fe, $fd, $ff, $ff, $f7, $f2
1c477     EC ED F0 EE 
1c47b     E7 E7 ED F6 
1c47f     FF 03 0D 17 
1c483     20 24 23 1C | 	byte	$ec, $ed, $f0, $ee, $e7, $e7, $ed, $f6, $ff, $03, $0d, $17, $20, $24, $23, $1c
1c487     13 09 02 00 
1c48b     FA FA FD 00 
1c48f     01 01 FE FF 
1c493     00 FD F9 F0 | 	byte	$13, $09, $02, $00, $fa, $fa, $fd, $00, $01, $01, $fe, $ff, $00, $fd, $f9, $f0
1c497     ED EF F2 EB 
1c49b     E9 E6 EE F7 
1c49f     FD 04 0D 18 
1c4a3     20 25 22 1E | 	byte	$ed, $ef, $f2, $eb, $e9, $e6, $ee, $f7, $fd, $04, $0d, $18, $20, $25, $22, $1e
1c4a7     12 0A 05 00 
1c4ab     FB FB FD 00 
1c4af     04 FF 00 00 
1c4b3     00 FE F9 EF | 	byte	$12, $0a, $05, $00, $fb, $fb, $fd, $00, $04, $ff, $00, $00, $00, $fe, $f9, $ef
1c4b7     F0 F2 F0 ED 
1c4bb     E7 E9 EF F7 
1c4bf     FC 04 0D 19 
1c4c3     20 24 24 1B | 	byte	$f0, $f2, $f0, $ed, $e7, $e9, $ef, $f7, $fc, $04, $0d, $19, $20, $24, $24, $1b
1c4c7     12 0A 05 FE 
1c4cb     FD FA FD 01 
1c4cf     00 FF FF 00 
1c4d3     00 FF F4 F0 | 	byte	$12, $0a, $05, $fe, $fd, $fa, $fd, $01, $00, $ff, $ff, $00, $00, $ff, $f4, $f0
1c4d7     F0 F1 F0 EA 
1c4db     E6 E9 EF F5 
1c4df     FC 02 0E 17 
1c4e3     1F 25 22 19 | 	byte	$f0, $f1, $f0, $ea, $e6, $e9, $ef, $f5, $fc, $02, $0e, $17, $1f, $25, $22, $19
1c4e7     12 0B 04 00 
1c4eb     FB FB FF 01 
1c4ef     00 00 FE 00 
1c4f3     01 FC F5 F0 | 	byte	$12, $0b, $04, $00, $fb, $fb, $ff, $01, $00, $00, $fe, $00, $01, $fc, $f5, $f0
1c4f7     F1 F1 EF E8 
1c4fb     E7 E9 EF F5 
1c4ff     FA 03 0D 17 
1c503     1F 26 1F 1A | 	byte	$f1, $f1, $ef, $e8, $e7, $e9, $ef, $f5, $fa, $03, $0d, $17, $1f, $26, $1f, $1a
1c507     11 0B 05 00 
1c50b     FA FD 00 00 
1c50f     01 FE 00 01 
1c513     01 FC F5 F1 | 	byte	$11, $0b, $05, $00, $fa, $fd, $00, $00, $01, $fe, $00, $01, $01, $fc, $f5, $f1
1c517     F2 F3 EE EA 
1c51b     E6 EB EF F5 
1c51f     FB 04 0C 17 
1c523     21 23 20 19 | 	byte	$f2, $f3, $ee, $ea, $e6, $eb, $ef, $f5, $fb, $04, $0c, $17, $21, $23, $20, $19
1c527     12 0D 06 FE 
1c52b     FD FD 00 01 
1c52f     00 FF 00 02 
1c533     00 FC F4 F3 | 	byte	$12, $0d, $06, $fe, $fd, $fd, $00, $01, $00, $ff, $00, $02, $00, $fc, $f4, $f3
1c537     F3 F1 EE E8 
1c53b     E7 EB EE F3 
1c53f     FC 01 0C 18 
1c543     20 22 1F 17 | 	byte	$f3, $f1, $ee, $e8, $e7, $eb, $ee, $f3, $fc, $01, $0c, $18, $20, $22, $1f, $17
1c547     13 0D 03 00 
1c54b     FC FE 00 00 
1c54f     FF 00 00 02 
1c553     00 F9 F6 F3 | 	byte	$13, $0d, $03, $00, $fc, $fe, $00, $00, $ff, $00, $00, $02, $00, $f9, $f6, $f3
1c557     F4 F1 ED E8 
1c55b     E9 EA EE F5 
1c55f     FA 01 0C 18 
1c563     1F 22 1C 18 | 	byte	$f4, $f1, $ed, $e8, $e9, $ea, $ee, $f5, $fa, $01, $0c, $18, $1f, $22, $1c, $18
1c567     13 0C 04 00 
1c56b     FD FE 00 00 
1c56f     00 FF 02 02 
1c573     00 F9 F6 F4 | 	byte	$13, $0c, $04, $00, $fd, $fe, $00, $00, $00, $ff, $02, $02, $00, $f9, $f6, $f4
1c577     F4 F1 EC EA 
1c57b     E9 EA EF F4 
1c57f     F9 02 0C 18 
1c583     21 1F 1D 19 | 	byte	$f4, $f1, $ec, $ea, $e9, $ea, $ef, $f4, $f9, $02, $0c, $18, $21, $1f, $1d, $19
1c587     13 0C 05 FF 
1c58b     FE FF 00 00 
1c58f     FF 00 02 02 
1c593     FF FA F4 F5 | 	byte	$13, $0c, $05, $ff, $fe, $ff, $00, $00, $ff, $00, $02, $02, $ff, $fa, $f4, $f5
1c597     F4 EF EC E9 
1c59b     E7 EA EF F2 
1c59f     FA 00 0C 19 
1c5a3     1E 1F 1C 19 | 	byte	$f4, $ef, $ec, $e9, $e7, $ea, $ef, $f2, $fa, $00, $0c, $19, $1e, $1f, $1c, $19
1c5a7     12 0D 03 00 
1c5ab     FE 00 00 FF 
1c5af     FF 00 02 01 
1c5b3     FF F8 F7 F6 | 	byte	$12, $0d, $03, $00, $fe, $00, $00, $ff, $ff, $00, $02, $01, $ff, $f8, $f7, $f6
1c5b7     F3 F0 ED E8 
1c5bb     E8 EA EE F3 
1c5bf     F7 00 0D 18 
1c5c3     1C 1F 1C 19 | 	byte	$f3, $f0, $ed, $e8, $e8, $ea, $ee, $f3, $f7, $00, $0d, $18, $1c, $1f, $1c, $19
1c5c7     13 0C 04 00 
1c5cb     FF 00 00 FE 
1c5cf     00 00 03 02 
1c5d3     FE F9 F9 F6 | 	byte	$13, $0c, $04, $00, $ff, $00, $00, $fe, $00, $00, $03, $02, $fe, $f9, $f9, $f6
1c5d7     F3 F2 EB EA 
1c5db     E9 EB EF F2 
1c5df     F7 01 0E 18 
1c5e3     1D 1E 1D 1A | 	byte	$f3, $f2, $eb, $ea, $e9, $eb, $ef, $f2, $f7, $01, $0e, $18, $1d, $1e, $1d, $1a
1c5e7     13 0B 04 00 
1c5eb     00 00 FE FF 
1c5ef     FF 01 04 01 
1c5f3     FD FB F8 F6 | 	byte	$13, $0b, $04, $00, $00, $00, $fe, $ff, $ff, $01, $04, $01, $fd, $fb, $f8, $f6
1c5f7     F5 F0 ED EA 
1c5fb     E9 EB EF F0 
1c5ff     F8 02 0E 17 
1c603     1C 1E 1D 1A | 	byte	$f5, $f0, $ed, $ea, $e9, $eb, $ef, $f0, $f8, $02, $0e, $17, $1c, $1e, $1d, $1a
1c607     13 0B 02 00 
1c60b     00 FF FE FE 
1c60f     FF 03 03 00 
1c613     FE F9 F8 F6 | 	byte	$13, $0b, $02, $00, $00, $ff, $fe, $fe, $ff, $03, $03, $00, $fe, $f9, $f8, $f6
1c617     F3 EF ED E9 
1c61b     EA EC ED F1 
1c61f     F9 03 0E 17 
1c623     1B 1F 1D 1A | 	byte	$f3, $ef, $ed, $e9, $ea, $ec, $ed, $f1, $f9, $03, $0e, $17, $1b, $1f, $1d, $1a
1c627     13 09 03 01 
1c62b     00 FF FE FC 
1c62f     00 03 01 00 
1c633     FD FA FA F6 | 	byte	$13, $09, $03, $01, $00, $ff, $fe, $fc, $00, $03, $01, $00, $fd, $fa, $fa, $f6
1c637     F3 F0 EB EA 
1c63b     EB EC EC F1 
1c63f     F9 04 0E 16 
1c643     1C 1F 1F 1B | 	byte	$f3, $f0, $eb, $ea, $eb, $ec, $ec, $f1, $f9, $04, $0e, $16, $1c, $1f, $1f, $1b
1c647     12 09 04 00 
1c64b     00 FF FC FE 
1c64f     01 02 02 00 
1c653     FC FD F9 F6 | 	byte	$12, $09, $04, $00, $00, $ff, $fc, $fe, $01, $02, $02, $00, $fc, $fd, $f9, $f6
1c657     F3 EF EC EC 
1c65b     EB EB ED F1 
1c65f     FA 04 0E 15 
1c663     1B 1F 20 1A | 	byte	$f3, $ef, $ec, $ec, $eb, $eb, $ed, $f1, $fa, $04, $0e, $15, $1b, $1f, $20, $1a
1c667     11 0A 02 02 
1c66b     00 FD FC FF 
1c66f     00 03 01 FF 
1c673     FE FC F9 F6 | 	byte	$11, $0a, $02, $02, $00, $fd, $fc, $ff, $00, $03, $01, $ff, $fe, $fc, $f9, $f6
1c677     F2 ED ED EB 
1c67b     EB EA EC F1 
1c67f     FA 04 0D 15 
1c683     1A 20 1F 1A | 	byte	$f2, $ed, $ed, $eb, $eb, $ea, $ec, $f1, $fa, $04, $0d, $15, $1a, $20, $1f, $1a
1c687     11 08 04 03 
1c68b     FF FC FD FF 
1c68f     02 02 00 00 
1c693     FF FB FA F6 | 	byte	$11, $08, $04, $03, $ff, $fc, $fd, $ff, $02, $02, $00, $00, $ff, $fb, $fa, $f6
1c697     F1 EF ED EC 
1c69b     EB E9 EB F2 
1c69f     FA 04 0C 14 
1c6a3     1C 20 1F 1A | 	byte	$f1, $ef, $ed, $ec, $eb, $e9, $eb, $f2, $fa, $04, $0c, $14, $1c, $20, $1f, $1a
1c6a7     10 08 06 02 
1c6ab     FF FC FC 00 
1c6af     03 01 01 00 
1c6b3     FE FD FA F5 | 	byte	$10, $08, $06, $02, $ff, $fc, $fc, $00, $03, $01, $01, $00, $fe, $fd, $fa, $f5
1c6b7     F1 EF EE ED 
1c6bb     EA E9 ED F2 
1c6bf     FC 04 0C 15 
1c6c3     1D 20 21 19 | 	byte	$f1, $ef, $ee, $ed, $ea, $e9, $ed, $f2, $fc, $04, $0c, $15, $1d, $20, $21, $19
1c6c7     0F 0A 06 02 
1c6cb     FF FC FD 01 
1c6cf     01 01 00 FF 
1c6d3     FF FD F9 F4 | 	byte	$0f, $0a, $06, $02, $ff, $fc, $fd, $01, $01, $01, $00, $ff, $ff, $fd, $f9, $f4
1c6d7     F1 EF EF EB 
1c6db     EA E9 EC F3 
1c6df     FC 02 0C 15 
1c6e3     1C 23 20 17 | 	byte	$f1, $ef, $ef, $eb, $ea, $e9, $ec, $f3, $fc, $02, $0c, $15, $1c, $23, $20, $17
1c6e7     10 0B 06 03 
1c6eb     FE FC FF 00 
1c6ef     01 01 00 FF 
1c6f3     00 FC F9 F4 | 	byte	$10, $0b, $06, $03, $fe, $fc, $ff, $00, $01, $01, $00, $ff, $00, $fc, $f9, $f4
1c6f7     F1 F0 EE EB 
1c6fb     E9 E9 ED F4 
1c6ff     FA 03 0C 14 
1c703     1D 23 1E 18 | 	byte	$f1, $f0, $ee, $eb, $e9, $e9, $ed, $f4, $fa, $03, $0c, $14, $1d, $23, $1e, $18
1c707     10 0B 08 01 
1c70b     FD FD FF 00 
1c70f     02 00 00 00 
1c713     FF FD F8 F3 | 	byte	$10, $0b, $08, $01, $fd, $fd, $ff, $00, $02, $00, $00, $00, $ff, $fd, $f8, $f3
1c717     F2 F1 EE EC 
1c71b     E8 E9 EE F3 
1c71f     FB 03 0A 15 
1c723     1F 21 1E 17 | 	byte	$f2, $f1, $ee, $ec, $e8, $e9, $ee, $f3, $fb, $03, $0a, $15, $1f, $21, $1e, $17
1c727     10 0D 07 00 
1c72b     FE FD FF 01 
1c72f     00 00 00 00 
1c733     00 FC F7 F3 | 	byte	$10, $0d, $07, $00, $fe, $fd, $ff, $01, $00, $00, $00, $00, $00, $fc, $f7, $f3
1c737     F2 F0 EF EA 
1c73b     E8 EA ED F3 
1c73f     FC 01 0A 16 
1c743     1E 22 1D 16 | 	byte	$f2, $f0, $ef, $ea, $e8, $ea, $ed, $f3, $fc, $01, $0a, $16, $1e, $22, $1d, $16
1c747     11 0D 05 01 
1c74b     FE FD 00 00 
1c74f     00 00 00 00 
1c753     00 FB F7 F3 | 	byte	$11, $0d, $05, $01, $fe, $fd, $00, $00, $00, $00, $00, $00, $00, $fb, $f7, $f3
1c757     F3 F1 EE E9 
1c75b     E9 E9 ED F5 
1c75f     FA 00 0B 16 
1c763     1F 21 1B 17 | 	byte	$f3, $f1, $ee, $e9, $e9, $e9, $ed, $f5, $fa, $00, $0b, $16, $1f, $21, $1b, $17
1c767     12 0C 06 00 
1c76b     FE FE 00 00 
1c76f     01 00 01 01 
1c773     00 FB F6 F3 | 	byte	$12, $0c, $06, $00, $fe, $fe, $00, $00, $01, $00, $01, $01, $00, $fb, $f6, $f3
1c777     F4 F1 EC EA 
1c77b     E8 E9 EF F4 
1c77f     F9 01 0B 17 
1c783     20 1F 1C 18 | 	byte	$f4, $f1, $ec, $ea, $e8, $e9, $ef, $f4, $f9, $01, $0b, $17, $20, $1f, $1c, $18
1c787     12 0C 05 00 
1c78b     FE FF 00 00 
1c78f     00 00 01 01 
1c793     FF FB F5 F5 | 	byte	$12, $0c, $05, $00, $fe, $ff, $00, $00, $00, $00, $01, $01, $ff, $fb, $f5, $f5
1c797     F4 EF ED E9 
1c79b     E7 EA EF F2 
1c79f     F9 00 0B 19 
1c7a3     1E 1E 1C 18 | 	byte	$f4, $ef, $ed, $e9, $e7, $ea, $ef, $f2, $f9, $00, $0b, $19, $1e, $1e, $1c, $18
1c7a7     12 0D 04 00 
1c7ab     FE FF 00 FF 
1c7af     FF 00 01 01 
1c7b3     FF F8 F7 F6 | 	byte	$12, $0d, $04, $00, $fe, $ff, $00, $ff, $ff, $00, $01, $01, $ff, $f8, $f7, $f6
1c7b7     F3 F0 ED E8 
1c7bb     E8 EA EE F3 
1c7bf     F7 00 0D 18 
1c7c3     1C 1F 1B 19 | 	byte	$f3, $f0, $ed, $e8, $e8, $ea, $ee, $f3, $f7, $00, $0d, $18, $1c, $1f, $1b, $19
1c7c7     13 0C 04 00 
1c7cb     FF 00 00 00 
1c7cf     00          | 	byte	$13, $0c, $04, $00, $ff, $00, $00, $00, $00
1c7d0                 | 	alignl
1c7d0                 | _hng030rm_spin2_dat_
1c7d0     00 00 00 00 
1c7d4     00 00 00 00 
1c7d8     00 00 00 00 
1c7dc     00 00 00 00 
1c7e0     00 00 00    | vga_font       file "vgafont.def"
1c7e3     7E 81 A5 81 
1c7e7     81 BD 99 81 
1c7eb     81 7E 00 00 
1c7ef     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
1c7f3     7E FF DB FF 
1c7f7     FF C3 E7 FF 
1c7fb     FF 7E 00 00 
1c7ff     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
1c803     00 36 7F 7F 
1c807     7F 7F 3E 1C 
1c80b     08 00 00 00 
1c80f     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
1c813     00 08 1C 3E 
1c817     7F 3E 1C 08 
1c81b     00 00 00 00 
1c81f     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
1c823     18 3C 3C E7 
1c827     E7 E7 18 18 
1c82b     3C 00 00 00 
1c82f     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1c833     18 3C 7E FF 
1c837     FF 7E 18 18 
1c83b     3C 00 00 00 
1c83f     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1c843     00 00 00 18 
1c847     3C 3C 18 00 
1c84b     00 00 00 00 
1c84f     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
1c853     FF FF FF E7 
1c857     C3 C3 E7 FF 
1c85b     FF FF FF FF 
1c85f     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1c863     00 00 3C 66 
1c867     42 42 66 3C 
1c86b     00 00 00 00 
1c86f     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
1c873     FF FF C3 99 
1c877     BD BD 99 C3 
1c87b     FF FF FF FF 
1c87f     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1c883     78 70 58 4C 
1c887     1E 33 33 33 
1c88b     33 1E 00 00 
1c88f     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
1c893     3C 66 66 66 
1c897     66 3C 18 7E 
1c89b     18 18 00 00 
1c89f     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
1c8a3     FC CC FC 0C 
1c8a7     0C 0C 0C 0E 
1c8ab     0F 07 00 00 
1c8af     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
1c8b3     FE C6 FE C6 
1c8b7     C6 C6 C6 E6 
1c8bb     E7 67 03 00 
1c8bf     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
1c8c3     18 18 DB 3C 
1c8c7     E7 3C DB 18 
1c8cb     18 00 00 00 
1c8cf     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
1c8d3     03 07 0F 1F 
1c8d7     7F 1F 0F 07 
1c8db     03 01 00 00 
1c8df     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
1c8e3     60 70 78 7C 
1c8e7     7F 7C 78 70 
1c8eb     60 40 00 00 
1c8ef     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
1c8f3     18 3C 7E 18 
1c8f7     18 18 7E 3C 
1c8fb     18 00 00 00 
1c8ff     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
1c903     66 66 66 66 
1c907     66 66 66    | 	byte	$66[7]
1c90a     00 66 66 00 
1c90e     00 00 00 00 
1c912     00 FE DB DB 
1c916     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
1c91a     D8 D8 D8 00 
1c91e     00 00 00 3E 
1c922     63 06 1C 36 
1c926     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
1c92a     30 63 3E 00 
1c92e     00 00 00 00 
1c932     00 00 00 00 
1c936     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1c93a     7F 7F 7F 00 
1c93e     00 00 00 00 
1c942     00 18 3C 7E 
1c946     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
1c94a     3C 18 7E 00 
1c94e     00 00 00 00 
1c952     00 18 3C 7E 
1c956     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
1c95a     18 18 18 00 
1c95e     00 00 00 00 
1c962     00 18 18 18 
1c966     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1c96a     7E 3C 18 00 
1c96e     00 00 00 00 
1c972     00 00 00 18 
1c976     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1c97a     00 00 00 00 
1c97e     00 00 00 00 
1c982     00 00 00    | 	byte	$00[11]
1c985     0C 06 7F 06 
1c989     0C 00 00 00 
1c98d     00 00 00 00 
1c991     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c995     00 03 03 03 
1c999     7F 00 00 00 
1c99d     00 00 00 00 
1c9a1     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c9a5     14 36 7F 36 
1c9a9     14 00 00 00 
1c9ad     00 00 00 00 
1c9b1     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
1c9b5     1C 1C 3E 3E 
1c9b9     7F 7F 00 00 
1c9bd     00 00 00 00 
1c9c1     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1c9c5     7F 3E 3E 1C 
1c9c9     1C 08 00 00 
1c9cd     00 00 00 00 
1c9d1     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c9d5     00 00 00 00 
1c9d9     00 00 00 00 
1c9dd     00 00 00 00 
1c9e1     00 00       | 	byte	$00[14]
1c9e3     18 3C 3C 3C 
1c9e7     18 18 18 00 
1c9eb     18 18 00 00 
1c9ef     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
1c9f3     66 24 00 00 
1c9f7     00 00 00 00 
1c9fb     00 00 00 00 
1c9ff     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ca03     00 36 36 7F 
1ca07     36 36 36 7F 
1ca0b     36 36 00 00 
1ca0f     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
1ca13     3E 63 43 03 
1ca17     3E 60 60 61 
1ca1b     63 3E 18 18 
1ca1f     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
1ca23     00 00 43 63 
1ca27     30 18 0C 06 
1ca2b     63 61 00 00 
1ca2f     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
1ca33     1C 36 36 1C 
1ca37     6E 3B 33 33 
1ca3b     33 6E 00 00 
1ca3f     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
1ca43     0C 0C 0C 06 
1ca47     00 00 00 00 
1ca4b     00 00 00 00 
1ca4f     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ca53     30 18 0C 0C 
1ca57     0C 0C 0C 0C 
1ca5b     18 30 00 00 
1ca5f     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
1ca63     0C 18 30 30 
1ca67     30 30 30 30 
1ca6b     18 0C 00 00 
1ca6f     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
1ca73     00 00 00 66 
1ca77     3C FF 3C 66 
1ca7b     00 00 00 00 
1ca7f     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
1ca83     00 00 00 18 
1ca87     18 7E 18 18 
1ca8b     00 00 00 00 
1ca8f     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
1ca93     00 00 00 00 
1ca97     00 00 00 00 | 	byte	$00[8]
1ca9b     18 18 18 0C 
1ca9f     00 00 00 00 
1caa3     00 00 00 00 
1caa7     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1caab     00 00 00 00 
1caaf     00 00 00 00 
1cab3     00 00 00 00 
1cab7     00 00 00 00 | 	byte	$00[16]
1cabb     18 18 00 00 
1cabf     00 00 00 00 
1cac3     00 00 40 60 
1cac7     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
1cacb     03 01 00 00 
1cacf     00 00 00 00 
1cad3     1C 36 63 63 
1cad7     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
1cadb     36 1C 00 00 
1cadf     00 00 00 00 
1cae3     18 1C 1E 18 
1cae7     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
1caeb     18 7E 00 00 
1caef     00 00 00 00 
1caf3     3E 63 60 30 
1caf7     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
1cafb     63 7F 00 00 
1caff     00 00 00 00 
1cb03     3E 63 60 60 
1cb07     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
1cb0b     63 3E 00 00 
1cb0f     00 00 00 00 
1cb13     30 38 3C 36 
1cb17     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
1cb1b     30 78 00 00 
1cb1f     00 00 00 00 
1cb23     7F 03 03 03 
1cb27     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
1cb2b     63 3E 00 00 
1cb2f     00 00 00 00 
1cb33     1C 06 03 03 
1cb37     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
1cb3b     63 3E 00 00 
1cb3f     00 00 00 00 
1cb43     7F 63 60 60 
1cb47     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
1cb4b     0C 0C 00 00 
1cb4f     00 00 00 00 
1cb53     3E 63 63 63 
1cb57     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
1cb5b     63 3E 00 00 
1cb5f     00 00 00 00 
1cb63     3E 63 63 63 
1cb67     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1cb6b     30 1E 00 00 
1cb6f     00 00 00 00 
1cb73     00 00 00 18 
1cb77     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1cb7b     18 18 00 00 
1cb7f     00 00 00 00 
1cb83     00 00 00 18 
1cb87     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1cb8b     18 18 0C 00 
1cb8f     00 00 00 00 
1cb93     00 60 30 18 
1cb97     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1cb9b     30 60 00 00 
1cb9f     00 00 00 00 
1cba3     00 00 00 7E 
1cba7     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1cbab     00 00 00 00 
1cbaf     00 00 00 00 
1cbb3     00          | 	byte	$00[9]
1cbb4     06 0C 18 30 
1cbb8     60 30 18 0C 
1cbbc     06 00 00 00 
1cbc0     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
1cbc4     63 63 30 18 
1cbc8     18 18 00 18 
1cbcc     18 00 00 00 
1cbd0     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
1cbd4     3E 63 63 7B 
1cbd8     7B 7B 3B 03 
1cbdc     3E 00 00 00 
1cbe0     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
1cbe4     1C 36 63 63 
1cbe8     7F 63 63 63 
1cbec     63 00 00 00 
1cbf0     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
1cbf4     66 66 66 3E 
1cbf8     66 66 66 66 
1cbfc     3F 00 00 00 
1cc00     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
1cc04     66 43 03 03 
1cc08     03 03 43 66 
1cc0c     3C 00 00 00 
1cc10     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
1cc14     36 66 66 66 
1cc18     66 66 66 36 
1cc1c     1F 00 00 00 
1cc20     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
1cc24     66 46 16 1E 
1cc28     16 06 46 66 
1cc2c     7F 00 00 00 
1cc30     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
1cc34     66 46 16 1E 
1cc38     16 06 06 06 
1cc3c     0F 00 00 00 
1cc40     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
1cc44     66 43 03 03 
1cc48     7B 63 63 66 
1cc4c     5C 00 00 00 
1cc50     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
1cc54     63 63 63 7F 
1cc58     63 63 63 63 
1cc5c     63 00 00 00 
1cc60     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
1cc64     18 18 18 18 
1cc68     18 18 18 18 | 	byte	$18[8]
1cc6c     3C 00 00 00 
1cc70     00 00 00 78 
1cc74     30 30 30 30 
1cc78     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1cc7c     1E 00 00 00 
1cc80     00 00 00 67 
1cc84     66 66 36 1E 
1cc88     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1cc8c     67 00 00 00 
1cc90     00 00 00 0F 
1cc94     06 06 06 06 
1cc98     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1cc9c     7F 00 00 00 
1cca0     00 00 00 63 
1cca4     77 7F 7F 6B 
1cca8     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
1ccac     63 00 00 00 
1ccb0     00 00 00 63 
1ccb4     67 6F 7F 7B 
1ccb8     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
1ccbc     63 00 00 00 
1ccc0     00 00 00 3E 
1ccc4     63 63 63 63 
1ccc8     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1cccc     3E 00 00 00 
1ccd0     00 00 00 3F 
1ccd4     66 66 66 3E 
1ccd8     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
1ccdc     0F 00 00 00 
1cce0     00 00 00 3E 
1cce4     63 63 63 63 
1cce8     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
1ccec     3E 30 70 00 
1ccf0     00 00 00 3F 
1ccf4     66 66 66 3E 
1ccf8     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
1ccfc     67 00 00 00 
1cd00     00 00 00 3E 
1cd04     63 63 06 1C 
1cd08     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1cd0c     3E 00 00 00 
1cd10     00 00 00 7E 
1cd14     7E 5A 18 18 
1cd18     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1cd1c     3C 00 00 00 
1cd20     00 00 00 63 
1cd24     63 63 63 63 
1cd28     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1cd2c     3E 00 00 00 
1cd30     00 00 00 63 
1cd34     63 63 63 63 
1cd38     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
1cd3c     08 00 00 00 
1cd40     00 00 00 63 
1cd44     63 63 63 6B 
1cd48     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
1cd4c     36 00 00 00 
1cd50     00 00 00 63 
1cd54     63 36 3E 1C 
1cd58     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
1cd5c     63 00 00 00 
1cd60     00 00 00 66 
1cd64     66 66 66 3C 
1cd68     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1cd6c     3C 00 00 00 
1cd70     00 00 00 7F 
1cd74     63 61 30 18 
1cd78     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1cd7c     7F 00 00 00 
1cd80     00 00 00 3C 
1cd84     0C 0C 0C 0C 
1cd88     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1cd8c     3C 00 00 00 
1cd90     00 00 00 00 
1cd94     01 03 07 0E 
1cd98     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
1cd9c     40 00 00 00 
1cda0     00 00 00 3C 
1cda4     30 30 30 30 
1cda8     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
1cdac     3C 00 00 00 
1cdb0     1C 36 00 00 
1cdb4     00 00 00 00 
1cdb8     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cdbc     00 00 00 00 
1cdc0     00 00 00 00 
1cdc4     00 00 00 00 
1cdc8     00 00 00 00 
1cdcc     00          | 	byte	$00[17]
1cdcd     FF 00 00 0C 
1cdd1     18 00 00 00 
1cdd5     00 00 00 00 
1cdd9     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cddd     00 00 00 00 
1cde1     00 00 00 00 
1cde5     00          | 	byte	$00[9]
1cde6     1E 30 3E 33 
1cdea     33 33 6E 00 
1cdee     00 00 00 00 
1cdf2     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
1cdf6     1E 36 66 66 
1cdfa     66 66 3E 00 
1cdfe     00 00 00 00 
1ce02     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ce06     3E 63 03 03 
1ce0a     03 63 3E 00 
1ce0e     00 00 00 00 
1ce12     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
1ce16     3C 36 33 33 
1ce1a     33 33 6E 00 
1ce1e     00 00 00 00 
1ce22     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ce26     3E 63 7F 03 
1ce2a     03 63 3E 00 
1ce2e     00 00 00 00 
1ce32     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
1ce36     0C 1E 0C 0C 
1ce3a     0C 0C 1E 00 
1ce3e     00 00 00 00 
1ce42     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ce46     6E 33 33 33 
1ce4a     33 33 3E 30 
1ce4e     33 1E 00 00 
1ce52     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
1ce56     36 6E 66 66 
1ce5a     66 66 67 00 
1ce5e     00 00 00 00 
1ce62     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
1ce66     1C 18 18 18 
1ce6a     18 18 3C 00 
1ce6e     00 00 00 00 
1ce72     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
1ce76     70 60 60 60 
1ce7a     60 60 60 66 
1ce7e     66 3C 00 00 
1ce82     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
1ce86     66 36 1E 1E 
1ce8a     36 66 67 00 
1ce8e     00 00 00 00 
1ce92     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
1ce96     18 18 18 18 
1ce9a     18 18       | 	byte	$18[6]
1ce9c     3C 00 00 00 
1cea0     00 00 00 00 
1cea4     00 00 37 7F 
1cea8     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
1ceac     63 00 00 00 
1ceb0     00 00 00 00 
1ceb4     00 00 3B 66 
1ceb8     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1cebc     66 00 00 00 
1cec0     00 00 00 00 
1cec4     00 00 3E 63 
1cec8     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
1cecc     3E 00 00 00 
1ced0     00 00 00 00 
1ced4     00 00 3B 66 
1ced8     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1cedc     3E 06 06 0F 
1cee0     00 00 00 00 
1cee4     00 00 6E 33 
1cee8     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
1ceec     3E 30 30 78 
1cef0     00 00 00 00 
1cef4     00 00 3B 6E 
1cef8     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
1cefc     0F 00 00 00 
1cf00     00 00 00 00 
1cf04     00 00 3E 63 
1cf08     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
1cf0c     3E 00 00 00 
1cf10     00 00 00 08 
1cf14     0C 0C 3F 0C 
1cf18     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1cf1c     38 00 00 00 
1cf20     00 00 00 00 
1cf24     00 00 33 33 
1cf28     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
1cf2c     6E 00 00 00 
1cf30     00 00 00 00 
1cf34     00 00 63 63 
1cf38     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
1cf3c     1C 00 00 00 
1cf40     00 00 00 00 
1cf44     00 00 63 63 
1cf48     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
1cf4c     36 00 00 00 
1cf50     00 00 00 00 
1cf54     00 00 63 36 
1cf58     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
1cf5c     63 00 00 00 
1cf60     00 00 00 00 
1cf64     00 00 63 63 
1cf68     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1cf6c     7E 60 30 1F 
1cf70     00 00 00 00 
1cf74     00 00 7F 33 
1cf78     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1cf7c     7F 00 00 00 
1cf80     00 00 00 70 
1cf84     18 18 18 0E 
1cf88     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1cf8c     70 00 00 00 
1cf90     00 00 00 18 
1cf94     18 18 18 18 
1cf98     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
1cf9c     18 00 00 00 
1cfa0     00 00 00 0E 
1cfa4     18 18 18 70 
1cfa8     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
1cfac     0E 00 00 00 
1cfb0     6E 3B 00 00 
1cfb4     00 00 00 00 
1cfb8     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cfbc     00 00 00 00 
1cfc0     00 00 00 00 
1cfc4     00 00       | 	byte	$00[10]
1cfc6     08 1C 36 63 
1cfca     63 63 7F 00 
1cfce     00 00 00 00 
1cfd2     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
1cfd6     03 03 03 03 
1cfda     43 66 3C 18 
1cfde     30 1E 00 00 
1cfe2     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
1cfe6     33 33 33 33 
1cfea     33 33       | 	byte	$33[6]
1cfec     6E 00 00 00 
1cff0     00 00 60 30 
1cff4     18 00 3E 63 
1cff8     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
1cffc     3E 00 00 00 
1d000     00 00 08 1C 
1d004     36 00 1E 30 
1d008     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
1d00c     6E 00 00 00 
1d010     00 00 00 00 
1d014     33 00 1E 30 
1d018     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
1d01c     6E 00 00 00 
1d020     00 00 1C 36 
1d024     1C 00 33 33 
1d028     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
1d02c     6E 00 00 00 
1d030     00 00 60 30 
1d034     18 00 3E 63 
1d038     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
1d03c     3E 00 00 00 
1d040     00 00 00 00 
1d044     00 00 3E 63 
1d048     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
1d04c     3E 18 30 1E 
1d050     00 00 00 1C 
1d054     58 78 38 18 
1d058     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
1d05c     3C 00 00 00 
1d060     00 00 00 00 
1d064     63 00 3E 63 
1d068     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1d06c     3E 00 00 00 
1d070     66 33 00 3E 
1d074     63 63 63 63 
1d078     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1d07c     3E 00 00 00 
1d080     00 00 CC 66 
1d084     33 00 3E 63 
1d088     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1d08c     3E 00 00 00 
1d090     00 00 18 3C 
1d094     66 00 1C 18 
1d098     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
1d09c     3C 00 00 00 
1d0a0     30 18 00 7F 
1d0a4     63 61 30 18 
1d0a8     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1d0ac     7F 00 00 00 
1d0b0     00 63 00 08 
1d0b4     1C 36 63 63 
1d0b8     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
1d0bc     63 00 00 00 
1d0c0     30 18 00 3C 
1d0c4     66 43 03 03 
1d0c8     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
1d0cc     3C 00 00 00 
1d0d0     30 18 00 7F 
1d0d4     66 46 16 1E 
1d0d8     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
1d0dc     7F 00 00 00 
1d0e0     0C 06 00 0F 
1d0e4     06 06 06 06 
1d0e8     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1d0ec     7F 00 00 00 
1d0f0     30 18 00 1C 
1d0f4     18 18 18 18 
1d0f8     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
1d0fc     3C 00 00 00 
1d100     00 00 08 1C 
1d104     36 00 3E 63 
1d108     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
1d10c     3E 00 00 00 
1d110     00 00 00 00 
1d114     63 00 3E 63 
1d118     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
1d11c     3E 00 00 00 
1d120     00 00 00 6F 
1d124     46 26 06 06 
1d128     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
1d12c     7F 00 00 00 
1d130     00 00 00 6E 
1d134     4C 2C 0C 0C 
1d138     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
1d13c     1E 00 00 00 
1d140     30 18 00 3E 
1d144     63 63 06 1C 
1d148     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1d14c     3E 00 00 00 
1d150     00 00 60 30 
1d154     18 00 3E 63 
1d158     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
1d15c     3E 00 00 00 
1d160     00 63 00 3E 
1d164     63 63 63 63 
1d168     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1d16c     3E 00 00 00 
1d170     00 63 00 63 
1d174     63 63 63 63 
1d178     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1d17c     3E 00 00 00 
1d180     6C 38 00 7E 
1d184     7E 5A 18 18 
1d188     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1d18c     3C 00 00 00 
1d190     00 00 60 48 
1d194     2C 0C 3F 0C 
1d198     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1d19c     38 00 00 00 
1d1a0     00 00 00 0F 
1d1a4     26 36 1E 0E 
1d1a8     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
1d1ac     7F 00 00 00 
1d1b0     00 00 00 00 
1d1b4     00 63 36 1C 
1d1b8     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
1d1bc     00 00 00 00 
1d1c0     00 00       | 	byte	$00[6]
1d1c2     36 1C 08 00 
1d1c6     3E 63 03 03 
1d1ca     03 63 3E 00 
1d1ce     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
1d1d2     30 18 0C 00 
1d1d6     1E 30 3E 33 
1d1da     33 33 6E 00 
1d1de     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1d1e2     60 30 18 00 
1d1e6     1C 18 18 18 
1d1ea     18 18 3C 00 
1d1ee     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
1d1f2     60 30 18 00 
1d1f6     3E 63 63 63 
1d1fa     63 63 3E 00 
1d1fe     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
1d202     30 18 0C 00 
1d206     33 33 33 33 
1d20a     33 33 6E 00 
1d20e     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1d212     00 08 1C 36 
1d216     63 63 7F 63 
1d21a     63 63 63 18 
1d21e     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
1d222     00 00 00 00 
1d226     1E 30 3E 33 
1d22a     33 33 6E 18 
1d22e     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
1d232     00 7F 63 61 
1d236     30 18 0C 06 
1d23a     43 63 7F 00 
1d23e     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
1d242     36 1C 08 00 
1d246     7F 33 18 0C 
1d24a     06 63 7F 00 
1d24e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
1d252     00 7F 66 46 
1d256     16 1E 16 06 
1d25a     46 66 7F 18 
1d25e     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
1d262     00 00 00 00 
1d266     3E 63 7F 03 
1d26a     03 63 3E 18 
1d26e     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
1d272     00 3C 66 03 
1d276     1F 03 0F 03 
1d27a     03 66 3C 00 
1d27e     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
1d282     60 30 18 00 
1d286     7F 33 18 0C 
1d28a     06 63 7F 00 
1d28e     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
1d292     00 3C 66 43 
1d296     03 03 03 03 
1d29a     43 66 3C 00 
1d29e     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
1d2a2     00 00 00 00 
1d2a6     3E 63 06 1C 
1d2aa     30 63 3E 18 
1d2ae     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
1d2b2     00 00 00 00 
1d2b6     00 00       | 	byte	$00[6]
1d2b8     6C 36 1B 36 
1d2bc     6C 00 00 00 
1d2c0     00 00 00 00 
1d2c4     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d2c8     1B 36 6C 36 
1d2cc     1B 00 00 00 
1d2d0     88 22 88 22 
1d2d4     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
1d2d8     88 22 88 22 
1d2dc     88 22 88 22 
1d2e0     AA 55 AA 55 
1d2e4     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
1d2e8     AA 55 AA 55 
1d2ec     AA 55 AA 55 
1d2f0     BB EE BB EE 
1d2f4     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
1d2f8     BB EE BB EE 
1d2fc     BB EE BB EE 
1d300     18 18 18 18 
1d304     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
1d308     18 18 18 18 
1d30c     18 18 18 18 
1d310     18 18 18 18 
1d314     18 18 18    | 	byte	$18[15]
1d317     1F 18 18 18 
1d31b     18 18 18 18 
1d31f     18 30 18 00 
1d323     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1d327     63 7F 63 63 
1d32b     63 63 00 00 
1d32f     00 1C 36 00 
1d333     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
1d337     63 7F 63 63 
1d33b     63 63 00 00 
1d33f     00 36 1C 00 
1d343     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
1d347     1E 16 06 46 
1d34b     66 7F 00 00 
1d34f     00 00 00 00 
1d353     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
1d357     1C 30 60 63 
1d35b     63 3E 18 30 
1d35f     1E 6C 6C 6C 
1d363     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
1d367     6F 6C 6C 6C 
1d36b     6C 6C 6C 6C 
1d36f     6C 6C 6C 6C 
1d373     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1d377     6C 6C 6C 6C 
1d37b     6C 6C 6C 6C 
1d37f     6C          | 	byte	$6c[9]
1d380     00 00 00 00 
1d384     00          | 	byte	$00[5]
1d385     7F 60 6F 6C 
1d389     6C 6C 6C 6C 
1d38d     6C 6C 6C 6C 
1d391     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1d395     6F 60 7F 00 
1d399     00 00 00 00 
1d39d     00 00 00 18 
1d3a1     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
1d3a5     61 30 18 0C 
1d3a9     06 43 63 7F 
1d3ad     00 00 00 00 
1d3b1     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
1d3b5     00 7F 33 18 
1d3b9     0C 06 63 7F 
1d3bd     00 00 00 00 
1d3c1     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
1d3c5     00 00 1F 18 
1d3c9     18 18 18 18 
1d3cd     18 18 18 18 
1d3d1     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1d3d5     18 18 F8 00 
1d3d9     00 00 00 00 
1d3dd     00 00 00 18 
1d3e1     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1d3e5     18 18 FF 00 
1d3e9     00 00 00 00 
1d3ed     00 00 00 00 
1d3f1     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d3f5     00 00 FF 18 
1d3f9     18 18 18 18 
1d3fd     18 18 18 18 
1d401     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1d405     18 18 F8 18 
1d409     18 18 18 18 
1d40d     18 18 18 00 
1d411     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1d415     00 00 FF 00 
1d419     00 00 00 00 
1d41d     00 00 00 18 
1d421     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1d425     18 18 FF 18 
1d429     18 18 18 18 
1d42d     18 18 18 63 
1d431     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
1d435     36 63 63 7F 
1d439     63 63 63 63 
1d43d     00 00 00 00 
1d441     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
1d445     00 1E 30 3E 
1d449     33 33 33 6E 
1d44d     00 00 00 6C 
1d451     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1d455     EC 0C FC 00 
1d459     00 00 00 00 
1d45d     00 00 00 00 
1d461     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d465     FC 0C EC 6C 
1d469     6C 6C 6C 6C 
1d46d     6C 6C 6C 6C 
1d471     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1d475     EF 00 FF 00 
1d479     00 00 00 00 
1d47d     00 00 00 00 
1d481     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d485     FF 00 EF 6C 
1d489     6C 6C 6C 6C 
1d48d     6C 6C 6C 6C 
1d491     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1d495     EC 0C EC 6C 
1d499     6C 6C 6C 6C 
1d49d     6C 6C 6C 00 
1d4a1     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1d4a5     FF 00 FF 00 
1d4a9     00 00 00 00 
1d4ad     00 00 00 6C 
1d4b1     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1d4b5     EF 00 EF 6C 
1d4b9     6C 6C 6C 6C 
1d4bd     6C 6C 6C 00 
1d4c1     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1d4c5     63 3E 63 63 
1d4c9     63 63 3E 63 
1d4cd     00 00 00 00 
1d4d1     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
1d4d5     30 3C 36 33 
1d4d9     33 33 33 6E 
1d4dd     00 00 00 00 
1d4e1     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
1d4e5     66 66 6F 66 
1d4e9     66 66 36 1F 
1d4ed     00 00 00 36 
1d4f1     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
1d4f5     66 66 66 66 
1d4f9     66 66       | 	byte	$66[6]
1d4fb     36 1F 00 00 
1d4ff     00 00 63 00 
1d503     7F 66 46 16 
1d507     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
1d50b     66 7F 00 00 
1d50f     00 6C 38 00 
1d513     38 30 30 3C 
1d517     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
1d51b     33 6E 00 00 
1d51f     00 36 1C 00 
1d523     63 67 6F 7F 
1d527     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
1d52b     63 63 00 00 
1d52f     00 30 18 00 
1d533     3C 18 18 18 
1d537     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1d53b     18 3C 00 00 
1d53f     00 3C 66 00 
1d543     3C 18 18 18 
1d547     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1d54b     18 3C 00 00 
1d54f     00 00 00 36 
1d553     1C 08 00 3E 
1d557     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
1d55b     63 3E 00 00 
1d55f     00 18 18 18 
1d563     18 18 18 18 
1d567     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
1d56b     00 00 00 00 
1d56f     00 00 00 00 
1d573     00 00 00 00 | 	byte	$00[12]
1d577     F8 18 18 18 
1d57b     18 18 18 18 
1d57f     18 FF FF FF 
1d583     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1d587     FF FF FF FF 
1d58b     FF FF FF FF 
1d58f     FF          | 	byte	$ff[9]
1d590     00 00 00 00 
1d594     00 00 00    | 	byte	$00[7]
1d597     FF FF FF FF 
1d59b     FF FF FF FF 
1d59f     FF          | 	byte	$ff[9]
1d5a0     00 00 00 7E 
1d5a4     7E 5A 18 18 
1d5a8     18 18 18 18 
1d5ac     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
1d5b0     1C 36 1C 63 
1d5b4     63 63 63 63 
1d5b8     63 63 63 63 
1d5bc     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1d5c0     FF FF FF FF 
1d5c4     FF FF FF    | 	byte	$ff[7]
1d5c7     00 00 00 00 
1d5cb     00 00 00 00 
1d5cf     00          | 	byte	$00[9]
1d5d0     30 18 00 3E 
1d5d4     63 63 63 63 
1d5d8     63 63 63 63 
1d5dc     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1d5e0     00 00 00 1E 
1d5e4     33 33 33 1B 
1d5e8     33 63 63 63 
1d5ec     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
1d5f0     1C 36 00 3E 
1d5f4     63 63 63 63 
1d5f8     63 63 63 63 
1d5fc     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1d600     30 18 00 63 
1d604     67 6F 7F 7B 
1d608     73 63 63 63 
1d60c     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
1d610     00 00 60 30 
1d614     18 00 3B 66 
1d618     66 66 66 66 
1d61c     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1d620     00 00 36 1C 
1d624     08 00 3B 66 
1d628     66 66 66 66 
1d62c     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1d630     36 1C 00 3E 
1d634     63 63 06 1C 
1d638     30 60 63 63 
1d63c     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
1d640     00 00 36 1C 
1d644     08 00 3E 63 
1d648     06 1C 30 63 
1d64c     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
1d650     30 18 00 3F 
1d654     66 66 66 3E 
1d658     36 66 66 66 
1d65c     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
1d660     30 18 00 63 
1d664     63 63 63 63 
1d668     63 63 63 63 
1d66c     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1d670     00 00 60 30 
1d674     18 00 3B 6E 
1d678     66 06 06 06 
1d67c     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
1d680     66 33 00 63 
1d684     63 63 63 63 
1d688     63 63 63 63 
1d68c     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1d690     00 00 60 30 
1d694     18 00 63 63 
1d698     63 63 63 63 
1d69c     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
1d6a0     30 18 00 66 
1d6a4     66 66 66 3C 
1d6a8     18 18 18 18 
1d6ac     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
1d6b0     00 00 00 08 
1d6b4     0C 0C 3F 0C 
1d6b8     0C 0C 0C 6C 
1d6bc     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
1d6c0     30 18 00 00 
1d6c4     00 00 00 00 
1d6c8     00 00 00 00 
1d6cc     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d6d0     00 00 00 00 
1d6d4     00 00 00 00 | 	byte	$00[8]
1d6d8     7F 00 00 00 
1d6dc     00 00 00 00 
1d6e0     66 33 00 00 
1d6e4     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
1d6e8     00 00 00 00 
1d6ec     00 00 00 00 
1d6f0     00 00 00 00 
1d6f4     00 00 00 00 
1d6f8     00 00 00 00 
1d6fc     00          | 	byte	$00[21]
1d6fd     0C 06 3C 36 
1d701     1C 00 00 00 
1d705     00 00 00 00 
1d709     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d70d     00 00 00 63 
1d711     3E 00 00 00 
1d715     00 00 00 00 
1d719     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d71d     00 00 00 00 
1d721     3E 63 06 1C 
1d725     36 63 63 36 
1d729     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
1d72d     00 00 00 00 
1d731     00 00 00 00 | 	byte	$00[8]
1d735     18 00 7E 00 
1d739     18 00 00 00 
1d73d     00 00 00 00 
1d741     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d745     00 00 00 00 
1d749     00 00 00 00 | 	byte	$00[8]
1d74d     18 30 1E 00 
1d751     00 00 1C 36 
1d755     36 1C 00 00 
1d759     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
1d75d     00 00 00 00 
1d761     63 00 00 00 
1d765     00 00 00 00 
1d769     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d76d     00 00 00 18 
1d771     18 00 00 00 
1d775     00 00 00 00 
1d779     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d77d     00 00 00 00 
1d781     00          | 	byte	$00[5]
1d782     CC 66 33 00 
1d786     33 33 33 33 
1d78a     33 33 6E 00 
1d78e     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
1d792     00 3F 66 66 
1d796     66 3E 36 66 
1d79a     66 66 6F 00 
1d79e     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
1d7a2     36 1C 08 00 
1d7a6     3B 6E 66 06 
1d7aa     06 06 0F 00 
1d7ae     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
1d7b2     00 00 00 7E 
1d7b6     7E 7E 7E 7E 
1d7ba     7E 7E 00 00 
1d7be     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
1d7c2     00 00 00 00 
1d7c6     00 00 00 00 
1d7ca     00 00 00 00 
1d7ce     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d7d0     00 00 00 00 
      ...             
1d800     00 00 00 00 
1d804     00 00 00    | st_font        file "st4font.def"
1d807     FF FF 00 00 
1d80b     00 00 00 00 
1d80f     00 18 18 18 
1d813     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1d817     18 18 18 18 
1d81b     18 18 18 18 
1d81f     18          | 	byte	$18[9]
1d820     00 00 00 00 
1d824     00 00 00    | 	byte	$00[7]
1d827     FF FF 18 18 
1d82b     18 18 18 18 
1d82f     18 18 18 18 
1d833     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1d837     FF FF 00 00 
1d83b     00 00 00 00 
1d83f     00 18 18 18 
1d843     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1d847     1F 1F 18 18 
1d84b     18 18 18 18 
1d84f     18 18 18 18 
1d853     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1d857     F8 F8 18 18 
1d85b     18 18 18 18 
1d85f     18 00 00 00 
1d863     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1d867     1F 1F 18 18 
1d86b     18 18 18 18 
1d86f     18 00 00 00 
1d873     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1d877     F8 F8 18 18 
1d87b     18 18 18 18 
1d87f     18 18 18 18 
1d883     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1d887     1F 1F 00 00 
1d88b     00 00 00 00 
1d88f     00 18 18 18 
1d893     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1d897     F8 F8 00 00 
1d89b     00 00 00 00 
1d89f     00 18 18 18 
1d8a3     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1d8a7     FF FF 18 18 
1d8ab     18 18 18 18 
1d8af     18 00 00 18 
1d8b3     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
1d8b7     66 7E 7E 66 
1d8bb     66 66 66 30 
1d8bf     18 00 00 7E 
1d8c3     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
1d8c7     3E 06 06 06 
1d8cb     06 7E 7E 18 
1d8cf     0C 30 18 3C 
1d8d3     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
1d8d7     06 06 06 66 
1d8db     66 7E 3C 00 
1d8df     00 30 18 66 
1d8e3     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
1d8e7     7E 7E 76 76 
1d8eb     66 66 66 00 
1d8ef     00 30 18 7C 
1d8f3     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
1d8f7     1C 38 70 60 
1d8fb     60 7E 3E 00 
1d8ff     00 30 18 7E 
1d903     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
1d907     18 0C 0C 06 
1d90b     06 7E 7E 00 
1d90f     00 18 18 00 
1d913     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1d917     18 18 0C 0C 
1d91b     06 7E 7E 00 
1d91f     00 30 18 3C 
1d923     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1d927     66 66 66 66 
1d92b     66          | 	byte	$66[5]
1d92c     7E 3C 00 00 
1d930     00 00 06 06 
1d934     06 06 16 1E 
1d938     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1d93c     7E 7E 00 00 
1d940     00 00 00 00 
1d944     00 3C 7C 60 
1d948     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1d94c     7E 7C 30 18 
1d950     00 00 00 00 
1d954     00 3C 7E 66 
1d958     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1d95c     7E 7C 18 0C 
1d960     00 00 30 18 
1d964     00 3C 3E 06 
1d968     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1d96c     7E 7C 00 00 
1d970     00 00 30 18 
1d974     00 3E 7E 66 
1d978     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1d97c     66 66 00 00 
1d980     00 00 30 18 
1d984     00 7C 7E 06 
1d988     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1d98c     7E 3E 00 00 
1d990     00 00 30 18 
1d994     00 7E 7E 30 
1d998     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1d99c     7E 7E 00 00 
1d9a0     00 00 18 18 
1d9a4     00 7E 7E 30 
1d9a8     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1d9ac     7E 7E 00 00 
1d9b0     00 00 30 18 
1d9b4     00 3C 7E 66 
1d9b8     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1d9bc     7E 3C 00 00 
1d9c0     00 00 1C 1C 
1d9c4     18 18 38 3C 
1d9c8     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1d9cc     3C 3C 00 00 
1d9d0     00 00 00 00 
1d9d4     00 00 00 00 
1d9d8     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d9dc     00 00 00 00 
1d9e0     00 00       | 	byte	$00[6]
1d9e2     18 18 18 18 
1d9e6     18 18 18 18 | 	byte	$18[8]
1d9ea     00 00 18 18 
1d9ee     00 00 00 00 
1d9f2     66 66 66 66 
1d9f6     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1d9fa     00 00 00 00 
1d9fe     00 00 00 00 
1da02     00          | 	byte	$00[9]
1da03     66 66 FF FF 
1da07     66 66 FF FF 
1da0b     66 66 00 00 
1da0f     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1da13     7C 7E 06 06 
1da17     3E 7C 60 60 
1da1b     7E 3E 18 18 
1da1f     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1da23     66 30 30 18 
1da27     18 0C 0C 66 
1da2b     66 00 00 00 
1da2f     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1da33     66 66 3C 1C 
1da37     1C FC FE 66 
1da3b     66 FE FC 00 
1da3f     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1da43     18 18 18 18 
1da47     00 00 00 00 
1da4b     00 00 00 00 
1da4f     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1da53     18 1C 0C 0C 
1da57     0C 0C 0C 0C 
1da5b     1C 18 30 00 
1da5f     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1da63     18 38 30 30 
1da67     30 30 30 30 
1da6b     38 18 0C 00 
1da6f     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1da73     66 66 3C 3C 
1da77     FF FF 3C 3C 
1da7b     66 66 00 00 
1da7f     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1da83     00 18 18 18 
1da87     7E 7E 18 18 
1da8b     18 00 00 00 
1da8f     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1da93     00 00 00 00 
1da97     00 00       | 	byte	$00[6]
1da99     18 18 18 18 
1da9d     18          | 	byte	$18[5]
1da9e     0C 04 00 00 
1daa2     00 00 00 00 
1daa6     7E 7E 00 00 
1daaa     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
1daae     00 00 00 00 
1dab2     00 00 00 00 
1dab6     00 00 00 00 
1daba     00          | 	byte	$00[13]
1dabb     18 18 18 00 
1dabf     00 00 00 60 
1dac3     60 60 30 30 
1dac7     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
1dacb     06 06 06 00 
1dacf     00 00 00 3C 
1dad3     7E 66 66 66 
1dad7     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
1dadb     66 7E 3C 00 
1dadf     00 00 00 18 
1dae3     18 1C 1C 18 
1dae7     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
1daeb     18 7E 7E 00 
1daef     00 00 00 3C 
1daf3     7E 66 66 30 
1daf7     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1dafb     0C 7E 7E 00 
1daff     00 00 00 7E 
1db03     7E 30 30 18 
1db07     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1db0b     66 7E 3C 00 
1db0f     00 00 00 30 
1db13     30 38 38 3C 
1db17     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1db1b     7E 30 30 00 
1db1f     00 00 00 7E 
1db23     7E 06 06 3E 
1db27     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1db2b     66 7E 3C 00 
1db2f     00 00 00 38 
1db33     3C 0E 06 06 
1db37     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
1db3b     66 7E 3C 00 
1db3f     00 00 00 7E 
1db43     7E 60 60 30 
1db47     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
1db4b     0C 0C 0C 00 
1db4f     00 00 00 3C 
1db53     7E 66 66 3C 
1db57     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
1db5b     66 7E 3C 00 
1db5f     00 00 00 3C 
1db63     7E 66 66 7E 
1db67     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
1db6b     70 3C 1C 00 
1db6f     00 00 00 00 
1db73     00 00 18 18 
1db77     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
1db7b     18 18 18 00 
1db7f     00 00 00 00 
1db83     00 00 18 18 
1db87     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
1db8b     18 18 18 0C 
1db8f     04 00 00 00 
1db93     70 38 1C 0E 
1db97     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
1db9b     70 00 00 00 
1db9f     00 00 00 00 
1dba3     00 00 7E 7E 
1dba7     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
1dbab     00 00 00 00 
1dbaf     00 00 00 00 | 	byte	$00[8]
1dbb3     0E 1C 38 70 
1dbb7     E0 70 38 1C 
1dbbb     0E 00 00 00 
1dbbf     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
1dbc3     7E 66 66 30 
1dbc7     30 18 18 18 
1dbcb     00 18 18 00 
1dbcf     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
1dbd3     7E 66 66 66 
1dbd7     66 36 06 66 
1dbdb     66 7E 3C 00 
1dbdf     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
1dbe3     3C 7E 66 66 
1dbe7     66 7E 7E 66 
1dbeb     66 66 66 00 
1dbef     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1dbf3     7E 66 66 7E 
1dbf7     3E 66 66 66 
1dbfb     66 7E 3E 00 
1dbff     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1dc03     7E 66 66 06 
1dc07     06 06 06 66 
1dc0b     66 7E 3C 00 
1dc0f     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1dc13     7E 66 66 66 
1dc17     66 66 66 66 
1dc1b     66 7E 3E 00 
1dc1f     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1dc23     7E 06 06 3E 
1dc27     3E 06 06 06 
1dc2b     06 7E 7E 00 
1dc2f     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1dc33     7E 06 06 3E 
1dc37     3E 06 06 06 
1dc3b     06 06 06 00 
1dc3f     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1dc43     7E 06 06 76 
1dc47     76 66 66 66 
1dc4b     66 7E 3C 00 
1dc4f     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1dc53     66 66 66 7E 
1dc57     7E 66 66 66 
1dc5b     66 66 66 00 
1dc5f     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1dc63     7E 18 18 18 
1dc67     18 18 18 18 
1dc6b     18 7E 7E 00 
1dc6f     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1dc73     60 60 60 60 
1dc77     60 60 60    | 	byte	$60[7]
1dc7a     66 66 7E 3C 
1dc7e     00 00 00 00 
1dc82     66 66 36 36 
1dc86     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
1dc8a     66 66 C6 C6 
1dc8e     00 00 00 00 
1dc92     06 06 06 06 
1dc96     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
1dc9a     06 06 7E 7E 
1dc9e     00 00 00 00 
1dca2     C6 C6 EE EE 
1dca6     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
1dcaa     C6 C6 C6 C6 
1dcae     00 00 00 00 
1dcb2     66 66 66 6E 
1dcb6     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
1dcba     76 66 66 66 
1dcbe     00 00 00 00 
1dcc2     3C 7E 66 66 
1dcc6     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1dcca     66 66 7E 3C 
1dcce     00 00 00 00 
1dcd2     3E 7E 66 66 
1dcd6     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
1dcda     06 06 06 06 
1dcde     00 00 00 00 
1dce2     3C 7E 66 66 
1dce6     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1dcea     66 56 3E 6C 
1dcee     00 00 00 00 
1dcf2     3E 7E 66 66 
1dcf6     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1dcfa     66 66 C6 C6 
1dcfe     00 00 00 00 
1dd02     7C 7E 06 06 
1dd06     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1dd0a     60 60 7E 3E 
1dd0e     00 00 00 00 
1dd12     7E 7E 18 18 
1dd16     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1dd1a     18 18 18 18 
1dd1e     00 00 00 00 
1dd22     66 66 66 66 
1dd26     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1dd2a     66 66 7E 3C 
1dd2e     00 00 00 00 
1dd32     66 66 66 66 
1dd36     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1dd3a     3C 3C 18 18 
1dd3e     00 00 00 00 
1dd42     C6 C6 C6 C6 
1dd46     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
1dd4a     FE EE C6 82 
1dd4e     00 00 00 00 
1dd52     66 66 66 3C 
1dd56     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
1dd5a     3C 66 66 66 
1dd5e     00 00 00 00 
1dd62     66 66 66 66 
1dd66     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
1dd6a     18 18 18 18 
1dd6e     00 00 00 00 
1dd72     7E 7E 30 30 
1dd76     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
1dd7a     06 06 7E 7E 
1dd7e     00 00 00 00 
1dd82     3C 3C 0C 0C 
1dd86     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
1dd8a     0C 0C 3C 3C 
1dd8e     00 00 00 00 
1dd92     06 06 0C 0C 
1dd96     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
1dd9a     60 60 C0 C0 
1dd9e     00 00 00 00 
1dda2     3C 3C 30 30 
1dda6     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
1ddaa     30 30 3C 3C 
1ddae     00 00 00 00 
1ddb2     18 18 3C 3C 
1ddb6     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
1ddba     00 00 00 00 
1ddbe     00 00 00 00 
1ddc2     00 00 00 00 
1ddc6     00 00 00 00 
1ddca     00 00       | 	byte	$00[18]
1ddcc     FE FE 00 00 
1ddd0     00 00 0C 0C 
1ddd4     18 18 00 00 
1ddd8     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
1dddc     00 00 00 00 
1dde0     00 00 00 00 
1dde4     00          | 	byte	$00[9]
1dde5     3C 7C 60 7C 
1dde9     7E 66 66 7E 
1dded     7C 00 00 00 
1ddf1     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
1ddf5     3E 7E 66 66 
1ddf9     66 66 66 7E 
1ddfd     3E 00 00 00 
1de01     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
1de05     3C 3E 06 06 
1de09     06 06 06 7E 
1de0d     7C 00 00 00 
1de11     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
1de15     7C 7E 66 66 
1de19     66 66 66 7E 
1de1d     7C 00 00 00 
1de21     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
1de25     3C 7E 66 66 
1de29     7E 06 06 7E 
1de2d     7C 00 00 00 
1de31     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
1de35     18 7E 7E 18 
1de39     18 18 18 18 
1de3d     18 00 00 00 
1de41     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1de45     7C 7E 66 66 
1de49     66 66 7E 7C 
1de4d     60 7E 3E 00 
1de51     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
1de55     3E 7E 66 66 
1de59     66 66 66 66 
1de5d     66 00 00 00 
1de61     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
1de65     1C 1C 18 18 
1de69     18 18 18 3C 
1de6d     3C 00 00 00 
1de71     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
1de75     30 30 30 30 
1de79     30 30 30 30 
1de7d     30          | 	byte	$30[9]
1de7e     3E 1E 00 00 
1de82     06 06 06 36 
1de86     36 1E 1E 1E 
1de8a     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
1de8e     00 00 00 00 
1de92     1C 1C 18 18 
1de96     18 18 18 18 
1de9a     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
1de9e     00 00 00 00 
1dea2     00 00 00    | 	byte	$00[7]
1dea5     6C FE FE D6 
1dea9     D6 C6 C6 C6 
1dead     C6 00 00 00 
1deb1     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
1deb5     3E 7E 66 66 
1deb9     66 66 66 66 
1debd     66 00 00 00 
1dec1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
1dec5     3C 7E 66 66 
1dec9     66 66 66 7E 
1decd     3C 00 00 00 
1ded1     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
1ded5     3E 7E 66 66 
1ded9     66 66 66 7E 
1dedd     3E 06 06 00 
1dee1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
1dee5     7C 7E 66 66 
1dee9     66 66 66 7E 
1deed     7C 60 60 00 
1def1     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
1def5     3E 7E 66 06 
1def9     06 06 06 06 
1defd     06 00 00 00 
1df01     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
1df05     7C 7E 06 0E 
1df09     3C 70 60 7E 
1df0d     3E 00 00 00 
1df11     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
1df15     7E 7E 18 18 
1df19     18 18 18 78 
1df1d     70 00 00 00 
1df21     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
1df25     66 66 66 66 
1df29     66 66 66    | 	byte	$66[7]
1df2c     7E 7C 00 00 
1df30     00 00 00 00 
1df34     00 66 66 66 
1df38     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
1df3c     18 18 00 00 
1df40     00 00 00 00 
1df44     00 C6 C6 D6 
1df48     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
1df4c     C6 82 00 00 
1df50     00 00 00 00 
1df54     00 66 66 3C 
1df58     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
1df5c     66 66 00 00 
1df60     00 00 00 00 
1df64     00 66 66 66 
1df68     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
1df6c     7C 60 7E 3E 
1df70     00 00 00 00 
1df74     00 7E 7E 30 
1df78     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1df7c     7E 7E 00 00 
1df80     00 00 30 18 
1df84     18 18 18 0C 
1df88     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
1df8c     18 30 00 00 
1df90     00 00 18 18 
1df94     18 18 18 18 
1df98     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1df9c     18 18 00 00 
1dfa0     00 00 0C 18 
1dfa4     18 18 18 30 
1dfa8     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
1dfac     18 0C 00 00 
1dfb0     00 00 6C 7E 
1dfb4     36 00 00 00 
1dfb8     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
1dfbc     00 00 00 00 
1dfc0     00 00 00 00 
1dfc4     00          | 	byte	$00[9]
1dfc5     18 18 18 18 
1dfc9     18 18 00 00 
1dfcd     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1dfd0     00 00 00 00 
1dfd4     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1dfd8     00 00 00 00 
1dfdc     00 80 80 80 
1dfe0     00 00 00 FF 
1dfe4     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1dfe8     00 00 00 00 
1dfec     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
1dfed     80 00 00 00 
1dff1     00 80 00 00 
1dff5     80 80 00 00 
1dff9     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
1dffd     80 00 80 00 
1e001     00 40 80 00 
1e005     AA AA AA 00 
1e009     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
1e00d     FF 00 00 00 
1e011     00 FF 00 00 
1e015     FF FF 00 00 
1e019     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
1e01d     FF 00 FF 00 
1e021     00 FF FF 00 
1e025     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1e028     00 00 00 00 
1e02c     00          | ataripalette   file "ataripalettep2.def"
1e02d     11 11 11 00 
1e031     22 22 22 00 
1e035     33 33 33 00 
1e039     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
1e03d     55 55 55 00 
1e041     66 66 66 00 
1e045     77 77 77 00 
1e049     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
1e04d     99 99 99 00 
1e051     AA AA AA 00 
1e055     BB BB BB 00 
1e059     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
1e05d     DD DD DD 00 
1e061     EE EE EE 00 
1e065     FF FF FF 00 
1e069     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
1e06d     00 14 40 00 
1e071     00 1E 60 00 
1e075     00 28 80 00 
1e079     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
1e07d     00 3C BF 00 
1e081     00 46 DF 00 
1e085     00 50 FF 00 
1e089     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
1e08d     39 77 FF 00 
1e091     55 8A FF 00 
1e095     71 9E FF 00 
1e099     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
1e09d     AA C5 FF 00 
1e0a1     C6 D8 FF 00 
1e0a5     E3 EC FF 00 
1e0a9     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
1e0ad     00 00 40 00 
1e0b1     00 00 60 00 
1e0b5     00 00 80 00 
1e0b9     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
1e0bd     00 00 BF 00 
1e0c1     00 00 DF 00 
1e0c5     00 00 FF 00 
1e0c9     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
1e0cd     39 39 FF 00 
1e0d1     55 55 FF 00 
1e0d5     71 71 FF 00 
1e0d9     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
1e0dd     AA AA FF 00 
1e0e1     C6 C6 FF 00 
1e0e5     E3 E3 FF 00 
1e0e9     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
1e0ed     20 00 40 00 
1e0f1     30 00 60 00 
1e0f5     40 00 80 00 
1e0f9     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
1e0fd     60 00 BF 00 
1e101     70 00 DF 00 
1e105     80 00 FF 00 
1e109     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
1e10d     9C 39 FF 00 
1e111     AA 55 FF 00 
1e115     B8 71 FF 00 
1e119     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
1e11d     D5 AA FF 00 
1e121     E3 C6 FF 00 
1e125     F1 E3 FF 00 
1e129     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
1e12d     40 00 40 00 
1e131     60 00 60 00 
1e135     80 00 80 00 
1e139     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
1e13d     BF 00 BF 00 
1e141     DF 00 DF 00 
1e145     FF 00 FF 00 
1e149     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
1e14d     FF 39 FF 00 
1e151     FF 55 FF 00 
1e155     FF 71 FF 00 
1e159     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
1e15d     FF AA FF 00 
1e161     FF C6 FF 00 
1e165     FF E3 FF 00 
1e169     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
1e16d     40 00 20 00 
1e171     60 00 30 00 
1e175     80 00 40 00 
1e179     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
1e17d     BF 00 60 00 
1e181     DF 00 70 00 
1e185     FF 00 80 00 
1e189     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
1e18d     FF 39 9C 00 
1e191     FF 55 AA 00 
1e195     FF 71 B8 00 
1e199     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
1e19d     FF AA D5 00 
1e1a1     FF C6 E3 00 
1e1a5     FF E3 F1 00 
1e1a9     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
1e1ad     40 00 00 00 
1e1b1     60 00 00 00 
1e1b5     80 00 00 00 
1e1b9     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
1e1bd     BF 00 00 00 
1e1c1     DF 00 00 00 
1e1c5     FF 00 00 00 
1e1c9     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
1e1cd     FF 39 39 00 
1e1d1     FF 55 55 00 
1e1d5     FF 71 71 00 
1e1d9     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
1e1dd     FF AA AA 00 
1e1e1     FF C6 C6 00 
1e1e5     FF E3 E3 00 
1e1e9     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
1e1ed     40 10 00 00 
1e1f1     60 18 00 00 
1e1f5     80 20 00 00 
1e1f9     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
1e1fd     BF 30 00 00 
1e201     DF 38 00 00 
1e205     FF 40 00 00 
1e209     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
1e20d     FF 6A 39 00 
1e211     FF 80 55 00 
1e215     FF 95 71 00 
1e219     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
1e21d     FF BF AA 00 
1e221     FF D5 C6 00 
1e225     FF EA E3 00 
1e229     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
1e22d     40 20 00 00 
1e231     60 30 00 00 
1e235     80 40 00 00 
1e239     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
1e23d     BF 60 00 00 
1e241     DF 70 00 00 
1e245     FF 80 00 00 
1e249     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
1e24d     FF 9C 39 00 
1e251     FF AA 55 00 
1e255     FF B8 71 00 
1e259     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
1e25d     FF D5 AA 00 
1e261     FF E3 C6 00 
1e265     FF F1 E3 00 
1e269     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
1e26d     40 30 00 00 
1e271     60 48 00 00 
1e275     80 60 00 00 
1e279     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
1e27d     BF 90 00 00 
1e281     DF A8 00 00 
1e285     FF C0 00 00 
1e289     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
1e28d     FF CE 39 00 
1e291     FF D5 55 00 
1e295     FF DC 71 00 
1e299     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
1e29d     FF EA AA 00 
1e2a1     FF F1 C6 00 
1e2a5     FF F8 E3 00 
1e2a9     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
1e2ad     30 40 00 00 
1e2b1     48 60 00 00 
1e2b5     60 80 00 00 
1e2b9     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
1e2bd     90 BF 00 00 
1e2c1     A8 DF 00 00 
1e2c5     C0 FF 00 00 
1e2c9     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
1e2cd     CE FF 39 00 
1e2d1     D5 FF 55 00 
1e2d5     DC FF 71 00 
1e2d9     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
1e2dd     EA FF AA 00 
1e2e1     F1 FF C6 00 
1e2e5     F8 FF E3 00 
1e2e9     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
1e2ed     00 40 00 00 
1e2f1     00 60 00 00 
1e2f5     00 80 00 00 
1e2f9     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
1e2fd     00 BF 00 00 
1e301     00 DF 00 00 
1e305     00 FF 00 00 
1e309     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
1e30d     39 FF 39 00 
1e311     55 FF 55 00 
1e315     71 FF 71 00 
1e319     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
1e31d     AA FF AA 00 
1e321     C6 FF C6 00 
1e325     E3 FF E3 00 
1e329     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
1e32d     00 40 14 00 
1e331     00 60 1E 00 
1e335     00 80 28 00 
1e339     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
1e33d     00 BF 3C 00 
1e341     00 DF 46 00 
1e345     00 FF 50 00 
1e349     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
1e34d     39 FF 77 00 
1e351     55 FF 8A 00 
1e355     71 FF 9E 00 
1e359     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
1e35d     AA FF C5 00 
1e361     C6 FF D8 00 
1e365     E3 FF EC 00 
1e369     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
1e36d     00 40 28 00 
1e371     00 60 3C 00 
1e375     00 80 50 00 
1e379     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
1e37d     00 BF 78 00 
1e381     00 DF 8C 00 
1e385     00 FF A0 00 
1e389     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
1e38d     39 FF B5 00 
1e391     55 FF C0 00 
1e395     71 FF CA 00 
1e399     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
1e39d     AA FF DF 00 
1e3a1     C6 FF EA 00 
1e3a5     E3 FF F4 00 
1e3a9     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
1e3ad     00 40 40 00 
1e3b1     00 60 60 00 
1e3b5     00 80 80 00 
1e3b9     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
1e3bd     00 BF BF 00 
1e3c1     00 DF DF 00 
1e3c5     00 FF FF 00 
1e3c9     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
1e3cd     39 FF FF 00 
1e3d1     55 FF FF 00 
1e3d5     71 FF FF 00 
1e3d9     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
1e3dd     AA FF FF 00 
1e3e1     C6 FF FF 00 
1e3e5     E3 FF FF 00 
1e3e9     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
1e3ed     00 28 40 00 
1e3f1     00 3C 60 00 
1e3f5     00 50 80 00 
1e3f9     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
1e3fd     00 78 BF 00 
1e401     00 8C DF 00 
1e405     00 A0 FF 00 
1e409     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
1e40d     39 B5 FF 00 
1e411     55 C0 FF 00 
1e415     71 CA FF 00 
1e419     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
1e41d     AA DF FF 00 
1e421     C6 EA FF 00 
1e425     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
1e428                 | '**********************************************************************************
1e428                 | '
1e428                 | '        Timings and colors definitions
1e428                 | '
1e428                 | '**********************************************************************************
1e428                 | 
1e428                 |    'streamer sets for text mode, to add to timings[0..5]
1e428                 | ' todo for the retromachine: 768x576
1e428                 | 
1e428                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
1e428     10 00 00 00 
1e42c     50 00 00 00 
1e430     14 00 00 00 
1e434     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1e438     70 00 00 00 
1e43c     08 00 00 00 
1e440     30 00 00 00 
1e444     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
1e448     10 00 00 00 
1e44c     10 00 00 00 
1e450     00 00 00 00 
1e454     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
1e458     E0 01 00 00 
1e45c     F6 32 24 15 
1e460     FB 6C C3 01 
1e464     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1e468                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
1e468     08 00 00 00 
1e46c     40 00 00 00 
1e470     08 00 00 00 
1e474     C0 03 00 00 | timings064      long   8,   64,    8 ,    960,     32,     8,      22,       24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
1e478     20 00 00 00 
1e47c     08 00 00 00 
1e480     16 00 00 00 
1e484     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
1e488     20 00 00 00 
1e48c     18 00 00 00 
1e490     40 00 00 00 
1e494     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
1e498     F0 01 00 00 
1e49c     46 D8 06 13 
1e4a0     FB 2D CB 01 
1e4a4     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $46, $d8, $06, $13, $fb, $2d, $cb, $01, $1c, $02, $00, $00
1e4a8                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
1e4a8     10 00 00 00 
1e4ac     40 00 00 00 
1e4b0     10 00 00 00 
1e4b4     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
1e4b8     08 00 00 00 
1e4bc     08 00 00 00 
1e4c0     08 00 00 00 
1e4c4     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
1e4c8     40 00 00 00 
1e4cc     20 00 00 00 
1e4d0     80 00 00 00 
1e4d4     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
1e4d8     E0 01 00 00 
1e4dc     70 AE E9 10 
1e4e0     FB 8B FF 01 
1e4e4     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
1e4e8     10 00 00 00 
1e4ec     42 00 00 00 
1e4f0     14 00 00 00 
1e4f4     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1e4f8     00 00 00 00 
1e4fc     08 00 00 00 
1e500     00 00 00 00 
1e504     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
1e508     10 00 00 00 
1e50c     10 00 00 00 
1e510     C0 00 00 00 
1e514     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
1e518     40 02 00 00 
1e51c     F6 32 24 15 
1e520     FB 6C C3 01 
1e524     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1e528     50 00 00 00 
1e52c     A0 00 00 00 
1e530     54 00 00 00 
1e534     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
1e538     08 00 00 00 
1e53c     08 00 00 00 
1e540     08 00 00 00 
1e544     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1e548     0C 00 00 00 
1e54c     08 00 00 00 
1e550     00 01 00 00 
1e554     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
1e558     E0 01 00 00 
1e55c     10 06 56 15 
1e560     FB 64 C3 01 
1e564     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
1e568     50 00 00 00 
1e56c     32 00 00 00 
1e570     50 00 00 00 
1e574     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1e578     08 00 00 00 
1e57c     08 00 00 00 
1e580     08 00 00 00 
1e584     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1e588     0C 00 00 00 
1e58c     08 00 00 00 
1e590     40 01 00 00 
1e594     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
1e598     E0 01 00 00 
1e59c     F2 CD 33 13 
1e5a0     FB 53 92 01 
1e5a4     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1e5a8     18 00 00 00 
1e5ac     30 00 00 00 
1e5b0     18 00 00 00 
1e5b4     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
1e5b8     08 00 00 00 
1e5bc     08 00 00 00 
1e5c0     08 00 00 00 
1e5c4     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1e5c8     0C 00 00 00 
1e5cc     08 00 00 00 
1e5d0     80 01 00 00 
1e5d4     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
1e5d8     E0 01 00 00 
1e5dc     F4 8F 11 11 
1e5e0     FB 3A 55 01 
1e5e4     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
1e5e8     20 00 00 00 
1e5ec     40 00 00 00 
1e5f0     22 00 00 00 
1e5f4     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1e5f8     00 00 00 00 
1e5fc     08 00 00 00 
1e600     00 00 00 00 
1e604     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
1e608     0C 00 00 00 
1e60c     08 00 00 00 
1e610     C0 01 00 00 
1e614     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
1e618     F0 01 00 00 
1e61c     F2 CD 33 13 
1e620     FB 53 92 01 
1e624     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1e628                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
1e628     00 75 C7 97 
1e62c     27 47 F6 0A 
1e630     05 79 CB 9B 
1e634     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
1e638                 | 
1e638     28 12 64 FD | hdmi            setq    #9
1e63c     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
1e640                 |            '     setq2   #255
1e640                 |             '    rdlong  $100, paletteptr 
1e640     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
1e644     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
1e648     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
1e64c     78 F9 02 F1 |                 add     ii,hbase
1e650     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
1e654     7B 0B 80 FF 
1e658     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
1e65c                 | 
1e65c     66 66 86 FF 
1e660     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
1e664                 | 
1e664                 | 
1e664                 | ''--------  frame rendering main loop  ---------------------------------------------------
1e664                 | 
1e664                 | p101
1e664     28 14 64 FD |                 setq    #10
1e668     00 DF 06 FB |                 rdlong  framebuf,  ptra
1e66c     28 1E 64 FD |                 setq    #15
1e670     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
1e674     71 99 02 FB |                 rdlong  border,borderptr
1e678                 | 
1e678     01 C4 06 F1 |                 add     frames,#1
1e67c     76 F5 02 F6 |                 mov     dlptr2,dlptr
1e680                 | 
1e680     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
1e684     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
1e688     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
1e68c     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
1e690                 |  '' up porch
1e690                 | 
1e690     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
1e694     49 FF 02 F6 |                 mov     hsync1,sync_001
1e698     37 A8 46 FB |                 callpa  i_upporch ,#blank
1e69c     72 01 68 FC |                 wrlong  #0,vblankptr
1e6a0                 |                 
1e6a0     1F EA 16 F4 |                 testb   paletteptr,#31 wc
1e6a4     29 FE 65 3D |          if_nc  setq2   #255
1e6a8     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
1e6ac                 | 
1e6ac                 | '' cursor blinking
1e6ac                 | 
1e6ac     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
1e6b0     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
1e6b4                 | 
1e6b4                 | '' main screen
1e6b4                 | 
1e6b4     00 BE 06 F6 |                 mov linenum,#0
1e6b8     00 18 07 F6 |                 mov rcnt,#0
1e6bc     00 1C 07 F6 |                 mov rcnt2a,#0
1e6c0                 | 
1e6c0                 | 
1e6c0     00 18 0F F2 | p301            cmp rcnt,#0 wz
1e6c4     18 00 90 AD |         if_z    jmp #p306
1e6c8     01 18 87 F1 |                 sub rcnt,#1
1e6cc     90 F7 02 F6 |                 mov dl,rdl
1e6d0     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
1e6d4     8F F7 02 A1 |    if_z        add dl,roffset  
1e6d8     7B 21 03 F6 |                 mov rdl,dl
1e6dc     04 00 90 FD |                 jmp #p307          
1e6e0                 |           
1e6e0                 |                 
1e6e0     7A F7 02 FB | p306            rdlong  dl,dlptr2
1e6e4     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
1e6e8     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
1e6ec     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
1e6f0                 | 
1e6f0                 | '' Special entry:
1e6f0                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
1e6f0                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
1e6f0                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
1e6f0                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
1e6f0                 | '' todo: set horizontal scroll (if needed)
1e6f0                 | 
1e6f0     02 FA 66 F0 |                 shl framebuf2,#2
1e6f4     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
1e6f8     04 22 0F F2 |                 cmp dlc,#%100 wz
1e6fc                 |   
1e6fc                 |                 
1e6fc     04 F4 06 F1 |                 add dlptr2,#4
1e700     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
1e704     7A 21 03 FB |                  rdlong rdl,dlptr2
1e708     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
1e70c     04 18 47 F0 |                  shr rcnt,#4
1e710                 |              
1e710     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
1e714     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
1e718                 |                 
1e718     04 1E 47 F0 |                  shr roffset,#4
1e71c     0C 1E 67 F0 |                  shl roffset,#12
1e720                 |   
1e720     9C FF 9F FD |                  jmp #p301
1e724                 |                  
1e724                 |                  
1e724                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
1e724     0C FA 46 F0 |                 shr     framebuf2,#12
1e728     02 FA 66 F0 |                 shl     framebuf2,#2
1e72c                 | 
1e72c     7B 03 E3 F8 |                 getbyte t1,dl,#0
1e730     00 02 0F F2 |                 cmp     t1,#0 wz
1e734     34 00 90 AD |     if_z        jmp     #borderline
1e738                 | 
1e738     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
1e73c     50 00 90 CD |           if_c   jmp     #textline
1e740     50 02 90 3D |           if_nc  jmp     #graphline
1e744                 | '
1e744     01 BE 06 F1 | p302            add     linenum,#1
1e748     04 F4 06 F1 |                 add     dlptr2,#4
1e74c     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
1e750     6C FF 9F 5D |          if_nz  jmp     #p301
1e754                 | 
1e754     72 03 68 FC | p112            wrlong  #1,vblankptr
1e758     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
1e75c                 | 
1e75c     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
1e760     4B FF 02 F6 |                 mov     hsync1,sync_223
1e764     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
1e768     F8 FE 9F FD |                 jmp     #p101
1e76c                 | 
1e76c                 | '' ---------------  END of frame rendering loop -------------------------------------------
1e76c                 | 
1e76c                 | 
1e76c     14 00 B0 FD | borderline      call    #hsync                      ' make a border
1e770     4C A1 C2 FC |                 xcont   m_vi,border
1e774     CC FF 9F FD |                 jmp     #p302
1e778                 | 
1e778                 | 
1e778     08 00 B0 FD | blank           call    #hsync                          'blank lines
1e77c     7E A1 C2 FC |                 xcont   m_vi,hsync0
1e780     FD ED 6F 0B |         _ret_   djnz    pa,#blank
1e784                 | 
1e784     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
1e788     7F 9D B2 FC |                 xzero   m_sn,hsync1
1e78c     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
1e790                 | 
1e790                 | 
1e790                 | 
1e790                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
1e790                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
1e790                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
1e790                 | 
1e790                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
1e790                 | 
1e790     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
1e794                 | 
1e794     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
1e798     7B 17 5B F8 |                 getnib  zoom, dl,#3
1e79c     03 16 07 F5 |                 and             zoom, #3
1e7a0                 | 
1e7a0                 | 
1e7a0                 | 
1e7a0     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
1e7a4     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
1e7a8     3F BC 06 F5 |                 and     linestart,#63
1e7ac     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
1e7b0     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
1e7b4                 | 
1e7b4     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
1e7b8                 | 
1e7b8                 |                        ' if fontline =0, get a border color
1e7b8                 | 
1e7b8     51 03 33 F9 | p102            getword t1,m_border,#0
1e7bc     00 02 0F F2 |                 cmp     t1, #0 wz
1e7c0     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1e7c4                 | 
1e7c4     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
1e7c8     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
1e7cc     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
1e7d0     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
1e7d4     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1e7d8     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
1e7dc     52 BB 02 F6 |                 mov m_lut2, m_lut1
1e7e0     6A BB 02 F1 |                 add m_lut2, lutt1
1e7e4     58 0F 03 F6 |                 mov cpl2,i_cpl
1e7e8                 | 
1e7e8     02 16 0F F2 |                cmp zoom,#2 wz
1e7ec     E4 00 90 AD |           if_z jmp #p420
1e7f0     01 16 0F F2 |                cmp zoom,#1 wz
1e7f4     64 00 90 AD |           if_z jmp #p410
1e7f8     00 16 0F F2 |                 cmp zoom,#0 wz
1e7fc     04 00 90 AD |           if_z jmp #p400
1e800     50 01 90 FD |                jmp #p430
1e804                 | 
1e804                 |                    '
1e804                 |  ''---------------------------------------------------------------------------------------------------------
1e804     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1e808     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1e80c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1e810     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1e814     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1e818     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1e81c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1e820     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1e824     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1e828     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1e82c                 | 
1e82c     81 BB C2 FC |                         xcont m_lut2,t1
1e830                 | 
1e830     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1e834     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1e838     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1e83c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1e840     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1e844     01 C0 86 F1 |                         sub     lutaddr,#1
1e848                 | 
1e848     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1e84c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1e850     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1e854                 | 
1e854     EB 0F 6F FB |                         djnz   cpl2,#p400
1e858     28 01 90 FD |  p401                   jmp    #p103
1e85c                 | 
1e85c                 | ''------------------------------------------------------------------------------------------------------------
1e85c                 | 
1e85c     01 0E 47 F0 |  p410                   shr cpl2,#1
1e860                 | 
1e860                 | ''---------------------------------------------------------------------------------------------------------
1e860     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
1e864     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1e868     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1e86c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1e870     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1e874     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1e878     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1e87c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1e880     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1e884     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1e888                 | 
1e888                 | 
1e888     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
1e88c     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
1e890     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
1e894     03 02 07 FA |                         mul t1,#3
1e898     81 BB C2 FC |                         xcont m_lut2,t1
1e89c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1e8a0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1e8a4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1e8a8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1e8ac     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1e8b0     01 C0 86 F1 |                         sub     lutaddr,#1
1e8b4     63 06 63 FD |                         mergew t3
1e8b8     03 06 07 FA |                         mul t3,#3
1e8bc     83 BB C2 FC |                         xcont m_lut2,t3
1e8c0                 | 
1e8c0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1e8c4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1e8c8                 | 
1e8c8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1e8cc                 | 
1e8cc     E4 0F 6F FB |                         djnz   cpl2,#p412
1e8d0     B0 00 90 FD |  p411                   jmp    #p103
1e8d4                 | 
1e8d4                 | ''------------------------------------------------------------------------------------------------------------
1e8d4                 | 
1e8d4     02 0E 47 F0 |  p420                   shr cpl2,#2
1e8d8                 | 
1e8d8                 | ''---------------------------------------------------------------------------------------
1e8d8     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
1e8dc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1e8e0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1e8e4     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1e8e8     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1e8ec     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1e8f0     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1e8f4     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1e8f8     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1e8fc     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1e900                 | 
1e900     61 02 63 FD |                         mergeb t1
1e904     81 07 3B F9 |                         getword t3,t1,#1
1e908     0F 02 07 FA |                         mul t1,#15
1e90c     81 BB C2 FC |                         xcont m_lut2,t1
1e910                 | 
1e910     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1e914     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1e918     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1e91c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1e920     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1e924     01 C0 86 F1 |                         sub     lutaddr,#1
1e928                 | 
1e928     81 09 EB F8 |                         getbyte t4,t1,#1        '
1e92c     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
1e930                 | 
1e930     0F 06 07 FA |                         mul t3,#15
1e934     83 BB C2 FC |                         xcont m_lut2,t3
1e938                 | 
1e938     83 0B EB F8 |                         getbyte t5,t3,#1
1e93c     85 BB C2 FC |                         xcont m_lut2, t5
1e940     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1e944     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1e948                 | 
1e948     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1e94c                 | 
1e94c     E2 0F 6F FB |                         djnz   cpl2,#p422
1e950     30 00 90 FD |  p421                   jmp    #p103
1e954                 | 
1e954                 | '--------------------------------------------------------------------------------------------------------------
1e954                 | 
1e954     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
1e958     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1e95c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1e960                 | 
1e960     00 BA C6 FC |                         xcont m_lut2,#0
1e964                 | 
1e964     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1e968     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1e96c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1e970     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1e974     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1e978     01 C0 86 F1 |                         sub     lutaddr,#1
1e97c                 | 
1e97c     F5 0F 6F FB |                         djnz   cpl2,#p430
1e980     00 00 90 FD |  p431                   jmp    #p103
1e984                 | 
1e984                 | ''------------------------------------------------------------------------------------------------------------
1e984                 | 
1e984                 | 
1e984                 | 
1e984     51 25 33 F9 | p103            getword  mb2,m_border,#0
1e988     00 24 0F F2 |                 cmp      mb2, #0 wz
1e98c     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1e990                 | 
1e990     B0 FD 9F FD |                 jmp #p302
1e994                 | 
1e994                 | '' -------------------------------------- END of text line ---------------------------------
1e994                 | 
1e994                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1e994                 | 
1e994     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1e998                 | 
1e998                 | 
1e998     51 25 33 F9 | p202            getword mb2,m_border,#0
1e99c     00 24 0F F2 |                 cmp     mb2, #0 wz
1e9a0     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1e9a4                 | 
1e9a4                 | '----------------------------------------- display pixels
1e9a4                 | 
1e9a4     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1e9a8     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1e9ac                 | 
1e9ac     7B 17 5B F8 |                 getnib  zoom, dl,#3
1e9b0     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1e9b4                 | 
1e9b4     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1e9b8     0C BC 06 F5 |                 and     colordepth,#12
1e9bc                 | 
1e9bc     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1e9c0     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1e9c4     64 00 90 AD |           if_z  jmp     #p240
1e9c8                 | 
1e9c8     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1e9cc     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1e9d0     98 00 90 AD |           if_z  jmp     #p250
1e9d4                 | 
1e9d4     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1e9d8     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1e9dc     FC 00 90 AD |           if_z  jmp     #p260
1e9e0                 | 
1e9e0     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1e9e4                 | 
1e9e4                 | '' --- 8 bit color modes
1e9e4                 | 
1e9e4     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1e9e8     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1e9ec                 | 
1e9ec     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1e9f0     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1e9f4                 |        
1e9f4                 |  '  
1e9f4     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1e9f8     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1e9fc                 |     
1e9fc                 |  
1e9fc     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1ea00     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1ea04                 |         
1ea04                 | 
1ea04                 |         
1ea04     7D 11 03 FB | p235               rdlong  char,framebuf2
1ea08     32 0C 63 FD |                    skipf skippattern
1ea0c     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1ea10     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1ea14     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1ea18     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1ea1c     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1ea20     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1ea24     F7 0F 6F FB |                    djnz    cpl2,#p235
1ea28                 | 
1ea28     20 01 90 FD |                jmp    #p203
1ea2c                 |                   
1ea2c                 | 
1ea2c                 | 
1ea2c                 | '' --- 1 bit color modes
1ea2c                 | 
1ea2c     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1ea30     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1ea34                 | 
1ea34     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1ea38     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1ea3c     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1ea40                 | 
1ea40                 | 
1ea40     7D 11 E3 FA | p241               rdword  char,framebuf2
1ea44     44 10 FF F9 |                    movbyts char,#%01000100
1ea48     63 10 63 FD |                    mergew  char
1ea4c     32 0C 63 FD |                    skipf skippattern
1ea50     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1ea54     63 10 63 FD |                    mergew  char                    ' 1 0
1ea58     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1ea5c     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1ea60     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1ea64     F6 0F 6F FB |                    djnz   cpl2,#p241
1ea68                 | 
1ea68                 | 
1ea68     E0 00 90 FD |                jmp    #p203
1ea6c                 | 
1ea6c                 | '' --- 2 bit color modes
1ea6c                 | 
1ea6c     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1ea70     C8 00 90 AD |        if_z   jmp #p251
1ea74                 | 
1ea74     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1ea78     30 00 90 AD |        if_z   jmp #p252
1ea7c                 | 
1ea7c                 | 
1ea7c     7D 11 C3 FA | p254               rdbyte char,framebuf2
1ea80     04 0A 07 F6 |                    mov  t5,#4
1ea84     02 10 67 F0 | p255               shl  char,#2
1ea88     88 03 53 F8 |                    getnib  t1,char,#2
1ea8c     03 02 07 F5 |                    and     t1,#3
1ea90     55 02 07 FA |                    mul     t1,#$55
1ea94     81 05 03 F9 |                    rolbyte  t2,t1,#0
1ea98     FA 0B 6F FB |                    djnz    t5,#p255
1ea9c     82 BB C2 FC |                    xcont   m_lut2,t2
1eaa0     01 FA 06 F1 |                    add     framebuf2,#1
1eaa4     F5 0F 6F FB |                    djnz    cpl2,#p254
1eaa8     A0 00 90 FD |                    jmp     #p203
1eaac                 | 
1eaac     7D 11 E3 FA | p252               rdword char,framebuf2
1eab0     08 0A 07 F6 |                    mov  t5,#8
1eab4     02 10 67 F0 | p253               shl  char,#2
1eab8     88 03 63 F8 |                    getnib  t1,char,#4
1eabc     03 02 07 F5 |                    and     t1,#3
1eac0     05 02 07 FA |                    mul     t1,#5
1eac4     81 05 83 F8 |                    rolnib  t2,t1,#0
1eac8     FA 0B 6F FB |                    djnz    t5,#p253
1eacc     82 BB C2 FC |                    xcont   m_lut2,t2
1ead0     02 FA 06 F1 |                    add     framebuf2,#2
1ead4     F5 0F 6F FB |                    djnz    cpl2,#p252
1ead8     70 00 90 FD |                    jmp     #p203
1eadc                 | 
1eadc                 | '' ------ 4 bit color modes
1eadc                 | 
1eadc     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1eae0     58 00 90 AD |        if_z   jmp #p251
1eae4                 | 
1eae4     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1eae8     2C 00 90 AD |        if_z   jmp #p262
1eaec                 | 
1eaec                 | 
1eaec     7D 11 C3 FA | p263               rdbyte char,framebuf2
1eaf0     02 0A DC FC |                            rep #5,#2
1eaf4     88 05 8B F8 |                              rolnib t2,char,#1
1eaf8     88 05 8B F8 |                                  rolnib t2,char,#1
1eafc     88 05 8B F8 |                              rolnib t2,char,#1
1eb00     88 05 8B F8 |                                  rolnib t2,char,#1
1eb04     04 10 67 F0 |                              shl char,#4
1eb08     82 BB C2 FC |                    xcont   m_lut2,t2
1eb0c     01 FA 06 F1 |                    add     framebuf2,#1
1eb10     F6 0F 6F FB |                    djnz    cpl2,#p263
1eb14     34 00 90 FD |                    jmp     #p203
1eb18                 | 
1eb18     7D 11 E3 FA | p262               rdword  char,framebuf2
1eb1c     04 06 DC FC |                            rep #3,#4
1eb20     88 05 9B F8 |                              rolnib t2,char,#3
1eb24     88 05 9B F8 |                                  rolnib t2,char,#3
1eb28     04 10 67 F0 |                              shl char,#4
1eb2c     82 BB C2 FC |                    xcont   m_lut2,t2
1eb30     02 FA 06 F1 |                    add     framebuf2,#2
1eb34     F8 0F 6F FB |                    djnz    cpl2,#p262
1eb38     10 00 90 FD |                    jmp     #p203
1eb3c                 | 
1eb3c                 | ''---------- all color modes without zoom
1eb3c                 | 
1eb3c     87 07 D8 FC | p251               rep  #3,cpl2
1eb40     7D 11 03 FB |                    rdlong  char,framebuf2
1eb44     04 FA 06 F1 |                    add     framebuf2,#4
1eb48     88 BB C2 FC |                    xcont   m_lut2,char
1eb4c                 |           
1eb4c                 |  ''-----------------------------------------------------------------------------------------
1eb4c                 | p203           ' getword  mb2,m_border,#0
1eb4c     00 24 0F F2 |                 cmp      mb2, #0 wz
1eb50     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1eb54                 | 
1eb54     EC FB 9F FD |                 jmp #p302
1eb58                 | 
1eb58                 | '' -------------------------------------- END of graph  line ---------------------------------
1eb58                 | 
1eb58                 | '' consts and vars
1eb58                 | 
1eb58     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1eb5c     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1eb60     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1eb64     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1eb68                 | 
1eb68     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1eb6c                 | 
1eb6c                 | '------ these longs will be set by setmode function
1eb6c                 | 
1eb6c     00 00 00 00 | m_bs            long    0        'blanks before sync
1eb70     00 00 00 00 | m_sn            long    0        'sync
1eb74     00 00 00 00 | m_bv            long    0        'blanks before visible
1eb78     00 00 00 00 | m_vi            long    0        'visible pixels #
1eb7c     00 00 00 00 | m_border        long    0        'left/right borders
1eb80     00 00 00 00 | m_lut1          long    0        'characters
1eb84     00 00 00 00 | i_vborder       long    0        'up/down borders
1eb88     00 00 00 00 | i_upporch       long    0        'up porch lines
1eb8c     00 00 00 00 | i_vsync         long    0        'vsync lines
1eb90     00 00 00 00 | i_downporch     long    0        'down porch lines
1eb94     00 00 00 00 | i_modenum       long    0        'mode #
1eb98     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1eb9c     00 00 00 00 | i_lines         long    0        'scanlines #
1eba0     00 00 00 00 | i_clock         long    0
1eba4     00 00 00 00 | i_hubset        long    0
1eba8     00 00 00 00 | i_totalvis      long    0
1ebac                 | 
1ebac                 | '-------------------------------------
1ebac                 | 
1ebac     00 00 00 00 | m_lut2          long    0
1ebb0                 | 
1ebb0                 | colordepth
1ebb0     00 00 00 00 | linestart       long    0
1ebb4     00 00 00 00 | linenum         long    0
1ebb8     00 01 00 00 | lutaddr         long    256
1ebbc                 | 
1ebbc     0E 00 00 00 | cursorsh        long    14
1ebc0     00 00 00 00 | frames          long    0
1ebc4     00 00 00 00 | cursorx         long    0
1ebc8     00 00 00 00 | cursory         long    0
1ebcc     00 00 00 00 | cursorpos       long    0
1ebd0     00 00 00 00 | cursorpos2      long    0
1ebd4     00 00 00 00 | fontstart       long    0
1ebd8     00 00 00 00 | border2         long 0
1ebdc     00 00 81 70 | lutiv           long $70810000
1ebe0     00 00 88 00 | lutt1           long $00880000
1ebe4     00 00 80 00 | lutg1           long $00800000
1ebe8     00 00 80 10 | lutg2           long $10800000
1ebec     00 00 80 20 | lutg4           long $20800000
1ebf0     00 00 80 30 | lutg8           long $30800000
1ebf4     00 00 00 00 | framebuf        long 0
1ebf8     00 00 00 00 | fontbuf         long 0
1ebfc     00 00 00 00 | borderptr       long 0
1ec00     00 00 00 00 | vblankptr       long 0
1ec04     00 00 00 00 | cursorptr       long 0
1ec08     00 00 00 00 | modeptr         long 0
1ec0c     00 00 00 00 | paletteptr      long 0
1ec10     00 00 00 00 | dlptr           long 0
1ec14                 | fontnumptr      res     1
1ec14                 | fontnumptr      res     1
1ec14                 | hbase           res     1
1ec14                 | hbase           res     1
1ec14                 | borderptr2      res     1
1ec14                 | borderptr2      res     1
1ec14                 | dlptr2 res 1
1ec14                 | dlptr2 res 1
1ec14                 | dl              res 1
1ec14                 | dl              res 1
1ec14                 | ii              res     1
1ec14                 | ii              res     1
1ec14                 | framebuf2       res     1
1ec14                 | framebuf2       res     1
1ec14                 | hsync0          res     1
1ec14                 | hsync0          res     1
1ec14                 | hsync1          res     1
1ec14                 | hsync1          res     1
1ec14                 | fontline        res     1
1ec14                 | fontline        res     1
1ec14                 | t1              res     1
1ec14                 | t1              res     1
1ec14                 | t2              res     1
1ec14                 | t2              res     1
1ec14                 | t3 res 1
1ec14                 | t3 res 1
1ec14                 | t4 res 1
1ec14                 | t4 res 1
1ec14                 | t5 res 1
1ec14                 | t5 res 1
1ec14                 | skippattern res 1
1ec14                 | skippattern res 1
1ec14                 | cpl2 res 1
1ec14                 | cpl2 res 1
1ec14                 | char            res     1
1ec14                 | char            res     1
1ec14                 | backcolor       res     1
1ec14                 | backcolor       res     1
1ec14                 | charcolor       res     1
1ec14                 | charcolor       res     1
1ec14                 | zoom res 1
1ec14                 | zoom res 1
1ec14     00 00 00 00 | rcnt long 0 'dl repeat count
1ec18     00 00 00 00 | rcnt2 long 0
1ec1c     00 00 00 00 | rcnt2a long 0
1ec20     00 00 00 00 | roffset long 0
1ec24     00 00 00 00 | rdl long 0  'dl repeat line
1ec28     00 00 00 00 | dlc long 0 'dl command
1ec2c     00 00 00 00 | mb2 long 0
1ec30     00 00 00 00 | aend             long 0
1ec34                 |                 fit     496                     '
1ec34                 | _trackerplayer_spin2_dat_
1ec34                 | 
1ec34     00 00 00 00 | null             long  0
1ec38     46 52 45 51 
1ec3c     46 52 45 51 
1ec40     46 52 45 51 
1ec44     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1ec48     46 52 45 51 
1ec4c     46 52 45 51 
1ec50     46 52 45 51 
1ec54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec58     46 52 45 51 
1ec5c     46 52 45 51 
1ec60     46 52 45 51 
1ec64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec68     46 52 45 51 
1ec6c     46 52 45 51 
1ec70     46 52 45 51 
1ec74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec78     46 52 45 51 
1ec7c     46 52 45 51 
1ec80     46 52 45 51 
1ec84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec88     46 52 45 51 
1ec8c     46 52 45 51 
1ec90     46 52 45 51 
1ec94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ec98     46 52 45 51 
1ec9c     46 52 45 51 
1eca0     46 52 45 51 
1eca4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eca8     46 52 45 51 
1ecac     46 52 45 51 
1ecb0     46 52 45 51 
1ecb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ecb8     46 52 45 51 
1ecbc     46 52 45 51 
1ecc0     46 52 45 51 
1ecc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ecc8     46 52 45 51 
1eccc     46 52 45 51 
1ecd0     46 52 45 51 
1ecd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ecd8     46 52 45 51 
1ecdc     46 52 45 51 
1ece0     46 52 45 51 
1ece4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ece8     46 52 45 51 
1ecec     46 52 45 51 
1ecf0     46 52 45 51 
1ecf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ecf8     46 52 45 51 
1ecfc     46 52 45 51 
1ed00     46 52 45 51 
1ed04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed08     46 52 45 51 
1ed0c     46 52 45 51 
1ed10     46 52 45 51 
1ed14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed18     46 52 45 51 
1ed1c     46 52 45 51 
1ed20     46 52 45 51 
1ed24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed28     46 52 45 51 
1ed2c     46 52 45 51 
1ed30     46 52 45 51 
1ed34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed38     46 52 45 51 
1ed3c     46 52 45 51 
1ed40     46 52 45 51 
1ed44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed48     46 52 45 51 
1ed4c     46 52 45 51 
1ed50     46 52 45 51 
1ed54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed58     46 52 45 51 
1ed5c     46 52 45 51 
1ed60     46 52 45 51 
1ed64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed68     46 52 45 51 
1ed6c     46 52 45 51 
1ed70     46 52 45 51 
1ed74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed78     46 52 45 51 
1ed7c     46 52 45 51 
1ed80     46 52 45 51 
1ed84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed88     46 52 45 51 
1ed8c     46 52 45 51 
1ed90     46 52 45 51 
1ed94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ed98     46 52 45 51 
1ed9c     46 52 45 51 
1eda0     46 52 45 51 
1eda4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eda8     46 52 45 51 
1edac     46 52 45 51 
1edb0     46 52 45 51 
1edb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1edb8     46 52 45 51 
1edbc     46 52 45 51 
1edc0     46 52 45 51 
1edc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1edc8     46 52 45 51 
1edcc     46 52 45 51 
1edd0     46 52 45 51 
1edd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1edd8     46 52 45 51 
1eddc     46 52 45 51 
1ede0     46 52 45 51 
1ede4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ede8     46 52 45 51 
1edec     46 52 45 51 
1edf0     46 52 45 51 
1edf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1edf8     46 52 45 51 
1edfc     46 52 45 51 
1ee00     46 52 45 51 
1ee04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee08     46 52 45 51 
1ee0c     46 52 45 51 
1ee10     46 52 45 51 
1ee14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee18     46 52 45 51 
1ee1c     46 52 45 51 
1ee20     46 52 45 51 
1ee24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee28     46 52 45 51 
1ee2c     46 52 45 51 
1ee30     46 52 45 51 
1ee34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee38     46 52 45 51 
1ee3c     46 52 45 51 
1ee40     46 52 45 51 
1ee44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee48     46 52 45 51 
1ee4c     46 52 45 51 
1ee50     46 52 45 51 
1ee54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee58     46 52 45 51 
1ee5c     46 52 45 51 
1ee60     46 52 45 51 
1ee64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee68     46 52 45 51 
1ee6c     46 52 45 51 
1ee70     46 52 45 51 
1ee74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee78     46 52 45 51 
1ee7c     46 52 45 51 
1ee80     46 52 45 51 
1ee84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee88     46 52 45 51 
1ee8c     46 52 45 51 
1ee90     46 52 45 51 
1ee94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ee98     46 52 45 51 
1ee9c     46 52 45 51 
1eea0     46 52 45 51 
1eea4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eea8     46 52 45 51 
1eeac     46 52 45 51 
1eeb0     46 52 45 51 
1eeb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eeb8     46 52 45 51 
1eebc     46 52 45 51 
1eec0     46 52 45 51 
1eec4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eec8     46 52 45 51 
1eecc     46 52 45 51 
1eed0     46 52 45 51 
1eed4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eed8     46 52 45 51 
1eedc     46 52 45 51 
1eee0     46 52 45 51 
1eee4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eee8     46 52 45 51 
1eeec     46 52 45 51 
1eef0     46 52 45 51 
1eef4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eef8     46 52 45 51 
1eefc     46 52 45 51 
1ef00     46 52 45 51 
1ef04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef08     46 52 45 51 
1ef0c     46 52 45 51 
1ef10     46 52 45 51 
1ef14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef18     46 52 45 51 
1ef1c     46 52 45 51 
1ef20     46 52 45 51 
1ef24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef28     46 52 45 51 
1ef2c     46 52 45 51 
1ef30     46 52 45 51 
1ef34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef38     46 52 45 51 
1ef3c     46 52 45 51 
1ef40     46 52 45 51 
1ef44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef48     46 52 45 51 
1ef4c     46 52 45 51 
1ef50     46 52 45 51 
1ef54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef58     46 52 45 51 
1ef5c     46 52 45 51 
1ef60     46 52 45 51 
1ef64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef68     46 52 45 51 
1ef6c     46 52 45 51 
1ef70     46 52 45 51 
1ef74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef78     46 52 45 51 
1ef7c     46 52 45 51 
1ef80     46 52 45 51 
1ef84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef88     46 52 45 51 
1ef8c     46 52 45 51 
1ef90     46 52 45 51 
1ef94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ef98     46 52 45 51 
1ef9c     46 52 45 51 
1efa0     46 52 45 51 
1efa4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1efa8     46 52 45 51 
1efac     46 52 45 51 
1efb0     46 52 45 51 
1efb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1efb8     46 52 45 51 
1efbc     46 52 45 51 
1efc0     46 52 45 51 
1efc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1efc8     46 52 45 51 
1efcc     46 52 45 51 
1efd0     46 52 45 51 
1efd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1efd8     46 52 45 51 
1efdc     46 52 45 51 
1efe0     46 52 45 51 
1efe4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1efe8     46 52 45 51 
1efec     46 52 45 51 
1eff0     46 52 45 51 
1eff4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1eff8     46 52 45 51 
1effc     46 52 45 51 
1f000     46 52 45 51 
1f004     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f008     46 52 45 51 
1f00c     46 52 45 51 
1f010     46 52 45 51 
1f014     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f018     46 52 45 51 
1f01c     46 52 45 51 
1f020     46 52 45 51 
1f024     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f028     46 52 45 51 
1f02c     46 52 45 51 
1f030     46 52 45 51 
1f034     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f038     46 52 45 51 
1f03c     46 52 45 51 
1f040     46 52 45 51 
1f044     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f048     46 52 45 51 
1f04c     46 52 45 51 
1f050     46 52 45 51 
1f054     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f058     46 52 45 51 
1f05c     46 52 45 51 
1f060     46 52 45 51 
1f064     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f068     46 52 45 51 
1f06c     46 52 45 51 
1f070     46 52 45 51 
1f074     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f078     46 52 45 51 
1f07c     46 52 45 51 
1f080     46 52 45 51 
1f084     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f088     46 52 45 51 
1f08c     46 52 45 51 
1f090     46 52 45 51 
1f094     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f098     46 52 45 51 
1f09c     46 52 45 51 
1f0a0     46 52 45 51 
1f0a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0a8     46 52 45 51 
1f0ac     46 52 45 51 
1f0b0     46 52 45 51 
1f0b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0b8     46 52 45 51 
1f0bc     46 52 45 51 
1f0c0     46 52 45 51 
1f0c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0c8     46 52 45 51 
1f0cc     46 52 45 51 
1f0d0     46 52 45 51 
1f0d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0d8     46 52 45 51 
1f0dc     46 52 45 51 
1f0e0     46 52 45 51 
1f0e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0e8     46 52 45 51 
1f0ec     46 52 45 51 
1f0f0     46 52 45 51 
1f0f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f0f8     46 52 45 51 
1f0fc     46 52 45 51 
1f100     46 52 45 51 
1f104     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f108     46 52 45 51 
1f10c     46 52 45 51 
1f110     46 52 45 51 
1f114     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f118     46 52 45 51 
1f11c     46 52 45 51 
1f120     46 52 45 51 
1f124     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f128     46 52 45 51 
1f12c     46 52 45 51 
1f130     46 52 45 51 
1f134     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f138     46 52 45 51 
1f13c     46 52 45 51 
1f140     46 52 45 51 
1f144     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f148     46 52 45 51 
1f14c     46 52 45 51 
1f150     46 52 45 51 
1f154     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f158     46 52 45 51 
1f15c     46 52 45 51 
1f160     46 52 45 51 
1f164     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f168     46 52 45 51 
1f16c     46 52 45 51 
1f170     46 52 45 51 
1f174     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f178     46 52 45 51 
1f17c     46 52 45 51 
1f180     46 52 45 51 
1f184     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f188     46 52 45 51 
1f18c     46 52 45 51 
1f190     46 52 45 51 
1f194     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f198     46 52 45 51 
1f19c     46 52 45 51 
1f1a0     46 52 45 51 
1f1a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f1a8     46 52 45 51 
1f1ac     46 52 45 51 
1f1b0     46 52 45 51 
1f1b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f1b8     46 52 45 51 
1f1bc     46 52 45 51 
1f1c0     46 52 45 51 
1f1c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f1c8     46 52 45 51 
1f1cc     46 52 45 51 
1f1d0     46 52 45 51 
1f1d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f1d8     46 52 45 51 
1f1dc     46 52 45 51 
1f1e0     46 52 45 51 
1f1e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f1e8     46 52 45 51 
1f1ec     46 52 45 51 
1f1f0     46 52 45 51 
1f1f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f1f8     46 52 45 51 
1f1fc     46 52 45 51 
1f200     46 52 45 51 
1f204     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f208     46 52 45 51 
1f20c     46 52 45 51 
1f210     46 52 45 51 
1f214     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f218     46 52 45 51 
1f21c     46 52 45 51 
1f220     46 52 45 51 
1f224     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f228     46 52 45 51 
1f22c     46 52 45 51 
1f230     46 52 45 51 
1f234     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f238     46 52 45 51 
1f23c     46 52 45 51 
1f240     46 52 45 51 
1f244     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f248     46 52 45 51 
1f24c     46 52 45 51 
1f250     46 52 45 51 
1f254     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f258     46 52 45 51 
1f25c     46 52 45 51 
1f260     46 52 45 51 
1f264     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f268     46 52 45 51 
1f26c     46 52 45 51 
1f270     46 52 45 51 
1f274     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f278     46 52 45 51 
1f27c     46 52 45 51 
1f280     46 52 45 51 
1f284     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f288     46 52 45 51 
1f28c     46 52 45 51 
1f290     46 52 45 51 
1f294     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f298     46 52 45 51 
1f29c     46 52 45 51 
1f2a0     46 52 45 51 
1f2a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f2a8     46 52 45 51 
1f2ac     46 52 45 51 
1f2b0     46 52 45 51 
1f2b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f2b8     46 52 45 51 
1f2bc     46 52 45 51 
1f2c0     46 52 45 51 
1f2c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f2c8     46 52 45 51 
1f2cc     46 52 45 51 
1f2d0     46 52 45 51 
1f2d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f2d8     46 52 45 51 
1f2dc     46 52 45 51 
1f2e0     46 52 45 51 
1f2e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f2e8     46 52 45 51 
1f2ec     46 52 45 51 
1f2f0     46 52 45 51 
1f2f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f2f8     46 52 45 51 
1f2fc     46 52 45 51 
1f300     46 52 45 51 
1f304     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f308     46 52 45 51 
1f30c     46 52 45 51 
1f310     46 52 45 51 
1f314     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f318     46 52 45 51 
1f31c     46 52 45 51 
1f320     46 52 45 51 
1f324     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f328     46 52 45 51 
1f32c     46 52 45 51 
1f330     46 52 45 51 
1f334     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f338     46 52 45 51 
1f33c     46 52 45 51 
1f340     46 52 45 51 
1f344     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f348     46 52 45 51 
1f34c     46 52 45 51 
1f350     46 52 45 51 
1f354     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f358     46 52 45 51 
1f35c     46 52 45 51 
1f360     46 52 45 51 
1f364     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f368     46 52 45 51 
1f36c     46 52 45 51 
1f370     46 52 45 51 
1f374     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f378     46 52 45 51 
1f37c     46 52 45 51 
1f380     46 52 45 51 
1f384     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f388     46 52 45 51 
1f38c     46 52 45 51 
1f390     46 52 45 51 
1f394     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f398     46 52 45 51 
1f39c     46 52 45 51 
1f3a0     46 52 45 51 
1f3a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f3a8     46 52 45 51 
1f3ac     46 52 45 51 
1f3b0     46 52 45 51 
1f3b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f3b8     46 52 45 51 
1f3bc     46 52 45 51 
1f3c0     46 52 45 51 
1f3c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f3c8     46 52 45 51 
1f3cc     46 52 45 51 
1f3d0     46 52 45 51 
1f3d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f3d8     46 52 45 51 
1f3dc     46 52 45 51 
1f3e0     46 52 45 51 
1f3e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f3e8     46 52 45 51 
1f3ec     46 52 45 51 
1f3f0     46 52 45 51 
1f3f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f3f8     46 52 45 51 
1f3fc     46 52 45 51 
1f400     46 52 45 51 
1f404     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f408     46 52 45 51 
1f40c     46 52 45 51 
1f410     46 52 45 51 
1f414     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f418     46 52 45 51 
1f41c     46 52 45 51 
1f420     46 52 45 51 
1f424     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f428     46 52 45 51 
1f42c     46 52 45 51 
1f430     46 52 45 51 
1f434     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f438     46 52 45 51 
1f43c     46 52 45 51 
1f440     46 52 45 51 
1f444     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f448     46 52 45 51 
1f44c     46 52 45 51 
1f450     46 52 45 51 
1f454     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f458     46 52 45 51 
1f45c     46 52 45 51 
1f460     46 52 45 51 
1f464     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f468     46 52 45 51 
1f46c     46 52 45 51 
1f470     46 52 45 51 
1f474     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f478     46 52 45 51 
1f47c     46 52 45 51 
1f480     46 52 45 51 
1f484     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f488     46 52 45 51 
1f48c     46 52 45 51 
1f490     46 52 45 51 
1f494     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f498     46 52 45 51 
1f49c     46 52 45 51 
1f4a0     46 52 45 51 
1f4a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f4a8     46 52 45 51 
1f4ac     46 52 45 51 
1f4b0     46 52 45 51 
1f4b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f4b8     46 52 45 51 
1f4bc     46 52 45 51 
1f4c0     46 52 45 51 
1f4c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f4c8     46 52 45 51 
1f4cc     46 52 45 51 
1f4d0     46 52 45 51 
1f4d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f4d8     46 52 45 51 
1f4dc     46 52 45 51 
1f4e0     46 52 45 51 
1f4e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f4e8     46 52 45 51 
1f4ec     46 52 45 51 
1f4f0     46 52 45 51 
1f4f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f4f8     46 52 45 51 
1f4fc     46 52 45 51 
1f500     46 52 45 51 
1f504     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f508     46 52 45 51 
1f50c     46 52 45 51 
1f510     46 52 45 51 
1f514     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f518     46 52 45 51 
1f51c     46 52 45 51 
1f520     46 52 45 51 
1f524     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f528     46 52 45 51 
1f52c     46 52 45 51 
1f530     46 52 45 51 
1f534     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f538     46 52 45 51 
1f53c     46 52 45 51 
1f540     46 52 45 51 
1f544     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f548     46 52 45 51 
1f54c     46 52 45 51 
1f550     46 52 45 51 
1f554     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f558     46 52 45 51 
1f55c     46 52 45 51 
1f560     46 52 45 51 
1f564     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f568     46 52 45 51 
1f56c     46 52 45 51 
1f570     46 52 45 51 
1f574     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f578     46 52 45 51 
1f57c     46 52 45 51 
1f580     46 52 45 51 
1f584     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f588     46 52 45 51 
1f58c     46 52 45 51 
1f590     46 52 45 51 
1f594     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f598     46 52 45 51 
1f59c     46 52 45 51 
1f5a0     46 52 45 51 
1f5a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f5a8     46 52 45 51 
1f5ac     46 52 45 51 
1f5b0     46 52 45 51 
1f5b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f5b8     46 52 45 51 
1f5bc     46 52 45 51 
1f5c0     46 52 45 51 
1f5c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f5c8     46 52 45 51 
1f5cc     46 52 45 51 
1f5d0     46 52 45 51 
1f5d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f5d8     46 52 45 51 
1f5dc     46 52 45 51 
1f5e0     46 52 45 51 
1f5e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f5e8     46 52 45 51 
1f5ec     46 52 45 51 
1f5f0     46 52 45 51 
1f5f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f5f8     46 52 45 51 
1f5fc     46 52 45 51 
1f600     46 52 45 51 
1f604     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f608     46 52 45 51 
1f60c     46 52 45 51 
1f610     46 52 45 51 
1f614     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f618     46 52 45 51 
1f61c     46 52 45 51 
1f620     46 52 45 51 
1f624     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f628     46 52 45 51 
1f62c     46 52 45 51 
1f630     46 52 45 51 
1f634     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f638     46 52 45 51 
1f63c     46 52 45 51 
1f640     46 52 45 51 
1f644     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f648     46 52 45 51 
1f64c     46 52 45 51 
1f650     46 52 45 51 
1f654     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f658     46 52 45 51 
1f65c     46 52 45 51 
1f660     46 52 45 51 
1f664     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f668     46 52 45 51 
1f66c     46 52 45 51 
1f670     46 52 45 51 
1f674     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f678     46 52 45 51 
1f67c     46 52 45 51 
1f680     46 52 45 51 
1f684     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f688     46 52 45 51 
1f68c     46 52 45 51 
1f690     46 52 45 51 
1f694     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f698     46 52 45 51 
1f69c     46 52 45 51 
1f6a0     46 52 45 51 
1f6a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f6a8     46 52 45 51 
1f6ac     46 52 45 51 
1f6b0     46 52 45 51 
1f6b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f6b8     46 52 45 51 
1f6bc     46 52 45 51 
1f6c0     46 52 45 51 
1f6c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f6c8     46 52 45 51 
1f6cc     46 52 45 51 
1f6d0     46 52 45 51 
1f6d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f6d8     46 52 45 51 
1f6dc     46 52 45 51 
1f6e0     46 52 45 51 
1f6e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f6e8     46 52 45 51 
1f6ec     46 52 45 51 
1f6f0     46 52 45 51 
1f6f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f6f8     46 52 45 51 
1f6fc     46 52 45 51 
1f700     46 52 45 51 
1f704     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f708     46 52 45 51 
1f70c     46 52 45 51 
1f710     46 52 45 51 
1f714     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f718     46 52 45 51 
1f71c     46 52 45 51 
1f720     46 52 45 51 
1f724     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f728     46 52 45 51 
1f72c     46 52 45 51 
1f730     46 52 45 51 
1f734     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f738     46 52 45 51 
1f73c     46 52 45 51 
1f740     46 52 45 51 
1f744     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f748     46 52 45 51 
1f74c     46 52 45 51 
1f750     46 52 45 51 
1f754     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f758     46 52 45 51 
1f75c     46 52 45 51 
1f760     46 52 45 51 
1f764     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f768     46 52 45 51 
1f76c     46 52 45 51 
1f770     46 52 45 51 
1f774     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f778     46 52 45 51 
1f77c     46 52 45 51 
1f780     46 52 45 51 
1f784     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f788     46 52 45 51 
1f78c     46 52 45 51 
1f790     46 52 45 51 
1f794     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f798     46 52 45 51 
1f79c     46 52 45 51 
1f7a0     46 52 45 51 
1f7a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f7a8     46 52 45 51 
1f7ac     46 52 45 51 
1f7b0     46 52 45 51 
1f7b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f7b8     46 52 45 51 
1f7bc     46 52 45 51 
1f7c0     46 52 45 51 
1f7c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f7c8     46 52 45 51 
1f7cc     46 52 45 51 
1f7d0     46 52 45 51 
1f7d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1f7d8                 | 
1f7d8     00 00 00 00 
1f7dc     18 00 00 00 
1f7e0     31 00 00 00 
1f7e4     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1f7e8     61 00 00 00 
1f7ec     78 00 00 00 
1f7f0     8D 00 00 00 
1f7f4     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1f7f8     B4 00 00 00 
1f7fc     C5 00 00 00 
1f800     D4 00 00 00 
1f804     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1f808     EB 00 00 00 
1f80c     F4 00 00 00 
1f810     FA 00 00 00 
1f814     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1f818     FF 00 00 00 
1f81c     FD 00 00 00 
1f820     FA 00 00 00 
1f824     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1f828     EB 00 00 00 
1f82c     E0 00 00 00 
1f830     D4 00 00 00 
1f834     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1f838     B4 00 00 00 
1f83c     A1 00 00 00 
1f840     8D 00 00 00 
1f844     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1f848     61 00 00 00 
1f84c     4A 00 00 00 
1f850     31 00 00 00 
1f854     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1f858     00 00 00 00 
1f85c     E8 FF FF FF 
1f860     CF FF FF FF 
1f864     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1f868     9F FF FF FF 
1f86c     88 FF FF FF 
1f870     73 FF FF FF 
1f874     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1f878     4C FF FF FF 
1f87c     3B FF FF FF 
1f880     2C FF FF FF 
1f884     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1f888     15 FF FF FF 
1f88c     0C FF FF FF 
1f890     06 FF FF FF 
1f894     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1f898     01 FF FF FF 
1f89c     03 FF FF FF 
1f8a0     06 FF FF FF 
1f8a4     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1f8a8     15 FF FF FF 
1f8ac     20 FF FF FF 
1f8b0     2C FF FF FF 
1f8b4     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1f8b8     4C FF FF FF 
1f8bc     5F FF FF FF 
1f8c0     73 FF FF FF 
1f8c4     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1f8c8     9F FF FF FF 
1f8cc     B6 FF FF FF 
1f8d0     CF FF FF FF 
1f8d4     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1f8d8                 | 
1f8d8     58 03 28 03 
1f8dc     FA 02 D0 02 
1f8e0     A6 02 80 02 
1f8e4     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1f8e8     1A 02 FC 01 
1f8ec     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1f8f0     AC 01 94 01 
1f8f4     7D 01 68 01 
1f8f8     53 01 40 01 
1f8fc     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1f900     0D 01 FE 00 
1f904     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1f908     D6 00 CA 00 
1f90c     BE 00 B4 00 
1f910     AA 00 A0 00 
1f914     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1f918     87 00 7F 00 
1f91c     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1f920     52 03 22 03 
1f924     F5 02 CB 02 
1f928     A2 02 7D 02 
1f92c     59 02 37 02 |                  word  850 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1f930     17 02 F9 01 
1f934     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1f938     A9 01 91 01 
1f93c     7B 01 65 01 
1f940     51 01 3E 01 
1f944     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1f948     0C 01 FD 00 
1f94c     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1f950     D5 00 C9 00 
1f954     BD 00 B3 00 
1f958     A9 00 9F 00 
1f95c     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1f960     86 00 7E 00 
1f964     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1f968     4C 03 1C 03 
1f96c     F0 02 C5 02 
1f970     9E 02 78 02 
1f974     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1f978     14 02 F6 01 
1f97c     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1f980     A6 01 8E 01 
1f984     78 01 63 01 
1f988     4F 01 3C 01 
1f98c     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1f990     0A 01 FB 00 
1f994     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1f998     D3 00 C7 00 
1f99c     BC 00 B1 00 
1f9a0     A7 00 9E 00 
1f9a4     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1f9a8     85 00 7D 00 
1f9ac     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1f9b0     46 03 17 03 
1f9b4     EA 02 C0 02 
1f9b8     99 02 74 02 
1f9bc     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1f9c0     10 02 F2 01 
1f9c4     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1f9c8     A3 01 8B 01 
1f9cc     75 01 60 01 
1f9d0     4C 01 3A 01 
1f9d4     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1f9d8     08 01 F9 00 
1f9dc     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1f9e0     D1 00 C6 00 
1f9e4     BB 00 B0 00 
1f9e8     A6 00 9D 00 
1f9ec     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1f9f0     84 00 7D 00 
1f9f4     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1f9f8     40 03 11 03 
1f9fc     E5 02 BB 02 
1fa00     94 02 6F 02 
1fa04     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1fa08     0C 02 EF 01 
1fa0c     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1fa10     A0 01 88 01 
1fa14     72 01 5E 01 
1fa18     4A 01 38 01 
1fa1c     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1fa20     06 01 F7 00 
1fa24     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1fa28     D0 00 C4 00 
1fa2c     B9 00 AF 00 
1fa30     A5 00 9C 00 
1fa34     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1fa38     83 00 7C 00 
1fa3c     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1fa40     3A 03 0B 03 
1fa44     E0 02 B6 02 
1fa48     8F 02 6B 02 
1fa4c     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1fa50     08 02 EB 01 
1fa54     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1fa58     9D 01 86 01 
1fa5c     70 01 5B 01 
1fa60     48 01 35 01 
1fa64     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1fa68     04 01 F5 00 
1fa6c     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1fa70     CE 00 C3 00 
1fa74     B8 00 AE 00 
1fa78     A4 00 9B 00 
1fa7c     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1fa80     82 00 7B 00 
1fa84     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1fa88     34 03 06 03 
1fa8c     DA 02 B1 02 
1fa90     8B 02 66 02 
1fa94     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1fa98     04 02 E7 01 
1fa9c     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1faa0     9A 01 83 01 
1faa4     6D 01 59 01 
1faa8     45 01 33 01 
1faac     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1fab0     02 01 F4 00 
1fab4     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1fab8     CD 00 C1 00 
1fabc     B7 00 AC 00 
1fac0     A3 00 9A 00 
1fac4     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1fac8     81 00 7A 00 
1facc     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1fad0     2E 03 00 03 
1fad4     D5 02 AC 02 
1fad8     86 02 62 02 
1fadc     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1fae0     01 02 E4 01 
1fae4     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1fae8     97 01 80 01 
1faec     6B 01 56 01 
1faf0     43 01 31 01 
1faf4     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1faf8     00 01 F2 00 
1fafc     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1fb00     CC 00 C0 00 
1fb04     B5 00 AB 00 
1fb08     A1 00 98 00 
1fb0c     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1fb10     80 00 79 00 
1fb14     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1fb18     8B 03 58 03 
1fb1c     28 03 FA 02 
1fb20     D0 02 A6 02 
1fb24     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1fb28     3A 02 1A 02 
1fb2c     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1fb30     C5 01 AC 01 
1fb34     94 01 7D 01 
1fb38     68 01 53 01 
1fb3c     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1fb40     1D 01 0D 01 
1fb44     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1fb48     E2 00 D6 00 
1fb4c     CA 00 BE 00 
1fb50     B4 00 AA 00 
1fb54     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1fb58     8F 00 87 00 
1fb5c     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1fb60     84 03 52 03 
1fb64     22 03 F5 02 
1fb68     CB 02 A3 02 
1fb6c     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1fb70     37 02 17 02 
1fb74     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1fb78     C2 01 A9 01 
1fb7c     91 01 7B 01 
1fb80     65 01 51 01 
1fb84     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1fb88     1C 01 0C 01 
1fb8c     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1fb90     E1 00 D4 00 
1fb94     C8 00 BD 00 
1fb98     B3 00 A9 00 
1fb9c     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1fba0     8E 00 86 00 
1fba4     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1fba8     7E 03 4C 03 
1fbac     1C 03 F0 02 
1fbb0     C5 02 9E 02 
1fbb4     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1fbb8     33 02 14 02 
1fbbc     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1fbc0     BF 01 A6 01 
1fbc4     8E 01 78 01 
1fbc8     63 01 4F 01 
1fbcc     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1fbd0     1A 01 0A 01 
1fbd4     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1fbd8     DF 00 D3 00 
1fbdc     C7 00 BC 00 
1fbe0     B1 00 A7 00 
1fbe4     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1fbe8     8D 00 85 00 
1fbec     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1fbf0     77 03 46 03 
1fbf4     17 03 EA 02 
1fbf8     C0 02 99 02 
1fbfc     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1fc00     2F 02 10 02 
1fc04     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1fc08     BC 01 A3 01 
1fc0c     8B 01 75 01 
1fc10     60 01 4C 01 
1fc14     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1fc18     18 01 08 01 
1fc1c     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1fc20     DE 00 D1 00 
1fc24     C6 00 BB 00 
1fc28     B0 00 A6 00 
1fc2c     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1fc30     8C 00 84 00 
1fc34     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1fc38     71 03 40 03 
1fc3c     11 03 E5 02 
1fc40     BB 02 94 02 
1fc44     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1fc48     2B 02 0C 02 
1fc4c     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1fc50     B9 01 A0 01 
1fc54     88 01 72 01 
1fc58     5E 01 4A 01 
1fc5c     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1fc60     16 01 06 01 
1fc64     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1fc68     DC 00 D0 00 
1fc6c     C4 00 B9 00 
1fc70     AF 00 A5 00 
1fc74     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1fc78     8B 00 83 00 
1fc7c     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1fc80     6B 03 3A 03 
1fc84     0B 03 E0 02 
1fc88     B6 02 8F 02 
1fc8c     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1fc90     27 02 08 02 
1fc94     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1fc98     B5 01 9D 01 
1fc9c     86 01 70 01 
1fca0     5B 01 48 01 
1fca4     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1fca8     14 01 04 01 
1fcac     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1fcb0     DB 00 CE 00 
1fcb4     C3 00 B8 00 
1fcb8     AE 00 A4 00 
1fcbc     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1fcc0     8A 00 82 00 
1fcc4     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1fcc8     64 03 34 03 
1fccc     06 03 DA 02 
1fcd0     B1 02 8B 02 
1fcd4     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1fcd8     23 02 04 02 
1fcdc     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1fce0     B2 01 9A 01 
1fce4     83 01 6D 01 
1fce8     59 01 45 01 
1fcec     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1fcf0     12 01 02 01 
1fcf4     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1fcf8     D9 00 CD 00 
1fcfc     C1 00 B7 00 
1fd00     AC 00 A3 00 
1fd04     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1fd08     89 00 81 00 
1fd0c     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1fd10     5E 03 2E 03 
1fd14     00 03 D5 02 
1fd18     AC 02 86 02 
1fd1c     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1fd20     1F 02 01 02 
1fd24     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1fd28     AF 01 97 01 
1fd2c     80 01 6B 01 
1fd30     56 01 43 01 
1fd34     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1fd38     10 01 00 01 
1fd3c     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1fd40     D8 00 CB 00 
1fd44     C0 00 B5 00 
1fd48     AB 00 A1 00 
1fd4c     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1fd50     88 00 80 00 
1fd54     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1fd58                 | 	alignl
1fd58                 | _audio012_spin2_dat_
1fd58                 | 
1fd58                 | audio       org     0
1fd58                 | 
1fd58     0E 70 07 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1fd5c     0E B4 1C FC |             wxpin   #90,#left
1fd60                 | 
1fd60     0F 70 07 FC |             wrpin   dac,#right
1fd64     0F B4 1C FC |             wxpin   #90,#right
1fd68                 | 
1fd68     41 9C 64 FD |             dirh    #left addpins 1
1fd6c                 | 
1fd6c     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1fd70     2D E9 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1fd74     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1fd78                 |             
1fd78                 | '---------------------------------------------------------------------------------        
1fd78                 | '----------------- The main loop -------------------------------------------------
1fd78                 | '---------------------------------------------------------------------------------
1fd78                 | 
1fd78     28 10 64 FD | loop        setq    #8              ' Read channel regs from the hub
1fd7c     61 A3 06 FB |             rdlong  sstart1,ptra++
1fd80     28 10 64 FD |             setq    #8              ' Cannot do one big setq+rdlong as it interferes with interrupts
1fd84     61 B5 06 FB |             rdlong  sstart2,ptra++
1fd88     28 10 64 FD |             setq    #8
1fd8c     61 C7 06 FB |             rdlong  sstart3,ptra++
1fd90     28 10 64 FD |             setq    #8
1fd94     61 D9 06 FB |             rdlong  sstart4,ptra++
1fd98     28 10 64 FD |             setq    #8
1fd9c     61 EB 06 FB |             rdlong  sstart5,ptra++
1fda0     28 10 64 FD |             setq    #8
1fda4     61 FD 06 FB |             rdlong  sstart6,ptra++
1fda8     28 10 64 FD |             setq    #8
1fdac     61 0F 07 FB |             rdlong  sstart7,ptra++
1fdb0     28 10 64 FD |             setq    #8
1fdb4     61 21 07 FB |             rdlong  sstart8,ptra++
1fdb8                 | 
1fdb8     20 F1 87 F1 |             sub     ptra,#9*4*8    
1fdbc                 |             
1fdbc     3D 35 13 F2 |             cmp     time1,a1FFFFFFF wc   ' Main counter overflow workaround
1fdc0     3D 37 13 32 |      if_nc  cmp     time2,a1FFFFFFF wc   ' before the time is written to the buffer, it is ANDed with $1FFFFFFF  
1fdc4     3D 39 13 32 |      if_nc  cmp     time3,a1FFFFFFF wc   ' Also, the interrupt procedure ands the counter  
1fdc8     3D 3B 13 32 |      if_nc  cmp     time4,a1FFFFFFF wc   ' So, if the counter is >=$20000000, the compare sequence still works  
1fdcc     3D 3D 13 32 |      if_nc  cmp     time5,a1FFFFFFF wc   ' and when all counters are >=$20000000, all of them are SUBed at the same time 
1fdd0     3D 3F 13 32 |      if_nc  cmp     time6,a1FFFFFFF wc   ' including time0 main counter  
1fdd4     3D 41 13 32 |      if_nc  cmp     time7,a1FFFFFFF wc     
1fdd8     3D 43 13 32 |      if_nc  cmp     time8,a1FFFFFFF wc   ' was 7FFFFFFF - reduced to make debugging easier 
1fddc     3E 35 83 31 |      if_nc  sub     time1,a20000000
1fde0     3E 37 83 31 |      if_nc  sub     time2,a20000000
1fde4     3E 39 83 31 |      if_nc  sub     time3,a20000000
1fde8     3E 3B 83 31 |      if_nc  sub     time4,a20000000
1fdec     3E 3D 83 31 |      if_nc  sub     time5,a20000000
1fdf0     3E 3F 83 31 |      if_nc  sub     time6,a20000000
1fdf4     3E 41 83 31 |      if_nc  sub     time7,a20000000
1fdf8     3E 43 83 31 |      if_nc  sub     time8,a20000000
1fdfc     3E 33 83 31 |      if_nc  sub     time0,a20000000
1fe00                 | 
1fe00                 |        
1fe00                 |     
1fe00     00 B2 0E F2 |             cmp     acmd1,#0 wz     ' if cmd=0, zero the phase accumulator
1fe04     00 7E 06 A6 |     if_e    mov     p1,#0
1fe08     00 C4 0E F2 |             cmp     acmd2,#0 wz
1fe0c     00 80 06 A6 |     if_e    mov     p2,#0
1fe10     00 D6 0E F2 |             cmp     acmd3,#0 wz
1fe14     00 82 06 A6 |     if_e    mov     p3,#0
1fe18     00 E8 0E F2 |             cmp     acmd4,#0 wz
1fe1c     00 84 06 A6 |     if_e    mov     p4,#0
1fe20     00 FA 0E F2 |             cmp     acmd5,#0 wz
1fe24     00 86 06 A6 |     if_e    mov     p5,#0
1fe28     00 0C 0F F2 |             cmp     acmd6,#0 wz
1fe2c     00 88 06 A6 |     if_e    mov     p6,#0
1fe30     00 1E 0F F2 |             cmp     acmd7,#0 wz
1fe34     00 8A 06 A6 |     if_e    mov     p7,#0
1fe38     00 30 0F F2 |             cmp     acmd8,#0 wz
1fe3c     00 8C 06 A6 |     if_e    mov     p8,#0
1fe40                 |           
1fe40     4A 8F 02 F6 |             mov     qq,tail         ' Check if the buffer is full	
1fe44     02 8E 86 F1 |             sub     qq,#2
1fe48     FF 8F 06 F5 |             and     qq,#511
1fe4c     49 8F 1A F2 |             cmp     qq,front wcz
1fe50     24 FF 9F AD |     if_e    jmp     #loop           ' If the buffer is full, do nothing               
1fe54                 |       
1fe54     50 46 07 F6 |             mov     cn,#p201           ' Find the channel to compute
1fe58     9A 49 03 F6 |             mov     ct,time1        ' with the lowest next sample time
1fe5c     9B 49 3B F3 |             fle     ct,time2 wcz   
1fe60     67 46 07 C6 |     if_c    mov     cn,#p202 
1fe64     9C 49 3B F3 |             fle     ct,time3 wcz
1fe68     7E 46 07 C6 |     if_c    mov     cn,#p203     
1fe6c     9D 49 3B F3 |             fle     ct,time4 wcz
1fe70     95 46 07 C6 |     if_c    mov     cn,#p204
1fe74     9E 49 3B F3 |             fle     ct,time5 wcz
1fe78     AC 46 07 C6 |     if_c    mov     cn,#p205 
1fe7c     9F 49 3B F3 |             fle     ct,time6 wcz
1fe80     C3 46 07 C6 |     if_c    mov     cn,#p206
1fe84     A0 49 3B F3 |             fle     ct,time7 wcz
1fe88     DA 46 07 C6 |     if_c    mov     cn,#p207
1fe8c     A1 49 3B F3 |             fle     ct,time8 wcz
1fe90     F1 46 07 C6 |     if_c    mov     cn,#p208 
1fe94                 |  
1fe94     2C 46 63 FD |             jmp     cn
1fe98                 |    
1fe98                 | '----------------------------------------------------------------------------------
1fe98                 | '------------- Compute channel samples --------------------------------------------
1fe98                 | '----------------------------------------------------------------------------------
1fe98                 | 	
1fe98                 | ' ------------  Channel 1
1fe98                 |  
1fe98     9A 4B 03 F6 | p201        mov     dt0,time1      ' compute the delta to add to the global time
1fe9c     99 4B 83 F1 |             sub     dt0,time0
1fea0     57 35 03 F1 |             add     time1,freq1    ' compute the next channel time	
1fea4                 | 	        
1fea4     58 7F 02 F1 |             add     p1,askip1      ' update the phase accumulator
1fea8     54 7F 1A F2 |             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
1feac     54 7F 82 31 |     if_ge   sub     p1,lend1	        
1feb0     53 7F 02 31 |     if_ge   add     p1,lstart1       
1feb4     3F 8F 02 F6 |             mov     qq,p1          ' compute the pointer to the next sample
1feb8     51 8F 02 F1 |             add     qq,sstart1
1febc                 |             
1febc     00 A4 0E F2 |             cmp     type1,#0 wz    ' check the sample type
1fec0     47 91 C2 5A |     if_nz   rdbyte  spl,qq         ' not zero=8 bit
1fec4     08 90 66 50 |     if_nz   shl     spl,#8
1fec8     47 91 E2 AA |     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
1fecc                 | 
1fecc     55 91 32 FA |             scas    spl,vol1       ' apply the volume
1fed0     00 90 02 F6 |             mov     spl,0-0
1fed4                 | 
1fed4     56 91 32 FA |             scas    spl,apan1      ' apply the pan
1fed8     00 50 03 F6 |             mov     ls1,0-0
1fedc     20 00 00 FF 
1fee0     00 8E 06 F6 |             mov     qq,##16384
1fee4     56 8F 82 F1 |             sub     qq,apan1
1fee8     47 91 32 FA |             scas    spl,qq
1feec     00 52 03 F6 |             mov     rs1,0-0
1fef0                 |             
1fef0     84 02 90 FD |             jmp     #p101              
1fef4                 | 	    	
1fef4                 | ' ------------  Channel 2
1fef4                 |  
1fef4     9B 4B 03 F6 | p202        mov     dt0,time2
1fef8     99 4B 83 F1 |             sub     dt0,time0
1fefc     60 37 03 F1 |             add     time2,freq2  	
1ff00                 | 	        
1ff00     61 81 02 F1 |             add     p2,askip2
1ff04     5D 81 1A F2 |             cmp     p2,lend2 wcz
1ff08     5D 81 82 31 |     if_ge   sub     p2,lend2	        
1ff0c     5C 81 02 31 |     if_ge   add     p2,lstart2       
1ff10     40 8F 02 F6 |             mov     qq,p2
1ff14     5A 8F 02 F1 |             add     qq,sstart2
1ff18                 | 
1ff18     00 B6 0E F2 |             cmp     type2,#0 wz
1ff1c     47 91 C2 5A |     if_nz   rdbyte  spl,qq
1ff20     08 90 66 50 |     if_nz   shl     spl,#8
1ff24     47 91 E2 AA |     if_z    rdword  spl,qq
1ff28                 | 
1ff28     5E 91 32 FA |             scas    spl,vol2
1ff2c     00 90 02 F6 |             mov     spl,0-0
1ff30                 |             
1ff30     5F 91 32 FA |             scas    spl,apan2
1ff34     00 54 03 F6 |             mov     ls2,0-0
1ff38     20 00 00 FF 
1ff3c     00 8E 06 F6 |             mov     qq,##16384
1ff40     5F 8F 82 F1 |             sub     qq,apan2
1ff44     47 91 32 FA |             scas    spl,qq
1ff48     00 56 03 F6 |             mov     rs2,0-0
1ff4c                 |             
1ff4c     28 02 90 FD |             jmp     #p101
1ff50                 | 
1ff50                 | ' ------------  Channel 3
1ff50                 |  
1ff50     9C 4B 03 F6 | p203        mov     dt0,time3
1ff54     99 4B 83 F1 |             sub     dt0,time0
1ff58     69 39 03 F1 |             add     time3,freq3  	
1ff5c                 | 	        
1ff5c     6A 83 02 F1 |             add     p3,askip3
1ff60     66 83 1A F2 |             cmp     p3,lend3 wcz
1ff64     66 83 82 31 |     if_ge   sub     p3,lend3	        
1ff68     65 83 02 31 |     if_ge   add     p3,lstart3       
1ff6c     41 8F 02 F6 |             mov     qq,p3
1ff70     63 8F 02 F1 |             add     qq,sstart3
1ff74                 |             
1ff74     00 C8 0E F2 |             cmp     type3,#0 wz
1ff78     47 91 C2 5A |     if_nz   rdbyte  spl,qq
1ff7c     08 90 66 50 |     if_nz   shl     spl,#8
1ff80     47 91 E2 AA |     if_z    rdword  spl,qq
1ff84                 | 
1ff84     67 91 32 FA |             scas    spl,vol3
1ff88     00 90 02 F6 |             mov     spl,0-0
1ff8c                 |     	
1ff8c     68 91 32 FA |             scas    spl,apan3
1ff90     00 58 03 F6 |             mov     ls3,0-0
1ff94                 |             
1ff94     20 00 00 FF 
1ff98     00 8E 06 F6 |             mov     qq,##16384
1ff9c     68 8F 82 F1 |             sub     qq,apan3
1ffa0     47 91 32 FA |             scas    spl,qq
1ffa4     00 5A 03 F6 |             mov     rs3,0-0
1ffa8                 | 
1ffa8     CC 01 90 FD |             jmp     #p101
1ffac                 |             
1ffac                 | ' ------------  Channel 4
1ffac                 |  
1ffac     9D 4B 03 F6 | p204        mov     dt0,time4
1ffb0     99 4B 83 F1 |             sub     dt0,time0
1ffb4     72 3B 03 F1 |             add     time4,freq4  	
1ffb8                 | 
1ffb8                 | 	        
1ffb8     73 85 02 F1 |             add     p4,askip4
1ffbc     6F 85 1A F2 |             cmp     p4,lend4 wcz
1ffc0     6F 85 82 31 |     if_ge   sub     p4,lend4	        
1ffc4     6E 85 02 31 |     if_ge   add     p4,lstart4       
1ffc8     42 8F 02 F6 |             mov     qq,p4
1ffcc     6C 8F 02 F1 |             add     qq,sstart4
1ffd0                 |             
1ffd0     00 DA 0E F2 |             cmp     type4,#0 wz
1ffd4     47 91 C2 5A |     if_nz   rdbyte  spl,qq
1ffd8     08 90 66 50 |     if_nz   shl     spl,#8
1ffdc     47 91 E2 AA |     if_z    rdword  spl,qq
1ffe0                 | 
1ffe0     70 91 32 FA |             scas    spl,vol4
1ffe4     00 90 02 F6 |             mov     spl,0-0
1ffe8                 |     	
1ffe8     71 91 32 FA |             scas    spl,apan4
1ffec     00 5E 03 F6 |             mov     ls4,0-0
1fff0                 |             
1fff0     20 00 00 FF 
1fff4     00 8E 06 F6 |             mov     qq,##16384
1fff8     71 8F 82 F1 |             sub     qq,apan4
1fffc     47 91 32 FA |             scas    spl,qq
20000     00 5C 03 F6 |             mov     rs4,0-0
20004                 | 
20004     70 01 90 FD |             jmp     #p101
20008                 |             
20008                 | ' ------------  Channel 5
20008                 |  
20008     9E 4B 03 F6 | p205        mov     dt0,time5
2000c     99 4B 83 F1 |             sub     dt0,time0
20010     7B 3D 03 F1 |             add     time5,freq5  	
20014                 | 
20014                 | 	        
20014     7C 87 02 F1 |             add     p5,askip5
20018     78 87 1A F2 |             cmp     p5,lend5 wcz
2001c     78 87 82 31 |     if_ge   sub     p5,lend5	        
20020     77 87 02 31 |     if_ge   add     p5,lstart5       
20024     43 8F 02 F6 |             mov     qq,p5
20028     75 8F 02 F1 |             add     qq,sstart5
2002c                 |             
2002c     00 EC 0E F2 |             cmp     type5,#0 wz
20030     47 91 C2 5A |     if_nz   rdbyte  spl,qq
20034     08 90 66 50 |     if_nz   shl     spl,#8
20038     47 91 E2 AA |     if_z    rdword  spl,qq
2003c                 | 
2003c     79 91 32 FA |             scas    spl,vol5
20040     00 90 02 F6 |             mov     spl,0-0
20044                 |     	
20044     7A 91 32 FA |             scas    spl,apan5
20048     00 62 03 F6 |             mov     ls5,0-0
2004c                 |             
2004c     20 00 00 FF 
20050     00 8E 06 F6 |             mov     qq,##16384
20054     7A 8F 82 F1 |             sub     qq,apan5
20058     47 91 32 FA |             scas    spl,qq
2005c     00 60 03 F6 |             mov     rs5,0-0
20060                 | 
20060     14 01 90 FD |             jmp     #p101
20064                 |   
20064                 | ' ------------  Channel 6
20064                 |  
20064     9F 4B 03 F6 | p206        mov     dt0,time6
20068     99 4B 83 F1 |             sub     dt0,time0
2006c     84 3F 03 F1 |             add     time6,freq6  	
20070                 | 
20070                 | 	        
20070     85 89 02 F1 |             add     p6,askip6
20074     81 89 1A F2 |             cmp     p6,lend6 wcz
20078     81 89 82 31 |     if_ge   sub     p6,lend6	        
2007c     80 89 02 31 |     if_ge   add     p6,lstart6       
20080     44 8F 02 F6 |             mov     qq,p6
20084     7E 8F 02 F1 |             add     qq,sstart6
20088                 |             
20088     00 FE 0E F2 |             cmp     type6,#0 wz
2008c     47 91 C2 5A |     if_nz   rdbyte  spl,qq
20090     08 90 66 50 |     if_nz   shl     spl,#8
20094     47 91 E2 AA |     if_z    rdword  spl,qq
20098                 | 
20098     82 91 32 FA |             scas    spl,vol6
2009c     00 90 02 F6 |             mov     spl,0-0
200a0                 |     	
200a0     83 91 32 FA |             scas    spl,apan6
200a4     00 66 03 F6 |             mov     ls6,0-0
200a8                 |             
200a8     20 00 00 FF 
200ac     00 8E 06 F6 |             mov     qq,##16384
200b0     83 8F 82 F1 |             sub     qq,apan6
200b4     47 91 32 FA |             scas    spl,qq
200b8     00 64 03 F6 |             mov     rs6,0-0
200bc                 | 
200bc     B8 00 90 FD |             jmp     #p101
200c0                 |             
200c0                 | ' ------------  Channel 7
200c0                 |  
200c0     A0 4B 03 F6 | p207        mov     dt0,time7
200c4     99 4B 83 F1 |             sub     dt0,time0
200c8     8D 41 03 F1 |             add     time7,freq7  	
200cc                 | 
200cc                 | 	        
200cc     8E 8B 02 F1 |             add     p7,askip7
200d0     8A 8B 1A F2 |             cmp     p7,lend7 wcz
200d4     8A 8B 82 31 |     if_ge   sub     p7,lend7	        
200d8     89 8B 02 31 |     if_ge   add     p7,lstart7       
200dc     45 8F 02 F6 |             mov     qq,p7
200e0     87 8F 02 F1 |             add     qq,sstart7
200e4                 |             
200e4     00 10 0F F2 |             cmp     type7,#0 wz
200e8     47 91 C2 5A |     if_nz   rdbyte  spl,qq
200ec     08 90 66 50 |     if_nz   shl     spl,#8
200f0     47 91 E2 AA |     if_z    rdword  spl,qq
200f4                 | 
200f4     8B 91 32 FA |             scas    spl,vol7
200f8     00 90 02 F6 |             mov     spl,0-0
200fc                 |     	
200fc     8C 91 32 FA |             scas    spl,apan7
20100     00 6A 03 F6 |             mov     ls7,0-0
20104                 |             
20104     20 00 00 FF 
20108     00 8E 06 F6 |             mov     qq,##16384
2010c     8C 8F 82 F1 |             sub     qq,apan7
20110     47 91 32 FA |             scas    spl,qq
20114     00 68 03 F6 |             mov     rs7,0-0
20118                 | 
20118     5C 00 90 FD |             jmp     #p101     
2011c                 |                    
2011c                 | ' ------------  Channel 8
2011c                 |  
2011c     A1 4B 03 F6 | p208        mov     dt0,time8
20120     99 4B 83 F1 |             sub     dt0,time0
20124     96 43 03 F1 |             add     time8,freq8  	
20128                 | 
20128                 | 	        
20128     97 8D 02 F1 |             add     p8,askip8
2012c     93 8D 1A F2 |             cmp     p8,lend8 wcz
20130     93 8D 82 31 |     if_ge   sub     p8,lend8	        
20134     92 8D 02 31 |     if_ge   add     p8,lstart8       
20138     46 8F 02 F6 |             mov     qq,p8
2013c     90 8F 02 F1 |             add     qq,sstart8
20140                 |             
20140     00 22 0F F2 |             cmp     type8,#0 wz
20144     47 91 C2 5A |     if_nz   rdbyte  spl,qq
20148     08 90 66 50 |     if_nz   shl     spl,#8
2014c     47 91 E2 AA |     if_z    rdword  spl,qq
20150                 | 
20150     94 91 32 FA |             scas    spl,vol8
20154     00 90 02 F6 |             mov     spl,0-0
20158                 |     	
20158     95 91 32 FA |             scas    spl,apan8
2015c     00 6E 03 F6 |             mov     ls8,0-0
20160                 |             
20160     20 00 00 FF 
20164     00 8E 06 F6 |             mov     qq,##16384
20168     95 8F 82 F1 |             sub     qq,apan8
2016c     47 91 32 FA |             scas    spl,qq
20170     00 6C 03 F6 |             mov     rs8,0-0
20174                 | 
20174     00 00 90 FD |             jmp     #p101            
20178                 |             
20178                 | '------------------------ Channels end here --------------------       
20178                 | 
20178                 | ' Now add all channels and put the sample to the buffer    
20178                 | 
20178                 | 
20178     99 45 0B F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
2017c     02 92 86 A1 |     if_z    sub     front,#2         ' 
20180     FF 93 06 A5 |     if_z    and     front,#511     
20184                 |   
20184     00 4E 07 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
20188     00 4C 07 F6 |             mov     ls,#0
2018c     A9 4F 03 F1 |             add     rs,rs1
20190     AB 4F 03 F1 |             add     rs,rs2
20194     AD 4F 03 F1 |             add     rs,rs3
20198     AE 4F 03 F1 |             add     rs,rs4
2019c     B0 4F 03 F1 |             add     rs,rs5
201a0     B2 4F 03 F1 |             add     rs,rs6
201a4     B4 4F 03 F1 |             add     rs,rs7
201a8     B6 4F 03 F1 |             add     rs,rs8
201ac                 |             
201ac     A8 4D 03 F1 |             add     ls,ls1
201b0     AA 4D 03 F1 |             add     ls,ls2
201b4     AC 4D 03 F1 |             add     ls,ls3
201b8     AF 4D 03 F1 |             add     ls,ls4
201bc     B1 4D 03 F1 |             add     ls,ls5
201c0     B3 4D 03 F1 |             add     ls,ls6
201c4     B5 4D 03 F1 |             add     ls,ls7
201c8     B7 4D 03 F1 |             add     ls,ls8
201cc                 |  		
201cc     0F 4C E7 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
201d0     0F 4E E7 F4 |             bitnot  rs,#15		
201d4                 | 		
201d4     A6 4F 2B F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
201d8     49 4F 33 FC |             wrlut   rs,front         ' and write it to LUT
201dc     49 91 02 F6 |             mov     spl,front        ' avoid incrementing front 1 by 1 
201e0     01 90 06 F1 |             add     spl,#1           
201e4                 | 
201e4     99 8F 02 F6 |             mov     qq,time0
201e8     3D 8F 02 F5 |             and     qq,a1fffffff
201ec     48 8F 32 FC |             wrlut   qq,spl
201f0                 | 
201f0     01 04 DC FC |             rep     #2, #1 
201f4     02 92 06 F1 |             add     front,#2         ' move the front pointer
201f8     FF 93 06 F5 |             and     front,#511       ' and loop at #512
201fc     99 45 03 F6 |             mov     oldt0,time0      ' update global time
20200     A5 33 03 F1 |             add     time0,dt0     
20204                 |             
20204                 |                
20204     80 8E 66 FC |             wrlong  qq,#$80          'debug
20208                 | '               wrlong time1,#$84
20208                 | ''               wrlong time2,#$88
20208                 | '               wrlong time3,#$8c
20208                 | '               wrlong time4,#$90
20208                 |                
20208     6C FB 9F FD |             jmp     #loop            'loop
2020c                 | 
2020c                 | '-------------------------------------------------------------------------
2020c                 | '------------------ This is the end of the main loop ---------------------
2020c                 | '-------------------------------------------------------------------------
2020c                 | 
2020c                 | '--------------------------------------------------------------------------
2020c                 | '------ Interrupt service -------------------------------------------------
2020c                 | '------ Output the sample, get the next one if exists ---------------------
2020c                 | '--------------------------------------------------------------------------
2020c                 | 
2020c     0E 98 26 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
20210     0F 9A 26 FC |             wypin   rsample,#right       '4
20214                 | 										
20214     01 96 06 F1 |             add     counter,#1           '6     Increment the counter
20218     3D 97 02 F5 |             and     counter,a1fffffff
2021c     50 97 1A F2 |             cmp     counter,irqtime wcz  '8     Check if it is time for the next sample
20220     F5 FF 3B 5B |     if_ne   reti1                        '10/12 If not, do nothing
20224                 | 		
20224     4E 9B 3A F9 |           	getword rsample,lsnext,#1    '12
20228     4E 99 32 F9 |           	getword lsample,lsnext,#0    '14
2022c     49 95 1A F2 |             cmp     tail,front wcz       '16    If the buffer is empty, do nothing 
20230     F5 FF 3B AB |             if_e    reti1                '18/20
20234                 | 
20234     4A 9D A2 FA |             rdlut   lsnext,tail          '21    else read the sample and its time from LUT
20238     01 94 06 F1 |             add     tail, #1             '23
2023c     4A A1 A2 FA |             rdlut   irqtime,tail         '26    Read the time for this sample
20240     01 94 06 F1 |             add     tail,#1              '28    Go to the next entry
20244     FF 95 06 F5 |             and     tail,#511            '30
20248     F5 FF 3B FB |             reti1                        '34 
2024c                 |             
2024c                 |          '' 3 nops left    
2024c                 |           
2024c                 | '---------------------------------------------------------------------------
2024c                 | '-------- End of interrupt -------------------------------------------------
2024c                 | '---------------------------------------------------------------------------    
2024c                 | 
2024c                 | '---------------------------------------------------------------------------
2024c                 | '------- Variables ---------------------------------------------------------
2024c                 | '---------------------------------------------------------------------------
2024c                 | 
2024c                 | ' constants
2024c                 | 
2024c     FF FF FF 1F | a1fffffff long $1fffffff
20250     00 00 00 20 | a20000000 long $20000000
20254                 | 
20254                 | ' phase accumulators
20254                 | 
20254     00 00 00 00 | p1          long 0
20258     00 00 00 00 | p2          long 0
2025c     00 00 00 00 | p3          long 0
20260     00 00 00 00 | p4          long 0
20264     00 00 00 00 | p5          long 0
20268     00 00 00 00 | p6          long 0
2026c     00 00 00 00 | p7          long 0
20270     00 00 00 00 | p8          long 0
20274                 | 
20274                 | ' temporary variables 
20274                 | 
20274     00 00 00 00 | qq          long 0
20278     00 00 00 00 | spl         long 0
2027c                 | 
2027c                 | ' circular buffer in LUT
2027c                 | 
2027c     00 00 00 00 | front       long 0
20280     00 00 00 00 | tail        long 0
20284                 | 
20284                 | ' Interrupt ISR variables
20284                 | 
20284     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
20288     00 00 00 00 | lsample     long 0
2028c     00 00 00 00 | rsample     long 0
20290     00 00 00 00 | lsnext      long 0
20294     00 00 00 00 | rsnext      long 0 
20298     00 00 00 00 | irqtime     long 0
2029c                 | 
2029c                 | ' Channel 1 registers. TODO - optimize the memory usage
2029c                 | 
2029c     00 00 00 00 | sstart1     long 0       ' Sample start pointer
202a0     00 00 00 00 | type1       long 0       ' type 0 16 bit, 1 8 bit
202a4     00 00 00 00 | lstart1     long 0       ' Loop start
202a8     02 00 00 00 | lend1       long 2       ' Loop end
202ac     00 00 00 00 | vol1        long 0       ' volume, 0..16384
202b0     00 00 00 00 | apan1       long 0       ' pan, 0..16384
202b4     65 00 00 00 | freq1       long 101     ' frequency divider
202b8     02 00 00 00 | askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
202bc     00 00 00 00 | acmd1       long 0       ' command, 0 = reset the phase accumulator
202c0                 | 
202c0                 | ' Channel 2 registers
202c0                 | 
202c0     00 00 00 00 | sstart2     long 0
202c4     00 00 00 00 | type2       long 0
202c8     00 00 00 00 | lstart2     long 0
202cc     02 00 00 00 | lend2       long 2        		
202d0     00 00 00 00 | vol2        long 0
202d4     00 00 00 00 | apan2       long 0
202d8     67 00 00 00 | freq2       long 103
202dc     02 00 00 00 | askip2      long 2
202e0     00 00 00 00 | acmd2       long 0
202e4                 | 
202e4                 | ' Channel 3 registers
202e4                 | 
202e4     00 00 00 00 | sstart3     long 0
202e8     00 00 00 00 | type3       long 0
202ec     00 00 00 00 | lstart3     long 0
202f0     02 00 00 00 | lend3       long 2       		'
202f4     00 00 00 00 | vol3        long 0
202f8     00 00 00 00 | apan3       long 0
202fc     6B 00 00 00 | freq3       long 107 '109 113 127 131 137 ...
20300     02 00 00 00 | askip3      long 2
20304     00 00 00 00 | acmd3       long 0
20308                 | 
20308                 | ' Channel 4 registers
20308                 | 
20308     00 00 00 00 | sstart4     long 0
2030c     00 00 00 00 | type4       long 0
20310     00 00 00 00 | lstart4     long 0
20314     02 00 00 00 | lend4       long 2       		'
20318     00 00 00 00 | vol4        long 0
2031c     00 00 00 00 | apan4       long 0
20320     6D 00 00 00 | freq4       long 109 '109 113 127 131 137 ...
20324     02 00 00 00 | askip4      long 2
20328     00 00 00 00 | acmd4       long 0
2032c                 | 
2032c                 | ' Channel 5 registers
2032c                 | 
2032c     00 00 00 00 | sstart5     long 0
20330     00 00 00 00 | type5       long 0
20334     00 00 00 00 | lstart5     long 0
20338     02 00 00 00 | lend5       long 2       		'
2033c     00 00 00 00 | vol5        long 0
20340     00 00 00 00 | apan5       long 0
20344     71 00 00 00 | freq5       long 113 '109 113 127 131 137 ...
20348     02 00 00 00 | askip5      long 2
2034c     00 00 00 00 | acmd5       long 0
20350                 | 
20350                 | ' Channel 6 registers
20350                 | 
20350     00 00 00 00 | sstart6     long 0
20354     00 00 00 00 | type6       long 0
20358     00 00 00 00 | lstart6     long 0
2035c     02 00 00 00 | lend6       long 2       		'
20360     00 00 00 00 | vol6        long 0
20364     00 00 00 00 | apan6       long 0
20368     7F 00 00 00 | freq6       long 127 '109 113 127 131 137 ...
2036c     02 00 00 00 | askip6      long 2
20370     00 00 00 00 | acmd6       long 0
20374                 | 
20374                 | ' Channel 7 registers
20374                 | 
20374     00 00 00 00 | sstart7     long 0
20378     00 00 00 00 | type7       long 0
2037c     00 00 00 00 | lstart7     long 0
20380     02 00 00 00 | lend7       long 2       		'
20384     00 00 00 00 | vol7        long 0
20388     00 00 00 00 | apan7       long 0
2038c     83 00 00 00 | freq7       long 131 '109 113 127 131 137 ...
20390     02 00 00 00 | askip7      long 2
20394     00 00 00 00 | acmd7       long 0
20398                 | 
20398                 | ' Channel 8 registers
20398                 | 
20398     00 00 00 00 | sstart8     long 0
2039c     00 00 00 00 | type8       long 0
203a0     00 00 00 00 | lstart8     long 0
203a4     02 00 00 00 | lend8       long 2       		'
203a8     00 00 00 00 | vol8        long 0
203ac     00 00 00 00 | apan8       long 0
203b0     83 00 00 00 | freq8       long 131 '109 113 127 131 137 ...
203b4     02 00 00 00 | askip8      long 2
203b8     00 00 00 00 | acmd8       long 0
203bc                 | 
203bc                 | ' Time variables
203bc                 | 
203bc     00 00 00 00 | time0       long 0    ' Global sample computing time
203c0     01 00 00 00 | time1       long 1    ' Local channels time
203c4     02 00 00 00 | time2       long 2
203c8     03 00 00 00 | time3       long 3
203cc     04 00 00 00 | time4       long 4
203d0     05 00 00 00 | time5       long 5
203d4     06 00 00 00 | time6       long 6
203d8     07 00 00 00 | time7       long 7
203dc     08 00 00 00 | time8       long 8
203e0                 | 
203e0     00 00 00 00 | oldt0       long 0    'Temporary time variables
203e4     00 00 00 00 | cn          long 0
203e8     00 00 00 00 | ct          long 0
203ec     00 00 00 00 | dt0         long 0
203f0                 | 
203f0                 | ' Samples
203f0                 | 
203f0     00 00 00 00 | ls          long 0    ' Global sample variable
203f4     00 00 00 00 | rs          long 0
203f8                 | 
203f8     00 00 00 00 | ls1         long 0    ' Channel samples
203fc     00 00 00 00 | rs1         long 0
20400     00 00 00 00 | ls2         long 0
20404     00 00 00 00 | rs2         long 0
20408     00 00 00 00 | ls3         long 0
2040c     00 00 00 00 | rs3         long 0
20410     00 00 00 00 | rs4         long 0
20414     00 00 00 00 | ls4         long 0
20418     00 00 00 00 | rs5         long 0
2041c     00 00 00 00 | ls5         long 0
20420     00 00 00 00 | rs6         long 0
20424     00 00 00 00 | ls6         long 0
20428     00 00 00 00 | rs7         long 0
2042c     00 00 00 00 | ls7         long 0
20430     00 00 00 00 | rs8         long 0
20434     00 00 00 00 | ls8         long 0
20438                 | 
20438     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2043c                 | 
2043c     00 00 00 00 
20440     00 00 00 00 | null  			long 	0,0           ' for channel reset
20444                 | 	alignl
20444                 | __system__dat_
20444     00 00 00 00 
20448     00 00 00 00 | 	byte	$00[8]
2044c     03 00 00 00 
20450     00 00 00 00 
20454     00 00 00 00 
20458     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2045c     00 00 00 00 
20460     00 00 00 00 
20464     00 00 00 00 | 	byte	$00[12]
20468     05 00 00 00 
2046c     00 00 00 00 
20470     00 00 00 00 
20474     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
20478     40 06 02 00 | 	long	@@@__system__dat_ + 508
2047c     48 06 02 00 | 	long	@@@__system__dat_ + 516
20480     00 00 00 00 | 	byte	$00, $00, $00, $00
20484     50 06 02 00 | 	long	@@@__system__dat_ + 524
20488     58 06 02 00 | 	long	@@@__system__dat_ + 532
2048c     00 00 00 00 
20490     00 00 00 00 | 	byte	$00[8]
20494     01 00 00 00 
20498     06 00 00 00 
2049c     00 00 00 00 
204a0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
204a4     00 00 00 00 | 	byte	$00, $00, $00, $00
204a8     60 06 02 00 | 	long	@@@__system__dat_ + 540
204ac     68 06 02 00 | 	long	@@@__system__dat_ + 548
204b0     00 00 00 00 | 	byte	$00, $00, $00, $00
204b4     70 06 02 00 | 	long	@@@__system__dat_ + 556
204b8     78 06 02 00 | 	long	@@@__system__dat_ + 564
204bc     00 00 00 00 
204c0     00 00 00 00 | 	byte	$00[8]
204c4     01 00 00 00 
204c8     06 00 00 00 
204cc     00 00 00 00 
204d0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
204d4     00 00 00 00 | 	byte	$00, $00, $00, $00
204d8     80 06 02 00 | 	long	@@@__system__dat_ + 572
204dc     88 06 02 00 | 	long	@@@__system__dat_ + 580
204e0     00 00 00 00 | 	byte	$00, $00, $00, $00
204e4     90 06 02 00 | 	long	@@@__system__dat_ + 588
204e8     98 06 02 00 | 	long	@@@__system__dat_ + 596
204ec     00 00 00 00 
      ...             
2063c     00 00 00 00 
20640     00 00 00 00 | 	byte	$00[344]
20644     5C 60 00 00 | 	long	@@@__system___tx
20648     00 00 00 00 | 	byte	$00, $00, $00, $00
2064c     A4 60 00 00 | 	long	@@@__system___rx
20650     00 00 00 00 | 	byte	$00, $00, $00, $00
20654     8C 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
20658     00 00 00 00 | 	byte	$00, $00, $00, $00
2065c     04 7B 00 00 | 	long	@@@__system____dummy_flush_0175
20660     00 00 00 00 | 	byte	$00, $00, $00, $00
20664     5C 60 00 00 | 	long	@@@__system___tx
20668     00 00 00 00 | 	byte	$00, $00, $00, $00
2066c     A4 60 00 00 | 	long	@@@__system___rx
20670     00 00 00 00 | 	byte	$00, $00, $00, $00
20674     8C 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
20678     00 00 00 00 | 	byte	$00, $00, $00, $00
2067c     04 7B 00 00 | 	long	@@@__system____dummy_flush_0175
20680     00 00 00 00 | 	byte	$00, $00, $00, $00
20684     5C 60 00 00 | 	long	@@@__system___tx
20688     00 00 00 00 | 	byte	$00, $00, $00, $00
2068c     A4 60 00 00 | 	long	@@@__system___rx
20690     00 00 00 00 | 	byte	$00, $00, $00, $00
20694     8C 7A 00 00 | 	long	@@@__system___rxtxioctl_0174
20698     00 00 00 00 | 	byte	$00, $00, $00, $00
2069c     04 7B 00 00 | 	long	@@@__system____dummy_flush_0175
206a0     00 00 00 00 | 	byte	$00, $00, $00, $00
206a4                 | __heap_base
206a4     00 00 00 00 
      ...             
216a4     00 00 00 00 
216a8     00 00 00 00 | 	long	0[1026]
216ac                 | objmem
216ac     00 00 00 00 | 	long	0[1]
216b0 118             | 	org	COG_BSS_START
216b0 118             | _var01
216b0 118             | 	res	1
216b0 119             | _var02
216b0 119             | 	res	1
216b0 11a             | _var03
216b0 11a             | 	res	1
216b0 11b             | _var04
216b0 11b             | 	res	1
216b0 11c             | _var05
216b0 11c             | 	res	1
216b0 11d             | _var06
216b0 11d             | 	res	1
216b0 11e             | _var07
216b0 11e             | 	res	1
216b0 11f             | _var08
216b0 11f             | 	res	1
216b0 120             | _var09
216b0 120             | 	res	1
216b0 121             | _var10
216b0 121             | 	res	1
216b0 122             | _var11
216b0 122             | 	res	1
216b0 123             | _var12
216b0 123             | 	res	1
216b0 124             | _var13
216b0 124             | 	res	1
216b0 125             | _var14
216b0 125             | 	res	1
216b0 126             | _var15
216b0 126             | 	res	1
216b0 127             | _var16
216b0 127             | 	res	1
216b0 128             | _var17
216b0 128             | 	res	1
216b0 129             | _var18
216b0 129             | 	res	1
216b0 12a             | _var19
216b0 12a             | 	res	1
216b0 12b             | _var20
216b0 12b             | 	res	1
216b0 12c             | _var21
216b0 12c             | 	res	1
216b0 12d             | _var22
216b0 12d             | 	res	1
216b0 12e             | arg01
216b0 12e             | 	res	1
216b0 12f             | arg02
216b0 12f             | 	res	1
216b0 130             | arg03
216b0 130             | 	res	1
216b0 131             | arg04
216b0 131             | 	res	1
216b0 132             | arg05
216b0 132             | 	res	1
216b0 133             | arg06
216b0 133             | 	res	1
216b0 134             | arg07
216b0 134             | 	res	1
216b0 135             | local01
216b0 135             | 	res	1
216b0 136             | local02
216b0 136             | 	res	1
216b0 137             | local03
216b0 137             | 	res	1
216b0 138             | local04
216b0 138             | 	res	1
216b0 139             | local05
216b0 139             | 	res	1
216b0 13a             | local06
216b0 13a             | 	res	1
216b0 13b             | local07
216b0 13b             | 	res	1
216b0 13c             | local08
216b0 13c             | 	res	1
216b0 13d             | local09
216b0 13d             | 	res	1
216b0 13e             | local10
216b0 13e             | 	res	1
216b0 13f             | local11
216b0 13f             | 	res	1
216b0 140             | local12
216b0 140             | 	res	1
216b0 141             | local13
216b0 141             | 	res	1
216b0 142             | local14
216b0 142             | 	res	1
216b0 143             | local15
216b0 143             | 	res	1
216b0 144             | local16
216b0 144             | 	res	1
216b0 145             | local17
216b0 145             | 	res	1
216b0 146             | local18
216b0 146             | 	res	1
216b0 147             | local19
216b0 147             | 	res	1
216b0 148             | local20
216b0 148             | 	res	1
216b0 149             | local21
216b0 149             | 	res	1
216b0 14a             | local22
216b0 14a             | 	res	1
216b0 14b             | local23
216b0 14b             | 	res	1
216b0 14c             | local24
216b0 14c             | 	res	1
216b0 14d             | local25
216b0 14d             | 	res	1
216b0 14e             | local26
216b0 14e             | 	res	1
216b0 14f             | local27
216b0 14f             | 	res	1
216b0 150             | local28
216b0 150             | 	res	1
216b0 151             | local29
216b0 151             | 	res	1
216b0 152             | local30
216b0 152             | 	res	1
216b0 153             | local31
216b0 153             | 	res	1
216b0 154             | local32
216b0 154             | 	res	1
216b0 155             | local33
216b0 155             | 	res	1
216b0 156             | local34
216b0 156             | 	res	1
216b0 157             | local35
216b0 157             | 	res	1
216b0 158             | local36
216b0 158             | 	res	1
216b0 159             | local37
216b0 159             | 	res	1
216b0 15a             | local38
216b0 15a             | 	res	1
216b0 15b             | local39
216b0 15b             | 	res	1
216b0 15c             | local40
216b0 15c             | 	res	1
216b0 15d             | local41
216b0 15d             | 	res	1
216b0 15e             | local42
216b0 15e             | 	res	1
216b0 15f             | local43
216b0 15f             | 	res	1
216b0 160             | local44
216b0 160             | 	res	1
216b0 161             | local45
216b0 161             | 	res	1
216b0 162             | local46
216b0 162             | 	res	1
216b0 163             | local47
216b0 163             | 	res	1
216b0 164             | local48
216b0 164             | 	res	1
216b0 165             | local49
216b0 165             | 	res	1
216b0 166             | local50
216b0 166             | 	res	1
216b0 167             | local51
216b0 167             | 	res	1
216b0 168             | local52
216b0 168             | 	res	1
216b0 169             | local53
216b0 169             | 	res	1
216b0 16a             | local54
216b0 16a             | 	res	1
216b0 16b             | local55
216b0 16b             | 	res	1
216b0 16c             | local56
216b0 16c             | 	res	1
216b0 16d             | local57
216b0 16d             | 	res	1
216b0 16e             | local58
216b0 16e             | 	res	1
216b0 16f             | local59
216b0 16f             | 	res	1
216b0 170             | local60
216b0 170             | 	res	1
216b0 171             | local61
216b0 171             | 	res	1
216b0 172             | local62
216b0 172             | 	res	1
216b0 173             | local63
216b0 173             | 	res	1
216b0 174             | local64
216b0 174             | 	res	1
216b0 175             | local65
216b0 175             | 	res	1
216b0 176             | local66
216b0 176             | 	res	1
216b0 177             | local67
216b0 177             | 	res	1
216b0 178             | local68
216b0 178             | 	res	1
216b0 179             | local69
216b0 179             | 	res	1
216b0 17a             | local70
216b0 17a             | 	res	1
216b0 17b             | local71
216b0 17b             | 	res	1
216b0 17c             | local72
216b0 17c             | 	res	1
216b0 17d             | local73
216b0 17d             | 	res	1
216b0 17e             | local74
216b0 17e             | 	res	1
216b0 17f             | local75
216b0 17f             | 	res	1
216b0 180             | local76
216b0 180             | 	res	1
216b0 181             | local77
216b0 181             | 	res	1
216b0 182             | local78
216b0 182             | 	res	1
216b0 183             | local79
216b0 183             | 	res	1
216b0 184             | local80
216b0 184             | 	res	1
216b0 185             | muldiva_
216b0 185             | 	res	1
216b0 186             | muldivb_
216b0 186             | 	res	1
216b0 187             | 	fit	480
216b0 187             | 
