00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.p2asm"
00000                 | con
00000                 | 	_clkfreq = 320000000
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 24 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 02 00 00 FF 
00414 004 A0 F0 07 F1 | 	add	ptra, ##1184
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 07 80 80 FF 
00428 009 00 F0 67 FD | 	hubset	##16781304
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 07 80 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##16781307
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 68 89 89 FF 
00448 011 14 00 6C FC | 	wrlong	##320000000, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 58 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 4A 62 FD | 	cogid	arg01
00614 084 03 4A 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 25 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 4B 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 4D 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 4F 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 51 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 24 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 4E 56 F0 |         shr	arg03, #1 wc
00688 0a1 25 4D 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 4A 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 4C FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 4E 56 F0 |         shr	arg03, #1 wc
00698 0a5 25 4D 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 4A 06 C1 |  if_c   add	arg01, #2
006a0 0a7 26 4D 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 25 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 4E 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 27 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 4C 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 55 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 55 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 85 09 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0A 63 FD |        getqx   muldivb_
00740 0cf 19 08 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 84 09 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 85 0B 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 84 09 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 85 0B 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 24 06 F6 |     mov result1, #0
00778 0dd 00 26 06 F6 |     mov result2, #0
0077c 0de 25 07 02 F6 |     mov abortchain, arg01
00780 0df 25 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 4A 06 F1 |     add arg01, #4
00788 0e1 25 F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 4A 06 F1 |     add arg01, #4
00790 0e3 25 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 4A 06 F1 |     add arg01, #4
00798 0e5 25 B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 26 4B 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 25 F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 4A 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 4A 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 26 25 02 F6 |     mov result1, arg02
007d4 0f4 01 26 06 F6 |     mov result2, #1
007d8 0f5 25 4D 02 FB |     rdlong arg02, arg01
007dc 0f6 04 4A 06 F1 |     add arg01, #4
007e0 0f7 25 F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 4A 06 F1 |     add arg01, #4
007e8 0f9 25 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 4A 06 F1 |     add arg01, #4
007f0 0fb 25 B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 4A 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 4E 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 28 82 00 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 30 92 00 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 A4 58 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 EC 57 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a C8 7F 00 00 | 	long	@__system__dat_
00830 10b             | ptr__hng030rm_spin2_dat__
00830 10b 64 5B 00 00 | 	long	@_hng030rm_spin2_dat_
00834 10c             | ptr__hng030rm_spin2_putchar_
00834 10c A0 23 00 00 | 	long	@_hng030rm_spin2_putchar
00838 10d             | ptr__hng030rm_spin2_putpixel1_
00838 10d 24 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
0083c 10e             | ptr__hng030rm_spin2_putpixel2_
0083c 10e 0C 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00840 10f             | ptr__hng030rm_spin2_putpixel4_
00840 10f E4 20 00 00 | 	long	@_hng030rm_spin2_putpixel4
00844 110             | ptr__hng030rm_spin2_putpixel8_
00844 110 BC 21 00 00 | 	long	@_hng030rm_spin2_putpixel8
00848 111             | ptr__retrocog_spin2_serialcog_
00848 111 38 30 00 00 | 	long	@_retrocog_spin2_serialcog
0084c 112             | result1
0084c 112 00 00 00 00 | 	long	0
00850 113             | result2
00850 113 00 00 00 00 | 	long	0
00854 114             | result3
00854 114 00 00 00 00 | 	long	0
00858 115             | COG_BSS_START
00858 115             | 	fit	480
00858                 | 	orgh
00858                 | hubentry
00858                 | 
00858                 | _program
00858     5A 5A 05 F6 | 	mov	COUNT_, #90
0085c     B0 00 A0 FD | 	call	#pushregs_
00860     40 54 06 F6 | 	mov	local01, #64
00864     2C 0E 06 F1 | 	add	objptr, #44
00868     07 57 02 F6 | 	mov	local02, objptr
0086c                 | ' 
0086c                 | ' ' initialize pointers and variables
0086c                 | ' 
0086c                 | ' border_ptr:=@bordercolor
0086c     24 0E 86 F1 | 	sub	objptr, #36
00870     07 57 62 FC | 	wrlong	local02, objptr
00874     08 00 00 FF 
00878     00 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
0087c                 | ' font_ptr:=@st_font
0087c     04 0E 86 F1 | 	sub	objptr, #4
00880     07 17 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
00884                 | ' hdmibase:=base
00884     20 0E 06 F1 | 	add	objptr, #32
00888     07 01 68 FC | 	wrlong	#0, objptr
0088c     24 0E 86 F1 | 	sub	objptr, #36
00890     0D 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00894                 | ' p1:=@putpixel1
00894     07 4B 02 F6 | 	mov	arg01, objptr
00898     08 00 00 FF 
0089c     00 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
008a0     C0 2F B0 FD | 	call	#__system___make_methodptr
008a4     12 59 02 F6 | 	mov	local03, result1
008a8     DC 0E 06 F1 | 	add	objptr, #220
008ac     07 59 62 FC | 	wrlong	local03, objptr
008b0     DC 0E 86 F1 | 	sub	objptr, #220
008b4     0E 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
008b8                 | ' p2:=@putpixel2
008b8     07 4B 02 F6 | 	mov	arg01, objptr
008bc     A4 2F B0 FD | 	call	#__system___make_methodptr
008c0     12 59 02 F6 | 	mov	local03, result1
008c4     E0 0E 06 F1 | 	add	objptr, #224
008c8     07 59 62 FC | 	wrlong	local03, objptr
008cc     E0 0E 86 F1 | 	sub	objptr, #224
008d0     0F 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
008d4                 | ' p4:=@putpixel4
008d4     07 4B 02 F6 | 	mov	arg01, objptr
008d8     88 2F B0 FD | 	call	#__system___make_methodptr
008dc     12 59 02 F6 | 	mov	local03, result1
008e0     E4 0E 06 F1 | 	add	objptr, #228
008e4     07 59 62 FC | 	wrlong	local03, objptr
008e8     E4 0E 86 F1 | 	sub	objptr, #228
008ec     10 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
008f0                 | ' p8:=@putpixel8
008f0     07 4B 02 F6 | 	mov	arg01, objptr
008f4     6C 2F B0 FD | 	call	#__system___make_methodptr
008f8     12 59 02 F6 | 	mov	local03, result1
008fc     E8 0E 06 F1 | 	add	objptr, #232
00900     07 59 62 FC | 	wrlong	local03, objptr
00904     E8 0E 86 F1 | 	sub	objptr, #232
00908                 | ' 
00908                 | ' 
00908                 | ' ' the mode has to be set here to enable computing the buffer length
00908                 | ' 
00908                 | ' setmode(mode)
00908     40 4A 06 F6 | 	mov	arg01, #64
0090c     E8 1C B0 FD | 	call	#_hng030rm_spin2_setmode
00910     40 0E 06 F1 | 	add	objptr, #64
00914     07 5B 02 F6 | 	mov	local04, objptr
00918                 | ' 
00918                 | ' vblank_ptr:=@vblank
00918     34 0E 86 F1 | 	sub	objptr, #52
0091c     07 5B 62 FC | 	wrlong	local04, objptr
00920     28 0E 06 F1 | 	add	objptr, #40
00924     07 5D 02 F6 | 	mov	local05, objptr
00928                 | ' cursor_ptr:=@cursor_x
00928     24 0E 86 F1 | 	sub	objptr, #36
0092c     07 5D 62 FC | 	wrlong	local05, objptr
00930     88 0E 06 F1 | 	add	objptr, #136
00934     07 5F 02 F6 | 	mov	local06, objptr
00938                 | ' 
00938                 | ' fontnum_ptr:=@fontnum
00938     78 0E 86 F1 | 	sub	objptr, #120
0093c     07 5F 62 FC | 	wrlong	local06, objptr
00940                 | ' 
00940                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
00940     78 0E 06 F1 | 	add	objptr, #120
00944     07 01 68 FC | 	wrlong	#0, objptr
00948     1C 0E 06 F1 | 	add	objptr, #28
0094c     07 4B 02 F6 | 	mov	arg01, objptr
00950     B4 0E 86 F1 | 	sub	objptr, #180
00954     0F 00 00 FF 
00958     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
0095c     0B 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00960     0F 00 00 FF 
00964     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
00968                 | ' bytemove(@colors,@vgacolors,16)
00968     10 4E 06 F6 | 	mov	arg03, #16
0096c     CC 2D B0 FD | 	call	#__system____builtin_memmove
00970                 | ' 
00970                 | ' ' initialize a cursor
00970                 | ' 
00970                 | ' cursor_x:=0
00970     34 0E 06 F1 | 	add	objptr, #52
00974     07 01 48 FC | 	wrbyte	#0, objptr
00978                 | ' cursor_y:=0
00978     01 0E 06 F1 | 	add	objptr, #1
0097c     07 01 48 FC | 	wrbyte	#0, objptr
00980                 | ' cursor_sh:=14
00980     01 0E 06 F1 | 	add	objptr, #1
00984     07 1D 48 FC | 	wrbyte	#14, objptr
00988     36 0E 86 F1 | 	sub	objptr, #54
0098c                 | ' 
0098c                 | ' 
0098c                 | ' ' start the cog
0098c                 | ' 
0098c                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
0098c     0F 00 00 FF 
00990     68 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00994     0B 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00998     0F 00 00 FF 
0099c     68 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
009a0     07 4F 02 F6 | 	mov	arg03, objptr
009a4     10 4A 06 F6 | 	mov	arg01, #16
009a8     28 4E 62 FD | 	setq	arg03
009ac     26 4B F2 FC | 	coginit	arg01, arg02 wc
009b0     01 4A 66 C6 |  if_b	neg	arg01, #1
009b4     25 25 02 F6 | 	mov	result1, arg01
009b8     12 61 02 F6 | 	mov	local07, result1
009bc     28 0E 06 F1 | 	add	objptr, #40
009c0     07 61 62 FC | 	wrlong	local07, objptr
009c4     28 0E 86 F1 | 	sub	objptr, #40
009c8                 | ' waitms(20)
009c8     14 4A 06 F6 | 	mov	arg01, #20
009cc     D0 2F B0 FD | 	call	#__system___waitms
009d0                 | ' 
009d0                 | ' ' clear the screen and set the colors to green on black
009d0                 | ' 
009d0                 | ' cls(c_green,c_black)
009d0     C7 4A 06 F6 | 	mov	arg01, #199
009d4     00 4C 06 F6 | 	mov	arg02, #0
009d8     88 18 B0 FD | 	call	#_hng030rm_spin2_cls
009dc                 | ' setbordercolor(0,0,128)
009dc     00 4A 06 F6 | 	mov	arg01, #0
009e0     00 4C 06 F6 | 	mov	arg02, #0
009e4     80 4E 06 F6 | 	mov	arg03, #128
009e8     54 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
009ec                 | ' setwritecolors(c_green,c_black)
009ec     00 4C 06 F6 | 	mov	arg02, #0
009f0                 | ' 
009f0                 | ' 
009f0                 | ' write_color:=ff
009f0     38 0E 06 F1 | 	add	objptr, #56
009f4     07 8F 69 FC | 	wrlong	#199, objptr
009f8                 | ' write_background:=bb
009f8     04 0E 06 F1 | 	add	objptr, #4
009fc     07 01 68 FC | 	wrlong	#0, objptr
00a00                 | ' 
00a00                 | ' return cog
00a00     14 0E 86 F1 | 	sub	objptr, #20
00a04     07 25 02 FB | 	rdlong	result1, objptr
00a08     28 0E 86 F1 | 	sub	objptr, #40
00a0c     00 4A 06 F6 | 	mov	arg01, #0
00a10     00 4E 06 F6 | 	mov	arg03, #0
00a14     28 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a18                 | ' v030.start(mode,pin)
00a18                 | ' v030.setbordercolor(0,0,0)
00a18                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a18     07 4B 02 F6 | 	mov	arg01, objptr
00a1c     0C 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a20     40 2E B0 FD | 	call	#__system___make_methodptr
00a24     00 28 06 F6 | 	mov	result3, #0
00a28     00 26 06 F6 | 	mov	result2, #0
00a2c     12 4D 02 F6 | 	mov	arg02, result1
00a30     00 4E 06 F6 | 	mov	arg03, #0
00a34     00 50 06 F6 | 	mov	arg04, #0
00a38     00 4A 06 F6 | 	mov	arg01, #0
00a3c     DC 2F B0 FD | 	call	#__system___basic_open
00a40     EC 0E 06 F1 | 	add	objptr, #236
00a44                 | ' 
00a44                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00a44     07 63 02 F6 | 	mov	local08, objptr
00a48     01 00 00 FF 
00a4c     18 0F 06 F1 | 	add	objptr, ##792
00a50     07 65 02 F6 | 	mov	local09, objptr
00a54     32 63 62 FC | 	wrlong	local08, local09
00a58     04 64 06 F1 | 	add	local09, #4
00a5c     32 23 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local09
00a60     07 4F 02 F6 | 	mov	arg03, objptr
00a64     10 4A 06 F6 | 	mov	arg01, #16
00a68     28 4E 62 FD | 	setq	arg03
00a6c     04 4B F2 FC | 	coginit	arg01, entryptr__ wc
00a70     01 4A 66 C6 |  if_b	neg	arg01, #1
00a74     25 25 02 F6 | 	mov	result1, arg01
00a78     02 00 00 FF 
00a7c     04 0E 86 F1 | 	sub	objptr, ##1028
00a80     9A 4A 06 F6 | 	mov	arg01, #154
00a84     93 4C 06 F6 | 	mov	arg02, #147
00a88     D8 17 B0 FD | 	call	#_hng030rm_spin2_cls
00a8c                 | ' #line 2 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.bas"
00a8c                 | ' 
00a8c                 | ' 'e=0 ' this strange thing makes the program run in full optimization
00a8c                 | ' 
00a8c                 | ' startvideo 
00a8c                 | ' rm.start
00a8c                 | ' 
00a8c                 | ' cls
00a8c                 | ' print "Basic test"
00a8c     00 4A 06 F6 | 	mov	arg01, #0
00a90     E0 42 B0 FD | 	call	#__system___getiolock_0102
00a94     12 4B 02 F6 | 	mov	arg01, result1
00a98     08 2E B0 FD | 	call	#__system___lockmem
00a9c     00 24 06 F6 | 	mov	result1, #0
00aa0     2C 00 00 FF 
00aa4     2E 4D 06 F6 | 	mov	arg02, ##@LR__0303
00aa8     00 4A 06 F6 | 	mov	arg01, #0
00aac     00 4E 06 F6 | 	mov	arg03, #0
00ab0     68 30 B0 FD | 	call	#__system___basic_print_string
00ab4     12 67 02 F6 | 	mov	local10, result1
00ab8     00 68 06 F6 | 	mov	local11, #0
00abc     00 4A 06 F6 | 	mov	arg01, #0
00ac0     0A 4C 06 F6 | 	mov	arg02, #10
00ac4     00 4E 06 F6 | 	mov	arg03, #0
00ac8     04 30 B0 FD | 	call	#__system___basic_print_char
00acc     01 24 06 F6 | 	mov	result1, #1
00ad0     01 6A 06 F6 | 	mov	local12, #1
00ad4     00 6C 06 F6 | 	mov	local13, #0
00ad8     00 4A 06 F6 | 	mov	arg01, #0
00adc     94 42 B0 FD | 	call	#__system___getiolock_0102
00ae0     12 01 68 FC | 	wrlong	#0, result1
00ae4     00 24 06 F6 | 	mov	result1, #0
00ae8     00 6E 06 F6 | 	mov	local14, #0
00aec                 | ' print
00aec     00 4A 06 F6 | 	mov	arg01, #0
00af0     80 42 B0 FD | 	call	#__system___getiolock_0102
00af4     12 4B 02 F6 | 	mov	arg01, result1
00af8     A8 2D B0 FD | 	call	#__system___lockmem
00afc     00 24 06 F6 | 	mov	result1, #0
00b00     00 70 06 F6 | 	mov	local15, #0
00b04     00 4A 06 F6 | 	mov	arg01, #0
00b08     0A 4C 06 F6 | 	mov	arg02, #10
00b0c     00 4E 06 F6 | 	mov	arg03, #0
00b10     BC 2F B0 FD | 	call	#__system___basic_print_char
00b14     01 24 06 F6 | 	mov	result1, #1
00b18     01 72 06 F6 | 	mov	local16, #1
00b1c     00 74 06 F6 | 	mov	local17, #0
00b20     00 4A 06 F6 | 	mov	arg01, #0
00b24     4C 42 B0 FD | 	call	#__system___getiolock_0102
00b28     12 01 68 FC | 	wrlong	#0, result1
00b2c     00 24 06 F6 | 	mov	result1, #0
00b30     00 76 06 F6 | 	mov	local18, #0
00b34                 | ' 
00b34                 | ' do
00b34                 | LR__0001
00b34                 | '   if lpeek($30)<>0 then
00b34                 | ' asm
00b34     30 24 0E FB | 	rdlong	result1, #48 wz
00b38                 | ' return r
00b38     F0 03 90 AD |  if_e	jmp	#LR__0013
00b3c                 | ' asm
00b3c     33 24 C6 FA | 	rdbyte	result1, #51
00b40                 | ' return r
00b40     12 79 02 F6 | 	mov	local19, result1
00b44     3C 7B 02 F6 | 	mov	local20, local19
00b48     07 7A 46 F7 | 	zerox	local20, #7
00b4c     02 00 00 FF 
00b50     84 0E 06 F1 | 	add	objptr, ##1156
00b54     07 7B 62 FC | 	wrlong	local20, objptr
00b58                 | '     cmd=peek($33)
00b58                 | '     if cmd<>0 then
00b58     07 7B 0A FB | 	rdlong	local20, objptr wz
00b5c                 | ' asm
00b5c     32 7C C6 5A |  if_ne	rdbyte	local21, #50
00b60                 | ' return r
00b60                 | ' asm
00b60     31 24 C6 5A |  if_ne	rdbyte	result1, #49
00b64                 | ' return r
00b64     12 7F 02 56 |  if_ne	mov	local22, result1
00b68     00 4C 06 F6 | 	mov	arg02, #0
00b6c                 | ' asm
00b6c     30 00 6C FC | 	wrlong	#0, #48
00b70                 | '     lpoke $30,0 
00b70                 | '     if cmd=$87 then print "Keyboard key released, scancode "; b11 
00b70     07 7B 02 FB | 	rdlong	local20, objptr
00b74     02 00 00 FF 
00b78     84 0E 86 F1 | 	sub	objptr, ##1156
00b7c     87 7A 0E F2 | 	cmp	local20, #135 wz
00b80     A0 00 90 5D |  if_ne	jmp	#LR__0002
00b84     3E 81 02 F6 | 	mov	local23, local21
00b88     07 80 46 F7 | 	zerox	local23, #7
00b8c     00 4A 06 F6 | 	mov	arg01, #0
00b90     E0 41 B0 FD | 	call	#__system___getiolock_0102
00b94     12 4B 02 F6 | 	mov	arg01, result1
00b98     08 2D B0 FD | 	call	#__system___lockmem
00b9c     00 24 06 F6 | 	mov	result1, #0
00ba0     00 70 06 F6 | 	mov	local15, #0
00ba4     2C 00 00 FF 
00ba8     39 73 06 F6 | 	mov	local16, ##@LR__0304
00bac     39 75 02 F6 | 	mov	local17, local16
00bb0     00 76 06 F6 | 	mov	local18, #0
00bb4     00 4A 06 F6 | 	mov	arg01, #0
00bb8     3A 4D 02 F6 | 	mov	arg02, local17
00bbc     00 4E 06 F6 | 	mov	arg03, #0
00bc0     58 2F B0 FD | 	call	#__system___basic_print_string
00bc4     12 67 02 F6 | 	mov	local10, result1
00bc8     00 68 06 F6 | 	mov	local11, #0
00bcc     40 6B 02 F6 | 	mov	local12, local23
00bd0     00 6C 06 F6 | 	mov	local13, #0
00bd4     0A 6E 06 F6 | 	mov	local14, #10
00bd8     00 4A 06 F6 | 	mov	arg01, #0
00bdc     35 4D 02 F6 | 	mov	arg02, local12
00be0     00 4E 06 F6 | 	mov	arg03, #0
00be4     0A 50 06 F6 | 	mov	arg04, #10
00be8     BC 2F B0 FD | 	call	#__system___basic_print_unsigned
00bec     12 83 02 F6 | 	mov	local24, result1
00bf0     00 84 06 F6 | 	mov	local25, #0
00bf4     00 4A 06 F6 | 	mov	arg01, #0
00bf8     0A 4C 06 F6 | 	mov	arg02, #10
00bfc     00 4E 06 F6 | 	mov	arg03, #0
00c00     CC 2E B0 FD | 	call	#__system___basic_print_char
00c04     01 24 06 F6 | 	mov	result1, #1
00c08     01 86 06 F6 | 	mov	local26, #1
00c0c     00 88 06 F6 | 	mov	local27, #0
00c10     00 4A 06 F6 | 	mov	arg01, #0
00c14     5C 41 B0 FD | 	call	#__system___getiolock_0102
00c18     12 01 68 FC | 	wrlong	#0, result1
00c1c     00 24 06 F6 | 	mov	result1, #0
00c20     00 8A 06 F6 | 	mov	local28, #0
00c24                 | LR__0002
00c24                 | '     if cmd=$88 then print "Keyboard key pressed,  scancode "; b11   ; ", charcode "; b12
00c24     02 00 00 FF 
00c28     84 0E 06 F1 | 	add	objptr, ##1156
00c2c     07 7B 02 FB | 	rdlong	local20, objptr
00c30     02 00 00 FF 
00c34     84 0E 86 F1 | 	sub	objptr, ##1156
00c38     88 7A 0E F2 | 	cmp	local20, #136 wz
00c3c     F8 00 90 5D |  if_ne	jmp	#LR__0003
00c40     3E 8D 02 F6 | 	mov	local29, local21
00c44     07 8C 46 F7 | 	zerox	local29, #7
00c48     3F 8F 02 F6 | 	mov	local30, local22
00c4c     07 8E 46 F7 | 	zerox	local30, #7
00c50     00 4A 06 F6 | 	mov	arg01, #0
00c54     1C 41 B0 FD | 	call	#__system___getiolock_0102
00c58     12 4B 02 F6 | 	mov	arg01, result1
00c5c     44 2C B0 FD | 	call	#__system___lockmem
00c60     00 24 06 F6 | 	mov	result1, #0
00c64     00 70 06 F6 | 	mov	local15, #0
00c68     2C 00 00 FF 
00c6c     5A 73 06 F6 | 	mov	local16, ##@LR__0305
00c70     39 75 02 F6 | 	mov	local17, local16
00c74     00 76 06 F6 | 	mov	local18, #0
00c78     00 4A 06 F6 | 	mov	arg01, #0
00c7c     3A 4D 02 F6 | 	mov	arg02, local17
00c80     00 4E 06 F6 | 	mov	arg03, #0
00c84     94 2E B0 FD | 	call	#__system___basic_print_string
00c88     12 67 02 F6 | 	mov	local10, result1
00c8c     00 68 06 F6 | 	mov	local11, #0
00c90     46 6B 02 F6 | 	mov	local12, local29
00c94     00 6C 06 F6 | 	mov	local13, #0
00c98     0A 6E 06 F6 | 	mov	local14, #10
00c9c     00 4A 06 F6 | 	mov	arg01, #0
00ca0     35 4D 02 F6 | 	mov	arg02, local12
00ca4     00 4E 06 F6 | 	mov	arg03, #0
00ca8     0A 50 06 F6 | 	mov	arg04, #10
00cac     F8 2E B0 FD | 	call	#__system___basic_print_unsigned
00cb0     12 83 02 F6 | 	mov	local24, result1
00cb4     00 84 06 F6 | 	mov	local25, #0
00cb8     2C 00 00 FF 
00cbc     7B 87 06 F6 | 	mov	local26, ##@LR__0306
00cc0     43 89 02 F6 | 	mov	local27, local26
00cc4     00 8A 06 F6 | 	mov	local28, #0
00cc8     00 4A 06 F6 | 	mov	arg01, #0
00ccc     44 4D 02 F6 | 	mov	arg02, local27
00cd0     00 4E 06 F6 | 	mov	arg03, #0
00cd4     44 2E B0 FD | 	call	#__system___basic_print_string
00cd8     12 91 02 F6 | 	mov	local31, result1
00cdc     00 92 06 F6 | 	mov	local32, #0
00ce0     47 95 02 F6 | 	mov	local33, local30
00ce4     00 96 06 F6 | 	mov	local34, #0
00ce8     0A 98 06 F6 | 	mov	local35, #10
00cec     00 4A 06 F6 | 	mov	arg01, #0
00cf0     4A 4D 02 F6 | 	mov	arg02, local33
00cf4     00 4E 06 F6 | 	mov	arg03, #0
00cf8     0A 50 06 F6 | 	mov	arg04, #10
00cfc     A8 2E B0 FD | 	call	#__system___basic_print_unsigned
00d00     12 9B 02 F6 | 	mov	local36, result1
00d04     00 9C 06 F6 | 	mov	local37, #0
00d08     00 4A 06 F6 | 	mov	arg01, #0
00d0c     0A 4C 06 F6 | 	mov	arg02, #10
00d10     00 4E 06 F6 | 	mov	arg03, #0
00d14     B8 2D B0 FD | 	call	#__system___basic_print_char
00d18     01 24 06 F6 | 	mov	result1, #1
00d1c     01 9E 06 F6 | 	mov	local38, #1
00d20     00 A0 06 F6 | 	mov	local39, #0
00d24     00 4A 06 F6 | 	mov	arg01, #0
00d28     48 40 B0 FD | 	call	#__system___getiolock_0102
00d2c     12 01 68 FC | 	wrlong	#0, result1
00d30     00 24 06 F6 | 	mov	result1, #0
00d34     00 A2 06 F6 | 	mov	local40, #0
00d38                 | LR__0003
00d38                 | '     if cmd=$89 then 
00d38     02 00 00 FF 
00d3c     84 0E 06 F1 | 	add	objptr, ##1156
00d40     07 7B 02 FB | 	rdlong	local20, objptr
00d44     02 00 00 FF 
00d48     84 0E 86 F1 | 	sub	objptr, ##1156
00d4c     89 7A 0E F2 | 	cmp	local20, #137 wz
00d50     D8 01 90 5D |  if_ne	jmp	#LR__0012
00d54                 | '       if b11=0 then 
00d54     3E 7B 02 F6 | 	mov	local20, local21
00d58     07 7A 4E F7 | 	zerox	local20, #7 wz
00d5c     70 00 90 5D |  if_ne	jmp	#LR__0004
00d60                 | '         print "Keyboard modifiers released"
00d60     00 4A 06 F6 | 	mov	arg01, #0
00d64     0C 40 B0 FD | 	call	#__system___getiolock_0102
00d68     12 4B 02 F6 | 	mov	arg01, result1
00d6c     34 2B B0 FD | 	call	#__system___lockmem
00d70     00 24 06 F6 | 	mov	result1, #0
00d74     00 70 06 F6 | 	mov	local15, #0
00d78     2C 00 00 FF 
00d7c     87 73 06 F6 | 	mov	local16, ##@LR__0307
00d80     39 75 02 F6 | 	mov	local17, local16
00d84     00 76 06 F6 | 	mov	local18, #0
00d88     00 4A 06 F6 | 	mov	arg01, #0
00d8c     3A 4D 02 F6 | 	mov	arg02, local17
00d90     00 4E 06 F6 | 	mov	arg03, #0
00d94     84 2D B0 FD | 	call	#__system___basic_print_string
00d98     12 67 02 F6 | 	mov	local10, result1
00d9c     00 68 06 F6 | 	mov	local11, #0
00da0     00 4A 06 F6 | 	mov	arg01, #0
00da4     0A 4C 06 F6 | 	mov	arg02, #10
00da8     00 4E 06 F6 | 	mov	arg03, #0
00dac     20 2D B0 FD | 	call	#__system___basic_print_char
00db0     01 24 06 F6 | 	mov	result1, #1
00db4     01 6A 06 F6 | 	mov	local12, #1
00db8     00 6C 06 F6 | 	mov	local13, #0
00dbc     00 4A 06 F6 | 	mov	arg01, #0
00dc0     B0 3F B0 FD | 	call	#__system___getiolock_0102
00dc4     12 01 68 FC | 	wrlong	#0, result1
00dc8     00 6E 06 F6 | 	mov	local14, #0
00dcc     5C 01 90 FD | 	jmp	#LR__0011
00dd0                 | LR__0004
00dd0     3E A5 02 F6 | 	mov	local41, local21
00dd4     07 A4 46 F7 | 	zerox	local41, #7
00dd8                 | '         print "Keyboard modifiers pressed: ";hex$(b11)
00dd8     00 4A 06 F6 | 	mov	arg01, #0
00ddc     94 3F B0 FD | 	call	#__system___getiolock_0102
00de0     12 4B 02 F6 | 	mov	arg01, result1
00de4     BC 2A B0 FD | 	call	#__system___lockmem
00de8     00 24 06 F6 | 	mov	result1, #0
00dec     00 70 06 F6 | 	mov	local15, #0
00df0     2C 00 00 FF 
00df4     A3 73 06 F6 | 	mov	local16, ##@LR__0308
00df8     39 75 02 F6 | 	mov	local17, local16
00dfc     00 76 06 F6 | 	mov	local18, #0
00e00     00 4A 06 F6 | 	mov	arg01, #0
00e04     3A 4D 02 F6 | 	mov	arg02, local17
00e08     00 4E 06 F6 | 	mov	arg03, #0
00e0c     0C 2D B0 FD | 	call	#__system___basic_print_string
00e10     12 67 02 F6 | 	mov	local10, result1
00e14     00 68 06 F6 | 	mov	local11, #0
00e18     52 6B 02 F6 | 	mov	local12, local41
00e1c     00 6C 06 F6 | 	mov	local13, #0
00e20     35 A7 02 F6 | 	mov	local42, local12
00e24     00 4C 06 F6 | 	mov	arg02, #0
00e28     10 4E 06 F6 | 	mov	arg03, #16
00e2c     00 A8 0E F6 | 	mov	local43, #0 wz
00e30     01 A8 06 F6 | 	mov	local43, #1
00e34     10 AA 06 F6 | 	mov	local44, #16
00e38     01 AC 06 F6 | 	mov	local45, #1
00e3c     F4 F1 9F FE | 	loc	pa,	#(@LR__0006-@LR__0005)
00e40     93 00 A0 FD | 	call	#FCACHE_LOAD_
00e44                 | LR__0005
00e44     00 AE 06 F6 | 	mov	local46, #0
00e48     53 AB 1A F2 | 	cmp	local44, local42 wcz
00e4c     01 AE 66 E6 |  if_be	neg	local46, #1
00e50     00 B0 06 F6 | 	mov	local47, #0
00e54     55 AD 1A F2 | 	cmp	local45, local44 wcz
00e58     01 B0 66 C6 |  if_b	neg	local47, #1
00e5c     58 AF CA F7 | 	test	local46, local47 wz
00e60     14 00 90 AD |  if_e	jmp	#LR__0007
00e64     55 AD 02 F6 | 	mov	local45, local44
00e68     10 AA 06 FD | 	qmul	local44, #16
00e6c     18 AA 62 FD | 	getqx	local44
00e70     01 A8 06 F1 | 	add	local43, #1
00e74     CC FF 9F FD | 	jmp	#LR__0005
00e78                 | LR__0006
00e78                 | LR__0007
00e78     20 A8 3E F3 | 	fle	local43, #32 wcz
00e7c     54 4B 02 F6 | 	mov	arg01, local43
00e80     02 4A 06 F1 | 	add	arg01, #2
00e84     DC 34 B0 FD | 	call	#__system___gc_alloc_managed
00e88     12 B3 02 F6 | 	mov	local48, result1
00e8c     54 B5 02 F6 | 	mov	local49, local43
00e90     59 B5 02 F1 | 	add	local49, local48
00e94     5A 01 48 FC | 	wrbyte	#0, local49
00e98     A0 F1 9F FE | 	loc	pa,	#(@LR__0009-@LR__0008)
00e9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
00ea0                 | LR__0008
00ea0     00 A8 1E F2 | 	cmp	local43, #0 wcz
00ea4     34 00 90 ED |  if_be	jmp	#LR__0010
00ea8     01 A8 86 F1 | 	sub	local43, #1
00eac     53 09 03 F6 | 	mov	muldiva_, local42
00eb0     10 0A 07 F6 | 	mov	muldivb_, #16
00eb4     CC 00 A0 FD | 	call	#unsdivide_
00eb8     84 B7 02 F6 | 	mov	local50, muldiva_
00ebc     85 A7 02 F6 | 	mov	local42, muldivb_
00ec0     0A B6 1E F2 | 	cmp	local50, #10 wcz
00ec4     30 B6 06 C1 |  if_b	add	local50, #48
00ec8     37 B6 06 31 |  if_ae	add	local50, #55
00ecc     54 B9 02 F6 | 	mov	local51, local43
00ed0     59 B9 02 F1 | 	add	local51, local48
00ed4     5C B7 42 FC | 	wrbyte	local50, local51
00ed8     C4 FF 9F FD | 	jmp	#LR__0008
00edc                 | LR__0009
00edc                 | LR__0010
00edc     59 25 02 F6 | 	mov	result1, local48
00ee0     12 6F 02 F6 | 	mov	local14, result1
00ee4     00 82 06 F6 | 	mov	local24, #0
00ee8     34 4B 02 F6 | 	mov	arg01, local11
00eec     37 4D 02 F6 | 	mov	arg02, local14
00ef0     00 4E 06 F6 | 	mov	arg03, #0
00ef4     24 2C B0 FD | 	call	#__system___basic_print_string
00ef8     12 85 02 F6 | 	mov	local25, result1
00efc     00 86 06 F6 | 	mov	local26, #0
00f00     00 4A 06 F6 | 	mov	arg01, #0
00f04     0A 4C 06 F6 | 	mov	arg02, #10
00f08     00 4E 06 F6 | 	mov	arg03, #0
00f0c     C0 2B B0 FD | 	call	#__system___basic_print_char
00f10     01 24 06 F6 | 	mov	result1, #1
00f14     01 88 06 F6 | 	mov	local27, #1
00f18     00 8A 06 F6 | 	mov	local28, #0
00f1c     00 4A 06 F6 | 	mov	arg01, #0
00f20     50 3E B0 FD | 	call	#__system___getiolock_0102
00f24     12 01 68 FC | 	wrlong	#0, result1
00f28     00 90 06 F6 | 	mov	local31, #0
00f2c                 | LR__0011
00f2c                 | LR__0012
00f2c                 | LR__0013
00f2c                 | '   
00f2c                 | '   if lpeek($34)<>0 then
00f2c                 | ' asm
00f2c     34 24 0E FB | 	rdlong	result1, #52 wz
00f30                 | ' return r
00f30     C0 05 90 AD |  if_e	jmp	#LR__0020
00f34                 | ' asm
00f34     37 24 C6 FA | 	rdbyte	result1, #55
00f38                 | ' return r
00f38     12 79 02 F6 | 	mov	local19, result1
00f3c     3C 7B 02 F6 | 	mov	local20, local19
00f40     07 7A 46 F7 | 	zerox	local20, #7
00f44     02 00 00 FF 
00f48     84 0E 06 F1 | 	add	objptr, ##1156
00f4c     07 7B 62 FC | 	wrlong	local20, objptr
00f50                 | '     cmd=peek($37)
00f50                 | '     if cmd<>0 then
00f50     07 7B 0A FB | 	rdlong	local20, objptr wz
00f54                 | ' asm
00f54     36 7C C6 5A |  if_ne	rdbyte	local21, #54
00f58                 | ' return r
00f58                 | ' asm
00f58     35 24 C6 5A |  if_ne	rdbyte	result1, #53
00f5c                 | ' return r
00f5c     12 7F 02 56 |  if_ne	mov	local22, result1
00f60     00 4C 06 F6 | 	mov	arg02, #0
00f64                 | ' asm
00f64     34 00 6C FC | 	wrlong	#0, #52
00f68                 | '     lpoke $34,0
00f68                 | '     if cmd=$81 then mousex=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
00f68     07 7B 02 FB | 	rdlong	local20, objptr
00f6c     02 00 00 FF 
00f70     84 0E 86 F1 | 	sub	objptr, ##1156
00f74     81 7A 0E F2 | 	cmp	local20, #129 wz
00f78     48 01 90 5D |  if_ne	jmp	#LR__0014
00f7c     3E BB 02 F6 | 	mov	local52, local21
00f80     07 BA 46 F7 | 	zerox	local52, #7
00f84     3F BD 02 F6 | 	mov	local53, local22
00f88     07 BC 46 F7 | 	zerox	local53, #7
00f8c     5E BF 02 F6 | 	mov	local54, local53
00f90     07 BE 66 F0 | 	shl	local54, #7
00f94     5D C1 02 F6 | 	mov	local55, local52
00f98     5F C1 02 F1 | 	add	local55, local54
00f9c     02 00 00 FF 
00fa0     90 0E 06 F1 | 	add	objptr, ##1168
00fa4     07 C1 62 FC | 	wrlong	local55, objptr
00fa8     02 00 00 FF 
00fac     90 0E 86 F1 | 	sub	objptr, ##1168
00fb0     00 4A 06 F6 | 	mov	arg01, #0
00fb4     BC 3D B0 FD | 	call	#__system___getiolock_0102
00fb8     12 4B 02 F6 | 	mov	arg01, result1
00fbc     E4 28 B0 FD | 	call	#__system___lockmem
00fc0     00 24 06 F6 | 	mov	result1, #0
00fc4     00 78 06 F6 | 	mov	local19, #0
00fc8     00 70 06 F6 | 	mov	local15, #0
00fcc     2C 00 00 FF 
00fd0     C0 73 06 F6 | 	mov	local16, ##@LR__0309
00fd4     39 75 02 F6 | 	mov	local17, local16
00fd8     00 76 06 F6 | 	mov	local18, #0
00fdc     00 4A 06 F6 | 	mov	arg01, #0
00fe0     3A 4D 02 F6 | 	mov	arg02, local17
00fe4     00 4E 06 F6 | 	mov	arg03, #0
00fe8     30 2B B0 FD | 	call	#__system___basic_print_string
00fec     12 67 02 F6 | 	mov	local10, result1
00ff0     00 68 06 F6 | 	mov	local11, #0
00ff4     02 00 00 FF 
00ff8     90 0E 06 F1 | 	add	objptr, ##1168
00ffc     07 6D 02 FB | 	rdlong	local13, objptr
01000     02 00 00 FF 
01004     90 0E 86 F1 | 	sub	objptr, ##1168
01008     36 6B 02 F6 | 	mov	local12, local13
0100c     00 6E 06 F6 | 	mov	local14, #0
01010     0A 82 06 F6 | 	mov	local24, #10
01014     00 4A 06 F6 | 	mov	arg01, #0
01018     35 4D 02 F6 | 	mov	arg02, local12
0101c     00 4E 06 F6 | 	mov	arg03, #0
01020     0A 50 06 F6 | 	mov	arg04, #10
01024     3C 2B B0 FD | 	call	#__system___basic_print_integer
01028     12 85 02 F6 | 	mov	local25, result1
0102c     00 86 06 F6 | 	mov	local26, #0
01030     2C 00 00 FF 
01034     D1 89 06 F6 | 	mov	local27, ##@LR__0310
01038     44 8B 02 F6 | 	mov	local28, local27
0103c     00 90 06 F6 | 	mov	local31, #0
01040     00 4A 06 F6 | 	mov	arg01, #0
01044     45 4D 02 F6 | 	mov	arg02, local28
01048     00 4E 06 F6 | 	mov	arg03, #0
0104c     CC 2A B0 FD | 	call	#__system___basic_print_string
01050     12 93 02 F6 | 	mov	local32, result1
01054     00 94 06 F6 | 	mov	local33, #0
01058     02 00 00 FF 
0105c     94 0E 06 F1 | 	add	objptr, ##1172
01060     07 99 02 FB | 	rdlong	local35, objptr
01064     02 00 00 FF 
01068     94 0E 86 F1 | 	sub	objptr, ##1172
0106c     4C 97 02 F6 | 	mov	local34, local35
01070     00 9A 06 F6 | 	mov	local36, #0
01074     0A 9C 06 F6 | 	mov	local37, #10
01078     00 4A 06 F6 | 	mov	arg01, #0
0107c     4B 4D 02 F6 | 	mov	arg02, local34
01080     00 4E 06 F6 | 	mov	arg03, #0
01084     0A 50 06 F6 | 	mov	arg04, #10
01088     D8 2A B0 FD | 	call	#__system___basic_print_integer
0108c     12 9F 02 F6 | 	mov	local38, result1
01090     00 A0 06 F6 | 	mov	local39, #0
01094     00 4A 06 F6 | 	mov	arg01, #0
01098     0A 4C 06 F6 | 	mov	arg02, #10
0109c     00 4E 06 F6 | 	mov	arg03, #0
010a0     2C 2A B0 FD | 	call	#__system___basic_print_char
010a4     01 24 06 F6 | 	mov	result1, #1
010a8     01 A2 06 F6 | 	mov	local40, #1
010ac     00 C2 06 F6 | 	mov	local56, #0
010b0     00 4A 06 F6 | 	mov	arg01, #0
010b4     BC 3C B0 FD | 	call	#__system___getiolock_0102
010b8     12 01 68 FC | 	wrlong	#0, result1
010bc     00 24 06 F6 | 	mov	result1, #0
010c0     00 C4 06 F6 | 	mov	local57, #0
010c4                 | LR__0014
010c4                 | '     if cmd=$82 then mousey=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
010c4     02 00 00 FF 
010c8     84 0E 06 F1 | 	add	objptr, ##1156
010cc     07 7B 02 FB | 	rdlong	local20, objptr
010d0     02 00 00 FF 
010d4     84 0E 86 F1 | 	sub	objptr, ##1156
010d8     82 7A 0E F2 | 	cmp	local20, #130 wz
010dc     48 01 90 5D |  if_ne	jmp	#LR__0015
010e0     3E C7 02 F6 | 	mov	local58, local21
010e4     07 C6 46 F7 | 	zerox	local58, #7
010e8     3F C9 02 F6 | 	mov	local59, local22
010ec     07 C8 46 F7 | 	zerox	local59, #7
010f0     64 CB 02 F6 | 	mov	local60, local59
010f4     07 CA 66 F0 | 	shl	local60, #7
010f8     63 CD 02 F6 | 	mov	local61, local58
010fc     65 CD 02 F1 | 	add	local61, local60
01100     02 00 00 FF 
01104     94 0E 06 F1 | 	add	objptr, ##1172
01108     07 CD 62 FC | 	wrlong	local61, objptr
0110c     02 00 00 FF 
01110     94 0E 86 F1 | 	sub	objptr, ##1172
01114     00 4A 06 F6 | 	mov	arg01, #0
01118     58 3C B0 FD | 	call	#__system___getiolock_0102
0111c     12 4B 02 F6 | 	mov	arg01, result1
01120     80 27 B0 FD | 	call	#__system___lockmem
01124     00 24 06 F6 | 	mov	result1, #0
01128     00 78 06 F6 | 	mov	local19, #0
0112c     00 70 06 F6 | 	mov	local15, #0
01130     2C 00 00 FF 
01134     D6 73 06 F6 | 	mov	local16, ##@LR__0311
01138     39 75 02 F6 | 	mov	local17, local16
0113c     00 76 06 F6 | 	mov	local18, #0
01140     00 4A 06 F6 | 	mov	arg01, #0
01144     3A 4D 02 F6 | 	mov	arg02, local17
01148     00 4E 06 F6 | 	mov	arg03, #0
0114c     CC 29 B0 FD | 	call	#__system___basic_print_string
01150     12 67 02 F6 | 	mov	local10, result1
01154     00 68 06 F6 | 	mov	local11, #0
01158     02 00 00 FF 
0115c     90 0E 06 F1 | 	add	objptr, ##1168
01160     07 6D 02 FB | 	rdlong	local13, objptr
01164     02 00 00 FF 
01168     90 0E 86 F1 | 	sub	objptr, ##1168
0116c     36 6B 02 F6 | 	mov	local12, local13
01170     00 6E 06 F6 | 	mov	local14, #0
01174     0A 82 06 F6 | 	mov	local24, #10
01178     00 4A 06 F6 | 	mov	arg01, #0
0117c     35 4D 02 F6 | 	mov	arg02, local12
01180     00 4E 06 F6 | 	mov	arg03, #0
01184     0A 50 06 F6 | 	mov	arg04, #10
01188     D8 29 B0 FD | 	call	#__system___basic_print_integer
0118c     12 85 02 F6 | 	mov	local25, result1
01190     00 86 06 F6 | 	mov	local26, #0
01194     2C 00 00 FF 
01198     E7 89 06 F6 | 	mov	local27, ##@LR__0312
0119c     44 8B 02 F6 | 	mov	local28, local27
011a0     00 90 06 F6 | 	mov	local31, #0
011a4     00 4A 06 F6 | 	mov	arg01, #0
011a8     45 4D 02 F6 | 	mov	arg02, local28
011ac     00 4E 06 F6 | 	mov	arg03, #0
011b0     68 29 B0 FD | 	call	#__system___basic_print_string
011b4     12 93 02 F6 | 	mov	local32, result1
011b8     00 94 06 F6 | 	mov	local33, #0
011bc     02 00 00 FF 
011c0     94 0E 06 F1 | 	add	objptr, ##1172
011c4     07 99 02 FB | 	rdlong	local35, objptr
011c8     02 00 00 FF 
011cc     94 0E 86 F1 | 	sub	objptr, ##1172
011d0     4C 97 02 F6 | 	mov	local34, local35
011d4     00 9A 06 F6 | 	mov	local36, #0
011d8     0A 9C 06 F6 | 	mov	local37, #10
011dc     00 4A 06 F6 | 	mov	arg01, #0
011e0     4B 4D 02 F6 | 	mov	arg02, local34
011e4     00 4E 06 F6 | 	mov	arg03, #0
011e8     0A 50 06 F6 | 	mov	arg04, #10
011ec     74 29 B0 FD | 	call	#__system___basic_print_integer
011f0     12 9F 02 F6 | 	mov	local38, result1
011f4     00 A0 06 F6 | 	mov	local39, #0
011f8     00 4A 06 F6 | 	mov	arg01, #0
011fc     0A 4C 06 F6 | 	mov	arg02, #10
01200     00 4E 06 F6 | 	mov	arg03, #0
01204     C8 28 B0 FD | 	call	#__system___basic_print_char
01208     01 24 06 F6 | 	mov	result1, #1
0120c     01 A2 06 F6 | 	mov	local40, #1
01210     00 C2 06 F6 | 	mov	local56, #0
01214     00 4A 06 F6 | 	mov	arg01, #0
01218     58 3B B0 FD | 	call	#__system___getiolock_0102
0121c     12 01 68 FC | 	wrlong	#0, result1
01220     00 24 06 F6 | 	mov	result1, #0
01224     00 C4 06 F6 | 	mov	local57, #0
01228                 | LR__0015
01228                 | '     if cmd=$83 then mousewheel=b11+b12 shl 7 : print "Mousewheel: ";mousewheel
01228     02 00 00 FF 
0122c     84 0E 06 F1 | 	add	objptr, ##1156
01230     07 7B 02 FB | 	rdlong	local20, objptr
01234     02 00 00 FF 
01238     84 0E 86 F1 | 	sub	objptr, ##1156
0123c     83 7A 0E F2 | 	cmp	local20, #131 wz
01240     E0 00 90 5D |  if_ne	jmp	#LR__0016
01244     3E CF 02 F6 | 	mov	local62, local21
01248     07 CE 46 F7 | 	zerox	local62, #7
0124c     3F D1 02 F6 | 	mov	local63, local22
01250     07 D0 46 F7 | 	zerox	local63, #7
01254     68 D3 02 F6 | 	mov	local64, local63
01258     07 D2 66 F0 | 	shl	local64, #7
0125c     67 D5 02 F6 | 	mov	local65, local62
01260     69 D5 02 F1 | 	add	local65, local64
01264     02 00 00 FF 
01268     98 0E 06 F1 | 	add	objptr, ##1176
0126c     07 D5 62 FC | 	wrlong	local65, objptr
01270     02 00 00 FF 
01274     98 0E 86 F1 | 	sub	objptr, ##1176
01278     00 4A 06 F6 | 	mov	arg01, #0
0127c     F4 3A B0 FD | 	call	#__system___getiolock_0102
01280     12 4B 02 F6 | 	mov	arg01, result1
01284     1C 26 B0 FD | 	call	#__system___lockmem
01288     00 24 06 F6 | 	mov	result1, #0
0128c     00 70 06 F6 | 	mov	local15, #0
01290     2C 00 00 FF 
01294     EC 73 06 F6 | 	mov	local16, ##@LR__0313
01298     39 75 02 F6 | 	mov	local17, local16
0129c     00 76 06 F6 | 	mov	local18, #0
012a0     00 4A 06 F6 | 	mov	arg01, #0
012a4     3A 4D 02 F6 | 	mov	arg02, local17
012a8     00 4E 06 F6 | 	mov	arg03, #0
012ac     6C 28 B0 FD | 	call	#__system___basic_print_string
012b0     12 67 02 F6 | 	mov	local10, result1
012b4     00 68 06 F6 | 	mov	local11, #0
012b8     02 00 00 FF 
012bc     98 0E 06 F1 | 	add	objptr, ##1176
012c0     07 6D 02 FB | 	rdlong	local13, objptr
012c4     02 00 00 FF 
012c8     98 0E 86 F1 | 	sub	objptr, ##1176
012cc     36 6B 02 F6 | 	mov	local12, local13
012d0     00 6E 06 F6 | 	mov	local14, #0
012d4     0A 82 06 F6 | 	mov	local24, #10
012d8     00 4A 06 F6 | 	mov	arg01, #0
012dc     35 4D 02 F6 | 	mov	arg02, local12
012e0     00 4E 06 F6 | 	mov	arg03, #0
012e4     0A 50 06 F6 | 	mov	arg04, #10
012e8     78 28 B0 FD | 	call	#__system___basic_print_integer
012ec     12 85 02 F6 | 	mov	local25, result1
012f0     00 86 06 F6 | 	mov	local26, #0
012f4     00 4A 06 F6 | 	mov	arg01, #0
012f8     0A 4C 06 F6 | 	mov	arg02, #10
012fc     00 4E 06 F6 | 	mov	arg03, #0
01300     CC 27 B0 FD | 	call	#__system___basic_print_char
01304     01 24 06 F6 | 	mov	result1, #1
01308     01 88 06 F6 | 	mov	local27, #1
0130c     00 8A 06 F6 | 	mov	local28, #0
01310     00 4A 06 F6 | 	mov	arg01, #0
01314     5C 3A B0 FD | 	call	#__system___getiolock_0102
01318     12 01 68 FC | 	wrlong	#0, result1
0131c     00 24 06 F6 | 	mov	result1, #0
01320     00 90 06 F6 | 	mov	local31, #0
01324                 | LR__0016
01324                 | '     if cmd=$84 then print "Mouse key: ";b11
01324     02 00 00 FF 
01328     84 0E 06 F1 | 	add	objptr, ##1156
0132c     07 7B 02 FB | 	rdlong	local20, objptr
01330     02 00 00 FF 
01334     84 0E 86 F1 | 	sub	objptr, ##1156
01338     84 7A 0E F2 | 	cmp	local20, #132 wz
0133c     A0 00 90 5D |  if_ne	jmp	#LR__0017
01340     3E D7 02 F6 | 	mov	local66, local21
01344     07 D6 46 F7 | 	zerox	local66, #7
01348     00 4A 06 F6 | 	mov	arg01, #0
0134c     24 3A B0 FD | 	call	#__system___getiolock_0102
01350     12 4B 02 F6 | 	mov	arg01, result1
01354     4C 25 B0 FD | 	call	#__system___lockmem
01358     00 24 06 F6 | 	mov	result1, #0
0135c     00 70 06 F6 | 	mov	local15, #0
01360     2C 00 00 FF 
01364     F9 73 06 F6 | 	mov	local16, ##@LR__0314
01368     39 75 02 F6 | 	mov	local17, local16
0136c     00 76 06 F6 | 	mov	local18, #0
01370     00 4A 06 F6 | 	mov	arg01, #0
01374     3A 4D 02 F6 | 	mov	arg02, local17
01378     00 4E 06 F6 | 	mov	arg03, #0
0137c     9C 27 B0 FD | 	call	#__system___basic_print_string
01380     12 67 02 F6 | 	mov	local10, result1
01384     00 68 06 F6 | 	mov	local11, #0
01388     6B 6B 02 F6 | 	mov	local12, local66
0138c     00 6C 06 F6 | 	mov	local13, #0
01390     0A 6E 06 F6 | 	mov	local14, #10
01394     00 4A 06 F6 | 	mov	arg01, #0
01398     35 4D 02 F6 | 	mov	arg02, local12
0139c     00 4E 06 F6 | 	mov	arg03, #0
013a0     0A 50 06 F6 | 	mov	arg04, #10
013a4     00 28 B0 FD | 	call	#__system___basic_print_unsigned
013a8     12 83 02 F6 | 	mov	local24, result1
013ac     00 84 06 F6 | 	mov	local25, #0
013b0     00 4A 06 F6 | 	mov	arg01, #0
013b4     0A 4C 06 F6 | 	mov	arg02, #10
013b8     00 4E 06 F6 | 	mov	arg03, #0
013bc     10 27 B0 FD | 	call	#__system___basic_print_char
013c0     01 24 06 F6 | 	mov	result1, #1
013c4     01 86 06 F6 | 	mov	local26, #1
013c8     00 88 06 F6 | 	mov	local27, #0
013cc     00 4A 06 F6 | 	mov	arg01, #0
013d0     A0 39 B0 FD | 	call	#__system___getiolock_0102
013d4     12 01 68 FC | 	wrlong	#0, result1
013d8     00 24 06 F6 | 	mov	result1, #0
013dc     00 8A 06 F6 | 	mov	local28, #0
013e0                 | LR__0017
013e0                 | '     if cmd=$85 then print "Mouse clicked"
013e0     02 00 00 FF 
013e4     84 0E 06 F1 | 	add	objptr, ##1156
013e8     07 7B 02 FB | 	rdlong	local20, objptr
013ec     02 00 00 FF 
013f0     84 0E 86 F1 | 	sub	objptr, ##1156
013f4     85 7A 0E F2 | 	cmp	local20, #133 wz
013f8     70 00 90 5D |  if_ne	jmp	#LR__0018
013fc     00 4A 06 F6 | 	mov	arg01, #0
01400     70 39 B0 FD | 	call	#__system___getiolock_0102
01404     12 4B 02 F6 | 	mov	arg01, result1
01408     98 24 B0 FD | 	call	#__system___lockmem
0140c     00 24 06 F6 | 	mov	result1, #0
01410     00 70 06 F6 | 	mov	local15, #0
01414     2D 00 00 FF 
01418     05 72 06 F6 | 	mov	local16, ##@LR__0315
0141c     39 75 02 F6 | 	mov	local17, local16
01420     00 76 06 F6 | 	mov	local18, #0
01424     00 4A 06 F6 | 	mov	arg01, #0
01428     3A 4D 02 F6 | 	mov	arg02, local17
0142c     00 4E 06 F6 | 	mov	arg03, #0
01430     E8 26 B0 FD | 	call	#__system___basic_print_string
01434     12 67 02 F6 | 	mov	local10, result1
01438     00 68 06 F6 | 	mov	local11, #0
0143c     00 4A 06 F6 | 	mov	arg01, #0
01440     0A 4C 06 F6 | 	mov	arg02, #10
01444     00 4E 06 F6 | 	mov	arg03, #0
01448     84 26 B0 FD | 	call	#__system___basic_print_char
0144c     01 24 06 F6 | 	mov	result1, #1
01450     01 6A 06 F6 | 	mov	local12, #1
01454     00 6C 06 F6 | 	mov	local13, #0
01458     00 4A 06 F6 | 	mov	arg01, #0
0145c     14 39 B0 FD | 	call	#__system___getiolock_0102
01460     12 01 68 FC | 	wrlong	#0, result1
01464     00 24 06 F6 | 	mov	result1, #0
01468     00 6E 06 F6 | 	mov	local14, #0
0146c                 | LR__0018
0146c                 | '     if cmd=$86 then print "Mouse double clicked"
0146c     02 00 00 FF 
01470     84 0E 06 F1 | 	add	objptr, ##1156
01474     07 7B 02 FB | 	rdlong	local20, objptr
01478     02 00 00 FF 
0147c     84 0E 86 F1 | 	sub	objptr, ##1156
01480     86 7A 0E F2 | 	cmp	local20, #134 wz
01484     6C 00 90 5D |  if_ne	jmp	#LR__0019
01488     00 4A 06 F6 | 	mov	arg01, #0
0148c     E4 38 B0 FD | 	call	#__system___getiolock_0102
01490     12 4B 02 F6 | 	mov	arg01, result1
01494     0C 24 B0 FD | 	call	#__system___lockmem
01498     00 24 06 F6 | 	mov	result1, #0
0149c     00 70 06 F6 | 	mov	local15, #0
014a0     2D 00 00 FF 
014a4     13 72 06 F6 | 	mov	local16, ##@LR__0316
014a8     39 75 02 F6 | 	mov	local17, local16
014ac     00 76 06 F6 | 	mov	local18, #0
014b0     00 4A 06 F6 | 	mov	arg01, #0
014b4     3A 4D 02 F6 | 	mov	arg02, local17
014b8     00 4E 06 F6 | 	mov	arg03, #0
014bc     5C 26 B0 FD | 	call	#__system___basic_print_string
014c0     12 67 02 F6 | 	mov	local10, result1
014c4     00 68 06 F6 | 	mov	local11, #0
014c8     00 4A 06 F6 | 	mov	arg01, #0
014cc     0A 4C 06 F6 | 	mov	arg02, #10
014d0     00 4E 06 F6 | 	mov	arg03, #0
014d4     F8 25 B0 FD | 	call	#__system___basic_print_char
014d8     01 24 06 F6 | 	mov	result1, #1
014dc     01 6A 06 F6 | 	mov	local12, #1
014e0     00 6C 06 F6 | 	mov	local13, #0
014e4     00 4A 06 F6 | 	mov	arg01, #0
014e8     88 38 B0 FD | 	call	#__system___getiolock_0102
014ec     12 01 68 FC | 	wrlong	#0, result1
014f0     00 6E 06 F6 | 	mov	local14, #0
014f4                 | LR__0019
014f4                 | LR__0020
014f4                 | ' 
014f4                 | '   if lpeek($38)<>0 then 
014f4     38 4A 06 F6 | 	mov	arg01, #56
014f8                 | ' asm
014f8     38 24 06 FB | 	rdlong	result1, #56
014fc                 | ' return r
014fc     12 D9 0A F6 | 	mov	local67, result1 wz
01500     30 F6 9F AD |  if_e	jmp	#LR__0001
01504                 | ' asm
01504     3B 7A C6 FA | 	rdbyte	local20, #59
01508                 | ' return r
01508     07 7A 46 F7 | 	zerox	local20, #7
0150c     04 7A 46 F0 | 	shr	local20, #4
01510     02 00 00 FF 
01514     84 0E 06 F1 | 	add	objptr, ##1156
01518     07 7B 62 FC | 	wrlong	local20, objptr
0151c                 | ' asm
0151c     3B 78 C6 FA | 	rdbyte	local19, #59
01520                 | ' return r
01520     3C 7B 02 F6 | 	mov	local20, local19
01524     07 7A 46 F7 | 	zerox	local20, #7
01528     0F 7A 06 F5 | 	and	local20, #15
0152c     18 0E 06 F1 | 	add	objptr, #24
01530     07 7B 62 FC | 	wrlong	local20, objptr
01534                 | ' asm
01534     39 7C C6 FA | 	rdbyte	local21, #57
01538                 | ' return r
01538     38 4A 06 F6 | 	mov	arg01, #56
0153c                 | ' asm
0153c     38 24 C6 FA | 	rdbyte	result1, #56
01540                 | ' return r
01540     12 7F 02 F6 | 	mov	local22, result1
01544     00 4C 06 F6 | 	mov	arg02, #0
01548                 | ' asm
01548     38 00 6C FC | 	wrlong	#0, #56
0154c                 | '     b11=peek($39)
0154c                 | '     b12=peek($38)
0154c                 | '     lpoke $38,0
0154c                 | '     if cmd=8 then print "Midi note off, channel ";channel;", note ";b11
0154c     18 0E 86 F1 | 	sub	objptr, #24
01550     07 7B 02 FB | 	rdlong	local20, objptr
01554     02 00 00 FF 
01558     84 0E 86 F1 | 	sub	objptr, ##1156
0155c     08 7A 0E F2 | 	cmp	local20, #8 wz
01560     08 01 90 5D |  if_ne	jmp	#LR__0021
01564     3E DB 02 F6 | 	mov	local68, local21
01568     07 DA 46 F7 | 	zerox	local68, #7
0156c     00 4A 06 F6 | 	mov	arg01, #0
01570     00 38 B0 FD | 	call	#__system___getiolock_0102
01574     12 4B 02 F6 | 	mov	arg01, result1
01578     28 23 B0 FD | 	call	#__system___lockmem
0157c     00 24 06 F6 | 	mov	result1, #0
01580     00 78 06 F6 | 	mov	local19, #0
01584     00 70 06 F6 | 	mov	local15, #0
01588     2D 00 00 FF 
0158c     28 72 06 F6 | 	mov	local16, ##@LR__0317
01590     39 75 02 F6 | 	mov	local17, local16
01594     00 76 06 F6 | 	mov	local18, #0
01598     00 4A 06 F6 | 	mov	arg01, #0
0159c     3A 4D 02 F6 | 	mov	arg02, local17
015a0     00 4E 06 F6 | 	mov	arg03, #0
015a4     74 25 B0 FD | 	call	#__system___basic_print_string
015a8     12 67 02 F6 | 	mov	local10, result1
015ac     00 68 06 F6 | 	mov	local11, #0
015b0     02 00 00 FF 
015b4     9C 0E 06 F1 | 	add	objptr, ##1180
015b8     07 6D 02 FB | 	rdlong	local13, objptr
015bc     02 00 00 FF 
015c0     9C 0E 86 F1 | 	sub	objptr, ##1180
015c4     36 6B 02 F6 | 	mov	local12, local13
015c8     00 6E 06 F6 | 	mov	local14, #0
015cc     0A 82 06 F6 | 	mov	local24, #10
015d0     00 4A 06 F6 | 	mov	arg01, #0
015d4     35 4D 02 F6 | 	mov	arg02, local12
015d8     00 4E 06 F6 | 	mov	arg03, #0
015dc     0A 50 06 F6 | 	mov	arg04, #10
015e0     80 25 B0 FD | 	call	#__system___basic_print_integer
015e4     12 85 02 F6 | 	mov	local25, result1
015e8     00 86 06 F6 | 	mov	local26, #0
015ec     2D 00 00 FF 
015f0     40 88 06 F6 | 	mov	local27, ##@LR__0318
015f4     44 8B 02 F6 | 	mov	local28, local27
015f8     00 90 06 F6 | 	mov	local31, #0
015fc     00 4A 06 F6 | 	mov	arg01, #0
01600     45 4D 02 F6 | 	mov	arg02, local28
01604     00 4E 06 F6 | 	mov	arg03, #0
01608     10 25 B0 FD | 	call	#__system___basic_print_string
0160c     12 93 02 F6 | 	mov	local32, result1
01610     00 94 06 F6 | 	mov	local33, #0
01614     6D 97 02 F6 | 	mov	local34, local68
01618     00 98 06 F6 | 	mov	local35, #0
0161c     0A 9A 06 F6 | 	mov	local36, #10
01620     00 4A 06 F6 | 	mov	arg01, #0
01624     4B 4D 02 F6 | 	mov	arg02, local34
01628     00 4E 06 F6 | 	mov	arg03, #0
0162c     0A 50 06 F6 | 	mov	arg04, #10
01630     74 25 B0 FD | 	call	#__system___basic_print_unsigned
01634     12 9D 02 F6 | 	mov	local37, result1
01638     00 9E 06 F6 | 	mov	local38, #0
0163c     00 4A 06 F6 | 	mov	arg01, #0
01640     0A 4C 06 F6 | 	mov	arg02, #10
01644     00 4E 06 F6 | 	mov	arg03, #0
01648     84 24 B0 FD | 	call	#__system___basic_print_char
0164c     01 24 06 F6 | 	mov	result1, #1
01650     01 A0 06 F6 | 	mov	local39, #1
01654     00 A2 06 F6 | 	mov	local40, #0
01658     00 4A 06 F6 | 	mov	arg01, #0
0165c     14 37 B0 FD | 	call	#__system___getiolock_0102
01660     12 01 68 FC | 	wrlong	#0, result1
01664     00 24 06 F6 | 	mov	result1, #0
01668     00 C2 06 F6 | 	mov	local56, #0
0166c                 | LR__0021
0166c                 | '     if cmd=9 then print "Midi note on,  channel ";channel;", note ";b11;", velocity ";b12
0166c     02 00 00 FF 
01670     84 0E 06 F1 | 	add	objptr, ##1156
01674     07 7B 02 FB | 	rdlong	local20, objptr
01678     02 00 00 FF 
0167c     84 0E 86 F1 | 	sub	objptr, ##1156
01680     09 7A 0E F2 | 	cmp	local20, #9 wz
01684     60 01 90 5D |  if_ne	jmp	#LR__0022
01688     3E DD 02 F6 | 	mov	local69, local21
0168c     07 DC 46 F7 | 	zerox	local69, #7
01690     3F DF 02 F6 | 	mov	local70, local22
01694     07 DE 46 F7 | 	zerox	local70, #7
01698     00 4A 06 F6 | 	mov	arg01, #0
0169c     D4 36 B0 FD | 	call	#__system___getiolock_0102
016a0     12 4B 02 F6 | 	mov	arg01, result1
016a4     FC 21 B0 FD | 	call	#__system___lockmem
016a8     00 24 06 F6 | 	mov	result1, #0
016ac     00 78 06 F6 | 	mov	local19, #0
016b0     00 70 06 F6 | 	mov	local15, #0
016b4     2D 00 00 FF 
016b8     48 72 06 F6 | 	mov	local16, ##@LR__0319
016bc     39 75 02 F6 | 	mov	local17, local16
016c0     00 76 06 F6 | 	mov	local18, #0
016c4     00 4A 06 F6 | 	mov	arg01, #0
016c8     3A 4D 02 F6 | 	mov	arg02, local17
016cc     00 4E 06 F6 | 	mov	arg03, #0
016d0     48 24 B0 FD | 	call	#__system___basic_print_string
016d4     12 67 02 F6 | 	mov	local10, result1
016d8     00 68 06 F6 | 	mov	local11, #0
016dc     02 00 00 FF 
016e0     9C 0E 06 F1 | 	add	objptr, ##1180
016e4     07 6D 02 FB | 	rdlong	local13, objptr
016e8     02 00 00 FF 
016ec     9C 0E 86 F1 | 	sub	objptr, ##1180
016f0     36 6B 02 F6 | 	mov	local12, local13
016f4     00 6E 06 F6 | 	mov	local14, #0
016f8     0A 82 06 F6 | 	mov	local24, #10
016fc     00 4A 06 F6 | 	mov	arg01, #0
01700     35 4D 02 F6 | 	mov	arg02, local12
01704     00 4E 06 F6 | 	mov	arg03, #0
01708     0A 50 06 F6 | 	mov	arg04, #10
0170c     54 24 B0 FD | 	call	#__system___basic_print_integer
01710     12 85 02 F6 | 	mov	local25, result1
01714     00 86 06 F6 | 	mov	local26, #0
01718     2D 00 00 FF 
0171c     60 88 06 F6 | 	mov	local27, ##@LR__0320
01720     44 8B 02 F6 | 	mov	local28, local27
01724     00 90 06 F6 | 	mov	local31, #0
01728     00 4A 06 F6 | 	mov	arg01, #0
0172c     45 4D 02 F6 | 	mov	arg02, local28
01730     00 4E 06 F6 | 	mov	arg03, #0
01734     E4 23 B0 FD | 	call	#__system___basic_print_string
01738     12 93 02 F6 | 	mov	local32, result1
0173c     00 94 06 F6 | 	mov	local33, #0
01740     6E 97 02 F6 | 	mov	local34, local69
01744     00 98 06 F6 | 	mov	local35, #0
01748     0A 9A 06 F6 | 	mov	local36, #10
0174c     00 4A 06 F6 | 	mov	arg01, #0
01750     4B 4D 02 F6 | 	mov	arg02, local34
01754     00 4E 06 F6 | 	mov	arg03, #0
01758     0A 50 06 F6 | 	mov	arg04, #10
0175c     48 24 B0 FD | 	call	#__system___basic_print_unsigned
01760     12 9D 02 F6 | 	mov	local37, result1
01764     00 9E 06 F6 | 	mov	local38, #0
01768     2D 00 00 FF 
0176c     68 A0 06 F6 | 	mov	local39, ##@LR__0321
01770     50 A3 02 F6 | 	mov	local40, local39
01774     00 C2 06 F6 | 	mov	local56, #0
01778     00 4A 06 F6 | 	mov	arg01, #0
0177c     51 4D 02 F6 | 	mov	arg02, local40
01780     00 4E 06 F6 | 	mov	arg03, #0
01784     94 23 B0 FD | 	call	#__system___basic_print_string
01788     12 C5 02 F6 | 	mov	local57, result1
0178c     00 E0 06 F6 | 	mov	local71, #0
01790     6F E3 02 F6 | 	mov	local72, local70
01794     00 E4 06 F6 | 	mov	local73, #0
01798     0A E6 06 F6 | 	mov	local74, #10
0179c     00 4A 06 F6 | 	mov	arg01, #0
017a0     71 4D 02 F6 | 	mov	arg02, local72
017a4     00 4E 06 F6 | 	mov	arg03, #0
017a8     0A 50 06 F6 | 	mov	arg04, #10
017ac     F8 23 B0 FD | 	call	#__system___basic_print_unsigned
017b0     12 E9 02 F6 | 	mov	local75, result1
017b4     00 EA 06 F6 | 	mov	local76, #0
017b8     00 4A 06 F6 | 	mov	arg01, #0
017bc     0A 4C 06 F6 | 	mov	arg02, #10
017c0     00 4E 06 F6 | 	mov	arg03, #0
017c4     08 23 B0 FD | 	call	#__system___basic_print_char
017c8     01 24 06 F6 | 	mov	result1, #1
017cc     01 EC 06 F6 | 	mov	local77, #1
017d0     00 EE 06 F6 | 	mov	local78, #0
017d4     00 4A 06 F6 | 	mov	arg01, #0
017d8     98 35 B0 FD | 	call	#__system___getiolock_0102
017dc     12 01 68 FC | 	wrlong	#0, result1
017e0     00 24 06 F6 | 	mov	result1, #0
017e4     00 F0 06 F6 | 	mov	local79, #0
017e8                 | LR__0022
017e8                 | '     if cmd=10 then print "Midi poly aftertouch, channel ";channel;" note ";b11;", velocity ";b12
017e8     02 00 00 FF 
017ec     84 0E 06 F1 | 	add	objptr, ##1156
017f0     07 7B 02 FB | 	rdlong	local20, objptr
017f4     02 00 00 FF 
017f8     84 0E 86 F1 | 	sub	objptr, ##1156
017fc     0A 7A 0E F2 | 	cmp	local20, #10 wz
01800     60 01 90 5D |  if_ne	jmp	#LR__0023
01804     3E F3 02 F6 | 	mov	local80, local21
01808     07 F2 46 F7 | 	zerox	local80, #7
0180c     3F F5 02 F6 | 	mov	local81, local22
01810     07 F4 46 F7 | 	zerox	local81, #7
01814     00 4A 06 F6 | 	mov	arg01, #0
01818     58 35 B0 FD | 	call	#__system___getiolock_0102
0181c     12 4B 02 F6 | 	mov	arg01, result1
01820     80 20 B0 FD | 	call	#__system___lockmem
01824     00 24 06 F6 | 	mov	result1, #0
01828     00 78 06 F6 | 	mov	local19, #0
0182c     00 70 06 F6 | 	mov	local15, #0
01830     2D 00 00 FF 
01834     74 72 06 F6 | 	mov	local16, ##@LR__0322
01838     39 75 02 F6 | 	mov	local17, local16
0183c     00 76 06 F6 | 	mov	local18, #0
01840     00 4A 06 F6 | 	mov	arg01, #0
01844     3A 4D 02 F6 | 	mov	arg02, local17
01848     00 4E 06 F6 | 	mov	arg03, #0
0184c     CC 22 B0 FD | 	call	#__system___basic_print_string
01850     12 67 02 F6 | 	mov	local10, result1
01854     00 68 06 F6 | 	mov	local11, #0
01858     02 00 00 FF 
0185c     9C 0E 06 F1 | 	add	objptr, ##1180
01860     07 6D 02 FB | 	rdlong	local13, objptr
01864     02 00 00 FF 
01868     9C 0E 86 F1 | 	sub	objptr, ##1180
0186c     36 6B 02 F6 | 	mov	local12, local13
01870     00 6E 06 F6 | 	mov	local14, #0
01874     0A 82 06 F6 | 	mov	local24, #10
01878     00 4A 06 F6 | 	mov	arg01, #0
0187c     35 4D 02 F6 | 	mov	arg02, local12
01880     00 4E 06 F6 | 	mov	arg03, #0
01884     0A 50 06 F6 | 	mov	arg04, #10
01888     D8 22 B0 FD | 	call	#__system___basic_print_integer
0188c     12 85 02 F6 | 	mov	local25, result1
01890     00 86 06 F6 | 	mov	local26, #0
01894     2D 00 00 FF 
01898     93 88 06 F6 | 	mov	local27, ##@LR__0323
0189c     44 8B 02 F6 | 	mov	local28, local27
018a0     00 90 06 F6 | 	mov	local31, #0
018a4     00 4A 06 F6 | 	mov	arg01, #0
018a8     45 4D 02 F6 | 	mov	arg02, local28
018ac     00 4E 06 F6 | 	mov	arg03, #0
018b0     68 22 B0 FD | 	call	#__system___basic_print_string
018b4     12 93 02 F6 | 	mov	local32, result1
018b8     00 94 06 F6 | 	mov	local33, #0
018bc     79 97 02 F6 | 	mov	local34, local80
018c0     00 98 06 F6 | 	mov	local35, #0
018c4     0A 9A 06 F6 | 	mov	local36, #10
018c8     00 4A 06 F6 | 	mov	arg01, #0
018cc     4B 4D 02 F6 | 	mov	arg02, local34
018d0     00 4E 06 F6 | 	mov	arg03, #0
018d4     0A 50 06 F6 | 	mov	arg04, #10
018d8     CC 22 B0 FD | 	call	#__system___basic_print_unsigned
018dc     12 9D 02 F6 | 	mov	local37, result1
018e0     00 9E 06 F6 | 	mov	local38, #0
018e4     2D 00 00 FF 
018e8     9A A0 06 F6 | 	mov	local39, ##@LR__0324
018ec     50 A3 02 F6 | 	mov	local40, local39
018f0     00 C2 06 F6 | 	mov	local56, #0
018f4     00 4A 06 F6 | 	mov	arg01, #0
018f8     51 4D 02 F6 | 	mov	arg02, local40
018fc     00 4E 06 F6 | 	mov	arg03, #0
01900     18 22 B0 FD | 	call	#__system___basic_print_string
01904     12 C5 02 F6 | 	mov	local57, result1
01908     00 E0 06 F6 | 	mov	local71, #0
0190c     7A E3 02 F6 | 	mov	local72, local81
01910     00 E4 06 F6 | 	mov	local73, #0
01914     0A E6 06 F6 | 	mov	local74, #10
01918     00 4A 06 F6 | 	mov	arg01, #0
0191c     71 4D 02 F6 | 	mov	arg02, local72
01920     00 4E 06 F6 | 	mov	arg03, #0
01924     0A 50 06 F6 | 	mov	arg04, #10
01928     7C 22 B0 FD | 	call	#__system___basic_print_unsigned
0192c     12 E9 02 F6 | 	mov	local75, result1
01930     00 EA 06 F6 | 	mov	local76, #0
01934     00 4A 06 F6 | 	mov	arg01, #0
01938     0A 4C 06 F6 | 	mov	arg02, #10
0193c     00 4E 06 F6 | 	mov	arg03, #0
01940     8C 21 B0 FD | 	call	#__system___basic_print_char
01944     01 24 06 F6 | 	mov	result1, #1
01948     01 EC 06 F6 | 	mov	local77, #1
0194c     00 EE 06 F6 | 	mov	local78, #0
01950     00 4A 06 F6 | 	mov	arg01, #0
01954     1C 34 B0 FD | 	call	#__system___getiolock_0102
01958     12 01 68 FC | 	wrlong	#0, result1
0195c     00 24 06 F6 | 	mov	result1, #0
01960     00 F0 06 F6 | 	mov	local79, #0
01964                 | LR__0023
01964                 | '     if cmd=11 then print "Midi control change, channel ";channel;" controller ";b11;", value ";b12
01964     02 00 00 FF 
01968     84 0E 06 F1 | 	add	objptr, ##1156
0196c     07 7B 02 FB | 	rdlong	local20, objptr
01970     02 00 00 FF 
01974     84 0E 86 F1 | 	sub	objptr, ##1156
01978     0B 7A 0E F2 | 	cmp	local20, #11 wz
0197c     60 01 90 5D |  if_ne	jmp	#LR__0024
01980     3E F7 02 F6 | 	mov	local82, local21
01984     07 F6 46 F7 | 	zerox	local82, #7
01988     3F F9 02 F6 | 	mov	local83, local22
0198c     07 F8 46 F7 | 	zerox	local83, #7
01990     00 4A 06 F6 | 	mov	arg01, #0
01994     DC 33 B0 FD | 	call	#__system___getiolock_0102
01998     12 4B 02 F6 | 	mov	arg01, result1
0199c     04 1F B0 FD | 	call	#__system___lockmem
019a0     00 24 06 F6 | 	mov	result1, #0
019a4     00 78 06 F6 | 	mov	local19, #0
019a8     00 70 06 F6 | 	mov	local15, #0
019ac     2D 00 00 FF 
019b0     A6 72 06 F6 | 	mov	local16, ##@LR__0325
019b4     39 75 02 F6 | 	mov	local17, local16
019b8     00 76 06 F6 | 	mov	local18, #0
019bc     00 4A 06 F6 | 	mov	arg01, #0
019c0     3A 4D 02 F6 | 	mov	arg02, local17
019c4     00 4E 06 F6 | 	mov	arg03, #0
019c8     50 21 B0 FD | 	call	#__system___basic_print_string
019cc     12 67 02 F6 | 	mov	local10, result1
019d0     00 68 06 F6 | 	mov	local11, #0
019d4     02 00 00 FF 
019d8     9C 0E 06 F1 | 	add	objptr, ##1180
019dc     07 6D 02 FB | 	rdlong	local13, objptr
019e0     02 00 00 FF 
019e4     9C 0E 86 F1 | 	sub	objptr, ##1180
019e8     36 6B 02 F6 | 	mov	local12, local13
019ec     00 6E 06 F6 | 	mov	local14, #0
019f0     0A 82 06 F6 | 	mov	local24, #10
019f4     00 4A 06 F6 | 	mov	arg01, #0
019f8     35 4D 02 F6 | 	mov	arg02, local12
019fc     00 4E 06 F6 | 	mov	arg03, #0
01a00     0A 50 06 F6 | 	mov	arg04, #10
01a04     5C 21 B0 FD | 	call	#__system___basic_print_integer
01a08     12 85 02 F6 | 	mov	local25, result1
01a0c     00 86 06 F6 | 	mov	local26, #0
01a10     2D 00 00 FF 
01a14     C4 88 06 F6 | 	mov	local27, ##@LR__0326
01a18     44 8B 02 F6 | 	mov	local28, local27
01a1c     00 90 06 F6 | 	mov	local31, #0
01a20     00 4A 06 F6 | 	mov	arg01, #0
01a24     45 4D 02 F6 | 	mov	arg02, local28
01a28     00 4E 06 F6 | 	mov	arg03, #0
01a2c     EC 20 B0 FD | 	call	#__system___basic_print_string
01a30     12 93 02 F6 | 	mov	local32, result1
01a34     00 94 06 F6 | 	mov	local33, #0
01a38     7B 97 02 F6 | 	mov	local34, local82
01a3c     00 98 06 F6 | 	mov	local35, #0
01a40     0A 9A 06 F6 | 	mov	local36, #10
01a44     00 4A 06 F6 | 	mov	arg01, #0
01a48     4B 4D 02 F6 | 	mov	arg02, local34
01a4c     00 4E 06 F6 | 	mov	arg03, #0
01a50     0A 50 06 F6 | 	mov	arg04, #10
01a54     50 21 B0 FD | 	call	#__system___basic_print_unsigned
01a58     12 9D 02 F6 | 	mov	local37, result1
01a5c     00 9E 06 F6 | 	mov	local38, #0
01a60     2D 00 00 FF 
01a64     D1 A0 06 F6 | 	mov	local39, ##@LR__0327
01a68     50 A3 02 F6 | 	mov	local40, local39
01a6c     00 C2 06 F6 | 	mov	local56, #0
01a70     00 4A 06 F6 | 	mov	arg01, #0
01a74     51 4D 02 F6 | 	mov	arg02, local40
01a78     00 4E 06 F6 | 	mov	arg03, #0
01a7c     9C 20 B0 FD | 	call	#__system___basic_print_string
01a80     12 C5 02 F6 | 	mov	local57, result1
01a84     00 E0 06 F6 | 	mov	local71, #0
01a88     7C E3 02 F6 | 	mov	local72, local83
01a8c     00 E4 06 F6 | 	mov	local73, #0
01a90     0A E6 06 F6 | 	mov	local74, #10
01a94     00 4A 06 F6 | 	mov	arg01, #0
01a98     71 4D 02 F6 | 	mov	arg02, local72
01a9c     00 4E 06 F6 | 	mov	arg03, #0
01aa0     0A 50 06 F6 | 	mov	arg04, #10
01aa4     00 21 B0 FD | 	call	#__system___basic_print_unsigned
01aa8     12 E9 02 F6 | 	mov	local75, result1
01aac     00 EA 06 F6 | 	mov	local76, #0
01ab0     00 4A 06 F6 | 	mov	arg01, #0
01ab4     0A 4C 06 F6 | 	mov	arg02, #10
01ab8     00 4E 06 F6 | 	mov	arg03, #0
01abc     10 20 B0 FD | 	call	#__system___basic_print_char
01ac0     01 24 06 F6 | 	mov	result1, #1
01ac4     01 EC 06 F6 | 	mov	local77, #1
01ac8     00 EE 06 F6 | 	mov	local78, #0
01acc     00 4A 06 F6 | 	mov	arg01, #0
01ad0     A0 32 B0 FD | 	call	#__system___getiolock_0102
01ad4     12 01 68 FC | 	wrlong	#0, result1
01ad8     00 24 06 F6 | 	mov	result1, #0
01adc     00 F0 06 F6 | 	mov	local79, #0
01ae0                 | LR__0024
01ae0                 | '     if cmd=12 then print "Midi program change, channel ";channel;" program ";b12
01ae0     02 00 00 FF 
01ae4     84 0E 06 F1 | 	add	objptr, ##1156
01ae8     07 7B 02 FB | 	rdlong	local20, objptr
01aec     02 00 00 FF 
01af0     84 0E 86 F1 | 	sub	objptr, ##1156
01af4     0C 7A 0E F2 | 	cmp	local20, #12 wz
01af8     04 01 90 5D |  if_ne	jmp	#LR__0025
01afc     3F FB 02 F6 | 	mov	local84, local22
01b00     07 FA 46 F7 | 	zerox	local84, #7
01b04     00 4A 06 F6 | 	mov	arg01, #0
01b08     68 32 B0 FD | 	call	#__system___getiolock_0102
01b0c     12 4B 02 F6 | 	mov	arg01, result1
01b10     90 1D B0 FD | 	call	#__system___lockmem
01b14     00 24 06 F6 | 	mov	result1, #0
01b18     00 70 06 F6 | 	mov	local15, #0
01b1c     2D 00 00 FF 
01b20     DA 72 06 F6 | 	mov	local16, ##@LR__0328
01b24     39 75 02 F6 | 	mov	local17, local16
01b28     00 76 06 F6 | 	mov	local18, #0
01b2c     00 4A 06 F6 | 	mov	arg01, #0
01b30     3A 4D 02 F6 | 	mov	arg02, local17
01b34     00 4E 06 F6 | 	mov	arg03, #0
01b38     E0 1F B0 FD | 	call	#__system___basic_print_string
01b3c     12 67 02 F6 | 	mov	local10, result1
01b40     00 68 06 F6 | 	mov	local11, #0
01b44     02 00 00 FF 
01b48     9C 0E 06 F1 | 	add	objptr, ##1180
01b4c     07 6D 02 FB | 	rdlong	local13, objptr
01b50     02 00 00 FF 
01b54     9C 0E 86 F1 | 	sub	objptr, ##1180
01b58     36 6B 02 F6 | 	mov	local12, local13
01b5c     00 6E 06 F6 | 	mov	local14, #0
01b60     0A 82 06 F6 | 	mov	local24, #10
01b64     00 4A 06 F6 | 	mov	arg01, #0
01b68     35 4D 02 F6 | 	mov	arg02, local12
01b6c     00 4E 06 F6 | 	mov	arg03, #0
01b70     0A 50 06 F6 | 	mov	arg04, #10
01b74     EC 1F B0 FD | 	call	#__system___basic_print_integer
01b78     12 85 02 F6 | 	mov	local25, result1
01b7c     00 86 06 F6 | 	mov	local26, #0
01b80     2D 00 00 FF 
01b84     F8 88 06 F6 | 	mov	local27, ##@LR__0329
01b88     44 8B 02 F6 | 	mov	local28, local27
01b8c     00 90 06 F6 | 	mov	local31, #0
01b90     00 4A 06 F6 | 	mov	arg01, #0
01b94     45 4D 02 F6 | 	mov	arg02, local28
01b98     00 4E 06 F6 | 	mov	arg03, #0
01b9c     7C 1F B0 FD | 	call	#__system___basic_print_string
01ba0     12 93 02 F6 | 	mov	local32, result1
01ba4     00 94 06 F6 | 	mov	local33, #0
01ba8     7D 97 02 F6 | 	mov	local34, local84
01bac     00 98 06 F6 | 	mov	local35, #0
01bb0     0A 9A 06 F6 | 	mov	local36, #10
01bb4     00 4A 06 F6 | 	mov	arg01, #0
01bb8     4B 4D 02 F6 | 	mov	arg02, local34
01bbc     00 4E 06 F6 | 	mov	arg03, #0
01bc0     0A 50 06 F6 | 	mov	arg04, #10
01bc4     E0 1F B0 FD | 	call	#__system___basic_print_unsigned
01bc8     12 9D 02 F6 | 	mov	local37, result1
01bcc     00 9E 06 F6 | 	mov	local38, #0
01bd0     00 4A 06 F6 | 	mov	arg01, #0
01bd4     0A 4C 06 F6 | 	mov	arg02, #10
01bd8     00 4E 06 F6 | 	mov	arg03, #0
01bdc     F0 1E B0 FD | 	call	#__system___basic_print_char
01be0     01 24 06 F6 | 	mov	result1, #1
01be4     01 A0 06 F6 | 	mov	local39, #1
01be8     00 A2 06 F6 | 	mov	local40, #0
01bec     00 4A 06 F6 | 	mov	arg01, #0
01bf0     80 31 B0 FD | 	call	#__system___getiolock_0102
01bf4     12 01 68 FC | 	wrlong	#0, result1
01bf8     00 24 06 F6 | 	mov	result1, #0
01bfc     00 C2 06 F6 | 	mov	local56, #0
01c00                 | LR__0025
01c00                 | '     if cmd=13 then print "Midi mono aftertouch, channel ";channel;" value ";b12
01c00     02 00 00 FF 
01c04     84 0E 06 F1 | 	add	objptr, ##1156
01c08     07 7B 02 FB | 	rdlong	local20, objptr
01c0c     02 00 00 FF 
01c10     84 0E 86 F1 | 	sub	objptr, ##1156
01c14     0D 7A 0E F2 | 	cmp	local20, #13 wz
01c18     04 01 90 5D |  if_ne	jmp	#LR__0026
01c1c     3F FD 02 F6 | 	mov	local85, local22
01c20     07 FC 46 F7 | 	zerox	local85, #7
01c24     00 4A 06 F6 | 	mov	arg01, #0
01c28     48 31 B0 FD | 	call	#__system___getiolock_0102
01c2c     12 4B 02 F6 | 	mov	arg01, result1
01c30     70 1C B0 FD | 	call	#__system___lockmem
01c34     00 24 06 F6 | 	mov	result1, #0
01c38     00 70 06 F6 | 	mov	local15, #0
01c3c     2D 00 00 FF 
01c40     02 73 06 F6 | 	mov	local16, ##@LR__0330
01c44     39 75 02 F6 | 	mov	local17, local16
01c48     00 76 06 F6 | 	mov	local18, #0
01c4c     00 4A 06 F6 | 	mov	arg01, #0
01c50     3A 4D 02 F6 | 	mov	arg02, local17
01c54     00 4E 06 F6 | 	mov	arg03, #0
01c58     C0 1E B0 FD | 	call	#__system___basic_print_string
01c5c     12 67 02 F6 | 	mov	local10, result1
01c60     00 68 06 F6 | 	mov	local11, #0
01c64     02 00 00 FF 
01c68     9C 0E 06 F1 | 	add	objptr, ##1180
01c6c     07 6D 02 FB | 	rdlong	local13, objptr
01c70     02 00 00 FF 
01c74     9C 0E 86 F1 | 	sub	objptr, ##1180
01c78     36 6B 02 F6 | 	mov	local12, local13
01c7c     00 6E 06 F6 | 	mov	local14, #0
01c80     0A 82 06 F6 | 	mov	local24, #10
01c84     00 4A 06 F6 | 	mov	arg01, #0
01c88     35 4D 02 F6 | 	mov	arg02, local12
01c8c     00 4E 06 F6 | 	mov	arg03, #0
01c90     0A 50 06 F6 | 	mov	arg04, #10
01c94     CC 1E B0 FD | 	call	#__system___basic_print_integer
01c98     12 85 02 F6 | 	mov	local25, result1
01c9c     00 86 06 F6 | 	mov	local26, #0
01ca0     2D 00 00 FF 
01ca4     21 89 06 F6 | 	mov	local27, ##@LR__0331
01ca8     44 8B 02 F6 | 	mov	local28, local27
01cac     00 90 06 F6 | 	mov	local31, #0
01cb0     00 4A 06 F6 | 	mov	arg01, #0
01cb4     45 4D 02 F6 | 	mov	arg02, local28
01cb8     00 4E 06 F6 | 	mov	arg03, #0
01cbc     5C 1E B0 FD | 	call	#__system___basic_print_string
01cc0     12 93 02 F6 | 	mov	local32, result1
01cc4     00 94 06 F6 | 	mov	local33, #0
01cc8     7E 97 02 F6 | 	mov	local34, local85
01ccc     00 98 06 F6 | 	mov	local35, #0
01cd0     0A 9A 06 F6 | 	mov	local36, #10
01cd4     00 4A 06 F6 | 	mov	arg01, #0
01cd8     4B 4D 02 F6 | 	mov	arg02, local34
01cdc     00 4E 06 F6 | 	mov	arg03, #0
01ce0     0A 50 06 F6 | 	mov	arg04, #10
01ce4     C0 1E B0 FD | 	call	#__system___basic_print_unsigned
01ce8     12 9D 02 F6 | 	mov	local37, result1
01cec     00 9E 06 F6 | 	mov	local38, #0
01cf0     00 4A 06 F6 | 	mov	arg01, #0
01cf4     0A 4C 06 F6 | 	mov	arg02, #10
01cf8     00 4E 06 F6 | 	mov	arg03, #0
01cfc     D0 1D B0 FD | 	call	#__system___basic_print_char
01d00     01 24 06 F6 | 	mov	result1, #1
01d04     01 A0 06 F6 | 	mov	local39, #1
01d08     00 A2 06 F6 | 	mov	local40, #0
01d0c     00 4A 06 F6 | 	mov	arg01, #0
01d10     60 30 B0 FD | 	call	#__system___getiolock_0102
01d14     12 01 68 FC | 	wrlong	#0, result1
01d18     00 24 06 F6 | 	mov	result1, #0
01d1c     00 C2 06 F6 | 	mov	local56, #0
01d20                 | LR__0026
01d20                 | '     if cmd=14 then print "Midi pitch bend, channel ";channel;" value ";b11+b12 shl 7
01d20     02 00 00 FF 
01d24     84 0E 06 F1 | 	add	objptr, ##1156
01d28     07 7B 02 FB | 	rdlong	local20, objptr
01d2c     02 00 00 FF 
01d30     84 0E 86 F1 | 	sub	objptr, ##1156
01d34     0E 7A 0E F2 | 	cmp	local20, #14 wz
01d38     1C 01 90 5D |  if_ne	jmp	#LR__0027
01d3c     3E FF 02 F6 | 	mov	local86, local21
01d40     07 FE 46 F7 | 	zerox	local86, #7
01d44     3F 01 03 F6 | 	mov	local87, local22
01d48     07 00 47 F7 | 	zerox	local87, #7
01d4c     80 03 03 F6 | 	mov	local88, local87
01d50     07 02 67 F0 | 	shl	local88, #7
01d54     7F 05 03 F6 | 	mov	local89, local86
01d58     81 05 03 F1 | 	add	local89, local88
01d5c     00 4A 06 F6 | 	mov	arg01, #0
01d60     10 30 B0 FD | 	call	#__system___getiolock_0102
01d64     12 4B 02 F6 | 	mov	arg01, result1
01d68     38 1B B0 FD | 	call	#__system___lockmem
01d6c     00 24 06 F6 | 	mov	result1, #0
01d70     00 70 06 F6 | 	mov	local15, #0
01d74     2D 00 00 FF 
01d78     29 73 06 F6 | 	mov	local16, ##@LR__0332
01d7c     39 75 02 F6 | 	mov	local17, local16
01d80     00 76 06 F6 | 	mov	local18, #0
01d84     00 4A 06 F6 | 	mov	arg01, #0
01d88     3A 4D 02 F6 | 	mov	arg02, local17
01d8c     00 4E 06 F6 | 	mov	arg03, #0
01d90     88 1D B0 FD | 	call	#__system___basic_print_string
01d94     12 67 02 F6 | 	mov	local10, result1
01d98     00 68 06 F6 | 	mov	local11, #0
01d9c     02 00 00 FF 
01da0     9C 0E 06 F1 | 	add	objptr, ##1180
01da4     07 6D 02 FB | 	rdlong	local13, objptr
01da8     02 00 00 FF 
01dac     9C 0E 86 F1 | 	sub	objptr, ##1180
01db0     36 6B 02 F6 | 	mov	local12, local13
01db4     00 6E 06 F6 | 	mov	local14, #0
01db8     0A 82 06 F6 | 	mov	local24, #10
01dbc     00 4A 06 F6 | 	mov	arg01, #0
01dc0     35 4D 02 F6 | 	mov	arg02, local12
01dc4     00 4E 06 F6 | 	mov	arg03, #0
01dc8     0A 50 06 F6 | 	mov	arg04, #10
01dcc     94 1D B0 FD | 	call	#__system___basic_print_integer
01dd0     12 85 02 F6 | 	mov	local25, result1
01dd4     00 86 06 F6 | 	mov	local26, #0
01dd8     2D 00 00 FF 
01ddc     43 89 06 F6 | 	mov	local27, ##@LR__0333
01de0     44 8B 02 F6 | 	mov	local28, local27
01de4     00 90 06 F6 | 	mov	local31, #0
01de8     00 4A 06 F6 | 	mov	arg01, #0
01dec     45 4D 02 F6 | 	mov	arg02, local28
01df0     00 4E 06 F6 | 	mov	arg03, #0
01df4     24 1D B0 FD | 	call	#__system___basic_print_string
01df8     12 93 02 F6 | 	mov	local32, result1
01dfc     00 94 06 F6 | 	mov	local33, #0
01e00     82 97 02 F6 | 	mov	local34, local89
01e04     00 98 06 F6 | 	mov	local35, #0
01e08     0A 9A 06 F6 | 	mov	local36, #10
01e0c     00 4A 06 F6 | 	mov	arg01, #0
01e10     4B 4D 02 F6 | 	mov	arg02, local34
01e14     00 4E 06 F6 | 	mov	arg03, #0
01e18     0A 50 06 F6 | 	mov	arg04, #10
01e1c     44 1D B0 FD | 	call	#__system___basic_print_integer
01e20     12 9D 02 F6 | 	mov	local37, result1
01e24     00 9E 06 F6 | 	mov	local38, #0
01e28     00 4A 06 F6 | 	mov	arg01, #0
01e2c     0A 4C 06 F6 | 	mov	arg02, #10
01e30     00 4E 06 F6 | 	mov	arg03, #0
01e34     98 1C B0 FD | 	call	#__system___basic_print_char
01e38     01 24 06 F6 | 	mov	result1, #1
01e3c     01 A0 06 F6 | 	mov	local39, #1
01e40     00 A2 06 F6 | 	mov	local40, #0
01e44     00 4A 06 F6 | 	mov	arg01, #0
01e48     28 2F B0 FD | 	call	#__system___getiolock_0102
01e4c     12 01 68 FC | 	wrlong	#0, result1
01e50     00 24 06 F6 | 	mov	result1, #0
01e54     00 C2 06 F6 | 	mov	local56, #0
01e58                 | LR__0027
01e58                 | '     if cmd=15 then print "Novation control key "; b12 ' TODO Sysex has to be properly processed 
01e58     02 00 00 FF 
01e5c     84 0E 06 F1 | 	add	objptr, ##1156
01e60     07 D9 02 FB | 	rdlong	local67, objptr
01e64     02 00 00 FF 
01e68     84 0E 86 F1 | 	sub	objptr, ##1156
01e6c     0F D8 0E F2 | 	cmp	local67, #15 wz
01e70     C0 EC 9F 5D |  if_ne	jmp	#LR__0001
01e74     3F 07 03 F6 | 	mov	local90, local22
01e78     07 06 47 F7 | 	zerox	local90, #7
01e7c     00 D8 06 F6 | 	mov	local67, #0
01e80     00 4A 06 F6 | 	mov	arg01, #0
01e84     EC 2E B0 FD | 	call	#__system___getiolock_0102
01e88     12 4B 02 F6 | 	mov	arg01, result1
01e8c     14 1A B0 FD | 	call	#__system___lockmem
01e90     00 24 06 F6 | 	mov	result1, #0
01e94     00 70 06 F6 | 	mov	local15, #0
01e98     2D 00 00 FF 
01e9c     4B 73 06 F6 | 	mov	local16, ##@LR__0334
01ea0     39 75 02 F6 | 	mov	local17, local16
01ea4     00 76 06 F6 | 	mov	local18, #0
01ea8     00 4A 06 F6 | 	mov	arg01, #0
01eac     3A 4D 02 F6 | 	mov	arg02, local17
01eb0     00 4E 06 F6 | 	mov	arg03, #0
01eb4     64 1C B0 FD | 	call	#__system___basic_print_string
01eb8     12 67 02 F6 | 	mov	local10, result1
01ebc     00 68 06 F6 | 	mov	local11, #0
01ec0     83 6B 02 F6 | 	mov	local12, local90
01ec4     00 6C 06 F6 | 	mov	local13, #0
01ec8     0A 6E 06 F6 | 	mov	local14, #10
01ecc     00 4A 06 F6 | 	mov	arg01, #0
01ed0     35 4D 02 F6 | 	mov	arg02, local12
01ed4     00 4E 06 F6 | 	mov	arg03, #0
01ed8     0A 50 06 F6 | 	mov	arg04, #10
01edc     C8 1C B0 FD | 	call	#__system___basic_print_unsigned
01ee0     12 83 02 F6 | 	mov	local24, result1
01ee4     00 84 06 F6 | 	mov	local25, #0
01ee8     00 4A 06 F6 | 	mov	arg01, #0
01eec     0A 4C 06 F6 | 	mov	arg02, #10
01ef0     00 4E 06 F6 | 	mov	arg03, #0
01ef4     D8 1B B0 FD | 	call	#__system___basic_print_char
01ef8     01 24 06 F6 | 	mov	result1, #1
01efc     01 86 06 F6 | 	mov	local26, #1
01f00     00 88 06 F6 | 	mov	local27, #0
01f04     00 4A 06 F6 | 	mov	arg01, #0
01f08     68 2E B0 FD | 	call	#__system___getiolock_0102
01f0c     12 01 68 FC | 	wrlong	#0, result1
01f10     00 8A 06 F6 | 	mov	local28, #0
01f14     1C EC 9F FD | 	jmp	#LR__0001
01f18     AF F0 03 F6 | 	mov	ptra, fp
01f1c     BF 00 A0 FD | 	call	#popregs_
01f20                 | _program_ret
01f20     2D 00 64 FD | 	ret
01f24                 | 
01f24                 | ' 
01f24                 | ' 
01f24                 | ' ''---------- putpixel - put a pixel on the screen
01f24                 | ' 
01f24                 | ' pub putpixel1(x,y,c) |byte b
01f24                 | _hng030rm_spin2_putpixel1
01f24                 | ' 
01f24                 | ' 
01f24                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01f24     00 2A 06 F6 | 	mov	_var01, #0
01f28     00 4A 5E F2 | 	cmps	arg01, #0 wcz
01f2c     01 2A 66 36 |  if_ae	neg	_var01, #1
01f30     00 2C 06 F6 | 	mov	_var02, #0
01f34     90 0E 06 F1 | 	add	objptr, #144
01f38     07 2F 02 FB | 	rdlong	_var03, objptr
01f3c     05 2E 66 F0 | 	shl	_var03, #5
01f40     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
01f44     01 2C 66 C6 |  if_b	neg	_var02, #1
01f48     16 2B 02 F5 | 	and	_var01, _var02
01f4c     00 30 06 F6 | 	mov	_var04, #0
01f50     00 4C 5E F2 | 	cmps	arg02, #0 wcz
01f54     01 30 66 36 |  if_ae	neg	_var04, #1
01f58     18 2B 02 F5 | 	and	_var01, _var04
01f5c     00 32 06 F6 | 	mov	_var05, #0
01f60     04 0E 06 F1 | 	add	objptr, #4
01f64     07 35 02 FB | 	rdlong	_var06, objptr
01f68     94 0E 86 F1 | 	sub	objptr, #148
01f6c     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
01f70     01 32 66 C6 |  if_b	neg	_var05, #1
01f74     19 2B CA F7 | 	test	_var01, _var05 wz
01f78     8C 00 90 AD |  if_e	jmp	#LR__0030
01f7c     90 0E 06 F1 | 	add	objptr, #144
01f80     07 37 02 FB | 	rdlong	_var07, objptr
01f84     90 0E 86 F1 | 	sub	objptr, #144
01f88     02 36 66 F0 | 	shl	_var07, #2
01f8c     26 37 02 FD | 	qmul	_var07, arg02
01f90     18 38 62 FD | 	getqx	_var08
01f94     07 3B 02 FB | 	rdlong	_var09, objptr
01f98     1C 3B 02 F1 | 	add	_var09, _var08
01f9c     25 3D 02 F6 | 	mov	_var10, arg01
01fa0     03 3C 46 F0 | 	shr	_var10, #3
01fa4     1E 3B 02 F1 | 	add	_var09, _var10
01fa8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01fa8     1D 3F C2 FA | 	rdbyte	_var11, _var09
01fac                 | '     if (c==0)
01fac     00 4E 0E F2 | 	cmp	arg03, #0 wz
01fb0     18 00 90 5D |  if_ne	jmp	#LR__0028
01fb4     25 2B 52 F6 | 	abs	_var01, arg01 wc
01fb8     07 2A 06 F5 | 	and	_var01, #7
01fbc     15 2B 62 C6 |  if_b	neg	_var01, _var01
01fc0     15 41 C2 F9 | 	decod	_var12, _var01
01fc4                 | '       b:=b & !(1<<(x//8))
01fc4     20 3F 22 F5 | 	andn	_var11, _var12
01fc8                 | '     else
01fc8     14 00 90 FD | 	jmp	#LR__0029
01fcc                 | LR__0028
01fcc     25 2B 52 F6 | 	abs	_var01, arg01 wc
01fd0     07 2A 06 F5 | 	and	_var01, #7
01fd4     15 2B 62 C6 |  if_b	neg	_var01, _var01
01fd8     15 43 C2 F9 | 	decod	_var13, _var01
01fdc                 | '       b:=b |(1<<(x//8))
01fdc     21 3F 42 F5 | 	or	_var11, _var13
01fe0                 | LR__0029
01fe0     90 0E 06 F1 | 	add	objptr, #144
01fe4     07 45 02 FB | 	rdlong	_var14, objptr
01fe8     90 0E 86 F1 | 	sub	objptr, #144
01fec     02 44 66 F0 | 	shl	_var14, #2
01ff0     26 45 02 FD | 	qmul	_var14, arg02
01ff4     18 46 62 FD | 	getqx	_var15
01ff8     07 49 02 FB | 	rdlong	_var16, objptr
01ffc     23 49 02 F1 | 	add	_var16, _var15
02000     1E 49 02 F1 | 	add	_var16, _var10
02004                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
02004     24 3F 42 FC | 	wrbyte	_var11, _var16
02008                 | LR__0030
02008                 | _hng030rm_spin2_putpixel1_ret
02008     2D 00 64 FD | 	ret
0200c                 | 
0200c                 | ' 
0200c                 | ' 
0200c                 | ' pub putpixel2(x,y,c) |byte b
0200c                 | _hng030rm_spin2_putpixel2
0200c                 | ' 
0200c                 | ' 
0200c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
0200c     00 2A 06 F6 | 	mov	_var01, #0
02010     00 4A 5E F2 | 	cmps	arg01, #0 wcz
02014     01 2A 66 36 |  if_ae	neg	_var01, #1
02018     00 2C 06 F6 | 	mov	_var02, #0
0201c     90 0E 06 F1 | 	add	objptr, #144
02020     07 2F 02 FB | 	rdlong	_var03, objptr
02024     04 2E 66 F0 | 	shl	_var03, #4
02028     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
0202c     01 2C 66 C6 |  if_b	neg	_var02, #1
02030     16 2B 02 F5 | 	and	_var01, _var02
02034     00 30 06 F6 | 	mov	_var04, #0
02038     00 4C 5E F2 | 	cmps	arg02, #0 wcz
0203c     01 30 66 36 |  if_ae	neg	_var04, #1
02040     18 2B 02 F5 | 	and	_var01, _var04
02044     00 32 06 F6 | 	mov	_var05, #0
02048     04 0E 06 F1 | 	add	objptr, #4
0204c     07 35 02 FB | 	rdlong	_var06, objptr
02050     94 0E 86 F1 | 	sub	objptr, #148
02054     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
02058     01 32 66 C6 |  if_b	neg	_var05, #1
0205c     19 2B CA F7 | 	test	_var01, _var05 wz
02060     7C 00 90 AD |  if_e	jmp	#LR__0031
02064     90 0E 06 F1 | 	add	objptr, #144
02068     07 37 02 FB | 	rdlong	_var07, objptr
0206c     90 0E 86 F1 | 	sub	objptr, #144
02070     02 36 66 F0 | 	shl	_var07, #2
02074     26 37 02 FD | 	qmul	_var07, arg02
02078     18 38 62 FD | 	getqx	_var08
0207c     07 3B 02 FB | 	rdlong	_var09, objptr
02080     1C 3B 02 F1 | 	add	_var09, _var08
02084     25 3D 02 F6 | 	mov	_var10, arg01
02088     02 3C 46 F0 | 	shr	_var10, #2
0208c     1E 3B 02 F1 | 	add	_var09, _var10
02090                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02090     1D 3F C2 FA | 	rdbyte	_var11, _var09
02094     25 2B 52 F6 | 	abs	_var01, arg01 wc
02098     03 2A 06 F5 | 	and	_var01, #3
0209c     15 2B 62 C6 |  if_b	neg	_var01, _var01
020a0     01 2A 66 F0 | 	shl	_var01, #1
020a4     03 40 06 F6 | 	mov	_var12, #3
020a8     15 41 62 F0 | 	shl	_var12, _var01
020ac                 | '     b:=b & !(%11<<((x//4)<<1))
020ac     20 3F 22 F5 | 	andn	_var11, _var12
020b0     15 4F 62 F0 | 	shl	arg03, _var01
020b4                 | '     b:=b |(c<<((x//4)<<1))
020b4     27 3F 42 F5 | 	or	_var11, arg03
020b8     90 0E 06 F1 | 	add	objptr, #144
020bc     07 43 02 FB | 	rdlong	_var13, objptr
020c0     90 0E 86 F1 | 	sub	objptr, #144
020c4     02 42 66 F0 | 	shl	_var13, #2
020c8     26 43 02 FD | 	qmul	_var13, arg02
020cc     18 44 62 FD | 	getqx	_var14
020d0     07 47 02 FB | 	rdlong	_var15, objptr
020d4     22 47 02 F1 | 	add	_var15, _var14
020d8     1E 47 02 F1 | 	add	_var15, _var10
020dc                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
020dc     23 3F 42 FC | 	wrbyte	_var11, _var15
020e0                 | LR__0031
020e0                 | _hng030rm_spin2_putpixel2_ret
020e0     2D 00 64 FD | 	ret
020e4                 | 
020e4                 | ' 
020e4                 | ' 
020e4                 | ' pub putpixel4(x,y,c) |byte b
020e4                 | _hng030rm_spin2_putpixel4
020e4                 | ' 
020e4                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
020e4     00 2A 06 F6 | 	mov	_var01, #0
020e8     00 4A 5E F2 | 	cmps	arg01, #0 wcz
020ec     01 2A 66 36 |  if_ae	neg	_var01, #1
020f0     00 2C 06 F6 | 	mov	_var02, #0
020f4     90 0E 06 F1 | 	add	objptr, #144
020f8     07 2F 02 FB | 	rdlong	_var03, objptr
020fc     04 2E 66 F0 | 	shl	_var03, #4
02100     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
02104     01 2C 66 C6 |  if_b	neg	_var02, #1
02108     16 2B 02 F5 | 	and	_var01, _var02
0210c     00 30 06 F6 | 	mov	_var04, #0
02110     00 4C 5E F2 | 	cmps	arg02, #0 wcz
02114     01 30 66 36 |  if_ae	neg	_var04, #1
02118     18 2B 02 F5 | 	and	_var01, _var04
0211c     00 32 06 F6 | 	mov	_var05, #0
02120     04 0E 06 F1 | 	add	objptr, #4
02124     07 35 02 FB | 	rdlong	_var06, objptr
02128     94 0E 86 F1 | 	sub	objptr, #148
0212c     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
02130     01 32 66 C6 |  if_b	neg	_var05, #1
02134     19 2B CA F7 | 	test	_var01, _var05 wz
02138     7C 00 90 AD |  if_e	jmp	#LR__0032
0213c     90 0E 06 F1 | 	add	objptr, #144
02140     07 37 02 FB | 	rdlong	_var07, objptr
02144     90 0E 86 F1 | 	sub	objptr, #144
02148     02 36 66 F0 | 	shl	_var07, #2
0214c     26 37 02 FD | 	qmul	_var07, arg02
02150     18 38 62 FD | 	getqx	_var08
02154     07 3B 02 FB | 	rdlong	_var09, objptr
02158     1C 3B 02 F1 | 	add	_var09, _var08
0215c     25 3D 02 F6 | 	mov	_var10, arg01
02160     01 3C 46 F0 | 	shr	_var10, #1
02164     1E 3B 02 F1 | 	add	_var09, _var10
02168                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02168     1D 3F C2 FA | 	rdbyte	_var11, _var09
0216c     25 2B 52 F6 | 	abs	_var01, arg01 wc
02170     01 2A 06 F5 | 	and	_var01, #1
02174     15 2B 62 C6 |  if_b	neg	_var01, _var01
02178     02 2A 66 F0 | 	shl	_var01, #2
0217c     0F 40 06 F6 | 	mov	_var12, #15
02180     15 41 62 F0 | 	shl	_var12, _var01
02184                 | '     b:=b & !(%1111<<((x//2)<<2))
02184     20 3F 22 F5 | 	andn	_var11, _var12
02188     15 4F 62 F0 | 	shl	arg03, _var01
0218c                 | '     b:=b |(c<<((x//2)<<2))
0218c     27 3F 42 F5 | 	or	_var11, arg03
02190     90 0E 06 F1 | 	add	objptr, #144
02194     07 43 02 FB | 	rdlong	_var13, objptr
02198     90 0E 86 F1 | 	sub	objptr, #144
0219c     02 42 66 F0 | 	shl	_var13, #2
021a0     26 43 02 FD | 	qmul	_var13, arg02
021a4     18 44 62 FD | 	getqx	_var14
021a8     07 47 02 FB | 	rdlong	_var15, objptr
021ac     22 47 02 F1 | 	add	_var15, _var14
021b0     1E 47 02 F1 | 	add	_var15, _var10
021b4                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
021b4     23 3F 42 FC | 	wrbyte	_var11, _var15
021b8                 | LR__0032
021b8                 | _hng030rm_spin2_putpixel4_ret
021b8     2D 00 64 FD | 	ret
021bc                 | 
021bc                 | ' 
021bc                 | ' 
021bc                 | ' pub putpixel8(x,y,c)
021bc                 | _hng030rm_spin2_putpixel8
021bc                 | ' 
021bc                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
021bc     00 2A 06 F6 | 	mov	_var01, #0
021c0     00 4A 5E F2 | 	cmps	arg01, #0 wcz
021c4     01 2A 66 36 |  if_ae	neg	_var01, #1
021c8     00 2C 06 F6 | 	mov	_var02, #0
021cc     90 0E 06 F1 | 	add	objptr, #144
021d0     07 2F 02 FB | 	rdlong	_var03, objptr
021d4     02 2E 66 F0 | 	shl	_var03, #2
021d8     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
021dc     01 2C 66 C6 |  if_b	neg	_var02, #1
021e0     16 2B 02 F5 | 	and	_var01, _var02
021e4     00 30 06 F6 | 	mov	_var04, #0
021e8     00 4C 5E F2 | 	cmps	arg02, #0 wcz
021ec     01 30 66 36 |  if_ae	neg	_var04, #1
021f0     18 2B 02 F5 | 	and	_var01, _var04
021f4     00 32 06 F6 | 	mov	_var05, #0
021f8     04 0E 06 F1 | 	add	objptr, #4
021fc     07 35 02 FB | 	rdlong	_var06, objptr
02200     94 0E 86 F1 | 	sub	objptr, #148
02204     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
02208     01 32 66 C6 |  if_b	neg	_var05, #1
0220c     19 2B CA F7 | 	test	_var01, _var05 wz
02210     28 00 90 AD |  if_e	jmp	#LR__0033
02214     90 0E 06 F1 | 	add	objptr, #144
02218     07 37 02 FB | 	rdlong	_var07, objptr
0221c     90 0E 86 F1 | 	sub	objptr, #144
02220     02 36 66 F0 | 	shl	_var07, #2
02224     26 37 02 FD | 	qmul	_var07, arg02
02228     18 38 62 FD | 	getqx	_var08
0222c     07 3B 02 FB | 	rdlong	_var09, objptr
02230     1C 3B 02 F1 | 	add	_var09, _var08
02234     25 3B 02 F1 | 	add	_var09, arg01
02238                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02238     1D 4F 42 FC | 	wrbyte	arg03, _var09
0223c                 | LR__0033
0223c                 | _hng030rm_spin2_putpixel8_ret
0223c     2D 00 64 FD | 	ret
02240                 | 
02240                 | ' 
02240                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02240                 | ' 
02240                 | ' pub setbordercolor(r,g,b) | color
02240                 | _hng030rm_spin2_setbordercolor
02240     18 4A 66 F0 | 	shl	arg01, #24
02244     10 4C 66 F0 | 	shl	arg02, #16
02248     26 4B 02 F1 | 	add	arg01, arg02
0224c     08 4E 66 F0 | 	shl	arg03, #8
02250     27 4B 02 F1 | 	add	arg01, arg03
02254                 | ' 
02254                 | ' color:=r<<24+g<<16+b<<8
02254                 | ' bordercolor:=color
02254     2C 0E 06 F1 | 	add	objptr, #44
02258     07 4B 62 FC | 	wrlong	arg01, objptr
0225c     2C 0E 86 F1 | 	sub	objptr, #44
02260                 | _hng030rm_spin2_setbordercolor_ret
02260     2D 00 64 FD | 	ret
02264                 | 
02264                 | ' 
02264                 | ' 
02264                 | ' '*************************************************************************
02264                 | ' '                                                                        *
02264                 | ' '  Text functions                                                        *
02264                 | ' '                                                                        *
02264                 | ' '*************************************************************************
02264                 | ' 
02264                 | ' ''---------- Clear the screen, set its foreground/background color
02264                 | ' 
02264                 | ' pub cls(fc,bc)   :c
02264                 | _hng030rm_spin2_cls
02264     07 5A 05 F6 | 	mov	COUNT_, #7
02268     B0 00 A0 FD | 	call	#pushregs_
0226c     25 55 02 F6 | 	mov	local01, arg01
02270     26 57 02 F6 | 	mov	local02, arg02
02274                 | ' 
02274                 | ' if (graphmode<512)
02274     C4 0E 06 F1 | 	add	objptr, #196
02278     07 59 02 FB | 	rdlong	local03, objptr
0227c     C4 0E 86 F1 | 	sub	objptr, #196
02280     01 00 00 FF 
02284     00 58 5E F2 | 	cmps	local03, ##512 wcz
02288     34 00 90 3D |  if_ae	jmp	#LR__0034
0228c     2A 5B 02 F6 | 	mov	local04, local01
02290     18 5A 66 F0 | 	shl	local04, #24
02294     2B 5D 02 F6 | 	mov	local05, local02
02298     10 5C 66 F0 | 	shl	local05, #16
0229c     2E 5B 02 F1 | 	add	local04, local05
022a0     20 5A 06 F1 | 	add	local04, #32
022a4                 | '   c:=fc<<24+bc<<16+$20
022a4                 | '   longfill(buf_ptr,c,buflen)
022a4     07 4B 02 FB | 	rdlong	arg01, objptr
022a8     30 0E 06 F1 | 	add	objptr, #48
022ac     07 4F 02 FB | 	rdlong	arg03, objptr
022b0     30 0E 86 F1 | 	sub	objptr, #48
022b4     2D 4D 02 F6 | 	mov	arg02, local04
022b8     A8 00 A0 FD | 	call	#\builtin_longfill_
022bc                 | ' else
022bc     AC 00 90 FD | 	jmp	#LR__0040
022c0                 | LR__0034
022c0                 | '   if (graphmode & 48) ==48
022c0     C4 0E 06 F1 | 	add	objptr, #196
022c4     07 59 02 FB | 	rdlong	local03, objptr
022c8     C4 0E 86 F1 | 	sub	objptr, #196
022cc     30 58 06 F5 | 	and	local03, #48
022d0     30 58 0E F2 | 	cmp	local03, #48 wz
022d4                 | '     c:=bc
022d4     2B 5B 02 A6 |  if_e	mov	local04, local02
022d8     74 00 90 AD |  if_e	jmp	#LR__0039
022dc                 | '   elseif (graphmode & 48) ==32
022dc     C4 0E 06 F1 | 	add	objptr, #196
022e0     07 59 02 FB | 	rdlong	local03, objptr
022e4     C4 0E 86 F1 | 	sub	objptr, #196
022e8     30 58 06 F5 | 	and	local03, #48
022ec     20 58 0E F2 | 	cmp	local03, #32 wz
022f0     10 00 90 5D |  if_ne	jmp	#LR__0035
022f4     2B 5B 02 F6 | 	mov	local04, local02
022f8     04 5A 66 F0 | 	shl	local04, #4
022fc     2B 5B 02 F1 | 	add	local04, local02
02300                 | '     c:=bc<<4+bc
02300     4C 00 90 FD | 	jmp	#LR__0038
02304                 | LR__0035
02304                 | '   elseif (graphmode & 48) ==16
02304     C4 0E 06 F1 | 	add	objptr, #196
02308     07 59 02 FB | 	rdlong	local03, objptr
0230c     C4 0E 86 F1 | 	sub	objptr, #196
02310     30 58 06 F5 | 	and	local03, #48
02314     10 58 0E F2 | 	cmp	local03, #16 wz
02318     28 00 90 5D |  if_ne	jmp	#LR__0036
0231c     2B 5B 02 F6 | 	mov	local04, local02
02320     06 5A 66 F0 | 	shl	local04, #6
02324     2B 5F 02 F6 | 	mov	local06, local02
02328     04 5E 66 F0 | 	shl	local06, #4
0232c     2F 5B 02 F1 | 	add	local04, local06
02330     2B 61 02 F6 | 	mov	local07, local02
02334     02 60 66 F0 | 	shl	local07, #2
02338     30 5B 02 F1 | 	add	local04, local07
0233c     2B 5B 02 F1 | 	add	local04, local02
02340                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02340                 | '   else
02340     0C 00 90 FD | 	jmp	#LR__0037
02344                 | LR__0036
02344                 | '     if bc==1
02344     01 56 0E F2 | 	cmp	local02, #1 wz
02348                 | '       c:=255
02348     FF 5A 06 A6 |  if_e	mov	local04, #255
0234c                 | '     else
0234c                 | '       c:=0
0234c     00 5A 06 56 |  if_ne	mov	local04, #0
02350                 | LR__0037
02350                 | LR__0038
02350                 | LR__0039
02350     30 0E 06 F1 | 	add	objptr, #48
02354     07 4F 02 FB | 	rdlong	arg03, objptr
02358     30 0E 86 F1 | 	sub	objptr, #48
0235c     02 4E 66 F0 | 	shl	arg03, #2
02360                 | '   bytefill(buf_ptr,c,buflen*4)
02360     07 4B 02 FB | 	rdlong	arg01, objptr
02364     2D 4D 02 F6 | 	mov	arg02, local04
02368     A0 00 A0 FD | 	call	#\builtin_bytefill_
0236c                 | LR__0040
0236c                 | ' setwritecolors(fc,bc)
0236c                 | ' 
0236c                 | ' 
0236c                 | ' write_color:=ff
0236c     38 0E 06 F1 | 	add	objptr, #56
02370     07 55 62 FC | 	wrlong	local01, objptr
02374                 | ' write_background:=bb
02374     04 0E 06 F1 | 	add	objptr, #4
02378     07 57 62 FC | 	wrlong	local02, objptr
0237c                 | ' cursor_x:=0
0237c     08 0E 86 F1 | 	sub	objptr, #8
02380     07 01 48 FC | 	wrbyte	#0, objptr
02384                 | ' cursor_y:=0
02384     01 0E 06 F1 | 	add	objptr, #1
02388     07 01 48 FC | 	wrbyte	#0, objptr
0238c     35 0E 86 F1 | 	sub	objptr, #53
02390     2D 25 02 F6 | 	mov	result1, local04
02394     AF F0 03 F6 | 	mov	ptra, fp
02398     BF 00 A0 FD | 	call	#popregs_
0239c                 | _hng030rm_spin2_cls_ret
0239c     2D 00 64 FD | 	ret
023a0                 | 
023a0                 | ' 
023a0                 | ' ''---------- Output a char at the cursor position, move the cursor
023a0                 | ' 
023a0                 | ' pub putchar(achar) | c,x,y
023a0                 | _hng030rm_spin2_putchar
023a0     12 5A 05 F6 | 	mov	COUNT_, #18
023a4     B0 00 A0 FD | 	call	#pushregs_
023a8     25 55 02 F6 | 	mov	local01, arg01
023ac                 | ' 
023ac                 | ' if achar==10
023ac     0A 54 0E F2 | 	cmp	local01, #10 wz
023b0     58 00 90 5D |  if_ne	jmp	#LR__0041
023b4                 | '   crlf()
023b4                 | ' 
023b4                 | ' cursor_x:=0
023b4     34 0E 06 F1 | 	add	objptr, #52
023b8     07 01 48 FC | 	wrbyte	#0, objptr
023bc                 | ' cursor_y+=1
023bc     01 0E 06 F1 | 	add	objptr, #1
023c0     07 57 C2 FA | 	rdbyte	local02, objptr
023c4     01 56 06 F1 | 	add	local02, #1
023c8     07 57 42 FC | 	wrbyte	local02, objptr
023cc                 | ' if cursor_y>lines-1
023cc     5F 0E 06 F1 | 	add	objptr, #95
023d0     07 57 02 FB | 	rdlong	local02, objptr
023d4     01 56 86 F1 | 	sub	local02, #1
023d8     5F 0E 86 F1 | 	sub	objptr, #95
023dc     07 59 C2 FA | 	rdbyte	local03, objptr
023e0     35 0E 86 F1 | 	sub	objptr, #53
023e4     2B 59 5A F2 | 	cmps	local03, local02 wcz
023e8     38 01 90 ED |  if_be	jmp	#LR__0044
023ec                 | '   scrollup()
023ec     40 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
023f0     94 0E 06 F1 | 	add	objptr, #148
023f4     07 5B 02 FB | 	rdlong	local04, objptr
023f8     01 5A 86 F1 | 	sub	local04, #1
023fc                 | '   cursor_y:=lines-1
023fc     5F 0E 86 F1 | 	sub	objptr, #95
02400     07 5B 42 FC | 	wrbyte	local04, objptr
02404     35 0E 86 F1 | 	sub	objptr, #53
02408                 | ' else  
02408     18 01 90 FD | 	jmp	#LR__0044
0240c                 | LR__0041
0240c                 | '   x:=cursor_x
0240c     34 0E 06 F1 | 	add	objptr, #52
02410     07 5D C2 FA | 	rdbyte	local05, objptr
02414                 | '   y:=cursor_y
02414     01 0E 06 F1 | 	add	objptr, #1
02418     07 5F C2 FA | 	rdbyte	local06, objptr
0241c     03 0E 06 F1 | 	add	objptr, #3
02420     07 61 02 FB | 	rdlong	local07, objptr
02424     18 60 66 F0 | 	shl	local07, #24
02428     04 0E 06 F1 | 	add	objptr, #4
0242c     07 63 02 FB | 	rdlong	local08, objptr
02430     10 62 66 F0 | 	shl	local08, #16
02434     31 61 02 F1 | 	add	local07, local08
02438                 | '   c:=write_color<<24+write_background<<16
02438     54 0E 06 F1 | 	add	objptr, #84
0243c     07 65 02 FB | 	rdlong	local09, objptr
02440     90 0E 86 F1 | 	sub	objptr, #144
02444     2F 65 02 FD | 	qmul	local09, local06
02448     18 66 62 FD | 	getqx	local10
0244c     2E 67 02 F1 | 	add	local10, local05
02450     02 66 66 F0 | 	shl	local10, #2
02454     07 69 02 FB | 	rdlong	local11, objptr
02458     33 69 02 F1 | 	add	local11, local10
0245c     34 6B 02 FB | 	rdlong	local12, local11
02460     7F 00 00 FF 
02464     FF 6B 06 F5 | 	and	local12, ##65535
02468     30 6B 42 F5 | 	or	local12, local07
0246c                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
0246c     34 6B 62 FC | 	wrlong	local12, local11
02470     90 0E 06 F1 | 	add	objptr, #144
02474     07 65 02 FB | 	rdlong	local09, objptr
02478     90 0E 86 F1 | 	sub	objptr, #144
0247c     2F 65 02 FD | 	qmul	local09, local06
02480     18 6C 62 FD | 	getqx	local13
02484     2E 6D 02 F1 | 	add	local13, local05
02488     02 6C 66 F0 | 	shl	local13, #2
0248c     07 6F 02 FB | 	rdlong	local14, objptr
02490     36 6F 02 F1 | 	add	local14, local13
02494     37 71 02 FB | 	rdlong	local15, local14
02498     FF 70 26 F5 | 	andn	local15, #255
0249c     FF 54 06 F5 | 	and	local01, #255
024a0     2A 71 42 F5 | 	or	local15, local01
024a4                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
024a4     37 71 62 FC | 	wrlong	local15, local14
024a8                 | '   cursor_x+=1
024a8     34 0E 06 F1 | 	add	objptr, #52
024ac     07 73 C2 FA | 	rdbyte	local16, objptr
024b0     01 72 06 F1 | 	add	local16, #1
024b4     07 73 42 FC | 	wrbyte	local16, objptr
024b8                 | '   if cursor_x==cpl
024b8     07 73 C2 FA | 	rdbyte	local16, objptr
024bc     5C 0E 06 F1 | 	add	objptr, #92
024c0     07 75 02 FB | 	rdlong	local17, objptr
024c4     90 0E 86 F1 | 	sub	objptr, #144
024c8     3A 73 0A F2 | 	cmp	local16, local17 wz
024cc     54 00 90 5D |  if_ne	jmp	#LR__0043
024d0                 | '     cursor_x:=0
024d0     34 0E 06 F1 | 	add	objptr, #52
024d4     07 01 48 FC | 	wrbyte	#0, objptr
024d8                 | '     cursor_y+=1
024d8     01 0E 06 F1 | 	add	objptr, #1
024dc     07 73 C2 FA | 	rdbyte	local16, objptr
024e0     01 72 06 F1 | 	add	local16, #1
024e4     07 73 42 FC | 	wrbyte	local16, objptr
024e8                 | '     if cursor_y>lines-1
024e8     5F 0E 06 F1 | 	add	objptr, #95
024ec     07 73 02 FB | 	rdlong	local16, objptr
024f0     01 72 86 F1 | 	sub	local16, #1
024f4     5F 0E 86 F1 | 	sub	objptr, #95
024f8     07 75 C2 FA | 	rdbyte	local17, objptr
024fc     35 0E 86 F1 | 	sub	objptr, #53
02500     39 75 5A F2 | 	cmps	local17, local16 wcz
02504     1C 00 90 ED |  if_be	jmp	#LR__0042
02508                 | '       scrollup()
02508     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
0250c     94 0E 06 F1 | 	add	objptr, #148
02510     07 77 02 FB | 	rdlong	local18, objptr
02514     01 76 86 F1 | 	sub	local18, #1
02518                 | '       cursor_y:=lines-1
02518     5F 0E 86 F1 | 	sub	objptr, #95
0251c     07 77 42 FC | 	wrbyte	local18, objptr
02520     35 0E 86 F1 | 	sub	objptr, #53
02524                 | LR__0042
02524                 | LR__0043
02524                 | LR__0044
02524     AF F0 03 F6 | 	mov	ptra, fp
02528     BF 00 A0 FD | 	call	#popregs_
0252c                 | _hng030rm_spin2_putchar_ret
0252c     2D 00 64 FD | 	ret
02530                 | 
02530                 | ' 
02530                 | ' ''-----------  Scroll the screen one line up
02530                 | ' 
02530                 | ' pub scrollup() | i
02530                 | _hng030rm_spin2_scrollup
02530     0A 5A 05 F6 | 	mov	COUNT_, #10
02534     B0 00 A0 FD | 	call	#pushregs_
02538     90 0E 06 F1 | 	add	objptr, #144
0253c     07 55 02 FB | 	rdlong	local01, objptr
02540     90 0E 86 F1 | 	sub	objptr, #144
02544     02 54 66 F0 | 	shl	local01, #2
02548     07 4D 02 FB | 	rdlong	arg02, objptr
0254c     2A 4D 02 F1 | 	add	arg02, local01
02550     30 0E 06 F1 | 	add	objptr, #48
02554     07 4F 02 FB | 	rdlong	arg03, objptr
02558     60 0E 06 F1 | 	add	objptr, #96
0255c     07 57 02 FB | 	rdlong	local02, objptr
02560     90 0E 86 F1 | 	sub	objptr, #144
02564     2B 4F 82 F1 | 	sub	arg03, local02
02568                 | ' 
02568                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02568     07 4B 02 FB | 	rdlong	arg01, objptr
0256c     5C 12 B0 FD | 	call	#__system__longmove
02570                 | ' repeat i from buflen-cpl to buflen-1
02570     30 0E 06 F1 | 	add	objptr, #48
02574     07 59 02 FB | 	rdlong	local03, objptr
02578     60 0E 06 F1 | 	add	objptr, #96
0257c     07 57 02 FB | 	rdlong	local02, objptr
02580     2B 59 82 F1 | 	sub	local03, local02
02584     60 0E 86 F1 | 	sub	objptr, #96
02588     07 5B 02 FB | 	rdlong	local04, objptr
0258c     01 5A 86 F1 | 	sub	local04, #1
02590     07 5D 02 FB | 	rdlong	local05, objptr
02594     60 0E 06 F1 | 	add	objptr, #96
02598     07 5F 02 FB | 	rdlong	local06, objptr
0259c     90 0E 86 F1 | 	sub	objptr, #144
025a0     2F 5D 82 F1 | 	sub	local05, local06
025a4     2E 5B 5A F2 | 	cmps	local04, local05 wcz
025a8     01 60 06 16 |  if_a	mov	local07, #1
025ac     01 60 66 E6 |  if_be	neg	local07, #1
025b0     30 5B 02 F1 | 	add	local04, local07
025b4     78 DA 9F FE | 	loc	pa,	#(@LR__0046-@LR__0045)
025b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
025bc                 | LR__0045
025bc     2C 63 02 F6 | 	mov	local08, local03
025c0     02 62 66 F0 | 	shl	local08, #2
025c4     07 65 02 FB | 	rdlong	local09, objptr
025c8     31 65 02 F1 | 	add	local09, local08
025cc     32 67 02 FB | 	rdlong	local10, local09
025d0     80 FF 7F FF 
025d4     00 66 06 F5 | 	and	local10, ##-65536
025d8     20 66 46 F5 | 	or	local10, #32
025dc                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
025dc     32 67 62 FC | 	wrlong	local10, local09
025e0     30 59 02 F1 | 	add	local03, local07
025e4     2D 59 0A F2 | 	cmp	local03, local04 wz
025e8     D0 FF 9F 5D |  if_ne	jmp	#LR__0045
025ec                 | LR__0046
025ec     AF F0 03 F6 | 	mov	ptra, fp
025f0     BF 00 A0 FD | 	call	#popregs_
025f4                 | _hng030rm_spin2_scrollup_ret
025f4     2D 00 64 FD | 	ret
025f8                 | 
025f8                 | ' 
025f8                 | ' 
025f8                 | ' 
025f8                 | ' '*************************************************************************
025f8                 | ' '                                                                        *
025f8                 | ' '  Mode setting and driver start                                                          *
025f8                 | ' '                                                                        *
025f8                 | ' '*************************************************************************
025f8                 | ' 
025f8                 | ' ''---------  Set the graphics mode
025f8                 | ' 
025f8                 | ' 
025f8                 | ' 
025f8                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
025f8                 | _hng030rm_spin2_setmode
025f8     50 5A 05 F6 | 	mov	COUNT_, #80
025fc     B0 00 A0 FD | 	call	#pushregs_
02600     25 55 02 F6 | 	mov	local01, arg01
02604                 | ' 
02604                 | ' '' mode:tn_bb_cc_vv_hh
02604                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02604                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02604                 | ' 
02604                 | ' if mode==(512+192+48)
02604     01 00 00 FF 
02608     F0 54 0E F2 | 	cmp	local01, ##752 wz
0260c                 | '   return 'no RAM
0260c     1C 0A 90 AD |  if_e	jmp	#LR__0087
02610                 | ' 
02610                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02610     2A 57 02 F6 | 	mov	local02, local01
02614     06 56 46 F0 | 	shr	local02, #6
02618     07 56 06 F5 | 	and	local02, #7
0261c     08 56 26 F3 | 	fle	local02, #8
02620     2B 59 02 F6 | 	mov	local03, local02
02624     30 58 62 FD | 	jmprel	local03
02628                 | LR__0047
02628     20 00 90 FD | 	jmp	#LR__0048
0262c     58 00 90 FD | 	jmp	#LR__0049
02630     90 00 90 FD | 	jmp	#LR__0050
02634     C8 00 90 FD | 	jmp	#LR__0051
02638     00 01 90 FD | 	jmp	#LR__0052
0263c     38 01 90 FD | 	jmp	#LR__0053
02640     70 01 90 FD | 	jmp	#LR__0054
02644     A8 01 90 FD | 	jmp	#LR__0055
02648     E4 01 90 FD | 	jmp	#LR__0056
0264c                 | LR__0048
0264c                 | ' 
0264c                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
0264c     50 0E 06 F1 | 	add	objptr, #80
02650     07 4B 02 F6 | 	mov	arg01, objptr
02654     50 0E 86 F1 | 	sub	objptr, #80
02658     0E 00 00 FF 
0265c     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02660     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02664     2D 5D 02 F6 | 	mov	local05, local04
02668     10 5E 06 F6 | 	mov	local06, #16
0266c     2E 4D 02 F6 | 	mov	arg02, local05
02670     10 4E 06 F6 | 	mov	arg03, #16
02674     0E 00 00 FF 
02678     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
0267c     4C 11 B0 FD | 	call	#__system__longmove
02680     12 61 02 F6 | 	mov	local07, result1
02684     A8 01 90 FD | 	jmp	#LR__0056
02688                 | LR__0049
02688                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02688     50 0E 06 F1 | 	add	objptr, #80
0268c     07 4B 02 F6 | 	mov	arg01, objptr
02690     50 0E 86 F1 | 	sub	objptr, #80
02694     0E 00 00 FF 
02698     98 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
0269c     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
026a0     2D 5D 02 F6 | 	mov	local05, local04
026a4     10 5E 06 F6 | 	mov	local06, #16
026a8     2E 4D 02 F6 | 	mov	arg02, local05
026ac     10 4E 06 F6 | 	mov	arg03, #16
026b0     0E 00 00 FF 
026b4     98 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
026b8     10 11 B0 FD | 	call	#__system__longmove
026bc     12 61 02 F6 | 	mov	local07, result1
026c0     6C 01 90 FD | 	jmp	#LR__0056
026c4                 | LR__0050
026c4                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
026c4     50 0E 06 F1 | 	add	objptr, #80
026c8     07 4B 02 F6 | 	mov	arg01, objptr
026cc     50 0E 86 F1 | 	sub	objptr, #80
026d0     0E 00 00 FF 
026d4     D8 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
026d8     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
026dc     2D 5D 02 F6 | 	mov	local05, local04
026e0     10 5E 06 F6 | 	mov	local06, #16
026e4     2E 4D 02 F6 | 	mov	arg02, local05
026e8     10 4E 06 F6 | 	mov	arg03, #16
026ec     0E 00 00 FF 
026f0     D8 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
026f4     D4 10 B0 FD | 	call	#__system__longmove
026f8     12 61 02 F6 | 	mov	local07, result1
026fc     30 01 90 FD | 	jmp	#LR__0056
02700                 | LR__0051
02700                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02700     50 0E 06 F1 | 	add	objptr, #80
02704     07 4B 02 F6 | 	mov	arg01, objptr
02708     50 0E 86 F1 | 	sub	objptr, #80
0270c     0E 00 00 FF 
02710     18 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02714     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02718     2D 5D 02 F6 | 	mov	local05, local04
0271c     10 5E 06 F6 | 	mov	local06, #16
02720     2E 4D 02 F6 | 	mov	arg02, local05
02724     10 4E 06 F6 | 	mov	arg03, #16
02728     0E 00 00 FF 
0272c     18 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02730     98 10 B0 FD | 	call	#__system__longmove
02734     12 61 02 F6 | 	mov	local07, result1
02738     F4 00 90 FD | 	jmp	#LR__0056
0273c                 | LR__0052
0273c                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
0273c     50 0E 06 F1 | 	add	objptr, #80
02740     07 4B 02 F6 | 	mov	arg01, objptr
02744     50 0E 86 F1 | 	sub	objptr, #80
02748     0E 00 00 FF 
0274c     58 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02750     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02754     2D 5D 02 F6 | 	mov	local05, local04
02758     10 5E 06 F6 | 	mov	local06, #16
0275c     2E 4D 02 F6 | 	mov	arg02, local05
02760     10 4E 06 F6 | 	mov	arg03, #16
02764     0E 00 00 FF 
02768     58 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
0276c     5C 10 B0 FD | 	call	#__system__longmove
02770     12 61 02 F6 | 	mov	local07, result1
02774     B8 00 90 FD | 	jmp	#LR__0056
02778                 | LR__0053
02778                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02778     50 0E 06 F1 | 	add	objptr, #80
0277c     07 4B 02 F6 | 	mov	arg01, objptr
02780     50 0E 86 F1 | 	sub	objptr, #80
02784     0E 00 00 FF 
02788     98 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
0278c     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02790     2D 5D 02 F6 | 	mov	local05, local04
02794     10 5E 06 F6 | 	mov	local06, #16
02798     2E 4D 02 F6 | 	mov	arg02, local05
0279c     10 4E 06 F6 | 	mov	arg03, #16
027a0     0E 00 00 FF 
027a4     98 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
027a8     20 10 B0 FD | 	call	#__system__longmove
027ac     12 61 02 F6 | 	mov	local07, result1
027b0     7C 00 90 FD | 	jmp	#LR__0056
027b4                 | LR__0054
027b4                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
027b4     50 0E 06 F1 | 	add	objptr, #80
027b8     07 4B 02 F6 | 	mov	arg01, objptr
027bc     50 0E 86 F1 | 	sub	objptr, #80
027c0     0E 00 00 FF 
027c4     D8 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
027c8     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
027cc     2D 5D 02 F6 | 	mov	local05, local04
027d0     10 5E 06 F6 | 	mov	local06, #16
027d4     2E 4D 02 F6 | 	mov	arg02, local05
027d8     10 4E 06 F6 | 	mov	arg03, #16
027dc     0E 00 00 FF 
027e0     D8 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
027e4     E4 0F B0 FD | 	call	#__system__longmove
027e8     12 61 02 F6 | 	mov	local07, result1
027ec     40 00 90 FD | 	jmp	#LR__0056
027f0                 | LR__0055
027f0                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
027f0     50 0E 06 F1 | 	add	objptr, #80
027f4     07 63 02 F6 | 	mov	local08, objptr
027f8     31 65 02 F6 | 	mov	local09, local08
027fc     0F 00 00 FF 
02800     18 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02804     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02808     2D 5D 02 F6 | 	mov	local05, local04
0280c     10 5E 06 F6 | 	mov	local06, #16
02810     32 4B 02 F6 | 	mov	arg01, local09
02814     2E 4D 02 F6 | 	mov	arg02, local05
02818     10 4E 06 F6 | 	mov	arg03, #16
0281c     50 0E 86 F1 | 	sub	objptr, #80
02820     0F 00 00 FF 
02824     18 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02828     A0 0F B0 FD | 	call	#__system__longmove
0282c     12 61 02 F6 | 	mov	local07, result1
02830                 | LR__0056
02830                 | ' 
02830                 | ' ' 4-bit graphics: do nothing with timings :)
02830                 | ' if mode<512
02830     01 00 00 FF 
02834     00 54 5E F2 | 	cmps	local01, ##512 wcz
02838     20 00 90 3D |  if_ae	jmp	#LR__0057
0283c     0C 00 00 FF 
02840     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02844     0B 67 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02848                 | '   palette_ptr:=@ataripalette
02848     18 0E 06 F1 | 	add	objptr, #24
0284c     07 67 62 FC | 	wrlong	local10, objptr
02850     18 0E 86 F1 | 	sub	objptr, #24
02854     0C 00 00 FF 
02858     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
0285c                 | LR__0057
0285c                 | ' 
0285c                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
0285c     2A 57 02 F6 | 	mov	local02, local01
02860     01 00 00 FF 
02864     30 56 06 F5 | 	and	local02, ##560
02868     01 00 00 FF 
0286c     30 56 0E F2 | 	cmp	local02, ##560 wz
02870     48 00 90 5D |  if_ne	jmp	#LR__0058
02874                 | '   timings[5]:=4
02874     64 0E 06 F1 | 	add	objptr, #100
02878     07 09 68 FC | 	wrlong	#4, objptr
0287c     18 0E 06 F1 | 	add	objptr, #24
02880     07 69 02 FB | 	rdlong	local11, objptr
02884     01 68 66 F0 | 	shl	local11, #1
02888                 | '   timings[11]:=timings[11]<<1
02888     07 69 62 FC | 	wrlong	local11, objptr
0288c                 | '   putpixel:=p8
0288c     6C 0E 06 F1 | 	add	objptr, #108
02890     07 57 02 FB | 	rdlong	local02, objptr
02894     10 0E 86 F1 | 	sub	objptr, #16
02898     07 57 62 FC | 	wrlong	local02, objptr
0289c     0C 00 00 FF 
028a0     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
028a4     0B 6B 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
028a8                 | '   palette_ptr:=@ataripalette
028a8     C0 0E 86 F1 | 	sub	objptr, #192
028ac     07 6B 62 FC | 	wrlong	local12, objptr
028b0     18 0E 86 F1 | 	sub	objptr, #24
028b4     0C 00 00 FF 
028b8     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
028bc                 | LR__0058
028bc                 | ' 
028bc                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
028bc     2A 57 02 F6 | 	mov	local02, local01
028c0     01 00 00 FF 
028c4     30 56 06 F5 | 	and	local02, ##560
028c8     01 00 00 FF 
028cc     10 56 0E F2 | 	cmp	local02, ##528 wz
028d0     48 00 90 5D |  if_ne	jmp	#LR__0059
028d4                 | '   timings[5]:=16
028d4     64 0E 06 F1 | 	add	objptr, #100
028d8     07 21 68 FC | 	wrlong	#16, objptr
028dc     18 0E 06 F1 | 	add	objptr, #24
028e0     07 6D 02 FB | 	rdlong	local13, objptr
028e4     01 6C 46 F0 | 	shr	local13, #1
028e8                 | '   timings[11]:=timings[11]>>1
028e8     07 6D 62 FC | 	wrlong	local13, objptr
028ec                 | '   putpixel:=p2
028ec     64 0E 06 F1 | 	add	objptr, #100
028f0     07 57 02 FB | 	rdlong	local02, objptr
028f4     08 0E 86 F1 | 	sub	objptr, #8
028f8     07 57 62 FC | 	wrlong	local02, objptr
028fc     0C 00 00 FF 
02900     08 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02904     0B 6F 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02908                 | '   palette_ptr:=@fourcolors
02908     C0 0E 86 F1 | 	sub	objptr, #192
0290c     07 6F 62 FC | 	wrlong	local14, objptr
02910     18 0E 86 F1 | 	sub	objptr, #24
02914     0C 00 00 FF 
02918     08 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
0291c                 | LR__0059
0291c                 | ' 
0291c                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
0291c     2A 57 02 F6 | 	mov	local02, local01
02920     01 00 00 FF 
02924     30 56 06 F5 | 	and	local02, ##560
02928     01 00 00 FF 
0292c     00 56 0E F2 | 	cmp	local02, ##512 wz
02930     48 00 90 5D |  if_ne	jmp	#LR__0060
02934                 | '   timings[5]:=32
02934     64 0E 06 F1 | 	add	objptr, #100
02938     07 41 68 FC | 	wrlong	#32, objptr
0293c     18 0E 06 F1 | 	add	objptr, #24
02940     07 71 02 FB | 	rdlong	local15, objptr
02944     02 70 46 F0 | 	shr	local15, #2
02948                 | '   timings[11]:=timings[11]>>2
02948     07 71 62 FC | 	wrlong	local15, objptr
0294c                 | '   putpixel:=p1
0294c     60 0E 06 F1 | 	add	objptr, #96
02950     07 57 02 FB | 	rdlong	local02, objptr
02954     04 0E 86 F1 | 	sub	objptr, #4
02958     07 57 62 FC | 	wrlong	local02, objptr
0295c     0C 00 00 FF 
02960     00 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02964     0B 73 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02968                 | '   palette_ptr:=@twocolors
02968     C0 0E 86 F1 | 	sub	objptr, #192
0296c     07 73 62 FC | 	wrlong	local16, objptr
02970     18 0E 86 F1 | 	sub	objptr, #24
02974     0C 00 00 FF 
02978     00 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
0297c                 | LR__0060
0297c                 | ' 
0297c                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
0297c     2A 57 02 F6 | 	mov	local02, local01
02980     01 00 00 FF 
02984     30 56 06 F5 | 	and	local02, ##560
02988     01 00 00 FF 
0298c     20 56 0E F2 | 	cmp	local02, ##544 wz
02990     30 00 90 5D |  if_ne	jmp	#LR__0061
02994                 | '   putpixel:=p4
02994     E4 0E 06 F1 | 	add	objptr, #228
02998     07 57 02 FB | 	rdlong	local02, objptr
0299c     0C 0E 86 F1 | 	sub	objptr, #12
029a0     07 57 62 FC | 	wrlong	local02, objptr
029a4     0C 00 00 FF 
029a8     18 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
029ac     0B 75 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
029b0                 | '   palette_ptr:=@vga16
029b0     C0 0E 86 F1 | 	sub	objptr, #192
029b4     07 75 62 FC | 	wrlong	local17, objptr
029b8     18 0E 86 F1 | 	sub	objptr, #24
029bc     0C 00 00 FF 
029c0     18 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
029c4                 | LR__0061
029c4                 | ' 
029c4                 | ' repeat i from 0 to 4
029c4     00 76 06 F6 | 	mov	local18, #0
029c8     78 D6 9F FE | 	loc	pa,	#(@LR__0063-@LR__0062)
029cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
029d0                 | LR__0062
029d0     3B 79 02 F6 | 	mov	local19, local18
029d4     02 78 66 F0 | 	shl	local19, #2
029d8     50 0E 06 F1 | 	add	objptr, #80
029dc     07 79 02 F1 | 	add	local19, objptr
029e0     2C 0E 86 F1 | 	sub	objptr, #44
029e4     07 7B 02 FB | 	rdlong	local20, objptr
029e8     24 0E 86 F1 | 	sub	objptr, #36
029ec     11 7A 66 F0 | 	shl	local20, #17
029f0     3C 7D 02 FB | 	rdlong	local21, local19
029f4     3D 7D 02 F1 | 	add	local21, local20
029f8     3E 7F 02 F6 | 	mov	local22, local21
029fc     80 40 38 FF 
02a00     00 7E 06 F1 | 	add	local22, ##1887502336
02a04                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02a04     3C 7F 62 FC | 	wrlong	local22, local19
02a08     01 76 06 F1 | 	add	local18, #1
02a0c     05 76 5E F2 | 	cmps	local18, #5 wcz
02a10     BC FF 9F CD |  if_b	jmp	#LR__0062
02a14                 | LR__0063
02a14     24 0E 06 F1 | 	add	objptr, #36
02a18     07 81 02 FB | 	rdlong	local23, objptr
02a1c     11 80 66 F0 | 	shl	local23, #17
02a20     40 0E 06 F1 | 	add	objptr, #64
02a24     07 83 02 FB | 	rdlong	local24, objptr
02a28     40 83 02 F1 | 	add	local24, local23
02a2c                 | ' timings[5]:=timings[5]+hdmibase<<17
02a2c     07 83 62 FC | 	wrlong	local24, objptr
02a30                 | ' clkfreq:=timings[13]
02a30     20 0E 06 F1 | 	add	objptr, #32
02a34     07 57 02 FB | 	rdlong	local02, objptr
02a38     14 56 66 FC | 	wrlong	local02, #20
02a3c                 | ' hubset(timings[14])
02a3c     04 0E 06 F1 | 	add	objptr, #4
02a40     07 4B 02 FB | 	rdlong	arg01, objptr
02a44     88 0E 86 F1 | 	sub	objptr, #136
02a48     00 4A 62 FD | 	hubset	arg01
02a4c                 | ' waitms(1)
02a4c     01 4A 06 F6 | 	mov	arg01, #1
02a50     4C 0F B0 FD | 	call	#__system___waitms
02a54     2A 85 02 F6 | 	mov	local25, local01
02a58     03 84 06 F5 | 	and	local25, #3
02a5c     42 87 C2 F9 | 	decod	local26, local25
02a60                 | ' 
02a60                 | ' 
02a60                 | ' xzoom:=1<<(mode & 3)
02a60     CC 0E 06 F1 | 	add	objptr, #204
02a64     07 87 62 FC | 	wrlong	local26, objptr
02a68                 | ' 
02a68                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02a68     43 63 02 F6 | 	mov	local08, local26
02a6c     CC 0E 86 F1 | 	sub	objptr, #204
02a70     08 62 0E F2 | 	cmp	local08, #8 wz
02a74     24 00 90 5D |  if_ne	jmp	#LR__0064
02a78     2A 65 02 F6 | 	mov	local09, local01
02a7c     04 64 46 F0 | 	shr	local09, #4
02a80     03 64 06 F5 | 	and	local09, #3
02a84     03 64 0E F2 | 	cmp	local09, #3 wz
02a88     10 00 90 AD |  if_e	jmp	#LR__0064
02a8c                 | '   xzoom:=4
02a8c     04 56 06 F6 | 	mov	local02, #4
02a90     CC 0E 06 F1 | 	add	objptr, #204
02a94     07 09 68 FC | 	wrlong	#4, objptr
02a98     CC 0E 86 F1 | 	sub	objptr, #204
02a9c                 | LR__0064
02a9c     2A 89 02 F6 | 	mov	local27, local01
02aa0     02 88 46 F0 | 	shr	local27, #2
02aa4     03 88 06 F5 | 	and	local27, #3
02aa8     44 8B C2 F9 | 	decod	local28, local27
02aac                 | ' 
02aac                 | ' yzoom:=1<<((mode>>2) & 3)
02aac     D0 0E 06 F1 | 	add	objptr, #208
02ab0     07 8B 62 FC | 	wrlong	local28, objptr
02ab4     04 0E 86 F1 | 	sub	objptr, #4
02ab8     07 63 02 FB | 	rdlong	local08, objptr
02abc     04 0E 06 F1 | 	add	objptr, #4
02ac0     07 5B 02 FB | 	rdlong	local04, objptr
02ac4     2D 63 02 FD | 	qmul	local08, local04
02ac8     18 8C 62 FD | 	getqx	local29
02acc                 | ' azoom:=xzoom*yzoom
02acc     04 0E 06 F1 | 	add	objptr, #4
02ad0     07 8D 62 FC | 	wrlong	local29, objptr
02ad4                 | ' 
02ad4                 | ' cpl:=timings[11]
02ad4     58 0E 86 F1 | 	sub	objptr, #88
02ad8     07 57 02 FB | 	rdlong	local02, objptr
02adc     14 0E 06 F1 | 	add	objptr, #20
02ae0     07 57 62 FC | 	wrlong	local02, objptr
02ae4     90 0E 86 F1 | 	sub	objptr, #144
02ae8                 | ' if (mode<512)
02ae8     01 00 00 FF 
02aec     00 54 5E F2 | 	cmps	local01, ##512 wcz
02af0     60 00 90 3D |  if_ae	jmp	#LR__0065
02af4     80 0E 06 F1 | 	add	objptr, #128
02af8     07 09 03 FB | 	rdlong	muldiva_, objptr
02afc     04 08 47 F0 | 	shr	muldiva_, #4
02b00     50 0E 06 F1 | 	add	objptr, #80
02b04     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b08     D0 0E 86 F1 | 	sub	objptr, #208
02b0c     CC 00 A0 FD | 	call	#unsdivide_
02b10                 | '   lines:=(timings[12]>>4)+/yzoom
02b10     94 0E 06 F1 | 	add	objptr, #148
02b14     07 0B 63 FC | 	wrlong	muldivb_, objptr
02b18                 | '   if ((timings[12]>>4)+//yzoom) <>0
02b18     14 0E 86 F1 | 	sub	objptr, #20
02b1c     07 09 03 FB | 	rdlong	muldiva_, objptr
02b20     04 08 47 F0 | 	shr	muldiva_, #4
02b24     50 0E 06 F1 | 	add	objptr, #80
02b28     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b2c     D0 0E 86 F1 | 	sub	objptr, #208
02b30     CC 00 A0 FD | 	call	#unsdivide_
02b34     00 08 0F F2 | 	cmp	muldiva_, #0 wz
02b38     AC 00 90 AD |  if_e	jmp	#LR__0068
02b3c                 | '     lines +=1
02b3c     94 0E 06 F1 | 	add	objptr, #148
02b40     07 57 02 FB | 	rdlong	local02, objptr
02b44     01 56 06 F1 | 	add	local02, #1
02b48     07 57 62 FC | 	wrlong	local02, objptr
02b4c     94 0E 86 F1 | 	sub	objptr, #148
02b50                 | ' 
02b50                 | ' else
02b50     94 00 90 FD | 	jmp	#LR__0068
02b54                 | LR__0065
02b54     80 0E 06 F1 | 	add	objptr, #128
02b58     07 09 03 FB | 	rdlong	muldiva_, objptr
02b5c     50 0E 06 F1 | 	add	objptr, #80
02b60     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b64     D0 0E 86 F1 | 	sub	objptr, #208
02b68     D0 00 A0 FD | 	call	#divide_
02b6c                 | '   lines:=timings[12]/yzoom
02b6c     94 0E 06 F1 | 	add	objptr, #148
02b70     07 0B 63 FC | 	wrlong	muldivb_, objptr
02b74                 | '   if cpl//xzoom==0
02b74     04 0E 86 F1 | 	sub	objptr, #4
02b78     07 09 03 FB | 	rdlong	muldiva_, objptr
02b7c     3C 0E 06 F1 | 	add	objptr, #60
02b80     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b84     CC 0E 86 F1 | 	sub	objptr, #204
02b88     D0 00 A0 FD | 	call	#divide_
02b8c     00 08 0F F2 | 	cmp	muldiva_, #0 wz
02b90     28 00 90 5D |  if_ne	jmp	#LR__0066
02b94                 | '     cpl:=cpl/xzoom
02b94     90 0E 06 F1 | 	add	objptr, #144
02b98     07 09 03 FB | 	rdlong	muldiva_, objptr
02b9c     3C 0E 06 F1 | 	add	objptr, #60
02ba0     07 0B 03 FB | 	rdlong	muldivb_, objptr
02ba4     CC 0E 86 F1 | 	sub	objptr, #204
02ba8     D0 00 A0 FD | 	call	#divide_
02bac     90 0E 06 F1 | 	add	objptr, #144
02bb0     07 0B 63 FC | 	wrlong	muldivb_, objptr
02bb4     90 0E 86 F1 | 	sub	objptr, #144
02bb8                 | '   else
02bb8     2C 00 90 FD | 	jmp	#LR__0067
02bbc                 | LR__0066
02bbc     90 0E 06 F1 | 	add	objptr, #144
02bc0     07 09 03 FB | 	rdlong	muldiva_, objptr
02bc4     3C 0E 06 F1 | 	add	objptr, #60
02bc8     07 0B 03 FB | 	rdlong	muldivb_, objptr
02bcc     CC 0E 86 F1 | 	sub	objptr, #204
02bd0     D0 00 A0 FD | 	call	#divide_
02bd4     85 8F 02 F6 | 	mov	local30, muldivb_
02bd8     01 8E 06 F1 | 	add	local30, #1
02bdc                 | '     cpl:=cpl/xzoom+1
02bdc     90 0E 06 F1 | 	add	objptr, #144
02be0     07 8F 62 FC | 	wrlong	local30, objptr
02be4     90 0E 86 F1 | 	sub	objptr, #144
02be8                 | LR__0067
02be8                 | LR__0068
02be8     90 0E 06 F1 | 	add	objptr, #144
02bec     07 63 02 FB | 	rdlong	local08, objptr
02bf0     04 0E 06 F1 | 	add	objptr, #4
02bf4     07 5B 02 FB | 	rdlong	local04, objptr
02bf8     2D 63 02 FD | 	qmul	local08, local04
02bfc     18 90 62 FD | 	getqx	local31
02c00                 | ' 
02c00                 | ' buflen:=(cpl*lines)
02c00     64 0E 86 F1 | 	sub	objptr, #100
02c04     07 91 62 FC | 	wrlong	local31, objptr
02c08     30 0E 86 F1 | 	sub	objptr, #48
02c0c     02 90 66 F0 | 	shl	local31, #2
02c10     13 92 C6 F9 | 	decod	local32, #19
02c14     48 93 82 F1 | 	sub	local32, local31
02c18                 | ' buf_ptr:=$80000-4*buflen
02c18     07 93 62 FC | 	wrlong	local32, objptr
02c1c     50 0E 06 F1 | 	add	objptr, #80
02c20     07 95 02 F6 | 	mov	local33, objptr
02c24                 | ' mode_ptr:=@timings
02c24     3C 0E 86 F1 | 	sub	objptr, #60
02c28     07 95 62 FC | 	wrlong	local33, objptr
02c2c                 | ' graphmode:=mode
02c2c     B0 0E 06 F1 | 	add	objptr, #176
02c30     07 55 62 FC | 	wrlong	local01, objptr
02c34     C4 0E 86 F1 | 	sub	objptr, #196
02c38                 | ' makedl(mode)
02c38     2A 4B 02 F6 | 	mov	arg01, local01
02c3c                 | ' 
02c3c                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02c3c                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02c3c                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02c3c                 | ' 
02c3c                 | ' '   0 - display a up/down border line
02c3c                 | ' 
02c3c                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02c3c                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02c3c                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02c3c                 | ' '    nnnn - font line to display, 0..15
02c3c                 | ' '    llllll - character line, determines the cursor Y position
02c3c                 | ' 
02c3c                 | ' 
02c3c                 | ' if (mode &256==0)
02c3c     00 4B CE F7 | 	test	arg01, #256 wz
02c40     1C 00 90 5D |  if_ne	jmp	#LR__0069
02c44     07 97 02 FB | 	rdlong	local34, objptr
02c48     04 00 00 FF 
02c4c     00 97 86 F1 | 	sub	local34, ##2304
02c50                 | '   dl_ptr:=buf_ptr-4*576
02c50     1C 0E 06 F1 | 	add	objptr, #28
02c54     07 97 62 FC | 	wrlong	local34, objptr
02c58     1C 0E 86 F1 | 	sub	objptr, #28
02c5c                 | ' else
02c5c     18 00 90 FD | 	jmp	#LR__0070
02c60                 | LR__0069
02c60     07 99 02 FB | 	rdlong	local35, objptr
02c64     03 00 00 FF 
02c68     C0 99 86 F1 | 	sub	local35, ##1984
02c6c                 | '   dl_ptr:=buf_ptr-4*496
02c6c     1C 0E 06 F1 | 	add	objptr, #28
02c70     07 99 62 FC | 	wrlong	local35, objptr
02c74     1C 0E 86 F1 | 	sub	objptr, #28
02c78                 | LR__0070
02c78     25 9B 02 F6 | 	mov	local36, arg01
02c7c     02 9A 46 F0 | 	shr	local36, #2
02c80     03 9A 06 F5 | 	and	local36, #3
02c84                 | '  ' dl_ptr:=buf_ptr-4*540
02c84                 | ' 
02c84                 | ' vzoom:=((mode>>2) & 3)
02c84                 | ' 
02c84                 | ' 
02c84                 | ' if mode<512 '' text modes
02c84     01 00 00 FF 
02c88     00 4A 5E F2 | 	cmps	arg01, ##512 wcz
02c8c     E4 01 90 3D |  if_ae	jmp	#LR__0078
02c90                 | ' 
02c90                 | '   if timings[6]>0 'borders
02c90     68 0E 06 F1 | 	add	objptr, #104
02c94     07 9D 02 FB | 	rdlong	local37, objptr
02c98     68 0E 86 F1 | 	sub	objptr, #104
02c9c     00 9C 5E F2 | 	cmps	local37, #0 wcz
02ca0     D4 00 90 ED |  if_be	jmp	#LR__0075
02ca4                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02ca4     00 9E 06 F6 | 	mov	local38, #0
02ca8     68 0E 06 F1 | 	add	objptr, #104
02cac     07 A1 02 FB | 	rdlong	local39, objptr
02cb0     68 0E 86 F1 | 	sub	objptr, #104
02cb4     01 A0 86 F1 | 	sub	local39, #1
02cb8     00 A0 5E F2 | 	cmps	local39, #0 wcz
02cbc     01 A2 06 16 |  if_a	mov	local40, #1
02cc0     01 A2 66 E6 |  if_be	neg	local40, #1
02cc4     51 A5 02 F6 | 	mov	local41, local40
02cc8     51 A1 02 F1 | 	add	local39, local40
02ccc     58 D3 9F FE | 	loc	pa,	#(@LR__0072-@LR__0071)
02cd0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02cd4                 | LR__0071
02cd4     4F A7 02 F6 | 	mov	local42, local38
02cd8     02 A6 66 F0 | 	shl	local42, #2
02cdc     1C 0E 06 F1 | 	add	objptr, #28
02ce0     07 A9 02 FB | 	rdlong	local43, objptr
02ce4     1C 0E 86 F1 | 	sub	objptr, #28
02ce8     53 A9 02 F1 | 	add	local43, local42
02cec                 | '       long[dl_ptr+4*i]:=$0
02cec     54 01 68 FC | 	wrlong	#0, local43
02cf0     52 9F 02 F1 | 	add	local38, local41
02cf4     50 9F 0A F2 | 	cmp	local38, local39 wz
02cf8     D8 FF 9F 5D |  if_ne	jmp	#LR__0071
02cfc                 | LR__0072
02cfc                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02cfc     68 0E 06 F1 | 	add	objptr, #104
02d00     07 9F 02 FB | 	rdlong	local38, objptr
02d04     18 0E 06 F1 | 	add	objptr, #24
02d08     07 A3 02 FB | 	rdlong	local40, objptr
02d0c     51 9F 02 F1 | 	add	local38, local40
02d10     0C 0E 06 F1 | 	add	objptr, #12
02d14     07 AB 02 FB | 	rdlong	local44, objptr
02d18     01 AA 86 F1 | 	sub	local44, #1
02d1c     24 0E 86 F1 | 	sub	objptr, #36
02d20     07 AD 02 FB | 	rdlong	local45, objptr
02d24     18 0E 06 F1 | 	add	objptr, #24
02d28     07 AF 02 FB | 	rdlong	local46, objptr
02d2c     80 0E 86 F1 | 	sub	objptr, #128
02d30     57 AD 02 F1 | 	add	local45, local46
02d34     56 AB 5A F2 | 	cmps	local44, local45 wcz
02d38     01 B0 06 16 |  if_a	mov	local47, #1
02d3c     01 B0 66 E6 |  if_be	neg	local47, #1
02d40     58 B3 02 F6 | 	mov	local48, local47
02d44     58 AB 02 F1 | 	add	local44, local47
02d48     DC D2 9F FE | 	loc	pa,	#(@LR__0074-@LR__0073)
02d4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d50                 | LR__0073
02d50     4F B5 02 F6 | 	mov	local49, local38
02d54     02 B4 66 F0 | 	shl	local49, #2
02d58     1C 0E 06 F1 | 	add	objptr, #28
02d5c     07 B7 02 FB | 	rdlong	local50, objptr
02d60     1C 0E 86 F1 | 	sub	objptr, #28
02d64     5A B7 02 F1 | 	add	local50, local49
02d68                 | '       long[dl_ptr+4*i]:=$0
02d68     5B 01 68 FC | 	wrlong	#0, local50
02d6c     59 9F 02 F1 | 	add	local38, local48
02d70     55 9F 0A F2 | 	cmp	local38, local44 wz
02d74     D8 FF 9F 5D |  if_ne	jmp	#LR__0073
02d78                 | LR__0074
02d78                 | LR__0075
02d78     10 B8 06 F6 | 	mov	local51, #16
02d7c     4D B9 62 F0 | 	shl	local51, local36
02d80                 | '   lpc:=16<<vzoom
02d80                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02d80     68 0E 06 F1 | 	add	objptr, #104
02d84     07 9F 02 FB | 	rdlong	local38, objptr
02d88     4F BB 02 F6 | 	mov	local52, local38
02d8c     18 0E 06 F1 | 	add	objptr, #24
02d90     07 BD 02 FB | 	rdlong	local53, objptr
02d94     5E BB 02 F1 | 	add	local52, local53
02d98     01 BA 86 F1 | 	sub	local52, #1
02d9c     18 0E 86 F1 | 	sub	objptr, #24
02da0     07 B1 02 FB | 	rdlong	local47, objptr
02da4     68 0E 86 F1 | 	sub	objptr, #104
02da8     58 BB 5A F2 | 	cmps	local52, local47 wcz
02dac     01 BE 06 16 |  if_a	mov	local54, #1
02db0     01 BE 66 E6 |  if_be	neg	local54, #1
02db4     5F C1 02 F6 | 	mov	local55, local54
02db8     5F BB 02 F1 | 	add	local52, local54
02dbc     F0 D2 9F FE | 	loc	pa,	#(@LR__0077-@LR__0076)
02dc0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02dc4                 | LR__0076
02dc4     4F 09 03 F6 | 	mov	muldiva_, local38
02dc8     68 0E 06 F1 | 	add	objptr, #104
02dcc     07 C3 02 FB | 	rdlong	local56, objptr
02dd0     68 0E 86 F1 | 	sub	objptr, #104
02dd4     61 09 83 F1 | 	sub	muldiva_, local56
02dd8     5C 0B 03 F6 | 	mov	muldivb_, local51
02ddc     CC 00 A0 FD | 	call	#unsdivide_
02de0     4D 09 43 F0 | 	shr	muldiva_, local36
02de4                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
02de4     84 C5 02 F6 | 	mov	local57, muldiva_
02de8     4F 09 03 F6 | 	mov	muldiva_, local38
02dec     68 0E 06 F1 | 	add	objptr, #104
02df0     07 C3 02 FB | 	rdlong	local56, objptr
02df4     68 0E 86 F1 | 	sub	objptr, #104
02df8     61 09 83 F1 | 	sub	muldiva_, local56
02dfc     5C 0B 03 F6 | 	mov	muldivb_, local51
02e00     CC 00 A0 FD | 	call	#unsdivide_
02e04     85 C7 02 F6 | 	mov	local58, muldivb_
02e08                 | '     charline:=(i-timings[6])+/lpc
02e08     90 0E 06 F1 | 	add	objptr, #144
02e0c     07 C3 02 FB | 	rdlong	local56, objptr
02e10     90 0E 86 F1 | 	sub	objptr, #144
02e14     63 C3 02 FD | 	qmul	local56, local58
02e18     18 C8 62 FD | 	getqx	local59
02e1c     02 C8 66 F0 | 	shl	local59, #2
02e20     07 CB 02 FB | 	rdlong	local60, objptr
02e24     64 CB 02 F1 | 	add	local60, local59
02e28     25 CD 02 F6 | 	mov	local61, arg01
02e2c     03 CC 06 F5 | 	and	local61, #3
02e30     66 CB 02 F1 | 	add	local60, local61
02e34                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
02e34     0C CA 66 F0 | 	shl	local60, #12
02e38     08 C4 66 F0 | 	shl	local57, #8
02e3c     62 CB 02 F1 | 	add	local60, local57
02e40     02 C6 66 F0 | 	shl	local58, #2
02e44     63 CB 02 F1 | 	add	local60, local58
02e48     01 CA 06 F1 | 	add	local60, #1
02e4c     4F CF 02 F6 | 	mov	local62, local38
02e50     02 CE 66 F0 | 	shl	local62, #2
02e54     1C 0E 06 F1 | 	add	objptr, #28
02e58     07 D1 02 FB | 	rdlong	local63, objptr
02e5c     1C 0E 86 F1 | 	sub	objptr, #28
02e60     67 D1 02 F1 | 	add	local63, local62
02e64                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
02e64     68 CB 62 FC | 	wrlong	local60, local63
02e68     60 9F 02 F1 | 	add	local38, local55
02e6c     5D 9F 0A F2 | 	cmp	local38, local52 wz
02e70     50 FF 9F 5D |  if_ne	jmp	#LR__0076
02e74                 | LR__0077
02e74                 | LR__0078
02e74                 | ' 
02e74                 | ' 
02e74                 | ' 
02e74                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
02e74     01 00 00 FF 
02e78     00 4A 5E F2 | 	cmps	arg01, ##512 wcz
02e7c     AC 01 90 CD |  if_b	jmp	#LR__0086
02e80                 | ' 
02e80                 | '   if timings[6]>0 'borders
02e80     68 0E 06 F1 | 	add	objptr, #104
02e84     07 9D 02 FB | 	rdlong	local37, objptr
02e88     68 0E 86 F1 | 	sub	objptr, #104
02e8c     00 9C 5E F2 | 	cmps	local37, #0 wcz
02e90     D4 00 90 ED |  if_be	jmp	#LR__0083
02e94                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02e94     00 9E 06 F6 | 	mov	local38, #0
02e98     68 0E 06 F1 | 	add	objptr, #104
02e9c     07 D3 02 FB | 	rdlong	local64, objptr
02ea0     68 0E 86 F1 | 	sub	objptr, #104
02ea4     01 D2 86 F1 | 	sub	local64, #1
02ea8     00 D2 5E F2 | 	cmps	local64, #0 wcz
02eac     01 A2 06 16 |  if_a	mov	local40, #1
02eb0     01 A2 66 E6 |  if_be	neg	local40, #1
02eb4     51 D5 02 F6 | 	mov	local65, local40
02eb8     51 D3 02 F1 | 	add	local64, local40
02ebc     68 D1 9F FE | 	loc	pa,	#(@LR__0080-@LR__0079)
02ec0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02ec4                 | LR__0079
02ec4     4F D7 02 F6 | 	mov	local66, local38
02ec8     02 D6 66 F0 | 	shl	local66, #2
02ecc     1C 0E 06 F1 | 	add	objptr, #28
02ed0     07 D9 02 FB | 	rdlong	local67, objptr
02ed4     1C 0E 86 F1 | 	sub	objptr, #28
02ed8     6B D9 02 F1 | 	add	local67, local66
02edc                 | '       long[dl_ptr+4*i]:=$0
02edc     6C 01 68 FC | 	wrlong	#0, local67
02ee0     6A 9F 02 F1 | 	add	local38, local65
02ee4     69 9F 0A F2 | 	cmp	local38, local64 wz
02ee8     D8 FF 9F 5D |  if_ne	jmp	#LR__0079
02eec                 | LR__0080
02eec                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02eec     68 0E 06 F1 | 	add	objptr, #104
02ef0     07 9F 02 FB | 	rdlong	local38, objptr
02ef4     18 0E 06 F1 | 	add	objptr, #24
02ef8     07 A3 02 FB | 	rdlong	local40, objptr
02efc     51 9F 02 F1 | 	add	local38, local40
02f00     0C 0E 06 F1 | 	add	objptr, #12
02f04     07 DB 02 FB | 	rdlong	local68, objptr
02f08     01 DA 86 F1 | 	sub	local68, #1
02f0c     24 0E 86 F1 | 	sub	objptr, #36
02f10     07 AD 02 FB | 	rdlong	local45, objptr
02f14     18 0E 06 F1 | 	add	objptr, #24
02f18     07 AF 02 FB | 	rdlong	local46, objptr
02f1c     80 0E 86 F1 | 	sub	objptr, #128
02f20     57 AD 02 F1 | 	add	local45, local46
02f24     56 DB 5A F2 | 	cmps	local68, local45 wcz
02f28     01 B0 06 16 |  if_a	mov	local47, #1
02f2c     01 B0 66 E6 |  if_be	neg	local47, #1
02f30     58 DD 02 F6 | 	mov	local69, local47
02f34     58 DB 02 F1 | 	add	local68, local47
02f38     EC D0 9F FE | 	loc	pa,	#(@LR__0082-@LR__0081)
02f3c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02f40                 | LR__0081
02f40     4F DF 02 F6 | 	mov	local70, local38
02f44     02 DE 66 F0 | 	shl	local70, #2
02f48     1C 0E 06 F1 | 	add	objptr, #28
02f4c     07 E1 02 FB | 	rdlong	local71, objptr
02f50     1C 0E 86 F1 | 	sub	objptr, #28
02f54     6F E1 02 F1 | 	add	local71, local70
02f58                 | '       long[dl_ptr+4*i]:=$0
02f58     70 01 68 FC | 	wrlong	#0, local71
02f5c     6E 9F 02 F1 | 	add	local38, local69
02f60     6D 9F 0A F2 | 	cmp	local38, local68 wz
02f64     D8 FF 9F 5D |  if_ne	jmp	#LR__0081
02f68                 | LR__0082
02f68                 | LR__0083
02f68                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02f68     68 0E 06 F1 | 	add	objptr, #104
02f6c     07 9F 02 FB | 	rdlong	local38, objptr
02f70     4F E3 02 F6 | 	mov	local72, local38
02f74     18 0E 06 F1 | 	add	objptr, #24
02f78     07 BD 02 FB | 	rdlong	local53, objptr
02f7c     5E E3 02 F1 | 	add	local72, local53
02f80     01 E2 86 F1 | 	sub	local72, #1
02f84     18 0E 86 F1 | 	sub	objptr, #24
02f88     07 B1 02 FB | 	rdlong	local47, objptr
02f8c     68 0E 86 F1 | 	sub	objptr, #104
02f90     58 E3 5A F2 | 	cmps	local72, local47 wcz
02f94     01 BE 06 16 |  if_a	mov	local54, #1
02f98     01 BE 66 E6 |  if_be	neg	local54, #1
02f9c     5F E5 02 F6 | 	mov	local73, local54
02fa0     5F E3 02 F1 | 	add	local72, local54
02fa4     D8 D0 9F FE | 	loc	pa,	#(@LR__0085-@LR__0084)
02fa8     93 00 A0 FD | 	call	#FCACHE_LOAD_
02fac                 | LR__0084
02fac     4F E7 02 F6 | 	mov	local74, local38
02fb0     68 0E 06 F1 | 	add	objptr, #104
02fb4     07 C3 02 FB | 	rdlong	local56, objptr
02fb8     61 E7 82 F1 | 	sub	local74, local56
02fbc     4D E7 42 F0 | 	shr	local74, local36
02fc0     28 0E 06 F1 | 	add	objptr, #40
02fc4     07 C3 02 FB | 	rdlong	local56, objptr
02fc8     90 0E 86 F1 | 	sub	objptr, #144
02fcc     73 C3 02 FD | 	qmul	local56, local74
02fd0     18 E8 62 FD | 	getqx	local75
02fd4     02 E8 66 F0 | 	shl	local75, #2
02fd8     07 EB 02 FB | 	rdlong	local76, objptr
02fdc     74 EB 02 F1 | 	add	local76, local75
02fe0     25 ED 02 F6 | 	mov	local77, arg01
02fe4     03 EC 06 F5 | 	and	local77, #3
02fe8     76 EB 02 F1 | 	add	local76, local77
02fec                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
02fec     0C EA 66 F0 | 	shl	local76, #12
02ff0     02 EA 06 F1 | 	add	local76, #2
02ff4     25 EF 02 F6 | 	mov	local78, arg01
02ff8     30 EE 06 F5 | 	and	local78, #48
02ffc     02 EE 46 F0 | 	shr	local78, #2
03000     77 EB 02 F1 | 	add	local76, local78
03004     4F F1 02 F6 | 	mov	local79, local38
03008     02 F0 66 F0 | 	shl	local79, #2
0300c     1C 0E 06 F1 | 	add	objptr, #28
03010     07 F3 02 FB | 	rdlong	local80, objptr
03014     1C 0E 86 F1 | 	sub	objptr, #28
03018     78 F3 02 F1 | 	add	local80, local79
0301c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
0301c     79 EB 62 FC | 	wrlong	local76, local80
03020     72 9F 02 F1 | 	add	local38, local73
03024     71 9F 0A F2 | 	cmp	local38, local72 wz
03028     80 FF 9F 5D |  if_ne	jmp	#LR__0084
0302c                 | LR__0085
0302c                 | LR__0086
0302c                 | LR__0087
0302c     AF F0 03 F6 | 	mov	ptra, fp
03030     BF 00 A0 FD | 	call	#popregs_
03034                 | _hng030rm_spin2_setmode_ret
03034     2D 00 64 FD | 	ret
03038                 | 
03038                 | ' 
03038                 | ' pub serialcog()| rr, mrr, b, mb, midireport, kbmreport
03038                 | _retrocog_spin2_serialcog
03038     19 5A 05 F6 | 	mov	COUNT_, #25
0303c     B0 00 A0 FD | 	call	#pushregs_
03040                 | ' 
03040                 | ' 'start serial and midi
03040                 | ' 
03040                 | ' serial_start(rxpin, txpin, baudrate)
03040     20 4A 06 F6 | 	mov	arg01, #32
03044     21 4C 06 F6 | 	mov	arg02, #33
03048     A6 0E 00 FF 
0304c     00 4E 06 F6 | 	mov	arg03, ##1920000
03050     AC 04 B0 FD | 	call	#_retrocog_spin2_serial_start
03054                 | ' serial_start(midiin,midiout,mbaudrate)
03054     3D 00 00 FF 
03058     12 54 06 F6 | 	mov	local01, ##31250
0305c     1D 4A 06 F6 | 	mov	arg01, #29
03060     1E 4C 06 F6 | 	mov	arg02, #30
03064     3D 00 00 FF 
03068     12 4E 06 F6 | 	mov	arg03, ##31250
0306c     90 04 B0 FD | 	call	#_retrocog_spin2_serial_start
03070                 | ' 
03070                 | ' mb:=(-1)
03070     01 56 66 F6 | 	neg	local02, #1
03074                 | ' b:=(-1)
03074     01 58 66 F6 | 	neg	local03, #1
03078                 | ' 
03078                 | ' mousefront:=0
03078     00 5A 06 F6 | 	mov	local04, #0
0307c     08 0E 06 F1 | 	add	objptr, #8
03080     07 01 68 FC | 	wrlong	#0, objptr
03084                 | ' mousetail:=0
03084     04 0E 06 F1 | 	add	objptr, #4
03088     07 01 68 FC | 	wrlong	#0, objptr
0308c     0C 0E 86 F1 | 	sub	objptr, #12
03090                 | ' kbdfront:=0
03090     07 01 68 FC | 	wrlong	#0, objptr
03094                 | ' kbdtail:=0
03094     04 0E 06 F1 | 	add	objptr, #4
03098     07 01 68 FC | 	wrlong	#0, objptr
0309c                 | ' midifront:=0
0309c     0C 0E 06 F1 | 	add	objptr, #12
030a0     07 01 68 FC | 	wrlong	#0, objptr
030a4                 | ' miditail:=0
030a4     04 0E 06 F1 | 	add	objptr, #4
030a8     07 01 68 FC | 	wrlong	#0, objptr
030ac                 | ' long[$30]:=0
030ac     30 00 6C FC | 	wrlong	#0, #48
030b0                 | ' long[$34]:=0
030b0     34 00 6C FC | 	wrlong	#0, #52
030b4     14 0E 86 F1 | 	sub	objptr, #20
030b8                 | ' long[$38]:=0
030b8     38 00 6C FC | 	wrlong	#0, #56
030bc                 | ' 
030bc                 | ' repeat
030bc                 | LR__0088
030bc                 | ' 
030bc                 | '   repeat 
030bc                 | LR__0089
030bc                 | '     rr:=rxcheck(rxpin)
030bc     20 4A 06 F6 | 	mov	arg01, #32
030c0     B0 04 B0 FD | 	call	#_retrocog_spin2_rxcheck
030c4     12 5D 02 F6 | 	mov	local05, result1
030c8                 | '     mrr:=rxcheck(midiin)
030c8     1D 5A 06 F6 | 	mov	local04, #29
030cc     1D 4A 06 F6 | 	mov	arg01, #29
030d0     A0 04 B0 FD | 	call	#_retrocog_spin2_rxcheck
030d4     12 5F 02 F6 | 	mov	local06, result1
030d8     2F 61 02 F6 | 	mov	local07, local06
030dc     00 5C 5E F2 | 	cmps	local05, #0 wcz
030e0     08 00 90 3D |  if_ae	jmp	#LR__0090
030e4     00 60 5E F2 | 	cmps	local07, #0 wcz
030e8     D0 FF 9F CD |  if_b	jmp	#LR__0089
030ec                 | LR__0090
030ec                 | ' 
030ec                 | '   until rr>=0 || mrr>=0  
030ec                 | ' 
030ec                 | '   
030ec                 | ' ' midi. Must be >= $80 for a command
030ec                 | ' '$80-$8F - 3 bytes note off. note, velocity
030ec                 | ' '$90-$9F - 3 bytes note on, note, velocity
030ec                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
030ec                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
030ec                 | ' '$C0-$CF - 2 bytes program change
030ec                 | ' '$D0-$DF - 2 bytes mono aftertouch
030ec                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
030ec                 | ' '$F0-$FF - 1 byte
030ec                 | '   
030ec                 | ' 
030ec                 | '     
030ec                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
030ec     80 60 5E F2 | 	cmps	local07, #128 wcz
030f0     08 00 90 CD |  if_b	jmp	#LR__0091
030f4     BF 60 5E F2 | 	cmps	local07, #191 wcz
030f8     10 00 90 ED |  if_be	jmp	#LR__0092
030fc                 | LR__0091
030fc     E0 60 5E F2 | 	cmps	local07, #224 wcz
03100     1C 00 90 CD |  if_b	jmp	#LR__0093
03104     EF 60 5E F2 | 	cmps	local07, #239 wcz
03108     14 00 90 1D |  if_a	jmp	#LR__0093
0310c                 | LR__0092
0310c                 | '     mb:=2
0310c     02 56 06 F6 | 	mov	local02, #2
03110     30 5B 02 F6 | 	mov	local04, local07
03114     18 5A 66 F0 | 	shl	local04, #24
03118     2D 63 02 F6 | 	mov	local08, local04
0311c                 | '     midireport:=mrr<<24
0311c     31 65 02 F6 | 	mov	local09, local08
03120                 | LR__0093
03120                 | ' 
03120                 | '   if (mrr>=$C0) && (mrr<=$DF)
03120     C0 60 5E F2 | 	cmps	local07, #192 wcz
03124     1C 00 90 CD |  if_b	jmp	#LR__0094
03128     DF 60 5E F2 | 	cmps	local07, #223 wcz
0312c     14 00 90 1D |  if_a	jmp	#LR__0094
03130                 | '     mb:=1
03130     01 56 06 F6 | 	mov	local02, #1
03134     30 5B 02 F6 | 	mov	local04, local07
03138     18 5A 66 F0 | 	shl	local04, #24
0313c     2D 67 02 F6 | 	mov	local10, local04
03140                 | '     midireport:=mrr<<24
03140     33 65 02 F6 | 	mov	local09, local10
03144                 | LR__0094
03144                 | '   
03144                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
03144     F0 60 5E F2 | 	cmps	local07, #240 wcz
03148     10 00 90 CD |  if_b	jmp	#LR__0095
0314c                 | '     mb:=4
0314c     04 56 06 F6 | 	mov	local02, #4
03150     30 69 02 F6 | 	mov	local11, local07
03154     18 68 66 F0 | 	shl	local11, #24
03158                 | '     midireport:=mrr<<24  
03158     34 65 02 F6 | 	mov	local09, local11
0315c                 | LR__0095
0315c                 | '   
0315c                 | '   if (mrr<$80) && (mb>0)
0315c     80 60 5E F2 | 	cmps	local07, #128 wcz
03160     3C 00 90 3D |  if_ae	jmp	#LR__0097
03164     00 56 5E F2 | 	cmps	local02, #0 wcz
03168     34 00 90 ED |  if_be	jmp	#LR__0097
0316c                 | '     
0316c                 | '     mb--
0316c     2B 5B 02 F6 | 	mov	local04, local02
03170     2B 5F 02 F6 | 	mov	local06, local02
03174     01 5E 86 F1 | 	sub	local06, #1
03178     2F 57 02 F6 | 	mov	local02, local06
0317c                 | '     if mb<3
0317c     03 56 5E F2 | 	cmps	local02, #3 wcz
03180     1C 00 90 3D |  if_ae	jmp	#LR__0096
03184     2B 6B 02 F6 | 	mov	local12, local02
03188     03 6A 66 F0 | 	shl	local12, #3
0318c     30 6D 02 F6 | 	mov	local13, local07
03190     35 6D 62 F0 | 	shl	local13, local12
03194                 | '       midireport+=mrr<<(mb<<3)
03194     32 5B 02 F6 | 	mov	local04, local09
03198     36 5B 02 F1 | 	add	local04, local13
0319c     2D 65 02 F6 | 	mov	local09, local04
031a0                 | LR__0096
031a0                 | LR__0097
031a0                 | '   
031a0                 | '   if mb==0
031a0     00 56 0E F2 | 	cmp	local02, #0 wz
031a4     84 00 90 5D |  if_ne	jmp	#LR__0099
031a8                 | '     
031a8                 | '     if midifront<>((miditail-1) //32)
031a8     14 0E 06 F1 | 	add	objptr, #20
031ac     07 5F 02 FB | 	rdlong	local06, objptr
031b0     2F 5B 02 F6 | 	mov	local04, local06
031b4     01 5A 86 F1 | 	sub	local04, #1
031b8     2D 55 52 F6 | 	abs	local01, local04 wc
031bc     1F 54 06 F5 | 	and	local01, #31
031c0     2A 55 62 C6 |  if_b	neg	local01, local01
031c4     04 0E 86 F1 | 	sub	objptr, #4
031c8     07 6F 02 FB | 	rdlong	local14, objptr
031cc     10 0E 86 F1 | 	sub	objptr, #16
031d0     37 71 02 F6 | 	mov	local15, local14
031d4     2A 71 0A F2 | 	cmp	local15, local01 wz
031d8     4C 00 90 AD |  if_e	jmp	#LR__0098
031dc     10 0E 06 F1 | 	add	objptr, #16
031e0     07 71 02 FB | 	rdlong	local15, objptr
031e4     02 70 66 F0 | 	shl	local15, #2
031e8     01 00 00 FF 
031ec     88 0E 06 F1 | 	add	objptr, ##648
031f0     07 71 02 F1 | 	add	local15, objptr
031f4     38 73 02 F6 | 	mov	local16, local15
031f8                 | '       midibuf[midifront]:=midireport
031f8     39 65 62 FC | 	wrlong	local09, local16
031fc                 | '       midifront+=1
031fc     01 00 00 FF 
03200     88 0E 86 F1 | 	sub	objptr, ##648
03204     07 55 02 FB | 	rdlong	local01, objptr
03208     01 54 06 F1 | 	add	local01, #1
0320c     07 55 62 FC | 	wrlong	local01, objptr
03210                 | '       midifront:=midifront // 32
03210     2A 5F 02 F6 | 	mov	local06, local01
03214     2F 5B 52 F6 | 	abs	local04, local06 wc
03218     1F 5A 06 F5 | 	and	local04, #31
0321c     2D 5B 62 C6 |  if_b	neg	local04, local04
03220     07 5B 62 FC | 	wrlong	local04, objptr
03224     10 0E 86 F1 | 	sub	objptr, #16
03228                 | LR__0098
03228                 | '     mb:=(-1)
03228     01 56 66 F6 | 	neg	local02, #1
0322c                 | LR__0099
0322c                 | ' 
0322c                 | ' 'Keyboard and mouse
0322c                 | ' 
0322c                 | '   if (rr>=$80) && (rr<>$FF)
0322c     80 5C 5E F2 | 	cmps	local05, #128 wcz
03230     1C 00 90 CD |  if_b	jmp	#LR__0100
03234     FF 5C 0E F2 | 	cmp	local05, #255 wz
03238     14 00 90 AD |  if_e	jmp	#LR__0100
0323c                 | '     b:=3
0323c     03 58 06 F6 | 	mov	local03, #3
03240     2E 5B 02 F6 | 	mov	local04, local05
03244     18 5A 66 F0 | 	shl	local04, #24
03248     2D 75 02 F6 | 	mov	local17, local04
0324c                 | '     kbmreport:=rr<<24
0324c     3A 77 02 F6 | 	mov	local18, local17
03250                 | LR__0100
03250                 | '   
03250                 | '   if (rr<$80) && (b>0)
03250     80 5C 5E F2 | 	cmps	local05, #128 wcz
03254     30 00 90 3D |  if_ae	jmp	#LR__0101
03258     00 58 5E F2 | 	cmps	local03, #0 wcz
0325c     28 00 90 ED |  if_be	jmp	#LR__0101
03260                 | '     b--
03260     2C 5F 02 F6 | 	mov	local06, local03
03264     01 5E 86 F1 | 	sub	local06, #1
03268     2F 59 02 F6 | 	mov	local03, local06
0326c     2C 79 02 F6 | 	mov	local19, local03
03270     03 78 66 F0 | 	shl	local19, #3
03274     2E 7B 02 F6 | 	mov	local20, local05
03278     3C 7B 62 F0 | 	shl	local20, local19
0327c                 | '     kbmreport+=rr<<(b<<3)  
0327c     3B 5B 02 F6 | 	mov	local04, local18
03280     3D 5B 02 F1 | 	add	local04, local20
03284     2D 77 02 F6 | 	mov	local18, local04
03288                 | LR__0101
03288                 | '   
03288                 | '   if (rr==$FF)
03288     FF 5C 0E F2 | 	cmp	local05, #255 wz
0328c                 | '     b:=0   
0328c     00 58 06 A6 |  if_e	mov	local03, #0
03290                 | ' 
03290                 | '   if b==0  
03290     00 58 0E F2 | 	cmp	local03, #0 wz
03294     14 01 90 5D |  if_ne	jmp	#LR__0106
03298                 | '  
03298                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03298     00 00 40 FF 
0329c     00 76 1E F2 | 	cmp	local18, ##-2147483648 wcz
032a0     84 00 90 CD |  if_b	jmp	#LR__0103
032a4     00 80 43 FF 
032a8     00 76 1E F2 | 	cmp	local18, ##-2030043136 wcz
032ac     78 00 90 3D |  if_ae	jmp	#LR__0103
032b0                 | '       if mousefront<>((mousetail-1) //128)
032b0     0C 0E 06 F1 | 	add	objptr, #12
032b4     07 5F 02 FB | 	rdlong	local06, objptr
032b8     2F 5B 02 F6 | 	mov	local04, local06
032bc     01 5A 86 F1 | 	sub	local04, #1
032c0     2D 55 52 F6 | 	abs	local01, local04 wc
032c4     7F 54 06 F5 | 	and	local01, #127
032c8     2A 55 62 C6 |  if_b	neg	local01, local01
032cc     04 0E 86 F1 | 	sub	objptr, #4
032d0     07 6F 02 FB | 	rdlong	local14, objptr
032d4     08 0E 86 F1 | 	sub	objptr, #8
032d8     37 71 02 F6 | 	mov	local15, local14
032dc     2A 71 0A F2 | 	cmp	local15, local01 wz
032e0     44 00 90 AD |  if_e	jmp	#LR__0102
032e4     08 0E 06 F1 | 	add	objptr, #8
032e8     07 71 02 FB | 	rdlong	local15, objptr
032ec     02 70 66 F0 | 	shl	local15, #2
032f0     90 0E 06 F1 | 	add	objptr, #144
032f4     07 71 02 F1 | 	add	local15, objptr
032f8     38 7D 02 F6 | 	mov	local21, local15
032fc                 | '         mousebuf[mousefront]:=kbmreport
032fc     3E 77 62 FC | 	wrlong	local18, local21
03300                 | '         mousefront+=1
03300     90 0E 86 F1 | 	sub	objptr, #144
03304     07 55 02 FB | 	rdlong	local01, objptr
03308     01 54 06 F1 | 	add	local01, #1
0330c     07 55 62 FC | 	wrlong	local01, objptr
03310                 | '         mousefront:=mousefront // 128
03310     2A 5F 02 F6 | 	mov	local06, local01
03314     2F 5B 52 F6 | 	abs	local04, local06 wc
03318     7F 5A 06 F5 | 	and	local04, #127
0331c     2D 5B 62 C6 |  if_b	neg	local04, local04
03320     07 5B 62 FC | 	wrlong	local04, objptr
03324     08 0E 86 F1 | 	sub	objptr, #8
03328                 | LR__0102
03328                 | LR__0103
03328                 | '     b:=(-1)
03328     01 58 66 F6 | 	neg	local03, #1
0332c                 | ' 
0332c                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
0332c     00 80 43 FF 
03330     00 76 1E F2 | 	cmp	local18, ##-2030043136 wcz
03334     70 00 90 CD |  if_b	jmp	#LR__0105
03338     00 00 45 FF 
0333c     00 76 1E F2 | 	cmp	local18, ##-1979711488 wcz
03340     64 00 90 3D |  if_ae	jmp	#LR__0105
03344                 | '       if kbdfront<>((kbdtail-1) //32)
03344     04 0E 06 F1 | 	add	objptr, #4
03348     07 5F 02 FB | 	rdlong	local06, objptr
0334c     04 0E 86 F1 | 	sub	objptr, #4
03350     2F 5B 02 F6 | 	mov	local04, local06
03354     01 5A 86 F1 | 	sub	local04, #1
03358     2D 55 52 F6 | 	abs	local01, local04 wc
0335c     1F 54 06 F5 | 	and	local01, #31
03360     2A 55 62 C6 |  if_b	neg	local01, local01
03364     07 71 02 FB | 	rdlong	local15, objptr
03368     2A 71 0A F2 | 	cmp	local15, local01 wz
0336c     38 00 90 AD |  if_e	jmp	#LR__0104
03370     07 55 02 FB | 	rdlong	local01, objptr
03374     02 54 66 F0 | 	shl	local01, #2
03378     18 0E 06 F1 | 	add	objptr, #24
0337c     07 55 02 F1 | 	add	local01, objptr
03380     2A 7F 02 F6 | 	mov	local22, local01
03384                 | '         kbdbuf[kbdfront]:=kbmreport
03384     3F 77 62 FC | 	wrlong	local18, local22
03388                 | '         kbdfront+=1
03388     18 0E 86 F1 | 	sub	objptr, #24
0338c     07 5F 02 FB | 	rdlong	local06, objptr
03390     01 5E 06 F1 | 	add	local06, #1
03394     07 5F 62 FC | 	wrlong	local06, objptr
03398                 | '         kbdfront:=kbdfront // 32
03398     2F 5B 52 F6 | 	abs	local04, local06 wc
0339c     1F 5A 06 F5 | 	and	local04, #31
033a0     2D 5B 62 C6 |  if_b	neg	local04, local04
033a4     07 5B 62 FC | 	wrlong	local04, objptr
033a8                 | LR__0104
033a8                 | LR__0105
033a8                 | '     b:=(-1)
033a8     01 58 66 F6 | 	neg	local03, #1
033ac                 | LR__0106
033ac                 | ' 
033ac                 | ' 
033ac                 | '   if long[$30]==0
033ac     30 5A 0E FB | 	rdlong	local04, #48 wz
033b0     5C 00 90 5D |  if_ne	jmp	#LR__0108
033b4                 | '     if kbdfront<>kbdtail
033b4     07 5B 02 FB | 	rdlong	local04, objptr
033b8     04 0E 06 F1 | 	add	objptr, #4
033bc     07 55 02 FB | 	rdlong	local01, objptr
033c0     04 0E 86 F1 | 	sub	objptr, #4
033c4     2A 5B 0A F2 | 	cmp	local04, local01 wz
033c8     44 00 90 AD |  if_e	jmp	#LR__0107
033cc     04 0E 06 F1 | 	add	objptr, #4
033d0     07 81 02 FB | 	rdlong	local23, objptr
033d4     02 80 66 F0 | 	shl	local23, #2
033d8     14 0E 06 F1 | 	add	objptr, #20
033dc     07 81 02 F1 | 	add	local23, objptr
033e0                 | '       long[$30]:=kbdbuf[kbdtail]
033e0     40 5B 02 FB | 	rdlong	local04, local23
033e4     30 5A 66 FC | 	wrlong	local04, #48
033e8                 | '       kbdtail++
033e8     14 0E 86 F1 | 	sub	objptr, #20
033ec     07 71 02 FB | 	rdlong	local15, objptr
033f0     38 55 02 F6 | 	mov	local01, local15
033f4     01 54 06 F1 | 	add	local01, #1
033f8     07 55 62 FC | 	wrlong	local01, objptr
033fc                 | '       kbdtail:= kbdtail // 32
033fc     2A 5B 52 F6 | 	abs	local04, local01 wc
03400     1F 5A 06 F5 | 	and	local04, #31
03404     2D 5B 62 C6 |  if_b	neg	local04, local04
03408     07 5B 62 FC | 	wrlong	local04, objptr
0340c     04 0E 86 F1 | 	sub	objptr, #4
03410                 | LR__0107
03410                 | LR__0108
03410                 | '       
03410                 | '   if long[$34]==0
03410     34 5A 0E FB | 	rdlong	local04, #52 wz
03414     64 00 90 5D |  if_ne	jmp	#LR__0110
03418                 | '     if mousefront<>mousetail
03418     08 0E 06 F1 | 	add	objptr, #8
0341c     07 5B 02 FB | 	rdlong	local04, objptr
03420     04 0E 06 F1 | 	add	objptr, #4
03424     07 71 02 FB | 	rdlong	local15, objptr
03428     0C 0E 86 F1 | 	sub	objptr, #12
0342c     38 55 02 F6 | 	mov	local01, local15
03430     2A 5B 0A F2 | 	cmp	local04, local01 wz
03434     44 00 90 AD |  if_e	jmp	#LR__0109
03438     0C 0E 06 F1 | 	add	objptr, #12
0343c     07 83 02 FB | 	rdlong	local24, objptr
03440     02 82 66 F0 | 	shl	local24, #2
03444     8C 0E 06 F1 | 	add	objptr, #140
03448     07 83 02 F1 | 	add	local24, objptr
0344c                 | '       long[$34]:=mousebuf[mousetail]
0344c     41 5B 02 FB | 	rdlong	local04, local24
03450     34 5A 66 FC | 	wrlong	local04, #52
03454                 | '       mousetail++
03454     8C 0E 86 F1 | 	sub	objptr, #140
03458     07 71 02 FB | 	rdlong	local15, objptr
0345c     38 55 02 F6 | 	mov	local01, local15
03460     01 54 06 F1 | 	add	local01, #1
03464     07 55 62 FC | 	wrlong	local01, objptr
03468                 | '       mousetail:= mousetail // 128
03468     2A 5B 52 F6 | 	abs	local04, local01 wc
0346c     7F 5A 06 F5 | 	and	local04, #127
03470     2D 5B 62 C6 |  if_b	neg	local04, local04
03474     07 5B 62 FC | 	wrlong	local04, objptr
03478     0C 0E 86 F1 | 	sub	objptr, #12
0347c                 | LR__0109
0347c                 | LR__0110
0347c                 | ' 
0347c                 | '       
0347c                 | '   if long[$38]==0
0347c     38 5A 0E FB | 	rdlong	local04, #56 wz
03480     38 FC 9F 5D |  if_ne	jmp	#LR__0088
03484                 | '     if midifront<>miditail
03484     10 0E 06 F1 | 	add	objptr, #16
03488     07 5B 02 FB | 	rdlong	local04, objptr
0348c     04 0E 06 F1 | 	add	objptr, #4
03490     07 71 02 FB | 	rdlong	local15, objptr
03494     14 0E 86 F1 | 	sub	objptr, #20
03498     38 55 02 F6 | 	mov	local01, local15
0349c     2A 5B 0A F2 | 	cmp	local04, local01 wz
034a0     18 FC 9F AD |  if_e	jmp	#LR__0088
034a4     14 0E 06 F1 | 	add	objptr, #20
034a8     07 85 02 FB | 	rdlong	local25, objptr
034ac     02 84 66 F0 | 	shl	local25, #2
034b0     01 00 00 FF 
034b4     84 0E 06 F1 | 	add	objptr, ##644
034b8     07 85 02 F1 | 	add	local25, objptr
034bc                 | '       long[$38]:=midibuf[miditail]
034bc     42 5B 02 FB | 	rdlong	local04, local25
034c0     38 5A 66 FC | 	wrlong	local04, #56
034c4                 | '       miditail++
034c4     01 00 00 FF 
034c8     84 0E 86 F1 | 	sub	objptr, ##644
034cc     07 71 02 FB | 	rdlong	local15, objptr
034d0     38 55 02 F6 | 	mov	local01, local15
034d4     01 54 06 F1 | 	add	local01, #1
034d8     07 55 62 FC | 	wrlong	local01, objptr
034dc                 | '       miditail:= miditail // 32
034dc     2A 5B 52 F6 | 	abs	local04, local01 wc
034e0     1F 5A 06 F5 | 	and	local04, #31
034e4     2D 5B 62 C6 |  if_b	neg	local04, local04
034e8     07 5B 62 FC | 	wrlong	local04, objptr
034ec     14 0E 86 F1 | 	sub	objptr, #20
034f0     C8 FB 9F FD | 	jmp	#LR__0088
034f4     AF F0 03 F6 | 	mov	ptra, fp
034f8     BF 00 A0 FD | 	call	#popregs_
034fc                 | _retrocog_spin2_serialcog_ret
034fc     2D 00 64 FD | 	ret
03500                 | 
03500                 | '       
03500                 | ' 
03500                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03500                 | ' 
03500                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03500                 | _retrocog_spin2_serial_start
03500     04 5A 05 F6 | 	mov	COUNT_, #4
03504     B0 00 A0 FD | 	call	#pushregs_
03508     25 55 02 F6 | 	mov	local01, arg01
0350c     26 57 02 F6 | 	mov	local02, arg02
03510                 | ' 
03510                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03510     14 4A 06 FB | 	rdlong	arg01, #20
03514     10 4C C6 F9 | 	decod	arg02, #16
03518     26 4B 02 FD | 	qmul	arg01, arg02
0351c     19 58 62 FD | 	getqy	local03
03520     18 5A 62 FD | 	getqx	local04
03524     28 58 62 FD | 	setq	local03
03528     27 5B 12 FD | 	qdiv	local04, arg03
0352c     18 24 62 FD | 	getqx	result1
03530     12 4F 02 F6 | 	mov	arg03, result1
03534     FE FF 7F FF 
03538     00 4E 06 F5 | 	and	arg03, ##-1024
0353c                 | ' bitmode |= 7                                                  ' set bits (8)
0353c     07 4E 46 F5 | 	or	arg03, #7
03540                 | ' pinstart(rxpin,P_ASYNC_RX,bitmode,0)
03540     40 54 62 FD | 	dirl	local01
03544     2A 7D 08 FC | 	wrpin	#62, local01
03548     2A 4F 12 FC | 	wxpin	arg03, local01
0354c     2A 01 28 FC | 	wypin	#0, local01
03550     41 54 62 FD | 	dirh	local01
03554                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03554     40 56 62 FD | 	dirl	local02
03558     2B F9 08 FC | 	wrpin	#124, local02
0355c     2B 4F 12 FC | 	wxpin	arg03, local02
03560     2B 01 28 FC | 	wypin	#0, local02
03564     41 56 62 FD | 	dirh	local02
03568     AF F0 03 F6 | 	mov	ptra, fp
0356c     BF 00 A0 FD | 	call	#popregs_
03570                 | _retrocog_spin2_serial_start_ret
03570     2D 00 64 FD | 	ret
03574                 | 
03574                 | ' 
03574                 | ' 
03574                 | ' pub rxcheck(pin) : rxbyte | check
03574                 | _retrocog_spin2_rxcheck
03574     04 5A 05 F6 | 	mov	COUNT_, #4
03578     B0 00 A0 FD | 	call	#pushregs_
0357c     25 55 02 F6 | 	mov	local01, arg01
03580                 | ' 
03580                 | ' '' Check for serial input
03580                 | ' '' -- returns -1 if nothing available
03580                 | ' 
03580                 | '   rxbyte := -1
03580     01 56 66 F6 | 	neg	local02, #1
03584                 | '   check := pinr(pin)
03584     2A 4B 02 F6 | 	mov	arg01, local01
03588     20 4A CE F7 | 	test	arg01, #32 wz
0358c     FF 59 02 56 |  if_ne	mov	local03, inb
03590     FE 59 02 A6 |  if_e	mov	local03, ina
03594     25 59 42 F0 | 	shr	local03, arg01
03598     06 4A 46 F0 | 	shr	arg01, #6
0359c     25 59 42 F7 | 	zerox	local03, arg01
035a0     2C 5B 0A F6 | 	mov	local04, local03 wz
035a4                 | '   if (check)
035a4                 | '     rxbyte := rdpin(pin) >> 24
035a4     00 56 06 56 |  if_ne	mov	local02, #0
035a8     2A 57 8A 5A |  if_ne	rdpin	local02, local01
035ac     18 56 46 50 |  if_ne	shr	local02, #24
035b0     2B 25 02 F6 | 	mov	result1, local02
035b4     AF F0 03 F6 | 	mov	ptra, fp
035b8     BF 00 A0 FD | 	call	#popregs_
035bc                 | _retrocog_spin2_rxcheck_ret
035bc     2D 00 64 FD | 	ret
035c0                 | hubexit
035c0     81 00 80 FD | 	jmp	#cogexit
035c4                 | 
035c4                 | __system___setbaud
035c4     14 08 07 FB | 	rdlong	muldiva_, #20
035c8     25 0B 03 F6 | 	mov	muldivb_, arg01
035cc     D0 00 A0 FD | 	call	#divide_
035d0     40 7C 64 FD | 	dirl	#62
035d4     40 7E 64 FD | 	dirl	#63
035d8     0A 0B 63 FC | 	wrlong	muldivb_, ptr___system__dat__
035dc     10 0A 67 F0 | 	shl	muldivb_, #16
035e0     07 4C 06 F6 | 	mov	arg02, #7
035e4     85 4D 02 F1 | 	add	arg02, muldivb_
035e8     3E F8 0C FC | 	wrpin	#124, #62
035ec     3E 4C 16 FC | 	wxpin	arg02, #62
035f0     3F 7C 0C FC | 	wrpin	#62, #63
035f4     14 4C 06 F1 | 	add	arg02, #20
035f8     3F 4C 16 FC | 	wxpin	arg02, #63
035fc     41 7C 64 FD | 	dirh	#62
03600     41 7E 64 FD | 	dirh	#63
03604                 | __system___setbaud_ret
03604     2D 00 64 FD | 	ret
03608                 | 
03608                 | __system___txraw
03608     02 5A 05 F6 | 	mov	COUNT_, #2
0360c     B0 00 A0 FD | 	call	#pushregs_
03610     25 55 02 F6 | 	mov	local01, arg01
03614     0A 57 0A FB | 	rdlong	local02, ptr___system__dat__ wz
03618     0C 00 90 5D |  if_ne	jmp	#LR__0111
0361c     C2 01 00 FF 
03620     00 4A 06 F6 | 	mov	arg01, ##230400
03624     9C FF BF FD | 	call	#__system___setbaud
03628                 | LR__0111
03628     3E 54 26 FC | 	wypin	local01, #62
0362c     1F 02 64 FD | 	waitx	#1
03630     D4 C9 9F FE | 	loc	pa,	#(@LR__0113-@LR__0112)
03634     93 00 A0 FD | 	call	#FCACHE_LOAD_
03638                 | LR__0112
03638     40 7C 74 FD | 	testp	#62 wc
0363c     F8 FF 9F 3D |  if_nc	jmp	#LR__0112
03640                 | LR__0113
03640     01 24 06 F6 | 	mov	result1, #1
03644     AF F0 03 F6 | 	mov	ptra, fp
03648     BF 00 A0 FD | 	call	#popregs_
0364c                 | __system___txraw_ret
0364c     2D 00 64 FD | 	ret
03650                 | 
03650                 | __system___rxraw
03650     0D 5A 05 F6 | 	mov	COUNT_, #13
03654     B0 00 A0 FD | 	call	#pushregs_
03658     25 55 02 F6 | 	mov	local01, arg01
0365c     0A 57 0A FB | 	rdlong	local02, ptr___system__dat__ wz
03660     0C 00 90 5D |  if_ne	jmp	#LR__0114
03664     C2 01 00 FF 
03668     00 4A 06 F6 | 	mov	arg01, ##230400
0366c     54 FF BF FD | 	call	#__system___setbaud
03670                 | LR__0114
03670     00 54 0E F2 | 	cmp	local01, #0 wz
03674     18 00 90 AD |  if_e	jmp	#LR__0115
03678     14 58 06 FB | 	rdlong	local03, #20
0367c     0A 58 46 F0 | 	shr	local03, #10
03680     2C 55 02 FD | 	qmul	local01, local03
03684     18 5A 62 FD | 	getqx	local04
03688     1A 5C 62 FD | 	getct	local05
0368c     2D 5D 02 F1 | 	add	local05, local04
03690                 | LR__0115
03690     01 5E 66 F6 | 	neg	local06, #1
03694     00 60 06 F6 | 	mov	local07, #0
03698     04 14 06 F1 | 	add	ptr___system__dat__, #4
0369c     0A 63 02 FB | 	rdlong	local08, ptr___system__dat__
036a0     04 14 86 F1 | 	sub	ptr___system__dat__, #4
036a4                 | LR__0116
036a4     08 62 16 F4 | 	testb	local08, #8 wc
036a8     09 62 76 F4 | 	testbn	local08, #9 andc
036ac     0A 62 46 F0 | 	shr	local08, #10
036b0     01 60 06 C6 |  if_b	mov	local07, #1
036b4     10 00 90 CD |  if_b	jmp	#LR__0117
036b8     40 7E 6C FD | 	testp	#63 wz
036bc     01 60 06 A6 |  if_e	mov	local07, #1
036c0     3F 62 8E AA |  if_e	rdpin	local08, #63
036c4     04 62 46 A0 |  if_e	shr	local08, #4
036c8                 | LR__0117
036c8     00 56 06 F6 | 	mov	local02, #0
036cc     00 60 0E F2 | 	cmp	local07, #0 wz
036d0     01 56 66 56 |  if_ne	neg	local02, #1
036d4     00 64 06 F6 | 	mov	local09, #0
036d8     00 66 06 F6 | 	mov	local10, #0
036dc     00 54 0E F2 | 	cmp	local01, #0 wz
036e0     01 66 66 56 |  if_ne	neg	local10, #1
036e4     00 68 06 F6 | 	mov	local11, #0
036e8     00 6A 06 F6 | 	mov	local12, #0
036ec     1A 6C 62 FD | 	getct	local13
036f0     2E 6D 82 F1 | 	sub	local13, local05
036f4     00 6C 5E F2 | 	cmps	local13, #0 wcz
036f8     01 6A 66 C6 |  if_b	neg	local12, #1
036fc     00 6A 0E F2 | 	cmp	local12, #0 wz
03700     01 68 66 56 |  if_ne	neg	local11, #1
03704     34 67 CA F7 | 	test	local10, local11 wz
03708     01 64 66 56 |  if_ne	neg	local09, #1
0370c     32 57 4A F5 | 	or	local02, local09 wz
03710     90 FF 9F AD |  if_e	jmp	#LR__0116
03714     00 60 0E F2 | 	cmp	local07, #0 wz
03718     31 5F 02 56 |  if_ne	mov	local06, local08
0371c     FF 5E 06 55 |  if_ne	and	local06, #255
03720     04 14 06 F1 | 	add	ptr___system__dat__, #4
03724     0A 63 62 FC | 	wrlong	local08, ptr___system__dat__
03728     04 14 86 F1 | 	sub	ptr___system__dat__, #4
0372c     2F 25 02 F6 | 	mov	result1, local06
03730     AF F0 03 F6 | 	mov	ptra, fp
03734     BF 00 A0 FD | 	call	#popregs_
03738                 | __system___rxraw_ret
03738     2D 00 64 FD | 	ret
0373c                 | 
0373c                 | __system____builtin_memmove
0373c     25 2B 02 F6 | 	mov	_var01, arg01
03740     26 4B 5A F2 | 	cmps	arg01, arg02 wcz
03744     50 00 90 3D |  if_ae	jmp	#LR__0125
03748     D4 C8 9F FE | 	loc	pa,	#(@LR__0119-@LR__0118)
0374c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03750                 | LR__0118
03750     03 4E 5E F2 | 	cmps	arg03, #3 wcz
03754     18 00 90 ED |  if_be	jmp	#LR__0120
03758     26 2D 02 FB | 	rdlong	_var02, arg02
0375c     25 2D 62 FC | 	wrlong	_var02, arg01
03760     04 4A 06 F1 | 	add	arg01, #4
03764     04 4C 06 F1 | 	add	arg02, #4
03768     04 4E 86 F1 | 	sub	arg03, #4
0376c     E0 FF 9F FD | 	jmp	#LR__0118
03770                 | LR__0119
03770                 | LR__0120
03770     27 2F 0A F6 | 	mov	_var03, arg03 wz
03774     4C 00 90 AD |  if_e	jmp	#LR__0131
03778     98 C8 9F FE | 	loc	pa,	#(@LR__0123-@LR__0121)
0377c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03780                 | LR__0121
03780     17 09 D8 FC | 	rep	@LR__0124, _var03
03784                 | LR__0122
03784     26 2D C2 FA | 	rdbyte	_var02, arg02
03788     25 2D 42 FC | 	wrbyte	_var02, arg01
0378c     01 4A 06 F1 | 	add	arg01, #1
03790     01 4C 06 F1 | 	add	arg02, #1
03794                 | LR__0123
03794                 | LR__0124
03794     2C 00 90 FD | 	jmp	#LR__0131
03798                 | LR__0125
03798     27 4B 02 F1 | 	add	arg01, arg03
0379c     27 4D 02 F1 | 	add	arg02, arg03
037a0     27 31 0A F6 | 	mov	_var04, arg03 wz
037a4     1C 00 90 AD |  if_e	jmp	#LR__0130
037a8     68 C8 9F FE | 	loc	pa,	#(@LR__0128-@LR__0126)
037ac     93 00 A0 FD | 	call	#FCACHE_LOAD_
037b0                 | LR__0126
037b0     18 09 D8 FC | 	rep	@LR__0129, _var04
037b4                 | LR__0127
037b4     01 4A 86 F1 | 	sub	arg01, #1
037b8     01 4C 86 F1 | 	sub	arg02, #1
037bc     26 2D C2 FA | 	rdbyte	_var02, arg02
037c0     25 2D 42 FC | 	wrbyte	_var02, arg01
037c4                 | LR__0128
037c4                 | LR__0129
037c4                 | LR__0130
037c4                 | LR__0131
037c4     15 25 02 F6 | 	mov	result1, _var01
037c8                 | __system____builtin_memmove_ret
037c8     2D 00 64 FD | 	ret
037cc                 | 
037cc                 | __system__longmove
037cc     25 2B 02 F6 | 	mov	_var01, arg01
037d0     26 4B 5A F2 | 	cmps	arg01, arg02 wcz
037d4     28 00 90 3D |  if_ae	jmp	#LR__0136
037d8     27 2D 0A F6 | 	mov	_var02, arg03 wz
037dc     54 00 90 AD |  if_e	jmp	#LR__0142
037e0     30 C8 9F FE | 	loc	pa,	#(@LR__0134-@LR__0132)
037e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
037e8                 | LR__0132
037e8     16 09 D8 FC | 	rep	@LR__0135, _var02
037ec                 | LR__0133
037ec     26 2F 02 FB | 	rdlong	_var03, arg02
037f0     25 2F 62 FC | 	wrlong	_var03, arg01
037f4     04 4A 06 F1 | 	add	arg01, #4
037f8     04 4C 06 F1 | 	add	arg02, #4
037fc                 | LR__0134
037fc                 | LR__0135
037fc     34 00 90 FD | 	jmp	#LR__0142
03800                 | LR__0136
03800     27 31 02 F6 | 	mov	_var04, arg03
03804     02 30 66 F0 | 	shl	_var04, #2
03808     18 4B 02 F1 | 	add	arg01, _var04
0380c     18 4D 02 F1 | 	add	arg02, _var04
03810     27 33 0A F6 | 	mov	_var05, arg03 wz
03814     1C 00 90 AD |  if_e	jmp	#LR__0141
03818     F8 C7 9F FE | 	loc	pa,	#(@LR__0139-@LR__0137)
0381c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03820                 | LR__0137
03820     19 09 D8 FC | 	rep	@LR__0140, _var05
03824                 | LR__0138
03824     04 4A 86 F1 | 	sub	arg01, #4
03828     04 4C 86 F1 | 	sub	arg02, #4
0382c     26 2F 02 FB | 	rdlong	_var03, arg02
03830     25 2F 62 FC | 	wrlong	_var03, arg01
03834                 | LR__0139
03834                 | LR__0140
03834                 | LR__0141
03834                 | LR__0142
03834     15 25 02 F6 | 	mov	result1, _var01
03838                 | __system__longmove_ret
03838     2D 00 64 FD | 	ret
0383c                 | 
0383c                 | __system____topofstack
0383c     00 5A 05 F6 | 	mov	COUNT_, #0
03840     B0 00 A0 FD | 	call	#pushregs_
03844     0C F0 07 F1 | 	add	ptra, #12
03848     04 5E 05 F1 | 	add	fp, #4
0384c     AF 4A 62 FC | 	wrlong	arg01, fp
03850     AF 24 02 F6 | 	mov	result1, fp
03854     04 5E 85 F1 | 	sub	fp, #4
03858     AF F0 03 F6 | 	mov	ptra, fp
0385c     BF 00 A0 FD | 	call	#popregs_
03860                 | __system____topofstack_ret
03860     2D 00 64 FD | 	ret
03864                 | 
03864                 | __system___make_methodptr
03864     04 5A 05 F6 | 	mov	COUNT_, #4
03868     B0 00 A0 FD | 	call	#pushregs_
0386c     25 55 02 F6 | 	mov	local01, arg01
03870     26 57 02 F6 | 	mov	local02, arg02
03874     08 4A 06 F6 | 	mov	arg01, #8
03878     E8 0A B0 FD | 	call	#__system___gc_alloc_managed
0387c     12 59 0A F6 | 	mov	local03, result1 wz
03880     10 00 90 AD |  if_e	jmp	#LR__0143
03884     2C 55 62 FC | 	wrlong	local01, local03
03888     2C 5B 02 F6 | 	mov	local04, local03
0388c     04 5A 06 F1 | 	add	local04, #4
03890     2D 57 62 FC | 	wrlong	local02, local04
03894                 | LR__0143
03894     2C 25 02 F6 | 	mov	result1, local03
03898     AF F0 03 F6 | 	mov	ptra, fp
0389c     BF 00 A0 FD | 	call	#popregs_
038a0                 | __system___make_methodptr_ret
038a0     2D 00 64 FD | 	ret
038a4                 | 
038a4                 | __system___lockmem
038a4     02 5A 05 F6 | 	mov	COUNT_, #2
038a8     B0 00 A0 FD | 	call	#pushregs_
038ac     01 24 62 FD | 	cogid	result1
038b0     12 55 02 F6 | 	mov	local01, result1
038b4     00 55 06 F1 | 	add	local01, #256
038b8                 | LR__0144
038b8     25 57 0A FB | 	rdlong	local02, arg01 wz
038bc     25 55 62 AC |  if_e	wrlong	local01, arg01
038c0     25 57 02 AB |  if_e	rdlong	local02, arg01
038c4     25 57 02 AB |  if_e	rdlong	local02, arg01
038c8     2A 57 0A F2 | 	cmp	local02, local01 wz
038cc     E8 FF 9F 5D |  if_ne	jmp	#LR__0144
038d0     AF F0 03 F6 | 	mov	ptra, fp
038d4     BF 00 A0 FD | 	call	#popregs_
038d8                 | __system___lockmem_ret
038d8     2D 00 64 FD | 	ret
038dc                 | 
038dc                 | __system___tx
038dc     02 5A 05 F6 | 	mov	COUNT_, #2
038e0     B0 00 A0 FD | 	call	#pushregs_
038e4     25 55 02 F6 | 	mov	local01, arg01
038e8     0A 54 0E F2 | 	cmp	local01, #10 wz
038ec     20 00 90 5D |  if_ne	jmp	#LR__0145
038f0     08 14 06 F1 | 	add	ptr___system__dat__, #8
038f4     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
038f8     08 14 86 F1 | 	sub	ptr___system__dat__, #8
038fc     02 56 CE F7 | 	test	local02, #2 wz
03900     0C 00 90 AD |  if_e	jmp	#LR__0145
03904     0D 56 06 F6 | 	mov	local02, #13
03908     0D 4A 06 F6 | 	mov	arg01, #13
0390c     F8 FC BF FD | 	call	#__system___txraw
03910                 | LR__0145
03910     2A 4B 02 F6 | 	mov	arg01, local01
03914     F0 FC BF FD | 	call	#__system___txraw
03918     AF F0 03 F6 | 	mov	ptra, fp
0391c     BF 00 A0 FD | 	call	#popregs_
03920                 | __system___tx_ret
03920     2D 00 64 FD | 	ret
03924                 | 
03924                 | __system___rx
03924     02 5A 05 F6 | 	mov	COUNT_, #2
03928     B0 00 A0 FD | 	call	#pushregs_
0392c                 | LR__0146
0392c     00 4A 06 F6 | 	mov	arg01, #0
03930     1C FD BF FD | 	call	#__system___rxraw
03934     12 55 02 F6 | 	mov	local01, result1
03938     FF FF 7F FF 
0393c     FF 55 0E F2 | 	cmp	local01, ##-1 wz
03940     E8 FF 9F AD |  if_e	jmp	#LR__0146
03944     0D 54 0E F2 | 	cmp	local01, #13 wz
03948     14 00 90 5D |  if_ne	jmp	#LR__0147
0394c     08 14 06 F1 | 	add	ptr___system__dat__, #8
03950     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
03954     08 14 86 F1 | 	sub	ptr___system__dat__, #8
03958     02 56 CE F7 | 	test	local02, #2 wz
0395c     0A 54 06 56 |  if_ne	mov	local01, #10
03960                 | LR__0147
03960     08 14 06 F1 | 	add	ptr___system__dat__, #8
03964     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
03968     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0396c     01 56 CE F7 | 	test	local02, #1 wz
03970     1C 00 90 AD |  if_e	jmp	#LR__0150
03974     7F 54 0E F2 | 	cmp	local01, #127 wz
03978     0C 00 90 5D |  if_ne	jmp	#LR__0148
0397c     08 4A 06 F6 | 	mov	arg01, #8
03980     58 FF BF FD | 	call	#__system___tx
03984     08 00 90 FD | 	jmp	#LR__0149
03988                 | LR__0148
03988     2A 4B 02 F6 | 	mov	arg01, local01
0398c     4C FF BF FD | 	call	#__system___tx
03990                 | LR__0149
03990                 | LR__0150
03990     2A 25 02 F6 | 	mov	result1, local01
03994     AF F0 03 F6 | 	mov	ptra, fp
03998     BF 00 A0 FD | 	call	#popregs_
0399c                 | __system___rx_ret
0399c     2D 00 64 FD | 	ret
039a0                 | 
039a0                 | __system___waitms
039a0     03 5A 05 F6 | 	mov	COUNT_, #3
039a4     B0 00 A0 FD | 	call	#pushregs_
039a8     25 55 02 F6 | 	mov	local01, arg01
039ac     14 56 06 FB | 	rdlong	local02, #20
039b0     64 C6 9F FE | 	loc	pa,	#(@LR__0152-@LR__0151)
039b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
039b8                 | LR__0151
039b8     01 00 00 FF 
039bc     E8 55 5E F2 | 	cmps	local01, ##1000 wcz
039c0     1F 56 62 1D |  if_a	waitx	local02
039c4     01 00 00 1F 
039c8     E8 55 86 11 |  if_a	sub	local01, ##1000
039cc     E8 FF 9F 1D |  if_a	jmp	#LR__0151
039d0                 | LR__0152
039d0     0C 14 06 F1 | 	add	ptr___system__dat__, #12
039d4     0A 59 0A FB | 	rdlong	local03, ptr___system__dat__ wz
039d8     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
039dc     20 00 90 5D |  if_ne	jmp	#LR__0153
039e0     2B 09 03 F6 | 	mov	muldiva_, local02
039e4     01 00 00 FF 
039e8     E8 0B 07 F6 | 	mov	muldivb_, ##1000
039ec     CC 00 A0 FD | 	call	#unsdivide_
039f0     85 59 02 F6 | 	mov	local03, muldivb_
039f4     0C 14 06 F1 | 	add	ptr___system__dat__, #12
039f8     0A 0B 63 FC | 	wrlong	muldivb_, ptr___system__dat__
039fc     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
03a00                 | LR__0153
03a00     00 54 5E F2 | 	cmps	local01, #0 wcz
03a04     2C 55 02 1D |  if_a	qmul	local01, local03
03a08     18 4A 62 1D |  if_a	getqx	arg01
03a0c     1F 4A 62 1D |  if_a	waitx	arg01
03a10     AF F0 03 F6 | 	mov	ptra, fp
03a14     BF 00 A0 FD | 	call	#popregs_
03a18                 | __system___waitms_ret
03a18     2D 00 64 FD | 	ret
03a1c                 | 
03a1c                 | __system___basic_open
03a1c     05 5A 05 F6 | 	mov	COUNT_, #5
03a20     B0 00 A0 FD | 	call	#pushregs_
03a24     26 55 02 F6 | 	mov	local01, arg02
03a28     27 57 02 F6 | 	mov	local02, arg03
03a2c     28 59 02 F6 | 	mov	local03, arg04
03a30     34 11 B0 FD | 	call	#__system____getftab
03a34     12 5B 0A F6 | 	mov	local04, result1 wz
03a38     18 00 90 5D |  if_ne	jmp	#LR__0154
03a3c     03 4B 02 F6 | 	mov	arg01, abortchain
03a40     0C 4C 06 F6 | 	mov	arg02, #12
03a44     01 4E 06 F6 | 	mov	arg03, #1
03a48     F0 00 A0 FD | 	call	#__longjmp
03a4c     01 24 66 F6 | 	neg	result1, #1
03a50     70 00 90 FD | 	jmp	#LR__0158
03a54                 | LR__0154
03a54     00 54 0E F2 | 	cmp	local01, #0 wz
03a58     48 00 90 AD |  if_e	jmp	#LR__0156
03a5c     04 4A 06 F6 | 	mov	arg01, #4
03a60     00 09 B0 FD | 	call	#__system___gc_alloc_managed
03a64     12 5D 0A F6 | 	mov	local05, result1 wz
03a68     18 00 90 5D |  if_ne	jmp	#LR__0155
03a6c     03 4B 02 F6 | 	mov	arg01, abortchain
03a70     07 4C 06 F6 | 	mov	arg02, #7
03a74     01 4E 06 F6 | 	mov	arg03, #1
03a78     F0 00 A0 FD | 	call	#__longjmp
03a7c     01 24 66 F6 | 	neg	result1, #1
03a80     40 00 90 FD | 	jmp	#LR__0158
03a84                 | LR__0155
03a84     2E 55 62 FC | 	wrlong	local01, local05
03a88     08 4D 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
03a8c     2E 4B 02 F6 | 	mov	arg01, local05
03a90     D0 FD BF FD | 	call	#__system___make_methodptr
03a94     18 5A 06 F1 | 	add	local04, #24
03a98     2D 25 62 FC | 	wrlong	result1, local04
03a9c     18 5A 86 F1 | 	sub	local04, #24
03aa0     0C 00 90 FD | 	jmp	#LR__0157
03aa4                 | LR__0156
03aa4     18 5A 06 F1 | 	add	local04, #24
03aa8     2D 55 62 FC | 	wrlong	local01, local04
03aac     18 5A 86 F1 | 	sub	local04, #24
03ab0                 | LR__0157
03ab0     1C 5A 06 F1 | 	add	local04, #28
03ab4     2D 57 62 FC | 	wrlong	local02, local04
03ab8     04 5A 06 F1 | 	add	local04, #4
03abc     2D 59 62 FC | 	wrlong	local03, local04
03ac0     00 24 06 F6 | 	mov	result1, #0
03ac4                 | LR__0158
03ac4     AF F0 03 F6 | 	mov	ptra, fp
03ac8     BF 00 A0 FD | 	call	#popregs_
03acc                 | __system___basic_open_ret
03acc     2D 00 64 FD | 	ret
03ad0                 | 
03ad0                 | __system___basic_print_char
03ad0     05 5A 05 F6 | 	mov	COUNT_, #5
03ad4     B0 00 A0 FD | 	call	#pushregs_
03ad8     26 55 02 F6 | 	mov	local01, arg02
03adc     4C 12 B0 FD | 	call	#__system___gettxfunc
03ae0     12 57 0A F6 | 	mov	local02, result1 wz
03ae4     00 24 06 A6 |  if_e	mov	result1, #0
03ae8     24 00 90 AD |  if_e	jmp	#LR__0159
03aec     2B 59 02 FB | 	rdlong	local03, local02
03af0     04 56 06 F1 | 	add	local02, #4
03af4     2B 5B 02 FB | 	rdlong	local04, local02
03af8     2A 4B 02 F6 | 	mov	arg01, local01
03afc     07 5D 02 F6 | 	mov	local05, objptr
03b00     2C 0F 02 F6 | 	mov	objptr, local03
03b04     2D 5A 62 FD | 	call	local04
03b08     2E 0F 02 F6 | 	mov	objptr, local05
03b0c     01 24 06 F6 | 	mov	result1, #1
03b10                 | LR__0159
03b10     AF F0 03 F6 | 	mov	ptra, fp
03b14     BF 00 A0 FD | 	call	#popregs_
03b18                 | __system___basic_print_char_ret
03b18     2D 00 64 FD | 	ret
03b1c                 | 
03b1c                 | __system___basic_print_string
03b1c     03 5A 05 F6 | 	mov	COUNT_, #3
03b20     B0 00 A0 FD | 	call	#pushregs_
03b24     26 55 02 F6 | 	mov	local01, arg02
03b28     27 57 02 F6 | 	mov	local02, arg03
03b2c     FC 11 B0 FD | 	call	#__system___gettxfunc
03b30     12 59 0A F6 | 	mov	local03, result1 wz
03b34     00 24 06 A6 |  if_e	mov	result1, #0
03b38     1C 00 90 AD |  if_e	jmp	#LR__0160
03b3c     00 54 0E F2 | 	cmp	local01, #0 wz
03b40     00 24 06 A6 |  if_e	mov	result1, #0
03b44     10 00 90 AD |  if_e	jmp	#LR__0160
03b48     2C 4B 02 F6 | 	mov	arg01, local03
03b4c     2B 4D 02 F6 | 	mov	arg02, local02
03b50     2A 4F 02 F6 | 	mov	arg03, local01
03b54     F8 00 B0 FD | 	call	#__system___fmtstr
03b58                 | LR__0160
03b58     AF F0 03 F6 | 	mov	ptra, fp
03b5c     BF 00 A0 FD | 	call	#popregs_
03b60                 | __system___basic_print_string_ret
03b60     2D 00 64 FD | 	ret
03b64                 | 
03b64                 | __system___basic_print_integer
03b64     04 5A 05 F6 | 	mov	COUNT_, #4
03b68     B0 00 A0 FD | 	call	#pushregs_
03b6c     26 55 02 F6 | 	mov	local01, arg02
03b70     27 57 02 F6 | 	mov	local02, arg03
03b74     28 59 02 F6 | 	mov	local03, arg04
03b78     B0 11 B0 FD | 	call	#__system___gettxfunc
03b7c     12 5B 0A F6 | 	mov	local04, result1 wz
03b80     00 24 06 A6 |  if_e	mov	result1, #0
03b84     14 00 90 AD |  if_e	jmp	#LR__0161
03b88     2D 4B 02 F6 | 	mov	arg01, local04
03b8c     2B 4D 02 F6 | 	mov	arg02, local02
03b90     2A 4F 02 F6 | 	mov	arg03, local01
03b94     2C 51 02 F6 | 	mov	arg04, local03
03b98     A8 01 B0 FD | 	call	#__system___fmtnum
03b9c                 | LR__0161
03b9c     AF F0 03 F6 | 	mov	ptra, fp
03ba0     BF 00 A0 FD | 	call	#popregs_
03ba4                 | __system___basic_print_integer_ret
03ba4     2D 00 64 FD | 	ret
03ba8                 | 
03ba8                 | __system___basic_print_unsigned
03ba8     04 5A 05 F6 | 	mov	COUNT_, #4
03bac     B0 00 A0 FD | 	call	#pushregs_
03bb0     26 55 02 F6 | 	mov	local01, arg02
03bb4     27 57 02 F6 | 	mov	local02, arg03
03bb8     28 59 02 F6 | 	mov	local03, arg04
03bbc     6C 11 B0 FD | 	call	#__system___gettxfunc
03bc0     12 5B 0A F6 | 	mov	local04, result1 wz
03bc4     00 24 06 A6 |  if_e	mov	result1, #0
03bc8     18 00 90 AD |  if_e	jmp	#LR__0162
03bcc     3A 56 26 F4 | 	bith	local02, #58
03bd0     2D 4B 02 F6 | 	mov	arg01, local04
03bd4     2B 4D 02 F6 | 	mov	arg02, local02
03bd8     2A 4F 02 F6 | 	mov	arg03, local01
03bdc     2C 51 02 F6 | 	mov	arg04, local03
03be0     60 01 B0 FD | 	call	#__system___fmtnum
03be4                 | LR__0162
03be4     AF F0 03 F6 | 	mov	ptra, fp
03be8     BF 00 A0 FD | 	call	#popregs_
03bec                 | __system___basic_print_unsigned_ret
03bec     2D 00 64 FD | 	ret
03bf0                 | 
03bf0                 | __system___fmtchar
03bf0     00 5A 05 F6 | 	mov	COUNT_, #0
03bf4     B0 00 A0 FD | 	call	#pushregs_
03bf8     18 F0 07 F1 | 	add	ptra, #24
03bfc     04 5E 05 F1 | 	add	fp, #4
03c00     AF 4A 62 FC | 	wrlong	arg01, fp
03c04     04 5E 05 F1 | 	add	fp, #4
03c08     AF 4C 62 FC | 	wrlong	arg02, fp
03c0c     04 5E 05 F1 | 	add	fp, #4
03c10     AF 4E 62 FC | 	wrlong	arg03, fp
03c14     04 5E 05 F1 | 	add	fp, #4
03c18     AF 4E 42 FC | 	wrbyte	arg03, fp
03c1c     01 5E 05 F1 | 	add	fp, #1
03c20     AF 00 48 FC | 	wrbyte	#0, fp
03c24     01 5E 85 F1 | 	sub	fp, #1
03c28     AF 4E 02 F6 | 	mov	arg03, fp
03c2c     0C 5E 85 F1 | 	sub	fp, #12
03c30     AF 4A 02 FB | 	rdlong	arg01, fp
03c34     04 5E 05 F1 | 	add	fp, #4
03c38     AF 4C 02 FB | 	rdlong	arg02, fp
03c3c     08 5E 85 F1 | 	sub	fp, #8
03c40     0C 00 B0 FD | 	call	#__system___fmtstr
03c44     AF F0 03 F6 | 	mov	ptra, fp
03c48     BF 00 A0 FD | 	call	#popregs_
03c4c                 | __system___fmtchar_ret
03c4c     2D 00 64 FD | 	ret
03c50                 | 
03c50                 | __system___fmtstr
03c50     0E 5A 05 F6 | 	mov	COUNT_, #14
03c54     B0 00 A0 FD | 	call	#pushregs_
03c58     25 55 02 F6 | 	mov	local01, arg01
03c5c     26 57 02 F6 | 	mov	local02, arg02
03c60     27 59 02 F6 | 	mov	local03, arg03
03c64     2B 5B 02 F6 | 	mov	local04, local02
03c68     FF 5A 06 F5 | 	and	local04, #255
03c6c     2C 4B 02 F6 | 	mov	arg01, local03
03c70     00 5C 06 F6 | 	mov	local05, #0
03c74     98 C3 9F FE | 	loc	pa,	#(@LR__0164-@LR__0163)
03c78     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c7c                 | LR__0163
03c7c     25 5F CA FA | 	rdbyte	local06, arg01 wz
03c80     01 5C 06 51 |  if_ne	add	local05, #1
03c84     01 4A 06 51 |  if_ne	add	arg01, #1
03c88     F0 FF 9F 5D |  if_ne	jmp	#LR__0163
03c8c                 | LR__0164
03c8c     2E 25 02 F6 | 	mov	result1, local05
03c90     12 61 02 F6 | 	mov	local07, result1
03c94     00 5A 0E F2 | 	cmp	local04, #0 wz
03c98     04 00 90 AD |  if_e	jmp	#LR__0165
03c9c     2D 61 7A F3 | 	fles	local07, local04 wcz
03ca0                 | LR__0165
03ca0     2A 4B 02 F6 | 	mov	arg01, local01
03ca4     2B 4D 02 F6 | 	mov	arg02, local02
03ca8     30 4F 02 F6 | 	mov	arg03, local07
03cac     02 50 06 F6 | 	mov	arg04, #2
03cb0     2C 0F B0 FD | 	call	#__system___fmtpad
03cb4     12 63 02 F6 | 	mov	local08, result1
03cb8     00 62 5E F2 | 	cmps	local08, #0 wcz
03cbc     31 25 02 C6 |  if_b	mov	result1, local08
03cc0     74 00 90 CD |  if_b	jmp	#LR__0168
03cc4     00 60 5E F2 | 	cmps	local07, #0 wcz
03cc8     44 00 90 ED |  if_be	jmp	#LR__0167
03ccc     30 65 02 F6 | 	mov	local09, local07
03cd0                 | LR__0166
03cd0     2A 67 02 F6 | 	mov	local10, local01
03cd4     33 69 02 FB | 	rdlong	local11, local10
03cd8     04 66 06 F1 | 	add	local10, #4
03cdc     33 6B 02 FB | 	rdlong	local12, local10
03ce0     2C 4B C2 FA | 	rdbyte	arg01, local03
03ce4     07 6D 02 F6 | 	mov	local13, objptr
03ce8     34 0F 02 F6 | 	mov	objptr, local11
03cec     01 58 06 F1 | 	add	local03, #1
03cf0     2D 6A 62 FD | 	call	local12
03cf4     36 0F 02 F6 | 	mov	objptr, local13
03cf8     12 6F 02 F6 | 	mov	local14, result1
03cfc     00 6E 5E F2 | 	cmps	local14, #0 wcz
03d00     37 25 02 C6 |  if_b	mov	result1, local14
03d04     30 00 90 CD |  if_b	jmp	#LR__0168
03d08     37 63 02 F1 | 	add	local08, local14
03d0c     F0 65 6E FB | 	djnz	local09, #LR__0166
03d10                 | LR__0167
03d10     2A 4B 02 F6 | 	mov	arg01, local01
03d14     2B 4D 02 F6 | 	mov	arg02, local02
03d18     30 4F 02 F6 | 	mov	arg03, local07
03d1c     01 50 06 F6 | 	mov	arg04, #1
03d20     BC 0E B0 FD | 	call	#__system___fmtpad
03d24     12 6F 02 F6 | 	mov	local14, result1
03d28     00 6E 5E F2 | 	cmps	local14, #0 wcz
03d2c     37 25 02 C6 |  if_b	mov	result1, local14
03d30     37 63 02 31 |  if_ae	add	local08, local14
03d34     31 25 02 36 |  if_ae	mov	result1, local08
03d38                 | LR__0168
03d38     AF F0 03 F6 | 	mov	ptra, fp
03d3c     BF 00 A0 FD | 	call	#popregs_
03d40                 | __system___fmtstr_ret
03d40     2D 00 64 FD | 	ret
03d44                 | 
03d44                 | __system___fmtnum
03d44     07 5A 05 F6 | 	mov	COUNT_, #7
03d48     B0 00 A0 FD | 	call	#pushregs_
03d4c     78 F0 07 F1 | 	add	ptra, #120
03d50     04 5E 05 F1 | 	add	fp, #4
03d54     AF 4A 62 FC | 	wrlong	arg01, fp
03d58     04 5E 05 F1 | 	add	fp, #4
03d5c     AF 4C 62 FC | 	wrlong	arg02, fp
03d60     04 5E 05 F1 | 	add	fp, #4
03d64     AF 4E 62 FC | 	wrlong	arg03, fp
03d68     04 5E 05 F1 | 	add	fp, #4
03d6c     AF 50 62 FC | 	wrlong	arg04, fp
03d70     04 5E 05 F1 | 	add	fp, #4
03d74     AF 54 02 F6 | 	mov	local01, fp
03d78     44 5E 05 F1 | 	add	fp, #68
03d7c     AF 54 62 FC | 	wrlong	local01, fp
03d80     04 5E 05 F1 | 	add	fp, #4
03d84     AF 00 68 FC | 	wrlong	#0, fp
03d88     54 5E 85 F1 | 	sub	fp, #84
03d8c     AF 54 02 FB | 	rdlong	local01, fp
03d90     10 54 46 F0 | 	shr	local01, #16
03d94     3F 54 06 F5 | 	and	local01, #63
03d98     58 5E 05 F1 | 	add	fp, #88
03d9c     AF 54 62 FC | 	wrlong	local01, fp
03da0     58 5E 85 F1 | 	sub	fp, #88
03da4     AF 54 02 FB | 	rdlong	local01, fp
03da8     FF 54 06 F5 | 	and	local01, #255
03dac     5C 5E 05 F1 | 	add	fp, #92
03db0     AF 54 62 FC | 	wrlong	local01, fp
03db4     5C 5E 85 F1 | 	sub	fp, #92
03db8     AF 54 02 FB | 	rdlong	local01, fp
03dbc     1A 54 46 F0 | 	shr	local01, #26
03dc0     03 54 06 F5 | 	and	local01, #3
03dc4     60 5E 05 F1 | 	add	fp, #96
03dc8     AF 54 62 FC | 	wrlong	local01, fp
03dcc     08 5E 85 F1 | 	sub	fp, #8
03dd0     AF 54 02 FB | 	rdlong	local01, fp
03dd4     60 5E 85 F1 | 	sub	fp, #96
03dd8     00 54 5E F2 | 	cmps	local01, #0 wcz
03ddc     14 00 90 ED |  if_be	jmp	#LR__0169
03de0     60 5E 05 F1 | 	add	fp, #96
03de4     AF 54 02 FB | 	rdlong	local01, fp
03de8     01 54 86 F1 | 	sub	local01, #1
03dec     AF 54 62 FC | 	wrlong	local01, fp
03df0     60 5E 85 F1 | 	sub	fp, #96
03df4                 | LR__0169
03df4     64 5E 05 F1 | 	add	fp, #100
03df8     AF 56 02 FB | 	rdlong	local02, fp
03dfc     64 5E 85 F1 | 	sub	fp, #100
03e00     40 56 5E F2 | 	cmps	local02, #64 wcz
03e04     14 00 90 1D |  if_a	jmp	#LR__0170
03e08     64 5E 05 F1 | 	add	fp, #100
03e0c     AF 58 02 FB | 	rdlong	local03, fp
03e10     64 5E 85 F1 | 	sub	fp, #100
03e14     2C 5B 0A F6 | 	mov	local04, local03 wz
03e18     0C 00 90 5D |  if_ne	jmp	#LR__0171
03e1c                 | LR__0170
03e1c     64 5E 05 F1 | 	add	fp, #100
03e20     AF 80 68 FC | 	wrlong	#64, fp
03e24     64 5E 85 F1 | 	sub	fp, #100
03e28                 | LR__0171
03e28     68 5E 05 F1 | 	add	fp, #104
03e2c     AF 54 02 FB | 	rdlong	local01, fp
03e30     68 5E 85 F1 | 	sub	fp, #104
03e34     03 54 0E F2 | 	cmp	local01, #3 wz
03e38     10 00 90 5D |  if_ne	jmp	#LR__0172
03e3c     68 5E 05 F1 | 	add	fp, #104
03e40     AF 00 68 FC | 	wrlong	#0, fp
03e44     68 5E 85 F1 | 	sub	fp, #104
03e48     30 00 90 FD | 	jmp	#LR__0174
03e4c                 | LR__0172
03e4c     0C 5E 05 F1 | 	add	fp, #12
03e50     AF 54 02 FB | 	rdlong	local01, fp
03e54     0C 5E 85 F1 | 	sub	fp, #12
03e58     00 54 5E F2 | 	cmps	local01, #0 wcz
03e5c     1C 00 90 3D |  if_ae	jmp	#LR__0173
03e60     68 5E 05 F1 | 	add	fp, #104
03e64     AF 08 68 FC | 	wrlong	#4, fp
03e68     5C 5E 85 F1 | 	sub	fp, #92
03e6c     AF 54 02 FB | 	rdlong	local01, fp
03e70     2A 55 62 F6 | 	neg	local01, local01
03e74     AF 54 62 FC | 	wrlong	local01, fp
03e78     0C 5E 85 F1 | 	sub	fp, #12
03e7c                 | LR__0173
03e7c                 | LR__0174
03e7c     68 5E 05 F1 | 	add	fp, #104
03e80     AF 54 0A FB | 	rdlong	local01, fp wz
03e84     68 5E 85 F1 | 	sub	fp, #104
03e88     EC 00 90 AD |  if_e	jmp	#LR__0181
03e8c     5C 5E 05 F1 | 	add	fp, #92
03e90     AF 5A 02 FB | 	rdlong	local04, fp
03e94     01 5A 06 F1 | 	add	local04, #1
03e98     AF 5A 62 FC | 	wrlong	local04, fp
03e9c     04 5E 05 F1 | 	add	fp, #4
03ea0     AF 54 02 FB | 	rdlong	local01, fp
03ea4     04 5E 05 F1 | 	add	fp, #4
03ea8     AF 5A 02 FB | 	rdlong	local04, fp
03eac     64 5E 85 F1 | 	sub	fp, #100
03eb0     2D 55 0A F2 | 	cmp	local01, local04 wz
03eb4     3C 00 90 5D |  if_ne	jmp	#LR__0176
03eb8     60 5E 05 F1 | 	add	fp, #96
03ebc     AF 5A 02 FB | 	rdlong	local04, fp
03ec0     01 5A 86 F1 | 	sub	local04, #1
03ec4     AF 5A 62 FC | 	wrlong	local04, fp
03ec8     AF 54 0A FB | 	rdlong	local01, fp wz
03ecc     60 5E 85 F1 | 	sub	fp, #96
03ed0     20 00 90 5D |  if_ne	jmp	#LR__0175
03ed4     04 5E 05 F1 | 	add	fp, #4
03ed8     AF 4A 02 FB | 	rdlong	arg01, fp
03edc     04 5E 05 F1 | 	add	fp, #4
03ee0     AF 4C 02 FB | 	rdlong	arg02, fp
03ee4     08 5E 85 F1 | 	sub	fp, #8
03ee8     23 4E 06 F6 | 	mov	arg03, #35
03eec     00 FD BF FD | 	call	#__system___fmtchar
03ef0     70 01 90 FD | 	jmp	#LR__0186
03ef4                 | LR__0175
03ef4                 | LR__0176
03ef4     68 5E 05 F1 | 	add	fp, #104
03ef8     AF 54 02 FB | 	rdlong	local01, fp
03efc     68 5E 85 F1 | 	sub	fp, #104
03f00     02 54 0E F2 | 	cmp	local01, #2 wz
03f04     20 00 90 5D |  if_ne	jmp	#LR__0177
03f08     58 5E 05 F1 | 	add	fp, #88
03f0c     AF 54 02 FB | 	rdlong	local01, fp
03f10     2A 5B 02 F6 | 	mov	local04, local01
03f14     01 5A 06 F1 | 	add	local04, #1
03f18     AF 5A 62 FC | 	wrlong	local04, fp
03f1c     58 5E 85 F1 | 	sub	fp, #88
03f20     2A 41 48 FC | 	wrbyte	#32, local01
03f24     50 00 90 FD | 	jmp	#LR__0180
03f28                 | LR__0177
03f28     68 5E 05 F1 | 	add	fp, #104
03f2c     AF 54 02 FB | 	rdlong	local01, fp
03f30     68 5E 85 F1 | 	sub	fp, #104
03f34     04 54 0E F2 | 	cmp	local01, #4 wz
03f38     20 00 90 5D |  if_ne	jmp	#LR__0178
03f3c     58 5E 05 F1 | 	add	fp, #88
03f40     AF 54 02 FB | 	rdlong	local01, fp
03f44     2A 5B 02 F6 | 	mov	local04, local01
03f48     01 5A 06 F1 | 	add	local04, #1
03f4c     AF 5A 62 FC | 	wrlong	local04, fp
03f50     58 5E 85 F1 | 	sub	fp, #88
03f54     2A 5B 48 FC | 	wrbyte	#45, local01
03f58     1C 00 90 FD | 	jmp	#LR__0179
03f5c                 | LR__0178
03f5c     58 5E 05 F1 | 	add	fp, #88
03f60     AF 54 02 FB | 	rdlong	local01, fp
03f64     2A 5B 02 F6 | 	mov	local04, local01
03f68     01 5A 06 F1 | 	add	local04, #1
03f6c     AF 5A 62 FC | 	wrlong	local04, fp
03f70     58 5E 85 F1 | 	sub	fp, #88
03f74     2A 57 48 FC | 	wrbyte	#43, local01
03f78                 | LR__0179
03f78                 | LR__0180
03f78                 | LR__0181
03f78     58 5E 05 F1 | 	add	fp, #88
03f7c     AF 4A 02 FB | 	rdlong	arg01, fp
03f80     4C 5E 85 F1 | 	sub	fp, #76
03f84     AF 4C 02 FB | 	rdlong	arg02, fp
03f88     04 5E 05 F1 | 	add	fp, #4
03f8c     AF 4E 02 FB | 	rdlong	arg03, fp
03f90     50 5E 05 F1 | 	add	fp, #80
03f94     AF 50 02 FB | 	rdlong	arg04, fp
03f98     00 5C 06 F6 | 	mov	local05, #0
03f9c     58 5E 85 F1 | 	sub	fp, #88
03fa0     AF 5E 02 FB | 	rdlong	local06, fp
03fa4     08 5E 85 F1 | 	sub	fp, #8
03fa8     1D 5E 2E F4 | 	testbn	local06, #29 wz
03fac     01 5C 06 56 |  if_ne	mov	local05, #1
03fb0     2E 53 02 F6 | 	mov	arg05, local05
03fb4     E8 0C B0 FD | 	call	#__system___uitoa
03fb8     12 61 02 F6 | 	mov	local07, result1
03fbc     5C 5E 05 F1 | 	add	fp, #92
03fc0     AF 54 02 FB | 	rdlong	local01, fp
03fc4     30 55 02 F1 | 	add	local01, local07
03fc8     AF 54 62 FC | 	wrlong	local01, fp
03fcc     08 5E 05 F1 | 	add	fp, #8
03fd0     AF 5A 02 FB | 	rdlong	local04, fp
03fd4     64 5E 85 F1 | 	sub	fp, #100
03fd8     2D 55 5A F2 | 	cmps	local01, local04 wcz
03fdc     64 00 90 ED |  if_be	jmp	#LR__0185
03fe0     5C C0 9F FE | 	loc	pa,	#(@LR__0183-@LR__0182)
03fe4     93 00 A0 FD | 	call	#FCACHE_LOAD_
03fe8                 | LR__0182
03fe8     64 5E 05 F1 | 	add	fp, #100
03fec     AF 54 02 FB | 	rdlong	local01, fp
03ff0     2A 5B 02 F6 | 	mov	local04, local01
03ff4     01 5A 86 F1 | 	sub	local04, #1
03ff8     AF 5A 62 FC | 	wrlong	local04, fp
03ffc     64 5E 85 F1 | 	sub	fp, #100
04000     00 54 5E F2 | 	cmps	local01, #0 wcz
04004     20 00 90 ED |  if_be	jmp	#LR__0184
04008     58 5E 05 F1 | 	add	fp, #88
0400c     AF 54 02 FB | 	rdlong	local01, fp
04010     2A 5B 02 F6 | 	mov	local04, local01
04014     01 5A 06 F1 | 	add	local04, #1
04018     AF 5A 62 FC | 	wrlong	local04, fp
0401c     58 5E 85 F1 | 	sub	fp, #88
04020     2A 47 48 FC | 	wrbyte	#35, local01
04024     C0 FF 9F FD | 	jmp	#LR__0182
04028                 | LR__0183
04028                 | LR__0184
04028     58 5E 05 F1 | 	add	fp, #88
0402c     AF 54 02 FB | 	rdlong	local01, fp
04030     2A 5B 02 F6 | 	mov	local04, local01
04034     01 5A 06 F1 | 	add	local04, #1
04038     AF 5A 62 FC | 	wrlong	local04, fp
0403c     58 5E 85 F1 | 	sub	fp, #88
04040     2A 01 48 FC | 	wrbyte	#0, local01
04044                 | LR__0185
04044     14 5E 05 F1 | 	add	fp, #20
04048     AF 4E 02 F6 | 	mov	arg03, fp
0404c     10 5E 85 F1 | 	sub	fp, #16
04050     AF 4A 02 FB | 	rdlong	arg01, fp
04054     04 5E 05 F1 | 	add	fp, #4
04058     AF 4C 02 FB | 	rdlong	arg02, fp
0405c     08 5E 85 F1 | 	sub	fp, #8
04060     EC FB BF FD | 	call	#__system___fmtstr
04064                 | LR__0186
04064     AF F0 03 F6 | 	mov	ptra, fp
04068     BF 00 A0 FD | 	call	#popregs_
0406c                 | __system___fmtnum_ret
0406c     2D 00 64 FD | 	ret
04070                 | 
04070                 | __system___gc_ptrs
04070     0A 5A 05 F6 | 	mov	COUNT_, #10
04074     B0 00 A0 FD | 	call	#pushregs_
04078     02 55 02 F6 | 	mov	local01, __heap_ptr
0407c     2A 57 02 F6 | 	mov	local02, local01
04080     07 00 00 FF 
04084     F8 57 06 F1 | 	add	local02, ##4088
04088     2A 59 0A FB | 	rdlong	local03, local01 wz
0408c     74 00 90 5D |  if_ne	jmp	#LR__0187
04090     2B 5B 02 F6 | 	mov	local04, local02
04094     2A 5B 82 F1 | 	sub	local04, local01
04098     2A 03 58 FC | 	wrword	#1, local01
0409c     2A 5D 02 F6 | 	mov	local05, local01
040a0     02 5C 06 F1 | 	add	local05, #2
040a4     36 00 80 FF 
040a8     2E 21 59 FC | 	wrword	##27792, local05
040ac     2A 5F 02 F6 | 	mov	local06, local01
040b0     04 5E 06 F1 | 	add	local06, #4
040b4     2F 01 58 FC | 	wrword	#0, local06
040b8     2A 61 02 F6 | 	mov	local07, local01
040bc     06 60 06 F1 | 	add	local07, #6
040c0     30 03 58 FC | 	wrword	#1, local07
040c4     10 54 06 F1 | 	add	local01, #16
040c8     2D 59 52 F6 | 	abs	local03, local04 wc
040cc     04 58 46 F0 | 	shr	local03, #4
040d0     2C 59 62 C6 |  if_b	neg	local03, local03
040d4     2A 59 52 FC | 	wrword	local03, local01
040d8     2A 63 02 F6 | 	mov	local08, local01
040dc     02 62 06 F1 | 	add	local08, #2
040e0     36 00 80 FF 
040e4     31 1F 59 FC | 	wrword	##27791, local08
040e8     2A 65 02 F6 | 	mov	local09, local01
040ec     04 64 06 F1 | 	add	local09, #4
040f0     32 01 58 FC | 	wrword	#0, local09
040f4     2A 67 02 F6 | 	mov	local10, local01
040f8     06 66 06 F1 | 	add	local10, #6
040fc     33 01 58 FC | 	wrword	#0, local10
04100     10 54 86 F1 | 	sub	local01, #16
04104                 | LR__0187
04104     2B 27 02 F6 | 	mov	result2, local02
04108     2A 25 02 F6 | 	mov	result1, local01
0410c     AF F0 03 F6 | 	mov	ptra, fp
04110     BF 00 A0 FD | 	call	#popregs_
04114                 | __system___gc_ptrs_ret
04114     2D 00 64 FD | 	ret
04118                 | 
04118                 | __system___gc_nextBlockPtr
04118     02 5A 05 F6 | 	mov	COUNT_, #2
0411c     B0 00 A0 FD | 	call	#pushregs_
04120     25 55 02 F6 | 	mov	local01, arg01
04124     2A 57 EA FA | 	rdword	local02, local01 wz
04128     10 00 90 5D |  if_ne	jmp	#LR__0188
0412c     2C 00 00 FF 
04130     DC 4A 06 F6 | 	mov	arg01, ##@LR__0300
04134     F8 01 B0 FD | 	call	#__system___gc_errmsg
04138     0C 00 90 FD | 	jmp	#LR__0189
0413c                 | LR__0188
0413c     04 56 66 F0 | 	shl	local02, #4
04140     2A 25 02 F6 | 	mov	result1, local01
04144     2B 25 02 F1 | 	add	result1, local02
04148                 | LR__0189
04148     AF F0 03 F6 | 	mov	ptra, fp
0414c     BF 00 A0 FD | 	call	#popregs_
04150                 | __system___gc_nextBlockPtr_ret
04150     2D 00 64 FD | 	ret
04154                 | 
04154                 | __system___gc_tryalloc
04154     1B 5A 05 F6 | 	mov	COUNT_, #27
04158     B0 00 A0 FD | 	call	#pushregs_
0415c     25 55 02 F6 | 	mov	local01, arg01
04160     26 57 02 F6 | 	mov	local02, arg02
04164     08 FF BF FD | 	call	#__system___gc_ptrs
04168     12 59 02 F6 | 	mov	local03, result1
0416c     13 5B 02 F6 | 	mov	local04, result2
04170     2C 5D 02 F6 | 	mov	local05, local03
04174     00 5E 06 F6 | 	mov	local06, #0
04178     DC BE 9F FE | 	loc	pa,	#(@LR__0191-@LR__0190)
0417c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04180                 | LR__0190
04180     2E 61 02 F6 | 	mov	local07, local05
04184     06 5C 06 F1 | 	add	local05, #6
04188     2E 63 02 F6 | 	mov	local08, local05
0418c     2C 65 02 F6 | 	mov	local09, local03
04190     31 67 E2 FA | 	rdword	local10, local08
04194     32 4B 02 F6 | 	mov	arg01, local09
04198     33 4D 0A F6 | 	mov	arg02, local10 wz
0419c     00 24 06 A6 |  if_e	mov	result1, #0
041a0     04 4C 66 50 |  if_ne	shl	arg02, #4
041a4     26 4B 02 51 |  if_ne	add	arg01, arg02
041a8     25 25 02 56 |  if_ne	mov	result1, arg01
041ac     12 69 02 F6 | 	mov	local11, result1
041b0     34 5D 0A F6 | 	mov	local05, local11 wz
041b4     2E 65 02 56 |  if_ne	mov	local09, local05
041b8     32 6B 02 56 |  if_ne	mov	local12, local09
041bc     35 5F E2 5A |  if_ne	rdword	local06, local12
041c0     00 5C 0E F2 | 	cmp	local05, #0 wz
041c4     10 00 90 AD |  if_e	jmp	#LR__0192
041c8     2D 5D 5A F2 | 	cmps	local05, local04 wcz
041cc     08 00 90 3D |  if_ae	jmp	#LR__0192
041d0     2F 55 5A F2 | 	cmps	local01, local06 wcz
041d4     A8 FF 9F 1D |  if_a	jmp	#LR__0190
041d8                 | LR__0191
041d8                 | LR__0192
041d8     00 5C 0E F2 | 	cmp	local05, #0 wz
041dc     2E 25 02 A6 |  if_e	mov	result1, local05
041e0     40 01 90 AD |  if_e	jmp	#LR__0195
041e4     2E 6D 02 F6 | 	mov	local13, local05
041e8     06 6C 06 F1 | 	add	local13, #6
041ec     36 6F E2 FA | 	rdword	local14, local13
041f0     2F 55 5A F2 | 	cmps	local01, local06 wcz
041f4     CC 00 90 3D |  if_ae	jmp	#LR__0194
041f8     2E 71 02 F6 | 	mov	local15, local05
041fc     38 55 52 FC | 	wrword	local01, local15
04200     2A 73 02 F6 | 	mov	local16, local01
04204     04 72 66 F0 | 	shl	local16, #4
04208     2E 75 02 F6 | 	mov	local17, local05
0420c     39 75 02 F1 | 	add	local17, local16
04210     2F 77 02 F6 | 	mov	local18, local06
04214     2A 77 82 F1 | 	sub	local18, local01
04218     3A 79 02 F6 | 	mov	local19, local17
0421c     3C 77 52 FC | 	wrword	local18, local19
04220     3A 7B 02 F6 | 	mov	local20, local17
04224     02 7A 06 F1 | 	add	local20, #2
04228     36 00 80 FF 
0422c     3D 1F 59 FC | 	wrword	##27791, local20
04230     3A 7D 02 F6 | 	mov	local21, local17
04234     04 7C 06 F1 | 	add	local21, #4
04238     2E 4D 0A F6 | 	mov	arg02, local05 wz
0423c     00 24 06 A6 |  if_e	mov	result1, #0
04240     2C 4D 82 51 |  if_ne	sub	arg02, local03
04244     04 4C 46 50 |  if_ne	shr	arg02, #4
04248     26 25 02 56 |  if_ne	mov	result1, arg02
0424c     3E 25 52 FC | 	wrword	result1, local21
04250     3A 7F 02 F6 | 	mov	local22, local17
04254     36 65 E2 FA | 	rdword	local09, local13
04258     06 7E 06 F1 | 	add	local22, #6
0425c     3F 65 52 FC | 	wrword	local09, local22
04260     3A 81 02 F6 | 	mov	local23, local17
04264     40 4D 0A F6 | 	mov	arg02, local23 wz
04268     00 24 06 A6 |  if_e	mov	result1, #0
0426c     2C 4D 82 51 |  if_ne	sub	arg02, local03
04270     04 4C 46 50 |  if_ne	shr	arg02, #4
04274     26 25 02 56 |  if_ne	mov	result1, arg02
04278     12 6F 02 F6 | 	mov	local14, result1
0427c     3A 4B 02 F6 | 	mov	arg01, local17
04280     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
04284     12 83 0A F6 | 	mov	local24, result1 wz
04288     38 00 90 AD |  if_e	jmp	#LR__0193
0428c     2D 83 5A F2 | 	cmps	local24, local04 wcz
04290     30 00 90 3D |  if_ae	jmp	#LR__0193
04294     41 85 02 F6 | 	mov	local25, local24
04298     04 84 06 F1 | 	add	local25, #4
0429c     2C 65 02 F6 | 	mov	local09, local03
042a0     40 67 02 F6 | 	mov	local10, local23
042a4     32 4B 02 F6 | 	mov	arg01, local09
042a8     33 4D 0A F6 | 	mov	arg02, local10 wz
042ac     00 24 06 A6 |  if_e	mov	result1, #0
042b0     25 4D 82 51 |  if_ne	sub	arg02, arg01
042b4     04 4C 46 50 |  if_ne	shr	arg02, #4
042b8     26 25 02 56 |  if_ne	mov	result1, arg02
042bc     12 69 02 F6 | 	mov	local11, result1
042c0     42 69 52 FC | 	wrword	local11, local25
042c4                 | LR__0193
042c4                 | LR__0194
042c4     06 60 06 F1 | 	add	local07, #6
042c8     30 6F 52 FC | 	wrword	local14, local07
042cc     36 00 00 FF 
042d0     80 64 06 F6 | 	mov	local09, ##27776
042d4     2B 65 42 F5 | 	or	local09, local02
042d8     2E 87 02 F6 | 	mov	local26, local05
042dc     02 86 06 F1 | 	add	local26, #2
042e0     01 24 62 FD | 	cogid	result1
042e4     12 65 42 F5 | 	or	local09, result1
042e8     43 65 52 FC | 	wrword	local09, local26
042ec     2C 89 02 F6 | 	mov	local27, local03
042f0     08 88 06 F1 | 	add	local27, #8
042f4     44 65 E2 FA | 	rdword	local09, local27
042f8     36 65 52 FC | 	wrword	local09, local13
042fc     2E 4D 0A F6 | 	mov	arg02, local05 wz
04300     00 24 06 A6 |  if_e	mov	result1, #0
04304     2C 4D 82 51 |  if_ne	sub	arg02, local03
04308     04 4C 46 50 |  if_ne	shr	arg02, #4
0430c     26 25 02 56 |  if_ne	mov	result1, arg02
04310     44 25 52 FC | 	wrword	result1, local27
04314     08 5C 06 F1 | 	add	local05, #8
04318     2E 25 02 F6 | 	mov	result1, local05
0431c     00 C0 31 FF 
04320     00 24 46 F5 | 	or	result1, ##1669332992
04324                 | LR__0195
04324     AF F0 03 F6 | 	mov	ptra, fp
04328     BF 00 A0 FD | 	call	#popregs_
0432c                 | __system___gc_tryalloc_ret
0432c     2D 00 64 FD | 	ret
04330                 | 
04330                 | __system___gc_errmsg
04330     02 5A 05 F6 | 	mov	COUNT_, #2
04334     B0 00 A0 FD | 	call	#pushregs_
04338     25 55 02 F6 | 	mov	local01, arg01
0433c                 | LR__0196
0433c     2A 57 CA FA | 	rdbyte	local02, local01 wz
04340     01 54 06 F1 | 	add	local01, #1
04344     0C 00 90 AD |  if_e	jmp	#LR__0197
04348     2B 4B 02 F6 | 	mov	arg01, local02
0434c     8C F5 BF FD | 	call	#__system___tx
04350     E8 FF 9F FD | 	jmp	#LR__0196
04354                 | LR__0197
04354     00 24 06 F6 | 	mov	result1, #0
04358     AF F0 03 F6 | 	mov	ptra, fp
0435c     BF 00 A0 FD | 	call	#popregs_
04360                 | __system___gc_errmsg_ret
04360     2D 00 64 FD | 	ret
04364                 | 
04364                 | __system___gc_alloc_managed
04364     02 5A 05 F6 | 	mov	COUNT_, #2
04368     B0 00 A0 FD | 	call	#pushregs_
0436c     25 55 02 F6 | 	mov	local01, arg01
04370     00 4C 06 F6 | 	mov	arg02, #0
04374     30 00 B0 FD | 	call	#__system___gc_doalloc
04378     12 57 0A F6 | 	mov	local02, result1 wz
0437c     18 00 90 5D |  if_ne	jmp	#LR__0198
04380     00 54 5E F2 | 	cmps	local01, #0 wcz
04384     10 00 90 ED |  if_be	jmp	#LR__0198
04388     2C 00 00 FF 
0438c     F8 4A 06 F6 | 	mov	arg01, ##@LR__0301
04390     9C FF BF FD | 	call	#__system___gc_errmsg
04394     04 00 90 FD | 	jmp	#LR__0199
04398                 | LR__0198
04398     2B 25 02 F6 | 	mov	result1, local02
0439c                 | LR__0199
0439c     AF F0 03 F6 | 	mov	ptra, fp
043a0     BF 00 A0 FD | 	call	#popregs_
043a4                 | __system___gc_alloc_managed_ret
043a4     2D 00 64 FD | 	ret
043a8                 | 
043a8                 | __system___gc_doalloc
043a8     07 5A 05 F6 | 	mov	COUNT_, #7
043ac     B0 00 A0 FD | 	call	#pushregs_
043b0     25 55 0A F6 | 	mov	local01, arg01 wz
043b4     26 57 02 F6 | 	mov	local02, arg02
043b8     00 24 06 A6 |  if_e	mov	result1, #0
043bc     8C 00 90 AD |  if_e	jmp	#LR__0207
043c0     17 54 06 F1 | 	add	local01, #23
043c4     0F 54 26 F5 | 	andn	local01, #15
043c8     04 54 46 F0 | 	shr	local01, #4
043cc     14 14 06 F1 | 	add	ptr___system__dat__, #20
043d0     0A 59 02 F6 | 	mov	local03, ptr___system__dat__
043d4     2C 4B 02 F6 | 	mov	arg01, local03
043d8     14 14 86 F1 | 	sub	ptr___system__dat__, #20
043dc     C4 F4 BF FD | 	call	#__system___lockmem
043e0     2A 4B 02 F6 | 	mov	arg01, local01
043e4     2B 4D 02 F6 | 	mov	arg02, local02
043e8     68 FD BF FD | 	call	#__system___gc_tryalloc
043ec     12 5B 0A F6 | 	mov	local04, result1 wz
043f0     14 00 90 5D |  if_ne	jmp	#LR__0200
043f4     10 03 B0 FD | 	call	#__system___gc_docollect
043f8     2A 4B 02 F6 | 	mov	arg01, local01
043fc     2B 4D 02 F6 | 	mov	arg02, local02
04400     50 FD BF FD | 	call	#__system___gc_tryalloc
04404     12 5B 02 F6 | 	mov	local04, result1
04408                 | LR__0200
04408     2C 01 68 FC | 	wrlong	#0, local03
0440c     00 5A 0E F2 | 	cmp	local04, #0 wz
04410     34 00 90 AD |  if_e	jmp	#LR__0206
04414     04 54 66 F0 | 	shl	local01, #4
04418     08 54 86 F1 | 	sub	local01, #8
0441c     2A 5D 52 F6 | 	abs	local05, local01 wc
04420     02 5C 46 F0 | 	shr	local05, #2
04424     2E 5D 62 C6 |  if_b	neg	local05, local05
04428     2E 5F 0A F6 | 	mov	local06, local05 wz
0442c     2D 61 02 F6 | 	mov	local07, local04
04430     14 00 90 AD |  if_e	jmp	#LR__0205
04434     D4 BB 9F FE | 	loc	pa,	#(@LR__0203-@LR__0201)
04438     93 00 A0 FD | 	call	#FCACHE_LOAD_
0443c                 | LR__0201
0443c     2F 05 D8 FC | 	rep	@LR__0204, local06
04440                 | LR__0202
04440     30 01 68 FC | 	wrlong	#0, local07
04444     04 60 06 F1 | 	add	local07, #4
04448                 | LR__0203
04448                 | LR__0204
04448                 | LR__0205
04448                 | LR__0206
04448     2D 25 02 F6 | 	mov	result1, local04
0444c                 | LR__0207
0444c     AF F0 03 F6 | 	mov	ptra, fp
04450     BF 00 A0 FD | 	call	#popregs_
04454                 | __system___gc_doalloc_ret
04454     2D 00 64 FD | 	ret
04458                 | 
04458                 | __system___gc_isvalidptr
04458     27 2B 02 F6 | 	mov	_var01, arg03
0445c     15 2D 02 F6 | 	mov	_var02, _var01
04460     00 F8 7F FF 
04464     00 2C 06 F5 | 	and	_var02, ##-1048576
04468     00 C0 31 FF 
0446c     00 2C 0E F2 | 	cmp	_var02, ##1669332992 wz
04470     00 24 06 56 |  if_ne	mov	result1, #0
04474     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
04478     08 2A 86 F1 | 	sub	_var01, #8
0447c     15 2F 02 F6 | 	mov	_var03, _var01
04480     00 F8 7F FF 
04484     00 2E 26 F5 | 	andn	_var03, ##-1048576
04488     25 2F 5A F2 | 	cmps	_var03, arg01 wcz
0448c     08 00 90 CD |  if_b	jmp	#LR__0208
04490     26 2F 5A F2 | 	cmps	_var03, arg02 wcz
04494     08 00 90 CD |  if_b	jmp	#LR__0209
04498                 | LR__0208
04498     00 24 06 F6 | 	mov	result1, #0
0449c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
044a0                 | LR__0209
044a0     17 2D 02 F6 | 	mov	_var02, _var03
044a4     25 2D 62 F5 | 	xor	_var02, arg01
044a8     0F 2C 0E F5 | 	and	_var02, #15 wz
044ac     00 24 06 56 |  if_ne	mov	result1, #0
044b0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
044b4     17 31 02 F6 | 	mov	_var04, _var03
044b8     02 30 06 F1 | 	add	_var04, #2
044bc     18 2D E2 FA | 	rdword	_var02, _var04
044c0     7F 00 00 FF 
044c4     C0 2D 06 F5 | 	and	_var02, ##65472
044c8     36 00 00 FF 
044cc     80 2C 0E F2 | 	cmp	_var02, ##27776 wz
044d0     00 24 06 56 |  if_ne	mov	result1, #0
044d4     17 25 02 A6 |  if_e	mov	result1, _var03
044d8                 | __system___gc_isvalidptr_ret
044d8     2D 00 64 FD | 	ret
044dc                 | 
044dc                 | __system___gc_dofree
044dc     1A 5A 05 F6 | 	mov	COUNT_, #26
044e0     B0 00 A0 FD | 	call	#pushregs_
044e4     25 55 02 F6 | 	mov	local01, arg01
044e8     84 FB BF FD | 	call	#__system___gc_ptrs
044ec     13 57 02 F6 | 	mov	local02, result2
044f0     12 59 02 F6 | 	mov	local03, result1
044f4     2A 5B 02 F6 | 	mov	local04, local01
044f8     02 5A 06 F1 | 	add	local04, #2
044fc     36 00 80 FF 
04500     2D 1F 59 FC | 	wrword	##27791, local04
04504     2A 5D 02 F6 | 	mov	local05, local01
04508     2A 4B 02 F6 | 	mov	arg01, local01
0450c     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
04510     12 5F 02 F6 | 	mov	local06, result1
04514     38 BB 9F FE | 	loc	pa,	#(@LR__0211-@LR__0210)
04518     93 00 A0 FD | 	call	#FCACHE_LOAD_
0451c                 | LR__0210
0451c     04 5C 06 F1 | 	add	local05, #4
04520     2E 61 02 F6 | 	mov	local07, local05
04524     30 4D EA FA | 	rdword	arg02, local07 wz
04528     2C 4B 02 F6 | 	mov	arg01, local03
0452c     00 24 06 A6 |  if_e	mov	result1, #0
04530     04 4C 66 50 |  if_ne	shl	arg02, #4
04534     26 4B 02 51 |  if_ne	add	arg01, arg02
04538     25 25 02 56 |  if_ne	mov	result1, arg01
0453c     12 5D 0A F6 | 	mov	local05, result1 wz
04540     28 00 90 AD |  if_e	jmp	#LR__0212
04544     2E 4B 02 F6 | 	mov	arg01, local05
04548     00 62 06 F6 | 	mov	local08, #0
0454c     02 4A 06 F1 | 	add	arg01, #2
04550     25 65 E2 FA | 	rdword	local09, arg01
04554     36 00 00 FF 
04558     8F 64 0E F2 | 	cmp	local09, ##27791 wz
0455c     01 62 66 A6 |  if_e	neg	local08, #1
04560     31 25 02 F6 | 	mov	result1, local08
04564     12 67 0A F6 | 	mov	local10, result1 wz
04568     B0 FF 9F AD |  if_e	jmp	#LR__0210
0456c                 | LR__0211
0456c                 | LR__0212
0456c     00 5C 0E F2 | 	cmp	local05, #0 wz
04570     2C 5D 02 A6 |  if_e	mov	local05, local03
04574     2E 69 02 F6 | 	mov	local11, local05
04578     06 68 06 F1 | 	add	local11, #6
0457c     2A 6B 02 F6 | 	mov	local12, local01
04580     34 6D E2 FA | 	rdword	local13, local11
04584     06 6A 06 F1 | 	add	local12, #6
04588     35 6D 52 FC | 	wrword	local13, local12
0458c     2A 4D 0A F6 | 	mov	arg02, local01 wz
04590     00 24 06 A6 |  if_e	mov	result1, #0
04594     2C 4D 82 51 |  if_ne	sub	arg02, local03
04598     04 4C 46 50 |  if_ne	shr	arg02, #4
0459c     26 25 02 56 |  if_ne	mov	result1, arg02
045a0     12 6F 02 F6 | 	mov	local14, result1
045a4     34 6F 52 FC | 	wrword	local14, local11
045a8     2C 5D 0A F2 | 	cmp	local05, local03 wz
045ac     74 00 90 AD |  if_e	jmp	#LR__0215
045b0     2E 4B 02 F6 | 	mov	arg01, local05
045b4     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
045b8     2A 25 0A F2 | 	cmp	result1, local01 wz
045bc     64 00 90 5D |  if_ne	jmp	#LR__0214
045c0     2E 71 02 F6 | 	mov	local15, local05
045c4     38 73 E2 FA | 	rdword	local16, local15
045c8     2A 75 02 F6 | 	mov	local17, local01
045cc     3A 67 E2 FA | 	rdword	local10, local17
045d0     33 73 02 F1 | 	add	local16, local10
045d4     38 73 52 FC | 	wrword	local16, local15
045d8     2D 01 58 FC | 	wrword	#0, local04
045dc     2A 4B 02 F6 | 	mov	arg01, local01
045e0     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
045e4     12 5F 02 F6 | 	mov	local06, result1
045e8     2B 5F 5A F2 | 	cmps	local06, local02 wcz
045ec     24 00 90 3D |  if_ae	jmp	#LR__0213
045f0     2F 77 02 F6 | 	mov	local18, local06
045f4     04 76 06 F1 | 	add	local18, #4
045f8     2E 4D 0A F6 | 	mov	arg02, local05 wz
045fc     00 24 06 A6 |  if_e	mov	result1, #0
04600     2C 4D 82 51 |  if_ne	sub	arg02, local03
04604     04 4C 46 50 |  if_ne	shr	arg02, #4
04608     26 25 02 56 |  if_ne	mov	result1, arg02
0460c     12 6F 02 F6 | 	mov	local14, result1
04610     3B 6F 52 FC | 	wrword	local14, local18
04614                 | LR__0213
04614     35 6D E2 FA | 	rdword	local13, local12
04618     34 6D 52 FC | 	wrword	local13, local11
0461c     35 01 58 FC | 	wrword	#0, local12
04620     2E 55 02 F6 | 	mov	local01, local05
04624                 | LR__0214
04624                 | LR__0215
04624     2A 4B 02 F6 | 	mov	arg01, local01
04628     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
0462c     12 79 0A F6 | 	mov	local19, result1 wz
04630     C4 00 90 AD |  if_e	jmp	#LR__0217
04634     2B 79 5A F2 | 	cmps	local19, local02 wcz
04638     BC 00 90 3D |  if_ae	jmp	#LR__0217
0463c     3C 4B 02 F6 | 	mov	arg01, local19
04640     00 62 06 F6 | 	mov	local08, #0
04644     02 4A 06 F1 | 	add	arg01, #2
04648     25 65 E2 FA | 	rdword	local09, arg01
0464c     36 00 00 FF 
04650     8F 64 0E F2 | 	cmp	local09, ##27791 wz
04654     01 62 66 A6 |  if_e	neg	local08, #1
04658     31 25 0A F6 | 	mov	result1, local08 wz
0465c     98 00 90 AD |  if_e	jmp	#LR__0217
04660     2A 5D 02 F6 | 	mov	local05, local01
04664     3C 55 02 F6 | 	mov	local01, local19
04668     2E 7B 02 F6 | 	mov	local20, local05
0466c     3D 7D E2 FA | 	rdword	local21, local20
04670     2A 7F 02 F6 | 	mov	local22, local01
04674     3F 67 E2 FA | 	rdword	local10, local22
04678     33 7D 02 F1 | 	add	local21, local10
0467c     3D 7D 52 FC | 	wrword	local21, local20
04680     2A 81 02 F6 | 	mov	local23, local01
04684     06 80 06 F1 | 	add	local23, #6
04688     2E 83 02 F6 | 	mov	local24, local05
0468c     40 6D E2 FA | 	rdword	local13, local23
04690     06 82 06 F1 | 	add	local24, #6
04694     41 6D 52 FC | 	wrword	local13, local24
04698     2A 85 02 F6 | 	mov	local25, local01
0469c     02 84 06 F1 | 	add	local25, #2
046a0     42 55 59 FC | 	wrword	#170, local25
046a4     40 01 58 FC | 	wrword	#0, local23
046a8     2A 6D 02 F6 | 	mov	local13, local01
046ac     36 4B 02 F6 | 	mov	arg01, local13
046b0     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
046b4     12 67 02 F6 | 	mov	local10, result1
046b8     33 5F 0A F6 | 	mov	local06, local10 wz
046bc     38 00 90 AD |  if_e	jmp	#LR__0216
046c0     2B 5F 5A F2 | 	cmps	local06, local02 wcz
046c4     30 00 90 3D |  if_ae	jmp	#LR__0216
046c8     2F 87 02 F6 | 	mov	local26, local06
046cc     04 86 06 F1 | 	add	local26, #4
046d0     2C 6D 02 F6 | 	mov	local13, local03
046d4     2E 67 02 F6 | 	mov	local10, local05
046d8     36 4B 02 F6 | 	mov	arg01, local13
046dc     33 4D 0A F6 | 	mov	arg02, local10 wz
046e0     00 24 06 A6 |  if_e	mov	result1, #0
046e4     25 4D 82 51 |  if_ne	sub	arg02, arg01
046e8     04 4C 46 50 |  if_ne	shr	arg02, #4
046ec     26 25 02 56 |  if_ne	mov	result1, arg02
046f0     12 6F 02 F6 | 	mov	local14, result1
046f4     43 6F 52 FC | 	wrword	local14, local26
046f8                 | LR__0216
046f8                 | LR__0217
046f8     2F 25 02 F6 | 	mov	result1, local06
046fc     AF F0 03 F6 | 	mov	ptra, fp
04700     BF 00 A0 FD | 	call	#popregs_
04704                 | __system___gc_dofree_ret
04704     2D 00 64 FD | 	ret
04708                 | 
04708                 | __system___gc_docollect
04708     0C 5A 05 F6 | 	mov	COUNT_, #12
0470c     B0 00 A0 FD | 	call	#pushregs_
04710     5C F9 BF FD | 	call	#__system___gc_ptrs
04714     13 55 02 F6 | 	mov	local01, result2
04718     12 57 02 F6 | 	mov	local02, result1
0471c     2B 4B 02 F6 | 	mov	arg01, local02
04720     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04724     12 59 0A F6 | 	mov	local03, result1 wz
04728     01 24 62 FD | 	cogid	result1
0472c     12 5B 02 F6 | 	mov	local04, result1
04730     2C 00 90 AD |  if_e	jmp	#LR__0219
04734                 | LR__0218
04734     2A 59 5A F2 | 	cmps	local03, local01 wcz
04738     24 00 90 3D |  if_ae	jmp	#LR__0219
0473c     2C 5D 02 F6 | 	mov	local05, local03
04740     02 5C 06 F1 | 	add	local05, #2
04744     2E 5F E2 FA | 	rdword	local06, local05
04748     20 5E 26 F5 | 	andn	local06, #32
0474c     2E 5F 52 FC | 	wrword	local06, local05
04750     2C 4B 02 F6 | 	mov	arg01, local03
04754     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04758     12 59 0A F6 | 	mov	local03, result1 wz
0475c     D4 FF 9F 5D |  if_ne	jmp	#LR__0218
04760                 | LR__0219
04760     00 60 06 F6 | 	mov	local07, #0
04764     00 4A 06 F6 | 	mov	arg01, #0
04768     D0 F0 BF FD | 	call	#__system____topofstack
0476c     12 63 02 F6 | 	mov	local08, result1
04770     30 4B 02 F6 | 	mov	arg01, local07
04774     31 4D 02 F6 | 	mov	arg02, local08
04778     A0 00 B0 FD | 	call	#__system___gc_markhub
0477c     2C 01 B0 FD | 	call	#__system___gc_markcog
04780     2B 4B 02 F6 | 	mov	arg01, local02
04784     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04788     12 65 0A F6 | 	mov	local09, result1 wz
0478c     10 00 90 5D |  if_ne	jmp	#LR__0220
04790     2C 00 00 FF 
04794     15 4B 06 F6 | 	mov	arg01, ##@LR__0302
04798     94 FB BF FD | 	call	#__system___gc_errmsg
0479c     70 00 90 FD | 	jmp	#LR__0226
047a0                 | LR__0220
047a0                 | LR__0221
047a0     32 59 02 F6 | 	mov	local03, local09
047a4     2C 4B 02 F6 | 	mov	arg01, local03
047a8     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
047ac     12 65 02 F6 | 	mov	local09, result1
047b0     2C 67 02 F6 | 	mov	local10, local03
047b4     02 66 06 F1 | 	add	local10, #2
047b8     33 69 E2 FA | 	rdword	local11, local10
047bc     20 68 CE F7 | 	test	local11, #32 wz
047c0     3C 00 90 5D |  if_ne	jmp	#LR__0224
047c4     34 6B 02 F6 | 	mov	local12, local11
047c8     10 6A 0E F5 | 	and	local12, #16 wz
047cc     30 00 90 5D |  if_ne	jmp	#LR__0224
047d0     34 61 02 F6 | 	mov	local07, local11
047d4     0F 60 06 F5 | 	and	local07, #15
047d8     30 69 02 F6 | 	mov	local11, local07
047dc     2D 69 0A F2 | 	cmp	local11, local04 wz
047e0     08 00 90 AD |  if_e	jmp	#LR__0222
047e4     0E 68 0E F2 | 	cmp	local11, #14 wz
047e8     14 00 90 5D |  if_ne	jmp	#LR__0223
047ec                 | LR__0222
047ec     2C 61 02 F6 | 	mov	local07, local03
047f0     30 4B 02 F6 | 	mov	arg01, local07
047f4     E4 FC BF FD | 	call	#__system___gc_dofree
047f8     12 6B 02 F6 | 	mov	local12, result1
047fc     35 65 02 F6 | 	mov	local09, local12
04800                 | LR__0223
04800                 | LR__0224
04800     00 64 0E F2 | 	cmp	local09, #0 wz
04804     08 00 90 AD |  if_e	jmp	#LR__0225
04808     2A 65 5A F2 | 	cmps	local09, local01 wcz
0480c     90 FF 9F CD |  if_b	jmp	#LR__0221
04810                 | LR__0225
04810                 | LR__0226
04810     AF F0 03 F6 | 	mov	ptra, fp
04814     BF 00 A0 FD | 	call	#popregs_
04818                 | __system___gc_docollect_ret
04818     2D 00 64 FD | 	ret
0481c                 | 
0481c                 | __system___gc_markhub
0481c     0A 5A 05 F6 | 	mov	COUNT_, #10
04820     B0 00 A0 FD | 	call	#pushregs_
04824     25 55 02 F6 | 	mov	local01, arg01
04828     26 57 02 F6 | 	mov	local02, arg02
0482c     40 F8 BF FD | 	call	#__system___gc_ptrs
04830     12 59 02 F6 | 	mov	local03, result1
04834     13 5B 02 F6 | 	mov	local04, result2
04838                 | LR__0227
04838     2B 55 5A F2 | 	cmps	local01, local02 wcz
0483c     60 00 90 3D |  if_ae	jmp	#LR__0228
04840     2A 4F 02 FB | 	rdlong	arg03, local01
04844     04 54 06 F1 | 	add	local01, #4
04848     2C 4B 02 F6 | 	mov	arg01, local03
0484c     2D 4D 02 F6 | 	mov	arg02, local04
04850     04 FC BF FD | 	call	#__system___gc_isvalidptr
04854     12 5D 0A F6 | 	mov	local05, result1 wz
04858     DC FF 9F AD |  if_e	jmp	#LR__0227
0485c     2E 4B 02 F6 | 	mov	arg01, local05
04860     00 5E 06 F6 | 	mov	local06, #0
04864     02 4A 06 F1 | 	add	arg01, #2
04868     25 61 E2 FA | 	rdword	local07, arg01
0486c     36 00 00 FF 
04870     8F 60 0E F2 | 	cmp	local07, ##27791 wz
04874     01 5E 66 A6 |  if_e	neg	local06, #1
04878     2F 25 02 F6 | 	mov	result1, local06
0487c     12 63 0A F6 | 	mov	local08, result1 wz
04880     B4 FF 9F 5D |  if_ne	jmp	#LR__0227
04884     2E 65 02 F6 | 	mov	local09, local05
04888     02 64 06 F1 | 	add	local09, #2
0488c     32 67 E2 FA | 	rdword	local10, local09
04890     0F 66 26 F5 | 	andn	local10, #15
04894     2E 66 46 F5 | 	or	local10, #46
04898     32 67 52 FC | 	wrword	local10, local09
0489c     98 FF 9F FD | 	jmp	#LR__0227
048a0                 | LR__0228
048a0     AF F0 03 F6 | 	mov	ptra, fp
048a4     BF 00 A0 FD | 	call	#popregs_
048a8                 | __system___gc_markhub_ret
048a8     2D 00 64 FD | 	ret
048ac                 | 
048ac                 | __system___gc_markcog
048ac     06 5A 05 F6 | 	mov	COUNT_, #6
048b0     B0 00 A0 FD | 	call	#pushregs_
048b4     B8 F7 BF FD | 	call	#__system___gc_ptrs
048b8     12 55 02 F6 | 	mov	local01, result1
048bc     13 57 02 F6 | 	mov	local02, result2
048c0     00 58 06 F6 | 	mov	local03, #0
048c4                 | LR__0229
048c4     F0 5B 06 F6 | 	mov	local04, #496
048c8     2C 5B 82 F1 | 	sub	local04, local03
048cc     F0 5B 06 F1 | 	add	local04, #496
048d0                 | 	'.live	local04
048d0     00 5A 96 F9 | 	alts	local04, #0
048d4     2D 5D 02 F6 | 	mov	local05, local04
048d8     2B 4D 02 F6 | 	mov	arg02, local02
048dc     2A 4B 02 F6 | 	mov	arg01, local01
048e0     2E 4F 02 F6 | 	mov	arg03, local05
048e4     70 FB BF FD | 	call	#__system___gc_isvalidptr
048e8     12 5D 0A F6 | 	mov	local05, result1 wz
048ec     10 00 90 AD |  if_e	jmp	#LR__0230
048f0     02 5C 06 F1 | 	add	local05, #2
048f4     2E 5F E2 FA | 	rdword	local06, local05
048f8     20 5E 46 F5 | 	or	local06, #32
048fc     2E 5F 52 FC | 	wrword	local06, local05
04900                 | LR__0230
04900     01 58 06 F1 | 	add	local03, #1
04904     F0 59 5E F2 | 	cmps	local03, #496 wcz
04908     B8 FF 9F CD |  if_b	jmp	#LR__0229
0490c     AF F0 03 F6 | 	mov	ptra, fp
04910     BF 00 A0 FD | 	call	#popregs_
04914                 | __system___gc_markcog_ret
04914     2D 00 64 FD | 	ret
04918                 | 
04918                 | __system__write
04918     03 5A 05 F6 | 	mov	COUNT_, #3
0491c     B0 00 A0 FD | 	call	#pushregs_
04920     25 55 02 F6 | 	mov	local01, arg01
04924     26 57 02 F6 | 	mov	local02, arg02
04928     27 59 02 F6 | 	mov	local03, arg03
0492c     0A 54 1E F2 | 	cmp	local01, #10 wcz
04930     1C 00 90 CD |  if_b	jmp	#LR__0231
04934     01 00 00 FF 
04938     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0493c     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04940     01 00 00 FF 
04944     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04948     01 24 66 F6 | 	neg	result1, #1
0494c     28 00 90 FD | 	jmp	#LR__0232
04950                 | LR__0231
04950     2A 4B 02 F6 | 	mov	arg01, local01
04954     01 4A 66 F0 | 	shl	arg01, #1
04958     2A 4B 02 F1 | 	add	arg01, local01
0495c     04 4A 66 F0 | 	shl	arg01, #4
04960     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04964     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
04968     2B 4D 02 F6 | 	mov	arg02, local02
0496c     2C 4F 02 F6 | 	mov	arg03, local03
04970     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04974     4C 09 B0 FD | 	call	#__system___vfswrite
04978                 | LR__0232
04978     AF F0 03 F6 | 	mov	ptra, fp
0497c     BF 00 A0 FD | 	call	#popregs_
04980                 | __system__write_ret
04980     2D 00 64 FD | 	ret
04984                 | 
04984                 | __system__read
04984     03 5A 05 F6 | 	mov	COUNT_, #3
04988     B0 00 A0 FD | 	call	#pushregs_
0498c     25 55 02 F6 | 	mov	local01, arg01
04990     26 57 02 F6 | 	mov	local02, arg02
04994     27 59 02 F6 | 	mov	local03, arg03
04998     0A 54 1E F2 | 	cmp	local01, #10 wcz
0499c     1C 00 90 CD |  if_b	jmp	#LR__0233
049a0     01 00 00 FF 
049a4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
049a8     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
049ac     01 00 00 FF 
049b0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
049b4     01 24 66 F6 | 	neg	result1, #1
049b8     28 00 90 FD | 	jmp	#LR__0234
049bc                 | LR__0233
049bc     2A 4B 02 F6 | 	mov	arg01, local01
049c0     01 4A 66 F0 | 	shl	arg01, #1
049c4     2A 4B 02 F1 | 	add	arg01, local01
049c8     04 4A 66 F0 | 	shl	arg01, #4
049cc     1C 14 06 F1 | 	add	ptr___system__dat__, #28
049d0     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
049d4     2B 4D 02 F6 | 	mov	arg02, local02
049d8     2C 4F 02 F6 | 	mov	arg03, local03
049dc     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
049e0     A4 0A B0 FD | 	call	#__system___vfsread
049e4                 | LR__0234
049e4     AF F0 03 F6 | 	mov	ptra, fp
049e8     BF 00 A0 FD | 	call	#popregs_
049ec                 | __system__read_ret
049ec     2D 00 64 FD | 	ret
049f0                 | 
049f0                 | __system__close
049f0     01 5A 05 F6 | 	mov	COUNT_, #1
049f4     B0 00 A0 FD | 	call	#pushregs_
049f8     25 55 02 F6 | 	mov	local01, arg01
049fc     0A 54 1E F2 | 	cmp	local01, #10 wcz
04a00     1C 00 90 CD |  if_b	jmp	#LR__0235
04a04     01 00 00 FF 
04a08     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04a0c     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04a10     01 00 00 FF 
04a14     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04a18     01 24 66 F6 | 	neg	result1, #1
04a1c     20 00 90 FD | 	jmp	#LR__0236
04a20                 | LR__0235
04a20     2A 4B 02 F6 | 	mov	arg01, local01
04a24     01 4A 66 F0 | 	shl	arg01, #1
04a28     2A 4B 02 F1 | 	add	arg01, local01
04a2c     04 4A 66 F0 | 	shl	arg01, #4
04a30     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04a34     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
04a38     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04a3c     80 03 B0 FD | 	call	#__system___closeraw
04a40                 | LR__0236
04a40     AF F0 03 F6 | 	mov	ptra, fp
04a44     BF 00 A0 FD | 	call	#popregs_
04a48                 | __system__close_ret
04a48     2D 00 64 FD | 	ret
04a4c                 | 
04a4c                 | __system__lseek
04a4c     09 5A 05 F6 | 	mov	COUNT_, #9
04a50     B0 00 A0 FD | 	call	#pushregs_
04a54     25 55 02 F6 | 	mov	local01, arg01
04a58     26 57 02 F6 | 	mov	local02, arg02
04a5c     27 59 02 F6 | 	mov	local03, arg03
04a60     0A 54 1E F2 | 	cmp	local01, #10 wcz
04a64     1C 00 90 CD |  if_b	jmp	#LR__0237
04a68     01 00 00 FF 
04a6c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04a70     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04a74     01 00 00 FF 
04a78     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04a7c     01 24 66 F6 | 	neg	result1, #1
04a80     D8 00 90 FD | 	jmp	#LR__0241
04a84                 | LR__0237
04a84     2A 5B 02 F6 | 	mov	local04, local01
04a88     01 5A 66 F0 | 	shl	local04, #1
04a8c     2A 5B 02 F1 | 	add	local04, local01
04a90     04 5A 66 F0 | 	shl	local04, #4
04a94     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04a98     0A 5B 02 F1 | 	add	local04, ptr___system__dat__
04a9c     2C 5A 06 F1 | 	add	local04, #44
04aa0     2D 5D 0A FB | 	rdlong	local05, local04 wz
04aa4     2C 5A 86 F1 | 	sub	local04, #44
04aa8     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04aac     1C 00 90 5D |  if_ne	jmp	#LR__0238
04ab0     01 00 00 FF 
04ab4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04ab8     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
04abc     01 00 00 FF 
04ac0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04ac4     01 24 66 F6 | 	neg	result1, #1
04ac8     90 00 90 FD | 	jmp	#LR__0241
04acc                 | LR__0238
04acc     08 5A 06 F1 | 	add	local04, #8
04ad0     2D 5D 02 FB | 	rdlong	local05, local04
04ad4     08 5A 86 F1 | 	sub	local04, #8
04ad8     40 5C CE F7 | 	test	local05, #64 wz
04adc     14 00 90 AD |  if_e	jmp	#LR__0239
04ae0     08 5A 06 F1 | 	add	local04, #8
04ae4     2D 5D 02 FB | 	rdlong	local05, local04
04ae8     80 5C 46 F5 | 	or	local05, #128
04aec     2D 5D 62 FC | 	wrlong	local05, local04
04af0     08 5A 86 F1 | 	sub	local04, #8
04af4                 | LR__0239
04af4     2C 5A 06 F1 | 	add	local04, #44
04af8     2D 5D 02 FB | 	rdlong	local05, local04
04afc     2C 5A 86 F1 | 	sub	local04, #44
04b00     2E 5F 02 FB | 	rdlong	local06, local05
04b04     04 5C 06 F1 | 	add	local05, #4
04b08     2E 61 02 FB | 	rdlong	local07, local05
04b0c     2D 4B 02 F6 | 	mov	arg01, local04
04b10     2B 4D 02 F6 | 	mov	arg02, local02
04b14     2C 4F 02 F6 | 	mov	arg03, local03
04b18     07 63 02 F6 | 	mov	local08, objptr
04b1c     2F 0F 02 F6 | 	mov	objptr, local06
04b20     2D 60 62 FD | 	call	local07
04b24     31 0F 02 F6 | 	mov	objptr, local08
04b28     12 65 02 F6 | 	mov	local09, result1
04b2c     00 64 5E F2 | 	cmps	local09, #0 wcz
04b30     24 00 90 3D |  if_ae	jmp	#LR__0240
04b34     32 4B 6A F6 | 	neg	arg01, local09 wz
04b38     01 00 00 FF 
04b3c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04b40     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
04b44     01 00 00 FF 
04b48     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04b4c     01 24 66 56 |  if_ne	neg	result1, #1
04b50     00 24 06 A6 |  if_e	mov	result1, #0
04b54     04 00 90 FD | 	jmp	#LR__0241
04b58                 | LR__0240
04b58     32 25 02 F6 | 	mov	result1, local09
04b5c                 | LR__0241
04b5c     AF F0 03 F6 | 	mov	ptra, fp
04b60     BF 00 A0 FD | 	call	#popregs_
04b64                 | __system__lseek_ret
04b64     2D 00 64 FD | 	ret
04b68                 | 
04b68                 | __system____getftab
04b68     0A 4A 1E F2 | 	cmp	arg01, #10 wcz
04b6c     00 24 06 36 |  if_ae	mov	result1, #0
04b70     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
04b74     25 25 02 F6 | 	mov	result1, arg01
04b78     01 24 66 F0 | 	shl	result1, #1
04b7c     25 25 02 F1 | 	add	result1, arg01
04b80     04 24 66 F0 | 	shl	result1, #4
04b84     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04b88     0A 25 02 F1 | 	add	result1, ptr___system__dat__
04b8c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04b90                 | __system____getftab_ret
04b90     2D 00 64 FD | 	ret
04b94                 | 
04b94                 | __system___strrev
04b94     25 2B CA FA | 	rdbyte	_var01, arg01 wz
04b98     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
04b9c     25 2D 02 F6 | 	mov	_var02, arg01
04ba0     68 B4 9F FE | 	loc	pa,	#(@LR__0243-@LR__0242)
04ba4     93 00 A0 FD | 	call	#FCACHE_LOAD_
04ba8                 | LR__0242
04ba8     16 2B CA FA | 	rdbyte	_var01, _var02 wz
04bac     01 2C 06 51 |  if_ne	add	_var02, #1
04bb0     F4 FF 9F 5D |  if_ne	jmp	#LR__0242
04bb4                 | LR__0243
04bb4     01 2C 86 F1 | 	sub	_var02, #1
04bb8                 | LR__0244
04bb8     25 2D 5A F2 | 	cmps	_var02, arg01 wcz
04bbc     1C 00 90 ED |  if_be	jmp	#LR__0245
04bc0     25 2F C2 FA | 	rdbyte	_var03, arg01
04bc4     16 31 C2 FA | 	rdbyte	_var04, _var02
04bc8     25 31 42 FC | 	wrbyte	_var04, arg01
04bcc     16 2F 42 FC | 	wrbyte	_var03, _var02
04bd0     01 4A 06 F1 | 	add	arg01, #1
04bd4     01 2C 86 F1 | 	sub	_var02, #1
04bd8     DC FF 9F FD | 	jmp	#LR__0244
04bdc                 | LR__0245
04bdc                 | __system___strrev_ret
04bdc     2D 00 64 FD | 	ret
04be0                 | 
04be0                 | __system___fmtpad
04be0     0C 5A 05 F6 | 	mov	COUNT_, #12
04be4     B0 00 A0 FD | 	call	#pushregs_
04be8     25 55 02 F6 | 	mov	local01, arg01
04bec     26 57 02 F6 | 	mov	local02, arg02
04bf0     28 59 02 F6 | 	mov	local03, arg04
04bf4     2B 5B EA F8 | 	getbyte	local04, local02, #1
04bf8     16 56 46 F0 | 	shr	local02, #22
04bfc     03 56 0E F5 | 	and	local02, #3 wz
04c00     00 5C 06 F6 | 	mov	local05, #0
04c04     01 56 06 A6 |  if_e	mov	local02, #1
04c08     2C 57 CA F7 | 	test	local02, local03 wz
04c0c     00 24 06 A6 |  if_e	mov	result1, #0
04c10     80 00 90 AD |  if_e	jmp	#LR__0249
04c14     27 5B 82 F1 | 	sub	local04, arg03
04c18     2D 5F 02 F6 | 	mov	local06, local04
04c1c     00 5E 5E F2 | 	cmps	local06, #0 wcz
04c20     00 24 06 E6 |  if_be	mov	result1, #0
04c24     6C 00 90 ED |  if_be	jmp	#LR__0249
04c28     03 56 0E F2 | 	cmp	local02, #3 wz
04c2c     18 00 90 5D |  if_ne	jmp	#LR__0246
04c30     01 58 0E F2 | 	cmp	local03, #1 wz
04c34     6E 60 62 FD | 	wrz	local07
04c38     30 5F 02 F1 | 	add	local06, local07
04c3c     2F 5F 52 F6 | 	abs	local06, local06 wc
04c40     01 5E 46 F0 | 	shr	local06, #1
04c44     2F 5F 62 C6 |  if_b	neg	local06, local06
04c48                 | LR__0246
04c48     00 5E 5E F2 | 	cmps	local06, #0 wcz
04c4c     40 00 90 ED |  if_be	jmp	#LR__0248
04c50     2F 63 02 F6 | 	mov	local08, local06
04c54                 | LR__0247
04c54     2A 65 02 F6 | 	mov	local09, local01
04c58     32 61 02 FB | 	rdlong	local07, local09
04c5c     04 64 06 F1 | 	add	local09, #4
04c60     32 67 02 FB | 	rdlong	local10, local09
04c64     20 4A 06 F6 | 	mov	arg01, #32
04c68     07 69 02 F6 | 	mov	local11, objptr
04c6c     30 0F 02 F6 | 	mov	objptr, local07
04c70     2D 66 62 FD | 	call	local10
04c74     34 0F 02 F6 | 	mov	objptr, local11
04c78     12 6B 02 F6 | 	mov	local12, result1
04c7c     00 6A 5E F2 | 	cmps	local12, #0 wcz
04c80     35 25 02 C6 |  if_b	mov	result1, local12
04c84     0C 00 90 CD |  if_b	jmp	#LR__0249
04c88     35 5D 02 F1 | 	add	local05, local12
04c8c     F1 63 6E FB | 	djnz	local08, #LR__0247
04c90                 | LR__0248
04c90     2E 25 02 F6 | 	mov	result1, local05
04c94                 | LR__0249
04c94     AF F0 03 F6 | 	mov	ptra, fp
04c98     BF 00 A0 FD | 	call	#popregs_
04c9c                 | __system___fmtpad_ret
04c9c     2D 00 64 FD | 	ret
04ca0                 | 
04ca0                 | __system___uitoa
04ca0     09 5A 05 F6 | 	mov	COUNT_, #9
04ca4     B0 00 A0 FD | 	call	#pushregs_
04ca8     25 55 02 F6 | 	mov	local01, arg01
04cac     26 57 02 F6 | 	mov	local02, arg02
04cb0     27 59 02 F6 | 	mov	local03, arg03
04cb4     28 5B 02 F6 | 	mov	local04, arg04
04cb8     29 5D 0A F6 | 	mov	local05, arg05 wz
04cbc     2A 5F 02 F6 | 	mov	local06, local01
04cc0     00 60 06 F6 | 	mov	local07, #0
04cc4     37 62 06 56 |  if_ne	mov	local08, #55
04cc8     57 62 06 A6 |  if_e	mov	local08, #87
04ccc                 | LR__0250
04ccc     2B 09 03 F6 | 	mov	muldiva_, local02
04cd0     2C 0B 03 F6 | 	mov	muldivb_, local03
04cd4     CC 00 A0 FD | 	call	#unsdivide_
04cd8     84 65 02 F6 | 	mov	local09, muldiva_
04cdc     0A 64 1E F2 | 	cmp	local09, #10 wcz
04ce0     30 64 06 C1 |  if_b	add	local09, #48
04ce4     31 65 02 31 |  if_ae	add	local09, local08
04ce8     2F 65 42 FC | 	wrbyte	local09, local06
04cec     2B 09 03 F6 | 	mov	muldiva_, local02
04cf0     2C 0B 03 F6 | 	mov	muldivb_, local03
04cf4     01 5E 06 F1 | 	add	local06, #1
04cf8     CC 00 A0 FD | 	call	#unsdivide_
04cfc     85 57 0A F6 | 	mov	local02, muldivb_ wz
04d00     01 60 06 F1 | 	add	local07, #1
04d04     C4 FF 9F 5D |  if_ne	jmp	#LR__0250
04d08     2D 61 1A F2 | 	cmp	local07, local04 wcz
04d0c     BC FF 9F CD |  if_b	jmp	#LR__0250
04d10     2F 01 48 FC | 	wrbyte	#0, local06
04d14     2A 4B 02 F6 | 	mov	arg01, local01
04d18     78 FE BF FD | 	call	#__system___strrev
04d1c     30 25 02 F6 | 	mov	result1, local07
04d20     AF F0 03 F6 | 	mov	ptra, fp
04d24     BF 00 A0 FD | 	call	#popregs_
04d28                 | __system___uitoa_ret
04d28     2D 00 64 FD | 	ret
04d2c                 | 
04d2c                 | __system___gettxfunc
04d2c     03 5A 05 F6 | 	mov	COUNT_, #3
04d30     B0 00 A0 FD | 	call	#pushregs_
04d34     30 FE BF FD | 	call	#__system____getftab
04d38     12 55 0A F6 | 	mov	local01, result1 wz
04d3c     14 00 90 AD |  if_e	jmp	#LR__0251
04d40     08 54 06 F1 | 	add	local01, #8
04d44     2A 57 02 FB | 	rdlong	local02, local01
04d48     08 54 86 F1 | 	sub	local01, #8
04d4c     2B 59 0A F6 | 	mov	local03, local02 wz
04d50     08 00 90 5D |  if_ne	jmp	#LR__0252
04d54                 | LR__0251
04d54     00 24 06 F6 | 	mov	result1, #0
04d58     0C 00 90 FD | 	jmp	#LR__0253
04d5c                 | LR__0252
04d5c     2A 4B 02 F6 | 	mov	arg01, local01
04d60     09 4D 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
04d64     FC EA BF FD | 	call	#__system___make_methodptr
04d68                 | LR__0253
04d68     AF F0 03 F6 | 	mov	ptra, fp
04d6c     BF 00 A0 FD | 	call	#popregs_
04d70                 | __system___gettxfunc_ret
04d70     2D 00 64 FD | 	ret
04d74                 | 
04d74                 | __system___getiolock_0102
04d74     03 5A 05 F6 | 	mov	COUNT_, #3
04d78     B0 00 A0 FD | 	call	#pushregs_
04d7c     E8 FD BF FD | 	call	#__system____getftab
04d80     12 55 0A F6 | 	mov	local01, result1 wz
04d84     14 00 90 AD |  if_e	jmp	#LR__0254
04d88     08 54 06 F1 | 	add	local01, #8
04d8c     2A 57 02 FB | 	rdlong	local02, local01
04d90     08 54 86 F1 | 	sub	local01, #8
04d94     2B 59 0A F6 | 	mov	local03, local02 wz
04d98     10 00 90 5D |  if_ne	jmp	#LR__0255
04d9c                 | LR__0254
04d9c     18 14 06 F1 | 	add	ptr___system__dat__, #24
04da0     0A 25 02 F6 | 	mov	result1, ptr___system__dat__
04da4     18 14 86 F1 | 	sub	ptr___system__dat__, #24
04da8     08 00 90 FD | 	jmp	#LR__0256
04dac                 | LR__0255
04dac     0C 54 06 F1 | 	add	local01, #12
04db0     2A 25 02 F6 | 	mov	result1, local01
04db4                 | LR__0256
04db4     AF F0 03 F6 | 	mov	ptra, fp
04db8     BF 00 A0 FD | 	call	#popregs_
04dbc                 | __system___getiolock_0102_ret
04dbc     2D 00 64 FD | 	ret
04dc0                 | 
04dc0                 | __system___closeraw
04dc0     06 5A 05 F6 | 	mov	COUNT_, #6
04dc4     B0 00 A0 FD | 	call	#pushregs_
04dc8     25 55 02 F6 | 	mov	local01, arg01
04dcc     00 56 06 F6 | 	mov	local02, #0
04dd0     08 54 06 F1 | 	add	local01, #8
04dd4     2A 59 0A FB | 	rdlong	local03, local01 wz
04dd8     08 54 86 F1 | 	sub	local01, #8
04ddc     1C 00 90 5D |  if_ne	jmp	#LR__0257
04de0     01 00 00 FF 
04de4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04de8     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04dec     01 00 00 FF 
04df0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04df4     01 24 66 F6 | 	neg	result1, #1
04df8     90 00 90 FD | 	jmp	#LR__0260
04dfc                 | LR__0257
04dfc     28 54 06 F1 | 	add	local01, #40
04e00     2A 59 0A FB | 	rdlong	local03, local01 wz
04e04     28 54 86 F1 | 	sub	local01, #40
04e08     2C 00 90 AD |  if_e	jmp	#LR__0258
04e0c     28 54 06 F1 | 	add	local01, #40
04e10     2A 59 02 FB | 	rdlong	local03, local01
04e14     28 54 86 F1 | 	sub	local01, #40
04e18     2C 5B 02 FB | 	rdlong	local04, local03
04e1c     04 58 06 F1 | 	add	local03, #4
04e20     2C 5D 02 FB | 	rdlong	local05, local03
04e24     2A 4B 02 F6 | 	mov	arg01, local01
04e28     07 5F 02 F6 | 	mov	local06, objptr
04e2c     2D 0F 02 F6 | 	mov	objptr, local04
04e30     2D 5C 62 FD | 	call	local05
04e34     2F 0F 02 F6 | 	mov	objptr, local06
04e38                 | LR__0258
04e38     20 54 06 F1 | 	add	local01, #32
04e3c     2A 59 0A FB | 	rdlong	local03, local01 wz
04e40     20 54 86 F1 | 	sub	local01, #32
04e44     30 00 90 AD |  if_e	jmp	#LR__0259
04e48     20 54 06 F1 | 	add	local01, #32
04e4c     2A 59 02 FB | 	rdlong	local03, local01
04e50     20 54 86 F1 | 	sub	local01, #32
04e54     2C 5B 02 FB | 	rdlong	local04, local03
04e58     04 58 06 F1 | 	add	local03, #4
04e5c     2C 5D 02 FB | 	rdlong	local05, local03
04e60     2A 4B 02 F6 | 	mov	arg01, local01
04e64     07 5F 02 F6 | 	mov	local06, objptr
04e68     2D 0F 02 F6 | 	mov	objptr, local04
04e6c     2D 5C 62 FD | 	call	local05
04e70     2F 0F 02 F6 | 	mov	objptr, local06
04e74     12 57 02 F6 | 	mov	local02, result1
04e78                 | LR__0259
04e78     2A 4B 02 F6 | 	mov	arg01, local01
04e7c     00 4C 06 F6 | 	mov	arg02, #0
04e80     30 4E 06 F6 | 	mov	arg03, #48
04e84     A0 00 A0 FD | 	call	#\builtin_bytefill_
04e88     2B 25 02 F6 | 	mov	result1, local02
04e8c                 | LR__0260
04e8c     AF F0 03 F6 | 	mov	ptra, fp
04e90     BF 00 A0 FD | 	call	#popregs_
04e94                 | __system___closeraw_ret
04e94     2D 00 64 FD | 	ret
04e98                 | 
04e98                 | __system____default_getc
04e98     0C 5A 05 F6 | 	mov	COUNT_, #12
04e9c     B0 00 A0 FD | 	call	#pushregs_
04ea0     25 55 02 F6 | 	mov	local01, arg01
04ea4     2A 57 02 FB | 	rdlong	local02, local01
04ea8     08 56 06 F1 | 	add	local02, #8
04eac     2B 59 02 FB | 	rdlong	local03, local02
04eb0     08 56 86 F1 | 	sub	local02, #8
04eb4     02 58 CE F7 | 	test	local03, #2 wz
04eb8     08 00 90 AD |  if_e	jmp	#LR__0261
04ebc     2A 4B 02 F6 | 	mov	arg01, local01
04ec0     FC 01 B0 FD | 	call	#__system____default_flush
04ec4                 | LR__0261
04ec4     08 56 06 F1 | 	add	local02, #8
04ec8     2B 59 02 FB | 	rdlong	local03, local02
04ecc     01 58 46 F5 | 	or	local03, #1
04ed0     2B 59 62 FC | 	wrlong	local03, local02
04ed4     08 56 86 F1 | 	sub	local02, #8
04ed8     2B 5B 0A FB | 	rdlong	local04, local02 wz
04edc     7C 00 90 5D |  if_ne	jmp	#LR__0263
04ee0     2A 4B 02 F6 | 	mov	arg01, local01
04ee4     25 5D 02 FB | 	rdlong	local05, arg01
04ee8     0C 5C 06 F1 | 	add	local05, #12
04eec     2E 4D 02 F6 | 	mov	arg02, local05
04ef0     0C 5C 86 F1 | 	sub	local05, #12
04ef4     10 4A 06 F1 | 	add	arg01, #16
04ef8     25 5F 02 FB | 	rdlong	local06, arg01
04efc     10 4A 86 F1 | 	sub	arg01, #16
04f00     2F 61 02 FB | 	rdlong	local07, local06
04f04     04 5E 06 F1 | 	add	local06, #4
04f08     2F 63 02 FB | 	rdlong	local08, local06
04f0c     0A 4E C6 F9 | 	decod	arg03, #10
04f10     07 65 02 F6 | 	mov	local09, objptr
04f14     30 0F 02 F6 | 	mov	objptr, local07
04f18     2D 62 62 FD | 	call	local08
04f1c     32 0F 02 F6 | 	mov	objptr, local09
04f20     12 67 02 F6 | 	mov	local10, result1
04f24     00 66 5E F2 | 	cmps	local10, #0 wcz
04f28     01 24 66 C6 |  if_b	neg	result1, #1
04f2c     28 00 90 CD |  if_b	jmp	#LR__0262
04f30     2E 67 62 FC | 	wrlong	local10, local05
04f34     0C 5C 06 F1 | 	add	local05, #12
04f38     2E 69 02 F6 | 	mov	local11, local05
04f3c     08 5C 86 F1 | 	sub	local05, #8
04f40     2E 69 62 FC | 	wrlong	local11, local05
04f44     04 5C 06 F1 | 	add	local05, #4
04f48     2E 5F 02 FB | 	rdlong	local06, local05
04f4c     01 5E 46 F5 | 	or	local06, #1
04f50     2E 5F 62 FC | 	wrlong	local06, local05
04f54     33 25 02 F6 | 	mov	result1, local10
04f58                 | LR__0262
04f58     12 5B 02 F6 | 	mov	local04, result1
04f5c                 | LR__0263
04f5c     00 5A 5E F2 | 	cmps	local04, #0 wcz
04f60     01 24 66 E6 |  if_be	neg	result1, #1
04f64     1C 00 90 ED |  if_be	jmp	#LR__0264
04f68     01 5A 86 F1 | 	sub	local04, #1
04f6c     2B 5B 62 FC | 	wrlong	local04, local02
04f70     04 56 06 F1 | 	add	local02, #4
04f74     2B 6B 02 FB | 	rdlong	local12, local02
04f78     35 25 C2 FA | 	rdbyte	result1, local12
04f7c     01 6A 06 F1 | 	add	local12, #1
04f80     2B 6B 62 FC | 	wrlong	local12, local02
04f84                 | LR__0264
04f84     AF F0 03 F6 | 	mov	ptra, fp
04f88     BF 00 A0 FD | 	call	#popregs_
04f8c                 | __system____default_getc_ret
04f8c     2D 00 64 FD | 	ret
04f90                 | 
04f90                 | __system____default_putc
04f90     06 5A 05 F6 | 	mov	COUNT_, #6
04f94     B0 00 A0 FD | 	call	#pushregs_
04f98     25 55 02 F6 | 	mov	local01, arg01
04f9c     26 57 02 F6 | 	mov	local02, arg02
04fa0     2B 59 02 FB | 	rdlong	local03, local02
04fa4     08 58 06 F1 | 	add	local03, #8
04fa8     2C 5B 02 FB | 	rdlong	local04, local03
04fac     08 58 86 F1 | 	sub	local03, #8
04fb0     01 5A CE F7 | 	test	local04, #1 wz
04fb4     08 00 90 AD |  if_e	jmp	#LR__0265
04fb8     2B 4B 02 F6 | 	mov	arg01, local02
04fbc     00 01 B0 FD | 	call	#__system____default_flush
04fc0                 | LR__0265
04fc0     08 58 06 F1 | 	add	local03, #8
04fc4     2C 5B 02 FB | 	rdlong	local04, local03
04fc8     02 5A 46 F5 | 	or	local04, #2
04fcc     2C 5B 62 FC | 	wrlong	local04, local03
04fd0     08 58 86 F1 | 	sub	local03, #8
04fd4     2C 5D 02 FB | 	rdlong	local05, local03
04fd8     2E 5F 02 F6 | 	mov	local06, local05
04fdc     0C 58 06 F1 | 	add	local03, #12
04fe0     2C 5F 02 F1 | 	add	local06, local03
04fe4     2F 55 42 FC | 	wrbyte	local01, local06
04fe8     FF 54 06 F5 | 	and	local01, #255
04fec     01 5C 06 F1 | 	add	local05, #1
04ff0     0C 58 86 F1 | 	sub	local03, #12
04ff4     2C 5D 62 FC | 	wrlong	local05, local03
04ff8     02 00 00 FF 
04ffc     00 5C 0E F2 | 	cmp	local05, ##1024 wz
05000     10 00 90 5D |  if_ne	jmp	#LR__0266
05004     2B 4B 02 F6 | 	mov	arg01, local02
05008     B4 00 B0 FD | 	call	#__system____default_flush
0500c     00 24 0E F2 | 	cmp	result1, #0 wz
05010     01 54 66 56 |  if_ne	neg	local01, #1
05014                 | LR__0266
05014     2A 25 02 F6 | 	mov	result1, local01
05018     AF F0 03 F6 | 	mov	ptra, fp
0501c     BF 00 A0 FD | 	call	#popregs_
05020                 | __system____default_putc_ret
05020     2D 00 64 FD | 	ret
05024                 | 
05024                 | __system____default_putc_terminal
05024     06 5A 05 F6 | 	mov	COUNT_, #6
05028     B0 00 A0 FD | 	call	#pushregs_
0502c     25 55 02 F6 | 	mov	local01, arg01
05030     26 57 02 F6 | 	mov	local02, arg02
05034     2B 59 02 FB | 	rdlong	local03, local02
05038     08 58 06 F1 | 	add	local03, #8
0503c     2C 5B 02 FB | 	rdlong	local04, local03
05040     08 58 86 F1 | 	sub	local03, #8
05044     01 5A CE F7 | 	test	local04, #1 wz
05048     08 00 90 AD |  if_e	jmp	#LR__0267
0504c     2B 4B 02 F6 | 	mov	arg01, local02
05050     6C 00 B0 FD | 	call	#__system____default_flush
05054                 | LR__0267
05054     08 58 06 F1 | 	add	local03, #8
05058     2C 5B 02 FB | 	rdlong	local04, local03
0505c     02 5A 46 F5 | 	or	local04, #2
05060     2C 5B 62 FC | 	wrlong	local04, local03
05064     08 58 86 F1 | 	sub	local03, #8
05068     2C 5D 02 FB | 	rdlong	local05, local03
0506c     2E 5F 02 F6 | 	mov	local06, local05
05070     0C 58 06 F1 | 	add	local03, #12
05074     2C 5F 02 F1 | 	add	local06, local03
05078     2F 55 42 FC | 	wrbyte	local01, local06
0507c     FF 54 06 F5 | 	and	local01, #255
05080     0C 58 86 F1 | 	sub	local03, #12
05084     01 5C 06 F1 | 	add	local05, #1
05088     2C 5D 62 FC | 	wrlong	local05, local03
0508c     0A 54 0E F2 | 	cmp	local01, #10 wz
05090     0C 00 90 AD |  if_e	jmp	#LR__0268
05094     02 00 00 FF 
05098     00 5C 0E F2 | 	cmp	local05, ##1024 wz
0509c     10 00 90 5D |  if_ne	jmp	#LR__0269
050a0                 | LR__0268
050a0     2B 4B 02 F6 | 	mov	arg01, local02
050a4     18 00 B0 FD | 	call	#__system____default_flush
050a8     00 24 0E F2 | 	cmp	result1, #0 wz
050ac     01 54 66 56 |  if_ne	neg	local01, #1
050b0                 | LR__0269
050b0     2A 25 02 F6 | 	mov	result1, local01
050b4     AF F0 03 F6 | 	mov	ptra, fp
050b8     BF 00 A0 FD | 	call	#popregs_
050bc                 | __system____default_putc_terminal_ret
050bc     2D 00 64 FD | 	ret
050c0                 | 
050c0                 | __system____default_flush
050c0     0F 5A 05 F6 | 	mov	COUNT_, #15
050c4     B0 00 A0 FD | 	call	#pushregs_
050c8     25 55 02 F6 | 	mov	local01, arg01
050cc     2A 57 02 FB | 	rdlong	local02, local01
050d0     2B 59 02 FB | 	rdlong	local03, local02
050d4     08 56 06 F1 | 	add	local02, #8
050d8     2B 5B 02 FB | 	rdlong	local04, local02
050dc     08 56 86 F1 | 	sub	local02, #8
050e0     02 5A CE F7 | 	test	local04, #2 wz
050e4     B8 00 90 AD |  if_e	jmp	#LR__0272
050e8     00 58 5E F2 | 	cmps	local03, #0 wcz
050ec     30 01 90 ED |  if_be	jmp	#LR__0274
050f0     08 54 06 F1 | 	add	local01, #8
050f4     2A 5B 02 FB | 	rdlong	local04, local01
050f8     08 54 86 F1 | 	sub	local01, #8
050fc     40 5A CE F7 | 	test	local04, #64 wz
05100     5C 00 90 AD |  if_e	jmp	#LR__0271
05104     08 54 06 F1 | 	add	local01, #8
05108     2A 5B 02 FB | 	rdlong	local04, local01
0510c     08 54 86 F1 | 	sub	local01, #8
05110     80 5A CE F7 | 	test	local04, #128 wz
05114     48 00 90 AD |  if_e	jmp	#LR__0270
05118     2C 54 06 F1 | 	add	local01, #44
0511c     2A 5B 02 FB | 	rdlong	local04, local01
05120     2C 54 86 F1 | 	sub	local01, #44
05124     2D 5D 02 FB | 	rdlong	local05, local04
05128     04 5A 06 F1 | 	add	local04, #4
0512c     2D 5F 02 FB | 	rdlong	local06, local04
05130     2A 4B 02 F6 | 	mov	arg01, local01
05134     00 4C 06 F6 | 	mov	arg02, #0
05138     02 4E 06 F6 | 	mov	arg03, #2
0513c     07 61 02 F6 | 	mov	local07, objptr
05140     2E 0F 02 F6 | 	mov	objptr, local05
05144     2D 5E 62 FD | 	call	local06
05148     30 0F 02 F6 | 	mov	objptr, local07
0514c     08 54 06 F1 | 	add	local01, #8
05150     2A 5B 02 FB | 	rdlong	local04, local01
05154     80 5A 26 F5 | 	andn	local04, #128
05158     2A 5B 62 FC | 	wrlong	local04, local01
0515c     08 54 86 F1 | 	sub	local01, #8
05160                 | LR__0270
05160                 | LR__0271
05160     0C 56 06 F1 | 	add	local02, #12
05164     2B 4D 02 F6 | 	mov	arg02, local02
05168     0C 56 86 F1 | 	sub	local02, #12
0516c     14 54 06 F1 | 	add	local01, #20
05170     2A 5B 02 FB | 	rdlong	local04, local01
05174     14 54 86 F1 | 	sub	local01, #20
05178     2D 5D 02 FB | 	rdlong	local05, local04
0517c     04 5A 06 F1 | 	add	local04, #4
05180     2D 5F 02 FB | 	rdlong	local06, local04
05184     2A 4B 02 F6 | 	mov	arg01, local01
05188     2C 4F 02 F6 | 	mov	arg03, local03
0518c     07 61 02 F6 | 	mov	local07, objptr
05190     2E 0F 02 F6 | 	mov	objptr, local05
05194     2D 5E 62 FD | 	call	local06
05198     30 0F 02 F6 | 	mov	objptr, local07
0519c     80 00 90 FD | 	jmp	#LR__0274
051a0                 | LR__0272
051a0     08 56 06 F1 | 	add	local02, #8
051a4     2B 5B 02 FB | 	rdlong	local04, local02
051a8     08 56 86 F1 | 	sub	local02, #8
051ac     01 5A CE F7 | 	test	local04, #1 wz
051b0     6C 00 90 AD |  if_e	jmp	#LR__0273
051b4     00 58 0E F2 | 	cmp	local03, #0 wz
051b8     64 00 90 AD |  if_e	jmp	#LR__0273
051bc     2C 54 06 F1 | 	add	local01, #44
051c0     2A 63 02 FB | 	rdlong	local08, local01
051c4     2C 54 86 F1 | 	sub	local01, #44
051c8     31 5B 02 F6 | 	mov	local04, local08
051cc     2D 5D 02 FB | 	rdlong	local05, local04
051d0     04 5A 06 F1 | 	add	local04, #4
051d4     2D 65 02 FB | 	rdlong	local09, local04
051d8     04 5A 86 F1 | 	sub	local04, #4
051dc     32 5F 02 F6 | 	mov	local06, local09
051e0     2A 67 02 F6 | 	mov	local10, local01
051e4     2C 69 02 F6 | 	mov	local11, local03
051e8     34 69 62 F6 | 	neg	local11, local11
051ec     34 6B 02 F6 | 	mov	local12, local11
051f0     01 60 06 F6 | 	mov	local07, #1
051f4     33 4B 02 F6 | 	mov	arg01, local10
051f8     35 4D 02 F6 | 	mov	arg02, local12
051fc     01 4E 06 F6 | 	mov	arg03, #1
05200     07 6D 02 F6 | 	mov	local13, objptr
05204     2E 0F 02 F6 | 	mov	objptr, local05
05208     2D 5E 62 FD | 	call	local06
0520c     36 0F 02 F6 | 	mov	objptr, local13
05210     12 6F 02 F6 | 	mov	local14, result1
05214     37 71 02 F6 | 	mov	local15, local14
05218     00 70 5E F2 | 	cmps	local15, #0 wcz
0521c     2C 71 02 36 |  if_ae	mov	local15, local03
05220                 | LR__0273
05220                 | LR__0274
05220     2B 01 68 FC | 	wrlong	#0, local02
05224     04 56 06 F1 | 	add	local02, #4
05228     2B 01 68 FC | 	wrlong	#0, local02
0522c     04 56 06 F1 | 	add	local02, #4
05230     2B 01 68 FC | 	wrlong	#0, local02
05234     00 24 06 F6 | 	mov	result1, #0
05238     AF F0 03 F6 | 	mov	ptra, fp
0523c     BF 00 A0 FD | 	call	#popregs_
05240                 | __system____default_flush_ret
05240     2D 00 64 FD | 	ret
05244                 | 
05244                 | __system___rxtxioctl_0131
05244     02 5A 05 F6 | 	mov	COUNT_, #2
05248     B0 00 A0 FD | 	call	#pushregs_
0524c     26 55 02 F6 | 	mov	local01, arg02
05250     27 57 02 F6 | 	mov	local02, arg03
05254     00 55 0E F2 | 	cmp	local01, #256 wz
05258     0C 00 90 AD |  if_e	jmp	#LR__0275
0525c     01 55 0E F2 | 	cmp	local01, #257 wz
05260     1C 00 90 AD |  if_e	jmp	#LR__0276
05264     30 00 90 FD | 	jmp	#LR__0277
05268                 | LR__0275
05268     08 14 06 F1 | 	add	ptr___system__dat__, #8
0526c     0A 25 02 FB | 	rdlong	result1, ptr___system__dat__
05270     08 14 86 F1 | 	sub	ptr___system__dat__, #8
05274     2B 25 62 FC | 	wrlong	result1, local02
05278     00 24 06 F6 | 	mov	result1, #0
0527c     30 00 90 FD | 	jmp	#LR__0278
05280                 | LR__0276
05280     2B 4B 02 FB | 	rdlong	arg01, local02
05284     08 14 06 F1 | 	add	ptr___system__dat__, #8
05288     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
0528c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
05290     00 24 06 F6 | 	mov	result1, #0
05294     18 00 90 FD | 	jmp	#LR__0278
05298                 | LR__0277
05298     01 00 00 FF 
0529c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
052a0     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
052a4     01 00 00 FF 
052a8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
052ac     01 24 66 F6 | 	neg	result1, #1
052b0                 | LR__0278
052b0     AF F0 03 F6 | 	mov	ptra, fp
052b4     BF 00 A0 FD | 	call	#popregs_
052b8                 | __system___rxtxioctl_0131_ret
052b8     2D 00 64 FD | 	ret
052bc                 | 
052bc                 | __system____dummy_flush_0132
052bc     00 24 06 F6 | 	mov	result1, #0
052c0                 | __system____dummy_flush_0132_ret
052c0     2D 00 64 FD | 	ret
052c4                 | 
052c4                 | __system___vfswrite
052c4     0B 5A 05 F6 | 	mov	COUNT_, #11
052c8     B0 00 A0 FD | 	call	#pushregs_
052cc     25 55 02 F6 | 	mov	local01, arg01
052d0     26 57 02 F6 | 	mov	local02, arg02
052d4     27 59 02 F6 | 	mov	local03, arg03
052d8     2B 5B 02 F6 | 	mov	local04, local02
052dc     08 54 06 F1 | 	add	local01, #8
052e0     2A 5D 02 FB | 	rdlong	local05, local01
052e4     08 54 86 F1 | 	sub	local01, #8
052e8     02 5C CE F7 | 	test	local05, #2 wz
052ec     1C 00 90 5D |  if_ne	jmp	#LR__0279
052f0     01 00 00 FF 
052f4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
052f8     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
052fc     01 00 00 FF 
05300     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05304     01 24 66 F6 | 	neg	result1, #1
05308     70 01 90 FD | 	jmp	#LR__0287
0530c                 | LR__0279
0530c     08 54 06 F1 | 	add	local01, #8
05310     2A 5D 02 FB | 	rdlong	local05, local01
05314     08 54 86 F1 | 	sub	local01, #8
05318     40 5C CE F7 | 	test	local05, #64 wz
0531c     5C 00 90 AD |  if_e	jmp	#LR__0281
05320     08 54 06 F1 | 	add	local01, #8
05324     2A 5D 02 FB | 	rdlong	local05, local01
05328     08 54 86 F1 | 	sub	local01, #8
0532c     80 5C CE F7 | 	test	local05, #128 wz
05330     48 00 90 AD |  if_e	jmp	#LR__0280
05334     2C 54 06 F1 | 	add	local01, #44
05338     2A 5D 02 FB | 	rdlong	local05, local01
0533c     2C 54 86 F1 | 	sub	local01, #44
05340     2E 5F 02 FB | 	rdlong	local06, local05
05344     04 5C 06 F1 | 	add	local05, #4
05348     2E 61 02 FB | 	rdlong	local07, local05
0534c     2A 4B 02 F6 | 	mov	arg01, local01
05350     00 4C 06 F6 | 	mov	arg02, #0
05354     02 4E 06 F6 | 	mov	arg03, #2
05358     07 63 02 F6 | 	mov	local08, objptr
0535c     2F 0F 02 F6 | 	mov	objptr, local06
05360     2D 60 62 FD | 	call	local07
05364     31 0F 02 F6 | 	mov	objptr, local08
05368     08 54 06 F1 | 	add	local01, #8
0536c     2A 5D 02 FB | 	rdlong	local05, local01
05370     80 5C 26 F5 | 	andn	local05, #128
05374     2A 5D 62 FC | 	wrlong	local05, local01
05378     08 54 86 F1 | 	sub	local01, #8
0537c                 | LR__0280
0537c                 | LR__0281
0537c     14 54 06 F1 | 	add	local01, #20
05380     2A 5D 0A FB | 	rdlong	local05, local01 wz
05384     14 54 86 F1 | 	sub	local01, #20
05388     7C 00 90 AD |  if_e	jmp	#LR__0283
0538c     14 54 06 F1 | 	add	local01, #20
05390     2A 5D 02 FB | 	rdlong	local05, local01
05394     14 54 86 F1 | 	sub	local01, #20
05398     2E 5F 02 FB | 	rdlong	local06, local05
0539c     04 5C 06 F1 | 	add	local05, #4
053a0     2E 61 02 FB | 	rdlong	local07, local05
053a4     2B 4D 02 F6 | 	mov	arg02, local02
053a8     2C 4F 02 F6 | 	mov	arg03, local03
053ac     2A 4B 02 F6 | 	mov	arg01, local01
053b0     07 63 02 F6 | 	mov	local08, objptr
053b4     2F 0F 02 F6 | 	mov	objptr, local06
053b8     2D 60 62 FD | 	call	local07
053bc     31 0F 02 F6 | 	mov	objptr, local08
053c0     12 65 02 F6 | 	mov	local09, result1
053c4     00 64 5E F2 | 	cmps	local09, #0 wcz
053c8     34 00 90 3D |  if_ae	jmp	#LR__0282
053cc     08 54 06 F1 | 	add	local01, #8
053d0     2A 5D 02 FB | 	rdlong	local05, local01
053d4     20 5C 46 F5 | 	or	local05, #32
053d8     2A 5D 62 FC | 	wrlong	local05, local01
053dc     01 00 00 FF 
053e0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
053e4     0A 65 62 FC | 	wrlong	local09, ptr___system__dat__
053e8     01 00 00 FF 
053ec     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
053f0     00 64 0E F2 | 	cmp	local09, #0 wz
053f4     01 24 66 56 |  if_ne	neg	result1, #1
053f8     00 24 06 A6 |  if_e	mov	result1, #0
053fc     7C 00 90 FD | 	jmp	#LR__0287
05400                 | LR__0282
05400     32 25 02 F6 | 	mov	result1, local09
05404     74 00 90 FD | 	jmp	#LR__0287
05408                 | LR__0283
05408     18 54 06 F1 | 	add	local01, #24
0540c     2A 67 0A FB | 	rdlong	local10, local01 wz
05410     18 54 86 F1 | 	sub	local01, #24
05414     1C 00 90 5D |  if_ne	jmp	#LR__0284
05418     01 00 00 FF 
0541c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05420     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
05424     01 00 00 FF 
05428     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0542c     01 24 66 F6 | 	neg	result1, #1
05430     48 00 90 FD | 	jmp	#LR__0287
05434                 | LR__0284
05434     00 64 06 F6 | 	mov	local09, #0
05438                 | LR__0285
05438     00 58 1E F2 | 	cmp	local03, #0 wcz
0543c     38 00 90 ED |  if_be	jmp	#LR__0286
05440     33 5D 02 F6 | 	mov	local05, local10
05444     2E 5F 02 FB | 	rdlong	local06, local05
05448     04 5C 06 F1 | 	add	local05, #4
0544c     2E 61 02 FB | 	rdlong	local07, local05
05450     2D 4B C2 FA | 	rdbyte	arg01, local04
05454     2A 4D 02 F6 | 	mov	arg02, local01
05458     07 69 02 F6 | 	mov	local11, objptr
0545c     2F 0F 02 F6 | 	mov	objptr, local06
05460     01 5A 06 F1 | 	add	local04, #1
05464     2D 60 62 FD | 	call	local07
05468     34 0F 02 F6 | 	mov	objptr, local11
0546c     12 65 02 F1 | 	add	local09, result1
05470     01 58 86 F1 | 	sub	local03, #1
05474     C0 FF 9F FD | 	jmp	#LR__0285
05478                 | LR__0286
05478     32 25 02 F6 | 	mov	result1, local09
0547c                 | LR__0287
0547c     AF F0 03 F6 | 	mov	ptra, fp
05480     BF 00 A0 FD | 	call	#popregs_
05484                 | __system___vfswrite_ret
05484     2D 00 64 FD | 	ret
05488                 | 
05488                 | __system___vfsread
05488     0F 5A 05 F6 | 	mov	COUNT_, #15
0548c     B0 00 A0 FD | 	call	#pushregs_
05490     2C F0 07 F1 | 	add	ptra, #44
05494     04 5E 05 F1 | 	add	fp, #4
05498     AF 4A 62 FC | 	wrlong	arg01, fp
0549c     04 5E 05 F1 | 	add	fp, #4
054a0     AF 4C 62 FC | 	wrlong	arg02, fp
054a4     04 5E 05 F1 | 	add	fp, #4
054a8     AF 4E 62 FC | 	wrlong	arg03, fp
054ac     04 5E 85 F1 | 	sub	fp, #4
054b0     AF 54 02 FB | 	rdlong	local01, fp
054b4     14 5E 05 F1 | 	add	fp, #20
054b8     AF 54 62 FC | 	wrlong	local01, fp
054bc     04 5E 05 F1 | 	add	fp, #4
054c0     AF 00 68 FC | 	wrlong	#0, fp
054c4     1C 5E 85 F1 | 	sub	fp, #28
054c8     AF 56 02 FB | 	rdlong	local02, fp
054cc     04 5E 85 F1 | 	sub	fp, #4
054d0     08 56 06 F1 | 	add	local02, #8
054d4     2B 55 02 FB | 	rdlong	local01, local02
054d8     01 54 CE F7 | 	test	local01, #1 wz
054dc     1C 00 90 5D |  if_ne	jmp	#LR__0288
054e0     01 00 00 FF 
054e4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
054e8     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
054ec     01 00 00 FF 
054f0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
054f4     01 24 66 F6 | 	neg	result1, #1
054f8     9C 02 90 FD | 	jmp	#LR__0296
054fc                 | LR__0288
054fc     04 5E 05 F1 | 	add	fp, #4
05500     AF 54 02 FB | 	rdlong	local01, fp
05504     04 5E 85 F1 | 	sub	fp, #4
05508     10 54 06 F1 | 	add	local01, #16
0550c     2A 59 0A FB | 	rdlong	local03, local01 wz
05510     B4 00 90 AD |  if_e	jmp	#LR__0290
05514     04 5E 05 F1 | 	add	fp, #4
05518     AF 5A 02 FB | 	rdlong	local04, fp
0551c     10 5A 06 F1 | 	add	local04, #16
05520     2D 55 02 FB | 	rdlong	local01, local04
05524     2A 57 02 FB | 	rdlong	local02, local01
05528     04 54 06 F1 | 	add	local01, #4
0552c     2A 59 02 FB | 	rdlong	local03, local01
05530     AF 4A 02 FB | 	rdlong	arg01, fp
05534     04 5E 05 F1 | 	add	fp, #4
05538     AF 4C 02 FB | 	rdlong	arg02, fp
0553c     04 5E 05 F1 | 	add	fp, #4
05540     AF 4E 02 FB | 	rdlong	arg03, fp
05544     0C 5E 85 F1 | 	sub	fp, #12
05548     07 5D 02 F6 | 	mov	local05, objptr
0554c     2B 0F 02 F6 | 	mov	objptr, local02
05550     2D 58 62 FD | 	call	local03
05554     2E 0F 02 F6 | 	mov	objptr, local05
05558     10 5E 05 F1 | 	add	fp, #16
0555c     AF 24 62 FC | 	wrlong	result1, fp
05560     10 5E 85 F1 | 	sub	fp, #16
05564     00 24 5E F2 | 	cmps	result1, #0 wcz
05568     4C 00 90 3D |  if_ae	jmp	#LR__0289
0556c     04 5E 05 F1 | 	add	fp, #4
05570     AF 54 02 FB | 	rdlong	local01, fp
05574     2A 5B 02 F6 | 	mov	local04, local01
05578     08 5A 06 F1 | 	add	local04, #8
0557c     2D 59 02 FB | 	rdlong	local03, local04
05580     20 58 46 F5 | 	or	local03, #32
05584     08 54 06 F1 | 	add	local01, #8
05588     2A 59 62 FC | 	wrlong	local03, local01
0558c     0C 5E 05 F1 | 	add	fp, #12
05590     AF 4A 0A FB | 	rdlong	arg01, fp wz
05594     10 5E 85 F1 | 	sub	fp, #16
05598     01 00 00 FF 
0559c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
055a0     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
055a4     01 00 00 FF 
055a8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
055ac     01 24 66 56 |  if_ne	neg	result1, #1
055b0     00 24 06 A6 |  if_e	mov	result1, #0
055b4     E0 01 90 FD | 	jmp	#LR__0296
055b8                 | LR__0289
055b8     10 5E 05 F1 | 	add	fp, #16
055bc     AF 24 02 FB | 	rdlong	result1, fp
055c0     10 5E 85 F1 | 	sub	fp, #16
055c4     D0 01 90 FD | 	jmp	#LR__0296
055c8                 | LR__0290
055c8     04 5E 05 F1 | 	add	fp, #4
055cc     AF 54 02 FB | 	rdlong	local01, fp
055d0     1C 54 06 F1 | 	add	local01, #28
055d4     2A 59 02 FB | 	rdlong	local03, local01
055d8     14 5E 05 F1 | 	add	fp, #20
055dc     AF 58 62 FC | 	wrlong	local03, fp
055e0     AF 54 0A FB | 	rdlong	local01, fp wz
055e4     18 5E 85 F1 | 	sub	fp, #24
055e8     1C 00 90 5D |  if_ne	jmp	#LR__0291
055ec     01 00 00 FF 
055f0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
055f4     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
055f8     01 00 00 FF 
055fc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05600     01 24 66 F6 | 	neg	result1, #1
05604     90 01 90 FD | 	jmp	#LR__0296
05608                 | LR__0291
05608     04 5E 05 F1 | 	add	fp, #4
0560c     AF 54 02 FB | 	rdlong	local01, fp
05610     04 5E 85 F1 | 	sub	fp, #4
05614     24 54 06 F1 | 	add	local01, #36
05618     2A 59 0A FB | 	rdlong	local03, local01 wz
0561c     A0 00 90 AD |  if_e	jmp	#LR__0293
05620     24 5E 05 F1 | 	add	fp, #36
05624     AF 5E 02 F6 | 	mov	local06, fp
05628     20 5E 85 F1 | 	sub	fp, #32
0562c     AF 60 02 FB | 	rdlong	local07, fp
05630     30 5B 02 F6 | 	mov	local04, local07
05634     24 5A 06 F1 | 	add	local04, #36
05638     2D 63 02 FB | 	rdlong	local08, local04
0563c     31 55 02 F6 | 	mov	local01, local08
05640     2A 57 02 FB | 	rdlong	local02, local01
05644     04 54 06 F1 | 	add	local01, #4
05648     2A 65 02 FB | 	rdlong	local09, local01
0564c     32 59 02 F6 | 	mov	local03, local09
05650     30 67 02 F6 | 	mov	local10, local07
05654     04 5E 85 F1 | 	sub	fp, #4
05658     33 69 02 F6 | 	mov	local11, local10
0565c     00 6B 06 F6 | 	mov	local12, #256
05660     2F 6D 02 F6 | 	mov	local13, local06
05664     34 4B 02 F6 | 	mov	arg01, local11
05668     00 4D 06 F6 | 	mov	arg02, #256
0566c     36 4F 02 F6 | 	mov	arg03, local13
05670     07 6F 02 F6 | 	mov	local14, objptr
05674     2B 0F 02 F6 | 	mov	objptr, local02
05678     2D 58 62 FD | 	call	local03
0567c     37 0F 02 F6 | 	mov	objptr, local14
05680     12 71 02 F6 | 	mov	local15, result1
05684     10 5E 05 F1 | 	add	fp, #16
05688     AF 70 62 FC | 	wrlong	local15, fp
0568c     AF 56 0A FB | 	rdlong	local02, fp wz
05690     10 5E 85 F1 | 	sub	fp, #16
05694     28 00 90 5D |  if_ne	jmp	#LR__0292
05698     24 5E 05 F1 | 	add	fp, #36
0569c     AF 5A 02 FB | 	rdlong	local04, fp
056a0     24 5E 85 F1 | 	sub	fp, #36
056a4     2D 59 02 F6 | 	mov	local03, local04
056a8     02 58 0E F5 | 	and	local03, #2 wz
056ac     10 00 90 AD |  if_e	jmp	#LR__0292
056b0     01 54 06 F6 | 	mov	local01, #1
056b4     20 5E 05 F1 | 	add	fp, #32
056b8     AF 02 68 FC | 	wrlong	#1, fp
056bc     20 5E 85 F1 | 	sub	fp, #32
056c0                 | LR__0292
056c0                 | LR__0293
056c0     10 5E 05 F1 | 	add	fp, #16
056c4     AF 00 68 FC | 	wrlong	#0, fp
056c8     10 5E 85 F1 | 	sub	fp, #16
056cc                 | LR__0294
056cc     0C 5E 05 F1 | 	add	fp, #12
056d0     AF 54 02 FB | 	rdlong	local01, fp
056d4     0C 5E 85 F1 | 	sub	fp, #12
056d8     00 54 1E F2 | 	cmp	local01, #0 wcz
056dc     AC 00 90 ED |  if_be	jmp	#LR__0295
056e0     18 5E 05 F1 | 	add	fp, #24
056e4     AF 54 02 FB | 	rdlong	local01, fp
056e8     2A 57 02 FB | 	rdlong	local02, local01
056ec     04 54 06 F1 | 	add	local01, #4
056f0     2A 59 02 FB | 	rdlong	local03, local01
056f4     14 5E 85 F1 | 	sub	fp, #20
056f8     AF 4A 02 FB | 	rdlong	arg01, fp
056fc     04 5E 85 F1 | 	sub	fp, #4
05700     07 69 02 F6 | 	mov	local11, objptr
05704     2B 0F 02 F6 | 	mov	objptr, local02
05708     2D 58 62 FD | 	call	local03
0570c     34 0F 02 F6 | 	mov	objptr, local11
05710     12 67 02 F6 | 	mov	local10, result1
05714     14 5E 05 F1 | 	add	fp, #20
05718     AF 66 62 FC | 	wrlong	local10, fp
0571c     14 5E 85 F1 | 	sub	fp, #20
05720     00 66 5E F2 | 	cmps	local10, #0 wcz
05724     64 00 90 CD |  if_b	jmp	#LR__0295
05728     1C 5E 05 F1 | 	add	fp, #28
0572c     AF 54 02 FB | 	rdlong	local01, fp
05730     2A 59 02 F6 | 	mov	local03, local01
05734     01 58 06 F1 | 	add	local03, #1
05738     AF 58 62 FC | 	wrlong	local03, fp
0573c     08 5E 85 F1 | 	sub	fp, #8
05740     AF 60 02 FB | 	rdlong	local07, fp
05744     2A 61 42 FC | 	wrbyte	local07, local01
05748     04 5E 85 F1 | 	sub	fp, #4
0574c     AF 54 02 FB | 	rdlong	local01, fp
05750     01 54 06 F1 | 	add	local01, #1
05754     AF 54 62 FC | 	wrlong	local01, fp
05758     04 5E 85 F1 | 	sub	fp, #4
0575c     AF 54 02 FB | 	rdlong	local01, fp
05760     01 54 86 F1 | 	sub	local01, #1
05764     AF 54 62 FC | 	wrlong	local01, fp
05768     14 5E 05 F1 | 	add	fp, #20
0576c     AF 54 0A FB | 	rdlong	local01, fp wz
05770     20 5E 85 F1 | 	sub	fp, #32
05774     54 FF 9F AD |  if_e	jmp	#LR__0294
05778     14 5E 05 F1 | 	add	fp, #20
0577c     AF 58 02 FB | 	rdlong	local03, fp
05780     14 5E 85 F1 | 	sub	fp, #20
05784     0A 58 0E F2 | 	cmp	local03, #10 wz
05788     40 FF 9F 5D |  if_ne	jmp	#LR__0294
0578c                 | LR__0295
0578c     10 5E 05 F1 | 	add	fp, #16
05790     AF 24 02 FB | 	rdlong	result1, fp
05794     10 5E 85 F1 | 	sub	fp, #16
05798                 | LR__0296
05798     AF F0 03 F6 | 	mov	ptra, fp
0579c     BF 00 A0 FD | 	call	#popregs_
057a0                 | __system___vfsread_ret
057a0     2D 00 64 FD | 	ret
057a4                 | 
057a4                 | ' 	
057a4                 | ' 	FUNCTION pfunc(c as integer) as integer
057a4                 | ___strs_cl_pfunc
057a4                 | ' 		if (i < 16) then
057a4     04 0E 06 F1 | 	add	objptr, #4
057a8     07 2B 02 FB | 	rdlong	_var01, objptr
057ac     04 0E 86 F1 | 	sub	objptr, #4
057b0     10 2A 5E F2 | 	cmps	_var01, #16 wcz
057b4     2C 00 90 3D |  if_ae	jmp	#LR__0297
057b8     07 2D 02 FB | 	rdlong	_var02, objptr
057bc     04 0E 06 F1 | 	add	objptr, #4
057c0     07 2F 02 FB | 	rdlong	_var03, objptr
057c4     16 2F 02 F1 | 	add	_var03, _var02
057c8     17 4B 42 FC | 	wrbyte	arg01, _var03
057cc     07 2B 02 FB | 	rdlong	_var01, objptr
057d0     01 2A 06 F1 | 	add	_var01, #1
057d4     07 2B 62 FC | 	wrlong	_var01, objptr
057d8     04 0E 86 F1 | 	sub	objptr, #4
057dc                 | ' 			p(i) = c
057dc                 | ' 			i = i+1
057dc                 | ' 			return 1
057dc     01 24 06 F6 | 	mov	result1, #1
057e0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
057e4                 | LR__0297
057e4                 | ' 			return -1
057e4     01 24 66 F6 | 	neg	result1, #1
057e8                 | ___strs_cl_pfunc_ret
057e8     2D 00 64 FD | 	ret
057ec                 | 
057ec                 | __struct__s_vfs_file_t_putchar
057ec     04 5A 05 F6 | 	mov	COUNT_, #4
057f0     B0 00 A0 FD | 	call	#pushregs_
057f4     18 0E 06 F1 | 	add	objptr, #24
057f8     07 55 0A FB | 	rdlong	local01, objptr wz
057fc     18 0E 86 F1 | 	sub	objptr, #24
05800     00 24 06 A6 |  if_e	mov	result1, #0
05804     3C 00 90 AD |  if_e	jmp	#LR__0298
05808     18 0E 06 F1 | 	add	objptr, #24
0580c     07 55 02 FB | 	rdlong	local01, objptr
05810     18 0E 86 F1 | 	sub	objptr, #24
05814     2A 57 02 FB | 	rdlong	local02, local01
05818     04 54 06 F1 | 	add	local01, #4
0581c     2A 59 02 FB | 	rdlong	local03, local01
05820     07 4D 02 F6 | 	mov	arg02, objptr
05824     07 5B 02 F6 | 	mov	local04, objptr
05828     2B 0F 02 F6 | 	mov	objptr, local02
0582c     2D 58 62 FD | 	call	local03
05830     2D 0F 02 F6 | 	mov	objptr, local04
05834     00 24 5E F2 | 	cmps	result1, #0 wcz
05838     00 54 06 C6 |  if_b	mov	local01, #0
0583c     01 54 06 36 |  if_ae	mov	local01, #1
05840     2A 25 02 F6 | 	mov	result1, local01
05844                 | LR__0298
05844     AF F0 03 F6 | 	mov	ptra, fp
05848     BF 00 A0 FD | 	call	#popregs_
0584c                 | __struct__s_vfs_file_t_putchar_ret
0584c     2D 00 64 FD | 	ret
05850                 | 
05850                 | __struct__s_vfs_file_t_getchar
05850     04 5A 05 F6 | 	mov	COUNT_, #4
05854     B0 00 A0 FD | 	call	#pushregs_
05858     1C 0E 06 F1 | 	add	objptr, #28
0585c     07 55 0A FB | 	rdlong	local01, objptr wz
05860     1C 0E 86 F1 | 	sub	objptr, #28
05864     01 24 66 A6 |  if_e	neg	result1, #1
05868     2C 00 90 AD |  if_e	jmp	#LR__0299
0586c                 | '         return getcf(__this);
0586c     1C 0E 06 F1 | 	add	objptr, #28
05870     07 55 02 FB | 	rdlong	local01, objptr
05874     1C 0E 86 F1 | 	sub	objptr, #28
05878     2A 57 02 FB | 	rdlong	local02, local01
0587c     04 54 06 F1 | 	add	local01, #4
05880     2A 59 02 FB | 	rdlong	local03, local01
05884     07 4B 02 F6 | 	mov	arg01, objptr
05888     07 5B 02 F6 | 	mov	local04, objptr
0588c     2B 0F 02 F6 | 	mov	objptr, local02
05890     2D 58 62 FD | 	call	local03
05894     2D 0F 02 F6 | 	mov	objptr, local04
05898                 | LR__0299
05898     AF F0 03 F6 | 	mov	ptra, fp
0589c     BF 00 A0 FD | 	call	#popregs_
058a0                 | __struct__s_vfs_file_t_getchar_ret
058a0     2D 00 64 FD | 	ret
058a4                 | 
058a4                 | __struct___bas_wrap_sender_tx
058a4     04 5A 05 F6 | 	mov	COUNT_, #4
058a8     B0 00 A0 FD | 	call	#pushregs_
058ac     07 55 02 FB | 	rdlong	local01, objptr
058b0     2A 57 02 FB | 	rdlong	local02, local01
058b4     04 54 06 F1 | 	add	local01, #4
058b8     2A 59 02 FB | 	rdlong	local03, local01
058bc     07 5B 02 F6 | 	mov	local04, objptr
058c0     2B 0F 02 F6 | 	mov	objptr, local02
058c4     2D 58 62 FD | 	call	local03
058c8     2D 0F 02 F6 | 	mov	objptr, local04
058cc     01 24 06 F6 | 	mov	result1, #1
058d0     AF F0 03 F6 | 	mov	ptra, fp
058d4     BF 00 A0 FD | 	call	#popregs_
058d8                 | __struct___bas_wrap_sender_tx_ret
058d8     2D 00 64 FD | 	ret
058dc                 | 
058dc                 | LR__0300
058dc     20 21 21 21 
058e0     20 63 6F 72 
058e4     72 75 70 74 
058e8     65 64 20 68 
058ec     65 61 70 3F 
058f0     3F 3F 20 21 
058f4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
058f7     00          | 	byte	0
058f8                 | LR__0301
058f8     20 21 21 21 
058fc     20 6F 75 74 
05900     20 6F 66 20 
05904     68 65 61 70 
05908     20 6D 65 6D 
0590c     6F 72 79 20 
05910     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
05914     00          | 	byte	0
05915                 | LR__0302
05915     20 21 21 21 
05919     20 63 6F 72 
0591d     72 75 70 74 
05921     65 64 20 68 
05925     65 61 70 20 
05929     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0592d     00          | 	byte	0
0592e                 | LR__0303
0592e     42 61 73 69 
05932     63 20 74 65 
05936     73 74       | 	byte	"Basic test"
05938     00          | 	byte	0
05939                 | LR__0304
05939     4B 65 79 62 
0593d     6F 61 72 64 
05941     20 6B 65 79 
05945     20 72 65 6C 
05949     65 61 73 65 
0594d     64 2C 20 73 
05951     63 61 6E 63 
05955     6F 64 65 20 | 	byte	"Keyboard key released, scancode "
05959     00          | 	byte	0
0595a                 | LR__0305
0595a     4B 65 79 62 
0595e     6F 61 72 64 
05962     20 6B 65 79 
05966     20 70 72 65 
0596a     73 73 65 64 
0596e     2C 20 20 73 
05972     63 61 6E 63 
05976     6F 64 65 20 | 	byte	"Keyboard key pressed,  scancode "
0597a     00          | 	byte	0
0597b                 | LR__0306
0597b     2C 20 63 68 
0597f     61 72 63 6F 
05983     64 65 20    | 	byte	", charcode "
05986     00          | 	byte	0
05987                 | LR__0307
05987     4B 65 79 62 
0598b     6F 61 72 64 
0598f     20 6D 6F 64 
05993     69 66 69 65 
05997     72 73 20 72 
0599b     65 6C 65 61 
0599f     73 65 64    | 	byte	"Keyboard modifiers released"
059a2     00          | 	byte	0
059a3                 | LR__0308
059a3     4B 65 79 62 
059a7     6F 61 72 64 
059ab     20 6D 6F 64 
059af     69 66 69 65 
059b3     72 73 20 70 
059b7     72 65 73 73 
059bb     65 64 3A 20 | 	byte	"Keyboard modifiers pressed: "
059bf     00          | 	byte	0
059c0                 | LR__0309
059c0     4D 6F 75 73 
059c4     65 20 6D 6F 
059c8     76 65 64 2C 
059cc     20 78 3D 20 | 	byte	"Mouse moved, x= "
059d0     00          | 	byte	0
059d1                 | LR__0310
059d1     20 79 3D 20 | 	byte	" y= "
059d5     00          | 	byte	0
059d6                 | LR__0311
059d6     4D 6F 75 73 
059da     65 20 6D 6F 
059de     76 65 64 2C 
059e2     20 78 3D 20 | 	byte	"Mouse moved, x= "
059e6     00          | 	byte	0
059e7                 | LR__0312
059e7     20 79 3D 20 | 	byte	" y= "
059eb     00          | 	byte	0
059ec                 | LR__0313
059ec     4D 6F 75 73 
059f0     65 77 68 65 
059f4     65 6C 3A 20 | 	byte	"Mousewheel: "
059f8     00          | 	byte	0
059f9                 | LR__0314
059f9     4D 6F 75 73 
059fd     65 20 6B 65 
05a01     79 3A 20    | 	byte	"Mouse key: "
05a04     00          | 	byte	0
05a05                 | LR__0315
05a05     4D 6F 75 73 
05a09     65 20 63 6C 
05a0d     69 63 6B 65 
05a11     64          | 	byte	"Mouse clicked"
05a12     00          | 	byte	0
05a13                 | LR__0316
05a13     4D 6F 75 73 
05a17     65 20 64 6F 
05a1b     75 62 6C 65 
05a1f     20 63 6C 69 
05a23     63 6B 65 64 | 	byte	"Mouse double clicked"
05a27     00          | 	byte	0
05a28                 | LR__0317
05a28     4D 69 64 69 
05a2c     20 6E 6F 74 
05a30     65 20 6F 66 
05a34     66 2C 20 63 
05a38     68 61 6E 6E 
05a3c     65 6C 20    | 	byte	"Midi note off, channel "
05a3f     00          | 	byte	0
05a40                 | LR__0318
05a40     2C 20 6E 6F 
05a44     74 65 20    | 	byte	", note "
05a47     00          | 	byte	0
05a48                 | LR__0319
05a48     4D 69 64 69 
05a4c     20 6E 6F 74 
05a50     65 20 6F 6E 
05a54     2C 20 20 63 
05a58     68 61 6E 6E 
05a5c     65 6C 20    | 	byte	"Midi note on,  channel "
05a5f     00          | 	byte	0
05a60                 | LR__0320
05a60     2C 20 6E 6F 
05a64     74 65 20    | 	byte	", note "
05a67     00          | 	byte	0
05a68                 | LR__0321
05a68     2C 20 76 65 
05a6c     6C 6F 63 69 
05a70     74 79 20    | 	byte	", velocity "
05a73     00          | 	byte	0
05a74                 | LR__0322
05a74     4D 69 64 69 
05a78     20 70 6F 6C 
05a7c     79 20 61 66 
05a80     74 65 72 74 
05a84     6F 75 63 68 
05a88     2C 20 63 68 
05a8c     61 6E 6E 65 
05a90     6C 20       | 	byte	"Midi poly aftertouch, channel "
05a92     00          | 	byte	0
05a93                 | LR__0323
05a93     20 6E 6F 74 
05a97     65 20       | 	byte	" note "
05a99     00          | 	byte	0
05a9a                 | LR__0324
05a9a     2C 20 76 65 
05a9e     6C 6F 63 69 
05aa2     74 79 20    | 	byte	", velocity "
05aa5     00          | 	byte	0
05aa6                 | LR__0325
05aa6     4D 69 64 69 
05aaa     20 63 6F 6E 
05aae     74 72 6F 6C 
05ab2     20 63 68 61 
05ab6     6E 67 65 2C 
05aba     20 63 68 61 
05abe     6E 6E 65 6C 
05ac2     20          | 	byte	"Midi control change, channel "
05ac3     00          | 	byte	0
05ac4                 | LR__0326
05ac4     20 63 6F 6E 
05ac8     74 72 6F 6C 
05acc     6C 65 72 20 | 	byte	" controller "
05ad0     00          | 	byte	0
05ad1                 | LR__0327
05ad1     2C 20 76 61 
05ad5     6C 75 65 20 | 	byte	", value "
05ad9     00          | 	byte	0
05ada                 | LR__0328
05ada     4D 69 64 69 
05ade     20 70 72 6F 
05ae2     67 72 61 6D 
05ae6     20 63 68 61 
05aea     6E 67 65 2C 
05aee     20 63 68 61 
05af2     6E 6E 65 6C 
05af6     20          | 	byte	"Midi program change, channel "
05af7     00          | 	byte	0
05af8                 | LR__0329
05af8     20 70 72 6F 
05afc     67 72 61 6D 
05b00     20          | 	byte	" program "
05b01     00          | 	byte	0
05b02                 | LR__0330
05b02     4D 69 64 69 
05b06     20 6D 6F 6E 
05b0a     6F 20 61 66 
05b0e     74 65 72 74 
05b12     6F 75 63 68 
05b16     2C 20 63 68 
05b1a     61 6E 6E 65 
05b1e     6C 20       | 	byte	"Midi mono aftertouch, channel "
05b20     00          | 	byte	0
05b21                 | LR__0331
05b21     20 76 61 6C 
05b25     75 65 20    | 	byte	" value "
05b28     00          | 	byte	0
05b29                 | LR__0332
05b29     4D 69 64 69 
05b2d     20 70 69 74 
05b31     63 68 20 62 
05b35     65 6E 64 2C 
05b39     20 63 68 61 
05b3d     6E 6E 65 6C 
05b41     20          | 	byte	"Midi pitch bend, channel "
05b42     00          | 	byte	0
05b43                 | LR__0333
05b43     20 76 61 6C 
05b47     75 65 20    | 	byte	" value "
05b4a     00          | 	byte	0
05b4b                 | LR__0334
05b4b     4E 6F 76 61 
05b4f     74 69 6F 6E 
05b53     20 63 6F 6E 
05b57     74 72 6F 6C 
05b5b     20 6B 65 79 
05b5f     20          | 	byte	"Novation control key "
05b60     00          | 	byte	0
05b61     00 00 00    | 	alignl
05b64                 | _hng030rm_spin2_dat_
05b64     00 00 00 00 
05b68     00 00 00 00 
05b6c     00 00 00 00 
05b70     00 00 00 00 
05b74     00 00 00    | vga_font       file "vgafont.def"
05b77     7E 81 A5 81 
05b7b     81 BD 99 81 
05b7f     81 7E 00 00 
05b83     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
05b87     7E FF DB FF 
05b8b     FF C3 E7 FF 
05b8f     FF 7E 00 00 
05b93     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
05b97     00 36 7F 7F 
05b9b     7F 7F 3E 1C 
05b9f     08 00 00 00 
05ba3     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
05ba7     00 08 1C 3E 
05bab     7F 3E 1C 08 
05baf     00 00 00 00 
05bb3     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
05bb7     18 3C 3C E7 
05bbb     E7 E7 18 18 
05bbf     3C 00 00 00 
05bc3     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
05bc7     18 3C 7E FF 
05bcb     FF 7E 18 18 
05bcf     3C 00 00 00 
05bd3     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
05bd7     00 00 00 18 
05bdb     3C 3C 18 00 
05bdf     00 00 00 00 
05be3     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
05be7     FF FF FF E7 
05beb     C3 C3 E7 FF 
05bef     FF FF FF FF 
05bf3     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
05bf7     00 00 3C 66 
05bfb     42 42 66 3C 
05bff     00 00 00 00 
05c03     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
05c07     FF FF C3 99 
05c0b     BD BD 99 C3 
05c0f     FF FF FF FF 
05c13     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
05c17     78 70 58 4C 
05c1b     1E 33 33 33 
05c1f     33 1E 00 00 
05c23     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
05c27     3C 66 66 66 
05c2b     66 3C 18 7E 
05c2f     18 18 00 00 
05c33     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
05c37     FC CC FC 0C 
05c3b     0C 0C 0C 0E 
05c3f     0F 07 00 00 
05c43     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
05c47     FE C6 FE C6 
05c4b     C6 C6 C6 E6 
05c4f     E7 67 03 00 
05c53     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
05c57     18 18 DB 3C 
05c5b     E7 3C DB 18 
05c5f     18 00 00 00 
05c63     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
05c67     03 07 0F 1F 
05c6b     7F 1F 0F 07 
05c6f     03 01 00 00 
05c73     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
05c77     60 70 78 7C 
05c7b     7F 7C 78 70 
05c7f     60 40 00 00 
05c83     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
05c87     18 3C 7E 18 
05c8b     18 18 7E 3C 
05c8f     18 00 00 00 
05c93     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
05c97     66 66 66 66 
05c9b     66 66 66    | 	byte	$66[7]
05c9e     00 66 66 00 
05ca2     00 00 00 00 
05ca6     00 FE DB DB 
05caa     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
05cae     D8 D8 D8 00 
05cb2     00 00 00 3E 
05cb6     63 06 1C 36 
05cba     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
05cbe     30 63 3E 00 
05cc2     00 00 00 00 
05cc6     00 00 00 00 
05cca     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
05cce     7F 7F 7F 00 
05cd2     00 00 00 00 
05cd6     00 18 3C 7E 
05cda     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
05cde     3C 18 7E 00 
05ce2     00 00 00 00 
05ce6     00 18 3C 7E 
05cea     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
05cee     18 18 18 00 
05cf2     00 00 00 00 
05cf6     00 18 18 18 
05cfa     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
05cfe     7E 3C 18 00 
05d02     00 00 00 00 
05d06     00 00 00 18 
05d0a     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
05d0e     00 00 00 00 
05d12     00 00 00 00 
05d16     00 00 00    | 	byte	$00[11]
05d19     0C 06 7F 06 
05d1d     0C 00 00 00 
05d21     00 00 00 00 
05d25     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d29     00 03 03 03 
05d2d     7F 00 00 00 
05d31     00 00 00 00 
05d35     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d39     14 36 7F 36 
05d3d     14 00 00 00 
05d41     00 00 00 00 
05d45     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
05d49     1C 1C 3E 3E 
05d4d     7F 7F 00 00 
05d51     00 00 00 00 
05d55     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
05d59     7F 3E 3E 1C 
05d5d     1C 08 00 00 
05d61     00 00 00 00 
05d65     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d69     00 00 00 00 
05d6d     00 00 00 00 
05d71     00 00 00 00 
05d75     00 00       | 	byte	$00[14]
05d77     18 3C 3C 3C 
05d7b     18 18 18 00 
05d7f     18 18 00 00 
05d83     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
05d87     66 24 00 00 
05d8b     00 00 00 00 
05d8f     00 00 00 00 
05d93     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d97     00 36 36 7F 
05d9b     36 36 36 7F 
05d9f     36 36 00 00 
05da3     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
05da7     3E 63 43 03 
05dab     3E 60 60 61 
05daf     63 3E 18 18 
05db3     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
05db7     00 00 43 63 
05dbb     30 18 0C 06 
05dbf     63 61 00 00 
05dc3     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
05dc7     1C 36 36 1C 
05dcb     6E 3B 33 33 
05dcf     33 6E 00 00 
05dd3     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
05dd7     0C 0C 0C 06 
05ddb     00 00 00 00 
05ddf     00 00 00 00 
05de3     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05de7     30 18 0C 0C 
05deb     0C 0C 0C 0C 
05def     18 30 00 00 
05df3     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
05df7     0C 18 30 30 
05dfb     30 30 30 30 
05dff     18 0C 00 00 
05e03     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
05e07     00 00 00 66 
05e0b     3C FF 3C 66 
05e0f     00 00 00 00 
05e13     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
05e17     00 00 00 18 
05e1b     18 7E 18 18 
05e1f     00 00 00 00 
05e23     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
05e27     00 00 00 00 
05e2b     00 00 00 00 | 	byte	$00[8]
05e2f     18 18 18 0C 
05e33     00 00 00 00 
05e37     00 00 00 00 
05e3b     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
05e3f     00 00 00 00 
05e43     00 00 00 00 
05e47     00 00 00 00 
05e4b     00 00 00 00 | 	byte	$00[16]
05e4f     18 18 00 00 
05e53     00 00 00 00 
05e57     00 00 40 60 
05e5b     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
05e5f     03 01 00 00 
05e63     00 00 00 00 
05e67     1C 36 63 63 
05e6b     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
05e6f     36 1C 00 00 
05e73     00 00 00 00 
05e77     18 1C 1E 18 
05e7b     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
05e7f     18 7E 00 00 
05e83     00 00 00 00 
05e87     3E 63 60 30 
05e8b     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
05e8f     63 7F 00 00 
05e93     00 00 00 00 
05e97     3E 63 60 60 
05e9b     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
05e9f     63 3E 00 00 
05ea3     00 00 00 00 
05ea7     30 38 3C 36 
05eab     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
05eaf     30 78 00 00 
05eb3     00 00 00 00 
05eb7     7F 03 03 03 
05ebb     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
05ebf     63 3E 00 00 
05ec3     00 00 00 00 
05ec7     1C 06 03 03 
05ecb     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
05ecf     63 3E 00 00 
05ed3     00 00 00 00 
05ed7     7F 63 60 60 
05edb     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
05edf     0C 0C 00 00 
05ee3     00 00 00 00 
05ee7     3E 63 63 63 
05eeb     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
05eef     63 3E 00 00 
05ef3     00 00 00 00 
05ef7     3E 63 63 63 
05efb     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
05eff     30 1E 00 00 
05f03     00 00 00 00 
05f07     00 00 00 18 
05f0b     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
05f0f     18 18 00 00 
05f13     00 00 00 00 
05f17     00 00 00 18 
05f1b     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
05f1f     18 18 0C 00 
05f23     00 00 00 00 
05f27     00 60 30 18 
05f2b     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
05f2f     30 60 00 00 
05f33     00 00 00 00 
05f37     00 00 00 7E 
05f3b     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
05f3f     00 00 00 00 
05f43     00 00 00 00 
05f47     00          | 	byte	$00[9]
05f48     06 0C 18 30 
05f4c     60 30 18 0C 
05f50     06 00 00 00 
05f54     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
05f58     63 63 30 18 
05f5c     18 18 00 18 
05f60     18 00 00 00 
05f64     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
05f68     3E 63 63 7B 
05f6c     7B 7B 3B 03 
05f70     3E 00 00 00 
05f74     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
05f78     1C 36 63 63 
05f7c     7F 63 63 63 
05f80     63 00 00 00 
05f84     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
05f88     66 66 66 3E 
05f8c     66 66 66 66 
05f90     3F 00 00 00 
05f94     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
05f98     66 43 03 03 
05f9c     03 03 43 66 
05fa0     3C 00 00 00 
05fa4     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
05fa8     36 66 66 66 
05fac     66 66 66 36 
05fb0     1F 00 00 00 
05fb4     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
05fb8     66 46 16 1E 
05fbc     16 06 46 66 
05fc0     7F 00 00 00 
05fc4     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
05fc8     66 46 16 1E 
05fcc     16 06 06 06 
05fd0     0F 00 00 00 
05fd4     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
05fd8     66 43 03 03 
05fdc     7B 63 63 66 
05fe0     5C 00 00 00 
05fe4     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
05fe8     63 63 63 7F 
05fec     63 63 63 63 
05ff0     63 00 00 00 
05ff4     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
05ff8     18 18 18 18 
05ffc     18 18 18 18 | 	byte	$18[8]
06000     3C 00 00 00 
06004     00 00 00 78 
06008     30 30 30 30 
0600c     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
06010     1E 00 00 00 
06014     00 00 00 67 
06018     66 66 36 1E 
0601c     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
06020     67 00 00 00 
06024     00 00 00 0F 
06028     06 06 06 06 
0602c     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
06030     7F 00 00 00 
06034     00 00 00 63 
06038     77 7F 7F 6B 
0603c     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
06040     63 00 00 00 
06044     00 00 00 63 
06048     67 6F 7F 7B 
0604c     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
06050     63 00 00 00 
06054     00 00 00 3E 
06058     63 63 63 63 
0605c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06060     3E 00 00 00 
06064     00 00 00 3F 
06068     66 66 66 3E 
0606c     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
06070     0F 00 00 00 
06074     00 00 00 3E 
06078     63 63 63 63 
0607c     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
06080     3E 30 70 00 
06084     00 00 00 3F 
06088     66 66 66 3E 
0608c     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
06090     67 00 00 00 
06094     00 00 00 3E 
06098     63 63 06 1C 
0609c     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
060a0     3E 00 00 00 
060a4     00 00 00 7E 
060a8     7E 5A 18 18 
060ac     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
060b0     3C 00 00 00 
060b4     00 00 00 63 
060b8     63 63 63 63 
060bc     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
060c0     3E 00 00 00 
060c4     00 00 00 63 
060c8     63 63 63 63 
060cc     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
060d0     08 00 00 00 
060d4     00 00 00 63 
060d8     63 63 63 6B 
060dc     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
060e0     36 00 00 00 
060e4     00 00 00 63 
060e8     63 36 3E 1C 
060ec     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
060f0     63 00 00 00 
060f4     00 00 00 66 
060f8     66 66 66 3C 
060fc     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
06100     3C 00 00 00 
06104     00 00 00 7F 
06108     63 61 30 18 
0610c     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
06110     7F 00 00 00 
06114     00 00 00 3C 
06118     0C 0C 0C 0C 
0611c     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
06120     3C 00 00 00 
06124     00 00 00 00 
06128     01 03 07 0E 
0612c     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
06130     40 00 00 00 
06134     00 00 00 3C 
06138     30 30 30 30 
0613c     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
06140     3C 00 00 00 
06144     1C 36 00 00 
06148     00 00 00 00 
0614c     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06150     00 00 00 00 
06154     00 00 00 00 
06158     00 00 00 00 
0615c     00 00 00 00 
06160     00          | 	byte	$00[17]
06161     FF 00 00 0C 
06165     18 00 00 00 
06169     00 00 00 00 
0616d     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06171     00 00 00 00 
06175     00 00 00 00 
06179     00          | 	byte	$00[9]
0617a     1E 30 3E 33 
0617e     33 33 6E 00 
06182     00 00 00 00 
06186     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
0618a     1E 36 66 66 
0618e     66 66 3E 00 
06192     00 00 00 00 
06196     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0619a     3E 63 03 03 
0619e     03 63 3E 00 
061a2     00 00 00 00 
061a6     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
061aa     3C 36 33 33 
061ae     33 33 6E 00 
061b2     00 00 00 00 
061b6     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
061ba     3E 63 7F 03 
061be     03 63 3E 00 
061c2     00 00 00 00 
061c6     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
061ca     0C 1E 0C 0C 
061ce     0C 0C 1E 00 
061d2     00 00 00 00 
061d6     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
061da     6E 33 33 33 
061de     33 33 3E 30 
061e2     33 1E 00 00 
061e6     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
061ea     36 6E 66 66 
061ee     66 66 67 00 
061f2     00 00 00 00 
061f6     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
061fa     1C 18 18 18 
061fe     18 18 3C 00 
06202     00 00 00 00 
06206     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
0620a     70 60 60 60 
0620e     60 60 60 66 
06212     66 3C 00 00 
06216     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
0621a     66 36 1E 1E 
0621e     36 66 67 00 
06222     00 00 00 00 
06226     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
0622a     18 18 18 18 
0622e     18 18       | 	byte	$18[6]
06230     3C 00 00 00 
06234     00 00 00 00 
06238     00 00 37 7F 
0623c     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
06240     63 00 00 00 
06244     00 00 00 00 
06248     00 00 3B 66 
0624c     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
06250     66 00 00 00 
06254     00 00 00 00 
06258     00 00 3E 63 
0625c     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
06260     3E 00 00 00 
06264     00 00 00 00 
06268     00 00 3B 66 
0626c     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
06270     3E 06 06 0F 
06274     00 00 00 00 
06278     00 00 6E 33 
0627c     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
06280     3E 30 30 78 
06284     00 00 00 00 
06288     00 00 3B 6E 
0628c     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
06290     0F 00 00 00 
06294     00 00 00 00 
06298     00 00 3E 63 
0629c     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
062a0     3E 00 00 00 
062a4     00 00 00 08 
062a8     0C 0C 3F 0C 
062ac     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
062b0     38 00 00 00 
062b4     00 00 00 00 
062b8     00 00 33 33 
062bc     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
062c0     6E 00 00 00 
062c4     00 00 00 00 
062c8     00 00 63 63 
062cc     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
062d0     1C 00 00 00 
062d4     00 00 00 00 
062d8     00 00 63 63 
062dc     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
062e0     36 00 00 00 
062e4     00 00 00 00 
062e8     00 00 63 36 
062ec     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
062f0     63 00 00 00 
062f4     00 00 00 00 
062f8     00 00 63 63 
062fc     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
06300     7E 60 30 1F 
06304     00 00 00 00 
06308     00 00 7F 33 
0630c     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
06310     7F 00 00 00 
06314     00 00 00 70 
06318     18 18 18 0E 
0631c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
06320     70 00 00 00 
06324     00 00 00 18 
06328     18 18 18 18 
0632c     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
06330     18 00 00 00 
06334     00 00 00 0E 
06338     18 18 18 70 
0633c     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
06340     0E 00 00 00 
06344     6E 3B 00 00 
06348     00 00 00 00 
0634c     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06350     00 00 00 00 
06354     00 00 00 00 
06358     00 00       | 	byte	$00[10]
0635a     08 1C 36 63 
0635e     63 63 7F 00 
06362     00 00 00 00 
06366     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
0636a     03 03 03 03 
0636e     43 66 3C 18 
06372     30 1E 00 00 
06376     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
0637a     33 33 33 33 
0637e     33 33       | 	byte	$33[6]
06380     6E 00 00 00 
06384     00 00 60 30 
06388     18 00 3E 63 
0638c     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
06390     3E 00 00 00 
06394     00 00 08 1C 
06398     36 00 1E 30 
0639c     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
063a0     6E 00 00 00 
063a4     00 00 00 00 
063a8     33 00 1E 30 
063ac     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
063b0     6E 00 00 00 
063b4     00 00 1C 36 
063b8     1C 00 33 33 
063bc     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
063c0     6E 00 00 00 
063c4     00 00 60 30 
063c8     18 00 3E 63 
063cc     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
063d0     3E 00 00 00 
063d4     00 00 00 00 
063d8     00 00 3E 63 
063dc     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
063e0     3E 18 30 1E 
063e4     00 00 00 1C 
063e8     58 78 38 18 
063ec     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
063f0     3C 00 00 00 
063f4     00 00 00 00 
063f8     63 00 3E 63 
063fc     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
06400     3E 00 00 00 
06404     66 33 00 3E 
06408     63 63 63 63 
0640c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06410     3E 00 00 00 
06414     00 00 CC 66 
06418     33 00 3E 63 
0641c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
06420     3E 00 00 00 
06424     00 00 18 3C 
06428     66 00 1C 18 
0642c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
06430     3C 00 00 00 
06434     30 18 00 7F 
06438     63 61 30 18 
0643c     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
06440     7F 00 00 00 
06444     00 63 00 08 
06448     1C 36 63 63 
0644c     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
06450     63 00 00 00 
06454     30 18 00 3C 
06458     66 43 03 03 
0645c     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
06460     3C 00 00 00 
06464     30 18 00 7F 
06468     66 46 16 1E 
0646c     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
06470     7F 00 00 00 
06474     0C 06 00 0F 
06478     06 06 06 06 
0647c     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
06480     7F 00 00 00 
06484     30 18 00 1C 
06488     18 18 18 18 
0648c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
06490     3C 00 00 00 
06494     00 00 08 1C 
06498     36 00 3E 63 
0649c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
064a0     3E 00 00 00 
064a4     00 00 00 00 
064a8     63 00 3E 63 
064ac     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
064b0     3E 00 00 00 
064b4     00 00 00 6F 
064b8     46 26 06 06 
064bc     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
064c0     7F 00 00 00 
064c4     00 00 00 6E 
064c8     4C 2C 0C 0C 
064cc     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
064d0     1E 00 00 00 
064d4     30 18 00 3E 
064d8     63 63 06 1C 
064dc     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
064e0     3E 00 00 00 
064e4     00 00 60 30 
064e8     18 00 3E 63 
064ec     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
064f0     3E 00 00 00 
064f4     00 63 00 3E 
064f8     63 63 63 63 
064fc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06500     3E 00 00 00 
06504     00 63 00 63 
06508     63 63 63 63 
0650c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
06510     3E 00 00 00 
06514     6C 38 00 7E 
06518     7E 5A 18 18 
0651c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
06520     3C 00 00 00 
06524     00 00 60 48 
06528     2C 0C 3F 0C 
0652c     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
06530     38 00 00 00 
06534     00 00 00 0F 
06538     26 36 1E 0E 
0653c     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
06540     7F 00 00 00 
06544     00 00 00 00 
06548     00 63 36 1C 
0654c     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
06550     00 00 00 00 
06554     00 00       | 	byte	$00[6]
06556     36 1C 08 00 
0655a     3E 63 03 03 
0655e     03 63 3E 00 
06562     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
06566     30 18 0C 00 
0656a     1E 30 3E 33 
0656e     33 33 6E 00 
06572     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
06576     60 30 18 00 
0657a     1C 18 18 18 
0657e     18 18 3C 00 
06582     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
06586     60 30 18 00 
0658a     3E 63 63 63 
0658e     63 63 3E 00 
06592     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
06596     30 18 0C 00 
0659a     33 33 33 33 
0659e     33 33 6E 00 
065a2     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
065a6     00 08 1C 36 
065aa     63 63 7F 63 
065ae     63 63 63 18 
065b2     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
065b6     00 00 00 00 
065ba     1E 30 3E 33 
065be     33 33 6E 18 
065c2     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
065c6     00 7F 63 61 
065ca     30 18 0C 06 
065ce     43 63 7F 00 
065d2     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
065d6     36 1C 08 00 
065da     7F 33 18 0C 
065de     06 63 7F 00 
065e2     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
065e6     00 7F 66 46 
065ea     16 1E 16 06 
065ee     46 66 7F 18 
065f2     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
065f6     00 00 00 00 
065fa     3E 63 7F 03 
065fe     03 63 3E 18 
06602     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
06606     00 3C 66 03 
0660a     1F 03 0F 03 
0660e     03 66 3C 00 
06612     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
06616     60 30 18 00 
0661a     7F 33 18 0C 
0661e     06 63 7F 00 
06622     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
06626     00 3C 66 43 
0662a     03 03 03 03 
0662e     43 66 3C 00 
06632     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
06636     00 00 00 00 
0663a     3E 63 06 1C 
0663e     30 63 3E 18 
06642     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
06646     00 00 00 00 
0664a     00 00       | 	byte	$00[6]
0664c     6C 36 1B 36 
06650     6C 00 00 00 
06654     00 00 00 00 
06658     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0665c     1B 36 6C 36 
06660     1B 00 00 00 
06664     88 22 88 22 
06668     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
0666c     88 22 88 22 
06670     88 22 88 22 
06674     AA 55 AA 55 
06678     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
0667c     AA 55 AA 55 
06680     AA 55 AA 55 
06684     BB EE BB EE 
06688     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
0668c     BB EE BB EE 
06690     BB EE BB EE 
06694     18 18 18 18 
06698     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
0669c     18 18 18 18 
066a0     18 18 18 18 
066a4     18 18 18 18 
066a8     18 18 18    | 	byte	$18[15]
066ab     1F 18 18 18 
066af     18 18 18 18 
066b3     18 30 18 00 
066b7     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
066bb     63 7F 63 63 
066bf     63 63 00 00 
066c3     00 1C 36 00 
066c7     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
066cb     63 7F 63 63 
066cf     63 63 00 00 
066d3     00 36 1C 00 
066d7     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
066db     1E 16 06 46 
066df     66 7F 00 00 
066e3     00 00 00 00 
066e7     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
066eb     1C 30 60 63 
066ef     63 3E 18 30 
066f3     1E 6C 6C 6C 
066f7     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
066fb     6F 6C 6C 6C 
066ff     6C 6C 6C 6C 
06703     6C 6C 6C 6C 
06707     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0670b     6C 6C 6C 6C 
0670f     6C 6C 6C 6C 
06713     6C          | 	byte	$6c[9]
06714     00 00 00 00 
06718     00          | 	byte	$00[5]
06719     7F 60 6F 6C 
0671d     6C 6C 6C 6C 
06721     6C 6C 6C 6C 
06725     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06729     6F 60 7F 00 
0672d     00 00 00 00 
06731     00 00 00 18 
06735     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
06739     61 30 18 0C 
0673d     06 43 63 7F 
06741     00 00 00 00 
06745     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
06749     00 7F 33 18 
0674d     0C 06 63 7F 
06751     00 00 00 00 
06755     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
06759     00 00 1F 18 
0675d     18 18 18 18 
06761     18 18 18 18 
06765     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06769     18 18 F8 00 
0676d     00 00 00 00 
06771     00 00 00 18 
06775     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
06779     18 18 FF 00 
0677d     00 00 00 00 
06781     00 00 00 00 
06785     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06789     00 00 FF 18 
0678d     18 18 18 18 
06791     18 18 18 18 
06795     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06799     18 18 F8 18 
0679d     18 18 18 18 
067a1     18 18 18 00 
067a5     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
067a9     00 00 FF 00 
067ad     00 00 00 00 
067b1     00 00 00 18 
067b5     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
067b9     18 18 FF 18 
067bd     18 18 18 18 
067c1     18 18 18 63 
067c5     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
067c9     36 63 63 7F 
067cd     63 63 63 63 
067d1     00 00 00 00 
067d5     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
067d9     00 1E 30 3E 
067dd     33 33 33 6E 
067e1     00 00 00 6C 
067e5     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
067e9     EC 0C FC 00 
067ed     00 00 00 00 
067f1     00 00 00 00 
067f5     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
067f9     FC 0C EC 6C 
067fd     6C 6C 6C 6C 
06801     6C 6C 6C 6C 
06805     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06809     EF 00 FF 00 
0680d     00 00 00 00 
06811     00 00 00 00 
06815     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06819     FF 00 EF 6C 
0681d     6C 6C 6C 6C 
06821     6C 6C 6C 6C 
06825     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06829     EC 0C EC 6C 
0682d     6C 6C 6C 6C 
06831     6C 6C 6C 00 
06835     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
06839     FF 00 FF 00 
0683d     00 00 00 00 
06841     00 00 00 6C 
06845     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
06849     EF 00 EF 6C 
0684d     6C 6C 6C 6C 
06851     6C 6C 6C 00 
06855     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
06859     63 3E 63 63 
0685d     63 63 3E 63 
06861     00 00 00 00 
06865     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
06869     30 3C 36 33 
0686d     33 33 33 6E 
06871     00 00 00 00 
06875     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
06879     66 66 6F 66 
0687d     66 66 36 1F 
06881     00 00 00 36 
06885     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
06889     66 66 66 66 
0688d     66 66       | 	byte	$66[6]
0688f     36 1F 00 00 
06893     00 00 63 00 
06897     7F 66 46 16 
0689b     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
0689f     66 7F 00 00 
068a3     00 6C 38 00 
068a7     38 30 30 3C 
068ab     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
068af     33 6E 00 00 
068b3     00 36 1C 00 
068b7     63 67 6F 7F 
068bb     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
068bf     63 63 00 00 
068c3     00 30 18 00 
068c7     3C 18 18 18 
068cb     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
068cf     18 3C 00 00 
068d3     00 3C 66 00 
068d7     3C 18 18 18 
068db     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
068df     18 3C 00 00 
068e3     00 00 00 36 
068e7     1C 08 00 3E 
068eb     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
068ef     63 3E 00 00 
068f3     00 18 18 18 
068f7     18 18 18 18 
068fb     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
068ff     00 00 00 00 
06903     00 00 00 00 
06907     00 00 00 00 | 	byte	$00[12]
0690b     F8 18 18 18 
0690f     18 18 18 18 
06913     18 FF FF FF 
06917     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
0691b     FF FF FF FF 
0691f     FF FF FF FF 
06923     FF          | 	byte	$ff[9]
06924     00 00 00 00 
06928     00 00 00    | 	byte	$00[7]
0692b     FF FF FF FF 
0692f     FF FF FF FF 
06933     FF          | 	byte	$ff[9]
06934     00 00 00 7E 
06938     7E 5A 18 18 
0693c     18 18 18 18 
06940     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
06944     1C 36 1C 63 
06948     63 63 63 63 
0694c     63 63 63 63 
06950     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06954     FF FF FF FF 
06958     FF FF FF    | 	byte	$ff[7]
0695b     00 00 00 00 
0695f     00 00 00 00 
06963     00          | 	byte	$00[9]
06964     30 18 00 3E 
06968     63 63 63 63 
0696c     63 63 63 63 
06970     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06974     00 00 00 1E 
06978     33 33 33 1B 
0697c     33 63 63 63 
06980     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
06984     1C 36 00 3E 
06988     63 63 63 63 
0698c     63 63 63 63 
06990     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06994     30 18 00 63 
06998     67 6F 7F 7B 
0699c     73 63 63 63 
069a0     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
069a4     00 00 60 30 
069a8     18 00 3B 66 
069ac     66 66 66 66 
069b0     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
069b4     00 00 36 1C 
069b8     08 00 3B 66 
069bc     66 66 66 66 
069c0     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
069c4     36 1C 00 3E 
069c8     63 63 06 1C 
069cc     30 60 63 63 
069d0     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
069d4     00 00 36 1C 
069d8     08 00 3E 63 
069dc     06 1C 30 63 
069e0     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
069e4     30 18 00 3F 
069e8     66 66 66 3E 
069ec     36 66 66 66 
069f0     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
069f4     30 18 00 63 
069f8     63 63 63 63 
069fc     63 63 63 63 
06a00     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06a04     00 00 60 30 
06a08     18 00 3B 6E 
06a0c     66 06 06 06 
06a10     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
06a14     66 33 00 63 
06a18     63 63 63 63 
06a1c     63 63 63 63 
06a20     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06a24     00 00 60 30 
06a28     18 00 63 63 
06a2c     63 63 63 63 
06a30     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
06a34     30 18 00 66 
06a38     66 66 66 3C 
06a3c     18 18 18 18 
06a40     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
06a44     00 00 00 08 
06a48     0C 0C 3F 0C 
06a4c     0C 0C 0C 6C 
06a50     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
06a54     30 18 00 00 
06a58     00 00 00 00 
06a5c     00 00 00 00 
06a60     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06a64     00 00 00 00 
06a68     00 00 00 00 | 	byte	$00[8]
06a6c     7F 00 00 00 
06a70     00 00 00 00 
06a74     66 33 00 00 
06a78     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
06a7c     00 00 00 00 
06a80     00 00 00 00 
06a84     00 00 00 00 
06a88     00 00 00 00 
06a8c     00 00 00 00 
06a90     00          | 	byte	$00[21]
06a91     0C 06 3C 36 
06a95     1C 00 00 00 
06a99     00 00 00 00 
06a9d     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06aa1     00 00 00 63 
06aa5     3E 00 00 00 
06aa9     00 00 00 00 
06aad     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ab1     00 00 00 00 
06ab5     3E 63 06 1C 
06ab9     36 63 63 36 
06abd     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
06ac1     00 00 00 00 
06ac5     00 00 00 00 | 	byte	$00[8]
06ac9     18 00 7E 00 
06acd     18 00 00 00 
06ad1     00 00 00 00 
06ad5     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ad9     00 00 00 00 
06add     00 00 00 00 | 	byte	$00[8]
06ae1     18 30 1E 00 
06ae5     00 00 1C 36 
06ae9     36 1C 00 00 
06aed     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
06af1     00 00 00 00 
06af5     63 00 00 00 
06af9     00 00 00 00 
06afd     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b01     00 00 00 18 
06b05     18 00 00 00 
06b09     00 00 00 00 
06b0d     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b11     00 00 00 00 
06b15     00          | 	byte	$00[5]
06b16     CC 66 33 00 
06b1a     33 33 33 33 
06b1e     33 33 6E 00 
06b22     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
06b26     00 3F 66 66 
06b2a     66 3E 36 66 
06b2e     66 66 6F 00 
06b32     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
06b36     36 1C 08 00 
06b3a     3B 6E 66 06 
06b3e     06 06 0F 00 
06b42     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
06b46     00 00 00 7E 
06b4a     7E 7E 7E 7E 
06b4e     7E 7E 00 00 
06b52     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
06b56     00 00 00 00 
06b5a     00 00 00 00 
06b5e     00 00 00 00 
06b62     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b64     00 00 00 00 
      ...             
06b94     00 00 00 00 
06b98     00 00 00    | st_font        file "st4font.def"
06b9b     FF FF 00 00 
06b9f     00 00 00 00 
06ba3     00 18 18 18 
06ba7     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06bab     18 18 18 18 
06baf     18 18 18 18 
06bb3     18          | 	byte	$18[9]
06bb4     00 00 00 00 
06bb8     00 00 00    | 	byte	$00[7]
06bbb     FF FF 18 18 
06bbf     18 18 18 18 
06bc3     18 18 18 18 
06bc7     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06bcb     FF FF 00 00 
06bcf     00 00 00 00 
06bd3     00 18 18 18 
06bd7     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06bdb     1F 1F 18 18 
06bdf     18 18 18 18 
06be3     18 18 18 18 
06be7     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06beb     F8 F8 18 18 
06bef     18 18 18 18 
06bf3     18 00 00 00 
06bf7     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06bfb     1F 1F 18 18 
06bff     18 18 18 18 
06c03     18 00 00 00 
06c07     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06c0b     F8 F8 18 18 
06c0f     18 18 18 18 
06c13     18 18 18 18 
06c17     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06c1b     1F 1F 00 00 
06c1f     00 00 00 00 
06c23     00 18 18 18 
06c27     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06c2b     F8 F8 00 00 
06c2f     00 00 00 00 
06c33     00 18 18 18 
06c37     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06c3b     FF FF 18 18 
06c3f     18 18 18 18 
06c43     18 00 00 18 
06c47     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
06c4b     66 7E 7E 66 
06c4f     66 66 66 30 
06c53     18 00 00 7E 
06c57     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
06c5b     3E 06 06 06 
06c5f     06 7E 7E 18 
06c63     0C 30 18 3C 
06c67     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
06c6b     06 06 06 66 
06c6f     66 7E 3C 00 
06c73     00 30 18 66 
06c77     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
06c7b     7E 7E 76 76 
06c7f     66 66 66 00 
06c83     00 30 18 7C 
06c87     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
06c8b     1C 38 70 60 
06c8f     60 7E 3E 00 
06c93     00 30 18 7E 
06c97     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
06c9b     18 0C 0C 06 
06c9f     06 7E 7E 00 
06ca3     00 18 18 00 
06ca7     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
06cab     18 18 0C 0C 
06caf     06 7E 7E 00 
06cb3     00 30 18 3C 
06cb7     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
06cbb     66 66 66 66 
06cbf     66          | 	byte	$66[5]
06cc0     7E 3C 00 00 
06cc4     00 00 06 06 
06cc8     06 06 16 1E 
06ccc     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
06cd0     7E 7E 00 00 
06cd4     00 00 00 00 
06cd8     00 3C 7C 60 
06cdc     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
06ce0     7E 7C 30 18 
06ce4     00 00 00 00 
06ce8     00 3C 7E 66 
06cec     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
06cf0     7E 7C 18 0C 
06cf4     00 00 30 18 
06cf8     00 3C 3E 06 
06cfc     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
06d00     7E 7C 00 00 
06d04     00 00 30 18 
06d08     00 3E 7E 66 
06d0c     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
06d10     66 66 00 00 
06d14     00 00 30 18 
06d18     00 7C 7E 06 
06d1c     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
06d20     7E 3E 00 00 
06d24     00 00 30 18 
06d28     00 7E 7E 30 
06d2c     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
06d30     7E 7E 00 00 
06d34     00 00 18 18 
06d38     00 7E 7E 30 
06d3c     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
06d40     7E 7E 00 00 
06d44     00 00 30 18 
06d48     00 3C 7E 66 
06d4c     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
06d50     7E 3C 00 00 
06d54     00 00 1C 1C 
06d58     18 18 38 3C 
06d5c     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
06d60     3C 3C 00 00 
06d64     00 00 00 00 
06d68     00 00 00 00 
06d6c     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06d70     00 00 00 00 
06d74     00 00       | 	byte	$00[6]
06d76     18 18 18 18 
06d7a     18 18 18 18 | 	byte	$18[8]
06d7e     00 00 18 18 
06d82     00 00 00 00 
06d86     66 66 66 66 
06d8a     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
06d8e     00 00 00 00 
06d92     00 00 00 00 
06d96     00          | 	byte	$00[9]
06d97     66 66 FF FF 
06d9b     66 66 FF FF 
06d9f     66 66 00 00 
06da3     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
06da7     7C 7E 06 06 
06dab     3E 7C 60 60 
06daf     7E 3E 18 18 
06db3     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
06db7     66 30 30 18 
06dbb     18 0C 0C 66 
06dbf     66 00 00 00 
06dc3     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
06dc7     66 66 3C 1C 
06dcb     1C FC FE 66 
06dcf     66 FE FC 00 
06dd3     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
06dd7     18 18 18 18 
06ddb     00 00 00 00 
06ddf     00 00 00 00 
06de3     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
06de7     18 1C 0C 0C 
06deb     0C 0C 0C 0C 
06def     1C 18 30 00 
06df3     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
06df7     18 38 30 30 
06dfb     30 30 30 30 
06dff     38 18 0C 00 
06e03     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
06e07     66 66 3C 3C 
06e0b     FF FF 3C 3C 
06e0f     66 66 00 00 
06e13     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
06e17     00 18 18 18 
06e1b     7E 7E 18 18 
06e1f     18 00 00 00 
06e23     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06e27     00 00 00 00 
06e2b     00 00       | 	byte	$00[6]
06e2d     18 18 18 18 
06e31     18          | 	byte	$18[5]
06e32     0C 04 00 00 
06e36     00 00 00 00 
06e3a     7E 7E 00 00 
06e3e     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
06e42     00 00 00 00 
06e46     00 00 00 00 
06e4a     00 00 00 00 
06e4e     00          | 	byte	$00[13]
06e4f     18 18 18 00 
06e53     00 00 00 60 
06e57     60 60 30 30 
06e5b     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
06e5f     06 06 06 00 
06e63     00 00 00 3C 
06e67     7E 66 66 66 
06e6b     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
06e6f     66 7E 3C 00 
06e73     00 00 00 18 
06e77     18 1C 1C 18 
06e7b     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
06e7f     18 7E 7E 00 
06e83     00 00 00 3C 
06e87     7E 66 66 30 
06e8b     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
06e8f     0C 7E 7E 00 
06e93     00 00 00 7E 
06e97     7E 30 30 18 
06e9b     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
06e9f     66 7E 3C 00 
06ea3     00 00 00 30 
06ea7     30 38 38 3C 
06eab     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
06eaf     7E 30 30 00 
06eb3     00 00 00 7E 
06eb7     7E 06 06 3E 
06ebb     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
06ebf     66 7E 3C 00 
06ec3     00 00 00 38 
06ec7     3C 0E 06 06 
06ecb     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
06ecf     66 7E 3C 00 
06ed3     00 00 00 7E 
06ed7     7E 60 60 30 
06edb     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
06edf     0C 0C 0C 00 
06ee3     00 00 00 3C 
06ee7     7E 66 66 3C 
06eeb     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
06eef     66 7E 3C 00 
06ef3     00 00 00 3C 
06ef7     7E 66 66 7E 
06efb     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
06eff     70 3C 1C 00 
06f03     00 00 00 00 
06f07     00 00 18 18 
06f0b     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
06f0f     18 18 18 00 
06f13     00 00 00 00 
06f17     00 00 18 18 
06f1b     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
06f1f     18 18 18 0C 
06f23     04 00 00 00 
06f27     70 38 1C 0E 
06f2b     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
06f2f     70 00 00 00 
06f33     00 00 00 00 
06f37     00 00 7E 7E 
06f3b     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
06f3f     00 00 00 00 
06f43     00 00 00 00 | 	byte	$00[8]
06f47     0E 1C 38 70 
06f4b     E0 70 38 1C 
06f4f     0E 00 00 00 
06f53     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
06f57     7E 66 66 30 
06f5b     30 18 18 18 
06f5f     00 18 18 00 
06f63     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
06f67     7E 66 66 66 
06f6b     66 36 06 66 
06f6f     66 7E 3C 00 
06f73     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
06f77     3C 7E 66 66 
06f7b     66 7E 7E 66 
06f7f     66 66 66 00 
06f83     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
06f87     7E 66 66 7E 
06f8b     3E 66 66 66 
06f8f     66 7E 3E 00 
06f93     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
06f97     7E 66 66 06 
06f9b     06 06 06 66 
06f9f     66 7E 3C 00 
06fa3     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
06fa7     7E 66 66 66 
06fab     66 66 66 66 
06faf     66 7E 3E 00 
06fb3     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
06fb7     7E 06 06 3E 
06fbb     3E 06 06 06 
06fbf     06 7E 7E 00 
06fc3     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
06fc7     7E 06 06 3E 
06fcb     3E 06 06 06 
06fcf     06 06 06 00 
06fd3     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
06fd7     7E 06 06 76 
06fdb     76 66 66 66 
06fdf     66 7E 3C 00 
06fe3     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
06fe7     66 66 66 7E 
06feb     7E 66 66 66 
06fef     66 66 66 00 
06ff3     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
06ff7     7E 18 18 18 
06ffb     18 18 18 18 
06fff     18 7E 7E 00 
07003     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
07007     60 60 60 60 
0700b     60 60 60    | 	byte	$60[7]
0700e     66 66 7E 3C 
07012     00 00 00 00 
07016     66 66 36 36 
0701a     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
0701e     66 66 C6 C6 
07022     00 00 00 00 
07026     06 06 06 06 
0702a     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
0702e     06 06 7E 7E 
07032     00 00 00 00 
07036     C6 C6 EE EE 
0703a     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
0703e     C6 C6 C6 C6 
07042     00 00 00 00 
07046     66 66 66 6E 
0704a     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
0704e     76 66 66 66 
07052     00 00 00 00 
07056     3C 7E 66 66 
0705a     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0705e     66 66 7E 3C 
07062     00 00 00 00 
07066     3E 7E 66 66 
0706a     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
0706e     06 06 06 06 
07072     00 00 00 00 
07076     3C 7E 66 66 
0707a     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0707e     66 56 3E 6C 
07082     00 00 00 00 
07086     3E 7E 66 66 
0708a     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
0708e     66 66 C6 C6 
07092     00 00 00 00 
07096     7C 7E 06 06 
0709a     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
0709e     60 60 7E 3E 
070a2     00 00 00 00 
070a6     7E 7E 18 18 
070aa     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
070ae     18 18 18 18 
070b2     00 00 00 00 
070b6     66 66 66 66 
070ba     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
070be     66 66 7E 3C 
070c2     00 00 00 00 
070c6     66 66 66 66 
070ca     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
070ce     3C 3C 18 18 
070d2     00 00 00 00 
070d6     C6 C6 C6 C6 
070da     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
070de     FE EE C6 82 
070e2     00 00 00 00 
070e6     66 66 66 3C 
070ea     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
070ee     3C 66 66 66 
070f2     00 00 00 00 
070f6     66 66 66 66 
070fa     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
070fe     18 18 18 18 
07102     00 00 00 00 
07106     7E 7E 30 30 
0710a     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
0710e     06 06 7E 7E 
07112     00 00 00 00 
07116     3C 3C 0C 0C 
0711a     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
0711e     0C 0C 3C 3C 
07122     00 00 00 00 
07126     06 06 0C 0C 
0712a     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
0712e     60 60 C0 C0 
07132     00 00 00 00 
07136     3C 3C 30 30 
0713a     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
0713e     30 30 3C 3C 
07142     00 00 00 00 
07146     18 18 3C 3C 
0714a     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
0714e     00 00 00 00 
07152     00 00 00 00 
07156     00 00 00 00 
0715a     00 00 00 00 
0715e     00 00       | 	byte	$00[18]
07160     FE FE 00 00 
07164     00 00 0C 0C 
07168     18 18 00 00 
0716c     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
07170     00 00 00 00 
07174     00 00 00 00 
07178     00          | 	byte	$00[9]
07179     3C 7C 60 7C 
0717d     7E 66 66 7E 
07181     7C 00 00 00 
07185     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
07189     3E 7E 66 66 
0718d     66 66 66 7E 
07191     3E 00 00 00 
07195     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
07199     3C 3E 06 06 
0719d     06 06 06 7E 
071a1     7C 00 00 00 
071a5     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
071a9     7C 7E 66 66 
071ad     66 66 66 7E 
071b1     7C 00 00 00 
071b5     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
071b9     3C 7E 66 66 
071bd     7E 06 06 7E 
071c1     7C 00 00 00 
071c5     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
071c9     18 7E 7E 18 
071cd     18 18 18 18 
071d1     18 00 00 00 
071d5     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
071d9     7C 7E 66 66 
071dd     66 66 7E 7C 
071e1     60 7E 3E 00 
071e5     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
071e9     3E 7E 66 66 
071ed     66 66 66 66 
071f1     66 00 00 00 
071f5     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
071f9     1C 1C 18 18 
071fd     18 18 18 3C 
07201     3C 00 00 00 
07205     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
07209     30 30 30 30 
0720d     30 30 30 30 
07211     30          | 	byte	$30[9]
07212     3E 1E 00 00 
07216     06 06 06 36 
0721a     36 1E 1E 1E 
0721e     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
07222     00 00 00 00 
07226     1C 1C 18 18 
0722a     18 18 18 18 
0722e     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
07232     00 00 00 00 
07236     00 00 00    | 	byte	$00[7]
07239     6C FE FE D6 
0723d     D6 C6 C6 C6 
07241     C6 00 00 00 
07245     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
07249     3E 7E 66 66 
0724d     66 66 66 66 
07251     66 00 00 00 
07255     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
07259     3C 7E 66 66 
0725d     66 66 66 7E 
07261     3C 00 00 00 
07265     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
07269     3E 7E 66 66 
0726d     66 66 66 7E 
07271     3E 06 06 00 
07275     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
07279     7C 7E 66 66 
0727d     66 66 66 7E 
07281     7C 60 60 00 
07285     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
07289     3E 7E 66 06 
0728d     06 06 06 06 
07291     06 00 00 00 
07295     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
07299     7C 7E 06 0E 
0729d     3C 70 60 7E 
072a1     3E 00 00 00 
072a5     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
072a9     7E 7E 18 18 
072ad     18 18 18 78 
072b1     70 00 00 00 
072b5     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
072b9     66 66 66 66 
072bd     66 66 66    | 	byte	$66[7]
072c0     7E 7C 00 00 
072c4     00 00 00 00 
072c8     00 66 66 66 
072cc     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
072d0     18 18 00 00 
072d4     00 00 00 00 
072d8     00 C6 C6 D6 
072dc     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
072e0     C6 82 00 00 
072e4     00 00 00 00 
072e8     00 66 66 3C 
072ec     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
072f0     66 66 00 00 
072f4     00 00 00 00 
072f8     00 66 66 66 
072fc     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
07300     7C 60 7E 3E 
07304     00 00 00 00 
07308     00 7E 7E 30 
0730c     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
07310     7E 7E 00 00 
07314     00 00 30 18 
07318     18 18 18 0C 
0731c     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
07320     18 30 00 00 
07324     00 00 18 18 
07328     18 18 18 18 
0732c     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
07330     18 18 00 00 
07334     00 00 0C 18 
07338     18 18 18 30 
0733c     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
07340     18 0C 00 00 
07344     00 00 6C 7E 
07348     36 00 00 00 
0734c     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
07350     00 00 00 00 
07354     00 00 00 00 
07358     00          | 	byte	$00[9]
07359     18 18 18 18 
0735d     18 18 00 00 
07361     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
07364     00 00 00 00 
07368     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
0736c     00 00 00 00 
07370     00 80 80 80 
07374     00 00 00 FF 
07378     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
0737c     00 00 00 00 
07380     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
07381     80 00 00 00 
07385     00 80 00 00 
07389     80 80 00 00 
0738d     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
07391     80 00 80 00 
07395     00 40 80 00 
07399     AA AA AA 00 
0739d     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
073a1     FF 00 00 00 
073a5     00 FF 00 00 
073a9     FF FF 00 00 
073ad     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
073b1     FF 00 FF 00 
073b5     00 FF FF 00 
073b9     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
073bc     00 00 00 00 
073c0     00          | ataripalette   file "ataripalettep2.def"
073c1     11 11 11 00 
073c5     22 22 22 00 
073c9     33 33 33 00 
073cd     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
073d1     55 55 55 00 
073d5     66 66 66 00 
073d9     77 77 77 00 
073dd     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
073e1     99 99 99 00 
073e5     AA AA AA 00 
073e9     BB BB BB 00 
073ed     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
073f1     DD DD DD 00 
073f5     EE EE EE 00 
073f9     FF FF FF 00 
073fd     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
07401     00 14 40 00 
07405     00 1E 60 00 
07409     00 28 80 00 
0740d     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
07411     00 3C BF 00 
07415     00 46 DF 00 
07419     00 50 FF 00 
0741d     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
07421     39 77 FF 00 
07425     55 8A FF 00 
07429     71 9E FF 00 
0742d     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
07431     AA C5 FF 00 
07435     C6 D8 FF 00 
07439     E3 EC FF 00 
0743d     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
07441     00 00 40 00 
07445     00 00 60 00 
07449     00 00 80 00 
0744d     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
07451     00 00 BF 00 
07455     00 00 DF 00 
07459     00 00 FF 00 
0745d     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
07461     39 39 FF 00 
07465     55 55 FF 00 
07469     71 71 FF 00 
0746d     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
07471     AA AA FF 00 
07475     C6 C6 FF 00 
07479     E3 E3 FF 00 
0747d     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
07481     20 00 40 00 
07485     30 00 60 00 
07489     40 00 80 00 
0748d     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
07491     60 00 BF 00 
07495     70 00 DF 00 
07499     80 00 FF 00 
0749d     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
074a1     9C 39 FF 00 
074a5     AA 55 FF 00 
074a9     B8 71 FF 00 
074ad     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
074b1     D5 AA FF 00 
074b5     E3 C6 FF 00 
074b9     F1 E3 FF 00 
074bd     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
074c1     40 00 40 00 
074c5     60 00 60 00 
074c9     80 00 80 00 
074cd     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
074d1     BF 00 BF 00 
074d5     DF 00 DF 00 
074d9     FF 00 FF 00 
074dd     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
074e1     FF 39 FF 00 
074e5     FF 55 FF 00 
074e9     FF 71 FF 00 
074ed     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
074f1     FF AA FF 00 
074f5     FF C6 FF 00 
074f9     FF E3 FF 00 
074fd     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
07501     40 00 20 00 
07505     60 00 30 00 
07509     80 00 40 00 
0750d     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
07511     BF 00 60 00 
07515     DF 00 70 00 
07519     FF 00 80 00 
0751d     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
07521     FF 39 9C 00 
07525     FF 55 AA 00 
07529     FF 71 B8 00 
0752d     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
07531     FF AA D5 00 
07535     FF C6 E3 00 
07539     FF E3 F1 00 
0753d     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
07541     40 00 00 00 
07545     60 00 00 00 
07549     80 00 00 00 
0754d     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
07551     BF 00 00 00 
07555     DF 00 00 00 
07559     FF 00 00 00 
0755d     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
07561     FF 39 39 00 
07565     FF 55 55 00 
07569     FF 71 71 00 
0756d     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
07571     FF AA AA 00 
07575     FF C6 C6 00 
07579     FF E3 E3 00 
0757d     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
07581     40 10 00 00 
07585     60 18 00 00 
07589     80 20 00 00 
0758d     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
07591     BF 30 00 00 
07595     DF 38 00 00 
07599     FF 40 00 00 
0759d     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
075a1     FF 6A 39 00 
075a5     FF 80 55 00 
075a9     FF 95 71 00 
075ad     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
075b1     FF BF AA 00 
075b5     FF D5 C6 00 
075b9     FF EA E3 00 
075bd     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
075c1     40 20 00 00 
075c5     60 30 00 00 
075c9     80 40 00 00 
075cd     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
075d1     BF 60 00 00 
075d5     DF 70 00 00 
075d9     FF 80 00 00 
075dd     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
075e1     FF 9C 39 00 
075e5     FF AA 55 00 
075e9     FF B8 71 00 
075ed     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
075f1     FF D5 AA 00 
075f5     FF E3 C6 00 
075f9     FF F1 E3 00 
075fd     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
07601     40 30 00 00 
07605     60 48 00 00 
07609     80 60 00 00 
0760d     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
07611     BF 90 00 00 
07615     DF A8 00 00 
07619     FF C0 00 00 
0761d     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
07621     FF CE 39 00 
07625     FF D5 55 00 
07629     FF DC 71 00 
0762d     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
07631     FF EA AA 00 
07635     FF F1 C6 00 
07639     FF F8 E3 00 
0763d     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
07641     30 40 00 00 
07645     48 60 00 00 
07649     60 80 00 00 
0764d     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
07651     90 BF 00 00 
07655     A8 DF 00 00 
07659     C0 FF 00 00 
0765d     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
07661     CE FF 39 00 
07665     D5 FF 55 00 
07669     DC FF 71 00 
0766d     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
07671     EA FF AA 00 
07675     F1 FF C6 00 
07679     F8 FF E3 00 
0767d     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
07681     00 40 00 00 
07685     00 60 00 00 
07689     00 80 00 00 
0768d     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
07691     00 BF 00 00 
07695     00 DF 00 00 
07699     00 FF 00 00 
0769d     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
076a1     39 FF 39 00 
076a5     55 FF 55 00 
076a9     71 FF 71 00 
076ad     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
076b1     AA FF AA 00 
076b5     C6 FF C6 00 
076b9     E3 FF E3 00 
076bd     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
076c1     00 40 14 00 
076c5     00 60 1E 00 
076c9     00 80 28 00 
076cd     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
076d1     00 BF 3C 00 
076d5     00 DF 46 00 
076d9     00 FF 50 00 
076dd     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
076e1     39 FF 77 00 
076e5     55 FF 8A 00 
076e9     71 FF 9E 00 
076ed     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
076f1     AA FF C5 00 
076f5     C6 FF D8 00 
076f9     E3 FF EC 00 
076fd     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
07701     00 40 28 00 
07705     00 60 3C 00 
07709     00 80 50 00 
0770d     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
07711     00 BF 78 00 
07715     00 DF 8C 00 
07719     00 FF A0 00 
0771d     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
07721     39 FF B5 00 
07725     55 FF C0 00 
07729     71 FF CA 00 
0772d     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
07731     AA FF DF 00 
07735     C6 FF EA 00 
07739     E3 FF F4 00 
0773d     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
07741     00 40 40 00 
07745     00 60 60 00 
07749     00 80 80 00 
0774d     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
07751     00 BF BF 00 
07755     00 DF DF 00 
07759     00 FF FF 00 
0775d     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
07761     39 FF FF 00 
07765     55 FF FF 00 
07769     71 FF FF 00 
0776d     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
07771     AA FF FF 00 
07775     C6 FF FF 00 
07779     E3 FF FF 00 
0777d     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
07781     00 28 40 00 
07785     00 3C 60 00 
07789     00 50 80 00 
0778d     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
07791     00 78 BF 00 
07795     00 8C DF 00 
07799     00 A0 FF 00 
0779d     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
077a1     39 B5 FF 00 
077a5     55 C0 FF 00 
077a9     71 CA FF 00 
077ad     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
077b1     AA DF FF 00 
077b5     C6 EA FF 00 
077b9     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
077bc                 | '**********************************************************************************
077bc                 | '
077bc                 | '        Timings and colors definitions
077bc                 | '
077bc                 | '**********************************************************************************
077bc                 | 
077bc                 |    'streamer sets for text mode, to add to timings[0..5]
077bc                 | 
077bc                 | 
077bc                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
077bc     10 00 00 00 
077c0     50 00 00 00 
077c4     14 00 00 00 
077c8     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
077cc     70 00 00 00 
077d0     08 00 00 00 
077d4     30 00 00 00 
077d8     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
077dc     10 00 00 00 
077e0     10 00 00 00 
077e4     00 00 00 00 
077e8     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
077ec     E0 01 00 00 
077f0     F6 32 24 15 
077f4     FB 6C C3 01 
077f8     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
077fc                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
077fc     12 00 00 00 
07800     30 00 00 00 
07804     10 00 00 00 
07808     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
0780c     18 00 00 00 
07810     08 00 00 00 
07814     18 00 00 00 
07818     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
0781c     20 00 00 00 
07820     18 00 00 00 
07824     40 00 00 00 
07828     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
0782c     F0 01 00 00 
07830     00 D0 12 13 
07834     FB 0F 00 01 
07838     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
0783c     10 00 00 00 
07840     40 00 00 00 
07844     10 00 00 00 
07848     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
0784c     08 00 00 00 
07850     08 00 00 00 
07854     08 00 00 00 
07858     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
0785c     40 00 00 00 
07860     20 00 00 00 
07864     80 00 00 00 
07868     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
0786c     E0 01 00 00 
07870     70 AE E9 10 
07874     FB 8B FF 01 
07878     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
0787c     10 00 00 00 
07880     50 00 00 00 
07884     14 00 00 00 
07888     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
0788c     00 00 00 00 
07890     08 00 00 00 
07894     00 00 00 00 
07898     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
0789c     10 00 00 00 
078a0     10 00 00 00 
078a4     C0 00 00 00 
078a8     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
078ac     40 02 00 00 
078b0     F6 32 24 15 
078b4     FB 6C C3 01 
078b8     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
078bc     50 00 00 00 
078c0     A0 00 00 00 
078c4     54 00 00 00 
078c8     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
078cc     08 00 00 00 
078d0     08 00 00 00 
078d4     08 00 00 00 
078d8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
078dc     0C 00 00 00 
078e0     08 00 00 00 
078e4     00 01 00 00 
078e8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
078ec     E0 01 00 00 
078f0     10 06 56 15 
078f4     FB 64 C3 01 
078f8     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
078fc     50 00 00 00 
07900     32 00 00 00 
07904     50 00 00 00 
07908     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
0790c     08 00 00 00 
07910     08 00 00 00 
07914     08 00 00 00 
07918     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
0791c     0C 00 00 00 
07920     08 00 00 00 
07924     40 01 00 00 
07928     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
0792c     E0 01 00 00 
07930     F2 CD 33 13 
07934     FB 53 92 01 
07938     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
0793c     18 00 00 00 
07940     30 00 00 00 
07944     18 00 00 00 
07948     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
0794c     08 00 00 00 
07950     08 00 00 00 
07954     08 00 00 00 
07958     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
0795c     0C 00 00 00 
07960     08 00 00 00 
07964     80 01 00 00 
07968     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
0796c     E0 01 00 00 
07970     F4 8F 11 11 
07974     FB 3A 55 01 
07978     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
0797c     20 00 00 00 
07980     40 00 00 00 
07984     22 00 00 00 
07988     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
0798c     00 00 00 00 
07990     08 00 00 00 
07994     00 00 00 00 
07998     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
0799c     0C 00 00 00 
079a0     08 00 00 00 
079a4     C0 01 00 00 
079a8     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
079ac     F0 01 00 00 
079b0     F2 CD 33 13 
079b4     FB 53 92 01 
079b8     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
079bc                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
079bc     00 75 C7 97 
079c0     27 47 F6 0A 
079c4     05 79 CB 9B 
079c8     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
079cc                 | 
079cc     28 12 64 FD | hdmi            setq    #9
079d0     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
079d4                 |            '     setq2   #255
079d4                 |             '    rdlong  $100, paletteptr 
079d4     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
079d8     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
079dc     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
079e0     78 F9 02 F1 |                 add     ii,hbase
079e4     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
079e8     7B 0B 80 FF 
079ec     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
079f0                 | 
079f0     66 66 86 FF 
079f4     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
079f8                 | 
079f8                 | 
079f8                 | ''--------  frame rendering main loop  ---------------------------------------------------
079f8                 | 
079f8                 | p101
079f8     28 14 64 FD |                 setq    #10
079fc     00 DF 06 FB |                 rdlong  framebuf,  ptra
07a00     28 1E 64 FD |                 setq    #15
07a04     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
07a08     71 99 02 FB |                 rdlong  border,borderptr
07a0c                 | 
07a0c     01 C4 06 F1 |                 add     frames,#1
07a10     76 F5 02 F6 |                 mov     dlptr2,dlptr
07a14                 | 
07a14     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
07a18     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
07a1c     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
07a20     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
07a24                 |  '' up porch
07a24                 | 
07a24     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
07a28     49 FF 02 F6 |                 mov     hsync1,sync_001
07a2c     37 A8 46 FB |                 callpa  i_upporch ,#blank
07a30     72 01 68 FC |                 wrlong  #0,vblankptr
07a34                 |                 
07a34     1F EA 16 F4 |                 testb   paletteptr,#31 wc
07a38     29 FE 65 3D |          if_nc  setq2   #255
07a3c     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
07a40                 | 
07a40                 | '' cursor blinking
07a40                 | 
07a40     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
07a44     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
07a48                 | 
07a48                 | '' main screen
07a48                 | 
07a48     00 BE 06 F6 |                 mov linenum,#0
07a4c     00 18 07 F6 |                 mov rcnt,#0
07a50     00 1C 07 F6 |                 mov rcnt2a,#0
07a54                 | 
07a54                 | 
07a54     00 18 0F F2 | p301            cmp rcnt,#0 wz
07a58     18 00 90 AD |         if_z    jmp #p306
07a5c     01 18 87 F1 |                 sub rcnt,#1
07a60     90 F7 02 F6 |                 mov dl,rdl
07a64     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
07a68     8F F7 02 A1 |    if_z        add dl,roffset  
07a6c     7B 21 03 F6 |                 mov rdl,dl
07a70     04 00 90 FD |                 jmp #p307          
07a74                 |           
07a74                 |                 
07a74     7A F7 02 FB | p306            rdlong  dl,dlptr2
07a78     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
07a7c     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
07a80     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
07a84                 | 
07a84                 | '' Special entry:
07a84                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
07a84                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
07a84                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
07a84                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
07a84                 | '' todo: set horizontal scroll (if needed)
07a84                 | 
07a84     02 FA 66 F0 |                 shl framebuf2,#2
07a88     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
07a8c     04 22 0F F2 |                 cmp dlc,#%100 wz
07a90                 |   
07a90                 |                 
07a90     04 F4 06 F1 |                 add dlptr2,#4
07a94     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
07a98     7A 21 03 FB |                  rdlong rdl,dlptr2
07a9c     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
07aa0     04 18 47 F0 |                  shr rcnt,#4
07aa4                 |              
07aa4     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
07aa8     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
07aac                 |                 
07aac     04 1E 47 F0 |                  shr roffset,#4
07ab0     0C 1E 67 F0 |                  shl roffset,#12
07ab4                 |   
07ab4     9C FF 9F FD |                  jmp #p301
07ab8                 |                  
07ab8                 |                  
07ab8                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
07ab8     0C FA 46 F0 |                 shr     framebuf2,#12
07abc     02 FA 66 F0 |                 shl     framebuf2,#2
07ac0                 | 
07ac0     7B 03 E3 F8 |                 getbyte t1,dl,#0
07ac4     00 02 0F F2 |                 cmp     t1,#0 wz
07ac8     34 00 90 AD |     if_z        jmp     #borderline
07acc                 | 
07acc     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
07ad0     50 00 90 CD |           if_c   jmp     #textline
07ad4     50 02 90 3D |           if_nc  jmp     #graphline
07ad8                 | '
07ad8     01 BE 06 F1 | p302            add     linenum,#1
07adc     04 F4 06 F1 |                 add     dlptr2,#4
07ae0     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
07ae4     6C FF 9F 5D |          if_nz  jmp     #p301
07ae8                 | 
07ae8     72 03 68 FC | p112            wrlong  #1,vblankptr
07aec     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
07af0                 | 
07af0     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
07af4     4B FF 02 F6 |                 mov     hsync1,sync_223
07af8     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
07afc     F8 FE 9F FD |                 jmp     #p101
07b00                 | 
07b00                 | '' ---------------  END of frame rendering loop -------------------------------------------
07b00                 | 
07b00                 | 
07b00     14 00 B0 FD | borderline      call    #hsync                      ' make a border
07b04     4C A1 C2 FC |                 xcont   m_vi,border
07b08     CC FF 9F FD |                 jmp     #p302
07b0c                 | 
07b0c                 | 
07b0c     08 00 B0 FD | blank           call    #hsync                          'blank lines
07b10     7E A1 C2 FC |                 xcont   m_vi,hsync0
07b14     FD ED 6F 0B |         _ret_   djnz    pa,#blank
07b18                 | 
07b18     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
07b1c     7F 9D B2 FC |                 xzero   m_sn,hsync1
07b20     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
07b24                 | 
07b24                 | 
07b24                 | 
07b24                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
07b24                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
07b24                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
07b24                 | 
07b24                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
07b24                 | 
07b24     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
07b28                 | 
07b28     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
07b2c     7B 17 5B F8 |                 getnib  zoom, dl,#3
07b30     03 16 07 F5 |                 and             zoom, #3
07b34                 | 
07b34                 | 
07b34                 | 
07b34     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
07b38     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
07b3c     3F BC 06 F5 |                 and     linestart,#63
07b40     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
07b44     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
07b48                 | 
07b48     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
07b4c                 | 
07b4c                 |                        ' if fontline =0, get a border color
07b4c                 | 
07b4c     51 03 33 F9 | p102            getword t1,m_border,#0
07b50     00 02 0F F2 |                 cmp     t1, #0 wz
07b54     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
07b58                 | 
07b58     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
07b5c     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
07b60     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
07b64     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
07b68     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
07b6c     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
07b70     52 BB 02 F6 |                 mov m_lut2, m_lut1
07b74     6A BB 02 F1 |                 add m_lut2, lutt1
07b78     58 0F 03 F6 |                 mov cpl2,i_cpl
07b7c                 | 
07b7c     02 16 0F F2 |                cmp zoom,#2 wz
07b80     E4 00 90 AD |           if_z jmp #p420
07b84     01 16 0F F2 |                cmp zoom,#1 wz
07b88     64 00 90 AD |           if_z jmp #p410
07b8c     00 16 0F F2 |                 cmp zoom,#0 wz
07b90     04 00 90 AD |           if_z jmp #p400
07b94     50 01 90 FD |                jmp #p430
07b98                 | 
07b98                 |                    '
07b98                 |  ''---------------------------------------------------------------------------------------------------------
07b98     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
07b9c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07ba0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07ba4     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07ba8     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07bac     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07bb0     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07bb4     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07bb8     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07bbc     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07bc0                 | 
07bc0     81 BB C2 FC |                         xcont m_lut2,t1
07bc4                 | 
07bc4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07bc8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07bcc     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07bd0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07bd4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07bd8     01 C0 86 F1 |                         sub     lutaddr,#1
07bdc                 | 
07bdc     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07be0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07be4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07be8                 | 
07be8     EB 0F 6F FB |                         djnz   cpl2,#p400
07bec     28 01 90 FD |  p401                   jmp    #p103
07bf0                 | 
07bf0                 | ''------------------------------------------------------------------------------------------------------------
07bf0                 | 
07bf0     01 0E 47 F0 |  p410                   shr cpl2,#1
07bf4                 | 
07bf4                 | ''---------------------------------------------------------------------------------------------------------
07bf4     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
07bf8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07bfc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07c00     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07c04     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07c08     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07c0c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07c10     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07c14     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07c18     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07c1c                 | 
07c1c                 | 
07c1c     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
07c20     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
07c24     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
07c28     03 02 07 FA |                         mul t1,#3
07c2c     81 BB C2 FC |                         xcont m_lut2,t1
07c30     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07c34     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07c38     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07c3c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07c40     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07c44     01 C0 86 F1 |                         sub     lutaddr,#1
07c48     63 06 63 FD |                         mergew t3
07c4c     03 06 07 FA |                         mul t3,#3
07c50     83 BB C2 FC |                         xcont m_lut2,t3
07c54                 | 
07c54     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07c58     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07c5c                 | 
07c5c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07c60                 | 
07c60     E4 0F 6F FB |                         djnz   cpl2,#p412
07c64     B0 00 90 FD |  p411                   jmp    #p103
07c68                 | 
07c68                 | ''------------------------------------------------------------------------------------------------------------
07c68                 | 
07c68     02 0E 47 F0 |  p420                   shr cpl2,#2
07c6c                 | 
07c6c                 | ''---------------------------------------------------------------------------------------
07c6c     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
07c70     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07c74     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07c78     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07c7c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07c80     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07c84     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07c88     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07c8c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07c90     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07c94                 | 
07c94     61 02 63 FD |                         mergeb t1
07c98     81 07 3B F9 |                         getword t3,t1,#1
07c9c     0F 02 07 FA |                         mul t1,#15
07ca0     81 BB C2 FC |                         xcont m_lut2,t1
07ca4                 | 
07ca4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07ca8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07cac     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07cb0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07cb4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07cb8     01 C0 86 F1 |                         sub     lutaddr,#1
07cbc                 | 
07cbc     81 09 EB F8 |                         getbyte t4,t1,#1        '
07cc0     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
07cc4                 | 
07cc4     0F 06 07 FA |                         mul t3,#15
07cc8     83 BB C2 FC |                         xcont m_lut2,t3
07ccc                 | 
07ccc     83 0B EB F8 |                         getbyte t5,t3,#1
07cd0     85 BB C2 FC |                         xcont m_lut2, t5
07cd4     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07cd8     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07cdc                 | 
07cdc     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07ce0                 | 
07ce0     E2 0F 6F FB |                         djnz   cpl2,#p422
07ce4     30 00 90 FD |  p421                   jmp    #p103
07ce8                 | 
07ce8                 | '--------------------------------------------------------------------------------------------------------------
07ce8                 | 
07ce8     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
07cec     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07cf0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07cf4                 | 
07cf4     00 BA C6 FC |                         xcont m_lut2,#0
07cf8                 | 
07cf8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07cfc     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07d00     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07d04     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07d08     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07d0c     01 C0 86 F1 |                         sub     lutaddr,#1
07d10                 | 
07d10     F5 0F 6F FB |                         djnz   cpl2,#p430
07d14     00 00 90 FD |  p431                   jmp    #p103
07d18                 | 
07d18                 | ''------------------------------------------------------------------------------------------------------------
07d18                 | 
07d18                 | 
07d18                 | 
07d18     51 25 33 F9 | p103            getword  mb2,m_border,#0
07d1c     00 24 0F F2 |                 cmp      mb2, #0 wz
07d20     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
07d24                 | 
07d24     B0 FD 9F FD |                 jmp #p302
07d28                 | 
07d28                 | '' -------------------------------------- END of text line ---------------------------------
07d28                 | 
07d28                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
07d28                 | 
07d28     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
07d2c                 | 
07d2c                 | 
07d2c     51 25 33 F9 | p202            getword mb2,m_border,#0
07d30     00 24 0F F2 |                 cmp     mb2, #0 wz
07d34     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
07d38                 | 
07d38                 | '----------------------------------------- display pixels
07d38                 | 
07d38     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
07d3c     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
07d40                 | 
07d40     7B 17 5B F8 |                 getnib  zoom, dl,#3
07d44     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
07d48                 | 
07d48     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
07d4c     0C BC 06 F5 |                 and     colordepth,#12
07d50                 | 
07d50     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
07d54     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
07d58     64 00 90 AD |           if_z  jmp     #p240
07d5c                 | 
07d5c     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
07d60     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
07d64     98 00 90 AD |           if_z  jmp     #p250
07d68                 | 
07d68     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
07d6c     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
07d70     FC 00 90 AD |           if_z  jmp     #p260
07d74                 | 
07d74     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
07d78                 | 
07d78                 | '' --- 8 bit color modes
07d78                 | 
07d78     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
07d7c     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
07d80                 | 
07d80     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
07d84     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
07d88                 |        
07d88                 |  '  
07d88     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
07d8c     25 0C 07 A6 |                 if_z mov skippattern,#%100101
07d90                 |     
07d90                 |  
07d90     05 0C 07 56 |                 if_nz mov skippattern,#%000101
07d94     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
07d98                 |         
07d98                 | 
07d98                 |         
07d98     7D 11 03 FB | p235               rdlong  char,framebuf2
07d9c     32 0C 63 FD |                    skipf skippattern
07da0     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
07da4     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
07da8     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
07dac     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
07db0     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
07db4     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
07db8     F7 0F 6F FB |                    djnz    cpl2,#p235
07dbc                 | 
07dbc     20 01 90 FD |                jmp    #p203
07dc0                 |                   
07dc0                 | 
07dc0                 | 
07dc0                 | '' --- 1 bit color modes
07dc0                 | 
07dc0     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
07dc4     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
07dc8                 | 
07dc8     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
07dcc     13 0C 07 A6 |        if_z   mov skippattern,#%10011
07dd0     08 0C 07 56 |        if_nz  mov skippattern,#%01000
07dd4                 | 
07dd4                 | 
07dd4     7D 11 E3 FA | p241               rdword  char,framebuf2
07dd8     44 10 FF F9 |                    movbyts char,#%01000100
07ddc     63 10 63 FD |                    mergew  char
07de0     32 0C 63 FD |                    skipf skippattern
07de4     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
07de8     63 10 63 FD |                    mergew  char                    ' 1 0
07dec     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
07df0     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
07df4     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
07df8     F6 0F 6F FB |                    djnz   cpl2,#p241
07dfc                 | 
07dfc                 | 
07dfc     E0 00 90 FD |                jmp    #p203
07e00                 | 
07e00                 | '' --- 2 bit color modes
07e00                 | 
07e00     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
07e04     C8 00 90 AD |        if_z   jmp #p251
07e08                 | 
07e08     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
07e0c     30 00 90 AD |        if_z   jmp #p252
07e10                 | 
07e10                 | 
07e10     7D 11 C3 FA | p254               rdbyte char,framebuf2
07e14     04 0A 07 F6 |                    mov  t5,#4
07e18     02 10 67 F0 | p255               shl  char,#2
07e1c     88 03 53 F8 |                    getnib  t1,char,#2
07e20     03 02 07 F5 |                    and     t1,#3
07e24     55 02 07 FA |                    mul     t1,#$55
07e28     81 05 03 F9 |                    rolbyte  t2,t1,#0
07e2c     FA 0B 6F FB |                    djnz    t5,#p255
07e30     82 BB C2 FC |                    xcont   m_lut2,t2
07e34     01 FA 06 F1 |                    add     framebuf2,#1
07e38     F5 0F 6F FB |                    djnz    cpl2,#p254
07e3c     A0 00 90 FD |                    jmp     #p203
07e40                 | 
07e40     7D 11 E3 FA | p252               rdword char,framebuf2
07e44     08 0A 07 F6 |                    mov  t5,#8
07e48     02 10 67 F0 | p253               shl  char,#2
07e4c     88 03 63 F8 |                    getnib  t1,char,#4
07e50     03 02 07 F5 |                    and     t1,#3
07e54     05 02 07 FA |                    mul     t1,#5
07e58     81 05 83 F8 |                    rolnib  t2,t1,#0
07e5c     FA 0B 6F FB |                    djnz    t5,#p253
07e60     82 BB C2 FC |                    xcont   m_lut2,t2
07e64     02 FA 06 F1 |                    add     framebuf2,#2
07e68     F5 0F 6F FB |                    djnz    cpl2,#p252
07e6c     70 00 90 FD |                    jmp     #p203
07e70                 | 
07e70                 | '' ------ 4 bit color modes
07e70                 | 
07e70     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
07e74     58 00 90 AD |        if_z   jmp #p251
07e78                 | 
07e78     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
07e7c     2C 00 90 AD |        if_z   jmp #p262
07e80                 | 
07e80                 | 
07e80     7D 11 C3 FA | p263               rdbyte char,framebuf2
07e84     02 0A DC FC |                            rep #5,#2
07e88     88 05 8B F8 |                              rolnib t2,char,#1
07e8c     88 05 8B F8 |                                  rolnib t2,char,#1
07e90     88 05 8B F8 |                              rolnib t2,char,#1
07e94     88 05 8B F8 |                                  rolnib t2,char,#1
07e98     04 10 67 F0 |                              shl char,#4
07e9c     82 BB C2 FC |                    xcont   m_lut2,t2
07ea0     01 FA 06 F1 |                    add     framebuf2,#1
07ea4     F6 0F 6F FB |                    djnz    cpl2,#p263
07ea8     34 00 90 FD |                    jmp     #p203
07eac                 | 
07eac     7D 11 E3 FA | p262               rdword  char,framebuf2
07eb0     04 06 DC FC |                            rep #3,#4
07eb4     88 05 9B F8 |                              rolnib t2,char,#3
07eb8     88 05 9B F8 |                                  rolnib t2,char,#3
07ebc     04 10 67 F0 |                              shl char,#4
07ec0     82 BB C2 FC |                    xcont   m_lut2,t2
07ec4     02 FA 06 F1 |                    add     framebuf2,#2
07ec8     F8 0F 6F FB |                    djnz    cpl2,#p262
07ecc     10 00 90 FD |                    jmp     #p203
07ed0                 | 
07ed0                 | ''---------- all color modes without zoom
07ed0                 | 
07ed0     87 07 D8 FC | p251               rep  #3,cpl2
07ed4     7D 11 03 FB |                    rdlong  char,framebuf2
07ed8     04 FA 06 F1 |                    add     framebuf2,#4
07edc     88 BB C2 FC |                    xcont   m_lut2,char
07ee0                 |           
07ee0                 |  ''-----------------------------------------------------------------------------------------
07ee0                 | p203           ' getword  mb2,m_border,#0
07ee0     00 24 0F F2 |                 cmp      mb2, #0 wz
07ee4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
07ee8                 | 
07ee8     EC FB 9F FD |                 jmp #p302
07eec                 | 
07eec                 | '' -------------------------------------- END of graph  line ---------------------------------
07eec                 | 
07eec                 | '' consts and vars
07eec                 | 
07eec     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
07ef0     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
07ef4     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
07ef8     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
07efc                 | 
07efc     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
07f00                 | 
07f00                 | '------ these longs will be set by setmode function
07f00                 | 
07f00     00 00 00 00 | m_bs            long    0        'blanks before sync
07f04     00 00 00 00 | m_sn            long    0        'sync
07f08     00 00 00 00 | m_bv            long    0        'blanks before visible
07f0c     00 00 00 00 | m_vi            long    0        'visible pixels #
07f10     00 00 00 00 | m_border        long    0        'left/right borders
07f14     00 00 00 00 | m_lut1          long    0        'characters
07f18     00 00 00 00 | i_vborder       long    0        'up/down borders
07f1c     00 00 00 00 | i_upporch       long    0        'up porch lines
07f20     00 00 00 00 | i_vsync         long    0        'vsync lines
07f24     00 00 00 00 | i_downporch     long    0        'down porch lines
07f28     00 00 00 00 | i_modenum       long    0        'mode #
07f2c     00 00 00 00 | i_cpl           long    0        'chars/longs per line
07f30     00 00 00 00 | i_lines         long    0        'scanlines #
07f34     00 00 00 00 | i_clock         long    0
07f38     00 00 00 00 | i_hubset        long    0
07f3c     00 00 00 00 | i_totalvis      long    0
07f40                 | 
07f40                 | '-------------------------------------
07f40                 | 
07f40     00 00 00 00 | m_lut2          long    0
07f44                 | 
07f44                 | colordepth
07f44     00 00 00 00 | linestart       long    0
07f48     00 00 00 00 | linenum         long    0
07f4c     00 01 00 00 | lutaddr         long    256
07f50                 | 
07f50     0E 00 00 00 | cursorsh        long    14
07f54     00 00 00 00 | frames          long    0
07f58     00 00 00 00 | cursorx         long    0
07f5c     00 00 00 00 | cursory         long    0
07f60     00 00 00 00 | cursorpos       long    0
07f64     00 00 00 00 | cursorpos2      long    0
07f68     00 00 00 00 | fontstart       long    0
07f6c     00 00 00 00 | border2         long 0
07f70     00 00 81 70 | lutiv           long $70810000
07f74     00 00 88 00 | lutt1           long $00880000
07f78     00 00 80 00 | lutg1           long $00800000
07f7c     00 00 80 10 | lutg2           long $10800000
07f80     00 00 80 20 | lutg4           long $20800000
07f84     00 00 80 30 | lutg8           long $30800000
07f88     00 00 00 00 | framebuf        long 0
07f8c     00 00 00 00 | fontbuf         long 0
07f90     00 00 00 00 | borderptr       long 0
07f94     00 00 00 00 | vblankptr       long 0
07f98     00 00 00 00 | cursorptr       long 0
07f9c     00 00 00 00 | modeptr         long 0
07fa0     00 00 00 00 | paletteptr      long 0
07fa4     00 00 00 00 | dlptr           long 0
07fa8                 | fontnumptr      res     1
07fa8                 | fontnumptr      res     1
07fa8                 | hbase           res     1
07fa8                 | hbase           res     1
07fa8                 | borderptr2      res     1
07fa8                 | borderptr2      res     1
07fa8                 | dlptr2 res 1
07fa8                 | dlptr2 res 1
07fa8                 | dl              res 1
07fa8                 | dl              res 1
07fa8                 | ii              res     1
07fa8                 | ii              res     1
07fa8                 | framebuf2       res     1
07fa8                 | framebuf2       res     1
07fa8                 | hsync0          res     1
07fa8                 | hsync0          res     1
07fa8                 | hsync1          res     1
07fa8                 | hsync1          res     1
07fa8                 | fontline        res     1
07fa8                 | fontline        res     1
07fa8                 | t1              res     1
07fa8                 | t1              res     1
07fa8                 | t2              res     1
07fa8                 | t2              res     1
07fa8                 | t3 res 1
07fa8                 | t3 res 1
07fa8                 | t4 res 1
07fa8                 | t4 res 1
07fa8                 | t5 res 1
07fa8                 | t5 res 1
07fa8                 | skippattern res 1
07fa8                 | skippattern res 1
07fa8                 | cpl2 res 1
07fa8                 | cpl2 res 1
07fa8                 | char            res     1
07fa8                 | char            res     1
07fa8                 | backcolor       res     1
07fa8                 | backcolor       res     1
07fa8                 | charcolor       res     1
07fa8                 | charcolor       res     1
07fa8                 | zoom res 1
07fa8                 | zoom res 1
07fa8     00 00 00 00 | rcnt long 0 'dl repeat count
07fac     00 00 00 00 | rcnt2 long 0
07fb0     00 00 00 00 | rcnt2a long 0
07fb4     00 00 00 00 | roffset long 0
07fb8     00 00 00 00 | rdl long 0  'dl repeat line
07fbc     00 00 00 00 | dlc long 0 'dl command
07fc0     00 00 00 00 | mb2 long 0
07fc4     00 00 00 00 | aend             long 0
07fc8                 |                 fit     496                     '
07fc8                 | __system__dat_
07fc8     00 00 00 00 
07fcc     00 00 00 00 | 	byte	$00[8]
07fd0     03 00 00 00 
07fd4     00 00 00 00 
07fd8     00 00 00 00 
07fdc     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07fe0     00 00 00 00 
07fe4     00 00 00 00 
07fe8     00 00 00 00 | 	byte	$00[12]
07fec     05 00 00 00 
07ff0     00 00 00 00 
07ff4     00 00 00 00 
07ff8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07ffc     C4 81 00 00 | 	long	@@@__system__dat_ + 508
08000     CC 81 00 00 | 	long	@@@__system__dat_ + 516
08004     00 00 00 00 | 	byte	$00, $00, $00, $00
08008     D4 81 00 00 | 	long	@@@__system__dat_ + 524
0800c     DC 81 00 00 | 	long	@@@__system__dat_ + 532
08010     00 00 00 00 
08014     00 00 00 00 | 	byte	$00[8]
08018     01 00 00 00 
0801c     06 00 00 00 
08020     00 00 00 00 
08024     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08028     00 00 00 00 | 	byte	$00, $00, $00, $00
0802c     E4 81 00 00 | 	long	@@@__system__dat_ + 540
08030     EC 81 00 00 | 	long	@@@__system__dat_ + 548
08034     00 00 00 00 | 	byte	$00, $00, $00, $00
08038     F4 81 00 00 | 	long	@@@__system__dat_ + 556
0803c     FC 81 00 00 | 	long	@@@__system__dat_ + 564
08040     00 00 00 00 
08044     00 00 00 00 | 	byte	$00[8]
08048     01 00 00 00 
0804c     06 00 00 00 
08050     00 00 00 00 
08054     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08058     00 00 00 00 | 	byte	$00, $00, $00, $00
0805c     04 82 00 00 | 	long	@@@__system__dat_ + 572
08060     0C 82 00 00 | 	long	@@@__system__dat_ + 580
08064     00 00 00 00 | 	byte	$00, $00, $00, $00
08068     14 82 00 00 | 	long	@@@__system__dat_ + 588
0806c     1C 82 00 00 | 	long	@@@__system__dat_ + 596
08070     00 00 00 00 
      ...             
081c0     00 00 00 00 
081c4     00 00 00 00 | 	byte	$00[344]
081c8     DC 38 00 00 | 	long	@@@__system___tx
081cc     00 00 00 00 | 	byte	$00, $00, $00, $00
081d0     24 39 00 00 | 	long	@@@__system___rx
081d4     00 00 00 00 | 	byte	$00, $00, $00, $00
081d8     44 52 00 00 | 	long	@@@__system___rxtxioctl_0131
081dc     00 00 00 00 | 	byte	$00, $00, $00, $00
081e0     BC 52 00 00 | 	long	@@@__system____dummy_flush_0132
081e4     00 00 00 00 | 	byte	$00, $00, $00, $00
081e8     DC 38 00 00 | 	long	@@@__system___tx
081ec     00 00 00 00 | 	byte	$00, $00, $00, $00
081f0     24 39 00 00 | 	long	@@@__system___rx
081f4     00 00 00 00 | 	byte	$00, $00, $00, $00
081f8     44 52 00 00 | 	long	@@@__system___rxtxioctl_0131
081fc     00 00 00 00 | 	byte	$00, $00, $00, $00
08200     BC 52 00 00 | 	long	@@@__system____dummy_flush_0132
08204     00 00 00 00 | 	byte	$00, $00, $00, $00
08208     DC 38 00 00 | 	long	@@@__system___tx
0820c     00 00 00 00 | 	byte	$00, $00, $00, $00
08210     24 39 00 00 | 	long	@@@__system___rx
08214     00 00 00 00 | 	byte	$00, $00, $00, $00
08218     44 52 00 00 | 	long	@@@__system___rxtxioctl_0131
0821c     00 00 00 00 | 	byte	$00, $00, $00, $00
08220     BC 52 00 00 | 	long	@@@__system____dummy_flush_0132
08224     00 00 00 00 | 	byte	$00, $00, $00, $00
08228                 | __heap_base
08228     00 00 00 00 
      ...             
09228     00 00 00 00 
0922c     00 00 00 00 | 	long	0[1026]
09230                 | objmem
09230     00 00 00 00 | 	long	0[1]
09234 115             | 	org	COG_BSS_START
09234 115             | _var01
09234 115             | 	res	1
09234 116             | _var02
09234 116             | 	res	1
09234 117             | _var03
09234 117             | 	res	1
09234 118             | _var04
09234 118             | 	res	1
09234 119             | _var05
09234 119             | 	res	1
09234 11a             | _var06
09234 11a             | 	res	1
09234 11b             | _var07
09234 11b             | 	res	1
09234 11c             | _var08
09234 11c             | 	res	1
09234 11d             | _var09
09234 11d             | 	res	1
09234 11e             | _var10
09234 11e             | 	res	1
09234 11f             | _var11
09234 11f             | 	res	1
09234 120             | _var12
09234 120             | 	res	1
09234 121             | _var13
09234 121             | 	res	1
09234 122             | _var14
09234 122             | 	res	1
09234 123             | _var15
09234 123             | 	res	1
09234 124             | _var16
09234 124             | 	res	1
09234 125             | arg01
09234 125             | 	res	1
09234 126             | arg02
09234 126             | 	res	1
09234 127             | arg03
09234 127             | 	res	1
09234 128             | arg04
09234 128             | 	res	1
09234 129             | arg05
09234 129             | 	res	1
09234 12a             | local01
09234 12a             | 	res	1
09234 12b             | local02
09234 12b             | 	res	1
09234 12c             | local03
09234 12c             | 	res	1
09234 12d             | local04
09234 12d             | 	res	1
09234 12e             | local05
09234 12e             | 	res	1
09234 12f             | local06
09234 12f             | 	res	1
09234 130             | local07
09234 130             | 	res	1
09234 131             | local08
09234 131             | 	res	1
09234 132             | local09
09234 132             | 	res	1
09234 133             | local10
09234 133             | 	res	1
09234 134             | local11
09234 134             | 	res	1
09234 135             | local12
09234 135             | 	res	1
09234 136             | local13
09234 136             | 	res	1
09234 137             | local14
09234 137             | 	res	1
09234 138             | local15
09234 138             | 	res	1
09234 139             | local16
09234 139             | 	res	1
09234 13a             | local17
09234 13a             | 	res	1
09234 13b             | local18
09234 13b             | 	res	1
09234 13c             | local19
09234 13c             | 	res	1
09234 13d             | local20
09234 13d             | 	res	1
09234 13e             | local21
09234 13e             | 	res	1
09234 13f             | local22
09234 13f             | 	res	1
09234 140             | local23
09234 140             | 	res	1
09234 141             | local24
09234 141             | 	res	1
09234 142             | local25
09234 142             | 	res	1
09234 143             | local26
09234 143             | 	res	1
09234 144             | local27
09234 144             | 	res	1
09234 145             | local28
09234 145             | 	res	1
09234 146             | local29
09234 146             | 	res	1
09234 147             | local30
09234 147             | 	res	1
09234 148             | local31
09234 148             | 	res	1
09234 149             | local32
09234 149             | 	res	1
09234 14a             | local33
09234 14a             | 	res	1
09234 14b             | local34
09234 14b             | 	res	1
09234 14c             | local35
09234 14c             | 	res	1
09234 14d             | local36
09234 14d             | 	res	1
09234 14e             | local37
09234 14e             | 	res	1
09234 14f             | local38
09234 14f             | 	res	1
09234 150             | local39
09234 150             | 	res	1
09234 151             | local40
09234 151             | 	res	1
09234 152             | local41
09234 152             | 	res	1
09234 153             | local42
09234 153             | 	res	1
09234 154             | local43
09234 154             | 	res	1
09234 155             | local44
09234 155             | 	res	1
09234 156             | local45
09234 156             | 	res	1
09234 157             | local46
09234 157             | 	res	1
09234 158             | local47
09234 158             | 	res	1
09234 159             | local48
09234 159             | 	res	1
09234 15a             | local49
09234 15a             | 	res	1
09234 15b             | local50
09234 15b             | 	res	1
09234 15c             | local51
09234 15c             | 	res	1
09234 15d             | local52
09234 15d             | 	res	1
09234 15e             | local53
09234 15e             | 	res	1
09234 15f             | local54
09234 15f             | 	res	1
09234 160             | local55
09234 160             | 	res	1
09234 161             | local56
09234 161             | 	res	1
09234 162             | local57
09234 162             | 	res	1
09234 163             | local58
09234 163             | 	res	1
09234 164             | local59
09234 164             | 	res	1
09234 165             | local60
09234 165             | 	res	1
09234 166             | local61
09234 166             | 	res	1
09234 167             | local62
09234 167             | 	res	1
09234 168             | local63
09234 168             | 	res	1
09234 169             | local64
09234 169             | 	res	1
09234 16a             | local65
09234 16a             | 	res	1
09234 16b             | local66
09234 16b             | 	res	1
09234 16c             | local67
09234 16c             | 	res	1
09234 16d             | local68
09234 16d             | 	res	1
09234 16e             | local69
09234 16e             | 	res	1
09234 16f             | local70
09234 16f             | 	res	1
09234 170             | local71
09234 170             | 	res	1
09234 171             | local72
09234 171             | 	res	1
09234 172             | local73
09234 172             | 	res	1
09234 173             | local74
09234 173             | 	res	1
09234 174             | local75
09234 174             | 	res	1
09234 175             | local76
09234 175             | 	res	1
09234 176             | local77
09234 176             | 	res	1
09234 177             | local78
09234 177             | 	res	1
09234 178             | local79
09234 178             | 	res	1
09234 179             | local80
09234 179             | 	res	1
09234 17a             | local81
09234 17a             | 	res	1
09234 17b             | local82
09234 17b             | 	res	1
09234 17c             | local83
09234 17c             | 	res	1
09234 17d             | local84
09234 17d             | 	res	1
09234 17e             | local85
09234 17e             | 	res	1
09234 17f             | local86
09234 17f             | 	res	1
09234 180             | local87
09234 180             | 	res	1
09234 181             | local88
09234 181             | 	res	1
09234 182             | local89
09234 182             | 	res	1
09234 183             | local90
09234 183             | 	res	1
09234 184             | muldiva_
09234 184             | 	res	1
09234 185             | muldivb_
09234 185             | 	res	1
09234 186             | 	fit	480
09234 186             | 
