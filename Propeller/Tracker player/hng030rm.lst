00000                 | 
00000                 | #line 1 "/home/pik33/P2-Retromachine/Propeller/Tracker player/hng030rm.p2asm"
00000                 | ' 
00000                 | ' 
00000                 | ' hdmi_base       = 0            'must be a multiple of 8
00000                 | con
00000                 | 	hdmi_base = 0
00000                 | ' _clkfreq        = 320_000_000    'start safe, hubset will do the rest. The clock will be changed to:
00000                 | 	_clkfreq = 320000000
00000                 | ' 
00000                 | ' ' 354_689_500   200x Atari 8-bit PAL,  50x Amiga PAL  - real settings: 49,869-> 354_693_878  - 1.0000123 - mode 0 and 192
00000                 | ' ' 357_954_500   200x Atari 8-bit NTSC, 50x Amiga NTSC - real settings: 49,877-> 357_959_184  - 1.0000131 - mode 256
00000                 | ' 
00000                 | ' ' 319_220_550   180x PAL  - real settings: 51,814-> 319_215_686 - 0.9999848 - mode 64
00000                 | ' ' 322_159_050   180x NTSC - real settings: 37,596-> 322_162_162 - 1.0000097 - mode 320 and 448
00000                 | ' 
00000                 | ' ' 283_751_600   160x PAL  - real settings: 64,908-> 283_750_000 - 0.9999944 - mode 128
00000                 | ' ' 286_363_600   160x NTSC - real settings: 22,315-> 286_363_636 - 1.0000001 - mode 384
00000                 | ' 
00000                 | ' ''--------- VGA DOS color definition constants
00000                 | ' 
00000                 | ' c_black         =    0
00000                 | 	c_black = 0
00000                 | ' c_blue          =  117
00000                 | 	c_blue = 117
00000                 | ' c_green         =  199
00000                 | 	c_green = 199
00000                 | ' c_cyan          =  149
00000                 | 	c_cyan = 149
00000                 | ' c_red           =   39
00000                 | 	c_red = 39
00000                 | ' c_magenta       =   71
00000                 | 	c_magenta = 71
00000                 | ' c_brown         =  246
00000                 | 	c_brown = 246
00000                 | ' c_lightgray     =   10
00000                 | 	c_lightgray = 10
00000                 | ' c_darkgray      =    5
00000                 | 	c_darkgray = 5
00000                 | ' c_lightblue     =  121
00000                 | 	c_lightblue = 121
00000                 | ' c_lightgreen    =  203
00000                 | 	c_lightgreen = 203
00000                 | ' c_lightcyan     =  155
00000                 | 	c_lightcyan = 155
00000                 | ' c_lightred      =   43
00000                 | 	c_lightred = 43
00000                 | ' c_lightmagenta  =   75
00000                 | 	c_lightmagenta = 75
00000                 | ' c_yellow        =  234
00000                 | 	c_yellow = 234
00000                 | ' c_white         =   15
00000                 | 	c_white = 15
00000                 | ' 
00000                 | ' timingsxxt      =  $70810000
00000                 | 	timingsxxt = 1887502336
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 B6 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 DA F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 07 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16781304
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 07 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16781307
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 68 89 89 FF 
00440 00f 14 00 6C FC | 	wrlong	##320000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 78 07 A0 FD | 	call	#_dummy
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 FA 61 FD | 	cogid	arg01
00614 084 03 FA 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 A7 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 B7 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 FB 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 FD 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 FF 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 01 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D B6 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 FE 55 F0 |         shr	arg03, #1 wc
00688 0a1 FD FC 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 FA 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 FC FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 FE 55 F0 |         shr	arg03, #1 wc
00698 0a5 FD FC 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 FA 05 C1 |  if_c   add	arg01, #2
006a0 0a7 FE FC 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 FD 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 FE 0D F2 |         cmp	arg03, #0 wz
006ac 0aa FF 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 FC 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 03 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 FF 5B 8D F9 |     altd  COUNT_, #511
006d4 0b4 28 00 64 FD |     setq #0-0
006d8 0b5 61 05 66 FC |     wrlong local01, ptra++
006dc 0b6             | pushregs_done_
006dc 0b6 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006e0 0b7 61 5B 65 FC |     wrlong COUNT_, ptra++
006e4 0b8 F8 5F 01 F6 |     mov    fp, ptra
006e8 0b9 2C EC 63 FD |     jmp  pa
006ec 0ba             |  popregs_
006ec 0ba 2B EC 63 FD |     pop    pa
006f0 0bb 28 04 64 FD |     setq   #2
006f4 0bc 5F 5B 05 FB |     rdlong COUNT_, --ptra
006f8 0bd 02 5A 75 FB |     djf    COUNT_, #popregs__ret
006fc 0be 28 5A 61 FD |     setq   COUNT_
00700 0bf 5F 05 06 FB |     rdlong local01, --ptra
00704 0c0             | popregs__ret
00704 0c0 2A 5C 61 FD |     push   RETADDR_
00708 0c1 2C EC 63 FD |     jmp    pa
0070c 0c2             | 
0070c 0c2             | unsdivide_
0070c 0c2 28 00 64 FD |        setq    #0
00710 0c3 15 29 12 FD |        qdiv    muldiva_, muldivb_
00714 0c4 18 2A 62 FD |        getqx   muldivb_
00718 0c5 19 28 62 0D |  _ret_ getqy   muldiva_
0071c 0c6             | 
0071c 0c6             | divide_
0071c 0c6 14 29 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00720 0c7 03 A4 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
00724 0c8 15 2B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00728 0c9 02 A4 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
0072c 0ca 2D 00 64 AD |  if_z  ret
00730 0cb D8 FF BF FD |        call    #unsdivide_
00734 0cc 01 A4 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00738 0cd 14 29 82 F6 |        negc    muldiva_,muldiva_ 
0073c 0ce 02 A4 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00740 0cf 15 2B 82 06 |  _ret_ negc    muldivb_,muldivb_
00744 0d0             | 
00744 0d0             | __heap_ptr
00744 0d0 C0 5A 00 00 | 	long	@__heap_base
00748 0d1             | itmp1_
00748 0d1 00 00 00 00 | 	long	0
0074c 0d2             | itmp2_
0074c 0d2 00 00 00 00 | 	long	0
00750 0d3             | objptr
00750 0d3 C8 6A 00 00 | 	long	@objmem
00754 0d4             | ptr___system__dat__
00754 0d4 A8 5A 00 00 | 	long	@__system__dat_
00758 0d5             | ptr__dat__
00758 0d5 44 36 00 00 | 	long	@_dat_
0075c 0d6             | ptr__putpixel1_
0075c 0d6 14 18 00 00 | 	long	@_putpixel1
00760 0d7             | ptr__putpixel2_
00760 0d7 00 19 00 00 | 	long	@_putpixel2
00764 0d8             | ptr__putpixel4_
00764 0d8 8C 19 00 00 | 	long	@_putpixel4
00768 0d9             | ptr__putpixel8_
00768 0d9 78 1A 00 00 | 	long	@_putpixel8
0076c 0da             | ptr_stackspace_
0076c 0da B4 6B 00 00 | 	long	@stackspace
00770 0db             | result1
00770 0db 00 00 00 00 | 	long	0
00774 0dc             | result2
00774 0dc 00 00 00 00 | 	long	0
00778 0dd             | COG_BSS_START
00778 0dd             | 	fit	480
00778                 | 	orgh
00778                 | hubentry
00778                 | 
00778                 | ' 
00778                 | ' 
00778                 | ' ''--------- timings
00778                 | ' ' 0  m_bs        - before sync,             16      80
00778                 | ' ' 1  m_sn        - sync                     80     160
00778                 | ' ' 2  m_bv        - before visible           20      84
00778                 | ' ' 3  m_vi        - visible                1024     816
00778                 | ' ' 4  m_border    - left and right borders  112       8
00778                 | ' ' 5  m_lut1      - pixels per char           8       8
00778                 | ' ' 6  i_vborder   - up and down border       48       8
00778                 | ' ' 7  i_upporch   - up non visible           16       8
00778                 | ' ' 8  i_vsync     - vsync                    16      12
00778                 | ' ' 9  i_downporch - down non visible         16       8
00778                 | ' '10  mode #
00778                 | ' '11  cpl         - character per line
00778                 | ' '12  scanlines #
00778                 | ' '13  clock
00778                 | ' '14  hubset value for clock settings
00778                 | ' 
00778                 | ' 
00778                 | ' '*************************************************************************
00778                 | ' '                                                                        *
00778                 | ' '  A dummy start function if someone runs this driver alone              *
00778                 | ' '                                                                        *
00778                 | ' '*************************************************************************
00778                 | ' 
00778                 | ' pub dummy()|i,x,y,ntsc,bbb,ccc,zzx,zzy,amode,x1,x2,y1,y2,r
00778                 | _dummy
00778     0C 5A 05 F6 | 	mov	COUNT_, #12
0077c     B0 00 A0 FD | 	call	#pushregs_
00780                 | ' '' this is not a main program.
00780                 | ' 
00780                 | ' start(512+64+48,hdmi_base)
00780     01 00 00 FF 
00784     70 FA 05 F6 | 	mov	arg01, ##624
00788     00 FC 05 F6 | 	mov	arg02, #0
0078c     28 20 B0 FD | 	call	#_start
00790                 | ' 'start(512+256+64+32,hdmi_base)
00790                 | ' 
00790                 | ' cls(15,1)
00790     0F FA 05 F6 | 	mov	arg01, #15
00794     01 FC 05 F6 | 	mov	arg02, #1
00798     F8 13 B0 FD | 	call	#_cls
0079c                 | ' setfontfamily(0)
0079c                 | ' 
0079c                 | ' font_family:=afontnum
0079c     C8 A6 05 F1 | 	add	objptr, #200
007a0     D3 00 68 FC | 	wrlong	#0, objptr
007a4     C8 A6 85 F1 | 	sub	objptr, #200
007a8                 | ' waitvbl(100)
007a8     64 FA 05 F6 | 	mov	arg01, #100
007ac     4C 13 B0 FD | 	call	#_waitvbl
007b0                 | ' outtextxycg(0,0,inttostr(long[0]),11,1)
007b0     00 04 06 F6 | 	mov	local01, #0
007b4     00 06 06 F6 | 	mov	local02, #0
007b8     00 FA 05 FB | 	rdlong	arg01, #0
007bc     10 15 B0 FD | 	call	#_inttostr
007c0     DB FE 01 F6 | 	mov	arg03, result1
007c4     02 FB 01 F6 | 	mov	arg01, local01
007c8     03 FD 01 F6 | 	mov	arg02, local02
007cc     0B 00 06 F6 | 	mov	arg04, #11
007d0     01 02 06 F6 | 	mov	arg05, #1
007d4     9C 0F B0 FD | 	call	#_outtextxycg
007d8                 | ' waitvbl(300)
007d8     2C FB 05 F6 | 	mov	arg01, #300
007dc     1C 13 B0 FD | 	call	#_waitvbl
007e0                 | ' 'maketestdl(512+48)
007e0                 | ' waitvbl(1200)
007e0     02 00 00 FF 
007e4     B0 FA 05 F6 | 	mov	arg01, ##1200
007e8     10 13 B0 FD | 	call	#_waitvbl
007ec                 | ' repeat i from 0 to 10000
007ec     13 00 00 FF 
007f0     11 09 06 F6 | 	mov	local03, ##10001
007f4                 | LR__0001
007f4                 | '   ccc:=getrnd()&255
007f4     1B 0A 62 FD | 	getrnd	local04
007f8     FF 0A 06 F5 | 	and	local04, #255
007fc                 | '   x1:=getrnd()+//896
007fc     1B B6 61 FD | 	getrnd	result1
00800     DB 28 02 F6 | 	mov	muldiva_, result1
00804     01 00 00 FF 
00808     80 2B 06 F6 | 	mov	muldivb_, ##896
0080c     C2 00 A0 FD | 	call	#unsdivide_
00810     14 0D 02 F6 | 	mov	local05, muldiva_
00814                 | '   x2:=getrnd()+//896
00814     1B B6 61 FD | 	getrnd	result1
00818     DB 28 02 F6 | 	mov	muldiva_, result1
0081c     01 00 00 FF 
00820     80 2B 06 F6 | 	mov	muldivb_, ##896
00824     C2 00 A0 FD | 	call	#unsdivide_
00828     14 0F 02 F6 | 	mov	local06, muldiva_
0082c                 | '   y1:=getrnd()+//496
0082c     1B B6 61 FD | 	getrnd	result1
00830     DB 28 02 F6 | 	mov	muldiva_, result1
00834     F0 2B 06 F6 | 	mov	muldivb_, #496
00838     C2 00 A0 FD | 	call	#unsdivide_
0083c     14 11 02 F6 | 	mov	local07, muldiva_
00840                 | '   y2:=getrnd()+//496
00840     1B B6 61 FD | 	getrnd	result1
00844     DB 28 02 F6 | 	mov	muldiva_, result1
00848     F0 2B 06 F6 | 	mov	muldivb_, #496
0084c     C2 00 A0 FD | 	call	#unsdivide_
00850                 | ' 
00850                 | ' 
00850                 | '   line(x1,y1,x2,y2,ccc)
00850     06 FB 01 F6 | 	mov	arg01, local05
00854     08 FD 01 F6 | 	mov	arg02, local07
00858     07 FF 01 F6 | 	mov	arg03, local06
0085c     05 03 02 F6 | 	mov	arg05, local04
00860     14 01 02 F6 | 	mov	arg04, muldiva_
00864     64 0C B0 FD | 	call	#_line
00868     E2 09 6E FB | 	djnz	local03, #LR__0001
0086c                 | ' 
0086c                 | ' repeat i from 0 to 1000
0086c     01 00 00 FF 
00870     E9 13 06 F6 | 	mov	local08, ##1001
00874                 | LR__0002
00874                 | ' 
00874                 | '   x1:=getrnd()+//896
00874     1B B6 61 FD | 	getrnd	result1
00878     DB 28 02 F6 | 	mov	muldiva_, result1
0087c     01 00 00 FF 
00880     80 2B 06 F6 | 	mov	muldivb_, ##896
00884     C2 00 A0 FD | 	call	#unsdivide_
00888     14 0D 02 F6 | 	mov	local05, muldiva_
0088c                 | '   y1:=getrnd()+//496
0088c     1B B6 61 FD | 	getrnd	result1
00890     DB 28 02 F6 | 	mov	muldiva_, result1
00894     F0 2B 06 F6 | 	mov	muldivb_, #496
00898     C2 00 A0 FD | 	call	#unsdivide_
0089c     14 11 02 F6 | 	mov	local07, muldiva_
008a0                 | '   r:=getrnd()+//100
008a0     1B B6 61 FD | 	getrnd	result1
008a4     DB 28 02 F6 | 	mov	muldiva_, result1
008a8     64 2A 06 F6 | 	mov	muldivb_, #100
008ac     C2 00 A0 FD | 	call	#unsdivide_
008b0                 | '   ccc:=getrnd()&255
008b0     1B B6 61 FD | 	getrnd	result1
008b4     DB 00 02 F6 | 	mov	arg04, result1
008b8     FF 00 06 F5 | 	and	arg04, #255
008bc                 | '   fcircle(x1,y1,r,ccc)   
008bc     06 FB 01 F6 | 	mov	arg01, local05
008c0     08 FD 01 F6 | 	mov	arg02, local07
008c4     14 FF 01 F6 | 	mov	arg03, muldiva_
008c8     D0 07 B0 FD | 	call	#_fcircle
008cc     E9 13 6E FB | 	djnz	local08, #LR__0002
008d0                 | ' 
008d0                 | ' repeat i from 0 to 10000
008d0     13 00 00 FF 
008d4     11 15 06 F6 | 	mov	local09, ##10001
008d8                 | LR__0003
008d8                 | '   ccc:=getrnd()&255
008d8     1B 0A 62 FD | 	getrnd	local04
008dc     FF 0A 06 F5 | 	and	local04, #255
008e0                 | '   x1:=getrnd()+//896
008e0     1B B6 61 FD | 	getrnd	result1
008e4     DB 28 02 F6 | 	mov	muldiva_, result1
008e8     01 00 00 FF 
008ec     80 2B 06 F6 | 	mov	muldivb_, ##896
008f0     C2 00 A0 FD | 	call	#unsdivide_
008f4     14 0D 02 F6 | 	mov	local05, muldiva_
008f8                 | '   x2:=getrnd()+//896
008f8     1B B6 61 FD | 	getrnd	result1
008fc     DB 28 02 F6 | 	mov	muldiva_, result1
00900     01 00 00 FF 
00904     80 2B 06 F6 | 	mov	muldivb_, ##896
00908     C2 00 A0 FD | 	call	#unsdivide_
0090c     14 0F 02 F6 | 	mov	local06, muldiva_
00910                 | '   y1:=getrnd()+//496
00910     1B B6 61 FD | 	getrnd	result1
00914     DB 28 02 F6 | 	mov	muldiva_, result1
00918     F0 2B 06 F6 | 	mov	muldivb_, #496
0091c     C2 00 A0 FD | 	call	#unsdivide_
00920     14 11 02 F6 | 	mov	local07, muldiva_
00924                 | '   y2:=getrnd()+//496
00924     1B B6 61 FD | 	getrnd	result1
00928     DB 28 02 F6 | 	mov	muldiva_, result1
0092c     F0 2B 06 F6 | 	mov	muldivb_, #496
00930     C2 00 A0 FD | 	call	#unsdivide_
00934                 | ' 
00934                 | ' 
00934                 | '   frame(x1,y1,x2,y2,ccc)
00934     06 FB 01 F6 | 	mov	arg01, local05
00938     08 FD 01 F6 | 	mov	arg02, local07
0093c     07 FF 01 F6 | 	mov	arg03, local06
00940     05 03 02 F6 | 	mov	arg05, local04
00944     14 01 02 F6 | 	mov	arg04, muldiva_
00948     9C 0A B0 FD | 	call	#_frame
0094c     E2 15 6E FB | 	djnz	local09, #LR__0003
00950                 | '   
00950                 | ' repeat i from 0 to 10000
00950     13 00 00 FF 
00954     11 17 06 F6 | 	mov	local10, ##10001
00958                 | LR__0004
00958                 | ' 
00958                 | '   x1:=getrnd()+//896
00958     1B B6 61 FD | 	getrnd	result1
0095c     DB 28 02 F6 | 	mov	muldiva_, result1
00960     01 00 00 FF 
00964     80 2B 06 F6 | 	mov	muldivb_, ##896
00968     C2 00 A0 FD | 	call	#unsdivide_
0096c     14 0D 02 F6 | 	mov	local05, muldiva_
00970                 | '   y1:=getrnd()+//496
00970     1B B6 61 FD | 	getrnd	result1
00974     DB 28 02 F6 | 	mov	muldiva_, result1
00978     F0 2B 06 F6 | 	mov	muldivb_, #496
0097c     C2 00 A0 FD | 	call	#unsdivide_
00980     14 11 02 F6 | 	mov	local07, muldiva_
00984                 | '   r:=getrnd()+//100
00984     1B B6 61 FD | 	getrnd	result1
00988     DB 28 02 F6 | 	mov	muldiva_, result1
0098c     64 2A 06 F6 | 	mov	muldivb_, #100
00990     C2 00 A0 FD | 	call	#unsdivide_
00994                 | '   ccc:=getrnd()&255
00994     1B B6 61 FD | 	getrnd	result1
00998     DB 00 02 F6 | 	mov	arg04, result1
0099c     FF 00 06 F5 | 	and	arg04, #255
009a0                 | '   circle(x1,y1,r,ccc) 
009a0     06 FB 01 F6 | 	mov	arg01, local05
009a4     08 FD 01 F6 | 	mov	arg02, local07
009a8     14 FF 01 F6 | 	mov	arg03, muldiva_
009ac     1C 08 B0 FD | 	call	#_circle
009b0     E9 17 6E FB | 	djnz	local10, #LR__0004
009b4                 | '   
009b4                 | ' repeat i from 0 to 1000
009b4     01 00 00 FF 
009b8     E9 19 06 F6 | 	mov	local11, ##1001
009bc                 | LR__0005
009bc                 | '   ccc:=getrnd()&255
009bc     1B 0A 62 FD | 	getrnd	local04
009c0     FF 0A 06 F5 | 	and	local04, #255
009c4                 | '   x1:=getrnd()+//896
009c4     1B B6 61 FD | 	getrnd	result1
009c8     DB 28 02 F6 | 	mov	muldiva_, result1
009cc     01 00 00 FF 
009d0     80 2B 06 F6 | 	mov	muldivb_, ##896
009d4     C2 00 A0 FD | 	call	#unsdivide_
009d8     14 0D 02 F6 | 	mov	local05, muldiva_
009dc                 | '   x2:=getrnd()+//100
009dc     1B B6 61 FD | 	getrnd	result1
009e0     DB 28 02 F6 | 	mov	muldiva_, result1
009e4     64 2A 06 F6 | 	mov	muldivb_, #100
009e8     C2 00 A0 FD | 	call	#unsdivide_
009ec     14 0F 02 F6 | 	mov	local06, muldiva_
009f0                 | '   y1:=getrnd()+//496
009f0     1B B6 61 FD | 	getrnd	result1
009f4     DB 28 02 F6 | 	mov	muldiva_, result1
009f8     F0 2B 06 F6 | 	mov	muldivb_, #496
009fc     C2 00 A0 FD | 	call	#unsdivide_
00a00     14 11 02 F6 | 	mov	local07, muldiva_
00a04                 | '   y2:=getrnd()+//100
00a04     1B B6 61 FD | 	getrnd	result1
00a08     DB 28 02 F6 | 	mov	muldiva_, result1
00a0c     64 2A 06 F6 | 	mov	muldivb_, #100
00a10     C2 00 A0 FD | 	call	#unsdivide_
00a14                 | ' 
00a14                 | ' 
00a14                 | '   box(x1,y1,x1+x2,y1+y2,ccc)  
00a14     06 FB 01 F6 | 	mov	arg01, local05
00a18     08 FD 01 F6 | 	mov	arg02, local07
00a1c     07 0D 02 F1 | 	add	local05, local06
00a20     06 FF 01 F6 | 	mov	arg03, local05
00a24     14 11 02 F1 | 	add	local07, muldiva_
00a28     08 01 02 F6 | 	mov	arg04, local07
00a2c     05 03 02 F6 | 	mov	arg05, local04
00a30     3C 0A B0 FD | 	call	#_box
00a34     E1 19 6E FB | 	djnz	local11, #LR__0005
00a38                 | '       
00a38                 | '   
00a38                 | ' {
00a38                 | ' }
00a38                 | ' setfontfamily(4)
00a38                 | ' 
00a38                 | ' font_family:=afontnum
00a38     C8 A6 05 F1 | 	add	objptr, #200
00a3c     D3 08 68 FC | 	wrlong	#4, objptr
00a40     C8 A6 85 F1 | 	sub	objptr, #200
00a44                 | ' repeat amode from 512 to 1023
00a44     09 1A C6 F9 | 	decod	local12, #9
00a48                 | LR__0006
00a48                 | '   setmode(amode)
00a48     0D FB 01 F6 | 	mov	arg01, local12
00a4c     90 13 B0 FD | 	call	#_setmode
00a50                 | '   ccc:=((amode>>4)&3)
00a50     0D 0B 02 F6 | 	mov	local04, local12
00a54     04 0A 46 F0 | 	shr	local04, #4
00a58     03 0A 0E F5 | 	and	local04, #3 wz
00a5c                 | '   if (ccc==0)
00a5c     80 01 90 5D |  if_ne	jmp	#LR__0007
00a60                 | '     cls(0,1)
00a60     00 FA 05 F6 | 	mov	arg01, #0
00a64     01 FC 05 F6 | 	mov	arg02, #1
00a68     28 11 B0 FD | 	call	#_cls
00a6c                 | '     outtextxycg(0,0,string("mode"),0,1)
00a6c     1A 00 00 FF 
00a70     CA FF 05 F6 | 	mov	arg03, ##@LR__0191
00a74     00 FA 05 F6 | 	mov	arg01, #0
00a78     00 FC 05 F6 | 	mov	arg02, #0
00a7c     00 00 06 F6 | 	mov	arg04, #0
00a80     01 02 06 F6 | 	mov	arg05, #1
00a84     EC 0C B0 FD | 	call	#_outtextxycg
00a88                 | '     outtextxycg(0,16,string("cpl"),0,1)
00a88     1A 00 00 FF 
00a8c     CF FF 05 F6 | 	mov	arg03, ##@LR__0192
00a90     00 FA 05 F6 | 	mov	arg01, #0
00a94     10 FC 05 F6 | 	mov	arg02, #16
00a98     00 00 06 F6 | 	mov	arg04, #0
00a9c     01 02 06 F6 | 	mov	arg05, #1
00aa0     D0 0C B0 FD | 	call	#_outtextxycg
00aa4                 | '     outtextxycg(0,32,string("bufptr"),0,1)
00aa4     1A 00 00 FF 
00aa8     D3 FF 05 F6 | 	mov	arg03, ##@LR__0193
00aac     00 FA 05 F6 | 	mov	arg01, #0
00ab0     20 FC 05 F6 | 	mov	arg02, #32
00ab4     00 00 06 F6 | 	mov	arg04, #0
00ab8     01 02 06 F6 | 	mov	arg05, #1
00abc     B4 0C B0 FD | 	call	#_outtextxycg
00ac0                 | '     outtextxycg(0,48,string("buflen"),0,1)
00ac0     1A 00 00 FF 
00ac4     DA FF 05 F6 | 	mov	arg03, ##@LR__0194
00ac8     00 FA 05 F6 | 	mov	arg01, #0
00acc     30 FC 05 F6 | 	mov	arg02, #48
00ad0     00 00 06 F6 | 	mov	arg04, #0
00ad4     01 02 06 F6 | 	mov	arg05, #1
00ad8     98 0C B0 FD | 	call	#_outtextxycg
00adc                 | '     outtextxycg(0,64,string("lines"),0,1)
00adc     1A 00 00 FF 
00ae0     E1 FF 05 F6 | 	mov	arg03, ##@LR__0195
00ae4     00 FA 05 F6 | 	mov	arg01, #0
00ae8     40 FC 05 F6 | 	mov	arg02, #64
00aec     00 00 06 F6 | 	mov	arg04, #0
00af0     01 02 06 F6 | 	mov	arg05, #1
00af4     7C 0C B0 FD | 	call	#_outtextxycg
00af8                 | '     outtextxycg(64,0,inttostr(amode),0,1)
00af8     40 04 06 F6 | 	mov	local01, #64
00afc     00 06 06 F6 | 	mov	local02, #0
00b00     0D FB 01 F6 | 	mov	arg01, local12
00b04     C8 11 B0 FD | 	call	#_inttostr
00b08     DB FE 01 F6 | 	mov	arg03, result1
00b0c     02 FB 01 F6 | 	mov	arg01, local01
00b10     03 FD 01 F6 | 	mov	arg02, local02
00b14     00 00 06 F6 | 	mov	arg04, #0
00b18     01 02 06 F6 | 	mov	arg05, #1
00b1c     54 0C B0 FD | 	call	#_outtextxycg
00b20                 | '     outtextxycg(64,16,inttostr(cpl),0,1)
00b20     40 04 06 F6 | 	mov	local01, #64
00b24     10 06 06 F6 | 	mov	local02, #16
00b28     90 A6 05 F1 | 	add	objptr, #144
00b2c     D3 FA 01 FB | 	rdlong	arg01, objptr
00b30     90 A6 85 F1 | 	sub	objptr, #144
00b34     98 11 B0 FD | 	call	#_inttostr
00b38     DB FE 01 F6 | 	mov	arg03, result1
00b3c     02 FB 01 F6 | 	mov	arg01, local01
00b40     03 FD 01 F6 | 	mov	arg02, local02
00b44     00 00 06 F6 | 	mov	arg04, #0
00b48     01 02 06 F6 | 	mov	arg05, #1
00b4c     24 0C B0 FD | 	call	#_outtextxycg
00b50                 | '     outtextxycg(64,32,inttostr(buf_ptr),0,1)
00b50     40 04 06 F6 | 	mov	local01, #64
00b54     20 06 06 F6 | 	mov	local02, #32
00b58     D3 FA 01 FB | 	rdlong	arg01, objptr
00b5c     70 11 B0 FD | 	call	#_inttostr
00b60     DB FE 01 F6 | 	mov	arg03, result1
00b64     02 FB 01 F6 | 	mov	arg01, local01
00b68     03 FD 01 F6 | 	mov	arg02, local02
00b6c     00 00 06 F6 | 	mov	arg04, #0
00b70     01 02 06 F6 | 	mov	arg05, #1
00b74     FC 0B B0 FD | 	call	#_outtextxycg
00b78                 | '     outtextxycg(64,48,inttostr(buflen*4),0,1)
00b78     40 04 06 F6 | 	mov	local01, #64
00b7c     30 06 06 F6 | 	mov	local02, #48
00b80     30 A6 05 F1 | 	add	objptr, #48
00b84     D3 FA 01 FB | 	rdlong	arg01, objptr
00b88     30 A6 85 F1 | 	sub	objptr, #48
00b8c     02 FA 65 F0 | 	shl	arg01, #2
00b90     3C 11 B0 FD | 	call	#_inttostr
00b94     DB FE 01 F6 | 	mov	arg03, result1
00b98     02 FB 01 F6 | 	mov	arg01, local01
00b9c     03 FD 01 F6 | 	mov	arg02, local02
00ba0     00 00 06 F6 | 	mov	arg04, #0
00ba4     01 02 06 F6 | 	mov	arg05, #1
00ba8     C8 0B B0 FD | 	call	#_outtextxycg
00bac                 | '     outtextxycg(64,64,inttostr(lines),0,1)
00bac     40 04 06 F6 | 	mov	local01, #64
00bb0     40 06 06 F6 | 	mov	local02, #64
00bb4     94 A6 05 F1 | 	add	objptr, #148
00bb8     D3 FA 01 FB | 	rdlong	arg01, objptr
00bbc     94 A6 85 F1 | 	sub	objptr, #148
00bc0     0C 11 B0 FD | 	call	#_inttostr
00bc4     DB FE 01 F6 | 	mov	arg03, result1
00bc8     02 FB 01 F6 | 	mov	arg01, local01
00bcc     03 FD 01 F6 | 	mov	arg02, local02
00bd0     00 00 06 F6 | 	mov	arg04, #0
00bd4     01 02 06 F6 | 	mov	arg05, #1
00bd8     98 0B B0 FD | 	call	#_outtextxycg
00bdc     94 04 90 FD | 	jmp	#LR__0013
00be0                 | LR__0007
00be0                 | '   elseif (ccc==1)
00be0     01 0A 0E F2 | 	cmp	local04, #1 wz
00be4     80 01 90 5D |  if_ne	jmp	#LR__0008
00be8                 | '     cls(0,0)
00be8     00 FA 05 F6 | 	mov	arg01, #0
00bec     00 FC 05 F6 | 	mov	arg02, #0
00bf0     A0 0F B0 FD | 	call	#_cls
00bf4                 | '     outtextxycg(0,0,string("mode"),3,0)
00bf4     1A 00 00 FF 
00bf8     E7 FF 05 F6 | 	mov	arg03, ##@LR__0196
00bfc     00 FA 05 F6 | 	mov	arg01, #0
00c00     00 FC 05 F6 | 	mov	arg02, #0
00c04     03 00 06 F6 | 	mov	arg04, #3
00c08     00 02 06 F6 | 	mov	arg05, #0
00c0c     64 0B B0 FD | 	call	#_outtextxycg
00c10                 | '     outtextxycg(0,16,string("cpl"),3,0)'
00c10     1A 00 00 FF 
00c14     EC FF 05 F6 | 	mov	arg03, ##@LR__0197
00c18     00 FA 05 F6 | 	mov	arg01, #0
00c1c     10 FC 05 F6 | 	mov	arg02, #16
00c20     03 00 06 F6 | 	mov	arg04, #3
00c24     00 02 06 F6 | 	mov	arg05, #0
00c28     48 0B B0 FD | 	call	#_outtextxycg
00c2c                 | '     outtextxycg(0,32,string("buf_ptr"),3,0)
00c2c     1A 00 00 FF 
00c30     F0 FF 05 F6 | 	mov	arg03, ##@LR__0198
00c34     00 FA 05 F6 | 	mov	arg01, #0
00c38     20 FC 05 F6 | 	mov	arg02, #32
00c3c     03 00 06 F6 | 	mov	arg04, #3
00c40     00 02 06 F6 | 	mov	arg05, #0
00c44     2C 0B B0 FD | 	call	#_outtextxycg
00c48                 | '     outtextxycg(0,48,string("buflen"),3,0)
00c48     1A 00 00 FF 
00c4c     F8 FF 05 F6 | 	mov	arg03, ##@LR__0199
00c50     00 FA 05 F6 | 	mov	arg01, #0
00c54     30 FC 05 F6 | 	mov	arg02, #48
00c58     03 00 06 F6 | 	mov	arg04, #3
00c5c     00 02 06 F6 | 	mov	arg05, #0
00c60     10 0B B0 FD | 	call	#_outtextxycg
00c64                 | '     outtextxycg(0,64,string("lines"),3,0)
00c64     1A 00 00 FF 
00c68     FF FF 05 F6 | 	mov	arg03, ##@LR__0200
00c6c     00 FA 05 F6 | 	mov	arg01, #0
00c70     40 FC 05 F6 | 	mov	arg02, #64
00c74     03 00 06 F6 | 	mov	arg04, #3
00c78     00 02 06 F6 | 	mov	arg05, #0
00c7c     F4 0A B0 FD | 	call	#_outtextxycg
00c80                 | '     outtextxycg(64,0,inttostr(amode),2,0)
00c80     40 04 06 F6 | 	mov	local01, #64
00c84     00 06 06 F6 | 	mov	local02, #0
00c88     0D FB 01 F6 | 	mov	arg01, local12
00c8c     40 10 B0 FD | 	call	#_inttostr
00c90     DB FE 01 F6 | 	mov	arg03, result1
00c94     02 FB 01 F6 | 	mov	arg01, local01
00c98     03 FD 01 F6 | 	mov	arg02, local02
00c9c     02 00 06 F6 | 	mov	arg04, #2
00ca0     00 02 06 F6 | 	mov	arg05, #0
00ca4     CC 0A B0 FD | 	call	#_outtextxycg
00ca8                 | '     outtextxycg(64,16,inttostr(cpl),2,0)
00ca8     40 04 06 F6 | 	mov	local01, #64
00cac     10 06 06 F6 | 	mov	local02, #16
00cb0     90 A6 05 F1 | 	add	objptr, #144
00cb4     D3 FA 01 FB | 	rdlong	arg01, objptr
00cb8     90 A6 85 F1 | 	sub	objptr, #144
00cbc     10 10 B0 FD | 	call	#_inttostr
00cc0     DB FE 01 F6 | 	mov	arg03, result1
00cc4     02 FB 01 F6 | 	mov	arg01, local01
00cc8     03 FD 01 F6 | 	mov	arg02, local02
00ccc     02 00 06 F6 | 	mov	arg04, #2
00cd0     00 02 06 F6 | 	mov	arg05, #0
00cd4     9C 0A B0 FD | 	call	#_outtextxycg
00cd8                 | '     outtextxycg(64,32,inttostr(buf_ptr),2,0)
00cd8     40 04 06 F6 | 	mov	local01, #64
00cdc     20 06 06 F6 | 	mov	local02, #32
00ce0     D3 FA 01 FB | 	rdlong	arg01, objptr
00ce4     E8 0F B0 FD | 	call	#_inttostr
00ce8     DB FE 01 F6 | 	mov	arg03, result1
00cec     02 FB 01 F6 | 	mov	arg01, local01
00cf0     03 FD 01 F6 | 	mov	arg02, local02
00cf4     02 00 06 F6 | 	mov	arg04, #2
00cf8     00 02 06 F6 | 	mov	arg05, #0
00cfc     74 0A B0 FD | 	call	#_outtextxycg
00d00                 | '     outtextxycg(64,48,inttostr(buflen*4),2,0)
00d00     40 04 06 F6 | 	mov	local01, #64
00d04     30 06 06 F6 | 	mov	local02, #48
00d08     30 A6 05 F1 | 	add	objptr, #48
00d0c     D3 FA 01 FB | 	rdlong	arg01, objptr
00d10     30 A6 85 F1 | 	sub	objptr, #48
00d14     02 FA 65 F0 | 	shl	arg01, #2
00d18     B4 0F B0 FD | 	call	#_inttostr
00d1c     DB FE 01 F6 | 	mov	arg03, result1
00d20     02 FB 01 F6 | 	mov	arg01, local01
00d24     03 FD 01 F6 | 	mov	arg02, local02
00d28     02 00 06 F6 | 	mov	arg04, #2
00d2c     00 02 06 F6 | 	mov	arg05, #0
00d30     40 0A B0 FD | 	call	#_outtextxycg
00d34                 | '     outtextxycg(64,64,inttostr(lines),2,0)
00d34     40 04 06 F6 | 	mov	local01, #64
00d38     40 06 06 F6 | 	mov	local02, #64
00d3c     94 A6 05 F1 | 	add	objptr, #148
00d40     D3 FA 01 FB | 	rdlong	arg01, objptr
00d44     94 A6 85 F1 | 	sub	objptr, #148
00d48     84 0F B0 FD | 	call	#_inttostr
00d4c     DB FE 01 F6 | 	mov	arg03, result1
00d50     02 FB 01 F6 | 	mov	arg01, local01
00d54     03 FD 01 F6 | 	mov	arg02, local02
00d58     02 00 06 F6 | 	mov	arg04, #2
00d5c     00 02 06 F6 | 	mov	arg05, #0
00d60     10 0A B0 FD | 	call	#_outtextxycg
00d64     0C 03 90 FD | 	jmp	#LR__0012
00d68                 | LR__0008
00d68                 | '   elseif (ccc==2)
00d68     02 0A 0E F2 | 	cmp	local04, #2 wz
00d6c     80 01 90 5D |  if_ne	jmp	#LR__0009
00d70                 | '     cls(0,0)
00d70     00 FA 05 F6 | 	mov	arg01, #0
00d74     00 FC 05 F6 | 	mov	arg02, #0
00d78     18 0E B0 FD | 	call	#_cls
00d7c                 | '     outtextxycg(0,0,string("mode"),9,0)
00d7c     1B 00 00 FF 
00d80     05 FE 05 F6 | 	mov	arg03, ##@LR__0201
00d84     00 FA 05 F6 | 	mov	arg01, #0
00d88     00 FC 05 F6 | 	mov	arg02, #0
00d8c     09 00 06 F6 | 	mov	arg04, #9
00d90     00 02 06 F6 | 	mov	arg05, #0
00d94     DC 09 B0 FD | 	call	#_outtextxycg
00d98                 | '     outtextxycg(0,16,string("cpl"),9,0)'
00d98     1B 00 00 FF 
00d9c     0A FE 05 F6 | 	mov	arg03, ##@LR__0202
00da0     00 FA 05 F6 | 	mov	arg01, #0
00da4     10 FC 05 F6 | 	mov	arg02, #16
00da8     09 00 06 F6 | 	mov	arg04, #9
00dac     00 02 06 F6 | 	mov	arg05, #0
00db0     C0 09 B0 FD | 	call	#_outtextxycg
00db4                 | '     outtextxycg(0,32,string("buf_ptr"),9,0)
00db4     1B 00 00 FF 
00db8     0E FE 05 F6 | 	mov	arg03, ##@LR__0203
00dbc     00 FA 05 F6 | 	mov	arg01, #0
00dc0     20 FC 05 F6 | 	mov	arg02, #32
00dc4     09 00 06 F6 | 	mov	arg04, #9
00dc8     00 02 06 F6 | 	mov	arg05, #0
00dcc     A4 09 B0 FD | 	call	#_outtextxycg
00dd0                 | '     outtextxycg(0,48,string("buflen"),9,0)
00dd0     1B 00 00 FF 
00dd4     16 FE 05 F6 | 	mov	arg03, ##@LR__0204
00dd8     00 FA 05 F6 | 	mov	arg01, #0
00ddc     30 FC 05 F6 | 	mov	arg02, #48
00de0     09 00 06 F6 | 	mov	arg04, #9
00de4     00 02 06 F6 | 	mov	arg05, #0
00de8     88 09 B0 FD | 	call	#_outtextxycg
00dec                 | '     outtextxycg(0,64,string("lines"),9,0)
00dec     1B 00 00 FF 
00df0     1D FE 05 F6 | 	mov	arg03, ##@LR__0205
00df4     00 FA 05 F6 | 	mov	arg01, #0
00df8     40 FC 05 F6 | 	mov	arg02, #64
00dfc     09 00 06 F6 | 	mov	arg04, #9
00e00     00 02 06 F6 | 	mov	arg05, #0
00e04     6C 09 B0 FD | 	call	#_outtextxycg
00e08                 | '     outtextxycg(64,0,inttostr(amode),4,0)
00e08     40 04 06 F6 | 	mov	local01, #64
00e0c     00 06 06 F6 | 	mov	local02, #0
00e10     0D FB 01 F6 | 	mov	arg01, local12
00e14     B8 0E B0 FD | 	call	#_inttostr
00e18     DB FE 01 F6 | 	mov	arg03, result1
00e1c     02 FB 01 F6 | 	mov	arg01, local01
00e20     03 FD 01 F6 | 	mov	arg02, local02
00e24     04 00 06 F6 | 	mov	arg04, #4
00e28     00 02 06 F6 | 	mov	arg05, #0
00e2c     44 09 B0 FD | 	call	#_outtextxycg
00e30                 | '     outtextxycg(64,16,inttostr(cpl),4,0)
00e30     40 04 06 F6 | 	mov	local01, #64
00e34     10 06 06 F6 | 	mov	local02, #16
00e38     90 A6 05 F1 | 	add	objptr, #144
00e3c     D3 FA 01 FB | 	rdlong	arg01, objptr
00e40     90 A6 85 F1 | 	sub	objptr, #144
00e44     88 0E B0 FD | 	call	#_inttostr
00e48     DB FE 01 F6 | 	mov	arg03, result1
00e4c     02 FB 01 F6 | 	mov	arg01, local01
00e50     03 FD 01 F6 | 	mov	arg02, local02
00e54     04 00 06 F6 | 	mov	arg04, #4
00e58     00 02 06 F6 | 	mov	arg05, #0
00e5c     14 09 B0 FD | 	call	#_outtextxycg
00e60                 | '     outtextxycg(64,32,inttostr(buf_ptr),4,0)
00e60     40 04 06 F6 | 	mov	local01, #64
00e64     20 06 06 F6 | 	mov	local02, #32
00e68     D3 FA 01 FB | 	rdlong	arg01, objptr
00e6c     60 0E B0 FD | 	call	#_inttostr
00e70     DB FE 01 F6 | 	mov	arg03, result1
00e74     02 FB 01 F6 | 	mov	arg01, local01
00e78     03 FD 01 F6 | 	mov	arg02, local02
00e7c     04 00 06 F6 | 	mov	arg04, #4
00e80     00 02 06 F6 | 	mov	arg05, #0
00e84     EC 08 B0 FD | 	call	#_outtextxycg
00e88                 | '     outtextxycg(64,48,inttostr(buflen*4),4,0)
00e88     40 04 06 F6 | 	mov	local01, #64
00e8c     30 06 06 F6 | 	mov	local02, #48
00e90     30 A6 05 F1 | 	add	objptr, #48
00e94     D3 FA 01 FB | 	rdlong	arg01, objptr
00e98     30 A6 85 F1 | 	sub	objptr, #48
00e9c     02 FA 65 F0 | 	shl	arg01, #2
00ea0     2C 0E B0 FD | 	call	#_inttostr
00ea4     DB FE 01 F6 | 	mov	arg03, result1
00ea8     02 FB 01 F6 | 	mov	arg01, local01
00eac     03 FD 01 F6 | 	mov	arg02, local02
00eb0     04 00 06 F6 | 	mov	arg04, #4
00eb4     00 02 06 F6 | 	mov	arg05, #0
00eb8     B8 08 B0 FD | 	call	#_outtextxycg
00ebc                 | '     outtextxycg(64,64,inttostr(lines),4,0)
00ebc     40 04 06 F6 | 	mov	local01, #64
00ec0     40 06 06 F6 | 	mov	local02, #64
00ec4     94 A6 05 F1 | 	add	objptr, #148
00ec8     D3 FA 01 FB | 	rdlong	arg01, objptr
00ecc     94 A6 85 F1 | 	sub	objptr, #148
00ed0     FC 0D B0 FD | 	call	#_inttostr
00ed4     DB FE 01 F6 | 	mov	arg03, result1
00ed8     02 FB 01 F6 | 	mov	arg01, local01
00edc     03 FD 01 F6 | 	mov	arg02, local02
00ee0     04 00 06 F6 | 	mov	arg04, #4
00ee4     00 02 06 F6 | 	mov	arg05, #0
00ee8     88 08 B0 FD | 	call	#_outtextxycg
00eec     84 01 90 FD | 	jmp	#LR__0011
00ef0                 | LR__0009
00ef0                 | '   elseif (ccc==3)
00ef0     03 0A 0E F2 | 	cmp	local04, #3 wz
00ef4     7C 01 90 5D |  if_ne	jmp	#LR__0010
00ef8                 | '     cls(0,0)
00ef8     00 FA 05 F6 | 	mov	arg01, #0
00efc     00 FC 05 F6 | 	mov	arg02, #0
00f00     90 0C B0 FD | 	call	#_cls
00f04                 | '     outtextxycg(0,0,string("mode"),120,0)
00f04     1B 00 00 FF 
00f08     23 FE 05 F6 | 	mov	arg03, ##@LR__0206
00f0c     00 FA 05 F6 | 	mov	arg01, #0
00f10     00 FC 05 F6 | 	mov	arg02, #0
00f14     78 00 06 F6 | 	mov	arg04, #120
00f18     00 02 06 F6 | 	mov	arg05, #0
00f1c     54 08 B0 FD | 	call	#_outtextxycg
00f20                 | '     outtextxycg(0,16,string("cpl"),120,0)'
00f20     1B 00 00 FF 
00f24     28 FE 05 F6 | 	mov	arg03, ##@LR__0207
00f28     00 FA 05 F6 | 	mov	arg01, #0
00f2c     10 FC 05 F6 | 	mov	arg02, #16
00f30     78 00 06 F6 | 	mov	arg04, #120
00f34     00 02 06 F6 | 	mov	arg05, #0
00f38     38 08 B0 FD | 	call	#_outtextxycg
00f3c                 | '     outtextxycg(0,32,string("buf_ptr"),120,0)
00f3c     1B 00 00 FF 
00f40     2C FE 05 F6 | 	mov	arg03, ##@LR__0208
00f44     00 FA 05 F6 | 	mov	arg01, #0
00f48     20 FC 05 F6 | 	mov	arg02, #32
00f4c     78 00 06 F6 | 	mov	arg04, #120
00f50     00 02 06 F6 | 	mov	arg05, #0
00f54     1C 08 B0 FD | 	call	#_outtextxycg
00f58                 | '     outtextxycg(0,48,string("buflen"),120,0)
00f58     1B 00 00 FF 
00f5c     34 FE 05 F6 | 	mov	arg03, ##@LR__0209
00f60     00 FA 05 F6 | 	mov	arg01, #0
00f64     30 FC 05 F6 | 	mov	arg02, #48
00f68     78 00 06 F6 | 	mov	arg04, #120
00f6c     00 02 06 F6 | 	mov	arg05, #0
00f70     00 08 B0 FD | 	call	#_outtextxycg
00f74                 | '     outtextxycg(0,64,string("lines"),120,0)
00f74     1B 00 00 FF 
00f78     3B FE 05 F6 | 	mov	arg03, ##@LR__0210
00f7c     00 FA 05 F6 | 	mov	arg01, #0
00f80     40 FC 05 F6 | 	mov	arg02, #64
00f84     78 00 06 F6 | 	mov	arg04, #120
00f88     00 02 06 F6 | 	mov	arg05, #0
00f8c     E4 07 B0 FD | 	call	#_outtextxycg
00f90                 | '     outtextxycg(64,0,inttostr(amode),40,0)
00f90     40 04 06 F6 | 	mov	local01, #64
00f94     00 06 06 F6 | 	mov	local02, #0
00f98     0D FB 01 F6 | 	mov	arg01, local12
00f9c     30 0D B0 FD | 	call	#_inttostr
00fa0     DB FE 01 F6 | 	mov	arg03, result1
00fa4     02 FB 01 F6 | 	mov	arg01, local01
00fa8     03 FD 01 F6 | 	mov	arg02, local02
00fac     28 00 06 F6 | 	mov	arg04, #40
00fb0     00 02 06 F6 | 	mov	arg05, #0
00fb4     BC 07 B0 FD | 	call	#_outtextxycg
00fb8                 | '     outtextxycg(64,16,inttostr(cpl),40,0)
00fb8     40 04 06 F6 | 	mov	local01, #64
00fbc     10 06 06 F6 | 	mov	local02, #16
00fc0     90 A6 05 F1 | 	add	objptr, #144
00fc4     D3 FA 01 FB | 	rdlong	arg01, objptr
00fc8     90 A6 85 F1 | 	sub	objptr, #144
00fcc     00 0D B0 FD | 	call	#_inttostr
00fd0     DB FE 01 F6 | 	mov	arg03, result1
00fd4     02 FB 01 F6 | 	mov	arg01, local01
00fd8     03 FD 01 F6 | 	mov	arg02, local02
00fdc     28 00 06 F6 | 	mov	arg04, #40
00fe0     00 02 06 F6 | 	mov	arg05, #0
00fe4     8C 07 B0 FD | 	call	#_outtextxycg
00fe8                 | '     outtextxycg(64,32,inttostr(buf_ptr),40,0)
00fe8     40 04 06 F6 | 	mov	local01, #64
00fec     20 06 06 F6 | 	mov	local02, #32
00ff0     D3 FA 01 FB | 	rdlong	arg01, objptr
00ff4     D8 0C B0 FD | 	call	#_inttostr
00ff8     DB FE 01 F6 | 	mov	arg03, result1
00ffc     02 FB 01 F6 | 	mov	arg01, local01
01000     03 FD 01 F6 | 	mov	arg02, local02
01004     28 00 06 F6 | 	mov	arg04, #40
01008     00 02 06 F6 | 	mov	arg05, #0
0100c     64 07 B0 FD | 	call	#_outtextxycg
01010                 | '     outtextxycg(64,48,inttostr(buflen*4),40,0)
01010     40 04 06 F6 | 	mov	local01, #64
01014     30 06 06 F6 | 	mov	local02, #48
01018     30 A6 05 F1 | 	add	objptr, #48
0101c     D3 FA 01 FB | 	rdlong	arg01, objptr
01020     30 A6 85 F1 | 	sub	objptr, #48
01024     02 FA 65 F0 | 	shl	arg01, #2
01028     A4 0C B0 FD | 	call	#_inttostr
0102c     DB FE 01 F6 | 	mov	arg03, result1
01030     02 FB 01 F6 | 	mov	arg01, local01
01034     03 FD 01 F6 | 	mov	arg02, local02
01038     28 00 06 F6 | 	mov	arg04, #40
0103c     00 02 06 F6 | 	mov	arg05, #0
01040     30 07 B0 FD | 	call	#_outtextxycg
01044                 | '     outtextxycg(64,64,inttostr(lines),40,0)
01044     40 04 06 F6 | 	mov	local01, #64
01048     40 06 06 F6 | 	mov	local02, #64
0104c     94 A6 05 F1 | 	add	objptr, #148
01050     D3 FA 01 FB | 	rdlong	arg01, objptr
01054     94 A6 85 F1 | 	sub	objptr, #148
01058     74 0C B0 FD | 	call	#_inttostr
0105c     DB FE 01 F6 | 	mov	arg03, result1
01060     02 FB 01 F6 | 	mov	arg01, local01
01064     03 FD 01 F6 | 	mov	arg02, local02
01068     28 00 06 F6 | 	mov	arg04, #40
0106c     00 02 06 F6 | 	mov	arg05, #0
01070     00 07 B0 FD | 	call	#_outtextxycg
01074                 | LR__0010
01074                 | LR__0011
01074                 | LR__0012
01074                 | LR__0013
01074                 | '   waitvbl(300)
01074     2C FB 05 F6 | 	mov	arg01, #300
01078     80 0A B0 FD | 	call	#_waitvbl
0107c     01 1A 06 F1 | 	add	local12, #1
01080     02 00 00 FF 
01084     00 1A 1E F2 | 	cmp	local12, ##1024 wcz
01088     BC F9 9F CD |  if_b	jmp	#LR__0006
0108c                 | ' 
0108c                 | ' repeat
0108c                 | LR__0014
0108c     FC FF 9F FD | 	jmp	#LR__0014
01090     AF F0 03 F6 | 	mov	ptra, fp
01094     BA 00 A0 FD | 	call	#popregs_
01098                 | _dummy_ret
01098     2D 00 64 FD | 	ret
0109c                 | 
0109c                 | ' 
0109c                 | ' '------------------------------
0109c                 | ' 
0109c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
0109c                 | _fcircle
0109c     0A 5A 05 F6 | 	mov	COUNT_, #10
010a0     B0 00 A0 FD | 	call	#pushregs_
010a4     FD 04 02 F6 | 	mov	local01, arg01
010a8     FE 06 02 F6 | 	mov	local02, arg02
010ac     FF 08 02 F6 | 	mov	local03, arg03
010b0     00 0B 02 F6 | 	mov	local04, arg04
010b4                 | ' 
010b4                 | ' d:=5-4*r
010b4     04 0D 02 F6 | 	mov	local05, local03
010b8     02 0C 66 F0 | 	shl	local05, #2
010bc     05 0E 06 F6 | 	mov	local06, #5
010c0     06 0F 82 F1 | 	sub	local06, local05
010c4                 | ' x:=0
010c4     00 10 06 F6 | 	mov	local07, #0
010c8                 | ' y:=r
010c8     04 13 02 F6 | 	mov	local08, local03
010cc                 | ' da:=(-2*r+5)*4
010cc     FF FF 7F FF 
010d0     FE 09 06 FD | 	qmul	local03, ##-2
010d4     18 14 62 FD | 	getqx	local09
010d8     05 14 06 F1 | 	add	local09, #5
010dc     02 14 66 F0 | 	shl	local09, #2
010e0                 | ' db:=3*4
010e0     0C 16 06 F6 | 	mov	local10, #12
010e4                 | ' repeat while (x<=y) 
010e4                 | LR__0015
010e4     09 11 5A F2 | 	cmps	local07, local08 wcz
010e8     D4 00 90 1D |  if_a	jmp	#LR__0017
010ec                 | '   line(x0-x,y0-y,x0+x,y0-y,c)
010ec     02 FB 01 F6 | 	mov	arg01, local01
010f0     08 FB 81 F1 | 	sub	arg01, local07
010f4     03 FD 01 F6 | 	mov	arg02, local02
010f8     09 FD 81 F1 | 	sub	arg02, local08
010fc     02 FF 01 F6 | 	mov	arg03, local01
01100     08 FF 01 F1 | 	add	arg03, local07
01104     03 01 02 F6 | 	mov	arg04, local02
01108     09 01 82 F1 | 	sub	arg04, local08
0110c     05 03 02 F6 | 	mov	arg05, local04
01110     B8 03 B0 FD | 	call	#_line
01114                 | '   line(x0-x,y0+y,x0+x,y0+y,c)
01114     02 FB 01 F6 | 	mov	arg01, local01
01118     08 FB 81 F1 | 	sub	arg01, local07
0111c     03 FD 01 F6 | 	mov	arg02, local02
01120     09 FD 01 F1 | 	add	arg02, local08
01124     02 FF 01 F6 | 	mov	arg03, local01
01128     08 FF 01 F1 | 	add	arg03, local07
0112c     03 01 02 F6 | 	mov	arg04, local02
01130     09 01 02 F1 | 	add	arg04, local08
01134     05 03 02 F6 | 	mov	arg05, local04
01138     90 03 B0 FD | 	call	#_line
0113c                 | '   line(x0-y,y0-x,x0+y,y0-x,c)
0113c     02 FB 01 F6 | 	mov	arg01, local01
01140     09 FB 81 F1 | 	sub	arg01, local08
01144     03 FD 01 F6 | 	mov	arg02, local02
01148     08 FD 81 F1 | 	sub	arg02, local07
0114c     02 FF 01 F6 | 	mov	arg03, local01
01150     09 FF 01 F1 | 	add	arg03, local08
01154     03 01 02 F6 | 	mov	arg04, local02
01158     08 01 82 F1 | 	sub	arg04, local07
0115c     05 03 02 F6 | 	mov	arg05, local04
01160     68 03 B0 FD | 	call	#_line
01164                 | '   line(x0-y,y0+x,x0+y,y0+x,c)
01164     02 FB 01 F6 | 	mov	arg01, local01
01168     09 FB 81 F1 | 	sub	arg01, local08
0116c     03 FD 01 F6 | 	mov	arg02, local02
01170     08 FD 01 F1 | 	add	arg02, local07
01174     02 FF 01 F6 | 	mov	arg03, local01
01178     09 FF 01 F1 | 	add	arg03, local08
0117c     03 01 02 F6 | 	mov	arg04, local02
01180     08 01 02 F1 | 	add	arg04, local07
01184     05 03 02 F6 | 	mov	arg05, local04
01188     40 03 B0 FD | 	call	#_line
0118c                 | '   if d>0 
0118c     00 0E 5E F2 | 	cmps	local06, #0 wcz
01190     18 00 90 ED |  if_be	jmp	#LR__0016
01194                 | '     d+=da
01194     0A 0F 02 F1 | 	add	local06, local09
01198                 | '     y-=1
01198     01 12 86 F1 | 	sub	local08, #1
0119c                 | '     x+=1
0119c     01 10 06 F1 | 	add	local07, #1
011a0                 | '     da+=4*4
011a0     10 14 06 F1 | 	add	local09, #16
011a4                 | '     db+=2*4
011a4     08 16 06 F1 | 	add	local10, #8
011a8                 | '   else
011a8     38 FF 9F FD | 	jmp	#LR__0015
011ac                 | LR__0016
011ac                 | '     d+=db
011ac     0B 0F 02 F1 | 	add	local06, local10
011b0                 | '     x+=1
011b0     01 10 06 F1 | 	add	local07, #1
011b4                 | '     da+=2*4
011b4     08 14 06 F1 | 	add	local09, #8
011b8                 | '     db+=2*4
011b8     08 16 06 F1 | 	add	local10, #8
011bc     24 FF 9F FD | 	jmp	#LR__0015
011c0                 | LR__0017
011c0     AF F0 03 F6 | 	mov	ptra, fp
011c4     BA 00 A0 FD | 	call	#popregs_
011c8                 | _fcircle_ret
011c8     2D 00 64 FD | 	ret
011cc                 | 
011cc                 | '  
011cc                 | '  
011cc                 | '  
011cc                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
011cc                 | _circle
011cc     0D 5A 05 F6 | 	mov	COUNT_, #13
011d0     B0 00 A0 FD | 	call	#pushregs_
011d4     FD 04 02 F6 | 	mov	local01, arg01
011d8     FE 06 02 F6 | 	mov	local02, arg02
011dc     FF 08 02 F6 | 	mov	local03, arg03
011e0     00 0B 02 F6 | 	mov	local04, arg04
011e4                 | ' 
011e4                 | '  
011e4                 | ' d:=5-4*r
011e4     04 0D 02 F6 | 	mov	local05, local03
011e8     02 0C 66 F0 | 	shl	local05, #2
011ec     05 0E 06 F6 | 	mov	local06, #5
011f0     06 0F 82 F1 | 	sub	local06, local05
011f4                 | ' x:=0
011f4     00 10 06 F6 | 	mov	local07, #0
011f8                 | ' y:=r
011f8     04 13 02 F6 | 	mov	local08, local03
011fc                 | ' da:=(-2*r+5)*4
011fc     FF FF 7F FF 
01200     FE 09 06 FD | 	qmul	local03, ##-2
01204     18 14 62 FD | 	getqx	local09
01208     05 14 06 F1 | 	add	local09, #5
0120c     02 14 66 F0 | 	shl	local09, #2
01210                 | ' db:=3*4
01210     0C 16 06 F6 | 	mov	local10, #12
01214                 | ' repeat while (x<=y) 
01214                 | LR__0018
01214     09 11 5A F2 | 	cmps	local07, local08 wcz
01218     C0 01 90 1D |  if_a	jmp	#LR__0020
0121c                 | '   putpixel(x0-x,y0-y,c)
0121c     D8 A6 05 F1 | 	add	objptr, #216
01220     D3 18 02 FB | 	rdlong	local11, objptr
01224     D8 A6 85 F1 | 	sub	objptr, #216
01228     0C 0D 02 FB | 	rdlong	local05, local11
0122c     04 18 06 F1 | 	add	local11, #4
01230     0C 1B 02 FB | 	rdlong	local12, local11
01234     02 FB 01 F6 | 	mov	arg01, local01
01238     08 FB 81 F1 | 	sub	arg01, local07
0123c     03 FD 01 F6 | 	mov	arg02, local02
01240     09 FD 81 F1 | 	sub	arg02, local08
01244     05 FF 01 F6 | 	mov	arg03, local04
01248     D3 1C 02 F6 | 	mov	local13, objptr
0124c     06 A7 01 F6 | 	mov	objptr, local05
01250     2D 1A 62 FD | 	call	local12
01254                 | '   putpixel(x0-x,y0+y,c)
01254     D8 1C 06 F1 | 	add	local13, #216
01258     0E 19 02 FB | 	rdlong	local11, local13
0125c     D8 1C 86 F1 | 	sub	local13, #216
01260     0C A7 01 FB | 	rdlong	objptr, local11
01264     04 18 06 F1 | 	add	local11, #4
01268     0C 1B 02 FB | 	rdlong	local12, local11
0126c     02 FB 01 F6 | 	mov	arg01, local01
01270     08 FB 81 F1 | 	sub	arg01, local07
01274     03 FD 01 F6 | 	mov	arg02, local02
01278     09 FD 01 F1 | 	add	arg02, local08
0127c     05 FF 01 F6 | 	mov	arg03, local04
01280     2D 1A 62 FD | 	call	local12
01284                 | '   putpixel(x0+x,y0-y,c)
01284     D8 1C 06 F1 | 	add	local13, #216
01288     0E 19 02 FB | 	rdlong	local11, local13
0128c     D8 1C 86 F1 | 	sub	local13, #216
01290     0C A7 01 FB | 	rdlong	objptr, local11
01294     04 18 06 F1 | 	add	local11, #4
01298     0C 1B 02 FB | 	rdlong	local12, local11
0129c     02 FB 01 F6 | 	mov	arg01, local01
012a0     08 FB 01 F1 | 	add	arg01, local07
012a4     03 FD 01 F6 | 	mov	arg02, local02
012a8     09 FD 81 F1 | 	sub	arg02, local08
012ac     05 FF 01 F6 | 	mov	arg03, local04
012b0     2D 1A 62 FD | 	call	local12
012b4                 | '   putpixel(x0+x,y0+y,c)
012b4     D8 1C 06 F1 | 	add	local13, #216
012b8     0E 19 02 FB | 	rdlong	local11, local13
012bc     D8 1C 86 F1 | 	sub	local13, #216
012c0     0C A7 01 FB | 	rdlong	objptr, local11
012c4     04 18 06 F1 | 	add	local11, #4
012c8     0C 1B 02 FB | 	rdlong	local12, local11
012cc     02 FB 01 F6 | 	mov	arg01, local01
012d0     08 FB 01 F1 | 	add	arg01, local07
012d4     03 FD 01 F6 | 	mov	arg02, local02
012d8     09 FD 01 F1 | 	add	arg02, local08
012dc     05 FF 01 F6 | 	mov	arg03, local04
012e0     2D 1A 62 FD | 	call	local12
012e4                 | '   putpixel(x0-y,y0-x,c)
012e4     D8 1C 06 F1 | 	add	local13, #216
012e8     0E 19 02 FB | 	rdlong	local11, local13
012ec     D8 1C 86 F1 | 	sub	local13, #216
012f0     0C A7 01 FB | 	rdlong	objptr, local11
012f4     04 18 06 F1 | 	add	local11, #4
012f8     0C 1B 02 FB | 	rdlong	local12, local11
012fc     02 FB 01 F6 | 	mov	arg01, local01
01300     09 FB 81 F1 | 	sub	arg01, local08
01304     03 FD 01 F6 | 	mov	arg02, local02
01308     08 FD 81 F1 | 	sub	arg02, local07
0130c     05 FF 01 F6 | 	mov	arg03, local04
01310     2D 1A 62 FD | 	call	local12
01314                 | '   putpixel(x0-y,y0+x,c)
01314     D8 1C 06 F1 | 	add	local13, #216
01318     0E 19 02 FB | 	rdlong	local11, local13
0131c     D8 1C 86 F1 | 	sub	local13, #216
01320     0C A7 01 FB | 	rdlong	objptr, local11
01324     04 18 06 F1 | 	add	local11, #4
01328     0C 1B 02 FB | 	rdlong	local12, local11
0132c     02 FB 01 F6 | 	mov	arg01, local01
01330     09 FB 81 F1 | 	sub	arg01, local08
01334     03 FD 01 F6 | 	mov	arg02, local02
01338     08 FD 01 F1 | 	add	arg02, local07
0133c     05 FF 01 F6 | 	mov	arg03, local04
01340     2D 1A 62 FD | 	call	local12
01344                 | '   putpixel(x0+y,y0-x,c)
01344     D8 1C 06 F1 | 	add	local13, #216
01348     0E 19 02 FB | 	rdlong	local11, local13
0134c     D8 1C 86 F1 | 	sub	local13, #216
01350     0C A7 01 FB | 	rdlong	objptr, local11
01354     04 18 06 F1 | 	add	local11, #4
01358     0C 1B 02 FB | 	rdlong	local12, local11
0135c     02 FB 01 F6 | 	mov	arg01, local01
01360     09 FB 01 F1 | 	add	arg01, local08
01364     03 FD 01 F6 | 	mov	arg02, local02
01368     08 FD 81 F1 | 	sub	arg02, local07
0136c     05 FF 01 F6 | 	mov	arg03, local04
01370     2D 1A 62 FD | 	call	local12
01374                 | '   putpixel(x0+y,y0+x,c)
01374     D8 1C 06 F1 | 	add	local13, #216
01378     0E 19 02 FB | 	rdlong	local11, local13
0137c     D8 1C 86 F1 | 	sub	local13, #216
01380     0C A7 01 FB | 	rdlong	objptr, local11
01384     04 18 06 F1 | 	add	local11, #4
01388     0C 1B 02 FB | 	rdlong	local12, local11
0138c     02 FB 01 F6 | 	mov	arg01, local01
01390     09 FB 01 F1 | 	add	arg01, local08
01394     03 FD 01 F6 | 	mov	arg02, local02
01398     08 FD 01 F1 | 	add	arg02, local07
0139c     05 FF 01 F6 | 	mov	arg03, local04
013a0     2D 1A 62 FD | 	call	local12
013a4     0E A7 01 F6 | 	mov	objptr, local13
013a8                 | '   if d>0 
013a8     00 0E 5E F2 | 	cmps	local06, #0 wcz
013ac     18 00 90 ED |  if_be	jmp	#LR__0019
013b0                 | '     d+=da
013b0     0A 0F 02 F1 | 	add	local06, local09
013b4                 | '     y-=1
013b4     01 12 86 F1 | 	sub	local08, #1
013b8                 | '     x+=1
013b8     01 10 06 F1 | 	add	local07, #1
013bc                 | '     da+=4*4
013bc     10 14 06 F1 | 	add	local09, #16
013c0                 | '     db+=2*4
013c0     08 16 06 F1 | 	add	local10, #8
013c4                 | '   else
013c4     4C FE 9F FD | 	jmp	#LR__0018
013c8                 | LR__0019
013c8                 | '     d+=db
013c8     0B 0F 02 F1 | 	add	local06, local10
013cc                 | '     x+=1
013cc     01 10 06 F1 | 	add	local07, #1
013d0                 | '     da+=2*4
013d0     08 14 06 F1 | 	add	local09, #8
013d4                 | '     db+=2*4
013d4     08 16 06 F1 | 	add	local10, #8
013d8     38 FE 9F FD | 	jmp	#LR__0018
013dc                 | LR__0020
013dc     AF F0 03 F6 | 	mov	ptra, fp
013e0     BA 00 A0 FD | 	call	#popregs_
013e4                 | _circle_ret
013e4     2D 00 64 FD | 	ret
013e8                 | 
013e8                 | ' 
013e8                 | ' 
013e8                 | ' pub frame(x1,y1,x2,y2,c)
013e8                 | _frame
013e8     05 5A 05 F6 | 	mov	COUNT_, #5
013ec     B0 00 A0 FD | 	call	#pushregs_
013f0     FD 04 02 F6 | 	mov	local01, arg01
013f4     FE 06 02 F6 | 	mov	local02, arg02
013f8     FF 08 02 F6 | 	mov	local03, arg03
013fc     00 0B 02 F6 | 	mov	local04, arg04
01400     01 0D 02 F6 | 	mov	local05, arg05
01404                 | ' 
01404                 | ' line(x1,y1,x2,y1,c)
01404     02 FB 01 F6 | 	mov	arg01, local01
01408     03 FD 01 F6 | 	mov	arg02, local02
0140c     04 FF 01 F6 | 	mov	arg03, local03
01410     03 01 02 F6 | 	mov	arg04, local02
01414     06 03 02 F6 | 	mov	arg05, local05
01418     B0 00 B0 FD | 	call	#_line
0141c                 | ' line(x1,y2,x2,y2,c)
0141c     02 FB 01 F6 | 	mov	arg01, local01
01420     05 FD 01 F6 | 	mov	arg02, local04
01424     04 FF 01 F6 | 	mov	arg03, local03
01428     05 01 02 F6 | 	mov	arg04, local04
0142c     06 03 02 F6 | 	mov	arg05, local05
01430     98 00 B0 FD | 	call	#_line
01434                 | ' line(x1,y1,x1,y2,c)
01434     02 FB 01 F6 | 	mov	arg01, local01
01438     03 FD 01 F6 | 	mov	arg02, local02
0143c     02 FF 01 F6 | 	mov	arg03, local01
01440     05 01 02 F6 | 	mov	arg04, local04
01444     06 03 02 F6 | 	mov	arg05, local05
01448     80 00 B0 FD | 	call	#_line
0144c                 | ' line(x2,y1,x2,y2,c)
0144c     04 FB 01 F6 | 	mov	arg01, local03
01450     03 FD 01 F6 | 	mov	arg02, local02
01454     04 FF 01 F6 | 	mov	arg03, local03
01458     05 01 02 F6 | 	mov	arg04, local04
0145c     06 03 02 F6 | 	mov	arg05, local05
01460     68 00 B0 FD | 	call	#_line
01464     AF F0 03 F6 | 	mov	ptra, fp
01468     BA 00 A0 FD | 	call	#popregs_
0146c                 | _frame_ret
0146c     2D 00 64 FD | 	ret
01470                 | 
01470                 | ' 
01470                 | ' pub box(x1,y1,x2,y2,c) |yy
01470                 | _box
01470     06 5A 05 F6 | 	mov	COUNT_, #6
01474     B0 00 A0 FD | 	call	#pushregs_
01478     FD 04 02 F6 | 	mov	local01, arg01
0147c     FE 06 02 F6 | 	mov	local02, arg02
01480     FF 08 02 F6 | 	mov	local03, arg03
01484     00 0B 02 F6 | 	mov	local04, arg04
01488     01 0D 02 F6 | 	mov	local05, arg05
0148c                 | ' 
0148c                 | ' repeat yy from y1 to y2
0148c     03 0B 5A F2 | 	cmps	local04, local02 wcz
01490     01 0E 06 16 |  if_a	mov	local06, #1
01494     01 0E 66 E6 |  if_be	neg	local06, #1
01498     07 0B 02 F1 | 	add	local04, local06
0149c                 | LR__0021
0149c                 | '   line(x1,yy,x2,yy,c)
0149c     02 FB 01 F6 | 	mov	arg01, local01
014a0     04 FF 01 F6 | 	mov	arg03, local03
014a4     06 03 02 F6 | 	mov	arg05, local05
014a8     03 FD 01 F6 | 	mov	arg02, local02
014ac     03 01 02 F6 | 	mov	arg04, local02
014b0     18 00 B0 FD | 	call	#_line
014b4     07 07 02 F1 | 	add	local02, local06
014b8     05 07 0A F2 | 	cmp	local02, local04 wz
014bc     DC FF 9F 5D |  if_ne	jmp	#LR__0021
014c0     AF F0 03 F6 | 	mov	ptra, fp
014c4     BA 00 A0 FD | 	call	#popregs_
014c8                 | _box_ret
014c8     2D 00 64 FD | 	ret
014cc                 | 
014cc                 | ' 
014cc                 | ' pub line(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y
014cc                 | _line
014cc     12 5A 05 F6 | 	mov	COUNT_, #18
014d0     B0 00 A0 FD | 	call	#pushregs_
014d4     FD 04 02 F6 | 	mov	local01, arg01
014d8     FE 06 02 F6 | 	mov	local02, arg02
014dc     FF 08 02 F6 | 	mov	local03, arg03
014e0     00 0B 02 F6 | 	mov	local04, arg04
014e4     01 0D 02 F6 | 	mov	local05, arg05
014e8                 | ' 
014e8                 | ' 
014e8                 | ' x:=x1
014e8     02 0F 02 F6 | 	mov	local06, local01
014ec                 | ' y:=y1
014ec     03 11 02 F6 | 	mov	local07, local02
014f0                 | ' 
014f0                 | ' if (x1<x2) 
014f0     04 05 5A F2 | 	cmps	local01, local03 wcz
014f4     10 00 90 3D |  if_ae	jmp	#LR__0022
014f8                 | '   xi:=1
014f8     01 12 06 F6 | 	mov	local08, #1
014fc                 | '   dx:=x2-x1
014fc     04 15 02 F6 | 	mov	local09, local03
01500     02 15 82 F1 | 	sub	local09, local01
01504                 | ' else
01504     0C 00 90 FD | 	jmp	#LR__0023
01508                 | LR__0022
01508                 | '   xi:=-1
01508     01 12 66 F6 | 	neg	local08, #1
0150c                 | '   dx:=x1-x2
0150c     04 05 82 F1 | 	sub	local01, local03
01510     02 15 02 F6 | 	mov	local09, local01
01514                 | LR__0023
01514                 | '   
01514                 | ' if (y1<y2) 
01514     05 07 5A F2 | 	cmps	local02, local04 wcz
01518     10 00 90 3D |  if_ae	jmp	#LR__0024
0151c                 | '   yi:=1
0151c     01 16 06 F6 | 	mov	local10, #1
01520                 | '   dy:=y2-y1
01520     05 19 02 F6 | 	mov	local11, local04
01524     03 19 82 F1 | 	sub	local11, local02
01528                 | ' else
01528     0C 00 90 FD | 	jmp	#LR__0025
0152c                 | LR__0024
0152c                 | '   yi:=-1
0152c     01 16 66 F6 | 	neg	local10, #1
01530                 | '   dy:=y1-y2
01530     05 07 82 F1 | 	sub	local02, local04
01534     03 19 02 F6 | 	mov	local11, local02
01538                 | LR__0025
01538                 | ' 
01538                 | ' putpixel(x,y,c)
01538     D8 A6 05 F1 | 	add	objptr, #216
0153c     D3 1A 02 FB | 	rdlong	local12, objptr
01540     D8 A6 85 F1 | 	sub	objptr, #216
01544     0D 1D 02 FB | 	rdlong	local13, local12
01548     04 1A 06 F1 | 	add	local12, #4
0154c     0D 1F 02 FB | 	rdlong	local14, local12
01550     07 FB 01 F6 | 	mov	arg01, local06
01554     08 FD 01 F6 | 	mov	arg02, local07
01558     06 FF 01 F6 | 	mov	arg03, local05
0155c     D3 20 02 F6 | 	mov	local15, objptr
01560     0E A7 01 F6 | 	mov	objptr, local13
01564     2D 1E 62 FD | 	call	local14
01568     10 A7 01 F6 | 	mov	objptr, local15
0156c                 | ' 
0156c                 | ' if (dx>dy)
0156c     0C 15 5A F2 | 	cmps	local09, local11 wcz
01570     7C 00 90 ED |  if_be	jmp	#LR__0029
01574                 | '   ai:=(dy-dx)*2
01574     0C 23 02 F6 | 	mov	local16, local11
01578     0A 23 82 F1 | 	sub	local16, local09
0157c     01 22 66 F0 | 	shl	local16, #1
01580                 | '   bi:=dy*2
01580     01 18 66 F0 | 	shl	local11, #1
01584     0C 25 02 F6 | 	mov	local17, local11
01588                 | '   d:= bi-dx
01588     12 27 02 F6 | 	mov	local18, local17
0158c     0A 27 82 F1 | 	sub	local18, local09
01590                 | '   repeat while (x<>x2) 
01590                 | LR__0026
01590     04 0F 0A F2 | 	cmp	local06, local03 wz
01594     D4 00 90 AD |  if_e	jmp	#LR__0034
01598                 | '     if (d>=0) 
01598     00 26 5E F2 | 	cmps	local18, #0 wcz
0159c     10 00 90 CD |  if_b	jmp	#LR__0027
015a0                 | '       x+=xi
015a0     09 0F 02 F1 | 	add	local06, local08
015a4                 | '       y+=yi
015a4     0B 11 02 F1 | 	add	local07, local10
015a8                 | '       d+=ai
015a8     11 27 02 F1 | 	add	local18, local16
015ac                 | '     else
015ac     08 00 90 FD | 	jmp	#LR__0028
015b0                 | LR__0027
015b0                 | '       d+=bi
015b0     12 27 02 F1 | 	add	local18, local17
015b4                 | '       x+=xi
015b4     09 0F 02 F1 | 	add	local06, local08
015b8                 | LR__0028
015b8                 | '     putpixel(x,y,c)
015b8     D8 A6 05 F1 | 	add	objptr, #216
015bc     D3 1A 02 FB | 	rdlong	local12, objptr
015c0     D8 A6 85 F1 | 	sub	objptr, #216
015c4     0D 1D 02 FB | 	rdlong	local13, local12
015c8     04 1A 06 F1 | 	add	local12, #4
015cc     0D 1F 02 FB | 	rdlong	local14, local12
015d0     07 FB 01 F6 | 	mov	arg01, local06
015d4     08 FD 01 F6 | 	mov	arg02, local07
015d8     06 FF 01 F6 | 	mov	arg03, local05
015dc     D3 20 02 F6 | 	mov	local15, objptr
015e0     0E A7 01 F6 | 	mov	objptr, local13
015e4     2D 1E 62 FD | 	call	local14
015e8     10 A7 01 F6 | 	mov	objptr, local15
015ec     A0 FF 9F FD | 	jmp	#LR__0026
015f0                 | ' else
015f0                 | LR__0029
015f0                 | '   ai:=(dx-dy)*2
015f0     0A 23 02 F6 | 	mov	local16, local09
015f4     0C 23 82 F1 | 	sub	local16, local11
015f8     01 22 66 F0 | 	shl	local16, #1
015fc                 | '   bi:=dx*2
015fc     01 14 66 F0 | 	shl	local09, #1
01600     0A 25 02 F6 | 	mov	local17, local09
01604                 | '   d:=bi-dy
01604     12 27 02 F6 | 	mov	local18, local17
01608     0C 27 82 F1 | 	sub	local18, local11
0160c                 | '   repeat while (y<>y2)
0160c                 | LR__0030
0160c     05 11 0A F2 | 	cmp	local07, local04 wz
01610     58 00 90 AD |  if_e	jmp	#LR__0033
01614                 | '     if (d>=0)
01614     00 26 5E F2 | 	cmps	local18, #0 wcz
01618     10 00 90 CD |  if_b	jmp	#LR__0031
0161c                 | '       x+=xi
0161c     09 0F 02 F1 | 	add	local06, local08
01620                 | '       y+=yi
01620     0B 11 02 F1 | 	add	local07, local10
01624                 | '       d+=ai
01624     11 27 02 F1 | 	add	local18, local16
01628                 | '     else
01628     08 00 90 FD | 	jmp	#LR__0032
0162c                 | LR__0031
0162c                 | '       d+=bi
0162c     12 27 02 F1 | 	add	local18, local17
01630                 | '       y+=yi
01630     0B 11 02 F1 | 	add	local07, local10
01634                 | LR__0032
01634                 | '     putpixel(x, y,c)
01634     D8 A6 05 F1 | 	add	objptr, #216
01638     D3 1A 02 FB | 	rdlong	local12, objptr
0163c     D8 A6 85 F1 | 	sub	objptr, #216
01640     0D 1D 02 FB | 	rdlong	local13, local12
01644     04 1A 06 F1 | 	add	local12, #4
01648     0D 1F 02 FB | 	rdlong	local14, local12
0164c     07 FB 01 F6 | 	mov	arg01, local06
01650     08 FD 01 F6 | 	mov	arg02, local07
01654     06 FF 01 F6 | 	mov	arg03, local05
01658     D3 20 02 F6 | 	mov	local15, objptr
0165c     0E A7 01 F6 | 	mov	objptr, local13
01660     2D 1E 62 FD | 	call	local14
01664     10 A7 01 F6 | 	mov	objptr, local15
01668     A0 FF 9F FD | 	jmp	#LR__0030
0166c                 | LR__0033
0166c                 | LR__0034
0166c     AF F0 03 F6 | 	mov	ptra, fp
01670     BA 00 A0 FD | 	call	#popregs_
01674                 | _line_ret
01674     2D 00 64 FD | 	ret
01678                 | 
01678                 | ' 
01678                 | ' pub putcharxycg(x,y,achar,f,b) |xx, yy,bb
01678                 | _putcharxycg
01678     0D 5A 05 F6 | 	mov	COUNT_, #13
0167c     B0 00 A0 FD | 	call	#pushregs_
01680     FD 04 02 F6 | 	mov	local01, arg01
01684     FE 06 02 F6 | 	mov	local02, arg02
01688     FF 08 02 F6 | 	mov	local03, arg03
0168c     00 0B 02 F6 | 	mov	local04, arg04
01690     01 0D 02 F6 | 	mov	local05, arg05
01694                 | ' 
01694                 | ' repeat yy from 0 to 15
01694     00 0E 06 F6 | 	mov	local06, #0
01698                 | LR__0035
01698                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
01698     D5 10 02 F6 | 	mov	local07, ptr__dat__
0169c     C8 A6 05 F1 | 	add	objptr, #200
016a0     D3 12 02 FB | 	rdlong	local08, objptr
016a4     C8 A6 85 F1 | 	sub	objptr, #200
016a8     0A 12 66 F0 | 	shl	local08, #10
016ac     09 11 02 F1 | 	add	local07, local08
016b0     04 15 02 F6 | 	mov	local09, local03
016b4     04 14 66 F0 | 	shl	local09, #4
016b8     0A 11 02 F1 | 	add	local07, local09
016bc     07 11 02 F1 | 	add	local07, local06
016c0     08 17 C2 FA | 	rdbyte	local10, local07
016c4                 | '   repeat xx from 0 to 7
016c4     00 18 06 F6 | 	mov	local11, #0
016c8                 | LR__0036
016c8                 | '     if (bb&(1<<xx))<>0
016c8     0C 1B C2 F9 | 	decod	local12, local11
016cc     0D 17 CA F7 | 	test	local10, local12 wz
016d0     40 00 90 AD |  if_e	jmp	#LR__0037
016d4                 | '       putpixel(xx+x,yy+y,f)
016d4     D8 A6 05 F1 | 	add	objptr, #216
016d8     D3 10 02 FB | 	rdlong	local07, objptr
016dc     D8 A6 85 F1 | 	sub	objptr, #216
016e0     08 1B 02 FB | 	rdlong	local12, local07
016e4     04 10 06 F1 | 	add	local07, #4
016e8     08 13 02 FB | 	rdlong	local08, local07
016ec     0C FB 01 F6 | 	mov	arg01, local11
016f0     02 FB 01 F1 | 	add	arg01, local01
016f4     07 FD 01 F6 | 	mov	arg02, local06
016f8     03 FD 01 F1 | 	add	arg02, local02
016fc     05 FF 01 F6 | 	mov	arg03, local04
01700     D3 1C 02 F6 | 	mov	local13, objptr
01704     0D A7 01 F6 | 	mov	objptr, local12
01708     2D 12 62 FD | 	call	local08
0170c     0E A7 01 F6 | 	mov	objptr, local13
01710                 | '     else
01710     3C 00 90 FD | 	jmp	#LR__0038
01714                 | LR__0037
01714                 | '       putpixel(xx+x,yy+y,b)
01714     D8 A6 05 F1 | 	add	objptr, #216
01718     D3 10 02 FB | 	rdlong	local07, objptr
0171c     D8 A6 85 F1 | 	sub	objptr, #216
01720     08 1B 02 FB | 	rdlong	local12, local07
01724     04 10 06 F1 | 	add	local07, #4
01728     08 13 02 FB | 	rdlong	local08, local07
0172c     0C FB 01 F6 | 	mov	arg01, local11
01730     02 FB 01 F1 | 	add	arg01, local01
01734     07 FD 01 F6 | 	mov	arg02, local06
01738     03 FD 01 F1 | 	add	arg02, local02
0173c     06 FF 01 F6 | 	mov	arg03, local05
01740     D3 1C 02 F6 | 	mov	local13, objptr
01744     0D A7 01 F6 | 	mov	objptr, local12
01748     2D 12 62 FD | 	call	local08
0174c     0E A7 01 F6 | 	mov	objptr, local13
01750                 | LR__0038
01750     01 18 06 F1 | 	add	local11, #1
01754     08 18 5E F2 | 	cmps	local11, #8 wcz
01758     6C FF 9F CD |  if_b	jmp	#LR__0036
0175c     01 0E 06 F1 | 	add	local06, #1
01760     10 0E 5E F2 | 	cmps	local06, #16 wcz
01764     30 FF 9F CD |  if_b	jmp	#LR__0035
01768     AF F0 03 F6 | 	mov	ptra, fp
0176c     BA 00 A0 FD | 	call	#popregs_
01770                 | _putcharxycg_ret
01770     2D 00 64 FD | 	ret
01774                 | 
01774                 | ' 
01774                 | ' pub outtextxycg(x,y,text,f,b) | iii,c
01774                 | _outtextxycg
01774     0C 5A 05 F6 | 	mov	COUNT_, #12
01778     B0 00 A0 FD | 	call	#pushregs_
0177c     FD 04 02 F6 | 	mov	local01, arg01
01780     FE 06 02 F6 | 	mov	local02, arg02
01784     FF 08 02 F6 | 	mov	local03, arg03
01788     00 0B 02 F6 | 	mov	local04, arg04
0178c     01 0D 02 F6 | 	mov	local05, arg05
01790                 | ' 
01790                 | ' repeat iii from 0 to strsize(text)-1
01790     00 0E 06 F6 | 	mov	local06, #0
01794     04 FB 01 F6 | 	mov	arg01, local03
01798     00 10 06 F6 | 	mov	local07, #0
0179c     70 E8 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
017a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
017a4                 | LR__0039
017a4     FD 12 CA FA | 	rdbyte	local08, arg01 wz
017a8     01 10 06 51 |  if_ne	add	local07, #1
017ac     01 FA 05 51 |  if_ne	add	arg01, #1
017b0     F0 FF 9F 5D |  if_ne	jmp	#LR__0039
017b4                 | LR__0040
017b4     08 B7 01 F6 | 	mov	result1, local07
017b8     DB 14 02 F6 | 	mov	local09, result1
017bc     01 14 86 F1 | 	sub	local09, #1
017c0     00 14 5E F2 | 	cmps	local09, #0 wcz
017c4     01 16 06 16 |  if_a	mov	local10, #1
017c8     01 16 66 E6 |  if_be	neg	local10, #1
017cc     0B 15 02 F1 | 	add	local09, local10
017d0                 | LR__0041
017d0                 | '   putcharxycg(x+8*iii,y,byte[text+iii],f,b)
017d0     02 FB 01 F6 | 	mov	arg01, local01
017d4     07 19 02 F6 | 	mov	local11, local06
017d8     03 18 66 F0 | 	shl	local11, #3
017dc     0C FB 01 F1 | 	add	arg01, local11
017e0     03 FD 01 F6 | 	mov	arg02, local02
017e4     04 1B 02 F6 | 	mov	local12, local03
017e8     07 1B 02 F1 | 	add	local12, local06
017ec     0D FF C1 FA | 	rdbyte	arg03, local12
017f0     05 01 02 F6 | 	mov	arg04, local04
017f4     06 03 02 F6 | 	mov	arg05, local05
017f8     7C FE BF FD | 	call	#_putcharxycg
017fc     0B 0F 02 F1 | 	add	local06, local10
01800     0A 0F 0A F2 | 	cmp	local06, local09 wz
01804     C8 FF 9F 5D |  if_ne	jmp	#LR__0041
01808     AF F0 03 F6 | 	mov	ptra, fp
0180c     BA 00 A0 FD | 	call	#popregs_
01810                 | _outtextxycg_ret
01810     2D 00 64 FD | 	ret
01814                 | 
01814                 | ' 
01814                 | ' 
01814                 | ' ''---------- putpixel - put a pixel on the screen
01814                 | ' 
01814                 | ' pub putpixel1(x,y,c) |byte b
01814                 | _putpixel1
01814                 | ' 
01814                 | ' 
01814                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01814     00 BA 05 F6 | 	mov	_var01, #0
01818     00 FA 5D F2 | 	cmps	arg01, #0 wcz
0181c     01 BA 65 36 |  if_ae	neg	_var01, #1
01820     00 BC 05 F6 | 	mov	_var02, #0
01824     90 A6 05 F1 | 	add	objptr, #144
01828     D3 BE 01 FB | 	rdlong	_var03, objptr
0182c     05 BE 65 F0 | 	shl	_var03, #5
01830     DF FA 59 F2 | 	cmps	arg01, _var03 wcz
01834     01 BC 65 C6 |  if_b	neg	_var02, #1
01838     DE BA 01 F5 | 	and	_var01, _var02
0183c     00 C0 05 F6 | 	mov	_var04, #0
01840     00 FC 5D F2 | 	cmps	arg02, #0 wcz
01844     01 C0 65 36 |  if_ae	neg	_var04, #1
01848     E0 BA 01 F5 | 	and	_var01, _var04
0184c     00 C2 05 F6 | 	mov	_var05, #0
01850     04 A6 05 F1 | 	add	objptr, #4
01854     D3 C4 01 FB | 	rdlong	_var06, objptr
01858     94 A6 85 F1 | 	sub	objptr, #148
0185c     E2 FC 59 F2 | 	cmps	arg02, _var06 wcz
01860     01 C2 65 C6 |  if_b	neg	_var05, #1
01864     E1 BA C9 F7 | 	test	_var01, _var05 wz
01868     90 00 90 AD |  if_e	jmp	#LR__0044
0186c                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
0186c     D3 BA 01 FB | 	rdlong	_var01, objptr
01870     90 A6 05 F1 | 	add	objptr, #144
01874     D3 BC 01 FB | 	rdlong	_var02, objptr
01878     90 A6 85 F1 | 	sub	objptr, #144
0187c     02 BC 65 F0 | 	shl	_var02, #2
01880     FE BC 01 FD | 	qmul	_var02, arg02
01884     18 C6 61 FD | 	getqx	_var07
01888     E3 BA 01 F1 | 	add	_var01, _var07
0188c     FD C0 01 F6 | 	mov	_var04, arg01
01890     03 C0 45 F0 | 	shr	_var04, #3
01894     E0 BA 01 F1 | 	add	_var01, _var04
01898     DD C8 C1 FA | 	rdbyte	_var08, _var01
0189c                 | '     if (c==0)
0189c     00 FE 0D F2 | 	cmp	arg03, #0 wz
018a0     18 00 90 5D |  if_ne	jmp	#LR__0042
018a4                 | '       b:=b & !(1<<(x//8))
018a4     FD BE 51 F6 | 	abs	_var03, arg01 wc
018a8     07 BE 05 F5 | 	and	_var03, #7
018ac     DF BE 61 C6 |  if_b	neg	_var03, _var03
018b0     DF BC C1 F9 | 	decod	_var02, _var03
018b4     DE C8 21 F5 | 	andn	_var08, _var02
018b8                 | '     else
018b8     14 00 90 FD | 	jmp	#LR__0043
018bc                 | LR__0042
018bc                 | '       b:=b |(1<<(x//8))
018bc     FD BE 51 F6 | 	abs	_var03, arg01 wc
018c0     07 BE 05 F5 | 	and	_var03, #7
018c4     DF BE 61 C6 |  if_b	neg	_var03, _var03
018c8     DF BC C1 F9 | 	decod	_var02, _var03
018cc     DE C8 41 F5 | 	or	_var08, _var02
018d0                 | LR__0043
018d0                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
018d0     D3 BA 01 FB | 	rdlong	_var01, objptr
018d4     90 A6 05 F1 | 	add	objptr, #144
018d8     D3 BC 01 FB | 	rdlong	_var02, objptr
018dc     90 A6 85 F1 | 	sub	objptr, #144
018e0     02 BC 65 F0 | 	shl	_var02, #2
018e4     FE BC 01 FD | 	qmul	_var02, arg02
018e8     18 C6 61 FD | 	getqx	_var07
018ec     E3 BA 01 F1 | 	add	_var01, _var07
018f0     03 FA 45 F0 | 	shr	arg01, #3
018f4     FD BA 01 F1 | 	add	_var01, arg01
018f8     DD C8 41 FC | 	wrbyte	_var08, _var01
018fc                 | LR__0044
018fc                 | _putpixel1_ret
018fc     2D 00 64 FD | 	ret
01900                 | 
01900                 | ' 
01900                 | ' 
01900                 | ' pub putpixel2(x,y,c) |byte b
01900                 | _putpixel2
01900     FD BA 01 F6 | 	mov	_var01, arg01
01904     FE BC 01 F6 | 	mov	_var02, arg02
01908                 | ' 
01908                 | ' 
01908                 | ' if ((x>=0) && (x<16*cpl) && (y>=0) && (y<lines))
01908     00 BA 5D F2 | 	cmps	_var01, #0 wcz
0190c     78 00 90 CD |  if_b	jmp	#LR__0045
01910     90 A6 05 F1 | 	add	objptr, #144
01914     D3 BE 01 FB | 	rdlong	_var03, objptr
01918     90 A6 85 F1 | 	sub	objptr, #144
0191c     04 BE 65 F0 | 	shl	_var03, #4
01920     DF BA 59 F2 | 	cmps	_var01, _var03 wcz
01924     60 00 90 3D |  if_ae	jmp	#LR__0045
01928     00 BC 5D F2 | 	cmps	_var02, #0 wcz
0192c     58 00 90 CD |  if_b	jmp	#LR__0045
01930     94 A6 05 F1 | 	add	objptr, #148
01934     D3 C0 01 FB | 	rdlong	_var04, objptr
01938     94 A6 85 F1 | 	sub	objptr, #148
0193c     E0 BC 59 F2 | 	cmps	_var02, _var04 wcz
01940     44 00 90 3D |  if_ae	jmp	#LR__0045
01944                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01944     90 A6 05 F1 | 	add	objptr, #144
01948     D3 C2 01 FB | 	rdlong	_var05, objptr
0194c     90 A6 85 F1 | 	sub	objptr, #144
01950     02 C2 65 F0 | 	shl	_var05, #2
01954     DE C2 01 FD | 	qmul	_var05, _var02
01958                 | '     b:=b & !(%11<<((x//4)<<1))
01958                 | '     b:=b |(c<<((x//4)<<1))
01958                 | '     b:=$FF
01958                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
01958     D3 BE 01 FB | 	rdlong	_var03, objptr
0195c     90 A6 05 F1 | 	add	objptr, #144
01960     D3 C2 01 FB | 	rdlong	_var05, objptr
01964     90 A6 85 F1 | 	sub	objptr, #144
01968     02 C2 65 F0 | 	shl	_var05, #2
0196c     DE C2 01 FD | 	qmul	_var05, _var02
01970     18 C4 61 FD | 	getqx	_var06
01974     E2 BE 01 F1 | 	add	_var03, _var06
01978     DD C6 01 F6 | 	mov	_var07, _var01
0197c     02 C6 45 F0 | 	shr	_var07, #2
01980     E3 BE 01 F1 | 	add	_var03, _var07
01984     DF FE 49 FC | 	wrbyte	#255, _var03
01988                 | LR__0045
01988                 | _putpixel2_ret
01988     2D 00 64 FD | 	ret
0198c                 | 
0198c                 | ' 
0198c                 | ' 
0198c                 | ' pub putpixel4(x,y,c) |byte b
0198c                 | _putpixel4
0198c                 | ' 
0198c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
0198c     00 BA 05 F6 | 	mov	_var01, #0
01990     00 FA 5D F2 | 	cmps	arg01, #0 wcz
01994     01 BA 65 36 |  if_ae	neg	_var01, #1
01998     00 BC 05 F6 | 	mov	_var02, #0
0199c     90 A6 05 F1 | 	add	objptr, #144
019a0     D3 BE 01 FB | 	rdlong	_var03, objptr
019a4     04 BE 65 F0 | 	shl	_var03, #4
019a8     DF FA 59 F2 | 	cmps	arg01, _var03 wcz
019ac     01 BC 65 C6 |  if_b	neg	_var02, #1
019b0     DE BA 01 F5 | 	and	_var01, _var02
019b4     00 C0 05 F6 | 	mov	_var04, #0
019b8     00 FC 5D F2 | 	cmps	arg02, #0 wcz
019bc     01 C0 65 36 |  if_ae	neg	_var04, #1
019c0     E0 BA 01 F5 | 	and	_var01, _var04
019c4     00 C2 05 F6 | 	mov	_var05, #0
019c8     04 A6 05 F1 | 	add	objptr, #4
019cc     D3 C4 01 FB | 	rdlong	_var06, objptr
019d0     94 A6 85 F1 | 	sub	objptr, #148
019d4     E2 FC 59 F2 | 	cmps	arg02, _var06 wcz
019d8     01 C2 65 C6 |  if_b	neg	_var05, #1
019dc     E1 BA C9 F7 | 	test	_var01, _var05 wz
019e0     90 00 90 AD |  if_e	jmp	#LR__0046
019e4                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
019e4     D3 BA 01 FB | 	rdlong	_var01, objptr
019e8     90 A6 05 F1 | 	add	objptr, #144
019ec     D3 BC 01 FB | 	rdlong	_var02, objptr
019f0     90 A6 85 F1 | 	sub	objptr, #144
019f4     02 BC 65 F0 | 	shl	_var02, #2
019f8     FE BC 01 FD | 	qmul	_var02, arg02
019fc     18 C6 61 FD | 	getqx	_var07
01a00     E3 BA 01 F1 | 	add	_var01, _var07
01a04     FD C0 01 F6 | 	mov	_var04, arg01
01a08     01 C0 45 F0 | 	shr	_var04, #1
01a0c     E0 BA 01 F1 | 	add	_var01, _var04
01a10     DD C8 C1 FA | 	rdbyte	_var08, _var01
01a14                 | '     b:=b & !(%1111<<((x//2)<<2))
01a14     FD BE 51 F6 | 	abs	_var03, arg01 wc
01a18     01 BE 05 F5 | 	and	_var03, #1
01a1c     DF BE 61 C6 |  if_b	neg	_var03, _var03
01a20     02 BE 65 F0 | 	shl	_var03, #2
01a24     0F BC 05 F6 | 	mov	_var02, #15
01a28     DF BC 61 F0 | 	shl	_var02, _var03
01a2c     DE C8 21 F5 | 	andn	_var08, _var02
01a30                 | '     b:=b |(c<<((x//2)<<2))
01a30     FD BE 51 F6 | 	abs	_var03, arg01 wc
01a34     01 BE 05 F5 | 	and	_var03, #1
01a38     DF BE 61 C6 |  if_b	neg	_var03, _var03
01a3c     02 BE 65 F0 | 	shl	_var03, #2
01a40     DF FE 61 F0 | 	shl	arg03, _var03
01a44     FF C8 41 F5 | 	or	_var08, arg03
01a48                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
01a48     D3 BA 01 FB | 	rdlong	_var01, objptr
01a4c     90 A6 05 F1 | 	add	objptr, #144
01a50     D3 BC 01 FB | 	rdlong	_var02, objptr
01a54     90 A6 85 F1 | 	sub	objptr, #144
01a58     02 BC 65 F0 | 	shl	_var02, #2
01a5c     FE BC 01 FD | 	qmul	_var02, arg02
01a60     18 C6 61 FD | 	getqx	_var07
01a64     E3 BA 01 F1 | 	add	_var01, _var07
01a68     01 FA 45 F0 | 	shr	arg01, #1
01a6c     FD BA 01 F1 | 	add	_var01, arg01
01a70     DD C8 41 FC | 	wrbyte	_var08, _var01
01a74                 | LR__0046
01a74                 | _putpixel4_ret
01a74     2D 00 64 FD | 	ret
01a78                 | 
01a78                 | ' 
01a78                 | ' 
01a78                 | ' pub putpixel8(x,y,c)
01a78                 | _putpixel8
01a78                 | ' 
01a78                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
01a78     00 BA 05 F6 | 	mov	_var01, #0
01a7c     00 FA 5D F2 | 	cmps	arg01, #0 wcz
01a80     01 BA 65 36 |  if_ae	neg	_var01, #1
01a84     00 BC 05 F6 | 	mov	_var02, #0
01a88     90 A6 05 F1 | 	add	objptr, #144
01a8c     D3 BE 01 FB | 	rdlong	_var03, objptr
01a90     02 BE 65 F0 | 	shl	_var03, #2
01a94     DF FA 59 F2 | 	cmps	arg01, _var03 wcz
01a98     01 BC 65 C6 |  if_b	neg	_var02, #1
01a9c     DE BA 01 F5 | 	and	_var01, _var02
01aa0     00 C0 05 F6 | 	mov	_var04, #0
01aa4     00 FC 5D F2 | 	cmps	arg02, #0 wcz
01aa8     01 C0 65 36 |  if_ae	neg	_var04, #1
01aac     E0 BA 01 F5 | 	and	_var01, _var04
01ab0     00 C2 05 F6 | 	mov	_var05, #0
01ab4     04 A6 05 F1 | 	add	objptr, #4
01ab8     D3 C4 01 FB | 	rdlong	_var06, objptr
01abc     94 A6 85 F1 | 	sub	objptr, #148
01ac0     E2 FC 59 F2 | 	cmps	arg02, _var06 wcz
01ac4     01 C2 65 C6 |  if_b	neg	_var05, #1
01ac8     E1 BA C9 F7 | 	test	_var01, _var05 wz
01acc     28 00 90 AD |  if_e	jmp	#LR__0047
01ad0                 | '     byte[buf_ptr+4*cpl*y+x]:=c
01ad0     D3 BA 01 FB | 	rdlong	_var01, objptr
01ad4     90 A6 05 F1 | 	add	objptr, #144
01ad8     D3 BC 01 FB | 	rdlong	_var02, objptr
01adc     90 A6 85 F1 | 	sub	objptr, #144
01ae0     02 BC 65 F0 | 	shl	_var02, #2
01ae4     FE BC 01 FD | 	qmul	_var02, arg02
01ae8     18 C6 61 FD | 	getqx	_var07
01aec     E3 BA 01 F1 | 	add	_var01, _var07
01af0     FD BA 01 F1 | 	add	_var01, arg01
01af4     DD FE 41 FC | 	wrbyte	arg03, _var01
01af8                 | LR__0047
01af8                 | _putpixel8_ret
01af8     2D 00 64 FD | 	ret
01afc                 | 
01afc                 | ' 
01afc                 | ' '*************************************************************************
01afc                 | ' '                                                                        *
01afc                 | ' '  VBlank functions                                                      *
01afc                 | ' '                                                                        *
01afc                 | ' '*************************************************************************
01afc                 | ' 
01afc                 | ' pub waitvbl(amount) | i
01afc                 | _waitvbl
01afc     04 5A 05 F6 | 	mov	COUNT_, #4
01b00     B0 00 A0 FD | 	call	#pushregs_
01b04     FD 04 02 F6 | 	mov	local01, arg01
01b08                 | ' 
01b08                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01b08                 | ' 
01b08                 | ' repeat i from 1 to amount
01b08     01 06 06 F6 | 	mov	local02, #1
01b0c     01 04 5E F2 | 	cmps	local01, #1 wcz
01b10     01 08 06 16 |  if_a	mov	local03, #1
01b14     01 08 66 E6 |  if_be	neg	local03, #1
01b18     04 05 02 F1 | 	add	local01, local03
01b1c                 | LR__0048
01b1c                 | '   repeat until vblank==0
01b1c                 | LR__0049
01b1c     40 A6 05 F1 | 	add	objptr, #64
01b20     D3 0A 0A FB | 	rdlong	local04, objptr wz
01b24     40 A6 85 F1 | 	sub	objptr, #64
01b28     0C 00 90 AD |  if_e	jmp	#LR__0050
01b2c                 | '     waitus(100)
01b2c     64 FA 05 F6 | 	mov	arg01, #100
01b30     2C 11 B0 FD | 	call	#__system___waitus
01b34     E4 FF 9F FD | 	jmp	#LR__0049
01b38                 | LR__0050
01b38                 | '   repeat until vblank==1
01b38                 | LR__0051
01b38     40 A6 05 F1 | 	add	objptr, #64
01b3c     D3 0A 02 FB | 	rdlong	local04, objptr
01b40     40 A6 85 F1 | 	sub	objptr, #64
01b44     01 0A 0E F2 | 	cmp	local04, #1 wz
01b48     0C 00 90 AD |  if_e	jmp	#LR__0052
01b4c                 | '     waitus(100)
01b4c     64 FA 05 F6 | 	mov	arg01, #100
01b50     0C 11 B0 FD | 	call	#__system___waitus
01b54     E0 FF 9F FD | 	jmp	#LR__0051
01b58                 | LR__0052
01b58     04 07 02 F1 | 	add	local02, local03
01b5c     02 07 0A F2 | 	cmp	local02, local01 wz
01b60     B8 FF 9F 5D |  if_ne	jmp	#LR__0048
01b64     AF F0 03 F6 | 	mov	ptra, fp
01b68     BA 00 A0 FD | 	call	#popregs_
01b6c                 | _waitvbl_ret
01b6c     2D 00 64 FD | 	ret
01b70                 | 
01b70                 | ' 
01b70                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
01b70                 | ' 
01b70                 | ' pub setbordercolor(r,g,b) | color
01b70                 | _setbordercolor
01b70                 | ' 
01b70                 | ' color:=r<<24+g<<16+b<<8
01b70     18 FA 65 F0 | 	shl	arg01, #24
01b74     10 FC 65 F0 | 	shl	arg02, #16
01b78     FE FA 01 F1 | 	add	arg01, arg02
01b7c     08 FE 65 F0 | 	shl	arg03, #8
01b80     FF FA 01 F1 | 	add	arg01, arg03
01b84                 | ' bordercolor:=color
01b84     2C A6 05 F1 | 	add	objptr, #44
01b88     D3 FA 61 FC | 	wrlong	arg01, objptr
01b8c     2C A6 85 F1 | 	sub	objptr, #44
01b90                 | _setbordercolor_ret
01b90     2D 00 64 FD | 	ret
01b94                 | 
01b94                 | ' 
01b94                 | ' 
01b94                 | ' '*************************************************************************
01b94                 | ' '                                                                        *
01b94                 | ' '  Text functions                                                        *
01b94                 | ' '                                                                        *
01b94                 | ' '*************************************************************************
01b94                 | ' 
01b94                 | ' ''---------- Clear the screen, set its foreground/background color
01b94                 | ' 
01b94                 | ' pub cls(fc,bc)   :c
01b94                 | _cls
01b94     06 5A 05 F6 | 	mov	COUNT_, #6
01b98     B0 00 A0 FD | 	call	#pushregs_
01b9c     FD 04 02 F6 | 	mov	local01, arg01
01ba0     FE 06 02 F6 | 	mov	local02, arg02
01ba4                 | ' 
01ba4                 | ' if (graphmode<512)
01ba4     C4 A6 05 F1 | 	add	objptr, #196
01ba8     D3 08 02 FB | 	rdlong	local03, objptr
01bac     C4 A6 85 F1 | 	sub	objptr, #196
01bb0     01 00 00 FF 
01bb4     00 08 5E F2 | 	cmps	local03, ##512 wcz
01bb8     34 00 90 3D |  if_ae	jmp	#LR__0053
01bbc                 | '   c:=fc<<24+bc<<16+$20
01bbc     02 0B 02 F6 | 	mov	local04, local01
01bc0     18 0A 66 F0 | 	shl	local04, #24
01bc4     03 0D 02 F6 | 	mov	local05, local02
01bc8     10 0C 66 F0 | 	shl	local05, #16
01bcc     06 0B 02 F1 | 	add	local04, local05
01bd0     20 0A 06 F1 | 	add	local04, #32
01bd4                 | '   longfill(buf_ptr,c,buflen)
01bd4     D3 FA 01 FB | 	rdlong	arg01, objptr
01bd8     30 A6 05 F1 | 	add	objptr, #48
01bdc     D3 FE 01 FB | 	rdlong	arg03, objptr
01be0     30 A6 85 F1 | 	sub	objptr, #48
01be4     05 FD 01 F6 | 	mov	arg02, local04
01be8     A8 00 A0 FD | 	call	#\builtin_longfill_
01bec                 | ' else
01bec     AC 00 90 FD | 	jmp	#LR__0059
01bf0                 | LR__0053
01bf0                 | '   if (graphmode & 48) ==48
01bf0     C4 A6 05 F1 | 	add	objptr, #196
01bf4     D3 08 02 FB | 	rdlong	local03, objptr
01bf8     C4 A6 85 F1 | 	sub	objptr, #196
01bfc     30 08 06 F5 | 	and	local03, #48
01c00     30 08 0E F2 | 	cmp	local03, #48 wz
01c04                 | '     c:=bc
01c04     03 0B 02 A6 |  if_e	mov	local04, local02
01c08     74 00 90 AD |  if_e	jmp	#LR__0058
01c0c                 | '   elseif (graphmode & 48) ==32
01c0c     C4 A6 05 F1 | 	add	objptr, #196
01c10     D3 08 02 FB | 	rdlong	local03, objptr
01c14     C4 A6 85 F1 | 	sub	objptr, #196
01c18     30 08 06 F5 | 	and	local03, #48
01c1c     20 08 0E F2 | 	cmp	local03, #32 wz
01c20     10 00 90 5D |  if_ne	jmp	#LR__0054
01c24                 | '     c:=bc<<4+bc
01c24     03 0B 02 F6 | 	mov	local04, local02
01c28     04 0A 66 F0 | 	shl	local04, #4
01c2c     03 0B 02 F1 | 	add	local04, local02
01c30     4C 00 90 FD | 	jmp	#LR__0057
01c34                 | LR__0054
01c34                 | '   elseif (graphmode & 48) ==16
01c34     C4 A6 05 F1 | 	add	objptr, #196
01c38     D3 08 02 FB | 	rdlong	local03, objptr
01c3c     C4 A6 85 F1 | 	sub	objptr, #196
01c40     30 08 06 F5 | 	and	local03, #48
01c44     10 08 0E F2 | 	cmp	local03, #16 wz
01c48     28 00 90 5D |  if_ne	jmp	#LR__0055
01c4c                 | '     c:=bc<<6+bc<<4+bc<<2+bc
01c4c     03 0B 02 F6 | 	mov	local04, local02
01c50     06 0A 66 F0 | 	shl	local04, #6
01c54     03 0D 02 F6 | 	mov	local05, local02
01c58     04 0C 66 F0 | 	shl	local05, #4
01c5c     06 0B 02 F1 | 	add	local04, local05
01c60     03 0F 02 F6 | 	mov	local06, local02
01c64     02 0E 66 F0 | 	shl	local06, #2
01c68     07 0B 02 F1 | 	add	local04, local06
01c6c     03 0B 02 F1 | 	add	local04, local02
01c70                 | '   else
01c70     0C 00 90 FD | 	jmp	#LR__0056
01c74                 | LR__0055
01c74                 | '     if bc==1
01c74     01 06 0E F2 | 	cmp	local02, #1 wz
01c78                 | '       c:=255
01c78     FF 0A 06 A6 |  if_e	mov	local04, #255
01c7c                 | '     else
01c7c                 | '       c:=0
01c7c     00 0A 06 56 |  if_ne	mov	local04, #0
01c80                 | LR__0056
01c80                 | LR__0057
01c80                 | LR__0058
01c80                 | '   bytefill(buf_ptr,c,buflen*4)
01c80     D3 FA 01 FB | 	rdlong	arg01, objptr
01c84     30 A6 05 F1 | 	add	objptr, #48
01c88     D3 FE 01 FB | 	rdlong	arg03, objptr
01c8c     30 A6 85 F1 | 	sub	objptr, #48
01c90     02 FE 65 F0 | 	shl	arg03, #2
01c94     05 FD 01 F6 | 	mov	arg02, local04
01c98     A0 00 A0 FD | 	call	#\builtin_bytefill_
01c9c                 | LR__0059
01c9c                 | ' setwritecolors(fc,bc)
01c9c                 | ' 
01c9c                 | ' 
01c9c                 | ' write_color:=ff
01c9c     38 A6 05 F1 | 	add	objptr, #56
01ca0     D3 04 62 FC | 	wrlong	local01, objptr
01ca4                 | ' write_background:=bb
01ca4     04 A6 05 F1 | 	add	objptr, #4
01ca8     D3 06 62 FC | 	wrlong	local02, objptr
01cac                 | ' cursor_x:=0
01cac     08 A6 85 F1 | 	sub	objptr, #8
01cb0     D3 00 48 FC | 	wrbyte	#0, objptr
01cb4                 | ' cursor_y:=0
01cb4     01 A6 05 F1 | 	add	objptr, #1
01cb8     D3 00 48 FC | 	wrbyte	#0, objptr
01cbc     35 A6 85 F1 | 	sub	objptr, #53
01cc0     05 B7 01 F6 | 	mov	result1, local04
01cc4     AF F0 03 F6 | 	mov	ptra, fp
01cc8     BA 00 A0 FD | 	call	#popregs_
01ccc                 | _cls_ret
01ccc     2D 00 64 FD | 	ret
01cd0                 | 
01cd0                 | ' 
01cd0                 | ' 
01cd0                 | ' '*************************************************************************
01cd0                 | ' '                                                                        *
01cd0                 | ' '  Conversions                                                           *
01cd0                 | ' '                                                                        *
01cd0                 | ' '*************************************************************************
01cd0                 | ' 
01cd0                 | ' ''---------- Convert a integer to dec string, return a pointer
01cd0                 | ' 
01cd0                 | ' pub inttostr(i):result |q,pos,k,j
01cd0                 | _inttostr
01cd0     06 5A 05 F6 | 	mov	COUNT_, #6
01cd4     B0 00 A0 FD | 	call	#pushregs_
01cd8     FD 04 02 F6 | 	mov	local01, arg01
01cdc                 | ' 
01cdc                 | ' j:=i
01cdc     02 07 0A F6 | 	mov	local02, local01 wz
01ce0                 | ' pos:=10
01ce0     0A 08 06 F6 | 	mov	local03, #10
01ce4                 | ' k:=0
01ce4     00 0A 06 F6 | 	mov	local04, #0
01ce8                 | ' 
01ce8                 | ' if (j==0)
01ce8     18 00 90 5D |  if_ne	jmp	#LR__0060
01cec                 | '   n_string[0]:=48
01cec     44 A6 05 F1 | 	add	objptr, #68
01cf0     D3 60 48 FC | 	wrbyte	#48, objptr
01cf4                 | '   n_string[1]:=0
01cf4     01 A6 05 F1 | 	add	objptr, #1
01cf8     D3 00 48 FC | 	wrbyte	#0, objptr
01cfc     45 A6 85 F1 | 	sub	objptr, #69
01d00                 | ' 
01d00                 | ' else
01d00     C4 00 90 FD | 	jmp	#LR__0067
01d04                 | LR__0060
01d04                 | '   if (j<0)
01d04     00 06 5E F2 | 	cmps	local02, #0 wcz
01d08                 | '     j:=0-j
01d08     03 07 62 C6 |  if_b	neg	local02, local02
01d0c                 | '     k:=45
01d0c     2D 0A 06 C6 |  if_b	mov	local04, #45
01d10                 | ' 
01d10                 | '   n_string[11]:=0
01d10     4F A6 05 F1 | 	add	objptr, #79
01d14     D3 00 48 FC | 	wrbyte	#0, objptr
01d18     4F A6 85 F1 | 	sub	objptr, #79
01d1c     20 E3 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
01d20     93 00 A0 FD | 	call	#FCACHE_LOAD_
01d24                 | '   repeat while (pos>-1)
01d24                 | LR__0061
01d24     FF FF 7F FF 
01d28     FF 09 5E F2 | 	cmps	local03, ##-1 wcz
01d2c     34 00 90 ED |  if_be	jmp	#LR__0063
01d30                 | '     q:=j//10
01d30     03 29 02 F6 | 	mov	muldiva_, local02
01d34     0A 2A 06 F6 | 	mov	muldivb_, #10
01d38     C6 00 A0 FD | 	call	#divide_
01d3c                 | '     q:=48+q
01d3c     30 0C 06 F6 | 	mov	local05, #48
01d40     14 0D 02 F1 | 	add	local05, muldiva_
01d44                 | '     n_string[pos]:=q
01d44     04 0F 02 F6 | 	mov	local06, local03
01d48     44 A6 05 F1 | 	add	objptr, #68
01d4c     D3 0E 02 F1 | 	add	local06, objptr
01d50     07 0D 42 FC | 	wrbyte	local05, local06
01d54                 | '     j:=j/10
01d54     15 07 02 F6 | 	mov	local02, muldivb_
01d58                 | '     pos-=1
01d58     01 08 86 F1 | 	sub	local03, #1
01d5c     44 A6 85 F1 | 	sub	objptr, #68
01d60     C0 FF 9F FD | 	jmp	#LR__0061
01d64                 | LR__0062
01d64                 | LR__0063
01d64                 | '   repeat while n_string[0]==48
01d64                 | LR__0064
01d64     44 A6 05 F1 | 	add	objptr, #68
01d68     D3 0E C2 FA | 	rdbyte	local06, objptr
01d6c     44 A6 85 F1 | 	sub	objptr, #68
01d70     30 0E 0E F2 | 	cmp	local06, #48 wz
01d74     20 00 90 5D |  if_ne	jmp	#LR__0065
01d78                 | '     bytemove(@n_string,@n_string+1,12)
01d78     44 A6 05 F1 | 	add	objptr, #68
01d7c     D3 FA 01 F6 | 	mov	arg01, objptr
01d80     D3 FC 01 F6 | 	mov	arg02, objptr
01d84     44 A6 85 F1 | 	sub	objptr, #68
01d88     01 FC 05 F1 | 	add	arg02, #1
01d8c     0C FE 05 F6 | 	mov	arg03, #12
01d90     5C 0C B0 FD | 	call	#__system____builtin_memmove
01d94     CC FF 9F FD | 	jmp	#LR__0064
01d98                 | LR__0065
01d98                 | ' 
01d98                 | '   if k==45
01d98     2D 0A 0E F2 | 	cmp	local04, #45 wz
01d9c     28 00 90 5D |  if_ne	jmp	#LR__0066
01da0                 | '      bytemove(@n_string+1,@n_string,12)
01da0     44 A6 05 F1 | 	add	objptr, #68
01da4     D3 FA 01 F6 | 	mov	arg01, objptr
01da8     01 FA 05 F1 | 	add	arg01, #1
01dac     D3 FC 01 F6 | 	mov	arg02, objptr
01db0     44 A6 85 F1 | 	sub	objptr, #68
01db4     0C FE 05 F6 | 	mov	arg03, #12
01db8     34 0C B0 FD | 	call	#__system____builtin_memmove
01dbc                 | '      n_string[0]:=k
01dbc     44 A6 05 F1 | 	add	objptr, #68
01dc0     D3 0A 42 FC | 	wrbyte	local04, objptr
01dc4     44 A6 85 F1 | 	sub	objptr, #68
01dc8                 | LR__0066
01dc8                 | LR__0067
01dc8                 | ' 
01dc8                 | ' q:=@n_string
01dc8     44 A6 05 F1 | 	add	objptr, #68
01dcc     D3 B6 01 F6 | 	mov	result1, objptr
01dd0     44 A6 85 F1 | 	sub	objptr, #68
01dd4                 | ' return q
01dd4     AF F0 03 F6 | 	mov	ptra, fp
01dd8     BA 00 A0 FD | 	call	#popregs_
01ddc                 | _inttostr_ret
01ddc     2D 00 64 FD | 	ret
01de0                 | 
01de0                 | ' 
01de0                 | ' 
01de0                 | ' 
01de0                 | ' '*************************************************************************
01de0                 | ' '                                                                        *
01de0                 | ' '  Mode setting and driver start                                                          *
01de0                 | ' '                                                                        *
01de0                 | ' '*************************************************************************
01de0                 | ' 
01de0                 | ' ''---------  Set the graphics mode
01de0                 | ' 
01de0                 | ' 
01de0                 | ' 
01de0                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
01de0                 | _setmode
01de0     0A 5A 05 F6 | 	mov	COUNT_, #10
01de4     B0 00 A0 FD | 	call	#pushregs_
01de8     FD 04 02 F6 | 	mov	local01, arg01
01dec                 | ' 
01dec                 | ' '' mode:tn_bb_cc_vv_hh
01dec                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
01dec                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
01dec                 | ' 
01dec                 | ' if mode==(512+192+48)
01dec     01 00 00 FF 
01df0     F0 04 0E F2 | 	cmp	local01, ##752 wz
01df4                 | '   return 'no RAM
01df4     C0 05 90 AD |  if_e	jmp	#LR__0090
01df8                 | ' 
01df8                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
01df8     02 07 02 F6 | 	mov	local02, local01
01dfc     06 06 46 F0 | 	shr	local02, #6
01e00     07 06 06 F5 | 	and	local02, #7
01e04     08 06 26 F3 | 	fle	local02, #8
01e08     03 09 02 F6 | 	mov	local03, local02
01e0c     30 08 62 FD | 	jmprel	local03
01e10                 | LR__0068
01e10     20 00 90 FD | 	jmp	#LR__0069
01e14     48 00 90 FD | 	jmp	#LR__0070
01e18     70 00 90 FD | 	jmp	#LR__0071
01e1c     98 00 90 FD | 	jmp	#LR__0072
01e20     C0 00 90 FD | 	jmp	#LR__0073
01e24     E8 00 90 FD | 	jmp	#LR__0074
01e28     10 01 90 FD | 	jmp	#LR__0075
01e2c     38 01 90 FD | 	jmp	#LR__0076
01e30     68 01 90 FD | 	jmp	#LR__0077
01e34                 | LR__0069
01e34                 | ' 
01e34                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
01e34     50 A6 05 F1 | 	add	objptr, #80
01e38     D3 FA 01 F6 | 	mov	arg01, objptr
01e3c     50 A6 85 F1 | 	sub	objptr, #80
01e40     0E 00 00 FF 
01e44     58 AA 05 F1 | 	add	ptr__dat__, ##7256
01e48     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01e4c     0E 00 00 FF 
01e50     58 AA 85 F1 | 	sub	ptr__dat__, ##7256
01e54     10 FE 05 F6 | 	mov	arg03, #16
01e58     24 0C B0 FD | 	call	#__system__longmove
01e5c     3C 01 90 FD | 	jmp	#LR__0077
01e60                 | LR__0070
01e60                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
01e60     50 A6 05 F1 | 	add	objptr, #80
01e64     D3 FA 01 F6 | 	mov	arg01, objptr
01e68     50 A6 85 F1 | 	sub	objptr, #80
01e6c     0E 00 00 FF 
01e70     98 AA 05 F1 | 	add	ptr__dat__, ##7320
01e74     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01e78     0E 00 00 FF 
01e7c     98 AA 85 F1 | 	sub	ptr__dat__, ##7320
01e80     10 FE 05 F6 | 	mov	arg03, #16
01e84     F8 0B B0 FD | 	call	#__system__longmove
01e88     10 01 90 FD | 	jmp	#LR__0077
01e8c                 | LR__0071
01e8c                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
01e8c     50 A6 05 F1 | 	add	objptr, #80
01e90     D3 FA 01 F6 | 	mov	arg01, objptr
01e94     50 A6 85 F1 | 	sub	objptr, #80
01e98     0E 00 00 FF 
01e9c     D8 AA 05 F1 | 	add	ptr__dat__, ##7384
01ea0     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01ea4     0E 00 00 FF 
01ea8     D8 AA 85 F1 | 	sub	ptr__dat__, ##7384
01eac     10 FE 05 F6 | 	mov	arg03, #16
01eb0     CC 0B B0 FD | 	call	#__system__longmove
01eb4     E4 00 90 FD | 	jmp	#LR__0077
01eb8                 | LR__0072
01eb8                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
01eb8     50 A6 05 F1 | 	add	objptr, #80
01ebc     D3 FA 01 F6 | 	mov	arg01, objptr
01ec0     50 A6 85 F1 | 	sub	objptr, #80
01ec4     0E 00 00 FF 
01ec8     18 AB 05 F1 | 	add	ptr__dat__, ##7448
01ecc     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01ed0     0E 00 00 FF 
01ed4     18 AB 85 F1 | 	sub	ptr__dat__, ##7448
01ed8     10 FE 05 F6 | 	mov	arg03, #16
01edc     A0 0B B0 FD | 	call	#__system__longmove
01ee0     B8 00 90 FD | 	jmp	#LR__0077
01ee4                 | LR__0073
01ee4                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
01ee4     50 A6 05 F1 | 	add	objptr, #80
01ee8     D3 FA 01 F6 | 	mov	arg01, objptr
01eec     50 A6 85 F1 | 	sub	objptr, #80
01ef0     0E 00 00 FF 
01ef4     58 AB 05 F1 | 	add	ptr__dat__, ##7512
01ef8     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01efc     0E 00 00 FF 
01f00     58 AB 85 F1 | 	sub	ptr__dat__, ##7512
01f04     10 FE 05 F6 | 	mov	arg03, #16
01f08     74 0B B0 FD | 	call	#__system__longmove
01f0c     8C 00 90 FD | 	jmp	#LR__0077
01f10                 | LR__0074
01f10                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
01f10     50 A6 05 F1 | 	add	objptr, #80
01f14     D3 FA 01 F6 | 	mov	arg01, objptr
01f18     50 A6 85 F1 | 	sub	objptr, #80
01f1c     0E 00 00 FF 
01f20     98 AB 05 F1 | 	add	ptr__dat__, ##7576
01f24     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01f28     0E 00 00 FF 
01f2c     98 AB 85 F1 | 	sub	ptr__dat__, ##7576
01f30     10 FE 05 F6 | 	mov	arg03, #16
01f34     48 0B B0 FD | 	call	#__system__longmove
01f38     60 00 90 FD | 	jmp	#LR__0077
01f3c                 | LR__0075
01f3c                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
01f3c     50 A6 05 F1 | 	add	objptr, #80
01f40     D3 FA 01 F6 | 	mov	arg01, objptr
01f44     50 A6 85 F1 | 	sub	objptr, #80
01f48     0E 00 00 FF 
01f4c     D8 AB 05 F1 | 	add	ptr__dat__, ##7640
01f50     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01f54     0E 00 00 FF 
01f58     D8 AB 85 F1 | 	sub	ptr__dat__, ##7640
01f5c     10 FE 05 F6 | 	mov	arg03, #16
01f60     1C 0B B0 FD | 	call	#__system__longmove
01f64     34 00 90 FD | 	jmp	#LR__0077
01f68                 | LR__0076
01f68                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
01f68     50 A6 05 F1 | 	add	objptr, #80
01f6c     D3 0A 02 F6 | 	mov	local04, objptr
01f70     0F 00 00 FF 
01f74     18 AA 05 F1 | 	add	ptr__dat__, ##7704
01f78     D5 0C 02 F6 | 	mov	local05, ptr__dat__
01f7c     10 0E 06 F6 | 	mov	local06, #16
01f80     05 FB 01 F6 | 	mov	arg01, local04
01f84     06 FD 01 F6 | 	mov	arg02, local05
01f88     10 FE 05 F6 | 	mov	arg03, #16
01f8c     50 A6 85 F1 | 	sub	objptr, #80
01f90     0F 00 00 FF 
01f94     18 AA 85 F1 | 	sub	ptr__dat__, ##7704
01f98     E4 0A B0 FD | 	call	#__system__longmove
01f9c                 | LR__0077
01f9c                 | ' 
01f9c                 | ' ' 4-bit graphics: do nothing with timings :)
01f9c                 | ' if mode<512
01f9c     01 00 00 FF 
01fa0     00 04 5E F2 | 	cmps	local01, ##512 wcz
01fa4     1C 00 90 3D |  if_ae	jmp	#LR__0078
01fa8                 | '   palette_ptr:=@ataripalette
01fa8     0C 00 00 FF 
01fac     58 AA 05 F1 | 	add	ptr__dat__, ##6232
01fb0     18 A6 05 F1 | 	add	objptr, #24
01fb4     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
01fb8     18 A6 85 F1 | 	sub	objptr, #24
01fbc     0C 00 00 FF 
01fc0     58 AA 85 F1 | 	sub	ptr__dat__, ##6232
01fc4                 | LR__0078
01fc4                 | ' 
01fc4                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
01fc4     02 07 02 F6 | 	mov	local02, local01
01fc8     01 00 00 FF 
01fcc     30 06 06 F5 | 	and	local02, ##560
01fd0     01 00 00 FF 
01fd4     30 06 0E F2 | 	cmp	local02, ##560 wz
01fd8     44 00 90 5D |  if_ne	jmp	#LR__0079
01fdc                 | '   timings[5]:=4
01fdc     64 A6 05 F1 | 	add	objptr, #100
01fe0     D3 08 68 FC | 	wrlong	#4, objptr
01fe4                 | '   timings[11]:=timings[11]<<1
01fe4     18 A6 05 F1 | 	add	objptr, #24
01fe8     D3 06 02 FB | 	rdlong	local02, objptr
01fec     01 06 66 F0 | 	shl	local02, #1
01ff0     D3 06 62 FC | 	wrlong	local02, objptr
01ff4                 | '   putpixel:=p8
01ff4     6C A6 05 F1 | 	add	objptr, #108
01ff8     D3 06 02 FB | 	rdlong	local02, objptr
01ffc     10 A6 85 F1 | 	sub	objptr, #16
02000     D3 06 62 FC | 	wrlong	local02, objptr
02004                 | '   palette_ptr:=@ataripalette
02004     0C 00 00 FF 
02008     58 AA 05 F1 | 	add	ptr__dat__, ##6232
0200c     C0 A6 85 F1 | 	sub	objptr, #192
02010     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
02014     18 A6 85 F1 | 	sub	objptr, #24
02018     0C 00 00 FF 
0201c     58 AA 85 F1 | 	sub	ptr__dat__, ##6232
02020                 | LR__0079
02020                 | ' 
02020                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02020     02 07 02 F6 | 	mov	local02, local01
02024     01 00 00 FF 
02028     30 06 06 F5 | 	and	local02, ##560
0202c     01 00 00 FF 
02030     10 06 0E F2 | 	cmp	local02, ##528 wz
02034     44 00 90 5D |  if_ne	jmp	#LR__0080
02038                 | '   timings[5]:=16
02038     64 A6 05 F1 | 	add	objptr, #100
0203c     D3 20 68 FC | 	wrlong	#16, objptr
02040                 | '   timings[11]:=timings[11]>>1
02040     18 A6 05 F1 | 	add	objptr, #24
02044     D3 06 02 FB | 	rdlong	local02, objptr
02048     01 06 46 F0 | 	shr	local02, #1
0204c     D3 06 62 FC | 	wrlong	local02, objptr
02050                 | '   putpixel:=p2
02050     64 A6 05 F1 | 	add	objptr, #100
02054     D3 06 02 FB | 	rdlong	local02, objptr
02058     08 A6 85 F1 | 	sub	objptr, #8
0205c     D3 06 62 FC | 	wrlong	local02, objptr
02060                 | '   palette_ptr:=@fourcolors
02060     0C 00 00 FF 
02064     08 AA 05 F1 | 	add	ptr__dat__, ##6152
02068     C0 A6 85 F1 | 	sub	objptr, #192
0206c     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
02070     18 A6 85 F1 | 	sub	objptr, #24
02074     0C 00 00 FF 
02078     08 AA 85 F1 | 	sub	ptr__dat__, ##6152
0207c                 | LR__0080
0207c                 | ' 
0207c                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
0207c     02 07 02 F6 | 	mov	local02, local01
02080     01 00 00 FF 
02084     30 06 06 F5 | 	and	local02, ##560
02088     01 00 00 FF 
0208c     00 06 0E F2 | 	cmp	local02, ##512 wz
02090     44 00 90 5D |  if_ne	jmp	#LR__0081
02094                 | '   timings[5]:=32
02094     64 A6 05 F1 | 	add	objptr, #100
02098     D3 40 68 FC | 	wrlong	#32, objptr
0209c                 | '   timings[11]:=timings[11]>>2
0209c     18 A6 05 F1 | 	add	objptr, #24
020a0     D3 06 02 FB | 	rdlong	local02, objptr
020a4     02 06 46 F0 | 	shr	local02, #2
020a8     D3 06 62 FC | 	wrlong	local02, objptr
020ac                 | '   putpixel:=p1
020ac     60 A6 05 F1 | 	add	objptr, #96
020b0     D3 06 02 FB | 	rdlong	local02, objptr
020b4     04 A6 85 F1 | 	sub	objptr, #4
020b8     D3 06 62 FC | 	wrlong	local02, objptr
020bc                 | '   palette_ptr:=@twocolors
020bc     0C 00 00 FF 
020c0     00 AA 05 F1 | 	add	ptr__dat__, ##6144
020c4     C0 A6 85 F1 | 	sub	objptr, #192
020c8     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
020cc     18 A6 85 F1 | 	sub	objptr, #24
020d0     0C 00 00 FF 
020d4     00 AA 85 F1 | 	sub	ptr__dat__, ##6144
020d8                 | LR__0081
020d8                 | ' 
020d8                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
020d8     02 07 02 F6 | 	mov	local02, local01
020dc     01 00 00 FF 
020e0     30 06 06 F5 | 	and	local02, ##560
020e4     01 00 00 FF 
020e8     20 06 0E F2 | 	cmp	local02, ##544 wz
020ec     2C 00 90 5D |  if_ne	jmp	#LR__0082
020f0                 | '   putpixel:=p4
020f0     E4 A6 05 F1 | 	add	objptr, #228
020f4     D3 06 02 FB | 	rdlong	local02, objptr
020f8     0C A6 85 F1 | 	sub	objptr, #12
020fc     D3 06 62 FC | 	wrlong	local02, objptr
02100                 | '   palette_ptr:=@vga16
02100     0C 00 00 FF 
02104     18 AA 05 F1 | 	add	ptr__dat__, ##6168
02108     C0 A6 85 F1 | 	sub	objptr, #192
0210c     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
02110     18 A6 85 F1 | 	sub	objptr, #24
02114     0C 00 00 FF 
02118     18 AA 85 F1 | 	sub	ptr__dat__, ##6168
0211c                 | LR__0082
0211c                 | ' 
0211c                 | ' repeat i from 0 to 4
0211c     00 10 06 F6 | 	mov	local07, #0
02120     38 DF 9F FE | 	loc	pa,	#(@LR__0084-@LR__0083)
02124     93 00 A0 FD | 	call	#FCACHE_LOAD_
02128                 | LR__0083
02128                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02128     08 0B 02 F6 | 	mov	local04, local07
0212c     02 0A 66 F0 | 	shl	local04, #2
02130     50 A6 05 F1 | 	add	objptr, #80
02134     D3 0C 02 F6 | 	mov	local05, objptr
02138     D3 0A 02 F1 | 	add	local04, objptr
0213c     2C A6 85 F1 | 	sub	objptr, #44
02140     D3 12 02 FB | 	rdlong	local08, objptr
02144     09 0F 02 F6 | 	mov	local06, local08
02148     11 0E 66 F0 | 	shl	local06, #17
0214c     05 07 02 FB | 	rdlong	local02, local04
02150     07 07 02 F1 | 	add	local02, local06
02154     80 40 38 FF 
02158     00 06 06 F1 | 	add	local02, ##1887502336
0215c     08 15 02 F6 | 	mov	local09, local07
02160     02 14 66 F0 | 	shl	local09, #2
02164     2C A6 05 F1 | 	add	objptr, #44
02168     D3 16 02 F6 | 	mov	local10, objptr
0216c     D3 14 02 F1 | 	add	local09, objptr
02170     0A 07 62 FC | 	wrlong	local02, local09
02174     01 10 06 F1 | 	add	local07, #1
02178     05 10 5E F2 | 	cmps	local07, #5 wcz
0217c     50 A6 85 F1 | 	sub	objptr, #80
02180     A4 FF 9F CD |  if_b	jmp	#LR__0083
02184                 | LR__0084
02184                 | ' timings[5]:=timings[5]+hdmibase<<17
02184     24 A6 05 F1 | 	add	objptr, #36
02188     D3 0A 02 FB | 	rdlong	local04, objptr
0218c     11 0A 66 F0 | 	shl	local04, #17
02190     40 A6 05 F1 | 	add	objptr, #64
02194     D3 0E 02 FB | 	rdlong	local06, objptr
02198     07 07 02 F6 | 	mov	local02, local06
0219c     05 07 02 F1 | 	add	local02, local04
021a0     D3 06 62 FC | 	wrlong	local02, objptr
021a4                 | ' clkfreq:=timings[13]
021a4     20 A6 05 F1 | 	add	objptr, #32
021a8     D3 06 02 FB | 	rdlong	local02, objptr
021ac     14 06 66 FC | 	wrlong	local02, #20
021b0                 | ' hubset(timings[14])
021b0     04 A6 05 F1 | 	add	objptr, #4
021b4     D3 FA 01 FB | 	rdlong	arg01, objptr
021b8     88 A6 85 F1 | 	sub	objptr, #136
021bc     00 FA 61 FD | 	hubset	arg01
021c0                 | ' waitms(1)
021c0     01 FA 05 F6 | 	mov	arg01, #1
021c4     1C 0A B0 FD | 	call	#__system___waitms
021c8                 | ' 
021c8                 | ' 
021c8                 | ' xzoom:=1<<(mode & 3)
021c8     02 0B 02 F6 | 	mov	local04, local01
021cc     03 0A 06 F5 | 	and	local04, #3
021d0     05 07 C2 F9 | 	decod	local02, local04
021d4     CC A6 05 F1 | 	add	objptr, #204
021d8     D3 06 62 FC | 	wrlong	local02, objptr
021dc                 | ' 
021dc                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
021dc     03 0B 02 F6 | 	mov	local04, local02
021e0     CC A6 85 F1 | 	sub	objptr, #204
021e4     08 0A 0E F2 | 	cmp	local04, #8 wz
021e8     24 00 90 5D |  if_ne	jmp	#LR__0085
021ec     02 0D 02 F6 | 	mov	local05, local01
021f0     04 0C 46 F0 | 	shr	local05, #4
021f4     03 0C 06 F5 | 	and	local05, #3
021f8     03 0C 0E F2 | 	cmp	local05, #3 wz
021fc     10 00 90 AD |  if_e	jmp	#LR__0085
02200                 | '   xzoom:=4
02200     04 06 06 F6 | 	mov	local02, #4
02204     CC A6 05 F1 | 	add	objptr, #204
02208     D3 08 68 FC | 	wrlong	#4, objptr
0220c     CC A6 85 F1 | 	sub	objptr, #204
02210                 | LR__0085
02210                 | ' 
02210                 | ' yzoom:=1<<((mode>>2) & 3)
02210     02 0B 02 F6 | 	mov	local04, local01
02214     02 0A 46 F0 | 	shr	local04, #2
02218     03 0A 06 F5 | 	and	local04, #3
0221c     05 07 C2 F9 | 	decod	local02, local04
02220     D0 A6 05 F1 | 	add	objptr, #208
02224     D3 06 62 FC | 	wrlong	local02, objptr
02228                 | ' azoom:=xzoom*yzoom
02228     04 A6 85 F1 | 	sub	objptr, #4
0222c     D3 0A 02 FB | 	rdlong	local04, objptr
02230     04 A6 05 F1 | 	add	objptr, #4
02234     D3 0E 02 FB | 	rdlong	local06, objptr
02238     07 0B 02 FD | 	qmul	local04, local06
0223c     18 06 62 FD | 	getqx	local02
02240     04 A6 05 F1 | 	add	objptr, #4
02244     D3 06 62 FC | 	wrlong	local02, objptr
02248                 | ' 
02248                 | ' cpl:=timings[11]
02248     58 A6 85 F1 | 	sub	objptr, #88
0224c     D3 06 02 FB | 	rdlong	local02, objptr
02250     14 A6 05 F1 | 	add	objptr, #20
02254     D3 06 62 FC | 	wrlong	local02, objptr
02258     90 A6 85 F1 | 	sub	objptr, #144
0225c                 | ' if (mode<512)
0225c     01 00 00 FF 
02260     00 04 5E F2 | 	cmps	local01, ##512 wcz
02264     60 00 90 3D |  if_ae	jmp	#LR__0086
02268                 | '   lines:=(timings[12]>>4)+/yzoom
02268     80 A6 05 F1 | 	add	objptr, #128
0226c     D3 28 02 FB | 	rdlong	muldiva_, objptr
02270     04 28 46 F0 | 	shr	muldiva_, #4
02274     50 A6 05 F1 | 	add	objptr, #80
02278     D3 2A 02 FB | 	rdlong	muldivb_, objptr
0227c     D0 A6 85 F1 | 	sub	objptr, #208
02280     C2 00 A0 FD | 	call	#unsdivide_
02284     94 A6 05 F1 | 	add	objptr, #148
02288     D3 2A 62 FC | 	wrlong	muldivb_, objptr
0228c                 | '   if ((timings[12]>>4)+//yzoom) <>0
0228c     14 A6 85 F1 | 	sub	objptr, #20
02290     D3 28 02 FB | 	rdlong	muldiva_, objptr
02294     04 28 46 F0 | 	shr	muldiva_, #4
02298     50 A6 05 F1 | 	add	objptr, #80
0229c     D3 2A 02 FB | 	rdlong	muldivb_, objptr
022a0     D0 A6 85 F1 | 	sub	objptr, #208
022a4     C2 00 A0 FD | 	call	#unsdivide_
022a8     00 28 0E F2 | 	cmp	muldiva_, #0 wz
022ac     AC 00 90 AD |  if_e	jmp	#LR__0089
022b0                 | '     lines +=1
022b0     94 A6 05 F1 | 	add	objptr, #148
022b4     D3 06 02 FB | 	rdlong	local02, objptr
022b8     01 06 06 F1 | 	add	local02, #1
022bc     D3 06 62 FC | 	wrlong	local02, objptr
022c0     94 A6 85 F1 | 	sub	objptr, #148
022c4                 | ' 
022c4                 | ' else
022c4     94 00 90 FD | 	jmp	#LR__0089
022c8                 | LR__0086
022c8                 | '   lines:=timings[12]/yzoom
022c8     80 A6 05 F1 | 	add	objptr, #128
022cc     D3 28 02 FB | 	rdlong	muldiva_, objptr
022d0     50 A6 05 F1 | 	add	objptr, #80
022d4     D3 2A 02 FB | 	rdlong	muldivb_, objptr
022d8     D0 A6 85 F1 | 	sub	objptr, #208
022dc     C6 00 A0 FD | 	call	#divide_
022e0     94 A6 05 F1 | 	add	objptr, #148
022e4     D3 2A 62 FC | 	wrlong	muldivb_, objptr
022e8                 | '   if cpl//xzoom==0
022e8     04 A6 85 F1 | 	sub	objptr, #4
022ec     D3 28 02 FB | 	rdlong	muldiva_, objptr
022f0     3C A6 05 F1 | 	add	objptr, #60
022f4     D3 2A 02 FB | 	rdlong	muldivb_, objptr
022f8     CC A6 85 F1 | 	sub	objptr, #204
022fc     C6 00 A0 FD | 	call	#divide_
02300     00 28 0E F2 | 	cmp	muldiva_, #0 wz
02304     28 00 90 5D |  if_ne	jmp	#LR__0087
02308                 | '     cpl:=cpl/xzoom
02308     90 A6 05 F1 | 	add	objptr, #144
0230c     D3 28 02 FB | 	rdlong	muldiva_, objptr
02310     3C A6 05 F1 | 	add	objptr, #60
02314     D3 2A 02 FB | 	rdlong	muldivb_, objptr
02318     CC A6 85 F1 | 	sub	objptr, #204
0231c     C6 00 A0 FD | 	call	#divide_
02320     90 A6 05 F1 | 	add	objptr, #144
02324     D3 2A 62 FC | 	wrlong	muldivb_, objptr
02328     90 A6 85 F1 | 	sub	objptr, #144
0232c                 | '   else
0232c     2C 00 90 FD | 	jmp	#LR__0088
02330                 | LR__0087
02330                 | '     cpl:=cpl/xzoom+1
02330     90 A6 05 F1 | 	add	objptr, #144
02334     D3 28 02 FB | 	rdlong	muldiva_, objptr
02338     3C A6 05 F1 | 	add	objptr, #60
0233c     D3 2A 02 FB | 	rdlong	muldivb_, objptr
02340     CC A6 85 F1 | 	sub	objptr, #204
02344     C6 00 A0 FD | 	call	#divide_
02348     15 07 02 F6 | 	mov	local02, muldivb_
0234c     01 06 06 F1 | 	add	local02, #1
02350     90 A6 05 F1 | 	add	objptr, #144
02354     D3 06 62 FC | 	wrlong	local02, objptr
02358     90 A6 85 F1 | 	sub	objptr, #144
0235c                 | LR__0088
0235c                 | LR__0089
0235c                 | ' 
0235c                 | ' buflen:=(cpl*lines)
0235c     90 A6 05 F1 | 	add	objptr, #144
02360     D3 0A 02 FB | 	rdlong	local04, objptr
02364     04 A6 05 F1 | 	add	objptr, #4
02368     D3 0E 02 FB | 	rdlong	local06, objptr
0236c     07 0B 02 FD | 	qmul	local04, local06
02370     18 06 62 FD | 	getqx	local02
02374     64 A6 85 F1 | 	sub	objptr, #100
02378     D3 06 62 FC | 	wrlong	local02, objptr
0237c                 | ' buf_ptr:=$80000-4*buflen
0237c     03 0B 02 F6 | 	mov	local04, local02
02380     30 A6 85 F1 | 	sub	objptr, #48
02384     02 0A 66 F0 | 	shl	local04, #2
02388     13 06 C6 F9 | 	decod	local02, #19
0238c     05 07 82 F1 | 	sub	local02, local04
02390     D3 06 62 FC | 	wrlong	local02, objptr
02394                 | ' mode_ptr:=@timings
02394     50 A6 05 F1 | 	add	objptr, #80
02398     D3 06 02 F6 | 	mov	local02, objptr
0239c     3C A6 85 F1 | 	sub	objptr, #60
023a0     D3 06 62 FC | 	wrlong	local02, objptr
023a4                 | ' graphmode:=mode
023a4     B0 A6 05 F1 | 	add	objptr, #176
023a8     D3 04 62 FC | 	wrlong	local01, objptr
023ac     C4 A6 85 F1 | 	sub	objptr, #196
023b0                 | ' makedl(mode)
023b0     02 FB 01 F6 | 	mov	arg01, local01
023b4     0C 00 B0 FD | 	call	#_makedl
023b8                 | LR__0090
023b8     AF F0 03 F6 | 	mov	ptra, fp
023bc     BA 00 A0 FD | 	call	#popregs_
023c0                 | _setmode_ret
023c0     2D 00 64 FD | 	ret
023c4                 | 
023c4                 | ' 
023c4                 | ' 
023c4                 | ' 
023c4                 | ' 
023c4                 | ' '---------- Make a display list
023c4                 | ' 
023c4                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
023c4                 | _makedl
023c4                 | ' 
023c4                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
023c4                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
023c4                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
023c4                 | ' 
023c4                 | ' '   0 - display a up/down border line
023c4                 | ' 
023c4                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
023c4                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
023c4                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
023c4                 | ' '    nnnn - font line to display, 0..15
023c4                 | ' '    llllll - character line, determines the cursor Y position
023c4                 | ' 
023c4                 | ' 
023c4                 | ' if (mode &256==0)
023c4     00 FB CD F7 | 	test	arg01, #256 wz
023c8     1C 00 90 5D |  if_ne	jmp	#LR__0091
023cc                 | '   dl_ptr:=buf_ptr-4*576
023cc     D3 BA 01 FB | 	rdlong	_var01, objptr
023d0     04 00 00 FF 
023d4     00 BB 85 F1 | 	sub	_var01, ##2304
023d8     1C A6 05 F1 | 	add	objptr, #28
023dc     D3 BA 61 FC | 	wrlong	_var01, objptr
023e0     1C A6 85 F1 | 	sub	objptr, #28
023e4                 | ' else
023e4     18 00 90 FD | 	jmp	#LR__0092
023e8                 | LR__0091
023e8                 | '   dl_ptr:=buf_ptr-4*496
023e8     D3 BA 01 FB | 	rdlong	_var01, objptr
023ec     03 00 00 FF 
023f0     C0 BB 85 F1 | 	sub	_var01, ##1984
023f4     1C A6 05 F1 | 	add	objptr, #28
023f8     D3 BA 61 FC | 	wrlong	_var01, objptr
023fc     1C A6 85 F1 | 	sub	objptr, #28
02400                 | LR__0092
02400                 | '  ' dl_ptr:=buf_ptr-4*540
02400                 | ' 
02400                 | ' vzoom:=((mode>>2) & 3)
02400     FD BC 01 F6 | 	mov	_var02, arg01
02404     02 BC 45 F0 | 	shr	_var02, #2
02408     03 BC 05 F5 | 	and	_var02, #3
0240c                 | ' 
0240c                 | ' 
0240c                 | ' if mode<512 '' text modes
0240c     01 00 00 FF 
02410     00 FA 5D F2 | 	cmps	arg01, ##512 wcz
02414     E8 01 90 3D |  if_ae	jmp	#LR__0100
02418                 | ' 
02418                 | '   if timings[6]>0 'borders
02418     68 A6 05 F1 | 	add	objptr, #104
0241c     D3 BA 01 FB | 	rdlong	_var01, objptr
02420     68 A6 85 F1 | 	sub	objptr, #104
02424     00 BA 5D F2 | 	cmps	_var01, #0 wcz
02428     D4 00 90 ED |  if_be	jmp	#LR__0097
0242c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
0242c     00 BE 05 F6 | 	mov	_var03, #0
02430     68 A6 05 F1 | 	add	objptr, #104
02434     D3 C0 01 FB | 	rdlong	_var04, objptr
02438     68 A6 85 F1 | 	sub	objptr, #104
0243c     01 C0 85 F1 | 	sub	_var04, #1
02440     00 C0 5D F2 | 	cmps	_var04, #0 wcz
02444     01 C2 05 16 |  if_a	mov	_var05, #1
02448     01 C2 65 E6 |  if_be	neg	_var05, #1
0244c     E1 C4 01 F6 | 	mov	_var06, _var05
02450     E1 C0 01 F1 | 	add	_var04, _var05
02454     D0 DB 9F FE | 	loc	pa,	#(@LR__0094-@LR__0093)
02458     93 00 A0 FD | 	call	#FCACHE_LOAD_
0245c                 | LR__0093
0245c                 | '       long[dl_ptr+4*i]:=$0
0245c     1C A6 05 F1 | 	add	objptr, #28
02460     D3 C6 01 FB | 	rdlong	_var07, objptr
02464     1C A6 85 F1 | 	sub	objptr, #28
02468     DF C8 01 F6 | 	mov	_var08, _var03
0246c     02 C8 65 F0 | 	shl	_var08, #2
02470     E4 C6 01 F1 | 	add	_var07, _var08
02474     E3 00 68 FC | 	wrlong	#0, _var07
02478     E2 BE 01 F1 | 	add	_var03, _var06
0247c     E0 BE 09 F2 | 	cmp	_var03, _var04 wz
02480     D8 FF 9F 5D |  if_ne	jmp	#LR__0093
02484                 | LR__0094
02484                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02484     68 A6 05 F1 | 	add	objptr, #104
02488     D3 BE 01 FB | 	rdlong	_var03, objptr
0248c     18 A6 05 F1 | 	add	objptr, #24
02490     D3 C2 01 FB | 	rdlong	_var05, objptr
02494     E1 BE 01 F1 | 	add	_var03, _var05
02498     0C A6 05 F1 | 	add	objptr, #12
0249c     D3 CA 01 FB | 	rdlong	_var09, objptr
024a0     01 CA 85 F1 | 	sub	_var09, #1
024a4     24 A6 85 F1 | 	sub	objptr, #36
024a8     D3 CC 01 FB | 	rdlong	_var10, objptr
024ac     18 A6 05 F1 | 	add	objptr, #24
024b0     D3 CE 01 FB | 	rdlong	_var11, objptr
024b4     80 A6 85 F1 | 	sub	objptr, #128
024b8     E7 CC 01 F1 | 	add	_var10, _var11
024bc     E6 CA 59 F2 | 	cmps	_var09, _var10 wcz
024c0     01 C8 05 16 |  if_a	mov	_var08, #1
024c4     01 C8 65 E6 |  if_be	neg	_var08, #1
024c8     E4 D0 01 F6 | 	mov	_var12, _var08
024cc     E4 CA 01 F1 | 	add	_var09, _var08
024d0     54 DB 9F FE | 	loc	pa,	#(@LR__0096-@LR__0095)
024d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
024d8                 | LR__0095
024d8                 | '       long[dl_ptr+4*i]:=$0
024d8     1C A6 05 F1 | 	add	objptr, #28
024dc     D3 D2 01 FB | 	rdlong	_var13, objptr
024e0     1C A6 85 F1 | 	sub	objptr, #28
024e4     DF D4 01 F6 | 	mov	_var14, _var03
024e8     02 D4 65 F0 | 	shl	_var14, #2
024ec     EA D2 01 F1 | 	add	_var13, _var14
024f0     E9 00 68 FC | 	wrlong	#0, _var13
024f4     E8 BE 01 F1 | 	add	_var03, _var12
024f8     E5 BE 09 F2 | 	cmp	_var03, _var09 wz
024fc     D8 FF 9F 5D |  if_ne	jmp	#LR__0095
02500                 | LR__0096
02500                 | LR__0097
02500                 | '   lpc:=16<<vzoom
02500     10 D6 05 F6 | 	mov	_var15, #16
02504     DE D6 61 F0 | 	shl	_var15, _var02
02508                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02508     68 A6 05 F1 | 	add	objptr, #104
0250c     D3 BE 01 FB | 	rdlong	_var03, objptr
02510     DF D8 01 F6 | 	mov	_var16, _var03
02514     18 A6 05 F1 | 	add	objptr, #24
02518     D3 DA 01 FB | 	rdlong	_var17, objptr
0251c     ED D8 01 F1 | 	add	_var16, _var17
02520     01 D8 85 F1 | 	sub	_var16, #1
02524     18 A6 85 F1 | 	sub	objptr, #24
02528     D3 C8 01 FB | 	rdlong	_var08, objptr
0252c     68 A6 85 F1 | 	sub	objptr, #104
02530     E4 D8 59 F2 | 	cmps	_var16, _var08 wcz
02534     01 DC 05 16 |  if_a	mov	_var18, #1
02538     01 DC 65 E6 |  if_be	neg	_var18, #1
0253c     EE DE 01 F6 | 	mov	_var19, _var18
02540     EE D8 01 F1 | 	add	_var16, _var18
02544     6C DB 9F FE | 	loc	pa,	#(@LR__0099-@LR__0098)
02548     93 00 A0 FD | 	call	#FCACHE_LOAD_
0254c                 | LR__0098
0254c                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
0254c     DF 28 02 F6 | 	mov	muldiva_, _var03
02550     68 A6 05 F1 | 	add	objptr, #104
02554     D3 E0 01 FB | 	rdlong	_var20, objptr
02558     68 A6 85 F1 | 	sub	objptr, #104
0255c     F0 28 82 F1 | 	sub	muldiva_, _var20
02560     EB 2A 02 F6 | 	mov	muldivb_, _var15
02564     C2 00 A0 FD | 	call	#unsdivide_
02568     DE 28 42 F0 | 	shr	muldiva_, _var02
0256c     14 E3 01 F6 | 	mov	_var21, muldiva_
02570                 | '     charline:=(i-timings[6])+/lpc
02570     DF 28 02 F6 | 	mov	muldiva_, _var03
02574     68 A6 05 F1 | 	add	objptr, #104
02578     D3 E4 01 FB | 	rdlong	_var22, objptr
0257c     68 A6 85 F1 | 	sub	objptr, #104
02580     F2 28 82 F1 | 	sub	muldiva_, _var22
02584     EB 2A 02 F6 | 	mov	muldivb_, _var15
02588     C2 00 A0 FD | 	call	#unsdivide_
0258c     15 E7 01 F6 | 	mov	_var23, muldivb_
02590                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
02590     D3 CE 01 FB | 	rdlong	_var11, objptr
02594     90 A6 05 F1 | 	add	objptr, #144
02598     D3 E0 01 FB | 	rdlong	_var20, objptr
0259c     F3 E0 01 FD | 	qmul	_var20, _var23
025a0     18 E8 61 FD | 	getqx	_var24
025a4     02 E8 65 F0 | 	shl	_var24, #2
025a8     F4 CE 01 F1 | 	add	_var11, _var24
025ac     FD D4 01 F6 | 	mov	_var14, arg01
025b0     03 D4 05 F5 | 	and	_var14, #3
025b4     EA CE 01 F1 | 	add	_var11, _var14
025b8                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
025b8     0C CE 65 F0 | 	shl	_var11, #12
025bc     F1 E4 01 F6 | 	mov	_var22, _var21
025c0     08 E4 65 F0 | 	shl	_var22, #8
025c4     F2 CE 01 F1 | 	add	_var11, _var22
025c8     F3 E0 01 F6 | 	mov	_var20, _var23
025cc     02 E0 65 F0 | 	shl	_var20, #2
025d0     F0 CE 01 F1 | 	add	_var11, _var20
025d4     01 CE 05 F1 | 	add	_var11, #1
025d8     74 A6 85 F1 | 	sub	objptr, #116
025dc     D3 D2 01 FB | 	rdlong	_var13, objptr
025e0     1C A6 85 F1 | 	sub	objptr, #28
025e4     DF D4 01 F6 | 	mov	_var14, _var03
025e8     02 D4 65 F0 | 	shl	_var14, #2
025ec     EA D2 01 F1 | 	add	_var13, _var14
025f0     E9 CE 61 FC | 	wrlong	_var11, _var13
025f4     EF BE 01 F1 | 	add	_var03, _var19
025f8     EC BE 09 F2 | 	cmp	_var03, _var16 wz
025fc     4C FF 9F 5D |  if_ne	jmp	#LR__0098
02600                 | LR__0099
02600                 | LR__0100
02600                 | ' 
02600                 | ' 
02600                 | ' 
02600                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
02600     01 00 00 FF 
02604     00 FA 5D F2 | 	cmps	arg01, ##512 wcz
02608     A8 01 90 CD |  if_b	jmp	#LR__0108
0260c                 | ' 
0260c                 | '   if timings[6]>0 'borders
0260c     68 A6 05 F1 | 	add	objptr, #104
02610     D3 BA 01 FB | 	rdlong	_var01, objptr
02614     68 A6 85 F1 | 	sub	objptr, #104
02618     00 BA 5D F2 | 	cmps	_var01, #0 wcz
0261c     D4 00 90 ED |  if_be	jmp	#LR__0105
02620                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02620     00 BE 05 F6 | 	mov	_var03, #0
02624     68 A6 05 F1 | 	add	objptr, #104
02628     D3 EA 01 FB | 	rdlong	_var25, objptr
0262c     68 A6 85 F1 | 	sub	objptr, #104
02630     01 EA 85 F1 | 	sub	_var25, #1
02634     00 EA 5D F2 | 	cmps	_var25, #0 wcz
02638     01 C2 05 16 |  if_a	mov	_var05, #1
0263c     01 C2 65 E6 |  if_be	neg	_var05, #1
02640     E1 EC 01 F6 | 	mov	_var26, _var05
02644     E1 EA 01 F1 | 	add	_var25, _var05
02648     DC D9 9F FE | 	loc	pa,	#(@LR__0102-@LR__0101)
0264c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02650                 | LR__0101
02650                 | '       long[dl_ptr+4*i]:=$0
02650     1C A6 05 F1 | 	add	objptr, #28
02654     D3 C6 01 FB | 	rdlong	_var07, objptr
02658     1C A6 85 F1 | 	sub	objptr, #28
0265c     DF C8 01 F6 | 	mov	_var08, _var03
02660     02 C8 65 F0 | 	shl	_var08, #2
02664     E4 C6 01 F1 | 	add	_var07, _var08
02668     E3 00 68 FC | 	wrlong	#0, _var07
0266c     F6 BE 01 F1 | 	add	_var03, _var26
02670     F5 BE 09 F2 | 	cmp	_var03, _var25 wz
02674     D8 FF 9F 5D |  if_ne	jmp	#LR__0101
02678                 | LR__0102
02678                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02678     68 A6 05 F1 | 	add	objptr, #104
0267c     D3 BE 01 FB | 	rdlong	_var03, objptr
02680     18 A6 05 F1 | 	add	objptr, #24
02684     D3 C2 01 FB | 	rdlong	_var05, objptr
02688     E1 BE 01 F1 | 	add	_var03, _var05
0268c     0C A6 05 F1 | 	add	objptr, #12
02690     D3 EE 01 FB | 	rdlong	_var27, objptr
02694     01 EE 85 F1 | 	sub	_var27, #1
02698     24 A6 85 F1 | 	sub	objptr, #36
0269c     D3 CC 01 FB | 	rdlong	_var10, objptr
026a0     18 A6 05 F1 | 	add	objptr, #24
026a4     D3 CE 01 FB | 	rdlong	_var11, objptr
026a8     80 A6 85 F1 | 	sub	objptr, #128
026ac     E7 CC 01 F1 | 	add	_var10, _var11
026b0     E6 EE 59 F2 | 	cmps	_var27, _var10 wcz
026b4     01 C8 05 16 |  if_a	mov	_var08, #1
026b8     01 C8 65 E6 |  if_be	neg	_var08, #1
026bc     E4 F0 01 F6 | 	mov	_var28, _var08
026c0     E4 EE 01 F1 | 	add	_var27, _var08
026c4     60 D9 9F FE | 	loc	pa,	#(@LR__0104-@LR__0103)
026c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
026cc                 | LR__0103
026cc                 | '       long[dl_ptr+4*i]:=$0
026cc     1C A6 05 F1 | 	add	objptr, #28
026d0     D3 D2 01 FB | 	rdlong	_var13, objptr
026d4     1C A6 85 F1 | 	sub	objptr, #28
026d8     DF D4 01 F6 | 	mov	_var14, _var03
026dc     02 D4 65 F0 | 	shl	_var14, #2
026e0     EA D2 01 F1 | 	add	_var13, _var14
026e4     E9 00 68 FC | 	wrlong	#0, _var13
026e8     F8 BE 01 F1 | 	add	_var03, _var28
026ec     F7 BE 09 F2 | 	cmp	_var03, _var27 wz
026f0     D8 FF 9F 5D |  if_ne	jmp	#LR__0103
026f4                 | LR__0104
026f4                 | LR__0105
026f4                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
026f4     68 A6 05 F1 | 	add	objptr, #104
026f8     D3 BE 01 FB | 	rdlong	_var03, objptr
026fc     DF F2 01 F6 | 	mov	_var29, _var03
02700     18 A6 05 F1 | 	add	objptr, #24
02704     D3 DA 01 FB | 	rdlong	_var17, objptr
02708     ED F2 01 F1 | 	add	_var29, _var17
0270c     01 F2 85 F1 | 	sub	_var29, #1
02710     18 A6 85 F1 | 	sub	objptr, #24
02714     D3 C8 01 FB | 	rdlong	_var08, objptr
02718     68 A6 85 F1 | 	sub	objptr, #104
0271c     E4 F2 59 F2 | 	cmps	_var29, _var08 wcz
02720     01 DC 05 16 |  if_a	mov	_var18, #1
02724     01 DC 65 E6 |  if_be	neg	_var18, #1
02728     EE F4 01 F6 | 	mov	_var30, _var18
0272c     EE F2 01 F1 | 	add	_var29, _var18
02730     48 D9 9F FE | 	loc	pa,	#(@LR__0107-@LR__0106)
02734     93 00 A0 FD | 	call	#FCACHE_LOAD_
02738                 | LR__0106
02738                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
02738     D3 CE 01 FB | 	rdlong	_var11, objptr
0273c     DF E4 01 F6 | 	mov	_var22, _var03
02740     68 A6 05 F1 | 	add	objptr, #104
02744     D3 E0 01 FB | 	rdlong	_var20, objptr
02748     F0 E4 81 F1 | 	sub	_var22, _var20
0274c     DE E4 41 F0 | 	shr	_var22, _var02
02750     28 A6 05 F1 | 	add	objptr, #40
02754     D3 D4 01 FB | 	rdlong	_var14, objptr
02758     F2 D4 01 FD | 	qmul	_var14, _var22
0275c     18 F6 61 FD | 	getqx	_var31
02760     02 F6 65 F0 | 	shl	_var31, #2
02764     FB CE 01 F1 | 	add	_var11, _var31
02768     FD F8 01 F6 | 	mov	_var32, arg01
0276c     03 F8 05 F5 | 	and	_var32, #3
02770     FC CE 01 F1 | 	add	_var11, _var32
02774                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
02774     0C CE 65 F0 | 	shl	_var11, #12
02778     02 CE 05 F1 | 	add	_var11, #2
0277c     FD E4 01 F6 | 	mov	_var22, arg01
02780     30 E4 05 F5 | 	and	_var22, #48
02784     02 E4 45 F0 | 	shr	_var22, #2
02788     F2 CE 01 F1 | 	add	_var11, _var22
0278c     74 A6 85 F1 | 	sub	objptr, #116
02790     D3 E0 01 FB | 	rdlong	_var20, objptr
02794     1C A6 85 F1 | 	sub	objptr, #28
02798     DF E8 01 F6 | 	mov	_var24, _var03
0279c     02 E8 65 F0 | 	shl	_var24, #2
027a0     F4 E0 01 F1 | 	add	_var20, _var24
027a4     F0 CE 61 FC | 	wrlong	_var11, _var20
027a8     FA BE 01 F1 | 	add	_var03, _var30
027ac     F9 BE 09 F2 | 	cmp	_var03, _var29 wz
027b0     84 FF 9F 5D |  if_ne	jmp	#LR__0106
027b4                 | LR__0107
027b4                 | LR__0108
027b4                 | _makedl_ret
027b4     2D 00 64 FD | 	ret
027b8                 | 
027b8                 | '       
027b8                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
027b8                 | ' 
027b8                 | ' pub start(mode,base):result
027b8                 | _start
027b8     02 5A 05 F6 | 	mov	COUNT_, #2
027bc     B0 00 A0 FD | 	call	#pushregs_
027c0     FD 04 02 F6 | 	mov	local01, arg01
027c4                 | ' 
027c4                 | ' ' initialize pointers and variables
027c4                 | ' 
027c4                 | ' border_ptr:=@bordercolor
027c4     2C A6 05 F1 | 	add	objptr, #44
027c8     D3 06 02 F6 | 	mov	local02, objptr
027cc     24 A6 85 F1 | 	sub	objptr, #36
027d0     D3 06 62 FC | 	wrlong	local02, objptr
027d4                 | ' font_ptr:=@st_font
027d4     08 00 00 FF 
027d8     00 AA 05 F1 | 	add	ptr__dat__, ##4096
027dc     04 A6 85 F1 | 	sub	objptr, #4
027e0     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
027e4                 | ' hdmibase:=base
027e4     20 A6 05 F1 | 	add	objptr, #32
027e8     D3 FC 61 FC | 	wrlong	arg02, objptr
027ec     24 A6 85 F1 | 	sub	objptr, #36
027f0                 | ' p1:=@putpixel1
027f0     D3 FA 01 F6 | 	mov	arg01, objptr
027f4     D6 FC 01 F6 | 	mov	arg02, ptr__putpixel1_
027f8     08 00 00 FF 
027fc     00 AA 85 F1 | 	sub	ptr__dat__, ##4096
02800     1C 03 B0 FD | 	call	#__system___make_methodptr
02804     DC A6 05 F1 | 	add	objptr, #220
02808     D3 B6 61 FC | 	wrlong	result1, objptr
0280c     DC A6 85 F1 | 	sub	objptr, #220
02810                 | ' p2:=@putpixel2
02810     D3 FA 01 F6 | 	mov	arg01, objptr
02814     D7 FC 01 F6 | 	mov	arg02, ptr__putpixel2_
02818     04 03 B0 FD | 	call	#__system___make_methodptr
0281c     E0 A6 05 F1 | 	add	objptr, #224
02820     D3 B6 61 FC | 	wrlong	result1, objptr
02824     E0 A6 85 F1 | 	sub	objptr, #224
02828                 | ' p4:=@putpixel4
02828     D3 FA 01 F6 | 	mov	arg01, objptr
0282c     D8 FC 01 F6 | 	mov	arg02, ptr__putpixel4_
02830     EC 02 B0 FD | 	call	#__system___make_methodptr
02834     E4 A6 05 F1 | 	add	objptr, #228
02838     D3 B6 61 FC | 	wrlong	result1, objptr
0283c     E4 A6 85 F1 | 	sub	objptr, #228
02840                 | ' p8:=@putpixel8
02840     D3 FA 01 F6 | 	mov	arg01, objptr
02844     D9 FC 01 F6 | 	mov	arg02, ptr__putpixel8_
02848     D4 02 B0 FD | 	call	#__system___make_methodptr
0284c     E8 A6 05 F1 | 	add	objptr, #232
02850     D3 B6 61 FC | 	wrlong	result1, objptr
02854     E8 A6 85 F1 | 	sub	objptr, #232
02858                 | ' 
02858                 | ' 
02858                 | ' ' the mode has to be set here to enable computing the buffer length
02858                 | ' 
02858                 | ' setmode(mode)
02858     02 FB 01 F6 | 	mov	arg01, local01
0285c     80 F5 BF FD | 	call	#_setmode
02860                 | ' 
02860                 | ' vblank_ptr:=@vblank
02860     40 A6 05 F1 | 	add	objptr, #64
02864     D3 06 02 F6 | 	mov	local02, objptr
02868     34 A6 85 F1 | 	sub	objptr, #52
0286c     D3 06 62 FC | 	wrlong	local02, objptr
02870                 | ' cursor_ptr:=@cursor_x
02870     28 A6 05 F1 | 	add	objptr, #40
02874     D3 06 02 F6 | 	mov	local02, objptr
02878     24 A6 85 F1 | 	sub	objptr, #36
0287c     D3 06 62 FC | 	wrlong	local02, objptr
02880                 | ' 
02880                 | ' fontnum_ptr:=@fontnum
02880     88 A6 05 F1 | 	add	objptr, #136
02884     D3 06 02 F6 | 	mov	local02, objptr
02888     78 A6 85 F1 | 	sub	objptr, #120
0288c     D3 06 62 FC | 	wrlong	local02, objptr
02890                 | ' 
02890                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
02890     78 A6 05 F1 | 	add	objptr, #120
02894     D3 00 68 FC | 	wrlong	#0, objptr
02898                 | ' bytemove(@colors,@vgacolors,16)
02898     1C A6 05 F1 | 	add	objptr, #28
0289c     D3 FA 01 F6 | 	mov	arg01, objptr
028a0     B4 A6 85 F1 | 	sub	objptr, #180
028a4     0F 00 00 FF 
028a8     58 AA 05 F1 | 	add	ptr__dat__, ##7768
028ac     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
028b0     0F 00 00 FF 
028b4     58 AA 85 F1 | 	sub	ptr__dat__, ##7768
028b8     10 FE 05 F6 | 	mov	arg03, #16
028bc     30 01 B0 FD | 	call	#__system____builtin_memmove
028c0                 | ' 
028c0                 | ' ' initialize a cursor
028c0                 | ' 
028c0                 | ' cursor_x:=0
028c0     34 A6 05 F1 | 	add	objptr, #52
028c4     D3 00 48 FC | 	wrbyte	#0, objptr
028c8                 | ' cursor_y:=0
028c8     01 A6 05 F1 | 	add	objptr, #1
028cc     D3 00 48 FC | 	wrbyte	#0, objptr
028d0                 | ' cursor_sh:=14
028d0     01 A6 05 F1 | 	add	objptr, #1
028d4     D3 1C 48 FC | 	wrbyte	#14, objptr
028d8     36 A6 85 F1 | 	sub	objptr, #54
028dc                 | ' 
028dc                 | ' 
028dc                 | ' ' start the cog
028dc                 | ' 
028dc                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
028dc     0F 00 00 FF 
028e0     68 AA 05 F1 | 	add	ptr__dat__, ##7784
028e4     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
028e8     0F 00 00 FF 
028ec     68 AA 85 F1 | 	sub	ptr__dat__, ##7784
028f0     D3 FE 01 F6 | 	mov	arg03, objptr
028f4     10 FA 05 F6 | 	mov	arg01, #16
028f8     28 FE 61 FD | 	setq	arg03
028fc     FE FA F1 FC | 	coginit	arg01, arg02 wc
02900     01 FA 65 C6 |  if_b	neg	arg01, #1
02904     FD B6 01 F6 | 	mov	result1, arg01
02908     28 A6 05 F1 | 	add	objptr, #40
0290c     D3 B6 61 FC | 	wrlong	result1, objptr
02910     28 A6 85 F1 | 	sub	objptr, #40
02914                 | ' waitms(20)
02914     14 FA 05 F6 | 	mov	arg01, #20
02918     C8 02 B0 FD | 	call	#__system___waitms
0291c                 | ' 
0291c                 | ' ' clear the screen and set the colors to green on black
0291c                 | ' 
0291c                 | ' cls(c_green,c_black)
0291c     C7 FA 05 F6 | 	mov	arg01, #199
02920     00 FC 05 F6 | 	mov	arg02, #0
02924     6C F2 BF FD | 	call	#_cls
02928                 | ' setbordercolor(0,0,128)
02928     00 FA 05 F6 | 	mov	arg01, #0
0292c     00 FC 05 F6 | 	mov	arg02, #0
02930     80 FE 05 F6 | 	mov	arg03, #128
02934     38 F2 BF FD | 	call	#_setbordercolor
02938                 | ' setwritecolors(c_green,c_black)
02938                 | ' 
02938                 | ' 
02938                 | ' write_color:=ff
02938     38 A6 05 F1 | 	add	objptr, #56
0293c     D3 8E 69 FC | 	wrlong	#199, objptr
02940                 | ' write_background:=bb
02940     04 A6 05 F1 | 	add	objptr, #4
02944     D3 00 68 FC | 	wrlong	#0, objptr
02948                 | ' 
02948                 | ' return cog
02948     14 A6 85 F1 | 	sub	objptr, #20
0294c     D3 B6 01 FB | 	rdlong	result1, objptr
02950     28 A6 85 F1 | 	sub	objptr, #40
02954     AF F0 03 F6 | 	mov	ptra, fp
02958     BA 00 A0 FD | 	call	#popregs_
0295c                 | _start_ret
0295c     2D 00 64 FD | 	ret
02960                 | hubexit
02960     81 00 80 FD | 	jmp	#cogexit
02964                 | 
02964                 | __system___setbaud
02964     14 28 06 FB | 	rdlong	muldiva_, #20
02968     FD 2A 02 F6 | 	mov	muldivb_, arg01
0296c     C6 00 A0 FD | 	call	#divide_
02970     40 7C 64 FD | 	dirl	#62
02974     40 7E 64 FD | 	dirl	#63
02978     D4 2A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
0297c     10 2A 66 F0 | 	shl	muldivb_, #16
02980     07 FC 05 F6 | 	mov	arg02, #7
02984     15 FD 01 F1 | 	add	arg02, muldivb_
02988     3E F8 0C FC | 	wrpin	#124, #62
0298c     3E FC 15 FC | 	wxpin	arg02, #62
02990     3F 7C 0C FC | 	wrpin	#62, #63
02994     14 FC 05 F1 | 	add	arg02, #20
02998     3F FC 15 FC | 	wxpin	arg02, #63
0299c     41 7C 64 FD | 	dirh	#62
029a0     41 7E 64 FD | 	dirh	#63
029a4                 | __system___setbaud_ret
029a4     2D 00 64 FD | 	ret
029a8                 | 
029a8                 | __system___txraw
029a8     02 5A 05 F6 | 	mov	COUNT_, #2
029ac     B0 00 A0 FD | 	call	#pushregs_
029b0     FD 04 02 F6 | 	mov	local01, arg01
029b4     D4 06 0A FB | 	rdlong	local02, ptr___system__dat__ wz
029b8     0C 00 90 5D |  if_ne	jmp	#LR__0109
029bc     42 0F 00 FF 
029c0     80 FA 05 F6 | 	mov	arg01, ##2000000
029c4     9C FF BF FD | 	call	#__system___setbaud
029c8                 | LR__0109
029c8     3E 04 26 FC | 	wypin	local01, #62
029cc     1F 02 64 FD | 	waitx	#1
029d0     34 D6 9F FE | 	loc	pa,	#(@LR__0111-@LR__0110)
029d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
029d8                 | LR__0110
029d8     40 7C 74 FD | 	testp	#62 wc
029dc     F8 FF 9F 3D |  if_nc	jmp	#LR__0110
029e0                 | LR__0111
029e0     01 B6 05 F6 | 	mov	result1, #1
029e4     AF F0 03 F6 | 	mov	ptra, fp
029e8     BA 00 A0 FD | 	call	#popregs_
029ec                 | __system___txraw_ret
029ec     2D 00 64 FD | 	ret
029f0                 | 
029f0                 | __system____builtin_memmove
029f0     FD BA 01 F6 | 	mov	_var01, arg01
029f4     FE FA 59 F2 | 	cmps	arg01, arg02 wcz
029f8     50 00 90 3D |  if_ae	jmp	#LR__0119
029fc     20 D6 9F FE | 	loc	pa,	#(@LR__0113-@LR__0112)
02a00     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a04                 | LR__0112
02a04     03 FE 5D F2 | 	cmps	arg03, #3 wcz
02a08     18 00 90 ED |  if_be	jmp	#LR__0114
02a0c     FE BC 01 FB | 	rdlong	_var02, arg02
02a10     FD BC 61 FC | 	wrlong	_var02, arg01
02a14     04 FA 05 F1 | 	add	arg01, #4
02a18     04 FC 05 F1 | 	add	arg02, #4
02a1c     04 FE 85 F1 | 	sub	arg03, #4
02a20     E0 FF 9F FD | 	jmp	#LR__0112
02a24                 | LR__0113
02a24                 | LR__0114
02a24     FF BE 09 F6 | 	mov	_var03, arg03 wz
02a28     4C 00 90 AD |  if_e	jmp	#LR__0125
02a2c     E4 D5 9F FE | 	loc	pa,	#(@LR__0117-@LR__0115)
02a30     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a34                 | LR__0115
02a34     DF 08 D8 FC | 	rep	@LR__0118, _var03
02a38                 | LR__0116
02a38     FE BC C1 FA | 	rdbyte	_var02, arg02
02a3c     FD BC 41 FC | 	wrbyte	_var02, arg01
02a40     01 FA 05 F1 | 	add	arg01, #1
02a44     01 FC 05 F1 | 	add	arg02, #1
02a48                 | LR__0117
02a48                 | LR__0118
02a48     2C 00 90 FD | 	jmp	#LR__0125
02a4c                 | LR__0119
02a4c     FF FA 01 F1 | 	add	arg01, arg03
02a50     FF FC 01 F1 | 	add	arg02, arg03
02a54     FF C0 09 F6 | 	mov	_var04, arg03 wz
02a58     1C 00 90 AD |  if_e	jmp	#LR__0124
02a5c     B4 D5 9F FE | 	loc	pa,	#(@LR__0122-@LR__0120)
02a60     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a64                 | LR__0120
02a64     E0 08 D8 FC | 	rep	@LR__0123, _var04
02a68                 | LR__0121
02a68     01 FA 85 F1 | 	sub	arg01, #1
02a6c     01 FC 85 F1 | 	sub	arg02, #1
02a70     FE BC C1 FA | 	rdbyte	_var02, arg02
02a74     FD BC 41 FC | 	wrbyte	_var02, arg01
02a78                 | LR__0122
02a78                 | LR__0123
02a78                 | LR__0124
02a78                 | LR__0125
02a78     DD B6 01 F6 | 	mov	result1, _var01
02a7c                 | __system____builtin_memmove_ret
02a7c     2D 00 64 FD | 	ret
02a80                 | 
02a80                 | __system__longmove
02a80     FD BA 01 F6 | 	mov	_var01, arg01
02a84     FE FA 59 F2 | 	cmps	arg01, arg02 wcz
02a88     28 00 90 3D |  if_ae	jmp	#LR__0130
02a8c     FF BC 09 F6 | 	mov	_var02, arg03 wz
02a90     5C 00 90 AD |  if_e	jmp	#LR__0136
02a94     7C D5 9F FE | 	loc	pa,	#(@LR__0128-@LR__0126)
02a98     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a9c                 | LR__0126
02a9c     DE 08 D8 FC | 	rep	@LR__0129, _var02
02aa0                 | LR__0127
02aa0     FE BE 01 FB | 	rdlong	_var03, arg02
02aa4     FD BE 61 FC | 	wrlong	_var03, arg01
02aa8     04 FA 05 F1 | 	add	arg01, #4
02aac     04 FC 05 F1 | 	add	arg02, #4
02ab0                 | LR__0128
02ab0                 | LR__0129
02ab0     3C 00 90 FD | 	jmp	#LR__0136
02ab4                 | LR__0130
02ab4     FF C0 01 F6 | 	mov	_var04, arg03
02ab8     02 C0 65 F0 | 	shl	_var04, #2
02abc     E0 FA 01 F1 | 	add	arg01, _var04
02ac0     FF C0 01 F6 | 	mov	_var04, arg03
02ac4     02 C0 65 F0 | 	shl	_var04, #2
02ac8     E0 FC 01 F1 | 	add	arg02, _var04
02acc     FF C2 09 F6 | 	mov	_var05, arg03 wz
02ad0     1C 00 90 AD |  if_e	jmp	#LR__0135
02ad4     3C D5 9F FE | 	loc	pa,	#(@LR__0133-@LR__0131)
02ad8     93 00 A0 FD | 	call	#FCACHE_LOAD_
02adc                 | LR__0131
02adc     E1 08 D8 FC | 	rep	@LR__0134, _var05
02ae0                 | LR__0132
02ae0     04 FA 85 F1 | 	sub	arg01, #4
02ae4     04 FC 85 F1 | 	sub	arg02, #4
02ae8     FE BE 01 FB | 	rdlong	_var03, arg02
02aec     FD BE 61 FC | 	wrlong	_var03, arg01
02af0                 | LR__0133
02af0                 | LR__0134
02af0                 | LR__0135
02af0                 | LR__0136
02af0     DD B6 01 F6 | 	mov	result1, _var01
02af4                 | __system__longmove_ret
02af4     2D 00 64 FD | 	ret
02af8                 | 
02af8                 | __system____topofstack
02af8     00 5A 05 F6 | 	mov	COUNT_, #0
02afc     B0 00 A0 FD | 	call	#pushregs_
02b00     08 F0 07 F1 | 	add	ptra, #8
02b04     04 5E 05 F1 | 	add	fp, #4
02b08     AF FA 61 FC | 	wrlong	arg01, fp
02b0c     AF B6 01 F6 | 	mov	result1, fp
02b10     04 5E 85 F1 | 	sub	fp, #4
02b14     AF F0 03 F6 | 	mov	ptra, fp
02b18     BA 00 A0 FD | 	call	#popregs_
02b1c                 | __system____topofstack_ret
02b1c     2D 00 64 FD | 	ret
02b20                 | 
02b20                 | __system___make_methodptr
02b20     04 5A 05 F6 | 	mov	COUNT_, #4
02b24     B0 00 A0 FD | 	call	#pushregs_
02b28     FD 04 02 F6 | 	mov	local01, arg01
02b2c     FE 06 02 F6 | 	mov	local02, arg02
02b30     08 FA 05 F6 | 	mov	arg01, #8
02b34     6C 04 B0 FD | 	call	#__system___gc_alloc_managed
02b38     DB 08 0A F6 | 	mov	local03, result1 wz
02b3c     10 00 90 AD |  if_e	jmp	#LR__0137
02b40     04 05 62 FC | 	wrlong	local01, local03
02b44     04 0B 02 F6 | 	mov	local04, local03
02b48     04 0A 06 F1 | 	add	local04, #4
02b4c     05 07 62 FC | 	wrlong	local02, local04
02b50                 | LR__0137
02b50     04 B7 01 F6 | 	mov	result1, local03
02b54     AF F0 03 F6 | 	mov	ptra, fp
02b58     BA 00 A0 FD | 	call	#popregs_
02b5c                 | __system___make_methodptr_ret
02b5c     2D 00 64 FD | 	ret
02b60                 | 
02b60                 | __system___lockmem
02b60     02 5A 05 F6 | 	mov	COUNT_, #2
02b64     B0 00 A0 FD | 	call	#pushregs_
02b68     00 B6 05 F6 | 	mov	result1, #0
02b6c     01 B6 61 FD | 	cogid	result1
02b70     DB 04 02 F6 | 	mov	local01, result1
02b74     00 05 06 F1 | 	add	local01, #256
02b78                 | LR__0138
02b78     FD 06 0A FB | 	rdlong	local02, arg01 wz
02b7c     FD 04 62 AC |  if_e	wrlong	local01, arg01
02b80     FD 06 02 AB |  if_e	rdlong	local02, arg01
02b84     FD 06 02 AB |  if_e	rdlong	local02, arg01
02b88     02 07 0A F2 | 	cmp	local02, local01 wz
02b8c     E8 FF 9F 5D |  if_ne	jmp	#LR__0138
02b90     AF F0 03 F6 | 	mov	ptra, fp
02b94     BA 00 A0 FD | 	call	#popregs_
02b98                 | __system___lockmem_ret
02b98     2D 00 64 FD | 	ret
02b9c                 | 
02b9c                 | __system___tx
02b9c     03 5A 05 F6 | 	mov	COUNT_, #3
02ba0     B0 00 A0 FD | 	call	#pushregs_
02ba4     FD 04 02 F6 | 	mov	local01, arg01
02ba8     0A 04 0E F2 | 	cmp	local01, #10 wz
02bac     20 00 90 5D |  if_ne	jmp	#LR__0139
02bb0     08 A8 05 F1 | 	add	ptr___system__dat__, #8
02bb4     D4 06 02 FB | 	rdlong	local02, ptr___system__dat__
02bb8     08 A8 85 F1 | 	sub	ptr___system__dat__, #8
02bbc     03 09 02 F6 | 	mov	local03, local02
02bc0     02 08 0E F5 | 	and	local03, #2 wz
02bc4     08 00 90 AD |  if_e	jmp	#LR__0139
02bc8     0D FA 05 F6 | 	mov	arg01, #13
02bcc     D8 FD BF FD | 	call	#__system___txraw
02bd0                 | LR__0139
02bd0     02 FB 01 F6 | 	mov	arg01, local01
02bd4     D0 FD BF FD | 	call	#__system___txraw
02bd8     AF F0 03 F6 | 	mov	ptra, fp
02bdc     BA 00 A0 FD | 	call	#popregs_
02be0                 | __system___tx_ret
02be0     2D 00 64 FD | 	ret
02be4                 | 
02be4                 | __system___waitms
02be4     03 5A 05 F6 | 	mov	COUNT_, #3
02be8     B0 00 A0 FD | 	call	#pushregs_
02bec     FD 04 02 F6 | 	mov	local01, arg01
02bf0     14 06 06 FB | 	rdlong	local02, #20
02bf4     20 D4 9F FE | 	loc	pa,	#(@LR__0141-@LR__0140)
02bf8     93 00 A0 FD | 	call	#FCACHE_LOAD_
02bfc                 | LR__0140
02bfc     01 00 00 FF 
02c00     E8 05 5E F2 | 	cmps	local01, ##1000 wcz
02c04     1F 06 62 1D |  if_a	waitx	local02
02c08     01 00 00 1F 
02c0c     E8 05 86 11 |  if_a	sub	local01, ##1000
02c10     E8 FF 9F 1D |  if_a	jmp	#LR__0140
02c14                 | LR__0141
02c14     0C A8 05 F1 | 	add	ptr___system__dat__, #12
02c18     D4 08 0A FB | 	rdlong	local03, ptr___system__dat__ wz
02c1c     0C A8 85 F1 | 	sub	ptr___system__dat__, #12
02c20     20 00 90 5D |  if_ne	jmp	#LR__0142
02c24     03 29 02 F6 | 	mov	muldiva_, local02
02c28     01 00 00 FF 
02c2c     E8 2B 06 F6 | 	mov	muldivb_, ##1000
02c30     C2 00 A0 FD | 	call	#unsdivide_
02c34     15 09 02 F6 | 	mov	local03, muldivb_
02c38     0C A8 05 F1 | 	add	ptr___system__dat__, #12
02c3c     D4 2A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02c40     0C A8 85 F1 | 	sub	ptr___system__dat__, #12
02c44                 | LR__0142
02c44     00 04 5E F2 | 	cmps	local01, #0 wcz
02c48     04 05 02 1D |  if_a	qmul	local01, local03
02c4c     18 FA 61 1D |  if_a	getqx	arg01
02c50     1F FA 61 1D |  if_a	waitx	arg01
02c54     AF F0 03 F6 | 	mov	ptra, fp
02c58     BA 00 A0 FD | 	call	#popregs_
02c5c                 | __system___waitms_ret
02c5c     2D 00 64 FD | 	ret
02c60                 | 
02c60                 | __system___waitus
02c60     02 5A 05 F6 | 	mov	COUNT_, #2
02c64     B0 00 A0 FD | 	call	#pushregs_
02c68     FD 04 02 F6 | 	mov	local01, arg01
02c6c     10 A8 05 F1 | 	add	ptr___system__dat__, #16
02c70     D4 06 0A FB | 	rdlong	local02, ptr___system__dat__ wz
02c74     10 A8 85 F1 | 	sub	ptr___system__dat__, #16
02c78     20 00 90 5D |  if_ne	jmp	#LR__0143
02c7c     14 28 06 FB | 	rdlong	muldiva_, #20
02c80     A1 07 00 FF 
02c84     40 2A 06 F6 | 	mov	muldivb_, ##1000000
02c88     C2 00 A0 FD | 	call	#unsdivide_
02c8c     15 07 02 F6 | 	mov	local02, muldivb_
02c90     10 A8 05 F1 | 	add	ptr___system__dat__, #16
02c94     D4 2A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02c98     10 A8 85 F1 | 	sub	ptr___system__dat__, #16
02c9c                 | LR__0143
02c9c     03 05 02 FD | 	qmul	local01, local02
02ca0     18 FA 61 FD | 	getqx	arg01
02ca4     1F FA 61 FD | 	waitx	arg01
02ca8     AF F0 03 F6 | 	mov	ptra, fp
02cac     BA 00 A0 FD | 	call	#popregs_
02cb0                 | __system___waitus_ret
02cb0     2D 00 64 FD | 	ret
02cb4                 | 
02cb4                 | __system___gc_ptrs
02cb4     04 5A 05 F6 | 	mov	COUNT_, #4
02cb8     B0 00 A0 FD | 	call	#pushregs_
02cbc     D0 04 02 F6 | 	mov	local01, __heap_ptr
02cc0     02 07 02 F6 | 	mov	local02, local01
02cc4     07 00 00 FF 
02cc8     F8 07 06 F1 | 	add	local02, ##4088
02ccc     02 09 0A FB | 	rdlong	local03, local01 wz
02cd0     74 00 90 5D |  if_ne	jmp	#LR__0144
02cd4     03 0B 02 F6 | 	mov	local04, local02
02cd8     02 0B 82 F1 | 	sub	local04, local01
02cdc     02 03 58 FC | 	wrword	#1, local01
02ce0     02 09 02 F6 | 	mov	local03, local01
02ce4     02 08 06 F1 | 	add	local03, #2
02ce8     36 00 80 FF 
02cec     04 21 59 FC | 	wrword	##27792, local03
02cf0     02 09 02 F6 | 	mov	local03, local01
02cf4     04 08 06 F1 | 	add	local03, #4
02cf8     04 01 58 FC | 	wrword	#0, local03
02cfc     02 09 02 F6 | 	mov	local03, local01
02d00     06 08 06 F1 | 	add	local03, #6
02d04     04 03 58 FC | 	wrword	#1, local03
02d08     10 04 06 F1 | 	add	local01, #16
02d0c     05 09 52 F6 | 	abs	local03, local04 wc
02d10     04 08 46 F0 | 	shr	local03, #4
02d14     04 09 62 C6 |  if_b	neg	local03, local03
02d18     02 09 52 FC | 	wrword	local03, local01
02d1c     02 09 02 F6 | 	mov	local03, local01
02d20     02 08 06 F1 | 	add	local03, #2
02d24     36 00 80 FF 
02d28     04 1F 59 FC | 	wrword	##27791, local03
02d2c     02 09 02 F6 | 	mov	local03, local01
02d30     04 08 06 F1 | 	add	local03, #4
02d34     04 01 58 FC | 	wrword	#0, local03
02d38     02 09 02 F6 | 	mov	local03, local01
02d3c     06 08 06 F1 | 	add	local03, #6
02d40     04 01 58 FC | 	wrword	#0, local03
02d44     10 04 86 F1 | 	sub	local01, #16
02d48                 | LR__0144
02d48     03 B9 01 F6 | 	mov	result2, local02
02d4c     02 B7 01 F6 | 	mov	result1, local01
02d50     AF F0 03 F6 | 	mov	ptra, fp
02d54     BA 00 A0 FD | 	call	#popregs_
02d58                 | __system___gc_ptrs_ret
02d58     2D 00 64 FD | 	ret
02d5c                 | 
02d5c                 | __system___gc_nextBlockPtr
02d5c     02 5A 05 F6 | 	mov	COUNT_, #2
02d60     B0 00 A0 FD | 	call	#pushregs_
02d64     FD 04 02 F6 | 	mov	local01, arg01
02d68     02 07 EA FA | 	rdword	local02, local01 wz
02d6c     10 00 90 5D |  if_ne	jmp	#LR__0145
02d70     1A 00 00 FF 
02d74     78 FB 05 F6 | 	mov	arg01, ##@LR__0188
02d78     F4 01 B0 FD | 	call	#__system___gc_errmsg
02d7c     0C 00 90 FD | 	jmp	#LR__0146
02d80                 | LR__0145
02d80     02 B7 01 F6 | 	mov	result1, local01
02d84     04 06 66 F0 | 	shl	local02, #4
02d88     03 B7 01 F1 | 	add	result1, local02
02d8c                 | LR__0146
02d8c     AF F0 03 F6 | 	mov	ptra, fp
02d90     BA 00 A0 FD | 	call	#popregs_
02d94                 | __system___gc_nextBlockPtr_ret
02d94     2D 00 64 FD | 	ret
02d98                 | 
02d98                 | __system___gc_tryalloc
02d98     0D 5A 05 F6 | 	mov	COUNT_, #13
02d9c     B0 00 A0 FD | 	call	#pushregs_
02da0     FD 04 02 F6 | 	mov	local01, arg01
02da4     FE 06 02 F6 | 	mov	local02, arg02
02da8     08 FF BF FD | 	call	#__system___gc_ptrs
02dac     DB 08 02 F6 | 	mov	local03, result1
02db0     DC 0A 02 F6 | 	mov	local04, result2
02db4     04 0D 02 F6 | 	mov	local05, local03
02db8     00 0E 06 F6 | 	mov	local06, #0
02dbc     90 D2 9F FE | 	loc	pa,	#(@LR__0148-@LR__0147)
02dc0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02dc4                 | LR__0147
02dc4     06 11 02 F6 | 	mov	local07, local05
02dc8     06 13 02 F6 | 	mov	local08, local05
02dcc     06 12 06 F1 | 	add	local08, #6
02dd0     09 15 E2 FA | 	rdword	local09, local08
02dd4     04 FB 01 F6 | 	mov	arg01, local03
02dd8     0A FD 09 F6 | 	mov	arg02, local09 wz
02ddc     00 B6 05 A6 |  if_e	mov	result1, #0
02de0     04 FC 65 50 |  if_ne	shl	arg02, #4
02de4     FE FA 01 51 |  if_ne	add	arg01, arg02
02de8     FD B6 01 56 |  if_ne	mov	result1, arg01
02dec     DB 16 02 F6 | 	mov	local10, result1
02df0     0B 0D 0A F6 | 	mov	local05, local10 wz
02df4     06 17 02 56 |  if_ne	mov	local10, local05
02df8     0B 0F E2 5A |  if_ne	rdword	local06, local10
02dfc     00 0C 0E F2 | 	cmp	local05, #0 wz
02e00     10 00 90 AD |  if_e	jmp	#LR__0149
02e04     05 0D 5A F2 | 	cmps	local05, local04 wcz
02e08     08 00 90 3D |  if_ae	jmp	#LR__0149
02e0c     07 05 5A F2 | 	cmps	local01, local06 wcz
02e10     B0 FF 9F 1D |  if_a	jmp	#LR__0147
02e14                 | LR__0148
02e14                 | LR__0149
02e14     00 0C 0E F2 | 	cmp	local05, #0 wz
02e18     06 B7 01 A6 |  if_e	mov	result1, local05
02e1c     44 01 90 AD |  if_e	jmp	#LR__0152
02e20     06 17 02 F6 | 	mov	local10, local05
02e24     06 16 06 F1 | 	add	local10, #6
02e28     0B 19 E2 FA | 	rdword	local11, local10
02e2c     07 05 5A F2 | 	cmps	local01, local06 wcz
02e30     C0 00 90 3D |  if_ae	jmp	#LR__0151
02e34     06 05 52 FC | 	wrword	local01, local05
02e38     06 FB 01 F6 | 	mov	arg01, local05
02e3c     02 15 02 F6 | 	mov	local09, local01
02e40     04 14 66 F0 | 	shl	local09, #4
02e44     0A FB 01 F1 | 	add	arg01, local09
02e48     07 17 02 F6 | 	mov	local10, local06
02e4c     02 17 82 F1 | 	sub	local10, local01
02e50     FD 16 52 FC | 	wrword	local10, arg01
02e54     FD 16 02 F6 | 	mov	local10, arg01
02e58     02 16 06 F1 | 	add	local10, #2
02e5c     36 00 80 FF 
02e60     0B 1F 59 FC | 	wrword	##27791, local10
02e64     06 FD 09 F6 | 	mov	arg02, local05 wz
02e68     00 B6 05 A6 |  if_e	mov	result1, #0
02e6c     04 FD 81 51 |  if_ne	sub	arg02, local03
02e70     04 FC 45 50 |  if_ne	shr	arg02, #4
02e74     FE B6 01 56 |  if_ne	mov	result1, arg02
02e78     FD 14 02 F6 | 	mov	local09, arg01
02e7c     04 14 06 F1 | 	add	local09, #4
02e80     0A B7 51 FC | 	wrword	result1, local09
02e84     06 17 02 F6 | 	mov	local10, local05
02e88     06 16 06 F1 | 	add	local10, #6
02e8c     FD 14 02 F6 | 	mov	local09, arg01
02e90     0B 13 E2 FA | 	rdword	local08, local10
02e94     06 14 06 F1 | 	add	local09, #6
02e98     0A 13 52 FC | 	wrword	local08, local09
02e9c     FD 1A 02 F6 | 	mov	local12, arg01
02ea0     0D FD 09 F6 | 	mov	arg02, local12 wz
02ea4     00 B6 05 A6 |  if_e	mov	result1, #0
02ea8     04 FD 81 51 |  if_ne	sub	arg02, local03
02eac     04 FC 45 50 |  if_ne	shr	arg02, #4
02eb0     FE B6 01 56 |  if_ne	mov	result1, arg02
02eb4     DB 18 02 F6 | 	mov	local11, result1
02eb8     A0 FE BF FD | 	call	#__system___gc_nextBlockPtr
02ebc     DB 1C 0A F6 | 	mov	local13, result1 wz
02ec0     30 00 90 AD |  if_e	jmp	#LR__0150
02ec4     05 1D 5A F2 | 	cmps	local13, local04 wcz
02ec8     28 00 90 3D |  if_ae	jmp	#LR__0150
02ecc     04 FB 01 F6 | 	mov	arg01, local03
02ed0     0D FD 09 F6 | 	mov	arg02, local12 wz
02ed4     00 B6 05 A6 |  if_e	mov	result1, #0
02ed8     FD FC 81 51 |  if_ne	sub	arg02, arg01
02edc     04 FC 45 50 |  if_ne	shr	arg02, #4
02ee0     FE B6 01 56 |  if_ne	mov	result1, arg02
02ee4     DB 16 02 F6 | 	mov	local10, result1
02ee8     0E 15 02 F6 | 	mov	local09, local13
02eec     04 14 06 F1 | 	add	local09, #4
02ef0     0A 17 52 FC | 	wrword	local10, local09
02ef4                 | LR__0150
02ef4                 | LR__0151
02ef4     06 10 06 F1 | 	add	local07, #6
02ef8     08 19 52 FC | 	wrword	local11, local07
02efc     36 00 00 FF 
02f00     80 16 06 F6 | 	mov	local10, ##27776
02f04     03 17 42 F5 | 	or	local10, local02
02f08     00 B6 05 F6 | 	mov	result1, #0
02f0c     01 B6 61 FD | 	cogid	result1
02f10     DB 16 42 F5 | 	or	local10, result1
02f14     06 13 02 F6 | 	mov	local08, local05
02f18     02 12 06 F1 | 	add	local08, #2
02f1c     09 17 52 FC | 	wrword	local10, local08
02f20     04 17 02 F6 | 	mov	local10, local03
02f24     08 16 06 F1 | 	add	local10, #8
02f28     06 15 02 F6 | 	mov	local09, local05
02f2c     0B 13 E2 FA | 	rdword	local08, local10
02f30     06 14 06 F1 | 	add	local09, #6
02f34     0A 13 52 FC | 	wrword	local08, local09
02f38     06 FD 09 F6 | 	mov	arg02, local05 wz
02f3c     00 B6 05 A6 |  if_e	mov	result1, #0
02f40     04 FD 81 51 |  if_ne	sub	arg02, local03
02f44     04 FC 45 50 |  if_ne	shr	arg02, #4
02f48     FE B6 01 56 |  if_ne	mov	result1, arg02
02f4c     08 08 06 F1 | 	add	local03, #8
02f50     04 B7 51 FC | 	wrword	result1, local03
02f54     06 B7 01 F6 | 	mov	result1, local05
02f58     08 B6 05 F1 | 	add	result1, #8
02f5c     00 C0 31 FF 
02f60     00 B6 45 F5 | 	or	result1, ##1669332992
02f64                 | LR__0152
02f64     AF F0 03 F6 | 	mov	ptra, fp
02f68     BA 00 A0 FD | 	call	#popregs_
02f6c                 | __system___gc_tryalloc_ret
02f6c     2D 00 64 FD | 	ret
02f70                 | 
02f70                 | __system___gc_errmsg
02f70     02 5A 05 F6 | 	mov	COUNT_, #2
02f74     B0 00 A0 FD | 	call	#pushregs_
02f78     FD 04 02 F6 | 	mov	local01, arg01
02f7c                 | LR__0153
02f7c     02 07 CA FA | 	rdbyte	local02, local01 wz
02f80     01 04 06 F1 | 	add	local01, #1
02f84     0C 00 90 AD |  if_e	jmp	#LR__0154
02f88     03 FB 01 F6 | 	mov	arg01, local02
02f8c     0C FC BF FD | 	call	#__system___tx
02f90     E8 FF 9F FD | 	jmp	#LR__0153
02f94                 | LR__0154
02f94     00 B6 05 F6 | 	mov	result1, #0
02f98     AF F0 03 F6 | 	mov	ptra, fp
02f9c     BA 00 A0 FD | 	call	#popregs_
02fa0                 | __system___gc_errmsg_ret
02fa0     2D 00 64 FD | 	ret
02fa4                 | 
02fa4                 | __system___gc_alloc_managed
02fa4     02 5A 05 F6 | 	mov	COUNT_, #2
02fa8     B0 00 A0 FD | 	call	#pushregs_
02fac     FD 04 02 F6 | 	mov	local01, arg01
02fb0     00 FC 05 F6 | 	mov	arg02, #0
02fb4     30 00 B0 FD | 	call	#__system___gc_doalloc
02fb8     DB 06 0A F6 | 	mov	local02, result1 wz
02fbc     18 00 90 5D |  if_ne	jmp	#LR__0155
02fc0     00 04 5E F2 | 	cmps	local01, #0 wcz
02fc4     10 00 90 ED |  if_be	jmp	#LR__0155
02fc8     1A 00 00 FF 
02fcc     94 FB 05 F6 | 	mov	arg01, ##@LR__0189
02fd0     9C FF BF FD | 	call	#__system___gc_errmsg
02fd4     04 00 90 FD | 	jmp	#LR__0156
02fd8                 | LR__0155
02fd8     03 B7 01 F6 | 	mov	result1, local02
02fdc                 | LR__0156
02fdc     AF F0 03 F6 | 	mov	ptra, fp
02fe0     BA 00 A0 FD | 	call	#popregs_
02fe4                 | __system___gc_alloc_managed_ret
02fe4     2D 00 64 FD | 	ret
02fe8                 | 
02fe8                 | __system___gc_doalloc
02fe8     06 5A 05 F6 | 	mov	COUNT_, #6
02fec     B0 00 A0 FD | 	call	#pushregs_
02ff0     FD 04 0A F6 | 	mov	local01, arg01 wz
02ff4     FE 06 02 F6 | 	mov	local02, arg02
02ff8     00 B6 05 A6 |  if_e	mov	result1, #0
02ffc     94 00 90 AD |  if_e	jmp	#LR__0164
03000     17 04 06 F1 | 	add	local01, #23
03004     0F 04 26 F5 | 	andn	local01, #15
03008     04 04 46 F0 | 	shr	local01, #4
0300c     14 A8 05 F1 | 	add	ptr___system__dat__, #20
03010     D4 FA 01 F6 | 	mov	arg01, ptr___system__dat__
03014     14 A8 85 F1 | 	sub	ptr___system__dat__, #20
03018     44 FB BF FD | 	call	#__system___lockmem
0301c     02 FB 01 F6 | 	mov	arg01, local01
03020     03 FD 01 F6 | 	mov	arg02, local02
03024     70 FD BF FD | 	call	#__system___gc_tryalloc
03028     DB 08 0A F6 | 	mov	local03, result1 wz
0302c     14 00 90 5D |  if_ne	jmp	#LR__0157
03030     24 03 B0 FD | 	call	#__system___gc_docollect
03034     02 FB 01 F6 | 	mov	arg01, local01
03038     03 FD 01 F6 | 	mov	arg02, local02
0303c     58 FD BF FD | 	call	#__system___gc_tryalloc
03040     DB 08 02 F6 | 	mov	local03, result1
03044                 | LR__0157
03044     14 A8 05 F1 | 	add	ptr___system__dat__, #20
03048     D4 FA 01 F6 | 	mov	arg01, ptr___system__dat__
0304c     14 A8 85 F1 | 	sub	ptr___system__dat__, #20
03050     FD 00 68 FC | 	wrlong	#0, arg01
03054     00 08 0E F2 | 	cmp	local03, #0 wz
03058     34 00 90 AD |  if_e	jmp	#LR__0163
0305c     04 04 66 F0 | 	shl	local01, #4
03060     08 04 86 F1 | 	sub	local01, #8
03064     02 0B 52 F6 | 	abs	local04, local01 wc
03068     02 0A 46 F0 | 	shr	local04, #2
0306c     05 0B 62 C6 |  if_b	neg	local04, local04
03070     05 0D 0A F6 | 	mov	local05, local04 wz
03074     04 0F 02 F6 | 	mov	local06, local03
03078     14 00 90 AD |  if_e	jmp	#LR__0162
0307c     8C CF 9F FE | 	loc	pa,	#(@LR__0160-@LR__0158)
03080     93 00 A0 FD | 	call	#FCACHE_LOAD_
03084                 | LR__0158
03084     06 05 D8 FC | 	rep	@LR__0161, local05
03088                 | LR__0159
03088     07 01 68 FC | 	wrlong	#0, local06
0308c     04 0E 06 F1 | 	add	local06, #4
03090                 | LR__0160
03090                 | LR__0161
03090                 | LR__0162
03090                 | LR__0163
03090     04 B7 01 F6 | 	mov	result1, local03
03094                 | LR__0164
03094     AF F0 03 F6 | 	mov	ptra, fp
03098     BA 00 A0 FD | 	call	#popregs_
0309c                 | __system___gc_doalloc_ret
0309c     2D 00 64 FD | 	ret
030a0                 | 
030a0                 | __system___gc_isvalidptr
030a0     FF BA 01 F6 | 	mov	_var01, arg03
030a4     DD BC 01 F6 | 	mov	_var02, _var01
030a8     00 F8 7F FF 
030ac     00 BC 05 F5 | 	and	_var02, ##-1048576
030b0     00 C0 31 FF 
030b4     00 BC 0D F2 | 	cmp	_var02, ##1669332992 wz
030b8     00 B6 05 56 |  if_ne	mov	result1, #0
030bc     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
030c0     08 BA 85 F1 | 	sub	_var01, #8
030c4     00 F8 7F FF 
030c8     00 BA 25 F5 | 	andn	_var01, ##-1048576
030cc     FD BA 59 F2 | 	cmps	_var01, arg01 wcz
030d0     08 00 90 CD |  if_b	jmp	#LR__0165
030d4     FE BA 59 F2 | 	cmps	_var01, arg02 wcz
030d8     08 00 90 CD |  if_b	jmp	#LR__0166
030dc                 | LR__0165
030dc     00 B6 05 F6 | 	mov	result1, #0
030e0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
030e4                 | LR__0166
030e4     DD BC 01 F6 | 	mov	_var02, _var01
030e8     FD BC 61 F5 | 	xor	_var02, arg01
030ec     0F BC 0D F5 | 	and	_var02, #15 wz
030f0     00 B6 05 56 |  if_ne	mov	result1, #0
030f4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
030f8     DD BC 01 F6 | 	mov	_var02, _var01
030fc     02 BC 05 F1 | 	add	_var02, #2
03100     DE BC E1 FA | 	rdword	_var02, _var02
03104     7F 00 00 FF 
03108     C0 BD 05 F5 | 	and	_var02, ##65472
0310c     36 00 00 FF 
03110     80 BC 0D F2 | 	cmp	_var02, ##27776 wz
03114     00 B6 05 56 |  if_ne	mov	result1, #0
03118     DD B6 01 A6 |  if_e	mov	result1, _var01
0311c                 | __system___gc_isvalidptr_ret
0311c     2D 00 64 FD | 	ret
03120                 | 
03120                 | __system___gc_dofree
03120     0D 5A 05 F6 | 	mov	COUNT_, #13
03124     B0 00 A0 FD | 	call	#pushregs_
03128     FD 04 02 F6 | 	mov	local01, arg01
0312c     84 FB BF FD | 	call	#__system___gc_ptrs
03130     DB 06 02 F6 | 	mov	local02, result1
03134     DC 08 02 F6 | 	mov	local03, result2
03138     02 0B 02 F6 | 	mov	local04, local01
0313c     02 0A 06 F1 | 	add	local04, #2
03140     36 00 80 FF 
03144     05 1F 59 FC | 	wrword	##27791, local04
03148     02 0D 02 F6 | 	mov	local05, local01
0314c     02 FB 01 F6 | 	mov	arg01, local01
03150     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
03154     DB 0E 02 F6 | 	mov	local06, result1
03158     F0 CE 9F FE | 	loc	pa,	#(@LR__0168-@LR__0167)
0315c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03160                 | LR__0167
03160     04 0C 06 F1 | 	add	local05, #4
03164     06 FD E9 FA | 	rdword	arg02, local05 wz
03168     03 FB 01 F6 | 	mov	arg01, local02
0316c     00 B6 05 A6 |  if_e	mov	result1, #0
03170     04 FC 65 50 |  if_ne	shl	arg02, #4
03174     FE FA 01 51 |  if_ne	add	arg01, arg02
03178     FD B6 01 56 |  if_ne	mov	result1, arg01
0317c     DB 0C 0A F6 | 	mov	local05, result1 wz
03180     28 00 90 AD |  if_e	jmp	#LR__0169
03184     06 FB 01 F6 | 	mov	arg01, local05
03188     00 10 06 F6 | 	mov	local07, #0
0318c     02 FA 05 F1 | 	add	arg01, #2
03190     FD 12 E2 FA | 	rdword	local08, arg01
03194     36 00 00 FF 
03198     8F 12 0E F2 | 	cmp	local08, ##27791 wz
0319c     01 10 66 A6 |  if_e	neg	local07, #1
031a0     08 B7 01 F6 | 	mov	result1, local07
031a4     DB 0A 0A F6 | 	mov	local04, result1 wz
031a8     B4 FF 9F AD |  if_e	jmp	#LR__0167
031ac                 | LR__0168
031ac                 | LR__0169
031ac     00 0C 0E F2 | 	cmp	local05, #0 wz
031b0     03 0D 02 A6 |  if_e	mov	local05, local02
031b4     06 0B 02 F6 | 	mov	local04, local05
031b8     06 0A 06 F1 | 	add	local04, #6
031bc     02 15 02 F6 | 	mov	local09, local01
031c0     05 17 E2 FA | 	rdword	local10, local04
031c4     06 14 06 F1 | 	add	local09, #6
031c8     0A 17 52 FC | 	wrword	local10, local09
031cc     02 FD 09 F6 | 	mov	arg02, local01 wz
031d0     00 B6 05 A6 |  if_e	mov	result1, #0
031d4     03 FD 81 51 |  if_ne	sub	arg02, local02
031d8     04 FC 45 50 |  if_ne	shr	arg02, #4
031dc     FE B6 01 56 |  if_ne	mov	result1, arg02
031e0     06 15 02 F6 | 	mov	local09, local05
031e4     06 14 06 F1 | 	add	local09, #6
031e8     0A B7 51 FC | 	wrword	result1, local09
031ec     03 0D 0A F2 | 	cmp	local05, local02 wz
031f0     84 00 90 AD |  if_e	jmp	#LR__0172
031f4     06 FB 01 F6 | 	mov	arg01, local05
031f8     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
031fc     02 B7 09 F2 | 	cmp	result1, local01 wz
03200     74 00 90 5D |  if_ne	jmp	#LR__0171
03204     06 0B E2 FA | 	rdword	local04, local05
03208     02 19 E2 FA | 	rdword	local11, local01
0320c     0C 0B 02 F1 | 	add	local04, local11
03210     06 0B 52 FC | 	wrword	local04, local05
03214     02 0B 02 F6 | 	mov	local04, local01
03218     02 0A 06 F1 | 	add	local04, #2
0321c     05 01 58 FC | 	wrword	#0, local04
03220     02 FB 01 F6 | 	mov	arg01, local01
03224     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
03228     DB 0E 02 F6 | 	mov	local06, result1
0322c     04 0F 5A F2 | 	cmps	local06, local03 wcz
03230     20 00 90 3D |  if_ae	jmp	#LR__0170
03234     06 FD 09 F6 | 	mov	arg02, local05 wz
03238     00 B6 05 A6 |  if_e	mov	result1, #0
0323c     03 FD 81 51 |  if_ne	sub	arg02, local02
03240     04 FC 45 50 |  if_ne	shr	arg02, #4
03244     FE B6 01 56 |  if_ne	mov	result1, arg02
03248     07 15 02 F6 | 	mov	local09, local06
0324c     04 14 06 F1 | 	add	local09, #4
03250     0A B7 51 FC | 	wrword	result1, local09
03254                 | LR__0170
03254     02 0B 02 F6 | 	mov	local04, local01
03258     06 0A 06 F1 | 	add	local04, #6
0325c     06 15 02 F6 | 	mov	local09, local05
03260     05 17 E2 FA | 	rdword	local10, local04
03264     06 14 06 F1 | 	add	local09, #6
03268     0A 17 52 FC | 	wrword	local10, local09
0326c     06 04 06 F1 | 	add	local01, #6
03270     02 01 58 FC | 	wrword	#0, local01
03274     06 05 02 F6 | 	mov	local01, local05
03278                 | LR__0171
03278                 | LR__0172
03278     02 FB 01 F6 | 	mov	arg01, local01
0327c     DC FA BF FD | 	call	#__system___gc_nextBlockPtr
03280     DB 1A 0A F6 | 	mov	local12, result1 wz
03284     C0 00 90 AD |  if_e	jmp	#LR__0174
03288     04 1B 5A F2 | 	cmps	local12, local03 wcz
0328c     B8 00 90 3D |  if_ae	jmp	#LR__0174
03290     0D FB 01 F6 | 	mov	arg01, local12
03294     00 10 06 F6 | 	mov	local07, #0
03298     02 FA 05 F1 | 	add	arg01, #2
0329c     FD 12 E2 FA | 	rdword	local08, arg01
032a0     36 00 00 FF 
032a4     8F 12 0E F2 | 	cmp	local08, ##27791 wz
032a8     01 10 66 A6 |  if_e	neg	local07, #1
032ac     08 B7 09 F6 | 	mov	result1, local07 wz
032b0     94 00 90 AD |  if_e	jmp	#LR__0174
032b4     02 0D 02 F6 | 	mov	local05, local01
032b8     06 0B E2 FA | 	rdword	local04, local05
032bc     0D 05 02 F6 | 	mov	local01, local12
032c0     02 19 E2 FA | 	rdword	local11, local01
032c4     0C 0B 02 F1 | 	add	local04, local11
032c8     06 1D 02 F6 | 	mov	local13, local05
032cc     0E 0B 52 FC | 	wrword	local04, local13
032d0     02 0B 02 F6 | 	mov	local04, local01
032d4     06 0A 06 F1 | 	add	local04, #6
032d8     06 15 02 F6 | 	mov	local09, local05
032dc     05 17 E2 FA | 	rdword	local10, local04
032e0     06 14 06 F1 | 	add	local09, #6
032e4     0A 17 52 FC | 	wrword	local10, local09
032e8     02 0B 02 F6 | 	mov	local04, local01
032ec     02 0A 06 F1 | 	add	local04, #2
032f0     05 55 59 FC | 	wrword	#170, local04
032f4     02 0B 02 F6 | 	mov	local04, local01
032f8     06 0A 06 F1 | 	add	local04, #6
032fc     00 14 06 F6 | 	mov	local09, #0
03300     05 01 58 FC | 	wrword	#0, local04
03304     02 FB 01 F6 | 	mov	arg01, local01
03308     50 FA BF FD | 	call	#__system___gc_nextBlockPtr
0330c     DB 0A 02 F6 | 	mov	local04, result1
03310     05 0F 0A F6 | 	mov	local06, local04 wz
03314     30 00 90 AD |  if_e	jmp	#LR__0173
03318     04 0F 5A F2 | 	cmps	local06, local03 wcz
0331c     28 00 90 3D |  if_ae	jmp	#LR__0173
03320     03 FB 01 F6 | 	mov	arg01, local02
03324     06 FD 09 F6 | 	mov	arg02, local05 wz
03328     00 B6 05 A6 |  if_e	mov	result1, #0
0332c     FD FC 81 51 |  if_ne	sub	arg02, arg01
03330     04 FC 45 50 |  if_ne	shr	arg02, #4
03334     FE B6 01 56 |  if_ne	mov	result1, arg02
03338     DB 0A 02 F6 | 	mov	local04, result1
0333c     07 15 02 F6 | 	mov	local09, local06
03340     04 14 06 F1 | 	add	local09, #4
03344     0A 0B 52 FC | 	wrword	local04, local09
03348                 | LR__0173
03348                 | LR__0174
03348     07 B7 01 F6 | 	mov	result1, local06
0334c     AF F0 03 F6 | 	mov	ptra, fp
03350     BA 00 A0 FD | 	call	#popregs_
03354                 | __system___gc_dofree_ret
03354     2D 00 64 FD | 	ret
03358                 | 
03358                 | __system___gc_docollect
03358     09 5A 05 F6 | 	mov	COUNT_, #9
0335c     B0 00 A0 FD | 	call	#pushregs_
03360     50 F9 BF FD | 	call	#__system___gc_ptrs
03364     DC 04 02 F6 | 	mov	local01, result2
03368     DB 06 02 F6 | 	mov	local02, result1
0336c     03 FB 01 F6 | 	mov	arg01, local02
03370     E8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03374     DB 08 0A F6 | 	mov	local03, result1 wz
03378     00 B6 05 F6 | 	mov	result1, #0
0337c     01 B6 61 FD | 	cogid	result1
03380     DB 0A 02 F6 | 	mov	local04, result1
03384     34 00 90 AD |  if_e	jmp	#LR__0176
03388                 | LR__0175
03388     02 09 5A F2 | 	cmps	local03, local01 wcz
0338c     2C 00 90 3D |  if_ae	jmp	#LR__0176
03390     04 0D 02 F6 | 	mov	local05, local03
03394     02 0C 06 F1 | 	add	local05, #2
03398     06 0F E2 FA | 	rdword	local06, local05
0339c     20 0E 26 F5 | 	andn	local06, #32
033a0     04 11 02 F6 | 	mov	local07, local03
033a4     02 10 06 F1 | 	add	local07, #2
033a8     08 0F 52 FC | 	wrword	local06, local07
033ac     04 FB 01 F6 | 	mov	arg01, local03
033b0     A8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
033b4     DB 08 0A F6 | 	mov	local03, result1 wz
033b8     CC FF 9F 5D |  if_ne	jmp	#LR__0175
033bc                 | LR__0176
033bc     00 0E 06 F6 | 	mov	local06, #0
033c0     00 FA 05 F6 | 	mov	arg01, #0
033c4     30 F7 BF FD | 	call	#__system____topofstack
033c8     DB FC 01 F6 | 	mov	arg02, result1
033cc     07 FB 01 F6 | 	mov	arg01, local06
033d0     9C 00 B0 FD | 	call	#__system___gc_markhub
033d4     2C 01 B0 FD | 	call	#__system___gc_markcog
033d8     03 FB 01 F6 | 	mov	arg01, local02
033dc     7C F9 BF FD | 	call	#__system___gc_nextBlockPtr
033e0     DB 12 0A F6 | 	mov	local08, result1 wz
033e4     10 00 90 5D |  if_ne	jmp	#LR__0177
033e8     1A 00 00 FF 
033ec     B1 FB 05 F6 | 	mov	arg01, ##@LR__0190
033f0     7C FB BF FD | 	call	#__system___gc_errmsg
033f4     6C 00 90 FD | 	jmp	#LR__0183
033f8                 | LR__0177
033f8                 | LR__0178
033f8     09 09 02 F6 | 	mov	local03, local08
033fc     04 FB 01 F6 | 	mov	arg01, local03
03400     58 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03404     DB 12 02 F6 | 	mov	local08, result1
03408     04 0F 02 F6 | 	mov	local06, local03
0340c     02 0E 06 F1 | 	add	local06, #2
03410     07 15 E2 FA | 	rdword	local09, local06
03414     20 14 CE F7 | 	test	local09, #32 wz
03418     38 00 90 5D |  if_ne	jmp	#LR__0181
0341c     0A 0D 02 F6 | 	mov	local05, local09
03420     10 0C 0E F5 | 	and	local05, #16 wz
03424     2C 00 90 5D |  if_ne	jmp	#LR__0181
03428     0A 0F 02 F6 | 	mov	local06, local09
0342c     0F 0E 06 F5 | 	and	local06, #15
03430     07 15 02 F6 | 	mov	local09, local06
03434     05 15 0A F2 | 	cmp	local09, local04 wz
03438     08 00 90 AD |  if_e	jmp	#LR__0179
0343c     0E 14 0E F2 | 	cmp	local09, #14 wz
03440     10 00 90 5D |  if_ne	jmp	#LR__0180
03444                 | LR__0179
03444     04 FB 01 F6 | 	mov	arg01, local03
03448     D4 FC BF FD | 	call	#__system___gc_dofree
0344c     DB 0E 02 F6 | 	mov	local06, result1
03450     07 13 02 F6 | 	mov	local08, local06
03454                 | LR__0180
03454                 | LR__0181
03454     00 12 0E F2 | 	cmp	local08, #0 wz
03458     08 00 90 AD |  if_e	jmp	#LR__0182
0345c     02 13 5A F2 | 	cmps	local08, local01 wcz
03460     94 FF 9F CD |  if_b	jmp	#LR__0178
03464                 | LR__0182
03464                 | LR__0183
03464     AF F0 03 F6 | 	mov	ptra, fp
03468     BA 00 A0 FD | 	call	#popregs_
0346c                 | __system___gc_docollect_ret
0346c     2D 00 64 FD | 	ret
03470                 | 
03470                 | __system___gc_markhub
03470     09 5A 05 F6 | 	mov	COUNT_, #9
03474     B0 00 A0 FD | 	call	#pushregs_
03478     FD 04 02 F6 | 	mov	local01, arg01
0347c     FE 06 02 F6 | 	mov	local02, arg02
03480     30 F8 BF FD | 	call	#__system___gc_ptrs
03484     DB 08 02 F6 | 	mov	local03, result1
03488     DC 0A 02 F6 | 	mov	local04, result2
0348c                 | LR__0184
0348c     03 05 5A F2 | 	cmps	local01, local02 wcz
03490     64 00 90 3D |  if_ae	jmp	#LR__0185
03494     02 FF 01 FB | 	rdlong	arg03, local01
03498     04 04 06 F1 | 	add	local01, #4
0349c     05 FD 01 F6 | 	mov	arg02, local04
034a0     04 FB 01 F6 | 	mov	arg01, local03
034a4     F8 FB BF FD | 	call	#__system___gc_isvalidptr
034a8     DB 0C 0A F6 | 	mov	local05, result1 wz
034ac     DC FF 9F AD |  if_e	jmp	#LR__0184
034b0     06 FB 01 F6 | 	mov	arg01, local05
034b4     00 0E 06 F6 | 	mov	local06, #0
034b8     02 FA 05 F1 | 	add	arg01, #2
034bc     FD 10 E2 FA | 	rdword	local07, arg01
034c0     36 00 00 FF 
034c4     8F 10 0E F2 | 	cmp	local07, ##27791 wz
034c8     01 0E 66 A6 |  if_e	neg	local06, #1
034cc     07 B7 09 F6 | 	mov	result1, local06 wz
034d0     B8 FF 9F 5D |  if_ne	jmp	#LR__0184
034d4     06 13 02 F6 | 	mov	local08, local05
034d8     02 12 06 F1 | 	add	local08, #2
034dc     09 15 E2 FA | 	rdword	local09, local08
034e0     0F 14 26 F5 | 	andn	local09, #15
034e4     2E 14 46 F5 | 	or	local09, #46
034e8     06 13 02 F6 | 	mov	local08, local05
034ec     02 12 06 F1 | 	add	local08, #2
034f0     09 15 52 FC | 	wrword	local09, local08
034f4     94 FF 9F FD | 	jmp	#LR__0184
034f8                 | LR__0185
034f8     AF F0 03 F6 | 	mov	ptra, fp
034fc     BA 00 A0 FD | 	call	#popregs_
03500                 | __system___gc_markhub_ret
03500     2D 00 64 FD | 	ret
03504                 | 
03504                 | __system___gc_markcog
03504     06 5A 05 F6 | 	mov	COUNT_, #6
03508     B0 00 A0 FD | 	call	#pushregs_
0350c     A4 F7 BF FD | 	call	#__system___gc_ptrs
03510     DB 04 02 F6 | 	mov	local01, result1
03514     DC 06 02 F6 | 	mov	local02, result2
03518     00 08 06 F6 | 	mov	local03, #0
0351c                 | LR__0186
0351c     F0 0B 06 F6 | 	mov	local04, #496
03520     04 0B 82 F1 | 	sub	local04, local03
03524     F0 0B 06 F1 | 	add	local04, #496
03528                 | 	'.live	local04
03528     00 0A 96 F9 | 	alts	local04, #0
0352c     05 0D 02 F6 | 	mov	local05, local04
03530     02 FB 01 F6 | 	mov	arg01, local01
03534     03 FD 01 F6 | 	mov	arg02, local02
03538     06 FF 01 F6 | 	mov	arg03, local05
0353c     60 FB BF FD | 	call	#__system___gc_isvalidptr
03540     DB 0C 0A F6 | 	mov	local05, result1 wz
03544     18 00 90 AD |  if_e	jmp	#LR__0187
03548     06 0F 02 F6 | 	mov	local06, local05
0354c     02 0E 06 F1 | 	add	local06, #2
03550     07 0B E2 FA | 	rdword	local04, local06
03554     20 0A 46 F5 | 	or	local04, #32
03558     02 0C 06 F1 | 	add	local05, #2
0355c     06 0B 52 FC | 	wrword	local04, local05
03560                 | LR__0187
03560     01 08 06 F1 | 	add	local03, #1
03564     F0 09 5E F2 | 	cmps	local03, #496 wcz
03568     B0 FF 9F CD |  if_b	jmp	#LR__0186
0356c     AF F0 03 F6 | 	mov	ptra, fp
03570     BA 00 A0 FD | 	call	#popregs_
03574                 | __system___gc_markcog_ret
03574     2D 00 64 FD | 	ret
03578                 | 
03578                 | LR__0188
03578     20 21 21 21 
0357c     20 63 6F 72 
03580     72 75 70 74 
03584     65 64 20 68 
03588     65 61 70 3F 
0358c     3F 3F 20 21 
03590     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
03593     00          | 	byte	0
03594                 | LR__0189
03594     20 21 21 21 
03598     20 6F 75 74 
0359c     20 6F 66 20 
035a0     68 65 61 70 
035a4     20 6D 65 6D 
035a8     6F 72 79 20 
035ac     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
035b0     00          | 	byte	0
035b1                 | LR__0190
035b1     20 21 21 21 
035b5     20 63 6F 72 
035b9     72 75 70 74 
035bd     65 64 20 68 
035c1     65 61 70 20 
035c5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
035c9     00          | 	byte	0
035ca                 | LR__0191
035ca     6D 6F 64 65 | 	byte	"mode"
035ce     00          | 	byte	0
035cf                 | LR__0192
035cf     63 70 6C    | 	byte	"cpl"
035d2     00          | 	byte	0
035d3                 | LR__0193
035d3     62 75 66 70 
035d7     74 72       | 	byte	"bufptr"
035d9     00          | 	byte	0
035da                 | LR__0194
035da     62 75 66 6C 
035de     65 6E       | 	byte	"buflen"
035e0     00          | 	byte	0
035e1                 | LR__0195
035e1     6C 69 6E 65 
035e5     73          | 	byte	"lines"
035e6     00          | 	byte	0
035e7                 | LR__0196
035e7     6D 6F 64 65 | 	byte	"mode"
035eb     00          | 	byte	0
035ec                 | LR__0197
035ec     63 70 6C    | 	byte	"cpl"
035ef     00          | 	byte	0
035f0                 | LR__0198
035f0     62 75 66 5F 
035f4     70 74 72    | 	byte	"buf_ptr"
035f7     00          | 	byte	0
035f8                 | LR__0199
035f8     62 75 66 6C 
035fc     65 6E       | 	byte	"buflen"
035fe     00          | 	byte	0
035ff                 | LR__0200
035ff     6C 69 6E 65 
03603     73          | 	byte	"lines"
03604     00          | 	byte	0
03605                 | LR__0201
03605     6D 6F 64 65 | 	byte	"mode"
03609     00          | 	byte	0
0360a                 | LR__0202
0360a     63 70 6C    | 	byte	"cpl"
0360d     00          | 	byte	0
0360e                 | LR__0203
0360e     62 75 66 5F 
03612     70 74 72    | 	byte	"buf_ptr"
03615     00          | 	byte	0
03616                 | LR__0204
03616     62 75 66 6C 
0361a     65 6E       | 	byte	"buflen"
0361c     00          | 	byte	0
0361d                 | LR__0205
0361d     6C 69 6E 65 
03621     73          | 	byte	"lines"
03622     00          | 	byte	0
03623                 | LR__0206
03623     6D 6F 64 65 | 	byte	"mode"
03627     00          | 	byte	0
03628                 | LR__0207
03628     63 70 6C    | 	byte	"cpl"
0362b     00          | 	byte	0
0362c                 | LR__0208
0362c     62 75 66 5F 
03630     70 74 72    | 	byte	"buf_ptr"
03633     00          | 	byte	0
03634                 | LR__0209
03634     62 75 66 6C 
03638     65 6E       | 	byte	"buflen"
0363a     00          | 	byte	0
0363b                 | LR__0210
0363b     6C 69 6E 65 
0363f     73          | 	byte	"lines"
03640     00          | 	byte	0
03641     00 00 00    | 	alignl
03644                 | _dat_
03644     00 00 00 00 
03648     00 00 00 00 
0364c     00 00 00 00 
03650     00 00 00 00 
03654     00 00 00    | vga_font       file "vgafont.def"
03657     7E 81 A5 81 
0365b     81 BD 99 81 
0365f     81 7E 00 00 
03663     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
03667     7E FF DB FF 
0366b     FF C3 E7 FF 
0366f     FF 7E 00 00 
03673     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
03677     00 36 7F 7F 
0367b     7F 7F 3E 1C 
0367f     08 00 00 00 
03683     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
03687     00 08 1C 3E 
0368b     7F 3E 1C 08 
0368f     00 00 00 00 
03693     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
03697     18 3C 3C E7 
0369b     E7 E7 18 18 
0369f     3C 00 00 00 
036a3     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
036a7     18 3C 7E FF 
036ab     FF 7E 18 18 
036af     3C 00 00 00 
036b3     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
036b7     00 00 00 18 
036bb     3C 3C 18 00 
036bf     00 00 00 00 
036c3     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
036c7     FF FF FF E7 
036cb     C3 C3 E7 FF 
036cf     FF FF FF FF 
036d3     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
036d7     00 00 3C 66 
036db     42 42 66 3C 
036df     00 00 00 00 
036e3     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
036e7     FF FF C3 99 
036eb     BD BD 99 C3 
036ef     FF FF FF FF 
036f3     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
036f7     78 70 58 4C 
036fb     1E 33 33 33 
036ff     33 1E 00 00 
03703     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
03707     3C 66 66 66 
0370b     66 3C 18 7E 
0370f     18 18 00 00 
03713     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
03717     FC CC FC 0C 
0371b     0C 0C 0C 0E 
0371f     0F 07 00 00 
03723     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
03727     FE C6 FE C6 
0372b     C6 C6 C6 E6 
0372f     E7 67 03 00 
03733     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
03737     18 18 DB 3C 
0373b     E7 3C DB 18 
0373f     18 00 00 00 
03743     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
03747     03 07 0F 1F 
0374b     7F 1F 0F 07 
0374f     03 01 00 00 
03753     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
03757     60 70 78 7C 
0375b     7F 7C 78 70 
0375f     60 40 00 00 
03763     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
03767     18 3C 7E 18 
0376b     18 18 7E 3C 
0376f     18 00 00 00 
03773     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
03777     66 66 66 66 
0377b     66 66 66    | 	byte	$66[7]
0377e     00 66 66 00 
03782     00 00 00 00 
03786     00 FE DB DB 
0378a     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
0378e     D8 D8 D8 00 
03792     00 00 00 3E 
03796     63 06 1C 36 
0379a     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
0379e     30 63 3E 00 
037a2     00 00 00 00 
037a6     00 00 00 00 
037aa     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
037ae     7F 7F 7F 00 
037b2     00 00 00 00 
037b6     00 18 3C 7E 
037ba     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
037be     3C 18 7E 00 
037c2     00 00 00 00 
037c6     00 18 3C 7E 
037ca     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
037ce     18 18 18 00 
037d2     00 00 00 00 
037d6     00 18 18 18 
037da     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
037de     7E 3C 18 00 
037e2     00 00 00 00 
037e6     00 00 00 18 
037ea     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
037ee     00 00 00 00 
037f2     00 00 00 00 
037f6     00 00 00    | 	byte	$00[11]
037f9     0C 06 7F 06 
037fd     0C 00 00 00 
03801     00 00 00 00 
03805     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03809     00 03 03 03 
0380d     7F 00 00 00 
03811     00 00 00 00 
03815     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03819     14 36 7F 36 
0381d     14 00 00 00 
03821     00 00 00 00 
03825     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
03829     1C 1C 3E 3E 
0382d     7F 7F 00 00 
03831     00 00 00 00 
03835     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03839     7F 3E 3E 1C 
0383d     1C 08 00 00 
03841     00 00 00 00 
03845     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03849     00 00 00 00 
0384d     00 00 00 00 
03851     00 00 00 00 
03855     00 00       | 	byte	$00[14]
03857     18 3C 3C 3C 
0385b     18 18 18 00 
0385f     18 18 00 00 
03863     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
03867     66 24 00 00 
0386b     00 00 00 00 
0386f     00 00 00 00 
03873     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03877     00 36 36 7F 
0387b     36 36 36 7F 
0387f     36 36 00 00 
03883     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
03887     3E 63 43 03 
0388b     3E 60 60 61 
0388f     63 3E 18 18 
03893     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
03897     00 00 43 63 
0389b     30 18 0C 06 
0389f     63 61 00 00 
038a3     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
038a7     1C 36 36 1C 
038ab     6E 3B 33 33 
038af     33 6E 00 00 
038b3     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
038b7     0C 0C 0C 06 
038bb     00 00 00 00 
038bf     00 00 00 00 
038c3     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
038c7     30 18 0C 0C 
038cb     0C 0C 0C 0C 
038cf     18 30 00 00 
038d3     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
038d7     0C 18 30 30 
038db     30 30 30 30 
038df     18 0C 00 00 
038e3     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
038e7     00 00 00 66 
038eb     3C FF 3C 66 
038ef     00 00 00 00 
038f3     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
038f7     00 00 00 18 
038fb     18 7E 18 18 
038ff     00 00 00 00 
03903     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
03907     00 00 00 00 
0390b     00 00 00 00 | 	byte	$00[8]
0390f     18 18 18 0C 
03913     00 00 00 00 
03917     00 00 00 00 
0391b     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
0391f     00 00 00 00 
03923     00 00 00 00 
03927     00 00 00 00 
0392b     00 00 00 00 | 	byte	$00[16]
0392f     18 18 00 00 
03933     00 00 00 00 
03937     00 00 40 60 
0393b     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
0393f     03 01 00 00 
03943     00 00 00 00 
03947     1C 36 63 63 
0394b     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
0394f     36 1C 00 00 
03953     00 00 00 00 
03957     18 1C 1E 18 
0395b     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
0395f     18 7E 00 00 
03963     00 00 00 00 
03967     3E 63 60 30 
0396b     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
0396f     63 7F 00 00 
03973     00 00 00 00 
03977     3E 63 60 60 
0397b     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
0397f     63 3E 00 00 
03983     00 00 00 00 
03987     30 38 3C 36 
0398b     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
0398f     30 78 00 00 
03993     00 00 00 00 
03997     7F 03 03 03 
0399b     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
0399f     63 3E 00 00 
039a3     00 00 00 00 
039a7     1C 06 03 03 
039ab     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
039af     63 3E 00 00 
039b3     00 00 00 00 
039b7     7F 63 60 60 
039bb     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
039bf     0C 0C 00 00 
039c3     00 00 00 00 
039c7     3E 63 63 63 
039cb     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
039cf     63 3E 00 00 
039d3     00 00 00 00 
039d7     3E 63 63 63 
039db     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
039df     30 1E 00 00 
039e3     00 00 00 00 
039e7     00 00 00 18 
039eb     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
039ef     18 18 00 00 
039f3     00 00 00 00 
039f7     00 00 00 18 
039fb     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
039ff     18 18 0C 00 
03a03     00 00 00 00 
03a07     00 60 30 18 
03a0b     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
03a0f     30 60 00 00 
03a13     00 00 00 00 
03a17     00 00 00 7E 
03a1b     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
03a1f     00 00 00 00 
03a23     00 00 00 00 
03a27     00          | 	byte	$00[9]
03a28     06 0C 18 30 
03a2c     60 30 18 0C 
03a30     06 00 00 00 
03a34     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
03a38     63 63 30 18 
03a3c     18 18 00 18 
03a40     18 00 00 00 
03a44     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
03a48     3E 63 63 7B 
03a4c     7B 7B 3B 03 
03a50     3E 00 00 00 
03a54     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
03a58     1C 36 63 63 
03a5c     7F 63 63 63 
03a60     63 00 00 00 
03a64     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
03a68     66 66 66 3E 
03a6c     66 66 66 66 
03a70     3F 00 00 00 
03a74     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
03a78     66 43 03 03 
03a7c     03 03 43 66 
03a80     3C 00 00 00 
03a84     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
03a88     36 66 66 66 
03a8c     66 66 66 36 
03a90     1F 00 00 00 
03a94     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
03a98     66 46 16 1E 
03a9c     16 06 46 66 
03aa0     7F 00 00 00 
03aa4     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
03aa8     66 46 16 1E 
03aac     16 06 06 06 
03ab0     0F 00 00 00 
03ab4     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
03ab8     66 43 03 03 
03abc     7B 63 63 66 
03ac0     5C 00 00 00 
03ac4     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
03ac8     63 63 63 7F 
03acc     63 63 63 63 
03ad0     63 00 00 00 
03ad4     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
03ad8     18 18 18 18 
03adc     18 18 18 18 | 	byte	$18[8]
03ae0     3C 00 00 00 
03ae4     00 00 00 78 
03ae8     30 30 30 30 
03aec     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
03af0     1E 00 00 00 
03af4     00 00 00 67 
03af8     66 66 36 1E 
03afc     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
03b00     67 00 00 00 
03b04     00 00 00 0F 
03b08     06 06 06 06 
03b0c     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
03b10     7F 00 00 00 
03b14     00 00 00 63 
03b18     77 7F 7F 6B 
03b1c     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
03b20     63 00 00 00 
03b24     00 00 00 63 
03b28     67 6F 7F 7B 
03b2c     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
03b30     63 00 00 00 
03b34     00 00 00 3E 
03b38     63 63 63 63 
03b3c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03b40     3E 00 00 00 
03b44     00 00 00 3F 
03b48     66 66 66 3E 
03b4c     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
03b50     0F 00 00 00 
03b54     00 00 00 3E 
03b58     63 63 63 63 
03b5c     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
03b60     3E 30 70 00 
03b64     00 00 00 3F 
03b68     66 66 66 3E 
03b6c     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
03b70     67 00 00 00 
03b74     00 00 00 3E 
03b78     63 63 06 1C 
03b7c     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
03b80     3E 00 00 00 
03b84     00 00 00 7E 
03b88     7E 5A 18 18 
03b8c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
03b90     3C 00 00 00 
03b94     00 00 00 63 
03b98     63 63 63 63 
03b9c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
03ba0     3E 00 00 00 
03ba4     00 00 00 63 
03ba8     63 63 63 63 
03bac     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
03bb0     08 00 00 00 
03bb4     00 00 00 63 
03bb8     63 63 63 6B 
03bbc     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
03bc0     36 00 00 00 
03bc4     00 00 00 63 
03bc8     63 36 3E 1C 
03bcc     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
03bd0     63 00 00 00 
03bd4     00 00 00 66 
03bd8     66 66 66 3C 
03bdc     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
03be0     3C 00 00 00 
03be4     00 00 00 7F 
03be8     63 61 30 18 
03bec     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
03bf0     7F 00 00 00 
03bf4     00 00 00 3C 
03bf8     0C 0C 0C 0C 
03bfc     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
03c00     3C 00 00 00 
03c04     00 00 00 00 
03c08     01 03 07 0E 
03c0c     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
03c10     40 00 00 00 
03c14     00 00 00 3C 
03c18     30 30 30 30 
03c1c     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
03c20     3C 00 00 00 
03c24     1C 36 00 00 
03c28     00 00 00 00 
03c2c     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03c30     00 00 00 00 
03c34     00 00 00 00 
03c38     00 00 00 00 
03c3c     00 00 00 00 
03c40     00          | 	byte	$00[17]
03c41     FF 00 00 0C 
03c45     18 00 00 00 
03c49     00 00 00 00 
03c4d     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03c51     00 00 00 00 
03c55     00 00 00 00 
03c59     00          | 	byte	$00[9]
03c5a     1E 30 3E 33 
03c5e     33 33 6E 00 
03c62     00 00 00 00 
03c66     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
03c6a     1E 36 66 66 
03c6e     66 66 3E 00 
03c72     00 00 00 00 
03c76     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03c7a     3E 63 03 03 
03c7e     03 63 3E 00 
03c82     00 00 00 00 
03c86     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
03c8a     3C 36 33 33 
03c8e     33 33 6E 00 
03c92     00 00 00 00 
03c96     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03c9a     3E 63 7F 03 
03c9e     03 63 3E 00 
03ca2     00 00 00 00 
03ca6     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
03caa     0C 1E 0C 0C 
03cae     0C 0C 1E 00 
03cb2     00 00 00 00 
03cb6     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03cba     6E 33 33 33 
03cbe     33 33 3E 30 
03cc2     33 1E 00 00 
03cc6     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
03cca     36 6E 66 66 
03cce     66 66 67 00 
03cd2     00 00 00 00 
03cd6     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
03cda     1C 18 18 18 
03cde     18 18 3C 00 
03ce2     00 00 00 00 
03ce6     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
03cea     70 60 60 60 
03cee     60 60 60 66 
03cf2     66 3C 00 00 
03cf6     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
03cfa     66 36 1E 1E 
03cfe     36 66 67 00 
03d02     00 00 00 00 
03d06     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
03d0a     18 18 18 18 
03d0e     18 18       | 	byte	$18[6]
03d10     3C 00 00 00 
03d14     00 00 00 00 
03d18     00 00 37 7F 
03d1c     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
03d20     63 00 00 00 
03d24     00 00 00 00 
03d28     00 00 3B 66 
03d2c     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
03d30     66 00 00 00 
03d34     00 00 00 00 
03d38     00 00 3E 63 
03d3c     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
03d40     3E 00 00 00 
03d44     00 00 00 00 
03d48     00 00 3B 66 
03d4c     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
03d50     3E 06 06 0F 
03d54     00 00 00 00 
03d58     00 00 6E 33 
03d5c     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
03d60     3E 30 30 78 
03d64     00 00 00 00 
03d68     00 00 3B 6E 
03d6c     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
03d70     0F 00 00 00 
03d74     00 00 00 00 
03d78     00 00 3E 63 
03d7c     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
03d80     3E 00 00 00 
03d84     00 00 00 08 
03d88     0C 0C 3F 0C 
03d8c     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
03d90     38 00 00 00 
03d94     00 00 00 00 
03d98     00 00 33 33 
03d9c     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
03da0     6E 00 00 00 
03da4     00 00 00 00 
03da8     00 00 63 63 
03dac     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
03db0     1C 00 00 00 
03db4     00 00 00 00 
03db8     00 00 63 63 
03dbc     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
03dc0     36 00 00 00 
03dc4     00 00 00 00 
03dc8     00 00 63 36 
03dcc     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
03dd0     63 00 00 00 
03dd4     00 00 00 00 
03dd8     00 00 63 63 
03ddc     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
03de0     7E 60 30 1F 
03de4     00 00 00 00 
03de8     00 00 7F 33 
03dec     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
03df0     7F 00 00 00 
03df4     00 00 00 70 
03df8     18 18 18 0E 
03dfc     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
03e00     70 00 00 00 
03e04     00 00 00 18 
03e08     18 18 18 18 
03e0c     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
03e10     18 00 00 00 
03e14     00 00 00 0E 
03e18     18 18 18 70 
03e1c     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
03e20     0E 00 00 00 
03e24     6E 3B 00 00 
03e28     00 00 00 00 
03e2c     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03e30     00 00 00 00 
03e34     00 00 00 00 
03e38     00 00       | 	byte	$00[10]
03e3a     08 1C 36 63 
03e3e     63 63 7F 00 
03e42     00 00 00 00 
03e46     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
03e4a     03 03 03 03 
03e4e     43 66 3C 18 
03e52     30 1E 00 00 
03e56     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
03e5a     33 33 33 33 
03e5e     33 33       | 	byte	$33[6]
03e60     6E 00 00 00 
03e64     00 00 60 30 
03e68     18 00 3E 63 
03e6c     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
03e70     3E 00 00 00 
03e74     00 00 08 1C 
03e78     36 00 1E 30 
03e7c     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
03e80     6E 00 00 00 
03e84     00 00 00 00 
03e88     33 00 1E 30 
03e8c     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
03e90     6E 00 00 00 
03e94     00 00 1C 36 
03e98     1C 00 33 33 
03e9c     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
03ea0     6E 00 00 00 
03ea4     00 00 60 30 
03ea8     18 00 3E 63 
03eac     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
03eb0     3E 00 00 00 
03eb4     00 00 00 00 
03eb8     00 00 3E 63 
03ebc     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
03ec0     3E 18 30 1E 
03ec4     00 00 00 1C 
03ec8     58 78 38 18 
03ecc     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
03ed0     3C 00 00 00 
03ed4     00 00 00 00 
03ed8     63 00 3E 63 
03edc     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
03ee0     3E 00 00 00 
03ee4     66 33 00 3E 
03ee8     63 63 63 63 
03eec     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03ef0     3E 00 00 00 
03ef4     00 00 CC 66 
03ef8     33 00 3E 63 
03efc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
03f00     3E 00 00 00 
03f04     00 00 18 3C 
03f08     66 00 1C 18 
03f0c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
03f10     3C 00 00 00 
03f14     30 18 00 7F 
03f18     63 61 30 18 
03f1c     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
03f20     7F 00 00 00 
03f24     00 63 00 08 
03f28     1C 36 63 63 
03f2c     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
03f30     63 00 00 00 
03f34     30 18 00 3C 
03f38     66 43 03 03 
03f3c     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
03f40     3C 00 00 00 
03f44     30 18 00 7F 
03f48     66 46 16 1E 
03f4c     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
03f50     7F 00 00 00 
03f54     0C 06 00 0F 
03f58     06 06 06 06 
03f5c     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
03f60     7F 00 00 00 
03f64     30 18 00 1C 
03f68     18 18 18 18 
03f6c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
03f70     3C 00 00 00 
03f74     00 00 08 1C 
03f78     36 00 3E 63 
03f7c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
03f80     3E 00 00 00 
03f84     00 00 00 00 
03f88     63 00 3E 63 
03f8c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
03f90     3E 00 00 00 
03f94     00 00 00 6F 
03f98     46 26 06 06 
03f9c     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
03fa0     7F 00 00 00 
03fa4     00 00 00 6E 
03fa8     4C 2C 0C 0C 
03fac     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
03fb0     1E 00 00 00 
03fb4     30 18 00 3E 
03fb8     63 63 06 1C 
03fbc     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
03fc0     3E 00 00 00 
03fc4     00 00 60 30 
03fc8     18 00 3E 63 
03fcc     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
03fd0     3E 00 00 00 
03fd4     00 63 00 3E 
03fd8     63 63 63 63 
03fdc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03fe0     3E 00 00 00 
03fe4     00 63 00 63 
03fe8     63 63 63 63 
03fec     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
03ff0     3E 00 00 00 
03ff4     6C 38 00 7E 
03ff8     7E 5A 18 18 
03ffc     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04000     3C 00 00 00 
04004     00 00 60 48 
04008     2C 0C 3F 0C 
0400c     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04010     38 00 00 00 
04014     00 00 00 0F 
04018     26 36 1E 0E 
0401c     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
04020     7F 00 00 00 
04024     00 00 00 00 
04028     00 63 36 1C 
0402c     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
04030     00 00 00 00 
04034     00 00       | 	byte	$00[6]
04036     36 1C 08 00 
0403a     3E 63 03 03 
0403e     03 63 3E 00 
04042     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
04046     30 18 0C 00 
0404a     1E 30 3E 33 
0404e     33 33 6E 00 
04052     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
04056     60 30 18 00 
0405a     1C 18 18 18 
0405e     18 18 3C 00 
04062     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
04066     60 30 18 00 
0406a     3E 63 63 63 
0406e     63 63 3E 00 
04072     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
04076     30 18 0C 00 
0407a     33 33 33 33 
0407e     33 33 6E 00 
04082     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
04086     00 08 1C 36 
0408a     63 63 7F 63 
0408e     63 63 63 18 
04092     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
04096     00 00 00 00 
0409a     1E 30 3E 33 
0409e     33 33 6E 18 
040a2     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
040a6     00 7F 63 61 
040aa     30 18 0C 06 
040ae     43 63 7F 00 
040b2     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
040b6     36 1C 08 00 
040ba     7F 33 18 0C 
040be     06 63 7F 00 
040c2     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
040c6     00 7F 66 46 
040ca     16 1E 16 06 
040ce     46 66 7F 18 
040d2     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
040d6     00 00 00 00 
040da     3E 63 7F 03 
040de     03 63 3E 18 
040e2     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
040e6     00 3C 66 03 
040ea     1F 03 0F 03 
040ee     03 66 3C 00 
040f2     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
040f6     60 30 18 00 
040fa     7F 33 18 0C 
040fe     06 63 7F 00 
04102     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
04106     00 3C 66 43 
0410a     03 03 03 03 
0410e     43 66 3C 00 
04112     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
04116     00 00 00 00 
0411a     3E 63 06 1C 
0411e     30 63 3E 18 
04122     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
04126     00 00 00 00 
0412a     00 00       | 	byte	$00[6]
0412c     6C 36 1B 36 
04130     6C 00 00 00 
04134     00 00 00 00 
04138     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0413c     1B 36 6C 36 
04140     1B 00 00 00 
04144     88 22 88 22 
04148     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
0414c     88 22 88 22 
04150     88 22 88 22 
04154     AA 55 AA 55 
04158     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
0415c     AA 55 AA 55 
04160     AA 55 AA 55 
04164     BB EE BB EE 
04168     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
0416c     BB EE BB EE 
04170     BB EE BB EE 
04174     18 18 18 18 
04178     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
0417c     18 18 18 18 
04180     18 18 18 18 
04184     18 18 18 18 
04188     18 18 18    | 	byte	$18[15]
0418b     1F 18 18 18 
0418f     18 18 18 18 
04193     18 30 18 00 
04197     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
0419b     63 7F 63 63 
0419f     63 63 00 00 
041a3     00 1C 36 00 
041a7     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
041ab     63 7F 63 63 
041af     63 63 00 00 
041b3     00 36 1C 00 
041b7     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
041bb     1E 16 06 46 
041bf     66 7F 00 00 
041c3     00 00 00 00 
041c7     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
041cb     1C 30 60 63 
041cf     63 3E 18 30 
041d3     1E 6C 6C 6C 
041d7     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
041db     6F 6C 6C 6C 
041df     6C 6C 6C 6C 
041e3     6C 6C 6C 6C 
041e7     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
041eb     6C 6C 6C 6C 
041ef     6C 6C 6C 6C 
041f3     6C          | 	byte	$6c[9]
041f4     00 00 00 00 
041f8     00          | 	byte	$00[5]
041f9     7F 60 6F 6C 
041fd     6C 6C 6C 6C 
04201     6C 6C 6C 6C 
04205     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04209     6F 60 7F 00 
0420d     00 00 00 00 
04211     00 00 00 18 
04215     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
04219     61 30 18 0C 
0421d     06 43 63 7F 
04221     00 00 00 00 
04225     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
04229     00 7F 33 18 
0422d     0C 06 63 7F 
04231     00 00 00 00 
04235     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
04239     00 00 1F 18 
0423d     18 18 18 18 
04241     18 18 18 18 
04245     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04249     18 18 F8 00 
0424d     00 00 00 00 
04251     00 00 00 18 
04255     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
04259     18 18 FF 00 
0425d     00 00 00 00 
04261     00 00 00 00 
04265     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04269     00 00 FF 18 
0426d     18 18 18 18 
04271     18 18 18 18 
04275     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04279     18 18 F8 18 
0427d     18 18 18 18 
04281     18 18 18 00 
04285     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
04289     00 00 FF 00 
0428d     00 00 00 00 
04291     00 00 00 18 
04295     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
04299     18 18 FF 18 
0429d     18 18 18 18 
042a1     18 18 18 63 
042a5     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
042a9     36 63 63 7F 
042ad     63 63 63 63 
042b1     00 00 00 00 
042b5     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
042b9     00 1E 30 3E 
042bd     33 33 33 6E 
042c1     00 00 00 6C 
042c5     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
042c9     EC 0C FC 00 
042cd     00 00 00 00 
042d1     00 00 00 00 
042d5     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
042d9     FC 0C EC 6C 
042dd     6C 6C 6C 6C 
042e1     6C 6C 6C 6C 
042e5     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
042e9     EF 00 FF 00 
042ed     00 00 00 00 
042f1     00 00 00 00 
042f5     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
042f9     FF 00 EF 6C 
042fd     6C 6C 6C 6C 
04301     6C 6C 6C 6C 
04305     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04309     EC 0C EC 6C 
0430d     6C 6C 6C 6C 
04311     6C 6C 6C 00 
04315     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04319     FF 00 FF 00 
0431d     00 00 00 00 
04321     00 00 00 6C 
04325     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
04329     EF 00 EF 6C 
0432d     6C 6C 6C 6C 
04331     6C 6C 6C 00 
04335     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04339     63 3E 63 63 
0433d     63 63 3E 63 
04341     00 00 00 00 
04345     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
04349     30 3C 36 33 
0434d     33 33 33 6E 
04351     00 00 00 00 
04355     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
04359     66 66 6F 66 
0435d     66 66 36 1F 
04361     00 00 00 36 
04365     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
04369     66 66 66 66 
0436d     66 66       | 	byte	$66[6]
0436f     36 1F 00 00 
04373     00 00 63 00 
04377     7F 66 46 16 
0437b     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
0437f     66 7F 00 00 
04383     00 6C 38 00 
04387     38 30 30 3C 
0438b     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
0438f     33 6E 00 00 
04393     00 36 1C 00 
04397     63 67 6F 7F 
0439b     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
0439f     63 63 00 00 
043a3     00 30 18 00 
043a7     3C 18 18 18 
043ab     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
043af     18 3C 00 00 
043b3     00 3C 66 00 
043b7     3C 18 18 18 
043bb     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
043bf     18 3C 00 00 
043c3     00 00 00 36 
043c7     1C 08 00 3E 
043cb     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
043cf     63 3E 00 00 
043d3     00 18 18 18 
043d7     18 18 18 18 
043db     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
043df     00 00 00 00 
043e3     00 00 00 00 
043e7     00 00 00 00 | 	byte	$00[12]
043eb     F8 18 18 18 
043ef     18 18 18 18 
043f3     18 FF FF FF 
043f7     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
043fb     FF FF FF FF 
043ff     FF FF FF FF 
04403     FF          | 	byte	$ff[9]
04404     00 00 00 00 
04408     00 00 00    | 	byte	$00[7]
0440b     FF FF FF FF 
0440f     FF FF FF FF 
04413     FF          | 	byte	$ff[9]
04414     00 00 00 7E 
04418     7E 5A 18 18 
0441c     18 18 18 18 
04420     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
04424     1C 36 1C 63 
04428     63 63 63 63 
0442c     63 63 63 63 
04430     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04434     FF FF FF FF 
04438     FF FF FF    | 	byte	$ff[7]
0443b     00 00 00 00 
0443f     00 00 00 00 
04443     00          | 	byte	$00[9]
04444     30 18 00 3E 
04448     63 63 63 63 
0444c     63 63 63 63 
04450     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04454     00 00 00 1E 
04458     33 33 33 1B 
0445c     33 63 63 63 
04460     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
04464     1C 36 00 3E 
04468     63 63 63 63 
0446c     63 63 63 63 
04470     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04474     30 18 00 63 
04478     67 6F 7F 7B 
0447c     73 63 63 63 
04480     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
04484     00 00 60 30 
04488     18 00 3B 66 
0448c     66 66 66 66 
04490     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
04494     00 00 36 1C 
04498     08 00 3B 66 
0449c     66 66 66 66 
044a0     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
044a4     36 1C 00 3E 
044a8     63 63 06 1C 
044ac     30 60 63 63 
044b0     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
044b4     00 00 36 1C 
044b8     08 00 3E 63 
044bc     06 1C 30 63 
044c0     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
044c4     30 18 00 3F 
044c8     66 66 66 3E 
044cc     36 66 66 66 
044d0     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
044d4     30 18 00 63 
044d8     63 63 63 63 
044dc     63 63 63 63 
044e0     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
044e4     00 00 60 30 
044e8     18 00 3B 6E 
044ec     66 06 06 06 
044f0     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
044f4     66 33 00 63 
044f8     63 63 63 63 
044fc     63 63 63 63 
04500     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04504     00 00 60 30 
04508     18 00 63 63 
0450c     63 63 63 63 
04510     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
04514     30 18 00 66 
04518     66 66 66 3C 
0451c     18 18 18 18 
04520     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
04524     00 00 00 08 
04528     0C 0C 3F 0C 
0452c     0C 0C 0C 6C 
04530     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
04534     30 18 00 00 
04538     00 00 00 00 
0453c     00 00 00 00 
04540     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04544     00 00 00 00 
04548     00 00 00 00 | 	byte	$00[8]
0454c     7F 00 00 00 
04550     00 00 00 00 
04554     66 33 00 00 
04558     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
0455c     00 00 00 00 
04560     00 00 00 00 
04564     00 00 00 00 
04568     00 00 00 00 
0456c     00 00 00 00 
04570     00          | 	byte	$00[21]
04571     0C 06 3C 36 
04575     1C 00 00 00 
04579     00 00 00 00 
0457d     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04581     00 00 00 63 
04585     3E 00 00 00 
04589     00 00 00 00 
0458d     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04591     00 00 00 00 
04595     3E 63 06 1C 
04599     36 63 63 36 
0459d     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
045a1     00 00 00 00 
045a5     00 00 00 00 | 	byte	$00[8]
045a9     18 00 7E 00 
045ad     18 00 00 00 
045b1     00 00 00 00 
045b5     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
045b9     00 00 00 00 
045bd     00 00 00 00 | 	byte	$00[8]
045c1     18 30 1E 00 
045c5     00 00 1C 36 
045c9     36 1C 00 00 
045cd     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
045d1     00 00 00 00 
045d5     63 00 00 00 
045d9     00 00 00 00 
045dd     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
045e1     00 00 00 18 
045e5     18 00 00 00 
045e9     00 00 00 00 
045ed     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
045f1     00 00 00 00 
045f5     00          | 	byte	$00[5]
045f6     CC 66 33 00 
045fa     33 33 33 33 
045fe     33 33 6E 00 
04602     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
04606     00 3F 66 66 
0460a     66 3E 36 66 
0460e     66 66 6F 00 
04612     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
04616     36 1C 08 00 
0461a     3B 6E 66 06 
0461e     06 06 0F 00 
04622     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
04626     00 00 00 7E 
0462a     7E 7E 7E 7E 
0462e     7E 7E 00 00 
04632     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
04636     00 00 00 00 
0463a     00 00 00 00 
0463e     00 00 00 00 
04642     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04644     00 00 00 00 
      ...             
04674     00 00 00 00 
04678     00 00 00    | st_font        file "st4font.def"
0467b     FF FF 00 00 
0467f     00 00 00 00 
04683     00 18 18 18 
04687     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0468b     18 18 18 18 
0468f     18 18 18 18 
04693     18          | 	byte	$18[9]
04694     00 00 00 00 
04698     00 00 00    | 	byte	$00[7]
0469b     FF FF 18 18 
0469f     18 18 18 18 
046a3     18 18 18 18 
046a7     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
046ab     FF FF 00 00 
046af     00 00 00 00 
046b3     00 18 18 18 
046b7     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
046bb     1F 1F 18 18 
046bf     18 18 18 18 
046c3     18 18 18 18 
046c7     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
046cb     F8 F8 18 18 
046cf     18 18 18 18 
046d3     18 00 00 00 
046d7     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
046db     1F 1F 18 18 
046df     18 18 18 18 
046e3     18 00 00 00 
046e7     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
046eb     F8 F8 18 18 
046ef     18 18 18 18 
046f3     18 18 18 18 
046f7     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
046fb     1F 1F 00 00 
046ff     00 00 00 00 
04703     00 18 18 18 
04707     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0470b     F8 F8 00 00 
0470f     00 00 00 00 
04713     00 18 18 18 
04717     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0471b     FF FF 18 18 
0471f     18 18 18 18 
04723     18 00 00 18 
04727     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
0472b     66 7E 7E 66 
0472f     66 66 66 30 
04733     18 00 00 7E 
04737     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
0473b     3E 06 06 06 
0473f     06 7E 7E 18 
04743     0C 30 18 3C 
04747     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
0474b     06 06 06 66 
0474f     66 7E 3C 00 
04753     00 30 18 66 
04757     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
0475b     7E 7E 76 76 
0475f     66 66 66 00 
04763     00 30 18 7C 
04767     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
0476b     1C 38 70 60 
0476f     60 7E 3E 00 
04773     00 30 18 7E 
04777     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
0477b     18 0C 0C 06 
0477f     06 7E 7E 00 
04783     00 18 18 00 
04787     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
0478b     18 18 0C 0C 
0478f     06 7E 7E 00 
04793     00 30 18 3C 
04797     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
0479b     66 66 66 66 
0479f     66          | 	byte	$66[5]
047a0     7E 3C 00 00 
047a4     00 00 06 06 
047a8     06 06 16 1E 
047ac     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
047b0     7E 7E 00 00 
047b4     00 00 00 00 
047b8     00 3C 7C 60 
047bc     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
047c0     7E 7C 30 18 
047c4     00 00 00 00 
047c8     00 3C 7E 66 
047cc     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
047d0     7E 7C 18 0C 
047d4     00 00 30 18 
047d8     00 3C 3E 06 
047dc     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
047e0     7E 7C 00 00 
047e4     00 00 30 18 
047e8     00 3E 7E 66 
047ec     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
047f0     66 66 00 00 
047f4     00 00 30 18 
047f8     00 7C 7E 06 
047fc     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
04800     7E 3E 00 00 
04804     00 00 30 18 
04808     00 7E 7E 30 
0480c     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04810     7E 7E 00 00 
04814     00 00 18 18 
04818     00 7E 7E 30 
0481c     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04820     7E 7E 00 00 
04824     00 00 30 18 
04828     00 3C 7E 66 
0482c     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
04830     7E 3C 00 00 
04834     00 00 1C 1C 
04838     18 18 38 3C 
0483c     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
04840     3C 3C 00 00 
04844     00 00 00 00 
04848     00 00 00 00 
0484c     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04850     00 00 00 00 
04854     00 00       | 	byte	$00[6]
04856     18 18 18 18 
0485a     18 18 18 18 | 	byte	$18[8]
0485e     00 00 18 18 
04862     00 00 00 00 
04866     66 66 66 66 
0486a     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
0486e     00 00 00 00 
04872     00 00 00 00 
04876     00          | 	byte	$00[9]
04877     66 66 FF FF 
0487b     66 66 FF FF 
0487f     66 66 00 00 
04883     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
04887     7C 7E 06 06 
0488b     3E 7C 60 60 
0488f     7E 3E 18 18 
04893     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
04897     66 30 30 18 
0489b     18 0C 0C 66 
0489f     66 00 00 00 
048a3     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
048a7     66 66 3C 1C 
048ab     1C FC FE 66 
048af     66 FE FC 00 
048b3     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
048b7     18 18 18 18 
048bb     00 00 00 00 
048bf     00 00 00 00 
048c3     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
048c7     18 1C 0C 0C 
048cb     0C 0C 0C 0C 
048cf     1C 18 30 00 
048d3     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
048d7     18 38 30 30 
048db     30 30 30 30 
048df     38 18 0C 00 
048e3     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
048e7     66 66 3C 3C 
048eb     FF FF 3C 3C 
048ef     66 66 00 00 
048f3     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
048f7     00 18 18 18 
048fb     7E 7E 18 18 
048ff     18 00 00 00 
04903     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04907     00 00 00 00 
0490b     00 00       | 	byte	$00[6]
0490d     18 18 18 18 
04911     18          | 	byte	$18[5]
04912     0C 04 00 00 
04916     00 00 00 00 
0491a     7E 7E 00 00 
0491e     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
04922     00 00 00 00 
04926     00 00 00 00 
0492a     00 00 00 00 
0492e     00          | 	byte	$00[13]
0492f     18 18 18 00 
04933     00 00 00 60 
04937     60 60 30 30 
0493b     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
0493f     06 06 06 00 
04943     00 00 00 3C 
04947     7E 66 66 66 
0494b     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
0494f     66 7E 3C 00 
04953     00 00 00 18 
04957     18 1C 1C 18 
0495b     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
0495f     18 7E 7E 00 
04963     00 00 00 3C 
04967     7E 66 66 30 
0496b     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
0496f     0C 7E 7E 00 
04973     00 00 00 7E 
04977     7E 30 30 18 
0497b     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
0497f     66 7E 3C 00 
04983     00 00 00 30 
04987     30 38 38 3C 
0498b     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
0498f     7E 30 30 00 
04993     00 00 00 7E 
04997     7E 06 06 3E 
0499b     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
0499f     66 7E 3C 00 
049a3     00 00 00 38 
049a7     3C 0E 06 06 
049ab     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
049af     66 7E 3C 00 
049b3     00 00 00 7E 
049b7     7E 60 60 30 
049bb     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
049bf     0C 0C 0C 00 
049c3     00 00 00 3C 
049c7     7E 66 66 3C 
049cb     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
049cf     66 7E 3C 00 
049d3     00 00 00 3C 
049d7     7E 66 66 7E 
049db     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
049df     70 3C 1C 00 
049e3     00 00 00 00 
049e7     00 00 18 18 
049eb     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
049ef     18 18 18 00 
049f3     00 00 00 00 
049f7     00 00 18 18 
049fb     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
049ff     18 18 18 0C 
04a03     04 00 00 00 
04a07     70 38 1C 0E 
04a0b     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
04a0f     70 00 00 00 
04a13     00 00 00 00 
04a17     00 00 7E 7E 
04a1b     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
04a1f     00 00 00 00 
04a23     00 00 00 00 | 	byte	$00[8]
04a27     0E 1C 38 70 
04a2b     E0 70 38 1C 
04a2f     0E 00 00 00 
04a33     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
04a37     7E 66 66 30 
04a3b     30 18 18 18 
04a3f     00 18 18 00 
04a43     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
04a47     7E 66 66 66 
04a4b     66 36 06 66 
04a4f     66 7E 3C 00 
04a53     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
04a57     3C 7E 66 66 
04a5b     66 7E 7E 66 
04a5f     66 66 66 00 
04a63     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
04a67     7E 66 66 7E 
04a6b     3E 66 66 66 
04a6f     66 7E 3E 00 
04a73     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
04a77     7E 66 66 06 
04a7b     06 06 06 66 
04a7f     66 7E 3C 00 
04a83     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
04a87     7E 66 66 66 
04a8b     66 66 66 66 
04a8f     66 7E 3E 00 
04a93     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
04a97     7E 06 06 3E 
04a9b     3E 06 06 06 
04a9f     06 7E 7E 00 
04aa3     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
04aa7     7E 06 06 3E 
04aab     3E 06 06 06 
04aaf     06 06 06 00 
04ab3     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
04ab7     7E 06 06 76 
04abb     76 66 66 66 
04abf     66 7E 3C 00 
04ac3     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
04ac7     66 66 66 7E 
04acb     7E 66 66 66 
04acf     66 66 66 00 
04ad3     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
04ad7     7E 18 18 18 
04adb     18 18 18 18 
04adf     18 7E 7E 00 
04ae3     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
04ae7     60 60 60 60 
04aeb     60 60 60    | 	byte	$60[7]
04aee     66 66 7E 3C 
04af2     00 00 00 00 
04af6     66 66 36 36 
04afa     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
04afe     66 66 C6 C6 
04b02     00 00 00 00 
04b06     06 06 06 06 
04b0a     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
04b0e     06 06 7E 7E 
04b12     00 00 00 00 
04b16     C6 C6 EE EE 
04b1a     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
04b1e     C6 C6 C6 C6 
04b22     00 00 00 00 
04b26     66 66 66 6E 
04b2a     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
04b2e     76 66 66 66 
04b32     00 00 00 00 
04b36     3C 7E 66 66 
04b3a     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04b3e     66 66 7E 3C 
04b42     00 00 00 00 
04b46     3E 7E 66 66 
04b4a     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
04b4e     06 06 06 06 
04b52     00 00 00 00 
04b56     3C 7E 66 66 
04b5a     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04b5e     66 56 3E 6C 
04b62     00 00 00 00 
04b66     3E 7E 66 66 
04b6a     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
04b6e     66 66 C6 C6 
04b72     00 00 00 00 
04b76     7C 7E 06 06 
04b7a     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
04b7e     60 60 7E 3E 
04b82     00 00 00 00 
04b86     7E 7E 18 18 
04b8a     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
04b8e     18 18 18 18 
04b92     00 00 00 00 
04b96     66 66 66 66 
04b9a     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04b9e     66 66 7E 3C 
04ba2     00 00 00 00 
04ba6     66 66 66 66 
04baa     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04bae     3C 3C 18 18 
04bb2     00 00 00 00 
04bb6     C6 C6 C6 C6 
04bba     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
04bbe     FE EE C6 82 
04bc2     00 00 00 00 
04bc6     66 66 66 3C 
04bca     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
04bce     3C 66 66 66 
04bd2     00 00 00 00 
04bd6     66 66 66 66 
04bda     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
04bde     18 18 18 18 
04be2     00 00 00 00 
04be6     7E 7E 30 30 
04bea     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
04bee     06 06 7E 7E 
04bf2     00 00 00 00 
04bf6     3C 3C 0C 0C 
04bfa     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
04bfe     0C 0C 3C 3C 
04c02     00 00 00 00 
04c06     06 06 0C 0C 
04c0a     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
04c0e     60 60 C0 C0 
04c12     00 00 00 00 
04c16     3C 3C 30 30 
04c1a     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
04c1e     30 30 3C 3C 
04c22     00 00 00 00 
04c26     18 18 3C 3C 
04c2a     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
04c2e     00 00 00 00 
04c32     00 00 00 00 
04c36     00 00 00 00 
04c3a     00 00 00 00 
04c3e     00 00       | 	byte	$00[18]
04c40     FE FE 00 00 
04c44     00 00 0C 0C 
04c48     18 18 00 00 
04c4c     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
04c50     00 00 00 00 
04c54     00 00 00 00 
04c58     00          | 	byte	$00[9]
04c59     3C 7C 60 7C 
04c5d     7E 66 66 7E 
04c61     7C 00 00 00 
04c65     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
04c69     3E 7E 66 66 
04c6d     66 66 66 7E 
04c71     3E 00 00 00 
04c75     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
04c79     3C 3E 06 06 
04c7d     06 06 06 7E 
04c81     7C 00 00 00 
04c85     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
04c89     7C 7E 66 66 
04c8d     66 66 66 7E 
04c91     7C 00 00 00 
04c95     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
04c99     3C 7E 66 66 
04c9d     7E 06 06 7E 
04ca1     7C 00 00 00 
04ca5     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
04ca9     18 7E 7E 18 
04cad     18 18 18 18 
04cb1     18 00 00 00 
04cb5     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04cb9     7C 7E 66 66 
04cbd     66 66 7E 7C 
04cc1     60 7E 3E 00 
04cc5     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
04cc9     3E 7E 66 66 
04ccd     66 66 66 66 
04cd1     66 00 00 00 
04cd5     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
04cd9     1C 1C 18 18 
04cdd     18 18 18 3C 
04ce1     3C 00 00 00 
04ce5     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
04ce9     30 30 30 30 
04ced     30 30 30 30 
04cf1     30          | 	byte	$30[9]
04cf2     3E 1E 00 00 
04cf6     06 06 06 36 
04cfa     36 1E 1E 1E 
04cfe     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
04d02     00 00 00 00 
04d06     1C 1C 18 18 
04d0a     18 18 18 18 
04d0e     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
04d12     00 00 00 00 
04d16     00 00 00    | 	byte	$00[7]
04d19     6C FE FE D6 
04d1d     D6 C6 C6 C6 
04d21     C6 00 00 00 
04d25     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
04d29     3E 7E 66 66 
04d2d     66 66 66 66 
04d31     66 00 00 00 
04d35     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
04d39     3C 7E 66 66 
04d3d     66 66 66 7E 
04d41     3C 00 00 00 
04d45     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
04d49     3E 7E 66 66 
04d4d     66 66 66 7E 
04d51     3E 06 06 00 
04d55     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
04d59     7C 7E 66 66 
04d5d     66 66 66 7E 
04d61     7C 60 60 00 
04d65     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
04d69     3E 7E 66 06 
04d6d     06 06 06 06 
04d71     06 00 00 00 
04d75     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
04d79     7C 7E 06 0E 
04d7d     3C 70 60 7E 
04d81     3E 00 00 00 
04d85     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
04d89     7E 7E 18 18 
04d8d     18 18 18 78 
04d91     70 00 00 00 
04d95     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
04d99     66 66 66 66 
04d9d     66 66 66    | 	byte	$66[7]
04da0     7E 7C 00 00 
04da4     00 00 00 00 
04da8     00 66 66 66 
04dac     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
04db0     18 18 00 00 
04db4     00 00 00 00 
04db8     00 C6 C6 D6 
04dbc     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
04dc0     C6 82 00 00 
04dc4     00 00 00 00 
04dc8     00 66 66 3C 
04dcc     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
04dd0     66 66 00 00 
04dd4     00 00 00 00 
04dd8     00 66 66 66 
04ddc     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
04de0     7C 60 7E 3E 
04de4     00 00 00 00 
04de8     00 7E 7E 30 
04dec     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04df0     7E 7E 00 00 
04df4     00 00 30 18 
04df8     18 18 18 0C 
04dfc     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
04e00     18 30 00 00 
04e04     00 00 18 18 
04e08     18 18 18 18 
04e0c     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04e10     18 18 00 00 
04e14     00 00 0C 18 
04e18     18 18 18 30 
04e1c     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
04e20     18 0C 00 00 
04e24     00 00 6C 7E 
04e28     36 00 00 00 
04e2c     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
04e30     00 00 00 00 
04e34     00 00 00 00 
04e38     00          | 	byte	$00[9]
04e39     18 18 18 18 
04e3d     18 18 00 00 
04e41     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
04e44     00 00 00 00 
04e48     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
04e4c     00 00 00 00 
04e50     00 80 80 80 
04e54     00 00 00 FF 
04e58     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
04e5c     00 00 00 00 
04e60     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
04e61     80 00 00 00 
04e65     00 80 00 00 
04e69     80 80 00 00 
04e6d     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
04e71     80 00 80 00 
04e75     00 40 80 00 
04e79     AA AA AA 00 
04e7d     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
04e81     FF 00 00 00 
04e85     00 FF 00 00 
04e89     FF FF 00 00 
04e8d     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
04e91     FF 00 FF 00 
04e95     00 FF FF 00 
04e99     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
04e9c     00 00 00 00 
04ea0     00          | ataripalette   file "ataripalettep2.def"
04ea1     11 11 11 00 
04ea5     22 22 22 00 
04ea9     33 33 33 00 
04ead     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
04eb1     55 55 55 00 
04eb5     66 66 66 00 
04eb9     77 77 77 00 
04ebd     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
04ec1     99 99 99 00 
04ec5     AA AA AA 00 
04ec9     BB BB BB 00 
04ecd     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
04ed1     DD DD DD 00 
04ed5     EE EE EE 00 
04ed9     FF FF FF 00 
04edd     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
04ee1     00 14 40 00 
04ee5     00 1E 60 00 
04ee9     00 28 80 00 
04eed     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
04ef1     00 3C BF 00 
04ef5     00 46 DF 00 
04ef9     00 50 FF 00 
04efd     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
04f01     39 77 FF 00 
04f05     55 8A FF 00 
04f09     71 9E FF 00 
04f0d     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
04f11     AA C5 FF 00 
04f15     C6 D8 FF 00 
04f19     E3 EC FF 00 
04f1d     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
04f21     00 00 40 00 
04f25     00 00 60 00 
04f29     00 00 80 00 
04f2d     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
04f31     00 00 BF 00 
04f35     00 00 DF 00 
04f39     00 00 FF 00 
04f3d     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
04f41     39 39 FF 00 
04f45     55 55 FF 00 
04f49     71 71 FF 00 
04f4d     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
04f51     AA AA FF 00 
04f55     C6 C6 FF 00 
04f59     E3 E3 FF 00 
04f5d     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
04f61     20 00 40 00 
04f65     30 00 60 00 
04f69     40 00 80 00 
04f6d     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
04f71     60 00 BF 00 
04f75     70 00 DF 00 
04f79     80 00 FF 00 
04f7d     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
04f81     9C 39 FF 00 
04f85     AA 55 FF 00 
04f89     B8 71 FF 00 
04f8d     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
04f91     D5 AA FF 00 
04f95     E3 C6 FF 00 
04f99     F1 E3 FF 00 
04f9d     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
04fa1     40 00 40 00 
04fa5     60 00 60 00 
04fa9     80 00 80 00 
04fad     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
04fb1     BF 00 BF 00 
04fb5     DF 00 DF 00 
04fb9     FF 00 FF 00 
04fbd     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
04fc1     FF 39 FF 00 
04fc5     FF 55 FF 00 
04fc9     FF 71 FF 00 
04fcd     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
04fd1     FF AA FF 00 
04fd5     FF C6 FF 00 
04fd9     FF E3 FF 00 
04fdd     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
04fe1     40 00 20 00 
04fe5     60 00 30 00 
04fe9     80 00 40 00 
04fed     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
04ff1     BF 00 60 00 
04ff5     DF 00 70 00 
04ff9     FF 00 80 00 
04ffd     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
05001     FF 39 9C 00 
05005     FF 55 AA 00 
05009     FF 71 B8 00 
0500d     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
05011     FF AA D5 00 
05015     FF C6 E3 00 
05019     FF E3 F1 00 
0501d     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
05021     40 00 00 00 
05025     60 00 00 00 
05029     80 00 00 00 
0502d     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
05031     BF 00 00 00 
05035     DF 00 00 00 
05039     FF 00 00 00 
0503d     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
05041     FF 39 39 00 
05045     FF 55 55 00 
05049     FF 71 71 00 
0504d     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
05051     FF AA AA 00 
05055     FF C6 C6 00 
05059     FF E3 E3 00 
0505d     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
05061     40 10 00 00 
05065     60 18 00 00 
05069     80 20 00 00 
0506d     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
05071     BF 30 00 00 
05075     DF 38 00 00 
05079     FF 40 00 00 
0507d     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
05081     FF 6A 39 00 
05085     FF 80 55 00 
05089     FF 95 71 00 
0508d     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
05091     FF BF AA 00 
05095     FF D5 C6 00 
05099     FF EA E3 00 
0509d     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
050a1     40 20 00 00 
050a5     60 30 00 00 
050a9     80 40 00 00 
050ad     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
050b1     BF 60 00 00 
050b5     DF 70 00 00 
050b9     FF 80 00 00 
050bd     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
050c1     FF 9C 39 00 
050c5     FF AA 55 00 
050c9     FF B8 71 00 
050cd     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
050d1     FF D5 AA 00 
050d5     FF E3 C6 00 
050d9     FF F1 E3 00 
050dd     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
050e1     40 30 00 00 
050e5     60 48 00 00 
050e9     80 60 00 00 
050ed     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
050f1     BF 90 00 00 
050f5     DF A8 00 00 
050f9     FF C0 00 00 
050fd     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
05101     FF CE 39 00 
05105     FF D5 55 00 
05109     FF DC 71 00 
0510d     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
05111     FF EA AA 00 
05115     FF F1 C6 00 
05119     FF F8 E3 00 
0511d     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
05121     30 40 00 00 
05125     48 60 00 00 
05129     60 80 00 00 
0512d     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
05131     90 BF 00 00 
05135     A8 DF 00 00 
05139     C0 FF 00 00 
0513d     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
05141     CE FF 39 00 
05145     D5 FF 55 00 
05149     DC FF 71 00 
0514d     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
05151     EA FF AA 00 
05155     F1 FF C6 00 
05159     F8 FF E3 00 
0515d     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
05161     00 40 00 00 
05165     00 60 00 00 
05169     00 80 00 00 
0516d     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
05171     00 BF 00 00 
05175     00 DF 00 00 
05179     00 FF 00 00 
0517d     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
05181     39 FF 39 00 
05185     55 FF 55 00 
05189     71 FF 71 00 
0518d     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
05191     AA FF AA 00 
05195     C6 FF C6 00 
05199     E3 FF E3 00 
0519d     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
051a1     00 40 14 00 
051a5     00 60 1E 00 
051a9     00 80 28 00 
051ad     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
051b1     00 BF 3C 00 
051b5     00 DF 46 00 
051b9     00 FF 50 00 
051bd     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
051c1     39 FF 77 00 
051c5     55 FF 8A 00 
051c9     71 FF 9E 00 
051cd     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
051d1     AA FF C5 00 
051d5     C6 FF D8 00 
051d9     E3 FF EC 00 
051dd     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
051e1     00 40 28 00 
051e5     00 60 3C 00 
051e9     00 80 50 00 
051ed     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
051f1     00 BF 78 00 
051f5     00 DF 8C 00 
051f9     00 FF A0 00 
051fd     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
05201     39 FF B5 00 
05205     55 FF C0 00 
05209     71 FF CA 00 
0520d     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
05211     AA FF DF 00 
05215     C6 FF EA 00 
05219     E3 FF F4 00 
0521d     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
05221     00 40 40 00 
05225     00 60 60 00 
05229     00 80 80 00 
0522d     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
05231     00 BF BF 00 
05235     00 DF DF 00 
05239     00 FF FF 00 
0523d     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
05241     39 FF FF 00 
05245     55 FF FF 00 
05249     71 FF FF 00 
0524d     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
05251     AA FF FF 00 
05255     C6 FF FF 00 
05259     E3 FF FF 00 
0525d     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
05261     00 28 40 00 
05265     00 3C 60 00 
05269     00 50 80 00 
0526d     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
05271     00 78 BF 00 
05275     00 8C DF 00 
05279     00 A0 FF 00 
0527d     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
05281     39 B5 FF 00 
05285     55 C0 FF 00 
05289     71 CA FF 00 
0528d     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
05291     AA DF FF 00 
05295     C6 EA FF 00 
05299     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
0529c                 | '**********************************************************************************
0529c                 | '
0529c                 | '        Timings and colors definitions
0529c                 | '
0529c                 | '**********************************************************************************
0529c                 | 
0529c                 |    'streamer sets for text mode, to add to timings[0..5]
0529c                 | ' todo for the retromachine: 768x576
0529c                 | 
0529c                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
0529c     10 00 00 00 
052a0     50 00 00 00 
052a4     14 00 00 00 
052a8     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
052ac     70 00 00 00 
052b0     08 00 00 00 
052b4     30 00 00 00 
052b8     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
052bc     10 00 00 00 
052c0     10 00 00 00 
052c4     00 00 00 00 
052c8     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
052cc     E0 01 00 00 
052d0     F6 32 24 15 
052d4     FB 6C C3 01 
052d8     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
052dc                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
052dc                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
052dc     30 00 00 00 
052e0     50 00 00 00 
052e4     34 00 00 00 
052e8     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
052ec     20 00 00 00 
052f0     08 00 00 00 
052f4     16 00 00 00 
052f8     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
052fc     24 00 00 00 
05300     18 00 00 00 
05304     40 00 00 00 
05308     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
0530c     F0 01 00 00 
05310     F6 32 24 15 
05314     FB 6C C3 01 
05318     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
0531c                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
0531c     10 00 00 00 
05320     40 00 00 00 
05324     10 00 00 00 
05328     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
0532c     08 00 00 00 
05330     08 00 00 00 
05334     08 00 00 00 
05338     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
0533c     40 00 00 00 
05340     20 00 00 00 
05344     80 00 00 00 
05348     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
0534c     E0 01 00 00 
05350     70 AE E9 10 
05354     FB 8B FF 01 
05358     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
0535c     10 00 00 00 
05360     42 00 00 00 
05364     14 00 00 00 
05368     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
0536c     00 00 00 00 
05370     08 00 00 00 
05374     00 00 00 00 
05378     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
0537c     10 00 00 00 
05380     10 00 00 00 
05384     C0 00 00 00 
05388     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
0538c     40 02 00 00 
05390     F6 32 24 15 
05394     FB 6C C3 01 
05398     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
0539c     50 00 00 00 
053a0     A0 00 00 00 
053a4     54 00 00 00 
053a8     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
053ac     08 00 00 00 
053b0     08 00 00 00 
053b4     08 00 00 00 
053b8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
053bc     0C 00 00 00 
053c0     08 00 00 00 
053c4     00 01 00 00 
053c8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
053cc     E0 01 00 00 
053d0     10 06 56 15 
053d4     FB 64 C3 01 
053d8     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
053dc     50 00 00 00 
053e0     32 00 00 00 
053e4     50 00 00 00 
053e8     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
053ec     08 00 00 00 
053f0     08 00 00 00 
053f4     08 00 00 00 
053f8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
053fc     0C 00 00 00 
05400     08 00 00 00 
05404     40 01 00 00 
05408     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
0540c     E0 01 00 00 
05410     F2 CD 33 13 
05414     FB 53 92 01 
05418     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
0541c     18 00 00 00 
05420     30 00 00 00 
05424     18 00 00 00 
05428     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
0542c     08 00 00 00 
05430     08 00 00 00 
05434     08 00 00 00 
05438     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
0543c     0C 00 00 00 
05440     08 00 00 00 
05444     80 01 00 00 
05448     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
0544c     E0 01 00 00 
05450     F4 8F 11 11 
05454     FB 3A 55 01 
05458     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
0545c     20 00 00 00 
05460     40 00 00 00 
05464     22 00 00 00 
05468     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
0546c     00 00 00 00 
05470     08 00 00 00 
05474     00 00 00 00 
05478     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
0547c     0C 00 00 00 
05480     08 00 00 00 
05484     C0 01 00 00 
05488     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
0548c     F0 01 00 00 
05490     F2 CD 33 13 
05494     FB 53 92 01 
05498     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
0549c                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
0549c     00 75 C7 97 
054a0     27 47 F6 0A 
054a4     05 79 CB 9B 
054a8     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
054ac                 | 
054ac     28 12 64 FD | hdmi            setq    #9
054b0     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
054b4                 |            '     setq2   #255
054b4                 |             '    rdlong  $100, paletteptr 
054b4     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
054b8     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
054bc     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
054c0     78 F9 02 F1 |                 add     ii,hbase
054c4     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
054c8     7B 0B 80 FF 
054cc     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
054d0                 | 
054d0     66 66 86 FF 
054d4     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
054d8                 | 
054d8                 | 
054d8                 | ''--------  frame rendering main loop  ---------------------------------------------------
054d8                 | 
054d8                 | p101
054d8     28 14 64 FD |                 setq    #10
054dc     00 DF 06 FB |                 rdlong  framebuf,  ptra
054e0     28 1E 64 FD |                 setq    #15
054e4     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
054e8     71 99 02 FB |                 rdlong  border,borderptr
054ec                 | 
054ec     01 C4 06 F1 |                 add     frames,#1
054f0     76 F5 02 F6 |                 mov     dlptr2,dlptr
054f4                 | 
054f4     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
054f8     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
054fc     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
05500     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
05504                 |  '' up porch
05504                 | 
05504     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
05508     49 FF 02 F6 |                 mov     hsync1,sync_001
0550c     37 A8 46 FB |                 callpa  i_upporch ,#blank
05510     72 01 68 FC |                 wrlong  #0,vblankptr
05514                 |                 
05514     1F EA 16 F4 |                 testb   paletteptr,#31 wc
05518     29 FE 65 3D |          if_nc  setq2   #255
0551c     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
05520                 | 
05520                 | '' cursor blinking
05520                 | 
05520     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
05524     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
05528                 | 
05528                 | '' main screen
05528                 | 
05528     00 BE 06 F6 |                 mov linenum,#0
0552c     00 18 07 F6 |                 mov rcnt,#0
05530     00 1C 07 F6 |                 mov rcnt2a,#0
05534                 | 
05534                 | 
05534     00 18 0F F2 | p301            cmp rcnt,#0 wz
05538     18 00 90 AD |         if_z    jmp #p306
0553c     01 18 87 F1 |                 sub rcnt,#1
05540     90 F7 02 F6 |                 mov dl,rdl
05544     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
05548     8F F7 02 A1 |    if_z        add dl,roffset  
0554c     7B 21 03 F6 |                 mov rdl,dl
05550     04 00 90 FD |                 jmp #p307          
05554                 |           
05554                 |                 
05554     7A F7 02 FB | p306            rdlong  dl,dlptr2
05558     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
0555c     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
05560     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
05564                 | 
05564                 | '' Special entry:
05564                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
05564                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
05564                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
05564                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
05564                 | '' todo: set horizontal scroll (if needed)
05564                 | 
05564     02 FA 66 F0 |                 shl framebuf2,#2
05568     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
0556c     04 22 0F F2 |                 cmp dlc,#%100 wz
05570                 |   
05570                 |                 
05570     04 F4 06 F1 |                 add dlptr2,#4
05574     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
05578     7A 21 03 FB |                  rdlong rdl,dlptr2
0557c     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
05580     04 18 47 F0 |                  shr rcnt,#4
05584                 |              
05584     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
05588     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
0558c                 |                 
0558c     04 1E 47 F0 |                  shr roffset,#4
05590     0C 1E 67 F0 |                  shl roffset,#12
05594                 |   
05594     9C FF 9F FD |                  jmp #p301
05598                 |                  
05598                 |                  
05598                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
05598     0C FA 46 F0 |                 shr     framebuf2,#12
0559c     02 FA 66 F0 |                 shl     framebuf2,#2
055a0                 | 
055a0     7B 03 E3 F8 |                 getbyte t1,dl,#0
055a4     00 02 0F F2 |                 cmp     t1,#0 wz
055a8     34 00 90 AD |     if_z        jmp     #borderline
055ac                 | 
055ac     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
055b0     50 00 90 CD |           if_c   jmp     #textline
055b4     50 02 90 3D |           if_nc  jmp     #graphline
055b8                 | '
055b8     01 BE 06 F1 | p302            add     linenum,#1
055bc     04 F4 06 F1 |                 add     dlptr2,#4
055c0     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
055c4     6C FF 9F 5D |          if_nz  jmp     #p301
055c8                 | 
055c8     72 03 68 FC | p112            wrlong  #1,vblankptr
055cc     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
055d0                 | 
055d0     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
055d4     4B FF 02 F6 |                 mov     hsync1,sync_223
055d8     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
055dc     F8 FE 9F FD |                 jmp     #p101
055e0                 | 
055e0                 | '' ---------------  END of frame rendering loop -------------------------------------------
055e0                 | 
055e0                 | 
055e0     14 00 B0 FD | borderline      call    #hsync                      ' make a border
055e4     4C A1 C2 FC |                 xcont   m_vi,border
055e8     CC FF 9F FD |                 jmp     #p302
055ec                 | 
055ec                 | 
055ec     08 00 B0 FD | blank           call    #hsync                          'blank lines
055f0     7E A1 C2 FC |                 xcont   m_vi,hsync0
055f4     FD ED 6F 0B |         _ret_   djnz    pa,#blank
055f8                 | 
055f8     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
055fc     7F 9D B2 FC |                 xzero   m_sn,hsync1
05600     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
05604                 | 
05604                 | 
05604                 | 
05604                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
05604                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
05604                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
05604                 | 
05604                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
05604                 | 
05604     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
05608                 | 
05608     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
0560c     7B 17 5B F8 |                 getnib  zoom, dl,#3
05610     03 16 07 F5 |                 and             zoom, #3
05614                 | 
05614                 | 
05614                 | 
05614     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
05618     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
0561c     3F BC 06 F5 |                 and     linestart,#63
05620     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
05624     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
05628                 | 
05628     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
0562c                 | 
0562c                 |                        ' if fontline =0, get a border color
0562c                 | 
0562c     51 03 33 F9 | p102            getword t1,m_border,#0
05630     00 02 0F F2 |                 cmp     t1, #0 wz
05634     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
05638                 | 
05638     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
0563c     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
05640     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
05644     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
05648     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
0564c     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
05650     52 BB 02 F6 |                 mov m_lut2, m_lut1
05654     6A BB 02 F1 |                 add m_lut2, lutt1
05658     58 0F 03 F6 |                 mov cpl2,i_cpl
0565c                 | 
0565c     02 16 0F F2 |                cmp zoom,#2 wz
05660     E4 00 90 AD |           if_z jmp #p420
05664     01 16 0F F2 |                cmp zoom,#1 wz
05668     64 00 90 AD |           if_z jmp #p410
0566c     00 16 0F F2 |                 cmp zoom,#0 wz
05670     04 00 90 AD |           if_z jmp #p400
05674     50 01 90 FD |                jmp #p430
05678                 | 
05678                 |                    '
05678                 |  ''---------------------------------------------------------------------------------------------------------
05678     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
0567c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05680     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05684     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05688     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
0568c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05690     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05694     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05698     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
0569c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
056a0                 | 
056a0     81 BB C2 FC |                         xcont m_lut2,t1
056a4                 | 
056a4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
056a8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
056ac     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
056b0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
056b4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
056b8     01 C0 86 F1 |                         sub     lutaddr,#1
056bc                 | 
056bc     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
056c0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
056c4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
056c8                 | 
056c8     EB 0F 6F FB |                         djnz   cpl2,#p400
056cc                 |                         
056cc                 | 
056cc                 |                         
056cc     28 01 90 FD |  p401                   jmp    #p103
056d0                 | 
056d0                 | ''------------------------------------------------------------------------------------------------------------
056d0                 | 
056d0     01 0E 47 F0 |  p410                   shr cpl2,#1
056d4                 | 
056d4                 | ''---------------------------------------------------------------------------------------------------------
056d4     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
056d8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
056dc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
056e0     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
056e4     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
056e8     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
056ec     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
056f0     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
056f4     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
056f8     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
056fc                 | 
056fc                 | 
056fc     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
05700     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
05704     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
05708     03 02 07 FA |                         mul t1,#3
0570c     81 BB C2 FC |                         xcont m_lut2,t1
05710     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05714     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05718     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
0571c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05720     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05724     01 C0 86 F1 |                         sub     lutaddr,#1
05728     63 06 63 FD |                         mergew t3
0572c     03 06 07 FA |                         mul t3,#3
05730     83 BB C2 FC |                         xcont m_lut2,t3
05734                 | 
05734     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05738     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
0573c                 | 
0573c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05740                 | 
05740     E4 0F 6F FB |                         djnz   cpl2,#p412
05744     B0 00 90 FD |  p411                   jmp    #p103
05748                 | 
05748                 | ''------------------------------------------------------------------------------------------------------------
05748                 | 
05748     02 0E 47 F0 |  p420                   shr cpl2,#2
0574c                 | 
0574c                 | ''---------------------------------------------------------------------------------------
0574c     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
05750     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05754     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05758     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
0575c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05760     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05764     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05768     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
0576c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05770     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05774                 | 
05774     61 02 63 FD |                         mergeb t1
05778     81 07 3B F9 |                         getword t3,t1,#1
0577c     0F 02 07 FA |                         mul t1,#15
05780     81 BB C2 FC |                         xcont m_lut2,t1
05784                 | 
05784     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05788     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
0578c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05790     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05794     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05798     01 C0 86 F1 |                         sub     lutaddr,#1
0579c                 | 
0579c     81 09 EB F8 |                         getbyte t4,t1,#1        '
057a0     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
057a4                 | 
057a4     0F 06 07 FA |                         mul t3,#15
057a8     83 BB C2 FC |                         xcont m_lut2,t3
057ac                 | 
057ac     83 0B EB F8 |                         getbyte t5,t3,#1
057b0     85 BB C2 FC |                         xcont m_lut2, t5
057b4     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
057b8     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
057bc                 | 
057bc     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
057c0                 | 
057c0     E2 0F 6F FB |                         djnz   cpl2,#p422
057c4     30 00 90 FD |  p421                   jmp    #p103
057c8                 | 
057c8                 | '--------------------------------------------------------------------------------------------------------------
057c8                 | 
057c8     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
057cc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
057d0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
057d4                 | 
057d4     00 BA C6 FC |                         xcont m_lut2,#0
057d8                 | 
057d8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
057dc     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
057e0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
057e4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
057e8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
057ec     01 C0 86 F1 |                         sub     lutaddr,#1
057f0                 | 
057f0     F5 0F 6F FB |                         djnz   cpl2,#p430
057f4     00 00 90 FD |  p431                   jmp    #p103
057f8                 | 
057f8                 | ''------------------------------------------------------------------------------------------------------------
057f8                 | 
057f8                 | 
057f8                 | 
057f8     51 25 33 F9 | p103            getword  mb2,m_border,#0
057fc     00 24 0F F2 |                 cmp      mb2, #0 wz
05800     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
05804                 | 
05804     B0 FD 9F FD |                 jmp #p302
05808                 | 
05808                 | '' -------------------------------------- END of text line ---------------------------------
05808                 | 
05808                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
05808                 | 
05808     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
0580c                 | 
0580c                 | 
0580c     51 25 33 F9 | p202            getword mb2,m_border,#0
05810     00 24 0F F2 |                 cmp     mb2, #0 wz
05814     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
05818                 | 
05818                 | '----------------------------------------- display pixels
05818                 | 
05818     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
0581c     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
05820                 | 
05820     7B 17 5B F8 |                 getnib  zoom, dl,#3
05824     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
05828                 | 
05828     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
0582c     0C BC 06 F5 |                 and     colordepth,#12
05830                 | 
05830     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
05834     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
05838     64 00 90 AD |           if_z  jmp     #p240
0583c                 | 
0583c     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
05840     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
05844     98 00 90 AD |           if_z  jmp     #p250
05848                 | 
05848     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
0584c     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
05850     FC 00 90 AD |           if_z  jmp     #p260
05854                 | 
05854     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
05858                 | 
05858                 | '' --- 8 bit color modes
05858                 | 
05858     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
0585c     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
05860                 | 
05860     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
05864     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
05868                 |        
05868                 |  '  
05868     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
0586c     25 0C 07 A6 |                 if_z mov skippattern,#%100101
05870                 |     
05870                 |  
05870     05 0C 07 56 |                 if_nz mov skippattern,#%000101
05874     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
05878                 |         
05878                 | 
05878                 |         
05878     7D 11 03 FB | p235               rdlong  char,framebuf2
0587c     32 0C 63 FD |                    skipf skippattern
05880     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
05884     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
05888     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
0588c     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
05890     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
05894     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
05898     F7 0F 6F FB |                    djnz    cpl2,#p235
0589c                 | 
0589c     20 01 90 FD |                jmp    #p203
058a0                 |                   
058a0                 | 
058a0                 | 
058a0                 | '' --- 1 bit color modes
058a0                 | 
058a0     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
058a4     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
058a8                 | 
058a8     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
058ac     13 0C 07 A6 |        if_z   mov skippattern,#%10011
058b0     08 0C 07 56 |        if_nz  mov skippattern,#%01000
058b4                 | 
058b4                 | 
058b4     7D 11 E3 FA | p241               rdword  char,framebuf2
058b8     44 10 FF F9 |                    movbyts char,#%01000100
058bc     63 10 63 FD |                    mergew  char
058c0     32 0C 63 FD |                    skipf skippattern
058c4     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
058c8     63 10 63 FD |                    mergew  char                    ' 1 0
058cc     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
058d0     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
058d4     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
058d8     F6 0F 6F FB |                    djnz   cpl2,#p241
058dc                 | 
058dc                 | 
058dc     E0 00 90 FD |                jmp    #p203
058e0                 | 
058e0                 | '' --- 2 bit color modes
058e0                 | 
058e0     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
058e4     C8 00 90 AD |        if_z   jmp #p251
058e8                 | 
058e8     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
058ec     30 00 90 AD |        if_z   jmp #p252
058f0                 | 
058f0                 | 
058f0     7D 11 C3 FA | p254               rdbyte char,framebuf2
058f4     04 0A 07 F6 |                    mov  t5,#4
058f8     02 10 67 F0 | p255               shl  char,#2
058fc     88 03 53 F8 |                    getnib  t1,char,#2
05900     03 02 07 F5 |                    and     t1,#3
05904     55 02 07 FA |                    mul     t1,#$55
05908     81 05 03 F9 |                    rolbyte  t2,t1,#0
0590c     FA 0B 6F FB |                    djnz    t5,#p255
05910     82 BB C2 FC |                    xcont   m_lut2,t2
05914     01 FA 06 F1 |                    add     framebuf2,#1
05918     F5 0F 6F FB |                    djnz    cpl2,#p254
0591c     A0 00 90 FD |                    jmp     #p203
05920                 | 
05920     7D 11 E3 FA | p252               rdword char,framebuf2
05924     08 0A 07 F6 |                    mov  t5,#8
05928     02 10 67 F0 | p253               shl  char,#2
0592c     88 03 63 F8 |                    getnib  t1,char,#4
05930     03 02 07 F5 |                    and     t1,#3
05934     05 02 07 FA |                    mul     t1,#5
05938     81 05 83 F8 |                    rolnib  t2,t1,#0
0593c     FA 0B 6F FB |                    djnz    t5,#p253
05940     82 BB C2 FC |                    xcont   m_lut2,t2
05944     02 FA 06 F1 |                    add     framebuf2,#2
05948     F5 0F 6F FB |                    djnz    cpl2,#p252
0594c     70 00 90 FD |                    jmp     #p203
05950                 | 
05950                 | '' ------ 4 bit color modes
05950                 | 
05950     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
05954     58 00 90 AD |        if_z   jmp #p251
05958                 | 
05958     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
0595c     2C 00 90 AD |        if_z   jmp #p262
05960                 | 
05960                 | 
05960     7D 11 C3 FA | p263               rdbyte char,framebuf2
05964     02 0A DC FC |                            rep #5,#2
05968     88 05 8B F8 |                              rolnib t2,char,#1
0596c     88 05 8B F8 |                                  rolnib t2,char,#1
05970     88 05 8B F8 |                              rolnib t2,char,#1
05974     88 05 8B F8 |                                  rolnib t2,char,#1
05978     04 10 67 F0 |                              shl char,#4
0597c     82 BB C2 FC |                    xcont   m_lut2,t2
05980     01 FA 06 F1 |                    add     framebuf2,#1
05984     F6 0F 6F FB |                    djnz    cpl2,#p263
05988     34 00 90 FD |                    jmp     #p203
0598c                 | 
0598c     7D 11 E3 FA | p262               rdword  char,framebuf2
05990     04 06 DC FC |                            rep #3,#4
05994     88 05 9B F8 |                              rolnib t2,char,#3
05998     88 05 9B F8 |                                  rolnib t2,char,#3
0599c     04 10 67 F0 |                              shl char,#4
059a0     82 BB C2 FC |                    xcont   m_lut2,t2
059a4     02 FA 06 F1 |                    add     framebuf2,#2
059a8     F8 0F 6F FB |                    djnz    cpl2,#p262
059ac     10 00 90 FD |                    jmp     #p203
059b0                 | 
059b0                 | ''---------- all color modes without zoom
059b0                 | 
059b0     87 07 D8 FC | p251               rep  #3,cpl2
059b4     7D 11 03 FB |                    rdlong  char,framebuf2
059b8     04 FA 06 F1 |                    add     framebuf2,#4
059bc     88 BB C2 FC |                    xcont   m_lut2,char
059c0                 |           
059c0                 |  ''-----------------------------------------------------------------------------------------
059c0                 | p203           ' getword  mb2,m_border,#0
059c0     00 24 0F F2 |                 cmp      mb2, #0 wz
059c4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
059c8                 | 
059c8     EC FB 9F FD |                 jmp #p302
059cc                 | 
059cc                 | '' -------------------------------------- END of graph  line ---------------------------------
059cc                 | 
059cc                 | '' consts and vars
059cc                 | 
059cc     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
059d0     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
059d4     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
059d8     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
059dc                 | 
059dc     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
059e0                 | 
059e0                 | '------ these longs will be set by setmode function
059e0                 | 
059e0     00 00 00 00 | m_bs            long    0        'blanks before sync
059e4     00 00 00 00 | m_sn            long    0        'sync
059e8     00 00 00 00 | m_bv            long    0        'blanks before visible
059ec     00 00 00 00 | m_vi            long    0        'visible pixels #
059f0     00 00 00 00 | m_border        long    0        'left/right borders
059f4     00 00 00 00 | m_lut1          long    0        'characters
059f8     00 00 00 00 | i_vborder       long    0        'up/down borders
059fc     00 00 00 00 | i_upporch       long    0        'up porch lines
05a00     00 00 00 00 | i_vsync         long    0        'vsync lines
05a04     00 00 00 00 | i_downporch     long    0        'down porch lines
05a08     00 00 00 00 | i_modenum       long    0        'mode #
05a0c     00 00 00 00 | i_cpl           long    0        'chars/longs per line
05a10     00 00 00 00 | i_lines         long    0        'scanlines #
05a14     00 00 00 00 | i_clock         long    0
05a18     00 00 00 00 | i_hubset        long    0
05a1c     00 00 00 00 | i_totalvis      long    0
05a20                 | 
05a20                 | '-------------------------------------
05a20                 | 
05a20     00 00 00 00 | m_lut2          long    0
05a24                 | 
05a24                 | colordepth
05a24     00 00 00 00 | linestart       long    0
05a28     00 00 00 00 | linenum         long    0
05a2c     00 01 00 00 | lutaddr         long    256
05a30                 | 
05a30     0E 00 00 00 | cursorsh        long    14
05a34     00 00 00 00 | frames          long    0
05a38     00 00 00 00 | cursorx         long    0
05a3c     00 00 00 00 | cursory         long    0
05a40     00 00 00 00 | cursorpos       long    0
05a44     00 00 00 00 | cursorpos2      long    0
05a48     00 00 00 00 | fontstart       long    0
05a4c     00 00 00 00 | border2         long 0
05a50     00 00 81 70 | lutiv           long $70810000
05a54     00 00 88 00 | lutt1           long $00880000
05a58     00 00 80 00 | lutg1           long $00800000
05a5c     00 00 80 10 | lutg2           long $10800000
05a60     00 00 80 20 | lutg4           long $20800000
05a64     00 00 80 30 | lutg8           long $30800000
05a68     00 00 00 00 | framebuf        long 0
05a6c     00 00 00 00 | fontbuf         long 0
05a70     00 00 00 00 | borderptr       long 0
05a74     00 00 00 00 | vblankptr       long 0
05a78     00 00 00 00 | cursorptr       long 0
05a7c     00 00 00 00 | modeptr         long 0
05a80     00 00 00 00 | paletteptr      long 0
05a84     00 00 00 00 | dlptr           long 0
05a88                 | fontnumptr      res     1
05a88                 | fontnumptr      res     1
05a88                 | hbase           res     1
05a88                 | hbase           res     1
05a88                 | borderptr2      res     1
05a88                 | borderptr2      res     1
05a88                 | dlptr2 res 1
05a88                 | dlptr2 res 1
05a88                 | dl              res 1
05a88                 | dl              res 1
05a88                 | ii              res     1
05a88                 | ii              res     1
05a88                 | framebuf2       res     1
05a88                 | framebuf2       res     1
05a88                 | hsync0          res     1
05a88                 | hsync0          res     1
05a88                 | hsync1          res     1
05a88                 | hsync1          res     1
05a88                 | fontline        res     1
05a88                 | fontline        res     1
05a88                 | t1              res     1
05a88                 | t1              res     1
05a88                 | t2              res     1
05a88                 | t2              res     1
05a88                 | t3 res 1
05a88                 | t3 res 1
05a88                 | t4 res 1
05a88                 | t4 res 1
05a88                 | t5 res 1
05a88                 | t5 res 1
05a88                 | skippattern res 1
05a88                 | skippattern res 1
05a88                 | cpl2 res 1
05a88                 | cpl2 res 1
05a88                 | char            res     1
05a88                 | char            res     1
05a88                 | backcolor       res     1
05a88                 | backcolor       res     1
05a88                 | charcolor       res     1
05a88                 | charcolor       res     1
05a88                 | zoom res 1
05a88                 | zoom res 1
05a88     00 00 00 00 | rcnt long 0 'dl repeat count
05a8c     00 00 00 00 | rcnt2 long 0
05a90     00 00 00 00 | rcnt2a long 0
05a94     00 00 00 00 | roffset long 0
05a98     00 00 00 00 | rdl long 0  'dl repeat line
05a9c     00 00 00 00 | dlc long 0 'dl command
05aa0     00 00 00 00 | mb2 long 0
05aa4     00 00 00 00 | aend             long 0
05aa8                 |                 fit     496                     '
05aa8                 | __system__dat_
05aa8     00 00 00 00 
05aac     00 00 00 00 | 	byte	$00[8]
05ab0     03 00 00 00 
05ab4     00 00 00 00 
05ab8     00 00 00 00 
05abc     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05ac0                 | __heap_base
05ac0     00 00 00 00 
      ...             
06ac0     00 00 00 00 
06ac4     00 00 00 00 | 	long	0[1026]
06ac8                 | objmem
06ac8     00 00 00 00 
      ...             
06bac     00 00 00 00 
06bb0     00 00 00 00 | 	long	0[59]
06bb4                 | stackspace
06bb4     00 00 00 00 | 	long	0[1]
06bb8 0dd             | 	org	COG_BSS_START
06bb8 0dd             | _var01
06bb8 0dd             | 	res	1
06bb8 0de             | _var02
06bb8 0de             | 	res	1
06bb8 0df             | _var03
06bb8 0df             | 	res	1
06bb8 0e0             | _var04
06bb8 0e0             | 	res	1
06bb8 0e1             | _var05
06bb8 0e1             | 	res	1
06bb8 0e2             | _var06
06bb8 0e2             | 	res	1
06bb8 0e3             | _var07
06bb8 0e3             | 	res	1
06bb8 0e4             | _var08
06bb8 0e4             | 	res	1
06bb8 0e5             | _var09
06bb8 0e5             | 	res	1
06bb8 0e6             | _var10
06bb8 0e6             | 	res	1
06bb8 0e7             | _var11
06bb8 0e7             | 	res	1
06bb8 0e8             | _var12
06bb8 0e8             | 	res	1
06bb8 0e9             | _var13
06bb8 0e9             | 	res	1
06bb8 0ea             | _var14
06bb8 0ea             | 	res	1
06bb8 0eb             | _var15
06bb8 0eb             | 	res	1
06bb8 0ec             | _var16
06bb8 0ec             | 	res	1
06bb8 0ed             | _var17
06bb8 0ed             | 	res	1
06bb8 0ee             | _var18
06bb8 0ee             | 	res	1
06bb8 0ef             | _var19
06bb8 0ef             | 	res	1
06bb8 0f0             | _var20
06bb8 0f0             | 	res	1
06bb8 0f1             | _var21
06bb8 0f1             | 	res	1
06bb8 0f2             | _var22
06bb8 0f2             | 	res	1
06bb8 0f3             | _var23
06bb8 0f3             | 	res	1
06bb8 0f4             | _var24
06bb8 0f4             | 	res	1
06bb8 0f5             | _var25
06bb8 0f5             | 	res	1
06bb8 0f6             | _var26
06bb8 0f6             | 	res	1
06bb8 0f7             | _var27
06bb8 0f7             | 	res	1
06bb8 0f8             | _var28
06bb8 0f8             | 	res	1
06bb8 0f9             | _var29
06bb8 0f9             | 	res	1
06bb8 0fa             | _var30
06bb8 0fa             | 	res	1
06bb8 0fb             | _var31
06bb8 0fb             | 	res	1
06bb8 0fc             | _var32
06bb8 0fc             | 	res	1
06bb8 0fd             | arg01
06bb8 0fd             | 	res	1
06bb8 0fe             | arg02
06bb8 0fe             | 	res	1
06bb8 0ff             | arg03
06bb8 0ff             | 	res	1
06bb8 100             | arg04
06bb8 100             | 	res	1
06bb8 101             | arg05
06bb8 101             | 	res	1
06bb8 102             | local01
06bb8 102             | 	res	1
06bb8 103             | local02
06bb8 103             | 	res	1
06bb8 104             | local03
06bb8 104             | 	res	1
06bb8 105             | local04
06bb8 105             | 	res	1
06bb8 106             | local05
06bb8 106             | 	res	1
06bb8 107             | local06
06bb8 107             | 	res	1
06bb8 108             | local07
06bb8 108             | 	res	1
06bb8 109             | local08
06bb8 109             | 	res	1
06bb8 10a             | local09
06bb8 10a             | 	res	1
06bb8 10b             | local10
06bb8 10b             | 	res	1
06bb8 10c             | local11
06bb8 10c             | 	res	1
06bb8 10d             | local12
06bb8 10d             | 	res	1
06bb8 10e             | local13
06bb8 10e             | 	res	1
06bb8 10f             | local14
06bb8 10f             | 	res	1
06bb8 110             | local15
06bb8 110             | 	res	1
06bb8 111             | local16
06bb8 111             | 	res	1
06bb8 112             | local17
06bb8 112             | 	res	1
06bb8 113             | local18
06bb8 113             | 	res	1
06bb8 114             | muldiva_
06bb8 114             | 	res	1
06bb8 115             | muldivb_
06bb8 115             | 	res	1
06bb8 116             | 	fit	480
06bb8 116             | 
