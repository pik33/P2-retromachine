00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/Tracker player/player.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 04 00 00 FF 
00414 004 28 F1 07 F1 | 	add	ptra, ##2344
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 B2 E1 80 FF 
00428 009 00 F0 65 FD | 	hubset	##29582584
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c B2 E1 00 FF 
00438 00d FB EC 07 F6 | 	mov	pa, ##29582587
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 19 92 8A FF 
00448 011 14 1E 6C FC | 	wrlong	##354693647, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5C 62 FD | 	cogid	arg01
00614 084 03 5C 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2B 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5D 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 5F 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 61 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 63 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2A 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 60 56 F0 |         shr	arg03, #1 wc
00688 0a1 2E 5F 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5C 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 5E FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 60 56 F0 |         shr	arg03, #1 wc
00698 0a5 2E 5F 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5C 06 C1 |  if_c   add	arg01, #2
006a0 0a7 2F 5F 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2E 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 60 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 30 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 5E 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 6B 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 6B 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 86 0B 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0C 63 FD |        getqx   muldivb_
00740 0cf 19 0A 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 85 0B 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 86 0D 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 85 0B 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 86 0D 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2A 06 F6 |     mov result1, #0
00778 0dd 00 2C 06 F6 |     mov result2, #0
0077c 0de 2E 07 02 F6 |     mov abortchain, arg01
00780 0df 2E 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 5C 06 F1 |     add arg01, #4
00788 0e1 2E F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 5C 06 F1 |     add arg01, #4
00790 0e3 2E 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 5C 06 F1 |     add arg01, #4
00798 0e5 2E B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 2F 5D 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 2E F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 5C 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 5C 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 2F 2B 02 F6 |     mov result1, arg02
007d4 0f4 01 2C 06 F6 |     mov result2, #1
007d8 0f5 2E 5F 02 FB |     rdlong arg02, arg01
007dc 0f6 04 5C 06 F1 |     add arg01, #4
007e0 0f7 2E F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 5C 06 F1 |     add arg01, #4
007e8 0f9 2E 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 5C 06 F1 |     add arg01, #4
007f0 0fb 2E B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 5C 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 60 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 DC D1 01 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 E4 E1 01 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 34 80 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 7C 7F 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a 7C CF 01 00 | 	long	@__system__dat_
00830 10b             | ptr__audio018_spin2_dat__
00830 10b 48 C4 01 00 | 	long	@_audio018_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 58 81 00 00 | 	long	@_dat_
00838 10d             | ptr__hng030rm_spin2_dat__
00838 10d C0 8E 01 00 | 	long	@_hng030rm_spin2_dat_
0083c 10e             | ptr__hng030rm_spin2_putchar_
0083c 10e 78 24 00 00 | 	long	@_hng030rm_spin2_putchar
00840 10f             | ptr__hng030rm_spin2_putpixel1_
00840 10f 4C 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
00844 110             | ptr__hng030rm_spin2_putpixel2_
00844 110 34 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00848 111             | ptr__hng030rm_spin2_putpixel4_
00848 111 0C 21 00 00 | 	long	@_hng030rm_spin2_putpixel4
0084c 112             | ptr__hng030rm_spin2_putpixel8_
0084c 112 E4 21 00 00 | 	long	@_hng030rm_spin2_putpixel8
00850 113             | ptr__retrocog_spin2_serialcog_
00850 113 74 33 00 00 | 	long	@_retrocog_spin2_serialcog
00854 114             | ptr__trackerplayer_spin2_dat__
00854 114 24 B3 01 00 | 	long	@_trackerplayer_spin2_dat_
00858 115             | result1
00858 115 00 00 00 00 | 	long	0
0085c 116             | result2
0085c 116 00 00 00 00 | 	long	0
00860 117             | result3
00860 117 00 00 00 00 | 	long	0
00864 118             | COG_BSS_START
00864 118             | 	fit	480
00864                 | 	orgh
00864                 | hubentry
00864                 | 
00864                 | ' 
00864                 | ' function addr(byref v as any)
00864                 | _addr
00864     00 5A 05 F6 | 	mov	COUNT_, #0
00868     B0 00 A0 FD | 	call	#pushregs_
0086c     08 F0 07 F1 | 	add	ptra, #8
00870     04 5E 05 F1 | 	add	fp, #4
00874     AF 5C 62 FC | 	wrlong	arg01, fp
00878                 | ' 
00878                 | ' return(cast(ulong,@v))
00878     2E 2B 02 F6 | 	mov	result1, arg01
0087c     04 5E 85 F1 | 	sub	fp, #4
00880     AF F0 03 F6 | 	mov	ptra, fp
00884     BF 00 A0 FD | 	call	#popregs_
00888                 | _addr_ret
00888     2D 00 64 FD | 	ret
0088c                 | 
0088c                 | _program
0088c     41 5A 05 F6 | 	mov	COUNT_, #65
00890     B0 00 A0 FD | 	call	#pushregs_
00894     EC 0E 06 F1 | 	add	objptr, #236
00898                 | ' 
00898                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00898     07 6B 02 F6 | 	mov	local01, objptr
0089c     01 00 00 FF 
008a0     40 0F 06 F1 | 	add	objptr, ##832
008a4     07 6D 02 F6 | 	mov	local02, objptr
008a8     36 6B 62 FC | 	wrlong	local01, local02
008ac     04 6C 06 F1 | 	add	local02, #4
008b0     36 27 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
008b4     10 5C 06 F6 | 	mov	arg01, #16
008b8     28 0E 62 FD | 	setq	objptr
008bc     04 5D F2 FC | 	coginit	arg01, entryptr__ wc
008c0     01 5C 66 C6 |  if_b	neg	arg01, #1
008c4     2E 2B 02 F6 | 	mov	result1, arg01
008c8                 | ' return cog
008c8     00 0F 06 F1 | 	add	objptr, #256
008cc     07 2B 62 FC | 	wrlong	result1, objptr
008d0                 | ' c=rm.start()
008d0                 | ' return c
008d0     40 6E 06 F6 | 	mov	local03, #64
008d4     02 00 00 FF 
008d8     00 0F 86 F1 | 	sub	objptr, ##1280
008dc     07 71 02 F6 | 	mov	local04, objptr
008e0                 | ' 
008e0                 | ' ' initialize pointers and variables
008e0                 | ' 
008e0                 | ' border_ptr:=@bordercolor
008e0     24 0E 86 F1 | 	sub	objptr, #36
008e4     07 71 62 FC | 	wrlong	local04, objptr
008e8     08 00 00 FF 
008ec     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
008f0                 | ' font_ptr:=@st_font
008f0     04 0E 86 F1 | 	sub	objptr, #4
008f4     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
008f8                 | ' hdmibase:=base
008f8     20 0E 06 F1 | 	add	objptr, #32
008fc     07 01 68 FC | 	wrlong	#0, objptr
00900     24 0E 86 F1 | 	sub	objptr, #36
00904     0F 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00908                 | ' p1:=@putpixel1
00908     07 5D 02 F6 | 	mov	arg01, objptr
0090c     08 00 00 FF 
00910     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00914     68 55 B0 FD | 	call	#__system___make_methodptr
00918     15 73 02 F6 | 	mov	local05, result1
0091c     DC 0E 06 F1 | 	add	objptr, #220
00920     07 73 62 FC | 	wrlong	local05, objptr
00924     DC 0E 86 F1 | 	sub	objptr, #220
00928     10 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
0092c                 | ' p2:=@putpixel2
0092c     07 5D 02 F6 | 	mov	arg01, objptr
00930     4C 55 B0 FD | 	call	#__system___make_methodptr
00934     15 73 02 F6 | 	mov	local05, result1
00938     E0 0E 06 F1 | 	add	objptr, #224
0093c     07 73 62 FC | 	wrlong	local05, objptr
00940     E0 0E 86 F1 | 	sub	objptr, #224
00944     11 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
00948                 | ' p4:=@putpixel4
00948     07 5D 02 F6 | 	mov	arg01, objptr
0094c     30 55 B0 FD | 	call	#__system___make_methodptr
00950     15 73 02 F6 | 	mov	local05, result1
00954     E4 0E 06 F1 | 	add	objptr, #228
00958     07 73 62 FC | 	wrlong	local05, objptr
0095c     E4 0E 86 F1 | 	sub	objptr, #228
00960     12 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00964                 | ' p8:=@putpixel8
00964     07 5D 02 F6 | 	mov	arg01, objptr
00968     14 55 B0 FD | 	call	#__system___make_methodptr
0096c     15 73 02 F6 | 	mov	local05, result1
00970     E8 0E 06 F1 | 	add	objptr, #232
00974     07 73 62 FC | 	wrlong	local05, objptr
00978     E8 0E 86 F1 | 	sub	objptr, #232
0097c                 | ' 
0097c                 | ' 
0097c                 | ' ' the mode has to be set here to enable computing the buffer length
0097c                 | ' 
0097c                 | ' setmode(mode)
0097c     40 5C 06 F6 | 	mov	arg01, #64
00980     B0 1F B0 FD | 	call	#_hng030rm_spin2_setmode
00984     40 0E 06 F1 | 	add	objptr, #64
00988     07 75 02 F6 | 	mov	local06, objptr
0098c                 | ' 
0098c                 | ' vblank_ptr:=@vblank
0098c     34 0E 86 F1 | 	sub	objptr, #52
00990     07 75 62 FC | 	wrlong	local06, objptr
00994     28 0E 06 F1 | 	add	objptr, #40
00998     07 77 02 F6 | 	mov	local07, objptr
0099c                 | ' cursor_ptr:=@cursor_x
0099c     24 0E 86 F1 | 	sub	objptr, #36
009a0     07 77 62 FC | 	wrlong	local07, objptr
009a4     88 0E 06 F1 | 	add	objptr, #136
009a8     07 79 02 F6 | 	mov	local08, objptr
009ac                 | ' 
009ac                 | ' fontnum_ptr:=@fontnum
009ac     78 0E 86 F1 | 	sub	objptr, #120
009b0     07 79 62 FC | 	wrlong	local08, objptr
009b4                 | ' 
009b4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
009b4     78 0E 06 F1 | 	add	objptr, #120
009b8     07 01 68 FC | 	wrlong	#0, objptr
009bc     1C 0E 06 F1 | 	add	objptr, #28
009c0     07 5D 02 F6 | 	mov	arg01, objptr
009c4     B4 0E 86 F1 | 	sub	objptr, #180
009c8     0F 00 00 FF 
009cc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
009d0     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009d4     0F 00 00 FF 
009d8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
009dc                 | ' bytemove(@colors,@vgacolors,16)
009dc     10 60 06 F6 | 	mov	arg03, #16
009e0     74 53 B0 FD | 	call	#__system____builtin_memmove
009e4                 | ' 
009e4                 | ' ' initialize a cursor
009e4                 | ' 
009e4                 | ' cursor_x:=0
009e4     34 0E 06 F1 | 	add	objptr, #52
009e8     07 01 48 FC | 	wrbyte	#0, objptr
009ec                 | ' cursor_y:=0
009ec     01 0E 06 F1 | 	add	objptr, #1
009f0     07 01 48 FC | 	wrbyte	#0, objptr
009f4                 | ' cursor_sh:=14
009f4     01 0E 06 F1 | 	add	objptr, #1
009f8     07 1D 48 FC | 	wrbyte	#14, objptr
009fc     36 0E 86 F1 | 	sub	objptr, #54
00a00                 | ' 
00a00                 | ' 
00a00                 | ' ' start the cog
00a00                 | ' 
00a00                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00a00     0F 00 00 FF 
00a04     68 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00a08     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00a0c     0F 00 00 FF 
00a10     68 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
00a14     07 61 02 F6 | 	mov	arg03, objptr
00a18     10 5C 06 F6 | 	mov	arg01, #16
00a1c     28 60 62 FD | 	setq	arg03
00a20     2F 5D F2 FC | 	coginit	arg01, arg02 wc
00a24     01 5C 66 C6 |  if_b	neg	arg01, #1
00a28     2E 2B 02 F6 | 	mov	result1, arg01
00a2c     15 7B 02 F6 | 	mov	local09, result1
00a30     28 0E 06 F1 | 	add	objptr, #40
00a34     07 7B 62 FC | 	wrlong	local09, objptr
00a38     28 0E 86 F1 | 	sub	objptr, #40
00a3c                 | ' waitms(20)
00a3c     14 5C 06 F6 | 	mov	arg01, #20
00a40     44 56 B0 FD | 	call	#__system___waitms
00a44                 | ' 
00a44                 | ' ' clear the screen and set the colors to green on black
00a44                 | ' 
00a44                 | ' cls(c_green,c_black)
00a44     C7 5C 06 F6 | 	mov	arg01, #199
00a48     00 5E 06 F6 | 	mov	arg02, #0
00a4c     3C 18 B0 FD | 	call	#_hng030rm_spin2_cls
00a50                 | ' setbordercolor(0,0,128)
00a50     00 5C 06 F6 | 	mov	arg01, #0
00a54     00 5E 06 F6 | 	mov	arg02, #0
00a58     80 60 06 F6 | 	mov	arg03, #128
00a5c     08 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a60                 | ' setwritecolors(c_green,c_black)
00a60     00 5E 06 F6 | 	mov	arg02, #0
00a64                 | ' 
00a64                 | ' 
00a64                 | ' write_color:=ff
00a64     38 0E 06 F1 | 	add	objptr, #56
00a68     07 8F 69 FC | 	wrlong	#199, objptr
00a6c                 | ' write_background:=bb
00a6c     04 0E 06 F1 | 	add	objptr, #4
00a70     07 01 68 FC | 	wrlong	#0, objptr
00a74                 | ' 
00a74                 | ' return cog
00a74     14 0E 86 F1 | 	sub	objptr, #20
00a78     07 2B 02 FB | 	rdlong	result1, objptr
00a7c     28 0E 86 F1 | 	sub	objptr, #40
00a80     00 5C 06 F6 | 	mov	arg01, #0
00a84     00 60 06 F6 | 	mov	arg03, #0
00a88     DC 17 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a8c                 | ' v030.start(mode,pin)
00a8c                 | ' v030.setbordercolor(0,0,0)
00a8c                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a8c     07 5D 02 F6 | 	mov	arg01, objptr
00a90     0E 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a94     E8 53 B0 FD | 	call	#__system___make_methodptr
00a98     00 2E 06 F6 | 	mov	result3, #0
00a9c     00 2C 06 F6 | 	mov	result2, #0
00aa0     15 5F 02 F6 | 	mov	arg02, result1
00aa4     00 60 06 F6 | 	mov	arg03, #0
00aa8     00 62 06 F6 | 	mov	arg04, #0
00aac     00 5C 06 F6 | 	mov	arg01, #0
00ab0     A4 56 B0 FD | 	call	#__system___basic_open
00ab4     00 2A 06 F6 | 	mov	result1, #0
00ab8     9A 5C 06 F6 | 	mov	arg01, #154
00abc     93 5E 06 F6 | 	mov	arg02, #147
00ac0     C8 17 B0 FD | 	call	#_hng030rm_spin2_cls
00ac4     02 00 00 FF 
00ac8     30 0F 06 F1 | 	add	objptr, ##1328
00acc     07 01 69 FC | 	wrlong	#128, objptr
00ad0     04 0E 06 F1 | 	add	objptr, #4
00ad4     07 7B 68 FC | 	wrlong	#61, objptr
00ad8     04 0E 06 F1 | 	add	objptr, #4
00adc     07 79 68 FC | 	wrlong	#60, objptr
00ae0     04 0E 06 F1 | 	add	objptr, #4
00ae4     07 77 68 FC | 	wrlong	#59, objptr
00ae8     04 0E 06 F1 | 	add	objptr, #4
00aec     07 75 68 FC | 	wrlong	#58, objptr
00af0     04 0E 06 F1 | 	add	objptr, #4
00af4     07 07 68 FC | 	wrlong	#3, objptr
00af8     40 00 00 FF 
00afc     2D 7D 06 F6 | 	mov	local10, ##@LR__0457
00b00     01 00 00 FF 
00b04     AC 0F 06 F1 | 	add	objptr, ##940
00b08     07 7D 62 FC | 	wrlong	local10, objptr
00b0c     04 00 00 FF 
00b10     F0 0E 86 F1 | 	sub	objptr, ##2288
00b14     0C 7F 02 F6 | 	mov	local11, ptr__dat__
00b18     3F 5D 02 F6 | 	mov	arg01, local11
00b1c     44 FD BF FD | 	call	#_addr
00b20     04 00 00 FF 
00b24     F4 0E 06 F1 | 	add	objptr, ##2292
00b28     07 2B 62 FC | 	wrlong	result1, objptr
00b2c     15 5D 02 F6 | 	mov	arg01, result1
00b30     00 5E 06 F6 | 	mov	arg02, #0
00b34     01 00 00 FF 
00b38     AC 0F 86 F1 | 	sub	objptr, ##940
00b3c     DC 2E B0 FD | 	call	#_trackerplayer_spin2_initModule
00b40     01 5E 06 F6 | 	mov	arg02, #1
00b44                 | ' 
00b44                 | ' ''---------- Set the (x,y) position of cursor
00b44                 | ' 
00b44                 | ' cursor_x:=x
00b44     02 00 00 FF 
00b48     14 0F 86 F1 | 	sub	objptr, ##1300
00b4c     07 03 48 FC | 	wrbyte	#1, objptr
00b50                 | ' cursor_y:=y
00b50     01 0E 06 F1 | 	add	objptr, #1
00b54     07 03 48 FC | 	wrbyte	#1, objptr
00b58                 | ' 
00b58                 | ' emptystr$="                      "
00b58                 | ' 
00b58                 | ' ma=addr(module)
00b58                 | ' tracker.initmodule(ma,0)
00b58                 | ' 
00b58                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
00b58     04 00 00 FF 
00b5c     BF 0E 06 F1 | 	add	objptr, ##2239
00b60     07 81 02 FB | 	rdlong	local12, objptr
00b64     40 83 02 F6 | 	mov	local13, local12
00b68     04 00 00 FF 
00b6c     F4 0E 86 F1 | 	sub	objptr, ##2292
00b70     14 82 06 F1 | 	add	local13, #20
00b74                 | LR__0001
00b74     41 81 5A F2 | 	cmps	local12, local13 wcz
00b78     44 00 90 3D |  if_ae	jmp	#LR__0002
00b7c     00 5C 06 F6 | 	mov	arg01, #0
00b80     80 69 B0 FD | 	call	#__system___getiolock_0145
00b84     15 5D 02 F6 | 	mov	arg01, result1
00b88     34 53 B0 FD | 	call	#__system___lockmem
00b8c     00 84 06 F6 | 	mov	local14, #0
00b90                 | ' asm
00b90     40 2B C2 FA | 	rdbyte	result1, local12
00b94                 | ' return r
00b94     15 5F 02 F6 | 	mov	arg02, result1
00b98     07 5E 46 F7 | 	zerox	arg02, #7
00b9c     00 5C 06 F6 | 	mov	arg01, #0
00ba0     00 60 06 F6 | 	mov	arg03, #0
00ba4     64 56 B0 FD | 	call	#__system___basic_print_char
00ba8     00 5C 06 F6 | 	mov	arg01, #0
00bac     54 69 B0 FD | 	call	#__system___getiolock_0145
00bb0     15 01 68 FC | 	wrlong	#0, result1
00bb4     00 2A 06 F6 | 	mov	result1, #0
00bb8     01 80 06 F1 | 	add	local12, #1
00bbc     B4 FF 9F FD | 	jmp	#LR__0001
00bc0                 | LR__0002
00bc0     04 00 00 FF 
00bc4     F8 0E 06 F1 | 	add	objptr, ##2296
00bc8     07 1F 68 FC | 	wrlong	#15, objptr
00bcc                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
00bcc     00 7C 06 F6 | 	mov	local10, #0
00bd0     04 0E 86 F1 | 	sub	objptr, #4
00bd4     07 5D 02 FB | 	rdlong	arg01, objptr
00bd8     02 00 00 FF 
00bdc     38 5C 06 F1 | 	add	arg01, ##1080
00be0                 | ' asm
00be0     2E 87 C2 FA | 	rdbyte	local15, arg01
00be4                 | ' return r
00be4     07 86 46 F7 | 	zerox	local15, #7
00be8     4D 86 0E F2 | 	cmp	local15, #77 wz
00bec     01 7C 66 A6 |  if_e	neg	local10, #1
00bf0     00 88 06 F6 | 	mov	local16, #0
00bf4     07 5D 02 FB | 	rdlong	arg01, objptr
00bf8     04 00 00 FF 
00bfc     F4 0E 86 F1 | 	sub	objptr, ##2292
00c00     02 00 00 FF 
00c04     3A 5C 06 F1 | 	add	arg01, ##1082
00c08                 | ' asm
00c08     2E 2B C2 FA | 	rdbyte	result1, arg01
00c0c                 | ' return r
00c0c     15 8B 02 F6 | 	mov	local17, result1
00c10     07 8A 46 F7 | 	zerox	local17, #7
00c14     4B 8A 0E F2 | 	cmp	local17, #75 wz
00c18     01 88 66 A6 |  if_e	neg	local16, #1
00c1c     44 7D CA F7 | 	test	local10, local16 wz
00c20     04 00 00 5F 
00c24     F8 0E 06 51 |  if_ne	add	objptr, ##2296
00c28     07 3F 68 5C |  if_ne	wrlong	#31, objptr
00c2c     04 00 00 5F 
00c30     F8 0E 86 51 |  if_ne	sub	objptr, ##2296
00c34     02 5E 06 F6 | 	mov	arg02, #2
00c38                 | ' 
00c38                 | ' ''---------- Set the (x,y) position of cursor
00c38                 | ' 
00c38                 | ' cursor_x:=x
00c38     34 0E 06 F1 | 	add	objptr, #52
00c3c     07 03 48 FC | 	wrbyte	#1, objptr
00c40                 | ' cursor_y:=y
00c40     01 0E 06 F1 | 	add	objptr, #1
00c44     07 05 48 FC | 	wrbyte	#2, objptr
00c48     35 0E 86 F1 | 	sub	objptr, #53
00c4c                 | ' position 1,2 : print samples;" ";"samples module"
00c4c     00 5C 06 F6 | 	mov	arg01, #0
00c50     B0 68 B0 FD | 	call	#__system___getiolock_0145
00c54     15 5D 02 F6 | 	mov	arg01, result1
00c58     64 52 B0 FD | 	call	#__system___lockmem
00c5c     00 2A 06 F6 | 	mov	result1, #0
00c60     04 00 00 FF 
00c64     F8 0E 06 F1 | 	add	objptr, ##2296
00c68     07 5F 02 FB | 	rdlong	arg02, objptr
00c6c     04 00 00 FF 
00c70     F8 0E 86 F1 | 	sub	objptr, ##2296
00c74     00 5C 06 F6 | 	mov	arg01, #0
00c78     00 60 06 F6 | 	mov	arg03, #0
00c7c     0A 62 06 F6 | 	mov	arg04, #10
00c80     1C 56 B0 FD | 	call	#__system___basic_print_integer
00c84     40 00 00 FF 
00c88     44 5F 06 F6 | 	mov	arg02, ##@LR__0458
00c8c     00 5C 06 F6 | 	mov	arg01, #0
00c90     00 60 06 F6 | 	mov	arg03, #0
00c94     C0 55 B0 FD | 	call	#__system___basic_print_string
00c98     40 00 00 FF 
00c9c     46 5F 06 F6 | 	mov	arg02, ##@LR__0459
00ca0     00 5C 06 F6 | 	mov	arg01, #0
00ca4     00 60 06 F6 | 	mov	arg03, #0
00ca8     AC 55 B0 FD | 	call	#__system___basic_print_string
00cac     00 5C 06 F6 | 	mov	arg01, #0
00cb0     0A 5E 06 F6 | 	mov	arg02, #10
00cb4     00 60 06 F6 | 	mov	arg03, #0
00cb8     50 55 B0 FD | 	call	#__system___basic_print_char
00cbc     01 2A 06 F6 | 	mov	result1, #1
00cc0     00 5C 06 F6 | 	mov	arg01, #0
00cc4     3C 68 B0 FD | 	call	#__system___getiolock_0145
00cc8     15 01 68 FC | 	wrlong	#0, result1
00ccc     00 2A 06 F6 | 	mov	result1, #0
00cd0     04 00 00 FF 
00cd4     F4 0E 06 F1 | 	add	objptr, ##2292
00cd8     07 8D 02 FB | 	rdlong	local18, objptr
00cdc     04 0E 06 F1 | 	add	objptr, #4
00ce0     07 8F 02 FB | 	rdlong	local19, objptr
00ce4     04 5E 06 F6 | 	mov	arg02, #4
00ce8                 | ' 
00ce8                 | ' ''---------- Set the (x,y) position of cursor
00ce8                 | ' 
00ce8                 | ' cursor_x:=x
00ce8     04 00 00 FF 
00cec     C4 0E 86 F1 | 	sub	objptr, ##2244
00cf0     07 03 48 FC | 	wrbyte	#1, objptr
00cf4                 | ' cursor_y:=y
00cf4     01 0E 06 F1 | 	add	objptr, #1
00cf8     07 09 48 FC | 	wrbyte	#4, objptr
00cfc     35 0E 86 F1 | 	sub	objptr, #53
00d00                 | ' 'v030. setwritecolors(170,147):
00d00                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00d00     00 5C 06 F6 | 	mov	arg01, #0
00d04     FC 67 B0 FD | 	call	#__system___getiolock_0145
00d08     15 5D 02 F6 | 	mov	arg01, result1
00d0c     B0 51 B0 FD | 	call	#__system___lockmem
00d10     00 2A 06 F6 | 	mov	result1, #0
00d14     40 00 00 FF 
00d18     C2 5E 06 F6 | 	mov	arg02, ##@LR__0455
00d1c     00 5C 06 F6 | 	mov	arg01, #0
00d20     00 60 06 F6 | 	mov	arg03, #0
00d24     30 55 B0 FD | 	call	#__system___basic_print_string
00d28     00 5C 06 F6 | 	mov	arg01, #0
00d2c     0A 5E 06 F6 | 	mov	arg02, #10
00d30     00 60 06 F6 | 	mov	arg03, #0
00d34     D4 54 B0 FD | 	call	#__system___basic_print_char
00d38     01 2A 06 F6 | 	mov	result1, #1
00d3c     00 5C 06 F6 | 	mov	arg01, #0
00d40     C0 67 B0 FD | 	call	#__system___getiolock_0145
00d44     15 01 68 FC | 	wrlong	#0, result1
00d48     00 2A 06 F6 | 	mov	result1, #0
00d4c     04 00 00 FF 
00d50     64 0E 06 F1 | 	add	objptr, ##2148
00d54     07 91 02 F6 | 	mov	local20, objptr
00d58     00 92 06 F6 | 	mov	local21, #0
00d5c     04 00 00 FF 
00d60     64 0E 86 F1 | 	sub	objptr, ##2148
00d64                 | LR__0003
00d64     40 00 00 FF 
00d68     2B 95 06 F6 | 	mov	local22, ##@LR__0456
00d6c     49 97 02 F6 | 	mov	local23, local21
00d70     02 5E 06 F6 | 	mov	arg02, #2
00d74     0A 60 06 F6 | 	mov	arg03, #10
00d78     02 98 0E F6 | 	mov	local24, #2 wz
00d7c     34 00 90 FD | 	jmp	#LR__0006
00d80                 | LR__0004
00d80     00 9A 06 F6 | 	mov	local25, #0
00d84     4B 9D 1A F2 | 	cmp	local26, local23 wcz
00d88     01 9A 66 E6 |  if_be	neg	local25, #1
00d8c     00 9E 06 F6 | 	mov	local27, #0
00d90     4E A1 1A F2 | 	cmp	local28, local26 wcz
00d94     01 9E 66 C6 |  if_b	neg	local27, #1
00d98     4F 9B CA F7 | 	test	local25, local27 wz
00d9c     14 00 90 AD |  if_e	jmp	#LR__0005
00da0     4E A1 02 F6 | 	mov	local28, local26
00da4     0A 9C 06 FD | 	qmul	local26, #10
00da8     18 9C 62 FD | 	getqx	local26
00dac     01 98 06 F1 | 	add	local24, #1
00db0     CC FF 9F FD | 	jmp	#LR__0004
00db4                 | LR__0005
00db4                 | LR__0006
00db4     20 98 3E F3 | 	fle	local24, #32 wcz
00db8     4C 5D 02 F6 | 	mov	arg01, local24
00dbc     02 5C 06 F1 | 	add	arg01, #2
00dc0     30 5D B0 FD | 	call	#__system___gc_alloc_managed
00dc4     15 A3 02 F6 | 	mov	local29, result1
00dc8     4C A5 02 F6 | 	mov	local30, local24
00dcc     51 A5 02 F1 | 	add	local30, local29
00dd0     52 01 48 FC | 	wrbyte	#0, local30
00dd4     64 F2 9F FE | 	loc	pa,	#(@LR__0008-@LR__0007)
00dd8     93 00 A0 FD | 	call	#FCACHE_LOAD_
00ddc                 | LR__0007
00ddc     00 98 1E F2 | 	cmp	local24, #0 wcz
00de0     34 00 90 ED |  if_be	jmp	#LR__0009
00de4     01 98 86 F1 | 	sub	local24, #1
00de8     4B 0B 03 F6 | 	mov	muldiva_, local23
00dec     0A 0C 07 F6 | 	mov	muldivb_, #10
00df0     CC 00 A0 FD | 	call	#unsdivide_
00df4     85 A7 02 F6 | 	mov	local31, muldiva_
00df8     86 97 02 F6 | 	mov	local23, muldivb_
00dfc     0A A6 1E F2 | 	cmp	local31, #10 wcz
00e00     30 A6 06 C1 |  if_b	add	local31, #48
00e04     37 A6 06 31 |  if_ae	add	local31, #55
00e08     4C A9 02 F6 | 	mov	local32, local24
00e0c     51 A9 02 F1 | 	add	local32, local29
00e10     54 A7 42 FC | 	wrbyte	local31, local32
00e14     C4 FF 9F FD | 	jmp	#LR__0007
00e18                 | LR__0008
00e18                 | LR__0009
00e18     51 2B 02 F6 | 	mov	result1, local29
00e1c     15 5F 02 F6 | 	mov	arg02, result1
00e20     4A 5D 02 F6 | 	mov	arg01, local22
00e24     D0 50 B0 FD | 	call	#__system___string_concat
00e28     15 AB 02 F6 | 	mov	local33, result1
00e2c     13 5C 06 F6 | 	mov	arg01, #19
00e30     40 00 00 FF 
00e34     6C 5E 06 F6 | 	mov	arg02, ##@LR__0449
00e38     28 59 B0 FD | 	call	#__system__String_S
00e3c     15 5F 02 F6 | 	mov	arg02, result1
00e40     55 5D 02 F6 | 	mov	arg01, local33
00e44     B0 50 B0 FD | 	call	#__system___string_concat
00e48     48 2B 62 FC | 	wrlong	result1, local20
00e4c     01 92 06 F1 | 	add	local21, #1
00e50     04 90 06 F1 | 	add	local20, #4
00e54     20 92 5E F2 | 	cmps	local21, #32 wcz
00e58     08 FF 9F CD |  if_b	jmp	#LR__0003
00e5c                 | ' for i=1 to num
00e5c     01 92 06 F6 | 	mov	local21, #1
00e60     01 8E 06 F1 | 	add	local19, #1
00e64     46 AD 02 F6 | 	mov	local34, local18
00e68     14 AC 06 F1 | 	add	local34, #20
00e6c     00 AE 06 F6 | 	mov	local35, #0
00e70     04 00 00 FF 
00e74     68 0E 06 F1 | 	add	objptr, ##2152
00e78     07 B1 02 F6 | 	mov	local36, objptr
00e7c     14 8C 06 F1 | 	add	local18, #20
00e80     00 B2 06 F6 | 	mov	local37, #0
00e84     04 00 00 FF 
00e88     68 0E 86 F1 | 	sub	objptr, ##2152
00e8c                 | LR__0010
00e8c     47 93 5A F2 | 	cmps	local21, local19 wcz
00e90     0C 07 90 3D |  if_ae	jmp	#LR__0015
00e94     56 B5 02 F6 | 	mov	local38, local34
00e98     57 B5 02 F1 | 	add	local38, local35
00e9c     00 B6 06 F6 | 	mov	local39, #0
00ea0                 | LR__0011
00ea0     58 5D 02 F6 | 	mov	arg01, local36
00ea4     BC F9 BF FD | 	call	#_addr
00ea8                 | ' asm
00ea8     15 B9 02 FB | 	rdlong	local40, result1
00eac                 | ' return r
00eac     04 00 00 FF 
00eb0     0C 0F 06 F1 | 	add	objptr, ##2316
00eb4     07 B9 62 FC | 	wrlong	local40, objptr
00eb8     5A 5D 02 F6 | 	mov	arg01, local38
00ebc     5B 5D 02 F1 | 	add	arg01, local39
00ec0                 | ' asm
00ec0     2E 2B C2 FA | 	rdbyte	result1, arg01
00ec4                 | ' return r
00ec4     15 95 02 F6 | 	mov	local22, result1
00ec8     07 94 46 F7 | 	zerox	local22, #7
00ecc     04 0E 06 F1 | 	add	objptr, #4
00ed0     07 95 62 FC | 	wrlong	local22, objptr
00ed4                 | '     a=lpeek(addr(sn$(i)))
00ed4                 | '     b=(peek(ma+20+30*(i-1)+j))
00ed4                 | '     if b>=32 then poke a+j,b
00ed4     04 00 00 FF 
00ed8     10 0F 86 F1 | 	sub	objptr, ##2320
00edc     20 94 5E F2 | 	cmps	local22, #32 wcz
00ee0     24 00 90 CD |  if_b	jmp	#LR__0012
00ee4     04 00 00 FF 
00ee8     0C 0F 06 F1 | 	add	objptr, ##2316
00eec     07 5D 02 FB | 	rdlong	arg01, objptr
00ef0     5B 5D 02 F1 | 	add	arg01, local39
00ef4     04 0E 06 F1 | 	add	objptr, #4
00ef8     07 5F 02 FB | 	rdlong	arg02, objptr
00efc     04 00 00 FF 
00f00     10 0F 86 F1 | 	sub	objptr, ##2320
00f04                 | ' asm
00f04     2E 5F 42 FC | 	wrbyte	arg02, arg01
00f08                 | LR__0012
00f08     01 B6 06 F1 | 	add	local39, #1
00f0c     16 B6 5E F2 | 	cmps	local39, #22 wcz
00f10     8C FF 9F CD |  if_b	jmp	#LR__0011
00f14     46 BB 02 F6 | 	mov	local41, local18
00f18     59 BB 02 F1 | 	add	local41, local37
00f1c     5D 5D 02 F6 | 	mov	arg01, local41
00f20     16 5C 06 F1 | 	add	arg01, #22
00f24     5D BD 02 F6 | 	mov	local42, local41
00f28     17 BC 06 F1 | 	add	local42, #23
00f2c                 | ' asm
00f2c     2E AB C2 FA | 	rdbyte	local33, arg01
00f30                 | ' return r
00f30     07 AA 46 F7 | 	zerox	local33, #7
00f34     08 AA 66 F0 | 	shl	local33, #8
00f38                 | ' asm
00f38     5E BF C2 FA | 	rdbyte	local43, local42
00f3c                 | ' return r
00f3c     07 BE 46 F7 | 	zerox	local43, #7
00f40     5F AB 02 F1 | 	add	local33, local43
00f44     01 AA 66 F0 | 	shl	local33, #1
00f48     04 00 00 FF 
00f4c     14 0F 06 F1 | 	add	objptr, ##2324
00f50     07 AB 62 FC | 	wrlong	local33, objptr
00f54     5D 5D 02 F6 | 	mov	arg01, local41
00f58     1A 5C 06 F1 | 	add	arg01, #26
00f5c     5D C1 02 F6 | 	mov	local44, local41
00f60     1B C0 06 F1 | 	add	local44, #27
00f64                 | ' asm
00f64     2E AB C2 FA | 	rdbyte	local33, arg01
00f68                 | ' return r
00f68     07 AA 46 F7 | 	zerox	local33, #7
00f6c     08 AA 66 F0 | 	shl	local33, #8
00f70                 | ' asm
00f70     60 BF C2 FA | 	rdbyte	local43, local44
00f74                 | ' return r
00f74     07 BE 46 F7 | 	zerox	local43, #7
00f78     5F AB 02 F1 | 	add	local33, local43
00f7c     01 AA 66 F0 | 	shl	local33, #1
00f80     04 0E 06 F1 | 	add	objptr, #4
00f84     07 AB 62 FC | 	wrlong	local33, objptr
00f88     5D 5D 02 F6 | 	mov	arg01, local41
00f8c     1C 5C 06 F1 | 	add	arg01, #28
00f90     5D C3 02 F6 | 	mov	local45, local41
00f94     1D C2 06 F1 | 	add	local45, #29
00f98                 | ' asm
00f98     2E AB C2 FA | 	rdbyte	local33, arg01
00f9c                 | ' return r
00f9c     07 AA 46 F7 | 	zerox	local33, #7
00fa0     08 AA 66 F0 | 	shl	local33, #8
00fa4                 | ' asm
00fa4     61 BF C2 FA | 	rdbyte	local43, local45
00fa8                 | ' return r
00fa8     07 BE 46 F7 | 	zerox	local43, #7
00fac     5F AB 02 F1 | 	add	local33, local43
00fb0     01 AA 66 F0 | 	shl	local33, #1
00fb4     04 0E 06 F1 | 	add	objptr, #4
00fb8     07 AB 62 FC | 	wrlong	local33, objptr
00fbc     5D 5D 02 F6 | 	mov	arg01, local41
00fc0     18 5C 06 F1 | 	add	arg01, #24
00fc4                 | ' asm
00fc4     2E 95 C2 FA | 	rdbyte	local22, arg01
00fc8                 | ' return r
00fc8     07 94 46 F7 | 	zerox	local22, #7
00fcc     04 0E 06 F1 | 	add	objptr, #4
00fd0     07 95 62 FC | 	wrlong	local22, objptr
00fd4     19 BA 06 F1 | 	add	local41, #25
00fd8                 | ' asm
00fd8     5D 2B C2 FA | 	rdbyte	result1, local41
00fdc                 | ' return r
00fdc     15 95 02 F6 | 	mov	local22, result1
00fe0     07 94 46 F7 | 	zerox	local22, #7
00fe4     04 0E 06 F1 | 	add	objptr, #4
00fe8     07 95 62 FC | 	wrlong	local22, objptr
00fec     04 00 00 FF 
00ff0     24 0F 86 F1 | 	sub	objptr, ##2340
00ff4                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00ff4                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00ff4                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00ff4                 | ' ft=peek(ma+20+30*(i-1)+24)
00ff4                 | ' vl=peek(ma+20+30*(i-1)+25)
00ff4                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00ff4     10 92 5E F2 | 	cmps	local21, #16 wcz
00ff8     C4 02 90 3D |  if_ae	jmp	#LR__0013
00ffc     05 C4 06 F6 | 	mov	local46, #5
01000     49 C5 02 F1 | 	add	local46, local21
01004     62 5F 02 F6 | 	mov	arg02, local46
01008                 | ' 
01008                 | ' ''---------- Set the (x,y) position of cursor
01008                 | ' 
01008                 | ' cursor_x:=x
01008     34 0E 06 F1 | 	add	objptr, #52
0100c     07 03 48 FC | 	wrbyte	#1, objptr
01010                 | ' cursor_y:=y
01010     01 0E 06 F1 | 	add	objptr, #1
01014     07 5F 42 FC | 	wrbyte	arg02, objptr
01018     49 C7 02 F6 | 	mov	local47, local21
0101c     02 C6 66 F0 | 	shl	local47, #2
01020     04 00 00 FF 
01024     2F 0E 06 F1 | 	add	objptr, ##2095
01028     07 C7 02 F1 | 	add	local47, objptr
0102c     00 5C 06 F6 | 	mov	arg01, #0
01030     04 00 00 FF 
01034     64 0E 86 F1 | 	sub	objptr, ##2148
01038     C8 64 B0 FD | 	call	#__system___getiolock_0145
0103c     15 5D 02 F6 | 	mov	arg01, result1
01040     7C 4E B0 FD | 	call	#__system___lockmem
01044     00 2A 06 F6 | 	mov	result1, #0
01048     63 5F 02 FB | 	rdlong	arg02, local47
0104c     00 5C 06 F6 | 	mov	arg01, #0
01050     00 60 06 F6 | 	mov	arg03, #0
01054     00 52 B0 FD | 	call	#__system___basic_print_string
01058     00 5C 06 F6 | 	mov	arg01, #0
0105c     0A 5E 06 F6 | 	mov	arg02, #10
01060     00 60 06 F6 | 	mov	arg03, #0
01064     A4 51 B0 FD | 	call	#__system___basic_print_char
01068     01 2A 06 F6 | 	mov	result1, #1
0106c     00 5C 06 F6 | 	mov	arg01, #0
01070     90 64 B0 FD | 	call	#__system___getiolock_0145
01074     15 01 68 FC | 	wrlong	#0, result1
01078     00 2A 06 F6 | 	mov	result1, #0
0107c     62 5F 02 F6 | 	mov	arg02, local46
01080                 | ' 
01080                 | ' ''---------- Set the (x,y) position of cursor
01080                 | ' 
01080                 | ' cursor_x:=x
01080     34 0E 06 F1 | 	add	objptr, #52
01084     07 31 48 FC | 	wrbyte	#24, objptr
01088                 | ' cursor_y:=y
01088     01 0E 06 F1 | 	add	objptr, #1
0108c     07 5F 42 FC | 	wrbyte	arg02, objptr
01090     35 0E 86 F1 | 	sub	objptr, #53
01094     00 5C 06 F6 | 	mov	arg01, #0
01098     68 64 B0 FD | 	call	#__system___getiolock_0145
0109c     15 5D 02 F6 | 	mov	arg01, result1
010a0     1C 4E B0 FD | 	call	#__system___lockmem
010a4     00 2A 06 F6 | 	mov	result1, #0
010a8     04 00 00 FF 
010ac     14 0F 06 F1 | 	add	objptr, ##2324
010b0     07 5F 02 FB | 	rdlong	arg02, objptr
010b4     04 00 00 FF 
010b8     14 0F 86 F1 | 	sub	objptr, ##2324
010bc     00 5C 06 F6 | 	mov	arg01, #0
010c0     00 60 06 F6 | 	mov	arg03, #0
010c4     0A 62 06 F6 | 	mov	arg04, #10
010c8     D4 51 B0 FD | 	call	#__system___basic_print_integer
010cc     00 5C 06 F6 | 	mov	arg01, #0
010d0     0A 5E 06 F6 | 	mov	arg02, #10
010d4     00 60 06 F6 | 	mov	arg03, #0
010d8     30 51 B0 FD | 	call	#__system___basic_print_char
010dc     01 2A 06 F6 | 	mov	result1, #1
010e0     00 5C 06 F6 | 	mov	arg01, #0
010e4     1C 64 B0 FD | 	call	#__system___getiolock_0145
010e8     15 01 68 FC | 	wrlong	#0, result1
010ec     00 2A 06 F6 | 	mov	result1, #0
010f0     62 5F 02 F6 | 	mov	arg02, local46
010f4                 | ' 
010f4                 | ' ''---------- Set the (x,y) position of cursor
010f4                 | ' 
010f4                 | ' cursor_x:=x
010f4     34 0E 06 F1 | 	add	objptr, #52
010f8     07 3F 48 FC | 	wrbyte	#31, objptr
010fc                 | ' cursor_y:=y
010fc     01 0E 06 F1 | 	add	objptr, #1
01100     07 5F 42 FC | 	wrbyte	arg02, objptr
01104     35 0E 86 F1 | 	sub	objptr, #53
01108     00 5C 06 F6 | 	mov	arg01, #0
0110c     F4 63 B0 FD | 	call	#__system___getiolock_0145
01110     15 5D 02 F6 | 	mov	arg01, result1
01114     A8 4D B0 FD | 	call	#__system___lockmem
01118     00 2A 06 F6 | 	mov	result1, #0
0111c     04 00 00 FF 
01120     20 0F 06 F1 | 	add	objptr, ##2336
01124     07 5F 02 FB | 	rdlong	arg02, objptr
01128     04 00 00 FF 
0112c     20 0F 86 F1 | 	sub	objptr, ##2336
01130     00 5C 06 F6 | 	mov	arg01, #0
01134     00 60 06 F6 | 	mov	arg03, #0
01138     0A 62 06 F6 | 	mov	arg04, #10
0113c     60 51 B0 FD | 	call	#__system___basic_print_integer
01140     00 5C 06 F6 | 	mov	arg01, #0
01144     0A 5E 06 F6 | 	mov	arg02, #10
01148     00 60 06 F6 | 	mov	arg03, #0
0114c     BC 50 B0 FD | 	call	#__system___basic_print_char
01150     01 2A 06 F6 | 	mov	result1, #1
01154     00 5C 06 F6 | 	mov	arg01, #0
01158     A8 63 B0 FD | 	call	#__system___getiolock_0145
0115c     15 01 68 FC | 	wrlong	#0, result1
01160     00 2A 06 F6 | 	mov	result1, #0
01164     62 5F 02 F6 | 	mov	arg02, local46
01168                 | ' 
01168                 | ' ''---------- Set the (x,y) position of cursor
01168                 | ' 
01168                 | ' cursor_x:=x
01168     34 0E 06 F1 | 	add	objptr, #52
0116c     07 45 48 FC | 	wrbyte	#34, objptr
01170                 | ' cursor_y:=y
01170     01 0E 06 F1 | 	add	objptr, #1
01174     07 5F 42 FC | 	wrbyte	arg02, objptr
01178     35 0E 86 F1 | 	sub	objptr, #53
0117c     00 5C 06 F6 | 	mov	arg01, #0
01180     80 63 B0 FD | 	call	#__system___getiolock_0145
01184     15 5D 02 F6 | 	mov	arg01, result1
01188     34 4D B0 FD | 	call	#__system___lockmem
0118c     00 2A 06 F6 | 	mov	result1, #0
01190     04 00 00 FF 
01194     24 0F 06 F1 | 	add	objptr, ##2340
01198     07 5F 02 FB | 	rdlong	arg02, objptr
0119c     04 00 00 FF 
011a0     24 0F 86 F1 | 	sub	objptr, ##2340
011a4     00 5C 06 F6 | 	mov	arg01, #0
011a8     00 60 06 F6 | 	mov	arg03, #0
011ac     0A 62 06 F6 | 	mov	arg04, #10
011b0     EC 50 B0 FD | 	call	#__system___basic_print_integer
011b4     00 5C 06 F6 | 	mov	arg01, #0
011b8     0A 5E 06 F6 | 	mov	arg02, #10
011bc     00 60 06 F6 | 	mov	arg03, #0
011c0     48 50 B0 FD | 	call	#__system___basic_print_char
011c4     01 2A 06 F6 | 	mov	result1, #1
011c8     00 5C 06 F6 | 	mov	arg01, #0
011cc     34 63 B0 FD | 	call	#__system___getiolock_0145
011d0     15 01 68 FC | 	wrlong	#0, result1
011d4     00 2A 06 F6 | 	mov	result1, #0
011d8     62 5F 02 F6 | 	mov	arg02, local46
011dc                 | ' 
011dc                 | ' ''---------- Set the (x,y) position of cursor
011dc                 | ' 
011dc                 | ' cursor_x:=x
011dc     34 0E 06 F1 | 	add	objptr, #52
011e0     07 4B 48 FC | 	wrbyte	#37, objptr
011e4                 | ' cursor_y:=y
011e4     01 0E 06 F1 | 	add	objptr, #1
011e8     07 5F 42 FC | 	wrbyte	arg02, objptr
011ec     35 0E 86 F1 | 	sub	objptr, #53
011f0     00 5C 06 F6 | 	mov	arg01, #0
011f4     0C 63 B0 FD | 	call	#__system___getiolock_0145
011f8     15 5D 02 F6 | 	mov	arg01, result1
011fc     C0 4C B0 FD | 	call	#__system___lockmem
01200     00 2A 06 F6 | 	mov	result1, #0
01204     04 00 00 FF 
01208     18 0F 06 F1 | 	add	objptr, ##2328
0120c     07 5F 02 FB | 	rdlong	arg02, objptr
01210     04 00 00 FF 
01214     18 0F 86 F1 | 	sub	objptr, ##2328
01218     00 5C 06 F6 | 	mov	arg01, #0
0121c     00 60 06 F6 | 	mov	arg03, #0
01220     0A 62 06 F6 | 	mov	arg04, #10
01224     78 50 B0 FD | 	call	#__system___basic_print_integer
01228     00 5C 06 F6 | 	mov	arg01, #0
0122c     0A 5E 06 F6 | 	mov	arg02, #10
01230     00 60 06 F6 | 	mov	arg03, #0
01234     D4 4F B0 FD | 	call	#__system___basic_print_char
01238     01 2A 06 F6 | 	mov	result1, #1
0123c     00 5C 06 F6 | 	mov	arg01, #0
01240     C0 62 B0 FD | 	call	#__system___getiolock_0145
01244     15 01 68 FC | 	wrlong	#0, result1
01248     00 2A 06 F6 | 	mov	result1, #0
0124c     62 5F 02 F6 | 	mov	arg02, local46
01250                 | ' 
01250                 | ' ''---------- Set the (x,y) position of cursor
01250                 | ' 
01250                 | ' cursor_x:=x
01250     34 0E 06 F1 | 	add	objptr, #52
01254     07 57 48 FC | 	wrbyte	#43, objptr
01258                 | ' cursor_y:=y
01258     01 0E 06 F1 | 	add	objptr, #1
0125c     07 5F 42 FC | 	wrbyte	arg02, objptr
01260     35 0E 86 F1 | 	sub	objptr, #53
01264     00 5C 06 F6 | 	mov	arg01, #0
01268     98 62 B0 FD | 	call	#__system___getiolock_0145
0126c     15 5D 02 F6 | 	mov	arg01, result1
01270     4C 4C B0 FD | 	call	#__system___lockmem
01274     00 2A 06 F6 | 	mov	result1, #0
01278     04 00 00 FF 
0127c     1C 0F 06 F1 | 	add	objptr, ##2332
01280     07 5F 02 FB | 	rdlong	arg02, objptr
01284     04 00 00 FF 
01288     1C 0F 86 F1 | 	sub	objptr, ##2332
0128c     00 5C 06 F6 | 	mov	arg01, #0
01290     00 60 06 F6 | 	mov	arg03, #0
01294     0A 62 06 F6 | 	mov	arg04, #10
01298     04 50 B0 FD | 	call	#__system___basic_print_integer
0129c     00 5C 06 F6 | 	mov	arg01, #0
012a0     0A 5E 06 F6 | 	mov	arg02, #10
012a4     00 60 06 F6 | 	mov	arg03, #0
012a8     60 4F B0 FD | 	call	#__system___basic_print_char
012ac     01 2A 06 F6 | 	mov	result1, #1
012b0     00 5C 06 F6 | 	mov	arg01, #0
012b4     4C 62 B0 FD | 	call	#__system___getiolock_0145
012b8     15 01 68 FC | 	wrlong	#0, result1
012bc     00 2A 06 F6 | 	mov	result1, #0
012c0                 | LR__0013
012c0                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
012c0     10 92 5E F2 | 	cmps	local21, #16 wcz
012c4     C4 02 90 CD |  if_b	jmp	#LR__0014
012c8     49 C9 02 F6 | 	mov	local48, local21
012cc     0B C8 86 F1 | 	sub	local48, #11
012d0     64 5F 02 F6 | 	mov	arg02, local48
012d4                 | ' 
012d4                 | ' ''---------- Set the (x,y) position of cursor
012d4                 | ' 
012d4                 | ' cursor_x:=x
012d4     34 0E 06 F1 | 	add	objptr, #52
012d8     07 73 48 FC | 	wrbyte	#57, objptr
012dc                 | ' cursor_y:=y
012dc     01 0E 06 F1 | 	add	objptr, #1
012e0     07 5F 42 FC | 	wrbyte	arg02, objptr
012e4     49 CB 02 F6 | 	mov	local49, local21
012e8     02 CA 66 F0 | 	shl	local49, #2
012ec     04 00 00 FF 
012f0     2F 0E 06 F1 | 	add	objptr, ##2095
012f4     07 CB 02 F1 | 	add	local49, objptr
012f8     00 5C 06 F6 | 	mov	arg01, #0
012fc     04 00 00 FF 
01300     64 0E 86 F1 | 	sub	objptr, ##2148
01304     FC 61 B0 FD | 	call	#__system___getiolock_0145
01308     15 5D 02 F6 | 	mov	arg01, result1
0130c     B0 4B B0 FD | 	call	#__system___lockmem
01310     00 2A 06 F6 | 	mov	result1, #0
01314     65 5F 02 FB | 	rdlong	arg02, local49
01318     00 5C 06 F6 | 	mov	arg01, #0
0131c     00 60 06 F6 | 	mov	arg03, #0
01320     34 4F B0 FD | 	call	#__system___basic_print_string
01324     00 5C 06 F6 | 	mov	arg01, #0
01328     0A 5E 06 F6 | 	mov	arg02, #10
0132c     00 60 06 F6 | 	mov	arg03, #0
01330     D8 4E B0 FD | 	call	#__system___basic_print_char
01334     01 2A 06 F6 | 	mov	result1, #1
01338     00 5C 06 F6 | 	mov	arg01, #0
0133c     C4 61 B0 FD | 	call	#__system___getiolock_0145
01340     15 01 68 FC | 	wrlong	#0, result1
01344     00 2A 06 F6 | 	mov	result1, #0
01348     64 5F 02 F6 | 	mov	arg02, local48
0134c                 | ' 
0134c                 | ' ''---------- Set the (x,y) position of cursor
0134c                 | ' 
0134c                 | ' cursor_x:=x
0134c     34 0E 06 F1 | 	add	objptr, #52
01350     07 A1 48 FC | 	wrbyte	#80, objptr
01354                 | ' cursor_y:=y
01354     01 0E 06 F1 | 	add	objptr, #1
01358     07 5F 42 FC | 	wrbyte	arg02, objptr
0135c     35 0E 86 F1 | 	sub	objptr, #53
01360     00 5C 06 F6 | 	mov	arg01, #0
01364     9C 61 B0 FD | 	call	#__system___getiolock_0145
01368     15 5D 02 F6 | 	mov	arg01, result1
0136c     50 4B B0 FD | 	call	#__system___lockmem
01370     00 2A 06 F6 | 	mov	result1, #0
01374     04 00 00 FF 
01378     14 0F 06 F1 | 	add	objptr, ##2324
0137c     07 5F 02 FB | 	rdlong	arg02, objptr
01380     04 00 00 FF 
01384     14 0F 86 F1 | 	sub	objptr, ##2324
01388     00 5C 06 F6 | 	mov	arg01, #0
0138c     00 60 06 F6 | 	mov	arg03, #0
01390     0A 62 06 F6 | 	mov	arg04, #10
01394     08 4F B0 FD | 	call	#__system___basic_print_integer
01398     00 5C 06 F6 | 	mov	arg01, #0
0139c     0A 5E 06 F6 | 	mov	arg02, #10
013a0     00 60 06 F6 | 	mov	arg03, #0
013a4     64 4E B0 FD | 	call	#__system___basic_print_char
013a8     01 2A 06 F6 | 	mov	result1, #1
013ac     00 5C 06 F6 | 	mov	arg01, #0
013b0     50 61 B0 FD | 	call	#__system___getiolock_0145
013b4     15 01 68 FC | 	wrlong	#0, result1
013b8     00 2A 06 F6 | 	mov	result1, #0
013bc     64 5F 02 F6 | 	mov	arg02, local48
013c0                 | ' 
013c0                 | ' ''---------- Set the (x,y) position of cursor
013c0                 | ' 
013c0                 | ' cursor_x:=x
013c0     34 0E 06 F1 | 	add	objptr, #52
013c4     07 AF 48 FC | 	wrbyte	#87, objptr
013c8                 | ' cursor_y:=y
013c8     01 0E 06 F1 | 	add	objptr, #1
013cc     07 5F 42 FC | 	wrbyte	arg02, objptr
013d0     35 0E 86 F1 | 	sub	objptr, #53
013d4     00 5C 06 F6 | 	mov	arg01, #0
013d8     28 61 B0 FD | 	call	#__system___getiolock_0145
013dc     15 5D 02 F6 | 	mov	arg01, result1
013e0     DC 4A B0 FD | 	call	#__system___lockmem
013e4     00 2A 06 F6 | 	mov	result1, #0
013e8     04 00 00 FF 
013ec     20 0F 06 F1 | 	add	objptr, ##2336
013f0     07 5F 02 FB | 	rdlong	arg02, objptr
013f4     04 00 00 FF 
013f8     20 0F 86 F1 | 	sub	objptr, ##2336
013fc     00 5C 06 F6 | 	mov	arg01, #0
01400     00 60 06 F6 | 	mov	arg03, #0
01404     0A 62 06 F6 | 	mov	arg04, #10
01408     94 4E B0 FD | 	call	#__system___basic_print_integer
0140c     00 5C 06 F6 | 	mov	arg01, #0
01410     0A 5E 06 F6 | 	mov	arg02, #10
01414     00 60 06 F6 | 	mov	arg03, #0
01418     F0 4D B0 FD | 	call	#__system___basic_print_char
0141c     01 2A 06 F6 | 	mov	result1, #1
01420     00 5C 06 F6 | 	mov	arg01, #0
01424     DC 60 B0 FD | 	call	#__system___getiolock_0145
01428     15 01 68 FC | 	wrlong	#0, result1
0142c     00 2A 06 F6 | 	mov	result1, #0
01430     64 5F 02 F6 | 	mov	arg02, local48
01434                 | ' 
01434                 | ' ''---------- Set the (x,y) position of cursor
01434                 | ' 
01434                 | ' cursor_x:=x
01434     34 0E 06 F1 | 	add	objptr, #52
01438     07 B5 48 FC | 	wrbyte	#90, objptr
0143c                 | ' cursor_y:=y
0143c     01 0E 06 F1 | 	add	objptr, #1
01440     07 5F 42 FC | 	wrbyte	arg02, objptr
01444     35 0E 86 F1 | 	sub	objptr, #53
01448     00 5C 06 F6 | 	mov	arg01, #0
0144c     B4 60 B0 FD | 	call	#__system___getiolock_0145
01450     15 5D 02 F6 | 	mov	arg01, result1
01454     68 4A B0 FD | 	call	#__system___lockmem
01458     00 2A 06 F6 | 	mov	result1, #0
0145c     04 00 00 FF 
01460     24 0F 06 F1 | 	add	objptr, ##2340
01464     07 5F 02 FB | 	rdlong	arg02, objptr
01468     04 00 00 FF 
0146c     24 0F 86 F1 | 	sub	objptr, ##2340
01470     00 5C 06 F6 | 	mov	arg01, #0
01474     00 60 06 F6 | 	mov	arg03, #0
01478     0A 62 06 F6 | 	mov	arg04, #10
0147c     20 4E B0 FD | 	call	#__system___basic_print_integer
01480     00 5C 06 F6 | 	mov	arg01, #0
01484     0A 5E 06 F6 | 	mov	arg02, #10
01488     00 60 06 F6 | 	mov	arg03, #0
0148c     7C 4D B0 FD | 	call	#__system___basic_print_char
01490     01 2A 06 F6 | 	mov	result1, #1
01494     00 5C 06 F6 | 	mov	arg01, #0
01498     68 60 B0 FD | 	call	#__system___getiolock_0145
0149c     15 01 68 FC | 	wrlong	#0, result1
014a0     00 2A 06 F6 | 	mov	result1, #0
014a4     64 5F 02 F6 | 	mov	arg02, local48
014a8                 | ' 
014a8                 | ' ''---------- Set the (x,y) position of cursor
014a8                 | ' 
014a8                 | ' cursor_x:=x
014a8     34 0E 06 F1 | 	add	objptr, #52
014ac     07 BB 48 FC | 	wrbyte	#93, objptr
014b0                 | ' cursor_y:=y
014b0     01 0E 06 F1 | 	add	objptr, #1
014b4     07 5F 42 FC | 	wrbyte	arg02, objptr
014b8     35 0E 86 F1 | 	sub	objptr, #53
014bc     00 5C 06 F6 | 	mov	arg01, #0
014c0     40 60 B0 FD | 	call	#__system___getiolock_0145
014c4     15 5D 02 F6 | 	mov	arg01, result1
014c8     F4 49 B0 FD | 	call	#__system___lockmem
014cc     00 2A 06 F6 | 	mov	result1, #0
014d0     04 00 00 FF 
014d4     18 0F 06 F1 | 	add	objptr, ##2328
014d8     07 5F 02 FB | 	rdlong	arg02, objptr
014dc     04 00 00 FF 
014e0     18 0F 86 F1 | 	sub	objptr, ##2328
014e4     00 5C 06 F6 | 	mov	arg01, #0
014e8     00 60 06 F6 | 	mov	arg03, #0
014ec     0A 62 06 F6 | 	mov	arg04, #10
014f0     AC 4D B0 FD | 	call	#__system___basic_print_integer
014f4     00 5C 06 F6 | 	mov	arg01, #0
014f8     0A 5E 06 F6 | 	mov	arg02, #10
014fc     00 60 06 F6 | 	mov	arg03, #0
01500     08 4D B0 FD | 	call	#__system___basic_print_char
01504     01 2A 06 F6 | 	mov	result1, #1
01508     00 5C 06 F6 | 	mov	arg01, #0
0150c     F4 5F B0 FD | 	call	#__system___getiolock_0145
01510     15 01 68 FC | 	wrlong	#0, result1
01514     00 2A 06 F6 | 	mov	result1, #0
01518     64 5F 02 F6 | 	mov	arg02, local48
0151c                 | ' 
0151c                 | ' ''---------- Set the (x,y) position of cursor
0151c                 | ' 
0151c                 | ' cursor_x:=x
0151c     34 0E 06 F1 | 	add	objptr, #52
01520     07 C7 48 FC | 	wrbyte	#99, objptr
01524                 | ' cursor_y:=y
01524     01 0E 06 F1 | 	add	objptr, #1
01528     07 5F 42 FC | 	wrbyte	arg02, objptr
0152c     35 0E 86 F1 | 	sub	objptr, #53
01530     00 5C 06 F6 | 	mov	arg01, #0
01534     CC 5F B0 FD | 	call	#__system___getiolock_0145
01538     15 5D 02 F6 | 	mov	arg01, result1
0153c     80 49 B0 FD | 	call	#__system___lockmem
01540     00 2A 06 F6 | 	mov	result1, #0
01544     04 00 00 FF 
01548     1C 0F 06 F1 | 	add	objptr, ##2332
0154c     07 5F 02 FB | 	rdlong	arg02, objptr
01550     04 00 00 FF 
01554     1C 0F 86 F1 | 	sub	objptr, ##2332
01558     00 5C 06 F6 | 	mov	arg01, #0
0155c     00 60 06 F6 | 	mov	arg03, #0
01560     0A 62 06 F6 | 	mov	arg04, #10
01564     38 4D B0 FD | 	call	#__system___basic_print_integer
01568     00 5C 06 F6 | 	mov	arg01, #0
0156c     0A 5E 06 F6 | 	mov	arg02, #10
01570     00 60 06 F6 | 	mov	arg03, #0
01574     94 4C B0 FD | 	call	#__system___basic_print_char
01578     01 2A 06 F6 | 	mov	result1, #1
0157c     00 5C 06 F6 | 	mov	arg01, #0
01580     80 5F B0 FD | 	call	#__system___getiolock_0145
01584     15 01 68 FC | 	wrlong	#0, result1
01588     00 2A 06 F6 | 	mov	result1, #0
0158c                 | LR__0014
0158c     01 92 06 F1 | 	add	local21, #1
01590     1E AE 06 F1 | 	add	local35, #30
01594     04 B0 06 F1 | 	add	local36, #4
01598     1E B2 06 F1 | 	add	local37, #30
0159c     EC F8 9F FD | 	jmp	#LR__0010
015a0                 | LR__0015
015a0                 | ' print
015a0     00 5C 06 F6 | 	mov	arg01, #0
015a4     5C 5F B0 FD | 	call	#__system___getiolock_0145
015a8     15 5D 02 F6 | 	mov	arg01, result1
015ac     10 49 B0 FD | 	call	#__system___lockmem
015b0     00 2A 06 F6 | 	mov	result1, #0
015b4     00 5C 06 F6 | 	mov	arg01, #0
015b8     0A 5E 06 F6 | 	mov	arg02, #10
015bc     00 60 06 F6 | 	mov	arg03, #0
015c0     48 4C B0 FD | 	call	#__system___basic_print_char
015c4     01 2A 06 F6 | 	mov	result1, #1
015c8     00 5C 06 F6 | 	mov	arg01, #0
015cc     34 5F B0 FD | 	call	#__system___getiolock_0145
015d0     15 01 68 FC | 	wrlong	#0, result1
015d4     03 00 00 FF 
015d8     44 0F 06 F1 | 	add	objptr, ##1860
015dc     07 CD 02 F6 | 	mov	local50, objptr
015e0                 | ' 
015e0                 | ' base:=@channel1[0]
015e0     00 CE 06 F6 | 	mov	local51, #0
015e4     64 D0 06 F6 | 	mov	local52, #100
015e8     90 EA 9F FE | 	loc	pa,	#(@LR__0018-@LR__0016)
015ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
015f0                 | LR__0016
015f0     08 3C DC FC | 	rep	@LR__0019, #8
015f4                 | LR__0017
015f4     66 D3 02 F6 | 	mov	local53, local50
015f8     67 D3 02 F1 | 	add	local53, local51
015fc                 | '   long [base+32*iii]:=0
015fc     69 01 68 FC | 	wrlong	#0, local53
01600     01 00 00 FF 
01604     1C 17 06 F1 | 	add	ptr__audio018_spin2_dat__, ##796
01608     69 D5 02 F6 | 	mov	local54, local53
0160c     08 D4 06 F1 | 	add	local54, #8
01610                 | '   long [base+32*iii+8]:=@null
01610     6A 17 62 FC | 	wrlong	ptr__audio018_spin2_dat__, local54
01614     69 D7 02 F6 | 	mov	local55, local53
01618     0C D6 06 F1 | 	add	local55, #12
0161c                 | '   long[base+32*iii+12]:=0
0161c     6B 01 68 FC | 	wrlong	#0, local55
01620     69 D9 02 F6 | 	mov	local56, local53
01624     10 D8 06 F1 | 	add	local56, #16
01628                 | '   long[base+32*iii+16]:=2 
01628     6C 05 68 FC | 	wrlong	#2, local56
0162c     69 DB 02 F6 | 	mov	local57, local53
01630     14 DA 06 F1 | 	add	local57, #20
01634                 | '   word[base+32*iii+20]:=0
01634     6D 01 58 FC | 	wrword	#0, local57
01638     69 DD 02 F6 | 	mov	local58, local53
0163c     16 DC 06 F1 | 	add	local58, #22
01640                 | '   word[base+32*iii+22]:=8192
01640     10 00 80 FF 
01644     6E 01 58 FC | 	wrword	##8192, local58
01648     69 DF 02 F6 | 	mov	local59, local53
0164c     18 DE 06 F1 | 	add	local59, #24
01650                 | '   word[base+32*iii+24]:=100+2*iii
01650     6F D1 52 FC | 	wrword	local52, local59
01654     1A D2 06 F1 | 	add	local53, #26
01658                 | '   word[base+32*iii+26]:=2
01658     69 05 58 FC | 	wrword	#2, local53
0165c     20 CE 06 F1 | 	add	local51, #32
01660     02 D0 06 F1 | 	add	local52, #2
01664     01 00 00 FF 
01668     1C 17 86 F1 | 	sub	ptr__audio018_spin2_dat__, ##796
0166c                 | LR__0018
0166c                 | LR__0019
0166c                 | ' 
0166c                 | ' cog:=coginit(16,@audio,@channel1)
0166c     0B 5F 02 F6 | 	mov	arg02, ptr__audio018_spin2_dat__
01670     07 61 02 F6 | 	mov	arg03, objptr
01674     10 5C 06 F6 | 	mov	arg01, #16
01678     28 60 62 FD | 	setq	arg03
0167c     2F 5D F2 FC | 	coginit	arg01, arg02 wc
01680     01 5C 66 C6 |  if_b	neg	arg01, #1
01684     2E 2B 02 F6 | 	mov	result1, arg01
01688     15 E1 02 F6 | 	mov	local60, result1
0168c                 | ' waitms(100)
0168c     64 5C 06 F6 | 	mov	arg01, #100
01690     F4 49 B0 FD | 	call	#__system___waitms
01694                 | ' return cog,base
01694     66 2D 02 F6 | 	mov	result2, local50
01698     70 2B 02 F6 | 	mov	result1, local60
0169c     16 87 02 F6 | 	mov	local15, result2
016a0     A4 0F 06 F1 | 	add	objptr, #420
016a4     07 2B 62 FC | 	wrlong	result1, objptr
016a8     04 0E 06 F1 | 	add	objptr, #4
016ac     07 87 62 FC | 	wrlong	local15, objptr
016b0     10 0E 06 F1 | 	add	objptr, #16
016b4     07 01 68 FC | 	wrlong	#0, objptr
016b8     04 0E 06 F1 | 	add	objptr, #4
016bc     07 01 68 FC | 	wrlong	#0, objptr
016c0     04 0E 06 F1 | 	add	objptr, #4
016c4     07 01 68 FC | 	wrlong	#0, objptr
016c8     04 0E 06 F1 | 	add	objptr, #4
016cc     07 01 68 FC | 	wrlong	#0, objptr
016d0     04 00 00 FF 
016d4     08 0F 86 F1 | 	sub	objptr, ##2312
016d8                 | ' getinfo(ma,samples)
016d8                 | ' 
016d8                 | ' cog,base=paula.start()
016d8                 | ' 
016d8                 | ' old1=0 : old2=0 :old3=0 : old4=0
016d8                 | ' 
016d8                 | ' do
016d8                 | LR__0020
016d8                 | ' 
016d8                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
016d8                 | ' 
016d8                 | ' repeat i from 1 to amount
016d8     01 E2 06 F6 | 	mov	local61, #1
016dc                 | LR__0021
016dc                 | '   repeat until vblank==0
016dc                 | LR__0022
016dc     40 0E 06 F1 | 	add	objptr, #64
016e0     07 E5 0A FB | 	rdlong	local62, objptr wz
016e4     40 0E 86 F1 | 	sub	objptr, #64
016e8     0C 00 90 AD |  if_e	jmp	#LR__0023
016ec                 | '     waitus(100)
016ec     64 5C 06 F6 | 	mov	arg01, #100
016f0     10 4A B0 FD | 	call	#__system___waitus
016f4     E4 FF 9F FD | 	jmp	#LR__0022
016f8                 | LR__0023
016f8                 | '   repeat until vblank==1
016f8                 | LR__0024
016f8     40 0E 06 F1 | 	add	objptr, #64
016fc     07 E5 02 FB | 	rdlong	local62, objptr
01700     40 0E 86 F1 | 	sub	objptr, #64
01704     01 E4 0E F2 | 	cmp	local62, #1 wz
01708     0C 00 90 AD |  if_e	jmp	#LR__0025
0170c                 | '     waitus(100)
0170c     64 5C 06 F6 | 	mov	arg01, #100
01710     F0 49 B0 FD | 	call	#__system___waitus
01714     E0 FF 9F FD | 	jmp	#LR__0024
01718                 | LR__0025
01718     F0 E3 6E FB | 	djnz	local61, #LR__0021
0171c     02 00 00 FF 
01720     48 0F 06 F1 | 	add	objptr, ##1352
01724     D0 29 B0 FD | 	call	#_trackerplayer_spin2_tick
01728     01 00 00 FF 
0172c     A4 0F 06 F1 | 	add	objptr, ##932
01730     07 5D 02 FB | 	rdlong	arg01, objptr
01734     08 5C 06 F1 | 	add	arg01, #8
01738     01 00 00 FF 
0173c     FD 0E 86 F1 | 	sub	objptr, ##765
01740     07 5F 02 FB | 	rdlong	arg02, objptr
01744                 | ' asm
01744     2E 5F 62 FC | 	wrlong	arg02, arg01
01748     01 00 00 FF 
0174c     FD 0E 06 F1 | 	add	objptr, ##765
01750     07 5D 02 FB | 	rdlong	arg01, objptr
01754     0C 5C 06 F1 | 	add	arg01, #12
01758     01 00 00 FF 
0175c     E9 0E 86 F1 | 	sub	objptr, ##745
01760     07 5F E2 FA | 	rdword	arg02, objptr
01764     08 0E 06 F1 | 	add	objptr, #8
01768     07 E7 02 FB | 	rdlong	local63, objptr
0176c     73 5F 82 F1 | 	sub	arg02, local63
01770                 | ' asm
01770     2E 5F 62 FC | 	wrlong	arg02, arg01
01774     01 00 00 FF 
01778     E1 0E 06 F1 | 	add	objptr, ##737
0177c     07 5D 02 FB | 	rdlong	arg01, objptr
01780     10 5C 06 F1 | 	add	arg01, #16
01784     01 00 00 FF 
01788     E9 0E 86 F1 | 	sub	objptr, ##745
0178c     07 5F E2 FA | 	rdword	arg02, objptr
01790                 | ' asm
01790     2E 5F 62 FC | 	wrlong	arg02, arg01
01794     01 00 00 FF 
01798     E9 0E 06 F1 | 	add	objptr, ##745
0179c     07 5D 02 FB | 	rdlong	arg01, objptr
017a0     14 5C 06 F1 | 	add	arg01, #20
017a4     01 00 00 FF 
017a8     A5 0E 86 F1 | 	sub	objptr, ##677
017ac     07 87 02 FB | 	rdlong	local15, objptr
017b0     10 0E 06 F1 | 	add	objptr, #16
017b4     07 E7 02 FB | 	rdlong	local63, objptr
017b8     73 87 02 F1 | 	add	local15, local63
017bc     27 0F 86 F1 | 	sub	objptr, #295
017c0     07 89 02 FB | 	rdlong	local16, objptr
017c4     44 87 02 FD | 	qmul	local15, local16
017c8     18 5E 62 FD | 	getqx	arg02
017cc                 | ' asm
017cc     2E 5F 52 FC | 	wrword	arg02, arg01
017d0     01 00 00 FF 
017d4     BC 0F 06 F1 | 	add	objptr, ##956
017d8     07 5D 02 FB | 	rdlong	arg01, objptr
017dc     16 5C 06 F1 | 	add	arg01, #22
017e0                 | ' asm
017e0     0C 00 80 FF 
017e4     2E 01 58 FC | 	wrword	##6144, arg01
017e8     07 5D 02 FB | 	rdlong	arg01, objptr
017ec     18 5C 06 F1 | 	add	arg01, #24
017f0     01 00 00 FF 
017f4     C5 0E 86 F1 | 	sub	objptr, ##709
017f8     07 5F 02 FB | 	rdlong	arg02, objptr
017fc     10 0E 06 F1 | 	add	objptr, #16
01800     07 E7 02 FB | 	rdlong	local63, objptr
01804     73 5F 02 F1 | 	add	arg02, local63
01808                 | ' asm
01808     2E 5F 52 FC | 	wrword	arg02, arg01
0180c     01 00 00 FF 
01810     B5 0E 06 F1 | 	add	objptr, ##693
01814     07 5D 02 FB | 	rdlong	arg01, objptr
01818     1A 5C 06 F1 | 	add	arg01, #26
0181c                 | ' asm
0181c     2E 03 58 FC | 	wrword	#1, arg01
01820                 | ' 'channel+0  long current spl pointer 
01820                 | ' 'channel+4  long sample
01820                 | ' 'channel+8  long sample start - bit31=1 when 16 bit spl
01820                 | ' 'channel+12 long loop start
01820                 | ' 'channel+16 long loop end
01820                 | ' 'channel+20 word volume
01820                 | ' 'channel+22 word pan
01820                 | ' 'channel+24 word synthfreq
01820                 | ' 'channel+26 word skip
01820                 | ' 'channel+28 long reserved
01820                 | ' 
01820                 | '     waitvbl
01820                 | '     tracker.tick
01820                 | '     
01820                 | '     lpoke base+8, tracker.currSamplePtr(0)
01820                 | '     lpoke base+12,tracker.currsamplelength(0)-tracker.currrepeatLength(0)
01820                 | '     lpoke base+16,tracker.currsamplelength(0)
01820                 | '     dpoke base+20, (tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
01820                 | '     dpoke base+22, 8192-2048
01820                 | '     dpoke base+24, tracker.currPeriod(0)+tracker.deltaperiod(0)
01820                 | '     dpoke base+26, 1
01820                 | '     if tracker.trigger(0) <> old1 then lpoke base+0,  0: old1=tracker.trigger(0)
01820     AE 0F 86 F1 | 	sub	objptr, #430
01824     07 7D C2 FA | 	rdbyte	local10, objptr
01828     BE 0F 06 F1 | 	add	objptr, #446
0182c     07 E9 02 FB | 	rdlong	local64, objptr
01830     04 00 00 FF 
01834     FC 0E 86 F1 | 	sub	objptr, ##2300
01838     74 7D 0A F2 | 	cmp	local10, local64 wz
0183c     28 00 90 AD |  if_e	jmp	#LR__0026
01840     04 00 00 FF 
01844     EC 0E 06 F1 | 	add	objptr, ##2284
01848     07 5D 02 FB | 	rdlong	arg01, objptr
0184c                 | ' asm
0184c     2E 01 68 FC | 	wrlong	#0, arg01
01850     AE 0F 86 F1 | 	sub	objptr, #430
01854     07 7D C2 FA | 	rdbyte	local10, objptr
01858     BE 0F 06 F1 | 	add	objptr, #446
0185c     07 7D 62 FC | 	wrlong	local10, objptr
01860     04 00 00 FF 
01864     FC 0E 86 F1 | 	sub	objptr, ##2300
01868                 | LR__0026
01868     20 5C 06 F6 | 	mov	arg01, #32
0186c     04 00 00 FF 
01870     EC 0E 06 F1 | 	add	objptr, ##2284
01874     07 7D 02 FB | 	rdlong	local10, objptr
01878     3E 5D 02 F1 | 	add	arg01, local10
0187c     08 5C 06 F1 | 	add	arg01, #8
01880     01 00 00 FF 
01884     F9 0E 86 F1 | 	sub	objptr, ##761
01888     07 5F 02 FB | 	rdlong	arg02, objptr
0188c                 | ' asm
0188c     2E 5F 62 FC | 	wrlong	arg02, arg01
01890     20 5C 06 F6 | 	mov	arg01, #32
01894     01 00 00 FF 
01898     F9 0E 06 F1 | 	add	objptr, ##761
0189c     07 7D 02 FB | 	rdlong	local10, objptr
018a0     3E 5D 02 F1 | 	add	arg01, local10
018a4     0C 5C 06 F1 | 	add	arg01, #12
018a8     01 00 00 FF 
018ac     E7 0E 86 F1 | 	sub	objptr, ##743
018b0     07 5F E2 FA | 	rdword	arg02, objptr
018b4     0A 0E 06 F1 | 	add	objptr, #10
018b8     07 E7 02 FB | 	rdlong	local63, objptr
018bc     73 5F 82 F1 | 	sub	arg02, local63
018c0                 | ' asm
018c0     2E 5F 62 FC | 	wrlong	arg02, arg01
018c4     20 5C 06 F6 | 	mov	arg01, #32
018c8     01 00 00 FF 
018cc     DD 0E 06 F1 | 	add	objptr, ##733
018d0     07 7D 02 FB | 	rdlong	local10, objptr
018d4     3E 5D 02 F1 | 	add	arg01, local10
018d8     10 5C 06 F1 | 	add	arg01, #16
018dc     01 00 00 FF 
018e0     E7 0E 86 F1 | 	sub	objptr, ##743
018e4     07 5F E2 FA | 	rdword	arg02, objptr
018e8                 | ' asm
018e8     2E 5F 62 FC | 	wrlong	arg02, arg01
018ec     20 5C 06 F6 | 	mov	arg01, #32
018f0     01 00 00 FF 
018f4     E7 0E 06 F1 | 	add	objptr, ##743
018f8     07 7D 02 FB | 	rdlong	local10, objptr
018fc     3E 5D 02 F1 | 	add	arg01, local10
01900     14 5C 06 F1 | 	add	arg01, #20
01904     01 00 00 FF 
01908     A1 0E 86 F1 | 	sub	objptr, ##673
0190c     07 87 02 FB | 	rdlong	local15, objptr
01910     10 0E 06 F1 | 	add	objptr, #16
01914     07 E7 02 FB | 	rdlong	local63, objptr
01918     73 87 02 F1 | 	add	local15, local63
0191c     2B 0F 86 F1 | 	sub	objptr, #299
01920     07 89 02 FB | 	rdlong	local16, objptr
01924     44 87 02 FD | 	qmul	local15, local16
01928     18 5E 62 FD | 	getqx	arg02
0192c                 | ' asm
0192c     2E 5F 52 FC | 	wrword	arg02, arg01
01930     20 5C 06 F6 | 	mov	arg01, #32
01934     01 00 00 FF 
01938     BC 0F 06 F1 | 	add	objptr, ##956
0193c     07 7D 02 FB | 	rdlong	local10, objptr
01940     3E 5D 02 F1 | 	add	arg01, local10
01944     16 5C 06 F1 | 	add	arg01, #22
01948                 | ' asm
01948     14 00 80 FF 
0194c     2E 01 58 FC | 	wrword	##10240, arg01
01950     20 5C 06 F6 | 	mov	arg01, #32
01954     07 7D 02 FB | 	rdlong	local10, objptr
01958     3E 5D 02 F1 | 	add	arg01, local10
0195c     18 5C 06 F1 | 	add	arg01, #24
01960     01 00 00 FF 
01964     C1 0E 86 F1 | 	sub	objptr, ##705
01968     07 5F 02 FB | 	rdlong	arg02, objptr
0196c     10 0E 06 F1 | 	add	objptr, #16
01970     07 E7 02 FB | 	rdlong	local63, objptr
01974     73 5F 02 F1 | 	add	arg02, local63
01978                 | ' asm
01978     2E 5F 52 FC | 	wrword	arg02, arg01
0197c     20 5C 06 F6 | 	mov	arg01, #32
01980     01 00 00 FF 
01984     B1 0E 06 F1 | 	add	objptr, ##689
01988     07 7D 02 FB | 	rdlong	local10, objptr
0198c     3E 5D 02 F1 | 	add	arg01, local10
01990     1A 5C 06 F1 | 	add	arg01, #26
01994                 | ' asm
01994     2E 03 58 FC | 	wrword	#1, arg01
01998                 | ' 
01998                 | '     lpoke 32+base+8, tracker.currSamplePtr(1)
01998                 | '     lpoke 32+base+12,tracker.currsamplelength(1)-tracker.currrepeatLength(1)
01998                 | '     lpoke 32+base+16,tracker.currsamplelength(1)
01998                 | '     dpoke 32+base+20, (tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
01998                 | '     dpoke 32+base+22, 8192+2048
01998                 | '     dpoke 32+base+24, tracker.currPeriod(1)+tracker.deltaperiod(1)
01998                 | '     dpoke 32+base+26, 1
01998                 | '     if tracker.trigger(1) <> old2 then lpoke base+32,  0: old2=tracker.trigger(1)
01998     AD 0F 86 F1 | 	sub	objptr, #429
0199c     07 7D C2 FA | 	rdbyte	local10, objptr
019a0     C1 0F 06 F1 | 	add	objptr, #449
019a4     07 E9 02 FB | 	rdlong	local64, objptr
019a8     04 00 00 FF 
019ac     00 0F 86 F1 | 	sub	objptr, ##2304
019b0     74 7D 0A F2 | 	cmp	local10, local64 wz
019b4     2C 00 90 AD |  if_e	jmp	#LR__0027
019b8     04 00 00 FF 
019bc     EC 0E 06 F1 | 	add	objptr, ##2284
019c0     07 5D 02 FB | 	rdlong	arg01, objptr
019c4     20 5C 06 F1 | 	add	arg01, #32
019c8                 | ' asm
019c8     2E 01 68 FC | 	wrlong	#0, arg01
019cc     AD 0F 86 F1 | 	sub	objptr, #429
019d0     07 7D C2 FA | 	rdbyte	local10, objptr
019d4     C1 0F 06 F1 | 	add	objptr, #449
019d8     07 7D 62 FC | 	wrlong	local10, objptr
019dc     04 00 00 FF 
019e0     00 0F 86 F1 | 	sub	objptr, ##2304
019e4                 | LR__0027
019e4     40 5C 06 F6 | 	mov	arg01, #64
019e8     04 00 00 FF 
019ec     EC 0E 06 F1 | 	add	objptr, ##2284
019f0     07 7D 02 FB | 	rdlong	local10, objptr
019f4     3E 5D 02 F1 | 	add	arg01, local10
019f8     08 5C 06 F1 | 	add	arg01, #8
019fc     01 00 00 FF 
01a00     F5 0E 86 F1 | 	sub	objptr, ##757
01a04     07 5F 02 FB | 	rdlong	arg02, objptr
01a08                 | ' asm
01a08     2E 5F 62 FC | 	wrlong	arg02, arg01
01a0c     40 5C 06 F6 | 	mov	arg01, #64
01a10     01 00 00 FF 
01a14     F5 0E 06 F1 | 	add	objptr, ##757
01a18     07 7D 02 FB | 	rdlong	local10, objptr
01a1c     3E 5D 02 F1 | 	add	arg01, local10
01a20     0C 5C 06 F1 | 	add	arg01, #12
01a24     01 00 00 FF 
01a28     E5 0E 86 F1 | 	sub	objptr, ##741
01a2c     07 5F E2 FA | 	rdword	arg02, objptr
01a30     0C 0E 06 F1 | 	add	objptr, #12
01a34     07 E7 02 FB | 	rdlong	local63, objptr
01a38     73 5F 82 F1 | 	sub	arg02, local63
01a3c                 | ' asm
01a3c     2E 5F 62 FC | 	wrlong	arg02, arg01
01a40     40 5C 06 F6 | 	mov	arg01, #64
01a44     01 00 00 FF 
01a48     D9 0E 06 F1 | 	add	objptr, ##729
01a4c     07 7D 02 FB | 	rdlong	local10, objptr
01a50     3E 5D 02 F1 | 	add	arg01, local10
01a54     10 5C 06 F1 | 	add	arg01, #16
01a58     01 00 00 FF 
01a5c     E5 0E 86 F1 | 	sub	objptr, ##741
01a60     07 5F E2 FA | 	rdword	arg02, objptr
01a64                 | ' asm
01a64     2E 5F 62 FC | 	wrlong	arg02, arg01
01a68     40 5C 06 F6 | 	mov	arg01, #64
01a6c     01 00 00 FF 
01a70     E5 0E 06 F1 | 	add	objptr, ##741
01a74     07 7D 02 FB | 	rdlong	local10, objptr
01a78     3E 5D 02 F1 | 	add	arg01, local10
01a7c     14 5C 06 F1 | 	add	arg01, #20
01a80     01 00 00 FF 
01a84     9D 0E 86 F1 | 	sub	objptr, ##669
01a88     07 87 02 FB | 	rdlong	local15, objptr
01a8c     10 0E 06 F1 | 	add	objptr, #16
01a90     07 E7 02 FB | 	rdlong	local63, objptr
01a94     73 87 02 F1 | 	add	local15, local63
01a98     2F 0F 86 F1 | 	sub	objptr, #303
01a9c     07 89 02 FB | 	rdlong	local16, objptr
01aa0     44 87 02 FD | 	qmul	local15, local16
01aa4     18 5E 62 FD | 	getqx	arg02
01aa8                 | ' asm
01aa8     2E 5F 52 FC | 	wrword	arg02, arg01
01aac     40 5C 06 F6 | 	mov	arg01, #64
01ab0     01 00 00 FF 
01ab4     BC 0F 06 F1 | 	add	objptr, ##956
01ab8     07 7D 02 FB | 	rdlong	local10, objptr
01abc     3E 5D 02 F1 | 	add	arg01, local10
01ac0     16 5C 06 F1 | 	add	arg01, #22
01ac4                 | ' asm
01ac4     14 00 80 FF 
01ac8     2E 01 58 FC | 	wrword	##10240, arg01
01acc     40 5C 06 F6 | 	mov	arg01, #64
01ad0     07 7D 02 FB | 	rdlong	local10, objptr
01ad4     3E 5D 02 F1 | 	add	arg01, local10
01ad8     18 5C 06 F1 | 	add	arg01, #24
01adc     01 00 00 FF 
01ae0     BD 0E 86 F1 | 	sub	objptr, ##701
01ae4     07 5F 02 FB | 	rdlong	arg02, objptr
01ae8     10 0E 06 F1 | 	add	objptr, #16
01aec     07 E7 02 FB | 	rdlong	local63, objptr
01af0     73 5F 02 F1 | 	add	arg02, local63
01af4                 | ' asm
01af4     2E 5F 52 FC | 	wrword	arg02, arg01
01af8     40 5C 06 F6 | 	mov	arg01, #64
01afc     01 00 00 FF 
01b00     AD 0E 06 F1 | 	add	objptr, ##685
01b04     07 7D 02 FB | 	rdlong	local10, objptr
01b08     3E 5D 02 F1 | 	add	arg01, local10
01b0c     1A 5C 06 F1 | 	add	arg01, #26
01b10                 | ' asm
01b10     2E 03 58 FC | 	wrword	#1, arg01
01b14                 | ' 
01b14                 | '     lpoke 64+base+8, tracker.currSamplePtr(2)
01b14                 | '     lpoke 64+base+12,tracker.currsamplelength(2)-tracker.currrepeatLength(2)
01b14                 | '     lpoke 64+base+16,tracker.currsamplelength(2)
01b14                 | '     dpoke 64+base+20, (tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
01b14                 | '     dpoke 64+base+22, 8192+2048
01b14                 | '     dpoke 64+base+24, tracker.currPeriod(2)+tracker.deltaperiod(2)
01b14                 | '     dpoke 64+base+26, 1
01b14                 | '     if tracker.trigger(2) <> old3 then lpoke base+64,  0: old3=tracker.trigger(2)
01b14     AC 0F 86 F1 | 	sub	objptr, #428
01b18     07 7D C2 FA | 	rdbyte	local10, objptr
01b1c     C4 0F 06 F1 | 	add	objptr, #452
01b20     07 E9 02 FB | 	rdlong	local64, objptr
01b24     04 00 00 FF 
01b28     04 0F 86 F1 | 	sub	objptr, ##2308
01b2c     74 7D 0A F2 | 	cmp	local10, local64 wz
01b30     2C 00 90 AD |  if_e	jmp	#LR__0028
01b34     04 00 00 FF 
01b38     EC 0E 06 F1 | 	add	objptr, ##2284
01b3c     07 5D 02 FB | 	rdlong	arg01, objptr
01b40     40 5C 06 F1 | 	add	arg01, #64
01b44                 | ' asm
01b44     2E 01 68 FC | 	wrlong	#0, arg01
01b48     AC 0F 86 F1 | 	sub	objptr, #428
01b4c     07 7D C2 FA | 	rdbyte	local10, objptr
01b50     C4 0F 06 F1 | 	add	objptr, #452
01b54     07 7D 62 FC | 	wrlong	local10, objptr
01b58     04 00 00 FF 
01b5c     04 0F 86 F1 | 	sub	objptr, ##2308
01b60                 | LR__0028
01b60     60 5C 06 F6 | 	mov	arg01, #96
01b64     04 00 00 FF 
01b68     EC 0E 06 F1 | 	add	objptr, ##2284
01b6c     07 7D 02 FB | 	rdlong	local10, objptr
01b70     3E 5D 02 F1 | 	add	arg01, local10
01b74     08 5C 06 F1 | 	add	arg01, #8
01b78     01 00 00 FF 
01b7c     F1 0E 86 F1 | 	sub	objptr, ##753
01b80     07 5F 02 FB | 	rdlong	arg02, objptr
01b84                 | ' asm
01b84     2E 5F 62 FC | 	wrlong	arg02, arg01
01b88     60 5C 06 F6 | 	mov	arg01, #96
01b8c     01 00 00 FF 
01b90     F1 0E 06 F1 | 	add	objptr, ##753
01b94     07 7D 02 FB | 	rdlong	local10, objptr
01b98     3E 5D 02 F1 | 	add	arg01, local10
01b9c     0C 5C 06 F1 | 	add	arg01, #12
01ba0     01 00 00 FF 
01ba4     E3 0E 86 F1 | 	sub	objptr, ##739
01ba8     07 5F E2 FA | 	rdword	arg02, objptr
01bac     0E 0E 06 F1 | 	add	objptr, #14
01bb0     07 E7 02 FB | 	rdlong	local63, objptr
01bb4     73 5F 82 F1 | 	sub	arg02, local63
01bb8                 | ' asm
01bb8     2E 5F 62 FC | 	wrlong	arg02, arg01
01bbc     60 5C 06 F6 | 	mov	arg01, #96
01bc0     01 00 00 FF 
01bc4     D5 0E 06 F1 | 	add	objptr, ##725
01bc8     07 7D 02 FB | 	rdlong	local10, objptr
01bcc     3E 5D 02 F1 | 	add	arg01, local10
01bd0     10 5C 06 F1 | 	add	arg01, #16
01bd4     01 00 00 FF 
01bd8     E3 0E 86 F1 | 	sub	objptr, ##739
01bdc     07 5F E2 FA | 	rdword	arg02, objptr
01be0                 | ' asm
01be0     2E 5F 62 FC | 	wrlong	arg02, arg01
01be4     60 5C 06 F6 | 	mov	arg01, #96
01be8     01 00 00 FF 
01bec     E3 0E 06 F1 | 	add	objptr, ##739
01bf0     07 7D 02 FB | 	rdlong	local10, objptr
01bf4     3E 5D 02 F1 | 	add	arg01, local10
01bf8     14 5C 06 F1 | 	add	arg01, #20
01bfc     01 00 00 FF 
01c00     99 0E 86 F1 | 	sub	objptr, ##665
01c04     07 87 02 FB | 	rdlong	local15, objptr
01c08     10 0E 06 F1 | 	add	objptr, #16
01c0c     07 E7 02 FB | 	rdlong	local63, objptr
01c10     73 87 02 F1 | 	add	local15, local63
01c14     33 0F 86 F1 | 	sub	objptr, #307
01c18     07 89 02 FB | 	rdlong	local16, objptr
01c1c     44 87 02 FD | 	qmul	local15, local16
01c20     18 5E 62 FD | 	getqx	arg02
01c24                 | ' asm
01c24     2E 5F 52 FC | 	wrword	arg02, arg01
01c28     60 5C 06 F6 | 	mov	arg01, #96
01c2c     01 00 00 FF 
01c30     BC 0F 06 F1 | 	add	objptr, ##956
01c34     07 7D 02 FB | 	rdlong	local10, objptr
01c38     3E 5D 02 F1 | 	add	arg01, local10
01c3c     16 5C 06 F1 | 	add	arg01, #22
01c40                 | ' asm
01c40     0C 00 80 FF 
01c44     2E 01 58 FC | 	wrword	##6144, arg01
01c48     60 5C 06 F6 | 	mov	arg01, #96
01c4c     07 7D 02 FB | 	rdlong	local10, objptr
01c50     3E 5D 02 F1 | 	add	arg01, local10
01c54     18 5C 06 F1 | 	add	arg01, #24
01c58     01 00 00 FF 
01c5c     B9 0E 86 F1 | 	sub	objptr, ##697
01c60     07 5F 02 FB | 	rdlong	arg02, objptr
01c64     10 0E 06 F1 | 	add	objptr, #16
01c68     07 E7 02 FB | 	rdlong	local63, objptr
01c6c     73 5F 02 F1 | 	add	arg02, local63
01c70                 | ' asm
01c70     2E 5F 52 FC | 	wrword	arg02, arg01
01c74     60 5C 06 F6 | 	mov	arg01, #96
01c78     01 00 00 FF 
01c7c     A9 0E 06 F1 | 	add	objptr, ##681
01c80     07 7D 02 FB | 	rdlong	local10, objptr
01c84     3E 5D 02 F1 | 	add	arg01, local10
01c88     1A 5C 06 F1 | 	add	arg01, #26
01c8c                 | ' asm
01c8c     2E 03 58 FC | 	wrword	#1, arg01
01c90                 | ' 
01c90                 | '     lpoke 96+base+8, tracker.currSamplePtr(3)
01c90                 | '     lpoke 96+base+12,tracker.currsamplelength(3)-tracker.currrepeatLength(3)
01c90                 | '     lpoke 96+base+16,tracker.currsamplelength(3)
01c90                 | '     dpoke 96+base+20, (tracker.currVolume(3)+tracker.deltavolume(3))*mainvolume
01c90                 | '     dpoke 96+base+22, 8192-2048
01c90                 | '     dpoke 96+base+24, tracker.currPeriod(3)+tracker.deltaperiod(3)
01c90                 | '     dpoke 96+base+26, 1
01c90                 | '     if tracker.trigger(3) <> old4 then lpoke base+96, 0 : old4=tracker.trigger(3)
01c90     AB 0F 86 F1 | 	sub	objptr, #427
01c94     07 7D C2 FA | 	rdbyte	local10, objptr
01c98     C7 0F 06 F1 | 	add	objptr, #455
01c9c     07 E9 02 FB | 	rdlong	local64, objptr
01ca0     04 00 00 FF 
01ca4     08 0F 86 F1 | 	sub	objptr, ##2312
01ca8     74 7D 0A F2 | 	cmp	local10, local64 wz
01cac     2C 00 90 AD |  if_e	jmp	#LR__0029
01cb0     04 00 00 FF 
01cb4     EC 0E 06 F1 | 	add	objptr, ##2284
01cb8     07 5D 02 FB | 	rdlong	arg01, objptr
01cbc     60 5C 06 F1 | 	add	arg01, #96
01cc0                 | ' asm
01cc0     2E 01 68 FC | 	wrlong	#0, arg01
01cc4     AB 0F 86 F1 | 	sub	objptr, #427
01cc8     07 7D C2 FA | 	rdbyte	local10, objptr
01ccc     C7 0F 06 F1 | 	add	objptr, #455
01cd0     07 7D 62 FC | 	wrlong	local10, objptr
01cd4     04 00 00 FF 
01cd8     08 0F 86 F1 | 	sub	objptr, ##2312
01cdc                 | LR__0029
01cdc     1D 5E 06 F6 | 	mov	arg02, #29
01ce0                 | ' 
01ce0                 | ' ''---------- Set the (x,y) position of cursor
01ce0                 | ' 
01ce0                 | ' cursor_x:=x
01ce0     34 0E 06 F1 | 	add	objptr, #52
01ce4     07 0B 48 FC | 	wrbyte	#5, objptr
01ce8                 | ' cursor_y:=y
01ce8     01 0E 06 F1 | 	add	objptr, #1
01cec     07 3B 48 FC | 	wrbyte	#29, objptr
01cf0     02 00 00 FF 
01cf4     CA 0F 06 F1 | 	add	objptr, ##1482
01cf8     07 EB C2 FA | 	rdbyte	local65, objptr
01cfc     02 EA 66 F0 | 	shl	local65, #2
01d00     01 00 00 FF 
01d04     65 0E 06 F1 | 	add	objptr, ##613
01d08     07 EB 02 F1 | 	add	local65, objptr
01d0c     75 5D 02 FB | 	rdlong	arg01, local65
01d10     04 00 00 FF 
01d14     64 0E 86 F1 | 	sub	objptr, ##2148
01d18     EC 08 B0 FD | 	call	#_hng030rm_spin2_write
01d1c     04 00 00 FF 
01d20     F0 0E 06 F1 | 	add	objptr, ##2288
01d24     07 5D 02 FB | 	rdlong	arg01, objptr
01d28     04 00 00 FF 
01d2c     F0 0E 86 F1 | 	sub	objptr, ##2288
01d30     D4 08 B0 FD | 	call	#_hng030rm_spin2_write
01d34                 | ' 
01d34                 | ' ''---------- Set the (x,y) position of cursor
01d34                 | ' 
01d34                 | ' cursor_x:=x
01d34     34 0E 06 F1 | 	add	objptr, #52
01d38     07 03 48 FC | 	wrbyte	#1, objptr
01d3c                 | ' cursor_y:=y
01d3c     01 0E 06 F1 | 	add	objptr, #1
01d40     07 3B 48 FC | 	wrbyte	#29, objptr
01d44     02 00 00 FF 
01d48     F2 0F 06 F1 | 	add	objptr, ##1522
01d4c     07 5D 02 FB | 	rdlong	arg01, objptr
01d50     10 0E 06 F1 | 	add	objptr, #16
01d54     07 EB 02 FB | 	rdlong	local65, objptr
01d58     03 00 00 FF 
01d5c     37 0E 86 F1 | 	sub	objptr, ##1591
01d60     75 5D 02 F1 | 	add	arg01, local65
01d64     03 5E 06 F6 | 	mov	arg02, #3
01d68     18 0B B0 FD | 	call	#_hng030rm_spin2_inttostr2
01d6c     15 5D 02 F6 | 	mov	arg01, result1
01d70     94 08 B0 FD | 	call	#_hng030rm_spin2_write
01d74     1D 5E 06 F6 | 	mov	arg02, #29
01d78                 | ' 
01d78                 | ' ''---------- Set the (x,y) position of cursor
01d78                 | ' 
01d78                 | ' cursor_x:=x
01d78     34 0E 06 F1 | 	add	objptr, #52
01d7c     07 41 48 FC | 	wrbyte	#32, objptr
01d80                 | ' cursor_y:=y
01d80     01 0E 06 F1 | 	add	objptr, #1
01d84     07 3B 48 FC | 	wrbyte	#29, objptr
01d88     02 00 00 FF 
01d8c     CB 0F 06 F1 | 	add	objptr, ##1483
01d90     07 EB C2 FA | 	rdbyte	local65, objptr
01d94     02 EA 66 F0 | 	shl	local65, #2
01d98     01 00 00 FF 
01d9c     64 0E 06 F1 | 	add	objptr, ##612
01da0     07 EB 02 F1 | 	add	local65, objptr
01da4     75 5D 02 FB | 	rdlong	arg01, local65
01da8     04 00 00 FF 
01dac     64 0E 86 F1 | 	sub	objptr, ##2148
01db0     54 08 B0 FD | 	call	#_hng030rm_spin2_write
01db4     04 00 00 FF 
01db8     F0 0E 06 F1 | 	add	objptr, ##2288
01dbc     07 5D 02 FB | 	rdlong	arg01, objptr
01dc0     04 00 00 FF 
01dc4     F0 0E 86 F1 | 	sub	objptr, ##2288
01dc8     3C 08 B0 FD | 	call	#_hng030rm_spin2_write
01dcc                 | ' 
01dcc                 | ' ''---------- Set the (x,y) position of cursor
01dcc                 | ' 
01dcc                 | ' cursor_x:=x
01dcc     34 0E 06 F1 | 	add	objptr, #52
01dd0     07 39 48 FC | 	wrbyte	#28, objptr
01dd4                 | ' cursor_y:=y
01dd4     01 0E 06 F1 | 	add	objptr, #1
01dd8     07 3B 48 FC | 	wrbyte	#29, objptr
01ddc     02 00 00 FF 
01de0     F6 0F 06 F1 | 	add	objptr, ##1526
01de4     07 5D 02 FB | 	rdlong	arg01, objptr
01de8     10 0E 06 F1 | 	add	objptr, #16
01dec     07 EB 02 FB | 	rdlong	local65, objptr
01df0     03 00 00 FF 
01df4     3B 0E 86 F1 | 	sub	objptr, ##1595
01df8     75 5D 02 F1 | 	add	arg01, local65
01dfc     03 5E 06 F6 | 	mov	arg02, #3
01e00     80 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01e04     15 5D 02 F6 | 	mov	arg01, result1
01e08     FC 07 B0 FD | 	call	#_hng030rm_spin2_write
01e0c     1D 5E 06 F6 | 	mov	arg02, #29
01e10                 | ' 
01e10                 | ' ''---------- Set the (x,y) position of cursor
01e10                 | ' 
01e10                 | ' cursor_x:=x
01e10     34 0E 06 F1 | 	add	objptr, #52
01e14     07 79 48 FC | 	wrbyte	#60, objptr
01e18                 | ' cursor_y:=y
01e18     01 0E 06 F1 | 	add	objptr, #1
01e1c     07 3B 48 FC | 	wrbyte	#29, objptr
01e20     02 00 00 FF 
01e24     CC 0F 06 F1 | 	add	objptr, ##1484
01e28     07 EB C2 FA | 	rdbyte	local65, objptr
01e2c     02 EA 66 F0 | 	shl	local65, #2
01e30     01 00 00 FF 
01e34     63 0E 06 F1 | 	add	objptr, ##611
01e38     07 EB 02 F1 | 	add	local65, objptr
01e3c     75 5D 02 FB | 	rdlong	arg01, local65
01e40     04 00 00 FF 
01e44     64 0E 86 F1 | 	sub	objptr, ##2148
01e48     BC 07 B0 FD | 	call	#_hng030rm_spin2_write
01e4c     04 00 00 FF 
01e50     F0 0E 06 F1 | 	add	objptr, ##2288
01e54     07 5D 02 FB | 	rdlong	arg01, objptr
01e58     04 00 00 FF 
01e5c     F0 0E 86 F1 | 	sub	objptr, ##2288
01e60     A4 07 B0 FD | 	call	#_hng030rm_spin2_write
01e64                 | ' 
01e64                 | ' ''---------- Set the (x,y) position of cursor
01e64                 | ' 
01e64                 | ' cursor_x:=x
01e64     34 0E 06 F1 | 	add	objptr, #52
01e68     07 71 48 FC | 	wrbyte	#56, objptr
01e6c                 | ' cursor_y:=y
01e6c     01 0E 06 F1 | 	add	objptr, #1
01e70     07 3B 48 FC | 	wrbyte	#29, objptr
01e74     02 00 00 FF 
01e78     FA 0F 06 F1 | 	add	objptr, ##1530
01e7c     07 5D 02 FB | 	rdlong	arg01, objptr
01e80     10 0E 06 F1 | 	add	objptr, #16
01e84     07 EB 02 FB | 	rdlong	local65, objptr
01e88     03 00 00 FF 
01e8c     3F 0E 86 F1 | 	sub	objptr, ##1599
01e90     75 5D 02 F1 | 	add	arg01, local65
01e94     03 5E 06 F6 | 	mov	arg02, #3
01e98     E8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01e9c     15 5D 02 F6 | 	mov	arg01, result1
01ea0     64 07 B0 FD | 	call	#_hng030rm_spin2_write
01ea4                 | ' 
01ea4                 | ' ''---------- Set the (x,y) position of cursor
01ea4                 | ' 
01ea4                 | ' cursor_x:=x
01ea4     34 0E 06 F1 | 	add	objptr, #52
01ea8     07 A9 48 FC | 	wrbyte	#84, objptr
01eac                 | ' cursor_y:=y
01eac     01 0E 06 F1 | 	add	objptr, #1
01eb0     07 3B 48 FC | 	wrbyte	#29, objptr
01eb4     02 00 00 FF 
01eb8     FE 0F 06 F1 | 	add	objptr, ##1534
01ebc     07 5D 02 FB | 	rdlong	arg01, objptr
01ec0     10 0E 06 F1 | 	add	objptr, #16
01ec4     07 EB 02 FB | 	rdlong	local65, objptr
01ec8     03 00 00 FF 
01ecc     43 0E 86 F1 | 	sub	objptr, ##1603
01ed0     75 5D 02 F1 | 	add	arg01, local65
01ed4     03 5E 06 F6 | 	mov	arg02, #3
01ed8     A8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01edc     15 5D 02 F6 | 	mov	arg01, result1
01ee0     24 07 B0 FD | 	call	#_hng030rm_spin2_write
01ee4     1D 5E 06 F6 | 	mov	arg02, #29
01ee8                 | ' 
01ee8                 | ' ''---------- Set the (x,y) position of cursor
01ee8                 | ' 
01ee8                 | ' cursor_x:=x
01ee8     34 0E 06 F1 | 	add	objptr, #52
01eec     07 B1 48 FC | 	wrbyte	#88, objptr
01ef0                 | ' cursor_y:=y
01ef0     01 0E 06 F1 | 	add	objptr, #1
01ef4     07 3B 48 FC | 	wrbyte	#29, objptr
01ef8     02 00 00 FF 
01efc     CD 0F 06 F1 | 	add	objptr, ##1485
01f00     07 EB C2 FA | 	rdbyte	local65, objptr
01f04     02 EA 66 F0 | 	shl	local65, #2
01f08     01 00 00 FF 
01f0c     62 0E 06 F1 | 	add	objptr, ##610
01f10     07 EB 02 F1 | 	add	local65, objptr
01f14     75 5D 02 FB | 	rdlong	arg01, local65
01f18     04 00 00 FF 
01f1c     64 0E 86 F1 | 	sub	objptr, ##2148
01f20     E4 06 B0 FD | 	call	#_hng030rm_spin2_write
01f24     04 00 00 FF 
01f28     F0 0E 06 F1 | 	add	objptr, ##2288
01f2c     07 5D 02 FB | 	rdlong	arg01, objptr
01f30     04 00 00 FF 
01f34     F0 0E 86 F1 | 	sub	objptr, ##2288
01f38     CC 06 B0 FD | 	call	#_hng030rm_spin2_write
01f3c     98 F7 9F FD | 	jmp	#LR__0020
01f40     AF F0 03 F6 | 	mov	ptra, fp
01f44     BF 00 A0 FD | 	call	#popregs_
01f48                 | _program_ret
01f48     2D 00 64 FD | 	ret
01f4c                 | 
01f4c                 | ' 
01f4c                 | ' 
01f4c                 | ' ''---------- putpixel - put a pixel on the screen
01f4c                 | ' 
01f4c                 | ' pub putpixel1(x,y,c) |byte b
01f4c                 | _hng030rm_spin2_putpixel1
01f4c                 | ' 
01f4c                 | ' 
01f4c                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01f4c     00 30 06 F6 | 	mov	_var01, #0
01f50     00 5C 5E F2 | 	cmps	arg01, #0 wcz
01f54     01 30 66 36 |  if_ae	neg	_var01, #1
01f58     00 32 06 F6 | 	mov	_var02, #0
01f5c     90 0E 06 F1 | 	add	objptr, #144
01f60     07 35 02 FB | 	rdlong	_var03, objptr
01f64     05 34 66 F0 | 	shl	_var03, #5
01f68     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
01f6c     01 32 66 C6 |  if_b	neg	_var02, #1
01f70     19 31 02 F5 | 	and	_var01, _var02
01f74     00 36 06 F6 | 	mov	_var04, #0
01f78     00 5E 5E F2 | 	cmps	arg02, #0 wcz
01f7c     01 36 66 36 |  if_ae	neg	_var04, #1
01f80     1B 31 02 F5 | 	and	_var01, _var04
01f84     00 38 06 F6 | 	mov	_var05, #0
01f88     04 0E 06 F1 | 	add	objptr, #4
01f8c     07 3B 02 FB | 	rdlong	_var06, objptr
01f90     94 0E 86 F1 | 	sub	objptr, #148
01f94     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
01f98     01 38 66 C6 |  if_b	neg	_var05, #1
01f9c     1C 31 CA F7 | 	test	_var01, _var05 wz
01fa0     8C 00 90 AD |  if_e	jmp	#LR__0032
01fa4     90 0E 06 F1 | 	add	objptr, #144
01fa8     07 3D 02 FB | 	rdlong	_var07, objptr
01fac     90 0E 86 F1 | 	sub	objptr, #144
01fb0     02 3C 66 F0 | 	shl	_var07, #2
01fb4     2F 3D 02 FD | 	qmul	_var07, arg02
01fb8     18 3E 62 FD | 	getqx	_var08
01fbc     07 41 02 FB | 	rdlong	_var09, objptr
01fc0     1F 41 02 F1 | 	add	_var09, _var08
01fc4     2E 43 02 F6 | 	mov	_var10, arg01
01fc8     03 42 46 F0 | 	shr	_var10, #3
01fcc     21 41 02 F1 | 	add	_var09, _var10
01fd0                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01fd0     20 45 C2 FA | 	rdbyte	_var11, _var09
01fd4                 | '     if (c==0)
01fd4     00 60 0E F2 | 	cmp	arg03, #0 wz
01fd8     18 00 90 5D |  if_ne	jmp	#LR__0030
01fdc     2E 31 52 F6 | 	abs	_var01, arg01 wc
01fe0     07 30 06 F5 | 	and	_var01, #7
01fe4     18 31 62 C6 |  if_b	neg	_var01, _var01
01fe8     18 47 C2 F9 | 	decod	_var12, _var01
01fec                 | '       b:=b & !(1<<(x//8))
01fec     23 45 22 F5 | 	andn	_var11, _var12
01ff0                 | '     else
01ff0     14 00 90 FD | 	jmp	#LR__0031
01ff4                 | LR__0030
01ff4     2E 31 52 F6 | 	abs	_var01, arg01 wc
01ff8     07 30 06 F5 | 	and	_var01, #7
01ffc     18 31 62 C6 |  if_b	neg	_var01, _var01
02000     18 49 C2 F9 | 	decod	_var13, _var01
02004                 | '       b:=b |(1<<(x//8))
02004     24 45 42 F5 | 	or	_var11, _var13
02008                 | LR__0031
02008     90 0E 06 F1 | 	add	objptr, #144
0200c     07 4B 02 FB | 	rdlong	_var14, objptr
02010     90 0E 86 F1 | 	sub	objptr, #144
02014     02 4A 66 F0 | 	shl	_var14, #2
02018     2F 4B 02 FD | 	qmul	_var14, arg02
0201c     18 4C 62 FD | 	getqx	_var15
02020     07 4F 02 FB | 	rdlong	_var16, objptr
02024     26 4F 02 F1 | 	add	_var16, _var15
02028     21 4F 02 F1 | 	add	_var16, _var10
0202c                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
0202c     27 45 42 FC | 	wrbyte	_var11, _var16
02030                 | LR__0032
02030                 | _hng030rm_spin2_putpixel1_ret
02030     2D 00 64 FD | 	ret
02034                 | 
02034                 | ' 
02034                 | ' 
02034                 | ' pub putpixel2(x,y,c) |byte b
02034                 | _hng030rm_spin2_putpixel2
02034                 | ' 
02034                 | ' 
02034                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02034     00 30 06 F6 | 	mov	_var01, #0
02038     00 5C 5E F2 | 	cmps	arg01, #0 wcz
0203c     01 30 66 36 |  if_ae	neg	_var01, #1
02040     00 32 06 F6 | 	mov	_var02, #0
02044     90 0E 06 F1 | 	add	objptr, #144
02048     07 35 02 FB | 	rdlong	_var03, objptr
0204c     04 34 66 F0 | 	shl	_var03, #4
02050     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02054     01 32 66 C6 |  if_b	neg	_var02, #1
02058     19 31 02 F5 | 	and	_var01, _var02
0205c     00 36 06 F6 | 	mov	_var04, #0
02060     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02064     01 36 66 36 |  if_ae	neg	_var04, #1
02068     1B 31 02 F5 | 	and	_var01, _var04
0206c     00 38 06 F6 | 	mov	_var05, #0
02070     04 0E 06 F1 | 	add	objptr, #4
02074     07 3B 02 FB | 	rdlong	_var06, objptr
02078     94 0E 86 F1 | 	sub	objptr, #148
0207c     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02080     01 38 66 C6 |  if_b	neg	_var05, #1
02084     1C 31 CA F7 | 	test	_var01, _var05 wz
02088     7C 00 90 AD |  if_e	jmp	#LR__0033
0208c     90 0E 06 F1 | 	add	objptr, #144
02090     07 3D 02 FB | 	rdlong	_var07, objptr
02094     90 0E 86 F1 | 	sub	objptr, #144
02098     02 3C 66 F0 | 	shl	_var07, #2
0209c     2F 3D 02 FD | 	qmul	_var07, arg02
020a0     18 3E 62 FD | 	getqx	_var08
020a4     07 41 02 FB | 	rdlong	_var09, objptr
020a8     1F 41 02 F1 | 	add	_var09, _var08
020ac     2E 43 02 F6 | 	mov	_var10, arg01
020b0     02 42 46 F0 | 	shr	_var10, #2
020b4     21 41 02 F1 | 	add	_var09, _var10
020b8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
020b8     20 45 C2 FA | 	rdbyte	_var11, _var09
020bc     2E 31 52 F6 | 	abs	_var01, arg01 wc
020c0     03 30 06 F5 | 	and	_var01, #3
020c4     18 31 62 C6 |  if_b	neg	_var01, _var01
020c8     01 30 66 F0 | 	shl	_var01, #1
020cc     03 46 06 F6 | 	mov	_var12, #3
020d0     18 47 62 F0 | 	shl	_var12, _var01
020d4                 | '     b:=b & !(%11<<((x//4)<<1))
020d4     23 45 22 F5 | 	andn	_var11, _var12
020d8     18 61 62 F0 | 	shl	arg03, _var01
020dc                 | '     b:=b |(c<<((x//4)<<1))
020dc     30 45 42 F5 | 	or	_var11, arg03
020e0     90 0E 06 F1 | 	add	objptr, #144
020e4     07 49 02 FB | 	rdlong	_var13, objptr
020e8     90 0E 86 F1 | 	sub	objptr, #144
020ec     02 48 66 F0 | 	shl	_var13, #2
020f0     2F 49 02 FD | 	qmul	_var13, arg02
020f4     18 4A 62 FD | 	getqx	_var14
020f8     07 4D 02 FB | 	rdlong	_var15, objptr
020fc     25 4D 02 F1 | 	add	_var15, _var14
02100     21 4D 02 F1 | 	add	_var15, _var10
02104                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
02104     26 45 42 FC | 	wrbyte	_var11, _var15
02108                 | LR__0033
02108                 | _hng030rm_spin2_putpixel2_ret
02108     2D 00 64 FD | 	ret
0210c                 | 
0210c                 | ' 
0210c                 | ' 
0210c                 | ' pub putpixel4(x,y,c) |byte b
0210c                 | _hng030rm_spin2_putpixel4
0210c                 | ' 
0210c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
0210c     00 30 06 F6 | 	mov	_var01, #0
02110     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02114     01 30 66 36 |  if_ae	neg	_var01, #1
02118     00 32 06 F6 | 	mov	_var02, #0
0211c     90 0E 06 F1 | 	add	objptr, #144
02120     07 35 02 FB | 	rdlong	_var03, objptr
02124     04 34 66 F0 | 	shl	_var03, #4
02128     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
0212c     01 32 66 C6 |  if_b	neg	_var02, #1
02130     19 31 02 F5 | 	and	_var01, _var02
02134     00 36 06 F6 | 	mov	_var04, #0
02138     00 5E 5E F2 | 	cmps	arg02, #0 wcz
0213c     01 36 66 36 |  if_ae	neg	_var04, #1
02140     1B 31 02 F5 | 	and	_var01, _var04
02144     00 38 06 F6 | 	mov	_var05, #0
02148     04 0E 06 F1 | 	add	objptr, #4
0214c     07 3B 02 FB | 	rdlong	_var06, objptr
02150     94 0E 86 F1 | 	sub	objptr, #148
02154     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02158     01 38 66 C6 |  if_b	neg	_var05, #1
0215c     1C 31 CA F7 | 	test	_var01, _var05 wz
02160     7C 00 90 AD |  if_e	jmp	#LR__0034
02164     90 0E 06 F1 | 	add	objptr, #144
02168     07 3D 02 FB | 	rdlong	_var07, objptr
0216c     90 0E 86 F1 | 	sub	objptr, #144
02170     02 3C 66 F0 | 	shl	_var07, #2
02174     2F 3D 02 FD | 	qmul	_var07, arg02
02178     18 3E 62 FD | 	getqx	_var08
0217c     07 41 02 FB | 	rdlong	_var09, objptr
02180     1F 41 02 F1 | 	add	_var09, _var08
02184     2E 43 02 F6 | 	mov	_var10, arg01
02188     01 42 46 F0 | 	shr	_var10, #1
0218c     21 41 02 F1 | 	add	_var09, _var10
02190                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02190     20 45 C2 FA | 	rdbyte	_var11, _var09
02194     2E 31 52 F6 | 	abs	_var01, arg01 wc
02198     01 30 06 F5 | 	and	_var01, #1
0219c     18 31 62 C6 |  if_b	neg	_var01, _var01
021a0     02 30 66 F0 | 	shl	_var01, #2
021a4     0F 46 06 F6 | 	mov	_var12, #15
021a8     18 47 62 F0 | 	shl	_var12, _var01
021ac                 | '     b:=b & !(%1111<<((x//2)<<2))
021ac     23 45 22 F5 | 	andn	_var11, _var12
021b0     18 61 62 F0 | 	shl	arg03, _var01
021b4                 | '     b:=b |(c<<((x//2)<<2))
021b4     30 45 42 F5 | 	or	_var11, arg03
021b8     90 0E 06 F1 | 	add	objptr, #144
021bc     07 49 02 FB | 	rdlong	_var13, objptr
021c0     90 0E 86 F1 | 	sub	objptr, #144
021c4     02 48 66 F0 | 	shl	_var13, #2
021c8     2F 49 02 FD | 	qmul	_var13, arg02
021cc     18 4A 62 FD | 	getqx	_var14
021d0     07 4D 02 FB | 	rdlong	_var15, objptr
021d4     25 4D 02 F1 | 	add	_var15, _var14
021d8     21 4D 02 F1 | 	add	_var15, _var10
021dc                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
021dc     26 45 42 FC | 	wrbyte	_var11, _var15
021e0                 | LR__0034
021e0                 | _hng030rm_spin2_putpixel4_ret
021e0     2D 00 64 FD | 	ret
021e4                 | 
021e4                 | ' 
021e4                 | ' 
021e4                 | ' pub putpixel8(x,y,c)
021e4                 | _hng030rm_spin2_putpixel8
021e4                 | ' 
021e4                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
021e4     00 30 06 F6 | 	mov	_var01, #0
021e8     00 5C 5E F2 | 	cmps	arg01, #0 wcz
021ec     01 30 66 36 |  if_ae	neg	_var01, #1
021f0     00 32 06 F6 | 	mov	_var02, #0
021f4     90 0E 06 F1 | 	add	objptr, #144
021f8     07 35 02 FB | 	rdlong	_var03, objptr
021fc     02 34 66 F0 | 	shl	_var03, #2
02200     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02204     01 32 66 C6 |  if_b	neg	_var02, #1
02208     19 31 02 F5 | 	and	_var01, _var02
0220c     00 36 06 F6 | 	mov	_var04, #0
02210     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02214     01 36 66 36 |  if_ae	neg	_var04, #1
02218     1B 31 02 F5 | 	and	_var01, _var04
0221c     00 38 06 F6 | 	mov	_var05, #0
02220     04 0E 06 F1 | 	add	objptr, #4
02224     07 3B 02 FB | 	rdlong	_var06, objptr
02228     94 0E 86 F1 | 	sub	objptr, #148
0222c     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02230     01 38 66 C6 |  if_b	neg	_var05, #1
02234     1C 31 CA F7 | 	test	_var01, _var05 wz
02238     28 00 90 AD |  if_e	jmp	#LR__0035
0223c     90 0E 06 F1 | 	add	objptr, #144
02240     07 3D 02 FB | 	rdlong	_var07, objptr
02244     90 0E 86 F1 | 	sub	objptr, #144
02248     02 3C 66 F0 | 	shl	_var07, #2
0224c     2F 3D 02 FD | 	qmul	_var07, arg02
02250     18 3E 62 FD | 	getqx	_var08
02254     07 41 02 FB | 	rdlong	_var09, objptr
02258     1F 41 02 F1 | 	add	_var09, _var08
0225c     2E 41 02 F1 | 	add	_var09, arg01
02260                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02260     20 61 42 FC | 	wrbyte	arg03, _var09
02264                 | LR__0035
02264                 | _hng030rm_spin2_putpixel8_ret
02264     2D 00 64 FD | 	ret
02268                 | 
02268                 | ' 
02268                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02268                 | ' 
02268                 | ' pub setbordercolor(r,g,b) | color
02268                 | _hng030rm_spin2_setbordercolor
02268     18 5C 66 F0 | 	shl	arg01, #24
0226c     10 5E 66 F0 | 	shl	arg02, #16
02270     2F 5D 02 F1 | 	add	arg01, arg02
02274     08 60 66 F0 | 	shl	arg03, #8
02278     30 5D 02 F1 | 	add	arg01, arg03
0227c                 | ' 
0227c                 | ' color:=r<<24+g<<16+b<<8
0227c                 | ' bordercolor:=color
0227c     2C 0E 06 F1 | 	add	objptr, #44
02280     07 5D 62 FC | 	wrlong	arg01, objptr
02284     2C 0E 86 F1 | 	sub	objptr, #44
02288                 | _hng030rm_spin2_setbordercolor_ret
02288     2D 00 64 FD | 	ret
0228c                 | 
0228c                 | ' 
0228c                 | ' 
0228c                 | ' '*************************************************************************
0228c                 | ' '                                                                        *
0228c                 | ' '  Text functions                                                        *
0228c                 | ' '                                                                        *
0228c                 | ' '*************************************************************************
0228c                 | ' 
0228c                 | ' ''---------- Clear the screen, set its foreground/background color
0228c                 | ' 
0228c                 | ' pub cls(fc,bc)   :c
0228c                 | _hng030rm_spin2_cls
0228c     07 5A 05 F6 | 	mov	COUNT_, #7
02290     B0 00 A0 FD | 	call	#pushregs_
02294     2E 6B 02 F6 | 	mov	local01, arg01
02298     2F 6D 02 F6 | 	mov	local02, arg02
0229c                 | ' 
0229c                 | ' if (graphmode<512)
0229c     C4 0E 06 F1 | 	add	objptr, #196
022a0     07 6F 02 FB | 	rdlong	local03, objptr
022a4     C4 0E 86 F1 | 	sub	objptr, #196
022a8     01 00 00 FF 
022ac     00 6E 5E F2 | 	cmps	local03, ##512 wcz
022b0     34 00 90 3D |  if_ae	jmp	#LR__0036
022b4     35 71 02 F6 | 	mov	local04, local01
022b8     18 70 66 F0 | 	shl	local04, #24
022bc     36 73 02 F6 | 	mov	local05, local02
022c0     10 72 66 F0 | 	shl	local05, #16
022c4     39 71 02 F1 | 	add	local04, local05
022c8     20 70 06 F1 | 	add	local04, #32
022cc                 | '   c:=fc<<24+bc<<16+$20
022cc                 | '   longfill(buf_ptr,c,buflen)
022cc     07 5D 02 FB | 	rdlong	arg01, objptr
022d0     30 0E 06 F1 | 	add	objptr, #48
022d4     07 61 02 FB | 	rdlong	arg03, objptr
022d8     30 0E 86 F1 | 	sub	objptr, #48
022dc     38 5F 02 F6 | 	mov	arg02, local04
022e0     A8 00 A0 FD | 	call	#\builtin_longfill_
022e4                 | ' else
022e4     AC 00 90 FD | 	jmp	#LR__0042
022e8                 | LR__0036
022e8                 | '   if (graphmode & 48) ==48
022e8     C4 0E 06 F1 | 	add	objptr, #196
022ec     07 6F 02 FB | 	rdlong	local03, objptr
022f0     C4 0E 86 F1 | 	sub	objptr, #196
022f4     30 6E 06 F5 | 	and	local03, #48
022f8     30 6E 0E F2 | 	cmp	local03, #48 wz
022fc                 | '     c:=bc
022fc     36 71 02 A6 |  if_e	mov	local04, local02
02300     74 00 90 AD |  if_e	jmp	#LR__0041
02304                 | '   elseif (graphmode & 48) ==32
02304     C4 0E 06 F1 | 	add	objptr, #196
02308     07 6F 02 FB | 	rdlong	local03, objptr
0230c     C4 0E 86 F1 | 	sub	objptr, #196
02310     30 6E 06 F5 | 	and	local03, #48
02314     20 6E 0E F2 | 	cmp	local03, #32 wz
02318     10 00 90 5D |  if_ne	jmp	#LR__0037
0231c     36 71 02 F6 | 	mov	local04, local02
02320     04 70 66 F0 | 	shl	local04, #4
02324     36 71 02 F1 | 	add	local04, local02
02328                 | '     c:=bc<<4+bc
02328     4C 00 90 FD | 	jmp	#LR__0040
0232c                 | LR__0037
0232c                 | '   elseif (graphmode & 48) ==16
0232c     C4 0E 06 F1 | 	add	objptr, #196
02330     07 6F 02 FB | 	rdlong	local03, objptr
02334     C4 0E 86 F1 | 	sub	objptr, #196
02338     30 6E 06 F5 | 	and	local03, #48
0233c     10 6E 0E F2 | 	cmp	local03, #16 wz
02340     28 00 90 5D |  if_ne	jmp	#LR__0038
02344     36 71 02 F6 | 	mov	local04, local02
02348     06 70 66 F0 | 	shl	local04, #6
0234c     36 75 02 F6 | 	mov	local06, local02
02350     04 74 66 F0 | 	shl	local06, #4
02354     3A 71 02 F1 | 	add	local04, local06
02358     36 77 02 F6 | 	mov	local07, local02
0235c     02 76 66 F0 | 	shl	local07, #2
02360     3B 71 02 F1 | 	add	local04, local07
02364     36 71 02 F1 | 	add	local04, local02
02368                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02368                 | '   else
02368     0C 00 90 FD | 	jmp	#LR__0039
0236c                 | LR__0038
0236c                 | '     if bc==1
0236c     01 6C 0E F2 | 	cmp	local02, #1 wz
02370                 | '       c:=255
02370     FF 70 06 A6 |  if_e	mov	local04, #255
02374                 | '     else
02374                 | '       c:=0
02374     00 70 06 56 |  if_ne	mov	local04, #0
02378                 | LR__0039
02378                 | LR__0040
02378                 | LR__0041
02378     30 0E 06 F1 | 	add	objptr, #48
0237c     07 61 02 FB | 	rdlong	arg03, objptr
02380     30 0E 86 F1 | 	sub	objptr, #48
02384     02 60 66 F0 | 	shl	arg03, #2
02388                 | '   bytefill(buf_ptr,c,buflen*4)
02388     07 5D 02 FB | 	rdlong	arg01, objptr
0238c     38 5F 02 F6 | 	mov	arg02, local04
02390     A0 00 A0 FD | 	call	#\builtin_bytefill_
02394                 | LR__0042
02394                 | ' setwritecolors(fc,bc)
02394                 | ' 
02394                 | ' 
02394                 | ' write_color:=ff
02394     38 0E 06 F1 | 	add	objptr, #56
02398     07 6B 62 FC | 	wrlong	local01, objptr
0239c                 | ' write_background:=bb
0239c     04 0E 06 F1 | 	add	objptr, #4
023a0     07 6D 62 FC | 	wrlong	local02, objptr
023a4                 | ' cursor_x:=0
023a4     08 0E 86 F1 | 	sub	objptr, #8
023a8     07 01 48 FC | 	wrbyte	#0, objptr
023ac                 | ' cursor_y:=0
023ac     01 0E 06 F1 | 	add	objptr, #1
023b0     07 01 48 FC | 	wrbyte	#0, objptr
023b4     35 0E 86 F1 | 	sub	objptr, #53
023b8     38 2B 02 F6 | 	mov	result1, local04
023bc     AF F0 03 F6 | 	mov	ptra, fp
023c0     BF 00 A0 FD | 	call	#popregs_
023c4                 | _hng030rm_spin2_cls_ret
023c4     2D 00 64 FD | 	ret
023c8                 | 
023c8                 | ' 
023c8                 | ' ''--------- Output a string at position x,y without changing colors
023c8                 | ' 
023c8                 | ' pub outtextxy(x,y,text) | iii
023c8                 | _hng030rm_spin2_outtextxy
023c8     0B 5A 05 F6 | 	mov	COUNT_, #11
023cc     B0 00 A0 FD | 	call	#pushregs_
023d0     2E 6B 02 F6 | 	mov	local01, arg01
023d4                 | ' 
023d4                 | ' repeat iii from 0 to strsize(text)-1
023d4     00 6C 06 F6 | 	mov	local02, #0
023d8     30 5D 02 F6 | 	mov	arg01, arg03
023dc     00 6E 06 F6 | 	mov	local03, #0
023e0     2C DC 9F FE | 	loc	pa,	#(@LR__0044-@LR__0043)
023e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
023e8                 | LR__0043
023e8     2E 71 CA FA | 	rdbyte	local04, arg01 wz
023ec     01 6E 06 51 |  if_ne	add	local03, #1
023f0     01 5C 06 51 |  if_ne	add	arg01, #1
023f4     F0 FF 9F 5D |  if_ne	jmp	#LR__0043
023f8                 | LR__0044
023f8     37 2B 02 F6 | 	mov	result1, local03
023fc     15 73 02 F6 | 	mov	local05, result1
02400     01 72 86 F1 | 	sub	local05, #1
02404     00 72 5E F2 | 	cmps	local05, #0 wcz
02408     01 74 06 16 |  if_a	mov	local06, #1
0240c     01 74 66 E6 |  if_be	neg	local06, #1
02410     3A 73 02 F1 | 	add	local05, local06
02414     38 DC 9F FE | 	loc	pa,	#(@LR__0046-@LR__0045)
02418     93 00 A0 FD | 	call	#FCACHE_LOAD_
0241c                 | LR__0045
0241c     90 0E 06 F1 | 	add	objptr, #144
02420     07 77 02 FB | 	rdlong	local07, objptr
02424     90 0E 86 F1 | 	sub	objptr, #144
02428     2F 77 02 FD | 	qmul	local07, arg02
0242c     18 78 62 FD | 	getqx	local08
02430     35 79 02 F1 | 	add	local08, local01
02434     36 79 02 F1 | 	add	local08, local02
02438     02 78 66 F0 | 	shl	local08, #2
0243c     07 7B 02 FB | 	rdlong	local09, objptr
02440     3C 7B 02 F1 | 	add	local09, local08
02444     3D 7D 02 FB | 	rdlong	local10, local09
02448     FF 7C 26 F5 | 	andn	local10, #255
0244c     30 7F 02 F6 | 	mov	local11, arg03
02450     36 7F 02 F1 | 	add	local11, local02
02454     3F 77 C2 FA | 	rdbyte	local07, local11
02458     3B 7D 42 F5 | 	or	local10, local07
0245c                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
0245c     3D 7D 62 FC | 	wrlong	local10, local09
02460     3A 6D 02 F1 | 	add	local02, local06
02464     39 6D 0A F2 | 	cmp	local02, local05 wz
02468     B0 FF 9F 5D |  if_ne	jmp	#LR__0045
0246c                 | LR__0046
0246c     AF F0 03 F6 | 	mov	ptra, fp
02470     BF 00 A0 FD | 	call	#popregs_
02474                 | _hng030rm_spin2_outtextxy_ret
02474     2D 00 64 FD | 	ret
02478                 | 
02478                 | ' 
02478                 | ' ''---------- Output a char at the cursor position, move the cursor
02478                 | ' 
02478                 | ' pub putchar(achar) | c,x,y
02478                 | _hng030rm_spin2_putchar
02478     12 5A 05 F6 | 	mov	COUNT_, #18
0247c     B0 00 A0 FD | 	call	#pushregs_
02480     2E 6B 02 F6 | 	mov	local01, arg01
02484                 | ' 
02484                 | ' if achar==10
02484     0A 6A 0E F2 | 	cmp	local01, #10 wz
02488     58 00 90 5D |  if_ne	jmp	#LR__0047
0248c                 | '   crlf()
0248c                 | ' 
0248c                 | ' cursor_x:=0
0248c     34 0E 06 F1 | 	add	objptr, #52
02490     07 01 48 FC | 	wrbyte	#0, objptr
02494                 | ' cursor_y+=1
02494     01 0E 06 F1 | 	add	objptr, #1
02498     07 6D C2 FA | 	rdbyte	local02, objptr
0249c     01 6C 06 F1 | 	add	local02, #1
024a0     07 6D 42 FC | 	wrbyte	local02, objptr
024a4                 | ' if cursor_y>lines-1
024a4     5F 0E 06 F1 | 	add	objptr, #95
024a8     07 6D 02 FB | 	rdlong	local02, objptr
024ac     01 6C 86 F1 | 	sub	local02, #1
024b0     5F 0E 86 F1 | 	sub	objptr, #95
024b4     07 6F C2 FA | 	rdbyte	local03, objptr
024b8     35 0E 86 F1 | 	sub	objptr, #53
024bc     36 6F 5A F2 | 	cmps	local03, local02 wcz
024c0     38 01 90 ED |  if_be	jmp	#LR__0050
024c4                 | '   scrollup()
024c4     F4 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
024c8     94 0E 06 F1 | 	add	objptr, #148
024cc     07 71 02 FB | 	rdlong	local04, objptr
024d0     01 70 86 F1 | 	sub	local04, #1
024d4                 | '   cursor_y:=lines-1
024d4     5F 0E 86 F1 | 	sub	objptr, #95
024d8     07 71 42 FC | 	wrbyte	local04, objptr
024dc     35 0E 86 F1 | 	sub	objptr, #53
024e0                 | ' else  
024e0     18 01 90 FD | 	jmp	#LR__0050
024e4                 | LR__0047
024e4                 | '   x:=cursor_x
024e4     34 0E 06 F1 | 	add	objptr, #52
024e8     07 73 C2 FA | 	rdbyte	local05, objptr
024ec                 | '   y:=cursor_y
024ec     01 0E 06 F1 | 	add	objptr, #1
024f0     07 75 C2 FA | 	rdbyte	local06, objptr
024f4     03 0E 06 F1 | 	add	objptr, #3
024f8     07 77 02 FB | 	rdlong	local07, objptr
024fc     18 76 66 F0 | 	shl	local07, #24
02500     04 0E 06 F1 | 	add	objptr, #4
02504     07 79 02 FB | 	rdlong	local08, objptr
02508     10 78 66 F0 | 	shl	local08, #16
0250c     3C 77 02 F1 | 	add	local07, local08
02510                 | '   c:=write_color<<24+write_background<<16
02510     54 0E 06 F1 | 	add	objptr, #84
02514     07 7B 02 FB | 	rdlong	local09, objptr
02518     90 0E 86 F1 | 	sub	objptr, #144
0251c     3A 7B 02 FD | 	qmul	local09, local06
02520     18 7C 62 FD | 	getqx	local10
02524     39 7D 02 F1 | 	add	local10, local05
02528     02 7C 66 F0 | 	shl	local10, #2
0252c     07 7F 02 FB | 	rdlong	local11, objptr
02530     3E 7F 02 F1 | 	add	local11, local10
02534     3F 81 02 FB | 	rdlong	local12, local11
02538     7F 00 00 FF 
0253c     FF 81 06 F5 | 	and	local12, ##65535
02540     3B 81 42 F5 | 	or	local12, local07
02544                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02544     3F 81 62 FC | 	wrlong	local12, local11
02548     90 0E 06 F1 | 	add	objptr, #144
0254c     07 7B 02 FB | 	rdlong	local09, objptr
02550     90 0E 86 F1 | 	sub	objptr, #144
02554     3A 7B 02 FD | 	qmul	local09, local06
02558     18 82 62 FD | 	getqx	local13
0255c     39 83 02 F1 | 	add	local13, local05
02560     02 82 66 F0 | 	shl	local13, #2
02564     07 85 02 FB | 	rdlong	local14, objptr
02568     41 85 02 F1 | 	add	local14, local13
0256c     42 87 02 FB | 	rdlong	local15, local14
02570     FF 86 26 F5 | 	andn	local15, #255
02574     FF 6A 06 F5 | 	and	local01, #255
02578     35 87 42 F5 | 	or	local15, local01
0257c                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
0257c     42 87 62 FC | 	wrlong	local15, local14
02580                 | '   cursor_x+=1
02580     34 0E 06 F1 | 	add	objptr, #52
02584     07 89 C2 FA | 	rdbyte	local16, objptr
02588     01 88 06 F1 | 	add	local16, #1
0258c     07 89 42 FC | 	wrbyte	local16, objptr
02590                 | '   if cursor_x==cpl
02590     07 89 C2 FA | 	rdbyte	local16, objptr
02594     5C 0E 06 F1 | 	add	objptr, #92
02598     07 8B 02 FB | 	rdlong	local17, objptr
0259c     90 0E 86 F1 | 	sub	objptr, #144
025a0     45 89 0A F2 | 	cmp	local16, local17 wz
025a4     54 00 90 5D |  if_ne	jmp	#LR__0049
025a8                 | '     cursor_x:=0
025a8     34 0E 06 F1 | 	add	objptr, #52
025ac     07 01 48 FC | 	wrbyte	#0, objptr
025b0                 | '     cursor_y+=1
025b0     01 0E 06 F1 | 	add	objptr, #1
025b4     07 89 C2 FA | 	rdbyte	local16, objptr
025b8     01 88 06 F1 | 	add	local16, #1
025bc     07 89 42 FC | 	wrbyte	local16, objptr
025c0                 | '     if cursor_y>lines-1
025c0     5F 0E 06 F1 | 	add	objptr, #95
025c4     07 89 02 FB | 	rdlong	local16, objptr
025c8     01 88 86 F1 | 	sub	local16, #1
025cc     5F 0E 86 F1 | 	sub	objptr, #95
025d0     07 8B C2 FA | 	rdbyte	local17, objptr
025d4     35 0E 86 F1 | 	sub	objptr, #53
025d8     44 8B 5A F2 | 	cmps	local17, local16 wcz
025dc     1C 00 90 ED |  if_be	jmp	#LR__0048
025e0                 | '       scrollup()
025e0     D8 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
025e4     94 0E 06 F1 | 	add	objptr, #148
025e8     07 8D 02 FB | 	rdlong	local18, objptr
025ec     01 8C 86 F1 | 	sub	local18, #1
025f0                 | '       cursor_y:=lines-1
025f0     5F 0E 86 F1 | 	sub	objptr, #95
025f4     07 8D 42 FC | 	wrbyte	local18, objptr
025f8     35 0E 86 F1 | 	sub	objptr, #53
025fc                 | LR__0048
025fc                 | LR__0049
025fc                 | LR__0050
025fc     AF F0 03 F6 | 	mov	ptra, fp
02600     BF 00 A0 FD | 	call	#popregs_
02604                 | _hng030rm_spin2_putchar_ret
02604     2D 00 64 FD | 	ret
02608                 | 
02608                 | ' 
02608                 | ' ''--------- Output a string at the cursor position, move the cursor
02608                 | ' 
02608                 | ' pub write(text) | iii,c,ncx,ncy
02608                 | _hng030rm_spin2_write
02608     11 5A 05 F6 | 	mov	COUNT_, #17
0260c     B0 00 A0 FD | 	call	#pushregs_
02610     2E 6B 02 F6 | 	mov	local01, arg01
02614     38 0E 06 F1 | 	add	objptr, #56
02618     07 6D 02 FB | 	rdlong	local02, objptr
0261c     18 6C 66 F0 | 	shl	local02, #24
02620     04 0E 06 F1 | 	add	objptr, #4
02624     07 6F 02 FB | 	rdlong	local03, objptr
02628     10 6E 66 F0 | 	shl	local03, #16
0262c     37 6D 02 F1 | 	add	local02, local03
02630                 | ' 
02630                 | ' c:=write_color<<24+write_background<<16
02630                 | ' 'debug(uhex_long(write_color))
02630                 | ' ncy:=cursor_y
02630     07 0E 86 F1 | 	sub	objptr, #7
02634     07 71 C2 FA | 	rdbyte	local04, objptr
02638                 | ' ncx:=cursor_x+strsize(text)
02638     01 0E 86 F1 | 	sub	objptr, #1
0263c     07 73 C2 FA | 	rdbyte	local05, objptr
02640     34 0E 86 F1 | 	sub	objptr, #52
02644     35 5D 02 F6 | 	mov	arg01, local01
02648     00 74 06 F6 | 	mov	local06, #0
0264c     C0 D9 9F FE | 	loc	pa,	#(@LR__0052-@LR__0051)
02650     93 00 A0 FD | 	call	#FCACHE_LOAD_
02654                 | LR__0051
02654     2E 77 CA FA | 	rdbyte	local07, arg01 wz
02658     01 74 06 51 |  if_ne	add	local06, #1
0265c     01 5C 06 51 |  if_ne	add	arg01, #1
02660     F0 FF 9F 5D |  if_ne	jmp	#LR__0051
02664                 | LR__0052
02664     3A 2B 02 F6 | 	mov	result1, local06
02668     3A 73 02 F1 | 	add	local05, local06
0266c     39 79 02 F6 | 	mov	local08, local05
02670     BC D9 9F FE | 	loc	pa,	#(@LR__0054-@LR__0053)
02674     93 00 A0 FD | 	call	#FCACHE_LOAD_
02678                 | ' repeat while ncx>cpl-1
02678                 | LR__0053
02678     90 0E 06 F1 | 	add	objptr, #144
0267c     07 73 02 FB | 	rdlong	local05, objptr
02680     90 0E 86 F1 | 	sub	objptr, #144
02684     01 72 86 F1 | 	sub	local05, #1
02688     39 79 5A F2 | 	cmps	local08, local05 wcz
0268c     18 00 90 ED |  if_be	jmp	#LR__0055
02690                 | '   ncx-=cpl
02690     90 0E 06 F1 | 	add	objptr, #144
02694     07 7B 02 FB | 	rdlong	local09, objptr
02698     90 0E 86 F1 | 	sub	objptr, #144
0269c     3D 79 82 F1 | 	sub	local08, local09
026a0                 | '   ncy+=1
026a0     01 70 06 F1 | 	add	local04, #1
026a4     D0 FF 9F FD | 	jmp	#LR__0053
026a8                 | LR__0054
026a8                 | LR__0055
026a8                 | ' repeat while ncy>lines-1
026a8                 | LR__0056
026a8     94 0E 06 F1 | 	add	objptr, #148
026ac     07 73 02 FB | 	rdlong	local05, objptr
026b0     94 0E 86 F1 | 	sub	objptr, #148
026b4     01 72 86 F1 | 	sub	local05, #1
026b8     39 71 5A F2 | 	cmps	local04, local05 wcz
026bc     20 00 90 ED |  if_be	jmp	#LR__0057
026c0                 | '   ncy-=1
026c0     01 70 86 F1 | 	sub	local04, #1
026c4                 | '   scrollup()
026c4     F4 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
026c8                 | '   cursor_y-=1
026c8     35 0E 06 F1 | 	add	objptr, #53
026cc     07 73 C2 FA | 	rdbyte	local05, objptr
026d0     01 72 86 F1 | 	sub	local05, #1
026d4     07 73 42 FC | 	wrbyte	local05, objptr
026d8     35 0E 86 F1 | 	sub	objptr, #53
026dc     C8 FF 9F FD | 	jmp	#LR__0056
026e0                 | LR__0057
026e0                 | ' 
026e0                 | ' repeat iii from 0 to strsize(text)-1
026e0     00 7C 06 F6 | 	mov	local10, #0
026e4     35 5D 02 F6 | 	mov	arg01, local01
026e8     00 74 06 F6 | 	mov	local06, #0
026ec     20 D9 9F FE | 	loc	pa,	#(@LR__0059-@LR__0058)
026f0     93 00 A0 FD | 	call	#FCACHE_LOAD_
026f4                 | LR__0058
026f4     2E 77 CA FA | 	rdbyte	local07, arg01 wz
026f8     01 74 06 51 |  if_ne	add	local06, #1
026fc     01 5C 06 51 |  if_ne	add	arg01, #1
02700     F0 FF 9F 5D |  if_ne	jmp	#LR__0058
02704                 | LR__0059
02704     3A 2B 02 F6 | 	mov	result1, local06
02708     15 7F 02 F6 | 	mov	local11, result1
0270c     01 7E 86 F1 | 	sub	local11, #1
02710     00 7E 5E F2 | 	cmps	local11, #0 wcz
02714     01 80 06 16 |  if_a	mov	local12, #1
02718     01 80 66 E6 |  if_be	neg	local12, #1
0271c     40 7F 02 F1 | 	add	local11, local12
02720     34 D9 9F FE | 	loc	pa,	#(@LR__0061-@LR__0060)
02724     93 00 A0 FD | 	call	#FCACHE_LOAD_
02728                 | LR__0060
02728     90 0E 06 F1 | 	add	objptr, #144
0272c     07 83 02 FB | 	rdlong	local13, objptr
02730     5B 0E 86 F1 | 	sub	objptr, #91
02734     07 85 C2 FA | 	rdbyte	local14, objptr
02738     42 83 02 FD | 	qmul	local13, local14
0273c     18 86 62 FD | 	getqx	local15
02740     01 0E 86 F1 | 	sub	objptr, #1
02744     07 83 C2 FA | 	rdbyte	local13, objptr
02748     34 0E 86 F1 | 	sub	objptr, #52
0274c     41 87 02 F1 | 	add	local15, local13
02750     3E 87 02 F1 | 	add	local15, local10
02754     02 86 66 F0 | 	shl	local15, #2
02758     07 89 02 FB | 	rdlong	local16, objptr
0275c     43 89 02 F1 | 	add	local16, local15
02760     44 8B 02 FB | 	rdlong	local17, local16
02764     7F 00 00 FF 
02768     FF 8B 06 F5 | 	and	local17, ##65535
0276c     36 8B 42 F5 | 	or	local17, local02
02770                 | ' 
02770                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
02770     44 8B 62 FC | 	wrlong	local17, local16
02774     40 7D 02 F1 | 	add	local10, local12
02778     3F 7D 0A F2 | 	cmp	local10, local11 wz
0277c     A8 FF 9F 5D |  if_ne	jmp	#LR__0060
02780                 | LR__0061
02780                 | ' 
02780                 | ' outtextxy(cursor_x,cursor_y,text)
02780     34 0E 06 F1 | 	add	objptr, #52
02784     07 5D C2 FA | 	rdbyte	arg01, objptr
02788     01 0E 06 F1 | 	add	objptr, #1
0278c     07 5F C2 FA | 	rdbyte	arg02, objptr
02790     35 0E 86 F1 | 	sub	objptr, #53
02794     35 61 02 F6 | 	mov	arg03, local01
02798     2C FC BF FD | 	call	#_hng030rm_spin2_outtextxy
0279c                 | ' 
0279c                 | ' cursor_x:=ncx
0279c     34 0E 06 F1 | 	add	objptr, #52
027a0     07 79 42 FC | 	wrbyte	local08, objptr
027a4                 | ' cursor_y:=ncy
027a4     01 0E 06 F1 | 	add	objptr, #1
027a8     07 71 42 FC | 	wrbyte	local04, objptr
027ac     35 0E 86 F1 | 	sub	objptr, #53
027b0     AF F0 03 F6 | 	mov	ptra, fp
027b4     BF 00 A0 FD | 	call	#popregs_
027b8                 | _hng030rm_spin2_write_ret
027b8     2D 00 64 FD | 	ret
027bc                 | 
027bc                 | ' 
027bc                 | ' ''-----------  Scroll the screen one line up
027bc                 | ' 
027bc                 | ' pub scrollup() | i
027bc                 | _hng030rm_spin2_scrollup
027bc     0A 5A 05 F6 | 	mov	COUNT_, #10
027c0     B0 00 A0 FD | 	call	#pushregs_
027c4     90 0E 06 F1 | 	add	objptr, #144
027c8     07 6B 02 FB | 	rdlong	local01, objptr
027cc     90 0E 86 F1 | 	sub	objptr, #144
027d0     02 6A 66 F0 | 	shl	local01, #2
027d4     07 5F 02 FB | 	rdlong	arg02, objptr
027d8     35 5F 02 F1 | 	add	arg02, local01
027dc     30 0E 06 F1 | 	add	objptr, #48
027e0     07 61 02 FB | 	rdlong	arg03, objptr
027e4     60 0E 06 F1 | 	add	objptr, #96
027e8     07 6D 02 FB | 	rdlong	local02, objptr
027ec     90 0E 86 F1 | 	sub	objptr, #144
027f0     36 61 82 F1 | 	sub	arg03, local02
027f4                 | ' 
027f4                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
027f4     07 5D 02 FB | 	rdlong	arg01, objptr
027f8     EC 35 B0 FD | 	call	#__system__longmove
027fc                 | ' repeat i from buflen-cpl to buflen-1
027fc     30 0E 06 F1 | 	add	objptr, #48
02800     07 6F 02 FB | 	rdlong	local03, objptr
02804     60 0E 06 F1 | 	add	objptr, #96
02808     07 6D 02 FB | 	rdlong	local02, objptr
0280c     36 6F 82 F1 | 	sub	local03, local02
02810     60 0E 86 F1 | 	sub	objptr, #96
02814     07 71 02 FB | 	rdlong	local04, objptr
02818     01 70 86 F1 | 	sub	local04, #1
0281c     07 73 02 FB | 	rdlong	local05, objptr
02820     60 0E 06 F1 | 	add	objptr, #96
02824     07 75 02 FB | 	rdlong	local06, objptr
02828     90 0E 86 F1 | 	sub	objptr, #144
0282c     3A 73 82 F1 | 	sub	local05, local06
02830     39 71 5A F2 | 	cmps	local04, local05 wcz
02834     01 76 06 16 |  if_a	mov	local07, #1
02838     01 76 66 E6 |  if_be	neg	local07, #1
0283c     3B 71 02 F1 | 	add	local04, local07
02840     EC D7 9F FE | 	loc	pa,	#(@LR__0063-@LR__0062)
02844     93 00 A0 FD | 	call	#FCACHE_LOAD_
02848                 | LR__0062
02848     37 79 02 F6 | 	mov	local08, local03
0284c     02 78 66 F0 | 	shl	local08, #2
02850     07 7B 02 FB | 	rdlong	local09, objptr
02854     3C 7B 02 F1 | 	add	local09, local08
02858     3D 7D 02 FB | 	rdlong	local10, local09
0285c     80 FF 7F FF 
02860     00 7C 06 F5 | 	and	local10, ##-65536
02864     20 7C 46 F5 | 	or	local10, #32
02868                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
02868     3D 7D 62 FC | 	wrlong	local10, local09
0286c     3B 6F 02 F1 | 	add	local03, local07
02870     38 6F 0A F2 | 	cmp	local03, local04 wz
02874     D0 FF 9F 5D |  if_ne	jmp	#LR__0062
02878                 | LR__0063
02878     AF F0 03 F6 | 	mov	ptra, fp
0287c     BF 00 A0 FD | 	call	#popregs_
02880                 | _hng030rm_spin2_scrollup_ret
02880     2D 00 64 FD | 	ret
02884                 | 
02884                 | ' 
02884                 | ' 
02884                 | ' 
02884                 | ' pub inttostr2(i,d):result |q,pos,k,j
02884                 | _hng030rm_spin2_inttostr2
02884                 | ' 
02884                 | ' j:=i
02884     2F 31 02 F6 | 	mov	_var01, arg02
02888     01 30 86 F1 | 	sub	_var01, #1
0288c                 | ' pos:=d-1
0288c     18 33 02 F6 | 	mov	_var02, _var01
02890                 | ' k:=0
02890     44 0E 06 F1 | 	add	objptr, #68
02894     07 5F 02 F1 | 	add	arg02, objptr
02898                 | ' 
02898                 | ' n_string[d]:=0
02898     2F 01 48 FC | 	wrbyte	#0, arg02
0289c                 | ' repeat k from 0 to d-1
0289c     00 34 06 F6 | 	mov	_var03, #0
028a0     00 30 5E F2 | 	cmps	_var01, #0 wcz
028a4     44 0E 86 F1 | 	sub	objptr, #68
028a8     01 36 06 16 |  if_a	mov	_var04, #1
028ac     01 36 66 E6 |  if_be	neg	_var04, #1
028b0     1B 31 02 F1 | 	add	_var01, _var04
028b4     68 D7 9F FE | 	loc	pa,	#(@LR__0065-@LR__0064)
028b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
028bc                 | LR__0064
028bc     1A 39 02 F6 | 	mov	_var05, _var03
028c0     44 0E 06 F1 | 	add	objptr, #68
028c4     07 39 02 F1 | 	add	_var05, objptr
028c8                 | '   n_string[k]:=48
028c8     1C 61 48 FC | 	wrbyte	#48, _var05
028cc     1B 35 02 F1 | 	add	_var03, _var04
028d0     18 35 0A F2 | 	cmp	_var03, _var01 wz
028d4     44 0E 86 F1 | 	sub	objptr, #68
028d8     E0 FF 9F 5D |  if_ne	jmp	#LR__0064
028dc                 | LR__0065
028dc                 | ' 
028dc                 | ' if (j<>0)
028dc     00 5C 0E F2 | 	cmp	arg01, #0 wz
028e0     40 00 90 AD |  if_e	jmp	#LR__0068
028e4                 | ' 
028e4                 | '   repeat while (pos>-1)
028e4                 | LR__0066
028e4     FF FF 7F FF 
028e8     FF 33 5E F2 | 	cmps	_var02, ##-1 wcz
028ec     34 00 90 ED |  if_be	jmp	#LR__0067
028f0     2E 0B 03 F6 | 	mov	muldiva_, arg01
028f4     0A 0C 07 F6 | 	mov	muldivb_, #10
028f8     CC 00 A0 FD | 	call	#unsdivide_
028fc     85 3B 02 F6 | 	mov	_var06, muldiva_
02900                 | '     q:=j+//10
02900                 | '     q:=48+q
02900     30 3A 06 F1 | 	add	_var06, #48
02904     19 3D 02 F6 | 	mov	_var07, _var02
02908     44 0E 06 F1 | 	add	objptr, #68
0290c     07 3D 02 F1 | 	add	_var07, objptr
02910                 | '     n_string[pos]:=q
02910     1E 3B 42 FC | 	wrbyte	_var06, _var07
02914                 | '     j:=j+/10
02914     86 5D 02 F6 | 	mov	arg01, muldivb_
02918                 | '     pos-=1
02918     01 32 86 F1 | 	sub	_var02, #1
0291c     44 0E 86 F1 | 	sub	objptr, #68
02920     C0 FF 9F FD | 	jmp	#LR__0066
02924                 | LR__0067
02924                 | LR__0068
02924     44 0E 06 F1 | 	add	objptr, #68
02928     07 2B 02 F6 | 	mov	result1, objptr
0292c     44 0E 86 F1 | 	sub	objptr, #68
02930                 | ' 
02930                 | ' 
02930                 | ' q:=@n_string
02930                 | ' return q
02930                 | _hng030rm_spin2_inttostr2_ret
02930     2D 00 64 FD | 	ret
02934                 | 
02934                 | ' 
02934                 | ' 
02934                 | ' 
02934                 | ' '*************************************************************************
02934                 | ' '                                                                        *
02934                 | ' '  Mode setting and driver start                                                          *
02934                 | ' '                                                                        *
02934                 | ' '*************************************************************************
02934                 | ' 
02934                 | ' ''---------  Set the graphics mode
02934                 | ' 
02934                 | ' 
02934                 | ' 
02934                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02934                 | _hng030rm_spin2_setmode
02934     50 5A 05 F6 | 	mov	COUNT_, #80
02938     B0 00 A0 FD | 	call	#pushregs_
0293c     2E 6B 02 F6 | 	mov	local01, arg01
02940                 | ' 
02940                 | ' '' mode:tn_bb_cc_vv_hh
02940                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02940                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02940                 | ' 
02940                 | ' if mode==(512+192+48)
02940     01 00 00 FF 
02944     F0 6A 0E F2 | 	cmp	local01, ##752 wz
02948                 | '   return 'no RAM
02948     1C 0A 90 AD |  if_e	jmp	#LR__0109
0294c                 | ' 
0294c                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
0294c     35 6D 02 F6 | 	mov	local02, local01
02950     06 6C 46 F0 | 	shr	local02, #6
02954     07 6C 06 F5 | 	and	local02, #7
02958     08 6C 26 F3 | 	fle	local02, #8
0295c     36 6F 02 F6 | 	mov	local03, local02
02960     30 6E 62 FD | 	jmprel	local03
02964                 | LR__0069
02964     20 00 90 FD | 	jmp	#LR__0070
02968     58 00 90 FD | 	jmp	#LR__0071
0296c     90 00 90 FD | 	jmp	#LR__0072
02970     C8 00 90 FD | 	jmp	#LR__0073
02974     00 01 90 FD | 	jmp	#LR__0074
02978     38 01 90 FD | 	jmp	#LR__0075
0297c     70 01 90 FD | 	jmp	#LR__0076
02980     A8 01 90 FD | 	jmp	#LR__0077
02984     E4 01 90 FD | 	jmp	#LR__0078
02988                 | LR__0070
02988                 | ' 
02988                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02988     50 0E 06 F1 | 	add	objptr, #80
0298c     07 5D 02 F6 | 	mov	arg01, objptr
02990     50 0E 86 F1 | 	sub	objptr, #80
02994     0E 00 00 FF 
02998     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
0299c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
029a0     38 73 02 F6 | 	mov	local05, local04
029a4     10 74 06 F6 | 	mov	local06, #16
029a8     39 5F 02 F6 | 	mov	arg02, local05
029ac     10 60 06 F6 | 	mov	arg03, #16
029b0     0E 00 00 FF 
029b4     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
029b8     2C 34 B0 FD | 	call	#__system__longmove
029bc     15 77 02 F6 | 	mov	local07, result1
029c0     A8 01 90 FD | 	jmp	#LR__0078
029c4                 | LR__0071
029c4                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
029c4     50 0E 06 F1 | 	add	objptr, #80
029c8     07 5D 02 F6 | 	mov	arg01, objptr
029cc     50 0E 86 F1 | 	sub	objptr, #80
029d0     0E 00 00 FF 
029d4     98 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
029d8     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
029dc     38 73 02 F6 | 	mov	local05, local04
029e0     10 74 06 F6 | 	mov	local06, #16
029e4     39 5F 02 F6 | 	mov	arg02, local05
029e8     10 60 06 F6 | 	mov	arg03, #16
029ec     0E 00 00 FF 
029f0     98 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
029f4     F0 33 B0 FD | 	call	#__system__longmove
029f8     15 77 02 F6 | 	mov	local07, result1
029fc     6C 01 90 FD | 	jmp	#LR__0078
02a00                 | LR__0072
02a00                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02a00     50 0E 06 F1 | 	add	objptr, #80
02a04     07 5D 02 F6 | 	mov	arg01, objptr
02a08     50 0E 86 F1 | 	sub	objptr, #80
02a0c     0E 00 00 FF 
02a10     D8 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02a14     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a18     38 73 02 F6 | 	mov	local05, local04
02a1c     10 74 06 F6 | 	mov	local06, #16
02a20     39 5F 02 F6 | 	mov	arg02, local05
02a24     10 60 06 F6 | 	mov	arg03, #16
02a28     0E 00 00 FF 
02a2c     D8 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02a30     B4 33 B0 FD | 	call	#__system__longmove
02a34     15 77 02 F6 | 	mov	local07, result1
02a38     30 01 90 FD | 	jmp	#LR__0078
02a3c                 | LR__0073
02a3c                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02a3c     50 0E 06 F1 | 	add	objptr, #80
02a40     07 5D 02 F6 | 	mov	arg01, objptr
02a44     50 0E 86 F1 | 	sub	objptr, #80
02a48     0E 00 00 FF 
02a4c     18 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02a50     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a54     38 73 02 F6 | 	mov	local05, local04
02a58     10 74 06 F6 | 	mov	local06, #16
02a5c     39 5F 02 F6 | 	mov	arg02, local05
02a60     10 60 06 F6 | 	mov	arg03, #16
02a64     0E 00 00 FF 
02a68     18 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02a6c     78 33 B0 FD | 	call	#__system__longmove
02a70     15 77 02 F6 | 	mov	local07, result1
02a74     F4 00 90 FD | 	jmp	#LR__0078
02a78                 | LR__0074
02a78                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02a78     50 0E 06 F1 | 	add	objptr, #80
02a7c     07 5D 02 F6 | 	mov	arg01, objptr
02a80     50 0E 86 F1 | 	sub	objptr, #80
02a84     0E 00 00 FF 
02a88     58 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02a8c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a90     38 73 02 F6 | 	mov	local05, local04
02a94     10 74 06 F6 | 	mov	local06, #16
02a98     39 5F 02 F6 | 	mov	arg02, local05
02a9c     10 60 06 F6 | 	mov	arg03, #16
02aa0     0E 00 00 FF 
02aa4     58 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02aa8     3C 33 B0 FD | 	call	#__system__longmove
02aac     15 77 02 F6 | 	mov	local07, result1
02ab0     B8 00 90 FD | 	jmp	#LR__0078
02ab4                 | LR__0075
02ab4                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02ab4     50 0E 06 F1 | 	add	objptr, #80
02ab8     07 5D 02 F6 | 	mov	arg01, objptr
02abc     50 0E 86 F1 | 	sub	objptr, #80
02ac0     0E 00 00 FF 
02ac4     98 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02ac8     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02acc     38 73 02 F6 | 	mov	local05, local04
02ad0     10 74 06 F6 | 	mov	local06, #16
02ad4     39 5F 02 F6 | 	mov	arg02, local05
02ad8     10 60 06 F6 | 	mov	arg03, #16
02adc     0E 00 00 FF 
02ae0     98 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02ae4     00 33 B0 FD | 	call	#__system__longmove
02ae8     15 77 02 F6 | 	mov	local07, result1
02aec     7C 00 90 FD | 	jmp	#LR__0078
02af0                 | LR__0076
02af0                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02af0     50 0E 06 F1 | 	add	objptr, #80
02af4     07 5D 02 F6 | 	mov	arg01, objptr
02af8     50 0E 86 F1 | 	sub	objptr, #80
02afc     0E 00 00 FF 
02b00     D8 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02b04     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b08     38 73 02 F6 | 	mov	local05, local04
02b0c     10 74 06 F6 | 	mov	local06, #16
02b10     39 5F 02 F6 | 	mov	arg02, local05
02b14     10 60 06 F6 | 	mov	arg03, #16
02b18     0E 00 00 FF 
02b1c     D8 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02b20     C4 32 B0 FD | 	call	#__system__longmove
02b24     15 77 02 F6 | 	mov	local07, result1
02b28     40 00 90 FD | 	jmp	#LR__0078
02b2c                 | LR__0077
02b2c                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02b2c     50 0E 06 F1 | 	add	objptr, #80
02b30     07 79 02 F6 | 	mov	local08, objptr
02b34     3C 7B 02 F6 | 	mov	local09, local08
02b38     0F 00 00 FF 
02b3c     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02b40     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b44     38 73 02 F6 | 	mov	local05, local04
02b48     10 74 06 F6 | 	mov	local06, #16
02b4c     3D 5D 02 F6 | 	mov	arg01, local09
02b50     39 5F 02 F6 | 	mov	arg02, local05
02b54     10 60 06 F6 | 	mov	arg03, #16
02b58     50 0E 86 F1 | 	sub	objptr, #80
02b5c     0F 00 00 FF 
02b60     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02b64     80 32 B0 FD | 	call	#__system__longmove
02b68     15 77 02 F6 | 	mov	local07, result1
02b6c                 | LR__0078
02b6c                 | ' 
02b6c                 | ' ' 4-bit graphics: do nothing with timings :)
02b6c                 | ' if mode<512
02b6c     01 00 00 FF 
02b70     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02b74     20 00 90 3D |  if_ae	jmp	#LR__0079
02b78     0C 00 00 FF 
02b7c     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02b80     0D 7D 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02b84                 | '   palette_ptr:=@ataripalette
02b84     18 0E 06 F1 | 	add	objptr, #24
02b88     07 7D 62 FC | 	wrlong	local10, objptr
02b8c     18 0E 86 F1 | 	sub	objptr, #24
02b90     0C 00 00 FF 
02b94     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02b98                 | LR__0079
02b98                 | ' 
02b98                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02b98     35 6D 02 F6 | 	mov	local02, local01
02b9c     01 00 00 FF 
02ba0     30 6C 06 F5 | 	and	local02, ##560
02ba4     01 00 00 FF 
02ba8     30 6C 0E F2 | 	cmp	local02, ##560 wz
02bac     48 00 90 5D |  if_ne	jmp	#LR__0080
02bb0                 | '   timings[5]:=4
02bb0     64 0E 06 F1 | 	add	objptr, #100
02bb4     07 09 68 FC | 	wrlong	#4, objptr
02bb8     18 0E 06 F1 | 	add	objptr, #24
02bbc     07 7F 02 FB | 	rdlong	local11, objptr
02bc0     01 7E 66 F0 | 	shl	local11, #1
02bc4                 | '   timings[11]:=timings[11]<<1
02bc4     07 7F 62 FC | 	wrlong	local11, objptr
02bc8                 | '   putpixel:=p8
02bc8     6C 0E 06 F1 | 	add	objptr, #108
02bcc     07 6D 02 FB | 	rdlong	local02, objptr
02bd0     10 0E 86 F1 | 	sub	objptr, #16
02bd4     07 6D 62 FC | 	wrlong	local02, objptr
02bd8     0C 00 00 FF 
02bdc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02be0     0D 81 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
02be4                 | '   palette_ptr:=@ataripalette
02be4     C0 0E 86 F1 | 	sub	objptr, #192
02be8     07 81 62 FC | 	wrlong	local12, objptr
02bec     18 0E 86 F1 | 	sub	objptr, #24
02bf0     0C 00 00 FF 
02bf4     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02bf8                 | LR__0080
02bf8                 | ' 
02bf8                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02bf8     35 6D 02 F6 | 	mov	local02, local01
02bfc     01 00 00 FF 
02c00     30 6C 06 F5 | 	and	local02, ##560
02c04     01 00 00 FF 
02c08     10 6C 0E F2 | 	cmp	local02, ##528 wz
02c0c     48 00 90 5D |  if_ne	jmp	#LR__0081
02c10                 | '   timings[5]:=16
02c10     64 0E 06 F1 | 	add	objptr, #100
02c14     07 21 68 FC | 	wrlong	#16, objptr
02c18     18 0E 06 F1 | 	add	objptr, #24
02c1c     07 83 02 FB | 	rdlong	local13, objptr
02c20     01 82 46 F0 | 	shr	local13, #1
02c24                 | '   timings[11]:=timings[11]>>1
02c24     07 83 62 FC | 	wrlong	local13, objptr
02c28                 | '   putpixel:=p2
02c28     64 0E 06 F1 | 	add	objptr, #100
02c2c     07 6D 02 FB | 	rdlong	local02, objptr
02c30     08 0E 86 F1 | 	sub	objptr, #8
02c34     07 6D 62 FC | 	wrlong	local02, objptr
02c38     0C 00 00 FF 
02c3c     08 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02c40     0D 85 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02c44                 | '   palette_ptr:=@fourcolors
02c44     C0 0E 86 F1 | 	sub	objptr, #192
02c48     07 85 62 FC | 	wrlong	local14, objptr
02c4c     18 0E 86 F1 | 	sub	objptr, #24
02c50     0C 00 00 FF 
02c54     08 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02c58                 | LR__0081
02c58                 | ' 
02c58                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02c58     35 6D 02 F6 | 	mov	local02, local01
02c5c     01 00 00 FF 
02c60     30 6C 06 F5 | 	and	local02, ##560
02c64     01 00 00 FF 
02c68     00 6C 0E F2 | 	cmp	local02, ##512 wz
02c6c     48 00 90 5D |  if_ne	jmp	#LR__0082
02c70                 | '   timings[5]:=32
02c70     64 0E 06 F1 | 	add	objptr, #100
02c74     07 41 68 FC | 	wrlong	#32, objptr
02c78     18 0E 06 F1 | 	add	objptr, #24
02c7c     07 87 02 FB | 	rdlong	local15, objptr
02c80     02 86 46 F0 | 	shr	local15, #2
02c84                 | '   timings[11]:=timings[11]>>2
02c84     07 87 62 FC | 	wrlong	local15, objptr
02c88                 | '   putpixel:=p1
02c88     60 0E 06 F1 | 	add	objptr, #96
02c8c     07 6D 02 FB | 	rdlong	local02, objptr
02c90     04 0E 86 F1 | 	sub	objptr, #4
02c94     07 6D 62 FC | 	wrlong	local02, objptr
02c98     0C 00 00 FF 
02c9c     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02ca0     0D 89 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02ca4                 | '   palette_ptr:=@twocolors
02ca4     C0 0E 86 F1 | 	sub	objptr, #192
02ca8     07 89 62 FC | 	wrlong	local16, objptr
02cac     18 0E 86 F1 | 	sub	objptr, #24
02cb0     0C 00 00 FF 
02cb4     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02cb8                 | LR__0082
02cb8                 | ' 
02cb8                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02cb8     35 6D 02 F6 | 	mov	local02, local01
02cbc     01 00 00 FF 
02cc0     30 6C 06 F5 | 	and	local02, ##560
02cc4     01 00 00 FF 
02cc8     20 6C 0E F2 | 	cmp	local02, ##544 wz
02ccc     30 00 90 5D |  if_ne	jmp	#LR__0083
02cd0                 | '   putpixel:=p4
02cd0     E4 0E 06 F1 | 	add	objptr, #228
02cd4     07 6D 02 FB | 	rdlong	local02, objptr
02cd8     0C 0E 86 F1 | 	sub	objptr, #12
02cdc     07 6D 62 FC | 	wrlong	local02, objptr
02ce0     0C 00 00 FF 
02ce4     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02ce8     0D 8B 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
02cec                 | '   palette_ptr:=@vga16
02cec     C0 0E 86 F1 | 	sub	objptr, #192
02cf0     07 8B 62 FC | 	wrlong	local17, objptr
02cf4     18 0E 86 F1 | 	sub	objptr, #24
02cf8     0C 00 00 FF 
02cfc     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02d00                 | LR__0083
02d00                 | ' 
02d00                 | ' repeat i from 0 to 4
02d00     00 8C 06 F6 | 	mov	local18, #0
02d04     3C D3 9F FE | 	loc	pa,	#(@LR__0085-@LR__0084)
02d08     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d0c                 | LR__0084
02d0c     46 8F 02 F6 | 	mov	local19, local18
02d10     02 8E 66 F0 | 	shl	local19, #2
02d14     50 0E 06 F1 | 	add	objptr, #80
02d18     07 8F 02 F1 | 	add	local19, objptr
02d1c     2C 0E 86 F1 | 	sub	objptr, #44
02d20     07 91 02 FB | 	rdlong	local20, objptr
02d24     24 0E 86 F1 | 	sub	objptr, #36
02d28     11 90 66 F0 | 	shl	local20, #17
02d2c     47 93 02 FB | 	rdlong	local21, local19
02d30     48 93 02 F1 | 	add	local21, local20
02d34     49 95 02 F6 | 	mov	local22, local21
02d38     80 40 38 FF 
02d3c     00 94 06 F1 | 	add	local22, ##1887502336
02d40                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02d40     47 95 62 FC | 	wrlong	local22, local19
02d44     01 8C 06 F1 | 	add	local18, #1
02d48     05 8C 5E F2 | 	cmps	local18, #5 wcz
02d4c     BC FF 9F CD |  if_b	jmp	#LR__0084
02d50                 | LR__0085
02d50     24 0E 06 F1 | 	add	objptr, #36
02d54     07 97 02 FB | 	rdlong	local23, objptr
02d58     11 96 66 F0 | 	shl	local23, #17
02d5c     40 0E 06 F1 | 	add	objptr, #64
02d60     07 99 02 FB | 	rdlong	local24, objptr
02d64     4B 99 02 F1 | 	add	local24, local23
02d68                 | ' timings[5]:=timings[5]+hdmibase<<17
02d68     07 99 62 FC | 	wrlong	local24, objptr
02d6c                 | ' clkfreq:=timings[13]
02d6c     20 0E 06 F1 | 	add	objptr, #32
02d70     07 6D 02 FB | 	rdlong	local02, objptr
02d74     14 6C 66 FC | 	wrlong	local02, #20
02d78                 | ' hubset(timings[14])
02d78     04 0E 06 F1 | 	add	objptr, #4
02d7c     07 5D 02 FB | 	rdlong	arg01, objptr
02d80     88 0E 86 F1 | 	sub	objptr, #136
02d84     00 5C 62 FD | 	hubset	arg01
02d88                 | ' waitms(1)
02d88     01 5C 06 F6 | 	mov	arg01, #1
02d8c     F8 32 B0 FD | 	call	#__system___waitms
02d90     35 9B 02 F6 | 	mov	local25, local01
02d94     03 9A 06 F5 | 	and	local25, #3
02d98     4D 9D C2 F9 | 	decod	local26, local25
02d9c                 | ' 
02d9c                 | ' 
02d9c                 | ' xzoom:=1<<(mode & 3)
02d9c     CC 0E 06 F1 | 	add	objptr, #204
02da0     07 9D 62 FC | 	wrlong	local26, objptr
02da4                 | ' 
02da4                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02da4     4E 79 02 F6 | 	mov	local08, local26
02da8     CC 0E 86 F1 | 	sub	objptr, #204
02dac     08 78 0E F2 | 	cmp	local08, #8 wz
02db0     24 00 90 5D |  if_ne	jmp	#LR__0086
02db4     35 7B 02 F6 | 	mov	local09, local01
02db8     04 7A 46 F0 | 	shr	local09, #4
02dbc     03 7A 06 F5 | 	and	local09, #3
02dc0     03 7A 0E F2 | 	cmp	local09, #3 wz
02dc4     10 00 90 AD |  if_e	jmp	#LR__0086
02dc8                 | '   xzoom:=4
02dc8     04 6C 06 F6 | 	mov	local02, #4
02dcc     CC 0E 06 F1 | 	add	objptr, #204
02dd0     07 09 68 FC | 	wrlong	#4, objptr
02dd4     CC 0E 86 F1 | 	sub	objptr, #204
02dd8                 | LR__0086
02dd8     35 9F 02 F6 | 	mov	local27, local01
02ddc     02 9E 46 F0 | 	shr	local27, #2
02de0     03 9E 06 F5 | 	and	local27, #3
02de4     4F A1 C2 F9 | 	decod	local28, local27
02de8                 | ' 
02de8                 | ' yzoom:=1<<((mode>>2) & 3)
02de8     D0 0E 06 F1 | 	add	objptr, #208
02dec     07 A1 62 FC | 	wrlong	local28, objptr
02df0     04 0E 86 F1 | 	sub	objptr, #4
02df4     07 79 02 FB | 	rdlong	local08, objptr
02df8     04 0E 06 F1 | 	add	objptr, #4
02dfc     07 71 02 FB | 	rdlong	local04, objptr
02e00     38 79 02 FD | 	qmul	local08, local04
02e04     18 A2 62 FD | 	getqx	local29
02e08                 | ' azoom:=xzoom*yzoom
02e08     04 0E 06 F1 | 	add	objptr, #4
02e0c     07 A3 62 FC | 	wrlong	local29, objptr
02e10                 | ' 
02e10                 | ' cpl:=timings[11]
02e10     58 0E 86 F1 | 	sub	objptr, #88
02e14     07 6D 02 FB | 	rdlong	local02, objptr
02e18     14 0E 06 F1 | 	add	objptr, #20
02e1c     07 6D 62 FC | 	wrlong	local02, objptr
02e20     90 0E 86 F1 | 	sub	objptr, #144
02e24                 | ' if (mode<512)
02e24     01 00 00 FF 
02e28     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02e2c     60 00 90 3D |  if_ae	jmp	#LR__0087
02e30     80 0E 06 F1 | 	add	objptr, #128
02e34     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e38     04 0A 47 F0 | 	shr	muldiva_, #4
02e3c     50 0E 06 F1 | 	add	objptr, #80
02e40     07 0D 03 FB | 	rdlong	muldivb_, objptr
02e44     D0 0E 86 F1 | 	sub	objptr, #208
02e48     CC 00 A0 FD | 	call	#unsdivide_
02e4c                 | '   lines:=(timings[12]>>4)+/yzoom
02e4c     94 0E 06 F1 | 	add	objptr, #148
02e50     07 0D 63 FC | 	wrlong	muldivb_, objptr
02e54                 | '   if ((timings[12]>>4)+//yzoom) <>0
02e54     14 0E 86 F1 | 	sub	objptr, #20
02e58     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e5c     04 0A 47 F0 | 	shr	muldiva_, #4
02e60     50 0E 06 F1 | 	add	objptr, #80
02e64     07 0D 03 FB | 	rdlong	muldivb_, objptr
02e68     D0 0E 86 F1 | 	sub	objptr, #208
02e6c     CC 00 A0 FD | 	call	#unsdivide_
02e70     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02e74     AC 00 90 AD |  if_e	jmp	#LR__0090
02e78                 | '     lines +=1
02e78     94 0E 06 F1 | 	add	objptr, #148
02e7c     07 6D 02 FB | 	rdlong	local02, objptr
02e80     01 6C 06 F1 | 	add	local02, #1
02e84     07 6D 62 FC | 	wrlong	local02, objptr
02e88     94 0E 86 F1 | 	sub	objptr, #148
02e8c                 | ' 
02e8c                 | ' else
02e8c     94 00 90 FD | 	jmp	#LR__0090
02e90                 | LR__0087
02e90     80 0E 06 F1 | 	add	objptr, #128
02e94     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e98     50 0E 06 F1 | 	add	objptr, #80
02e9c     07 0D 03 FB | 	rdlong	muldivb_, objptr
02ea0     D0 0E 86 F1 | 	sub	objptr, #208
02ea4     D0 00 A0 FD | 	call	#divide_
02ea8                 | '   lines:=timings[12]/yzoom
02ea8     94 0E 06 F1 | 	add	objptr, #148
02eac     07 0D 63 FC | 	wrlong	muldivb_, objptr
02eb0                 | '   if cpl//xzoom==0
02eb0     04 0E 86 F1 | 	sub	objptr, #4
02eb4     07 0B 03 FB | 	rdlong	muldiva_, objptr
02eb8     3C 0E 06 F1 | 	add	objptr, #60
02ebc     07 0D 03 FB | 	rdlong	muldivb_, objptr
02ec0     CC 0E 86 F1 | 	sub	objptr, #204
02ec4     D0 00 A0 FD | 	call	#divide_
02ec8     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02ecc     28 00 90 5D |  if_ne	jmp	#LR__0088
02ed0                 | '     cpl:=cpl/xzoom
02ed0     90 0E 06 F1 | 	add	objptr, #144
02ed4     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ed8     3C 0E 06 F1 | 	add	objptr, #60
02edc     07 0D 03 FB | 	rdlong	muldivb_, objptr
02ee0     CC 0E 86 F1 | 	sub	objptr, #204
02ee4     D0 00 A0 FD | 	call	#divide_
02ee8     90 0E 06 F1 | 	add	objptr, #144
02eec     07 0D 63 FC | 	wrlong	muldivb_, objptr
02ef0     90 0E 86 F1 | 	sub	objptr, #144
02ef4                 | '   else
02ef4     2C 00 90 FD | 	jmp	#LR__0089
02ef8                 | LR__0088
02ef8     90 0E 06 F1 | 	add	objptr, #144
02efc     07 0B 03 FB | 	rdlong	muldiva_, objptr
02f00     3C 0E 06 F1 | 	add	objptr, #60
02f04     07 0D 03 FB | 	rdlong	muldivb_, objptr
02f08     CC 0E 86 F1 | 	sub	objptr, #204
02f0c     D0 00 A0 FD | 	call	#divide_
02f10     86 A5 02 F6 | 	mov	local30, muldivb_
02f14     01 A4 06 F1 | 	add	local30, #1
02f18                 | '     cpl:=cpl/xzoom+1
02f18     90 0E 06 F1 | 	add	objptr, #144
02f1c     07 A5 62 FC | 	wrlong	local30, objptr
02f20     90 0E 86 F1 | 	sub	objptr, #144
02f24                 | LR__0089
02f24                 | LR__0090
02f24     90 0E 06 F1 | 	add	objptr, #144
02f28     07 79 02 FB | 	rdlong	local08, objptr
02f2c     04 0E 06 F1 | 	add	objptr, #4
02f30     07 71 02 FB | 	rdlong	local04, objptr
02f34     38 79 02 FD | 	qmul	local08, local04
02f38     18 A6 62 FD | 	getqx	local31
02f3c                 | ' 
02f3c                 | ' buflen:=(cpl*lines)
02f3c     64 0E 86 F1 | 	sub	objptr, #100
02f40     07 A7 62 FC | 	wrlong	local31, objptr
02f44     30 0E 86 F1 | 	sub	objptr, #48
02f48     02 A6 66 F0 | 	shl	local31, #2
02f4c     13 A8 C6 F9 | 	decod	local32, #19
02f50     53 A9 82 F1 | 	sub	local32, local31
02f54                 | ' buf_ptr:=$80000-4*buflen
02f54     07 A9 62 FC | 	wrlong	local32, objptr
02f58     50 0E 06 F1 | 	add	objptr, #80
02f5c     07 AB 02 F6 | 	mov	local33, objptr
02f60                 | ' mode_ptr:=@timings
02f60     3C 0E 86 F1 | 	sub	objptr, #60
02f64     07 AB 62 FC | 	wrlong	local33, objptr
02f68                 | ' graphmode:=mode
02f68     B0 0E 06 F1 | 	add	objptr, #176
02f6c     07 6B 62 FC | 	wrlong	local01, objptr
02f70     C4 0E 86 F1 | 	sub	objptr, #196
02f74                 | ' makedl(mode)
02f74     35 5D 02 F6 | 	mov	arg01, local01
02f78                 | ' 
02f78                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02f78                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02f78                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02f78                 | ' 
02f78                 | ' '   0 - display a up/down border line
02f78                 | ' 
02f78                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02f78                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02f78                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02f78                 | ' '    nnnn - font line to display, 0..15
02f78                 | ' '    llllll - character line, determines the cursor Y position
02f78                 | ' 
02f78                 | ' 
02f78                 | ' if (mode &256==0)
02f78     00 5D CE F7 | 	test	arg01, #256 wz
02f7c     1C 00 90 5D |  if_ne	jmp	#LR__0091
02f80     07 AD 02 FB | 	rdlong	local34, objptr
02f84     04 00 00 FF 
02f88     00 AD 86 F1 | 	sub	local34, ##2304
02f8c                 | '   dl_ptr:=buf_ptr-4*576
02f8c     1C 0E 06 F1 | 	add	objptr, #28
02f90     07 AD 62 FC | 	wrlong	local34, objptr
02f94     1C 0E 86 F1 | 	sub	objptr, #28
02f98                 | ' else
02f98     18 00 90 FD | 	jmp	#LR__0092
02f9c                 | LR__0091
02f9c     07 AF 02 FB | 	rdlong	local35, objptr
02fa0     03 00 00 FF 
02fa4     C0 AF 86 F1 | 	sub	local35, ##1984
02fa8                 | '   dl_ptr:=buf_ptr-4*496
02fa8     1C 0E 06 F1 | 	add	objptr, #28
02fac     07 AF 62 FC | 	wrlong	local35, objptr
02fb0     1C 0E 86 F1 | 	sub	objptr, #28
02fb4                 | LR__0092
02fb4     2E B1 02 F6 | 	mov	local36, arg01
02fb8     02 B0 46 F0 | 	shr	local36, #2
02fbc     03 B0 06 F5 | 	and	local36, #3
02fc0                 | '  ' dl_ptr:=buf_ptr-4*540
02fc0                 | ' 
02fc0                 | ' vzoom:=((mode>>2) & 3)
02fc0                 | ' 
02fc0                 | ' 
02fc0                 | ' if mode<512 '' text modes
02fc0     01 00 00 FF 
02fc4     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
02fc8     E4 01 90 3D |  if_ae	jmp	#LR__0100
02fcc                 | ' 
02fcc                 | '   if timings[6]>0 'borders
02fcc     68 0E 06 F1 | 	add	objptr, #104
02fd0     07 B3 02 FB | 	rdlong	local37, objptr
02fd4     68 0E 86 F1 | 	sub	objptr, #104
02fd8     00 B2 5E F2 | 	cmps	local37, #0 wcz
02fdc     D4 00 90 ED |  if_be	jmp	#LR__0097
02fe0                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02fe0     00 B4 06 F6 | 	mov	local38, #0
02fe4     68 0E 06 F1 | 	add	objptr, #104
02fe8     07 B7 02 FB | 	rdlong	local39, objptr
02fec     68 0E 86 F1 | 	sub	objptr, #104
02ff0     01 B6 86 F1 | 	sub	local39, #1
02ff4     00 B6 5E F2 | 	cmps	local39, #0 wcz
02ff8     01 B8 06 16 |  if_a	mov	local40, #1
02ffc     01 B8 66 E6 |  if_be	neg	local40, #1
03000     5C BB 02 F6 | 	mov	local41, local40
03004     5C B7 02 F1 | 	add	local39, local40
03008     1C D0 9F FE | 	loc	pa,	#(@LR__0094-@LR__0093)
0300c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03010                 | LR__0093
03010     5A BD 02 F6 | 	mov	local42, local38
03014     02 BC 66 F0 | 	shl	local42, #2
03018     1C 0E 06 F1 | 	add	objptr, #28
0301c     07 BF 02 FB | 	rdlong	local43, objptr
03020     1C 0E 86 F1 | 	sub	objptr, #28
03024     5E BF 02 F1 | 	add	local43, local42
03028                 | '       long[dl_ptr+4*i]:=$0
03028     5F 01 68 FC | 	wrlong	#0, local43
0302c     5D B5 02 F1 | 	add	local38, local41
03030     5B B5 0A F2 | 	cmp	local38, local39 wz
03034     D8 FF 9F 5D |  if_ne	jmp	#LR__0093
03038                 | LR__0094
03038                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03038     68 0E 06 F1 | 	add	objptr, #104
0303c     07 B5 02 FB | 	rdlong	local38, objptr
03040     18 0E 06 F1 | 	add	objptr, #24
03044     07 B9 02 FB | 	rdlong	local40, objptr
03048     5C B5 02 F1 | 	add	local38, local40
0304c     0C 0E 06 F1 | 	add	objptr, #12
03050     07 C1 02 FB | 	rdlong	local44, objptr
03054     01 C0 86 F1 | 	sub	local44, #1
03058     24 0E 86 F1 | 	sub	objptr, #36
0305c     07 C3 02 FB | 	rdlong	local45, objptr
03060     18 0E 06 F1 | 	add	objptr, #24
03064     07 C5 02 FB | 	rdlong	local46, objptr
03068     80 0E 86 F1 | 	sub	objptr, #128
0306c     62 C3 02 F1 | 	add	local45, local46
03070     61 C1 5A F2 | 	cmps	local44, local45 wcz
03074     01 C6 06 16 |  if_a	mov	local47, #1
03078     01 C6 66 E6 |  if_be	neg	local47, #1
0307c     63 C9 02 F6 | 	mov	local48, local47
03080     63 C1 02 F1 | 	add	local44, local47
03084     A0 CF 9F FE | 	loc	pa,	#(@LR__0096-@LR__0095)
03088     93 00 A0 FD | 	call	#FCACHE_LOAD_
0308c                 | LR__0095
0308c     5A CB 02 F6 | 	mov	local49, local38
03090     02 CA 66 F0 | 	shl	local49, #2
03094     1C 0E 06 F1 | 	add	objptr, #28
03098     07 CD 02 FB | 	rdlong	local50, objptr
0309c     1C 0E 86 F1 | 	sub	objptr, #28
030a0     65 CD 02 F1 | 	add	local50, local49
030a4                 | '       long[dl_ptr+4*i]:=$0
030a4     66 01 68 FC | 	wrlong	#0, local50
030a8     64 B5 02 F1 | 	add	local38, local48
030ac     60 B5 0A F2 | 	cmp	local38, local44 wz
030b0     D8 FF 9F 5D |  if_ne	jmp	#LR__0095
030b4                 | LR__0096
030b4                 | LR__0097
030b4     10 CE 06 F6 | 	mov	local51, #16
030b8     58 CF 62 F0 | 	shl	local51, local36
030bc                 | '   lpc:=16<<vzoom
030bc                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
030bc     68 0E 06 F1 | 	add	objptr, #104
030c0     07 B5 02 FB | 	rdlong	local38, objptr
030c4     5A D1 02 F6 | 	mov	local52, local38
030c8     18 0E 06 F1 | 	add	objptr, #24
030cc     07 D3 02 FB | 	rdlong	local53, objptr
030d0     69 D1 02 F1 | 	add	local52, local53
030d4     01 D0 86 F1 | 	sub	local52, #1
030d8     18 0E 86 F1 | 	sub	objptr, #24
030dc     07 C7 02 FB | 	rdlong	local47, objptr
030e0     68 0E 86 F1 | 	sub	objptr, #104
030e4     63 D1 5A F2 | 	cmps	local52, local47 wcz
030e8     01 D4 06 16 |  if_a	mov	local54, #1
030ec     01 D4 66 E6 |  if_be	neg	local54, #1
030f0     6A D7 02 F6 | 	mov	local55, local54
030f4     6A D1 02 F1 | 	add	local52, local54
030f8     B4 CF 9F FE | 	loc	pa,	#(@LR__0099-@LR__0098)
030fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03100                 | LR__0098
03100     5A 0B 03 F6 | 	mov	muldiva_, local38
03104     68 0E 06 F1 | 	add	objptr, #104
03108     07 D9 02 FB | 	rdlong	local56, objptr
0310c     68 0E 86 F1 | 	sub	objptr, #104
03110     6C 0B 83 F1 | 	sub	muldiva_, local56
03114     67 0D 03 F6 | 	mov	muldivb_, local51
03118     CC 00 A0 FD | 	call	#unsdivide_
0311c     58 0B 43 F0 | 	shr	muldiva_, local36
03120                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
03120     85 DB 02 F6 | 	mov	local57, muldiva_
03124     5A 0B 03 F6 | 	mov	muldiva_, local38
03128     68 0E 06 F1 | 	add	objptr, #104
0312c     07 D9 02 FB | 	rdlong	local56, objptr
03130     68 0E 86 F1 | 	sub	objptr, #104
03134     6C 0B 83 F1 | 	sub	muldiva_, local56
03138     67 0D 03 F6 | 	mov	muldivb_, local51
0313c     CC 00 A0 FD | 	call	#unsdivide_
03140     86 DD 02 F6 | 	mov	local58, muldivb_
03144                 | '     charline:=(i-timings[6])+/lpc
03144     90 0E 06 F1 | 	add	objptr, #144
03148     07 D9 02 FB | 	rdlong	local56, objptr
0314c     90 0E 86 F1 | 	sub	objptr, #144
03150     6E D9 02 FD | 	qmul	local56, local58
03154     18 DE 62 FD | 	getqx	local59
03158     02 DE 66 F0 | 	shl	local59, #2
0315c     07 E1 02 FB | 	rdlong	local60, objptr
03160     6F E1 02 F1 | 	add	local60, local59
03164     2E E3 02 F6 | 	mov	local61, arg01
03168     03 E2 06 F5 | 	and	local61, #3
0316c     71 E1 02 F1 | 	add	local60, local61
03170                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
03170     0C E0 66 F0 | 	shl	local60, #12
03174     08 DA 66 F0 | 	shl	local57, #8
03178     6D E1 02 F1 | 	add	local60, local57
0317c     02 DC 66 F0 | 	shl	local58, #2
03180     6E E1 02 F1 | 	add	local60, local58
03184     01 E0 06 F1 | 	add	local60, #1
03188     5A E5 02 F6 | 	mov	local62, local38
0318c     02 E4 66 F0 | 	shl	local62, #2
03190     1C 0E 06 F1 | 	add	objptr, #28
03194     07 E7 02 FB | 	rdlong	local63, objptr
03198     1C 0E 86 F1 | 	sub	objptr, #28
0319c     72 E7 02 F1 | 	add	local63, local62
031a0                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
031a0     73 E1 62 FC | 	wrlong	local60, local63
031a4     6B B5 02 F1 | 	add	local38, local55
031a8     68 B5 0A F2 | 	cmp	local38, local52 wz
031ac     50 FF 9F 5D |  if_ne	jmp	#LR__0098
031b0                 | LR__0099
031b0                 | LR__0100
031b0                 | ' 
031b0                 | ' 
031b0                 | ' 
031b0                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
031b0     01 00 00 FF 
031b4     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
031b8     AC 01 90 CD |  if_b	jmp	#LR__0108
031bc                 | ' 
031bc                 | '   if timings[6]>0 'borders
031bc     68 0E 06 F1 | 	add	objptr, #104
031c0     07 B3 02 FB | 	rdlong	local37, objptr
031c4     68 0E 86 F1 | 	sub	objptr, #104
031c8     00 B2 5E F2 | 	cmps	local37, #0 wcz
031cc     D4 00 90 ED |  if_be	jmp	#LR__0105
031d0                 | '     repeat i from 0 to timings[6]-1 '0 to -1
031d0     00 B4 06 F6 | 	mov	local38, #0
031d4     68 0E 06 F1 | 	add	objptr, #104
031d8     07 E9 02 FB | 	rdlong	local64, objptr
031dc     68 0E 86 F1 | 	sub	objptr, #104
031e0     01 E8 86 F1 | 	sub	local64, #1
031e4     00 E8 5E F2 | 	cmps	local64, #0 wcz
031e8     01 B8 06 16 |  if_a	mov	local40, #1
031ec     01 B8 66 E6 |  if_be	neg	local40, #1
031f0     5C EB 02 F6 | 	mov	local65, local40
031f4     5C E9 02 F1 | 	add	local64, local40
031f8     2C CE 9F FE | 	loc	pa,	#(@LR__0102-@LR__0101)
031fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03200                 | LR__0101
03200     5A ED 02 F6 | 	mov	local66, local38
03204     02 EC 66 F0 | 	shl	local66, #2
03208     1C 0E 06 F1 | 	add	objptr, #28
0320c     07 EF 02 FB | 	rdlong	local67, objptr
03210     1C 0E 86 F1 | 	sub	objptr, #28
03214     76 EF 02 F1 | 	add	local67, local66
03218                 | '       long[dl_ptr+4*i]:=$0
03218     77 01 68 FC | 	wrlong	#0, local67
0321c     75 B5 02 F1 | 	add	local38, local65
03220     74 B5 0A F2 | 	cmp	local38, local64 wz
03224     D8 FF 9F 5D |  if_ne	jmp	#LR__0101
03228                 | LR__0102
03228                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03228     68 0E 06 F1 | 	add	objptr, #104
0322c     07 B5 02 FB | 	rdlong	local38, objptr
03230     18 0E 06 F1 | 	add	objptr, #24
03234     07 B9 02 FB | 	rdlong	local40, objptr
03238     5C B5 02 F1 | 	add	local38, local40
0323c     0C 0E 06 F1 | 	add	objptr, #12
03240     07 F1 02 FB | 	rdlong	local68, objptr
03244     01 F0 86 F1 | 	sub	local68, #1
03248     24 0E 86 F1 | 	sub	objptr, #36
0324c     07 C3 02 FB | 	rdlong	local45, objptr
03250     18 0E 06 F1 | 	add	objptr, #24
03254     07 C5 02 FB | 	rdlong	local46, objptr
03258     80 0E 86 F1 | 	sub	objptr, #128
0325c     62 C3 02 F1 | 	add	local45, local46
03260     61 F1 5A F2 | 	cmps	local68, local45 wcz
03264     01 C6 06 16 |  if_a	mov	local47, #1
03268     01 C6 66 E6 |  if_be	neg	local47, #1
0326c     63 F3 02 F6 | 	mov	local69, local47
03270     63 F1 02 F1 | 	add	local68, local47
03274     B0 CD 9F FE | 	loc	pa,	#(@LR__0104-@LR__0103)
03278     93 00 A0 FD | 	call	#FCACHE_LOAD_
0327c                 | LR__0103
0327c     5A F5 02 F6 | 	mov	local70, local38
03280     02 F4 66 F0 | 	shl	local70, #2
03284     1C 0E 06 F1 | 	add	objptr, #28
03288     07 F7 02 FB | 	rdlong	local71, objptr
0328c     1C 0E 86 F1 | 	sub	objptr, #28
03290     7A F7 02 F1 | 	add	local71, local70
03294                 | '       long[dl_ptr+4*i]:=$0
03294     7B 01 68 FC | 	wrlong	#0, local71
03298     79 B5 02 F1 | 	add	local38, local69
0329c     78 B5 0A F2 | 	cmp	local38, local68 wz
032a0     D8 FF 9F 5D |  if_ne	jmp	#LR__0103
032a4                 | LR__0104
032a4                 | LR__0105
032a4                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
032a4     68 0E 06 F1 | 	add	objptr, #104
032a8     07 B5 02 FB | 	rdlong	local38, objptr
032ac     5A F9 02 F6 | 	mov	local72, local38
032b0     18 0E 06 F1 | 	add	objptr, #24
032b4     07 D3 02 FB | 	rdlong	local53, objptr
032b8     69 F9 02 F1 | 	add	local72, local53
032bc     01 F8 86 F1 | 	sub	local72, #1
032c0     18 0E 86 F1 | 	sub	objptr, #24
032c4     07 C7 02 FB | 	rdlong	local47, objptr
032c8     68 0E 86 F1 | 	sub	objptr, #104
032cc     63 F9 5A F2 | 	cmps	local72, local47 wcz
032d0     01 D4 06 16 |  if_a	mov	local54, #1
032d4     01 D4 66 E6 |  if_be	neg	local54, #1
032d8     6A FB 02 F6 | 	mov	local73, local54
032dc     6A F9 02 F1 | 	add	local72, local54
032e0     9C CD 9F FE | 	loc	pa,	#(@LR__0107-@LR__0106)
032e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
032e8                 | LR__0106
032e8     5A FD 02 F6 | 	mov	local74, local38
032ec     68 0E 06 F1 | 	add	objptr, #104
032f0     07 D9 02 FB | 	rdlong	local56, objptr
032f4     6C FD 82 F1 | 	sub	local74, local56
032f8     58 FD 42 F0 | 	shr	local74, local36
032fc     28 0E 06 F1 | 	add	objptr, #40
03300     07 D9 02 FB | 	rdlong	local56, objptr
03304     90 0E 86 F1 | 	sub	objptr, #144
03308     7E D9 02 FD | 	qmul	local56, local74
0330c     18 FE 62 FD | 	getqx	local75
03310     02 FE 66 F0 | 	shl	local75, #2
03314     07 01 03 FB | 	rdlong	local76, objptr
03318     7F 01 03 F1 | 	add	local76, local75
0331c     2E 03 03 F6 | 	mov	local77, arg01
03320     03 02 07 F5 | 	and	local77, #3
03324     81 01 03 F1 | 	add	local76, local77
03328                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
03328     0C 00 67 F0 | 	shl	local76, #12
0332c     02 00 07 F1 | 	add	local76, #2
03330     2E 05 03 F6 | 	mov	local78, arg01
03334     30 04 07 F5 | 	and	local78, #48
03338     02 04 47 F0 | 	shr	local78, #2
0333c     82 01 03 F1 | 	add	local76, local78
03340     5A 07 03 F6 | 	mov	local79, local38
03344     02 06 67 F0 | 	shl	local79, #2
03348     1C 0E 06 F1 | 	add	objptr, #28
0334c     07 09 03 FB | 	rdlong	local80, objptr
03350     1C 0E 86 F1 | 	sub	objptr, #28
03354     83 09 03 F1 | 	add	local80, local79
03358                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
03358     84 01 63 FC | 	wrlong	local76, local80
0335c     7D B5 02 F1 | 	add	local38, local73
03360     7C B5 0A F2 | 	cmp	local38, local72 wz
03364     80 FF 9F 5D |  if_ne	jmp	#LR__0106
03368                 | LR__0107
03368                 | LR__0108
03368                 | LR__0109
03368     AF F0 03 F6 | 	mov	ptra, fp
0336c     BF 00 A0 FD | 	call	#popregs_
03370                 | _hng030rm_spin2_setmode_ret
03370     2D 00 64 FD | 	ret
03374                 | 
03374                 | ' 
03374                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
03374                 | _retrocog_spin2_serialcog
03374     1C 5A 05 F6 | 	mov	COUNT_, #28
03378     B0 00 A0 FD | 	call	#pushregs_
0337c                 | ' 
0337c                 | ' 'start serial and midi
0337c                 | ' 
0337c                 | ' serial_start(rxpin, txpin, baudrate)
0337c     20 5C 06 F6 | 	mov	arg01, #32
03380     21 5E 06 F6 | 	mov	arg02, #33
03384     A6 0E 00 FF 
03388     00 60 06 F6 | 	mov	arg03, ##1920000
0338c     D8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03390                 | ' serial_start(midiin,midiout,mbaudrate)
03390     1D 5C 06 F6 | 	mov	arg01, #29
03394     1E 5E 06 F6 | 	mov	arg02, #30
03398     3D 00 00 FF 
0339c     12 60 06 F6 | 	mov	arg03, ##31250
033a0     C4 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033a4                 | ' serial_start(srxpin,stxpin,sbaudrate)
033a4     42 0F 00 FF 
033a8     80 6A 06 F6 | 	mov	local01, ##2000000
033ac     3F 5C 06 F6 | 	mov	arg01, #63
033b0     3E 5E 06 F6 | 	mov	arg02, #62
033b4     42 0F 00 FF 
033b8     80 60 06 F6 | 	mov	arg03, ##2000000
033bc     A8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033c0                 | ' 
033c0                 | ' mb:=(-1)
033c0     01 6C 66 F6 | 	neg	local02, #1
033c4                 | ' b:=(-1)
033c4     01 6E 66 F6 | 	neg	local03, #1
033c8                 | ' 
033c8                 | ' mousefront:=0
033c8     00 70 06 F6 | 	mov	local04, #0
033cc     08 0E 06 F1 | 	add	objptr, #8
033d0     07 01 68 FC | 	wrlong	#0, objptr
033d4                 | ' mousetail:=0
033d4     04 0E 06 F1 | 	add	objptr, #4
033d8     07 01 68 FC | 	wrlong	#0, objptr
033dc     0C 0E 86 F1 | 	sub	objptr, #12
033e0                 | ' kbdfront:=0
033e0     07 01 68 FC | 	wrlong	#0, objptr
033e4                 | ' kbdtail:=0
033e4     04 0E 06 F1 | 	add	objptr, #4
033e8     07 01 68 FC | 	wrlong	#0, objptr
033ec                 | ' midifront:=0
033ec     0C 0E 06 F1 | 	add	objptr, #12
033f0     07 01 68 FC | 	wrlong	#0, objptr
033f4                 | ' miditail:=0
033f4     04 0E 06 F1 | 	add	objptr, #4
033f8     07 01 68 FC | 	wrlong	#0, objptr
033fc                 | ' serialfront:=0
033fc     04 0E 06 F1 | 	add	objptr, #4
03400     07 01 68 FC | 	wrlong	#0, objptr
03404                 | ' serialtail:=0
03404     04 0E 06 F1 | 	add	objptr, #4
03408     07 01 68 FC | 	wrlong	#0, objptr
0340c                 | ' long[$30]:=0
0340c     30 00 6C FC | 	wrlong	#0, #48
03410                 | ' long[$34]:=0
03410     34 00 6C FC | 	wrlong	#0, #52
03414                 | ' long[$38]:=0
03414     38 00 6C FC | 	wrlong	#0, #56
03418     1C 0E 86 F1 | 	sub	objptr, #28
0341c                 | ' long[$3C]:=0
0341c     3C 00 6C FC | 	wrlong	#0, #60
03420                 | ' 
03420                 | ' repeat
03420                 | LR__0110
03420                 | ' 
03420                 | ' '  repeat 
03420                 | '   rr:=rxcheck(rxpin)
03420     20 5C 06 F6 | 	mov	arg01, #32
03424     BC 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03428     15 73 02 F6 | 	mov	local05, result1
0342c                 | '   mrr:=rxcheck(midiin)
0342c     1D 5C 06 F6 | 	mov	arg01, #29
03430     B0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03434     15 75 02 F6 | 	mov	local06, result1
03438                 | '   srr:=rxcheck(srxpin)
03438     3F 70 06 F6 | 	mov	local04, #63
0343c     3F 5C 06 F6 | 	mov	arg01, #63
03440     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03444     15 77 02 F6 | 	mov	local07, result1
03448     3B 79 02 F6 | 	mov	local08, local07
0344c                 | ' 
0344c                 | ' '  until rr>=0 || mrr>=0  || srr>=0
0344c                 | ' 
0344c                 | '   
0344c                 | ' ' midi. Must be >= $80 for a command
0344c                 | ' '$80-$8F - 3 bytes note off. note, velocity
0344c                 | ' '$90-$9F - 3 bytes note on, note, velocity
0344c                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
0344c                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
0344c                 | ' '$C0-$CF - 2 bytes program change
0344c                 | ' '$D0-$DF - 2 bytes mono aftertouch
0344c                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
0344c                 | ' '$F0-$FF - 1 byte
0344c                 | '   
0344c                 | '   if srr>=0
0344c     00 78 5E F2 | 	cmps	local08, #0 wcz
03450     7C 00 90 CD |  if_b	jmp	#LR__0112
03454                 | '   
03454                 | '     if serialfront<>((serialtail-1) //32)
03454     1C 0E 06 F1 | 	add	objptr, #28
03458     07 77 02 FB | 	rdlong	local07, objptr
0345c     3B 71 02 F6 | 	mov	local04, local07
03460     01 70 86 F1 | 	sub	local04, #1
03464     38 6B 52 F6 | 	abs	local01, local04 wc
03468     1F 6A 06 F5 | 	and	local01, #31
0346c     35 6B 62 C6 |  if_b	neg	local01, local01
03470     04 0E 86 F1 | 	sub	objptr, #4
03474     07 7B 02 FB | 	rdlong	local09, objptr
03478     18 0E 86 F1 | 	sub	objptr, #24
0347c     3D 7D 02 F6 | 	mov	local10, local09
03480     35 7D 0A F2 | 	cmp	local10, local01 wz
03484     48 00 90 AD |  if_e	jmp	#LR__0111
03488     18 0E 06 F1 | 	add	objptr, #24
0348c     07 7D 02 FB | 	rdlong	local10, objptr
03490     01 00 00 FF 
03494     08 0F 06 F1 | 	add	objptr, ##776
03498     07 7D 02 F1 | 	add	local10, objptr
0349c     3E 7F 02 F6 | 	mov	local11, local10
034a0                 | '       serialbuf[serialfront]:=srr
034a0     3F 79 42 FC | 	wrbyte	local08, local11
034a4                 | '       serialfront+=1
034a4     01 00 00 FF 
034a8     08 0F 86 F1 | 	sub	objptr, ##776
034ac     07 6B 02 FB | 	rdlong	local01, objptr
034b0     01 6A 06 F1 | 	add	local01, #1
034b4     07 6B 62 FC | 	wrlong	local01, objptr
034b8                 | '       serialfront:=serialfront // 32
034b8     35 77 02 F6 | 	mov	local07, local01
034bc     3B 71 52 F6 | 	abs	local04, local07 wc
034c0     1F 70 06 F5 | 	and	local04, #31
034c4     38 71 62 C6 |  if_b	neg	local04, local04
034c8     07 71 62 FC | 	wrlong	local04, objptr
034cc     18 0E 86 F1 | 	sub	objptr, #24
034d0                 | LR__0111
034d0                 | LR__0112
034d0                 | '     
034d0                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
034d0     80 74 5E F2 | 	cmps	local06, #128 wcz
034d4     08 00 90 CD |  if_b	jmp	#LR__0113
034d8     BF 74 5E F2 | 	cmps	local06, #191 wcz
034dc     10 00 90 ED |  if_be	jmp	#LR__0114
034e0                 | LR__0113
034e0     E0 74 5E F2 | 	cmps	local06, #224 wcz
034e4     1C 00 90 CD |  if_b	jmp	#LR__0115
034e8     EF 74 5E F2 | 	cmps	local06, #239 wcz
034ec     14 00 90 1D |  if_a	jmp	#LR__0115
034f0                 | LR__0114
034f0                 | '     mb:=2
034f0     02 6C 06 F6 | 	mov	local02, #2
034f4     3A 71 02 F6 | 	mov	local04, local06
034f8     18 70 66 F0 | 	shl	local04, #24
034fc     38 81 02 F6 | 	mov	local12, local04
03500                 | '     midireport:=mrr<<24
03500     40 83 02 F6 | 	mov	local13, local12
03504                 | LR__0115
03504                 | ' 
03504                 | '   if (mrr>=$C0) && (mrr<=$DF)
03504     C0 74 5E F2 | 	cmps	local06, #192 wcz
03508     1C 00 90 CD |  if_b	jmp	#LR__0116
0350c     DF 74 5E F2 | 	cmps	local06, #223 wcz
03510     14 00 90 1D |  if_a	jmp	#LR__0116
03514                 | '     mb:=1
03514     01 6C 06 F6 | 	mov	local02, #1
03518     3A 71 02 F6 | 	mov	local04, local06
0351c     18 70 66 F0 | 	shl	local04, #24
03520     38 85 02 F6 | 	mov	local14, local04
03524                 | '     midireport:=mrr<<24
03524     42 83 02 F6 | 	mov	local13, local14
03528                 | LR__0116
03528                 | '   
03528                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
03528     F0 74 5E F2 | 	cmps	local06, #240 wcz
0352c     10 00 90 CD |  if_b	jmp	#LR__0117
03530                 | '     mb:=4
03530     04 6C 06 F6 | 	mov	local02, #4
03534     3A 87 02 F6 | 	mov	local15, local06
03538     18 86 66 F0 | 	shl	local15, #24
0353c                 | '     midireport:=mrr<<24  
0353c     43 83 02 F6 | 	mov	local13, local15
03540                 | LR__0117
03540                 | '   
03540                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
03540     80 74 5E F2 | 	cmps	local06, #128 wcz
03544     44 00 90 3D |  if_ae	jmp	#LR__0119
03548     00 6C 5E F2 | 	cmps	local02, #0 wcz
0354c     3C 00 90 ED |  if_be	jmp	#LR__0119
03550     00 74 5E F2 | 	cmps	local06, #0 wcz
03554     34 00 90 CD |  if_b	jmp	#LR__0119
03558                 | '     
03558                 | '     mb--
03558     36 71 02 F6 | 	mov	local04, local02
0355c     36 77 02 F6 | 	mov	local07, local02
03560     01 76 86 F1 | 	sub	local07, #1
03564     3B 6D 02 F6 | 	mov	local02, local07
03568                 | '     if mb<3
03568     03 6C 5E F2 | 	cmps	local02, #3 wcz
0356c     1C 00 90 3D |  if_ae	jmp	#LR__0118
03570     36 89 02 F6 | 	mov	local16, local02
03574     03 88 66 F0 | 	shl	local16, #3
03578     3A 8B 02 F6 | 	mov	local17, local06
0357c     44 8B 62 F0 | 	shl	local17, local16
03580                 | '       midireport+=mrr<<(mb<<3)
03580     41 71 02 F6 | 	mov	local04, local13
03584     45 71 02 F1 | 	add	local04, local17
03588     38 83 02 F6 | 	mov	local13, local04
0358c                 | LR__0118
0358c                 | LR__0119
0358c                 | '   
0358c                 | '   if mb==0
0358c     00 6C 0E F2 | 	cmp	local02, #0 wz
03590     84 00 90 5D |  if_ne	jmp	#LR__0121
03594                 | '     
03594                 | '     if midifront<>((miditail-1) //32)
03594     14 0E 06 F1 | 	add	objptr, #20
03598     07 77 02 FB | 	rdlong	local07, objptr
0359c     3B 71 02 F6 | 	mov	local04, local07
035a0     01 70 86 F1 | 	sub	local04, #1
035a4     38 6B 52 F6 | 	abs	local01, local04 wc
035a8     1F 6A 06 F5 | 	and	local01, #31
035ac     35 6B 62 C6 |  if_b	neg	local01, local01
035b0     04 0E 86 F1 | 	sub	objptr, #4
035b4     07 7B 02 FB | 	rdlong	local09, objptr
035b8     10 0E 86 F1 | 	sub	objptr, #16
035bc     3D 7D 02 F6 | 	mov	local10, local09
035c0     35 7D 0A F2 | 	cmp	local10, local01 wz
035c4     4C 00 90 AD |  if_e	jmp	#LR__0120
035c8     10 0E 06 F1 | 	add	objptr, #16
035cc     07 7D 02 FB | 	rdlong	local10, objptr
035d0     02 7C 66 F0 | 	shl	local10, #2
035d4     01 00 00 FF 
035d8     90 0E 06 F1 | 	add	objptr, ##656
035dc     07 7D 02 F1 | 	add	local10, objptr
035e0     3E 8D 02 F6 | 	mov	local18, local10
035e4                 | '       midibuf[midifront]:=midireport
035e4     46 83 62 FC | 	wrlong	local13, local18
035e8                 | '       midifront+=1
035e8     01 00 00 FF 
035ec     90 0E 86 F1 | 	sub	objptr, ##656
035f0     07 6B 02 FB | 	rdlong	local01, objptr
035f4     01 6A 06 F1 | 	add	local01, #1
035f8     07 6B 62 FC | 	wrlong	local01, objptr
035fc                 | '       midifront:=midifront // 32
035fc     35 77 02 F6 | 	mov	local07, local01
03600     3B 71 52 F6 | 	abs	local04, local07 wc
03604     1F 70 06 F5 | 	and	local04, #31
03608     38 71 62 C6 |  if_b	neg	local04, local04
0360c     07 71 62 FC | 	wrlong	local04, objptr
03610     10 0E 86 F1 | 	sub	objptr, #16
03614                 | LR__0120
03614                 | '     mb:=(-1)
03614     01 6C 66 F6 | 	neg	local02, #1
03618                 | LR__0121
03618                 | ' 
03618                 | ' 'Keyboard and mouse
03618                 | ' 
03618                 | '   if (rr>=$80) && (rr<>$FF)
03618     80 72 5E F2 | 	cmps	local05, #128 wcz
0361c     1C 00 90 CD |  if_b	jmp	#LR__0122
03620     FF 72 0E F2 | 	cmp	local05, #255 wz
03624     14 00 90 AD |  if_e	jmp	#LR__0122
03628                 | '     b:=3
03628     03 6E 06 F6 | 	mov	local03, #3
0362c     39 71 02 F6 | 	mov	local04, local05
03630     18 70 66 F0 | 	shl	local04, #24
03634     38 8F 02 F6 | 	mov	local19, local04
03638                 | '     kbmreport:=rr<<24
03638     47 91 02 F6 | 	mov	local20, local19
0363c                 | LR__0122
0363c                 | '   
0363c                 | '   if (rr<$80) && (b>0) && (rr>=0)
0363c     80 72 5E F2 | 	cmps	local05, #128 wcz
03640     38 00 90 3D |  if_ae	jmp	#LR__0123
03644     00 6E 5E F2 | 	cmps	local03, #0 wcz
03648     30 00 90 ED |  if_be	jmp	#LR__0123
0364c     00 72 5E F2 | 	cmps	local05, #0 wcz
03650     28 00 90 CD |  if_b	jmp	#LR__0123
03654                 | '     b--
03654     37 77 02 F6 | 	mov	local07, local03
03658     01 76 86 F1 | 	sub	local07, #1
0365c     3B 6F 02 F6 | 	mov	local03, local07
03660     37 93 02 F6 | 	mov	local21, local03
03664     03 92 66 F0 | 	shl	local21, #3
03668     39 95 02 F6 | 	mov	local22, local05
0366c     49 95 62 F0 | 	shl	local22, local21
03670                 | '     kbmreport+=rr<<(b<<3)  
03670     48 71 02 F6 | 	mov	local04, local20
03674     4A 71 02 F1 | 	add	local04, local22
03678     38 91 02 F6 | 	mov	local20, local04
0367c                 | LR__0123
0367c                 | '   
0367c                 | '   if (rr==$FF)
0367c     FF 72 0E F2 | 	cmp	local05, #255 wz
03680                 | '     b:=0   
03680     00 6E 06 A6 |  if_e	mov	local03, #0
03684                 | ' 
03684                 | '   if b==0  
03684     00 6E 0E F2 | 	cmp	local03, #0 wz
03688     14 01 90 5D |  if_ne	jmp	#LR__0128
0368c                 | '  
0368c                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
0368c     00 00 40 FF 
03690     00 90 1E F2 | 	cmp	local20, ##-2147483648 wcz
03694     84 00 90 CD |  if_b	jmp	#LR__0125
03698     00 80 43 FF 
0369c     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
036a0     78 00 90 3D |  if_ae	jmp	#LR__0125
036a4                 | '       if mousefront<>((mousetail-1) //128)
036a4     0C 0E 06 F1 | 	add	objptr, #12
036a8     07 77 02 FB | 	rdlong	local07, objptr
036ac     3B 71 02 F6 | 	mov	local04, local07
036b0     01 70 86 F1 | 	sub	local04, #1
036b4     38 6B 52 F6 | 	abs	local01, local04 wc
036b8     7F 6A 06 F5 | 	and	local01, #127
036bc     35 6B 62 C6 |  if_b	neg	local01, local01
036c0     04 0E 86 F1 | 	sub	objptr, #4
036c4     07 7B 02 FB | 	rdlong	local09, objptr
036c8     08 0E 86 F1 | 	sub	objptr, #8
036cc     3D 7D 02 F6 | 	mov	local10, local09
036d0     35 7D 0A F2 | 	cmp	local10, local01 wz
036d4     44 00 90 AD |  if_e	jmp	#LR__0124
036d8     08 0E 06 F1 | 	add	objptr, #8
036dc     07 7D 02 FB | 	rdlong	local10, objptr
036e0     02 7C 66 F0 | 	shl	local10, #2
036e4     98 0E 06 F1 | 	add	objptr, #152
036e8     07 7D 02 F1 | 	add	local10, objptr
036ec     3E 97 02 F6 | 	mov	local23, local10
036f0                 | '         mousebuf[mousefront]:=kbmreport
036f0     4B 91 62 FC | 	wrlong	local20, local23
036f4                 | '         mousefront+=1
036f4     98 0E 86 F1 | 	sub	objptr, #152
036f8     07 6B 02 FB | 	rdlong	local01, objptr
036fc     01 6A 06 F1 | 	add	local01, #1
03700     07 6B 62 FC | 	wrlong	local01, objptr
03704                 | '         mousefront:=mousefront // 128
03704     35 77 02 F6 | 	mov	local07, local01
03708     3B 71 52 F6 | 	abs	local04, local07 wc
0370c     7F 70 06 F5 | 	and	local04, #127
03710     38 71 62 C6 |  if_b	neg	local04, local04
03714     07 71 62 FC | 	wrlong	local04, objptr
03718     08 0E 86 F1 | 	sub	objptr, #8
0371c                 | LR__0124
0371c                 | LR__0125
0371c                 | '     b:=(-1)
0371c     01 6E 66 F6 | 	neg	local03, #1
03720                 | ' 
03720                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
03720     00 80 43 FF 
03724     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
03728     70 00 90 CD |  if_b	jmp	#LR__0127
0372c     00 00 45 FF 
03730     00 90 1E F2 | 	cmp	local20, ##-1979711488 wcz
03734     64 00 90 3D |  if_ae	jmp	#LR__0127
03738                 | '       if kbdfront<>((kbdtail-1) //32)
03738     04 0E 06 F1 | 	add	objptr, #4
0373c     07 77 02 FB | 	rdlong	local07, objptr
03740     04 0E 86 F1 | 	sub	objptr, #4
03744     3B 71 02 F6 | 	mov	local04, local07
03748     01 70 86 F1 | 	sub	local04, #1
0374c     38 6B 52 F6 | 	abs	local01, local04 wc
03750     1F 6A 06 F5 | 	and	local01, #31
03754     35 6B 62 C6 |  if_b	neg	local01, local01
03758     07 7D 02 FB | 	rdlong	local10, objptr
0375c     35 7D 0A F2 | 	cmp	local10, local01 wz
03760     38 00 90 AD |  if_e	jmp	#LR__0126
03764     07 6B 02 FB | 	rdlong	local01, objptr
03768     02 6A 66 F0 | 	shl	local01, #2
0376c     20 0E 06 F1 | 	add	objptr, #32
03770     07 6B 02 F1 | 	add	local01, objptr
03774     35 99 02 F6 | 	mov	local24, local01
03778                 | '         kbdbuf[kbdfront]:=kbmreport
03778     4C 91 62 FC | 	wrlong	local20, local24
0377c                 | '         kbdfront+=1
0377c     20 0E 86 F1 | 	sub	objptr, #32
03780     07 77 02 FB | 	rdlong	local07, objptr
03784     01 76 06 F1 | 	add	local07, #1
03788     07 77 62 FC | 	wrlong	local07, objptr
0378c                 | '         kbdfront:=kbdfront // 32
0378c     3B 71 52 F6 | 	abs	local04, local07 wc
03790     1F 70 06 F5 | 	and	local04, #31
03794     38 71 62 C6 |  if_b	neg	local04, local04
03798     07 71 62 FC | 	wrlong	local04, objptr
0379c                 | LR__0126
0379c                 | LR__0127
0379c                 | '     b:=(-1)
0379c     01 6E 66 F6 | 	neg	local03, #1
037a0                 | LR__0128
037a0                 | ' 
037a0                 | ' 
037a0                 | '   if long[$30]==0
037a0     30 70 0E FB | 	rdlong	local04, #48 wz
037a4     5C 00 90 5D |  if_ne	jmp	#LR__0130
037a8                 | '     if kbdfront<>kbdtail
037a8     07 71 02 FB | 	rdlong	local04, objptr
037ac     04 0E 06 F1 | 	add	objptr, #4
037b0     07 6B 02 FB | 	rdlong	local01, objptr
037b4     04 0E 86 F1 | 	sub	objptr, #4
037b8     35 71 0A F2 | 	cmp	local04, local01 wz
037bc     44 00 90 AD |  if_e	jmp	#LR__0129
037c0     04 0E 06 F1 | 	add	objptr, #4
037c4     07 9B 02 FB | 	rdlong	local25, objptr
037c8     02 9A 66 F0 | 	shl	local25, #2
037cc     1C 0E 06 F1 | 	add	objptr, #28
037d0     07 9B 02 F1 | 	add	local25, objptr
037d4                 | '       long[$30]:=kbdbuf[kbdtail]
037d4     4D 71 02 FB | 	rdlong	local04, local25
037d8     30 70 66 FC | 	wrlong	local04, #48
037dc                 | '       kbdtail++
037dc     1C 0E 86 F1 | 	sub	objptr, #28
037e0     07 7D 02 FB | 	rdlong	local10, objptr
037e4     3E 6B 02 F6 | 	mov	local01, local10
037e8     01 6A 06 F1 | 	add	local01, #1
037ec     07 6B 62 FC | 	wrlong	local01, objptr
037f0                 | '       kbdtail:= kbdtail // 32
037f0     35 71 52 F6 | 	abs	local04, local01 wc
037f4     1F 70 06 F5 | 	and	local04, #31
037f8     38 71 62 C6 |  if_b	neg	local04, local04
037fc     07 71 62 FC | 	wrlong	local04, objptr
03800     04 0E 86 F1 | 	sub	objptr, #4
03804                 | LR__0129
03804                 | LR__0130
03804                 | '       
03804                 | '   if long[$34]==0
03804     34 70 0E FB | 	rdlong	local04, #52 wz
03808     64 00 90 5D |  if_ne	jmp	#LR__0132
0380c                 | '     if mousefront<>mousetail
0380c     08 0E 06 F1 | 	add	objptr, #8
03810     07 71 02 FB | 	rdlong	local04, objptr
03814     04 0E 06 F1 | 	add	objptr, #4
03818     07 7D 02 FB | 	rdlong	local10, objptr
0381c     0C 0E 86 F1 | 	sub	objptr, #12
03820     3E 6B 02 F6 | 	mov	local01, local10
03824     35 71 0A F2 | 	cmp	local04, local01 wz
03828     44 00 90 AD |  if_e	jmp	#LR__0131
0382c     0C 0E 06 F1 | 	add	objptr, #12
03830     07 9D 02 FB | 	rdlong	local26, objptr
03834     02 9C 66 F0 | 	shl	local26, #2
03838     94 0E 06 F1 | 	add	objptr, #148
0383c     07 9D 02 F1 | 	add	local26, objptr
03840                 | '       long[$34]:=mousebuf[mousetail]
03840     4E 71 02 FB | 	rdlong	local04, local26
03844     34 70 66 FC | 	wrlong	local04, #52
03848                 | '       mousetail++
03848     94 0E 86 F1 | 	sub	objptr, #148
0384c     07 7D 02 FB | 	rdlong	local10, objptr
03850     3E 6B 02 F6 | 	mov	local01, local10
03854     01 6A 06 F1 | 	add	local01, #1
03858     07 6B 62 FC | 	wrlong	local01, objptr
0385c                 | '       mousetail:= mousetail // 128
0385c     35 71 52 F6 | 	abs	local04, local01 wc
03860     7F 70 06 F5 | 	and	local04, #127
03864     38 71 62 C6 |  if_b	neg	local04, local04
03868     07 71 62 FC | 	wrlong	local04, objptr
0386c     0C 0E 86 F1 | 	sub	objptr, #12
03870                 | LR__0131
03870                 | LR__0132
03870                 | ' 
03870                 | '       
03870                 | '   if long[$38]==0
03870     38 70 0E FB | 	rdlong	local04, #56 wz
03874     6C 00 90 5D |  if_ne	jmp	#LR__0134
03878                 | '     if midifront<>miditail
03878     10 0E 06 F1 | 	add	objptr, #16
0387c     07 71 02 FB | 	rdlong	local04, objptr
03880     04 0E 06 F1 | 	add	objptr, #4
03884     07 7D 02 FB | 	rdlong	local10, objptr
03888     14 0E 86 F1 | 	sub	objptr, #20
0388c     3E 6B 02 F6 | 	mov	local01, local10
03890     35 71 0A F2 | 	cmp	local04, local01 wz
03894     4C 00 90 AD |  if_e	jmp	#LR__0133
03898     14 0E 06 F1 | 	add	objptr, #20
0389c     07 9F 02 FB | 	rdlong	local27, objptr
038a0     02 9E 66 F0 | 	shl	local27, #2
038a4     01 00 00 FF 
038a8     8C 0E 06 F1 | 	add	objptr, ##652
038ac     07 9F 02 F1 | 	add	local27, objptr
038b0                 | '       long[$38]:=midibuf[miditail]
038b0     4F 71 02 FB | 	rdlong	local04, local27
038b4     38 70 66 FC | 	wrlong	local04, #56
038b8                 | '       miditail++
038b8     01 00 00 FF 
038bc     8C 0E 86 F1 | 	sub	objptr, ##652
038c0     07 7D 02 FB | 	rdlong	local10, objptr
038c4     3E 6B 02 F6 | 	mov	local01, local10
038c8     01 6A 06 F1 | 	add	local01, #1
038cc     07 6B 62 FC | 	wrlong	local01, objptr
038d0                 | '       miditail:= miditail // 32
038d0     35 71 52 F6 | 	abs	local04, local01 wc
038d4     1F 70 06 F5 | 	and	local04, #31
038d8     38 71 62 C6 |  if_b	neg	local04, local04
038dc     07 71 62 FC | 	wrlong	local04, objptr
038e0     14 0E 86 F1 | 	sub	objptr, #20
038e4                 | LR__0133
038e4                 | LR__0134
038e4                 | '       
038e4                 | '   if long[$3c]==0
038e4     3C 70 0E FB | 	rdlong	local04, #60 wz
038e8     34 FB 9F 5D |  if_ne	jmp	#LR__0110
038ec                 | '     if serialfront<>serialtail
038ec     18 0E 06 F1 | 	add	objptr, #24
038f0     07 71 02 FB | 	rdlong	local04, objptr
038f4     04 0E 06 F1 | 	add	objptr, #4
038f8     07 7D 02 FB | 	rdlong	local10, objptr
038fc     1C 0E 86 F1 | 	sub	objptr, #28
03900     3E 6B 02 F6 | 	mov	local01, local10
03904     35 71 0A F2 | 	cmp	local04, local01 wz
03908     14 FB 9F AD |  if_e	jmp	#LR__0110
0390c                 | '       byte[$3c]:=255
0390c     3C FE 4D FC | 	wrbyte	#255, #60
03910     1C 0E 06 F1 | 	add	objptr, #28
03914     07 A1 02 FB | 	rdlong	local28, objptr
03918     01 00 00 FF 
0391c     04 0F 06 F1 | 	add	objptr, ##772
03920     07 A1 02 F1 | 	add	local28, objptr
03924                 | '       byte[$3D]:=serialbuf[serialtail]
03924     50 71 C2 FA | 	rdbyte	local04, local28
03928     3D 70 46 FC | 	wrbyte	local04, #61
0392c                 | '       serialtail++
0392c     01 00 00 FF 
03930     04 0F 86 F1 | 	sub	objptr, ##772
03934     07 7D 02 FB | 	rdlong	local10, objptr
03938     3E 6B 02 F6 | 	mov	local01, local10
0393c     01 6A 06 F1 | 	add	local01, #1
03940     07 6B 62 FC | 	wrlong	local01, objptr
03944                 | '       serialtail:= serialtail // 32
03944     35 71 52 F6 | 	abs	local04, local01 wc
03948     1F 70 06 F5 | 	and	local04, #31
0394c     38 71 62 C6 |  if_b	neg	local04, local04
03950     07 71 62 FC | 	wrlong	local04, objptr
03954     1C 0E 86 F1 | 	sub	objptr, #28
03958     C4 FA 9F FD | 	jmp	#LR__0110
0395c     AF F0 03 F6 | 	mov	ptra, fp
03960     BF 00 A0 FD | 	call	#popregs_
03964                 | _retrocog_spin2_serialcog_ret
03964     2D 00 64 FD | 	ret
03968                 | 
03968                 | '       
03968                 | ' 
03968                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03968                 | ' 
03968                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03968                 | _retrocog_spin2_serial_start
03968     04 5A 05 F6 | 	mov	COUNT_, #4
0396c     B0 00 A0 FD | 	call	#pushregs_
03970     2E 6B 02 F6 | 	mov	local01, arg01
03974     2F 6D 02 F6 | 	mov	local02, arg02
03978                 | ' 
03978                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03978     14 5C 06 FB | 	rdlong	arg01, #20
0397c     10 5E C6 F9 | 	decod	arg02, #16
03980     2F 5D 02 FD | 	qmul	arg01, arg02
03984     19 6E 62 FD | 	getqy	local03
03988     18 70 62 FD | 	getqx	local04
0398c     28 6E 62 FD | 	setq	local03
03990     30 71 12 FD | 	qdiv	local04, arg03
03994     18 2A 62 FD | 	getqx	result1
03998     15 61 02 F6 | 	mov	arg03, result1
0399c     FE FF 7F FF 
039a0     00 60 06 F5 | 	and	arg03, ##-1024
039a4                 | ' bitmode |= 7                                                  ' set bits (8)
039a4     07 60 46 F5 | 	or	arg03, #7
039a8                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
039a8     40 6A 62 FD | 	dirl	local01
039ac     08 00 80 FF 
039b0     35 7D 08 FC | 	wrpin	##4158, local01
039b4     35 61 12 FC | 	wxpin	arg03, local01
039b8     35 01 28 FC | 	wypin	#0, local01
039bc     41 6A 62 FD | 	dirh	local01
039c0                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
039c0     40 6C 62 FD | 	dirl	local02
039c4     36 F9 08 FC | 	wrpin	#124, local02
039c8     36 61 12 FC | 	wxpin	arg03, local02
039cc     36 01 28 FC | 	wypin	#0, local02
039d0     41 6C 62 FD | 	dirh	local02
039d4                 | ' pinhigh(rxpin)
039d4     59 6A 62 FD | 	drvh	local01
039d8     AF F0 03 F6 | 	mov	ptra, fp
039dc     BF 00 A0 FD | 	call	#popregs_
039e0                 | _retrocog_spin2_serial_start_ret
039e0     2D 00 64 FD | 	ret
039e4                 | 
039e4                 | ' 
039e4                 | ' pub rxcheck(pin) : rxbyte | check
039e4                 | _retrocog_spin2_rxcheck
039e4     03 5A 05 F6 | 	mov	COUNT_, #3
039e8     B0 00 A0 FD | 	call	#pushregs_
039ec     2E 6B 02 F6 | 	mov	local01, arg01
039f0                 | ' 
039f0                 | ' '' Check for serial input
039f0                 | ' '' -- returns -1 if nothing available
039f0                 | ' 
039f0                 | '   rxbyte := -1
039f0     01 6C 66 F6 | 	neg	local02, #1
039f4                 | '   check := pinr(pin)
039f4     35 5D 02 F6 | 	mov	arg01, local01
039f8     6C 26 B0 FD | 	call	#__system___pinread
039fc     15 6F 0A F6 | 	mov	local03, result1 wz
03a00                 | '   if (check)
03a00                 | '     rxbyte := rdpin(pin) >> 24
03a00     00 6C 06 56 |  if_ne	mov	local02, #0
03a04     35 6D 8A 5A |  if_ne	rdpin	local02, local01
03a08     18 6C 46 50 |  if_ne	shr	local02, #24
03a0c     36 2B 02 F6 | 	mov	result1, local02
03a10     AF F0 03 F6 | 	mov	ptra, fp
03a14     BF 00 A0 FD | 	call	#popregs_
03a18                 | _retrocog_spin2_rxcheck_ret
03a18     2D 00 64 FD | 	ret
03a1c                 | 
03a1c                 | _trackerplayer_spin2_initModule
03a1c     3E 5A 05 F6 | 	mov	COUNT_, #62
03a20     B0 00 A0 FD | 	call	#pushregs_
03a24     24 F1 07 F1 | 	add	ptra, #292
03a28     AF 5C 62 FC | 	wrlong	arg01, fp
03a2c     04 5E 05 F1 | 	add	fp, #4
03a30     AF 5E 62 FC | 	wrlong	arg02, fp
03a34     04 5E 85 F1 | 	sub	fp, #4
03a38     AF 6A 02 FB | 	rdlong	local01, fp
03a3c     02 00 00 FF 
03a40     38 6A 06 F1 | 	add	local01, ##1080
03a44                 | ' 
03a44                 | '   ' Set some data pointers
03a44                 | '   magicFour      := hubPtr + 1080
03a44     9D 0E 06 F1 | 	add	objptr, #157
03a48     07 6B 62 FC | 	wrlong	local01, objptr
03a4c                 | '   nameStr        := hubPtr
03a4c     AF 6C 02 FB | 	rdlong	local02, fp
03a50     97 0E 86 F1 | 	sub	objptr, #151
03a54     07 6D 62 FC | 	wrlong	local02, objptr
03a58     AF 6E 02 FB | 	rdlong	local03, fp
03a5c     14 6E 06 F1 | 	add	local03, #20
03a60                 | '   samplesInfoLut := hubPtr + 20
03a60     04 0E 06 F1 | 	add	objptr, #4
03a64     07 6F 62 FC | 	wrlong	local03, objptr
03a68                 | ' 
03a68                 | '   ' Is this a 31 sample module?
03a68                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03a68     93 0E 06 F1 | 	add	objptr, #147
03a6c     07 6D 02 FB | 	rdlong	local02, objptr
03a70     9D 0E 86 F1 | 	sub	objptr, #157
03a74     36 71 C2 FA | 	rdbyte	local04, local02
03a78     4D 70 0E F2 | 	cmp	local04, #77 wz
03a7c     48 01 90 5D |  if_ne	jmp	#LR__0138
03a80     9D 0E 06 F1 | 	add	objptr, #157
03a84     07 73 02 FB | 	rdlong	local05, objptr
03a88     9D 0E 86 F1 | 	sub	objptr, #157
03a8c     02 72 06 F1 | 	add	local05, #2
03a90     39 75 C2 FA | 	rdbyte	local06, local05
03a94     4B 74 0E F2 | 	cmp	local06, #75 wz
03a98     2C 01 90 5D |  if_ne	jmp	#LR__0138
03a9c     AF 76 02 FB | 	rdlong	local07, fp
03aa0     01 00 00 FF 
03aa4     B6 77 06 F1 | 	add	local07, ##950
03aa8                 | '     songLength          := byte[hubPtr + 950]
03aa8     3B 6D C2 FA | 	rdbyte	local02, local07
03aac     9A 0E 06 F1 | 	add	objptr, #154
03ab0     07 6D 42 FC | 	wrbyte	local02, objptr
03ab4     AF 78 02 FB | 	rdlong	local08, fp
03ab8     01 00 00 FF 
03abc     B7 79 06 F1 | 	add	local08, ##951
03ac0                 | '     unknown1            := byte[hubPtr + 951]
03ac0     3C 6D C2 FA | 	rdbyte	local02, local08
03ac4     02 0E 06 F1 | 	add	objptr, #2
03ac8     07 6D 42 FC | 	wrbyte	local02, objptr
03acc     AF 7A 02 FB | 	rdlong	local09, fp
03ad0     01 00 00 FF 
03ad4     B8 7B 06 F1 | 	add	local09, ##952
03ad8                 | '     songPositionsLut    :=      hubPtr + 952
03ad8     06 0E 86 F1 | 	sub	objptr, #6
03adc     07 7B 62 FC | 	wrlong	local09, objptr
03ae0     AF 7C 02 FB | 	rdlong	local10, fp
03ae4     02 00 00 FF 
03ae8     3C 7C 06 F1 | 	add	local10, ##1084
03aec                 | '     patternsData        :=      hubPtr + 1084
03aec     04 0E 86 F1 | 	sub	objptr, #4
03af0     07 7D 62 FC | 	wrlong	local10, objptr
03af4                 | '     numberOfInstruments := 31
03af4     14 0E 06 F1 | 	add	objptr, #20
03af8     07 3F 48 FC | 	wrbyte	#31, objptr
03afc                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03afc     0B 0E 86 F1 | 	sub	objptr, #11
03b00     07 01 48 FC | 	wrbyte	#0, objptr
03b04     9B 0E 86 F1 | 	sub	objptr, #155
03b08                 | '     repeat i from 952 to 1079
03b08     08 5E 05 F1 | 	add	fp, #8
03b0c     01 00 80 FF 
03b10     AF 70 6B FC | 	wrlong	##952, fp
03b14     08 5E 85 F1 | 	sub	fp, #8
03b18     54 C5 9F FE | 	loc	pa,	#(@LR__0137-@LR__0135)
03b1c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03b20                 | LR__0135
03b20                 | '       if byte[hubPtr][i] > numberOfPatterns
03b20     AF 7E 02 FB | 	rdlong	local11, fp
03b24     08 5E 05 F1 | 	add	fp, #8
03b28     AF 70 02 FB | 	rdlong	local04, fp
03b2c     08 5E 85 F1 | 	sub	fp, #8
03b30     3F 71 02 F1 | 	add	local04, local11
03b34     38 75 C2 FA | 	rdbyte	local06, local04
03b38     9B 0E 06 F1 | 	add	objptr, #155
03b3c     07 81 C2 FA | 	rdbyte	local12, objptr
03b40     9B 0E 86 F1 | 	sub	objptr, #155
03b44     40 75 5A F2 | 	cmps	local06, local12 wcz
03b48     24 00 90 ED |  if_be	jmp	#LR__0136
03b4c     AF 7E 02 FB | 	rdlong	local11, fp
03b50     08 5E 05 F1 | 	add	fp, #8
03b54     AF 82 02 FB | 	rdlong	local13, fp
03b58     08 5E 85 F1 | 	sub	fp, #8
03b5c     3F 83 02 F1 | 	add	local13, local11
03b60                 | '         numberOfPatterns := byte[hubPtr][i]
03b60     41 85 C2 FA | 	rdbyte	local14, local13
03b64     9B 0E 06 F1 | 	add	objptr, #155
03b68     07 85 42 FC | 	wrbyte	local14, objptr
03b6c     9B 0E 86 F1 | 	sub	objptr, #155
03b70                 | LR__0136
03b70     08 5E 05 F1 | 	add	fp, #8
03b74     AF 84 02 FB | 	rdlong	local14, fp
03b78     01 84 06 F1 | 	add	local14, #1
03b7c     AF 84 62 FC | 	wrlong	local14, fp
03b80     08 5E 85 F1 | 	sub	fp, #8
03b84     02 00 00 FF 
03b88     38 84 5E F2 | 	cmps	local14, ##1080 wcz
03b8c     90 FF 9F CD |  if_b	jmp	#LR__0135
03b90                 | LR__0137
03b90                 | '     numberOfPatterns++
03b90     9B 0E 06 F1 | 	add	objptr, #155
03b94     07 85 C2 FA | 	rdbyte	local14, objptr
03b98     07 71 C2 FA | 	rdbyte	local04, objptr
03b9c     01 70 06 F1 | 	add	local04, #1
03ba0     07 71 42 FC | 	wrbyte	local04, objptr
03ba4     07 87 C2 FA | 	rdbyte	local15, objptr
03ba8     0A 86 66 F0 | 	shl	local15, #10
03bac     09 0E 86 F1 | 	sub	objptr, #9
03bb0     07 89 02 FB | 	rdlong	local16, objptr
03bb4     43 89 02 F1 | 	add	local16, local15
03bb8                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03bb8     84 0E 86 F1 | 	sub	objptr, #132
03bbc     07 89 62 FC | 	wrlong	local16, objptr
03bc0     0E 0E 86 F1 | 	sub	objptr, #14
03bc4                 | ' 
03bc4                 | '   ' This must be an oldschool 15 sample soundtracker module
03bc4                 | '   else
03bc4     18 01 90 FD | 	jmp	#LR__0142
03bc8                 | LR__0138
03bc8     AF 8A 02 FB | 	rdlong	local17, fp
03bcc     D6 8B 06 F1 | 	add	local17, #470
03bd0                 | '     songLength          := byte[hubPtr + 470]
03bd0     45 6D C2 FA | 	rdbyte	local02, local17
03bd4     9A 0E 06 F1 | 	add	objptr, #154
03bd8     07 6D 42 FC | 	wrbyte	local02, objptr
03bdc     AF 8C 02 FB | 	rdlong	local18, fp
03be0     D7 8D 06 F1 | 	add	local18, #471
03be4                 | '     unknown1            := byte[hubPtr + 471]
03be4     46 6D C2 FA | 	rdbyte	local02, local18
03be8     02 0E 06 F1 | 	add	objptr, #2
03bec     07 6D 42 FC | 	wrbyte	local02, objptr
03bf0     AF 8E 02 FB | 	rdlong	local19, fp
03bf4     D8 8F 06 F1 | 	add	local19, #472
03bf8                 | '     songPositionsLut    :=      hubPtr + 472
03bf8     06 0E 86 F1 | 	sub	objptr, #6
03bfc     07 8F 62 FC | 	wrlong	local19, objptr
03c00     AF 90 02 FB | 	rdlong	local20, fp
03c04     01 00 00 FF 
03c08     58 90 06 F1 | 	add	local20, ##600
03c0c                 | '     patternsData        :=      hubPtr + 600
03c0c     04 0E 86 F1 | 	sub	objptr, #4
03c10     07 91 62 FC | 	wrlong	local20, objptr
03c14                 | '     numberOfInstruments := 15
03c14     14 0E 06 F1 | 	add	objptr, #20
03c18     07 1F 48 FC | 	wrbyte	#15, objptr
03c1c                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03c1c     0B 0E 86 F1 | 	sub	objptr, #11
03c20     07 01 48 FC | 	wrbyte	#0, objptr
03c24     9B 0E 86 F1 | 	sub	objptr, #155
03c28                 | '     repeat i from 472 to 599
03c28     08 5E 05 F1 | 	add	fp, #8
03c2c     AF B0 6B FC | 	wrlong	#472, fp
03c30     08 5E 85 F1 | 	sub	fp, #8
03c34     38 C4 9F FE | 	loc	pa,	#(@LR__0141-@LR__0139)
03c38     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c3c                 | LR__0139
03c3c                 | '       if byte[hubPtr][i] > numberOfPatterns
03c3c     AF 7E 02 FB | 	rdlong	local11, fp
03c40     08 5E 05 F1 | 	add	fp, #8
03c44     AF 70 02 FB | 	rdlong	local04, fp
03c48     08 5E 85 F1 | 	sub	fp, #8
03c4c     3F 71 02 F1 | 	add	local04, local11
03c50     38 75 C2 FA | 	rdbyte	local06, local04
03c54     9B 0E 06 F1 | 	add	objptr, #155
03c58     07 81 C2 FA | 	rdbyte	local12, objptr
03c5c     9B 0E 86 F1 | 	sub	objptr, #155
03c60     40 75 5A F2 | 	cmps	local06, local12 wcz
03c64     24 00 90 ED |  if_be	jmp	#LR__0140
03c68     AF 7E 02 FB | 	rdlong	local11, fp
03c6c     08 5E 05 F1 | 	add	fp, #8
03c70     AF 92 02 FB | 	rdlong	local21, fp
03c74     08 5E 85 F1 | 	sub	fp, #8
03c78     3F 93 02 F1 | 	add	local21, local11
03c7c                 | '         numberOfPatterns := byte[hubPtr][i]
03c7c     49 85 C2 FA | 	rdbyte	local14, local21
03c80     9B 0E 06 F1 | 	add	objptr, #155
03c84     07 85 42 FC | 	wrbyte	local14, objptr
03c88     9B 0E 86 F1 | 	sub	objptr, #155
03c8c                 | LR__0140
03c8c     08 5E 05 F1 | 	add	fp, #8
03c90     AF 84 02 FB | 	rdlong	local14, fp
03c94     01 84 06 F1 | 	add	local14, #1
03c98     AF 84 62 FC | 	wrlong	local14, fp
03c9c     08 5E 85 F1 | 	sub	fp, #8
03ca0     01 00 00 FF 
03ca4     58 84 5E F2 | 	cmps	local14, ##600 wcz
03ca8     90 FF 9F CD |  if_b	jmp	#LR__0139
03cac                 | LR__0141
03cac                 | '     numberOfPatterns++
03cac     9B 0E 06 F1 | 	add	objptr, #155
03cb0     07 85 C2 FA | 	rdbyte	local14, objptr
03cb4     07 71 C2 FA | 	rdbyte	local04, objptr
03cb8     01 70 06 F1 | 	add	local04, #1
03cbc     07 71 42 FC | 	wrbyte	local04, objptr
03cc0     07 95 C2 FA | 	rdbyte	local22, objptr
03cc4     0A 94 66 F0 | 	shl	local22, #10
03cc8     09 0E 86 F1 | 	sub	objptr, #9
03ccc     07 97 02 FB | 	rdlong	local23, objptr
03cd0     4A 97 02 F1 | 	add	local23, local22
03cd4                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03cd4     84 0E 86 F1 | 	sub	objptr, #132
03cd8     07 97 62 FC | 	wrlong	local23, objptr
03cdc     0E 0E 86 F1 | 	sub	objptr, #14
03ce0                 | LR__0142
03ce0                 | ' 
03ce0                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03ce0                 | '   tmpPtr := sampleDataPtr
03ce0     0E 0E 06 F1 | 	add	objptr, #14
03ce4     07 6D 02 FB | 	rdlong	local02, objptr
03ce8     0C 5E 05 F1 | 	add	fp, #12
03cec     AF 6C 62 FC | 	wrlong	local02, fp
03cf0                 | '   repeat i from 1 to numberOfInstruments
03cf0     04 5E 85 F1 | 	sub	fp, #4
03cf4     AF 02 68 FC | 	wrlong	#1, fp
03cf8     08 5E 85 F1 | 	sub	fp, #8
03cfc     98 0E 06 F1 | 	add	objptr, #152
03d00     07 71 C2 FA | 	rdbyte	local04, objptr
03d04     01 70 5E F2 | 	cmps	local04, #1 wcz
03d08     01 84 06 16 |  if_a	mov	local14, #1
03d0c     01 84 66 E6 |  if_be	neg	local14, #1
03d10     42 99 02 F6 | 	mov	local24, local14
03d14     07 9B C2 FA | 	rdbyte	local25, objptr
03d18     A6 0E 86 F1 | 	sub	objptr, #166
03d1c     4C 9B 02 F1 | 	add	local25, local24
03d20                 | LR__0143
03d20     08 5E 05 F1 | 	add	fp, #8
03d24     AF 9C 02 FB | 	rdlong	local26, fp
03d28     01 9C 86 F1 | 	sub	local26, #1
03d2c     02 9C 66 F0 | 	shl	local26, #2
03d30     12 0E 06 F1 | 	add	objptr, #18
03d34     07 9D 02 F1 | 	add	local26, objptr
03d38                 | '     samplesPtrLut[i-1] := tmpPtr
03d38     04 5E 05 F1 | 	add	fp, #4
03d3c     AF 80 02 FB | 	rdlong	local12, fp
03d40     4E 81 62 FC | 	wrlong	local12, local26
03d44     18 5E 05 F1 | 	add	fp, #24
03d48     AF 5E 02 F6 | 	mov	arg02, fp
03d4c     14 5E 85 F1 | 	sub	fp, #20
03d50     AF 60 02 F6 | 	mov	arg03, fp
03d54     04 5E 05 F1 | 	add	fp, #4
03d58     AF 62 02 F6 | 	mov	arg04, fp
03d5c     04 5E 05 F1 | 	add	fp, #4
03d60     AF 64 02 F6 | 	mov	arg05, fp
03d64     04 5E 05 F1 | 	add	fp, #4
03d68     AF 66 02 F6 | 	mov	arg06, fp
03d6c     04 5E 05 F1 | 	add	fp, #4
03d70     AF 68 02 F6 | 	mov	arg07, fp
03d74                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03d74     18 5E 85 F1 | 	sub	fp, #24
03d78     AF 5C 02 FB | 	rdlong	arg01, fp
03d7c     08 5E 85 F1 | 	sub	fp, #8
03d80     12 0E 86 F1 | 	sub	objptr, #18
03d84     A0 07 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03d88                 | '     tmpPtr += samLength
03d88     0C 5E 05 F1 | 	add	fp, #12
03d8c     AF 80 02 FB | 	rdlong	local12, fp
03d90     04 5E 05 F1 | 	add	fp, #4
03d94     AF 9E 02 FB | 	rdlong	local27, fp
03d98     4F 81 02 F1 | 	add	local12, local27
03d9c     04 5E 85 F1 | 	sub	fp, #4
03da0     AF 80 62 FC | 	wrlong	local12, fp
03da4     04 5E 85 F1 | 	sub	fp, #4
03da8     AF 80 02 FB | 	rdlong	local12, fp
03dac     4C 81 02 F1 | 	add	local12, local24
03db0     AF 80 62 FC | 	wrlong	local12, fp
03db4     08 5E 85 F1 | 	sub	fp, #8
03db8     4D 81 0A F2 | 	cmp	local12, local25 wz
03dbc     60 FF 9F 5D |  if_ne	jmp	#LR__0143
03dc0                 | ' 
03dc0                 | '   ' Below this point, all play routine variables are resest to their default values
03dc0                 | '   tickCounter                 := 0
03dc0     A1 0E 06 F1 | 	add	objptr, #161
03dc4     07 01 48 FC | 	wrbyte	#0, objptr
03dc8                 | '   patternRow                  := 0
03dc8     01 0E 06 F1 | 	add	objptr, #1
03dcc     07 01 48 FC | 	wrbyte	#0, objptr
03dd0                 | '   songPosition                := startPattern
03dd0     04 5E 05 F1 | 	add	fp, #4
03dd4     AF 6C 02 FB | 	rdlong	local02, fp
03dd8     04 5E 85 F1 | 	sub	fp, #4
03ddc     01 0E 06 F1 | 	add	objptr, #1
03de0     07 6D 42 FC | 	wrbyte	local02, objptr
03de4                 | '   currentSongSpeed            := 6
03de4     01 0E 06 F1 | 	add	objptr, #1
03de8     07 0D 48 FC | 	wrbyte	#6, objptr
03dec                 | '   patternDelay                := 0
03dec     01 0E 06 F1 | 	add	objptr, #1
03df0     07 01 48 FC | 	wrbyte	#0, objptr
03df4                 | '   ticksPerMinute              := 50 * 60
03df4     02 0F 06 F1 | 	add	objptr, #258
03df8     05 00 80 FF 
03dfc     07 71 6B FC | 	wrlong	##3000, objptr
03e00     A7 0F 86 F1 | 	sub	objptr, #423
03e04     07 0B 03 FB | 	rdlong	muldiva_, objptr
03e08     32 0C 07 F6 | 	mov	muldivb_, #50
03e0c     D0 00 A0 FD | 	call	#divide_
03e10                 | '   cyclesToWait                := systemClock / 50
03e10     AB 0F 06 F1 | 	add	objptr, #427
03e14     07 0D 63 FC | 	wrlong	muldivb_, objptr
03e18                 | '   sampleNumber_memory         := 0
03e18     35 0E 06 F1 | 	add	objptr, #53
03e1c     07 01 48 FC | 	wrbyte	#0, objptr
03e20                 | '   lpFilter                    := 0
03e20     25 0E 86 F1 | 	sub	objptr, #37
03e24     07 01 48 FC | 	wrbyte	#0, objptr
03e28                 | '   cmdD_memoryX                := 0
03e28     29 0E 06 F1 | 	add	objptr, #41
03e2c     07 01 48 FC | 	wrbyte	#0, objptr
03e30                 | '   cmdD_memoryY                := 0
03e30     01 0E 06 F1 | 	add	objptr, #1
03e34     07 01 48 FC | 	wrbyte	#0, objptr
03e38                 | '   cmdD_updatePosition         := false
03e38     01 0E 06 F1 | 	add	objptr, #1
03e3c     07 01 48 FC | 	wrbyte	#0, objptr
03e40                 | '   cmdB_memoryZ                := 0
03e40     01 0E 06 F1 | 	add	objptr, #1
03e44     07 01 48 FC | 	wrbyte	#0, objptr
03e48                 | '   cmdB_updatePosition         := false
03e48     01 0E 06 F1 | 	add	objptr, #1
03e4c     07 01 48 FC | 	wrbyte	#0, objptr
03e50                 | '   cmdE6_updatePositionCommon  := false
03e50     0D 0E 06 F1 | 	add	objptr, #13
03e54     07 01 48 FC | 	wrbyte	#0, objptr
03e58     F5 0F 86 F1 | 	sub	objptr, #501
03e5c                 | ' 
03e5c                 | '   repeat i from 0 to LAST_CHANNEL
03e5c     08 5E 05 F1 | 	add	fp, #8
03e60     AF 00 68 FC | 	wrlong	#0, fp
03e64     08 5E 85 F1 | 	sub	fp, #8
03e68                 | LR__0144
03e68     08 5E 05 F1 | 	add	fp, #8
03e6c     AF A0 02 FB | 	rdlong	local28, fp
03e70     01 A0 66 F0 | 	shl	local28, #1
03e74     D7 0E 06 F1 | 	add	objptr, #215
03e78     07 A1 02 F1 | 	add	local28, objptr
03e7c                 | ' 
03e7c                 | '     currRepeatPoint[i]        := 0
03e7c     50 01 58 FC | 	wrword	#0, local28
03e80     AF A2 02 FB | 	rdlong	local29, fp
03e84     01 A2 66 F0 | 	shl	local29, #1
03e88     1C 0E 86 F1 | 	sub	objptr, #28
03e8c     07 A3 02 F1 | 	add	local29, objptr
03e90                 | '     currSampleLength[i]       := 4
03e90     51 09 58 FC | 	wrword	#4, local29
03e94     14 A5 02 F6 | 	mov	local30, ptr__trackerplayer_spin2_dat__
03e98     AF A6 02 FB | 	rdlong	local31, fp
03e9c     02 A6 66 F0 | 	shl	local31, #2
03ea0     14 0E 86 F1 | 	sub	objptr, #20
03ea4     07 A7 02 F1 | 	add	local31, objptr
03ea8                 | '     currSamplePtr[i]          := @null
03ea8     53 A5 62 FC | 	wrlong	local30, local31
03eac     AF A8 02 FB | 	rdlong	local32, fp
03eb0     10 0E 06 F1 | 	add	objptr, #16
03eb4     07 A9 02 F1 | 	add	local32, objptr
03eb8                 | '     currSampleNr[i]           := 0
03eb8     54 01 48 FC | 	wrbyte	#0, local32
03ebc     AF AA 02 FB | 	rdlong	local33, fp
03ec0     02 AA 66 F0 | 	shl	local33, #2
03ec4     0C 0E 06 F1 | 	add	objptr, #12
03ec8     07 AB 02 F1 | 	add	local33, objptr
03ecc                 | '     currRepeatLength[i]       := 1
03ecc     55 03 68 FC | 	wrlong	#1, local33
03ed0     AF AC 02 FB | 	rdlong	local34, fp
03ed4     02 AC 66 F0 | 	shl	local34, #2
03ed8     1C 0E 06 F1 | 	add	objptr, #28
03edc     07 AD 02 F1 | 	add	local34, objptr
03ee0                 | '     currPeriod[i]             := 400
03ee0     56 21 6B FC | 	wrlong	#400, local34
03ee4     AF AE 02 FB | 	rdlong	local35, fp
03ee8     02 AE 66 F0 | 	shl	local35, #2
03eec     48 0E 06 F1 | 	add	objptr, #72
03ef0     07 AF 02 F1 | 	add	local35, objptr
03ef4                 | '     lastSetPeriod[i]          := 400
03ef4     57 21 6B FC | 	wrlong	#400, local35
03ef8     AF B0 02 FB | 	rdlong	local36, fp
03efc     02 B0 66 F0 | 	shl	local36, #2
03f00     10 0E 06 F1 | 	add	objptr, #16
03f04     07 B1 02 F1 | 	add	local36, objptr
03f08                 | '     lastSetSamplePtr[i]       := 0
03f08     58 01 68 FC | 	wrlong	#0, local36
03f0c     AF B2 02 FB | 	rdlong	local37, fp
03f10     02 B2 66 F0 | 	shl	local37, #2
03f14     10 0E 06 F1 | 	add	objptr, #16
03f18     07 B3 02 F1 | 	add	local37, objptr
03f1c                 | '     lastSetSampleNr[i]        := 0
03f1c     59 01 68 FC | 	wrlong	#0, local37
03f20     AF B4 02 FB | 	rdlong	local38, fp
03f24     02 B4 66 F0 | 	shl	local38, #2
03f28     10 0E 06 F1 | 	add	objptr, #16
03f2c     07 B5 02 F1 | 	add	local38, objptr
03f30                 | '     lastSetSampleLength[i]    := 0
03f30     5A 01 68 FC | 	wrlong	#0, local38
03f34     AF B6 02 FB | 	rdlong	local39, fp
03f38     02 B6 66 F0 | 	shl	local39, #2
03f3c     10 0E 06 F1 | 	add	objptr, #16
03f40     07 B7 02 F1 | 	add	local39, objptr
03f44                 | '     lastSetRepeatLength[i]    := 0
03f44     5B 01 68 FC | 	wrlong	#0, local39
03f48     AF B8 02 FB | 	rdlong	local40, fp
03f4c     02 B8 66 F0 | 	shl	local40, #2
03f50     10 0E 06 F1 | 	add	objptr, #16
03f54     07 B9 02 F1 | 	add	local40, objptr
03f58                 | '     lastSetRepeatPoint[i]     := 0
03f58     5C 01 68 FC | 	wrlong	#0, local40
03f5c     AF BA 02 FB | 	rdlong	local41, fp
03f60     02 BA 66 F0 | 	shl	local41, #2
03f64     78 0E 86 F1 | 	sub	objptr, #120
03f68     07 BB 02 F1 | 	add	local41, objptr
03f6c                 | '     currVolume[i]             := 0
03f6c     5D 01 68 FC | 	wrlong	#0, local41
03f70     AF BC 02 FB | 	rdlong	local42, fp
03f74     01 BC 66 F0 | 	shl	local42, #1
03f78     20 0E 06 F1 | 	add	objptr, #32
03f7c     07 BD 02 F1 | 	add	local42, objptr
03f80                 | '     currPanning[i]            := 0
03f80     5E 01 58 FC | 	wrword	#0, local42
03f84     AF BE 02 FB | 	rdlong	local43, fp
03f88     A9 0E 06 F1 | 	add	objptr, #169
03f8c     07 BF 02 F1 | 	add	local43, objptr
03f90                 | '     cmd3_memoryZ[i]           := 0
03f90     5F 01 48 FC | 	wrbyte	#0, local43
03f94     AF C0 02 FB | 	rdlong	local44, fp
03f98     04 0E 06 F1 | 	add	objptr, #4
03f9c     07 C1 02 F1 | 	add	local44, objptr
03fa0                 | '     cmd4_memoryY[i]           := 0
03fa0     60 01 48 FC | 	wrbyte	#0, local44
03fa4     AF C2 02 FB | 	rdlong	local45, fp
03fa8     04 0E 06 F1 | 	add	objptr, #4
03fac     07 C3 02 F1 | 	add	local45, objptr
03fb0                 | '     cmd4_memoryX[i]           := 0
03fb0     61 01 48 FC | 	wrbyte	#0, local45
03fb4     AF C4 02 FB | 	rdlong	local46, fp
03fb8     04 0E 06 F1 | 	add	objptr, #4
03fbc     07 C5 02 F1 | 	add	local46, objptr
03fc0                 | '     cmd7_memoryY[i]           := 0
03fc0     62 01 48 FC | 	wrbyte	#0, local46
03fc4     AF C6 02 FB | 	rdlong	local47, fp
03fc8     04 0E 06 F1 | 	add	objptr, #4
03fcc     07 C7 02 F1 | 	add	local47, objptr
03fd0                 | '     cmd7_memoryX[i]           := 0
03fd0     63 01 48 FC | 	wrbyte	#0, local47
03fd4     AF C8 02 FB | 	rdlong	local48, fp
03fd8     04 0E 06 F1 | 	add	objptr, #4
03fdc     07 C9 02 F1 | 	add	local48, objptr
03fe0                 | '     cmd9_memoryZ[i]           := 0
03fe0     64 01 48 FC | 	wrbyte	#0, local48
03fe4     AF CA 02 FB | 	rdlong	local49, fp
03fe8     0D 0E 06 F1 | 	add	objptr, #13
03fec     07 CB 02 F1 | 	add	local49, objptr
03ff0                 | '     cmdE6_memory[i]           := 0
03ff0     65 01 48 FC | 	wrbyte	#0, local49
03ff4     AF CC 02 FB | 	rdlong	local50, fp
03ff8     04 0E 06 F1 | 	add	objptr, #4
03ffc     07 CD 02 F1 | 	add	local50, objptr
04000                 | '     cmdE6_counter[i]          := 0
04000     66 01 48 FC | 	wrbyte	#0, local50
04004     AF CE 02 FB | 	rdlong	local51, fp
04008     04 0E 06 F1 | 	add	objptr, #4
0400c     07 CF 02 F1 | 	add	local51, objptr
04010                 | '     cmdE6_updatePosition[i]   := false
04010     67 01 48 FC | 	wrbyte	#0, local51
04014     AF D0 02 FB | 	rdlong	local52, fp
04018     11 0E 86 F1 | 	sub	objptr, #17
0401c     07 D1 02 F1 | 	add	local52, objptr
04020                 | '     sampleNumber_memory[i]    := 0
04020     68 01 48 FC | 	wrbyte	#0, local52
04024     AF D2 02 FB | 	rdlong	local53, fp
04028     59 0E 86 F1 | 	sub	objptr, #89
0402c     07 D3 02 F1 | 	add	local53, objptr
04030                 | '     vibratoPos[i]             := 0
04030     69 01 48 FC | 	wrbyte	#0, local53
04034     AF D4 02 FB | 	rdlong	local54, fp
04038     02 D4 66 F0 | 	shl	local54, #2
0403c     10 0E 06 F1 | 	add	objptr, #16
04040     07 D5 02 F1 | 	add	local54, objptr
04044                 | '     portamentoPeriodMemory[i] := 0
04044     6A 01 68 FC | 	wrlong	#0, local54
04048     AF D6 02 FB | 	rdlong	local55, fp
0404c     25 0E 06 F1 | 	add	objptr, #37
04050     07 D7 02 F1 | 	add	local55, objptr
04054                 | '     portaGlissando[i]         := 0
04054     6B 01 48 FC | 	wrbyte	#0, local55
04058     AF D8 02 FB | 	rdlong	local56, fp
0405c     04 0E 06 F1 | 	add	objptr, #4
04060     07 D9 02 F1 | 	add	local56, objptr
04064                 | '     vibratoType[i]            := 0
04064     6C 01 48 FC | 	wrbyte	#0, local56
04068     AF DA 02 FB | 	rdlong	local57, fp
0406c     04 0E 06 F1 | 	add	objptr, #4
04070     07 DB 02 F1 | 	add	local57, objptr
04074                 | '     tremoloType[i]            := 0
04074     6D 01 48 FC | 	wrbyte	#0, local57
04078     AF DC 02 FB | 	rdlong	local58, fp
0407c     39 0E 86 F1 | 	sub	objptr, #57
04080     07 DD 02 F1 | 	add	local58, objptr
04084                 | '     tremoloPos[i]             := 0
04084     6E 01 48 FC | 	wrbyte	#0, local58
04088     AF DE 02 FB | 	rdlong	local59, fp
0408c     02 DE 66 F0 | 	shl	local59, #2
04090     7C 0E 86 F1 | 	sub	objptr, #124
04094     07 DF 02 F1 | 	add	local59, objptr
04098                 | '     deltaVolume[i]            := 0
04098     6F 01 68 FC | 	wrlong	#0, local59
0409c     AF E0 02 FB | 	rdlong	local60, fp
040a0     02 E0 66 F0 | 	shl	local60, #2
040a4     20 0E 86 F1 | 	sub	objptr, #32
040a8     07 E1 02 F1 | 	add	local60, objptr
040ac                 | '     deltaPeriod[i]            := 0
040ac     70 01 68 FC | 	wrlong	#0, local60
040b0     AF E2 02 FB | 	rdlong	local61, fp
040b4     A0 0E 06 F1 | 	add	objptr, #160
040b8     07 E3 02 F1 | 	add	local61, objptr
040bc                 | '     resetTremolo[i]           := 0
040bc     71 01 48 FC | 	wrbyte	#0, local61
040c0     AF E4 02 FB | 	rdlong	local62, fp
040c4     04 0E 06 F1 | 	add	objptr, #4
040c8     07 E5 02 F1 | 	add	local62, objptr
040cc                 | '     resetVibrato[i]           := 0
040cc     72 01 48 FC | 	wrbyte	#0, local62
040d0     AF 84 02 FB | 	rdlong	local14, fp
040d4     01 84 06 F1 | 	add	local14, #1
040d8     AF 84 62 FC | 	wrlong	local14, fp
040dc     08 5E 85 F1 | 	sub	fp, #8
040e0     04 84 5E F2 | 	cmps	local14, #4 wcz
040e4     93 0F 86 F1 | 	sub	objptr, #403
040e8     7C FD 9F CD |  if_b	jmp	#LR__0144
040ec     AF F0 03 F6 | 	mov	ptra, fp
040f0     BF 00 A0 FD | 	call	#popregs_
040f4                 | _trackerplayer_spin2_initModule_ret
040f4     2D 00 64 FD | 	ret
040f8                 | 
040f8                 | ' 
040f8                 | ' 
040f8                 | ' ' This routine needs to be ticked X number of times per second
040f8                 | ' ' in order to advance the tracker play routine
040f8                 | ' '
040f8                 | ' PUB tick() | channel, sampleNumber, period, effect, i
040f8                 | _trackerplayer_spin2_tick
040f8     12 5A 05 F6 | 	mov	COUNT_, #18
040fc     B0 00 A0 FD | 	call	#pushregs_
04100     30 F0 07 F1 | 	add	ptra, #48
04104                 | ' 
04104                 | '   if currentSongSpeed == 0
04104     A4 0E 06 F1 | 	add	objptr, #164
04108     07 6B CA FA | 	rdbyte	local01, objptr wz
0410c     A4 0E 86 F1 | 	sub	objptr, #164
04110                 | '     return
04110     34 03 90 AD |  if_e	jmp	#LR__0156
04114                 | ' 
04114                 | '   ' Iterate over the channels and process everything
04114                 | '   repeat channel from 0 to LAST_CHANNEL
04114     AF 00 68 FC | 	wrlong	#0, fp
04118                 | LR__0145
04118     04 5E 05 F1 | 	add	fp, #4
0411c     AF 62 02 F6 | 	mov	arg04, fp
04120     04 5E 05 F1 | 	add	fp, #4
04124     AF 64 02 F6 | 	mov	arg05, fp
04128     04 5E 05 F1 | 	add	fp, #4
0412c     AF 66 02 F6 | 	mov	arg06, fp
04130     0C 5E 85 F1 | 	sub	fp, #12
04134                 | ' 
04134                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
04134     AF 5C 02 FB | 	rdlong	arg01, fp
04138     A3 0E 06 F1 | 	add	objptr, #163
0413c     07 5F C2 FA | 	rdbyte	arg02, objptr
04140     01 0E 86 F1 | 	sub	objptr, #1
04144     07 61 C2 FA | 	rdbyte	arg03, objptr
04148     7F 5E 06 F5 | 	and	arg02, #127
0414c     0C 0E 86 F1 | 	sub	objptr, #12
04150     07 6D 02 FB | 	rdlong	local02, objptr
04154     36 5F 02 F1 | 	add	arg02, local02
04158                 | ' 
04158                 | '   ' Get the note data for a specific channel/song position/pattern row
04158                 | '   patternNumber := byte[songPositionsLut][position & 127]
04158     2F 6F C2 FA | 	rdbyte	local03, arg02
0415c     0A 6E 66 F0 | 	shl	local03, #10
04160     04 0E 86 F1 | 	sub	objptr, #4
04164     07 71 02 FB | 	rdlong	local04, objptr
04168     92 0E 86 F1 | 	sub	objptr, #146
0416c     37 71 02 F1 | 	add	local04, local03
04170                 | '   patternPtr    := patternsData + (patternNumber << 10)
04170     3F 60 06 F5 | 	and	arg03, #63
04174     04 60 66 F0 | 	shl	arg03, #4
04178     30 71 02 F1 | 	add	local04, arg03
0417c     03 5C 06 F5 | 	and	arg01, #3
04180     02 5C 66 F0 | 	shl	arg01, #2
04184     2E 71 02 F1 | 	add	local04, arg01
04188                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
04188     38 73 C2 FA | 	rdbyte	local05, local04
0418c     18 72 66 F0 | 	shl	local05, #24
04190     01 70 06 F1 | 	add	local04, #1
04194     38 75 C2 FA | 	rdbyte	local06, local04
04198     10 74 66 F0 | 	shl	local06, #16
0419c     3A 73 42 F5 | 	or	local05, local06
041a0     01 70 06 F1 | 	add	local04, #1
041a4     38 77 C2 FA | 	rdbyte	local07, local04
041a8     08 76 66 F0 | 	shl	local07, #8
041ac     3B 73 42 F5 | 	or	local05, local07
041b0     01 70 06 F1 | 	add	local04, #1
041b4     38 79 C2 FA | 	rdbyte	local08, local04
041b8     3C 73 42 F5 | 	or	local05, local08
041bc                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
041bc     39 7B 02 F6 | 	mov	local09, local05
041c0     0C 7A 46 F0 | 	shr	local09, #12
041c4     0F 7A 06 F5 | 	and	local09, #15
041c8     39 7D 02 F6 | 	mov	local10, local05
041cc     18 7C 46 F0 | 	shr	local10, #24
041d0     F0 7C 06 F5 | 	and	local10, #240
041d4     3E 7B 42 F5 | 	or	local09, local10
041d8                 | ' 
041d8                 | '   ' Extract the different sub parts from the data
041d8                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
041d8     31 7B 62 FC | 	wrlong	local09, arg04
041dc     39 7F 02 F6 | 	mov	local11, local05
041e0     10 7E 46 F0 | 	shr	local11, #16
041e4     07 00 00 FF 
041e8     FF 7F 06 F5 | 	and	local11, ##4095
041ec                 | '   long[period]       :=  (data >> 16) & $FFF
041ec     32 7F 62 FC | 	wrlong	local11, arg05
041f0     07 00 00 FF 
041f4     FF 73 06 F5 | 	and	local05, ##4095
041f8                 | '   long[effect]       :=   data & $FFF
041f8     33 73 62 FC | 	wrlong	local05, arg06
041fc                 | '     processChannel(channel, sampleNumber, period, effect)
041fc     AF 5C 02 FB | 	rdlong	arg01, fp
04200     04 5E 05 F1 | 	add	fp, #4
04204     AF 5E 02 FB | 	rdlong	arg02, fp
04208     04 5E 05 F1 | 	add	fp, #4
0420c     AF 60 02 FB | 	rdlong	arg03, fp
04210     04 5E 05 F1 | 	add	fp, #4
04214     AF 62 02 FB | 	rdlong	arg04, fp
04218     0C 5E 85 F1 | 	sub	fp, #12
0421c     0C 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
04220     AF 80 02 FB | 	rdlong	local12, fp
04224     01 80 06 F1 | 	add	local12, #1
04228     AF 80 62 FC | 	wrlong	local12, fp
0422c     04 80 5E F2 | 	cmps	local12, #4 wcz
04230     E4 FE 9F CD |  if_b	jmp	#LR__0145
04234                 | ' 
04234                 | '   ' Incrementation the main counter that drives the whole play routine
04234                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04234     A1 0E 06 F1 | 	add	objptr, #161
04238     07 6B C2 FA | 	rdbyte	local01, objptr
0423c     01 6A 06 F1 | 	add	local01, #1
04240     07 6B 42 FC | 	wrbyte	local01, objptr
04244     03 0E 06 F1 | 	add	objptr, #3
04248     07 83 C2 FA | 	rdbyte	local13, objptr
0424c     01 0E 06 F1 | 	add	objptr, #1
04250     07 85 C2 FA | 	rdbyte	local14, objptr
04254     42 83 02 F1 | 	add	local13, local14
04258     04 0E 86 F1 | 	sub	objptr, #4
0425c     07 87 C2 FA | 	rdbyte	local15, objptr
04260     A1 0E 86 F1 | 	sub	objptr, #161
04264     41 87 5A F2 | 	cmps	local15, local13 wcz
04268                 | '     tickCounter := 0
04268     A1 0E 06 31 |  if_ae	add	objptr, #161
0426c     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04270     A1 0E 86 31 |  if_ae	sub	objptr, #161
04274                 | ' 
04274                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
04274                 | '   if tickCounter == 0
04274     A1 0E 06 F1 | 	add	objptr, #161
04278     07 6B CA FA | 	rdbyte	local01, objptr wz
0427c     A1 0E 86 F1 | 	sub	objptr, #161
04280     C4 01 90 5D |  if_ne	jmp	#LR__0155
04284                 | ' 
04284                 | '     ' Handle the "pattern repeat" command, "E6"
04284                 | '     if cmdE6_updatePositionCommon
04284     F5 0F 06 F1 | 	add	objptr, #501
04288     07 6B CA FA | 	rdbyte	local01, objptr wz
0428c     F5 0F 86 F1 | 	sub	objptr, #501
04290     8C 00 90 AD |  if_e	jmp	#LR__0149
04294                 | '       repeat i from 0 to LAST_CHANNEL
04294     10 5E 05 F1 | 	add	fp, #16
04298     AF 00 68 FC | 	wrlong	#0, fp
0429c     10 5E 85 F1 | 	sub	fp, #16
042a0     D0 BD 9F FE | 	loc	pa,	#(@LR__0148-@LR__0146)
042a4     93 00 A0 FD | 	call	#FCACHE_LOAD_
042a8                 | LR__0146
042a8                 | '         if cmdE6_updatePosition[i]
042a8     10 5E 05 F1 | 	add	fp, #16
042ac     AF 80 02 FB | 	rdlong	local12, fp
042b0     10 5E 85 F1 | 	sub	fp, #16
042b4     F1 0F 06 F1 | 	add	objptr, #497
042b8     07 81 02 F1 | 	add	local12, objptr
042bc     40 85 CA FA | 	rdbyte	local14, local12 wz
042c0     F1 0F 86 F1 | 	sub	objptr, #497
042c4     24 00 90 AD |  if_e	jmp	#LR__0147
042c8     10 5E 05 F1 | 	add	fp, #16
042cc     AF 88 02 FB | 	rdlong	local16, fp
042d0     10 5E 85 F1 | 	sub	fp, #16
042d4     E9 0F 06 F1 | 	add	objptr, #489
042d8     07 89 02 F1 | 	add	local16, objptr
042dc                 | '           patternRow := cmdE6_memory[i]
042dc     44 81 C2 FA | 	rdbyte	local12, local16
042e0     47 0F 86 F1 | 	sub	objptr, #327
042e4     07 81 42 FC | 	wrbyte	local12, objptr
042e8     A2 0E 86 F1 | 	sub	objptr, #162
042ec                 | LR__0147
042ec     10 5E 05 F1 | 	add	fp, #16
042f0     AF 8A 02 FB | 	rdlong	local17, fp
042f4     F1 0F 06 F1 | 	add	objptr, #497
042f8     07 8B 02 F1 | 	add	local17, objptr
042fc                 | '         cmdE6_updatePosition[i] := false
042fc     45 01 48 FC | 	wrbyte	#0, local17
04300     AF 80 02 FB | 	rdlong	local12, fp
04304     01 80 06 F1 | 	add	local12, #1
04308     AF 80 62 FC | 	wrlong	local12, fp
0430c     10 5E 85 F1 | 	sub	fp, #16
04310     04 80 5E F2 | 	cmps	local12, #4 wcz
04314     F1 0F 86 F1 | 	sub	objptr, #497
04318     8C FF 9F CD |  if_b	jmp	#LR__0146
0431c                 | LR__0148
0431c     CC 00 90 FD | 	jmp	#LR__0153
04320                 | LR__0149
04320                 | ' 
04320                 | '     ' Handle the "skip to next pattern with offset command", "D"
04320                 | '     elseif cmdD_updatePosition
04320     E6 0F 06 F1 | 	add	objptr, #486
04324     07 6B CA FA | 	rdbyte	local01, objptr wz
04328     E6 0F 86 F1 | 	sub	objptr, #486
0432c     64 00 90 AD |  if_e	jmp	#LR__0150
04330                 | '       if ++songPosition >= songLength
04330     A3 0E 06 F1 | 	add	objptr, #163
04334     07 6B C2 FA | 	rdbyte	local01, objptr
04338     01 6A 06 F1 | 	add	local01, #1
0433c     07 6B 42 FC | 	wrbyte	local01, objptr
04340     07 83 C2 FA | 	rdbyte	local13, objptr
04344     09 0E 86 F1 | 	sub	objptr, #9
04348     07 85 C2 FA | 	rdbyte	local14, objptr
0434c     9A 0E 86 F1 | 	sub	objptr, #154
04350     42 83 5A F2 | 	cmps	local13, local14 wcz
04354                 | '         songPosition := 0
04354     A3 0E 06 31 |  if_ae	add	objptr, #163
04358     07 01 48 3C |  if_ae	wrbyte	#0, objptr
0435c     A3 0E 86 31 |  if_ae	sub	objptr, #163
04360     E4 0F 06 F1 | 	add	objptr, #484
04364     07 81 C2 FA | 	rdbyte	local12, objptr
04368     40 8D 02 F6 | 	mov	local18, local12
0436c     02 8C 66 F0 | 	shl	local18, #2
04370     40 8D 02 F1 | 	add	local18, local12
04374     01 8C 66 F0 | 	shl	local18, #1
04378     01 0E 06 F1 | 	add	objptr, #1
0437c     07 81 C2 FA | 	rdbyte	local12, objptr
04380     40 8D 02 F1 | 	add	local18, local12
04384                 | ' 
04384                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
04384     43 0F 86 F1 | 	sub	objptr, #323
04388     07 8D 42 FC | 	wrbyte	local18, objptr
0438c     A2 0E 86 F1 | 	sub	objptr, #162
04390                 | ' 
04390                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
04390                 | '     else
04390     58 00 90 FD | 	jmp	#LR__0152
04394                 | LR__0150
04394                 | '       if ++patternRow >= PATTERN_LENGTH
04394     A2 0E 06 F1 | 	add	objptr, #162
04398     07 6B C2 FA | 	rdbyte	local01, objptr
0439c     01 6A 06 F1 | 	add	local01, #1
043a0     07 6B 42 FC | 	wrbyte	local01, objptr
043a4     07 83 C2 FA | 	rdbyte	local13, objptr
043a8     A2 0E 86 F1 | 	sub	objptr, #162
043ac     40 82 5E F2 | 	cmps	local13, #64 wcz
043b0     38 00 90 CD |  if_b	jmp	#LR__0151
043b4                 | '         patternRow := 0
043b4     A2 0E 06 F1 | 	add	objptr, #162
043b8     07 01 48 FC | 	wrbyte	#0, objptr
043bc                 | ' 
043bc                 | '         if ++songPosition >= songLength
043bc     01 0E 06 F1 | 	add	objptr, #1
043c0     07 6B C2 FA | 	rdbyte	local01, objptr
043c4     01 6A 06 F1 | 	add	local01, #1
043c8     07 6B 42 FC | 	wrbyte	local01, objptr
043cc     07 83 C2 FA | 	rdbyte	local13, objptr
043d0     09 0E 86 F1 | 	sub	objptr, #9
043d4     07 85 C2 FA | 	rdbyte	local14, objptr
043d8     9A 0E 86 F1 | 	sub	objptr, #154
043dc     42 83 5A F2 | 	cmps	local13, local14 wcz
043e0                 | '           songPosition := 0
043e0     A3 0E 06 31 |  if_ae	add	objptr, #163
043e4     07 01 48 3C |  if_ae	wrbyte	#0, objptr
043e8     A3 0E 86 31 |  if_ae	sub	objptr, #163
043ec                 | LR__0151
043ec                 | LR__0152
043ec                 | LR__0153
043ec                 | ' 
043ec                 | '     ' Handle "jump to song position" command, "B"
043ec                 | '     if cmdB_updatePosition
043ec     E8 0F 06 F1 | 	add	objptr, #488
043f0     07 6B CA FA | 	rdbyte	local01, objptr wz
043f4     E8 0F 86 F1 | 	sub	objptr, #488
043f8     28 00 90 AD |  if_e	jmp	#LR__0154
043fc                 | ' 
043fc                 | '       songPosition := cmdB_memoryZ
043fc     E7 0F 06 F1 | 	add	objptr, #487
04400     07 6B C2 FA | 	rdbyte	local01, objptr
04404     44 0F 86 F1 | 	sub	objptr, #324
04408     07 6B 42 FC | 	wrbyte	local01, objptr
0440c                 | ' 
0440c                 | '       ifnot cmdD_updatePosition
0440c     43 0F 06 F1 | 	add	objptr, #323
04410     07 6B CA FA | 	rdbyte	local01, objptr wz
04414     E6 0F 86 F1 | 	sub	objptr, #486
04418                 | '         patternRow := 0
04418     A2 0E 06 A1 |  if_e	add	objptr, #162
0441c     07 01 48 AC |  if_e	wrbyte	#0, objptr
04420     A2 0E 86 A1 |  if_e	sub	objptr, #162
04424                 | LR__0154
04424                 | ' 
04424                 | '     ' We need to be sure that all positioning commands are reset for the next tick
04424                 | '     cmdE6_updatePositionCommon := false
04424     F5 0F 06 F1 | 	add	objptr, #501
04428     07 01 48 FC | 	wrbyte	#0, objptr
0442c                 | '     cmdB_updatePosition := false
0442c     0D 0E 86 F1 | 	sub	objptr, #13
04430     07 01 48 FC | 	wrbyte	#0, objptr
04434                 | '     cmdD_updatePosition := false
04434     02 0E 86 F1 | 	sub	objptr, #2
04438     07 01 48 FC | 	wrbyte	#0, objptr
0443c                 | '     patternDelay := 0
0443c     41 0F 86 F1 | 	sub	objptr, #321
04440     07 01 48 FC | 	wrbyte	#0, objptr
04444     A5 0E 86 F1 | 	sub	objptr, #165
04448                 | LR__0155
04448                 | LR__0156
04448     AF F0 03 F6 | 	mov	ptra, fp
0444c     BF 00 A0 FD | 	call	#popregs_
04450                 | _trackerplayer_spin2_tick_ret
04450     2D 00 64 FD | 	ret
04454                 | 
04454                 | ' 
04454                 | ' 
04454                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
04454                 | _trackerplayer_spin2_amigaPeriodToNote
04454                 | ' 
04454                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
04454     00 30 06 F6 | 	mov	_var01, #0
04458     F0 BB 9F FE | 	loc	pa,	#(@LR__0158-@LR__0157)
0445c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04460                 | LR__0157
04460                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
04460     06 00 00 FF 
04464     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04468     14 33 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
0446c     2F 35 02 F6 | 	mov	_var03, arg02
04470     03 34 66 F0 | 	shl	_var03, #3
04474     2F 35 02 F1 | 	add	_var03, arg02
04478     03 34 66 F0 | 	shl	_var03, #3
0447c     1A 33 02 F1 | 	add	_var02, _var03
04480     18 37 02 F6 | 	mov	_var04, _var01
04484     01 36 66 F0 | 	shl	_var04, #1
04488     19 37 02 F1 | 	add	_var04, _var02
0448c     1B 39 E2 FA | 	rdword	_var05, _var04
04490     2E 39 5A F2 | 	cmps	_var05, arg01 wcz
04494                 | '       quit
04494     06 00 00 FF 
04498     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
0449c     0C 00 90 ED |  if_be	jmp	#LR__0159
044a0     01 30 06 F1 | 	add	_var01, #1
044a4     24 30 5E F2 | 	cmps	_var01, #36 wcz
044a8     B4 FF 9F CD |  if_b	jmp	#LR__0157
044ac                 | LR__0158
044ac                 | LR__0159
044ac                 | ' 
044ac                 | '   return i
044ac     18 2B 02 F6 | 	mov	result1, _var01
044b0                 | _trackerplayer_spin2_amigaPeriodToNote_ret
044b0     2D 00 64 FD | 	ret
044b4                 | 
044b4                 | ' 
044b4                 | ' 
044b4                 | ' PRI retunePeriod(period, fTune) | noteNumber
044b4                 | _trackerplayer_spin2_retunePeriod
044b4     06 5A 05 F6 | 	mov	COUNT_, #6
044b8     B0 00 A0 FD | 	call	#pushregs_
044bc     2E 6B 02 F6 | 	mov	local01, arg01
044c0     2F 6D 02 F6 | 	mov	local02, arg02
044c4                 | ' 
044c4                 | '   if period > 0 and fTune < 16
044c4     00 6A 5E F2 | 	cmps	local01, #0 wcz
044c8     50 00 90 ED |  if_be	jmp	#LR__0160
044cc     10 6C 5E F2 | 	cmps	local02, #16 wcz
044d0     48 00 90 3D |  if_ae	jmp	#LR__0160
044d4                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
044d4     35 5D E2 FA | 	rdword	arg01, local01
044d8     00 5E 06 F6 | 	mov	arg02, #0
044dc     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
044e0     15 6F 02 F6 | 	mov	local03, result1
044e4     06 00 00 FF 
044e8     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
044ec     14 71 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
044f0     36 73 02 F6 | 	mov	local05, local02
044f4     03 72 66 F0 | 	shl	local05, #3
044f8     36 73 02 F1 | 	add	local05, local02
044fc     03 72 66 F0 | 	shl	local05, #3
04500     39 71 02 F1 | 	add	local04, local05
04504     01 6E 66 F0 | 	shl	local03, #1
04508     38 6F 02 F1 | 	add	local03, local04
0450c                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
0450c     37 75 E2 FA | 	rdword	local06, local03
04510     35 75 52 FC | 	wrword	local06, local01
04514     06 00 00 FF 
04518     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
0451c                 | LR__0160
0451c     AF F0 03 F6 | 	mov	ptra, fp
04520     BF 00 A0 FD | 	call	#popregs_
04524                 | _trackerplayer_spin2_retunePeriod_ret
04524     2D 00 64 FD | 	ret
04528                 | 
04528                 | ' 
04528                 | ' 
04528                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
04528                 | _trackerplayer_spin2_getSampleInfo
04528     2E 31 0A F6 | 	mov	_var01, arg01 wz
0452c                 | ' 
0452c                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
0452c     08 00 90 AD |  if_e	jmp	#LR__0161
04530     1F 30 5E F2 | 	cmps	_var01, #31 wcz
04534     08 00 90 ED |  if_be	jmp	#LR__0162
04538                 | LR__0161
04538                 | '     long[samplePtr] := 0
04538     2F 01 68 FC | 	wrlong	#0, arg02
0453c                 | '     return
0453c     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
04540                 | LR__0162
04540                 | ' 
04540                 | '   sampleNumber--
04540     01 30 86 F1 | 	sub	_var01, #1
04544     18 33 02 F6 | 	mov	_var02, _var01
04548     04 32 66 F0 | 	shl	_var02, #4
0454c     18 33 82 F1 | 	sub	_var02, _var01
04550     01 32 66 F0 | 	shl	_var02, #1
04554     0A 0E 06 F1 | 	add	objptr, #10
04558     07 35 02 FB | 	rdlong	_var03, objptr
0455c     19 35 02 F1 | 	add	_var03, _var02
04560                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
04560     1A 37 02 F6 | 	mov	_var04, _var03
04564     16 36 06 F1 | 	add	_var04, #22
04568     1B 39 C2 FA | 	rdbyte	_var05, _var04
0456c     08 38 66 F0 | 	shl	_var05, #8
04570     1A 3B 02 F6 | 	mov	_var06, _var03
04574     17 3A 06 F1 | 	add	_var06, #23
04578     1D 3D C2 FA | 	rdbyte	_var07, _var06
0457c     1E 39 42 F5 | 	or	_var05, _var07
04580     01 38 66 F0 | 	shl	_var05, #1
04584                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
04584     30 39 62 FC | 	wrlong	_var05, arg03
04588     1A 3F 02 F6 | 	mov	_var08, _var03
0458c     18 3E 06 F1 | 	add	_var08, #24
04590                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
04590     1F 41 C2 FA | 	rdbyte	_var09, _var08
04594     31 41 62 FC | 	wrlong	_var09, arg04
04598     1A 43 02 F6 | 	mov	_var10, _var03
0459c     19 42 06 F1 | 	add	_var10, #25
045a0                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
045a0     21 41 C2 FA | 	rdbyte	_var09, _var10
045a4     32 41 62 FC | 	wrlong	_var09, arg05
045a8     1A 45 02 F6 | 	mov	_var11, _var03
045ac     1A 44 06 F1 | 	add	_var11, #26
045b0     22 47 C2 FA | 	rdbyte	_var12, _var11
045b4     08 46 66 F0 | 	shl	_var12, #8
045b8     1A 49 02 F6 | 	mov	_var13, _var03
045bc     1B 48 06 F1 | 	add	_var13, #27
045c0     24 3D C2 FA | 	rdbyte	_var07, _var13
045c4     1E 47 42 F5 | 	or	_var12, _var07
045c8     01 46 66 F0 | 	shl	_var12, #1
045cc                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
045cc     33 47 62 FC | 	wrlong	_var12, arg06
045d0     1A 4B 02 F6 | 	mov	_var14, _var03
045d4     1C 4A 06 F1 | 	add	_var14, #28
045d8     25 4D C2 FA | 	rdbyte	_var15, _var14
045dc     08 4C 66 F0 | 	shl	_var15, #8
045e0     1D 34 06 F1 | 	add	_var03, #29
045e4     1A 3D C2 FA | 	rdbyte	_var07, _var03
045e8     1E 4D 42 F5 | 	or	_var15, _var07
045ec     01 4C 66 F0 | 	shl	_var15, #1
045f0                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
045f0     34 4D 62 FC | 	wrlong	_var15, arg07
045f4     02 30 66 F0 | 	shl	_var01, #2
045f8     08 0E 06 F1 | 	add	objptr, #8
045fc     07 31 02 F1 | 	add	_var01, objptr
04600                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
04600     18 41 02 FB | 	rdlong	_var09, _var01
04604     2F 41 62 FC | 	wrlong	_var09, arg02
04608                 | ' 
04608                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
04608     34 41 02 FB | 	rdlong	_var09, arg07
0460c     02 40 0E F2 | 	cmp	_var09, #2 wz
04610     12 0E 86 F1 | 	sub	objptr, #18
04614     08 00 90 5D |  if_ne	jmp	#LR__0163
04618     33 3D 0A FB | 	rdlong	_var07, arg06 wz
0461c                 | '     long[repeatLength] := 1
0461c     34 03 68 AC |  if_e	wrlong	#1, arg07
04620                 | LR__0163
04620                 | _trackerplayer_spin2_getSampleInfo_ret
04620     2D 00 64 FD | 	ret
04624                 | 
04624                 | ' 
04624                 | ' 
04624                 | ' PRI triggerNote(channel)
04624                 | _trackerplayer_spin2_triggerNote
04624     2E 31 02 F6 | 	mov	_var01, arg01
04628     02 30 66 F0 | 	shl	_var01, #2
0462c     47 0F 06 F1 | 	add	objptr, #327
04630     07 31 02 F1 | 	add	_var01, objptr
04634     2E 33 02 F6 | 	mov	_var02, arg01
04638     90 0E 86 F1 | 	sub	objptr, #144
0463c                 | ' 
0463c                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
0463c     18 35 02 FB | 	rdlong	_var03, _var01
04640     07 33 02 F1 | 	add	_var02, objptr
04644     19 35 42 FC | 	wrbyte	_var03, _var02
04648     2E 37 02 F6 | 	mov	_var04, arg01
0464c     02 36 66 F0 | 	shl	_var04, #2
04650     80 0E 06 F1 | 	add	objptr, #128
04654     07 37 02 F1 | 	add	_var04, objptr
04658     2E 39 02 F6 | 	mov	_var05, arg01
0465c     02 38 66 F0 | 	shl	_var05, #2
04660     90 0E 86 F1 | 	sub	objptr, #144
04664                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
04664     1B 35 02 FB | 	rdlong	_var03, _var04
04668     07 39 02 F1 | 	add	_var05, objptr
0466c     1C 35 62 FC | 	wrlong	_var03, _var05
04670     2E 3B 02 F6 | 	mov	_var06, arg01
04674     02 3A 66 F0 | 	shl	_var06, #2
04678     80 0E 06 F1 | 	add	objptr, #128
0467c     07 3B 02 F1 | 	add	_var06, objptr
04680     2E 3D 02 F6 | 	mov	_var07, arg01
04684     02 3C 66 F0 | 	shl	_var07, #2
04688     48 0E 86 F1 | 	sub	objptr, #72
0468c                 | '   currPeriod[channel]       := lastSetPeriod[channel]
0468c     1D 35 02 FB | 	rdlong	_var03, _var06
04690     07 3D 02 F1 | 	add	_var07, objptr
04694     1E 35 62 FC | 	wrlong	_var03, _var07
04698     2E 3F 02 F6 | 	mov	_var08, arg01
0469c     02 3E 66 F0 | 	shl	_var08, #2
046a0     78 0E 06 F1 | 	add	objptr, #120
046a4     07 3F 02 F1 | 	add	_var08, objptr
046a8     2E 41 02 F6 | 	mov	_var09, arg01
046ac     01 40 66 F0 | 	shl	_var09, #1
046b0     9C 0E 86 F1 | 	sub	objptr, #156
046b4                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
046b4     1F 35 02 FB | 	rdlong	_var03, _var08
046b8     07 41 02 F1 | 	add	_var09, objptr
046bc     20 35 52 FC | 	wrword	_var03, _var09
046c0     2E 43 02 F6 | 	mov	_var10, arg01
046c4     02 42 66 F0 | 	shl	_var10, #2
046c8     AC 0E 06 F1 | 	add	objptr, #172
046cc     07 43 02 F1 | 	add	_var10, objptr
046d0     2E 45 02 F6 | 	mov	_var11, arg01
046d4     02 44 66 F0 | 	shl	_var11, #2
046d8     A4 0E 86 F1 | 	sub	objptr, #164
046dc                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
046dc     21 35 02 FB | 	rdlong	_var03, _var10
046e0     07 45 02 F1 | 	add	_var11, objptr
046e4     22 35 62 FC | 	wrlong	_var03, _var11
046e8     2E 47 02 F6 | 	mov	_var12, arg01
046ec     02 46 66 F0 | 	shl	_var12, #2
046f0     B4 0E 06 F1 | 	add	objptr, #180
046f4     07 47 02 F1 | 	add	_var12, objptr
046f8     2E 49 02 F6 | 	mov	_var13, arg01
046fc     01 48 66 F0 | 	shl	_var13, #1
04700     A0 0E 86 F1 | 	sub	objptr, #160
04704                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
04704     23 35 02 FB | 	rdlong	_var03, _var12
04708     07 49 02 F1 | 	add	_var13, objptr
0470c     24 35 52 FC | 	wrword	_var03, _var13
04710     1F 0F 06 F1 | 	add	objptr, #287
04714     07 5D 02 F1 | 	add	arg01, objptr
04718     2E 4B C2 FA | 	rdbyte	_var14, arg01
0471c     01 4A 06 F1 | 	add	_var14, #1
04720                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
04720     2E 4B 42 FC | 	wrbyte	_var14, arg01
04724     F6 0F 86 F1 | 	sub	objptr, #502
04728                 | _trackerplayer_spin2_triggerNote_ret
04728     2D 00 64 FD | 	ret
0472c                 | 
0472c                 | ' 
0472c                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
0472c                 | _trackerplayer_spin2_processChannel
0472c     31 5A 05 F6 | 	mov	COUNT_, #49
04730     B0 00 A0 FD | 	call	#pushregs_
04734     D0 F0 07 F1 | 	add	ptra, #208
04738     AF 5C 62 FC | 	wrlong	arg01, fp
0473c     04 5E 05 F1 | 	add	fp, #4
04740     AF 5E 62 FC | 	wrlong	arg02, fp
04744     04 5E 05 F1 | 	add	fp, #4
04748     AF 60 62 FC | 	wrlong	arg03, fp
0474c     04 5E 05 F1 | 	add	fp, #4
04750     AF 62 62 FC | 	wrlong	arg04, fp
04754     0C 5E 85 F1 | 	sub	fp, #12
04758                 | ' 
04758                 | '   channel := channel & 3
04758     AF 6A 02 FB | 	rdlong	local01, fp
0475c     03 6A 06 F5 | 	and	local01, #3
04760     AF 6A 62 FC | 	wrlong	local01, fp
04764     0C 5E 05 F1 | 	add	fp, #12
04768     AF 6C 02 FB | 	rdlong	local02, fp
0476c     08 6C 46 F0 | 	shr	local02, #8
04770     36 6F 02 F6 | 	mov	local03, local02
04774     0F 6E 06 F5 | 	and	local03, #15
04778                 | '   cmd     := (effect >> 8) & $F
04778     BA 0F 06 F1 | 	add	objptr, #442
0477c     07 6F 42 FC | 	wrbyte	local03, objptr
04780     AF 70 02 FB | 	rdlong	local04, fp
04784     04 70 46 F0 | 	shr	local04, #4
04788     38 73 02 F6 | 	mov	local05, local04
0478c     0F 72 06 F5 | 	and	local05, #15
04790                 | '   x       := (effect >> 4) & $F
04790     03 0E 86 F1 | 	sub	objptr, #3
04794     07 73 42 FC | 	wrbyte	local05, objptr
04798     AF 74 02 FB | 	rdlong	local06, fp
0479c     0F 74 06 F5 | 	and	local06, #15
047a0                 | '   y       := (effect     ) & $F
047a0     01 0E 06 F1 | 	add	objptr, #1
047a4     07 75 42 FC | 	wrbyte	local06, objptr
047a8     AF 76 02 FB | 	rdlong	local07, fp
047ac     0C 5E 85 F1 | 	sub	fp, #12
047b0     FF 76 06 F5 | 	and	local07, #255
047b4                 | '   z       := (effect     ) & $FF
047b4     01 0E 06 F1 | 	add	objptr, #1
047b8     07 77 42 FC | 	wrbyte	local07, objptr
047bc                 | ' 
047bc                 | '   ' Handle everything that executes on "tick zero"
047bc                 | '   if tickCounter == 0
047bc     18 0F 86 F1 | 	sub	objptr, #280
047c0     07 6B CA FA | 	rdbyte	local01, objptr wz
047c4     A1 0E 86 F1 | 	sub	objptr, #161
047c8     F0 03 90 5D |  if_ne	jmp	#LR__0174
047cc     AF 78 02 FB | 	rdlong	local08, fp
047d0     02 78 66 F0 | 	shl	local08, #2
047d4     EF 0E 06 F1 | 	add	objptr, #239
047d8     07 79 02 F1 | 	add	local08, objptr
047dc                 | ' 
047dc                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
047dc                 | '     deltaPeriod[channel] := 0
047dc     3C 01 68 FC | 	wrlong	#0, local08
047e0     AF 7A 02 FB | 	rdlong	local09, fp
047e4     02 7A 66 F0 | 	shl	local09, #2
047e8     20 0E 06 F1 | 	add	objptr, #32
047ec     07 7B 02 F1 | 	add	local09, objptr
047f0                 | '     deltaVolume[channel] := 0
047f0     3D 01 68 FC | 	wrlong	#0, local09
047f4                 | ' 
047f4                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
047f4                 | '     if sampleNumber > 0
047f4     04 5E 05 F1 | 	add	fp, #4
047f8     AF 6A 02 FB | 	rdlong	local01, fp
047fc     04 5E 85 F1 | 	sub	fp, #4
04800     00 6A 5E F2 | 	cmps	local01, #0 wcz
04804     0F 0F 86 F1 | 	sub	objptr, #271
04808     20 00 90 ED |  if_be	jmp	#LR__0164
0480c     AF 7C 02 FB | 	rdlong	local10, fp
04810     E0 0F 06 F1 | 	add	objptr, #480
04814     07 7D 02 F1 | 	add	local10, objptr
04818                 | '       sampleNumber_memory[channel] := sampleNumber
04818     04 5E 05 F1 | 	add	fp, #4
0481c     AF 6A 02 FB | 	rdlong	local01, fp
04820     04 5E 85 F1 | 	sub	fp, #4
04824     3E 6B 42 FC | 	wrbyte	local01, local10
04828     E0 0F 86 F1 | 	sub	objptr, #480
0482c                 | LR__0164
0482c     AF 7E 02 FB | 	rdlong	local11, fp
04830     E0 0F 06 F1 | 	add	objptr, #480
04834     07 7F 02 F1 | 	add	local11, objptr
04838     20 5E 05 F1 | 	add	fp, #32
0483c     AF 80 02 F6 | 	mov	local12, fp
04840     10 5E 85 F1 | 	sub	fp, #16
04844     AF 82 02 F6 | 	mov	local13, fp
04848     31 0E 86 F1 | 	sub	objptr, #49
0484c     07 85 02 F6 | 	mov	local14, objptr
04850     04 5E 05 F1 | 	add	fp, #4
04854     AF 86 02 F6 | 	mov	local15, fp
04858     04 5E 05 F1 | 	add	fp, #4
0485c     AF 88 02 F6 | 	mov	local16, fp
04860     04 5E 05 F1 | 	add	fp, #4
04864     AF 8A 02 F6 | 	mov	local17, fp
04868                 | ' 
04868                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
04868                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
04868     3F 5D C2 FA | 	rdbyte	arg01, local11
0486c     42 63 02 F6 | 	mov	arg04, local14
04870     43 8D 02 F6 | 	mov	local18, local15
04874     44 8F 02 F6 | 	mov	local19, local16
04878     45 91 02 F6 | 	mov	local20, local17
0487c     40 5F 02 F6 | 	mov	arg02, local12
04880     41 61 02 F6 | 	mov	arg03, local13
04884     46 65 02 F6 | 	mov	arg05, local18
04888     47 67 02 F6 | 	mov	arg06, local19
0488c     48 69 02 F6 | 	mov	arg07, local20
04890     AF 0F 86 F1 | 	sub	objptr, #431
04894     1C 5E 85 F1 | 	sub	fp, #28
04898     8C FC BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
0489c                 | ' 
0489c                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
0489c                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
0489c                 | '     if sampleNumber > 0
0489c     04 5E 05 F1 | 	add	fp, #4
048a0     AF 6A 02 FB | 	rdlong	local01, fp
048a4     04 5E 85 F1 | 	sub	fp, #4
048a8     00 6A 5E F2 | 	cmps	local01, #0 wcz
048ac     24 00 90 ED |  if_be	jmp	#LR__0165
048b0     AF 92 02 FB | 	rdlong	local21, fp
048b4     02 92 66 F0 | 	shl	local21, #2
048b8     FF 0E 06 F1 | 	add	objptr, #255
048bc     07 93 02 F1 | 	add	local21, objptr
048c0                 | '       currVolume[channel] := volume
048c0     14 5E 05 F1 | 	add	fp, #20
048c4     AF 6A 02 FB | 	rdlong	local01, fp
048c8     14 5E 85 F1 | 	sub	fp, #20
048cc     49 6B 62 FC | 	wrlong	local01, local21
048d0     FF 0E 86 F1 | 	sub	objptr, #255
048d4                 | LR__0165
048d4                 | ' 
048d4                 | '     ' Handle all commands that executes on "zero tick"
048d4                 | '     sampleOffset := 0
048d4     B3 0F 06 F1 | 	add	objptr, #435
048d8     07 01 68 FC | 	wrlong	#0, objptr
048dc     B3 0F 86 F1 | 	sub	objptr, #435
048e0                 | '     handleZeroTickCommands(channel)
048e0     AF 5C 02 FB | 	rdlong	arg01, fp
048e4     60 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
048e8                 | ' 
048e8                 | '     ' Prepare sample data for triggering (now or later)
048e8                 | '     if period > 0
048e8     08 5E 05 F1 | 	add	fp, #8
048ec     AF 6A 02 FB | 	rdlong	local01, fp
048f0     08 5E 85 F1 | 	sub	fp, #8
048f4     00 6A 5E F2 | 	cmps	local01, #0 wcz
048f8     C8 02 90 ED |  if_be	jmp	#LR__0175
048fc     08 5E 05 F1 | 	add	fp, #8
04900     AF 94 02 F6 | 	mov	local22, fp
04904                 | ' 
04904                 | '       retunePeriod(@period, fineTune)
04904     AF 0F 06 F1 | 	add	objptr, #431
04908     07 5F 02 FB | 	rdlong	arg02, objptr
0490c     AF 0F 86 F1 | 	sub	objptr, #431
04910     4A 5D 02 F6 | 	mov	arg01, local22
04914     08 5E 85 F1 | 	sub	fp, #8
04918     98 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
0491c     AF 96 02 FB | 	rdlong	local23, fp
04920     D3 0E 06 F1 | 	add	objptr, #211
04924     07 97 02 F1 | 	add	local23, objptr
04928                 | '       currFineTune[channel]        := fineTune
04928     DC 0E 06 F1 | 	add	objptr, #220
0492c     07 6B 02 FB | 	rdlong	local01, objptr
04930     4B 6B 42 FC | 	wrbyte	local01, local23
04934     AF 98 02 FB | 	rdlong	local24, fp
04938     02 98 66 F0 | 	shl	local24, #2
0493c     88 0E 86 F1 | 	sub	objptr, #136
04940     07 99 02 F1 | 	add	local24, objptr
04944                 | '       lastSetPeriod[channel]       := period
04944     08 5E 05 F1 | 	add	fp, #8
04948     AF 6A 02 FB | 	rdlong	local01, fp
0494c     4C 6B 62 FC | 	wrlong	local01, local24
04950     08 5E 85 F1 | 	sub	fp, #8
04954     AF 9A 02 FB | 	rdlong	local25, fp
04958     02 9A 66 F0 | 	shl	local25, #2
0495c     40 0E 06 F1 | 	add	objptr, #64
04960     07 9B 02 F1 | 	add	local25, objptr
04964                 | '       lastSetRepeatLength[channel] := repeatLength
04964     1C 5E 05 F1 | 	add	fp, #28
04968     AF 6A 02 FB | 	rdlong	local01, fp
0496c     4D 6B 62 FC | 	wrlong	local01, local25
04970     1C 5E 85 F1 | 	sub	fp, #28
04974     AF 9C 02 FB | 	rdlong	local26, fp
04978     02 9C 66 F0 | 	shl	local26, #2
0497c     10 0E 06 F1 | 	add	objptr, #16
04980     07 9D 02 F1 | 	add	local26, objptr
04984                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04984     18 5E 05 F1 | 	add	fp, #24
04988     AF 6A 02 FB | 	rdlong	local01, fp
0498c     4E 6B 62 FC | 	wrlong	local01, local26
04990     08 5E 05 F1 | 	add	fp, #8
04994     AF 9E 02 FB | 	rdlong	local27, fp
04998     20 5E 85 F1 | 	sub	fp, #32
0499c     3C 0E 06 F1 | 	add	objptr, #60
049a0     07 A1 02 FB | 	rdlong	local28, objptr
049a4     50 9F 02 F1 | 	add	local27, local28
049a8     AF A2 02 FB | 	rdlong	local29, fp
049ac     02 A2 66 F0 | 	shl	local29, #2
049b0     7C 0E 86 F1 | 	sub	objptr, #124
049b4     07 A3 02 F1 | 	add	local29, objptr
049b8                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
049b8     51 9F 62 FC | 	wrlong	local27, local29
049bc     AF A4 02 FB | 	rdlong	local30, fp
049c0     02 A4 66 F0 | 	shl	local30, #2
049c4     10 0E 06 F1 | 	add	objptr, #16
049c8     07 A5 02 F1 | 	add	local30, objptr
049cc                 | '       lastSetSampleNr[channel]     := sampleNumber
049cc     04 5E 05 F1 | 	add	fp, #4
049d0     AF 6A 02 FB | 	rdlong	local01, fp
049d4     52 6B 62 FC | 	wrlong	local01, local30
049d8                 | ' 
049d8                 | '       ' This calculates the correct sample length in all situations
049d8                 | '       if repeatLength > 2
049d8     18 5E 05 F1 | 	add	fp, #24
049dc     AF 6A 02 FB | 	rdlong	local01, fp
049e0     1C 5E 85 F1 | 	sub	fp, #28
049e4     02 6A 5E F2 | 	cmps	local01, #2 wcz
049e8     47 0F 86 F1 | 	sub	objptr, #327
049ec     20 00 90 ED |  if_be	jmp	#LR__0166
049f0     18 5E 05 F1 | 	add	fp, #24
049f4     AF A6 02 FB | 	rdlong	local31, fp
049f8     04 5E 05 F1 | 	add	fp, #4
049fc     AF A0 02 FB | 	rdlong	local28, fp
04a00     50 A7 02 F1 | 	add	local31, local28
04a04                 | '         sampleLength := repeatPoint + repeatLength
04a04     0C 5E 85 F1 | 	sub	fp, #12
04a08     AF A6 62 FC | 	wrlong	local31, fp
04a0c     10 5E 85 F1 | 	sub	fp, #16
04a10                 | LR__0166
04a10                 | ' 
04a10                 | '       if sampleLength - sampleOffset < 1
04a10     10 5E 05 F1 | 	add	fp, #16
04a14     AF 6A 02 FB | 	rdlong	local01, fp
04a18     10 5E 85 F1 | 	sub	fp, #16
04a1c     B3 0F 06 F1 | 	add	objptr, #435
04a20     07 A1 02 FB | 	rdlong	local28, objptr
04a24     B3 0F 86 F1 | 	sub	objptr, #435
04a28     50 6B 82 F1 | 	sub	local01, local28
04a2c     01 6A 5E F2 | 	cmps	local01, #1 wcz
04a30     1C 00 90 3D |  if_ae	jmp	#LR__0167
04a34     AF A8 02 FB | 	rdlong	local32, fp
04a38     02 A8 66 F0 | 	shl	local32, #2
04a3c     57 0F 06 F1 | 	add	objptr, #343
04a40     07 A9 02 F1 | 	add	local32, objptr
04a44                 | '         lastSetSampleLength[channel] := 1
04a44     54 03 68 FC | 	wrlong	#1, local32
04a48                 | '       else
04a48     57 0F 86 F1 | 	sub	objptr, #343
04a4c     30 00 90 FD | 	jmp	#LR__0168
04a50                 | LR__0167
04a50     10 5E 05 F1 | 	add	fp, #16
04a54     AF AA 02 FB | 	rdlong	local33, fp
04a58     10 5E 85 F1 | 	sub	fp, #16
04a5c     B3 0F 06 F1 | 	add	objptr, #435
04a60     07 A1 02 FB | 	rdlong	local28, objptr
04a64     50 AB 82 F1 | 	sub	local33, local28
04a68     AF AC 02 FB | 	rdlong	local34, fp
04a6c     02 AC 66 F0 | 	shl	local34, #2
04a70     5C 0E 86 F1 | 	sub	objptr, #92
04a74     07 AD 02 F1 | 	add	local34, objptr
04a78                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04a78     56 AB 62 FC | 	wrlong	local33, local34
04a7c     57 0F 86 F1 | 	sub	objptr, #343
04a80                 | LR__0168
04a80                 | ' 
04a80                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04a80                 | '       if sampleOffset > sampleLength
04a80     B3 0F 06 F1 | 	add	objptr, #435
04a84     07 6B 02 FB | 	rdlong	local01, objptr
04a88     B3 0F 86 F1 | 	sub	objptr, #435
04a8c     10 5E 05 F1 | 	add	fp, #16
04a90     AF A0 02 FB | 	rdlong	local28, fp
04a94     10 5E 85 F1 | 	sub	fp, #16
04a98     50 6B 5A F2 | 	cmps	local01, local28 wcz
04a9c     50 00 90 ED |  if_be	jmp	#LR__0169
04aa0     20 5E 05 F1 | 	add	fp, #32
04aa4     AF AE 02 FB | 	rdlong	local35, fp
04aa8     08 5E 85 F1 | 	sub	fp, #8
04aac     AF A0 02 FB | 	rdlong	local28, fp
04ab0     18 5E 85 F1 | 	sub	fp, #24
04ab4     50 AF 02 F1 | 	add	local35, local28
04ab8     AF B0 02 FB | 	rdlong	local36, fp
04abc     02 B0 66 F0 | 	shl	local36, #2
04ac0     37 0F 06 F1 | 	add	objptr, #311
04ac4     07 B1 02 F1 | 	add	local36, objptr
04ac8                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04ac8     58 AF 62 FC | 	wrlong	local35, local36
04acc     AF B2 02 FB | 	rdlong	local37, fp
04ad0     02 B2 66 F0 | 	shl	local37, #2
04ad4     20 0E 06 F1 | 	add	objptr, #32
04ad8     07 B3 02 F1 | 	add	local37, objptr
04adc                 | '         lastSetSampleLength[channel] := repeatLength
04adc     1C 5E 05 F1 | 	add	fp, #28
04ae0     AF 6A 02 FB | 	rdlong	local01, fp
04ae4     1C 5E 85 F1 | 	sub	fp, #28
04ae8     59 6B 62 FC | 	wrlong	local01, local37
04aec     57 0F 86 F1 | 	sub	objptr, #343
04af0                 | LR__0169
04af0                 | ' 
04af0                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04af0                 | '       ifnot cmd == $3 || cmd == $5
04af0     BA 0F 06 F1 | 	add	objptr, #442
04af4     07 6B C2 FA | 	rdbyte	local01, objptr
04af8     BA 0F 86 F1 | 	sub	objptr, #442
04afc     03 6A 0E F2 | 	cmp	local01, #3 wz
04b00     54 00 90 AD |  if_e	jmp	#LR__0172
04b04     BA 0F 06 F1 | 	add	objptr, #442
04b08     07 B5 C2 FA | 	rdbyte	local38, objptr
04b0c     BA 0F 86 F1 | 	sub	objptr, #442
04b10     5A A1 02 F6 | 	mov	local28, local38
04b14     05 A0 0E F2 | 	cmp	local28, #5 wz
04b18     3C 00 90 AD |  if_e	jmp	#LR__0172
04b1c                 | '         ifnot cmd == $E && x == $D
04b1c     BA 0F 06 F1 | 	add	objptr, #442
04b20     07 B7 C2 FA | 	rdbyte	local39, objptr
04b24     BA 0F 86 F1 | 	sub	objptr, #442
04b28     5B 6B 02 F6 | 	mov	local01, local39
04b2c     0E 6A 0E F2 | 	cmp	local01, #14 wz
04b30     18 00 90 5D |  if_ne	jmp	#LR__0170
04b34     B7 0F 06 F1 | 	add	objptr, #439
04b38     07 B5 C2 FA | 	rdbyte	local38, objptr
04b3c     B7 0F 86 F1 | 	sub	objptr, #439
04b40     5A A1 02 F6 | 	mov	local28, local38
04b44     0D A0 0E F2 | 	cmp	local28, #13 wz
04b48     0C 00 90 AD |  if_e	jmp	#LR__0171
04b4c                 | LR__0170
04b4c                 | '           triggerNote(channel)
04b4c     AF 6A 02 FB | 	rdlong	local01, fp
04b50     35 5D 02 F6 | 	mov	arg01, local01
04b54     CC FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04b58                 | LR__0171
04b58                 | LR__0172
04b58                 | ' 
04b58                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04b58                 | '       if resetTremolo[channel] > 0
04b58     AF 6A 02 FB | 	rdlong	local01, fp
04b5c     8F 0F 06 F1 | 	add	objptr, #399
04b60     07 6B 02 F1 | 	add	local01, objptr
04b64     35 A1 C2 FA | 	rdbyte	local28, local01
04b68     00 A0 5E F2 | 	cmps	local28, #0 wcz
04b6c     8F 0F 86 F1 | 	sub	objptr, #399
04b70     14 00 90 ED |  if_be	jmp	#LR__0173
04b74     AF B8 02 FB | 	rdlong	local40, fp
04b78     8B 0F 06 F1 | 	add	objptr, #395
04b7c     07 B9 02 F1 | 	add	local40, objptr
04b80                 | '         tremoloPos[channel] := 0
04b80     5C 01 48 FC | 	wrbyte	#0, local40
04b84     8B 0F 86 F1 | 	sub	objptr, #395
04b88                 | LR__0173
04b88                 | ' 
04b88                 | '       if resetVibrato[channel] > 0
04b88     AF 6A 02 FB | 	rdlong	local01, fp
04b8c     93 0F 06 F1 | 	add	objptr, #403
04b90     07 6B 02 F1 | 	add	local01, objptr
04b94     35 A1 C2 FA | 	rdbyte	local28, local01
04b98     00 A0 5E F2 | 	cmps	local28, #0 wcz
04b9c     93 0F 86 F1 | 	sub	objptr, #403
04ba0     20 00 90 ED |  if_be	jmp	#LR__0175
04ba4     AF BA 02 FB | 	rdlong	local41, fp
04ba8     87 0F 06 F1 | 	add	objptr, #391
04bac     07 BB 02 F1 | 	add	local41, objptr
04bb0                 | '         vibratoPos[channel] := 0
04bb0     5D 01 48 FC | 	wrbyte	#0, local41
04bb4     87 0F 86 F1 | 	sub	objptr, #391
04bb8                 | ' 
04bb8                 | '   else
04bb8     08 00 90 FD | 	jmp	#LR__0175
04bbc                 | LR__0174
04bbc                 | '     ' Handle commands that executes on all "non zero ticks"
04bbc                 | '     handleNonZeroTickCommands(channel)
04bbc     AF 5C 02 FB | 	rdlong	arg01, fp
04bc0     E4 04 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04bc4                 | LR__0175
04bc4                 | ' 
04bc4                 | '   ' Handle commands that executes on every tick
04bc4                 | '   handleEveryTickCommands(channel)
04bc4     AF 5C 02 FB | 	rdlong	arg01, fp
04bc8     40 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04bcc     AF BC 02 FB | 	rdlong	local42, fp
04bd0     02 BC 66 F0 | 	shl	local42, #2
04bd4     DF 0E 06 F1 | 	add	objptr, #223
04bd8     07 BD 02 F1 | 	add	local42, objptr
04bdc     5E BF 02 FB | 	rdlong	local43, local42
04be0     01 00 00 FF 
04be4     58 BF 66 F3 | 	fles	local43, ##856
04be8                 | ' 
04be8                 | '   ' Handle boundaries that should be kept
04be8                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04be8     5E BF 62 FC | 	wrlong	local43, local42
04bec     AF C0 02 FB | 	rdlong	local44, fp
04bf0     02 C0 66 F0 | 	shl	local44, #2
04bf4     07 C1 02 F1 | 	add	local44, objptr
04bf8     60 C3 02 FB | 	rdlong	local45, local44
04bfc     71 C2 46 F3 | 	fges	local45, #113
04c00                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04c00     60 C3 62 FC | 	wrlong	local45, local44
04c04     AF C4 02 FB | 	rdlong	local46, fp
04c08     02 C4 66 F0 | 	shl	local46, #2
04c0c     20 0E 06 F1 | 	add	objptr, #32
04c10     07 C5 02 F1 | 	add	local46, objptr
04c14     62 C7 02 FB | 	rdlong	local47, local46
04c18     40 C6 66 F3 | 	fles	local47, #64
04c1c                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04c1c     62 C7 62 FC | 	wrlong	local47, local46
04c20     AF C8 02 FB | 	rdlong	local48, fp
04c24     02 C8 66 F0 | 	shl	local48, #2
04c28     07 C9 02 F1 | 	add	local48, objptr
04c2c     64 CB 02 FB | 	rdlong	local49, local48
04c30     00 CA 46 F3 | 	fges	local49, #0
04c34                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04c34     64 CB 62 FC | 	wrlong	local49, local48
04c38     FF 0E 86 F1 | 	sub	objptr, #255
04c3c     AF F0 03 F6 | 	mov	ptra, fp
04c40     BF 00 A0 FD | 	call	#popregs_
04c44                 | _trackerplayer_spin2_processChannel_ret
04c44     2D 00 64 FD | 	ret
04c48                 | 
04c48                 | ' 
04c48                 | ' 
04c48                 | ' ' Handle all commands that executes on tick zero
04c48                 | ' '
04c48                 | ' PRI handleZeroTickCommands(channel)
04c48                 | _trackerplayer_spin2_handleZeroTickCommands
04c48     2E 31 02 F6 | 	mov	_var01, arg01
04c4c                 | ' 
04c4c                 | '   CASE_FAST cmd
04c4c     BA 0F 06 F1 | 	add	objptr, #442
04c50     07 33 C2 FA | 	rdbyte	_var02, objptr
04c54     BA 0F 86 F1 | 	sub	objptr, #442
04c58     19 35 02 F6 | 	mov	_var03, _var02
04c5c     09 34 86 F1 | 	sub	_var03, #9
04c60     07 34 26 F3 | 	fle	_var03, #7
04c64     1A 37 02 F6 | 	mov	_var04, _var03
04c68     30 36 62 FD | 	jmprel	_var04
04c6c                 | LR__0176
04c6c     1C 00 90 FD | 	jmp	#LR__0177
04c70     30 04 90 FD | 	jmp	#LR__0200
04c74     64 00 90 FD | 	jmp	#LR__0179
04c78     84 00 90 FD | 	jmp	#LR__0180
04c7c     A0 00 90 FD | 	jmp	#LR__0181
04c80     D0 00 90 FD | 	jmp	#LR__0182
04c84     9C 03 90 FD | 	jmp	#LR__0197
04c88     18 04 90 FD | 	jmp	#LR__0200
04c8c                 | LR__0177
04c8c                 | ' 
04c8c                 | '     $9:                          ' Set sample offset
04c8c                 | '       if z > 0
04c8c     B9 0F 06 F1 | 	add	objptr, #441
04c90     07 39 C2 FA | 	rdbyte	_var05, objptr
04c94     B9 0F 86 F1 | 	sub	objptr, #441
04c98     00 38 5E F2 | 	cmps	_var05, #0 wcz
04c9c     1C 00 90 ED |  if_be	jmp	#LR__0178
04ca0                 | '         cmd9_memoryZ[channel] := z
04ca0     18 39 02 F6 | 	mov	_var05, _var01
04ca4     DC 0F 06 F1 | 	add	objptr, #476
04ca8     07 39 02 F1 | 	add	_var05, objptr
04cac     23 0E 86 F1 | 	sub	objptr, #35
04cb0     07 3B C2 FA | 	rdbyte	_var06, objptr
04cb4     B9 0F 86 F1 | 	sub	objptr, #441
04cb8     1C 3B 42 FC | 	wrbyte	_var06, _var05
04cbc                 | LR__0178
04cbc                 | ' 
04cbc                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04cbc     DC 0F 06 F1 | 	add	objptr, #476
04cc0     07 31 02 F1 | 	add	_var01, objptr
04cc4     18 39 C2 FA | 	rdbyte	_var05, _var01
04cc8     08 38 66 F0 | 	shl	_var05, #8
04ccc     29 0E 86 F1 | 	sub	objptr, #41
04cd0     07 39 62 FC | 	wrlong	_var05, objptr
04cd4     B3 0F 86 F1 | 	sub	objptr, #435
04cd8     C8 03 90 FD | 	jmp	#LR__0200
04cdc                 | LR__0179
04cdc                 | ' 
04cdc                 | '     $B:                          ' Jump position
04cdc                 | '       cmdB_memoryZ := z
04cdc     B9 0F 06 F1 | 	add	objptr, #441
04ce0     07 39 C2 FA | 	rdbyte	_var05, objptr
04ce4     2E 0E 06 F1 | 	add	objptr, #46
04ce8     07 39 42 FC | 	wrbyte	_var05, objptr
04cec                 | '       cmdB_updatePosition := true
04cec     01 0E 06 F1 | 	add	objptr, #1
04cf0     FF FF FF FF 
04cf4     07 FF 4B FC | 	wrbyte	##-1, objptr
04cf8     E8 0F 86 F1 | 	sub	objptr, #488
04cfc     A4 03 90 FD | 	jmp	#LR__0200
04d00                 | LR__0180
04d00                 | ' 
04d00                 | '     $C:                          ' Set volume
04d00                 | '       currVolume[channel] := z
04d00     02 30 66 F0 | 	shl	_var01, #2
04d04     FF 0E 06 F1 | 	add	objptr, #255
04d08     07 31 02 F1 | 	add	_var01, objptr
04d0c     BA 0E 06 F1 | 	add	objptr, #186
04d10     07 3B C2 FA | 	rdbyte	_var06, objptr
04d14     B9 0F 86 F1 | 	sub	objptr, #441
04d18     18 3B 62 FC | 	wrlong	_var06, _var01
04d1c     84 03 90 FD | 	jmp	#LR__0200
04d20                 | LR__0181
04d20                 | ' 
04d20                 | '     $D:                          ' Pattern break
04d20                 | '       cmdD_memoryX := x
04d20     B7 0F 06 F1 | 	add	objptr, #439
04d24     07 39 C2 FA | 	rdbyte	_var05, objptr
04d28     2D 0E 06 F1 | 	add	objptr, #45
04d2c     07 39 42 FC | 	wrbyte	_var05, objptr
04d30                 | '       cmdD_memoryY := y
04d30     2C 0E 86 F1 | 	sub	objptr, #44
04d34     07 39 C2 FA | 	rdbyte	_var05, objptr
04d38     2D 0E 06 F1 | 	add	objptr, #45
04d3c     07 39 42 FC | 	wrbyte	_var05, objptr
04d40                 | '       cmdD_updatePosition := true
04d40     01 0E 06 F1 | 	add	objptr, #1
04d44     FF FF FF FF 
04d48     07 FF 4B FC | 	wrbyte	##-1, objptr
04d4c     E6 0F 86 F1 | 	sub	objptr, #486
04d50     50 03 90 FD | 	jmp	#LR__0200
04d54                 | LR__0182
04d54                 | ' 
04d54                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04d54                 | ' 
04d54                 | '       CASE_FAST x
04d54     B7 0F 06 F1 | 	add	objptr, #439
04d58     07 3D C2 FA | 	rdbyte	_var07, objptr
04d5c     B7 0F 86 F1 | 	sub	objptr, #439
04d60     1E 39 02 F6 | 	mov	_var05, _var07
04d64     0F 38 26 F3 | 	fle	_var05, #15
04d68     1C 3F 02 F6 | 	mov	_var08, _var05
04d6c     30 3E 62 FD | 	jmprel	_var08
04d70                 | LR__0183
04d70     3C 00 90 FD | 	jmp	#LR__0184
04d74     58 00 90 FD | 	jmp	#LR__0185
04d78     8C 00 90 FD | 	jmp	#LR__0186
04d7c     C0 00 90 FD | 	jmp	#LR__0187
04d80     DC 00 90 FD | 	jmp	#LR__0188
04d84     14 01 90 FD | 	jmp	#LR__0189
04d88     28 01 90 FD | 	jmp	#LR__0190
04d8c     C0 01 90 FD | 	jmp	#LR__0193
04d90     10 03 90 FD | 	jmp	#LR__0200
04d94     0C 03 90 FD | 	jmp	#LR__0200
04d98     F0 01 90 FD | 	jmp	#LR__0194
04d9c     24 02 90 FD | 	jmp	#LR__0195
04da0     00 03 90 FD | 	jmp	#LR__0200
04da4     FC 02 90 FD | 	jmp	#LR__0200
04da8     50 02 90 FD | 	jmp	#LR__0196
04dac     F4 02 90 FD | 	jmp	#LR__0200
04db0                 | LR__0184
04db0                 | ' 
04db0                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04db0     B8 0F 06 F1 | 	add	objptr, #440
04db4     07 3B C2 FA | 	rdbyte	_var06, objptr
04db8     1D 3B 22 F6 | 	not	_var06, _var06
04dbc     01 3A 06 F5 | 	and	_var06, #1
04dc0     03 0E 06 F1 | 	add	objptr, #3
04dc4     07 3B 42 FC | 	wrbyte	_var06, objptr
04dc8     BB 0F 86 F1 | 	sub	objptr, #443
04dcc     D4 02 90 FD | 	jmp	#LR__0200
04dd0                 | LR__0185
04dd0                 | ' 
04dd0                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04dd0     18 41 02 F6 | 	mov	_var09, _var01
04dd4     02 40 66 F0 | 	shl	_var09, #2
04dd8     DF 0E 06 F1 | 	add	objptr, #223
04ddc     07 41 02 F1 | 	add	_var09, objptr
04de0     20 3B 02 FB | 	rdlong	_var06, _var09
04de4     D9 0E 06 F1 | 	add	objptr, #217
04de8     07 43 C2 FA | 	rdbyte	_var10, objptr
04dec     21 3B 82 F1 | 	sub	_var06, _var10
04df0     02 30 66 F0 | 	shl	_var01, #2
04df4     D9 0E 86 F1 | 	sub	objptr, #217
04df8     07 31 02 F1 | 	add	_var01, objptr
04dfc     18 3B 62 FC | 	wrlong	_var06, _var01
04e00     DF 0E 86 F1 | 	sub	objptr, #223
04e04     9C 02 90 FD | 	jmp	#LR__0200
04e08                 | LR__0186
04e08                 | ' 
04e08                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04e08     18 41 02 F6 | 	mov	_var09, _var01
04e0c     02 40 66 F0 | 	shl	_var09, #2
04e10     DF 0E 06 F1 | 	add	objptr, #223
04e14     07 41 02 F1 | 	add	_var09, objptr
04e18     20 3B 02 FB | 	rdlong	_var06, _var09
04e1c     D9 0E 06 F1 | 	add	objptr, #217
04e20     07 43 C2 FA | 	rdbyte	_var10, objptr
04e24     21 3B 02 F1 | 	add	_var06, _var10
04e28     02 30 66 F0 | 	shl	_var01, #2
04e2c     D9 0E 86 F1 | 	sub	objptr, #217
04e30     07 31 02 F1 | 	add	_var01, objptr
04e34     18 3B 62 FC | 	wrlong	_var06, _var01
04e38     DF 0E 86 F1 | 	sub	objptr, #223
04e3c     64 02 90 FD | 	jmp	#LR__0200
04e40                 | LR__0187
04e40                 | ' 
04e40                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
04e40     B8 0F 06 F1 | 	add	objptr, #440
04e44     07 3B C2 FA | 	rdbyte	_var06, objptr
04e48     01 3A 06 F5 | 	and	_var06, #1
04e4c     04 0E 06 F1 | 	add	objptr, #4
04e50     07 31 02 F1 | 	add	_var01, objptr
04e54     18 3B 42 FC | 	wrbyte	_var06, _var01
04e58     BC 0F 86 F1 | 	sub	objptr, #444
04e5c     44 02 90 FD | 	jmp	#LR__0200
04e60                 | LR__0188
04e60                 | ' 
04e60                 | '         $4:                                      ' Set vibrato waveform type
04e60                 | '           vibratoType[channel]  := y & 3
04e60     B8 0F 06 F1 | 	add	objptr, #440
04e64     07 3B C2 FA | 	rdbyte	_var06, objptr
04e68     03 3A 06 F5 | 	and	_var06, #3
04e6c     18 45 02 F6 | 	mov	_var11, _var01
04e70     08 0E 06 F1 | 	add	objptr, #8
04e74     07 45 02 F1 | 	add	_var11, objptr
04e78     22 3B 42 FC | 	wrbyte	_var06, _var11
04e7c                 | '           resetVibrato[channel] := y & 4
04e7c     08 0E 86 F1 | 	sub	objptr, #8
04e80     07 3B C2 FA | 	rdbyte	_var06, objptr
04e84     04 3A 06 F5 | 	and	_var06, #4
04e88     25 0E 86 F1 | 	sub	objptr, #37
04e8c     07 31 02 F1 | 	add	_var01, objptr
04e90     18 3B 42 FC | 	wrbyte	_var06, _var01
04e94     93 0F 86 F1 | 	sub	objptr, #403
04e98     08 02 90 FD | 	jmp	#LR__0200
04e9c                 | LR__0189
04e9c                 | ' 
04e9c                 | '         $5: fineTune := y                        ' Set finetune
04e9c     B8 0F 06 F1 | 	add	objptr, #440
04ea0     07 3B C2 FA | 	rdbyte	_var06, objptr
04ea4     09 0E 86 F1 | 	sub	objptr, #9
04ea8     07 3B 62 FC | 	wrlong	_var06, objptr
04eac     AF 0F 86 F1 | 	sub	objptr, #431
04eb0     F0 01 90 FD | 	jmp	#LR__0200
04eb4                 | LR__0190
04eb4                 | ' 
04eb4                 | '         $6:                                      ' Pattern looping
04eb4                 | '           if y == 0
04eb4     B8 0F 06 F1 | 	add	objptr, #440
04eb8     07 3B CA FA | 	rdbyte	_var06, objptr wz
04ebc     B8 0F 86 F1 | 	sub	objptr, #440
04ec0     1C 00 90 5D |  if_ne	jmp	#LR__0191
04ec4                 | '             cmdE6_memory[channel] := patternRow
04ec4     E9 0F 06 F1 | 	add	objptr, #489
04ec8     07 31 02 F1 | 	add	_var01, objptr
04ecc     47 0F 86 F1 | 	sub	objptr, #327
04ed0     07 45 C2 FA | 	rdbyte	_var11, objptr
04ed4     A2 0E 86 F1 | 	sub	objptr, #162
04ed8     18 45 42 FC | 	wrbyte	_var11, _var01
04edc                 | '           else
04edc     C4 01 90 FD | 	jmp	#LR__0200
04ee0                 | LR__0191
04ee0                 | '             if ++cmdE6_counter[channel] <= y
04ee0     18 41 02 F6 | 	mov	_var09, _var01
04ee4     ED 0F 06 F1 | 	add	objptr, #493
04ee8     07 41 02 F1 | 	add	_var09, objptr
04eec     20 3B C2 FA | 	rdbyte	_var06, _var09
04ef0     01 3A 06 F1 | 	add	_var06, #1
04ef4     18 43 02 F6 | 	mov	_var10, _var01
04ef8     07 43 02 F1 | 	add	_var10, objptr
04efc     21 3B 42 FC | 	wrbyte	_var06, _var10
04f00     21 47 C2 FA | 	rdbyte	_var12, _var10
04f04     35 0E 86 F1 | 	sub	objptr, #53
04f08     07 49 C2 FA | 	rdbyte	_var13, objptr
04f0c     B8 0F 86 F1 | 	sub	objptr, #440
04f10     24 47 5A F2 | 	cmps	_var12, _var13 wcz
04f14     24 00 90 1D |  if_a	jmp	#LR__0192
04f18                 | '               cmdE6_updatePosition[channel] := true
04f18     F1 0F 06 F1 | 	add	objptr, #497
04f1c     07 31 02 F1 | 	add	_var01, objptr
04f20     FF FF FF FF 
04f24     18 FF 4B FC | 	wrbyte	##-1, _var01
04f28                 | '               cmdE6_updatePositionCommon    := true
04f28     04 0E 06 F1 | 	add	objptr, #4
04f2c     FF FF FF FF 
04f30     07 FF 4B FC | 	wrbyte	##-1, objptr
04f34     F5 0F 86 F1 | 	sub	objptr, #501
04f38                 | '             else
04f38     68 01 90 FD | 	jmp	#LR__0200
04f3c                 | LR__0192
04f3c                 | '               cmdE6_counter[channel] := 0
04f3c     ED 0F 06 F1 | 	add	objptr, #493
04f40     07 31 02 F1 | 	add	_var01, objptr
04f44     18 01 48 FC | 	wrbyte	#0, _var01
04f48     ED 0F 86 F1 | 	sub	objptr, #493
04f4c     54 01 90 FD | 	jmp	#LR__0200
04f50                 | LR__0193
04f50                 | ' 
04f50                 | '         $7:                                      ' Set tremolo waveform type
04f50                 | '           tremoloType[channel] := y & 3
04f50     B8 0F 06 F1 | 	add	objptr, #440
04f54     07 3B C2 FA | 	rdbyte	_var06, objptr
04f58     03 3A 06 F5 | 	and	_var06, #3
04f5c     18 45 02 F6 | 	mov	_var11, _var01
04f60     0C 0E 06 F1 | 	add	objptr, #12
04f64     07 45 02 F1 | 	add	_var11, objptr
04f68     22 3B 42 FC | 	wrbyte	_var06, _var11
04f6c                 | '           resetTremolo[channel] := y & 4
04f6c     0C 0E 86 F1 | 	sub	objptr, #12
04f70     07 3B C2 FA | 	rdbyte	_var06, objptr
04f74     04 3A 06 F5 | 	and	_var06, #4
04f78     29 0E 86 F1 | 	sub	objptr, #41
04f7c     07 31 02 F1 | 	add	_var01, objptr
04f80     18 3B 42 FC | 	wrbyte	_var06, _var01
04f84     8F 0F 86 F1 | 	sub	objptr, #399
04f88     18 01 90 FD | 	jmp	#LR__0200
04f8c                 | LR__0194
04f8c                 | ' 
04f8c                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
04f8c     18 41 02 F6 | 	mov	_var09, _var01
04f90     02 40 66 F0 | 	shl	_var09, #2
04f94     FF 0E 06 F1 | 	add	objptr, #255
04f98     07 41 02 F1 | 	add	_var09, objptr
04f9c     20 3B 02 FB | 	rdlong	_var06, _var09
04fa0     B9 0E 06 F1 | 	add	objptr, #185
04fa4     07 43 C2 FA | 	rdbyte	_var10, objptr
04fa8     21 3B 02 F1 | 	add	_var06, _var10
04fac     02 30 66 F0 | 	shl	_var01, #2
04fb0     B9 0E 86 F1 | 	sub	objptr, #185
04fb4     07 31 02 F1 | 	add	_var01, objptr
04fb8     18 3B 62 FC | 	wrlong	_var06, _var01
04fbc     FF 0E 86 F1 | 	sub	objptr, #255
04fc0     E0 00 90 FD | 	jmp	#LR__0200
04fc4                 | LR__0195
04fc4                 | ' 
04fc4                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
04fc4     18 41 02 F6 | 	mov	_var09, _var01
04fc8     02 40 66 F0 | 	shl	_var09, #2
04fcc     FF 0E 06 F1 | 	add	objptr, #255
04fd0     07 41 02 F1 | 	add	_var09, objptr
04fd4     20 3B 02 FB | 	rdlong	_var06, _var09
04fd8     B9 0E 06 F1 | 	add	objptr, #185
04fdc     07 43 C2 FA | 	rdbyte	_var10, objptr
04fe0     21 3B 82 F1 | 	sub	_var06, _var10
04fe4     02 30 66 F0 | 	shl	_var01, #2
04fe8     B9 0E 86 F1 | 	sub	objptr, #185
04fec     07 31 02 F1 | 	add	_var01, objptr
04ff0     18 3B 62 FC | 	wrlong	_var06, _var01
04ff4     FF 0E 86 F1 | 	sub	objptr, #255
04ff8     A8 00 90 FD | 	jmp	#LR__0200
04ffc                 | LR__0196
04ffc                 | ' 
04ffc                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
04ffc     B8 0F 06 F1 | 	add	objptr, #440
05000     07 41 C2 FA | 	rdbyte	_var09, objptr
05004     14 0F 86 F1 | 	sub	objptr, #276
05008     07 43 C2 FA | 	rdbyte	_var10, objptr
0500c     21 41 02 FD | 	qmul	_var09, _var10
05010     18 3A 62 FD | 	getqx	_var06
05014     01 0E 06 F1 | 	add	objptr, #1
05018     07 3B 42 FC | 	wrbyte	_var06, objptr
0501c     A5 0E 86 F1 | 	sub	objptr, #165
05020     80 00 90 FD | 	jmp	#LR__0200
05024                 | LR__0197
05024                 | ' 
05024                 | '     $F:                          ' Set speed
05024                 | '       if z < 32
05024     B9 0F 06 F1 | 	add	objptr, #441
05028     07 39 C2 FA | 	rdbyte	_var05, objptr
0502c     B9 0F 86 F1 | 	sub	objptr, #441
05030     20 38 5E F2 | 	cmps	_var05, #32 wcz
05034     18 00 90 3D |  if_ae	jmp	#LR__0198
05038                 | '         currentSongSpeed := z
05038     B9 0F 06 F1 | 	add	objptr, #441
0503c     07 39 C2 FA | 	rdbyte	_var05, objptr
05040     15 0F 86 F1 | 	sub	objptr, #277
05044     07 39 42 FC | 	wrbyte	_var05, objptr
05048     A4 0E 86 F1 | 	sub	objptr, #164
0504c                 | '       else
0504c     54 00 90 FD | 	jmp	#LR__0199
05050                 | LR__0198
05050                 | '         ticksPerMinute := z * 24
05050     B9 0F 06 F1 | 	add	objptr, #441
05054     07 3D C2 FA | 	rdbyte	_var07, objptr
05058     1E 39 02 F6 | 	mov	_var05, _var07
0505c     01 38 66 F0 | 	shl	_var05, #1
05060     1E 39 02 F1 | 	add	_var05, _var07
05064     03 38 66 F0 | 	shl	_var05, #3
05068     12 0E 86 F1 | 	sub	objptr, #18
0506c     07 39 62 FC | 	wrlong	_var05, objptr
05070     A7 0F 86 F1 | 	sub	objptr, #423
05074                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
05074     07 0B 03 FB | 	rdlong	muldiva_, objptr
05078     A7 0F 06 F1 | 	add	objptr, #423
0507c     07 0D 03 FB | 	rdlong	muldivb_, objptr
05080     A7 0F 86 F1 | 	sub	objptr, #423
05084     D0 00 A0 FD | 	call	#divide_
05088     86 3B 02 F6 | 	mov	_var06, muldivb_
0508c     04 3A 66 F0 | 	shl	_var06, #4
05090     86 3B 82 F1 | 	sub	_var06, muldivb_
05094     02 3A 66 F0 | 	shl	_var06, #2
05098     AB 0F 06 F1 | 	add	objptr, #427
0509c     07 3B 62 FC | 	wrlong	_var06, objptr
050a0     AB 0F 86 F1 | 	sub	objptr, #427
050a4                 | LR__0199
050a4                 | LR__0200
050a4                 | _trackerplayer_spin2_handleZeroTickCommands_ret
050a4     2D 00 64 FD | 	ret
050a8                 | 
050a8                 | ' 
050a8                 | ' 
050a8                 | ' ' Handle all commands that executes on "non zero ticks"
050a8                 | ' '
050a8                 | ' PRI handleNonZeroTickCommands(channel)
050a8                 | _trackerplayer_spin2_handleNonZeroTickCommands
050a8     0A 5A 05 F6 | 	mov	COUNT_, #10
050ac     B0 00 A0 FD | 	call	#pushregs_
050b0     2E 6B 02 F6 | 	mov	local01, arg01
050b4                 | ' 
050b4                 | '   CASE_FAST cmd
050b4     BA 0F 06 F1 | 	add	objptr, #442
050b8     07 6D C2 FA | 	rdbyte	local02, objptr
050bc     BA 0F 86 F1 | 	sub	objptr, #442
050c0     36 6F 02 F6 | 	mov	local03, local02
050c4     01 6E 86 F1 | 	sub	local03, #1
050c8     0E 6E 26 F3 | 	fle	local03, #14
050cc     37 71 02 F6 | 	mov	local04, local03
050d0     30 70 62 FD | 	jmprel	local04
050d4                 | LR__0201
050d4     38 00 90 FD | 	jmp	#LR__0202
050d8     A0 00 90 FD | 	jmp	#LR__0203
050dc     D4 00 90 FD | 	jmp	#LR__0204
050e0     1C 02 90 FD | 	jmp	#LR__0214
050e4     20 01 90 FD | 	jmp	#LR__0206
050e8     48 01 90 FD | 	jmp	#LR__0207
050ec     50 01 90 FD | 	jmp	#LR__0208
050f0     0C 02 90 FD | 	jmp	#LR__0214
050f4     08 02 90 FD | 	jmp	#LR__0214
050f8     B0 01 90 FD | 	jmp	#LR__0211
050fc     00 02 90 FD | 	jmp	#LR__0214
05100     FC 01 90 FD | 	jmp	#LR__0214
05104     F8 01 90 FD | 	jmp	#LR__0214
05108     AC 01 90 FD | 	jmp	#LR__0212
0510c     F0 01 90 FD | 	jmp	#LR__0214
05110                 | LR__0202
05110                 | ' 
05110                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
05110     35 73 02 F6 | 	mov	local05, local01
05114     02 72 66 F0 | 	shl	local05, #2
05118     DF 0E 06 F1 | 	add	objptr, #223
0511c     07 73 02 F1 | 	add	local05, objptr
05120     39 75 02 FB | 	rdlong	local06, local05
05124     DA 0E 06 F1 | 	add	objptr, #218
05128     07 77 C2 FA | 	rdbyte	local07, objptr
0512c     3B 75 82 F1 | 	sub	local06, local07
05130     35 79 02 F6 | 	mov	local08, local01
05134     02 78 66 F0 | 	shl	local08, #2
05138     DA 0E 86 F1 | 	sub	objptr, #218
0513c     07 79 02 F1 | 	add	local08, objptr
05140     3C 75 62 FC | 	wrlong	local06, local08
05144                 | ' 
05144                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05144                 | '       if currPeriod[channel] < 0
05144     35 75 02 F6 | 	mov	local06, local01
05148     02 74 66 F0 | 	shl	local06, #2
0514c     07 75 02 F1 | 	add	local06, objptr
05150     3A 7B 02 FB | 	rdlong	local09, local06
05154     00 7A 5E F2 | 	cmps	local09, #0 wcz
05158     DF 0E 86 F1 | 	sub	objptr, #223
0515c     A0 01 90 3D |  if_ae	jmp	#LR__0214
05160                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05160     02 6A 66 F0 | 	shl	local01, #2
05164     DF 0E 06 F1 | 	add	objptr, #223
05168     07 6B 02 F1 | 	add	local01, objptr
0516c     01 00 80 FF 
05170     35 B1 6A FC | 	wrlong	##856, local01
05174     DF 0E 86 F1 | 	sub	objptr, #223
05178     84 01 90 FD | 	jmp	#LR__0214
0517c                 | LR__0203
0517c                 | ' 
0517c                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
0517c     35 73 02 F6 | 	mov	local05, local01
05180     02 72 66 F0 | 	shl	local05, #2
05184     DF 0E 06 F1 | 	add	objptr, #223
05188     07 73 02 F1 | 	add	local05, objptr
0518c     39 75 02 FB | 	rdlong	local06, local05
05190     DA 0E 06 F1 | 	add	objptr, #218
05194     07 77 C2 FA | 	rdbyte	local07, objptr
05198     3B 75 02 F1 | 	add	local06, local07
0519c     02 6A 66 F0 | 	shl	local01, #2
051a0     DA 0E 86 F1 | 	sub	objptr, #218
051a4     07 6B 02 F1 | 	add	local01, objptr
051a8     35 75 62 FC | 	wrlong	local06, local01
051ac     DF 0E 86 F1 | 	sub	objptr, #223
051b0     4C 01 90 FD | 	jmp	#LR__0214
051b4                 | LR__0204
051b4                 | ' 
051b4                 | '     $3:                                 ' Slide to note (portamento)
051b4                 | '       if z > 0
051b4     B9 0F 06 F1 | 	add	objptr, #441
051b8     07 75 C2 FA | 	rdbyte	local06, objptr
051bc     B9 0F 86 F1 | 	sub	objptr, #441
051c0     00 74 5E F2 | 	cmps	local06, #0 wcz
051c4     1C 00 90 ED |  if_be	jmp	#LR__0205
051c8                 | '         cmd3_memoryZ[channel] := z
051c8     35 75 02 F6 | 	mov	local06, local01
051cc     C8 0F 06 F1 | 	add	objptr, #456
051d0     07 75 02 F1 | 	add	local06, objptr
051d4     0F 0E 86 F1 | 	sub	objptr, #15
051d8     07 7B C2 FA | 	rdbyte	local09, objptr
051dc     B9 0F 86 F1 | 	sub	objptr, #441
051e0     3A 7B 42 FC | 	wrbyte	local09, local06
051e4                 | LR__0205
051e4                 | ' 
051e4                 | '       doPortamento(channel, lastSetPeriod[channel])
051e4     35 73 02 F6 | 	mov	local05, local01
051e8     02 72 66 F0 | 	shl	local05, #2
051ec     27 0F 06 F1 | 	add	objptr, #295
051f0     07 73 02 F1 | 	add	local05, objptr
051f4     39 5F 02 FB | 	rdlong	arg02, local05
051f8     35 5D 02 F6 | 	mov	arg01, local01
051fc     27 0F 86 F1 | 	sub	objptr, #295
05200     64 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05204     F8 00 90 FD | 	jmp	#LR__0214
05208                 | LR__0206
05208                 | ' 
05208                 | '     $5:                                 ' Volume slide + portamento
05208                 | '       doVolumeSlide(channel)
05208     35 5D 02 F6 | 	mov	arg01, local01
0520c     54 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05210                 | '       doPortamento(channel, lastSetPeriod[channel])
05210     35 73 02 F6 | 	mov	local05, local01
05214     02 72 66 F0 | 	shl	local05, #2
05218     27 0F 06 F1 | 	add	objptr, #295
0521c     07 73 02 F1 | 	add	local05, objptr
05220     39 5F 02 FB | 	rdlong	arg02, local05
05224     35 5D 02 F6 | 	mov	arg01, local01
05228     27 0F 86 F1 | 	sub	objptr, #295
0522c     38 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05230     CC 00 90 FD | 	jmp	#LR__0214
05234                 | LR__0207
05234                 | ' 
05234                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
05234     35 5D 02 F6 | 	mov	arg01, local01
05238     28 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
0523c     C0 00 90 FD | 	jmp	#LR__0214
05240                 | LR__0208
05240                 | ' 
05240                 | '     $7:                                 ' Tremolo
05240                 | '       if x > 0
05240     B7 0F 06 F1 | 	add	objptr, #439
05244     07 75 C2 FA | 	rdbyte	local06, objptr
05248     B7 0F 86 F1 | 	sub	objptr, #439
0524c     00 74 5E F2 | 	cmps	local06, #0 wcz
05250     1C 00 90 ED |  if_be	jmp	#LR__0209
05254                 | '         cmd7_memoryX[channel] := x
05254     35 75 02 F6 | 	mov	local06, local01
05258     D8 0F 06 F1 | 	add	objptr, #472
0525c     07 75 02 F1 | 	add	local06, objptr
05260     21 0E 86 F1 | 	sub	objptr, #33
05264     07 7B C2 FA | 	rdbyte	local09, objptr
05268     B7 0F 86 F1 | 	sub	objptr, #439
0526c     3A 7B 42 FC | 	wrbyte	local09, local06
05270                 | LR__0209
05270                 | '       if y > 0
05270     B8 0F 06 F1 | 	add	objptr, #440
05274     07 75 C2 FA | 	rdbyte	local06, objptr
05278     B8 0F 86 F1 | 	sub	objptr, #440
0527c     00 74 5E F2 | 	cmps	local06, #0 wcz
05280     1C 00 90 ED |  if_be	jmp	#LR__0210
05284                 | '         cmd7_memoryY[channel] := y
05284     35 75 02 F6 | 	mov	local06, local01
05288     D4 0F 06 F1 | 	add	objptr, #468
0528c     07 75 02 F1 | 	add	local06, objptr
05290     1C 0E 86 F1 | 	sub	objptr, #28
05294     07 7B C2 FA | 	rdbyte	local09, objptr
05298     B8 0F 86 F1 | 	sub	objptr, #440
0529c     3A 7B 42 FC | 	wrbyte	local09, local06
052a0                 | LR__0210
052a0                 | ' 
052a0                 | '       doTremolo(channel)
052a0     35 5D 02 F6 | 	mov	arg01, local01
052a4     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
052a8     54 00 90 FD | 	jmp	#LR__0214
052ac                 | LR__0211
052ac                 | ' 
052ac                 | '     $A: doVolumeSlide(channel)          ' Volume slide
052ac     35 5D 02 F6 | 	mov	arg01, local01
052b0     B0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
052b4     48 00 90 FD | 	jmp	#LR__0214
052b8                 | LR__0212
052b8                 | ' 
052b8                 | '     $E:                                 ' Retrig every Y ticks
052b8                 | '       if (x == $9) && ((tickcounter // y) == 0)
052b8     B7 0F 06 F1 | 	add	objptr, #439
052bc     07 73 C2 FA | 	rdbyte	local05, objptr
052c0     B7 0F 86 F1 | 	sub	objptr, #439
052c4     09 72 0E F2 | 	cmp	local05, #9 wz
052c8     34 00 90 5D |  if_ne	jmp	#LR__0213
052cc     A1 0E 06 F1 | 	add	objptr, #161
052d0     07 77 C2 FA | 	rdbyte	local07, objptr
052d4     3B 0B 03 F6 | 	mov	muldiva_, local07
052d8     17 0F 06 F1 | 	add	objptr, #279
052dc     07 7D C2 FA | 	rdbyte	local10, objptr
052e0     B8 0F 86 F1 | 	sub	objptr, #440
052e4     3E 0D 03 F6 | 	mov	muldivb_, local10
052e8     D0 00 A0 FD | 	call	#divide_
052ec     85 7B 0A F6 | 	mov	local09, muldiva_ wz
052f0     0C 00 90 5D |  if_ne	jmp	#LR__0213
052f4                 | '         triggerNote(channel)
052f4     35 75 02 F6 | 	mov	local06, local01
052f8     3A 5D 02 F6 | 	mov	arg01, local06
052fc     24 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
05300                 | LR__0213
05300                 | LR__0214
05300     AF F0 03 F6 | 	mov	ptra, fp
05304     BF 00 A0 FD | 	call	#popregs_
05308                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
05308     2D 00 64 FD | 	ret
0530c                 | 
0530c                 | ' 
0530c                 | ' 
0530c                 | ' ' Handle all commands that executes on every tick
0530c                 | ' '
0530c                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
0530c                 | _trackerplayer_spin2_handleEveryTickCommands
0530c     12 5A 05 F6 | 	mov	COUNT_, #18
05310     B0 00 A0 FD | 	call	#pushregs_
05314     2E 6B 02 F6 | 	mov	local01, arg01
05318                 | ' 
05318                 | '   CASE_FAST cmd
05318     BA 0F 06 F1 | 	add	objptr, #442
0531c     07 6D C2 FA | 	rdbyte	local02, objptr
05320     BA 0F 86 F1 | 	sub	objptr, #442
05324     36 6F 02 F6 | 	mov	local03, local02
05328     0F 6E 26 F3 | 	fle	local03, #15
0532c     37 71 02 F6 | 	mov	local04, local03
05330     30 70 62 FD | 	jmprel	local04
05334                 | LR__0215
05334     3C 00 90 FD | 	jmp	#LR__0216
05338     68 03 90 FD | 	jmp	#LR__0230
0533c     64 03 90 FD | 	jmp	#LR__0230
05340     60 03 90 FD | 	jmp	#LR__0230
05344     E8 01 90 FD | 	jmp	#LR__0219
05348     58 03 90 FD | 	jmp	#LR__0230
0534c     4C 02 90 FD | 	jmp	#LR__0222
05350     50 03 90 FD | 	jmp	#LR__0230
05354     4C 03 90 FD | 	jmp	#LR__0230
05358     48 03 90 FD | 	jmp	#LR__0230
0535c     44 03 90 FD | 	jmp	#LR__0230
05360     40 03 90 FD | 	jmp	#LR__0230
05364     3C 03 90 FD | 	jmp	#LR__0230
05368     38 03 90 FD | 	jmp	#LR__0230
0536c     38 02 90 FD | 	jmp	#LR__0223
05370     30 03 90 FD | 	jmp	#LR__0230
05374                 | LR__0216
05374                 | ' 
05374                 | '     $0:                                 ' Arpeggio
05374                 | '       arpCounter := tickCounter // 3
05374     A1 0E 06 F1 | 	add	objptr, #161
05378     07 0B C3 FA | 	rdbyte	muldiva_, objptr
0537c     A1 0E 86 F1 | 	sub	objptr, #161
05380     03 0C 07 F6 | 	mov	muldivb_, #3
05384     D0 00 A0 FD | 	call	#divide_
05388     85 73 02 F6 | 	mov	local05, muldiva_
0538c                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
0538c     35 75 02 F6 | 	mov	local06, local01
05390     02 74 66 F0 | 	shl	local06, #2
05394     DF 0E 06 F1 | 	add	objptr, #223
05398     07 75 02 F1 | 	add	local06, objptr
0539c     3A 5D 02 FB | 	rdlong	arg01, local06
053a0     35 77 02 F6 | 	mov	local07, local01
053a4     0C 0E 86 F1 | 	sub	objptr, #12
053a8     07 77 02 F1 | 	add	local07, objptr
053ac     3B 5F C2 FA | 	rdbyte	arg02, local07
053b0     D3 0E 86 F1 | 	sub	objptr, #211
053b4     9C F0 BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
053b8     15 79 02 F6 | 	mov	local08, result1
053bc     3C 7B 02 F6 | 	mov	local09, local08
053c0     24 78 5E F2 | 	cmps	local08, #36 wcz
053c4     DC 02 90 3D |  if_ae	jmp	#LR__0230
053c8                 | '         if arpCounter == 1 and x > 0
053c8     01 72 0E F2 | 	cmp	local05, #1 wz
053cc     8C 00 90 5D |  if_ne	jmp	#LR__0217
053d0     B7 0F 06 F1 | 	add	objptr, #439
053d4     07 75 C2 FA | 	rdbyte	local06, objptr
053d8     B7 0F 86 F1 | 	sub	objptr, #439
053dc     00 74 5E F2 | 	cmps	local06, #0 wcz
053e0     78 00 90 ED |  if_be	jmp	#LR__0217
053e4                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
053e4     3D 7D 02 F6 | 	mov	local10, local09
053e8     B7 0F 06 F1 | 	add	objptr, #439
053ec     07 77 C2 FA | 	rdbyte	local07, objptr
053f0     3B 7F 02 F6 | 	mov	local11, local07
053f4     3B 7D 02 F1 | 	add	local10, local07
053f8     3E 81 02 F6 | 	mov	local12, local10
053fc     40 5D 02 F6 | 	mov	arg01, local12
05400     06 00 00 FF 
05404     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05408     01 5C 66 F0 | 	shl	arg01, #1
0540c     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
05410                 | ' 
05410                 | '   return word[@periodTable][noteNumber]
05410     2E 2B E2 FA | 	rdword	result1, arg01
05414     06 00 00 FF 
05418     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
0541c     15 83 02 F6 | 	mov	local13, result1
05420     35 85 02 F6 | 	mov	local14, local01
05424     02 84 66 F0 | 	shl	local14, #2
05428     D8 0E 86 F1 | 	sub	objptr, #216
0542c     07 87 02 F6 | 	mov	local15, objptr
05430     07 85 02 F1 | 	add	local14, objptr
05434     41 75 02 F6 | 	mov	local06, local13
05438     42 89 02 FB | 	rdlong	local16, local14
0543c     44 75 82 F1 | 	sub	local06, local16
05440     35 8B 02 F6 | 	mov	local17, local01
05444     02 8A 66 F0 | 	shl	local17, #2
05448     10 0E 06 F1 | 	add	objptr, #16
0544c     07 8D 02 F6 | 	mov	local18, objptr
05450     07 8B 02 F1 | 	add	local17, objptr
05454     45 75 62 FC | 	wrlong	local06, local17
05458     EF 0E 86 F1 | 	sub	objptr, #239
0545c                 | LR__0217
0545c                 | '         if arpCounter == 2 and y > 0
0545c     02 72 0E F2 | 	cmp	local05, #2 wz
05460     8C 00 90 5D |  if_ne	jmp	#LR__0218
05464     B8 0F 06 F1 | 	add	objptr, #440
05468     07 75 C2 FA | 	rdbyte	local06, objptr
0546c     B8 0F 86 F1 | 	sub	objptr, #440
05470     00 74 5E F2 | 	cmps	local06, #0 wcz
05474     78 00 90 ED |  if_be	jmp	#LR__0218
05478                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
05478     3D 7D 02 F6 | 	mov	local10, local09
0547c     B8 0F 06 F1 | 	add	objptr, #440
05480     07 77 C2 FA | 	rdbyte	local07, objptr
05484     3B 7F 02 F6 | 	mov	local11, local07
05488     3B 7D 02 F1 | 	add	local10, local07
0548c     3E 81 02 F6 | 	mov	local12, local10
05490     40 5D 02 F6 | 	mov	arg01, local12
05494     06 00 00 FF 
05498     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
0549c     01 5C 66 F0 | 	shl	arg01, #1
054a0     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
054a4                 | ' 
054a4                 | '   return word[@periodTable][noteNumber]
054a4     2E 2B E2 FA | 	rdword	result1, arg01
054a8     06 00 00 FF 
054ac     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
054b0     15 83 02 F6 | 	mov	local13, result1
054b4     35 85 02 F6 | 	mov	local14, local01
054b8     02 84 66 F0 | 	shl	local14, #2
054bc     D9 0E 86 F1 | 	sub	objptr, #217
054c0     07 87 02 F6 | 	mov	local15, objptr
054c4     07 85 02 F1 | 	add	local14, objptr
054c8     41 75 02 F6 | 	mov	local06, local13
054cc     42 89 02 FB | 	rdlong	local16, local14
054d0     44 75 82 F1 | 	sub	local06, local16
054d4     35 8B 02 F6 | 	mov	local17, local01
054d8     02 8A 66 F0 | 	shl	local17, #2
054dc     10 0E 06 F1 | 	add	objptr, #16
054e0     07 8D 02 F6 | 	mov	local18, objptr
054e4     07 8B 02 F1 | 	add	local17, objptr
054e8     45 75 62 FC | 	wrlong	local06, local17
054ec     EF 0E 86 F1 | 	sub	objptr, #239
054f0                 | LR__0218
054f0                 | '         if arpCounter == 0 and (x + y) > 0
054f0     00 72 0E F2 | 	cmp	local05, #0 wz
054f4     AC 01 90 5D |  if_ne	jmp	#LR__0230
054f8     B7 0F 06 F1 | 	add	objptr, #439
054fc     07 75 C2 FA | 	rdbyte	local06, objptr
05500     01 0E 06 F1 | 	add	objptr, #1
05504     07 77 C2 FA | 	rdbyte	local07, objptr
05508     B8 0F 86 F1 | 	sub	objptr, #440
0550c     3B 75 02 F1 | 	add	local06, local07
05510     00 74 5E F2 | 	cmps	local06, #0 wcz
05514     8C 01 90 ED |  if_be	jmp	#LR__0230
05518                 | '           deltaPeriod[channel] := 0
05518     02 6A 66 F0 | 	shl	local01, #2
0551c     EF 0E 06 F1 | 	add	objptr, #239
05520     07 6B 02 F1 | 	add	local01, objptr
05524     35 01 68 FC | 	wrlong	#0, local01
05528     EF 0E 86 F1 | 	sub	objptr, #239
0552c     74 01 90 FD | 	jmp	#LR__0230
05530                 | LR__0219
05530                 | ' 
05530                 | '     $4:                                 ' Vibrato
05530                 | '       if x > 0
05530     B7 0F 06 F1 | 	add	objptr, #439
05534     07 75 C2 FA | 	rdbyte	local06, objptr
05538     B7 0F 86 F1 | 	sub	objptr, #439
0553c     00 74 5E F2 | 	cmps	local06, #0 wcz
05540     1C 00 90 ED |  if_be	jmp	#LR__0220
05544                 | '         cmd4_memoryX[channel] := x
05544     35 75 02 F6 | 	mov	local06, local01
05548     D0 0F 06 F1 | 	add	objptr, #464
0554c     07 75 02 F1 | 	add	local06, objptr
05550     19 0E 86 F1 | 	sub	objptr, #25
05554     07 7F C2 FA | 	rdbyte	local11, objptr
05558     B7 0F 86 F1 | 	sub	objptr, #439
0555c     3A 7F 42 FC | 	wrbyte	local11, local06
05560                 | LR__0220
05560                 | '       if y > 0
05560     B8 0F 06 F1 | 	add	objptr, #440
05564     07 75 C2 FA | 	rdbyte	local06, objptr
05568     B8 0F 86 F1 | 	sub	objptr, #440
0556c     00 74 5E F2 | 	cmps	local06, #0 wcz
05570     1C 00 90 ED |  if_be	jmp	#LR__0221
05574                 | '         cmd4_memoryY[channel] := y
05574     35 75 02 F6 | 	mov	local06, local01
05578     CC 0F 06 F1 | 	add	objptr, #460
0557c     07 75 02 F1 | 	add	local06, objptr
05580     14 0E 86 F1 | 	sub	objptr, #20
05584     07 7F C2 FA | 	rdbyte	local11, objptr
05588     B8 0F 86 F1 | 	sub	objptr, #440
0558c     3A 7F 42 FC | 	wrbyte	local11, local06
05590                 | LR__0221
05590                 | ' 
05590                 | '       doVibrato(channel)
05590     35 5D 02 F6 | 	mov	arg01, local01
05594     74 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05598     08 01 90 FD | 	jmp	#LR__0230
0559c                 | LR__0222
0559c                 | ' 
0559c                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
0559c     35 5D 02 F6 | 	mov	arg01, local01
055a0     68 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
055a4     FC 00 90 FD | 	jmp	#LR__0230
055a8                 | LR__0223
055a8                 | ' 
055a8                 | '     $E:
055a8                 | '       if x == $C                        ' Cut note after Y ticks
055a8     B7 0F 06 F1 | 	add	objptr, #439
055ac     07 75 C2 FA | 	rdbyte	local06, objptr
055b0     B7 0F 86 F1 | 	sub	objptr, #439
055b4     0C 74 0E F2 | 	cmp	local06, #12 wz
055b8     34 00 90 5D |  if_ne	jmp	#LR__0224
055bc                 | '         if tickcounter == y
055bc     A1 0E 06 F1 | 	add	objptr, #161
055c0     07 75 C2 FA | 	rdbyte	local06, objptr
055c4     17 0F 06 F1 | 	add	objptr, #279
055c8     07 7F C2 FA | 	rdbyte	local11, objptr
055cc     B8 0F 86 F1 | 	sub	objptr, #440
055d0     3F 75 0A F2 | 	cmp	local06, local11 wz
055d4     CC 00 90 5D |  if_ne	jmp	#LR__0229
055d8                 | '           currVolume[channel] := 0
055d8     02 6A 66 F0 | 	shl	local01, #2
055dc     FF 0E 06 F1 | 	add	objptr, #255
055e0     07 6B 02 F1 | 	add	local01, objptr
055e4     35 01 68 FC | 	wrlong	#0, local01
055e8     FF 0E 86 F1 | 	sub	objptr, #255
055ec     B4 00 90 FD | 	jmp	#LR__0229
055f0                 | LR__0224
055f0                 | ' 
055f0                 | '       elseif x == $D                    ' Delay note Y ticks
055f0     B7 0F 06 F1 | 	add	objptr, #439
055f4     07 75 C2 FA | 	rdbyte	local06, objptr
055f8     B7 0F 86 F1 | 	sub	objptr, #439
055fc     0D 74 0E F2 | 	cmp	local06, #13 wz
05600     A0 00 90 5D |  if_ne	jmp	#LR__0228
05604                 | '         if tickcounter == y
05604     A1 0E 06 F1 | 	add	objptr, #161
05608     07 75 C2 FA | 	rdbyte	local06, objptr
0560c     17 0F 06 F1 | 	add	objptr, #279
05610     07 7F C2 FA | 	rdbyte	local11, objptr
05614     B8 0F 86 F1 | 	sub	objptr, #440
05618     3F 75 0A F2 | 	cmp	local06, local11 wz
0561c     0C 00 90 5D |  if_ne	jmp	#LR__0225
05620                 | '           triggerNote(channel)
05620     35 5D 02 F6 | 	mov	arg01, local01
05624     FC EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
05628     78 00 90 FD | 	jmp	#LR__0227
0562c                 | LR__0225
0562c                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
0562c                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
0562c     B8 0F 06 F1 | 	add	objptr, #440
05630     07 75 C2 FA | 	rdbyte	local06, objptr
05634     14 0F 86 F1 | 	sub	objptr, #276
05638     07 7F C2 FA | 	rdbyte	local11, objptr
0563c     A4 0E 86 F1 | 	sub	objptr, #164
05640     3F 75 5A F2 | 	cmps	local06, local11 wcz
05644     5C 00 90 CD |  if_b	jmp	#LR__0226
05648     A4 0E 06 F1 | 	add	objptr, #164
0564c     07 83 C2 FA | 	rdbyte	local13, objptr
05650     41 81 02 F6 | 	mov	local12, local13
05654     01 80 86 F1 | 	sub	local12, #1
05658     03 0E 86 F1 | 	sub	objptr, #3
0565c     07 87 C2 FA | 	rdbyte	local15, objptr
05660     A1 0E 86 F1 | 	sub	objptr, #161
05664     43 85 02 F6 | 	mov	local14, local15
05668     40 85 0A F2 | 	cmp	local14, local12 wz
0566c     34 00 90 5D |  if_ne	jmp	#LR__0226
05670                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
05670     35 75 02 F6 | 	mov	local06, local01
05674     02 74 66 F0 | 	shl	local06, #2
05678     27 0F 06 F1 | 	add	objptr, #295
0567c     07 7D 02 F6 | 	mov	local10, objptr
05680     07 75 02 F1 | 	add	local06, objptr
05684     35 7F 02 F6 | 	mov	local11, local01
05688     02 7E 66 F0 | 	shl	local11, #2
0568c     48 0E 86 F1 | 	sub	objptr, #72
05690     07 77 02 F6 | 	mov	local07, objptr
05694     3A 81 02 FB | 	rdlong	local12, local06
05698     3B 7F 02 F1 | 	add	local11, local07
0569c     3F 81 62 FC | 	wrlong	local12, local11
056a0     DF 0E 86 F1 | 	sub	objptr, #223
056a4                 | LR__0226
056a4                 | LR__0227
056a4                 | LR__0228
056a4                 | LR__0229
056a4                 | LR__0230
056a4     AF F0 03 F6 | 	mov	ptra, fp
056a8     BF 00 A0 FD | 	call	#popregs_
056ac                 | _trackerplayer_spin2_handleEveryTickCommands_ret
056ac     2D 00 64 FD | 	ret
056b0                 | 
056b0                 | ' 
056b0                 | ' 
056b0                 | ' PRI doTremolo(channel) | depth, sineWave, speed
056b0                 | _trackerplayer_spin2_doTremolo
056b0     2E 31 02 F6 | 	mov	_var01, arg01
056b4     18 33 02 F6 | 	mov	_var02, _var01
056b8     8B 0F 06 F1 | 	add	objptr, #395
056bc     07 33 02 F1 | 	add	_var02, objptr
056c0     05 00 00 FF 
056c4     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
056c8     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
056cc     19 37 C2 FA | 	rdbyte	_var04, _var02
056d0     02 36 66 F0 | 	shl	_var04, #2
056d4     1A 37 02 F1 | 	add	_var04, _var03
056d8                 | ' 
056d8                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
056d8     1B 39 02 FB | 	rdlong	_var05, _var04
056dc     18 3B 02 F6 | 	mov	_var06, _var01
056e0     49 0E 06 F1 | 	add	objptr, #73
056e4     07 3B 02 F1 | 	add	_var06, objptr
056e8                 | '   depth    := cmd7_memoryY[channel]
056e8     1D 3D C2 FA | 	rdbyte	_var07, _var06
056ec     18 3F 02 F6 | 	mov	_var08, _var01
056f0     04 0E 06 F1 | 	add	objptr, #4
056f4     07 3F 02 F1 | 	add	_var08, objptr
056f8                 | '   speed    := cmd7_memoryX[channel]
056f8     1F 41 C2 FA | 	rdbyte	_var09, _var08
056fc                 | ' 
056fc                 | '   CASE_FAST vibratoType[channel]
056fc     18 43 02 F6 | 	mov	_var10, _var01
05700     18 0E 86 F1 | 	sub	objptr, #24
05704     07 45 02 F6 | 	mov	_var11, objptr
05708     07 43 02 F1 | 	add	_var10, objptr
0570c     21 47 C2 FA | 	rdbyte	_var12, _var10
05710     03 46 26 F3 | 	fle	_var12, #3
05714     23 49 02 F6 | 	mov	_var13, _var12
05718     05 00 00 FF 
0571c     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05720     C0 0F 86 F1 | 	sub	objptr, #448
05724     30 48 62 FD | 	jmprel	_var13
05728                 | LR__0231
05728     0C 00 90 FD | 	jmp	#LR__0232
0572c     30 00 90 FD | 	jmp	#LR__0233
05730     6C 00 90 FD | 	jmp	#LR__0234
05734     B4 00 90 FD | 	jmp	#LR__0235
05738                 | LR__0232
05738                 | ' 
05738                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
05738     1C 3D 02 FD | 	qmul	_var07, _var05
0573c     18 4A 62 FD | 	getqx	_var14
05740     06 4A C6 F0 | 	sar	_var14, #6
05744     18 4D 02 F6 | 	mov	_var15, _var01
05748     02 4C 66 F0 | 	shl	_var15, #2
0574c     0F 0F 06 F1 | 	add	objptr, #271
05750     07 4D 02 F1 | 	add	_var15, objptr
05754     26 4B 62 FC | 	wrlong	_var14, _var15
05758     0F 0F 86 F1 | 	sub	objptr, #271
0575c     8C 00 90 FD | 	jmp	#LR__0235
05760                 | LR__0233
05760                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
05760     18 4D 02 F6 | 	mov	_var15, _var01
05764     8B 0F 06 F1 | 	add	objptr, #395
05768     07 4D 02 F1 | 	add	_var15, objptr
0576c     26 4F C2 FA | 	rdbyte	_var16, _var15
05770     03 4E 66 F0 | 	shl	_var16, #3
05774     27 3D 02 FD | 	qmul	_var07, _var16
05778     18 4A 62 FD | 	getqx	_var14
0577c     00 4B 86 F1 | 	sub	_var14, #256
05780     06 4A C6 F0 | 	sar	_var14, #6
05784     18 51 02 F6 | 	mov	_var17, _var01
05788     02 50 66 F0 | 	shl	_var17, #2
0578c     7C 0E 86 F1 | 	sub	objptr, #124
05790     07 51 02 F1 | 	add	_var17, objptr
05794     28 4B 62 FC | 	wrlong	_var14, _var17
05798     0F 0F 86 F1 | 	sub	objptr, #271
0579c     4C 00 90 FD | 	jmp	#LR__0235
057a0                 | LR__0234
057a0                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
057a0     18 4D 02 F6 | 	mov	_var15, _var01
057a4     8B 0F 06 F1 | 	add	objptr, #395
057a8     07 53 02 F6 | 	mov	_var18, objptr
057ac     07 4D 02 F1 | 	add	_var15, objptr
057b0     26 4F C2 FA | 	rdbyte	_var16, _var15
057b4     20 4E 06 F5 | 	and	_var16, #32
057b8     04 4E 66 F0 | 	shl	_var16, #4
057bc     27 3D 02 FD | 	qmul	_var07, _var16
057c0     18 54 62 FD | 	getqx	_var19
057c4     2A 4B 02 F6 | 	mov	_var14, _var19
057c8     00 4B 86 F1 | 	sub	_var14, #256
057cc     06 4A C6 F0 | 	sar	_var14, #6
057d0     18 51 02 F6 | 	mov	_var17, _var01
057d4     02 50 66 F0 | 	shl	_var17, #2
057d8     7C 0E 86 F1 | 	sub	objptr, #124
057dc     07 57 02 F6 | 	mov	_var20, objptr
057e0     07 51 02 F1 | 	add	_var17, objptr
057e4     28 4B 62 FC | 	wrlong	_var14, _var17
057e8     0F 0F 86 F1 | 	sub	objptr, #271
057ec                 | LR__0235
057ec     8B 0F 06 F1 | 	add	objptr, #395
057f0     07 31 02 F1 | 	add	_var01, objptr
057f4     18 59 C2 FA | 	rdbyte	_var21, _var01
057f8     20 59 02 F1 | 	add	_var21, _var09
057fc     3F 58 06 F5 | 	and	_var21, #63
05800                 | ' 
05800                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05800     18 59 42 FC | 	wrbyte	_var21, _var01
05804     8B 0F 86 F1 | 	sub	objptr, #395
05808                 | _trackerplayer_spin2_doTremolo_ret
05808     2D 00 64 FD | 	ret
0580c                 | 
0580c                 | ' 
0580c                 | ' 
0580c                 | ' PRI doVibrato(channel) | depth, sineWave, speed
0580c                 | _trackerplayer_spin2_doVibrato
0580c     2E 31 02 F6 | 	mov	_var01, arg01
05810     18 33 02 F6 | 	mov	_var02, _var01
05814     87 0F 06 F1 | 	add	objptr, #391
05818     07 33 02 F1 | 	add	_var02, objptr
0581c     05 00 00 FF 
05820     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05824     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05828     19 37 C2 FA | 	rdbyte	_var04, _var02
0582c     02 36 66 F0 | 	shl	_var04, #2
05830     1A 37 02 F1 | 	add	_var04, _var03
05834                 | ' 
05834                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05834     1B 39 02 FB | 	rdlong	_var05, _var04
05838     18 3B 02 F6 | 	mov	_var06, _var01
0583c     45 0E 06 F1 | 	add	objptr, #69
05840     07 3B 02 F1 | 	add	_var06, objptr
05844                 | '   depth    := cmd4_memoryY[channel]
05844     1D 3D C2 FA | 	rdbyte	_var07, _var06
05848     18 3F 02 F6 | 	mov	_var08, _var01
0584c     04 0E 06 F1 | 	add	objptr, #4
05850     07 3F 02 F1 | 	add	_var08, objptr
05854                 | '   speed    := cmd4_memoryX[channel]
05854     1F 41 C2 FA | 	rdbyte	_var09, _var08
05858                 | ' 
05858                 | '   CASE_FAST vibratoType[channel]
05858     18 43 02 F6 | 	mov	_var10, _var01
0585c     10 0E 86 F1 | 	sub	objptr, #16
05860     07 45 02 F6 | 	mov	_var11, objptr
05864     07 43 02 F1 | 	add	_var10, objptr
05868     21 47 C2 FA | 	rdbyte	_var12, _var10
0586c     03 46 26 F3 | 	fle	_var12, #3
05870     23 49 02 F6 | 	mov	_var13, _var12
05874     05 00 00 FF 
05878     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
0587c     C0 0F 86 F1 | 	sub	objptr, #448
05880     30 48 62 FD | 	jmprel	_var13
05884                 | LR__0236
05884     0C 00 90 FD | 	jmp	#LR__0237
05888     30 00 90 FD | 	jmp	#LR__0238
0588c     6C 00 90 FD | 	jmp	#LR__0239
05890     B4 00 90 FD | 	jmp	#LR__0240
05894                 | LR__0237
05894                 | ' 
05894                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
05894     1C 3D 02 FD | 	qmul	_var07, _var05
05898     18 4A 62 FD | 	getqx	_var14
0589c     07 4A C6 F0 | 	sar	_var14, #7
058a0     18 4D 02 F6 | 	mov	_var15, _var01
058a4     02 4C 66 F0 | 	shl	_var15, #2
058a8     EF 0E 06 F1 | 	add	objptr, #239
058ac     07 4D 02 F1 | 	add	_var15, objptr
058b0     26 4B 62 FC | 	wrlong	_var14, _var15
058b4     EF 0E 86 F1 | 	sub	objptr, #239
058b8     8C 00 90 FD | 	jmp	#LR__0240
058bc                 | LR__0238
058bc                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
058bc     18 4D 02 F6 | 	mov	_var15, _var01
058c0     87 0F 06 F1 | 	add	objptr, #391
058c4     07 4D 02 F1 | 	add	_var15, objptr
058c8     26 4F C2 FA | 	rdbyte	_var16, _var15
058cc     03 4E 66 F0 | 	shl	_var16, #3
058d0     27 3D 02 FD | 	qmul	_var07, _var16
058d4     18 4A 62 FD | 	getqx	_var14
058d8     00 4B 86 F1 | 	sub	_var14, #256
058dc     07 4A C6 F0 | 	sar	_var14, #7
058e0     18 51 02 F6 | 	mov	_var17, _var01
058e4     02 50 66 F0 | 	shl	_var17, #2
058e8     98 0E 86 F1 | 	sub	objptr, #152
058ec     07 51 02 F1 | 	add	_var17, objptr
058f0     28 4B 62 FC | 	wrlong	_var14, _var17
058f4     EF 0E 86 F1 | 	sub	objptr, #239
058f8     4C 00 90 FD | 	jmp	#LR__0240
058fc                 | LR__0239
058fc                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
058fc     18 4D 02 F6 | 	mov	_var15, _var01
05900     87 0F 06 F1 | 	add	objptr, #391
05904     07 53 02 F6 | 	mov	_var18, objptr
05908     07 4D 02 F1 | 	add	_var15, objptr
0590c     26 4F C2 FA | 	rdbyte	_var16, _var15
05910     20 4E 06 F5 | 	and	_var16, #32
05914     04 4E 66 F0 | 	shl	_var16, #4
05918     27 3D 02 FD | 	qmul	_var07, _var16
0591c     18 54 62 FD | 	getqx	_var19
05920     2A 4B 02 F6 | 	mov	_var14, _var19
05924     00 4B 86 F1 | 	sub	_var14, #256
05928     07 4A C6 F0 | 	sar	_var14, #7
0592c     18 51 02 F6 | 	mov	_var17, _var01
05930     02 50 66 F0 | 	shl	_var17, #2
05934     98 0E 86 F1 | 	sub	objptr, #152
05938     07 57 02 F6 | 	mov	_var20, objptr
0593c     07 51 02 F1 | 	add	_var17, objptr
05940     28 4B 62 FC | 	wrlong	_var14, _var17
05944     EF 0E 86 F1 | 	sub	objptr, #239
05948                 | LR__0240
05948     87 0F 06 F1 | 	add	objptr, #391
0594c     07 31 02 F1 | 	add	_var01, objptr
05950     18 59 C2 FA | 	rdbyte	_var21, _var01
05954     20 59 02 F1 | 	add	_var21, _var09
05958     3F 58 06 F5 | 	and	_var21, #63
0595c                 | ' 
0595c                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
0595c     18 59 42 FC | 	wrbyte	_var21, _var01
05960     87 0F 86 F1 | 	sub	objptr, #391
05964                 | _trackerplayer_spin2_doVibrato_ret
05964     2D 00 64 FD | 	ret
05968                 | 
05968                 | ' 
05968                 | ' 
05968                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05968                 | _trackerplayer_spin2_doPortamento
05968                 | ' 
05968                 | '   if period == currPeriod[channel]
05968     2E 31 02 F6 | 	mov	_var01, arg01
0596c     02 30 66 F0 | 	shl	_var01, #2
05970     DF 0E 06 F1 | 	add	objptr, #223
05974     07 33 02 F6 | 	mov	_var02, objptr
05978     07 31 02 F1 | 	add	_var01, objptr
0597c     18 35 02 FB | 	rdlong	_var03, _var01
05980     1A 5F 0A F2 | 	cmp	arg02, _var03 wz
05984                 | '     return
05984     DF 0E 86 F1 | 	sub	objptr, #223
05988     D4 01 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
0598c                 | ' 
0598c                 | '   if period > 0
0598c     00 5E 5E F2 | 	cmps	arg02, #0 wcz
05990     1C 00 90 ED |  if_be	jmp	#LR__0241
05994     2E 37 02 F6 | 	mov	_var04, arg01
05998     02 36 66 F0 | 	shl	_var04, #2
0599c     97 0F 06 F1 | 	add	objptr, #407
059a0     07 37 02 F1 | 	add	_var04, objptr
059a4                 | '     portamentoPeriodMemory[channel] := period
059a4     1B 5F 62 FC | 	wrlong	arg02, _var04
059a8                 | '   else
059a8     97 0F 86 F1 | 	sub	objptr, #407
059ac     18 00 90 FD | 	jmp	#LR__0242
059b0                 | LR__0241
059b0     2E 39 02 F6 | 	mov	_var05, arg01
059b4     02 38 66 F0 | 	shl	_var05, #2
059b8     97 0F 06 F1 | 	add	objptr, #407
059bc     07 39 02 F1 | 	add	_var05, objptr
059c0                 | '     period := portamentoPeriodMemory[channel]
059c0     1C 5F 02 FB | 	rdlong	arg02, _var05
059c4     97 0F 86 F1 | 	sub	objptr, #407
059c8                 | LR__0242
059c8                 | ' 
059c8                 | '   if period > currPeriod[channel]
059c8     2E 31 02 F6 | 	mov	_var01, arg01
059cc     02 30 66 F0 | 	shl	_var01, #2
059d0     DF 0E 06 F1 | 	add	objptr, #223
059d4     07 31 02 F1 | 	add	_var01, objptr
059d8     18 35 02 FB | 	rdlong	_var03, _var01
059dc     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
059e0     DF 0E 86 F1 | 	sub	objptr, #223
059e4     50 00 90 ED |  if_be	jmp	#LR__0243
059e8     2E 3B 02 F6 | 	mov	_var06, arg01
059ec     02 3A 66 F0 | 	shl	_var06, #2
059f0     DF 0E 06 F1 | 	add	objptr, #223
059f4     07 3B 02 F1 | 	add	_var06, objptr
059f8     2E 3D 02 F6 | 	mov	_var07, arg01
059fc     E9 0E 06 F1 | 	add	objptr, #233
05a00     1D 3F 02 FB | 	rdlong	_var08, _var06
05a04     07 3D 02 F1 | 	add	_var07, objptr
05a08     1E 33 C2 FA | 	rdbyte	_var02, _var07
05a0c     19 3F 02 F1 | 	add	_var08, _var02
05a10                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05a10     1D 3F 62 FC | 	wrlong	_var08, _var06
05a14     2E 41 02 F6 | 	mov	_var09, arg01
05a18     02 40 66 F0 | 	shl	_var09, #2
05a1c     E9 0E 86 F1 | 	sub	objptr, #233
05a20     07 41 02 F1 | 	add	_var09, objptr
05a24     20 43 02 FB | 	rdlong	_var10, _var09
05a28     2F 43 62 F3 | 	fles	_var10, arg02
05a2c                 | '     currPeriod[channel] <#= period
05a2c     20 43 62 FC | 	wrlong	_var10, _var09
05a30     DF 0E 86 F1 | 	sub	objptr, #223
05a34     6C 00 90 FD | 	jmp	#LR__0245
05a38                 | LR__0243
05a38                 | ' 
05a38                 | '   elseif period < currPeriod[channel]
05a38     2E 31 02 F6 | 	mov	_var01, arg01
05a3c     02 30 66 F0 | 	shl	_var01, #2
05a40     DF 0E 06 F1 | 	add	objptr, #223
05a44     07 31 02 F1 | 	add	_var01, objptr
05a48     18 35 02 FB | 	rdlong	_var03, _var01
05a4c     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a50     DF 0E 86 F1 | 	sub	objptr, #223
05a54     4C 00 90 3D |  if_ae	jmp	#LR__0244
05a58     2E 45 02 F6 | 	mov	_var11, arg01
05a5c     02 44 66 F0 | 	shl	_var11, #2
05a60     DF 0E 06 F1 | 	add	objptr, #223
05a64     07 45 02 F1 | 	add	_var11, objptr
05a68     2E 47 02 F6 | 	mov	_var12, arg01
05a6c     E9 0E 06 F1 | 	add	objptr, #233
05a70     22 49 02 FB | 	rdlong	_var13, _var11
05a74     07 47 02 F1 | 	add	_var12, objptr
05a78     23 33 C2 FA | 	rdbyte	_var02, _var12
05a7c     19 49 82 F1 | 	sub	_var13, _var02
05a80                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05a80     22 49 62 FC | 	wrlong	_var13, _var11
05a84     2E 4B 02 F6 | 	mov	_var14, arg01
05a88     02 4A 66 F0 | 	shl	_var14, #2
05a8c     E9 0E 86 F1 | 	sub	objptr, #233
05a90     07 4B 02 F1 | 	add	_var14, objptr
05a94     25 4D 02 FB | 	rdlong	_var15, _var14
05a98     2F 4D 42 F3 | 	fges	_var15, arg02
05a9c                 | '     currPeriod[channel] #>= period
05a9c     25 4D 62 FC | 	wrlong	_var15, _var14
05aa0     DF 0E 86 F1 | 	sub	objptr, #223
05aa4                 | LR__0244
05aa4                 | LR__0245
05aa4                 | ' 
05aa4                 | '   ' Handle glissando if activated
05aa4                 | '   if portaGlissando[channel] > 0
05aa4     2E 31 02 F6 | 	mov	_var01, arg01
05aa8     BC 0F 06 F1 | 	add	objptr, #444
05aac     07 31 02 F1 | 	add	_var01, objptr
05ab0     18 35 C2 FA | 	rdbyte	_var03, _var01
05ab4     00 34 5E F2 | 	cmps	_var03, #0 wcz
05ab8     BC 0F 86 F1 | 	sub	objptr, #444
05abc     A0 00 90 ED |  if_be	jmp	#LR__0248
05ac0     2E 4F 02 F6 | 	mov	_var16, arg01
05ac4     02 4E 66 F0 | 	shl	_var16, #2
05ac8     DF 0E 06 F1 | 	add	objptr, #223
05acc     07 4F 02 F1 | 	add	_var16, objptr
05ad0                 | ' 
05ad0                 | '     tempPeriod := currPeriod[channel]
05ad0     27 51 02 FB | 	rdlong	_var17, _var16
05ad4                 | ' 
05ad4                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05ad4     00 52 06 F6 | 	mov	_var18, #0
05ad8     DF 0E 86 F1 | 	sub	objptr, #223
05adc     84 A5 9F FE | 	loc	pa,	#(@LR__0247-@LR__0246)
05ae0     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ae4                 | LR__0246
05ae4     06 00 00 FF 
05ae8     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05aec     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05af0     2E 55 02 F6 | 	mov	_var19, arg01
05af4     D3 0E 06 F1 | 	add	objptr, #211
05af8     07 55 02 F1 | 	add	_var19, objptr
05afc     2A 33 C2 FA | 	rdbyte	_var02, _var19
05b00     19 57 02 F6 | 	mov	_var20, _var02
05b04     03 56 66 F0 | 	shl	_var20, #3
05b08     19 57 02 F1 | 	add	_var20, _var02
05b0c     03 56 66 F0 | 	shl	_var20, #3
05b10     2B 35 02 F1 | 	add	_var03, _var20
05b14     29 59 02 F6 | 	mov	_var21, _var18
05b18     01 58 66 F0 | 	shl	_var21, #1
05b1c     1A 59 02 F1 | 	add	_var21, _var03
05b20                 | ' 
05b20                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05b20     2C 5B E2 FA | 	rdword	_var22, _var21
05b24                 | '       if tempPeriod >= periodStep
05b24     2D 51 5A F2 | 	cmps	_var17, _var22 wcz
05b28                 | '         i += 1000
05b28     06 00 00 FF 
05b2c     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05b30     D3 0E 86 F1 | 	sub	objptr, #211
05b34     01 00 00 3F 
05b38     E8 53 06 31 |  if_ae	add	_var18, ##1000
05b3c     01 52 06 F1 | 	add	_var18, #1
05b40     24 52 5E F2 | 	cmps	_var18, #36 wcz
05b44     9C FF 9F CD |  if_b	jmp	#LR__0246
05b48                 | LR__0247
05b48     28 5B 82 F1 | 	sub	_var22, _var17
05b4c     02 5C 66 F0 | 	shl	arg01, #2
05b50     EF 0E 06 F1 | 	add	objptr, #239
05b54     07 5D 02 F1 | 	add	arg01, objptr
05b58                 | ' 
05b58                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05b58     2E 5B 62 FC | 	wrlong	_var22, arg01
05b5c     EF 0E 86 F1 | 	sub	objptr, #239
05b60                 | LR__0248
05b60                 | _trackerplayer_spin2_doPortamento_ret
05b60     2D 00 64 FD | 	ret
05b64                 | 
05b64                 | ' 
05b64                 | ' 
05b64                 | ' PRI doVolumeSlide(channel)
05b64                 | _trackerplayer_spin2_doVolumeSlide
05b64                 | ' 
05b64                 | '   if x > 0
05b64     B7 0F 06 F1 | 	add	objptr, #439
05b68     07 31 C2 FA | 	rdbyte	_var01, objptr
05b6c     B7 0F 86 F1 | 	sub	objptr, #439
05b70     00 30 5E F2 | 	cmps	_var01, #0 wcz
05b74     28 00 90 ED |  if_be	jmp	#LR__0249
05b78     2E 33 02 F6 | 	mov	_var02, arg01
05b7c     02 32 66 F0 | 	shl	_var02, #2
05b80     FF 0E 06 F1 | 	add	objptr, #255
05b84     07 33 02 F1 | 	add	_var02, objptr
05b88     19 35 02 FB | 	rdlong	_var03, _var02
05b8c     B8 0E 06 F1 | 	add	objptr, #184
05b90     07 37 C2 FA | 	rdbyte	_var04, objptr
05b94     B7 0F 86 F1 | 	sub	objptr, #439
05b98     1B 35 02 F1 | 	add	_var03, _var04
05b9c                 | '     currVolume[channel] += x
05b9c     19 35 62 FC | 	wrlong	_var03, _var02
05ba0                 | LR__0249
05ba0                 | '   if y > 0
05ba0     B8 0F 06 F1 | 	add	objptr, #440
05ba4     07 31 C2 FA | 	rdbyte	_var01, objptr
05ba8     B8 0F 86 F1 | 	sub	objptr, #440
05bac     00 30 5E F2 | 	cmps	_var01, #0 wcz
05bb0     24 00 90 ED |  if_be	jmp	#LR__0250
05bb4     02 5C 66 F0 | 	shl	arg01, #2
05bb8     FF 0E 06 F1 | 	add	objptr, #255
05bbc     07 5D 02 F1 | 	add	arg01, objptr
05bc0     2E 39 02 FB | 	rdlong	_var05, arg01
05bc4     B9 0E 06 F1 | 	add	objptr, #185
05bc8     07 37 C2 FA | 	rdbyte	_var04, objptr
05bcc     B8 0F 86 F1 | 	sub	objptr, #440
05bd0     1B 39 82 F1 | 	sub	_var05, _var04
05bd4                 | '     currVolume[channel] -= y
05bd4     2E 39 62 FC | 	wrlong	_var05, arg01
05bd8                 | LR__0250
05bd8                 | _trackerplayer_spin2_doVolumeSlide_ret
05bd8     2D 00 64 FD | 	ret
05bdc                 | hubexit
05bdc     81 00 80 FD | 	jmp	#cogexit
05be0                 | 
05be0                 | __system___setbaud
05be0     14 0A 07 FB | 	rdlong	muldiva_, #20
05be4     2E 0D 03 F6 | 	mov	muldivb_, arg01
05be8     D0 00 A0 FD | 	call	#divide_
05bec     40 7C 64 FD | 	dirl	#62
05bf0     40 7E 64 FD | 	dirl	#63
05bf4     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
05bf8     10 0C 67 F0 | 	shl	muldivb_, #16
05bfc     07 5E 06 F6 | 	mov	arg02, #7
05c00     86 5F 02 F1 | 	add	arg02, muldivb_
05c04     3E F8 0C FC | 	wrpin	#124, #62
05c08     3E 5E 16 FC | 	wxpin	arg02, #62
05c0c     3F 7C 0C FC | 	wrpin	#62, #63
05c10     14 5E 06 F1 | 	add	arg02, #20
05c14     3F 5E 16 FC | 	wxpin	arg02, #63
05c18     41 7C 64 FD | 	dirh	#62
05c1c     41 7E 64 FD | 	dirh	#63
05c20                 | __system___setbaud_ret
05c20     2D 00 64 FD | 	ret
05c24                 | 
05c24                 | __system___txraw
05c24     02 5A 05 F6 | 	mov	COUNT_, #2
05c28     B0 00 A0 FD | 	call	#pushregs_
05c2c     2E 6B 02 F6 | 	mov	local01, arg01
05c30     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05c34     0C 00 90 5D |  if_ne	jmp	#LR__0251
05c38     42 0F 00 FF 
05c3c     80 5C 06 F6 | 	mov	arg01, ##2000000
05c40     9C FF BF FD | 	call	#__system___setbaud
05c44                 | LR__0251
05c44     3E 6A 26 FC | 	wypin	local01, #62
05c48     1F 02 64 FD | 	waitx	#1
05c4c     B8 A3 9F FE | 	loc	pa,	#(@LR__0253-@LR__0252)
05c50     93 00 A0 FD | 	call	#FCACHE_LOAD_
05c54                 | LR__0252
05c54     40 7C 74 FD | 	testp	#62 wc
05c58     F8 FF 9F 3D |  if_nc	jmp	#LR__0252
05c5c                 | LR__0253
05c5c     01 2A 06 F6 | 	mov	result1, #1
05c60     AF F0 03 F6 | 	mov	ptra, fp
05c64     BF 00 A0 FD | 	call	#popregs_
05c68                 | __system___txraw_ret
05c68     2D 00 64 FD | 	ret
05c6c                 | 
05c6c                 | __system___rxraw
05c6c     0D 5A 05 F6 | 	mov	COUNT_, #13
05c70     B0 00 A0 FD | 	call	#pushregs_
05c74     2E 6B 02 F6 | 	mov	local01, arg01
05c78     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05c7c     0C 00 90 5D |  if_ne	jmp	#LR__0254
05c80     42 0F 00 FF 
05c84     80 5C 06 F6 | 	mov	arg01, ##2000000
05c88     54 FF BF FD | 	call	#__system___setbaud
05c8c                 | LR__0254
05c8c     00 6A 0E F2 | 	cmp	local01, #0 wz
05c90     18 00 90 AD |  if_e	jmp	#LR__0255
05c94     14 6E 06 FB | 	rdlong	local03, #20
05c98     0A 6E 46 F0 | 	shr	local03, #10
05c9c     37 6B 02 FD | 	qmul	local01, local03
05ca0     18 70 62 FD | 	getqx	local04
05ca4     1A 72 62 FD | 	getct	local05
05ca8     38 73 02 F1 | 	add	local05, local04
05cac                 | LR__0255
05cac     01 74 66 F6 | 	neg	local06, #1
05cb0     00 76 06 F6 | 	mov	local07, #0
05cb4     04 14 06 F1 | 	add	ptr___system__dat__, #4
05cb8     0A 79 02 FB | 	rdlong	local08, ptr___system__dat__
05cbc     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05cc0                 | LR__0256
05cc0     08 78 16 F4 | 	testb	local08, #8 wc
05cc4     09 78 76 F4 | 	testbn	local08, #9 andc
05cc8     0A 78 46 F0 | 	shr	local08, #10
05ccc     01 76 06 C6 |  if_b	mov	local07, #1
05cd0     10 00 90 CD |  if_b	jmp	#LR__0257
05cd4     40 7E 6C FD | 	testp	#63 wz
05cd8     01 76 06 A6 |  if_e	mov	local07, #1
05cdc     3F 78 8E AA |  if_e	rdpin	local08, #63
05ce0     04 78 46 A0 |  if_e	shr	local08, #4
05ce4                 | LR__0257
05ce4     00 6C 06 F6 | 	mov	local02, #0
05ce8     00 76 0E F2 | 	cmp	local07, #0 wz
05cec     01 6C 66 56 |  if_ne	neg	local02, #1
05cf0     00 7A 06 F6 | 	mov	local09, #0
05cf4     00 7C 06 F6 | 	mov	local10, #0
05cf8     00 6A 0E F2 | 	cmp	local01, #0 wz
05cfc     01 7C 66 56 |  if_ne	neg	local10, #1
05d00     00 7E 06 F6 | 	mov	local11, #0
05d04     00 80 06 F6 | 	mov	local12, #0
05d08     1A 82 62 FD | 	getct	local13
05d0c     39 83 82 F1 | 	sub	local13, local05
05d10     00 82 5E F2 | 	cmps	local13, #0 wcz
05d14     01 80 66 C6 |  if_b	neg	local12, #1
05d18     00 80 0E F2 | 	cmp	local12, #0 wz
05d1c     01 7E 66 56 |  if_ne	neg	local11, #1
05d20     3F 7D CA F7 | 	test	local10, local11 wz
05d24     01 7A 66 56 |  if_ne	neg	local09, #1
05d28     3D 6D 4A F5 | 	or	local02, local09 wz
05d2c     90 FF 9F AD |  if_e	jmp	#LR__0256
05d30     00 76 0E F2 | 	cmp	local07, #0 wz
05d34     3C 75 02 56 |  if_ne	mov	local06, local08
05d38     FF 74 06 55 |  if_ne	and	local06, #255
05d3c     04 14 06 F1 | 	add	ptr___system__dat__, #4
05d40     0A 79 62 FC | 	wrlong	local08, ptr___system__dat__
05d44     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05d48     3A 2B 02 F6 | 	mov	result1, local06
05d4c     AF F0 03 F6 | 	mov	ptra, fp
05d50     BF 00 A0 FD | 	call	#popregs_
05d54                 | __system___rxraw_ret
05d54     2D 00 64 FD | 	ret
05d58                 | 
05d58                 | __system____builtin_memmove
05d58     2E 31 02 F6 | 	mov	_var01, arg01
05d5c     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05d60     50 00 90 3D |  if_ae	jmp	#LR__0265
05d64     B8 A2 9F FE | 	loc	pa,	#(@LR__0259-@LR__0258)
05d68     93 00 A0 FD | 	call	#FCACHE_LOAD_
05d6c                 | LR__0258
05d6c     03 60 5E F2 | 	cmps	arg03, #3 wcz
05d70     18 00 90 ED |  if_be	jmp	#LR__0260
05d74     2F 33 02 FB | 	rdlong	_var02, arg02
05d78     2E 33 62 FC | 	wrlong	_var02, arg01
05d7c     04 5C 06 F1 | 	add	arg01, #4
05d80     04 5E 06 F1 | 	add	arg02, #4
05d84     04 60 86 F1 | 	sub	arg03, #4
05d88     E0 FF 9F FD | 	jmp	#LR__0258
05d8c                 | LR__0259
05d8c                 | LR__0260
05d8c     30 35 0A F6 | 	mov	_var03, arg03 wz
05d90     4C 00 90 AD |  if_e	jmp	#LR__0271
05d94     7C A2 9F FE | 	loc	pa,	#(@LR__0263-@LR__0261)
05d98     93 00 A0 FD | 	call	#FCACHE_LOAD_
05d9c                 | LR__0261
05d9c     1A 09 D8 FC | 	rep	@LR__0264, _var03
05da0                 | LR__0262
05da0     2F 33 C2 FA | 	rdbyte	_var02, arg02
05da4     2E 33 42 FC | 	wrbyte	_var02, arg01
05da8     01 5C 06 F1 | 	add	arg01, #1
05dac     01 5E 06 F1 | 	add	arg02, #1
05db0                 | LR__0263
05db0                 | LR__0264
05db0     2C 00 90 FD | 	jmp	#LR__0271
05db4                 | LR__0265
05db4     30 5D 02 F1 | 	add	arg01, arg03
05db8     30 5F 02 F1 | 	add	arg02, arg03
05dbc     30 37 0A F6 | 	mov	_var04, arg03 wz
05dc0     1C 00 90 AD |  if_e	jmp	#LR__0270
05dc4     4C A2 9F FE | 	loc	pa,	#(@LR__0268-@LR__0266)
05dc8     93 00 A0 FD | 	call	#FCACHE_LOAD_
05dcc                 | LR__0266
05dcc     1B 09 D8 FC | 	rep	@LR__0269, _var04
05dd0                 | LR__0267
05dd0     01 5C 86 F1 | 	sub	arg01, #1
05dd4     01 5E 86 F1 | 	sub	arg02, #1
05dd8     2F 33 C2 FA | 	rdbyte	_var02, arg02
05ddc     2E 33 42 FC | 	wrbyte	_var02, arg01
05de0                 | LR__0268
05de0                 | LR__0269
05de0                 | LR__0270
05de0                 | LR__0271
05de0     18 2B 02 F6 | 	mov	result1, _var01
05de4                 | __system____builtin_memmove_ret
05de4     2D 00 64 FD | 	ret
05de8                 | 
05de8                 | __system__longmove
05de8     2E 31 02 F6 | 	mov	_var01, arg01
05dec     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05df0     28 00 90 3D |  if_ae	jmp	#LR__0276
05df4     30 33 0A F6 | 	mov	_var02, arg03 wz
05df8     54 00 90 AD |  if_e	jmp	#LR__0282
05dfc     14 A2 9F FE | 	loc	pa,	#(@LR__0274-@LR__0272)
05e00     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e04                 | LR__0272
05e04     19 09 D8 FC | 	rep	@LR__0275, _var02
05e08                 | LR__0273
05e08     2F 35 02 FB | 	rdlong	_var03, arg02
05e0c     2E 35 62 FC | 	wrlong	_var03, arg01
05e10     04 5C 06 F1 | 	add	arg01, #4
05e14     04 5E 06 F1 | 	add	arg02, #4
05e18                 | LR__0274
05e18                 | LR__0275
05e18     34 00 90 FD | 	jmp	#LR__0282
05e1c                 | LR__0276
05e1c     30 37 02 F6 | 	mov	_var04, arg03
05e20     02 36 66 F0 | 	shl	_var04, #2
05e24     1B 5D 02 F1 | 	add	arg01, _var04
05e28     1B 5F 02 F1 | 	add	arg02, _var04
05e2c     30 39 0A F6 | 	mov	_var05, arg03 wz
05e30     1C 00 90 AD |  if_e	jmp	#LR__0281
05e34     DC A1 9F FE | 	loc	pa,	#(@LR__0279-@LR__0277)
05e38     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e3c                 | LR__0277
05e3c     1C 09 D8 FC | 	rep	@LR__0280, _var05
05e40                 | LR__0278
05e40     04 5C 86 F1 | 	sub	arg01, #4
05e44     04 5E 86 F1 | 	sub	arg02, #4
05e48     2F 35 02 FB | 	rdlong	_var03, arg02
05e4c     2E 35 62 FC | 	wrlong	_var03, arg01
05e50                 | LR__0279
05e50                 | LR__0280
05e50                 | LR__0281
05e50                 | LR__0282
05e50     18 2B 02 F6 | 	mov	result1, _var01
05e54                 | __system__longmove_ret
05e54     2D 00 64 FD | 	ret
05e58                 | 
05e58                 | __system____topofstack
05e58     00 5A 05 F6 | 	mov	COUNT_, #0
05e5c     B0 00 A0 FD | 	call	#pushregs_
05e60     0C F0 07 F1 | 	add	ptra, #12
05e64     04 5E 05 F1 | 	add	fp, #4
05e68     AF 5C 62 FC | 	wrlong	arg01, fp
05e6c     AF 2A 02 F6 | 	mov	result1, fp
05e70     04 5E 85 F1 | 	sub	fp, #4
05e74     AF F0 03 F6 | 	mov	ptra, fp
05e78     BF 00 A0 FD | 	call	#popregs_
05e7c                 | __system____topofstack_ret
05e7c     2D 00 64 FD | 	ret
05e80                 | 
05e80                 | __system___make_methodptr
05e80     04 5A 05 F6 | 	mov	COUNT_, #4
05e84     B0 00 A0 FD | 	call	#pushregs_
05e88     2E 6B 02 F6 | 	mov	local01, arg01
05e8c     2F 6D 02 F6 | 	mov	local02, arg02
05e90     08 5C 06 F6 | 	mov	arg01, #8
05e94     5C 0C B0 FD | 	call	#__system___gc_alloc_managed
05e98     15 6F 0A F6 | 	mov	local03, result1 wz
05e9c     10 00 90 AD |  if_e	jmp	#LR__0283
05ea0     37 6B 62 FC | 	wrlong	local01, local03
05ea4     37 71 02 F6 | 	mov	local04, local03
05ea8     04 70 06 F1 | 	add	local04, #4
05eac     38 6D 62 FC | 	wrlong	local02, local04
05eb0                 | LR__0283
05eb0     37 2B 02 F6 | 	mov	result1, local03
05eb4     AF F0 03 F6 | 	mov	ptra, fp
05eb8     BF 00 A0 FD | 	call	#popregs_
05ebc                 | __system___make_methodptr_ret
05ebc     2D 00 64 FD | 	ret
05ec0                 | 
05ec0                 | __system___lockmem
05ec0     02 5A 05 F6 | 	mov	COUNT_, #2
05ec4     B0 00 A0 FD | 	call	#pushregs_
05ec8     01 2A 62 FD | 	cogid	result1
05ecc     15 6B 02 F6 | 	mov	local01, result1
05ed0     00 6B 06 F1 | 	add	local01, #256
05ed4                 | LR__0284
05ed4     2E 6D 0A FB | 	rdlong	local02, arg01 wz
05ed8     2E 6B 62 AC |  if_e	wrlong	local01, arg01
05edc     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05ee0     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05ee4     35 6D 0A F2 | 	cmp	local02, local01 wz
05ee8     E8 FF 9F 5D |  if_ne	jmp	#LR__0284
05eec     AF F0 03 F6 | 	mov	ptra, fp
05ef0     BF 00 A0 FD | 	call	#popregs_
05ef4                 | __system___lockmem_ret
05ef4     2D 00 64 FD | 	ret
05ef8                 | 
05ef8                 | __system___string_concat
05ef8     07 5A 05 F6 | 	mov	COUNT_, #7
05efc     B0 00 A0 FD | 	call	#pushregs_
05f00     2E 6B 02 F6 | 	mov	local01, arg01
05f04     2F 6D 02 F6 | 	mov	local02, arg02
05f08     35 5D 02 F6 | 	mov	arg01, local01
05f0c     00 6E 06 F6 | 	mov	local03, #0
05f10     FC A0 9F FE | 	loc	pa,	#(@LR__0286-@LR__0285)
05f14     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f18                 | LR__0285
05f18     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f1c     01 6E 06 51 |  if_ne	add	local03, #1
05f20     01 5C 06 51 |  if_ne	add	arg01, #1
05f24     F0 FF 9F 5D |  if_ne	jmp	#LR__0285
05f28                 | LR__0286
05f28     37 73 02 F6 | 	mov	local05, local03
05f2c     36 5D 02 F6 | 	mov	arg01, local02
05f30     00 6E 06 F6 | 	mov	local03, #0
05f34     D8 A0 9F FE | 	loc	pa,	#(@LR__0288-@LR__0287)
05f38     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f3c                 | LR__0287
05f3c     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f40     01 6E 06 51 |  if_ne	add	local03, #1
05f44     01 5C 06 51 |  if_ne	add	arg01, #1
05f48     F0 FF 9F 5D |  if_ne	jmp	#LR__0287
05f4c                 | LR__0288
05f4c     37 2B 02 F6 | 	mov	result1, local03
05f50     15 75 02 F6 | 	mov	local06, result1
05f54     39 5D 02 F6 | 	mov	arg01, local05
05f58     3A 5D 02 F1 | 	add	arg01, local06
05f5c     01 5C 06 F1 | 	add	arg01, #1
05f60     90 0B B0 FD | 	call	#__system___gc_alloc_managed
05f64     15 77 0A F6 | 	mov	local07, result1 wz
05f68     28 00 90 AD |  if_e	jmp	#LR__0289
05f6c     3B 5D 02 F6 | 	mov	arg01, local07
05f70     35 5F 02 F6 | 	mov	arg02, local01
05f74     39 61 02 F6 | 	mov	arg03, local05
05f78     DC FD BF FD | 	call	#__system____builtin_memmove
05f7c     3B 5D 02 F6 | 	mov	arg01, local07
05f80     39 5D 02 F1 | 	add	arg01, local05
05f84     01 74 06 F1 | 	add	local06, #1
05f88     36 5F 02 F6 | 	mov	arg02, local02
05f8c     3A 61 02 F6 | 	mov	arg03, local06
05f90     C4 FD BF FD | 	call	#__system____builtin_memmove
05f94                 | LR__0289
05f94     3B 2B 02 F6 | 	mov	result1, local07
05f98     AF F0 03 F6 | 	mov	ptra, fp
05f9c     BF 00 A0 FD | 	call	#popregs_
05fa0                 | __system___string_concat_ret
05fa0     2D 00 64 FD | 	ret
05fa4                 | 
05fa4                 | __system___tx
05fa4     02 5A 05 F6 | 	mov	COUNT_, #2
05fa8     B0 00 A0 FD | 	call	#pushregs_
05fac     2E 6B 02 F6 | 	mov	local01, arg01
05fb0     0A 6A 0E F2 | 	cmp	local01, #10 wz
05fb4     20 00 90 5D |  if_ne	jmp	#LR__0290
05fb8     08 14 06 F1 | 	add	ptr___system__dat__, #8
05fbc     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
05fc0     08 14 86 F1 | 	sub	ptr___system__dat__, #8
05fc4     02 6C CE F7 | 	test	local02, #2 wz
05fc8     0C 00 90 AD |  if_e	jmp	#LR__0290
05fcc     0D 6C 06 F6 | 	mov	local02, #13
05fd0     0D 5C 06 F6 | 	mov	arg01, #13
05fd4     4C FC BF FD | 	call	#__system___txraw
05fd8                 | LR__0290
05fd8     35 5D 02 F6 | 	mov	arg01, local01
05fdc     44 FC BF FD | 	call	#__system___txraw
05fe0     AF F0 03 F6 | 	mov	ptra, fp
05fe4     BF 00 A0 FD | 	call	#popregs_
05fe8                 | __system___tx_ret
05fe8     2D 00 64 FD | 	ret
05fec                 | 
05fec                 | __system___rx
05fec     02 5A 05 F6 | 	mov	COUNT_, #2
05ff0     B0 00 A0 FD | 	call	#pushregs_
05ff4                 | LR__0291
05ff4     00 5C 06 F6 | 	mov	arg01, #0
05ff8     70 FC BF FD | 	call	#__system___rxraw
05ffc     15 6B 02 F6 | 	mov	local01, result1
06000     FF FF 7F FF 
06004     FF 6B 0E F2 | 	cmp	local01, ##-1 wz
06008     E8 FF 9F AD |  if_e	jmp	#LR__0291
0600c     0D 6A 0E F2 | 	cmp	local01, #13 wz
06010     14 00 90 5D |  if_ne	jmp	#LR__0292
06014     08 14 06 F1 | 	add	ptr___system__dat__, #8
06018     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
0601c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06020     02 6C CE F7 | 	test	local02, #2 wz
06024     0A 6A 06 56 |  if_ne	mov	local01, #10
06028                 | LR__0292
06028     08 14 06 F1 | 	add	ptr___system__dat__, #8
0602c     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
06030     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06034     01 6C CE F7 | 	test	local02, #1 wz
06038     1C 00 90 AD |  if_e	jmp	#LR__0295
0603c     7F 6A 0E F2 | 	cmp	local01, #127 wz
06040     0C 00 90 5D |  if_ne	jmp	#LR__0293
06044     08 5C 06 F6 | 	mov	arg01, #8
06048     58 FF BF FD | 	call	#__system___tx
0604c     08 00 90 FD | 	jmp	#LR__0294
06050                 | LR__0293
06050     35 5D 02 F6 | 	mov	arg01, local01
06054     4C FF BF FD | 	call	#__system___tx
06058                 | LR__0294
06058                 | LR__0295
06058     35 2B 02 F6 | 	mov	result1, local01
0605c     AF F0 03 F6 | 	mov	ptra, fp
06060     BF 00 A0 FD | 	call	#popregs_
06064                 | __system___rx_ret
06064     2D 00 64 FD | 	ret
06068                 | 
06068                 | __system___pinread
06068     20 5C CE F7 | 	test	arg01, #32 wz
0606c     FF 31 02 56 |  if_ne	mov	_var01, inb
06070     FE 31 02 A6 |  if_e	mov	_var01, ina
06074     18 2B 02 F6 | 	mov	result1, _var01
06078     2E 2B 42 F0 | 	shr	result1, arg01
0607c     06 5C 46 F0 | 	shr	arg01, #6
06080     2E 2B 42 F7 | 	zerox	result1, arg01
06084                 | __system___pinread_ret
06084     2D 00 64 FD | 	ret
06088                 | 
06088                 | __system___waitms
06088     03 5A 05 F6 | 	mov	COUNT_, #3
0608c     B0 00 A0 FD | 	call	#pushregs_
06090     2E 6B 02 F6 | 	mov	local01, arg01
06094     14 6C 06 FB | 	rdlong	local02, #20
06098     7C 9F 9F FE | 	loc	pa,	#(@LR__0297-@LR__0296)
0609c     93 00 A0 FD | 	call	#FCACHE_LOAD_
060a0                 | LR__0296
060a0     01 00 00 FF 
060a4     E8 6B 5E F2 | 	cmps	local01, ##1000 wcz
060a8     1F 6C 62 1D |  if_a	waitx	local02
060ac     01 00 00 1F 
060b0     E8 6B 86 11 |  if_a	sub	local01, ##1000
060b4     E8 FF 9F 1D |  if_a	jmp	#LR__0296
060b8                 | LR__0297
060b8     0C 14 06 F1 | 	add	ptr___system__dat__, #12
060bc     0A 6F 0A FB | 	rdlong	local03, ptr___system__dat__ wz
060c0     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
060c4     20 00 90 5D |  if_ne	jmp	#LR__0298
060c8     36 0B 03 F6 | 	mov	muldiva_, local02
060cc     01 00 00 FF 
060d0     E8 0D 07 F6 | 	mov	muldivb_, ##1000
060d4     CC 00 A0 FD | 	call	#unsdivide_
060d8     86 6F 02 F6 | 	mov	local03, muldivb_
060dc     0C 14 06 F1 | 	add	ptr___system__dat__, #12
060e0     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
060e4     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
060e8                 | LR__0298
060e8     00 6A 5E F2 | 	cmps	local01, #0 wcz
060ec     37 6B 02 1D |  if_a	qmul	local01, local03
060f0     18 5C 62 1D |  if_a	getqx	arg01
060f4     1F 5C 62 1D |  if_a	waitx	arg01
060f8     AF F0 03 F6 | 	mov	ptra, fp
060fc     BF 00 A0 FD | 	call	#popregs_
06100                 | __system___waitms_ret
06100     2D 00 64 FD | 	ret
06104                 | 
06104                 | __system___waitus
06104     02 5A 05 F6 | 	mov	COUNT_, #2
06108     B0 00 A0 FD | 	call	#pushregs_
0610c     2E 6B 02 F6 | 	mov	local01, arg01
06110     10 14 06 F1 | 	add	ptr___system__dat__, #16
06114     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06118     10 14 86 F1 | 	sub	ptr___system__dat__, #16
0611c     20 00 90 5D |  if_ne	jmp	#LR__0299
06120     14 0A 07 FB | 	rdlong	muldiva_, #20
06124     A1 07 00 FF 
06128     40 0C 07 F6 | 	mov	muldivb_, ##1000000
0612c     CC 00 A0 FD | 	call	#unsdivide_
06130     86 6D 02 F6 | 	mov	local02, muldivb_
06134     10 14 06 F1 | 	add	ptr___system__dat__, #16
06138     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
0613c     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06140                 | LR__0299
06140     36 6B 02 FD | 	qmul	local01, local02
06144     18 5C 62 FD | 	getqx	arg01
06148     1F 5C 62 FD | 	waitx	arg01
0614c     AF F0 03 F6 | 	mov	ptra, fp
06150     BF 00 A0 FD | 	call	#popregs_
06154                 | __system___waitus_ret
06154     2D 00 64 FD | 	ret
06158                 | 
06158                 | __system___basic_open
06158     05 5A 05 F6 | 	mov	COUNT_, #5
0615c     B0 00 A0 FD | 	call	#pushregs_
06160     2F 6B 02 F6 | 	mov	local01, arg02
06164     30 6D 02 F6 | 	mov	local02, arg03
06168     31 6F 02 F6 | 	mov	local03, arg04
0616c     88 11 B0 FD | 	call	#__system____getftab
06170     15 71 0A F6 | 	mov	local04, result1 wz
06174     18 00 90 5D |  if_ne	jmp	#LR__0300
06178     03 5D 02 F6 | 	mov	arg01, abortchain
0617c     0C 5E 06 F6 | 	mov	arg02, #12
06180     01 60 06 F6 | 	mov	arg03, #1
06184     F0 00 A0 FD | 	call	#__longjmp
06188     01 2A 66 F6 | 	neg	result1, #1
0618c     70 00 90 FD | 	jmp	#LR__0304
06190                 | LR__0300
06190     00 6A 0E F2 | 	cmp	local01, #0 wz
06194     48 00 90 AD |  if_e	jmp	#LR__0302
06198     04 5C 06 F6 | 	mov	arg01, #4
0619c     54 09 B0 FD | 	call	#__system___gc_alloc_managed
061a0     15 73 0A F6 | 	mov	local05, result1 wz
061a4     18 00 90 5D |  if_ne	jmp	#LR__0301
061a8     03 5D 02 F6 | 	mov	arg01, abortchain
061ac     07 5E 06 F6 | 	mov	arg02, #7
061b0     01 60 06 F6 | 	mov	arg03, #1
061b4     F0 00 A0 FD | 	call	#__longjmp
061b8     01 2A 66 F6 | 	neg	result1, #1
061bc     40 00 90 FD | 	jmp	#LR__0304
061c0                 | LR__0301
061c0     39 6B 62 FC | 	wrlong	local01, local05
061c4     08 5F 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
061c8     39 5D 02 F6 | 	mov	arg01, local05
061cc     B0 FC BF FD | 	call	#__system___make_methodptr
061d0     18 70 06 F1 | 	add	local04, #24
061d4     38 2B 62 FC | 	wrlong	result1, local04
061d8     18 70 86 F1 | 	sub	local04, #24
061dc     0C 00 90 FD | 	jmp	#LR__0303
061e0                 | LR__0302
061e0     18 70 06 F1 | 	add	local04, #24
061e4     38 6B 62 FC | 	wrlong	local01, local04
061e8     18 70 86 F1 | 	sub	local04, #24
061ec                 | LR__0303
061ec     1C 70 06 F1 | 	add	local04, #28
061f0     38 6D 62 FC | 	wrlong	local02, local04
061f4     04 70 06 F1 | 	add	local04, #4
061f8     38 6F 62 FC | 	wrlong	local03, local04
061fc     00 2A 06 F6 | 	mov	result1, #0
06200                 | LR__0304
06200     AF F0 03 F6 | 	mov	ptra, fp
06204     BF 00 A0 FD | 	call	#popregs_
06208                 | __system___basic_open_ret
06208     2D 00 64 FD | 	ret
0620c                 | 
0620c                 | __system___basic_print_char
0620c     05 5A 05 F6 | 	mov	COUNT_, #5
06210     B0 00 A0 FD | 	call	#pushregs_
06214     2F 6B 02 F6 | 	mov	local01, arg02
06218     A0 12 B0 FD | 	call	#__system___gettxfunc
0621c     15 6D 0A F6 | 	mov	local02, result1 wz
06220     00 2A 06 A6 |  if_e	mov	result1, #0
06224     24 00 90 AD |  if_e	jmp	#LR__0305
06228     36 6F 02 FB | 	rdlong	local03, local02
0622c     04 6C 06 F1 | 	add	local02, #4
06230     36 71 02 FB | 	rdlong	local04, local02
06234     35 5D 02 F6 | 	mov	arg01, local01
06238     07 73 02 F6 | 	mov	local05, objptr
0623c     37 0F 02 F6 | 	mov	objptr, local03
06240     2D 70 62 FD | 	call	local04
06244     39 0F 02 F6 | 	mov	objptr, local05
06248     01 2A 06 F6 | 	mov	result1, #1
0624c                 | LR__0305
0624c     AF F0 03 F6 | 	mov	ptra, fp
06250     BF 00 A0 FD | 	call	#popregs_
06254                 | __system___basic_print_char_ret
06254     2D 00 64 FD | 	ret
06258                 | 
06258                 | __system___basic_print_string
06258     03 5A 05 F6 | 	mov	COUNT_, #3
0625c     B0 00 A0 FD | 	call	#pushregs_
06260     2F 6B 02 F6 | 	mov	local01, arg02
06264     30 6D 02 F6 | 	mov	local02, arg03
06268     50 12 B0 FD | 	call	#__system___gettxfunc
0626c     15 6F 0A F6 | 	mov	local03, result1 wz
06270     00 2A 06 A6 |  if_e	mov	result1, #0
06274     1C 00 90 AD |  if_e	jmp	#LR__0306
06278     00 6A 0E F2 | 	cmp	local01, #0 wz
0627c     00 2A 06 A6 |  if_e	mov	result1, #0
06280     10 00 90 AD |  if_e	jmp	#LR__0306
06284     37 5D 02 F6 | 	mov	arg01, local03
06288     36 5F 02 F6 | 	mov	arg02, local02
0628c     35 61 02 F6 | 	mov	arg03, local01
06290     B0 00 B0 FD | 	call	#__system___fmtstr
06294                 | LR__0306
06294     AF F0 03 F6 | 	mov	ptra, fp
06298     BF 00 A0 FD | 	call	#popregs_
0629c                 | __system___basic_print_string_ret
0629c     2D 00 64 FD | 	ret
062a0                 | 
062a0                 | __system___basic_print_integer
062a0     04 5A 05 F6 | 	mov	COUNT_, #4
062a4     B0 00 A0 FD | 	call	#pushregs_
062a8     2F 6B 02 F6 | 	mov	local01, arg02
062ac     30 6D 02 F6 | 	mov	local02, arg03
062b0     31 6F 02 F6 | 	mov	local03, arg04
062b4     04 12 B0 FD | 	call	#__system___gettxfunc
062b8     15 71 0A F6 | 	mov	local04, result1 wz
062bc     00 2A 06 A6 |  if_e	mov	result1, #0
062c0     14 00 90 AD |  if_e	jmp	#LR__0307
062c4     38 5D 02 F6 | 	mov	arg01, local04
062c8     36 5F 02 F6 | 	mov	arg02, local02
062cc     35 61 02 F6 | 	mov	arg03, local01
062d0     37 63 02 F6 | 	mov	arg04, local03
062d4     60 01 B0 FD | 	call	#__system___fmtnum
062d8                 | LR__0307
062d8     AF F0 03 F6 | 	mov	ptra, fp
062dc     BF 00 A0 FD | 	call	#popregs_
062e0                 | __system___basic_print_integer_ret
062e0     2D 00 64 FD | 	ret
062e4                 | 
062e4                 | __system___fmtchar
062e4     00 5A 05 F6 | 	mov	COUNT_, #0
062e8     B0 00 A0 FD | 	call	#pushregs_
062ec     18 F0 07 F1 | 	add	ptra, #24
062f0     04 5E 05 F1 | 	add	fp, #4
062f4     AF 5C 62 FC | 	wrlong	arg01, fp
062f8     04 5E 05 F1 | 	add	fp, #4
062fc     AF 5E 62 FC | 	wrlong	arg02, fp
06300     04 5E 05 F1 | 	add	fp, #4
06304     AF 60 62 FC | 	wrlong	arg03, fp
06308     04 5E 05 F1 | 	add	fp, #4
0630c     AF 60 42 FC | 	wrbyte	arg03, fp
06310     01 5E 05 F1 | 	add	fp, #1
06314     AF 00 48 FC | 	wrbyte	#0, fp
06318     01 5E 85 F1 | 	sub	fp, #1
0631c     AF 60 02 F6 | 	mov	arg03, fp
06320     0C 5E 85 F1 | 	sub	fp, #12
06324     AF 5C 02 FB | 	rdlong	arg01, fp
06328     04 5E 05 F1 | 	add	fp, #4
0632c     AF 5E 02 FB | 	rdlong	arg02, fp
06330     08 5E 85 F1 | 	sub	fp, #8
06334     0C 00 B0 FD | 	call	#__system___fmtstr
06338     AF F0 03 F6 | 	mov	ptra, fp
0633c     BF 00 A0 FD | 	call	#popregs_
06340                 | __system___fmtchar_ret
06340     2D 00 64 FD | 	ret
06344                 | 
06344                 | __system___fmtstr
06344     0E 5A 05 F6 | 	mov	COUNT_, #14
06348     B0 00 A0 FD | 	call	#pushregs_
0634c     2E 6B 02 F6 | 	mov	local01, arg01
06350     2F 6D 02 F6 | 	mov	local02, arg02
06354     30 6F 02 F6 | 	mov	local03, arg03
06358     36 71 02 F6 | 	mov	local04, local02
0635c     FF 70 06 F5 | 	and	local04, #255
06360     37 5D 02 F6 | 	mov	arg01, local03
06364     00 72 06 F6 | 	mov	local05, #0
06368     A4 9C 9F FE | 	loc	pa,	#(@LR__0309-@LR__0308)
0636c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06370                 | LR__0308
06370     2E 75 CA FA | 	rdbyte	local06, arg01 wz
06374     01 72 06 51 |  if_ne	add	local05, #1
06378     01 5C 06 51 |  if_ne	add	arg01, #1
0637c     F0 FF 9F 5D |  if_ne	jmp	#LR__0308
06380                 | LR__0309
06380     39 2B 02 F6 | 	mov	result1, local05
06384     15 77 02 F6 | 	mov	local07, result1
06388     00 70 0E F2 | 	cmp	local04, #0 wz
0638c     04 00 90 AD |  if_e	jmp	#LR__0310
06390     38 77 7A F3 | 	fles	local07, local04 wcz
06394                 | LR__0310
06394     35 5D 02 F6 | 	mov	arg01, local01
06398     36 5F 02 F6 | 	mov	arg02, local02
0639c     3B 61 02 F6 | 	mov	arg03, local07
063a0     02 62 06 F6 | 	mov	arg04, #2
063a4     C8 0F B0 FD | 	call	#__system___fmtpad
063a8     15 79 02 F6 | 	mov	local08, result1
063ac     00 78 5E F2 | 	cmps	local08, #0 wcz
063b0     3C 2B 02 C6 |  if_b	mov	result1, local08
063b4     74 00 90 CD |  if_b	jmp	#LR__0313
063b8     00 76 5E F2 | 	cmps	local07, #0 wcz
063bc     44 00 90 ED |  if_be	jmp	#LR__0312
063c0     3B 7B 02 F6 | 	mov	local09, local07
063c4                 | LR__0311
063c4     35 7D 02 F6 | 	mov	local10, local01
063c8     3E 7F 02 FB | 	rdlong	local11, local10
063cc     04 7C 06 F1 | 	add	local10, #4
063d0     3E 81 02 FB | 	rdlong	local12, local10
063d4     37 5D C2 FA | 	rdbyte	arg01, local03
063d8     07 83 02 F6 | 	mov	local13, objptr
063dc     3F 0F 02 F6 | 	mov	objptr, local11
063e0     01 6E 06 F1 | 	add	local03, #1
063e4     2D 80 62 FD | 	call	local12
063e8     41 0F 02 F6 | 	mov	objptr, local13
063ec     15 85 02 F6 | 	mov	local14, result1
063f0     00 84 5E F2 | 	cmps	local14, #0 wcz
063f4     42 2B 02 C6 |  if_b	mov	result1, local14
063f8     30 00 90 CD |  if_b	jmp	#LR__0313
063fc     42 79 02 F1 | 	add	local08, local14
06400     F0 7B 6E FB | 	djnz	local09, #LR__0311
06404                 | LR__0312
06404     35 5D 02 F6 | 	mov	arg01, local01
06408     36 5F 02 F6 | 	mov	arg02, local02
0640c     3B 61 02 F6 | 	mov	arg03, local07
06410     01 62 06 F6 | 	mov	arg04, #1
06414     58 0F B0 FD | 	call	#__system___fmtpad
06418     15 85 02 F6 | 	mov	local14, result1
0641c     00 84 5E F2 | 	cmps	local14, #0 wcz
06420     42 2B 02 C6 |  if_b	mov	result1, local14
06424     42 79 02 31 |  if_ae	add	local08, local14
06428     3C 2B 02 36 |  if_ae	mov	result1, local08
0642c                 | LR__0313
0642c     AF F0 03 F6 | 	mov	ptra, fp
06430     BF 00 A0 FD | 	call	#popregs_
06434                 | __system___fmtstr_ret
06434     2D 00 64 FD | 	ret
06438                 | 
06438                 | __system___fmtnum
06438     07 5A 05 F6 | 	mov	COUNT_, #7
0643c     B0 00 A0 FD | 	call	#pushregs_
06440     78 F0 07 F1 | 	add	ptra, #120
06444     04 5E 05 F1 | 	add	fp, #4
06448     AF 5C 62 FC | 	wrlong	arg01, fp
0644c     04 5E 05 F1 | 	add	fp, #4
06450     AF 5E 62 FC | 	wrlong	arg02, fp
06454     04 5E 05 F1 | 	add	fp, #4
06458     AF 60 62 FC | 	wrlong	arg03, fp
0645c     04 5E 05 F1 | 	add	fp, #4
06460     AF 62 62 FC | 	wrlong	arg04, fp
06464     04 5E 05 F1 | 	add	fp, #4
06468     AF 6A 02 F6 | 	mov	local01, fp
0646c     44 5E 05 F1 | 	add	fp, #68
06470     AF 6A 62 FC | 	wrlong	local01, fp
06474     04 5E 05 F1 | 	add	fp, #4
06478     AF 00 68 FC | 	wrlong	#0, fp
0647c     54 5E 85 F1 | 	sub	fp, #84
06480     AF 6A 02 FB | 	rdlong	local01, fp
06484     10 6A 46 F0 | 	shr	local01, #16
06488     3F 6A 06 F5 | 	and	local01, #63
0648c     58 5E 05 F1 | 	add	fp, #88
06490     AF 6A 62 FC | 	wrlong	local01, fp
06494     58 5E 85 F1 | 	sub	fp, #88
06498     AF 6A 02 FB | 	rdlong	local01, fp
0649c     FF 6A 06 F5 | 	and	local01, #255
064a0     5C 5E 05 F1 | 	add	fp, #92
064a4     AF 6A 62 FC | 	wrlong	local01, fp
064a8     5C 5E 85 F1 | 	sub	fp, #92
064ac     AF 6A 02 FB | 	rdlong	local01, fp
064b0     1A 6A 46 F0 | 	shr	local01, #26
064b4     03 6A 06 F5 | 	and	local01, #3
064b8     60 5E 05 F1 | 	add	fp, #96
064bc     AF 6A 62 FC | 	wrlong	local01, fp
064c0     08 5E 85 F1 | 	sub	fp, #8
064c4     AF 6A 02 FB | 	rdlong	local01, fp
064c8     60 5E 85 F1 | 	sub	fp, #96
064cc     00 6A 5E F2 | 	cmps	local01, #0 wcz
064d0     14 00 90 ED |  if_be	jmp	#LR__0314
064d4     60 5E 05 F1 | 	add	fp, #96
064d8     AF 6A 02 FB | 	rdlong	local01, fp
064dc     01 6A 86 F1 | 	sub	local01, #1
064e0     AF 6A 62 FC | 	wrlong	local01, fp
064e4     60 5E 85 F1 | 	sub	fp, #96
064e8                 | LR__0314
064e8     64 5E 05 F1 | 	add	fp, #100
064ec     AF 6C 02 FB | 	rdlong	local02, fp
064f0     64 5E 85 F1 | 	sub	fp, #100
064f4     40 6C 5E F2 | 	cmps	local02, #64 wcz
064f8     14 00 90 1D |  if_a	jmp	#LR__0315
064fc     64 5E 05 F1 | 	add	fp, #100
06500     AF 6E 02 FB | 	rdlong	local03, fp
06504     64 5E 85 F1 | 	sub	fp, #100
06508     37 71 0A F6 | 	mov	local04, local03 wz
0650c     0C 00 90 5D |  if_ne	jmp	#LR__0316
06510                 | LR__0315
06510     64 5E 05 F1 | 	add	fp, #100
06514     AF 80 68 FC | 	wrlong	#64, fp
06518     64 5E 85 F1 | 	sub	fp, #100
0651c                 | LR__0316
0651c     68 5E 05 F1 | 	add	fp, #104
06520     AF 6A 02 FB | 	rdlong	local01, fp
06524     68 5E 85 F1 | 	sub	fp, #104
06528     03 6A 0E F2 | 	cmp	local01, #3 wz
0652c     10 00 90 5D |  if_ne	jmp	#LR__0317
06530     68 5E 05 F1 | 	add	fp, #104
06534     AF 00 68 FC | 	wrlong	#0, fp
06538     68 5E 85 F1 | 	sub	fp, #104
0653c     30 00 90 FD | 	jmp	#LR__0319
06540                 | LR__0317
06540     0C 5E 05 F1 | 	add	fp, #12
06544     AF 6A 02 FB | 	rdlong	local01, fp
06548     0C 5E 85 F1 | 	sub	fp, #12
0654c     00 6A 5E F2 | 	cmps	local01, #0 wcz
06550     1C 00 90 3D |  if_ae	jmp	#LR__0318
06554     68 5E 05 F1 | 	add	fp, #104
06558     AF 08 68 FC | 	wrlong	#4, fp
0655c     5C 5E 85 F1 | 	sub	fp, #92
06560     AF 6A 02 FB | 	rdlong	local01, fp
06564     35 6B 62 F6 | 	neg	local01, local01
06568     AF 6A 62 FC | 	wrlong	local01, fp
0656c     0C 5E 85 F1 | 	sub	fp, #12
06570                 | LR__0318
06570                 | LR__0319
06570     68 5E 05 F1 | 	add	fp, #104
06574     AF 6A 0A FB | 	rdlong	local01, fp wz
06578     68 5E 85 F1 | 	sub	fp, #104
0657c     EC 00 90 AD |  if_e	jmp	#LR__0326
06580     5C 5E 05 F1 | 	add	fp, #92
06584     AF 70 02 FB | 	rdlong	local04, fp
06588     01 70 06 F1 | 	add	local04, #1
0658c     AF 70 62 FC | 	wrlong	local04, fp
06590     04 5E 05 F1 | 	add	fp, #4
06594     AF 6A 02 FB | 	rdlong	local01, fp
06598     04 5E 05 F1 | 	add	fp, #4
0659c     AF 70 02 FB | 	rdlong	local04, fp
065a0     64 5E 85 F1 | 	sub	fp, #100
065a4     38 6B 0A F2 | 	cmp	local01, local04 wz
065a8     3C 00 90 5D |  if_ne	jmp	#LR__0321
065ac     60 5E 05 F1 | 	add	fp, #96
065b0     AF 70 02 FB | 	rdlong	local04, fp
065b4     01 70 86 F1 | 	sub	local04, #1
065b8     AF 70 62 FC | 	wrlong	local04, fp
065bc     AF 6A 0A FB | 	rdlong	local01, fp wz
065c0     60 5E 85 F1 | 	sub	fp, #96
065c4     20 00 90 5D |  if_ne	jmp	#LR__0320
065c8     04 5E 05 F1 | 	add	fp, #4
065cc     AF 5C 02 FB | 	rdlong	arg01, fp
065d0     04 5E 05 F1 | 	add	fp, #4
065d4     AF 5E 02 FB | 	rdlong	arg02, fp
065d8     08 5E 85 F1 | 	sub	fp, #8
065dc     23 60 06 F6 | 	mov	arg03, #35
065e0     00 FD BF FD | 	call	#__system___fmtchar
065e4     70 01 90 FD | 	jmp	#LR__0331
065e8                 | LR__0320
065e8                 | LR__0321
065e8     68 5E 05 F1 | 	add	fp, #104
065ec     AF 6A 02 FB | 	rdlong	local01, fp
065f0     68 5E 85 F1 | 	sub	fp, #104
065f4     02 6A 0E F2 | 	cmp	local01, #2 wz
065f8     20 00 90 5D |  if_ne	jmp	#LR__0322
065fc     58 5E 05 F1 | 	add	fp, #88
06600     AF 6A 02 FB | 	rdlong	local01, fp
06604     35 71 02 F6 | 	mov	local04, local01
06608     01 70 06 F1 | 	add	local04, #1
0660c     AF 70 62 FC | 	wrlong	local04, fp
06610     58 5E 85 F1 | 	sub	fp, #88
06614     35 41 48 FC | 	wrbyte	#32, local01
06618     50 00 90 FD | 	jmp	#LR__0325
0661c                 | LR__0322
0661c     68 5E 05 F1 | 	add	fp, #104
06620     AF 6A 02 FB | 	rdlong	local01, fp
06624     68 5E 85 F1 | 	sub	fp, #104
06628     04 6A 0E F2 | 	cmp	local01, #4 wz
0662c     20 00 90 5D |  if_ne	jmp	#LR__0323
06630     58 5E 05 F1 | 	add	fp, #88
06634     AF 6A 02 FB | 	rdlong	local01, fp
06638     35 71 02 F6 | 	mov	local04, local01
0663c     01 70 06 F1 | 	add	local04, #1
06640     AF 70 62 FC | 	wrlong	local04, fp
06644     58 5E 85 F1 | 	sub	fp, #88
06648     35 5B 48 FC | 	wrbyte	#45, local01
0664c     1C 00 90 FD | 	jmp	#LR__0324
06650                 | LR__0323
06650     58 5E 05 F1 | 	add	fp, #88
06654     AF 6A 02 FB | 	rdlong	local01, fp
06658     35 71 02 F6 | 	mov	local04, local01
0665c     01 70 06 F1 | 	add	local04, #1
06660     AF 70 62 FC | 	wrlong	local04, fp
06664     58 5E 85 F1 | 	sub	fp, #88
06668     35 57 48 FC | 	wrbyte	#43, local01
0666c                 | LR__0324
0666c                 | LR__0325
0666c                 | LR__0326
0666c     58 5E 05 F1 | 	add	fp, #88
06670     AF 5C 02 FB | 	rdlong	arg01, fp
06674     4C 5E 85 F1 | 	sub	fp, #76
06678     AF 5E 02 FB | 	rdlong	arg02, fp
0667c     04 5E 05 F1 | 	add	fp, #4
06680     AF 60 02 FB | 	rdlong	arg03, fp
06684     50 5E 05 F1 | 	add	fp, #80
06688     AF 62 02 FB | 	rdlong	arg04, fp
0668c     00 72 06 F6 | 	mov	local05, #0
06690     58 5E 85 F1 | 	sub	fp, #88
06694     AF 74 02 FB | 	rdlong	local06, fp
06698     08 5E 85 F1 | 	sub	fp, #8
0669c     1D 74 2E F4 | 	testbn	local06, #29 wz
066a0     01 72 06 56 |  if_ne	mov	local05, #1
066a4     39 65 02 F6 | 	mov	arg05, local05
066a8     84 0D B0 FD | 	call	#__system___uitoa
066ac     15 77 02 F6 | 	mov	local07, result1
066b0     5C 5E 05 F1 | 	add	fp, #92
066b4     AF 6A 02 FB | 	rdlong	local01, fp
066b8     3B 6B 02 F1 | 	add	local01, local07
066bc     AF 6A 62 FC | 	wrlong	local01, fp
066c0     08 5E 05 F1 | 	add	fp, #8
066c4     AF 70 02 FB | 	rdlong	local04, fp
066c8     64 5E 85 F1 | 	sub	fp, #100
066cc     38 6B 5A F2 | 	cmps	local01, local04 wcz
066d0     64 00 90 ED |  if_be	jmp	#LR__0330
066d4     68 99 9F FE | 	loc	pa,	#(@LR__0328-@LR__0327)
066d8     93 00 A0 FD | 	call	#FCACHE_LOAD_
066dc                 | LR__0327
066dc     64 5E 05 F1 | 	add	fp, #100
066e0     AF 6A 02 FB | 	rdlong	local01, fp
066e4     35 71 02 F6 | 	mov	local04, local01
066e8     01 70 86 F1 | 	sub	local04, #1
066ec     AF 70 62 FC | 	wrlong	local04, fp
066f0     64 5E 85 F1 | 	sub	fp, #100
066f4     00 6A 5E F2 | 	cmps	local01, #0 wcz
066f8     20 00 90 ED |  if_be	jmp	#LR__0329
066fc     58 5E 05 F1 | 	add	fp, #88
06700     AF 6A 02 FB | 	rdlong	local01, fp
06704     35 71 02 F6 | 	mov	local04, local01
06708     01 70 06 F1 | 	add	local04, #1
0670c     AF 70 62 FC | 	wrlong	local04, fp
06710     58 5E 85 F1 | 	sub	fp, #88
06714     35 47 48 FC | 	wrbyte	#35, local01
06718     C0 FF 9F FD | 	jmp	#LR__0327
0671c                 | LR__0328
0671c                 | LR__0329
0671c     58 5E 05 F1 | 	add	fp, #88
06720     AF 6A 02 FB | 	rdlong	local01, fp
06724     35 71 02 F6 | 	mov	local04, local01
06728     01 70 06 F1 | 	add	local04, #1
0672c     AF 70 62 FC | 	wrlong	local04, fp
06730     58 5E 85 F1 | 	sub	fp, #88
06734     35 01 48 FC | 	wrbyte	#0, local01
06738                 | LR__0330
06738     14 5E 05 F1 | 	add	fp, #20
0673c     AF 60 02 F6 | 	mov	arg03, fp
06740     10 5E 85 F1 | 	sub	fp, #16
06744     AF 5C 02 FB | 	rdlong	arg01, fp
06748     04 5E 05 F1 | 	add	fp, #4
0674c     AF 5E 02 FB | 	rdlong	arg02, fp
06750     08 5E 85 F1 | 	sub	fp, #8
06754     EC FB BF FD | 	call	#__system___fmtstr
06758                 | LR__0331
06758     AF F0 03 F6 | 	mov	ptra, fp
0675c     BF 00 A0 FD | 	call	#popregs_
06760                 | __system___fmtnum_ret
06760     2D 00 64 FD | 	ret
06764                 | 
06764                 | __system__String_S
06764     06 5A 05 F6 | 	mov	COUNT_, #6
06768     B0 00 A0 FD | 	call	#pushregs_
0676c     2E 6B 02 F6 | 	mov	local01, arg01
06770     2F 6D 02 F6 | 	mov	local02, arg02
06774     36 5D 02 F6 | 	mov	arg01, local02
06778     00 6E 06 F6 | 	mov	local03, #0
0677c     90 98 9F FE | 	loc	pa,	#(@LR__0333-@LR__0332)
06780     93 00 A0 FD | 	call	#FCACHE_LOAD_
06784                 | LR__0332
06784     2E 71 CA FA | 	rdbyte	local04, arg01 wz
06788     01 6E 06 51 |  if_ne	add	local03, #1
0678c     01 5C 06 51 |  if_ne	add	arg01, #1
06790     F0 FF 9F 5D |  if_ne	jmp	#LR__0332
06794                 | LR__0333
06794     37 2B 0A F6 | 	mov	result1, local03 wz
06798     40 00 00 AF 
0679c     6E 2A 06 A6 |  if_e	mov	result1, ##@LR__0450
067a0     50 00 90 AD |  if_e	jmp	#LR__0335
067a4     00 6A 5E F2 | 	cmps	local01, #0 wcz
067a8     40 00 00 EF 
067ac     6F 2A 06 E6 |  if_be	mov	result1, ##@LR__0451
067b0     40 00 90 ED |  if_be	jmp	#LR__0335
067b4     35 73 02 F6 | 	mov	local05, local01
067b8     01 72 06 F1 | 	add	local05, #1
067bc     39 5D 02 F6 | 	mov	arg01, local05
067c0     01 5C 06 F1 | 	add	arg01, #1
067c4     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
067c8     15 75 0A F6 | 	mov	local06, result1 wz
067cc     20 00 90 AD |  if_e	jmp	#LR__0334
067d0     36 5F C2 FA | 	rdbyte	arg02, local02
067d4     3A 5D 02 F6 | 	mov	arg01, local06
067d8     35 61 02 F6 | 	mov	arg03, local01
067dc     A0 00 A0 FD | 	call	#\builtin_bytefill_
067e0     3A 73 02 F1 | 	add	local05, local06
067e4     39 01 48 FC | 	wrbyte	#0, local05
067e8     3A 2B 02 F6 | 	mov	result1, local06
067ec     04 00 90 FD | 	jmp	#LR__0335
067f0                 | LR__0334
067f0     3A 2B 02 F6 | 	mov	result1, local06
067f4                 | LR__0335
067f4     AF F0 03 F6 | 	mov	ptra, fp
067f8     BF 00 A0 FD | 	call	#popregs_
067fc                 | __system__String_S_ret
067fc     2D 00 64 FD | 	ret
06800                 | 
06800                 | __system___gc_ptrs
06800     0A 5A 05 F6 | 	mov	COUNT_, #10
06804     B0 00 A0 FD | 	call	#pushregs_
06808     02 6B 02 F6 | 	mov	local01, __heap_ptr
0680c     35 6D 02 F6 | 	mov	local02, local01
06810     07 00 00 FF 
06814     F8 6D 06 F1 | 	add	local02, ##4088
06818     35 6F 0A FB | 	rdlong	local03, local01 wz
0681c     74 00 90 5D |  if_ne	jmp	#LR__0336
06820     36 71 02 F6 | 	mov	local04, local02
06824     35 71 82 F1 | 	sub	local04, local01
06828     35 03 58 FC | 	wrword	#1, local01
0682c     35 73 02 F6 | 	mov	local05, local01
06830     02 72 06 F1 | 	add	local05, #2
06834     36 00 80 FF 
06838     39 21 59 FC | 	wrword	##27792, local05
0683c     35 75 02 F6 | 	mov	local06, local01
06840     04 74 06 F1 | 	add	local06, #4
06844     3A 01 58 FC | 	wrword	#0, local06
06848     35 77 02 F6 | 	mov	local07, local01
0684c     06 76 06 F1 | 	add	local07, #6
06850     3B 03 58 FC | 	wrword	#1, local07
06854     10 6A 06 F1 | 	add	local01, #16
06858     38 6F 52 F6 | 	abs	local03, local04 wc
0685c     04 6E 46 F0 | 	shr	local03, #4
06860     37 6F 62 C6 |  if_b	neg	local03, local03
06864     35 6F 52 FC | 	wrword	local03, local01
06868     35 79 02 F6 | 	mov	local08, local01
0686c     02 78 06 F1 | 	add	local08, #2
06870     36 00 80 FF 
06874     3C 1F 59 FC | 	wrword	##27791, local08
06878     35 7B 02 F6 | 	mov	local09, local01
0687c     04 7A 06 F1 | 	add	local09, #4
06880     3D 01 58 FC | 	wrword	#0, local09
06884     35 7D 02 F6 | 	mov	local10, local01
06888     06 7C 06 F1 | 	add	local10, #6
0688c     3E 01 58 FC | 	wrword	#0, local10
06890     10 6A 86 F1 | 	sub	local01, #16
06894                 | LR__0336
06894     36 2D 02 F6 | 	mov	result2, local02
06898     35 2B 02 F6 | 	mov	result1, local01
0689c     AF F0 03 F6 | 	mov	ptra, fp
068a0     BF 00 A0 FD | 	call	#popregs_
068a4                 | __system___gc_ptrs_ret
068a4     2D 00 64 FD | 	ret
068a8                 | 
068a8                 | __system___gc_nextBlockPtr
068a8     02 5A 05 F6 | 	mov	COUNT_, #2
068ac     B0 00 A0 FD | 	call	#pushregs_
068b0     2E 6B 02 F6 | 	mov	local01, arg01
068b4     35 6D EA FA | 	rdword	local02, local01 wz
068b8     10 00 90 5D |  if_ne	jmp	#LR__0337
068bc     40 00 00 FF 
068c0     70 5C 06 F6 | 	mov	arg01, ##@LR__0452
068c4     F8 01 B0 FD | 	call	#__system___gc_errmsg
068c8     0C 00 90 FD | 	jmp	#LR__0338
068cc                 | LR__0337
068cc     04 6C 66 F0 | 	shl	local02, #4
068d0     35 2B 02 F6 | 	mov	result1, local01
068d4     36 2B 02 F1 | 	add	result1, local02
068d8                 | LR__0338
068d8     AF F0 03 F6 | 	mov	ptra, fp
068dc     BF 00 A0 FD | 	call	#popregs_
068e0                 | __system___gc_nextBlockPtr_ret
068e0     2D 00 64 FD | 	ret
068e4                 | 
068e4                 | __system___gc_tryalloc
068e4     1B 5A 05 F6 | 	mov	COUNT_, #27
068e8     B0 00 A0 FD | 	call	#pushregs_
068ec     2E 6B 02 F6 | 	mov	local01, arg01
068f0     2F 6D 02 F6 | 	mov	local02, arg02
068f4     08 FF BF FD | 	call	#__system___gc_ptrs
068f8     15 6F 02 F6 | 	mov	local03, result1
068fc     16 71 02 F6 | 	mov	local04, result2
06900     37 73 02 F6 | 	mov	local05, local03
06904     00 74 06 F6 | 	mov	local06, #0
06908     4C 97 9F FE | 	loc	pa,	#(@LR__0340-@LR__0339)
0690c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06910                 | LR__0339
06910     39 77 02 F6 | 	mov	local07, local05
06914     06 72 06 F1 | 	add	local05, #6
06918     39 79 02 F6 | 	mov	local08, local05
0691c     37 7B 02 F6 | 	mov	local09, local03
06920     3C 7D E2 FA | 	rdword	local10, local08
06924     3D 5D 02 F6 | 	mov	arg01, local09
06928     3E 5F 0A F6 | 	mov	arg02, local10 wz
0692c     00 2A 06 A6 |  if_e	mov	result1, #0
06930     04 5E 66 50 |  if_ne	shl	arg02, #4
06934     2F 5D 02 51 |  if_ne	add	arg01, arg02
06938     2E 2B 02 56 |  if_ne	mov	result1, arg01
0693c     15 7F 02 F6 | 	mov	local11, result1
06940     3F 73 0A F6 | 	mov	local05, local11 wz
06944     39 7B 02 56 |  if_ne	mov	local09, local05
06948     3D 81 02 56 |  if_ne	mov	local12, local09
0694c     40 75 E2 5A |  if_ne	rdword	local06, local12
06950     00 72 0E F2 | 	cmp	local05, #0 wz
06954     10 00 90 AD |  if_e	jmp	#LR__0341
06958     38 73 5A F2 | 	cmps	local05, local04 wcz
0695c     08 00 90 3D |  if_ae	jmp	#LR__0341
06960     3A 6B 5A F2 | 	cmps	local01, local06 wcz
06964     A8 FF 9F 1D |  if_a	jmp	#LR__0339
06968                 | LR__0340
06968                 | LR__0341
06968     00 72 0E F2 | 	cmp	local05, #0 wz
0696c     39 2B 02 A6 |  if_e	mov	result1, local05
06970     40 01 90 AD |  if_e	jmp	#LR__0344
06974     39 83 02 F6 | 	mov	local13, local05
06978     06 82 06 F1 | 	add	local13, #6
0697c     41 85 E2 FA | 	rdword	local14, local13
06980     3A 6B 5A F2 | 	cmps	local01, local06 wcz
06984     CC 00 90 3D |  if_ae	jmp	#LR__0343
06988     39 87 02 F6 | 	mov	local15, local05
0698c     43 6B 52 FC | 	wrword	local01, local15
06990     35 89 02 F6 | 	mov	local16, local01
06994     04 88 66 F0 | 	shl	local16, #4
06998     39 8B 02 F6 | 	mov	local17, local05
0699c     44 8B 02 F1 | 	add	local17, local16
069a0     3A 8D 02 F6 | 	mov	local18, local06
069a4     35 8D 82 F1 | 	sub	local18, local01
069a8     45 8F 02 F6 | 	mov	local19, local17
069ac     47 8D 52 FC | 	wrword	local18, local19
069b0     45 91 02 F6 | 	mov	local20, local17
069b4     02 90 06 F1 | 	add	local20, #2
069b8     36 00 80 FF 
069bc     48 1F 59 FC | 	wrword	##27791, local20
069c0     45 93 02 F6 | 	mov	local21, local17
069c4     04 92 06 F1 | 	add	local21, #4
069c8     39 5F 0A F6 | 	mov	arg02, local05 wz
069cc     00 2A 06 A6 |  if_e	mov	result1, #0
069d0     37 5F 82 51 |  if_ne	sub	arg02, local03
069d4     04 5E 46 50 |  if_ne	shr	arg02, #4
069d8     2F 2B 02 56 |  if_ne	mov	result1, arg02
069dc     49 2B 52 FC | 	wrword	result1, local21
069e0     45 95 02 F6 | 	mov	local22, local17
069e4     41 7B E2 FA | 	rdword	local09, local13
069e8     06 94 06 F1 | 	add	local22, #6
069ec     4A 7B 52 FC | 	wrword	local09, local22
069f0     45 97 02 F6 | 	mov	local23, local17
069f4     4B 5F 0A F6 | 	mov	arg02, local23 wz
069f8     00 2A 06 A6 |  if_e	mov	result1, #0
069fc     37 5F 82 51 |  if_ne	sub	arg02, local03
06a00     04 5E 46 50 |  if_ne	shr	arg02, #4
06a04     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a08     15 85 02 F6 | 	mov	local14, result1
06a0c     45 5D 02 F6 | 	mov	arg01, local17
06a10     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
06a14     15 99 0A F6 | 	mov	local24, result1 wz
06a18     38 00 90 AD |  if_e	jmp	#LR__0342
06a1c     38 99 5A F2 | 	cmps	local24, local04 wcz
06a20     30 00 90 3D |  if_ae	jmp	#LR__0342
06a24     4C 9B 02 F6 | 	mov	local25, local24
06a28     04 9A 06 F1 | 	add	local25, #4
06a2c     37 7B 02 F6 | 	mov	local09, local03
06a30     4B 7D 02 F6 | 	mov	local10, local23
06a34     3D 5D 02 F6 | 	mov	arg01, local09
06a38     3E 5F 0A F6 | 	mov	arg02, local10 wz
06a3c     00 2A 06 A6 |  if_e	mov	result1, #0
06a40     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06a44     04 5E 46 50 |  if_ne	shr	arg02, #4
06a48     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a4c     15 7F 02 F6 | 	mov	local11, result1
06a50     4D 7F 52 FC | 	wrword	local11, local25
06a54                 | LR__0342
06a54                 | LR__0343
06a54     06 76 06 F1 | 	add	local07, #6
06a58     3B 85 52 FC | 	wrword	local14, local07
06a5c     36 00 00 FF 
06a60     80 7A 06 F6 | 	mov	local09, ##27776
06a64     36 7B 42 F5 | 	or	local09, local02
06a68     39 9D 02 F6 | 	mov	local26, local05
06a6c     02 9C 06 F1 | 	add	local26, #2
06a70     01 2A 62 FD | 	cogid	result1
06a74     15 7B 42 F5 | 	or	local09, result1
06a78     4E 7B 52 FC | 	wrword	local09, local26
06a7c     37 9F 02 F6 | 	mov	local27, local03
06a80     08 9E 06 F1 | 	add	local27, #8
06a84     4F 7B E2 FA | 	rdword	local09, local27
06a88     41 7B 52 FC | 	wrword	local09, local13
06a8c     39 5F 0A F6 | 	mov	arg02, local05 wz
06a90     00 2A 06 A6 |  if_e	mov	result1, #0
06a94     37 5F 82 51 |  if_ne	sub	arg02, local03
06a98     04 5E 46 50 |  if_ne	shr	arg02, #4
06a9c     2F 2B 02 56 |  if_ne	mov	result1, arg02
06aa0     4F 2B 52 FC | 	wrword	result1, local27
06aa4     08 72 06 F1 | 	add	local05, #8
06aa8     39 2B 02 F6 | 	mov	result1, local05
06aac     00 C0 31 FF 
06ab0     00 2A 46 F5 | 	or	result1, ##1669332992
06ab4                 | LR__0344
06ab4     AF F0 03 F6 | 	mov	ptra, fp
06ab8     BF 00 A0 FD | 	call	#popregs_
06abc                 | __system___gc_tryalloc_ret
06abc     2D 00 64 FD | 	ret
06ac0                 | 
06ac0                 | __system___gc_errmsg
06ac0     02 5A 05 F6 | 	mov	COUNT_, #2
06ac4     B0 00 A0 FD | 	call	#pushregs_
06ac8     2E 6B 02 F6 | 	mov	local01, arg01
06acc                 | LR__0345
06acc     35 6D CA FA | 	rdbyte	local02, local01 wz
06ad0     01 6A 06 F1 | 	add	local01, #1
06ad4     0C 00 90 AD |  if_e	jmp	#LR__0346
06ad8     36 5D 02 F6 | 	mov	arg01, local02
06adc     C4 F4 BF FD | 	call	#__system___tx
06ae0     E8 FF 9F FD | 	jmp	#LR__0345
06ae4                 | LR__0346
06ae4     00 2A 06 F6 | 	mov	result1, #0
06ae8     AF F0 03 F6 | 	mov	ptra, fp
06aec     BF 00 A0 FD | 	call	#popregs_
06af0                 | __system___gc_errmsg_ret
06af0     2D 00 64 FD | 	ret
06af4                 | 
06af4                 | __system___gc_alloc_managed
06af4     02 5A 05 F6 | 	mov	COUNT_, #2
06af8     B0 00 A0 FD | 	call	#pushregs_
06afc     2E 6B 02 F6 | 	mov	local01, arg01
06b00     00 5E 06 F6 | 	mov	arg02, #0
06b04     30 00 B0 FD | 	call	#__system___gc_doalloc
06b08     15 6D 0A F6 | 	mov	local02, result1 wz
06b0c     18 00 90 5D |  if_ne	jmp	#LR__0347
06b10     00 6A 5E F2 | 	cmps	local01, #0 wcz
06b14     10 00 90 ED |  if_be	jmp	#LR__0347
06b18     40 00 00 FF 
06b1c     8C 5C 06 F6 | 	mov	arg01, ##@LR__0453
06b20     9C FF BF FD | 	call	#__system___gc_errmsg
06b24     04 00 90 FD | 	jmp	#LR__0348
06b28                 | LR__0347
06b28     36 2B 02 F6 | 	mov	result1, local02
06b2c                 | LR__0348
06b2c     AF F0 03 F6 | 	mov	ptra, fp
06b30     BF 00 A0 FD | 	call	#popregs_
06b34                 | __system___gc_alloc_managed_ret
06b34     2D 00 64 FD | 	ret
06b38                 | 
06b38                 | __system___gc_doalloc
06b38     07 5A 05 F6 | 	mov	COUNT_, #7
06b3c     B0 00 A0 FD | 	call	#pushregs_
06b40     2E 6B 0A F6 | 	mov	local01, arg01 wz
06b44     2F 6D 02 F6 | 	mov	local02, arg02
06b48     00 2A 06 A6 |  if_e	mov	result1, #0
06b4c     8C 00 90 AD |  if_e	jmp	#LR__0356
06b50     17 6A 06 F1 | 	add	local01, #23
06b54     0F 6A 26 F5 | 	andn	local01, #15
06b58     04 6A 46 F0 | 	shr	local01, #4
06b5c     14 14 06 F1 | 	add	ptr___system__dat__, #20
06b60     0A 6F 02 F6 | 	mov	local03, ptr___system__dat__
06b64     37 5D 02 F6 | 	mov	arg01, local03
06b68     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06b6c     50 F3 BF FD | 	call	#__system___lockmem
06b70     35 5D 02 F6 | 	mov	arg01, local01
06b74     36 5F 02 F6 | 	mov	arg02, local02
06b78     68 FD BF FD | 	call	#__system___gc_tryalloc
06b7c     15 71 0A F6 | 	mov	local04, result1 wz
06b80     14 00 90 5D |  if_ne	jmp	#LR__0349
06b84     10 03 B0 FD | 	call	#__system___gc_docollect
06b88     35 5D 02 F6 | 	mov	arg01, local01
06b8c     36 5F 02 F6 | 	mov	arg02, local02
06b90     50 FD BF FD | 	call	#__system___gc_tryalloc
06b94     15 71 02 F6 | 	mov	local04, result1
06b98                 | LR__0349
06b98     37 01 68 FC | 	wrlong	#0, local03
06b9c     00 70 0E F2 | 	cmp	local04, #0 wz
06ba0     34 00 90 AD |  if_e	jmp	#LR__0355
06ba4     04 6A 66 F0 | 	shl	local01, #4
06ba8     08 6A 86 F1 | 	sub	local01, #8
06bac     35 73 52 F6 | 	abs	local05, local01 wc
06bb0     02 72 46 F0 | 	shr	local05, #2
06bb4     39 73 62 C6 |  if_b	neg	local05, local05
06bb8     39 75 0A F6 | 	mov	local06, local05 wz
06bbc     38 77 02 F6 | 	mov	local07, local04
06bc0     14 00 90 AD |  if_e	jmp	#LR__0354
06bc4     44 94 9F FE | 	loc	pa,	#(@LR__0352-@LR__0350)
06bc8     93 00 A0 FD | 	call	#FCACHE_LOAD_
06bcc                 | LR__0350
06bcc     3A 05 D8 FC | 	rep	@LR__0353, local06
06bd0                 | LR__0351
06bd0     3B 01 68 FC | 	wrlong	#0, local07
06bd4     04 76 06 F1 | 	add	local07, #4
06bd8                 | LR__0352
06bd8                 | LR__0353
06bd8                 | LR__0354
06bd8                 | LR__0355
06bd8     38 2B 02 F6 | 	mov	result1, local04
06bdc                 | LR__0356
06bdc     AF F0 03 F6 | 	mov	ptra, fp
06be0     BF 00 A0 FD | 	call	#popregs_
06be4                 | __system___gc_doalloc_ret
06be4     2D 00 64 FD | 	ret
06be8                 | 
06be8                 | __system___gc_isvalidptr
06be8     30 31 02 F6 | 	mov	_var01, arg03
06bec     18 33 02 F6 | 	mov	_var02, _var01
06bf0     00 F8 7F FF 
06bf4     00 32 06 F5 | 	and	_var02, ##-1048576
06bf8     00 C0 31 FF 
06bfc     00 32 0E F2 | 	cmp	_var02, ##1669332992 wz
06c00     00 2A 06 56 |  if_ne	mov	result1, #0
06c04     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06c08     08 30 86 F1 | 	sub	_var01, #8
06c0c     18 35 02 F6 | 	mov	_var03, _var01
06c10     00 F8 7F FF 
06c14     00 34 26 F5 | 	andn	_var03, ##-1048576
06c18     2E 35 5A F2 | 	cmps	_var03, arg01 wcz
06c1c     08 00 90 CD |  if_b	jmp	#LR__0357
06c20     2F 35 5A F2 | 	cmps	_var03, arg02 wcz
06c24     08 00 90 CD |  if_b	jmp	#LR__0358
06c28                 | LR__0357
06c28     00 2A 06 F6 | 	mov	result1, #0
06c2c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
06c30                 | LR__0358
06c30     1A 33 02 F6 | 	mov	_var02, _var03
06c34     2E 33 62 F5 | 	xor	_var02, arg01
06c38     0F 32 0E F5 | 	and	_var02, #15 wz
06c3c     00 2A 06 56 |  if_ne	mov	result1, #0
06c40     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06c44     1A 37 02 F6 | 	mov	_var04, _var03
06c48     02 36 06 F1 | 	add	_var04, #2
06c4c     1B 33 E2 FA | 	rdword	_var02, _var04
06c50     7F 00 00 FF 
06c54     C0 33 06 F5 | 	and	_var02, ##65472
06c58     36 00 00 FF 
06c5c     80 32 0E F2 | 	cmp	_var02, ##27776 wz
06c60     00 2A 06 56 |  if_ne	mov	result1, #0
06c64     1A 2B 02 A6 |  if_e	mov	result1, _var03
06c68                 | __system___gc_isvalidptr_ret
06c68     2D 00 64 FD | 	ret
06c6c                 | 
06c6c                 | __system___gc_dofree
06c6c     1A 5A 05 F6 | 	mov	COUNT_, #26
06c70     B0 00 A0 FD | 	call	#pushregs_
06c74     2E 6B 02 F6 | 	mov	local01, arg01
06c78     84 FB BF FD | 	call	#__system___gc_ptrs
06c7c     16 6D 02 F6 | 	mov	local02, result2
06c80     15 6F 02 F6 | 	mov	local03, result1
06c84     35 71 02 F6 | 	mov	local04, local01
06c88     02 70 06 F1 | 	add	local04, #2
06c8c     36 00 80 FF 
06c90     38 1F 59 FC | 	wrword	##27791, local04
06c94     35 73 02 F6 | 	mov	local05, local01
06c98     35 5D 02 F6 | 	mov	arg01, local01
06c9c     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
06ca0     15 75 02 F6 | 	mov	local06, result1
06ca4     A8 93 9F FE | 	loc	pa,	#(@LR__0360-@LR__0359)
06ca8     93 00 A0 FD | 	call	#FCACHE_LOAD_
06cac                 | LR__0359
06cac     04 72 06 F1 | 	add	local05, #4
06cb0     39 77 02 F6 | 	mov	local07, local05
06cb4     3B 5F EA FA | 	rdword	arg02, local07 wz
06cb8     37 5D 02 F6 | 	mov	arg01, local03
06cbc     00 2A 06 A6 |  if_e	mov	result1, #0
06cc0     04 5E 66 50 |  if_ne	shl	arg02, #4
06cc4     2F 5D 02 51 |  if_ne	add	arg01, arg02
06cc8     2E 2B 02 56 |  if_ne	mov	result1, arg01
06ccc     15 73 0A F6 | 	mov	local05, result1 wz
06cd0     28 00 90 AD |  if_e	jmp	#LR__0361
06cd4     39 5D 02 F6 | 	mov	arg01, local05
06cd8     00 78 06 F6 | 	mov	local08, #0
06cdc     02 5C 06 F1 | 	add	arg01, #2
06ce0     2E 7B E2 FA | 	rdword	local09, arg01
06ce4     36 00 00 FF 
06ce8     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06cec     01 78 66 A6 |  if_e	neg	local08, #1
06cf0     3C 2B 02 F6 | 	mov	result1, local08
06cf4     15 7D 0A F6 | 	mov	local10, result1 wz
06cf8     B0 FF 9F AD |  if_e	jmp	#LR__0359
06cfc                 | LR__0360
06cfc                 | LR__0361
06cfc     00 72 0E F2 | 	cmp	local05, #0 wz
06d00     37 73 02 A6 |  if_e	mov	local05, local03
06d04     39 7F 02 F6 | 	mov	local11, local05
06d08     06 7E 06 F1 | 	add	local11, #6
06d0c     35 81 02 F6 | 	mov	local12, local01
06d10     3F 83 E2 FA | 	rdword	local13, local11
06d14     06 80 06 F1 | 	add	local12, #6
06d18     40 83 52 FC | 	wrword	local13, local12
06d1c     35 5F 0A F6 | 	mov	arg02, local01 wz
06d20     00 2A 06 A6 |  if_e	mov	result1, #0
06d24     37 5F 82 51 |  if_ne	sub	arg02, local03
06d28     04 5E 46 50 |  if_ne	shr	arg02, #4
06d2c     2F 2B 02 56 |  if_ne	mov	result1, arg02
06d30     15 85 02 F6 | 	mov	local14, result1
06d34     3F 85 52 FC | 	wrword	local14, local11
06d38     37 73 0A F2 | 	cmp	local05, local03 wz
06d3c     74 00 90 AD |  if_e	jmp	#LR__0364
06d40     39 5D 02 F6 | 	mov	arg01, local05
06d44     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
06d48     35 2B 0A F2 | 	cmp	result1, local01 wz
06d4c     64 00 90 5D |  if_ne	jmp	#LR__0363
06d50     39 87 02 F6 | 	mov	local15, local05
06d54     43 89 E2 FA | 	rdword	local16, local15
06d58     35 8B 02 F6 | 	mov	local17, local01
06d5c     45 7D E2 FA | 	rdword	local10, local17
06d60     3E 89 02 F1 | 	add	local16, local10
06d64     43 89 52 FC | 	wrword	local16, local15
06d68     38 01 58 FC | 	wrword	#0, local04
06d6c     35 5D 02 F6 | 	mov	arg01, local01
06d70     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
06d74     15 75 02 F6 | 	mov	local06, result1
06d78     36 75 5A F2 | 	cmps	local06, local02 wcz
06d7c     24 00 90 3D |  if_ae	jmp	#LR__0362
06d80     3A 8D 02 F6 | 	mov	local18, local06
06d84     04 8C 06 F1 | 	add	local18, #4
06d88     39 5F 0A F6 | 	mov	arg02, local05 wz
06d8c     00 2A 06 A6 |  if_e	mov	result1, #0
06d90     37 5F 82 51 |  if_ne	sub	arg02, local03
06d94     04 5E 46 50 |  if_ne	shr	arg02, #4
06d98     2F 2B 02 56 |  if_ne	mov	result1, arg02
06d9c     15 85 02 F6 | 	mov	local14, result1
06da0     46 85 52 FC | 	wrword	local14, local18
06da4                 | LR__0362
06da4     40 83 E2 FA | 	rdword	local13, local12
06da8     3F 83 52 FC | 	wrword	local13, local11
06dac     40 01 58 FC | 	wrword	#0, local12
06db0     39 6B 02 F6 | 	mov	local01, local05
06db4                 | LR__0363
06db4                 | LR__0364
06db4     35 5D 02 F6 | 	mov	arg01, local01
06db8     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
06dbc     15 8F 0A F6 | 	mov	local19, result1 wz
06dc0     C4 00 90 AD |  if_e	jmp	#LR__0366
06dc4     36 8F 5A F2 | 	cmps	local19, local02 wcz
06dc8     BC 00 90 3D |  if_ae	jmp	#LR__0366
06dcc     47 5D 02 F6 | 	mov	arg01, local19
06dd0     00 78 06 F6 | 	mov	local08, #0
06dd4     02 5C 06 F1 | 	add	arg01, #2
06dd8     2E 7B E2 FA | 	rdword	local09, arg01
06ddc     36 00 00 FF 
06de0     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06de4     01 78 66 A6 |  if_e	neg	local08, #1
06de8     3C 2B 0A F6 | 	mov	result1, local08 wz
06dec     98 00 90 AD |  if_e	jmp	#LR__0366
06df0     35 73 02 F6 | 	mov	local05, local01
06df4     47 6B 02 F6 | 	mov	local01, local19
06df8     39 91 02 F6 | 	mov	local20, local05
06dfc     48 93 E2 FA | 	rdword	local21, local20
06e00     35 95 02 F6 | 	mov	local22, local01
06e04     4A 7D E2 FA | 	rdword	local10, local22
06e08     3E 93 02 F1 | 	add	local21, local10
06e0c     48 93 52 FC | 	wrword	local21, local20
06e10     35 97 02 F6 | 	mov	local23, local01
06e14     06 96 06 F1 | 	add	local23, #6
06e18     39 99 02 F6 | 	mov	local24, local05
06e1c     4B 83 E2 FA | 	rdword	local13, local23
06e20     06 98 06 F1 | 	add	local24, #6
06e24     4C 83 52 FC | 	wrword	local13, local24
06e28     35 9B 02 F6 | 	mov	local25, local01
06e2c     02 9A 06 F1 | 	add	local25, #2
06e30     4D 55 59 FC | 	wrword	#170, local25
06e34     4B 01 58 FC | 	wrword	#0, local23
06e38     35 83 02 F6 | 	mov	local13, local01
06e3c     41 5D 02 F6 | 	mov	arg01, local13
06e40     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
06e44     15 7D 02 F6 | 	mov	local10, result1
06e48     3E 75 0A F6 | 	mov	local06, local10 wz
06e4c     38 00 90 AD |  if_e	jmp	#LR__0365
06e50     36 75 5A F2 | 	cmps	local06, local02 wcz
06e54     30 00 90 3D |  if_ae	jmp	#LR__0365
06e58     3A 9D 02 F6 | 	mov	local26, local06
06e5c     04 9C 06 F1 | 	add	local26, #4
06e60     37 83 02 F6 | 	mov	local13, local03
06e64     39 7D 02 F6 | 	mov	local10, local05
06e68     41 5D 02 F6 | 	mov	arg01, local13
06e6c     3E 5F 0A F6 | 	mov	arg02, local10 wz
06e70     00 2A 06 A6 |  if_e	mov	result1, #0
06e74     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06e78     04 5E 46 50 |  if_ne	shr	arg02, #4
06e7c     2F 2B 02 56 |  if_ne	mov	result1, arg02
06e80     15 85 02 F6 | 	mov	local14, result1
06e84     4E 85 52 FC | 	wrword	local14, local26
06e88                 | LR__0365
06e88                 | LR__0366
06e88     3A 2B 02 F6 | 	mov	result1, local06
06e8c     AF F0 03 F6 | 	mov	ptra, fp
06e90     BF 00 A0 FD | 	call	#popregs_
06e94                 | __system___gc_dofree_ret
06e94     2D 00 64 FD | 	ret
06e98                 | 
06e98                 | __system___gc_docollect
06e98     0C 5A 05 F6 | 	mov	COUNT_, #12
06e9c     B0 00 A0 FD | 	call	#pushregs_
06ea0     5C F9 BF FD | 	call	#__system___gc_ptrs
06ea4     16 6B 02 F6 | 	mov	local01, result2
06ea8     15 6D 02 F6 | 	mov	local02, result1
06eac     36 5D 02 F6 | 	mov	arg01, local02
06eb0     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06eb4     15 6F 0A F6 | 	mov	local03, result1 wz
06eb8     01 2A 62 FD | 	cogid	result1
06ebc     15 71 02 F6 | 	mov	local04, result1
06ec0     2C 00 90 AD |  if_e	jmp	#LR__0368
06ec4                 | LR__0367
06ec4     35 6F 5A F2 | 	cmps	local03, local01 wcz
06ec8     24 00 90 3D |  if_ae	jmp	#LR__0368
06ecc     37 73 02 F6 | 	mov	local05, local03
06ed0     02 72 06 F1 | 	add	local05, #2
06ed4     39 75 E2 FA | 	rdword	local06, local05
06ed8     20 74 26 F5 | 	andn	local06, #32
06edc     39 75 52 FC | 	wrword	local06, local05
06ee0     37 5D 02 F6 | 	mov	arg01, local03
06ee4     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06ee8     15 6F 0A F6 | 	mov	local03, result1 wz
06eec     D4 FF 9F 5D |  if_ne	jmp	#LR__0367
06ef0                 | LR__0368
06ef0     00 76 06 F6 | 	mov	local07, #0
06ef4     00 5C 06 F6 | 	mov	arg01, #0
06ef8     5C EF BF FD | 	call	#__system____topofstack
06efc     15 79 02 F6 | 	mov	local08, result1
06f00     3B 5D 02 F6 | 	mov	arg01, local07
06f04     3C 5F 02 F6 | 	mov	arg02, local08
06f08     A0 00 B0 FD | 	call	#__system___gc_markhub
06f0c     2C 01 B0 FD | 	call	#__system___gc_markcog
06f10     36 5D 02 F6 | 	mov	arg01, local02
06f14     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f18     15 7B 0A F6 | 	mov	local09, result1 wz
06f1c     10 00 90 5D |  if_ne	jmp	#LR__0369
06f20     40 00 00 FF 
06f24     A9 5C 06 F6 | 	mov	arg01, ##@LR__0454
06f28     94 FB BF FD | 	call	#__system___gc_errmsg
06f2c     70 00 90 FD | 	jmp	#LR__0375
06f30                 | LR__0369
06f30                 | LR__0370
06f30     3D 6F 02 F6 | 	mov	local03, local09
06f34     37 5D 02 F6 | 	mov	arg01, local03
06f38     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f3c     15 7B 02 F6 | 	mov	local09, result1
06f40     37 7D 02 F6 | 	mov	local10, local03
06f44     02 7C 06 F1 | 	add	local10, #2
06f48     3E 7F E2 FA | 	rdword	local11, local10
06f4c     20 7E CE F7 | 	test	local11, #32 wz
06f50     3C 00 90 5D |  if_ne	jmp	#LR__0373
06f54     3F 81 02 F6 | 	mov	local12, local11
06f58     10 80 0E F5 | 	and	local12, #16 wz
06f5c     30 00 90 5D |  if_ne	jmp	#LR__0373
06f60     3F 77 02 F6 | 	mov	local07, local11
06f64     0F 76 06 F5 | 	and	local07, #15
06f68     3B 7F 02 F6 | 	mov	local11, local07
06f6c     38 7F 0A F2 | 	cmp	local11, local04 wz
06f70     08 00 90 AD |  if_e	jmp	#LR__0371
06f74     0E 7E 0E F2 | 	cmp	local11, #14 wz
06f78     14 00 90 5D |  if_ne	jmp	#LR__0372
06f7c                 | LR__0371
06f7c     37 77 02 F6 | 	mov	local07, local03
06f80     3B 5D 02 F6 | 	mov	arg01, local07
06f84     E4 FC BF FD | 	call	#__system___gc_dofree
06f88     15 81 02 F6 | 	mov	local12, result1
06f8c     40 7B 02 F6 | 	mov	local09, local12
06f90                 | LR__0372
06f90                 | LR__0373
06f90     00 7A 0E F2 | 	cmp	local09, #0 wz
06f94     08 00 90 AD |  if_e	jmp	#LR__0374
06f98     35 7B 5A F2 | 	cmps	local09, local01 wcz
06f9c     90 FF 9F CD |  if_b	jmp	#LR__0370
06fa0                 | LR__0374
06fa0                 | LR__0375
06fa0     AF F0 03 F6 | 	mov	ptra, fp
06fa4     BF 00 A0 FD | 	call	#popregs_
06fa8                 | __system___gc_docollect_ret
06fa8     2D 00 64 FD | 	ret
06fac                 | 
06fac                 | __system___gc_markhub
06fac     0A 5A 05 F6 | 	mov	COUNT_, #10
06fb0     B0 00 A0 FD | 	call	#pushregs_
06fb4     2E 6B 02 F6 | 	mov	local01, arg01
06fb8     2F 6D 02 F6 | 	mov	local02, arg02
06fbc     40 F8 BF FD | 	call	#__system___gc_ptrs
06fc0     15 6F 02 F6 | 	mov	local03, result1
06fc4     16 71 02 F6 | 	mov	local04, result2
06fc8                 | LR__0376
06fc8     36 6B 5A F2 | 	cmps	local01, local02 wcz
06fcc     60 00 90 3D |  if_ae	jmp	#LR__0377
06fd0     35 61 02 FB | 	rdlong	arg03, local01
06fd4     04 6A 06 F1 | 	add	local01, #4
06fd8     37 5D 02 F6 | 	mov	arg01, local03
06fdc     38 5F 02 F6 | 	mov	arg02, local04
06fe0     04 FC BF FD | 	call	#__system___gc_isvalidptr
06fe4     15 73 0A F6 | 	mov	local05, result1 wz
06fe8     DC FF 9F AD |  if_e	jmp	#LR__0376
06fec     39 5D 02 F6 | 	mov	arg01, local05
06ff0     00 74 06 F6 | 	mov	local06, #0
06ff4     02 5C 06 F1 | 	add	arg01, #2
06ff8     2E 77 E2 FA | 	rdword	local07, arg01
06ffc     36 00 00 FF 
07000     8F 76 0E F2 | 	cmp	local07, ##27791 wz
07004     01 74 66 A6 |  if_e	neg	local06, #1
07008     3A 2B 02 F6 | 	mov	result1, local06
0700c     15 79 0A F6 | 	mov	local08, result1 wz
07010     B4 FF 9F 5D |  if_ne	jmp	#LR__0376
07014     39 7B 02 F6 | 	mov	local09, local05
07018     02 7A 06 F1 | 	add	local09, #2
0701c     3D 7D E2 FA | 	rdword	local10, local09
07020     0F 7C 26 F5 | 	andn	local10, #15
07024     2E 7C 46 F5 | 	or	local10, #46
07028     3D 7D 52 FC | 	wrword	local10, local09
0702c     98 FF 9F FD | 	jmp	#LR__0376
07030                 | LR__0377
07030     AF F0 03 F6 | 	mov	ptra, fp
07034     BF 00 A0 FD | 	call	#popregs_
07038                 | __system___gc_markhub_ret
07038     2D 00 64 FD | 	ret
0703c                 | 
0703c                 | __system___gc_markcog
0703c     06 5A 05 F6 | 	mov	COUNT_, #6
07040     B0 00 A0 FD | 	call	#pushregs_
07044     B8 F7 BF FD | 	call	#__system___gc_ptrs
07048     15 6B 02 F6 | 	mov	local01, result1
0704c     16 6D 02 F6 | 	mov	local02, result2
07050     00 6E 06 F6 | 	mov	local03, #0
07054                 | LR__0378
07054     F0 71 06 F6 | 	mov	local04, #496
07058     37 71 82 F1 | 	sub	local04, local03
0705c     F0 71 06 F1 | 	add	local04, #496
07060                 | 	'.live	local04
07060     00 70 96 F9 | 	alts	local04, #0
07064     38 73 02 F6 | 	mov	local05, local04
07068     36 5F 02 F6 | 	mov	arg02, local02
0706c     35 5D 02 F6 | 	mov	arg01, local01
07070     39 61 02 F6 | 	mov	arg03, local05
07074     70 FB BF FD | 	call	#__system___gc_isvalidptr
07078     15 73 0A F6 | 	mov	local05, result1 wz
0707c     10 00 90 AD |  if_e	jmp	#LR__0379
07080     02 72 06 F1 | 	add	local05, #2
07084     39 75 E2 FA | 	rdword	local06, local05
07088     20 74 46 F5 | 	or	local06, #32
0708c     39 75 52 FC | 	wrword	local06, local05
07090                 | LR__0379
07090     01 6E 06 F1 | 	add	local03, #1
07094     F0 6F 5E F2 | 	cmps	local03, #496 wcz
07098     B8 FF 9F CD |  if_b	jmp	#LR__0378
0709c     AF F0 03 F6 | 	mov	ptra, fp
070a0     BF 00 A0 FD | 	call	#popregs_
070a4                 | __system___gc_markcog_ret
070a4     2D 00 64 FD | 	ret
070a8                 | 
070a8                 | __system__write
070a8     03 5A 05 F6 | 	mov	COUNT_, #3
070ac     B0 00 A0 FD | 	call	#pushregs_
070b0     2E 6B 02 F6 | 	mov	local01, arg01
070b4     2F 6D 02 F6 | 	mov	local02, arg02
070b8     30 6F 02 F6 | 	mov	local03, arg03
070bc     0A 6A 1E F2 | 	cmp	local01, #10 wcz
070c0     1C 00 90 CD |  if_b	jmp	#LR__0380
070c4     01 00 00 FF 
070c8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
070cc     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
070d0     01 00 00 FF 
070d4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
070d8     01 2A 66 F6 | 	neg	result1, #1
070dc     28 00 90 FD | 	jmp	#LR__0381
070e0                 | LR__0380
070e0     35 5D 02 F6 | 	mov	arg01, local01
070e4     01 5C 66 F0 | 	shl	arg01, #1
070e8     35 5D 02 F1 | 	add	arg01, local01
070ec     04 5C 66 F0 | 	shl	arg01, #4
070f0     1C 14 06 F1 | 	add	ptr___system__dat__, #28
070f4     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
070f8     36 5F 02 F6 | 	mov	arg02, local02
070fc     37 61 02 F6 | 	mov	arg03, local03
07100     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07104     4C 09 B0 FD | 	call	#__system___vfswrite
07108                 | LR__0381
07108     AF F0 03 F6 | 	mov	ptra, fp
0710c     BF 00 A0 FD | 	call	#popregs_
07110                 | __system__write_ret
07110     2D 00 64 FD | 	ret
07114                 | 
07114                 | __system__read
07114     03 5A 05 F6 | 	mov	COUNT_, #3
07118     B0 00 A0 FD | 	call	#pushregs_
0711c     2E 6B 02 F6 | 	mov	local01, arg01
07120     2F 6D 02 F6 | 	mov	local02, arg02
07124     30 6F 02 F6 | 	mov	local03, arg03
07128     0A 6A 1E F2 | 	cmp	local01, #10 wcz
0712c     1C 00 90 CD |  if_b	jmp	#LR__0382
07130     01 00 00 FF 
07134     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07138     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0713c     01 00 00 FF 
07140     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07144     01 2A 66 F6 | 	neg	result1, #1
07148     28 00 90 FD | 	jmp	#LR__0383
0714c                 | LR__0382
0714c     35 5D 02 F6 | 	mov	arg01, local01
07150     01 5C 66 F0 | 	shl	arg01, #1
07154     35 5D 02 F1 | 	add	arg01, local01
07158     04 5C 66 F0 | 	shl	arg01, #4
0715c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07160     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
07164     36 5F 02 F6 | 	mov	arg02, local02
07168     37 61 02 F6 | 	mov	arg03, local03
0716c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07170     A4 0A B0 FD | 	call	#__system___vfsread
07174                 | LR__0383
07174     AF F0 03 F6 | 	mov	ptra, fp
07178     BF 00 A0 FD | 	call	#popregs_
0717c                 | __system__read_ret
0717c     2D 00 64 FD | 	ret
07180                 | 
07180                 | __system__close
07180     01 5A 05 F6 | 	mov	COUNT_, #1
07184     B0 00 A0 FD | 	call	#pushregs_
07188     2E 6B 02 F6 | 	mov	local01, arg01
0718c     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07190     1C 00 90 CD |  if_b	jmp	#LR__0384
07194     01 00 00 FF 
07198     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0719c     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
071a0     01 00 00 FF 
071a4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
071a8     01 2A 66 F6 | 	neg	result1, #1
071ac     20 00 90 FD | 	jmp	#LR__0385
071b0                 | LR__0384
071b0     35 5D 02 F6 | 	mov	arg01, local01
071b4     01 5C 66 F0 | 	shl	arg01, #1
071b8     35 5D 02 F1 | 	add	arg01, local01
071bc     04 5C 66 F0 | 	shl	arg01, #4
071c0     1C 14 06 F1 | 	add	ptr___system__dat__, #28
071c4     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
071c8     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
071cc     80 03 B0 FD | 	call	#__system___closeraw
071d0                 | LR__0385
071d0     AF F0 03 F6 | 	mov	ptra, fp
071d4     BF 00 A0 FD | 	call	#popregs_
071d8                 | __system__close_ret
071d8     2D 00 64 FD | 	ret
071dc                 | 
071dc                 | __system__lseek
071dc     09 5A 05 F6 | 	mov	COUNT_, #9
071e0     B0 00 A0 FD | 	call	#pushregs_
071e4     2E 6B 02 F6 | 	mov	local01, arg01
071e8     2F 6D 02 F6 | 	mov	local02, arg02
071ec     30 6F 02 F6 | 	mov	local03, arg03
071f0     0A 6A 1E F2 | 	cmp	local01, #10 wcz
071f4     1C 00 90 CD |  if_b	jmp	#LR__0386
071f8     01 00 00 FF 
071fc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07200     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07204     01 00 00 FF 
07208     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0720c     01 2A 66 F6 | 	neg	result1, #1
07210     D8 00 90 FD | 	jmp	#LR__0390
07214                 | LR__0386
07214     35 71 02 F6 | 	mov	local04, local01
07218     01 70 66 F0 | 	shl	local04, #1
0721c     35 71 02 F1 | 	add	local04, local01
07220     04 70 66 F0 | 	shl	local04, #4
07224     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07228     0A 71 02 F1 | 	add	local04, ptr___system__dat__
0722c     2C 70 06 F1 | 	add	local04, #44
07230     38 73 0A FB | 	rdlong	local05, local04 wz
07234     2C 70 86 F1 | 	sub	local04, #44
07238     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
0723c     1C 00 90 5D |  if_ne	jmp	#LR__0387
07240     01 00 00 FF 
07244     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07248     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
0724c     01 00 00 FF 
07250     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07254     01 2A 66 F6 | 	neg	result1, #1
07258     90 00 90 FD | 	jmp	#LR__0390
0725c                 | LR__0387
0725c     08 70 06 F1 | 	add	local04, #8
07260     38 73 02 FB | 	rdlong	local05, local04
07264     08 70 86 F1 | 	sub	local04, #8
07268     40 72 CE F7 | 	test	local05, #64 wz
0726c     14 00 90 AD |  if_e	jmp	#LR__0388
07270     08 70 06 F1 | 	add	local04, #8
07274     38 73 02 FB | 	rdlong	local05, local04
07278     80 72 46 F5 | 	or	local05, #128
0727c     38 73 62 FC | 	wrlong	local05, local04
07280     08 70 86 F1 | 	sub	local04, #8
07284                 | LR__0388
07284     2C 70 06 F1 | 	add	local04, #44
07288     38 73 02 FB | 	rdlong	local05, local04
0728c     2C 70 86 F1 | 	sub	local04, #44
07290     39 75 02 FB | 	rdlong	local06, local05
07294     04 72 06 F1 | 	add	local05, #4
07298     39 77 02 FB | 	rdlong	local07, local05
0729c     38 5D 02 F6 | 	mov	arg01, local04
072a0     36 5F 02 F6 | 	mov	arg02, local02
072a4     37 61 02 F6 | 	mov	arg03, local03
072a8     07 79 02 F6 | 	mov	local08, objptr
072ac     3A 0F 02 F6 | 	mov	objptr, local06
072b0     2D 76 62 FD | 	call	local07
072b4     3C 0F 02 F6 | 	mov	objptr, local08
072b8     15 7B 02 F6 | 	mov	local09, result1
072bc     00 7A 5E F2 | 	cmps	local09, #0 wcz
072c0     24 00 90 3D |  if_ae	jmp	#LR__0389
072c4     3D 5D 6A F6 | 	neg	arg01, local09 wz
072c8     01 00 00 FF 
072cc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
072d0     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
072d4     01 00 00 FF 
072d8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
072dc     01 2A 66 56 |  if_ne	neg	result1, #1
072e0     00 2A 06 A6 |  if_e	mov	result1, #0
072e4     04 00 90 FD | 	jmp	#LR__0390
072e8                 | LR__0389
072e8     3D 2B 02 F6 | 	mov	result1, local09
072ec                 | LR__0390
072ec     AF F0 03 F6 | 	mov	ptra, fp
072f0     BF 00 A0 FD | 	call	#popregs_
072f4                 | __system__lseek_ret
072f4     2D 00 64 FD | 	ret
072f8                 | 
072f8                 | __system____getftab
072f8     0A 5C 1E F2 | 	cmp	arg01, #10 wcz
072fc     00 2A 06 36 |  if_ae	mov	result1, #0
07300     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
07304     2E 2B 02 F6 | 	mov	result1, arg01
07308     01 2A 66 F0 | 	shl	result1, #1
0730c     2E 2B 02 F1 | 	add	result1, arg01
07310     04 2A 66 F0 | 	shl	result1, #4
07314     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07318     0A 2B 02 F1 | 	add	result1, ptr___system__dat__
0731c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07320                 | __system____getftab_ret
07320     2D 00 64 FD | 	ret
07324                 | 
07324                 | __system___strrev
07324     2E 31 CA FA | 	rdbyte	_var01, arg01 wz
07328     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
0732c     2E 33 02 F6 | 	mov	_var02, arg01
07330     D8 8C 9F FE | 	loc	pa,	#(@LR__0392-@LR__0391)
07334     93 00 A0 FD | 	call	#FCACHE_LOAD_
07338                 | LR__0391
07338     19 31 CA FA | 	rdbyte	_var01, _var02 wz
0733c     01 32 06 51 |  if_ne	add	_var02, #1
07340     F4 FF 9F 5D |  if_ne	jmp	#LR__0391
07344                 | LR__0392
07344     01 32 86 F1 | 	sub	_var02, #1
07348                 | LR__0393
07348     2E 33 5A F2 | 	cmps	_var02, arg01 wcz
0734c     1C 00 90 ED |  if_be	jmp	#LR__0394
07350     2E 35 C2 FA | 	rdbyte	_var03, arg01
07354     19 37 C2 FA | 	rdbyte	_var04, _var02
07358     2E 37 42 FC | 	wrbyte	_var04, arg01
0735c     19 35 42 FC | 	wrbyte	_var03, _var02
07360     01 5C 06 F1 | 	add	arg01, #1
07364     01 32 86 F1 | 	sub	_var02, #1
07368     DC FF 9F FD | 	jmp	#LR__0393
0736c                 | LR__0394
0736c                 | __system___strrev_ret
0736c     2D 00 64 FD | 	ret
07370                 | 
07370                 | __system___fmtpad
07370     0C 5A 05 F6 | 	mov	COUNT_, #12
07374     B0 00 A0 FD | 	call	#pushregs_
07378     2E 6B 02 F6 | 	mov	local01, arg01
0737c     2F 6D 02 F6 | 	mov	local02, arg02
07380     31 6F 02 F6 | 	mov	local03, arg04
07384     36 71 EA F8 | 	getbyte	local04, local02, #1
07388     16 6C 46 F0 | 	shr	local02, #22
0738c     03 6C 0E F5 | 	and	local02, #3 wz
07390     00 72 06 F6 | 	mov	local05, #0
07394     01 6C 06 A6 |  if_e	mov	local02, #1
07398     37 6D CA F7 | 	test	local02, local03 wz
0739c     00 2A 06 A6 |  if_e	mov	result1, #0
073a0     80 00 90 AD |  if_e	jmp	#LR__0398
073a4     30 71 82 F1 | 	sub	local04, arg03
073a8     38 75 02 F6 | 	mov	local06, local04
073ac     00 74 5E F2 | 	cmps	local06, #0 wcz
073b0     00 2A 06 E6 |  if_be	mov	result1, #0
073b4     6C 00 90 ED |  if_be	jmp	#LR__0398
073b8     03 6C 0E F2 | 	cmp	local02, #3 wz
073bc     18 00 90 5D |  if_ne	jmp	#LR__0395
073c0     01 6E 0E F2 | 	cmp	local03, #1 wz
073c4     6E 76 62 FD | 	wrz	local07
073c8     3B 75 02 F1 | 	add	local06, local07
073cc     3A 75 52 F6 | 	abs	local06, local06 wc
073d0     01 74 46 F0 | 	shr	local06, #1
073d4     3A 75 62 C6 |  if_b	neg	local06, local06
073d8                 | LR__0395
073d8     00 74 5E F2 | 	cmps	local06, #0 wcz
073dc     40 00 90 ED |  if_be	jmp	#LR__0397
073e0     3A 79 02 F6 | 	mov	local08, local06
073e4                 | LR__0396
073e4     35 7B 02 F6 | 	mov	local09, local01
073e8     3D 77 02 FB | 	rdlong	local07, local09
073ec     04 7A 06 F1 | 	add	local09, #4
073f0     3D 7D 02 FB | 	rdlong	local10, local09
073f4     20 5C 06 F6 | 	mov	arg01, #32
073f8     07 7F 02 F6 | 	mov	local11, objptr
073fc     3B 0F 02 F6 | 	mov	objptr, local07
07400     2D 7C 62 FD | 	call	local10
07404     3F 0F 02 F6 | 	mov	objptr, local11
07408     15 81 02 F6 | 	mov	local12, result1
0740c     00 80 5E F2 | 	cmps	local12, #0 wcz
07410     40 2B 02 C6 |  if_b	mov	result1, local12
07414     0C 00 90 CD |  if_b	jmp	#LR__0398
07418     40 73 02 F1 | 	add	local05, local12
0741c     F1 79 6E FB | 	djnz	local08, #LR__0396
07420                 | LR__0397
07420     39 2B 02 F6 | 	mov	result1, local05
07424                 | LR__0398
07424     AF F0 03 F6 | 	mov	ptra, fp
07428     BF 00 A0 FD | 	call	#popregs_
0742c                 | __system___fmtpad_ret
0742c     2D 00 64 FD | 	ret
07430                 | 
07430                 | __system___uitoa
07430     09 5A 05 F6 | 	mov	COUNT_, #9
07434     B0 00 A0 FD | 	call	#pushregs_
07438     2E 6B 02 F6 | 	mov	local01, arg01
0743c     2F 6D 02 F6 | 	mov	local02, arg02
07440     30 6F 02 F6 | 	mov	local03, arg03
07444     31 71 02 F6 | 	mov	local04, arg04
07448     32 73 0A F6 | 	mov	local05, arg05 wz
0744c     35 75 02 F6 | 	mov	local06, local01
07450     00 76 06 F6 | 	mov	local07, #0
07454     37 78 06 56 |  if_ne	mov	local08, #55
07458     57 78 06 A6 |  if_e	mov	local08, #87
0745c                 | LR__0399
0745c     36 0B 03 F6 | 	mov	muldiva_, local02
07460     37 0D 03 F6 | 	mov	muldivb_, local03
07464     CC 00 A0 FD | 	call	#unsdivide_
07468     85 7B 02 F6 | 	mov	local09, muldiva_
0746c     0A 7A 1E F2 | 	cmp	local09, #10 wcz
07470     30 7A 06 C1 |  if_b	add	local09, #48
07474     3C 7B 02 31 |  if_ae	add	local09, local08
07478     3A 7B 42 FC | 	wrbyte	local09, local06
0747c     36 0B 03 F6 | 	mov	muldiva_, local02
07480     37 0D 03 F6 | 	mov	muldivb_, local03
07484     01 74 06 F1 | 	add	local06, #1
07488     CC 00 A0 FD | 	call	#unsdivide_
0748c     86 6D 0A F6 | 	mov	local02, muldivb_ wz
07490     01 76 06 F1 | 	add	local07, #1
07494     C4 FF 9F 5D |  if_ne	jmp	#LR__0399
07498     38 77 1A F2 | 	cmp	local07, local04 wcz
0749c     BC FF 9F CD |  if_b	jmp	#LR__0399
074a0     3A 01 48 FC | 	wrbyte	#0, local06
074a4     35 5D 02 F6 | 	mov	arg01, local01
074a8     78 FE BF FD | 	call	#__system___strrev
074ac     3B 2B 02 F6 | 	mov	result1, local07
074b0     AF F0 03 F6 | 	mov	ptra, fp
074b4     BF 00 A0 FD | 	call	#popregs_
074b8                 | __system___uitoa_ret
074b8     2D 00 64 FD | 	ret
074bc                 | 
074bc                 | __system___gettxfunc
074bc     03 5A 05 F6 | 	mov	COUNT_, #3
074c0     B0 00 A0 FD | 	call	#pushregs_
074c4     30 FE BF FD | 	call	#__system____getftab
074c8     15 6B 0A F6 | 	mov	local01, result1 wz
074cc     14 00 90 AD |  if_e	jmp	#LR__0400
074d0     08 6A 06 F1 | 	add	local01, #8
074d4     35 6D 02 FB | 	rdlong	local02, local01
074d8     08 6A 86 F1 | 	sub	local01, #8
074dc     36 6F 0A F6 | 	mov	local03, local02 wz
074e0     08 00 90 5D |  if_ne	jmp	#LR__0401
074e4                 | LR__0400
074e4     00 2A 06 F6 | 	mov	result1, #0
074e8     0C 00 90 FD | 	jmp	#LR__0402
074ec                 | LR__0401
074ec     35 5D 02 F6 | 	mov	arg01, local01
074f0     09 5F 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
074f4     88 E9 BF FD | 	call	#__system___make_methodptr
074f8                 | LR__0402
074f8     AF F0 03 F6 | 	mov	ptra, fp
074fc     BF 00 A0 FD | 	call	#popregs_
07500                 | __system___gettxfunc_ret
07500     2D 00 64 FD | 	ret
07504                 | 
07504                 | __system___getiolock_0145
07504     03 5A 05 F6 | 	mov	COUNT_, #3
07508     B0 00 A0 FD | 	call	#pushregs_
0750c     E8 FD BF FD | 	call	#__system____getftab
07510     15 6B 0A F6 | 	mov	local01, result1 wz
07514     14 00 90 AD |  if_e	jmp	#LR__0403
07518     08 6A 06 F1 | 	add	local01, #8
0751c     35 6D 02 FB | 	rdlong	local02, local01
07520     08 6A 86 F1 | 	sub	local01, #8
07524     36 6F 0A F6 | 	mov	local03, local02 wz
07528     10 00 90 5D |  if_ne	jmp	#LR__0404
0752c                 | LR__0403
0752c     18 14 06 F1 | 	add	ptr___system__dat__, #24
07530     0A 2B 02 F6 | 	mov	result1, ptr___system__dat__
07534     18 14 86 F1 | 	sub	ptr___system__dat__, #24
07538     08 00 90 FD | 	jmp	#LR__0405
0753c                 | LR__0404
0753c     0C 6A 06 F1 | 	add	local01, #12
07540     35 2B 02 F6 | 	mov	result1, local01
07544                 | LR__0405
07544     AF F0 03 F6 | 	mov	ptra, fp
07548     BF 00 A0 FD | 	call	#popregs_
0754c                 | __system___getiolock_0145_ret
0754c     2D 00 64 FD | 	ret
07550                 | 
07550                 | __system___closeraw
07550     06 5A 05 F6 | 	mov	COUNT_, #6
07554     B0 00 A0 FD | 	call	#pushregs_
07558     2E 6B 02 F6 | 	mov	local01, arg01
0755c     00 6C 06 F6 | 	mov	local02, #0
07560     08 6A 06 F1 | 	add	local01, #8
07564     35 6F 0A FB | 	rdlong	local03, local01 wz
07568     08 6A 86 F1 | 	sub	local01, #8
0756c     1C 00 90 5D |  if_ne	jmp	#LR__0406
07570     01 00 00 FF 
07574     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07578     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0757c     01 00 00 FF 
07580     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07584     01 2A 66 F6 | 	neg	result1, #1
07588     90 00 90 FD | 	jmp	#LR__0409
0758c                 | LR__0406
0758c     28 6A 06 F1 | 	add	local01, #40
07590     35 6F 0A FB | 	rdlong	local03, local01 wz
07594     28 6A 86 F1 | 	sub	local01, #40
07598     2C 00 90 AD |  if_e	jmp	#LR__0407
0759c     28 6A 06 F1 | 	add	local01, #40
075a0     35 6F 02 FB | 	rdlong	local03, local01
075a4     28 6A 86 F1 | 	sub	local01, #40
075a8     37 71 02 FB | 	rdlong	local04, local03
075ac     04 6E 06 F1 | 	add	local03, #4
075b0     37 73 02 FB | 	rdlong	local05, local03
075b4     35 5D 02 F6 | 	mov	arg01, local01
075b8     07 75 02 F6 | 	mov	local06, objptr
075bc     38 0F 02 F6 | 	mov	objptr, local04
075c0     2D 72 62 FD | 	call	local05
075c4     3A 0F 02 F6 | 	mov	objptr, local06
075c8                 | LR__0407
075c8     20 6A 06 F1 | 	add	local01, #32
075cc     35 6F 0A FB | 	rdlong	local03, local01 wz
075d0     20 6A 86 F1 | 	sub	local01, #32
075d4     30 00 90 AD |  if_e	jmp	#LR__0408
075d8     20 6A 06 F1 | 	add	local01, #32
075dc     35 6F 02 FB | 	rdlong	local03, local01
075e0     20 6A 86 F1 | 	sub	local01, #32
075e4     37 71 02 FB | 	rdlong	local04, local03
075e8     04 6E 06 F1 | 	add	local03, #4
075ec     37 73 02 FB | 	rdlong	local05, local03
075f0     35 5D 02 F6 | 	mov	arg01, local01
075f4     07 75 02 F6 | 	mov	local06, objptr
075f8     38 0F 02 F6 | 	mov	objptr, local04
075fc     2D 72 62 FD | 	call	local05
07600     3A 0F 02 F6 | 	mov	objptr, local06
07604     15 6D 02 F6 | 	mov	local02, result1
07608                 | LR__0408
07608     35 5D 02 F6 | 	mov	arg01, local01
0760c     00 5E 06 F6 | 	mov	arg02, #0
07610     30 60 06 F6 | 	mov	arg03, #48
07614     A0 00 A0 FD | 	call	#\builtin_bytefill_
07618     36 2B 02 F6 | 	mov	result1, local02
0761c                 | LR__0409
0761c     AF F0 03 F6 | 	mov	ptra, fp
07620     BF 00 A0 FD | 	call	#popregs_
07624                 | __system___closeraw_ret
07624     2D 00 64 FD | 	ret
07628                 | 
07628                 | __system____default_getc
07628     0C 5A 05 F6 | 	mov	COUNT_, #12
0762c     B0 00 A0 FD | 	call	#pushregs_
07630     2E 6B 02 F6 | 	mov	local01, arg01
07634     35 6D 02 FB | 	rdlong	local02, local01
07638     08 6C 06 F1 | 	add	local02, #8
0763c     36 6F 02 FB | 	rdlong	local03, local02
07640     08 6C 86 F1 | 	sub	local02, #8
07644     02 6E CE F7 | 	test	local03, #2 wz
07648     08 00 90 AD |  if_e	jmp	#LR__0410
0764c     35 5D 02 F6 | 	mov	arg01, local01
07650     FC 01 B0 FD | 	call	#__system____default_flush
07654                 | LR__0410
07654     08 6C 06 F1 | 	add	local02, #8
07658     36 6F 02 FB | 	rdlong	local03, local02
0765c     01 6E 46 F5 | 	or	local03, #1
07660     36 6F 62 FC | 	wrlong	local03, local02
07664     08 6C 86 F1 | 	sub	local02, #8
07668     36 71 0A FB | 	rdlong	local04, local02 wz
0766c     7C 00 90 5D |  if_ne	jmp	#LR__0412
07670     35 5D 02 F6 | 	mov	arg01, local01
07674     2E 73 02 FB | 	rdlong	local05, arg01
07678     0C 72 06 F1 | 	add	local05, #12
0767c     39 5F 02 F6 | 	mov	arg02, local05
07680     0C 72 86 F1 | 	sub	local05, #12
07684     10 5C 06 F1 | 	add	arg01, #16
07688     2E 75 02 FB | 	rdlong	local06, arg01
0768c     10 5C 86 F1 | 	sub	arg01, #16
07690     3A 77 02 FB | 	rdlong	local07, local06
07694     04 74 06 F1 | 	add	local06, #4
07698     3A 79 02 FB | 	rdlong	local08, local06
0769c     0A 60 C6 F9 | 	decod	arg03, #10
076a0     07 7B 02 F6 | 	mov	local09, objptr
076a4     3B 0F 02 F6 | 	mov	objptr, local07
076a8     2D 78 62 FD | 	call	local08
076ac     3D 0F 02 F6 | 	mov	objptr, local09
076b0     15 7D 02 F6 | 	mov	local10, result1
076b4     00 7C 5E F2 | 	cmps	local10, #0 wcz
076b8     01 2A 66 C6 |  if_b	neg	result1, #1
076bc     28 00 90 CD |  if_b	jmp	#LR__0411
076c0     39 7D 62 FC | 	wrlong	local10, local05
076c4     0C 72 06 F1 | 	add	local05, #12
076c8     39 7F 02 F6 | 	mov	local11, local05
076cc     08 72 86 F1 | 	sub	local05, #8
076d0     39 7F 62 FC | 	wrlong	local11, local05
076d4     04 72 06 F1 | 	add	local05, #4
076d8     39 75 02 FB | 	rdlong	local06, local05
076dc     01 74 46 F5 | 	or	local06, #1
076e0     39 75 62 FC | 	wrlong	local06, local05
076e4     3E 2B 02 F6 | 	mov	result1, local10
076e8                 | LR__0411
076e8     15 71 02 F6 | 	mov	local04, result1
076ec                 | LR__0412
076ec     00 70 5E F2 | 	cmps	local04, #0 wcz
076f0     01 2A 66 E6 |  if_be	neg	result1, #1
076f4     1C 00 90 ED |  if_be	jmp	#LR__0413
076f8     01 70 86 F1 | 	sub	local04, #1
076fc     36 71 62 FC | 	wrlong	local04, local02
07700     04 6C 06 F1 | 	add	local02, #4
07704     36 81 02 FB | 	rdlong	local12, local02
07708     40 2B C2 FA | 	rdbyte	result1, local12
0770c     01 80 06 F1 | 	add	local12, #1
07710     36 81 62 FC | 	wrlong	local12, local02
07714                 | LR__0413
07714     AF F0 03 F6 | 	mov	ptra, fp
07718     BF 00 A0 FD | 	call	#popregs_
0771c                 | __system____default_getc_ret
0771c     2D 00 64 FD | 	ret
07720                 | 
07720                 | __system____default_putc
07720     06 5A 05 F6 | 	mov	COUNT_, #6
07724     B0 00 A0 FD | 	call	#pushregs_
07728     2E 6B 02 F6 | 	mov	local01, arg01
0772c     2F 6D 02 F6 | 	mov	local02, arg02
07730     36 6F 02 FB | 	rdlong	local03, local02
07734     08 6E 06 F1 | 	add	local03, #8
07738     37 71 02 FB | 	rdlong	local04, local03
0773c     08 6E 86 F1 | 	sub	local03, #8
07740     01 70 CE F7 | 	test	local04, #1 wz
07744     08 00 90 AD |  if_e	jmp	#LR__0414
07748     36 5D 02 F6 | 	mov	arg01, local02
0774c     00 01 B0 FD | 	call	#__system____default_flush
07750                 | LR__0414
07750     08 6E 06 F1 | 	add	local03, #8
07754     37 71 02 FB | 	rdlong	local04, local03
07758     02 70 46 F5 | 	or	local04, #2
0775c     37 71 62 FC | 	wrlong	local04, local03
07760     08 6E 86 F1 | 	sub	local03, #8
07764     37 73 02 FB | 	rdlong	local05, local03
07768     39 75 02 F6 | 	mov	local06, local05
0776c     0C 6E 06 F1 | 	add	local03, #12
07770     37 75 02 F1 | 	add	local06, local03
07774     3A 6B 42 FC | 	wrbyte	local01, local06
07778     FF 6A 06 F5 | 	and	local01, #255
0777c     01 72 06 F1 | 	add	local05, #1
07780     0C 6E 86 F1 | 	sub	local03, #12
07784     37 73 62 FC | 	wrlong	local05, local03
07788     02 00 00 FF 
0778c     00 72 0E F2 | 	cmp	local05, ##1024 wz
07790     10 00 90 5D |  if_ne	jmp	#LR__0415
07794     36 5D 02 F6 | 	mov	arg01, local02
07798     B4 00 B0 FD | 	call	#__system____default_flush
0779c     00 2A 0E F2 | 	cmp	result1, #0 wz
077a0     01 6A 66 56 |  if_ne	neg	local01, #1
077a4                 | LR__0415
077a4     35 2B 02 F6 | 	mov	result1, local01
077a8     AF F0 03 F6 | 	mov	ptra, fp
077ac     BF 00 A0 FD | 	call	#popregs_
077b0                 | __system____default_putc_ret
077b0     2D 00 64 FD | 	ret
077b4                 | 
077b4                 | __system____default_putc_terminal
077b4     06 5A 05 F6 | 	mov	COUNT_, #6
077b8     B0 00 A0 FD | 	call	#pushregs_
077bc     2E 6B 02 F6 | 	mov	local01, arg01
077c0     2F 6D 02 F6 | 	mov	local02, arg02
077c4     36 6F 02 FB | 	rdlong	local03, local02
077c8     08 6E 06 F1 | 	add	local03, #8
077cc     37 71 02 FB | 	rdlong	local04, local03
077d0     08 6E 86 F1 | 	sub	local03, #8
077d4     01 70 CE F7 | 	test	local04, #1 wz
077d8     08 00 90 AD |  if_e	jmp	#LR__0416
077dc     36 5D 02 F6 | 	mov	arg01, local02
077e0     6C 00 B0 FD | 	call	#__system____default_flush
077e4                 | LR__0416
077e4     08 6E 06 F1 | 	add	local03, #8
077e8     37 71 02 FB | 	rdlong	local04, local03
077ec     02 70 46 F5 | 	or	local04, #2
077f0     37 71 62 FC | 	wrlong	local04, local03
077f4     08 6E 86 F1 | 	sub	local03, #8
077f8     37 73 02 FB | 	rdlong	local05, local03
077fc     39 75 02 F6 | 	mov	local06, local05
07800     0C 6E 06 F1 | 	add	local03, #12
07804     37 75 02 F1 | 	add	local06, local03
07808     3A 6B 42 FC | 	wrbyte	local01, local06
0780c     FF 6A 06 F5 | 	and	local01, #255
07810     0C 6E 86 F1 | 	sub	local03, #12
07814     01 72 06 F1 | 	add	local05, #1
07818     37 73 62 FC | 	wrlong	local05, local03
0781c     0A 6A 0E F2 | 	cmp	local01, #10 wz
07820     0C 00 90 AD |  if_e	jmp	#LR__0417
07824     02 00 00 FF 
07828     00 72 0E F2 | 	cmp	local05, ##1024 wz
0782c     10 00 90 5D |  if_ne	jmp	#LR__0418
07830                 | LR__0417
07830     36 5D 02 F6 | 	mov	arg01, local02
07834     18 00 B0 FD | 	call	#__system____default_flush
07838     00 2A 0E F2 | 	cmp	result1, #0 wz
0783c     01 6A 66 56 |  if_ne	neg	local01, #1
07840                 | LR__0418
07840     35 2B 02 F6 | 	mov	result1, local01
07844     AF F0 03 F6 | 	mov	ptra, fp
07848     BF 00 A0 FD | 	call	#popregs_
0784c                 | __system____default_putc_terminal_ret
0784c     2D 00 64 FD | 	ret
07850                 | 
07850                 | __system____default_flush
07850     0F 5A 05 F6 | 	mov	COUNT_, #15
07854     B0 00 A0 FD | 	call	#pushregs_
07858     2E 6B 02 F6 | 	mov	local01, arg01
0785c     35 6D 02 FB | 	rdlong	local02, local01
07860     36 6F 02 FB | 	rdlong	local03, local02
07864     08 6C 06 F1 | 	add	local02, #8
07868     36 71 02 FB | 	rdlong	local04, local02
0786c     08 6C 86 F1 | 	sub	local02, #8
07870     02 70 CE F7 | 	test	local04, #2 wz
07874     B8 00 90 AD |  if_e	jmp	#LR__0421
07878     00 6E 5E F2 | 	cmps	local03, #0 wcz
0787c     30 01 90 ED |  if_be	jmp	#LR__0423
07880     08 6A 06 F1 | 	add	local01, #8
07884     35 71 02 FB | 	rdlong	local04, local01
07888     08 6A 86 F1 | 	sub	local01, #8
0788c     40 70 CE F7 | 	test	local04, #64 wz
07890     5C 00 90 AD |  if_e	jmp	#LR__0420
07894     08 6A 06 F1 | 	add	local01, #8
07898     35 71 02 FB | 	rdlong	local04, local01
0789c     08 6A 86 F1 | 	sub	local01, #8
078a0     80 70 CE F7 | 	test	local04, #128 wz
078a4     48 00 90 AD |  if_e	jmp	#LR__0419
078a8     2C 6A 06 F1 | 	add	local01, #44
078ac     35 71 02 FB | 	rdlong	local04, local01
078b0     2C 6A 86 F1 | 	sub	local01, #44
078b4     38 73 02 FB | 	rdlong	local05, local04
078b8     04 70 06 F1 | 	add	local04, #4
078bc     38 75 02 FB | 	rdlong	local06, local04
078c0     35 5D 02 F6 | 	mov	arg01, local01
078c4     00 5E 06 F6 | 	mov	arg02, #0
078c8     02 60 06 F6 | 	mov	arg03, #2
078cc     07 77 02 F6 | 	mov	local07, objptr
078d0     39 0F 02 F6 | 	mov	objptr, local05
078d4     2D 74 62 FD | 	call	local06
078d8     3B 0F 02 F6 | 	mov	objptr, local07
078dc     08 6A 06 F1 | 	add	local01, #8
078e0     35 71 02 FB | 	rdlong	local04, local01
078e4     80 70 26 F5 | 	andn	local04, #128
078e8     35 71 62 FC | 	wrlong	local04, local01
078ec     08 6A 86 F1 | 	sub	local01, #8
078f0                 | LR__0419
078f0                 | LR__0420
078f0     0C 6C 06 F1 | 	add	local02, #12
078f4     36 5F 02 F6 | 	mov	arg02, local02
078f8     0C 6C 86 F1 | 	sub	local02, #12
078fc     14 6A 06 F1 | 	add	local01, #20
07900     35 71 02 FB | 	rdlong	local04, local01
07904     14 6A 86 F1 | 	sub	local01, #20
07908     38 73 02 FB | 	rdlong	local05, local04
0790c     04 70 06 F1 | 	add	local04, #4
07910     38 75 02 FB | 	rdlong	local06, local04
07914     35 5D 02 F6 | 	mov	arg01, local01
07918     37 61 02 F6 | 	mov	arg03, local03
0791c     07 77 02 F6 | 	mov	local07, objptr
07920     39 0F 02 F6 | 	mov	objptr, local05
07924     2D 74 62 FD | 	call	local06
07928     3B 0F 02 F6 | 	mov	objptr, local07
0792c     80 00 90 FD | 	jmp	#LR__0423
07930                 | LR__0421
07930     08 6C 06 F1 | 	add	local02, #8
07934     36 71 02 FB | 	rdlong	local04, local02
07938     08 6C 86 F1 | 	sub	local02, #8
0793c     01 70 CE F7 | 	test	local04, #1 wz
07940     6C 00 90 AD |  if_e	jmp	#LR__0422
07944     00 6E 0E F2 | 	cmp	local03, #0 wz
07948     64 00 90 AD |  if_e	jmp	#LR__0422
0794c     2C 6A 06 F1 | 	add	local01, #44
07950     35 79 02 FB | 	rdlong	local08, local01
07954     2C 6A 86 F1 | 	sub	local01, #44
07958     3C 71 02 F6 | 	mov	local04, local08
0795c     38 73 02 FB | 	rdlong	local05, local04
07960     04 70 06 F1 | 	add	local04, #4
07964     38 7B 02 FB | 	rdlong	local09, local04
07968     04 70 86 F1 | 	sub	local04, #4
0796c     3D 75 02 F6 | 	mov	local06, local09
07970     35 7D 02 F6 | 	mov	local10, local01
07974     37 7F 02 F6 | 	mov	local11, local03
07978     3F 7F 62 F6 | 	neg	local11, local11
0797c     3F 81 02 F6 | 	mov	local12, local11
07980     01 76 06 F6 | 	mov	local07, #1
07984     3E 5D 02 F6 | 	mov	arg01, local10
07988     40 5F 02 F6 | 	mov	arg02, local12
0798c     01 60 06 F6 | 	mov	arg03, #1
07990     07 83 02 F6 | 	mov	local13, objptr
07994     39 0F 02 F6 | 	mov	objptr, local05
07998     2D 74 62 FD | 	call	local06
0799c     41 0F 02 F6 | 	mov	objptr, local13
079a0     15 85 02 F6 | 	mov	local14, result1
079a4     42 87 02 F6 | 	mov	local15, local14
079a8     00 86 5E F2 | 	cmps	local15, #0 wcz
079ac     37 87 02 36 |  if_ae	mov	local15, local03
079b0                 | LR__0422
079b0                 | LR__0423
079b0     36 01 68 FC | 	wrlong	#0, local02
079b4     04 6C 06 F1 | 	add	local02, #4
079b8     36 01 68 FC | 	wrlong	#0, local02
079bc     04 6C 06 F1 | 	add	local02, #4
079c0     36 01 68 FC | 	wrlong	#0, local02
079c4     00 2A 06 F6 | 	mov	result1, #0
079c8     AF F0 03 F6 | 	mov	ptra, fp
079cc     BF 00 A0 FD | 	call	#popregs_
079d0                 | __system____default_flush_ret
079d0     2D 00 64 FD | 	ret
079d4                 | 
079d4                 | __system___rxtxioctl_0174
079d4     02 5A 05 F6 | 	mov	COUNT_, #2
079d8     B0 00 A0 FD | 	call	#pushregs_
079dc     2F 6B 02 F6 | 	mov	local01, arg02
079e0     30 6D 02 F6 | 	mov	local02, arg03
079e4     00 6B 0E F2 | 	cmp	local01, #256 wz
079e8     0C 00 90 AD |  if_e	jmp	#LR__0424
079ec     01 6B 0E F2 | 	cmp	local01, #257 wz
079f0     1C 00 90 AD |  if_e	jmp	#LR__0425
079f4     30 00 90 FD | 	jmp	#LR__0426
079f8                 | LR__0424
079f8     08 14 06 F1 | 	add	ptr___system__dat__, #8
079fc     0A 2B 02 FB | 	rdlong	result1, ptr___system__dat__
07a00     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07a04     36 2B 62 FC | 	wrlong	result1, local02
07a08     00 2A 06 F6 | 	mov	result1, #0
07a0c     30 00 90 FD | 	jmp	#LR__0427
07a10                 | LR__0425
07a10     36 5D 02 FB | 	rdlong	arg01, local02
07a14     08 14 06 F1 | 	add	ptr___system__dat__, #8
07a18     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07a1c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07a20     00 2A 06 F6 | 	mov	result1, #0
07a24     18 00 90 FD | 	jmp	#LR__0427
07a28                 | LR__0426
07a28     01 00 00 FF 
07a2c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07a30     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
07a34     01 00 00 FF 
07a38     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07a3c     01 2A 66 F6 | 	neg	result1, #1
07a40                 | LR__0427
07a40     AF F0 03 F6 | 	mov	ptra, fp
07a44     BF 00 A0 FD | 	call	#popregs_
07a48                 | __system___rxtxioctl_0174_ret
07a48     2D 00 64 FD | 	ret
07a4c                 | 
07a4c                 | __system____dummy_flush_0175
07a4c     00 2A 06 F6 | 	mov	result1, #0
07a50                 | __system____dummy_flush_0175_ret
07a50     2D 00 64 FD | 	ret
07a54                 | 
07a54                 | __system___vfswrite
07a54     0B 5A 05 F6 | 	mov	COUNT_, #11
07a58     B0 00 A0 FD | 	call	#pushregs_
07a5c     2E 6B 02 F6 | 	mov	local01, arg01
07a60     2F 6D 02 F6 | 	mov	local02, arg02
07a64     30 6F 02 F6 | 	mov	local03, arg03
07a68     36 71 02 F6 | 	mov	local04, local02
07a6c     08 6A 06 F1 | 	add	local01, #8
07a70     35 73 02 FB | 	rdlong	local05, local01
07a74     08 6A 86 F1 | 	sub	local01, #8
07a78     02 72 CE F7 | 	test	local05, #2 wz
07a7c     1C 00 90 5D |  if_ne	jmp	#LR__0428
07a80     01 00 00 FF 
07a84     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07a88     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07a8c     01 00 00 FF 
07a90     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07a94     01 2A 66 F6 | 	neg	result1, #1
07a98     70 01 90 FD | 	jmp	#LR__0436
07a9c                 | LR__0428
07a9c     08 6A 06 F1 | 	add	local01, #8
07aa0     35 73 02 FB | 	rdlong	local05, local01
07aa4     08 6A 86 F1 | 	sub	local01, #8
07aa8     40 72 CE F7 | 	test	local05, #64 wz
07aac     5C 00 90 AD |  if_e	jmp	#LR__0430
07ab0     08 6A 06 F1 | 	add	local01, #8
07ab4     35 73 02 FB | 	rdlong	local05, local01
07ab8     08 6A 86 F1 | 	sub	local01, #8
07abc     80 72 CE F7 | 	test	local05, #128 wz
07ac0     48 00 90 AD |  if_e	jmp	#LR__0429
07ac4     2C 6A 06 F1 | 	add	local01, #44
07ac8     35 73 02 FB | 	rdlong	local05, local01
07acc     2C 6A 86 F1 | 	sub	local01, #44
07ad0     39 75 02 FB | 	rdlong	local06, local05
07ad4     04 72 06 F1 | 	add	local05, #4
07ad8     39 77 02 FB | 	rdlong	local07, local05
07adc     35 5D 02 F6 | 	mov	arg01, local01
07ae0     00 5E 06 F6 | 	mov	arg02, #0
07ae4     02 60 06 F6 | 	mov	arg03, #2
07ae8     07 79 02 F6 | 	mov	local08, objptr
07aec     3A 0F 02 F6 | 	mov	objptr, local06
07af0     2D 76 62 FD | 	call	local07
07af4     3C 0F 02 F6 | 	mov	objptr, local08
07af8     08 6A 06 F1 | 	add	local01, #8
07afc     35 73 02 FB | 	rdlong	local05, local01
07b00     80 72 26 F5 | 	andn	local05, #128
07b04     35 73 62 FC | 	wrlong	local05, local01
07b08     08 6A 86 F1 | 	sub	local01, #8
07b0c                 | LR__0429
07b0c                 | LR__0430
07b0c     14 6A 06 F1 | 	add	local01, #20
07b10     35 73 0A FB | 	rdlong	local05, local01 wz
07b14     14 6A 86 F1 | 	sub	local01, #20
07b18     7C 00 90 AD |  if_e	jmp	#LR__0432
07b1c     14 6A 06 F1 | 	add	local01, #20
07b20     35 73 02 FB | 	rdlong	local05, local01
07b24     14 6A 86 F1 | 	sub	local01, #20
07b28     39 75 02 FB | 	rdlong	local06, local05
07b2c     04 72 06 F1 | 	add	local05, #4
07b30     39 77 02 FB | 	rdlong	local07, local05
07b34     36 5F 02 F6 | 	mov	arg02, local02
07b38     37 61 02 F6 | 	mov	arg03, local03
07b3c     35 5D 02 F6 | 	mov	arg01, local01
07b40     07 79 02 F6 | 	mov	local08, objptr
07b44     3A 0F 02 F6 | 	mov	objptr, local06
07b48     2D 76 62 FD | 	call	local07
07b4c     3C 0F 02 F6 | 	mov	objptr, local08
07b50     15 7B 02 F6 | 	mov	local09, result1
07b54     00 7A 5E F2 | 	cmps	local09, #0 wcz
07b58     34 00 90 3D |  if_ae	jmp	#LR__0431
07b5c     08 6A 06 F1 | 	add	local01, #8
07b60     35 73 02 FB | 	rdlong	local05, local01
07b64     20 72 46 F5 | 	or	local05, #32
07b68     35 73 62 FC | 	wrlong	local05, local01
07b6c     01 00 00 FF 
07b70     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07b74     0A 7B 62 FC | 	wrlong	local09, ptr___system__dat__
07b78     01 00 00 FF 
07b7c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07b80     00 7A 0E F2 | 	cmp	local09, #0 wz
07b84     01 2A 66 56 |  if_ne	neg	result1, #1
07b88     00 2A 06 A6 |  if_e	mov	result1, #0
07b8c     7C 00 90 FD | 	jmp	#LR__0436
07b90                 | LR__0431
07b90     3D 2B 02 F6 | 	mov	result1, local09
07b94     74 00 90 FD | 	jmp	#LR__0436
07b98                 | LR__0432
07b98     18 6A 06 F1 | 	add	local01, #24
07b9c     35 7D 0A FB | 	rdlong	local10, local01 wz
07ba0     18 6A 86 F1 | 	sub	local01, #24
07ba4     1C 00 90 5D |  if_ne	jmp	#LR__0433
07ba8     01 00 00 FF 
07bac     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07bb0     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07bb4     01 00 00 FF 
07bb8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07bbc     01 2A 66 F6 | 	neg	result1, #1
07bc0     48 00 90 FD | 	jmp	#LR__0436
07bc4                 | LR__0433
07bc4     00 7A 06 F6 | 	mov	local09, #0
07bc8                 | LR__0434
07bc8     00 6E 1E F2 | 	cmp	local03, #0 wcz
07bcc     38 00 90 ED |  if_be	jmp	#LR__0435
07bd0     3E 73 02 F6 | 	mov	local05, local10
07bd4     39 75 02 FB | 	rdlong	local06, local05
07bd8     04 72 06 F1 | 	add	local05, #4
07bdc     39 77 02 FB | 	rdlong	local07, local05
07be0     38 5D C2 FA | 	rdbyte	arg01, local04
07be4     35 5F 02 F6 | 	mov	arg02, local01
07be8     07 7F 02 F6 | 	mov	local11, objptr
07bec     3A 0F 02 F6 | 	mov	objptr, local06
07bf0     01 70 06 F1 | 	add	local04, #1
07bf4     2D 76 62 FD | 	call	local07
07bf8     3F 0F 02 F6 | 	mov	objptr, local11
07bfc     15 7B 02 F1 | 	add	local09, result1
07c00     01 6E 86 F1 | 	sub	local03, #1
07c04     C0 FF 9F FD | 	jmp	#LR__0434
07c08                 | LR__0435
07c08     3D 2B 02 F6 | 	mov	result1, local09
07c0c                 | LR__0436
07c0c     AF F0 03 F6 | 	mov	ptra, fp
07c10     BF 00 A0 FD | 	call	#popregs_
07c14                 | __system___vfswrite_ret
07c14     2D 00 64 FD | 	ret
07c18                 | 
07c18                 | __system___vfsread
07c18     0F 5A 05 F6 | 	mov	COUNT_, #15
07c1c     B0 00 A0 FD | 	call	#pushregs_
07c20     2C F0 07 F1 | 	add	ptra, #44
07c24     04 5E 05 F1 | 	add	fp, #4
07c28     AF 5C 62 FC | 	wrlong	arg01, fp
07c2c     04 5E 05 F1 | 	add	fp, #4
07c30     AF 5E 62 FC | 	wrlong	arg02, fp
07c34     04 5E 05 F1 | 	add	fp, #4
07c38     AF 60 62 FC | 	wrlong	arg03, fp
07c3c     04 5E 85 F1 | 	sub	fp, #4
07c40     AF 6A 02 FB | 	rdlong	local01, fp
07c44     14 5E 05 F1 | 	add	fp, #20
07c48     AF 6A 62 FC | 	wrlong	local01, fp
07c4c     04 5E 05 F1 | 	add	fp, #4
07c50     AF 00 68 FC | 	wrlong	#0, fp
07c54     1C 5E 85 F1 | 	sub	fp, #28
07c58     AF 6C 02 FB | 	rdlong	local02, fp
07c5c     04 5E 85 F1 | 	sub	fp, #4
07c60     08 6C 06 F1 | 	add	local02, #8
07c64     36 6B 02 FB | 	rdlong	local01, local02
07c68     01 6A CE F7 | 	test	local01, #1 wz
07c6c     1C 00 90 5D |  if_ne	jmp	#LR__0437
07c70     01 00 00 FF 
07c74     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07c78     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07c7c     01 00 00 FF 
07c80     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07c84     01 2A 66 F6 | 	neg	result1, #1
07c88     9C 02 90 FD | 	jmp	#LR__0445
07c8c                 | LR__0437
07c8c     04 5E 05 F1 | 	add	fp, #4
07c90     AF 6A 02 FB | 	rdlong	local01, fp
07c94     04 5E 85 F1 | 	sub	fp, #4
07c98     10 6A 06 F1 | 	add	local01, #16
07c9c     35 6F 0A FB | 	rdlong	local03, local01 wz
07ca0     B4 00 90 AD |  if_e	jmp	#LR__0439
07ca4     04 5E 05 F1 | 	add	fp, #4
07ca8     AF 70 02 FB | 	rdlong	local04, fp
07cac     10 70 06 F1 | 	add	local04, #16
07cb0     38 6B 02 FB | 	rdlong	local01, local04
07cb4     35 6D 02 FB | 	rdlong	local02, local01
07cb8     04 6A 06 F1 | 	add	local01, #4
07cbc     35 6F 02 FB | 	rdlong	local03, local01
07cc0     AF 5C 02 FB | 	rdlong	arg01, fp
07cc4     04 5E 05 F1 | 	add	fp, #4
07cc8     AF 5E 02 FB | 	rdlong	arg02, fp
07ccc     04 5E 05 F1 | 	add	fp, #4
07cd0     AF 60 02 FB | 	rdlong	arg03, fp
07cd4     0C 5E 85 F1 | 	sub	fp, #12
07cd8     07 73 02 F6 | 	mov	local05, objptr
07cdc     36 0F 02 F6 | 	mov	objptr, local02
07ce0     2D 6E 62 FD | 	call	local03
07ce4     39 0F 02 F6 | 	mov	objptr, local05
07ce8     10 5E 05 F1 | 	add	fp, #16
07cec     AF 2A 62 FC | 	wrlong	result1, fp
07cf0     10 5E 85 F1 | 	sub	fp, #16
07cf4     00 2A 5E F2 | 	cmps	result1, #0 wcz
07cf8     4C 00 90 3D |  if_ae	jmp	#LR__0438
07cfc     04 5E 05 F1 | 	add	fp, #4
07d00     AF 6A 02 FB | 	rdlong	local01, fp
07d04     35 71 02 F6 | 	mov	local04, local01
07d08     08 70 06 F1 | 	add	local04, #8
07d0c     38 6F 02 FB | 	rdlong	local03, local04
07d10     20 6E 46 F5 | 	or	local03, #32
07d14     08 6A 06 F1 | 	add	local01, #8
07d18     35 6F 62 FC | 	wrlong	local03, local01
07d1c     0C 5E 05 F1 | 	add	fp, #12
07d20     AF 5C 0A FB | 	rdlong	arg01, fp wz
07d24     10 5E 85 F1 | 	sub	fp, #16
07d28     01 00 00 FF 
07d2c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07d30     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07d34     01 00 00 FF 
07d38     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07d3c     01 2A 66 56 |  if_ne	neg	result1, #1
07d40     00 2A 06 A6 |  if_e	mov	result1, #0
07d44     E0 01 90 FD | 	jmp	#LR__0445
07d48                 | LR__0438
07d48     10 5E 05 F1 | 	add	fp, #16
07d4c     AF 2A 02 FB | 	rdlong	result1, fp
07d50     10 5E 85 F1 | 	sub	fp, #16
07d54     D0 01 90 FD | 	jmp	#LR__0445
07d58                 | LR__0439
07d58     04 5E 05 F1 | 	add	fp, #4
07d5c     AF 6A 02 FB | 	rdlong	local01, fp
07d60     1C 6A 06 F1 | 	add	local01, #28
07d64     35 6F 02 FB | 	rdlong	local03, local01
07d68     14 5E 05 F1 | 	add	fp, #20
07d6c     AF 6E 62 FC | 	wrlong	local03, fp
07d70     AF 6A 0A FB | 	rdlong	local01, fp wz
07d74     18 5E 85 F1 | 	sub	fp, #24
07d78     1C 00 90 5D |  if_ne	jmp	#LR__0440
07d7c     01 00 00 FF 
07d80     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07d84     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07d88     01 00 00 FF 
07d8c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07d90     01 2A 66 F6 | 	neg	result1, #1
07d94     90 01 90 FD | 	jmp	#LR__0445
07d98                 | LR__0440
07d98     04 5E 05 F1 | 	add	fp, #4
07d9c     AF 6A 02 FB | 	rdlong	local01, fp
07da0     04 5E 85 F1 | 	sub	fp, #4
07da4     24 6A 06 F1 | 	add	local01, #36
07da8     35 6F 0A FB | 	rdlong	local03, local01 wz
07dac     A0 00 90 AD |  if_e	jmp	#LR__0442
07db0     24 5E 05 F1 | 	add	fp, #36
07db4     AF 74 02 F6 | 	mov	local06, fp
07db8     20 5E 85 F1 | 	sub	fp, #32
07dbc     AF 76 02 FB | 	rdlong	local07, fp
07dc0     3B 71 02 F6 | 	mov	local04, local07
07dc4     24 70 06 F1 | 	add	local04, #36
07dc8     38 79 02 FB | 	rdlong	local08, local04
07dcc     3C 6B 02 F6 | 	mov	local01, local08
07dd0     35 6D 02 FB | 	rdlong	local02, local01
07dd4     04 6A 06 F1 | 	add	local01, #4
07dd8     35 7B 02 FB | 	rdlong	local09, local01
07ddc     3D 6F 02 F6 | 	mov	local03, local09
07de0     3B 7D 02 F6 | 	mov	local10, local07
07de4     04 5E 85 F1 | 	sub	fp, #4
07de8     3E 7F 02 F6 | 	mov	local11, local10
07dec     00 81 06 F6 | 	mov	local12, #256
07df0     3A 83 02 F6 | 	mov	local13, local06
07df4     3F 5D 02 F6 | 	mov	arg01, local11
07df8     00 5F 06 F6 | 	mov	arg02, #256
07dfc     41 61 02 F6 | 	mov	arg03, local13
07e00     07 85 02 F6 | 	mov	local14, objptr
07e04     36 0F 02 F6 | 	mov	objptr, local02
07e08     2D 6E 62 FD | 	call	local03
07e0c     42 0F 02 F6 | 	mov	objptr, local14
07e10     15 87 02 F6 | 	mov	local15, result1
07e14     10 5E 05 F1 | 	add	fp, #16
07e18     AF 86 62 FC | 	wrlong	local15, fp
07e1c     AF 6C 0A FB | 	rdlong	local02, fp wz
07e20     10 5E 85 F1 | 	sub	fp, #16
07e24     28 00 90 5D |  if_ne	jmp	#LR__0441
07e28     24 5E 05 F1 | 	add	fp, #36
07e2c     AF 70 02 FB | 	rdlong	local04, fp
07e30     24 5E 85 F1 | 	sub	fp, #36
07e34     38 6F 02 F6 | 	mov	local03, local04
07e38     02 6E 0E F5 | 	and	local03, #2 wz
07e3c     10 00 90 AD |  if_e	jmp	#LR__0441
07e40     01 6A 06 F6 | 	mov	local01, #1
07e44     20 5E 05 F1 | 	add	fp, #32
07e48     AF 02 68 FC | 	wrlong	#1, fp
07e4c     20 5E 85 F1 | 	sub	fp, #32
07e50                 | LR__0441
07e50                 | LR__0442
07e50     10 5E 05 F1 | 	add	fp, #16
07e54     AF 00 68 FC | 	wrlong	#0, fp
07e58     10 5E 85 F1 | 	sub	fp, #16
07e5c                 | LR__0443
07e5c     0C 5E 05 F1 | 	add	fp, #12
07e60     AF 6A 02 FB | 	rdlong	local01, fp
07e64     0C 5E 85 F1 | 	sub	fp, #12
07e68     00 6A 1E F2 | 	cmp	local01, #0 wcz
07e6c     AC 00 90 ED |  if_be	jmp	#LR__0444
07e70     18 5E 05 F1 | 	add	fp, #24
07e74     AF 6A 02 FB | 	rdlong	local01, fp
07e78     35 6D 02 FB | 	rdlong	local02, local01
07e7c     04 6A 06 F1 | 	add	local01, #4
07e80     35 6F 02 FB | 	rdlong	local03, local01
07e84     14 5E 85 F1 | 	sub	fp, #20
07e88     AF 5C 02 FB | 	rdlong	arg01, fp
07e8c     04 5E 85 F1 | 	sub	fp, #4
07e90     07 7F 02 F6 | 	mov	local11, objptr
07e94     36 0F 02 F6 | 	mov	objptr, local02
07e98     2D 6E 62 FD | 	call	local03
07e9c     3F 0F 02 F6 | 	mov	objptr, local11
07ea0     15 7D 02 F6 | 	mov	local10, result1
07ea4     14 5E 05 F1 | 	add	fp, #20
07ea8     AF 7C 62 FC | 	wrlong	local10, fp
07eac     14 5E 85 F1 | 	sub	fp, #20
07eb0     00 7C 5E F2 | 	cmps	local10, #0 wcz
07eb4     64 00 90 CD |  if_b	jmp	#LR__0444
07eb8     1C 5E 05 F1 | 	add	fp, #28
07ebc     AF 6A 02 FB | 	rdlong	local01, fp
07ec0     35 6F 02 F6 | 	mov	local03, local01
07ec4     01 6E 06 F1 | 	add	local03, #1
07ec8     AF 6E 62 FC | 	wrlong	local03, fp
07ecc     08 5E 85 F1 | 	sub	fp, #8
07ed0     AF 76 02 FB | 	rdlong	local07, fp
07ed4     35 77 42 FC | 	wrbyte	local07, local01
07ed8     04 5E 85 F1 | 	sub	fp, #4
07edc     AF 6A 02 FB | 	rdlong	local01, fp
07ee0     01 6A 06 F1 | 	add	local01, #1
07ee4     AF 6A 62 FC | 	wrlong	local01, fp
07ee8     04 5E 85 F1 | 	sub	fp, #4
07eec     AF 6A 02 FB | 	rdlong	local01, fp
07ef0     01 6A 86 F1 | 	sub	local01, #1
07ef4     AF 6A 62 FC | 	wrlong	local01, fp
07ef8     14 5E 05 F1 | 	add	fp, #20
07efc     AF 6A 0A FB | 	rdlong	local01, fp wz
07f00     20 5E 85 F1 | 	sub	fp, #32
07f04     54 FF 9F AD |  if_e	jmp	#LR__0443
07f08     14 5E 05 F1 | 	add	fp, #20
07f0c     AF 6E 02 FB | 	rdlong	local03, fp
07f10     14 5E 85 F1 | 	sub	fp, #20
07f14     0A 6E 0E F2 | 	cmp	local03, #10 wz
07f18     40 FF 9F 5D |  if_ne	jmp	#LR__0443
07f1c                 | LR__0444
07f1c     10 5E 05 F1 | 	add	fp, #16
07f20     AF 2A 02 FB | 	rdlong	result1, fp
07f24     10 5E 85 F1 | 	sub	fp, #16
07f28                 | LR__0445
07f28     AF F0 03 F6 | 	mov	ptra, fp
07f2c     BF 00 A0 FD | 	call	#popregs_
07f30                 | __system___vfsread_ret
07f30     2D 00 64 FD | 	ret
07f34                 | 
07f34                 | ' 	
07f34                 | ' 	FUNCTION pfunc(c as integer) as integer
07f34                 | ___strs_cl_pfunc
07f34                 | ' 		if (i < 16) then
07f34     04 0E 06 F1 | 	add	objptr, #4
07f38     07 31 02 FB | 	rdlong	_var01, objptr
07f3c     04 0E 86 F1 | 	sub	objptr, #4
07f40     10 30 5E F2 | 	cmps	_var01, #16 wcz
07f44     2C 00 90 3D |  if_ae	jmp	#LR__0446
07f48     07 33 02 FB | 	rdlong	_var02, objptr
07f4c     04 0E 06 F1 | 	add	objptr, #4
07f50     07 35 02 FB | 	rdlong	_var03, objptr
07f54     19 35 02 F1 | 	add	_var03, _var02
07f58     1A 5D 42 FC | 	wrbyte	arg01, _var03
07f5c     07 31 02 FB | 	rdlong	_var01, objptr
07f60     01 30 06 F1 | 	add	_var01, #1
07f64     07 31 62 FC | 	wrlong	_var01, objptr
07f68     04 0E 86 F1 | 	sub	objptr, #4
07f6c                 | ' 			p(i) = c
07f6c                 | ' 			i = i+1
07f6c                 | ' 			return 1
07f6c     01 2A 06 F6 | 	mov	result1, #1
07f70     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
07f74                 | LR__0446
07f74                 | ' 			return -1
07f74     01 2A 66 F6 | 	neg	result1, #1
07f78                 | ___strs_cl_pfunc_ret
07f78     2D 00 64 FD | 	ret
07f7c                 | 
07f7c                 | __struct__s_vfs_file_t_putchar
07f7c     04 5A 05 F6 | 	mov	COUNT_, #4
07f80     B0 00 A0 FD | 	call	#pushregs_
07f84     18 0E 06 F1 | 	add	objptr, #24
07f88     07 6B 0A FB | 	rdlong	local01, objptr wz
07f8c     18 0E 86 F1 | 	sub	objptr, #24
07f90     00 2A 06 A6 |  if_e	mov	result1, #0
07f94     3C 00 90 AD |  if_e	jmp	#LR__0447
07f98     18 0E 06 F1 | 	add	objptr, #24
07f9c     07 6B 02 FB | 	rdlong	local01, objptr
07fa0     18 0E 86 F1 | 	sub	objptr, #24
07fa4     35 6D 02 FB | 	rdlong	local02, local01
07fa8     04 6A 06 F1 | 	add	local01, #4
07fac     35 6F 02 FB | 	rdlong	local03, local01
07fb0     07 5F 02 F6 | 	mov	arg02, objptr
07fb4     07 71 02 F6 | 	mov	local04, objptr
07fb8     36 0F 02 F6 | 	mov	objptr, local02
07fbc     2D 6E 62 FD | 	call	local03
07fc0     38 0F 02 F6 | 	mov	objptr, local04
07fc4     00 2A 5E F2 | 	cmps	result1, #0 wcz
07fc8     00 6A 06 C6 |  if_b	mov	local01, #0
07fcc     01 6A 06 36 |  if_ae	mov	local01, #1
07fd0     35 2B 02 F6 | 	mov	result1, local01
07fd4                 | LR__0447
07fd4     AF F0 03 F6 | 	mov	ptra, fp
07fd8     BF 00 A0 FD | 	call	#popregs_
07fdc                 | __struct__s_vfs_file_t_putchar_ret
07fdc     2D 00 64 FD | 	ret
07fe0                 | 
07fe0                 | __struct__s_vfs_file_t_getchar
07fe0     04 5A 05 F6 | 	mov	COUNT_, #4
07fe4     B0 00 A0 FD | 	call	#pushregs_
07fe8     1C 0E 06 F1 | 	add	objptr, #28
07fec     07 6B 0A FB | 	rdlong	local01, objptr wz
07ff0     1C 0E 86 F1 | 	sub	objptr, #28
07ff4     01 2A 66 A6 |  if_e	neg	result1, #1
07ff8     2C 00 90 AD |  if_e	jmp	#LR__0448
07ffc                 | '         return getcf(__this);
07ffc     1C 0E 06 F1 | 	add	objptr, #28
08000     07 6B 02 FB | 	rdlong	local01, objptr
08004     1C 0E 86 F1 | 	sub	objptr, #28
08008     35 6D 02 FB | 	rdlong	local02, local01
0800c     04 6A 06 F1 | 	add	local01, #4
08010     35 6F 02 FB | 	rdlong	local03, local01
08014     07 5D 02 F6 | 	mov	arg01, objptr
08018     07 71 02 F6 | 	mov	local04, objptr
0801c     36 0F 02 F6 | 	mov	objptr, local02
08020     2D 6E 62 FD | 	call	local03
08024     38 0F 02 F6 | 	mov	objptr, local04
08028                 | LR__0448
08028     AF F0 03 F6 | 	mov	ptra, fp
0802c     BF 00 A0 FD | 	call	#popregs_
08030                 | __struct__s_vfs_file_t_getchar_ret
08030     2D 00 64 FD | 	ret
08034                 | 
08034                 | __struct___bas_wrap_sender_tx
08034     04 5A 05 F6 | 	mov	COUNT_, #4
08038     B0 00 A0 FD | 	call	#pushregs_
0803c     07 6B 02 FB | 	rdlong	local01, objptr
08040     35 6D 02 FB | 	rdlong	local02, local01
08044     04 6A 06 F1 | 	add	local01, #4
08048     35 6F 02 FB | 	rdlong	local03, local01
0804c     07 71 02 F6 | 	mov	local04, objptr
08050     36 0F 02 F6 | 	mov	objptr, local02
08054     2D 6E 62 FD | 	call	local03
08058     38 0F 02 F6 | 	mov	objptr, local04
0805c     01 2A 06 F6 | 	mov	result1, #1
08060     AF F0 03 F6 | 	mov	ptra, fp
08064     BF 00 A0 FD | 	call	#popregs_
08068                 | __struct___bas_wrap_sender_tx_ret
08068     2D 00 64 FD | 	ret
0806c                 | 
0806c                 | LR__0449
0806c     20          | 	byte	" "
0806d     00          | 	byte	0
0806e                 | LR__0450
0806e                 | 	byte	
0806e     00          | 	byte	0
0806f                 | LR__0451
0806f                 | 	byte	
0806f     00          | 	byte	0
08070                 | LR__0452
08070     20 21 21 21 
08074     20 63 6F 72 
08078     72 75 70 74 
0807c     65 64 20 68 
08080     65 61 70 3F 
08084     3F 3F 20 21 
08088     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
0808b     00          | 	byte	0
0808c                 | LR__0453
0808c     20 21 21 21 
08090     20 6F 75 74 
08094     20 6F 66 20 
08098     68 65 61 70 
0809c     20 6D 65 6D 
080a0     6F 72 79 20 
080a4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
080a8     00          | 	byte	0
080a9                 | LR__0454
080a9     20 21 21 21 
080ad     20 63 6F 72 
080b1     72 75 70 74 
080b5     65 64 20 68 
080b9     65 61 70 20 
080bd     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
080c1     00          | 	byte	0
080c2                 | LR__0455
080c2     4E 61 6D 65 
080c6     20 20 20 20 
080ca     20 20 20 20 
080ce     20 20 20 20 
080d2     20 20 20 20 
080d6     20 20 20 6C 
080da     65 6E 20 20 
080de     20 66 74 20 
080e2     76 6F 6C 20 
080e6     72 65 70 20 
080ea     20 20 72 2E 
080ee     6C 65 6E 20 
080f2     20 20 20 20 
080f6     20 20 20 20 
080fa     4E 61 6D 65 
080fe     20 20 20 20 
08102     20 20 20 20 
08106     20 20 20 20 
0810a     20 20 20 20 
0810e     20 20 20 6C 
08112     65 6E 20 20 
08116     20 66 74 20 
0811a     76 6F 6C 20 
0811e     72 65 70 20 
08122     20 20 72 2E 
08126     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
0812a     00          | 	byte	0
0812b                 | LR__0456
0812b     53          | 	byte	"S"
0812c     00          | 	byte	0
0812d                 | LR__0457
0812d     20 20 20 20 
08131     20 20 20 20 
08135     20 20 20 20 
08139     20 20 20 20 
0813d     20 20 20 20 
08141     20 20       | 	byte	"                      "
08143     00          | 	byte	0
08144                 | LR__0458
08144     20          | 	byte	" "
08145     00          | 	byte	0
08146                 | LR__0459
08146     73 61 6D 70 
0814a     6C 65 73 20 
0814e     6D 6F 64 75 
08152     6C 65       | 	byte	"samples module"
08154     00          | 	byte	0
08155     00 00 00    | 	alignl
08158                 | _dat_
08158     6A 75 6E 67 
0815c     6C 65 32 00 
08160     00 00 00 00 
08164     00 00 00 00 | module file "../../../mod/jungle.mod"
08168     00 00 00 00 
0816c     73 74 2D 30 
08170     33 3A 53 69 
08174     6E 65 43 5A | 	byte	$00, $00, $00, $00, $73, $74, $2d, $30, $33, $3a, $53, $69, $6e, $65, $43, $5a
08178     00 00 00 00 
0817c     00 00 00 00 
08180     00 00       | 	byte	$00[10]
08182     07 9E 00 40 
08186     00 F6 04 31 
0818a     73 74 2D 30 
0818e     34 3A 54 69 | 	byte	$07, $9e, $00, $40, $00, $f6, $04, $31, $73, $74, $2d, $30, $34, $3a, $54, $69
08192     6E 65 57 61 
08196     76 65 00 00 
0819a     00 00 00 00 
0819e     00 00 12 D1 | 	byte	$6e, $65, $57, $61, $76, $65, $00, $00, $00, $00, $00, $00, $00, $00, $12, $d1
081a2     00 40 00 00 
081a6     00 01 73 74 
081aa     2D 30 34 3A 
081ae     53 79 6E 74 | 	byte	$00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $34, $3a, $53, $79, $6e, $74
081b2     68 65 42 61 
081b6     73 73 00 00 
081ba     00 00 00 00 
081be     0F 6E 00 40 | 	byte	$68, $65, $42, $61, $73, $73, $00, $00, $00, $00, $00, $00, $0f, $6e, $00, $40
081c2     00 00 00 01 
081c6     73 74 2D 30 
081ca     32 3A 48 61 
081ce     6C 6C 42 72 | 	byte	$00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $48, $61, $6c, $6c, $42, $72
081d2     61 73 73 00 
081d6     00 00 00 00 
081da     00 00 12 5C 
081de     00 40 00 00 | 	byte	$61, $73, $73, $00, $00, $00, $00, $00, $00, $00, $12, $5c, $00, $40, $00, $00
081e2     00 01 73 74 
081e6     2D 30 31 3A 
081ea     42 61 73 73 
081ee     44 72 75 6D | 	byte	$00, $01, $73, $74, $2d, $30, $31, $3a, $42, $61, $73, $73, $44, $72, $75, $6d
081f2     33 00 00 00 
081f6     00 00 00 00 
081fa     05 B3 00 40 
081fe     00 00 00 01 | 	byte	$33, $00, $00, $00, $00, $00, $00, $00, $05, $b3, $00, $40, $00, $00, $00, $01
08202     73 74 2D 30 
08206     33 3A 50 6F 
0820a     70 53 6E 61 
0820e     72 65 32 00 | 	byte	$73, $74, $2d, $30, $33, $3a, $50, $6f, $70, $53, $6e, $61, $72, $65, $32, $00
08212     00 00 00 00 
08216     00 00       | 	byte	$00[6]
08218     07 D0 00 40 
0821c     00 00 00 01 
08220     73 74 2D 30 
08224     32 3A 48 69 | 	byte	$07, $d0, $00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $48, $69
08228     48 61 74 32 
0822c     00 00 00 00 
08230     00 00 00 00 
08234     00 00 03 E8 | 	byte	$48, $61, $74, $32, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $e8
08238     00 40 00 00 
0823c     00 01 73 74 
08240     2D 30 32 3A 
08244     4E 69 63 65 | 	byte	$00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $4e, $69, $63, $65
08248     00 00 00 00 
0824c     00 00 00 00 
08250     00 00 00 00 | 	byte	$00[12]
08254     0C E4 00 40 
08258     00 00 00 01 
0825c     73 74 2D 30 
08260     31 3A 44 69 | 	byte	$0c, $e4, $00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $44, $69
08264     67 44 75 67 
08268     00 00 00 00 
0826c     00 00 00 00 
08270     00 00 06 0E | 	byte	$67, $44, $75, $67, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06, $0e
08274     00 40 00 00 
08278     00 01 00 00 
0827c     00 00 00 00 
08280     00 00 00 00 | 	byte	$00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08284     00 00 00 00 
      ...             
08508     00 00 00 00 
0850c     00 00       | 	byte	$00[650]
0850e     23 00 00 01 
08512     02 02 03 04 
08516     05 06 07 02 
0851a     02 03 04 05 | 	byte	$23, $00, $00, $01, $02, $02, $03, $04, $05, $06, $07, $02, $02, $03, $04, $05
0851e     08 09 0A 0A 
08522     0B 0C 0D 0D 
08526     0E 02 02 03 
0852a     02 02 03 04 | 	byte	$08, $09, $0a, $0a, $0b, $0c, $0d, $0d, $0e, $02, $02, $03, $02, $02, $03, $04
0852e     05 06 0F 10 
08532     11 00 00 00 
08536     00 00 00 00 
0853a     00 00 00 00 | 	byte	$05, $06, $0f, $10, $11, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0853e     00 00 00 00 
      ...             
0858a     00 00 00 00 
0858e     00 00       | 	byte	$00[82]
08590     4D 2E 4B 2E 
08594     01 FC 1F 05 
08598     03 58 10 00 
0859c     02 A6 10 00 | 	byte	$4d, $2e, $4b, $2e, $01, $fc, $1f, $05, $03, $58, $10, $00, $02, $a6, $10, $00
085a0     02 3A 10 00 
085a4     00 00 00 00 
085a8     00 00 00 00 
085ac     00 00 00 00 | 	byte	$02, $3a, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085b0     00 00 00 00 
      ...             
0868c     00 00 00 00 
08690     00 00 00 00 | 	byte	$00[228]
08694     02 FA 10 00 
08698     02 5C 10 00 
0869c     01 FC 10 00 
086a0     01 AC 10 00 | 	byte	$02, $fa, $10, $00, $02, $5c, $10, $00, $01, $fc, $10, $00, $01, $ac, $10, $00
086a4     00 00 00 00 
      ...             
0878c     00 00 00 00 
08790     00 00 00 00 | 	byte	$00[240]
08794     02 D0 10 00 
08798     02 5C 10 00 
0879c     01 FC 10 00 
087a0     01 C5 10 00 | 	byte	$02, $d0, $10, $00, $02, $5c, $10, $00, $01, $fc, $10, $00, $01, $c5, $10, $00
087a4     00 00 00 00 
      ...             
08850     00 00 00 00 
08854     00 00       | 	byte	$00[178]
08856     0D 03 00 00 
0885a     0D 03 00 00 
0885e     0D 03 00 00 
08862     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
08866     0D 03 00 00 
0886a     0D 03 00 00 
0886e     0D 03 00 00 
08872     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
08876     0D 03 00 00 
0887a     0D 03 00 00 
0887e     0D 03 00 00 
08882     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
08886     0D 03 00 00 
0888a     0D 03 00 00 
0888e     0D 03 00 00 
08892     0D 03 01 53 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $01, $53
08896     20 00 00 00 
0889a     00 00 00 00 
0889e     0D 03 00 00 
088a2     0D 04 01 2E | 	byte	$20, $00, $00, $00, $00, $00, $00, $00, $0d, $03, $00, $00, $0d, $04, $01, $2e
088a6     20 00 01 53 
088aa     2C 20 00 00 
088ae     0D 14 00 00 
088b2     0D 14 00 00 | 	byte	$20, $00, $01, $53, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
088b6     00 00 01 2E 
088ba     2C 20 00 00 
088be     0D 14 00 00 
088c2     0D 14 01 2E | 	byte	$00, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $01, $2e
088c6     20 00 00 00 
088ca     00 00 00 00 
088ce     0D 14 00 00 
088d2     0D 14 01 2E | 	byte	$20, $00, $00, $00, $00, $00, $00, $00, $0d, $14, $00, $00, $0d, $14, $01, $2e
088d6     20 00 01 2E 
088da     2C 20 00 00 
088de     0D 14 00 00 
088e2     0D 14 00 00 | 	byte	$20, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
088e6     00 00 01 2E 
088ea     2C 20 00 00 
088ee     0D 14 00 00 
088f2     0D 14 00 00 | 	byte	$00, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
088f6     00 00 00 00 
088fa     00 00 00 00 | 	byte	$00[8]
088fe     0D 14 00 00 
08902     0D 14 00 00 
08906     00 00 00 00 
0890a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0890e     0D 14 00 00 
08912     0D 14 01 53 
08916     20 00 00 00 
0891a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $53, $20, $00, $00, $00, $00, $00, $00, $00
0891e     0D 14 00 00 
08922     0D 14 01 2E 
08926     20 00 01 53 
0892a     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $01, $53, $2c, $20, $00, $00
0892e     0D 14 00 00 
08932     0D 14 00 00 
08936     00 00 01 2E 
0893a     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $01, $2e, $2c, $20, $00, $00
0893e     0D 14 00 00 
08942     0D 14 01 2E 
08946     20 00 00 00 
0894a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $00, $00, $00, $00, $00, $00
0894e     0D 14 00 00 
08952     0D 14 01 2E 
08956     20 00 01 2E 
0895a     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $01, $2e, $2c, $20, $00, $00
0895e     0D 14 00 00 
08962     0D 14 00 00 
08966     00 00 01 2E 
0896a     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $01, $2e, $2c, $20, $00, $00
0896e     0D 14 00 00 
08972     0D 14 00 00 
08976     00 00 00 00 
0897a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0897e     0D 14 00 00 
08982     00 10 00 00 
08986     00 00 00 00 
0898a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0898e     0C 00 00 00 
08992     0C 00 01 53 
08996     20 00 00 00 
0899a     00 00 00 00 | 	byte	$0c, $00, $00, $00, $0c, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00, $00
0899e     00 00 00 00 
089a2     00 00       | 	byte	$00[6]
089a4     01 2E 20 00 
089a8     01 53 2C 20 
089ac     00 00 00 00 
089b0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $01, $53, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00
089b4     00 00 00 00 
089b8     01 2E 00 00 
089bc     00 00 00 00 
089c0     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089c4     01 2E 20 00 
089c8     00 00 00 00 
089cc     00 00 00 00 
089d0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089d4     00 E2 20 00 
089d8     01 2E 00 00 
089dc     00 00 00 00 
089e0     00 00 00 00 | 	byte	$00, $e2, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089e4     00 FE 20 00 
089e8     00 E2 00 00 
089ec     00 00 00 00 
089f0     00 00 00 00 | 	byte	$00, $fe, $20, $00, $00, $e2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089f4     01 2E 20 00 
089f8     00 FE 00 00 
089fc     00 00 00 00 
08a00     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a04     00 FE 20 00 
08a08     01 2E 00 00 
08a0c     00 00 00 00 
08a10     00 00 00 00 | 	byte	$00, $fe, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a14     01 2E 20 00 
08a18     00 FE 00 00 
08a1c     00 00 00 00 
08a20     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a24     01 53 20 00 
08a28     01 2E 00 00 
08a2c     00 00 00 00 
08a30     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a34     01 94 20 00 
08a38     01 53 00 00 
08a3c     00 00 00 00 
08a40     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a44     01 53 20 00 
08a48     01 94 00 00 
08a4c     00 00 00 00 
08a50     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a54     01 94 20 00 
08a58     01 53 00 00 
08a5c     00 00 00 00 
08a60     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a64     01 C5 20 00 
08a68     01 94 00 00 
08a6c     00 00 00 00 
08a70     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a74     01 FC 20 00 
08a78     01 C5 00 00 
08a7c     00 00 00 00 
08a80     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a84     00 00 00 00 
08a88     01 FC 00 00 
08a8c     00 00 00 00 
08a90     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a94     02 5C 20 00 
08a98     00 00 00 00 
08a9c     00 00 00 00 
08aa0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08aa4     02 5C 20 00 
08aa8     02 5C 00 00 
08aac     00 00 00 00 
08ab0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ab4     00 00 00 00 
08ab8     02 5C 00 00 
08abc     00 00 00 00 
08ac0     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ac4     02 5C 20 00 
08ac8     00 00 00 00 
08acc     00 00 00 00 
08ad0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ad4     01 2E 20 00 
08ad8     02 5C 00 00 
08adc     00 00 00 00 
08ae0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ae4     01 53 20 00 
08ae8     01 2E 00 00 
08aec     00 00 00 00 
08af0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08af4     01 94 20 00 
08af8     01 53 00 00 
08afc     00 00 00 00 
08b00     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b04     01 53 20 00 
08b08     01 94 00 00 
08b0c     00 00 00 00 
08b10     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b14     00 00 00 00 
08b18     01 53 00 00 
08b1c     00 00 00 00 
08b20     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b24     01 94 20 00 
08b28     00 00 00 00 
08b2c     00 00 00 00 
08b30     00 00 00 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b34     01 C5 20 00 
08b38     01 94 00 00 
08b3c     00 00 00 00 
08b40     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b44     01 94 20 00 
08b48     01 C5 00 00 
08b4c     00 00 00 00 
08b50     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b54     01 C5 20 00 
08b58     01 94 00 00 
08b5c     00 00 00 00 
08b60     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b64     01 FC 20 00 
08b68     01 C5 00 00 
08b6c     00 00 00 00 
08b70     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b74     02 5C 20 00 
08b78     01 FC 00 00 
08b7c     00 00 00 00 
08b80     00 00 00 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b84     00 00 00 00 
08b88     02 5C 00 00 
08b8c     00 00 00 00 
08b90     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b94     02 5C 20 00 
08b98     00 00 00 00 
08b9c     00 00 00 00 
08ba0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ba4     02 5C 20 00 
08ba8     02 5C 00 00 
08bac     00 00 00 00 
08bb0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bb4     00 00 00 00 
08bb8     02 5C 00 00 
08bbc     00 00 00 00 
08bc0     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bc4     02 5C 20 00 
08bc8     00 00 00 00 
08bcc     00 00 00 00 
08bd0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bd4     01 2E 20 00 
08bd8     02 5C 00 00 
08bdc     00 00 00 00 
08be0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08be4     01 53 20 00 
08be8     01 2E 00 00 
08bec     00 00 00 00 
08bf0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bf4     01 94 20 00 
08bf8     01 53 00 00 
08bfc     00 00 00 00 
08c00     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c04     01 53 20 00 
08c08     01 94 00 00 
08c0c     00 00 00 00 
08c10     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c14     00 00 00 00 
08c18     01 53 00 00 
08c1c     00 00 00 00 
08c20     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c24     01 94 20 00 
08c28     00 00 00 00 
08c2c     00 00 00 00 
08c30     00 00 00 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c34     01 C5 20 00 
08c38     01 94 00 00 
08c3c     00 00 00 00 
08c40     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c44     01 94 20 00 
08c48     01 C5 00 00 
08c4c     00 00 00 00 
08c50     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c54     01 C5 20 00 
08c58     01 94 00 00 
08c5c     01 53 11 01 
08c60     00 D6 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $01, $53, $11, $01, $00, $d6, $60, $00
08c64     01 FC 20 00 
08c68     01 C5 00 00 
08c6c     00 00 01 01 
08c70     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08c74     02 5C 20 00 
08c78     01 FC 00 00 
08c7c     00 00 01 01 
08c80     00 00 00 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08c84     00 00 00 00 
08c88     02 5C 00 00 
08c8c     00 00 01 01 
08c90     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08c94     02 5C 20 00 
08c98     00 00 00 00 
08c9c     00 00 01 01 
08ca0     00 D6 60 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08ca4     02 5C 20 00 
08ca8     02 5C 00 00 
08cac     00 00 01 01 
08cb0     01 1D 60 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $01, $1d, $60, $00
08cb4     00 00 00 00 
08cb8     02 5C 00 00 
08cbc     00 00 01 01 
08cc0     00 D6 60 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08cc4     02 5C 20 00 
08cc8     00 00 00 00 
08ccc     00 00 01 01 
08cd0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08cd4     01 2E 20 00 
08cd8     02 5C 00 00 
08cdc     00 00 01 01 
08ce0     01 53 60 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $01, $53, $60, $00
08ce4     01 53 20 00 
08ce8     01 2E 00 00 
08cec     00 00 01 01 
08cf0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08cf4     01 94 20 00 
08cf8     01 53 00 00 
08cfc     00 00 01 01 
08d00     01 40 60 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08d04     01 53 20 00 
08d08     01 94 00 00 
08d0c     00 00 01 01 
08d10     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08d14     00 00 00 00 
08d18     01 53 00 00 
08d1c     00 00 01 01 
08d20     00 D6 60 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d24     01 94 20 00 
08d28     00 00 00 00 
08d2c     00 00 01 01 
08d30     00 D6 60 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d34     01 C5 20 00 
08d38     01 94 00 00 
08d3c     00 00 01 01 
08d40     01 40 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08d44     01 94 20 00 
08d48     01 C5 00 00 
08d4c     00 00 01 01 
08d50     00 D6 60 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d54     01 C5 20 00 
08d58     01 94 00 00 
08d5c     00 00 01 01 
08d60     00 D6 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d64     01 FC 20 00 
08d68     01 C5 00 00 
08d6c     00 00 01 01 
08d70     01 40 60 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08d74     02 5C 20 00 
08d78     01 FC 00 00 
08d7c     00 00 01 01 
08d80     00 D6 60 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d84     00 00 00 00 
08d88     02 5C 00 00 
08d8c     00 00 01 01 
08d90     00 D6 60 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d94     00 FE 10 00 
08d98     01 FC 20 47 
08d9c     01 FC 30 00 
08da0     01 AC 50 00 | 	byte	$00, $fe, $10, $00, $01, $fc, $20, $47, $01, $fc, $30, $00, $01, $ac, $50, $00
08da4     00 00 00 00 
08da8     00 00 00    | 	byte	$00[7]
08dab     47 00 00 00 
08daf     00 00 AA 70 
08db3     00 00 00 00 
08db7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08dbb     47 00 00 00 
08dbf     00 00 AA 70 
08dc3     00 00 00 00 
08dc7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08dcb     47 00 00 00 
08dcf     00 00 AA 70 
08dd3     00 00 00 00 
08dd7     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08ddb     47 01 94 30 
08ddf     00 00 D6 60 
08de3     00 00 00 00 
08de7     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08deb     47 00 00 00 
08def     00 00 AA 70 
08df3     00 00 00 00 
08df7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08dfb     47 00 00 00 
08dff     00 00 AA 70 
08e03     00 00 00 00 
08e07     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e0b     47 00 00 00 
08e0f     00 00 AA 70 
08e13     00 00 00 00 
08e17     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08e1b     47 01 53 30 
08e1f     00 01 AC 50 
08e23     00 00 00 00 
08e27     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08e2b     47 00 00 00 
08e2f     00 00 AA 70 
08e33     00 00 00 00 
08e37     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e3b     47 00 00 00 
08e3f     00 00 AA 70 
08e43     00 00 00 00 
08e47     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e4b     47 00 00 00 
08e4f     00 00 AA 70 
08e53     00 00 00 00 
08e57     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08e5b     47 01 94 30 
08e5f     00 00 D6 60 
08e63     00 00 00 00 
08e67     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08e6b     47 00 00 00 
08e6f     00 00 AA 70 
08e73     00 01 2E 00 
08e77     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $2e, $00, $00, $00, $00, $00
08e7b     47 01 53 30 
08e7f     00 01 AC 50 
08e83     00 00 00 00 
08e87     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08e8b     47 00 00 00 
08e8f     00 00 AA 70 
08e93     00 01 53 00 
08e97     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $53, $00, $00, $01, $fc, $20
08e9b     47 01 FC 30 
08e9f     00 01 AC 50 
08ea3     00 00 00 00 
08ea7     00 00 00 00 | 	byte	$47, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08eab     47 00 00 00 
08eaf     00 00 AA 70 
08eb3     00 01 53 00 
08eb7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $53, $00, $00, $00, $00, $00
08ebb     47 00 00 00 
08ebf     00 00 AA 70 
08ec3     00 00 00 00 
08ec7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08ecb     47 00 00 00 
08ecf     00 00 AA 70 
08ed3     00 01 94 00 
08ed7     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $00, $00, $01, $fc, $20
08edb     47 01 94 30 
08edf     00 00 D6 60 
08ee3     00 00 00 00 
08ee7     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08eeb     47 00 00 00 
08eef     00 00 AA 70 
08ef3     00 01 C5 00 
08ef7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $00, $00, $00
08efb     47 00 00 00 
08eff     00 00 AA 70 
08f03     00 00 00 00 
08f07     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08f0b     47 00 00 00 
08f0f     00 00 AA 70 
08f13     00 01 C5 00 
08f17     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $01, $fc, $20
08f1b     47 01 53 30 
08f1f     00 01 AC 50 
08f23     00 00 00 00 
08f27     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08f2b     47 00 00 00 
08f2f     00 00 AA 70 
08f33     00 01 FC 00 
08f37     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $00, $00, $01, $fc, $20
08f3b     47 00 00 00 
08f3f     00 00 AA 70 
08f43     00 00 00 00 
08f47     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08f4b     47 00 00 00 
08f4f     00 00 AA 70 
08f53     00 01 C5 00 
08f57     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $01, $fc, $20
08f5b     47 01 94 30 
08f5f     00 00 D6 60 
08f63     00 00 00 00 
08f67     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08f6b     47 00 00 00 
08f6f     00 00 AA 70 
08f73     00 01 94 00 
08f77     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $00, $00, $01, $fc, $20
08f7b     47 01 53 30 
08f7f     00 01 AC 50 
08f83     00 00 00 00 
08f87     00 01 FC 20 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $01, $fc, $20
08f8b     47 00 00 00 
08f8f     00 00 AA 70 
08f93     00 01 C5 00 
08f97     00 00 E2 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $00, $e2, $20
08f9b     00 02 5C 30 
08f9f     00 01 AC 50 
08fa3     00 00 00 00 
08fa7     00 00 00 00 | 	byte	$00, $02, $5c, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08fab     00 00 00 00 
08faf     00 00       | 	byte	$00[6]
08fb1     AA 70 00 01 
08fb5     FC 00 00 00 
08fb9     FE 20 00 00 
08fbd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $fc, $00, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
08fc1     AA 70 00 00 
08fc5     00 00 00 00 
08fc9     00 00 00 00 
08fcd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08fd1     AA 70 00 01 
08fd5     2E 20 00 00 
08fd9     00 00 00 02 
08fdd     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
08fe1     AC 50 00 01 
08fe5     53 20 00 01 
08fe9     2E 2C 40 00 
08fed     00 00 00 00 | 	byte	$ac, $50, $00, $01, $53, $20, $00, $01, $2e, $2c, $40, $00, $00, $00, $00, $00
08ff1     AA 70 00 01 
08ff5     94 20 00 01 
08ff9     53 2C 40 00 
08ffd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $40, $00, $00, $00, $00, $00
09001     AA 70 00 01 
09005     53 20 00 01 
09009     94 2C 40 00 
0900d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $2c, $40, $00, $00, $00, $00, $00
09011     AA 70 00 00 
09015     00 00 00 01 
09019     53 2C 40 02 
0901d     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $2c, $40, $02, $5c, $30, $00, $01
09021     AC 50 00 00 
09025     00 00 00 00 
09029     00 00 40 00 
0902d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00
09031     AA 70 00 01 
09035     94 20 00 00 
09039     00 00 40 00 
0903d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00
09041     AA 70 00 01 
09045     AC 20 00 01 
09049     94 2C 30 00 
0904d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $2c, $30, $00, $00, $00, $00, $00
09051     AA 70 00 01 
09055     C5 20 00 01 
09059     AC 2C 30 02 
0905d     5C 30 00 00 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $2c, $30, $02, $5c, $30, $00, $00
09061     D6 60 00 01 
09065     FC 20 00 01 
09069     C5 2C 20 00 
0906d     00 00 00 00 | 	byte	$d6, $60, $00, $01, $fc, $20, $00, $01, $c5, $2c, $20, $00, $00, $00, $00, $00
09071     AA 70 00 02 
09075     5C 20 00 01 
09079     FC 2C 20 00 
0907d     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $01, $fc, $2c, $20, $00, $00, $00, $00, $00
09081     AA 70 00 00 
09085     00 00 00 02 
09089     5C 2C 20 00 
0908d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
09091     AA 70 00 02 
09095     5C 20 00 00 
09099     00 0C 20 02 
0909d     5C 30 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $0c, $20, $02, $5c, $30, $00, $00
090a1     D6 60 00 00 
090a5     00 00 00 02 
090a9     5C 2C 20 00 
090ad     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
090b1     AA 70 00 02 
090b5     5C 20 00 00 
090b9     00 0C 20 00 
090bd     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00
090c1     AA 70 00 00 
090c5     00 00 00 02 
090c9     5C 2C 20 00 
090cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
090d1     AA 70 00 01 
090d5     2E 20 00 00 
090d9     00 0C 20 02 
090dd     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $0c, $20, $02, $5c, $30, $00, $01
090e1     AC 50 00 01 
090e5     53 20 00 01 
090e9     2E 2C 20 00 
090ed     00 00 00 00 | 	byte	$ac, $50, $00, $01, $53, $20, $00, $01, $2e, $2c, $20, $00, $00, $00, $00, $00
090f1     AA 70 00 01 
090f5     94 20 00 01 
090f9     53 2C 20 00 
090fd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $20, $00, $00, $00, $00, $00
09101     D6 60 00 00 
09105     E2 20 00 01 
09109     94 2C 20 00 
0910d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $e2, $20, $00, $01, $94, $2c, $20, $00, $00, $00, $00, $00
09111     AA 70 00 00 
09115     00 00 00 00 
09119     E2 2C 20 02 
0911d     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $e2, $2c, $20, $02, $5c, $30, $00, $00
09121     D6 60 00 00 
09125     FE 20 00 00 
09129     00 0C 20 00 
0912d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $fe, $20, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00
09131     AA 70 00 01 
09135     2E 20 00 00 
09139     FE 2C 20 00 
0913d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $fe, $2c, $20, $00, $00, $00, $00, $00
09141     D6 60 00 01 
09145     53 20 00 01 
09149     2E 2C 30 00 
0914d     00 00 00 00 | 	byte	$d6, $60, $00, $01, $53, $20, $00, $01, $2e, $2c, $30, $00, $00, $00, $00, $00
09151     AA 70 00 01 
09155     94 20 00 01 
09159     53 2C 30 02 
0915d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $30, $02, $5c, $30, $00, $01
09161     AC 50 00 01 
09165     C5 20 00 01 
09169     94 2C 40 00 
0916d     00 00 00 00 | 	byte	$ac, $50, $00, $01, $c5, $20, $00, $01, $94, $2c, $40, $00, $00, $00, $00, $00
09171     D6 60 00 01 
09175     FC 20 00 01 
09179     C5 2C 50 00 
0917d     00 00 00 00 | 	byte	$d6, $60, $00, $01, $fc, $20, $00, $01, $c5, $2c, $50, $00, $00, $00, $00, $00
09181     D6 60 00 00 
09185     00 00 00 01 
09189     FC 2C 60 00 
0918d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $01, $fc, $2c, $60, $00, $00, $00, $00, $00
09191     D6 60 00 00 
09195     AA 40 00 00 
09199     E2 80 47 01 
0919d     C5 30 00 01 | 	byte	$d6, $60, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
091a1     AC 50 00 00 
091a5     00 00 00 00 
091a9     00 00 47 00 
091ad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
091b1     AA 70 00 00 
091b5     AA 40 00 00 
091b9     E2 80 47 00 
091bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
091c1     AA 70 00 00 
091c5     00 00 00 00 
091c9     00 00 47 00 
091cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
091d1     AA 70 00 00 
091d5     AA 40 00 00 
091d9     E2 80 47 01 
091dd     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
091e1     D6 60 00 00 
091e5     AA 40 00 00 
091e9     E2 80 47 00 
091ed     00 00 00 00 | 	byte	$d6, $60, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
091f1     AA 70 00 00 
091f5     00 00 00 00 
091f9     00 00 47 00 
091fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09201     AA 70 00 00 
09205     AA 40 00 00 
09209     E2 80 47 00 
0920d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09211     AA 70 00 00 
09215     97 40 00 00 
09219     97 80 47 02 
0921d     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $01
09221     AC 50 00 00 
09225     00 00 00 00 
09229     00 00 47 00 
0922d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09231     AA 70 00 00 
09235     97 40 00 00 
09239     97 80 47 00 
0923d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $00, $97, $80, $47, $00, $00, $00, $00, $00
09241     AA 70 00 00 
09245     00 00 00 00 
09249     00 00 47 00 
0924d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09251     AA 70 00 00 
09255     00 00 00 00 
09259     97 80 47 02 
0925d     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $00
09261     D6 60 00 00 
09265     00 00 00 00 
09269     00 00 47 00 
0926d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09271     AA 70 00 00 
09275     00 00 00 00 
09279     97 80 47 00 
0927d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $01
09281     AC 50 00 00 
09285     00 00 00 00 
09289     00 00 47 00 
0928d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09291     AA 70 00 00 
09295     AA 40 00 00 
09299     E2 80 47 01 
0929d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
092a1     AC 50 00 00 
092a5     AA 40 00 00 
092a9     E2 80 47 00 
092ad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
092b1     AA 70 00 00 
092b5     AA 40 00 00 
092b9     E2 80 47 00 
092bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
092c1     AA 70 00 00 
092c5     00 00 00 00 
092c9     00 00 47 00 
092cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
092d1     AA 70 00 00 
092d5     AA 40 00 00 
092d9     E2 80 47 01 
092dd     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
092e1     D6 60 00 00 
092e5     00 00 00 00 
092e9     00 00 47 00 
092ed     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
092f1     AA 70 00 00 
092f5     AA 40 00 00 
092f9     E2 80 47 00 
092fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09301     AA 70 00 00 
09305     00 00 00 00 
09309     00 00 47 00 
0930d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09311     AA 70 00 00 
09315     97 40 00 01 
09319     2E 80 47 02 
0931d     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $01, $2e, $80, $47, $02, $5c, $30, $00, $01
09321     AC 50 00 00 
09325     00 00 00 00 
09329     00 00 47 00 
0932d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09331     AA 70 00 00 
09335     00 00 00 01 
09339     2E 80 47 00 
0933d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $2e, $80, $47, $00, $00, $00, $00, $00
09341     AA 70 00 00 
09345     00 00 00 00 
09349     00 00 47 00 
0934d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09351     AA 70 00 00 
09355     00 00 00 00 
09359     97 80 47 02 
0935d     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $00
09361     D6 60 00 00 
09365     00 00 00 00 
09369     97 80 47 00 
0936d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $00
09371     AA 70 00 00 
09375     00 00 00 00 
09379     97 80 47 00 
0937d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $01
09381     AC 50 00 00 
09385     00 00 00 00 
09389     00 00 47 00 
0938d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09391     AA 70 00 00 
09395     AA 40 00 00 
09399     E2 80 47 01 
0939d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
093a1     AC 50 00 00 
093a5     00 00 00 00 
093a9     00 00 47 00 
093ad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
093b1     AA 70 00 00 
093b5     B4 40 00 00 
093b9     E2 80 47 00 
093bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
093c1     AA 70 00 00 
093c5     00 00 00 00 
093c9     00 00 47 00 
093cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
093d1     AA 70 00 00 
093d5     AA 40 00 00 
093d9     E2 80 47 01 
093dd     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
093e1     AC 50 00 00 
093e5     00 00 00 00 
093e9     00 00 47 00 
093ed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
093f1     AA 70 00 00 
093f5     B4 40 00 00 
093f9     E2 80 47 00 
093fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09401     AA 70 00 00 
09405     00 00 00 00 
09409     00 00 47 00 
0940d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09411     AA 70 00 00 
09415     AA 40 00 00 
09419     E2 80 47 01 
0941d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
09421     AC 50 00 00 
09425     00 00 00 00 
09429     00 00 47 00 
0942d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09431     AA 70 00 00 
09435     B4 40 00 00 
09439     E2 80 47 00 
0943d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09441     AA 70 00 00 
09445     00 00 00 00 
09449     00 00 47 00 
0944d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09451     AA 70 00 00 
09455     AA 40 00 00 
09459     E2 80 47 01 
0945d     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
09461     D6 60 00 00 
09465     00 00 00 00 
09469     00 00 47 00 
0946d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09471     AA 70 00 00 
09475     B4 40 00 00 
09479     E2 80 47 00 
0947d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09481     AA 70 00 00 
09485     00 00 00 00 
09489     00 00 47 00 
0948d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09491     AA 70 00 00 
09495     AA 40 00 00 
09499     E2 80 47 01 
0949d     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
094a1     D6 60 00 00 
094a5     B4 40 00 00 
094a9     00 00 47 00 
094ad     00 00 00 00 | 	byte	$d6, $60, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094b1     AA 70 00 00 
094b5     00 00 00 00 
094b9     00 00 47 00 
094bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094c1     AA 70 00 00 
094c5     00 00 00 00 
094c9     00 00 47 00 
094cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094d1     AA 70 00 00 
094d5     AA 40 00 00 
094d9     E2 80 47 01 
094dd     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
094e1     AC 50 00 00 
094e5     B4 40 00 00 
094e9     00 00 47 00 
094ed     00 00 00 00 | 	byte	$ac, $50, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094f1     AA 70 00 00 
094f5     00 00 00 00 
094f9     00 00 47 00 
094fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09501     D6 60 00 00 
09505     00 00 00 00 
09509     00 00 47 00 
0950d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09511     AA 70 00 00 
09515     AA 40 00 00 
09519     E2 80 47 01 
0951d     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
09521     D6 60 00 00 
09525     B4 40 00 00 
09529     E2 80 47 00 
0952d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09531     AA 70 00 00 
09535     00 00 00 00 
09539     00 00 47 00 
0953d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09541     D6 60 00 00 
09545     00 00 00 00 
09549     E2 80 47 00 
0954d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09551     AA 70 00 00 
09555     AA 40 00 00 
09559     E2 80 47 01 
0955d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
09561     AC 50 00 00 
09565     B4 40 00 00 
09569     00 00 47 00 
0956d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09571     D6 60 00 00 
09575     00 00 00 00 
09579     E2 80 47 00 
0957d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09581     D6 60 00 00 
09585     00 00 00 00 
09589     E2 80 47 00 
0958d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09591     D6 60 00 00 
09595     7F 40 00 01 
09599     94 20 38 01 
0959d     FC 30 00 01 | 	byte	$d6, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
095a1     AC 50 00 00 
095a5     7F 40 00 01 
095a9     94 20 38 00 
095ad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
095b1     AA 70 00 00 
095b5     00 00 00 00 
095b9     00 00 38 00 
095bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
095c1     AA 70 00 00 
095c5     7F 40 00 01 
095c9     94 20 38 00 
095cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
095d1     AA 70 00 00 
095d5     00 00 00 00 
095d9     00 00 38 01 
095dd     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
095e1     1D 60 00 00 
095e5     00 00 00 00 
095e9     00 00 38 00 
095ed     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
095f1     AA 70 00 00 
095f5     00 00 00 00 
095f9     00 00 38 00 
095fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09601     AA 70 00 00 
09605     00 00 00 00 
09609     00 00 38 00 
0960d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09611     AA 70 00 00 
09615     8F 40 00 01 
09619     C5 20 59 01 
0961d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
09621     AC 50 00 00 
09625     8F 40 00 01 
09629     C5 20 59 00 
0962d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09631     AA 70 00 00 
09635     00 00 00 00 
09639     00 00 59 00 
0963d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09641     AA 70 00 00 
09645     8F 40 00 01 
09649     C5 20 59 00 
0964d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09651     AA 70 00 00 
09655     00 00 00 00 
09659     00 00 59 01 
0965d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
09661     1D 60 00 00 
09665     00 00 00 00 
09669     00 00 59 00 
0966d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09671     AA 70 00 00 
09675     00 00 00 00 
09679     00 00 59 00 
0967d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09681     AA 70 00 00 
09685     00 00 00 00 
09689     00 00 59 00 
0968d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09691     AA 70 00 00 
09695     BE 40 00 01 
09699     7D 20 47 01 
0969d     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
096a1     AC 50 00 00 
096a5     BE 40 00 00 
096a9     00 00 47 00 
096ad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
096b1     AA 70 00 00 
096b5     BE 40 00 00 
096b9     00 00 47 00 
096bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
096c1     AA 70 00 00 
096c5     BE 40 00 00 
096c9     00 00 47 00 
096cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
096d1     AA 70 00 00 
096d5     BE 40 00 01 
096d9     7D 20 47 01 
096dd     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
096e1     1D 60 00 00 
096e5     BE 40 00 00 
096e9     00 00 47 00 
096ed     00 00 00 00 | 	byte	$1d, $60, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
096f1     AA 70 00 00 
096f5     BE 40 00 00 
096f9     00 00 47 00 
096fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09701     AA 70 00 00 
09705     BE 40 00 00 
09709     00 00 47 00 
0970d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09711     AA 70 00 00 
09715     CA 40 00 01 
09719     C5 20 47 01 
0971d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $ca, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
09721     AC 50 00 00 
09725     00 00 00 00 
09729     00 00 47 00 
0972d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09731     AA 70 00 00 
09735     E2 40 00 01 
09739     C5 20 47 00 
0973d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $00
09741     AA 70 00 00 
09745     00 00 00 00 
09749     00 00 47 00 
0974d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09751     AA 70 00 00 
09755     E2 40 00 01 
09759     C5 20 47 01 
0975d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
09761     1D 60 00 00 
09765     00 00 00 01 
09769     C5 20 47 00 
0976d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $00
09771     AA 70 00 00 
09775     FE 40 00 01 
09779     C5 20 47 00 
0977d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $fe, $40, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $01
09781     1D 60 00 00 
09785     00 00 00 00 
09789     00 00 47 00 
0978d     00 00 00 01 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
09791     1D 60 00 00 
09795     CA 40 00 02 
09799     5C 20 47 02 
0979d     5C 30 00 01 | 	byte	$1d, $60, $00, $00, $ca, $40, $00, $02, $5c, $20, $47, $02, $5c, $30, $00, $01
097a1     AC 50 00 00 
097a5     00 00 00 00 
097a9     00 00 47 00 
097ad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097b1     AA 70 00 00 
097b5     00 00 00 00 
097b9     00 00 47 00 
097bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097c1     AA 70 00 00 
097c5     00 00 00 00 
097c9     00 00 47 00 
097cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097d1     AA 70 00 01 
097d5     2E 20 00 00 
097d9     00 00 47 02 
097dd     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $47, $02, $5c, $30, $00, $01
097e1     1D 60 00 01 
097e5     53 20 00 01 
097e9     2E 2C 30 00 
097ed     00 00 00 00 | 	byte	$1d, $60, $00, $01, $53, $20, $00, $01, $2e, $2c, $30, $00, $00, $00, $00, $00
097f1     AA 70 00 01 
097f5     94 20 00 01 
097f9     53 00 00 00 
097fd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
09801     AA 70 00 01 
09805     53 20 00 01 
09809     94 00 00 00 
0980d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
09811     AA 70 00 00 
09815     00 00 00 01 
09819     53 00 00 02 
0981d     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $00, $00, $02, $5c, $30, $00, $01
09821     AC 50 00 00 
09825     00 00 00 00 
09829     00 00 00 00 
0982d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09831     AA 70 00 01 
09835     94 20 00 00 
09839     00 00 00 00 
0983d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09841     AA 70 00 01 
09845     AC 20 00 01 
09849     94 00 00 00 
0984d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
09851     AA 70 00 01 
09855     C5 20 00 01 
09859     AC 00 00 02 
0985d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $00, $00, $02, $5c, $30, $00, $01
09861     1D 60 00 01 
09865     FC 20 00 01 
09869     C5 00 00 00 
0986d     00 00 00 00 | 	byte	$1d, $60, $00, $01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00
09871     AA 70 00 02 
09875     5C 20 00 01 
09879     FC 00 00 00 
0987d     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00
09881     AA 70 00 00 
09885     00 00 00 02 
09889     5C 00 00 00 
0988d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
09891     AA 70 00 02 
09895     5C 20 00 00 
09899     00 00 00 02 
0989d     5C 30 00 01 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
098a1     AC 50 00 00 
098a5     00 00 00 02 
098a9     5C 00 00 00 
098ad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
098b1     AA 70 00 02 
098b5     5C 20 00 00 
098b9     00 00 00 00 
098bd     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098c1     AA 70 00 00 
098c5     00 00 00 02 
098c9     5C 00 00 00 
098cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
098d1     AA 70 00 01 
098d5     2E 20 00 00 
098d9     00 00 00 02 
098dd     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
098e1     1D 60 00 01 
098e5     53 20 00 01 
098e9     2E 00 00 00 
098ed     00 00 00 00 | 	byte	$1d, $60, $00, $01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00
098f1     AA 70 00 01 
098f5     94 20 00 01 
098f9     53 00 00 00 
098fd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
09901     AA 70 00 01 
09905     53 20 00 01 
09909     94 00 00 00 
0990d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
09911     AA 70 00 00 
09915     00 00 00 01 
09919     53 00 00 02 
0991d     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $00, $00, $02, $5c, $30, $00, $01
09921     AC 50 00 00 
09925     00 00 00 00 
09929     00 00 00 00 
0992d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09931     AA 70 00 01 
09935     94 20 00 00 
09939     00 00 00 00 
0993d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09941     AA 70 00 01 
09945     AC 20 00 01 
09949     94 00 00 00 
0994d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
09951     AA 70 00 01 
09955     C5 20 00 01 
09959     AC 00 00 02 
0995d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $00, $00, $02, $5c, $30, $00, $01
09961     1D 60 00 01 
09965     FC 20 00 01 
09969     C5 00 00 00 
0996d     00 00 00 01 | 	byte	$1d, $60, $00, $01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $01
09971     1D 60 00 02 
09975     5C 20 00 01 
09979     FC 00 00 00 
0997d     00 00 00 00 | 	byte	$1d, $60, $00, $02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00
09981     AA 70 00 00 
09985     00 00 00 02 
09989     5C 00 00 00 
0998d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $01
09991     1D 60 00 00 
09995     7F 40 00 01 
09999     94 20 38 01 
0999d     FC 30 00 01 | 	byte	$1d, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
099a1     AC 50 00 00 
099a5     7F 40 00 01 
099a9     94 20 38 00 
099ad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
099b1     AA 70 00 00 
099b5     00 00 00 00 
099b9     00 00 38 00 
099bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
099c1     AA 70 00 00 
099c5     7F 40 00 01 
099c9     94 20 38 00 
099cd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
099d1     AA 70 00 00 
099d5     00 00 00 00 
099d9     00 00 38 01 
099dd     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
099e1     1D 60 00 00 
099e5     00 00 00 00 
099e9     00 00 38 00 
099ed     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
099f1     AA 70 00 00 
099f5     00 00 00 00 
099f9     00 00 38 00 
099fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09a01     AA 70 00 00 
09a05     00 00 00 00 
09a09     00 00 38 00 
09a0d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09a11     AA 70 00 00 
09a15     8F 40 00 01 
09a19     C5 20 59 01 
09a1d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
09a21     AC 50 00 00 
09a25     8F 40 00 01 
09a29     C5 20 59 00 
09a2d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09a31     AA 70 00 00 
09a35     00 00 00 00 
09a39     00 00 59 00 
09a3d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09a41     AA 70 00 00 
09a45     8F 40 00 01 
09a49     C5 20 59 00 
09a4d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09a51     AA 70 00 00 
09a55     00 00 00 00 
09a59     00 00 59 01 
09a5d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
09a61     1D 60 00 00 
09a65     00 00 00 00 
09a69     00 00 59 00 
09a6d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09a71     AA 70 00 00 
09a75     00 00 00 00 
09a79     00 00 59 00 
09a7d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09a81     AA 70 00 00 
09a85     00 00 00 00 
09a89     00 00 59 00 
09a8d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09a91     AA 70 00 00 
09a95     BE 40 00 01 
09a99     7D 20 47 01 
09a9d     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09aa1     AC 50 00 00 
09aa5     BE 40 00 00 
09aa9     00 00 47 00 
09aad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09ab1     AA 70 00 00 
09ab5     BE 40 00 00 
09ab9     00 00 47 00 
09abd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09ac1     AA 70 00 00 
09ac5     BE 40 00 00 
09ac9     00 00 47 00 
09acd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09ad1     AA 70 00 00 
09ad5     BE 40 00 01 
09ad9     7D 20 47 01 
09add     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09ae1     1D 60 00 00 
09ae5     BE 40 00 00 
09ae9     00 00 47 00 
09aed     00 00 00 00 | 	byte	$1d, $60, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09af1     AA 70 00 00 
09af5     BE 40 00 00 
09af9     00 00 47 00 
09afd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b01     AA 70 00 00 
09b05     BE 40 00 00 
09b09     00 00 47 00 
09b0d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b11     AA 70 00 00 
09b15     CA 40 00 01 
09b19     C5 20 47 01 
09b1d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $ca, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
09b21     AC 50 00 00 
09b25     E2 40 00 00 
09b29     00 00 47 00 
09b2d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $e2, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b31     AA 70 00 00 
09b35     00 00 00 00 
09b39     00 00 47 00 
09b3d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b41     AA 70 00 00 
09b45     E2 40 00 00 
09b49     00 00 47 00 
09b4d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b51     AA 70 00 00 
09b55     00 00 00 01 
09b59     C5 20 47 01 
09b5d     E0 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $c5, $20, $47, $01, $e0, $30, $00, $01
09b61     1D 60 00 00 
09b65     00 00 00 00 
09b69     00 00 47 00 
09b6d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b71     AA 70 00 00 
09b75     00 00 00 00 
09b79     00 00 47 00 
09b7d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
09b81     1D 60 00 00 
09b85     00 00 00 00 
09b89     00 00 47 00 
09b8d     00 00 00 01 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
09b91     1D 60 00 00 
09b95     7F 40 00 01 
09b99     94 20 38 01 
09b9d     FC 30 00 01 | 	byte	$1d, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
09ba1     AC 50 00 00 
09ba5     7F 40 00 01 
09ba9     94 20 38 00 
09bad     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09bb1     AA 70 00 00 
09bb5     00 00 00 00 
09bb9     00 00 38 00 
09bbd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09bc1     AA 70 00 00 
09bc5     7F 40 00 01 
09bc9     94 20 38 00 
09bcd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09bd1     AA 70 00 00 
09bd5     00 00 00 00 
09bd9     00 00 38 01 
09bdd     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
09be1     1D 60 00 00 
09be5     00 00 00 00 
09be9     00 00 38 00 
09bed     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09bf1     AA 70 00 00 
09bf5     00 00 00 00 
09bf9     00 00 38 00 
09bfd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09c01     AA 70 00 00 
09c05     00 00 00 00 
09c09     00 00 38 00 
09c0d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09c11     AA 70 00 00 
09c15     8F 40 00 01 
09c19     C5 20 59 01 
09c1d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
09c21     AC 50 00 00 
09c25     8F 40 00 01 
09c29     C5 20 59 00 
09c2d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09c31     AA 70 00 00 
09c35     00 00 00 00 
09c39     00 00 59 00 
09c3d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09c41     AA 70 00 00 
09c45     8F 40 00 01 
09c49     C5 20 59 00 
09c4d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09c51     AA 70 00 00 
09c55     00 00 00 00 
09c59     00 00 59 01 
09c5d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
09c61     1D 60 00 00 
09c65     00 00 00 00 
09c69     00 00 59 00 
09c6d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09c71     AA 70 00 00 
09c75     00 00 00 00 
09c79     00 00 59 00 
09c7d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09c81     AA 70 00 00 
09c85     00 00 00 00 
09c89     00 00 59 00 
09c8d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09c91     AA 70 00 00 
09c95     FE 40 00 01 
09c99     7D 20 47 01 
09c9d     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $fe, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09ca1     1D 60 00 00 
09ca5     FE 40 00 00 
09ca9     00 00 47 00 
09cad     00 00 00 00 | 	byte	$1d, $60, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09cb1     00 00 00 00 
09cb5     FE 40 00 00 
09cb9     00 00 47 00 
09cbd     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09cc1     00 00 00 00 
09cc5     FE 40 00 00 
09cc9     00 00 47 00 
09ccd     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09cd1     00 00 00 00 
09cd5     FE 40 00 00 
09cd9     00 00 47 00 
09cdd     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09ce1     00 00 00 00 
09ce5     FE 40 00 00 
09ce9     00 00 47 00 
09ced     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09cf1     00 00 00 00 
09cf5     FE 40 00 00 
09cf9     00 00 47 00 
09cfd     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09d01     00 00 00 00 
09d05     FE 40 00 00 
09d09     00 00 47 00 
09d0d     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09d11     00 00 00 01 
09d15     0D 40 00 01 
09d19     C5 20 49 01 
09d1d     C5 30 00 01 | 	byte	$00, $00, $00, $01, $0d, $40, $00, $01, $c5, $20, $49, $01, $c5, $30, $00, $01
09d21     1D 60 00 01 
09d25     2E 40 00 00 
09d29     00 00 49 00 
09d2d     00 00 00 00 | 	byte	$1d, $60, $00, $01, $2e, $40, $00, $00, $00, $00, $49, $00, $00, $00, $00, $00
09d31     00 00 00 00 
09d35     00 00 00 00 
09d39     00 00       | 	byte	$00[10]
09d3b     49 00 00 00 
09d3f     00 00 00 00 
09d43     00 01 2E 40 
09d47     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $00, $00
09d4b     49 00 00 00 
09d4f     00 00 00 00 
09d53     00 00 00 00 
09d57     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d5b     49 00 00 00 
09d5f     00 00 00 00 
09d63     00 00 00 00 
09d67     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d6b     49 00 00 00 
09d6f     00 00 00 00 
09d73     00 00 00 00 
09d77     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d7b     49 00 00 00 
09d7f     00 00 00 00 
09d83     00 01 2E 40 
09d87     00 01 E0 20 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $01, $e0, $20
09d8b     38 02 5C 30 
09d8f     00 03 58 60 
09d93     00 00 00 00 
09d97     00 00 00 00 | 	byte	$38, $02, $5c, $30, $00, $03, $58, $60, $00, $00, $00, $00, $00, $00, $00, $00
09d9b     38 00 00 00 
09d9f     00 00 00 00 
09da3     00 00 00 00 
09da7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dab     38 00 00 00 
09daf     00 00 00 00 
09db3     00 00 00 00 
09db7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dbb     38 00 00 00 
09dbf     00 00 00 00 
09dc3     00 00 00 00 
09dc7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dcb     38 00 00 00 
09dcf     00 00 00 00 
09dd3     00 00 00 00 
09dd7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ddb     38 00 00 00 
09ddf     00 00 00 00 
09de3     00 00 00 00 
09de7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09deb     38 00 00 00 
09def     00 00 00 00 
09df3     00 00 00 00 
09df7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dfb     38 00 00 00 
09dff     00 00 00 00 
09e03     00 00 00 00 
09e07     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e0b     38 00 00 00 
09e0f     00 00 00 00 
09e13     00 00 00 00 
09e17     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e1b     38 00 00 00 
09e1f     00 00 00 00 
09e23     00 00 00 00 
09e27     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e2b     38 00 00 00 
09e2f     00 00 00 00 
09e33     00 00 00 00 
09e37     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e3b     38 00 00 00 
09e3f     00 00 00 00 
09e43     00 00 00 00 
09e47     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e4b     38 00 00 00 
09e4f     00 00 00 00 
09e53     00 00 00 00 
09e57     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e5b     38 00 00 00 
09e5f     00 00 00 00 
09e63     00 00 00 00 
09e67     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e6b     38 00 00 00 
09e6f     00 00 00 00 
09e73     00 00 00 00 
09e77     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e7b     38 00 00 00 
09e7f     00 00 00 00 
09e83     00 00 00 00 
09e87     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e8b     38 00 00 00 
09e8f     00 00 00 00 
09e93     00 01 53 40 
09e97     00 00 AA 70 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $53, $40, $00, $00, $aa, $70
09e9b     00 02 5C 90 
09e9f     00 00 D6 50 
09ea3     00 01 2E 40 
09ea7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
09eab     00 02 5C 90 
09eaf     00 00 00 00 
09eb3     00 00 00 00 
09eb7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09ebb     00 02 5C 90 
09ebf     00 00 00 00 
09ec3     00 01 2E 40 
09ec7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
09ecb     00 02 5C 90 
09ecf     00 00 00 00 
09ed3     00 00 00 00 
09ed7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09edb     00 02 5C 90 
09edf     00 00 D6 50 
09ee3     00 00 00 00 
09ee7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09eeb     00 02 5C 90 
09eef     00 00 D6 50 
09ef3     00 00 00 00 
09ef7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09efb     00 02 5C 90 
09eff     00 00 D6 50 
09f03     00 00 00 00 
09f07     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09f0b     00 02 5C 90 
09f0f     00 00 D6 50 
09f13     00 01 53 40 
09f17     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
09f1b     00 02 5C 90 
09f1f     00 01 AC 60 
09f23     00 01 2E 40 
09f27     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e, $40, $00, $00, $aa, $70
09f2b     00 02 5C 90 
09f2f     00 00 00 00 
09f33     00 00 00 00 
09f37     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f3b     00 02 5C 90 
09f3f     00 00 00 00 
09f43     00 01 2E 40 
09f47     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
09f4b     00 02 5C 90 
09f4f     00 00 00 00 
09f53     00 00 00 00 
09f57     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f5b     00 02 5C 90 
09f5f     00 00 D6 50 
09f63     00 00 00 00 
09f67     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09f6b     00 02 5C 90 
09f6f     00 00 00 00 
09f73     00 00 00 00 
09f77     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f7b     00 02 5C 90 
09f7f     00 00 00 00 
09f83     00 00 00 00 
09f87     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f8b     00 02 5C 90 
09f8f     00 00 00 00 
09f93     00 00 FE 40 
09f97     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
09f9b     00 01 C5 90 
09f9f     00 00 D6 50 
09fa3     00 00 00 00 
09fa7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09fab     00 01 C5 90 
09faf     00 00 D6 50 
09fb3     00 00 FE 40 
09fb7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
09fbb     00 01 C5 90 
09fbf     00 00 D6 50 
09fc3     00 00 00 00 
09fc7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09fcb     00 01 C5 90 
09fcf     00 00 D6 50 
09fd3     00 00 FE 40 
09fd7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
09fdb     00 01 C5 90 
09fdf     00 01 AC 60 
09fe3     00 00 FE 40 
09fe7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $fe, $40, $00, $00, $aa, $70
09feb     00 01 C5 90 
09fef     00 00 00 00 
09ff3     00 01 0D 40 
09ff7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $0d, $40, $00, $00, $aa, $70
09ffb     00 01 C5 90 
09fff     00 00 00 00 
0a003     00 01 2E 40 
0a007     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a00b     00 01 C5 90 
0a00f     00 00 00 00 
0a013     00 01 0D 40 
0a017     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $0d, $40, $00, $00, $aa, $70
0a01b     00 02 5C 90 
0a01f     00 00 D6 50 
0a023     00 01 2E 40 
0a027     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a02b     00 02 5C 90 
0a02f     00 00 D6 50 
0a033     00 00 00 00 
0a037     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a03b     00 02 5C 90 
0a03f     00 00 D6 50 
0a043     00 01 2E 40 
0a047     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a04b     00 02 5C 90 
0a04f     00 00 D6 50 
0a053     00 00 00 00 
0a057     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a05b     00 02 5C 90 
0a05f     00 01 AC 60 
0a063     00 00 00 00 
0a067     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a06b     00 02 5C 90 
0a06f     00 00 00 00 
0a073     00 00 00 00 
0a077     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a07b     00 02 5C 90 
0a07f     00 00 00 00 
0a083     00 00 00 00 
0a087     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a08b     00 02 5C 90 
0a08f     00 00 00 00 
0a093     00 01 53 40 
0a097     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $53, $40, $00, $00, $aa, $70
0a09b     00 02 5C 90 
0a09f     00 00 D6 50 
0a0a3     00 01 53 40 
0a0a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
0a0ab     00 02 5C 90 
0a0af     00 00 00 00 
0a0b3     00 00 00 00 
0a0b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a0bb     00 02 5C 90 
0a0bf     00 00 00 00 
0a0c3     00 01 2E 40 
0a0c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a0cb     00 02 5C 90 
0a0cf     00 00 00 00 
0a0d3     00 00 00 00 
0a0d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a0db     00 02 5C 90 
0a0df     00 00 D6 50 
0a0e3     00 00 00 00 
0a0e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a0eb     00 02 5C 90 
0a0ef     00 00 D6 50 
0a0f3     00 00 00 00 
0a0f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a0fb     00 02 5C 90 
0a0ff     00 00 D6 50 
0a103     00 00 00 00 
0a107     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a10b     00 02 5C 90 
0a10f     00 00 D6 50 
0a113     00 01 53 40 
0a117     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
0a11b     00 02 5C 90 
0a11f     00 01 AC 60 
0a123     00 01 53 40 
0a127     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $53, $40, $00, $00, $aa, $70
0a12b     00 02 5C 90 
0a12f     00 00 00 00 
0a133     00 00 00 00 
0a137     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a13b     00 02 5C 90 
0a13f     00 00 00 00 
0a143     00 01 2E 40 
0a147     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a14b     00 02 5C 90 
0a14f     00 00 00 00 
0a153     00 00 00 00 
0a157     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a15b     00 02 5C 90 
0a15f     00 00 D6 50 
0a163     00 00 00 00 
0a167     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a16b     00 02 5C 90 
0a16f     00 00 00 00 
0a173     00 01 2E 40 
0a177     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a17b     00 02 5C 90 
0a17f     00 01 AC 50 
0a183     00 01 2E 40 
0a187     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a18b     00 02 5C 90 
0a18f     00 01 AC 50 
0a193     00 00 FE 40 
0a197     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
0a19b     00 01 C5 90 
0a19f     00 00 D6 50 
0a1a3     00 00 00 00 
0a1a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a1ab     00 01 C5 90 
0a1af     00 00 00 00 
0a1b3     00 00 FE 40 
0a1b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
0a1bb     00 01 C5 90 
0a1bf     00 00 00 00 
0a1c3     00 00 00 00 
0a1c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a1cb     00 01 C5 90 
0a1cf     00 00 00 00 
0a1d3     00 00 FE 40 
0a1d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
0a1db     00 01 C5 90 
0a1df     00 00 D6 50 
0a1e3     00 00 FE 40 
0a1e7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
0a1eb     00 01 C5 90 
0a1ef     00 00 D6 50 
0a1f3     00 01 0D 40 
0a1f7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d, $40, $00, $00, $aa, $70
0a1fb     00 01 C5 90 
0a1ff     00 00 D6 50 
0a203     00 01 2E 40 
0a207     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a20b     00 01 C5 90 
0a20f     00 00 D6 50 
0a213     00 01 0D 40 
0a217     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d, $40, $00, $00, $aa, $70
0a21b     00 02 5C 90 
0a21f     00 01 AC 60 
0a223     00 01 2E 40 
0a227     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e, $40, $00, $00, $aa, $70
0a22b     00 02 5C 90 
0a22f     00 00 00 00 
0a233     00 00 00 00 
0a237     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a23b     00 02 5C 90 
0a23f     00 00 00 00 
0a243     00 01 2E 40 
0a247     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a24b     00 02 5C 90 
0a24f     00 00 00 00 
0a253     00 00 00 00 
0a257     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a25b     00 02 5C 90 
0a25f     00 00 D6 50 
0a263     00 00 00 00 
0a267     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a26b     00 02 5C 90 
0a26f     00 00 00 00 
0a273     00 00 00 00 
0a277     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a27b     00 02 5C 90 
0a27f     00 00 00 00 
0a283     00 00 00 00 
0a287     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a28b     00 02 5C 90 
0a28f     00 00 00 00 
0a293     00 00 AA 40 
0a297     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa, $40, $00, $00, $aa, $70
0a29b     00 02 5C 90 
0a29f     00 00 D6 50 
0a2a3     00 00 AA 40 
0a2a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa, $40, $00, $00, $aa, $70
0a2ab     00 02 5C 90 
0a2af     00 00 00 00 
0a2b3     00 00 00 00 
0a2b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a2bb     00 02 5C 90 
0a2bf     00 00 00 00 
0a2c3     00 00 97 40 
0a2c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a2cb     00 02 5C 90 
0a2cf     00 00 00 00 
0a2d3     00 00 00 00 
0a2d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a2db     00 02 5C 90 
0a2df     00 00 D6 50 
0a2e3     00 00 00 00 
0a2e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a2eb     00 02 5C 90 
0a2ef     00 00 D6 50 
0a2f3     00 00 00 00 
0a2f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a2fb     00 02 5C 90 
0a2ff     00 00 D6 50 
0a303     00 00 00 00 
0a307     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a30b     00 02 5C 90 
0a30f     00 00 D6 50 
0a313     00 00 AA 40 
0a317     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa, $40, $00, $00, $aa, $70
0a31b     00 02 5C 90 
0a31f     00 01 AC 60 
0a323     00 00 AA 40 
0a327     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $aa, $40, $00, $00, $aa, $70
0a32b     00 02 5C 90 
0a32f     00 00 00 00 
0a333     00 00 00 00 
0a337     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a33b     00 02 5C 90 
0a33f     00 00 00 00 
0a343     00 00 97 40 
0a347     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a34b     00 02 5C 90 
0a34f     00 00 00 00 
0a353     00 00 00 00 
0a357     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a35b     00 02 5C 90 
0a35f     00 00 D6 50 
0a363     00 00 00 00 
0a367     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a36b     00 02 5C 90 
0a36f     00 00 00 00 
0a373     00 00 AA 40 
0a377     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa, $40, $00, $00, $aa, $70
0a37b     00 02 5C 90 
0a37f     00 00 00 00 
0a383     00 00 97 40 
0a387     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a38b     00 02 5C 90 
0a38f     00 00 00 00 
0a393     00 00 7F 40 
0a397     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a39b     00 01 C5 90 
0a39f     00 00 D6 50 
0a3a3     00 00 7F 40 
0a3a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3ab     00 01 C5 90 
0a3af     00 00 00 00 
0a3b3     00 00 7F 40 
0a3b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3bb     00 01 C5 90 
0a3bf     00 00 00 00 
0a3c3     00 00 7F 40 
0a3c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3cb     00 01 C5 90 
0a3cf     00 00 00 00 
0a3d3     00 00 7F 40 
0a3d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3db     00 01 C5 90 
0a3df     00 00 D6 50 
0a3e3     00 00 7F 40 
0a3e7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3eb     00 01 C5 90 
0a3ef     00 00 00 00 
0a3f3     00 00 87 40 
0a3f7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87, $40, $00, $00, $aa, $70
0a3fb     00 01 C5 90 
0a3ff     00 00 00 00 
0a403     00 00 97 40 
0a407     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a40b     00 01 C5 90 
0a40f     00 00 00 00 
0a413     00 00 7F 40 
0a417     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a41b     00 01 C5 90 
0a41f     00 00 D6 50 
0a423     00 00 7F 40 
0a427     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a42b     00 01 C5 90 
0a42f     00 00 00 00 
0a433     00 00 7F 40 
0a437     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a43b     00 01 C5 90 
0a43f     00 00 00 00 
0a443     00 00 7F 40 
0a447     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a44b     00 01 C5 90 
0a44f     00 00 00 00 
0a453     00 00 7F 40 
0a457     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a45b     00 01 C5 90 
0a45f     00 00 D6 50 
0a463     00 00 7F 40 
0a467     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a46b     00 01 C5 90 
0a46f     00 00 00 00 
0a473     00 00 87 40 
0a477     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87, $40, $00, $00, $aa, $70
0a47b     00 01 C5 90 
0a47f     00 00 00 00 
0a483     00 00 97 40 
0a487     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a48b     00 01 C5 90 
0a48f     00 00 00 00 
0a493     00 00 7F 40 
0a497     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a49b     00 01 C5 90 
0a49f     00 00 D6 50 
0a4a3     00 00 7F 40 
0a4a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4ab     00 01 C5 90 
0a4af     00 00 00 00 
0a4b3     00 00 7F 40 
0a4b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4bb     00 01 C5 90 
0a4bf     00 00 00 00 
0a4c3     00 00 7F 40 
0a4c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4cb     00 01 C5 90 
0a4cf     00 00 00 00 
0a4d3     00 00 7F 40 
0a4d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4db     00 01 C5 90 
0a4df     00 00 D6 50 
0a4e3     00 00 00 00 
0a4e7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a4eb     00 00 00 00 
0a4ef     00 00 00 00 
0a4f3     00 00       | 	byte	$00[10]
0a4f5     7F 40 00 00 
0a4f9     AA 70 00 01 
0a4fd     C5 90 00 00 
0a501     D6 50 00 00 | 	byte	$7f, $40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00
0a505     00 00 00 00 
0a509     AA 70 00 00 
0a50d     00 00 00 00 
0a511     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a515     00 00 00 00 
0a519     AA 70 00 01 
0a51d     C5 90 00 00 
0a521     D6 50 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00
0a525     00 00 00 00 
0a529     AA 70 00 00 
0a52d     00 00 00 00 
0a531     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a535     7F 40 00 00 
0a539     AA 70 00 00 
0a53d     00 00 00 01 
0a541     1D 60 00 00 | 	byte	$7f, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $1d, $60, $00, $00
0a545     00 00 00 00 
0a549     AA 70 00 00 
0a54d     00 00 00 00 
0a551     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a555     87 40 00 00 
0a559     AA 70 00 00 
0a55d     00 00 00 01 
0a561     53 60 00 00 | 	byte	$87, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $53, $60, $00, $00
0a565     97 40 00 00 
0a569     AA 70 00 00 
0a56d     00 00 00 00 
0a571     D6 60 00 00 | 	byte	$97, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $d6, $60, $00, $00
0a575     00 00 00 00 
0a579     AA 70 00 00 
0a57d     00 00 00 01 
0a581     AC 60 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
0a585     00 00 00 00 
0a589     AA 70 00 00 
0a58d     00 00 00 00 
0a591     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a595     00 00 00 00 
0a599     00 00       | 	byte	$00[6]
0a59b     38 00 00 00 
0a59f     00 00 00 00 
0a5a3     00 00 00 00 
0a5a7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5ab     38 00 00 00 
0a5af     00 00 00 00 
0a5b3     00 00 00 00 
0a5b7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5bb     38 00 00 00 
0a5bf     00 00 00 00 
0a5c3     00 00 00 00 
0a5c7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5cb     38 00 00 00 
0a5cf     00 00 00 00 
0a5d3     00 00 00 00 
0a5d7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5db     38 00 00 00 
0a5df     00 00 00 00 
0a5e3     00 00 00 00 
0a5e7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5eb     38 00 00 00 
0a5ef     00 00 00 00 
0a5f3     00 00 00 00 
0a5f7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5fb     38 00 00 00 
0a5ff     00 00 00 00 
0a603     00 00 00 00 
0a607     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a60b     38 00 00 00 
0a60f     00 00 00 00 
0a613     00 00 00 00 
0a617     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a61b     38 00 00 00 
0a61f     00 00 00 00 
0a623     00 00 00 00 
0a627     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a62b     38 00 00 00 
0a62f     00 00 00 00 
0a633     00 00 00 00 
0a637     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a63b     38 00 00 00 
0a63f     00 00 00 00 
0a643     00 00 00 00 
0a647     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a64b     38 00 00 00 
0a64f     00 00 00 00 
0a653     00 00 00 00 
0a657     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a65b     38 00 00 00 
0a65f     00 00 00 00 
0a663     00 00 00 00 
0a667     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a66b     38 00 00 00 
0a66f     00 00 00 00 
0a673     00 00 00 00 
0a677     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a67b     38 00 00 00 
0a67f     00 00 00 00 
0a683     00 00 00 00 
0a687     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a68b     38 00 00 00 
0a68f     00 00 00 00 
0a693     00 02 A6 20 
0a697     00 00 AA 70 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a69b     00 02 5C 90 
0a69f     00 00 D6 50 
0a6a3     00 02 5C 20 
0a6a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a6ab     00 02 5C 90 
0a6af     00 00 00 00 
0a6b3     00 00 00 00 
0a6b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a6bb     00 02 5C 90 
0a6bf     00 00 00 00 
0a6c3     00 02 5C 20 
0a6c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a6cb     00 02 5C 90 
0a6cf     00 00 00 00 
0a6d3     00 02 5C 20 
0a6d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a6db     00 02 5C 90 
0a6df     00 00 D6 50 
0a6e3     00 00 00 00 
0a6e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a6eb     00 02 5C 90 
0a6ef     00 00 D6 50 
0a6f3     00 02 5C 20 
0a6f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a6fb     00 02 5C 90 
0a6ff     00 00 D6 50 
0a703     00 02 5C 20 
0a707     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a70b     00 02 5C 90 
0a70f     00 00 D6 50 
0a713     00 02 A6 20 
0a717     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0a71b     00 02 5C 90 
0a71f     00 01 AC 60 
0a723     00 02 5C 20 
0a727     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0a72b     00 02 5C 90 
0a72f     00 00 00 00 
0a733     00 00 00 00 
0a737     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a73b     00 02 5C 90 
0a73f     00 00 00 00 
0a743     00 02 5C 20 
0a747     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a74b     00 02 5C 90 
0a74f     00 00 00 00 
0a753     00 02 5C 20 
0a757     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a75b     00 02 5C 90 
0a75f     00 00 D6 50 
0a763     00 00 00 00 
0a767     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a76b     00 02 5C 90 
0a76f     00 00 00 00 
0a773     00 02 5C 20 
0a777     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a77b     00 02 5C 90 
0a77f     00 00 00 00 
0a783     00 02 5C 20 
0a787     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a78b     00 02 5C 90 
0a78f     00 00 00 00 
0a793     00 01 C5 20 
0a797     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a79b     00 01 C5 90 
0a79f     00 00 D6 50 
0a7a3     00 00 00 00 
0a7a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a7ab     00 01 C5 90 
0a7af     00 00 D6 50 
0a7b3     00 01 C5 20 
0a7b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a7bb     00 01 C5 90 
0a7bf     00 00 D6 50 
0a7c3     00 01 C5 20 
0a7c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a7cb     00 01 C5 90 
0a7cf     00 00 D6 50 
0a7d3     00 01 C5 20 
0a7d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a7db     00 01 C5 90 
0a7df     00 01 AC 60 
0a7e3     00 00 00 00 
0a7e7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a7eb     00 01 C5 90 
0a7ef     00 00 00 00 
0a7f3     00 01 C5 20 
0a7f7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a7fb     00 01 C5 90 
0a7ff     00 00 00 00 
0a803     00 01 C5 20 
0a807     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a80b     00 01 C5 90 
0a80f     00 00 00 00 
0a813     00 02 A6 20 
0a817     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a81b     00 02 5C 90 
0a81f     00 00 D6 50 
0a823     00 00 00 00 
0a827     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a82b     00 02 5C 90 
0a82f     00 00 D6 50 
0a833     00 02 5C 20 
0a837     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a83b     00 02 5C 90 
0a83f     00 00 D6 50 
0a843     00 02 5C 20 
0a847     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a84b     00 02 5C 90 
0a84f     00 00 D6 50 
0a853     00 02 5C 20 
0a857     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a85b     00 02 5C 90 
0a85f     00 01 AC 60 
0a863     00 00 00 00 
0a867     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a86b     00 02 5C 90 
0a86f     00 00 00 00 
0a873     00 02 5C 20 
0a877     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a87b     00 02 5C 90 
0a87f     00 00 00 00 
0a883     00 02 5C 20 
0a887     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a88b     00 02 5C 90 
0a88f     00 00 00 00 
0a893     00 02 A6 20 
0a897     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a89b     00 02 5C 90 
0a89f     00 00 D6 50 
0a8a3     00 02 5C 20 
0a8a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8ab     00 02 5C 90 
0a8af     00 00 00 00 
0a8b3     00 00 00 00 
0a8b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a8bb     00 02 5C 90 
0a8bf     00 00 00 00 
0a8c3     00 02 5C 20 
0a8c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8cb     00 02 5C 90 
0a8cf     00 00 00 00 
0a8d3     00 02 5C 20 
0a8d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8db     00 02 5C 90 
0a8df     00 00 D6 50 
0a8e3     00 00 00 00 
0a8e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a8eb     00 02 5C 90 
0a8ef     00 00 D6 50 
0a8f3     00 02 5C 20 
0a8f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8fb     00 02 5C 90 
0a8ff     00 00 D6 50 
0a903     00 02 5C 20 
0a907     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a90b     00 02 5C 90 
0a90f     00 00 D6 50 
0a913     00 02 A6 20 
0a917     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0a91b     00 02 5C 90 
0a91f     00 01 AC 60 
0a923     00 02 5C 20 
0a927     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0a92b     00 02 5C 90 
0a92f     00 00 00 00 
0a933     00 00 00 00 
0a937     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a93b     00 02 5C 90 
0a93f     00 00 00 00 
0a943     00 02 5C 20 
0a947     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a94b     00 02 5C 90 
0a94f     00 00 00 00 
0a953     00 02 5C 20 
0a957     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a95b     00 02 5C 90 
0a95f     00 00 D6 50 
0a963     00 00 00 00 
0a967     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a96b     00 02 5C 90 
0a96f     00 00 00 00 
0a973     00 02 5C 20 
0a977     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a97b     00 02 5C 90 
0a97f     00 01 AC 60 
0a983     00 02 5C 20 
0a987     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0a98b     00 02 5C 90 
0a98f     00 01 AC 60 
0a993     00 01 C5 20 
0a997     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $c5, $20, $00, $00, $aa, $70
0a99b     00 01 C5 90 
0a99f     00 00 D6 50 
0a9a3     00 00 00 00 
0a9a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a9ab     00 01 C5 90 
0a9af     00 00 00 00 
0a9b3     00 01 C5 20 
0a9b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a9bb     00 01 C5 90 
0a9bf     00 00 00 00 
0a9c3     00 01 C5 20 
0a9c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a9cb     00 01 C5 90 
0a9cf     00 00 00 00 
0a9d3     00 01 C5 20 
0a9d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a9db     00 01 C5 90 
0a9df     00 00 D6 50 
0a9e3     00 00 00 00 
0a9e7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a9eb     00 01 C5 90 
0a9ef     00 00 D6 50 
0a9f3     00 01 C5 20 
0a9f7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a9fb     00 01 C5 90 
0a9ff     00 00 D6 50 
0aa03     00 01 C5 20 
0aa07     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0aa0b     00 01 C5 90 
0aa0f     00 00 D6 50 
0aa13     00 02 A6 20 
0aa17     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0aa1b     00 02 5C 90 
0aa1f     00 01 AC 60 
0aa23     00 00 00 00 
0aa27     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0aa2b     00 02 5C 90 
0aa2f     00 00 00 00 
0aa33     00 02 5C 20 
0aa37     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa3b     00 02 5C 90 
0aa3f     00 00 00 00 
0aa43     00 02 5C 20 
0aa47     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa4b     00 02 5C 90 
0aa4f     00 00 00 00 
0aa53     00 02 5C 20 
0aa57     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa5b     00 02 5C 90 
0aa5f     00 00 D6 50 
0aa63     00 00 00 00 
0aa67     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aa6b     00 02 5C 90 
0aa6f     00 00 00 00 
0aa73     00 02 5C 20 
0aa77     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa7b     00 02 5C 90 
0aa7f     00 00 00 00 
0aa83     00 02 5C 20 
0aa87     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa8b     00 02 5C 90 
0aa8f     00 00 00 00 
0aa93     00 02 A6 20 
0aa97     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0aa9b     00 02 5C 90 
0aa9f     00 00 D6 50 
0aaa3     00 02 5C 20 
0aaa7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0aaab     00 02 5C 90 
0aaaf     00 00 00 00 
0aab3     00 00 00 00 
0aab7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0aabb     00 02 5C 90 
0aabf     00 00 00 00 
0aac3     00 02 5C 20 
0aac7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aacb     00 02 5C 90 
0aacf     00 00 00 00 
0aad3     00 02 5C 20 
0aad7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aadb     00 02 5C 90 
0aadf     00 00 D6 50 
0aae3     00 00 00 00 
0aae7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aaeb     00 02 5C 90 
0aaef     00 00 D6 50 
0aaf3     00 02 5C 20 
0aaf7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0aafb     00 02 5C 90 
0aaff     00 00 D6 50 
0ab03     00 02 5C 20 
0ab07     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab0b     00 02 5C 90 
0ab0f     00 00 D6 50 
0ab13     00 02 A6 20 
0ab17     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0ab1b     00 02 5C 90 
0ab1f     00 01 AC 60 
0ab23     00 02 5C 20 
0ab27     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab2b     00 02 5C 90 
0ab2f     00 00 00 00 
0ab33     00 00 00 00 
0ab37     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0ab3b     00 02 5C 90 
0ab3f     00 00 00 00 
0ab43     00 02 5C 20 
0ab47     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab4b     00 02 5C 90 
0ab4f     00 00 00 00 
0ab53     00 02 5C 20 
0ab57     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab5b     00 02 5C 90 
0ab5f     00 00 D6 50 
0ab63     00 00 00 00 
0ab67     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ab6b     00 02 5C 90 
0ab6f     00 00 00 00 
0ab73     00 02 5C 20 
0ab77     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab7b     00 02 5C 90 
0ab7f     00 00 00 00 
0ab83     00 02 5C 20 
0ab87     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab8b     00 02 5C 90 
0ab8f     00 00 00 00 
0ab93     00 01 C5 20 
0ab97     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ab9b     00 01 C5 90 
0ab9f     00 00 D6 50 
0aba3     00 00 00 00 
0aba7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0abab     00 01 C5 90 
0abaf     00 00 00 00 
0abb3     00 01 C5 20 
0abb7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0abbb     00 01 C5 90 
0abbf     00 00 00 00 
0abc3     00 01 C5 20 
0abc7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0abcb     00 01 C5 90 
0abcf     00 00 00 00 
0abd3     00 01 C5 20 
0abd7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0abdb     00 01 C5 90 
0abdf     00 00 D6 50 
0abe3     00 00 00 00 
0abe7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0abeb     00 01 C5 90 
0abef     00 00 00 00 
0abf3     00 01 C5 20 
0abf7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0abfb     00 01 C5 90 
0abff     00 00 00 00 
0ac03     00 01 C5 20 
0ac07     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac0b     00 01 C5 90 
0ac0f     00 00 00 00 
0ac13     00 01 C5 20 
0ac17     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac1b     00 01 C5 90 
0ac1f     00 00 D6 50 
0ac23     00 00 00 00 
0ac27     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ac2b     00 01 C5 90 
0ac2f     00 00 00 00 
0ac33     00 01 C5 20 
0ac37     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac3b     00 01 C5 90 
0ac3f     00 00 00 00 
0ac43     00 01 C5 20 
0ac47     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac4b     00 01 C5 90 
0ac4f     00 00 00 00 
0ac53     00 01 C5 20 
0ac57     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac5b     00 01 C5 90 
0ac5f     00 00 D6 50 
0ac63     00 00 00 00 
0ac67     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ac6b     00 01 C5 90 
0ac6f     00 00 00 00 
0ac73     00 01 C5 20 
0ac77     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac7b     00 01 C5 90 
0ac7f     00 00 00 00 
0ac83     00 01 C5 20 
0ac87     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac8b     00 01 C5 90 
0ac8f     00 00 00 00 
0ac93     00 01 C5 20 
0ac97     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac9b     00 01 C5 90 
0ac9f     00 00 D6 50 
0aca3     00 00 00 00 
0aca7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0acab     00 00 00 00 
0acaf     00 00 00 00 
0acb3     00          | 	byte	$00[9]
0acb4     01 C5 20 00 
0acb8     00 AA 70 00 
0acbc     00 00 00 00 
0acc0     00 00 00 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00
0acc4     01 C5 20 00 
0acc8     00 AA 70 00 
0accc     01 C5 90 00 
0acd0     00 D6 50 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00
0acd4     01 C5 20 00 
0acd8     00 AA 70 00 
0acdc     01 C5 90 00 
0ace0     00 D6 50 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00
0ace4     00 00 00 00 
0ace8     00          | 	byte	$00[5]
0ace9     AA 70 00 01 
0aced     C5 90 00 00 
0acf1     D6 50 00 00 
0acf5     FE 20 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $20, $00, $00
0acf9     AA 70 00 00 
0acfd     00 00 00 00 
0ad01     00 00 00 00 
0ad05     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad09     AA 70 00 01 
0ad0d     C5 90 00 00 
0ad11     D6 50 00 00 
0ad15     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00
0ad19     AA 70 00 00 
0ad1d     00 00 00 00 
0ad21     00 00 00 00 
0ad25     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad29     AA 70 00 00 
0ad2d     00 00 00 00 
0ad31     00 00 00 00 
0ad35     FE 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00
0ad39     AA 70 00 00 
0ad3d     00 00 00 00 
0ad41     00 00 00 00 
0ad45     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad49     AA 70 00 00 
0ad4d     00 00 00 00 
0ad51     00 00 00 01 
0ad55     0D 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $0d, $20, $00, $00
0ad59     AA 70 00 00 
0ad5d     00 00 00 00 
0ad61     00 00 00 01 
0ad65     2E 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $20, $00, $00
0ad69     AA 70 00 00 
0ad6d     00 00 00 00 
0ad71     00 00 00 00 
0ad75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad79     AA 70 00 00 
0ad7d     00 00 00 00 
0ad81     00 00 00 00 
0ad85     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad89     AA 70 00 00 
0ad8d     00 00 00 00 
0ad91     00 00 00 03 
0ad95     28 10 38 03 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $28, $10, $38, $03
0ad99     28 10 38 01 
0ad9d     FC 30 00 01 
0ada1     AC 50 00 00 
0ada5     00 00 38 00 | 	byte	$28, $10, $38, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0ada9     00 00 38 00 
0adad     00 00 00 00 
0adb1     AA 70 00 00 
0adb5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0adb9     00 00 38 00 
0adbd     00 00 00 00 
0adc1     AA 70 00 00 
0adc5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0adc9     00 00 38 00 
0adcd     00 00 00 00 
0add1     AA 70 00 00 
0add5     00 00 38 03 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $03
0add9     28 10 38 01 
0addd     94 30 00 01 
0ade1     1D 60 00 00 
0ade5     00 00 38 00 | 	byte	$28, $10, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0ade9     00 00 38 00 
0aded     00 00 00 00 
0adf1     AA 70 00 00 
0adf5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0adf9     00 00 38 00 
0adfd     00 00 00 00 
0ae01     AA 70 00 00 
0ae05     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0ae09     00 00 38 00 
0ae0d     00 00 00 00 
0ae11     AA 70 00 02 
0ae15     A6 10 59 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $a6, $10, $59, $02
0ae19     A6 10 59 01 
0ae1d     53 30 00 01 
0ae21     AC 50 00 00 
0ae25     00 00 59 00 | 	byte	$a6, $10, $59, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $59, $00
0ae29     00 00 59 00 
0ae2d     00 00 00 00 
0ae31     AA 70 00 00 
0ae35     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0ae39     00 00 59 00 
0ae3d     00 00 00 00 
0ae41     AA 70 00 00 
0ae45     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0ae49     00 00 59 00 
0ae4d     00 00 00 00 
0ae51     AA 70 00 00 
0ae55     00 00 59 02 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $02
0ae59     A6 10 59 01 
0ae5d     2E 30 00 01 
0ae61     1D 60 00 00 
0ae65     00 00 59 00 | 	byte	$a6, $10, $59, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $59, $00
0ae69     00 00 59 00 
0ae6d     00 00 00 00 
0ae71     AA 70 00 00 
0ae75     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0ae79     00 00 59 01 
0ae7d     53 30 00 00 
0ae81     AA 70 00 00 
0ae85     00 00 59 00 | 	byte	$00, $00, $59, $01, $53, $30, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0ae89     00 00 59 00 
0ae8d     00 00 00 00 
0ae91     AA 70 00 01 
0ae95     FC 10 47 01 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $10, $47, $01
0ae99     FC 10 47 01 
0ae9d     FC 30 00 01 
0aea1     AC 50 00 00 
0aea5     00 00 47 00 | 	byte	$fc, $10, $47, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $47, $00
0aea9     00 00 47 00 
0aead     00 00 00 00 
0aeb1     AA 70 00 00 
0aeb5     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0aeb9     00 00 47 00 
0aebd     00 00 00 00 
0aec1     AA 70 00 00 
0aec5     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0aec9     00 00 47 00 
0aecd     00 00 00 00 
0aed1     AA 70 00 00 
0aed5     00 00 47 01 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $01
0aed9     FC 10 47 01 
0aedd     94 30 00 01 
0aee1     1D 60 00 00 
0aee5     00 00 47 00 | 	byte	$fc, $10, $47, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $47, $00
0aee9     00 00 47 00 
0aeed     00 00 00 00 
0aef1     AA 70 00 00 
0aef5     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0aef9     00 00 47 00 
0aefd     00 00 00 00 
0af01     AA 70 00 00 
0af05     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0af09     00 00 47 00 
0af0d     00 00 00 00 
0af11     AA 70 00 01 
0af15     94 10 38 01 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $10, $38, $01
0af19     94 10 38 01 
0af1d     53 30 00 01 
0af21     AC 50 00 00 
0af25     00 00 38 00 | 	byte	$94, $10, $38, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0af29     00 00 38 00 
0af2d     00 00 00 00 
0af31     AA 70 00 00 
0af35     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0af39     00 00 38 00 
0af3d     00 00 00 00 
0af41     AA 70 00 00 
0af45     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0af49     00 00 38 00 
0af4d     00 00 00 00 
0af51     AA 70 00 00 
0af55     00 00 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $01
0af59     94 10 38 01 
0af5d     2E 30 00 01 
0af61     1D 60 00 00 
0af65     00 00 38 00 | 	byte	$94, $10, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0af69     00 00 38 00 
0af6d     00 00 00 00 
0af71     AA 70 00 00 
0af75     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0af79     00 00 38 01 
0af7d     53 30 00 01 
0af81     1D 60 00 00 
0af85     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0af89     00 00 38 00 
0af8d     00 00 00 01 
0af91     1D 60 00 01 
0af95     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $e0, $10, $38, $01
0af99     E0 10 38 01 
0af9d     2E 30 00 01 
0afa1     AC 50 00 00 
0afa5     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0afa9     00 00 38 00 
0afad     00 00 00 00 
0afb1     AA 70 00 00 
0afb5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0afb9     00 00 38 00 
0afbd     00 00 00 00 
0afc1     AA 70 00 00 
0afc5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0afc9     00 00 38 00 
0afcd     00 00 00 00 
0afd1     AA 70 00 00 
0afd5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0afd9     00 00 38 01 
0afdd     2E 30 00 01 
0afe1     1D 60 00 00 
0afe5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0afe9     00 00 38 00 
0afed     00 00 00 00 
0aff1     AA 70 00 00 
0aff5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0aff9     00 00 38 00 
0affd     00 00 00 00 
0b001     AA 70 00 00 
0b005     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b009     00 00 38 00 
0b00d     00 00 00 00 
0b011     AA 70 00 00 
0b015     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b019     00 00 38 01 
0b01d     2E 30 00 01 
0b021     AC 50 00 00 
0b025     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b029     00 00 38 00 
0b02d     00 00 00 00 
0b031     AA 70 00 00 
0b035     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b039     00 00 38 00 
0b03d     00 00 00 01 
0b041     AC 50 00 00 
0b045     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b049     00 00 38 00 
0b04d     00 00 00 00 
0b051     AA 70 00 00 
0b055     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b059     00 00 38 01 
0b05d     2E 30 00 01 
0b061     1D 60 00 00 
0b065     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b069     00 00 38 00 
0b06d     00 00 00 00 
0b071     AA 70 00 00 
0b075     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b079     00 00 38 00 
0b07d     00 00 00 00 
0b081     AA 70 00 00 
0b085     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b089     00 00 38 00 
0b08d     00 00 00 00 
0b091     AA 70 00 01 
0b095     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $e0, $10, $38, $01
0b099     E0 10 38 01 
0b09d     2E 30 00 01 
0b0a1     AC 50 00 00 
0b0a5     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b0a9     00 00 38 00 
0b0ad     00 00 00 00 
0b0b1     AA 70 00 00 
0b0b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0b9     00 00 38 00 
0b0bd     00 00 00 00 
0b0c1     AA 70 00 00 
0b0c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0c9     00 00 38 00 
0b0cd     00 00 00 00 
0b0d1     AA 70 00 00 
0b0d5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0d9     00 00 38 01 
0b0dd     2E 30 00 01 
0b0e1     1D 60 00 00 
0b0e5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b0e9     00 00 38 00 
0b0ed     00 00 00 00 
0b0f1     AA 70 00 00 
0b0f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0f9     00 00 38 00 
0b0fd     00 00 00 00 
0b101     AA 70 00 00 
0b105     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b109     00 00 38 00 
0b10d     00 00 00 00 
0b111     AA 70 00 00 
0b115     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b119     00 00 38 01 
0b11d     2E 30 00 01 
0b121     AC 50 00 00 
0b125     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b129     00 00 38 00 
0b12d     00 00 00 00 
0b131     AA 70 00 00 
0b135     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b139     00 00 38 00 
0b13d     00 00 00 01 
0b141     AC 50 00 00 
0b145     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b149     00 00 38 00 
0b14d     00 00 00 00 
0b151     AA 70 00 00 
0b155     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b159     00 00 38 01 
0b15d     2E 30 00 01 
0b161     1D 60 00 00 
0b165     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b169     00 00 38 00 
0b16d     00 00 00 01 
0b171     1D 60 00 00 
0b175     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b179     00 00 38 00 
0b17d     00 00 00 00 
0b181     AA 70 00 00 
0b185     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b189     00 00 38 00 
0b18d     00 00 00 01 
0b191     1D 60 00 01 
0b195     94 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $94, $10, $38, $01
0b199     94 10 38 01 
0b19d     FC 30 00 01 
0b1a1     AC 50 00 00 
0b1a5     00 00 38 00 | 	byte	$94, $10, $38, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b1a9     00 00 38 00 
0b1ad     00 00 00 00 
0b1b1     AA 70 00 00 
0b1b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1b9     00 00 38 00 
0b1bd     00 00 00 00 
0b1c1     AA 70 00 00 
0b1c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1c9     00 00 38 00 
0b1cd     00 00 00 00 
0b1d1     AA 70 00 00 
0b1d5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1d9     00 00 38 01 
0b1dd     94 30 00 01 
0b1e1     1D 60 00 00 
0b1e5     00 00 38 00 | 	byte	$00, $00, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b1e9     00 00 38 00 
0b1ed     00 00 00 00 
0b1f1     AA 70 00 00 
0b1f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1f9     00 00 38 00 
0b1fd     00 00 00 00 
0b201     AA 70 00 00 
0b205     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b209     00 00 38 00 
0b20d     00 00 00 00 
0b211     AA 70 00 00 
0b215     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b219     00 00 38 01 
0b21d     53 30 00 01 
0b221     AC 50 00 00 
0b225     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b229     00 00 38 00 
0b22d     00 00 00 00 
0b231     AA 70 00 00 
0b235     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b239     00 00 38 00 
0b23d     00 00 00 00 
0b241     AA 70 00 00 
0b245     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b249     00 00 38 00 
0b24d     00 00 00 00 
0b251     AA 70 00 00 
0b255     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b259     00 00 38 01 
0b25d     94 30 00 01 
0b261     1D 60 00 00 
0b265     00 00 38 00 | 	byte	$00, $00, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b269     00 00 38 00 
0b26d     00 00 00 00 
0b271     AA 70 00 00 
0b275     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b279     00 00 38 01 
0b27d     53 30 00 00 
0b281     AA 70 00 00 
0b285     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b289     00 00 38 00 
0b28d     00 00 00 00 
0b291     AA 70 00 01 
0b295     68 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $68, $10, $38, $01
0b299     68 10 38 01 
0b29d     C5 30 00 01 
0b2a1     AC 50 00 00 
0b2a5     00 00 38 00 | 	byte	$68, $10, $38, $01, $c5, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b2a9     00 00 38 00 
0b2ad     00 00 00 00 
0b2b1     AA 70 00 00 
0b2b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2b9     00 00 38 00 
0b2bd     00 00 00 00 
0b2c1     AA 70 00 00 
0b2c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2c9     00 00 38 00 
0b2cd     00 00 00 00 
0b2d1     AA 70 00 00 
0b2d5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2d9     00 00 38 01 
0b2dd     68 30 00 01 
0b2e1     1D 60 00 00 
0b2e5     00 00 38 00 | 	byte	$00, $00, $38, $01, $68, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b2e9     00 00 38 00 
0b2ed     00 00 00 00 
0b2f1     AA 70 00 00 
0b2f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2f9     00 00 38 00 
0b2fd     00 00 00 00 
0b301     AA 70 00 00 
0b305     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b309     00 00 38 00 
0b30d     00 00 00 00 
0b311     AA 70 00 00 
0b315     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b319     00 00 38 01 
0b31d     2E 30 00 01 
0b321     AC 50 00 00 
0b325     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b329     00 00 38 00 
0b32d     00 00 00 00 
0b331     AA 70 00 00 
0b335     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b339     00 00 38 00 
0b33d     00 00 00 00 
0b341     AA 70 00 00 
0b345     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b349     00 00 38 00 
0b34d     00 00 00 00 
0b351     AA 70 00 00 
0b355     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b359     00 00 38 01 
0b35d     68 30 00 01 
0b361     1D 60 00 00 
0b365     00 00 38 00 | 	byte	$00, $00, $38, $01, $68, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b369     00 00 38 00 
0b36d     00 00 00 00 
0b371     AA 70 00 00 
0b375     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b379     00 00 38 00 
0b37d     00 00 00 01 
0b381     1D 60 00 00 
0b385     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b389     00 00 38 00 
0b38d     00 00 00 01 
0b391     1D 60 00 02 
0b395     5C 10 38 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $02, $5c, $10, $38, $02
0b399     5C 10 38 01 
0b39d     7D 30 00 01 
0b3a1     AC 50 00 00 
0b3a5     00 00 38 00 | 	byte	$5c, $10, $38, $01, $7d, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b3a9     00 00 38 00 
0b3ad     00 00 00 00 
0b3b1     AA 70 00 00 
0b3b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3b9     00 00 38 00 
0b3bd     00 00 00 00 
0b3c1     AA 70 00 00 
0b3c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3c9     00 00 38 00 
0b3cd     00 00 00 00 
0b3d1     AA 70 00 00 
0b3d5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3d9     00 00 38 01 
0b3dd     2E 30 00 01 
0b3e1     1D 60 00 00 
0b3e5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b3e9     00 00 38 00 
0b3ed     00 00 00 00 
0b3f1     AA 70 00 00 
0b3f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3f9     00 00 38 00 
0b3fd     00 00 00 00 
0b401     AA 70 00 00 
0b405     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b409     00 00 38 00 
0b40d     00 00 00 00 
0b411     AA 70 00 02 
0b415     5C 10 49 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $5c, $10, $49, $02
0b419     5C 10 49 01 
0b41d     E0 30 00 01 
0b421     AC 50 00 00 
0b425     00 00 49 00 | 	byte	$5c, $10, $49, $01, $e0, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b429     00 00 49 00 
0b42d     00 00 00 00 
0b431     AA 70 00 00 
0b435     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b439     00 00 49 00 
0b43d     00 00 00 01 
0b441     AC 50 00 00 
0b445     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b449     00 00 49 00 
0b44d     00 00 00 00 
0b451     AA 70 00 00 
0b455     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b459     00 00 49 01 
0b45d     2E 30 00 01 
0b461     1D 60 00 00 
0b465     00 00 49 00 | 	byte	$00, $00, $49, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $49, $00
0b469     00 00 49 00 
0b46d     00 00 00 00 
0b471     AA 70 00 00 
0b475     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b479     00 00 49 00 
0b47d     00 00 00 00 
0b481     AA 70 00 00 
0b485     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b489     00 00 49 00 
0b48d     00 00 00 00 
0b491     AA 70 00 02 
0b495     3A 10 49 02 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $3a, $10, $49, $02
0b499     3A 10 49 01 
0b49d     53 30 00 01 
0b4a1     AC 50 00 00 
0b4a5     00 00 49 00 | 	byte	$3a, $10, $49, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b4a9     00 00 49 00 
0b4ad     00 00 00 00 
0b4b1     AA 70 00 00 
0b4b5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4b9     00 00 49 00 
0b4bd     00 00 00 00 
0b4c1     AA 70 00 00 
0b4c5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4c9     00 00 49 00 
0b4cd     00 00 00 00 
0b4d1     AA 70 00 00 
0b4d5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4d9     00 00 49 01 
0b4dd     53 30 00 01 
0b4e1     1D 60 00 00 
0b4e5     00 00 49 00 | 	byte	$00, $00, $49, $01, $53, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $49, $00
0b4e9     00 00 49 00 
0b4ed     00 00 00 00 
0b4f1     AA 70 00 00 
0b4f5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4f9     00 00 49 00 
0b4fd     00 00 00 00 
0b501     AA 70 00 00 
0b505     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b509     00 00 49 00 
0b50d     00 00 00 00 
0b511     AA 70 00 01 
0b515     FC 10 38 01 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $10, $38, $01
0b519     FC 10 38 01 
0b51d     40 30 00 01 
0b521     AC 50 00 00 
0b525     00 00 38 00 | 	byte	$fc, $10, $38, $01, $40, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b529     00 00 38 00 
0b52d     00 00 00 00 
0b531     AA 70 00 00 
0b535     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b539     00 00 38 00 
0b53d     00 00 00 01 
0b541     AC 50 00 00 
0b545     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b549     00 00 38 00 
0b54d     00 00 00 00 
0b551     AA 70 00 00 
0b555     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b559     00 00 38 01 
0b55d     40 30 00 01 
0b561     1D 60 00 00 
0b565     00 00 38 00 | 	byte	$00, $00, $38, $01, $40, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b569     00 00 38 00 
0b56d     00 00 00 01 
0b571     1D 60 00 00 
0b575     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b579     00 00 38 00 
0b57d     00 00 00 00 
0b581     AA 70 00 00 
0b585     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b589     00 00 38 00 
0b58d     00 00 00 01 
0b591     1D 60 00 01 
0b595     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $e0, $10, $38, $01
0b599     E0 10 38 01 
0b59d     2E 30 00 02 
0b5a1     80 60 00 00 
0b5a5     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $02, $80, $60, $00, $00, $00, $00, $38, $00
0b5a9     00 00 38 00 
0b5ad     00 00 00 00 
0b5b1     00 00 00 00 
0b5b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5b9     00 00 38 00 
0b5bd     00 00 00 00 
0b5c1     00 00 00 00 
0b5c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5c9     00 00 38 00 
0b5cd     00 00 00 00 
0b5d1     00 00 00 00 
0b5d5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5d9     00 00 38 00 
0b5dd     00 00 00 00 
0b5e1     00 00 00 00 
0b5e5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5e9     00 00 38 00 
0b5ed     00 00 00 00 
0b5f1     00 00 00 00 
0b5f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5f9     00 00 38 00 
0b5fd     00 00 00 00 
0b601     00 00 00 00 
0b605     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b609     00 00 38 00 
0b60d     00 00 00 00 
0b611     00 00 00 00 
0b615     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b619     00 00 38 00 
0b61d     00 00 00 00 
0b621     00 00 00 00 
0b625     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b629     00 00 38 00 
0b62d     00 00 00 00 
0b631     00 00 00 00 
0b635     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b639     00 00 38 00 
0b63d     00 00 00 00 
0b641     00 00 00 00 
0b645     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b649     00 00 38 00 
0b64d     00 00 00 00 
0b651     00 00 00 00 
0b655     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b659     00 00 38 00 
0b65d     00 00 00 00 
0b661     00 00 00 00 
0b665     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b669     00 00 38 00 
0b66d     00 00 00 00 
0b671     00 00 00 00 
0b675     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b679     00 00 38 00 
0b67d     00 00 00 00 
0b681     00 00 00 00 
0b685     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b689     00 00 38 00 
0b68d     00 00 00 00 
0b691     00 00 00 00 
0b695     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b699     00 00 38 00 
0b69d     00 00 00 00 
0b6a1     00 00 00 00 
0b6a5     00 0C 20 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $20, $00
0b6a9     00 0C 20 00 
0b6ad     00 00 00 00 
0b6b1     00 00 00 00 
0b6b5     00 0C 10 00 | 	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00
0b6b9     00 0C 10 00 
0b6bd     00 00 00 00 
0b6c1     00 00 00 00 
0b6c5     00 0C 00 00 | 	byte	$00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00
0b6c9     00 0C 00 00 
0b6cd     00 00 00 00 
0b6d1     00 00 00 00 
0b6d5     00 00 00 00 | 	byte	$00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6d9     00 00 00 00 
      ...             
0b78d     00 00 00 00 
0b791     00 00 00    | 	byte	$00[187]
0b794     02 A6 80 00 
0b798     00 AA 70 00 
0b79c     02 A6 90 00 
0b7a0     01 AC 50 00 | 	byte	$02, $a6, $80, $00, $00, $aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00
0b7a4     02 5C 80 00 
0b7a8     00 AA 70 00 
0b7ac     02 5C 90 00 
0b7b0     00 00 00 00 | 	byte	$02, $5c, $80, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00
0b7b4     00 00 00 00 
0b7b8     00          | 	byte	$00[5]
0b7b9     AA 70 00 00 
0b7bd     00 00 00 01 
0b7c1     AC 50 00 02 
0b7c5     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b7c9     AA 70 00 02 
0b7cd     5C 90 00 01 
0b7d1     AC 50 00 00 
0b7d5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b7d9     D6 70 00 00 
0b7dd     00 00 00 01 
0b7e1     AC 60 00 00 
0b7e5     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b7e9     AA 70 00 00 
0b7ed     00 00 00 00 
0b7f1     00 00 00 00 
0b7f5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7f9     AA 70 00 00 
0b7fd     00 00 00 01 
0b801     AC 50 00 00 
0b805     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b809     AA 70 00 00 
0b80d     00 00 00 00 
0b811     00 00 00 02 
0b815     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0b819     AA 70 00 02 
0b81d     A6 90 00 01 
0b821     AC 50 00 02 
0b825     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b829     AA 70 00 02 
0b82d     5C 90 00 00 
0b831     00 00 00 00 
0b835     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b839     AA 70 00 00 
0b83d     00 00 00 01 
0b841     AC 50 00 02 
0b845     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b849     AA 70 00 02 
0b84d     5C 90 00 01 
0b851     AC 50 00 00 
0b855     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b859     D6 70 00 00 
0b85d     00 00 00 01 
0b861     AC 60 00 00 
0b865     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b869     AA 70 00 00 
0b86d     00 00 00 00 
0b871     00 00 00 00 
0b875     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b879     AA 70 00 00 
0b87d     00 00 00 01 
0b881     AC 50 00 00 
0b885     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b889     AA 70 00 00 
0b88d     00 00 00 00 
0b891     00 00 00 01 
0b895     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0b899     AA 70 00 01 
0b89d     FC 90 00 01 
0b8a1     AC 50 00 01 
0b8a5     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0b8a9     AA 70 00 01 
0b8ad     C5 90 00 00 
0b8b1     00 00 00 00 
0b8b5     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8b9     AA 70 00 00 
0b8bd     00 00 00 01 
0b8c1     AC 50 00 01 
0b8c5     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0b8c9     AA 70 00 01 
0b8cd     C5 90 00 01 
0b8d1     AC 50 00 00 
0b8d5     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b8d9     D6 70 00 00 
0b8dd     00 00 00 01 
0b8e1     AC 60 00 00 
0b8e5     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b8e9     AA 70 00 00 
0b8ed     00 00 00 00 
0b8f1     00 00 00 00 
0b8f5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8f9     AA 70 00 00 
0b8fd     00 00 00 01 
0b901     AC 50 00 00 
0b905     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b909     AA 70 00 00 
0b90d     00 00 00 00 
0b911     00 00 00 02 
0b915     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0b919     AA 70 00 02 
0b91d     A6 90 00 01 
0b921     AC 50 00 02 
0b925     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b929     AA 70 00 02 
0b92d     5C 90 00 00 
0b931     00 00 00 00 
0b935     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b939     AA 70 00 00 
0b93d     00 00 00 01 
0b941     AC 50 00 02 
0b945     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b949     AA 70 00 02 
0b94d     5C 90 00 01 
0b951     AC 50 00 00 
0b955     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b959     D6 70 00 00 
0b95d     00 00 00 01 
0b961     AC 60 00 00 
0b965     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b969     AA 70 00 00 
0b96d     00 00 00 00 
0b971     00 00 00 00 
0b975     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b979     AA 70 00 00 
0b97d     00 00 00 01 
0b981     AC 50 00 00 
0b985     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b989     AA 70 00 00 
0b98d     00 00 00 00 
0b991     00 00 00 02 
0b995     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0b999     AA 70 00 02 
0b99d     A6 90 00 01 
0b9a1     AC 50 00 02 
0b9a5     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b9a9     AA 70 00 02 
0b9ad     5C 90 00 01 
0b9b1     AC 50 00 00 
0b9b5     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0b9b9     AA 70 00 00 
0b9bd     00 00 00 00 
0b9c1     00 00 00 02 
0b9c5     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0b9c9     AA 70 00 02 
0b9cd     5C 90 00 01 
0b9d1     AC 50 00 00 
0b9d5     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0b9d9     AA 70 00 00 
0b9dd     00 00 00 01 
0b9e1     AC 60 00 00 
0b9e5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b9e9     AA 70 00 00 
0b9ed     00 00 00 00 
0b9f1     00 00 00 00 
0b9f5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9f9     AA 70 00 00 
0b9fd     00 00 00 01 
0ba01     AC 50 00 00 
0ba05     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0ba09     AA 70 00 00 
0ba0d     00 00 00 00 
0ba11     00 00 00 02 
0ba15     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0ba19     AA 70 00 02 
0ba1d     A6 90 00 01 
0ba21     AC 50 00 02 
0ba25     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0ba29     AA 70 00 02 
0ba2d     5C 90 00 01 
0ba31     AC 50 00 00 
0ba35     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0ba39     AA 70 00 00 
0ba3d     00 00 00 00 
0ba41     00 00 00 02 
0ba45     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0ba49     AA 70 00 02 
0ba4d     5C 90 00 01 
0ba51     AC 50 00 00 
0ba55     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0ba59     AA 70 00 00 
0ba5d     00 00 00 01 
0ba61     AC 60 00 00 
0ba65     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0ba69     AA 70 00 00 
0ba6d     00 00 00 00 
0ba71     00 00 00 00 
0ba75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba79     AA 70 00 00 
0ba7d     00 00 00 01 
0ba81     AC 50 00 00 
0ba85     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0ba89     AA 70 00 00 
0ba8d     00 00 00 00 
0ba91     00 00 00 01 
0ba95     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0ba99     AA 70 00 01 
0ba9d     FC 90 00 01 
0baa1     AC 50 00 01 
0baa5     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0baa9     AA 70 00 01 
0baad     C5 90 00 01 
0bab1     AC 50 00 00 
0bab5     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bab9     AA 70 00 00 
0babd     00 00 00 00 
0bac1     00 00 00 01 
0bac5     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $c5, $80, $00, $00
0bac9     AA 70 00 01 
0bacd     C5 90 00 01 
0bad1     AC 50 00 00 
0bad5     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bad9     AA 70 00 00 
0badd     00 00 00 01 
0bae1     AC 60 00 00 
0bae5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bae9     AA 70 00 00 
0baed     00 00 00 00 
0baf1     00 00 00 00 
0baf5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0baf9     AA 70 00 00 
0bafd     00 00 00 01 
0bb01     AC 50 00 00 
0bb05     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb09     AA 70 00 00 
0bb0d     00 00 00 00 
0bb11     00 00 00 02 
0bb15     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bb19     AA 70 00 02 
0bb1d     A6 90 00 01 
0bb21     AC 50 00 02 
0bb25     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bb29     AA 70 00 02 
0bb2d     5C 90 00 01 
0bb31     AC 50 00 00 
0bb35     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb39     AA 70 00 00 
0bb3d     00 00 00 00 
0bb41     00 00 00 02 
0bb45     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0bb49     AA 70 00 02 
0bb4d     5C 90 00 01 
0bb51     AC 50 00 00 
0bb55     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb59     AA 70 00 00 
0bb5d     00 00 00 01 
0bb61     AC 60 00 00 
0bb65     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bb69     AA 70 00 00 
0bb6d     00 00 00 00 
0bb71     00 00 00 00 
0bb75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb79     AA 70 00 00 
0bb7d     00 00 00 01 
0bb81     AC 50 00 00 
0bb85     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb89     AA 70 00 00 
0bb8d     00 00 00 00 
0bb91     00 00 00 02 
0bb95     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bb99     AA 70 00 02 
0bb9d     A6 90 00 01 
0bba1     AC 50 00 02 
0bba5     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bba9     AA 70 00 02 
0bbad     5C 90 00 00 
0bbb1     00 00 00 00 
0bbb5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbb9     AA 70 00 00 
0bbbd     00 00 00 01 
0bbc1     AC 50 00 02 
0bbc5     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bbc9     AA 70 00 02 
0bbcd     5C 90 00 01 
0bbd1     AC 50 00 00 
0bbd5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bbd9     AA 70 00 00 
0bbdd     00 00 00 01 
0bbe1     AC 60 00 00 
0bbe5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bbe9     AA 70 00 00 
0bbed     00 00 00 00 
0bbf1     00 00 00 00 
0bbf5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbf9     AA 70 00 00 
0bbfd     00 00 00 01 
0bc01     AC 50 00 00 
0bc05     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bc09     AA 70 00 00 
0bc0d     00 00 00 00 
0bc11     00 00 00 02 
0bc15     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bc19     AA 70 00 02 
0bc1d     A6 90 00 01 
0bc21     AC 50 00 02 
0bc25     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bc29     AA 70 00 02 
0bc2d     5C 90 00 00 
0bc31     00 00 00 00 
0bc35     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc39     AA 70 00 00 
0bc3d     00 00 00 01 
0bc41     AC 50 00 02 
0bc45     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bc49     AA 70 00 02 
0bc4d     5C 90 00 01 
0bc51     AC 50 00 00 
0bc55     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bc59     AA 70 00 00 
0bc5d     00 00 00 01 
0bc61     AC 60 00 00 
0bc65     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bc69     AA 70 00 00 
0bc6d     00 00 00 00 
0bc71     00 00 00 00 
0bc75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc79     AA 70 00 00 
0bc7d     00 00 00 01 
0bc81     AC 50 00 00 
0bc85     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bc89     AA 70 00 00 
0bc8d     00 00 00 00 
0bc91     00 00 00 01 
0bc95     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0bc99     AA 70 00 01 
0bc9d     FC 90 00 01 
0bca1     AC 50 00 01 
0bca5     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0bca9     AA 70 00 01 
0bcad     C5 90 00 00 
0bcb1     00 00 00 00 
0bcb5     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcb9     AA 70 00 00 
0bcbd     00 00 00 01 
0bcc1     AC 50 00 01 
0bcc5     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0bcc9     AA 70 00 01 
0bccd     C5 90 00 01 
0bcd1     AC 50 00 00 
0bcd5     00 80 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0bcd9     AA 70 00 00 
0bcdd     00 00 00 01 
0bce1     AC 60 00 00 
0bce5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bce9     AA 70 00 00 
0bced     00 00 00 00 
0bcf1     00 00 00 00 
0bcf5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcf9     AA 70 00 00 
0bcfd     00 00 00 01 
0bd01     AC 50 00 00 
0bd05     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bd09     AA 70 00 00 
0bd0d     00 00 00 00 
0bd11     00 00 00 02 
0bd15     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bd19     AA 70 00 02 
0bd1d     A6 90 00 01 
0bd21     AC 50 00 02 
0bd25     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bd29     AA 70 00 02 
0bd2d     5C 90 00 00 
0bd31     00 00 00 00 
0bd35     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd39     AA 70 00 00 
0bd3d     00 00 00 01 
0bd41     AC 50 00 02 
0bd45     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bd49     AA 70 00 02 
0bd4d     5C 90 00 01 
0bd51     AC 50 00 00 
0bd55     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bd59     AA 70 00 00 
0bd5d     00 00 00 01 
0bd61     AC 60 00 00 
0bd65     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bd69     AA 70 00 00 
0bd6d     00 00 00 00 
0bd71     00 00 00 00 
0bd75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd79     AA 70 00 00 
0bd7d     00 00 00 01 
0bd81     AC 50 00 00 
0bd85     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bd89     AA 70 00 00 
0bd8d     00 00 00 00 
0bd91     00 00 00 02 
0bd95     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bd99     AA 70 00 02 
0bd9d     A6 90 00 01 
0bda1     AC 50 00 02 
0bda5     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bda9     AA 70 00 02 
0bdad     5C 90 00 01 
0bdb1     AC 50 00 00 
0bdb5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bdb9     AA 70 00 00 
0bdbd     00 00 00 00 
0bdc1     00 00 00 02 
0bdc5     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0bdc9     AA 70 00 02 
0bdcd     5C 90 00 01 
0bdd1     AC 50 00 00 
0bdd5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bdd9     AA 70 00 00 
0bddd     00 00 00 01 
0bde1     AC 60 00 00 
0bde5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bde9     AA 70 00 00 
0bded     00 00 00 00 
0bdf1     00 00 00 00 
0bdf5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bdf9     AA 70 00 00 
0bdfd     00 00 00 01 
0be01     AC 50 00 00 
0be05     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be09     AA 70 00 00 
0be0d     00 00 00 00 
0be11     00 00 00 02 
0be15     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0be19     AA 70 00 02 
0be1d     A6 90 00 01 
0be21     AC 50 00 02 
0be25     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0be29     AA 70 00 02 
0be2d     5C 90 00 01 
0be31     AC 50 00 00 
0be35     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be39     AA 70 00 00 
0be3d     00 00 00 00 
0be41     00 00 00 02 
0be45     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0be49     AA 70 00 02 
0be4d     5C 90 00 01 
0be51     AC 50 00 00 
0be55     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be59     AA 70 00 00 
0be5d     00 00 00 01 
0be61     AC 60 00 00 
0be65     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0be69     AA 70 00 00 
0be6d     00 00 00 00 
0be71     00 00 00 00 
0be75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be79     AA 70 00 00 
0be7d     00 00 00 01 
0be81     AC 50 00 00 
0be85     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be89     AA 70 00 00 
0be8d     00 00 00 00 
0be91     00 00 00 01 
0be95     68 80 38 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0be99     68 20 38 01 
0be9d     C5 90 00 01 
0bea1     53 60 00 00 
0bea5     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bea9     00 00 38 00 
0bead     00 00 00 00 
0beb1     00 00 00 00 
0beb5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0beb9     00 00 38 00 
0bebd     00 00 00 00 
0bec1     00 00 00 00 
0bec5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bec9     00 00 38 00 
0becd     00 00 00 00 
0bed1     00 00 00 00 
0bed5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bed9     00 00 38 00 
0bedd     00 00 00 00 
0bee1     00 00 00 00 
0bee5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bee9     00 00 38 00 
0beed     00 00 00 00 
0bef1     00 00 00 01 
0bef5     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0bef9     68 20 38 01 
0befd     C5 90 00 01 
0bf01     53 60 00 00 
0bf05     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bf09     00 00 38 00 
0bf0d     00 00 00 00 
0bf11     00 00 00 00 
0bf15     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf19     00 00 38 00 
0bf1d     00 00 00 00 
0bf21     00 00 00 00 
0bf25     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf29     00 00 38 00 
0bf2d     00 00 00 00 
0bf31     00 00 00 00 
0bf35     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf39     00 00 38 00 
0bf3d     00 00 00 00 
0bf41     00 00 00 00 
0bf45     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf49     00 00 38 00 
0bf4d     00 00 00 00 
0bf51     00 00 00 01 
0bf55     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0bf59     68 20 38 01 
0bf5d     C5 90 00 01 
0bf61     53 60 00 00 
0bf65     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bf69     00 00 38 00 
0bf6d     00 00 00 00 
0bf71     00 00 00 00 
0bf75     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf79     00 00 38 00 
0bf7d     00 00 00 00 
0bf81     00 00 00 00 
0bf85     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf89     00 00 38 00 
0bf8d     00 00 00 00 
0bf91     00 00 00 00 
0bf95     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf99     00 00 38 00 
0bf9d     00 00 00 00 
0bfa1     00 00 00 00 
0bfa5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfa9     00 00 38 00 
0bfad     00 00 00 00 
0bfb1     00 00 00 00 
0bfb5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfb9     00 00 38 00 
0bfbd     00 00 00 00 
0bfc1     00 00 00 00 
0bfc5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfc9     00 00 38 00 
0bfcd     00 00 00 00 
0bfd1     00 00 00 01 
0bfd5     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0bfd9     68 20 38 01 
0bfdd     C5 90 00 01 
0bfe1     53 60 00 00 
0bfe5     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bfe9     00 00 38 00 
0bfed     00 00 00 00 
0bff1     00 00 00 00 
0bff5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bff9     00 00 38 00 
0bffd     00 00 00 00 
0c001     00 00 00 00 
0c005     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c009     00 00 38 00 
0c00d     00 00 00 00 
0c011     00 00 00 01 
0c015     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0c019     68 20 38 01 
0c01d     C5 90 00 01 
0c021     53 60 00 00 
0c025     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0c029     00 00 38 00 
0c02d     00 00 00 00 
0c031     00 00 00 00 
0c035     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c039     00 00 38 00 
0c03d     00 00 00 00 
0c041     00 00 00 00 
0c045     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c049     00 00 38 00 
0c04d     00 00 00 00 
0c051     00 00 00 00 
0c055     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c059     00 00 38 00 
0c05d     00 00 00 00 
0c061     00 00 00 00 
0c065     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c069     00 00 38 00 
0c06d     00 00 00 00 
0c071     00 00 00 00 
0c075     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c079     00 00 38 00 
0c07d     00 00 00 00 
0c081     00 00 00 00 
0c085     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c089     00 00 38 00 
0c08d     00 00 00 00 
0c091     00 00 00 00 
0c095     71 12 02 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $71, $12, $02, $00
0c099     00 00 00 00 
0c09d     00 00 00 00 
0c0a1     00 00 00 00 
0c0a5     00          | 	byte	$00[13]
0c0a6     02 02 00 00 
0c0aa     00 00 00 00 
0c0ae     00 00 00 00 
0c0b2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0b6     02 02 00 00 
0c0ba     00 00 00 00 
0c0be     00 00 00 00 
0c0c2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0c6     02 02 00 00 
0c0ca     00 00 00 00 
0c0ce     00 00 00 00 
0c0d2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0d6     02 02 00 00 
0c0da     00 00 00 00 
0c0de     00 00 00 00 
0c0e2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0e6     02 02 00 00 
0c0ea     00 00 00 00 
0c0ee     00 00 00 00 
0c0f2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0f6     02 02 00 00 
0c0fa     00 00 00 00 
0c0fe     00 00 00 00 
0c102     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c106     02 02 00 00 
0c10a     00 00 00 00 
0c10e     00 00 00 00 
0c112     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c116     02 02 00 00 
0c11a     00 00 00 00 
0c11e     00 00 00 AA 
0c122     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c126     02 02 00 00 
0c12a     00 00 00 00 
0c12e     00 00 00 00 
0c132     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c136     02 02 00 00 
0c13a     00 00 00 00 
0c13e     00 00 00 AA 
0c142     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c146     02 02 00 00 
0c14a     00 00 00 00 
0c14e     00 00 00 00 
0c152     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c156     02 02 00 00 
0c15a     00 00 00 00 
0c15e     00 00 00 AA 
0c162     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c166     02 02 00 00 
0c16a     00 00 00 00 
0c16e     00 00 00 AA 
0c172     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c176     02 02 00 00 
0c17a     00 00 00 00 
0c17e     00 00 00 AA 
0c182     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c186     02 02 00 00 
0c18a     00 00 00 00 
0c18e     00 00 00 AA 
0c192     70 00 00 FE | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $fe
0c196     40 00 00 AA 
0c19a     70 00 01 C5 
0c19e     90 00 00 D6 
0c1a2     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00
0c1a6     00 00 00 AA 
0c1aa     70 00 01 C5 
0c1ae     90 00 00 00 
0c1b2     00 00 00 FE | 	byte	$00, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c1b6     40 00 00 AA 
0c1ba     70 00 01 C5 
0c1be     90 00 00 00 
0c1c2     00 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c1c6     40 00 00 AA 
0c1ca     70 00 01 C5 
0c1ce     90 00 00 00 
0c1d2     00 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c1d6     40 00 00 AA 
0c1da     70 00 01 C5 
0c1de     90 00 00 D6 
0c1e2     50 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe
0c1e6     40 00 00 AA 
0c1ea     70 00 01 C5 
0c1ee     90 00 00 D6 
0c1f2     50 00 01 0D | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d
0c1f6     40 00 00 AA 
0c1fa     70 00 01 C5 
0c1fe     90 00 00 D6 
0c202     50 00 01 2E | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $2e
0c206     40 00 00 AA 
0c20a     70 00 01 C5 
0c20e     90 00 00 D6 
0c212     50 00 01 0D | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d
0c216     40 00 00 AA 
0c21a     70 00 02 5C 
0c21e     90 00 01 AC 
0c222     60 00 01 2E | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e
0c226     40 00 00 AA 
0c22a     70 00 02 5C 
0c22e     90 00 00 00 
0c232     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c236     00 00 00 AA 
0c23a     70 00 02 5C 
0c23e     90 00 00 00 
0c242     00 00 01 2E | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e
0c246     40 00 00 AA 
0c24a     70 00 02 5C 
0c24e     90 00 00 00 
0c252     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c256     00 00 00 AA 
0c25a     70 00 02 5C 
0c25e     90 00 00 D6 
0c262     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c266     00 00 00 AA 
0c26a     70 00 02 5C 
0c26e     90 00 00 00 
0c272     00 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c276     00 00 00 AA 
0c27a     70 00 02 5C 
0c27e     90 00 00 00 
0c282     00 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c286     00 00 00 AA 
0c28a     70 00 02 5C 
0c28e     90 00 00 00 
0c292     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa
0c296     40 00 00 AA 
0c29a     70 00 02 5C 
0c29e     90 00 00 D6 
0c2a2     50 00 00 AA | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa
0c2a6     40 00 00 AA 
0c2aa     70 00 02 5C 
0c2ae     90 00 00 00 
0c2b2     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c2b6     00 00 00 AA 
0c2ba     70 00 02 5C 
0c2be     90 00 00 00 
0c2c2     00 00 00 97 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c2c6     40 00 00 AA 
0c2ca     70 00 02 5C 
0c2ce     90 00 00 00 
0c2d2     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c2d6     00 00 00 AA 
0c2da     70 00 02 5C 
0c2de     90 00 00 D6 
0c2e2     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c2e6     00 00 00 AA 
0c2ea     70 00 02 5C 
0c2ee     90 00 00 D6 
0c2f2     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c2f6     00 00 00 AA 
0c2fa     70 00 02 5C 
0c2fe     90 00 00 D6 
0c302     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c306     00 00 00 AA 
0c30a     70 00 02 5C 
0c30e     90 00 00 D6 
0c312     50 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa
0c316     40 00 00 AA 
0c31a     70 00 02 5C 
0c31e     90 00 01 AC 
0c322     60 00 00 AA | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $aa
0c326     40 00 00 AA 
0c32a     70 00 02 5C 
0c32e     90 00 00 00 
0c332     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c336     00 00 00 AA 
0c33a     70 00 02 5C 
0c33e     90 00 00 00 
0c342     00 00 00 97 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c346     40 00 00 AA 
0c34a     70 00 02 5C 
0c34e     90 00 00 00 
0c352     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c356     00 00 00 AA 
0c35a     70 00 02 5C 
0c35e     90 00 00 D6 
0c362     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c366     00 00 00 AA 
0c36a     70 00 02 5C 
0c36e     90 00 00 00 
0c372     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa
0c376     40 00 00 AA 
0c37a     70 00 02 5C 
0c37e     90 00 00 00 
0c382     00 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c386     40 00 00 AA 
0c38a     70 00 02 5C 
0c38e     90 00 00 00 
0c392     00 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $7f
0c396     40 00 00 AA 
0c39a     70 00 01 C5 
0c39e     90 00 01 AC 
0c3a2     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c3a6     40 00 00 AA 
0c3aa     70 00 01 C5 
0c3ae     90 00 01 AC 
0c3b2     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c3b6     40 00 00 AA 
0c3ba     70 00 01 C5 
0c3be     90 00 01 AC 
0c3c2     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c3c6     40 00 00 AA 
0c3ca     70 00 01 C5 
0c3ce     90 00 01 AC 
0c3d2     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c3d6     40 00 00 AA 
0c3da     70 00 01 C5 
0c3de     90 00 01 AC 
0c3e2     60 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $00
0c3e6     00 00 00 AA 
0c3ea     70 00 00 00 
0c3ee     00 00 00 00 
0c3f2     00 00 00 87 | 	byte	$00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $87
0c3f6     40 00 00 AA 
0c3fa     70 00 01 C5 
0c3fe     90 00 01 AC 
0c402     50 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $97
0c406     40 00 00 AA 
0c40a     70 00 01 C5 
0c40e     90 00 00 00 
0c412     00 00 00 87 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87
0c416     40 00 00 AA 
0c41a     70 00 02 5C 
0c41e     90 00 01 AC 
0c422     50 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $97
0c426     40 00 00 AA 
0c42a     70 00 02 5C 
0c42e     90 00 01 AC 
0c432     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00
0c436     00 00 00 AA 
0c43a     70 00 02 5C 
0c43e     90 00 01 AC 
0c442     50 00 00 87 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $87
0c446     40 00 00 AA 
0c44a     70 00 02 5C 
0c44e     90 00 01 AC 
0c452     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00
0c456     00 00 00 AA 
0c45a     70 00 02 5C 
0c45e     90 00 01 AC 
0c462     60 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00
0c466     00 00 00 AA 
0c46a     70 00 00 00 
0c46e     00 00 00 00 
0c472     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0c476     40 00 00 AA 
0c47a     70 00 00 00 
0c47e     00 00 00 00 
0c482     00 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97
0c486     40 00 00 AA 
0c48a     70 00 00 00 
0c48e     00 00 00 00 
0c492     00 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0c496     40 00 01 FC 
0c49a     20 47 01 FC 
0c49e     90 00 01 AC 
0c4a2     50 00 00 97 | 	byte	$40, $00, $01, $fc, $20, $47, $01, $fc, $90, $00, $01, $ac, $50, $00, $00, $97
0c4a6     40 00 00 00 
0c4aa     00 47 00 00 
0c4ae     00 00 00 00 
0c4b2     00 00 00 00 | 	byte	$40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4b6     00 00 00 00 
0c4ba     00          | 	byte	$00[5]
0c4bb     47 00 00 00 
0c4bf     00 00 00 00 
0c4c3     00 00 97 40 
0c4c7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c4cb     47 00 00 00 
0c4cf     00 00 00 00 
0c4d3     00 00 00 00 
0c4d7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4db     47 00 00 00 
0c4df     00 00 00 00 
0c4e3     00 00 00 00 
0c4e7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4eb     47 00 00 00 
0c4ef     00 00 00 00 
0c4f3     00 00 00 00 
0c4f7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4fb     47 00 00 00 
0c4ff     00 00 00 00 
0c503     00 00 7F 40 
0c507     00 01 C5 20 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $01, $c5, $20
0c50b     47 01 C5 90 
0c50f     00 01 AC 50 
0c513     00 00 00 00 
0c517     00 00 00 00 | 	byte	$47, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
0c51b     47 00 00 00 
0c51f     00 00 00 00 
0c523     00 00 97 40 
0c527     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c52b     47 00 00 00 
0c52f     00 00 00 00 
0c533     00 00 00 00 
0c537     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c53b     47 00 00 00 
0c53f     00 00 00 00 
0c543     00 00 97 40 
0c547     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c54b     47 00 00 00 
0c54f     00 00 00 00 
0c553     00 00 7F 40 
0c557     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $01, $fc, $20
0c55b     49 01 7D 90 
0c55f     00 01 AC 50 
0c563     00 00 97 40 
0c567     00 00 00 00 | 	byte	$49, $01, $7d, $90, $00, $01, $ac, $50, $00, $00, $97, $40, $00, $00, $00, $00
0c56b     49 00 00 00 
0c56f     00 00 00 00 
0c573     00 00 00 00 
0c577     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c57b     49 00 00 00 
0c57f     00 00 00 00 
0c583     00 00 97 40 
0c587     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c58b     49 00 00 00 
0c58f     00 00 00 00 
0c593     00 00 00 00 
0c597     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c59b     49 00 00 00 
0c59f     00 00 00 00 
0c5a3     00 00 00 00 
0c5a7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5ab     49 00 00 00 
0c5af     00 00 00 00 
0c5b3     00 00 00 00 
0c5b7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5bb     49 00 00 00 
0c5bf     00 00 00 00 
0c5c3     00 00 00 00 
0c5c7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5cb     49 00 00 00 
0c5cf     00 00 00 00 
0c5d3     00 00 00 00 
0c5d7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5db     49 00 00 00 
0c5df     00 01 AC 50 
0c5e3     00 00 00 00 
0c5e7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
0c5eb     49 00 00 00 
0c5ef     00 03 58 60 
0c5f3     00 00 00 00 
0c5f7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $03, $58, $60, $00, $00, $00, $00, $00, $00, $00, $00
0c5fb     49 00 00 00 
0c5ff     00 00 00 00 
0c603     00 00 00 00 
0c607     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c60b     49 00 00 00 
0c60f     00 00 00 00 
0c613     00 00 00 00 
0c617     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c61b     00 00 00 00 
      ...             
0c68f     00 00 00 00 
0c693     00          | 	byte	$00[121]
0c694     01 2E 20 00 
0c698     01 E0 20 38 
0c69c     02 5C 30 00 
0c6a0     01 E0 20 00 | 	byte	$01, $2e, $20, $00, $01, $e0, $20, $38, $02, $5c, $30, $00, $01, $e0, $20, $00
0c6a4     00 00 00 00 
0c6a8     00 00 00    | 	byte	$00[7]
0c6ab     38 00 00 00 
0c6af     00 00 00 00 
0c6b3     00 00 00 00 
0c6b7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6bb     38 00 00 00 
0c6bf     00 00 00 00 
0c6c3     00 00 00 00 
0c6c7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6cb     38 00 00 00 
0c6cf     00 00 00 00 
0c6d3     00 00 00 00 
0c6d7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6db     38 00 00 00 
0c6df     00 00 00 00 
0c6e3     00 00 00 00 
0c6e7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6eb     38 00 00 00 
0c6ef     00 00 00 00 
0c6f3     00 00 00 00 
0c6f7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6fb     38 00 00 00 
0c6ff     00 00 00 00 
0c703     00 00 00 00 
0c707     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c70b     38 00 00 00 
0c70f     00 00 00 00 
0c713     00 00 00 00 
0c717     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c71b     38 00 00 00 
0c71f     00 00 00 00 
0c723     00 00 00 00 
0c727     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c72b     38 00 00 00 
0c72f     00 00 00 00 
0c733     00 00 00 00 
0c737     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c73b     38 00 00 00 
0c73f     00 00 00 00 
0c743     00 00 00 00 
0c747     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c74b     38 00 00 00 
0c74f     00 00 00 00 
0c753     00 00 00 00 
0c757     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c75b     38 00 00 00 
0c75f     00 00 00 00 
0c763     00 00 00 00 
0c767     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c76b     38 00 00 00 
0c76f     00 00 00 00 
0c773     00 00 00 00 
0c777     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c77b     00 00 00 00 
      ...             
0cd93     00 00 00 00 
0cd97     00          | 	byte	$00[1565]
0cd98     E7 F0 14 26 
0cd9c     25 3B 3B 25 
0cda0     19 0F E9 DA 
0cda4     DA C5 C7 DD | 	byte	$e7, $f0, $14, $26, $25, $3b, $3b, $25, $19, $0f, $e9, $da, $da, $c5, $c7, $dd
0cda8     E9 F4 1D 27 
0cdac     27 3D 37 22 
0cdb0     18 0A DF D8 
0cdb4     D7 C3 CC DF | 	byte	$e9, $f4, $1d, $27, $27, $3d, $37, $22, $18, $0a, $df, $d8, $d7, $c3, $cc, $df
0cdb8     E9 F7 21 28 
0cdbc     29 3E 33 1F 
0cdc0     16 05 DB D7 
0cdc4     D6 C2 D1 E1 | 	byte	$e9, $f7, $21, $28, $29, $3e, $33, $1f, $16, $05, $db, $d7, $d6, $c2, $d1, $e1
0cdc8     EA FF 27 29 
0cdcc     2C 3E 2E 1E 
0cdd0     15 00 D7 D8 
0cdd4     D3 C3 D5 E3 | 	byte	$ea, $ff, $27, $29, $2c, $3e, $2e, $1e, $15, $00, $d7, $d8, $d3, $c3, $d5, $e3
0cdd8     EC 04 2B 29 
0cddc     30 3C 2A 1D 
0cde0     13 F7 D4 D7 
0cde4     CF C5 D9 E3 | 	byte	$ec, $04, $2b, $29, $30, $3c, $2a, $1d, $13, $f7, $d4, $d7, $cf, $c5, $d9, $e3
0cde8     EE 0D 2D 29 
0cdec     33 38 26 1D 
0cdf0     10 ED D1 D7 
0cdf4     CE C9 DC E4 | 	byte	$ee, $0d, $2d, $29, $33, $38, $26, $1d, $10, $ed, $d1, $d7, $ce, $c9, $dc, $e4
0cdf8     F1 16 2F 29 
0cdfc     33 35 23 1C 
0ce00     0C E6 D0 D6 
0ce04     CC CE DE E5 | 	byte	$f1, $16, $2f, $29, $33, $35, $23, $1c, $0c, $e6, $d0, $d6, $cc, $ce, $de, $e5
0ce08     F6 18 2F 2A 
0ce0c     34 30 22 1A 
0ce10     07 E4 D1 D5 
0ce14     CD D2 DE E7 | 	byte	$f6, $18, $2f, $2a, $34, $30, $22, $1a, $07, $e4, $d1, $d5, $cd, $d2, $de, $e7
0ce18     F9 21 2F 2B 
0ce1c     33 2D 22 18 
0ce20     04 DB D1 D5 
0ce24     CF D4 DE E9 | 	byte	$f9, $21, $2f, $2b, $33, $2d, $22, $18, $04, $db, $d1, $d5, $cf, $d4, $de, $e9
0ce28     FF 27 30 2B 
0ce2c     30 2A 23 14 
0ce30     00 D8 D0 D6 
0ce34     D2 D7 DD ED | 	byte	$ff, $27, $30, $2b, $30, $2a, $23, $14, $00, $d8, $d0, $d6, $d2, $d7, $dd, $ed
0ce38     02 2B 31 29 
0ce3c     2D 28 22 10 
0ce40     FB D4 CF D8 
0ce44     D4 D8 DE F0 | 	byte	$02, $2b, $31, $29, $2d, $28, $22, $10, $fb, $d4, $cf, $d8, $d4, $d8, $de, $f0
0ce48     08 2C 30 26 
0ce4c     2A 27 21 0D 
0ce50     F4 D3 D0 DA 
0ce54     D7 D8 DF F5 | 	byte	$08, $2c, $30, $26, $2a, $27, $21, $0d, $f4, $d3, $d0, $da, $d7, $d8, $df, $f5
0ce58     0D 2F 2F 24 
0ce5c     28 28 20 09 
0ce60     F1 D2 D3 DD 
0ce64     D8 D8 E2 F8 | 	byte	$0d, $2f, $2f, $24, $28, $28, $20, $09, $f1, $d2, $d3, $dd, $d8, $d8, $e2, $f8
0ce68     12 30 2B 21 
0ce6c     27 28 1E 05 
0ce70     ED CD D5 E0 
0ce74     D9 D7 E3 FC | 	byte	$12, $30, $2b, $21, $27, $28, $1e, $05, $ed, $cd, $d5, $e0, $d9, $d7, $e3, $fc
0ce78     14 32 29 1E 
0ce7c     27 28 1B 01 
0ce80     E8 CE DA E4 
0ce84     D8 D7 E8 02 | 	byte	$14, $32, $29, $1e, $27, $28, $1b, $01, $e8, $ce, $da, $e4, $d8, $d7, $e8, $02
0ce88     17 31 25 1A 
0ce8c     27 28 17 FD 
0ce90     E4 CF DD E7 
0ce94     D7 D7 ED 04 | 	byte	$17, $31, $25, $1a, $27, $28, $17, $fd, $e4, $cf, $dd, $e7, $d7, $d7, $ed, $04
0ce98     1A 2F 22 18 
0ce9c     29 27 10 FA 
0cea0     E3 D2 DF E8 
0cea4     D5 D8 F4 05 | 	byte	$1a, $2f, $22, $18, $29, $27, $10, $fa, $e3, $d2, $df, $e8, $d5, $d8, $f4, $05
0cea8     1E 2C 1D 17 
0ceac     2B 27 09 FA 
0ceb0     E0 D5 E6 E9 
0ceb4     D3 DA F8 06 | 	byte	$1e, $2c, $1d, $17, $2b, $27, $09, $fa, $e0, $d5, $e6, $e9, $d3, $da, $f8, $06
0ceb8     21 2A 17 18 
0cebc     2D 25 05 F9 
0cec0     E0 D6 EC E9 
0cec4     D2 DE FE 07 | 	byte	$21, $2a, $17, $18, $2d, $25, $05, $f9, $e0, $d6, $ec, $e9, $d2, $de, $fe, $07
0cec8     1F 29 12 17 
0cecc     2F 21 FF F7 
0ced0     E1 D8 EF E6 
0ced4     D0 E5 02 07 | 	byte	$1f, $29, $12, $17, $2f, $21, $ff, $f7, $e1, $d8, $ef, $e6, $d0, $e5, $02, $07
0ced8     1F 24 0F 1C 
0cedc     31 19 FD F7 
0cee0     E1 DE F3 E1 
0cee4     CE EB 03 07 | 	byte	$1f, $24, $0f, $1c, $31, $19, $fd, $f7, $e1, $de, $f3, $e1, $ce, $eb, $03, $07
0cee8     22 1E 0A 22 
0ceec     32 10 FD F9 
0cef0     DD E2 F8 DA 
0cef4     CF F3 03 06 | 	byte	$22, $1e, $0a, $22, $32, $10, $fd, $f9, $dd, $e2, $f8, $da, $cf, $f3, $03, $06
0cef8     24 1C 07 25 
0cefc     2E 09 FE FA 
0cf00     DD E7 F9 D8 
0cf04     D5 F7 00 05 | 	byte	$24, $1c, $07, $25, $2e, $09, $fe, $fa, $dd, $e7, $f9, $d8, $d5, $f7, $00, $05
0cf08     23 16 08 2D 
0cf0c     27 06 01 FB 
0cf10     DE EC F6 D0 
0cf14     DD FD FD 06 | 	byte	$23, $16, $08, $2d, $27, $06, $01, $fb, $de, $ec, $f6, $d0, $dd, $fd, $fd, $06
0cf18     20 0F 09 32 
0cf1c     20 00 05 F6 
0cf20     E1 F2 F2 CE 
0cf24     E0 00 F8 0B | 	byte	$20, $0f, $09, $32, $20, $00, $05, $f6, $e1, $f2, $f2, $ce, $e0, $00, $f8, $0b
0cf28     1E 0A 11 32 
0cf2c     1A 00 09 F4 
0cf30     E2 F9 EF D0 
0cf34     E5 FF F5 0D | 	byte	$1e, $0a, $11, $32, $1a, $00, $09, $f4, $e2, $f9, $ef, $d0, $e5, $ff, $f5, $0d
0cf38     1C 06 16 2E 
0cf3c     14 02 0B F4 
0cf40     E4 FC E7 D4 
0cf44     EE FB F5 0D | 	byte	$1c, $06, $16, $2e, $14, $02, $0b, $f4, $e4, $fc, $e7, $d4, $ee, $fb, $f5, $0d
0cf48     1A 03 1D 2B 
0cf4c     0C 07 09 F5 
0cf50     E8 FC E1 D6 
0cf54     F6 F6 F8 0A | 	byte	$1a, $03, $1d, $2b, $0c, $07, $09, $f5, $e8, $fc, $e1, $d6, $f6, $f6, $f8, $0a
0cf58     15 04 1F 29 
0cf5c     09 0C 07 F3 
0cf60     ED F9 E2 D9 
0cf64     F8 F2 F9 0C | 	byte	$15, $04, $1f, $29, $09, $0c, $07, $f3, $ed, $f9, $e2, $d9, $f8, $f2, $f9, $0c
0cf68     10 0A 1E 23 
0cf6c     09 0E 07 F3 
0cf70     F1 F5 E2 DE 
0cf74     F5 F1 F8 0E | 	byte	$10, $0a, $1e, $23, $09, $0e, $07, $f3, $f1, $f5, $e2, $de, $f5, $f1, $f8, $0e
0cf78     0F 0D 1C 1C 
0cf7c     0C 0E 0A F1 
0cf80     F2 F3 E0 E4 
0cf84     F1 F2 F5 0E | 	byte	$0f, $0d, $1c, $1c, $0c, $0e, $0a, $f1, $f2, $f3, $e0, $e4, $f1, $f2, $f5, $0e
0cf88     0F 0C 20 1A 
0cf8c     10 0E 0A F3 
0cf90     F0 F5 E0 E8 
0cf94     EF F1 F5 0C | 	byte	$0f, $0c, $20, $1a, $10, $0e, $0a, $f3, $f0, $f5, $e0, $e8, $ef, $f1, $f5, $0c
0cf98     11 09 1F 18 
0cf9c     11 0F 0A F4 
0cfa0     EE F9 E1 E7 
0cfa4     EF EF F4 0D | 	byte	$11, $09, $1f, $18, $11, $0f, $0a, $f4, $ee, $f9, $e1, $e7, $ef, $ef, $f4, $0d
0cfa8     12 06 1E 1B 
0cfac     0F 12 0B F2 
0cfb0     ED F9 E3 E3 
0cfb4     F1 EC F5 12 | 	byte	$12, $06, $1e, $1b, $0f, $12, $0b, $f2, $ed, $f9, $e3, $e3, $f1, $ec, $f5, $12
0cfb8     11 07 1C 1D 
0cfbc     0E 16 0A ED 
0cfc0     F4 F6 E3 E3 
0cfc4     F1 E9 F7 18 | 	byte	$11, $07, $1c, $1d, $0e, $16, $0a, $ed, $f4, $f6, $e3, $e3, $f1, $e9, $f7, $18
0cfc8     09 0A 1E 1C 
0cfcc     0F 19 09 E7 
0cfd0     FC F5 DF E6 
0cfd4     EF E6 F9 1C | 	byte	$09, $0a, $1e, $1c, $0f, $19, $09, $e7, $fc, $f5, $df, $e6, $ef, $e6, $f9, $1c
0cfd8     01 08 24 17 
0cfdc     12 1B 07 E4 
0cfe0     02 F7 DA E8 
0cfe4     EC E5 FD 1B | 	byte	$01, $08, $24, $17, $12, $1b, $07, $e4, $02, $f7, $da, $e8, $ec, $e5, $fd, $1b
0cfe8     FD 0B 28 16 
0cfec     16 1D FC E6 
0cff0     05 F4 D7 EC 
0cff4     E8 E3 05 16 | 	byte	$fd, $0b, $28, $16, $16, $1d, $fc, $e6, $05, $f4, $d7, $ec, $e8, $e3, $05, $16
0cff8     FA 0F 29 14 
0cffc     1A 1D F5 EE 
0d000     07 ED D8 EC 
0d004     E3 E2 10 0D | 	byte	$fa, $0f, $29, $14, $1a, $1d, $f5, $ee, $07, $ed, $d8, $ec, $e3, $e2, $10, $0d
0d008     F7 1A 28 14 
0d00c     1F 1D EC F6 
0d010     09 E1 DA EB 
0d014     DF E5 17 06 | 	byte	$f7, $1a, $28, $14, $1f, $1d, $ec, $f6, $09, $e1, $da, $eb, $df, $e5, $17, $06
0d018     F7 21 22 16 
0d01c     23 17 E8 FC 
0d020     0A DB E0 E9 
0d024     DB EE 18 01 | 	byte	$f7, $21, $22, $16, $23, $17, $e8, $fc, $0a, $db, $e0, $e9, $db, $ee, $18, $01
0d028     F8 28 20 1A 
0d02c     26 0A E9 04 
0d030     04 D6 E1 E4 
0d034     D9 F9 15 F9 | 	byte	$f8, $28, $20, $1a, $26, $0a, $e9, $04, $04, $d6, $e1, $e4, $d9, $f9, $15, $f9
0d038     03 2B 1D 1E 
0d03c     27 04 ED 0C 
0d040     FB D5 E3 DF 
0d044     DB 01 11 F2 | 	byte	$03, $2b, $1d, $1e, $27, $04, $ed, $0c, $fb, $d5, $e3, $df, $db, $01, $11, $f2
0d048     0D 2B 1D 24 
0d04c     23 FB F3 0F 
0d050     EE D6 E3 D9 
0d054     E0 05 0B F1 | 	byte	$0d, $2b, $1d, $24, $23, $fb, $f3, $0f, $ee, $d6, $e3, $d9, $e0, $05, $0b, $f1
0d058     15 2B 1E 28 
0d05c     1B F7 F9 0E 
0d060     E5 D6 E0 D7 
0d064     E6 0A 04 F5 | 	byte	$15, $2b, $1e, $28, $1b, $f7, $f9, $0e, $e5, $d6, $e0, $d7, $e6, $0a, $04, $f5
0d068     1E 2A 22 29 
0d06c     14 F7 FF 09 
0d070     E1 D7 DB D7 
0d074     EF 09 FC F9 | 	byte	$1e, $2a, $22, $29, $14, $f7, $ff, $09, $e1, $d7, $db, $d7, $ef, $09, $fc, $f9
0d078     20 29 26 27 
0d07c     0D F7 05 03 
0d080     DD D7 D7 DB 
0d084     F3 08 F9 00 | 	byte	$20, $29, $26, $27, $0d, $f7, $05, $03, $dd, $d7, $d7, $db, $f3, $08, $f9, $00
0d088     25 2A 2B 23 
0d08c     0B FA 05 FA 
0d090     D9 D5 D5 DE 
0d094     F7 04 FB 08 | 	byte	$25, $2a, $2b, $23, $0b, $fa, $05, $fa, $d9, $d5, $d5, $de, $f7, $04, $fb, $08
0d098     29 2C 2A 1F 
0d09c     09 FD 05 F4 
0d0a0     D7 D1 D7 E4 
0d0a4     F7 02 FD 0F | 	byte	$29, $2c, $2a, $1f, $09, $fd, $05, $f4, $d7, $d1, $d7, $e4, $f7, $02, $fd, $0f
0d0a8     2C 31 28 19 
0d0ac     09 FE 02 F0 
0d0b0     D2 CC D9 EA 
0d0b4     F4 03 FF 10 | 	byte	$2c, $31, $28, $19, $09, $fe, $02, $f0, $d2, $cc, $d9, $ea, $f4, $03, $ff, $10
0d0b8     31 35 25 13 
0d0bc     0D FB FE EF 
0d0c0     CC C9 DD EC 
0d0c4     F2 06 04 14 | 	byte	$31, $35, $25, $13, $0d, $fb, $fe, $ef, $cc, $c9, $dd, $ec, $f2, $06, $04, $14
0d0c8     37 36 21 14 
0d0cc     0E FA FA E8 
0d0d0     C7 CD E2 EB 
0d0d4     F4 08 08 1B | 	byte	$37, $36, $21, $14, $0e, $fa, $fa, $e8, $c7, $cd, $e2, $eb, $f4, $08, $08, $1b
0d0d8     3E 31 1A 17 
0d0dc     09 F7 F7 E4 
0d0e0     BE D1 E8 E6 
0d0e4     F9 0A 08 1F | 	byte	$3e, $31, $1a, $17, $09, $f7, $f7, $e4, $be, $d1, $e8, $e6, $f9, $0a, $08, $1f
0d0e8     44 2C 15 1C 
0d0ec     03 F3 F7 DA 
0d0f0     BB D3 EB E1 
0d0f4     FC 0E 09 2A | 	byte	$44, $2c, $15, $1c, $03, $f3, $f7, $da, $bb, $d3, $eb, $e1, $fc, $0e, $09, $2a
0d0f8     45 2B 14 20 
0d0fc     00 EF F6 D0 
0d100     BC D8 EB E1 
0d104     02 14 0C 36 | 	byte	$45, $2b, $14, $20, $00, $ef, $f6, $d0, $bc, $d8, $eb, $e1, $02, $14, $0c, $36
0d108     43 26 17 1D 
0d10c     FC EB F2 C5 
0d110     BF DE E3 E6 
0d114     06 16 11 3F | 	byte	$43, $26, $17, $1d, $fc, $eb, $f2, $c5, $bf, $de, $e3, $e6, $06, $16, $11, $3f
0d118     41 20 20 18 
0d11c     F6 E9 EC BC 
0d120     C0 E5 DB ED 
0d124     0D 16 1B 46 | 	byte	$41, $20, $20, $18, $f6, $e9, $ec, $bc, $c0, $e5, $db, $ed, $0d, $16, $1b, $46
0d128     40 19 26 11 
0d12c     EF EA DF BA 
0d130     C4 E7 D8 F3 
0d134     13 15 26 46 | 	byte	$40, $19, $26, $11, $ef, $ea, $df, $ba, $c4, $e7, $d8, $f3, $13, $15, $26, $46
0d138     3A 18 26 0C 
0d13c     E8 E9 D3 B9 
0d140     C9 E5 DB F8 
0d144     19 17 2F 48 | 	byte	$3a, $18, $26, $0c, $e8, $e9, $d3, $b9, $c9, $e5, $db, $f8, $19, $17, $2f, $48
0d148     34 1E 21 08 
0d14c     E4 E6 CD B8 
0d150     CF DE E1 FC 
0d154     1F 1D 36 49 | 	byte	$34, $1e, $21, $08, $e4, $e6, $cd, $b8, $cf, $de, $e1, $fc, $1f, $1d, $36, $49
0d158     32 25 1C 01 
0d15c     DF DE C7 B8 
0d160     D0 D9 E4 04 
0d164     22 27 3B 48 | 	byte	$32, $25, $1c, $01, $df, $de, $c7, $b8, $d0, $d9, $e4, $04, $22, $27, $3b, $48
0d168     2F 28 19 F8 
0d16c     DD D3 C3 B9 
0d170     D1 D7 E9 0C 
0d174     24 31 3D 47 | 	byte	$2f, $28, $19, $f8, $dd, $d3, $c3, $b9, $d1, $d7, $e9, $0c, $24, $31, $3d, $47
0d178     2E 28 15 F3 
0d17c     D9 CC C2 BA 
0d180     CF D9 EF 10 
0d184     2A 37 3F 46 | 	byte	$2e, $28, $15, $f3, $d9, $cc, $c2, $ba, $cf, $d9, $ef, $10, $2a, $37, $3f, $46
0d188     33 25 0E EB 
0d18c     D2 C7 C0 BA 
0d190     CC DD F2 18 
0d194     32 3B 41 46 | 	byte	$33, $25, $0e, $eb, $d2, $c7, $c0, $ba, $cc, $dd, $f2, $18, $32, $3b, $41, $46
0d198     35 20 0A E3 
0d19c     CC C3 BF B9 
0d1a0     CA E3 F9 20 
0d1a4     38 3F 42 47 | 	byte	$35, $20, $0a, $e3, $cc, $c3, $bf, $b9, $ca, $e3, $f9, $20, $38, $3f, $42, $47
0d1a8     37 1D 03 DC 
0d1ac     C4 BF BE B9 
0d1b0     C9 E5 01 24 
0d1b4     3F 42 44 47 | 	byte	$37, $1d, $03, $dc, $c4, $bf, $be, $b9, $c9, $e5, $01, $24, $3f, $42, $44, $47
0d1b8     39 17 FB D7 
0d1bc     BD BC BA BA 
0d1c0     C8 EB 09 2D 
0d1c4     45 45 48 47 | 	byte	$39, $17, $fb, $d7, $bd, $bc, $ba, $ba, $c8, $eb, $09, $2d, $45, $45, $48, $47
0d1c8     36 12 F2 D0 
0d1cc     B7 BB B6 B9 
0d1d0     CB F0 0F 33 
0d1d4     4A 46 4B 47 | 	byte	$36, $12, $f2, $d0, $b7, $bb, $b6, $b9, $cb, $f0, $0f, $33, $4a, $46, $4b, $47
0d1d8     31 0F E9 CA 
0d1dc     B3 B9 B4 B8 
0d1e0     CE F5 19 39 
0d1e4     4E 49 4D 49 | 	byte	$31, $0f, $e9, $ca, $b3, $b9, $b4, $b8, $ce, $f5, $19, $39, $4e, $49, $4d, $49
0d1e8     30 09 E2 C3 
0d1ec     B0 B5 B3 B6 
0d1f0     D2 FA 21 40 
0d1f4     51 4E 4D 4A | 	byte	$30, $09, $e2, $c3, $b0, $b5, $b3, $b6, $d2, $fa, $21, $40, $51, $4e, $4d, $4a
0d1f8     2C 02 DA BC 
0d1fc     AE B0 B4 B6 
0d200     DA 00 2A 48 
0d204     53 53 4D 49 | 	byte	$2c, $02, $da, $bc, $ae, $b0, $b4, $b6, $da, $00, $2a, $48, $53, $53, $4d, $49
0d208     28 FB D2 B6 
0d20c     AB AB B4 B8 
0d210     DB 0B 2E 4D 
0d214     56 57 4C 49 | 	byte	$28, $fb, $d2, $b6, $ab, $ab, $b4, $b8, $db, $0b, $2e, $4d, $56, $57, $4c, $49
0d218     20 F1 CD B1 
0d21c     A7 A8 B4 B7 
0d220     E1 17 33 51 
0d224     5C 58 4D 47 | 	byte	$20, $f1, $cd, $b1, $a7, $a8, $b4, $b7, $e1, $17, $33, $51, $5c, $58, $4d, $47
0d228     1B E8 CA AE 
0d22c     A1 A8 B4 BB 
0d230     E8 1E 3B 53 
0d234     61 59 4C 43 | 	byte	$1b, $e8, $ca, $ae, $a1, $a8, $b4, $bb, $e8, $1e, $3b, $53, $61, $59, $4c, $43
0d238     14 DD C2 AC 
0d23c     9B A6 B5 BF 
0d240     EC 26 42 56 
0d244     67 5A 4C 42 | 	byte	$14, $dd, $c2, $ac, $9b, $a6, $b5, $bf, $ec, $26, $42, $56, $67, $5a, $4c, $42
0d248     10 D6 BD A7 
0d24c     98 A6 B4 C0 
0d250     F6 2C 45 5C 
0d254     6A 58 4C 3E | 	byte	$10, $d6, $bd, $a7, $98, $a6, $b4, $c0, $f6, $2c, $45, $5c, $6a, $58, $4c, $3e
0d258     04 D2 B8 A0 
0d25c     95 A9 B4 C5 
0d260     04 30 4A 61 
0d264     6D 55 4B 3A | 	byte	$04, $d2, $b8, $a0, $95, $a9, $b4, $c5, $04, $30, $4a, $61, $6d, $55, $4b, $3a
0d268     F7 CC B3 9C 
0d26c     93 AC B5 CB 
0d270     0F 36 4F 68 
0d274     6E 54 4B 31 | 	byte	$f7, $cc, $b3, $9c, $93, $ac, $b5, $cb, $0f, $36, $4f, $68, $6e, $54, $4b, $31
0d278     F2 C7 AD 95 
0d27c     92 AC B7 D3 
0d280     13 3B 52 6E 
0d284     6D 55 49 2E | 	byte	$f2, $c7, $ad, $95, $92, $ac, $b7, $d3, $13, $3b, $52, $6e, $6d, $55, $49, $2e
0d288     E5 C2 AB 8F 
0d28c     92 AD B7 DA 
0d290     1B 3E 5B 72 
0d294     6C 54 48 1F | 	byte	$e5, $c2, $ab, $8f, $92, $ad, $b7, $da, $1b, $3e, $5b, $72, $6c, $54, $48, $1f
0d298     DF BF A3 8C 
0d29c     96 AD B9 DF 
0d2a0     24 42 60 77 
0d2a4     6B 53 46 1A | 	byte	$df, $bf, $a3, $8c, $96, $ad, $b9, $df, $24, $42, $60, $77, $6b, $53, $46, $1a
0d2a8     D6 BD 9C 88 
0d2ac     97 AE BC EC 
0d2b0     2C 45 68 79 
0d2b4     65 51 43 12 | 	byte	$d6, $bd, $9c, $88, $97, $ae, $bc, $ec, $2c, $45, $68, $79, $65, $51, $43, $12
0d2b8     D2 B8 95 87 
0d2bc     9C AF C1 F6 
0d2c0     30 4C 6E 7B 
0d2c4     64 51 3C 04 | 	byte	$d2, $b8, $95, $87, $9c, $af, $c1, $f6, $30, $4c, $6e, $7b, $64, $51, $3c, $04
0d2c8     CD B1 90 87 
0d2cc     9C B0 C7 00 
0d2d0     33 52 71 79 
0d2d4     64 50 36 FA | 	byte	$cd, $b1, $90, $87, $9c, $b0, $c7, $00, $33, $52, $71, $79, $64, $50, $36, $fa
0d2d8     CB AB 8C 88 
0d2dc     9C B3 D0 0A 
0d2e0     37 59 76 75 
0d2e4     64 4C 31 F1 | 	byte	$cb, $ab, $8c, $88, $9c, $b3, $d0, $0a, $37, $59, $76, $75, $64, $4c, $31, $f1
0d2e8     C5 A3 89 8D 
0d2ec     9D B7 D4 13 
0d2f0     3B 62 79 73 
0d2f4     63 49 24 EC | 	byte	$c5, $a3, $89, $8d, $9d, $b7, $d4, $13, $3b, $62, $79, $73, $63, $49, $24, $ec
0d2f8     BE 9D 87 8F 
0d2fc     9E BA DF 18 
0d300     42 67 7A 71 
0d304     62 44 1A E9 | 	byte	$be, $9d, $87, $8f, $9e, $ba, $df, $18, $42, $67, $7a, $71, $62, $44, $1a, $e9
0d308     B9 97 87 90 
0d30c     9E BF EB 1A 
0d310     4A 69 79 71 
0d314     60 3D 13 E3 | 	byte	$b9, $97, $87, $90, $9e, $bf, $eb, $1a, $4a, $69, $79, $71, $60, $3d, $13, $e3
0d318     B2 94 8A 8F 
0d31c     A2 C5 F1 20 
0d320     52 6E 75 73 
0d324     5A 3A 0C DC | 	byte	$b2, $94, $8a, $8f, $a2, $c5, $f1, $20, $52, $6e, $75, $73, $5a, $3a, $0c, $dc
0d328     AD 8F 8D 8D 
0d32c     A9 CB F9 24 
0d330     55 72 72 73 
0d334     54 31 07 D7 | 	byte	$ad, $8f, $8d, $8d, $a9, $cb, $f9, $24, $55, $72, $72, $73, $54, $31, $07, $d7
0d338     A8 8C 8F 8E 
0d33c     AC D6 FD 2C 
0d340     5A 73 71 71 
0d344     4E 25 04 CC | 	byte	$a8, $8c, $8f, $8e, $ac, $d6, $fd, $2c, $5a, $73, $71, $71, $4e, $25, $04, $cc
0d348     A2 8E 8E 8E 
0d34c     B2 E0 01 36 
0d350     5F 71 73 70 
0d354     4B 1C FF C3 | 	byte	$a2, $8e, $8e, $8e, $b2, $e0, $01, $36, $5f, $71, $73, $70, $4b, $1c, $ff, $c3
0d358     9E 90 8B 93 
0d35c     BA E6 05 40 
0d360     61 6D 77 6A 
0d364     41 19 F7 BD | 	byte	$9e, $90, $8b, $93, $ba, $e6, $05, $40, $61, $6d, $77, $6a, $41, $19, $f7, $bd
0d368     9D 94 8A 9A 
0d36c     C5 E8 0D 43 
0d370     66 6C 79 63 
0d374     3B 17 EE BA | 	byte	$9d, $94, $8a, $9a, $c5, $e8, $0d, $43, $66, $6c, $79, $63, $3b, $17, $ee, $ba
0d378     9A 95 88 A1 
0d37c     CB E9 12 48 
0d380     65 6D 78 5C 
0d384     2E 15 E8 B4 | 	byte	$9a, $95, $88, $a1, $cb, $e9, $12, $48, $65, $6d, $78, $5c, $2e, $15, $e8, $b4
0d388     9B 93 89 A8 
0d38c     D6 EC 1D 50 
0d390     62 6F 76 55 
0d394     27 13 E0 AF | 	byte	$9b, $93, $89, $a8, $d6, $ec, $1d, $50, $62, $6f, $76, $55, $27, $13, $e0, $af
0d398     A0 90 8D AD 
0d39c     DC EE 26 52 
0d3a0     5F 72 71 4E 
0d3a4     23 10 D7 AB | 	byte	$a0, $90, $8d, $ad, $dc, $ee, $26, $52, $5f, $72, $71, $4e, $23, $10, $d7, $ab
0d3a8     A2 8D 90 B8 
0d3ac     DD F5 29 54 
0d3b0     5E 74 6E 42 
0d3b4     22 07 D3 AB | 	byte	$a2, $8d, $90, $b8, $dd, $f5, $29, $54, $5e, $74, $6e, $42, $22, $07, $d3, $ab
0d3b8     A2 8C 95 C4 
0d3bc     DF FB 33 54 
0d3c0     60 74 68 38 
0d3c4     21 01 C9 AD | 	byte	$a2, $8c, $95, $c4, $df, $fb, $33, $54, $60, $74, $68, $38, $21, $01, $c9, $ad
0d3c8     9E 8E 9D CC 
0d3cc     E0 03 39 51 
0d3d0     63 71 60 32 
0d3d4     20 FA C8 B0 | 	byte	$9e, $8e, $9d, $cc, $e0, $03, $39, $51, $63, $71, $60, $32, $20, $fa, $c8, $b0
0d3d8     9B 90 A7 D1 
0d3dc     E2 09 3A 4F 
0d3e0     67 6F 51 2F 
0d3e4     19 F6 C3 B1 | 	byte	$9b, $90, $a7, $d1, $e2, $09, $3a, $4f, $67, $6f, $51, $2f, $19, $f6, $c3, $b1
0d3e8     98 93 B1 D2 
0d3ec     E8 0D 3E 50 
0d3f0     69 6B 49 2C 
0d3f4     18 EF C2 B0 | 	byte	$98, $93, $b1, $d2, $e8, $0d, $3e, $50, $69, $6b, $49, $2c, $18, $ef, $c2, $b0
0d3f8     97 99 BB D5 
0d3fc     EB 16 3C 51 
0d400     68 65 3F 29 
0d404     13 E8 C4 AC | 	byte	$97, $99, $bb, $d5, $eb, $16, $3c, $51, $68, $65, $3f, $29, $13, $e8, $c4, $ac
0d408     98 9F C4 D6 
0d40c     F0 1C 3B 55 
0d410     66 5B 3A 28 
0d414     0E E5 C3 A8 | 	byte	$98, $9f, $c4, $d6, $f0, $1c, $3b, $55, $66, $5b, $3a, $28, $0e, $e5, $c3, $a8
0d418     9C AA C6 DB 
0d41c     F5 1B 3D 57 
0d420     63 51 39 23 
0d424     0C E2 C0 A9 | 	byte	$9c, $aa, $c6, $db, $f5, $1b, $3d, $57, $63, $51, $39, $23, $0c, $e2, $c0, $a9
0d428     A0 B2 C9 E0 
0d42c     F9 1E 3E 58 
0d430     5C 4A 36 1F 
0d434     06 E1 BC A8 | 	byte	$a0, $b2, $c9, $e0, $f9, $1e, $3e, $58, $5c, $4a, $36, $1f, $06, $e1, $bc, $a8
0d438     A8 B9 CC E2 
0d43c     FB 1E 43 58 
0d440     53 44 31 1A 
0d444     03 E1 BA A9 | 	byte	$a8, $b9, $cc, $e2, $fb, $1e, $43, $58, $53, $44, $31, $1a, $03, $e1, $ba, $a9
0d448     B0 BE CF E9 
0d44c     FD 1F 47 55 
0d450     4A 41 2E 15 
0d454     02 DE B7 AD | 	byte	$b0, $be, $cf, $e9, $fd, $1f, $47, $55, $4a, $41, $2e, $15, $02, $de, $b7, $ad
0d458     B9 C0 D5 EB 
0d45c     FE 24 4A 50 
0d460     43 3E 28 13 
0d464     02 DC B5 B4 | 	byte	$b9, $c0, $d5, $eb, $fe, $24, $4a, $50, $43, $3e, $28, $13, $02, $dc, $b5, $b4
0d468     C0 C4 D9 EE 
0d46c     FE 27 4A 48 
0d470     3E 3A 24 11 
0d474     01 D5 B6 BD | 	byte	$c0, $c4, $d9, $ee, $fe, $27, $4a, $48, $3e, $3a, $24, $11, $01, $d5, $b6, $bd
0d478     C3 C6 DF EE 
0d47c     FE 2E 49 3E 
0d480     3D 37 1D 12 
0d484     FE CE B9 C7 | 	byte	$c3, $c6, $df, $ee, $fe, $2e, $49, $3e, $3d, $37, $1d, $12, $fe, $ce, $b9, $c7
0d488     C3 CC E5 EC 
0d48c     04 34 44 36 
0d490     3D 33 19 16 
0d494     F9 CA C0 CD | 	byte	$c3, $cc, $e5, $ec, $04, $34, $44, $36, $3d, $33, $19, $16, $f9, $ca, $c0, $cd
0d498     C3 D0 E9 E9 
0d49c     09 3B 3C 32 
0d4a0     3D 2C 16 19 
0d4a4     F0 C7 CB D1 | 	byte	$c3, $d0, $e9, $e9, $09, $3b, $3c, $32, $3d, $2c, $16, $19, $f0, $c7, $cb, $d1
0d4a8     C5 D8 EA E7 
0d4ac     14 3B 30 30 
0d4b0     3A 27 17 19 
0d4b4     EE C6 D3 CF | 	byte	$c5, $d8, $ea, $e7, $14, $3b, $30, $30, $3a, $27, $17, $19, $ee, $c6, $d3, $cf
0d4b8     C7 DE E8 EA 
0d4bc     17 38 29 31 
0d4c0     37 20 1B 16 
0d4c4     E6 CA DB CE | 	byte	$c7, $de, $e8, $ea, $17, $38, $29, $31, $37, $20, $1b, $16, $e6, $ca, $db, $ce
0d4c8     CA E2 E3 ED 
0d4cc     1F 32 22 32 
0d4d0     33 1B 1E 10 
0d4d4     DF D2 DE CD | 	byte	$ca, $e2, $e3, $ed, $1f, $32, $22, $32, $33, $1b, $1e, $10, $df, $d2, $de, $cd
0d4d8     CF E6 E0 F5 
0d4dc     20 29 22 32 
0d4e0     2E 1A 21 07 
0d4e4     DE DD DF CE | 	byte	$cf, $e6, $e0, $f5, $20, $29, $22, $32, $2e, $1a, $21, $07, $de, $dd, $df, $ce
0d4e8     D6 E6 DF FD 
0d4ec     22 1F 21 32 
0d4f0     27 1B 20 04 
0d4f4     DE E4 DE CF | 	byte	$d6, $e6, $df, $fd, $22, $1f, $21, $32, $27, $1b, $20, $04, $de, $e4, $de, $cf
0d4f8     DA E3 E1 FF 
0d4fc     20 1A 23 31 
0d500     23 1F 1E FC 
0d504     E3 E8 DC D0 | 	byte	$da, $e3, $e1, $ff, $20, $1a, $23, $31, $23, $1f, $1e, $fc, $e3, $e8, $dc, $d0
0d508     DF E0 E3 06 
0d50c     19 16 25 2E 
0d510     20 20 1B F7 
0d514     EA EA DA D4 | 	byte	$df, $e0, $e3, $06, $19, $16, $25, $2e, $20, $20, $1b, $f7, $ea, $ea, $da, $d4
0d518     E0 E0 E7 0A 
0d51c     12 16 27 2A 
0d520     20 20 16 F8 
0d524     F0 EA DA D8 | 	byte	$e0, $e0, $e7, $0a, $12, $16, $27, $2a, $20, $20, $16, $f8, $f0, $ea, $da, $d8
0d528     E0 E1 ED 08 
0d52c     0E 16 28 26 
0d530     21 1F 13 F9 
0d534     F3 E9 D8 DB | 	byte	$e0, $e1, $ed, $08, $0e, $16, $28, $26, $21, $1f, $13, $f9, $f3, $e9, $d8, $db
0d538     DF E1 F0 04 
0d53c     0C 17 26 23 
0d540     20 1E 0D FF 
0d544     F4 E8 DA DD | 	byte	$df, $e1, $f0, $04, $0c, $17, $26, $23, $20, $1e, $0d, $ff, $f4, $e8, $da, $dd
0d548     E0 E1 F3 FF 
0d54c     0C 19 24 23 
0d550     1F 1D 0C 02 
0d554     F3 E6 DC DC | 	byte	$e0, $e1, $f3, $ff, $0c, $19, $24, $23, $1f, $1d, $0c, $02, $f3, $e6, $dc, $dc
0d558     E2 E3 F2 FD 
0d55c     0C 19 22 24 
0d560     1D 1C 0F 03 
0d564     F4 E5 DE DC | 	byte	$e2, $e3, $f2, $fd, $0c, $19, $22, $24, $1d, $1c, $0f, $03, $f4, $e5, $de, $dc
0d568     E4 E5 EF FC 
0d56c     0D 1B 21 24 
0d570     1C 1B 12 03 
0d574     F2 E5 DF DD | 	byte	$e4, $e5, $ef, $fc, $0d, $1b, $21, $24, $1c, $1b, $12, $03, $f2, $e5, $df, $dd
0d578     E4 E6 EC FD 
0d57c     0E 1C 21 22 
0d580     1C 1A 15 02 
0d584     F1 E5 DE E0 | 	byte	$e4, $e6, $ec, $fd, $0e, $1c, $21, $22, $1c, $1a, $15, $02, $f1, $e5, $de, $e0
0d588     E4 E5 EB 00 
0d58c     10 1B 22 20 
0d590     1C 1C 17 00 
0d594     F0 E5 DD E2 | 	byte	$e4, $e5, $eb, $00, $10, $1b, $22, $20, $1c, $1c, $17, $00, $f0, $e5, $dd, $e2
0d598     E4 E2 EA 00 
0d59c     11 1A 22 1D 
0d5a0     1C 20 15 FD 
0d5a4     EE E4 DE E3 | 	byte	$e4, $e2, $ea, $00, $11, $1a, $22, $1d, $1c, $20, $15, $fd, $ee, $e4, $de, $e3
0d5a8     E3 DE ED 02 
0d5ac     11 1D 21 1C 
0d5b0     1E 24 12 FC 
0d5b4     EE E3 DF E4 | 	byte	$e3, $de, $ed, $02, $11, $1d, $21, $1c, $1e, $24, $12, $fc, $ee, $e3, $df, $e4
0d5b8     E1 DB ED 05 
0d5bc     11 1E 20 1C 
0d5c0     21 25 11 F9 
0d5c4     F0 E1 E1 E4 | 	byte	$e1, $db, $ed, $05, $11, $1e, $20, $1c, $21, $25, $11, $f9, $f0, $e1, $e1, $e4
0d5c8     DC DB F0 08 
0d5cc     11 20 1E 1C 
0d5d0     27 25 0D F7 
0d5d4     EE E0 E2 E4 | 	byte	$dc, $db, $f0, $08, $11, $20, $1e, $1c, $27, $25, $0d, $f7, $ee, $e0, $e2, $e4
0d5d8     D6 DB F5 08 
0d5dc     13 20 1D 1D 
0d5e0     2C 23 09 F8 
0d5e4     EB E0 E3 E1 | 	byte	$d6, $db, $f5, $08, $13, $20, $1d, $1d, $2c, $23, $09, $f8, $eb, $e0, $e3, $e1
0d5e8     D2 DF F6 08 
0d5ec     16 1F 1D 20 
0d5f0     2F 1F 08 F8 
0d5f4     E8 E1 E3 DE | 	byte	$d2, $df, $f6, $08, $16, $1f, $1d, $20, $2f, $1f, $08, $f8, $e8, $e1, $e3, $de
0d5f8     CF E3 FB 08 
0d5fc     1A 1E 1D 25 
0d600     31 1E 04 F7 
0d604     E6 E3 E4 D8 | 	byte	$cf, $e3, $fb, $08, $1a, $1e, $1d, $25, $31, $1e, $04, $f7, $e6, $e3, $e4, $d8
0d608     D0 E5 FE 09 
0d60c     1C 1D 1D 2B 
0d610     30 19 02 F5 
0d614     E3 E2 E2 D1 | 	byte	$d0, $e5, $fe, $09, $1c, $1d, $1d, $2b, $30, $19, $02, $f5, $e3, $e2, $e2, $d1
0d618     D1 E9 FE 0C 
0d61c     1C 1D 1F 31 
0d620     2D 16 01 F1 
0d624     E3 E2 E0 CC | 	byte	$d1, $e9, $fe, $0c, $1c, $1d, $1f, $31, $2d, $16, $01, $f1, $e3, $e2, $e0, $cc
0d628     D4 EC FF 0E 
0d62c     1C 1D 23 35 
0d630     2C 12 00 EF 
0d634     E3 E2 DA CA | 	byte	$d4, $ec, $ff, $0e, $1c, $1d, $23, $35, $2c, $12, $00, $ef, $e3, $e2, $da, $ca
0d638     D6 F1 00 11 
0d63c     1D 1E 2A 36 
0d640     28 0F FF EC 
0d644     E2 E1 D4 CA | 	byte	$d6, $f1, $00, $11, $1d, $1e, $2a, $36, $28, $0f, $ff, $ec, $e2, $e1, $d4, $ca
0d648     D9 F3 02 14 
0d64c     1E 20 2F 36 
0d650     26 0D FC EB 
0d654     E1 DE CF CA | 	byte	$d9, $f3, $02, $14, $1e, $20, $2f, $36, $26, $0d, $fc, $eb, $e1, $de, $cf, $ca
0d658     DC F4 06 15 
0d65c     20 24 33 36 
0d660     21 0D F8 E9 
0d664     DF D8 CD CA | 	byte	$dc, $f4, $06, $15, $20, $24, $33, $36, $21, $0d, $f8, $e9, $df, $d8, $cd, $ca
0d668     E0 F5 0A 17 
0d66c     21 29 34 35 
0d670     1D 0A F5 E8 
0d674     DD D4 CB CB | 	byte	$e0, $f5, $0a, $17, $21, $29, $34, $35, $1d, $0a, $f5, $e8, $dd, $d4, $cb, $cb
0d678     E4 F9 0B 19 
0d67c     23 30 35 34 
0d680     1D 04 F4 E5 
0d684     DB CE CB CD | 	byte	$e4, $f9, $0b, $19, $23, $30, $35, $34, $1d, $04, $f4, $e5, $db, $ce, $cb, $cd
0d688     E5 FD 0C 1D 
0d68c     28 33 35 32 
0d690     1A 00 F3 E2 
0d694     D5 CD CA D0 | 	byte	$e5, $fd, $0c, $1d, $28, $33, $35, $32, $1a, $00, $f3, $e2, $d5, $cd, $ca, $d0
0d698     E6 02 0E 20 
0d69c     2E 34 37 2F 
0d6a0     18 FB F2 DF 
0d6a4     CF CB C9 D2 | 	byte	$e6, $02, $0e, $20, $2e, $34, $37, $2f, $18, $fb, $f2, $df, $cf, $cb, $c9, $d2
0d6a8     EB 06 0F 24 
0d6ac     33 34 38 2F 
0d6b0     12 F9 F0 D9 
0d6b4     CB CB C8 D2 | 	byte	$eb, $06, $0f, $24, $33, $34, $38, $2f, $12, $f9, $f0, $d9, $cb, $cb, $c8, $d2
0d6b8     F1 06 13 2A 
0d6bc     36 35 39 2D 
0d6c0     0B F9 EB D4 
0d6c4     C8 CB C7 D5 | 	byte	$f1, $06, $13, $2a, $36, $35, $39, $2d, $0b, $f9, $eb, $d4, $c8, $cb, $c7, $d5
0d6c8     F5 07 17 30 
0d6cc     38 35 3A 27 
0d6d0     08 F8 E8 CD 
0d6d4     C8 CA C6 DB | 	byte	$f5, $07, $17, $30, $38, $35, $3a, $27, $08, $f8, $e8, $cd, $c8, $ca, $c6, $db
0d6d8     FA 08 1B 35 
0d6dc     38 37 3A 22 
0d6e0     05 F6 E1 C8 
0d6e4     C8 C9 C6 DE | 	byte	$fa, $08, $1b, $35, $38, $37, $3a, $22, $05, $f6, $e1, $c8, $c8, $c9, $c6, $de
0d6e8     FD 0A 24 39 
0d6ec     39 39 3A 1D 
0d6f0     02 F4 D8 C4 
0d6f4     C7 C6 C7 E3 | 	byte	$fd, $0a, $24, $39, $39, $39, $3a, $1d, $02, $f4, $d8, $c4, $c7, $c6, $c7, $e3
0d6f8     FF 0E 28 3C 
0d6fc     39 3C 36 19 
0d700     00 EF D4 C2 
0d704     C5 C3 CC E9 | 	byte	$ff, $0e, $28, $3c, $39, $3c, $36, $19, $00, $ef, $d4, $c2, $c5, $c3, $cc, $e9
0d708     00 12 2F 3E 
0d70c     3B 3E 34 15 
0d710     FE E9 CF C1 
0d714     C4 C1 D0 EF | 	byte	$00, $12, $2f, $3e, $3b, $3e, $34, $15, $fe, $e9, $cf, $c1, $c4, $c1, $d0, $ef
0d718     01 1A 34 3F 
0d71c     3E 3F 2E 12 
0d720     FE E2 CA C0 
0d724     C1 C1 D4 F0 | 	byte	$01, $1a, $34, $3f, $3e, $3f, $2e, $12, $fe, $e2, $ca, $c0, $c1, $c1, $d4, $f0
0d728     04 1F 38 41 
0d72c     41 3D 2B 0E 
0d730     FB DB C6 BE 
0d734     BD C5 D7 F3 | 	byte	$04, $1f, $38, $41, $41, $3d, $2b, $0e, $fb, $db, $c6, $be, $bd, $c5, $d7, $f3
0d738     08 26 3C 43 
0d73c     45 3B 26 0C 
0d740     F6 D7 C3 BC 
0d744     BB C7 DC F3 | 	byte	$08, $26, $3c, $43, $45, $3b, $26, $0c, $f6, $d7, $c3, $bc, $bb, $c7, $dc, $f3
0d748     0F 29 3F 46 
0d74c     46 36 23 0A 
0d750     EF D5 BF B9 
0d754     BA CA E0 F6 | 	byte	$0f, $29, $3f, $46, $46, $36, $23, $0a, $ef, $d5, $bf, $b9, $ba, $ca, $e0, $f6
0d758     13 2D 42 49 
0d75c     45 35 1F 09 
0d760     E9 CF BD B5 
0d764     BC CD E2 F9 | 	byte	$13, $2d, $42, $49, $45, $35, $1f, $09, $e9, $cf, $bd, $b5, $bc, $cd, $e2, $f9
0d768     18 30 45 4C 
0d76c     44 32 1D 04 
0d770     E3 CD B9 B3 
0d774     BD D0 E3 FF | 	byte	$18, $30, $45, $4c, $44, $32, $1d, $04, $e3, $cd, $b9, $b3, $bd, $d0, $e3, $ff
0d778     1E 35 49 4E 
0d77c     42 2F 1B FE 
0d780     E3 C8 B4 B1 
0d784     C0 D1 E7 03 | 	byte	$1e, $35, $49, $4e, $42, $2f, $1b, $fe, $e3, $c8, $b4, $b1, $c0, $d1, $e7, $03
0d788     1F 3A 4C 4E 
0d78c     3F 2E 16 FA 
0d790     DE C2 B1 B2 
0d794     C0 D3 EC 05 | 	byte	$1f, $3a, $4c, $4e, $3f, $2e, $16, $fa, $de, $c2, $b1, $b2, $c0, $d3, $ec, $05
0d798     23 41 50 4D 
0d79c     3F 2B 13 F9 
0d7a0     DA BE AF B3 
0d7a4     C1 D6 EF 09 | 	byte	$23, $41, $50, $4d, $3f, $2b, $13, $f9, $da, $be, $af, $b3, $c1, $d6, $ef, $09
0d7a8     28 45 52 4D 
0d7ac     3D 27 0E F6 
0d7b0     D8 B7 AE B5 
0d7b4     C3 D9 F4 0C | 	byte	$28, $45, $52, $4d, $3d, $27, $0e, $f6, $d8, $b7, $ae, $b5, $c3, $d9, $f4, $0c
0d7b8     2A 4C 51 4B 
0d7bc     3D 21 0B F2 
0d7c0     D2 B1 AF B5 
0d7c4     C4 DF F7 0F | 	byte	$2a, $4c, $51, $4b, $3d, $21, $0b, $f2, $d2, $b1, $af, $b5, $c4, $df, $f7, $0f
0d7c8     32 50 50 4B 
0d7cc     3D 1F 08 F1 
0d7d0     C8 AD B0 B5 
0d7d4     C5 E4 F8 12 | 	byte	$32, $50, $50, $4b, $3d, $1f, $08, $f1, $c8, $ad, $b0, $b5, $c5, $e4, $f8, $12
0d7d8     38 53 4F 4B 
0d7dc     3A 18 07 EF 
0d7e0     C2 AC B0 B5 
0d7e4     C8 EB F9 12 | 	byte	$38, $53, $4f, $4b, $3a, $18, $07, $ef, $c2, $ac, $b0, $b5, $c8, $eb, $f9, $12
0d7e8     41 53 4F 4B 
0d7ec     38 12 05 EB 
0d7f0     BB AC B0 B4 
0d7f4     CD EF F9 17 | 	byte	$41, $53, $4f, $4b, $38, $12, $05, $eb, $bb, $ac, $b0, $b4, $cd, $ef, $f9, $17
0d7f8     47 52 4F 4C 
0d7fc     33 10 05 E5 
0d800     B5 AE B1 B3 
0d804     D1 F1 FA 21 | 	byte	$47, $52, $4f, $4c, $33, $10, $05, $e5, $b5, $ae, $b1, $b3, $d1, $f1, $fa, $21
0d808     4E 50 4F 4C 
0d80c     2B 0E 05 DB 
0d810     B0 B0 B0 B4 
0d814     D8 F2 FC 29 | 	byte	$4e, $50, $4f, $4c, $2b, $0e, $05, $db, $b0, $b0, $b0, $b4, $d8, $f2, $fc, $29
0d818     52 50 51 4B 
0d81c     24 0E 03 D1 
0d820     AD B1 AF B7 
0d824     DD F2 00 31 | 	byte	$52, $50, $51, $4b, $24, $0e, $03, $d1, $ad, $b1, $af, $b7, $dd, $f2, $00, $31
0d828     53 4F 53 46 
0d82c     20 0E 00 CE 
0d830     AD B1 AC BA 
0d834     E4 F1 05 39 | 	byte	$53, $4f, $53, $46, $20, $0e, $00, $ce, $ad, $b1, $ac, $ba, $e4, $f1, $05, $39
0d838     52 4E 55 43 
0d83c     1B 0E F9 C1 
0d840     AE B1 AA C1 
0d844     E6 F1 0B 41 | 	byte	$52, $4e, $55, $43, $1b, $0e, $f9, $c1, $ae, $b1, $aa, $c1, $e6, $f1, $0b, $41
0d848     51 4F 56 3C 
0d84c     19 0F F0 BF 
0d850     AE AF AA C9 
0d854     E7 F1 15 43 | 	byte	$51, $4f, $56, $3c, $19, $0f, $f0, $bf, $ae, $af, $aa, $c9, $e7, $f1, $15, $43
0d858     50 51 55 35 
0d85c     19 0D E6 BB 
0d860     B0 AE AD CB 
0d864     E8 F4 1A 46 | 	byte	$50, $51, $55, $35, $19, $0d, $e6, $bb, $b0, $ae, $ad, $cb, $e8, $f4, $1a, $46
0d868     50 53 51 32 
0d86c     17 0C E2 B9 
0d870     B0 AB B1 D0 
0d874     E8 F6 23 47 | 	byte	$50, $53, $51, $32, $17, $0c, $e2, $b9, $b0, $ab, $b1, $d0, $e8, $f6, $23, $47
0d878     50 56 4E 2D 
0d87c     17 07 DA B9 
0d880     AF A9 B4 D5 
0d884     E7 FE 2B 46 | 	byte	$50, $56, $4e, $2d, $17, $07, $da, $b9, $af, $a9, $b4, $d5, $e7, $fe, $2b, $46
0d888     51 56 48 2A 
0d88c     18 00 D7 B8 
0d890     AD AA BB D4 
0d894     E9 06 2B 48 | 	byte	$51, $56, $48, $2a, $18, $00, $d7, $b8, $ad, $aa, $bb, $d4, $e9, $06, $2b, $48
0d898     53 55 42 28 
0d89c     16 FA D1 B7 
0d8a0     AC AC BE D7 
0d8a4     EC 0D 2F 4A | 	byte	$53, $55, $42, $28, $16, $fa, $d1, $b7, $ac, $ac, $be, $d7, $ec, $0d, $2f, $4a
0d8a8     55 53 41 29 
0d8ac     11 F3 CE B6 
0d8b0     AA B0 C2 D8 
0d8b4     F2 11 33 49 | 	byte	$55, $53, $41, $29, $11, $f3, $ce, $b6, $aa, $b0, $c2, $d8, $f2, $11, $33, $49
0d8b8     56 4E 3D 27 
0d8bc     0D EB CB B5 
0d8c0     AA B2 C5 DA 
0d8c4     F5 16 33 4D | 	byte	$56, $4e, $3d, $27, $0d, $eb, $cb, $b5, $aa, $b2, $c5, $da, $f5, $16, $33, $4d
0d8c8     55 4C 3A 27 
0d8cc     07 E7 CB B0 
0d8d0     AB B7 C6 DB 
0d8d4     FD 19 35 4F | 	byte	$55, $4c, $3a, $27, $07, $e7, $cb, $b0, $ab, $b7, $c6, $db, $fd, $19, $35, $4f
0d8d8     54 47 3A 22 
0d8dc     00 E5 CA AF 
0d8e0     AD BA C8 E0 
0d8e4     00 1D 3A 52 | 	byte	$54, $47, $3a, $22, $00, $e5, $ca, $af, $ad, $ba, $c8, $e0, $00, $1d, $3a, $52
0d8e8     52 45 38 1E 
0d8ec     FB E2 C4 AD 
0d8f0     B1 BC C9 E5 
0d8f4     08 1F 3E 52 | 	byte	$52, $45, $38, $1e, $fb, $e2, $c4, $ad, $b1, $bc, $c9, $e5, $08, $1f, $3e, $52
0d8f8     4E 43 37 16 
0d8fc     F8 DF C2 AD 
0d900     B4 BE CC EB 
0d904     0C 21 41 52 | 	byte	$4e, $43, $37, $16, $f8, $df, $c2, $ad, $b4, $be, $cc, $eb, $0c, $21, $41, $52
0d908     4B 41 35 11 
0d90c     F4 DB BD AF 
0d910     B7 BE CF F1 
0d914     0F 24 43 50 | 	byte	$4b, $41, $35, $11, $f4, $db, $bd, $af, $b7, $be, $cf, $f1, $0f, $24, $43, $50
0d918     48 42 2F 0A 
0d91c     F1 D9 BB B0 
0d920     B9 BE D4 F6 
0d924     10 29 47 4E | 	byte	$48, $42, $2f, $0a, $f1, $d9, $bb, $b0, $b9, $be, $d4, $f6, $10, $29, $47, $4e
0d928     45 41 29 06 
0d92c     EE D8 B8 B3 
0d930     BB C0 D8 FC 
0d934     13 2B 48 4B | 	byte	$45, $41, $29, $06, $ee, $d8, $b8, $b3, $bb, $c0, $d8, $fc, $13, $2b, $48, $4b
0d938     44 3F 24 00 
0d93c     ED D3 B7 B6 
0d940     BC C1 DE 01 
0d944     13 30 48 48 | 	byte	$44, $3f, $24, $00, $ed, $d3, $b7, $b6, $bc, $c1, $de, $01, $13, $30, $48, $48
0d948     44 3E 1D FF 
0d94c     EB CE B8 B9 
0d950     BC C3 E6 03 
0d954     17 32 47 46 | 	byte	$44, $3e, $1d, $ff, $eb, $ce, $b8, $b9, $bc, $c3, $e6, $03, $17, $32, $47, $46
0d958     44 39 16 FC 
0d95c     E9 CC B9 BB 
0d960     BD C9 E9 06 
0d964     1A 35 46 44 | 	byte	$44, $39, $16, $fc, $e9, $cc, $b9, $bb, $bd, $c9, $e9, $06, $1a, $35, $46, $44
0d968     43 33 14 F9 
0d96c     E7 C9 BB BC 
0d970     BD CD F0 08 
0d974     1A 37 44 43 | 	byte	$43, $33, $14, $f9, $e7, $c9, $bb, $bc, $bd, $cd, $f0, $08, $1a, $37, $44, $43
0d978     42 30 0E F6 
0d97c     E3 C7 BD BD 
0d980     BF D3 F5 0B 
0d984     20 39 42 43 | 	byte	$42, $30, $0e, $f6, $e3, $c7, $bd, $bd, $bf, $d3, $f5, $0b, $20, $39, $42, $43
0d988     41 29 0A F5 
0d98c     E0 C8 BF BD 
0d990     C1 DB F8 0D 
0d994     21 38 40 42 | 	byte	$41, $29, $0a, $f5, $e0, $c8, $bf, $bd, $c1, $db, $f8, $0d, $21, $38, $40, $42
0d998     3D 24 06 F2 
0d99c     DC C7 C0 BD 
0d9a0     C5 DE FC 0D 
0d9a4     24 38 3F 42 | 	byte	$3d, $24, $06, $f2, $dc, $c7, $c0, $bd, $c5, $de, $fc, $0d, $24, $38, $3f, $42
0d9a8     39 1E 02 F1 
0d9ac     DA C9 C1 BE 
0d9b0     C9 E5 FD 11 
0d9b4     25 36 3F 41 | 	byte	$39, $1e, $02, $f1, $da, $c9, $c1, $be, $c9, $e5, $fd, $11, $25, $36, $3f, $41
0d9b8     34 1A 02 EE 
0d9bc     DA CA C1 C0 
0d9c0     CF E9 FF 13 
0d9c4     26 35 3F 3F | 	byte	$34, $1a, $02, $ee, $da, $ca, $c1, $c0, $cf, $e9, $ff, $13, $26, $35, $3f, $3f
0d9c8     30 15 FE EC 
0d9cc     D9 CB C1 C2 
0d9d0     D4 EC 03 15 
0d9d4     27 34 3F 3C | 	byte	$30, $15, $fe, $ec, $d9, $cb, $c1, $c2, $d4, $ec, $03, $15, $27, $34, $3f, $3c
0d9d8     2A 11 FD EA 
0d9dc     DB CB C0 C5 
0d9e0     D9 EF 05 17 
0d9e4     25 35 3F 38 | 	byte	$2a, $11, $fd, $ea, $db, $cb, $c0, $c5, $d9, $ef, $05, $17, $25, $35, $3f, $38
0d9e8     26 0F F9 E9 
0d9ec     DC CB C1 CA 
0d9f0     DC F2 07 17 
0d9f4     24 36 3E 35 | 	byte	$26, $0f, $f9, $e9, $dc, $cb, $c1, $ca, $dc, $f2, $07, $17, $24, $36, $3e, $35
0d9f8     21 0C F7 E8 
0d9fc     DD C9 C2 CE 
0da00     E1 F5 0A 17 
0da04     24 37 3C 2F | 	byte	$21, $0c, $f7, $e8, $dd, $c9, $c2, $ce, $e1, $f5, $0a, $17, $24, $37, $3c, $2f
0da08     1F 0A F4 EA 
0da0c     DD C8 C5 D4 
0da10     E3 F7 0C 15 
0da14     24 38 38 2A | 	byte	$1f, $0a, $f4, $ea, $dd, $c8, $c5, $d4, $e3, $f7, $0c, $15, $24, $38, $38, $2a
0da18     1C 06 F4 EB 
0da1c     DB C8 C9 D7 
0da20     E5 FC 0D 14 
0da24     24 39 34 26 | 	byte	$1c, $06, $f4, $eb, $db, $c8, $c9, $d7, $e5, $fc, $0d, $14, $24, $39, $34, $26
0da28     19 05 F3 ED 
0da2c     DB C7 CF DB 
0da30     E9 FD 0D 12 
0da34     26 38 30 24 | 	byte	$19, $05, $f3, $ed, $db, $c7, $cf, $db, $e9, $fd, $0d, $12, $26, $38, $30, $24
0da38     16 01 F4 EF 
0da3c     D7 C8 D3 DE 
0da40     EA 01 0B 11 
0da44     2A 37 2A 21 | 	byte	$16, $01, $f4, $ef, $d7, $c8, $d3, $de, $ea, $01, $0b, $11, $2a, $37, $2a, $21
0da48     15 FE F6 EE 
0da4c     D4 CA D8 DF 
0da50     ED 04 09 13 
0da54     2B 33 25 21 | 	byte	$15, $fe, $f6, $ee, $d4, $ca, $d8, $df, $ed, $04, $09, $13, $2b, $33, $25, $21
0da58     11 FD F9 EC 
0da5c     D4 CE DC E0 
0da60     F1 04 06 15 
0da64     2D 2F 23 1F | 	byte	$11, $fd, $f9, $ec, $d4, $ce, $dc, $e0, $f1, $04, $06, $15, $2d, $2f, $23, $1f
0da68     0E FB FB EA 
0da6c     D3 D3 DE E2 
0da70     F4 04 04 18 
0da74     2D 2A 21 1E | 	byte	$0e, $fb, $fb, $ea, $d3, $d3, $de, $e2, $f4, $04, $04, $18, $2d, $2a, $21, $1e
0da78     0A FD FC E5 
0da7c     D3 D9 DF E3 
0da80     F7 02 04 1C 
0da84     2C 24 21 1B | 	byte	$0a, $fd, $fc, $e5, $d3, $d9, $df, $e3, $f7, $02, $04, $1c, $2c, $24, $21, $1b
0da88     07 FF FB E5 
0da8c     D5 DD DF E7 
0da90     FA FE 06 1D 
0da94     2A 21 21 19 | 	byte	$07, $ff, $fb, $e5, $d5, $dd, $df, $e7, $fa, $fe, $06, $1d, $2a, $21, $21, $19
0da98     06 03 FA E3 
0da9c     D9 E0 DF E9 
0daa0     FA FC 07 1E 
0daa4     25 1F 21 15 | 	byte	$06, $03, $fa, $e3, $d9, $e0, $df, $e9, $fa, $fc, $07, $1e, $25, $1f, $21, $15
0daa8     06 05 F9 E1 
0daac     DD E2 E0 EB 
0dab0     F9 FA 0B 1E 
0dab4     21 1E 1F 13 | 	byte	$06, $05, $f9, $e1, $dd, $e2, $e0, $eb, $f9, $fa, $0b, $1e, $21, $1e, $1f, $13
0dab8     08 06 F5 E2 
0dabc     E1 E2 E2 EE 
0dac0     F7 FA 0E 1D 
0dac4     1E 1E 1E 10 | 	byte	$08, $06, $f5, $e2, $e1, $e2, $e2, $ee, $f7, $fa, $0e, $1d, $1e, $1e, $1e, $10
0dac8     0A 05 F3 E4 
0dacc     E3 E1 E2 F0 
0dad0     F5 FC 0E 1B 
0dad4     1C 1F 1B 10 | 	byte	$0a, $05, $f3, $e4, $e3, $e1, $e2, $f0, $f5, $fc, $0e, $1b, $1c, $1f, $1b, $10
0dad8     0C 02 F1 E7 
0dadc     E4 E1 E6 F0 
0dae0     F3 FF 0F 18 
0dae4     1C 1E 1A 11 | 	byte	$0c, $02, $f1, $e7, $e4, $e1, $e6, $f0, $f3, $ff, $0f, $18, $1c, $1e, $1a, $11
0dae8     0C 01 F1 EA 
0daec     E4 E2 E7 EE 
0daf0     F3 00 0F 15 
0daf4     1C 1D 18 13 | 	byte	$0c, $01, $f1, $ea, $e4, $e2, $e7, $ee, $f3, $00, $0f, $15, $1c, $1d, $18, $13
0daf8     0D FF F2 EC 
0dafc     E4 E3 E9 EC 
0db00     F4 02 0D 14 
0db04     1C 1C 17 15 | 	byte	$0d, $ff, $f2, $ec, $e4, $e3, $e9, $ec, $f4, $02, $0d, $14, $1c, $1c, $17, $15
0db08     0B FD F4 EB 
0db0c     E4 E4 E8 EA 
0db10     F6 02 0A 15 
0db14     1C 1B 18 15 | 	byte	$0b, $fd, $f4, $eb, $e4, $e4, $e8, $ea, $f6, $02, $0a, $15, $1c, $1b, $18, $15
0db18     08 FE F6 EB 
0db1c     E4 E5 E6 EB 
0db20     F9 01 09 16 
0db24     1B 1A 1A 15 | 	byte	$08, $fe, $f6, $eb, $e4, $e5, $e6, $eb, $f9, $01, $09, $16, $1b, $1a, $1a, $15
0db28     07 FF F7 EA 
0db2c     E5 E6 E5 ED 
0db30     FA 00 08 18 
0db34     1A 1A 1D 13 | 	byte	$07, $ff, $f7, $ea, $e5, $e6, $e5, $ed, $fa, $00, $08, $18, $1a, $1a, $1d, $13
0db38     06 02 F6 E8 
0db3c     E6 E5 E3 EE 
0db40     FA FD 09 18 
0db44     19 1C 1D 10 | 	byte	$06, $02, $f6, $e8, $e6, $e5, $e3, $ee, $fa, $fd, $09, $18, $19, $1c, $1d, $10
0db48     06 04 F6 E7 
0db4c     E7 E3 E3 F1 
0db50     F9 FB 0B 18 
0db54     18 1E 1D 0D | 	byte	$06, $04, $f6, $e7, $e7, $e3, $e3, $f1, $f9, $fb, $0b, $18, $18, $1e, $1d, $0d
0db58     08 05 F2 E8 
0db5c     E7 E0 E3 F4 
0db60     F7 FA 0F 18 
0db64     18 20 1B 0B | 	byte	$08, $05, $f2, $e8, $e7, $e0, $e3, $f4, $f7, $fa, $0f, $18, $18, $20, $1b, $0b
0db68     0B 05 F1 E8 
0db6c     E7 DE E5 F5 
0db70     F4 FB 11 17 
0db74     1A 23 18 0B | 	byte	$0b, $05, $f1, $e8, $e7, $de, $e5, $f5, $f4, $fb, $11, $17, $1a, $23, $18, $0b
0db78     0E 04 EE E9 
0db7c     E5 DC E8 F4 
0db80     F1 FC 12 16 
0db84     1C 23 16 0C | 	byte	$0e, $04, $ee, $e9, $e5, $dc, $e8, $f4, $f1, $fc, $12, $16, $1c, $23, $16, $0c
0db88     10 00 ED EA 
0db8c     E1 DC EC F2 
0db90     EF 00 13 16 
0db94     21 23 13 0E | 	byte	$10, $00, $ed, $ea, $e1, $dc, $ec, $f2, $ef, $00, $13, $16, $21, $23, $13, $0e
0db98     11 FD ED EA 
0db9c     DE DE ED F0 
0dba0     EF 03 13 17 
0dba4     24 21 12 12 | 	byte	$11, $fd, $ed, $ea, $de, $de, $ed, $f0, $ef, $03, $13, $17, $24, $21, $12, $12
0dba8     10 FB ED E8 
0dbac     DB E0 EF EC 
0dbb0     F1 06 13 19 
0dbb4     26 1F 12 15 | 	byte	$10, $fb, $ed, $e8, $db, $e0, $ef, $ec, $f1, $06, $13, $19, $26, $1f, $12, $15
0dbb8     0E F8 ED E6 
0dbbc     D9 E3 EE E9 
0dbc0     F2 0A 13 1D 
0dbc4     27 1C 13 18 | 	byte	$0e, $f8, $ed, $e6, $d9, $e3, $ee, $e9, $f2, $0a, $13, $1d, $27, $1c, $13, $18
0dbc8     0C F6 ED E1 
0dbcc     D9 E5 EC E8 
0dbd0     F7 0A 13 21 
0dbd4     26 19 16 19 | 	byte	$0c, $f6, $ed, $e1, $d9, $e5, $ec, $e8, $f7, $0a, $13, $21, $26, $19, $16, $19
0dbd8     0A F5 EB DF 
0dbdc     DA E7 E9 E8 
0dbe0     F9 0B 16 23 
0dbe4     24 19 19 17 | 	byte	$0a, $f5, $eb, $df, $da, $e7, $e9, $e8, $f9, $0b, $16, $23, $24, $19, $19, $17
0dbe8     05 F3 E9 DC 
0dbec     DD E7 E6 E9 
0dbf0     FB 0D 18 26 
0dbf4     23 19 1C 16 | 	byte	$05, $f3, $e9, $dc, $dd, $e7, $e6, $e9, $fb, $0d, $18, $26, $23, $19, $1c, $16
0dbf8     02 F4 E6 DA 
0dbfc     DE E6 E3 EC 
0dc00     FF 0D 1C 26 
0dc04     20 1B 1D 13 | 	byte	$02, $f4, $e6, $da, $de, $e6, $e3, $ec, $ff, $0d, $1c, $26, $20, $1b, $1d, $13
0dc08     00 F2 E2 DA 
0dc0c     E0 E4 E3 EF 
0dc10     00 10 20 26 
0dc14     1F 1D 1D 0F | 	byte	$00, $f2, $e2, $da, $e0, $e4, $e3, $ef, $00, $10, $20, $26, $1f, $1d, $1d, $0f
0dc18     FF EF E0 DA 
0dc1c     E1 E1 E4 F1 
0dc20     02 14 22 25 
0dc24     1F 21 1C 0D | 	byte	$ff, $ef, $e0, $da, $e1, $e1, $e4, $f1, $02, $14, $22, $25, $1f, $21, $1c, $0d
0dc28     FE EB DD DC 
0dc2c     E0 DF E6 F4 
0dc30     02 17 23 23 
0dc34     20 22 19 0B | 	byte	$fe, $eb, $dd, $dc, $e0, $df, $e6, $f4, $02, $17, $23, $23, $20, $22, $19, $0b
0dc38     FC E6 DC DD 
0dc3c     DF DE E8 F6 
0dc40     05 1C 23 22 
0dc44     22 22 16 0A | 	byte	$fc, $e6, $dc, $dd, $df, $de, $e8, $f6, $05, $1c, $23, $22, $22, $22, $16, $0a
0dc48     F8 E2 DC DD 
0dc4c     DB DE EA F6 
0dc50     0A 1F 23 23 
0dc54     25 21 15 08 | 	byte	$f8, $e2, $dc, $dd, $db, $de, $ea, $f6, $0a, $1f, $23, $23, $25, $21, $15, $08
0dc58     F6 E0 DD DD 
0dc5c     D9 DF EC F9 
0dc60     0E 20 22 23 
0dc64     27 1E 13 07 | 	byte	$f6, $e0, $dd, $dd, $d9, $df, $ec, $f9, $0e, $20, $22, $23, $27, $1e, $13, $07
0dc68     F0 DE DE DB 
0dc6c     D8 E2 EE F9 
0dc70     12 22 22 26 
0dc74     28 1C 12 04 | 	byte	$f0, $de, $de, $db, $d8, $e2, $ee, $f9, $12, $22, $22, $26, $28, $1c, $12, $04
0dc78     ED DE DE D9 
0dc7c     D8 E5 EF FF 
0dc80     16 22 23 29 
0dc84     27 1B 10 01 | 	byte	$ed, $de, $de, $d9, $d8, $e5, $ef, $ff, $16, $22, $23, $29, $27, $1b, $10, $01
0dc88     E8 DF DD D6 
0dc8c     D9 E7 F0 00 
0dc90     1A 22 24 2A 
0dc94     26 19 0F FD | 	byte	$e8, $df, $dd, $d6, $d9, $e7, $f0, $00, $1a, $22, $24, $2a, $26, $19, $0f, $fd
0dc98     E5 DE DB D4 
0dc9c     DA E8 F1 06 
0dca0     1B 21 26 2C 
0dca4     24 18 0E F9 | 	byte	$e5, $de, $db, $d4, $da, $e8, $f1, $06, $1b, $21, $26, $2c, $24, $18, $0e, $f9
0dca8     E3 DE D9 D3 
0dcac     DE E9 F4 09 
0dcb0     1D 22 28 2C 
0dcb4     23 16 0A F4 | 	byte	$e3, $de, $d9, $d3, $de, $e9, $f4, $09, $1d, $22, $28, $2c, $23, $16, $0a, $f4
0dcb8     E2 DE D6 D4 
0dcbc     DF EA F6 0D 
0dcc0     1E 22 2B 2C 
0dcc4     20 15 08 F0 | 	byte	$e2, $de, $d6, $d4, $df, $ea, $f6, $0d, $1e, $22, $2b, $2c, $20, $15, $08, $f0
0dcc8     E2 DC D4 D4 
0dccc     E1 EC FA 12 
0dcd0     00 00 00 00 
0dcd4     28 03 F6 DE | 	byte	$e2, $dc, $d4, $d4, $e1, $ec, $fa, $12, $00, $00, $00, $00, $28, $03, $f6, $de
0dcd8     B7 E4 04 27 
0dcdc     5A 5C 59 11 
0dce0     E8 BB A0 A2 
0dce4     CE 22 74 66 | 	byte	$b7, $e4, $04, $27, $5a, $5c, $59, $11, $e8, $bb, $a0, $a2, $ce, $22, $74, $66
0dce8     1B D4 BE BD 
0dcec     D5 DD ED FC 
0dcf0     F2 13 2C 34 
0dcf4     2A 05 FD D1 | 	byte	$1b, $d4, $be, $bd, $d5, $dd, $ed, $fc, $f2, $13, $2c, $34, $2a, $05, $fd, $d1
0dcf8     B0 DA FC 26 
0dcfc     62 61 5E 16 
0dd00     DB AB A7 A5 
0dd04     E0 30 7D 67 | 	byte	$b0, $da, $fc, $26, $62, $61, $5e, $16, $db, $ab, $a7, $a5, $e0, $30, $7d, $67
0dd08     0F CE B4 CC 
0dd0c     B9 CA F0 04 
0dd10     1F 27 23 1A 
0dd14     30 09 FC C3 | 	byte	$0f, $ce, $b4, $cc, $b9, $ca, $f0, $04, $1f, $27, $23, $1a, $30, $09, $fc, $c3
0dd18     BB D1 FF 2B 
0dd1c     60 6E 54 1D 
0dd20     C4 8F 9E C8 
0dd24     1B 6D 7C 53 | 	byte	$bb, $d1, $ff, $2b, $60, $6e, $54, $1d, $c4, $8f, $9e, $c8, $1b, $6d, $7c, $53
0dd28     DB B6 88 8C 
0dd2c     83 93 CF 41 
0dd30     6E 7D 76 57 
0dd34     52 03 B8 86 | 	byte	$db, $b6, $88, $8c, $83, $93, $cf, $41, $6e, $7d, $76, $57, $52, $03, $b8, $86
0dd38     9A C8 0C 5B 
0dd3c     7F 7F 52 E7 
0dd40     89 80 80 CD 
0dd44     4C 7F 7F 4B | 	byte	$9a, $c8, $0c, $5b, $7f, $7f, $52, $e7, $89, $80, $80, $cd, $4c, $7f, $7f, $4b
0dd48     D3 AD 98 88 
0dd4c     82 82 BA 2F 
0dd50     6C 7F 6A 5C 
0dd54     36 1C D4 87 | 	byte	$d3, $ad, $98, $88, $82, $82, $ba, $2f, $6c, $7f, $6a, $5c, $36, $1c, $d4, $87
0dd58     96 B8 EB 46 
0dd5c     76 7F 59 F9 
0dd60     A9 80 80 AD 
0dd64     39 7F 7F 55 | 	byte	$96, $b8, $eb, $46, $76, $7f, $59, $f9, $a9, $80, $80, $ad, $39, $7f, $7f, $55
0dd68     F1 B9 9C 8D 
0dd6c     81 81 A1 18 
0dd70     63 7F 6B 51 
0dd74     32 14 E9 9F | 	byte	$f1, $b9, $9c, $8d, $81, $81, $a1, $18, $63, $7f, $6b, $51, $32, $14, $e9, $9f
0dd78     A2 B9 F0 2F 
0dd7c     65 70 50 FC 
0dd80     BB 82 81 BD 
0dd84     31 7F 7F 38 | 	byte	$a2, $b9, $f0, $2f, $65, $70, $50, $fc, $bb, $82, $81, $bd, $31, $7f, $7f, $38
0dd88     08 D2 B3 8D 
0dd8c     80 82 A2 01 
0dd90     55 72 7F 53 
0dd94     32 0B E8 C4 | 	byte	$08, $d2, $b3, $8d, $80, $82, $a2, $01, $55, $72, $7f, $53, $32, $0b, $e8, $c4
0dd98     B5 C2 F5 31 
0dd9c     54 5C 34 08 
0dda0     BB 9D 8E DC 
0dda4     3F 77 64 28 | 	byte	$b5, $c2, $f5, $31, $54, $5c, $34, $08, $bb, $9d, $8e, $dc, $3f, $77, $64, $28
0dda8     FE E8 C6 92 
0ddac     80 91 B9 F4 
0ddb0     43 66 6E 56 
0ddb4     34 02 DD DC | 	byte	$fe, $e8, $c6, $92, $80, $91, $b9, $f4, $43, $66, $6e, $56, $34, $02, $dd, $dc
0ddb8     D9 D1 FB 2D 
0ddbc     42 41 23 ED 
0ddc0     BE A9 B0 F8 
0ddc4     52 66 38 FD | 	byte	$d9, $d1, $fb, $2d, $42, $41, $23, $ed, $be, $a9, $b0, $f8, $52, $66, $38, $fd
0ddc8     F4 FA DB 9A 
0ddcc     85 9A D5 03 
0ddd0     43 52 5E 4D 
0ddd4     38 F6 CD EE | 	byte	$f4, $fa, $db, $9a, $85, $9a, $d5, $03, $43, $52, $5e, $4d, $38, $f6, $cd, $ee
0ddd8     F5 FE 07 21 
0dddc     29 24 FB D1 
0dde0     BE B1 D1 20 
0dde4     68 61 19 D9 | 	byte	$f5, $fe, $07, $21, $29, $24, $fb, $d1, $be, $b1, $d1, $20, $68, $61, $19, $d9
0dde8     DF 03 F9 AC 
0ddec     94 A4 E0 1E 
0ddf0     37 48 56 40 
0ddf4     2C E9 C1 EB | 	byte	$df, $03, $f9, $ac, $94, $a4, $e0, $1e, $37, $48, $56, $40, $2c, $e9, $c1, $eb
0ddf8     FE 0E 2B 22 
0ddfc     28 05 E4 B9 
0de00     BB BC F0 45 
0de04     7D 5D F4 BF | 	byte	$fe, $0e, $2b, $22, $28, $05, $e4, $b9, $bb, $bc, $f0, $45, $7d, $5d, $f4, $bf
0de08     C7 FA F9 CC 
0de0c     A4 B4 DC 29 
0de10     30 39 4D 3A 
0de14     2F DB C1 DC | 	byte	$c7, $fa, $f9, $cc, $a4, $b4, $dc, $29, $30, $39, $4d, $3a, $2f, $db, $c1, $dc
0de18     03 16 43 36 
0de1c     28 F6 D5 9D 
0de20     AD C1 16 69 
0de24     7F 6B E5 AA | 	byte	$03, $16, $43, $36, $28, $f6, $d5, $9d, $ad, $c1, $16, $69, $7f, $6b, $e5, $aa
0de28     A3 EA E3 D1 
0de2c     BF D0 EB 2D 
0de30     3A 33 44 2F 
0de34     25 C7 CC DF | 	byte	$a3, $ea, $e3, $d1, $bf, $d0, $eb, $2d, $3a, $33, $44, $2f, $25, $c7, $cc, $df
0de38     05 27 4B 4E 
0de3c     2C EC BD 8D 
0de40     95 BD 23 7F 
0de44     7F 61 E7 AC | 	byte	$05, $27, $4b, $4e, $2c, $ec, $bd, $8d, $95, $bd, $23, $7f, $7f, $61, $e7, $ac
0de48     A0 CF C4 D0 
0de4c     CD ED 01 37 
0de50     31 37 3A 37 
0de54     0A B9 BB E7 | 	byte	$a0, $cf, $c4, $d0, $cd, $ed, $01, $37, $31, $37, $3a, $37, $0a, $b9, $bb, $e7
0de58     00 34 53 59 
0de5c     30 F2 AC 82 
0de60     83 B5 2A 7F 
0de64     7F 5F EB B6 | 	byte	$00, $34, $53, $59, $30, $f2, $ac, $82, $83, $b5, $2a, $7f, $7f, $5f, $eb, $b6
0de68     A9 C5 A2 B7 
0de6c     D3 00 1A 3F 
0de70     39 3D 3D 3D 
0de74     03 B2 B2 CE | 	byte	$a9, $c5, $a2, $b7, $d3, $00, $1a, $3f, $39, $3d, $3d, $3d, $03, $b2, $b2, $ce
0de78     FE 3F 53 5B 
0de7c     2C F9 A8 80 
0de80     83 B1 3A 7F 
0de84     7F 4C E0 B4 | 	byte	$fe, $3f, $53, $5b, $2c, $f9, $a8, $80, $83, $b1, $3a, $7f, $7f, $4c, $e0, $b4
0de88     A7 B2 9D AB 
0de8c     DC 15 41 54 
0de90     3D 3C 38 36 
0de94     FF B8 B6 CA | 	byte	$a7, $b2, $9d, $ab, $dc, $15, $41, $54, $3d, $3c, $38, $36, $ff, $b8, $b6, $ca
0de98     FD 40 50 56 
0de9c     23 F6 AA 81 
0dea0     81 BB 38 7F 
0dea4     7F 30 DB B3 | 	byte	$fd, $40, $50, $56, $23, $f6, $aa, $81, $81, $bb, $38, $7f, $7f, $30, $db, $b3
0dea8     C3 AF 9D 98 
0deac     D0 14 48 5C 
0deb0     38 39 30 3D 
0deb4     03 C3 B8 C5 | 	byte	$c3, $af, $9d, $98, $d0, $14, $48, $5c, $38, $39, $30, $3d, $03, $c3, $b8, $c5
0deb8     F4 35 4E 52 
0debc     2A EC B3 8B 
0dec0     85 CA 3B 7F 
0dec4     7F 32 DA BA | 	byte	$f4, $35, $4e, $52, $2a, $ec, $b3, $8b, $85, $ca, $3b, $7f, $7f, $32, $da, $ba
0dec8     CC B2 9C 95 
0decc     BF 08 4D 5D 
0ded0     41 3D 39 33 
0ded4     03 CF C1 C7 | 	byte	$cc, $b2, $9c, $95, $bf, $08, $4d, $5d, $41, $3d, $39, $33, $03, $cf, $c1, $c7
0ded8     F0 23 51 46 
0dedc     26 EC B4 90 
0dee0     8B CD 55 7F 
0dee4     7F 30 E0 C6 | 	byte	$f0, $23, $51, $46, $26, $ec, $b4, $90, $8b, $cd, $55, $7f, $7f, $30, $e0, $c6
0dee8     CD BB A2 9E 
0deec     BB 01 43 5E 
0def0     4F 3E 3E 1F 
0def4     F4 D2 D2 D1 | 	byte	$cd, $bb, $a2, $9e, $bb, $01, $43, $5e, $4f, $3e, $3e, $1f, $f4, $d2, $d2, $d1
0def8     F9 1C 4A 3F 
0defc     17 E0 AE 92 
0df00     9E DC 59 7F 
0df04     69 27 E3 D6 | 	byte	$f9, $1c, $4a, $3f, $17, $e0, $ae, $92, $9e, $dc, $59, $7f, $69, $27, $e3, $d6
0df08     D6 BF A6 A6 
0df0c     C6 FE 2E 4A 
0df10     55 4D 45 17 
0df14     ED DC DB D8 | 	byte	$d6, $bf, $a6, $a6, $c6, $fe, $2e, $4a, $55, $4d, $45, $17, $ed, $dc, $db, $d8
0df18     FA 19 43 33 
0df1c     12 DC B5 94 
0df20     B5 F3 59 7F 
0df24     45 11 DD DB | 	byte	$fa, $19, $43, $33, $12, $dc, $b5, $94, $b5, $f3, $59, $7f, $45, $11, $dd, $db
0df28     CE C7 A9 BB 
0df2c     D4 11 23 39 
0df30     4D 44 49 13 
0df34     F3 E1 E6 EA | 	byte	$ce, $c7, $a9, $bb, $d4, $11, $23, $39, $4d, $44, $49, $13, $f3, $e1, $e6, $ea
0df38     FF 17 34 26 
0df3c     01 D2 B2 9B 
0df40     C2 12 63 7B 
0df44     34 06 D0 D8 | 	byte	$ff, $17, $34, $26, $01, $d2, $b2, $9b, $c2, $12, $63, $7b, $34, $06, $d0, $d8
0df48     C1 C7 AF C9 
0df4c     E1 19 28 37 
0df50     41 41 3A 01 
0df54     F1 DA EA 02 | 	byte	$c1, $c7, $af, $c9, $e1, $19, $28, $37, $41, $41, $3a, $01, $f1, $da, $ea, $02
0df58     13 23 29 1B 
0df5c     EB C5 A1 95 
0df60     DA 39 7A 7A 
0df64     2E FD CD C9 | 	byte	$13, $23, $29, $1b, $eb, $c5, $a1, $95, $da, $39, $7a, $7a, $2e, $fd, $cd, $c9
0df68     B7 C2 BB D1 
0df6c     F5 1C 2D 3B 
0df70     38 3F 31 03 
0df74     ED DD E1 0A | 	byte	$b7, $c2, $bb, $d1, $f5, $1c, $2d, $3b, $38, $3f, $31, $03, $ed, $dd, $e1, $0a
0df78     16 2F 25 14 
0df7c     EA B7 98 92 
0df80     EA 46 7E 6D 
0df84     28 FB D0 C0 | 	byte	$16, $2f, $25, $14, $ea, $b7, $98, $92, $ea, $46, $7e, $6d, $28, $fb, $d0, $c0
0df88     AE C5 C7 DF 
0df8c     00 25 2E 3D 
0df90     29 35 24 02 
0df94     F1 DE E4 10 | 	byte	$ae, $c5, $c7, $df, $00, $25, $2e, $3d, $29, $35, $24, $02, $f1, $de, $e4, $10
0df98     16 2E 25 1A 
0df9c     E9 B9 97 98 
0dfa0     EA 49 74 59 
0dfa4     2B F4 DC BA | 	byte	$16, $2e, $25, $1a, $e9, $b9, $97, $98, $ea, $49, $74, $59, $2b, $f4, $dc, $ba
0dfa8     A7 BB CF EA 
0dfac     16 2C 31 3E 
0dfb0     27 2B 0B FD 
0dfb4     F2 DF F2 13 | 	byte	$a7, $bb, $cf, $ea, $16, $2c, $31, $3e, $27, $2b, $0b, $fd, $f2, $df, $f2, $13
0dfb8     22 30 1B 0C 
0dfbc     E3 C1 9E B2 
0dfc0     EA 36 61 52 
0dfc4     2E 00 E0 BC | 	byte	$22, $30, $1b, $0c, $e3, $c1, $9e, $b2, $ea, $36, $61, $52, $2e, $00, $e0, $bc
0dfc8     BA C9 DB F1 
0dfcc     14 21 22 24 
0dfd0     10 13 0B 12 
0dfd4     06 EC F3 01 | 	byte	$ba, $c9, $db, $f1, $14, $21, $22, $24, $10, $13, $0b, $12, $06, $ec, $f3, $01
0dfd8     10 1B 18 0D 
0dfdc     F9 DF C1 C2 
0dfe0     E4 10 40 45 
0dfe4     2B FD DF C8 | 	byte	$10, $1b, $18, $0d, $f9, $df, $c1, $c2, $e4, $10, $40, $45, $2b, $fd, $df, $c8
0dfe8     D2 E3 EB FA 
0dfec     0B 14 0C 0D 
0dff0     07 0C 14 1E 
0dff4     11 F3 F4 FF | 	byte	$d2, $e3, $eb, $fa, $0b, $14, $0c, $0d, $07, $0c, $14, $1e, $11, $f3, $f4, $ff
0dff8     06 0E 10 0C 
0dffc     00 EB CE C6 
0e000     E2 0A 2F 41 
0e004     30 05 DD CC | 	byte	$06, $0e, $10, $0c, $00, $eb, $ce, $c6, $e2, $0a, $2f, $41, $30, $05, $dd, $cc
0e008     DD F0 F0 FD 
0e00c     02 0F 05 0C 
0e010     01 10 18 1F 
0e014     11 F5 FD FD | 	byte	$dd, $f0, $f0, $fd, $02, $0f, $05, $0c, $01, $10, $18, $1f, $11, $f5, $fd, $fd
0e018     07 09 0A 07 
0e01c     FB E8 D3 C8 
0e020     E4 0A 28 3F 
0e024     31 13 E8 D3 | 	byte	$07, $09, $0a, $07, $fb, $e8, $d3, $c8, $e4, $0a, $28, $3f, $31, $13, $e8, $d3
0e028     DC EF F1 F4 
0e02c     FB 06 06 0A 
0e030     07 10 15 1A 
0e034     0C FB 01 08 | 	byte	$dc, $ef, $f1, $f4, $fb, $06, $06, $0a, $07, $10, $15, $1a, $0c, $fb, $01, $08
0e038     05 0B 07 0C 
0e03c     F7 DF CF CE 
0e040     ED 07 28 3D 
0e044     30 10 E6 D3 | 	byte	$05, $0b, $07, $0c, $f7, $df, $cf, $ce, $ed, $07, $28, $3d, $30, $10, $e6, $d3
0e048     DA EF F0 F9 
0e04c     02 09 03 0B 
0e050     02 0D 16 16 
0e054     09 FA 03 0C | 	byte	$da, $ef, $f0, $f9, $02, $09, $03, $0b, $02, $0d, $16, $16, $09, $fa, $03, $0c
0e058     01 0A 03 14 
0e05c     F3 DE CB D3 
0e060     F4 05 21 3A 
0e064     32 12 E8 DB | 	byte	$01, $0a, $03, $14, $f3, $de, $cb, $d3, $f4, $05, $21, $3a, $32, $12, $e8, $db
0e068     DD EB EB F1 
0e06c     FF 09 06 14 
0e070     0D 16 15 10 
0e074     FD EA FC 06 | 	byte	$dd, $eb, $eb, $f1, $ff, $09, $06, $14, $0d, $16, $15, $10, $fd, $ea, $fc, $06
0e078     03 09 0F 16 
0e07c     FC E4 D5 DD 
0e080     F4 03 1E 31 
0e084     25 12 F3 E8 | 	byte	$03, $09, $0f, $16, $fc, $e4, $d5, $dd, $f4, $03, $1e, $31, $25, $12, $f3, $e8
0e088     DF E6 E6 E6 
0e08c     F6 04 15 1F 
0e090     1B 14 0D 08 
0e094     F2 E4 F7 04 | 	byte	$df, $e6, $e6, $e6, $f6, $04, $15, $1f, $1b, $14, $0d, $08, $f2, $e4, $f7, $04
0e098     05 0F 13 16 
0e09c     FD E3 D9 DA 
0e0a0     F7 FD 1B 2B 
0e0a4     27 10 F8 E8 | 	byte	$05, $0f, $13, $16, $fd, $e3, $d9, $da, $f7, $fd, $1b, $2b, $27, $10, $f8, $e8
0e0a8     DE E2 E6 EA 
0e0ac     F4 02 17 28 
0e0b0     1D 14 09 0D 
0e0b4     FC EB F2 FC | 	byte	$de, $e2, $e6, $ea, $f4, $02, $17, $28, $1d, $14, $09, $0d, $fc, $eb, $f2, $fc
0e0b8     FB 09 0D 0F 
0e0bc     FE EF E3 E7 
0e0c0     F7 FF 13 23 
0e0c4     20 13 FF EA | 	byte	$fb, $09, $0d, $0f, $fe, $ef, $e3, $e7, $f7, $ff, $13, $23, $20, $13, $ff, $ea
0e0c8     E1 E1 E5 E8 
0e0cc     ED FF 14 28 
0e0d0     1C 18 07 0A 
0e0d4     F7 E4 EF FB | 	byte	$e1, $e1, $e5, $e8, $ed, $ff, $14, $28, $1c, $18, $07, $0a, $f7, $e4, $ef, $fb
0e0d8     05 14 15 0C 
0e0dc     F9 EB E2 E6 
0e0e0     F5 FF 14 2A 
0e0e4     27 17 FE EE | 	byte	$05, $14, $15, $0c, $f9, $eb, $e2, $e6, $f5, $ff, $14, $2a, $27, $17, $fe, $ee
0e0e8     E5 E6 E3 E2 
0e0ec     E9 F3 10 20 
0e0f0     21 1E 17 13 
0e0f4     F7 E0 E7 F6 | 	byte	$e5, $e6, $e3, $e2, $e9, $f3, $10, $20, $21, $1e, $17, $13, $f7, $e0, $e7, $f6
0e0f8     03 16 1B 13 
0e0fc     00 EF E0 E3 
0e100     EA F0 10 2C 
0e104     2B 12 FE EB | 	byte	$03, $16, $1b, $13, $00, $ef, $e0, $e3, $ea, $f0, $10, $2c, $2b, $12, $fe, $eb
0e108     F0 F1 E6 E4 
0e10c     E8 F8 0B 19 
0e110     18 1F 22 17 
0e114     FB E0 E0 EA | 	byte	$f0, $f1, $e6, $e4, $e8, $f8, $0b, $19, $18, $1f, $22, $17, $fb, $e0, $e0, $ea
0e118     FC 17 1F 1B 
0e11c     02 F5 E5 E9 
0e120     E9 F2 0E 25 
0e124     1E 0A F7 EA | 	byte	$fc, $17, $1f, $1b, $02, $f5, $e5, $e9, $e9, $f2, $0e, $25, $1e, $0a, $f7, $ea
0e128     F8 00 F9 F5 
0e12c     F6 00 05 08 
0e130     FE 07 0A 11 
0e134     04 F8 EC EC | 	byte	$f8, $00, $f9, $f5, $f6, $00, $05, $08, $fe, $07, $0a, $11, $04, $f8, $ec, $ec
0e138     FA 11 17 0D 
0e13c     FA F8 F6 FB 
0e140     F4 F6 03 10 
0e144     07 FB F2 F0 | 	byte	$fa, $11, $17, $0d, $fa, $f8, $f6, $fb, $f4, $f6, $03, $10, $07, $fb, $f2, $f0
0e148     FE 11 0D 08 
0e14c     05 06 08 01 
0e150     F2 F4 FC 0B 
0e154     09 FF F0 EA | 	byte	$fe, $11, $0d, $08, $05, $06, $08, $01, $f2, $f4, $fc, $0b, $09, $ff, $f0, $ea
0e158     FB 0F 11 09 
0e15c     FA FC 01 04 
0e160     FB F5 FF 05 
0e164     02 FD F2 F5 | 	byte	$fb, $0f, $11, $09, $fa, $fc, $01, $04, $fb, $f5, $ff, $05, $02, $fd, $f2, $f5
0e168     00 15 17 0F 
0e16c     09 07 01 FA 
0e170     EB ED F9 0B 
0e174     12 07 F4 E4 | 	byte	$00, $15, $17, $0f, $09, $07, $01, $fa, $eb, $ed, $f9, $0b, $12, $07, $f4, $e4
0e178     F8 08 07 03 
0e17c     FE 06 0C 09 
0e180     FA F1 F8 FB 
0e184     FE 00 F5 FA | 	byte	$f8, $08, $07, $03, $fe, $06, $0c, $09, $fa, $f1, $f8, $fb, $fe, $00, $f5, $fa
0e188     06 12 19 13 
0e18c     0A 03 FD F4 
0e190     EC EF FB 08 
0e194     10 06 F5 E6 | 	byte	$06, $12, $19, $13, $0a, $03, $fd, $f4, $ec, $ef, $fb, $08, $10, $06, $f5, $e6
0e198     F4 02 05 05 
0e19c     08 0C 12 0C 
0e1a0     F8 EE EE F6 
0e1a4     FA 03 FC 02 | 	byte	$f4, $02, $05, $05, $08, $0c, $12, $0c, $f8, $ee, $ee, $f6, $fa, $03, $fc, $02
0e1a8     09 0D 0F 0D 
0e1ac     09 01 FF F4 
0e1b0     F2 F6 FF 03 
0e1b4     09 00 F8 EC | 	byte	$09, $0d, $0f, $0d, $09, $01, $ff, $f4, $f2, $f6, $ff, $03, $09, $00, $f8, $ec
0e1b8     F7 01 03 03 
0e1bc     05 0E 0F 06 
0e1c0     F8 F0 EF F4 
0e1c4     FB 00 01 FE | 	byte	$f7, $01, $03, $03, $05, $0e, $0f, $06, $f8, $f0, $ef, $f4, $fb, $00, $01, $fe
0e1c8     09 09 13 13 
0e1cc     0E 05 FB F2 
0e1d0     EF F7 04 0B 
0e1d4     0C FF F1 EF | 	byte	$09, $09, $13, $13, $0e, $05, $fb, $f2, $ef, $f7, $04, $0b, $0c, $ff, $f1, $ef
0e1d8     F6 F9 FE 04 
0e1dc     0D 15 13 06 
0e1e0     FB F1 EE E8 
0e1e4     F6 FC 02 00 | 	byte	$f6, $f9, $fe, $04, $0d, $15, $13, $06, $fb, $f1, $ee, $e8, $f6, $fc, $02, $00
0e1e8     06 0C 18 19 
0e1ec     13 07 F6 ED 
0e1f0     ED FB 09 15 
0e1f4     10 00 EE EA | 	byte	$06, $0c, $18, $19, $13, $07, $f6, $ed, $ed, $fb, $09, $15, $10, $00, $ee, $ea
0e1f8     EF EC F3 00 
0e1fc     10 18 1B 0C 
0e200     01 F9 F0 E6 
0e204     F0 F5 FB 05 | 	byte	$ef, $ec, $f3, $00, $10, $18, $1b, $0c, $01, $f9, $f0, $e6, $f0, $f5, $fb, $05
0e208     06 10 14 18 
0e20c     10 07 F1 E5 
0e210     ED FE 11 19 
0e214     12 00 F0 E7 | 	byte	$06, $10, $14, $18, $10, $07, $f1, $e5, $ed, $fe, $11, $19, $12, $00, $f0, $e7
0e218     EA E9 EF 03 
0e21c     15 25 20 12 
0e220     01 F3 E3 DA 
0e224     E2 F1 FD 11 | 	byte	$ea, $e9, $ef, $03, $15, $25, $20, $12, $01, $f3, $e3, $da, $e2, $f1, $fd, $11
0e228     17 1E 1E 19 
0e22c     0C FB E6 DC 
0e230     E7 FE 15 20 
0e234     16 05 EF E8 | 	byte	$17, $1e, $1e, $19, $0c, $fb, $e6, $dc, $e7, $fe, $15, $20, $16, $05, $ef, $e8
0e238     E6 E6 EC FC 
0e23c     10 29 26 1B 
0e240     07 F7 E3 DA 
0e244     D8 E7 FA 0F | 	byte	$e6, $e6, $ec, $fc, $10, $29, $26, $1b, $07, $f7, $e3, $da, $d8, $e7, $fa, $0f
0e248     1E 20 1D 15 
0e24c     0A FC ED E5 
0e250     ED 04 15 1D 
0e254     0E F7 E9 EF | 	byte	$1e, $20, $1d, $15, $0a, $fc, $ed, $e5, $ed, $04, $15, $1d, $0e, $f7, $e9, $ef
0e258     EF EE EC F3 
0e25c     06 24 26 1E 
0e260     0E FD E5 DD 
0e264     D9 E1 F7 16 | 	byte	$ef, $ee, $ec, $f3, $06, $24, $26, $1e, $0e, $fd, $e5, $dd, $d9, $e1, $f7, $16
0e268     1F 24 1A 0E 
0e26c     07 F8 EE EB 
0e270     F3 06 1B 18 
0e274     07 EF E6 EC | 	byte	$1f, $24, $1a, $0e, $07, $f8, $ee, $eb, $f3, $06, $1b, $18, $07, $ef, $e6, $ec
0e278     ED EB ED F5 
0e27c     0A 26 2C 22 
0e280     0E F8 E5 DD 
0e284     D9 E0 FB 16 | 	byte	$ed, $eb, $ed, $f5, $0a, $26, $2c, $22, $0e, $f8, $e5, $dd, $d9, $e0, $fb, $16
0e288     1D 1F 16 0D 
0e28c     05 F7 EB EE 
0e290     F7 06 17 0F 
0e294     02 F1 F5 FC | 	byte	$1d, $1f, $16, $0d, $05, $f7, $eb, $ee, $f7, $06, $17, $0f, $02, $f1, $f5, $fc
0e298     F8 EC E8 EF 
0e29c     04 18 24 21 
0e2a0     13 01 EC E3 
0e2a4     DD E4 F7 12 | 	byte	$f8, $ec, $e8, $ef, $04, $18, $24, $21, $13, $01, $ec, $e3, $dd, $e4, $f7, $12
0e2a8     1A 1A 1A 0E 
0e2ac     03 F2 EA F2 
0e2b0     FE 0D 16 0E 
0e2b4     01 F0 F8 F9 | 	byte	$1a, $1a, $1a, $0e, $03, $f2, $ea, $f2, $fe, $0d, $16, $0e, $01, $f0, $f8, $f9
0e2b8     F7 EB E8 EF 
0e2bc     09 11 1C 1B 
0e2c0     10 00 F1 E7 
0e2c4     E4 ED 00 0F | 	byte	$f7, $eb, $e8, $ef, $09, $11, $1c, $1b, $10, $00, $f1, $e7, $e4, $ed, $00, $0f
0e2c8     17 14 11 0D 
0e2cc     01 F7 ED F3 
0e2d0     04 11 10 05 
0e2d4     F8 F4 FE FD | 	byte	$17, $14, $11, $0d, $01, $f7, $ed, $f3, $04, $11, $10, $05, $f8, $f4, $fe, $fd
0e2d8     F7 EA E9 F3 
0e2dc     0B 0F 12 14 
0e2e0     10 FE F1 E5 
0e2e4     E5 F2 06 14 | 	byte	$f7, $ea, $e9, $f3, $0b, $0f, $12, $14, $10, $fe, $f1, $e5, $e5, $f2, $06, $14
0e2e8     18 11 09 0B 
0e2ec     01 FB F0 F4 
0e2f0     05 16 0E 03 
0e2f4     F2 F4 FF FE | 	byte	$18, $11, $09, $0b, $01, $fb, $f0, $f4, $05, $16, $0e, $03, $f2, $f4, $ff, $fe
0e2f8     F7 EB F0 FC 
0e2fc     11 10 06 04 
0e300     05 F7 F4 EA 
0e304     ED FA 0E 17 | 	byte	$f7, $eb, $f0, $fc, $11, $10, $06, $04, $05, $f7, $f4, $ea, $ed, $fa, $0e, $17
0e308     12 0A 02 0A 
0e30c     03 FD F2 F7 
0e310     08 16 0D FD 
0e314     EF F3 05 FD | 	byte	$12, $0a, $02, $0a, $03, $fd, $f2, $f7, $08, $16, $0d, $fd, $ef, $f3, $05, $fd
0e318     F4 EF F8 0D 
0e31c     17 10 FF F6 
0e320     F6 F0 EC EA 
0e324     F4 0B 19 18 | 	byte	$f4, $ef, $f8, $0d, $17, $10, $ff, $f6, $f6, $f0, $ec, $ea, $f4, $0b, $19, $18
0e328     0F 04 04 08 
0e32c     05 FA F2 F9 
0e330     09 14 0C FC 
0e334     F2 F4 00 FE | 	byte	$0f, $04, $04, $08, $05, $fa, $f2, $f9, $09, $14, $0c, $fc, $f2, $f4, $00, $fe
0e338     ED EE F7 12 
0e33c     16 0F 01 F6 
0e340     F1 EF E8 E8 
0e344     F9 12 21 17 | 	byte	$ed, $ee, $f7, $12, $16, $0f, $01, $f6, $f1, $ef, $e8, $e8, $f9, $12, $21, $17
0e348     0A 00 02 07 
0e34c     04 FC F6 02 
0e350     0C 0D 03 F8 
0e354     F0 FD FF FD | 	byte	$0a, $00, $02, $07, $04, $fc, $f6, $02, $0c, $0d, $03, $f8, $f0, $fd, $ff, $fd
0e358     F2 F4 FB 0E 
0e35c     0E 05 FF FB 
0e360     F5 F4 EF EC 
0e364     00 17 19 0A | 	byte	$f2, $f4, $fb, $0e, $0e, $05, $ff, $fb, $f5, $f4, $ef, $ec, $00, $17, $19, $0a
0e368     FE FC 06 0A 
0e36c     0A 05 00 05 
0e370     0B 03 F8 EF 
0e374     F3 04 03 FD | 	byte	$fe, $fc, $06, $0a, $0a, $05, $00, $05, $0b, $03, $f8, $ef, $f3, $04, $03, $fd
0e378     F6 F8 01 0D 
0e37c     08 FD FB FB 
0e380     F2 EF EF F1 
0e384     05 1C 1B 0E | 	byte	$f6, $f8, $01, $0d, $08, $fd, $fb, $fb, $f2, $ef, $ef, $f1, $05, $1c, $1b, $0e
0e388     FF FA 04 05 
0e38c     08 FE 00 08 
0e390     12 06 F8 EA 
0e394     EE FF 01 F5 | 	byte	$ff, $fa, $04, $05, $08, $fe, $00, $08, $12, $06, $f8, $ea, $ee, $ff, $01, $f5
0e398     F2 FB 11 19 
0e39c     0D 02 FB F9 
0e3a0     ED E8 E5 F4 
0e3a4     08 1D 18 0F | 	byte	$f2, $fb, $11, $19, $0d, $02, $fb, $f9, $ed, $e8, $e5, $f4, $08, $1d, $18, $0f
0e3a8     01 FC 04 04 
0e3ac     02 FB 03 0A 
0e3b0     13 06 FA EB 
0e3b4     F4 FD FD F0 | 	byte	$01, $fc, $04, $04, $02, $fb, $03, $0a, $13, $06, $fa, $eb, $f4, $fd, $fd, $f0
0e3b8     EE F8 11 18 
0e3bc     0F 06 03 FB 
0e3c0     EB E7 E3 F5 
0e3c4     08 14 0E 08 | 	byte	$ee, $f8, $11, $18, $0f, $06, $03, $fb, $eb, $e7, $e3, $f5, $08, $14, $0e, $08
0e3c8     05 08 10 0B 
0e3cc     03 F9 FF 09 
0e3d0     0B FD F9 EF 
0e3d4     00 01 FF F3 | 	byte	$05, $08, $10, $0b, $03, $f9, $ff, $09, $0b, $fd, $f9, $ef, $00, $01, $ff, $f3
0e3d8     F0 F5 06 0A 
0e3dc     06 07 0D 04 
0e3e0     F4 E8 E7 F6 
0e3e4     08 0A 01 01 | 	byte	$f0, $f5, $06, $0a, $06, $07, $0d, $04, $f4, $e8, $e7, $f6, $08, $0a, $01, $01
0e3e8     07 13 17 11 
0e3ec     02 FC FE 05 
0e3f0     FE F5 EF F1 
0e3f4     03 07 03 FB | 	byte	$07, $13, $17, $11, $02, $fc, $fe, $05, $fe, $f5, $ef, $f1, $03, $07, $03, $fb
0e3f8     F9 FA FE FA 
0e3fc     FE 05 13 0A 
0e400     FA E9 E9 FD 
0e404     0C 0D FD FA | 	byte	$f9, $fa, $fe, $fa, $fe, $05, $13, $0a, $fa, $e9, $e9, $fd, $0c, $0d, $fd, $fa
0e408     06 14 14 0B 
0e40c     FC FC FF 0A 
0e410     01 FA ED F5 
0e414     05 02 FB F7 | 	byte	$06, $14, $14, $0b, $fc, $fc, $ff, $0a, $01, $fa, $ed, $f5, $05, $02, $fb, $f7
0e418     FA 03 FF F5 
0e41c     F9 03 11 0A 
0e420     FE EF F0 FF 
0e424     09 06 F9 F8 | 	byte	$fa, $03, $ff, $f5, $f9, $03, $11, $0a, $fe, $ef, $f0, $ff, $09, $06, $f9, $f8
0e428     0A 19 1A 0F 
0e42c     FA F6 FA 03 
0e430     FB FB F3 FC 
0e434     0A 06 FD F8 | 	byte	$0a, $19, $1a, $0f, $fa, $f6, $fa, $03, $fb, $fb, $f3, $fc, $0a, $06, $fd, $f8
0e438     F6 04 FE F3 
0e43c     F5 02 0A 03 
0e440     FB F2 FA 05 
0e444     0E 04 FC F9 | 	byte	$f6, $04, $fe, $f3, $f5, $02, $0a, $03, $fb, $f2, $fa, $05, $0e, $04, $fc, $f9
0e448     09 15 15 0B 
0e44c     F8 F8 FB 02 
0e450     FC FE F5 00 
0e454     05 06 FA F6 | 	byte	$09, $15, $15, $0b, $f8, $f8, $fb, $02, $fc, $fe, $f5, $00, $05, $06, $fa, $f6
0e458     F7 06 03 F9 
0e45c     F9 03 04 FD 
0e460     F6 F0 FF 05 
0e464     0F 04 FF FE | 	byte	$f7, $06, $03, $f9, $f9, $03, $04, $fd, $f6, $f0, $ff, $05, $0f, $04, $ff, $fe
0e468     0F 14 11 01 
0e46c     F3 F4 FC FF 
0e470     FE 01 01 0C 
0e474     0B 04 F8 F1 | 	byte	$0f, $14, $11, $01, $f3, $f4, $fc, $ff, $fe, $01, $01, $0c, $0b, $04, $f8, $f1
0e478     F1 FD FD FE 
0e47c     FE 09 04 FC 
0e480     F7 F5 00 03 
0e484     02 F9 FE 08 | 	byte	$f1, $fd, $fd, $fe, $fe, $09, $04, $fc, $f7, $f5, $00, $03, $02, $f9, $fe, $08
0e488     16 15 15 F9 
0e48c     F4 EF FB FA 
0e490     01 02 09 0F 
0e494     0B 01 F8 EF | 	byte	$16, $15, $15, $f9, $f4, $ef, $fb, $fa, $01, $02, $09, $0f, $0b, $01, $f8, $ef
0e498     F1 F7 F7 02 
0e49c     04 0B 00 FE 
0e4a0     F9 02 01 FF 
0e4a4     F8 F4 FF 11 | 	byte	$f1, $f7, $f7, $02, $04, $0b, $00, $fe, $f9, $02, $01, $ff, $f8, $f4, $ff, $11
0e4a8     1F 1C 11 F7 
0e4ac     EF E9 F3 F4 
0e4b0     03 03 11 14 
0e4b4     0E 00 FA F1 | 	byte	$1f, $1c, $11, $f7, $ef, $e9, $f3, $f4, $03, $03, $11, $14, $0e, $00, $fa, $f1
0e4b8     F2 F0 F3 00 
0e4bc     0B 0D 02 03 
0e4c0     FA 03 FC FA 
0e4c4     EB EE FC 17 | 	byte	$f2, $f0, $f3, $00, $0b, $0d, $02, $03, $fa, $03, $fc, $fa, $eb, $ee, $fc, $17
0e4c8     25 26 14 F9 
0e4cc     EE EA EE EC 
0e4d0     FA 00 15 1B 
0e4d4     17 02 F6 F1 | 	byte	$25, $26, $14, $f9, $ee, $ea, $ee, $ec, $fa, $00, $15, $1b, $17, $02, $f6, $f1
0e4d8     F1 ED EE 01 
0e4dc     0F 0E 04 FD 
0e4e0     F5 FF FA F9 
0e4e4     E9 EC 00 1E | 	byte	$f1, $ed, $ee, $01, $0f, $0e, $04, $fd, $f5, $ff, $fa, $f9, $e9, $ec, $00, $1e
0e4e8     2B 2A 11 F7 
0e4ec     ED EB EB E6 
0e4f0     F3 03 18 21 
0e4f4     15 02 F8 F8 | 	byte	$2b, $2a, $11, $f7, $ed, $eb, $eb, $e6, $f3, $03, $18, $21, $15, $02, $f8, $f8
0e4f8     FB EE EF F8 
0e4fc     0B 06 01 F9 
0e500     F6 FF 01 FD 
0e504     EF F0 01 1B | 	byte	$fb, $ee, $ef, $f8, $0b, $06, $01, $f9, $f6, $ff, $01, $fd, $ef, $f0, $01, $1b
0e508     29 24 0E F9 
0e50c     EF F0 E8 EC 
0e510     F0 07 1C 20 
0e514     16 00 F7 F8 | 	byte	$29, $24, $0e, $f9, $ef, $f0, $e8, $ec, $f0, $07, $1c, $20, $16, $00, $f7, $f8
0e518     FB F2 F2 F6 
0e51c     05 06 04 FA 
0e520     F9 FA FB F5 
0e524     EB F2 05 20 | 	byte	$fb, $f2, $f2, $f6, $05, $06, $04, $fa, $f9, $fa, $fb, $f5, $eb, $f2, $05, $20
0e528     2C 25 0D FB 
0e52c     EC EC E0 EA 
0e530     F1 08 1E 28 
0e534     16 03 F0 EF | 	byte	$2c, $25, $0d, $fb, $ec, $ec, $e0, $ea, $f1, $08, $1e, $28, $16, $03, $f0, $ef
0e538     F0 EE F3 FD 
0e53c     0C 0C 0B FD 
0e540     FD F5 F6 F0 
0e544     EB F5 0C 1F | 	byte	$f0, $ee, $f3, $fd, $0c, $0c, $0b, $fd, $fd, $f5, $f6, $f0, $eb, $f5, $0c, $1f
0e548     2B 1C 06 FB 
0e54c     F0 F0 E3 EB 
0e550     F5 08 1A 21 
0e554     15 08 F7 F0 | 	byte	$2b, $1c, $06, $fb, $f0, $f0, $e3, $eb, $f5, $08, $1a, $21, $15, $08, $f7, $f0
0e558     EC EE F3 FE 
0e55c     06 0A 09 01 
0e560     00 F4 F5 ED 
0e564     F1 F6 10 20 | 	byte	$ec, $ee, $f3, $fe, $06, $0a, $09, $01, $00, $f4, $f5, $ed, $f1, $f6, $10, $20
0e568     28 1A 06 F9 
0e56c     F5 EC E2 E6 
0e570     F1 08 1A 1C 
0e574     17 0E 01 F1 | 	byte	$28, $1a, $06, $f9, $f5, $ec, $e2, $e6, $f1, $08, $1a, $1c, $17, $0e, $01, $f1
0e578     E3 E7 F0 01 
0e57c     08 0D 0B 06 
0e580     FE F5 F0 E8 
0e584     F0 FC 16 1E | 	byte	$e3, $e7, $f0, $01, $08, $0d, $0b, $06, $fe, $f5, $f0, $e8, $f0, $fc, $16, $1e
0e588     24 14 06 FA 
0e58c     F8 EA E7 E8 
0e590     F3 0B 14 13 
0e594     0F 0F 09 FF | 	byte	$24, $14, $06, $fa, $f8, $ea, $e7, $e8, $f3, $0b, $14, $13, $0f, $0f, $09, $ff
0e598     EA EA F0 01 
0e59c     06 09 04 02 
0e5a0     02 FC F5 E9 
0e5a4     EC FA 0F 14 | 	byte	$ea, $ea, $f0, $01, $06, $09, $04, $02, $02, $fc, $f5, $e9, $ec, $fa, $0f, $14
0e5a8     1B 0E 0D 03 
0e5ac     FE EE E9 EC 
0e5b0     F7 0D 12 09 
0e5b4     09 07 08 01 | 	byte	$1b, $0e, $0d, $03, $fe, $ee, $e9, $ec, $f7, $0d, $12, $09, $09, $07, $08, $01
0e5b8     ED E8 F0 02 
0e5bc     08 09 FE 02 
0e5c0     FE 00 F9 EF 
0e5c4     EE 02 14 1A | 	byte	$ed, $e8, $f0, $02, $08, $09, $fe, $02, $fe, $00, $f9, $ef, $ee, $02, $14, $1a
0e5c8     1A 0C 08 FE 
0e5cc     F5 E2 E5 F0 
0e5d0     06 14 1A 06 
0e5d4     09 01 04 FA | 	byte	$1a, $0c, $08, $fe, $f5, $e2, $e5, $f0, $06, $14, $1a, $06, $09, $01, $04, $fa
0e5d8     EC E6 F1 03 
0e5dc     0D 0C 02 04 
0e5e0     F9 FE F1 F1 
0e5e4     F3 09 14 1B | 	byte	$ec, $e6, $f1, $03, $0d, $0c, $02, $04, $f9, $fe, $f1, $f1, $f3, $09, $14, $1b
0e5e8     16 0A 06 FD 
0e5ec     EE E0 EA F4 
0e5f0     0E 18 19 0B 
0e5f4     08 00 FB F0 | 	byte	$16, $0a, $06, $fd, $ee, $e0, $ea, $f4, $0e, $18, $19, $0b, $08, $00, $fb, $f0
0e5f8     E9 E7 F3 05 
0e5fc     0F 10 08 07 
0e600     F9 F2 EA ED 
0e604     F5 0B 14 1F | 	byte	$e9, $e7, $f3, $05, $0f, $10, $08, $07, $f9, $f2, $ea, $ed, $f5, $0b, $14, $1f
0e608     18 0F 02 F6 
0e60c     E4 E0 E8 F9 
0e610     10 1F 1C 15 
0e614     0B 02 F6 E6 | 	byte	$18, $0f, $02, $f6, $e4, $e0, $e8, $f9, $10, $1f, $1c, $15, $0b, $02, $f6, $e6
0e618     E2 E8 FB 08 
0e61c     14 0E 0E 03 
0e620     F8 ED E5 EA 
0e624     FC 0E 18 23 | 	byte	$e2, $e8, $fb, $08, $14, $0e, $0e, $03, $f8, $ed, $e5, $ea, $fc, $0e, $18, $23
0e628     1E 13 00 F2 
0e62c     DE DF E8 00 
0e630     14 1E 14 10 
0e634     09 FE F1 E1 | 	byte	$1e, $13, $00, $f2, $de, $df, $e8, $00, $14, $1e, $14, $10, $09, $fe, $f1, $e1
0e638     E2 EC 04 0A 
0e63c     16 0F 0E FE 
0e640     F6 EE E6 EE 
0e644     00 12 18 1B | 	byte	$e2, $ec, $04, $0a, $16, $0f, $0e, $fe, $f6, $ee, $e6, $ee, $00, $12, $18, $1b
0e648     15 10 FC F2 
0e64c     DF E6 ED 08 
0e650     16 1A 12 10 
0e654     0A FD ED DC | 	byte	$15, $10, $fc, $f2, $df, $e6, $ed, $08, $16, $1a, $12, $10, $0a, $fd, $ed, $dc
0e658     E0 F0 0A 0F 
0e65c     1B 12 13 FA 
0e660     EC E3 E0 ED 
0e664     03 17 25 20 | 	byte	$e0, $f0, $0a, $0f, $1b, $12, $13, $fa, $ec, $e3, $e0, $ed, $03, $17, $25, $20
0e668     15 0B F4 E8 
0e66c     DA E9 F5 0E 
0e670     19 1A 14 0F 
0e674     06 F8 E4 DE | 	byte	$15, $0b, $f4, $e8, $da, $e9, $f5, $0e, $19, $1a, $14, $0f, $06, $f8, $e4, $de
0e678     E1 F5 0B 14 
0e67c     1A 12 0C F4 
0e680     E8 E0 E6 F3 
0e684     0D 19 28 1E | 	byte	$e1, $f5, $0b, $14, $1a, $12, $0c, $f4, $e8, $e0, $e6, $f3, $0d, $19, $28, $1e
0e688     13 01 EF E0 
0e68c     DF F0 01 14 
0e690     19 18 0E 08 
0e694     FC F5 E5 E4 | 	byte	$13, $01, $ef, $e0, $df, $f0, $01, $14, $19, $18, $0e, $08, $fc, $f5, $e5, $e4
0e698     E9 FF 09 15 
0e69c     16 12 06 F2 
0e6a0     E6 DF EA F9 
0e6a4     14 1B 24 1B | 	byte	$e9, $ff, $09, $15, $16, $12, $06, $f2, $e6, $df, $ea, $f9, $14, $1b, $24, $1b
0e6a8     0F F5 EB DD 
0e6ac     E5 F7 09 16 
0e6b0     1A 16 0F 06 
0e6b4     FD F3 E8 E7 | 	byte	$0f, $f5, $eb, $dd, $e5, $f7, $09, $16, $1a, $16, $0f, $06, $fd, $f3, $e8, $e7
0e6b8     ED 00 04 11 
0e6bc     11 0E 01 F5 
0e6c0     EB E5 EE 02 
0e6c4     11 1E 1D 16 | 	byte	$ed, $00, $04, $11, $11, $0e, $01, $f5, $eb, $e5, $ee, $02, $11, $1e, $1d, $16
0e6c8     0D F2 EB DF 
0e6cc     E9 F8 06 11 
0e6d0     16 14 15 09 
0e6d4     FF F3 EA E6 | 	byte	$0d, $f2, $eb, $df, $e9, $f8, $06, $11, $16, $14, $15, $09, $ff, $f3, $ea, $e6
0e6d8     EE FE 03 10 
0e6dc     0D 0F FD F0 
0e6e0     E8 E9 F0 08 
0e6e4     10 1C 18 12 | 	byte	$ee, $fe, $03, $10, $0d, $0f, $fd, $f0, $e8, $e9, $f0, $08, $10, $1c, $18, $12
0e6e8     0B F4 EE E2 
0e6ec     ED F6 07 0C 
0e6f0     12 11 15 0A 
0e6f4     FE F0 EC EA | 	byte	$0b, $f4, $ee, $e2, $ed, $f6, $07, $0c, $12, $11, $15, $0a, $fe, $f0, $ec, $ea
0e6f8     F6 01 06 0F 
0e6fc     0C 0D FB EF 
0e700     E7 EE FB 11 
0e704     16 17 12 07 | 	byte	$f6, $01, $06, $0f, $0c, $0d, $fb, $ef, $e7, $ee, $fb, $11, $16, $17, $12, $07
0e708     FC F0 E7 E8 
0e70c     F6 02 11 15 
0e710     11 0D 0A 03 
0e714     F7 EA EC EF | 	byte	$fc, $f0, $e7, $e8, $f6, $02, $11, $15, $11, $0d, $0a, $03, $f7, $ea, $ec, $ef
0e718     01 05 0B 0D 
0e71c     09 06 F7 E9 
0e720     E6 F3 06 1C 
0e724     1D 16 09 FF | 	byte	$01, $05, $0b, $0d, $09, $06, $f7, $e9, $e6, $f3, $06, $1c, $1d, $16, $09, $ff
0e728     EF EA E5 F1 
0e72c     01 0E 13 14 
0e730     0D 0B 01 FB 
0e734     F3 E8 EE F4 | 	byte	$ef, $ea, $e5, $f1, $01, $0e, $13, $14, $0d, $0b, $01, $fb, $f3, $e8, $ee, $f4
0e738     02 06 11 11 
0e73c     10 FF EF E4 
0e740     E5 F0 0A 1F 
0e744     25 1C 09 F7 | 	byte	$02, $06, $11, $11, $10, $ff, $ef, $e4, $e5, $f0, $0a, $1f, $25, $1c, $09, $f7
0e748     E1 E1 E2 F4 
0e74c     07 1B 19 18 
0e750     0A 07 F9 F6 
0e754     F3 ED F4 FA | 	byte	$e1, $e1, $e2, $f4, $07, $1b, $19, $18, $0a, $07, $f9, $f6, $f3, $ed, $f4, $fa
0e758     02 04 0F 0E 
0e75c     13 FC F3 EA 
0e760     E9 F0 08 1B 
0e764     24 1C 08 F6 | 	byte	$02, $04, $0f, $0e, $13, $fc, $f3, $ea, $e9, $f0, $08, $1b, $24, $1c, $08, $f6
0e768     E2 E0 DE F7 
0e76c     09 1F 1F 15 
0e770     03 FC F3 F0 
0e774     F2 F5 FA 01 | 	byte	$e2, $e0, $de, $f7, $09, $1f, $1f, $15, $03, $fc, $f3, $f0, $f2, $f5, $fa, $01
0e778     04 03 11 0E 
0e77c     12 FD F1 E9 
0e780     EA F2 07 18 
0e784     21 19 05 F3 | 	byte	$04, $03, $11, $0e, $12, $fd, $f1, $e9, $ea, $f2, $07, $18, $21, $19, $05, $f3
0e788     E6 DF E2 F8 
0e78c     0E 20 24 16 
0e790     04 F7 EE ED 
0e794     ED FA FD 04 | 	byte	$e6, $df, $e2, $f8, $0e, $20, $24, $16, $04, $f7, $ee, $ed, $ed, $fa, $fd, $04
0e798     02 07 0D 0F 
0e79c     0E FB EE EC 
0e7a0     F1 FD 10 19 
0e7a4     19 0D 01 EB | 	byte	$02, $07, $0d, $0f, $0e, $fb, $ee, $ec, $f1, $fd, $10, $19, $19, $0d, $01, $eb
0e7a8     E5 E0 EA F9 
0e7ac     0F 1F 28 1C 
0e7b0     07 F7 EC E8 
0e7b4     EB F8 FC 01 | 	byte	$e5, $e0, $ea, $f9, $0f, $1f, $28, $1c, $07, $f7, $ec, $e8, $eb, $f8, $fc, $01
0e7b8     02 0A 0E 12 
0e7bc     07 F7 EC E5 
0e7c0     F0 03 15 1B 
0e7c4     16 08 FD EB | 	byte	$02, $0a, $0e, $12, $07, $f7, $ec, $e5, $f0, $03, $15, $1b, $16, $08, $fd, $eb
0e7c8     E6 E3 EC FD 
0e7cc     10 1F 22 1A 
0e7d0     0B F8 F0 EE 
0e7d4     EF F6 FD FE | 	byte	$e6, $e3, $ec, $fd, $10, $1f, $22, $1a, $0b, $f8, $f0, $ee, $ef, $f6, $fd, $fe
0e7d8     FD 06 0D 13 
0e7dc     05 F6 ED E7 
0e7e0     F2 09 19 20 
0e7e4     15 06 F9 E9 | 	byte	$fd, $06, $0d, $13, $05, $f6, $ed, $e7, $f2, $09, $19, $20, $15, $06, $f9, $e9
0e7e8     E3 E1 EF 01 
0e7ec     15 20 20 11 
0e7f0     06 F4 EC EA 
0e7f4     F0 F7 02 05 | 	byte	$e3, $e1, $ef, $01, $15, $20, $20, $11, $06, $f4, $ec, $ea, $f0, $f7, $02, $05
0e7f8     03 0C 0D 15 
0e7fc     FD EF E5 E8 
0e800     F5 10 1A 22 
0e804     15 06 F4 E7 | 	byte	$03, $0c, $0d, $15, $fd, $ef, $e5, $e8, $f5, $10, $1a, $22, $15, $06, $f4, $e7
0e808     E3 E2 F3 05 
0e80c     18 1F 1E 0F 
0e810     09 F9 ED E8 
0e814     EF F4 FF 03 | 	byte	$e3, $e2, $f3, $05, $18, $1f, $1e, $0f, $09, $f9, $ed, $e8, $ef, $f4, $ff, $03
0e818     04 0E 11 14 
0e81c     01 EF E4 E9 
0e820     F8 0F 17 1C 
0e824     12 08 F5 EA | 	byte	$04, $0e, $11, $14, $01, $ef, $e4, $e9, $f8, $0f, $17, $1c, $12, $08, $f5, $ea
0e828     E3 E4 F5 08 
0e82c     17 1C 14 0D 
0e830     06 FB F1 E9 
0e834     F2 F7 FE FF | 	byte	$e3, $e4, $f5, $08, $17, $1c, $14, $0d, $06, $fb, $f1, $e9, $f2, $f7, $fe, $ff
0e838     07 0F 14 0B 
0e83c     FF EE E9 EE 
0e840     FD 0E 15 16 
0e844     0F 08 F9 EC | 	byte	$07, $0f, $14, $0b, $ff, $ee, $e9, $ee, $fd, $0e, $15, $16, $0f, $08, $f9, $ec
0e848     E2 EA F8 09 
0e84c     12 18 0E 0B 
0e850     03 FF F6 F0 
0e854     F2 F7 F9 FA | 	byte	$e2, $ea, $f8, $09, $12, $18, $0e, $0b, $03, $ff, $f6, $f0, $f2, $f7, $f9, $fa
0e858     07 0F 18 07 
0e85c     FA E9 E9 F4 
0e860     04 0E 14 12 
0e864     11 0A FB ED | 	byte	$07, $0f, $18, $07, $fa, $e9, $e9, $f4, $04, $0e, $14, $12, $11, $0a, $fb, $ed
0e868     E2 EE FB 09 
0e86c     0D 11 0B 0A 
0e870     06 FE F8 F3 
0e874     F1 F7 F7 F6 | 	byte	$e2, $ee, $fb, $09, $0d, $11, $0b, $0a, $06, $fe, $f8, $f3, $f1, $f7, $f7, $f6
0e878     0A 11 19 06 
0e87c     F5 EC F0 FC 
0e880     08 0E 0F 0E 
0e884     0D 03 F7 EF | 	byte	$0a, $11, $19, $06, $f5, $ec, $f0, $fc, $08, $0e, $0f, $0e, $0d, $03, $f7, $ef
0e888     E8 F3 FB 05 
0e88c     05 0D 0C 0E 
0e890     0B 04 FD F7 
0e894     EE EE F1 F7 | 	byte	$e8, $f3, $fb, $05, $05, $0d, $0c, $0e, $0b, $04, $fd, $f7, $ee, $ee, $f1, $f7
0e898     0A 14 19 08 
0e89c     F6 EA F1 F8 
0e8a0     09 0F 12 0F 
0e8a4     0C FF F5 E9 | 	byte	$0a, $14, $19, $08, $f6, $ea, $f1, $f8, $09, $0f, $12, $0f, $0c, $ff, $f5, $e9
0e8a8     E8 F3 F9 04 
0e8ac     09 0F 0F 10 
0e8b0     09 02 F8 F6 
0e8b4     EF F1 F1 FD | 	byte	$e8, $f3, $f9, $04, $09, $0f, $0f, $10, $09, $02, $f8, $f6, $ef, $f1, $f1, $fd
0e8b8     0A 18 13 01 
0e8bc     F4 EB F5 FA 
0e8c0     0D 14 14 0E 
0e8c4     08 F8 F0 E8 | 	byte	$0a, $18, $13, $01, $f4, $eb, $f5, $fa, $0d, $14, $14, $0e, $08, $f8, $f0, $e8
0e8c8     F1 FA 00 01 
0e8cc     06 0A 0E 0E 
0e8d0     0B 05 FB F9 
0e8d4     F1 EE EA FA | 	byte	$f1, $fa, $00, $01, $06, $0a, $0e, $0e, $0b, $05, $fb, $f9, $f1, $ee, $ea, $fa
0e8d8     05 15 0F 03 
0e8dc     F9 F7 FA 02 
0e8e0     09 0F 0E 09 
0e8e4     01 F6 F4 EB | 	byte	$05, $15, $0f, $03, $f9, $f7, $fa, $02, $09, $0f, $0e, $09, $01, $f6, $f4, $eb
0e8e8     F7 FE 02 FD 
0e8ec     01 04 0B 0A 
0e8f0     0A 06 FF FA 
0e8f4     F5 F0 EB FB | 	byte	$f7, $fe, $02, $fd, $01, $04, $0b, $0a, $0a, $06, $ff, $fa, $f5, $f0, $eb, $fb
0e8f8     06 10 0A FF 
0e8fc     FB FD FE 02 
0e900     04 06 09 0A 
0e904     05 FD F7 F2 | 	byte	$06, $10, $0a, $ff, $fb, $fd, $fe, $02, $04, $06, $09, $0a, $05, $fd, $f7, $f2
0e908     F7 FC FE FA 
0e90c     FE 05 0B 0D 
0e910     0A 08 05 FE 
0e914     F6 EC EA F8 | 	byte	$f7, $fc, $fe, $fa, $fe, $05, $0b, $0d, $0a, $08, $05, $fe, $f6, $ec, $ea, $f8
0e918     02 0B 05 01 
0e91c     00 08 08 06 
0e920     FE FD FC 07 
0e924     03 02 FB FA | 	byte	$02, $0b, $05, $01, $00, $08, $08, $06, $fe, $fd, $fc, $07, $03, $02, $fb, $fa
0e928     FC FC F8 F4 
0e92c     F8 03 10 12 
0e930     0F 06 07 FC 
0e934     F4 EB ED F8 | 	byte	$fc, $fc, $f8, $f4, $f8, $03, $10, $12, $0f, $06, $07, $fc, $f4, $eb, $ed, $f8
0e938     05 09 FF FB 
0e93c     FD 07 0B 0B 
0e940     00 FE FD 07 
0e944     05 04 FF 00 | 	byte	$05, $09, $ff, $fb, $fd, $07, $0b, $0b, $00, $fe, $fd, $07, $05, $04, $ff, $00
0e948     02 F8 F4 F0 
0e94c     F5 FF 0B 0E 
0e950     0C 05 09 02 
0e954     FA EF F3 F8 | 	byte	$02, $f8, $f4, $f0, $f5, $ff, $0b, $0e, $0c, $05, $09, $02, $fa, $ef, $f3, $f8
0e958     01 02 FB FC 
0e95c     04 0C 0F 07 
0e960     FF F9 FA 02 
0e964     02 05 05 06 | 	byte	$01, $02, $fb, $fc, $04, $0c, $0f, $07, $ff, $f9, $fa, $02, $02, $05, $05, $06
0e968     07 F8 ED EE 
0e96c     F4 02 08 0D 
0e970     0C 08 09 07 
0e974     FD F2 F5 F9 | 	byte	$07, $f8, $ed, $ee, $f4, $02, $08, $0d, $0c, $08, $09, $07, $fd, $f2, $f5, $f9
0e978     FE FA F9 FA 
0e97c     07 0C 12 07 
0e980     00 F6 F6 F8 
0e984     FA 03 08 0F | 	byte	$fe, $fa, $f9, $fa, $07, $0c, $12, $07, $00, $f6, $f6, $f8, $fa, $03, $08, $0f
0e988     0B FF EF F0 
0e98c     F3 FD 02 08 
0e990     0A 0B 09 07 
0e994     01 F7 FA FC | 	byte	$0b, $ff, $ef, $f0, $f3, $fd, $02, $08, $0a, $0b, $09, $07, $01, $f7, $fa, $fc
0e998     FF F5 F4 F6 
0e99c     04 0E 12 0E 
0e9a0     05 FB F8 F6 
0e9a4     F8 FD 05 0C | 	byte	$ff, $f5, $f4, $f6, $04, $0e, $12, $0e, $05, $fb, $f8, $f6, $f8, $fd, $05, $0c
0e9a8     05 00 F6 F3 
0e9ac     FA 01 05 07 
0e9b0     05 08 04 01 
0e9b4     FC FB 00 02 | 	byte	$05, $00, $f6, $f3, $fa, $01, $05, $07, $05, $08, $04, $01, $fc, $fb, $00, $02
0e9b8     FF F3 ED F5 
0e9bc     02 0E 15 13 
0e9c0     0B 00 F9 F1 
0e9c4     F6 FB 06 0C | 	byte	$ff, $f3, $ed, $f5, $02, $0e, $15, $13, $0b, $00, $f9, $f1, $f6, $fb, $06, $0c
0e9c8     05 00 FA F5 
0e9cc     FA FC 00 01 
0e9d0     03 0C 06 01 
0e9d4     F8 FC 02 02 | 	byte	$05, $00, $fa, $f5, $fa, $fc, $00, $01, $03, $0c, $06, $01, $f8, $fc, $02, $02
0e9d8     FC F3 F2 FB 
0e9dc     03 09 12 0F 
0e9e0     0D 03 F9 F0 
0e9e4     F5 FB 05 0A | 	byte	$fc, $f3, $f2, $fb, $03, $09, $12, $0f, $0d, $03, $f9, $f0, $f5, $fb, $05, $0a
0e9e8     02 FE FD FC 
0e9ec     FD FE FD 00 
0e9f0     00 07 06 02 
0e9f4     F9 00 03 03 | 	byte	$02, $fe, $fd, $fc, $fd, $fe, $fd, $00, $00, $07, $06, $02, $f9, $00, $03, $03
0e9f8     FB F4 F3 FB 
0e9fc     06 0C 11 0F 
0ea00     09 00 F7 F1 
0ea04     F3 FB 04 0A | 	byte	$fb, $f4, $f3, $fb, $06, $0c, $11, $0f, $09, $00, $f7, $f1, $f3, $fb, $04, $0a
0ea08     07 02 01 00 
0ea0c     FE FB F9 FC 
0ea10     03 04 04 FE 
0ea14     F8 00 02 03 | 	byte	$07, $02, $01, $00, $fe, $fb, $f9, $fc, $03, $04, $04, $fe, $f8, $00, $02, $03
0ea18     FB F5 F4 FB 
0ea1c     05 0F 10 0E 
0ea20     07 05 FB F7 
0ea24     F3 F8 FF 04 | 	byte	$fb, $f5, $f4, $fb, $05, $0f, $10, $0e, $07, $05, $fb, $f7, $f3, $f8, $ff, $04
0ea28     03 00 03 06 
0ea2c     06 FE FB F9 
0ea30     06 05 02 FA 
0ea34     F6 FD 02 03 | 	byte	$03, $00, $03, $06, $06, $fe, $fb, $f9, $06, $05, $02, $fa, $f6, $fd, $02, $03
0ea38     FB F7 F5 FE 
0ea3c     07 0F 0B 0B 
0ea40     09 08 01 FA 
0ea44     F5 F6 FC FB | 	byte	$fb, $f7, $f5, $fe, $07, $0f, $0b, $0b, $09, $08, $01, $fa, $f5, $f6, $fc, $fb
0ea48     FC FC 03 07 
0ea4c     08 02 FE FC 
0ea50     05 05 FB F2 
0ea54     F4 FC 02 06 | 	byte	$fc, $fc, $03, $07, $08, $02, $fe, $fc, $05, $05, $fb, $f2, $f4, $fc, $02, $06
0ea58     FF FC FD 03 
0ea5c     07 06 02 04 
0ea60     09 0D 07 FF 
0ea64     FB F6 F6 EF | 	byte	$ff, $fc, $fd, $03, $07, $06, $02, $04, $09, $0d, $07, $ff, $fb, $f6, $f6, $ef
0ea68     F1 FA 06 0D 
0ea6c     0D 0A 05 02 
0ea70     03 01 F6 EB 
0ea74     F1 FA 03 03 | 	byte	$f1, $fa, $06, $0d, $0d, $0a, $05, $02, $03, $01, $f6, $eb, $f1, $fa, $03, $03
0ea78     00 FE 05 07 
0ea7c     0B 04 FF 01 
0ea80     08 0A 06 00 
0ea84     FE FC F6 EF | 	byte	$00, $fe, $05, $07, $0b, $04, $ff, $01, $08, $0a, $06, $00, $fe, $fc, $f6, $ef
0ea88     EB F7 06 10 
0ea8c     11 0B 05 04 
0ea90     03 FC F1 E8 
0ea94     F1 FB 04 02 | 	byte	$eb, $f7, $06, $10, $11, $0b, $05, $04, $03, $fc, $f1, $e8, $f1, $fb, $04, $02
0ea98     FE FF 06 0A 
0ea9c     09 00 FA FF 
0eaa0     0A 10 0C 06 
0eaa4     03 FF F3 E8 | 	byte	$fe, $ff, $06, $0a, $09, $00, $fa, $ff, $0a, $10, $0c, $06, $03, $ff, $f3, $e8
0eaa8     E1 EF 05 15 
0eaac     19 11 09 05 
0eab0     02 F6 EA E5 
0eab4     F0 FD 09 07 | 	byte	$e1, $ef, $05, $15, $19, $11, $09, $05, $02, $f6, $ea, $e5, $f0, $fd, $09, $07
0eab8     03 02 06 07 
0eabc     04 FA F7 FE 
0eac0     0A 12 13 0B 
0eac4     04 FE F1 E6 | 	byte	$03, $02, $06, $07, $04, $fa, $f7, $fe, $0a, $12, $13, $0b, $04, $fe, $f1, $e6
0eac8     E2 EE 03 15 
0eacc     18 14 0B 08 
0ead0     01 F7 E8 E8 
0ead4     F0 FE 0A 08 | 	byte	$e2, $ee, $03, $15, $18, $14, $0b, $08, $01, $f7, $e8, $e8, $f0, $fe, $0a, $08
0ead8     06 02 05 02 
0eadc     FD F6 F9 00 
0eae0     0E 11 13 0C 
0eae4     05 FF EE E4 | 	byte	$06, $02, $05, $02, $fd, $f6, $f9, $00, $0e, $11, $13, $0c, $05, $ff, $ee, $e4
0eae8     E3 F2 01 13 
0eaec     16 15 0E 08 
0eaf0     00 F3 E5 E8 
0eaf4     F1 00 09 0B | 	byte	$e3, $f2, $01, $13, $16, $15, $0e, $08, $00, $f3, $e5, $e8, $f1, $00, $09, $0b
0eaf8     0A 09 05 FD 
0eafc     F5 F1 F6 01 
0eb00     10 12 11 0D 
0eb04     08 FD EF E2 | 	byte	$0a, $09, $05, $fd, $f5, $f1, $f6, $01, $10, $12, $11, $0d, $08, $fd, $ef, $e2
0eb08     E6 F5 05 10 
0eb0c     16 15 11 09 
0eb10     FC EC E6 EC 
0eb14     F5 04 05 08 | 	byte	$e6, $f5, $05, $10, $16, $15, $11, $09, $fc, $ec, $e6, $ec, $f5, $04, $05, $08
0eb18     09 08 02 F8 
0eb1c     F1 F3 FC 0A 
0eb20     0F 13 0E 0C 
0eb24     0A FB F2 E7 | 	byte	$09, $08, $02, $f8, $f1, $f3, $fc, $0a, $0f, $13, $0e, $0c, $0a, $fb, $f2, $e7
0eb28     E9 F6 05 09 
0eb2c     10 15 14 09 
0eb30     F8 E5 E1 EA 
0eb34     FA 08 0B 0C | 	byte	$e9, $f6, $05, $09, $10, $15, $14, $09, $f8, $e5, $e1, $ea, $fa, $08, $0b, $0c
0eb38     0C 0A 01 F4 
0eb3c     EB F0 FF 0B 
0eb40     10 0F 0C 0C 
0eb44     0C FE F2 E7 | 	byte	$0c, $0a, $01, $f4, $eb, $f0, $ff, $0b, $10, $0f, $0c, $0c, $0c, $fe, $f2, $e7
0eb48     EA F5 03 08 
0eb4c     0E 15 19 0E 
0eb50     F8 E2 DE E8 
0eb54     FA 09 0B 0E | 	byte	$ea, $f5, $03, $08, $0e, $15, $19, $0e, $f8, $e2, $de, $e8, $fa, $09, $0b, $0e
0eb58     11 12 05 F5 
0eb5c     E9 EE FC 0B 
0eb60     0E 0B 0A 0B 
0eb64     0A FD F0 E7 | 	byte	$11, $12, $05, $f5, $e9, $ee, $fc, $0b, $0e, $0b, $0a, $0b, $0a, $fd, $f0, $e7
0eb68     EC F8 05 0B 
0eb6c     0F 14 17 0B 
0eb70     F7 E1 DE E8 
0eb74     FC 05 09 0C | 	byte	$ec, $f8, $05, $0b, $0f, $14, $17, $0b, $f7, $e1, $de, $e8, $fc, $05, $09, $0c
0eb78     10 10 08 F8 
0eb7c     F0 F4 00 0C 
0eb80     0C 06 03 07 
0eb84     06 FF F4 EF | 	byte	$10, $10, $08, $f8, $f0, $f4, $00, $0c, $0c, $06, $03, $07, $06, $ff, $f4, $ef
0eb88     F3 FD 05 09 
0eb8c     0F 13 13 07 
0eb90     F3 DF DD E9 
0eb94     FA 05 0A 12 | 	byte	$f3, $fd, $05, $09, $0f, $13, $13, $07, $f3, $df, $dd, $e9, $fa, $05, $0a, $12
0eb98     16 0E 05 F5 
0eb9c     EE F2 FD 0B 
0eba0     0F 0B 06 07 
0eba4     01 FB F0 ED | 	byte	$16, $0e, $05, $f5, $ee, $f2, $fd, $0b, $0f, $0b, $06, $07, $01, $fb, $f0, $ed
0eba8     F5 00 07 0C 
0ebac     11 15 12 06 
0ebb0     F1 E1 E2 EA 
0ebb4     F7 FF 08 13 | 	byte	$f5, $00, $07, $0c, $11, $15, $12, $06, $f1, $e1, $e2, $ea, $f7, $ff, $08, $13
0ebb8     18 11 07 F9 
0ebbc     F4 F7 FC 06 
0ebc0     0C 09 06 06 
0ebc4     FF F8 EF EF | 	byte	$18, $11, $07, $f9, $f4, $f7, $fc, $06, $0c, $09, $06, $06, $ff, $f8, $ef, $ef
0ebc8     F8 03 06 0A 
0ebcc     0C 12 0F 03 
0ebd0     F1 E8 EA F1 
0ebd4     F8 FC 07 11 | 	byte	$f8, $03, $06, $0a, $0c, $12, $0f, $03, $f1, $e8, $ea, $f1, $f8, $fc, $07, $11
0ebd8     14 0D 03 F9 
0ebdc     F8 F9 FD 02 
0ebe0     07 0B 0A 0A 
0ebe4     00 F6 ED F2 | 	byte	$14, $0d, $03, $f9, $f8, $f9, $fd, $02, $07, $0b, $0a, $0a, $00, $f6, $ed, $f2
0ebe8     F9 02 06 0B 
0ebec     0D 11 0B FE 
0ebf0     EF EA EB F3 
0ebf4     F9 FE 07 11 | 	byte	$f9, $02, $06, $0b, $0d, $11, $0b, $fe, $ef, $ea, $eb, $f3, $f9, $fe, $07, $11
0ebf8     12 0D 04 FC 
0ebfc     FD FC FF FE 
0ec00     00 07 0C 0B 
0ec04     FE F6 ED F3 | 	byte	$12, $0d, $04, $fc, $fd, $fc, $ff, $fe, $00, $07, $0c, $0b, $fe, $f6, $ed, $f3
0ec08     FA 02 08 0A 
0ec0c     0F 11 06 F9 
0ec10     EB ED F1 F7 
0ec14     FA FD 07 0D | 	byte	$fa, $02, $08, $0a, $0f, $11, $06, $f9, $eb, $ed, $f1, $f7, $fa, $fd, $07, $0d
0ec18     0E 0B 03 FE 
0ec1c     01 00 01 FD 
0ec20     FD 00 09 07 
0ec24     01 F7 F1 F7 | 	byte	$0e, $0b, $03, $fe, $01, $00, $01, $fd, $fd, $00, $09, $07, $01, $f7, $f1, $f7
0ec28     FF 05 08 0B 
0ec2c     0D 0E 02 F3 
0ec30     E9 EF F8 FF 
0ec34     FD FC 01 05 | 	byte	$ff, $05, $08, $0b, $0d, $0e, $02, $f3, $e9, $ef, $f8, $ff, $fd, $fc, $01, $05
0ec38     08 07 02 01 
0ec3c     05 07 07 00 
0ec40     FD FE 03 00 
0ec44     FC F5 F3 FA | 	byte	$08, $07, $02, $01, $05, $07, $07, $00, $fd, $fe, $03, $00, $fc, $f5, $f3, $fa
0ec48     05 09 0D 0C 
0ec4c     0E 09 F9 E9 
0ec50     E6 EE FD 07 
0ec54     02 00 FF 04 | 	byte	$05, $09, $0d, $0c, $0e, $09, $f9, $e9, $e6, $ee, $fd, $07, $02, $00, $ff, $04
0ec58     02 02 00 03 
0ec5c     07 0B 07 04 
0ec60     FE FB FD FA 
0ec64     F9 F5 F8 FF | 	byte	$02, $02, $00, $03, $07, $0b, $07, $04, $fe, $fb, $fd, $fa, $f9, $f5, $f8, $ff
0ec68     08 0C 0F 10 
0ec6c     0F 05 F5 E5 
0ec70     E5 F0 00 0B 
0ec74     09 05 FE FC | 	byte	$08, $0c, $0f, $10, $0f, $05, $f5, $e5, $e5, $f0, $00, $0b, $09, $05, $fe, $fc
0ec78     FA FB 00 05 
0ec7c     0C 11 0C 03 
0ec80     FD F6 F7 F6 
0ec84     F9 F9 FE 04 | 	byte	$fa, $fb, $00, $05, $0c, $11, $0c, $03, $fd, $f6, $f7, $f6, $f9, $f9, $fe, $04
0ec88     09 0B 0D 10 
0ec8c     0C 01 F1 E6 
0ec90     E9 F3 01 09 
0ec94     0A 08 01 F8 | 	byte	$09, $0b, $0d, $10, $0c, $01, $f1, $e6, $e9, $f3, $01, $09, $0a, $08, $01, $f8
0ec98     F5 F5 FE 08 
0ec9c     0F 14 0F 05 
0eca0     FD F8 F3 F3 
0eca4     F5 FB 02 07 | 	byte	$f5, $f5, $fe, $08, $0f, $14, $0f, $05, $fd, $f8, $f3, $f3, $f5, $fb, $02, $07
0eca8     08 0C 0F 10 
0ecac     0A FD EE E6 
0ecb0     EA F6 01 09 
0ecb4     0C 0A 06 FA | 	byte	$08, $0c, $0f, $10, $0a, $fd, $ee, $e6, $ea, $f6, $01, $09, $0c, $0a, $06, $fa
0ecb8     F1 EE F4 08 
0ecbc     12 18 11 07 
0ecc0     01 F9 F0 ED 
0ecc4     EF F9 04 0C | 	byte	$f1, $ee, $f4, $08, $12, $18, $11, $07, $01, $f9, $f0, $ed, $ef, $f9, $04, $0c
0ecc8     0B 0E 11 10 
0eccc     07 F9 ED E8 
0ecd0     ED FA 03 04 
0ecd4     08 07 08 FE | 	byte	$0b, $0e, $11, $10, $07, $f9, $ed, $e8, $ed, $fa, $03, $04, $08, $07, $08, $fe
0ecd8     F4 EF F5 07 
0ecdc     12 14 0E 06 
0ece0     00 FC F3 F0 
0ece4     EE F7 03 0A | 	byte	$f4, $ef, $f5, $07, $12, $14, $0e, $06, $00, $fc, $f3, $f0, $ee, $f7, $03, $0a
0ece8     0A 0E 11 11 
0ecec     07 F7 EC EA 
0ecf0     F0 FC 06 03 
0ecf4     06 07 07 FF | 	byte	$0a, $0e, $11, $11, $07, $f7, $ec, $ea, $f0, $fc, $06, $03, $06, $07, $07, $ff
0ecf8     F4 EC F4 01 
0ecfc     11 16 0F 09 
0ed00     03 FD F4 F0 
0ed04     EC F8 03 0B | 	byte	$f4, $ec, $f4, $01, $11, $16, $0f, $09, $03, $fd, $f4, $f0, $ec, $f8, $03, $0b
0ed08     0C 0F 11 0F 
0ed0c     04 F5 E8 EA 
0ed10     F3 01 08 04 
0ed14     04 07 04 FD | 	byte	$0c, $0f, $11, $0f, $04, $f5, $e8, $ea, $f3, $01, $08, $04, $04, $07, $04, $fd
0ed18     F3 EE F8 01 
0ed1c     11 17 10 0B 
0ed20     01 F9 F1 ED 
0ed24     EF FC 06 0B | 	byte	$f3, $ee, $f8, $01, $11, $17, $10, $0b, $01, $f9, $f1, $ed, $ef, $fc, $06, $0b
0ed28     0D 11 11 0D 
0ed2c     01 F2 E6 EB 
0ed30     F5 03 07 04 
0ed34     06 08 03 FA | 	byte	$0d, $11, $11, $0d, $01, $f2, $e6, $eb, $f5, $03, $07, $04, $06, $08, $03, $fa
0ed38     F1 EF F9 01 
0ed3c     0F 14 13 0D 
0ed40     06 F9 F2 EA 
0ed44     F1 FC 06 0A | 	byte	$f1, $ef, $f9, $01, $0f, $14, $13, $0d, $06, $f9, $f2, $ea, $f1, $fc, $06, $0a
0ed48     0D 11 11 0C 
0ed4c     FD EE E7 EE 
0ed50     FC 06 04 03 
0ed54     04 04 00 F9 | 	byte	$0d, $11, $11, $0c, $fd, $ee, $e7, $ee, $fc, $06, $04, $03, $04, $04, $00, $f9
0ed58     F5 F6 FE 02 
0ed5c     0B 0D 0E 0B 
0ed60     07 FB F4 EC 
0ed64     F2 FD 06 08 | 	byte	$f5, $f6, $fe, $02, $0b, $0d, $0e, $0b, $07, $fb, $f4, $ec, $f2, $fd, $06, $08
0ed68     0D 10 11 0A 
0ed6c     FC EE ED F3 
0ed70     FE 06 01 02 
0ed74     02 01 FC F9 | 	byte	$0d, $10, $11, $0a, $fc, $ee, $ed, $f3, $fe, $06, $01, $02, $02, $01, $fc, $f9
0ed78     F6 FC 02 06 
0ed7c     07 06 08 09 
0ed80     09 01 F7 EF 
0ed84     F5 FD 03 04 | 	byte	$f6, $fc, $02, $06, $07, $06, $08, $09, $09, $01, $f7, $ef, $f5, $fd, $03, $04
0ed88     09 0E 11 0A 
0ed8c     F9 ED EE F6 
0ed90     FE 05 00 05 
0ed94     07 03 FD F5 | 	byte	$09, $0e, $11, $0a, $f9, $ed, $ee, $f6, $fe, $05, $00, $05, $07, $03, $fd, $f5
0ed98     F3 FB 01 06 
0ed9c     06 04 07 0B 
0eda0     0B 03 F8 F1 
0eda4     F7 FC 01 05 | 	byte	$f3, $fb, $01, $06, $06, $04, $07, $0b, $0b, $03, $f8, $f1, $f7, $fc, $01, $05
0eda8     0A 0F 0C 05 
0edac     F4 ED F2 FC 
0edb0     04 05 04 06 
0edb4     04 FD F6 F2 | 	byte	$0a, $0f, $0c, $05, $f4, $ed, $f2, $fc, $04, $05, $04, $06, $04, $fd, $f6, $f2
0edb8     F4 FE 05 09 
0edbc     08 03 05 0A 
0edc0     09 02 F9 F5 
0edc4     F9 FC FE 05 | 	byte	$f4, $fe, $05, $09, $08, $03, $05, $0a, $09, $02, $f9, $f5, $f9, $fc, $fe, $05
0edc8     0B 0F 0C 02 
0edcc     F4 ED F2 FD 
0edd0     06 05 06 07 
0edd4     06 FE F5 F0 | 	byte	$0b, $0f, $0c, $02, $f4, $ed, $f2, $fd, $06, $05, $06, $07, $06, $fe, $f5, $f0
0edd8     F3 FF 06 0C 
0eddc     07 02 01 05 
0ede0     05 01 FA FB 
0ede4     FE FF FE 02 | 	byte	$f3, $ff, $06, $0c, $07, $02, $01, $05, $05, $01, $fa, $fb, $fe, $ff, $fe, $02
0ede8     07 0A 08 01 
0edec     F6 F2 F5 FD 
0edf0     05 02 05 05 
0edf4     04 FD F5 F1 | 	byte	$07, $0a, $08, $01, $f6, $f2, $f5, $fd, $05, $02, $05, $05, $04, $fd, $f5, $f1
0edf8     F6 02 0A 0F 
0edfc     07 01 FE 01 
0ee00     00 FC FA FE 
0ee04     02 03 02 02 | 	byte	$f6, $02, $0a, $0f, $07, $01, $fe, $01, $00, $fc, $fa, $fe, $02, $03, $02, $02
0ee08     04 06 06 FF 
0ee0c     F9 F7 F9 00 
0ee10     02 00 00 02 
0ee14     01 FC F6 F3 | 	byte	$04, $06, $06, $ff, $f9, $f7, $f9, $00, $02, $00, $00, $02, $01, $fc, $f6, $f3
0ee18     FA 03 0C 0D 
0ee1c     08 01 FF FE 
0ee20     FE F8 F8 FD 
0ee24     05 07 06 05 | 	byte	$fa, $03, $0c, $0d, $08, $01, $ff, $fe, $fe, $f8, $f8, $fd, $05, $07, $06, $05
0ee28     03 06 03 FC 
0ee2c     F7 F9 FB FE 
0ee30     FF 00 01 02 
0ee34     00 FE FB F8 | 	byte	$03, $06, $03, $fc, $f7, $f9, $fb, $fe, $ff, $00, $01, $02, $00, $fe, $fb, $f8
0ee38     FD FF 09 08 
0ee3c     06 02 02 00 
0ee40     FC F9 FA FF 
0ee44     03 05 05 04 | 	byte	$fd, $ff, $09, $08, $06, $02, $02, $00, $fc, $f9, $fa, $ff, $03, $05, $05, $04
0ee48     01 02 00 00 
0ee4c     FD 00 02 FF 
0ee50     FC FB FB FC 
0ee54     FD FF 00 FF | 	byte	$01, $02, $00, $00, $fd, $00, $02, $ff, $fc, $fb, $fb, $fc, $fd, $ff, $00, $ff
0ee58     03 02 05 02 
0ee5c     FF 01 04 02 
0ee60     FE FD FE 03 
0ee64     04 03 02 02 | 	byte	$03, $02, $05, $02, $ff, $01, $04, $02, $fe, $fd, $fe, $03, $04, $03, $02, $02
0ee68     01 00 FD FE 
0ee6c     00 04 04 01 
0ee70     FB F9 F8 F9 
0ee74     FA FE 00 04 | 	byte	$01, $00, $fd, $fe, $00, $04, $04, $01, $fb, $f9, $f8, $f9, $fa, $fe, $00, $04
0ee78     06 06 06 FF 
0ee7c     FD 00 05 02 
0ee80     00 FE 00 02 
0ee84     03 FF 01 01 | 	byte	$06, $06, $06, $ff, $fd, $00, $05, $02, $00, $fe, $00, $02, $03, $ff, $01, $01
0ee88     02 00 FD FE 
0ee8c     03 07 04 03 
0ee90     F9 F8 F6 F6 
0ee94     F8 FE 01 08 | 	byte	$02, $00, $fd, $fe, $03, $07, $04, $03, $f9, $f8, $f6, $f6, $f8, $fe, $01, $08
0ee98     0A 09 04 FD 
0ee9c     FB FD 01 00 
0eea0     01 01 04 03 
0eea4     00 FE 01 01 | 	byte	$0a, $09, $04, $fd, $fb, $fd, $01, $00, $01, $01, $04, $03, $00, $fe, $01, $01
0eea8     02 01 FE FE 
0eeac     02 07 04 00 
0eeb0     F8 F5 F5 F7 
0eeb4     FA FF 05 0C | 	byte	$02, $01, $fe, $fe, $02, $07, $04, $00, $f8, $f5, $f5, $f7, $fa, $ff, $05, $0c
0eeb8     0B 08 01 FA 
0eebc     FA FD 00 02 
0eec0     02 03 03 FF 
0eec4     F9 FA FF 03 | 	byte	$0b, $08, $01, $fa, $fa, $fd, $00, $02, $02, $03, $03, $ff, $f9, $fa, $ff, $03
0eec8     05 04 FF FF 
0eecc     02 04 04 00 
0eed0     FA F8 F7 F8 
0eed4     FB FE 03 0A | 	byte	$05, $04, $ff, $ff, $02, $04, $04, $00, $fa, $f8, $f7, $f8, $fb, $fe, $03, $0a
0eed8     08 08 FF F9 
0eedc     FC 01 04 04 
0eee0     04 01 00 FD 
0eee4     F7 FA 03 08 | 	byte	$08, $08, $ff, $f9, $fc, $01, $04, $04, $04, $01, $00, $fd, $f7, $fa, $03, $08
0eee8     09 02 FD FC 
0eeec     FF 02 05 01 
0eef0     FE F9 F5 F6 
0eef4     F9 FF 04 0A | 	byte	$09, $02, $fd, $fc, $ff, $02, $05, $01, $fe, $f9, $f5, $f6, $f9, $ff, $04, $0a
0eef8     0A 08 FF F9 
0eefc     F9 00 04 06 
0ef00     06 02 00 FC 
0ef04     F8 FB 00 08 | 	byte	$0a, $08, $ff, $f9, $f9, $00, $04, $06, $06, $02, $00, $fc, $f8, $fb, $00, $08
0ef08     09 03 FE FD 
0ef0c     FF 03 05 03 
0ef10     FF F7 F4 F5 
0ef14     FA FF 05 08 | 	byte	$09, $03, $fe, $fd, $ff, $03, $05, $03, $ff, $f7, $f4, $f5, $fa, $ff, $05, $08
0ef18     0B 08 FF F9 
0ef1c     F8 FF 05 06 
0ef20     04 02 FE FA 
0ef24     F8 FC 01 0A | 	byte	$0b, $08, $ff, $f9, $f8, $ff, $05, $06, $04, $02, $fe, $fa, $f8, $fc, $01, $0a
0ef28     0A 05 FF FD 
0ef2c     FD 01 03 03 
0ef30     00 FA F7 F5 
0ef34     FA FC 05 05 | 	byte	$0a, $05, $ff, $fd, $fd, $01, $03, $03, $00, $fa, $f7, $f5, $fa, $fc, $05, $05
0ef38     0A 08 01 FB 
0ef3c     FA FC 03 05 
0ef40     04 02 FD F8 
0ef44     F9 FF 03 0A | 	byte	$0a, $08, $01, $fb, $fa, $fc, $03, $05, $04, $02, $fd, $f8, $f9, $ff, $03, $0a
0ef48     08 05 FF FC 
0ef4c     FD 00 02 03 
0ef50     02 FD F8 F5 
0ef54     FA FD 04 05 | 	byte	$08, $05, $ff, $fc, $fd, $00, $02, $03, $02, $fd, $f8, $f5, $fa, $fd, $04, $05
0ef58     09 05 01 FB 
0ef5c     FC FD 01 05 
0ef60     05 04 FD F8 
0ef64     FA 02 04 08 | 	byte	$09, $05, $01, $fb, $fc, $fd, $01, $05, $05, $04, $fd, $f8, $fa, $02, $04, $08
0ef68     04 02 FF FE 
0ef6c     FF 00 01 02 
0ef70     00 FF F9 F7 
0ef74     FA FD 02 04 | 	byte	$04, $02, $ff, $fe, $ff, $00, $01, $02, $00, $ff, $f9, $f7, $fa, $fd, $02, $04
0ef78     07 03 01 FD 
0ef7c     FD FD FE 02 
0ef80     05 04 FF FA 
0ef84     FD 03 06 04 | 	byte	$07, $03, $01, $fd, $fd, $fd, $fe, $02, $05, $04, $ff, $fa, $fd, $03, $06, $04
0ef88     FF 00 FF 01 
0ef8c     00 00 FE FF 
0ef90     FE 00 FC FC 
0ef94     FA FE 01 02 | 	byte	$ff, $00, $ff, $01, $00, $00, $fe, $ff, $fe, $00, $fc, $fc, $fa, $fe, $01, $02
0ef98     03 FF FE FE 
0ef9c     FF FE 00 03 
0efa0     08 05 FF FB 
0efa4     FE 01 06 02 | 	byte	$03, $ff, $fe, $fe, $ff, $fe, $00, $03, $08, $05, $ff, $fb, $fe, $01, $06, $02
0efa8     FD FD 01 07 
0efac     04 FF FA FA 
0efb0     F9 FC FC 00 
0efb4     01 05 05 03 | 	byte	$fd, $fd, $01, $07, $04, $ff, $fa, $fa, $f9, $fc, $fc, $00, $01, $05, $05, $03
0efb8     00 FD F9 FD 
0efbc     00 00 03 03 
0efc0     06 01 FA FB 
0efc4     00 04 09 02 | 	byte	$00, $fd, $f9, $fd, $00, $00, $03, $03, $06, $01, $fa, $fb, $00, $04, $09, $02
0efc8     FF FC 02 07 
0efcc     03 FE F9 F7 
0efd0     FA FC FE 04 
0efd4     05 07 05 02 | 	byte	$ff, $fc, $02, $07, $03, $fe, $f9, $f7, $fa, $fc, $fe, $04, $05, $07, $05, $02
0efd8     FD F9 F9 FE 
0efdc     01 01 02 03 
0efe0     02 FF FB FD 
0efe4     04 08 0A 02 | 	byte	$fd, $f9, $f9, $fe, $01, $01, $02, $03, $02, $ff, $fb, $fd, $04, $08, $0a, $02
0efe8     FD FB FF 05 
0efec     02 FC F9 F8 
0eff0     F9 FA FF 05 
0eff4     09 0B 08 05 | 	byte	$fd, $fb, $ff, $05, $02, $fc, $f9, $f8, $f9, $fa, $ff, $05, $09, $0b, $08, $05
0eff8     FC F5 F5 FA 
0effc     FF 02 03 04 
0f000     01 FE FD FF 
0f004     05 09 08 02 | 	byte	$fc, $f5, $f5, $fa, $ff, $02, $03, $04, $01, $fe, $fd, $ff, $05, $09, $08, $02
0f008     FD FD FF 02 
0f00c     01 FD FC F8 
0f010     F8 F9 FE 05 
0f014     0A 0E 0C 06 | 	byte	$fd, $fd, $ff, $02, $01, $fd, $fc, $f8, $f8, $f9, $fe, $05, $0a, $0e, $0c, $06
0f018     FD F2 F3 F9 
0f01c     FF 06 06 05 
0f020     FD F9 F8 FD 
0f024     07 0C 0B 05 | 	byte	$fd, $f2, $f3, $f9, $ff, $06, $06, $05, $fd, $f9, $f8, $fd, $07, $0c, $0b, $05
0f028     FF FD FC FA 
0f02c     FB FA FE FD 
0f030     FD FD 02 04 
0f034     08 0A 08 02 | 	byte	$ff, $fd, $fc, $fa, $fb, $fa, $fe, $fd, $fd, $fd, $02, $04, $08, $0a, $08, $02
0f038     FB F5 F7 FB 
0f03c     02 08 07 03 
0f040     FA F5 F7 00 
0f044     08 0D 0A 06 | 	byte	$fb, $f5, $f7, $fb, $02, $08, $07, $03, $fa, $f5, $f7, $00, $08, $0d, $0a, $06
0f048     01 FE FB F7 
0f04c     F8 FA FD FE 
0f050     FF 00 03 05 
0f054     09 08 05 00 | 	byte	$01, $fe, $fb, $f7, $f8, $fa, $fd, $fe, $ff, $00, $03, $05, $09, $08, $05, $00
0f058     F9 F7 F8 FC 
0f05c     02 08 09 03 
0f060     F8 F4 F5 FF 
0f064     05 0C 0B 09 | 	byte	$f9, $f7, $f8, $fc, $02, $08, $09, $03, $f8, $f4, $f5, $ff, $05, $0c, $0b, $09
0f068     04 01 FB F6 
0f06c     F4 F8 FB FD 
0f070     FF 02 07 08 
0f074     0B 08 04 FB | 	byte	$04, $01, $fb, $f6, $f4, $f8, $fb, $fd, $ff, $02, $07, $08, $0b, $08, $04, $fb
0f078     F8 F8 FB FD 
0f07c     02 06 07 02 
0f080     F9 F6 F7 00 
0f084     06 0B 08 07 | 	byte	$f8, $f8, $fb, $fd, $02, $06, $07, $02, $f9, $f6, $f7, $00, $06, $0b, $08, $07
0f088     03 01 FD F7 
0f08c     F4 F9 FB FD 
0f090     FE 01 05 05 
0f094     09 06 04 FB | 	byte	$03, $01, $fd, $f7, $f4, $f9, $fb, $fd, $fe, $01, $05, $05, $09, $06, $04, $fb
0f098     FA FC 01 03 
0f09c     04 04 02 FE 
0f0a0     F9 F8 FB 01 
0f0a4     06 08 05 03 | 	byte	$fa, $fc, $01, $03, $04, $04, $02, $fe, $f9, $f8, $fb, $01, $06, $08, $05, $03
0f0a8     00 00 FD FA 
0f0ac     F8 FA FD 00 
0f0b0     02 03 03 05 
0f0b4     05 03 00 FB | 	byte	$00, $00, $fd, $fa, $f8, $fa, $fd, $00, $02, $03, $03, $05, $05, $03, $00, $fb
0f0b8     F9 FF 03 06 
0f0bc     06 02 FE FA 
0f0c0     F7 F9 FE 02 
0f0c4     07 07 08 06 | 	byte	$f9, $ff, $03, $06, $06, $02, $fe, $fa, $f7, $f9, $fe, $02, $07, $07, $08, $06
0f0c8     03 00 FA F7 
0f0cc     F5 F6 FB 02 
0f0d0     07 0B 07 07 
0f0d4     01 FF FB F8 | 	byte	$03, $00, $fa, $f7, $f5, $f6, $fb, $02, $07, $0b, $07, $07, $01, $ff, $fb, $f8
0f0d8     F7 FD 04 09 
0f0dc     0A 05 FF FA 
0f0e0     F8 F9 FE FF 
0f0e4     03 03 08 09 | 	byte	$f7, $fd, $04, $09, $0a, $05, $ff, $fa, $f8, $f9, $fe, $ff, $03, $03, $08, $09
0f0e8     08 03 FB F8 
0f0ec     F6 F4 F8 00 
0f0f0     08 0E 0B 07 
0f0f4     00 FA F7 F5 | 	byte	$08, $03, $fb, $f8, $f6, $f4, $f8, $00, $08, $0e, $0b, $07, $00, $fa, $f7, $f5
0f0f8     F7 FD 05 0A 
0f0fc     0C 08 01 FA 
0f100     F8 FB FF 00 
0f104     00 00 06 09 | 	byte	$f7, $fd, $05, $0a, $0c, $08, $01, $fa, $f8, $fb, $ff, $00, $00, $00, $06, $09
0f108     08 03 FB F8 
0f10c     F7 F4 F6 FD 
0f110     09 10 12 0B 
0f114     01 F8 F1 F2 | 	byte	$08, $03, $fb, $f8, $f7, $f4, $f6, $fd, $09, $10, $12, $0b, $01, $f8, $f1, $f2
0f118     F6 FD 04 0B 
0f11c     0C 0A 01 FA 
0f120     F6 FA FE FF 
0f124     FE FF 08 0B | 	byte	$f6, $fd, $04, $0b, $0c, $0a, $01, $fa, $f6, $fa, $fe, $ff, $fe, $ff, $08, $0b
0f128     0A 04 FC F7 
0f12c     F5 F2 F5 FB 
0f130     09 10 14 0E 
0f134     03 F8 EF F1 | 	byte	$0a, $04, $fc, $f7, $f5, $f2, $f5, $fb, $09, $10, $14, $0e, $03, $f8, $ef, $f1
0f138     F5 FC 01 08 
0f13c     0B 0A 02 FB 
0f140     F8 FB FD FE 
0f144     FD FF 06 09 | 	byte	$f5, $fc, $01, $08, $0b, $0a, $02, $fb, $f8, $fb, $fd, $fe, $fd, $ff, $06, $09
0f148     0B 04 00 F9 
0f14c     F3 F2 F5 FB 
0f150     08 10 14 0E 
0f154     03 F7 EF EF | 	byte	$0b, $04, $00, $f9, $f3, $f2, $f5, $fb, $08, $10, $14, $0e, $03, $f7, $ef, $ef
0f158     F6 FF 03 09 
0f15c     0B 09 00 FA 
0f160     F7 FC FD 00 
0f164     FF 05 07 08 | 	byte	$f6, $ff, $03, $09, $0b, $09, $00, $fa, $f7, $fc, $fd, $00, $ff, $05, $07, $08
0f168     07 02 FC F8 
0f16c     F2 F5 FA 02 
0f170     0A 0E 10 07 
0f174     FF F2 F0 F1 | 	byte	$07, $02, $fc, $f8, $f2, $f5, $fa, $02, $0a, $0e, $10, $07, $ff, $f2, $f0, $f1
0f178     FB 04 09 0A 
0f17c     09 03 FD F8 
0f180     F9 FF 00 02 
0f184     01 08 06 05 | 	byte	$fb, $04, $09, $0a, $09, $03, $fd, $f8, $f9, $ff, $00, $02, $01, $08, $06, $05
0f188     03 00 FC F9 
0f18c     F5 F7 FC 04 
0f190     09 0B 0A 02 
0f194     FE F6 F4 F5 | 	byte	$03, $00, $fc, $f9, $f5, $f7, $fc, $04, $09, $0b, $0a, $02, $fe, $f6, $f4, $f5
0f198     FC 05 0A 0B 
0f19c     07 00 FB F7 
0f1a0     FA FE FF 02 
0f1a4     04 07 05 02 | 	byte	$fc, $05, $0a, $0b, $07, $00, $fb, $f7, $fa, $fe, $ff, $02, $04, $07, $05, $02
0f1a8     FE FD FC FA 
0f1ac     F9 FB 00 07 
0f1b0     09 08 03 FE 
0f1b4     FD FA FA F9 | 	byte	$fe, $fd, $fc, $fa, $f9, $fb, $00, $07, $09, $08, $03, $fe, $fd, $fa, $fa, $f9
0f1b8     FF 04 09 09 
0f1bc     04 FE FB F9 
0f1c0     FC FF 01 02 
0f1c4     05 07 05 01 | 	byte	$ff, $04, $09, $09, $04, $fe, $fb, $f9, $fc, $ff, $01, $02, $05, $07, $05, $01
0f1c8     FC FC FC FA 
0f1cc     F9 FC 00 08 
0f1d0     08 06 FF FE 
0f1d4     FD FE FC FB | 	byte	$fc, $fc, $fc, $fa, $f9, $fc, $00, $08, $08, $06, $ff, $fe, $fd, $fe, $fc, $fb
0f1d8     FC 00 07 08 
0f1dc     05 00 FB FB 
0f1e0     FF FF 01 00 
0f1e4     03 06 04 01 | 	byte	$fc, $00, $07, $08, $05, $00, $fb, $fb, $ff, $ff, $01, $00, $03, $06, $04, $01
0f1e8     FB FA F9 FB 
0f1ec     FB FF 02 0A 
0f1f0     09 04 FB F9 
0f1f4     FA FF 02 01 | 	byte	$fb, $fa, $f9, $fb, $fb, $ff, $02, $0a, $09, $04, $fb, $f9, $fa, $ff, $02, $01
0f1f8     00 00 04 06 
0f1fc     02 FE FA FE 
0f200     04 04 03 FE 
0f204     FF 01 FF FD | 	byte	$00, $00, $04, $06, $02, $fe, $fa, $fe, $04, $04, $03, $fe, $ff, $01, $ff, $fd
0f208     FA FA FD FF 
0f20c     01 03 05 07 
0f210     05 00 F8 F7 
0f214     F9 02 07 07 | 	byte	$fa, $fa, $fd, $ff, $01, $03, $05, $07, $05, $00, $f8, $f7, $f9, $02, $07, $07
0f218     03 02 02 02 
0f21c     FE FB FA FF 
0f220     06 07 04 FF 
0f224     00 00 FE FC | 	byte	$03, $02, $02, $02, $fe, $fb, $fa, $ff, $06, $07, $04, $ff, $00, $00, $fe, $fc
0f228     FA F8 FB FF 
0f22c     05 06 0A 07 
0f230     04 FD F7 F3 
0f234     F7 00 06 09 | 	byte	$fa, $f8, $fb, $ff, $05, $06, $0a, $07, $04, $fd, $f7, $f3, $f7, $00, $06, $09
0f238     05 04 02 00 
0f23c     FB F9 F9 01 
0f240     07 09 05 01 
0f244     00 FE FC FA | 	byte	$05, $04, $02, $00, $fb, $f9, $f9, $01, $07, $09, $05, $01, $00, $fe, $fc, $fa
0f248     F9 FA FB FF 
0f24c     06 08 0B 07 
0f250     03 FB F7 F3 
0f254     F8 00 06 09 | 	byte	$f9, $fa, $fb, $ff, $06, $08, $0b, $07, $03, $fb, $f7, $f3, $f8, $00, $06, $09
0f258     07 05 01 FE 
0f25c     F9 F7 FB 04 
0f260     08 0B 05 02 
0f264     00 FC FA F9 | 	byte	$07, $05, $01, $fe, $f9, $f7, $fb, $04, $08, $0b, $05, $02, $00, $fc, $fa, $f9
0f268     FA FB FC FE 
0f26c     04 07 0A 06 
0f270     01 FA F7 F6 
0f274     FB 01 05 07 | 	byte	$fa, $fb, $fc, $fe, $04, $07, $0a, $06, $01, $fa, $f7, $f6, $fb, $01, $05, $07
0f278     08 08 04 FF 
0f27c     F8 F7 FB 04 
0f280     07 09 03 01 
0f284     FE FA F8 F8 | 	byte	$08, $08, $04, $ff, $f8, $f7, $fb, $04, $07, $09, $03, $01, $fe, $fa, $f8, $f8
0f288     FC 00 00 00 
0f28c     02 06 07 03 
0f290     00 FA FA FB 
0f294     FF 01 03 03 | 	byte	$fc, $00, $00, $00, $02, $06, $07, $03, $00, $fa, $fa, $fb, $ff, $01, $03, $03
0f298     06 07 04 FD 
0f29c     F7 F8 FE 07 
0f2a0     08 07 04 01 
0f2a4     FD F7 F4 F8 | 	byte	$06, $07, $04, $fd, $f7, $f8, $fe, $07, $08, $07, $04, $01, $fd, $f7, $f4, $f8
0f2a8     FC 02 02 03 
0f2ac     02 06 06 02 
0f2b0     FE FB FB FD 
0f2b4     01 00 02 02 | 	byte	$fc, $02, $02, $03, $02, $06, $06, $02, $fe, $fb, $fb, $fd, $01, $00, $02, $02
0f2b8     05 07 05 FC 
0f2bc     F6 F7 FE 05 
0f2c0     08 07 07 05 
0f2c4     FE F9 F4 F6 | 	byte	$05, $07, $05, $fc, $f6, $f7, $fe, $05, $08, $07, $07, $05, $fe, $f9, $f4, $f6
0f2c8     FB 00 02 04 
0f2cc     04 06 05 02 
0f2d0     FD FA FA FC 
0f2d4     01 02 03 03 | 	byte	$fb, $00, $02, $04, $04, $06, $05, $02, $fd, $fa, $fa, $fc, $01, $02, $03, $03
0f2d8     06 07 05 FA 
0f2dc     F6 F7 00 05 
0f2e0     08 06 08 06 
0f2e4     FF F7 F3 F4 | 	byte	$06, $07, $05, $fa, $f6, $f7, $00, $05, $08, $06, $08, $06, $ff, $f7, $f3, $f4
0f2e8     FA FE 02 06 
0f2ec     06 07 04 01 
0f2f0     FC F9 F9 FC 
0f2f4     00 02 03 05 | 	byte	$fa, $fe, $02, $06, $06, $07, $04, $01, $fc, $f9, $f9, $fc, $00, $02, $03, $05
0f2f8     09 08 04 FA 
0f2fc     F4 F5 FE 03 
0f300     06 06 0A 08 
0f304     FF F7 F4 F4 | 	byte	$09, $08, $04, $fa, $f4, $f5, $fe, $03, $06, $06, $0a, $08, $ff, $f7, $f4, $f4
0f308     F9 FE 01 05 
0f30c     06 06 03 01 
0f310     FD FB FB FF 
0f314     00 00 01 04 | 	byte	$f9, $fe, $01, $05, $06, $06, $03, $01, $fd, $fb, $fb, $ff, $00, $00, $01, $04
0f318     08 08 03 FC 
0f31c     F8 F9 FE 00 
0f320     02 04 09 08 
0f324     01 F9 F6 F6 | 	byte	$08, $08, $03, $fc, $f8, $f9, $fe, $00, $02, $04, $09, $08, $01, $f9, $f6, $f6
0f328     F9 FE 01 04 
0f32c     06 05 03 01 
0f330     FD FC FA FF 
0f334     FF 01 01 04 | 	byte	$f9, $fe, $01, $04, $06, $05, $03, $01, $fd, $fc, $fa, $ff, $ff, $01, $01, $04
0f338     09 07 01 FC 
0f33c     FA FD 00 FF 
0f340     01 03 07 06 
0f344     00 F9 F6 F7 | 	byte	$09, $07, $01, $fc, $fa, $fd, $00, $ff, $01, $03, $07, $06, $00, $f9, $f6, $f7
0f348     FB FF 03 04 
0f34c     06 05 03 00 
0f350     FD FC FB FD 
0f354     FE 01 02 05 | 	byte	$fb, $ff, $03, $04, $06, $05, $03, $00, $fd, $fc, $fb, $fd, $fe, $01, $02, $05
0f358     07 06 FF FB 
0f35c     FC 00 00 FF 
0f360     FF 02 05 04 
0f364     00 FC F9 FA | 	byte	$07, $06, $ff, $fb, $fc, $00, $00, $ff, $ff, $02, $05, $04, $00, $fc, $f9, $fa
0f368     FD FF 01 01 
0f36c     03 03 04 01 
0f370     00 FE FF FD 
0f374     FD FF 00 04 | 	byte	$fd, $ff, $01, $01, $03, $03, $04, $01, $00, $fe, $ff, $fd, $fd, $ff, $00, $04
0f378     05 05 00 FD 
0f37c     FF 03 00 FE 
0f380     FD 01 04 01 
0f384     FD FC FB FC | 	byte	$05, $05, $00, $fd, $ff, $03, $00, $fe, $fd, $01, $04, $01, $fd, $fc, $fb, $fc
0f388     FE FF 00 00 
0f38c     03 04 06 02 
0f390     02 FF FF FB 
0f394     F9 FB FF 04 | 	byte	$fe, $ff, $00, $00, $03, $04, $06, $02, $02, $ff, $ff, $fb, $f9, $fb, $ff, $04
0f398     05 03 01 FE 
0f39c     01 04 00 FF 
0f3a0     00 04 05 00 
0f3a4     FB FB FA FD | 	byte	$05, $03, $01, $fe, $01, $04, $00, $ff, $00, $04, $05, $00, $fb, $fb, $fa, $fd
0f3a8     FD FE FE 01 
0f3ac     03 06 06 03 
0f3b0     03 01 00 FC 
0f3b4     F9 F8 FE 02 | 	byte	$fd, $fe, $fe, $01, $03, $06, $06, $03, $03, $01, $00, $fc, $f9, $f8, $fe, $02
0f3b8     05 01 01 02 
0f3bc     04 05 00 FF 
0f3c0     01 04 03 FD 
0f3c4     F9 FA FD 01 | 	byte	$05, $01, $01, $02, $04, $05, $00, $ff, $01, $04, $03, $fd, $f9, $fa, $fd, $01
0f3c8     00 FE FB FD 
0f3cc     FE 03 04 04 
0f3d0     06 05 04 FE 
0f3d4     F8 F6 FB 00 | 	byte	$00, $fe, $fb, $fd, $fe, $03, $04, $04, $06, $05, $04, $fe, $f8, $f6, $fb, $00
0f3d8     03 01 01 04 
0f3dc     08 05 00 FE 
0f3e0     00 03 FF FB 
0f3e4     F9 FC 01 04 | 	byte	$03, $01, $01, $04, $08, $05, $00, $fe, $00, $03, $ff, $fb, $f9, $fc, $01, $04
0f3e8     02 FE F9 F8 
0f3ec     FB 01 04 06 
0f3f0     09 07 05 FD 
0f3f4     F8 F6 FA FE | 	byte	$02, $fe, $f9, $f8, $fb, $01, $04, $06, $09, $07, $05, $fd, $f8, $f6, $fa, $fe
0f3f8     00 FF 00 05 
0f3fc     0A 07 04 00 
0f400     00 00 FD F8 
0f404     F8 FB 02 06 | 	byte	$00, $ff, $00, $05, $0a, $07, $04, $00, $00, $00, $fd, $f8, $f8, $fb, $02, $06
0f408     05 01 FA F8 
0f40c     FA FF 01 05 
0f410     08 09 06 00 
0f414     FA F9 FA FD | 	byte	$05, $01, $fa, $f8, $fa, $ff, $01, $05, $08, $09, $06, $00, $fa, $f9, $fa, $fd
0f418     FD FC FE 04 
0f41c     0A 09 06 03 
0f420     02 FE FC F7 
0f424     F9 FB 03 07 | 	byte	$fd, $fc, $fe, $04, $0a, $09, $06, $03, $02, $fe, $fc, $f7, $f9, $fb, $03, $07
0f428     07 01 FB F8 
0f42c     FA FE 00 05 
0f430     06 08 05 00 
0f434     FC FB FC FD | 	byte	$07, $01, $fb, $f8, $fa, $fe, $00, $05, $06, $08, $05, $00, $fc, $fb, $fc, $fd
0f438     FC FB FE 04 
0f43c     08 08 09 06 
0f440     05 FF FA F7 
0f444     F8 FD 02 05 | 	byte	$fc, $fb, $fe, $04, $08, $08, $09, $06, $05, $ff, $fa, $f7, $f8, $fd, $02, $05
0f448     05 00 FC F9 
0f44c     FA FD FE 03 
0f450     05 07 03 01 
0f454     FE FE FE FE | 	byte	$05, $00, $fc, $f9, $fa, $fd, $fe, $03, $05, $07, $03, $01, $fe, $fe, $fe, $fe
0f458     FC FB FF 04 
0f45c     06 05 06 06 
0f460     05 FF FA F7 
0f464     F8 FD 03 05 | 	byte	$fc, $fb, $ff, $04, $06, $05, $06, $06, $05, $ff, $fa, $f7, $f8, $fd, $03, $05
0f468     05 01 FE FB 
0f46c     FB FB FD 02 
0f470     05 07 05 02 
0f474     FF FD FD FC | 	byte	$05, $01, $fe, $fb, $fb, $fb, $fd, $02, $05, $07, $05, $02, $ff, $fd, $fd, $fc
0f478     FC FD 01 06 
0f47c     04 04 03 06 
0f480     06 02 F9 F5 
0f484     F7 FC 02 04 | 	byte	$fc, $fd, $01, $06, $04, $04, $03, $06, $06, $02, $f9, $f5, $f7, $fc, $02, $04
0f488     05 02 01 FD 
0f48c     FC F9 FB FF 
0f490     05 07 04 03 
0f494     01 FE FC F9 | 	byte	$05, $02, $01, $fd, $fc, $f9, $fb, $ff, $05, $07, $04, $03, $01, $fe, $fc, $f9
0f498     F9 FD 04 08 
0f49c     06 04 03 05 
0f4a0     05 00 F9 F7 
0f4a4     F8 FD 01 03 | 	byte	$f9, $fd, $04, $08, $06, $04, $03, $05, $05, $00, $f9, $f7, $f8, $fd, $01, $03
0f4a8     02 01 00 FF 
0f4ac     FD FA FC FE 
0f4b0     03 06 05 04 
0f4b4     02 01 FD F8 | 	byte	$02, $01, $00, $ff, $fd, $fa, $fc, $fe, $03, $06, $05, $04, $02, $01, $fd, $f8
0f4b8     F7 FC 04 09 
0f4bc     07 05 04 04 
0f4c0     02 FD F9 F8 
0f4c4     F9 FE 01 02 | 	byte	$f7, $fc, $04, $09, $07, $05, $04, $04, $02, $fd, $f9, $f8, $f9, $fe, $01, $02
0f4c8     00 00 FF FF 
0f4cc     FD FA FC FE 
0f4d0     05 06 06 03 
0f4d4     03 01 FE F6 | 	byte	$00, $00, $ff, $ff, $fd, $fa, $fc, $fe, $05, $06, $06, $03, $03, $01, $fe, $f6
0f4d8     F5 FB 05 09 
0f4dc     08 07 05 04 
0f4e0     FF FB F8 FA 
0f4e4     FA FF 02 02 | 	byte	$f5, $fb, $05, $09, $08, $07, $05, $04, $ff, $fb, $f8, $fa, $fa, $ff, $02, $02
0f4e8     01 00 00 00 
0f4ec     FC FB FC FF 
0f4f0     03 04 05 03 
0f4f4     04 03 FE F8 | 	byte	$01, $00, $00, $00, $fc, $fb, $fc, $ff, $03, $04, $05, $03, $04, $03, $fe, $f8
0f4f8     F6 FB 05 07 
0f4fc     08 08 06 04 
0f500     FF FA F9 FA 
0f504     FB FE 00 01 | 	byte	$f6, $fb, $05, $07, $08, $08, $06, $04, $ff, $fa, $f9, $fa, $fb, $fe, $00, $01
0f508     00 00 00 02 
0f50c     FD FC FD 01 
0f510     03 03 02 03 
0f514     04 03 FD F9 | 	byte	$00, $00, $00, $02, $fd, $fc, $fd, $01, $03, $03, $02, $03, $04, $03, $fd, $f9
0f518     F8 FE 05 06 
0f51c     07 07 06 02 
0f520     FE F9 FA FB 
0f524     FF 00 00 00 | 	byte	$f8, $fe, $05, $06, $07, $07, $06, $02, $fe, $f9, $fa, $fb, $ff, $00, $00, $00
0f528     FF FF FF 00 
0f52c     FD FF 01 05 
0f530     04 01 FF 00 
0f534     01 00 FB F9 | 	byte	$ff, $ff, $ff, $00, $fd, $ff, $01, $05, $04, $01, $ff, $00, $01, $00, $fb, $f9
0f538     FC 01 06 06 
0f53c     07 05 04 00 
0f540     FC FA FB FD 
0f544     02 02 00 FD | 	byte	$fc, $01, $06, $06, $07, $05, $04, $00, $fc, $fa, $fb, $fd, $02, $02, $00, $fd
0f548     FD FD FE FE 
0f54c     FE 03 04 07 
0f550     03 FF FC FE 
0f554     00 FF FC FC | 	byte	$fd, $fd, $fe, $fe, $fe, $03, $04, $07, $03, $ff, $fc, $fe, $00, $ff, $fc, $fc
0f558     FF 06 07 05 
0f55c     03 03 03 00 
0f560     FD FB FD FF 
0f564     02 01 FD FB | 	byte	$ff, $06, $07, $05, $03, $03, $03, $00, $fd, $fb, $fd, $ff, $02, $01, $fd, $fb
0f568     FB FE FF FF 
0f56c     01 05 06 06 
0f570     02 FD FB FF 
0f574     FF FD FA FB | 	byte	$fb, $fe, $ff, $ff, $01, $05, $06, $06, $02, $fd, $fb, $ff, $ff, $fd, $fa, $fb
0f578     01 08 07 06 
0f57c     03 02 02 FF 
0f580     FD FC FE FF 
0f584     03 01 FD FA | 	byte	$01, $08, $07, $06, $03, $02, $02, $ff, $fd, $fc, $fe, $ff, $03, $01, $fd, $fa
0f588     FA FC FF FF 
0f58c     03 06 08 06 
0f590     FF FB F9 FE 
0f594     FE FC F9 FC | 	byte	$fa, $fc, $ff, $ff, $03, $06, $08, $06, $ff, $fb, $f9, $fe, $fe, $fc, $f9, $fc
0f598     03 0A 08 05 
0f59c     00 00 FF FF 
0f5a0     FE FF 00 02 
0f5a4     03 00 FC F7 | 	byte	$03, $0a, $08, $05, $00, $00, $ff, $ff, $fe, $ff, $00, $02, $03, $00, $fc, $f7
0f5a8     F7 FC 01 02 
0f5ac     06 07 08 04 
0f5b0     FD F8 FA FD 
0f5b4     00 FD FC FE | 	byte	$f7, $fc, $01, $02, $06, $07, $08, $04, $fd, $f8, $fa, $fd, $00, $fd, $fc, $fe
0f5b8     04 08 06 03 
0f5bc     FF FF FD 00 
0f5c0     01 04 03 04 
0f5c4     01 FD F9 F6 | 	byte	$04, $08, $06, $03, $ff, $ff, $fd, $00, $01, $04, $03, $04, $01, $fd, $f9, $f6
0f5c8     F7 FD 03 05 
0f5cc     09 08 07 01 
0f5d0     FB F7 FA FC 
0f5d4     FF FF FE 01 | 	byte	$f7, $fd, $03, $05, $09, $08, $07, $01, $fb, $f7, $fa, $fc, $ff, $ff, $fe, $01
0f5d8     05 06 06 03 
0f5dc     FF FF FD FF 
0f5e0     00 03 04 05 
0f5e4     02 FE F8 F5 | 	byte	$05, $06, $06, $03, $ff, $ff, $fd, $ff, $00, $03, $04, $05, $02, $fe, $f8, $f5
0f5e8     F7 FD 02 06 
0f5ec     09 09 06 FF 
0f5f0     FA F7 FA FD 
0f5f4     FE FF 01 04 | 	byte	$f7, $fd, $02, $06, $09, $09, $06, $ff, $fa, $f7, $fa, $fd, $fe, $ff, $01, $04
0f5f8     07 05 04 00 
0f5fc     FE FE FD FF 
0f600     02 04 05 04 
0f604     01 FC F7 F6 | 	byte	$07, $05, $04, $00, $fe, $fe, $fd, $ff, $02, $04, $05, $04, $01, $fc, $f7, $f6
0f608     F9 FF 02 08 
0f60c     0A 08 04 FD 
0f610     F9 F9 FB FC 
0f614     FC FD 02 05 | 	byte	$f9, $ff, $02, $08, $0a, $08, $04, $fd, $f9, $f9, $fb, $fc, $fc, $fd, $02, $05
0f618     08 05 03 00 
0f61c     FE FE FE FF 
0f620     02 04 06 06 
0f624     00 FC F7 F7 | 	byte	$08, $05, $03, $00, $fe, $fe, $fe, $ff, $02, $04, $06, $06, $00, $fc, $f7, $f7
0f628     F9 FF 00 06 
0f62c     09 08 03 FC 
0f630     F9 FC FE FE 
0f634     FB FB 00 06 | 	byte	$f9, $ff, $00, $06, $09, $08, $03, $fc, $f9, $fc, $fe, $fe, $fb, $fb, $00, $06
0f638     08 05 03 00 
0f63c     FF FE FD FE 
0f640     00 02 06 07 
0f644     01 FB F6 F6 | 	byte	$08, $05, $03, $00, $ff, $fe, $fd, $fe, $00, $02, $06, $07, $01, $fb, $f6, $f6
0f648     F9 FE 02 07 
0f64c     0A 09 01 FA 
0f650     F6 FB FE FE 
0f654     FB FC 01 08 | 	byte	$f9, $fe, $02, $07, $0a, $09, $01, $fa, $f6, $fb, $fe, $fe, $fb, $fc, $01, $08
0f658     0A 07 03 00 
0f65c     FF FE FC FC 
0f660     FF 02 07 07 
0f664     02 FB F7 F6 | 	byte	$0a, $07, $03, $00, $ff, $fe, $fc, $fc, $ff, $02, $07, $07, $02, $fb, $f7, $f6
0f668     F9 FD 01 07 
0f66c     09 07 00 F9 
0f670     F8 FC FF FF 
0f674     FC FC 01 08 | 	byte	$f9, $fd, $01, $07, $09, $07, $00, $f9, $f8, $fc, $ff, $ff, $fc, $fc, $01, $08
0f678     09 07 03 00 
0f67c     00 FD FC FC 
0f680     FE 01 05 06 
0f684     03 FC F7 F7 | 	byte	$09, $07, $03, $00, $00, $fd, $fc, $fc, $fe, $01, $05, $06, $03, $fc, $f7, $f7
0f688     FB FF 03 08 
0f68c     08 05 FE F7 
0f690     F8 FC FF FF 
0f694     FE FE 01 07 | 	byte	$fb, $ff, $03, $08, $08, $05, $fe, $f7, $f8, $fc, $ff, $ff, $fe, $fe, $01, $07
0f698     07 06 03 01 
0f69c     01 FF FD FE 
0f6a0     FD 00 03 04 
0f6a4     02 FB F7 F8 | 	byte	$07, $06, $03, $01, $01, $ff, $fd, $fe, $fd, $00, $03, $04, $02, $fb, $f7, $f8
0f6a8     FD 01 05 08 
0f6ac     08 03 FB F7 
0f6b0     F9 FE 01 01 
0f6b4     FF FF 01 04 | 	byte	$fd, $01, $05, $08, $08, $03, $fb, $f7, $f9, $fe, $01, $01, $ff, $ff, $01, $04
0f6b8     05 05 03 02 
0f6bc     02 01 FE FE 
0f6c0     FC FE 02 03 
0f6c4     02 FD FA FA | 	byte	$05, $05, $03, $02, $02, $01, $fe, $fe, $fc, $fe, $02, $03, $02, $fd, $fa, $fa
0f6c8     FF 01 06 07 
0f6cc     06 00 FB F7 
0f6d0     FA FE 00 00 
0f6d4     00 01 02 03 | 	byte	$ff, $01, $06, $07, $06, $00, $fb, $f7, $fa, $fe, $00, $00, $00, $01, $02, $03
0f6d8     03 04 04 03 
0f6dc     01 00 FF FD 
0f6e0     FC FD 01 02 
0f6e4     00 FE FC FD | 	byte	$03, $04, $04, $03, $01, $00, $ff, $fd, $fc, $fd, $01, $02, $00, $fe, $fc, $fd
0f6e8     FF 02 06 06 
0f6ec     04 FF FB F9 
0f6f0     FB FE FF 00 
0f6f4     01 02 04 02 | 	byte	$ff, $02, $06, $06, $04, $ff, $fb, $f9, $fb, $fe, $ff, $00, $01, $02, $04, $02
0f6f8     02 03 04 05 
0f6fc     02 FF FE FC 
0f700     FA FC FF 00 
0f704     FE FE FE 00 | 	byte	$02, $03, $04, $05, $02, $ff, $fe, $fc, $fa, $fc, $ff, $00, $fe, $fe, $fe, $00
0f708     01 04 06 04 
0f70c     02 FD FA FA 
0f710     FD 00 01 00 
0f714     00 02 02 00 | 	byte	$01, $04, $06, $04, $02, $fd, $fa, $fa, $fd, $00, $01, $00, $00, $02, $02, $00
0f718     00 01 05 06 
0f71c     05 02 00 FD 
0f720     FB FC FD FE 
0f724     FD FD FF 02 | 	byte	$00, $01, $05, $06, $05, $02, $00, $fd, $fb, $fc, $fd, $fe, $fd, $fd, $ff, $02
0f728     03 05 06 04 
0f72c     00 FB F8 F9 
0f730     FE 01 02 01 
0f734     01 01 01 00 | 	byte	$03, $05, $06, $04, $00, $fb, $f8, $f9, $fe, $01, $02, $01, $01, $01, $01, $00
0f738     00 01 05 07 
0f73c     06 02 FF FC 
0f740     FC FC FD FC 
0f744     FD FD 00 03 | 	byte	$00, $01, $05, $07, $06, $02, $ff, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $00, $03
0f748     04 06 06 03 
0f74c     FF F9 F6 F9 
0f750     FD 02 02 01 
0f754     01 02 01 00 | 	byte	$04, $06, $06, $03, $ff, $f9, $f6, $f9, $fd, $02, $02, $01, $01, $02, $01, $00
0f758     FF 00 03 05 
0f75c     06 03 00 FD 
0f760     FD FD FC FB 
0f764     FC FE 01 04 | 	byte	$ff, $00, $03, $05, $06, $03, $00, $fd, $fd, $fd, $fc, $fb, $fc, $fe, $01, $04
0f768     04 06 05 04 
0f76c     FF F9 F7 FB 
0f770     FF 02 01 02 
0f774     01 01 FF FF | 	byte	$04, $06, $05, $04, $ff, $f9, $f7, $fb, $ff, $02, $01, $02, $01, $01, $ff, $ff
0f778     00 02 03 04 
0f77c     04 04 00 FD 
0f780     FB FC FC FC 
0f784     FD FF 02 03 | 	byte	$00, $02, $03, $04, $04, $04, $00, $fd, $fb, $fc, $fc, $fc, $fd, $ff, $02, $03
0f788     03 05 04 02 
0f78c     FE FA FA FD 
0f790     01 02 01 01 
0f794     01 FF FE FE | 	byte	$03, $05, $04, $02, $fe, $fa, $fa, $fd, $01, $02, $01, $01, $01, $ff, $fe, $fe
0f798     00 03 04 03 
0f79c     03 03 01 FF 
0f7a0     FD FB FB FB 
0f7a4     FE 00 02 03 | 	byte	$00, $03, $04, $03, $03, $03, $01, $ff, $fd, $fb, $fb, $fb, $fe, $00, $02, $03
0f7a8     04 05 04 FF 
0f7ac     FC FA FB FF 
0f7b0     01 02 00 01 
0f7b4     00 FF FE FE | 	byte	$04, $05, $04, $ff, $fc, $fa, $fb, $ff, $01, $02, $00, $01, $00, $ff, $fe, $fe
0f7b8     01 04 04 03 
0f7bc     01 01 00 FF 
0f7c0     FE FB FB FC 
0f7c4     FF 01 02 02 | 	byte	$01, $04, $04, $03, $01, $01, $00, $ff, $fe, $fb, $fb, $fc, $ff, $01, $02, $02
0f7c8     03 04 04 FF 
0f7cc     FC FB FE 00 
0f7d0     00 00 FF 00 
0f7d4     FE FF 00 01 | 	byte	$03, $04, $04, $ff, $fc, $fb, $fe, $00, $00, $00, $ff, $00, $fe, $ff, $00, $01
0f7d8     02 04 02 02 
0f7dc     FF 00 00 00 
0f7e0     FF FE FC FD 
0f7e4     FE 01 02 02 | 	byte	$02, $04, $02, $02, $ff, $00, $00, $00, $ff, $fe, $fc, $fd, $fe, $01, $02, $02
0f7e8     04 04 04 FF 
0f7ec     FC FB FE FF 
0f7f0     00 00 FF 00 
0f7f4     00 FF 01 01 | 	byte	$04, $04, $04, $ff, $fc, $fb, $fe, $ff, $00, $00, $ff, $00, $00, $ff, $01, $01
0f7f8     01 01 00 00 
0f7fc     00 01 01 02 
0f800     00 FD FB FB 
0f804     FE 02 03 03 | 	byte	$01, $01, $00, $00, $00, $01, $01, $02, $00, $fd, $fb, $fb, $fe, $02, $03, $03
0f808     03 03 01 FE 
0f80c     FD FD 00 01 
0f810     01 FF FF FE 
0f814     FF FF 01 02 | 	byte	$03, $03, $01, $fe, $fd, $fd, $00, $01, $01, $ff, $ff, $fe, $ff, $ff, $01, $02
0f818     01 02 00 01 
0f81c     02 02 02 01 
0f820     FE FC FB FC 
0f824     FF 03 03 04 | 	byte	$01, $02, $00, $01, $02, $02, $02, $01, $fe, $fc, $fb, $fc, $ff, $03, $03, $04
0f828     03 03 00 FC 
0f82c     FB FD 00 01 
0f830     01 00 FF FF 
0f834     FF 00 00 01 | 	byte	$03, $03, $00, $fc, $fb, $fd, $00, $01, $01, $00, $ff, $ff, $ff, $00, $00, $01
0f838     01 00 00 01 
0f83c     03 03 02 00 
0f840     FD FC FB FD 
0f844     00 02 02 03 | 	byte	$01, $00, $00, $01, $03, $03, $02, $00, $fd, $fc, $fb, $fd, $00, $02, $02, $03
0f848     02 02 00 FD 
0f84c     FC FE 00 01 
0f850     00 FE FF FE 
0f854     FE 00 01 02 | 	byte	$02, $02, $00, $fd, $fc, $fe, $00, $01, $00, $fe, $ff, $fe, $fe, $00, $01, $02
0f858     02 01 01 02 
0f85c     03 02 01 FE 
0f860     FB FA FC FF 
0f864     02 04 03 02 | 	byte	$02, $01, $01, $02, $03, $02, $01, $fe, $fb, $fa, $fc, $ff, $02, $04, $03, $02
0f868     02 01 FE FC 
0f86c     FD 01 03 03 
0f870     01 FE FD FC 
0f874     FD FE 00 01 | 	byte	$02, $01, $fe, $fc, $fd, $01, $03, $03, $01, $fe, $fd, $fc, $fd, $fe, $00, $01
0f878     02 02 02 03 
0f87c     04 03 02 FE 
0f880     FB F9 FB 00 
0f884     04 05 03 02 | 	byte	$02, $02, $02, $03, $04, $03, $02, $fe, $fb, $f9, $fb, $00, $04, $05, $03, $02
0f888     02 00 FC FB 
0f88c     FD 01 03 03 
0f890     01 FF FE FE 
0f894     FE FF FF 00 | 	byte	$02, $00, $fc, $fb, $fd, $01, $03, $03, $01, $ff, $fe, $fe, $fe, $ff, $ff, $00
0f898     01 01 02 04 
0f89c     05 05 02 FE 
0f8a0     FA F8 FA FF 
0f8a4     03 04 03 03 | 	byte	$01, $01, $02, $04, $05, $05, $02, $fe, $fa, $f8, $fa, $ff, $03, $04, $03, $03
0f8a8     02 FF FC FB 
0f8ac     FE 01 02 02 
0f8b0     01 00 FE FE 
0f8b4     FF FF FF FF | 	byte	$02, $ff, $fc, $fb, $fe, $01, $02, $02, $01, $00, $fe, $fe, $ff, $ff, $ff, $ff
0f8b8     FF 01 03 05 
0f8bc     06 06 02 FE 
0f8c0     FB F8 FB FF 
0f8c4     03 04 04 03 | 	byte	$ff, $01, $03, $05, $06, $06, $02, $fe, $fb, $f8, $fb, $ff, $03, $04, $04, $03
0f8c8     00 FC FA FB 
0f8cc     00 02 04 03 
0f8d0     01 00 FD FD 
0f8d4     FF 00 00 FF | 	byte	$00, $fc, $fa, $fb, $00, $02, $04, $03, $01, $00, $fd, $fd, $ff, $00, $00, $ff
0f8d8     00 00 02 04 
0f8dc     05 05 02 FE 
0f8e0     FA F9 FC FF 
0f8e4     03 03 04 03 | 	byte	$00, $00, $02, $04, $05, $05, $02, $fe, $fa, $f9, $fc, $ff, $03, $03, $04, $03
0f8e8     00 FC FB FD 
0f8ec     01 03 03 02 
0f8f0     00 FE FC FC 
0f8f4     FF 01 02 01 | 	byte	$00, $fc, $fb, $fd, $01, $03, $03, $02, $00, $fe, $fc, $fc, $ff, $01, $02, $01
0f8f8     00 00 02 03 
0f8fc     03 03 01 FF 
0f900     FC FC FD 01 
0f904     02 03 03 01 | 	byte	$00, $00, $02, $03, $03, $03, $01, $ff, $fc, $fc, $fd, $01, $02, $03, $03, $01
0f908     FE FC FC FE 
0f90c     02 03 03 01 
0f910     FF FD FC FD 
0f914     FF 02 03 03 | 	byte	$fe, $fc, $fc, $fe, $02, $03, $03, $01, $ff, $fd, $fc, $fd, $ff, $02, $03, $03
0f918     00 01 01 02 
0f91c     01 01 00 FE 
0f920     FB FC FE 01 
0f924     03 05 04 00 | 	byte	$00, $01, $01, $02, $01, $01, $00, $fe, $fb, $fc, $fe, $01, $03, $05, $04, $00
0f928     FC FA FC FF 
0f92c     02 04 04 02 
0f930     00 FC FC FC 
0f934     FE 00 02 03 | 	byte	$fc, $fa, $fc, $ff, $02, $04, $04, $02, $00, $fc, $fc, $fc, $fe, $00, $02, $03
0f938     03 03 03 02 
0f93c     01 00 FE FC 
0f940     FA FC FF 04 
0f944     06 06 03 FE | 	byte	$03, $03, $03, $02, $01, $00, $fe, $fc, $fa, $fc, $ff, $04, $06, $06, $03, $fe
0f948     FA F9 FC 01 
0f94c     04 06 05 02 
0f950     FE FB FA FC 
0f954     00 02 03 04 | 	byte	$fa, $f9, $fc, $01, $04, $06, $05, $02, $fe, $fb, $fa, $fc, $00, $02, $03, $04
0f958     04 03 02 FF 
0f95c     00 00 FF FB 
0f960     F9 FC FF 03 
0f964     05 05 02 FF | 	byte	$04, $03, $02, $ff, $00, $00, $ff, $fb, $f9, $fc, $ff, $03, $05, $05, $02, $ff
0f968     FB FA FD 03 
0f96c     05 06 04 01 
0f970     FD FA F9 FC 
0f974     00 02 04 05 | 	byte	$fb, $fa, $fd, $03, $05, $06, $04, $01, $fd, $fa, $f9, $fc, $00, $02, $04, $05
0f978     05 04 01 FE 
0f97c     FF FF FE FB 
0f980     FB FC 00 03 
0f984     04 04 01 FE | 	byte	$05, $04, $01, $fe, $ff, $ff, $fe, $fb, $fb, $fc, $00, $03, $04, $04, $01, $fe
0f988     FB FC FF 03 
0f98c     05 05 04 00 
0f990     FC F9 F8 FB 
0f994     FF 03 05 07 | 	byte	$fb, $fc, $ff, $03, $05, $05, $04, $00, $fc, $f9, $f8, $fb, $ff, $03, $05, $07
0f998     07 05 01 FD 
0f99c     FC FC FC FC 
0f9a0     FD FE 01 02 
0f9a4     04 02 00 FD | 	byte	$07, $05, $01, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $01, $02, $04, $02, $00, $fd
0f9a8     FC FE 01 03 
0f9ac     04 04 03 00 
0f9b0     FD FA FA FC 
0f9b4     00 04 06 07 | 	byte	$fc, $fe, $01, $03, $04, $04, $03, $00, $fd, $fa, $fa, $fc, $00, $04, $06, $07
0f9b8     07 04 00 FD 
0f9bc     FB FB FC FD 
0f9c0     FE 00 01 01 
0f9c4     01 01 FE FD | 	byte	$07, $04, $00, $fd, $fb, $fb, $fc, $fd, $fe, $00, $01, $01, $01, $01, $fe, $fd
0f9c8     FD 00 04 04 
0f9cc     03 03 01 00 
0f9d0     FD FA FA FC 
0f9d4     FF 03 06 06 | 	byte	$fd, $00, $04, $04, $03, $03, $01, $00, $fd, $fa, $fa, $fc, $ff, $03, $06, $06
0f9d8     05 03 FF FD 
0f9dc     FC FD FD FE 
0f9e0     FF 01 02 01 
0f9e4     00 00 FD FC | 	byte	$05, $03, $ff, $fd, $fc, $fd, $fd, $fe, $ff, $01, $02, $01, $00, $00, $fd, $fc
0f9e8     FE 01 05 04 
0f9ec     03 02 01 00 
0f9f0     FC F9 FA FB 
0f9f4     FF 03 07 08 | 	byte	$fe, $01, $05, $04, $03, $02, $01, $00, $fc, $f9, $fa, $fb, $ff, $03, $07, $08
0f9f8     04 01 FD FC 
0f9fc     FC FD FD FF 
0fa00     01 02 03 02 
0fa04     FF FE FD FC | 	byte	$04, $01, $fd, $fc, $fc, $fd, $fd, $ff, $01, $02, $03, $02, $ff, $fe, $fd, $fc
0fa08     FF 02 06 04 
0fa0c     03 02 00 FF 
0fa10     FB FA FA FC 
0fa14     00 03 06 07 | 	byte	$ff, $02, $06, $04, $03, $02, $00, $ff, $fb, $fa, $fa, $fc, $00, $03, $06, $07
0fa18     04 00 FC FC 
0fa1c     FD FF FF 00 
0fa20     01 02 02 01 
0fa24     FE FD FD FD | 	byte	$04, $00, $fc, $fc, $fd, $ff, $ff, $00, $01, $02, $02, $01, $fe, $fd, $fd, $fd
0fa28     00 04 05 03 
0fa2c     02 01 01 FF 
0fa30     FC FB FC FE 
0fa34     00 03 05 06 | 	byte	$00, $04, $05, $03, $02, $01, $01, $ff, $fc, $fb, $fc, $fe, $00, $03, $05, $06
0fa38     04 00 FC FB 
0fa3c     FC FE 00 02 
0fa40     02 03 02 01 
0fa44     FE FC FC FD | 	byte	$04, $00, $fc, $fb, $fc, $fe, $00, $02, $02, $03, $02, $01, $fe, $fc, $fc, $fd
0fa48     01 05 04 03 
0fa4c     02 02 01 FD 
0fa50     FA FA FC 00 
0fa54     02 04 06 05 | 	byte	$01, $05, $04, $03, $02, $02, $01, $fd, $fa, $fa, $fc, $00, $02, $04, $06, $05
0fa58     03 FE FB FA 
0fa5c     FC FF 01 03 
0fa60     04 03 02 00 
0fa64     FE FC FB FD | 	byte	$03, $fe, $fb, $fa, $fc, $ff, $01, $03, $04, $03, $02, $00, $fe, $fc, $fb, $fd
0fa68     01 04 03 02 
0fa6c     03 02 01 FD 
0fa70     FA FB FD 01 
0fa74     03 05 06 04 | 	byte	$01, $04, $03, $02, $03, $02, $01, $fd, $fa, $fb, $fd, $01, $03, $05, $06, $04
0fa78     01 FD FA FA 
0fa7c     FC FE 02 04 
0fa80     05 03 02 00 
0fa84     FE FC FA FC | 	byte	$01, $fd, $fa, $fa, $fc, $fe, $02, $04, $05, $03, $02, $00, $fe, $fc, $fa, $fc
0fa88     01 03 02 02 
0fa8c     03 03 01 FD 
0fa90     F9 FA FD 01 
0fa94     05 07 06 04 | 	byte	$01, $03, $02, $02, $03, $03, $01, $fd, $f9, $fa, $fd, $01, $05, $07, $06, $04
0fa98     00 FD FB FA 
0fa9c     FC FE 02 05 
0faa0     06 04 02 00 
0faa4     FD FC FA FD | 	byte	$00, $fd, $fb, $fa, $fc, $fe, $02, $05, $06, $04, $02, $00, $fd, $fc, $fa, $fd
0faa8     01 02 02 02 
0faac     02 03 00 FD 
0fab0     FA FB FE 02 
0fab4     06 07 05 02 | 	byte	$01, $02, $02, $02, $02, $03, $00, $fd, $fa, $fb, $fe, $02, $06, $07, $05, $02
0fab8     00 FD FB FB 
0fabc     FC FE 01 03 
0fac0     03 02 02 01 
0fac4     FF FD FC FF | 	byte	$00, $fd, $fb, $fb, $fc, $fe, $01, $03, $03, $02, $02, $01, $ff, $fd, $fc, $ff
0fac8     01 01 FF 01 
0facc     02 02 01 FD 
0fad0     FC FC FF 03 
0fad4     05 06 04 01 | 	byte	$01, $01, $ff, $01, $02, $02, $01, $fd, $fc, $fc, $ff, $03, $05, $06, $04, $01
0fad8     FE FC FA FB 
0fadc     FD FF 01 02 
0fae0     02 02 01 01 
0fae4     00 FF FF 00 | 	byte	$fe, $fc, $fa, $fb, $fd, $ff, $01, $02, $02, $02, $01, $01, $00, $ff, $ff, $00
0fae8     01 FF FF FF 
0faec     00 01 00 FD 
0faf0     FD FD 00 03 
0faf4     05 06 05 02 | 	byte	$01, $ff, $ff, $ff, $00, $01, $00, $fd, $fd, $fd, $00, $03, $05, $06, $05, $02
0faf8     FE FC FA FC 
0fafc     FD FE 01 02 
0fb00     02 02 01 00 
0fb04     FF FE 00 01 | 	byte	$fe, $fc, $fa, $fc, $fd, $fe, $01, $02, $02, $02, $01, $00, $ff, $fe, $00, $01
0fb08     02 FF FF FF 
0fb0c     00 01 FF FE 
0fb10     FE FF 00 02 
0fb14     05 06 04 02 | 	byte	$02, $ff, $ff, $ff, $00, $01, $ff, $fe, $fe, $ff, $00, $02, $05, $06, $04, $02
0fb18     FE FD FB FC 
0fb1c     FE FF 00 00 
0fb20     00 01 01 00 
0fb24     FF 00 02 02 | 	byte	$fe, $fd, $fb, $fc, $fe, $ff, $00, $00, $00, $01, $01, $00, $ff, $00, $02, $02
0fb28     02 FE FD FD 
0fb2c     FE 00 00 01 
0fb30     01 01 01 02 
0fb34     03 03 03 01 | 	byte	$02, $fe, $fd, $fd, $fe, $00, $00, $01, $01, $01, $01, $02, $03, $03, $03, $01
0fb38     FE FD FD FE 
0fb3c     FE FF FF FE 
0fb40     FE 00 00 00 
0fb44     00 01 03 04 | 	byte	$fe, $fd, $fd, $fe, $fe, $ff, $ff, $fe, $fe, $00, $00, $00, $00, $01, $03, $04
0fb48     01 FE FD FD 
0fb4c     FD FE FF 00 
0fb50     02 03 02 01 
0fb54     01 01 01 00 | 	byte	$01, $fe, $fd, $fd, $fd, $fe, $ff, $00, $02, $03, $02, $01, $01, $01, $01, $00
0fb58     FE FE FE FF 
0fb5c     FF 00 FF FE 
0fb60     FF 00 00 FF 
0fb64     00 01 03 03 | 	byte	$fe, $fe, $fe, $ff, $ff, $00, $ff, $fe, $ff, $00, $00, $ff, $00, $01, $03, $03
0fb68     01 FE FE FD 
0fb6c     FD FD FE 00 
0fb70     02 04 04 03 
0fb74     01 00 00 FF | 	byte	$01, $fe, $fe, $fd, $fd, $fd, $fe, $00, $02, $04, $04, $03, $01, $00, $00, $ff
0fb78     FF FE FF 00 
0fb7c     00 00 FF FE 
0fb80     FF FF 00 FF 
0fb84     00 02 03 03 | 	byte	$ff, $fe, $ff, $00, $00, $00, $ff, $fe, $ff, $ff, $00, $ff, $00, $02, $03, $03
0fb88     01 FF FE FD 
0fb8c     FD FD FF 02 
0fb90     03 05 04 03 
0fb94     01 00 FE FE | 	byte	$01, $ff, $fe, $fd, $fd, $fd, $ff, $02, $03, $05, $04, $03, $01, $00, $fe, $fe
0fb98     FF FF 00 01 
0fb9c     00 FF FE FD 
0fba0     00 00 FF FF 
0fba4     FF 02 03 02 | 	byte	$ff, $ff, $00, $01, $00, $ff, $fe, $fd, $00, $00, $ff, $ff, $ff, $02, $03, $02
0fba8     01 00 FE FD 
0fbac     FD FD FE 02 
0fbb0     04 04 03 02 
0fbb4     01 FF FE FD | 	byte	$01, $00, $fe, $fd, $fd, $fd, $fe, $02, $04, $04, $03, $02, $01, $ff, $fe, $fd
0fbb8     FE 00 02 01 
0fbbc     00 FE FD FE 
0fbc0     00 01 FF FE 
0fbc4     FF 01 03 02 | 	byte	$fe, $00, $02, $01, $00, $fe, $fd, $fe, $00, $01, $ff, $fe, $ff, $01, $03, $02
0fbc8     01 00 FF FE 
0fbcc     FD FE FF 02 
0fbd0     04 03 02 02 
0fbd4     01 FF FD FD | 	byte	$01, $00, $ff, $fe, $fd, $fe, $ff, $02, $04, $03, $02, $02, $01, $ff, $fd, $fd
0fbd8     FE 00 02 01 
0fbdc     FF FE FE 00 
0fbe0     01 01 FF FD 
0fbe4     FD FF 02 03 | 	byte	$fe, $00, $02, $01, $ff, $fe, $fe, $00, $01, $01, $ff, $fd, $fd, $ff, $02, $03
0fbe8     02 02 01 FE 
0fbec     FD FD FF 01 
0fbf0     03 03 03 02 
0fbf4     01 00 FD FD | 	byte	$02, $02, $01, $fe, $fd, $fd, $ff, $01, $03, $03, $03, $02, $01, $00, $fd, $fd
0fbf8     FD 01 02 02 
0fbfc     00 FE FE 00 
0fc00     02 02 FF FD 
0fc04     FC FF 02 02 | 	byte	$fd, $01, $02, $02, $00, $fe, $fe, $00, $02, $02, $ff, $fd, $fc, $ff, $02, $02
0fc08     02 02 01 FE 
0fc0c     FD FD FF 01 
0fc10     03 04 04 03 
0fc14     01 FF FD FD | 	byte	$02, $02, $01, $fe, $fd, $fd, $ff, $01, $03, $04, $04, $03, $01, $ff, $fd, $fd
0fc18     FD 00 02 01 
0fc1c     00 FE FE 00 
0fc20     02 01 FF FD 
0fc24     FD FF 02 02 | 	byte	$fd, $00, $02, $01, $00, $fe, $fe, $00, $02, $01, $ff, $fd, $fd, $ff, $02, $02
0fc28     03 03 02 FF 
0fc2c     FD FD FE 00 
0fc30     01 03 05 04 
0fc34     02 FE FD FD | 	byte	$03, $03, $02, $ff, $fd, $fd, $fe, $00, $01, $03, $05, $04, $02, $fe, $fd, $fd
0fc38     FD 00 01 01 
0fc3c     00 FF FF 01 
0fc40     02 01 FF FE 
0fc44     FE FF 01 01 | 	byte	$fd, $00, $01, $01, $00, $ff, $ff, $01, $02, $01, $ff, $fe, $fe, $ff, $01, $01
0fc48     02 03 01 FF 
0fc4c     FD FD FE 01 
0fc50     02 03 06 04 
0fc54     01 FE FC FC | 	byte	$02, $03, $01, $ff, $fd, $fd, $fe, $01, $02, $03, $06, $04, $01, $fe, $fc, $fc
0fc58     FE 02 02 02 
0fc5c     01 FF FF 00 
0fc60     00 FF FE FE 
0fc64     FF 00 01 01 | 	byte	$fe, $02, $02, $02, $01, $ff, $ff, $00, $00, $ff, $fe, $fe, $ff, $00, $01, $01
0fc68     02 03 01 FF 
0fc6c     FD FD FE 00 
0fc70     02 03 05 04 
0fc74     01 FE FC FD | 	byte	$02, $03, $01, $ff, $fd, $fd, $fe, $00, $02, $03, $05, $04, $01, $fe, $fc, $fd
0fc78     FF 02 02 01 
0fc7c     FF FF 00 01 
0fc80     01 FF FE FF 
0fc84     00 01 00 FF | 	byte	$ff, $02, $02, $01, $ff, $ff, $00, $01, $01, $ff, $fe, $ff, $00, $01, $00, $ff
0fc88     01 01 01 FF 
0fc8c     FE FF FF 01 
0fc90     01 02 02 02 
0fc94     00 FF FE FE | 	byte	$01, $01, $01, $ff, $fe, $ff, $ff, $01, $01, $02, $02, $02, $00, $ff, $fe, $fe
0fc98     00 02 01 FF 
0fc9c     FD FE 00 02 
0fca0     01 FE FD FE 
0fca4     00 01 00 00 | 	byte	$00, $02, $01, $ff, $fd, $fe, $00, $02, $01, $fe, $fd, $fe, $00, $01, $00, $00
0fca8     01 01 00 FF 
0fcac     FF FF 00 01 
0fcb0     01 02 01 01 
0fcb4     01 00 FF FF | 	byte	$01, $01, $00, $ff, $ff, $ff, $00, $01, $01, $02, $01, $01, $01, $00, $ff, $ff
0fcb8     01 01 FF FD 
0fcbc     FC FE 03 04 
0fcc0     03 FF FE FE 
0fcc4     FF 00 FE FF | 	byte	$01, $01, $ff, $fd, $fc, $fe, $03, $04, $03, $ff, $fe, $fe, $ff, $00, $fe, $ff
0fcc8     01 01 00 FF 
0fccc     FF 00 01 02 
0fcd0     01 01 00 01 
0fcd4     01 00 FF FF | 	byte	$01, $01, $00, $ff, $ff, $00, $01, $02, $01, $01, $00, $01, $01, $00, $ff, $ff
0fcd8     01 02 00 FD 
0fcdc     FC FE 03 05 
0fce0     03 FF FD FE 
0fce4     FE FE FE FF | 	byte	$01, $02, $00, $fd, $fc, $fe, $03, $05, $03, $ff, $fd, $fe, $fe, $fe, $fe, $ff
0fce8     01 01 00 FE 
0fcec     FF 01 02 02 
0fcf0     01 00 FF 00 
0fcf4     01 00 00 01 | 	byte	$01, $01, $00, $fe, $ff, $01, $02, $02, $01, $00, $ff, $00, $01, $00, $00, $01
0fcf8     02 02 FF FC 
0fcfc     FB FE 03 05 
0fd00     04 00 FE FD 
0fd04     FD FC FD 00 | 	byte	$02, $02, $ff, $fc, $fb, $fe, $03, $05, $04, $00, $fe, $fd, $fd, $fc, $fd, $00
0fd08     02 02 00 FF 
0fd0c     00 00 01 02 
0fd10     01 00 FF FF 
0fd14     00 01 01 02 | 	byte	$02, $02, $00, $ff, $00, $00, $01, $02, $01, $00, $ff, $ff, $00, $01, $01, $02
0fd18     02 01 FE FB 
0fd1c     FB FE 02 05 
0fd20     04 02 FF FE 
0fd24     FC FB FC FF | 	byte	$02, $01, $fe, $fb, $fb, $fe, $02, $05, $04, $02, $ff, $fe, $fc, $fb, $fc, $ff
0fd28     01 02 02 01 
0fd2c     01 00 01 01 
0fd30     01 FF FF FF 
0fd34     00 01 02 03 | 	byte	$01, $02, $02, $01, $01, $00, $01, $01, $01, $ff, $ff, $ff, $00, $01, $02, $03
0fd38     03 01 FD FB 
0fd3c     FB FE 02 04 
0fd40     04 04 01 FF 
0fd44     FD FB FC FE | 	byte	$03, $01, $fd, $fb, $fb, $fe, $02, $04, $04, $04, $01, $ff, $fd, $fb, $fc, $fe
0fd48     00 01 02 02 
0fd4c     02 01 01 00 
0fd50     00 FF FF FF 
0fd54     00 01 02 03 | 	byte	$00, $01, $02, $02, $02, $01, $01, $00, $00, $ff, $ff, $ff, $00, $01, $02, $03
0fd58     04 01 FD FB 
0fd5c     FB FF 02 03 
0fd60     03 03 02 FF 
0fd64     FC FA FC FF | 	byte	$04, $01, $fd, $fb, $fb, $ff, $02, $03, $03, $03, $02, $ff, $fc, $fa, $fc, $ff
0fd68     00 01 02 02 
0fd6c     02 01 00 FF 
0fd70     FF FF 00 00 
0fd74     00 00 02 03 | 	byte	$00, $01, $02, $02, $02, $01, $00, $ff, $ff, $ff, $00, $00, $00, $00, $02, $03
0fd78     03 00 FD FB 
0fd7c     FC 00 01 02 
0fd80     02 02 02 FF 
0fd84     FB FA FD 00 | 	byte	$03, $00, $fd, $fb, $fc, $00, $01, $02, $02, $02, $02, $ff, $fb, $fa, $fd, $00
0fd88     01 02 02 03 
0fd8c     02 01 00 FE 
0fd90     FD FF 00 01 
0fd94     02 01 02 03 | 	byte	$01, $02, $02, $03, $02, $01, $00, $fe, $fd, $ff, $00, $01, $02, $01, $02, $03
0fd98     02 FF FC FB 
0fd9c     FD 00 03 02 
0fda0     02 02 00 FE 
0fda4     FA F9 FD FF | 	byte	$02, $ff, $fc, $fb, $fd, $00, $03, $02, $02, $02, $00, $fe, $fa, $f9, $fd, $ff
0fda8     02 02 03 03 
0fdac     03 02 00 FE 
0fdb0     FD FE 00 01 
0fdb4     02 02 03 04 | 	byte	$02, $02, $03, $03, $03, $02, $00, $fe, $fd, $fe, $00, $01, $02, $02, $03, $04
0fdb8     02 00 FC FB 
0fdbc     FC FF 01 02 
0fdc0     03 03 01 FF 
0fdc4     FB FA FD FF | 	byte	$02, $00, $fc, $fb, $fc, $ff, $01, $02, $03, $03, $01, $ff, $fb, $fa, $fd, $ff
0fdc8     01 02 03 03 
0fdcc     03 02 FF FE 
0fdd0     FD FE FF 01 
0fdd4     01 02 03 03 | 	byte	$01, $02, $03, $03, $03, $02, $ff, $fe, $fd, $fe, $ff, $01, $01, $02, $03, $03
0fdd8     02 00 FD FB 
0fddc     FD FE 00 01 
0fde0     03 03 01 FE 
0fde4     FC FB FD FE | 	byte	$02, $00, $fd, $fb, $fd, $fe, $00, $01, $03, $03, $01, $fe, $fc, $fb, $fd, $fe
0fde8     00 02 03 04 
0fdec     04 02 00 FE 
0fdf0     FD FE 00 01 
0fdf4     02 02 03 02 | 	byte	$00, $02, $03, $04, $04, $02, $00, $fe, $fd, $fe, $00, $01, $02, $02, $03, $02
0fdf8     00 FE FC FC 
0fdfc     FE 00 01 02 
0fe00     03 02 00 FE 
0fe04     FC FD FE FF | 	byte	$00, $fe, $fc, $fc, $fe, $00, $01, $02, $03, $02, $00, $fe, $fc, $fd, $fe, $ff
0fe08     00 01 02 03 
0fe0c     04 02 00 FF 
0fe10     FE FF 00 01 
0fe14     01 01 02 02 | 	byte	$00, $01, $02, $03, $04, $02, $00, $ff, $fe, $ff, $00, $01, $01, $01, $02, $02
0fe18     FF FE FE FF 
0fe1c     FF 00 00 01 
0fe20     01 01 FF FE 
0fe24     FD FF 00 FF | 	byte	$ff, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $01, $ff, $fe, $fd, $ff, $00, $ff
0fe28     00 FF 02 03 
0fe2c     03 01 00 FF 
0fe30     00 00 01 01 
0fe34     01 02 02 01 | 	byte	$00, $ff, $02, $03, $03, $01, $00, $ff, $00, $00, $01, $01, $01, $02, $02, $01
0fe38     FF FD FE FF 
0fe3c     00 01 00 00 
0fe40     00 FF FE FC 
0fe44     FE 00 01 01 | 	byte	$ff, $fd, $fe, $ff, $00, $01, $00, $00, $00, $ff, $fe, $fc, $fe, $00, $01, $01
0fe48     00 00 01 02 
0fe4c     02 01 FF FF 
0fe50     FF 00 01 01 
0fe54     01 01 01 FF | 	byte	$00, $00, $01, $02, $02, $01, $ff, $ff, $ff, $00, $01, $01, $01, $01, $01, $ff
0fe58     FD FC FE 00 
0fe5c     02 03 02 01 
0fe60     FF FE FD FC 
0fe64     FD 00 01 02 | 	byte	$fd, $fc, $fe, $00, $02, $03, $02, $01, $ff, $fe, $fd, $fc, $fd, $00, $01, $02
0fe68     01 01 01 01 
0fe6c     01          | 	byte	$01[5]
0fe6d     00 FF FE FF 
0fe71     01 02 02 02 
0fe75     01 00 FE FC 
0fe79     FC FE 01 04 | 	byte	$00, $ff, $fe, $ff, $01, $02, $02, $02, $01, $00, $fe, $fc, $fc, $fe, $01, $04
0fe7d     04 02 00 FD 
0fe81     FC FC FC FE 
0fe85     00 02 03 01 
0fe89     00 00 00 00 | 	byte	$04, $02, $00, $fd, $fc, $fc, $fc, $fe, $00, $02, $03, $01, $00, $00, $00, $00
0fe8d     01 00 FF 00 
0fe91     00 01 01 01 
0fe95     01 00 FD FC 
0fe99     FC FF 02 05 | 	byte	$01, $00, $ff, $00, $00, $01, $01, $01, $01, $00, $fd, $fc, $fc, $ff, $02, $05
0fe9d     05 03 01 FE 
0fea1     FC FB FB FD 
0fea5     00 02 03 02 
0fea9     01 00 00 00 | 	byte	$05, $03, $01, $fe, $fc, $fb, $fb, $fd, $00, $02, $03, $02, $01, $00, $00, $00
0fead     00 FF FF 00 
0feb1     01 02 01 01 
0feb5     01 FE FD FC 
0feb9     FD 00 03 05 | 	byte	$00, $ff, $ff, $00, $01, $02, $01, $01, $01, $fe, $fd, $fc, $fd, $00, $03, $05
0febd     04 03 01 FE 
0fec1     FC F9 FA FD 
0fec5     00 03 04 03 
0fec9     01 FF FE FE | 	byte	$04, $03, $01, $fe, $fc, $f9, $fa, $fd, $00, $03, $04, $03, $01, $ff, $fe, $fe
0fecd     FF FF 00 01 
0fed1     03 03 01 00 
0fed5     FF FD FC FC 
0fed9     FE 02 04 05 | 	byte	$ff, $ff, $00, $01, $03, $03, $01, $00, $ff, $fd, $fc, $fc, $fe, $02, $04, $05
0fedd     04 03 01 FF 
0fee1     FB F9 FA FE 
0fee5     01 03 04 04 
0fee9     02 FF FE FC | 	byte	$04, $03, $01, $ff, $fb, $f9, $fa, $fe, $01, $03, $04, $04, $02, $ff, $fe, $fc
0feed     FD FF 01 03 
0fef1     04 04 02 00 
0fef5     FE FC FB FC 
0fef9     FF 03 05 05 | 	byte	$fd, $ff, $01, $03, $04, $04, $02, $00, $fe, $fc, $fb, $fc, $ff, $03, $05, $05
0fefd     04 03 00 FE 
0ff01     FB F9 FB FE 
0ff05     01 03 03 03 
0ff09     01 00 FE FD | 	byte	$04, $03, $00, $fe, $fb, $f9, $fb, $fe, $01, $03, $03, $03, $01, $00, $fe, $fd
0ff0d     FC FE 02 04 
0ff11     05 04 02 01 
0ff15     FE FB FA FB 
0ff19     FF 03 05 05 | 	byte	$fc, $fe, $02, $04, $05, $04, $02, $01, $fe, $fb, $fa, $fb, $ff, $03, $05, $05
0ff1d     05 03 01 FE 
0ff21     FB FA FB FD 
0ff25     00 02 03 02 
0ff29     01 01 FF FE | 	byte	$05, $03, $01, $fe, $fb, $fa, $fb, $fd, $00, $02, $03, $02, $01, $01, $ff, $fe
0ff2d     FC FE 01 04 
0ff31     05 04 02 01 
0ff35     FE FB FA FB 
0ff39     00 03 05 05 | 	byte	$fc, $fe, $01, $04, $05, $04, $02, $01, $fe, $fb, $fa, $fb, $00, $03, $05, $05
0ff3d     04 02 00 FE 
0ff41     FC FC FD FF 
0ff45     00 01 01 00 
0ff49     01 01 00 FE | 	byte	$04, $02, $00, $fe, $fc, $fc, $fd, $ff, $00, $01, $01, $00, $01, $01, $00, $fe
0ff4d     FD FE 00 03 
0ff51     04 04 03 02 
0ff55     FE FB FA FC 
0ff59     00 03 05 04 | 	byte	$fd, $fe, $00, $03, $04, $04, $03, $02, $fe, $fb, $fa, $fc, $00, $03, $05, $04
0ff5d     03 02 FF FE 
0ff61     FC FD FE 00 
0ff65     00 00 00 00 
0ff69     01 01 01 FF | 	byte	$03, $02, $ff, $fe, $fc, $fd, $fe, $00, $00, $00, $00, $00, $01, $01, $01, $ff
0ff6d     FE FE 00 03 
0ff71     03 04 03 01 
0ff75     FD FA FA FD 
0ff79     01 04 04 04 | 	byte	$fe, $fe, $00, $03, $03, $04, $03, $01, $fd, $fa, $fa, $fd, $01, $04, $04, $04
0ff7d     03 01 FF FD 
0ff81     FB FD 00 01 
0ff85     01 00 FF FF 
0ff89     00 00 00 FF | 	byte	$03, $01, $ff, $fd, $fb, $fd, $00, $01, $01, $00, $ff, $ff, $00, $00, $00, $ff
0ff8d     FF FF 01 03 
0ff91     04 04 03 00 
0ff95     FC FA FA FE 
0ff99     01 04 05 04 | 	byte	$ff, $ff, $01, $03, $04, $04, $03, $00, $fc, $fa, $fa, $fe, $01, $04, $05, $04
0ff9d     03 00 FE FC 
0ffa1     FC FE 00 02 
0ffa5     01 00 FF FF 
0ffa9     00 00 00 FF | 	byte	$03, $00, $fe, $fc, $fc, $fe, $00, $02, $01, $00, $ff, $ff, $00, $00, $00, $ff
0ffad     FF 00 01 03 
0ffb1     03 04 03 00 
0ffb5     FC FA FB FD 
0ffb9     01 03 04 04 | 	byte	$ff, $00, $01, $03, $03, $04, $03, $00, $fc, $fa, $fb, $fd, $01, $03, $04, $04
0ffbd     03 01 FE FC 
0ffc1     FC FE 00 01 
0ffc5     01 00 FF 00 
0ffc9     00 00 00 FE | 	byte	$03, $01, $fe, $fc, $fc, $fe, $00, $01, $01, $00, $ff, $00, $00, $00, $00, $fe
0ffcd     FF 00 02 03 
0ffd1     05 04 03 FF 
0ffd5     FC FA FB FE 
0ffd9     01 04 04 04 | 	byte	$ff, $00, $02, $03, $05, $04, $03, $ff, $fc, $fa, $fb, $fe, $01, $04, $04, $04
0ffdd     02 00 FE FC 
0ffe1     FC FE 00 01 
0ffe5     01 00 FF FF 
0ffe9     01 01 01 FF | 	byte	$02, $00, $fe, $fc, $fc, $fe, $00, $01, $01, $00, $ff, $ff, $01, $01, $01, $ff
0ffed     FF FF 01 02 
0fff1     03 04 02 FF 
0fff5     FC FB FC FF 
0fff9     01 03 03 04 | 	byte	$ff, $ff, $01, $02, $03, $04, $02, $ff, $fc, $fb, $fc, $ff, $01, $03, $03, $04
0fffd     02 00 FD FC 
10001     FD FF 00 01 
10005     01 00 FF 00 
10009     00 00 00 FF | 	byte	$02, $00, $fd, $fc, $fd, $ff, $00, $01, $01, $00, $ff, $00, $00, $00, $00, $ff
1000d     00 00 01 02 
10011     03 03 01 FE 
10015     FC FC FD 00 
10019     01 03 03 03 | 	byte	$00, $00, $01, $02, $03, $03, $01, $fe, $fc, $fc, $fd, $00, $01, $03, $03, $03
1001d     01 FF FD FC 
10021     FD FF 00 01 
10025     00 00 00 01 
10029     01 00 FF FF | 	byte	$01, $ff, $fd, $fc, $fd, $ff, $00, $01, $00, $00, $00, $01, $01, $00, $ff, $ff
1002d     00 01 02 02 
10031     02 01 FF FC 
10035     FB FC FF 01 
10039     03 03 03 02 | 	byte	$00, $01, $02, $02, $02, $01, $ff, $fc, $fb, $fc, $ff, $01, $03, $03, $03, $02
1003d     01 FE FC FC 
10041     FD FF 01 01 
10045     00 00 00 00 
10049     00 FF FF FF | 	byte	$01, $fe, $fc, $fc, $fd, $ff, $01, $01, $00, $00, $00, $00, $00, $ff, $ff, $ff
1004d     00 01 02 02 
10051     02 00 FE FC 
10055     FC FD 01 02 
10059     03 03 02 01 | 	byte	$00, $01, $02, $02, $02, $00, $fe, $fc, $fc, $fd, $01, $02, $03, $03, $02, $01
1005d     00 FE FD FD 
10061     FE FF 00 00 
10065     00 00 00 01 
10069     01 00 FF 00 | 	byte	$00, $fe, $fd, $fd, $fe, $ff, $00, $00, $00, $00, $00, $01, $01, $00, $ff, $00
1006d     01 02 02 02 
10071     01 00 FD FB 
10075     FB FD 01 03 
10079     04 04 02 01 | 	byte	$01, $02, $02, $02, $01, $00, $fd, $fb, $fb, $fd, $01, $03, $04, $04, $02, $01
1007d     00 FE FD FD 
10081     FD FF 00 00 
10085     00 00 00 01 
10089     01 00 FF 00 | 	byte	$00, $fe, $fd, $fd, $fd, $ff, $00, $00, $00, $00, $00, $01, $01, $00, $ff, $00
1008d     01 03 03 02 
10091     00 FF FC FA 
10095     FB FE 02 04 
10099     05 04 01 00 | 	byte	$01, $03, $03, $02, $00, $ff, $fc, $fa, $fb, $fe, $02, $04, $05, $04, $01, $00
1009d     FF FF FE FF 
100a1     FF 00 00 FF 
100a5     FF FE FE 00 
100a9     01 01 01 01 | 	byte	$ff, $ff, $fe, $ff, $ff, $00, $00, $ff, $ff, $fe, $fe, $00, $01, $01, $01, $01
100ad     01 03 02 01 
100b1     00 FE FC FC 
100b5     FD 00 03 04 
100b9     05 03 00 FF | 	byte	$01, $03, $02, $01, $00, $fe, $fc, $fc, $fd, $00, $03, $04, $05, $03, $00, $ff
100bd     FE FF 00 01 
100c1     01 01 00 FF 
100c5     FE FE FE FF 
100c9     01 01 01 01 | 	byte	$fe, $ff, $00, $01, $01, $01, $00, $ff, $fe, $fe, $fe, $ff, $01, $01, $01, $01
100cd     02 02 02 01 
100d1     00 FD FC FC 
100d5     FE 01 03 04 
100d9     04 02 00 FE | 	byte	$02, $02, $02, $01, $00, $fd, $fc, $fc, $fe, $01, $03, $04, $04, $02, $00, $fe
100dd     FD FE FF 00 
100e1     01 01 00 FF 
100e5     FE FD FE FF 
100e9     01 01 02 02 | 	byte	$fd, $fe, $ff, $00, $01, $01, $00, $ff, $fe, $fd, $fe, $ff, $01, $01, $02, $02
100ed     02 02 01 01 
100f1     FF FD FC FD 
100f5     FF 01 02 03 
100f9     03 02 00 FF | 	byte	$02, $02, $01, $01, $ff, $fd, $fc, $fd, $ff, $01, $02, $03, $03, $02, $00, $ff
100fd     FE FE FE FF 
10101     01 02 00 FF 
10105     FF FF FF 00 
10109     00 00 01 01 | 	byte	$fe, $fe, $fe, $ff, $01, $02, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $01
1010d     01 02 02 02 
10111     01 FD FC FC 
10115     FE 00 02 02 
10119     03 02 02 01 | 	byte	$01, $02, $02, $02, $01, $fd, $fc, $fc, $fe, $00, $02, $02, $03, $02, $02, $01
1011d     FF FE FD FE 
10121     00 01 01 01 
10125     FF 00 00 00 
10129     FF FF 00 00 | 	byte	$ff, $fe, $fd, $fe, $00, $01, $01, $01, $ff, $00, $00, $00, $ff, $ff, $00, $00
1012d     01 01 01 01 
10131     01          | 	byte	$01[5]
10132     FE FD FD FF 
10136     01 02 02 02 
1013a     02 02 01 00 
1013e     FD FC FD 00 | 	byte	$fe, $fd, $fd, $ff, $01, $02, $02, $02, $02, $02, $01, $00, $fd, $fc, $fd, $00
10142     01 01 00 00 
10146     00 01 01 00 
1014a     00 00 00 01 
1014e     FF 00 01 00 | 	byte	$01, $01, $00, $00, $00, $01, $01, $00, $00, $00, $00, $01, $ff, $00, $01, $00
10152     FF FE FE 00 
10156     01 02 02 01 
1015a     01 02 01 00 
1015e     FD FC FD 00 | 	byte	$ff, $fe, $fe, $00, $01, $02, $02, $01, $01, $02, $01, $00, $fd, $fc, $fd, $00
10162     01 02 01 00 
10166     00 00 01 00 
1016a     00 01 01 00 
1016e     FF FF 00 00 | 	byte	$01, $02, $01, $00, $00, $00, $01, $00, $00, $01, $01, $00, $ff, $ff, $00, $00
10172     FF FF FF 01 
10176     01 01 01 00 
1017a     01 02 02 00 
1017e     FD FC FC FF | 	byte	$ff, $ff, $ff, $01, $01, $01, $01, $00, $01, $02, $02, $00, $fd, $fc, $fc, $ff
10182     00 01 01 00 
10186     00 01 01 00 
1018a     00 01 01 01 
1018e     00 FF FF FE | 	byte	$00, $01, $01, $00, $00, $01, $01, $00, $00, $01, $01, $01, $00, $ff, $ff, $fe
10192     FE FF 00 01 
10196     02 01 01 00 
1019a     01 02 01 00 
1019e     FE FD FD FF | 	byte	$fe, $ff, $00, $01, $02, $01, $01, $00, $01, $02, $01, $00, $fe, $fd, $fd, $ff
101a2     00 01 00 00 
101a6     00 01 01 01 
101aa     00 00 01 00 
101ae     00 FF FF FD | 	byte	$00, $01, $00, $00, $00, $01, $01, $01, $00, $00, $01, $00, $00, $ff, $ff, $fd
101b2     FE 00 01 02 
101b6     02 00 01 00 
101ba     01 01 01 00 
101be     FE FD FD FE | 	byte	$fe, $00, $01, $02, $02, $00, $01, $00, $01, $01, $01, $00, $fe, $fd, $fd, $fe
101c2     FF 00 00 01 
101c6     01 01 00 00 
101ca     00 00 00 00 
101ce     00 00 FE FE | 	byte	$ff, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $fe
101d2     FE FF 01 02 
101d6     02 01 00 00 
101da     00 01 00 00 
101de     FE FE FF FE | 	byte	$fe, $ff, $01, $02, $02, $01, $00, $00, $00, $01, $00, $00, $fe, $fe, $ff, $fe
101e2     FF FF 00 01 
101e6     01 01 01 00 
101ea     00 FF FF 00 
101ee     00 00 FF FE | 	byte	$ff, $ff, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $00, $00, $00, $ff, $fe
101f2     FF 00 01 01 
101f6     01 00 00 00 
101fa     01 01 00 00 
101fe     FF FE FE FE | 	byte	$ff, $00, $01, $01, $01, $00, $00, $00, $01, $01, $00, $00, $ff, $fe, $fe, $fe
10202     FF FF 00 01 
10206     02 02 01 01 
1020a     00 FF FF 00 
1020e     00 00 FF FF | 	byte	$ff, $ff, $00, $01, $02, $02, $01, $01, $00, $ff, $ff, $00, $00, $00, $ff, $ff
10212     FF 00 01 01 
10216     01 00 FF 00 
1021a     00 00 00 00 
1021e     FF FF FF FF | 	byte	$ff, $00, $01, $01, $01, $00, $ff, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff
10222     FF FF FF 00 
10226     01 02 01 01 
1022a     00 00 FF FF 
1022e     00 FF FF FF | 	byte	$ff, $ff, $ff, $00, $01, $02, $01, $01, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
10232     00 00 00 01 
10236     01 01 00 00 
1023a     00 00 00 FF 
1023e     FF 00 FF FF | 	byte	$00, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $ff, $ff, $00, $ff, $ff
10242     FF FF FF 00 
10246     01 02 02 01 
1024a     00 00 FF FF 
1024e     FF FF 00 00 | 	byte	$ff, $ff, $ff, $00, $01, $02, $02, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00
10252     00 00 00 00 
10256     00          | 	byte	$00[5]
10257     01 00 00 00 
1025b     00 00 FF FF 
1025f     FF FF FF 00 
10263     FF 00 01 02 | 	byte	$01, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $00, $01, $02
10267     01 01 01 00 
1026b     00 00 00 00 
1026f     00 00 01 00 
10273     00 00 00 F6 | 	byte	$01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $01, $00, $00, $00, $00, $f6
10277     F7 F8 F8 F8 
1027b     F9 FA FB FC 
1027f     FC FC FC FD 
10283     F9 F0 E6 DF | 	byte	$f7, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fc, $fc, $fc, $fd, $f9, $f0, $e6, $df
10287     DC DB DB DC 
1028b     DE E2 E5 E7 
1028f     E8 EA EB EC 
10293     EF F3 F6 F8 | 	byte	$dc, $db, $db, $dc, $de, $e2, $e5, $e7, $e8, $ea, $eb, $ec, $ef, $f3, $f6, $f8
10297     F9 FA FB FC 
1029b     FF 03 05 06 
1029f     07 08 08 09 
102a3     0A 0B 09 07 | 	byte	$f9, $fa, $fb, $fc, $ff, $03, $05, $06, $07, $08, $08, $09, $0a, $0b, $09, $07
102a7     04 02 01 02 
102ab     05 08 09 0A 
102af     09 09 08 08 
102b3     0B 06 00 FF | 	byte	$04, $02, $01, $02, $05, $08, $09, $0a, $09, $09, $08, $08, $0b, $06, $00, $ff
102b7     00 01 02 04 
102bb     08 0D 0E 0F 
102bf     0F 0F 0F 0F 
102c3     11 10 0B 07 | 	byte	$00, $01, $02, $04, $08, $0d, $0e, $0f, $0f, $0f, $0f, $0f, $11, $10, $0b, $07
102c7     04 03 03 03 
102cb     07 0A 09 08 
102cf     07 06 06 09 
102d3     12 1B 1E 1F | 	byte	$04, $03, $03, $03, $07, $0a, $09, $08, $07, $06, $06, $09, $12, $1b, $1e, $1f
102d7     20 20 20 22 
102db     28 2D 2E 2D 
102df     2C 2B 2A 0F 
102e3     D0 B4 B4 B8 | 	byte	$20, $20, $20, $22, $28, $2d, $2e, $2d, $2c, $2b, $2a, $0f, $d0, $b4, $b4, $b8
102e7     BC C0 C4 CA 
102eb     D4 DA DD DE 
102ef     E0 E2 E3 E8 
102f3     F2 F4 F3 F4 | 	byte	$bc, $c0, $c4, $ca, $d4, $da, $dd, $de, $e0, $e2, $e3, $e8, $f2, $f4, $f3, $f4
102f7     F5 F7 F8 FD 
102fb     04 06 05 05 
102ff     06 06 08 0E 
10303     1C 22 23 22 | 	byte	$f5, $f7, $f8, $fd, $04, $06, $05, $05, $06, $06, $08, $0e, $1c, $22, $23, $22
10307     21 20 20 24 
1030b     29 2A 28 26 
1030f     24 23 23 2A 
10313     38 3C 3B 39 | 	byte	$21, $20, $20, $24, $29, $2a, $28, $26, $24, $23, $23, $2a, $38, $3c, $3b, $39
10317     37 35 34 39 
1031b     41 42 40 3D 
1031f     39 37 2D 14 
10323     FE F7 F7 F7 | 	byte	$37, $35, $34, $39, $41, $42, $40, $3d, $39, $37, $2d, $14, $fe, $f7, $f7, $f7
10327     F8 F8 F3 EC 
1032b     E4 E2 E6 E9 
1032f     ED EF F0 D1 
10333     BE BF C3 C6 | 	byte	$f8, $f8, $f3, $ec, $e4, $e2, $e6, $e9, $ed, $ef, $f0, $d1, $be, $bf, $c3, $c6
10337     CA CE D3 DF 
1033b     E9 EB EC ED 
1033f     EF F1 F6 0C 
10343     19 1B 1A 19 | 	byte	$ca, $ce, $d3, $df, $e9, $eb, $ec, $ed, $ef, $f1, $f6, $0c, $19, $1b, $1a, $19
10347     19 18 1B 26 
1034b     2C 2C 2A 28 
1034f     26 24 2A 3C 
10353     44 42 3E 3A | 	byte	$19, $18, $1b, $26, $2c, $2c, $2a, $28, $26, $24, $2a, $3c, $44, $42, $3e, $3a
10357     37 34 36 3F 
1035b     43 40 3B 37 
1035f     34 31 2C EA 
10363     C1 BD BF C1 | 	byte	$37, $34, $36, $3f, $43, $40, $3b, $37, $34, $31, $2c, $ea, $c1, $bd, $bf, $c1
10367     C2 C2 C2 C4 
1036b     C6 C7 CA CD 
1036f     D0 CD C0 C1 
10373     C5 C9 CB CE | 	byte	$c2, $c2, $c2, $c4, $c6, $c7, $ca, $cd, $d0, $cd, $c0, $c1, $c5, $c9, $cb, $ce
10377     D1 D3 D4 D4 
1037b     D5 D7 DA DD 
1037f     E0 E6 FD 0F 
10383     15 16 14 14 | 	byte	$d1, $d3, $d4, $d4, $d5, $d7, $da, $dd, $e0, $e6, $fd, $0f, $15, $16, $14, $14
10387     14 16 1E 29 
1038b     2D 2B 29 27 
1038f     25 2B 3C 4A 
10393     4B 47 43 3F | 	byte	$14, $16, $1e, $29, $2d, $2b, $29, $27, $25, $2b, $3c, $4a, $4b, $47, $43, $3f
10397     3C 3C 41 49 
1039b     49 45 3F 3C 
1039f     36 1D 01 F7 
103a3     F7 F8 F8 F8 | 	byte	$3c, $3c, $41, $49, $49, $45, $3f, $3c, $36, $1d, $01, $f7, $f7, $f8, $f8, $f8
103a7     F8 F9 F5 EA 
103ab     E4 E6 E8 EA 
103af     ED D2 9D 94 
103b3     9A 9F A4 A9 | 	byte	$f8, $f9, $f5, $ea, $e4, $e6, $e8, $ea, $ed, $d2, $9d, $94, $9a, $9f, $a4, $a9
103b7     AC B1 B6 BF 
103bb     C5 C9 CC D0 
103bf     D8 EC FE 0A 
103c3     0C 0C 0C 0C | 	byte	$ac, $b1, $b6, $bf, $c5, $c9, $cc, $d0, $d8, $ec, $fe, $0a, $0c, $0c, $0c, $0c
103c7     0E 13 1E 27 
103cb     28 26 24 23 
103cf     28 37 44 49 
103d3     48 44 40 3C | 	byte	$0e, $13, $1e, $27, $28, $26, $24, $23, $28, $37, $44, $49, $48, $44, $40, $3c
103d7     3A 3E 45 4A 
103db     47 42 3E 3B 
103df     41 4A 1B DE 
103e3     C7 C5 C5 C5 | 	byte	$3a, $3e, $45, $4a, $47, $42, $3e, $3b, $41, $4a, $1b, $de, $c7, $c5, $c5, $c5
103e7     C5 C2 C1 C5 
103eb     C8 CB CB B5 
103ef     8F 8C 9A A6 
103f3     AD B2 B6 BB | 	byte	$c5, $c2, $c1, $c5, $c8, $cb, $cb, $b5, $8f, $8c, $9a, $a6, $ad, $b2, $b6, $bb
103f7     BE B9 B3 B7 
103fb     BE C3 C8 D2 
103ff     E1 F5 02 0A 
10403     0D 0D 0D 0E | 	byte	$be, $b9, $b3, $b7, $be, $c3, $c8, $d2, $e1, $f5, $02, $0a, $0d, $0d, $0d, $0e
10407     13 1C 26 2B 
1040b     2B 2A 29 2E 
1040f     3A 45 4C 4E 
10413     4C 49 45 42 | 	byte	$13, $1c, $26, $2b, $2b, $2a, $29, $2e, $3a, $45, $4c, $4e, $4c, $49, $45, $42
10417     44 48 4D 4F 
1041b     4C 46 45 3F 
1041f     19 FA F3 F5 
10423     F7 F7 F7 F9 | 	byte	$44, $48, $4d, $4f, $4c, $46, $45, $3f, $19, $fa, $f3, $f5, $f7, $f7, $f7, $f9
10427     FF 02 F9 E9 
1042b     E4 E6 EB EA 
1042f     B6 90 8D 95 
10433     9B A0 A2 9F | 	byte	$ff, $02, $f9, $e9, $e4, $e6, $eb, $ea, $b6, $90, $8d, $95, $9b, $a0, $a2, $9f
10437     9C A0 AC B8 
1043b     BE C4 CF DB 
1043f     ED F8 02 08 
10443     0B 0B 0C 10 | 	byte	$9c, $a0, $ac, $b8, $be, $c4, $cf, $db, $ed, $f8, $02, $08, $0b, $0b, $0c, $10
10447     17 1F 26 29 
1044b     29 29 2D 35 
1044f     3F 46 49 4A 
10453     48 44 41 41 | 	byte	$17, $1f, $26, $29, $29, $29, $2d, $35, $3f, $46, $49, $4a, $48, $44, $41, $41
10457     45 47 4A 4A 
1045b     46 46 47 4C 
1045f     52 42 08 D7 
10463     C8 C5 C5 C6 | 	byte	$45, $47, $4a, $4a, $46, $46, $47, $4c, $52, $42, $08, $d7, $c8, $c5, $c5, $c6
10467     C0 BA BB C1 
1046b     BF 9D 82 80 
1046f     85 92 9E A9 
10473     AF B5 BA BE | 	byte	$c0, $ba, $bb, $c1, $bf, $9d, $82, $80, $85, $92, $9e, $a9, $af, $b5, $ba, $be
10477     B7 AF B2 BA 
1047b     C3 CF D9 E9 
1047f     F7 00 07 0D 
10483     10 11 14 1A | 	byte	$b7, $af, $b2, $ba, $c3, $cf, $d9, $e9, $f7, $00, $07, $0d, $10, $11, $14, $1a
10487     21 27 2C 2F 
1048b     31 35 3A 43 
1048f     4A 4C 4F 4F 
10493     4D 4A 48 4B | 	byte	$21, $27, $2c, $2f, $31, $35, $3a, $43, $4a, $4c, $4f, $4f, $4d, $4a, $48, $4b
10497     4D 4E 50 4F 
1049b     50 50 42 1B 
1049f     01 F7 F7 FA 
104a3     FB FC FF 05 | 	byte	$4d, $4e, $50, $4f, $50, $50, $42, $1b, $01, $f7, $f7, $fa, $fb, $fc, $ff, $05
104a7     09 09 FE EE 
104ab     EB EE D9 AB 
104af     90 8C 92 99 
104b3     9D 9B 95 97 | 	byte	$09, $09, $fe, $ee, $eb, $ee, $d9, $ab, $90, $8c, $92, $99, $9d, $9b, $95, $97
104b7     A0 AC B7 C3 
104bb     CE D8 E5 F2 
104bf     FC 03 0A 0F 
104c3     11 14 18 1F | 	byte	$a0, $ac, $b7, $c3, $ce, $d8, $e5, $f2, $fc, $03, $0a, $0f, $11, $14, $18, $1f
104c7     24 28 2C 31 
104cb     36 3A 40 48 
104cf     4B 4B 4D 4C 
104d3     4B 49 4A 4B | 	byte	$24, $28, $2c, $31, $36, $3a, $40, $48, $4b, $4b, $4d, $4c, $4b, $49, $4a, $4b
104d7     4C 4C 4D 50 
104db     51 51 54 56 
104df     54 32 FF DD 
104e3     CD CA C9 C3 | 	byte	$4c, $4c, $4d, $50, $51, $51, $54, $56, $54, $32, $ff, $dd, $cd, $ca, $c9, $c3
104e7     BA B7 B1 98 
104eb     81 81 82 89 
104ef     94 9E A9 B2 
104f3     B9 C1 C3 BD | 	byte	$ba, $b7, $b1, $98, $81, $81, $82, $89, $94, $9e, $a9, $b2, $b9, $c1, $c3, $bd
104f7     B4 B3 BD CA 
104fb     D5 E0 ED F9 
104ff     00 06 0D 11 
10503     16 19 1F 24 | 	byte	$b4, $b3, $bd, $ca, $d5, $e0, $ed, $f9, $00, $06, $0d, $11, $16, $19, $1f, $24
10507     28 2C 32 39 
1050b     3D 41 48 4C 
1050f     4D 4E 4F 4F 
10513     4E 4E 4E 4F | 	byte	$28, $2c, $32, $39, $3d, $41, $48, $4c, $4d, $4e, $4f, $4f, $4e, $4e, $4e, $4f
10517     4F 50 53 56 
1051b     53 42 21 09 
1051f     FD FB FB FE 
10523     00 04 08 0C | 	byte	$4f, $50, $53, $56, $53, $42, $21, $09, $fd, $fb, $fb, $fe, $00, $04, $08, $0c
10527     0E 0D 06 FA 
1052b     EE CC AA 93 
1052f     8C 8E 93 94 
10533     90 8F 95 A0 | 	byte	$0e, $0d, $06, $fa, $ee, $cc, $aa, $93, $8c, $8e, $93, $94, $90, $8f, $95, $a0
10537     A9 B6 C5 D2 
1053b     DB E7 F3 FB 
1053f     01 06 0C 11 
10543     15 1A 1F 23 | 	byte	$a9, $b6, $c5, $d2, $db, $e7, $f3, $fb, $01, $06, $0c, $11, $15, $1a, $1f, $23
10547     27 2D 33 38 
1054b     3B 41 47 49 
1054f     49 49 4A 4A 
10553     4B 4A 4B 4B | 	byte	$27, $2d, $33, $38, $3b, $41, $47, $49, $49, $49, $4a, $4a, $4b, $4a, $4b, $4b
10557     4B 4E 51 52 
1055b     53 55 56 54 
1055f     49 25 FE E1 
10563     D2 CC C5 B9 | 	byte	$4b, $4e, $51, $52, $53, $55, $56, $54, $49, $25, $fe, $e1, $d2, $cc, $c5, $b9
10567     A8 8E 81 81 
1056b     81 82 8A 94 
1056f     9E A7 B0 B9 
10573     C1 C4 BF B9 | 	byte	$a8, $8e, $81, $81, $81, $82, $8a, $94, $9e, $a7, $b0, $b9, $c1, $c4, $bf, $b9
10577     B8 BF CA D4 
1057b     DF EC F6 FD 
1057f     03 08 0E 13 
10583     19 1D 22 27 | 	byte	$b8, $bf, $ca, $d4, $df, $ec, $f6, $fd, $03, $08, $0e, $13, $19, $1d, $22, $27
10587     2C 32 37 3B 
1058b     40 46 4A 4B 
1058f     4B 4B 4C 4C 
10593     4D 4D 4D 4F | 	byte	$2c, $32, $37, $3b, $40, $46, $4a, $4b, $4b, $4b, $4c, $4c, $4d, $4d, $4d, $4f
10597     50 53 54 51 
1059b     3E 26 0F 03 
1059f     FD FC FE 01 
105a3     04 07 0B 0F | 	byte	$50, $53, $54, $51, $3e, $26, $0f, $03, $fd, $fc, $fe, $01, $04, $07, $0b, $0f
105a7     12 13 0B F2 
105ab     CA AA 96 8D 
105af     8B 8B 89 88 
105b3     8C 94 9E AB | 	byte	$12, $13, $0b, $f2, $ca, $aa, $96, $8d, $8b, $8b, $89, $88, $8c, $94, $9e, $ab
105b7     B7 C3 CE DA 
105bb     E5 F0 F8 FE 
105bf     02 07 0D 12 
105c3     17 1C 21 27 | 	byte	$b7, $c3, $ce, $da, $e5, $f0, $f8, $fe, $02, $07, $0d, $12, $17, $1c, $21, $27
105c7     2C 31 35 39 
105cb     3F 43 46 46 
105cf     45 46 47 48 
105d3     48 49 4A 4C | 	byte	$2c, $31, $35, $39, $3f, $43, $46, $46, $45, $46, $47, $48, $48, $49, $4a, $4c
105d7     4E 4E 4F 50 
105db     52 53 52 4D 
105df     39 1B FA E4 
105e3     D4 C6 B0 8F | 	byte	$4e, $4e, $4f, $50, $52, $53, $52, $4d, $39, $1b, $fa, $e4, $d4, $c6, $b0, $8f
105e7     81 81 81 81 
105eb     82 88 93 9B 
105ef     A5 AE B6 BF 
105f3     C3 C1 BE BE | 	byte	$81, $81, $81, $81, $82, $88, $93, $9b, $a5, $ae, $b6, $bf, $c3, $c1, $be, $be
105f7     C2 C9 D2 DD 
105fb     E9 F2 FA FF 
105ff     05 0A 10 16 
10603     1B 21 27 2C | 	byte	$c2, $c9, $d2, $dd, $e9, $f2, $fa, $ff, $05, $0a, $10, $16, $1b, $21, $27, $2c
10607     31 35 39 3F 
1060b     43 47 48 48 
1060f     48 48 49 4A 
10613     4B 4D 4F 51 | 	byte	$31, $35, $39, $3f, $43, $47, $48, $48, $48, $48, $49, $4a, $4b, $4d, $4f, $51
10617     51 51 4B 3B 
1061b     27 14 08 01 
1061f     FE FE 00 03 
10623     07 0B 10 13 | 	byte	$51, $51, $4b, $3b, $27, $14, $08, $01, $fe, $fe, $00, $03, $07, $0b, $10, $13
10627     15 0E F2 D0 
1062b     AF 99 8E 87 
1062f     84 83 83 88 
10633     91 9E AC B7 | 	byte	$15, $0e, $f2, $d0, $af, $99, $8e, $87, $84, $83, $83, $88, $91, $9e, $ac, $b7
10637     C0 CB D6 E3 
1063b     ED F5 FA 00 
1063f     05 0A 10 14 
10643     1B 21 27 2C | 	byte	$c0, $cb, $d6, $e3, $ed, $f5, $fa, $00, $05, $0a, $10, $14, $1b, $21, $27, $2c
10647     2F 32 37 3D 
1064b     42 43 44 44 
1064f     44 44 44 46 
10653     48 4B 4D 4D | 	byte	$2f, $32, $37, $3d, $42, $43, $44, $44, $44, $44, $44, $46, $48, $4b, $4d, $4d
10657     4C 4D 4F 51 
1065b     52 50 4D 45 
1065f     2B 0E F2 DC 
10663     BD A0 85 80 | 	byte	$4c, $4d, $4f, $51, $52, $50, $4d, $45, $2b, $0e, $f2, $dc, $bd, $a0, $85, $80
10667     81 81 81 82 
1066b     89 94 9D A6 
1066f     AF B6 BE C3 
10673     C5 C4 C4 C5 | 	byte	$81, $81, $81, $82, $89, $94, $9d, $a6, $af, $b6, $be, $c3, $c5, $c4, $c4, $c5
10677     CA D3 DE E8 
1067b     F2 F9 FE 04 
1067f     09 0E 14 1A 
10683     22 29 2D 30 | 	byte	$ca, $d3, $de, $e8, $f2, $f9, $fe, $04, $09, $0e, $14, $1a, $22, $29, $2d, $30
10687     33 38 3E 43 
1068b     46 48 48 48 
1068f     48 48 49 4C 
10693     4F 51 52 51 | 	byte	$33, $38, $3e, $43, $46, $48, $48, $48, $48, $48, $49, $4c, $4f, $51, $52, $51
10697     4F 49 38 27 
1069b     16 0A 03 00 
1069f     FF 01 03 08 
106a3     0D 11 14 13 | 	byte	$4f, $49, $38, $27, $16, $0a, $03, $00, $ff, $01, $03, $08, $0d, $11, $14, $13
106a7     09 EE D0 B1 
106ab     9D 8E 85 82 
106af     82 82 89 94 
106b3     A2 AD B8 C0 | 	byte	$09, $ee, $d0, $b1, $9d, $8e, $85, $82, $82, $82, $89, $94, $a2, $ad, $b8, $c0
106b7     CB D7 E1 EC 
106bb     F3 FA FF 04 
106bf     09 0E 14 1C 
106c3     23 28 2B 2D | 	byte	$cb, $d7, $e1, $ec, $f3, $fa, $ff, $04, $09, $0e, $14, $1c, $23, $28, $2b, $2d
106c7     32 37 3D 41 
106cb     42 43 42 43 
106cf     43 43 46 4A 
106d3     4C 4D 4C 4C | 	byte	$32, $37, $3d, $41, $42, $43, $42, $43, $43, $43, $46, $4a, $4c, $4d, $4c, $4c
106d7     4C 4E 50 50 
106db     4F 4D 48 36 
106df     1B F6 CF AE 
106e3     8F 81 81 81 | 	byte	$4c, $4e, $50, $50, $4f, $4d, $48, $36, $1b, $f6, $cf, $ae, $8f, $81, $81, $81
106e7     82 81 83 8D 
106eb     97 A0 A8 B0 
106ef     B8 C1 C6 C9 
106f3     C8 C7 C8 CD | 	byte	$82, $81, $83, $8d, $97, $a0, $a8, $b0, $b8, $c1, $c6, $c9, $c8, $c7, $c8, $cd
106f7     D5 DF E9 F2 
106fb     F9 FF 04 08 
106ff     0D 15 1D 24 
10703     29 2D 2F 33 | 	byte	$d5, $df, $e9, $f2, $f9, $ff, $04, $08, $0d, $15, $1d, $24, $29, $2d, $2f, $33
10707     38 3D 42 44 
1070b     46 46 46 45 
1070f     47 49 4D 50 
10713     51 51 50 4C | 	byte	$38, $3d, $42, $44, $46, $46, $46, $45, $47, $49, $4d, $50, $51, $51, $50, $4c
10717     42 31 20 12 
1071b     09 04 01 00 
1071f     02 07 0B 10 
10723     13 14 0F FB | 	byte	$42, $31, $20, $12, $09, $04, $01, $00, $02, $07, $0b, $10, $13, $14, $0f, $fb
10727     E3 C8 AF 9D 
1072b     8C 83 82 81 
1072f     83 8C 98 A6 
10733     B1 B9 C2 CD | 	byte	$e3, $c8, $af, $9d, $8c, $83, $82, $81, $83, $8c, $98, $a6, $b1, $b9, $c2, $cd
10737     D8 E3 EC F4 
1073b     FB 00 04 09 
1073f     10 17 1F 25 
10743     29 2B 2D 32 | 	byte	$d8, $e3, $ec, $f4, $fb, $00, $04, $09, $10, $17, $1f, $25, $29, $2b, $2d, $32
10747     37 3B 3F 41 
1074b     42 42 41 42 
1074f     44 48 4B 4D 
10753     4C 4B 4B 4C | 	byte	$37, $3b, $3f, $41, $42, $42, $41, $42, $44, $48, $4b, $4d, $4c, $4b, $4b, $4c
10757     4F 4F 4F 4E 
1075b     4C 48 3A 16 
1075f     EC BF 9C 87 
10763     81 81 81 82 | 	byte	$4f, $4f, $4f, $4e, $4c, $48, $3a, $16, $ec, $bf, $9c, $87, $81, $81, $81, $82
10767     82 87 93 9D 
1076b     A6 AE B5 BE 
1076f     C7 CC CC CB 
10773     CA CB D1 DA | 	byte	$82, $87, $93, $9d, $a6, $ae, $b5, $be, $c7, $cc, $cc, $cb, $ca, $cb, $d1, $da
10777     E4 EC F5 FB 
1077b     01 05 0A 11 
1077f     18 20 25 2A 
10783     2D 2F 33 39 | 	byte	$e4, $ec, $f5, $fb, $01, $05, $0a, $11, $18, $20, $25, $2a, $2d, $2f, $33, $39
10787     3D 41 43 45 
1078b     45 45 45 48 
1078f     4B 4E 50 50 
10793     4F 4E 48 3A | 	byte	$3d, $41, $43, $45, $45, $45, $45, $48, $4b, $4e, $50, $50, $4f, $4e, $48, $3a
10797     2B 19 0E 06 
1079b     02 01 02 05 
1079f     09 0E 11 14 
107a3     12 03 EC D4 | 	byte	$2b, $19, $0e, $06, $02, $01, $02, $05, $09, $0e, $11, $14, $12, $03, $ec, $d4
107a7     C1 AE 9C 8B 
107ab     83 82 82 88 
107af     93 9F A9 B4 
107b3     BC C5 D1 DB | 	byte	$c1, $ae, $9c, $8b, $83, $82, $82, $88, $93, $9f, $a9, $b4, $bc, $c5, $d1, $db
107b7     E6 EE F6 FC 
107bb     01 06 0D 13 
107bf     1A 21 25 28 
107c3     2B 2E 33 37 | 	byte	$e6, $ee, $f6, $fc, $01, $06, $0d, $13, $1a, $21, $25, $28, $2b, $2e, $33, $37
107c7     3B 3E 40 41 
107cb     41 41 44 46 
107cf     49 4A 4B 4A 
107d3     4A 4A 4B 4C | 	byte	$3b, $3e, $40, $41, $41, $41, $44, $46, $49, $4a, $4b, $4a, $4a, $4a, $4b, $4c
107d7     4D 4C 4C 49 
107db     41 2B 07 DA 
107df     B7 99 85 81 
107e3     82 81 81 84 | 	byte	$4d, $4c, $4c, $49, $41, $2b, $07, $da, $b7, $99, $85, $81, $82, $81, $81, $84
107e7     8D 98 A1 A9 
107eb     B2 BA C4 CC 
107ef     CE CD CB CB 
107f3     CD D3 DD E5 | 	byte	$8d, $98, $a1, $a9, $b2, $ba, $c4, $cc, $ce, $cd, $cb, $cb, $cd, $d3, $dd, $e5
107f7     EE F6 FC 03 
107fb     07 0E 15 1B 
107ff     21 26 2A 2D 
10803     30 34 39 3D | 	byte	$ee, $f6, $fc, $03, $07, $0e, $15, $1b, $21, $26, $2a, $2d, $30, $34, $39, $3d
10807     40 42 44 44 
1080b     46 47 49 4C 
1080f     4D 4E 4E 4D 
10813     4B 43 34 22 | 	byte	$40, $42, $44, $44, $46, $47, $49, $4c, $4d, $4e, $4e, $4d, $4b, $43, $34, $22
10817     14 0A 04 02 
1081b     02 04 08 0B 
1081f     0E 11 11 09 
10823     F5 DD C9 B8 | 	byte	$14, $0a, $04, $02, $02, $04, $08, $0b, $0e, $11, $11, $09, $f5, $dd, $c9, $b8
10827     AA 9B 8C 85 
1082b     83 86 8D 98 
1082f     A2 AC B5 BF 
10833     C8 D3 DE E7 | 	byte	$aa, $9b, $8c, $85, $83, $86, $8d, $98, $a2, $ac, $b5, $bf, $c8, $d3, $de, $e7
10837     F0 F7 FE 03 
1083b     0A 10 16 1C 
1083f     21 25 28 2B 
10843     2F 34 38 3B | 	byte	$f0, $f7, $fe, $03, $0a, $10, $16, $1c, $21, $25, $28, $2b, $2f, $34, $38, $3b
10847     3E 40 41 44 
1084b     45 47 49 4A 
1084f     4A 4A 4A 4A 
10853     4B 4C 4C 4D | 	byte	$3e, $40, $41, $44, $45, $47, $49, $4a, $4a, $4a, $4a, $4a, $4b, $4c, $4c, $4d
10857     4C 49 40 2E 
1085b     16 FA D7 B8 
1085f     9D 8B 82 81 
10863     82 82 89 92 | 	byte	$4c, $49, $40, $2e, $16, $fa, $d7, $b8, $9d, $8b, $82, $81, $82, $82, $89, $92
10867     9C A5 AF B8 
1086b     C1 C9 CF CF 
1086f     CD CB CC D1 
10873     D7 DF E8 EF | 	byte	$9c, $a5, $af, $b8, $c1, $c9, $cf, $cf, $cd, $cb, $cc, $d1, $d7, $df, $e8, $ef
10877     F7 FE 04 0B 
1087b     11 17 1D 21 
1087f     26 29 2D 31 
10883     35 39 3D 40 | 	byte	$f7, $fe, $04, $0b, $11, $17, $1d, $21, $26, $29, $2d, $31, $35, $39, $3d, $40
10887     42 44 46 48 
1088b     49 4A 4B 4C 
1088f     4C 4C 4C 49 
10893     3E 2E 1D 11 | 	byte	$42, $44, $46, $48, $49, $4a, $4b, $4c, $4c, $4c, $4c, $49, $3e, $2e, $1d, $11
10897     08 05 05 06 
1089b     07 09 0C 0F 
1089f     11 0D FC E6 
108a3     CE BD AE A3 | 	byte	$08, $05, $05, $06, $07, $09, $0c, $0f, $11, $0d, $fc, $e6, $ce, $bd, $ae, $a3
108a7     9A 93 8F 8D 
108ab     8F 95 9D A5 
108af     AE B7 C2 CC 
108b3     D6 E0 EA F1 | 	byte	$9a, $93, $8f, $8d, $8f, $95, $9d, $a5, $ae, $b7, $c2, $cc, $d6, $e0, $ea, $f1
108b7     F9 00 07 0D 
108bb     12 18 1C 20 
108bf     24 27 2C 30 
108c3     34 38 3B 3E | 	byte	$f9, $00, $07, $0d, $12, $18, $1c, $20, $24, $27, $2c, $30, $34, $38, $3b, $3e
108c7     40 42 45 46 
108cb     47 47 48 48 
108cf     48 48 49 4A 
108d3     4B 4B 4C 47 | 	byte	$40, $42, $45, $46, $47, $47, $48, $48, $48, $48, $49, $4a, $4b, $4b, $4c, $47
108d7     3B 27 14 02 
108db     F2 D9 BE A7 
108df     93 87 83 84 
108e3     87 8F 99 A1 | 	byte	$3b, $27, $14, $02, $f2, $d9, $be, $a7, $93, $87, $83, $84, $87, $8f, $99, $a1
108e7     AC B5 BE C7 
108eb     CD D0 CF CD 
108ef     CB CD D3 DA 
108f3     E2 EA F1 FA | 	byte	$ac, $b5, $be, $c7, $cd, $d0, $cf, $cd, $cb, $cd, $d3, $da, $e2, $ea, $f1, $fa
108f7     01 09 0F 14 
108fb     19 1D 21 25 
108ff     29 2D 31 35 
10903     39 3D 40 43 | 	byte	$01, $09, $0f, $14, $19, $1d, $21, $25, $29, $2d, $31, $35, $39, $3d, $40, $43
10907     46 48 49 4A 
1090b     49 4A 4A 4A 
1090f     4A 4A 45 37 
10913     26 18 0D 08 | 	byte	$46, $48, $49, $4a, $49, $4a, $4a, $4a, $4a, $4a, $45, $37, $26, $18, $0d, $08
10917     06 06 07 09 
1091b     0B 0D 0F 0E 
1091f     03 EF D7 C2 
10923     B0 A3 9E 9C | 	byte	$06, $06, $07, $09, $0b, $0d, $0f, $0e, $03, $ef, $d7, $c2, $b0, $a3, $9e, $9c
10927     9B 9A 99 99 
1092b     9D A2 AA B1 
1092f     BB C6 D0 DA 
10933     E3 EC F5 FD | 	byte	$9b, $9a, $99, $99, $9d, $a2, $aa, $b1, $bb, $c6, $d0, $da, $e3, $ec, $f5, $fd
10937     04 0A 0F 13 
1093b     17 1B 1F 22 
1093f     27 2B 30 34 
10943     38 3B 3E 41 | 	byte	$04, $0a, $0f, $13, $17, $1b, $1f, $22, $27, $2b, $30, $34, $38, $3b, $3e, $41
10947     44 45 45 45 
1094b     45 45 45 45 
1094f     47 49 4A 4A 
10953     49 44 35 21 | 	byte	$44, $45, $45, $45, $45, $45, $45, $45, $47, $49, $4a, $4a, $49, $44, $35, $21
10957     0F FF F6 ED 
1095b     DD C8 B0 9E 
1095f     90 8A 8A 8E 
10963     95 9E A8 B3 | 	byte	$0f, $ff, $f6, $ed, $dd, $c8, $b0, $9e, $90, $8a, $8a, $8e, $95, $9e, $a8, $b3
10967     BB C3 CA CF 
1096b     D0 CF CC CC 
1096f     CF D5 DD E4 
10973     EC F5 FD 05 | 	byte	$bb, $c3, $ca, $cf, $d0, $cf, $cc, $cc, $cf, $d5, $dd, $e4, $ec, $f5, $fd, $05
10977     0C 10 15 18 
1097b     1D 20 24 28 
1097f     2E 32 37 3A 
10983     3D 41 45 47 | 	byte	$0c, $10, $15, $18, $1d, $20, $24, $28, $2e, $32, $37, $3a, $3d, $41, $45, $47
10987     49 49 48 48 
1098b     48 48 48 49 
1098f     48 40 31 20 
10993     13 0C 09 07 | 	byte	$49, $49, $48, $48, $48, $48, $48, $49, $48, $40, $31, $20, $13, $0c, $09, $07
10997     06 07 09 0A 
1099b     0C 0D 07 F7 
1099f     DE C9 B4 A5 
109a3     9E 9D 9F A3 | 	byte	$06, $07, $09, $0a, $0c, $0d, $07, $f7, $de, $c9, $b4, $a5, $9e, $9d, $9f, $a3
109a7     A4 A3 A2 A3 
109ab     A7 AD B4 BF 
109af     C8 D2 DD E5 
109b3     EF F8 00 07 | 	byte	$a4, $a3, $a2, $a3, $a7, $ad, $b4, $bf, $c8, $d2, $dd, $e5, $ef, $f8, $00, $07
109b7     0B 10 13 16 
109bb     1A 1E 23 27 
109bf     2C 31 34 39 
109c3     3C 40 43 44 | 	byte	$0b, $10, $13, $16, $1a, $1e, $23, $27, $2c, $31, $34, $39, $3c, $40, $43, $44
109c7     44 44 44 43 
109cb     43 43 44 45 
109cf     48 49 47 3E 
109d3     2F 1B 0A FE | 	byte	$44, $44, $44, $43, $43, $43, $44, $45, $48, $49, $47, $3e, $2f, $1b, $0a, $fe
109d7     F5 F1 EF E7 
109db     D7 C1 AD 9E 
109df     95 93 95 9C 
109e3     A4 AE B7 BF | 	byte	$f5, $f1, $ef, $e7, $d7, $c1, $ad, $9e, $95, $93, $95, $9c, $a4, $ae, $b7, $bf
109e7     C6 CC CF CF 
109eb     CD CB CC D0 
109ef     D7 DE E6 EF 
109f3     F8 00 07 0C | 	byte	$c6, $cc, $cf, $cf, $cd, $cb, $cc, $d0, $d7, $de, $e6, $ef, $f8, $00, $07, $0c
109f7     10 14 17 1B 
109fb     1F 23 28 2D 
109ff     32 37 3A 3F 
10a03     43 45 47 48 | 	byte	$10, $14, $17, $1b, $1f, $23, $28, $2d, $32, $37, $3a, $3f, $43, $45, $47, $48
10a07     47 47 46 45 
10a0b     46 47 48 46 
10a0f     3B 2D 1F 14 
10a13     0E 09 08 07 | 	byte	$47, $47, $46, $45, $46, $47, $48, $46, $3b, $2d, $1f, $14, $0e, $09, $08, $07
10a17     08 08 09 0B 
10a1b     09 FE EB D2 
10a1f     BD AB A1 9C 
10a23     9D A2 A6 AA | 	byte	$08, $08, $09, $0b, $09, $fe, $eb, $d2, $bd, $ab, $a1, $9c, $9d, $a2, $a6, $aa
10a27     AC AB AB AC 
10a2b     B0 B7 C0 CA 
10a2f     D4 DE E8 F1 
10a33     F9 00 06 0A | 	byte	$ac, $ab, $ab, $ac, $b0, $b7, $c0, $ca, $d4, $de, $e8, $f1, $f9, $00, $06, $0a
10a37     0E 11 14 18 
10a3b     1C 22 27 2C 
10a3f     31 35 3A 3E 
10a43     41 43 43 43 | 	byte	$0e, $11, $14, $18, $1c, $22, $27, $2c, $31, $35, $3a, $3e, $41, $43, $43, $43
10a47     43 41 41 40 
10a4b     41 43 45 47 
10a4f     45 3C 2B 1A 
10a53     0B FF F8 F4 | 	byte	$43, $41, $41, $40, $41, $43, $45, $47, $45, $3c, $2b, $1a, $0b, $ff, $f8, $f4
10a57     F2 F2 EF E3 
10a5b     D2 BD AE A2 
10a5f     9E 9F A4 AA 
10a63     B2 BA C1 C7 | 	byte	$f2, $f2, $ef, $e3, $d2, $bd, $ae, $a2, $9e, $9f, $a4, $aa, $b2, $ba, $c1, $c7
10a67     CC CF CF CD 
10a6b     CB CE D2 DA 
10a6f     E1 E9 F2 FA 
10a73     01 06 0B 0F | 	byte	$cc, $cf, $cf, $cd, $cb, $ce, $d2, $da, $e1, $e9, $f2, $fa, $01, $06, $0b, $0f
10a77     12 16 19 1D 
10a7b     22 27 2D 32 
10a7f     37 3C 40 44 
10a83     45 46 46 45 | 	byte	$12, $16, $19, $1d, $22, $27, $2d, $32, $37, $3c, $40, $44, $45, $46, $46, $45
10a87     45 44 43 43 
10a8b     45 47 43 39 
10a8f     2B 1F 14 0E 
10a93     0A 08 07 07 | 	byte	$45, $44, $43, $43, $45, $47, $43, $39, $2b, $1f, $14, $0e, $0a, $08, $07, $07
10a97     08 08 09 03 
10a9b     F3 DE C6 B2 
10a9f     A6 A0 9E A0 
10aa3     A4 AA AF B3 | 	byte	$08, $08, $09, $03, $f3, $de, $c6, $b2, $a6, $a0, $9e, $a0, $a4, $aa, $af, $b3
10aa7     B4 B4 B3 B7 
10aab     BC C4 CE D7 
10aaf     E1 EB F2 FA 
10ab3     FF 04 09 0C | 	byte	$b4, $b4, $b3, $b7, $bc, $c4, $ce, $d7, $e1, $eb, $f2, $fa, $ff, $04, $09, $0c
10ab7     10 13 17 1C 
10abb     21 27 2C 32 
10abf     37 3B 3E 41 
10ac3     42 41 41 40 | 	byte	$10, $13, $17, $1c, $21, $27, $2c, $32, $37, $3b, $3e, $41, $42, $41, $41, $40
10ac7     3F 3F 3E 41 
10acb     43 44 42 37 
10acf     28 17 08 FF 
10ad3     F8 F5 F4 F4 | 	byte	$3f, $3f, $3e, $41, $43, $44, $42, $37, $28, $17, $08, $ff, $f8, $f5, $f4, $f4
10ad7     F5 F5 EF E0 
10adb     CC BC B0 AA 
10adf     AA AC B1 B7 
10ae3     BD C2 C8 CD | 	byte	$f5, $f5, $ef, $e0, $cc, $bc, $b0, $aa, $aa, $ac, $b1, $b7, $bd, $c2, $c8, $cd
10ae7     CF CF CD CE 
10aeb     D1 D6 DD E6 
10aef     EE F5 FC 01 
10af3     07 0B 0E 12 | 	byte	$cf, $cf, $cd, $ce, $d1, $d6, $dd, $e6, $ee, $f5, $fc, $01, $07, $0b, $0e, $12
10af7     15 18 1C 22 
10afb     27 2E 34 3A 
10aff     3E 41 42 43 
10b03     43 43 43 42 | 	byte	$15, $18, $1c, $22, $27, $2e, $34, $3a, $3e, $41, $42, $43, $43, $43, $43, $42
10b07     41 40 42 44 
10b0b     45 3F 35 28 
10b0f     1C 13 0C 08 
10b13     06 05 06 07 | 	byte	$41, $40, $42, $44, $45, $3f, $35, $28, $1c, $13, $0c, $08, $06, $05, $06, $07
10b17     07 05 F7 E4 
10b1b     CD B8 AA A1 
10b1f     9F 9F A2 A7 
10b23     AC B3 B8 BC | 	byte	$07, $05, $f7, $e4, $cd, $b8, $aa, $a1, $9f, $9f, $a2, $a7, $ac, $b3, $b8, $bc
10b27     BC BC BE C4 
10b2b     CA D4 DD E7 
10b2f     EE F4 FA FF 
10b33     04 08 0B 0F | 	byte	$bc, $bc, $be, $c4, $ca, $d4, $dd, $e7, $ee, $f4, $fa, $ff, $04, $08, $0b, $0f
10b37     11 16 1C 22 
10b3b     29 30 36 3A 
10b3f     3D 3E 3F 3F 
10b43     3F 3E 3E 3D | 	byte	$11, $16, $1c, $22, $29, $30, $36, $3a, $3d, $3e, $3f, $3f, $3f, $3e, $3e, $3d
10b47     3D 3E 3F 41 
10b4b     3D 32 22 13 
10b4f     06 FD F7 F4 
10b53     F4 F5 F6 F9 | 	byte	$3d, $3e, $3f, $41, $3d, $32, $22, $13, $06, $fd, $f7, $f4, $f4, $f5, $f6, $f9
10b57     FA F8 ED DB 
10b5b     CB BD B6 B3 
10b5f     B3 B5 BA BE 
10b63     C4 C9 CE CF | 	byte	$fa, $f8, $ed, $db, $cb, $bd, $b6, $b3, $b3, $b5, $ba, $be, $c4, $c9, $ce, $cf
10b67     CD CD CE D2 
10b6b     D9 E1 EA F1 
10b6f     F7 FC 01 05 
10b73     09 0D 10 13 | 	byte	$cd, $cd, $ce, $d2, $d9, $e1, $ea, $f1, $f7, $fc, $01, $05, $09, $0d, $10, $13
10b77     17 1D 23 29 
10b7b     31 37 3C 3F 
10b7f     41 41 41 41 
10b83     40 40 3F 3E | 	byte	$17, $1d, $23, $29, $31, $37, $3c, $3f, $41, $41, $41, $41, $40, $40, $3f, $3e
10b87     3E 41 43 43 
10b8b     3D 32 24 19 
10b8f     0F 09 05 04 
10b93     04 04 05 05 | 	byte	$3e, $41, $43, $43, $3d, $32, $24, $19, $0f, $09, $05, $04, $04, $04, $05, $05
10b97     FC E9 D4 BE 
10b9b     AF A5 A0 9F 
10b9f     A1 A4 AA B0 
10ba3     B6 BD C2 C4 | 	byte	$fc, $e9, $d4, $be, $af, $a5, $a0, $9f, $a1, $a4, $aa, $b0, $b6, $bd, $c2, $c4
10ba7     C6 C8 CD D4 
10bab     DC E4 EB F0 
10baf     F6 FA FE 03 
10bb3     07 0A 0D 11 | 	byte	$c6, $c8, $cd, $d4, $dc, $e4, $eb, $f0, $f6, $fa, $fe, $03, $07, $0a, $0d, $11
10bb7     16 1C 24 2B 
10bbb     33 38 3B 3D 
10bbf     3E 3D 3D 3D 
10bc3     3C 3C 3B 3B | 	byte	$16, $1c, $24, $2b, $33, $38, $3b, $3d, $3e, $3d, $3d, $3d, $3c, $3c, $3b, $3b
10bc7     3D 3D 37 2C 
10bcb     1D 10 05 FD 
10bcf     F8 F6 F6 F7 
10bd3     F9 FB FE 01 | 	byte	$3d, $3d, $37, $2c, $1d, $10, $05, $fd, $f8, $f6, $f6, $f7, $f9, $fb, $fe, $01
10bd7     01 FA ED DB 
10bdb     CD C2 BC B9 
10bdf     B9 BB BF C4 
10be3     C9 CD CD CC | 	byte	$01, $fa, $ed, $db, $cd, $c2, $bc, $b9, $b9, $bb, $bf, $c4, $c9, $cd, $cd, $cc
10be7     CC CF D4 DD 
10beb     E4 EC F2 F7 
10bef     FB FF 03 07 
10bf3     0A 0E 12 16 | 	byte	$cc, $cf, $d4, $dd, $e4, $ec, $f2, $f7, $fb, $ff, $03, $07, $0a, $0e, $12, $16
10bf7     1C 23 2C 33 
10bfb     39 3D 3F 3F 
10bff     3F 3E 3E 3E 
10c03     3D 3C 3C 3D | 	byte	$1c, $23, $2c, $33, $39, $3d, $3f, $3f, $3f, $3e, $3e, $3e, $3d, $3c, $3c, $3d
10c07     40 43 42 3A 
10c0b     2F 21 16 0C 
10c0f     07 04 02 03 
10c13     04 04 FF F1 | 	byte	$40, $43, $42, $3a, $2f, $21, $16, $0c, $07, $04, $02, $03, $04, $04, $ff, $f1
10c17     DC C5 B5 A9 
10c1b     A3 A0 A1 A2 
10c1f     A6 AC B2 B9 
10c23     BF C6 CB CF | 	byte	$dc, $c5, $b5, $a9, $a3, $a0, $a1, $a2, $a6, $ac, $b2, $b9, $bf, $c6, $cb, $cf
10c27     D3 D8 DD E4 
10c2b     E9 EE F2 F5 
10c2f     F9 FC 00 05 
10c33     08 0C 11 16 | 	byte	$d3, $d8, $dd, $e4, $e9, $ee, $f2, $f5, $f9, $fc, $00, $05, $08, $0c, $11, $16
10c37     1E 26 2E 34 
10c3b     39 3B 3B 3B 
10c3f     3B 3A 3A 3A 
10c43     39 39 3A 37 | 	byte	$1e, $26, $2e, $34, $39, $3b, $3b, $3b, $3b, $3a, $3a, $3a, $39, $39, $3a, $37
10c47     30 24 18 0C 
10c4b     03 FD F9 F7 
10c4f     F6 F7 F9 FC 
10c53     FE 01 06 09 | 	byte	$30, $24, $18, $0c, $03, $fd, $f9, $f7, $f6, $f7, $f9, $fc, $fe, $01, $06, $09
10c57     07 FD EC DB 
10c5b     CF C5 BF BD 
10c5f     BE C0 C6 CA 
10c63     CD CE CD CF | 	byte	$07, $fd, $ec, $db, $cf, $c5, $bf, $bd, $be, $c0, $c6, $ca, $cd, $ce, $cd, $cf
10c67     D3 D9 E0 E7 
10c6b     ED F2 F5 F9 
10c6f     FC 01 05 09 
10c73     0C 11 17 1F | 	byte	$d3, $d9, $e0, $e7, $ed, $f2, $f5, $f9, $fc, $01, $05, $09, $0c, $11, $17, $1f
10c77     26 2F 34 3A 
10c7b     3D 3D 3D 3C 
10c7f     3B 3B 3B 3B 
10c83     3B 3B 3E 42 | 	byte	$26, $2f, $34, $3a, $3d, $3d, $3d, $3c, $3b, $3b, $3b, $3b, $3b, $3b, $3e, $42
10c87     44 41 38 2B 
10c8b     1E 14 0B 05 
10c8f     02 01 02 03 
10c93     00 F5 E3 CD | 	byte	$44, $41, $38, $2b, $1e, $14, $0b, $05, $02, $01, $02, $03, $00, $f5, $e3, $cd
10c97     BA AE A5 A1 
10c9b     A1 A2 A5 AA 
10c9f     AE B5 BC C3 
10ca3     CA D2 DA E0 | 	byte	$ba, $ae, $a5, $a1, $a1, $a2, $a5, $aa, $ae, $b5, $bc, $c3, $ca, $d2, $da, $e0
10ca7     E5 E9 EC EF 
10cab     F2 F4 F6 F9 
10caf     FD 00 04 08 
10cb3     0C 13 1A 22 | 	byte	$e5, $e9, $ec, $ef, $f2, $f4, $f6, $f9, $fd, $00, $04, $08, $0c, $13, $1a, $22
10cb7     2A 30 35 38 
10cbb     3A 39 38 38 
10cbf     36 36 37 36 
10cc3     36 32 28 1D | 	byte	$2a, $30, $35, $38, $3a, $39, $38, $38, $36, $36, $37, $36, $36, $32, $28, $1d
10cc7     11 08 01 FC 
10ccb     FA F8 F7 F8 
10ccf     FA FC FF 02 
10cd3     06 0C 12 13 | 	byte	$11, $08, $01, $fc, $fa, $f8, $f7, $f8, $fa, $fc, $ff, $02, $06, $0c, $12, $13
10cd7     0A F9 E6 D8 
10cdb     CC C5 C1 C0 
10cdf     C2 C6 CA CD 
10ce3     CE D0 D2 D7 | 	byte	$0a, $f9, $e6, $d8, $cc, $c5, $c1, $c0, $c2, $c6, $ca, $cd, $ce, $d0, $d2, $d7
10ce7     DC E2 E8 ED 
10ceb     F2 F5 F8 FB 
10cef     FF 03 07 0C 
10cf3     13 1A 23 2A | 	byte	$dc, $e2, $e8, $ed, $f2, $f5, $f8, $fb, $ff, $03, $07, $0c, $13, $1a, $23, $2a
10cf7     30 36 39 3B 
10cfb     3C 3B 3A 39 
10cff     38 38 38 39 
10d03     3C 40 44 44 | 	byte	$30, $36, $39, $3b, $3c, $3b, $3a, $39, $38, $38, $38, $39, $3c, $40, $44, $44
10d07     3E 32 26 19 
10d0b     10 08 03 00 
10d0f     FF 00 00 F8 
10d13     E9 D3 C0 B0 | 	byte	$3e, $32, $26, $19, $10, $08, $03, $00, $ff, $00, $00, $f8, $e9, $d3, $c0, $b0
10d17     A6 A2 A0 A2 
10d1b     A4 A8 AC B1 
10d1f     B8 BF C6 CF 
10d23     D9 E4 EB F0 | 	byte	$a6, $a2, $a0, $a2, $a4, $a8, $ac, $b1, $b8, $bf, $c6, $cf, $d9, $e4, $eb, $f0
10d27     F2 F2 F4 F4 
10d2b     F5 F6 F8 FA 
10d2f     FE 02 06 0D 
10d33     16 1D 26 2B | 	byte	$f2, $f2, $f4, $f4, $f5, $f6, $f8, $fa, $fe, $02, $06, $0d, $16, $1d, $26, $2b
10d37     30 35 37 38 
10d3b     37 36 34 34 
10d3f     34 34 32 2C 
10d43     22 15 0A 02 | 	byte	$30, $35, $37, $38, $37, $36, $34, $34, $34, $34, $32, $2c, $22, $15, $0a, $02
10d47     FD FA F9 F9 
10d4b     F9 F9 FA FC 
10d4f     FF 02 07 0D 
10d53     15 1B 1C 14 | 	byte	$fd, $fa, $f9, $f9, $f9, $f9, $fa, $fc, $ff, $02, $07, $0d, $15, $1b, $1c, $14
10d57     06 F1 E0 D3 
10d5b     CA C5 C3 C4 
10d5f     C7 CB CF D1 
10d63     D4 D6 DA DF | 	byte	$06, $f1, $e0, $d3, $ca, $c5, $c3, $c4, $c7, $cb, $cf, $d1, $d4, $d6, $da, $df
10d67     E4 E9 ED F1 
10d6b     F4 F7 FA FD 
10d6f     02 07 0E 17 
10d73     1F 27 2D 32 | 	byte	$e4, $e9, $ed, $f1, $f4, $f7, $fa, $fd, $02, $07, $0e, $17, $1f, $27, $2d, $32
10d77     36 38 3A 3A 
10d7b     39 37 36 35 
10d7f     35 37 3A 3F 
10d83     44 45 43 3A | 	byte	$36, $38, $3a, $3a, $39, $37, $36, $35, $35, $37, $3a, $3f, $44, $45, $43, $3a
10d87     2E 21 15 0C 
10d8b     05 01 FF FF 
10d8f     FF FB EF DB 
10d93     C7 B6 AA A3 | 	byte	$2e, $21, $15, $0c, $05, $01, $ff, $ff, $ff, $fb, $ef, $db, $c7, $b6, $aa, $a3
10d97     A1 A1 A3 A7 
10d9b     AA AF B4 BA 
10d9f     C2 CA D6 E1 
10da3     EC F3 F8 F9 | 	byte	$a1, $a1, $a3, $a7, $aa, $af, $b4, $ba, $c2, $ca, $d6, $e1, $ec, $f3, $f8, $f9
10da7     F8 F7 F6 F6 
10dab     F6 F7 F9 FD 
10daf     01 07 0F 19 
10db3     21 27 2B 2F | 	byte	$f8, $f7, $f6, $f6, $f6, $f7, $f9, $fd, $01, $07, $0f, $19, $21, $27, $2b, $2f
10db7     32 34 35 34 
10dbb     33 32 31 30 
10dbf     2C 25 19 0F 
10dc3     06 FE FA F8 | 	byte	$32, $34, $35, $34, $33, $32, $31, $30, $2c, $25, $19, $0f, $06, $fe, $fa, $f8
10dc7     F8 F9 FA FB 
10dcb     FC FD FF 02 
10dcf     07 0D 15 1B 
10dd3     22 23 1E 10 | 	byte	$f8, $f9, $fa, $fb, $fc, $fd, $ff, $02, $07, $0d, $15, $1b, $22, $23, $1e, $10
10dd7     00 ED DD D3 
10ddb     CB C7 C7 C9 
10ddf     CC D0 D3 D6 
10de3     D7 DA DE E2 | 	byte	$00, $ed, $dd, $d3, $cb, $c7, $c7, $c9, $cc, $d0, $d3, $d6, $d7, $da, $de, $e2
10de7     E7 EB EE F2 
10deb     F5 F7 FB 00 
10def     06 0F 18 20 
10df3     26 2C 30 33 | 	byte	$e7, $eb, $ee, $f2, $f5, $f7, $fb, $00, $06, $0f, $18, $20, $26, $2c, $30, $33
10df7     35 36 36 35 
10dfb     34 33 32 33 
10dff     36 3A 3F 44 
10e03     44 3F 36 2A | 	byte	$35, $36, $36, $35, $34, $33, $32, $33, $36, $3a, $3f, $44, $44, $3f, $36, $2a
10e07     1E 14 0B 05 
10e0b     00 FD FD FB 
10e0f     F4 E4 D2 C1 
10e13     B2 A9 A3 A2 | 	byte	$1e, $14, $0b, $05, $00, $fd, $fd, $fb, $f4, $e4, $d2, $c1, $b2, $a9, $a3, $a2
10e17     A3 A5 A9 AD 
10e1b     B1 B6 BC C4 
10e1f     CE DA E4 EF 
10e23     F5 FB FD FD | 	byte	$a3, $a5, $a9, $ad, $b1, $b6, $bc, $c4, $ce, $da, $e4, $ef, $f5, $fb, $fd, $fd
10e27     FC FA F8 F7 
10e2b     F7 F8 FB 00 
10e2f     08 10 19 1F 
10e33     25 29 2C 2F | 	byte	$fc, $fa, $f8, $f7, $f7, $f8, $fb, $00, $08, $10, $19, $1f, $25, $29, $2c, $2f
10e37     31 31 31 30 
10e3b     2F 2E 28 20 
10e3f     16 0D 05 FF 
10e43     FB F9 F8 F9 | 	byte	$31, $31, $31, $30, $2f, $2e, $28, $20, $16, $0d, $05, $ff, $fb, $f9, $f8, $f9
10e47     FB FC FD FF 
10e4b     01 03 06 0C 
10e4f     13 1A 21 25 
10e53     27 24 19 0B | 	byte	$fb, $fc, $fd, $ff, $01, $03, $06, $0c, $13, $1a, $21, $25, $27, $24, $19, $0b
10e57     FA E9 DD D4 
10e5b     CD CC CD D0 
10e5f     D4 D7 D9 DA 
10e63     DC DE E2 E6 | 	byte	$fa, $e9, $dd, $d4, $cd, $cc, $cd, $d0, $d4, $d7, $d9, $da, $dc, $de, $e2, $e6
10e67     E9 EE F1 F3 
10e6b     F7 FB 00 08 
10e6f     10 19 20 27 
10e73     2B 2E 30 32 | 	byte	$e9, $ee, $f1, $f3, $f7, $fb, $00, $08, $10, $19, $20, $27, $2b, $2e, $30, $32
10e77     33 33 33 31 
10e7b     30 31 32 36 
10e7f     3B 3F 42 42 
10e83     3C 32 26 1B | 	byte	$33, $33, $33, $31, $30, $31, $32, $36, $3b, $3f, $42, $42, $3c, $32, $26, $1b
10e87     11 0A 04 00 
10e8b     FE FC F7 EC 
10e8f     DA C8 BB AE 
10e93     A7 A2 A2 A3 | 	byte	$11, $0a, $04, $00, $fe, $fc, $f7, $ec, $da, $c8, $bb, $ae, $a7, $a2, $a2, $a3
10e97     A7 AA AF B4 
10e9b     B9 C0 C9 D4 
10e9f     DF E8 F2 F8 
10ea3     FD 01 02 01 | 	byte	$a7, $aa, $af, $b4, $b9, $c0, $c9, $d4, $df, $e8, $f2, $f8, $fd, $01, $02, $01
10ea7     FF FC FA F9 
10eab     FA FD 03 0A 
10eaf     12 1A 1F 24 
10eb3     28 2A 2C 2E | 	byte	$ff, $fc, $fa, $f9, $fa, $fd, $03, $0a, $12, $1a, $1f, $24, $28, $2a, $2c, $2e
10eb7     2E 2E 2E 2B 
10ebb     25 1A 10 07 
10ebf     00 FC F9 F8 
10ec3     F7 F9 FA FC | 	byte	$2e, $2e, $2e, $2b, $25, $1a, $10, $07, $00, $fc, $f9, $f8, $f7, $f9, $fa, $fc
10ec7     FE 00 02 04 
10ecb     07 0B 12 19 
10ecf     1F 24 28 2A 
10ed3     28 20 13 02 | 	byte	$fe, $00, $02, $04, $07, $0b, $12, $19, $1f, $24, $28, $2a, $28, $20, $13, $02
10ed7     F2 E5 DA D3 
10edb     D1 D1 D5 D7 
10edf     D9 DA DB DC 
10ee3     DE E1 E4 E7 | 	byte	$f2, $e5, $da, $d3, $d1, $d1, $d5, $d7, $d9, $da, $db, $dc, $de, $e1, $e4, $e7
10ee7     EB EE F1 F5 
10eeb     FB 01 09 11 
10eef     1A 21 25 29 
10ef3     2C 2D 2F 30 | 	byte	$eb, $ee, $f1, $f5, $fb, $01, $09, $11, $1a, $21, $25, $29, $2c, $2d, $2f, $30
10ef7     30 30 2F 2F 
10efb     31 33 36 3C 
10eff     3F 41 3F 37 
10f03     2E 21 17 0E | 	byte	$30, $30, $2f, $2f, $31, $33, $36, $3c, $3f, $41, $3f, $37, $2e, $21, $17, $0e
10f07     07 02 FF FD 
10f0b     F9 EE DF CD 
10f0f     BF B1 A9 A3 
10f13     A1 A2 A4 A8 | 	byte	$07, $02, $ff, $fd, $f9, $ee, $df, $cd, $bf, $b1, $a9, $a3, $a1, $a2, $a4, $a8
10f17     AC B2 B7 BD 
10f1b     C6 CE D9 E4 
10f1f     ED F5 FB 00 
10f23     04 06 05 03 | 	byte	$ac, $b2, $b7, $bd, $c6, $ce, $d9, $e4, $ed, $f5, $fb, $00, $04, $06, $05, $03
10f27     00 FE FD FE 
10f2b     01 07 0D 14 
10f2f     1A 20 23 26 
10f33     28 29 2B 2B | 	byte	$00, $fe, $fd, $fe, $01, $07, $0d, $14, $1a, $20, $23, $26, $28, $29, $2b, $2b
10f37     2B 28 20 15 
10f3b     09 01 FA F7 
10f3f     F6 F6 F7 F9 
10f43     FA FD FF 02 | 	byte	$2b, $28, $20, $15, $09, $01, $fa, $f7, $f6, $f6, $f7, $f9, $fa, $fd, $ff, $02
10f47     04 07 0A 0E 
10f4b     13 19 1F 25 
10f4f     2A 2D 2E 2C 
10f53     25 19 09 F9 | 	byte	$04, $07, $0a, $0e, $13, $19, $1f, $25, $2a, $2d, $2e, $2c, $25, $19, $09, $f9
10f57     EB E0 D9 D6 
10f5b     D7 D8 DA DA 
10f5f     DA DB DC DD 
10f63     DF E2 E6 E9 | 	byte	$eb, $e0, $d9, $d6, $d7, $d8, $da, $da, $da, $db, $dc, $dd, $df, $e2, $e6, $e9
10f67     ED F1 F6 FC 
10f6b     03 0C 13 1A 
10f6f     21 25 28 2A 
10f73     2B 2C 2D 2D | 	byte	$ed, $f1, $f6, $fc, $03, $0c, $13, $1a, $21, $25, $28, $2a, $2b, $2c, $2d, $2d
10f77     2D 2E 2F 31 
10f7b     34 38 3C 3F 
10f7f     3F 3C 34 27 
10f83     1C 13 0A 04 | 	byte	$2d, $2e, $2f, $31, $34, $38, $3c, $3f, $3f, $3c, $34, $27, $1c, $13, $0a, $04
10f87     00 FE FB F3 
10f8b     E3 D3 C2 B5 
10f8f     AB A4 A2 A1 
10f93     A3 A6 AB AF | 	byte	$00, $fe, $fb, $f3, $e3, $d3, $c2, $b5, $ab, $a4, $a2, $a1, $a3, $a6, $ab, $af
10f97     B5 BC C4 CD 
10f9b     D6 E0 E9 F1 
10f9f     F8 FD 02 05 
10fa3     07 08 06 04 | 	byte	$b5, $bc, $c4, $cd, $d6, $e0, $e9, $f1, $f8, $fd, $02, $05, $07, $08, $06, $04
10fa7     02 02 03 06 
10fab     0A 10 16 1A 
10faf     1F 22 24 26 
10fb3     27 28 27 23 | 	byte	$02, $02, $03, $06, $0a, $10, $16, $1a, $1f, $22, $24, $26, $27, $28, $27, $23
10fb7     1B 0F 03 FA 
10fbb     F4 F2 F2 F3 
10fbf     F5 F8 FA FD 
10fc3     FF 02 05 07 | 	byte	$1b, $0f, $03, $fa, $f4, $f2, $f2, $f3, $f5, $f8, $fa, $fd, $ff, $02, $05, $07
10fc7     0B 0F 14 19 
10fcb     1E 24 29 2C 
10fcf     2F 2F 2D 28 
10fd3     1E 10 02 F3 | 	byte	$0b, $0f, $14, $19, $1e, $24, $29, $2c, $2f, $2f, $2d, $28, $1e, $10, $02, $f3
10fd7     E8 E1 DE DD 
10fdb     DD DC DB DA 
10fdf     DA DA DC DD 
10fe3     E0 E4 E8 ED | 	byte	$e8, $e1, $de, $dd, $dd, $dc, $db, $da, $da, $da, $dc, $dd, $e0, $e4, $e8, $ed
10fe7     F1 F7 FD 04 
10feb     0C 13 19 1E 
10fef     22 25 27 28 
10ff3     29 2A 2B 2B | 	byte	$f1, $f7, $fd, $04, $0c, $13, $19, $1e, $22, $25, $27, $28, $29, $2a, $2b, $2b
10ff7     2D 2F 31 35 
10ffb     37 3B 3D 3B 
10fff     37 2D 23 18 
11003     0F 07 02 FF | 	byte	$2d, $2f, $31, $35, $37, $3b, $3d, $3b, $37, $2d, $23, $18, $0f, $07, $02, $ff
11007     FC F6 E9 DA 
1100b     C9 B9 AE A7 
1100f     A3 A1 A2 A5 
11013     A8 AE B3 BA | 	byte	$fc, $f6, $e9, $da, $c9, $b9, $ae, $a7, $a3, $a1, $a2, $a5, $a8, $ae, $b3, $ba
11017     C1 C9 D3 DC 
1101b     E4 EC F4 FA 
1101f     FF 03 06 09 
11023     0A 0A 0A 09 | 	byte	$c1, $c9, $d3, $dc, $e4, $ec, $f4, $fa, $ff, $03, $06, $09, $0a, $0a, $0a, $09
11027     09 09 0C 0F 
1102b     12 17 1B 1E 
1102f     21 22 24 25 
11033     24 1F 16 0A | 	byte	$09, $09, $0c, $0f, $12, $17, $1b, $1e, $21, $22, $24, $25, $24, $1f, $16, $0a
11037     FF F6 F0 EE 
1103b     EE F0 F2 F6 
1103f     F8 FC FE 01 
11043     04 07 0C 0F | 	byte	$ff, $f6, $f0, $ee, $ee, $f0, $f2, $f6, $f8, $fc, $fe, $01, $04, $07, $0c, $0f
11047     14 19 1D 22 
1104b     27 2B 2E 30 
1104f     31 2E 2B 24 
11053     17 0A FC F1 | 	byte	$14, $19, $1d, $22, $27, $2b, $2e, $30, $31, $2e, $2b, $24, $17, $0a, $fc, $f1
11057     EA E6 E3 E1 
1105b     DF DC DB DA 
1105f     DA DB DD DF 
11063     E4 E7 ED F2 | 	byte	$ea, $e6, $e3, $e1, $df, $dc, $db, $da, $da, $db, $dd, $df, $e4, $e7, $ed, $f2
11067     F9 00 06 0D 
1106b     14 19 1D 21 
1106f     23 25 26 27 
11073     28 29 2A 2C | 	byte	$f9, $00, $06, $0d, $14, $19, $1d, $21, $23, $25, $26, $27, $28, $29, $2a, $2c
11077     2F 32 35 38 
1107b     3A 3B 39 33 
1107f     29 20 15 0C 
11083     06 02 FF F9 | 	byte	$2f, $32, $35, $38, $3a, $3b, $39, $33, $29, $20, $15, $0c, $06, $02, $ff, $f9
11087     EE E0 CE BF 
1108b     B2 A8 A3 A1 
1108f     A1 A3 A7 AB 
11093     B1 B7 BF C7 | 	byte	$ee, $e0, $ce, $bf, $b2, $a8, $a3, $a1, $a1, $a3, $a7, $ab, $b1, $b7, $bf, $c7
11097     CF D7 E1 E8 
1109b     EF F6 FC 01 
1109f     04 07 0A 0C 
110a3     0E 0F 0E 0E | 	byte	$cf, $d7, $e1, $e8, $ef, $f6, $fc, $01, $04, $07, $0a, $0c, $0e, $0f, $0e, $0e
110a7     0E 10 12 15 
110ab     18 1A 1D 1F 
110af     20 21 1F 19 
110b3     10 04 F9 F1 | 	byte	$0e, $10, $12, $15, $18, $1a, $1d, $1f, $20, $21, $1f, $19, $10, $04, $f9, $f1
110b7     EC EA EA ED 
110bb     F0 F4 F8 FB 
110bf     FF 02 05 08 
110c3     0C 10 14 19 | 	byte	$ec, $ea, $ea, $ed, $f0, $f4, $f8, $fb, $ff, $02, $05, $08, $0c, $10, $14, $19
110c7     1D 22 26 29 
110cb     2D 2F 30 31 
110cf     2F 2C 27 1D 
110d3     11 05 F9 F1 | 	byte	$1d, $22, $26, $29, $2d, $2f, $30, $31, $2f, $2c, $27, $1d, $11, $05, $f9, $f1
110d7     EC E8 E4 E0 
110db     DD DA D9 D9 
110df     DA DC DF E4 
110e3     E9 EE F4 FA | 	byte	$ec, $e8, $e4, $e0, $dd, $da, $d9, $d9, $da, $dc, $df, $e4, $e9, $ee, $f4, $fa
110e7     01 07 0E 13 
110eb     17 1C 1F 21 
110ef     23 24 26 27 
110f3     29 2B 2D 2F | 	byte	$01, $07, $0e, $13, $17, $1c, $1f, $21, $23, $24, $26, $27, $29, $2b, $2d, $2f
110f7     32 35 37 38 
110fb     39 35 2E 25 
110ff     1B 11 0A 05 
11103     01 FC F3 E6 | 	byte	$32, $35, $37, $38, $39, $35, $2e, $25, $1b, $11, $0a, $05, $01, $fc, $f3, $e6
11107     D4 C4 B5 AB 
1110b     A4 A1 A0 A2 
1110f     A5 AA AF B6 
11113     BD C5 CC D4 | 	byte	$d4, $c4, $b5, $ab, $a4, $a1, $a0, $a2, $a5, $aa, $af, $b6, $bd, $c5, $cc, $d4
11117     DD E4 EB F2 
1111b     F8 FD 01 04 
1111f     08 0A 0E 10 
11123     13 13 14 14 | 	byte	$dd, $e4, $eb, $f2, $f8, $fd, $01, $04, $08, $0a, $0e, $10, $13, $13, $14, $14
11127     14 15 16 18 
1112b     1A 1C 1D 1D 
1112f     1B 14 09 FE 
11133     F3 EC E8 E7 | 	byte	$14, $15, $16, $18, $1a, $1c, $1d, $1d, $1b, $14, $09, $fe, $f3, $ec, $e8, $e7
11137     E7 EA EE F2 
1113b     F7 FB FE 02 
1113f     06 09 0D 11 
11143     15 19 1E 22 | 	byte	$e7, $ea, $ee, $f2, $f7, $fb, $fe, $02, $06, $09, $0d, $11, $15, $19, $1e, $22
11147     26 2A 2C 2F 
1114b     31 31 32 30 
1114f     2E 2A 22 17 
11153     0C 01 F8 F2 | 	byte	$26, $2a, $2c, $2f, $31, $31, $32, $30, $2e, $2a, $22, $17, $0c, $01, $f8, $f2
11157     EC E6 E1 DD 
1115b     D9 D8 D8 DA 
1115f     DC E0 E5 EA 
11163     EF F5 FC 02 | 	byte	$ec, $e6, $e1, $dd, $d9, $d8, $d8, $da, $dc, $e0, $e5, $ea, $ef, $f5, $fc, $02
11167     08 0E 12 16 
1116b     1A 1D 1F 21 
1116f     23 25 26 28 
11173     2A 2C 2F 32 | 	byte	$08, $0e, $12, $16, $1a, $1d, $1f, $21, $23, $25, $26, $28, $2a, $2c, $2f, $32
11177     34 36 37 35 
1117b     30 29 1F 16 
1117f     0E 08 03 FD 
11183     F5 E9 D8 C9 | 	byte	$34, $36, $37, $35, $30, $29, $1f, $16, $0e, $08, $03, $fd, $f5, $e9, $d8, $c9
11187     B9 AE A5 A0 
1118b     9F A0 A3 A8 
1118f     AE B4 BB C2 
11193     CA D1 D9 E1 | 	byte	$b9, $ae, $a5, $a0, $9f, $a0, $a3, $a8, $ae, $b4, $bb, $c2, $ca, $d1, $d9, $e1
11197     E8 EE F4 F9 
1119b     FE 02 05 09 
1119f     0D 10 13 16 
111a3     17 19 18 18 | 	byte	$e8, $ee, $f4, $f9, $fe, $02, $05, $09, $0d, $10, $13, $16, $17, $19, $18, $18
111a7     18 18 18 19 
111ab     1A 19 15 0E 
111af     03 F9 EF E8 
111b3     E4 E3 E5 E8 | 	byte	$18, $18, $18, $19, $1a, $19, $15, $0e, $03, $f9, $ef, $e8, $e4, $e3, $e5, $e8
111b7     EB F0 F4 F9 
111bb     FD 01 05 0A 
111bf     0D 12 15 19 
111c3     1D 21 25 29 | 	byte	$eb, $f0, $f4, $f9, $fd, $01, $05, $0a, $0d, $12, $15, $19, $1d, $21, $25, $29
111c7     2C 2E 30 31 
111cb     32 33 32 30 
111cf     2D 27 1F 14 
111d3     0B 01 F9 F2 | 	byte	$2c, $2e, $30, $31, $32, $33, $32, $30, $2d, $27, $1f, $14, $0b, $01, $f9, $f2
111d7     EA E3 DD D9 
111db     D8 D8 DA DD 
111df     E1 E5 EA EF 
111e3     F6 FC 02 08 | 	byte	$ea, $e3, $dd, $d9, $d8, $d8, $da, $dd, $e1, $e5, $ea, $ef, $f6, $fc, $02, $08
111e7     0D 11 14 18 
111eb     1A 1D 20 22 
111ef     24 26 27 29 
111f3     2B 2E 30 31 | 	byte	$0d, $11, $14, $18, $1a, $1d, $20, $22, $24, $26, $27, $29, $2b, $2e, $30, $31
111f7     33 33 32 2C 
111fb     24 1C 15 0E 
111ff     07 01 F9 EE 
11203     DF D0 C1 B4 | 	byte	$33, $33, $32, $2c, $24, $1c, $15, $0e, $07, $01, $f9, $ee, $df, $d0, $c1, $b4
11207     AA A4 A1 A0 
1120b     A2 A6 AB B1 
1120f     B8 BE C5 CC 
11213     D3 DB E3 E9 | 	byte	$aa, $a4, $a1, $a0, $a2, $a6, $ab, $b1, $b8, $be, $c5, $cc, $d3, $db, $e3, $e9
11217     EF F5 F9 FD 
1121b     02 06 0A 0E 
1121f     11 14 17 1A 
11223     1B 1C 1B 1B | 	byte	$ef, $f5, $f9, $fd, $02, $06, $0a, $0e, $11, $14, $17, $1a, $1b, $1c, $1b, $1b
11227     1A 19 19 17 
1122b     12 0A 01 F6 
1122f     ED E6 E2 E1 
11233     E2 E5 E9 ED | 	byte	$1a, $19, $19, $17, $12, $0a, $01, $f6, $ed, $e6, $e2, $e1, $e2, $e5, $e9, $ed
11237     F2 F6 FB FF 
1123b     04 08 0D 11 
1123f     15 18 1C 20 
11243     23 27 2A 2D | 	byte	$f2, $f6, $fb, $ff, $04, $08, $0d, $11, $15, $18, $1c, $20, $23, $27, $2a, $2d
11247     2F 30 32 33 
1124b     33 33 32 30 
1124f     2C 26 1C 12 
11253     09 00 F7 EE | 	byte	$2f, $30, $32, $33, $33, $33, $32, $30, $2c, $26, $1c, $12, $09, $00, $f7, $ee
11257     E6 E0 DB D9 
1125b     DA DB DE E2 
1125f     E6 EA EF F4 
11263     FB 00 05 0A | 	byte	$e6, $e0, $db, $d9, $da, $db, $de, $e2, $e6, $ea, $ef, $f4, $fb, $00, $05, $0a
11267     0F 12 15 18 
1126b     1B 1E 20 22 
1126f     24 25 28 2A 
11273     2C 2E 30 31 | 	byte	$0f, $12, $15, $18, $1b, $1e, $20, $22, $24, $25, $28, $2a, $2c, $2e, $30, $31
11277     31 2E 29 22 
1127b     1B 14 0D 06 
1127f     FE F3 E7 D6 
11283     C8 B9 AE A6 | 	byte	$31, $2e, $29, $22, $1b, $14, $0d, $06, $fe, $f3, $e7, $d6, $c8, $b9, $ae, $a6
11287     A1 9F A0 A4 
1128b     A8 AE B4 BB 
1128f     C2 C8 D0 D7 
11293     DF E5 EB F1 | 	byte	$a1, $9f, $a0, $a4, $a8, $ae, $b4, $bb, $c2, $c8, $d0, $d7, $df, $e5, $eb, $f1
11297     F6 FB FF 03 
1129b     08 0C 10 13 
1129f     16 19 1D 1F 
112a3     20 20 1F 1D | 	byte	$f6, $fb, $ff, $03, $08, $0c, $10, $13, $16, $19, $1d, $1f, $20, $20, $1f, $1d
112a7     1B 17 11 08 
112ab     FC F3 EA E4 
112af     E0 DF E0 E3 
112b3     E6 EB F1 F5 | 	byte	$1b, $17, $11, $08, $fc, $f3, $ea, $e4, $e0, $df, $e0, $e3, $e6, $eb, $f1, $f5
112b7     FA FF 04 09 
112bb     0D 12 16 19 
112bf     1C 20 24 27 
112c3     2B 2E 30 32 | 	byte	$fa, $ff, $04, $09, $0d, $12, $16, $19, $1c, $20, $24, $27, $2b, $2e, $30, $32
112c7     32 34 36 36 
112cb     37 35 33 2F 
112cf     29 21 18 0F 
112d3     04 FA F0 E7 | 	byte	$32, $34, $36, $36, $37, $35, $33, $2f, $29, $21, $18, $0f, $04, $fa, $f0, $e7
112d7     E0 DC DA DA 
112db     DC DF E2 E5 
112df     EA EF F5 FA 
112e3     00 05 08 0D | 	byte	$e0, $dc, $da, $da, $dc, $df, $e2, $e5, $ea, $ef, $f5, $fa, $00, $05, $08, $0d
112e7     10 14 17 1A 
112eb     1D 1F 21 23 
112ef     24 27 29 2B 
112f3     2D 2E 2F 2E | 	byte	$10, $14, $17, $1a, $1d, $1f, $21, $23, $24, $27, $29, $2b, $2d, $2e, $2f, $2e
112f7     2A 25 1E 18 
112fb     10 09 00 F6 
112ff     E7 D9 C9 BA 
11303     AF A6 A1 9F | 	byte	$2a, $25, $1e, $18, $10, $09, $00, $f6, $e7, $d9, $c9, $ba, $af, $a6, $a1, $9f
11307     A0 A2 A7 AD 
1130b     B3 BA C0 C6 
1130f     CE D5 DD E3 
11313     E9 EF F4 F9 | 	byte	$a0, $a2, $a7, $ad, $b3, $ba, $c0, $c6, $ce, $d5, $dd, $e3, $e9, $ef, $f4, $f9
11317     FE 03 07 0B 
1131b     0F 12 15 18 
1131f     1B 1F 21 22 
11323     22 21 1D 17 | 	byte	$fe, $03, $07, $0b, $0f, $12, $15, $18, $1b, $1f, $21, $22, $22, $21, $1d, $17
11327     0E 02 F8 EE 
1132b     E5 E0 DC DC 
1132f     DE E0 E5 EA 
11333     EF F5 FA FF | 	byte	$0e, $02, $f8, $ee, $e5, $e0, $dc, $dc, $de, $e0, $e5, $ea, $ef, $f5, $fa, $ff
11337     04 0A 0F 13 
1133b     17 1A 1E 21 
1133f     24 27 2A 2D 
11343     2F 31 32 34 | 	byte	$04, $0a, $0f, $13, $17, $1a, $1e, $21, $24, $27, $2a, $2d, $2f, $31, $32, $34
11347     36 37 38 38 
1134b     36 34 30 2A 
1134f     23 1A 0F 04 
11353     F9 EF E6 E0 | 	byte	$36, $37, $38, $38, $36, $34, $30, $2a, $23, $1a, $0f, $04, $f9, $ef, $e6, $e0
11357     DD DC DC DE 
1135b     E1 E3 E7 EC 
1135f     F1 F7 FC 01 
11363     05 09 0D 10 | 	byte	$dd, $dc, $dc, $de, $e1, $e3, $e7, $ec, $f1, $f7, $fc, $01, $05, $09, $0d, $10
11367     14 17 1A 1C 
1136b     1E 20 22 24 
1136f     27 29 2A 2C 
11373     2C 2D 2B 26 | 	byte	$14, $17, $1a, $1c, $1e, $20, $22, $24, $27, $29, $2a, $2c, $2c, $2d, $2b, $26
11377     20 19 11 0A 
1137b     00 F5 E8 D7 
1137f     C8 BA AD A6 
11383     A0 9E 9F A3 | 	byte	$20, $19, $11, $0a, $00, $f5, $e8, $d7, $c8, $ba, $ad, $a6, $a0, $9e, $9f, $a3
11387     A7 AE B3 BA 
1138b     C1 C7 CE D6 
1138f     DC E3 E9 EF 
11393     F4 F9 FE 03 | 	byte	$a7, $ae, $b3, $ba, $c1, $c7, $ce, $d6, $dc, $e3, $e9, $ef, $f4, $f9, $fe, $03
11397     08 0C 0F 13 
1139b     15 18 1B 1E 
1139f     21 23 24 24 
113a3     1F 16 0B FF | 	byte	$08, $0c, $0f, $13, $15, $18, $1b, $1e, $21, $23, $24, $24, $1f, $16, $0b, $ff
113a7     F3 E9 E2 DD 
113ab     DB DB DD E1 
113af     E6 EB F0 F5 
113b3     FB 00 06 0B | 	byte	$f3, $e9, $e2, $dd, $db, $db, $dd, $e1, $e6, $eb, $f0, $f5, $fb, $00, $06, $0b
113b7     10 14 17 1B 
113bb     1E 20 24 27 
113bf     29 2C 2E 30 
113c3     32 34 36 37 | 	byte	$10, $14, $17, $1b, $1e, $20, $24, $27, $29, $2c, $2e, $30, $32, $34, $36, $37
113c7     38 38 37 36 
113cb     33 2F 2A 22 
113cf     19 0D 01 F6 
113d3     ED E5 E1 DE | 	byte	$38, $38, $37, $36, $33, $2f, $2a, $22, $19, $0d, $01, $f6, $ed, $e5, $e1, $de
113d7     DD DE E0 E2 
113db     E5 E9 EF F3 
113df     F8 FD 01 06 
113e3     0A 0E 12 15 | 	byte	$dd, $de, $e0, $e2, $e5, $e9, $ef, $f3, $f8, $fd, $01, $06, $0a, $0e, $12, $15
113e7     17 19 1B 1D 
113eb     1F 21 23 25 
113ef     27 29 2A 2A 
113f3     29 26 20 1A | 	byte	$17, $19, $1b, $1d, $1f, $21, $23, $25, $27, $29, $2a, $2a, $29, $26, $20, $1a
113f7     11 09 FF F2 
113fb     E3 D3 C5 B6 
113ff     AB A4 A0 9F 
11403     A0 A4 A9 AE | 	byte	$11, $09, $ff, $f2, $e3, $d3, $c5, $b6, $ab, $a4, $a0, $9f, $a0, $a4, $a9, $ae
11407     B4 BA C1 C7 
1140b     CF D5 DC E3 
1140f     E8 EE F3 F9 
11413     FE 03 07 0C | 	byte	$b4, $ba, $c1, $c7, $cf, $d5, $dc, $e3, $e8, $ee, $f3, $f9, $fe, $03, $07, $0c
11417     0F 12 15 18 
1141b     1B 1E 21 23 
1141f     24 21 1B 10 
11423     05 F9 EE E6 | 	byte	$0f, $12, $15, $18, $1b, $1e, $21, $23, $24, $21, $1b, $10, $05, $f9, $ee, $e6
11427     E0 DC DB DC 
1142b     DE E2 E7 EC 
1142f     F2 F7 FD 03 
11433     08 0D 12 15 | 	byte	$e0, $dc, $db, $dc, $de, $e2, $e7, $ec, $f2, $f7, $fd, $03, $08, $0d, $12, $15
11437     19 1C 1F 22 
1143b     25 28 2A 2D 
1143f     2F 31 33 35 
11443     36 38 39 39 | 	byte	$19, $1c, $1f, $22, $25, $28, $2a, $2d, $2f, $31, $33, $35, $36, $38, $39, $39
11447     38 37 35 33 
1144b     2E 28 20 15 
1144f     09 FE F4 EB 
11453     E5 E1 DF DF | 	byte	$38, $37, $35, $33, $2e, $28, $20, $15, $09, $fe, $f4, $eb, $e5, $e1, $df, $df
11457     DF E1 E4 E8 
1145b     ED F2 F6 FB 
1145f     FF 04 08 0C 
11463     10 13 15 17 | 	byte	$df, $e1, $e4, $e8, $ed, $f2, $f6, $fb, $ff, $04, $08, $0c, $10, $13, $15, $17
11467     19 1B 1D 20 
1146b     22 24 26 27 
1146f     29 2A 29 25 
11473     20 19 10 07 | 	byte	$19, $1b, $1d, $20, $22, $24, $26, $27, $29, $2a, $29, $25, $20, $19, $10, $07
11477     FC EF E0 CF 
1147b     C0 B4 A9 A4 
1147f     A0 A0 A2 A6 
11483     AB B1 B7 BD | 	byte	$fc, $ef, $e0, $cf, $c0, $b4, $a9, $a4, $a0, $a0, $a2, $a6, $ab, $b1, $b7, $bd
11487     C3 C9 D0 D7 
1148b     DE E4 EA F0 
1148f     F5 FB 00 04 
11493     08 0C 0F 11 | 	byte	$c3, $c9, $d0, $d7, $de, $e4, $ea, $f0, $f5, $fb, $00, $04, $08, $0c, $0f, $11
11497     14 17 1A 1D 
1149b     1F 21 1F 1A 
1149f     13 09 FE F3 
114a3     EA E3 DE DB | 	byte	$14, $17, $1a, $1d, $1f, $21, $1f, $1a, $13, $09, $fe, $f3, $ea, $e3, $de, $db
114a7     DB DD E0 E5 
114ab     E9 EF F4 FA 
114af     00 05 0B 10 
114b3     14 17 1A 1E | 	byte	$db, $dd, $e0, $e5, $e9, $ef, $f4, $fa, $00, $05, $0b, $10, $14, $17, $1a, $1e
114b7     20 23 26 29 
114bb     2B 2D 30 32 
114bf     34 36 38 39 
114c3     39 3A 39 38 | 	byte	$20, $23, $26, $29, $2b, $2d, $30, $32, $34, $36, $38, $39, $39, $3a, $39, $38
114c7     36 34 32 2D 
114cb     25 1C 11 06 
114cf     FA F1 EA E4 
114d3     E1 E0 E0 E1 | 	byte	$36, $34, $32, $2d, $25, $1c, $11, $06, $fa, $f1, $ea, $e4, $e1, $e0, $e0, $e1
114d7     E4 E7 EB F0 
114db     F4 F9 FE 02 
114df     06 0A 0E 10 
114e3     13 15 17 19 | 	byte	$e4, $e7, $eb, $f0, $f4, $f9, $fe, $02, $06, $0a, $0e, $10, $13, $15, $17, $19
114e7     1B 1D 20 21 
114eb     23 26 27 28 
114ef     27 24 1D 16 
114f3     0D 04 F8 EA | 	byte	$1b, $1d, $20, $21, $23, $26, $27, $28, $27, $24, $1d, $16, $0d, $04, $f8, $ea
114f7     DB CB BD B1 
114fb     A8 A3 A0 A1 
114ff     A3 A7 AB B1 
11503     B7 BD C3 CA | 	byte	$db, $cb, $bd, $b1, $a8, $a3, $a0, $a1, $a3, $a7, $ab, $b1, $b7, $bd, $c3, $ca
11507     D1 D7 DE E4 
1150b     EA F0 F7 FC 
1150f     01 05 08 0C 
11513     0F 11 14 17 | 	byte	$d1, $d7, $de, $e4, $ea, $f0, $f7, $fc, $01, $05, $08, $0c, $0f, $11, $14, $17
11517     1A 1C 1E 1D 
1151b     19 12 0A 01 
1151f     F8 F0 E8 E3 
11523     DF DD DD DF | 	byte	$1a, $1c, $1e, $1d, $19, $12, $0a, $01, $f8, $f0, $e8, $e3, $df, $dd, $dd, $df
11527     E2 E6 EB F0 
1152b     F7 FD 02 08 
1152f     0D 12 15 19 
11533     1C 1E 21 24 | 	byte	$e2, $e6, $eb, $f0, $f7, $fd, $02, $08, $0d, $12, $15, $19, $1c, $1e, $21, $24
11537     27 29 2B 2E 
1153b     30 33 35 37 
1153f     38 39 3A 3A 
11543     39 39 37 35 | 	byte	$27, $29, $2b, $2e, $30, $33, $35, $37, $38, $39, $3a, $3a, $39, $39, $37, $35
11547     34 31 2C 25 
1154b     1A 0F 03 F9 
1154f     EF E9 E4 E1 
11553     E0 E1 E3 E6 | 	byte	$34, $31, $2c, $25, $1a, $0f, $03, $f9, $ef, $e9, $e4, $e1, $e0, $e1, $e3, $e6
11557     EA EE F2 F7 
1155b     FC 01 05 08 
1155f     0C 0F 12 14 
11563     16 18 1A 1C | 	byte	$ea, $ee, $f2, $f7, $fc, $01, $05, $08, $0c, $0f, $12, $14, $16, $18, $1a, $1c
11567     1E 20 22 25 
1156b     27 28 27 24 
1156f     1E 15 0C 02 
11573     F6 E9 D9 CB | 	byte	$1e, $20, $22, $25, $27, $28, $27, $24, $1e, $15, $0c, $02, $f6, $e9, $d9, $cb
11577     BC B1 A8 A3 
1157b     A2 A2 A4 A7 
1157f     AC B1 B6 BC 
11583     C2 C9 CF D6 | 	byte	$bc, $b1, $a8, $a3, $a2, $a2, $a4, $a7, $ac, $b1, $b6, $bc, $c2, $c9, $cf, $d6
11587     DC E2 E9 EF 
1158b     F6 FC 00 04 
1158f     08 0B 0E 10 
11593     13 15 18 1A | 	byte	$dc, $e2, $e9, $ef, $f6, $fc, $00, $04, $08, $0b, $0e, $10, $13, $15, $18, $1a
11597     1A 18 12 0B 
1159b     04 FC F5 EE 
1159f     E9 E5 E2 E0 
115a3     E0 E1 E4 E8 | 	byte	$1a, $18, $12, $0b, $04, $fc, $f5, $ee, $e9, $e5, $e2, $e0, $e0, $e1, $e4, $e8
115a7     EC F1 F7 FC 
115ab     03 08 0D 12 
115af     16 19 1C 1E 
115b3     21 23 26 28 | 	byte	$ec, $f1, $f7, $fc, $03, $08, $0d, $12, $16, $19, $1c, $1e, $21, $23, $26, $28
115b7     2B 2D 2F 32 
115bb     35 36 38 39 
115bf     3A 39 39 39 
115c3     37 36 34 33 | 	byte	$2b, $2d, $2f, $32, $35, $36, $38, $39, $3a, $39, $39, $39, $37, $36, $34, $33
115c7     31 2D 26 1C 
115cb     11 06 FC F3 
115cf     EC E7 E4 E3 
115d3     E3 E4 E7 EA | 	byte	$31, $2d, $26, $1c, $11, $06, $fc, $f3, $ec, $e7, $e4, $e3, $e3, $e4, $e7, $ea
115d7     ED F2 F7 FB 
115db     00 03 07 0A 
115df     0C 0F 11 13 
115e3     15 17 19 1C | 	byte	$ed, $f2, $f7, $fb, $00, $03, $07, $0a, $0c, $0f, $11, $13, $15, $17, $19, $1c
115e7     1D 20 22 24 
115eb     25 23 1E 17 
115ef     0F 05 FB EF 
115f3     E2 D4 C6 BB | 	byte	$1d, $20, $22, $24, $25, $23, $1e, $17, $0f, $05, $fb, $ef, $e2, $d4, $c6, $bb
115f7     B2 AB A7 A6 
115fb     A6 A7 AB AF 
115ff     B4 B8 BD C4 
11603     C9 D0 D6 DC | 	byte	$b2, $ab, $a7, $a6, $a6, $a7, $ab, $af, $b4, $b8, $bd, $c4, $c9, $d0, $d6, $dc
11607     E3 E9 F0 F5 
1160b     FA 00 03 07 
1160f     0A 0D 0F 12 
11613     15 16 16 14 | 	byte	$e3, $e9, $f0, $f5, $fa, $00, $03, $07, $0a, $0d, $0f, $12, $15, $16, $16, $14
11617     0F 08 02 FC 
1161b     F6 F2 EE EB 
1161f     E8 E6 E5 E5 
11623     E6 E9 EC F0 | 	byte	$0f, $08, $02, $fc, $f6, $f2, $ee, $eb, $e8, $e6, $e5, $e5, $e6, $e9, $ec, $f0
11627     F5 FA 00 05 
1162b     0A 0F 12 16 
1162f     19 1C 1E 21 
11633     23 26 29 2C | 	byte	$f5, $fa, $00, $05, $0a, $0f, $12, $16, $19, $1c, $1e, $21, $23, $26, $29, $2c
11637     2E 31 33 35 
1163b     37 38 39 3A 
1163f     3A 3A 3A 38 
11643     38 36 35 33 | 	byte	$2e, $31, $33, $35, $37, $38, $39, $3a, $3a, $3a, $3a, $38, $38, $36, $35, $33
11647     30 2A 22 18 
1164b     0E 03 FB F2 
1164f     ED E8 E6 E5 
11653     E5 E7 EA ED | 	byte	$30, $2a, $22, $18, $0e, $03, $fb, $f2, $ed, $e8, $e6, $e5, $e5, $e7, $ea, $ed
11657     F1 F5 F9 FD 
1165b     00 04 07 0A 
1165f     0C 0D 10 12 
11663     15 17 19 1C | 	byte	$f1, $f5, $f9, $fd, $00, $04, $07, $0a, $0c, $0d, $10, $12, $15, $17, $19, $1c
11667     1E 21 23 22 
1166b     20 1A 14 0C 
1166f     03 F8 EC DF 
11673     D2 C5 BA B2 | 	byte	$1e, $21, $23, $22, $20, $1a, $14, $0c, $03, $f8, $ec, $df, $d2, $c5, $ba, $b2
11677     AD A9 A8 A8 
1167b     A9 AC B0 B4 
1167f     B9 BE C4 CA 
11683     D0 D8 DE E5 | 	byte	$ad, $a9, $a8, $a8, $a9, $ac, $b0, $b4, $b9, $be, $c4, $ca, $d0, $d8, $de, $e5
11687     EB F1 F6 FB 
1168b     00 03 07 0A 
1168f     0C 0F 11 13 
11693     13 10 0C 06 | 	byte	$eb, $f1, $f6, $fb, $00, $03, $07, $0a, $0c, $0f, $11, $13, $13, $10, $0c, $06
11697     00 FA F5 F1 
1169b     EF ED EC EA 
1169f     E9 E9 EA EC 
116a3     EE F1 F6 FA | 	byte	$00, $fa, $f5, $f1, $ef, $ed, $ec, $ea, $e9, $e9, $ea, $ec, $ee, $f1, $f6, $fa
116a7     FF 04 08 0C 
116ab     10 14 17 1A 
116af     1C 1F 21 24 
116b3     27 2A 2C 2F | 	byte	$ff, $04, $08, $0c, $10, $14, $17, $1a, $1c, $1f, $21, $24, $27, $2a, $2c, $2f
116b7     32 33 35 37 
116bb     38 39 39 39 
116bf     39 38 37 37 
116c3     36 36 34 32 | 	byte	$32, $33, $35, $37, $38, $39, $39, $39, $39, $38, $37, $37, $36, $36, $34, $32
116c7     2D 26 1D 13 
116cb     08 FF F6 EF 
116cf     EA E7 E6 E6 
116d3     E8 EA ED F1 | 	byte	$2d, $26, $1d, $13, $08, $ff, $f6, $ef, $ea, $e7, $e6, $e6, $e8, $ea, $ed, $f1
116d7     F4 F8 FC FF 
116db     02 05 07 09 
116df     0B 0E 10 13 
116e3     15 18 1B 1D | 	byte	$f4, $f8, $fc, $ff, $02, $05, $07, $09, $0b, $0e, $10, $13, $15, $18, $1b, $1d
116e7     1F 20 1F 1C 
116eb     17 0F 08 FF 
116ef     F4 E8 DB CF 
116f3     C2 B8 B1 AC | 	byte	$1f, $20, $1f, $1c, $17, $0f, $08, $ff, $f4, $e8, $db, $cf, $c2, $b8, $b1, $ac
116f7     A9 A7 A8 AA 
116fb     AD B0 B5 BA 
116ff     BF C5 CB D2 
11703     D9 DF E6 EC | 	byte	$a9, $a7, $a8, $aa, $ad, $b0, $b5, $ba, $bf, $c5, $cb, $d2, $d9, $df, $e6, $ec
11707     F1 F7 FB 00 
1170b     04 06 0A 0C 
1170f     0E 10 10 0E 
11713     0A 05 FF F9 | 	byte	$f1, $f7, $fb, $00, $04, $06, $0a, $0c, $0e, $10, $10, $0e, $0a, $05, $ff, $f9
11717     F4 F0 EE ED 
1171b     EC EC ED ED 
1171f     EE EF F2 F5 
11723     F8 FC 00 04 | 	byte	$f4, $f0, $ee, $ed, $ec, $ec, $ed, $ed, $ee, $ef, $f2, $f5, $f8, $fc, $00, $04
11727     08 0C 0F 13 
1172b     16 19 1B 1E 
1172f     1F 22 25 27 
11733     2A 2D 2F 31 | 	byte	$08, $0c, $0f, $13, $16, $19, $1b, $1e, $1f, $22, $25, $27, $2a, $2d, $2f, $31
11737     34 35 36 37 
1173b     38 38 38 37 
1173f     38 37 37 37 
11743     36 35 33 2F | 	byte	$34, $35, $36, $37, $38, $38, $38, $37, $38, $37, $37, $37, $36, $35, $33, $2f
11747     2A 21 18 0E 
1174b     05 FB F4 EE 
1174f     E9 E8 E7 E9 
11753     EB ED F0 F3 | 	byte	$2a, $21, $18, $0e, $05, $fb, $f4, $ee, $e9, $e8, $e7, $e9, $eb, $ed, $f0, $f3
11757     F7 F9 FD 00 
1175b     02 04 07 08 
1175f     0B 0D 10 14 
11763     17 1A 1C 1D | 	byte	$f7, $f9, $fd, $00, $02, $04, $07, $08, $0b, $0d, $10, $14, $17, $1a, $1c, $1d
11767     1E 1D 1A 15 
1176b     0E 06 FD F2 
1176f     E7 DA CE C2 
11773     BA B3 AD AA | 	byte	$1e, $1d, $1a, $15, $0e, $06, $fd, $f2, $e7, $da, $ce, $c2, $ba, $b3, $ad, $aa
11777     A8 A9 AA AD 
1177b     B1 B5 B9 BE 
1177f     C5 CA D2 D9 
11783     DF E6 EC F1 | 	byte	$a8, $a9, $aa, $ad, $b1, $b5, $b9, $be, $c5, $ca, $d2, $d9, $df, $e6, $ec, $f1
11787     F7 FB FF 03 
1178b     06 09 0B 0D 
1178f     0D 0C 08 04 
11793     FF F9 F4 F0 | 	byte	$f7, $fb, $ff, $03, $06, $09, $0b, $0d, $0d, $0c, $08, $04, $ff, $f9, $f4, $f0
11797     EE EC EC EC 
1179b     ED EE F0 F1 
1179f     F3 F6 F9 FC 
117a3     FF 02 06 09 | 	byte	$ee, $ec, $ec, $ec, $ed, $ee, $f0, $f1, $f3, $f6, $f9, $fc, $ff, $02, $06, $09
117a7     0D 10 13 16 
117ab     18 1B 1D 1F 
117af     21 24 27 2A 
117b3     2D 2F 32 33 | 	byte	$0d, $10, $13, $16, $18, $1b, $1d, $1f, $21, $24, $27, $2a, $2d, $2f, $32, $33
117b7     34 35 37 37 
117bb     37 37 37 37 
117bf     37 37 37 36 
117c3     35 33 31 2C | 	byte	$34, $35, $37, $37, $37, $37, $37, $37, $37, $37, $37, $36, $35, $33, $31, $2c
117c7     26 1F 15 0D 
117cb     03 FB F4 EF 
117cf     EB EA E9 EA 
117d3     EC EF F1 F4 | 	byte	$26, $1f, $15, $0d, $03, $fb, $f4, $ef, $eb, $ea, $e9, $ea, $ec, $ef, $f1, $f4
117d7     F6 F9 FC FF 
117db     01 03 05 08 
117df     0B 0D 11 14 
117e3     17 19 1B 1B | 	byte	$f6, $f9, $fc, $ff, $01, $03, $05, $08, $0b, $0d, $11, $14, $17, $19, $1b, $1b
117e7     1A 17 13 0D 
117eb     07 FE F6 EA 
117ef     DE D2 C7 BD 
117f3     B6 B0 AC AA | 	byte	$1a, $17, $13, $0d, $07, $fe, $f6, $ea, $de, $d2, $c7, $bd, $b6, $b0, $ac, $aa
117f7     AA AB AD B1 
117fb     B4 B9 BE C3 
117ff     C9 D0 D7 DE 
11803     E4 EA EF F4 | 	byte	$aa, $ab, $ad, $b1, $b4, $b9, $be, $c3, $c9, $d0, $d7, $de, $e4, $ea, $ef, $f4
11807     F9 FD 01 04 
1180b     07 09 0A 0A 
1180f     08 04 FF FA 
11813     F5 F1 EE EC | 	byte	$f9, $fd, $01, $04, $07, $09, $0a, $0a, $08, $04, $ff, $fa, $f5, $f1, $ee, $ec
11817     EA EB EB EC 
1181b     EE F0 F3 F6 
1181f     F9 FC FF 02 
11823     05 08 0B 0E | 	byte	$ea, $eb, $eb, $ec, $ee, $f0, $f3, $f6, $f9, $fc, $ff, $02, $05, $08, $0b, $0e
11827     11 13 16 19 
1182b     1A 1D 1F 21 
1182f     24 27 29 2C 
11833     2F 31 32 34 | 	byte	$11, $13, $16, $19, $1a, $1d, $1f, $21, $24, $27, $29, $2c, $2f, $31, $32, $34
11837     35 35 36 36 
1183b     36 36 36 37 
1183f     37 37 37 37 
11843     36 33 2F 2C | 	byte	$35, $35, $36, $36, $36, $36, $36, $37, $37, $37, $37, $37, $36, $33, $2f, $2c
11847     25 1D 15 0C 
1184b     03 FC F5 F1 
1184f     EE EC EC ED 
11853     EE F0 F2 F4 | 	byte	$25, $1d, $15, $0c, $03, $fc, $f5, $f1, $ee, $ec, $ec, $ed, $ee, $f0, $f2, $f4
11857     F7 F9 FC FE 
1185b     00 02 05 08 
1185f     0B 0E 12 14 
11863     16 18 19 18 | 	byte	$f7, $f9, $fc, $fe, $00, $02, $05, $08, $0b, $0e, $12, $14, $16, $18, $19, $18
11867     16 12 0D 07 
1186b     00 F8 EC E0 
1186f     D5 C9 C0 B8 
11873     B2 AE AB AA | 	byte	$16, $12, $0d, $07, $00, $f8, $ec, $e0, $d5, $c9, $c0, $b8, $b2, $ae, $ab, $aa
11877     AB AD AF B3 
1187b     B7 BC C2 C8 
1187f     CF D5 DC E2 
11883     E8 EE F3 F7 | 	byte	$ab, $ad, $af, $b3, $b7, $bc, $c2, $c8, $cf, $d5, $dc, $e2, $e8, $ee, $f3, $f7
11887     FB FF 03 05 
1188b     07 07 06 03 
1188f     FF FB F5 F2 
11893     EE EC EA EA | 	byte	$fb, $ff, $03, $05, $07, $07, $06, $03, $ff, $fb, $f5, $f2, $ee, $ec, $ea, $ea
11897     EA EB ED EF 
1189b     F2 F5 F9 FD 
1189f     01 04 08 0A 
118a3     0D 0F 10 13 | 	byte	$ea, $eb, $ed, $ef, $f2, $f5, $f9, $fd, $01, $04, $08, $0a, $0d, $0f, $10, $13
118a7     15 17 19 1B 
118ab     1D 1F 21 24 
118af     27 29 2B 2E 
118b3     30 31 33 34 | 	byte	$15, $17, $19, $1b, $1d, $1f, $21, $24, $27, $29, $2b, $2e, $30, $31, $33, $34
118b7     34 35 35 35 
118bb     36 36 37 38 
118bf     38 38 38 37 
118c3     35 32 2E 29 | 	byte	$34, $35, $35, $35, $36, $36, $37, $38, $38, $38, $38, $37, $35, $32, $2e, $29
118c7     22 1A 12 0A 
118cb     01 FB F6 F2 
118cf     EF EE EE EE 
118d3     EF F1 F3 F5 | 	byte	$22, $1a, $12, $0a, $01, $fb, $f6, $f2, $ef, $ee, $ee, $ee, $ef, $f1, $f3, $f5
118d7     F7 F9 FB FE 
118db     01 03 06 0A 
118df     0D 11 14 16 
118e3     17 17 16 14 | 	byte	$f7, $f9, $fb, $fe, $01, $03, $06, $0a, $0d, $11, $14, $16, $17, $17, $16, $14
118e7     11 0C 07 FF 
118eb     F7 EC E0 D4 
118ef     C9 BF B7 B0 
118f3     AC AA A9 AA | 	byte	$11, $0c, $07, $ff, $f7, $ec, $e0, $d4, $c9, $bf, $b7, $b0, $ac, $aa, $a9, $aa
118f7     AB AE B2 B6 
118fb     BB C1 C8 CF 
118ff     D5 DC E2 E8 
11903     ED F2 F6 FB | 	byte	$ab, $ae, $b2, $b6, $bb, $c1, $c8, $cf, $d5, $dc, $e2, $e8, $ed, $f2, $f6, $fb
11907     FE 02 04 05 
1190b     04 02 FE F9 
1190f     F5 F0 ED EB 
11913     EA E9 E9 EA | 	byte	$fe, $02, $04, $05, $04, $02, $fe, $f9, $f5, $f0, $ed, $eb, $ea, $e9, $e9, $ea
11917     EB EE F0 F4 
1191b     F7 FC 00 05 
1191f     09 0D 0F 11 
11923     14 15 16 17 | 	byte	$eb, $ee, $f0, $f4, $f7, $fc, $00, $05, $09, $0d, $0f, $11, $14, $15, $16, $17
11927     19 1A 1C 1E 
1192b     20 22 25 28 
1192f     2A 2C 2E 30 
11933     31 33 33 34 | 	byte	$19, $1a, $1c, $1e, $20, $22, $25, $28, $2a, $2c, $2e, $30, $31, $33, $33, $34
11937     34 34 35 35 
1193b     36 37 38 39 
1193f     39 39 38 35 
11943     33 2E 2A 24 | 	byte	$34, $34, $35, $35, $36, $37, $38, $39, $39, $39, $38, $35, $33, $2e, $2a, $24
11947     1D 15 0D 05 
1194b     FF F9 F5 F1 
1194f     F0 EF EF EF 
11953     F0 F1 F3 F5 | 	byte	$1d, $15, $0d, $05, $ff, $f9, $f5, $f1, $f0, $ef, $ef, $ef, $f0, $f1, $f3, $f5
11957     F7 F9 FB FF 
1195b     02 05 09 0C 
1195f     0F 12 13 14 
11963     14 14 11 0E | 	byte	$f7, $f9, $fb, $ff, $02, $05, $09, $0c, $0f, $12, $13, $14, $14, $14, $11, $0e
11967     09 04 FC F2 
1196b     E8 DC D0 C6 
1196f     BC B5 AF AB 
11973     AA A9 AA AC | 	byte	$09, $04, $fc, $f2, $e8, $dc, $d0, $c6, $bc, $b5, $af, $ab, $aa, $a9, $aa, $ac
11977     AF B3 B7 BD 
1197b     C3 CA D0 D6 
1197f     DE E3 E8 ED 
11983     F2 F6 FA FE | 	byte	$af, $b3, $b7, $bd, $c3, $ca, $d0, $d6, $de, $e3, $e8, $ed, $f2, $f6, $fa, $fe
11987     00 02 01 FE 
1198b     FB F7 F2 EF 
1198f     EC E9 E8 E7 
11993     E8 E9 EB ED | 	byte	$00, $02, $01, $fe, $fb, $f7, $f2, $ef, $ec, $e9, $e8, $e7, $e8, $e9, $eb, $ed
11997     EF F3 F6 FB 
1199b     00 04 0A 0D 
1199f     11 13 15 17 
119a3     18 19 1A 1B | 	byte	$ef, $f3, $f6, $fb, $00, $04, $0a, $0d, $11, $13, $15, $17, $18, $19, $1a, $1b
119a7     1C 1E 20 22 
119ab     24 27 28 2B 
119af     2C 2E 30 31 
119b3     32 33 33 33 | 	byte	$1c, $1e, $20, $22, $24, $27, $28, $2b, $2c, $2e, $30, $31, $32, $33, $33, $33
119b7     34 35 35 37 
119bb     38 39 39 3A 
119bf     39 38 36 32 
119c3     2F 29 25 1E | 	byte	$34, $35, $35, $37, $38, $39, $39, $3a, $39, $38, $36, $32, $2f, $29, $25, $1e
119c7     17 11 09 04 
119cb     FF FA F6 F3 
119cf     F2 F0 F0 F0 
119d3     F1 F2 F3 F5 | 	byte	$17, $11, $09, $04, $ff, $fa, $f6, $f3, $f2, $f0, $f0, $f0, $f1, $f2, $f3, $f5
119d7     F7 F9 FD 00 
119db     03 07 09 0C 
119df     0E 10 10 10 
119e3     0F 0C 09 06 | 	byte	$f7, $f9, $fd, $00, $03, $07, $09, $0c, $0e, $10, $10, $10, $0f, $0c, $09, $06
119e7     00 F9 F1 E6 
119eb     DC D0 C7 BE 
119ef     B7 B1 AE AC 
119f3     AB AC AD B0 | 	byte	$00, $f9, $f1, $e6, $dc, $d0, $c7, $be, $b7, $b1, $ae, $ac, $ab, $ac, $ad, $b0
119f7     B4 B9 BE C4 
119fb     CA D1 D7 DC 
119ff     E2 E7 ED F1 
11a03     F5 F9 FC FD | 	byte	$b4, $b9, $be, $c4, $ca, $d1, $d7, $dc, $e2, $e7, $ed, $f1, $f5, $f9, $fc, $fd
11a07     FD FB F8 F5 
11a0b     F2 EE EC E9 
11a0f     E8 E7 E7 E8 
11a13     EA EC EE F1 | 	byte	$fd, $fb, $f8, $f5, $f2, $ee, $ec, $e9, $e8, $e7, $e7, $e8, $ea, $ec, $ee, $f1
11a17     F5 F9 FE 02 
11a1b     07 0C 10 14 
11a1f     17 19 1A 1B 
11a23     1C 1D 1E 1E | 	byte	$f5, $f9, $fe, $02, $07, $0c, $10, $14, $17, $19, $1a, $1b, $1c, $1d, $1e, $1e
11a27     20 22 23 25 
11a2b     28 29 2B 2D 
11a2f     2E 2F 30 31 
11a33     32 32 32 33 | 	byte	$20, $22, $23, $25, $28, $29, $2b, $2d, $2e, $2f, $30, $31, $32, $32, $32, $33
11a37     34 35 37 38 
11a3b     38 39 39 39 
11a3f     37 35 32 2E 
11a43     29 25 1F 19 | 	byte	$34, $35, $37, $38, $38, $39, $39, $39, $37, $35, $32, $2e, $29, $25, $1f, $19
11a47     13 0D 07 02 
11a4b     FD F9 F6 F3 
11a4f     F1 F1 F0 F1 
11a53     F1 F2 F4 F7 | 	byte	$13, $0d, $07, $02, $fd, $f9, $f6, $f3, $f1, $f1, $f0, $f1, $f1, $f2, $f4, $f7
11a57     F9 FC FF 03 
11a5b     06 08 0B 0D 
11a5f     0D 0D 0D 0B 
11a63     09 07 02 FD | 	byte	$f9, $fc, $ff, $03, $06, $08, $0b, $0d, $0d, $0d, $0d, $0b, $09, $07, $02, $fd
11a67     F4 EA E1 D5 
11a6b     CC C2 BA B4 
11a6f     AF AC AB AB 
11a73     AD AF B2 B7 | 	byte	$f4, $ea, $e1, $d5, $cc, $c2, $ba, $b4, $af, $ac, $ab, $ab, $ad, $af, $b2, $b7
11a77     BC C2 C7 CE 
11a7b     D4 DA DF E4 
11a7f     E9 EE F2 F6 
11a83     F9 FA F9 F7 | 	byte	$bc, $c2, $c7, $ce, $d4, $da, $df, $e4, $e9, $ee, $f2, $f6, $f9, $fa, $f9, $f7
11a87     F5 F2 EF EC 
11a8b     EA E8 E7 E7 
11a8f     E7 E8 EA EC 
11a93     EF F2 F5 FA | 	byte	$f5, $f2, $ef, $ec, $ea, $e8, $e7, $e7, $e7, $e8, $ea, $ec, $ef, $f2, $f5, $fa
11a97     FF 04 09 0D 
11a9b     11 15 18 1C 
11a9f     1E 20 21 21 
11aa3     22 22 23 24 | 	byte	$ff, $04, $09, $0d, $11, $15, $18, $1c, $1e, $20, $21, $21, $22, $22, $23, $24
11aa7     26 28 29 2B 
11aab     2C 2D 2E 2F 
11aaf     30 30 30 31 
11ab3     31 32 33 34 | 	byte	$26, $28, $29, $2b, $2c, $2d, $2e, $2f, $30, $30, $30, $31, $31, $32, $33, $34
11ab7     35 37 38 39 
11abb     38 39 38 36 
11abf     33 30 2C 27 
11ac3     22 1D 18 13 | 	byte	$35, $37, $38, $39, $38, $39, $38, $36, $33, $30, $2c, $27, $22, $1d, $18, $13
11ac7     0D 07 03 FE 
11acb     FA F6 F3 F2 
11acf     F1 F0 F0 F1 
11ad3     F3 F5 F7 FA | 	byte	$0d, $07, $03, $fe, $fa, $f6, $f3, $f2, $f1, $f0, $f0, $f1, $f3, $f5, $f7, $fa
11ad7     FD 00 03 06 
11adb     08 0A 0B 0B 
11adf     0A 09 08 06 
11ae3     02 FC F4 EA | 	byte	$fd, $00, $03, $06, $08, $0a, $0b, $0b, $0a, $09, $08, $06, $02, $fc, $f4, $ea
11ae7     E0 D6 CB C3 
11aeb     BA B3 AF AC 
11aef     AA AA AB AE 
11af3     B2 B6 BB C1 | 	byte	$e0, $d6, $cb, $c3, $ba, $b3, $af, $ac, $aa, $aa, $ab, $ae, $b2, $b6, $bb, $c1
11af7     C7 CD D3 D8 
11afb     DE E3 E8 EC 
11aff     F1 F4 F6 F6 
11b03     F4 F2 EF ED | 	byte	$c7, $cd, $d3, $d8, $de, $e3, $e8, $ec, $f1, $f4, $f6, $f6, $f4, $f2, $ef, $ed
11b07     EA E8 E6 E6 
11b0b     E5 E5 E6 E8 
11b0f     EA ED F0 F4 
11b13     F7 FC 01 06 | 	byte	$ea, $e8, $e6, $e6, $e5, $e5, $e6, $e8, $ea, $ed, $f0, $f4, $f7, $fc, $01, $06
11b17     0B 0F 13 17 
11b1b     1B 1E 20 22 
11b1f     23 24 24 25 
11b23     26 27 28 29 | 	byte	$0b, $0f, $13, $17, $1b, $1e, $20, $22, $23, $24, $24, $25, $26, $27, $28, $29
11b27     2A 2B 2C 2D 
11b2b     2E 2E 2F 2F 
11b2f     30 30 31 32 
11b33     33 34 35 36 | 	byte	$2a, $2b, $2c, $2d, $2e, $2e, $2f, $2f, $30, $30, $31, $32, $33, $34, $35, $36
11b37     37 38 39 38 
11b3b     38 36 34 31 
11b3f     2C 28 24 1F 
11b43     1B 16 10 0B | 	byte	$37, $38, $39, $38, $38, $36, $34, $31, $2c, $28, $24, $1f, $1b, $16, $10, $0b
11b47     06 01 FC F9 
11b4b     F5 F3 F1 F0 
11b4f     F0 F1 F2 F4 
11b53     F6 F8 FC FF | 	byte	$06, $01, $fc, $f9, $f5, $f3, $f1, $f0, $f0, $f1, $f2, $f4, $f6, $f8, $fc, $ff
11b57     02 04 06 08 
11b5b     09 08 08 07 
11b5f     05 03 00 F9 
11b63     F2 E9 DE D4 | 	byte	$02, $04, $06, $08, $09, $08, $08, $07, $05, $03, $00, $f9, $f2, $e9, $de, $d4
11b67     CA C1 B9 B3 
11b6b     AF AC AA AA 
11b6f     AC AF B2 B7 
11b73     BC C3 C8 CE | 	byte	$ca, $c1, $b9, $b3, $af, $ac, $aa, $aa, $ac, $af, $b2, $b7, $bc, $c3, $c8, $ce
11b77     D5 DA DF E4 
11b7b     E9 ED F1 F3 
11b7f     F4 F3 F0 EE 
11b83     EB E9 E6 E5 | 	byte	$d5, $da, $df, $e4, $e9, $ed, $f1, $f3, $f4, $f3, $f0, $ee, $eb, $e9, $e6, $e5
11b87     E4 E4 E4 E5 
11b8b     E7 E9 EB EE 
11b8f     F1 F5 F9 FE 
11b93     03 08 0D 11 | 	byte	$e4, $e4, $e4, $e5, $e7, $e9, $eb, $ee, $f1, $f5, $f9, $fe, $03, $08, $0d, $11
11b97     15 19 1C 1F 
11b9b     21 23 25 26 
11b9f     27 28 28 29 
11ba3     2A 2B 2C 2C | 	byte	$15, $19, $1c, $1f, $21, $23, $25, $26, $27, $28, $28, $29, $2a, $2b, $2c, $2c
11ba7     2D 2D 2E 2E 
11bab     2E 2E 2F 2F 
11baf     30 31 32 34 
11bb3     34 36 37 37 | 	byte	$2d, $2d, $2e, $2e, $2e, $2e, $2f, $2f, $30, $31, $32, $34, $34, $36, $37, $37
11bb7     37 37 36 35 
11bbb     33 30 2C 27 
11bbf     23 20 1C 17 
11bc3     13 0E 09 04 | 	byte	$37, $37, $36, $35, $33, $30, $2c, $27, $23, $20, $1c, $17, $13, $0e, $09, $04
11bc7     00 FB F7 F5 
11bcb     F3 F1 F1 F1 
11bcf     F2 F3 F6 F8 
11bd3     FB FE 01 02 | 	byte	$00, $fb, $f7, $f5, $f3, $f1, $f1, $f1, $f2, $f3, $f6, $f8, $fb, $fe, $01, $02
11bd7     04 05 05 05 
11bdb     04 03 02 00 
11bdf     FD F7 EF E6 
11be3     DD D2 C9 C0 | 	byte	$04, $05, $05, $05, $04, $03, $02, $00, $fd, $f7, $ef, $e6, $dd, $d2, $c9, $c0
11be7     B8 B3 AF AC 
11beb     AB AB AD B0 
11bef     B4 B8 BE C3 
11bf3     C9 CE D4 DA | 	byte	$b8, $b3, $af, $ac, $ab, $ab, $ad, $b0, $b4, $b8, $be, $c3, $c9, $ce, $d4, $da
11bf7     DE E3 E7 EC 
11bfb     EE EF EF ED 
11bff     EA E8 E6 E4 
11c03     E3 E2 E2 E2 | 	byte	$de, $e3, $e7, $ec, $ee, $ef, $ef, $ed, $ea, $e8, $e6, $e4, $e3, $e2, $e2, $e2
11c07     E3 E5 E7 E9 
11c0b     EC F0 F3 F7 
11c0f     FC 01 06 0A 
11c13     0F 13 17 1A | 	byte	$e3, $e5, $e7, $e9, $ec, $f0, $f3, $f7, $fc, $01, $06, $0a, $0f, $13, $17, $1a
11c17     1D 20 23 25 
11c1b     27 29 2A 2A 
11c1f     2B 2C 2D 2D 
11c23     2E 2E 2F 2E | 	byte	$1d, $20, $23, $25, $27, $29, $2a, $2a, $2b, $2c, $2d, $2d, $2e, $2e, $2f, $2e
11c27     2E 2E 2E 2F 
11c2b     2F 2F 30 31 
11c2f     32 33 34 35 
11c33     36 36 37 36 | 	byte	$2e, $2e, $2e, $2f, $2f, $2f, $30, $31, $32, $33, $34, $35, $36, $36, $37, $36
11c37     36 35 32 30 
11c3b     2C 29 25 20 
11c3f     1D 19 15 11 
11c43     0C 08 03 FF | 	byte	$36, $35, $32, $30, $2c, $29, $25, $20, $1d, $19, $15, $11, $0c, $08, $03, $ff
11c47     FB F7 F5 F3 
11c4b     F2 F2 F3 F4 
11c4f     F6 F8 FA FD 
11c53     FF 01 03 03 | 	byte	$fb, $f7, $f5, $f3, $f2, $f2, $f3, $f4, $f6, $f8, $fa, $fd, $ff, $01, $03, $03
11c57     04 03 02 02 
11c5b     01 FF FD F6 
11c5f     EF E6 DC D2 
11c63     C9 C1 B9 B4 | 	byte	$04, $03, $02, $02, $01, $ff, $fd, $f6, $ef, $e6, $dc, $d2, $c9, $c1, $b9, $b4
11c67     B0 AD AC AC 
11c6b     AE B1 B4 B9 
11c6f     BD C2 C8 CD 
11c73     D4 D8 DE E2 | 	byte	$b0, $ad, $ac, $ac, $ae, $b1, $b4, $b9, $bd, $c2, $c8, $cd, $d4, $d8, $de, $e2
11c77     E6 E9 EB EB 
11c7b     E9 E7 E5 E3 
11c7f     E1 E1 DF DF 
11c83     E0 E1 E3 E5 | 	byte	$e6, $e9, $eb, $eb, $e9, $e7, $e5, $e3, $e1, $e1, $df, $df, $e0, $e1, $e3, $e5
11c87     E7 EA ED F1 
11c8b     F5 F9 FE 03 
11c8f     08 0C 10 15 
11c93     18 1C 1E 21 | 	byte	$e7, $ea, $ed, $f1, $f5, $f9, $fe, $03, $08, $0c, $10, $15, $18, $1c, $1e, $21
11c97     24 26 28 2A 
11c9b     2C 2D 2E 2F 
11c9f     2F 30 30 30 
11ca3     30 2F 2F 2F | 	byte	$24, $26, $28, $2a, $2c, $2d, $2e, $2f, $2f, $30, $30, $30, $30, $2f, $2f, $2f
11ca7     2F 2F 2F 30 
11cab     30 31 32 33 
11caf     34 35 35 36 
11cb3     36 36 35 34 | 	byte	$2f, $2f, $2f, $30, $30, $31, $32, $33, $34, $35, $35, $36, $36, $36, $35, $34
11cb7     32 30 2D 29 
11cbb     24 21 1E 1A 
11cbf     17 13 0F 0B 
11cc3     06 01 FD FA | 	byte	$32, $30, $2d, $29, $24, $21, $1e, $1a, $17, $13, $0f, $0b, $06, $01, $fd, $fa
11cc7     F7 F5 F3 F3 
11ccb     F3 F4 F6 F7 
11ccf     FA FC FE FF 
11cd3     00 01 01 00 | 	byte	$f7, $f5, $f3, $f3, $f3, $f4, $f6, $f7, $fa, $fc, $fe, $ff, $00, $01, $01, $00
11cd7     00 FF FF FD 
11cdb     FA F5 ED E4 
11cdf     DC D2 C9 C0 
11ce3     B8 B3 AF AC | 	byte	$00, $ff, $ff, $fd, $fa, $f5, $ed, $e4, $dc, $d2, $c9, $c0, $b8, $b3, $af, $ac
11ce7     AB AC AD B0 
11ceb     B4 B8 BD C2 
11cef     C8 CD D2 D8 
11cf3     DC E1 E5 E7 | 	byte	$ab, $ac, $ad, $b0, $b4, $b8, $bd, $c2, $c8, $cd, $d2, $d8, $dc, $e1, $e5, $e7
11cf7     E7 E6 E5 E3 
11cfb     E0 DF DE DD 
11cff     DD DD DE E0 
11d03     E2 E5 E7 EB | 	byte	$e7, $e6, $e5, $e3, $e0, $df, $de, $dd, $dd, $dd, $de, $e0, $e2, $e5, $e7, $eb
11d07     EE F3 F7 FB 
11d0b     00 04 09 0E 
11d0f     12 16 1A 1D 
11d13     20 22 25 27 | 	byte	$ee, $f3, $f7, $fb, $00, $04, $09, $0e, $12, $16, $1a, $1d, $20, $22, $25, $27
11d17     2A 2C 2E 2F 
11d1b     31 31 32 32 
11d1f     32 32 32 31 
11d23     30 30 30 30 | 	byte	$2a, $2c, $2e, $2f, $31, $31, $32, $32, $32, $32, $32, $31, $30, $30, $30, $30
11d27     30 30 31 31 
11d2b     32 33 33 34 
11d2f     35 35 35 35 
11d33     35 34 33 31 | 	byte	$30, $30, $31, $31, $32, $33, $33, $34, $35, $35, $35, $35, $35, $34, $33, $31
11d37     2E 2B 26 23 
11d3b     1F 1C 19 16 
11d3f     13 0E 0A 06 
11d43     02 FE FB F8 | 	byte	$2e, $2b, $26, $23, $1f, $1c, $19, $16, $13, $0e, $0a, $06, $02, $fe, $fb, $f8
11d47     F6 F5 F5 F5 
11d4b     F6 F7 F8 FA 
11d4f     FB FC FD FD 
11d53     FD FC FC FC | 	byte	$f6, $f5, $f5, $f5, $f6, $f7, $f8, $fa, $fb, $fc, $fd, $fd, $fd, $fc, $fc, $fc
11d57     FC FB F9 F4 
11d5b     EE E6 DE D3 
11d5f     CB C2 BB B5 
11d63     B1 AE AD AD | 	byte	$fc, $fb, $f9, $f4, $ee, $e6, $de, $d3, $cb, $c2, $bb, $b5, $b1, $ae, $ad, $ad
11d67     AE B0 B3 B8 
11d6b     BB C0 C6 CB 
11d6f     D0 D5 DA DE 
11d73     E1 E3 E3 E2 | 	byte	$ae, $b0, $b3, $b8, $bb, $c0, $c6, $cb, $d0, $d5, $da, $de, $e1, $e3, $e3, $e2
11d77     E0 DE DD DB 
11d7b     DB DA DA DB 
11d7f     DC DE E1 E4 
11d83     E7 EA EE F2 | 	byte	$e0, $de, $dd, $db, $db, $da, $da, $db, $dc, $de, $e1, $e4, $e7, $ea, $ee, $f2
11d87     F7 FB FF 04 
11d8b     08 0D 11 15 
11d8f     19 1C 1F 22 
11d93     24 26 29 2C | 	byte	$f7, $fb, $ff, $04, $08, $0d, $11, $15, $19, $1c, $1f, $22, $24, $26, $29, $2c
11d97     2D 2F 31 32 
11d9b     33 33 33 33 
11d9f     32 31 31 30 
11da3     30 30 30 30 | 	byte	$2d, $2f, $31, $32, $33, $33, $33, $33, $32, $31, $31, $30, $30, $30, $30, $30
11da7     30 31 31 32 
11dab     32 33 33 34 
11daf     34 34 34 33 
11db3     33 31 2F 2C | 	byte	$30, $31, $31, $32, $32, $33, $33, $34, $34, $34, $34, $33, $33, $31, $2f, $2c
11db7     28 24 21 1D 
11dbb     1A 17 14 11 
11dbf     0E 0A 07 04 
11dc3     01 FF FC FA | 	byte	$28, $24, $21, $1d, $1a, $17, $14, $11, $0e, $0a, $07, $04, $01, $ff, $fc, $fa
11dc7     F9 F8 F7 F8 
11dcb     F8 F9 FA FB 
11dcf     FB FB FA FA 
11dd3     FA F9 F9 F9 | 	byte	$f9, $f8, $f7, $f8, $f8, $f9, $fa, $fb, $fb, $fb, $fa, $fa, $fa, $f9, $f9, $f9
11dd7     F9 F6 F2 EC 
11ddb     E6 DE D5 CE 
11ddf     C6 C0 BB B7 
11de3     B4 B2 B2 B2 | 	byte	$f9, $f6, $f2, $ec, $e6, $de, $d5, $ce, $c6, $c0, $bb, $b7, $b4, $b2, $b2, $b2
11de7     B4 B6 B9 BD 
11deb     C1 C6 CA CF 
11def     D3 D8 DB DC 
11df3     DD DD DC DB | 	byte	$b4, $b6, $b9, $bd, $c1, $c6, $ca, $cf, $d3, $d8, $db, $dc, $dd, $dd, $dc, $db
11df7     D9 D9 D8 D8 
11dfb     D8 D9 DA DC 
11dff     DE E1 E4 E7 
11e03     EA EF F3 F6 | 	byte	$d9, $d9, $d8, $d8, $d8, $d9, $da, $dc, $de, $e1, $e4, $e7, $ea, $ef, $f3, $f6
11e07     FB FF 04 08 
11e0b     0C 11 14 18 
11e0f     1B 1E 21 23 
11e13     27 29 2B 2D | 	byte	$fb, $ff, $04, $08, $0c, $11, $14, $18, $1b, $1e, $21, $23, $27, $29, $2b, $2d
11e17     2F 31 32 33 
11e1b     34 34 35 34 
11e1f     33 33 32 31 
11e23     31 31 31 31 | 	byte	$2f, $31, $32, $33, $34, $34, $35, $34, $33, $33, $32, $31, $31, $31, $31, $31
11e27     31 31 31 32 
11e2b     32 33 32 32 
11e2f     32 32 32 31 
11e33     30 2E 2B 29 | 	byte	$31, $31, $31, $32, $32, $33, $32, $32, $32, $32, $32, $31, $30, $2e, $2b, $29
11e37     25 21 1E 1B 
11e3b     18 16 13 10 
11e3f     0D 0B 07 04 
11e43     02 FF FE FC | 	byte	$25, $21, $1e, $1b, $18, $16, $13, $10, $0d, $0b, $07, $04, $02, $ff, $fe, $fc
11e47     FA F9 F9 F9 
11e4b     F9 FA FA F9 
11e4f     F9 F9 F8 F8 
11e53     F8 F9 F8 F7 | 	byte	$fa, $f9, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f8, $f8, $f8, $f9, $f8, $f7
11e57     F4 F0 EB E4 
11e5b     DD D5 CE C8 
11e5f     C1 BC B8 B5 
11e63     B3 B3 B3 B4 | 	byte	$f4, $f0, $eb, $e4, $dd, $d5, $ce, $c8, $c1, $bc, $b8, $b5, $b3, $b3, $b3, $b4
11e67     B7 BA BD C1 
11e6b     C5 CA CE D2 
11e6f     D5 D7 D9 D9 
11e73     D8 D8 D7 D5 | 	byte	$b7, $ba, $bd, $c1, $c5, $ca, $ce, $d2, $d5, $d7, $d9, $d9, $d8, $d8, $d7, $d5
11e77     D5 D5 D5 D6 
11e7b     D8 D9 DB DE 
11e7f     E1 E4 E8 EC 
11e83     F0 F4 F8 FC | 	byte	$d5, $d5, $d5, $d6, $d8, $d9, $db, $de, $e1, $e4, $e8, $ec, $f0, $f4, $f8, $fc
11e87     01 05 09 0D 
11e8b     11 15 19 1C 
11e8f     1F 22 25 27 
11e93     2A 2C 2E 30 | 	byte	$01, $05, $09, $0d, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30
11e97     32 33 34 35 
11e9b     35 35 35 34 
11e9f     33 33 33 32 
11ea3     32 32 31 31 | 	byte	$32, $33, $34, $35, $35, $35, $35, $34, $33, $33, $33, $32, $32, $32, $31, $31
11ea7     31 31 31 31 
11eab     32 32 32 32 
11eaf     32 31 31 30 
11eb3     2E 2C 29 26 | 	byte	$31, $31, $31, $31, $32, $32, $32, $32, $32, $31, $31, $30, $2e, $2c, $29, $26
11eb7     22 1F 1B 19 
11ebb     16 13 11 0F 
11ebf     0C 0A 07 04 
11ec3     02 00 FE FC | 	byte	$22, $1f, $1b, $19, $16, $13, $11, $0f, $0c, $0a, $07, $04, $02, $00, $fe, $fc
11ec7     FB FA FA F9 
11ecb     F9 F9 F8 F8 
11ecf     F7 F7 F7 F7 
11ed3     F7 F7 F6 F3 | 	byte	$fb, $fa, $fa, $f9, $f9, $f9, $f8, $f8, $f7, $f7, $f7, $f7, $f7, $f7, $f6, $f3
11ed7     EF EA E4 DD 
11edb     D6 CE C7 C2 
11edf     BD B9 B6 B4 
11ee3     B4 B4 B5 B7 | 	byte	$ef, $ea, $e4, $dd, $d6, $ce, $c7, $c2, $bd, $b9, $b6, $b4, $b4, $b4, $b5, $b7
11ee7     BA BD C0 C5 
11eeb     C9 CD D0 D3 
11eef     D5 D5 D6 D5 
11ef3     D4 D3 D3 D2 | 	byte	$ba, $bd, $c0, $c5, $c9, $cd, $d0, $d3, $d5, $d5, $d6, $d5, $d4, $d3, $d3, $d2
11ef7     D3 D3 D4 D6 
11efb     D9 DB DF E3 
11eff     E5 E9 ED F1 
11f03     F6 F9 FE 02 | 	byte	$d3, $d3, $d4, $d6, $d9, $db, $df, $e3, $e5, $e9, $ed, $f1, $f6, $f9, $fe, $02
11f07     06 0A 0E 12 
11f0b     16 19 1C 1F 
11f0f     22 25 28 2A 
11f13     2C 2E 30 31 | 	byte	$06, $0a, $0e, $12, $16, $19, $1c, $1f, $22, $25, $28, $2a, $2c, $2e, $30, $31
11f17     33 34 36 36 
11f1b     36 36 36 36 
11f1f     35 34 34 33 
11f23     33 32 32 32 | 	byte	$33, $34, $36, $36, $36, $36, $36, $36, $35, $34, $34, $33, $33, $32, $32, $32
11f27     31 32 32 31 
11f2b     31 31 31 31 
11f2f     31 30 2F 2E 
11f33     2B 29 26 22 | 	byte	$31, $32, $32, $31, $31, $31, $31, $31, $31, $30, $2f, $2e, $2b, $29, $26, $22
11f37     1F 1C 19 17 
11f3b     14 12 10 0E 
11f3f     0C 0A 07 05 
11f43     02 00 FE FD | 	byte	$1f, $1c, $19, $17, $14, $12, $10, $0e, $0c, $0a, $07, $05, $02, $00, $fe, $fd
11f47     FC FB FA F9 
11f4b     F9 F8 F7 F6 
11f4f     F6 F5 F6 F6 
11f53     F5 F4 F2 EF | 	byte	$fc, $fb, $fa, $f9, $f9, $f8, $f7, $f6, $f6, $f5, $f6, $f6, $f5, $f4, $f2, $ef
11f57     EA E4 DD D7 
11f5b     CF C8 C3 BD 
11f5f     BA B7 B5 B4 
11f63     B4 B5 B7 B9 | 	byte	$ea, $e4, $dd, $d7, $cf, $c8, $c3, $bd, $ba, $b7, $b5, $b4, $b4, $b5, $b7, $b9
11f67     BC BF C3 C7 
11f6b     CB CE D0 D2 
11f6f     D2 D2 D1 D0 
11f73     D0 D0 CF D0 | 	byte	$bc, $bf, $c3, $c7, $cb, $ce, $d0, $d2, $d2, $d2, $d1, $d0, $d0, $d0, $cf, $d0
11f77     D1 D2 D4 D7 
11f7b     DA DD E1 E4 
11f7f     E9 ED F1 F5 
11f83     F9 FE 02 06 | 	byte	$d1, $d2, $d4, $d7, $da, $dd, $e1, $e4, $e9, $ed, $f1, $f5, $f9, $fe, $02, $06
11f87     0A 0E 12 15 
11f8b     19 1C 1F 23 
11f8f     25 28 2A 2C 
11f93     2E 30 31 33 | 	byte	$0a, $0e, $12, $15, $19, $1c, $1f, $23, $25, $28, $2a, $2c, $2e, $30, $31, $33
11f97     34 35 36 36 
11f9b     37 37 37 36 
11f9f     35 35 34 34 
11fa3     33 32 31 31 | 	byte	$34, $35, $36, $36, $37, $37, $37, $36, $35, $35, $34, $34, $33, $32, $31, $31
11fa7     31 31 31 30 
11fab     30 30 30 30 
11faf     30 2F 2E 2C 
11fb3     29 26 23 20 | 	byte	$31, $31, $31, $30, $30, $30, $30, $30, $30, $2f, $2e, $2c, $29, $26, $23, $20
11fb7     1D 19 17 14 
11fbb     12 10 0E 0D 
11fbf     0B 09 07 05 
11fc3     03 01 FF FE | 	byte	$1d, $19, $17, $14, $12, $10, $0e, $0d, $0b, $09, $07, $05, $03, $01, $ff, $fe
11fc7     FD FC FA F9 
11fcb     F8 F7 F6 F6 
11fcf     F5 F5 F5 F5 
11fd3     F4 F3 EF EB | 	byte	$fd, $fc, $fa, $f9, $f8, $f7, $f6, $f6, $f5, $f5, $f5, $f5, $f4, $f3, $ef, $eb
11fd7     E6 DF D9 D3 
11fdb     CC C7 C2 BE 
11fdf     BB B8 B7 B6 
11fe3     B7 B8 BA BC | 	byte	$e6, $df, $d9, $d3, $cc, $c7, $c2, $be, $bb, $b8, $b7, $b6, $b7, $b8, $ba, $bc
11fe7     BF C3 C6 C9 
11feb     CB CD CD CE 
11fef     CD CD CC CC 
11ff3     CC CC CD CE | 	byte	$bf, $c3, $c6, $c9, $cb, $cd, $cd, $ce, $cd, $cd, $cc, $cc, $cc, $cc, $cd, $ce
11ff7     D0 D2 D5 D8 
11ffb     DB E0 E4 E8 
11fff     EC F0 F5 F9 
12003     FD 02 06 09 | 	byte	$d0, $d2, $d5, $d8, $db, $e0, $e4, $e8, $ec, $f0, $f5, $f9, $fd, $02, $06, $09
12007     0E 11 15 19 
1200b     1C 1F 22 26 
1200f     27 2A 2D 2E 
12013     30 31 33 34 | 	byte	$0e, $11, $15, $19, $1c, $1f, $22, $26, $27, $2a, $2d, $2e, $30, $31, $33, $34
12017     35 36 37 38 
1201b     38 38 38 37 
1201f     37 36 35 34 
12023     33 33 32 31 | 	byte	$35, $36, $37, $38, $38, $38, $38, $37, $37, $36, $35, $34, $33, $33, $32, $31
12027     31 31 31 30 
1202b     31 30 30 30 
1202f     2F 2E 2C 2A 
12033     27 24 21 1E | 	byte	$31, $31, $31, $30, $31, $30, $30, $30, $2f, $2e, $2c, $2a, $27, $24, $21, $1e
12037     1A 18 15 13 
1203b     11 10 0F 0D 
1203f     0B 09 07 05 
12043     03 01 FF FD | 	byte	$1a, $18, $15, $13, $11, $10, $0f, $0d, $0b, $09, $07, $05, $03, $01, $ff, $fd
12047     FC FB F9 F8 
1204b     F7 F6 F5 F5 
1204f     F4 F4 F4 F3 
12053     F1 EE E9 E4 | 	byte	$fc, $fb, $f9, $f8, $f7, $f6, $f5, $f5, $f4, $f4, $f4, $f3, $f1, $ee, $e9, $e4
12057     DE D8 D2 CC 
1205b     C5 C1 BD BA 
1205f     B7 B6 B5 B6 
12063     B7 B8 BB BE | 	byte	$de, $d8, $d2, $cc, $c5, $c1, $bd, $ba, $b7, $b6, $b5, $b6, $b7, $b8, $bb, $be
12067     C1 C4 C6 C8 
1206b     CA CA CA CA 
1206f     C9 C9 C9 C9 
12073     CA CB CC CF | 	byte	$c1, $c4, $c6, $c8, $ca, $ca, $ca, $ca, $c9, $c9, $c9, $c9, $ca, $cb, $cc, $cf
12077     D1 D5 D8 DC 
1207b     E0 E5 E9 EE 
1207f     F2 F6 FA FF 
12083     03 07 0B 0F | 	byte	$d1, $d5, $d8, $dc, $e0, $e5, $e9, $ee, $f2, $f6, $fa, $ff, $03, $07, $0b, $0f
12087     13 17 1A 1E 
1208b     21 23 27 29 
1208f     2C 2E 2F 31 
12093     32 34 35 36 | 	byte	$13, $17, $1a, $1e, $21, $23, $27, $29, $2c, $2e, $2f, $31, $32, $34, $35, $36
12097     37 38 39 39 
1209b     39 39 39 38 
1209f     38 37 36 35 
120a3     34 33 32 32 | 	byte	$37, $38, $39, $39, $39, $39, $39, $38, $38, $37, $36, $35, $34, $33, $32, $32
120a7     31 31 31 31 
120ab     30 30 30 30 
120af     2E 2D 2B 28 
120b3     25 22 1F 1C | 	byte	$31, $31, $31, $31, $30, $30, $30, $30, $2e, $2d, $2b, $28, $25, $22, $1f, $1c
120b7     19 16 14 13 
120bb     11 10 0E 0C 
120bf     0A 08 06 04 
120c3     02 01 FE FD | 	byte	$19, $16, $14, $13, $11, $10, $0e, $0c, $0a, $08, $06, $04, $02, $01, $fe, $fd
120c7     FB F9 F8 F7 
120cb     F6 F4 F3 F3 
120cf     F2 F2 F0 EE 
120d3     EA E6 E0 DA | 	byte	$fb, $f9, $f8, $f7, $f6, $f4, $f3, $f3, $f2, $f2, $f0, $ee, $ea, $e6, $e0, $da
120d7     D4 CE C8 C3 
120db     BF BB B8 B6 
120df     B5 B5 B6 B7 
120e3     B9 BC BE C1 | 	byte	$d4, $ce, $c8, $c3, $bf, $bb, $b8, $b6, $b5, $b5, $b6, $b7, $b9, $bc, $be, $c1
120e7     C3 C5 C6 C6 
120eb     C6 C6 C6 C5 
120ef     C5 C5 C6 C8 
120f3     C9 CC CF D2 | 	byte	$c3, $c5, $c6, $c6, $c6, $c6, $c6, $c5, $c5, $c5, $c6, $c8, $c9, $cc, $cf, $d2
120f7     D5 DA DE E2 
120fb     E7 EC F0 F5 
120ff     F9 FD 02 06 
12103     0A 0E 12 16 | 	byte	$d5, $da, $de, $e2, $e7, $ec, $f0, $f5, $f9, $fd, $02, $06, $0a, $0e, $12, $16
12107     19 1D 21 23 
1210b     26 29 2B 2E 
1210f     2F 31 32 33 
12113     35 36 37 38 | 	byte	$19, $1d, $21, $23, $26, $29, $2b, $2e, $2f, $31, $32, $33, $35, $36, $37, $38
12117     39 3A 3A 3B 
1211b     3B 3B 3A 39 
1211f     38 37 36 35 
12123     34 33 32 32 | 	byte	$39, $3a, $3a, $3b, $3b, $3b, $3a, $39, $38, $37, $36, $35, $34, $33, $32, $32
12127     32 31 30 30 
1212b     30 30 2F 2D 
1212f     2C 29 27 24 
12133     21 1E 1B 18 | 	byte	$32, $31, $30, $30, $30, $30, $2f, $2d, $2c, $29, $27, $24, $21, $1e, $1b, $18
12137     15 13 12 10 
1213b     0E 0D 0B 09 
1213f     08 05 03 01 
12143     FF FE FC FA | 	byte	$15, $13, $12, $10, $0e, $0d, $0b, $09, $08, $05, $03, $01, $ff, $fe, $fc, $fa
12147     F8 F6 F5 F4 
1214b     F3 F2 F2 00 
1214f     00 00 00 03 
12153     02 01 00 00 | 	byte	$f8, $f6, $f5, $f4, $f3, $f2, $f2, $00, $00, $00, $00, $03, $02, $01, $00, $00
12157     FE FE FD FC 
1215b     FB FA FA F9 
1215f     FA FA FA FB 
12163     FC FD FD FE | 	byte	$fe, $fe, $fd, $fc, $fb, $fa, $fa, $f9, $fa, $fa, $fa, $fb, $fc, $fd, $fd, $fe
12167     FE FE FF 00 
1216b     00 01 02 02 
1216f     02 00 00 FE 
12173     FD FC FB FA | 	byte	$fe, $fe, $ff, $00, $00, $01, $02, $02, $02, $00, $00, $fe, $fd, $fc, $fb, $fa
12177     FA FA F9 F9 
1217b     F8 F9 F9 F9 
1217f     FA FB FC FE 
12183     FF FF 00 00 | 	byte	$fa, $fa, $f9, $f9, $f8, $f9, $f9, $f9, $fa, $fb, $fc, $fe, $ff, $ff, $00, $00
12187     00 00 00 01 
1218b     00 00 FF FF 
1218f     FD FB FA F9 
12193     F8 F8 F8 F8 | 	byte	$00, $00, $00, $01, $00, $00, $ff, $ff, $fd, $fb, $fa, $f9, $f8, $f8, $f8, $f8
12197     F8 F9 F9 F9 
1219b     FA FA FA FB 
1219f     FC FE FE FF 
121a3     FF FF FF FE | 	byte	$f8, $f9, $f9, $f9, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $ff, $ff, $ff, $ff, $fe
121a7     FE FE FF FF 
121ab     00 00 00 FF 
121af     FF FF FF FF 
121b3     00 01 02 03 | 	byte	$fe, $fe, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $01, $02, $03
121b7     04 05 04 03 
121bb     03 02 02 02 
121bf     03 03 03 03 
121c3     03 03 03 03 | 	byte	$04, $05, $04, $03, $03, $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03
121c7     04 05 07 08 
121cb     09 09 0A 0A 
121cf     09 08 08 07 
121d3     06 05 03 01 | 	byte	$04, $05, $07, $08, $09, $09, $0a, $0a, $09, $08, $08, $07, $06, $05, $03, $01
121d7     FE F9 F5 EF 
121db     ED EC EF F5 
121df     FB 03 09 11 
121e3     17 1B 1F 21 | 	byte	$fe, $f9, $f5, $ef, $ed, $ec, $ef, $f5, $fb, $03, $09, $11, $17, $1b, $1f, $21
121e7     24 25 24 20 
121eb     1C 15 0E 04 
121ef     FC F2 EB E8 
121f3     E8 EA EB EC | 	byte	$24, $25, $24, $20, $1c, $15, $0e, $04, $fc, $f2, $eb, $e8, $e8, $ea, $eb, $ec
121f7     EC EB EA EC 
121fb     F1 F8 03 0E 
121ff     19 21 27 2A 
12203     2B 29 27 25 | 	byte	$ec, $eb, $ea, $ec, $f1, $f8, $03, $0e, $19, $21, $27, $2a, $2b, $29, $27, $25
12207     24 21 1C 17 
1220b     10 04 F4 E6 
1220f     DB D7 D9 DE 
12213     E7 E9 E4 DC | 	byte	$24, $21, $1c, $17, $10, $04, $f4, $e6, $db, $d7, $d9, $de, $e7, $e9, $e4, $dc
12217     D8 DA E2 EE 
1221b     00 10 20 2C 
1221f     34 3A 3A 36 
12223     32 31 33 34 | 	byte	$d8, $da, $e2, $ee, $00, $10, $20, $2c, $34, $3a, $3a, $36, $32, $31, $33, $34
12227     30 27 1C 0E 
1222b     F8 DC C5 C1 
1222f     C6 CE D6 E0 
12233     E4 DA CB CA | 	byte	$30, $27, $1c, $0e, $f8, $dc, $c5, $c1, $c6, $ce, $d6, $e0, $e4, $da, $cb, $ca
12237     D3 E0 EF 01 
1223b     16 28 36 40 
1223f     46 44 3B 35 
12243     34 3A 3B 36 | 	byte	$d3, $e0, $ef, $01, $16, $28, $36, $40, $46, $44, $3b, $35, $34, $3a, $3b, $36
12247     2B 1B 09 F2 
1224b     C6 B0 B9 C3 
1224f     C4 C8 D6 E1 
12253     CC B6 C5 D4 | 	byte	$2b, $1b, $09, $f2, $c6, $b0, $b9, $c3, $c4, $c8, $d6, $e1, $cc, $b6, $c5, $d4
12257     DA EA 02 1A 
1225b     31 3C 47 4D 
1225f     4A 3E 36 3E 
12263     48 44 3F 33 | 	byte	$da, $ea, $02, $1a, $31, $3c, $47, $4d, $4a, $3e, $36, $3e, $48, $44, $3f, $33
12267     1F 08 E8 BD 
1226b     AC B4 B9 BA 
1226f     C2 D0 DA D6 
12273     AC B6 CC D5 | 	byte	$1f, $08, $e8, $bd, $ac, $b4, $b9, $ba, $c2, $d0, $da, $d6, $ac, $b6, $cc, $d5
12277     E4 F9 0B 2E 
1227b     38 47 51 4D 
1227f     3B 37 41 4B 
12283     4B 48 40 2A | 	byte	$e4, $f9, $0b, $2e, $38, $47, $51, $4d, $3b, $37, $41, $4b, $4b, $48, $40, $2a
12287     11 EB CA A5 
1228b     AC B4 B5 B5 
1228f     C3 CD D5 B2 
12293     A7 C4 CD DB | 	byte	$11, $eb, $ca, $a5, $ac, $b4, $b5, $b5, $c3, $cd, $d5, $b2, $a7, $c4, $cd, $db
12297     ED 00 19 36 
1229b     3F 55 54 41 
1229f     3A 44 54 57 
122a3     53 4E 3F 20 | 	byte	$ed, $00, $19, $36, $3f, $55, $54, $41, $3a, $44, $54, $57, $53, $4e, $3f, $20
122a7     FC DD AF A9 
122ab     AE B0 AC B9 
122af     C4 CC CD 9E 
122b3     B3 C5 CF E0 | 	byte	$fc, $dd, $af, $a9, $ae, $b0, $ac, $b9, $c4, $cc, $cd, $9e, $b3, $c5, $cf, $e0
122b7     F1 07 1E 39 
122bb     47 57 46 3A 
122bf     46 51 5C 5C 
122c3     5A 52 3D 12 | 	byte	$f1, $07, $1e, $39, $47, $57, $46, $3a, $46, $51, $5c, $5c, $5a, $52, $3d, $12
122c7     EB CD A7 AA 
122cb     AC AA AD B9 
122cf     C4 CC B3 A0 
122d3     B7 C4 D5 E3 | 	byte	$eb, $cd, $a7, $aa, $ac, $aa, $ad, $b9, $c4, $cc, $b3, $a0, $b7, $c4, $d5, $e3
122d7     F4 0E 20 3F 
122db     50 50 3B 43 
122df     50 5F 65 66 
122e3     61 53 30 03 | 	byte	$f4, $0e, $20, $3f, $50, $50, $3b, $43, $50, $5f, $65, $66, $61, $53, $30, $03
122e7     E9 B3 AB AD 
122eb     AB A7 B0 BC 
122ef     C6 CD A3 A9 
122f3     BD C9 D8 E6 | 	byte	$e9, $b3, $ab, $ad, $ab, $a7, $b0, $bc, $c6, $cd, $a3, $a9, $bd, $c9, $d8, $e6
122f7     F5 0D 22 42 
122fb     52 3C 3B 49 
122ff     58 67 6C 6C 
12303     68 55 23 FD | 	byte	$f5, $0d, $22, $42, $52, $3c, $3b, $49, $58, $67, $6c, $6c, $68, $55, $23, $fd
12307     DF B3 B0 AF 
1230b     A9 AB B6 C2 
1230f     CD C9 A2 AC 
12313     BE CF D7 E4 | 	byte	$df, $b3, $b0, $af, $a9, $ab, $b6, $c2, $cd, $c9, $a2, $ac, $be, $cf, $d7, $e4
12317     F7 06 26 41 
1231b     45 31 40 50 
1231f     62 6F 74 73 
12323     6E 4A 1C 01 | 	byte	$f7, $06, $26, $41, $45, $31, $40, $50, $62, $6f, $74, $73, $6e, $4a, $1c, $01
12327     CB B9 BA B1 
1232b     AE B1 BE C9 
1232f     D4 BE A8 B0 
12333     BC CE D0 DA | 	byte	$cb, $b9, $ba, $b1, $ae, $b1, $be, $c9, $d4, $be, $a8, $b0, $bc, $ce, $d0, $da
12337     F1 00 28 3A 
1233b     2E 31 44 54 
1233f     6B 75 7C 7D 
12343     70 3D 18 02 | 	byte	$f1, $00, $28, $3a, $2e, $31, $44, $54, $6b, $75, $7c, $7d, $70, $3d, $18, $02
12347     CB C4 BF B4 
1234b     B2 B7 C4 D0 
1234f     D5 B0 A6 B5 
12353     C1 D3 CE DB | 	byte	$cb, $c4, $bf, $b4, $b2, $b7, $c4, $d0, $d5, $b0, $a6, $b5, $c1, $d3, $ce, $db
12357     ED 05 2A 2D 
1235b     26 38 47 5C 
1235f     6F 7A 7E 7F 
12363     5E 35 1D F1 | 	byte	$ed, $05, $2a, $2d, $26, $38, $47, $5c, $6f, $7a, $7e, $7f, $5e, $35, $1d, $f1
12367     D1 CC BD B7 
1236b     B2 BC C6 D5 
1236f     D3 A8 A7 B6 
12373     C6 D6 CF DD | 	byte	$d1, $cc, $bd, $b7, $b2, $bc, $c6, $d5, $d3, $a8, $a7, $b6, $c6, $d6, $cf, $dd
12377     EE 08 27 21 
1237b     27 3F 4B 67 
1237f     76 7F 7F 7C 
12383     4F 2D 21 E6 | 	byte	$ee, $08, $27, $21, $27, $3f, $4b, $67, $76, $7f, $7f, $7c, $4f, $2d, $21, $e6
12387     D8 CF BE B5 
1238b     B3 C0 C8 D8 
1238f     CD A6 AB B7 
12393     CB D4 CF DB | 	byte	$d8, $cf, $be, $b5, $b3, $c0, $c8, $d8, $cd, $a6, $ab, $b7, $cb, $d4, $cf, $db
12397     F1 0B 1A 1C 
1239b     2D 3F 52 69 
1239f     78 7F 7F 6A 
123a3     42 32 10 EC | 	byte	$f1, $0b, $1a, $1c, $2d, $3f, $52, $69, $78, $7f, $7f, $6a, $42, $32, $10, $ec
123a7     E2 D0 C2 B4 
123ab     B7 C1 CF D9 
123af     BA A4 B1 BE 
123b3     D3 CF D2 DD | 	byte	$e2, $d0, $c2, $b4, $b7, $c1, $cf, $d9, $ba, $a4, $b1, $be, $d3, $cf, $d2, $dd
123b7     F5 05 0F 20 
123bb     34 42 5A 6E 
123bf     7A 7F 7F 5A 
123c3     39 36 04 F3 | 	byte	$f5, $05, $0f, $20, $34, $42, $5a, $6e, $7a, $7f, $7f, $5a, $39, $36, $04, $f3
123c7     E9 D5 C2 B4 
123cb     BC C1 D6 DC 
123cf     AD A7 B1 C4 
123d3     D8 CA D2 E1 | 	byte	$e9, $d5, $c2, $b4, $bc, $c1, $d6, $dc, $ad, $a7, $b1, $c4, $d8, $ca, $d2, $e1
123d7     F5 F9 0B 24 
123db     36 46 60 71 
123df     7C 7F 6B 46 
123e3     3B 2F 05 FC | 	byte	$f5, $f9, $0b, $24, $36, $46, $60, $71, $7c, $7f, $6b, $46, $3b, $2f, $05, $fc
123e7     EF DB BF B4 
123eb     BC C6 DB DC 
123ef     A3 AB B5 C9 
123f3     D6 C8 CF E3 | 	byte	$ef, $db, $bf, $b4, $bc, $c6, $db, $dc, $a3, $ab, $b5, $c9, $d6, $c8, $cf, $e3
123f7     EC F7 0C 29 
123fb     37 4D 62 72 
123ff     7D 78 5A 39 
12403     3D 19 0C 05 | 	byte	$ec, $f7, $0c, $29, $37, $4d, $62, $72, $7d, $78, $5a, $39, $3d, $19, $0c, $05
12407     F8 DD C0 B8 
1240b     BE D2 E1 CD 
1240f     A4 AD BF D0 
12413     D3 C9 D1 E5 | 	byte	$f8, $dd, $c0, $b8, $be, $d2, $e1, $cd, $a4, $ad, $bf, $d0, $d3, $c9, $d1, $e5
12417     DD FB 10 2B 
1241b     3A 51 64 72 
1241f     7A 60 44 39 
12423     3A 12 0F 12 | 	byte	$dd, $fb, $10, $2b, $3a, $51, $64, $72, $7a, $60, $44, $39, $3a, $12, $0f, $12
12427     04 DF C2 BB 
1242b     C0 D9 E6 B8 
1242f     AA AF C4 D4 
12433     CF CE D2 DA | 	byte	$04, $df, $c2, $bb, $c0, $d9, $e6, $b8, $aa, $af, $c4, $d4, $cf, $ce, $d2, $da
12437     D9 FE 18 2B 
1243b     3F 56 66 73 
1243f     69 57 30 38 
12443     27 14 18 1E | 	byte	$d9, $fe, $18, $2b, $3f, $56, $66, $73, $69, $57, $30, $38, $27, $14, $18, $1e
12447     0B E6 C4 BC 
1244b     CA E0 E9 A9 
1244f     AC B8 C9 D6 
12453     C8 D1 D2 CD | 	byte	$0b, $e6, $c4, $bc, $ca, $e0, $e9, $a9, $ac, $b8, $c9, $d6, $c8, $d1, $d2, $cd
12457     DD 03 20 31 
1245b     46 57 69 6F 
1245f     54 41 2F 38 
12463     16 15 25 29 | 	byte	$dd, $03, $20, $31, $46, $57, $69, $6f, $54, $41, $2f, $38, $16, $15, $25, $29
12467     0F EB C7 BE 
1246b     D3 E8 E2 A7 
1246f     AC BF CE D6 
12473     C6 D1 C8 C8 | 	byte	$0f, $eb, $c7, $be, $d3, $e8, $e2, $a7, $ac, $bf, $ce, $d6, $c6, $d1, $c8, $c8
12477     E7 02 26 33 
1247b     49 57 69 56 
1247f     50 28 2C 2F 
12483     0E 1A 2F 30 | 	byte	$e7, $02, $26, $33, $49, $57, $69, $56, $50, $28, $2c, $2f, $0e, $1a, $2f, $30
12487     1A EF C9 C2 
1248b     D9 ED C3 AC 
1248f     B0 C5 D1 D3 
12493     C8 CC BE C8 | 	byte	$1a, $ef, $c9, $c2, $d9, $ed, $c3, $ac, $b0, $c5, $d1, $d3, $c8, $cc, $be, $c8
12497     F7 05 29 3B 
1249b     4A 5D 60 4E 
1249f     38 24 2E 1A 
124a3     0E 25 37 36 | 	byte	$f7, $05, $29, $3b, $4a, $5d, $60, $4e, $38, $24, $2e, $1a, $0e, $25, $37, $36
124a7     25 F7 C8 C8 
124ab     E2 EF B4 AC 
124af     B6 C8 D4 CD 
124b3     CF BF BC CE | 	byte	$25, $f7, $c8, $c8, $e2, $ef, $b4, $ac, $b6, $c8, $d4, $cd, $cf, $bf, $bc, $ce
124b7     FD 0B 2C 3E 
124bb     4C 5E 47 49 
124bf     25 20 2B 05 
124c3     12 2D 3E 3C | 	byte	$fd, $0b, $2c, $3e, $4c, $5e, $47, $49, $25, $20, $2b, $05, $12, $2d, $3e, $3c
124c7     2C FB CC D1 
124cb     E8 E2 B3 AD 
124cf     BE CC D7 C6 
124d3     CC B2 BD DD | 	byte	$2c, $fb, $cc, $d1, $e8, $e2, $b3, $ad, $be, $cc, $d7, $c6, $cc, $b2, $bd, $dd
124d7     FD 15 2F 41 
124db     50 49 49 33 
124df     1B 21 19 02 
124e3     1C 32 42 43 | 	byte	$fd, $15, $2f, $41, $50, $49, $49, $33, $1b, $21, $19, $02, $1c, $32, $42, $43
124e7     35 00 D2 D5 
124eb     EB D4 AE AF 
124ef     C4 D0 D7 C4 
124f3     BE AF C1 F0 | 	byte	$35, $00, $d2, $d5, $eb, $d4, $ae, $af, $c4, $d0, $d7, $c4, $be, $af, $c1, $f0
124f7     FE 1D 35 44 
124fb     4A 40 44 20 
124ff     19 23 04 09 
12503     21 38 44 49 | 	byte	$fe, $1d, $35, $44, $4a, $40, $44, $20, $19, $23, $04, $09, $21, $38, $44, $49
12507     3F 0A D6 DB 
1250b     E1 C9 AD B6 
1250f     C6 D4 CF C1 
12513     B6 B1 C8 FB | 	byte	$3f, $0a, $d6, $db, $e1, $c9, $ad, $b6, $c6, $d4, $cf, $c1, $b6, $b1, $c8, $fb
12517     03 24 38 43 
1251b     34 44 31 15 
1251f     17 19 FA 0F 
12523     26 3C 48 4F | 	byte	$03, $24, $38, $43, $34, $44, $31, $15, $17, $19, $fa, $0f, $26, $3c, $48, $4f
12527     45 0E DA DD 
1252b     DE BF AC BD 
1252f     CD D8 C6 B9 
12533     B4 B7 DB FF | 	byte	$45, $0e, $da, $dd, $de, $bf, $ac, $bd, $cd, $d8, $c6, $b9, $b4, $b7, $db, $ff
12537     09 2E 3B 33 
1253b     3A 3E 1D 11 
1253f     1A 08 FE 16 
12543     2B 3E 4A 57 | 	byte	$09, $2e, $3b, $33, $3a, $3e, $1d, $11, $1a, $08, $fe, $16, $2b, $3e, $4a, $57
12547     4D 19 DC D2 
1254b     E2 B6 AD C3 
1254f     D2 D8 BA B4 
12553     B2 BA ED 00 | 	byte	$4d, $19, $dc, $d2, $e2, $b6, $ad, $c3, $d2, $d8, $ba, $b4, $b2, $ba, $ed, $00
12557     0D 35 34 28 
1255b     3C 2F 12 11 
1255f     18 F9 04 1C 
12563     2F 40 4C 5C | 	byte	$0d, $35, $34, $28, $3c, $2f, $12, $11, $18, $f9, $04, $1c, $2f, $40, $4c, $5c
12567     54 25 D9 D4 
1256b     DC AB B4 C7 
1256f     D4 CE AF B4 
12573     B0 C6 F9 03 | 	byte	$54, $25, $d9, $d4, $dc, $ab, $b4, $c7, $d4, $ce, $af, $b4, $b0, $c6, $f9, $03
12577     15 33 1E 30 
1257b     3A 1E 0C 15 
1257f     0B F7 0C 21 
12583     33 41 52 60 | 	byte	$15, $33, $1e, $30, $3a, $1e, $0c, $15, $0b, $f7, $0c, $21, $33, $41, $52, $60
12587     5B 21 CC DD 
1258b     CE A7 BB CD 
1258f     D9 BA AE B7 
12593     B1 D5 FE 06 | 	byte	$5b, $21, $cc, $dd, $ce, $a7, $bb, $cd, $d9, $ba, $ae, $b7, $b1, $d5, $fe, $06
12597     25 1F 25 32 
1259b     2B 14 0D 15 
1259f     FC FC 12 25 
125a3     35 42 56 64 | 	byte	$25, $1f, $25, $32, $2b, $14, $0d, $15, $fc, $fc, $12, $25, $35, $42, $56, $64
125a7     63 1F CC DE 
125ab     BB AC C1 D1 
125af     D4 A8 AF B7 
125b3     B4 EA FE 08 | 	byte	$63, $1f, $cc, $de, $bb, $ac, $c1, $d1, $d4, $a8, $af, $b7, $b4, $ea, $fe, $08
125b7     24 15 29 2D 
125bb     23 0C 11 0D 
125bf     F6 05 18 2A 
125c3     38 46 5D 69 | 	byte	$24, $15, $29, $2d, $23, $0c, $11, $0d, $f6, $05, $18, $2a, $38, $46, $5d, $69
125c7     69 08 D5 DB 
125cb     A6 B3 C9 D5 
125cf     C0 A6 B3 B2 
125d3     BF F9 03 0D | 	byte	$69, $08, $d5, $db, $a6, $b3, $c9, $d5, $c0, $a6, $b3, $b2, $bf, $f9, $03, $0d
125d7     11 1F 2C 21 
125db     19 0A 13 00 
125df     F8 0A 1E 2B 
125e3     39 4D 60 6F | 	byte	$11, $1f, $2c, $21, $19, $0a, $13, $00, $f8, $0a, $1e, $2b, $39, $4d, $60, $6f
125e7     66 09 DA CC 
125eb     A4 B9 CD D3 
125ef     AE AB B7 AF 
125f3     D6 FD 07 05 | 	byte	$66, $09, $da, $cc, $a4, $b9, $cd, $d3, $ae, $ab, $b7, $af, $d6, $fd, $07, $05
125f7     16 25 21 22 
125fb     0F 0D 10 F8 
125ff     FE 0F 21 2D 
12603     3A 51 62 76 | 	byte	$16, $25, $21, $22, $0f, $0d, $10, $f8, $fe, $0f, $21, $2d, $3a, $51, $62, $76
12607     54 17 DE B7 
1260b     A7 C2 D0 C9 
1260f     A3 B0 B8 B2 
12613     E5 FF 04 03 | 	byte	$54, $17, $de, $b7, $a7, $c2, $d0, $c9, $a3, $b0, $b8, $b2, $e5, $ff, $04, $03
12617     1B 24 1E 1A 
1261b     0B 12 08 F6 
1261f     05 17 24 2F 
12623     41 55 67 75 | 	byte	$1b, $24, $1e, $1a, $0b, $12, $08, $f6, $05, $17, $24, $2f, $41, $55, $67, $75
12627     50 12 D8 A8 
1262b     AD C8 CF BA 
1262f     A2 B2 B4 BD 
12633     F2 01 F0 14 | 	byte	$50, $12, $d8, $a8, $ad, $c8, $cf, $ba, $a2, $b2, $b4, $bd, $f2, $01, $f0, $14
12637     1E 17 1D 10 
1263b     0B 11 FF F9 
1263f     0B 19 25 31 
12643     45 59 6D 66 | 	byte	$1e, $17, $1d, $10, $0b, $11, $ff, $f9, $0b, $19, $25, $31, $45, $59, $6d, $66
12647     58 1A C5 A7 
1264b     B5 CB C7 AC 
1264f     A9 B5 B1 C9 
12653     FC F6 F5 17 | 	byte	$58, $1a, $c5, $a7, $b5, $cb, $c7, $ac, $a9, $b5, $b1, $c9, $fc, $f6, $f5, $17
12657     15 1C 16 0B 
1265b     0F 0D F8 FE 
1265f     10 1D 25 36 
12663     49 5C 6F 5C | 	byte	$15, $1c, $16, $0b, $0f, $0d, $f8, $fe, $10, $1d, $25, $36, $49, $5c, $6f, $5c
12667     5C 17 BD A5 
1266b     BA C9 BE A7 
1266f     B0 B6 B0 D8 
12673     FE E5 10 15 | 	byte	$5c, $17, $bd, $a5, $ba, $c9, $be, $a7, $b0, $b6, $b0, $d8, $fe, $e5, $10, $15
12677     11 1D 0E 0A 
1267b     11 07 F7 04 
1267f     14 1D 28 3B 
12683     4E 61 66 5F | 	byte	$11, $1d, $0e, $0a, $11, $07, $f7, $04, $14, $1d, $28, $3b, $4e, $61, $66, $5f
12687     5D FB B9 A8 
1268b     BD C2 B9 A3 
1268f     B1 B3 B3 E4 
12693     EA F0 17 08 | 	byte	$5d, $fb, $b9, $a8, $bd, $c2, $b9, $a3, $b1, $b3, $b3, $e4, $ea, $f0, $17, $08
12697     19 1B 08 0E 
1269b     10 FF FB 0D 
1269f     19 21 2E 44 
126a3     52 68 5A 65 | 	byte	$19, $1b, $08, $0e, $10, $ff, $fb, $0d, $19, $21, $2e, $44, $52, $68, $5a, $65
126a7     50 F4 B1 AD 
126ab     BC BB B7 A6 
126af     B4 AD BB F0 
126b3     DB 04 0E 0F | 	byte	$50, $f4, $b1, $ad, $bc, $bb, $b7, $a6, $b4, $ad, $bb, $f0, $db, $04, $0e, $0f
126b7     1D 15 06 13 
126bb     11 FE 04 14 
126bf     1E 26 36 46 
126c3     55 61 52 5C | 	byte	$1d, $15, $06, $13, $11, $fe, $04, $14, $1e, $26, $36, $46, $55, $61, $52, $5c
126c7     36 DE AE AB 
126cb     AE B1 B2 A8 
126cf     B2 AD C5 E4 
126d3     EC 0E 10 1D | 	byte	$36, $de, $ae, $ab, $ae, $b1, $b2, $a8, $b2, $ad, $c5, $e4, $ec, $0e, $10, $1d
126d7     23 11 0B 15 
126db     0B FB 07 13 
126df     17 20 32 3F 
126e3     52 4E 50 4A | 	byte	$23, $11, $0b, $15, $0b, $fb, $07, $13, $17, $20, $32, $3f, $52, $4e, $50, $4a
126e7     2A DB B5 AF 
126eb     B1 BC BB BA 
126ef     BA C3 D5 EA 
126f3     00 14 1C 26 | 	byte	$2a, $db, $b5, $af, $b1, $bc, $bb, $ba, $ba, $c3, $d5, $ea, $00, $14, $1c, $26
126f7     21 0E 10 17 
126fb     05 FE 0D 13 
126ff     16 23 31 40 
12703     4E 40 4A 3C | 	byte	$21, $0e, $10, $17, $05, $fe, $0d, $13, $16, $23, $31, $40, $4e, $40, $4a, $3c
12707     1C D7 B6 AD 
1270b     B3 C2 BD C2 
1270f     BD CE DF F3 
12713     08 19 1E 24 | 	byte	$1c, $d7, $b6, $ad, $b3, $c2, $bd, $c2, $bd, $ce, $df, $f3, $08, $19, $1e, $24
12717     18 0B 12 12 
1271b     FC 00 0C 0F 
1271f     15 23 31 3E 
12723     44 3B 3B 35 | 	byte	$18, $0b, $12, $12, $fc, $00, $0c, $0f, $15, $23, $31, $3e, $44, $3b, $3b, $35
12727     12 CD B2 AC 
1272b     B8 C8 BD C4 
1272f     C5 D7 E8 FC 
12733     10 1B 1F 1F | 	byte	$12, $cd, $b2, $ac, $b8, $c8, $bd, $c4, $c5, $d7, $e8, $fc, $10, $1b, $1f, $1f
12737     10 0C 14 09 
1273b     F9 04 0C 0D 
1273f     15 24 2F 3D 
12743     38 38 32 2D | 	byte	$10, $0c, $14, $09, $f9, $04, $0c, $0d, $15, $24, $2f, $3d, $38, $38, $32, $2d
12747     04 C7 B0 B0 
1274b     BC CC C0 C3 
1274f     CF DE F0 03 
12753     13 1C 1E 18 | 	byte	$04, $c7, $b0, $b0, $bc, $cc, $c0, $c3, $cf, $de, $f0, $03, $13, $1c, $1e, $18
12757     0B 0D 11 FF 
1275b     FA 06 0A 0C 
1275f     17 24 30 3B 
12763     2F 2E 30 27 | 	byte	$0b, $0d, $11, $ff, $fa, $06, $0a, $0c, $17, $24, $30, $3b, $2f, $2e, $30, $27
12767     FA C3 B0 B6 
1276b     C2 CD C2 C5 
1276f     D6 E4 F6 08 
12773     15 1C 1C 11 | 	byte	$fa, $c3, $b0, $b6, $c2, $cd, $c2, $c5, $d6, $e4, $f6, $08, $15, $1c, $1c, $11
12777     09 10 0B FB 
1277b     FF 08 09 0F 
1277f     1A 27 31 36 
12783     29 2A 2C 21 | 	byte	$09, $10, $0b, $fb, $ff, $08, $09, $0f, $1a, $27, $31, $36, $29, $2a, $2c, $21
12787     EE BD B4 BD 
1278b     C7 CD C3 CD 
1278f     DC EB FC 0C 
12793     17 1B 16 0B | 	byte	$ee, $bd, $b4, $bd, $c7, $cd, $c3, $cd, $dc, $eb, $fc, $0c, $17, $1b, $16, $0b
12797     0B 11 05 FA 
1279b     03 08 0A 10 
1279f     1E 27 32 2D 
127a3     23 29 29 19 | 	byte	$0b, $11, $05, $fa, $03, $08, $0a, $10, $1e, $27, $32, $2d, $23, $29, $29, $19
127a7     E0 BB BD C2 
127ab     CB CE C5 D5 
127af     E3 F0 03 10 
127b3     19 19 12 09 | 	byte	$e0, $bb, $bd, $c2, $cb, $ce, $c5, $d5, $e3, $f0, $03, $10, $19, $19, $12, $09
127b7     0E 0F FE FB 
127bb     05 08 0B 14 
127bf     1F 29 31 23 
127c3     24 28 25 10 | 	byte	$0e, $0f, $fe, $fb, $05, $08, $0b, $14, $1f, $29, $31, $23, $24, $28, $25, $10
127c7     D8 BE C4 C8 
127cb     CE CF CC DA 
127cf     E8 F8 08 13 
127d3     19 16 0D 0A | 	byte	$d8, $be, $c4, $c8, $ce, $cf, $cc, $da, $e8, $f8, $08, $13, $19, $16, $0d, $0a
127d7     11 0A FD 00 
127db     07 09 0C 17 
127df     22 2A 2E 1C 
127e3     24 27 22 01 | 	byte	$11, $0a, $fd, $00, $07, $09, $0c, $17, $22, $2a, $2e, $1c, $24, $27, $22, $01
127e7     D3 C5 CA CC 
127eb     D2 D1 D3 E0 
127ef     ED FC 0B 14 
127f3     18 12 09 0B | 	byte	$d3, $c5, $ca, $cc, $d2, $d1, $d3, $e0, $ed, $fc, $0b, $14, $18, $12, $09, $0b
127f7     0F 03 FB 01 
127fb     07 09 0F 18 
127ff     22 29 25 1D 
12803     22 24 19 F5 | 	byte	$0f, $03, $fb, $01, $07, $09, $0f, $18, $22, $29, $25, $1d, $22, $24, $19, $f5
12807     CF CC CE CF 
1280b     D5 D0 D8 E4 
1280f     F2 00 0D 14 
12813     15 0C 08 0E | 	byte	$cf, $cc, $ce, $cf, $d5, $d0, $d8, $e4, $f2, $00, $0d, $14, $15, $0c, $08, $0e
12817     0D FF FD 03 
1281b     08 09 11 1B 
1281f     22 28 1D 1E 
12823     22 21 10 EB | 	byte	$0d, $ff, $fd, $03, $08, $09, $11, $1b, $22, $28, $1d, $1e, $22, $21, $10, $eb
12827     D3 D2 D3 D4 
1282b     D9 D5 DE E9 
1282f     F7 04 0F 14 
12833     11 0A 09 0E | 	byte	$d3, $d2, $d3, $d4, $d9, $d5, $de, $e9, $f7, $04, $0f, $14, $11, $0a, $09, $0e
12837     07 FD FE 04 
1283b     07 0B 13 1B 
1283f     22 22 19 1E 
12843     20 1C 07 E8 | 	byte	$07, $fd, $fe, $04, $07, $0b, $13, $1b, $22, $22, $19, $1e, $20, $1c, $07, $e8
12847     D6 D4 D5 D7 
1284b     DA D8 E1 ED 
1284f     F9 05 0E 13 
12853     0F 09 09 0B | 	byte	$d6, $d4, $d5, $d7, $da, $d8, $e1, $ed, $f9, $05, $0e, $13, $0f, $09, $09, $0b
12857     01 FC 00 05 
1285b     08 0C 14 1C 
1285f     22 1E 19 1D 
12863     1E 19 01 E7 | 	byte	$01, $fc, $00, $05, $08, $0c, $14, $1c, $22, $1e, $19, $1d, $1e, $19, $01, $e7
12867     D9 D9 D9 DB 
1286b     DC DB E6 F1 
1286f     FD 07 10 13 
12873     0E 09 09 06 | 	byte	$d9, $d9, $d9, $db, $dc, $db, $e6, $f1, $fd, $07, $10, $13, $0e, $09, $09, $06
12877     FE FC 02 05 
1287b     07 0C 14 1B 
1287f     1D 1B 18 1B 
12883     1B 14 FB E5 | 	byte	$fe, $fc, $02, $05, $07, $0c, $14, $1b, $1d, $1b, $18, $1b, $1b, $14, $fb, $e5
12887     DB DB DC DC 
1288b     DC DD E9 F4 
1288f     FF 08 0F 11 
12893     0D 09 08 02 | 	byte	$db, $db, $dc, $dc, $dc, $dd, $e9, $f4, $ff, $08, $0f, $11, $0d, $09, $08, $02
12897     FB FD 02 04 
1289b     07 0D 14 1A 
1289f     1B 18 18 1A 
128a3     19 10 F8 E4 | 	byte	$fb, $fd, $02, $04, $07, $0d, $14, $1a, $1b, $18, $18, $1a, $19, $10, $f8, $e4
128a7     E0 DF DF DE 
128ab     E0 E0 ED F7 
128af     01 0A 10 10 
128b3     0E 0B 07 FF | 	byte	$e0, $df, $df, $de, $e0, $e0, $ed, $f7, $01, $0a, $10, $10, $0e, $0b, $07, $ff
128b7     FC FF 03 04 
128bb     07 0D 14 18 
128bf     19 15 17 18 
128c3     17 0A F5 E5 | 	byte	$fc, $ff, $03, $04, $07, $0d, $14, $18, $19, $15, $17, $18, $17, $0a, $f5, $e5
128c7     E2 E1 E0 DE 
128cb     E2 E3 EE F9 
128cf     01 09 0E 0F 
128d3     0D 09 03 FD | 	byte	$e2, $e1, $e0, $de, $e2, $e3, $ee, $f9, $01, $09, $0e, $0f, $0d, $09, $03, $fd
128d7     FC FF 02 04 
128db     08 0D 14 16 
128df     18 14 16 17 
128e3     14 07 F2 E8 | 	byte	$fc, $ff, $02, $04, $08, $0d, $14, $16, $18, $14, $16, $17, $14, $07, $f2, $e8
128e7     E5 E4 E2 E0 
128eb     E4 E7 F2 FB 
128ef     03 09 0D 0E 
128f3     0D 09 01 FC | 	byte	$e5, $e4, $e2, $e0, $e4, $e7, $f2, $fb, $03, $09, $0d, $0e, $0d, $09, $01, $fc
128f7     FD 00 02 04 
128fb     09 0E 13 15 
128ff     14 13 14 15 
12903     11 03 F1 EA | 	byte	$fd, $00, $02, $04, $09, $0e, $13, $15, $14, $13, $14, $15, $11, $03, $f1, $ea
12907     E7 E5 E3 E2 
1290b     E6 EA F4 FC 
1290f     04 09 0C 0E 
12913     0C 06 FF FC | 	byte	$e7, $e5, $e3, $e2, $e6, $ea, $f4, $fc, $04, $09, $0c, $0e, $0c, $06, $ff, $fc
12917     FD 00 01 05 
1291b     09 0F 10 14 
1291f     11 12 14 14 
12923     0E FF F1 EC | 	byte	$fd, $00, $01, $05, $09, $0f, $10, $14, $11, $12, $14, $14, $0e, $ff, $f1, $ec
12927     E9 E7 E5 E4 
1292b     E8 ED F6 FD 
1292f     03 08 0B 0D 
12933     0B 04 FD FD | 	byte	$e9, $e7, $e5, $e4, $e8, $ed, $f6, $fd, $03, $08, $0b, $0d, $0b, $04, $fd, $fd
12937     FE 00 02 05 
1293b     09 0E 10 13 
1293f     10 12 13 12 
12943     0A FD F2 EE | 	byte	$fe, $00, $02, $05, $09, $0e, $10, $13, $10, $12, $13, $12, $0a, $fd, $f2, $ee
12947     EB E8 E6 E6 
1294b     EA EF F8 FE 
1294f     03 07 0B 0D 
12953     09 02 FD FD | 	byte	$eb, $e8, $e6, $e6, $ea, $ef, $f8, $fe, $03, $07, $0b, $0d, $09, $02, $fd, $fd
12957     FF 00 02 05 
1295b     0A 0D 10 10 
1295f     0F 11 11 10 
12963     07 FB F2 EE | 	byte	$ff, $00, $02, $05, $0a, $0d, $10, $10, $0f, $11, $11, $10, $07, $fb, $f2, $ee
12967     EB E9 E6 E8 
1296b     EB F2 F9 FF 
1296f     04 07 0B 0C 
12973     08 00 FD FE | 	byte	$eb, $e9, $e6, $e8, $eb, $f2, $f9, $ff, $04, $07, $0b, $0c, $08, $00, $fd, $fe
12977     FF 00 02 05 
1297b     09 0C 0F 0E 
1297f     0F 0F 10 0E 
12983     05 FA F3 EF | 	byte	$ff, $00, $02, $05, $09, $0c, $0f, $0e, $0f, $0f, $10, $0e, $05, $fa, $f3, $ef
12987     ED EA E7 EB 
1298b     EE F4 FA 00 
1298f     04 08 0B 0C 
12993     06 00 FE FF | 	byte	$ed, $ea, $e7, $eb, $ee, $f4, $fa, $00, $04, $08, $0b, $0c, $06, $00, $fe, $ff
12997     01 01 03 06 
1299b     0A 0C 0F 0D 
1299f     0E 0F 10 0C 
129a3     04 F9 F4 F0 | 	byte	$01, $01, $03, $06, $0a, $0c, $0f, $0d, $0e, $0f, $10, $0c, $04, $f9, $f4, $f0
129a7     EE EB E9 ED 
129ab     EF F5 FB 00 
129af     04 08 0B 09 
129b3     04 FF FE FF | 	byte	$ee, $eb, $e9, $ed, $ef, $f5, $fb, $00, $04, $08, $0b, $09, $04, $ff, $fe, $ff
129b7     00 01 03 06 
129bb     09 0C 0D 0C 
129bf     0D 0E 0E 09 
129c3     01 FA F5 F1 | 	byte	$00, $01, $03, $06, $09, $0c, $0d, $0c, $0d, $0e, $0e, $09, $01, $fa, $f5, $f1
129c7     EE EB EB EE 
129cb     F0 F6 FC 00 
129cf     03 08 0A 08 
129d3     03 00 FF 01 | 	byte	$ee, $eb, $eb, $ee, $f0, $f6, $fc, $00, $03, $08, $0a, $08, $03, $00, $ff, $01
129d7     01 01 03 07 
129db     09 0C 0B 0C 
129df     0D 0D 0C 08 
129e3     00 F9 F5 F2 | 	byte	$01, $01, $03, $07, $09, $0c, $0b, $0c, $0d, $0d, $0c, $08, $00, $f9, $f5, $f2
129e7     EE ED ED F0 
129eb     F3 F8 FD 01 
129ef     04 08 09 07 
129f3     02 00 00 01 | 	byte	$ee, $ed, $ed, $f0, $f3, $f8, $fd, $01, $04, $08, $09, $07, $02, $00, $00, $01
129f7     01 02 04 07 
129fb     08 0A 09 0A 
129ff     0B 0C 0A 05 
12a03     FF F8 F4 F1 | 	byte	$01, $02, $04, $07, $08, $0a, $09, $0a, $0b, $0c, $0a, $05, $ff, $f8, $f4, $f1
12a07     EF EE EF F1 
12a0b     F3 F7 FC 00 
12a0f     04 07 08 05 
12a13     02 00 00 01 | 	byte	$ef, $ee, $ef, $f1, $f3, $f7, $fc, $00, $04, $07, $08, $05, $02, $00, $00, $01
12a17     02 02 05 07 
12a1b     09 09 0A 0B 
12a1f     0B 0B 09 05 
12a23     FE F9 F6 F2 | 	byte	$02, $02, $05, $07, $09, $09, $0a, $0b, $0b, $0b, $09, $05, $fe, $f9, $f6, $f2
12a27     F0 EF F1 F1 
12a2b     F5 F9 FE 01 
12a2f     05 07 07 04 
12a33     02 00 01 02 | 	byte	$f0, $ef, $f1, $f1, $f5, $f9, $fe, $01, $05, $07, $07, $04, $02, $00, $01, $02
12a37     02 03 05 06 
12a3b     08 08 09 0A 
12a3f     0A 0A 08 03 
12a43     FD F8 F5 F1 | 	byte	$02, $03, $05, $06, $08, $08, $09, $0a, $0a, $0a, $08, $03, $fd, $f8, $f5, $f1
12a47     F0 F0 F1 F2 
12a4b     F6 FA FE 01 
12a4f     05 06 05 04 
12a53     02 01 01 02 | 	byte	$f0, $f0, $f1, $f2, $f6, $fa, $fe, $01, $05, $06, $05, $04, $02, $01, $01, $02
12a57     02 03 05 06 
12a5b     07 07 09 0A 
12a5f     0A 09 07 02 
12a63     FD F9 F5 F3 | 	byte	$02, $03, $05, $06, $07, $07, $09, $0a, $0a, $09, $07, $02, $fd, $f9, $f5, $f3
12a67     F2 F2 F2 F4 
12a6b     F8 FB FF 02 
12a6f     06 06 05 04 
12a73     03 03 03 03 | 	byte	$f2, $f2, $f2, $f4, $f8, $fb, $ff, $02, $06, $06, $05, $04, $03, $03, $03, $03
12a77     03 04 05 06 
12a7b     06 08 09 09 
12a7f     09 08 06 01 
12a83     FC F8 F4 F4 | 	byte	$03, $04, $05, $06, $06, $08, $09, $09, $09, $08, $06, $01, $fc, $f8, $f4, $f4
12a87     F3 F2 F2 F4 
12a8b     F7 FB FE 02 
12a8f     04 05 04 04 
12a93     03 02 02 02 | 	byte	$f3, $f2, $f2, $f4, $f7, $fb, $fe, $02, $04, $05, $04, $04, $03, $02, $02, $02
12a97     03 04 04 05 
12a9b     06 07 08 08 
12a9f     08 08 05 00 
12aa3     FB F7 F6 F5 | 	byte	$03, $04, $04, $05, $06, $07, $08, $08, $08, $08, $05, $00, $fb, $f7, $f6, $f5
12aa7     F4 F3 F3 F5 
12aab     F8 FB FF 03 
12aaf     05 05 04 04 
12ab3     03 03 03 03 | 	byte	$f4, $f3, $f3, $f5, $f8, $fb, $ff, $03, $05, $05, $04, $04, $03, $03, $03, $03
12ab7     03 04 04 05 
12abb     05 07 07 08 
12abf     07 06 03 FF 
12ac3     FA F7 F6 F5 | 	byte	$03, $04, $04, $05, $05, $07, $07, $08, $07, $06, $03, $ff, $fa, $f7, $f6, $f5
12ac7     F4 F4 F4 F6 
12acb     F9 FC 00 03 
12acf     04 04 04 04 
12ad3     03 03 03 03 | 	byte	$f4, $f4, $f4, $f6, $f9, $fc, $00, $03, $04, $04, $04, $04, $03, $03, $03, $03
12ad7     03 03 04 04 
12adb     06 06 06 06 
12adf     06 05 02 FE 
12ae3     FA F8 F7 F6 | 	byte	$03, $03, $04, $04, $06, $06, $06, $06, $06, $05, $02, $fe, $fa, $f8, $f7, $f6
12ae7     F5 F4 F5 F7 
12aeb     FA FC 01 03 
12aef     04 04 04 04 
12af3     04 03 03 03 | 	byte	$f5, $f4, $f5, $f7, $fa, $fc, $01, $03, $04, $04, $04, $04, $04, $03, $03, $03
12af7     04 03 04 04 
12afb     05 07 07 07 
12aff     06 04 01 FC 
12b03     FA F9 F7 F6 | 	byte	$04, $03, $04, $04, $05, $07, $07, $07, $06, $04, $01, $fc, $fa, $f9, $f7, $f6
12b07     F5 F4 F6 F7 
12b0b     FA FD 01 03 
12b0f     03 04 04 04 
12b13     04 04 03 04 | 	byte	$f5, $f4, $f6, $f7, $fa, $fd, $01, $03, $03, $04, $04, $04, $04, $04, $03, $04
12b17     04 03 03 04 
12b1b     05 06 06 06 
12b1f     05 03 FE FB 
12b23     FA F9 F7 F6 | 	byte	$04, $03, $03, $04, $05, $06, $06, $06, $05, $03, $fe, $fb, $fa, $f9, $f7, $f6
12b27     F5 F4 F6 F8 
12b2b     FB FE 02 03 
12b2f     03 04 04 04 
12b33     04 04 04 03 | 	byte	$f5, $f4, $f6, $f8, $fb, $fe, $02, $03, $03, $04, $04, $04, $04, $04, $04, $03
12b37     03 03 03 04 
12b3b     04 05 05 05 
12b3f     04 00 FD FC 
12b43     FB F9 F8 F7 | 	byte	$03, $03, $03, $04, $04, $05, $05, $05, $04, $00, $fd, $fc, $fb, $f9, $f8, $f7
12b47     F6 F6 F7 F9 
12b4b     FB 00 03 03 
12b4f     04 04 05 06 
12b53     05 05 04 04 | 	byte	$f6, $f6, $f7, $f9, $fb, $00, $03, $03, $04, $04, $05, $06, $05, $05, $04, $04
12b57     04 03 04 04 
12b5b     05 05 05 04 
12b5f     03 FF FD FC 
12b63     FB FA F9 F8 | 	byte	$04, $03, $04, $04, $05, $05, $05, $04, $03, $ff, $fd, $fc, $fb, $fa, $f9, $f8
12b67     F6 F6 F7 F9 
12b6b     FC 00 02 03 
12b6f     04 04 05 05 
12b73     05 04 04 04 | 	byte	$f6, $f6, $f7, $f9, $fc, $00, $02, $03, $04, $04, $05, $05, $05, $04, $04, $04
12b77     03 03 03 04 
12b7b     04 04 04 03 
12b7f     FF FD FD FC 
12b83     FB FA F9 F8 | 	byte	$03, $03, $03, $04, $04, $04, $04, $03, $ff, $fd, $fd, $fc, $fb, $fa, $f9, $f8
12b87     F7 F7 F8 F9 
12b8b     FC 01 02 03 
12b8f     04 04 05 05 
12b93     05 05 05 04 | 	byte	$f7, $f7, $f8, $f9, $fc, $01, $02, $03, $04, $04, $05, $05, $05, $05, $05, $04
12b97     03 04 04 04 
12b9b     04 04 03 01 
12b9f     FD FD FC FC 
12ba3     FB FA FA F8 | 	byte	$03, $04, $04, $04, $04, $04, $03, $01, $fd, $fd, $fc, $fc, $fb, $fa, $fa, $f8
12ba7     F8 F8 F9 FA 
12bab     FE 02 02 03 
12baf     04 04 05 05 
12bb3     05 05 04 03 | 	byte	$f8, $f8, $f9, $fa, $fe, $02, $02, $03, $04, $04, $05, $05, $05, $05, $04, $03
12bb7     03 03 04 04 
12bbb     03 02 01 FD 
12bbf     FC FC FC FB 
12bc3     FA FA FA F9 | 	byte	$03, $03, $04, $04, $03, $02, $01, $fd, $fc, $fc, $fc, $fb, $fa, $fa, $fa, $f9
12bc7     F8 F9 FA FC 
12bcb     FF 01 02 02 
12bcf     03 04 05 05 
12bd3     05 05 04 03 | 	byte	$f8, $f9, $fa, $fc, $ff, $01, $02, $02, $03, $04, $05, $05, $05, $05, $04, $03
12bd7     03 04 05 04 
12bdb     04 03 FF FD 
12bdf     FD FC FC FB 
12be3     FB FA FA F9 | 	byte	$03, $04, $05, $04, $04, $03, $ff, $fd, $fd, $fc, $fc, $fb, $fb, $fa, $fa, $f9
12be7     F9 FA FA FD 
12beb     01 02 03 03 
12bef     03 04 05 05 
12bf3     05 04 04 03 | 	byte	$f9, $fa, $fa, $fd, $01, $02, $03, $03, $03, $04, $05, $05, $05, $04, $04, $03
12bf7     04 04 04 03 
12bfb     03 00 FD FC 
12bff     FC FC FB FB 
12c03     FA FA FA F9 | 	byte	$04, $04, $04, $03, $03, $00, $fd, $fc, $fc, $fc, $fb, $fb, $fa, $fa, $fa, $f9
12c07     F9 FA FB FE 
12c0b     02 03 03 03 
12c0f     03 04 05 05 
12c13     05 04 04 04 | 	byte	$f9, $fa, $fb, $fe, $02, $03, $03, $03, $03, $04, $05, $05, $05, $04, $04, $04
12c17     04 04 04 03 
12c1b     02 FE FD FC 
12c1f     FC FC FC FB 
12c23     FB FA FA FA | 	byte	$04, $04, $04, $03, $02, $fe, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fa, $fa, $fa
12c27     FA FB FC 00 
12c2b     03 03 04 04 
12c2f     04 05 06 05 
12c33     05 05 04 05 | 	byte	$fa, $fb, $fc, $00, $03, $03, $04, $04, $04, $05, $06, $05, $05, $05, $04, $05
12c37     05 04 04 04 
12c3b     01 FD FD FD 
12c3f     FC FC FB FA 
12c43     FA FA FA F9 | 	byte	$05, $04, $04, $04, $01, $fd, $fd, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fa, $f9
12c47     FA FB FD 00 
12c4b     03 03 03 04 
12c4f     04 04 05 05 
12c53     05 04 04 04 | 	byte	$fa, $fb, $fd, $00, $03, $03, $03, $04, $04, $04, $05, $05, $05, $04, $04, $04
12c57     04 04 04 02 
12c5b     FE FC FD FC 
12c5f     FC FC FB FB 
12c63     FB FA FA FA | 	byte	$04, $04, $04, $02, $fe, $fc, $fd, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fa, $fa
12c67     FA FB FD 01 
12c6b     03 03 04 04 
12c6f     04 05 05 05 
12c73     05 04 04 05 | 	byte	$fa, $fb, $fd, $01, $03, $03, $04, $04, $04, $05, $05, $05, $05, $04, $04, $05
12c77     05 04 03 FF 
12c7b     FD FC FC FC 
12c7f     FC FC FB FB 
12c83     FB FB FA FA | 	byte	$05, $04, $03, $ff, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fa, $fa
12c87     FB FC FF 03 
12c8b     04 04 04 05 
12c8f     05 05 05 05 
12c93     04 04 04 04 | 	byte	$fb, $fc, $ff, $03, $04, $04, $04, $05, $05, $05, $05, $05, $04, $04, $04, $04
12c97     04 04 02 FE 
12c9b     FC FC FC FC 
12c9f     FB FB FB FA 
12ca3     FA FA FA FA | 	byte	$04, $04, $02, $fe, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fa, $fa, $fa, $fa
12ca7     FC FD 01 03 
12cab     04 04 04 04 
12caf     04 05 05 05 
12cb3     04 04 04 04 | 	byte	$fc, $fd, $01, $03, $04, $04, $04, $04, $04, $05, $05, $05, $04, $04, $04, $04
12cb7     04 03 00 FD 
12cbb     FD FC FC FC 
12cbf     FC FB FB FB 
12cc3     FB FB FA FB | 	byte	$04, $03, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fa, $fb
12cc7     FC FE 01 04 
12ccb     04 04 04 04 
12ccf     05 05 05 04 
12cd3     04 05 05 04 | 	byte	$fc, $fe, $01, $04, $04, $04, $04, $04, $05, $05, $05, $04, $04, $05, $05, $04
12cd7     03 01 FE FC 
12cdb     FC FC FC FC 
12cdf     FB FB FB FB 
12ce3     FA FA FA FB | 	byte	$03, $01, $fe, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fa, $fa, $fa, $fb
12ce7     FC FE 02 04 
12ceb     05 04 05 05 
12cef     05 05 05 04 
12cf3     04 04 04 03 | 	byte	$fc, $fe, $02, $04, $05, $04, $05, $05, $05, $05, $05, $04, $04, $04, $04, $03
12cf7     02 FF FD FC 
12cfb     FC FC FC FB 
12cff     FB FB FB FB 
12d03     FB FB FB FC | 	byte	$02, $ff, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc
12d07     FE 00 03 05 
12d0b     05 05 05 06 
12d0f     06 06 05 05 
12d13     05 05 05 03 | 	byte	$fe, $00, $03, $05, $05, $05, $05, $06, $06, $06, $05, $05, $05, $05, $05, $03
12d17     01 FE FD FC 
12d1b     FC FC FC FC 
12d1f     FB FB FB FB 
12d23     FB FB FB FC | 	byte	$01, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc
12d27     FE 01 03 05 
12d2b     05 05 05 05 
12d2f     05 05 05 04 
12d33     04 04 03 01 | 	byte	$fe, $01, $03, $05, $05, $05, $05, $05, $05, $05, $05, $04, $04, $04, $03, $01
12d37     FF FD FC FC 
12d3b     FC FC FC FB 
12d3f     FB FB FB FB 
12d43     FB FB FB FD | 	byte	$ff, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fd
12d47     FF 01 04 06 
12d4b     05 06 05 06 
12d4f     06 06 05 05 
12d53     05 04 02 01 | 	byte	$ff, $01, $04, $06, $05, $06, $05, $06, $06, $06, $05, $05, $05, $04, $02, $01
12d57     FE FC FC FC 
12d5b     FC FC FC FB 
12d5f     FB FC FB FC 
12d63     FC FB FC FE | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fc, $fb, $fc, $fc, $fb, $fc, $fe
12d67     00 02 04 06 
12d6b     06 05 06 06 
12d6f     05 05 05 05 
12d73     04 02 01 00 | 	byte	$00, $02, $04, $06, $06, $05, $06, $06, $05, $05, $05, $05, $04, $02, $01, $00
12d77     FD FC FC FC 
12d7b     FC FB FB FB 
12d7f     FB FB FB FB 
12d83     FB FB FC FE | 	byte	$fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fe
12d87     00 02 04 06 
12d8b     06 06 05 05 
12d8f     05 06 05 05 
12d93     03 02 01 FF | 	byte	$00, $02, $04, $06, $06, $06, $05, $05, $05, $06, $05, $05, $03, $02, $01, $ff
12d97     FD FC FC FD 
12d9b     FD FC FC FC 
12d9f     FC FC FC FC 
12da3     FC FC FD FF | 	byte	$fd, $fc, $fc, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $ff
12da7     00 02 05 06 
12dab     06 06 05 05 
12daf     06 05 05 04 
12db3     02 01 00 FD | 	byte	$00, $02, $05, $06, $06, $06, $05, $05, $06, $05, $05, $04, $02, $01, $00, $fd
12db7     FC FC FC FC 
12dbb     FC          | 	byte	$fc[5]
12dbc     FB FB FC FB 
12dc0     FB FB FB FB 
12dc4     FB FD FF 00 
12dc8     02 05 07 06 | 	byte	$fb, $fb, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fd, $ff, $00, $02, $05, $07, $06
12dcc     06 05 06 06 
12dd0     06 05 03 01 
12dd4     01 FF FC FB 
12dd8     FC FC FC FB | 	byte	$06, $05, $06, $06, $06, $05, $03, $01, $01, $ff, $fc, $fb, $fc, $fc, $fc, $fb
12ddc     FB FB FC FC 
12de0     FC FC FC FC 
12de4     FC FE 00 01 
12de8     03 06 07 07 | 	byte	$fb, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $01, $03, $06, $07, $07
12dec     07 07 07 07 
12df0     06 04 03 02 
12df4     01 FE FC FC 
12df8     FC FC FC FC | 	byte	$07, $07, $07, $07, $06, $04, $03, $02, $01, $fe, $fc, $fc, $fc, $fc, $fc, $fc
12dfc     FC FC FC FC 
12e00     FC FC FC FC | 	byte	$fc[8]
12e04     FD FE 00 01 
12e08     03 06 07 07 
12e0c     06 06 06 06 
12e10     05 03 01 01 | 	byte	$fd, $fe, $00, $01, $03, $06, $07, $07, $06, $06, $06, $06, $05, $03, $01, $01
12e14     00 FD FB FC 
12e18     FC FC FC FB 
12e1c     FC FC FC FC 
12e20     FC FC FC FC | 	byte	$00, $fd, $fb, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
12e24     FD 00 00 01 
12e28     04 06 07 07 
12e2c     06 07 07 06 
12e30     04 02 02 01 | 	byte	$fd, $00, $00, $01, $04, $06, $07, $07, $06, $07, $07, $06, $04, $02, $02, $01
12e34     FF FC FC FC 
12e38     FC FC FC FC 
12e3c     FC FC FC FC 
12e40     FC FC FC FC | 	byte	$ff, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
12e44     FE 00 01 01 
12e48     04 07 08 07 
12e4c     07 08 08 05 
12e50     03 01 02 00 | 	byte	$fe, $00, $01, $01, $04, $07, $08, $07, $07, $08, $08, $05, $03, $01, $02, $00
12e54     FD FB FB FC 
12e58     FC FC FC FB 
12e5c     FC FC FC FC 
12e60     FC FC FC FD | 	byte	$fd, $fb, $fb, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd
12e64     FE 00 01 02 
12e68     04 07 07 07 
12e6c     07 08 07 04 
12e70     02 02 02 FF | 	byte	$fe, $00, $01, $02, $04, $07, $07, $07, $07, $08, $07, $04, $02, $02, $02, $ff
12e74     FD FB FC FC 
12e78     FC FC FD FD 
12e7c     FD FD FD FC 
12e80     FD FD FD FD | 	byte	$fd, $fb, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd
12e84     FF 00 01 02 
12e88     05 08 07 07 
12e8c     08 08 06 03 
12e90     02 02 01 FE | 	byte	$ff, $00, $01, $02, $05, $08, $07, $07, $08, $08, $06, $03, $02, $02, $01, $fe
12e94     FC FB FC FC 
12e98     FC FC FC FC 
12e9c     FD FD FC FC 
12ea0     FD FC FC FD | 	byte	$fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fc, $fc, $fd, $fc, $fc, $fd
12ea4     FF 00 01 02 
12ea8     05 07 07 07 
12eac     08 07 04 02 
12eb0     02 02 00 FC | 	byte	$ff, $00, $01, $02, $05, $07, $07, $07, $08, $07, $04, $02, $02, $02, $00, $fc
12eb4     FB FC FC FB 
12eb8     FB FC FD FD 
12ebc     FD FD FC FD 
12ec0     FD FD FD FE | 	byte	$fb, $fc, $fc, $fb, $fb, $fc, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe
12ec4     00 01 01 03 
12ec8     06 08 09 09 
12ecc     09 07 04 03 
12ed0     03 02 FE FC | 	byte	$00, $01, $01, $03, $06, $08, $09, $09, $09, $07, $04, $03, $03, $02, $fe, $fc
12ed4     FC FC FC FC 
12ed8     FC          | 	byte	$fc[5]
12ed9     FD FD FD FE 
12edd     FE FD FD FD 
12ee1     FD FE FF 00 
12ee5     01 01 03 06 | 	byte	$fd, $fd, $fd, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01, $01, $03, $06
12ee9     07 08 09 08 
12eed     05 02 02 02 
12ef1     00 FD FB FB 
12ef5     FB FB FC FC | 	byte	$07, $08, $09, $08, $05, $02, $02, $02, $00, $fd, $fb, $fb, $fb, $fb, $fc, $fc
12ef9     FD FD FE FE 
12efd     FE FD FD FD 
12f01     FD FE FE 00 
12f05     01 01 03 05 | 	byte	$fd, $fd, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $00, $01, $01, $03, $05
12f09     08 09 09 07 
12f0d     04 02 02 02 
12f11     FF FC FB FB 
12f15     FC FC FC FD | 	byte	$08, $09, $09, $07, $04, $02, $02, $02, $ff, $fc, $fb, $fb, $fc, $fc, $fc, $fd
12f19     FD FE FE FE 
12f1d     FE FD FD FD 
12f21     FE FF FF 01 
12f25     01 01 04 06 | 	byte	$fd, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $ff, $ff, $01, $01, $01, $04, $06
12f29     09 0A 09 06 
12f2d     03 02 02 00 
12f31     FD FB FB FA 
12f35     FB FC FD FE | 	byte	$09, $0a, $09, $06, $03, $02, $02, $00, $fd, $fb, $fb, $fa, $fb, $fc, $fd, $fe
12f39     FE FD FE FE 
12f3d     FD FD FD FD 
12f41     FD FF FF 01 
12f45     01 02 04 07 | 	byte	$fe, $fd, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $ff, $ff, $01, $01, $02, $04, $07
12f49     09 0A 08 05 
12f4d     02 02 02 FF 
12f51     FC FA FA FB 
12f55     FC FD FE FE | 	byte	$09, $0a, $08, $05, $02, $02, $02, $ff, $fc, $fa, $fa, $fb, $fc, $fd, $fe, $fe
12f59     FF FF FF FF 
12f5d     FE FE FE FE 
12f61     FE FF 00 01 
12f65     01 02 04 07 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $ff, $00, $01, $01, $02, $04, $07
12f69     0A 09 07 04 
12f6d     02 02 01 FD 
12f71     FB FA FB FB 
12f75     FC FD FE FE | 	byte	$0a, $09, $07, $04, $02, $02, $01, $fd, $fb, $fa, $fb, $fb, $fc, $fd, $fe, $fe
12f79     FE FF FF FF 
12f7d     FD FE FD FD 
12f81     FE FE FF 00 
12f85     01 02 04 08 | 	byte	$fe, $ff, $ff, $ff, $fd, $fe, $fd, $fd, $fe, $fe, $ff, $00, $01, $02, $04, $08
12f89     0A 08 06 03 
12f8d     02 01 FF FC 
12f91     FA FA FA FC 
12f95     FD FE FE FF | 	byte	$0a, $08, $06, $03, $02, $01, $ff, $fc, $fa, $fa, $fa, $fc, $fd, $fe, $fe, $ff
12f99     FF FF FF FF 
12f9d     FE FE FE FE 
12fa1     FF FF 01 01 
12fa5     02 02 05 0A | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $01, $01, $02, $02, $05, $0a
12fa9     0A 08 06 03 
12fad     03 01 FE FB 
12fb1     FA FB FB FD 
12fb5     FE FE FF 00 | 	byte	$0a, $08, $06, $03, $03, $01, $fe, $fb, $fa, $fb, $fb, $fd, $fe, $fe, $ff, $00
12fb9     00 00 00 00 
12fbd     FE FF FE FE 
12fc1     FF FE 00 01 
12fc5     01 02 06 09 | 	byte	$00, $00, $00, $00, $fe, $ff, $fe, $fe, $ff, $fe, $00, $01, $01, $02, $06, $09
12fc9     09 07 04 02 
12fcd     01 FE FB F9 
12fd1     F9 FA FC FD 
12fd5     FE FF FF 00 | 	byte	$09, $07, $04, $02, $01, $fe, $fb, $f9, $f9, $fa, $fc, $fd, $fe, $ff, $ff, $00
12fd9     00 01 01 00 
12fdd     FF FF FF FE 
12fe1     FF FE 01 01 
12fe5     01 03 07 09 | 	byte	$00, $01, $01, $00, $ff, $ff, $ff, $fe, $ff, $fe, $01, $01, $01, $03, $07, $09
12fe9     08 06 03 02 
12fed     00 FD FA FA 
12ff1     FA FB FD FE 
12ff5     FF 00 00 01 | 	byte	$08, $06, $03, $02, $00, $fd, $fa, $fa, $fa, $fb, $fd, $fe, $ff, $00, $00, $01
12ff9     01 01 01 00 
12ffd     FF FF FF FE 
13001     FE FE 00 01 
13005     02 04 08 09 | 	byte	$01, $01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $00, $01, $02, $04, $08, $09
13009     08 05 02 02 
1300d     FE FA F9 F9 
13011     FA FC FD FE 
13015     FF 00 01 01 | 	byte	$08, $05, $02, $02, $fe, $fa, $f9, $f9, $fa, $fc, $fd, $fe, $ff, $00, $01, $01
13019     01 01 01 FF 
1301d     FE FE FE FE 
13021     FD FF 00 01 
13025     02 05 08 08 | 	byte	$01, $01, $01, $ff, $fe, $fe, $fe, $fe, $fd, $ff, $00, $01, $02, $05, $08, $08
13029     06 03 02 FF 
1302d     FB F9 F8 FA 
13031     FB FD FE FF 
13035     01 01 01 02 | 	byte	$06, $03, $02, $ff, $fb, $f9, $f8, $fa, $fb, $fd, $fe, $ff, $01, $01, $01, $02
13039     03 03 02 00 
1303d     FF FF FF FF 
13041     FD FF 01 01 
13045     02 06 08 08 | 	byte	$03, $03, $02, $00, $ff, $ff, $ff, $ff, $fd, $ff, $01, $01, $02, $06, $08, $08
13049     05 02 00 FD 
1304d     FA F8 F9 FA 
13051     FC FE FF 00 
13055     01 02 02 02 | 	byte	$05, $02, $00, $fd, $fa, $f8, $f9, $fa, $fc, $fe, $ff, $00, $01, $02, $02, $02
13059     03 03 02 00 
1305d     FF FF FE FE 
13061     FD FF 01 01 
13065     02 06 07 07 | 	byte	$03, $03, $02, $00, $ff, $ff, $fe, $fe, $fd, $ff, $01, $01, $02, $06, $07, $07
13069     03 01 FE FA 
1306d     F8 F8 F9 FB 
13071     FD FE 00 01 
13075     02 03 03 03 | 	byte	$03, $01, $fe, $fa, $f8, $f8, $f9, $fb, $fd, $fe, $00, $01, $02, $03, $03, $03
13079     03 03 02 00 
1307d     FF FF FF FD 
13081     FD 00 02 01 
13085     04 07 08 06 | 	byte	$03, $03, $02, $00, $ff, $ff, $ff, $fd, $fd, $00, $02, $01, $04, $07, $08, $06
13089     02 00 FC F9 
1308d     F8 F9 FB FD 
13091     FE 00 01 02 
13095     03 03 04 04 | 	byte	$02, $00, $fc, $f9, $f8, $f9, $fb, $fd, $fe, $00, $01, $02, $03, $03, $04, $04
13099     04 04 03 00 
1309d     00 FF FF FC 
130a1     FD 00 01 01 
130a5     03 06 06 03 | 	byte	$04, $04, $03, $00, $00, $ff, $ff, $fc, $fd, $00, $01, $01, $03, $06, $06, $03
130a9     00 FD F9 F7 
130ad     F7 F9 FB FD 
130b1     FF 00 02 03 
130b5     04 04 04 05 | 	byte	$00, $fd, $f9, $f7, $f7, $f9, $fb, $fd, $ff, $00, $02, $03, $04, $04, $04, $05
130b9     05 05 03 00 
130bd     00 FF FE FB 
130c1     FE 00 01 01 
130c5     03 05 05 00 | 	byte	$05, $05, $03, $00, $00, $ff, $fe, $fb, $fe, $00, $01, $01, $03, $05, $05, $00
130c9     FE F9 F7 F7 
130cd     F8 FA FD FE 
130d1     00 02 03 04 
130d5     05 05 05 06 | 	byte	$fe, $f9, $f7, $f7, $f8, $fa, $fd, $fe, $00, $02, $03, $04, $05, $05, $05, $06
130d9     06 05 03 00 
130dd     00 FF FD FB 
130e1     FE 00 00 01 
130e5     04 05 02 FF | 	byte	$06, $05, $03, $00, $00, $ff, $fd, $fb, $fe, $00, $00, $01, $04, $05, $02, $ff
130e9     FB F7 F6 F7 
130ed     F9 FB FE FF 
130f1     01 03 04 05 
130f5     06 06 06 06 | 	byte	$fb, $f7, $f6, $f7, $f9, $fb, $fe, $ff, $01, $03, $04, $05, $06, $06, $06, $06
130f9     06 05 02 00 
130fd     00 FE FB FB 
13101     FE 00 FF 01 
13105     04 04 FF FD | 	byte	$06, $05, $02, $00, $00, $fe, $fb, $fb, $fe, $00, $ff, $01, $04, $04, $ff, $fd
13109     F8 F5 F6 F8 
1310d     FA FC FF 01 
13111     03 04 06 06 
13115     07 07 07 08 | 	byte	$f8, $f5, $f6, $f8, $fa, $fc, $ff, $01, $03, $04, $06, $06, $07, $07, $07, $08
13119     07 06 02 01 
1311d     00 FF FA FD 
13121     FF FF FE 00 
13125     03 00 FC F9 | 	byte	$07, $06, $02, $01, $00, $ff, $fa, $fd, $ff, $ff, $fe, $00, $03, $00, $fc, $f9
13129     F5 F5 F7 F9 
1312d     FB FD 00 02 
13131     04 06 07 08 
13135     08 08 08 08 | 	byte	$f5, $f5, $f7, $f9, $fb, $fd, $00, $02, $04, $06, $07, $08, $08, $08, $08, $08
13139     07 06 01 00 
1313d     FF FD F9 FC 
13141     FE FD FD FF 
13145     01 FC F9 F5 | 	byte	$07, $06, $01, $00, $ff, $fd, $f9, $fc, $fe, $fd, $fd, $ff, $01, $fc, $f9, $f5
13149     F4 F5 F7 FA 
1314d     FC FF 01 04 
13151     05 07 08 09 
13155     09 09 09 09 | 	byte	$f4, $f5, $f7, $fa, $fc, $ff, $01, $04, $05, $07, $08, $09, $09, $09, $09, $09
13159     08 06 01 00 
1315d     FF FB FA FD 
13161     FE FC FE 01 
13165     FF FA F7 F4 | 	byte	$08, $06, $01, $00, $ff, $fb, $fa, $fd, $fe, $fc, $fe, $01, $ff, $fa, $f7, $f4
13169     F5 F7 F9 FC 
1316d     FF 01 03 05 
13171     07 08 09 0A 
13175     09 09 09 09 | 	byte	$f5, $f7, $f9, $fc, $ff, $01, $03, $05, $07, $08, $09, $0a, $09, $09, $09, $09
13179     08 05 01 00 
1317d     FF FA FA FD 
13181     FC FB FD FF 
13185     FB F8 F5 F4 | 	byte	$08, $05, $01, $00, $ff, $fa, $fa, $fd, $fc, $fb, $fd, $ff, $fb, $f8, $f5, $f4
13189     F5 F8 FA FD 
1318d     FF 01 04 05 
13191     08 09 09 09 
13195     09 09 09 09 | 	byte	$f5, $f8, $fa, $fd, $ff, $01, $04, $05, $08, $09, $09, $09, $09, $09, $09, $09
13199     07 03 01 00 
1319d     FE F8 FB FD 
131a1     FA FB FD FC 
131a5     F8 F6 F4 F5 | 	byte	$07, $03, $01, $00, $fe, $f8, $fb, $fd, $fa, $fb, $fd, $fc, $f8, $f6, $f4, $f5
131a9     F7 F9 FC FE 
131ad     01 03 06 07 
131b1     08 09 0A 0A 
131b5     0A 09 09 08 | 	byte	$f7, $f9, $fc, $fe, $01, $03, $06, $07, $08, $09, $0a, $0a, $0a, $09, $09, $08
131b9     07 02 00 FF 
131bd     FD F9 FC FB 
131c1     F9 FB FD F9 
131c5     F7 F5 F4 F6 | 	byte	$07, $02, $00, $ff, $fd, $f9, $fc, $fb, $f9, $fb, $fd, $f9, $f7, $f5, $f4, $f6
131c9     F8 FA FD 00 
131cd     02 04 06 08 
131d1     09 0A 0A 0A 
131d5     0A 09 09 07 | 	byte	$f8, $fa, $fd, $00, $02, $04, $06, $08, $09, $0a, $0a, $0a, $0a, $09, $09, $07
131d9     05 00 FF FF 
131dd     FA F9 FC F8 
131e1     F8 FA FB F7 
131e5     F6 F4 F5 F7 | 	byte	$05, $00, $ff, $ff, $fa, $f9, $fc, $f8, $f8, $fa, $fb, $f7, $f6, $f4, $f5, $f7
131e9     F9 FC FE 01 
131ed     03 05 07 09 
131f1     0A 0A 0A 0B 
131f5     0A 0A 09 08 | 	byte	$f9, $fc, $fe, $01, $03, $05, $07, $09, $0a, $0a, $0a, $0b, $0a, $0a, $09, $08
131f9     05 00 00 FF 
131fd     FA FB FB F7 
13201     F8 FB F7 F6 
13205     F5 F4 F6 F8 | 	byte	$05, $00, $00, $ff, $fa, $fb, $fb, $f7, $f8, $fb, $f7, $f6, $f5, $f4, $f6, $f8
13209     FA FD FF 02 
1320d     04 06 08 09 
13211     0B 0B 0B 0A 
13215     0A 09 08 07 | 	byte	$fa, $fd, $ff, $02, $04, $06, $08, $09, $0b, $0b, $0b, $0a, $0a, $09, $08, $07
13219     03 00 FF FE 
1321d     F9 FA F8 F5 
13221     F8 F8 F5 F5 
13225     F4 F5 F7 F9 | 	byte	$03, $00, $ff, $fe, $f9, $fa, $f8, $f5, $f8, $f8, $f5, $f5, $f4, $f5, $f7, $f9
13229     FC FE 01 03 
1322d     05 07 09 0A 
13231     0B 0B 0B 0B 
13235     0A 09 08 06 | 	byte	$fc, $fe, $01, $03, $05, $07, $09, $0a, $0b, $0b, $0b, $0b, $0a, $09, $08, $06
13239     02 00 FF FD 
1323d     F9 F9 F6 F6 
13241     F8 F6 F3 F5 
13245     F5 F7 F9 FC | 	byte	$02, $00, $ff, $fd, $f9, $f9, $f6, $f6, $f8, $f6, $f3, $f5, $f5, $f7, $f9, $fc
13249     FE 00 03 05 
1324d     08 09 0A 0B 
13251     0C 0C 0C 0B 
13255     0A 0A 08 05 | 	byte	$fe, $00, $03, $05, $08, $09, $0a, $0b, $0c, $0c, $0c, $0b, $0a, $0a, $08, $05
13259     00 00 00 FC 
1325d     F8 F5 F4 F5 
13261     F6 F2 F3 F4 
13265     F5 F7 FA FC | 	byte	$00, $00, $00, $fc, $f8, $f5, $f4, $f5, $f6, $f2, $f3, $f4, $f5, $f7, $fa, $fc
13269     FF 01 03 05 
1326d     08 09 0B 0C 
13271     0C 0C 0B 0B 
13275     0A 09 07 03 | 	byte	$ff, $01, $03, $05, $08, $09, $0b, $0c, $0c, $0c, $0b, $0b, $0a, $09, $07, $03
13279     00 00 FF FA 
1327d     F5 F3 F4 F5 
13281     F3 F0 F3 F5 
13285     F6 F9 FB FE | 	byte	$00, $00, $ff, $fa, $f5, $f3, $f4, $f5, $f3, $f0, $f3, $f5, $f6, $f9, $fb, $fe
13289     01 03 05 07 
1328d     09 0B 0C 0C 
13291     0D 0C 0C 0A 
13295     0A 08 07 01 | 	byte	$01, $03, $05, $07, $09, $0b, $0c, $0c, $0d, $0c, $0c, $0a, $0a, $08, $07, $01
13299     00 00 FF F8 
1329d     F2 F2 F4 F4 
132a1     F0 F0 F3 F6 
132a5     F8 FA FD FF | 	byte	$00, $00, $ff, $f8, $f2, $f2, $f4, $f4, $f0, $f0, $f3, $f6, $f8, $fa, $fd, $ff
132a9     02 04 06 08 
132ad     0A 0B 0C 0D 
132b1     0D 0C 0B 0A 
132b5     0A 08 04 00 | 	byte	$02, $04, $06, $08, $0a, $0b, $0c, $0d, $0d, $0c, $0b, $0a, $0a, $08, $04, $00
132b9     FF 00 FD F4 
132bd     F0 F2 F3 F1 
132c1     ED F1 F5 F7 
132c5     F9 FC FE 01 | 	byte	$ff, $00, $fd, $f4, $f0, $f2, $f3, $f1, $ed, $f1, $f5, $f7, $f9, $fc, $fe, $01
132c9     03 05 07 09 
132cd     0B 0C 0D 0D 
132d1     0D 0D 0B 0B 
132d5     0A 08 03 01 | 	byte	$03, $05, $07, $09, $0b, $0c, $0d, $0d, $0d, $0d, $0b, $0b, $0a, $08, $03, $01
132d9     01 00 FA F0 
132dd     F1 F3 F2 EE 
132e1     EB F1 F6 F7 
132e5     FA FE 00 02 | 	byte	$01, $00, $fa, $f0, $f1, $f3, $f2, $ee, $eb, $f1, $f6, $f7, $fa, $fe, $00, $02
132e9     05 06 09 0A 
132ed     0C 0D 0D 0E 
132f1     0D 0C 0B 0A 
132f5     09 07 01 00 | 	byte	$05, $06, $09, $0a, $0c, $0d, $0d, $0e, $0d, $0c, $0b, $0a, $09, $07, $01, $00
132f9     00 FD F6 EE 
132fd     F0 F3 EF EA 
13301     EB F2 F6 F8 
13305     FC FF 01 04 | 	byte	$00, $fd, $f6, $ee, $f0, $f3, $ef, $ea, $eb, $f2, $f6, $f8, $fc, $ff, $01, $04
13309     06 08 0A 0B 
1330d     0C 0D 0E 0E 
13311     0D 0C 0B 0A 
13315     08 05 01 01 | 	byte	$06, $08, $0a, $0b, $0c, $0d, $0e, $0e, $0d, $0c, $0b, $0a, $08, $05, $01, $01
13319     FF FA F1 EE 
1331d     F2 F2 ED E8 
13321     EC F3 F7 FA 
13325     FF 01 04 06 | 	byte	$ff, $fa, $f1, $ee, $f2, $f2, $ed, $e8, $ec, $f3, $f7, $fa, $ff, $01, $04, $06
13329     08 0A 0C 0D 
1332d     0E 0F 0F 0F 
13331     0E 0D 0B 0A 
13335     08 03 01 00 | 	byte	$08, $0a, $0c, $0d, $0e, $0f, $0f, $0f, $0e, $0d, $0b, $0a, $08, $03, $01, $00
13339     FC F6 EF EF 
1333d     F2 EF E9 E6 
13341     ED F3 F8 FC 
13345     FF 02 04 07 | 	byte	$fc, $f6, $ef, $ef, $f2, $ef, $e9, $e6, $ed, $f3, $f8, $fc, $ff, $02, $04, $07
13349     08 0A 0C 0D 
1334d     0E 0F 0F 0E 
13351     0D 0C 0B 09 
13355     07 03 01 FF | 	byte	$08, $0a, $0c, $0d, $0e, $0f, $0f, $0e, $0d, $0c, $0b, $09, $07, $03, $01, $ff
13359     F9 F2 EF F0 
1335d     F1 ED E5 E6 
13361     EE F5 FA FE 
13365     01 04 06 08 | 	byte	$f9, $f2, $ef, $f0, $f1, $ed, $e5, $e6, $ee, $f5, $fa, $fe, $01, $04, $06, $08
13369     0A 0C 0D 0E 
1336d     0F 10 10 0F 
13371     0E 0C 0B 09 
13375     05 02 00 FB | 	byte	$0a, $0c, $0d, $0e, $0f, $10, $10, $0f, $0e, $0c, $0b, $09, $05, $02, $00, $fb
13379     F5 F2 EF F1 
1337d     F0 E9 E3 E7 
13381     EF F6 FC 00 
13385     03 05 08 09 | 	byte	$f5, $f2, $ef, $f1, $f0, $e9, $e3, $e7, $ef, $f6, $fc, $00, $03, $05, $08, $09
13389     0C 0D 0E 0F 
1338d     0F 10 0F 0E 
13391     0D 0B 0A 09 
13395     04 01 FD F8 | 	byte	$0c, $0d, $0e, $0f, $0f, $10, $0f, $0e, $0d, $0b, $0a, $09, $04, $01, $fd, $f8
13399     F1 F1 F0 F0 
1339d     ED E5 E1 E7 
133a1     F0 F8 FE 02 
133a5     05 07 09 0B | 	byte	$f1, $f1, $f0, $f0, $ed, $e5, $e1, $e7, $f0, $f8, $fe, $02, $05, $07, $09, $0b
133a9     0C 0E 0F 10 
133ad     10 10 10 0F 
133b1     0E 0C 0A 08 
133b5     03 00 FC F4 | 	byte	$0c, $0e, $0f, $10, $10, $10, $10, $0f, $0e, $0c, $0a, $08, $03, $00, $fc, $f4
133b9     F2 F3 F0 EF 
133bd     EA E2 E0 E8 
133c1     F1 F9 00 04 
133c5     06 09 0A 0C | 	byte	$f2, $f3, $f0, $ef, $ea, $e2, $e0, $e8, $f1, $f9, $00, $04, $06, $09, $0a, $0c
133c9     0D 0F 10 10 
133cd     10 11 10 0F 
133d1     0D 0B 0A 06 
133d5     01 FD F8 F1 | 	byte	$0d, $0f, $10, $10, $10, $11, $10, $0f, $0d, $0b, $0a, $06, $01, $fd, $f8, $f1
133d9     F2 F3 F0 ED 
133dd     E6 DE DF E9 
133e1     F2 FC 02 05 
133e5     08 0A 0C 0D | 	byte	$f2, $f3, $f0, $ed, $e6, $de, $df, $e9, $f2, $fc, $02, $05, $08, $0a, $0c, $0d
133e9     0F 10 10 11 
133ed     11 11 10 0F 
133f1     0D 0C 0A 05 
133f5     FF FB F4 F1 | 	byte	$0f, $10, $10, $11, $11, $11, $10, $0f, $0d, $0c, $0a, $05, $ff, $fb, $f4, $f1
133f9     F3 F3 EF EB 
133fd     E3 DC E0 EA 
13401     F4 FF 05 08 
13405     0A 0C 0E 10 | 	byte	$f3, $f3, $ef, $eb, $e3, $dc, $e0, $ea, $f4, $ff, $05, $08, $0a, $0c, $0e, $10
13409     11 12 12 12 
1340d     12 12 11 10 
13411     0E 0C 0A 03 
13415     FD F8 F1 F1 | 	byte	$11, $12, $12, $12, $12, $12, $11, $10, $0e, $0c, $0a, $03, $fd, $f8, $f1, $f1
13419     F3 F3 ED E7 
1341d     E0 DA E1 EB 
13421     F7 00 07 09 
13425     0B 0D 0E 10 | 	byte	$f3, $f3, $ed, $e7, $e0, $da, $e1, $eb, $f7, $00, $07, $09, $0b, $0d, $0e, $10
13429     11 12 12 12 
1342d     12 12 11 0F 
13431     0D 0C 07 01 
13435     FB F5 F1 F2 | 	byte	$11, $12, $12, $12, $12, $12, $11, $0f, $0d, $0c, $07, $01, $fb, $f5, $f1, $f2
13439     F4 F2 EA E3 
1343d     DB D9 E1 ED 
13441     F9 03 09 0B 
13445     0D 0F 10 11 | 	byte	$f4, $f2, $ea, $e3, $db, $d9, $e1, $ed, $f9, $03, $09, $0b, $0d, $0f, $10, $11
13449     13 13 13 13 
1344d     13 13       | 	byte	$13[6]
1344f     11 0F 0D 0B 
13453     05 FE F8 F2 
13457     F1 F2 F4 F0 
1345b     E7 DF D9 DA | 	byte	$11, $0f, $0d, $0b, $05, $fe, $f8, $f2, $f1, $f2, $f4, $f0, $e7, $df, $d9, $da
1345f     E3 F0 FC 06 
13463     0B 0D 0E 10 
13467     12 13 14 14 
1346b     14 14 13 12 | 	byte	$e3, $f0, $fc, $06, $0b, $0d, $0e, $10, $12, $13, $14, $14, $14, $14, $13, $12
1346f     11 0F 0D 09 
13473     02 FB F6 F1 
13477     F0 F1 F2 EC 
1347b     E2 DB D6 DA | 	byte	$11, $0f, $0d, $09, $02, $fb, $f6, $f1, $f0, $f1, $f2, $ec, $e2, $db, $d6, $da
1347f     E5 F3 FF 09 
13483     0E 0F 10 12 
13487     13 14 14 15 
1348b     15 14 14 13 | 	byte	$e5, $f3, $ff, $09, $0e, $0f, $10, $12, $13, $14, $14, $15, $15, $14, $14, $13
1348f     11 0F 0D 08 
13493     FF F9 F3 F1 
13497     F1 F2 F1 E9 
1349b     DE D8 D6 DD | 	byte	$11, $0f, $0d, $08, $ff, $f9, $f3, $f1, $f1, $f2, $f1, $e9, $de, $d8, $d6, $dd
1349f     E8 F6 02 0B 
134a3     0F 10 12 13 
134a7     14 15 15 16 
134ab     15 15 14 13 | 	byte	$e8, $f6, $02, $0b, $0f, $10, $12, $13, $14, $15, $15, $16, $15, $15, $14, $13
134af     11 0F 0B 06 
134b3     FC F6 F1 F0 
134b7     F0 F1 ED E3 
134bb     D9 D5 D6 DE | 	byte	$11, $0f, $0b, $06, $fc, $f6, $f1, $f0, $f0, $f1, $ed, $e3, $d9, $d5, $d6, $de
134bf     EA F8 05 0D 
134c3     11 12 14 15 
134c7     16 16 16 16 
134cb     16 15 14 13 | 	byte	$ea, $f8, $05, $0d, $11, $12, $14, $15, $16, $16, $16, $16, $16, $15, $14, $13
134cf     11 0F 09 02 
134d3     F9 F3 F1 EF 
134d7     F0 EE E8 DF 
134db     D7 D4 D9 E2 | 	byte	$11, $0f, $09, $02, $f9, $f3, $f1, $ef, $f0, $ee, $e8, $df, $d7, $d4, $d9, $e2
134df     ED FC 09 10 
134e3     13 15 16 17 
134e7     18 18 18 18 
134eb     18 16 15 14 | 	byte	$ed, $fc, $09, $10, $13, $15, $16, $17, $18, $18, $18, $18, $18, $16, $15, $14
134ef     12 0D 07 FE 
134f3     F8 F2 F0 EF 
134f7     EE EA E4 DA 
134fb     D4 D4 DA E4 | 	byte	$12, $0d, $07, $fe, $f8, $f2, $f0, $ef, $ee, $ea, $e4, $da, $d4, $d4, $da, $e4
134ff     F2 FF 0C 13 
13503     15 16 17 18 
13507     19 19 19 18 
1350b     17 16 15 14 | 	byte	$f2, $ff, $0c, $13, $15, $16, $17, $18, $19, $19, $19, $18, $17, $16, $15, $14
1350f     11 0B 04 FC 
13513     F5 F1 EF EE 
13517     EB E6 DF D6 
1351b     D2 D5 DC E6 | 	byte	$11, $0b, $04, $fc, $f5, $f1, $ef, $ee, $eb, $e6, $df, $d6, $d2, $d5, $dc, $e6
1351f     F4 03 0F 15 
13523     17 18 19 1A 
13527     1B 1A 1A 19 
1352b     19 17 16 14 | 	byte	$f4, $03, $0f, $15, $17, $18, $19, $1a, $1b, $1a, $1a, $19, $19, $17, $16, $14
1352f     0F 08 01 F9 
13533     F3 F0 EE EC 
13537     E7 E1 DA D4 
1353b     D2 D7 DF EB | 	byte	$0f, $08, $01, $f9, $f3, $f0, $ee, $ec, $e7, $e1, $da, $d4, $d2, $d7, $df, $eb
1353f     F8 07 12 17 
13543     19 1A 1B 1B 
13547     1C 1C 1B 1A 
1354b     18 17 16 12 | 	byte	$f8, $07, $12, $17, $19, $1a, $1b, $1b, $1c, $1c, $1b, $1a, $18, $17, $16, $12
1354f     0D 05 FE F6 
13553     F1 EF EC E7 
13557     E0 DB D6 D1 
1355b     D3 D9 E1 EF | 	byte	$0d, $05, $fe, $f6, $f1, $ef, $ec, $e7, $e0, $db, $d6, $d1, $d3, $d9, $e1, $ef
1355f     FD 0A 15 1A 
13563     1B 1C 1D 1D 
13567     1D 1D 1C 1B 
1356b     19 18 16 12 | 	byte	$fd, $0a, $15, $1a, $1b, $1c, $1d, $1d, $1d, $1d, $1c, $1b, $19, $18, $16, $12
1356f     0B 03 FD F5 
13573     F0 ED E9 E3 
13577     DB D7 D3 D1 
1357b     D4 DC E5 F2 | 	byte	$0b, $03, $fd, $f5, $f0, $ed, $e9, $e3, $db, $d7, $d3, $d1, $d4, $dc, $e5, $f2
1357f     02 0E 18 1D 
13583     1D 1E 1E 1F 
13587     1F 1E 1D 1B 
1358b     1A 18 15 10 | 	byte	$02, $0e, $18, $1d, $1d, $1e, $1e, $1f, $1f, $1e, $1d, $1b, $1a, $18, $15, $10
1358f     08 01 F9 F2 
13593     EE EA E4 DB 
13597     D6 D3 D1 D1 
1359b     D7 DE E8 F7 | 	byte	$08, $01, $f9, $f2, $ee, $ea, $e4, $db, $d6, $d3, $d1, $d1, $d7, $de, $e8, $f7
1359f     06 13 1B 1E 
135a3     1E 1F 20 1F 
135a7     1F 1E 1D 1B 
135ab     19 18 13 0D | 	byte	$06, $13, $1b, $1e, $1e, $1f, $20, $1f, $1f, $1e, $1d, $1b, $19, $18, $13, $0d
135af     05 FE F7 F0 
135b3     ED E7 DE D7 
135b7     D3 D2 D2 D4 
135bb     DB E3 ED FC | 	byte	$05, $fe, $f7, $f0, $ed, $e7, $de, $d7, $d3, $d2, $d2, $d4, $db, $e3, $ed, $fc
135bf     0C 16 1D 1F 
135c3     20 21 21 21 
135c7     20 1F 1D 1C 
135cb     1A 17 12 0A | 	byte	$0c, $16, $1d, $1f, $20, $21, $21, $21, $20, $1f, $1d, $1c, $1a, $17, $12, $0a
135cf     03 FD F7 EF 
135d3     EB E4 DA D3 
135d7     D1 D3 D3 D7 
135db     DE E6 F2 00 | 	byte	$03, $fd, $f7, $ef, $eb, $e4, $da, $d3, $d1, $d3, $d3, $d7, $de, $e6, $f2, $00
135df     0E 19 1E 1F 
135e3     20 20 20 20 
135e7     1F 1E 1C 1A 
135eb     19 16 0F 07 | 	byte	$0e, $19, $1e, $1f, $20, $20, $20, $20, $1f, $1e, $1c, $1a, $19, $16, $0f, $07
135ef     00 FB F4 ED 
135f3     E8 DE D6 D1 
135f7     D1 D4 D4 DB 
135fb     E2 EB F6 05 | 	byte	$00, $fb, $f4, $ed, $e8, $de, $d6, $d1, $d1, $d4, $d4, $db, $e2, $eb, $f6, $05
135ff     11 1B 1F 20 
13603     20 20 21 20 
13607     1F 1E 1C 1B 
1360b     18 13 0C 04 | 	byte	$11, $1b, $1f, $20, $20, $20, $21, $20, $1f, $1e, $1c, $1b, $18, $13, $0c, $04
1360f     FE FA F1 EB 
13613     E4 D9 D2 D0 
13617     D2 D4 D8 DF 
1361b     E6 EF FB 0A | 	byte	$fe, $fa, $f1, $eb, $e4, $d9, $d2, $d0, $d2, $d4, $d8, $df, $e6, $ef, $fb, $0a
1361f     14 1D 20 20 
13623     21 21 21 20 
13627     1F 1E 1C 1A 
1362b     16 10 09 01 | 	byte	$14, $1d, $20, $20, $21, $21, $21, $20, $1f, $1e, $1c, $1a, $16, $10, $09, $01
1362f     FD F7 EF E8 
13633     DE D5 CF CF 
13637     D3 D4 DA E2 
1363b     E9 F3 00 0D | 	byte	$fd, $f7, $ef, $e8, $de, $d5, $cf, $cf, $d3, $d4, $da, $e2, $e9, $f3, $00, $0d
1363f     18 1E 21 21 
13643     21 21 20 1F 
13647     1E 1D 1B 19 
1364b     15 0E 06 00 | 	byte	$18, $1e, $21, $21, $21, $21, $20, $1f, $1e, $1d, $1b, $19, $15, $0e, $06, $00
1364f     FC F6 EC E4 
13653     DA D2 CF D2 
13657     D5 D7 DE E6 
1365b     EE F8 05 10 | 	byte	$fc, $f6, $ec, $e4, $da, $d2, $cf, $d2, $d5, $d7, $de, $e6, $ee, $f8, $05, $10
1365f     1A 20 21 21 
13663     21 21 20 1F 
13667     1D 1C 1B 18 
1366b     12 0B 03 FF | 	byte	$1a, $20, $21, $21, $21, $21, $20, $1f, $1d, $1c, $1b, $18, $12, $0b, $03, $ff
1366f     FA F3 E7 DE 
13673     D5 D0 CF D3 
13677     D5 D9 E2 E9 
1367b     F1 FD 08 15 | 	byte	$fa, $f3, $e7, $de, $d5, $d0, $cf, $d3, $d5, $d9, $e2, $e9, $f1, $fd, $08, $15
1367f     1D 21 21 21 
13683     21 20 20 1E 
13687     1D 1B 19 15 
1368b     0F 08 01 FC | 	byte	$1d, $21, $21, $21, $21, $20, $20, $1e, $1d, $1b, $19, $15, $0f, $08, $01, $fc
1368f     F8 EE E3 D9 
13693     D2 CF D1 D5 
13697     D7 DE E6 ED 
1369b     F5 01 0E 18 | 	byte	$f8, $ee, $e3, $d9, $d2, $cf, $d1, $d5, $d7, $de, $e6, $ed, $f5, $01, $0e, $18
1369f     1F 22 21 22 
136a3     21 21 20 1F 
136a7     1E 1C 19 14 
136ab     0D 05 00 FB | 	byte	$1f, $22, $21, $22, $21, $21, $20, $1f, $1e, $1c, $19, $14, $0d, $05, $00, $fb
136af     F6 EA DE D6 
136b3     D1 D0 D3 D5 
136b7     D9 E2 E9 F0 
136bb     FA 05 11 1B | 	byte	$f6, $ea, $de, $d6, $d1, $d0, $d3, $d5, $d9, $e2, $e9, $f0, $fa, $05, $11, $1b
136bf     1F 21 21 21 
136c3     20 20 1F 1E 
136c7     1C 1A 16 11 
136cb     09 03 FD FA | 	byte	$1f, $21, $21, $21, $20, $20, $1f, $1e, $1c, $1a, $16, $11, $09, $03, $fd, $fa
136cf     F1 E5 D9 D3 
136d3     D1 D3 D5 D7 
136d7     DD E5 ED F4 
136db     FE 0A 14 1D | 	byte	$f1, $e5, $d9, $d3, $d1, $d3, $d5, $d7, $dd, $e5, $ed, $f4, $fe, $0a, $14, $1d
136df     21 21 21 20 
136e3     20 1F 1E 1D 
136e7     1C 19 14 0D 
136eb     06 01 FD F6 | 	byte	$21, $21, $21, $20, $20, $1f, $1e, $1d, $1c, $19, $14, $0d, $06, $01, $fd, $f6
136ef     EC DF D6 D3 
136f3     D3 D4 D6 D9 
136f7     E0 E9 F0 F8 
136fb     03 0D 18 1E | 	byte	$ec, $df, $d6, $d3, $d3, $d4, $d6, $d9, $e0, $e9, $f0, $f8, $03, $0d, $18, $1e
136ff     21 21 21 20 
13703     1F 1F 1E 1C 
13707     1A 17 10 0A 
1370b     04 FF FA F2 | 	byte	$21, $21, $21, $20, $1f, $1f, $1e, $1c, $1a, $17, $10, $0a, $04, $ff, $fa, $f2
1370f     E5 DA D4 D4 
13713     D5 D5 D7 DB 
13717     E3 EC F3 FB 
1371b     06 11 1A 20 | 	byte	$e5, $da, $d4, $d4, $d5, $d5, $d7, $db, $e3, $ec, $f3, $fb, $06, $11, $1a, $20
1371f     22 21 21 20 
13723     1F 1E 1D 1B 
13727     19 14 0E 07 
1372b     02 FD F7 EC | 	byte	$22, $21, $21, $20, $1f, $1e, $1d, $1b, $19, $14, $0e, $07, $02, $fd, $f7, $ec
1372f     E1 D8 D5 D6 
13733     D7 D7 DB DF 
13737     E8 F0 F6 00 
1373b     0A 14 1C 20 | 	byte	$e1, $d8, $d5, $d6, $d7, $d7, $db, $df, $e8, $f0, $f6, $00, $0a, $14, $1c, $20
1373f     21 20 20 1F 
13743     1E 1D 1C 1A 
13747     16 11 0B 05 
1374b     00 FB F2 E7 | 	byte	$21, $20, $20, $1f, $1e, $1d, $1c, $1a, $16, $11, $0b, $05, $00, $fb, $f2, $e7
1374f     DE D7 D6 D7 
13753     D7 D8 DC E2 
13757     EA F3 F9 03 
1375b     0D 17 1E 21 | 	byte	$de, $d7, $d6, $d7, $d7, $d8, $dc, $e2, $ea, $f3, $f9, $03, $0d, $17, $1e, $21
1375f     21 20 1F 1E 
13763     1E 1C 1B 18 
13767     13 0D 07 03 
1376b     FE F7 ED E2 | 	byte	$21, $20, $1f, $1e, $1e, $1c, $1b, $18, $13, $0d, $07, $03, $fe, $f7, $ed, $e2
1376f     DB D7 D9 D9 
13773     D8 DB DF E5 
13777     EE F6 FD 07 
1377b     11 1A 1F 22 | 	byte	$db, $d7, $d9, $d9, $d8, $db, $df, $e5, $ee, $f6, $fd, $07, $11, $1a, $1f, $22
1377f     21 20 1F 1F 
13783     1E 1C 1B 17 
13787     11 0C 06 02 
1378b     FC F3 E9 E0 | 	byte	$21, $20, $1f, $1f, $1e, $1c, $1b, $17, $11, $0c, $06, $02, $fc, $f3, $e9, $e0
1378f     DA D9 DA DA 
13793     DA DE E2 E9 
13797     F1 F8 00 09 
1379b     13 1B 20 21 | 	byte	$da, $d9, $da, $da, $da, $de, $e2, $e9, $f1, $f8, $00, $09, $13, $1b, $20, $21
1379f     20 1F 1F 1D 
137a3     1D 1B 18 13 
137a7     0E 09 04 FF 
137ab     F9 EF E5 DE | 	byte	$20, $1f, $1f, $1d, $1d, $1b, $18, $13, $0e, $09, $04, $ff, $f9, $ef, $e5, $de
137af     DB DB DC DB 
137b3     DD E1 E5 EC 
137b7     F5 FA 03 0C 
137bb     15 1D 20 20 | 	byte	$db, $db, $dc, $db, $dd, $e1, $e5, $ec, $f5, $fa, $03, $0c, $15, $1d, $20, $20
137bf     20 1E 1E 1D 
137c3     1B 19 16 11 
137c7     0B 06 03 FD 
137cb     F5 EA E2 DE | 	byte	$20, $1e, $1e, $1d, $1b, $19, $16, $11, $0b, $06, $03, $fd, $f5, $ea, $e2, $de
137cf     DC DD DD DC 
137d3     E0 E3 E8 F0 
137d7     F7 FD 06 0E 
137db     17 1E 20 20 | 	byte	$dc, $dd, $dd, $dc, $e0, $e3, $e8, $f0, $f7, $fd, $06, $0e, $17, $1e, $20, $20
137df     1F 1E 1D 1C 
137e3     1B 18 13 0D 
137e7     09 04 01 FA 
137eb     F0 E7 E1 DE | 	byte	$1f, $1e, $1d, $1c, $1b, $18, $13, $0d, $09, $04, $01, $fa, $f0, $e7, $e1, $de
137ef     DE DE DE DE 
137f3     E2 E4 E9 F2 
137f7     F8 00 08 11 
137fb     18 1E 20 1F | 	byte	$de, $de, $de, $de, $e2, $e4, $e9, $f2, $f8, $00, $08, $11, $18, $1e, $20, $1f
137ff     1F 1E 1D 1C 
13803     19 15 10 0B 
13807     07 03 FE F6 
1380b     EC E5 E2 E0 | 	byte	$1f, $1e, $1d, $1c, $19, $15, $10, $0b, $07, $03, $fe, $f6, $ec, $e5, $e2, $e0
1380f     E0 E1 DF E2 
13813     E6 E8 EE F6 
13817     FB 02 0A 12 
1381b     1A 1F 1F 1F | 	byte	$e0, $e1, $df, $e2, $e6, $e8, $ee, $f6, $fb, $02, $0a, $12, $1a, $1f, $1f, $1f
1381f     1D 1C 1B 1A 
13823     16 12 0D 08 
13827     05 02 FB F2 
1382b     E9 E4 E2 E1 | 	byte	$1d, $1c, $1b, $1a, $16, $12, $0d, $08, $05, $02, $fb, $f2, $e9, $e4, $e2, $e1
1382f     E2 E0 E0 E4 
13833     E7 EA F0 F7 
13837     FD 04 0C 14 
1383b     1A 1E 1F 1E | 	byte	$e2, $e0, $e0, $e4, $e7, $ea, $f0, $f7, $fd, $04, $0c, $14, $1a, $1e, $1f, $1e
1383f     1D 1B 1A 18 
13843     14 0F 0B 07 
13847     04 FF F7 EF 
1384b     E7 E4 E3 E3 | 	byte	$1d, $1b, $1a, $18, $14, $0f, $0b, $07, $04, $ff, $f7, $ef, $e7, $e4, $e3, $e3
1384f     E3 E1 E3 E7 
13853     E9 EC F4 FA 
13857     FF 06 0E 15 
1385b     1C 1F 1F 1E | 	byte	$e3, $e1, $e3, $e7, $e9, $ec, $f4, $fa, $ff, $06, $0e, $15, $1c, $1f, $1f, $1e
1385f     1C 1B 1A 16 
13863     12 0D 09 06 
13867     03 FD F5 EC 
1386b     E8 E6 E5 E5 | 	byte	$1c, $1b, $1a, $16, $12, $0d, $09, $06, $03, $fd, $f5, $ec, $e8, $e6, $e5, $e5
1386f     E4 E3 E5 E9 
13873     EB F0 F6 FB 
13877     01 08 0F 16 
1387b     1C 1E 1E 1C | 	byte	$e4, $e3, $e5, $e9, $eb, $f0, $f6, $fb, $01, $08, $0f, $16, $1c, $1e, $1e, $1c
1387f     1B 1A 17 13 
13883     0E 0A 07 05 
13887     00 F9 F1 EA 
1388b     E7 E7 E6 E6 | 	byte	$1b, $1a, $17, $13, $0e, $0a, $07, $05, $00, $f9, $f1, $ea, $e7, $e7, $e6, $e6
1388f     E5 E5 E8 EC 
13893     EE F2 F9 FD 
13897     02 09 10 17 
1389b     1B 1D 1D 1C | 	byte	$e5, $e5, $e8, $ec, $ee, $f2, $f9, $fd, $02, $09, $10, $17, $1b, $1d, $1d, $1c
1389f     1A 18 15 10 
138a3     0D 09 07 03 
138a7     FE F6 EE EA 
138ab     E8 E8 E7 E7 | 	byte	$1a, $18, $15, $10, $0d, $09, $07, $03, $fe, $f6, $ee, $ea, $e8, $e8, $e7, $e7
138af     E5 E7 EA EE 
138b3     F0 F5 FA FE 
138b7     04 0A 11 18 
138bb     1B 1D 1C 1B | 	byte	$e5, $e7, $ea, $ee, $f0, $f5, $fa, $fe, $04, $0a, $11, $18, $1b, $1d, $1c, $1b
138bf     19 16 12 0E 
138c3     0A 07 05 01 
138c7     FB F3 EC E9 
138cb     E9 E9 E8 E8 | 	byte	$19, $16, $12, $0e, $0a, $07, $05, $01, $fb, $f3, $ec, $e9, $e9, $e9, $e8, $e8
138cf     E6 E9 ED F0 
138d3     F1 F6 FB FF 
138d7     04 0B 12 18 
138db     1B 1C 1B 1A | 	byte	$e6, $e9, $ed, $f0, $f1, $f6, $fb, $ff, $04, $0b, $12, $18, $1b, $1c, $1b, $1a
138df     18 14 11 0C 
138e3     09 07 04 FF 
138e7     F8 F1 EC EB 
138eb     EB EA EA E9 | 	byte	$18, $14, $11, $0c, $09, $07, $04, $ff, $f8, $f1, $ec, $eb, $eb, $ea, $ea, $e9
138ef     E9 EC F0 F2 
138f3     F4 F9 FD 01 
138f7     06 0C 13 18 
138fb     1B 1B 1A 18 | 	byte	$e9, $ec, $f0, $f2, $f4, $f9, $fd, $01, $06, $0c, $13, $18, $1b, $1b, $1a, $18
138ff     15 11 0D 0A 
13903     08 06 02 FC 
13907     F5 EF EC EC 
1390b     EC EB EB E9 | 	byte	$15, $11, $0d, $0a, $08, $06, $02, $fc, $f5, $ef, $ec, $ec, $ec, $eb, $eb, $e9
1390f     EA ED F1 F3 
13913     F5 FA FE 02 
13917     07 0D 13 18 
1391b     1A 1B 19 16 | 	byte	$ea, $ed, $f1, $f3, $f5, $fa, $fe, $02, $07, $0d, $13, $18, $1a, $1b, $19, $16
1391f     13 0F 0C 09 
13923     07 05 FF F9 
13927     F3 EE ED ED 
1392b     ED EC EB EA | 	byte	$13, $0f, $0c, $09, $07, $05, $ff, $f9, $f3, $ee, $ed, $ed, $ed, $ec, $eb, $ea
1392f     EC F0 F3 F5 
13933     F7 FC FF 03 
13937     09 0E 14 18 
1393b     1B 1A 18 14 | 	byte	$ec, $f0, $f3, $f5, $f7, $fc, $ff, $03, $09, $0e, $14, $18, $1b, $1a, $18, $14
1393f     11 0E 0B 09 
13943     07 04 FE F7 
13947     F2 EF EF EF 
1394b     EE EE EC EC | 	byte	$11, $0e, $0b, $09, $07, $04, $fe, $f7, $f2, $ef, $ef, $ef, $ee, $ee, $ec, $ec
1394f     EE F2 F5 F6 
13953     F9 FD 00 03 
13957     09 0E 14 18 
1395b     19 18 15 12 | 	byte	$ee, $f2, $f5, $f6, $f9, $fd, $00, $03, $09, $0e, $14, $18, $19, $18, $15, $12
1395f     0F 0C 0A 08 
13963     06 01 FB F4 
13967     F1 EF F0 F0 
1396b     EF EF ED EE | 	byte	$0f, $0c, $0a, $08, $06, $01, $fb, $f4, $f1, $ef, $f0, $f0, $ef, $ef, $ed, $ee
1396f     F0 F4 F7 F8 
13973     FA FE 00 04 
13977     09 0F 14 17 
1397b     18 17 14 11 | 	byte	$f0, $f4, $f7, $f8, $fa, $fe, $00, $04, $09, $0f, $14, $17, $18, $17, $14, $11
1397f     0D 0B 0A 08 
13983     04 FF F9 F4 
13987     F1 F1 F1 F0 
1398b     F0 EF EE EF | 	byte	$0d, $0b, $0a, $08, $04, $ff, $f9, $f4, $f1, $f1, $f1, $f0, $f0, $ef, $ee, $ef
1398f     F2 F5 F8 F9 
13993     FB FE 01 05 
13997     09 0F 13 17 
1399b     17 15 11 0F | 	byte	$f2, $f5, $f8, $f9, $fb, $fe, $01, $05, $09, $0f, $13, $17, $17, $15, $11, $0f
1399f     0C 0A 09 06 
139a3     02 FD F7 F4 
139a7     F1 F1 F2 F1 
139ab     F1 EF EE F0 | 	byte	$0c, $0a, $09, $06, $02, $fd, $f7, $f4, $f1, $f1, $f2, $f1, $f1, $ef, $ee, $f0
139af     F3 F7 F9 F9 
139b3     FC FE 01 05 
139b7     0A 0F 14 16 
139bb     15 13 10 0E | 	byte	$f3, $f7, $f9, $f9, $fc, $fe, $01, $05, $0a, $0f, $14, $16, $15, $13, $10, $0e
139bf     0C 0A 08 05 
139c3     00 FB F6 F3 
139c7     F2 F3 F3 F2 
139cb     F2 F0 F0 F2 | 	byte	$0c, $0a, $08, $05, $00, $fb, $f6, $f3, $f2, $f3, $f3, $f2, $f2, $f0, $f0, $f2
139cf     F6 F8 FA FB 
139d3     FE 00 03 06 
139d7     0B 0F 14 15 
139db     14 12 0F 0C | 	byte	$f6, $f8, $fa, $fb, $fe, $00, $03, $06, $0b, $0f, $14, $15, $14, $12, $0f, $0c
139df     0B 09 07 03 
139e3     FE F9 F5 F3 
139e7     F3 F4 F4 F3 
139eb     F3 F1 F1 F3 | 	byte	$0b, $09, $07, $03, $fe, $f9, $f5, $f3, $f3, $f4, $f4, $f3, $f3, $f1, $f1, $f3
139ef     F6 F9 FB FB 
139f3     FD 00 02 06 
139f7     0B 0F 12 14 
139fb     12 10 0D 0C | 	byte	$f6, $f9, $fb, $fb, $fd, $00, $02, $06, $0b, $0f, $12, $14, $12, $10, $0d, $0c
139ff     0A 08 06 01 
13a03     FC F7 F5 F4 
13a07     F4 F5 F4 F3 
13a0b     F3 F1 F3 F5 | 	byte	$0a, $08, $06, $01, $fc, $f7, $f5, $f4, $f4, $f5, $f4, $f3, $f3, $f1, $f3, $f5
13a0f     F8 FB FC FC 
13a13     FE 01 03 07 
13a17     0C 10 12 13 
13a1b     11 0F 0D 0C | 	byte	$f8, $fb, $fc, $fc, $fe, $01, $03, $07, $0c, $10, $12, $13, $11, $0f, $0d, $0c
13a1f     0B 08 05 01 
13a23     FB F8 F6 F5 
13a27     F6 F7 F5 F4 
13a2b     F3 F3 F5 F7 | 	byte	$0b, $08, $05, $01, $fb, $f8, $f6, $f5, $f6, $f7, $f5, $f4, $f3, $f3, $f5, $f7
13a2f     F9 FB FD FD 
13a33     FF 01 04 07 
13a37     0B 0F 10 11 
13a3b     10 0E 0C 0B | 	byte	$f9, $fb, $fd, $fd, $ff, $01, $04, $07, $0b, $0f, $10, $11, $10, $0e, $0c, $0b
13a3f     09 07 03 FD 
13a43     F9 F7 F5 F5 
13a47     F6 F6 F5 F5 
13a4b     F4 F4 F5 F8 | 	byte	$09, $07, $03, $fd, $f9, $f7, $f5, $f5, $f6, $f6, $f5, $f5, $f4, $f4, $f5, $f8
13a4f     FA FC FE FE 
13a53     00 02 04 08 
13a57     0B 0E 0F 10 
13a5b     0F 0D 0C 0A | 	byte	$fa, $fc, $fe, $fe, $00, $02, $04, $08, $0b, $0e, $0f, $10, $0f, $0d, $0c, $0a
13a5f     08 05 02 FC 
13a63     F9 F7 F7 F7 
13a67     F8 F7 F6 F6 
13a6b     F4 F5 F7 F9 | 	byte	$08, $05, $02, $fc, $f9, $f7, $f7, $f7, $f8, $f7, $f6, $f6, $f4, $f5, $f7, $f9
13a6f     FB FD FE FE 
13a73     00 02 05 08 
13a77     0B 0D 0F 0E 
13a7b     0E 0C 0B 09 | 	byte	$fb, $fd, $fe, $fe, $00, $02, $05, $08, $0b, $0d, $0f, $0e, $0e, $0c, $0b, $09
13a7f     07 04 00 FB 
13a83     F8 F7 F7 F7 
13a87     F7 F7 F6 F5 
13a8b     F4 F5 F7 F9 | 	byte	$07, $04, $00, $fb, $f8, $f7, $f7, $f7, $f7, $f7, $f6, $f5, $f4, $f5, $f7, $f9
13a8f     FC FE FF FE 
13a93     00 02 04 08 
13a97     0A 0C 0D 0D 
13a9b     0D 0C 0A 09 | 	byte	$fc, $fe, $ff, $fe, $00, $02, $04, $08, $0a, $0c, $0d, $0d, $0d, $0c, $0a, $09
13a9f     06 03 FE FA 
13aa3     F8 F7 F8 F9 
13aa7     F9 F8 F7 F7 
13aab     F6 F7 F8 FA | 	byte	$06, $03, $fe, $fa, $f8, $f7, $f8, $f9, $f9, $f8, $f7, $f7, $f6, $f7, $f8, $fa
13aaf     FD FF FF 00 
13ab3     01 03 06 08 
13ab7     0A 0C 0D 0D 
13abb     0C 0B 09 07 | 	byte	$fd, $ff, $ff, $00, $01, $03, $06, $08, $0a, $0c, $0d, $0d, $0c, $0b, $09, $07
13abf     05 00 FC F9 
13ac3     F8 F8 F8 F9 
13ac7     F9 F8 F8 F6 
13acb     F6 F7 F9 FB | 	byte	$05, $00, $fc, $f9, $f8, $f8, $f8, $f9, $f9, $f8, $f8, $f6, $f6, $f7, $f9, $fb
13acf     FD FF FE FF 
13ad3     01 03 05 07 
13ad7     09 0B 0C 0C 
13adb     0C 0A 09 06 | 	byte	$fd, $ff, $fe, $ff, $01, $03, $05, $07, $09, $0b, $0c, $0c, $0c, $0a, $09, $06
13adf     03 FF FB F9 
13ae3     F8 F8 F9 F9 
13ae7     F9 F8 F7 F6 
13aeb     F7 F8 FA FC | 	byte	$03, $ff, $fb, $f9, $f8, $f8, $f9, $f9, $f9, $f8, $f7, $f6, $f7, $f8, $fa, $fc
13aef     FE FF FF 00 
13af3     02 04 06 08 
13af7     09 0B 0C 0C 
13afb     0C 0A 08 06 | 	byte	$fe, $ff, $ff, $00, $02, $04, $06, $08, $09, $0b, $0c, $0c, $0c, $0a, $08, $06
13aff     02 FF FB FA 
13b03     F9 FA FA FA 
13b07     FB FA F8 F7 
13b0b     F8 FA FB FD | 	byte	$02, $ff, $fb, $fa, $f9, $fa, $fa, $fa, $fb, $fa, $f8, $f7, $f8, $fa, $fb, $fd
13b0f     FF 00 FF 01 
13b13     02 04 05 08 
13b17     09 0A 0B 0B 
13b1b     0A 09 06 04 | 	byte	$ff, $00, $ff, $01, $02, $04, $05, $08, $09, $0a, $0b, $0b, $0a, $09, $06, $04
13b1f     00 FD FA F9 
13b23     F9 FA FA FA 
13b27     FA F9 F8 F8 
13b2b     F9 FA FB FE | 	byte	$00, $fd, $fa, $f9, $f9, $fa, $fa, $fa, $fa, $f9, $f8, $f8, $f9, $fa, $fb, $fe
13b2f     00 00 00 02 
13b33     03 04 05 07 
13b37     08 0A 0A 0A 
13b3b     09 08 06 03 | 	byte	$00, $00, $00, $02, $03, $04, $05, $07, $08, $0a, $0a, $0a, $09, $08, $06, $03
13b3f     FF FC FA FA 
13b43     FB FB FB FB 
13b47     FB F9 F8 F8 
13b4b     F9 FA FC FE | 	byte	$ff, $fc, $fa, $fa, $fb, $fb, $fb, $fb, $fb, $f9, $f8, $f8, $f9, $fa, $fc, $fe
13b4f     00 00 00 02 
13b53     03 04 06 07 
13b57     08 09 0A 0A 
13b5b     09 07 04 01 | 	byte	$00, $00, $00, $02, $03, $04, $06, $07, $08, $09, $0a, $0a, $09, $07, $04, $01
13b5f     FE FB FA FA 
13b63     FB FB FB FC 
13b67     FB F9 F8 F9 
13b6b     F9 FA FC FE | 	byte	$fe, $fb, $fa, $fa, $fb, $fb, $fb, $fc, $fb, $f9, $f8, $f9, $f9, $fa, $fc, $fe
13b6f     00 00 00 02 
13b73     02 03 05 06 
13b77     07 08 09 09 
13b7b     08 05 04 01 | 	byte	$00, $00, $00, $02, $02, $03, $05, $06, $07, $08, $09, $09, $08, $05, $04, $01
13b7f     FE FB FB FB 
13b83     FB FC FC FD 
13b87     FB F9 F9 FA 
13b8b     FB FB FD FF | 	byte	$fe, $fb, $fb, $fb, $fb, $fc, $fc, $fd, $fb, $f9, $f9, $fa, $fb, $fb, $fd, $ff
13b8f     01 01 02 03 
13b93     04 05 05 06 
13b97     07 08 09 08 
13b9b     06 04 02 FF | 	byte	$01, $01, $02, $03, $04, $05, $05, $06, $07, $08, $09, $08, $06, $04, $02, $ff
13b9f     FC FB FB FC 
13ba3     FC FC FD FD 
13ba7     FB F9 FA FA 
13bab     FB FC FD FF | 	byte	$fc, $fb, $fb, $fc, $fc, $fc, $fd, $fd, $fb, $f9, $fa, $fa, $fb, $fc, $fd, $ff
13baf     00 00 01 03 
13bb3     03 04 05 06 
13bb7     07 08 08 07 
13bbb     06 03 01 FE | 	byte	$00, $00, $01, $03, $03, $04, $05, $06, $07, $08, $08, $07, $06, $03, $01, $fe
13bbf     FC FB FC FC 
13bc3     FC FD FD FD 
13bc7     FA F9 FA FB 
13bcb     FB FC FE 00 | 	byte	$fc, $fb, $fc, $fc, $fc, $fd, $fd, $fd, $fa, $f9, $fa, $fb, $fb, $fc, $fe, $00
13bcf     00 01 02 03 
13bd3     03 04 05 06 
13bd7     07 08 08 07 
13bdb     05 03 01 FE | 	byte	$00, $01, $02, $03, $03, $04, $05, $06, $07, $08, $08, $07, $05, $03, $01, $fe
13bdf     FD FD FD FD 
13be3     FE FE FE FD 
13be7     FB FA FB FB 
13beb     FC FD FE 00 | 	byte	$fd, $fd, $fd, $fd, $fe, $fe, $fe, $fd, $fb, $fa, $fb, $fb, $fc, $fd, $fe, $00
13bef     01 01 02 03 
13bf3     03 04 05 06 
13bf7     07 07 07 05 
13bfb     03 01 FF FD | 	byte	$01, $01, $02, $03, $03, $04, $05, $06, $07, $07, $07, $05, $03, $01, $ff, $fd
13bff     FD FC FD FD 
13c03     FE FE FE FC 
13c07     FA FB FB FB 
13c0b     FC FD FF 00 | 	byte	$fd, $fc, $fd, $fd, $fe, $fe, $fe, $fc, $fa, $fb, $fb, $fb, $fc, $fd, $ff, $00
13c0f     00 01 03 03 
13c13     03 03 04 05 
13c17     07 07 06 04 
13c1b     02 01 FE FD | 	byte	$00, $01, $03, $03, $03, $03, $04, $05, $07, $07, $06, $04, $02, $01, $fe, $fd
13c1f     FD FD FE FE 
13c23     FE FF FE FC 
13c27     FB FB FB FC 
13c2b     FC FD FF 00 | 	byte	$fd, $fd, $fe, $fe, $fe, $ff, $fe, $fc, $fb, $fb, $fb, $fc, $fc, $fd, $ff, $00
13c2f     00 02 03 02 
13c33     03 04 05 06 
13c37     06 06 05 03 
13c3b     01 00 FE FD | 	byte	$00, $02, $03, $02, $03, $04, $05, $06, $06, $06, $05, $03, $01, $00, $fe, $fd
13c3f     FE FE FE FE 
13c43     FE          | 	byte	$fe[5]
13c44     FF FD FC FB 
13c48     FB FB FC FC 
13c4c     FD FF 00 01 
13c50     02 02 02 02 | 	byte	$ff, $fd, $fc, $fb, $fb, $fb, $fc, $fc, $fd, $ff, $00, $01, $02, $02, $02, $02
13c54     03 04 05 06 
13c58     05 04 02 01 
13c5c     00 FF FF FF 
13c60     FE FE FF FF | 	byte	$03, $04, $05, $06, $05, $04, $02, $01, $00, $ff, $ff, $ff, $fe, $fe, $ff, $ff
13c64     FF FD FC FC 
13c68     FC FC FC FD 
13c6c     FF 00 00 01 
13c70     02 03 02 03 | 	byte	$ff, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $ff, $00, $00, $01, $02, $03, $02, $03
13c74     04 05 06 05 
13c78     04 03 01 00 
13c7c     FF FE FE FE 
13c80     FE FF FF FF | 	byte	$04, $05, $06, $05, $04, $03, $01, $00, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff
13c84     FE FD FD FC 
13c88     FC FC FD FD 
13c8c     FE FF FF 00 
13c90     01 01 01 02 | 	byte	$fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $00, $01, $01, $01, $02
13c94     03 04 05 05 
13c98     03 02 01 00 
13c9c     FF FF FF FF 
13ca0     FF FF FF FF | 	byte	$03, $04, $05, $05, $03, $02, $01, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
13ca4     FD FD FD FC 
13ca8     FC FC FC FE 
13cac     FF 00 00 00 
13cb0     01 02 02 03 | 	byte	$fd, $fd, $fd, $fc, $fc, $fc, $fc, $fe, $ff, $00, $00, $00, $01, $02, $02, $03
13cb4     04 05 05 04 
13cb8     03 02 01 00 
13cbc     00 00 00 00 
13cc0     00 01 00 FF | 	byte	$04, $05, $05, $04, $03, $02, $01, $00, $00, $00, $00, $00, $00, $01, $00, $ff
13cc4     FF FF FE FD 
13cc8     FD FD FD FF 
13ccc     FF 00 00 01 
13cd0     01 02 02 03 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $ff, $ff, $00, $00, $01, $01, $02, $02, $03
13cd4     03 04 04 03 
13cd8     01 00 00 00 
13cdc     FF 00 00 FF 
13ce0     00 00 FF FE | 	byte	$03, $04, $04, $03, $01, $00, $00, $00, $ff, $00, $00, $ff, $00, $00, $ff, $fe
13ce4     FE FE FE FD 
13ce8     FD FD FD FF 
13cec     FF FF 00 01 
13cf0     01 01 02 03 | 	byte	$fe, $fe, $fe, $fd, $fd, $fd, $fd, $ff, $ff, $ff, $00, $01, $01, $01, $02, $03
13cf4     03 03 03 02 
13cf8     01 00 01 00 
13cfc     00 00 00 01 
13d00     01 01 FF FF | 	byte	$03, $03, $03, $02, $01, $00, $01, $00, $00, $00, $00, $01, $01, $01, $ff, $ff
13d04     FF FF FD FD 
13d08     FD FD FE FF 
13d0c     FF FF FF 00 
13d10     01 01 02 03 | 	byte	$ff, $ff, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $ff, $ff, $00, $01, $01, $02, $03
13d14     03 03 02 02 
13d18     01 01 01 00 
13d1c     00 00 01 01 
13d20     01 00 FF FF | 	byte	$03, $03, $02, $02, $01, $01, $01, $00, $00, $00, $01, $01, $01, $00, $ff, $ff
13d24     FF FE FD FD 
13d28     FD FD FD FE 
13d2c     FE FE 00 00 
13d30     00 00 01 02 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $00, $00, $00, $00, $01, $02
13d34     02 02 01 01 
13d38     00 01 01 01 
13d3c     01 01 01 01 
13d40     01 00 FF FF | 	byte	$02, $02, $01, $01, $00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $ff
13d44     FF FF FE FD 
13d48     FD FD FE FF 
13d4c     FE FF 00 00 
13d50     01 01 02 02 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fe, $ff, $fe, $ff, $00, $00, $01, $01, $02, $02
13d54     02 02 01 01 
13d58     01 01 01 00 
13d5c     01 01 01 01 
13d60     00 FF 00 FF | 	byte	$02, $02, $01, $01, $01, $01, $01, $00, $01, $01, $01, $01, $00, $ff, $00, $ff
13d64     FF FF FE FD 
13d68     FD FD FE FE 
13d6c     FE FE FF FF 
13d70     00 00 01 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $00, $00, $01, $01
13d74     01 01 01 01 
13d78     01 01 01 01 
13d7c     01 01 01 01 | 	byte	$01[12]
13d80     00 FF 00 FF 
13d84     FF FE FE FD 
13d88     FD FE FE FE 
13d8c     FE FE FF FF | 	byte	$00, $ff, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff
13d90     00 00 01 02 
13d94     01 02 02 02 
13d98     02 02 02 02 
13d9c     02 02 02 02 | 	byte	$00, $00, $01, $02, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
13da0     01 00 00 00 
13da4     00 FF FF FF 
13da8     FE FE FE FE 
13dac     FE FE FF FF | 	byte	$01, $00, $00, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff
13db0     00 00 01 01 
13db4     01 01 01 01 
13db8     02 01 01 01 
13dbc     01 02 02 01 | 	byte	$00, $00, $01, $01, $01, $01, $01, $01, $02, $01, $01, $01, $01, $02, $02, $01
13dc0     00 00 00 00 
13dc4     FF FF FE FE 
13dc8     FE FE FE FD 
13dcc     FE FE FF FF | 	byte	$00, $00, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $ff, $ff
13dd0     00 00 00 01 
13dd4     01 01 01 01 
13dd8     02 01 01 02 
13ddc     02 02 02 01 | 	byte	$00, $00, $00, $01, $01, $01, $01, $01, $02, $01, $01, $02, $02, $02, $02, $01
13de0     00 01 00 00 
13de4     00 FF FE FE 
13de8     FE FE FE FD 
13dec     FE FE FE FF | 	byte	$00, $01, $00, $00, $00, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $fe, $ff
13df0     00 00 00 01 
13df4     01 01 02 02 
13df8     02 01 02 02 
13dfc     02 02 01 01 | 	byte	$00, $00, $00, $01, $01, $01, $02, $02, $02, $01, $02, $02, $02, $02, $01, $01
13e00     01 00 00 00 
13e04     FF FF FE FE 
13e08     FE FE FD FC 
13e0c     FD FE FE FF | 	byte	$01, $00, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fc, $fd, $fe, $fe, $ff
13e10     FF FF FF 00 
13e14     01 01 02 02 
13e18     02 02 02 03 
13e1c     03 02 02 01 | 	byte	$ff, $ff, $ff, $00, $01, $01, $02, $02, $02, $02, $02, $03, $03, $02, $02, $01
13e20     01 01 01 00 
13e24     FF FF FF FE 
13e28     FE FE FD FD 
13e2c     FD FF FF FF | 	byte	$01, $01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $ff, $ff, $ff
13e30     00 00 00 01 
13e34     02 02 02 02 
13e38     02 02 02 02 
13e3c     02 02 00 00 | 	byte	$00, $00, $00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $00, $00
13e40     00 01 00 00 
13e44     FF FF FF FE 
13e48     FE FE FC FC 
13e4c     FD FD FE FE | 	byte	$00, $01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fc, $fc, $fd, $fd, $fe, $fe
13e50     FE FF 00 00 
13e54     01 02 02 02 
13e58     02 02 02 02 
13e5c     02 01 01 01 | 	byte	$fe, $ff, $00, $00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
13e60     01 00 00 FF 
13e64     FF FF FE FE 
13e68     FE FD FD FC 
13e6c     FD FE FE FE | 	byte	$01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fc, $fd, $fe, $fe, $fe
13e70     FF 00 00 01 
13e74     02 03 03 03 
13e78     03 03 03 03 
13e7c     02 02 02 02 | 	byte	$ff, $00, $00, $01, $02, $03, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02
13e80     02 01 01 00 
13e84     FF 00 FF FE 
13e88     FE FD FC FD 
13e8c     FD FD FE FE | 	byte	$02, $01, $01, $00, $ff, $00, $ff, $fe, $fe, $fd, $fc, $fd, $fd, $fd, $fe, $fe
13e90     FF FF 00 01 
13e94     02 02 02 02 
13e98     02 03 02 02 
13e9c     02 01 01 01 | 	byte	$ff, $ff, $00, $01, $02, $02, $02, $02, $02, $03, $02, $02, $02, $01, $01, $01
13ea0     01 01 00 FF 
13ea4     FF FF FE FE 
13ea8     FD FD FC FD 
13eac     FD FE FE FE | 	byte	$01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fd, $fd, $fe, $fe, $fe
13eb0     FF 00 01 02 
13eb4     02 02 02 02 
13eb8     03 03 03 03 
13ebc     02 01 01 01 | 	byte	$ff, $00, $01, $02, $02, $02, $02, $02, $03, $03, $03, $03, $02, $01, $01, $01
13ec0     01 01 00 00 
13ec4     FF FF FE FD 
13ec8     FD FC FC FC 
13ecc     FD FD FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $fe
13ed0     FF 00 01 02 
13ed4     03 02 02 03 
13ed8     03 03 03 02 
13edc     01 01 01 01 | 	byte	$ff, $00, $01, $02, $03, $02, $02, $03, $03, $03, $03, $02, $01, $01, $01, $01
13ee0     01 00 00 FF 
13ee4     FF FE FD FD 
13ee8     FC FC FC FC 
13eec     FD FD FE FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $fe
13ef0     FE 00 01 02 
13ef4     02 02 02 03 
13ef8     03 03 03 03 
13efc     02 02 01 01 | 	byte	$fe, $00, $01, $02, $02, $02, $02, $03, $03, $03, $03, $03, $02, $02, $01, $01
13f00     01 01 00 FF 
13f04     FF FE FE FD 
13f08     FD FC FC FD 
13f0c     FD FE FE FF | 	byte	$01, $01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fe, $fe, $ff
13f10     00 01 02 02 
13f14     02 03 03 03 
13f18     02 02 02 02 
13f1c     01 01 01 01 | 	byte	$00, $01, $02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $01, $01, $01
13f20     01 00 00 FF 
13f24     FF FE FD FD 
13f28     FD FC FC FC 
13f2c     FC FD FD FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe
13f30     FF 01 01 02 
13f34     02 03 03 03 
13f38     03 03 03 01 
13f3c     01 01 01 01 | 	byte	$ff, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $01, $01, $01, $01, $01
13f40     01 00 FF FF 
13f44     FE FE FD FD 
13f48     FC FC FC FC 
13f4c     FD FD FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff
13f50     00 01 02 03 
13f54     03 03 04 03 
13f58     03 04 03 02 
13f5c     02 02 02 02 | 	byte	$00, $01, $02, $03, $03, $03, $04, $03, $03, $04, $03, $02, $02, $02, $02, $02
13f60     02 01 00 FF 
13f64     FF FE FE FD 
13f68     FD FC FC FD 
13f6c     FD FD FE FF | 	byte	$02, $01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fe, $ff
13f70     00 01 02 02 
13f74     03 03 03 03 
13f78     03 03 02 01 
13f7c     01 01 01 01 | 	byte	$00, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01
13f80     01 00 FF FF 
13f84     FE FE FD FD 
13f88     FD FC FD FD 
13f8c     FD FD FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $ff
13f90     01 01 02 02 
13f94     03 03 03 03 
13f98     03 03 02 01 
13f9c     01 01 02 01 | 	byte	$01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $02, $01
13fa0     01 00 FF FF 
13fa4     FE FD FD FD 
13fa8     FD FC FD FD 
13fac     FD FE FF 00 | 	byte	$01, $00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fe, $ff, $00
13fb0     01 02 02 03 
13fb4     03 03 03 03 
13fb8     03 03 02 01 
13fbc     01 01 01 01 | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01
13fc0     00 FF FF FE 
13fc4     FD FD FD FD 
13fc8     FC FC FC FC 
13fcc     FD FD FE FF | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff
13fd0     00 01 02 02 
13fd4     03 03 03 03 
13fd8     03 02 02 02 
13fdc     02 02 02 01 | 	byte	$00, $01, $02, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $01
13fe0     00 FF FF FE 
13fe4     FD FD FD FD 
13fe8     FD FC FC FD 
13fec     FE FE FF 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fe, $fe, $ff, $01
13ff0     01 02 03 03 
13ff4     03 03 03 03 
13ff8     03 02 01 01 
13ffc     01 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01, $00
14000     00 FF FF FE 
14004     FD FD FD FD 
14008     FD FC FC FC 
1400c     FD FE FF 00 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $ff, $00
14010     01 01 02 03 
14014     03 03 03 03 
14018     03 02 01 01 
1401c     01 01 01 00 | 	byte	$01, $01, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01, $00
14020     FF FF FE FD 
14024     FD FD FD FD 
14028     FC FC FC FD 
1402c     FE FE FF 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $fe, $ff, $01
14030     01 02 03 03 
14034     04 03 03 04 
14038     03 02 02 02 
1403c     02 02 02 01 | 	byte	$01, $02, $03, $03, $04, $03, $03, $04, $03, $02, $02, $02, $02, $02, $02, $01
14040     00 FF FF FE 
14044     FE FE FE FD 
14048     FD FD FD FD 
1404c     FE FF 00 01 | 	byte	$00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01
14050     01 02 03 03 
14054     03 03 03 03 
14058     02 02 01 01 
1405c     01 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $01, $01, $01, $00
14060     FF FF FE FD 
14064     FD FD FD FD 
14068     FD FC FD FD 
1406c     FE FF 00 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fe, $ff, $00, $01
14070     01 02 03 03 
14074     03 03 03 03 
14078     02 02 02 02 
1407c     02 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
14080     FF FF FE FD 
14084     FD FD FD FD 
14088     FC FC FD FD 
1408c     FE 00 00 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fe, $00, $00, $01
14090     02 03 03 03 
14094     03 03 03 02 
14098     02 02 01 02 
1409c     01 01 00 FF | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $01, $02, $01, $01, $00, $ff
140a0     FF FE FD FD 
140a4     FD FD FD FC 
140a8     FC FC FC FE 
140ac     FF 00 00 00 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fe, $ff, $00, $00, $00
140b0     01 02 03 03 
140b4     03 03 03 03 
140b8     02 02 02 02 
140bc     02 01 00 FF | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $00, $ff
140c0     FF FE FD FD 
140c4     FD FD FD FD 
140c8     FC FD FD FE 
140cc     FF 00 01 02 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fe, $ff, $00, $01, $02
140d0     02 03 03 03 
140d4     03 03 03 02 
140d8     01 02 02 01 
140dc     01 01 00 FF | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $01, $02, $02, $01, $01, $01, $00, $ff
140e0     FE FE FD FD 
140e4     FD FD FD FD 
140e8     FC FD FE FE 
140ec     FF 00 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $00, $00, $01
140f0     02 03 03 03 
140f4     03 03 03 02 
140f8     01 02 01 01 
140fc     01 00 FF FE | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $01, $02, $01, $01, $01, $00, $ff, $fe
14100     FE FD FD FD 
14104     FD FD FD FD 
14108     FC FD FE FF 
1410c     00 00 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $ff, $00, $00, $01, $02
14110     02 03 04 04 
14114     04 04 03 02 
14118     02 02 02 02 
1411c     01 01 00 FF | 	byte	$02, $03, $04, $04, $04, $04, $03, $02, $02, $02, $02, $02, $01, $01, $00, $ff
14120     FE FE FD FD 
14124     FD FD FD FD 
14128     FD FD FE FF 
1412c     00 00 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $00, $00, $01, $02
14130     02 03 03 03 
14134     03 03 02 02 
14138     02 01 01 01 
1413c     00 00 FF FE | 	byte	$02, $03, $03, $03, $03, $03, $02, $02, $02, $01, $01, $01, $00, $00, $ff, $fe
14140     FE FD FD FD 
14144     FD FD FD FD 
14148     FD FE FF FF 
1414c     00 00 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01, $02
14150     03 03 03 04 
14154     03 03 02 02 
14158     02 02 02 01 
1415c     00 00 FF FE | 	byte	$03, $03, $03, $04, $03, $03, $02, $02, $02, $02, $02, $01, $00, $00, $ff, $fe
14160     FE FD FD FD 
14164     FD FD FD FC 
14168     FD FE FF 00 
1416c     00 01 02 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $ff, $00, $00, $01, $02, $02
14170     03 03 04 04 
14174     03 02 02 02 
14178     02 01 01 01 
1417c     00 FF FE FD | 	byte	$03, $03, $04, $04, $03, $02, $02, $02, $02, $01, $01, $01, $00, $ff, $fe, $fd
14180     FD FD FD FD 
14184     FC FC FC FC 
14188     FD FE FF 00 
1418c     00 01 01 02 | 	byte	$fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $00, $00, $01, $01, $02
14190     02 03 03 03 
14194     03 02 02 02 
14198     02 02 02 01 
1419c     00 FF FF FE | 	byte	$02, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $01, $00, $ff, $ff, $fe
141a0     FD FD FD FD 
141a4     FD FD FD FD | 	byte	$fd[8]
141a8     FE FF 00 01 
141ac     01 02 02 03 
141b0     03 03 03 03 
141b4     03 02 02 02 | 	byte	$fe, $ff, $00, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02
141b8     01 01 01 00 
141bc     00 FF FE FE 
141c0     FD FD FD FD 
141c4     FD FD FD FD | 	byte	$01, $01, $01, $00, $00, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd
141c8     FE FF FF 00 
141cc     00 01 02 02 
141d0     02 03 04 03 
141d4     02 02 02 02 | 	byte	$fe, $ff, $ff, $00, $00, $01, $02, $02, $02, $03, $04, $03, $02, $02, $02, $02
141d8     01 01 00 00 
141dc     FF FF FE FD 
141e0     FC FC FC FC 
141e4     FD FD FD FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe
141e8     FE FF 00 01 
141ec     01 02 03 03 
141f0     04 04 04 03 
141f4     03 03 02 02 | 	byte	$fe, $ff, $00, $01, $01, $02, $03, $03, $04, $04, $04, $03, $03, $03, $02, $02
141f8     02 01 01 00 
141fc     00 FF FE FE 
14200     FD FD FD FD 
14204     FD FD FD FE | 	byte	$02, $01, $01, $00, $00, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe
14208     FF FF 00 00 
1420c     01 02 03 03 
14210     03 03 03 02 
14214     02 02 02 01 | 	byte	$ff, $ff, $00, $00, $01, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $01
14218     01 00 00 00 
1421c     FF FE FD FD 
14220     FC FC FD FD 
14224     FD FD FD FE | 	byte	$01, $00, $00, $00, $ff, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fe
14228     FF 00 01 01 
1422c     01 02 03 03 
14230     03 03 03 02 
14234     02 02 02 02 | 	byte	$ff, $00, $01, $01, $01, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02
14238     02 01 00 00 
1423c     FF FF FE FD 
14240     FD FC FD FD 
14244     FD FD FE FF | 	byte	$02, $01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $ff
14248     00 00 01 01 
1424c     02 03 03 03 
14250     04 03 02 02 
14254     02 02 02 01 | 	byte	$00, $00, $01, $01, $02, $03, $03, $03, $04, $03, $02, $02, $02, $02, $02, $01
14258     01 00 00 FF 
1425c     FF FD FD FC 
14260     FD FC FC FC 
14264     FC FD FE FE | 	byte	$01, $00, $00, $ff, $ff, $fd, $fd, $fc, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $fe
14268     FF 00 01 01 
1426c     02 02 02 03 
14270     03 02 02 02 
14274     02 02 02 01 | 	byte	$ff, $00, $01, $01, $02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $01
14278     01 01 01 00 
1427c     FF FE FD FD 
14280     FC FC FD FD 
14284     FD FD FF FF | 	byte	$01, $01, $01, $00, $ff, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $ff
14288     00 01 01 02 
1428c     02 03 03 04 
14290     03 02 02 02 
14294     02 02 01 01 | 	byte	$00, $01, $01, $02, $02, $03, $03, $04, $03, $02, $02, $02, $02, $02, $01, $01
14298     00 00 FF FF 
1429c     FE FD FC FC 
142a0     FC FD FD FD 
142a4     FD FE FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $ff
142a8     00 00 01 01 
142ac     02 03 03 03 
142b0     03 02 02 02 
142b4     02 01 01 00 | 	byte	$00, $00, $01, $01, $02, $03, $03, $03, $03, $02, $02, $02, $02, $01, $01, $00
142b8     00 00 FF FF 
142bc     FE FD FC FC 
142c0     FC FC FD FD 
142c4     FD FE FF 00 | 	byte	$00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $00
142c8     01 01 01 02 
142cc     03 03 04 03 
142d0     03 02 03 03 
142d4     03 02 02 01 | 	byte	$01, $01, $01, $02, $03, $03, $04, $03, $03, $02, $03, $03, $03, $02, $02, $01
142d8     01 00 00 FF 
142dc     FE FE FD FC 
142e0     FD FD FE FE 
142e4     FE FF 00 00 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fd, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $00, $00
142e8     01 01 02 02 
142ec     02 03 03 03 
142f0     02 02 02 02 
142f4     02 01 01 00 | 	byte	$01, $01, $02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
142f8     FF FF FF FE 
142fc     FD FC FC FC 
14300     FD FD FD FD 
14304     FE FF 00 01 | 	byte	$ff, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01
14308     01 01 02 02 
1430c     03 03 02 02 
14310     02 02 02 02 
14314     02 01 01 00 | 	byte	$01, $01, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00
14318     00 FF FF FE 
1431c     FD FD FC FD 
14320     FD FD FD FE 
14324     FE FF 00 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $00, $01
14328     01 01 02 03 
1432c     03 03 03 02 
14330     02 02 02 02 
14334     01 01 00 00 | 	byte	$01, $01, $02, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00, $00
14338     00 FF FE FE 
1433c     FD FC FC FC 
14340     FD FD FD FE 
14344     FE FF 00 00 | 	byte	$00, $ff, $fe, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $ff, $00, $00
14348     01 01 02 03 
1434c     02 02 02 02 
14350     02 02 02 02 
14354     01 01 01 00 | 	byte	$01, $01, $02, $03, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $00
14358     00 FF FF FE 
1435c     FD FC FC FD 
14360     FD FE FE FE 
14364     FF 00 01 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fc, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $00, $01, $01
14368     01 02 03 03 
1436c     03 03 03 03 
14370     02 02 02 01 
14374     01 00 00 FF | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $01, $01, $00, $00, $ff
14378     FF FE FE FD 
1437c     FD FC FD FD 
14380     FD FE FE FE 
14384     FF 00 01 01 | 	byte	$ff, $fe, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $00, $01, $01
14388     01 02 02 02 
1438c     02 02 02 02 
14390     02 02 01 01 
14394     01 00 00 FF | 	byte	$01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $00, $00, $ff
14398     FF FE FD FD 
1439c     FC FC FC FD 
143a0     FD FD FE FF 
143a4     FF 00 00 01 | 	byte	$ff, $fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01
143a8     02 02 02 03 
143ac     03 02 02 02 
143b0     02 02 02 02 
143b4     01 01 00 00 | 	byte	$02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00
143b8     FF FF FE FE 
143bc     FD FD FD FE 
143c0     FE FE FF FF 
143c4     00 01 01 01 | 	byte	$ff, $ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $01, $01, $01
143c8     02 02 03 03 
143cc     03 02 02 02 
143d0     02 01 01 01 
143d4     01 00 FF FF | 	byte	$02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $01, $01, $01, $00, $ff, $ff
143d8     FE FE FD FD 
143dc     FD FD FD FE 
143e0     FE FE FF 00 
143e4     00 01 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $00, $00, $01, $01, $02
143e8     02 02 03 02 
143ec     02 02 02 02 
143f0     02 01 01 00 
143f4     01 00 FF 00 | 	byte	$02, $02, $03, $02, $02, $02, $02, $02, $02, $01, $01, $00, $01, $00, $ff, $00
143f8     FF FE FE FD 
143fc     FD FD FE FE 
14400     FE FE FF 00 
14404     00 01 01 02 | 	byte	$ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $00, $00, $01, $01, $02
14408     02 02 03 02 
1440c     02 02 02 02 
14410     01 01 01 01 
14414     00 FF FF FF | 	byte	$02, $02, $03, $02, $02, $02, $02, $02, $01, $01, $01, $01, $00, $ff, $ff, $ff
14418     FE FE FD FD 
1441c     FD FD FD FE 
14420     FE FE FF FF 
14424     00 00 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $00, $00, $01
14428     02 02 02 02 
1442c     02          | 	byte	$02[5]
1442d     01 01 01 01 
14431     01 01       | 	byte	$01[6]
14433     00 00 00 FF 
14437     00 FF FF FE 
1443b     FD FD FE FE 
1443f     FE FE FF FF | 	byte	$00, $00, $00, $ff, $00, $ff, $ff, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff
14443     00 01 01 01 
14447     02 02 03 03 
1444b     02 02 02 02 
1444f     02 01 01 00 | 	byte	$00, $01, $01, $01, $02, $02, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
14453     00 FF FF FF 
14457     FE FE FE FD 
1445b     FD FE FE FE 
1445f     FF FF FF FF | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $ff, $ff
14463     00 00 00 01 
14467     02 02 02 02 
1446b     01 02 01 01 
1446f     01 01 01 00 | 	byte	$00, $00, $00, $01, $02, $02, $02, $02, $01, $02, $01, $01, $01, $01, $01, $00
14473     00 FF FF FF 
14477     FE FE FD FD 
1447b     FD FE FE FE 
1447f     FE FF FF 00 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $00
14483     00 00 01 01 
14487     02 02 02 02 
1448b     02 02 02 02 
1448f     02 01 01 01 | 	byte	$00, $00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
14493     00 01 00 FF 
14497     FF FF FF FE 
1449b     FE FE FF FF 
1449f     FF FF 00 00 | 	byte	$00, $01, $00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $00, $00
144a3     00 01 01 02 
144a7     02 02 02 02 
144ab     02 02 02 01 
144af     01 00 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00, $00
144b3     00 FF FF FF 
144b7     FE FE FE FE 
144bb     FE FE FF FF 
144bf     FF FF FF 00 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00
144c3     00 01 01 02 
144c7     02 02 02 01 
144cb     01 02 02 01 
144cf     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $01, $01, $02, $02, $01, $01, $01, $00, $00
144d3     00 FF FF FF 
144d7     FF FE FE FE 
144db     FE FF FF FF 
144df     FF FF 00 00 | 	byte	$00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
144e3     00 01 01 02 
144e7     02 02 02 02 
144eb     02 02 01 01 
144ef     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01, $00, $00
144f3     00 FF FF FF 
144f7     FF FE FE FE 
144fb     FE FE FE FF 
144ff     FF FF FF FF | 	byte	$00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff
14503     00 00 01 01 
14507     01 02 02 02 
1450b     01 01 00 00 
1450f     00 00 00 00 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $01, $01, $00, $00, $00, $00, $00, $00
14513     FF 00 FF FF 
14517     FF FF FF FE 
1451b     FE FF FF FF 
1451f     FF FF 00 00 | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
14523     00 01 02 02 
14527     02 02 02 02 
1452b     02 02 01 01 
1452f     00 00 00 FF | 	byte	$00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00, $00, $ff
14533     FF FF FF FF 
14537     FE FE FE FE 
1453b     FF FF FF FF 
1453f     FF FF FF 00 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00
14543     00 01 01 01 
14547     01 01 01 01 
1454b     01 00 00 00 
1454f     00 00 00 FF | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $ff
14553     FF FF FF FF 
14557     FE FE FE FE 
1455b     FE FF FF FF 
1455f     FF FF 00 00 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
14563     00 01 01 02 
14567     02 01 01 01 
1456b     01 01 01 01 
1456f     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00
14573     00 00 00 00 
14577     00          | 	byte	$00[5]
14578     FF FF FF FF 
1457c     00 00 FF 00 
14580     00 00 00 01 
14584     01 01 02 01 | 	byte	$ff, $ff, $ff, $ff, $00, $00, $ff, $00, $00, $00, $00, $01, $01, $01, $02, $01
14588     01 01 01 01 
1458c     01          | 	byte	$01[5]
1458d     00 00 00 00 
14591     00          | 	byte	$00[5]
14592     FF 00 FF FF 
14596     FF FE FE FE 
1459a     FF FF FF FF 
1459e     FF FF 00 00 | 	byte	$ff, $00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00
145a2     00 01 01 01 
145a6     01 01 01 01 
145aa     01 01 01 00 
145ae     00 00 00 00 | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00
145b2     FF 00 00 FF 
145b6     00 FF FF FF 
145ba     FF FF FF FF 
145be     FF FF 00 00 | 	byte	$ff, $00, $00, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00
145c2     00 01 01 01 
145c6     01 01 01 01 
145ca     01 01 01 01 
145ce     01 00 00 00 | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00
145d2     FF 00 FF FF 
145d6     FF FF FF FF 
145da     FF FF FF FF 
145de     FF FF FF FF | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
145e2     00 00 00 01 
145e6     00 00 01 01 
145ea     01 00 00 00 
145ee     00 00 00 00 | 	byte	$00, $00, $00, $01, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00
145f2     00 00 00 00 
145f6     00 00 00 00 | 	byte	$00[8]
145fa     FF 00 00 FF 
145fe     00 FF 00 00 
14602     00 01 01 01 
14606     00 00 00 00 | 	byte	$ff, $00, $00, $ff, $00, $ff, $00, $00, $00, $01, $01, $01, $00, $00, $00, $00
1460a     7F 7F 7F 7F 
      ...             
1462a     7F 7F 7F 7F 
1462e     7F          | 	byte	$7f[37]
1462f     74 5D 79 72 
14633     4B 54 49 3B 
14637     44 38 1C 25 
1463b     27 1A 2F 28 | 	byte	$74, $5d, $79, $72, $4b, $54, $49, $3b, $44, $38, $1c, $25, $27, $1a, $2f, $28
1463f     22 31 18 1E 
14643     2B 35 32 24 
14647     34 24 18 36 
1464b     24 13 2D 2E | 	byte	$22, $31, $18, $1e, $2b, $35, $32, $24, $34, $24, $18, $36, $24, $13, $2d, $2e
1464f     21 25 1D 0E 
14653     29 28 0E 0A 
14657     08 FB 01 09 
1465b     12 ED F1 F7 | 	byte	$21, $25, $1d, $0e, $29, $28, $0e, $0a, $08, $fb, $01, $09, $12, $ed, $f1, $f7
1465f     EA EA EC D6 
14663     DD E5 DE DD 
14667     CA C5 D0 C8 
1466b     B6 BF C2 C3 | 	byte	$ea, $ea, $ec, $d6, $dd, $e5, $de, $dd, $ca, $c5, $d0, $c8, $b6, $bf, $c2, $c3
1466f     BC B2 CB B4 
14673     B1 B9 9B A7 
14677     A0 8B 8F 8D 
1467b     90 95 88 81 | 	byte	$bc, $b2, $cb, $b4, $b1, $b9, $9b, $a7, $a0, $8b, $8f, $8d, $90, $95, $88, $81
1467f     81 83 81 81 
14683     81 81 81 81 
14687     87 81 8B 95 
1468b     81 8B 91 87 | 	byte	$81, $83, $81, $81, $81, $81, $81, $81, $87, $81, $8b, $95, $81, $8b, $91, $87
1468f     A5 A2 88 87 
14693     AF 94 8F 9C 
14697     88 91 96 93 
1469b     97 99 AA 9B | 	byte	$a5, $a2, $88, $87, $af, $94, $8f, $9c, $88, $91, $96, $93, $97, $99, $aa, $9b
1469f     99 AF A4 AF 
146a3     B6 AC B3 CE 
146a7     C0 BE D9 CD 
146ab     D7 DC CC CF | 	byte	$99, $af, $a4, $af, $b6, $ac, $b3, $ce, $c0, $be, $d9, $cd, $d7, $dc, $cc, $cf
146af     E8 D2 D6 DB 
146b3     D8 D0 E7 E2 
146b7     DC E5 F2 EA 
146bb     F3 07 FC 09 | 	byte	$e8, $d2, $d6, $db, $d8, $d0, $e7, $e2, $dc, $e5, $f2, $ea, $f3, $07, $fc, $09
146bf     17 11 13 20 
146c3     24 2F 3F 34 
146c7     3F 63 4C 57 
146cb     74 6D 7B 7F | 	byte	$17, $11, $13, $20, $24, $2f, $3f, $34, $3f, $63, $4c, $57, $74, $6d, $7b, $7f
146cf     77 7D 7F 7F 
146d3     7F 7F 7F 7F 
146d7     7F 7F 7F 7F 
146db     7F 7F 7F 7F | 	byte	$77, $7d, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
146df     7F 7F 7F 7F 
146e3     7F 7F 7F 7F 
146e7     7F 7F 7F 7F 
146eb     7F 7F 7F 7F 
146ef     7F 7F 7F    | 	byte	$7f[19]
146f2     68 6E 6F 63 
146f6     61 5C 46 4A 
146fa     49 2E 34 3A 
146fe     1F 25 1C 05 | 	byte	$68, $6e, $6f, $63, $61, $5c, $46, $4a, $49, $2e, $34, $3a, $1f, $25, $1c, $05
14702     13 19 02 04 
14706     F9 F2 F4 EB 
1470a     E0 D3 DA D5 
1470e     B8 BA B2 AB | 	byte	$13, $19, $02, $04, $f9, $f2, $f4, $eb, $e0, $d3, $da, $d5, $b8, $ba, $b2, $ab
14712     B6 98 87 89 
14716     83 81 81 81 
1471a     81 81 81 81 
1471e     81 81 81 81 | 	byte	$b6, $98, $87, $89, $83, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81
14722     81 81 81 81 
      ...             
1474e     81 81 81 81 
14752     81 81 81 81 | 	byte	$81[52]
14756     87 90 8B 9B 
1475a     A4 A7 A9 B7 
1475e     B8 C3 D4 CE 
14762     D2 E7 E4 EB | 	byte	$87, $90, $8b, $9b, $a4, $a7, $a9, $b7, $b8, $c3, $d4, $ce, $d2, $e7, $e4, $eb
14766     FC FB 04 10 
1476a     18 13 1F 24 
1476e     27 3B 2D 2F 
14772     43 3F 46 4A | 	byte	$fc, $fb, $04, $10, $18, $13, $1f, $24, $27, $3b, $2d, $2f, $43, $3f, $46, $4a
14776     49 4C 52 55 
1477a     4B 51 5F 5D 
1477e     52 55 5B 5C 
14782     65 5A 4F 63 | 	byte	$49, $4c, $52, $55, $4b, $51, $5f, $5d, $52, $55, $5b, $5c, $65, $5a, $4f, $63
14786     55 4F 53 4C 
1478a     53 53 4B 3E 
1478e     45 41 41 45 
14792     3F 3F 3B 37 | 	byte	$55, $4f, $53, $4c, $53, $53, $4b, $3e, $45, $41, $41, $45, $3f, $3f, $3b, $37
14796     36 3C 48 2D 
1479a     2B 37 29 25 
1479e     28 21 22 24 
147a2     18 10 19 0A | 	byte	$36, $3c, $48, $2d, $2b, $37, $29, $25, $28, $21, $22, $24, $18, $10, $19, $0a
147a6     11 12 00 0A 
147aa     08 FA 01 00 
147ae     FA FF FC F5 
147b2     F7 F7 F2 F6 | 	byte	$11, $12, $00, $0a, $08, $fa, $01, $00, $fa, $ff, $fc, $f5, $f7, $f7, $f2, $f6
147b6     F5 F0 EE EF 
147ba     EF E9 EC E2 
147be     E2 DF DF D9 
147c2     DF DB CF DB | 	byte	$f5, $f0, $ee, $ef, $ef, $e9, $ec, $e2, $e2, $df, $df, $d9, $df, $db, $cf, $db
147c6     DA CC D5 D0 
147ca     D4 D8 D0 D4 
147ce     D6 DD E0 DF 
147d2     E2 E6 E8 E8 | 	byte	$da, $cc, $d5, $d0, $d4, $d8, $d0, $d4, $d6, $dd, $e0, $df, $e2, $e6, $e8, $e8
147d6     F0 F7 FC 03 
147da     FB 01 12 0E 
147de     15 11 18 21 
147e2     20 1C 29 2E | 	byte	$f0, $f7, $fc, $03, $fb, $01, $12, $0e, $15, $11, $18, $21, $20, $1c, $29, $2e
147e6     29 33 2F 2F 
147ea     3D 3F 3A 3D 
147ee     4A 49 4E 53 
147f2     53 57 66 60 | 	byte	$29, $33, $2f, $2f, $3d, $3f, $3a, $3d, $4a, $49, $4e, $53, $53, $57, $66, $60
147f6     5F 66 66 67 
147fa     72 6E 6D 77 
147fe     6F 6E 7E 74 
14802     73 7F 76 74 | 	byte	$5f, $66, $66, $67, $72, $6e, $6d, $77, $6f, $6e, $7e, $74, $73, $7f, $76, $74
14806     7C 7B 7A 7A 
1480a     78 7A 7F 7E 
1480e     75 7B 7F 7E 
14812     7F 79 7F 7D | 	byte	$7c, $7b, $7a, $7a, $78, $7a, $7f, $7e, $75, $7b, $7f, $7e, $7f, $79, $7f, $7d
14816     78 77 76 79 
1481a     6D 6D 70 6C 
1481e     6D 61 61 5D 
14822     5F 5B 53 54 | 	byte	$78, $77, $76, $79, $6d, $6d, $70, $6c, $6d, $61, $61, $5d, $5f, $5b, $53, $54
14826     51 4A 4A 41 
1482a     3C 35 38 31 
1482e     22 2A 23 10 
14832     15 0C 05 07 | 	byte	$51, $4a, $4a, $41, $3c, $35, $38, $31, $22, $2a, $23, $10, $15, $0c, $05, $07
14836     00 F0 F6 E8 
1483a     E1 E8 DE D9 
1483e     D8 D0 CB C9 
14842     C7 BD B6 B1 | 	byte	$00, $f0, $f6, $e8, $e1, $e8, $de, $d9, $d8, $d0, $cb, $c9, $c7, $bd, $b6, $b1
14846     A9 A7 A6 98 
1484a     90 95 8E 8A 
1484e     87 81 82 82 
14852     81 81 82 81 | 	byte	$a9, $a7, $a6, $98, $90, $95, $8e, $8a, $87, $81, $82, $82, $81, $81, $82, $81
14856     81 81 81 81 
1485a     81 81 81 81 
1485e     81          | 	byte	$81[9]
1485f     82 83 82 82 
14863     84 85 82 89 
14867     88 86 87 89 
1486b     88 90 92 8D | 	byte	$82, $83, $82, $82, $84, $85, $82, $89, $88, $86, $87, $89, $88, $90, $92, $8d
1486f     97 9A 92 9F 
14873     9F 9C A7 A4 
14877     9C AB AD AA 
1487b     B2 B0 AB B7 | 	byte	$97, $9a, $92, $9f, $9f, $9c, $a7, $a4, $9c, $ab, $ad, $aa, $b2, $b0, $ab, $b7
1487f     B7 B5 BA BB 
14883     BC BC BD C2 
14887     C0 C5 BE C3 
1488b     C5 C4 C5 C9 | 	byte	$b7, $b5, $ba, $bb, $bc, $bc, $bd, $c2, $c0, $c5, $be, $c3, $c5, $c4, $c5, $c9
1488f     C2 C3 CB C6 
14893     C7 CE C9 C7 
14897     C6 D2 D2 CF 
1489b     D1 DD D8 DB | 	byte	$c2, $c3, $cb, $c6, $c7, $ce, $c9, $c7, $c6, $d2, $d2, $cf, $d1, $dd, $d8, $db
1489f     DB DB E1 E9 
148a3     EA E9 E2 E6 
148a7     F0 EE E7 F1 
148ab     F5 F7 FD F5 | 	byte	$db, $db, $e1, $e9, $ea, $e9, $e2, $e6, $f0, $ee, $e7, $f1, $f5, $f7, $fd, $f5
148af     F9 09 04 05 
148b3     0E 0E 15 20 
148b7     17 1C 1F 21 
148bb     2B 32 2E 33 | 	byte	$f9, $09, $04, $05, $0e, $0e, $15, $20, $17, $1c, $1f, $21, $2b, $32, $2e, $33
148bf     31 33 3C 37 
148c3     3E 37 34 42 
148c7     3C 37 3F 38 
148cb     38 38 35 35 | 	byte	$31, $33, $3c, $37, $3e, $37, $34, $42, $3c, $37, $3f, $38, $38, $38, $35, $35
148cf     36 34 35 36 
148d3     33 38 32 33 
148d7     37 37 34 3B 
148db     32 37 3B 3E | 	byte	$36, $34, $35, $36, $33, $38, $32, $33, $37, $37, $34, $3b, $32, $37, $3b, $3e
148df     3C 3A 37 3B 
148e3     39 37 45 3D 
148e7     3C 3B 33 3E 
148eb     40 3B 3F 3C | 	byte	$3c, $3a, $37, $3b, $39, $37, $45, $3d, $3c, $3b, $33, $3e, $40, $3b, $3f, $3c
148ef     38 40 40 44 
148f3     48 40 3D 4E 
148f7     48 4A 4E 44 
148fb     47 50 46 49 | 	byte	$38, $40, $40, $44, $48, $40, $3d, $4e, $48, $4a, $4e, $44, $47, $50, $46, $49
148ff     49 45 46 46 
14903     3D 3B 43 42 
14907     38 38 33 2F 
1490b     31 36 24 2A | 	byte	$49, $45, $46, $46, $3d, $3b, $43, $42, $38, $38, $33, $2f, $31, $36, $24, $2a
1490f     27 1F 20 1C 
14913     12 1E 13 0D 
14917     16 0D 06 09 
1491b     08 06 01 01 | 	byte	$27, $1f, $20, $1c, $12, $1e, $13, $0d, $16, $0d, $06, $09, $08, $06, $01, $01
1491f     01 01 FF FC 
14923     FE 01 FB F8 
14927     00 FE FD 01 
1492b     F8 FA 00 F8 | 	byte	$01, $01, $ff, $fc, $fe, $01, $fb, $f8, $00, $fe, $fd, $01, $f8, $fa, $00, $f8
1492f     FF 02 FB 02 
14933     03 07 04 05 
14937     0A 08 0E 0C 
1493b     0E 0F 0C 16 | 	byte	$ff, $02, $fb, $02, $03, $07, $04, $05, $0a, $08, $0e, $0c, $0e, $0f, $0c, $16
1493f     12 10 0A 0F 
14943     0E 0B 0D 01 
14947     03 04 FB FB 
1494b     F3 F1 F2 EB | 	byte	$12, $10, $0a, $0f, $0e, $0b, $0d, $01, $03, $04, $fb, $fb, $f3, $f1, $f2, $eb
1494f     E7 E5 DF DC 
14953     D6 E1 DA D5 
14957     D5 D1 CD D0 
1495b     D0 C9 CB D0 | 	byte	$e7, $e5, $df, $dc, $d6, $e1, $da, $d5, $d5, $d1, $cd, $d0, $d0, $c9, $cb, $d0
1495f     C7 C7 C9 C3 
14963     C8 C8 C0 BE 
14967     C5 C4 C4 C0 
1496b     C4 CC C8 C7 | 	byte	$c7, $c7, $c9, $c3, $c8, $c8, $c0, $be, $c5, $c4, $c4, $c0, $c4, $cc, $c8, $c7
1496f     CF D3 D7 DC 
14973     D2 DD E3 EB 
14977     EC EE F5 FD 
1497b     FD 00 01 01 | 	byte	$cf, $d3, $d7, $dc, $d2, $dd, $e3, $eb, $ec, $ee, $f5, $fd, $fd, $00, $01, $01
1497f     0E 0B 01 0A 
14983     10 09 0B 11 
14987     0C 07 10 0B 
1498b     0A 16 11 10 | 	byte	$0e, $0b, $01, $0a, $10, $09, $0b, $11, $0c, $07, $10, $0b, $0a, $16, $11, $10
1498f     10 08 0B 19 
14993     12 0C 11 13 
14997     0B 0E 08 0B 
1499b     11 0D 03 06 | 	byte	$10, $08, $0b, $19, $12, $0c, $11, $13, $0b, $0e, $08, $0b, $11, $0d, $03, $06
1499f     04 FE 08 02 
149a3     F1 F6 00 FD 
149a7     FB F9 F1 F7 
149ab     01 F0 F4 FC | 	byte	$04, $fe, $08, $02, $f1, $f6, $00, $fd, $fb, $f9, $f1, $f7, $01, $f0, $f4, $fc
149af     F7 F5 FA F6 
149b3     F4 F2 EF F7 
149b7     EF ED EB E6 
149bb     DF E1 D6 DC | 	byte	$f7, $f5, $fa, $f6, $f4, $f2, $ef, $f7, $ef, $ed, $eb, $e6, $df, $e1, $d6, $dc
149bf     D4 CB CE C6 
149c3     C9 CB C2 C1 
149c7     C3 BE BF BA 
149cb     BB BA B8 BB | 	byte	$d4, $cb, $ce, $c6, $c9, $cb, $c2, $c1, $c3, $be, $bf, $ba, $bb, $ba, $b8, $bb
149cf     B8 B8 C1 C0 
149d3     B9 BF BA B4 
149d7     C3 C2 BF CB 
149db     CA C4 CA CE | 	byte	$b8, $b8, $c1, $c0, $b9, $bf, $ba, $b4, $c3, $c2, $bf, $cb, $ca, $c4, $ca, $ce
149df     C9 CD DB D9 
149e3     DA DF DE E9 
149e7     ED E2 EB F7 
149eb     F7 FD 06 FC | 	byte	$c9, $cd, $db, $d9, $da, $df, $de, $e9, $ed, $e2, $eb, $f7, $f7, $fd, $06, $fc
149ef     06 16 11 17 
149f3     1F 1D 29 2A 
149f7     27 2C 31 30 
149fb     31 37 38 3D | 	byte	$06, $16, $11, $17, $1f, $1d, $29, $2a, $27, $2c, $31, $30, $31, $37, $38, $3d
149ff     3E 37 42 46 
14a03     3E 3A 48 4B 
14a07     47 49 47 4D 
14a0b     53 54 55 51 | 	byte	$3e, $37, $42, $46, $3e, $3a, $48, $4b, $47, $49, $47, $4d, $53, $54, $55, $51
14a0f     50 59 5D 56 
14a13     4E 59 54 4A 
14a17     4B 4A 4F 4F 
14a1b     44 43 41 43 | 	byte	$50, $59, $5d, $56, $4e, $59, $54, $4a, $4b, $4a, $4f, $4f, $44, $43, $41, $43
14a1f     44 40 40 40 
14a23     38 3C 3A 36 
14a27     30 30 32 2D 
14a2b     24 23 24 19 | 	byte	$44, $40, $40, $40, $38, $3c, $3a, $36, $30, $30, $32, $2d, $24, $23, $24, $19
14a2f     18 18 08 07 
14a33     03 00 FD F1 
14a37     EA EC EB E4 
14a3b     DB DF DA D2 | 	byte	$18, $18, $08, $07, $03, $00, $fd, $f1, $ea, $ec, $eb, $e4, $db, $df, $da, $d2
14a3f     D7 C9 C3 C1 
14a43     BC BC B9 AF 
14a47     AB AE B0 A1 
14a4b     A6 AB A4 A1 | 	byte	$d7, $c9, $c3, $c1, $bc, $bc, $b9, $af, $ab, $ae, $b0, $a1, $a6, $ab, $a4, $a1
14a4f     9E 9C 9E 9F 
14a53     9B 9D 99 A3 
14a57     A6 A2 A6 AB 
14a5b     AB B3 B1 AC | 	byte	$9e, $9c, $9e, $9f, $9b, $9d, $99, $a3, $a6, $a2, $a6, $ab, $ab, $b3, $b1, $ac
14a5f     BA C2 C4 BE 
14a63     C9 D2 D1 CE 
14a67     D9 DC DE E9 
14a6b     E0 E0 E9 EA | 	byte	$ba, $c2, $c4, $be, $c9, $d2, $d1, $ce, $d9, $dc, $de, $e9, $e0, $e0, $e9, $ea
14a6f     F4 F5 F0 F5 
14a73     F9 FE 01 07 
14a77     0A 0B 0D 11 
14a7b     15 19 25 1E | 	byte	$f4, $f5, $f0, $f5, $f9, $fe, $01, $07, $0a, $0b, $0d, $11, $15, $19, $25, $1e
14a7f     25 2F 29 2B 
14a83     2F 33 3A 3F 
14a87     3B 3C 41 45 
14a8b     43 47 47 4A | 	byte	$25, $2f, $29, $2b, $2f, $33, $3a, $3f, $3b, $3c, $41, $45, $43, $47, $47, $4a
14a8f     4E 57 51 53 
14a93     59 55 62 6A 
14a97     5A 63 6D 69 
14a9b     6B 72 6E 70 | 	byte	$4e, $57, $51, $53, $59, $55, $62, $6a, $5a, $63, $6d, $69, $6b, $72, $6e, $70
14a9f     6C 70 6F 70 
14aa3     6D 6D 6E 6B 
14aa7     69 69 69 5E 
14aab     67 68 5F 63 | 	byte	$6c, $70, $6f, $70, $6d, $6d, $6e, $6b, $69, $69, $69, $5e, $67, $68, $5f, $63
14aaf     60 55 62 56 
14ab3     4E 52 4B 48 
14ab7     42 41 41 36 
14abb     35 37 31 2E | 	byte	$60, $55, $62, $56, $4e, $52, $4b, $48, $42, $41, $41, $36, $35, $37, $31, $2e
14abf     25 1F 20 1D 
14ac3     17 13 10 10 
14ac7     08 01 02 06 
14acb     FC FD F4 E9 | 	byte	$25, $1f, $20, $1d, $17, $13, $10, $10, $08, $01, $02, $06, $fc, $fd, $f4, $e9
14acf     F2 EC E5 E0 
14ad3     D2 D9 D6 D2 
14ad7     CF CD CC CA 
14adb     C7 C9 C7 C7 | 	byte	$f2, $ec, $e5, $e0, $d2, $d9, $d6, $d2, $cf, $cd, $cc, $ca, $c7, $c9, $c7, $c7
14adf     C9 CA C7 CC 
14ae3     CA CB CE CC 
14ae7     CC CE CE CD 
14aeb     D0 CB CB CC | 	byte	$c9, $ca, $c7, $cc, $ca, $cb, $ce, $cc, $cc, $ce, $ce, $cd, $d0, $cb, $cb, $cc
14aef     C9 D0 CC C6 
14af3     CB CA C9 D0 
14af7     CF CD CD CD 
14afb     D2 D2 CB CF | 	byte	$c9, $d0, $cc, $c6, $cb, $ca, $c9, $d0, $cf, $cd, $cd, $cd, $d2, $d2, $cb, $cf
14aff     D1 CA D2 D0 
14b03     CE D5 D3 D3 
14b07     D4 CC CF D3 
14b0b     D1 D0 D0 CC | 	byte	$d1, $ca, $d2, $d0, $ce, $d5, $d3, $d3, $d4, $cc, $cf, $d3, $d1, $d0, $d0, $cc
14b0f     CE CA CC CA 
14b13     CD D0 C7 CF 
14b17     CF C9 C6 CE 
14b1b     CD D0 CF C9 | 	byte	$ce, $ca, $cc, $ca, $cd, $d0, $c7, $cf, $cf, $c9, $c6, $ce, $cd, $d0, $cf, $c9
14b1f     CC D8 D1 D1 
14b23     D2 D1 D7 DD 
14b27     D8 D7 DA DD 
14b2b     D4 D8 D3 D5 | 	byte	$cc, $d8, $d1, $d1, $d2, $d1, $d7, $dd, $d8, $d7, $da, $dd, $d4, $d8, $d3, $d5
14b2f     DD D4 C9 CF 
14b33     D3 D1 D0 D0 
14b37     CF D0 D0 CF 
14b3b     D2 D6 D5 D5 | 	byte	$dd, $d4, $c9, $cf, $d3, $d1, $d0, $d0, $cf, $d0, $d0, $cf, $d2, $d6, $d5, $d5
14b3f     DA D5 D7 DF 
14b43     DD DD E3 DD 
14b47     E2 E7 DB DF 
14b4b     E6 DE DB DD | 	byte	$da, $d5, $d7, $df, $dd, $dd, $e3, $dd, $e2, $e7, $db, $df, $e6, $de, $db, $dd
14b4f     DD DD DD DE 
14b53     E0 DB E1 E0 
14b57     E3 E6 E4 E8 
14b5b     EA ED F1 F2 | 	byte	$dd, $dd, $dd, $de, $e0, $db, $e1, $e0, $e3, $e6, $e4, $e8, $ea, $ed, $f1, $f2
14b5f     F2 F8 F8 F8 
14b63     FE 00 00 0C 
14b67     0A 0C 0D 0F 
14b6b     17 16 14 19 | 	byte	$f2, $f8, $f8, $f8, $fe, $00, $00, $0c, $0a, $0c, $0d, $0f, $17, $16, $14, $19
14b6f     1A 1F 21 1E 
14b73     23 29 2A 2B 
14b77     25 2D 36 2F 
14b7b     32 33 32 3A | 	byte	$1a, $1f, $21, $1e, $23, $29, $2a, $2b, $25, $2d, $36, $2f, $32, $33, $32, $3a
14b7f     39 34 3D 41 
14b83     3C 3E 3C 3E 
14b87     4A 45 3D 43 
14b8b     45 43 44 40 | 	byte	$39, $34, $3d, $41, $3c, $3e, $3c, $3e, $4a, $45, $3d, $43, $45, $43, $44, $40
14b8f     38 3B 3F 37 
14b93     39 38 30 33 
14b97     30 2C 32 2D 
14b9b     27 2D 2C 2D | 	byte	$38, $3b, $3f, $37, $39, $38, $30, $33, $30, $2c, $32, $2d, $27, $2d, $2c, $2d
14b9f     30 2F 2A 31 
14ba3     31 2C 33 33 
14ba7     2D 31 33 2D 
14bab     2C 2F 2F 2F | 	byte	$30, $2f, $2a, $31, $31, $2c, $33, $33, $2d, $31, $33, $2d, $2c, $2f, $2f, $2f
14baf     30 23 28 28 
14bb3     23 2D 2B 22 
14bb7     27 26 23 27 
14bbb     28 29 2A 28 | 	byte	$30, $23, $28, $28, $23, $2d, $2b, $22, $27, $26, $23, $27, $28, $29, $2a, $28
14bbf     23 28 2B 2F 
14bc3     2C 29 28 2A 
14bc7     26 25 26 24 
14bcb     21 23 20 18 | 	byte	$23, $28, $2b, $2f, $2c, $29, $28, $2a, $26, $25, $26, $24, $21, $23, $20, $18
14bcf     1F 1E 1A 17 
14bd3     17 0D 12 12 
14bd7     06 0D 12 09 
14bdb     01 06 08 09 | 	byte	$1f, $1e, $1a, $17, $17, $0d, $12, $12, $06, $0d, $12, $09, $01, $06, $08, $09
14bdf     05 04 07 09 
14be3     09 09 06 08 
14be7     0D 09 0C 0A 
14beb     07 0D 0F 09 | 	byte	$05, $04, $07, $09, $09, $09, $06, $08, $0d, $09, $0c, $0a, $07, $0d, $0f, $09
14bef     06 0B 09 08 
14bf3     06 06 08 09 
14bf7     02 02 08 08 
14bfb     05 0B 04 03 | 	byte	$06, $0b, $09, $08, $06, $06, $08, $09, $02, $02, $08, $08, $05, $0b, $04, $03
14bff     09 07 03 05 
14c03     08 04 04 FC 
14c07     FA 00 FC F5 
14c0b     F3 F1 F1 ED | 	byte	$09, $07, $03, $05, $08, $04, $04, $fc, $fa, $00, $fc, $f5, $f3, $f1, $f1, $ed
14c0f     E5 EA EB E4 
14c13     E2 E0 DC DF 
14c17     DE DA D9 D7 
14c1b     D5 D5 D5 D2 | 	byte	$e5, $ea, $eb, $e4, $e2, $e0, $dc, $df, $de, $da, $d9, $d7, $d5, $d5, $d5, $d2
14c1f     D0 CE CC CB 
14c23     C9 C9 C7 C5 
14c27     C3 C2 C4 C3 
14c2b     C3 C4 C0 C4 | 	byte	$d0, $ce, $cc, $cb, $c9, $c9, $c7, $c5, $c3, $c2, $c4, $c3, $c3, $c4, $c0, $c4
14c2f     C2 C3 C4 C1 
14c33     C1 C2 C1 BF 
14c37     BD C0 BF BE 
14c3b     BB BC BC BA | 	byte	$c2, $c3, $c4, $c1, $c1, $c2, $c1, $bf, $bd, $c0, $bf, $be, $bb, $bc, $bc, $ba
14c3f     C1 C0 B8 BD 
14c43     C2 C3 C2 C2 
14c47     BD C4 C9 C6 
14c4b     C4 C1 C6 C6 | 	byte	$c1, $c0, $b8, $bd, $c2, $c3, $c2, $c2, $bd, $c4, $c9, $c6, $c4, $c1, $c6, $c6
14c4f     C7 C4 C2 C6 
14c53     C9 C4 C7 C5 
14c57     C7 CC CA C7 
14c5b     CE D0 CF D8 | 	byte	$c7, $c4, $c2, $c6, $c9, $c4, $c7, $c5, $c7, $cc, $ca, $c7, $ce, $d0, $cf, $d8
14c5f     D8 D9 DB DA 
14c63     DF E4 E2 E6 
14c67     E6 E8 E8 EB 
14c6b     F0 F1 F3 F9 | 	byte	$d8, $d9, $db, $da, $df, $e4, $e2, $e6, $e6, $e8, $e8, $eb, $f0, $f1, $f3, $f9
14c6f     FC FD 02 05 
14c73     07 10 0E 11 
14c77     18 1A 1F 1F 
14c7b     1E 27 28 27 | 	byte	$fc, $fd, $02, $05, $07, $10, $0e, $11, $18, $1a, $1f, $1f, $1e, $27, $28, $27
14c7f     27 24 26 2D 
14c83     2F 2B 27 2C 
14c87     2F 2C 2D 30 
14c8b     2F 31 35 35 | 	byte	$27, $24, $26, $2d, $2f, $2b, $27, $2c, $2f, $2c, $2d, $30, $2f, $31, $35, $35
14c8f     35 39 38 39 
14c93     3B 3A 38 3D 
14c97     3C 38 38 3A 
14c9b     38 3A 33 36 | 	byte	$35, $39, $38, $39, $3b, $3a, $38, $3d, $3c, $38, $38, $3a, $38, $3a, $33, $36
14c9f     3A 36 37 36 
14ca3     32 35 37 37 
14ca7     32 31 34 33 
14cab     35 34 31 32 | 	byte	$3a, $36, $37, $36, $32, $35, $37, $37, $32, $31, $34, $33, $35, $34, $31, $32
14caf     33 2D 2F 2E 
14cb3     2B 2D 29 26 
14cb7     2C 27 23 2B 
14cbb     21 1F 23 1E | 	byte	$33, $2d, $2f, $2e, $2b, $2d, $29, $26, $2c, $27, $23, $2b, $21, $1f, $23, $1e
14cbf     1C 20 1A 19 
14cc3     1B 18 14 19 
14cc7     16 0F 13 0F 
14ccb     0B 0E 0E 07 | 	byte	$1c, $20, $1a, $19, $1b, $18, $14, $19, $16, $0f, $13, $0f, $0b, $0e, $0e, $07
14ccf     0A 10 08 05 
14cd3     0A 06 08 0E 
14cd7     08 07 08 06 
14cdb     06 06 01 02 | 	byte	$0a, $10, $08, $05, $0a, $06, $08, $0e, $08, $07, $08, $06, $06, $06, $01, $02
14cdf     02 FC FB FA 
14ce3     FA FA F5 F2 
14ce7     F0 F3 F1 EA 
14ceb     E8 E7 E8 E6 | 	byte	$02, $fc, $fb, $fa, $fa, $fa, $f5, $f2, $f0, $f3, $f1, $ea, $e8, $e7, $e8, $e6
14cef     E4 E5 E0 E2 
14cf3     E3 E0 DF E0 
14cf7     DE DC D8 D7 
14cfb     DA DA D6 D6 | 	byte	$e4, $e5, $e0, $e2, $e3, $e0, $df, $e0, $de, $dc, $d8, $d7, $da, $da, $d6, $d6
14cff     D6 D4 D8 D7 
14d03     D5 D8 D9 D8 
14d07     D5 D9 D9 D8 
14d0b     DA D9 DB DF | 	byte	$d6, $d4, $d8, $d7, $d5, $d8, $d9, $d8, $d5, $d9, $d9, $d8, $da, $d9, $db, $df
14d0f     DC DE E0 E1 
14d13     E2 E5 E3 E1 
14d17     E5 E7 E2 E5 
14d1b     E7 E9 E9 E6 | 	byte	$dc, $de, $e0, $e1, $e2, $e5, $e3, $e1, $e5, $e7, $e2, $e5, $e7, $e9, $e9, $e6
14d1f     EA EB ED ED 
14d23     EE EF ED ED 
14d27     EF F2 F0 F0 
14d2b     F1 F0 F0 F6 | 	byte	$ea, $eb, $ed, $ed, $ee, $ef, $ed, $ed, $ef, $f2, $f0, $f0, $f1, $f0, $f0, $f6
14d2f     F5 F9 FA FA 
14d33     F9 FB FE FE 
14d37     00 01 00 01 
14d3b     04 06 08 08 | 	byte	$f5, $f9, $fa, $fa, $f9, $fb, $fe, $fe, $00, $01, $00, $01, $04, $06, $08, $08
14d3f     09 0B 0E 0B 
14d43     11 0F 0D 13 
14d47     10 11 14 15 
14d4b     15 16 17 17 | 	byte	$09, $0b, $0e, $0b, $11, $0f, $0d, $13, $10, $11, $14, $15, $15, $16, $17, $17
14d4f     18 1C 1B 1B 
14d53     1F 20 1F 1F 
14d57     20 20 23 20 
14d5b     1E 22 21 1F | 	byte	$18, $1c, $1b, $1b, $1f, $20, $1f, $1f, $20, $20, $23, $20, $1e, $22, $21, $1f
14d5f     1D 1C 1B 1A 
14d63     16 16 12 0E 
14d67     0D 0F 0C 0B 
14d6b     07 04 03 03 | 	byte	$1d, $1c, $1b, $1a, $16, $16, $12, $0e, $0d, $0f, $0c, $0b, $07, $04, $03, $03
14d6f     03 01 FE FD 
14d73     FE FB FB F8 
14d77     F8 FA F7 F7 
14d7b     F6 F5 F3 F2 | 	byte	$03, $01, $fe, $fd, $fe, $fb, $fb, $f8, $f8, $fa, $f7, $f7, $f6, $f5, $f3, $f2
14d7f     F3 F1 F1 F2 
14d83     F0 EF F0 EF 
14d87     F0 F3 F5 F3 
14d8b     F3 F3 F5 F9 | 	byte	$f3, $f1, $f1, $f2, $f0, $ef, $f0, $ef, $f0, $f3, $f5, $f3, $f3, $f3, $f5, $f9
14d8f     F7 F9 FA FA 
14d93     FD FE FD FD 
14d97     FE FD FE 00 
14d9b     FD FE 00 00 | 	byte	$f7, $f9, $fa, $fa, $fd, $fe, $fd, $fd, $fe, $fd, $fe, $00, $fd, $fe, $00, $00
14d9f     FD FE 00 FF 
14da3     00 FF 00 02 
14da7     02 01 01 05 
14dab     05 08 07 09 | 	byte	$fd, $fe, $00, $ff, $00, $ff, $00, $02, $02, $01, $01, $05, $05, $08, $07, $09
14daf     0B 09 09 0C 
14db3     0F 12 11 10 
14db7     11 16 15 16 
14dbb     19 16 19 1B | 	byte	$0b, $09, $09, $0c, $0f, $12, $11, $10, $11, $16, $15, $16, $19, $16, $19, $1b
14dbf     19 1A 1B 1B 
14dc3     1A 19 17 16 
14dc7     1C 1A 17 16 
14dcb     14 12 13 12 | 	byte	$19, $1a, $1b, $1b, $1a, $19, $17, $16, $1c, $1a, $17, $16, $14, $12, $13, $12
14dcf     0F 10 0C 09 
14dd3     0B 08 05 06 
14dd7     06 03 03 05 
14ddb     00 FC FE FB | 	byte	$0f, $10, $0c, $09, $0b, $08, $05, $06, $06, $03, $03, $05, $00, $fc, $fe, $fb
14ddf     FB F7 F3 F2 
14de3     F2 F2 EB EA 
14de7     EB E9 E6 E4 
14deb     E6 E6 E5 E2 | 	byte	$fb, $f7, $f3, $f2, $f2, $f2, $eb, $ea, $eb, $e9, $e6, $e4, $e6, $e6, $e5, $e2
14def     DF E1 E2 E0 
14df3     DF DF E0 E3 
14df7     E2 DF E1 E2 
14dfb     E0 E1 E1 DF | 	byte	$df, $e1, $e2, $e0, $df, $df, $e0, $e3, $e2, $df, $e1, $e2, $e0, $e1, $e1, $df
14dff     E2 E5 E2 E0 
14e03     E3 E5 E5 E5 
14e07     E5 E6 E9 E9 
14e0b     E7 E9 EA EC | 	byte	$e2, $e5, $e2, $e0, $e3, $e5, $e5, $e5, $e5, $e6, $e9, $e9, $e7, $e9, $ea, $ec
14e0f     EB E9 EC EB 
14e13     EA EF EC ED 
14e17     EE F0 F2 F2 
14e1b     F0 EE F2 F3 | 	byte	$eb, $e9, $ec, $eb, $ea, $ef, $ec, $ed, $ee, $f0, $f2, $f2, $f0, $ee, $f2, $f3
14e1f     F5 F4 F3 F5 
14e23     F7 FB FA F8 
14e27     F9 F8 FB FC 
14e2b     F8 F9 FE FC | 	byte	$f5, $f4, $f3, $f5, $f7, $fb, $fa, $f8, $f9, $f8, $fb, $fc, $f8, $f9, $fe, $fc
14e2f     FB FD FB FD 
14e33     02 00 00 03 
14e37     02 03 05 04 
14e3b     05 09 08 05 | 	byte	$fb, $fd, $fb, $fd, $02, $00, $00, $03, $02, $03, $05, $04, $05, $09, $08, $05
14e3f     08 0A 0B 0B 
14e43     0B 0B 0C 10 
14e47     0B 0B 12 0D 
14e4b     0D 12 10 11 | 	byte	$08, $0a, $0b, $0b, $0b, $0b, $0c, $10, $0b, $0b, $12, $0d, $0d, $12, $10, $11
14e4f     14 11 13 14 
14e53     13 13 12 11 
14e57     15 18 13 11 
14e5b     12 14 14 12 | 	byte	$14, $11, $13, $14, $13, $13, $12, $11, $15, $18, $13, $11, $12, $14, $14, $12
14e5f     0F 10 11 11 
14e63     11 10 10 0F 
14e67     10 10 0E 10 
14e6b     11 10 10 0C | 	byte	$0f, $10, $11, $11, $11, $10, $10, $0f, $10, $10, $0e, $10, $11, $10, $10, $0c
14e6f     0E 12 10 0B 
14e73     0C 0C 0B 0C 
14e77     09 08 08 06 
14e7b     07 07 05 06 | 	byte	$0e, $12, $10, $0b, $0c, $0c, $0b, $0c, $09, $08, $08, $06, $07, $07, $05, $06
14e7f     04 01 02 02 
14e83     02 03 00 FF 
14e87     00 00 FE FF 
14e8b     FF FE FD FD | 	byte	$04, $01, $02, $02, $02, $03, $00, $ff, $00, $00, $fe, $ff, $ff, $fe, $fd, $fd
14e8f     FB FA FA F7 
14e93     F7 F6 F5 F4 
14e97     F4 F0 ED EF 
14e9b     EC EB ED ED | 	byte	$fb, $fa, $fa, $f7, $f7, $f6, $f5, $f4, $f4, $f0, $ed, $ef, $ec, $eb, $ed, $ed
14e9f     EA EA E9 E9 
14ea3     E9 EC ED EB 
14ea7     EC EA EC F0 
14eab     EF EE EF F1 | 	byte	$ea, $ea, $e9, $e9, $e9, $ec, $ed, $eb, $ec, $ea, $ec, $f0, $ef, $ee, $ef, $f1
14eaf     F1 F3 F7 F4 
14eb3     F2 F4 F5 F8 
14eb7     F7 F8 F9 F8 
14ebb     FA FD FB FD | 	byte	$f1, $f3, $f7, $f4, $f2, $f4, $f5, $f8, $f7, $f8, $f9, $f8, $fa, $fd, $fb, $fd
14ebf     01 03 03 05 
14ec3     05 08 0C 0B 
14ec7     0D 10 11 11 
14ecb     13 15 15 17 | 	byte	$01, $03, $03, $05, $05, $08, $0c, $0b, $0d, $10, $11, $11, $13, $15, $15, $17
14ecf     18 16 15 17 
14ed3     18 18 16 15 
14ed7     18 18 16 15 
14edb     16 18 18 17 | 	byte	$18, $16, $15, $17, $18, $18, $16, $15, $18, $18, $16, $15, $16, $18, $18, $17
14edf     15 17 17 17 
14ee3     1A 19 1A 1B 
14ee7     19 18 19 1B 
14eeb     1B 19 19 1B | 	byte	$15, $17, $17, $17, $1a, $19, $1a, $1b, $19, $18, $19, $1b, $1b, $19, $19, $1b
14eef     1B 19 19 19 
14ef3     1B 19 18 18 
14ef7     19 18 18 18 
14efb     17 17 17 15 | 	byte	$1b, $19, $19, $19, $1b, $19, $18, $18, $19, $18, $18, $18, $17, $17, $17, $15
14eff     15 15 13 14 
14f03     15 13 12 10 
14f07     11 0F 0D 0B 
14f0b     08 08 05 03 | 	byte	$15, $15, $13, $14, $15, $13, $12, $10, $11, $0f, $0d, $0b, $08, $08, $05, $03
14f0f     02 01 FE FC 
14f13     FA F7 F4 F5 
14f17     F3 F0 EC E9 
14f1b     EC EB E9 E7 | 	byte	$02, $01, $fe, $fc, $fa, $f7, $f4, $f5, $f3, $f0, $ec, $e9, $ec, $eb, $e9, $e7
14f1f     E6 E3 E5 E6 
14f23     E3 E1 E0 DF 
14f27     E0 DE DA DB 
14f2b     DE DB D8 D9 | 	byte	$e6, $e3, $e5, $e6, $e3, $e1, $e0, $df, $e0, $de, $da, $db, $de, $db, $d8, $d9
14f2f     D9 DA DB DA 
14f33     D8 D9 DA DC 
14f37     DD DC DD DF 
14f3b     E2 E1 E2 E4 | 	byte	$d9, $da, $db, $da, $d8, $d9, $da, $dc, $dd, $dc, $dd, $df, $e2, $e1, $e2, $e4
14f3f     E5 E7 E8 E8 
14f43     E9 E9 EB EB 
14f47     EB EB EB ED 
14f4b     EC ED EE ED | 	byte	$e5, $e7, $e8, $e8, $e9, $e9, $eb, $eb, $eb, $eb, $eb, $ed, $ec, $ed, $ee, $ed
14f4f     EF F0 F1 F2 
14f53     F3 F4 F4 F7 
14f57     F6 F6 F8 FC 
14f5b     FD FB FE FE | 	byte	$ef, $f0, $f1, $f2, $f3, $f4, $f4, $f7, $f6, $f6, $f8, $fc, $fd, $fb, $fe, $fe
14f5f     00 02 00 00 
14f63     03 03 04 05 
14f67     02 03 07 06 
14f6b     08 08 07 08 | 	byte	$00, $02, $00, $00, $03, $03, $04, $05, $02, $03, $07, $06, $08, $08, $07, $08
14f6f     0B 0C 0C 0E 
14f73     0F 0E 0F 11 
14f77     0F 11 14 11 
14f7b     10 13 13 12 | 	byte	$0b, $0c, $0c, $0e, $0f, $0e, $0f, $11, $0f, $11, $14, $11, $10, $13, $13, $12
14f7f     13 11 12 12 
14f83     10 11 0F 0F 
14f87     10 0E 0C 0B 
14f8b     0C 0C 0B 0B | 	byte	$13, $11, $12, $12, $10, $11, $0f, $0f, $10, $0e, $0c, $0b, $0c, $0c, $0b, $0b
14f8f     09 07 08 08 
14f93     06 05 03 01 
14f97     02 01 01 02 
14f9b     00 00 01 FF | 	byte	$09, $07, $08, $08, $06, $05, $03, $01, $02, $01, $01, $02, $00, $00, $01, $ff
14f9f     FE FF 00 00 
14fa3     FD FC FC FA 
14fa7     FB FA F8 F9 
14fab     F8 F7 F9 F9 | 	byte	$fe, $ff, $00, $00, $fd, $fc, $fc, $fa, $fb, $fa, $f8, $f9, $f8, $f7, $f9, $f9
14faf     F7 F6 FA FA 
14fb3     FA F9 FA FB 
14fb7     FA FC FD FB 
14fbb     FC FD FC FC | 	byte	$f7, $f6, $fa, $fa, $fa, $f9, $fa, $fb, $fa, $fc, $fd, $fb, $fc, $fd, $fc, $fc
14fbf     FD FD FC FB 
14fc3     FA F9 FB FC 
14fc7     FB F9 FA FB 
14fcb     FB FC FC FB | 	byte	$fd, $fd, $fc, $fb, $fa, $f9, $fb, $fc, $fb, $f9, $fa, $fb, $fb, $fc, $fc, $fb
14fcf     FD FE FD FC 
14fd3     FD FE 00 FF 
14fd7     FD FE FE FE 
14fdb     FC FC FC FC | 	byte	$fd, $fe, $fd, $fc, $fd, $fe, $00, $ff, $fd, $fe, $fe, $fe, $fc, $fc, $fc, $fc
14fdf     FC FB F9 F9 
14fe3     F9 F8 F9 FA 
14fe7     F8 F9 FB F9 
14feb     FA FC FA FB | 	byte	$fc, $fb, $f9, $f9, $f9, $f8, $f9, $fa, $f8, $f9, $fb, $f9, $fa, $fc, $fa, $fb
14fef     FD FA FB FC 
14ff3     FB FC FD FA 
14ff7     FB FC FB FA 
14ffb     FA FA FA FB | 	byte	$fd, $fa, $fb, $fc, $fb, $fc, $fd, $fa, $fb, $fc, $fb, $fa, $fa, $fa, $fa, $fb
14fff     FB F9 F9 FA 
15003     F9 FB FC F9 
15007     F9 FA FB FD 
1500b     FB FB FD FD | 	byte	$fb, $f9, $f9, $fa, $f9, $fb, $fc, $f9, $f9, $fa, $fb, $fd, $fb, $fb, $fd, $fd
1500f     FC FD 00 00 
15013     00 00 00 01 
15017     03 03 03 05 
1501b     04 03 05 06 | 	byte	$fc, $fd, $00, $00, $00, $00, $00, $01, $03, $03, $03, $05, $04, $03, $05, $06
1501f     05 07 07 05 
15023     07 08 07 06 
15027     06 09 09 08 
1502b     07 07 0A 0A | 	byte	$05, $07, $07, $05, $07, $08, $07, $06, $06, $09, $09, $08, $07, $07, $0a, $0a
1502f     0B 0B 0B 0C 
15033     0F 0B 0B 0E 
15037     0E 0F 10 0C 
1503b     0D 0F 0C 0C | 	byte	$0b, $0b, $0b, $0c, $0f, $0b, $0b, $0e, $0e, $0f, $10, $0c, $0d, $0f, $0c, $0c
1503f     0C 0B 0A 0B 
15043     09 09 0B 0A 
15047     0A 09 08 09 
1504b     0B 0A 09 09 | 	byte	$0c, $0b, $0a, $0b, $09, $09, $0b, $0a, $0a, $09, $08, $09, $0b, $0a, $09, $09
1504f     08 07 0B 09 
15053     07 08 08 07 
15057     08 07 04 05 
1505b     05 03 03 02 | 	byte	$08, $07, $0b, $09, $07, $08, $08, $07, $08, $07, $04, $05, $05, $03, $03, $02
1505f     02 02 02 01 
15063     00 00 02 01 
15067     00 01 01 01 
1506b     02 01 00 01 | 	byte	$02, $02, $02, $01, $00, $00, $02, $01, $00, $01, $01, $01, $02, $01, $00, $01
1506f     02 03 02 01 
15073     02 04 04 03 
15077     03 02 02 03 
1507b     04 03 02 02 | 	byte	$02, $03, $02, $01, $02, $04, $04, $03, $03, $02, $02, $03, $04, $03, $02, $02
1507f     01 02 02 01 
15083     01 00 00 00 
15087     00 FE 00 00 
1508b     00 FF FC FC | 	byte	$01, $02, $02, $01, $01, $00, $00, $00, $00, $fe, $00, $00, $00, $ff, $fc, $fc
1508f     FF FF FD FD 
15093     FC FD FD FB 
15097     FB FC FC FB 
1509b     FA F9 FB FC | 	byte	$ff, $ff, $fd, $fd, $fc, $fd, $fd, $fb, $fb, $fc, $fc, $fb, $fa, $f9, $fb, $fc
1509f     FB FA FB FA 
150a3     FA FA FA FA 
150a7     FB FA F9 F9 
150ab     F8 F8 F8 F8 | 	byte	$fb, $fa, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fa, $f9, $f9, $f8, $f8, $f8, $f8
150af     F7 F8 F6 F6 
150b3     F6 F5 F6 F6 
150b7     F5 F5 F7 F5 
150bb     F4 F6 F6 F5 | 	byte	$f7, $f8, $f6, $f6, $f6, $f5, $f6, $f6, $f5, $f5, $f7, $f5, $f4, $f6, $f6, $f5
150bf     F6 F4 F6 F6 
150c3     F5 F5 F5 F5 
150c7     F7 F7 F6 F5 
150cb     F6 F6 F7 F7 | 	byte	$f6, $f4, $f6, $f6, $f5, $f5, $f5, $f5, $f7, $f7, $f6, $f5, $f6, $f6, $f7, $f7
150cf     F6 F6 F7 F7 
150d3     F7 F8 F7 F7 
150d7     F9 FA F9 FA 
150db     FB FC FD FB | 	byte	$f6, $f6, $f7, $f7, $f7, $f8, $f7, $f7, $f9, $fa, $f9, $fa, $fb, $fc, $fd, $fb
150df     FC FE FF 00 
150e3     00 FF 00 00 
150e7     01 02 03 02 
150eb     04 06 06 06 | 	byte	$fc, $fe, $ff, $00, $00, $ff, $00, $00, $01, $02, $03, $02, $04, $06, $06, $06
150ef     07 08 0A 09 
150f3     09 0A 0B 0C 
150f7     0C 0C 0C 0E 
150fb     0F 0E 0C 0D | 	byte	$07, $08, $0a, $09, $09, $0a, $0b, $0c, $0c, $0c, $0c, $0e, $0f, $0e, $0c, $0d
150ff     0F 0F 0F 0E 
15103     0F 0F 0F 0D 
15107     0E 0D 0D 0D 
1510b     0B 0B 0A 09 | 	byte	$0f, $0f, $0f, $0e, $0f, $0f, $0f, $0d, $0e, $0d, $0d, $0d, $0b, $0b, $0a, $09
1510f     09 08 07 07 
15113     06 05 04 04 
15117     03 02 01 01 
1511b     00 00 FF 00 | 	byte	$09, $08, $07, $07, $06, $05, $04, $04, $03, $02, $01, $01, $00, $00, $ff, $00
1511f     FE FD FD FD 
15123     FD FD FB FB 
15127     FB FB FA F9 
1512b     FA FA F9 F9 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fb, $fb, $fb, $fb, $fa, $f9, $fa, $fa, $f9, $f9
1512f     F8 F8 F8 F9 
15133     FA F9 F8 F9 
15137     F8 F7 F8 F9 
1513b     F7 F7 F7 F7 | 	byte	$f8, $f8, $f8, $f9, $fa, $f9, $f8, $f9, $f8, $f7, $f8, $f9, $f7, $f7, $f7, $f7
1513f     F8 F7 F7 F7 
15143     F7 F6 F7 F6 
15147     F7 F8 F7 F7 
1514b     F7 F6 F7 F8 | 	byte	$f8, $f7, $f7, $f7, $f7, $f6, $f7, $f6, $f7, $f8, $f7, $f7, $f7, $f6, $f7, $f8
1514f     F7 F6 F7 F6 
15153     F5 F5 F4 F4 
15157     F4 F3 F3 F1 
1515b     F2 F2 F3 F2 | 	byte	$f7, $f6, $f7, $f6, $f5, $f5, $f4, $f4, $f4, $f3, $f3, $f1, $f2, $f2, $f3, $f2
1515f     F1 F1 F1 F2 
15163     F3 F3 F2 F3 
15167     F4 F3 F4 F4 
1516b     F5 00 00 00 | 	byte	$f1, $f1, $f1, $f2, $f3, $f3, $f2, $f3, $f4, $f3, $f4, $f4, $f5, $00, $00, $00
1516f     00 E4 B1 EA 
15173     80 F5 0A 0B 
15177     02 15 9B 80 
1517b     40 D6 30 57 | 	byte	$00, $e4, $b1, $ea, $80, $f5, $0a, $0b, $02, $15, $9b, $80, $40, $d6, $30, $57
1517f     00 F2 58 E1 
15183     33 0F 9B 7C 
15187     41 90 94 3A 
1518b     AA 9D 0A AA | 	byte	$00, $f2, $58, $e1, $33, $0f, $9b, $7c, $41, $90, $94, $3a, $aa, $9d, $0a, $aa
1518f     E7 82 D2 E5 
15193     B0 C0 DD C6 
15197     F1 E9 08 06 
1519b     E3 F2 78 6C | 	byte	$e7, $82, $d2, $e5, $b0, $c0, $dd, $c6, $f1, $e9, $08, $06, $e3, $f2, $78, $6c
1519f     AE 17 7E 48 
151a3     62 44 F7 19 
151a7     80 2C 64 3A 
151ab     34 67 0D 1D | 	byte	$ae, $17, $7e, $48, $62, $44, $f7, $19, $80, $2c, $64, $3a, $34, $67, $0d, $1d
151af     4A D3 08 2C 
151b3     1B EE 3C FC 
151b7     B1 F3 DF F0 
151bb     DD BD DC CF | 	byte	$4a, $d3, $08, $2c, $1b, $ee, $3c, $fc, $b1, $f3, $df, $f0, $dd, $bd, $dc, $cf
151bf     D5 CC D6 C3 
151c3     A7 EC EB 99 
151c7     A5 E2 E3 B9 
151cb     9A D3 10 E6 | 	byte	$d5, $cc, $d6, $c3, $a7, $ec, $eb, $99, $a5, $e2, $e3, $b9, $9a, $d3, $10, $e6
151cf     94 E3 25 B7 
151d3     BA 31 B5 D9 
151d7     21 DF 08 09 
151db     50 1B EA 5A | 	byte	$94, $e3, $25, $b7, $ba, $31, $b5, $d9, $21, $df, $08, $09, $50, $1b, $ea, $5a
151df     28 14 53 51 
151e3     21 49 1A 27 
151e7     65 55 3F 63 
151eb     26 1C 38 43 | 	byte	$28, $14, $53, $51, $21, $49, $1a, $27, $65, $55, $3f, $63, $26, $1c, $38, $43
151ef     3F 38 2C 1A 
151f3     27 20 22 36 
151f7     47 22 23 F9 
151fb     0E 09 0B 48 | 	byte	$3f, $38, $2c, $1a, $27, $20, $22, $36, $47, $22, $23, $f9, $0e, $09, $0b, $48
151ff     CD FD 25 EA 
15203     0B F8 06 21 
15207     DA 28 F5 B4 
1520b     E3 0A F5 E0 | 	byte	$cd, $fd, $25, $ea, $0b, $f8, $06, $21, $da, $28, $f5, $b4, $e3, $0a, $f5, $e0
1520f     F4 F6 F0 AC 
15213     D8 EA E4 CF 
15217     D5 DF B9 D3 
1521b     C9 C5 C0 C4 | 	byte	$f4, $f6, $f0, $ac, $d8, $ea, $e4, $cf, $d5, $df, $b9, $d3, $c9, $c5, $c0, $c4
1521f     BC 99 B8 A7 
15223     A3 B4 B5 BF 
15227     B4 99 C5 B3 
1522b     C4 CE CB DF | 	byte	$bc, $99, $b8, $a7, $a3, $b4, $b5, $bf, $b4, $99, $c5, $b3, $c4, $ce, $cb, $df
1522f     D2 DA 01 E2 
15233     DC E0 07 01 
15237     E3 F0 27 15 
1523b     FA 08 13 31 | 	byte	$d2, $da, $01, $e2, $dc, $e0, $07, $01, $e3, $f0, $27, $15, $fa, $08, $13, $31
1523f     F9 31 4A 17 
15243     2D 2D 54 38 
15247     4A 64 3B 4E 
1524b     63 62 51 77 | 	byte	$f9, $31, $4a, $17, $2d, $2d, $54, $38, $4a, $64, $3b, $4e, $63, $62, $51, $77
1524f     49 57 79 60 
15253     5B 6E 5E 71 
15257     76 42 68 7D 
1525b     62 38 53 3B | 	byte	$49, $57, $79, $60, $5b, $6e, $5e, $71, $76, $42, $68, $7d, $62, $38, $53, $3b
1525f     4C 4A ED FA 
15263     63 2F FF 15 
15267     DF 05 08 DC 
1526b     EA E4 F3 01 | 	byte	$4c, $4a, $ed, $fa, $63, $2f, $ff, $15, $df, $05, $08, $dc, $ea, $e4, $f3, $01
1526f     C1 A1 EE C2 
15273     D6 CE CE E3 
15277     D9 BD F2 C1 
1527b     D4 D0 DD B5 | 	byte	$c1, $a1, $ee, $c2, $d6, $ce, $ce, $e3, $d9, $bd, $f2, $c1, $d4, $d0, $dd, $b5
1527f     BF BF D7 AA 
15283     C6 C3 B8 B2 
15287     BC B5 B2 A9 
1528b     A2 C3 BF AC | 	byte	$bf, $bf, $d7, $aa, $c6, $c3, $b8, $b2, $bc, $b5, $b2, $a9, $a2, $c3, $bf, $ac
1528f     A0 C2 BF D4 
15293     CD 89 C6 D9 
15297     A8 C2 E8 DF 
1529b     AD CF EF E6 | 	byte	$a0, $c2, $bf, $d4, $cd, $89, $c6, $d9, $a8, $c2, $e8, $df, $ad, $cf, $ef, $e6
1529f     CB FE D7 ED 
152a3     02 E1 12 FF 
152a7     FE 29 02 2A 
152ab     26 2B 42 34 | 	byte	$cb, $fe, $d7, $ed, $02, $e1, $12, $ff, $fe, $29, $02, $2a, $26, $2b, $42, $34
152af     44 46 56 43 
152b3     6B 71 55 6F 
152b7     5F 6A 6E 3F 
152bb     5E 5E 59 66 | 	byte	$44, $46, $56, $43, $6b, $71, $55, $6f, $5f, $6a, $6e, $3f, $5e, $5e, $59, $66
152bf     6E 64 59 38 
152c3     21 39 51 63 
152c7     49 56 55 1E 
152cb     3D 3D 28 F6 | 	byte	$6e, $64, $59, $38, $21, $39, $51, $63, $49, $56, $55, $1e, $3d, $3d, $28, $f6
152cf     13 12 22 31 
152d3     05 FC 2B ED 
152d7     1A DF 22 07 
152db     F3 DC F3 ED | 	byte	$13, $12, $22, $31, $05, $fc, $2b, $ed, $1a, $df, $22, $07, $f3, $dc, $f3, $ed
152df     FC 0A FC C1 
152e3     F9 09 CA C8 
152e7     B9 B9 DD E9 
152eb     BF 96 D9 E0 | 	byte	$fc, $0a, $fc, $c1, $f9, $09, $ca, $c8, $b9, $b9, $dd, $e9, $bf, $96, $d9, $e0
152ef     C2 C2 AA CC 
152f3     A8 A6 C8 B8 
152f7     8A AE AD 98 
152fb     AC 89 D1 A5 | 	byte	$c2, $c2, $aa, $cc, $a8, $a6, $c8, $b8, $8a, $ae, $ad, $98, $ac, $89, $d1, $a5
152ff     AA B7 D0 D5 
15303     AA A7 B3 0B 
15307     D2 D0 D8 02 
1530b     DB F3 DF 03 | 	byte	$aa, $b7, $d0, $d5, $aa, $a7, $b3, $0b, $d2, $d0, $d8, $02, $db, $f3, $df, $03
1530f     D2 0F 14 EC 
15313     1B 1A EB 22 
15317     3D 1B 04 40 
1531b     32 59 40 38 | 	byte	$d2, $0f, $14, $ec, $1b, $1a, $eb, $22, $3d, $1b, $04, $40, $32, $59, $40, $38
1531f     3C 31 4E 41 
15323     61 65 5F 4F 
15327     45 50 5F 6C 
1532b     6D 80 4F 40 | 	byte	$3c, $31, $4e, $41, $61, $65, $5f, $4f, $45, $50, $5f, $6c, $6d, $80, $4f, $40
1532f     6C 57 51 62 
15333     50 3D 45 32 
15337     47 1D 4C 2E 
1533b     F3 1F 1F 3E | 	byte	$6c, $57, $51, $62, $50, $3d, $45, $32, $47, $1d, $4c, $2e, $f3, $1f, $1f, $3e
1533f     1B EA 17 FD 
15343     EA EF 11 E4 
15347     CE FC C9 DF 
1534b     B8 BA BD D2 | 	byte	$1b, $ea, $17, $fd, $ea, $ef, $11, $e4, $ce, $fc, $c9, $df, $b8, $ba, $bd, $d2
1534f     D7 B3 C3 8B 
15353     BD C6 98 D2 
15357     97 8F E5 8F 
1535b     9A B9 A1 95 | 	byte	$d7, $b3, $c3, $8b, $bd, $c6, $98, $d2, $97, $8f, $e5, $8f, $9a, $b9, $a1, $95
1535f     E7 AF 91 B3 
15363     CC CB A0 CE 
15367     DA C2 B7 D2 
1536b     F5 D5 E8 E8 | 	byte	$e7, $af, $91, $b3, $cc, $cb, $a0, $ce, $da, $c2, $b7, $d2, $f5, $d5, $e8, $e8
1536f     E0 F3 10 CD 
15373     FD 16 D2 1C 
15377     22 03 1B 08 
1537b     43 17 1C 2C | 	byte	$e0, $f3, $10, $cd, $fd, $16, $d2, $1c, $22, $03, $1b, $08, $43, $17, $1c, $2c
1537f     34 2A 37 26 
15383     4D 30 2E 2D 
15387     3D 53 30 6E 
1538b     2C 4A 5B 3A | 	byte	$34, $2a, $37, $26, $4d, $30, $2e, $2d, $3d, $53, $30, $6e, $2c, $4a, $5b, $3a
1538f     74 4E 45 65 
15393     3C 48 45 5A 
15397     80 2D 2B 37 
1539b     45 55 4B 53 | 	byte	$74, $4e, $45, $65, $3c, $48, $45, $5a, $80, $2d, $2b, $37, $45, $55, $4b, $53
1539f     1D 33 3F 45 
153a3     2F 03 2B 35 
153a7     05 2A 15 F3 
153ab     F5 E8 06 C5 | 	byte	$1d, $33, $3f, $45, $2f, $03, $2b, $35, $05, $2a, $15, $f3, $f5, $e8, $06, $c5
153af     DB 03 A5 D0 
153b3     FE 9E A9 BE 
153b7     AF E0 C6 81 
153bb     BF E5 AF B2 | 	byte	$db, $03, $a5, $d0, $fe, $9e, $a9, $be, $af, $e0, $c6, $81, $bf, $e5, $af, $b2
153bf     BE B4 C8 AA 
153c3     90 C6 B6 DA 
153c7     BE 99 16 AD 
153cb     AA 0E AC BB | 	byte	$be, $b4, $c8, $aa, $90, $c6, $b6, $da, $be, $99, $16, $ad, $aa, $0e, $ac, $bb
153cf     D9 CE 0C 9C 
153d3     03 FD AA 1C 
153d7     02 DC F5 D1 
153db     10 FF 09 F6 | 	byte	$d9, $ce, $0c, $9c, $03, $fd, $aa, $1c, $02, $dc, $f5, $d1, $10, $ff, $09, $f6
153df     0A 18 EB 49 
153e3     1D 2C 13 E3 
153e7     23 5A DC 14 
153eb     4B F7 43 12 | 	byte	$0a, $18, $eb, $49, $1d, $2c, $13, $e3, $23, $5a, $dc, $14, $4b, $f7, $43, $12
153ef     10 47 27 25 
153f3     2A 26 3F 1E 
153f7     44 29 19 53 
153fb     35 22 4B 26 | 	byte	$10, $47, $27, $25, $2a, $26, $3f, $1e, $44, $29, $19, $53, $35, $22, $4b, $26
153ff     15 67 1B 41 
15403     3A 21 5B 40 
15407     2B 34 2A 2B 
1540b     50 15 13 36 | 	byte	$15, $67, $1b, $41, $3a, $21, $5b, $40, $2b, $34, $2a, $2b, $50, $15, $13, $36
1540f     43 18 2D 16 
15413     EA 47 02 FF 
15417     14 0B 0F E5 
1541b     0A 16 C2 E7 | 	byte	$43, $18, $2d, $16, $ea, $47, $02, $ff, $14, $0b, $0f, $e5, $0a, $16, $c2, $e7
1541f     1C C7 F4 E7 
15423     F0 DD E5 E7 
15427     DF 8D E6 F3 
1542b     AB EF DE DA | 	byte	$1c, $c7, $f4, $e7, $f0, $dd, $e5, $e7, $df, $8d, $e6, $f3, $ab, $ef, $de, $da
1542f     D2 B0 ED D2 
15433     AA E7 EC A6 
15437     D8 C3 B1 F9 
1543b     9E C4 C2 A3 | 	byte	$d2, $b0, $ed, $d2, $aa, $e7, $ec, $a6, $d8, $c3, $b1, $f9, $9e, $c4, $c2, $a3
1543f     CE C6 C6 B5 
15443     91 FC C8 C1 
15447     FA BD AB F1 
1544b     D5 D6 EE CA | 	byte	$ce, $c6, $c6, $b5, $91, $fc, $c8, $c1, $fa, $bd, $ab, $f1, $d5, $d6, $ee, $ca
1544f     F6 EC BD 31 
15453     FB C1 FD F4 
15457     1A 2F F8 19 
1545b     1D 27 07 24 | 	byte	$f6, $ec, $bd, $31, $fb, $c1, $fd, $f4, $1a, $2f, $f8, $19, $1d, $27, $07, $24
1545f     3B 31 0E 49 
15463     51 26 66 0B 
15467     45 5A 3B 4C 
1546b     4C 43 68 1E | 	byte	$3b, $31, $0e, $49, $51, $26, $66, $0b, $45, $5a, $3b, $4c, $4c, $43, $68, $1e
1546f     74 35 25 70 
15473     49 2D 38 33 
15477     5D 25 33 31 
1547b     32 2A 44 45 | 	byte	$74, $35, $25, $70, $49, $2d, $38, $33, $5d, $25, $33, $31, $32, $2a, $44, $45
1547f     2B 3D 21 0F 
15483     19 2F 24 30 
15487     0A E6 47 01 
1548b     E5 06 31 FD | 	byte	$2b, $3d, $21, $0f, $19, $2f, $24, $30, $0a, $e6, $47, $01, $e5, $06, $31, $fd
1548f     D3 15 DF 12 
15493     D0 09 F8 CD 
15497     FC EF CB E6 
1549b     D3 E9 B8 E2 | 	byte	$d3, $15, $df, $12, $d0, $09, $f8, $cd, $fc, $ef, $cb, $e6, $d3, $e9, $b8, $e2
1549f     E5 C5 E7 BD 
154a3     D7 F2 BA 90 
154a7     D9 E2 B6 BD 
154ab     BD C3 DF A9 | 	byte	$e5, $c5, $e7, $bd, $d7, $f2, $ba, $90, $d9, $e2, $b6, $bd, $bd, $c3, $df, $a9
154af     C1 B6 C1 F6 
154b3     9F 8E C6 CF 
154b7     CB D5 CA B5 
154bb     E1 B8 E2 DB | 	byte	$c1, $b6, $c1, $f6, $9f, $8e, $c6, $cf, $cb, $d5, $ca, $b5, $e1, $b8, $e2, $db
154bf     D6 DD EC E5 
154c3     FC F0 00 15 
154c7     EC 23 18 F3 
154cb     0E 30 0A 42 | 	byte	$d6, $dd, $ec, $e5, $fc, $f0, $00, $15, $ec, $23, $18, $f3, $0e, $30, $0a, $42
154cf     47 1B 19 31 
154d3     30 4D 2E 3D 
154d7     40 1C 50 45 
154db     2F 55 2A 32 | 	byte	$47, $1b, $19, $31, $30, $4d, $2e, $3d, $40, $1c, $50, $45, $2f, $55, $2a, $32
154df     4B 24 42 31 
154e3     30 27 40 3F 
154e7     3F 62 38 1C 
154eb     45 2F 43 04 | 	byte	$4b, $24, $42, $31, $30, $27, $40, $3f, $3f, $62, $38, $1c, $45, $2f, $43, $04
154ef     40 44 06 3E 
154f3     15 45 36 02 
154f7     29 1D 1E 1D 
154fb     EF 00 14 08 | 	byte	$40, $44, $06, $3e, $15, $45, $36, $02, $29, $1d, $1e, $1d, $ef, $00, $14, $08
154ff     EF 12 F4 EC 
15503     F7 EC E3 E6 
15507     E8 EA FA D1 
1550b     CD B3 0B F9 | 	byte	$ef, $12, $f4, $ec, $f7, $ec, $e3, $e6, $e8, $ea, $fa, $d1, $cd, $b3, $0b, $f9
1550f     AA A8 CC D6 
15513     D1 D2 A2 B2 
15517     BE E1 C8 9C 
1551b     B8 BC CC A5 | 	byte	$aa, $a8, $cc, $d6, $d1, $d2, $a2, $b2, $be, $e1, $c8, $9c, $b8, $bc, $cc, $a5
1551f     8E D7 DE C7 
15523     CB BD EA DF 
15527     CF F8 C2 BE 
1552b     F2 EB FE C9 | 	byte	$8e, $d7, $de, $c7, $cb, $bd, $ea, $df, $cf, $f8, $c2, $be, $f2, $eb, $fe, $c9
1552f     DC 0E D2 13 
15533     F5 CE 28 1F 
15537     E8 1D 04 F0 
1553b     1A 1D 24 FE | 	byte	$dc, $0e, $d2, $13, $f5, $ce, $28, $1f, $e8, $1d, $04, $f0, $1a, $1d, $24, $fe
1553f     04 12 2C 0D 
15543     16 12 32 32 
15547     12 23 25 17 
1554b     3C 29 2A 47 | 	byte	$04, $12, $2c, $0d, $16, $12, $32, $32, $12, $23, $25, $17, $3c, $29, $2a, $47
1554f     48 07 46 41 
15553     32 22 3B 0D 
15557     2A 50 44 14 
1555b     0E 60 57 2A | 	byte	$48, $07, $46, $41, $32, $22, $3b, $0d, $2a, $50, $44, $14, $0e, $60, $57, $2a
1555f     17 2F 17 38 
15563     2C 23 22 44 
15567     1E F0 0D 4A 
1556b     15 20 EE 2A | 	byte	$17, $2f, $17, $38, $2c, $23, $22, $44, $1e, $f0, $0d, $4a, $15, $20, $ee, $2a
1556f     02 18 41 E1 
15573     E5 2E F6 DC 
15577     04 F6 EF DE 
1557b     E8 E2 FA C5 | 	byte	$02, $18, $41, $e1, $e5, $2e, $f6, $dc, $04, $f6, $ef, $de, $e8, $e2, $fa, $c5
1557f     DF F5 C8 C6 
15583     FE AD D4 E9 
15587     99 0C EE BE 
1558b     F0 A6 F5 BC | 	byte	$df, $f5, $c8, $c6, $fe, $ad, $d4, $e9, $99, $0c, $ee, $be, $f0, $a6, $f5, $bc
1558f     DC B9 D4 FA 
15593     C9 DA D2 A8 
15597     D0 F0 E6 D6 
1559b     E0 DD CA C6 | 	byte	$dc, $b9, $d4, $fa, $c9, $da, $d2, $a8, $d0, $f0, $e6, $d6, $e0, $dd, $ca, $c6
1559f     F9 C5 D3 E8 
155a3     00 D9 DB CF 
155a7     EC 03 F1 F5 
155ab     E0 27 01 07 | 	byte	$f9, $c5, $d3, $e8, $00, $d9, $db, $cf, $ec, $03, $f1, $f5, $e0, $27, $01, $07
155af     38 08 D5 39 
155b3     14 12 2A 17 
155b7     11 2E 15 0B 
155bb     0C 21 40 18 | 	byte	$38, $08, $d5, $39, $14, $12, $2a, $17, $11, $2e, $15, $0b, $0c, $21, $40, $18
155bf     11 20 16 2A 
155c3     59 1C 01 47 
155c7     3B 46 38 0F 
155cb     5F 0F 32 3C | 	byte	$11, $20, $16, $2a, $59, $1c, $01, $47, $3b, $46, $38, $0f, $5f, $0f, $32, $3c
155cf     16 32 2E 31 
155d3     1F 48 18 1D 
155d7     31 06 44 1F 
155db     0D 3E E7 05 | 	byte	$16, $32, $2e, $31, $1f, $48, $18, $1d, $31, $06, $44, $1f, $0d, $3e, $e7, $05
155df     3D 08 1E F9 
155e3     1A FC 04 EE 
155e7     18 F4 FA 05 
155eb     0A EB 02 E7 | 	byte	$3d, $08, $1e, $f9, $1a, $fc, $04, $ee, $18, $f4, $fa, $05, $0a, $eb, $02, $e7
155ef     1D D0 E9 F4 
155f3     E5 DB FA CA 
155f7     E0 E3 BC 05 
155fb     D4 C8 BF 05 | 	byte	$1d, $d0, $e9, $f4, $e5, $db, $fa, $ca, $e0, $e3, $bc, $05, $d4, $c8, $bf, $05
155ff     D8 C6 E9 BF 
15603     E6 C9 D9 EA 
15607     BB C8 EF D1 
1560b     F9 DA D3 E9 | 	byte	$d8, $c6, $e9, $bf, $e6, $c9, $d9, $ea, $bb, $c8, $ef, $d1, $f9, $da, $d3, $e9
1560f     BB D9 FB CE 
15613     DF ED E9 DC 
15617     FE F7 FE EF 
1561b     E4 0B D5 F0 | 	byte	$bb, $d9, $fb, $ce, $df, $ed, $e9, $dc, $fe, $f7, $fe, $ef, $e4, $0b, $d5, $f0
1561f     FB 1A 1D E3 
15623     0F 1F F6 1D 
15627     FA 04 0A 19 
1562b     27 03 0B 35 | 	byte	$fb, $1a, $1d, $e3, $0f, $1f, $f6, $1d, $fa, $04, $0a, $19, $27, $03, $0b, $35
1562f     1F 05 20 29 
15633     23 08 2A 34 
15637     21 0B 3B 4D 
1563b     4F 00 49 30 | 	byte	$1f, $05, $20, $29, $23, $08, $2a, $34, $21, $0b, $3b, $4d, $4f, $00, $49, $30
1563f     2F 36 03 04 
15643     2F 20 33 02 
15647     0C 49 1A 2C 
1564b     F2 05 08 03 | 	byte	$2f, $36, $03, $04, $2f, $20, $33, $02, $0c, $49, $1a, $2c, $f2, $05, $08, $03
1564f     28 14 FE EB 
15653     00 1D EF 13 
15657     1B DD FA 00 
1565b     D7 FC 09 09 | 	byte	$28, $14, $fe, $eb, $00, $1d, $ef, $13, $1b, $dd, $fa, $00, $d7, $fc, $09, $09
1565f     DE E3 05 F9 
15663     F1 CB DE 09 
15667     FC DA FA D1 
1566b     E7 0C C0 1C | 	byte	$de, $e3, $05, $f9, $f1, $cb, $de, $09, $fc, $da, $fa, $d1, $e7, $0c, $c0, $1c
1566f     EA 9E FF E5 
15673     ED FD D3 EF 
15677     EE FA 04 F0 
1567b     E5 E8 EE FA | 	byte	$ea, $9e, $ff, $e5, $ed, $fd, $d3, $ef, $ee, $fa, $04, $f0, $e5, $e8, $ee, $fa
1567f     E6 EB D3 EC 
15683     1C F5 DC F8 
15687     E9 E5 14 EB 
1568b     F1 E8 ED 13 | 	byte	$e6, $eb, $d3, $ec, $1c, $f5, $dc, $f8, $e9, $e5, $14, $eb, $f1, $e8, $ed, $13
1568f     19 03 C4 04 
15693     06 F2 0F 07 
15697     E2 0F 1C 02 
1569b     EB FE 09 1D | 	byte	$19, $03, $c4, $04, $06, $f2, $0f, $07, $e2, $0f, $1c, $02, $eb, $fe, $09, $1d
1569f     08 1A 2C 0C 
156a3     00 1C 26 07 
156a7     06 11 16 12 
156ab     3C DE FE 1E | 	byte	$08, $1a, $2c, $0c, $00, $1c, $26, $07, $06, $11, $16, $12, $3c, $de, $fe, $1e
156af     08 15 1D 12 
156b3     FB 3C E9 0D 
156b7     12 1A 0D 02 
156bb     15 23 1D E9 | 	byte	$08, $15, $1d, $12, $fb, $3c, $e9, $0d, $12, $1a, $0d, $02, $15, $23, $1d, $e9
156bf     01 FC 1A 1F 
156c3     14 F9 F1 02 
156c7     26 21 E3 02 
156cb     13 E3 12 FD | 	byte	$01, $fc, $1a, $1f, $14, $f9, $f1, $02, $26, $21, $e3, $02, $13, $e3, $12, $fd
156cf     11 E6 02 F1 
156d3     12 F5 0B 0A 
156d7     E7 EB 11 F1 
156db     E4 0A 0F 15 | 	byte	$11, $e6, $02, $f1, $12, $f5, $0b, $0a, $e7, $eb, $11, $f1, $e4, $0a, $0f, $15
156df     0A F0 06 FB 
156e3     FB EE 09 F1 
156e7     E9 F6 12 F5 
156eb     05 FB F1 E7 | 	byte	$0a, $f0, $06, $fb, $fb, $ee, $09, $f1, $e9, $f6, $12, $f5, $05, $fb, $f1, $e7
156ef     41 E8 E5 08 
156f3     D7 0E 00 0B 
156f7     E1 E6 08 00 
156fb     EE EF DA FC | 	byte	$41, $e8, $e5, $08, $d7, $0e, $00, $0b, $e1, $e6, $08, $00, $ee, $ef, $da, $fc
156ff     EE EB 15 F2 
15703     04 F8 DC 24 
15707     03 F3 F7 E7 
1570b     F4 04 F8 01 | 	byte	$ee, $eb, $15, $f2, $04, $f8, $dc, $24, $03, $f3, $f7, $e7, $f4, $04, $f8, $01
1570f     ED FB 10 F5 
15713     ED 04 0A ED 
15717     DF 05 01 13 
1571b     E1 FF 09 ED | 	byte	$ed, $fb, $10, $f5, $ed, $04, $0a, $ed, $df, $05, $01, $13, $e1, $ff, $09, $ed
1571f     1A 15 FE F6 
15723     E1 10 24 1B 
15727     E7 0F 0F 1B 
1572b     25 EE EF 27 | 	byte	$1a, $15, $fe, $f6, $e1, $10, $24, $1b, $e7, $0f, $0f, $1b, $25, $ee, $ef, $27
1572f     14 FD 12 F6 
15733     19 1C 10 10 
15737     EB FE 34 0C 
1573b     FB 0E 06 38 | 	byte	$14, $fd, $12, $f6, $19, $1c, $10, $10, $eb, $fe, $34, $0c, $fb, $0e, $06, $38
1573f     FD FD 22 D8 
15743     0C 1C 07 0A 
15747     19 E6 1A 0B 
1574b     09 1C E6 01 | 	byte	$fd, $fd, $22, $d8, $0c, $1c, $07, $0a, $19, $e6, $1a, $0b, $09, $1c, $e6, $01
1574f     1C F0 04 18 
15753     1C EE E4 07 
15757     05 FC 04 06 
1575b     E0 E7 11 01 | 	byte	$1c, $f0, $04, $18, $1c, $ee, $e4, $07, $05, $fc, $04, $06, $e0, $e7, $11, $01
1575f     F7 0D DB 0A 
15763     F9 EC FB 15 
15767     08 DE 02 10 
1576b     CD 03 1E EB | 	byte	$f7, $0d, $db, $0a, $f9, $ec, $fb, $15, $08, $de, $02, $10, $cd, $03, $1e, $eb
1576f     EA E4 E4 06 
15773     FC FD EC D4 
15777     0F 09 F2 03 
1577b     02 D5 13 F1 | 	byte	$ea, $e4, $e4, $06, $fc, $fd, $ec, $d4, $0f, $09, $f2, $03, $02, $d5, $13, $f1
1577f     E3 02 15 E5 
15783     0F 08 EF F8 
15787     DD F7 02 09 
1578b     02 FD 02 00 | 	byte	$e3, $02, $15, $e5, $0f, $08, $ef, $f8, $dd, $f7, $02, $09, $02, $fd, $02, $00
1578f     EE 0D FF 1E 
15793     F3 EC 03 0B 
15797     F0 0A 0A F5 
1579b     FB 0F 05 ED | 	byte	$ee, $0d, $ff, $1e, $f3, $ec, $03, $0b, $f0, $0a, $0a, $f5, $fb, $0f, $05, $ed
1579f     0D 1B 11 FB 
157a3     0A 02 19 2E 
157a7     1F F2 24 FE 
157ab     F8 0B 25 12 | 	byte	$0d, $1b, $11, $fb, $0a, $02, $19, $2e, $1f, $f2, $24, $fe, $f8, $0b, $25, $12
157af     0D 00 1A EB 
157b3     E9 2B 20 0B 
157b7     E8 FA 21 22 
157bb     F7 EA 19 11 | 	byte	$0d, $00, $1a, $eb, $e9, $2b, $20, $0b, $e8, $fa, $21, $22, $f7, $ea, $19, $11
157bf     03 F7 FE 12 
157c3     0E FD 15 04 
157c7     06 FD 01 17 
157cb     F0 19 0D F7 | 	byte	$03, $f7, $fe, $12, $0e, $fd, $15, $04, $06, $fd, $01, $17, $f0, $19, $0d, $f7
157cf     01 F7 09 0C 
157d3     F1 19 0D E2 
157d7     F7 03 E5 04 
157db     F2 FF FE E8 | 	byte	$01, $f7, $09, $0c, $f1, $19, $0d, $e2, $f7, $03, $e5, $04, $f2, $ff, $fe, $e8
157df     01 02 E2 0E 
157e3     FF FD DC F1 
157e7     16 D4 F2 EF 
157eb     FA 01 01 0B | 	byte	$01, $02, $e2, $0e, $ff, $fd, $dc, $f1, $16, $d4, $f2, $ef, $fa, $01, $01, $0b
157ef     FB D4 F0 1C 
157f3     20 E3 D7 10 
157f7     F5 01 0A D5 
157fb     01 08 E9 F7 | 	byte	$fb, $d4, $f0, $1c, $20, $e3, $d7, $10, $f5, $01, $0a, $d5, $01, $08, $e9, $f7
157ff     EE 09 EF 16 
15803     FD F5 0E 06 
15807     14 E2 0E 14 
1580b     1A 0C F8 F6 | 	byte	$ee, $09, $ef, $16, $fd, $f5, $0e, $06, $14, $e2, $0e, $14, $1a, $0c, $f8, $f6
1580f     10 20 03 F0 
15813     EF 17 F7 33 
15817     0F D4 0E 0C 
1581b     00 05 FD 0C | 	byte	$10, $20, $03, $f0, $ef, $17, $f7, $33, $0f, $d4, $0e, $0c, $00, $05, $fd, $0c
1581f     00 16 03 F6 
15823     0F EA 0E 12 
15827     0F 01 F6 F8 
1582b     0E 09 04 E1 | 	byte	$00, $16, $03, $f6, $0f, $ea, $0e, $12, $0f, $01, $f6, $f8, $0e, $09, $04, $e1
1582f     FB 0D 02 03 
15833     06 18 02 09 
15837     04 EE 18 0B 
1583b     EB 1D 05 E6 | 	byte	$fb, $0d, $02, $03, $06, $18, $02, $09, $04, $ee, $18, $0b, $eb, $1d, $05, $e6
1583f     F8 0E 07 25 
15843     08 D9 11 0C 
15847     EE 26 11 F0 
1584b     FE 01 1D FC | 	byte	$f8, $0e, $07, $25, $08, $d9, $11, $0c, $ee, $26, $11, $f0, $fe, $01, $1d, $fc
1584f     14 06 0C 10 
15853     F1 09 EA EC 
15857     22 03 F2 05 
1585b     EE 16 15 00 | 	byte	$14, $06, $0c, $10, $f1, $09, $ea, $ec, $22, $03, $f2, $05, $ee, $16, $15, $00
1585f     FB 0E D8 FD 
15863     05 0D FD FB 
15867     E9 EA 09 E8 
1586b     F8 F9 EF DF | 	byte	$fb, $0e, $d8, $fd, $05, $0d, $fd, $fb, $e9, $ea, $09, $e8, $f8, $f9, $ef, $df
1586f     16 FA 01 E5 
15873     FD F3 03 FE 
15877     ED E8 F2 EA 
1587b     07 07 F9 F4 | 	byte	$16, $fa, $01, $e5, $fd, $f3, $03, $fe, $ed, $e8, $f2, $ea, $07, $07, $f9, $f4
1587f     EF EE FB 0B 
15883     EC EC F7 FA 
15887     0A F0 10 F5 
1588b     ED 10 0A 04 | 	byte	$ef, $ee, $fb, $0b, $ec, $ec, $f7, $fa, $0a, $f0, $10, $f5, $ed, $10, $0a, $04
1588f     F3 15 F6 F4 
15893     0D FC 0C 1F 
15897     0F FD 01 F7 
1589b     23 FC 04 2F | 	byte	$f3, $15, $f6, $f4, $0d, $fc, $0c, $1f, $0f, $fd, $01, $f7, $23, $fc, $04, $2f
1589f     09 F9 12 0B 
158a3     0F 2E F8 12 
158a7     10 00 26 10 
158ab     E6 1E FD 12 | 	byte	$09, $f9, $12, $0b, $0f, $2e, $f8, $12, $10, $00, $26, $10, $e6, $1e, $fd, $12
158af     15 FB 01 20 
158b3     0E EF 1A F4 
158b7     FC 13 10 F8 
158bb     11 15 10 FA | 	byte	$15, $fb, $01, $20, $0e, $ef, $1a, $f4, $fc, $13, $10, $f8, $11, $15, $10, $fa
158bf     FA FF 08 08 
158c3     09 F0 EA 02 
158c7     15 E1 F3 0D 
158cb     E8 03 06 EF | 	byte	$fa, $ff, $08, $08, $09, $f0, $ea, $02, $15, $e1, $f3, $0d, $e8, $03, $06, $ef
158cf     E0 F8 01 06 
158d3     EB FD 0D FB 
158d7     EE 01 EE ED 
158db     05 05 01 E8 | 	byte	$e0, $f8, $01, $06, $eb, $fd, $0d, $fb, $ee, $01, $ee, $ed, $05, $05, $01, $e8
158df     DE 18 FD F4 
158e3     F4 E4 FA F1 
158e7     FA FA FE 04 
158eb     E6 E9 03 D3 | 	byte	$de, $18, $fd, $f4, $f4, $e4, $fa, $f1, $fa, $fa, $fe, $04, $e6, $e9, $03, $d3
158ef     0D FA FD EB 
158f3     FA 04 02 FD 
158f7     EE EF 2D EE 
158fb     0C 03 F3 FB | 	byte	$0d, $fa, $fd, $eb, $fa, $04, $02, $fd, $ee, $ef, $2d, $ee, $0c, $03, $f3, $fb
158ff     FB 02 04 09 
15903     18 F7 17 1D 
15907     FC FD 12 21 
1590b     15 01 0D 07 | 	byte	$fb, $02, $04, $09, $18, $f7, $17, $1d, $fc, $fd, $12, $21, $15, $01, $0d, $07
1590f     13 FA F4 1F 
15913     1B 1B F6 F4 
15917     18 0B 16 FC 
1591b     E3 10 1D 1E | 	byte	$13, $fa, $f4, $1f, $1b, $1b, $f6, $f4, $18, $0b, $16, $fc, $e3, $10, $1d, $1e
1591f     01 E6 10 11 
15923     E7 EF 22 0A 
15927     F8 09 F9 E7 
1592b     15 FD 01 F2 | 	byte	$01, $e6, $10, $11, $e7, $ef, $22, $0a, $f8, $09, $f9, $e7, $15, $fd, $01, $f2
1592f     F0 13 F6 F0 
15933     FD 11 F1 F8 
15937     0C F8 06 0A 
1593b     FD F4 0C 05 | 	byte	$f0, $13, $f6, $f0, $fd, $11, $f1, $f8, $0c, $f8, $06, $0a, $fd, $f4, $0c, $05
1593f     EC FC FC FF 
15943     0C F2 02 11 
15947     EC DD 20 0A 
1594b     0F E6 FD FF | 	byte	$ec, $fc, $fc, $ff, $0c, $f2, $02, $11, $ec, $dd, $20, $0a, $0f, $e6, $fd, $ff
1594f     0D 03 EB 17 
15953     FB FC F3 F4 
15957     EF 07 0B FD 
1595b     F5 00 DE 06 | 	byte	$0d, $03, $eb, $17, $fb, $fc, $f3, $f4, $ef, $07, $0b, $fd, $f5, $00, $de, $06
1595f     F8 E8 E9 05 
15963     0F FC F2 DB 
15967     0C 09 E7 F6 
1596b     08 04 EF F8 | 	byte	$f8, $e8, $e9, $05, $0f, $fc, $f2, $db, $0c, $09, $e7, $f6, $08, $04, $ef, $f8
1596f     0A F3 10 1D 
15973     00 03 E5 01 
15977     1C 07 07 12 
1597b     FA 0D 18 F2 | 	byte	$0a, $f3, $10, $1d, $00, $03, $e5, $01, $1c, $07, $07, $12, $fa, $0d, $18, $f2
1597f     15 1B 04 F2 
15983     0D 10 FB 09 
15987     FC 0C 13 FA 
1598b     07 33 EF FD | 	byte	$15, $1b, $04, $f2, $0d, $10, $fb, $09, $fc, $0c, $13, $fa, $07, $33, $ef, $fd
1598f     20 0C FE 0C 
15993     FB 15 0C 0E 
15997     08 F9 F0 11 
1599b     18 F6 DB 19 | 	byte	$20, $0c, $fe, $0c, $fb, $15, $0c, $0e, $08, $f9, $f0, $11, $18, $f6, $db, $19
1599f     03 05 02 E0 
159a3     05 05 F5 04 
159a7     04 05 04 06 
159ab     E9 EF 1A 0A | 	byte	$03, $05, $02, $e0, $05, $05, $f5, $04, $04, $05, $04, $06, $e9, $ef, $1a, $0a
159af     06 FE 00 07 
159b3     0B FB E6 FD 
159b7     FC 10 FA FC 
159bb     E0 F0 0A EA | 	byte	$06, $fe, $00, $07, $0b, $fb, $e6, $fd, $fc, $10, $fa, $fc, $e0, $f0, $0a, $ea
159bf     F1 E8 E5 F7 
159c3     FC EA FD F8 
159c7     DB 06 F7 E6 
159cb     FA 04 FD E9 | 	byte	$f1, $e8, $e5, $f7, $fc, $ea, $fd, $f8, $db, $06, $f7, $e6, $fa, $04, $fd, $e9
159cf     E9 06 07 0A 
159d3     E8 12 16 01 
159d7     00 F3 FF 2F 
159db     0A F8 0D 20 | 	byte	$e9, $06, $07, $0a, $e8, $12, $16, $01, $00, $f3, $ff, $2f, $0a, $f8, $0d, $20
159df     10 08 ED 13 
159e3     1B 0E 0D F3 
159e7     03 16 FC 0E 
159eb     08 06 08 FD | 	byte	$10, $08, $ed, $13, $1b, $0e, $0d, $f3, $03, $16, $fc, $0e, $08, $06, $08, $fd
159ef     09 0D 20 FC 
159f3     EF 18 0D F7 
159f7     0F EE FE 05 
159fb     0B EE ED 1A | 	byte	$09, $0d, $20, $fc, $ef, $18, $0d, $f7, $0f, $ee, $fe, $05, $0b, $ee, $ed, $1a
159ff     1D F6 08 F1 
15a03     F5 04 FF 1E 
15a07     EA F0 10 FE 
15a0b     06 19 FF FE | 	byte	$1d, $f6, $08, $f1, $f5, $04, $ff, $1e, $ea, $f0, $10, $fe, $06, $19, $ff, $fe
15a0f     00 FD 02 0B 
15a13     FA 01 0C 00 
15a17     F3 02 08 0B 
15a1b     F5 0C FC F8 | 	byte	$00, $fd, $02, $0b, $fa, $01, $0c, $00, $f3, $02, $08, $0b, $f5, $0c, $fc, $f8
15a1f     E2 0B FD FA 
15a23     F5 EB FC F7 
15a27     E0 F6 FF 15 
15a2b     F6 EE F5 E6 | 	byte	$e2, $0b, $fd, $fa, $f5, $eb, $fc, $f7, $e0, $f6, $ff, $15, $f6, $ee, $f5, $e6
15a2f     E4 FF FF 06 
15a33     E9 F2 F2 FC 
15a37     03 FE 06 FF 
15a3b     EE 13 05 F4 | 	byte	$e4, $ff, $ff, $06, $e9, $f2, $f2, $fc, $03, $fe, $06, $ff, $ee, $13, $05, $f4
15a3f     0F 1D 23 00 
15a43     08 15 01 00 
15a47     23 0E 03 13 
15a4b     02 1B 08 12 | 	byte	$0f, $1d, $23, $00, $08, $15, $01, $00, $23, $0e, $03, $13, $02, $1b, $08, $12
15a4f     0F 02 09 FD 
15a53     11 03 08 01 
15a57     05 03 16 08 
15a5b     0B FE 05 04 | 	byte	$0f, $02, $09, $fd, $11, $03, $08, $01, $05, $03, $16, $08, $0b, $fe, $05, $04
15a5f     0B E3 FB 1D 
15a63     03 05 01 09 
15a67     09 01 FD FF 
15a6b     ED EC 08 0A | 	byte	$0b, $e3, $fb, $1d, $03, $05, $01, $09, $09, $01, $fd, $ff, $ed, $ec, $08, $0a
15a6f     F5 E5 F7 16 
15a73     01 F9 E2 FA 
15a77     E1 06 01 F9 
15a7b     02 F1 E0 FB | 	byte	$f5, $e5, $f7, $16, $01, $f9, $e2, $fa, $e1, $06, $01, $f9, $02, $f1, $e0, $fb
15a7f     0C 06 E9 DD 
15a83     F6 14 01 08 
15a87     EC FD 0A 03 
15a8b     01 EB F7 00 | 	byte	$0c, $06, $e9, $dd, $f6, $14, $01, $08, $ec, $fd, $0a, $03, $01, $eb, $f7, $00
15a8f     10 E7 00 08 
15a93     06 11 FA EF 
15a97     13 EF F4 05 
15a9b     0E FE F6 F7 | 	byte	$10, $e7, $00, $08, $06, $11, $fa, $ef, $13, $ef, $f4, $05, $0e, $fe, $f6, $f7
15a9f     20 FB 04 02 
15aa3     FE 01 F4 0F 
15aa7     2C 09 02 09 
15aab     01 0F 13 08 | 	byte	$20, $fb, $04, $02, $fe, $01, $f4, $0f, $2c, $09, $02, $09, $01, $0f, $13, $08
15aaf     F6 0F 14 0D 
15ab3     FA 08 15 F5 
15ab7     31 11 E5 0A 
15abb     11 02 19 11 | 	byte	$f6, $0f, $14, $0d, $fa, $08, $15, $f5, $31, $11, $e5, $0a, $11, $02, $19, $11
15abf     FD FB 0D 0C 
15ac3     FA 03 05 00 
15ac7     00 01 03 05 
15acb     08 09 01 D9 | 	byte	$fd, $fb, $0d, $0c, $fa, $03, $05, $00, $00, $01, $03, $05, $08, $09, $01, $d9
15acf     12 04 E2 04 
15ad3     07 F8 E6 FC 
15ad7     ED 01 0B F3 
15adb     FC ED FF 05 | 	byte	$12, $04, $e2, $04, $07, $f8, $e6, $fc, $ed, $01, $0b, $f3, $fc, $ed, $ff, $05
15adf     EC F4 0C FF 
15ae3     F8 F3 F7 F7 
15ae7     08 F4 F9 03 
15aeb     F4 F4 F5 F2 | 	byte	$ec, $f4, $0c, $ff, $f8, $f3, $f7, $f7, $08, $f4, $f9, $03, $f4, $f4, $f5, $f2
15aef     FD 0A F7 FE 
15af3     F7 ED 08 10 
15af7     EF FD F3 01 
15afb     03 F2 F8 F1 | 	byte	$fd, $0a, $f7, $fe, $f7, $ed, $08, $10, $ef, $fd, $f3, $01, $03, $f2, $f8, $f1
15aff     08 FE 08 FA 
15b03     F2 FA 10 05 
15b07     F2 03 03 18 
15b0b     07 E9 17 18 | 	byte	$08, $fe, $08, $fa, $f2, $fa, $10, $05, $f2, $03, $03, $18, $07, $e9, $17, $18
15b0f     04 0B 10 0C 
15b13     FC 16 FE 09 
15b17     1C 0B 10 09 
15b1b     14 1C 11 14 | 	byte	$04, $0b, $10, $0c, $fc, $16, $fe, $09, $1c, $0b, $10, $09, $14, $1c, $11, $14
15b1f     0B 06 05 0F 
15b23     0F 18 19 17 
15b27     F4 0E 07 12 
15b2b     18 06 EF 0B | 	byte	$0b, $06, $05, $0f, $0f, $18, $19, $17, $f4, $0e, $07, $12, $18, $06, $ef, $0b
15b2f     12 FA FB F5 
15b33     02 02 06 FD 
15b37     F3 E9 F3 F6 
15b3b     EF FC FB E8 | 	byte	$12, $fa, $fb, $f5, $02, $02, $06, $fd, $f3, $e9, $f3, $f6, $ef, $fc, $fb, $e8
15b3f     EA EF F3 F8 
15b43     FC F2 F2 EB 
15b47     DD E8 10 F9 
15b4b     F1 04 FA E2 | 	byte	$ea, $ef, $f3, $f8, $fc, $f2, $f2, $eb, $dd, $e8, $10, $f9, $f1, $04, $fa, $e2
15b4f     F5 FC F2 05 
15b53     00 E8 F5 03 
15b57     FB E7 FD 01 
15b5b     FC F1 03 03 | 	byte	$f5, $fc, $f2, $05, $00, $e8, $f5, $03, $fb, $e7, $fd, $01, $fc, $f1, $03, $03
15b5f     F3 F0 FC F8 
15b63     01 FB 0C EA 
15b67     08 15 09 FC 
15b6b     FA 0A 00 F7 | 	byte	$f3, $f0, $fc, $f8, $01, $fb, $0c, $ea, $08, $15, $09, $fc, $fa, $0a, $00, $f7
15b6f     19 08 09 F9 
15b73     0C 0F 0A 08 
15b77     1A FA 1F 10 
15b7b     03 FC 0D 27 | 	byte	$19, $08, $09, $f9, $0c, $0f, $0a, $08, $1a, $fa, $1f, $10, $03, $fc, $0d, $27
15b7f     18 07 10 06 
15b83     1A 18 16 F7 
15b87     21 13 0D 1F 
15b8b     F7 1A 0B 09 | 	byte	$18, $07, $10, $06, $1a, $18, $16, $f7, $21, $13, $0d, $1f, $f7, $1a, $0b, $09
15b8f     FE 17 11 1E 
15b93     F1 F2 0E 1D 
15b97     FD 00 F4 F5 
15b9b     14 00 F5 F3 | 	byte	$fe, $17, $11, $1e, $f1, $f2, $0e, $1d, $fd, $00, $f4, $f5, $14, $00, $f5, $f3
15b9f     FC FE ED F9 
15ba3     F1 F9 F2 01 
15ba7     F7 F3 FB E6 
15bab     F4 F0 FE EB | 	byte	$fc, $fe, $ed, $f9, $f1, $f9, $f2, $01, $f7, $f3, $fb, $e6, $f4, $f0, $fe, $eb
15baf     EB F3 E7 F6 
15bb3     EE F3 E6 E4 
15bb7     08 F3 DF EC 
15bbb     FB 00 F1 F8 | 	byte	$eb, $f3, $e7, $f6, $ee, $f3, $e6, $e4, $08, $f3, $df, $ec, $fb, $00, $f1, $f8
15bbf     F5 F3 F4 FE 
15bc3     09 F5 F9 FF 
15bc7     02 0A FC FE 
15bcb     F9 0D 06 F9 | 	byte	$f5, $f3, $f4, $fe, $09, $f5, $f9, $ff, $02, $0a, $fc, $fe, $f9, $0d, $06, $f9
15bcf     07 17 11 05 
15bd3     FF EE 05 0E 
15bd7     0E 0E 17 F5 
15bdb     03 10 05 08 | 	byte	$07, $17, $11, $05, $ff, $ee, $05, $0e, $0e, $0e, $17, $f5, $03, $10, $05, $08
15bdf     12 12 FE 0A 
15be3     22 1B FE 16 
15be7     17 16 FF 0B 
15beb     23 14 0A 0D | 	byte	$12, $12, $fe, $0a, $22, $1b, $fe, $16, $17, $16, $ff, $0b, $23, $14, $0a, $0d
15bef     10 03 11 14 
15bf3     02 FC 13 12 
15bf7     17 F5 04 0D 
15bfb     02 04 0F F0 | 	byte	$10, $03, $11, $14, $02, $fc, $13, $12, $17, $f5, $04, $0d, $02, $04, $0f, $f0
15bff     FB 0E 08 F2 
15c03     F8 F9 0E F6 
15c07     F6 01 F9 F5 
15c0b     EB F8 02 F7 | 	byte	$fb, $0e, $08, $f2, $f8, $f9, $0e, $f6, $f6, $01, $f9, $f5, $eb, $f8, $02, $f7
15c0f     FA F0 05 F6 
15c13     05 E7 E0 0A 
15c17     F2 02 FE EC 
15c1b     F3 09 F7 EC | 	byte	$fa, $f0, $05, $f6, $05, $e7, $e0, $0a, $f2, $02, $fe, $ec, $f3, $09, $f7, $ec
15c1f     F5 F5 EF 03 
15c23     F7 F9 08 FB 
15c27     EA 05 F1 FD 
15c2b     FC 0B F5 F4 | 	byte	$f5, $f5, $ef, $03, $f7, $f9, $08, $fb, $ea, $05, $f1, $fd, $fc, $0b, $f5, $f4
15c2f     F1 F1 08 11 
15c33     FE E6 FE F1 
15c37     0C 12 03 F4 
15c3b     FD 06 12 12 | 	byte	$f1, $f1, $08, $11, $fe, $e6, $fe, $f1, $0c, $12, $03, $f4, $fd, $06, $12, $12
15c3f     F3 0C 02 12 
15c43     F4 0F 02 08 
15c47     09 10 11 02 
15c4b     FC 10 17 F7 | 	byte	$f3, $0c, $02, $12, $f4, $0f, $02, $08, $09, $10, $11, $02, $fc, $10, $17, $f7
15c4f     05 0D 1A 08 
15c53     00 0F 07 F8 
15c57     0F 12 0A 1C 
15c5b     08 FB 0C 15 | 	byte	$05, $0d, $1a, $08, $00, $0f, $07, $f8, $0f, $12, $0a, $1c, $08, $fb, $0c, $15
15c5f     12 F9 0F 1A 
15c63     0E FD 13 13 
15c67     04 02 04 02 
15c6b     F6 11 03 03 | 	byte	$12, $f9, $0f, $1a, $0e, $fd, $13, $13, $04, $02, $04, $02, $f6, $11, $03, $03
15c6f     0A E8 01 FC 
15c73     FB EF 0A 06 
15c77     EE F2 FA E6 
15c7b     F6 F9 04 F2 | 	byte	$0a, $e8, $01, $fc, $fb, $ef, $0a, $06, $ee, $f2, $fa, $e6, $f6, $f9, $04, $f2
15c7f     DF F8 FC F0 
15c83     EB E4 FD FC 
15c87     F4 F6 F0 FB 
15c8b     F3 FA 00 EA | 	byte	$df, $f8, $fc, $f0, $eb, $e4, $fd, $fc, $f4, $f6, $f0, $fb, $f3, $fa, $00, $ea
15c8f     08 F3 E0 01 
15c93     FC E1 17 03 
15c97     E4 FF FD FF 
15c9b     02 ED 09 FF | 	byte	$08, $f3, $e0, $01, $fc, $e1, $17, $03, $e4, $ff, $fd, $ff, $02, $ed, $09, $ff
15c9f     F5 F7 0B 03 
15ca3     08 09 05 00 
15ca7     F6 1B F4 06 
15cab     1F 01 F8 FD | 	byte	$f5, $f7, $0b, $03, $08, $09, $05, $00, $f6, $1b, $f4, $06, $1f, $01, $f8, $fd
15caf     0D 11 09 08 
15cb3     06 0C 02 0E 
15cb7     03 FB 1D 0A 
15cbb     11 08 F8 16 | 	byte	$0d, $11, $09, $08, $06, $0c, $02, $0e, $03, $fb, $1d, $0a, $11, $08, $f8, $16
15cbf     20 F9 07 12 
15cc3     FD 0D 15 08 
15cc7     FD 0F 03 17 
15ccb     00 FE 08 1F | 	byte	$20, $f9, $07, $12, $fd, $0d, $15, $08, $fd, $0f, $03, $17, $00, $fe, $08, $1f
15ccf     00 04 11 F8 
15cd3     01 01 F7 14 
15cd7     03 00 01 F7 
15cdb     05 FD F1 FE | 	byte	$00, $04, $11, $f8, $01, $01, $f7, $14, $03, $00, $01, $f7, $05, $fd, $f1, $fe
15cdf     19 02 EB F4 
15ce3     F5 01 08 EF 
15ce7     FE 00 F9 EB 
15ceb     FD F5 FC F2 | 	byte	$19, $02, $eb, $f4, $f5, $01, $08, $ef, $fe, $00, $f9, $eb, $fd, $f5, $fc, $f2
15cef     F8 FD F3 F1 
15cf3     06 F1 FC F6 
15cf7     FB F9 02 F6 
15cfb     F3 01 FA 02 | 	byte	$f8, $fd, $f3, $f1, $06, $f1, $fc, $f6, $fb, $f9, $02, $f6, $f3, $01, $fa, $02
15cff     FB FD F6 FC 
15d03     0B F5 F6 FE 
15d07     F8 04 FE FE 
15d0b     FC 12 02 F2 | 	byte	$fb, $fd, $f6, $fc, $0b, $f5, $f6, $fe, $f8, $04, $fe, $fe, $fc, $12, $02, $f2
15d0f     06 0B FF 04 
15d13     FB 0F FC 0F 
15d17     10 F9 11 0B 
15d1b     FD F6 09 1C | 	byte	$06, $0b, $ff, $04, $fb, $0f, $fc, $0f, $10, $f9, $11, $0b, $fd, $f6, $09, $1c
15d1f     0B 00 04 06 
15d23     18 0C F8 F5 
15d27     14 0C 02 10 
15d2b     FE 03 06 03 | 	byte	$0b, $00, $04, $06, $18, $0c, $f8, $f5, $14, $0c, $02, $10, $fe, $03, $06, $03
15d2f     08 06 FE 01 
15d33     0F 03 FB 01 
15d37     07 09 07 0A 
15d3b     0B F4 FC 07 | 	byte	$08, $06, $fe, $01, $0f, $03, $fb, $01, $07, $09, $07, $0a, $0b, $f4, $fc, $07
15d3f     01 FD 0B FD 
15d43     FF F9 09 F4 
15d47     EF 0A 02 F6 
15d4b     FD F5 F4 FF | 	byte	$01, $fd, $0b, $fd, $ff, $f9, $09, $f4, $ef, $0a, $02, $f6, $fd, $f5, $f4, $ff
15d4f     10 03 ED 02 
15d53     F8 F4 F9 0A 
15d57     FD F8 FE FF 
15d5b     F9 FD 02 EC | 	byte	$10, $03, $ed, $02, $f8, $f4, $f9, $0a, $fd, $f8, $fe, $ff, $f9, $fd, $02, $ec
15d5f     06 F7 FB FE 
15d63     04 FD 01 FD 
15d67     FC F3 01 FB 
15d6b     FF FB FF 0A | 	byte	$06, $f7, $fb, $fe, $04, $fd, $01, $fd, $fc, $f3, $01, $fb, $ff, $fb, $ff, $0a
15d6f     F9 FD FE 04 
15d73     0B F9 F5 08 
15d77     0E FE FF 0E 
15d7b     00 06 05 0B | 	byte	$f9, $fd, $fe, $04, $0b, $f9, $f5, $08, $0e, $fe, $ff, $0e, $00, $06, $05, $0b
15d7f     0A FD 09 10 
15d83     F1 06 08 FC 
15d87     0A FD FF 06 
15d8b     01 FB 08 F6 | 	byte	$0a, $fd, $09, $10, $f1, $06, $08, $fc, $0a, $fd, $ff, $06, $01, $fb, $08, $f6
15d8f     F9 07 10 FA 
15d93     FA F4 0D 09 
15d97     01 00 F8 F9 
15d9b     0B FC F1 0B | 	byte	$f9, $07, $10, $fa, $fa, $f4, $0d, $09, $01, $00, $f8, $f9, $0b, $fc, $f1, $0b
15d9f     0F 05 FA 0B 
15da3     F5 01 08 09 
15da7     FF F1 03 04 
15dab     07 06 FF 04 | 	byte	$0f, $05, $fa, $0b, $f5, $01, $08, $09, $ff, $f1, $03, $04, $07, $06, $ff, $04
15daf     FA FC FC 14 
15db3     00 F4 FB 03 
15db7     FA 0E 02 F5 
15dbb     06 FD 00 FA | 	byte	$fa, $fc, $fc, $14, $00, $f4, $fb, $03, $fa, $0e, $02, $f5, $06, $fd, $00, $fa
15dbf     03 00 0F 04 
15dc3     F7 FF 02 0E 
15dc7     FC F7 10 09 
15dcb     EB 06 11 FD | 	byte	$03, $00, $0f, $04, $f7, $ff, $02, $0e, $fc, $f7, $10, $09, $eb, $06, $11, $fd
15dcf     FE F1 FB 0A 
15dd3     FE FF FA FD 
15dd7     08 07 04 ED 
15ddb     F9 02 08 0A | 	byte	$fe, $f1, $fb, $0a, $fe, $ff, $fa, $fd, $08, $07, $04, $ed, $f9, $02, $08, $0a
15ddf     FE 00 FD 03 
15de3     08 FE 06 00 
15de7     07 01 FA 03 
15deb     0D FA FF 02 | 	byte	$fe, $00, $fd, $03, $08, $fe, $06, $00, $07, $01, $fa, $03, $0d, $fa, $ff, $02
15def     03 08 11 F6 
15df3     09 FF F9 06 
15df7     07 F5 0C FC 
15dfb     0B F7 F4 00 | 	byte	$03, $08, $11, $f6, $09, $ff, $f9, $06, $07, $f5, $0c, $fc, $0b, $f7, $f4, $00
15dff     08 F6 02 FB 
15e03     05 F7 FC 03 
15e07     07 0C F1 FA 
15e0b     15 F2 00 FD | 	byte	$08, $f6, $02, $fb, $05, $f7, $fc, $03, $07, $0c, $f1, $fa, $15, $f2, $00, $fd
15e0f     F5 18 03 ED 
15e13     07 F2 0B 0A 
15e17     09 FB 0F FE 
15e1b     02 0E F9 F7 | 	byte	$f5, $18, $03, $ed, $07, $f2, $0b, $0a, $09, $fb, $0f, $fe, $02, $0e, $f9, $f7
15e1f     0D 0A F7 FE 
15e23     0A 02 F8 03 
15e27     0C F3 07 05 
15e2b     FA F2 06 FE | 	byte	$0d, $0a, $f7, $fe, $0a, $02, $f8, $03, $0c, $f3, $07, $05, $fa, $f2, $06, $fe
15e2f     03 0A EC 03 
15e33     03 FC 06 F6 
15e37     F9 0E 05 F4 
15e3b     FC FB 06 0F | 	byte	$03, $0a, $ec, $03, $03, $fc, $06, $f6, $f9, $0e, $05, $f4, $fc, $fb, $06, $0f
15e3f     F8 FB FF FB 
15e43     FF 19 FB F5 
15e47     FE FD 0A 07 
15e4b     0A F8 04 04 | 	byte	$f8, $fb, $ff, $fb, $ff, $19, $fb, $f5, $fe, $fd, $0a, $07, $0a, $f8, $04, $04
15e4f     10 06 FC 0E 
15e53     FB F6 0C 14 
15e57     F6 FA 12 08 
15e5b     08 FE 08 04 | 	byte	$10, $06, $fc, $0e, $fb, $f6, $0c, $14, $f6, $fa, $12, $08, $08, $fe, $08, $04
15e5f     01 00 10 0B 
15e63     05 02 F6 0B 
15e67     0B FE 04 01 
15e6b     F5 FA 0C FF | 	byte	$01, $00, $10, $0b, $05, $02, $f6, $0b, $0b, $fe, $04, $01, $f5, $fa, $0c, $ff
15e6f     F1 0A 08 F8 
15e73     02 FD FC 04 
15e77     F7 FF FA F3 
15e7b     12 F7 EF FD | 	byte	$f1, $0a, $08, $f8, $02, $fd, $fc, $04, $f7, $ff, $fa, $f3, $12, $f7, $ef, $fd
15e7f     0D FA F5 05 
15e83     FA EE 10 F3 
15e87     F4 05 FC 00 
15e8b     04 F9 09 FB | 	byte	$0d, $fa, $f5, $05, $fa, $ee, $10, $f3, $f4, $05, $fc, $00, $04, $f9, $09, $fb
15e8f     F0 FB 0D 01 
15e93     FA F6 FF 0A 
15e97     06 EA 02 FF 
15e9b     F7 05 FE 07 | 	byte	$f0, $fb, $0d, $01, $fa, $f6, $ff, $0a, $06, $ea, $02, $ff, $f7, $05, $fe, $07
15e9f     01 FB FA 0F 
15ea3     0D F0 FE 09 
15ea7     0A FD FE 01 
15eab     0B 00 01 10 | 	byte	$01, $fb, $fa, $0f, $0d, $f0, $fe, $09, $0a, $fd, $fe, $01, $0b, $00, $01, $10
15eaf     04 FE 01 09 
15eb3     FE 03 03 0A 
15eb7     05 FF 10 07 
15ebb     F7 02 0F 0E | 	byte	$04, $fe, $01, $09, $fe, $03, $03, $0a, $05, $ff, $10, $07, $f7, $02, $0f, $0e
15ebf     ED 05 0B FF 
15ec3     FF 0A 08 FB 
15ec7     06 09 F2 05 
15ecb     10 FE FB 02 | 	byte	$ed, $05, $0b, $ff, $ff, $0a, $08, $fb, $06, $09, $f2, $05, $10, $fe, $fb, $02
15ecf     07 06 08 F8 
15ed3     F4 07 FD FF 
15ed7     08 FA 02 0D 
15edb     FD E8 00 04 | 	byte	$07, $06, $08, $f8, $f4, $07, $fd, $ff, $08, $fa, $02, $0d, $fd, $e8, $00, $04
15edf     04 05 F3 F4 
15ee3     0D 09 09 EC 
15ee7     F9 0E F7 FF 
15eeb     FB FE 0E 04 | 	byte	$04, $05, $f3, $f4, $0d, $09, $09, $ec, $f9, $0e, $f7, $ff, $fb, $fe, $0e, $04
15eef     F2 08 FB F5 
15ef3     FE F4 FD 05 
15ef7     05 F0 08 F3 
15efb     FE FF F2 FB | 	byte	$f2, $08, $fb, $f5, $fe, $f4, $fd, $05, $05, $f0, $08, $f3, $fe, $ff, $f2, $fb
15eff     00 FD F9 04 
15f03     FD FC FC 04 
15f07     FC F8 07 F1 
15f0b     FC FD 04 01 | 	byte	$00, $fd, $f9, $04, $fd, $fc, $fc, $04, $fc, $f8, $07, $f1, $fc, $fd, $04, $01
15f0f     FE F9 03 FE 
15f13     16 06 FA E8 
15f17     14 13 FB FD 
15f1b     10 03 FE 0C | 	byte	$fe, $f9, $03, $fe, $16, $06, $fa, $e8, $14, $13, $fb, $fd, $10, $03, $fe, $0c
15f1f     04 F7 01 0C 
15f23     01 F7 0B 0A 
15f27     0A 00 03 00 
15f2b     03 0D 07 02 | 	byte	$04, $f7, $01, $0c, $01, $f7, $0b, $0a, $0a, $00, $03, $00, $03, $0d, $07, $02
15f2f     FE 13 08 03 
15f33     04 01 0C 0A 
15f37     F8 03 13 FD 
15f3b     01 07 F5 14 | 	byte	$fe, $13, $08, $03, $04, $01, $0c, $0a, $f8, $03, $13, $fd, $01, $07, $f5, $14
15f3f     15 F7 F7 0C 
15f43     FF FF FF FA 
15f47     08 00 01 0B 
15f4b     FE F6 FD FD | 	byte	$15, $f7, $f7, $0c, $ff, $ff, $ff, $fa, $08, $00, $01, $0b, $fe, $f6, $fd, $fd
15f4f     05 00 FB F6 
15f53     02 FA 03 09 
15f57     02 F0 F9 F6 
15f5b     06 FE FB 04 | 	byte	$05, $00, $fb, $f6, $02, $fa, $03, $09, $02, $f0, $f9, $f6, $06, $fe, $fb, $04
15f5f     F5 F6 02 F9 
15f63     06 FA EF 01 
15f67     05 F9 FD 00 
15f6b     FD 06 00 F8 | 	byte	$f5, $f6, $02, $f9, $06, $fa, $ef, $01, $05, $f9, $fd, $00, $fd, $06, $00, $f8
15f6f     00 FF 03 05 
15f73     F7 FB 06 F7 
15f77     00 00 08 FB 
15f7b     F9 FF 04 03 | 	byte	$00, $ff, $03, $05, $f7, $fb, $06, $f7, $00, $00, $08, $fb, $f9, $ff, $04, $03
15f7f     0A F6 F6 07 
15f83     01 F9 05 F8 
15f87     08 01 08 05 
15f8b     01 FB 0C 00 | 	byte	$0a, $f6, $f6, $07, $01, $f9, $05, $f8, $08, $01, $08, $05, $01, $fb, $0c, $00
15f8f     F5 00 0A FD 
15f93     01 15 FE 00 
15f97     FC 10 0A FD 
15f9b     FB 07 FF F9 | 	byte	$f5, $00, $0a, $fd, $01, $15, $fe, $00, $fc, $10, $0a, $fd, $fb, $07, $ff, $f9
15f9f     0B 03 01 0D 
15fa3     FB F7 13 07 
15fa7     02 03 F1 0B 
15fab     0E 07 FA 02 | 	byte	$0b, $03, $01, $0d, $fb, $f7, $13, $07, $02, $03, $f1, $0b, $0e, $07, $fa, $02
15faf     F4 11 0C FA 
15fb3     F9 0E 01 05 
15fb7     FF FE FD 07 
15fbb     02 01 03 FE | 	byte	$f4, $11, $0c, $fa, $f9, $0e, $01, $05, $ff, $fe, $fd, $07, $02, $01, $03, $fe
15fbf     FE 09 F6 0C 
15fc3     01 F9 F3 0A 
15fc7     05 FA F8 FF 
15fcb     11 05 F2 F5 | 	byte	$fe, $09, $f6, $0c, $01, $f9, $f3, $0a, $05, $fa, $f8, $ff, $11, $05, $f2, $f5
15fcf     07 08 08 FB 
15fd3     FB 07 FB 04 
15fd7     03 F7 00 F9 
15fdb     FE 0B 02 F8 | 	byte	$07, $08, $08, $fb, $fb, $07, $fb, $04, $03, $f7, $00, $f9, $fe, $0b, $02, $f8
15fdf     09 FC 05 F8 
15fe3     F9 0A FE 08 
15fe7     0F FA F6 FF 
15feb     09 0D FD F9 | 	byte	$09, $fc, $05, $f8, $f9, $0a, $fe, $08, $0f, $fa, $f6, $ff, $09, $0d, $fd, $f9
15fef     08 FF 04 04 
15ff3     FA 01 0E F8 
15ff7     01 03 01 FD 
15ffb     FF 01 01 FB | 	byte	$08, $ff, $04, $04, $fa, $01, $0e, $f8, $01, $03, $01, $fd, $ff, $01, $01, $fb
15fff     06 FF F3 0F 
16003     13 F4 F8 00 
16007     05 0E 03 F8 
1600b     07 FF F7 04 | 	byte	$06, $ff, $f3, $0f, $13, $f4, $f8, $00, $05, $0e, $03, $f8, $07, $ff, $f7, $04
1600f     FC F8 11 0A 
16013     FA FA FC FE 
16017     FF FD 11 FE 
1601b     F1 07 03 FD | 	byte	$fc, $f8, $11, $0a, $fa, $fa, $fc, $fe, $ff, $fd, $11, $fe, $f1, $07, $03, $fd
1601f     00 F4 0B 06 
16023     F4 FA 0D 03 
16027     F2 03 07 FA 
1602b     00 08 05 FF | 	byte	$00, $f4, $0b, $06, $f4, $fa, $0d, $03, $f2, $03, $07, $fa, $00, $08, $05, $ff
1602f     FC 0D FE F1 
16033     06 0F FD F8 
16037     05 07 07 F9 
1603b     F9 0A FF FE | 	byte	$fc, $0d, $fe, $f1, $06, $0f, $fd, $f8, $05, $07, $07, $f9, $f9, $0a, $ff, $fe
1603f     0E 01 FA 02 
16043     05 FF 01 00 
16047     09 05 02 0C 
1604b     0C 0C F9 01 | 	byte	$0e, $01, $fa, $02, $05, $ff, $01, $00, $09, $05, $02, $0c, $0c, $0c, $f9, $01
1604f     00 FE 0E 08 
16053     F2 03 0A 08 
16057     01 FE FA 04 
1605b     FA 06 FF FE | 	byte	$00, $fe, $0e, $08, $f2, $03, $0a, $08, $01, $fe, $fa, $04, $fa, $06, $ff, $fe
1605f     04 01 00 FC 
16063     FA 03 09 F2 
16067     FE FF 06 F9 
1606b     02 FD 01 0B | 	byte	$04, $01, $00, $fc, $fa, $03, $09, $f2, $fe, $ff, $06, $f9, $02, $fd, $01, $0b
1606f     F0 F9 08 05 
16073     04 0B F7 00 
16077     00 01 01 07 
1607b     F4 FC 07 05 | 	byte	$f0, $f9, $08, $05, $04, $0b, $f7, $00, $00, $01, $01, $07, $f4, $fc, $07, $05
1607f     00 ED 0E 09 
16083     F0 05 02 FD 
16087     09 FB F9 F6 
1608b     11 F8 05 02 | 	byte	$00, $ed, $0e, $09, $f0, $05, $02, $fd, $09, $fb, $f9, $f6, $11, $f8, $05, $02
1608f     01 ED 02 0B 
16093     F6 F7 06 F9 
16097     FA 07 F4 F5 
1609b     0B F0 F9 01 | 	byte	$01, $ed, $02, $0b, $f6, $f7, $06, $f9, $fa, $07, $f4, $f5, $0b, $f0, $f9, $01
1609f     04 FA FA F8 
160a3     01 FF 01 08 
160a7     FA FD 01 05 
160ab     06 FC 05 FF | 	byte	$04, $fa, $fa, $f8, $01, $ff, $01, $08, $fa, $fd, $01, $05, $06, $fc, $05, $ff
160af     02 15 FF F5 
160b3     15 01 F8 0F 
160b7     04 08 04 0B 
160bb     02 00 12 14 | 	byte	$02, $15, $ff, $f5, $15, $01, $f8, $0f, $04, $08, $04, $0b, $02, $00, $12, $14
160bf     05 FA 0C 02 
160c3     0B 0F 05 FE 
160c7     09 08 FE 06 
160cb     0E 08 F5 09 | 	byte	$05, $fa, $0c, $02, $0b, $0f, $05, $fe, $09, $08, $fe, $06, $0e, $08, $f5, $09
160cf     07 0A 0B 03 
160d3     FB 04 F5 0A 
160d7     10 05 F6 06 
160db     FD 06 00 01 | 	byte	$07, $0a, $0b, $03, $fb, $04, $f5, $0a, $10, $05, $f6, $06, $fd, $06, $00, $01
160df     08 FA FF 03 
160e3     FD FE F6 FA 
160e7     F7 04 0A F5 
160eb     01 FC FF F1 | 	byte	$08, $fa, $ff, $03, $fd, $fe, $f6, $fa, $f7, $04, $0a, $f5, $01, $fc, $ff, $f1
160ef     07 03 F6 EF 
160f3     FE FC FF 01 
160f7     F8 F4 F4 FB 
160fb     FF F1 FD 00 | 	byte	$07, $03, $f6, $ef, $fe, $fc, $ff, $01, $f8, $f4, $f4, $fb, $ff, $f1, $fd, $00
160ff     FB F3 F5 F8 
16103     F9 01 03 E9 
16107     FE FF FB FE 
1610b     F9 00 00 00 | 	byte	$fb, $f3, $f5, $f8, $f9, $01, $03, $e9, $fe, $ff, $fb, $fe, $f9, $00, $00, $00
1610f     00 01 02 00 
16113     02 FF 01 00 
16117     FC 08 07 EC 
1611b     2B D3 10 D9 | 	byte	$00, $01, $02, $00, $02, $ff, $01, $00, $fc, $08, $07, $ec, $2b, $d3, $10, $d9
1611f     55 B5 FE 4F 
16123     DF C5 78 BE 
16127     28 05 E6 2E 
1612b     BC 5D D1 05 | 	byte	$55, $b5, $fe, $4f, $df, $c5, $78, $be, $28, $05, $e6, $2e, $bc, $5d, $d1, $05
1612f     E9 27 DB 2E 
16133     D0 2E C0 57 
16137     97 33 D0 1D 
1613b     F7 CD 3A CC | 	byte	$e9, $27, $db, $2e, $d0, $2e, $c0, $57, $97, $33, $d0, $1d, $f7, $cd, $3a, $cc
1613f     3C 8F 6C 96 
16143     60 A3 63 A7 
16147     4A DE 08 0F 
1614b     03 DD 25 EC | 	byte	$3c, $8f, $6c, $96, $60, $a3, $63, $a7, $4a, $de, $08, $0f, $03, $dd, $25, $ec
1614f     1B A9 68 A6 
16153     3B C4 5E 90 
16157     5E B8 7F 87 
1615b     67 D9 F6 38 | 	byte	$1b, $a9, $68, $a6, $3b, $c4, $5e, $90, $5e, $b8, $7f, $87, $67, $d9, $f6, $38
1615f     A4 53 BE 64 
16163     9D 41 E9 07 
16167     E4 2D CC 59 
1616b     AA 56 E0 F9 | 	byte	$a4, $53, $be, $64, $9d, $41, $e9, $07, $e4, $2d, $cc, $59, $aa, $56, $e0, $f9
1616f     1C DB 31 C8 
16173     3C AB 5E 9C 
16177     4F D0 33 D4 
1617b     4D A0 61 BD | 	byte	$1c, $db, $31, $c8, $3c, $ab, $5e, $9c, $4f, $d0, $33, $d4, $4d, $a0, $61, $bd
1617f     2D DC 34 C0 
16183     1A E5 38 D5 
16187     FD 0F D3 2A 
1618b     C3 37 CC 49 | 	byte	$2d, $dc, $34, $c0, $1a, $e5, $38, $d5, $fd, $0f, $d3, $2a, $c3, $37, $cc, $49
1618f     B0 28 F2 E5 
16193     34 C8 3E DB 
16197     F3 0D 30 B2 
1619b     40 D9 15 0B | 	byte	$b0, $28, $f2, $e5, $34, $c8, $3e, $db, $f3, $0d, $30, $b2, $40, $d9, $15, $0b
1619f     FE FE DF 1B 
161a3     AD 3E C4 0B 
161a7     0E FD 37 B3 
161ab     5E AD 4D CA | 	byte	$fe, $fe, $df, $1b, $ad, $3e, $c4, $0b, $0e, $fd, $37, $b3, $5e, $ad, $4d, $ca
161af     38 CB 3C DF 
161b3     01 20 F8 DD 
161b7     42 D5 2F CB 
161bb     47 B2 5D 9C | 	byte	$38, $cb, $3c, $df, $01, $20, $f8, $dd, $42, $d5, $2f, $cb, $47, $b2, $5d, $9c
161bf     48 C9 0D FB 
161c3     E5 29 D0 36 
161c7     D3 30 B0 49 
161cb     C7 28 D0 23 | 	byte	$48, $c9, $0d, $fb, $e5, $29, $d0, $36, $d3, $30, $b0, $49, $c7, $28, $d0, $23
161cf     D5 22 F0 EB 
161d3     29 D8 1B 05 
161d7     DD 2C CC 39 
161db     D3 2B D9 41 | 	byte	$d5, $22, $f0, $eb, $29, $d8, $1b, $05, $dd, $2c, $cc, $39, $d3, $2b, $d9, $41
161df     A2 64 AB 2C 
161e3     FB D8 23 E0 
161e7     11 F5 17 09 
161eb     E1 2C E1 0B | 	byte	$a2, $64, $ab, $2c, $fb, $d8, $23, $e0, $11, $f5, $17, $09, $e1, $2c, $e1, $0b
161ef     FD EF 17 B6 
161f3     44 E3 F7 20 
161f7     D8 1B 0B EC 
161fb     03 13 DF 25 | 	byte	$fd, $ef, $17, $b6, $44, $e3, $f7, $20, $d8, $1b, $0b, $ec, $03, $13, $df, $25
161ff     CB 38 BE 40 
16203     B5 3D C5 52 
16207     C3 29 D6 2F 
1620b     C2 43 D2 1A | 	byte	$cb, $38, $be, $40, $b5, $3d, $c5, $52, $c3, $29, $d6, $2f, $c2, $43, $d2, $1a
1620f     F2 10 F0 08 
16213     0A 09 F0 FF 
16217     23 C8 45 BD 
1621b     42 D7 2A D1 | 	byte	$f2, $10, $f0, $08, $0a, $09, $f0, $ff, $23, $c8, $45, $bd, $42, $d7, $2a, $d1
1621f     41 DE 06 0B 
16223     F6 13 F8 14 
16227     EB 25 DD 23 
1622b     EF 09 E1 22 | 	byte	$41, $de, $06, $0b, $f6, $13, $f8, $14, $eb, $25, $dd, $23, $ef, $09, $e1, $22
1622f     DC 30 CD 31 
16233     F7 F5 07 1A 
16237     DB 12 07 F5 
1623b     10 F3 12 F1 | 	byte	$dc, $30, $cd, $31, $f7, $f5, $07, $1a, $db, $12, $07, $f5, $10, $f3, $12, $f1
1623f     1F FD EC 34 
16243     CF 2A E4 2F 
16247     CF 2E F2 FF 
1624b     06 16 F8 0E | 	byte	$1f, $fd, $ec, $34, $cf, $2a, $e4, $2f, $cf, $2e, $f2, $ff, $06, $16, $f8, $0e
1624f     FB 07 25 D8 
16253     25 E8 12 FA 
16257     0B E6 25 D0 
1625b     3C C4 2E E0 | 	byte	$fb, $07, $25, $d8, $25, $e8, $12, $fa, $0b, $e6, $25, $d0, $3c, $c4, $2e, $e0
1625f     1B EC 0B 05 
16263     F9 1A D7 20 
16267     FD 01 04 DC 
1626b     35 DF 16 E5 | 	byte	$1b, $ec, $0b, $05, $f9, $1a, $d7, $20, $fd, $01, $04, $dc, $35, $df, $16, $e5
1626f     2C BE 3C DF 
16273     1E EE 10 04 
16277     06 FD 0F F1 
1627b     0B F2 17 D8 | 	byte	$2c, $be, $3c, $df, $1e, $ee, $10, $04, $06, $fd, $0f, $f1, $0b, $f2, $17, $d8
1627f     2C F3 F5 1A 
16283     DF 28 E9 FD 
16287     16 EA 02 08 
1628b     00 FB 02 01 | 	byte	$2c, $f3, $f5, $1a, $df, $28, $e9, $fd, $16, $ea, $02, $08, $00, $fb, $02, $01
1628f     10 E2 20 D8 
16293     36 DE 17 F1 
16297     0D FE 04 FC 
1629b     18 E9 17 EE | 	byte	$10, $e2, $20, $d8, $36, $de, $17, $f1, $0d, $fe, $04, $fc, $18, $e9, $17, $ee
1629f     09 1B E8 21 
162a3     E0 29 F2 23 
162a7     D9 2C CC 46 
162ab     C0 35 E8 0B | 	byte	$09, $1b, $e8, $21, $e0, $29, $f2, $23, $d9, $2c, $cc, $46, $c0, $35, $e8, $0b
162af     0B EB 2A E5 
162b3     17 F2 FD 22 
162b7     E3 14 09 E6 
162bb     FF 04 FC 0B | 	byte	$0b, $eb, $2a, $e5, $17, $f2, $fd, $22, $e3, $14, $09, $e6, $ff, $04, $fc, $0b
162bf     0D D6 46 C8 
162c3     1C 08 0D E0 
162c7     46 C8 22 E2 
162cb     F7 2A D8 2F | 	byte	$0d, $d6, $46, $c8, $1c, $08, $0d, $e0, $46, $c8, $22, $e2, $f7, $2a, $d8, $2f
162cf     DD 27 ED 24 
162d3     C9 3B DF F6 
162d7     25 E3 17 E8 
162db     1F E9 07 F3 | 	byte	$dd, $27, $ed, $24, $c9, $3b, $df, $f6, $25, $e3, $17, $e8, $1f, $e9, $07, $f3
162df     08 FD F0 1E 
162e3     D4 28 E5 1F 
162e7     E5 11 F8 F0 
162eb     2D C0 44 C4 | 	byte	$08, $fd, $f0, $1e, $d4, $28, $e5, $1f, $e5, $11, $f8, $f0, $2d, $c0, $44, $c4
162ef     35 DC 2A D4 
162f3     36 D0 2B DE 
162f7     FD 12 FB F3 
162fb     02 F5 11 FB | 	byte	$35, $dc, $2a, $d4, $36, $d0, $2b, $de, $fd, $12, $fb, $f3, $02, $f5, $11, $fb
162ff     E9 20 D8 34 
16303     D3 2A DC 29 
16307     E6 10 FA F7 
1630b     0B 13 D3 36 | 	byte	$e9, $20, $d8, $34, $d3, $2a, $dc, $29, $e6, $10, $fa, $f7, $0b, $13, $d3, $36
1630f     D1 16 FD F1 
16313     16 11 C4 4B 
16317     C2 43 AF 5A 
1631b     BD 20 06 E3 | 	byte	$d1, $16, $fd, $f1, $16, $11, $c4, $4b, $c2, $43, $af, $5a, $bd, $20, $06, $e3
1631f     23 E6 07 FA 
16323     02 FC 10 F6 
16327     F8 1B D6 38 
1632b     CF 18 FD 02 | 	byte	$23, $e6, $07, $fa, $02, $fc, $10, $f6, $f8, $1b, $d6, $38, $cf, $18, $fd, $02
1632f     18 D0 40 CC 
16333     21 F3 02 FF 
16337     1A F0 00 10 
1633b     E8 21 EB 20 | 	byte	$18, $d0, $40, $cc, $21, $f3, $02, $ff, $1a, $f0, $00, $10, $e8, $21, $eb, $20
1633f     E0 29 D3 25 
16343     E5 0F FB 10 
16347     E9 27 D2 1F 
1634b     DD 1F F5 01 | 	byte	$e0, $29, $d3, $25, $e5, $0f, $fb, $10, $e9, $27, $d2, $1f, $dd, $1f, $f5, $01
1634f     FB 1B EC FA 
16353     1E E6 09 FD 
16357     0B F1 0E F7 
1635b     0D EE 1C F1 | 	byte	$fb, $1b, $ec, $fa, $1e, $e6, $09, $fd, $0b, $f1, $0e, $f7, $0d, $ee, $1c, $f1
1635f     0E 05 F5 20 
16363     E3 21 E8 08 
16367     06 01 EA 20 
1636b     F0 04 0D F9 | 	byte	$0e, $05, $f5, $20, $e3, $21, $e8, $08, $06, $01, $ea, $20, $f0, $04, $0d, $f9
1636f     09 E6 2C D7 
16373     20 EF 0D 05 
16377     F3 07 FC 17 
1637b     D4 3B C8 14 | 	byte	$09, $e6, $2c, $d7, $20, $ef, $0d, $05, $f3, $07, $fc, $17, $d4, $3b, $c8, $14
1637f     0A F0 0A 00 
16383     00 01 06 F1 
16387     22 DC 18 FE 
1638b     04 F1 27 CA | 	byte	$0a, $f0, $0a, $00, $00, $01, $06, $f1, $22, $dc, $18, $fe, $04, $f1, $27, $ca
1638f     3E D0 25 E2 
16393     27 DC 21 E9 
16397     1C DE 2B E3 
1639b     09 07 F2 17 | 	byte	$3e, $d0, $25, $e2, $27, $dc, $21, $e9, $1c, $de, $2b, $e3, $09, $07, $f2, $17
1639f     F0 1C D9 2D 
163a3     E3 11 FD 09 
163a7     F9 16 DF 2C 
163ab     E0 1C FC 06 | 	byte	$f0, $1c, $d9, $2d, $e3, $11, $fd, $09, $f9, $16, $df, $2c, $e0, $1c, $fc, $06
163af     0A F1 05 04 
163b3     06 F5 18 F6 
163b7     08 FC 10 F1 
163bb     21 E3 15 F9 | 	byte	$0a, $f1, $05, $04, $06, $f5, $18, $f6, $08, $fc, $10, $f1, $21, $e3, $15, $f9
163bf     00 09 FD FF 
163c3     09 ED 1A E8 
163c7     1E E4 21 E1 
163cb     0E FE F1 14 | 	byte	$00, $09, $fd, $ff, $09, $ed, $1a, $e8, $1e, $e4, $21, $e1, $0e, $fe, $f1, $14
163cf     07 E6 25 EA 
163d3     06 09 00 FC 
163d7     05 00 F2 1D 
163db     EE 18 E8 27 | 	byte	$07, $e6, $25, $ea, $06, $09, $00, $fc, $05, $00, $f2, $1d, $ee, $18, $e8, $27
163df     DE 1A EF 17 
163e3     DC 29 E0 10 
163e7     FD FA 10 EF 
163eb     17 EF 12 EF | 	byte	$de, $1a, $ef, $17, $dc, $29, $e0, $10, $fd, $fa, $10, $ef, $17, $ef, $12, $ef
163ef     1A D9 30 DC 
163f3     13 EB 2B C7 
163f7     43 D2 1C EE 
163fb     13 E5 17 E9 | 	byte	$1a, $d9, $30, $dc, $13, $eb, $2b, $c7, $43, $d2, $1c, $ee, $13, $e5, $17, $e9
163ff     18 F0 07 02 
16403     01 F3 13 F8 
16407     04 0D ED 14 
1640b     ED 0A E5 27 | 	byte	$18, $f0, $07, $02, $01, $f3, $13, $f8, $04, $0d, $ed, $14, $ed, $0a, $e5, $27
1640f     DF 0F FB 08 
16413     F7 1C E5 17 
16417     F1 FA 11 EE 
1641b     17 FD F3 20 | 	byte	$df, $0f, $fb, $08, $f7, $1c, $e5, $17, $f1, $fa, $11, $ee, $17, $fd, $f3, $20
1641f     DF 24 DF 20 
16423     ED FC 17 EE 
16427     16 E4 17 E4 
1642b     21 E9 07 06 | 	byte	$df, $24, $df, $20, $ed, $fc, $17, $ee, $16, $e4, $17, $e4, $21, $e9, $07, $06
1642f     FE FA 11 E9 
16433     11 01 F8 09 
16437     01 FD 0D 07 
1643b     ED 15 ED 1B | 	byte	$fe, $fa, $11, $e9, $11, $01, $f8, $09, $01, $fd, $0d, $07, $ed, $15, $ed, $1b
1643f     E1 28 DD 25 
16443     D5 31 DC 1C 
16447     EC 18 E9 18 
1644b     EB 12 FA 05 | 	byte	$e1, $28, $dd, $25, $d5, $31, $dc, $1c, $ec, $18, $e9, $18, $eb, $12, $fa, $05
1644f     07 F5 10 E9 
16453     1B F0 FB 17 
16457     DD 2B D3 28 
1645b     E3 16 F9 FC | 	byte	$07, $f5, $10, $e9, $1b, $f0, $fb, $17, $dd, $2b, $d3, $28, $e3, $16, $f9, $fc
1645f     08 01 00 F9 
16463     13 EF 0F F2 
16467     04 FD 02 03 
1646b     FC 0D EF 1C | 	byte	$08, $01, $00, $f9, $13, $ef, $0f, $f2, $04, $fd, $02, $03, $fc, $0d, $ef, $1c
1646f     E4 21 E5 15 
16473     F0 17 E9 15 
16477     F5 01 0B EF 
1647b     13 F7 00 0A | 	byte	$e4, $21, $e5, $15, $f0, $17, $e9, $15, $f5, $01, $0b, $ef, $13, $f7, $00, $0a
1647f     E5 24 D9 20 
16483     FD F6 08 FA 
16487     0E EE 16 EA 
1648b     1C E8 1E E4 | 	byte	$e5, $24, $d9, $20, $fd, $f6, $08, $fa, $0e, $ee, $16, $ea, $1c, $e8, $1e, $e4
1648f     22 DD 2B CF 
16493     37 CB 2C E4 
16497     11 FB F5 1F 
1649b     D1 30 DC 27 | 	byte	$22, $dd, $2b, $cf, $37, $cb, $2c, $e4, $11, $fb, $f5, $1f, $d1, $30, $dc, $27
1649f     DD 22 E9 06 
164a3     0F E6 1C E8 
164a7     17 F2 04 FE 
164ab     04 FC 09 FF | 	byte	$dd, $22, $e9, $06, $0f, $e6, $1c, $e8, $17, $f2, $04, $fe, $04, $fc, $09, $ff
164af     F7 16 EA 17 
164b3     F1 0A 02 FD 
164b7     01 05 04 F1 
164bb     22 D7 30 D7 | 	byte	$f7, $16, $ea, $17, $f1, $0a, $02, $fd, $01, $05, $04, $f1, $22, $d7, $30, $d7
164bf     22 F0 0F F6 
164c3     12 ED 14 F3 
164c7     07 04 00 F9 
164cb     16 E1 27 DF | 	byte	$22, $f0, $0f, $f6, $12, $ed, $14, $f3, $07, $04, $00, $f9, $16, $e1, $27, $df
164cf     22 E3 0E FE 
164d3     F7 14 EF 15 
164d7     ED 1A F1 FE 
164db     0D F8 FE 08 | 	byte	$22, $e3, $0e, $fe, $f7, $14, $ef, $15, $ed, $1a, $f1, $fe, $0d, $f8, $fe, $08
164df     F2 10 F8 02 
164e3     0D EE 15 F0 
164e7     0D F9 01 02 
164eb     06 00 06 F9 | 	byte	$f2, $10, $f8, $02, $0d, $ee, $15, $f0, $0d, $f9, $01, $02, $06, $00, $06, $f9
164ef     10 F6 15 F3 
164f3     0B FE FD 00 
164f7     03 03 EE 18 
164fb     E9 18 EA 15 | 	byte	$10, $f6, $15, $f3, $0b, $fe, $fd, $00, $03, $03, $ee, $18, $e9, $18, $ea, $15
164ff     F1 09 F8 0E 
16503     F2 08 01 02 
16507     01 03 FC 06 
1650b     FC 02 01 00 | 	byte	$f1, $09, $f8, $0e, $f2, $08, $01, $02, $01, $03, $fc, $06, $fc, $02, $01, $00
1650f     01 FF 00 00 
16513     01 00 FC 06 
16517     F6 12 EB 11 
1651b     F8 05 F9 0A | 	byte	$01, $ff, $00, $00, $01, $00, $fc, $06, $f6, $12, $eb, $11, $f8, $05, $f9, $0a
1651f     F6 07 FC 07 
16523     FA 03 06 FD 
16527     FE 07 FC FC 
1652b     0D F1 0F F2 | 	byte	$f6, $07, $fc, $07, $fa, $03, $06, $fd, $fe, $07, $fc, $fc, $0d, $f1, $0f, $f2
1652f     10 F1 10 F6 
16533     00 06 F8 06 
16537     FD 00 F8 09 
1653b     FC 05 F8 08 | 	byte	$10, $f1, $10, $f6, $00, $06, $f8, $06, $fd, $00, $f8, $09, $fc, $05, $f8, $08
1653f     F8 05 00 FC 
16543     09 F1 12 EB 
16547     15 F3 04 04 
1654b     F9 13 E9 18 | 	byte	$f8, $05, $00, $fc, $09, $f1, $12, $eb, $15, $f3, $04, $04, $f9, $13, $e9, $18
1654f     ED 0F F8 07 
16553     FC 07 FF F8 
16557     0D F9 04 FF 
1655b     04 F7 0F F6 | 	byte	$ed, $0f, $f8, $07, $fc, $07, $ff, $f8, $0d, $f9, $04, $ff, $04, $f7, $0f, $f6
1655f     05 FF 03 01 
16563     00 FE 04 FE 
16567     01 FD 05 FF 
1656b     00 04 F9 10 | 	byte	$05, $ff, $03, $01, $00, $fe, $04, $fe, $01, $fd, $05, $ff, $00, $04, $f9, $10
1656f     F1 0E F2 15 
16573     EA 13 ED 13 
16577     ED 0B F6 0D 
1657b     EF 0E F3 0E | 	byte	$f1, $0e, $f2, $15, $ea, $13, $ed, $13, $ed, $0b, $f6, $0d, $ef, $0e, $f3, $0e
1657f     EF 03 03 FA 
16583     06 FC 01 00 
16587     03 F8 09 FB 
1658b     04 F2 15 EF | 	byte	$ef, $03, $03, $fa, $06, $fc, $01, $00, $03, $f8, $09, $fb, $04, $f2, $15, $ef
1658f     0B F9 02 07 
16593     F3 11 F2 0A 
16597     FF F8 09 F9 
1659b     FF 0A F5 09 | 	byte	$0b, $f9, $02, $07, $f3, $11, $f2, $0a, $ff, $f8, $09, $f9, $ff, $0a, $f5, $09
1659f     F1 12 EC 0E 
165a3     FC 05 F5 0D 
165a7     F8 FF 02 01 
165ab     FF FD 0E EF | 	byte	$f1, $12, $ec, $0e, $fc, $05, $f5, $0d, $f8, $ff, $02, $01, $ff, $fd, $0e, $ef
165af     0F F3 08 FC 
165b3     02 FF 00 01 
165b7     03 FA 03 01 
165bb     07 F6 0D F9 | 	byte	$0f, $f3, $08, $fc, $02, $ff, $00, $01, $03, $fa, $03, $01, $07, $f6, $0d, $f9
165bf     04 FF 03 FB 
165c3     06 FA FC 03 
165c7     FD 09 FB 05 
165cb     FB 07 FA 06 | 	byte	$04, $ff, $03, $fb, $06, $fa, $fc, $03, $fd, $09, $fb, $05, $fb, $07, $fa, $06
165cf     06 F5 11 EF 
165d3     11 EF 14 EE 
165d7     12 F5 09 FD 
165db     FC 00 0D F1 | 	byte	$06, $f5, $11, $ef, $11, $ef, $14, $ee, $12, $f5, $09, $fd, $fc, $00, $0d, $f1
165df     13 EE 11 F1 
165e3     13 F1 0B F5 
165e7     0D EB 18 E0 
165eb     16 F0 03 01 | 	byte	$13, $ee, $11, $f1, $13, $f1, $0b, $f5, $0d, $eb, $18, $e0, $16, $f0, $03, $01
165ef     FA 0A F6 07 
165f3     F7 0A F8 06 
165f7     02 FD 05 FC 
165fb     04 FC 05 FC | 	byte	$fa, $0a, $f6, $07, $f7, $0a, $f8, $06, $02, $fd, $05, $fc, $04, $fc, $05, $fc
165ff     04 FE FF 03 
16603     FC 07 F5 0E 
16607     F3 09 FB 02 
1660b     01 03 FC 08 | 	byte	$04, $fe, $ff, $03, $fc, $07, $f5, $0e, $f3, $09, $fb, $02, $01, $03, $fc, $08
1660f     F9 08 FD FD 
16613     09 FA 06 FC 
16617     00 03 01 FE 
1661b     07 FD 01 0A | 	byte	$f9, $08, $fd, $fd, $09, $fa, $06, $fc, $00, $03, $01, $fe, $07, $fd, $01, $0a
1661f     F5 06 FF 04 
16623     FD 03 FE 06 
16627     F8 0D FB 05 
1662b     01 00 FC 0F | 	byte	$f5, $06, $ff, $04, $fd, $03, $fe, $06, $f8, $0d, $fb, $05, $01, $00, $fc, $0f
1662f     F2 0D F8 11 
16633     EF 14 EF 0E 
16637     EE 16 EF 02 
1663b     06 F8 0A F6 | 	byte	$f2, $0d, $f8, $11, $ef, $14, $ef, $0e, $ee, $16, $ef, $02, $06, $f8, $0a, $f6
1663f     06 FA 0E F1 
16643     09 FE 01 04 
16647     F7 0A F9 03 
1664b     FF FF 09 F3 | 	byte	$06, $fa, $0e, $f1, $09, $fe, $01, $04, $f7, $0a, $f9, $03, $ff, $ff, $09, $f3
1664f     0E F5 0A F7 
16653     05 FC 03 FA 
16657     0A F8 05 FD 
1665b     0B F5 0B F7 | 	byte	$0e, $f5, $0a, $f7, $05, $fc, $03, $fa, $0a, $f8, $05, $fd, $0b, $f5, $0b, $f7
1665f     08 F9 06 00 
16663     FC 07 F8 08 
16667     F7 10 EA 1A 
1666b     EC 14 F5 07 | 	byte	$08, $f9, $06, $00, $fc, $07, $f8, $08, $f7, $10, $ea, $1a, $ec, $14, $f5, $07
1666f     FD FD 03 FF 
16673     03 FB 0B F6 
16677     08 F8 09 FA 
1667b     04 FD 08 F5 | 	byte	$fd, $fd, $03, $ff, $03, $fb, $0b, $f6, $08, $f8, $09, $fa, $04, $fd, $08, $f5
1667f     0D F6 0B F8 
16683     07 F7 0A FA 
16687     04 FF 03 02 
1668b     FB 07 F7 08 | 	byte	$0d, $f6, $0b, $f8, $07, $f7, $0a, $fa, $04, $ff, $03, $02, $fb, $07, $f7, $08
1668f     FB 04 FD 02 
16693     01 FD 07 FB 
16697     05 01 FF 03 
1669b     F9 09 FB 01 | 	byte	$fb, $04, $fd, $02, $01, $fd, $07, $fb, $05, $01, $ff, $03, $f9, $09, $fb, $01
1669f     04 F9 08 F9 
166a3     02 02 FB 05 
166a7     FA 05 FF FF 
166ab     FF 08 F7 03 | 	byte	$04, $f9, $08, $f9, $02, $02, $fb, $05, $fa, $05, $ff, $ff, $ff, $08, $f7, $03
166af     01 00 05 F6 
166b3     0E EF 11 F0 
166b7     0B F9 01 02 
166bb     FD 04 FE 02 | 	byte	$01, $00, $05, $f6, $0e, $ef, $11, $f0, $0b, $f9, $01, $02, $fd, $04, $fe, $02
166bf     FA 0F F1 0B 
166c3     F9 08 F9 04 
166c7     FE FF 02 02 
166cb     FC 06 FC 03 | 	byte	$fa, $0f, $f1, $0b, $f9, $08, $f9, $04, $fe, $ff, $02, $02, $fc, $06, $fc, $03
166cf     FE 02 FE 03 
166d3     FB 04 FD 00 
166d7     05 F7 08 F9 
166db     0A F9 FF 04 | 	byte	$fe, $02, $fe, $03, $fb, $04, $fd, $00, $05, $f7, $08, $f9, $0a, $f9, $ff, $04
166df     FE 01 03 FF 
166e3     02 FE 04 FF 
166e7     04 FF 07 01 
166eb     01 00 07 FB | 	byte	$fe, $01, $03, $ff, $02, $fe, $04, $ff, $04, $ff, $07, $01, $01, $00, $07, $fb
166ef     04 01 01 01 
166f3     01 04 FF 02 
166f7     04 FC 04 02 
166fb     FB 08 FE 03 | 	byte	$04, $01, $01, $01, $01, $04, $ff, $02, $04, $fc, $04, $02, $fb, $08, $fe, $03
166ff     FD 0A F9 07 
16703     FD 04 FB 03 
16707     01 02 02 01 
1670b     00 FF 08 F7 | 	byte	$fd, $0a, $f9, $07, $fd, $04, $fb, $03, $01, $02, $02, $01, $00, $ff, $08, $f7
1670f     09 FA 09 F9 
16713     08 F7 0E F5 
16717     09 FC 03 FD 
1671b     08 FC 09 F8 | 	byte	$09, $fa, $09, $f9, $08, $f7, $0e, $f5, $09, $fc, $03, $fd, $08, $fc, $09, $f8
1671f     0B FA 04 01 
16723     02 03 FC 09 
16727     F9 09 FA 0D 
1672b     F8 0D F6 0D | 	byte	$0b, $fa, $04, $01, $02, $03, $fc, $09, $f9, $09, $fa, $0d, $f8, $0d, $f6, $0d
1672f     F9 09 FA 07 
16733     FF 02 00 03 
16737     01 06 FC 0B 
1673b     F9 0A F6 12 | 	byte	$f9, $09, $fa, $07, $ff, $02, $00, $03, $01, $06, $fc, $0b, $f9, $0a, $f6, $12
1673f     F6 09 FD 07 
16743     FF FF 07 FD 
16747     05 FF 05 FF 
1674b     01 05 FA 07 | 	byte	$f6, $09, $fd, $07, $ff, $ff, $07, $fd, $05, $ff, $05, $ff, $01, $05, $fa, $07
1674f     FC 01 02 FF 
16753     00 FD 04 FC 
16757     01 02 03 FC 
1675b     FD 05 FF 02 | 	byte	$fc, $01, $02, $ff, $00, $fd, $04, $fc, $01, $02, $03, $fc, $fd, $05, $ff, $02
1675f     FD 06 F8 09 
16763     F5 08 FD 00 
16767     01 01 00 02 
1676b     FE 02 00 02 | 	byte	$fd, $06, $f8, $09, $f5, $08, $fd, $00, $01, $01, $00, $02, $fe, $02, $00, $02
1676f     FA 0A FC 00 
16773     FC 03 FE 02 
16777     FF FE 08 F7 
1677b     0D F7 06 FA | 	byte	$fa, $0a, $fc, $00, $fc, $03, $fe, $02, $ff, $fe, $08, $f7, $0d, $f7, $06, $fa
1677f     09 F9 04 FA 
16783     09 F6 0A F9 
16787     05 FD 04 FA 
1678b     0A FC 01 FF | 	byte	$09, $f9, $04, $fa, $09, $f6, $0a, $f9, $05, $fd, $04, $fa, $0a, $fc, $01, $ff
1678f     08 F9 06 FD 
16793     03 FE 04 02 
16797     00 00 02 01 
1679b     00 03 FE 07 | 	byte	$08, $f9, $06, $fd, $03, $fe, $04, $02, $00, $00, $02, $01, $00, $03, $fe, $07
1679f     FF FC 08 F8 
167a3     06 FD 01 FD 
167a7     03 FF 05 F7 
167ab     11 F2 0A F9 | 	byte	$ff, $fc, $08, $f8, $06, $fd, $01, $fd, $03, $ff, $05, $f7, $11, $f2, $0a, $f9
167af     0A F8 04 FC 
167b3     03 FE 03 FF 
167b7     FF 01 00 00 
167bb     FF 02 01 FD | 	byte	$0a, $f8, $04, $fc, $03, $fe, $03, $ff, $ff, $01, $00, $00, $ff, $02, $01, $fd
167bf     04 00 FC 07 
167c3     F8 08 FC 06 
167c7     F7 09 F7 09 
167cb     FB 01 FE 06 | 	byte	$04, $00, $fc, $07, $f8, $08, $fc, $06, $f7, $09, $f7, $09, $fb, $01, $fe, $06
167cf     F8 0B F8 04 
167d3     02 FF 01 03 
167d7     FB 07 F9 04 
167db     01 00 02 03 | 	byte	$f8, $0b, $f8, $04, $02, $ff, $01, $03, $fb, $07, $f9, $04, $01, $00, $02, $03
167df     FA 07 FC 02 
167e3     FD 05 FD 01 
167e7     01 00 00 02 
167eb     02 FD 04 FE | 	byte	$fa, $07, $fc, $02, $fd, $05, $fd, $01, $01, $00, $00, $02, $02, $fd, $04, $fe
167ef     03 00 FF 02 
167f3     00 03 FC 0A 
167f7     FA 0A F7 07 
167fb     FD 01 FF 01 | 	byte	$03, $00, $ff, $02, $00, $03, $fc, $0a, $fa, $0a, $f7, $07, $fd, $01, $ff, $01
167ff     00 FE 01 FD 
16803     03 FF 01 FF 
16807     FF 03 F9 0A 
1680b     F7 04 01 FE | 	byte	$00, $fe, $01, $fd, $03, $ff, $01, $ff, $ff, $03, $f9, $0a, $f7, $04, $01, $fe
1680f     FF 02 00 01 
16813     00 00 01 00 
16817     FF 02 FC 06 
1681b     FB 03 FC 08 | 	byte	$ff, $02, $00, $01, $00, $00, $01, $00, $ff, $02, $fc, $06, $fb, $03, $fc, $08
1681f     F9 05 FF FF 
16823     05 FC 03 FE 
16827     06 FB 07 FD 
1682b     04 FF 02 FF | 	byte	$f9, $05, $ff, $ff, $05, $fc, $03, $fe, $06, $fb, $07, $fd, $04, $ff, $02, $ff
1682f     01 01 00 FD 
16833     02 01 FD 03 
16837     FE 04 FB 06 
1683b     FB 05 FD 03 | 	byte	$01, $01, $00, $fd, $02, $01, $fd, $03, $fe, $04, $fb, $06, $fb, $05, $fd, $03
1683f     01 FD 03 FB 
16843     06 FC 01 FD 
16847     07 F7 07 F7 
1684b     0A F9 07 FD | 	byte	$01, $fd, $03, $fb, $06, $fc, $01, $fd, $07, $f7, $07, $f7, $0a, $f9, $07, $fd
1684f     03 FF 03 FD 
16853     01 01 00 00 
16857     03 FD 01 01 
1685b     00 FE 04 FF | 	byte	$03, $ff, $03, $fd, $01, $01, $00, $00, $03, $fd, $01, $01, $00, $fe, $04, $ff
1685f     00 01 FD 05 
16863     F9 06 FC 04 
16867     FB 01 02 01 
1686b     02 FB 05 FC | 	byte	$00, $01, $fd, $05, $f9, $06, $fc, $04, $fb, $01, $02, $01, $02, $fb, $05, $fc
1686f     04 FE FF 00 
16873     02 FD 04 FE 
16877     02 FF 00 01 
1687b     02 FD 02 FE | 	byte	$04, $fe, $ff, $00, $02, $fd, $04, $fe, $02, $ff, $00, $01, $02, $fd, $02, $fe
1687f     03 00 02 FF 
16883     06 F9 07 FF 
16887     FC 07 FF 02 
1688b     FD 05 FC 03 | 	byte	$03, $00, $02, $ff, $06, $f9, $07, $ff, $fc, $07, $ff, $02, $fd, $05, $fc, $03
1688f     FF 03 FD 03 
16893     FD 04 FD 04 
16897     FB 04 FB 05 
1689b     FB 06 F9 05 | 	byte	$ff, $03, $fd, $03, $fd, $04, $fd, $04, $fb, $04, $fb, $05, $fb, $06, $f9, $05
1689f     FF 03 FC 03 
168a3     01 FE 06 FA 
168a7     04 01 03 FD 
168ab     02 00 FF 01 | 	byte	$ff, $03, $fc, $03, $01, $fe, $06, $fa, $04, $01, $03, $fd, $02, $00, $ff, $01
168af     01 01 03 00 
168b3     FE 02 02 00 
168b7     02 00 04 FF 
168bb     04 01 FF 02 | 	byte	$01, $01, $03, $00, $fe, $02, $02, $00, $02, $00, $04, $ff, $04, $01, $ff, $02
168bf     02 FE FF 06 
168c3     FD 03 03 FC 
168c7     06 FE 08 FC 
168cb     05 00 00 00 | 	byte	$02, $fe, $ff, $06, $fd, $03, $03, $fc, $06, $fe, $08, $fc, $05, $00, $00, $00
168cf     00 00 00 00 
168d3     00 00 00 00 
168d7     00 00 00 00 
168db     00 00 00 00 
168df     00          | 	byte	$00[17]
168e0     D3 CA D2 D6 
168e4     E3 2D 3B 32 
168e8     2E 2A 25 21 
168ec     1F 1D 18 02 | 	byte	$d3, $ca, $d2, $d6, $e3, $2d, $3b, $32, $2e, $2a, $25, $21, $1f, $1d, $18, $02
168f0     BD BA C5 C8 
168f4     CE D2 D7 DA 
168f8     E2 DC E7 E7 
168fc     E8 EF F3 FC | 	byte	$bd, $ba, $c5, $c8, $ce, $d2, $d7, $da, $e2, $dc, $e7, $e7, $e8, $ef, $f3, $fc
16900     4E 5B 3A 28 
16904     3B 3A 2E 20 
16908     1D 21 36 29 
1690c     1C 1A 12 DB | 	byte	$4e, $5b, $3a, $28, $3b, $3a, $2e, $20, $1d, $21, $36, $29, $1c, $1a, $12, $db
16910     A0 A4 AE B6 
16914     BE C5 D8 DF 
16918     E3 F3 0A 07 
1691c     05 04 04 24 | 	byte	$a0, $a4, $ae, $b6, $be, $c5, $d8, $df, $e3, $f3, $0a, $07, $05, $04, $04, $24
16920     57 55 4A 42 
16924     3C 33 21 1A 
16928     17 06 EF F2 
1692c     F5 F6 F7 D5 | 	byte	$57, $55, $4a, $42, $3c, $33, $21, $1a, $17, $06, $ef, $f2, $f5, $f6, $f7, $d5
16930     A8 A9 B4 BC 
16934     C3 CB DF E6 
16938     E9 FD 12 0F 
1693c     0D 0B 0B 2B | 	byte	$a8, $a9, $b4, $bc, $c3, $cb, $df, $e6, $e9, $fd, $12, $0f, $0d, $0b, $0b, $2b
16940     59 56 4C 44 
16944     3D 34 1F 19 
16948     16 01 EB EE 
1694c     F1 F3 F2 CF | 	byte	$59, $56, $4c, $44, $3d, $34, $1f, $19, $16, $01, $eb, $ee, $f1, $f3, $f2, $cf
16950     A6 A9 B5 BC 
16954     C3 CF E2 E8 
16958     EC 05 18 14 
1695c     11 0F 10 36 | 	byte	$a6, $a9, $b5, $bc, $c3, $cf, $e2, $e8, $ec, $05, $18, $14, $11, $0f, $10, $36
16960     5A 57 4C 44 
16964     3D 32 1D 17 
16968     13 F7 E5 E9 
1696c     ED EF ED C7 | 	byte	$5a, $57, $4c, $44, $3d, $32, $1d, $17, $13, $f7, $e5, $e9, $ed, $ef, $ed, $c7
16970     A7 AA B4 BC 
16974     C3 D1 E5 EA 
16978     EF 0C 1D 19 
1697c     16 13 17 38 | 	byte	$a7, $aa, $b4, $bc, $c3, $d1, $e5, $ea, $ef, $0c, $1d, $19, $16, $13, $17, $38
16980     5A 57 4D 45 
16984     3D 2E 1B 16 
16988     10 F2 E1 E5 
1698c     E9 EC E7 C5 | 	byte	$5a, $57, $4d, $45, $3d, $2e, $1b, $16, $10, $f2, $e1, $e5, $e9, $ec, $e7, $c5
16990     A7 AA B4 BD 
16994     C5 D5 E7 EC 
16998     F4 11 22 1D 
1699c     19 16 1D 3F | 	byte	$a7, $aa, $b4, $bd, $c5, $d5, $e7, $ec, $f4, $11, $22, $1d, $19, $16, $1d, $3f
169a0     59 57 4D 44 
169a4     3B 2A 18 14 
169a8     0B EC DC E1 
169ac     E5 E8 DF C2 | 	byte	$59, $57, $4d, $44, $3b, $2a, $18, $14, $0b, $ec, $dc, $e1, $e5, $e8, $df, $c2
169b0     A7 A9 B4 BC 
169b4     C6 D8 E8 ED 
169b8     F8 16 25 21 
169bc     1D 19 22 42 | 	byte	$a7, $a9, $b4, $bc, $c6, $d8, $e8, $ed, $f8, $16, $25, $21, $1d, $19, $22, $42
169c0     59 57 4C 44 
169c4     39 26 16 12 
169c8     03 E7 D7 DC 
169cc     E1 E4 D9 BC | 	byte	$59, $57, $4c, $44, $39, $26, $16, $12, $03, $e7, $d7, $dc, $e1, $e4, $d9, $bc
169d0     A6 A9 B4 BC 
169d4     C8 DA EA EF 
169d8     FD 1A 29 25 
169dc     20 1D 2A 44 | 	byte	$a6, $a9, $b4, $bc, $c8, $da, $ea, $ef, $fd, $1a, $29, $25, $20, $1d, $2a, $44
169e0     59 57 4C 43 
169e4     36 23 14 10 
169e8     FF E4 D4 D8 
169ec     DD E0 D4 B9 | 	byte	$59, $57, $4c, $43, $36, $23, $14, $10, $ff, $e4, $d4, $d8, $dd, $e0, $d4, $b9
169f0     A7 AA B3 BD 
169f4     CB DD EC F0 
169f8     02 1D 2C 28 
169fc     23 21 2E 46 | 	byte	$a7, $aa, $b3, $bd, $cb, $dd, $ec, $f0, $02, $1d, $2c, $28, $23, $21, $2e, $46
16a00     59 56 4C 43 
16a04     35 21 13 0E 
16a08     FC E0 D2 D5 
16a0c     DA DD D0 B8 | 	byte	$59, $56, $4c, $43, $35, $21, $13, $0e, $fc, $e0, $d2, $d5, $da, $dd, $d0, $b8
16a10     A7 AA B4 BE 
16a14     CD E1 ED F3 
16a18     04 1E 2E 2C 
16a1c     26 25 33 4A | 	byte	$a7, $aa, $b4, $be, $cd, $e1, $ed, $f3, $04, $1e, $2e, $2c, $26, $25, $33, $4a
16a20     58 56 4C 42 
16a24     30 1F 11 0C 
16a28     F9 DE D0 D1 
16a2c     D8 D8 CA B7 | 	byte	$58, $56, $4c, $42, $30, $1f, $11, $0c, $f9, $de, $d0, $d1, $d8, $d8, $ca, $b7
16a30     A8 AB B4 C0 
16a34     D0 E2 EF F5 
16a38     09 20 30 2F 
16a3c     29 29 38 4B | 	byte	$a8, $ab, $b4, $c0, $d0, $e2, $ef, $f5, $09, $20, $30, $2f, $29, $29, $38, $4b
16a40     58 56 4B 40 
16a44     2E 1C 11 09 
16a48     F4 DE CD CE 
16a4c     D5 D4 C6 B4 | 	byte	$58, $56, $4b, $40, $2e, $1c, $11, $09, $f4, $de, $cd, $ce, $d5, $d4, $c6, $b4
16a50     A9 AB B5 C1 
16a54     D1 E4 EF F7 
16a58     0A 23 31 32 
16a5c     2C 2D 3C 4C | 	byte	$a9, $ab, $b5, $c1, $d1, $e4, $ef, $f7, $0a, $23, $31, $32, $2c, $2d, $3c, $4c
16a60     57 55 4C 3E 
16a64     2D 1B 0F 08 
16a68     F5 DD CC CC 
16a6c     D3 D0 C3 B3 | 	byte	$57, $55, $4c, $3e, $2d, $1b, $0f, $08, $f5, $dd, $cc, $cc, $d3, $d0, $c3, $b3
16a70     A9 AB B6 C3 
16a74     D6 E5 EF F9 
16a78     0C 23 33 34 
16a7c     2E 31 3E 4E | 	byte	$a9, $ab, $b6, $c3, $d6, $e5, $ef, $f9, $0c, $23, $33, $34, $2e, $31, $3e, $4e
16a80     57 55 4B 3C 
16a84     2A 1A 10 06 
16a88     F3 DB CC CA 
16a8c     CF CC BF B2 | 	byte	$57, $55, $4b, $3c, $2a, $1a, $10, $06, $f3, $db, $cc, $ca, $cf, $cc, $bf, $b2
16a90     A9 AB B7 C5 
16a94     D6 E7 F0 FB 
16a98     0E 25 33 36 
16a9c     31 35 40 4E | 	byte	$a9, $ab, $b7, $c5, $d6, $e7, $f0, $fb, $0e, $25, $33, $36, $31, $35, $40, $4e
16aa0     55 54 49 3A 
16aa4     28 19 0E 04 
16aa8     F1 DB CC C8 
16aac     CC C8 BD B1 | 	byte	$55, $54, $49, $3a, $28, $19, $0e, $04, $f1, $db, $cc, $c8, $cc, $c8, $bd, $b1
16ab0     AA AC B7 C8 
16ab4     D7 E7 F2 FC 
16ab8     10 24 33 38 
16abc     34 39 43 4F | 	byte	$aa, $ac, $b7, $c8, $d7, $e7, $f2, $fc, $10, $24, $33, $38, $34, $39, $43, $4f
16ac0     55 54 49 39 
16ac4     27 18 0E 02 
16ac8     F1 DB CB C7 
16acc     C9 C4 BB B0 | 	byte	$55, $54, $49, $39, $27, $18, $0e, $02, $f1, $db, $cb, $c7, $c9, $c4, $bb, $b0
16ad0     AB AD B8 C8 
16ad4     DA E7 F2 FF 
16ad8     10 25 33 39 
16adc     38 3C 46 4F | 	byte	$ab, $ad, $b8, $c8, $da, $e7, $f2, $ff, $10, $25, $33, $39, $38, $3c, $46, $4f
16ae0     55 53 48 36 
16ae4     25 18 0D 01 
16ae8     EE DA CC C6 
16aec     C6 C1 B8 B0 | 	byte	$55, $53, $48, $36, $25, $18, $0d, $01, $ee, $da, $cc, $c6, $c6, $c1, $b8, $b0
16af0     AB AE BA CB 
16af4     DA E8 F3 00 
16af8     13 25 34 3B 
16afc     3B 40 48 50 | 	byte	$ab, $ae, $ba, $cb, $da, $e8, $f3, $00, $13, $25, $34, $3b, $3b, $40, $48, $50
16b00     55 52 45 35 
16b04     25 17 0C FE 
16b08     EE DB CB C5 
16b0c     C2 BF B7 B0 | 	byte	$55, $52, $45, $35, $25, $17, $0c, $fe, $ee, $db, $cb, $c5, $c2, $bf, $b7, $b0
16b10     AC AE BB CB 
16b14     DB E9 F3 01 
16b18     12 25 34 3B 
16b1c     3E 42 49 51 | 	byte	$ac, $ae, $bb, $cb, $db, $e9, $f3, $01, $12, $25, $34, $3b, $3e, $42, $49, $51
16b20     54 51 43 34 
16b24     24 17 0B FC 
16b28     ED DA CB C4 
16b2c     C0 BC B5 AF | 	byte	$54, $51, $43, $34, $24, $17, $0b, $fc, $ed, $da, $cb, $c4, $c0, $bc, $b5, $af
16b30     AC B0 BC CD 
16b34     DC E9 F4 03 
16b38     14 25 34 3C 
16b3c     41 45 4B 51 | 	byte	$ac, $b0, $bc, $cd, $dc, $e9, $f4, $03, $14, $25, $34, $3c, $41, $45, $4b, $51
16b40     54 50 44 34 
16b44     23 17 0B FC 
16b48     EB DB CD C4 
16b4c     BE BA B4 AF | 	byte	$54, $50, $44, $34, $23, $17, $0b, $fc, $eb, $db, $cd, $c4, $be, $ba, $b4, $af
16b50     AD B1 BE CD 
16b54     DD EA F5 05 
16b58     16 25 33 3D 
16b5c     43 47 4C 51 | 	byte	$ad, $b1, $be, $cd, $dd, $ea, $f5, $05, $16, $25, $33, $3d, $43, $47, $4c, $51
16b60     53 4F 42 32 
16b64     23 16 0B FB 
16b68     EC DB CC C3 
16b6c     BC B8 B4 AF | 	byte	$53, $4f, $42, $32, $23, $16, $0b, $fb, $ec, $db, $cc, $c3, $bc, $b8, $b4, $af
16b70     AD B2 BF CE 
16b74     DE EA F7 05 
16b78     16 26 33 3E 
16b7c     45 49 4D 51 | 	byte	$ad, $b2, $bf, $ce, $de, $ea, $f7, $05, $16, $26, $33, $3e, $45, $49, $4d, $51
16b80     52 4D 40 31 
16b84     22 15 09 F9 
16b88     EA D9 CC C2 
16b8c     BA B6 B2 AF | 	byte	$52, $4d, $40, $31, $22, $15, $09, $f9, $ea, $d9, $cc, $c2, $ba, $b6, $b2, $af
16b90     AE B4 BF CF 
16b94     DE EA F8 07 
16b98     17 27 33 3E 
16b9c     47 4A 4E 51 | 	byte	$ae, $b4, $bf, $cf, $de, $ea, $f8, $07, $17, $27, $33, $3e, $47, $4a, $4e, $51
16ba0     51 4C 40 31 
16ba4     22 15 07 F8 
16ba8     E7 DA CD C1 
16bac     B9 B4 B2 AF | 	byte	$51, $4c, $40, $31, $22, $15, $07, $f8, $e7, $da, $cd, $c1, $b9, $b4, $b2, $af
16bb0     AF B5 C0 CF 
16bb4     DE EB F9 09 
16bb8     18 27 34 3E 
16bbc     47 4C 4F 51 | 	byte	$af, $b5, $c0, $cf, $de, $eb, $f9, $09, $18, $27, $34, $3e, $47, $4c, $4f, $51
16bc0     50 4A 3F 30 
16bc4     21 16 07 F7 
16bc8     E7 D9 CD C1 
16bcc     B8 B4 B1 B0 | 	byte	$50, $4a, $3f, $30, $21, $16, $07, $f7, $e7, $d9, $cd, $c1, $b8, $b4, $b1, $b0
16bd0     B0 B7 C2 D1 
16bd4     DE EB FB 0A 
16bd8     1A 28 33 3F 
16bdc     48 4D 4F 50 | 	byte	$b0, $b7, $c2, $d1, $de, $eb, $fb, $0a, $1a, $28, $33, $3f, $48, $4d, $4f, $50
16be0     4F 49 3D 2E 
16be4     21 14 06 F5 
16be8     E6 D8 CB C1 
16bec     B7 B3 B1 B0 | 	byte	$4f, $49, $3d, $2e, $21, $14, $06, $f5, $e6, $d8, $cb, $c1, $b7, $b3, $b1, $b0
16bf0     B1 B8 C3 D1 
16bf4     DE EC FC 0C 
16bf8     1B 29 35 40 
16bfc     49 4D 4F 50 | 	byte	$b1, $b8, $c3, $d1, $de, $ec, $fc, $0c, $1b, $29, $35, $40, $49, $4d, $4f, $50
16c00     4E 47 3D 2E 
16c04     21 13 04 F3 
16c08     E3 D7 CB BF 
16c0c     B7 B2 B1 B0 | 	byte	$4e, $47, $3d, $2e, $21, $13, $04, $f3, $e3, $d7, $cb, $bf, $b7, $b2, $b1, $b0
16c10     B3 B9 C3 D2 
16c14     DF EC FD 0D 
16c18     1D 29 35 41 
16c1c     49 4E 4F 50 | 	byte	$b3, $b9, $c3, $d2, $df, $ec, $fd, $0d, $1d, $29, $35, $41, $49, $4e, $4f, $50
16c20     4D 47 3B 2F 
16c24     21 13 02 F2 
16c28     E3 D6 CA BF 
16c2c     B6 B2 B2 B1 | 	byte	$4d, $47, $3b, $2f, $21, $13, $02, $f2, $e3, $d6, $ca, $bf, $b6, $b2, $b2, $b1
16c30     B4 BA C5 D2 
16c34     E0 ED FE 10 
16c38     1E 2A 37 41 
16c3c     4A 4E 4E 4E | 	byte	$b4, $ba, $c5, $d2, $e0, $ed, $fe, $10, $1e, $2a, $37, $41, $4a, $4e, $4e, $4e
16c40     4C 46 3B 2D 
16c44     20 12 01 F0 
16c48     E1 D5 C9 BE 
16c4c     B6 B2 B1 B2 | 	byte	$4c, $46, $3b, $2d, $20, $12, $01, $f0, $e1, $d5, $c9, $be, $b6, $b2, $b1, $b2
16c50     B5 BC C6 D2 
16c54     E0 EE 00 10 
16c58     20 2B 37 42 
16c5c     4A 4D 4E 4D | 	byte	$b5, $bc, $c6, $d2, $e0, $ee, $00, $10, $20, $2b, $37, $42, $4a, $4d, $4e, $4d
16c60     4A 43 3A 2C 
16c64     1F 11 FE EF 
16c68     DF D3 C8 BD 
16c6c     B6 B2 B2 B3 | 	byte	$4a, $43, $3a, $2c, $1f, $11, $fe, $ef, $df, $d3, $c8, $bd, $b6, $b2, $b2, $b3
16c70     B6 BC C6 D4 
16c74     E1 F1 01 12 
16c78     21 2D 39 42 
16c7c     4A 4E 4E 4C | 	byte	$b6, $bc, $c6, $d4, $e1, $f1, $01, $12, $21, $2d, $39, $42, $4a, $4e, $4e, $4c
16c80     49 43 38 2C 
16c84     1E 0F FE ED 
16c88     DE D2 C6 BC 
16c8c     B5 B3 B3 B4 | 	byte	$49, $43, $38, $2c, $1e, $0f, $fe, $ed, $de, $d2, $c6, $bc, $b5, $b3, $b3, $b4
16c90     B7 BE C9 D5 
16c94     E2 F1 04 13 
16c98     23 2E 39 44 
16c9c     4A 4D 4D 4B | 	byte	$b7, $be, $c9, $d5, $e2, $f1, $04, $13, $23, $2e, $39, $44, $4a, $4d, $4d, $4b
16ca0     48 41 37 2C 
16ca4     1E 0D FC EB 
16ca8     DE D0 C6 BD 
16cac     B5 B3 B3 B5 | 	byte	$48, $41, $37, $2c, $1e, $0d, $fc, $eb, $de, $d0, $c6, $bd, $b5, $b3, $b3, $b5
16cb0     B9 C0 C8 D5 
16cb4     E4 F3 05 15 
16cb8     24 30 3B 44 
16cbc     4A 4D 4C 4B | 	byte	$b9, $c0, $c8, $d5, $e4, $f3, $05, $15, $24, $30, $3b, $44, $4a, $4d, $4c, $4b
16cc0     47 3F 36 2A 
16cc4     1C 0B FB EA 
16cc8     DB CF C4 BB 
16ccc     B6 B3 B4 B6 | 	byte	$47, $3f, $36, $2a, $1c, $0b, $fb, $ea, $db, $cf, $c4, $bb, $b6, $b3, $b4, $b6
16cd0     BA C2 CA D6 
16cd4     E6 F5 07 16 
16cd8     25 32 3C 44 
16cdc     4A 4C 4B 49 | 	byte	$ba, $c2, $ca, $d6, $e6, $f5, $07, $16, $25, $32, $3c, $44, $4a, $4c, $4b, $49
16ce0     45 3E 35 29 
16ce4     1A 09 F9 E9 
16ce8     DA CE C3 BB 
16cec     B6 B4 B6 B8 | 	byte	$45, $3e, $35, $29, $1a, $09, $f9, $e9, $da, $ce, $c3, $bb, $b6, $b4, $b6, $b8
16cf0     BB C2 CC D7 
16cf4     E6 F8 08 18 
16cf8     26 32 3D 44 
16cfc     4A 4C 4B 48 | 	byte	$bb, $c2, $cc, $d7, $e6, $f8, $08, $18, $26, $32, $3d, $44, $4a, $4c, $4b, $48
16d00     44 3D 34 28 
16d04     19 08 F7 E7 
16d08     D9 CD C3 BB 
16d0c     B7 B5 B7 B9 | 	byte	$44, $3d, $34, $28, $19, $08, $f7, $e7, $d9, $cd, $c3, $bb, $b7, $b5, $b7, $b9
16d10     BE C4 CD DA 
16d14     E9 F9 0A 19 
16d18     27 34 3E 45 
16d1c     49 4B 49 46 | 	byte	$be, $c4, $cd, $da, $e9, $f9, $0a, $19, $27, $34, $3e, $45, $49, $4b, $49, $46
16d20     43 3C 32 27 
16d24     16 07 F5 E6 
16d28     D9 CC C3 BC 
16d2c     B7 B6 B8 BB | 	byte	$43, $3c, $32, $27, $16, $07, $f5, $e6, $d9, $cc, $c3, $bc, $b7, $b6, $b8, $bb
16d30     BF C6 CE DA 
16d34     EB FB 0C 1A 
16d38     29 34 3E 44 
16d3c     48 49 47 44 | 	byte	$bf, $c6, $ce, $da, $eb, $fb, $0c, $1a, $29, $34, $3e, $44, $48, $49, $47, $44
16d40     40 39 30 24 
16d44     14 04 F3 E4 
16d48     D7 CA C2 BB 
16d4c     B8 B7 B9 BC | 	byte	$40, $39, $30, $24, $14, $04, $f3, $e4, $d7, $ca, $c2, $bb, $b8, $b7, $b9, $bc
16d50     C0 C8 D0 DE 
16d54     EC FD 0E 1C 
16d58     2A 36 3E 45 
16d5c     48 48 46 43 | 	byte	$c0, $c8, $d0, $de, $ec, $fd, $0e, $1c, $2a, $36, $3e, $45, $48, $48, $46, $43
16d60     3F 38 2F 20 
16d64     11 00 F2 E3 
16d68     D6 CA C1 BC 
16d6c     B8 B8 BA BE | 	byte	$3f, $38, $2f, $20, $11, $00, $f2, $e3, $d6, $ca, $c1, $bc, $b8, $b8, $ba, $be
16d70     C3 C9 D2 E0 
16d74     EF 00 10 1D 
16d78     2B 36 3F 44 
16d7c     47 47 45 42 | 	byte	$c3, $c9, $d2, $e0, $ef, $00, $10, $1d, $2b, $36, $3f, $44, $47, $47, $45, $42
16d80     3D 37 2C 1E 
16d84     0F FF F0 E2 
16d88     D4 CA C1 BC 
16d8c     B9 BA BC BF | 	byte	$3d, $37, $2c, $1e, $0f, $ff, $f0, $e2, $d4, $ca, $c1, $bc, $b9, $ba, $bc, $bf
16d90     C4 CB D5 E2 
16d94     F3 01 11 20 
16d98     2B 36 3E 44 
16d9c     46 46 43 40 | 	byte	$c4, $cb, $d5, $e2, $f3, $01, $11, $20, $2b, $36, $3e, $44, $46, $46, $43, $40
16da0     3B 33 2A 1C 
16da4     0D FD ED E1 
16da8     D4 C9 C1 BC 
16dac     BA BB BE C1 | 	byte	$3b, $33, $2a, $1c, $0d, $fd, $ed, $e1, $d4, $c9, $c1, $bc, $ba, $bb, $be, $c1
16db0     C6 CD D8 E6 
16db4     F5 05 12 20 
16db8     2C 37 3F 43 
16dbc     45 44 41 3E | 	byte	$c6, $cd, $d8, $e6, $f5, $05, $12, $20, $2c, $37, $3f, $43, $45, $44, $41, $3e
16dc0     39 32 27 19 
16dc4     09 FB EC DF 
16dc8     D3 C9 C2 BD 
16dcc     BC BD BF C3 | 	byte	$39, $32, $27, $19, $09, $fb, $ec, $df, $d3, $c9, $c2, $bd, $bc, $bd, $bf, $c3
16dd0     C8 D0 DA E8 
16dd4     F7 07 14 22 
16dd8     2D 37 3E 43 
16ddc     44 43 40 3C | 	byte	$c8, $d0, $da, $e8, $f7, $07, $14, $22, $2d, $37, $3e, $43, $44, $43, $40, $3c
16de0     38 2F 24 18 
16de4     08 F8 EB DF 
16de8     D3 CA C2 BE 
16dec     BD BF C1 C4 | 	byte	$38, $2f, $24, $18, $08, $f8, $eb, $df, $d3, $ca, $c2, $be, $bd, $bf, $c1, $c4
16df0     CA D3 DE EB 
16df4     FA 08 16 22 
16df8     2E 37 3D 42 
16dfc     42 41 3F 3A | 	byte	$ca, $d3, $de, $eb, $fa, $08, $16, $22, $2e, $37, $3d, $42, $42, $41, $3f, $3a
16e00     35 2D 21 14 
16e04     05 F7 EA DD 
16e08     D3 C9 C2 BF 
16e0c     BE C0 C3 C6 | 	byte	$35, $2d, $21, $14, $05, $f7, $ea, $dd, $d3, $c9, $c2, $bf, $be, $c0, $c3, $c6
16e10     CC D5 E1 ED 
16e14     FC 0A 17 23 
16e18     2D 36 3C 40 
16e1c     41 3F 3C 38 | 	byte	$cc, $d5, $e1, $ed, $fc, $0a, $17, $23, $2d, $36, $3c, $40, $41, $3f, $3c, $38
16e20     32 29 1E 10 
16e24     03 F5 E7 DC 
16e28     D2 C9 C3 BF 
16e2c     BF C1 C4 C8 | 	byte	$32, $29, $1e, $10, $03, $f5, $e7, $dc, $d2, $c9, $c3, $bf, $bf, $c1, $c4, $c8
16e30     CF D7 E3 F1 
16e34     FD 0C 18 24 
16e38     2E 36 3C 3F 
16e3c     40 3E 3B 36 | 	byte	$cf, $d7, $e3, $f1, $fd, $0c, $18, $24, $2e, $36, $3c, $3f, $40, $3e, $3b, $36
16e40     2F 26 1B 0F 
16e44     00 F4 E7 DB 
16e48     D2 CA C4 C1 
16e4c     C0 C2 C6 CA | 	byte	$2f, $26, $1b, $0f, $00, $f4, $e7, $db, $d2, $ca, $c4, $c1, $c0, $c2, $c6, $ca
16e50     D1 DA E5 F3 
16e54     01 0D 19 24 
16e58     2E 35 3B 3E 
16e5c     3F 3D 39 34 | 	byte	$d1, $da, $e5, $f3, $01, $0d, $19, $24, $2e, $35, $3b, $3e, $3f, $3d, $39, $34
16e60     2D 24 19 0B 
16e64     00 F2 E7 DC 
16e68     D2 CB C5 C2 
16e6c     C2 C4 C7 CD | 	byte	$2d, $24, $19, $0b, $00, $f2, $e7, $dc, $d2, $cb, $c5, $c2, $c2, $c4, $c7, $cd
16e70     D4 DD E9 F5 
16e74     01 0E 19 25 
16e78     2E 35 3B 3D 
16e7c     3D 3B 37 32 | 	byte	$d4, $dd, $e9, $f5, $01, $0e, $19, $25, $2e, $35, $3b, $3d, $3d, $3b, $37, $32
16e80     2B 21 15 0A 
16e84     FD F2 E6 DC 
16e88     D2 CB C6 C3 
16e8c     C3 C5 C9 CE | 	byte	$2b, $21, $15, $0a, $fd, $f2, $e6, $dc, $d2, $cb, $c6, $c3, $c3, $c5, $c9, $ce
16e90     D6 E0 EA F7 
16e94     03 0F 1B 25 
16e98     2E 35 3A 3C 
16e9c     3C 39 36 30 | 	byte	$d6, $e0, $ea, $f7, $03, $0f, $1b, $25, $2e, $35, $3a, $3c, $3c, $39, $36, $30
16ea0     28 1F 13 08 
16ea4     FC F0 E5 DB 
16ea8     D3 CB C7 C5 
16eac     C5 C7 CB D1 | 	byte	$28, $1f, $13, $08, $fc, $f0, $e5, $db, $d3, $cb, $c7, $c5, $c5, $c7, $cb, $d1
16eb0     D9 E2 EE F9 
16eb4     05 10 1C 25 
16eb8     2D 34 39 3B 
16ebc     3B 39 35 2E | 	byte	$d9, $e2, $ee, $f9, $05, $10, $1c, $25, $2d, $34, $39, $3b, $3b, $39, $35, $2e
16ec0     27 1D 12 07 
16ec4     FB EF E5 DB 
16ec8     D3 CC C8 C5 
16ecc     C5 C8 CC D3 | 	byte	$27, $1d, $12, $07, $fb, $ef, $e5, $db, $d3, $cc, $c8, $c5, $c5, $c8, $cc, $d3
16ed0     DA E5 EF FB 
16ed4     06 11 1C 26 
16ed8     2E 35 39 3B 
16edc     3A 38 33 2C | 	byte	$da, $e5, $ef, $fb, $06, $11, $1c, $26, $2e, $35, $39, $3b, $3a, $38, $33, $2c
16ee0     24 1A 0F 04 
16ee4     F7 ED E3 D9 
16ee8     D2 CB C8 C6 
16eec     C6 CA CE D5 | 	byte	$24, $1a, $0f, $04, $f7, $ed, $e3, $d9, $d2, $cb, $c8, $c6, $c6, $ca, $ce, $d5
16ef0     DE E7 F2 FE 
16ef4     09 15 1E 28 
16ef8     2F 34 38 39 
16efc     38 35 30 29 | 	byte	$de, $e7, $f2, $fe, $09, $15, $1e, $28, $2f, $34, $38, $39, $38, $35, $30, $29
16f00     20 17 0B 00 
16f04     F5 EA E0 D7 
16f08     D0 CB C7 C6 
16f0c     C7 CB D0 D8 | 	byte	$20, $17, $0b, $00, $f5, $ea, $e0, $d7, $d0, $cb, $c7, $c6, $c7, $cb, $d0, $d8
16f10     E0 EA F6 01 
16f14     0C 16 21 2A 
16f18     30 35 38 38 
16f1c     37 33 2D 26 | 	byte	$e0, $ea, $f6, $01, $0c, $16, $21, $2a, $30, $35, $38, $38, $37, $33, $2d, $26
16f20     1D 13 09 FD 
16f24     F3 E8 DE D6 
16f28     CF CB C8 C7 
16f2c     C9 CD D3 DA | 	byte	$1d, $13, $09, $fd, $f3, $e8, $de, $d6, $cf, $cb, $c8, $c7, $c9, $cd, $d3, $da
16f30     E4 EE F9 05 
16f34     0F 1A 22 2B 
16f38     30 35 38 38 
16f3c     36 31 2B 23 | 	byte	$e4, $ee, $f9, $05, $0f, $1a, $22, $2b, $30, $35, $38, $38, $36, $31, $2b, $23
16f40     1B 10 06 FA 
16f44     F0 E6 DC D6 
16f48     CF CB C9 C9 
16f4c     CB CF D5 DE | 	byte	$1b, $10, $06, $fa, $f0, $e6, $dc, $d6, $cf, $cb, $c9, $c9, $cb, $cf, $d5, $de
16f50     E7 F1 FC 07 
16f54     12 1C 24 2C 
16f58     31 35 37 36 
16f5c     34 2F 29 20 | 	byte	$e7, $f1, $fc, $07, $12, $1c, $24, $2c, $31, $35, $37, $36, $34, $2f, $29, $20
16f60     17 0D 02 F8 
16f64     ED E4 DB D3 
16f68     CE CB CA CA 
16f6c     CD D2 D9 E0 | 	byte	$17, $0d, $02, $f8, $ed, $e4, $db, $d3, $ce, $cb, $ca, $ca, $cd, $d2, $d9, $e0
16f70     EA F5 FF 0A 
16f74     15 1E 26 2D 
16f78     32 35 36 35 
16f7c     32 2C 26 1E | 	byte	$ea, $f5, $ff, $0a, $15, $1e, $26, $2d, $32, $35, $36, $35, $32, $2c, $26, $1e
16f80     14 0A FF F5 
16f84     EB E1 DA D3 
16f88     CE CB CA CC 
16f8c     CF D4 DB E4 | 	byte	$14, $0a, $ff, $f5, $eb, $e1, $da, $d3, $ce, $cb, $ca, $cc, $cf, $d4, $db, $e4
16f90     ED F7 01 0D 
16f94     16 20 27 2E 
16f98     33 35 35 34 
16f9c     30 2B 23 1C | 	byte	$ed, $f7, $01, $0d, $16, $20, $27, $2e, $33, $35, $35, $34, $30, $2b, $23, $1c
16fa0     12 08 FD F3 
16fa4     E9 E0 D8 D3 
16fa8     CE CC CC CD 
16fac     D1 D7 DE E6 | 	byte	$12, $08, $fd, $f3, $e9, $e0, $d8, $d3, $ce, $cc, $cc, $cd, $d1, $d7, $de, $e6
16fb0     EF FA 04 0F 
16fb4     18 21 28 2E 
16fb8     32 34 35 32 
16fbc     2F 28 21 19 | 	byte	$ef, $fa, $04, $0f, $18, $21, $28, $2e, $32, $34, $35, $32, $2f, $28, $21, $19
16fc0     0F 05 FA F1 
16fc4     E7 DE D7 D2 
16fc8     CE CC CD CE 
16fcc     D3 D8 E1 E9 | 	byte	$0f, $05, $fa, $f1, $e7, $de, $d7, $d2, $ce, $cc, $cd, $ce, $d3, $d8, $e1, $e9
16fd0     F1 FC 07 11 
16fd4     1A 22 29 2E 
16fd8     32 33 32 30 
16fdc     2B 25 1E 15 | 	byte	$f1, $fc, $07, $11, $1a, $22, $29, $2e, $32, $33, $32, $30, $2b, $25, $1e, $15
16fe0     0C 02 F8 EE 
16fe4     E5 DD D6 D1 
16fe8     CE CD CE D0 
16fec     D5 DB E2 EB | 	byte	$0c, $02, $f8, $ee, $e5, $dd, $d6, $d1, $ce, $cd, $ce, $d0, $d5, $db, $e2, $eb
16ff0     F5 FF 09 12 
16ff4     1C 24 29 2F 
16ff8     32 32 31 2F 
16ffc     2A 24 1C 13 | 	byte	$f5, $ff, $09, $12, $1c, $24, $29, $2f, $32, $32, $31, $2f, $2a, $24, $1c, $13
17000     0A FF F6 EC 
17004     E4 DC D6 D1 
17008     CE CD CF D2 
1700c     D6 DC E5 EE | 	byte	$0a, $ff, $f6, $ec, $e4, $dc, $d6, $d1, $ce, $cd, $cf, $d2, $d6, $dc, $e5, $ee
17010     F7 01 0B 15 
17014     1D 24 2B 2E 
17018     31 32 30 2D 
1701c     28 21 1A 10 | 	byte	$f7, $01, $0b, $15, $1d, $24, $2b, $2e, $31, $32, $30, $2d, $28, $21, $1a, $10
17020     08 FE F4 EA 
17024     E2 DB D6 D1 
17028     CF CE D0 D3 
1702c     D8 DF E7 F0 | 	byte	$08, $fe, $f4, $ea, $e2, $db, $d6, $d1, $cf, $ce, $d0, $d3, $d8, $df, $e7, $f0
17030     F9 03 0D 17 
17034     1E 25 2B 2F 
17038     31 31 2F 2B 
1703c     26 1F 18 0E | 	byte	$f9, $03, $0d, $17, $1e, $25, $2b, $2f, $31, $31, $2f, $2b, $26, $1f, $18, $0e
17040     04 FC F2 EA 
17044     E1 DA D5 D1 
17048     CF CF D1 D5 
1704c     DA E1 E9 F2 | 	byte	$04, $fc, $f2, $ea, $e1, $da, $d5, $d1, $cf, $cf, $d1, $d5, $da, $e1, $e9, $f2
17050     FC 05 0E 17 
17054     1F 26 2B 2F 
17058     30 30 2E 2A 
1705c     24 1D 15 0D | 	byte	$fc, $05, $0e, $17, $1f, $26, $2b, $2f, $30, $30, $2e, $2a, $24, $1d, $15, $0d
17060     03 F9 F0 E7 
17064     E0 DA D4 D1 
17068     D0 D0 D2 D6 
1706c     DC E3 EB F4 | 	byte	$03, $f9, $f0, $e7, $e0, $da, $d4, $d1, $d0, $d0, $d2, $d6, $dc, $e3, $eb, $f4
17070     FD 07 10 19 
17074     20 27 2C 2F 
17078     30 30 2D 29 
1707c     23 1C 14 0B | 	byte	$fd, $07, $10, $19, $20, $27, $2c, $2f, $30, $30, $2d, $29, $23, $1c, $14, $0b
17080     02 F9 EF E7 
17084     E0 D9 D5 D2 
17088     D1 D1 D3 D8 
1708c     DD E5 ED F6 | 	byte	$02, $f9, $ef, $e7, $e0, $d9, $d5, $d2, $d1, $d1, $d3, $d8, $dd, $e5, $ed, $f6
17090     FF 09 12 1A 
17094     21 27 2B 2E 
17098     30 2F 2B 27 
1709c     21 1A 12 09 | 	byte	$ff, $09, $12, $1a, $21, $27, $2b, $2e, $30, $2f, $2b, $27, $21, $1a, $12, $09
170a0     00 F6 EE E6 
170a4     DE D9 D5 D2 
170a8     D1 D2 D5 DA 
170ac     DF E6 EE F7 | 	byte	$00, $f6, $ee, $e6, $de, $d9, $d5, $d2, $d1, $d2, $d5, $da, $df, $e6, $ee, $f7
170b0     00 0A 13 1B 
170b4     21 27 2C 2D 
170b8     2E 2D 2A 26 
170bc     1F 18 0F 07 | 	byte	$00, $0a, $13, $1b, $21, $27, $2c, $2d, $2e, $2d, $2a, $26, $1f, $18, $0f, $07
170c0     FD F5 EC E4 
170c4     DD D8 D4 D2 
170c8     D1 D3 D6 DB 
170cc     E1 E8 F1 FA | 	byte	$fd, $f5, $ec, $e4, $dd, $d8, $d4, $d2, $d1, $d3, $d6, $db, $e1, $e8, $f1, $fa
170d0     02 0C 15 1C 
170d4     23 28 2C 2D 
170d8     2E 2C 29 24 
170dc     1E 17 0E 05 | 	byte	$02, $0c, $15, $1c, $23, $28, $2c, $2d, $2e, $2c, $29, $24, $1e, $17, $0e, $05
170e0     FC F3 EB E4 
170e4     DD D8 D4 D2 
170e8     D2 D4 D7 DC 
170ec     E2 EA F2 FB | 	byte	$fc, $f3, $eb, $e4, $dd, $d8, $d4, $d2, $d2, $d4, $d7, $dc, $e2, $ea, $f2, $fb
170f0     04 0D 16 1D 
170f4     23 28 2B 2E 
170f8     2D 2B 28 23 
170fc     1D 14 0D 04 | 	byte	$04, $0d, $16, $1d, $23, $28, $2b, $2e, $2d, $2b, $28, $23, $1d, $14, $0d, $04
17100     FB F2 E9 E3 
17104     DD D8 D5 D3 
17108     D3 D5 D9 DE 
1710c     E4 EC F4 FC | 	byte	$fb, $f2, $e9, $e3, $dd, $d8, $d5, $d3, $d3, $d5, $d9, $de, $e4, $ec, $f4, $fc
17110     05 0F 16 1D 
17114     24 28 2B 2C 
17118     2C 2A 27 21 
1711c     1B 13 0B 02 | 	byte	$05, $0f, $16, $1d, $24, $28, $2b, $2c, $2c, $2a, $27, $21, $1b, $13, $0b, $02
17120     F9 F1 E9 E2 
17124     DD D8 D5 D3 
17128     D4 D6 DA DF 
1712c     E5 ED F5 FE | 	byte	$f9, $f1, $e9, $e2, $dd, $d8, $d5, $d3, $d4, $d6, $da, $df, $e5, $ed, $f5, $fe
17130     07 10 18 1F 
17134     24 28 2B 2C 
17138     2C 29 25 20 
1713c     19 12 09 01 | 	byte	$07, $10, $18, $1f, $24, $28, $2b, $2c, $2c, $29, $25, $20, $19, $12, $09, $01
17140     F8 EF E8 E1 
17144     DB D7 D5 D4 
17148     D5 D7 DB E0 
1714c     E7 EF F7 00 | 	byte	$f8, $ef, $e8, $e1, $db, $d7, $d5, $d4, $d5, $d7, $db, $e0, $e7, $ef, $f7, $00
17150     09 11 18 1F 
17154     25 29 2B 2C 
17158     2B 28 25 1F 
1715c     18 10 08 00 | 	byte	$09, $11, $18, $1f, $25, $29, $2b, $2c, $2b, $28, $25, $1f, $18, $10, $08, $00
17160     F7 EF E7 E1 
17164     DC D8 D5 D5 
17168     D6 D8 DC E2 
1716c     E9 F1 F9 01 | 	byte	$f7, $ef, $e7, $e1, $dc, $d8, $d5, $d5, $d6, $d8, $dc, $e2, $e9, $f1, $f9, $01
17170     0A 12 19 20 
17174     25 29 2B 2B 
17178     2A 27 23 1D 
1717c     17 0E 06 FE | 	byte	$0a, $12, $19, $20, $25, $29, $2b, $2b, $2a, $27, $23, $1d, $17, $0e, $06, $fe
17180     F6 ED E6 E0 
17184     DB D8 D5 D5 
17188     D6 DA DE E3 
1718c     EA F2 FA 03 | 	byte	$f6, $ed, $e6, $e0, $db, $d8, $d5, $d5, $d6, $da, $de, $e3, $ea, $f2, $fa, $03
17190     0B 13 1A 20 
17194     25 28 2A 2A 
17198     29 26 21 1B 
1719c     14 0D 04 FC | 	byte	$0b, $13, $1a, $20, $25, $28, $2a, $2a, $29, $26, $21, $1b, $14, $0d, $04, $fc
171a0     F4 EC E5 E0 
171a4     DA D7 D5 D5 
171a8     D7 DA DF E5 
171ac     EC F4 FC 05 | 	byte	$f4, $ec, $e5, $e0, $da, $d7, $d5, $d5, $d7, $da, $df, $e5, $ec, $f4, $fc, $05
171b0     0D 14 1B 21 
171b4     26 28 2A 2A 
171b8     28 25 1F 1A 
171bc     12 0B 03 FA | 	byte	$0d, $14, $1b, $21, $26, $28, $2a, $2a, $28, $25, $1f, $1a, $12, $0b, $03, $fa
171c0     F3 EB E5 DF 
171c4     DA D7 D6 D6 
171c8     D8 DC E0 E7 
171cc     ED F5 FD 06 | 	byte	$f3, $eb, $e5, $df, $da, $d7, $d6, $d6, $d8, $dc, $e0, $e7, $ed, $f5, $fd, $06
171d0     0E 15 1C 22 
171d4     26 29 29 29 
171d8     27 24 1E 18 
171dc     11 09 01 F9 | 	byte	$0e, $15, $1c, $22, $26, $29, $29, $29, $27, $24, $1e, $18, $11, $09, $01, $f9
171e0     F1 EA E3 DF 
171e4     DA D8 D6 D7 
171e8     D9 DD E2 E8 
171ec     EF F6 FF 08 | 	byte	$f1, $ea, $e3, $df, $da, $d8, $d6, $d7, $d9, $dd, $e2, $e8, $ef, $f6, $ff, $08
171f0     0F 16 1D 22 
171f4     26 28 29 28 
171f8     26 21 1D 17 
171fc     0F 08 FF F8 | 	byte	$0f, $16, $1d, $22, $26, $28, $29, $28, $26, $21, $1d, $17, $0f, $08, $ff, $f8
17200     F0 E8 E3 DD 
17204     DA D8 D7 D8 
17208     DA DE E3 EA 
1720c     F1 FA 01 09 | 	byte	$f0, $e8, $e3, $dd, $da, $d8, $d7, $d8, $da, $de, $e3, $ea, $f1, $fa, $01, $09
17210     10 18 1D 23 
17214     26 28 28 27 
17218     25 21 1B 14 
1721c     0E 05 FE F6 | 	byte	$10, $18, $1d, $23, $26, $28, $28, $27, $25, $21, $1b, $14, $0e, $05, $fe, $f6
17220     EF E8 E2 DD 
17224     DA D8 D8 D9 
17228     DC E0 E5 EC 
1722c     F3 FB 02 0B | 	byte	$ef, $e8, $e2, $dd, $da, $d8, $d8, $d9, $dc, $e0, $e5, $ec, $f3, $fb, $02, $0b
17230     12 19 1F 23 
17234     26 28 28 27 
17238     24 1F 1A 13 
1723c     0C 04 FD F5 | 	byte	$12, $19, $1f, $23, $26, $28, $28, $27, $24, $1f, $1a, $13, $0c, $04, $fd, $f5
17240     ED E7 E1 DD 
17244     DA D9 D9 DA 
17248     DD E1 E7 ED 
1724c     F5 FD 04 0C | 	byte	$ed, $e7, $e1, $dd, $da, $d9, $d9, $da, $dd, $e1, $e7, $ed, $f5, $fd, $04, $0c
17250     13 19 1F 23 
17254     26 27 27 26 
17258     22 1E 18 11 
1725c     0A 02 FB F3 | 	byte	$13, $19, $1f, $23, $26, $27, $27, $26, $22, $1e, $18, $11, $0a, $02, $fb, $f3
17260     EC E6 E1 DD 
17264     DA D9 D9 DB 
17268     DE E3 E8 EF 
1726c     F6 FE 06 0D | 	byte	$ec, $e6, $e1, $dd, $da, $d9, $d9, $db, $de, $e3, $e8, $ef, $f6, $fe, $06, $0d
17270     14 1A 20 23 
17274     26 26 26 24 
17278     21 1C 15 0F 
1727c     09 00 F9 F2 | 	byte	$14, $1a, $20, $23, $26, $26, $26, $24, $21, $1c, $15, $0f, $09, $00, $f9, $f2
17280     EB E5 E0 DC 
17284     DA D9 DA DB 
17288     DF E4 EA F1 
1728c     F8 00 07 0F | 	byte	$eb, $e5, $e0, $dc, $da, $d9, $da, $db, $df, $e4, $ea, $f1, $f8, $00, $07, $0f
17290     15 1B 20 23 
17294     25 26 25 23 
17298     1F 1A 15 0D 
1729c     06 FF F7 F1 | 	byte	$15, $1b, $20, $23, $25, $26, $25, $23, $1f, $1a, $15, $0d, $06, $ff, $f7, $f1
172a0     EA E4 E0 DC 
172a4     DA DA DB DD 
172a8     E1 E5 EC F3 
172ac     FA 02 0A 10 | 	byte	$ea, $e4, $e0, $dc, $da, $da, $db, $dd, $e1, $e5, $ec, $f3, $fa, $02, $0a, $10
172b0     17 1C 21 24 
172b4     25 25 24 22 
172b8     1E 19 13 0C 
172bc     04 FE F6 EF | 	byte	$17, $1c, $21, $24, $25, $25, $24, $22, $1e, $19, $13, $0c, $04, $fe, $f6, $ef
172c0     E9 E4 DF DC 
172c4     DB DB DC DF 
172c8     E3 E8 EE F4 
172cc     FC 03 0A 12 | 	byte	$e9, $e4, $df, $dc, $db, $db, $dc, $df, $e3, $e8, $ee, $f4, $fc, $03, $0a, $12
172d0     17 1D 21 23 
172d4     25 25 23 20 
172d8     1C 17 10 09 
172dc     03 FC F5 ED | 	byte	$17, $1d, $21, $23, $25, $25, $23, $20, $1c, $17, $10, $09, $03, $fc, $f5, $ed
172e0     E8 E3 DF DC 
172e4     DB DC DD E1 
172e8     E4 EA F0 F7 
172ec     FE 05 0C 13 | 	byte	$e8, $e3, $df, $dc, $db, $dc, $dd, $e1, $e4, $ea, $f0, $f7, $fe, $05, $0c, $13
172f0     18 1D 21 23 
172f4     24 24 22 1F 
172f8     1A 15 0F 08 
172fc     01 F9 F3 ED | 	byte	$18, $1d, $21, $23, $24, $24, $22, $1f, $1a, $15, $0f, $08, $01, $f9, $f3, $ed
17300     E7 E2 DF DD 
17304     DC DD DE E2 
17308     E6 EC F2 F9 
1730c     00 07 0E 14 | 	byte	$e7, $e2, $df, $dd, $dc, $dd, $de, $e2, $e6, $ec, $f2, $f9, $00, $07, $0e, $14
17310     19 1E 21 24 
17314     24 23 21 1D 
17318     18 13 0D 06 
1731c     FF F8 F2 EB | 	byte	$19, $1e, $21, $24, $24, $23, $21, $1d, $18, $13, $0d, $06, $ff, $f8, $f2, $eb
17320     E7 E2 DF DD 
17324     DD DE E0 E3 
17328     E8 EE F4 FB 
1732c     02 09 0F 15 | 	byte	$e7, $e2, $df, $dd, $dd, $de, $e0, $e3, $e8, $ee, $f4, $fb, $02, $09, $0f, $15
17330     1A 1E 21 23 
17334     23 21 1F 1C 
17338     17 11 0A 04 
1733c     FE F7 F1 EA | 	byte	$1a, $1e, $21, $23, $23, $21, $1f, $1c, $17, $11, $0a, $04, $fe, $f7, $f1, $ea
17340     E6 E2 DF DE 
17344     DE DE E1 E5 
17348     EA EF F6 FD 
1734c     04 0A 10 16 | 	byte	$e6, $e2, $df, $de, $de, $de, $e1, $e5, $ea, $ef, $f6, $fd, $04, $0a, $10, $16
17350     1B 1F 21 22 
17354     22 20 1E 19 
17358     14 0F 09 02 
1735c     FB F4 EF E9 | 	byte	$1b, $1f, $21, $22, $22, $20, $1e, $19, $14, $0f, $09, $02, $fb, $f4, $ef, $e9
17360     E5 E1 DF DE 
17364     DE E0 E2 E7 
17368     EC F1 F8 FE 
1736c     05 0C 12 17 | 	byte	$e5, $e1, $df, $de, $de, $e0, $e2, $e7, $ec, $f1, $f8, $fe, $05, $0c, $12, $17
17370     1B 1F 21 21 
17374     20 1F 1C 18 
17378     13 0D 07 00 
1737c     F9 F3 ED E8 | 	byte	$1b, $1f, $21, $21, $20, $1f, $1c, $18, $13, $0d, $07, $00, $f9, $f3, $ed, $e8
17380     E4 E1 DF DF 
17384     E0 E1 E4 E8 
17388     EE F3 FA 01 
1738c     07 0D 13 17 | 	byte	$e4, $e1, $df, $df, $e0, $e1, $e4, $e8, $ee, $f3, $fa, $01, $07, $0d, $13, $17
17390     1C 1F 20 21 
17394     20 1E 1A 16 
17398     11 0B 05 FF 
1739c     F8 F2 ED E8 | 	byte	$1c, $1f, $20, $21, $20, $1e, $1a, $16, $11, $0b, $05, $ff, $f8, $f2, $ed, $e8
173a0     E4 E2 E0 E0 
173a4     E1 E3 E6 EA 
173a8     F0 F6 FC 03 
173ac     09 0E 14 19 | 	byte	$e4, $e2, $e0, $e0, $e1, $e3, $e6, $ea, $f0, $f6, $fc, $03, $09, $0e, $14, $19
173b0     1C 1F 20 20 
173b4     1F 1C 19 14 
173b8     0F 09 03 FD 
173bc     F7 F1 EB E7 | 	byte	$1c, $1f, $20, $20, $1f, $1c, $19, $14, $0f, $09, $03, $fd, $f7, $f1, $eb, $e7
173c0     E4 E2 E1 E1 
173c4     E2 E5 E8 EC 
173c8     F2 F8 FE 04 
173cc     0A 0F 15 19 | 	byte	$e4, $e2, $e1, $e1, $e2, $e5, $e8, $ec, $f2, $f8, $fe, $04, $0a, $0f, $15, $19
173d0     1C 1E 1F 1F 
173d4     1D 1A 16 12 
173d8     0D 07 01 FA 
173dc     F5 EF EB E7 | 	byte	$1c, $1e, $1f, $1f, $1d, $1a, $16, $12, $0d, $07, $01, $fa, $f5, $ef, $eb, $e7
173e0     E4 E2 E1 E2 
173e4     E3 E6 EA EE 
173e8     F4 F9 00 06 
173ec     0B 11 15 1A | 	byte	$e4, $e2, $e1, $e2, $e3, $e6, $ea, $ee, $f4, $f9, $00, $06, $0b, $11, $15, $1a
173f0     1C 1E 1E 1E 
173f4     1C 19 15 10 
173f8     0B 05 00 F9 
173fc     F4 EF EA E7 | 	byte	$1c, $1e, $1e, $1e, $1c, $19, $15, $10, $0b, $05, $00, $f9, $f4, $ef, $ea, $e7
17400     E4 E2 E2 E3 
17404     E5 E8 EC F0 
17408     F6 FB 02 07 
1740c     0D 12 17 1A | 	byte	$e4, $e2, $e2, $e3, $e5, $e8, $ec, $f0, $f6, $fb, $02, $07, $0d, $12, $17, $1a
17410     1C 1D 1D 1C 
17414     1B 17 13 0F 
17418     09 03 FE F8 
1741c     F2 EE E9 E6 | 	byte	$1c, $1d, $1d, $1c, $1b, $17, $13, $0f, $09, $03, $fe, $f8, $f2, $ee, $e9, $e6
17420     E4 E2 E2 E4 
17424     E6 E9 EE F2 
17428     F8 FD 03 09 
1742c     0E 13 16 1A | 	byte	$e4, $e2, $e2, $e4, $e6, $e9, $ee, $f2, $f8, $fd, $03, $09, $0e, $13, $16, $1a
17430     1C 1C 1C 1B 
17434     19 15 11 0C 
17438     07 01 FB F6 
1743c     F1 EC E9 E6 | 	byte	$1c, $1c, $1c, $1b, $19, $15, $11, $0c, $07, $01, $fb, $f6, $f1, $ec, $e9, $e6
17440     E4 E3 E3 E5 
17444     E7 EB EF F5 
17448     F9 FF 04 0A 
1744c     0F 13 17 1A | 	byte	$e4, $e3, $e3, $e5, $e7, $eb, $ef, $f5, $f9, $ff, $04, $0a, $0f, $13, $17, $1a
17450     1B 1C 1B 1A 
17454     17 14 0F 0B 
17458     05 FF FA F5 
1745c     F0 EC E8 E6 | 	byte	$1b, $1c, $1b, $1a, $17, $14, $0f, $0b, $05, $ff, $fa, $f5, $f0, $ec, $e8, $e6
17460     E4 E4 E5 E6 
17464     E9 ED F1 F6 
17468     FB 01 06 0B 
1746c     10 14 17 1A | 	byte	$e4, $e4, $e5, $e6, $e9, $ed, $f1, $f6, $fb, $01, $06, $0b, $10, $14, $17, $1a
17470     1B 1B 1A 19 
17474     16 12 0E 09 
17478     04 FF F9 F4 
1747c     EF EC E9 E7 | 	byte	$1b, $1b, $1a, $19, $16, $12, $0e, $09, $04, $ff, $f9, $f4, $ef, $ec, $e9, $e7
17480     E5 E5 E6 E8 
17484     EB EE F3 F7 
17488     FD 02 07 0D 
1748c     11 15 18 1A | 	byte	$e5, $e5, $e6, $e8, $eb, $ee, $f3, $f7, $fd, $02, $07, $0d, $11, $15, $18, $1a
17490     1A 1A 19 17 
17494     14 10 0C 07 
17498     02 FD F8 F3 
1749c     EF EB E8 E6 | 	byte	$1a, $1a, $19, $17, $14, $10, $0c, $07, $02, $fd, $f8, $f3, $ef, $eb, $e8, $e6
174a0     E5 E6 E7 E9 
174a4     EC F0 F4 F9 
174a8     FE 03 09 0D 
174ac     12 15 18 1A | 	byte	$e5, $e6, $e7, $e9, $ec, $f0, $f4, $f9, $fe, $03, $09, $0d, $12, $15, $18, $1a
174b0     1A 1A 19 16 
174b4     13 0F 0B 06 
174b8     01 FB F6 F2 
174bc     EE EB E8 E7 | 	byte	$1a, $1a, $19, $16, $13, $0f, $0b, $06, $01, $fb, $f6, $f2, $ee, $eb, $e8, $e7
174c0     E6 E7 E8 EA 
174c4     ED F1 F5 FB 
174c8     00 05 0A 0F 
174cc     12 15 18 19 | 	byte	$e6, $e7, $e8, $ea, $ed, $f1, $f5, $fb, $00, $05, $0a, $0f, $12, $15, $18, $19
174d0     1A 19 18 15 
174d4     12 0E 09 04 
174d8     00 FB F6 F2 
174dc     EE EB E9 E7 | 	byte	$1a, $19, $18, $15, $12, $0e, $09, $04, $00, $fb, $f6, $f2, $ee, $eb, $e9, $e7
174e0     E7 E8 E9 EC 
174e4     EF F3 F7 FC 
174e8     01 06 0B 0F 
174ec     13 16 18 19 | 	byte	$e7, $e8, $e9, $ec, $ef, $f3, $f7, $fc, $01, $06, $0b, $0f, $13, $16, $18, $19
174f0     19 18 17 14 
174f4     11 0C 07 03 
174f8     FE F9 F4 F0 
174fc     ED EA E8 E7 | 	byte	$19, $18, $17, $14, $11, $0c, $07, $03, $fe, $f9, $f4, $f0, $ed, $ea, $e8, $e7
17500     E7 E8 EA ED 
17504     F0 F4 F9 FE 
17508     02 07 0C 10 
1750c     13 15 17 18 | 	byte	$e7, $e8, $ea, $ed, $f0, $f4, $f9, $fe, $02, $07, $0c, $10, $13, $15, $17, $18
17510     18 17 15 12 
17514     0E 0A 06 01 
17518     FC F7 F3 EF 
1751c     EC EA E8 E7 | 	byte	$18, $17, $15, $12, $0e, $0a, $06, $01, $fc, $f7, $f3, $ef, $ec, $ea, $e8, $e7
17520     E8 E9 EB EE 
17524     F1 F5 FA FF 
17528     03 09 0D 10 
1752c     13 16 17 18 | 	byte	$e8, $e9, $eb, $ee, $f1, $f5, $fa, $ff, $03, $09, $0d, $10, $13, $16, $17, $18
17530     17 16 14 11 
17534     0E 09 05 00 
17538     FC F7 F3 EF 
1753c     EC EA E9 E8 | 	byte	$17, $16, $14, $11, $0e, $09, $05, $00, $fc, $f7, $f3, $ef, $ec, $ea, $e9, $e8
17540     E8 EA EC EF 
17544     F3 F7 FB 01 
17548     05 09 0D 11 
1754c     14 16 17 18 | 	byte	$e8, $ea, $ec, $ef, $f3, $f7, $fb, $01, $05, $09, $0d, $11, $14, $16, $17, $18
17550     17 15 13 10 
17554     0C 08 04 FF 
17558     FB F6 F2 EF 
1755c     EC EA E9 E9 | 	byte	$17, $15, $13, $10, $0c, $08, $04, $ff, $fb, $f6, $f2, $ef, $ec, $ea, $e9, $e9
17560     EA EB ED F1 
17564     F4 F9 FD 01 
17568     06 0A 0E 12 
1756c     14 16 17 17 | 	byte	$ea, $eb, $ed, $f1, $f4, $f9, $fd, $01, $06, $0a, $0e, $12, $14, $16, $17, $17
17570     16 14 12 0F 
17574     0B 07 02 FE 
17578     F9 F5 F1 EE 
1757c     EC EA E9 E9 | 	byte	$16, $14, $12, $0f, $0b, $07, $02, $fe, $f9, $f5, $f1, $ee, $ec, $ea, $e9, $e9
17580     EA EC EF F2 
17584     F6 FA FE 03 
17588     07 0B 0F 12 
1758c     14 16 16 17 | 	byte	$ea, $ec, $ef, $f2, $f6, $fa, $fe, $03, $07, $0b, $0f, $12, $14, $16, $16, $17
17590     15 13 11 0D 
17594     0A 06 01 FC 
17598     F8 F4 F0 EE 
1759c     EB EA E9 EA | 	byte	$15, $13, $11, $0d, $0a, $06, $01, $fc, $f8, $f4, $f0, $ee, $eb, $ea, $e9, $ea
175a0     EB ED F0 F3 
175a4     F7 FB 00 04 
175a8     08 0D 10 12 
175ac     14 16 16 16 | 	byte	$eb, $ed, $f0, $f3, $f7, $fb, $00, $04, $08, $0d, $10, $12, $14, $16, $16, $16
175b0     15 13 10 0D 
175b4     09 05 01 FC 
175b8     F8 F4 F0 EE 
175bc     EB EA EA EB | 	byte	$15, $13, $10, $0d, $09, $05, $01, $fc, $f8, $f4, $f0, $ee, $eb, $ea, $ea, $eb
175c0     EC EE F1 F4 
175c4     F8 FC 00 05 
175c8     09 0D 10 13 
175cc     14 16 16 15 | 	byte	$ec, $ee, $f1, $f4, $f8, $fc, $00, $05, $09, $0d, $10, $13, $14, $16, $16, $15
175d0     14 12 0F 0B 
175d4     07 03 FF FB 
175d8     F7 F3 F0 ED 
175dc     EB EA EA EB | 	byte	$14, $12, $0f, $0b, $07, $03, $ff, $fb, $f7, $f3, $f0, $ed, $eb, $ea, $ea, $eb
175e0     EC EE F2 F5 
175e4     F8 FD 01 06 
175e8     0A 0D 10 13 
175ec     14 15 15 15 | 	byte	$ec, $ee, $f2, $f5, $f8, $fd, $01, $06, $0a, $0d, $10, $13, $14, $15, $15, $15
175f0     13 10 0D 0A 
175f4     07 02 FD FA 
175f8     F5 F2 EF ED 
175fc     EB EA EB EB | 	byte	$13, $10, $0d, $0a, $07, $02, $fd, $fa, $f5, $f2, $ef, $ed, $eb, $ea, $eb, $eb
17600     ED EF F2 F5 
17604     FA FE 02 07 
17608     0A 0E 11 13 
1760c     14 15 15 14 | 	byte	$ed, $ef, $f2, $f5, $fa, $fe, $02, $07, $0a, $0e, $11, $13, $14, $15, $15, $14
17610     12 0F 0D 09 
17614     05 01 FD F9 
17618     F5 F2 EF ED 
1761c     EC EB EB EC | 	byte	$12, $0f, $0d, $09, $05, $01, $fd, $f9, $f5, $f2, $ef, $ed, $ec, $eb, $eb, $ec
17620     EE F0 F3 F6 
17624     FA FF 03 07 
17628     0B 0E 11 13 
1762c     14 15 15 13 | 	byte	$ee, $f0, $f3, $f6, $fa, $ff, $03, $07, $0b, $0e, $11, $13, $14, $15, $15, $13
17630     12 0F 0C 08 
17634     05 00 FC F8 
17638     F4 F1 EF ED 
1763c     EC EB EB ED | 	byte	$12, $0f, $0c, $08, $05, $00, $fc, $f8, $f4, $f1, $ef, $ed, $ec, $eb, $eb, $ed
17640     EE F1 F4 F8 
17644     FC 00 04 08 
17648     0C 0F 11 13 
1764c     14 15 14 13 | 	byte	$ee, $f1, $f4, $f8, $fc, $00, $04, $08, $0c, $0f, $11, $13, $14, $15, $14, $13
17650     11 0E 0B 07 
17654     03 FF FB F8 
17658     F4 F0 EE ED 
1765c     EC EB EC ED | 	byte	$11, $0e, $0b, $07, $03, $ff, $fb, $f8, $f4, $f0, $ee, $ed, $ec, $eb, $ec, $ed
17660     EF F2 F5 F9 
17664     FD 01 05 08 
17668     0C 0F 11 13 
1766c     14 14 14 12 | 	byte	$ef, $f2, $f5, $f9, $fd, $01, $05, $08, $0c, $0f, $11, $13, $14, $14, $14, $12
17670     10 0E 0B 07 
17674     03 FE FB F7 
17678     F3 F1 EE ED 
1767c     EC EC EC EE | 	byte	$10, $0e, $0b, $07, $03, $fe, $fb, $f7, $f3, $f1, $ee, $ed, $ec, $ec, $ec, $ee
17680     F0 F3 F6 F9 
17684     FD 02 06 0A 
17688     0D 10 12 13 
1768c     14 14 14 12 | 	byte	$f0, $f3, $f6, $f9, $fd, $02, $06, $0a, $0d, $10, $12, $13, $14, $14, $14, $12
17690     10 0D 0A 06 
17694     02 FE FA F7 
17698     F3 F1 EE ED 
1769c     EC EC ED EE | 	byte	$10, $0d, $0a, $06, $02, $fe, $fa, $f7, $f3, $f1, $ee, $ed, $ec, $ec, $ed, $ee
176a0     F1 F3 F7 FA 
176a4     FF 02 07 0A 
176a8     0D 10 12 14 
176ac     14 14 13 12 | 	byte	$f1, $f3, $f7, $fa, $ff, $02, $07, $0a, $0d, $10, $12, $14, $14, $14, $13, $12
176b0     0F 0C 09 05 
176b4     02 FD FA F6 
176b8     F3 F1 EE ED 
176bc     EC EC ED EF | 	byte	$0f, $0c, $09, $05, $02, $fd, $fa, $f6, $f3, $f1, $ee, $ed, $ec, $ec, $ed, $ef
176c0     F1 F4 F8 FB 
176c4     FF 03 06 0A 
176c8     0D 10 12 13 
176cc     13 13 12 11 | 	byte	$f1, $f4, $f8, $fb, $ff, $03, $06, $0a, $0d, $10, $12, $13, $13, $13, $12, $11
176d0     0E 0B 08 04 
176d4     00 FD F8 F5 
176d8     F2 EF ED ED 
176dc     EC EC ED EF | 	byte	$0e, $0b, $08, $04, $00, $fd, $f8, $f5, $f2, $ef, $ed, $ed, $ec, $ec, $ed, $ef
176e0     F1 F4 F8 FC 
176e4     FF 03 07 0A 
176e8     0E 10 12 13 
176ec     14 13 12 10 | 	byte	$f1, $f4, $f8, $fc, $ff, $03, $07, $0a, $0e, $10, $12, $13, $14, $13, $12, $10
176f0     0E 0B 07 04 
176f4     00 FC F8 F5 
176f8     F2 F0 EE ED 
176fc     EC ED EE F0 | 	byte	$0e, $0b, $07, $04, $00, $fc, $f8, $f5, $f2, $f0, $ee, $ed, $ec, $ed, $ee, $f0
17700     F2 F5 F8 FD 
17704     01 04 08 0B 
17708     0E 10 12 13 
1770c     13 13 11 0F | 	byte	$f2, $f5, $f8, $fd, $01, $04, $08, $0b, $0e, $10, $12, $13, $13, $13, $11, $0f
17710     0D 0A 07 03 
17714     FF FC F8 F5 
17718     F2 F0 EE ED 
1771c     ED EE EF F1 | 	byte	$0d, $0a, $07, $03, $ff, $fc, $f8, $f5, $f2, $f0, $ee, $ed, $ed, $ee, $ef, $f1
17720     F3 F6 FA FD 
17724     01 05 08 0B 
17728     0E 10 12 13 
1772c     13 12 11 0F | 	byte	$f3, $f6, $fa, $fd, $01, $05, $08, $0b, $0e, $10, $12, $13, $13, $12, $11, $0f
17730     0D 09 06 02 
17734     FE FB F8 F4 
17738     F1 EF EE ED 
1773c     ED EE EF F1 | 	byte	$0d, $09, $06, $02, $fe, $fb, $f8, $f4, $f1, $ef, $ee, $ed, $ed, $ee, $ef, $f1
17740     F4 F7 FB FE 
17744     02 05 09 0C 
17748     0E 10 12 13 
1774c     13 12 10 0F | 	byte	$f4, $f7, $fb, $fe, $02, $05, $09, $0c, $0e, $10, $12, $13, $13, $12, $10, $0f
17750     0C 09 05 01 
17754     FE FA F7 F3 
17758     F1 EF EE ED 
1775c     ED EE F0 F2 | 	byte	$0c, $09, $05, $01, $fe, $fa, $f7, $f3, $f1, $ef, $ee, $ed, $ed, $ee, $f0, $f2
17760     F5 F8 FB FF 
17764     03 06 09 0C 
17768     0F 11 12 12 
1776c     12 11 10 0E | 	byte	$f5, $f8, $fb, $ff, $03, $06, $09, $0c, $0f, $11, $12, $12, $12, $11, $10, $0e
17770     0B 08 04 01 
17774     FE FA F7 F4 
17778     F1 F0 EF EE 
1777c     EE EF F0 F3 | 	byte	$0b, $08, $04, $01, $fe, $fa, $f7, $f4, $f1, $f0, $ef, $ee, $ee, $ef, $f0, $f3
17780     F5 F9 FC 00 
17784     04 07 0A 0C 
17788     0F 11 12 12 
1778c     12 11 0F 0D | 	byte	$f5, $f9, $fc, $00, $04, $07, $0a, $0c, $0f, $11, $12, $12, $12, $11, $0f, $0d
17790     0B 07 04 00 
17794     FD F9 F6 F3 
17798     F1 EF EE EE 
1779c     EE EF F1 F3 | 	byte	$0b, $07, $04, $00, $fd, $f9, $f6, $f3, $f1, $ef, $ee, $ee, $ee, $ef, $f1, $f3
177a0     F6 F9 FC 00 
177a4     04 07 0A 0D 
177a8     0F 10 11 11 
177ac     11 10 0E 0C | 	byte	$f6, $f9, $fc, $00, $04, $07, $0a, $0d, $0f, $10, $11, $11, $11, $10, $0e, $0c
177b0     09 06 03 FF 
177b4     FC F8 F5 F3 
177b8     F0 EF EE EE 
177bc     EF EF F1 F4 | 	byte	$09, $06, $03, $ff, $fc, $f8, $f5, $f3, $f0, $ef, $ee, $ee, $ef, $ef, $f1, $f4
177c0     F6 FA FD 01 
177c4     04 07 0A 0D 
177c8     0F 11 11 11 
177cc     11 10 0E 0C | 	byte	$f6, $fa, $fd, $01, $04, $07, $0a, $0d, $0f, $11, $11, $11, $11, $10, $0e, $0c
177d0     09 05 02 FF 
177d4     FB F8 F5 F2 
177d8     F1 EF EE EE 
177dc     EF F0 F2 F4 | 	byte	$09, $05, $02, $ff, $fb, $f8, $f5, $f2, $f1, $ef, $ee, $ee, $ef, $f0, $f2, $f4
177e0     F7 FB FE 01 
177e4     05 08 0B 0E 
177e8     0F 10 11 11 
177ec     11 0F 0D 0B | 	byte	$f7, $fb, $fe, $01, $05, $08, $0b, $0e, $0f, $10, $11, $11, $11, $0f, $0d, $0b
177f0     08 05 01 FE 
177f4     FB F7 F5 F2 
177f8     F0 EF EF EF 
177fc     F0 F1 F3 F5 | 	byte	$08, $05, $01, $fe, $fb, $f7, $f5, $f2, $f0, $ef, $ef, $ef, $f0, $f1, $f3, $f5
17800     F8 FB FF 02 
17804     06 09 0B 0D 
17808     0F 10 11 11 
1780c     10 0E 0C 0A | 	byte	$f8, $fb, $ff, $02, $06, $09, $0b, $0d, $0f, $10, $11, $11, $10, $0e, $0c, $0a
17810     07 04 01 FD 
17814     FA F7 F4 F2 
17818     F1 EF EF EF 
1781c     F0 F2 F4 F6 | 	byte	$07, $04, $01, $fd, $fa, $f7, $f4, $f2, $f1, $ef, $ef, $ef, $f0, $f2, $f4, $f6
17820     F9 FC FF 03 
17824     06 09 0B 0D 
17828     0F 10 11 10 
1782c     0F 0E 0C 09 | 	byte	$f9, $fc, $ff, $03, $06, $09, $0b, $0d, $0f, $10, $11, $10, $0f, $0e, $0c, $09
17830     07 03 00 FC 
17834     F9 F6 F4 F2 
17838     F0 F0 EF F0 
1783c     F1 F2 F5 F7 | 	byte	$07, $03, $00, $fc, $f9, $f6, $f4, $f2, $f0, $f0, $ef, $f0, $f1, $f2, $f5, $f7
17840     FA FD 00 03 
17844     07 09 0C 0E 
17848     0F 10 10 10 
1784c     0F 0D 0B 09 | 	byte	$fa, $fd, $00, $03, $07, $09, $0c, $0e, $0f, $10, $10, $10, $0f, $0d, $0b, $09
17850     06 03 FF FC 
17854     F9 F6 F4 F2 
17858     F1 F0 F0 F0 
1785c     F1 F3 F5 F8 | 	byte	$06, $03, $ff, $fc, $f9, $f6, $f4, $f2, $f1, $f0, $f0, $f0, $f1, $f3, $f5, $f8
17860     FB FE 01 04 
17864     07 09 0C 0E 
17868     0F 10 10 10 
1786c     0E 0D 0A 08 | 	byte	$fb, $fe, $01, $04, $07, $09, $0c, $0e, $0f, $10, $10, $10, $0e, $0d, $0a, $08
17870     05 02 FF FC 
17874     F9 F6 F4 F2 
17878     F1 F0 F0 F1 
1787c     F2 F3 F5 F9 | 	byte	$05, $02, $ff, $fc, $f9, $f6, $f4, $f2, $f1, $f0, $f0, $f1, $f2, $f3, $f5, $f9
17880     FB FF 02 05 
17884     08 0A 0C 0E 
17888     0F 10 0F 0E 
1788c     0D 0C 09 06 | 	byte	$fb, $ff, $02, $05, $08, $0a, $0c, $0e, $0f, $10, $0f, $0e, $0d, $0c, $09, $06
17890     04 00 FE FB 
17894     F8 F6 F3 F1 
17898     F1 F0 F1 F1 
1789c     F2 F4 F6 F9 | 	byte	$04, $00, $fe, $fb, $f8, $f6, $f3, $f1, $f1, $f0, $f1, $f1, $f2, $f4, $f6, $f9
178a0     FC FF 02 05 
178a4     08 0A 0C 0E 
178a8     0F 0F 10 0E 
178ac     0D 0B 09 06 | 	byte	$fc, $ff, $02, $05, $08, $0a, $0c, $0e, $0f, $0f, $10, $0e, $0d, $0b, $09, $06
178b0     03 01 FD FA 
178b4     F8 F5 F4 F2 
178b8     F1 F1 F1 F2 
178bc     F3 F5 F7 FA | 	byte	$03, $01, $fd, $fa, $f8, $f5, $f4, $f2, $f1, $f1, $f1, $f2, $f3, $f5, $f7, $fa
178c0     FD 00 03 05 
178c4     08 0B 0C 0D 
178c8     0F 0F 0E 0E 
178cc     0C 0A 08 05 | 	byte	$fd, $00, $03, $05, $08, $0b, $0c, $0d, $0f, $0f, $0e, $0e, $0c, $0a, $08, $05
178d0     03 00 FD FA 
178d4     F7 F5 F4 F2 
178d8     F2 F1 F2 F3 
178dc     F4 F6 F8 FB | 	byte	$03, $00, $fd, $fa, $f7, $f5, $f4, $f2, $f2, $f1, $f2, $f3, $f4, $f6, $f8, $fb
178e0     FE 01 03 06 
178e4     09 0B 0C 0D 
178e8     0E 0E 0E 0D 
178ec     0B 09 07 04 | 	byte	$fe, $01, $03, $06, $09, $0b, $0c, $0d, $0e, $0e, $0e, $0d, $0b, $09, $07, $04
178f0     02 FF FC F9 
178f4     F7 F5 F3 F2 
178f8     F2 F2 F2 F3 
178fc     F5 F7 F9 FC | 	byte	$02, $ff, $fc, $f9, $f7, $f5, $f3, $f2, $f2, $f2, $f2, $f3, $f5, $f7, $f9, $fc
17900     FE 01 04 07 
17904     09 0B 0D 0D 
17908     0E 0D 0D 0C 
1790c     0B 09 06 04 | 	byte	$fe, $01, $04, $07, $09, $0b, $0d, $0d, $0e, $0d, $0d, $0c, $0b, $09, $06, $04
17910     01 FF FB F9 
17914     F6 F5 F3 F2 
17918     F2 F2 F3 F4 
1791c     F6 F7 FA FC | 	byte	$01, $ff, $fb, $f9, $f6, $f5, $f3, $f2, $f2, $f2, $f3, $f4, $f6, $f7, $fa, $fc
17920     FF 02 05 07 
17924     09 0B 0D 0D 
17928     0E 0D 0D 0B 
1792c     0A 08 06 03 | 	byte	$ff, $02, $05, $07, $09, $0b, $0d, $0d, $0e, $0d, $0d, $0b, $0a, $08, $06, $03
17930     01 FE FB F9 
17934     F7 F5 F4 F3 
17938     F3 F3 F4 F5 
1793c     F6 F9 FB FE | 	byte	$01, $fe, $fb, $f9, $f7, $f5, $f4, $f3, $f3, $f3, $f4, $f5, $f6, $f9, $fb, $fe
17940     00 03 05 08 
17944     0A 0B 0C 0D 
17948     0E 0D 0C 0B 
1794c     09 07 05 02 | 	byte	$00, $03, $05, $08, $0a, $0b, $0c, $0d, $0e, $0d, $0c, $0b, $09, $07, $05, $02
17950     00 FD FA F8 
17954     F6 F5 F4 F3 
17958     F3 F3 F4 F6 
1795c     F7 F9 FC FE | 	byte	$00, $fd, $fa, $f8, $f6, $f5, $f4, $f3, $f3, $f3, $f4, $f6, $f7, $f9, $fc, $fe
17960     01 03 06 08 
17964     0A 0B 0C 0D 
17968     0D 0C 0B 09 
1796c     08 06 04 01 | 	byte	$01, $03, $06, $08, $0a, $0b, $0c, $0d, $0d, $0c, $0b, $09, $08, $06, $04, $01
17970     FF FC FA F8 
17974     F6 F5 F4 F3 
17978     F3 F4 F5 F6 
1797c     F8 FA FC FF | 	byte	$ff, $fc, $fa, $f8, $f6, $f5, $f4, $f3, $f3, $f4, $f5, $f6, $f8, $fa, $fc, $ff
17980     01 03 06 08 
17984     0A 0B 0B 0C 
17988     0C 0C 0B 09 
1798c     07 05 03 01 | 	byte	$01, $03, $06, $08, $0a, $0b, $0b, $0c, $0c, $0c, $0b, $09, $07, $05, $03, $01
17990     FE FC F9 F8 
17994     F6 F5 F4 F3 
17998     F4 F4 F5 F7 
1799c     F8 FA FD FF | 	byte	$fe, $fc, $f9, $f8, $f6, $f5, $f4, $f3, $f4, $f4, $f5, $f7, $f8, $fa, $fd, $ff
179a0     02 04 06 08 
179a4     09 0B 0C 0C 
179a8     0C 0B 0A 08 
179ac     06 04 02 00 | 	byte	$02, $04, $06, $08, $09, $0b, $0c, $0c, $0c, $0b, $0a, $08, $06, $04, $02, $00
179b0     FE FB FA F7 
179b4     F6 F5 F4 F4 
179b8     F4 F5 F6 F8 
179bc     FA FC FE 00 | 	byte	$fe, $fb, $fa, $f7, $f6, $f5, $f4, $f4, $f4, $f5, $f6, $f8, $fa, $fc, $fe, $00
179c0     03 05 07 08 
179c4     0A 0B 0B 0B 
179c8     0B 0A 09 08 
179cc     05 03 01 FF | 	byte	$03, $05, $07, $08, $0a, $0b, $0b, $0b, $0b, $0a, $09, $08, $05, $03, $01, $ff
179d0     FD FB F9 F7 
179d4     F6 F5 F4 F5 
179d8     F5 F6 F7 F8 
179dc     FB FC FF 01 | 	byte	$fd, $fb, $f9, $f7, $f6, $f5, $f4, $f5, $f5, $f6, $f7, $f8, $fb, $fc, $ff, $01
179e0     03 05 07 09 
179e4     0A 0A 0B 0B 
179e8     0A 0A 08 07 
179ec     05 03 01 FE | 	byte	$03, $05, $07, $09, $0a, $0a, $0b, $0b, $0a, $0a, $08, $07, $05, $03, $01, $fe
179f0     FC FA F8 F7 
179f4     F6 F5 F5 F5 
179f8     F6 F6 F8 F9 
179fc     FB FD FF 01 | 	byte	$fc, $fa, $f8, $f7, $f6, $f5, $f5, $f5, $f6, $f6, $f8, $f9, $fb, $fd, $ff, $01
17a00     03 05 07 08 
17a04     09 0A 0B 0B 
17a08     0A 09 08 06 
17a0c     04 02 00 FE | 	byte	$03, $05, $07, $08, $09, $0a, $0b, $0b, $0a, $09, $08, $06, $04, $02, $00, $fe
17a10     FC FB F9 F7 
17a14     F6 F6 F6 F6 
17a18     F7 F7 F9 FA 
17a1c     FD FE 00 03 | 	byte	$fc, $fb, $f9, $f7, $f6, $f6, $f6, $f6, $f7, $f7, $f9, $fa, $fd, $fe, $00, $03
17a20     04 06 08 09 
17a24     0A 0A 0A 0A 
17a28     09 08 07 05 
17a2c     04 01 00 FD | 	byte	$04, $06, $08, $09, $0a, $0a, $0a, $0a, $09, $08, $07, $05, $04, $01, $00, $fd
17a30     FC FA F8 F7 
17a34     F6 F6 F6 F6 
17a38     F7 F8 F9 FB 
17a3c     FD FE 01 03 | 	byte	$fc, $fa, $f8, $f7, $f6, $f6, $f6, $f6, $f7, $f8, $f9, $fb, $fd, $fe, $01, $03
17a40     05 06 08 09 
17a44     09 0A 09 09 
17a48     08 07 06 04 
17a4c     03 01 FF FD | 	byte	$05, $06, $08, $09, $09, $0a, $09, $09, $08, $07, $06, $04, $03, $01, $ff, $fd
17a50     FB F9 F8 F7 
17a54     F6 F6 F6 F6 
17a58     F7 F8 F9 FB 
17a5c     FD FF 01 03 | 	byte	$fb, $f9, $f8, $f7, $f6, $f6, $f6, $f6, $f7, $f8, $f9, $fb, $fd, $ff, $01, $03
17a60     05 06 07 09 
17a64     09 0A 0A 09 
17a68     08 07 05 04 
17a6c     02 00 FF FD | 	byte	$05, $06, $07, $09, $09, $0a, $0a, $09, $08, $07, $05, $04, $02, $00, $ff, $fd
17a70     FB F9 F8 F7 
17a74     F6 F6 F6 F7 
17a78     F8 F9 FA FC 
17a7c     FE 00 02 03 | 	byte	$fb, $f9, $f8, $f7, $f6, $f6, $f6, $f7, $f8, $f9, $fa, $fc, $fe, $00, $02, $03
17a80     05 07 08 08 
17a84     09 09 09 09 
17a88     08 06 05 03 
17a8c     02 00 FE FC | 	byte	$05, $07, $08, $08, $09, $09, $09, $09, $08, $06, $05, $03, $02, $00, $fe, $fc
17a90     FA F9 F8 F7 
17a94     F7 F7 F7 F7 
17a98     F8 F9 FB FD 
17a9c     FF 00 02 04 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f7, $f7, $f8, $f9, $fb, $fd, $ff, $00, $02, $04
17aa0     06 07 08 08 
17aa4     09 09 09 08 
17aa8     07 06 04 03 
17aac     01 FF FD FC | 	byte	$06, $07, $08, $08, $09, $09, $09, $08, $07, $06, $04, $03, $01, $ff, $fd, $fc
17ab0     FA F9 F8 F7 
17ab4     F7 F7 F7 F8 
17ab8     F9 FA FC FD 
17abc     FF 01 02 04 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f7, $f8, $f9, $fa, $fc, $fd, $ff, $01, $02, $04
17ac0     06 07 08 09 
17ac4     09 09 08 08 
17ac8     07 05 04 02 
17acc     01 FF FD FB | 	byte	$06, $07, $08, $09, $09, $09, $08, $08, $07, $05, $04, $02, $01, $ff, $fd, $fb
17ad0     FA F9 F8 F7 
17ad4     F7 F7 F8 F8 
17ad8     F9 FA FC FE 
17adc     FF 01 03 05 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f8, $f8, $f9, $fa, $fc, $fe, $ff, $01, $03, $05
17ae0     06 07 08 09 
17ae4     09 09 08 07 
17ae8     06 05 04 02 
17aec     00 FF FD FC | 	byte	$06, $07, $08, $09, $09, $09, $08, $07, $06, $05, $04, $02, $00, $ff, $fd, $fc
17af0     FA F9 F8 F8 
17af4     F8 F8 F8 F9 
17af8     FA FB FD FE 
17afc     00 02 04 05 | 	byte	$fa, $f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fd, $fe, $00, $02, $04, $05
17b00     06 07 08 08 
17b04     08 09 08 07 
17b08     06 05 03 01 
17b0c     00 FE FD FB | 	byte	$06, $07, $08, $08, $08, $09, $08, $07, $06, $05, $03, $01, $00, $fe, $fd, $fb
17b10     FA F9 F8 F8 
17b14     F8 F8 F8 F9 
17b18     FA FC FD FF 
17b1c     01 02 04 05 | 	byte	$fa, $f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fc, $fd, $ff, $01, $02, $04, $05
17b20     06 07 08 08 
17b24     08 08 07 06 
17b28     05 04 02 00 
17b2c     FF FE FC FA | 	byte	$06, $07, $08, $08, $08, $08, $07, $06, $05, $04, $02, $00, $ff, $fe, $fc, $fa
17b30     F9 F8 F8 F7 
17b34     F8 F8 F8 F9 
17b38     FA FC FE FF 
17b3c     01 02 04 05 | 	byte	$f9, $f8, $f8, $f7, $f8, $f8, $f8, $f9, $fa, $fc, $fe, $ff, $01, $02, $04, $05
17b40     07 07 08 08 
17b44     08 08 07 06 
17b48     05 03 02 01 
17b4c     FF FD FC FA | 	byte	$07, $07, $08, $08, $08, $08, $07, $06, $05, $03, $02, $01, $ff, $fd, $fc, $fa
17b50     F9 F8 F8 F8 
17b54     F8 F8 F9 FA 
17b58     FB FC FE 00 
17b5c     01 03 04 05 | 	byte	$f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $00, $01, $03, $04, $05
17b60     07 07 08 08 
17b64     08 07 07 06 
17b68     05 03 02 00 
17b6c     FE FD FB FA | 	byte	$07, $07, $08, $08, $08, $07, $07, $06, $05, $03, $02, $00, $fe, $fd, $fb, $fa
17b70     F9 F8 F8 F8 
17b74     F8 F9 F9 FA 
17b78     FC FD FF 00 
17b7c     02 04 05 06 | 	byte	$f9, $f8, $f8, $f8, $f8, $f9, $f9, $fa, $fc, $fd, $ff, $00, $02, $04, $05, $06
17b80     07 07 08 08 
17b84     08 07 06 05 
17b88     04 02 01 FF 
17b8c     FE FC FB FA | 	byte	$07, $07, $08, $08, $08, $07, $06, $05, $04, $02, $01, $ff, $fe, $fc, $fb, $fa
17b90     F9 F8 F8 F8 
17b94     F8 F9 FA FB 
17b98     FC FE FF 01 
17b9c     02 04 05 06 | 	byte	$f9, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $ff, $01, $02, $04, $05, $06
17ba0     07 07 07 08 
17ba4     07 07 06 05 
17ba8     03 02 01 FF 
17bac     FD FC FB F9 | 	byte	$07, $07, $07, $08, $07, $07, $06, $05, $03, $02, $01, $ff, $fd, $fc, $fb, $f9
17bb0     F9 F8 F7 F8 
17bb4     F8 F9 FA FB 
17bb8     FC FE FF 01 
17bbc     02 04 05 06 | 	byte	$f9, $f8, $f7, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $ff, $01, $02, $04, $05, $06
17bc0     07 07 08 08 
17bc4     07 07 06 04 
17bc8     03 02 00 FF 
17bcc     FD FC FB FA | 	byte	$07, $07, $08, $08, $07, $07, $06, $04, $03, $02, $00, $ff, $fd, $fc, $fb, $fa
17bd0     F9 F9 F8 F9 
17bd4     F9 FA FA FC 
17bd8     FD FE 00 01 
17bdc     03 04 05 06 | 	byte	$f9, $f9, $f8, $f9, $f9, $fa, $fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06
17be0     07 07 08 07 
17be4     07 06 05 04 
17be8     03 02 00 FE 
17bec     FD FC FB FA | 	byte	$07, $07, $08, $07, $07, $06, $05, $04, $03, $02, $00, $fe, $fd, $fc, $fb, $fa
17bf0     F9 F8 F9 F9 
17bf4     F9 FA FB FC 
17bf8     FD FF 01 02 
17bfc     03 05 06 06 | 	byte	$f9, $f8, $f9, $f9, $f9, $fa, $fb, $fc, $fd, $ff, $01, $02, $03, $05, $06, $06
17c00     07 07 07 07 
17c04     07          | 	byte	$07[5]
17c05     06 05 03 02 
17c09     01 FF FE FC 
17c0d     FB FA F9 F9 
17c11     F8 F8 F8 F9 | 	byte	$06, $05, $03, $02, $01, $ff, $fe, $fc, $fb, $fa, $f9, $f9, $f8, $f8, $f8, $f9
17c15     FA FB FC FD 
17c19     FF 00 02 03 
17c1d     04 05 07 07 
17c21     07 07 07 07 | 	byte	$fa, $fb, $fc, $fd, $ff, $00, $02, $03, $04, $05, $07, $07, $07, $07, $07, $07
17c25     06 05 03 02 
17c29     01 FF FD FC 
17c2d     FB FA F9 F9 
17c31     F8 F8 F9 F9 | 	byte	$06, $05, $03, $02, $01, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f8, $f8, $f9, $f9
17c35     FA FB FD FE 
17c39     FF 01 02 04 
17c3d     05 06 07 07 
17c41     07 07 07 07 | 	byte	$fa, $fb, $fd, $fe, $ff, $01, $02, $04, $05, $06, $07, $07, $07, $07, $07, $07
17c45     06 04 03 02 
17c49     01 FF FD FC 
17c4d     FB FA F9 F9 
17c51     F9 F9 F9 F9 | 	byte	$06, $04, $03, $02, $01, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $f9, $f9
17c55     FA FC FD FE 
17c59     00 01 03 04 
17c5d     05 06 07 07 
17c61     07 07 07 06 | 	byte	$fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06, $07, $07, $07, $07, $07, $06
17c65     05 04 03 01 
17c69     00 FF FD FC 
17c6d     FB F9 F9 F9 
17c71     F8 F8 F9 FA | 	byte	$05, $04, $03, $01, $00, $ff, $fd, $fc, $fb, $f9, $f9, $f9, $f8, $f8, $f9, $fa
17c75     FA FC FD FE 
17c79     00 01 03 04 
17c7d     05 06 07 07 
17c81     07 07 07 06 | 	byte	$fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06, $07, $07, $07, $07, $07, $06
17c85     05 04 02 01 
17c89     00 FF FD FC 
17c8d     FB F9 F9 F8 
17c91     F8 F9 F9 FA | 	byte	$05, $04, $02, $01, $00, $ff, $fd, $fc, $fb, $f9, $f9, $f8, $f8, $f9, $f9, $fa
17c95     FB FC FD FE 
17c99     00 02 03 04 
17c9d     05 06 07 07 
17ca1     07 07 06 06 | 	byte	$fb, $fc, $fd, $fe, $00, $02, $03, $04, $05, $06, $07, $07, $07, $07, $06, $06
17ca5     05 04 03 01 
17ca9     00 FE FD FC 
17cad     FB FA F9 F9 
17cb1     F9 F9 FA FB | 	byte	$05, $04, $03, $01, $00, $fe, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fb
17cb5     FC FD FE FF 
17cb9     01 02 03 04 
17cbd     06 06 07 07 
17cc1     07 07 06 05 | 	byte	$fc, $fd, $fe, $ff, $01, $02, $03, $04, $06, $06, $07, $07, $07, $07, $06, $05
17cc5     05 04 02 01 
17cc9     00 FE FD FB 
17ccd     FB FA F9 F9 
17cd1     F9 F9 FA FA | 	byte	$05, $04, $02, $01, $00, $fe, $fd, $fb, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fa
17cd5     FC FC FE FF 
17cd9     01 02 03 05 
17cdd     06 06 07 07 
17ce1     07 06 06 05 | 	byte	$fc, $fc, $fe, $ff, $01, $02, $03, $05, $06, $06, $07, $07, $07, $06, $06, $05
17ce5     04 03 01 00 
17ce9     FF FD FC FB 
17ced     FA FA F9 F9 
17cf1     F9 F9 FA FA | 	byte	$04, $03, $01, $00, $ff, $fd, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $f9, $fa, $fa
17cf5     FB FC FE FF 
17cf9     01 02 03 04 
17cfd     06 06 07 07 
17d01     07 07 06 05 | 	byte	$fb, $fc, $fe, $ff, $01, $02, $03, $04, $06, $06, $07, $07, $07, $07, $06, $05
17d05     04 03 02 00 
17d09     FF FD FC FB 
17d0d     FA F9 F9 F9 
17d11     F9 F9 FA FB | 	byte	$04, $03, $02, $00, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $f9, $fa, $fb
17d15     FC FD FE 00 
17d19     01 02 03 04 
17d1d     05 06 07 07 
17d21     07 06 06 05 | 	byte	$fc, $fd, $fe, $00, $01, $02, $03, $04, $05, $06, $07, $07, $07, $06, $06, $05
17d25     04 03 02 00 
17d29     FF FE FC FB 
17d2d     FA FA F9 F9 
17d31     F9 F9 FB FC | 	byte	$04, $03, $02, $00, $ff, $fe, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $f9, $fb, $fc
17d35     FC FD FF 00 
17d39     02 03 04 05 
17d3d     06 06 07 07 
17d41     07 06 06 05 | 	byte	$fc, $fd, $ff, $00, $02, $03, $04, $05, $06, $06, $07, $07, $07, $06, $06, $05
17d45     04 02 01 00 
17d49     FF FD FC FB 
17d4d     FA F9 F9 F9 
17d51     F9 FA FB FB | 	byte	$04, $02, $01, $00, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fb, $fb
17d55     FC FE FF 01 
17d59     01 03 04 05 
17d5d     06 06 06 06 
17d61     07 06 05 04 | 	byte	$fc, $fe, $ff, $01, $01, $03, $04, $05, $06, $06, $06, $06, $07, $06, $05, $04
17d65     03 02 01 00 
17d69     FE FD FC FB 
17d6d     FA F9 F9 F9 
17d71     F9 FA FA FB | 	byte	$03, $02, $01, $00, $fe, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fa, $fb
17d75     FC FE FF 00 
17d79     02 03 04 05 
17d7d     06 06 07 07 
17d81     06 06 05 04 | 	byte	$fc, $fe, $ff, $00, $02, $03, $04, $05, $06, $06, $07, $07, $06, $06, $05, $04
17d85     03 02 01 FF 
17d89     FF FD FC FB 
17d8d     FA F9 F9 FA 
17d91     FA FA FB FC | 	byte	$03, $02, $01, $ff, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $fa, $fa, $fa, $fb, $fc
17d95     FD FE 00 01 
17d99     02 03 04 05 
17d9d     06 06 07 07 
17da1     06 06 05 04 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $07, $07, $06, $06, $05, $04
17da5     03 02 00 FF 
17da9     FE FD FC FB 
17dad     FA FA FA FA 
17db1     FA FB FB FC | 	byte	$03, $02, $00, $ff, $fe, $fd, $fc, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fb, $fc
17db5     FD FE 00 01 
17db9     02 03 04 05 
17dbd     06 06 06 06 
17dc1     06 05 04 04 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $06, $06, $06, $05, $04, $04
17dc5     02 01 00 FE 
17dc9     FD FC FB FA 
17dcd     FA F9 F9 F9 
17dd1     FA FA FB FC | 	byte	$02, $01, $00, $fe, $fd, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $fa, $fa, $fb, $fc
17dd5     FD FE 00 01 
17dd9     02 03 04 05 
17ddd     06 06 06 06 
17de1     06 05 04 03 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $06, $06, $06, $05, $04, $03
17de5     02 01 00 FE 
17de9     FD FC FB FB 
17ded     FA FA FA FA 
17df1     FA FB FB FD | 	byte	$02, $01, $00, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fb, $fd
17df5     FE FF 00 01 
17df9     03 03 04 05 
17dfd     06 06 06 06 
17e01     05 05 04 03 | 	byte	$fe, $ff, $00, $01, $03, $03, $04, $05, $06, $06, $06, $06, $05, $05, $04, $03
17e05     02 01 FF FE 
17e09     FD FC FB FB 
17e0d     FA FA FA FA 
17e11     FA FB FC FD | 	byte	$02, $01, $ff, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fc, $fd
17e15     FE FF 01 02 
17e19     03 04 05 05 
17e1d     05 06 06 05 
17e21     05 04 04 03 | 	byte	$fe, $ff, $01, $02, $03, $04, $05, $05, $05, $06, $06, $05, $05, $04, $04, $03
17e25     01 01 FF FE 
17e29     FD FC FB FB 
17e2d     FA FA FA FB 
17e31     FB FC FC FD | 	byte	$01, $01, $ff, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fc, $fd
17e35     FF 00 01 02 
17e39     03 04 05 05 
17e3d     05 06 05 05 
17e41     05 04 03 02 | 	byte	$ff, $00, $01, $02, $03, $04, $05, $05, $05, $06, $05, $05, $05, $04, $03, $02
17e45     01 00 FF FE 
17e49     FD FC FB FA 
17e4d     FA FA FA FB 
17e51     FB FB FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fb, $fb, $fd, $fe
17e55     FE 00 01 02 
17e59     03 04 05 05 
17e5d     05 06 06 05 
17e61     05 04 03 02 | 	byte	$fe, $00, $01, $02, $03, $04, $05, $05, $05, $06, $06, $05, $05, $04, $03, $02
17e65     01 00 FF FE 
17e69     FD FC FB FB 
17e6d     FB FA FA FB 
17e71     FB FC FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fa, $fa, $fb, $fb, $fc, $fd, $fe
17e75     FF 00 01 02 
17e79     03 04 05 06 
17e7d     05 06 05 05 
17e81     05 04 03 02 | 	byte	$ff, $00, $01, $02, $03, $04, $05, $06, $05, $06, $05, $05, $05, $04, $03, $02
17e85     01 00 FF FE 
17e89     FD FC FB FB 
17e8d     FB FB FB FB 
17e91     FC FD FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe
17e95     FF 01 02 03 
17e99     03 04 05 05 
17e9d     05 05 05 05 
17ea1     04 03 02 01 | 	byte	$ff, $01, $02, $03, $03, $04, $05, $05, $05, $05, $05, $05, $04, $03, $02, $01
17ea5     00 FF FE FD 
17ea9     FC FC FB FB 
17ead     FA FA FB FB 
17eb1     FB FC FD FE | 	byte	$00, $ff, $fe, $fd, $fc, $fc, $fb, $fb, $fa, $fa, $fb, $fb, $fb, $fc, $fd, $fe
17eb5     FF 00 01 02 
17eb9     03 04 04 05 
17ebd     05 05 05 04 
17ec1     03 03 02 01 | 	byte	$ff, $00, $01, $02, $03, $04, $04, $05, $05, $05, $05, $04, $03, $03, $02, $01
17ec5     00 FF FE FD 
17ec9     FC FB FB FB 
17ecd     FB FB FB FB 
17ed1     FC FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fe, $ff
17ed5     00 01 02 03 
17ed9     03 04 04 05 
17edd     05 05 04 04 
17ee1     04 03 02 01 | 	byte	$00, $01, $02, $03, $03, $04, $04, $05, $05, $05, $04, $04, $04, $03, $02, $01
17ee5     00 FF FE FD 
17ee9     FC FB FB FB 
17eed     FB FB FB FC 
17ef1     FD FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe, $ff
17ef5     00 01 02 02 
17ef9     03 04 04 05 
17efd     05 05 04 04 
17f01     03 02 02 01 | 	byte	$00, $01, $02, $02, $03, $04, $04, $05, $05, $05, $04, $04, $03, $02, $02, $01
17f05     00 FF FE FD 
17f09     FC FC FB FB 
17f0d     FB FB FC FC 
17f11     FD FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fc, $fb, $fb, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
17f15     00 01 02 03 
17f19     03 04 04 05 
17f1d     05 04 04 03 
17f21     03 02 01 01 | 	byte	$00, $01, $02, $03, $03, $04, $04, $05, $05, $04, $04, $03, $03, $02, $01, $01
17f25     00 FF FE FD 
17f29     FD FC FB FC 
17f2d     FB FB FC FC 
17f31     FD FE FF 00 | 	byte	$00, $ff, $fe, $fd, $fd, $fc, $fb, $fc, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $00
17f35     01 02 02 03 
17f39     04 04 04 04 
17f3d     04 04 04 04 
17f41     03 02 01 00 | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $04, $04, $03, $02, $01, $00
17f45     00 FF FE FD 
17f49     FD FC FC FC 
17f4d     FC FC FD FD 
17f51     FD FE FF 00 | 	byte	$00, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $00
17f55     01 02 02 03 
17f59     04 04 04 04 
17f5d     04 04 04 03 
17f61     02 02 01 00 | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $04, $03, $02, $02, $01, $00
17f65     FF FF FE FD 
17f69     FC FC FC FC 
17f6d     FC FD FD FD 
17f71     FE FF FF 00 | 	byte	$ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $ff, $00
17f75     01 02 02 03 
17f79     04 04 04 04 
17f7d     04 04 03 02 
17f81     02 01 00 FF | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $03, $02, $02, $01, $00, $ff
17f85     FE FE FD FC 
17f89     FC FC FC FC 
17f8d     FC FC FD FD 
17f91     FE FF FF 00 | 	byte	$fe, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $00
17f95     01 01 02 03 
17f99     03 03 04 04 
17f9d     03 03 03 02 
17fa1     02 01 00 00 | 	byte	$01, $01, $02, $03, $03, $03, $04, $04, $03, $03, $03, $02, $02, $01, $00, $00
17fa5     FF FE FD FD 
17fa9     FC FC FC FC 
17fad     FC FC FD FE 
17fb1     FE FF FF 01 | 	byte	$ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fe, $fe, $ff, $ff, $01
17fb5     01 01 02 03 
17fb9     03 04 03 04 
17fbd     03 03 03 02 
17fc1     01 00 00 FF | 	byte	$01, $01, $02, $03, $03, $04, $03, $04, $03, $03, $03, $02, $01, $00, $00, $ff
17fc5     FE FE FD FD 
17fc9     FD FD FC FC 
17fcd     FD FD FD FE 
17fd1     FE FF 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $ff, $00, $01
17fd5     01 02 02 03 
17fd9     03 03 03 03 
17fdd     03 03 02 01 
17fe1     01 01 00 FF | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $00, $ff
17fe5     FE FE FD FD 
17fe9     FD FC FC FD 
17fed     FD FD FD FE 
17ff1     FF FF 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $01
17ff5     01 02 02 03 
17ff9     03 03 03 03 
17ffd     03 02 02 01 
18001     01 00 FF FF | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $00, $ff, $ff
18005     FE FD FD FD 
18009     FD FC FC FC 
1800d     FD FD FE FE 
18011     FF 00 00 01 | 	byte	$fe, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $fe, $ff, $00, $00, $01
18015     01 02 02 02 
18019     03 03 03 03 
1801d     03 03 02 01 
18021     01 00 FF FF | 	byte	$01, $02, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $00, $ff, $ff
18025     FE FE FD FD 
18029     FD FD FD FD 
1802d     FD FE FE FF 
18031     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $00, $00, $01, $01
18035     02 02 03 03 
18039     03 03 03 03 
1803d     03 02 02 01 
18041     01 00 00 FF | 	byte	$02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $00, $00, $ff
18045     FE FE FD FD 
18049     FD FD FD FE 
1804d     FE FE FE FF 
18051     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $00, $00, $01, $01
18055     02 02 02 03 
18059     03 03 03 02 
1805d     02 02 01 01 
18061     00 FF FF FF | 	byte	$02, $02, $02, $03, $03, $03, $03, $02, $02, $02, $01, $01, $00, $ff, $ff, $ff
18065     FE FE FD FD 
18069     FD FD FD FD 
1806d     FD FE FE FF 
18071     FF 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $00, $01, $01
18075     02 02 02 03 
18079     03 03 02 02 
1807d     02 02 01 00 
18081     00 00 FF FE | 	byte	$02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $00, $00, $00, $ff, $fe
18085     FE FE FD FD 
18089     FD FD FD FD 
1808d     FD FE FF FF 
18091     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01, $01
18095     02 02 02 02 
18099     03 02 02 02 
1809d     02 02 01 01 
180a1     00 FF FF FE | 	byte	$02, $02, $02, $02, $03, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $ff, $fe
180a5     FE FE FD FD 
180a9     FD FD FD FE 
180ad     FE FF FF 00 
180b1     00 01 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $02
180b5     02 02 03 03 
180b9     03 03 03 02 
180bd     02 01 01 01 
180c1     00 FF FF FE | 	byte	$02, $02, $03, $03, $03, $03, $03, $02, $02, $01, $01, $01, $00, $ff, $ff, $fe
180c5     FE FD FD FD 
180c9     FD FD FE FE 
180cd     FE FF FF 00 
180d1     00 01 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $02
180d5     02 02 02 02 
180d9     03 03 02 02 
180dd     02 01 01 00 
180e1     FF FF FF FE | 	byte	$02, $02, $02, $02, $03, $03, $02, $02, $02, $01, $01, $00, $ff, $ff, $ff, $fe
180e5     FE FD FD FE 
180e9     FD FD FD FE 
180ed     FE FF FF FF 
180f1     00 01 01 02 | 	byte	$fe, $fd, $fd, $fe, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $00, $01, $01, $02
180f5     02 02 02 03 
180f9     03 02 02 02 
180fd     02 02 01 00 
18101     00 FF FF FF | 	byte	$02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $01, $00, $00, $ff, $ff, $ff
18105     FE FE FE FE 
18109     FE FE FE FE | 	byte	$fe[8]
1810d     FF FF 00 00 
18111     01 01 02 02 
18115     03 03 03 03 
18119     03 03 02 02 | 	byte	$ff, $ff, $00, $00, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02
1811d     01 01 01 00 
18121     00 FF FF FE 
18125     FE FE FE FE 
18129     FE FE FE FE | 	byte	$01, $01, $01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe
1812d     FF FF 00 00 
18131     01 01 02 02 
18135     02 02 03 02 
18139     02 02 02 02 | 	byte	$ff, $ff, $00, $00, $01, $01, $02, $02, $02, $02, $03, $02, $02, $02, $02, $02
1813d     01 01 00 00 
18141     FF FF FE FE 
18145     FE FE FD FD 
18149     FD FE FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe
1814d     FF FF 00 00 
18151     00 01 01 02 
18155     02 02 02 02 
18159     03 02 02 02 | 	byte	$ff, $ff, $00, $00, $00, $01, $01, $02, $02, $02, $02, $02, $03, $02, $02, $02
1815d     01 01 00 00 
18161     FF FF FE FE 
18165     FD FD FD FD 
18169     FD FE FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe
1816d     FE FF 00 00 
18171     01 01 01 02 
18175     02 02 02 02 
18179     02 02 02 01 | 	byte	$fe, $ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01
1817d     01 01 00 FF 
18181     FF FF FE FE 
18185     FD FD FD FD 
18189     FD FE FE FE | 	byte	$01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe
1818d     FF 00 00 01 
18191     01 01 02 02 
18195     02 02 02 02 
18199     02 02 02 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01
1819d     01 00 00 FF 
181a1     FE FE FE FE 
181a5     FE FD FD FE 
181a9     FE FE FE FE | 	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $fe
181ad     FF 00 00 01 
181b1     01 01 02 02 
181b5     02 02 02 02 
181b9     02 02 01 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01
181bd     01 00 00 FF 
181c1     FF FE FE FE 
181c5     FE FD FD FD 
181c9     FD FE FE FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe
181cd     FF 00 00 01 
181d1     01 01 01 02 
181d5     02 02 03 02 
181d9     02 02 02 01 | 	byte	$ff, $00, $00, $01, $01, $01, $01, $02, $02, $02, $03, $02, $02, $02, $02, $01
181dd     00 00 00 FF 
181e1     FF FF FE FE 
181e5     FE FE FE FE 
181e9     FE FE FE FF | 	byte	$00, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff
181ed     00 00 01 01 
181f1     02 02 02 02 
181f5     02 03 03 03 
181f9     02 02 02 01 | 	byte	$00, $00, $01, $01, $02, $02, $02, $02, $02, $03, $03, $03, $02, $02, $02, $01
181fd     01 00 FF FF 
18201     FF FE FE FE 
18205     FE FD FE FE 
18209     FE FF FF FF | 	byte	$01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $fe, $ff, $ff, $ff
1820d     00 00 00 01 
18211     01 01 02 02 
18215     02 02 02 02 
18219     02 02 01 01 | 	byte	$00, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01
1821d     01 00 FF FF 
18221     FE FE FE FD 
18225     FD FD FD FE 
18229     FE FE FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff
1822d     FF 00 00 01 
18231     01 01 02 02 
18235     02 02 02 02 
18239     02 01 01 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
1823d     01 00 FF FF 
18241     FF FE FE FE 
18245     FD FE FD FE 
18249     FE FE FF FF | 	byte	$01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fe, $fd, $fe, $fe, $fe, $ff, $ff
1824d     00 00 01 01 
18251     01 01 02 02 
18255     02 02 02 02 
18259     02 01 01 00 | 	byte	$00, $00, $01, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00
1825d     00 00 FF FF 
18261     FE FE FE FD 
18265     FE FD FE FE 
18269     FE FF FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fe, $fd, $fe, $fe, $fe, $ff, $ff, $ff
1826d     00 00 01 01 
18271     01 02 02 02 
18275     02 02 02 02 
18279     02 01 01 01 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
1827d     00 00 FF FF 
18281     FE FE FE FD 
18285     FD FD FD FE 
18289     FE FE FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff
1828d     00 00 01 01 
18291     01 02 02 02 
18295     02 02 02 02 
18299     02 01 01 01 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
1829d     00 FF FF FF 
182a1     FE FE FE 00 
182a5     00 00 00 2E 
182a9     2D 2B 29 26 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $00, $00, $00, $00, $2e, $2d, $2b, $29, $26
182ad     25 23 21 1F 
182b1     1E 1C 1A 18 
182b5     16 14 12 10 
182b9     0E 0C 09 07 | 	byte	$25, $23, $21, $1f, $1e, $1c, $1a, $18, $16, $14, $12, $10, $0e, $0c, $09, $07
182bd     06 03 01 FE 
182c1     FC FA F7 F5 
182c5     F2 F1 EE EC 
182c9     E9 E7 E5 E3 | 	byte	$06, $03, $01, $fe, $fc, $fa, $f7, $f5, $f2, $f1, $ee, $ec, $e9, $e7, $e5, $e3
182cd     E0 DF DC DA 
182d1     D8 D6 D4 D3 
182d5     D1 CF CE CC 
182d9     CB C9 C9 C8 | 	byte	$e0, $df, $dc, $da, $d8, $d6, $d4, $d3, $d1, $cf, $ce, $cc, $cb, $c9, $c9, $c8
182dd     C7 C6 C6 C5 
182e1     C5 C5 C5 C5 
182e5     C6 C6 C6 C7 
182e9     C7 C8 C9 C9 | 	byte	$c7, $c6, $c6, $c5, $c5, $c5, $c5, $c5, $c6, $c6, $c6, $c7, $c7, $c8, $c9, $c9
182ed     CA CB CD CE 
182f1     CF D1 D2 D3 
182f5     D4 D5 D7 D9 
182f9     DA DC DE E0 | 	byte	$ca, $cb, $cd, $ce, $cf, $d1, $d2, $d3, $d4, $d5, $d7, $d9, $da, $dc, $de, $e0
182fd     E1 E3 E4 E7 
18301     E9 EC EE F1 
18305     F4 F7 FC 00 
18309     06 0F 19 24 | 	byte	$e1, $e3, $e4, $e7, $e9, $ec, $ee, $f1, $f4, $f7, $fc, $00, $06, $0f, $19, $24
1830d     30 3F 50 5F 
18311     6C 6B 52 1B 
18315     E0 D5 F1 0D 
18319     23 31 3B 41 | 	byte	$30, $3f, $50, $5f, $6c, $6b, $52, $1b, $e0, $d5, $f1, $0d, $23, $31, $3b, $41
1831d     46 47 49 4A 
18321     4A 49 48 46 
18325     44 42 40 3E 
18329     3C 3A 38 35 | 	byte	$46, $47, $49, $4a, $4a, $49, $48, $46, $44, $42, $40, $3e, $3c, $3a, $38, $35
1832d     33 31 2F 2C 
18331     2A 27 25 23 
18335     21 1F 1D 1A 
18339     18 15 13 10 | 	byte	$33, $31, $2f, $2c, $2a, $27, $25, $23, $21, $1f, $1d, $1a, $18, $15, $13, $10
1833d     0E 0C 09 07 
18341     05 02 00 FD 
18345     FB F8 F5 F3 
18349     F1 EF EC EA | 	byte	$0e, $0c, $09, $07, $05, $02, $00, $fd, $fb, $f8, $f5, $f3, $f1, $ef, $ec, $ea
1834d     E8 E6 E4 E2 
18351     E0 DE DC DB 
18355     D9 D7 D6 D4 
18359     D3 D3 D2 D1 | 	byte	$e8, $e6, $e4, $e2, $e0, $de, $dc, $db, $d9, $d7, $d6, $d4, $d3, $d3, $d2, $d1
1835d     D0 D0 CF CE 
18361     CE CD CD CD 
18365     CD CE CE CF 
18369     CF CF D0 D1 | 	byte	$d0, $d0, $cf, $ce, $ce, $cd, $cd, $cd, $cd, $ce, $ce, $cf, $cf, $cf, $d0, $d1
1836d     D1 D3 D3 D4 
18371     D5 D6 D8 D9 
18375     DA DB DD DE 
18379     E0 E1 E3 E5 | 	byte	$d1, $d3, $d3, $d4, $d5, $d6, $d8, $d9, $da, $db, $dd, $de, $e0, $e1, $e3, $e5
1837d     E7 EA EC EF 
18381     F2 F4 F7 FB 
18385     00 05 0A 11 
18389     18 22 2C 38 | 	byte	$e7, $ea, $ec, $ef, $f2, $f4, $f7, $fb, $00, $05, $0a, $11, $18, $22, $2c, $38
1838d     45 53 5D 65 
18391     62 4C 27 F4 
18395     D1 CC D9 EE 
18399     FF 0E 19 23 | 	byte	$45, $53, $5d, $65, $62, $4c, $27, $f4, $d1, $cc, $d9, $ee, $ff, $0e, $19, $23
1839d     2B 31 36 39 
183a1     3B 3D 3D 3C 
183a5     3C 3B 3A 39 
183a9     38 36 35 33 | 	byte	$2b, $31, $36, $39, $3b, $3d, $3d, $3c, $3c, $3b, $3a, $39, $38, $36, $35, $33
183ad     31 2F 2E 2B 
183b1     29 27 25 23 
183b5     21 1F 1C 1A 
183b9     17 15 13 10 | 	byte	$31, $2f, $2e, $2b, $29, $27, $25, $23, $21, $1f, $1c, $1a, $17, $15, $13, $10
183bd     0F 0C 0A 08 
183c1     06 03 02 FF 
183c5     FD FA F8 F6 
183c9     F4 F2 F0 EE | 	byte	$0f, $0c, $0a, $08, $06, $03, $02, $ff, $fd, $fa, $f8, $f6, $f4, $f2, $f0, $ee
183cd     EB EA E8 E6 
183d1     E4 E3 E2 E0 
183d5     DE DC DB DA 
183d9     D9 D8 D7 D6 | 	byte	$eb, $ea, $e8, $e6, $e4, $e3, $e2, $e0, $de, $dc, $db, $da, $d9, $d8, $d7, $d6
183dd     D6 D5 D5 D4 
183e1     D4 D4 D3 D3 
183e5     D3 D4 D4 D4 
183e9     D4 D5 D6 D6 | 	byte	$d6, $d5, $d5, $d4, $d4, $d4, $d3, $d3, $d3, $d4, $d4, $d4, $d4, $d5, $d6, $d6
183ed     D7 D8 D9 DA 
183f1     DB DC DE DF 
183f5     E1 E2 E4 E7 
183f9     E8 EA EC EE | 	byte	$d7, $d8, $d9, $da, $db, $dc, $de, $df, $e1, $e2, $e4, $e7, $e8, $ea, $ec, $ee
183fd     F0 F2 F5 F8 
18401     FB FE 03 09 
18405     0F 15 1B 22 
18409     2C 35 3F 48 | 	byte	$f0, $f2, $f5, $f8, $fb, $fe, $03, $09, $0f, $15, $1b, $22, $2c, $35, $3f, $48
1840d     51 58 59 54 
18411     42 28 02 DE 
18415     C8 C0 C5 D2 
18419     E1 EE FC 08 | 	byte	$51, $58, $59, $54, $42, $28, $02, $de, $c8, $c0, $c5, $d2, $e1, $ee, $fc, $08
1841d     10 1A 20 25 
18421     2A 2C 2F 31 
18425     32 32 32 32 
18429     31 2F 2F 2D | 	byte	$10, $1a, $20, $25, $2a, $2c, $2f, $31, $32, $32, $32, $32, $31, $2f, $2f, $2d
1842d     2C 2A 29 27 
18431     26 24 22 20 
18435     1D 1C 1A 18 
18439     16 14 12 10 | 	byte	$2c, $2a, $29, $27, $26, $24, $22, $20, $1d, $1c, $1a, $18, $16, $14, $12, $10
1843d     0E 0B 0A 08 
18441     06 04 02 00 
18445     FE FC FB F8 
18449     F6 F4 F2 F1 | 	byte	$0e, $0b, $0a, $08, $06, $04, $02, $00, $fe, $fc, $fb, $f8, $f6, $f4, $f2, $f1
1844d     EF ED EC EA 
18451     E8 E7 E5 E4 
18455     E3 E2 E1 E0 
18459     DF DE DE DD | 	byte	$ef, $ed, $ec, $ea, $e8, $e7, $e5, $e4, $e3, $e2, $e1, $e0, $df, $de, $de, $dd
1845d     DC DB DB DA 
18461     DA DA DA DA 
18465     DA DA DB DA 
18469     DB DC DC DD | 	byte	$dc, $db, $db, $da, $da, $da, $da, $da, $da, $da, $db, $da, $db, $dc, $dc, $dd
1846d     DE DE DF E0 
18471     E1 E3 E4 E5 
18475     E6 E8 EB EC 
18479     EE F0 F2 F5 | 	byte	$de, $de, $df, $e0, $e1, $e3, $e4, $e5, $e6, $e8, $eb, $ec, $ee, $f0, $f2, $f5
1847d     F7 FB FE 03 
18481     07 0B 11 17 
18485     1C 23 29 31 
18489     3A 43 4A 4F | 	byte	$f7, $fb, $fe, $03, $07, $0b, $11, $17, $1c, $23, $29, $31, $3a, $43, $4a, $4f
1848d     52 51 4A 3C 
18491     29 0C EE D6 
18495     C3 BB BC C3 
18499     CD D9 E4 F0 | 	byte	$52, $51, $4a, $3c, $29, $0c, $ee, $d6, $c3, $bb, $bc, $c3, $cd, $d9, $e4, $f0
1849d     F8 00 09 10 
184a1     16 1B 1F 21 
184a5     24 26 27 28 
184a9     28 28 29 28 | 	byte	$f8, $00, $09, $10, $16, $1b, $1f, $21, $24, $26, $27, $28, $28, $28, $29, $28
184ad     28 26 25 24 
184b1     23 21 20 1E 
184b5     1D 1B 19 18 
184b9     16 15 13 11 | 	byte	$28, $26, $25, $24, $23, $21, $20, $1e, $1d, $1b, $19, $18, $16, $15, $13, $11
184bd     0F 0E 0C 0A 
184c1     08 06 04 03 
184c5     00 FF FD FB 
184c9     F9 F8 F6 F5 | 	byte	$0f, $0e, $0c, $0a, $08, $06, $04, $03, $00, $ff, $fd, $fb, $f9, $f8, $f6, $f5
184cd     F3 F1 F0 EE 
184d1     ED EC EB EA 
184d5     E9 E8 E9 E8 
184d9     E7 E6 E5 E4 | 	byte	$f3, $f1, $f0, $ee, $ed, $ec, $eb, $ea, $e9, $e8, $e9, $e8, $e7, $e6, $e5, $e4
184dd     E3 E3 E2 E1 
184e1     E1 E1 E0 E0 
184e5     E0 E0 E0 E0 
184e9     E1 E1 E2 E3 | 	byte	$e3, $e3, $e2, $e1, $e1, $e1, $e0, $e0, $e0, $e0, $e0, $e0, $e1, $e1, $e2, $e3
184ed     E4 E4 E5 E6 
184f1     E7 E8 EA EB 
184f5     ED EE F0 F2 
184f9     F4 F7 F9 FC | 	byte	$e4, $e4, $e5, $e6, $e7, $e8, $ea, $eb, $ed, $ee, $f0, $f2, $f4, $f7, $f9, $fc
184fd     00 03 07 0B 
18501     10 14 19 1F 
18505     24 2A 30 36 
18509     3C 42 47 49 | 	byte	$00, $03, $07, $0b, $10, $14, $19, $1f, $24, $2a, $30, $36, $3c, $42, $47, $49
1850d     48 44 3A 2C 
18511     19 03 EB D3 
18515     C4 BA B5 B7 
18519     BD C4 CD D8 | 	byte	$48, $44, $3a, $2c, $19, $03, $eb, $d3, $c4, $ba, $b5, $b7, $bd, $c4, $cd, $d8
1851d     E1 EA F3 FB 
18521     03 08 0C 10 
18525     14 18 1A 1C 
18529     1E 1F 20 20 | 	byte	$e1, $ea, $f3, $fb, $03, $08, $0c, $10, $14, $18, $1a, $1c, $1e, $1f, $20, $20
1852d     20 21 20 20 
18531     1F 1F 1E 1D 
18535     1B 1A 18 18 
18539     17 15 14 12 | 	byte	$20, $21, $20, $20, $1f, $1f, $1e, $1d, $1b, $1a, $18, $18, $17, $15, $14, $12
1853d     11 0F 0E 0C 
18541     0A 09 07 06 
18545     04 03 01 FF 
18549     FD FC FA F9 | 	byte	$11, $0f, $0e, $0c, $0a, $09, $07, $06, $04, $03, $01, $ff, $fd, $fc, $fa, $f9
1854d     F8 F7 F6 F5 
18551     F3 F2 F1 F0 
18555     EF EE EE EC 
18559     EB EB EA EA | 	byte	$f8, $f7, $f6, $f5, $f3, $f2, $f1, $f0, $ef, $ee, $ee, $ec, $eb, $eb, $ea, $ea
1855d     E9 E9 E8 E8 
18561     E8 E8 E8 E7 
18565     E7 E8 E8 E9 
18569     E9 E9 EA EB | 	byte	$e9, $e9, $e8, $e8, $e8, $e8, $e8, $e7, $e7, $e8, $e8, $e9, $e9, $e9, $ea, $eb
1856d     EB EC ED EE 
18571     F0 F1 F2 F4 
18575     F6 F7 F9 FB 
18579     FD 00 02 05 | 	byte	$eb, $ec, $ed, $ee, $f0, $f1, $f2, $f4, $f6, $f7, $f9, $fb, $fd, $00, $02, $05
1857d     08 0C 0F 13 
18581     17 1C 22 27 
18585     2C 31 36 3A 
18589     3E 41 42 41 | 	byte	$08, $0c, $0f, $13, $17, $1c, $22, $27, $2c, $31, $36, $3a, $3e, $41, $42, $41
1858d     3D 37 2C 1D 
18591     0D F9 E6 D3 
18595     C4 B9 B3 B2 
18599     B3 B7 BF C7 | 	byte	$3d, $37, $2c, $1d, $0d, $f9, $e6, $d3, $c4, $b9, $b3, $b2, $b3, $b7, $bf, $c7
1859d     CF D8 E0 E8 
185a1     F0 F7 FD 02 
185a5     07 0B 0F 11 
185a9     13 15 16 18 | 	byte	$cf, $d8, $e0, $e8, $f0, $f7, $fd, $02, $07, $0b, $0f, $11, $13, $15, $16, $18
185ad     19 1A 1A 1A 
185b1     1A 1A 19 19 
185b5     18 19 19 18 
185b9     17 16 15 13 | 	byte	$19, $1a, $1a, $1a, $1a, $1a, $19, $19, $18, $19, $19, $18, $17, $16, $15, $13
185bd     11 10 0E 0D 
185c1     0C 0A 08 07 
185c5     06 04 03 02 
185c9     00 FF FE FD | 	byte	$11, $10, $0e, $0d, $0c, $0a, $08, $07, $06, $04, $03, $02, $00, $ff, $fe, $fd
185cd     FB FA F8 F8 
185d1     F7 F6 F5 F4 
185d5     F4 F3 F2 F1 
185d9     F1 F0 EF EF | 	byte	$fb, $fa, $f8, $f8, $f7, $f6, $f5, $f4, $f4, $f3, $f2, $f1, $f1, $f0, $ef, $ef
185dd     EF EE EE EE 
185e1     EE EE EE EE 
185e5     EE EE EE EE 
185e9     EF EF F0 F0 | 	byte	$ef, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ef, $ef, $f0, $f0
185ed     F1 F2 F3 F4 
185f1     F5 F6 F8 F9 
185f5     FB FE 00 02 
185f9     04 07 09 0C | 	byte	$f1, $f2, $f3, $f4, $f5, $f6, $f8, $f9, $fb, $fe, $00, $02, $04, $07, $09, $0c
185fd     0F 12 17 1C 
18601     1F 23 27 2C 
18605     30 33 37 3A 
18609     3C 3C 3B 38 | 	byte	$0f, $12, $17, $1c, $1f, $23, $27, $2c, $30, $33, $37, $3a, $3c, $3c, $3b, $38
1860d     32 2B 20 14 
18611     04 F4 E3 D3 
18615     C5 BB B4 B1 
18619     B0 B1 B5 BB | 	byte	$32, $2b, $20, $14, $04, $f4, $e3, $d3, $c5, $bb, $b4, $b1, $b0, $b1, $b5, $bb
1861d     C1 C8 D0 D7 
18621     DF E5 EC F1 
18625     F7 FC 01 05 
18629     08 0B 0E 10 | 	byte	$c1, $c8, $d0, $d7, $df, $e5, $ec, $f1, $f7, $fc, $01, $05, $08, $0b, $0e, $10
1862d     12 14 14 14 
18631     15 16 16 16 
18635     17 17 16 16 
18639     15 14 14 13 | 	byte	$12, $14, $14, $14, $15, $16, $16, $16, $17, $17, $16, $16, $15, $14, $14, $13
1863d     12 11 10 0F 
18641     0E 0C 0B 0A 
18645     09 08 07 06 
18649     05 04 03 02 | 	byte	$12, $11, $10, $0f, $0e, $0c, $0b, $0a, $09, $08, $07, $06, $05, $04, $03, $02
1864d     01 00 FE FE 
18651     FC FB FB FA 
18655     F9 F8 F8 F7 
18659     F7 F6 F5 F5 | 	byte	$01, $00, $fe, $fe, $fc, $fb, $fb, $fa, $f9, $f8, $f8, $f7, $f7, $f6, $f5, $f5
1865d     F5 F4 F4 F4 
18661     F4 F4 F4 F4 
18665     F4 F4 F5 F5 
18669     F6 F6 F7 F8 | 	byte	$f5, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f8
1866d     F8 FA FA FC 
18671     FD FE FF 00 
18675     02 04 06 09 
18679     0B 0D 11 14 | 	byte	$f8, $fa, $fa, $fc, $fd, $fe, $ff, $00, $02, $04, $06, $09, $0b, $0d, $11, $14
1867d     17 1A 1E 21 
18681     24 27 2B 2E 
18685     31 33 35 36 
18689     37 36 33 2E | 	byte	$17, $1a, $1e, $21, $24, $27, $2b, $2e, $31, $33, $35, $36, $37, $36, $33, $2e
1868d     28 1F 14 07 
18691     F9 EA DD D0 
18695     C4 BC B5 B1 
18699     AF B0 B2 B6 | 	byte	$28, $1f, $14, $07, $f9, $ea, $dd, $d0, $c4, $bc, $b5, $b1, $af, $b0, $b2, $b6
1869d     BA C0 C7 CD 
186a1     D4 D9 DF E4 
186a5     EA EF F4 F8 
186a9     FC 00 03 06 | 	byte	$ba, $c0, $c7, $cd, $d4, $d9, $df, $e4, $ea, $ef, $f4, $f8, $fc, $00, $03, $06
186ad     09 0B 0D 0E 
186b1     0F 10 11 12 
186b5     12 12 12 12 
186b9     12 12 11 11 | 	byte	$09, $0b, $0d, $0e, $0f, $10, $11, $12, $12, $12, $12, $12, $12, $12, $11, $11
186bd     11 10 0F 0F 
186c1     0E 0D 0D 0C 
186c5     0B 0A 09 08 
186c9     07 06 05 05 | 	byte	$11, $10, $0f, $0f, $0e, $0d, $0d, $0c, $0b, $0a, $09, $08, $07, $06, $05, $05
186cd     04 03 02 02 
186d1     01 00 FF FF 
186d5     FE FD FD FC 
186d9     FC FB FB FB | 	byte	$04, $03, $02, $02, $01, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fb, $fb, $fb
186dd     FA FA FA FA 
186e1     FA FA FA FA | 	byte	$fa[8]
186e5     FB FB FB FB 
186e9     FC FD FD FE 
186ed     FF 00 02 03 
186f1     04 06 07 09 | 	byte	$fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe, $ff, $00, $02, $03, $04, $06, $07, $09
186f5     0B 0C 0E 11 
186f9     13 15 17 1A 
186fd     1D 20 23 25 
18701     29 2C 2E 30 | 	byte	$0b, $0c, $0e, $11, $13, $15, $17, $1a, $1d, $20, $23, $25, $29, $2c, $2e, $30
18705     32 33 33 33 
18709     31 2E 29 24 
1870d     1C 12 08 FC 
18711     EF E3 D7 CC | 	byte	$32, $33, $33, $33, $31, $2e, $29, $24, $1c, $12, $08, $fc, $ef, $e3, $d7, $cc
18715     C2 B9 B4 AF 
18719     AD AD AE B1 
1871d     B5 BA C0 C6 
18721     CC D2 D7 DD | 	byte	$c2, $b9, $b4, $af, $ad, $ad, $ae, $b1, $b5, $ba, $c0, $c6, $cc, $d2, $d7, $dd
18725     E3 E8 ED F0 
18729     F5 F9 FC FF 
1872d     02 05 07 09 
18731     0A 0B 0D 0E | 	byte	$e3, $e8, $ed, $f0, $f5, $f9, $fc, $ff, $02, $05, $07, $09, $0a, $0b, $0d, $0e
18735     0F 0F 10 10 
18739     10 10 10 10 
1873d     10 10 0F 0F 
18741     0F 0E 0E 0D | 	byte	$0f, $0f, $10, $10, $10, $10, $10, $10, $10, $10, $0f, $0f, $0f, $0e, $0e, $0d
18745     0C 0C 0B 0A 
18749     0A 09 08 08 
1874d     07 06 06 05 
18751     04 04 03 03 | 	byte	$0c, $0c, $0b, $0a, $0a, $09, $08, $08, $07, $06, $06, $05, $04, $04, $03, $03
18755     02 02 01 01 
18759     01 01 00 FF 
1875d     00 FF FF FF 
18761     00 00 00 00 | 	byte	$02, $02, $01, $01, $01, $01, $00, $ff, $00, $ff, $ff, $ff, $00, $00, $00, $00
18765     00 00 01 01 
18769     02 03 03 04 
1876d     05 06 07 08 
18771     0A 0B 0D 0F | 	byte	$00, $00, $01, $01, $02, $03, $03, $04, $05, $06, $07, $08, $0a, $0b, $0d, $0f
18775     12 14 16 18 
18779     1A 1C 1E 20 
1877d     23 25 28 2A 
18781     2B 2C 2E 2F | 	byte	$12, $14, $16, $18, $1a, $1c, $1e, $20, $23, $25, $28, $2a, $2b, $2c, $2e, $2f
18785     2F 2E 2D 2B 
18789     28 24 1F 18 
1878d     10 06 FD F1 
18791     E7 DB D1 C7 | 	byte	$2f, $2e, $2d, $2b, $28, $24, $1f, $18, $10, $06, $fd, $f1, $e7, $db, $d1, $c7
18795     BE B8 B2 AE 
18799     AC AC AD AF 
1879d     B2 B6 BA BF 
187a1     C5 CA CF D5 | 	byte	$be, $b8, $b2, $ae, $ac, $ac, $ad, $af, $b2, $b6, $ba, $bf, $c5, $ca, $cf, $d5
187a5     DA E0 E4 E9 
187a9     EE F2 F6 F9 
187ad     FC FE 01 03 
187b1     05 07 09 0A | 	byte	$da, $e0, $e4, $e9, $ee, $f2, $f6, $f9, $fc, $fe, $01, $03, $05, $07, $09, $0a
187b5     0C 0D 0E 0E 
187b9     0F 0F 0F 10 
187bd     10 10 10 10 
187c1     0F 0F 0F 0E | 	byte	$0c, $0d, $0e, $0e, $0f, $0f, $0f, $10, $10, $10, $10, $10, $0f, $0f, $0f, $0e
187c5     0D 0D 0C 0C 
187c9     0C 0B 0B 0A 
187cd     0A 09 09 08 
187d1     08 07 07 07 | 	byte	$0d, $0d, $0c, $0c, $0c, $0b, $0b, $0a, $0a, $09, $09, $08, $08, $07, $07, $07
187d5     06 06 06 06 
187d9     05 05 04 05 
187dd     05 05 04 04 
187e1     05 05 05 05 | 	byte	$06, $06, $06, $06, $05, $05, $04, $05, $05, $05, $04, $04, $05, $05, $05, $05
187e5     05 06 07 08 
187e9     09 09 0A 0B 
187ed     0C 0D 0E 0F 
187f1     11 12 13 14 | 	byte	$05, $06, $07, $08, $09, $09, $0a, $0b, $0c, $0d, $0e, $0f, $11, $12, $13, $14
187f5     16 18 1A 1B 
187f9     1E 20 22 24 
187fd     26 28 29 2B 
18801     2C 2D 2D 2D | 	byte	$16, $18, $1a, $1b, $1e, $20, $22, $24, $26, $28, $29, $2b, $2c, $2d, $2d, $2d
18805     2C 2B 29 26 
18809     22 1D 18 10 
1880d     07 FE F4 EB 
18811     E1 D7 CE C5 | 	byte	$2c, $2b, $29, $26, $22, $1d, $18, $10, $07, $fe, $f4, $eb, $e1, $d7, $ce, $c5
18815     BE B7 B2 AF 
18819     AD AC AC AE 
1881d     B0 B4 B7 BB 
18821     C0 C5 CA CF | 	byte	$be, $b7, $b2, $af, $ad, $ac, $ac, $ae, $b0, $b4, $b7, $bb, $c0, $c5, $ca, $cf
18825     D4 D9 DE E2 
18829     E7 EB EF F2 
1882d     F6 F9 FC FE 
18831     01 03 04 06 | 	byte	$d4, $d9, $de, $e2, $e7, $eb, $ef, $f2, $f6, $f9, $fc, $fe, $01, $03, $04, $06
18835     08 09 0B 0C 
18839     0C 0D 0E 0E 
1883d     0F 0F 0F 0F 
18841     0F 0F 0F 0F | 	byte	$08, $09, $0b, $0c, $0c, $0d, $0e, $0e, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
18845     0F 0E 0E 0E 
18849     0E 0D 0D 0C 
1884d     0C 0C 0C 0C 
18851     0B 0B 0B 0B | 	byte	$0f, $0e, $0e, $0e, $0e, $0d, $0d, $0c, $0c, $0c, $0c, $0c, $0b, $0b, $0b, $0b
18855     0C 0C 0B 0B 
18859     0A 0A 0A 0A 
1885d     0A 0A 0A 09 
18861     09 09 09 0A | 	byte	$0c, $0c, $0b, $0b, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $09, $09, $09, $09, $0a
18865     0A 0A 0B 0C 
18869     0C 0D 0E 0F 
1886d     11 12 13 14 
18871     16 17 19 1A | 	byte	$0a, $0a, $0b, $0c, $0c, $0d, $0e, $0f, $11, $12, $13, $14, $16, $17, $19, $1a
18875     1B 1D 1F 20 
18879     22 23 25 26 
1887d     28 29 2A 2B 
18881     2B 2B 2B 29 | 	byte	$1b, $1d, $1f, $20, $22, $23, $25, $26, $28, $29, $2a, $2b, $2b, $2b, $2b, $29
18885     27 25 22 1E 
18889     1A 14 0D 05 
1888d     FE F5 EC E3 
18891     DA D1 CA C2 | 	byte	$27, $25, $22, $1e, $1a, $14, $0d, $05, $fe, $f5, $ec, $e3, $da, $d1, $ca, $c2
18895     BC B7 B2 AF 
18899     AD AD AD AD 
1889d     B0 B2 B6 BA 
188a1     BE C2 C7 CC | 	byte	$bc, $b7, $b2, $af, $ad, $ad, $ad, $ad, $b0, $b2, $b6, $ba, $be, $c2, $c7, $cc
188a5     D0 D5 D9 DE 
188a9     E2 E6 EA EE 
188ad     F1 F5 F7 FA 
188b1     FC FF 01 03 | 	byte	$d0, $d5, $d9, $de, $e2, $e6, $ea, $ee, $f1, $f5, $f7, $fa, $fc, $ff, $01, $03
188b5     05 07 08 0A 
188b9     0B 0B 0C 0D 
188bd     0E 0E 0F 0F 
188c1     0F 0F 0F 10 | 	byte	$05, $07, $08, $0a, $0b, $0b, $0c, $0d, $0e, $0e, $0f, $0f, $0f, $0f, $0f, $10
188c5     10 10 10 10 
188c9     10 10 10 10 | 	byte	$10[8]
188cd     0F 0F 0F 0F 
188d1     0F          | 	byte	$0f[5]
188d2     0E 0E 0E 0E 
188d6     0E          | 	byte	$0e[5]
188d7     0D 0E 0E 0D 
188db     0D 0D 0D 0D 
188df     0D 0E 0F 0F 
188e3     0F 0F 10 10 | 	byte	$0d, $0e, $0e, $0d, $0d, $0d, $0d, $0d, $0d, $0e, $0f, $0f, $0f, $0f, $10, $10
188e7     11 12 12 13 
188eb     14 15 16 16 
188ef     17 19 1A 1B 
188f3     1D 1F 20 21 | 	byte	$11, $12, $12, $13, $14, $15, $16, $16, $17, $19, $1a, $1b, $1d, $1f, $20, $21
188f7     22 24 25 26 
188fb     28 29 2A 2A 
188ff     2A 2B 2A 29 
18903     27 25 23 1F | 	byte	$22, $24, $25, $26, $28, $29, $2a, $2a, $2a, $2b, $2a, $29, $27, $25, $23, $1f
18907     1C 17 12 0B 
1890b     05 FE F5 EE 
1890f     E5 DD D5 CD 
18913     C7 C0 BB B6 | 	byte	$1c, $17, $12, $0b, $05, $fe, $f5, $ee, $e5, $dd, $d5, $cd, $c7, $c0, $bb, $b6
18917     B2 AF AE AD 
1891b     AD AE B0 B2 
1891f     B5 B9 BC C0 
18923     C4 C8 CD D2 | 	byte	$b2, $af, $ae, $ad, $ad, $ae, $b0, $b2, $b5, $b9, $bc, $c0, $c4, $c8, $cd, $d2
18927     D6 DB DF E3 
1892b     E6 EA ED F0 
1892f     F4 F7 F9 FC 
18933     FE 02 04 06 | 	byte	$d6, $db, $df, $e3, $e6, $ea, $ed, $f0, $f4, $f7, $f9, $fc, $fe, $02, $04, $06
18937     08 09 0A 0B 
1893b     0C 0D 0E 0E 
1893f     0F 0E 0F 0F 
18943     0F 0F 0F 10 | 	byte	$08, $09, $0a, $0b, $0c, $0d, $0e, $0e, $0f, $0e, $0f, $0f, $0f, $0f, $0f, $10
18947     10 10 10 10 
1894b     10 10 10 10 
1894f     10 10 10    | 	byte	$10[11]
18952     11 11 11 10 
18956     10 10 11 10 
1895a     11 11 11 11 
1895e     11 12 12 12 | 	byte	$11, $11, $11, $10, $10, $10, $11, $10, $11, $11, $11, $11, $11, $12, $12, $12
18962     13 13 13 14 
18966     15 16 16 17 
1896a     18 19 1A 1A 
1896e     1B 1C 1D 1F | 	byte	$13, $13, $13, $14, $15, $16, $16, $17, $18, $19, $1a, $1a, $1b, $1c, $1d, $1f
18972     20 21 21 23 
18976     24 25 26 27 
1897a     28 29 29 29 
1897e     29 29 28 27 | 	byte	$20, $21, $21, $23, $24, $25, $26, $27, $28, $29, $29, $29, $29, $29, $28, $27
18982     25 23 20 1D 
18986     1A 15 10 0A 
1898a     05 FE F6 EF 
1898e     E7 E0 D8 D1 | 	byte	$25, $23, $20, $1d, $1a, $15, $10, $0a, $05, $fe, $f6, $ef, $e7, $e0, $d8, $d1
18992     CB C4 BE BA 
18996     B6 B2 B0 AF 
1899a     AE AE AF B0 
1899e     B2 B5 B8 BB | 	byte	$cb, $c4, $be, $ba, $b6, $b2, $b0, $af, $ae, $ae, $af, $b0, $b2, $b5, $b8, $bb
189a2     BF C3 C6 CB 
189a6     CF D3 D8 DB 
189aa     DF E3 E7 EA 
189ae     ED F1 F4 F7 | 	byte	$bf, $c3, $c6, $cb, $cf, $d3, $d8, $db, $df, $e3, $e7, $ea, $ed, $f1, $f4, $f7
189b2     F9 FB FE 00 
189b6     02 04 06 07 
189ba     09 0A 0C 0D 
189be     0E 0E 0F 10 | 	byte	$f9, $fb, $fe, $00, $02, $04, $06, $07, $09, $0a, $0c, $0d, $0e, $0e, $0f, $10
189c2     10 11 11 12 
189c6     12 12 12 12 
189ca     13 13 13 13 
189ce     13 13 13 13 | 	byte	$10, $11, $11, $12, $12, $12, $12, $12, $13, $13, $13, $13, $13, $13, $13, $13
189d2     13 13 13 14 
189d6     14 14 14 15 
189da     15 15 15 15 
189de     16 16 16 16 | 	byte	$13, $13, $13, $14, $14, $14, $14, $15, $15, $15, $15, $15, $16, $16, $16, $16
189e2     17 18 18 19 
189e6     19 1A 1B 1B 
189ea     1C 1D 1E 1F 
189ee     20 20 21 22 | 	byte	$17, $18, $18, $19, $19, $1a, $1b, $1b, $1c, $1d, $1e, $1f, $20, $20, $21, $22
189f2     23 24 25 26 
189f6     27 27 28 29 
189fa     29 29 29 29 
189fe     28 27 26 24 | 	byte	$23, $24, $25, $26, $27, $27, $28, $29, $29, $29, $29, $29, $28, $27, $26, $24
18a02     21 1E 1B 18 
18a06     13 0F 0A 04 
18a0a     FE F7 F1 EA 
18a0e     E3 DC D5 CF | 	byte	$21, $1e, $1b, $18, $13, $0f, $0a, $04, $fe, $f7, $f1, $ea, $e3, $dc, $d5, $cf
18a12     C9 C4 C0 BC 
18a16     B8 B5 B2 B0 
18a1a     AF B0 B0 B1 
18a1e     B3 B5 B7 B9 | 	byte	$c9, $c4, $c0, $bc, $b8, $b5, $b2, $b0, $af, $b0, $b0, $b1, $b3, $b5, $b7, $b9
18a22     BD C1 C4 C8 
18a26     CB D0 D3 D8 
18a2a     DC E0 E3 E7 
18a2e     EA ED F0 F3 | 	byte	$bd, $c1, $c4, $c8, $cb, $d0, $d3, $d8, $dc, $e0, $e3, $e7, $ea, $ed, $f0, $f3
18a32     F6 F8 FB FD 
18a36     FF 02 03 04 
18a3a     07 08 09 0B 
18a3e     0C 0D 0E 0F | 	byte	$f6, $f8, $fb, $fd, $ff, $02, $03, $04, $07, $08, $09, $0b, $0c, $0d, $0e, $0f
18a42     10 11 11 12 
18a46     12 13 13 14 
18a4a     14 14 15 15 
18a4e     15 15 16 16 | 	byte	$10, $11, $11, $12, $12, $13, $13, $14, $14, $14, $15, $15, $15, $15, $16, $16
18a52     16 16 16 17 
18a56     17 17 17 17 
18a5a     18 18 18 19 
18a5e     19 1A 1B 1B | 	byte	$16, $16, $16, $17, $17, $17, $17, $17, $18, $18, $18, $19, $19, $1a, $1b, $1b
18a62     1B 1B 1B 1C 
18a66     1D 1D 1E 1F 
18a6a     1F 20 21 21 
18a6e     22 23 24 25 | 	byte	$1b, $1b, $1b, $1c, $1d, $1d, $1e, $1f, $1f, $20, $21, $21, $22, $23, $24, $25
18a72     26 27 27 28 
18a76     28 28 29 29 
18a7a     29 28 28 27 
18a7e     26 25 23 21 | 	byte	$26, $27, $27, $28, $28, $28, $29, $29, $29, $28, $28, $27, $26, $25, $23, $21
18a82     1E 1B 17 13 
18a86     0E 0A 05 00 
18a8a     FA F3 ED E6 
18a8e     E0 D9 D4 CE | 	byte	$1e, $1b, $17, $13, $0e, $0a, $05, $00, $fa, $f3, $ed, $e6, $e0, $d9, $d4, $ce
18a92     C9 C3 BF BB 
18a96     B7 B4 B2 B1 
18a9a     B0 B0 B1 B1 
18a9e     B3 B5 B7 BA | 	byte	$c9, $c3, $bf, $bb, $b7, $b4, $b2, $b1, $b0, $b0, $b1, $b1, $b3, $b5, $b7, $ba
18aa2     BD C0 C4 C7 
18aa6     CB CF D2 D6 
18aaa     D9 DD E1 E5 
18aae     E8 EB EE F1 | 	byte	$bd, $c0, $c4, $c7, $cb, $cf, $d2, $d6, $d9, $dd, $e1, $e5, $e8, $eb, $ee, $f1
18ab2     F4 F7 F9 FB 
18ab6     FE 00 02 04 
18aba     06 08 09 0B 
18abe     0C 0D 0E 0F | 	byte	$f4, $f7, $f9, $fb, $fe, $00, $02, $04, $06, $08, $09, $0b, $0c, $0d, $0e, $0f
18ac2     10 11 12 12 
18ac6     13 14 14 15 
18aca     15 16 16 16 
18ace     16 16 17 18 | 	byte	$10, $11, $12, $12, $13, $14, $14, $15, $15, $16, $16, $16, $16, $16, $17, $18
18ad2     18 19 19 19 
18ad6     1A 1A 1A 1B 
18ada     1B 1B 1B 1C 
18ade     1C 1D 1D 1D | 	byte	$18, $19, $19, $19, $1a, $1a, $1a, $1b, $1b, $1b, $1b, $1c, $1c, $1d, $1d, $1d
18ae2     1E 1E 1F 20 
18ae6     21 21 21 22 
18aea     23 23 24 25 
18aee     25 26 26 27 | 	byte	$1e, $1e, $1f, $20, $21, $21, $21, $22, $23, $23, $24, $25, $25, $26, $26, $27
18af2     28 29 2A 2B 
18af6     2A 2A 2A 29 
18afa     29 28 27 25 
18afe     24 21 1F 1C | 	byte	$28, $29, $2a, $2b, $2a, $2a, $2a, $29, $29, $28, $27, $25, $24, $21, $1f, $1c
18b02     19 15 11 0E 
18b06     09 05 FF FA 
18b0a     F4 EE E8 E2 
18b0e     DC D6 D1 CC | 	byte	$19, $15, $11, $0e, $09, $05, $ff, $fa, $f4, $ee, $e8, $e2, $dc, $d6, $d1, $cc
18b12     C7 C2 BE BB 
18b16     B7 B5 B3 B1 
18b1a     B1 B0 B1 B2 
18b1e     B3 B5 B7 B9 | 	byte	$c7, $c2, $be, $bb, $b7, $b5, $b3, $b1, $b1, $b0, $b1, $b2, $b3, $b5, $b7, $b9
18b22     BC BF C2 C5 
18b26     C9 CD D0 D4 
18b2a     D7 DB DE E2 
18b2e     E5 E8 EC EE | 	byte	$bc, $bf, $c2, $c5, $c9, $cd, $d0, $d4, $d7, $db, $de, $e2, $e5, $e8, $ec, $ee
18b32     F1 F4 F7 F9 
18b36     FB FE 00 03 
18b3a     04 06 08 0A 
18b3e     0B 0D 0E 0F | 	byte	$f1, $f4, $f7, $f9, $fb, $fe, $00, $03, $04, $06, $08, $0a, $0b, $0d, $0e, $0f
18b42     10 11 11 12 
18b46     14 14 15 15 
18b4a     16 17 17 18 
18b4e     18 19 1A 1A | 	byte	$10, $11, $11, $12, $14, $14, $15, $15, $16, $17, $17, $18, $18, $19, $1a, $1a
18b52     1B 1B 1B 1C 
18b56     1C 1C 1C 1D 
18b5a     1E 1E 1F 1F 
18b5e     1F 20 20 21 | 	byte	$1b, $1b, $1b, $1c, $1c, $1c, $1c, $1d, $1e, $1e, $1f, $1f, $1f, $20, $20, $21
18b62     21 22 22 23 
18b66     23 24 25 26 
18b6a     26 27 27 28 
18b6e     29 29 29 29 | 	byte	$21, $22, $22, $23, $23, $24, $25, $26, $26, $27, $27, $28, $29, $29, $29, $29
18b72     2A 2A 2A 2A 
18b76     2A          | 	byte	$2a[5]
18b77     29 29 28 27 
18b7b     26 25 23 21 
18b7f     1F 1C 1A 16 
18b83     13 0F 0A 06 | 	byte	$29, $29, $28, $27, $26, $25, $23, $21, $1f, $1c, $1a, $16, $13, $0f, $0a, $06
18b87     01 FC F7 F1 
18b8b     EB E5 E0 DA 
18b8f     D5 D0 CC C7 
18b93     C3 BF BB B9 | 	byte	$01, $fc, $f7, $f1, $eb, $e5, $e0, $da, $d5, $d0, $cc, $c7, $c3, $bf, $bb, $b9
18b97     B6 B4 B3 B2 
18b9b     B2 B2 B3 B4 
18b9f     B5 B8 BA BC 
18ba3     BF C2 C5 C8 | 	byte	$b6, $b4, $b3, $b2, $b2, $b2, $b3, $b4, $b5, $b8, $ba, $bc, $bf, $c2, $c5, $c8
18ba7     CC CF D2 D6 
18bab     D9 DD DF E3 
18baf     E6 E9 EC EF 
18bb3     F2 F5 F7 FA | 	byte	$cc, $cf, $d2, $d6, $d9, $dd, $df, $e3, $e6, $e9, $ec, $ef, $f2, $f5, $f7, $fa
18bb7     FC FF 01 03 
18bbb     05 07 09 0A 
18bbf     0C 0D 0E 10 
18bc3     11 12 13 14 | 	byte	$fc, $ff, $01, $03, $05, $07, $09, $0a, $0c, $0d, $0e, $10, $11, $12, $13, $14
18bc7     15 16 17 18 
18bcb     18 19 1A 1A 
18bcf     1B 1C 1C 1D 
18bd3     1F 1F 1F 1F | 	byte	$15, $16, $17, $18, $18, $19, $1a, $1a, $1b, $1c, $1c, $1d, $1f, $1f, $1f, $1f
18bd7     20 20 20 21 
18bdb     21 21 21 22 
18bdf     22 22 22 23 
18be3     23 24 24 25 | 	byte	$20, $20, $20, $21, $21, $21, $21, $22, $22, $22, $22, $23, $23, $24, $24, $25
18be7     25 26 26 27 
18beb     27 28 28 28 
18bef     29 29 2A 2A 
18bf3     2A 29 2A 29 | 	byte	$25, $26, $26, $27, $27, $28, $28, $28, $29, $29, $2a, $2a, $2a, $29, $2a, $29
18bf7     29 28 27 26 
18bfb     24 23 21 1F 
18bff     1D 1A 17 14 
18c03     10 0C 08 04 | 	byte	$29, $28, $27, $26, $24, $23, $21, $1f, $1d, $1a, $17, $14, $10, $0c, $08, $04
18c07     FE FA F5 F0 
18c0b     EA E5 E0 DA 
18c0f     D5 D1 CC C7 
18c13     C4 C0 BD BA | 	byte	$fe, $fa, $f5, $f0, $ea, $e5, $e0, $da, $d5, $d1, $cc, $c7, $c4, $c0, $bd, $ba
18c17     B8 B6 B5 B4 
18c1b     B4 B4 B4 B5 
18c1f     B6 B8 B9 BB 
18c23     BE C0 C3 C6 | 	byte	$b8, $b6, $b5, $b4, $b4, $b4, $b4, $b5, $b6, $b8, $b9, $bb, $be, $c0, $c3, $c6
18c27     C9 CC CF D3 
18c2b     D6 D9 DD E0 
18c2f     E3 E7 EA ED 
18c33     F0 F3 F5 F7 | 	byte	$c9, $cc, $cf, $d3, $d6, $d9, $dd, $e0, $e3, $e7, $ea, $ed, $f0, $f3, $f5, $f7
18c37     FA FC FF 01 
18c3b     03 05 07 09 
18c3f     0B 0C 0D 0F 
18c43     11 12 14 15 | 	byte	$fa, $fc, $ff, $01, $03, $05, $07, $09, $0b, $0c, $0d, $0f, $11, $12, $14, $15
18c47     16 17 18 18 
18c4b     19 1A 1B 1C 
18c4f     1C 1D 1E 1F 
18c53     1F 1F 20 21 | 	byte	$16, $17, $18, $18, $19, $1a, $1b, $1c, $1c, $1d, $1e, $1f, $1f, $1f, $20, $21
18c57     21 22 22 23 
18c5b     23 23 24 24 
18c5f     25 25 26 26 
18c63     27 27 28 28 | 	byte	$21, $22, $22, $23, $23, $23, $24, $24, $25, $25, $26, $26, $27, $27, $28, $28
18c67     29 29 29 29 
18c6b     2A 2A 2A 2B 
18c6f     2B 2B 2B 2B 
18c73     2B 2B 2A 29 | 	byte	$29, $29, $29, $29, $2a, $2a, $2a, $2b, $2b, $2b, $2b, $2b, $2b, $2b, $2a, $29
18c77     29 28 27 26 
18c7b     24 22 20 1E 
18c7f     1B 18 15 12 
18c83     0E 0B 07 03 | 	byte	$29, $28, $27, $26, $24, $22, $20, $1e, $1b, $18, $15, $12, $0e, $0b, $07, $03
18c87     FD F8 F4 EF 
18c8b     E9 E4 E0 DB 
18c8f     D7 D2 CE C9 
18c93     C5 C2 BF BC | 	byte	$fd, $f8, $f4, $ef, $e9, $e4, $e0, $db, $d7, $d2, $ce, $c9, $c5, $c2, $bf, $bc
18c97     BA B8 B6 B5 
18c9b     B5 B4 B5 B5 
18c9f     B6 B7 B9 BB 
18ca3     BD BF C2 C5 | 	byte	$ba, $b8, $b6, $b5, $b5, $b4, $b5, $b5, $b6, $b7, $b9, $bb, $bd, $bf, $c2, $c5
18ca7     C7 CA CD D1 
18cab     D4 D7 DA DE 
18caf     E1 E4 E7 EB 
18cb3     EF F2 F4 F6 | 	byte	$c7, $ca, $cd, $d1, $d4, $d7, $da, $de, $e1, $e4, $e7, $eb, $ef, $f2, $f4, $f6
18cb7     F9 FB FD 00 
18cbb     02 04 06 07 
18cbf     09 0A 0C 0D 
18cc3     0F 10 11 13 | 	byte	$f9, $fb, $fd, $00, $02, $04, $06, $07, $09, $0a, $0c, $0d, $0f, $10, $11, $13
18cc7     14 16 17 18 
18ccb     19 1A 1B 1C 
18ccf     1D 1E 1E 1F 
18cd3     20 20 21 22 | 	byte	$14, $16, $17, $18, $19, $1a, $1b, $1c, $1d, $1e, $1e, $1f, $20, $20, $21, $22
18cd7     22 23 24 24 
18cdb     25 25 25 26 
18cdf     26 27 28 28 
18ce3     29 29 29 2A | 	byte	$22, $23, $24, $24, $25, $25, $25, $26, $26, $27, $28, $28, $29, $29, $29, $2a
18ce7     2A 2A 2B 2B 
18ceb     2C 2C 2C 2C 
18cef     2C 2C 2C 2B 
18cf3     2B 2A 2A 29 | 	byte	$2a, $2a, $2b, $2b, $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2b, $2b, $2a, $2a, $29
18cf7     28 27 26 25 
18cfb     23 21 1F 1D 
18cff     1A 16 13 10 
18d03     0C 09 05 01 | 	byte	$28, $27, $26, $25, $23, $21, $1f, $1d, $1a, $16, $13, $10, $0c, $09, $05, $01
18d07     FC F8 F3 EE 
18d0b     E9 E5 E0 DB 
18d0f     D7 D3 CF CB 
18d13     C7 C3 C0 BE | 	byte	$fc, $f8, $f3, $ee, $e9, $e5, $e0, $db, $d7, $d3, $cf, $cb, $c7, $c3, $c0, $be
18d17     BB B9 B8 B7 
18d1b     B6 B5 B5 B6 
18d1f     B7 B8 B9 BA 
18d23     BD BF C1 C4 | 	byte	$bb, $b9, $b8, $b7, $b6, $b5, $b5, $b6, $b7, $b8, $b9, $ba, $bd, $bf, $c1, $c4
18d27     C6 C9 CC CF 
18d2b     D2 D5 D8 DB 
18d2f     DF E2 E5 E8 
18d33     EB EE F1 F3 | 	byte	$c6, $c9, $cc, $cf, $d2, $d5, $d8, $db, $df, $e2, $e5, $e8, $eb, $ee, $f1, $f3
18d37     F6 F8 FB FD 
18d3b     00 02 04 06 
18d3f     08 0A 0C 0E 
18d43     10 11 12 14 | 	byte	$f6, $f8, $fb, $fd, $00, $02, $04, $06, $08, $0a, $0c, $0e, $10, $11, $12, $14
18d47     15 17 18 19 
18d4b     1A 1B 1C 1D 
18d4f     1E 1F 20 21 
18d53     21 22 23 23 | 	byte	$15, $17, $18, $19, $1a, $1b, $1c, $1d, $1e, $1f, $20, $21, $21, $22, $23, $23
18d57     25 25 26 26 
18d5b     27 27 28 28 
18d5f     29 29 2A 2B 
18d63     2B 2B 2C 2C | 	byte	$25, $25, $26, $26, $27, $27, $28, $28, $29, $29, $2a, $2b, $2b, $2b, $2c, $2c
18d67     2C 2C 2D 2D 
18d6b     2D 2D 2D 2D 
18d6f     2D 2D 2C 2C 
18d73     2B 2B 2A 29 | 	byte	$2c, $2c, $2d, $2d, $2d, $2d, $2d, $2d, $2d, $2d, $2c, $2c, $2b, $2b, $2a, $29
18d77     28 27 25 24 
18d7b     22 20 1D 1B 
18d7f     18 15 12 0E 
18d83     0B 07 03 FE | 	byte	$28, $27, $25, $24, $22, $20, $1d, $1b, $18, $15, $12, $0e, $0b, $07, $03, $fe
18d87     FA F6 F2 ED 
18d8b     E8 E3 DF DB 
18d8f     D7 D3 D0 CD 
18d93     C9 C5 C2 BF | 	byte	$fa, $f6, $f2, $ed, $e8, $e3, $df, $db, $d7, $d3, $d0, $cd, $c9, $c5, $c2, $bf
18d97     BE BB B9 B8 
18d9b     B7 B7 B7 B6 
18d9f     B7 B7 B8 BA 
18da3     BC BD C0 C2 | 	byte	$be, $bb, $b9, $b8, $b7, $b7, $b7, $b6, $b7, $b7, $b8, $ba, $bc, $bd, $c0, $c2
18da7     C5 C8 CA CD 
18dab     D0 D3 D7 DA 
18daf     DD E0 E3 E6 
18db3     E9 EC EF F1 | 	byte	$c5, $c8, $ca, $cd, $d0, $d3, $d7, $da, $dd, $e0, $e3, $e6, $e9, $ec, $ef, $f1
18db7     F4 F7 F9 FC 
18dbb     FE 00 03 05 
18dbf     07 09 0B 0D 
18dc3     0F 11 12 13 | 	byte	$f4, $f7, $f9, $fc, $fe, $00, $03, $05, $07, $09, $0b, $0d, $0f, $11, $12, $13
18dc7     15 17 18 19 
18dcb     1A 1B 1C 1E 
18dcf     1F 20 21 22 
18dd3     23 23 24 25 | 	byte	$15, $17, $18, $19, $1a, $1b, $1c, $1e, $1f, $20, $21, $22, $23, $23, $24, $25
18dd7     26 26 27 28 
18ddb     29 29 2A 2A 
18ddf     2A 2B 2B 2C 
18de3     2D 2D 2D 2D | 	byte	$26, $26, $27, $28, $29, $29, $2a, $2a, $2a, $2b, $2b, $2c, $2d, $2d, $2d, $2d
18de7     2E 2E 2E 2E 
18deb     2E 2E 2E 2E 
18def     2E          | 	byte	$2e[9]
18df0     2D 2D 2C 2C 
18df4     2B 2A 28 27 
18df8     26 24 22 20 
18dfc     1E 1C 19 16 | 	byte	$2d, $2d, $2c, $2c, $2b, $2a, $28, $27, $26, $24, $22, $20, $1e, $1c, $19, $16
18e00     13 10 0C 08 
18e04     05 01 FD F9 
18e08     F4 EF EB E6 
18e0c     E3 DE DA D6 | 	byte	$13, $10, $0c, $08, $05, $01, $fd, $f9, $f4, $ef, $eb, $e6, $e3, $de, $da, $d6
18e10     D2 CE CB C8 
18e14     C5 C2 BF BD 
18e18     BB BA B8 B8 
18e1c     B8 B8 B8 B9 | 	byte	$d2, $ce, $cb, $c8, $c5, $c2, $bf, $bd, $bb, $ba, $b8, $b8, $b8, $b8, $b8, $b9
18e20     B9 BA BC BD 
18e24     BF C1 C3 C6 
18e28     C8 CB CE D1 
18e2c     D3 D6 DA DD | 	byte	$b9, $ba, $bc, $bd, $bf, $c1, $c3, $c6, $c8, $cb, $ce, $d1, $d3, $d6, $da, $dd
18e30     E0 E2 E5 E8 
18e34     EB EE F1 F4 
18e38     F6 F9 FC FE 
18e3c     01 03 05 07 | 	byte	$e0, $e2, $e5, $e8, $eb, $ee, $f1, $f4, $f6, $f9, $fc, $fe, $01, $03, $05, $07
18e40     09 0B 0D 0F 
18e44     11 13 14 15 
18e48     17 18 1A 1B 
18e4c     1C 1E 1F 20 | 	byte	$09, $0b, $0d, $0f, $11, $13, $14, $15, $17, $18, $1a, $1b, $1c, $1e, $1f, $20
18e50     21 22 23 24 
18e54     25 26 27 28 
18e58     28 29 29 2A 
18e5c     2B 2B 2B 2C | 	byte	$21, $22, $23, $24, $25, $26, $27, $28, $28, $29, $29, $2a, $2b, $2b, $2b, $2c
18e60     2D 2D 2E 2E 
18e64     2E 2F 2F 2F 
18e68     2F 2F 2F 2F 
18e6c     2F 2F 2E 2E | 	byte	$2d, $2d, $2e, $2e, $2e, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2e, $2e
18e70     2E 2E 2E 2C 
18e74     2B 2A 29 27 
18e78     25 23 21 1F 
18e7c     1C 19 16 13 | 	byte	$2e, $2e, $2e, $2c, $2b, $2a, $29, $27, $25, $23, $21, $1f, $1c, $19, $16, $13
18e80     10 0C 09 05 
18e84     01 FD F9 F5 
18e88     F1 EC E8 E4 
18e8c     E0 DC D8 D4 | 	byte	$10, $0c, $09, $05, $01, $fd, $f9, $f5, $f1, $ec, $e8, $e4, $e0, $dc, $d8, $d4
18e90     D1 CD CA C7 
18e94     C4 C1 BF BD 
18e98     BC BA B9 B9 
18e9c     B9 B8 B8 B9 | 	byte	$d1, $cd, $ca, $c7, $c4, $c1, $bf, $bd, $bc, $ba, $b9, $b9, $b9, $b8, $b8, $b9
18ea0     BA BB BC BD 
18ea4     C0 C1 C3 C6 
18ea8     C8 CB CE D0 
18eac     D3 D6 D9 DC | 	byte	$ba, $bb, $bc, $bd, $c0, $c1, $c3, $c6, $c8, $cb, $ce, $d0, $d3, $d6, $d9, $dc
18eb0     DF E2 E5 E8 
18eb4     EA ED F0 F2 
18eb8     F6 F8 FB FE 
18ebc     00 02 04 07 | 	byte	$df, $e2, $e5, $e8, $ea, $ed, $f0, $f2, $f6, $f8, $fb, $fe, $00, $02, $04, $07
18ec0                 | 	alignl
18ec0                 | _hng030rm_spin2_dat_
18ec0     00 00 00 00 
18ec4     00 00 00 00 
18ec8     00 00 00 00 
18ecc     00 00 00 00 
18ed0     00 00 00    | vga_font       file "vgafont.def"
18ed3     7E 81 A5 81 
18ed7     81 BD 99 81 
18edb     81 7E 00 00 
18edf     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
18ee3     7E FF DB FF 
18ee7     FF C3 E7 FF 
18eeb     FF 7E 00 00 
18eef     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
18ef3     00 36 7F 7F 
18ef7     7F 7F 3E 1C 
18efb     08 00 00 00 
18eff     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
18f03     00 08 1C 3E 
18f07     7F 3E 1C 08 
18f0b     00 00 00 00 
18f0f     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
18f13     18 3C 3C E7 
18f17     E7 E7 18 18 
18f1b     3C 00 00 00 
18f1f     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
18f23     18 3C 7E FF 
18f27     FF 7E 18 18 
18f2b     3C 00 00 00 
18f2f     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
18f33     00 00 00 18 
18f37     3C 3C 18 00 
18f3b     00 00 00 00 
18f3f     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
18f43     FF FF FF E7 
18f47     C3 C3 E7 FF 
18f4b     FF FF FF FF 
18f4f     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
18f53     00 00 3C 66 
18f57     42 42 66 3C 
18f5b     00 00 00 00 
18f5f     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
18f63     FF FF C3 99 
18f67     BD BD 99 C3 
18f6b     FF FF FF FF 
18f6f     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
18f73     78 70 58 4C 
18f77     1E 33 33 33 
18f7b     33 1E 00 00 
18f7f     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
18f83     3C 66 66 66 
18f87     66 3C 18 7E 
18f8b     18 18 00 00 
18f8f     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
18f93     FC CC FC 0C 
18f97     0C 0C 0C 0E 
18f9b     0F 07 00 00 
18f9f     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
18fa3     FE C6 FE C6 
18fa7     C6 C6 C6 E6 
18fab     E7 67 03 00 
18faf     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
18fb3     18 18 DB 3C 
18fb7     E7 3C DB 18 
18fbb     18 00 00 00 
18fbf     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
18fc3     03 07 0F 1F 
18fc7     7F 1F 0F 07 
18fcb     03 01 00 00 
18fcf     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
18fd3     60 70 78 7C 
18fd7     7F 7C 78 70 
18fdb     60 40 00 00 
18fdf     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
18fe3     18 3C 7E 18 
18fe7     18 18 7E 3C 
18feb     18 00 00 00 
18fef     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
18ff3     66 66 66 66 
18ff7     66 66 66    | 	byte	$66[7]
18ffa     00 66 66 00 
18ffe     00 00 00 00 
19002     00 FE DB DB 
19006     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
1900a     D8 D8 D8 00 
1900e     00 00 00 3E 
19012     63 06 1C 36 
19016     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
1901a     30 63 3E 00 
1901e     00 00 00 00 
19022     00 00 00 00 
19026     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1902a     7F 7F 7F 00 
1902e     00 00 00 00 
19032     00 18 3C 7E 
19036     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
1903a     3C 18 7E 00 
1903e     00 00 00 00 
19042     00 18 3C 7E 
19046     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
1904a     18 18 18 00 
1904e     00 00 00 00 
19052     00 18 18 18 
19056     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1905a     7E 3C 18 00 
1905e     00 00 00 00 
19062     00 00 00 18 
19066     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1906a     00 00 00 00 
1906e     00 00 00 00 
19072     00 00 00    | 	byte	$00[11]
19075     0C 06 7F 06 
19079     0C 00 00 00 
1907d     00 00 00 00 
19081     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19085     00 03 03 03 
19089     7F 00 00 00 
1908d     00 00 00 00 
19091     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19095     14 36 7F 36 
19099     14 00 00 00 
1909d     00 00 00 00 
190a1     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
190a5     1C 1C 3E 3E 
190a9     7F 7F 00 00 
190ad     00 00 00 00 
190b1     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
190b5     7F 3E 3E 1C 
190b9     1C 08 00 00 
190bd     00 00 00 00 
190c1     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
190c5     00 00 00 00 
190c9     00 00 00 00 
190cd     00 00 00 00 
190d1     00 00       | 	byte	$00[14]
190d3     18 3C 3C 3C 
190d7     18 18 18 00 
190db     18 18 00 00 
190df     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
190e3     66 24 00 00 
190e7     00 00 00 00 
190eb     00 00 00 00 
190ef     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
190f3     00 36 36 7F 
190f7     36 36 36 7F 
190fb     36 36 00 00 
190ff     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
19103     3E 63 43 03 
19107     3E 60 60 61 
1910b     63 3E 18 18 
1910f     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
19113     00 00 43 63 
19117     30 18 0C 06 
1911b     63 61 00 00 
1911f     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
19123     1C 36 36 1C 
19127     6E 3B 33 33 
1912b     33 6E 00 00 
1912f     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
19133     0C 0C 0C 06 
19137     00 00 00 00 
1913b     00 00 00 00 
1913f     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19143     30 18 0C 0C 
19147     0C 0C 0C 0C 
1914b     18 30 00 00 
1914f     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
19153     0C 18 30 30 
19157     30 30 30 30 
1915b     18 0C 00 00 
1915f     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
19163     00 00 00 66 
19167     3C FF 3C 66 
1916b     00 00 00 00 
1916f     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
19173     00 00 00 18 
19177     18 7E 18 18 
1917b     00 00 00 00 
1917f     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
19183     00 00 00 00 
19187     00 00 00 00 | 	byte	$00[8]
1918b     18 18 18 0C 
1918f     00 00 00 00 
19193     00 00 00 00 
19197     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1919b     00 00 00 00 
1919f     00 00 00 00 
191a3     00 00 00 00 
191a7     00 00 00 00 | 	byte	$00[16]
191ab     18 18 00 00 
191af     00 00 00 00 
191b3     00 00 40 60 
191b7     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
191bb     03 01 00 00 
191bf     00 00 00 00 
191c3     1C 36 63 63 
191c7     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
191cb     36 1C 00 00 
191cf     00 00 00 00 
191d3     18 1C 1E 18 
191d7     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
191db     18 7E 00 00 
191df     00 00 00 00 
191e3     3E 63 60 30 
191e7     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
191eb     63 7F 00 00 
191ef     00 00 00 00 
191f3     3E 63 60 60 
191f7     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
191fb     63 3E 00 00 
191ff     00 00 00 00 
19203     30 38 3C 36 
19207     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
1920b     30 78 00 00 
1920f     00 00 00 00 
19213     7F 03 03 03 
19217     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
1921b     63 3E 00 00 
1921f     00 00 00 00 
19223     1C 06 03 03 
19227     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
1922b     63 3E 00 00 
1922f     00 00 00 00 
19233     7F 63 60 60 
19237     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
1923b     0C 0C 00 00 
1923f     00 00 00 00 
19243     3E 63 63 63 
19247     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
1924b     63 3E 00 00 
1924f     00 00 00 00 
19253     3E 63 63 63 
19257     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1925b     30 1E 00 00 
1925f     00 00 00 00 
19263     00 00 00 18 
19267     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1926b     18 18 00 00 
1926f     00 00 00 00 
19273     00 00 00 18 
19277     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1927b     18 18 0C 00 
1927f     00 00 00 00 
19283     00 60 30 18 
19287     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1928b     30 60 00 00 
1928f     00 00 00 00 
19293     00 00 00 7E 
19297     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1929b     00 00 00 00 
1929f     00 00 00 00 
192a3     00          | 	byte	$00[9]
192a4     06 0C 18 30 
192a8     60 30 18 0C 
192ac     06 00 00 00 
192b0     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
192b4     63 63 30 18 
192b8     18 18 00 18 
192bc     18 00 00 00 
192c0     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
192c4     3E 63 63 7B 
192c8     7B 7B 3B 03 
192cc     3E 00 00 00 
192d0     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
192d4     1C 36 63 63 
192d8     7F 63 63 63 
192dc     63 00 00 00 
192e0     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
192e4     66 66 66 3E 
192e8     66 66 66 66 
192ec     3F 00 00 00 
192f0     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
192f4     66 43 03 03 
192f8     03 03 43 66 
192fc     3C 00 00 00 
19300     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
19304     36 66 66 66 
19308     66 66 66 36 
1930c     1F 00 00 00 
19310     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
19314     66 46 16 1E 
19318     16 06 46 66 
1931c     7F 00 00 00 
19320     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
19324     66 46 16 1E 
19328     16 06 06 06 
1932c     0F 00 00 00 
19330     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
19334     66 43 03 03 
19338     7B 63 63 66 
1933c     5C 00 00 00 
19340     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
19344     63 63 63 7F 
19348     63 63 63 63 
1934c     63 00 00 00 
19350     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
19354     18 18 18 18 
19358     18 18 18 18 | 	byte	$18[8]
1935c     3C 00 00 00 
19360     00 00 00 78 
19364     30 30 30 30 
19368     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1936c     1E 00 00 00 
19370     00 00 00 67 
19374     66 66 36 1E 
19378     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1937c     67 00 00 00 
19380     00 00 00 0F 
19384     06 06 06 06 
19388     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1938c     7F 00 00 00 
19390     00 00 00 63 
19394     77 7F 7F 6B 
19398     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
1939c     63 00 00 00 
193a0     00 00 00 63 
193a4     67 6F 7F 7B 
193a8     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
193ac     63 00 00 00 
193b0     00 00 00 3E 
193b4     63 63 63 63 
193b8     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
193bc     3E 00 00 00 
193c0     00 00 00 3F 
193c4     66 66 66 3E 
193c8     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
193cc     0F 00 00 00 
193d0     00 00 00 3E 
193d4     63 63 63 63 
193d8     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
193dc     3E 30 70 00 
193e0     00 00 00 3F 
193e4     66 66 66 3E 
193e8     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
193ec     67 00 00 00 
193f0     00 00 00 3E 
193f4     63 63 06 1C 
193f8     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
193fc     3E 00 00 00 
19400     00 00 00 7E 
19404     7E 5A 18 18 
19408     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1940c     3C 00 00 00 
19410     00 00 00 63 
19414     63 63 63 63 
19418     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1941c     3E 00 00 00 
19420     00 00 00 63 
19424     63 63 63 63 
19428     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
1942c     08 00 00 00 
19430     00 00 00 63 
19434     63 63 63 6B 
19438     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
1943c     36 00 00 00 
19440     00 00 00 63 
19444     63 36 3E 1C 
19448     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
1944c     63 00 00 00 
19450     00 00 00 66 
19454     66 66 66 3C 
19458     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1945c     3C 00 00 00 
19460     00 00 00 7F 
19464     63 61 30 18 
19468     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1946c     7F 00 00 00 
19470     00 00 00 3C 
19474     0C 0C 0C 0C 
19478     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1947c     3C 00 00 00 
19480     00 00 00 00 
19484     01 03 07 0E 
19488     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
1948c     40 00 00 00 
19490     00 00 00 3C 
19494     30 30 30 30 
19498     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
1949c     3C 00 00 00 
194a0     1C 36 00 00 
194a4     00 00 00 00 
194a8     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
194ac     00 00 00 00 
194b0     00 00 00 00 
194b4     00 00 00 00 
194b8     00 00 00 00 
194bc     00          | 	byte	$00[17]
194bd     FF 00 00 0C 
194c1     18 00 00 00 
194c5     00 00 00 00 
194c9     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
194cd     00 00 00 00 
194d1     00 00 00 00 
194d5     00          | 	byte	$00[9]
194d6     1E 30 3E 33 
194da     33 33 6E 00 
194de     00 00 00 00 
194e2     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
194e6     1E 36 66 66 
194ea     66 66 3E 00 
194ee     00 00 00 00 
194f2     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
194f6     3E 63 03 03 
194fa     03 63 3E 00 
194fe     00 00 00 00 
19502     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
19506     3C 36 33 33 
1950a     33 33 6E 00 
1950e     00 00 00 00 
19512     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
19516     3E 63 7F 03 
1951a     03 63 3E 00 
1951e     00 00 00 00 
19522     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
19526     0C 1E 0C 0C 
1952a     0C 0C 1E 00 
1952e     00 00 00 00 
19532     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
19536     6E 33 33 33 
1953a     33 33 3E 30 
1953e     33 1E 00 00 
19542     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
19546     36 6E 66 66 
1954a     66 66 67 00 
1954e     00 00 00 00 
19552     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
19556     1C 18 18 18 
1955a     18 18 3C 00 
1955e     00 00 00 00 
19562     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
19566     70 60 60 60 
1956a     60 60 60 66 
1956e     66 3C 00 00 
19572     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
19576     66 36 1E 1E 
1957a     36 66 67 00 
1957e     00 00 00 00 
19582     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
19586     18 18 18 18 
1958a     18 18       | 	byte	$18[6]
1958c     3C 00 00 00 
19590     00 00 00 00 
19594     00 00 37 7F 
19598     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
1959c     63 00 00 00 
195a0     00 00 00 00 
195a4     00 00 3B 66 
195a8     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
195ac     66 00 00 00 
195b0     00 00 00 00 
195b4     00 00 3E 63 
195b8     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
195bc     3E 00 00 00 
195c0     00 00 00 00 
195c4     00 00 3B 66 
195c8     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
195cc     3E 06 06 0F 
195d0     00 00 00 00 
195d4     00 00 6E 33 
195d8     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
195dc     3E 30 30 78 
195e0     00 00 00 00 
195e4     00 00 3B 6E 
195e8     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
195ec     0F 00 00 00 
195f0     00 00 00 00 
195f4     00 00 3E 63 
195f8     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
195fc     3E 00 00 00 
19600     00 00 00 08 
19604     0C 0C 3F 0C 
19608     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1960c     38 00 00 00 
19610     00 00 00 00 
19614     00 00 33 33 
19618     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
1961c     6E 00 00 00 
19620     00 00 00 00 
19624     00 00 63 63 
19628     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
1962c     1C 00 00 00 
19630     00 00 00 00 
19634     00 00 63 63 
19638     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
1963c     36 00 00 00 
19640     00 00 00 00 
19644     00 00 63 36 
19648     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
1964c     63 00 00 00 
19650     00 00 00 00 
19654     00 00 63 63 
19658     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1965c     7E 60 30 1F 
19660     00 00 00 00 
19664     00 00 7F 33 
19668     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1966c     7F 00 00 00 
19670     00 00 00 70 
19674     18 18 18 0E 
19678     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1967c     70 00 00 00 
19680     00 00 00 18 
19684     18 18 18 18 
19688     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
1968c     18 00 00 00 
19690     00 00 00 0E 
19694     18 18 18 70 
19698     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
1969c     0E 00 00 00 
196a0     6E 3B 00 00 
196a4     00 00 00 00 
196a8     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
196ac     00 00 00 00 
196b0     00 00 00 00 
196b4     00 00       | 	byte	$00[10]
196b6     08 1C 36 63 
196ba     63 63 7F 00 
196be     00 00 00 00 
196c2     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
196c6     03 03 03 03 
196ca     43 66 3C 18 
196ce     30 1E 00 00 
196d2     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
196d6     33 33 33 33 
196da     33 33       | 	byte	$33[6]
196dc     6E 00 00 00 
196e0     00 00 60 30 
196e4     18 00 3E 63 
196e8     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
196ec     3E 00 00 00 
196f0     00 00 08 1C 
196f4     36 00 1E 30 
196f8     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
196fc     6E 00 00 00 
19700     00 00 00 00 
19704     33 00 1E 30 
19708     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
1970c     6E 00 00 00 
19710     00 00 1C 36 
19714     1C 00 33 33 
19718     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
1971c     6E 00 00 00 
19720     00 00 60 30 
19724     18 00 3E 63 
19728     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
1972c     3E 00 00 00 
19730     00 00 00 00 
19734     00 00 3E 63 
19738     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
1973c     3E 18 30 1E 
19740     00 00 00 1C 
19744     58 78 38 18 
19748     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
1974c     3C 00 00 00 
19750     00 00 00 00 
19754     63 00 3E 63 
19758     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1975c     3E 00 00 00 
19760     66 33 00 3E 
19764     63 63 63 63 
19768     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1976c     3E 00 00 00 
19770     00 00 CC 66 
19774     33 00 3E 63 
19778     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1977c     3E 00 00 00 
19780     00 00 18 3C 
19784     66 00 1C 18 
19788     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
1978c     3C 00 00 00 
19790     30 18 00 7F 
19794     63 61 30 18 
19798     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1979c     7F 00 00 00 
197a0     00 63 00 08 
197a4     1C 36 63 63 
197a8     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
197ac     63 00 00 00 
197b0     30 18 00 3C 
197b4     66 43 03 03 
197b8     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
197bc     3C 00 00 00 
197c0     30 18 00 7F 
197c4     66 46 16 1E 
197c8     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
197cc     7F 00 00 00 
197d0     0C 06 00 0F 
197d4     06 06 06 06 
197d8     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
197dc     7F 00 00 00 
197e0     30 18 00 1C 
197e4     18 18 18 18 
197e8     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
197ec     3C 00 00 00 
197f0     00 00 08 1C 
197f4     36 00 3E 63 
197f8     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
197fc     3E 00 00 00 
19800     00 00 00 00 
19804     63 00 3E 63 
19808     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
1980c     3E 00 00 00 
19810     00 00 00 6F 
19814     46 26 06 06 
19818     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
1981c     7F 00 00 00 
19820     00 00 00 6E 
19824     4C 2C 0C 0C 
19828     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
1982c     1E 00 00 00 
19830     30 18 00 3E 
19834     63 63 06 1C 
19838     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1983c     3E 00 00 00 
19840     00 00 60 30 
19844     18 00 3E 63 
19848     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
1984c     3E 00 00 00 
19850     00 63 00 3E 
19854     63 63 63 63 
19858     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1985c     3E 00 00 00 
19860     00 63 00 63 
19864     63 63 63 63 
19868     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1986c     3E 00 00 00 
19870     6C 38 00 7E 
19874     7E 5A 18 18 
19878     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1987c     3C 00 00 00 
19880     00 00 60 48 
19884     2C 0C 3F 0C 
19888     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1988c     38 00 00 00 
19890     00 00 00 0F 
19894     26 36 1E 0E 
19898     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
1989c     7F 00 00 00 
198a0     00 00 00 00 
198a4     00 63 36 1C 
198a8     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
198ac     00 00 00 00 
198b0     00 00       | 	byte	$00[6]
198b2     36 1C 08 00 
198b6     3E 63 03 03 
198ba     03 63 3E 00 
198be     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
198c2     30 18 0C 00 
198c6     1E 30 3E 33 
198ca     33 33 6E 00 
198ce     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
198d2     60 30 18 00 
198d6     1C 18 18 18 
198da     18 18 3C 00 
198de     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
198e2     60 30 18 00 
198e6     3E 63 63 63 
198ea     63 63 3E 00 
198ee     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
198f2     30 18 0C 00 
198f6     33 33 33 33 
198fa     33 33 6E 00 
198fe     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
19902     00 08 1C 36 
19906     63 63 7F 63 
1990a     63 63 63 18 
1990e     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
19912     00 00 00 00 
19916     1E 30 3E 33 
1991a     33 33 6E 18 
1991e     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
19922     00 7F 63 61 
19926     30 18 0C 06 
1992a     43 63 7F 00 
1992e     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
19932     36 1C 08 00 
19936     7F 33 18 0C 
1993a     06 63 7F 00 
1993e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
19942     00 7F 66 46 
19946     16 1E 16 06 
1994a     46 66 7F 18 
1994e     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
19952     00 00 00 00 
19956     3E 63 7F 03 
1995a     03 63 3E 18 
1995e     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
19962     00 3C 66 03 
19966     1F 03 0F 03 
1996a     03 66 3C 00 
1996e     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
19972     60 30 18 00 
19976     7F 33 18 0C 
1997a     06 63 7F 00 
1997e     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
19982     00 3C 66 43 
19986     03 03 03 03 
1998a     43 66 3C 00 
1998e     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
19992     00 00 00 00 
19996     3E 63 06 1C 
1999a     30 63 3E 18 
1999e     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
199a2     00 00 00 00 
199a6     00 00       | 	byte	$00[6]
199a8     6C 36 1B 36 
199ac     6C 00 00 00 
199b0     00 00 00 00 
199b4     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
199b8     1B 36 6C 36 
199bc     1B 00 00 00 
199c0     88 22 88 22 
199c4     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
199c8     88 22 88 22 
199cc     88 22 88 22 
199d0     AA 55 AA 55 
199d4     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
199d8     AA 55 AA 55 
199dc     AA 55 AA 55 
199e0     BB EE BB EE 
199e4     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
199e8     BB EE BB EE 
199ec     BB EE BB EE 
199f0     18 18 18 18 
199f4     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
199f8     18 18 18 18 
199fc     18 18 18 18 
19a00     18 18 18 18 
19a04     18 18 18    | 	byte	$18[15]
19a07     1F 18 18 18 
19a0b     18 18 18 18 
19a0f     18 30 18 00 
19a13     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
19a17     63 7F 63 63 
19a1b     63 63 00 00 
19a1f     00 1C 36 00 
19a23     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
19a27     63 7F 63 63 
19a2b     63 63 00 00 
19a2f     00 36 1C 00 
19a33     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
19a37     1E 16 06 46 
19a3b     66 7F 00 00 
19a3f     00 00 00 00 
19a43     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
19a47     1C 30 60 63 
19a4b     63 3E 18 30 
19a4f     1E 6C 6C 6C 
19a53     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
19a57     6F 6C 6C 6C 
19a5b     6C 6C 6C 6C 
19a5f     6C 6C 6C 6C 
19a63     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19a67     6C 6C 6C 6C 
19a6b     6C 6C 6C 6C 
19a6f     6C          | 	byte	$6c[9]
19a70     00 00 00 00 
19a74     00          | 	byte	$00[5]
19a75     7F 60 6F 6C 
19a79     6C 6C 6C 6C 
19a7d     6C 6C 6C 6C 
19a81     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19a85     6F 60 7F 00 
19a89     00 00 00 00 
19a8d     00 00 00 18 
19a91     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
19a95     61 30 18 0C 
19a99     06 43 63 7F 
19a9d     00 00 00 00 
19aa1     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
19aa5     00 7F 33 18 
19aa9     0C 06 63 7F 
19aad     00 00 00 00 
19ab1     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
19ab5     00 00 1F 18 
19ab9     18 18 18 18 
19abd     18 18 18 18 
19ac1     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19ac5     18 18 F8 00 
19ac9     00 00 00 00 
19acd     00 00 00 18 
19ad1     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19ad5     18 18 FF 00 
19ad9     00 00 00 00 
19add     00 00 00 00 
19ae1     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19ae5     00 00 FF 18 
19ae9     18 18 18 18 
19aed     18 18 18 18 
19af1     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19af5     18 18 F8 18 
19af9     18 18 18 18 
19afd     18 18 18 00 
19b01     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
19b05     00 00 FF 00 
19b09     00 00 00 00 
19b0d     00 00 00 18 
19b11     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19b15     18 18 FF 18 
19b19     18 18 18 18 
19b1d     18 18 18 63 
19b21     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
19b25     36 63 63 7F 
19b29     63 63 63 63 
19b2d     00 00 00 00 
19b31     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
19b35     00 1E 30 3E 
19b39     33 33 33 6E 
19b3d     00 00 00 6C 
19b41     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
19b45     EC 0C FC 00 
19b49     00 00 00 00 
19b4d     00 00 00 00 
19b51     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19b55     FC 0C EC 6C 
19b59     6C 6C 6C 6C 
19b5d     6C 6C 6C 6C 
19b61     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19b65     EF 00 FF 00 
19b69     00 00 00 00 
19b6d     00 00 00 00 
19b71     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19b75     FF 00 EF 6C 
19b79     6C 6C 6C 6C 
19b7d     6C 6C 6C 6C 
19b81     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19b85     EC 0C EC 6C 
19b89     6C 6C 6C 6C 
19b8d     6C 6C 6C 00 
19b91     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
19b95     FF 00 FF 00 
19b99     00 00 00 00 
19b9d     00 00 00 6C 
19ba1     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
19ba5     EF 00 EF 6C 
19ba9     6C 6C 6C 6C 
19bad     6C 6C 6C 00 
19bb1     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
19bb5     63 3E 63 63 
19bb9     63 63 3E 63 
19bbd     00 00 00 00 
19bc1     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
19bc5     30 3C 36 33 
19bc9     33 33 33 6E 
19bcd     00 00 00 00 
19bd1     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
19bd5     66 66 6F 66 
19bd9     66 66 36 1F 
19bdd     00 00 00 36 
19be1     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
19be5     66 66 66 66 
19be9     66 66       | 	byte	$66[6]
19beb     36 1F 00 00 
19bef     00 00 63 00 
19bf3     7F 66 46 16 
19bf7     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
19bfb     66 7F 00 00 
19bff     00 6C 38 00 
19c03     38 30 30 3C 
19c07     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
19c0b     33 6E 00 00 
19c0f     00 36 1C 00 
19c13     63 67 6F 7F 
19c17     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
19c1b     63 63 00 00 
19c1f     00 30 18 00 
19c23     3C 18 18 18 
19c27     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
19c2b     18 3C 00 00 
19c2f     00 3C 66 00 
19c33     3C 18 18 18 
19c37     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
19c3b     18 3C 00 00 
19c3f     00 00 00 36 
19c43     1C 08 00 3E 
19c47     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
19c4b     63 3E 00 00 
19c4f     00 18 18 18 
19c53     18 18 18 18 
19c57     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
19c5b     00 00 00 00 
19c5f     00 00 00 00 
19c63     00 00 00 00 | 	byte	$00[12]
19c67     F8 18 18 18 
19c6b     18 18 18 18 
19c6f     18 FF FF FF 
19c73     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
19c77     FF FF FF FF 
19c7b     FF FF FF FF 
19c7f     FF          | 	byte	$ff[9]
19c80     00 00 00 00 
19c84     00 00 00    | 	byte	$00[7]
19c87     FF FF FF FF 
19c8b     FF FF FF FF 
19c8f     FF          | 	byte	$ff[9]
19c90     00 00 00 7E 
19c94     7E 5A 18 18 
19c98     18 18 18 18 
19c9c     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
19ca0     1C 36 1C 63 
19ca4     63 63 63 63 
19ca8     63 63 63 63 
19cac     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19cb0     FF FF FF FF 
19cb4     FF FF FF    | 	byte	$ff[7]
19cb7     00 00 00 00 
19cbb     00 00 00 00 
19cbf     00          | 	byte	$00[9]
19cc0     30 18 00 3E 
19cc4     63 63 63 63 
19cc8     63 63 63 63 
19ccc     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19cd0     00 00 00 1E 
19cd4     33 33 33 1B 
19cd8     33 63 63 63 
19cdc     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
19ce0     1C 36 00 3E 
19ce4     63 63 63 63 
19ce8     63 63 63 63 
19cec     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19cf0     30 18 00 63 
19cf4     67 6F 7F 7B 
19cf8     73 63 63 63 
19cfc     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
19d00     00 00 60 30 
19d04     18 00 3B 66 
19d08     66 66 66 66 
19d0c     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19d10     00 00 36 1C 
19d14     08 00 3B 66 
19d18     66 66 66 66 
19d1c     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19d20     36 1C 00 3E 
19d24     63 63 06 1C 
19d28     30 60 63 63 
19d2c     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
19d30     00 00 36 1C 
19d34     08 00 3E 63 
19d38     06 1C 30 63 
19d3c     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
19d40     30 18 00 3F 
19d44     66 66 66 3E 
19d48     36 66 66 66 
19d4c     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
19d50     30 18 00 63 
19d54     63 63 63 63 
19d58     63 63 63 63 
19d5c     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19d60     00 00 60 30 
19d64     18 00 3B 6E 
19d68     66 06 06 06 
19d6c     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
19d70     66 33 00 63 
19d74     63 63 63 63 
19d78     63 63 63 63 
19d7c     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19d80     00 00 60 30 
19d84     18 00 63 63 
19d88     63 63 63 63 
19d8c     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
19d90     30 18 00 66 
19d94     66 66 66 3C 
19d98     18 18 18 18 
19d9c     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
19da0     00 00 00 08 
19da4     0C 0C 3F 0C 
19da8     0C 0C 0C 6C 
19dac     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
19db0     30 18 00 00 
19db4     00 00 00 00 
19db8     00 00 00 00 
19dbc     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19dc0     00 00 00 00 
19dc4     00 00 00 00 | 	byte	$00[8]
19dc8     7F 00 00 00 
19dcc     00 00 00 00 
19dd0     66 33 00 00 
19dd4     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
19dd8     00 00 00 00 
19ddc     00 00 00 00 
19de0     00 00 00 00 
19de4     00 00 00 00 
19de8     00 00 00 00 
19dec     00          | 	byte	$00[21]
19ded     0C 06 3C 36 
19df1     1C 00 00 00 
19df5     00 00 00 00 
19df9     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19dfd     00 00 00 63 
19e01     3E 00 00 00 
19e05     00 00 00 00 
19e09     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e0d     00 00 00 00 
19e11     3E 63 06 1C 
19e15     36 63 63 36 
19e19     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
19e1d     00 00 00 00 
19e21     00 00 00 00 | 	byte	$00[8]
19e25     18 00 7E 00 
19e29     18 00 00 00 
19e2d     00 00 00 00 
19e31     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e35     00 00 00 00 
19e39     00 00 00 00 | 	byte	$00[8]
19e3d     18 30 1E 00 
19e41     00 00 1C 36 
19e45     36 1C 00 00 
19e49     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
19e4d     00 00 00 00 
19e51     63 00 00 00 
19e55     00 00 00 00 
19e59     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e5d     00 00 00 18 
19e61     18 00 00 00 
19e65     00 00 00 00 
19e69     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e6d     00 00 00 00 
19e71     00          | 	byte	$00[5]
19e72     CC 66 33 00 
19e76     33 33 33 33 
19e7a     33 33 6E 00 
19e7e     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
19e82     00 3F 66 66 
19e86     66 3E 36 66 
19e8a     66 66 6F 00 
19e8e     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
19e92     36 1C 08 00 
19e96     3B 6E 66 06 
19e9a     06 06 0F 00 
19e9e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
19ea2     00 00 00 7E 
19ea6     7E 7E 7E 7E 
19eaa     7E 7E 00 00 
19eae     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
19eb2     00 00 00 00 
19eb6     00 00 00 00 
19eba     00 00 00 00 
19ebe     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19ec0     00 00 00 00 
      ...             
19ef0     00 00 00 00 
19ef4     00 00 00    | st_font        file "st4font.def"
19ef7     FF FF 00 00 
19efb     00 00 00 00 
19eff     00 18 18 18 
19f03     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19f07     18 18 18 18 
19f0b     18 18 18 18 
19f0f     18          | 	byte	$18[9]
19f10     00 00 00 00 
19f14     00 00 00    | 	byte	$00[7]
19f17     FF FF 18 18 
19f1b     18 18 18 18 
19f1f     18 18 18 18 
19f23     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19f27     FF FF 00 00 
19f2b     00 00 00 00 
19f2f     00 18 18 18 
19f33     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19f37     1F 1F 18 18 
19f3b     18 18 18 18 
19f3f     18 18 18 18 
19f43     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19f47     F8 F8 18 18 
19f4b     18 18 18 18 
19f4f     18 00 00 00 
19f53     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
19f57     1F 1F 18 18 
19f5b     18 18 18 18 
19f5f     18 00 00 00 
19f63     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
19f67     F8 F8 18 18 
19f6b     18 18 18 18 
19f6f     18 18 18 18 
19f73     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19f77     1F 1F 00 00 
19f7b     00 00 00 00 
19f7f     00 18 18 18 
19f83     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19f87     F8 F8 00 00 
19f8b     00 00 00 00 
19f8f     00 18 18 18 
19f93     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19f97     FF FF 18 18 
19f9b     18 18 18 18 
19f9f     18 00 00 18 
19fa3     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
19fa7     66 7E 7E 66 
19fab     66 66 66 30 
19faf     18 00 00 7E 
19fb3     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
19fb7     3E 06 06 06 
19fbb     06 7E 7E 18 
19fbf     0C 30 18 3C 
19fc3     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
19fc7     06 06 06 66 
19fcb     66 7E 3C 00 
19fcf     00 30 18 66 
19fd3     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
19fd7     7E 7E 76 76 
19fdb     66 66 66 00 
19fdf     00 30 18 7C 
19fe3     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
19fe7     1C 38 70 60 
19feb     60 7E 3E 00 
19fef     00 30 18 7E 
19ff3     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
19ff7     18 0C 0C 06 
19ffb     06 7E 7E 00 
19fff     00 18 18 00 
1a003     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1a007     18 18 0C 0C 
1a00b     06 7E 7E 00 
1a00f     00 30 18 3C 
1a013     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1a017     66 66 66 66 
1a01b     66          | 	byte	$66[5]
1a01c     7E 3C 00 00 
1a020     00 00 06 06 
1a024     06 06 16 1E 
1a028     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1a02c     7E 7E 00 00 
1a030     00 00 00 00 
1a034     00 3C 7C 60 
1a038     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1a03c     7E 7C 30 18 
1a040     00 00 00 00 
1a044     00 3C 7E 66 
1a048     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1a04c     7E 7C 18 0C 
1a050     00 00 30 18 
1a054     00 3C 3E 06 
1a058     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1a05c     7E 7C 00 00 
1a060     00 00 30 18 
1a064     00 3E 7E 66 
1a068     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1a06c     66 66 00 00 
1a070     00 00 30 18 
1a074     00 7C 7E 06 
1a078     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1a07c     7E 3E 00 00 
1a080     00 00 30 18 
1a084     00 7E 7E 30 
1a088     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a08c     7E 7E 00 00 
1a090     00 00 18 18 
1a094     00 7E 7E 30 
1a098     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a09c     7E 7E 00 00 
1a0a0     00 00 30 18 
1a0a4     00 3C 7E 66 
1a0a8     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1a0ac     7E 3C 00 00 
1a0b0     00 00 1C 1C 
1a0b4     18 18 38 3C 
1a0b8     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1a0bc     3C 3C 00 00 
1a0c0     00 00 00 00 
1a0c4     00 00 00 00 
1a0c8     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1a0cc     00 00 00 00 
1a0d0     00 00       | 	byte	$00[6]
1a0d2     18 18 18 18 
1a0d6     18 18 18 18 | 	byte	$18[8]
1a0da     00 00 18 18 
1a0de     00 00 00 00 
1a0e2     66 66 66 66 
1a0e6     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1a0ea     00 00 00 00 
1a0ee     00 00 00 00 
1a0f2     00          | 	byte	$00[9]
1a0f3     66 66 FF FF 
1a0f7     66 66 FF FF 
1a0fb     66 66 00 00 
1a0ff     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1a103     7C 7E 06 06 
1a107     3E 7C 60 60 
1a10b     7E 3E 18 18 
1a10f     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1a113     66 30 30 18 
1a117     18 0C 0C 66 
1a11b     66 00 00 00 
1a11f     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1a123     66 66 3C 1C 
1a127     1C FC FE 66 
1a12b     66 FE FC 00 
1a12f     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1a133     18 18 18 18 
1a137     00 00 00 00 
1a13b     00 00 00 00 
1a13f     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1a143     18 1C 0C 0C 
1a147     0C 0C 0C 0C 
1a14b     1C 18 30 00 
1a14f     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1a153     18 38 30 30 
1a157     30 30 30 30 
1a15b     38 18 0C 00 
1a15f     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1a163     66 66 3C 3C 
1a167     FF FF 3C 3C 
1a16b     66 66 00 00 
1a16f     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1a173     00 18 18 18 
1a177     7E 7E 18 18 
1a17b     18 00 00 00 
1a17f     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a183     00 00 00 00 
1a187     00 00       | 	byte	$00[6]
1a189     18 18 18 18 
1a18d     18          | 	byte	$18[5]
1a18e     0C 04 00 00 
1a192     00 00 00 00 
1a196     7E 7E 00 00 
1a19a     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
1a19e     00 00 00 00 
1a1a2     00 00 00 00 
1a1a6     00 00 00 00 
1a1aa     00          | 	byte	$00[13]
1a1ab     18 18 18 00 
1a1af     00 00 00 60 
1a1b3     60 60 30 30 
1a1b7     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
1a1bb     06 06 06 00 
1a1bf     00 00 00 3C 
1a1c3     7E 66 66 66 
1a1c7     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
1a1cb     66 7E 3C 00 
1a1cf     00 00 00 18 
1a1d3     18 1C 1C 18 
1a1d7     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
1a1db     18 7E 7E 00 
1a1df     00 00 00 3C 
1a1e3     7E 66 66 30 
1a1e7     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1a1eb     0C 7E 7E 00 
1a1ef     00 00 00 7E 
1a1f3     7E 30 30 18 
1a1f7     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1a1fb     66 7E 3C 00 
1a1ff     00 00 00 30 
1a203     30 38 38 3C 
1a207     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1a20b     7E 30 30 00 
1a20f     00 00 00 7E 
1a213     7E 06 06 3E 
1a217     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1a21b     66 7E 3C 00 
1a21f     00 00 00 38 
1a223     3C 0E 06 06 
1a227     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
1a22b     66 7E 3C 00 
1a22f     00 00 00 7E 
1a233     7E 60 60 30 
1a237     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
1a23b     0C 0C 0C 00 
1a23f     00 00 00 3C 
1a243     7E 66 66 3C 
1a247     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
1a24b     66 7E 3C 00 
1a24f     00 00 00 3C 
1a253     7E 66 66 7E 
1a257     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
1a25b     70 3C 1C 00 
1a25f     00 00 00 00 
1a263     00 00 18 18 
1a267     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
1a26b     18 18 18 00 
1a26f     00 00 00 00 
1a273     00 00 18 18 
1a277     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
1a27b     18 18 18 0C 
1a27f     04 00 00 00 
1a283     70 38 1C 0E 
1a287     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
1a28b     70 00 00 00 
1a28f     00 00 00 00 
1a293     00 00 7E 7E 
1a297     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
1a29b     00 00 00 00 
1a29f     00 00 00 00 | 	byte	$00[8]
1a2a3     0E 1C 38 70 
1a2a7     E0 70 38 1C 
1a2ab     0E 00 00 00 
1a2af     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
1a2b3     7E 66 66 30 
1a2b7     30 18 18 18 
1a2bb     00 18 18 00 
1a2bf     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
1a2c3     7E 66 66 66 
1a2c7     66 36 06 66 
1a2cb     66 7E 3C 00 
1a2cf     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
1a2d3     3C 7E 66 66 
1a2d7     66 7E 7E 66 
1a2db     66 66 66 00 
1a2df     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1a2e3     7E 66 66 7E 
1a2e7     3E 66 66 66 
1a2eb     66 7E 3E 00 
1a2ef     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1a2f3     7E 66 66 06 
1a2f7     06 06 06 66 
1a2fb     66 7E 3C 00 
1a2ff     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1a303     7E 66 66 66 
1a307     66 66 66 66 
1a30b     66 7E 3E 00 
1a30f     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1a313     7E 06 06 3E 
1a317     3E 06 06 06 
1a31b     06 7E 7E 00 
1a31f     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1a323     7E 06 06 3E 
1a327     3E 06 06 06 
1a32b     06 06 06 00 
1a32f     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1a333     7E 06 06 76 
1a337     76 66 66 66 
1a33b     66 7E 3C 00 
1a33f     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1a343     66 66 66 7E 
1a347     7E 66 66 66 
1a34b     66 66 66 00 
1a34f     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1a353     7E 18 18 18 
1a357     18 18 18 18 
1a35b     18 7E 7E 00 
1a35f     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1a363     60 60 60 60 
1a367     60 60 60    | 	byte	$60[7]
1a36a     66 66 7E 3C 
1a36e     00 00 00 00 
1a372     66 66 36 36 
1a376     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
1a37a     66 66 C6 C6 
1a37e     00 00 00 00 
1a382     06 06 06 06 
1a386     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
1a38a     06 06 7E 7E 
1a38e     00 00 00 00 
1a392     C6 C6 EE EE 
1a396     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
1a39a     C6 C6 C6 C6 
1a39e     00 00 00 00 
1a3a2     66 66 66 6E 
1a3a6     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
1a3aa     76 66 66 66 
1a3ae     00 00 00 00 
1a3b2     3C 7E 66 66 
1a3b6     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1a3ba     66 66 7E 3C 
1a3be     00 00 00 00 
1a3c2     3E 7E 66 66 
1a3c6     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
1a3ca     06 06 06 06 
1a3ce     00 00 00 00 
1a3d2     3C 7E 66 66 
1a3d6     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1a3da     66 56 3E 6C 
1a3de     00 00 00 00 
1a3e2     3E 7E 66 66 
1a3e6     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1a3ea     66 66 C6 C6 
1a3ee     00 00 00 00 
1a3f2     7C 7E 06 06 
1a3f6     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1a3fa     60 60 7E 3E 
1a3fe     00 00 00 00 
1a402     7E 7E 18 18 
1a406     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1a40a     18 18 18 18 
1a40e     00 00 00 00 
1a412     66 66 66 66 
1a416     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1a41a     66 66 7E 3C 
1a41e     00 00 00 00 
1a422     66 66 66 66 
1a426     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1a42a     3C 3C 18 18 
1a42e     00 00 00 00 
1a432     C6 C6 C6 C6 
1a436     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
1a43a     FE EE C6 82 
1a43e     00 00 00 00 
1a442     66 66 66 3C 
1a446     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
1a44a     3C 66 66 66 
1a44e     00 00 00 00 
1a452     66 66 66 66 
1a456     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
1a45a     18 18 18 18 
1a45e     00 00 00 00 
1a462     7E 7E 30 30 
1a466     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
1a46a     06 06 7E 7E 
1a46e     00 00 00 00 
1a472     3C 3C 0C 0C 
1a476     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
1a47a     0C 0C 3C 3C 
1a47e     00 00 00 00 
1a482     06 06 0C 0C 
1a486     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
1a48a     60 60 C0 C0 
1a48e     00 00 00 00 
1a492     3C 3C 30 30 
1a496     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
1a49a     30 30 3C 3C 
1a49e     00 00 00 00 
1a4a2     18 18 3C 3C 
1a4a6     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
1a4aa     00 00 00 00 
1a4ae     00 00 00 00 
1a4b2     00 00 00 00 
1a4b6     00 00 00 00 
1a4ba     00 00       | 	byte	$00[18]
1a4bc     FE FE 00 00 
1a4c0     00 00 0C 0C 
1a4c4     18 18 00 00 
1a4c8     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
1a4cc     00 00 00 00 
1a4d0     00 00 00 00 
1a4d4     00          | 	byte	$00[9]
1a4d5     3C 7C 60 7C 
1a4d9     7E 66 66 7E 
1a4dd     7C 00 00 00 
1a4e1     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
1a4e5     3E 7E 66 66 
1a4e9     66 66 66 7E 
1a4ed     3E 00 00 00 
1a4f1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
1a4f5     3C 3E 06 06 
1a4f9     06 06 06 7E 
1a4fd     7C 00 00 00 
1a501     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
1a505     7C 7E 66 66 
1a509     66 66 66 7E 
1a50d     7C 00 00 00 
1a511     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
1a515     3C 7E 66 66 
1a519     7E 06 06 7E 
1a51d     7C 00 00 00 
1a521     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
1a525     18 7E 7E 18 
1a529     18 18 18 18 
1a52d     18 00 00 00 
1a531     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a535     7C 7E 66 66 
1a539     66 66 7E 7C 
1a53d     60 7E 3E 00 
1a541     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
1a545     3E 7E 66 66 
1a549     66 66 66 66 
1a54d     66 00 00 00 
1a551     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
1a555     1C 1C 18 18 
1a559     18 18 18 3C 
1a55d     3C 00 00 00 
1a561     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
1a565     30 30 30 30 
1a569     30 30 30 30 
1a56d     30          | 	byte	$30[9]
1a56e     3E 1E 00 00 
1a572     06 06 06 36 
1a576     36 1E 1E 1E 
1a57a     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
1a57e     00 00 00 00 
1a582     1C 1C 18 18 
1a586     18 18 18 18 
1a58a     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
1a58e     00 00 00 00 
1a592     00 00 00    | 	byte	$00[7]
1a595     6C FE FE D6 
1a599     D6 C6 C6 C6 
1a59d     C6 00 00 00 
1a5a1     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
1a5a5     3E 7E 66 66 
1a5a9     66 66 66 66 
1a5ad     66 00 00 00 
1a5b1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
1a5b5     3C 7E 66 66 
1a5b9     66 66 66 7E 
1a5bd     3C 00 00 00 
1a5c1     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
1a5c5     3E 7E 66 66 
1a5c9     66 66 66 7E 
1a5cd     3E 06 06 00 
1a5d1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
1a5d5     7C 7E 66 66 
1a5d9     66 66 66 7E 
1a5dd     7C 60 60 00 
1a5e1     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
1a5e5     3E 7E 66 06 
1a5e9     06 06 06 06 
1a5ed     06 00 00 00 
1a5f1     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
1a5f5     7C 7E 06 0E 
1a5f9     3C 70 60 7E 
1a5fd     3E 00 00 00 
1a601     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
1a605     7E 7E 18 18 
1a609     18 18 18 78 
1a60d     70 00 00 00 
1a611     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
1a615     66 66 66 66 
1a619     66 66 66    | 	byte	$66[7]
1a61c     7E 7C 00 00 
1a620     00 00 00 00 
1a624     00 66 66 66 
1a628     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
1a62c     18 18 00 00 
1a630     00 00 00 00 
1a634     00 C6 C6 D6 
1a638     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
1a63c     C6 82 00 00 
1a640     00 00 00 00 
1a644     00 66 66 3C 
1a648     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
1a64c     66 66 00 00 
1a650     00 00 00 00 
1a654     00 66 66 66 
1a658     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
1a65c     7C 60 7E 3E 
1a660     00 00 00 00 
1a664     00 7E 7E 30 
1a668     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a66c     7E 7E 00 00 
1a670     00 00 30 18 
1a674     18 18 18 0C 
1a678     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
1a67c     18 30 00 00 
1a680     00 00 18 18 
1a684     18 18 18 18 
1a688     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1a68c     18 18 00 00 
1a690     00 00 0C 18 
1a694     18 18 18 30 
1a698     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
1a69c     18 0C 00 00 
1a6a0     00 00 6C 7E 
1a6a4     36 00 00 00 
1a6a8     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
1a6ac     00 00 00 00 
1a6b0     00 00 00 00 
1a6b4     00          | 	byte	$00[9]
1a6b5     18 18 18 18 
1a6b9     18 18 00 00 
1a6bd     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1a6c0     00 00 00 00 
1a6c4     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1a6c8     00 00 00 00 
1a6cc     00 80 80 80 
1a6d0     00 00 00 FF 
1a6d4     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1a6d8     00 00 00 00 
1a6dc     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
1a6dd     80 00 00 00 
1a6e1     00 80 00 00 
1a6e5     80 80 00 00 
1a6e9     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
1a6ed     80 00 80 00 
1a6f1     00 40 80 00 
1a6f5     AA AA AA 00 
1a6f9     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
1a6fd     FF 00 00 00 
1a701     00 FF 00 00 
1a705     FF FF 00 00 
1a709     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
1a70d     FF 00 FF 00 
1a711     00 FF FF 00 
1a715     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1a718     00 00 00 00 
1a71c     00          | ataripalette   file "ataripalettep2.def"
1a71d     11 11 11 00 
1a721     22 22 22 00 
1a725     33 33 33 00 
1a729     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
1a72d     55 55 55 00 
1a731     66 66 66 00 
1a735     77 77 77 00 
1a739     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
1a73d     99 99 99 00 
1a741     AA AA AA 00 
1a745     BB BB BB 00 
1a749     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
1a74d     DD DD DD 00 
1a751     EE EE EE 00 
1a755     FF FF FF 00 
1a759     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
1a75d     00 14 40 00 
1a761     00 1E 60 00 
1a765     00 28 80 00 
1a769     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
1a76d     00 3C BF 00 
1a771     00 46 DF 00 
1a775     00 50 FF 00 
1a779     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
1a77d     39 77 FF 00 
1a781     55 8A FF 00 
1a785     71 9E FF 00 
1a789     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
1a78d     AA C5 FF 00 
1a791     C6 D8 FF 00 
1a795     E3 EC FF 00 
1a799     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
1a79d     00 00 40 00 
1a7a1     00 00 60 00 
1a7a5     00 00 80 00 
1a7a9     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
1a7ad     00 00 BF 00 
1a7b1     00 00 DF 00 
1a7b5     00 00 FF 00 
1a7b9     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
1a7bd     39 39 FF 00 
1a7c1     55 55 FF 00 
1a7c5     71 71 FF 00 
1a7c9     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
1a7cd     AA AA FF 00 
1a7d1     C6 C6 FF 00 
1a7d5     E3 E3 FF 00 
1a7d9     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
1a7dd     20 00 40 00 
1a7e1     30 00 60 00 
1a7e5     40 00 80 00 
1a7e9     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
1a7ed     60 00 BF 00 
1a7f1     70 00 DF 00 
1a7f5     80 00 FF 00 
1a7f9     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
1a7fd     9C 39 FF 00 
1a801     AA 55 FF 00 
1a805     B8 71 FF 00 
1a809     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
1a80d     D5 AA FF 00 
1a811     E3 C6 FF 00 
1a815     F1 E3 FF 00 
1a819     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
1a81d     40 00 40 00 
1a821     60 00 60 00 
1a825     80 00 80 00 
1a829     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
1a82d     BF 00 BF 00 
1a831     DF 00 DF 00 
1a835     FF 00 FF 00 
1a839     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
1a83d     FF 39 FF 00 
1a841     FF 55 FF 00 
1a845     FF 71 FF 00 
1a849     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
1a84d     FF AA FF 00 
1a851     FF C6 FF 00 
1a855     FF E3 FF 00 
1a859     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
1a85d     40 00 20 00 
1a861     60 00 30 00 
1a865     80 00 40 00 
1a869     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
1a86d     BF 00 60 00 
1a871     DF 00 70 00 
1a875     FF 00 80 00 
1a879     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
1a87d     FF 39 9C 00 
1a881     FF 55 AA 00 
1a885     FF 71 B8 00 
1a889     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
1a88d     FF AA D5 00 
1a891     FF C6 E3 00 
1a895     FF E3 F1 00 
1a899     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
1a89d     40 00 00 00 
1a8a1     60 00 00 00 
1a8a5     80 00 00 00 
1a8a9     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
1a8ad     BF 00 00 00 
1a8b1     DF 00 00 00 
1a8b5     FF 00 00 00 
1a8b9     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
1a8bd     FF 39 39 00 
1a8c1     FF 55 55 00 
1a8c5     FF 71 71 00 
1a8c9     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
1a8cd     FF AA AA 00 
1a8d1     FF C6 C6 00 
1a8d5     FF E3 E3 00 
1a8d9     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
1a8dd     40 10 00 00 
1a8e1     60 18 00 00 
1a8e5     80 20 00 00 
1a8e9     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
1a8ed     BF 30 00 00 
1a8f1     DF 38 00 00 
1a8f5     FF 40 00 00 
1a8f9     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
1a8fd     FF 6A 39 00 
1a901     FF 80 55 00 
1a905     FF 95 71 00 
1a909     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
1a90d     FF BF AA 00 
1a911     FF D5 C6 00 
1a915     FF EA E3 00 
1a919     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
1a91d     40 20 00 00 
1a921     60 30 00 00 
1a925     80 40 00 00 
1a929     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
1a92d     BF 60 00 00 
1a931     DF 70 00 00 
1a935     FF 80 00 00 
1a939     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
1a93d     FF 9C 39 00 
1a941     FF AA 55 00 
1a945     FF B8 71 00 
1a949     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
1a94d     FF D5 AA 00 
1a951     FF E3 C6 00 
1a955     FF F1 E3 00 
1a959     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
1a95d     40 30 00 00 
1a961     60 48 00 00 
1a965     80 60 00 00 
1a969     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
1a96d     BF 90 00 00 
1a971     DF A8 00 00 
1a975     FF C0 00 00 
1a979     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
1a97d     FF CE 39 00 
1a981     FF D5 55 00 
1a985     FF DC 71 00 
1a989     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
1a98d     FF EA AA 00 
1a991     FF F1 C6 00 
1a995     FF F8 E3 00 
1a999     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
1a99d     30 40 00 00 
1a9a1     48 60 00 00 
1a9a5     60 80 00 00 
1a9a9     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
1a9ad     90 BF 00 00 
1a9b1     A8 DF 00 00 
1a9b5     C0 FF 00 00 
1a9b9     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
1a9bd     CE FF 39 00 
1a9c1     D5 FF 55 00 
1a9c5     DC FF 71 00 
1a9c9     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
1a9cd     EA FF AA 00 
1a9d1     F1 FF C6 00 
1a9d5     F8 FF E3 00 
1a9d9     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
1a9dd     00 40 00 00 
1a9e1     00 60 00 00 
1a9e5     00 80 00 00 
1a9e9     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
1a9ed     00 BF 00 00 
1a9f1     00 DF 00 00 
1a9f5     00 FF 00 00 
1a9f9     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
1a9fd     39 FF 39 00 
1aa01     55 FF 55 00 
1aa05     71 FF 71 00 
1aa09     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
1aa0d     AA FF AA 00 
1aa11     C6 FF C6 00 
1aa15     E3 FF E3 00 
1aa19     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
1aa1d     00 40 14 00 
1aa21     00 60 1E 00 
1aa25     00 80 28 00 
1aa29     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
1aa2d     00 BF 3C 00 
1aa31     00 DF 46 00 
1aa35     00 FF 50 00 
1aa39     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
1aa3d     39 FF 77 00 
1aa41     55 FF 8A 00 
1aa45     71 FF 9E 00 
1aa49     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
1aa4d     AA FF C5 00 
1aa51     C6 FF D8 00 
1aa55     E3 FF EC 00 
1aa59     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
1aa5d     00 40 28 00 
1aa61     00 60 3C 00 
1aa65     00 80 50 00 
1aa69     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
1aa6d     00 BF 78 00 
1aa71     00 DF 8C 00 
1aa75     00 FF A0 00 
1aa79     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
1aa7d     39 FF B5 00 
1aa81     55 FF C0 00 
1aa85     71 FF CA 00 
1aa89     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
1aa8d     AA FF DF 00 
1aa91     C6 FF EA 00 
1aa95     E3 FF F4 00 
1aa99     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
1aa9d     00 40 40 00 
1aaa1     00 60 60 00 
1aaa5     00 80 80 00 
1aaa9     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
1aaad     00 BF BF 00 
1aab1     00 DF DF 00 
1aab5     00 FF FF 00 
1aab9     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
1aabd     39 FF FF 00 
1aac1     55 FF FF 00 
1aac5     71 FF FF 00 
1aac9     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
1aacd     AA FF FF 00 
1aad1     C6 FF FF 00 
1aad5     E3 FF FF 00 
1aad9     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
1aadd     00 28 40 00 
1aae1     00 3C 60 00 
1aae5     00 50 80 00 
1aae9     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
1aaed     00 78 BF 00 
1aaf1     00 8C DF 00 
1aaf5     00 A0 FF 00 
1aaf9     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
1aafd     39 B5 FF 00 
1ab01     55 C0 FF 00 
1ab05     71 CA FF 00 
1ab09     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
1ab0d     AA DF FF 00 
1ab11     C6 EA FF 00 
1ab15     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
1ab18                 | '**********************************************************************************
1ab18                 | '
1ab18                 | '        Timings and colors definitions
1ab18                 | '
1ab18                 | '**********************************************************************************
1ab18                 | 
1ab18                 |    'streamer sets for text mode, to add to timings[0..5]
1ab18                 | ' todo for the retromachine: 768x576
1ab18                 | 
1ab18                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
1ab18     10 00 00 00 
1ab1c     50 00 00 00 
1ab20     14 00 00 00 
1ab24     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1ab28     70 00 00 00 
1ab2c     08 00 00 00 
1ab30     30 00 00 00 
1ab34     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
1ab38     10 00 00 00 
1ab3c     10 00 00 00 
1ab40     00 00 00 00 
1ab44     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
1ab48     E0 01 00 00 
1ab4c     F6 32 24 15 
1ab50     FB 6C C3 01 
1ab54     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1ab58                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
1ab58                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
1ab58     30 00 00 00 
1ab5c     50 00 00 00 
1ab60     34 00 00 00 
1ab64     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
1ab68     20 00 00 00 
1ab6c     08 00 00 00 
1ab70     16 00 00 00 
1ab74     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
1ab78     24 00 00 00 
1ab7c     18 00 00 00 
1ab80     40 00 00 00 
1ab84     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
1ab88     F0 01 00 00 
1ab8c     F6 32 24 15 
1ab90     FB 6C C3 01 
1ab94     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
1ab98                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
1ab98     10 00 00 00 
1ab9c     40 00 00 00 
1aba0     10 00 00 00 
1aba4     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
1aba8     08 00 00 00 
1abac     08 00 00 00 
1abb0     08 00 00 00 
1abb4     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
1abb8     40 00 00 00 
1abbc     20 00 00 00 
1abc0     80 00 00 00 
1abc4     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
1abc8     E0 01 00 00 
1abcc     70 AE E9 10 
1abd0     FB 8B FF 01 
1abd4     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
1abd8     10 00 00 00 
1abdc     42 00 00 00 
1abe0     14 00 00 00 
1abe4     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1abe8     00 00 00 00 
1abec     08 00 00 00 
1abf0     00 00 00 00 
1abf4     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
1abf8     10 00 00 00 
1abfc     10 00 00 00 
1ac00     C0 00 00 00 
1ac04     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
1ac08     40 02 00 00 
1ac0c     F6 32 24 15 
1ac10     FB 6C C3 01 
1ac14     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1ac18     50 00 00 00 
1ac1c     A0 00 00 00 
1ac20     54 00 00 00 
1ac24     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
1ac28     08 00 00 00 
1ac2c     08 00 00 00 
1ac30     08 00 00 00 
1ac34     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1ac38     0C 00 00 00 
1ac3c     08 00 00 00 
1ac40     00 01 00 00 
1ac44     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
1ac48     E0 01 00 00 
1ac4c     10 06 56 15 
1ac50     FB 64 C3 01 
1ac54     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
1ac58     50 00 00 00 
1ac5c     32 00 00 00 
1ac60     50 00 00 00 
1ac64     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1ac68     08 00 00 00 
1ac6c     08 00 00 00 
1ac70     08 00 00 00 
1ac74     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1ac78     0C 00 00 00 
1ac7c     08 00 00 00 
1ac80     40 01 00 00 
1ac84     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
1ac88     E0 01 00 00 
1ac8c     F2 CD 33 13 
1ac90     FB 53 92 01 
1ac94     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1ac98     18 00 00 00 
1ac9c     30 00 00 00 
1aca0     18 00 00 00 
1aca4     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
1aca8     08 00 00 00 
1acac     08 00 00 00 
1acb0     08 00 00 00 
1acb4     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1acb8     0C 00 00 00 
1acbc     08 00 00 00 
1acc0     80 01 00 00 
1acc4     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
1acc8     E0 01 00 00 
1accc     F4 8F 11 11 
1acd0     FB 3A 55 01 
1acd4     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
1acd8     20 00 00 00 
1acdc     40 00 00 00 
1ace0     22 00 00 00 
1ace4     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1ace8     00 00 00 00 
1acec     08 00 00 00 
1acf0     00 00 00 00 
1acf4     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
1acf8     0C 00 00 00 
1acfc     08 00 00 00 
1ad00     C0 01 00 00 
1ad04     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
1ad08     F0 01 00 00 
1ad0c     F2 CD 33 13 
1ad10     FB 53 92 01 
1ad14     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1ad18                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
1ad18     00 75 C7 97 
1ad1c     27 47 F6 0A 
1ad20     05 79 CB 9B 
1ad24     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
1ad28                 | 
1ad28     28 12 64 FD | hdmi            setq    #9
1ad2c     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
1ad30                 |            '     setq2   #255
1ad30                 |             '    rdlong  $100, paletteptr 
1ad30     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
1ad34     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
1ad38     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
1ad3c     78 F9 02 F1 |                 add     ii,hbase
1ad40     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
1ad44     7B 0B 80 FF 
1ad48     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
1ad4c                 | 
1ad4c     66 66 86 FF 
1ad50     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
1ad54                 | 
1ad54                 | 
1ad54                 | ''--------  frame rendering main loop  ---------------------------------------------------
1ad54                 | 
1ad54                 | p101
1ad54     28 14 64 FD |                 setq    #10
1ad58     00 DF 06 FB |                 rdlong  framebuf,  ptra
1ad5c     28 1E 64 FD |                 setq    #15
1ad60     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
1ad64     71 99 02 FB |                 rdlong  border,borderptr
1ad68                 | 
1ad68     01 C4 06 F1 |                 add     frames,#1
1ad6c     76 F5 02 F6 |                 mov     dlptr2,dlptr
1ad70                 | 
1ad70     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
1ad74     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
1ad78     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
1ad7c     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
1ad80                 |  '' up porch
1ad80                 | 
1ad80     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
1ad84     49 FF 02 F6 |                 mov     hsync1,sync_001
1ad88     37 A8 46 FB |                 callpa  i_upporch ,#blank
1ad8c     72 01 68 FC |                 wrlong  #0,vblankptr
1ad90                 |                 
1ad90     1F EA 16 F4 |                 testb   paletteptr,#31 wc
1ad94     29 FE 65 3D |          if_nc  setq2   #255
1ad98     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
1ad9c                 | 
1ad9c                 | '' cursor blinking
1ad9c                 | 
1ad9c     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
1ada0     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
1ada4                 | 
1ada4                 | '' main screen
1ada4                 | 
1ada4     00 BE 06 F6 |                 mov linenum,#0
1ada8     00 18 07 F6 |                 mov rcnt,#0
1adac     00 1C 07 F6 |                 mov rcnt2a,#0
1adb0                 | 
1adb0                 | 
1adb0     00 18 0F F2 | p301            cmp rcnt,#0 wz
1adb4     18 00 90 AD |         if_z    jmp #p306
1adb8     01 18 87 F1 |                 sub rcnt,#1
1adbc     90 F7 02 F6 |                 mov dl,rdl
1adc0     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
1adc4     8F F7 02 A1 |    if_z        add dl,roffset  
1adc8     7B 21 03 F6 |                 mov rdl,dl
1adcc     04 00 90 FD |                 jmp #p307          
1add0                 |           
1add0                 |                 
1add0     7A F7 02 FB | p306            rdlong  dl,dlptr2
1add4     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
1add8     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
1addc     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
1ade0                 | 
1ade0                 | '' Special entry:
1ade0                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
1ade0                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
1ade0                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
1ade0                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
1ade0                 | '' todo: set horizontal scroll (if needed)
1ade0                 | 
1ade0     02 FA 66 F0 |                 shl framebuf2,#2
1ade4     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
1ade8     04 22 0F F2 |                 cmp dlc,#%100 wz
1adec                 |   
1adec                 |                 
1adec     04 F4 06 F1 |                 add dlptr2,#4
1adf0     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
1adf4     7A 21 03 FB |                  rdlong rdl,dlptr2
1adf8     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
1adfc     04 18 47 F0 |                  shr rcnt,#4
1ae00                 |              
1ae00     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
1ae04     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
1ae08                 |                 
1ae08     04 1E 47 F0 |                  shr roffset,#4
1ae0c     0C 1E 67 F0 |                  shl roffset,#12
1ae10                 |   
1ae10     9C FF 9F FD |                  jmp #p301
1ae14                 |                  
1ae14                 |                  
1ae14                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
1ae14     0C FA 46 F0 |                 shr     framebuf2,#12
1ae18     02 FA 66 F0 |                 shl     framebuf2,#2
1ae1c                 | 
1ae1c     7B 03 E3 F8 |                 getbyte t1,dl,#0
1ae20     00 02 0F F2 |                 cmp     t1,#0 wz
1ae24     34 00 90 AD |     if_z        jmp     #borderline
1ae28                 | 
1ae28     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
1ae2c     50 00 90 CD |           if_c   jmp     #textline
1ae30     50 02 90 3D |           if_nc  jmp     #graphline
1ae34                 | '
1ae34     01 BE 06 F1 | p302            add     linenum,#1
1ae38     04 F4 06 F1 |                 add     dlptr2,#4
1ae3c     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
1ae40     6C FF 9F 5D |          if_nz  jmp     #p301
1ae44                 | 
1ae44     72 03 68 FC | p112            wrlong  #1,vblankptr
1ae48     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
1ae4c                 | 
1ae4c     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
1ae50     4B FF 02 F6 |                 mov     hsync1,sync_223
1ae54     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
1ae58     F8 FE 9F FD |                 jmp     #p101
1ae5c                 | 
1ae5c                 | '' ---------------  END of frame rendering loop -------------------------------------------
1ae5c                 | 
1ae5c                 | 
1ae5c     14 00 B0 FD | borderline      call    #hsync                      ' make a border
1ae60     4C A1 C2 FC |                 xcont   m_vi,border
1ae64     CC FF 9F FD |                 jmp     #p302
1ae68                 | 
1ae68                 | 
1ae68     08 00 B0 FD | blank           call    #hsync                          'blank lines
1ae6c     7E A1 C2 FC |                 xcont   m_vi,hsync0
1ae70     FD ED 6F 0B |         _ret_   djnz    pa,#blank
1ae74                 | 
1ae74     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
1ae78     7F 9D B2 FC |                 xzero   m_sn,hsync1
1ae7c     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
1ae80                 | 
1ae80                 | 
1ae80                 | 
1ae80                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
1ae80                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
1ae80                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
1ae80                 | 
1ae80                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
1ae80                 | 
1ae80     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
1ae84                 | 
1ae84     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
1ae88     7B 17 5B F8 |                 getnib  zoom, dl,#3
1ae8c     03 16 07 F5 |                 and             zoom, #3
1ae90                 | 
1ae90                 | 
1ae90                 | 
1ae90     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
1ae94     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
1ae98     3F BC 06 F5 |                 and     linestart,#63
1ae9c     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
1aea0     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
1aea4                 | 
1aea4     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
1aea8                 | 
1aea8                 |                        ' if fontline =0, get a border color
1aea8                 | 
1aea8     51 03 33 F9 | p102            getword t1,m_border,#0
1aeac     00 02 0F F2 |                 cmp     t1, #0 wz
1aeb0     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1aeb4                 | 
1aeb4     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
1aeb8     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
1aebc     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
1aec0     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
1aec4     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1aec8     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
1aecc     52 BB 02 F6 |                 mov m_lut2, m_lut1
1aed0     6A BB 02 F1 |                 add m_lut2, lutt1
1aed4     58 0F 03 F6 |                 mov cpl2,i_cpl
1aed8                 | 
1aed8     02 16 0F F2 |                cmp zoom,#2 wz
1aedc     E4 00 90 AD |           if_z jmp #p420
1aee0     01 16 0F F2 |                cmp zoom,#1 wz
1aee4     64 00 90 AD |           if_z jmp #p410
1aee8     00 16 0F F2 |                 cmp zoom,#0 wz
1aeec     04 00 90 AD |           if_z jmp #p400
1aef0     50 01 90 FD |                jmp #p430
1aef4                 | 
1aef4                 |                    '
1aef4                 |  ''---------------------------------------------------------------------------------------------------------
1aef4     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1aef8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1aefc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1af00     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1af04     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1af08     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1af0c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1af10     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1af14     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1af18     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1af1c                 | 
1af1c     81 BB C2 FC |                         xcont m_lut2,t1
1af20                 | 
1af20     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1af24     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1af28     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1af2c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1af30     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1af34     01 C0 86 F1 |                         sub     lutaddr,#1
1af38                 | 
1af38     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1af3c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1af40     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1af44                 | 
1af44     EB 0F 6F FB |                         djnz   cpl2,#p400
1af48     28 01 90 FD |  p401                   jmp    #p103
1af4c                 | 
1af4c                 | ''------------------------------------------------------------------------------------------------------------
1af4c                 | 
1af4c     01 0E 47 F0 |  p410                   shr cpl2,#1
1af50                 | 
1af50                 | ''---------------------------------------------------------------------------------------------------------
1af50     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
1af54     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1af58     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1af5c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1af60     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1af64     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1af68     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1af6c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1af70     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1af74     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1af78                 | 
1af78                 | 
1af78     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
1af7c     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
1af80     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
1af84     03 02 07 FA |                         mul t1,#3
1af88     81 BB C2 FC |                         xcont m_lut2,t1
1af8c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1af90     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1af94     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1af98     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1af9c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1afa0     01 C0 86 F1 |                         sub     lutaddr,#1
1afa4     63 06 63 FD |                         mergew t3
1afa8     03 06 07 FA |                         mul t3,#3
1afac     83 BB C2 FC |                         xcont m_lut2,t3
1afb0                 | 
1afb0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1afb4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1afb8                 | 
1afb8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1afbc                 | 
1afbc     E4 0F 6F FB |                         djnz   cpl2,#p412
1afc0     B0 00 90 FD |  p411                   jmp    #p103
1afc4                 | 
1afc4                 | ''------------------------------------------------------------------------------------------------------------
1afc4                 | 
1afc4     02 0E 47 F0 |  p420                   shr cpl2,#2
1afc8                 | 
1afc8                 | ''---------------------------------------------------------------------------------------
1afc8     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
1afcc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1afd0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1afd4     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1afd8     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1afdc     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1afe0     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1afe4     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1afe8     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1afec     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1aff0                 | 
1aff0     61 02 63 FD |                         mergeb t1
1aff4     81 07 3B F9 |                         getword t3,t1,#1
1aff8     0F 02 07 FA |                         mul t1,#15
1affc     81 BB C2 FC |                         xcont m_lut2,t1
1b000                 | 
1b000     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b004     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b008     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b00c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b010     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b014     01 C0 86 F1 |                         sub     lutaddr,#1
1b018                 | 
1b018     81 09 EB F8 |                         getbyte t4,t1,#1        '
1b01c     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
1b020                 | 
1b020     0F 06 07 FA |                         mul t3,#15
1b024     83 BB C2 FC |                         xcont m_lut2,t3
1b028                 | 
1b028     83 0B EB F8 |                         getbyte t5,t3,#1
1b02c     85 BB C2 FC |                         xcont m_lut2, t5
1b030     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1b034     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1b038                 | 
1b038     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1b03c                 | 
1b03c     E2 0F 6F FB |                         djnz   cpl2,#p422
1b040     30 00 90 FD |  p421                   jmp    #p103
1b044                 | 
1b044                 | '--------------------------------------------------------------------------------------------------------------
1b044                 | 
1b044     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
1b048     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1b04c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1b050                 | 
1b050     00 BA C6 FC |                         xcont m_lut2,#0
1b054                 | 
1b054     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b058     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b05c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b060     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b064     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b068     01 C0 86 F1 |                         sub     lutaddr,#1
1b06c                 | 
1b06c     F5 0F 6F FB |                         djnz   cpl2,#p430
1b070     00 00 90 FD |  p431                   jmp    #p103
1b074                 | 
1b074                 | ''------------------------------------------------------------------------------------------------------------
1b074                 | 
1b074                 | 
1b074                 | 
1b074     51 25 33 F9 | p103            getword  mb2,m_border,#0
1b078     00 24 0F F2 |                 cmp      mb2, #0 wz
1b07c     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1b080                 | 
1b080     B0 FD 9F FD |                 jmp #p302
1b084                 | 
1b084                 | '' -------------------------------------- END of text line ---------------------------------
1b084                 | 
1b084                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1b084                 | 
1b084     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1b088                 | 
1b088                 | 
1b088     51 25 33 F9 | p202            getword mb2,m_border,#0
1b08c     00 24 0F F2 |                 cmp     mb2, #0 wz
1b090     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1b094                 | 
1b094                 | '----------------------------------------- display pixels
1b094                 | 
1b094     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1b098     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1b09c                 | 
1b09c     7B 17 5B F8 |                 getnib  zoom, dl,#3
1b0a0     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1b0a4                 | 
1b0a4     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1b0a8     0C BC 06 F5 |                 and     colordepth,#12
1b0ac                 | 
1b0ac     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1b0b0     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1b0b4     64 00 90 AD |           if_z  jmp     #p240
1b0b8                 | 
1b0b8     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1b0bc     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1b0c0     98 00 90 AD |           if_z  jmp     #p250
1b0c4                 | 
1b0c4     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1b0c8     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1b0cc     FC 00 90 AD |           if_z  jmp     #p260
1b0d0                 | 
1b0d0     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1b0d4                 | 
1b0d4                 | '' --- 8 bit color modes
1b0d4                 | 
1b0d4     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1b0d8     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1b0dc                 | 
1b0dc     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1b0e0     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1b0e4                 |        
1b0e4                 |  '  
1b0e4     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1b0e8     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1b0ec                 |     
1b0ec                 |  
1b0ec     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1b0f0     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1b0f4                 |         
1b0f4                 | 
1b0f4                 |         
1b0f4     7D 11 03 FB | p235               rdlong  char,framebuf2
1b0f8     32 0C 63 FD |                    skipf skippattern
1b0fc     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1b100     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1b104     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1b108     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1b10c     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1b110     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1b114     F7 0F 6F FB |                    djnz    cpl2,#p235
1b118                 | 
1b118     20 01 90 FD |                jmp    #p203
1b11c                 |                   
1b11c                 | 
1b11c                 | 
1b11c                 | '' --- 1 bit color modes
1b11c                 | 
1b11c     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1b120     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1b124                 | 
1b124     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1b128     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1b12c     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1b130                 | 
1b130                 | 
1b130     7D 11 E3 FA | p241               rdword  char,framebuf2
1b134     44 10 FF F9 |                    movbyts char,#%01000100
1b138     63 10 63 FD |                    mergew  char
1b13c     32 0C 63 FD |                    skipf skippattern
1b140     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1b144     63 10 63 FD |                    mergew  char                    ' 1 0
1b148     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1b14c     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1b150     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1b154     F6 0F 6F FB |                    djnz   cpl2,#p241
1b158                 | 
1b158                 | 
1b158     E0 00 90 FD |                jmp    #p203
1b15c                 | 
1b15c                 | '' --- 2 bit color modes
1b15c                 | 
1b15c     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1b160     C8 00 90 AD |        if_z   jmp #p251
1b164                 | 
1b164     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1b168     30 00 90 AD |        if_z   jmp #p252
1b16c                 | 
1b16c                 | 
1b16c     7D 11 C3 FA | p254               rdbyte char,framebuf2
1b170     04 0A 07 F6 |                    mov  t5,#4
1b174     02 10 67 F0 | p255               shl  char,#2
1b178     88 03 53 F8 |                    getnib  t1,char,#2
1b17c     03 02 07 F5 |                    and     t1,#3
1b180     55 02 07 FA |                    mul     t1,#$55
1b184     81 05 03 F9 |                    rolbyte  t2,t1,#0
1b188     FA 0B 6F FB |                    djnz    t5,#p255
1b18c     82 BB C2 FC |                    xcont   m_lut2,t2
1b190     01 FA 06 F1 |                    add     framebuf2,#1
1b194     F5 0F 6F FB |                    djnz    cpl2,#p254
1b198     A0 00 90 FD |                    jmp     #p203
1b19c                 | 
1b19c     7D 11 E3 FA | p252               rdword char,framebuf2
1b1a0     08 0A 07 F6 |                    mov  t5,#8
1b1a4     02 10 67 F0 | p253               shl  char,#2
1b1a8     88 03 63 F8 |                    getnib  t1,char,#4
1b1ac     03 02 07 F5 |                    and     t1,#3
1b1b0     05 02 07 FA |                    mul     t1,#5
1b1b4     81 05 83 F8 |                    rolnib  t2,t1,#0
1b1b8     FA 0B 6F FB |                    djnz    t5,#p253
1b1bc     82 BB C2 FC |                    xcont   m_lut2,t2
1b1c0     02 FA 06 F1 |                    add     framebuf2,#2
1b1c4     F5 0F 6F FB |                    djnz    cpl2,#p252
1b1c8     70 00 90 FD |                    jmp     #p203
1b1cc                 | 
1b1cc                 | '' ------ 4 bit color modes
1b1cc                 | 
1b1cc     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1b1d0     58 00 90 AD |        if_z   jmp #p251
1b1d4                 | 
1b1d4     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1b1d8     2C 00 90 AD |        if_z   jmp #p262
1b1dc                 | 
1b1dc                 | 
1b1dc     7D 11 C3 FA | p263               rdbyte char,framebuf2
1b1e0     02 0A DC FC |                            rep #5,#2
1b1e4     88 05 8B F8 |                              rolnib t2,char,#1
1b1e8     88 05 8B F8 |                                  rolnib t2,char,#1
1b1ec     88 05 8B F8 |                              rolnib t2,char,#1
1b1f0     88 05 8B F8 |                                  rolnib t2,char,#1
1b1f4     04 10 67 F0 |                              shl char,#4
1b1f8     82 BB C2 FC |                    xcont   m_lut2,t2
1b1fc     01 FA 06 F1 |                    add     framebuf2,#1
1b200     F6 0F 6F FB |                    djnz    cpl2,#p263
1b204     34 00 90 FD |                    jmp     #p203
1b208                 | 
1b208     7D 11 E3 FA | p262               rdword  char,framebuf2
1b20c     04 06 DC FC |                            rep #3,#4
1b210     88 05 9B F8 |                              rolnib t2,char,#3
1b214     88 05 9B F8 |                                  rolnib t2,char,#3
1b218     04 10 67 F0 |                              shl char,#4
1b21c     82 BB C2 FC |                    xcont   m_lut2,t2
1b220     02 FA 06 F1 |                    add     framebuf2,#2
1b224     F8 0F 6F FB |                    djnz    cpl2,#p262
1b228     10 00 90 FD |                    jmp     #p203
1b22c                 | 
1b22c                 | ''---------- all color modes without zoom
1b22c                 | 
1b22c     87 07 D8 FC | p251               rep  #3,cpl2
1b230     7D 11 03 FB |                    rdlong  char,framebuf2
1b234     04 FA 06 F1 |                    add     framebuf2,#4
1b238     88 BB C2 FC |                    xcont   m_lut2,char
1b23c                 |           
1b23c                 |  ''-----------------------------------------------------------------------------------------
1b23c                 | p203           ' getword  mb2,m_border,#0
1b23c     00 24 0F F2 |                 cmp      mb2, #0 wz
1b240     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1b244                 | 
1b244     EC FB 9F FD |                 jmp #p302
1b248                 | 
1b248                 | '' -------------------------------------- END of graph  line ---------------------------------
1b248                 | 
1b248                 | '' consts and vars
1b248                 | 
1b248     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1b24c     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1b250     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1b254     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1b258                 | 
1b258     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1b25c                 | 
1b25c                 | '------ these longs will be set by setmode function
1b25c                 | 
1b25c     00 00 00 00 | m_bs            long    0        'blanks before sync
1b260     00 00 00 00 | m_sn            long    0        'sync
1b264     00 00 00 00 | m_bv            long    0        'blanks before visible
1b268     00 00 00 00 | m_vi            long    0        'visible pixels #
1b26c     00 00 00 00 | m_border        long    0        'left/right borders
1b270     00 00 00 00 | m_lut1          long    0        'characters
1b274     00 00 00 00 | i_vborder       long    0        'up/down borders
1b278     00 00 00 00 | i_upporch       long    0        'up porch lines
1b27c     00 00 00 00 | i_vsync         long    0        'vsync lines
1b280     00 00 00 00 | i_downporch     long    0        'down porch lines
1b284     00 00 00 00 | i_modenum       long    0        'mode #
1b288     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1b28c     00 00 00 00 | i_lines         long    0        'scanlines #
1b290     00 00 00 00 | i_clock         long    0
1b294     00 00 00 00 | i_hubset        long    0
1b298     00 00 00 00 | i_totalvis      long    0
1b29c                 | 
1b29c                 | '-------------------------------------
1b29c                 | 
1b29c     00 00 00 00 | m_lut2          long    0
1b2a0                 | 
1b2a0                 | colordepth
1b2a0     00 00 00 00 | linestart       long    0
1b2a4     00 00 00 00 | linenum         long    0
1b2a8     00 01 00 00 | lutaddr         long    256
1b2ac                 | 
1b2ac     0E 00 00 00 | cursorsh        long    14
1b2b0     00 00 00 00 | frames          long    0
1b2b4     00 00 00 00 | cursorx         long    0
1b2b8     00 00 00 00 | cursory         long    0
1b2bc     00 00 00 00 | cursorpos       long    0
1b2c0     00 00 00 00 | cursorpos2      long    0
1b2c4     00 00 00 00 | fontstart       long    0
1b2c8     00 00 00 00 | border2         long 0
1b2cc     00 00 81 70 | lutiv           long $70810000
1b2d0     00 00 88 00 | lutt1           long $00880000
1b2d4     00 00 80 00 | lutg1           long $00800000
1b2d8     00 00 80 10 | lutg2           long $10800000
1b2dc     00 00 80 20 | lutg4           long $20800000
1b2e0     00 00 80 30 | lutg8           long $30800000
1b2e4     00 00 00 00 | framebuf        long 0
1b2e8     00 00 00 00 | fontbuf         long 0
1b2ec     00 00 00 00 | borderptr       long 0
1b2f0     00 00 00 00 | vblankptr       long 0
1b2f4     00 00 00 00 | cursorptr       long 0
1b2f8     00 00 00 00 | modeptr         long 0
1b2fc     00 00 00 00 | paletteptr      long 0
1b300     00 00 00 00 | dlptr           long 0
1b304                 | fontnumptr      res     1
1b304                 | fontnumptr      res     1
1b304                 | hbase           res     1
1b304                 | hbase           res     1
1b304                 | borderptr2      res     1
1b304                 | borderptr2      res     1
1b304                 | dlptr2 res 1
1b304                 | dlptr2 res 1
1b304                 | dl              res 1
1b304                 | dl              res 1
1b304                 | ii              res     1
1b304                 | ii              res     1
1b304                 | framebuf2       res     1
1b304                 | framebuf2       res     1
1b304                 | hsync0          res     1
1b304                 | hsync0          res     1
1b304                 | hsync1          res     1
1b304                 | hsync1          res     1
1b304                 | fontline        res     1
1b304                 | fontline        res     1
1b304                 | t1              res     1
1b304                 | t1              res     1
1b304                 | t2              res     1
1b304                 | t2              res     1
1b304                 | t3 res 1
1b304                 | t3 res 1
1b304                 | t4 res 1
1b304                 | t4 res 1
1b304                 | t5 res 1
1b304                 | t5 res 1
1b304                 | skippattern res 1
1b304                 | skippattern res 1
1b304                 | cpl2 res 1
1b304                 | cpl2 res 1
1b304                 | char            res     1
1b304                 | char            res     1
1b304                 | backcolor       res     1
1b304                 | backcolor       res     1
1b304                 | charcolor       res     1
1b304                 | charcolor       res     1
1b304                 | zoom res 1
1b304                 | zoom res 1
1b304     00 00 00 00 | rcnt long 0 'dl repeat count
1b308     00 00 00 00 | rcnt2 long 0
1b30c     00 00 00 00 | rcnt2a long 0
1b310     00 00 00 00 | roffset long 0
1b314     00 00 00 00 | rdl long 0  'dl repeat line
1b318     00 00 00 00 | dlc long 0 'dl command
1b31c     00 00 00 00 | mb2 long 0
1b320     00 00 00 00 | aend             long 0
1b324                 |                 fit     496                     '
1b324                 | _trackerplayer_spin2_dat_
1b324                 | 
1b324     00 00 00 00 | null             long  0
1b328     46 52 45 51 
1b32c     46 52 45 51 
1b330     46 52 45 51 
1b334     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1b338     46 52 45 51 
1b33c     46 52 45 51 
1b340     46 52 45 51 
1b344     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b348     46 52 45 51 
1b34c     46 52 45 51 
1b350     46 52 45 51 
1b354     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b358     46 52 45 51 
1b35c     46 52 45 51 
1b360     46 52 45 51 
1b364     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b368     46 52 45 51 
1b36c     46 52 45 51 
1b370     46 52 45 51 
1b374     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b378     46 52 45 51 
1b37c     46 52 45 51 
1b380     46 52 45 51 
1b384     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b388     46 52 45 51 
1b38c     46 52 45 51 
1b390     46 52 45 51 
1b394     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b398     46 52 45 51 
1b39c     46 52 45 51 
1b3a0     46 52 45 51 
1b3a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3a8     46 52 45 51 
1b3ac     46 52 45 51 
1b3b0     46 52 45 51 
1b3b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3b8     46 52 45 51 
1b3bc     46 52 45 51 
1b3c0     46 52 45 51 
1b3c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3c8     46 52 45 51 
1b3cc     46 52 45 51 
1b3d0     46 52 45 51 
1b3d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3d8     46 52 45 51 
1b3dc     46 52 45 51 
1b3e0     46 52 45 51 
1b3e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3e8     46 52 45 51 
1b3ec     46 52 45 51 
1b3f0     46 52 45 51 
1b3f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3f8     46 52 45 51 
1b3fc     46 52 45 51 
1b400     46 52 45 51 
1b404     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b408     46 52 45 51 
1b40c     46 52 45 51 
1b410     46 52 45 51 
1b414     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b418     46 52 45 51 
1b41c     46 52 45 51 
1b420     46 52 45 51 
1b424     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b428     46 52 45 51 
1b42c     46 52 45 51 
1b430     46 52 45 51 
1b434     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b438     46 52 45 51 
1b43c     46 52 45 51 
1b440     46 52 45 51 
1b444     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b448     46 52 45 51 
1b44c     46 52 45 51 
1b450     46 52 45 51 
1b454     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b458     46 52 45 51 
1b45c     46 52 45 51 
1b460     46 52 45 51 
1b464     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b468     46 52 45 51 
1b46c     46 52 45 51 
1b470     46 52 45 51 
1b474     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b478     46 52 45 51 
1b47c     46 52 45 51 
1b480     46 52 45 51 
1b484     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b488     46 52 45 51 
1b48c     46 52 45 51 
1b490     46 52 45 51 
1b494     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b498     46 52 45 51 
1b49c     46 52 45 51 
1b4a0     46 52 45 51 
1b4a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4a8     46 52 45 51 
1b4ac     46 52 45 51 
1b4b0     46 52 45 51 
1b4b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4b8     46 52 45 51 
1b4bc     46 52 45 51 
1b4c0     46 52 45 51 
1b4c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4c8     46 52 45 51 
1b4cc     46 52 45 51 
1b4d0     46 52 45 51 
1b4d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4d8     46 52 45 51 
1b4dc     46 52 45 51 
1b4e0     46 52 45 51 
1b4e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4e8     46 52 45 51 
1b4ec     46 52 45 51 
1b4f0     46 52 45 51 
1b4f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4f8     46 52 45 51 
1b4fc     46 52 45 51 
1b500     46 52 45 51 
1b504     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b508     46 52 45 51 
1b50c     46 52 45 51 
1b510     46 52 45 51 
1b514     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b518     46 52 45 51 
1b51c     46 52 45 51 
1b520     46 52 45 51 
1b524     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b528     46 52 45 51 
1b52c     46 52 45 51 
1b530     46 52 45 51 
1b534     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b538     46 52 45 51 
1b53c     46 52 45 51 
1b540     46 52 45 51 
1b544     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b548     46 52 45 51 
1b54c     46 52 45 51 
1b550     46 52 45 51 
1b554     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b558     46 52 45 51 
1b55c     46 52 45 51 
1b560     46 52 45 51 
1b564     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b568     46 52 45 51 
1b56c     46 52 45 51 
1b570     46 52 45 51 
1b574     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b578     46 52 45 51 
1b57c     46 52 45 51 
1b580     46 52 45 51 
1b584     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b588     46 52 45 51 
1b58c     46 52 45 51 
1b590     46 52 45 51 
1b594     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b598     46 52 45 51 
1b59c     46 52 45 51 
1b5a0     46 52 45 51 
1b5a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5a8     46 52 45 51 
1b5ac     46 52 45 51 
1b5b0     46 52 45 51 
1b5b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5b8     46 52 45 51 
1b5bc     46 52 45 51 
1b5c0     46 52 45 51 
1b5c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5c8     46 52 45 51 
1b5cc     46 52 45 51 
1b5d0     46 52 45 51 
1b5d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5d8     46 52 45 51 
1b5dc     46 52 45 51 
1b5e0     46 52 45 51 
1b5e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5e8     46 52 45 51 
1b5ec     46 52 45 51 
1b5f0     46 52 45 51 
1b5f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5f8     46 52 45 51 
1b5fc     46 52 45 51 
1b600     46 52 45 51 
1b604     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b608     46 52 45 51 
1b60c     46 52 45 51 
1b610     46 52 45 51 
1b614     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b618     46 52 45 51 
1b61c     46 52 45 51 
1b620     46 52 45 51 
1b624     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b628     46 52 45 51 
1b62c     46 52 45 51 
1b630     46 52 45 51 
1b634     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b638     46 52 45 51 
1b63c     46 52 45 51 
1b640     46 52 45 51 
1b644     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b648     46 52 45 51 
1b64c     46 52 45 51 
1b650     46 52 45 51 
1b654     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b658     46 52 45 51 
1b65c     46 52 45 51 
1b660     46 52 45 51 
1b664     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b668     46 52 45 51 
1b66c     46 52 45 51 
1b670     46 52 45 51 
1b674     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b678     46 52 45 51 
1b67c     46 52 45 51 
1b680     46 52 45 51 
1b684     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b688     46 52 45 51 
1b68c     46 52 45 51 
1b690     46 52 45 51 
1b694     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b698     46 52 45 51 
1b69c     46 52 45 51 
1b6a0     46 52 45 51 
1b6a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6a8     46 52 45 51 
1b6ac     46 52 45 51 
1b6b0     46 52 45 51 
1b6b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6b8     46 52 45 51 
1b6bc     46 52 45 51 
1b6c0     46 52 45 51 
1b6c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6c8     46 52 45 51 
1b6cc     46 52 45 51 
1b6d0     46 52 45 51 
1b6d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6d8     46 52 45 51 
1b6dc     46 52 45 51 
1b6e0     46 52 45 51 
1b6e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6e8     46 52 45 51 
1b6ec     46 52 45 51 
1b6f0     46 52 45 51 
1b6f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6f8     46 52 45 51 
1b6fc     46 52 45 51 
1b700     46 52 45 51 
1b704     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b708     46 52 45 51 
1b70c     46 52 45 51 
1b710     46 52 45 51 
1b714     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b718     46 52 45 51 
1b71c     46 52 45 51 
1b720     46 52 45 51 
1b724     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b728     46 52 45 51 
1b72c     46 52 45 51 
1b730     46 52 45 51 
1b734     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b738     46 52 45 51 
1b73c     46 52 45 51 
1b740     46 52 45 51 
1b744     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b748     46 52 45 51 
1b74c     46 52 45 51 
1b750     46 52 45 51 
1b754     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b758     46 52 45 51 
1b75c     46 52 45 51 
1b760     46 52 45 51 
1b764     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b768     46 52 45 51 
1b76c     46 52 45 51 
1b770     46 52 45 51 
1b774     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b778     46 52 45 51 
1b77c     46 52 45 51 
1b780     46 52 45 51 
1b784     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b788     46 52 45 51 
1b78c     46 52 45 51 
1b790     46 52 45 51 
1b794     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b798     46 52 45 51 
1b79c     46 52 45 51 
1b7a0     46 52 45 51 
1b7a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7a8     46 52 45 51 
1b7ac     46 52 45 51 
1b7b0     46 52 45 51 
1b7b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7b8     46 52 45 51 
1b7bc     46 52 45 51 
1b7c0     46 52 45 51 
1b7c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7c8     46 52 45 51 
1b7cc     46 52 45 51 
1b7d0     46 52 45 51 
1b7d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7d8     46 52 45 51 
1b7dc     46 52 45 51 
1b7e0     46 52 45 51 
1b7e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7e8     46 52 45 51 
1b7ec     46 52 45 51 
1b7f0     46 52 45 51 
1b7f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7f8     46 52 45 51 
1b7fc     46 52 45 51 
1b800     46 52 45 51 
1b804     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b808     46 52 45 51 
1b80c     46 52 45 51 
1b810     46 52 45 51 
1b814     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b818     46 52 45 51 
1b81c     46 52 45 51 
1b820     46 52 45 51 
1b824     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b828     46 52 45 51 
1b82c     46 52 45 51 
1b830     46 52 45 51 
1b834     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b838     46 52 45 51 
1b83c     46 52 45 51 
1b840     46 52 45 51 
1b844     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b848     46 52 45 51 
1b84c     46 52 45 51 
1b850     46 52 45 51 
1b854     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b858     46 52 45 51 
1b85c     46 52 45 51 
1b860     46 52 45 51 
1b864     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b868     46 52 45 51 
1b86c     46 52 45 51 
1b870     46 52 45 51 
1b874     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b878     46 52 45 51 
1b87c     46 52 45 51 
1b880     46 52 45 51 
1b884     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b888     46 52 45 51 
1b88c     46 52 45 51 
1b890     46 52 45 51 
1b894     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b898     46 52 45 51 
1b89c     46 52 45 51 
1b8a0     46 52 45 51 
1b8a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8a8     46 52 45 51 
1b8ac     46 52 45 51 
1b8b0     46 52 45 51 
1b8b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8b8     46 52 45 51 
1b8bc     46 52 45 51 
1b8c0     46 52 45 51 
1b8c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8c8     46 52 45 51 
1b8cc     46 52 45 51 
1b8d0     46 52 45 51 
1b8d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8d8     46 52 45 51 
1b8dc     46 52 45 51 
1b8e0     46 52 45 51 
1b8e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8e8     46 52 45 51 
1b8ec     46 52 45 51 
1b8f0     46 52 45 51 
1b8f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8f8     46 52 45 51 
1b8fc     46 52 45 51 
1b900     46 52 45 51 
1b904     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b908     46 52 45 51 
1b90c     46 52 45 51 
1b910     46 52 45 51 
1b914     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b918     46 52 45 51 
1b91c     46 52 45 51 
1b920     46 52 45 51 
1b924     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b928     46 52 45 51 
1b92c     46 52 45 51 
1b930     46 52 45 51 
1b934     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b938     46 52 45 51 
1b93c     46 52 45 51 
1b940     46 52 45 51 
1b944     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b948     46 52 45 51 
1b94c     46 52 45 51 
1b950     46 52 45 51 
1b954     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b958     46 52 45 51 
1b95c     46 52 45 51 
1b960     46 52 45 51 
1b964     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b968     46 52 45 51 
1b96c     46 52 45 51 
1b970     46 52 45 51 
1b974     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b978     46 52 45 51 
1b97c     46 52 45 51 
1b980     46 52 45 51 
1b984     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b988     46 52 45 51 
1b98c     46 52 45 51 
1b990     46 52 45 51 
1b994     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b998     46 52 45 51 
1b99c     46 52 45 51 
1b9a0     46 52 45 51 
1b9a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9a8     46 52 45 51 
1b9ac     46 52 45 51 
1b9b0     46 52 45 51 
1b9b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9b8     46 52 45 51 
1b9bc     46 52 45 51 
1b9c0     46 52 45 51 
1b9c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9c8     46 52 45 51 
1b9cc     46 52 45 51 
1b9d0     46 52 45 51 
1b9d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9d8     46 52 45 51 
1b9dc     46 52 45 51 
1b9e0     46 52 45 51 
1b9e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9e8     46 52 45 51 
1b9ec     46 52 45 51 
1b9f0     46 52 45 51 
1b9f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9f8     46 52 45 51 
1b9fc     46 52 45 51 
1ba00     46 52 45 51 
1ba04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba08     46 52 45 51 
1ba0c     46 52 45 51 
1ba10     46 52 45 51 
1ba14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba18     46 52 45 51 
1ba1c     46 52 45 51 
1ba20     46 52 45 51 
1ba24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba28     46 52 45 51 
1ba2c     46 52 45 51 
1ba30     46 52 45 51 
1ba34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba38     46 52 45 51 
1ba3c     46 52 45 51 
1ba40     46 52 45 51 
1ba44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba48     46 52 45 51 
1ba4c     46 52 45 51 
1ba50     46 52 45 51 
1ba54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba58     46 52 45 51 
1ba5c     46 52 45 51 
1ba60     46 52 45 51 
1ba64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba68     46 52 45 51 
1ba6c     46 52 45 51 
1ba70     46 52 45 51 
1ba74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba78     46 52 45 51 
1ba7c     46 52 45 51 
1ba80     46 52 45 51 
1ba84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba88     46 52 45 51 
1ba8c     46 52 45 51 
1ba90     46 52 45 51 
1ba94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba98     46 52 45 51 
1ba9c     46 52 45 51 
1baa0     46 52 45 51 
1baa4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1baa8     46 52 45 51 
1baac     46 52 45 51 
1bab0     46 52 45 51 
1bab4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bab8     46 52 45 51 
1babc     46 52 45 51 
1bac0     46 52 45 51 
1bac4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bac8     46 52 45 51 
1bacc     46 52 45 51 
1bad0     46 52 45 51 
1bad4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bad8     46 52 45 51 
1badc     46 52 45 51 
1bae0     46 52 45 51 
1bae4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bae8     46 52 45 51 
1baec     46 52 45 51 
1baf0     46 52 45 51 
1baf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1baf8     46 52 45 51 
1bafc     46 52 45 51 
1bb00     46 52 45 51 
1bb04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb08     46 52 45 51 
1bb0c     46 52 45 51 
1bb10     46 52 45 51 
1bb14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb18     46 52 45 51 
1bb1c     46 52 45 51 
1bb20     46 52 45 51 
1bb24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb28     46 52 45 51 
1bb2c     46 52 45 51 
1bb30     46 52 45 51 
1bb34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb38     46 52 45 51 
1bb3c     46 52 45 51 
1bb40     46 52 45 51 
1bb44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb48     46 52 45 51 
1bb4c     46 52 45 51 
1bb50     46 52 45 51 
1bb54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb58     46 52 45 51 
1bb5c     46 52 45 51 
1bb60     46 52 45 51 
1bb64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb68     46 52 45 51 
1bb6c     46 52 45 51 
1bb70     46 52 45 51 
1bb74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb78     46 52 45 51 
1bb7c     46 52 45 51 
1bb80     46 52 45 51 
1bb84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb88     46 52 45 51 
1bb8c     46 52 45 51 
1bb90     46 52 45 51 
1bb94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb98     46 52 45 51 
1bb9c     46 52 45 51 
1bba0     46 52 45 51 
1bba4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bba8     46 52 45 51 
1bbac     46 52 45 51 
1bbb0     46 52 45 51 
1bbb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbb8     46 52 45 51 
1bbbc     46 52 45 51 
1bbc0     46 52 45 51 
1bbc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbc8     46 52 45 51 
1bbcc     46 52 45 51 
1bbd0     46 52 45 51 
1bbd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbd8     46 52 45 51 
1bbdc     46 52 45 51 
1bbe0     46 52 45 51 
1bbe4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbe8     46 52 45 51 
1bbec     46 52 45 51 
1bbf0     46 52 45 51 
1bbf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbf8     46 52 45 51 
1bbfc     46 52 45 51 
1bc00     46 52 45 51 
1bc04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc08     46 52 45 51 
1bc0c     46 52 45 51 
1bc10     46 52 45 51 
1bc14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc18     46 52 45 51 
1bc1c     46 52 45 51 
1bc20     46 52 45 51 
1bc24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc28     46 52 45 51 
1bc2c     46 52 45 51 
1bc30     46 52 45 51 
1bc34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc38     46 52 45 51 
1bc3c     46 52 45 51 
1bc40     46 52 45 51 
1bc44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc48     46 52 45 51 
1bc4c     46 52 45 51 
1bc50     46 52 45 51 
1bc54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc58     46 52 45 51 
1bc5c     46 52 45 51 
1bc60     46 52 45 51 
1bc64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc68     46 52 45 51 
1bc6c     46 52 45 51 
1bc70     46 52 45 51 
1bc74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc78     46 52 45 51 
1bc7c     46 52 45 51 
1bc80     46 52 45 51 
1bc84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc88     46 52 45 51 
1bc8c     46 52 45 51 
1bc90     46 52 45 51 
1bc94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc98     46 52 45 51 
1bc9c     46 52 45 51 
1bca0     46 52 45 51 
1bca4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bca8     46 52 45 51 
1bcac     46 52 45 51 
1bcb0     46 52 45 51 
1bcb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcb8     46 52 45 51 
1bcbc     46 52 45 51 
1bcc0     46 52 45 51 
1bcc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcc8     46 52 45 51 
1bccc     46 52 45 51 
1bcd0     46 52 45 51 
1bcd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcd8     46 52 45 51 
1bcdc     46 52 45 51 
1bce0     46 52 45 51 
1bce4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bce8     46 52 45 51 
1bcec     46 52 45 51 
1bcf0     46 52 45 51 
1bcf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcf8     46 52 45 51 
1bcfc     46 52 45 51 
1bd00     46 52 45 51 
1bd04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd08     46 52 45 51 
1bd0c     46 52 45 51 
1bd10     46 52 45 51 
1bd14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd18     46 52 45 51 
1bd1c     46 52 45 51 
1bd20     46 52 45 51 
1bd24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd28     46 52 45 51 
1bd2c     46 52 45 51 
1bd30     46 52 45 51 
1bd34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd38     46 52 45 51 
1bd3c     46 52 45 51 
1bd40     46 52 45 51 
1bd44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd48     46 52 45 51 
1bd4c     46 52 45 51 
1bd50     46 52 45 51 
1bd54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd58     46 52 45 51 
1bd5c     46 52 45 51 
1bd60     46 52 45 51 
1bd64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd68     46 52 45 51 
1bd6c     46 52 45 51 
1bd70     46 52 45 51 
1bd74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd78     46 52 45 51 
1bd7c     46 52 45 51 
1bd80     46 52 45 51 
1bd84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd88     46 52 45 51 
1bd8c     46 52 45 51 
1bd90     46 52 45 51 
1bd94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd98     46 52 45 51 
1bd9c     46 52 45 51 
1bda0     46 52 45 51 
1bda4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bda8     46 52 45 51 
1bdac     46 52 45 51 
1bdb0     46 52 45 51 
1bdb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdb8     46 52 45 51 
1bdbc     46 52 45 51 
1bdc0     46 52 45 51 
1bdc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdc8     46 52 45 51 
1bdcc     46 52 45 51 
1bdd0     46 52 45 51 
1bdd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdd8     46 52 45 51 
1bddc     46 52 45 51 
1bde0     46 52 45 51 
1bde4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bde8     46 52 45 51 
1bdec     46 52 45 51 
1bdf0     46 52 45 51 
1bdf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdf8     46 52 45 51 
1bdfc     46 52 45 51 
1be00     46 52 45 51 
1be04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be08     46 52 45 51 
1be0c     46 52 45 51 
1be10     46 52 45 51 
1be14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be18     46 52 45 51 
1be1c     46 52 45 51 
1be20     46 52 45 51 
1be24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be28     46 52 45 51 
1be2c     46 52 45 51 
1be30     46 52 45 51 
1be34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be38     46 52 45 51 
1be3c     46 52 45 51 
1be40     46 52 45 51 
1be44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be48     46 52 45 51 
1be4c     46 52 45 51 
1be50     46 52 45 51 
1be54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be58     46 52 45 51 
1be5c     46 52 45 51 
1be60     46 52 45 51 
1be64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be68     46 52 45 51 
1be6c     46 52 45 51 
1be70     46 52 45 51 
1be74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be78     46 52 45 51 
1be7c     46 52 45 51 
1be80     46 52 45 51 
1be84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be88     46 52 45 51 
1be8c     46 52 45 51 
1be90     46 52 45 51 
1be94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be98     46 52 45 51 
1be9c     46 52 45 51 
1bea0     46 52 45 51 
1bea4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bea8     46 52 45 51 
1beac     46 52 45 51 
1beb0     46 52 45 51 
1beb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1beb8     46 52 45 51 
1bebc     46 52 45 51 
1bec0     46 52 45 51 
1bec4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bec8                 | 
1bec8     00 00 00 00 
1becc     18 00 00 00 
1bed0     31 00 00 00 
1bed4     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1bed8     61 00 00 00 
1bedc     78 00 00 00 
1bee0     8D 00 00 00 
1bee4     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1bee8     B4 00 00 00 
1beec     C5 00 00 00 
1bef0     D4 00 00 00 
1bef4     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1bef8     EB 00 00 00 
1befc     F4 00 00 00 
1bf00     FA 00 00 00 
1bf04     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1bf08     FF 00 00 00 
1bf0c     FD 00 00 00 
1bf10     FA 00 00 00 
1bf14     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1bf18     EB 00 00 00 
1bf1c     E0 00 00 00 
1bf20     D4 00 00 00 
1bf24     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1bf28     B4 00 00 00 
1bf2c     A1 00 00 00 
1bf30     8D 00 00 00 
1bf34     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1bf38     61 00 00 00 
1bf3c     4A 00 00 00 
1bf40     31 00 00 00 
1bf44     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1bf48     00 00 00 00 
1bf4c     E8 FF FF FF 
1bf50     CF FF FF FF 
1bf54     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1bf58     9F FF FF FF 
1bf5c     88 FF FF FF 
1bf60     73 FF FF FF 
1bf64     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1bf68     4C FF FF FF 
1bf6c     3B FF FF FF 
1bf70     2C FF FF FF 
1bf74     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1bf78     15 FF FF FF 
1bf7c     0C FF FF FF 
1bf80     06 FF FF FF 
1bf84     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1bf88     01 FF FF FF 
1bf8c     03 FF FF FF 
1bf90     06 FF FF FF 
1bf94     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1bf98     15 FF FF FF 
1bf9c     20 FF FF FF 
1bfa0     2C FF FF FF 
1bfa4     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1bfa8     4C FF FF FF 
1bfac     5F FF FF FF 
1bfb0     73 FF FF FF 
1bfb4     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1bfb8     9F FF FF FF 
1bfbc     B6 FF FF FF 
1bfc0     CF FF FF FF 
1bfc4     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1bfc8                 | 
1bfc8     58 03 28 03 
1bfcc     FA 02 D0 02 
1bfd0     A6 02 80 02 
1bfd4     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1bfd8     1A 02 FC 01 
1bfdc     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1bfe0     AC 01 94 01 
1bfe4     7D 01 68 01 
1bfe8     53 01 40 01 
1bfec     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1bff0     0D 01 FE 00 
1bff4     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1bff8     D6 00 CA 00 
1bffc     BE 00 B4 00 
1c000     AA 00 A0 00 
1c004     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1c008     87 00 7F 00 
1c00c     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1c010     6B 00 22 03 
1c014     F5 02 CB 02 
1c018     A2 02 7D 02 
1c01c     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1c020     17 02 F9 01 
1c024     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1c028     A9 01 91 01 
1c02c     7B 01 65 01 
1c030     51 01 3E 01 
1c034     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1c038     0C 01 FD 00 
1c03c     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1c040     D5 00 C9 00 
1c044     BD 00 B3 00 
1c048     A9 00 9F 00 
1c04c     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1c050     86 00 7E 00 
1c054     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1c058     4C 03 1C 03 
1c05c     F0 02 C5 02 
1c060     9E 02 78 02 
1c064     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1c068     14 02 F6 01 
1c06c     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1c070     A6 01 8E 01 
1c074     78 01 63 01 
1c078     4F 01 3C 01 
1c07c     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1c080     0A 01 FB 00 
1c084     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1c088     D3 00 C7 00 
1c08c     BC 00 B1 00 
1c090     A7 00 9E 00 
1c094     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1c098     85 00 7D 00 
1c09c     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1c0a0     46 03 17 03 
1c0a4     EA 02 C0 02 
1c0a8     99 02 74 02 
1c0ac     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1c0b0     10 02 F2 01 
1c0b4     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1c0b8     A3 01 8B 01 
1c0bc     75 01 60 01 
1c0c0     4C 01 3A 01 
1c0c4     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1c0c8     08 01 F9 00 
1c0cc     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1c0d0     D1 00 C6 00 
1c0d4     BB 00 B0 00 
1c0d8     A6 00 9D 00 
1c0dc     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1c0e0     84 00 7D 00 
1c0e4     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1c0e8     40 03 11 03 
1c0ec     E5 02 BB 02 
1c0f0     94 02 6F 02 
1c0f4     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1c0f8     0C 02 EF 01 
1c0fc     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1c100     A0 01 88 01 
1c104     72 01 5E 01 
1c108     4A 01 38 01 
1c10c     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1c110     06 01 F7 00 
1c114     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1c118     D0 00 C4 00 
1c11c     B9 00 AF 00 
1c120     A5 00 9C 00 
1c124     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1c128     83 00 7C 00 
1c12c     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1c130     3A 03 0B 03 
1c134     E0 02 B6 02 
1c138     8F 02 6B 02 
1c13c     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1c140     08 02 EB 01 
1c144     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1c148     9D 01 86 01 
1c14c     70 01 5B 01 
1c150     48 01 35 01 
1c154     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1c158     04 01 F5 00 
1c15c     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1c160     CE 00 C3 00 
1c164     B8 00 AE 00 
1c168     A4 00 9B 00 
1c16c     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1c170     82 00 7B 00 
1c174     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1c178     34 03 06 03 
1c17c     DA 02 B1 02 
1c180     8B 02 66 02 
1c184     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1c188     04 02 E7 01 
1c18c     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1c190     9A 01 83 01 
1c194     6D 01 59 01 
1c198     45 01 33 01 
1c19c     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1c1a0     02 01 F4 00 
1c1a4     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1c1a8     CD 00 C1 00 
1c1ac     B7 00 AC 00 
1c1b0     A3 00 9A 00 
1c1b4     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1c1b8     81 00 7A 00 
1c1bc     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1c1c0     2E 03 00 03 
1c1c4     D5 02 AC 02 
1c1c8     86 02 62 02 
1c1cc     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1c1d0     01 02 E4 01 
1c1d4     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1c1d8     97 01 80 01 
1c1dc     6B 01 56 01 
1c1e0     43 01 31 01 
1c1e4     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1c1e8     00 01 F2 00 
1c1ec     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1c1f0     CC 00 C0 00 
1c1f4     B5 00 AB 00 
1c1f8     A1 00 98 00 
1c1fc     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1c200     80 00 79 00 
1c204     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1c208     8B 03 58 03 
1c20c     28 03 FA 02 
1c210     D0 02 A6 02 
1c214     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1c218     3A 02 1A 02 
1c21c     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1c220     C5 01 AC 01 
1c224     94 01 7D 01 
1c228     68 01 53 01 
1c22c     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1c230     1D 01 0D 01 
1c234     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1c238     E2 00 D6 00 
1c23c     CA 00 BE 00 
1c240     B4 00 AA 00 
1c244     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1c248     8F 00 87 00 
1c24c     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1c250     84 03 52 03 
1c254     22 03 F5 02 
1c258     CB 02 A3 02 
1c25c     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1c260     37 02 17 02 
1c264     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1c268     C2 01 A9 01 
1c26c     91 01 7B 01 
1c270     65 01 51 01 
1c274     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1c278     1C 01 0C 01 
1c27c     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1c280     E1 00 D4 00 
1c284     C8 00 BD 00 
1c288     B3 00 A9 00 
1c28c     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1c290     8E 00 86 00 
1c294     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1c298     7E 03 4C 03 
1c29c     1C 03 F0 02 
1c2a0     C5 02 9E 02 
1c2a4     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1c2a8     33 02 14 02 
1c2ac     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1c2b0     BF 01 A6 01 
1c2b4     8E 01 78 01 
1c2b8     63 01 4F 01 
1c2bc     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1c2c0     1A 01 0A 01 
1c2c4     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1c2c8     DF 00 D3 00 
1c2cc     C7 00 BC 00 
1c2d0     B1 00 A7 00 
1c2d4     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1c2d8     8D 00 85 00 
1c2dc     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1c2e0     77 03 46 03 
1c2e4     17 03 EA 02 
1c2e8     C0 02 99 02 
1c2ec     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1c2f0     2F 02 10 02 
1c2f4     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1c2f8     BC 01 A3 01 
1c2fc     8B 01 75 01 
1c300     60 01 4C 01 
1c304     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1c308     18 01 08 01 
1c30c     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1c310     DE 00 D1 00 
1c314     C6 00 BB 00 
1c318     B0 00 A6 00 
1c31c     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1c320     8C 00 84 00 
1c324     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1c328     71 03 40 03 
1c32c     11 03 E5 02 
1c330     BB 02 94 02 
1c334     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1c338     2B 02 0C 02 
1c33c     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1c340     B9 01 A0 01 
1c344     88 01 72 01 
1c348     5E 01 4A 01 
1c34c     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1c350     16 01 06 01 
1c354     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1c358     DC 00 D0 00 
1c35c     C4 00 B9 00 
1c360     AF 00 A5 00 
1c364     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1c368     8B 00 83 00 
1c36c     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1c370     6B 03 3A 03 
1c374     0B 03 E0 02 
1c378     B6 02 8F 02 
1c37c     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1c380     27 02 08 02 
1c384     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1c388     B5 01 9D 01 
1c38c     86 01 70 01 
1c390     5B 01 48 01 
1c394     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1c398     14 01 04 01 
1c39c     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1c3a0     DB 00 CE 00 
1c3a4     C3 00 B8 00 
1c3a8     AE 00 A4 00 
1c3ac     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1c3b0     8A 00 82 00 
1c3b4     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1c3b8     64 03 34 03 
1c3bc     06 03 DA 02 
1c3c0     B1 02 8B 02 
1c3c4     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1c3c8     23 02 04 02 
1c3cc     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1c3d0     B2 01 9A 01 
1c3d4     83 01 6D 01 
1c3d8     59 01 45 01 
1c3dc     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1c3e0     12 01 02 01 
1c3e4     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1c3e8     D9 00 CD 00 
1c3ec     C1 00 B7 00 
1c3f0     AC 00 A3 00 
1c3f4     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1c3f8     89 00 81 00 
1c3fc     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1c400     5E 03 2E 03 
1c404     00 03 D5 02 
1c408     AC 02 86 02 
1c40c     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1c410     1F 02 01 02 
1c414     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1c418     AF 01 97 01 
1c41c     80 01 6B 01 
1c420     56 01 43 01 
1c424     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1c428     10 01 00 01 
1c42c     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1c430     D8 00 CB 00 
1c434     C0 00 B5 00 
1c438     AB 00 A1 00 
1c43c     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1c440     88 00 80 00 
1c444     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1c448                 | 	alignl
1c448                 | _audio018_spin2_dat_
1c448                 | 
1c448                 | audio       org     0
1c448     00 F2 07 F6 | 			mov ptrb,#0
1c44c     0E 8C 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1c450     0E C8 1C FC |             wxpin   #100,#left
1c454     0F 8C 05 FC |             wrpin   dac,#right
1c458     0F C8 1C FC |             wxpin   #100,#right
1c45c     41 9C 64 FD |             dirh    #left addpins 1
1c460     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1c464     77 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1c468     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1c46c                 |             
1c46c                 | '---------------------------------------------------------------------------------        
1c46c                 | '----------------- The main loop -------------------------------------------------
1c46c                 | '---------------------------------------------------------------------------------
1c46c                 | 
1c46c     81 48 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
1c470     14 00 90 CD |       if_c  jmp     #loop1
1c474                 |       
1c474     08 1E 05 F6 | p402        mov     ii,#8
1c478     8F 48 89 F9 |             altd    time0,ii          
1c47c     80 00 80 F1 |             sub     0-0,a20000000
1c480     FC 1F 6D FB |             djnz    ii,#p402
1c484     80 48 81 F1 |             sub     time0,a20000000
1c488                 |     
1c488                 | loop1       
1c488                 |   
1c488     00 5C 05 F6 |              mov     cn,#0             ' Find the channel to compute
1c48c     A5 5E 01 F6 |              mov     ct,time1           ' with the lowest next sample time
1c490     A6 5E 39 F3 |              fle     ct,time2 wcz       ' How to size-optimize this???
1c494     01 5C 05 C6 |      if_c    mov     cn,#1
1c498     A7 5E 39 F3 |             fle     ct,time3 wcz
1c49c     02 5C 05 C6 |     if_c    mov     cn,#2     
1c4a0     A8 5E 39 F3 |             fle     ct,time4 wcz
1c4a4     03 5C 05 C6 |     if_c    mov     cn,#3
1c4a8     A9 5E 39 F3 |              fle     ct,time5 wcz
1c4ac     04 5C 05 C6 |      if_c    mov     cn,#4
1c4b0     AA 5E 39 F3 |             fle     ct,time6 wcz
1c4b4     05 5C 05 C6 |     if_c    mov     cn,#5
1c4b8     AB 5E 39 F3 |             fle     ct,time7 wcz
1c4bc     06 5C 05 C6 |     if_c    mov     cn,#6
1c4c0     AC 5E 39 F3 |             fle     ct,time8 wcz
1c4c4     07 5C 05 C6 |     if_c    mov     cn,#7
1c4c8                 | 
1c4c8                 | 
1c4c8                 | '----------------------------------------------------------------------------------
1c4c8                 | '------------- Compute channel samples --------------------------------------------
1c4c8                 | '----------------------------------------------------------------------------------
1c4c8                 | 
1c4c8                 | 
1c4c8     AE 1A 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
1c4cc     05 1A 65 F0 |             shl     channeladd,#5
1c4d0     8D F0 03 F1 |             add     ptra,channeladd
1c4d4                 |        '     debug(udec(ptra))
1c4d4     28 0E 64 FD |             setq    #7               
1c4d8     00 31 05 FB |             rdlong  pointer0,ptra
1c4dc     1E 30 0D F4 |             testb   pointer0,#30 wz
1c4e0     00 30 05 A6 |     if_z    mov pointer0,#0        
1c4e4                 |             
1c4e4     9D 46 39 F9 |     	    getword apan0,volpan0,#1
1c4e8     9D 44 31 F9 |     	    getword avol0,volpan0,#0
1c4ec     9E 42 39 F9 | 	        getword askip0,freqskip0,#1    	    
1c4f0     9E 40 31 F9 | 	        getword afreq0,freqskip0,#0
1c4f4                 | 
1c4f4     A5 1E 05 F6 |             mov     ii,#time1
1c4f8     AE 1E 01 F1 |             add     ii,cn
1c4fc     00 1E 95 F9 |             alts    ii
1c500                 |             
1c500     00 60 01 F6 |             mov     dt0,0-0   '' this has to be executed before going to p401
1c504                 |     
1c504                 |             
1c504     A4 60 81 F1 |             sub     dt0,time0
1c508     00 1E 8D F9 |             altd    ii
1c50c     A0 00 00 F1 |             add     0-0,afreq0  	
1c510                 |    
1c510                 | 
1c510     A1 30 01 F1 |             add     pointer0,askip0
1c514     9C 30 19 F2 |             cmp     pointer0,lend0 wcz
1c518     9C 30 81 31 |     if_ge   sub     pointer0,lend0	        
1c51c     9B 30 01 31 |     if_ge   add     pointer0,lstart0       
1c520     98 20 01 F6 |             mov     qq,pointer0
1c524     9A 20 01 F1 |             add     qq,sstart0
1c528                 | 
1c528     1F 34 0D F4 |             testb   sstart0,#31 wz
1c52c                 | 
1c52c     90 22 C1 5A |     if_nz   rdbyte  spl,qq
1c530     08 22 65 50 |     if_nz   shl     spl,#8
1c534     90 22 E1 AA |     if_z    rdword  spl,qq
1c538                 | 
1c538     A2 22 31 FA |             scas    spl,avol0
1c53c     00 22 01 F6 |             mov     spl,0-0
1c540                 |  
1c540     A3 22 31 FA |             scas    spl,apan0
1c544     00 62 01 F6 |             mov     ls0,0-0
1c548                 |  
1c548     B6 5C 8D F9 |             altd    cn,#ls1
1c54c     B1 00 00 F6 |             mov     0-0,ls0
1c550                 |                        
1c550                 | 
1c550                 |             
1c550     20 00 00 FF 
1c554     00 20 05 F6 |             mov     qq,##16384
1c558     A3 20 81 F1 |             sub     qq,apan0
1c55c     90 22 31 FA |             scas    spl,qq
1c560     00 64 01 F6 |             mov     rs0, 0-0
1c564                 |             
1c564                 |             
1c564                 | 
1c564     BE 5C 8D F9 |             altd    cn,#rs1
1c568     B2 00 00 F6 |             mov     0-0,rs0
1c56c                 |             
1c56c                 |             
1c56c                 |                       
1c56c     B2 32 29 F9 |             setword sample0,rs0,#1
1c570     B1 32 21 F9 |             setword sample0,ls0,#0
1c574                 |  
1c574     28 04 64 FD |             setq #2
1c578                 |             
1c578     00 31 65 FC |             wrlong  pointer0,ptra
1c57c     8D F0 83 F1 |             sub     ptra, channeladd
1c580                 |        
1c580     00 00 90 FD |             jmp     #p101
1c584                 |                        
1c584                 |             
1c584                 |           
1c584                 |             
1c584                 | '------------------------ Channels end here --------------------       
1c584                 | 
1c584                 | ' Now add all channels and put the sample to the buffer    
1c584                 | 
1c584                 | 
1c584     A4 5A 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
1c588     01 1C 85 A1 |     if_z    sub     front,#1         ' 
1c58c     FF 1D 05 A5 |     if_z    and     front,#511     
1c590                 |            
1c590                 |     
1c590     00 6A 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
1c594     00 68 05 F6 |             mov     ls,#0
1c598     BE 6A 01 F1 |             add     rs,rs1
1c59c     BF 6A 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
1c5a0     C0 6A 01 F1 |             add     rs,rs3
1c5a4     C1 6A 01 F1 |             add     rs,rs4
1c5a8     C2 6A 01 F1 |             add     rs,rs5
1c5ac     C3 6A 01 F1 |             add     rs,rs6
1c5b0     C4 6A 01 F1 |             add     rs,rs7
1c5b4     C5 6A 01 F1 |             add     rs,rs8
1c5b8                 | 
1c5b8                 |            
1c5b8     B6 68 01 F1 |             add     ls,ls1
1c5bc     B7 68 01 F1 |             add     ls,ls2
1c5c0     B8 68 01 F1 |             add     ls,ls3
1c5c4     B9 68 01 F1 |             add     ls,ls4
1c5c8     BA 68 01 F1 |             add     ls,ls5
1c5cc     BB 68 01 F1 |             add     ls,ls6
1c5d0     BC 68 01 F1 |             add     ls,ls7
1c5d4     BD 68 01 F1 |             add     ls,ls8
1c5d8                 | 
1c5d8                 |  		
1c5d8     0F 68 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1c5dc     0F 6A E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
1c5e0                 | 		    
1c5e0     B4 6A 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
1c5e4     B5 04 01 F6 |             mov newsample, rs
1c5e8                 | 
1c5e8     A4 5A 01 F6 |             mov     oldt0,time0      ' update global time
1c5ec     B0 48 01 F1 |             add     time0,dt0    
1c5f0                 | 
1c5f0                 |             
1c5f0                 |  
1c5f0                 |                                      ' now push dt0 samples to the buffer
1c5f0     00 60 0D F2 |             cmp      dt0,#0 wz
1c5f4     90 FE 9F AD |     if_z    jmp      #loop1
1c5f8     B0 08 01 F6 |             mov      t1,dt0
1c5fc                 |   
1c5fc     F9 0B 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
1c600     01 0A 85 F1 |             sub     t2,#1
1c604     FF 0B 05 F5 |             and     t2,#511
1c608     8E 0A 19 F2 |             cmp     t2,front wcz
1c60c     EC FF 9F AD |     if_e    jmp     #p301    
1c610                 |     
1c610     8E 04 31 FC |             wrlut   newsample, front
1c614     01 1C 05 F1 |             add     front,#1
1c618     FF 1D 05 F5 |             and     front,#511
1c61c     F7 09 6D FB |             djnz    t1,#p301
1c620                 |             
1c620     48 FE 9F FD |             jmp     #loop            'loop
1c624                 | 
1c624                 | '-------------------------------------------------------------------------
1c624                 | '------------------ This is the end of the main loop ---------------------
1c624                 | '-------------------------------------------------------------------------
1c624                 | 
1c624                 | '--------------------------------------------------------------------------
1c624                 | '------ Interrupt service -------------------------------------------------
1c624                 | '------ Output the sample, get the next one if exists ---------------------
1c624                 | '--------------------------------------------------------------------------
1c624                 | 
1c624     0E 26 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
1c628     0F 28 25 FC |             wypin   rsample,#right       '4
1c62c                 |            
1c62c     8E F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
1c630     F5 FF 3B AB |     if_e    reti1                        '8/10
1c634                 | 
1c634     E1 2B A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
1c638     95 28 39 F9 |           	getword rsample,lsnext,#1    '13
1c63c     95 26 31 F9 |           	getword lsample,lsnext,#0    '15
1c640     F5 FF 3B FB |             reti1                        '17/19 
1c644                 |           
1c644                 | '---------------------------------------------------------------------------
1c644                 | '-------- End of interrupt -------------------------------------------------
1c644                 | '---------------------------------------------------------------------------    
1c644                 | 
1c644                 | 
1c644                 | '---------------------------------------------------------------------------
1c644                 | '------- Variables ---------------------------------------------------------
1c644                 | '---------------------------------------------------------------------------
1c644                 | 
1c644                 | ' constants
1c644                 | 
1c644     FF FF FF 1F | a1fffffff long $1fffffff
1c648     00 00 00 20 | a20000000 long $20000000
1c64c     00 00 00 21 | a21000000 long $21000000
1c650     00 00 00 00 | newsample long 0
1c654     FF FF 00 00 | affff long $ffff
1c658     00 00 00 00 | t1 long 0
1c65c     00 00 00 00 | t2 long 0
1c660     00 00 00 00 | nl long 0
1c664     00 00 00 00 | nr long 0
1c668     00 00 00 00 | nrsample long 0
1c66c     00 00 00 00 | nlsample long 0
1c670     1F 00 00 00 | fl long 31
1c674     1F 00 00 00 | fr long 31
1c678     00 00 00 00 | d long 0
1c67c     00 00 00 00 | channeladd long 0
1c680                 | ' phase accumulators
1c680                 | 
1c680     00 00 00 00 | front       long 0
1c684                 | 
1c684                 | ' temporary variables 
1c684     00 00 00 00 | ii long 0
1c688     00 00 00 00 | qq          long 0
1c68c     00 00 00 00 | spl         long 0
1c690                 | 
1c690                 | ' circular buffer in LUT
1c690                 | 
1c690                 | 
1c690                 | 'tail        long 0
1c690                 | 
1c690                 | ' Interrupt ISR variables
1c690                 | 
1c690     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
1c694     00 00 00 00 | lsample     long 0
1c698     00 00 00 00 | rsample     long 0
1c69c     00 00 00 00 | lsnext      long 0
1c6a0     00 00 00 00 | rsnext      long 0 
1c6a4     00 00 00 00 | irqtime     long 0
1c6a8                 | 
1c6a8                 | 
1c6a8     00 00 00 00 | pointer0    long 0
1c6ac     00 00 00 00 | sample0     long 0
1c6b0     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
1c6b4     00 00 00 00 | lstart0     long 0
1c6b8     00 00 00 00 | lend0       long 0
1c6bc     00 00 00 00 | volpan0     long 0
1c6c0     00 00 00 00 | freqskip0   long 0
1c6c4     00 00 00 00 | dummy long 0
1c6c8                 | 
1c6c8                 | 
1c6c8     00 00 00 00 | afreq0 long 0
1c6cc                 | 
1c6cc                 | 
1c6cc     00 00 00 00 | askip0 long 0
1c6d0     00 00 00 00 | avol0 long 0
1c6d4     00 00 00 00 | apan0 long 0
1c6d8                 | 
1c6d8                 | 
1c6d8                 | ' Time variables
1c6d8                 | 
1c6d8     00 00 00 00 | time0  long 0    ' Global sample computing time
1c6dc                 | 
1c6dc     01 00 00 00 | time1       long 1    ' Local channels time
1c6e0     02 00 00 00 | time2       long 2
1c6e4     03 00 00 00 | time3       long 3
1c6e8     04 00 00 00 | time4       long 4
1c6ec     05 00 00 00 | time5       long 5
1c6f0     06 00 00 00 | time6       long 6
1c6f4     07 00 00 00 | time7       long 7
1c6f8     08 00 00 00 | time8       long 8
1c6fc                 | 
1c6fc     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
1c700     00 00 00 00 | cn          long 0
1c704     00 00 00 00 | ct          long 0
1c708     00 00 00 00 | dt0         long 0
1c70c                 | 
1c70c                 | ' Samples
1c70c     00 00 00 00 | ls0 long 0
1c710     00 00 00 00 | rs0 long 0
1c714     00 00 00 00 | channel long 0
1c718     00 00 00 00 | ls          long 0    ' Global sample variable
1c71c     00 00 00 00 | rs          long 0
1c720                 | 
1c720     00 00 00 00 | ls1         long 0    ' Channel samples
1c724     00 00 00 00 | ls2         long 0
1c728     00 00 00 00 | ls3         long 0
1c72c     00 00 00 00 | ls4         long 0
1c730     00 00 00 00 | ls5         long 0
1c734     00 00 00 00 | ls6         long 0
1c738     00 00 00 00 | ls7         long 0
1c73c     00 00 00 00 | ls8         long 0
1c740     00 00 00 00 | rs1         long 0
1c744     00 00 00 00 | rs2         long 0
1c748     00 00 00 00 | rs3         long 0
1c74c     00 00 00 00 | rs4         long 0
1c750     00 00 00 00 | rs5         long 0
1c754     00 00 00 00 | rs6         long 0
1c758     00 00 00 00 | rs7         long 0
1c75c     00 00 00 00 | rs8         long 0
1c760                 | 
1c760     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
1c764                 | 
1c764     00 00 00 00 
1c768     00 00 00 00 | null  			long 	0,0           ' for channel reset
1c76c     73 32 00 04 
1c770     00 00 10 00 
1c774     00 00 00 00 
1c778     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
1c77c     00 00 C9 00 
1c780     92 01 5B 02 
1c784     24 03 ED 03 
1c788     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
1c78c     48 06 11 07 
1c790     D9 07 A2 08 
1c794     6A 09 33 0A 
1c798     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
1c79c     8C 0C 54 0D 
1c7a0     1C 0E E3 0E 
1c7a4     AB 0F 72 10 
1c7a8     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
1c7ac     C8 12 8F 13 
1c7b0     55 14 1C 15 
1c7b4     E2 15 A8 16 
1c7b8     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
1c7bc     F9 18 BE 19 
1c7c0     82 1A 47 1B 
1c7c4     0B 1C CF 1C 
1c7c8     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
1c7cc     1A 1F DD 1F 
1c7d0     9F 20 61 21 
1c7d4     23 22 E5 22 
1c7d8     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
1c7dc     28 25 E8 25 
1c7e0     A8 26 67 27 
1c7e4     26 28 E5 28 
1c7e8     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
1c7ec     1F 2B DC 2B 
1c7f0     99 2C 55 2D 
1c7f4     11 2E CC 2E 
1c7f8     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
1c7fc     FB 30 B5 31 
1c800     6E 32 26 33 
1c804     DF 33 96 34 
1c808     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
1c80c     BA 36 6F 37 
1c810     24 38 D9 38 
1c814     8C 39 40 3A 
1c818     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
1c81c     56 3C 07 3D 
1c820     B8 3D 68 3E 
1c824     17 3F C5 3F 
1c828     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
1c82c     CE 41 7A 42 
1c830     25 43 D0 43 
1c834     7A 44 24 45 
1c838     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
1c83c     1C 47 C3 47 
1c840     69 48 0F 49 
1c844     B4 49 58 4A 
1c848     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
1c84c     3F 4C E0 4C 
1c850     81 4D 20 4E 
1c854     BF 4E 5D 4F 
1c858     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
1c85c     33 51 CE 51 
1c860     68 52 02 53 
1c864     9B 53 32 54 
1c868     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
1c86c     F5 55 8A 56 
1c870     1D 57 B0 57 
1c874     42 58 D3 58 
1c878     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
1c87c     82 5A 0F 5B 
1c880     9C 5B 28 5C 
1c884     B3 5C 3E 5D 
1c888     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
1c88c     D7 5E 5D 5F 
1c890     E3 5F 68 60 
1c894     EB 60 6E 61 
1c898     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
1c89c     F1 62 70 63 
1c8a0     EE 63 6C 64 
1c8a4     E8 64 63 65 
1c8a8     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
1c8ac     CF 66 46 67 
1c8b0     BC 67 32 68 
1c8b4     A6 68 19 69 
1c8b8     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
1c8bc     6D 6A DC 6A 
1c8c0     4A 6B B7 6B 
1c8c4     23 6C 8E 6C 
1c8c8     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
1c8cc     C9 6D 30 6E 
1c8d0     96 6E FB 6E 
1c8d4     5E 6F C1 6F 
1c8d8     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
1c8dc     E2 70 40 71 
1c8e0     9D 71 F9 71 
1c8e4     54 72 AE 72 
1c8e8     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
1c8ec     B5 73 0A 74 
1c8f0     5F 74 B2 74 
1c8f4     04 75 55 75 
1c8f8     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
1c8fc     41 76 8D 76 
1c900     D8 76 22 77 
1c904     6B 77 B3 77 
1c908     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
1c90c     84 78 C7 78 
1c910     09 79 4A 79 
1c914     89 79 C8 79 
1c918     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
1c91c     7C 7A B6 7A 
1c920     EE 7A 26 7B 
1c924     5C 7B 91 7B 
1c928     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
1c92c     29 7C 59 7C 
1c930     88 7C B6 7C 
1c934     E3 7C 0E 7D 
1c938     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
1c93c     89 7D B0 7D 
1c940     D5 7D FA 7D 
1c944     1D 7E 3E 7E 
1c948     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
1c94c     9C 7E B9 7E 
1c950     D5 7E EF 7E 
1c954     09 7F 21 7F 
1c958     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
1c95c     61 7F 74 7F 
1c960     86 7F 97 7F 
1c964     A6 7F B4 7F 
1c968     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
1c96c     D8 7F E1 7F 
1c970     E9 7F F0 7F 
1c974     F5 7F F9 7F 
1c978     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
1c97c     FF 7F FE 7F 
1c980     FD 7F F9 7F 
1c984     F5 7F F0 7F 
1c988     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
1c98c     D8 7F CD 7F 
1c990     C1 7F B4 7F 
1c994     A6 7F 97 7F 
1c998     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
1c99c     61 7F 4D 7F 
1c9a0     37 7F 21 7F 
1c9a4     09 7F EF 7E 
1c9a8     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
1c9ac     9C 7E 7E 7E 
1c9b0     5F 7E 3E 7E 
1c9b4     1D 7E FA 7D 
1c9b8     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
1c9bc     89 7D 62 7D 
1c9c0     39 7D 0E 7D 
1c9c4     E3 7C B6 7C 
1c9c8     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
1c9cc     29 7C F8 7B 
1c9d0     C5 7B 91 7B 
1c9d4     5C 7B 26 7B 
1c9d8     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
1c9dc     7C 7A 41 7A 
1c9e0     05 7A C8 79 
1c9e4     89 79 4A 79 
1c9e8     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
1c9ec     84 78 3F 78 
1c9f0     FA 77 B3 77 
1c9f4     6B 77 22 77 
1c9f8     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
1c9fc     41 76 F3 75 
1ca00     A5 75 55 75 
1ca04     04 75 B2 74 
1ca08     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
1ca0c     B5 73 5E 73 
1ca10     07 73 AE 72 
1ca14     54 72 F9 71 
1ca18     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
1ca1c     E2 70 83 70 
1ca20     22 70 C1 6F 
1ca24     5E 6F FB 6E 
1ca28     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
1ca2c     C9 6D 61 6D 
1ca30     F8 6C 8E 6C 
1ca34     23 6C B7 6B 
1ca38     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
1ca3c     6D 6A FD 69 
1ca40     8B 69 19 69 
1ca44     A6 68 32 68 
1ca48     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
1ca4c     CF 66 56 66 
1ca50     DD 65 63 65 
1ca54     E8 64 6C 64 
1ca58     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
1ca5c     F1 62 71 62 
1ca60     F0 61 6E 61 
1ca64     EB 60 68 60 
1ca68     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
1ca6c     D7 5E 4F 5E 
1ca70     C7 5D 3E 5D 
1ca74     B3 5C 28 5C 
1ca78     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
1ca7c     82 5A F3 59 
1ca80     64 59 D3 58 
1ca84     42 58 B0 57 
1ca88     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
1ca8c     F5 55 60 55 
1ca90     C9 54 32 54 
1ca94     9B 53 02 53 
1ca98     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
1ca9c     33 51 97 50 
1caa0     FB 4F 5D 4F 
1caa4     BF 4E 20 4E 
1caa8     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
1caac     3F 4C 9D 4B 
1cab0     FB 4A 58 4A 
1cab4     B4 49 0F 49 
1cab8     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
1cabc     1C 47 75 46 
1cac0     CD 45 24 45 
1cac4     7A 44 D0 43 
1cac8     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
1cacc     CE 41 21 41 
1cad0     73 40 C5 3F 
1cad4     17 3F 68 3E 
1cad8     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
1cadc     56 3C A5 3B 
1cae0     F2 3A 40 3A 
1cae4     8C 39 D9 38 
1cae8     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
1caec     BA 36 04 36 
1caf0     4D 35 96 34 
1caf4     DF 33 26 33 
1caf8     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
1cafc     FB 30 41 30 
1cb00     87 2F CC 2E 
1cb04     11 2E 55 2D 
1cb08     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
1cb0c     1F 2B 61 2A 
1cb10     A3 29 E5 28 
1cb14     26 28 67 27 
1cb18     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
1cb1c     28 25 67 24 
1cb20     A6 23 E5 22 
1cb24     23 22 61 21 
1cb28     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
1cb2c     1A 1F 57 1E 
1cb30     93 1D CF 1C 
1cb34     0B 1C 47 1B 
1cb38     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
1cb3c     F9 18 33 18 
1cb40     6E 17 A8 16 
1cb44     E2 15 1C 15 
1cb48     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
1cb4c     C8 12 01 12 
1cb50     3A 11 72 10 
1cb54     AB 0F E3 0E 
1cb58     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
1cb5c     8C 0C C4 0B 
1cb60     FB 0A 33 0A 
1cb64     6A 09 A2 08 
1cb68     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
1cb6c     48 06 7F 05 
1cb70     B6 04 ED 03 
1cb74     24 03 5B 02 
1cb78     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
1cb7c     00 00 37 FF 
1cb80     6E FE A5 FD 
1cb84     DC FC 13 FC 
1cb88     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
1cb8c     B8 F9 EF F8 
1cb90     27 F8 5E F7 
1cb94     96 F6 CD F5 
1cb98     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
1cb9c     74 F3 AC F2 
1cba0     E4 F1 1D F1 
1cba4     55 F0 8E EF 
1cba8     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
1cbac     38 ED 71 EC 
1cbb0     AB EB E4 EA 
1cbb4     1E EA 58 E9 
1cbb8     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
1cbbc     07 E7 42 E6 
1cbc0     7E E5 B9 E4 
1cbc4     F5 E3 31 E3 
1cbc8     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
1cbcc     E6 E0 23 E0 
1cbd0     61 DF 9F DE 
1cbd4     DD DD 1B DD 
1cbd8     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
1cbdc     D8 DA 18 DA 
1cbe0     58 D9 99 D8 
1cbe4     DA D7 1B D7 
1cbe8     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
1cbec     E1 D4 24 D4 
1cbf0     67 D3 AB D2 
1cbf4     EF D1 34 D1 
1cbf8     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
1cbfc     05 CF 4B CE 
1cc00     92 CD DA CC 
1cc04     21 CC 6A CB 
1cc08     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
1cc0c     46 C9 91 C8 
1cc10     DC C7 27 C7 
1cc14     74 C6 C0 C5 
1cc18     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
1cc1c     AA C3 F9 C2 
1cc20     48 C2 98 C1 
1cc24     E9 C0 3B C0 
1cc28     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
1cc2c     32 BE 86 BD 
1cc30     DB BC 30 BC 
1cc34     86 BB DC BA 
1cc38     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
1cc3c     E4 B8 3D B8 
1cc40     97 B7 F1 B6 
1cc44     4C B6 A8 B5 
1cc48     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
1cc4c     C1 B3 20 B3 
1cc50     7F B2 E0 B1 
1cc54     41 B1 A3 B0 
1cc58     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
1cc5c     CD AE 32 AE 
1cc60     98 AD FE AC 
1cc64     65 AC CE AB 
1cc68     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
1cc6c     0B AA 76 A9 
1cc70     E3 A8 50 A8 
1cc74     BE A7 2D A7 
1cc78     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
1cc7c     7E A5 F1 A4 
1cc80     64 A4 D8 A3 
1cc84     4D A3 C2 A2 
1cc88     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
1cc8c     29 A1 A3 A0 
1cc90     1D A0 98 9F 
1cc94     15 9F 92 9E 
1cc98     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
1cc9c     0F 9D 90 9C 
1cca0     12 9C 94 9B 
1cca4     18 9B 9D 9A 
1cca8     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
1ccac     31 99 BA 98 
1ccb0     44 98 CE 97 
1ccb4     5A 97 E7 96 
1ccb8     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
1ccbc     93 95 24 95 
1ccc0     B6 94 49 94 
1ccc4     DD 93 72 93 
1ccc8     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
1cccc     37 92 D0 91 
1ccd0     6A 91 05 91 
1ccd4     A2 90 3F 90 
1ccd8     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
1ccdc     1E 8F C0 8E 
1cce0     63 8E 07 8E 
1cce4     AC 8D 52 8D 
1cce8     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
1ccec     4B 8C F6 8B 
1ccf0     A1 8B 4E 8B 
1ccf4     FC 8A AB 8A 
1ccf8     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
1ccfc     BF 89 73 89 
1cd00     28 89 DE 88 
1cd04     95 88 4D 88 
1cd08     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
1cd0c     7C 87 39 87 
1cd10     F7 86 B6 86 
1cd14     77 86 38 86 
1cd18     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
1cd1c     84 85 4A 85 
1cd20     12 85 DA 84 
1cd24     A4 84 6F 84 
1cd28     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
1cd2c     D7 83 A7 83 
1cd30     78 83 4A 83 
1cd34     1D 83 F2 82 
1cd38     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
1cd3c     77 82 50 82 
1cd40     2B 82 06 82 
1cd44     E3 81 C2 81 
1cd48     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
1cd4c     64 81 47 81 
1cd50     2B 81 11 81 
1cd54     F7 80 DF 80 
1cd58     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
1cd5c     9F 80 8C 80 
1cd60     7A 80 69 80 
1cd64     5A 80 4C 80 
1cd68     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
1cd6c     28 80 1F 80 
1cd70     17 80 10 80 
1cd74     0B 80 07 80 
1cd78     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
1cd7c     01 80 02 80 
1cd80     03 80 07 80 
1cd84     0B 80 10 80 
1cd88     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
1cd8c     28 80 33 80 
1cd90     3F 80 4C 80 
1cd94     5A 80 69 80 
1cd98     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
1cd9c     9F 80 B3 80 
1cda0     C9 80 DF 80 
1cda4     F7 80 11 81 
1cda8     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
1cdac     64 81 82 81 
1cdb0     A1 81 C2 81 
1cdb4     E3 81 06 82 
1cdb8     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
1cdbc     77 82 9E 82 
1cdc0     C7 82 F2 82 
1cdc4     1D 83 4A 83 
1cdc8     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
1cdcc     D7 83 08 84 
1cdd0     3B 84 6F 84 
1cdd4     A4 84 DA 84 
1cdd8     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
1cddc     84 85 BF 85 
1cde0     FB 85 38 86 
1cde4     77 86 B6 86 
1cde8     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
1cdec     7C 87 C1 87 
1cdf0     06 88 4D 88 
1cdf4     95 88 DE 88 
1cdf8     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
1cdfc     BF 89 0D 8A 
1ce00     5B 8A AB 8A 
1ce04     FC 8A 4E 8B 
1ce08     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
1ce0c     4B 8C A2 8C 
1ce10     F9 8C 52 8D 
1ce14     AC 8D 07 8E 
1ce18     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
1ce1c     1E 8F 7D 8F 
1ce20     DE 8F 3F 90 
1ce24     A2 90 05 91 
1ce28     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
1ce2c     37 92 9F 92 
1ce30     08 93 72 93 
1ce34     DD 93 49 94 
1ce38     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
1ce3c     93 95 03 96 
1ce40     75 96 E7 96 
1ce44     5A 97 CE 97 
1ce48     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
1ce4c     31 99 AA 99 
1ce50     23 9A 9D 9A 
1ce54     18 9B 94 9B 
1ce58     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
1ce5c     0F 9D 8F 9D 
1ce60     10 9E 92 9E 
1ce64     15 9F 98 9F 
1ce68     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
1ce6c     29 A1 B1 A1 
1ce70     39 A2 C2 A2 
1ce74     4D A3 D8 A3 
1ce78     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
1ce7c     7E A5 0D A6 
1ce80     9C A6 2D A7 
1ce84     BE A7 50 A8 
1ce88     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
1ce8c     0B AA A0 AA 
1ce90     37 AB CE AB 
1ce94     65 AC FE AC 
1ce98     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
1ce9c     CD AE 69 AF 
1cea0     05 B0 A3 B0 
1cea4     41 B1 E0 B1 
1cea8     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
1ceac     C1 B3 63 B4 
1ceb0     05 B5 A8 B5 
1ceb4     4C B6 F1 B6 
1ceb8     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
1cebc     E4 B8 8B B9 
1cec0     33 BA DC BA 
1cec4     86 BB 30 BC 
1cec8     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
1cecc     32 BE DF BE 
1ced0     8D BF 3B C0 
1ced4     E9 C0 98 C1 
1ced8     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
1cedc     AA C3 5B C4 
1cee0     0E C5 C0 C5 
1cee4     74 C6 27 C7 
1cee8     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
1ceec     46 C9 FC C9 
1cef0     B3 CA 6A CB 
1cef4     21 CC DA CC 
1cef8     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
1cefc     05 CF BF CF 
1cf00     79 D0 34 D1 
1cf04     EF D1 AB D2 
1cf08     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
1cf0c     E1 D4 9F D5 
1cf10     5D D6 1B D7 
1cf14     DA D7 99 D8 
1cf18     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
1cf1c     D8 DA 99 DB 
1cf20     5A DC 1B DD 
1cf24     DD DD 9F DE 
1cf28     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
1cf2c     E6 E0 A9 E1 
1cf30     6D E2 31 E3 
1cf34     F5 E3 B9 E4 
1cf38     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
1cf3c     07 E7 CD E7 
1cf40     92 E8 58 E9 
1cf44     1E EA E4 EA 
1cf48     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
1cf4c     38 ED FF ED 
1cf50     C6 EE 8E EF 
1cf54     55 F0 1D F1 
1cf58     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
1cf5c     74 F3 3C F4 
1cf60     05 F5 CD F5 
1cf64     96 F6 5E F7 
1cf68     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
1cf6c     B8 F9 81 FA 
1cf70     4A FB 13 FC 
1cf74     DC FC A5 FD 
1cf78     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
1cf7c                 | 	alignl
1cf7c                 | __system__dat_
1cf7c     00 00 00 00 
1cf80     00 00 00 00 | 	byte	$00[8]
1cf84     03 00 00 00 
1cf88     00 00 00 00 
1cf8c     00 00 00 00 
1cf90     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cf94     00 00 00 00 
1cf98     00 00 00 00 
1cf9c     00 00 00 00 | 	byte	$00[12]
1cfa0     05 00 00 00 
1cfa4     00 00 00 00 
1cfa8     00 00 00 00 
1cfac     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cfb0     78 D1 01 00 | 	long	@@@__system__dat_ + 508
1cfb4     80 D1 01 00 | 	long	@@@__system__dat_ + 516
1cfb8     00 00 00 00 | 	byte	$00, $00, $00, $00
1cfbc     88 D1 01 00 | 	long	@@@__system__dat_ + 524
1cfc0     90 D1 01 00 | 	long	@@@__system__dat_ + 532
1cfc4     00 00 00 00 
1cfc8     00 00 00 00 | 	byte	$00[8]
1cfcc     01 00 00 00 
1cfd0     06 00 00 00 
1cfd4     00 00 00 00 
1cfd8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1cfdc     00 00 00 00 | 	byte	$00, $00, $00, $00
1cfe0     98 D1 01 00 | 	long	@@@__system__dat_ + 540
1cfe4     A0 D1 01 00 | 	long	@@@__system__dat_ + 548
1cfe8     00 00 00 00 | 	byte	$00, $00, $00, $00
1cfec     A8 D1 01 00 | 	long	@@@__system__dat_ + 556
1cff0     B0 D1 01 00 | 	long	@@@__system__dat_ + 564
1cff4     00 00 00 00 
1cff8     00 00 00 00 | 	byte	$00[8]
1cffc     01 00 00 00 
1d000     06 00 00 00 
1d004     00 00 00 00 
1d008     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d00c     00 00 00 00 | 	byte	$00, $00, $00, $00
1d010     B8 D1 01 00 | 	long	@@@__system__dat_ + 572
1d014     C0 D1 01 00 | 	long	@@@__system__dat_ + 580
1d018     00 00 00 00 | 	byte	$00, $00, $00, $00
1d01c     C8 D1 01 00 | 	long	@@@__system__dat_ + 588
1d020     D0 D1 01 00 | 	long	@@@__system__dat_ + 596
1d024     00 00 00 00 
      ...             
1d174     00 00 00 00 
1d178     00 00 00 00 | 	byte	$00[344]
1d17c     A4 5F 00 00 | 	long	@@@__system___tx
1d180     00 00 00 00 | 	byte	$00, $00, $00, $00
1d184     EC 5F 00 00 | 	long	@@@__system___rx
1d188     00 00 00 00 | 	byte	$00, $00, $00, $00
1d18c     D4 79 00 00 | 	long	@@@__system___rxtxioctl_0174
1d190     00 00 00 00 | 	byte	$00, $00, $00, $00
1d194     4C 7A 00 00 | 	long	@@@__system____dummy_flush_0175
1d198     00 00 00 00 | 	byte	$00, $00, $00, $00
1d19c     A4 5F 00 00 | 	long	@@@__system___tx
1d1a0     00 00 00 00 | 	byte	$00, $00, $00, $00
1d1a4     EC 5F 00 00 | 	long	@@@__system___rx
1d1a8     00 00 00 00 | 	byte	$00, $00, $00, $00
1d1ac     D4 79 00 00 | 	long	@@@__system___rxtxioctl_0174
1d1b0     00 00 00 00 | 	byte	$00, $00, $00, $00
1d1b4     4C 7A 00 00 | 	long	@@@__system____dummy_flush_0175
1d1b8     00 00 00 00 | 	byte	$00, $00, $00, $00
1d1bc     A4 5F 00 00 | 	long	@@@__system___tx
1d1c0     00 00 00 00 | 	byte	$00, $00, $00, $00
1d1c4     EC 5F 00 00 | 	long	@@@__system___rx
1d1c8     00 00 00 00 | 	byte	$00, $00, $00, $00
1d1cc     D4 79 00 00 | 	long	@@@__system___rxtxioctl_0174
1d1d0     00 00 00 00 | 	byte	$00, $00, $00, $00
1d1d4     4C 7A 00 00 | 	long	@@@__system____dummy_flush_0175
1d1d8     00 00 00 00 | 	byte	$00, $00, $00, $00
1d1dc                 | __heap_base
1d1dc     00 00 00 00 
      ...             
1e1dc     00 00 00 00 
1e1e0     00 00 00 00 | 	long	0[1026]
1e1e4                 | objmem
1e1e4     00 00 00 00 | 	long	0[1]
1e1e8 118             | 	org	COG_BSS_START
1e1e8 118             | _var01
1e1e8 118             | 	res	1
1e1e8 119             | _var02
1e1e8 119             | 	res	1
1e1e8 11a             | _var03
1e1e8 11a             | 	res	1
1e1e8 11b             | _var04
1e1e8 11b             | 	res	1
1e1e8 11c             | _var05
1e1e8 11c             | 	res	1
1e1e8 11d             | _var06
1e1e8 11d             | 	res	1
1e1e8 11e             | _var07
1e1e8 11e             | 	res	1
1e1e8 11f             | _var08
1e1e8 11f             | 	res	1
1e1e8 120             | _var09
1e1e8 120             | 	res	1
1e1e8 121             | _var10
1e1e8 121             | 	res	1
1e1e8 122             | _var11
1e1e8 122             | 	res	1
1e1e8 123             | _var12
1e1e8 123             | 	res	1
1e1e8 124             | _var13
1e1e8 124             | 	res	1
1e1e8 125             | _var14
1e1e8 125             | 	res	1
1e1e8 126             | _var15
1e1e8 126             | 	res	1
1e1e8 127             | _var16
1e1e8 127             | 	res	1
1e1e8 128             | _var17
1e1e8 128             | 	res	1
1e1e8 129             | _var18
1e1e8 129             | 	res	1
1e1e8 12a             | _var19
1e1e8 12a             | 	res	1
1e1e8 12b             | _var20
1e1e8 12b             | 	res	1
1e1e8 12c             | _var21
1e1e8 12c             | 	res	1
1e1e8 12d             | _var22
1e1e8 12d             | 	res	1
1e1e8 12e             | arg01
1e1e8 12e             | 	res	1
1e1e8 12f             | arg02
1e1e8 12f             | 	res	1
1e1e8 130             | arg03
1e1e8 130             | 	res	1
1e1e8 131             | arg04
1e1e8 131             | 	res	1
1e1e8 132             | arg05
1e1e8 132             | 	res	1
1e1e8 133             | arg06
1e1e8 133             | 	res	1
1e1e8 134             | arg07
1e1e8 134             | 	res	1
1e1e8 135             | local01
1e1e8 135             | 	res	1
1e1e8 136             | local02
1e1e8 136             | 	res	1
1e1e8 137             | local03
1e1e8 137             | 	res	1
1e1e8 138             | local04
1e1e8 138             | 	res	1
1e1e8 139             | local05
1e1e8 139             | 	res	1
1e1e8 13a             | local06
1e1e8 13a             | 	res	1
1e1e8 13b             | local07
1e1e8 13b             | 	res	1
1e1e8 13c             | local08
1e1e8 13c             | 	res	1
1e1e8 13d             | local09
1e1e8 13d             | 	res	1
1e1e8 13e             | local10
1e1e8 13e             | 	res	1
1e1e8 13f             | local11
1e1e8 13f             | 	res	1
1e1e8 140             | local12
1e1e8 140             | 	res	1
1e1e8 141             | local13
1e1e8 141             | 	res	1
1e1e8 142             | local14
1e1e8 142             | 	res	1
1e1e8 143             | local15
1e1e8 143             | 	res	1
1e1e8 144             | local16
1e1e8 144             | 	res	1
1e1e8 145             | local17
1e1e8 145             | 	res	1
1e1e8 146             | local18
1e1e8 146             | 	res	1
1e1e8 147             | local19
1e1e8 147             | 	res	1
1e1e8 148             | local20
1e1e8 148             | 	res	1
1e1e8 149             | local21
1e1e8 149             | 	res	1
1e1e8 14a             | local22
1e1e8 14a             | 	res	1
1e1e8 14b             | local23
1e1e8 14b             | 	res	1
1e1e8 14c             | local24
1e1e8 14c             | 	res	1
1e1e8 14d             | local25
1e1e8 14d             | 	res	1
1e1e8 14e             | local26
1e1e8 14e             | 	res	1
1e1e8 14f             | local27
1e1e8 14f             | 	res	1
1e1e8 150             | local28
1e1e8 150             | 	res	1
1e1e8 151             | local29
1e1e8 151             | 	res	1
1e1e8 152             | local30
1e1e8 152             | 	res	1
1e1e8 153             | local31
1e1e8 153             | 	res	1
1e1e8 154             | local32
1e1e8 154             | 	res	1
1e1e8 155             | local33
1e1e8 155             | 	res	1
1e1e8 156             | local34
1e1e8 156             | 	res	1
1e1e8 157             | local35
1e1e8 157             | 	res	1
1e1e8 158             | local36
1e1e8 158             | 	res	1
1e1e8 159             | local37
1e1e8 159             | 	res	1
1e1e8 15a             | local38
1e1e8 15a             | 	res	1
1e1e8 15b             | local39
1e1e8 15b             | 	res	1
1e1e8 15c             | local40
1e1e8 15c             | 	res	1
1e1e8 15d             | local41
1e1e8 15d             | 	res	1
1e1e8 15e             | local42
1e1e8 15e             | 	res	1
1e1e8 15f             | local43
1e1e8 15f             | 	res	1
1e1e8 160             | local44
1e1e8 160             | 	res	1
1e1e8 161             | local45
1e1e8 161             | 	res	1
1e1e8 162             | local46
1e1e8 162             | 	res	1
1e1e8 163             | local47
1e1e8 163             | 	res	1
1e1e8 164             | local48
1e1e8 164             | 	res	1
1e1e8 165             | local49
1e1e8 165             | 	res	1
1e1e8 166             | local50
1e1e8 166             | 	res	1
1e1e8 167             | local51
1e1e8 167             | 	res	1
1e1e8 168             | local52
1e1e8 168             | 	res	1
1e1e8 169             | local53
1e1e8 169             | 	res	1
1e1e8 16a             | local54
1e1e8 16a             | 	res	1
1e1e8 16b             | local55
1e1e8 16b             | 	res	1
1e1e8 16c             | local56
1e1e8 16c             | 	res	1
1e1e8 16d             | local57
1e1e8 16d             | 	res	1
1e1e8 16e             | local58
1e1e8 16e             | 	res	1
1e1e8 16f             | local59
1e1e8 16f             | 	res	1
1e1e8 170             | local60
1e1e8 170             | 	res	1
1e1e8 171             | local61
1e1e8 171             | 	res	1
1e1e8 172             | local62
1e1e8 172             | 	res	1
1e1e8 173             | local63
1e1e8 173             | 	res	1
1e1e8 174             | local64
1e1e8 174             | 	res	1
1e1e8 175             | local65
1e1e8 175             | 	res	1
1e1e8 176             | local66
1e1e8 176             | 	res	1
1e1e8 177             | local67
1e1e8 177             | 	res	1
1e1e8 178             | local68
1e1e8 178             | 	res	1
1e1e8 179             | local69
1e1e8 179             | 	res	1
1e1e8 17a             | local70
1e1e8 17a             | 	res	1
1e1e8 17b             | local71
1e1e8 17b             | 	res	1
1e1e8 17c             | local72
1e1e8 17c             | 	res	1
1e1e8 17d             | local73
1e1e8 17d             | 	res	1
1e1e8 17e             | local74
1e1e8 17e             | 	res	1
1e1e8 17f             | local75
1e1e8 17f             | 	res	1
1e1e8 180             | local76
1e1e8 180             | 	res	1
1e1e8 181             | local77
1e1e8 181             | 	res	1
1e1e8 182             | local78
1e1e8 182             | 	res	1
1e1e8 183             | local79
1e1e8 183             | 	res	1
1e1e8 184             | local80
1e1e8 184             | 	res	1
1e1e8 185             | muldiva_
1e1e8 185             | 	res	1
1e1e8 186             | muldivb_
1e1e8 186             | 	res	1
1e1e8 187             | 	fit	480
1e1e8 187             | 
