00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.p2asm"
00000                 | con
00000                 | 	_clkfreq = 320000000
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 20 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 06 F1 03 F6 | 	mov	ptra, objptr
00410 003 EC F0 07 F1 | 	add	ptra, #236
00414 004 14 EC 0F FB | 	rdlong	pa, #20 wz
00418 005 E8 01 90 5D |  if_ne	jmp	#skip_clock_set_
0041c 006 00 00 64 FD | 	hubset	#0
00420 007 07 80 80 FF 
00424 008 00 F0 67 FD | 	hubset	##16781304
00428 009 86 01 80 FF 
0042c 00a 1F 80 66 FD | 	waitx	##200000
00430 00b 07 80 00 FF 
00434 00c FB ED 07 F6 | 	mov	pa, ##16781307
00438 00d 00 EC 63 FD | 	hubset	pa
0043c 00e 18 EC 67 FC | 	wrlong	pa, #24
00440 00f 68 89 89 FF 
00444 010 14 00 6C FC | 	wrlong	##320000000, #20
00448 011 B8 01 90 FD | 	jmp	#skip_clock_set_
0044c 012 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 50 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 46 62 FD | 	cogid	arg01
00614 084 03 46 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0D 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 21 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 47 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 49 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 4B 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 4D 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 20 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 4A 56 F0 |         shr	arg03, #1 wc
00688 0a1 23 49 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 46 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 48 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 4A 56 F0 |         shr	arg03, #1 wc
00698 0a5 23 49 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 46 06 C1 |  if_c   add	arg01, #2
006a0 0a7 24 49 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 23 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 4A 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 25 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 48 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 4F 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 4F 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 78 EF 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 F0 62 FD |        getqx   muldivb_
00740 0cf 19 EE 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 77 EF 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0A 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 78 F1 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0A 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0A D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 77 EF 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0A D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 78 F1 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 20 06 F6 |     mov result1, #0
00778 0dd 00 22 06 F6 |     mov result2, #0
0077c 0de 23 07 02 F6 |     mov abortchain, arg01
00780 0df 23 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 46 06 F1 |     add arg01, #4
00788 0e1 23 F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 46 06 F1 |     add arg01, #4
00790 0e3 23 0D 62 FC |     wrlong objptr, arg01
00794 0e4 04 46 06 F1 |     add arg01, #4
00798 0e5 23 B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 24 47 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 23 F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 46 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 46 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 24 21 02 F6 |     mov result1, arg02
007d4 0f4 01 22 06 F6 |     mov result2, #1
007d8 0f5 23 49 02 FB |     rdlong arg02, arg01
007dc 0f6 04 46 06 F1 |     add arg01, #4
007e0 0f7 23 F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 46 06 F1 |     add arg01, #4
007e8 0f9 23 0D 02 FB |     rdlong objptr, arg01
007ec 0fa 04 46 06 F1 |     add arg01, #4
007f0 0fb 23 B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 46 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 4A 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 80 62 00 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | itmp1_
00814 104 00 00 00 00 | 	long	0
00818 105             | itmp2_
00818 105 00 00 00 00 | 	long	0
0081c 106             | objptr
0081c 106 88 72 00 00 | 	long	@objmem
00820 107             | ptr___struct___bas_wrap_sender_tx_
00820 107 20 3B 00 00 | 	long	@__struct___bas_wrap_sender_tx
00824 108             | ptr___struct__s_vfs_file_t_putchar_
00824 108 68 3A 00 00 | 	long	@__struct__s_vfs_file_t_putchar
00828 109             | ptr___system__dat__
00828 109 20 60 00 00 | 	long	@__system__dat_
0082c 10a             | ptr__hng030rm_spin2_dat__
0082c 10a BC 3B 00 00 | 	long	@_hng030rm_spin2_dat_
00830 10b             | ptr__hng030rm_spin2_putchar_
00830 10b 28 11 00 00 | 	long	@_hng030rm_spin2_putchar
00834 10c             | ptr__hng030rm_spin2_putpixel1_
00834 10c 0C 0E 00 00 | 	long	@_hng030rm_spin2_putpixel1
00838 10d             | ptr__hng030rm_spin2_putpixel2_
00838 10d F4 0E 00 00 | 	long	@_hng030rm_spin2_putpixel2
0083c 10e             | ptr__hng030rm_spin2_putpixel4_
0083c 10e CC 0F 00 00 | 	long	@_hng030rm_spin2_putpixel4
00840 10f             | ptr__hng030rm_spin2_putpixel8_
00840 10f A4 10 00 00 | 	long	@_hng030rm_spin2_putpixel8
00844 110             | result1
00844 110 00 00 00 00 | 	long	0
00848 111             | result2
00848 111 00 00 00 00 | 	long	0
0084c 112             | result3
0084c 112 00 00 00 00 | 	long	0
00850 113             | COG_BSS_START
00850 113             | 	fit	480
00850                 | 	orgh
00850                 | hubentry
00850                 | 
00850                 | _program
00850     30 5A 05 F6 | 	mov	COUNT_, #48
00854     B0 00 A0 FD | 	call	#pushregs_
00858     2C 0C 06 F1 | 	add	objptr, #44
0085c     06 4F 02 F6 | 	mov	local01, objptr
00860                 | ' 
00860                 | ' ' initialize pointers and variables
00860                 | ' 
00860                 | ' border_ptr:=@bordercolor
00860     24 0C 86 F1 | 	sub	objptr, #36
00864     06 4F 62 FC | 	wrlong	local01, objptr
00868     08 00 00 FF 
0086c     00 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
00870                 | ' font_ptr:=@st_font
00870     04 0C 86 F1 | 	sub	objptr, #4
00874     06 15 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
00878                 | ' hdmibase:=base
00878     20 0C 06 F1 | 	add	objptr, #32
0087c     06 01 68 FC | 	wrlong	#0, objptr
00880     24 0C 86 F1 | 	sub	objptr, #36
00884     0C 49 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00888                 | ' p1:=@putpixel1
00888     06 47 02 F6 | 	mov	arg01, objptr
0088c     08 00 00 FF 
00890     00 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00894     CC 17 B0 FD | 	call	#__system___make_methodptr
00898     10 51 02 F6 | 	mov	local02, result1
0089c     DC 0C 06 F1 | 	add	objptr, #220
008a0     06 51 62 FC | 	wrlong	local02, objptr
008a4     DC 0C 86 F1 | 	sub	objptr, #220
008a8     0D 49 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
008ac                 | ' p2:=@putpixel2
008ac     06 47 02 F6 | 	mov	arg01, objptr
008b0     B0 17 B0 FD | 	call	#__system___make_methodptr
008b4     10 51 02 F6 | 	mov	local02, result1
008b8     E0 0C 06 F1 | 	add	objptr, #224
008bc     06 51 62 FC | 	wrlong	local02, objptr
008c0     E0 0C 86 F1 | 	sub	objptr, #224
008c4     0E 49 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
008c8                 | ' p4:=@putpixel4
008c8     06 47 02 F6 | 	mov	arg01, objptr
008cc     94 17 B0 FD | 	call	#__system___make_methodptr
008d0     10 51 02 F6 | 	mov	local02, result1
008d4     E4 0C 06 F1 | 	add	objptr, #228
008d8     06 51 62 FC | 	wrlong	local02, objptr
008dc     E4 0C 86 F1 | 	sub	objptr, #228
008e0     0F 49 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
008e4                 | ' p8:=@putpixel8
008e4     06 47 02 F6 | 	mov	arg01, objptr
008e8     78 17 B0 FD | 	call	#__system___make_methodptr
008ec     10 51 02 F6 | 	mov	local02, result1
008f0     E8 0C 06 F1 | 	add	objptr, #232
008f4     06 51 62 FC | 	wrlong	local02, objptr
008f8     E8 0C 86 F1 | 	sub	objptr, #232
008fc                 | ' 
008fc                 | ' 
008fc                 | ' ' the mode has to be set here to enable computing the buffer length
008fc                 | ' 
008fc                 | ' setmode(mode)
008fc     40 46 06 F6 | 	mov	arg01, #64
00900     7C 0A B0 FD | 	call	#_hng030rm_spin2_setmode
00904     40 0C 06 F1 | 	add	objptr, #64
00908     06 53 02 F6 | 	mov	local03, objptr
0090c                 | ' 
0090c                 | ' vblank_ptr:=@vblank
0090c     34 0C 86 F1 | 	sub	objptr, #52
00910     06 53 62 FC | 	wrlong	local03, objptr
00914     28 0C 06 F1 | 	add	objptr, #40
00918     06 55 02 F6 | 	mov	local04, objptr
0091c                 | ' cursor_ptr:=@cursor_x
0091c     24 0C 86 F1 | 	sub	objptr, #36
00920     06 55 62 FC | 	wrlong	local04, objptr
00924     88 0C 06 F1 | 	add	objptr, #136
00928     06 57 02 F6 | 	mov	local05, objptr
0092c                 | ' 
0092c                 | ' fontnum_ptr:=@fontnum
0092c     78 0C 86 F1 | 	sub	objptr, #120
00930     06 57 62 FC | 	wrlong	local05, objptr
00934                 | ' 
00934                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
00934     78 0C 06 F1 | 	add	objptr, #120
00938     06 01 68 FC | 	wrlong	#0, objptr
0093c     1C 0C 06 F1 | 	add	objptr, #28
00940     06 47 02 F6 | 	mov	arg01, objptr
00944     B4 0C 86 F1 | 	sub	objptr, #180
00948     0F 00 00 FF 
0094c     58 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
00950     0A 49 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00954     0F 00 00 FF 
00958     58 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
0095c                 | ' bytemove(@colors,@vgacolors,16)
0095c     10 4A 06 F6 | 	mov	arg03, #16
00960     D8 15 B0 FD | 	call	#__system____builtin_memmove
00964                 | ' 
00964                 | ' ' initialize a cursor
00964                 | ' 
00964                 | ' cursor_x:=0
00964     34 0C 06 F1 | 	add	objptr, #52
00968     06 01 48 FC | 	wrbyte	#0, objptr
0096c                 | ' cursor_y:=0
0096c     01 0C 06 F1 | 	add	objptr, #1
00970     06 01 48 FC | 	wrbyte	#0, objptr
00974                 | ' cursor_sh:=14
00974     01 0C 06 F1 | 	add	objptr, #1
00978     06 1D 48 FC | 	wrbyte	#14, objptr
0097c     36 0C 86 F1 | 	sub	objptr, #54
00980                 | ' 
00980                 | ' 
00980                 | ' ' start the cog
00980                 | ' 
00980                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00980     0F 00 00 FF 
00984     68 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00988     0A 49 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
0098c     0F 00 00 FF 
00990     68 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
00994     06 4B 02 F6 | 	mov	arg03, objptr
00998     10 46 06 F6 | 	mov	arg01, #16
0099c     28 4A 62 FD | 	setq	arg03
009a0     24 47 F2 FC | 	coginit	arg01, arg02 wc
009a4     01 46 66 C6 |  if_b	neg	arg01, #1
009a8     23 21 02 F6 | 	mov	result1, arg01
009ac     10 59 02 F6 | 	mov	local06, result1
009b0     28 0C 06 F1 | 	add	objptr, #40
009b4     06 59 62 FC | 	wrlong	local06, objptr
009b8     28 0C 86 F1 | 	sub	objptr, #40
009bc                 | ' waitms(20)
009bc     14 46 06 F6 | 	mov	arg01, #20
009c0     DC 17 B0 FD | 	call	#__system___waitms
009c4                 | ' 
009c4                 | ' ' clear the screen and set the colors to green on black
009c4                 | ' 
009c4                 | ' cls(c_green,c_black)
009c4     C7 5A 06 F6 | 	mov	local07, #199
009c8     00 5C 06 F6 | 	mov	local08, #0
009cc                 | ' 
009cc                 | ' if (graphmode<512)
009cc     C4 0C 06 F1 | 	add	objptr, #196
009d0     06 5F 02 FB | 	rdlong	local09, objptr
009d4     C4 0C 86 F1 | 	sub	objptr, #196
009d8     01 00 00 FF 
009dc     00 5E 5E F2 | 	cmps	local09, ##512 wcz
009e0     2C 00 90 3D |  if_ae	jmp	#LR__0001
009e4     00 60 06 F6 | 	mov	local10, #0
009e8     FF 7F 1C FF 
009ec     E0 63 66 F6 | 	neg	local11, ##956301280
009f0                 | '   c:=fc<<24+bc<<16+$20
009f0                 | '   longfill(buf_ptr,c,buflen)
009f0     06 47 02 FB | 	rdlong	arg01, objptr
009f4     30 0C 06 F1 | 	add	objptr, #48
009f8     06 4B 02 FB | 	rdlong	arg03, objptr
009fc     30 0C 86 F1 | 	sub	objptr, #48
00a00     00 80 63 FF 
00a04     20 48 06 F6 | 	mov	arg02, ##-956301280
00a08     A8 00 A0 FD | 	call	#\builtin_longfill_
00a0c                 | ' else
00a0c     80 00 90 FD | 	jmp	#LR__0006
00a10                 | LR__0001
00a10                 | '   if (graphmode & 48) ==48
00a10     C4 0C 06 F1 | 	add	objptr, #196
00a14     06 5F 02 FB | 	rdlong	local09, objptr
00a18     C4 0C 86 F1 | 	sub	objptr, #196
00a1c     30 5E 06 F5 | 	and	local09, #48
00a20     30 5E 0E F2 | 	cmp	local09, #48 wz
00a24                 | '     c:=bc
00a24     00 62 06 A6 |  if_e	mov	local11, #0
00a28     48 00 90 AD |  if_e	jmp	#LR__0005
00a2c                 | '   elseif (graphmode & 48) ==32
00a2c     C4 0C 06 F1 | 	add	objptr, #196
00a30     06 5F 02 FB | 	rdlong	local09, objptr
00a34     C4 0C 86 F1 | 	sub	objptr, #196
00a38     30 5E 06 F5 | 	and	local09, #48
00a3c     20 5E 0E F2 | 	cmp	local09, #32 wz
00a40     00 62 06 A6 |  if_e	mov	local11, #0
00a44                 | '     c:=bc<<4+bc
00a44     2C 00 90 AD |  if_e	jmp	#LR__0004
00a48                 | '   elseif (graphmode & 48) ==16
00a48     C4 0C 06 F1 | 	add	objptr, #196
00a4c     06 5F 02 FB | 	rdlong	local09, objptr
00a50     C4 0C 86 F1 | 	sub	objptr, #196
00a54     30 5E 06 F5 | 	and	local09, #48
00a58     10 5E 0E F2 | 	cmp	local09, #16 wz
00a5c     10 00 90 5D |  if_ne	jmp	#LR__0002
00a60     00 64 06 F6 | 	mov	local12, #0
00a64     00 66 06 F6 | 	mov	local13, #0
00a68     00 62 06 F6 | 	mov	local11, #0
00a6c                 | '     c:=bc<<6+bc<<4+bc<<2+bc
00a6c                 | '   else
00a6c     04 00 90 FD | 	jmp	#LR__0003
00a70                 | LR__0002
00a70                 | '     if bc==1
00a70                 | '       c:=255
00a70                 | '     else
00a70                 | '       c:=0
00a70     00 62 06 F6 | 	mov	local11, #0
00a74                 | LR__0003
00a74                 | LR__0004
00a74                 | LR__0005
00a74     30 0C 06 F1 | 	add	objptr, #48
00a78     06 4B 02 FB | 	rdlong	arg03, objptr
00a7c     30 0C 86 F1 | 	sub	objptr, #48
00a80     02 4A 66 F0 | 	shl	arg03, #2
00a84                 | '   bytefill(buf_ptr,c,buflen*4)
00a84     06 47 02 FB | 	rdlong	arg01, objptr
00a88     31 49 02 F6 | 	mov	arg02, local11
00a8c     A0 00 A0 FD | 	call	#\builtin_bytefill_
00a90                 | LR__0006
00a90                 | ' setwritecolors(fc,bc)
00a90     00 48 06 F6 | 	mov	arg02, #0
00a94                 | ' 
00a94                 | ' 
00a94                 | ' write_color:=ff
00a94     38 0C 06 F1 | 	add	objptr, #56
00a98     06 8F 69 FC | 	wrlong	#199, objptr
00a9c                 | ' write_background:=bb
00a9c     04 0C 06 F1 | 	add	objptr, #4
00aa0     06 01 68 FC | 	wrlong	#0, objptr
00aa4                 | ' cursor_x:=0
00aa4     08 0C 86 F1 | 	sub	objptr, #8
00aa8     06 01 48 FC | 	wrbyte	#0, objptr
00aac                 | ' cursor_y:=0
00aac     01 0C 06 F1 | 	add	objptr, #1
00ab0     06 01 48 FC | 	wrbyte	#0, objptr
00ab4                 | ' setbordercolor(0,0,128)
00ab4     0F 4A C6 F9 | 	decod	arg03, #15
00ab8                 | ' 
00ab8                 | ' color:=r<<24+g<<16+b<<8
00ab8                 | ' bordercolor:=color
00ab8     09 0C 86 F1 | 	sub	objptr, #9
00abc     40 00 80 FF 
00ac0     06 01 68 FC | 	wrlong	##32768, objptr
00ac4                 | ' setwritecolors(c_green,c_black)
00ac4                 | ' 
00ac4                 | ' 
00ac4                 | ' write_color:=ff
00ac4     0C 0C 06 F1 | 	add	objptr, #12
00ac8     06 8F 69 FC | 	wrlong	#199, objptr
00acc                 | ' write_background:=bb
00acc     04 0C 06 F1 | 	add	objptr, #4
00ad0     06 01 68 FC | 	wrlong	#0, objptr
00ad4                 | ' 
00ad4                 | ' return cog
00ad4     1D 00 00 FF 
00ad8     AA 69 06 F6 | 	mov	local14, ##@LR__0242
00adc                 | ' 
00adc                 | ' write(text)
00adc     04 0C 86 F1 | 	sub	objptr, #4
00ae0     06 6B 02 FB | 	rdlong	local15, objptr
00ae4     18 6A 66 F0 | 	shl	local15, #24
00ae8     04 0C 06 F1 | 	add	objptr, #4
00aec     06 6D 02 FB | 	rdlong	local16, objptr
00af0     10 6C 66 F0 | 	shl	local16, #16
00af4     36 6B 02 F1 | 	add	local15, local16
00af8                 | ' 
00af8                 | ' c:=write_color<<24+write_background<<16
00af8                 | ' 'debug(uhex_long(write_color))
00af8                 | ' ncy:=cursor_y
00af8     07 0C 86 F1 | 	sub	objptr, #7
00afc     06 6F C2 FA | 	rdbyte	local17, objptr
00b00                 | ' ncx:=cursor_x+strsize(text)
00b00     01 0C 86 F1 | 	sub	objptr, #1
00b04     06 71 C2 FA | 	rdbyte	local18, objptr
00b08     34 0C 86 F1 | 	sub	objptr, #52
00b0c     34 47 02 F6 | 	mov	arg01, local14
00b10     00 72 06 F6 | 	mov	local19, #0
00b14     F8 F4 9F FE | 	loc	pa,	#(@LR__0008-@LR__0007)
00b18     93 00 A0 FD | 	call	#FCACHE_LOAD_
00b1c                 | LR__0007
00b1c     23 75 CA FA | 	rdbyte	local20, arg01 wz
00b20     01 72 06 51 |  if_ne	add	local19, #1
00b24     01 46 06 51 |  if_ne	add	arg01, #1
00b28     F0 FF 9F 5D |  if_ne	jmp	#LR__0007
00b2c                 | LR__0008
00b2c     39 21 02 F6 | 	mov	result1, local19
00b30     39 71 02 F1 | 	add	local18, local19
00b34     38 77 02 F6 | 	mov	local21, local18
00b38     F4 F4 9F FE | 	loc	pa,	#(@LR__0010-@LR__0009)
00b3c     93 00 A0 FD | 	call	#FCACHE_LOAD_
00b40                 | ' repeat while ncx>cpl-1
00b40                 | LR__0009
00b40     90 0C 06 F1 | 	add	objptr, #144
00b44     06 71 02 FB | 	rdlong	local18, objptr
00b48     90 0C 86 F1 | 	sub	objptr, #144
00b4c     01 70 86 F1 | 	sub	local18, #1
00b50     38 77 5A F2 | 	cmps	local21, local18 wcz
00b54     18 00 90 ED |  if_be	jmp	#LR__0011
00b58                 | '   ncx-=cpl
00b58     90 0C 06 F1 | 	add	objptr, #144
00b5c     06 79 02 FB | 	rdlong	local22, objptr
00b60     90 0C 86 F1 | 	sub	objptr, #144
00b64     3C 77 82 F1 | 	sub	local21, local22
00b68                 | '   ncy+=1
00b68     01 6E 06 F1 | 	add	local17, #1
00b6c     D0 FF 9F FD | 	jmp	#LR__0009
00b70                 | LR__0010
00b70                 | LR__0011
00b70                 | ' repeat while ncy>lines-1
00b70                 | LR__0012
00b70     94 0C 06 F1 | 	add	objptr, #148
00b74     06 71 02 FB | 	rdlong	local18, objptr
00b78     94 0C 86 F1 | 	sub	objptr, #148
00b7c     01 70 86 F1 | 	sub	local18, #1
00b80     38 6F 5A F2 | 	cmps	local17, local18 wcz
00b84     20 00 90 ED |  if_be	jmp	#LR__0013
00b88                 | '   ncy-=1
00b88     01 6E 86 F1 | 	sub	local17, #1
00b8c                 | '   scrollup()
00b8c     28 07 B0 FD | 	call	#_hng030rm_spin2_scrollup
00b90                 | '   cursor_y-=1
00b90     35 0C 06 F1 | 	add	objptr, #53
00b94     06 71 C2 FA | 	rdbyte	local18, objptr
00b98     01 70 86 F1 | 	sub	local18, #1
00b9c     06 71 42 FC | 	wrbyte	local18, objptr
00ba0     35 0C 86 F1 | 	sub	objptr, #53
00ba4     C8 FF 9F FD | 	jmp	#LR__0012
00ba8                 | LR__0013
00ba8                 | ' 
00ba8                 | ' repeat iii from 0 to strsize(text)-1
00ba8     00 7A 06 F6 | 	mov	local23, #0
00bac     34 47 02 F6 | 	mov	arg01, local14
00bb0     00 72 06 F6 | 	mov	local19, #0
00bb4     58 F4 9F FE | 	loc	pa,	#(@LR__0015-@LR__0014)
00bb8     93 00 A0 FD | 	call	#FCACHE_LOAD_
00bbc                 | LR__0014
00bbc     23 75 CA FA | 	rdbyte	local20, arg01 wz
00bc0     01 72 06 51 |  if_ne	add	local19, #1
00bc4     01 46 06 51 |  if_ne	add	arg01, #1
00bc8     F0 FF 9F 5D |  if_ne	jmp	#LR__0014
00bcc                 | LR__0015
00bcc     39 7D 02 F6 | 	mov	local24, local19
00bd0     01 7C 86 F1 | 	sub	local24, #1
00bd4     00 7C 5E F2 | 	cmps	local24, #0 wcz
00bd8     01 7E 06 16 |  if_a	mov	local25, #1
00bdc     01 7E 66 E6 |  if_be	neg	local25, #1
00be0     3F 7D 02 F1 | 	add	local24, local25
00be4     70 F4 9F FE | 	loc	pa,	#(@LR__0017-@LR__0016)
00be8     93 00 A0 FD | 	call	#FCACHE_LOAD_
00bec                 | LR__0016
00bec     90 0C 06 F1 | 	add	objptr, #144
00bf0     06 81 02 FB | 	rdlong	local26, objptr
00bf4     5B 0C 86 F1 | 	sub	objptr, #91
00bf8     06 83 C2 FA | 	rdbyte	local27, objptr
00bfc     41 81 02 FD | 	qmul	local26, local27
00c00     18 84 62 FD | 	getqx	local28
00c04     01 0C 86 F1 | 	sub	objptr, #1
00c08     06 81 C2 FA | 	rdbyte	local26, objptr
00c0c     34 0C 86 F1 | 	sub	objptr, #52
00c10     40 85 02 F1 | 	add	local28, local26
00c14     3D 85 02 F1 | 	add	local28, local23
00c18     02 84 66 F0 | 	shl	local28, #2
00c1c     06 87 02 FB | 	rdlong	local29, objptr
00c20     42 87 02 F1 | 	add	local29, local28
00c24     43 89 02 FB | 	rdlong	local30, local29
00c28     7F 00 00 FF 
00c2c     FF 89 06 F5 | 	and	local30, ##65535
00c30     35 89 42 F5 | 	or	local30, local15
00c34                 | ' 
00c34                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
00c34     43 89 62 FC | 	wrlong	local30, local29
00c38     3F 7B 02 F1 | 	add	local23, local25
00c3c     3E 7B 0A F2 | 	cmp	local23, local24 wz
00c40     A8 FF 9F 5D |  if_ne	jmp	#LR__0016
00c44                 | LR__0017
00c44                 | ' 
00c44                 | ' outtextxy(cursor_x,cursor_y,text)
00c44     34 0C 06 F1 | 	add	objptr, #52
00c48     06 8B C2 FA | 	rdbyte	local31, objptr
00c4c     01 0C 06 F1 | 	add	objptr, #1
00c50     06 49 C2 FA | 	rdbyte	arg02, objptr
00c54     35 0C 86 F1 | 	sub	objptr, #53
00c58     34 4B 02 F6 | 	mov	arg03, local14
00c5c     24 8D 02 F6 | 	mov	local32, arg02
00c60     25 8F 02 F6 | 	mov	local33, arg03
00c64                 | ' 
00c64                 | ' repeat iii from 0 to strsize(text)-1
00c64     00 90 06 F6 | 	mov	local34, #0
00c68     47 47 02 F6 | 	mov	arg01, local33
00c6c     00 72 06 F6 | 	mov	local19, #0
00c70     9C F3 9F FE | 	loc	pa,	#(@LR__0019-@LR__0018)
00c74     93 00 A0 FD | 	call	#FCACHE_LOAD_
00c78                 | LR__0018
00c78     23 75 CA FA | 	rdbyte	local20, arg01 wz
00c7c     01 72 06 51 |  if_ne	add	local19, #1
00c80     01 46 06 51 |  if_ne	add	arg01, #1
00c84     F0 FF 9F 5D |  if_ne	jmp	#LR__0018
00c88                 | LR__0019
00c88     39 21 02 F6 | 	mov	result1, local19
00c8c     10 93 02 F6 | 	mov	local35, result1
00c90     01 92 86 F1 | 	sub	local35, #1
00c94     00 92 5E F2 | 	cmps	local35, #0 wcz
00c98     01 94 06 16 |  if_a	mov	local36, #1
00c9c     01 94 66 E6 |  if_be	neg	local36, #1
00ca0     4A 93 02 F1 | 	add	local35, local36
00ca4     A8 F3 9F FE | 	loc	pa,	#(@LR__0021-@LR__0020)
00ca8     93 00 A0 FD | 	call	#FCACHE_LOAD_
00cac                 | LR__0020
00cac     90 0C 06 F1 | 	add	objptr, #144
00cb0     06 97 02 FB | 	rdlong	local37, objptr
00cb4     90 0C 86 F1 | 	sub	objptr, #144
00cb8     46 97 02 FD | 	qmul	local37, local32
00cbc     18 98 62 FD | 	getqx	local38
00cc0     45 99 02 F1 | 	add	local38, local31
00cc4     48 99 02 F1 | 	add	local38, local34
00cc8     02 98 66 F0 | 	shl	local38, #2
00ccc     06 9B 02 FB | 	rdlong	local39, objptr
00cd0     4C 9B 02 F1 | 	add	local39, local38
00cd4     4D 9D 02 FB | 	rdlong	local40, local39
00cd8     FF 9C 26 F5 | 	andn	local40, #255
00cdc     47 9F 02 F6 | 	mov	local41, local33
00ce0     48 9F 02 F1 | 	add	local41, local34
00ce4     4F 97 C2 FA | 	rdbyte	local37, local41
00ce8     4B 9D 42 F5 | 	or	local40, local37
00cec                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
00cec     4D 9D 62 FC | 	wrlong	local40, local39
00cf0     4A 91 02 F1 | 	add	local34, local36
00cf4     49 91 0A F2 | 	cmp	local34, local35 wz
00cf8     B0 FF 9F 5D |  if_ne	jmp	#LR__0020
00cfc                 | LR__0021
00cfc                 | ' 
00cfc                 | ' cursor_x:=ncx
00cfc     34 0C 06 F1 | 	add	objptr, #52
00d00     06 77 42 FC | 	wrbyte	local21, objptr
00d04                 | ' cursor_y:=ncy
00d04     01 0C 06 F1 | 	add	objptr, #1
00d08     06 6F 42 FC | 	wrbyte	local17, objptr
00d0c                 | ' cursor_x:=0
00d0c     01 0C 86 F1 | 	sub	objptr, #1
00d10     06 01 48 FC | 	wrbyte	#0, objptr
00d14                 | ' cursor_y+=1
00d14     01 0C 06 F1 | 	add	objptr, #1
00d18     06 A1 C2 FA | 	rdbyte	local42, objptr
00d1c     01 A0 06 F1 | 	add	local42, #1
00d20     06 A1 42 FC | 	wrbyte	local42, objptr
00d24                 | ' if (cursor_y>lines-1)
00d24     5F 0C 06 F1 | 	add	objptr, #95
00d28     06 A1 02 FB | 	rdlong	local42, objptr
00d2c     01 A0 86 F1 | 	sub	local42, #1
00d30     5F 0C 86 F1 | 	sub	objptr, #95
00d34     06 A3 C2 FA | 	rdbyte	local43, objptr
00d38     35 0C 86 F1 | 	sub	objptr, #53
00d3c     50 A3 5A F2 | 	cmps	local43, local42 wcz
00d40     1C 00 90 ED |  if_be	jmp	#LR__0022
00d44                 | '   scrollup()
00d44     70 05 B0 FD | 	call	#_hng030rm_spin2_scrollup
00d48     94 0C 06 F1 | 	add	objptr, #148
00d4c     06 A5 02 FB | 	rdlong	local44, objptr
00d50     01 A4 86 F1 | 	sub	local44, #1
00d54                 | '   cursor_y:=lines-1
00d54     5F 0C 86 F1 | 	sub	objptr, #95
00d58     06 A5 42 FC | 	wrbyte	local44, objptr
00d5c     35 0C 86 F1 | 	sub	objptr, #53
00d60                 | LR__0022
00d60                 | ' v.start(64,0)
00d60                 | ' v.writeln ("Basic test")
00d60                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #2
00d60     06 47 02 F6 | 	mov	arg01, objptr
00d64     0B 49 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00d68     F8 12 B0 FD | 	call	#__system___make_methodptr
00d6c     00 24 06 F6 | 	mov	result3, #0
00d70     00 22 06 F6 | 	mov	result2, #0
00d74     10 49 02 F6 | 	mov	arg02, result1
00d78     00 4A 06 F6 | 	mov	arg03, #0
00d7c     00 4C 06 F6 | 	mov	arg04, #0
00d80     02 46 06 F6 | 	mov	arg01, #2
00d84     94 14 B0 FD | 	call	#__system___basic_open
00d88                 | ' print #2,"kwas"
00d88     02 46 06 F6 | 	mov	arg01, #2
00d8c     A8 22 B0 FD | 	call	#__system___getiolock_0101
00d90     10 47 02 F6 | 	mov	arg01, result1
00d94     0C 13 B0 FD | 	call	#__system___lockmem
00d98     00 20 06 F6 | 	mov	result1, #0
00d9c     1D 00 00 FF 
00da0     B5 49 06 F6 | 	mov	arg02, ##@LR__0243
00da4     02 46 06 F6 | 	mov	arg01, #2
00da8     00 4A 06 F6 | 	mov	arg03, #0
00dac     20 15 B0 FD | 	call	#__system___basic_print_string
00db0     02 46 06 F6 | 	mov	arg01, #2
00db4     0A 48 06 F6 | 	mov	arg02, #10
00db8     00 4A 06 F6 | 	mov	arg03, #0
00dbc     30 22 B0 FD | 	call	#__system___gettxfunc
00dc0     10 A7 0A F6 | 	mov	local45, result1 wz
00dc4     00 20 06 A6 |  if_e	mov	result1, #0
00dc8     20 00 90 AD |  if_e	jmp	#LR__0023
00dcc     53 A9 02 FB | 	rdlong	local46, local45
00dd0     04 A6 06 F1 | 	add	local45, #4
00dd4     53 AB 02 FB | 	rdlong	local47, local45
00dd8     0A 46 06 F6 | 	mov	arg01, #10
00ddc     06 AD 02 F6 | 	mov	local48, objptr
00de0     54 0D 02 F6 | 	mov	objptr, local46
00de4     2D AA 62 FD | 	call	local47
00de8     56 0D 02 F6 | 	mov	objptr, local48
00dec                 | LR__0023
00dec     01 20 06 F6 | 	mov	result1, #1
00df0     02 46 06 F6 | 	mov	arg01, #2
00df4     40 22 B0 FD | 	call	#__system___getiolock_0101
00df8     10 01 68 FC | 	wrlong	#0, result1
00dfc     00 20 06 F6 | 	mov	result1, #0
00e00     AF F0 03 F6 | 	mov	ptra, fp
00e04     BF 00 A0 FD | 	call	#popregs_
00e08                 | _program_ret
00e08     2D 00 64 FD | 	ret
00e0c                 | 
00e0c                 | ' 
00e0c                 | ' 
00e0c                 | ' ''---------- putpixel - put a pixel on the screen
00e0c                 | ' 
00e0c                 | ' pub putpixel1(x,y,c) |byte b
00e0c                 | _hng030rm_spin2_putpixel1
00e0c                 | ' 
00e0c                 | ' 
00e0c                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
00e0c     00 26 06 F6 | 	mov	_var01, #0
00e10     00 46 5E F2 | 	cmps	arg01, #0 wcz
00e14     01 26 66 36 |  if_ae	neg	_var01, #1
00e18     00 28 06 F6 | 	mov	_var02, #0
00e1c     90 0C 06 F1 | 	add	objptr, #144
00e20     06 2B 02 FB | 	rdlong	_var03, objptr
00e24     05 2A 66 F0 | 	shl	_var03, #5
00e28     15 47 5A F2 | 	cmps	arg01, _var03 wcz
00e2c     01 28 66 C6 |  if_b	neg	_var02, #1
00e30     14 27 02 F5 | 	and	_var01, _var02
00e34     00 2C 06 F6 | 	mov	_var04, #0
00e38     00 48 5E F2 | 	cmps	arg02, #0 wcz
00e3c     01 2C 66 36 |  if_ae	neg	_var04, #1
00e40     16 27 02 F5 | 	and	_var01, _var04
00e44     00 2E 06 F6 | 	mov	_var05, #0
00e48     04 0C 06 F1 | 	add	objptr, #4
00e4c     06 31 02 FB | 	rdlong	_var06, objptr
00e50     94 0C 86 F1 | 	sub	objptr, #148
00e54     18 49 5A F2 | 	cmps	arg02, _var06 wcz
00e58     01 2E 66 C6 |  if_b	neg	_var05, #1
00e5c     17 27 CA F7 | 	test	_var01, _var05 wz
00e60     8C 00 90 AD |  if_e	jmp	#LR__0026
00e64     90 0C 06 F1 | 	add	objptr, #144
00e68     06 33 02 FB | 	rdlong	_var07, objptr
00e6c     90 0C 86 F1 | 	sub	objptr, #144
00e70     02 32 66 F0 | 	shl	_var07, #2
00e74     24 33 02 FD | 	qmul	_var07, arg02
00e78     18 34 62 FD | 	getqx	_var08
00e7c     06 37 02 FB | 	rdlong	_var09, objptr
00e80     1A 37 02 F1 | 	add	_var09, _var08
00e84     23 39 02 F6 | 	mov	_var10, arg01
00e88     03 38 46 F0 | 	shr	_var10, #3
00e8c     1C 37 02 F1 | 	add	_var09, _var10
00e90                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
00e90     1B 3B C2 FA | 	rdbyte	_var11, _var09
00e94                 | '     if (c==0)
00e94     00 4A 0E F2 | 	cmp	arg03, #0 wz
00e98     18 00 90 5D |  if_ne	jmp	#LR__0024
00e9c     23 27 52 F6 | 	abs	_var01, arg01 wc
00ea0     07 26 06 F5 | 	and	_var01, #7
00ea4     13 27 62 C6 |  if_b	neg	_var01, _var01
00ea8     13 3D C2 F9 | 	decod	_var12, _var01
00eac                 | '       b:=b & !(1<<(x//8))
00eac     1E 3B 22 F5 | 	andn	_var11, _var12
00eb0                 | '     else
00eb0     14 00 90 FD | 	jmp	#LR__0025
00eb4                 | LR__0024
00eb4     23 27 52 F6 | 	abs	_var01, arg01 wc
00eb8     07 26 06 F5 | 	and	_var01, #7
00ebc     13 27 62 C6 |  if_b	neg	_var01, _var01
00ec0     13 3F C2 F9 | 	decod	_var13, _var01
00ec4                 | '       b:=b |(1<<(x//8))
00ec4     1F 3B 42 F5 | 	or	_var11, _var13
00ec8                 | LR__0025
00ec8     90 0C 06 F1 | 	add	objptr, #144
00ecc     06 41 02 FB | 	rdlong	_var14, objptr
00ed0     90 0C 86 F1 | 	sub	objptr, #144
00ed4     02 40 66 F0 | 	shl	_var14, #2
00ed8     24 41 02 FD | 	qmul	_var14, arg02
00edc     18 42 62 FD | 	getqx	_var15
00ee0     06 45 02 FB | 	rdlong	_var16, objptr
00ee4     21 45 02 F1 | 	add	_var16, _var15
00ee8     1C 45 02 F1 | 	add	_var16, _var10
00eec                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
00eec     22 3B 42 FC | 	wrbyte	_var11, _var16
00ef0                 | LR__0026
00ef0                 | _hng030rm_spin2_putpixel1_ret
00ef0     2D 00 64 FD | 	ret
00ef4                 | 
00ef4                 | ' 
00ef4                 | ' 
00ef4                 | ' pub putpixel2(x,y,c) |byte b
00ef4                 | _hng030rm_spin2_putpixel2
00ef4                 | ' 
00ef4                 | ' 
00ef4                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
00ef4     00 26 06 F6 | 	mov	_var01, #0
00ef8     00 46 5E F2 | 	cmps	arg01, #0 wcz
00efc     01 26 66 36 |  if_ae	neg	_var01, #1
00f00     00 28 06 F6 | 	mov	_var02, #0
00f04     90 0C 06 F1 | 	add	objptr, #144
00f08     06 2B 02 FB | 	rdlong	_var03, objptr
00f0c     04 2A 66 F0 | 	shl	_var03, #4
00f10     15 47 5A F2 | 	cmps	arg01, _var03 wcz
00f14     01 28 66 C6 |  if_b	neg	_var02, #1
00f18     14 27 02 F5 | 	and	_var01, _var02
00f1c     00 2C 06 F6 | 	mov	_var04, #0
00f20     00 48 5E F2 | 	cmps	arg02, #0 wcz
00f24     01 2C 66 36 |  if_ae	neg	_var04, #1
00f28     16 27 02 F5 | 	and	_var01, _var04
00f2c     00 2E 06 F6 | 	mov	_var05, #0
00f30     04 0C 06 F1 | 	add	objptr, #4
00f34     06 31 02 FB | 	rdlong	_var06, objptr
00f38     94 0C 86 F1 | 	sub	objptr, #148
00f3c     18 49 5A F2 | 	cmps	arg02, _var06 wcz
00f40     01 2E 66 C6 |  if_b	neg	_var05, #1
00f44     17 27 CA F7 | 	test	_var01, _var05 wz
00f48     7C 00 90 AD |  if_e	jmp	#LR__0027
00f4c     90 0C 06 F1 | 	add	objptr, #144
00f50     06 33 02 FB | 	rdlong	_var07, objptr
00f54     90 0C 86 F1 | 	sub	objptr, #144
00f58     02 32 66 F0 | 	shl	_var07, #2
00f5c     24 33 02 FD | 	qmul	_var07, arg02
00f60     18 34 62 FD | 	getqx	_var08
00f64     06 37 02 FB | 	rdlong	_var09, objptr
00f68     1A 37 02 F1 | 	add	_var09, _var08
00f6c     23 39 02 F6 | 	mov	_var10, arg01
00f70     02 38 46 F0 | 	shr	_var10, #2
00f74     1C 37 02 F1 | 	add	_var09, _var10
00f78                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
00f78     1B 3B C2 FA | 	rdbyte	_var11, _var09
00f7c     23 27 52 F6 | 	abs	_var01, arg01 wc
00f80     03 26 06 F5 | 	and	_var01, #3
00f84     13 27 62 C6 |  if_b	neg	_var01, _var01
00f88     01 26 66 F0 | 	shl	_var01, #1
00f8c     03 3C 06 F6 | 	mov	_var12, #3
00f90     13 3D 62 F0 | 	shl	_var12, _var01
00f94                 | '     b:=b & !(%11<<((x//4)<<1))
00f94     1E 3B 22 F5 | 	andn	_var11, _var12
00f98     13 4B 62 F0 | 	shl	arg03, _var01
00f9c                 | '     b:=b |(c<<((x//4)<<1))
00f9c     25 3B 42 F5 | 	or	_var11, arg03
00fa0     90 0C 06 F1 | 	add	objptr, #144
00fa4     06 3F 02 FB | 	rdlong	_var13, objptr
00fa8     90 0C 86 F1 | 	sub	objptr, #144
00fac     02 3E 66 F0 | 	shl	_var13, #2
00fb0     24 3F 02 FD | 	qmul	_var13, arg02
00fb4     18 40 62 FD | 	getqx	_var14
00fb8     06 43 02 FB | 	rdlong	_var15, objptr
00fbc     20 43 02 F1 | 	add	_var15, _var14
00fc0     1C 43 02 F1 | 	add	_var15, _var10
00fc4                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
00fc4     21 3B 42 FC | 	wrbyte	_var11, _var15
00fc8                 | LR__0027
00fc8                 | _hng030rm_spin2_putpixel2_ret
00fc8     2D 00 64 FD | 	ret
00fcc                 | 
00fcc                 | ' 
00fcc                 | ' 
00fcc                 | ' pub putpixel4(x,y,c) |byte b
00fcc                 | _hng030rm_spin2_putpixel4
00fcc                 | ' 
00fcc                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
00fcc     00 26 06 F6 | 	mov	_var01, #0
00fd0     00 46 5E F2 | 	cmps	arg01, #0 wcz
00fd4     01 26 66 36 |  if_ae	neg	_var01, #1
00fd8     00 28 06 F6 | 	mov	_var02, #0
00fdc     90 0C 06 F1 | 	add	objptr, #144
00fe0     06 2B 02 FB | 	rdlong	_var03, objptr
00fe4     04 2A 66 F0 | 	shl	_var03, #4
00fe8     15 47 5A F2 | 	cmps	arg01, _var03 wcz
00fec     01 28 66 C6 |  if_b	neg	_var02, #1
00ff0     14 27 02 F5 | 	and	_var01, _var02
00ff4     00 2C 06 F6 | 	mov	_var04, #0
00ff8     00 48 5E F2 | 	cmps	arg02, #0 wcz
00ffc     01 2C 66 36 |  if_ae	neg	_var04, #1
01000     16 27 02 F5 | 	and	_var01, _var04
01004     00 2E 06 F6 | 	mov	_var05, #0
01008     04 0C 06 F1 | 	add	objptr, #4
0100c     06 31 02 FB | 	rdlong	_var06, objptr
01010     94 0C 86 F1 | 	sub	objptr, #148
01014     18 49 5A F2 | 	cmps	arg02, _var06 wcz
01018     01 2E 66 C6 |  if_b	neg	_var05, #1
0101c     17 27 CA F7 | 	test	_var01, _var05 wz
01020     7C 00 90 AD |  if_e	jmp	#LR__0028
01024     90 0C 06 F1 | 	add	objptr, #144
01028     06 33 02 FB | 	rdlong	_var07, objptr
0102c     90 0C 86 F1 | 	sub	objptr, #144
01030     02 32 66 F0 | 	shl	_var07, #2
01034     24 33 02 FD | 	qmul	_var07, arg02
01038     18 34 62 FD | 	getqx	_var08
0103c     06 37 02 FB | 	rdlong	_var09, objptr
01040     1A 37 02 F1 | 	add	_var09, _var08
01044     23 39 02 F6 | 	mov	_var10, arg01
01048     01 38 46 F0 | 	shr	_var10, #1
0104c     1C 37 02 F1 | 	add	_var09, _var10
01050                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
01050     1B 3B C2 FA | 	rdbyte	_var11, _var09
01054     23 27 52 F6 | 	abs	_var01, arg01 wc
01058     01 26 06 F5 | 	and	_var01, #1
0105c     13 27 62 C6 |  if_b	neg	_var01, _var01
01060     02 26 66 F0 | 	shl	_var01, #2
01064     0F 3C 06 F6 | 	mov	_var12, #15
01068     13 3D 62 F0 | 	shl	_var12, _var01
0106c                 | '     b:=b & !(%1111<<((x//2)<<2))
0106c     1E 3B 22 F5 | 	andn	_var11, _var12
01070     13 4B 62 F0 | 	shl	arg03, _var01
01074                 | '     b:=b |(c<<((x//2)<<2))
01074     25 3B 42 F5 | 	or	_var11, arg03
01078     90 0C 06 F1 | 	add	objptr, #144
0107c     06 3F 02 FB | 	rdlong	_var13, objptr
01080     90 0C 86 F1 | 	sub	objptr, #144
01084     02 3E 66 F0 | 	shl	_var13, #2
01088     24 3F 02 FD | 	qmul	_var13, arg02
0108c     18 40 62 FD | 	getqx	_var14
01090     06 43 02 FB | 	rdlong	_var15, objptr
01094     20 43 02 F1 | 	add	_var15, _var14
01098     1C 43 02 F1 | 	add	_var15, _var10
0109c                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
0109c     21 3B 42 FC | 	wrbyte	_var11, _var15
010a0                 | LR__0028
010a0                 | _hng030rm_spin2_putpixel4_ret
010a0     2D 00 64 FD | 	ret
010a4                 | 
010a4                 | ' 
010a4                 | ' 
010a4                 | ' pub putpixel8(x,y,c)
010a4                 | _hng030rm_spin2_putpixel8
010a4                 | ' 
010a4                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
010a4     00 26 06 F6 | 	mov	_var01, #0
010a8     00 46 5E F2 | 	cmps	arg01, #0 wcz
010ac     01 26 66 36 |  if_ae	neg	_var01, #1
010b0     00 28 06 F6 | 	mov	_var02, #0
010b4     90 0C 06 F1 | 	add	objptr, #144
010b8     06 2B 02 FB | 	rdlong	_var03, objptr
010bc     02 2A 66 F0 | 	shl	_var03, #2
010c0     15 47 5A F2 | 	cmps	arg01, _var03 wcz
010c4     01 28 66 C6 |  if_b	neg	_var02, #1
010c8     14 27 02 F5 | 	and	_var01, _var02
010cc     00 2C 06 F6 | 	mov	_var04, #0
010d0     00 48 5E F2 | 	cmps	arg02, #0 wcz
010d4     01 2C 66 36 |  if_ae	neg	_var04, #1
010d8     16 27 02 F5 | 	and	_var01, _var04
010dc     00 2E 06 F6 | 	mov	_var05, #0
010e0     04 0C 06 F1 | 	add	objptr, #4
010e4     06 31 02 FB | 	rdlong	_var06, objptr
010e8     94 0C 86 F1 | 	sub	objptr, #148
010ec     18 49 5A F2 | 	cmps	arg02, _var06 wcz
010f0     01 2E 66 C6 |  if_b	neg	_var05, #1
010f4     17 27 CA F7 | 	test	_var01, _var05 wz
010f8     28 00 90 AD |  if_e	jmp	#LR__0029
010fc     90 0C 06 F1 | 	add	objptr, #144
01100     06 33 02 FB | 	rdlong	_var07, objptr
01104     90 0C 86 F1 | 	sub	objptr, #144
01108     02 32 66 F0 | 	shl	_var07, #2
0110c     24 33 02 FD | 	qmul	_var07, arg02
01110     18 34 62 FD | 	getqx	_var08
01114     06 37 02 FB | 	rdlong	_var09, objptr
01118     1A 37 02 F1 | 	add	_var09, _var08
0111c     23 37 02 F1 | 	add	_var09, arg01
01120                 | '     byte[buf_ptr+4*cpl*y+x]:=c
01120     1B 4B 42 FC | 	wrbyte	arg03, _var09
01124                 | LR__0029
01124                 | _hng030rm_spin2_putpixel8_ret
01124     2D 00 64 FD | 	ret
01128                 | 
01128                 | ' 
01128                 | ' ''---------- Output a char at the cursor position, move the cursor
01128                 | ' 
01128                 | ' pub putchar(achar) | c,x,y
01128                 | _hng030rm_spin2_putchar
01128     12 5A 05 F6 | 	mov	COUNT_, #18
0112c     B0 00 A0 FD | 	call	#pushregs_
01130     23 4F 02 F6 | 	mov	local01, arg01
01134                 | ' 
01134                 | ' if achar==10
01134     0A 4E 0E F2 | 	cmp	local01, #10 wz
01138     58 00 90 5D |  if_ne	jmp	#LR__0030
0113c                 | '   crlf()
0113c                 | ' 
0113c                 | ' cursor_x:=0
0113c     34 0C 06 F1 | 	add	objptr, #52
01140     06 01 48 FC | 	wrbyte	#0, objptr
01144                 | ' cursor_y+=1
01144     01 0C 06 F1 | 	add	objptr, #1
01148     06 51 C2 FA | 	rdbyte	local02, objptr
0114c     01 50 06 F1 | 	add	local02, #1
01150     06 51 42 FC | 	wrbyte	local02, objptr
01154                 | ' if cursor_y>lines-1
01154     5F 0C 06 F1 | 	add	objptr, #95
01158     06 51 02 FB | 	rdlong	local02, objptr
0115c     01 50 86 F1 | 	sub	local02, #1
01160     5F 0C 86 F1 | 	sub	objptr, #95
01164     06 53 C2 FA | 	rdbyte	local03, objptr
01168     35 0C 86 F1 | 	sub	objptr, #53
0116c     28 53 5A F2 | 	cmps	local03, local02 wcz
01170     38 01 90 ED |  if_be	jmp	#LR__0033
01174                 | '   scrollup()
01174     40 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
01178     94 0C 06 F1 | 	add	objptr, #148
0117c     06 55 02 FB | 	rdlong	local04, objptr
01180     01 54 86 F1 | 	sub	local04, #1
01184                 | '   cursor_y:=lines-1
01184     5F 0C 86 F1 | 	sub	objptr, #95
01188     06 55 42 FC | 	wrbyte	local04, objptr
0118c     35 0C 86 F1 | 	sub	objptr, #53
01190                 | ' else  
01190     18 01 90 FD | 	jmp	#LR__0033
01194                 | LR__0030
01194                 | '   x:=cursor_x
01194     34 0C 06 F1 | 	add	objptr, #52
01198     06 57 C2 FA | 	rdbyte	local05, objptr
0119c                 | '   y:=cursor_y
0119c     01 0C 06 F1 | 	add	objptr, #1
011a0     06 59 C2 FA | 	rdbyte	local06, objptr
011a4     03 0C 06 F1 | 	add	objptr, #3
011a8     06 5B 02 FB | 	rdlong	local07, objptr
011ac     18 5A 66 F0 | 	shl	local07, #24
011b0     04 0C 06 F1 | 	add	objptr, #4
011b4     06 5D 02 FB | 	rdlong	local08, objptr
011b8     10 5C 66 F0 | 	shl	local08, #16
011bc     2E 5B 02 F1 | 	add	local07, local08
011c0                 | '   c:=write_color<<24+write_background<<16
011c0     54 0C 06 F1 | 	add	objptr, #84
011c4     06 5F 02 FB | 	rdlong	local09, objptr
011c8     90 0C 86 F1 | 	sub	objptr, #144
011cc     2C 5F 02 FD | 	qmul	local09, local06
011d0     18 60 62 FD | 	getqx	local10
011d4     2B 61 02 F1 | 	add	local10, local05
011d8     02 60 66 F0 | 	shl	local10, #2
011dc     06 63 02 FB | 	rdlong	local11, objptr
011e0     30 63 02 F1 | 	add	local11, local10
011e4     31 65 02 FB | 	rdlong	local12, local11
011e8     7F 00 00 FF 
011ec     FF 65 06 F5 | 	and	local12, ##65535
011f0     2D 65 42 F5 | 	or	local12, local07
011f4                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
011f4     31 65 62 FC | 	wrlong	local12, local11
011f8     90 0C 06 F1 | 	add	objptr, #144
011fc     06 5F 02 FB | 	rdlong	local09, objptr
01200     90 0C 86 F1 | 	sub	objptr, #144
01204     2C 5F 02 FD | 	qmul	local09, local06
01208     18 66 62 FD | 	getqx	local13
0120c     2B 67 02 F1 | 	add	local13, local05
01210     02 66 66 F0 | 	shl	local13, #2
01214     06 69 02 FB | 	rdlong	local14, objptr
01218     33 69 02 F1 | 	add	local14, local13
0121c     34 6B 02 FB | 	rdlong	local15, local14
01220     FF 6A 26 F5 | 	andn	local15, #255
01224     FF 4E 06 F5 | 	and	local01, #255
01228     27 6B 42 F5 | 	or	local15, local01
0122c                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
0122c     34 6B 62 FC | 	wrlong	local15, local14
01230                 | '   cursor_x+=1
01230     34 0C 06 F1 | 	add	objptr, #52
01234     06 6D C2 FA | 	rdbyte	local16, objptr
01238     01 6C 06 F1 | 	add	local16, #1
0123c     06 6D 42 FC | 	wrbyte	local16, objptr
01240                 | '   if cursor_x==cpl
01240     06 6D C2 FA | 	rdbyte	local16, objptr
01244     5C 0C 06 F1 | 	add	objptr, #92
01248     06 6F 02 FB | 	rdlong	local17, objptr
0124c     90 0C 86 F1 | 	sub	objptr, #144
01250     37 6D 0A F2 | 	cmp	local16, local17 wz
01254     54 00 90 5D |  if_ne	jmp	#LR__0032
01258                 | '     cursor_x:=0
01258     34 0C 06 F1 | 	add	objptr, #52
0125c     06 01 48 FC | 	wrbyte	#0, objptr
01260                 | '     cursor_y+=1
01260     01 0C 06 F1 | 	add	objptr, #1
01264     06 6D C2 FA | 	rdbyte	local16, objptr
01268     01 6C 06 F1 | 	add	local16, #1
0126c     06 6D 42 FC | 	wrbyte	local16, objptr
01270                 | '     if cursor_y>lines-1
01270     5F 0C 06 F1 | 	add	objptr, #95
01274     06 6D 02 FB | 	rdlong	local16, objptr
01278     01 6C 86 F1 | 	sub	local16, #1
0127c     5F 0C 86 F1 | 	sub	objptr, #95
01280     06 6F C2 FA | 	rdbyte	local17, objptr
01284     35 0C 86 F1 | 	sub	objptr, #53
01288     36 6F 5A F2 | 	cmps	local17, local16 wcz
0128c     1C 00 90 ED |  if_be	jmp	#LR__0031
01290                 | '       scrollup()
01290     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
01294     94 0C 06 F1 | 	add	objptr, #148
01298     06 71 02 FB | 	rdlong	local18, objptr
0129c     01 70 86 F1 | 	sub	local18, #1
012a0                 | '       cursor_y:=lines-1
012a0     5F 0C 86 F1 | 	sub	objptr, #95
012a4     06 71 42 FC | 	wrbyte	local18, objptr
012a8     35 0C 86 F1 | 	sub	objptr, #53
012ac                 | LR__0031
012ac                 | LR__0032
012ac                 | LR__0033
012ac     AF F0 03 F6 | 	mov	ptra, fp
012b0     BF 00 A0 FD | 	call	#popregs_
012b4                 | _hng030rm_spin2_putchar_ret
012b4     2D 00 64 FD | 	ret
012b8                 | 
012b8                 | ' 
012b8                 | ' ''-----------  Scroll the screen one line up
012b8                 | ' 
012b8                 | ' pub scrollup() | i
012b8                 | _hng030rm_spin2_scrollup
012b8     0A 5A 05 F6 | 	mov	COUNT_, #10
012bc     B0 00 A0 FD | 	call	#pushregs_
012c0     90 0C 06 F1 | 	add	objptr, #144
012c4     06 4F 02 FB | 	rdlong	local01, objptr
012c8     90 0C 86 F1 | 	sub	objptr, #144
012cc     02 4E 66 F0 | 	shl	local01, #2
012d0     06 49 02 FB | 	rdlong	arg02, objptr
012d4     27 49 02 F1 | 	add	arg02, local01
012d8     30 0C 06 F1 | 	add	objptr, #48
012dc     06 4B 02 FB | 	rdlong	arg03, objptr
012e0     60 0C 06 F1 | 	add	objptr, #96
012e4     06 51 02 FB | 	rdlong	local02, objptr
012e8     90 0C 86 F1 | 	sub	objptr, #144
012ec     28 4B 82 F1 | 	sub	arg03, local02
012f0                 | ' 
012f0                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
012f0     06 47 02 FB | 	rdlong	arg01, objptr
012f4     D4 0C B0 FD | 	call	#__system__longmove
012f8                 | ' repeat i from buflen-cpl to buflen-1
012f8     30 0C 06 F1 | 	add	objptr, #48
012fc     06 53 02 FB | 	rdlong	local03, objptr
01300     60 0C 06 F1 | 	add	objptr, #96
01304     06 51 02 FB | 	rdlong	local02, objptr
01308     28 53 82 F1 | 	sub	local03, local02
0130c     60 0C 86 F1 | 	sub	objptr, #96
01310     06 55 02 FB | 	rdlong	local04, objptr
01314     01 54 86 F1 | 	sub	local04, #1
01318     06 57 02 FB | 	rdlong	local05, objptr
0131c     60 0C 06 F1 | 	add	objptr, #96
01320     06 59 02 FB | 	rdlong	local06, objptr
01324     90 0C 86 F1 | 	sub	objptr, #144
01328     2C 57 82 F1 | 	sub	local05, local06
0132c     2B 55 5A F2 | 	cmps	local04, local05 wcz
01330     01 5A 06 16 |  if_a	mov	local07, #1
01334     01 5A 66 E6 |  if_be	neg	local07, #1
01338     2D 55 02 F1 | 	add	local04, local07
0133c     F0 EC 9F FE | 	loc	pa,	#(@LR__0035-@LR__0034)
01340     93 00 A0 FD | 	call	#FCACHE_LOAD_
01344                 | LR__0034
01344     29 5D 02 F6 | 	mov	local08, local03
01348     02 5C 66 F0 | 	shl	local08, #2
0134c     06 5F 02 FB | 	rdlong	local09, objptr
01350     2E 5F 02 F1 | 	add	local09, local08
01354     2F 61 02 FB | 	rdlong	local10, local09
01358     80 FF 7F FF 
0135c     00 60 06 F5 | 	and	local10, ##-65536
01360     20 60 46 F5 | 	or	local10, #32
01364                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
01364     2F 61 62 FC | 	wrlong	local10, local09
01368     2D 53 02 F1 | 	add	local03, local07
0136c     2A 53 0A F2 | 	cmp	local03, local04 wz
01370     D0 FF 9F 5D |  if_ne	jmp	#LR__0034
01374                 | LR__0035
01374     AF F0 03 F6 | 	mov	ptra, fp
01378     BF 00 A0 FD | 	call	#popregs_
0137c                 | _hng030rm_spin2_scrollup_ret
0137c     2D 00 64 FD | 	ret
01380                 | 
01380                 | ' 
01380                 | ' 
01380                 | ' 
01380                 | ' '*************************************************************************
01380                 | ' '                                                                        *
01380                 | ' '  Mode setting and driver start                                                          *
01380                 | ' '                                                                        *
01380                 | ' '*************************************************************************
01380                 | ' 
01380                 | ' ''---------  Set the graphics mode
01380                 | ' 
01380                 | ' 
01380                 | ' 
01380                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
01380                 | _hng030rm_spin2_setmode
01380     50 5A 05 F6 | 	mov	COUNT_, #80
01384     B0 00 A0 FD | 	call	#pushregs_
01388     23 4F 02 F6 | 	mov	local01, arg01
0138c                 | ' 
0138c                 | ' '' mode:tn_bb_cc_vv_hh
0138c                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
0138c                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
0138c                 | ' 
0138c                 | ' if mode==(512+192+48)
0138c     01 00 00 FF 
01390     F0 4E 0E F2 | 	cmp	local01, ##752 wz
01394                 | '   return 'no RAM
01394     1C 0A 90 AD |  if_e	jmp	#LR__0076
01398                 | ' 
01398                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
01398     27 51 02 F6 | 	mov	local02, local01
0139c     06 50 46 F0 | 	shr	local02, #6
013a0     07 50 06 F5 | 	and	local02, #7
013a4     08 50 26 F3 | 	fle	local02, #8
013a8     28 53 02 F6 | 	mov	local03, local02
013ac     30 52 62 FD | 	jmprel	local03
013b0                 | LR__0036
013b0     20 00 90 FD | 	jmp	#LR__0037
013b4     58 00 90 FD | 	jmp	#LR__0038
013b8     90 00 90 FD | 	jmp	#LR__0039
013bc     C8 00 90 FD | 	jmp	#LR__0040
013c0     00 01 90 FD | 	jmp	#LR__0041
013c4     38 01 90 FD | 	jmp	#LR__0042
013c8     70 01 90 FD | 	jmp	#LR__0043
013cc     A8 01 90 FD | 	jmp	#LR__0044
013d0     E4 01 90 FD | 	jmp	#LR__0045
013d4                 | LR__0037
013d4                 | ' 
013d4                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
013d4     50 0C 06 F1 | 	add	objptr, #80
013d8     06 47 02 F6 | 	mov	arg01, objptr
013dc     50 0C 86 F1 | 	sub	objptr, #80
013e0     0E 00 00 FF 
013e4     58 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
013e8     0A 55 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
013ec     2A 57 02 F6 | 	mov	local05, local04
013f0     10 58 06 F6 | 	mov	local06, #16
013f4     2B 49 02 F6 | 	mov	arg02, local05
013f8     10 4A 06 F6 | 	mov	arg03, #16
013fc     0E 00 00 FF 
01400     58 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
01404     C4 0B B0 FD | 	call	#__system__longmove
01408     10 5B 02 F6 | 	mov	local07, result1
0140c     A8 01 90 FD | 	jmp	#LR__0045
01410                 | LR__0038
01410                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
01410     50 0C 06 F1 | 	add	objptr, #80
01414     06 47 02 F6 | 	mov	arg01, objptr
01418     50 0C 86 F1 | 	sub	objptr, #80
0141c     0E 00 00 FF 
01420     98 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
01424     0A 55 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01428     2A 57 02 F6 | 	mov	local05, local04
0142c     10 58 06 F6 | 	mov	local06, #16
01430     2B 49 02 F6 | 	mov	arg02, local05
01434     10 4A 06 F6 | 	mov	arg03, #16
01438     0E 00 00 FF 
0143c     98 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
01440     88 0B B0 FD | 	call	#__system__longmove
01444     10 5B 02 F6 | 	mov	local07, result1
01448     6C 01 90 FD | 	jmp	#LR__0045
0144c                 | LR__0039
0144c                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
0144c     50 0C 06 F1 | 	add	objptr, #80
01450     06 47 02 F6 | 	mov	arg01, objptr
01454     50 0C 86 F1 | 	sub	objptr, #80
01458     0E 00 00 FF 
0145c     D8 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
01460     0A 55 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01464     2A 57 02 F6 | 	mov	local05, local04
01468     10 58 06 F6 | 	mov	local06, #16
0146c     2B 49 02 F6 | 	mov	arg02, local05
01470     10 4A 06 F6 | 	mov	arg03, #16
01474     0E 00 00 FF 
01478     D8 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
0147c     4C 0B B0 FD | 	call	#__system__longmove
01480     10 5B 02 F6 | 	mov	local07, result1
01484     30 01 90 FD | 	jmp	#LR__0045
01488                 | LR__0040
01488                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
01488     50 0C 06 F1 | 	add	objptr, #80
0148c     06 47 02 F6 | 	mov	arg01, objptr
01490     50 0C 86 F1 | 	sub	objptr, #80
01494     0E 00 00 FF 
01498     18 15 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
0149c     0A 55 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
014a0     2A 57 02 F6 | 	mov	local05, local04
014a4     10 58 06 F6 | 	mov	local06, #16
014a8     2B 49 02 F6 | 	mov	arg02, local05
014ac     10 4A 06 F6 | 	mov	arg03, #16
014b0     0E 00 00 FF 
014b4     18 15 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
014b8     10 0B B0 FD | 	call	#__system__longmove
014bc     10 5B 02 F6 | 	mov	local07, result1
014c0     F4 00 90 FD | 	jmp	#LR__0045
014c4                 | LR__0041
014c4                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
014c4     50 0C 06 F1 | 	add	objptr, #80
014c8     06 47 02 F6 | 	mov	arg01, objptr
014cc     50 0C 86 F1 | 	sub	objptr, #80
014d0     0E 00 00 FF 
014d4     58 15 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
014d8     0A 55 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
014dc     2A 57 02 F6 | 	mov	local05, local04
014e0     10 58 06 F6 | 	mov	local06, #16
014e4     2B 49 02 F6 | 	mov	arg02, local05
014e8     10 4A 06 F6 | 	mov	arg03, #16
014ec     0E 00 00 FF 
014f0     58 15 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
014f4     D4 0A B0 FD | 	call	#__system__longmove
014f8     10 5B 02 F6 | 	mov	local07, result1
014fc     B8 00 90 FD | 	jmp	#LR__0045
01500                 | LR__0042
01500                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
01500     50 0C 06 F1 | 	add	objptr, #80
01504     06 47 02 F6 | 	mov	arg01, objptr
01508     50 0C 86 F1 | 	sub	objptr, #80
0150c     0E 00 00 FF 
01510     98 15 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
01514     0A 55 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01518     2A 57 02 F6 | 	mov	local05, local04
0151c     10 58 06 F6 | 	mov	local06, #16
01520     2B 49 02 F6 | 	mov	arg02, local05
01524     10 4A 06 F6 | 	mov	arg03, #16
01528     0E 00 00 FF 
0152c     98 15 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
01530     98 0A B0 FD | 	call	#__system__longmove
01534     10 5B 02 F6 | 	mov	local07, result1
01538     7C 00 90 FD | 	jmp	#LR__0045
0153c                 | LR__0043
0153c                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
0153c     50 0C 06 F1 | 	add	objptr, #80
01540     06 47 02 F6 | 	mov	arg01, objptr
01544     50 0C 86 F1 | 	sub	objptr, #80
01548     0E 00 00 FF 
0154c     D8 15 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
01550     0A 55 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01554     2A 57 02 F6 | 	mov	local05, local04
01558     10 58 06 F6 | 	mov	local06, #16
0155c     2B 49 02 F6 | 	mov	arg02, local05
01560     10 4A 06 F6 | 	mov	arg03, #16
01564     0E 00 00 FF 
01568     D8 15 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
0156c     5C 0A B0 FD | 	call	#__system__longmove
01570     10 5B 02 F6 | 	mov	local07, result1
01574     40 00 90 FD | 	jmp	#LR__0045
01578                 | LR__0044
01578                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
01578     50 0C 06 F1 | 	add	objptr, #80
0157c     06 5D 02 F6 | 	mov	local08, objptr
01580     2E 5F 02 F6 | 	mov	local09, local08
01584     0F 00 00 FF 
01588     18 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
0158c     0A 55 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01590     2A 57 02 F6 | 	mov	local05, local04
01594     10 58 06 F6 | 	mov	local06, #16
01598     2F 47 02 F6 | 	mov	arg01, local09
0159c     2B 49 02 F6 | 	mov	arg02, local05
015a0     10 4A 06 F6 | 	mov	arg03, #16
015a4     50 0C 86 F1 | 	sub	objptr, #80
015a8     0F 00 00 FF 
015ac     18 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
015b0     18 0A B0 FD | 	call	#__system__longmove
015b4     10 5B 02 F6 | 	mov	local07, result1
015b8                 | LR__0045
015b8                 | ' 
015b8                 | ' ' 4-bit graphics: do nothing with timings :)
015b8                 | ' if mode<512
015b8     01 00 00 FF 
015bc     00 4E 5E F2 | 	cmps	local01, ##512 wcz
015c0     20 00 90 3D |  if_ae	jmp	#LR__0046
015c4     0C 00 00 FF 
015c8     58 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
015cc     0A 61 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
015d0                 | '   palette_ptr:=@ataripalette
015d0     18 0C 06 F1 | 	add	objptr, #24
015d4     06 61 62 FC | 	wrlong	local10, objptr
015d8     18 0C 86 F1 | 	sub	objptr, #24
015dc     0C 00 00 FF 
015e0     58 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
015e4                 | LR__0046
015e4                 | ' 
015e4                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
015e4     27 51 02 F6 | 	mov	local02, local01
015e8     01 00 00 FF 
015ec     30 50 06 F5 | 	and	local02, ##560
015f0     01 00 00 FF 
015f4     30 50 0E F2 | 	cmp	local02, ##560 wz
015f8     48 00 90 5D |  if_ne	jmp	#LR__0047
015fc                 | '   timings[5]:=4
015fc     64 0C 06 F1 | 	add	objptr, #100
01600     06 09 68 FC | 	wrlong	#4, objptr
01604     18 0C 06 F1 | 	add	objptr, #24
01608     06 63 02 FB | 	rdlong	local11, objptr
0160c     01 62 66 F0 | 	shl	local11, #1
01610                 | '   timings[11]:=timings[11]<<1
01610     06 63 62 FC | 	wrlong	local11, objptr
01614                 | '   putpixel:=p8
01614     6C 0C 06 F1 | 	add	objptr, #108
01618     06 51 02 FB | 	rdlong	local02, objptr
0161c     10 0C 86 F1 | 	sub	objptr, #16
01620     06 51 62 FC | 	wrlong	local02, objptr
01624     0C 00 00 FF 
01628     58 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
0162c     0A 65 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
01630                 | '   palette_ptr:=@ataripalette
01630     C0 0C 86 F1 | 	sub	objptr, #192
01634     06 65 62 FC | 	wrlong	local12, objptr
01638     18 0C 86 F1 | 	sub	objptr, #24
0163c     0C 00 00 FF 
01640     58 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
01644                 | LR__0047
01644                 | ' 
01644                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
01644     27 51 02 F6 | 	mov	local02, local01
01648     01 00 00 FF 
0164c     30 50 06 F5 | 	and	local02, ##560
01650     01 00 00 FF 
01654     10 50 0E F2 | 	cmp	local02, ##528 wz
01658     48 00 90 5D |  if_ne	jmp	#LR__0048
0165c                 | '   timings[5]:=16
0165c     64 0C 06 F1 | 	add	objptr, #100
01660     06 21 68 FC | 	wrlong	#16, objptr
01664     18 0C 06 F1 | 	add	objptr, #24
01668     06 67 02 FB | 	rdlong	local13, objptr
0166c     01 66 46 F0 | 	shr	local13, #1
01670                 | '   timings[11]:=timings[11]>>1
01670     06 67 62 FC | 	wrlong	local13, objptr
01674                 | '   putpixel:=p2
01674     64 0C 06 F1 | 	add	objptr, #100
01678     06 51 02 FB | 	rdlong	local02, objptr
0167c     08 0C 86 F1 | 	sub	objptr, #8
01680     06 51 62 FC | 	wrlong	local02, objptr
01684     0C 00 00 FF 
01688     08 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
0168c     0A 69 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
01690                 | '   palette_ptr:=@fourcolors
01690     C0 0C 86 F1 | 	sub	objptr, #192
01694     06 69 62 FC | 	wrlong	local14, objptr
01698     18 0C 86 F1 | 	sub	objptr, #24
0169c     0C 00 00 FF 
016a0     08 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
016a4                 | LR__0048
016a4                 | ' 
016a4                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
016a4     27 51 02 F6 | 	mov	local02, local01
016a8     01 00 00 FF 
016ac     30 50 06 F5 | 	and	local02, ##560
016b0     01 00 00 FF 
016b4     00 50 0E F2 | 	cmp	local02, ##512 wz
016b8     48 00 90 5D |  if_ne	jmp	#LR__0049
016bc                 | '   timings[5]:=32
016bc     64 0C 06 F1 | 	add	objptr, #100
016c0     06 41 68 FC | 	wrlong	#32, objptr
016c4     18 0C 06 F1 | 	add	objptr, #24
016c8     06 6B 02 FB | 	rdlong	local15, objptr
016cc     02 6A 46 F0 | 	shr	local15, #2
016d0                 | '   timings[11]:=timings[11]>>2
016d0     06 6B 62 FC | 	wrlong	local15, objptr
016d4                 | '   putpixel:=p1
016d4     60 0C 06 F1 | 	add	objptr, #96
016d8     06 51 02 FB | 	rdlong	local02, objptr
016dc     04 0C 86 F1 | 	sub	objptr, #4
016e0     06 51 62 FC | 	wrlong	local02, objptr
016e4     0C 00 00 FF 
016e8     00 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
016ec     0A 6D 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
016f0                 | '   palette_ptr:=@twocolors
016f0     C0 0C 86 F1 | 	sub	objptr, #192
016f4     06 6D 62 FC | 	wrlong	local16, objptr
016f8     18 0C 86 F1 | 	sub	objptr, #24
016fc     0C 00 00 FF 
01700     00 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
01704                 | LR__0049
01704                 | ' 
01704                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
01704     27 51 02 F6 | 	mov	local02, local01
01708     01 00 00 FF 
0170c     30 50 06 F5 | 	and	local02, ##560
01710     01 00 00 FF 
01714     20 50 0E F2 | 	cmp	local02, ##544 wz
01718     30 00 90 5D |  if_ne	jmp	#LR__0050
0171c                 | '   putpixel:=p4
0171c     E4 0C 06 F1 | 	add	objptr, #228
01720     06 51 02 FB | 	rdlong	local02, objptr
01724     0C 0C 86 F1 | 	sub	objptr, #12
01728     06 51 62 FC | 	wrlong	local02, objptr
0172c     0C 00 00 FF 
01730     18 14 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
01734     0A 6F 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
01738                 | '   palette_ptr:=@vga16
01738     C0 0C 86 F1 | 	sub	objptr, #192
0173c     06 6F 62 FC | 	wrlong	local17, objptr
01740     18 0C 86 F1 | 	sub	objptr, #24
01744     0C 00 00 FF 
01748     18 14 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
0174c                 | LR__0050
0174c                 | ' 
0174c                 | ' repeat i from 0 to 4
0174c     00 70 06 F6 | 	mov	local18, #0
01750     F0 E8 9F FE | 	loc	pa,	#(@LR__0052-@LR__0051)
01754     93 00 A0 FD | 	call	#FCACHE_LOAD_
01758                 | LR__0051
01758     38 73 02 F6 | 	mov	local19, local18
0175c     02 72 66 F0 | 	shl	local19, #2
01760     50 0C 06 F1 | 	add	objptr, #80
01764     06 73 02 F1 | 	add	local19, objptr
01768     2C 0C 86 F1 | 	sub	objptr, #44
0176c     06 75 02 FB | 	rdlong	local20, objptr
01770     24 0C 86 F1 | 	sub	objptr, #36
01774     11 74 66 F0 | 	shl	local20, #17
01778     39 77 02 FB | 	rdlong	local21, local19
0177c     3A 77 02 F1 | 	add	local21, local20
01780     3B 79 02 F6 | 	mov	local22, local21
01784     80 40 38 FF 
01788     00 78 06 F1 | 	add	local22, ##1887502336
0178c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
0178c     39 79 62 FC | 	wrlong	local22, local19
01790     01 70 06 F1 | 	add	local18, #1
01794     05 70 5E F2 | 	cmps	local18, #5 wcz
01798     BC FF 9F CD |  if_b	jmp	#LR__0051
0179c                 | LR__0052
0179c     24 0C 06 F1 | 	add	objptr, #36
017a0     06 7B 02 FB | 	rdlong	local23, objptr
017a4     11 7A 66 F0 | 	shl	local23, #17
017a8     40 0C 06 F1 | 	add	objptr, #64
017ac     06 7D 02 FB | 	rdlong	local24, objptr
017b0     3D 7D 02 F1 | 	add	local24, local23
017b4                 | ' timings[5]:=timings[5]+hdmibase<<17
017b4     06 7D 62 FC | 	wrlong	local24, objptr
017b8                 | ' clkfreq:=timings[13]
017b8     20 0C 06 F1 | 	add	objptr, #32
017bc     06 51 02 FB | 	rdlong	local02, objptr
017c0     14 50 66 FC | 	wrlong	local02, #20
017c4                 | ' hubset(timings[14])
017c4     04 0C 06 F1 | 	add	objptr, #4
017c8     06 47 02 FB | 	rdlong	arg01, objptr
017cc     88 0C 86 F1 | 	sub	objptr, #136
017d0     00 46 62 FD | 	hubset	arg01
017d4                 | ' waitms(1)
017d4     01 46 06 F6 | 	mov	arg01, #1
017d8     C4 09 B0 FD | 	call	#__system___waitms
017dc     27 7F 02 F6 | 	mov	local25, local01
017e0     03 7E 06 F5 | 	and	local25, #3
017e4     3F 81 C2 F9 | 	decod	local26, local25
017e8                 | ' 
017e8                 | ' 
017e8                 | ' xzoom:=1<<(mode & 3)
017e8     CC 0C 06 F1 | 	add	objptr, #204
017ec     06 81 62 FC | 	wrlong	local26, objptr
017f0                 | ' 
017f0                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
017f0     40 5D 02 F6 | 	mov	local08, local26
017f4     CC 0C 86 F1 | 	sub	objptr, #204
017f8     08 5C 0E F2 | 	cmp	local08, #8 wz
017fc     24 00 90 5D |  if_ne	jmp	#LR__0053
01800     27 5F 02 F6 | 	mov	local09, local01
01804     04 5E 46 F0 | 	shr	local09, #4
01808     03 5E 06 F5 | 	and	local09, #3
0180c     03 5E 0E F2 | 	cmp	local09, #3 wz
01810     10 00 90 AD |  if_e	jmp	#LR__0053
01814                 | '   xzoom:=4
01814     04 50 06 F6 | 	mov	local02, #4
01818     CC 0C 06 F1 | 	add	objptr, #204
0181c     06 09 68 FC | 	wrlong	#4, objptr
01820     CC 0C 86 F1 | 	sub	objptr, #204
01824                 | LR__0053
01824     27 83 02 F6 | 	mov	local27, local01
01828     02 82 46 F0 | 	shr	local27, #2
0182c     03 82 06 F5 | 	and	local27, #3
01830     41 85 C2 F9 | 	decod	local28, local27
01834                 | ' 
01834                 | ' yzoom:=1<<((mode>>2) & 3)
01834     D0 0C 06 F1 | 	add	objptr, #208
01838     06 85 62 FC | 	wrlong	local28, objptr
0183c     04 0C 86 F1 | 	sub	objptr, #4
01840     06 5D 02 FB | 	rdlong	local08, objptr
01844     04 0C 06 F1 | 	add	objptr, #4
01848     06 55 02 FB | 	rdlong	local04, objptr
0184c     2A 5D 02 FD | 	qmul	local08, local04
01850     18 86 62 FD | 	getqx	local29
01854                 | ' azoom:=xzoom*yzoom
01854     04 0C 06 F1 | 	add	objptr, #4
01858     06 87 62 FC | 	wrlong	local29, objptr
0185c                 | ' 
0185c                 | ' cpl:=timings[11]
0185c     58 0C 86 F1 | 	sub	objptr, #88
01860     06 51 02 FB | 	rdlong	local02, objptr
01864     14 0C 06 F1 | 	add	objptr, #20
01868     06 51 62 FC | 	wrlong	local02, objptr
0186c     90 0C 86 F1 | 	sub	objptr, #144
01870                 | ' if (mode<512)
01870     01 00 00 FF 
01874     00 4E 5E F2 | 	cmps	local01, ##512 wcz
01878     60 00 90 3D |  if_ae	jmp	#LR__0054
0187c     80 0C 06 F1 | 	add	objptr, #128
01880     06 EF 02 FB | 	rdlong	muldiva_, objptr
01884     04 EE 46 F0 | 	shr	muldiva_, #4
01888     50 0C 06 F1 | 	add	objptr, #80
0188c     06 F1 02 FB | 	rdlong	muldivb_, objptr
01890     D0 0C 86 F1 | 	sub	objptr, #208
01894     CC 00 A0 FD | 	call	#unsdivide_
01898                 | '   lines:=(timings[12]>>4)+/yzoom
01898     94 0C 06 F1 | 	add	objptr, #148
0189c     06 F1 62 FC | 	wrlong	muldivb_, objptr
018a0                 | '   if ((timings[12]>>4)+//yzoom) <>0
018a0     14 0C 86 F1 | 	sub	objptr, #20
018a4     06 EF 02 FB | 	rdlong	muldiva_, objptr
018a8     04 EE 46 F0 | 	shr	muldiva_, #4
018ac     50 0C 06 F1 | 	add	objptr, #80
018b0     06 F1 02 FB | 	rdlong	muldivb_, objptr
018b4     D0 0C 86 F1 | 	sub	objptr, #208
018b8     CC 00 A0 FD | 	call	#unsdivide_
018bc     00 EE 0E F2 | 	cmp	muldiva_, #0 wz
018c0     AC 00 90 AD |  if_e	jmp	#LR__0057
018c4                 | '     lines +=1
018c4     94 0C 06 F1 | 	add	objptr, #148
018c8     06 51 02 FB | 	rdlong	local02, objptr
018cc     01 50 06 F1 | 	add	local02, #1
018d0     06 51 62 FC | 	wrlong	local02, objptr
018d4     94 0C 86 F1 | 	sub	objptr, #148
018d8                 | ' 
018d8                 | ' else
018d8     94 00 90 FD | 	jmp	#LR__0057
018dc                 | LR__0054
018dc     80 0C 06 F1 | 	add	objptr, #128
018e0     06 EF 02 FB | 	rdlong	muldiva_, objptr
018e4     50 0C 06 F1 | 	add	objptr, #80
018e8     06 F1 02 FB | 	rdlong	muldivb_, objptr
018ec     D0 0C 86 F1 | 	sub	objptr, #208
018f0     D0 00 A0 FD | 	call	#divide_
018f4                 | '   lines:=timings[12]/yzoom
018f4     94 0C 06 F1 | 	add	objptr, #148
018f8     06 F1 62 FC | 	wrlong	muldivb_, objptr
018fc                 | '   if cpl//xzoom==0
018fc     04 0C 86 F1 | 	sub	objptr, #4
01900     06 EF 02 FB | 	rdlong	muldiva_, objptr
01904     3C 0C 06 F1 | 	add	objptr, #60
01908     06 F1 02 FB | 	rdlong	muldivb_, objptr
0190c     CC 0C 86 F1 | 	sub	objptr, #204
01910     D0 00 A0 FD | 	call	#divide_
01914     00 EE 0E F2 | 	cmp	muldiva_, #0 wz
01918     28 00 90 5D |  if_ne	jmp	#LR__0055
0191c                 | '     cpl:=cpl/xzoom
0191c     90 0C 06 F1 | 	add	objptr, #144
01920     06 EF 02 FB | 	rdlong	muldiva_, objptr
01924     3C 0C 06 F1 | 	add	objptr, #60
01928     06 F1 02 FB | 	rdlong	muldivb_, objptr
0192c     CC 0C 86 F1 | 	sub	objptr, #204
01930     D0 00 A0 FD | 	call	#divide_
01934     90 0C 06 F1 | 	add	objptr, #144
01938     06 F1 62 FC | 	wrlong	muldivb_, objptr
0193c     90 0C 86 F1 | 	sub	objptr, #144
01940                 | '   else
01940     2C 00 90 FD | 	jmp	#LR__0056
01944                 | LR__0055
01944     90 0C 06 F1 | 	add	objptr, #144
01948     06 EF 02 FB | 	rdlong	muldiva_, objptr
0194c     3C 0C 06 F1 | 	add	objptr, #60
01950     06 F1 02 FB | 	rdlong	muldivb_, objptr
01954     CC 0C 86 F1 | 	sub	objptr, #204
01958     D0 00 A0 FD | 	call	#divide_
0195c     78 89 02 F6 | 	mov	local30, muldivb_
01960     01 88 06 F1 | 	add	local30, #1
01964                 | '     cpl:=cpl/xzoom+1
01964     90 0C 06 F1 | 	add	objptr, #144
01968     06 89 62 FC | 	wrlong	local30, objptr
0196c     90 0C 86 F1 | 	sub	objptr, #144
01970                 | LR__0056
01970                 | LR__0057
01970     90 0C 06 F1 | 	add	objptr, #144
01974     06 5D 02 FB | 	rdlong	local08, objptr
01978     04 0C 06 F1 | 	add	objptr, #4
0197c     06 55 02 FB | 	rdlong	local04, objptr
01980     2A 5D 02 FD | 	qmul	local08, local04
01984     18 8A 62 FD | 	getqx	local31
01988                 | ' 
01988                 | ' buflen:=(cpl*lines)
01988     64 0C 86 F1 | 	sub	objptr, #100
0198c     06 8B 62 FC | 	wrlong	local31, objptr
01990     30 0C 86 F1 | 	sub	objptr, #48
01994     02 8A 66 F0 | 	shl	local31, #2
01998     13 8C C6 F9 | 	decod	local32, #19
0199c     45 8D 82 F1 | 	sub	local32, local31
019a0                 | ' buf_ptr:=$80000-4*buflen
019a0     06 8D 62 FC | 	wrlong	local32, objptr
019a4     50 0C 06 F1 | 	add	objptr, #80
019a8     06 8F 02 F6 | 	mov	local33, objptr
019ac                 | ' mode_ptr:=@timings
019ac     3C 0C 86 F1 | 	sub	objptr, #60
019b0     06 8F 62 FC | 	wrlong	local33, objptr
019b4                 | ' graphmode:=mode
019b4     B0 0C 06 F1 | 	add	objptr, #176
019b8     06 4F 62 FC | 	wrlong	local01, objptr
019bc     C4 0C 86 F1 | 	sub	objptr, #196
019c0                 | ' makedl(mode)
019c0     27 47 02 F6 | 	mov	arg01, local01
019c4                 | ' 
019c4                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
019c4                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
019c4                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
019c4                 | ' 
019c4                 | ' '   0 - display a up/down border line
019c4                 | ' 
019c4                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
019c4                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
019c4                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
019c4                 | ' '    nnnn - font line to display, 0..15
019c4                 | ' '    llllll - character line, determines the cursor Y position
019c4                 | ' 
019c4                 | ' 
019c4                 | ' if (mode &256==0)
019c4     00 47 CE F7 | 	test	arg01, #256 wz
019c8     1C 00 90 5D |  if_ne	jmp	#LR__0058
019cc     06 91 02 FB | 	rdlong	local34, objptr
019d0     04 00 00 FF 
019d4     00 91 86 F1 | 	sub	local34, ##2304
019d8                 | '   dl_ptr:=buf_ptr-4*576
019d8     1C 0C 06 F1 | 	add	objptr, #28
019dc     06 91 62 FC | 	wrlong	local34, objptr
019e0     1C 0C 86 F1 | 	sub	objptr, #28
019e4                 | ' else
019e4     18 00 90 FD | 	jmp	#LR__0059
019e8                 | LR__0058
019e8     06 93 02 FB | 	rdlong	local35, objptr
019ec     03 00 00 FF 
019f0     C0 93 86 F1 | 	sub	local35, ##1984
019f4                 | '   dl_ptr:=buf_ptr-4*496
019f4     1C 0C 06 F1 | 	add	objptr, #28
019f8     06 93 62 FC | 	wrlong	local35, objptr
019fc     1C 0C 86 F1 | 	sub	objptr, #28
01a00                 | LR__0059
01a00     23 95 02 F6 | 	mov	local36, arg01
01a04     02 94 46 F0 | 	shr	local36, #2
01a08     03 94 06 F5 | 	and	local36, #3
01a0c                 | '  ' dl_ptr:=buf_ptr-4*540
01a0c                 | ' 
01a0c                 | ' vzoom:=((mode>>2) & 3)
01a0c                 | ' 
01a0c                 | ' 
01a0c                 | ' if mode<512 '' text modes
01a0c     01 00 00 FF 
01a10     00 46 5E F2 | 	cmps	arg01, ##512 wcz
01a14     E4 01 90 3D |  if_ae	jmp	#LR__0067
01a18                 | ' 
01a18                 | '   if timings[6]>0 'borders
01a18     68 0C 06 F1 | 	add	objptr, #104
01a1c     06 97 02 FB | 	rdlong	local37, objptr
01a20     68 0C 86 F1 | 	sub	objptr, #104
01a24     00 96 5E F2 | 	cmps	local37, #0 wcz
01a28     D4 00 90 ED |  if_be	jmp	#LR__0064
01a2c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
01a2c     00 98 06 F6 | 	mov	local38, #0
01a30     68 0C 06 F1 | 	add	objptr, #104
01a34     06 9B 02 FB | 	rdlong	local39, objptr
01a38     68 0C 86 F1 | 	sub	objptr, #104
01a3c     01 9A 86 F1 | 	sub	local39, #1
01a40     00 9A 5E F2 | 	cmps	local39, #0 wcz
01a44     01 9C 06 16 |  if_a	mov	local40, #1
01a48     01 9C 66 E6 |  if_be	neg	local40, #1
01a4c     4E 9F 02 F6 | 	mov	local41, local40
01a50     4E 9B 02 F1 | 	add	local39, local40
01a54     D0 E5 9F FE | 	loc	pa,	#(@LR__0061-@LR__0060)
01a58     93 00 A0 FD | 	call	#FCACHE_LOAD_
01a5c                 | LR__0060
01a5c     4C A1 02 F6 | 	mov	local42, local38
01a60     02 A0 66 F0 | 	shl	local42, #2
01a64     1C 0C 06 F1 | 	add	objptr, #28
01a68     06 A3 02 FB | 	rdlong	local43, objptr
01a6c     1C 0C 86 F1 | 	sub	objptr, #28
01a70     50 A3 02 F1 | 	add	local43, local42
01a74                 | '       long[dl_ptr+4*i]:=$0
01a74     51 01 68 FC | 	wrlong	#0, local43
01a78     4F 99 02 F1 | 	add	local38, local41
01a7c     4D 99 0A F2 | 	cmp	local38, local39 wz
01a80     D8 FF 9F 5D |  if_ne	jmp	#LR__0060
01a84                 | LR__0061
01a84                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
01a84     68 0C 06 F1 | 	add	objptr, #104
01a88     06 99 02 FB | 	rdlong	local38, objptr
01a8c     18 0C 06 F1 | 	add	objptr, #24
01a90     06 9D 02 FB | 	rdlong	local40, objptr
01a94     4E 99 02 F1 | 	add	local38, local40
01a98     0C 0C 06 F1 | 	add	objptr, #12
01a9c     06 A5 02 FB | 	rdlong	local44, objptr
01aa0     01 A4 86 F1 | 	sub	local44, #1
01aa4     24 0C 86 F1 | 	sub	objptr, #36
01aa8     06 A7 02 FB | 	rdlong	local45, objptr
01aac     18 0C 06 F1 | 	add	objptr, #24
01ab0     06 A9 02 FB | 	rdlong	local46, objptr
01ab4     80 0C 86 F1 | 	sub	objptr, #128
01ab8     54 A7 02 F1 | 	add	local45, local46
01abc     53 A5 5A F2 | 	cmps	local44, local45 wcz
01ac0     01 AA 06 16 |  if_a	mov	local47, #1
01ac4     01 AA 66 E6 |  if_be	neg	local47, #1
01ac8     55 AD 02 F6 | 	mov	local48, local47
01acc     55 A5 02 F1 | 	add	local44, local47
01ad0     54 E5 9F FE | 	loc	pa,	#(@LR__0063-@LR__0062)
01ad4     93 00 A0 FD | 	call	#FCACHE_LOAD_
01ad8                 | LR__0062
01ad8     4C AF 02 F6 | 	mov	local49, local38
01adc     02 AE 66 F0 | 	shl	local49, #2
01ae0     1C 0C 06 F1 | 	add	objptr, #28
01ae4     06 B1 02 FB | 	rdlong	local50, objptr
01ae8     1C 0C 86 F1 | 	sub	objptr, #28
01aec     57 B1 02 F1 | 	add	local50, local49
01af0                 | '       long[dl_ptr+4*i]:=$0
01af0     58 01 68 FC | 	wrlong	#0, local50
01af4     56 99 02 F1 | 	add	local38, local48
01af8     52 99 0A F2 | 	cmp	local38, local44 wz
01afc     D8 FF 9F 5D |  if_ne	jmp	#LR__0062
01b00                 | LR__0063
01b00                 | LR__0064
01b00     10 B2 06 F6 | 	mov	local51, #16
01b04     4A B3 62 F0 | 	shl	local51, local36
01b08                 | '   lpc:=16<<vzoom
01b08                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
01b08     68 0C 06 F1 | 	add	objptr, #104
01b0c     06 99 02 FB | 	rdlong	local38, objptr
01b10     4C B5 02 F6 | 	mov	local52, local38
01b14     18 0C 06 F1 | 	add	objptr, #24
01b18     06 B7 02 FB | 	rdlong	local53, objptr
01b1c     5B B5 02 F1 | 	add	local52, local53
01b20     01 B4 86 F1 | 	sub	local52, #1
01b24     18 0C 86 F1 | 	sub	objptr, #24
01b28     06 AB 02 FB | 	rdlong	local47, objptr
01b2c     68 0C 86 F1 | 	sub	objptr, #104
01b30     55 B5 5A F2 | 	cmps	local52, local47 wcz
01b34     01 B8 06 16 |  if_a	mov	local54, #1
01b38     01 B8 66 E6 |  if_be	neg	local54, #1
01b3c     5C BB 02 F6 | 	mov	local55, local54
01b40     5C B5 02 F1 | 	add	local52, local54
01b44     68 E5 9F FE | 	loc	pa,	#(@LR__0066-@LR__0065)
01b48     93 00 A0 FD | 	call	#FCACHE_LOAD_
01b4c                 | LR__0065
01b4c     4C EF 02 F6 | 	mov	muldiva_, local38
01b50     68 0C 06 F1 | 	add	objptr, #104
01b54     06 BD 02 FB | 	rdlong	local56, objptr
01b58     68 0C 86 F1 | 	sub	objptr, #104
01b5c     5E EF 82 F1 | 	sub	muldiva_, local56
01b60     59 F1 02 F6 | 	mov	muldivb_, local51
01b64     CC 00 A0 FD | 	call	#unsdivide_
01b68     4A EF 42 F0 | 	shr	muldiva_, local36
01b6c                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
01b6c     77 BF 02 F6 | 	mov	local57, muldiva_
01b70     4C EF 02 F6 | 	mov	muldiva_, local38
01b74     68 0C 06 F1 | 	add	objptr, #104
01b78     06 BD 02 FB | 	rdlong	local56, objptr
01b7c     68 0C 86 F1 | 	sub	objptr, #104
01b80     5E EF 82 F1 | 	sub	muldiva_, local56
01b84     59 F1 02 F6 | 	mov	muldivb_, local51
01b88     CC 00 A0 FD | 	call	#unsdivide_
01b8c     78 C1 02 F6 | 	mov	local58, muldivb_
01b90                 | '     charline:=(i-timings[6])+/lpc
01b90     90 0C 06 F1 | 	add	objptr, #144
01b94     06 BD 02 FB | 	rdlong	local56, objptr
01b98     90 0C 86 F1 | 	sub	objptr, #144
01b9c     60 BD 02 FD | 	qmul	local56, local58
01ba0     18 C2 62 FD | 	getqx	local59
01ba4     02 C2 66 F0 | 	shl	local59, #2
01ba8     06 C5 02 FB | 	rdlong	local60, objptr
01bac     61 C5 02 F1 | 	add	local60, local59
01bb0     23 C7 02 F6 | 	mov	local61, arg01
01bb4     03 C6 06 F5 | 	and	local61, #3
01bb8     63 C5 02 F1 | 	add	local60, local61
01bbc                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
01bbc     0C C4 66 F0 | 	shl	local60, #12
01bc0     08 BE 66 F0 | 	shl	local57, #8
01bc4     5F C5 02 F1 | 	add	local60, local57
01bc8     02 C0 66 F0 | 	shl	local58, #2
01bcc     60 C5 02 F1 | 	add	local60, local58
01bd0     01 C4 06 F1 | 	add	local60, #1
01bd4     4C C9 02 F6 | 	mov	local62, local38
01bd8     02 C8 66 F0 | 	shl	local62, #2
01bdc     1C 0C 06 F1 | 	add	objptr, #28
01be0     06 CB 02 FB | 	rdlong	local63, objptr
01be4     1C 0C 86 F1 | 	sub	objptr, #28
01be8     64 CB 02 F1 | 	add	local63, local62
01bec                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
01bec     65 C5 62 FC | 	wrlong	local60, local63
01bf0     5D 99 02 F1 | 	add	local38, local55
01bf4     5A 99 0A F2 | 	cmp	local38, local52 wz
01bf8     50 FF 9F 5D |  if_ne	jmp	#LR__0065
01bfc                 | LR__0066
01bfc                 | LR__0067
01bfc                 | ' 
01bfc                 | ' 
01bfc                 | ' 
01bfc                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
01bfc     01 00 00 FF 
01c00     00 46 5E F2 | 	cmps	arg01, ##512 wcz
01c04     AC 01 90 CD |  if_b	jmp	#LR__0075
01c08                 | ' 
01c08                 | '   if timings[6]>0 'borders
01c08     68 0C 06 F1 | 	add	objptr, #104
01c0c     06 97 02 FB | 	rdlong	local37, objptr
01c10     68 0C 86 F1 | 	sub	objptr, #104
01c14     00 96 5E F2 | 	cmps	local37, #0 wcz
01c18     D4 00 90 ED |  if_be	jmp	#LR__0072
01c1c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
01c1c     00 98 06 F6 | 	mov	local38, #0
01c20     68 0C 06 F1 | 	add	objptr, #104
01c24     06 CD 02 FB | 	rdlong	local64, objptr
01c28     68 0C 86 F1 | 	sub	objptr, #104
01c2c     01 CC 86 F1 | 	sub	local64, #1
01c30     00 CC 5E F2 | 	cmps	local64, #0 wcz
01c34     01 9C 06 16 |  if_a	mov	local40, #1
01c38     01 9C 66 E6 |  if_be	neg	local40, #1
01c3c     4E CF 02 F6 | 	mov	local65, local40
01c40     4E CD 02 F1 | 	add	local64, local40
01c44     E0 E3 9F FE | 	loc	pa,	#(@LR__0069-@LR__0068)
01c48     93 00 A0 FD | 	call	#FCACHE_LOAD_
01c4c                 | LR__0068
01c4c     4C D1 02 F6 | 	mov	local66, local38
01c50     02 D0 66 F0 | 	shl	local66, #2
01c54     1C 0C 06 F1 | 	add	objptr, #28
01c58     06 D3 02 FB | 	rdlong	local67, objptr
01c5c     1C 0C 86 F1 | 	sub	objptr, #28
01c60     68 D3 02 F1 | 	add	local67, local66
01c64                 | '       long[dl_ptr+4*i]:=$0
01c64     69 01 68 FC | 	wrlong	#0, local67
01c68     67 99 02 F1 | 	add	local38, local65
01c6c     66 99 0A F2 | 	cmp	local38, local64 wz
01c70     D8 FF 9F 5D |  if_ne	jmp	#LR__0068
01c74                 | LR__0069
01c74                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
01c74     68 0C 06 F1 | 	add	objptr, #104
01c78     06 99 02 FB | 	rdlong	local38, objptr
01c7c     18 0C 06 F1 | 	add	objptr, #24
01c80     06 9D 02 FB | 	rdlong	local40, objptr
01c84     4E 99 02 F1 | 	add	local38, local40
01c88     0C 0C 06 F1 | 	add	objptr, #12
01c8c     06 D5 02 FB | 	rdlong	local68, objptr
01c90     01 D4 86 F1 | 	sub	local68, #1
01c94     24 0C 86 F1 | 	sub	objptr, #36
01c98     06 A7 02 FB | 	rdlong	local45, objptr
01c9c     18 0C 06 F1 | 	add	objptr, #24
01ca0     06 A9 02 FB | 	rdlong	local46, objptr
01ca4     80 0C 86 F1 | 	sub	objptr, #128
01ca8     54 A7 02 F1 | 	add	local45, local46
01cac     53 D5 5A F2 | 	cmps	local68, local45 wcz
01cb0     01 AA 06 16 |  if_a	mov	local47, #1
01cb4     01 AA 66 E6 |  if_be	neg	local47, #1
01cb8     55 D7 02 F6 | 	mov	local69, local47
01cbc     55 D5 02 F1 | 	add	local68, local47
01cc0     64 E3 9F FE | 	loc	pa,	#(@LR__0071-@LR__0070)
01cc4     93 00 A0 FD | 	call	#FCACHE_LOAD_
01cc8                 | LR__0070
01cc8     4C D9 02 F6 | 	mov	local70, local38
01ccc     02 D8 66 F0 | 	shl	local70, #2
01cd0     1C 0C 06 F1 | 	add	objptr, #28
01cd4     06 DB 02 FB | 	rdlong	local71, objptr
01cd8     1C 0C 86 F1 | 	sub	objptr, #28
01cdc     6C DB 02 F1 | 	add	local71, local70
01ce0                 | '       long[dl_ptr+4*i]:=$0
01ce0     6D 01 68 FC | 	wrlong	#0, local71
01ce4     6B 99 02 F1 | 	add	local38, local69
01ce8     6A 99 0A F2 | 	cmp	local38, local68 wz
01cec     D8 FF 9F 5D |  if_ne	jmp	#LR__0070
01cf0                 | LR__0071
01cf0                 | LR__0072
01cf0                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
01cf0     68 0C 06 F1 | 	add	objptr, #104
01cf4     06 99 02 FB | 	rdlong	local38, objptr
01cf8     4C DD 02 F6 | 	mov	local72, local38
01cfc     18 0C 06 F1 | 	add	objptr, #24
01d00     06 B7 02 FB | 	rdlong	local53, objptr
01d04     5B DD 02 F1 | 	add	local72, local53
01d08     01 DC 86 F1 | 	sub	local72, #1
01d0c     18 0C 86 F1 | 	sub	objptr, #24
01d10     06 AB 02 FB | 	rdlong	local47, objptr
01d14     68 0C 86 F1 | 	sub	objptr, #104
01d18     55 DD 5A F2 | 	cmps	local72, local47 wcz
01d1c     01 B8 06 16 |  if_a	mov	local54, #1
01d20     01 B8 66 E6 |  if_be	neg	local54, #1
01d24     5C DF 02 F6 | 	mov	local73, local54
01d28     5C DD 02 F1 | 	add	local72, local54
01d2c     50 E3 9F FE | 	loc	pa,	#(@LR__0074-@LR__0073)
01d30     93 00 A0 FD | 	call	#FCACHE_LOAD_
01d34                 | LR__0073
01d34     4C E1 02 F6 | 	mov	local74, local38
01d38     68 0C 06 F1 | 	add	objptr, #104
01d3c     06 BD 02 FB | 	rdlong	local56, objptr
01d40     5E E1 82 F1 | 	sub	local74, local56
01d44     4A E1 42 F0 | 	shr	local74, local36
01d48     28 0C 06 F1 | 	add	objptr, #40
01d4c     06 BD 02 FB | 	rdlong	local56, objptr
01d50     90 0C 86 F1 | 	sub	objptr, #144
01d54     70 BD 02 FD | 	qmul	local56, local74
01d58     18 E2 62 FD | 	getqx	local75
01d5c     02 E2 66 F0 | 	shl	local75, #2
01d60     06 E5 02 FB | 	rdlong	local76, objptr
01d64     71 E5 02 F1 | 	add	local76, local75
01d68     23 E7 02 F6 | 	mov	local77, arg01
01d6c     03 E6 06 F5 | 	and	local77, #3
01d70     73 E5 02 F1 | 	add	local76, local77
01d74                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
01d74     0C E4 66 F0 | 	shl	local76, #12
01d78     02 E4 06 F1 | 	add	local76, #2
01d7c     23 E9 02 F6 | 	mov	local78, arg01
01d80     30 E8 06 F5 | 	and	local78, #48
01d84     02 E8 46 F0 | 	shr	local78, #2
01d88     74 E5 02 F1 | 	add	local76, local78
01d8c     4C EB 02 F6 | 	mov	local79, local38
01d90     02 EA 66 F0 | 	shl	local79, #2
01d94     1C 0C 06 F1 | 	add	objptr, #28
01d98     06 ED 02 FB | 	rdlong	local80, objptr
01d9c     1C 0C 86 F1 | 	sub	objptr, #28
01da0     75 ED 02 F1 | 	add	local80, local79
01da4                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
01da4     76 E5 62 FC | 	wrlong	local76, local80
01da8     6F 99 02 F1 | 	add	local38, local73
01dac     6E 99 0A F2 | 	cmp	local38, local72 wz
01db0     80 FF 9F 5D |  if_ne	jmp	#LR__0073
01db4                 | LR__0074
01db4                 | LR__0075
01db4                 | LR__0076
01db4     AF F0 03 F6 | 	mov	ptra, fp
01db8     BF 00 A0 FD | 	call	#popregs_
01dbc                 | _hng030rm_spin2_setmode_ret
01dbc     2D 00 64 FD | 	ret
01dc0                 | hubexit
01dc0     81 00 80 FD | 	jmp	#cogexit
01dc4                 | 
01dc4                 | __system___setbaud
01dc4     14 EE 06 FB | 	rdlong	muldiva_, #20
01dc8     23 F1 02 F6 | 	mov	muldivb_, arg01
01dcc     D0 00 A0 FD | 	call	#divide_
01dd0     40 7C 64 FD | 	dirl	#62
01dd4     40 7E 64 FD | 	dirl	#63
01dd8     09 F1 62 FC | 	wrlong	muldivb_, ptr___system__dat__
01ddc     10 F0 66 F0 | 	shl	muldivb_, #16
01de0     07 48 06 F6 | 	mov	arg02, #7
01de4     78 49 02 F1 | 	add	arg02, muldivb_
01de8     3E F8 0C FC | 	wrpin	#124, #62
01dec     3E 48 16 FC | 	wxpin	arg02, #62
01df0     3F 7C 0C FC | 	wrpin	#62, #63
01df4     14 48 06 F1 | 	add	arg02, #20
01df8     3F 48 16 FC | 	wxpin	arg02, #63
01dfc     41 7C 64 FD | 	dirh	#62
01e00     41 7E 64 FD | 	dirh	#63
01e04                 | __system___setbaud_ret
01e04     2D 00 64 FD | 	ret
01e08                 | 
01e08                 | __system___txraw
01e08     02 5A 05 F6 | 	mov	COUNT_, #2
01e0c     B0 00 A0 FD | 	call	#pushregs_
01e10     23 4F 02 F6 | 	mov	local01, arg01
01e14     09 51 0A FB | 	rdlong	local02, ptr___system__dat__ wz
01e18     0C 00 90 5D |  if_ne	jmp	#LR__0077
01e1c     C2 01 00 FF 
01e20     00 46 06 F6 | 	mov	arg01, ##230400
01e24     9C FF BF FD | 	call	#__system___setbaud
01e28                 | LR__0077
01e28     3E 4E 26 FC | 	wypin	local01, #62
01e2c     1F 02 64 FD | 	waitx	#1
01e30     D4 E1 9F FE | 	loc	pa,	#(@LR__0079-@LR__0078)
01e34     93 00 A0 FD | 	call	#FCACHE_LOAD_
01e38                 | LR__0078
01e38     40 7C 74 FD | 	testp	#62 wc
01e3c     F8 FF 9F 3D |  if_nc	jmp	#LR__0078
01e40                 | LR__0079
01e40     01 20 06 F6 | 	mov	result1, #1
01e44     AF F0 03 F6 | 	mov	ptra, fp
01e48     BF 00 A0 FD | 	call	#popregs_
01e4c                 | __system___txraw_ret
01e4c     2D 00 64 FD | 	ret
01e50                 | 
01e50                 | __system___rxraw
01e50     0D 5A 05 F6 | 	mov	COUNT_, #13
01e54     B0 00 A0 FD | 	call	#pushregs_
01e58     23 4F 02 F6 | 	mov	local01, arg01
01e5c     09 51 0A FB | 	rdlong	local02, ptr___system__dat__ wz
01e60     0C 00 90 5D |  if_ne	jmp	#LR__0080
01e64     C2 01 00 FF 
01e68     00 46 06 F6 | 	mov	arg01, ##230400
01e6c     54 FF BF FD | 	call	#__system___setbaud
01e70                 | LR__0080
01e70     00 4E 0E F2 | 	cmp	local01, #0 wz
01e74     18 00 90 AD |  if_e	jmp	#LR__0081
01e78     14 52 06 FB | 	rdlong	local03, #20
01e7c     0A 52 46 F0 | 	shr	local03, #10
01e80     29 4F 02 FD | 	qmul	local01, local03
01e84     18 54 62 FD | 	getqx	local04
01e88     1A 56 62 FD | 	getct	local05
01e8c     2A 57 02 F1 | 	add	local05, local04
01e90                 | LR__0081
01e90     01 58 66 F6 | 	neg	local06, #1
01e94     00 5A 06 F6 | 	mov	local07, #0
01e98     04 12 06 F1 | 	add	ptr___system__dat__, #4
01e9c     09 5D 02 FB | 	rdlong	local08, ptr___system__dat__
01ea0     04 12 86 F1 | 	sub	ptr___system__dat__, #4
01ea4                 | LR__0082
01ea4     08 5C 16 F4 | 	testb	local08, #8 wc
01ea8     09 5C 76 F4 | 	testbn	local08, #9 andc
01eac     0A 5C 46 F0 | 	shr	local08, #10
01eb0     01 5A 06 C6 |  if_b	mov	local07, #1
01eb4     10 00 90 CD |  if_b	jmp	#LR__0083
01eb8     40 7E 6C FD | 	testp	#63 wz
01ebc     01 5A 06 A6 |  if_e	mov	local07, #1
01ec0     3F 5C 8E AA |  if_e	rdpin	local08, #63
01ec4     04 5C 46 A0 |  if_e	shr	local08, #4
01ec8                 | LR__0083
01ec8     00 50 06 F6 | 	mov	local02, #0
01ecc     00 5A 0E F2 | 	cmp	local07, #0 wz
01ed0     01 50 66 56 |  if_ne	neg	local02, #1
01ed4     00 5E 06 F6 | 	mov	local09, #0
01ed8     00 60 06 F6 | 	mov	local10, #0
01edc     00 4E 0E F2 | 	cmp	local01, #0 wz
01ee0     01 60 66 56 |  if_ne	neg	local10, #1
01ee4     00 62 06 F6 | 	mov	local11, #0
01ee8     00 64 06 F6 | 	mov	local12, #0
01eec     1A 66 62 FD | 	getct	local13
01ef0     2B 67 82 F1 | 	sub	local13, local05
01ef4     00 66 5E F2 | 	cmps	local13, #0 wcz
01ef8     01 64 66 C6 |  if_b	neg	local12, #1
01efc     00 64 0E F2 | 	cmp	local12, #0 wz
01f00     01 62 66 56 |  if_ne	neg	local11, #1
01f04     31 61 CA F7 | 	test	local10, local11 wz
01f08     01 5E 66 56 |  if_ne	neg	local09, #1
01f0c     2F 51 4A F5 | 	or	local02, local09 wz
01f10     90 FF 9F AD |  if_e	jmp	#LR__0082
01f14     00 5A 0E F2 | 	cmp	local07, #0 wz
01f18     2E 59 02 56 |  if_ne	mov	local06, local08
01f1c     FF 58 06 55 |  if_ne	and	local06, #255
01f20     04 12 06 F1 | 	add	ptr___system__dat__, #4
01f24     09 5D 62 FC | 	wrlong	local08, ptr___system__dat__
01f28     04 12 86 F1 | 	sub	ptr___system__dat__, #4
01f2c     2C 21 02 F6 | 	mov	result1, local06
01f30     AF F0 03 F6 | 	mov	ptra, fp
01f34     BF 00 A0 FD | 	call	#popregs_
01f38                 | __system___rxraw_ret
01f38     2D 00 64 FD | 	ret
01f3c                 | 
01f3c                 | __system____builtin_memmove
01f3c     23 27 02 F6 | 	mov	_var01, arg01
01f40     24 47 5A F2 | 	cmps	arg01, arg02 wcz
01f44     50 00 90 3D |  if_ae	jmp	#LR__0091
01f48     D4 E0 9F FE | 	loc	pa,	#(@LR__0085-@LR__0084)
01f4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01f50                 | LR__0084
01f50     03 4A 5E F2 | 	cmps	arg03, #3 wcz
01f54     18 00 90 ED |  if_be	jmp	#LR__0086
01f58     24 29 02 FB | 	rdlong	_var02, arg02
01f5c     23 29 62 FC | 	wrlong	_var02, arg01
01f60     04 46 06 F1 | 	add	arg01, #4
01f64     04 48 06 F1 | 	add	arg02, #4
01f68     04 4A 86 F1 | 	sub	arg03, #4
01f6c     E0 FF 9F FD | 	jmp	#LR__0084
01f70                 | LR__0085
01f70                 | LR__0086
01f70     25 2B 0A F6 | 	mov	_var03, arg03 wz
01f74     4C 00 90 AD |  if_e	jmp	#LR__0097
01f78     98 E0 9F FE | 	loc	pa,	#(@LR__0089-@LR__0087)
01f7c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01f80                 | LR__0087
01f80     15 09 D8 FC | 	rep	@LR__0090, _var03
01f84                 | LR__0088
01f84     24 29 C2 FA | 	rdbyte	_var02, arg02
01f88     23 29 42 FC | 	wrbyte	_var02, arg01
01f8c     01 46 06 F1 | 	add	arg01, #1
01f90     01 48 06 F1 | 	add	arg02, #1
01f94                 | LR__0089
01f94                 | LR__0090
01f94     2C 00 90 FD | 	jmp	#LR__0097
01f98                 | LR__0091
01f98     25 47 02 F1 | 	add	arg01, arg03
01f9c     25 49 02 F1 | 	add	arg02, arg03
01fa0     25 2D 0A F6 | 	mov	_var04, arg03 wz
01fa4     1C 00 90 AD |  if_e	jmp	#LR__0096
01fa8     68 E0 9F FE | 	loc	pa,	#(@LR__0094-@LR__0092)
01fac     93 00 A0 FD | 	call	#FCACHE_LOAD_
01fb0                 | LR__0092
01fb0     16 09 D8 FC | 	rep	@LR__0095, _var04
01fb4                 | LR__0093
01fb4     01 46 86 F1 | 	sub	arg01, #1
01fb8     01 48 86 F1 | 	sub	arg02, #1
01fbc     24 29 C2 FA | 	rdbyte	_var02, arg02
01fc0     23 29 42 FC | 	wrbyte	_var02, arg01
01fc4                 | LR__0094
01fc4                 | LR__0095
01fc4                 | LR__0096
01fc4                 | LR__0097
01fc4     13 21 02 F6 | 	mov	result1, _var01
01fc8                 | __system____builtin_memmove_ret
01fc8     2D 00 64 FD | 	ret
01fcc                 | 
01fcc                 | __system__longmove
01fcc     23 27 02 F6 | 	mov	_var01, arg01
01fd0     24 47 5A F2 | 	cmps	arg01, arg02 wcz
01fd4     28 00 90 3D |  if_ae	jmp	#LR__0102
01fd8     25 29 0A F6 | 	mov	_var02, arg03 wz
01fdc     54 00 90 AD |  if_e	jmp	#LR__0108
01fe0     30 E0 9F FE | 	loc	pa,	#(@LR__0100-@LR__0098)
01fe4     93 00 A0 FD | 	call	#FCACHE_LOAD_
01fe8                 | LR__0098
01fe8     14 09 D8 FC | 	rep	@LR__0101, _var02
01fec                 | LR__0099
01fec     24 2B 02 FB | 	rdlong	_var03, arg02
01ff0     23 2B 62 FC | 	wrlong	_var03, arg01
01ff4     04 46 06 F1 | 	add	arg01, #4
01ff8     04 48 06 F1 | 	add	arg02, #4
01ffc                 | LR__0100
01ffc                 | LR__0101
01ffc     34 00 90 FD | 	jmp	#LR__0108
02000                 | LR__0102
02000     25 2D 02 F6 | 	mov	_var04, arg03
02004     02 2C 66 F0 | 	shl	_var04, #2
02008     16 47 02 F1 | 	add	arg01, _var04
0200c     16 49 02 F1 | 	add	arg02, _var04
02010     25 2F 0A F6 | 	mov	_var05, arg03 wz
02014     1C 00 90 AD |  if_e	jmp	#LR__0107
02018     F8 DF 9F FE | 	loc	pa,	#(@LR__0105-@LR__0103)
0201c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02020                 | LR__0103
02020     17 09 D8 FC | 	rep	@LR__0106, _var05
02024                 | LR__0104
02024     04 46 86 F1 | 	sub	arg01, #4
02028     04 48 86 F1 | 	sub	arg02, #4
0202c     24 2B 02 FB | 	rdlong	_var03, arg02
02030     23 2B 62 FC | 	wrlong	_var03, arg01
02034                 | LR__0105
02034                 | LR__0106
02034                 | LR__0107
02034                 | LR__0108
02034     13 21 02 F6 | 	mov	result1, _var01
02038                 | __system__longmove_ret
02038     2D 00 64 FD | 	ret
0203c                 | 
0203c                 | __system____topofstack
0203c     00 5A 05 F6 | 	mov	COUNT_, #0
02040     B0 00 A0 FD | 	call	#pushregs_
02044     0C F0 07 F1 | 	add	ptra, #12
02048     04 5E 05 F1 | 	add	fp, #4
0204c     AF 46 62 FC | 	wrlong	arg01, fp
02050     AF 20 02 F6 | 	mov	result1, fp
02054     04 5E 85 F1 | 	sub	fp, #4
02058     AF F0 03 F6 | 	mov	ptra, fp
0205c     BF 00 A0 FD | 	call	#popregs_
02060                 | __system____topofstack_ret
02060     2D 00 64 FD | 	ret
02064                 | 
02064                 | __system___make_methodptr
02064     04 5A 05 F6 | 	mov	COUNT_, #4
02068     B0 00 A0 FD | 	call	#pushregs_
0206c     23 4F 02 F6 | 	mov	local01, arg01
02070     24 51 02 F6 | 	mov	local02, arg02
02074     08 46 06 F6 | 	mov	arg01, #8
02078     84 06 B0 FD | 	call	#__system___gc_alloc_managed
0207c     10 53 0A F6 | 	mov	local03, result1 wz
02080     10 00 90 AD |  if_e	jmp	#LR__0109
02084     29 4F 62 FC | 	wrlong	local01, local03
02088     29 55 02 F6 | 	mov	local04, local03
0208c     04 54 06 F1 | 	add	local04, #4
02090     2A 51 62 FC | 	wrlong	local02, local04
02094                 | LR__0109
02094     29 21 02 F6 | 	mov	result1, local03
02098     AF F0 03 F6 | 	mov	ptra, fp
0209c     BF 00 A0 FD | 	call	#popregs_
020a0                 | __system___make_methodptr_ret
020a0     2D 00 64 FD | 	ret
020a4                 | 
020a4                 | __system___lockmem
020a4     02 5A 05 F6 | 	mov	COUNT_, #2
020a8     B0 00 A0 FD | 	call	#pushregs_
020ac     01 20 62 FD | 	cogid	result1
020b0     10 4F 02 F6 | 	mov	local01, result1
020b4     00 4F 06 F1 | 	add	local01, #256
020b8                 | LR__0110
020b8     23 51 0A FB | 	rdlong	local02, arg01 wz
020bc     23 4F 62 AC |  if_e	wrlong	local01, arg01
020c0     23 51 02 AB |  if_e	rdlong	local02, arg01
020c4     23 51 02 AB |  if_e	rdlong	local02, arg01
020c8     27 51 0A F2 | 	cmp	local02, local01 wz
020cc     E8 FF 9F 5D |  if_ne	jmp	#LR__0110
020d0     AF F0 03 F6 | 	mov	ptra, fp
020d4     BF 00 A0 FD | 	call	#popregs_
020d8                 | __system___lockmem_ret
020d8     2D 00 64 FD | 	ret
020dc                 | 
020dc                 | __system___tx
020dc     02 5A 05 F6 | 	mov	COUNT_, #2
020e0     B0 00 A0 FD | 	call	#pushregs_
020e4     23 4F 02 F6 | 	mov	local01, arg01
020e8     0A 4E 0E F2 | 	cmp	local01, #10 wz
020ec     20 00 90 5D |  if_ne	jmp	#LR__0111
020f0     08 12 06 F1 | 	add	ptr___system__dat__, #8
020f4     09 51 02 FB | 	rdlong	local02, ptr___system__dat__
020f8     08 12 86 F1 | 	sub	ptr___system__dat__, #8
020fc     02 50 CE F7 | 	test	local02, #2 wz
02100     0C 00 90 AD |  if_e	jmp	#LR__0111
02104     0D 50 06 F6 | 	mov	local02, #13
02108     0D 46 06 F6 | 	mov	arg01, #13
0210c     F8 FC BF FD | 	call	#__system___txraw
02110                 | LR__0111
02110     27 47 02 F6 | 	mov	arg01, local01
02114     F0 FC BF FD | 	call	#__system___txraw
02118     AF F0 03 F6 | 	mov	ptra, fp
0211c     BF 00 A0 FD | 	call	#popregs_
02120                 | __system___tx_ret
02120     2D 00 64 FD | 	ret
02124                 | 
02124                 | __system___rx
02124     02 5A 05 F6 | 	mov	COUNT_, #2
02128     B0 00 A0 FD | 	call	#pushregs_
0212c                 | LR__0112
0212c     00 46 06 F6 | 	mov	arg01, #0
02130     1C FD BF FD | 	call	#__system___rxraw
02134     10 4F 02 F6 | 	mov	local01, result1
02138     FF FF 7F FF 
0213c     FF 4F 0E F2 | 	cmp	local01, ##-1 wz
02140     E8 FF 9F AD |  if_e	jmp	#LR__0112
02144     0D 4E 0E F2 | 	cmp	local01, #13 wz
02148     14 00 90 5D |  if_ne	jmp	#LR__0113
0214c     08 12 06 F1 | 	add	ptr___system__dat__, #8
02150     09 51 02 FB | 	rdlong	local02, ptr___system__dat__
02154     08 12 86 F1 | 	sub	ptr___system__dat__, #8
02158     02 50 CE F7 | 	test	local02, #2 wz
0215c     0A 4E 06 56 |  if_ne	mov	local01, #10
02160                 | LR__0113
02160     08 12 06 F1 | 	add	ptr___system__dat__, #8
02164     09 51 02 FB | 	rdlong	local02, ptr___system__dat__
02168     08 12 86 F1 | 	sub	ptr___system__dat__, #8
0216c     01 50 CE F7 | 	test	local02, #1 wz
02170     1C 00 90 AD |  if_e	jmp	#LR__0116
02174     7F 4E 0E F2 | 	cmp	local01, #127 wz
02178     0C 00 90 5D |  if_ne	jmp	#LR__0114
0217c     08 46 06 F6 | 	mov	arg01, #8
02180     58 FF BF FD | 	call	#__system___tx
02184     08 00 90 FD | 	jmp	#LR__0115
02188                 | LR__0114
02188     27 47 02 F6 | 	mov	arg01, local01
0218c     4C FF BF FD | 	call	#__system___tx
02190                 | LR__0115
02190                 | LR__0116
02190     27 21 02 F6 | 	mov	result1, local01
02194     AF F0 03 F6 | 	mov	ptra, fp
02198     BF 00 A0 FD | 	call	#popregs_
0219c                 | __system___rx_ret
0219c     2D 00 64 FD | 	ret
021a0                 | 
021a0                 | __system___waitms
021a0     03 5A 05 F6 | 	mov	COUNT_, #3
021a4     B0 00 A0 FD | 	call	#pushregs_
021a8     23 4F 02 F6 | 	mov	local01, arg01
021ac     14 50 06 FB | 	rdlong	local02, #20
021b0     64 DE 9F FE | 	loc	pa,	#(@LR__0118-@LR__0117)
021b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
021b8                 | LR__0117
021b8     01 00 00 FF 
021bc     E8 4F 5E F2 | 	cmps	local01, ##1000 wcz
021c0     1F 50 62 1D |  if_a	waitx	local02
021c4     01 00 00 1F 
021c8     E8 4F 86 11 |  if_a	sub	local01, ##1000
021cc     E8 FF 9F 1D |  if_a	jmp	#LR__0117
021d0                 | LR__0118
021d0     0C 12 06 F1 | 	add	ptr___system__dat__, #12
021d4     09 53 0A FB | 	rdlong	local03, ptr___system__dat__ wz
021d8     0C 12 86 F1 | 	sub	ptr___system__dat__, #12
021dc     20 00 90 5D |  if_ne	jmp	#LR__0119
021e0     28 EF 02 F6 | 	mov	muldiva_, local02
021e4     01 00 00 FF 
021e8     E8 F1 06 F6 | 	mov	muldivb_, ##1000
021ec     CC 00 A0 FD | 	call	#unsdivide_
021f0     78 53 02 F6 | 	mov	local03, muldivb_
021f4     0C 12 06 F1 | 	add	ptr___system__dat__, #12
021f8     09 F1 62 FC | 	wrlong	muldivb_, ptr___system__dat__
021fc     0C 12 86 F1 | 	sub	ptr___system__dat__, #12
02200                 | LR__0119
02200     00 4E 5E F2 | 	cmps	local01, #0 wcz
02204     29 4F 02 1D |  if_a	qmul	local01, local03
02208     18 46 62 1D |  if_a	getqx	arg01
0220c     1F 46 62 1D |  if_a	waitx	arg01
02210     AF F0 03 F6 | 	mov	ptra, fp
02214     BF 00 A0 FD | 	call	#popregs_
02218                 | __system___waitms_ret
02218     2D 00 64 FD | 	ret
0221c                 | 
0221c                 | __system___basic_open
0221c     05 5A 05 F6 | 	mov	COUNT_, #5
02220     B0 00 A0 FD | 	call	#pushregs_
02224     24 4F 02 F6 | 	mov	local01, arg02
02228     25 51 02 F6 | 	mov	local02, arg03
0222c     26 53 02 F6 | 	mov	local03, arg04
02230     D0 0C B0 FD | 	call	#__system____getftab
02234     10 55 0A F6 | 	mov	local04, result1 wz
02238     18 00 90 5D |  if_ne	jmp	#LR__0120
0223c     03 47 02 F6 | 	mov	arg01, abortchain
02240     0C 48 06 F6 | 	mov	arg02, #12
02244     01 4A 06 F6 | 	mov	arg03, #1
02248     F0 00 A0 FD | 	call	#__longjmp
0224c     01 20 66 F6 | 	neg	result1, #1
02250     70 00 90 FD | 	jmp	#LR__0124
02254                 | LR__0120
02254     00 4E 0E F2 | 	cmp	local01, #0 wz
02258     48 00 90 AD |  if_e	jmp	#LR__0122
0225c     04 46 06 F6 | 	mov	arg01, #4
02260     9C 04 B0 FD | 	call	#__system___gc_alloc_managed
02264     10 57 0A F6 | 	mov	local05, result1 wz
02268     18 00 90 5D |  if_ne	jmp	#LR__0121
0226c     03 47 02 F6 | 	mov	arg01, abortchain
02270     07 48 06 F6 | 	mov	arg02, #7
02274     01 4A 06 F6 | 	mov	arg03, #1
02278     F0 00 A0 FD | 	call	#__longjmp
0227c     01 20 66 F6 | 	neg	result1, #1
02280     40 00 90 FD | 	jmp	#LR__0124
02284                 | LR__0121
02284     2B 4F 62 FC | 	wrlong	local01, local05
02288     07 49 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
0228c     2B 47 02 F6 | 	mov	arg01, local05
02290     D0 FD BF FD | 	call	#__system___make_methodptr
02294     18 54 06 F1 | 	add	local04, #24
02298     2A 21 62 FC | 	wrlong	result1, local04
0229c     18 54 86 F1 | 	sub	local04, #24
022a0     0C 00 90 FD | 	jmp	#LR__0123
022a4                 | LR__0122
022a4     18 54 06 F1 | 	add	local04, #24
022a8     2A 4F 62 FC | 	wrlong	local01, local04
022ac     18 54 86 F1 | 	sub	local04, #24
022b0                 | LR__0123
022b0     1C 54 06 F1 | 	add	local04, #28
022b4     2A 51 62 FC | 	wrlong	local02, local04
022b8     04 54 06 F1 | 	add	local04, #4
022bc     2A 53 62 FC | 	wrlong	local03, local04
022c0     00 20 06 F6 | 	mov	result1, #0
022c4                 | LR__0124
022c4     AF F0 03 F6 | 	mov	ptra, fp
022c8     BF 00 A0 FD | 	call	#popregs_
022cc                 | __system___basic_open_ret
022cc     2D 00 64 FD | 	ret
022d0                 | 
022d0                 | __system___basic_print_string
022d0     03 5A 05 F6 | 	mov	COUNT_, #3
022d4     B0 00 A0 FD | 	call	#pushregs_
022d8     24 4F 02 F6 | 	mov	local01, arg02
022dc     25 51 02 F6 | 	mov	local02, arg03
022e0     0C 0D B0 FD | 	call	#__system___gettxfunc
022e4     10 53 0A F6 | 	mov	local03, result1 wz
022e8     00 20 06 A6 |  if_e	mov	result1, #0
022ec     1C 00 90 AD |  if_e	jmp	#LR__0125
022f0     00 4E 0E F2 | 	cmp	local01, #0 wz
022f4     00 20 06 A6 |  if_e	mov	result1, #0
022f8     10 00 90 AD |  if_e	jmp	#LR__0125
022fc     29 47 02 F6 | 	mov	arg01, local03
02300     28 49 02 F6 | 	mov	arg02, local02
02304     27 4B 02 F6 | 	mov	arg03, local01
02308     0C 00 B0 FD | 	call	#__system___fmtstr
0230c                 | LR__0125
0230c     AF F0 03 F6 | 	mov	ptra, fp
02310     BF 00 A0 FD | 	call	#popregs_
02314                 | __system___basic_print_string_ret
02314     2D 00 64 FD | 	ret
02318                 | 
02318                 | __system___fmtstr
02318     0E 5A 05 F6 | 	mov	COUNT_, #14
0231c     B0 00 A0 FD | 	call	#pushregs_
02320     23 4F 02 F6 | 	mov	local01, arg01
02324     24 51 02 F6 | 	mov	local02, arg02
02328     25 53 02 F6 | 	mov	local03, arg03
0232c     28 55 02 F6 | 	mov	local04, local02
02330     FF 54 06 F5 | 	and	local04, #255
02334     29 47 02 F6 | 	mov	arg01, local03
02338     00 56 06 F6 | 	mov	local05, #0
0233c     D0 DC 9F FE | 	loc	pa,	#(@LR__0127-@LR__0126)
02340     93 00 A0 FD | 	call	#FCACHE_LOAD_
02344                 | LR__0126
02344     23 59 CA FA | 	rdbyte	local06, arg01 wz
02348     01 56 06 51 |  if_ne	add	local05, #1
0234c     01 46 06 51 |  if_ne	add	arg01, #1
02350     F0 FF 9F 5D |  if_ne	jmp	#LR__0126
02354                 | LR__0127
02354     2B 21 02 F6 | 	mov	result1, local05
02358     10 5B 02 F6 | 	mov	local07, result1
0235c     00 54 0E F2 | 	cmp	local04, #0 wz
02360     04 00 90 AD |  if_e	jmp	#LR__0128
02364     2A 5B 7A F3 | 	fles	local07, local04 wcz
02368                 | LR__0128
02368     27 47 02 F6 | 	mov	arg01, local01
0236c     28 49 02 F6 | 	mov	arg02, local02
02370     2D 4B 02 F6 | 	mov	arg03, local07
02374     02 4C 06 F6 | 	mov	arg04, #2
02378     B4 0B B0 FD | 	call	#__system___fmtpad
0237c     10 5D 02 F6 | 	mov	local08, result1
02380     00 5C 5E F2 | 	cmps	local08, #0 wcz
02384     2E 21 02 C6 |  if_b	mov	result1, local08
02388     74 00 90 CD |  if_b	jmp	#LR__0131
0238c     00 5A 5E F2 | 	cmps	local07, #0 wcz
02390     44 00 90 ED |  if_be	jmp	#LR__0130
02394     2D 5F 02 F6 | 	mov	local09, local07
02398                 | LR__0129
02398     27 61 02 F6 | 	mov	local10, local01
0239c     30 63 02 FB | 	rdlong	local11, local10
023a0     04 60 06 F1 | 	add	local10, #4
023a4     30 65 02 FB | 	rdlong	local12, local10
023a8     29 47 C2 FA | 	rdbyte	arg01, local03
023ac     06 67 02 F6 | 	mov	local13, objptr
023b0     31 0D 02 F6 | 	mov	objptr, local11
023b4     01 52 06 F1 | 	add	local03, #1
023b8     2D 64 62 FD | 	call	local12
023bc     33 0D 02 F6 | 	mov	objptr, local13
023c0     10 69 02 F6 | 	mov	local14, result1
023c4     00 68 5E F2 | 	cmps	local14, #0 wcz
023c8     34 21 02 C6 |  if_b	mov	result1, local14
023cc     30 00 90 CD |  if_b	jmp	#LR__0131
023d0     34 5D 02 F1 | 	add	local08, local14
023d4     F0 5F 6E FB | 	djnz	local09, #LR__0129
023d8                 | LR__0130
023d8     27 47 02 F6 | 	mov	arg01, local01
023dc     28 49 02 F6 | 	mov	arg02, local02
023e0     2D 4B 02 F6 | 	mov	arg03, local07
023e4     01 4C 06 F6 | 	mov	arg04, #1
023e8     44 0B B0 FD | 	call	#__system___fmtpad
023ec     10 69 02 F6 | 	mov	local14, result1
023f0     00 68 5E F2 | 	cmps	local14, #0 wcz
023f4     34 21 02 C6 |  if_b	mov	result1, local14
023f8     34 5D 02 31 |  if_ae	add	local08, local14
023fc     2E 21 02 36 |  if_ae	mov	result1, local08
02400                 | LR__0131
02400     AF F0 03 F6 | 	mov	ptra, fp
02404     BF 00 A0 FD | 	call	#popregs_
02408                 | __system___fmtstr_ret
02408     2D 00 64 FD | 	ret
0240c                 | 
0240c                 | __system___gc_ptrs
0240c     0A 5A 05 F6 | 	mov	COUNT_, #10
02410     B0 00 A0 FD | 	call	#pushregs_
02414     02 4F 02 F6 | 	mov	local01, __heap_ptr
02418     27 51 02 F6 | 	mov	local02, local01
0241c     07 00 00 FF 
02420     F8 51 06 F1 | 	add	local02, ##4088
02424     27 53 0A FB | 	rdlong	local03, local01 wz
02428     74 00 90 5D |  if_ne	jmp	#LR__0132
0242c     28 55 02 F6 | 	mov	local04, local02
02430     27 55 82 F1 | 	sub	local04, local01
02434     27 03 58 FC | 	wrword	#1, local01
02438     27 57 02 F6 | 	mov	local05, local01
0243c     02 56 06 F1 | 	add	local05, #2
02440     36 00 80 FF 
02444     2B 21 59 FC | 	wrword	##27792, local05
02448     27 59 02 F6 | 	mov	local06, local01
0244c     04 58 06 F1 | 	add	local06, #4
02450     2C 01 58 FC | 	wrword	#0, local06
02454     27 5B 02 F6 | 	mov	local07, local01
02458     06 5A 06 F1 | 	add	local07, #6
0245c     2D 03 58 FC | 	wrword	#1, local07
02460     10 4E 06 F1 | 	add	local01, #16
02464     2A 53 52 F6 | 	abs	local03, local04 wc
02468     04 52 46 F0 | 	shr	local03, #4
0246c     29 53 62 C6 |  if_b	neg	local03, local03
02470     27 53 52 FC | 	wrword	local03, local01
02474     27 5D 02 F6 | 	mov	local08, local01
02478     02 5C 06 F1 | 	add	local08, #2
0247c     36 00 80 FF 
02480     2E 1F 59 FC | 	wrword	##27791, local08
02484     27 5F 02 F6 | 	mov	local09, local01
02488     04 5E 06 F1 | 	add	local09, #4
0248c     2F 01 58 FC | 	wrword	#0, local09
02490     27 61 02 F6 | 	mov	local10, local01
02494     06 60 06 F1 | 	add	local10, #6
02498     30 01 58 FC | 	wrword	#0, local10
0249c     10 4E 86 F1 | 	sub	local01, #16
024a0                 | LR__0132
024a0     28 23 02 F6 | 	mov	result2, local02
024a4     27 21 02 F6 | 	mov	result1, local01
024a8     AF F0 03 F6 | 	mov	ptra, fp
024ac     BF 00 A0 FD | 	call	#popregs_
024b0                 | __system___gc_ptrs_ret
024b0     2D 00 64 FD | 	ret
024b4                 | 
024b4                 | __system___gc_nextBlockPtr
024b4     02 5A 05 F6 | 	mov	COUNT_, #2
024b8     B0 00 A0 FD | 	call	#pushregs_
024bc     23 4F 02 F6 | 	mov	local01, arg01
024c0     27 51 EA FA | 	rdword	local02, local01 wz
024c4     10 00 90 5D |  if_ne	jmp	#LR__0133
024c8     1D 00 00 FF 
024cc     58 47 06 F6 | 	mov	arg01, ##@LR__0239
024d0     F8 01 B0 FD | 	call	#__system___gc_errmsg
024d4     0C 00 90 FD | 	jmp	#LR__0134
024d8                 | LR__0133
024d8     04 50 66 F0 | 	shl	local02, #4
024dc     27 21 02 F6 | 	mov	result1, local01
024e0     28 21 02 F1 | 	add	result1, local02
024e4                 | LR__0134
024e4     AF F0 03 F6 | 	mov	ptra, fp
024e8     BF 00 A0 FD | 	call	#popregs_
024ec                 | __system___gc_nextBlockPtr_ret
024ec     2D 00 64 FD | 	ret
024f0                 | 
024f0                 | __system___gc_tryalloc
024f0     1B 5A 05 F6 | 	mov	COUNT_, #27
024f4     B0 00 A0 FD | 	call	#pushregs_
024f8     23 4F 02 F6 | 	mov	local01, arg01
024fc     24 51 02 F6 | 	mov	local02, arg02
02500     08 FF BF FD | 	call	#__system___gc_ptrs
02504     10 53 02 F6 | 	mov	local03, result1
02508     11 55 02 F6 | 	mov	local04, result2
0250c     29 57 02 F6 | 	mov	local05, local03
02510     00 58 06 F6 | 	mov	local06, #0
02514     40 DB 9F FE | 	loc	pa,	#(@LR__0136-@LR__0135)
02518     93 00 A0 FD | 	call	#FCACHE_LOAD_
0251c                 | LR__0135
0251c     2B 5B 02 F6 | 	mov	local07, local05
02520     06 56 06 F1 | 	add	local05, #6
02524     2B 5D 02 F6 | 	mov	local08, local05
02528     29 5F 02 F6 | 	mov	local09, local03
0252c     2E 61 E2 FA | 	rdword	local10, local08
02530     2F 47 02 F6 | 	mov	arg01, local09
02534     30 49 0A F6 | 	mov	arg02, local10 wz
02538     00 20 06 A6 |  if_e	mov	result1, #0
0253c     04 48 66 50 |  if_ne	shl	arg02, #4
02540     24 47 02 51 |  if_ne	add	arg01, arg02
02544     23 21 02 56 |  if_ne	mov	result1, arg01
02548     10 63 02 F6 | 	mov	local11, result1
0254c     31 57 0A F6 | 	mov	local05, local11 wz
02550     2B 5F 02 56 |  if_ne	mov	local09, local05
02554     2F 65 02 56 |  if_ne	mov	local12, local09
02558     32 59 E2 5A |  if_ne	rdword	local06, local12
0255c     00 56 0E F2 | 	cmp	local05, #0 wz
02560     10 00 90 AD |  if_e	jmp	#LR__0137
02564     2A 57 5A F2 | 	cmps	local05, local04 wcz
02568     08 00 90 3D |  if_ae	jmp	#LR__0137
0256c     2C 4F 5A F2 | 	cmps	local01, local06 wcz
02570     A8 FF 9F 1D |  if_a	jmp	#LR__0135
02574                 | LR__0136
02574                 | LR__0137
02574     00 56 0E F2 | 	cmp	local05, #0 wz
02578     2B 21 02 A6 |  if_e	mov	result1, local05
0257c     40 01 90 AD |  if_e	jmp	#LR__0140
02580     2B 67 02 F6 | 	mov	local13, local05
02584     06 66 06 F1 | 	add	local13, #6
02588     33 69 E2 FA | 	rdword	local14, local13
0258c     2C 4F 5A F2 | 	cmps	local01, local06 wcz
02590     CC 00 90 3D |  if_ae	jmp	#LR__0139
02594     2B 6B 02 F6 | 	mov	local15, local05
02598     35 4F 52 FC | 	wrword	local01, local15
0259c     27 6D 02 F6 | 	mov	local16, local01
025a0     04 6C 66 F0 | 	shl	local16, #4
025a4     2B 6F 02 F6 | 	mov	local17, local05
025a8     36 6F 02 F1 | 	add	local17, local16
025ac     2C 71 02 F6 | 	mov	local18, local06
025b0     27 71 82 F1 | 	sub	local18, local01
025b4     37 73 02 F6 | 	mov	local19, local17
025b8     39 71 52 FC | 	wrword	local18, local19
025bc     37 75 02 F6 | 	mov	local20, local17
025c0     02 74 06 F1 | 	add	local20, #2
025c4     36 00 80 FF 
025c8     3A 1F 59 FC | 	wrword	##27791, local20
025cc     37 77 02 F6 | 	mov	local21, local17
025d0     04 76 06 F1 | 	add	local21, #4
025d4     2B 49 0A F6 | 	mov	arg02, local05 wz
025d8     00 20 06 A6 |  if_e	mov	result1, #0
025dc     29 49 82 51 |  if_ne	sub	arg02, local03
025e0     04 48 46 50 |  if_ne	shr	arg02, #4
025e4     24 21 02 56 |  if_ne	mov	result1, arg02
025e8     3B 21 52 FC | 	wrword	result1, local21
025ec     37 79 02 F6 | 	mov	local22, local17
025f0     33 5F E2 FA | 	rdword	local09, local13
025f4     06 78 06 F1 | 	add	local22, #6
025f8     3C 5F 52 FC | 	wrword	local09, local22
025fc     37 7B 02 F6 | 	mov	local23, local17
02600     3D 49 0A F6 | 	mov	arg02, local23 wz
02604     00 20 06 A6 |  if_e	mov	result1, #0
02608     29 49 82 51 |  if_ne	sub	arg02, local03
0260c     04 48 46 50 |  if_ne	shr	arg02, #4
02610     24 21 02 56 |  if_ne	mov	result1, arg02
02614     10 69 02 F6 | 	mov	local14, result1
02618     37 47 02 F6 | 	mov	arg01, local17
0261c     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
02620     10 7D 0A F6 | 	mov	local24, result1 wz
02624     38 00 90 AD |  if_e	jmp	#LR__0138
02628     2A 7D 5A F2 | 	cmps	local24, local04 wcz
0262c     30 00 90 3D |  if_ae	jmp	#LR__0138
02630     3E 7F 02 F6 | 	mov	local25, local24
02634     04 7E 06 F1 | 	add	local25, #4
02638     29 5F 02 F6 | 	mov	local09, local03
0263c     3D 61 02 F6 | 	mov	local10, local23
02640     2F 47 02 F6 | 	mov	arg01, local09
02644     30 49 0A F6 | 	mov	arg02, local10 wz
02648     00 20 06 A6 |  if_e	mov	result1, #0
0264c     23 49 82 51 |  if_ne	sub	arg02, arg01
02650     04 48 46 50 |  if_ne	shr	arg02, #4
02654     24 21 02 56 |  if_ne	mov	result1, arg02
02658     10 63 02 F6 | 	mov	local11, result1
0265c     3F 63 52 FC | 	wrword	local11, local25
02660                 | LR__0138
02660                 | LR__0139
02660     06 5A 06 F1 | 	add	local07, #6
02664     2D 69 52 FC | 	wrword	local14, local07
02668     36 00 00 FF 
0266c     80 5E 06 F6 | 	mov	local09, ##27776
02670     28 5F 42 F5 | 	or	local09, local02
02674     2B 81 02 F6 | 	mov	local26, local05
02678     02 80 06 F1 | 	add	local26, #2
0267c     01 20 62 FD | 	cogid	result1
02680     10 5F 42 F5 | 	or	local09, result1
02684     40 5F 52 FC | 	wrword	local09, local26
02688     29 83 02 F6 | 	mov	local27, local03
0268c     08 82 06 F1 | 	add	local27, #8
02690     41 5F E2 FA | 	rdword	local09, local27
02694     33 5F 52 FC | 	wrword	local09, local13
02698     2B 49 0A F6 | 	mov	arg02, local05 wz
0269c     00 20 06 A6 |  if_e	mov	result1, #0
026a0     29 49 82 51 |  if_ne	sub	arg02, local03
026a4     04 48 46 50 |  if_ne	shr	arg02, #4
026a8     24 21 02 56 |  if_ne	mov	result1, arg02
026ac     41 21 52 FC | 	wrword	result1, local27
026b0     08 56 06 F1 | 	add	local05, #8
026b4     2B 21 02 F6 | 	mov	result1, local05
026b8     00 C0 31 FF 
026bc     00 20 46 F5 | 	or	result1, ##1669332992
026c0                 | LR__0140
026c0     AF F0 03 F6 | 	mov	ptra, fp
026c4     BF 00 A0 FD | 	call	#popregs_
026c8                 | __system___gc_tryalloc_ret
026c8     2D 00 64 FD | 	ret
026cc                 | 
026cc                 | __system___gc_errmsg
026cc     02 5A 05 F6 | 	mov	COUNT_, #2
026d0     B0 00 A0 FD | 	call	#pushregs_
026d4     23 4F 02 F6 | 	mov	local01, arg01
026d8                 | LR__0141
026d8     27 51 CA FA | 	rdbyte	local02, local01 wz
026dc     01 4E 06 F1 | 	add	local01, #1
026e0     0C 00 90 AD |  if_e	jmp	#LR__0142
026e4     28 47 02 F6 | 	mov	arg01, local02
026e8     F0 F9 BF FD | 	call	#__system___tx
026ec     E8 FF 9F FD | 	jmp	#LR__0141
026f0                 | LR__0142
026f0     00 20 06 F6 | 	mov	result1, #0
026f4     AF F0 03 F6 | 	mov	ptra, fp
026f8     BF 00 A0 FD | 	call	#popregs_
026fc                 | __system___gc_errmsg_ret
026fc     2D 00 64 FD | 	ret
02700                 | 
02700                 | __system___gc_alloc_managed
02700     02 5A 05 F6 | 	mov	COUNT_, #2
02704     B0 00 A0 FD | 	call	#pushregs_
02708     23 4F 02 F6 | 	mov	local01, arg01
0270c     00 48 06 F6 | 	mov	arg02, #0
02710     30 00 B0 FD | 	call	#__system___gc_doalloc
02714     10 51 0A F6 | 	mov	local02, result1 wz
02718     18 00 90 5D |  if_ne	jmp	#LR__0143
0271c     00 4E 5E F2 | 	cmps	local01, #0 wcz
02720     10 00 90 ED |  if_be	jmp	#LR__0143
02724     1D 00 00 FF 
02728     74 47 06 F6 | 	mov	arg01, ##@LR__0240
0272c     9C FF BF FD | 	call	#__system___gc_errmsg
02730     04 00 90 FD | 	jmp	#LR__0144
02734                 | LR__0143
02734     28 21 02 F6 | 	mov	result1, local02
02738                 | LR__0144
02738     AF F0 03 F6 | 	mov	ptra, fp
0273c     BF 00 A0 FD | 	call	#popregs_
02740                 | __system___gc_alloc_managed_ret
02740     2D 00 64 FD | 	ret
02744                 | 
02744                 | __system___gc_doalloc
02744     07 5A 05 F6 | 	mov	COUNT_, #7
02748     B0 00 A0 FD | 	call	#pushregs_
0274c     23 4F 0A F6 | 	mov	local01, arg01 wz
02750     24 51 02 F6 | 	mov	local02, arg02
02754     00 20 06 A6 |  if_e	mov	result1, #0
02758     8C 00 90 AD |  if_e	jmp	#LR__0152
0275c     17 4E 06 F1 | 	add	local01, #23
02760     0F 4E 26 F5 | 	andn	local01, #15
02764     04 4E 46 F0 | 	shr	local01, #4
02768     14 12 06 F1 | 	add	ptr___system__dat__, #20
0276c     09 53 02 F6 | 	mov	local03, ptr___system__dat__
02770     29 47 02 F6 | 	mov	arg01, local03
02774     14 12 86 F1 | 	sub	ptr___system__dat__, #20
02778     28 F9 BF FD | 	call	#__system___lockmem
0277c     27 47 02 F6 | 	mov	arg01, local01
02780     28 49 02 F6 | 	mov	arg02, local02
02784     68 FD BF FD | 	call	#__system___gc_tryalloc
02788     10 55 0A F6 | 	mov	local04, result1 wz
0278c     14 00 90 5D |  if_ne	jmp	#LR__0145
02790     10 03 B0 FD | 	call	#__system___gc_docollect
02794     27 47 02 F6 | 	mov	arg01, local01
02798     28 49 02 F6 | 	mov	arg02, local02
0279c     50 FD BF FD | 	call	#__system___gc_tryalloc
027a0     10 55 02 F6 | 	mov	local04, result1
027a4                 | LR__0145
027a4     29 01 68 FC | 	wrlong	#0, local03
027a8     00 54 0E F2 | 	cmp	local04, #0 wz
027ac     34 00 90 AD |  if_e	jmp	#LR__0151
027b0     04 4E 66 F0 | 	shl	local01, #4
027b4     08 4E 86 F1 | 	sub	local01, #8
027b8     27 57 52 F6 | 	abs	local05, local01 wc
027bc     02 56 46 F0 | 	shr	local05, #2
027c0     2B 57 62 C6 |  if_b	neg	local05, local05
027c4     2B 59 0A F6 | 	mov	local06, local05 wz
027c8     2A 5B 02 F6 | 	mov	local07, local04
027cc     14 00 90 AD |  if_e	jmp	#LR__0150
027d0     38 D8 9F FE | 	loc	pa,	#(@LR__0148-@LR__0146)
027d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
027d8                 | LR__0146
027d8     2C 05 D8 FC | 	rep	@LR__0149, local06
027dc                 | LR__0147
027dc     2D 01 68 FC | 	wrlong	#0, local07
027e0     04 5A 06 F1 | 	add	local07, #4
027e4                 | LR__0148
027e4                 | LR__0149
027e4                 | LR__0150
027e4                 | LR__0151
027e4     2A 21 02 F6 | 	mov	result1, local04
027e8                 | LR__0152
027e8     AF F0 03 F6 | 	mov	ptra, fp
027ec     BF 00 A0 FD | 	call	#popregs_
027f0                 | __system___gc_doalloc_ret
027f0     2D 00 64 FD | 	ret
027f4                 | 
027f4                 | __system___gc_isvalidptr
027f4     25 27 02 F6 | 	mov	_var01, arg03
027f8     13 29 02 F6 | 	mov	_var02, _var01
027fc     00 F8 7F FF 
02800     00 28 06 F5 | 	and	_var02, ##-1048576
02804     00 C0 31 FF 
02808     00 28 0E F2 | 	cmp	_var02, ##1669332992 wz
0280c     00 20 06 56 |  if_ne	mov	result1, #0
02810     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
02814     08 26 86 F1 | 	sub	_var01, #8
02818     13 2B 02 F6 | 	mov	_var03, _var01
0281c     00 F8 7F FF 
02820     00 2A 26 F5 | 	andn	_var03, ##-1048576
02824     23 2B 5A F2 | 	cmps	_var03, arg01 wcz
02828     08 00 90 CD |  if_b	jmp	#LR__0153
0282c     24 2B 5A F2 | 	cmps	_var03, arg02 wcz
02830     08 00 90 CD |  if_b	jmp	#LR__0154
02834                 | LR__0153
02834     00 20 06 F6 | 	mov	result1, #0
02838     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
0283c                 | LR__0154
0283c     15 29 02 F6 | 	mov	_var02, _var03
02840     23 29 62 F5 | 	xor	_var02, arg01
02844     0F 28 0E F5 | 	and	_var02, #15 wz
02848     00 20 06 56 |  if_ne	mov	result1, #0
0284c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
02850     15 2D 02 F6 | 	mov	_var04, _var03
02854     02 2C 06 F1 | 	add	_var04, #2
02858     16 29 E2 FA | 	rdword	_var02, _var04
0285c     7F 00 00 FF 
02860     C0 29 06 F5 | 	and	_var02, ##65472
02864     36 00 00 FF 
02868     80 28 0E F2 | 	cmp	_var02, ##27776 wz
0286c     00 20 06 56 |  if_ne	mov	result1, #0
02870     15 21 02 A6 |  if_e	mov	result1, _var03
02874                 | __system___gc_isvalidptr_ret
02874     2D 00 64 FD | 	ret
02878                 | 
02878                 | __system___gc_dofree
02878     1A 5A 05 F6 | 	mov	COUNT_, #26
0287c     B0 00 A0 FD | 	call	#pushregs_
02880     23 4F 02 F6 | 	mov	local01, arg01
02884     84 FB BF FD | 	call	#__system___gc_ptrs
02888     11 51 02 F6 | 	mov	local02, result2
0288c     10 53 02 F6 | 	mov	local03, result1
02890     27 55 02 F6 | 	mov	local04, local01
02894     02 54 06 F1 | 	add	local04, #2
02898     36 00 80 FF 
0289c     2A 1F 59 FC | 	wrword	##27791, local04
028a0     27 57 02 F6 | 	mov	local05, local01
028a4     27 47 02 F6 | 	mov	arg01, local01
028a8     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
028ac     10 59 02 F6 | 	mov	local06, result1
028b0     9C D7 9F FE | 	loc	pa,	#(@LR__0156-@LR__0155)
028b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
028b8                 | LR__0155
028b8     04 56 06 F1 | 	add	local05, #4
028bc     2B 5B 02 F6 | 	mov	local07, local05
028c0     2D 49 EA FA | 	rdword	arg02, local07 wz
028c4     29 47 02 F6 | 	mov	arg01, local03
028c8     00 20 06 A6 |  if_e	mov	result1, #0
028cc     04 48 66 50 |  if_ne	shl	arg02, #4
028d0     24 47 02 51 |  if_ne	add	arg01, arg02
028d4     23 21 02 56 |  if_ne	mov	result1, arg01
028d8     10 57 0A F6 | 	mov	local05, result1 wz
028dc     28 00 90 AD |  if_e	jmp	#LR__0157
028e0     2B 47 02 F6 | 	mov	arg01, local05
028e4     00 5C 06 F6 | 	mov	local08, #0
028e8     02 46 06 F1 | 	add	arg01, #2
028ec     23 5F E2 FA | 	rdword	local09, arg01
028f0     36 00 00 FF 
028f4     8F 5E 0E F2 | 	cmp	local09, ##27791 wz
028f8     01 5C 66 A6 |  if_e	neg	local08, #1
028fc     2E 21 02 F6 | 	mov	result1, local08
02900     10 61 0A F6 | 	mov	local10, result1 wz
02904     B0 FF 9F AD |  if_e	jmp	#LR__0155
02908                 | LR__0156
02908                 | LR__0157
02908     00 56 0E F2 | 	cmp	local05, #0 wz
0290c     29 57 02 A6 |  if_e	mov	local05, local03
02910     2B 63 02 F6 | 	mov	local11, local05
02914     06 62 06 F1 | 	add	local11, #6
02918     27 65 02 F6 | 	mov	local12, local01
0291c     31 67 E2 FA | 	rdword	local13, local11
02920     06 64 06 F1 | 	add	local12, #6
02924     32 67 52 FC | 	wrword	local13, local12
02928     27 49 0A F6 | 	mov	arg02, local01 wz
0292c     00 20 06 A6 |  if_e	mov	result1, #0
02930     29 49 82 51 |  if_ne	sub	arg02, local03
02934     04 48 46 50 |  if_ne	shr	arg02, #4
02938     24 21 02 56 |  if_ne	mov	result1, arg02
0293c     10 69 02 F6 | 	mov	local14, result1
02940     31 69 52 FC | 	wrword	local14, local11
02944     29 57 0A F2 | 	cmp	local05, local03 wz
02948     74 00 90 AD |  if_e	jmp	#LR__0160
0294c     2B 47 02 F6 | 	mov	arg01, local05
02950     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
02954     27 21 0A F2 | 	cmp	result1, local01 wz
02958     64 00 90 5D |  if_ne	jmp	#LR__0159
0295c     2B 6B 02 F6 | 	mov	local15, local05
02960     35 6D E2 FA | 	rdword	local16, local15
02964     27 6F 02 F6 | 	mov	local17, local01
02968     37 61 E2 FA | 	rdword	local10, local17
0296c     30 6D 02 F1 | 	add	local16, local10
02970     35 6D 52 FC | 	wrword	local16, local15
02974     2A 01 58 FC | 	wrword	#0, local04
02978     27 47 02 F6 | 	mov	arg01, local01
0297c     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
02980     10 59 02 F6 | 	mov	local06, result1
02984     28 59 5A F2 | 	cmps	local06, local02 wcz
02988     24 00 90 3D |  if_ae	jmp	#LR__0158
0298c     2C 71 02 F6 | 	mov	local18, local06
02990     04 70 06 F1 | 	add	local18, #4
02994     2B 49 0A F6 | 	mov	arg02, local05 wz
02998     00 20 06 A6 |  if_e	mov	result1, #0
0299c     29 49 82 51 |  if_ne	sub	arg02, local03
029a0     04 48 46 50 |  if_ne	shr	arg02, #4
029a4     24 21 02 56 |  if_ne	mov	result1, arg02
029a8     10 69 02 F6 | 	mov	local14, result1
029ac     38 69 52 FC | 	wrword	local14, local18
029b0                 | LR__0158
029b0     32 67 E2 FA | 	rdword	local13, local12
029b4     31 67 52 FC | 	wrword	local13, local11
029b8     32 01 58 FC | 	wrword	#0, local12
029bc     2B 4F 02 F6 | 	mov	local01, local05
029c0                 | LR__0159
029c0                 | LR__0160
029c0     27 47 02 F6 | 	mov	arg01, local01
029c4     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
029c8     10 73 0A F6 | 	mov	local19, result1 wz
029cc     C4 00 90 AD |  if_e	jmp	#LR__0162
029d0     28 73 5A F2 | 	cmps	local19, local02 wcz
029d4     BC 00 90 3D |  if_ae	jmp	#LR__0162
029d8     39 47 02 F6 | 	mov	arg01, local19
029dc     00 5C 06 F6 | 	mov	local08, #0
029e0     02 46 06 F1 | 	add	arg01, #2
029e4     23 5F E2 FA | 	rdword	local09, arg01
029e8     36 00 00 FF 
029ec     8F 5E 0E F2 | 	cmp	local09, ##27791 wz
029f0     01 5C 66 A6 |  if_e	neg	local08, #1
029f4     2E 21 0A F6 | 	mov	result1, local08 wz
029f8     98 00 90 AD |  if_e	jmp	#LR__0162
029fc     27 57 02 F6 | 	mov	local05, local01
02a00     39 4F 02 F6 | 	mov	local01, local19
02a04     2B 75 02 F6 | 	mov	local20, local05
02a08     3A 77 E2 FA | 	rdword	local21, local20
02a0c     27 79 02 F6 | 	mov	local22, local01
02a10     3C 61 E2 FA | 	rdword	local10, local22
02a14     30 77 02 F1 | 	add	local21, local10
02a18     3A 77 52 FC | 	wrword	local21, local20
02a1c     27 7B 02 F6 | 	mov	local23, local01
02a20     06 7A 06 F1 | 	add	local23, #6
02a24     2B 7D 02 F6 | 	mov	local24, local05
02a28     3D 67 E2 FA | 	rdword	local13, local23
02a2c     06 7C 06 F1 | 	add	local24, #6
02a30     3E 67 52 FC | 	wrword	local13, local24
02a34     27 7F 02 F6 | 	mov	local25, local01
02a38     02 7E 06 F1 | 	add	local25, #2
02a3c     3F 55 59 FC | 	wrword	#170, local25
02a40     3D 01 58 FC | 	wrword	#0, local23
02a44     27 67 02 F6 | 	mov	local13, local01
02a48     33 47 02 F6 | 	mov	arg01, local13
02a4c     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
02a50     10 61 02 F6 | 	mov	local10, result1
02a54     30 59 0A F6 | 	mov	local06, local10 wz
02a58     38 00 90 AD |  if_e	jmp	#LR__0161
02a5c     28 59 5A F2 | 	cmps	local06, local02 wcz
02a60     30 00 90 3D |  if_ae	jmp	#LR__0161
02a64     2C 81 02 F6 | 	mov	local26, local06
02a68     04 80 06 F1 | 	add	local26, #4
02a6c     29 67 02 F6 | 	mov	local13, local03
02a70     2B 61 02 F6 | 	mov	local10, local05
02a74     33 47 02 F6 | 	mov	arg01, local13
02a78     30 49 0A F6 | 	mov	arg02, local10 wz
02a7c     00 20 06 A6 |  if_e	mov	result1, #0
02a80     23 49 82 51 |  if_ne	sub	arg02, arg01
02a84     04 48 46 50 |  if_ne	shr	arg02, #4
02a88     24 21 02 56 |  if_ne	mov	result1, arg02
02a8c     10 69 02 F6 | 	mov	local14, result1
02a90     40 69 52 FC | 	wrword	local14, local26
02a94                 | LR__0161
02a94                 | LR__0162
02a94     2C 21 02 F6 | 	mov	result1, local06
02a98     AF F0 03 F6 | 	mov	ptra, fp
02a9c     BF 00 A0 FD | 	call	#popregs_
02aa0                 | __system___gc_dofree_ret
02aa0     2D 00 64 FD | 	ret
02aa4                 | 
02aa4                 | __system___gc_docollect
02aa4     0C 5A 05 F6 | 	mov	COUNT_, #12
02aa8     B0 00 A0 FD | 	call	#pushregs_
02aac     5C F9 BF FD | 	call	#__system___gc_ptrs
02ab0     11 4F 02 F6 | 	mov	local01, result2
02ab4     10 51 02 F6 | 	mov	local02, result1
02ab8     28 47 02 F6 | 	mov	arg01, local02
02abc     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
02ac0     10 53 0A F6 | 	mov	local03, result1 wz
02ac4     01 20 62 FD | 	cogid	result1
02ac8     10 55 02 F6 | 	mov	local04, result1
02acc     2C 00 90 AD |  if_e	jmp	#LR__0164
02ad0                 | LR__0163
02ad0     27 53 5A F2 | 	cmps	local03, local01 wcz
02ad4     24 00 90 3D |  if_ae	jmp	#LR__0164
02ad8     29 57 02 F6 | 	mov	local05, local03
02adc     02 56 06 F1 | 	add	local05, #2
02ae0     2B 59 E2 FA | 	rdword	local06, local05
02ae4     20 58 26 F5 | 	andn	local06, #32
02ae8     2B 59 52 FC | 	wrword	local06, local05
02aec     29 47 02 F6 | 	mov	arg01, local03
02af0     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
02af4     10 53 0A F6 | 	mov	local03, result1 wz
02af8     D4 FF 9F 5D |  if_ne	jmp	#LR__0163
02afc                 | LR__0164
02afc     00 5A 06 F6 | 	mov	local07, #0
02b00     00 46 06 F6 | 	mov	arg01, #0
02b04     34 F5 BF FD | 	call	#__system____topofstack
02b08     10 5D 02 F6 | 	mov	local08, result1
02b0c     2D 47 02 F6 | 	mov	arg01, local07
02b10     2E 49 02 F6 | 	mov	arg02, local08
02b14     A0 00 B0 FD | 	call	#__system___gc_markhub
02b18     2C 01 B0 FD | 	call	#__system___gc_markcog
02b1c     28 47 02 F6 | 	mov	arg01, local02
02b20     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
02b24     10 5F 0A F6 | 	mov	local09, result1 wz
02b28     10 00 90 5D |  if_ne	jmp	#LR__0165
02b2c     1D 00 00 FF 
02b30     91 47 06 F6 | 	mov	arg01, ##@LR__0241
02b34     94 FB BF FD | 	call	#__system___gc_errmsg
02b38     70 00 90 FD | 	jmp	#LR__0171
02b3c                 | LR__0165
02b3c                 | LR__0166
02b3c     2F 53 02 F6 | 	mov	local03, local09
02b40     29 47 02 F6 | 	mov	arg01, local03
02b44     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
02b48     10 5F 02 F6 | 	mov	local09, result1
02b4c     29 61 02 F6 | 	mov	local10, local03
02b50     02 60 06 F1 | 	add	local10, #2
02b54     30 63 E2 FA | 	rdword	local11, local10
02b58     20 62 CE F7 | 	test	local11, #32 wz
02b5c     3C 00 90 5D |  if_ne	jmp	#LR__0169
02b60     31 65 02 F6 | 	mov	local12, local11
02b64     10 64 0E F5 | 	and	local12, #16 wz
02b68     30 00 90 5D |  if_ne	jmp	#LR__0169
02b6c     31 5B 02 F6 | 	mov	local07, local11
02b70     0F 5A 06 F5 | 	and	local07, #15
02b74     2D 63 02 F6 | 	mov	local11, local07
02b78     2A 63 0A F2 | 	cmp	local11, local04 wz
02b7c     08 00 90 AD |  if_e	jmp	#LR__0167
02b80     0E 62 0E F2 | 	cmp	local11, #14 wz
02b84     14 00 90 5D |  if_ne	jmp	#LR__0168
02b88                 | LR__0167
02b88     29 5B 02 F6 | 	mov	local07, local03
02b8c     2D 47 02 F6 | 	mov	arg01, local07
02b90     E4 FC BF FD | 	call	#__system___gc_dofree
02b94     10 65 02 F6 | 	mov	local12, result1
02b98     32 5F 02 F6 | 	mov	local09, local12
02b9c                 | LR__0168
02b9c                 | LR__0169
02b9c     00 5E 0E F2 | 	cmp	local09, #0 wz
02ba0     08 00 90 AD |  if_e	jmp	#LR__0170
02ba4     27 5F 5A F2 | 	cmps	local09, local01 wcz
02ba8     90 FF 9F CD |  if_b	jmp	#LR__0166
02bac                 | LR__0170
02bac                 | LR__0171
02bac     AF F0 03 F6 | 	mov	ptra, fp
02bb0     BF 00 A0 FD | 	call	#popregs_
02bb4                 | __system___gc_docollect_ret
02bb4     2D 00 64 FD | 	ret
02bb8                 | 
02bb8                 | __system___gc_markhub
02bb8     0A 5A 05 F6 | 	mov	COUNT_, #10
02bbc     B0 00 A0 FD | 	call	#pushregs_
02bc0     23 4F 02 F6 | 	mov	local01, arg01
02bc4     24 51 02 F6 | 	mov	local02, arg02
02bc8     40 F8 BF FD | 	call	#__system___gc_ptrs
02bcc     10 53 02 F6 | 	mov	local03, result1
02bd0     11 55 02 F6 | 	mov	local04, result2
02bd4                 | LR__0172
02bd4     28 4F 5A F2 | 	cmps	local01, local02 wcz
02bd8     60 00 90 3D |  if_ae	jmp	#LR__0173
02bdc     27 4B 02 FB | 	rdlong	arg03, local01
02be0     04 4E 06 F1 | 	add	local01, #4
02be4     29 47 02 F6 | 	mov	arg01, local03
02be8     2A 49 02 F6 | 	mov	arg02, local04
02bec     04 FC BF FD | 	call	#__system___gc_isvalidptr
02bf0     10 57 0A F6 | 	mov	local05, result1 wz
02bf4     DC FF 9F AD |  if_e	jmp	#LR__0172
02bf8     2B 47 02 F6 | 	mov	arg01, local05
02bfc     00 58 06 F6 | 	mov	local06, #0
02c00     02 46 06 F1 | 	add	arg01, #2
02c04     23 5B E2 FA | 	rdword	local07, arg01
02c08     36 00 00 FF 
02c0c     8F 5A 0E F2 | 	cmp	local07, ##27791 wz
02c10     01 58 66 A6 |  if_e	neg	local06, #1
02c14     2C 21 02 F6 | 	mov	result1, local06
02c18     10 5D 0A F6 | 	mov	local08, result1 wz
02c1c     B4 FF 9F 5D |  if_ne	jmp	#LR__0172
02c20     2B 5F 02 F6 | 	mov	local09, local05
02c24     02 5E 06 F1 | 	add	local09, #2
02c28     2F 61 E2 FA | 	rdword	local10, local09
02c2c     0F 60 26 F5 | 	andn	local10, #15
02c30     2E 60 46 F5 | 	or	local10, #46
02c34     2F 61 52 FC | 	wrword	local10, local09
02c38     98 FF 9F FD | 	jmp	#LR__0172
02c3c                 | LR__0173
02c3c     AF F0 03 F6 | 	mov	ptra, fp
02c40     BF 00 A0 FD | 	call	#popregs_
02c44                 | __system___gc_markhub_ret
02c44     2D 00 64 FD | 	ret
02c48                 | 
02c48                 | __system___gc_markcog
02c48     06 5A 05 F6 | 	mov	COUNT_, #6
02c4c     B0 00 A0 FD | 	call	#pushregs_
02c50     B8 F7 BF FD | 	call	#__system___gc_ptrs
02c54     10 4F 02 F6 | 	mov	local01, result1
02c58     11 51 02 F6 | 	mov	local02, result2
02c5c     00 52 06 F6 | 	mov	local03, #0
02c60                 | LR__0174
02c60     F0 55 06 F6 | 	mov	local04, #496
02c64     29 55 82 F1 | 	sub	local04, local03
02c68     F0 55 06 F1 | 	add	local04, #496
02c6c                 | 	'.live	local04
02c6c     00 54 96 F9 | 	alts	local04, #0
02c70     2A 57 02 F6 | 	mov	local05, local04
02c74     28 49 02 F6 | 	mov	arg02, local02
02c78     27 47 02 F6 | 	mov	arg01, local01
02c7c     2B 4B 02 F6 | 	mov	arg03, local05
02c80     70 FB BF FD | 	call	#__system___gc_isvalidptr
02c84     10 57 0A F6 | 	mov	local05, result1 wz
02c88     10 00 90 AD |  if_e	jmp	#LR__0175
02c8c     02 56 06 F1 | 	add	local05, #2
02c90     2B 59 E2 FA | 	rdword	local06, local05
02c94     20 58 46 F5 | 	or	local06, #32
02c98     2B 59 52 FC | 	wrword	local06, local05
02c9c                 | LR__0175
02c9c     01 52 06 F1 | 	add	local03, #1
02ca0     F0 53 5E F2 | 	cmps	local03, #496 wcz
02ca4     B8 FF 9F CD |  if_b	jmp	#LR__0174
02ca8     AF F0 03 F6 | 	mov	ptra, fp
02cac     BF 00 A0 FD | 	call	#popregs_
02cb0                 | __system___gc_markcog_ret
02cb0     2D 00 64 FD | 	ret
02cb4                 | 
02cb4                 | __system__write
02cb4     03 5A 05 F6 | 	mov	COUNT_, #3
02cb8     B0 00 A0 FD | 	call	#pushregs_
02cbc     23 4F 02 F6 | 	mov	local01, arg01
02cc0     24 51 02 F6 | 	mov	local02, arg02
02cc4     25 53 02 F6 | 	mov	local03, arg03
02cc8     0A 4E 1E F2 | 	cmp	local01, #10 wcz
02ccc     1C 00 90 CD |  if_b	jmp	#LR__0176
02cd0     01 00 00 FF 
02cd4     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
02cd8     09 0B 68 FC | 	wrlong	#5, ptr___system__dat__
02cdc     01 00 00 FF 
02ce0     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
02ce4     01 20 66 F6 | 	neg	result1, #1
02ce8     28 00 90 FD | 	jmp	#LR__0177
02cec                 | LR__0176
02cec     27 47 02 F6 | 	mov	arg01, local01
02cf0     01 46 66 F0 | 	shl	arg01, #1
02cf4     27 47 02 F1 | 	add	arg01, local01
02cf8     04 46 66 F0 | 	shl	arg01, #4
02cfc     1C 12 06 F1 | 	add	ptr___system__dat__, #28
02d00     09 47 02 F1 | 	add	arg01, ptr___system__dat__
02d04     28 49 02 F6 | 	mov	arg02, local02
02d08     29 4B 02 F6 | 	mov	arg03, local03
02d0c     1C 12 86 F1 | 	sub	ptr___system__dat__, #28
02d10     74 08 B0 FD | 	call	#__system___vfswrite
02d14                 | LR__0177
02d14     AF F0 03 F6 | 	mov	ptra, fp
02d18     BF 00 A0 FD | 	call	#popregs_
02d1c                 | __system__write_ret
02d1c     2D 00 64 FD | 	ret
02d20                 | 
02d20                 | __system__read
02d20     03 5A 05 F6 | 	mov	COUNT_, #3
02d24     B0 00 A0 FD | 	call	#pushregs_
02d28     23 4F 02 F6 | 	mov	local01, arg01
02d2c     24 51 02 F6 | 	mov	local02, arg02
02d30     25 53 02 F6 | 	mov	local03, arg03
02d34     0A 4E 1E F2 | 	cmp	local01, #10 wcz
02d38     1C 00 90 CD |  if_b	jmp	#LR__0178
02d3c     01 00 00 FF 
02d40     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
02d44     09 0B 68 FC | 	wrlong	#5, ptr___system__dat__
02d48     01 00 00 FF 
02d4c     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
02d50     01 20 66 F6 | 	neg	result1, #1
02d54     28 00 90 FD | 	jmp	#LR__0179
02d58                 | LR__0178
02d58     27 47 02 F6 | 	mov	arg01, local01
02d5c     01 46 66 F0 | 	shl	arg01, #1
02d60     27 47 02 F1 | 	add	arg01, local01
02d64     04 46 66 F0 | 	shl	arg01, #4
02d68     1C 12 06 F1 | 	add	ptr___system__dat__, #28
02d6c     09 47 02 F1 | 	add	arg01, ptr___system__dat__
02d70     28 49 02 F6 | 	mov	arg02, local02
02d74     29 4B 02 F6 | 	mov	arg03, local03
02d78     1C 12 86 F1 | 	sub	ptr___system__dat__, #28
02d7c     CC 09 B0 FD | 	call	#__system___vfsread
02d80                 | LR__0179
02d80     AF F0 03 F6 | 	mov	ptra, fp
02d84     BF 00 A0 FD | 	call	#popregs_
02d88                 | __system__read_ret
02d88     2D 00 64 FD | 	ret
02d8c                 | 
02d8c                 | __system__close
02d8c     01 5A 05 F6 | 	mov	COUNT_, #1
02d90     B0 00 A0 FD | 	call	#pushregs_
02d94     23 4F 02 F6 | 	mov	local01, arg01
02d98     0A 4E 1E F2 | 	cmp	local01, #10 wcz
02d9c     1C 00 90 CD |  if_b	jmp	#LR__0180
02da0     01 00 00 FF 
02da4     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
02da8     09 0B 68 FC | 	wrlong	#5, ptr___system__dat__
02dac     01 00 00 FF 
02db0     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
02db4     01 20 66 F6 | 	neg	result1, #1
02db8     20 00 90 FD | 	jmp	#LR__0181
02dbc                 | LR__0180
02dbc     27 47 02 F6 | 	mov	arg01, local01
02dc0     01 46 66 F0 | 	shl	arg01, #1
02dc4     27 47 02 F1 | 	add	arg01, local01
02dc8     04 46 66 F0 | 	shl	arg01, #4
02dcc     1C 12 06 F1 | 	add	ptr___system__dat__, #28
02dd0     09 47 02 F1 | 	add	arg01, ptr___system__dat__
02dd4     1C 12 86 F1 | 	sub	ptr___system__dat__, #28
02dd8     A8 02 B0 FD | 	call	#__system___closeraw
02ddc                 | LR__0181
02ddc     AF F0 03 F6 | 	mov	ptra, fp
02de0     BF 00 A0 FD | 	call	#popregs_
02de4                 | __system__close_ret
02de4     2D 00 64 FD | 	ret
02de8                 | 
02de8                 | __system__lseek
02de8     09 5A 05 F6 | 	mov	COUNT_, #9
02dec     B0 00 A0 FD | 	call	#pushregs_
02df0     23 4F 02 F6 | 	mov	local01, arg01
02df4     24 51 02 F6 | 	mov	local02, arg02
02df8     25 53 02 F6 | 	mov	local03, arg03
02dfc     0A 4E 1E F2 | 	cmp	local01, #10 wcz
02e00     1C 00 90 CD |  if_b	jmp	#LR__0182
02e04     01 00 00 FF 
02e08     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
02e0c     09 0B 68 FC | 	wrlong	#5, ptr___system__dat__
02e10     01 00 00 FF 
02e14     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
02e18     01 20 66 F6 | 	neg	result1, #1
02e1c     D8 00 90 FD | 	jmp	#LR__0186
02e20                 | LR__0182
02e20     27 55 02 F6 | 	mov	local04, local01
02e24     01 54 66 F0 | 	shl	local04, #1
02e28     27 55 02 F1 | 	add	local04, local01
02e2c     04 54 66 F0 | 	shl	local04, #4
02e30     1C 12 06 F1 | 	add	ptr___system__dat__, #28
02e34     09 55 02 F1 | 	add	local04, ptr___system__dat__
02e38     2C 54 06 F1 | 	add	local04, #44
02e3c     2A 57 0A FB | 	rdlong	local05, local04 wz
02e40     2C 54 86 F1 | 	sub	local04, #44
02e44     1C 12 86 F1 | 	sub	ptr___system__dat__, #28
02e48     1C 00 90 5D |  if_ne	jmp	#LR__0183
02e4c     01 00 00 FF 
02e50     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
02e54     09 21 68 FC | 	wrlong	#16, ptr___system__dat__
02e58     01 00 00 FF 
02e5c     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
02e60     01 20 66 F6 | 	neg	result1, #1
02e64     90 00 90 FD | 	jmp	#LR__0186
02e68                 | LR__0183
02e68     08 54 06 F1 | 	add	local04, #8
02e6c     2A 57 02 FB | 	rdlong	local05, local04
02e70     08 54 86 F1 | 	sub	local04, #8
02e74     40 56 CE F7 | 	test	local05, #64 wz
02e78     14 00 90 AD |  if_e	jmp	#LR__0184
02e7c     08 54 06 F1 | 	add	local04, #8
02e80     2A 57 02 FB | 	rdlong	local05, local04
02e84     80 56 46 F5 | 	or	local05, #128
02e88     2A 57 62 FC | 	wrlong	local05, local04
02e8c     08 54 86 F1 | 	sub	local04, #8
02e90                 | LR__0184
02e90     2C 54 06 F1 | 	add	local04, #44
02e94     2A 57 02 FB | 	rdlong	local05, local04
02e98     2C 54 86 F1 | 	sub	local04, #44
02e9c     2B 59 02 FB | 	rdlong	local06, local05
02ea0     04 56 06 F1 | 	add	local05, #4
02ea4     2B 5B 02 FB | 	rdlong	local07, local05
02ea8     2A 47 02 F6 | 	mov	arg01, local04
02eac     28 49 02 F6 | 	mov	arg02, local02
02eb0     29 4B 02 F6 | 	mov	arg03, local03
02eb4     06 5D 02 F6 | 	mov	local08, objptr
02eb8     2C 0D 02 F6 | 	mov	objptr, local06
02ebc     2D 5A 62 FD | 	call	local07
02ec0     2E 0D 02 F6 | 	mov	objptr, local08
02ec4     10 5F 02 F6 | 	mov	local09, result1
02ec8     00 5E 5E F2 | 	cmps	local09, #0 wcz
02ecc     24 00 90 3D |  if_ae	jmp	#LR__0185
02ed0     2F 47 6A F6 | 	neg	arg01, local09 wz
02ed4     01 00 00 FF 
02ed8     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
02edc     09 47 62 FC | 	wrlong	arg01, ptr___system__dat__
02ee0     01 00 00 FF 
02ee4     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
02ee8     01 20 66 56 |  if_ne	neg	result1, #1
02eec     00 20 06 A6 |  if_e	mov	result1, #0
02ef0     04 00 90 FD | 	jmp	#LR__0186
02ef4                 | LR__0185
02ef4     2F 21 02 F6 | 	mov	result1, local09
02ef8                 | LR__0186
02ef8     AF F0 03 F6 | 	mov	ptra, fp
02efc     BF 00 A0 FD | 	call	#popregs_
02f00                 | __system__lseek_ret
02f00     2D 00 64 FD | 	ret
02f04                 | 
02f04                 | __system____getftab
02f04     0A 46 1E F2 | 	cmp	arg01, #10 wcz
02f08     00 20 06 36 |  if_ae	mov	result1, #0
02f0c     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
02f10     23 21 02 F6 | 	mov	result1, arg01
02f14     01 20 66 F0 | 	shl	result1, #1
02f18     23 21 02 F1 | 	add	result1, arg01
02f1c     04 20 66 F0 | 	shl	result1, #4
02f20     1C 12 06 F1 | 	add	ptr___system__dat__, #28
02f24     09 21 02 F1 | 	add	result1, ptr___system__dat__
02f28     1C 12 86 F1 | 	sub	ptr___system__dat__, #28
02f2c                 | __system____getftab_ret
02f2c     2D 00 64 FD | 	ret
02f30                 | 
02f30                 | __system___fmtpad
02f30     0C 5A 05 F6 | 	mov	COUNT_, #12
02f34     B0 00 A0 FD | 	call	#pushregs_
02f38     23 4F 02 F6 | 	mov	local01, arg01
02f3c     24 51 02 F6 | 	mov	local02, arg02
02f40     26 53 02 F6 | 	mov	local03, arg04
02f44     28 55 EA F8 | 	getbyte	local04, local02, #1
02f48     16 50 46 F0 | 	shr	local02, #22
02f4c     03 50 0E F5 | 	and	local02, #3 wz
02f50     00 56 06 F6 | 	mov	local05, #0
02f54     01 50 06 A6 |  if_e	mov	local02, #1
02f58     29 51 CA F7 | 	test	local02, local03 wz
02f5c     00 20 06 A6 |  if_e	mov	result1, #0
02f60     80 00 90 AD |  if_e	jmp	#LR__0190
02f64     25 55 82 F1 | 	sub	local04, arg03
02f68     2A 59 02 F6 | 	mov	local06, local04
02f6c     00 58 5E F2 | 	cmps	local06, #0 wcz
02f70     00 20 06 E6 |  if_be	mov	result1, #0
02f74     6C 00 90 ED |  if_be	jmp	#LR__0190
02f78     03 50 0E F2 | 	cmp	local02, #3 wz
02f7c     18 00 90 5D |  if_ne	jmp	#LR__0187
02f80     01 52 0E F2 | 	cmp	local03, #1 wz
02f84     6E 5A 62 FD | 	wrz	local07
02f88     2D 59 02 F1 | 	add	local06, local07
02f8c     2C 59 52 F6 | 	abs	local06, local06 wc
02f90     01 58 46 F0 | 	shr	local06, #1
02f94     2C 59 62 C6 |  if_b	neg	local06, local06
02f98                 | LR__0187
02f98     00 58 5E F2 | 	cmps	local06, #0 wcz
02f9c     40 00 90 ED |  if_be	jmp	#LR__0189
02fa0     2C 5D 02 F6 | 	mov	local08, local06
02fa4                 | LR__0188
02fa4     27 5F 02 F6 | 	mov	local09, local01
02fa8     2F 5B 02 FB | 	rdlong	local07, local09
02fac     04 5E 06 F1 | 	add	local09, #4
02fb0     2F 61 02 FB | 	rdlong	local10, local09
02fb4     20 46 06 F6 | 	mov	arg01, #32
02fb8     06 63 02 F6 | 	mov	local11, objptr
02fbc     2D 0D 02 F6 | 	mov	objptr, local07
02fc0     2D 60 62 FD | 	call	local10
02fc4     31 0D 02 F6 | 	mov	objptr, local11
02fc8     10 65 02 F6 | 	mov	local12, result1
02fcc     00 64 5E F2 | 	cmps	local12, #0 wcz
02fd0     32 21 02 C6 |  if_b	mov	result1, local12
02fd4     0C 00 90 CD |  if_b	jmp	#LR__0190
02fd8     32 57 02 F1 | 	add	local05, local12
02fdc     F1 5D 6E FB | 	djnz	local08, #LR__0188
02fe0                 | LR__0189
02fe0     2B 21 02 F6 | 	mov	result1, local05
02fe4                 | LR__0190
02fe4     AF F0 03 F6 | 	mov	ptra, fp
02fe8     BF 00 A0 FD | 	call	#popregs_
02fec                 | __system___fmtpad_ret
02fec     2D 00 64 FD | 	ret
02ff0                 | 
02ff0                 | __system___gettxfunc
02ff0     03 5A 05 F6 | 	mov	COUNT_, #3
02ff4     B0 00 A0 FD | 	call	#pushregs_
02ff8     08 FF BF FD | 	call	#__system____getftab
02ffc     10 4F 0A F6 | 	mov	local01, result1 wz
03000     14 00 90 AD |  if_e	jmp	#LR__0191
03004     08 4E 06 F1 | 	add	local01, #8
03008     27 51 02 FB | 	rdlong	local02, local01
0300c     08 4E 86 F1 | 	sub	local01, #8
03010     28 53 0A F6 | 	mov	local03, local02 wz
03014     08 00 90 5D |  if_ne	jmp	#LR__0192
03018                 | LR__0191
03018     00 20 06 F6 | 	mov	result1, #0
0301c     0C 00 90 FD | 	jmp	#LR__0193
03020                 | LR__0192
03020     27 47 02 F6 | 	mov	arg01, local01
03024     08 49 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
03028     38 F0 BF FD | 	call	#__system___make_methodptr
0302c                 | LR__0193
0302c     AF F0 03 F6 | 	mov	ptra, fp
03030     BF 00 A0 FD | 	call	#popregs_
03034                 | __system___gettxfunc_ret
03034     2D 00 64 FD | 	ret
03038                 | 
03038                 | __system___getiolock_0101
03038     03 5A 05 F6 | 	mov	COUNT_, #3
0303c     B0 00 A0 FD | 	call	#pushregs_
03040     C0 FE BF FD | 	call	#__system____getftab
03044     10 4F 0A F6 | 	mov	local01, result1 wz
03048     14 00 90 AD |  if_e	jmp	#LR__0194
0304c     08 4E 06 F1 | 	add	local01, #8
03050     27 51 02 FB | 	rdlong	local02, local01
03054     08 4E 86 F1 | 	sub	local01, #8
03058     28 53 0A F6 | 	mov	local03, local02 wz
0305c     10 00 90 5D |  if_ne	jmp	#LR__0195
03060                 | LR__0194
03060     18 12 06 F1 | 	add	ptr___system__dat__, #24
03064     09 21 02 F6 | 	mov	result1, ptr___system__dat__
03068     18 12 86 F1 | 	sub	ptr___system__dat__, #24
0306c     08 00 90 FD | 	jmp	#LR__0196
03070                 | LR__0195
03070     0C 4E 06 F1 | 	add	local01, #12
03074     27 21 02 F6 | 	mov	result1, local01
03078                 | LR__0196
03078     AF F0 03 F6 | 	mov	ptra, fp
0307c     BF 00 A0 FD | 	call	#popregs_
03080                 | __system___getiolock_0101_ret
03080     2D 00 64 FD | 	ret
03084                 | 
03084                 | __system___closeraw
03084     06 5A 05 F6 | 	mov	COUNT_, #6
03088     B0 00 A0 FD | 	call	#pushregs_
0308c     23 4F 02 F6 | 	mov	local01, arg01
03090     00 50 06 F6 | 	mov	local02, #0
03094     08 4E 06 F1 | 	add	local01, #8
03098     27 53 0A FB | 	rdlong	local03, local01 wz
0309c     08 4E 86 F1 | 	sub	local01, #8
030a0     1C 00 90 5D |  if_ne	jmp	#LR__0197
030a4     01 00 00 FF 
030a8     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
030ac     09 0B 68 FC | 	wrlong	#5, ptr___system__dat__
030b0     01 00 00 FF 
030b4     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
030b8     01 20 66 F6 | 	neg	result1, #1
030bc     90 00 90 FD | 	jmp	#LR__0200
030c0                 | LR__0197
030c0     28 4E 06 F1 | 	add	local01, #40
030c4     27 53 0A FB | 	rdlong	local03, local01 wz
030c8     28 4E 86 F1 | 	sub	local01, #40
030cc     2C 00 90 AD |  if_e	jmp	#LR__0198
030d0     28 4E 06 F1 | 	add	local01, #40
030d4     27 53 02 FB | 	rdlong	local03, local01
030d8     28 4E 86 F1 | 	sub	local01, #40
030dc     29 55 02 FB | 	rdlong	local04, local03
030e0     04 52 06 F1 | 	add	local03, #4
030e4     29 57 02 FB | 	rdlong	local05, local03
030e8     27 47 02 F6 | 	mov	arg01, local01
030ec     06 59 02 F6 | 	mov	local06, objptr
030f0     2A 0D 02 F6 | 	mov	objptr, local04
030f4     2D 56 62 FD | 	call	local05
030f8     2C 0D 02 F6 | 	mov	objptr, local06
030fc                 | LR__0198
030fc     20 4E 06 F1 | 	add	local01, #32
03100     27 53 0A FB | 	rdlong	local03, local01 wz
03104     20 4E 86 F1 | 	sub	local01, #32
03108     30 00 90 AD |  if_e	jmp	#LR__0199
0310c     20 4E 06 F1 | 	add	local01, #32
03110     27 53 02 FB | 	rdlong	local03, local01
03114     20 4E 86 F1 | 	sub	local01, #32
03118     29 55 02 FB | 	rdlong	local04, local03
0311c     04 52 06 F1 | 	add	local03, #4
03120     29 57 02 FB | 	rdlong	local05, local03
03124     27 47 02 F6 | 	mov	arg01, local01
03128     06 59 02 F6 | 	mov	local06, objptr
0312c     2A 0D 02 F6 | 	mov	objptr, local04
03130     2D 56 62 FD | 	call	local05
03134     2C 0D 02 F6 | 	mov	objptr, local06
03138     10 51 02 F6 | 	mov	local02, result1
0313c                 | LR__0199
0313c     27 47 02 F6 | 	mov	arg01, local01
03140     00 48 06 F6 | 	mov	arg02, #0
03144     30 4A 06 F6 | 	mov	arg03, #48
03148     A0 00 A0 FD | 	call	#\builtin_bytefill_
0314c     28 21 02 F6 | 	mov	result1, local02
03150                 | LR__0200
03150     AF F0 03 F6 | 	mov	ptra, fp
03154     BF 00 A0 FD | 	call	#popregs_
03158                 | __system___closeraw_ret
03158     2D 00 64 FD | 	ret
0315c                 | 
0315c                 | __system____default_getc
0315c     0C 5A 05 F6 | 	mov	COUNT_, #12
03160     B0 00 A0 FD | 	call	#pushregs_
03164     23 4F 02 F6 | 	mov	local01, arg01
03168     27 51 02 FB | 	rdlong	local02, local01
0316c     08 50 06 F1 | 	add	local02, #8
03170     28 53 02 FB | 	rdlong	local03, local02
03174     08 50 86 F1 | 	sub	local02, #8
03178     02 52 CE F7 | 	test	local03, #2 wz
0317c     08 00 90 AD |  if_e	jmp	#LR__0201
03180     27 47 02 F6 | 	mov	arg01, local01
03184     FC 01 B0 FD | 	call	#__system____default_flush
03188                 | LR__0201
03188     08 50 06 F1 | 	add	local02, #8
0318c     28 53 02 FB | 	rdlong	local03, local02
03190     01 52 46 F5 | 	or	local03, #1
03194     28 53 62 FC | 	wrlong	local03, local02
03198     08 50 86 F1 | 	sub	local02, #8
0319c     28 55 0A FB | 	rdlong	local04, local02 wz
031a0     7C 00 90 5D |  if_ne	jmp	#LR__0203
031a4     27 47 02 F6 | 	mov	arg01, local01
031a8     23 57 02 FB | 	rdlong	local05, arg01
031ac     0C 56 06 F1 | 	add	local05, #12
031b0     2B 49 02 F6 | 	mov	arg02, local05
031b4     0C 56 86 F1 | 	sub	local05, #12
031b8     10 46 06 F1 | 	add	arg01, #16
031bc     23 59 02 FB | 	rdlong	local06, arg01
031c0     10 46 86 F1 | 	sub	arg01, #16
031c4     2C 5B 02 FB | 	rdlong	local07, local06
031c8     04 58 06 F1 | 	add	local06, #4
031cc     2C 5D 02 FB | 	rdlong	local08, local06
031d0     0A 4A C6 F9 | 	decod	arg03, #10
031d4     06 5F 02 F6 | 	mov	local09, objptr
031d8     2D 0D 02 F6 | 	mov	objptr, local07
031dc     2D 5C 62 FD | 	call	local08
031e0     2F 0D 02 F6 | 	mov	objptr, local09
031e4     10 61 02 F6 | 	mov	local10, result1
031e8     00 60 5E F2 | 	cmps	local10, #0 wcz
031ec     01 20 66 C6 |  if_b	neg	result1, #1
031f0     28 00 90 CD |  if_b	jmp	#LR__0202
031f4     2B 61 62 FC | 	wrlong	local10, local05
031f8     0C 56 06 F1 | 	add	local05, #12
031fc     2B 63 02 F6 | 	mov	local11, local05
03200     08 56 86 F1 | 	sub	local05, #8
03204     2B 63 62 FC | 	wrlong	local11, local05
03208     04 56 06 F1 | 	add	local05, #4
0320c     2B 59 02 FB | 	rdlong	local06, local05
03210     01 58 46 F5 | 	or	local06, #1
03214     2B 59 62 FC | 	wrlong	local06, local05
03218     30 21 02 F6 | 	mov	result1, local10
0321c                 | LR__0202
0321c     10 55 02 F6 | 	mov	local04, result1
03220                 | LR__0203
03220     00 54 5E F2 | 	cmps	local04, #0 wcz
03224     01 20 66 E6 |  if_be	neg	result1, #1
03228     1C 00 90 ED |  if_be	jmp	#LR__0204
0322c     01 54 86 F1 | 	sub	local04, #1
03230     28 55 62 FC | 	wrlong	local04, local02
03234     04 50 06 F1 | 	add	local02, #4
03238     28 65 02 FB | 	rdlong	local12, local02
0323c     32 21 C2 FA | 	rdbyte	result1, local12
03240     01 64 06 F1 | 	add	local12, #1
03244     28 65 62 FC | 	wrlong	local12, local02
03248                 | LR__0204
03248     AF F0 03 F6 | 	mov	ptra, fp
0324c     BF 00 A0 FD | 	call	#popregs_
03250                 | __system____default_getc_ret
03250     2D 00 64 FD | 	ret
03254                 | 
03254                 | __system____default_putc
03254     06 5A 05 F6 | 	mov	COUNT_, #6
03258     B0 00 A0 FD | 	call	#pushregs_
0325c     23 4F 02 F6 | 	mov	local01, arg01
03260     24 51 02 F6 | 	mov	local02, arg02
03264     28 53 02 FB | 	rdlong	local03, local02
03268     08 52 06 F1 | 	add	local03, #8
0326c     29 55 02 FB | 	rdlong	local04, local03
03270     08 52 86 F1 | 	sub	local03, #8
03274     01 54 CE F7 | 	test	local04, #1 wz
03278     08 00 90 AD |  if_e	jmp	#LR__0205
0327c     28 47 02 F6 | 	mov	arg01, local02
03280     00 01 B0 FD | 	call	#__system____default_flush
03284                 | LR__0205
03284     08 52 06 F1 | 	add	local03, #8
03288     29 55 02 FB | 	rdlong	local04, local03
0328c     02 54 46 F5 | 	or	local04, #2
03290     29 55 62 FC | 	wrlong	local04, local03
03294     08 52 86 F1 | 	sub	local03, #8
03298     29 57 02 FB | 	rdlong	local05, local03
0329c     2B 59 02 F6 | 	mov	local06, local05
032a0     0C 52 06 F1 | 	add	local03, #12
032a4     29 59 02 F1 | 	add	local06, local03
032a8     2C 4F 42 FC | 	wrbyte	local01, local06
032ac     FF 4E 06 F5 | 	and	local01, #255
032b0     01 56 06 F1 | 	add	local05, #1
032b4     0C 52 86 F1 | 	sub	local03, #12
032b8     29 57 62 FC | 	wrlong	local05, local03
032bc     02 00 00 FF 
032c0     00 56 0E F2 | 	cmp	local05, ##1024 wz
032c4     10 00 90 5D |  if_ne	jmp	#LR__0206
032c8     28 47 02 F6 | 	mov	arg01, local02
032cc     B4 00 B0 FD | 	call	#__system____default_flush
032d0     00 20 0E F2 | 	cmp	result1, #0 wz
032d4     01 4E 66 56 |  if_ne	neg	local01, #1
032d8                 | LR__0206
032d8     27 21 02 F6 | 	mov	result1, local01
032dc     AF F0 03 F6 | 	mov	ptra, fp
032e0     BF 00 A0 FD | 	call	#popregs_
032e4                 | __system____default_putc_ret
032e4     2D 00 64 FD | 	ret
032e8                 | 
032e8                 | __system____default_putc_terminal
032e8     06 5A 05 F6 | 	mov	COUNT_, #6
032ec     B0 00 A0 FD | 	call	#pushregs_
032f0     23 4F 02 F6 | 	mov	local01, arg01
032f4     24 51 02 F6 | 	mov	local02, arg02
032f8     28 53 02 FB | 	rdlong	local03, local02
032fc     08 52 06 F1 | 	add	local03, #8
03300     29 55 02 FB | 	rdlong	local04, local03
03304     08 52 86 F1 | 	sub	local03, #8
03308     01 54 CE F7 | 	test	local04, #1 wz
0330c     08 00 90 AD |  if_e	jmp	#LR__0207
03310     28 47 02 F6 | 	mov	arg01, local02
03314     6C 00 B0 FD | 	call	#__system____default_flush
03318                 | LR__0207
03318     08 52 06 F1 | 	add	local03, #8
0331c     29 55 02 FB | 	rdlong	local04, local03
03320     02 54 46 F5 | 	or	local04, #2
03324     29 55 62 FC | 	wrlong	local04, local03
03328     08 52 86 F1 | 	sub	local03, #8
0332c     29 57 02 FB | 	rdlong	local05, local03
03330     2B 59 02 F6 | 	mov	local06, local05
03334     0C 52 06 F1 | 	add	local03, #12
03338     29 59 02 F1 | 	add	local06, local03
0333c     2C 4F 42 FC | 	wrbyte	local01, local06
03340     FF 4E 06 F5 | 	and	local01, #255
03344     0C 52 86 F1 | 	sub	local03, #12
03348     01 56 06 F1 | 	add	local05, #1
0334c     29 57 62 FC | 	wrlong	local05, local03
03350     0A 4E 0E F2 | 	cmp	local01, #10 wz
03354     0C 00 90 AD |  if_e	jmp	#LR__0208
03358     02 00 00 FF 
0335c     00 56 0E F2 | 	cmp	local05, ##1024 wz
03360     10 00 90 5D |  if_ne	jmp	#LR__0209
03364                 | LR__0208
03364     28 47 02 F6 | 	mov	arg01, local02
03368     18 00 B0 FD | 	call	#__system____default_flush
0336c     00 20 0E F2 | 	cmp	result1, #0 wz
03370     01 4E 66 56 |  if_ne	neg	local01, #1
03374                 | LR__0209
03374     27 21 02 F6 | 	mov	result1, local01
03378     AF F0 03 F6 | 	mov	ptra, fp
0337c     BF 00 A0 FD | 	call	#popregs_
03380                 | __system____default_putc_terminal_ret
03380     2D 00 64 FD | 	ret
03384                 | 
03384                 | __system____default_flush
03384     0F 5A 05 F6 | 	mov	COUNT_, #15
03388     B0 00 A0 FD | 	call	#pushregs_
0338c     23 4F 02 F6 | 	mov	local01, arg01
03390     27 51 02 FB | 	rdlong	local02, local01
03394     28 53 02 FB | 	rdlong	local03, local02
03398     08 50 06 F1 | 	add	local02, #8
0339c     28 55 02 FB | 	rdlong	local04, local02
033a0     08 50 86 F1 | 	sub	local02, #8
033a4     02 54 CE F7 | 	test	local04, #2 wz
033a8     B8 00 90 AD |  if_e	jmp	#LR__0212
033ac     00 52 5E F2 | 	cmps	local03, #0 wcz
033b0     30 01 90 ED |  if_be	jmp	#LR__0214
033b4     08 4E 06 F1 | 	add	local01, #8
033b8     27 55 02 FB | 	rdlong	local04, local01
033bc     08 4E 86 F1 | 	sub	local01, #8
033c0     40 54 CE F7 | 	test	local04, #64 wz
033c4     5C 00 90 AD |  if_e	jmp	#LR__0211
033c8     08 4E 06 F1 | 	add	local01, #8
033cc     27 55 02 FB | 	rdlong	local04, local01
033d0     08 4E 86 F1 | 	sub	local01, #8
033d4     80 54 CE F7 | 	test	local04, #128 wz
033d8     48 00 90 AD |  if_e	jmp	#LR__0210
033dc     2C 4E 06 F1 | 	add	local01, #44
033e0     27 55 02 FB | 	rdlong	local04, local01
033e4     2C 4E 86 F1 | 	sub	local01, #44
033e8     2A 57 02 FB | 	rdlong	local05, local04
033ec     04 54 06 F1 | 	add	local04, #4
033f0     2A 59 02 FB | 	rdlong	local06, local04
033f4     27 47 02 F6 | 	mov	arg01, local01
033f8     00 48 06 F6 | 	mov	arg02, #0
033fc     02 4A 06 F6 | 	mov	arg03, #2
03400     06 5B 02 F6 | 	mov	local07, objptr
03404     2B 0D 02 F6 | 	mov	objptr, local05
03408     2D 58 62 FD | 	call	local06
0340c     2D 0D 02 F6 | 	mov	objptr, local07
03410     08 4E 06 F1 | 	add	local01, #8
03414     27 55 02 FB | 	rdlong	local04, local01
03418     80 54 26 F5 | 	andn	local04, #128
0341c     27 55 62 FC | 	wrlong	local04, local01
03420     08 4E 86 F1 | 	sub	local01, #8
03424                 | LR__0210
03424                 | LR__0211
03424     0C 50 06 F1 | 	add	local02, #12
03428     28 49 02 F6 | 	mov	arg02, local02
0342c     0C 50 86 F1 | 	sub	local02, #12
03430     14 4E 06 F1 | 	add	local01, #20
03434     27 55 02 FB | 	rdlong	local04, local01
03438     14 4E 86 F1 | 	sub	local01, #20
0343c     2A 57 02 FB | 	rdlong	local05, local04
03440     04 54 06 F1 | 	add	local04, #4
03444     2A 59 02 FB | 	rdlong	local06, local04
03448     27 47 02 F6 | 	mov	arg01, local01
0344c     29 4B 02 F6 | 	mov	arg03, local03
03450     06 5B 02 F6 | 	mov	local07, objptr
03454     2B 0D 02 F6 | 	mov	objptr, local05
03458     2D 58 62 FD | 	call	local06
0345c     2D 0D 02 F6 | 	mov	objptr, local07
03460     80 00 90 FD | 	jmp	#LR__0214
03464                 | LR__0212
03464     08 50 06 F1 | 	add	local02, #8
03468     28 55 02 FB | 	rdlong	local04, local02
0346c     08 50 86 F1 | 	sub	local02, #8
03470     01 54 CE F7 | 	test	local04, #1 wz
03474     6C 00 90 AD |  if_e	jmp	#LR__0213
03478     00 52 0E F2 | 	cmp	local03, #0 wz
0347c     64 00 90 AD |  if_e	jmp	#LR__0213
03480     2C 4E 06 F1 | 	add	local01, #44
03484     27 5D 02 FB | 	rdlong	local08, local01
03488     2C 4E 86 F1 | 	sub	local01, #44
0348c     2E 55 02 F6 | 	mov	local04, local08
03490     2A 57 02 FB | 	rdlong	local05, local04
03494     04 54 06 F1 | 	add	local04, #4
03498     2A 5F 02 FB | 	rdlong	local09, local04
0349c     04 54 86 F1 | 	sub	local04, #4
034a0     2F 59 02 F6 | 	mov	local06, local09
034a4     27 61 02 F6 | 	mov	local10, local01
034a8     29 63 02 F6 | 	mov	local11, local03
034ac     31 63 62 F6 | 	neg	local11, local11
034b0     31 65 02 F6 | 	mov	local12, local11
034b4     01 5A 06 F6 | 	mov	local07, #1
034b8     30 47 02 F6 | 	mov	arg01, local10
034bc     32 49 02 F6 | 	mov	arg02, local12
034c0     01 4A 06 F6 | 	mov	arg03, #1
034c4     06 67 02 F6 | 	mov	local13, objptr
034c8     2B 0D 02 F6 | 	mov	objptr, local05
034cc     2D 58 62 FD | 	call	local06
034d0     33 0D 02 F6 | 	mov	objptr, local13
034d4     10 69 02 F6 | 	mov	local14, result1
034d8     34 6B 02 F6 | 	mov	local15, local14
034dc     00 6A 5E F2 | 	cmps	local15, #0 wcz
034e0     29 6B 02 36 |  if_ae	mov	local15, local03
034e4                 | LR__0213
034e4                 | LR__0214
034e4     28 01 68 FC | 	wrlong	#0, local02
034e8     04 50 06 F1 | 	add	local02, #4
034ec     28 01 68 FC | 	wrlong	#0, local02
034f0     04 50 06 F1 | 	add	local02, #4
034f4     28 01 68 FC | 	wrlong	#0, local02
034f8     00 20 06 F6 | 	mov	result1, #0
034fc     AF F0 03 F6 | 	mov	ptra, fp
03500     BF 00 A0 FD | 	call	#popregs_
03504                 | __system____default_flush_ret
03504     2D 00 64 FD | 	ret
03508                 | 
03508                 | __system___rxtxioctl_0130
03508     02 5A 05 F6 | 	mov	COUNT_, #2
0350c     B0 00 A0 FD | 	call	#pushregs_
03510     24 4F 02 F6 | 	mov	local01, arg02
03514     25 51 02 F6 | 	mov	local02, arg03
03518     00 4F 0E F2 | 	cmp	local01, #256 wz
0351c     0C 00 90 AD |  if_e	jmp	#LR__0215
03520     01 4F 0E F2 | 	cmp	local01, #257 wz
03524     1C 00 90 AD |  if_e	jmp	#LR__0216
03528     30 00 90 FD | 	jmp	#LR__0217
0352c                 | LR__0215
0352c     08 12 06 F1 | 	add	ptr___system__dat__, #8
03530     09 21 02 FB | 	rdlong	result1, ptr___system__dat__
03534     08 12 86 F1 | 	sub	ptr___system__dat__, #8
03538     28 21 62 FC | 	wrlong	result1, local02
0353c     00 20 06 F6 | 	mov	result1, #0
03540     30 00 90 FD | 	jmp	#LR__0218
03544                 | LR__0216
03544     28 47 02 FB | 	rdlong	arg01, local02
03548     08 12 06 F1 | 	add	ptr___system__dat__, #8
0354c     09 47 62 FC | 	wrlong	arg01, ptr___system__dat__
03550     08 12 86 F1 | 	sub	ptr___system__dat__, #8
03554     00 20 06 F6 | 	mov	result1, #0
03558     18 00 90 FD | 	jmp	#LR__0218
0355c                 | LR__0217
0355c     01 00 00 FF 
03560     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
03564     09 15 68 FC | 	wrlong	#10, ptr___system__dat__
03568     01 00 00 FF 
0356c     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
03570     01 20 66 F6 | 	neg	result1, #1
03574                 | LR__0218
03574     AF F0 03 F6 | 	mov	ptra, fp
03578     BF 00 A0 FD | 	call	#popregs_
0357c                 | __system___rxtxioctl_0130_ret
0357c     2D 00 64 FD | 	ret
03580                 | 
03580                 | __system____dummy_flush_0131
03580     00 20 06 F6 | 	mov	result1, #0
03584                 | __system____dummy_flush_0131_ret
03584     2D 00 64 FD | 	ret
03588                 | 
03588                 | __system___vfswrite
03588     0B 5A 05 F6 | 	mov	COUNT_, #11
0358c     B0 00 A0 FD | 	call	#pushregs_
03590     23 4F 02 F6 | 	mov	local01, arg01
03594     24 51 02 F6 | 	mov	local02, arg02
03598     25 53 02 F6 | 	mov	local03, arg03
0359c     28 55 02 F6 | 	mov	local04, local02
035a0     08 4E 06 F1 | 	add	local01, #8
035a4     27 57 02 FB | 	rdlong	local05, local01
035a8     08 4E 86 F1 | 	sub	local01, #8
035ac     02 56 CE F7 | 	test	local05, #2 wz
035b0     1C 00 90 5D |  if_ne	jmp	#LR__0219
035b4     01 00 00 FF 
035b8     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
035bc     09 0D 68 FC | 	wrlong	#6, ptr___system__dat__
035c0     01 00 00 FF 
035c4     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
035c8     01 20 66 F6 | 	neg	result1, #1
035cc     70 01 90 FD | 	jmp	#LR__0227
035d0                 | LR__0219
035d0     08 4E 06 F1 | 	add	local01, #8
035d4     27 57 02 FB | 	rdlong	local05, local01
035d8     08 4E 86 F1 | 	sub	local01, #8
035dc     40 56 CE F7 | 	test	local05, #64 wz
035e0     5C 00 90 AD |  if_e	jmp	#LR__0221
035e4     08 4E 06 F1 | 	add	local01, #8
035e8     27 57 02 FB | 	rdlong	local05, local01
035ec     08 4E 86 F1 | 	sub	local01, #8
035f0     80 56 CE F7 | 	test	local05, #128 wz
035f4     48 00 90 AD |  if_e	jmp	#LR__0220
035f8     2C 4E 06 F1 | 	add	local01, #44
035fc     27 57 02 FB | 	rdlong	local05, local01
03600     2C 4E 86 F1 | 	sub	local01, #44
03604     2B 59 02 FB | 	rdlong	local06, local05
03608     04 56 06 F1 | 	add	local05, #4
0360c     2B 5B 02 FB | 	rdlong	local07, local05
03610     27 47 02 F6 | 	mov	arg01, local01
03614     00 48 06 F6 | 	mov	arg02, #0
03618     02 4A 06 F6 | 	mov	arg03, #2
0361c     06 5D 02 F6 | 	mov	local08, objptr
03620     2C 0D 02 F6 | 	mov	objptr, local06
03624     2D 5A 62 FD | 	call	local07
03628     2E 0D 02 F6 | 	mov	objptr, local08
0362c     08 4E 06 F1 | 	add	local01, #8
03630     27 57 02 FB | 	rdlong	local05, local01
03634     80 56 26 F5 | 	andn	local05, #128
03638     27 57 62 FC | 	wrlong	local05, local01
0363c     08 4E 86 F1 | 	sub	local01, #8
03640                 | LR__0220
03640                 | LR__0221
03640     14 4E 06 F1 | 	add	local01, #20
03644     27 57 0A FB | 	rdlong	local05, local01 wz
03648     14 4E 86 F1 | 	sub	local01, #20
0364c     7C 00 90 AD |  if_e	jmp	#LR__0223
03650     14 4E 06 F1 | 	add	local01, #20
03654     27 57 02 FB | 	rdlong	local05, local01
03658     14 4E 86 F1 | 	sub	local01, #20
0365c     2B 59 02 FB | 	rdlong	local06, local05
03660     04 56 06 F1 | 	add	local05, #4
03664     2B 5B 02 FB | 	rdlong	local07, local05
03668     28 49 02 F6 | 	mov	arg02, local02
0366c     29 4B 02 F6 | 	mov	arg03, local03
03670     27 47 02 F6 | 	mov	arg01, local01
03674     06 5D 02 F6 | 	mov	local08, objptr
03678     2C 0D 02 F6 | 	mov	objptr, local06
0367c     2D 5A 62 FD | 	call	local07
03680     2E 0D 02 F6 | 	mov	objptr, local08
03684     10 5F 02 F6 | 	mov	local09, result1
03688     00 5E 5E F2 | 	cmps	local09, #0 wcz
0368c     34 00 90 3D |  if_ae	jmp	#LR__0222
03690     08 4E 06 F1 | 	add	local01, #8
03694     27 57 02 FB | 	rdlong	local05, local01
03698     20 56 46 F5 | 	or	local05, #32
0369c     27 57 62 FC | 	wrlong	local05, local01
036a0     01 00 00 FF 
036a4     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
036a8     09 5F 62 FC | 	wrlong	local09, ptr___system__dat__
036ac     01 00 00 FF 
036b0     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
036b4     00 5E 0E F2 | 	cmp	local09, #0 wz
036b8     01 20 66 56 |  if_ne	neg	result1, #1
036bc     00 20 06 A6 |  if_e	mov	result1, #0
036c0     7C 00 90 FD | 	jmp	#LR__0227
036c4                 | LR__0222
036c4     2F 21 02 F6 | 	mov	result1, local09
036c8     74 00 90 FD | 	jmp	#LR__0227
036cc                 | LR__0223
036cc     18 4E 06 F1 | 	add	local01, #24
036d0     27 61 0A FB | 	rdlong	local10, local01 wz
036d4     18 4E 86 F1 | 	sub	local01, #24
036d8     1C 00 90 5D |  if_ne	jmp	#LR__0224
036dc     01 00 00 FF 
036e0     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
036e4     09 0D 68 FC | 	wrlong	#6, ptr___system__dat__
036e8     01 00 00 FF 
036ec     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
036f0     01 20 66 F6 | 	neg	result1, #1
036f4     48 00 90 FD | 	jmp	#LR__0227
036f8                 | LR__0224
036f8     00 5E 06 F6 | 	mov	local09, #0
036fc                 | LR__0225
036fc     00 52 1E F2 | 	cmp	local03, #0 wcz
03700     38 00 90 ED |  if_be	jmp	#LR__0226
03704     30 57 02 F6 | 	mov	local05, local10
03708     2B 59 02 FB | 	rdlong	local06, local05
0370c     04 56 06 F1 | 	add	local05, #4
03710     2B 5B 02 FB | 	rdlong	local07, local05
03714     2A 47 C2 FA | 	rdbyte	arg01, local04
03718     27 49 02 F6 | 	mov	arg02, local01
0371c     06 63 02 F6 | 	mov	local11, objptr
03720     2C 0D 02 F6 | 	mov	objptr, local06
03724     01 54 06 F1 | 	add	local04, #1
03728     2D 5A 62 FD | 	call	local07
0372c     31 0D 02 F6 | 	mov	objptr, local11
03730     10 5F 02 F1 | 	add	local09, result1
03734     01 52 86 F1 | 	sub	local03, #1
03738     C0 FF 9F FD | 	jmp	#LR__0225
0373c                 | LR__0226
0373c     2F 21 02 F6 | 	mov	result1, local09
03740                 | LR__0227
03740     AF F0 03 F6 | 	mov	ptra, fp
03744     BF 00 A0 FD | 	call	#popregs_
03748                 | __system___vfswrite_ret
03748     2D 00 64 FD | 	ret
0374c                 | 
0374c                 | __system___vfsread
0374c     0F 5A 05 F6 | 	mov	COUNT_, #15
03750     B0 00 A0 FD | 	call	#pushregs_
03754     2C F0 07 F1 | 	add	ptra, #44
03758     04 5E 05 F1 | 	add	fp, #4
0375c     AF 46 62 FC | 	wrlong	arg01, fp
03760     04 5E 05 F1 | 	add	fp, #4
03764     AF 48 62 FC | 	wrlong	arg02, fp
03768     04 5E 05 F1 | 	add	fp, #4
0376c     AF 4A 62 FC | 	wrlong	arg03, fp
03770     04 5E 85 F1 | 	sub	fp, #4
03774     AF 4E 02 FB | 	rdlong	local01, fp
03778     14 5E 05 F1 | 	add	fp, #20
0377c     AF 4E 62 FC | 	wrlong	local01, fp
03780     04 5E 05 F1 | 	add	fp, #4
03784     AF 00 68 FC | 	wrlong	#0, fp
03788     1C 5E 85 F1 | 	sub	fp, #28
0378c     AF 50 02 FB | 	rdlong	local02, fp
03790     04 5E 85 F1 | 	sub	fp, #4
03794     08 50 06 F1 | 	add	local02, #8
03798     28 4F 02 FB | 	rdlong	local01, local02
0379c     01 4E CE F7 | 	test	local01, #1 wz
037a0     1C 00 90 5D |  if_ne	jmp	#LR__0228
037a4     01 00 00 FF 
037a8     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
037ac     09 0D 68 FC | 	wrlong	#6, ptr___system__dat__
037b0     01 00 00 FF 
037b4     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
037b8     01 20 66 F6 | 	neg	result1, #1
037bc     9C 02 90 FD | 	jmp	#LR__0236
037c0                 | LR__0228
037c0     04 5E 05 F1 | 	add	fp, #4
037c4     AF 4E 02 FB | 	rdlong	local01, fp
037c8     04 5E 85 F1 | 	sub	fp, #4
037cc     10 4E 06 F1 | 	add	local01, #16
037d0     27 53 0A FB | 	rdlong	local03, local01 wz
037d4     B4 00 90 AD |  if_e	jmp	#LR__0230
037d8     04 5E 05 F1 | 	add	fp, #4
037dc     AF 54 02 FB | 	rdlong	local04, fp
037e0     10 54 06 F1 | 	add	local04, #16
037e4     2A 4F 02 FB | 	rdlong	local01, local04
037e8     27 51 02 FB | 	rdlong	local02, local01
037ec     04 4E 06 F1 | 	add	local01, #4
037f0     27 53 02 FB | 	rdlong	local03, local01
037f4     AF 46 02 FB | 	rdlong	arg01, fp
037f8     04 5E 05 F1 | 	add	fp, #4
037fc     AF 48 02 FB | 	rdlong	arg02, fp
03800     04 5E 05 F1 | 	add	fp, #4
03804     AF 4A 02 FB | 	rdlong	arg03, fp
03808     0C 5E 85 F1 | 	sub	fp, #12
0380c     06 57 02 F6 | 	mov	local05, objptr
03810     28 0D 02 F6 | 	mov	objptr, local02
03814     2D 52 62 FD | 	call	local03
03818     2B 0D 02 F6 | 	mov	objptr, local05
0381c     10 5E 05 F1 | 	add	fp, #16
03820     AF 20 62 FC | 	wrlong	result1, fp
03824     10 5E 85 F1 | 	sub	fp, #16
03828     00 20 5E F2 | 	cmps	result1, #0 wcz
0382c     4C 00 90 3D |  if_ae	jmp	#LR__0229
03830     04 5E 05 F1 | 	add	fp, #4
03834     AF 4E 02 FB | 	rdlong	local01, fp
03838     27 55 02 F6 | 	mov	local04, local01
0383c     08 54 06 F1 | 	add	local04, #8
03840     2A 53 02 FB | 	rdlong	local03, local04
03844     20 52 46 F5 | 	or	local03, #32
03848     08 4E 06 F1 | 	add	local01, #8
0384c     27 53 62 FC | 	wrlong	local03, local01
03850     0C 5E 05 F1 | 	add	fp, #12
03854     AF 46 0A FB | 	rdlong	arg01, fp wz
03858     10 5E 85 F1 | 	sub	fp, #16
0385c     01 00 00 FF 
03860     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
03864     09 47 62 FC | 	wrlong	arg01, ptr___system__dat__
03868     01 00 00 FF 
0386c     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
03870     01 20 66 56 |  if_ne	neg	result1, #1
03874     00 20 06 A6 |  if_e	mov	result1, #0
03878     E0 01 90 FD | 	jmp	#LR__0236
0387c                 | LR__0229
0387c     10 5E 05 F1 | 	add	fp, #16
03880     AF 20 02 FB | 	rdlong	result1, fp
03884     10 5E 85 F1 | 	sub	fp, #16
03888     D0 01 90 FD | 	jmp	#LR__0236
0388c                 | LR__0230
0388c     04 5E 05 F1 | 	add	fp, #4
03890     AF 4E 02 FB | 	rdlong	local01, fp
03894     1C 4E 06 F1 | 	add	local01, #28
03898     27 53 02 FB | 	rdlong	local03, local01
0389c     14 5E 05 F1 | 	add	fp, #20
038a0     AF 52 62 FC | 	wrlong	local03, fp
038a4     AF 4E 0A FB | 	rdlong	local01, fp wz
038a8     18 5E 85 F1 | 	sub	fp, #24
038ac     1C 00 90 5D |  if_ne	jmp	#LR__0231
038b0     01 00 00 FF 
038b4     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
038b8     09 0D 68 FC | 	wrlong	#6, ptr___system__dat__
038bc     01 00 00 FF 
038c0     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
038c4     01 20 66 F6 | 	neg	result1, #1
038c8     90 01 90 FD | 	jmp	#LR__0236
038cc                 | LR__0231
038cc     04 5E 05 F1 | 	add	fp, #4
038d0     AF 4E 02 FB | 	rdlong	local01, fp
038d4     04 5E 85 F1 | 	sub	fp, #4
038d8     24 4E 06 F1 | 	add	local01, #36
038dc     27 53 0A FB | 	rdlong	local03, local01 wz
038e0     A0 00 90 AD |  if_e	jmp	#LR__0233
038e4     24 5E 05 F1 | 	add	fp, #36
038e8     AF 58 02 F6 | 	mov	local06, fp
038ec     20 5E 85 F1 | 	sub	fp, #32
038f0     AF 5A 02 FB | 	rdlong	local07, fp
038f4     2D 55 02 F6 | 	mov	local04, local07
038f8     24 54 06 F1 | 	add	local04, #36
038fc     2A 5D 02 FB | 	rdlong	local08, local04
03900     2E 4F 02 F6 | 	mov	local01, local08
03904     27 51 02 FB | 	rdlong	local02, local01
03908     04 4E 06 F1 | 	add	local01, #4
0390c     27 5F 02 FB | 	rdlong	local09, local01
03910     2F 53 02 F6 | 	mov	local03, local09
03914     2D 61 02 F6 | 	mov	local10, local07
03918     04 5E 85 F1 | 	sub	fp, #4
0391c     30 63 02 F6 | 	mov	local11, local10
03920     00 65 06 F6 | 	mov	local12, #256
03924     2C 67 02 F6 | 	mov	local13, local06
03928     31 47 02 F6 | 	mov	arg01, local11
0392c     00 49 06 F6 | 	mov	arg02, #256
03930     33 4B 02 F6 | 	mov	arg03, local13
03934     06 69 02 F6 | 	mov	local14, objptr
03938     28 0D 02 F6 | 	mov	objptr, local02
0393c     2D 52 62 FD | 	call	local03
03940     34 0D 02 F6 | 	mov	objptr, local14
03944     10 6B 02 F6 | 	mov	local15, result1
03948     10 5E 05 F1 | 	add	fp, #16
0394c     AF 6A 62 FC | 	wrlong	local15, fp
03950     AF 50 0A FB | 	rdlong	local02, fp wz
03954     10 5E 85 F1 | 	sub	fp, #16
03958     28 00 90 5D |  if_ne	jmp	#LR__0232
0395c     24 5E 05 F1 | 	add	fp, #36
03960     AF 54 02 FB | 	rdlong	local04, fp
03964     24 5E 85 F1 | 	sub	fp, #36
03968     2A 53 02 F6 | 	mov	local03, local04
0396c     02 52 0E F5 | 	and	local03, #2 wz
03970     10 00 90 AD |  if_e	jmp	#LR__0232
03974     01 4E 06 F6 | 	mov	local01, #1
03978     20 5E 05 F1 | 	add	fp, #32
0397c     AF 02 68 FC | 	wrlong	#1, fp
03980     20 5E 85 F1 | 	sub	fp, #32
03984                 | LR__0232
03984                 | LR__0233
03984     10 5E 05 F1 | 	add	fp, #16
03988     AF 00 68 FC | 	wrlong	#0, fp
0398c     10 5E 85 F1 | 	sub	fp, #16
03990                 | LR__0234
03990     0C 5E 05 F1 | 	add	fp, #12
03994     AF 4E 02 FB | 	rdlong	local01, fp
03998     0C 5E 85 F1 | 	sub	fp, #12
0399c     00 4E 1E F2 | 	cmp	local01, #0 wcz
039a0     AC 00 90 ED |  if_be	jmp	#LR__0235
039a4     18 5E 05 F1 | 	add	fp, #24
039a8     AF 4E 02 FB | 	rdlong	local01, fp
039ac     27 51 02 FB | 	rdlong	local02, local01
039b0     04 4E 06 F1 | 	add	local01, #4
039b4     27 53 02 FB | 	rdlong	local03, local01
039b8     14 5E 85 F1 | 	sub	fp, #20
039bc     AF 46 02 FB | 	rdlong	arg01, fp
039c0     04 5E 85 F1 | 	sub	fp, #4
039c4     06 63 02 F6 | 	mov	local11, objptr
039c8     28 0D 02 F6 | 	mov	objptr, local02
039cc     2D 52 62 FD | 	call	local03
039d0     31 0D 02 F6 | 	mov	objptr, local11
039d4     10 61 02 F6 | 	mov	local10, result1
039d8     14 5E 05 F1 | 	add	fp, #20
039dc     AF 60 62 FC | 	wrlong	local10, fp
039e0     14 5E 85 F1 | 	sub	fp, #20
039e4     00 60 5E F2 | 	cmps	local10, #0 wcz
039e8     64 00 90 CD |  if_b	jmp	#LR__0235
039ec     1C 5E 05 F1 | 	add	fp, #28
039f0     AF 4E 02 FB | 	rdlong	local01, fp
039f4     27 53 02 F6 | 	mov	local03, local01
039f8     01 52 06 F1 | 	add	local03, #1
039fc     AF 52 62 FC | 	wrlong	local03, fp
03a00     08 5E 85 F1 | 	sub	fp, #8
03a04     AF 5A 02 FB | 	rdlong	local07, fp
03a08     27 5B 42 FC | 	wrbyte	local07, local01
03a0c     04 5E 85 F1 | 	sub	fp, #4
03a10     AF 4E 02 FB | 	rdlong	local01, fp
03a14     01 4E 06 F1 | 	add	local01, #1
03a18     AF 4E 62 FC | 	wrlong	local01, fp
03a1c     04 5E 85 F1 | 	sub	fp, #4
03a20     AF 4E 02 FB | 	rdlong	local01, fp
03a24     01 4E 86 F1 | 	sub	local01, #1
03a28     AF 4E 62 FC | 	wrlong	local01, fp
03a2c     14 5E 05 F1 | 	add	fp, #20
03a30     AF 4E 0A FB | 	rdlong	local01, fp wz
03a34     20 5E 85 F1 | 	sub	fp, #32
03a38     54 FF 9F AD |  if_e	jmp	#LR__0234
03a3c     14 5E 05 F1 | 	add	fp, #20
03a40     AF 52 02 FB | 	rdlong	local03, fp
03a44     14 5E 85 F1 | 	sub	fp, #20
03a48     0A 52 0E F2 | 	cmp	local03, #10 wz
03a4c     40 FF 9F 5D |  if_ne	jmp	#LR__0234
03a50                 | LR__0235
03a50     10 5E 05 F1 | 	add	fp, #16
03a54     AF 20 02 FB | 	rdlong	result1, fp
03a58     10 5E 85 F1 | 	sub	fp, #16
03a5c                 | LR__0236
03a5c     AF F0 03 F6 | 	mov	ptra, fp
03a60     BF 00 A0 FD | 	call	#popregs_
03a64                 | __system___vfsread_ret
03a64     2D 00 64 FD | 	ret
03a68                 | 
03a68                 | __struct__s_vfs_file_t_putchar
03a68     04 5A 05 F6 | 	mov	COUNT_, #4
03a6c     B0 00 A0 FD | 	call	#pushregs_
03a70     18 0C 06 F1 | 	add	objptr, #24
03a74     06 4F 0A FB | 	rdlong	local01, objptr wz
03a78     18 0C 86 F1 | 	sub	objptr, #24
03a7c     00 20 06 A6 |  if_e	mov	result1, #0
03a80     3C 00 90 AD |  if_e	jmp	#LR__0237
03a84     18 0C 06 F1 | 	add	objptr, #24
03a88     06 4F 02 FB | 	rdlong	local01, objptr
03a8c     18 0C 86 F1 | 	sub	objptr, #24
03a90     27 51 02 FB | 	rdlong	local02, local01
03a94     04 4E 06 F1 | 	add	local01, #4
03a98     27 53 02 FB | 	rdlong	local03, local01
03a9c     06 49 02 F6 | 	mov	arg02, objptr
03aa0     06 55 02 F6 | 	mov	local04, objptr
03aa4     28 0D 02 F6 | 	mov	objptr, local02
03aa8     2D 52 62 FD | 	call	local03
03aac     2A 0D 02 F6 | 	mov	objptr, local04
03ab0     00 20 5E F2 | 	cmps	result1, #0 wcz
03ab4     00 4E 06 C6 |  if_b	mov	local01, #0
03ab8     01 4E 06 36 |  if_ae	mov	local01, #1
03abc     27 21 02 F6 | 	mov	result1, local01
03ac0                 | LR__0237
03ac0     AF F0 03 F6 | 	mov	ptra, fp
03ac4     BF 00 A0 FD | 	call	#popregs_
03ac8                 | __struct__s_vfs_file_t_putchar_ret
03ac8     2D 00 64 FD | 	ret
03acc                 | 
03acc                 | __struct__s_vfs_file_t_getchar
03acc     04 5A 05 F6 | 	mov	COUNT_, #4
03ad0     B0 00 A0 FD | 	call	#pushregs_
03ad4     1C 0C 06 F1 | 	add	objptr, #28
03ad8     06 4F 0A FB | 	rdlong	local01, objptr wz
03adc     1C 0C 86 F1 | 	sub	objptr, #28
03ae0     01 20 66 A6 |  if_e	neg	result1, #1
03ae4     2C 00 90 AD |  if_e	jmp	#LR__0238
03ae8                 | '         return getcf(__this);
03ae8     1C 0C 06 F1 | 	add	objptr, #28
03aec     06 4F 02 FB | 	rdlong	local01, objptr
03af0     1C 0C 86 F1 | 	sub	objptr, #28
03af4     27 51 02 FB | 	rdlong	local02, local01
03af8     04 4E 06 F1 | 	add	local01, #4
03afc     27 53 02 FB | 	rdlong	local03, local01
03b00     06 47 02 F6 | 	mov	arg01, objptr
03b04     06 55 02 F6 | 	mov	local04, objptr
03b08     28 0D 02 F6 | 	mov	objptr, local02
03b0c     2D 52 62 FD | 	call	local03
03b10     2A 0D 02 F6 | 	mov	objptr, local04
03b14                 | LR__0238
03b14     AF F0 03 F6 | 	mov	ptra, fp
03b18     BF 00 A0 FD | 	call	#popregs_
03b1c                 | __struct__s_vfs_file_t_getchar_ret
03b1c     2D 00 64 FD | 	ret
03b20                 | 
03b20                 | __struct___bas_wrap_sender_tx
03b20     04 5A 05 F6 | 	mov	COUNT_, #4
03b24     B0 00 A0 FD | 	call	#pushregs_
03b28     06 4F 02 FB | 	rdlong	local01, objptr
03b2c     27 51 02 FB | 	rdlong	local02, local01
03b30     04 4E 06 F1 | 	add	local01, #4
03b34     27 53 02 FB | 	rdlong	local03, local01
03b38     06 55 02 F6 | 	mov	local04, objptr
03b3c     28 0D 02 F6 | 	mov	objptr, local02
03b40     2D 52 62 FD | 	call	local03
03b44     2A 0D 02 F6 | 	mov	objptr, local04
03b48     01 20 06 F6 | 	mov	result1, #1
03b4c     AF F0 03 F6 | 	mov	ptra, fp
03b50     BF 00 A0 FD | 	call	#popregs_
03b54                 | __struct___bas_wrap_sender_tx_ret
03b54     2D 00 64 FD | 	ret
03b58                 | 
03b58                 | LR__0239
03b58     20 21 21 21 
03b5c     20 63 6F 72 
03b60     72 75 70 74 
03b64     65 64 20 68 
03b68     65 61 70 3F 
03b6c     3F 3F 20 21 
03b70     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
03b73     00          | 	byte	0
03b74                 | LR__0240
03b74     20 21 21 21 
03b78     20 6F 75 74 
03b7c     20 6F 66 20 
03b80     68 65 61 70 
03b84     20 6D 65 6D 
03b88     6F 72 79 20 
03b8c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
03b90     00          | 	byte	0
03b91                 | LR__0241
03b91     20 21 21 21 
03b95     20 63 6F 72 
03b99     72 75 70 74 
03b9d     65 64 20 68 
03ba1     65 61 70 20 
03ba5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
03ba9     00          | 	byte	0
03baa                 | LR__0242
03baa     42 61 73 69 
03bae     63 20 74 65 
03bb2     73 74       | 	byte	"Basic test"
03bb4     00          | 	byte	0
03bb5                 | LR__0243
03bb5     6B 77 61 73 | 	byte	"kwas"
03bb9     00          | 	byte	0
03bba     00 00       | 	alignl
03bbc                 | _hng030rm_spin2_dat_
03bbc     00 00 00 00 
03bc0     00 00 00 00 
03bc4     00 00 00 00 
03bc8     00 00 00 00 
03bcc     00 00 00    | vga_font       file "vgafont.def"
03bcf     7E 81 A5 81 
03bd3     81 BD 99 81 
03bd7     81 7E 00 00 
03bdb     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
03bdf     7E FF DB FF 
03be3     FF C3 E7 FF 
03be7     FF 7E 00 00 
03beb     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
03bef     00 36 7F 7F 
03bf3     7F 7F 3E 1C 
03bf7     08 00 00 00 
03bfb     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
03bff     00 08 1C 3E 
03c03     7F 3E 1C 08 
03c07     00 00 00 00 
03c0b     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
03c0f     18 3C 3C E7 
03c13     E7 E7 18 18 
03c17     3C 00 00 00 
03c1b     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
03c1f     18 3C 7E FF 
03c23     FF 7E 18 18 
03c27     3C 00 00 00 
03c2b     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
03c2f     00 00 00 18 
03c33     3C 3C 18 00 
03c37     00 00 00 00 
03c3b     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
03c3f     FF FF FF E7 
03c43     C3 C3 E7 FF 
03c47     FF FF FF FF 
03c4b     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
03c4f     00 00 3C 66 
03c53     42 42 66 3C 
03c57     00 00 00 00 
03c5b     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
03c5f     FF FF C3 99 
03c63     BD BD 99 C3 
03c67     FF FF FF FF 
03c6b     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
03c6f     78 70 58 4C 
03c73     1E 33 33 33 
03c77     33 1E 00 00 
03c7b     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
03c7f     3C 66 66 66 
03c83     66 3C 18 7E 
03c87     18 18 00 00 
03c8b     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
03c8f     FC CC FC 0C 
03c93     0C 0C 0C 0E 
03c97     0F 07 00 00 
03c9b     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
03c9f     FE C6 FE C6 
03ca3     C6 C6 C6 E6 
03ca7     E7 67 03 00 
03cab     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
03caf     18 18 DB 3C 
03cb3     E7 3C DB 18 
03cb7     18 00 00 00 
03cbb     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
03cbf     03 07 0F 1F 
03cc3     7F 1F 0F 07 
03cc7     03 01 00 00 
03ccb     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
03ccf     60 70 78 7C 
03cd3     7F 7C 78 70 
03cd7     60 40 00 00 
03cdb     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
03cdf     18 3C 7E 18 
03ce3     18 18 7E 3C 
03ce7     18 00 00 00 
03ceb     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
03cef     66 66 66 66 
03cf3     66 66 66    | 	byte	$66[7]
03cf6     00 66 66 00 
03cfa     00 00 00 00 
03cfe     00 FE DB DB 
03d02     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
03d06     D8 D8 D8 00 
03d0a     00 00 00 3E 
03d0e     63 06 1C 36 
03d12     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
03d16     30 63 3E 00 
03d1a     00 00 00 00 
03d1e     00 00 00 00 
03d22     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03d26     7F 7F 7F 00 
03d2a     00 00 00 00 
03d2e     00 18 3C 7E 
03d32     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
03d36     3C 18 7E 00 
03d3a     00 00 00 00 
03d3e     00 18 3C 7E 
03d42     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
03d46     18 18 18 00 
03d4a     00 00 00 00 
03d4e     00 18 18 18 
03d52     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
03d56     7E 3C 18 00 
03d5a     00 00 00 00 
03d5e     00 00 00 18 
03d62     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
03d66     00 00 00 00 
03d6a     00 00 00 00 
03d6e     00 00 00    | 	byte	$00[11]
03d71     0C 06 7F 06 
03d75     0C 00 00 00 
03d79     00 00 00 00 
03d7d     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d81     00 03 03 03 
03d85     7F 00 00 00 
03d89     00 00 00 00 
03d8d     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d91     14 36 7F 36 
03d95     14 00 00 00 
03d99     00 00 00 00 
03d9d     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
03da1     1C 1C 3E 3E 
03da5     7F 7F 00 00 
03da9     00 00 00 00 
03dad     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03db1     7F 3E 3E 1C 
03db5     1C 08 00 00 
03db9     00 00 00 00 
03dbd     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03dc1     00 00 00 00 
03dc5     00 00 00 00 
03dc9     00 00 00 00 
03dcd     00 00       | 	byte	$00[14]
03dcf     18 3C 3C 3C 
03dd3     18 18 18 00 
03dd7     18 18 00 00 
03ddb     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
03ddf     66 24 00 00 
03de3     00 00 00 00 
03de7     00 00 00 00 
03deb     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03def     00 36 36 7F 
03df3     36 36 36 7F 
03df7     36 36 00 00 
03dfb     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
03dff     3E 63 43 03 
03e03     3E 60 60 61 
03e07     63 3E 18 18 
03e0b     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
03e0f     00 00 43 63 
03e13     30 18 0C 06 
03e17     63 61 00 00 
03e1b     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
03e1f     1C 36 36 1C 
03e23     6E 3B 33 33 
03e27     33 6E 00 00 
03e2b     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
03e2f     0C 0C 0C 06 
03e33     00 00 00 00 
03e37     00 00 00 00 
03e3b     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03e3f     30 18 0C 0C 
03e43     0C 0C 0C 0C 
03e47     18 30 00 00 
03e4b     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
03e4f     0C 18 30 30 
03e53     30 30 30 30 
03e57     18 0C 00 00 
03e5b     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
03e5f     00 00 00 66 
03e63     3C FF 3C 66 
03e67     00 00 00 00 
03e6b     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
03e6f     00 00 00 18 
03e73     18 7E 18 18 
03e77     00 00 00 00 
03e7b     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
03e7f     00 00 00 00 
03e83     00 00 00 00 | 	byte	$00[8]
03e87     18 18 18 0C 
03e8b     00 00 00 00 
03e8f     00 00 00 00 
03e93     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
03e97     00 00 00 00 
03e9b     00 00 00 00 
03e9f     00 00 00 00 
03ea3     00 00 00 00 | 	byte	$00[16]
03ea7     18 18 00 00 
03eab     00 00 00 00 
03eaf     00 00 40 60 
03eb3     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
03eb7     03 01 00 00 
03ebb     00 00 00 00 
03ebf     1C 36 63 63 
03ec3     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
03ec7     36 1C 00 00 
03ecb     00 00 00 00 
03ecf     18 1C 1E 18 
03ed3     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
03ed7     18 7E 00 00 
03edb     00 00 00 00 
03edf     3E 63 60 30 
03ee3     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
03ee7     63 7F 00 00 
03eeb     00 00 00 00 
03eef     3E 63 60 60 
03ef3     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
03ef7     63 3E 00 00 
03efb     00 00 00 00 
03eff     30 38 3C 36 
03f03     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
03f07     30 78 00 00 
03f0b     00 00 00 00 
03f0f     7F 03 03 03 
03f13     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
03f17     63 3E 00 00 
03f1b     00 00 00 00 
03f1f     1C 06 03 03 
03f23     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
03f27     63 3E 00 00 
03f2b     00 00 00 00 
03f2f     7F 63 60 60 
03f33     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
03f37     0C 0C 00 00 
03f3b     00 00 00 00 
03f3f     3E 63 63 63 
03f43     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
03f47     63 3E 00 00 
03f4b     00 00 00 00 
03f4f     3E 63 63 63 
03f53     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
03f57     30 1E 00 00 
03f5b     00 00 00 00 
03f5f     00 00 00 18 
03f63     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03f67     18 18 00 00 
03f6b     00 00 00 00 
03f6f     00 00 00 18 
03f73     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03f77     18 18 0C 00 
03f7b     00 00 00 00 
03f7f     00 60 30 18 
03f83     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
03f87     30 60 00 00 
03f8b     00 00 00 00 
03f8f     00 00 00 7E 
03f93     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
03f97     00 00 00 00 
03f9b     00 00 00 00 
03f9f     00          | 	byte	$00[9]
03fa0     06 0C 18 30 
03fa4     60 30 18 0C 
03fa8     06 00 00 00 
03fac     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
03fb0     63 63 30 18 
03fb4     18 18 00 18 
03fb8     18 00 00 00 
03fbc     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
03fc0     3E 63 63 7B 
03fc4     7B 7B 3B 03 
03fc8     3E 00 00 00 
03fcc     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
03fd0     1C 36 63 63 
03fd4     7F 63 63 63 
03fd8     63 00 00 00 
03fdc     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
03fe0     66 66 66 3E 
03fe4     66 66 66 66 
03fe8     3F 00 00 00 
03fec     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
03ff0     66 43 03 03 
03ff4     03 03 43 66 
03ff8     3C 00 00 00 
03ffc     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
04000     36 66 66 66 
04004     66 66 66 36 
04008     1F 00 00 00 
0400c     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
04010     66 46 16 1E 
04014     16 06 46 66 
04018     7F 00 00 00 
0401c     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
04020     66 46 16 1E 
04024     16 06 06 06 
04028     0F 00 00 00 
0402c     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
04030     66 43 03 03 
04034     7B 63 63 66 
04038     5C 00 00 00 
0403c     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
04040     63 63 63 7F 
04044     63 63 63 63 
04048     63 00 00 00 
0404c     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
04050     18 18 18 18 
04054     18 18 18 18 | 	byte	$18[8]
04058     3C 00 00 00 
0405c     00 00 00 78 
04060     30 30 30 30 
04064     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
04068     1E 00 00 00 
0406c     00 00 00 67 
04070     66 66 36 1E 
04074     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
04078     67 00 00 00 
0407c     00 00 00 0F 
04080     06 06 06 06 
04084     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
04088     7F 00 00 00 
0408c     00 00 00 63 
04090     77 7F 7F 6B 
04094     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
04098     63 00 00 00 
0409c     00 00 00 63 
040a0     67 6F 7F 7B 
040a4     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
040a8     63 00 00 00 
040ac     00 00 00 3E 
040b0     63 63 63 63 
040b4     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
040b8     3E 00 00 00 
040bc     00 00 00 3F 
040c0     66 66 66 3E 
040c4     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
040c8     0F 00 00 00 
040cc     00 00 00 3E 
040d0     63 63 63 63 
040d4     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
040d8     3E 30 70 00 
040dc     00 00 00 3F 
040e0     66 66 66 3E 
040e4     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
040e8     67 00 00 00 
040ec     00 00 00 3E 
040f0     63 63 06 1C 
040f4     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
040f8     3E 00 00 00 
040fc     00 00 00 7E 
04100     7E 5A 18 18 
04104     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04108     3C 00 00 00 
0410c     00 00 00 63 
04110     63 63 63 63 
04114     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
04118     3E 00 00 00 
0411c     00 00 00 63 
04120     63 63 63 63 
04124     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
04128     08 00 00 00 
0412c     00 00 00 63 
04130     63 63 63 6B 
04134     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
04138     36 00 00 00 
0413c     00 00 00 63 
04140     63 36 3E 1C 
04144     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
04148     63 00 00 00 
0414c     00 00 00 66 
04150     66 66 66 3C 
04154     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
04158     3C 00 00 00 
0415c     00 00 00 7F 
04160     63 61 30 18 
04164     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
04168     7F 00 00 00 
0416c     00 00 00 3C 
04170     0C 0C 0C 0C 
04174     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
04178     3C 00 00 00 
0417c     00 00 00 00 
04180     01 03 07 0E 
04184     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
04188     40 00 00 00 
0418c     00 00 00 3C 
04190     30 30 30 30 
04194     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
04198     3C 00 00 00 
0419c     1C 36 00 00 
041a0     00 00 00 00 
041a4     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
041a8     00 00 00 00 
041ac     00 00 00 00 
041b0     00 00 00 00 
041b4     00 00 00 00 
041b8     00          | 	byte	$00[17]
041b9     FF 00 00 0C 
041bd     18 00 00 00 
041c1     00 00 00 00 
041c5     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
041c9     00 00 00 00 
041cd     00 00 00 00 
041d1     00          | 	byte	$00[9]
041d2     1E 30 3E 33 
041d6     33 33 6E 00 
041da     00 00 00 00 
041de     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
041e2     1E 36 66 66 
041e6     66 66 3E 00 
041ea     00 00 00 00 
041ee     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
041f2     3E 63 03 03 
041f6     03 63 3E 00 
041fa     00 00 00 00 
041fe     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
04202     3C 36 33 33 
04206     33 33 6E 00 
0420a     00 00 00 00 
0420e     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
04212     3E 63 7F 03 
04216     03 63 3E 00 
0421a     00 00 00 00 
0421e     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
04222     0C 1E 0C 0C 
04226     0C 0C 1E 00 
0422a     00 00 00 00 
0422e     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
04232     6E 33 33 33 
04236     33 33 3E 30 
0423a     33 1E 00 00 
0423e     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
04242     36 6E 66 66 
04246     66 66 67 00 
0424a     00 00 00 00 
0424e     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
04252     1C 18 18 18 
04256     18 18 3C 00 
0425a     00 00 00 00 
0425e     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
04262     70 60 60 60 
04266     60 60 60 66 
0426a     66 3C 00 00 
0426e     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
04272     66 36 1E 1E 
04276     36 66 67 00 
0427a     00 00 00 00 
0427e     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
04282     18 18 18 18 
04286     18 18       | 	byte	$18[6]
04288     3C 00 00 00 
0428c     00 00 00 00 
04290     00 00 37 7F 
04294     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
04298     63 00 00 00 
0429c     00 00 00 00 
042a0     00 00 3B 66 
042a4     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
042a8     66 00 00 00 
042ac     00 00 00 00 
042b0     00 00 3E 63 
042b4     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
042b8     3E 00 00 00 
042bc     00 00 00 00 
042c0     00 00 3B 66 
042c4     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
042c8     3E 06 06 0F 
042cc     00 00 00 00 
042d0     00 00 6E 33 
042d4     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
042d8     3E 30 30 78 
042dc     00 00 00 00 
042e0     00 00 3B 6E 
042e4     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
042e8     0F 00 00 00 
042ec     00 00 00 00 
042f0     00 00 3E 63 
042f4     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
042f8     3E 00 00 00 
042fc     00 00 00 08 
04300     0C 0C 3F 0C 
04304     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04308     38 00 00 00 
0430c     00 00 00 00 
04310     00 00 33 33 
04314     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
04318     6E 00 00 00 
0431c     00 00 00 00 
04320     00 00 63 63 
04324     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
04328     1C 00 00 00 
0432c     00 00 00 00 
04330     00 00 63 63 
04334     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
04338     36 00 00 00 
0433c     00 00 00 00 
04340     00 00 63 36 
04344     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
04348     63 00 00 00 
0434c     00 00 00 00 
04350     00 00 63 63 
04354     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
04358     7E 60 30 1F 
0435c     00 00 00 00 
04360     00 00 7F 33 
04364     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
04368     7F 00 00 00 
0436c     00 00 00 70 
04370     18 18 18 0E 
04374     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
04378     70 00 00 00 
0437c     00 00 00 18 
04380     18 18 18 18 
04384     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
04388     18 00 00 00 
0438c     00 00 00 0E 
04390     18 18 18 70 
04394     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
04398     0E 00 00 00 
0439c     6E 3B 00 00 
043a0     00 00 00 00 
043a4     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
043a8     00 00 00 00 
043ac     00 00 00 00 
043b0     00 00       | 	byte	$00[10]
043b2     08 1C 36 63 
043b6     63 63 7F 00 
043ba     00 00 00 00 
043be     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
043c2     03 03 03 03 
043c6     43 66 3C 18 
043ca     30 1E 00 00 
043ce     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
043d2     33 33 33 33 
043d6     33 33       | 	byte	$33[6]
043d8     6E 00 00 00 
043dc     00 00 60 30 
043e0     18 00 3E 63 
043e4     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
043e8     3E 00 00 00 
043ec     00 00 08 1C 
043f0     36 00 1E 30 
043f4     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
043f8     6E 00 00 00 
043fc     00 00 00 00 
04400     33 00 1E 30 
04404     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
04408     6E 00 00 00 
0440c     00 00 1C 36 
04410     1C 00 33 33 
04414     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
04418     6E 00 00 00 
0441c     00 00 60 30 
04420     18 00 3E 63 
04424     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
04428     3E 00 00 00 
0442c     00 00 00 00 
04430     00 00 3E 63 
04434     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
04438     3E 18 30 1E 
0443c     00 00 00 1C 
04440     58 78 38 18 
04444     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
04448     3C 00 00 00 
0444c     00 00 00 00 
04450     63 00 3E 63 
04454     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
04458     3E 00 00 00 
0445c     66 33 00 3E 
04460     63 63 63 63 
04464     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04468     3E 00 00 00 
0446c     00 00 CC 66 
04470     33 00 3E 63 
04474     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
04478     3E 00 00 00 
0447c     00 00 18 3C 
04480     66 00 1C 18 
04484     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
04488     3C 00 00 00 
0448c     30 18 00 7F 
04490     63 61 30 18 
04494     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
04498     7F 00 00 00 
0449c     00 63 00 08 
044a0     1C 36 63 63 
044a4     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
044a8     63 00 00 00 
044ac     30 18 00 3C 
044b0     66 43 03 03 
044b4     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
044b8     3C 00 00 00 
044bc     30 18 00 7F 
044c0     66 46 16 1E 
044c4     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
044c8     7F 00 00 00 
044cc     0C 06 00 0F 
044d0     06 06 06 06 
044d4     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
044d8     7F 00 00 00 
044dc     30 18 00 1C 
044e0     18 18 18 18 
044e4     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
044e8     3C 00 00 00 
044ec     00 00 08 1C 
044f0     36 00 3E 63 
044f4     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
044f8     3E 00 00 00 
044fc     00 00 00 00 
04500     63 00 3E 63 
04504     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
04508     3E 00 00 00 
0450c     00 00 00 6F 
04510     46 26 06 06 
04514     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
04518     7F 00 00 00 
0451c     00 00 00 6E 
04520     4C 2C 0C 0C 
04524     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
04528     1E 00 00 00 
0452c     30 18 00 3E 
04530     63 63 06 1C 
04534     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
04538     3E 00 00 00 
0453c     00 00 60 30 
04540     18 00 3E 63 
04544     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
04548     3E 00 00 00 
0454c     00 63 00 3E 
04550     63 63 63 63 
04554     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04558     3E 00 00 00 
0455c     00 63 00 63 
04560     63 63 63 63 
04564     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
04568     3E 00 00 00 
0456c     6C 38 00 7E 
04570     7E 5A 18 18 
04574     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04578     3C 00 00 00 
0457c     00 00 60 48 
04580     2C 0C 3F 0C 
04584     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04588     38 00 00 00 
0458c     00 00 00 0F 
04590     26 36 1E 0E 
04594     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
04598     7F 00 00 00 
0459c     00 00 00 00 
045a0     00 63 36 1C 
045a4     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
045a8     00 00 00 00 
045ac     00 00       | 	byte	$00[6]
045ae     36 1C 08 00 
045b2     3E 63 03 03 
045b6     03 63 3E 00 
045ba     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
045be     30 18 0C 00 
045c2     1E 30 3E 33 
045c6     33 33 6E 00 
045ca     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
045ce     60 30 18 00 
045d2     1C 18 18 18 
045d6     18 18 3C 00 
045da     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
045de     60 30 18 00 
045e2     3E 63 63 63 
045e6     63 63 3E 00 
045ea     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
045ee     30 18 0C 00 
045f2     33 33 33 33 
045f6     33 33 6E 00 
045fa     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
045fe     00 08 1C 36 
04602     63 63 7F 63 
04606     63 63 63 18 
0460a     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
0460e     00 00 00 00 
04612     1E 30 3E 33 
04616     33 33 6E 18 
0461a     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
0461e     00 7F 63 61 
04622     30 18 0C 06 
04626     43 63 7F 00 
0462a     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
0462e     36 1C 08 00 
04632     7F 33 18 0C 
04636     06 63 7F 00 
0463a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
0463e     00 7F 66 46 
04642     16 1E 16 06 
04646     46 66 7F 18 
0464a     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
0464e     00 00 00 00 
04652     3E 63 7F 03 
04656     03 63 3E 18 
0465a     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
0465e     00 3C 66 03 
04662     1F 03 0F 03 
04666     03 66 3C 00 
0466a     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
0466e     60 30 18 00 
04672     7F 33 18 0C 
04676     06 63 7F 00 
0467a     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
0467e     00 3C 66 43 
04682     03 03 03 03 
04686     43 66 3C 00 
0468a     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
0468e     00 00 00 00 
04692     3E 63 06 1C 
04696     30 63 3E 18 
0469a     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
0469e     00 00 00 00 
046a2     00 00       | 	byte	$00[6]
046a4     6C 36 1B 36 
046a8     6C 00 00 00 
046ac     00 00 00 00 
046b0     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
046b4     1B 36 6C 36 
046b8     1B 00 00 00 
046bc     88 22 88 22 
046c0     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
046c4     88 22 88 22 
046c8     88 22 88 22 
046cc     AA 55 AA 55 
046d0     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
046d4     AA 55 AA 55 
046d8     AA 55 AA 55 
046dc     BB EE BB EE 
046e0     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
046e4     BB EE BB EE 
046e8     BB EE BB EE 
046ec     18 18 18 18 
046f0     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
046f4     18 18 18 18 
046f8     18 18 18 18 
046fc     18 18 18 18 
04700     18 18 18    | 	byte	$18[15]
04703     1F 18 18 18 
04707     18 18 18 18 
0470b     18 30 18 00 
0470f     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
04713     63 7F 63 63 
04717     63 63 00 00 
0471b     00 1C 36 00 
0471f     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
04723     63 7F 63 63 
04727     63 63 00 00 
0472b     00 36 1C 00 
0472f     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
04733     1E 16 06 46 
04737     66 7F 00 00 
0473b     00 00 00 00 
0473f     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
04743     1C 30 60 63 
04747     63 3E 18 30 
0474b     1E 6C 6C 6C 
0474f     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
04753     6F 6C 6C 6C 
04757     6C 6C 6C 6C 
0475b     6C 6C 6C 6C 
0475f     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04763     6C 6C 6C 6C 
04767     6C 6C 6C 6C 
0476b     6C          | 	byte	$6c[9]
0476c     00 00 00 00 
04770     00          | 	byte	$00[5]
04771     7F 60 6F 6C 
04775     6C 6C 6C 6C 
04779     6C 6C 6C 6C 
0477d     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04781     6F 60 7F 00 
04785     00 00 00 00 
04789     00 00 00 18 
0478d     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
04791     61 30 18 0C 
04795     06 43 63 7F 
04799     00 00 00 00 
0479d     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
047a1     00 7F 33 18 
047a5     0C 06 63 7F 
047a9     00 00 00 00 
047ad     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
047b1     00 00 1F 18 
047b5     18 18 18 18 
047b9     18 18 18 18 
047bd     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
047c1     18 18 F8 00 
047c5     00 00 00 00 
047c9     00 00 00 18 
047cd     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
047d1     18 18 FF 00 
047d5     00 00 00 00 
047d9     00 00 00 00 
047dd     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
047e1     00 00 FF 18 
047e5     18 18 18 18 
047e9     18 18 18 18 
047ed     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
047f1     18 18 F8 18 
047f5     18 18 18 18 
047f9     18 18 18 00 
047fd     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
04801     00 00 FF 00 
04805     00 00 00 00 
04809     00 00 00 18 
0480d     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
04811     18 18 FF 18 
04815     18 18 18 18 
04819     18 18 18 63 
0481d     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
04821     36 63 63 7F 
04825     63 63 63 63 
04829     00 00 00 00 
0482d     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
04831     00 1E 30 3E 
04835     33 33 33 6E 
04839     00 00 00 6C 
0483d     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
04841     EC 0C FC 00 
04845     00 00 00 00 
04849     00 00 00 00 
0484d     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04851     FC 0C EC 6C 
04855     6C 6C 6C 6C 
04859     6C 6C 6C 6C 
0485d     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04861     EF 00 FF 00 
04865     00 00 00 00 
04869     00 00 00 00 
0486d     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04871     FF 00 EF 6C 
04875     6C 6C 6C 6C 
04879     6C 6C 6C 6C 
0487d     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04881     EC 0C EC 6C 
04885     6C 6C 6C 6C 
04889     6C 6C 6C 00 
0488d     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04891     FF 00 FF 00 
04895     00 00 00 00 
04899     00 00 00 6C 
0489d     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
048a1     EF 00 EF 6C 
048a5     6C 6C 6C 6C 
048a9     6C 6C 6C 00 
048ad     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
048b1     63 3E 63 63 
048b5     63 63 3E 63 
048b9     00 00 00 00 
048bd     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
048c1     30 3C 36 33 
048c5     33 33 33 6E 
048c9     00 00 00 00 
048cd     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
048d1     66 66 6F 66 
048d5     66 66 36 1F 
048d9     00 00 00 36 
048dd     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
048e1     66 66 66 66 
048e5     66 66       | 	byte	$66[6]
048e7     36 1F 00 00 
048eb     00 00 63 00 
048ef     7F 66 46 16 
048f3     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
048f7     66 7F 00 00 
048fb     00 6C 38 00 
048ff     38 30 30 3C 
04903     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
04907     33 6E 00 00 
0490b     00 36 1C 00 
0490f     63 67 6F 7F 
04913     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
04917     63 63 00 00 
0491b     00 30 18 00 
0491f     3C 18 18 18 
04923     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04927     18 3C 00 00 
0492b     00 3C 66 00 
0492f     3C 18 18 18 
04933     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04937     18 3C 00 00 
0493b     00 00 00 36 
0493f     1C 08 00 3E 
04943     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
04947     63 3E 00 00 
0494b     00 18 18 18 
0494f     18 18 18 18 
04953     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
04957     00 00 00 00 
0495b     00 00 00 00 
0495f     00 00 00 00 | 	byte	$00[12]
04963     F8 18 18 18 
04967     18 18 18 18 
0496b     18 FF FF FF 
0496f     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
04973     FF FF FF FF 
04977     FF FF FF FF 
0497b     FF          | 	byte	$ff[9]
0497c     00 00 00 00 
04980     00 00 00    | 	byte	$00[7]
04983     FF FF FF FF 
04987     FF FF FF FF 
0498b     FF          | 	byte	$ff[9]
0498c     00 00 00 7E 
04990     7E 5A 18 18 
04994     18 18 18 18 
04998     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
0499c     1C 36 1C 63 
049a0     63 63 63 63 
049a4     63 63 63 63 
049a8     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
049ac     FF FF FF FF 
049b0     FF FF FF    | 	byte	$ff[7]
049b3     00 00 00 00 
049b7     00 00 00 00 
049bb     00          | 	byte	$00[9]
049bc     30 18 00 3E 
049c0     63 63 63 63 
049c4     63 63 63 63 
049c8     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
049cc     00 00 00 1E 
049d0     33 33 33 1B 
049d4     33 63 63 63 
049d8     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
049dc     1C 36 00 3E 
049e0     63 63 63 63 
049e4     63 63 63 63 
049e8     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
049ec     30 18 00 63 
049f0     67 6F 7F 7B 
049f4     73 63 63 63 
049f8     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
049fc     00 00 60 30 
04a00     18 00 3B 66 
04a04     66 66 66 66 
04a08     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
04a0c     00 00 36 1C 
04a10     08 00 3B 66 
04a14     66 66 66 66 
04a18     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
04a1c     36 1C 00 3E 
04a20     63 63 06 1C 
04a24     30 60 63 63 
04a28     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
04a2c     00 00 36 1C 
04a30     08 00 3E 63 
04a34     06 1C 30 63 
04a38     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
04a3c     30 18 00 3F 
04a40     66 66 66 3E 
04a44     36 66 66 66 
04a48     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
04a4c     30 18 00 63 
04a50     63 63 63 63 
04a54     63 63 63 63 
04a58     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04a5c     00 00 60 30 
04a60     18 00 3B 6E 
04a64     66 06 06 06 
04a68     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
04a6c     66 33 00 63 
04a70     63 63 63 63 
04a74     63 63 63 63 
04a78     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04a7c     00 00 60 30 
04a80     18 00 63 63 
04a84     63 63 63 63 
04a88     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
04a8c     30 18 00 66 
04a90     66 66 66 3C 
04a94     18 18 18 18 
04a98     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
04a9c     00 00 00 08 
04aa0     0C 0C 3F 0C 
04aa4     0C 0C 0C 6C 
04aa8     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
04aac     30 18 00 00 
04ab0     00 00 00 00 
04ab4     00 00 00 00 
04ab8     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04abc     00 00 00 00 
04ac0     00 00 00 00 | 	byte	$00[8]
04ac4     7F 00 00 00 
04ac8     00 00 00 00 
04acc     66 33 00 00 
04ad0     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
04ad4     00 00 00 00 
04ad8     00 00 00 00 
04adc     00 00 00 00 
04ae0     00 00 00 00 
04ae4     00 00 00 00 
04ae8     00          | 	byte	$00[21]
04ae9     0C 06 3C 36 
04aed     1C 00 00 00 
04af1     00 00 00 00 
04af5     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04af9     00 00 00 63 
04afd     3E 00 00 00 
04b01     00 00 00 00 
04b05     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04b09     00 00 00 00 
04b0d     3E 63 06 1C 
04b11     36 63 63 36 
04b15     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
04b19     00 00 00 00 
04b1d     00 00 00 00 | 	byte	$00[8]
04b21     18 00 7E 00 
04b25     18 00 00 00 
04b29     00 00 00 00 
04b2d     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04b31     00 00 00 00 
04b35     00 00 00 00 | 	byte	$00[8]
04b39     18 30 1E 00 
04b3d     00 00 1C 36 
04b41     36 1C 00 00 
04b45     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
04b49     00 00 00 00 
04b4d     63 00 00 00 
04b51     00 00 00 00 
04b55     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04b59     00 00 00 18 
04b5d     18 00 00 00 
04b61     00 00 00 00 
04b65     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04b69     00 00 00 00 
04b6d     00          | 	byte	$00[5]
04b6e     CC 66 33 00 
04b72     33 33 33 33 
04b76     33 33 6E 00 
04b7a     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
04b7e     00 3F 66 66 
04b82     66 3E 36 66 
04b86     66 66 6F 00 
04b8a     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
04b8e     36 1C 08 00 
04b92     3B 6E 66 06 
04b96     06 06 0F 00 
04b9a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
04b9e     00 00 00 7E 
04ba2     7E 7E 7E 7E 
04ba6     7E 7E 00 00 
04baa     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
04bae     00 00 00 00 
04bb2     00 00 00 00 
04bb6     00 00 00 00 
04bba     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04bbc     00 00 00 00 
      ...             
04bec     00 00 00 00 
04bf0     00 00 00    | st_font        file "st4font.def"
04bf3     FF FF 00 00 
04bf7     00 00 00 00 
04bfb     00 18 18 18 
04bff     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04c03     18 18 18 18 
04c07     18 18 18 18 
04c0b     18          | 	byte	$18[9]
04c0c     00 00 00 00 
04c10     00 00 00    | 	byte	$00[7]
04c13     FF FF 18 18 
04c17     18 18 18 18 
04c1b     18 18 18 18 
04c1f     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04c23     FF FF 00 00 
04c27     00 00 00 00 
04c2b     00 18 18 18 
04c2f     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04c33     1F 1F 18 18 
04c37     18 18 18 18 
04c3b     18 18 18 18 
04c3f     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04c43     F8 F8 18 18 
04c47     18 18 18 18 
04c4b     18 00 00 00 
04c4f     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04c53     1F 1F 18 18 
04c57     18 18 18 18 
04c5b     18 00 00 00 
04c5f     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04c63     F8 F8 18 18 
04c67     18 18 18 18 
04c6b     18 18 18 18 
04c6f     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04c73     1F 1F 00 00 
04c77     00 00 00 00 
04c7b     00 18 18 18 
04c7f     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04c83     F8 F8 00 00 
04c87     00 00 00 00 
04c8b     00 18 18 18 
04c8f     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04c93     FF FF 18 18 
04c97     18 18 18 18 
04c9b     18 00 00 18 
04c9f     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
04ca3     66 7E 7E 66 
04ca7     66 66 66 30 
04cab     18 00 00 7E 
04caf     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
04cb3     3E 06 06 06 
04cb7     06 7E 7E 18 
04cbb     0C 30 18 3C 
04cbf     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
04cc3     06 06 06 66 
04cc7     66 7E 3C 00 
04ccb     00 30 18 66 
04ccf     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
04cd3     7E 7E 76 76 
04cd7     66 66 66 00 
04cdb     00 30 18 7C 
04cdf     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
04ce3     1C 38 70 60 
04ce7     60 7E 3E 00 
04ceb     00 30 18 7E 
04cef     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
04cf3     18 0C 0C 06 
04cf7     06 7E 7E 00 
04cfb     00 18 18 00 
04cff     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
04d03     18 18 0C 0C 
04d07     06 7E 7E 00 
04d0b     00 30 18 3C 
04d0f     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
04d13     66 66 66 66 
04d17     66          | 	byte	$66[5]
04d18     7E 3C 00 00 
04d1c     00 00 06 06 
04d20     06 06 16 1E 
04d24     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
04d28     7E 7E 00 00 
04d2c     00 00 00 00 
04d30     00 3C 7C 60 
04d34     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
04d38     7E 7C 30 18 
04d3c     00 00 00 00 
04d40     00 3C 7E 66 
04d44     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
04d48     7E 7C 18 0C 
04d4c     00 00 30 18 
04d50     00 3C 3E 06 
04d54     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
04d58     7E 7C 00 00 
04d5c     00 00 30 18 
04d60     00 3E 7E 66 
04d64     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
04d68     66 66 00 00 
04d6c     00 00 30 18 
04d70     00 7C 7E 06 
04d74     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
04d78     7E 3E 00 00 
04d7c     00 00 30 18 
04d80     00 7E 7E 30 
04d84     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04d88     7E 7E 00 00 
04d8c     00 00 18 18 
04d90     00 7E 7E 30 
04d94     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04d98     7E 7E 00 00 
04d9c     00 00 30 18 
04da0     00 3C 7E 66 
04da4     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
04da8     7E 3C 00 00 
04dac     00 00 1C 1C 
04db0     18 18 38 3C 
04db4     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
04db8     3C 3C 00 00 
04dbc     00 00 00 00 
04dc0     00 00 00 00 
04dc4     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04dc8     00 00 00 00 
04dcc     00 00       | 	byte	$00[6]
04dce     18 18 18 18 
04dd2     18 18 18 18 | 	byte	$18[8]
04dd6     00 00 18 18 
04dda     00 00 00 00 
04dde     66 66 66 66 
04de2     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
04de6     00 00 00 00 
04dea     00 00 00 00 
04dee     00          | 	byte	$00[9]
04def     66 66 FF FF 
04df3     66 66 FF FF 
04df7     66 66 00 00 
04dfb     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
04dff     7C 7E 06 06 
04e03     3E 7C 60 60 
04e07     7E 3E 18 18 
04e0b     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
04e0f     66 30 30 18 
04e13     18 0C 0C 66 
04e17     66 00 00 00 
04e1b     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
04e1f     66 66 3C 1C 
04e23     1C FC FE 66 
04e27     66 FE FC 00 
04e2b     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
04e2f     18 18 18 18 
04e33     00 00 00 00 
04e37     00 00 00 00 
04e3b     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
04e3f     18 1C 0C 0C 
04e43     0C 0C 0C 0C 
04e47     1C 18 30 00 
04e4b     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
04e4f     18 38 30 30 
04e53     30 30 30 30 
04e57     38 18 0C 00 
04e5b     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
04e5f     66 66 3C 3C 
04e63     FF FF 3C 3C 
04e67     66 66 00 00 
04e6b     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
04e6f     00 18 18 18 
04e73     7E 7E 18 18 
04e77     18 00 00 00 
04e7b     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04e7f     00 00 00 00 
04e83     00 00       | 	byte	$00[6]
04e85     18 18 18 18 
04e89     18          | 	byte	$18[5]
04e8a     0C 04 00 00 
04e8e     00 00 00 00 
04e92     7E 7E 00 00 
04e96     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
04e9a     00 00 00 00 
04e9e     00 00 00 00 
04ea2     00 00 00 00 
04ea6     00          | 	byte	$00[13]
04ea7     18 18 18 00 
04eab     00 00 00 60 
04eaf     60 60 30 30 
04eb3     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
04eb7     06 06 06 00 
04ebb     00 00 00 3C 
04ebf     7E 66 66 66 
04ec3     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
04ec7     66 7E 3C 00 
04ecb     00 00 00 18 
04ecf     18 1C 1C 18 
04ed3     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
04ed7     18 7E 7E 00 
04edb     00 00 00 3C 
04edf     7E 66 66 30 
04ee3     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
04ee7     0C 7E 7E 00 
04eeb     00 00 00 7E 
04eef     7E 30 30 18 
04ef3     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
04ef7     66 7E 3C 00 
04efb     00 00 00 30 
04eff     30 38 38 3C 
04f03     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
04f07     7E 30 30 00 
04f0b     00 00 00 7E 
04f0f     7E 06 06 3E 
04f13     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
04f17     66 7E 3C 00 
04f1b     00 00 00 38 
04f1f     3C 0E 06 06 
04f23     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
04f27     66 7E 3C 00 
04f2b     00 00 00 7E 
04f2f     7E 60 60 30 
04f33     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
04f37     0C 0C 0C 00 
04f3b     00 00 00 3C 
04f3f     7E 66 66 3C 
04f43     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
04f47     66 7E 3C 00 
04f4b     00 00 00 3C 
04f4f     7E 66 66 7E 
04f53     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
04f57     70 3C 1C 00 
04f5b     00 00 00 00 
04f5f     00 00 18 18 
04f63     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
04f67     18 18 18 00 
04f6b     00 00 00 00 
04f6f     00 00 18 18 
04f73     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
04f77     18 18 18 0C 
04f7b     04 00 00 00 
04f7f     70 38 1C 0E 
04f83     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
04f87     70 00 00 00 
04f8b     00 00 00 00 
04f8f     00 00 7E 7E 
04f93     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
04f97     00 00 00 00 
04f9b     00 00 00 00 | 	byte	$00[8]
04f9f     0E 1C 38 70 
04fa3     E0 70 38 1C 
04fa7     0E 00 00 00 
04fab     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
04faf     7E 66 66 30 
04fb3     30 18 18 18 
04fb7     00 18 18 00 
04fbb     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
04fbf     7E 66 66 66 
04fc3     66 36 06 66 
04fc7     66 7E 3C 00 
04fcb     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
04fcf     3C 7E 66 66 
04fd3     66 7E 7E 66 
04fd7     66 66 66 00 
04fdb     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
04fdf     7E 66 66 7E 
04fe3     3E 66 66 66 
04fe7     66 7E 3E 00 
04feb     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
04fef     7E 66 66 06 
04ff3     06 06 06 66 
04ff7     66 7E 3C 00 
04ffb     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
04fff     7E 66 66 66 
05003     66 66 66 66 
05007     66 7E 3E 00 
0500b     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
0500f     7E 06 06 3E 
05013     3E 06 06 06 
05017     06 7E 7E 00 
0501b     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
0501f     7E 06 06 3E 
05023     3E 06 06 06 
05027     06 06 06 00 
0502b     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
0502f     7E 06 06 76 
05033     76 66 66 66 
05037     66 7E 3C 00 
0503b     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
0503f     66 66 66 7E 
05043     7E 66 66 66 
05047     66 66 66 00 
0504b     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
0504f     7E 18 18 18 
05053     18 18 18 18 
05057     18 7E 7E 00 
0505b     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
0505f     60 60 60 60 
05063     60 60 60    | 	byte	$60[7]
05066     66 66 7E 3C 
0506a     00 00 00 00 
0506e     66 66 36 36 
05072     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
05076     66 66 C6 C6 
0507a     00 00 00 00 
0507e     06 06 06 06 
05082     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
05086     06 06 7E 7E 
0508a     00 00 00 00 
0508e     C6 C6 EE EE 
05092     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
05096     C6 C6 C6 C6 
0509a     00 00 00 00 
0509e     66 66 66 6E 
050a2     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
050a6     76 66 66 66 
050aa     00 00 00 00 
050ae     3C 7E 66 66 
050b2     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
050b6     66 66 7E 3C 
050ba     00 00 00 00 
050be     3E 7E 66 66 
050c2     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
050c6     06 06 06 06 
050ca     00 00 00 00 
050ce     3C 7E 66 66 
050d2     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
050d6     66 56 3E 6C 
050da     00 00 00 00 
050de     3E 7E 66 66 
050e2     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
050e6     66 66 C6 C6 
050ea     00 00 00 00 
050ee     7C 7E 06 06 
050f2     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
050f6     60 60 7E 3E 
050fa     00 00 00 00 
050fe     7E 7E 18 18 
05102     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
05106     18 18 18 18 
0510a     00 00 00 00 
0510e     66 66 66 66 
05112     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
05116     66 66 7E 3C 
0511a     00 00 00 00 
0511e     66 66 66 66 
05122     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
05126     3C 3C 18 18 
0512a     00 00 00 00 
0512e     C6 C6 C6 C6 
05132     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
05136     FE EE C6 82 
0513a     00 00 00 00 
0513e     66 66 66 3C 
05142     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
05146     3C 66 66 66 
0514a     00 00 00 00 
0514e     66 66 66 66 
05152     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
05156     18 18 18 18 
0515a     00 00 00 00 
0515e     7E 7E 30 30 
05162     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
05166     06 06 7E 7E 
0516a     00 00 00 00 
0516e     3C 3C 0C 0C 
05172     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
05176     0C 0C 3C 3C 
0517a     00 00 00 00 
0517e     06 06 0C 0C 
05182     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
05186     60 60 C0 C0 
0518a     00 00 00 00 
0518e     3C 3C 30 30 
05192     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
05196     30 30 3C 3C 
0519a     00 00 00 00 
0519e     18 18 3C 3C 
051a2     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
051a6     00 00 00 00 
051aa     00 00 00 00 
051ae     00 00 00 00 
051b2     00 00 00 00 
051b6     00 00       | 	byte	$00[18]
051b8     FE FE 00 00 
051bc     00 00 0C 0C 
051c0     18 18 00 00 
051c4     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
051c8     00 00 00 00 
051cc     00 00 00 00 
051d0     00          | 	byte	$00[9]
051d1     3C 7C 60 7C 
051d5     7E 66 66 7E 
051d9     7C 00 00 00 
051dd     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
051e1     3E 7E 66 66 
051e5     66 66 66 7E 
051e9     3E 00 00 00 
051ed     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
051f1     3C 3E 06 06 
051f5     06 06 06 7E 
051f9     7C 00 00 00 
051fd     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
05201     7C 7E 66 66 
05205     66 66 66 7E 
05209     7C 00 00 00 
0520d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
05211     3C 7E 66 66 
05215     7E 06 06 7E 
05219     7C 00 00 00 
0521d     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
05221     18 7E 7E 18 
05225     18 18 18 18 
05229     18 00 00 00 
0522d     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
05231     7C 7E 66 66 
05235     66 66 7E 7C 
05239     60 7E 3E 00 
0523d     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
05241     3E 7E 66 66 
05245     66 66 66 66 
05249     66 00 00 00 
0524d     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
05251     1C 1C 18 18 
05255     18 18 18 3C 
05259     3C 00 00 00 
0525d     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
05261     30 30 30 30 
05265     30 30 30 30 
05269     30          | 	byte	$30[9]
0526a     3E 1E 00 00 
0526e     06 06 06 36 
05272     36 1E 1E 1E 
05276     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
0527a     00 00 00 00 
0527e     1C 1C 18 18 
05282     18 18 18 18 
05286     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
0528a     00 00 00 00 
0528e     00 00 00    | 	byte	$00[7]
05291     6C FE FE D6 
05295     D6 C6 C6 C6 
05299     C6 00 00 00 
0529d     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
052a1     3E 7E 66 66 
052a5     66 66 66 66 
052a9     66 00 00 00 
052ad     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
052b1     3C 7E 66 66 
052b5     66 66 66 7E 
052b9     3C 00 00 00 
052bd     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
052c1     3E 7E 66 66 
052c5     66 66 66 7E 
052c9     3E 06 06 00 
052cd     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
052d1     7C 7E 66 66 
052d5     66 66 66 7E 
052d9     7C 60 60 00 
052dd     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
052e1     3E 7E 66 06 
052e5     06 06 06 06 
052e9     06 00 00 00 
052ed     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
052f1     7C 7E 06 0E 
052f5     3C 70 60 7E 
052f9     3E 00 00 00 
052fd     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
05301     7E 7E 18 18 
05305     18 18 18 78 
05309     70 00 00 00 
0530d     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
05311     66 66 66 66 
05315     66 66 66    | 	byte	$66[7]
05318     7E 7C 00 00 
0531c     00 00 00 00 
05320     00 66 66 66 
05324     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
05328     18 18 00 00 
0532c     00 00 00 00 
05330     00 C6 C6 D6 
05334     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
05338     C6 82 00 00 
0533c     00 00 00 00 
05340     00 66 66 3C 
05344     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
05348     66 66 00 00 
0534c     00 00 00 00 
05350     00 66 66 66 
05354     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
05358     7C 60 7E 3E 
0535c     00 00 00 00 
05360     00 7E 7E 30 
05364     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
05368     7E 7E 00 00 
0536c     00 00 30 18 
05370     18 18 18 0C 
05374     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
05378     18 30 00 00 
0537c     00 00 18 18 
05380     18 18 18 18 
05384     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
05388     18 18 00 00 
0538c     00 00 0C 18 
05390     18 18 18 30 
05394     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
05398     18 0C 00 00 
0539c     00 00 6C 7E 
053a0     36 00 00 00 
053a4     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
053a8     00 00 00 00 
053ac     00 00 00 00 
053b0     00          | 	byte	$00[9]
053b1     18 18 18 18 
053b5     18 18 00 00 
053b9     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
053bc     00 00 00 00 
053c0     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
053c4     00 00 00 00 
053c8     00 80 80 80 
053cc     00 00 00 FF 
053d0     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
053d4     00 00 00 00 
053d8     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
053d9     80 00 00 00 
053dd     00 80 00 00 
053e1     80 80 00 00 
053e5     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
053e9     80 00 80 00 
053ed     00 40 80 00 
053f1     AA AA AA 00 
053f5     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
053f9     FF 00 00 00 
053fd     00 FF 00 00 
05401     FF FF 00 00 
05405     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
05409     FF 00 FF 00 
0540d     00 FF FF 00 
05411     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
05414     00 00 00 00 
05418     00          | ataripalette   file "ataripalettep2.def"
05419     11 11 11 00 
0541d     22 22 22 00 
05421     33 33 33 00 
05425     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
05429     55 55 55 00 
0542d     66 66 66 00 
05431     77 77 77 00 
05435     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
05439     99 99 99 00 
0543d     AA AA AA 00 
05441     BB BB BB 00 
05445     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
05449     DD DD DD 00 
0544d     EE EE EE 00 
05451     FF FF FF 00 
05455     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
05459     00 14 40 00 
0545d     00 1E 60 00 
05461     00 28 80 00 
05465     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
05469     00 3C BF 00 
0546d     00 46 DF 00 
05471     00 50 FF 00 
05475     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
05479     39 77 FF 00 
0547d     55 8A FF 00 
05481     71 9E FF 00 
05485     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
05489     AA C5 FF 00 
0548d     C6 D8 FF 00 
05491     E3 EC FF 00 
05495     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
05499     00 00 40 00 
0549d     00 00 60 00 
054a1     00 00 80 00 
054a5     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
054a9     00 00 BF 00 
054ad     00 00 DF 00 
054b1     00 00 FF 00 
054b5     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
054b9     39 39 FF 00 
054bd     55 55 FF 00 
054c1     71 71 FF 00 
054c5     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
054c9     AA AA FF 00 
054cd     C6 C6 FF 00 
054d1     E3 E3 FF 00 
054d5     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
054d9     20 00 40 00 
054dd     30 00 60 00 
054e1     40 00 80 00 
054e5     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
054e9     60 00 BF 00 
054ed     70 00 DF 00 
054f1     80 00 FF 00 
054f5     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
054f9     9C 39 FF 00 
054fd     AA 55 FF 00 
05501     B8 71 FF 00 
05505     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
05509     D5 AA FF 00 
0550d     E3 C6 FF 00 
05511     F1 E3 FF 00 
05515     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
05519     40 00 40 00 
0551d     60 00 60 00 
05521     80 00 80 00 
05525     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
05529     BF 00 BF 00 
0552d     DF 00 DF 00 
05531     FF 00 FF 00 
05535     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
05539     FF 39 FF 00 
0553d     FF 55 FF 00 
05541     FF 71 FF 00 
05545     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
05549     FF AA FF 00 
0554d     FF C6 FF 00 
05551     FF E3 FF 00 
05555     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
05559     40 00 20 00 
0555d     60 00 30 00 
05561     80 00 40 00 
05565     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
05569     BF 00 60 00 
0556d     DF 00 70 00 
05571     FF 00 80 00 
05575     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
05579     FF 39 9C 00 
0557d     FF 55 AA 00 
05581     FF 71 B8 00 
05585     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
05589     FF AA D5 00 
0558d     FF C6 E3 00 
05591     FF E3 F1 00 
05595     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
05599     40 00 00 00 
0559d     60 00 00 00 
055a1     80 00 00 00 
055a5     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
055a9     BF 00 00 00 
055ad     DF 00 00 00 
055b1     FF 00 00 00 
055b5     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
055b9     FF 39 39 00 
055bd     FF 55 55 00 
055c1     FF 71 71 00 
055c5     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
055c9     FF AA AA 00 
055cd     FF C6 C6 00 
055d1     FF E3 E3 00 
055d5     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
055d9     40 10 00 00 
055dd     60 18 00 00 
055e1     80 20 00 00 
055e5     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
055e9     BF 30 00 00 
055ed     DF 38 00 00 
055f1     FF 40 00 00 
055f5     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
055f9     FF 6A 39 00 
055fd     FF 80 55 00 
05601     FF 95 71 00 
05605     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
05609     FF BF AA 00 
0560d     FF D5 C6 00 
05611     FF EA E3 00 
05615     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
05619     40 20 00 00 
0561d     60 30 00 00 
05621     80 40 00 00 
05625     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
05629     BF 60 00 00 
0562d     DF 70 00 00 
05631     FF 80 00 00 
05635     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
05639     FF 9C 39 00 
0563d     FF AA 55 00 
05641     FF B8 71 00 
05645     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
05649     FF D5 AA 00 
0564d     FF E3 C6 00 
05651     FF F1 E3 00 
05655     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
05659     40 30 00 00 
0565d     60 48 00 00 
05661     80 60 00 00 
05665     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
05669     BF 90 00 00 
0566d     DF A8 00 00 
05671     FF C0 00 00 
05675     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
05679     FF CE 39 00 
0567d     FF D5 55 00 
05681     FF DC 71 00 
05685     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
05689     FF EA AA 00 
0568d     FF F1 C6 00 
05691     FF F8 E3 00 
05695     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
05699     30 40 00 00 
0569d     48 60 00 00 
056a1     60 80 00 00 
056a5     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
056a9     90 BF 00 00 
056ad     A8 DF 00 00 
056b1     C0 FF 00 00 
056b5     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
056b9     CE FF 39 00 
056bd     D5 FF 55 00 
056c1     DC FF 71 00 
056c5     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
056c9     EA FF AA 00 
056cd     F1 FF C6 00 
056d1     F8 FF E3 00 
056d5     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
056d9     00 40 00 00 
056dd     00 60 00 00 
056e1     00 80 00 00 
056e5     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
056e9     00 BF 00 00 
056ed     00 DF 00 00 
056f1     00 FF 00 00 
056f5     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
056f9     39 FF 39 00 
056fd     55 FF 55 00 
05701     71 FF 71 00 
05705     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
05709     AA FF AA 00 
0570d     C6 FF C6 00 
05711     E3 FF E3 00 
05715     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
05719     00 40 14 00 
0571d     00 60 1E 00 
05721     00 80 28 00 
05725     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
05729     00 BF 3C 00 
0572d     00 DF 46 00 
05731     00 FF 50 00 
05735     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
05739     39 FF 77 00 
0573d     55 FF 8A 00 
05741     71 FF 9E 00 
05745     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
05749     AA FF C5 00 
0574d     C6 FF D8 00 
05751     E3 FF EC 00 
05755     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
05759     00 40 28 00 
0575d     00 60 3C 00 
05761     00 80 50 00 
05765     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
05769     00 BF 78 00 
0576d     00 DF 8C 00 
05771     00 FF A0 00 
05775     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
05779     39 FF B5 00 
0577d     55 FF C0 00 
05781     71 FF CA 00 
05785     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
05789     AA FF DF 00 
0578d     C6 FF EA 00 
05791     E3 FF F4 00 
05795     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
05799     00 40 40 00 
0579d     00 60 60 00 
057a1     00 80 80 00 
057a5     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
057a9     00 BF BF 00 
057ad     00 DF DF 00 
057b1     00 FF FF 00 
057b5     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
057b9     39 FF FF 00 
057bd     55 FF FF 00 
057c1     71 FF FF 00 
057c5     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
057c9     AA FF FF 00 
057cd     C6 FF FF 00 
057d1     E3 FF FF 00 
057d5     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
057d9     00 28 40 00 
057dd     00 3C 60 00 
057e1     00 50 80 00 
057e5     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
057e9     00 78 BF 00 
057ed     00 8C DF 00 
057f1     00 A0 FF 00 
057f5     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
057f9     39 B5 FF 00 
057fd     55 C0 FF 00 
05801     71 CA FF 00 
05805     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
05809     AA DF FF 00 
0580d     C6 EA FF 00 
05811     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
05814                 | '**********************************************************************************
05814                 | '
05814                 | '        Timings and colors definitions
05814                 | '
05814                 | '**********************************************************************************
05814                 | 
05814                 |    'streamer sets for text mode, to add to timings[0..5]
05814                 | 
05814                 | 
05814                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
05814     10 00 00 00 
05818     50 00 00 00 
0581c     14 00 00 00 
05820     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
05824     70 00 00 00 
05828     08 00 00 00 
0582c     30 00 00 00 
05830     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
05834     10 00 00 00 
05838     10 00 00 00 
0583c     00 00 00 00 
05840     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
05844     E0 01 00 00 
05848     F6 32 24 15 
0584c     FB 6C C3 01 
05850     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
05854                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
05854     12 00 00 00 
05858     30 00 00 00 
0585c     10 00 00 00 
05860     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
05864     18 00 00 00 
05868     08 00 00 00 
0586c     18 00 00 00 
05870     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
05874     20 00 00 00 
05878     18 00 00 00 
0587c     40 00 00 00 
05880     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
05884     F0 01 00 00 
05888     00 D0 12 13 
0588c     FB 0F 00 01 
05890     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
05894     10 00 00 00 
05898     40 00 00 00 
0589c     10 00 00 00 
058a0     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
058a4     08 00 00 00 
058a8     08 00 00 00 
058ac     08 00 00 00 
058b0     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
058b4     40 00 00 00 
058b8     20 00 00 00 
058bc     80 00 00 00 
058c0     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
058c4     E0 01 00 00 
058c8     70 AE E9 10 
058cc     FB 8B FF 01 
058d0     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
058d4     10 00 00 00 
058d8     50 00 00 00 
058dc     14 00 00 00 
058e0     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
058e4     00 00 00 00 
058e8     08 00 00 00 
058ec     00 00 00 00 
058f0     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
058f4     10 00 00 00 
058f8     10 00 00 00 
058fc     C0 00 00 00 
05900     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
05904     40 02 00 00 
05908     F6 32 24 15 
0590c     FB 6C C3 01 
05910     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
05914     50 00 00 00 
05918     A0 00 00 00 
0591c     54 00 00 00 
05920     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
05924     08 00 00 00 
05928     08 00 00 00 
0592c     08 00 00 00 
05930     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05934     0C 00 00 00 
05938     08 00 00 00 
0593c     00 01 00 00 
05940     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
05944     E0 01 00 00 
05948     10 06 56 15 
0594c     FB 64 C3 01 
05950     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
05954     50 00 00 00 
05958     32 00 00 00 
0595c     50 00 00 00 
05960     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
05964     08 00 00 00 
05968     08 00 00 00 
0596c     08 00 00 00 
05970     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05974     0C 00 00 00 
05978     08 00 00 00 
0597c     40 01 00 00 
05980     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
05984     E0 01 00 00 
05988     F2 CD 33 13 
0598c     FB 53 92 01 
05990     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
05994     18 00 00 00 
05998     30 00 00 00 
0599c     18 00 00 00 
059a0     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
059a4     08 00 00 00 
059a8     08 00 00 00 
059ac     08 00 00 00 
059b0     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
059b4     0C 00 00 00 
059b8     08 00 00 00 
059bc     80 01 00 00 
059c0     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
059c4     E0 01 00 00 
059c8     F4 8F 11 11 
059cc     FB 3A 55 01 
059d0     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
059d4     20 00 00 00 
059d8     40 00 00 00 
059dc     22 00 00 00 
059e0     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
059e4     00 00 00 00 
059e8     08 00 00 00 
059ec     00 00 00 00 
059f0     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
059f4     0C 00 00 00 
059f8     08 00 00 00 
059fc     C0 01 00 00 
05a00     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
05a04     F0 01 00 00 
05a08     F2 CD 33 13 
05a0c     FB 53 92 01 
05a10     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
05a14                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
05a14     00 75 C7 97 
05a18     27 47 F6 0A 
05a1c     05 79 CB 9B 
05a20     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
05a24                 | 
05a24     28 12 64 FD | hdmi            setq    #9
05a28     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
05a2c                 |            '     setq2   #255
05a2c                 |             '    rdlong  $100, paletteptr 
05a2c     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
05a30     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
05a34     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
05a38     78 F9 02 F1 |                 add     ii,hbase
05a3c     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
05a40     7B 0B 80 FF 
05a44     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
05a48                 | 
05a48     66 66 86 FF 
05a4c     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
05a50                 | 
05a50                 | 
05a50                 | ''--------  frame rendering main loop  ---------------------------------------------------
05a50                 | 
05a50                 | p101
05a50     28 14 64 FD |                 setq    #10
05a54     00 DF 06 FB |                 rdlong  framebuf,  ptra
05a58     28 1E 64 FD |                 setq    #15
05a5c     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
05a60     71 99 02 FB |                 rdlong  border,borderptr
05a64                 | 
05a64     01 C4 06 F1 |                 add     frames,#1
05a68     76 F5 02 F6 |                 mov     dlptr2,dlptr
05a6c                 | 
05a6c     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
05a70     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
05a74     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
05a78     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
05a7c                 |  '' up porch
05a7c                 | 
05a7c     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
05a80     49 FF 02 F6 |                 mov     hsync1,sync_001
05a84     37 A8 46 FB |                 callpa  i_upporch ,#blank
05a88     72 01 68 FC |                 wrlong  #0,vblankptr
05a8c                 |                 
05a8c     1F EA 16 F4 |                 testb   paletteptr,#31 wc
05a90     29 FE 65 3D |          if_nc  setq2   #255
05a94     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
05a98                 | 
05a98                 | '' cursor blinking
05a98                 | 
05a98     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
05a9c     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
05aa0                 | 
05aa0                 | '' main screen
05aa0                 | 
05aa0     00 BE 06 F6 |                 mov linenum,#0
05aa4     00 18 07 F6 |                 mov rcnt,#0
05aa8     00 1C 07 F6 |                 mov rcnt2a,#0
05aac                 | 
05aac                 | 
05aac     00 18 0F F2 | p301            cmp rcnt,#0 wz
05ab0     18 00 90 AD |         if_z    jmp #p306
05ab4     01 18 87 F1 |                 sub rcnt,#1
05ab8     90 F7 02 F6 |                 mov dl,rdl
05abc     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
05ac0     8F F7 02 A1 |    if_z        add dl,roffset  
05ac4     7B 21 03 F6 |                 mov rdl,dl
05ac8     04 00 90 FD |                 jmp #p307          
05acc                 |           
05acc                 |                 
05acc     7A F7 02 FB | p306            rdlong  dl,dlptr2
05ad0     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
05ad4     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
05ad8     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
05adc                 | 
05adc                 | '' Special entry:
05adc                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
05adc                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
05adc                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
05adc                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
05adc                 | '' todo: set horizontal scroll (if needed)
05adc                 | 
05adc     02 FA 66 F0 |                 shl framebuf2,#2
05ae0     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
05ae4     04 22 0F F2 |                 cmp dlc,#%100 wz
05ae8                 |   
05ae8                 |                 
05ae8     04 F4 06 F1 |                 add dlptr2,#4
05aec     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
05af0     7A 21 03 FB |                  rdlong rdl,dlptr2
05af4     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
05af8     04 18 47 F0 |                  shr rcnt,#4
05afc                 |              
05afc     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
05b00     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
05b04                 |                 
05b04     04 1E 47 F0 |                  shr roffset,#4
05b08     0C 1E 67 F0 |                  shl roffset,#12
05b0c                 |   
05b0c     9C FF 9F FD |                  jmp #p301
05b10                 |                  
05b10                 |                  
05b10                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
05b10     0C FA 46 F0 |                 shr     framebuf2,#12
05b14     02 FA 66 F0 |                 shl     framebuf2,#2
05b18                 | 
05b18     7B 03 E3 F8 |                 getbyte t1,dl,#0
05b1c     00 02 0F F2 |                 cmp     t1,#0 wz
05b20     34 00 90 AD |     if_z        jmp     #borderline
05b24                 | 
05b24     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
05b28     50 00 90 CD |           if_c   jmp     #textline
05b2c     50 02 90 3D |           if_nc  jmp     #graphline
05b30                 | '
05b30     01 BE 06 F1 | p302            add     linenum,#1
05b34     04 F4 06 F1 |                 add     dlptr2,#4
05b38     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
05b3c     6C FF 9F 5D |          if_nz  jmp     #p301
05b40                 | 
05b40     72 03 68 FC | p112            wrlong  #1,vblankptr
05b44     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
05b48                 | 
05b48     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
05b4c     4B FF 02 F6 |                 mov     hsync1,sync_223
05b50     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
05b54     F8 FE 9F FD |                 jmp     #p101
05b58                 | 
05b58                 | '' ---------------  END of frame rendering loop -------------------------------------------
05b58                 | 
05b58                 | 
05b58     14 00 B0 FD | borderline      call    #hsync                      ' make a border
05b5c     4C A1 C2 FC |                 xcont   m_vi,border
05b60     CC FF 9F FD |                 jmp     #p302
05b64                 | 
05b64                 | 
05b64     08 00 B0 FD | blank           call    #hsync                          'blank lines
05b68     7E A1 C2 FC |                 xcont   m_vi,hsync0
05b6c     FD ED 6F 0B |         _ret_   djnz    pa,#blank
05b70                 | 
05b70     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
05b74     7F 9D B2 FC |                 xzero   m_sn,hsync1
05b78     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
05b7c                 | 
05b7c                 | 
05b7c                 | 
05b7c                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
05b7c                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
05b7c                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
05b7c                 | 
05b7c                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
05b7c                 | 
05b7c     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
05b80                 | 
05b80     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
05b84     7B 17 5B F8 |                 getnib  zoom, dl,#3
05b88     03 16 07 F5 |                 and             zoom, #3
05b8c                 | 
05b8c                 | 
05b8c                 | 
05b8c     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
05b90     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
05b94     3F BC 06 F5 |                 and     linestart,#63
05b98     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
05b9c     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
05ba0                 | 
05ba0     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
05ba4                 | 
05ba4                 |                        ' if fontline =0, get a border color
05ba4                 | 
05ba4     51 03 33 F9 | p102            getword t1,m_border,#0
05ba8     00 02 0F F2 |                 cmp     t1, #0 wz
05bac     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
05bb0                 | 
05bb0     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
05bb4     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
05bb8     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
05bbc     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
05bc0     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
05bc4     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
05bc8     52 BB 02 F6 |                 mov m_lut2, m_lut1
05bcc     6A BB 02 F1 |                 add m_lut2, lutt1
05bd0     58 0F 03 F6 |                 mov cpl2,i_cpl
05bd4                 | 
05bd4     02 16 0F F2 |                cmp zoom,#2 wz
05bd8     E4 00 90 AD |           if_z jmp #p420
05bdc     01 16 0F F2 |                cmp zoom,#1 wz
05be0     64 00 90 AD |           if_z jmp #p410
05be4     00 16 0F F2 |                 cmp zoom,#0 wz
05be8     04 00 90 AD |           if_z jmp #p400
05bec     50 01 90 FD |                jmp #p430
05bf0                 | 
05bf0                 |                    '
05bf0                 |  ''---------------------------------------------------------------------------------------------------------
05bf0     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
05bf4     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05bf8     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05bfc     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05c00     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05c04     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05c08     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05c0c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05c10     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05c14     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05c18                 | 
05c18     81 BB C2 FC |                         xcont m_lut2,t1
05c1c                 | 
05c1c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05c20     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05c24     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05c28     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05c2c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05c30     01 C0 86 F1 |                         sub     lutaddr,#1
05c34                 | 
05c34     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05c38     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05c3c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05c40                 | 
05c40     EB 0F 6F FB |                         djnz   cpl2,#p400
05c44     28 01 90 FD |  p401                   jmp    #p103
05c48                 | 
05c48                 | ''------------------------------------------------------------------------------------------------------------
05c48                 | 
05c48     01 0E 47 F0 |  p410                   shr cpl2,#1
05c4c                 | 
05c4c                 | ''---------------------------------------------------------------------------------------------------------
05c4c     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
05c50     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05c54     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05c58     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05c5c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05c60     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05c64     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05c68     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05c6c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05c70     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05c74                 | 
05c74                 | 
05c74     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
05c78     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
05c7c     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
05c80     03 02 07 FA |                         mul t1,#3
05c84     81 BB C2 FC |                         xcont m_lut2,t1
05c88     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05c8c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05c90     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05c94     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05c98     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05c9c     01 C0 86 F1 |                         sub     lutaddr,#1
05ca0     63 06 63 FD |                         mergew t3
05ca4     03 06 07 FA |                         mul t3,#3
05ca8     83 BB C2 FC |                         xcont m_lut2,t3
05cac                 | 
05cac     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05cb0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05cb4                 | 
05cb4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05cb8                 | 
05cb8     E4 0F 6F FB |                         djnz   cpl2,#p412
05cbc     B0 00 90 FD |  p411                   jmp    #p103
05cc0                 | 
05cc0                 | ''------------------------------------------------------------------------------------------------------------
05cc0                 | 
05cc0     02 0E 47 F0 |  p420                   shr cpl2,#2
05cc4                 | 
05cc4                 | ''---------------------------------------------------------------------------------------
05cc4     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
05cc8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05ccc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05cd0     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05cd4     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05cd8     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05cdc     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05ce0     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05ce4     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05ce8     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05cec                 | 
05cec     61 02 63 FD |                         mergeb t1
05cf0     81 07 3B F9 |                         getword t3,t1,#1
05cf4     0F 02 07 FA |                         mul t1,#15
05cf8     81 BB C2 FC |                         xcont m_lut2,t1
05cfc                 | 
05cfc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05d00     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05d04     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05d08     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05d0c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05d10     01 C0 86 F1 |                         sub     lutaddr,#1
05d14                 | 
05d14     81 09 EB F8 |                         getbyte t4,t1,#1        '
05d18     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
05d1c                 | 
05d1c     0F 06 07 FA |                         mul t3,#15
05d20     83 BB C2 FC |                         xcont m_lut2,t3
05d24                 | 
05d24     83 0B EB F8 |                         getbyte t5,t3,#1
05d28     85 BB C2 FC |                         xcont m_lut2, t5
05d2c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05d30     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05d34                 | 
05d34     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05d38                 | 
05d38     E2 0F 6F FB |                         djnz   cpl2,#p422
05d3c     30 00 90 FD |  p421                   jmp    #p103
05d40                 | 
05d40                 | '--------------------------------------------------------------------------------------------------------------
05d40                 | 
05d40     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
05d44     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05d48     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05d4c                 | 
05d4c     00 BA C6 FC |                         xcont m_lut2,#0
05d50                 | 
05d50     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05d54     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05d58     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05d5c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05d60     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05d64     01 C0 86 F1 |                         sub     lutaddr,#1
05d68                 | 
05d68     F5 0F 6F FB |                         djnz   cpl2,#p430
05d6c     00 00 90 FD |  p431                   jmp    #p103
05d70                 | 
05d70                 | ''------------------------------------------------------------------------------------------------------------
05d70                 | 
05d70                 | 
05d70                 | 
05d70     51 25 33 F9 | p103            getword  mb2,m_border,#0
05d74     00 24 0F F2 |                 cmp      mb2, #0 wz
05d78     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
05d7c                 | 
05d7c     B0 FD 9F FD |                 jmp #p302
05d80                 | 
05d80                 | '' -------------------------------------- END of text line ---------------------------------
05d80                 | 
05d80                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
05d80                 | 
05d80     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
05d84                 | 
05d84                 | 
05d84     51 25 33 F9 | p202            getword mb2,m_border,#0
05d88     00 24 0F F2 |                 cmp     mb2, #0 wz
05d8c     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
05d90                 | 
05d90                 | '----------------------------------------- display pixels
05d90                 | 
05d90     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
05d94     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
05d98                 | 
05d98     7B 17 5B F8 |                 getnib  zoom, dl,#3
05d9c     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
05da0                 | 
05da0     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
05da4     0C BC 06 F5 |                 and     colordepth,#12
05da8                 | 
05da8     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
05dac     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
05db0     64 00 90 AD |           if_z  jmp     #p240
05db4                 | 
05db4     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
05db8     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
05dbc     98 00 90 AD |           if_z  jmp     #p250
05dc0                 | 
05dc0     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
05dc4     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
05dc8     FC 00 90 AD |           if_z  jmp     #p260
05dcc                 | 
05dcc     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
05dd0                 | 
05dd0                 | '' --- 8 bit color modes
05dd0                 | 
05dd0     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
05dd4     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
05dd8                 | 
05dd8     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
05ddc     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
05de0                 |        
05de0                 |  '  
05de0     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
05de4     25 0C 07 A6 |                 if_z mov skippattern,#%100101
05de8                 |     
05de8                 |  
05de8     05 0C 07 56 |                 if_nz mov skippattern,#%000101
05dec     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
05df0                 |         
05df0                 | 
05df0                 |         
05df0     7D 11 03 FB | p235               rdlong  char,framebuf2
05df4     32 0C 63 FD |                    skipf skippattern
05df8     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
05dfc     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
05e00     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
05e04     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
05e08     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
05e0c     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
05e10     F7 0F 6F FB |                    djnz    cpl2,#p235
05e14                 | 
05e14     20 01 90 FD |                jmp    #p203
05e18                 |                   
05e18                 | 
05e18                 | 
05e18                 | '' --- 1 bit color modes
05e18                 | 
05e18     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
05e1c     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
05e20                 | 
05e20     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
05e24     13 0C 07 A6 |        if_z   mov skippattern,#%10011
05e28     08 0C 07 56 |        if_nz  mov skippattern,#%01000
05e2c                 | 
05e2c                 | 
05e2c     7D 11 E3 FA | p241               rdword  char,framebuf2
05e30     44 10 FF F9 |                    movbyts char,#%01000100
05e34     63 10 63 FD |                    mergew  char
05e38     32 0C 63 FD |                    skipf skippattern
05e3c     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
05e40     63 10 63 FD |                    mergew  char                    ' 1 0
05e44     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
05e48     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
05e4c     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
05e50     F6 0F 6F FB |                    djnz   cpl2,#p241
05e54                 | 
05e54                 | 
05e54     E0 00 90 FD |                jmp    #p203
05e58                 | 
05e58                 | '' --- 2 bit color modes
05e58                 | 
05e58     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
05e5c     C8 00 90 AD |        if_z   jmp #p251
05e60                 | 
05e60     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
05e64     30 00 90 AD |        if_z   jmp #p252
05e68                 | 
05e68                 | 
05e68     7D 11 C3 FA | p254               rdbyte char,framebuf2
05e6c     04 0A 07 F6 |                    mov  t5,#4
05e70     02 10 67 F0 | p255               shl  char,#2
05e74     88 03 53 F8 |                    getnib  t1,char,#2
05e78     03 02 07 F5 |                    and     t1,#3
05e7c     55 02 07 FA |                    mul     t1,#$55
05e80     81 05 03 F9 |                    rolbyte  t2,t1,#0
05e84     FA 0B 6F FB |                    djnz    t5,#p255
05e88     82 BB C2 FC |                    xcont   m_lut2,t2
05e8c     01 FA 06 F1 |                    add     framebuf2,#1
05e90     F5 0F 6F FB |                    djnz    cpl2,#p254
05e94     A0 00 90 FD |                    jmp     #p203
05e98                 | 
05e98     7D 11 E3 FA | p252               rdword char,framebuf2
05e9c     08 0A 07 F6 |                    mov  t5,#8
05ea0     02 10 67 F0 | p253               shl  char,#2
05ea4     88 03 63 F8 |                    getnib  t1,char,#4
05ea8     03 02 07 F5 |                    and     t1,#3
05eac     05 02 07 FA |                    mul     t1,#5
05eb0     81 05 83 F8 |                    rolnib  t2,t1,#0
05eb4     FA 0B 6F FB |                    djnz    t5,#p253
05eb8     82 BB C2 FC |                    xcont   m_lut2,t2
05ebc     02 FA 06 F1 |                    add     framebuf2,#2
05ec0     F5 0F 6F FB |                    djnz    cpl2,#p252
05ec4     70 00 90 FD |                    jmp     #p203
05ec8                 | 
05ec8                 | '' ------ 4 bit color modes
05ec8                 | 
05ec8     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
05ecc     58 00 90 AD |        if_z   jmp #p251
05ed0                 | 
05ed0     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
05ed4     2C 00 90 AD |        if_z   jmp #p262
05ed8                 | 
05ed8                 | 
05ed8     7D 11 C3 FA | p263               rdbyte char,framebuf2
05edc     02 0A DC FC |                            rep #5,#2
05ee0     88 05 8B F8 |                              rolnib t2,char,#1
05ee4     88 05 8B F8 |                                  rolnib t2,char,#1
05ee8     88 05 8B F8 |                              rolnib t2,char,#1
05eec     88 05 8B F8 |                                  rolnib t2,char,#1
05ef0     04 10 67 F0 |                              shl char,#4
05ef4     82 BB C2 FC |                    xcont   m_lut2,t2
05ef8     01 FA 06 F1 |                    add     framebuf2,#1
05efc     F6 0F 6F FB |                    djnz    cpl2,#p263
05f00     34 00 90 FD |                    jmp     #p203
05f04                 | 
05f04     7D 11 E3 FA | p262               rdword  char,framebuf2
05f08     04 06 DC FC |                            rep #3,#4
05f0c     88 05 9B F8 |                              rolnib t2,char,#3
05f10     88 05 9B F8 |                                  rolnib t2,char,#3
05f14     04 10 67 F0 |                              shl char,#4
05f18     82 BB C2 FC |                    xcont   m_lut2,t2
05f1c     02 FA 06 F1 |                    add     framebuf2,#2
05f20     F8 0F 6F FB |                    djnz    cpl2,#p262
05f24     10 00 90 FD |                    jmp     #p203
05f28                 | 
05f28                 | ''---------- all color modes without zoom
05f28                 | 
05f28     87 07 D8 FC | p251               rep  #3,cpl2
05f2c     7D 11 03 FB |                    rdlong  char,framebuf2
05f30     04 FA 06 F1 |                    add     framebuf2,#4
05f34     88 BB C2 FC |                    xcont   m_lut2,char
05f38                 |           
05f38                 |  ''-----------------------------------------------------------------------------------------
05f38                 | p203           ' getword  mb2,m_border,#0
05f38     00 24 0F F2 |                 cmp      mb2, #0 wz
05f3c     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
05f40                 | 
05f40     EC FB 9F FD |                 jmp #p302
05f44                 | 
05f44                 | '' -------------------------------------- END of graph  line ---------------------------------
05f44                 | 
05f44                 | '' consts and vars
05f44                 | 
05f44     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
05f48     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
05f4c     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
05f50     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
05f54                 | 
05f54     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
05f58                 | 
05f58                 | '------ these longs will be set by setmode function
05f58                 | 
05f58     00 00 00 00 | m_bs            long    0        'blanks before sync
05f5c     00 00 00 00 | m_sn            long    0        'sync
05f60     00 00 00 00 | m_bv            long    0        'blanks before visible
05f64     00 00 00 00 | m_vi            long    0        'visible pixels #
05f68     00 00 00 00 | m_border        long    0        'left/right borders
05f6c     00 00 00 00 | m_lut1          long    0        'characters
05f70     00 00 00 00 | i_vborder       long    0        'up/down borders
05f74     00 00 00 00 | i_upporch       long    0        'up porch lines
05f78     00 00 00 00 | i_vsync         long    0        'vsync lines
05f7c     00 00 00 00 | i_downporch     long    0        'down porch lines
05f80     00 00 00 00 | i_modenum       long    0        'mode #
05f84     00 00 00 00 | i_cpl           long    0        'chars/longs per line
05f88     00 00 00 00 | i_lines         long    0        'scanlines #
05f8c     00 00 00 00 | i_clock         long    0
05f90     00 00 00 00 | i_hubset        long    0
05f94     00 00 00 00 | i_totalvis      long    0
05f98                 | 
05f98                 | '-------------------------------------
05f98                 | 
05f98     00 00 00 00 | m_lut2          long    0
05f9c                 | 
05f9c                 | colordepth
05f9c     00 00 00 00 | linestart       long    0
05fa0     00 00 00 00 | linenum         long    0
05fa4     00 01 00 00 | lutaddr         long    256
05fa8                 | 
05fa8     0E 00 00 00 | cursorsh        long    14
05fac     00 00 00 00 | frames          long    0
05fb0     00 00 00 00 | cursorx         long    0
05fb4     00 00 00 00 | cursory         long    0
05fb8     00 00 00 00 | cursorpos       long    0
05fbc     00 00 00 00 | cursorpos2      long    0
05fc0     00 00 00 00 | fontstart       long    0
05fc4     00 00 00 00 | border2         long 0
05fc8     00 00 81 70 | lutiv           long $70810000
05fcc     00 00 88 00 | lutt1           long $00880000
05fd0     00 00 80 00 | lutg1           long $00800000
05fd4     00 00 80 10 | lutg2           long $10800000
05fd8     00 00 80 20 | lutg4           long $20800000
05fdc     00 00 80 30 | lutg8           long $30800000
05fe0     00 00 00 00 | framebuf        long 0
05fe4     00 00 00 00 | fontbuf         long 0
05fe8     00 00 00 00 | borderptr       long 0
05fec     00 00 00 00 | vblankptr       long 0
05ff0     00 00 00 00 | cursorptr       long 0
05ff4     00 00 00 00 | modeptr         long 0
05ff8     00 00 00 00 | paletteptr      long 0
05ffc     00 00 00 00 | dlptr           long 0
06000                 | fontnumptr      res     1
06000                 | fontnumptr      res     1
06000                 | hbase           res     1
06000                 | hbase           res     1
06000                 | borderptr2      res     1
06000                 | borderptr2      res     1
06000                 | dlptr2 res 1
06000                 | dlptr2 res 1
06000                 | dl              res 1
06000                 | dl              res 1
06000                 | ii              res     1
06000                 | ii              res     1
06000                 | framebuf2       res     1
06000                 | framebuf2       res     1
06000                 | hsync0          res     1
06000                 | hsync0          res     1
06000                 | hsync1          res     1
06000                 | hsync1          res     1
06000                 | fontline        res     1
06000                 | fontline        res     1
06000                 | t1              res     1
06000                 | t1              res     1
06000                 | t2              res     1
06000                 | t2              res     1
06000                 | t3 res 1
06000                 | t3 res 1
06000                 | t4 res 1
06000                 | t4 res 1
06000                 | t5 res 1
06000                 | t5 res 1
06000                 | skippattern res 1
06000                 | skippattern res 1
06000                 | cpl2 res 1
06000                 | cpl2 res 1
06000                 | char            res     1
06000                 | char            res     1
06000                 | backcolor       res     1
06000                 | backcolor       res     1
06000                 | charcolor       res     1
06000                 | charcolor       res     1
06000                 | zoom res 1
06000                 | zoom res 1
06000     00 00 00 00 | rcnt long 0 'dl repeat count
06004     00 00 00 00 | rcnt2 long 0
06008     00 00 00 00 | rcnt2a long 0
0600c     00 00 00 00 | roffset long 0
06010     00 00 00 00 | rdl long 0  'dl repeat line
06014     00 00 00 00 | dlc long 0 'dl command
06018     00 00 00 00 | mb2 long 0
0601c     00 00 00 00 | aend             long 0
06020                 |                 fit     496                     '
06020                 | __system__dat_
06020     00 00 00 00 
06024     00 00 00 00 | 	byte	$00[8]
06028     03 00 00 00 
0602c     00 00 00 00 
06030     00 00 00 00 
06034     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06038     00 00 00 00 
0603c     00 00 00 00 
06040     00 00 00 00 | 	byte	$00[12]
06044     05 00 00 00 
06048     00 00 00 00 
0604c     00 00 00 00 
06050     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06054     1C 62 00 00 | 	long	@@@__system__dat_ + 508
06058     24 62 00 00 | 	long	@@@__system__dat_ + 516
0605c     00 00 00 00 | 	byte	$00, $00, $00, $00
06060     2C 62 00 00 | 	long	@@@__system__dat_ + 524
06064     34 62 00 00 | 	long	@@@__system__dat_ + 532
06068     00 00 00 00 
0606c     00 00 00 00 | 	byte	$00[8]
06070     01 00 00 00 
06074     06 00 00 00 
06078     00 00 00 00 
0607c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06080     00 00 00 00 | 	byte	$00, $00, $00, $00
06084     3C 62 00 00 | 	long	@@@__system__dat_ + 540
06088     44 62 00 00 | 	long	@@@__system__dat_ + 548
0608c     00 00 00 00 | 	byte	$00, $00, $00, $00
06090     4C 62 00 00 | 	long	@@@__system__dat_ + 556
06094     54 62 00 00 | 	long	@@@__system__dat_ + 564
06098     00 00 00 00 
0609c     00 00 00 00 | 	byte	$00[8]
060a0     01 00 00 00 
060a4     06 00 00 00 
060a8     00 00 00 00 
060ac     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
060b0     00 00 00 00 | 	byte	$00, $00, $00, $00
060b4     5C 62 00 00 | 	long	@@@__system__dat_ + 572
060b8     64 62 00 00 | 	long	@@@__system__dat_ + 580
060bc     00 00 00 00 | 	byte	$00, $00, $00, $00
060c0     6C 62 00 00 | 	long	@@@__system__dat_ + 588
060c4     74 62 00 00 | 	long	@@@__system__dat_ + 596
060c8     00 00 00 00 
      ...             
06218     00 00 00 00 
0621c     00 00 00 00 | 	byte	$00[344]
06220     DC 20 00 00 | 	long	@@@__system___tx
06224     00 00 00 00 | 	byte	$00, $00, $00, $00
06228     24 21 00 00 | 	long	@@@__system___rx
0622c     00 00 00 00 | 	byte	$00, $00, $00, $00
06230     08 35 00 00 | 	long	@@@__system___rxtxioctl_0130
06234     00 00 00 00 | 	byte	$00, $00, $00, $00
06238     80 35 00 00 | 	long	@@@__system____dummy_flush_0131
0623c     00 00 00 00 | 	byte	$00, $00, $00, $00
06240     DC 20 00 00 | 	long	@@@__system___tx
06244     00 00 00 00 | 	byte	$00, $00, $00, $00
06248     24 21 00 00 | 	long	@@@__system___rx
0624c     00 00 00 00 | 	byte	$00, $00, $00, $00
06250     08 35 00 00 | 	long	@@@__system___rxtxioctl_0130
06254     00 00 00 00 | 	byte	$00, $00, $00, $00
06258     80 35 00 00 | 	long	@@@__system____dummy_flush_0131
0625c     00 00 00 00 | 	byte	$00, $00, $00, $00
06260     DC 20 00 00 | 	long	@@@__system___tx
06264     00 00 00 00 | 	byte	$00, $00, $00, $00
06268     24 21 00 00 | 	long	@@@__system___rx
0626c     00 00 00 00 | 	byte	$00, $00, $00, $00
06270     08 35 00 00 | 	long	@@@__system___rxtxioctl_0130
06274     00 00 00 00 | 	byte	$00, $00, $00, $00
06278     80 35 00 00 | 	long	@@@__system____dummy_flush_0131
0627c     00 00 00 00 | 	byte	$00, $00, $00, $00
06280                 | __heap_base
06280     00 00 00 00 
      ...             
07280     00 00 00 00 
07284     00 00 00 00 | 	long	0[1026]
07288                 | objmem
07288     00 00 00 00 | 	long	0[1]
0728c 113             | 	org	COG_BSS_START
0728c 113             | _var01
0728c 113             | 	res	1
0728c 114             | _var02
0728c 114             | 	res	1
0728c 115             | _var03
0728c 115             | 	res	1
0728c 116             | _var04
0728c 116             | 	res	1
0728c 117             | _var05
0728c 117             | 	res	1
0728c 118             | _var06
0728c 118             | 	res	1
0728c 119             | _var07
0728c 119             | 	res	1
0728c 11a             | _var08
0728c 11a             | 	res	1
0728c 11b             | _var09
0728c 11b             | 	res	1
0728c 11c             | _var10
0728c 11c             | 	res	1
0728c 11d             | _var11
0728c 11d             | 	res	1
0728c 11e             | _var12
0728c 11e             | 	res	1
0728c 11f             | _var13
0728c 11f             | 	res	1
0728c 120             | _var14
0728c 120             | 	res	1
0728c 121             | _var15
0728c 121             | 	res	1
0728c 122             | _var16
0728c 122             | 	res	1
0728c 123             | arg01
0728c 123             | 	res	1
0728c 124             | arg02
0728c 124             | 	res	1
0728c 125             | arg03
0728c 125             | 	res	1
0728c 126             | arg04
0728c 126             | 	res	1
0728c 127             | local01
0728c 127             | 	res	1
0728c 128             | local02
0728c 128             | 	res	1
0728c 129             | local03
0728c 129             | 	res	1
0728c 12a             | local04
0728c 12a             | 	res	1
0728c 12b             | local05
0728c 12b             | 	res	1
0728c 12c             | local06
0728c 12c             | 	res	1
0728c 12d             | local07
0728c 12d             | 	res	1
0728c 12e             | local08
0728c 12e             | 	res	1
0728c 12f             | local09
0728c 12f             | 	res	1
0728c 130             | local10
0728c 130             | 	res	1
0728c 131             | local11
0728c 131             | 	res	1
0728c 132             | local12
0728c 132             | 	res	1
0728c 133             | local13
0728c 133             | 	res	1
0728c 134             | local14
0728c 134             | 	res	1
0728c 135             | local15
0728c 135             | 	res	1
0728c 136             | local16
0728c 136             | 	res	1
0728c 137             | local17
0728c 137             | 	res	1
0728c 138             | local18
0728c 138             | 	res	1
0728c 139             | local19
0728c 139             | 	res	1
0728c 13a             | local20
0728c 13a             | 	res	1
0728c 13b             | local21
0728c 13b             | 	res	1
0728c 13c             | local22
0728c 13c             | 	res	1
0728c 13d             | local23
0728c 13d             | 	res	1
0728c 13e             | local24
0728c 13e             | 	res	1
0728c 13f             | local25
0728c 13f             | 	res	1
0728c 140             | local26
0728c 140             | 	res	1
0728c 141             | local27
0728c 141             | 	res	1
0728c 142             | local28
0728c 142             | 	res	1
0728c 143             | local29
0728c 143             | 	res	1
0728c 144             | local30
0728c 144             | 	res	1
0728c 145             | local31
0728c 145             | 	res	1
0728c 146             | local32
0728c 146             | 	res	1
0728c 147             | local33
0728c 147             | 	res	1
0728c 148             | local34
0728c 148             | 	res	1
0728c 149             | local35
0728c 149             | 	res	1
0728c 14a             | local36
0728c 14a             | 	res	1
0728c 14b             | local37
0728c 14b             | 	res	1
0728c 14c             | local38
0728c 14c             | 	res	1
0728c 14d             | local39
0728c 14d             | 	res	1
0728c 14e             | local40
0728c 14e             | 	res	1
0728c 14f             | local41
0728c 14f             | 	res	1
0728c 150             | local42
0728c 150             | 	res	1
0728c 151             | local43
0728c 151             | 	res	1
0728c 152             | local44
0728c 152             | 	res	1
0728c 153             | local45
0728c 153             | 	res	1
0728c 154             | local46
0728c 154             | 	res	1
0728c 155             | local47
0728c 155             | 	res	1
0728c 156             | local48
0728c 156             | 	res	1
0728c 157             | local49
0728c 157             | 	res	1
0728c 158             | local50
0728c 158             | 	res	1
0728c 159             | local51
0728c 159             | 	res	1
0728c 15a             | local52
0728c 15a             | 	res	1
0728c 15b             | local53
0728c 15b             | 	res	1
0728c 15c             | local54
0728c 15c             | 	res	1
0728c 15d             | local55
0728c 15d             | 	res	1
0728c 15e             | local56
0728c 15e             | 	res	1
0728c 15f             | local57
0728c 15f             | 	res	1
0728c 160             | local58
0728c 160             | 	res	1
0728c 161             | local59
0728c 161             | 	res	1
0728c 162             | local60
0728c 162             | 	res	1
0728c 163             | local61
0728c 163             | 	res	1
0728c 164             | local62
0728c 164             | 	res	1
0728c 165             | local63
0728c 165             | 	res	1
0728c 166             | local64
0728c 166             | 	res	1
0728c 167             | local65
0728c 167             | 	res	1
0728c 168             | local66
0728c 168             | 	res	1
0728c 169             | local67
0728c 169             | 	res	1
0728c 16a             | local68
0728c 16a             | 	res	1
0728c 16b             | local69
0728c 16b             | 	res	1
0728c 16c             | local70
0728c 16c             | 	res	1
0728c 16d             | local71
0728c 16d             | 	res	1
0728c 16e             | local72
0728c 16e             | 	res	1
0728c 16f             | local73
0728c 16f             | 	res	1
0728c 170             | local74
0728c 170             | 	res	1
0728c 171             | local75
0728c 171             | 	res	1
0728c 172             | local76
0728c 172             | 	res	1
0728c 173             | local77
0728c 173             | 	res	1
0728c 174             | local78
0728c 174             | 	res	1
0728c 175             | local79
0728c 175             | 	res	1
0728c 176             | local80
0728c 176             | 	res	1
0728c 177             | muldiva_
0728c 177             | 	res	1
0728c 178             | muldivb_
0728c 178             | 	res	1
0728c 179             | 	fit	480
0728c 179             | 
