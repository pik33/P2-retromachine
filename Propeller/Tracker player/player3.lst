00000                 | 
00000                 | #line 1 "/home/pik33/Dokumenty/GitHub/P2-retromachine/Propeller/Tracker player/player3.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 18 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 0B F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 B0 14 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5E 62 FD | 	cogid	arg01
00614 084 03 5E 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 FB 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 19 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5F 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 61 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 63 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 65 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 18 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 62 56 F0 |         shr	arg03, #1 wc
00688 0a1 2F 61 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5E 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 60 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 62 56 F0 |         shr	arg03, #1 wc
00698 0a5 2F 61 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5E 06 C1 |  if_c   add	arg01, #2
006a0 0a7 30 61 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2F 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 62 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 31 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 60 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 03 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 FF 5B 8D F9 |     altd  COUNT_, #511
006d4 0b4 28 00 64 FD |     setq #0-0
006d8 0b5 61 6D 66 FC |     wrlong local01, ptra++
006dc 0b6             | pushregs_done_
006dc 0b6 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006e0 0b7 61 5B 65 FC |     wrlong COUNT_, ptra++
006e4 0b8 F8 5F 01 F6 |     mov    fp, ptra
006e8 0b9 2C EC 63 FD |     jmp  pa
006ec 0ba             |  popregs_
006ec 0ba 2B EC 63 FD |     pop    pa
006f0 0bb 28 04 64 FD |     setq   #2
006f4 0bc 5F 5B 05 FB |     rdlong COUNT_, --ptra
006f8 0bd 02 5A 75 FB |     djf    COUNT_, #popregs__ret
006fc 0be 28 5A 61 FD |     setq   COUNT_
00700 0bf 5F 6D 06 FB |     rdlong local01, --ptra
00704 0c0             | popregs__ret
00704 0c0 2A 5C 61 FD |     push   RETADDR_
00708 0c1 2C EC 63 FD |     jmp    pa
0070c 0c2             | 
0070c 0c2             | unsdivide_
0070c 0c2 28 00 64 FD |        setq    #0
00710 0c3 4D 99 12 FD |        qdiv    muldiva_, muldivb_
00714 0c4 18 9A 62 FD |        getqx   muldivb_
00718 0c5 19 98 62 0D |  _ret_ getqy   muldiva_
0071c 0c6             | 
0071c 0c6             | divide_
0071c 0c6 4C 99 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00720 0c7 03 F8 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
00724 0c8 4D 9B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00728 0c9 02 F8 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
0072c 0ca 2D 00 64 AD |  if_z  ret
00730 0cb D8 FF BF FD |        call    #unsdivide_
00734 0cc 01 F8 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00738 0cd 4C 99 82 F6 |        negc    muldiva_,muldiva_ 
0073c 0ce 02 F8 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00740 0cf 4D 9B 82 06 |  _ret_ negc    muldivb_,muldivb_
00744 0d0             | __pc long 0
00744 0d0 00 00 00 00 
00748 0d1             | __setjmp
00748 0d1 2B A0 61 FD |     pop __pc
0074c 0d2 00 18 06 F6 |     mov result1, #0
00750 0d3 00 1A 06 F6 |     mov result2, #0
00754 0d4 2F F3 01 F6 |     mov abortchain, arg01
00758 0d5 2F 5F 61 FC |     wrlong fp, arg01
0075c 0d6 04 5E 06 F1 |     add arg01, #4
00760 0d7 2F F1 63 FC |     wrlong ptra, arg01
00764 0d8 04 5E 06 F1 |     add arg01, #4
00768 0d9 2F FB 61 FC |     wrlong objptr, arg01
0076c 0da 04 5E 06 F1 |     add arg01, #4
00770 0db 2F A1 61 FC |     wrlong __pc, arg01
00774 0dc 2C A0 61 FD |     jmp __pc
00778 0dd             | __unwind_pc long 0
00778 0dd 00 00 00 00 
0077c 0de             | __unwind_stack
0077c 0de 2B BA 61 FD |    pop  __unwind_pc
00780 0df             | __unwind_loop
00780 0df 30 5F 0A F2 |    cmp  arg01, arg02 wz
00784 0e0 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00788 0e1 2F F1 03 F6 |    mov   ptra, arg01
0078c 0e2 5C FF BF FD |    call  #popregs_
00790 0e3 AF 5E 02 F6 |    mov   arg01, fp
00794 0e4 E8 FF 9F FD |    jmp   #__unwind_loop
00798 0e5             | __unwind_stack_ret
00798 0e5 2C BA 61 FD |    jmp  __unwind_pc
0079c 0e6             | __longjmp
0079c 0e6 2B A0 61 FD |     pop __pc
007a0 0e7 00 5E 0E F2 |     cmp    arg01, #0 wz
007a4 0e8 30 00 90 AD |  if_z jmp #nocatch
007a8 0e9 30 19 02 F6 |     mov result1, arg02
007ac 0ea 01 1A 06 F6 |     mov result2, #1
007b0 0eb 2F 61 02 FB |     rdlong arg02, arg01
007b4 0ec 04 5E 06 F1 |     add arg01, #4
007b8 0ed 2F F1 03 FB |     rdlong ptra, arg01
007bc 0ee 04 5E 06 F1 |     add arg01, #4
007c0 0ef 2F FB 01 FB |     rdlong objptr, arg01
007c4 0f0 04 5E 06 F1 |     add arg01, #4
007c8 0f1 2F A1 01 FB |     rdlong __pc, arg01
007cc 0f2 AF 5E 02 F6 |     mov arg01, fp
007d0 0f3 A8 FF BF FD |     call #__unwind_stack
007d4 0f4             | __longjmp_ret
007d4 0f4 2C A0 61 FD |     jmp  __pc
007d8 0f5             | nocatch
007d8 0f5 00 62 0E F2 |     cmp arg03, #0 wz
007dc 0f6 28 FE 9F AD |  if_z jmp #cogexit
007e0 0f7 F0 FF 9F FD |     jmp #__longjmp_ret
007e4 0f8             | 
007e4 0f8             | __heap_ptr
007e4 0f8 20 CC 01 00 | 	long	@__heap_base
007e8 0f9             | abortchain
007e8 0f9 00 00 00 00 | 	long	0
007ec 0fa             | entryptr__
007ec 0fa 04 04 00 00 | 	long	@entry
007f0 0fb             | itmp1_
007f0 0fb 00 00 00 00 | 	long	0
007f4 0fc             | itmp2_
007f4 0fc 00 00 00 00 | 	long	0
007f8 0fd             | objptr
007f8 0fd 28 DC 01 00 | 	long	@objmem
007fc 0fe             | ptr___struct___bas_wrap_sender_tx_
007fc 0fe BC 8F 00 00 | 	long	@__struct___bas_wrap_sender_tx
00800 0ff             | ptr___struct__s_vfs_file_t_putchar_
00800 0ff 04 8F 00 00 | 	long	@__struct__s_vfs_file_t_putchar
00804 100             | ptr___system__dat__
00804 100 BC C9 01 00 | 	long	@__system__dat_
00808 101             | ptr__audio019_spin2_dat__
00808 101 AC BE 01 00 | 	long	@_audio019_spin2_dat_
0080c 102             | ptr__dat__
0080c 102 E8 90 00 00 | 	long	@_dat_
00810 103             | ptr__hng030rm_spin2_dat__
00810 103 24 89 01 00 | 	long	@_hng030rm_spin2_dat_
00814 104             | ptr__hng030rm_spin2_putchar_
00814 104 E4 2E 00 00 | 	long	@_hng030rm_spin2_putchar
00818 105             | ptr__hng030rm_spin2_putpixel1_
00818 105 CC 28 00 00 | 	long	@_hng030rm_spin2_putpixel1
0081c 106             | ptr__hng030rm_spin2_putpixel2_
0081c 106 B8 29 00 00 | 	long	@_hng030rm_spin2_putpixel2
00820 107             | ptr__hng030rm_spin2_putpixel4_
00820 107 98 2A 00 00 | 	long	@_hng030rm_spin2_putpixel4
00824 108             | ptr__hng030rm_spin2_putpixel8_
00824 108 84 2B 00 00 | 	long	@_hng030rm_spin2_putpixel8
00828 109             | ptr__retrocog_spin2_serialcog_
00828 109 60 40 00 00 | 	long	@_retrocog_spin2_serialcog
0082c 10a             | ptr__trackerplayer_spin2_dat__
0082c 10a 88 AD 01 00 | 	long	@_trackerplayer_spin2_dat_
00830 10b             | ptr_stackspace_
00830 10b 50 EE 01 00 | 	long	@stackspace
00834 10c             | result1
00834 10c 00 00 00 00 | 	long	0
00838 10d             | result2
00838 10d 00 00 00 00 | 	long	0
0083c 10e             | result3
0083c 10e 00 00 00 00 | 	long	0
00840 10f             | COG_BSS_START
00840 10f             | 	fit	480
00840                 | 	orgh
00840                 | hubentry
00840                 | 
00840                 | ' 
00840                 | ' function startvideo(mode=64, pin=0) 'todo return a cog#
00840                 | _startvideo
00840     24 36 B0 FD | 	call	#_hng030rm_spin2_start
00844     00 5E 06 F6 | 	mov	arg01, #0
00848     00 60 06 F6 | 	mov	arg02, #0
0084c     00 62 06 F6 | 	mov	arg03, #0
00850     28 24 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00854                 | ' v030.start(mode,pin)
00854                 | ' v030.setbordercolor(0,0,0)
00854                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00854     FD 5E 02 F6 | 	mov	arg01, objptr
00858     04 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
0085c     D0 64 B0 FD | 	call	#__system___make_methodptr
00860     00 1C 06 F6 | 	mov	result3, #0
00864     00 1A 06 F6 | 	mov	result2, #0
00868     0C 61 02 F6 | 	mov	arg02, result1
0086c     00 62 06 F6 | 	mov	arg03, #0
00870     00 64 06 F6 | 	mov	arg04, #0
00874     00 5E 06 F6 | 	mov	arg01, #0
00878     90 67 B0 FD | 	call	#__system___basic_open
0087c     00 18 06 F6 | 	mov	result1, #0
00880                 | _startvideo_ret
00880     2D 00 64 FD | 	ret
00884                 | 
00884                 | ' 
00884                 | ' function addr(byref v as any)
00884                 | _addr
00884     00 5A 05 F6 | 	mov	COUNT_, #0
00888     B0 00 A0 FD | 	call	#pushregs_
0088c     08 F0 07 F1 | 	add	ptra, #8
00890     04 5E 05 F1 | 	add	fp, #4
00894     AF 5E 62 FC | 	wrlong	arg01, fp
00898                 | ' 
00898                 | ' return(cast(ulong,@v))
00898     2F 19 02 F6 | 	mov	result1, arg01
0089c     04 5E 85 F1 | 	sub	fp, #4
008a0     AF F0 03 F6 | 	mov	ptra, fp
008a4     BA 00 A0 FD | 	call	#popregs_
008a8                 | _addr_ret
008a8     2D 00 64 FD | 	ret
008ac                 | 
008ac                 | ' 
008ac                 | ' '0 - samplestart   - a pointer to the sample start
008ac                 | ' '1 - sampletype    - 0: 16 bit, 1 8 bit, both signed
008ac                 | ' '2 - loopstart     - loop start
008ac                 | ' '3 - loopend       - loop end, has to be >=loopstart+2
008ac                 | ' '4 - volume        - sample volume, 16384=1
008ac                 | ' '5 - pan           - 0..16384
008ac                 | ' '6 - synthfreq     - the frequency divider for the channel. The channel sample rate will be 3546895 or 3579545 Hz divided by this
008ac                 | ' '7 - skip          - value to add to the phase accumulator for the next sample, 1 for 8 bit, 2 for 16 bit, more for special purposes
008ac                 | ' '8 - cmd 
008ac                 | ' 
008ac                 | ' 
008ac                 | ' sub test 
008ac                 | _test
008ac     01 5A 05 F6 | 	mov	COUNT_, #1
008b0     B0 00 A0 FD | 	call	#pushregs_
008b4     16 60 06 F6 | 	mov	arg02, #22
008b8                 | ' 
008b8                 | ' ''---------- Set the (x,y) position of cursor
008b8                 | ' 
008b8                 | ' cursor_x:=x
008b8     34 FA 05 F1 | 	add	objptr, #52
008bc     FD 0A 48 FC | 	wrbyte	#5, objptr
008c0                 | ' cursor_y:=y
008c0     01 FA 05 F1 | 	add	objptr, #1
008c4     FD 2C 48 FC | 	wrbyte	#22, objptr
008c8     07 00 00 FF 
008cc     C2 FA 05 F1 | 	add	objptr, ##3778
008d0     FD 6C C2 FA | 	rdbyte	local01, objptr
008d4     02 6C 66 F0 | 	shl	local01, #2
008d8     01 00 00 FF 
008dc     65 FA 05 F1 | 	add	objptr, ##613
008e0     FD 6C 02 F1 | 	add	local01, objptr
008e4     36 5F 02 FB | 	rdlong	arg01, local01
008e8     08 00 00 FF 
008ec     5C FB 85 F1 | 	sub	objptr, ##4444
008f0     7C 27 B0 FD | 	call	#_hng030rm_spin2_write
008f4     08 00 00 FF 
008f8     E8 FB 05 F1 | 	add	objptr, ##4584
008fc     FD 5E 02 FB | 	rdlong	arg01, objptr
00900     08 00 00 FF 
00904     E8 FB 85 F1 | 	sub	objptr, ##4584
00908     64 27 B0 FD | 	call	#_hng030rm_spin2_write
0090c                 | ' 
0090c                 | ' ''---------- Set the (x,y) position of cursor
0090c                 | ' 
0090c                 | ' cursor_x:=x
0090c     34 FA 05 F1 | 	add	objptr, #52
00910     FD 02 48 FC | 	wrbyte	#1, objptr
00914                 | ' cursor_y:=y
00914     01 FA 05 F1 | 	add	objptr, #1
00918     FD 2C 48 FC | 	wrbyte	#22, objptr
0091c     07 00 00 FF 
00920     EA FA 05 F1 | 	add	objptr, ##3818
00924     FD 5E 02 FB | 	rdlong	arg01, objptr
00928     10 FA 05 F1 | 	add	objptr, #16
0092c     FD 6C 02 FB | 	rdlong	local01, objptr
00930     07 00 00 FF 
00934     2F FB 85 F1 | 	sub	objptr, ##3887
00938     36 5F 02 F1 | 	add	arg01, local01
0093c     03 60 06 F6 | 	mov	arg02, #3
00940     54 2A B0 FD | 	call	#_hng030rm_spin2_inttostr2
00944     0C 5F 02 F6 | 	mov	arg01, result1
00948     24 27 B0 FD | 	call	#_hng030rm_spin2_write
0094c     16 60 06 F6 | 	mov	arg02, #22
00950                 | ' 
00950                 | ' ''---------- Set the (x,y) position of cursor
00950                 | ' 
00950                 | ' cursor_x:=x
00950     34 FA 05 F1 | 	add	objptr, #52
00954     FD 40 48 FC | 	wrbyte	#32, objptr
00958                 | ' cursor_y:=y
00958     01 FA 05 F1 | 	add	objptr, #1
0095c     FD 2C 48 FC | 	wrbyte	#22, objptr
00960     07 00 00 FF 
00964     C3 FA 05 F1 | 	add	objptr, ##3779
00968     FD 6C C2 FA | 	rdbyte	local01, objptr
0096c     02 6C 66 F0 | 	shl	local01, #2
00970     01 00 00 FF 
00974     64 FA 05 F1 | 	add	objptr, ##612
00978     FD 6C 02 F1 | 	add	local01, objptr
0097c     36 5F 02 FB | 	rdlong	arg01, local01
00980     08 00 00 FF 
00984     5C FB 85 F1 | 	sub	objptr, ##4444
00988     E4 26 B0 FD | 	call	#_hng030rm_spin2_write
0098c     08 00 00 FF 
00990     E8 FB 05 F1 | 	add	objptr, ##4584
00994     FD 5E 02 FB | 	rdlong	arg01, objptr
00998     08 00 00 FF 
0099c     E8 FB 85 F1 | 	sub	objptr, ##4584
009a0     CC 26 B0 FD | 	call	#_hng030rm_spin2_write
009a4                 | ' 
009a4                 | ' ''---------- Set the (x,y) position of cursor
009a4                 | ' 
009a4                 | ' cursor_x:=x
009a4     34 FA 05 F1 | 	add	objptr, #52
009a8     FD 38 48 FC | 	wrbyte	#28, objptr
009ac                 | ' cursor_y:=y
009ac     01 FA 05 F1 | 	add	objptr, #1
009b0     FD 2C 48 FC | 	wrbyte	#22, objptr
009b4     07 00 00 FF 
009b8     EE FA 05 F1 | 	add	objptr, ##3822
009bc     FD 5E 02 FB | 	rdlong	arg01, objptr
009c0     10 FA 05 F1 | 	add	objptr, #16
009c4     FD 6C 02 FB | 	rdlong	local01, objptr
009c8     07 00 00 FF 
009cc     33 FB 85 F1 | 	sub	objptr, ##3891
009d0     36 5F 02 F1 | 	add	arg01, local01
009d4     03 60 06 F6 | 	mov	arg02, #3
009d8     BC 29 B0 FD | 	call	#_hng030rm_spin2_inttostr2
009dc     0C 5F 02 F6 | 	mov	arg01, result1
009e0     8C 26 B0 FD | 	call	#_hng030rm_spin2_write
009e4     16 60 06 F6 | 	mov	arg02, #22
009e8                 | ' 
009e8                 | ' ''---------- Set the (x,y) position of cursor
009e8                 | ' 
009e8                 | ' cursor_x:=x
009e8     34 FA 05 F1 | 	add	objptr, #52
009ec     FD 78 48 FC | 	wrbyte	#60, objptr
009f0                 | ' cursor_y:=y
009f0     01 FA 05 F1 | 	add	objptr, #1
009f4     FD 2C 48 FC | 	wrbyte	#22, objptr
009f8     07 00 00 FF 
009fc     C4 FA 05 F1 | 	add	objptr, ##3780
00a00     FD 6C C2 FA | 	rdbyte	local01, objptr
00a04     02 6C 66 F0 | 	shl	local01, #2
00a08     01 00 00 FF 
00a0c     63 FA 05 F1 | 	add	objptr, ##611
00a10     FD 6C 02 F1 | 	add	local01, objptr
00a14     36 5F 02 FB | 	rdlong	arg01, local01
00a18     08 00 00 FF 
00a1c     5C FB 85 F1 | 	sub	objptr, ##4444
00a20     4C 26 B0 FD | 	call	#_hng030rm_spin2_write
00a24     08 00 00 FF 
00a28     E8 FB 05 F1 | 	add	objptr, ##4584
00a2c     FD 5E 02 FB | 	rdlong	arg01, objptr
00a30     08 00 00 FF 
00a34     E8 FB 85 F1 | 	sub	objptr, ##4584
00a38     34 26 B0 FD | 	call	#_hng030rm_spin2_write
00a3c                 | ' 
00a3c                 | ' ''---------- Set the (x,y) position of cursor
00a3c                 | ' 
00a3c                 | ' cursor_x:=x
00a3c     34 FA 05 F1 | 	add	objptr, #52
00a40     FD 70 48 FC | 	wrbyte	#56, objptr
00a44                 | ' cursor_y:=y
00a44     01 FA 05 F1 | 	add	objptr, #1
00a48     FD 2C 48 FC | 	wrbyte	#22, objptr
00a4c     07 00 00 FF 
00a50     F2 FA 05 F1 | 	add	objptr, ##3826
00a54     FD 5E 02 FB | 	rdlong	arg01, objptr
00a58     10 FA 05 F1 | 	add	objptr, #16
00a5c     FD 6C 02 FB | 	rdlong	local01, objptr
00a60     07 00 00 FF 
00a64     37 FB 85 F1 | 	sub	objptr, ##3895
00a68     36 5F 02 F1 | 	add	arg01, local01
00a6c     03 60 06 F6 | 	mov	arg02, #3
00a70     24 29 B0 FD | 	call	#_hng030rm_spin2_inttostr2
00a74     0C 5F 02 F6 | 	mov	arg01, result1
00a78     F4 25 B0 FD | 	call	#_hng030rm_spin2_write
00a7c                 | ' 
00a7c                 | ' ''---------- Set the (x,y) position of cursor
00a7c                 | ' 
00a7c                 | ' cursor_x:=x
00a7c     34 FA 05 F1 | 	add	objptr, #52
00a80     FD A8 48 FC | 	wrbyte	#84, objptr
00a84                 | ' cursor_y:=y
00a84     01 FA 05 F1 | 	add	objptr, #1
00a88     FD 2C 48 FC | 	wrbyte	#22, objptr
00a8c     07 00 00 FF 
00a90     F6 FA 05 F1 | 	add	objptr, ##3830
00a94     FD 5E 02 FB | 	rdlong	arg01, objptr
00a98     10 FA 05 F1 | 	add	objptr, #16
00a9c     FD 6C 02 FB | 	rdlong	local01, objptr
00aa0     07 00 00 FF 
00aa4     3B FB 85 F1 | 	sub	objptr, ##3899
00aa8     36 5F 02 F1 | 	add	arg01, local01
00aac     03 60 06 F6 | 	mov	arg02, #3
00ab0     E4 28 B0 FD | 	call	#_hng030rm_spin2_inttostr2
00ab4     0C 5F 02 F6 | 	mov	arg01, result1
00ab8     B4 25 B0 FD | 	call	#_hng030rm_spin2_write
00abc     16 60 06 F6 | 	mov	arg02, #22
00ac0                 | ' 
00ac0                 | ' ''---------- Set the (x,y) position of cursor
00ac0                 | ' 
00ac0                 | ' cursor_x:=x
00ac0     34 FA 05 F1 | 	add	objptr, #52
00ac4     FD B0 48 FC | 	wrbyte	#88, objptr
00ac8                 | ' cursor_y:=y
00ac8     01 FA 05 F1 | 	add	objptr, #1
00acc     FD 2C 48 FC | 	wrbyte	#22, objptr
00ad0     07 00 00 FF 
00ad4     C5 FA 05 F1 | 	add	objptr, ##3781
00ad8     FD 6C C2 FA | 	rdbyte	local01, objptr
00adc     02 6C 66 F0 | 	shl	local01, #2
00ae0     01 00 00 FF 
00ae4     62 FA 05 F1 | 	add	objptr, ##610
00ae8     FD 6C 02 F1 | 	add	local01, objptr
00aec     36 5F 02 FB | 	rdlong	arg01, local01
00af0     08 00 00 FF 
00af4     5C FB 85 F1 | 	sub	objptr, ##4444
00af8     74 25 B0 FD | 	call	#_hng030rm_spin2_write
00afc     08 00 00 FF 
00b00     E8 FB 05 F1 | 	add	objptr, ##4584
00b04     FD 5E 02 FB | 	rdlong	arg01, objptr
00b08     08 00 00 FF 
00b0c     E8 FB 85 F1 | 	sub	objptr, ##4584
00b10     5C 25 B0 FD | 	call	#_hng030rm_spin2_write
00b14     AF F0 03 F6 | 	mov	ptra, fp
00b18     BA 00 A0 FD | 	call	#popregs_
00b1c                 | _test_ret
00b1c     2D 00 64 FD | 	ret
00b20                 | 
00b20                 | ' 
00b20                 | ' 
00b20                 | ' sub getinfo(ma,num)
00b20                 | _getinfo
00b20     0B 5A 05 F6 | 	mov	COUNT_, #11
00b24     B0 00 A0 FD | 	call	#pushregs_
00b28     2F 6D 02 F6 | 	mov	local01, arg01
00b2c     30 6F 02 F6 | 	mov	local02, arg02
00b30     04 60 06 F6 | 	mov	arg02, #4
00b34                 | ' 
00b34                 | ' ''---------- Set the (x,y) position of cursor
00b34                 | ' 
00b34                 | ' cursor_x:=x
00b34     34 FA 05 F1 | 	add	objptr, #52
00b38     FD 02 48 FC | 	wrbyte	#1, objptr
00b3c                 | ' cursor_y:=y
00b3c     01 FA 05 F1 | 	add	objptr, #1
00b40     FD 08 48 FC | 	wrbyte	#4, objptr
00b44     35 FA 85 F1 | 	sub	objptr, #53
00b48                 | ' 'v030. setwritecolors(170,147):
00b48                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00b48     00 5E 06 F6 | 	mov	arg01, #0
00b4c     80 79 B0 FD | 	call	#__system___getiolock_0150
00b50     0C 5F 02 F6 | 	mov	arg01, result1
00b54     18 62 B0 FD | 	call	#__system___lockmem
00b58     00 18 06 F6 | 	mov	result1, #0
00b5c     48 00 00 FF 
00b60     4A 60 06 F6 | 	mov	arg02, ##@LR__0504
00b64     00 5E 06 F6 | 	mov	arg01, #0
00b68     00 62 06 F6 | 	mov	arg03, #0
00b6c     BC 65 B0 FD | 	call	#__system___basic_print_string
00b70     00 5E 06 F6 | 	mov	arg01, #0
00b74     0A 60 06 F6 | 	mov	arg02, #10
00b78     00 62 06 F6 | 	mov	arg03, #0
00b7c     60 65 B0 FD | 	call	#__system___basic_print_char
00b80     01 18 06 F6 | 	mov	result1, #1
00b84     00 5E 06 F6 | 	mov	arg01, #0
00b88     44 79 B0 FD | 	call	#__system___getiolock_0150
00b8c     0C 01 68 FC | 	wrlong	#0, result1
00b90     00 18 06 F6 | 	mov	result1, #0
00b94                 | ' ': v030. setwritecolors(154,147)
00b94                 | ' for i=0 to 31: sn$(i)="S"+decuns$(i,2)+space$(19) :next i
00b94     00 70 06 F6 | 	mov	local03, #0
00b98                 | LR__0001
00b98     38 73 02 F6 | 	mov	local04, local03
00b9c     02 72 66 F0 | 	shl	local04, #2
00ba0     08 00 00 FF 
00ba4     5C FB 05 F1 | 	add	objptr, ##4444
00ba8     FD 72 02 F1 | 	add	local04, objptr
00bac     48 00 00 FF 
00bb0     B3 74 06 F6 | 	mov	local05, ##@LR__0505
00bb4     38 5F 02 F6 | 	mov	arg01, local03
00bb8     02 60 06 F6 | 	mov	arg02, #2
00bbc     08 00 00 FF 
00bc0     5C FB 85 F1 | 	sub	objptr, ##4444
00bc4     0A 62 06 F6 | 	mov	arg03, #10
00bc8     AC 6A B0 FD | 	call	#__system__Number_S
00bcc     0C 61 02 F6 | 	mov	arg02, result1
00bd0     3A 5F 02 F6 | 	mov	arg01, local05
00bd4     D4 61 B0 FD | 	call	#__system___string_concat
00bd8     0C 75 02 F6 | 	mov	local05, result1
00bdc     13 5E 06 F6 | 	mov	arg01, #19
00be0     47 00 00 FF 
00be4     F4 61 06 F6 | 	mov	arg02, ##@LR__0498
00be8     58 6B B0 FD | 	call	#__system__String_S
00bec     0C 61 02 F6 | 	mov	arg02, result1
00bf0     3A 5F 02 F6 | 	mov	arg01, local05
00bf4     B4 61 B0 FD | 	call	#__system___string_concat
00bf8     39 19 62 FC | 	wrlong	result1, local04
00bfc     01 70 06 F1 | 	add	local03, #1
00c00     20 70 5E F2 | 	cmps	local03, #32 wcz
00c04     90 FF 9F CD |  if_b	jmp	#LR__0001
00c08                 | ' for i=1 to num
00c08     01 70 06 F6 | 	mov	local03, #1
00c0c     01 6E 06 F1 | 	add	local02, #1
00c10                 | LR__0002
00c10     37 71 5A F2 | 	cmps	local03, local02 wcz
00c14     54 08 90 3D |  if_ae	jmp	#LR__0007
00c18                 | '   for j=0 to 21
00c18     00 76 06 F6 | 	mov	local06, #0
00c1c                 | LR__0003
00c1c     38 5F 02 F6 | 	mov	arg01, local03
00c20     02 5E 66 F0 | 	shl	arg01, #2
00c24     08 00 00 FF 
00c28     5C FB 05 F1 | 	add	objptr, ##4444
00c2c     FD 5E 02 F1 | 	add	arg01, objptr
00c30     08 00 00 FF 
00c34     5C FB 85 F1 | 	sub	objptr, ##4444
00c38     48 FC BF FD | 	call	#_addr
00c3c                 | ' asm
00c3c     0C 79 02 FB | 	rdlong	local07, result1
00c40                 | ' return r
00c40     09 00 00 FF 
00c44     0C FA 05 F1 | 	add	objptr, ##4620
00c48     FD 78 62 FC | 	wrlong	local07, objptr
00c4c     36 5F 02 F6 | 	mov	arg01, local01
00c50     14 5E 06 F1 | 	add	arg01, #20
00c54     38 75 02 F6 | 	mov	local05, local03
00c58     01 74 86 F1 | 	sub	local05, #1
00c5c     3A 7B 02 F6 | 	mov	local08, local05
00c60     04 7A 66 F0 | 	shl	local08, #4
00c64     3A 7B 82 F1 | 	sub	local08, local05
00c68     01 7A 66 F0 | 	shl	local08, #1
00c6c     3D 5F 02 F1 | 	add	arg01, local08
00c70     3B 5F 02 F1 | 	add	arg01, local06
00c74                 | ' asm
00c74     2F 19 C2 FA | 	rdbyte	result1, arg01
00c78                 | ' return r
00c78     0C 79 02 F6 | 	mov	local07, result1
00c7c     07 78 46 F7 | 	zerox	local07, #7
00c80     04 FA 05 F1 | 	add	objptr, #4
00c84     FD 78 62 FC | 	wrlong	local07, objptr
00c88                 | '     a=lpeek(addr(sn$(i)))
00c88                 | '     b=(peek(ma+20+30*(i-1)+j))
00c88                 | '     if b>=32 then poke a+j,b
00c88     09 00 00 FF 
00c8c     10 FA 85 F1 | 	sub	objptr, ##4624
00c90     20 78 5E F2 | 	cmps	local07, #32 wcz
00c94     24 00 90 CD |  if_b	jmp	#LR__0004
00c98     09 00 00 FF 
00c9c     0C FA 05 F1 | 	add	objptr, ##4620
00ca0     FD 5E 02 FB | 	rdlong	arg01, objptr
00ca4     3B 5F 02 F1 | 	add	arg01, local06
00ca8     04 FA 05 F1 | 	add	objptr, #4
00cac     FD 60 02 FB | 	rdlong	arg02, objptr
00cb0     09 00 00 FF 
00cb4     10 FA 85 F1 | 	sub	objptr, ##4624
00cb8                 | ' asm
00cb8     2F 61 42 FC | 	wrbyte	arg02, arg01
00cbc                 | LR__0004
00cbc     01 76 06 F1 | 	add	local06, #1
00cc0     16 76 5E F2 | 	cmps	local06, #22 wcz
00cc4     54 FF 9F CD |  if_b	jmp	#LR__0003
00cc8     36 5F 02 F6 | 	mov	arg01, local01
00ccc     14 5E 06 F1 | 	add	arg01, #20
00cd0     38 7B 02 F6 | 	mov	local08, local03
00cd4     01 7A 86 F1 | 	sub	local08, #1
00cd8     3D 7D 02 F6 | 	mov	local09, local08
00cdc     04 7C 66 F0 | 	shl	local09, #4
00ce0     3D 7D 82 F1 | 	sub	local09, local08
00ce4     01 7C 66 F0 | 	shl	local09, #1
00ce8     3E 5F 02 F1 | 	add	arg01, local09
00cec     16 5E 06 F1 | 	add	arg01, #22
00cf0                 | ' asm
00cf0     2F 75 C2 FA | 	rdbyte	local05, arg01
00cf4                 | ' return r
00cf4     07 74 46 F7 | 	zerox	local05, #7
00cf8     08 74 66 F0 | 	shl	local05, #8
00cfc     36 5F 02 F6 | 	mov	arg01, local01
00d00     14 5E 06 F1 | 	add	arg01, #20
00d04     38 7F 02 F6 | 	mov	local10, local03
00d08     01 7E 86 F1 | 	sub	local10, #1
00d0c     3F 81 02 F6 | 	mov	local11, local10
00d10     04 80 66 F0 | 	shl	local11, #4
00d14     3F 81 82 F1 | 	sub	local11, local10
00d18     01 80 66 F0 | 	shl	local11, #1
00d1c     40 5F 02 F1 | 	add	arg01, local11
00d20     17 5E 06 F1 | 	add	arg01, #23
00d24                 | ' asm
00d24     2F 7B C2 FA | 	rdbyte	local08, arg01
00d28                 | ' return r
00d28     07 7A 46 F7 | 	zerox	local08, #7
00d2c     3D 75 02 F1 | 	add	local05, local08
00d30     01 74 66 F0 | 	shl	local05, #1
00d34     09 00 00 FF 
00d38     14 FA 05 F1 | 	add	objptr, ##4628
00d3c     FD 74 62 FC | 	wrlong	local05, objptr
00d40     36 5F 02 F6 | 	mov	arg01, local01
00d44     14 5E 06 F1 | 	add	arg01, #20
00d48     38 7B 02 F6 | 	mov	local08, local03
00d4c     01 7A 86 F1 | 	sub	local08, #1
00d50     3D 7D 02 F6 | 	mov	local09, local08
00d54     04 7C 66 F0 | 	shl	local09, #4
00d58     3D 7D 82 F1 | 	sub	local09, local08
00d5c     01 7C 66 F0 | 	shl	local09, #1
00d60     3E 5F 02 F1 | 	add	arg01, local09
00d64     1A 5E 06 F1 | 	add	arg01, #26
00d68                 | ' asm
00d68     2F 75 C2 FA | 	rdbyte	local05, arg01
00d6c                 | ' return r
00d6c     07 74 46 F7 | 	zerox	local05, #7
00d70     08 74 66 F0 | 	shl	local05, #8
00d74     36 5F 02 F6 | 	mov	arg01, local01
00d78     14 5E 06 F1 | 	add	arg01, #20
00d7c     38 7F 02 F6 | 	mov	local10, local03
00d80     01 7E 86 F1 | 	sub	local10, #1
00d84     3F 81 02 F6 | 	mov	local11, local10
00d88     04 80 66 F0 | 	shl	local11, #4
00d8c     3F 81 82 F1 | 	sub	local11, local10
00d90     01 80 66 F0 | 	shl	local11, #1
00d94     40 5F 02 F1 | 	add	arg01, local11
00d98     1B 5E 06 F1 | 	add	arg01, #27
00d9c                 | ' asm
00d9c     2F 7B C2 FA | 	rdbyte	local08, arg01
00da0                 | ' return r
00da0     07 7A 46 F7 | 	zerox	local08, #7
00da4     3D 75 02 F1 | 	add	local05, local08
00da8     01 74 66 F0 | 	shl	local05, #1
00dac     04 FA 05 F1 | 	add	objptr, #4
00db0     FD 74 62 FC | 	wrlong	local05, objptr
00db4     36 5F 02 F6 | 	mov	arg01, local01
00db8     14 5E 06 F1 | 	add	arg01, #20
00dbc     38 7B 02 F6 | 	mov	local08, local03
00dc0     01 7A 86 F1 | 	sub	local08, #1
00dc4     3D 7D 02 F6 | 	mov	local09, local08
00dc8     04 7C 66 F0 | 	shl	local09, #4
00dcc     3D 7D 82 F1 | 	sub	local09, local08
00dd0     01 7C 66 F0 | 	shl	local09, #1
00dd4     3E 5F 02 F1 | 	add	arg01, local09
00dd8     1C 5E 06 F1 | 	add	arg01, #28
00ddc                 | ' asm
00ddc     2F 75 C2 FA | 	rdbyte	local05, arg01
00de0                 | ' return r
00de0     07 74 46 F7 | 	zerox	local05, #7
00de4     08 74 66 F0 | 	shl	local05, #8
00de8     36 5F 02 F6 | 	mov	arg01, local01
00dec     14 5E 06 F1 | 	add	arg01, #20
00df0     38 7F 02 F6 | 	mov	local10, local03
00df4     01 7E 86 F1 | 	sub	local10, #1
00df8     3F 81 02 F6 | 	mov	local11, local10
00dfc     04 80 66 F0 | 	shl	local11, #4
00e00     3F 81 82 F1 | 	sub	local11, local10
00e04     01 80 66 F0 | 	shl	local11, #1
00e08     40 5F 02 F1 | 	add	arg01, local11
00e0c     1D 5E 06 F1 | 	add	arg01, #29
00e10                 | ' asm
00e10     2F 7B C2 FA | 	rdbyte	local08, arg01
00e14                 | ' return r
00e14     07 7A 46 F7 | 	zerox	local08, #7
00e18     3D 75 02 F1 | 	add	local05, local08
00e1c     01 74 66 F0 | 	shl	local05, #1
00e20     04 FA 05 F1 | 	add	objptr, #4
00e24     FD 74 62 FC | 	wrlong	local05, objptr
00e28     36 5F 02 F6 | 	mov	arg01, local01
00e2c     14 5E 06 F1 | 	add	arg01, #20
00e30     38 75 02 F6 | 	mov	local05, local03
00e34     01 74 86 F1 | 	sub	local05, #1
00e38     3A 7B 02 F6 | 	mov	local08, local05
00e3c     04 7A 66 F0 | 	shl	local08, #4
00e40     3A 7B 82 F1 | 	sub	local08, local05
00e44     01 7A 66 F0 | 	shl	local08, #1
00e48     3D 5F 02 F1 | 	add	arg01, local08
00e4c     18 5E 06 F1 | 	add	arg01, #24
00e50                 | ' asm
00e50     2F 79 C2 FA | 	rdbyte	local07, arg01
00e54                 | ' return r
00e54     07 78 46 F7 | 	zerox	local07, #7
00e58     04 FA 05 F1 | 	add	objptr, #4
00e5c     FD 78 62 FC | 	wrlong	local07, objptr
00e60     36 5F 02 F6 | 	mov	arg01, local01
00e64     14 5E 06 F1 | 	add	arg01, #20
00e68     38 75 02 F6 | 	mov	local05, local03
00e6c     01 74 86 F1 | 	sub	local05, #1
00e70     3A 7B 02 F6 | 	mov	local08, local05
00e74     04 7A 66 F0 | 	shl	local08, #4
00e78     3A 7B 82 F1 | 	sub	local08, local05
00e7c     01 7A 66 F0 | 	shl	local08, #1
00e80     3D 5F 02 F1 | 	add	arg01, local08
00e84     19 5E 06 F1 | 	add	arg01, #25
00e88                 | ' asm
00e88     2F 19 C2 FA | 	rdbyte	result1, arg01
00e8c                 | ' return r
00e8c     0C 79 02 F6 | 	mov	local07, result1
00e90     07 78 46 F7 | 	zerox	local07, #7
00e94     04 FA 05 F1 | 	add	objptr, #4
00e98     FD 78 62 FC | 	wrlong	local07, objptr
00e9c     09 00 00 FF 
00ea0     24 FA 85 F1 | 	sub	objptr, ##4644
00ea4                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00ea4                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00ea4                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00ea4                 | ' ft=peek(ma+20+30*(i-1)+24)
00ea4                 | ' vl=peek(ma+20+30*(i-1)+25)
00ea4                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00ea4     10 70 5E F2 | 	cmps	local03, #16 wcz
00ea8     D8 02 90 3D |  if_ae	jmp	#LR__0005
00eac     05 60 06 F6 | 	mov	arg02, #5
00eb0     38 61 02 F1 | 	add	arg02, local03
00eb4                 | ' 
00eb4                 | ' ''---------- Set the (x,y) position of cursor
00eb4                 | ' 
00eb4                 | ' cursor_x:=x
00eb4     34 FA 05 F1 | 	add	objptr, #52
00eb8     FD 02 48 FC | 	wrbyte	#1, objptr
00ebc                 | ' cursor_y:=y
00ebc     01 FA 05 F1 | 	add	objptr, #1
00ec0     FD 60 42 FC | 	wrbyte	arg02, objptr
00ec4     35 FA 85 F1 | 	sub	objptr, #53
00ec8     00 5E 06 F6 | 	mov	arg01, #0
00ecc     00 76 B0 FD | 	call	#__system___getiolock_0150
00ed0     0C 5F 02 F6 | 	mov	arg01, result1
00ed4     98 5E B0 FD | 	call	#__system___lockmem
00ed8     00 18 06 F6 | 	mov	result1, #0
00edc     38 7D 02 F6 | 	mov	local09, local03
00ee0     02 7C 66 F0 | 	shl	local09, #2
00ee4     08 00 00 FF 
00ee8     5C FB 05 F1 | 	add	objptr, ##4444
00eec     FD 7C 02 F1 | 	add	local09, objptr
00ef0     3E 61 02 FB | 	rdlong	arg02, local09
00ef4     00 5E 06 F6 | 	mov	arg01, #0
00ef8     00 62 06 F6 | 	mov	arg03, #0
00efc     08 00 00 FF 
00f00     5C FB 85 F1 | 	sub	objptr, ##4444
00f04     24 62 B0 FD | 	call	#__system___basic_print_string
00f08     00 5E 06 F6 | 	mov	arg01, #0
00f0c     0A 60 06 F6 | 	mov	arg02, #10
00f10     00 62 06 F6 | 	mov	arg03, #0
00f14     C8 61 B0 FD | 	call	#__system___basic_print_char
00f18     01 18 06 F6 | 	mov	result1, #1
00f1c     00 5E 06 F6 | 	mov	arg01, #0
00f20     AC 75 B0 FD | 	call	#__system___getiolock_0150
00f24     0C 01 68 FC | 	wrlong	#0, result1
00f28     00 18 06 F6 | 	mov	result1, #0
00f2c     05 60 06 F6 | 	mov	arg02, #5
00f30     38 61 02 F1 | 	add	arg02, local03
00f34                 | ' 
00f34                 | ' ''---------- Set the (x,y) position of cursor
00f34                 | ' 
00f34                 | ' cursor_x:=x
00f34     34 FA 05 F1 | 	add	objptr, #52
00f38     FD 30 48 FC | 	wrbyte	#24, objptr
00f3c                 | ' cursor_y:=y
00f3c     01 FA 05 F1 | 	add	objptr, #1
00f40     FD 60 42 FC | 	wrbyte	arg02, objptr
00f44     35 FA 85 F1 | 	sub	objptr, #53
00f48     00 5E 06 F6 | 	mov	arg01, #0
00f4c     80 75 B0 FD | 	call	#__system___getiolock_0150
00f50     0C 5F 02 F6 | 	mov	arg01, result1
00f54     18 5E B0 FD | 	call	#__system___lockmem
00f58     00 18 06 F6 | 	mov	result1, #0
00f5c     09 00 00 FF 
00f60     14 FA 05 F1 | 	add	objptr, ##4628
00f64     FD 60 02 FB | 	rdlong	arg02, objptr
00f68     09 00 00 FF 
00f6c     14 FA 85 F1 | 	sub	objptr, ##4628
00f70     00 5E 06 F6 | 	mov	arg01, #0
00f74     00 62 06 F6 | 	mov	arg03, #0
00f78     0A 64 06 F6 | 	mov	arg04, #10
00f7c     F4 61 B0 FD | 	call	#__system___basic_print_integer
00f80     00 5E 06 F6 | 	mov	arg01, #0
00f84     0A 60 06 F6 | 	mov	arg02, #10
00f88     00 62 06 F6 | 	mov	arg03, #0
00f8c     50 61 B0 FD | 	call	#__system___basic_print_char
00f90     01 18 06 F6 | 	mov	result1, #1
00f94     00 5E 06 F6 | 	mov	arg01, #0
00f98     34 75 B0 FD | 	call	#__system___getiolock_0150
00f9c     0C 01 68 FC | 	wrlong	#0, result1
00fa0     00 18 06 F6 | 	mov	result1, #0
00fa4     05 60 06 F6 | 	mov	arg02, #5
00fa8     38 61 02 F1 | 	add	arg02, local03
00fac                 | ' 
00fac                 | ' ''---------- Set the (x,y) position of cursor
00fac                 | ' 
00fac                 | ' cursor_x:=x
00fac     34 FA 05 F1 | 	add	objptr, #52
00fb0     FD 3E 48 FC | 	wrbyte	#31, objptr
00fb4                 | ' cursor_y:=y
00fb4     01 FA 05 F1 | 	add	objptr, #1
00fb8     FD 60 42 FC | 	wrbyte	arg02, objptr
00fbc     35 FA 85 F1 | 	sub	objptr, #53
00fc0     00 5E 06 F6 | 	mov	arg01, #0
00fc4     08 75 B0 FD | 	call	#__system___getiolock_0150
00fc8     0C 5F 02 F6 | 	mov	arg01, result1
00fcc     A0 5D B0 FD | 	call	#__system___lockmem
00fd0     00 18 06 F6 | 	mov	result1, #0
00fd4     09 00 00 FF 
00fd8     20 FA 05 F1 | 	add	objptr, ##4640
00fdc     FD 60 02 FB | 	rdlong	arg02, objptr
00fe0     09 00 00 FF 
00fe4     20 FA 85 F1 | 	sub	objptr, ##4640
00fe8     00 5E 06 F6 | 	mov	arg01, #0
00fec     00 62 06 F6 | 	mov	arg03, #0
00ff0     0A 64 06 F6 | 	mov	arg04, #10
00ff4     7C 61 B0 FD | 	call	#__system___basic_print_integer
00ff8     00 5E 06 F6 | 	mov	arg01, #0
00ffc     0A 60 06 F6 | 	mov	arg02, #10
01000     00 62 06 F6 | 	mov	arg03, #0
01004     D8 60 B0 FD | 	call	#__system___basic_print_char
01008     01 18 06 F6 | 	mov	result1, #1
0100c     00 5E 06 F6 | 	mov	arg01, #0
01010     BC 74 B0 FD | 	call	#__system___getiolock_0150
01014     0C 01 68 FC | 	wrlong	#0, result1
01018     00 18 06 F6 | 	mov	result1, #0
0101c     05 60 06 F6 | 	mov	arg02, #5
01020     38 61 02 F1 | 	add	arg02, local03
01024                 | ' 
01024                 | ' ''---------- Set the (x,y) position of cursor
01024                 | ' 
01024                 | ' cursor_x:=x
01024     34 FA 05 F1 | 	add	objptr, #52
01028     FD 44 48 FC | 	wrbyte	#34, objptr
0102c                 | ' cursor_y:=y
0102c     01 FA 05 F1 | 	add	objptr, #1
01030     FD 60 42 FC | 	wrbyte	arg02, objptr
01034     35 FA 85 F1 | 	sub	objptr, #53
01038     00 5E 06 F6 | 	mov	arg01, #0
0103c     90 74 B0 FD | 	call	#__system___getiolock_0150
01040     0C 5F 02 F6 | 	mov	arg01, result1
01044     28 5D B0 FD | 	call	#__system___lockmem
01048     00 18 06 F6 | 	mov	result1, #0
0104c     09 00 00 FF 
01050     24 FA 05 F1 | 	add	objptr, ##4644
01054     FD 60 02 FB | 	rdlong	arg02, objptr
01058     09 00 00 FF 
0105c     24 FA 85 F1 | 	sub	objptr, ##4644
01060     00 5E 06 F6 | 	mov	arg01, #0
01064     00 62 06 F6 | 	mov	arg03, #0
01068     0A 64 06 F6 | 	mov	arg04, #10
0106c     04 61 B0 FD | 	call	#__system___basic_print_integer
01070     00 5E 06 F6 | 	mov	arg01, #0
01074     0A 60 06 F6 | 	mov	arg02, #10
01078     00 62 06 F6 | 	mov	arg03, #0
0107c     60 60 B0 FD | 	call	#__system___basic_print_char
01080     01 18 06 F6 | 	mov	result1, #1
01084     00 5E 06 F6 | 	mov	arg01, #0
01088     44 74 B0 FD | 	call	#__system___getiolock_0150
0108c     0C 01 68 FC | 	wrlong	#0, result1
01090     00 18 06 F6 | 	mov	result1, #0
01094     05 60 06 F6 | 	mov	arg02, #5
01098     38 61 02 F1 | 	add	arg02, local03
0109c                 | ' 
0109c                 | ' ''---------- Set the (x,y) position of cursor
0109c                 | ' 
0109c                 | ' cursor_x:=x
0109c     34 FA 05 F1 | 	add	objptr, #52
010a0     FD 4A 48 FC | 	wrbyte	#37, objptr
010a4                 | ' cursor_y:=y
010a4     01 FA 05 F1 | 	add	objptr, #1
010a8     FD 60 42 FC | 	wrbyte	arg02, objptr
010ac     35 FA 85 F1 | 	sub	objptr, #53
010b0     00 5E 06 F6 | 	mov	arg01, #0
010b4     18 74 B0 FD | 	call	#__system___getiolock_0150
010b8     0C 5F 02 F6 | 	mov	arg01, result1
010bc     B0 5C B0 FD | 	call	#__system___lockmem
010c0     00 18 06 F6 | 	mov	result1, #0
010c4     09 00 00 FF 
010c8     18 FA 05 F1 | 	add	objptr, ##4632
010cc     FD 60 02 FB | 	rdlong	arg02, objptr
010d0     09 00 00 FF 
010d4     18 FA 85 F1 | 	sub	objptr, ##4632
010d8     00 5E 06 F6 | 	mov	arg01, #0
010dc     00 62 06 F6 | 	mov	arg03, #0
010e0     0A 64 06 F6 | 	mov	arg04, #10
010e4     8C 60 B0 FD | 	call	#__system___basic_print_integer
010e8     00 5E 06 F6 | 	mov	arg01, #0
010ec     0A 60 06 F6 | 	mov	arg02, #10
010f0     00 62 06 F6 | 	mov	arg03, #0
010f4     E8 5F B0 FD | 	call	#__system___basic_print_char
010f8     01 18 06 F6 | 	mov	result1, #1
010fc     00 5E 06 F6 | 	mov	arg01, #0
01100     CC 73 B0 FD | 	call	#__system___getiolock_0150
01104     0C 01 68 FC | 	wrlong	#0, result1
01108     00 18 06 F6 | 	mov	result1, #0
0110c     05 60 06 F6 | 	mov	arg02, #5
01110     38 61 02 F1 | 	add	arg02, local03
01114                 | ' 
01114                 | ' ''---------- Set the (x,y) position of cursor
01114                 | ' 
01114                 | ' cursor_x:=x
01114     34 FA 05 F1 | 	add	objptr, #52
01118     FD 56 48 FC | 	wrbyte	#43, objptr
0111c                 | ' cursor_y:=y
0111c     01 FA 05 F1 | 	add	objptr, #1
01120     FD 60 42 FC | 	wrbyte	arg02, objptr
01124     35 FA 85 F1 | 	sub	objptr, #53
01128     00 5E 06 F6 | 	mov	arg01, #0
0112c     A0 73 B0 FD | 	call	#__system___getiolock_0150
01130     0C 5F 02 F6 | 	mov	arg01, result1
01134     38 5C B0 FD | 	call	#__system___lockmem
01138     00 18 06 F6 | 	mov	result1, #0
0113c     09 00 00 FF 
01140     1C FA 05 F1 | 	add	objptr, ##4636
01144     FD 60 02 FB | 	rdlong	arg02, objptr
01148     09 00 00 FF 
0114c     1C FA 85 F1 | 	sub	objptr, ##4636
01150     00 5E 06 F6 | 	mov	arg01, #0
01154     00 62 06 F6 | 	mov	arg03, #0
01158     0A 64 06 F6 | 	mov	arg04, #10
0115c     14 60 B0 FD | 	call	#__system___basic_print_integer
01160     00 5E 06 F6 | 	mov	arg01, #0
01164     0A 60 06 F6 | 	mov	arg02, #10
01168     00 62 06 F6 | 	mov	arg03, #0
0116c     70 5F B0 FD | 	call	#__system___basic_print_char
01170     01 18 06 F6 | 	mov	result1, #1
01174     00 5E 06 F6 | 	mov	arg01, #0
01178     54 73 B0 FD | 	call	#__system___getiolock_0150
0117c     0C 01 68 FC | 	wrlong	#0, result1
01180     00 18 06 F6 | 	mov	result1, #0
01184                 | LR__0005
01184                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
01184     10 70 5E F2 | 	cmps	local03, #16 wcz
01188     D8 02 90 CD |  if_b	jmp	#LR__0006
0118c     38 61 02 F6 | 	mov	arg02, local03
01190     0B 60 86 F1 | 	sub	arg02, #11
01194                 | ' 
01194                 | ' ''---------- Set the (x,y) position of cursor
01194                 | ' 
01194                 | ' cursor_x:=x
01194     34 FA 05 F1 | 	add	objptr, #52
01198     FD 72 48 FC | 	wrbyte	#57, objptr
0119c                 | ' cursor_y:=y
0119c     01 FA 05 F1 | 	add	objptr, #1
011a0     FD 60 42 FC | 	wrbyte	arg02, objptr
011a4     35 FA 85 F1 | 	sub	objptr, #53
011a8     00 5E 06 F6 | 	mov	arg01, #0
011ac     20 73 B0 FD | 	call	#__system___getiolock_0150
011b0     0C 5F 02 F6 | 	mov	arg01, result1
011b4     B8 5B B0 FD | 	call	#__system___lockmem
011b8     00 18 06 F6 | 	mov	result1, #0
011bc     38 7D 02 F6 | 	mov	local09, local03
011c0     02 7C 66 F0 | 	shl	local09, #2
011c4     08 00 00 FF 
011c8     5C FB 05 F1 | 	add	objptr, ##4444
011cc     FD 7C 02 F1 | 	add	local09, objptr
011d0     3E 61 02 FB | 	rdlong	arg02, local09
011d4     00 5E 06 F6 | 	mov	arg01, #0
011d8     00 62 06 F6 | 	mov	arg03, #0
011dc     08 00 00 FF 
011e0     5C FB 85 F1 | 	sub	objptr, ##4444
011e4     44 5F B0 FD | 	call	#__system___basic_print_string
011e8     00 5E 06 F6 | 	mov	arg01, #0
011ec     0A 60 06 F6 | 	mov	arg02, #10
011f0     00 62 06 F6 | 	mov	arg03, #0
011f4     E8 5E B0 FD | 	call	#__system___basic_print_char
011f8     01 18 06 F6 | 	mov	result1, #1
011fc     00 5E 06 F6 | 	mov	arg01, #0
01200     CC 72 B0 FD | 	call	#__system___getiolock_0150
01204     0C 01 68 FC | 	wrlong	#0, result1
01208     00 18 06 F6 | 	mov	result1, #0
0120c     38 61 02 F6 | 	mov	arg02, local03
01210     0B 60 86 F1 | 	sub	arg02, #11
01214                 | ' 
01214                 | ' ''---------- Set the (x,y) position of cursor
01214                 | ' 
01214                 | ' cursor_x:=x
01214     34 FA 05 F1 | 	add	objptr, #52
01218     FD A0 48 FC | 	wrbyte	#80, objptr
0121c                 | ' cursor_y:=y
0121c     01 FA 05 F1 | 	add	objptr, #1
01220     FD 60 42 FC | 	wrbyte	arg02, objptr
01224     35 FA 85 F1 | 	sub	objptr, #53
01228     00 5E 06 F6 | 	mov	arg01, #0
0122c     A0 72 B0 FD | 	call	#__system___getiolock_0150
01230     0C 5F 02 F6 | 	mov	arg01, result1
01234     38 5B B0 FD | 	call	#__system___lockmem
01238     00 18 06 F6 | 	mov	result1, #0
0123c     09 00 00 FF 
01240     14 FA 05 F1 | 	add	objptr, ##4628
01244     FD 60 02 FB | 	rdlong	arg02, objptr
01248     09 00 00 FF 
0124c     14 FA 85 F1 | 	sub	objptr, ##4628
01250     00 5E 06 F6 | 	mov	arg01, #0
01254     00 62 06 F6 | 	mov	arg03, #0
01258     0A 64 06 F6 | 	mov	arg04, #10
0125c     14 5F B0 FD | 	call	#__system___basic_print_integer
01260     00 5E 06 F6 | 	mov	arg01, #0
01264     0A 60 06 F6 | 	mov	arg02, #10
01268     00 62 06 F6 | 	mov	arg03, #0
0126c     70 5E B0 FD | 	call	#__system___basic_print_char
01270     01 18 06 F6 | 	mov	result1, #1
01274     00 5E 06 F6 | 	mov	arg01, #0
01278     54 72 B0 FD | 	call	#__system___getiolock_0150
0127c     0C 01 68 FC | 	wrlong	#0, result1
01280     00 18 06 F6 | 	mov	result1, #0
01284     38 61 02 F6 | 	mov	arg02, local03
01288     0B 60 86 F1 | 	sub	arg02, #11
0128c                 | ' 
0128c                 | ' ''---------- Set the (x,y) position of cursor
0128c                 | ' 
0128c                 | ' cursor_x:=x
0128c     34 FA 05 F1 | 	add	objptr, #52
01290     FD AE 48 FC | 	wrbyte	#87, objptr
01294                 | ' cursor_y:=y
01294     01 FA 05 F1 | 	add	objptr, #1
01298     FD 60 42 FC | 	wrbyte	arg02, objptr
0129c     35 FA 85 F1 | 	sub	objptr, #53
012a0     00 5E 06 F6 | 	mov	arg01, #0
012a4     28 72 B0 FD | 	call	#__system___getiolock_0150
012a8     0C 5F 02 F6 | 	mov	arg01, result1
012ac     C0 5A B0 FD | 	call	#__system___lockmem
012b0     00 18 06 F6 | 	mov	result1, #0
012b4     09 00 00 FF 
012b8     20 FA 05 F1 | 	add	objptr, ##4640
012bc     FD 60 02 FB | 	rdlong	arg02, objptr
012c0     09 00 00 FF 
012c4     20 FA 85 F1 | 	sub	objptr, ##4640
012c8     00 5E 06 F6 | 	mov	arg01, #0
012cc     00 62 06 F6 | 	mov	arg03, #0
012d0     0A 64 06 F6 | 	mov	arg04, #10
012d4     9C 5E B0 FD | 	call	#__system___basic_print_integer
012d8     00 5E 06 F6 | 	mov	arg01, #0
012dc     0A 60 06 F6 | 	mov	arg02, #10
012e0     00 62 06 F6 | 	mov	arg03, #0
012e4     F8 5D B0 FD | 	call	#__system___basic_print_char
012e8     01 18 06 F6 | 	mov	result1, #1
012ec     00 5E 06 F6 | 	mov	arg01, #0
012f0     DC 71 B0 FD | 	call	#__system___getiolock_0150
012f4     0C 01 68 FC | 	wrlong	#0, result1
012f8     00 18 06 F6 | 	mov	result1, #0
012fc     38 61 02 F6 | 	mov	arg02, local03
01300     0B 60 86 F1 | 	sub	arg02, #11
01304                 | ' 
01304                 | ' ''---------- Set the (x,y) position of cursor
01304                 | ' 
01304                 | ' cursor_x:=x
01304     34 FA 05 F1 | 	add	objptr, #52
01308     FD B4 48 FC | 	wrbyte	#90, objptr
0130c                 | ' cursor_y:=y
0130c     01 FA 05 F1 | 	add	objptr, #1
01310     FD 60 42 FC | 	wrbyte	arg02, objptr
01314     35 FA 85 F1 | 	sub	objptr, #53
01318     00 5E 06 F6 | 	mov	arg01, #0
0131c     B0 71 B0 FD | 	call	#__system___getiolock_0150
01320     0C 5F 02 F6 | 	mov	arg01, result1
01324     48 5A B0 FD | 	call	#__system___lockmem
01328     00 18 06 F6 | 	mov	result1, #0
0132c     09 00 00 FF 
01330     24 FA 05 F1 | 	add	objptr, ##4644
01334     FD 60 02 FB | 	rdlong	arg02, objptr
01338     09 00 00 FF 
0133c     24 FA 85 F1 | 	sub	objptr, ##4644
01340     00 5E 06 F6 | 	mov	arg01, #0
01344     00 62 06 F6 | 	mov	arg03, #0
01348     0A 64 06 F6 | 	mov	arg04, #10
0134c     24 5E B0 FD | 	call	#__system___basic_print_integer
01350     00 5E 06 F6 | 	mov	arg01, #0
01354     0A 60 06 F6 | 	mov	arg02, #10
01358     00 62 06 F6 | 	mov	arg03, #0
0135c     80 5D B0 FD | 	call	#__system___basic_print_char
01360     01 18 06 F6 | 	mov	result1, #1
01364     00 5E 06 F6 | 	mov	arg01, #0
01368     64 71 B0 FD | 	call	#__system___getiolock_0150
0136c     0C 01 68 FC | 	wrlong	#0, result1
01370     00 18 06 F6 | 	mov	result1, #0
01374     38 61 02 F6 | 	mov	arg02, local03
01378     0B 60 86 F1 | 	sub	arg02, #11
0137c                 | ' 
0137c                 | ' ''---------- Set the (x,y) position of cursor
0137c                 | ' 
0137c                 | ' cursor_x:=x
0137c     34 FA 05 F1 | 	add	objptr, #52
01380     FD BA 48 FC | 	wrbyte	#93, objptr
01384                 | ' cursor_y:=y
01384     01 FA 05 F1 | 	add	objptr, #1
01388     FD 60 42 FC | 	wrbyte	arg02, objptr
0138c     35 FA 85 F1 | 	sub	objptr, #53
01390     00 5E 06 F6 | 	mov	arg01, #0
01394     38 71 B0 FD | 	call	#__system___getiolock_0150
01398     0C 5F 02 F6 | 	mov	arg01, result1
0139c     D0 59 B0 FD | 	call	#__system___lockmem
013a0     00 18 06 F6 | 	mov	result1, #0
013a4     09 00 00 FF 
013a8     18 FA 05 F1 | 	add	objptr, ##4632
013ac     FD 60 02 FB | 	rdlong	arg02, objptr
013b0     09 00 00 FF 
013b4     18 FA 85 F1 | 	sub	objptr, ##4632
013b8     00 5E 06 F6 | 	mov	arg01, #0
013bc     00 62 06 F6 | 	mov	arg03, #0
013c0     0A 64 06 F6 | 	mov	arg04, #10
013c4     AC 5D B0 FD | 	call	#__system___basic_print_integer
013c8     00 5E 06 F6 | 	mov	arg01, #0
013cc     0A 60 06 F6 | 	mov	arg02, #10
013d0     00 62 06 F6 | 	mov	arg03, #0
013d4     08 5D B0 FD | 	call	#__system___basic_print_char
013d8     01 18 06 F6 | 	mov	result1, #1
013dc     00 5E 06 F6 | 	mov	arg01, #0
013e0     EC 70 B0 FD | 	call	#__system___getiolock_0150
013e4     0C 01 68 FC | 	wrlong	#0, result1
013e8     00 18 06 F6 | 	mov	result1, #0
013ec     38 61 02 F6 | 	mov	arg02, local03
013f0     0B 60 86 F1 | 	sub	arg02, #11
013f4                 | ' 
013f4                 | ' ''---------- Set the (x,y) position of cursor
013f4                 | ' 
013f4                 | ' cursor_x:=x
013f4     34 FA 05 F1 | 	add	objptr, #52
013f8     FD C6 48 FC | 	wrbyte	#99, objptr
013fc                 | ' cursor_y:=y
013fc     01 FA 05 F1 | 	add	objptr, #1
01400     FD 60 42 FC | 	wrbyte	arg02, objptr
01404     35 FA 85 F1 | 	sub	objptr, #53
01408     00 5E 06 F6 | 	mov	arg01, #0
0140c     C0 70 B0 FD | 	call	#__system___getiolock_0150
01410     0C 5F 02 F6 | 	mov	arg01, result1
01414     58 59 B0 FD | 	call	#__system___lockmem
01418     00 18 06 F6 | 	mov	result1, #0
0141c     09 00 00 FF 
01420     1C FA 05 F1 | 	add	objptr, ##4636
01424     FD 60 02 FB | 	rdlong	arg02, objptr
01428     09 00 00 FF 
0142c     1C FA 85 F1 | 	sub	objptr, ##4636
01430     00 5E 06 F6 | 	mov	arg01, #0
01434     00 62 06 F6 | 	mov	arg03, #0
01438     0A 64 06 F6 | 	mov	arg04, #10
0143c     34 5D B0 FD | 	call	#__system___basic_print_integer
01440     00 5E 06 F6 | 	mov	arg01, #0
01444     0A 60 06 F6 | 	mov	arg02, #10
01448     00 62 06 F6 | 	mov	arg03, #0
0144c     90 5C B0 FD | 	call	#__system___basic_print_char
01450     01 18 06 F6 | 	mov	result1, #1
01454     00 5E 06 F6 | 	mov	arg01, #0
01458     74 70 B0 FD | 	call	#__system___getiolock_0150
0145c     0C 01 68 FC | 	wrlong	#0, result1
01460     00 18 06 F6 | 	mov	result1, #0
01464                 | LR__0006
01464     01 70 06 F1 | 	add	local03, #1
01468     A4 F7 9F FD | 	jmp	#LR__0002
0146c                 | LR__0007
0146c                 | ' print
0146c     00 5E 06 F6 | 	mov	arg01, #0
01470     5C 70 B0 FD | 	call	#__system___getiolock_0150
01474     0C 5F 02 F6 | 	mov	arg01, result1
01478     F4 58 B0 FD | 	call	#__system___lockmem
0147c     00 18 06 F6 | 	mov	result1, #0
01480     00 5E 06 F6 | 	mov	arg01, #0
01484     0A 60 06 F6 | 	mov	arg02, #10
01488     00 62 06 F6 | 	mov	arg03, #0
0148c     50 5C B0 FD | 	call	#__system___basic_print_char
01490     01 18 06 F6 | 	mov	result1, #1
01494     00 5E 06 F6 | 	mov	arg01, #0
01498     34 70 B0 FD | 	call	#__system___getiolock_0150
0149c     0C 01 68 FC | 	wrlong	#0, result1
014a0     00 18 06 F6 | 	mov	result1, #0
014a4     AF F0 03 F6 | 	mov	ptra, fp
014a8     BA 00 A0 FD | 	call	#popregs_
014ac                 | _getinfo_ret
014ac     2D 00 64 FD | 	ret
014b0                 | 
014b0                 | _program
014b0     0C 5A 05 F6 | 	mov	COUNT_, #12
014b4     B0 00 A0 FD | 	call	#pushregs_
014b8     EC FA 05 F1 | 	add	objptr, #236
014bc     50 2B B0 FD | 	call	#_retrocog_spin2_start
014c0     02 00 00 FF 
014c4     40 FA 05 F1 | 	add	objptr, ##1088
014c8     FD 18 62 FC | 	wrlong	result1, objptr
014cc                 | ' c=rm.start()
014cc                 | ' return c
014cc     02 00 00 FF 
014d0     2C FB 85 F1 | 	sub	objptr, ##1324
014d4     40 5E 06 F6 | 	mov	arg01, #64
014d8     00 60 06 F6 | 	mov	arg02, #0
014dc     60 F3 BF FD | 	call	#_startvideo
014e0     1C FA 05 F1 | 	add	objptr, #28
014e4     FD 6C 02 FB | 	rdlong	local01, objptr
014e8     06 00 00 FF 
014ec     88 FB 05 F1 | 	add	objptr, ##3464
014f0     FD 6C 62 FC | 	wrlong	local01, objptr
014f4     06 00 00 FF 
014f8     8C FB 85 F1 | 	sub	objptr, ##3468
014fc     FD 6C 02 FB | 	rdlong	local01, objptr
01500     06 00 00 FF 
01504     90 FB 05 F1 | 	add	objptr, ##3472
01508     FD 6C 62 FC | 	wrlong	local01, objptr
0150c     06 00 00 FF 
01510     A8 FB 85 F1 | 	sub	objptr, ##3496
01514                 | ' 
01514                 | ' ' create a new screen
01514                 | ' ' 22 lines std border
01514                 | ' ' 32 lines of big title. As it is constant we fill it manually, lines 22..53
01514                 | ' ' 4 lines border lines 54..57
01514                 | ' ' 22x16=352 lines of text lines 58..409
01514                 | ' ' 6 lines of border at 410..415
01514                 | ' ' 64 lines of 4bpp oscilloscope at 416..479 ' todo: make it 2bpp. The driver has a bug: the timings[5] is not controlled by DL - TODO.
01514                 | ' ' 6 lines of border at 480..485
01514                 | ' ' 2x16=32 lines of text at 486- 517
01514                 | ' ' standard border at 518-539
01514                 | ' 
01514                 | ' ' We need 10752 bytes for text and 28672 bytes for graphics = 25088 bytes
01514                 | ' ' graphic starts at 79000
01514                 | ' ' text start at 76600
01514                 | ' 
01514                 | ' for i=0 to 539 : dlcopy(i)=lpeek(dltest+4*i):next i ' let it be here for debug
01514     00 6E 06 F6 | 	mov	local02, #0
01518     64 EB 9F FE | 	loc	pa,	#(@LR__0010-@LR__0008)
0151c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01520                 | LR__0008
01520     37 71 02 F6 | 	mov	local03, local02
01524     02 70 66 F0 | 	shl	local03, #2
01528     02 00 00 FF 
0152c     30 FB 05 F1 | 	add	objptr, ##1328
01530     FD 70 02 F1 | 	add	local03, objptr
01534     04 00 00 FF 
01538     74 FA 05 F1 | 	add	objptr, ##2164
0153c     FD 5E 02 FB | 	rdlong	arg01, objptr
01540     06 00 00 FF 
01544     A4 FB 85 F1 | 	sub	objptr, ##3492
01548     37 73 02 F6 | 	mov	local04, local02
0154c     02 72 66 F0 | 	shl	local04, #2
01550     39 5F 02 F1 | 	add	arg01, local04
01554                 | ' asm
01554     2F 19 02 FB | 	rdlong	result1, arg01
01558                 | ' return r
01558     38 19 62 FC | 	wrlong	result1, local03
0155c     01 6E 06 F1 | 	add	local02, #1
01560     01 00 00 FF 
01564     1C 6E 5E F2 | 	cmps	local02, ##540 wcz
01568     B4 FF 9F CD |  if_b	jmp	#LR__0008
0156c                 | ' 
0156c                 | ' ' Prepare the title
0156c                 | ' 
0156c                 | ' for i=0 to 28: title(i)=$77710000 : next i
0156c     00 6E 06 F6 | 	mov	local02, #0
01570                 | LR__0009
01570     37 71 02 F6 | 	mov	local03, local02
01574     02 70 66 F0 | 	shl	local03, #2
01578     06 00 00 FF 
0157c     AC FB 05 F1 | 	add	objptr, ##3500
01580     FD 70 02 F1 | 	add	local03, objptr
01584     80 B8 BB FF 
01588     38 01 68 FC | 	wrlong	##2003894272, local03
0158c     01 6E 06 F1 | 	add	local02, #1
01590     1D 6E 5E F2 | 	cmps	local02, #29 wcz
01594     06 00 00 FF 
01598     AC FB 85 F1 | 	sub	objptr, ##3500
0159c     D0 FF 9F CD |  if_b	jmp	#LR__0009
015a0                 | LR__0010
015a0     06 00 00 FF 
015a4     C4 FB 05 F1 | 	add	objptr, ##3524
015a8     FD 6C 02 FB | 	rdlong	local01, objptr
015ac     50 6C 06 F1 | 	add	local01, #80
015b0     FD 6C 62 FC | 	wrlong	local01, objptr
015b4     04 FA 05 F1 | 	add	objptr, #4
015b8     FD 6C 02 FB | 	rdlong	local01, objptr
015bc     72 6C 06 F1 | 	add	local01, #114
015c0     FD 6C 62 FC | 	wrlong	local01, objptr
015c4     04 FA 05 F1 | 	add	objptr, #4
015c8     FD 6C 02 FB | 	rdlong	local01, objptr
015cc     6F 6C 06 F1 | 	add	local01, #111
015d0     FD 6C 62 FC | 	wrlong	local01, objptr
015d4     04 FA 05 F1 | 	add	objptr, #4
015d8     FD 6C 02 FB | 	rdlong	local01, objptr
015dc     70 6C 06 F1 | 	add	local01, #112
015e0     FD 6C 62 FC | 	wrlong	local01, objptr
015e4     04 FA 05 F1 | 	add	objptr, #4
015e8     FD 6C 02 FB | 	rdlong	local01, objptr
015ec     32 6C 06 F1 | 	add	local01, #50
015f0     FD 6C 62 FC | 	wrlong	local01, objptr
015f4     04 FA 05 F1 | 	add	objptr, #4
015f8     FD 6C 02 FB | 	rdlong	local01, objptr
015fc     70 6C 06 F1 | 	add	local01, #112
01600     FD 6C 62 FC | 	wrlong	local01, objptr
01604     04 FA 05 F1 | 	add	objptr, #4
01608     FD 6C 02 FB | 	rdlong	local01, objptr
0160c     6C 6C 06 F1 | 	add	local01, #108
01610     FD 6C 62 FC | 	wrlong	local01, objptr
01614     04 FA 05 F1 | 	add	objptr, #4
01618     FD 6C 02 FB | 	rdlong	local01, objptr
0161c     61 6C 06 F1 | 	add	local01, #97
01620     FD 6C 62 FC | 	wrlong	local01, objptr
01624     04 FA 05 F1 | 	add	objptr, #4
01628     FD 6C 02 FB | 	rdlong	local01, objptr
0162c     79 6C 06 F1 | 	add	local01, #121
01630     FD 6C 62 FC | 	wrlong	local01, objptr
01634     08 FA 05 F1 | 	add	objptr, #8
01638     FD 6C 02 FB | 	rdlong	local01, objptr
0163c     76 6C 06 F1 | 	add	local01, #118
01640     FD 6C 62 FC | 	wrlong	local01, objptr
01644     04 FA 05 F1 | 	add	objptr, #4
01648     FD 6C 02 FB | 	rdlong	local01, objptr
0164c     2E 6C 06 F1 | 	add	local01, #46
01650     FD 6C 62 FC | 	wrlong	local01, objptr
01654     04 FA 05 F1 | 	add	objptr, #4
01658     FD 6C 02 FB | 	rdlong	local01, objptr
0165c     30 6C 06 F1 | 	add	local01, #48
01660     FD 6C 62 FC | 	wrlong	local01, objptr
01664     04 FA 05 F1 | 	add	objptr, #4
01668     FD 6C 02 FB | 	rdlong	local01, objptr
0166c     2E 6C 06 F1 | 	add	local01, #46
01670     FD 6C 62 FC | 	wrlong	local01, objptr
01674     04 FA 05 F1 | 	add	objptr, #4
01678     FD 6C 02 FB | 	rdlong	local01, objptr
0167c     30 6C 06 F1 | 	add	local01, #48
01680     FD 6C 62 FC | 	wrlong	local01, objptr
01684     04 FA 05 F1 | 	add	objptr, #4
01688     FD 6C 02 FB | 	rdlong	local01, objptr
0168c     31 6C 06 F1 | 	add	local01, #49
01690     FD 6C 62 FC | 	wrlong	local01, objptr
01694     07 00 00 FF 
01698     00 FA 85 F1 | 	sub	objptr, ##3584
0169c                 | ' 
0169c                 | ' ' 22 lines of upper border
0169c                 | ' 
0169c                 | ' for i=0 to 21 : dlcopy(i)=0: next i
0169c     00 6E 06 F6 | 	mov	local02, #0
016a0     88 E9 9F FE | 	loc	pa,	#(@LR__0012-@LR__0011)
016a4     93 00 A0 FD | 	call	#FCACHE_LOAD_
016a8                 | LR__0011
016a8     37 71 02 F6 | 	mov	local03, local02
016ac     02 70 66 F0 | 	shl	local03, #2
016b0     02 00 00 FF 
016b4     30 FB 05 F1 | 	add	objptr, ##1328
016b8     FD 70 02 F1 | 	add	local03, objptr
016bc     38 01 68 FC | 	wrlong	#0, local03
016c0     01 6E 06 F1 | 	add	local02, #1
016c4     16 6E 5E F2 | 	cmps	local02, #22 wcz
016c8     02 00 00 FF 
016cc     30 FB 85 F1 | 	sub	objptr, ##1328
016d0     D4 FF 9F CD |  if_b	jmp	#LR__0011
016d4                 | LR__0012
016d4                 | ' 
016d4                 | ' ' big text titlle logo. Tell the driver via DL that it should display the text from "title" table
016d4                 | ' 
016d4                 | ' for i=0 to 15
016d4     00 6E 06 F6 | 	mov	local02, #0
016d8                 | LR__0013
016d8                 | '   for j=0 to 1
016d8     00 74 06 F6 | 	mov	local05, #0
016dc                 | LR__0014
016dc     37 71 02 F6 | 	mov	local03, local02
016e0     01 70 66 F0 | 	shl	local03, #1
016e4     16 76 06 F6 | 	mov	local06, #22
016e8     38 77 02 F1 | 	add	local06, local03
016ec     3A 77 02 F1 | 	add	local06, local05
016f0     02 76 66 F0 | 	shl	local06, #2
016f4     02 00 00 FF 
016f8     30 FB 05 F1 | 	add	objptr, ##1328
016fc     FD 76 02 F1 | 	add	local06, objptr
01700     04 00 00 FF 
01704     7C FA 05 F1 | 	add	objptr, ##2172
01708     FD 5E 02 F6 | 	mov	arg01, objptr
0170c     06 00 00 FF 
01710     AC FB 85 F1 | 	sub	objptr, ##3500
01714     6C F1 BF FD | 	call	#_addr
01718     0C 79 02 F6 | 	mov	local07, result1
0171c     0C 78 66 F0 | 	shl	local07, #12
01720     10 00 00 FF 
01724     01 78 06 F1 | 	add	local07, ##8193
01728     37 73 02 F6 | 	mov	local04, local02
0172c     08 72 66 F0 | 	shl	local04, #8
01730     39 79 02 F1 | 	add	local07, local04
01734     3B 79 62 FC | 	wrlong	local07, local06
01738     01 74 06 F1 | 	add	local05, #1
0173c     02 74 5E F2 | 	cmps	local05, #2 wcz
01740     98 FF 9F CD |  if_b	jmp	#LR__0014
01744     01 6E 06 F1 | 	add	local02, #1
01748     10 6E 5E F2 | 	cmps	local02, #16 wcz
0174c     88 FF 9F CD |  if_b	jmp	#LR__0013
01750                 | ' 
01750                 | ' ' 4 empty lines under the logo
01750                 | ' 
01750                 | ' for i=54 to 57 : dlcopy(i)= dlcopy(0) : next i 
01750     36 6E 06 F6 | 	mov	local02, #54
01754     D8 E8 9F FE | 	loc	pa,	#(@LR__0016-@LR__0015)
01758     93 00 A0 FD | 	call	#FCACHE_LOAD_
0175c                 | LR__0015
0175c     37 71 02 F6 | 	mov	local03, local02
01760     02 70 66 F0 | 	shl	local03, #2
01764     02 00 00 FF 
01768     30 FB 05 F1 | 	add	objptr, ##1328
0176c     FD 70 02 F1 | 	add	local03, objptr
01770     FD 7A 02 FB | 	rdlong	local08, objptr
01774     02 00 00 FF 
01778     30 FB 85 F1 | 	sub	objptr, ##1328
0177c     38 7B 62 FC | 	wrlong	local08, local03
01780     01 6E 06 F1 | 	add	local02, #1
01784     3A 6E 1E F2 | 	cmp	local02, #58 wcz
01788     D0 FF 9F CD |  if_b	jmp	#LR__0015
0178c                 | LR__0016
0178c     07 00 00 FF 
01790     20 FA 05 F1 | 	add	objptr, ##3616
01794     B3 03 80 FF 
01798     FD 00 68 FC | 	wrlong	##484864, objptr
0179c     07 00 00 FF 
017a0     20 FA 85 F1 | 	sub	objptr, ##3616
017a4                 | ' 
017a4                 | ' ' Now make 22 text lines starting at 79e00
017a4                 | ' 
017a4                 | ' address=$76600
017a4                 | ' for i=0 to 21
017a4     00 6E 06 F6 | 	mov	local02, #0
017a8     84 E9 9F FE | 	loc	pa,	#(@LR__0021-@LR__0017)
017ac     93 00 A0 FD | 	call	#FCACHE_LOAD_
017b0                 | LR__0017
017b0                 | '   for j=0 to 15
017b0     00 74 06 F6 | 	mov	local05, #0
017b4                 | LR__0018
017b4     37 71 02 F6 | 	mov	local03, local02
017b8     04 70 66 F0 | 	shl	local03, #4
017bc     3A 76 06 F6 | 	mov	local06, #58
017c0     38 77 02 F1 | 	add	local06, local03
017c4     3A 77 02 F1 | 	add	local06, local05
017c8     02 76 66 F0 | 	shl	local06, #2
017cc     02 00 00 FF 
017d0     30 FB 05 F1 | 	add	objptr, ##1328
017d4     FD 76 02 F1 | 	add	local06, objptr
017d8     04 00 00 FF 
017dc     F0 FA 05 F1 | 	add	objptr, ##2288
017e0     FD 78 02 FB | 	rdlong	local07, objptr
017e4     07 00 00 FF 
017e8     20 FA 85 F1 | 	sub	objptr, ##3616
017ec     0C 78 66 F0 | 	shl	local07, #12
017f0     3A 73 02 F6 | 	mov	local04, local05
017f4     08 72 66 F0 | 	shl	local04, #8
017f8     39 79 02 F1 | 	add	local07, local04
017fc     37 7D 02 F6 | 	mov	local09, local02
01800     02 7C 66 F0 | 	shl	local09, #2
01804     3E 79 02 F1 | 	add	local07, local09
01808     01 78 06 F1 | 	add	local07, #1
0180c     3B 79 62 FC | 	wrlong	local07, local06
01810     01 74 06 F1 | 	add	local05, #1
01814     10 74 5E F2 | 	cmps	local05, #16 wcz
01818     98 FF 9F CD |  if_b	jmp	#LR__0018
0181c     07 00 00 FF 
01820     20 FA 05 F1 | 	add	objptr, ##3616
01824     FD 6C 02 FB | 	rdlong	local01, objptr
01828     C0 6D 06 F1 | 	add	local01, #448
0182c     FD 6C 62 FC | 	wrlong	local01, objptr
01830     07 00 00 FF 
01834     20 FA 85 F1 | 	sub	objptr, ##3616
01838     01 6E 06 F1 | 	add	local02, #1
0183c     16 6E 5E F2 | 	cmps	local02, #22 wcz
01840     6C FF 9F CD |  if_b	jmp	#LR__0017
01844                 | ' 
01844                 | ' ' and add 2 text lines at the bottpm
01844                 | ' 
01844                 | ' for i=0 to 1
01844     00 6E 06 F6 | 	mov	local02, #0
01848                 | LR__0019
01848                 | '   for j=0 to 15
01848     00 74 06 F6 | 	mov	local05, #0
0184c                 | LR__0020
0184c     37 71 02 F6 | 	mov	local03, local02
01850     04 70 66 F0 | 	shl	local03, #4
01854     E6 77 06 F6 | 	mov	local06, #486
01858     38 77 02 F1 | 	add	local06, local03
0185c     3A 77 02 F1 | 	add	local06, local05
01860     02 76 66 F0 | 	shl	local06, #2
01864     02 00 00 FF 
01868     30 FB 05 F1 | 	add	objptr, ##1328
0186c     FD 76 02 F1 | 	add	local06, objptr
01870     04 00 00 FF 
01874     F0 FA 05 F1 | 	add	objptr, ##2288
01878     FD 78 02 FB | 	rdlong	local07, objptr
0187c     07 00 00 FF 
01880     20 FA 85 F1 | 	sub	objptr, ##3616
01884     0C 78 66 F0 | 	shl	local07, #12
01888     3A 73 02 F6 | 	mov	local04, local05
0188c     08 72 66 F0 | 	shl	local04, #8
01890     39 79 02 F1 | 	add	local07, local04
01894     16 7C 06 F6 | 	mov	local09, #22
01898     37 7D 02 F1 | 	add	local09, local02
0189c     02 7C 66 F0 | 	shl	local09, #2
018a0     3E 79 02 F1 | 	add	local07, local09
018a4     01 78 06 F1 | 	add	local07, #1
018a8     3B 79 62 FC | 	wrlong	local07, local06
018ac     01 74 06 F1 | 	add	local05, #1
018b0     10 74 5E F2 | 	cmps	local05, #16 wcz
018b4     94 FF 9F CD |  if_b	jmp	#LR__0020
018b8     07 00 00 FF 
018bc     20 FA 05 F1 | 	add	objptr, ##3616
018c0     FD 6C 02 FB | 	rdlong	local01, objptr
018c4     C0 6D 06 F1 | 	add	local01, #448
018c8     FD 6C 62 FC | 	wrlong	local01, objptr
018cc     07 00 00 FF 
018d0     20 FA 85 F1 | 	sub	objptr, ##3616
018d4     01 6E 06 F1 | 	add	local02, #1
018d8     02 6E 5E F2 | 	cmps	local02, #2 wcz
018dc     68 FF 9F CD |  if_b	jmp	#LR__0019
018e0                 | LR__0021
018e0                 | ' 
018e0                 | ' ' add 6 empty lines over the scope area
018e0                 | ' 
018e0                 | ' for i=410 to 415 : dlcopy(i)=0 : next i
018e0     9A 6F 06 F6 | 	mov	local02, #410
018e4     44 E7 9F FE | 	loc	pa,	#(@LR__0023-@LR__0022)
018e8     93 00 A0 FD | 	call	#FCACHE_LOAD_
018ec                 | LR__0022
018ec     37 71 02 F6 | 	mov	local03, local02
018f0     02 70 66 F0 | 	shl	local03, #2
018f4     02 00 00 FF 
018f8     30 FB 05 F1 | 	add	objptr, ##1328
018fc     FD 70 02 F1 | 	add	local03, objptr
01900     38 01 68 FC | 	wrlong	#0, local03
01904     01 6E 06 F1 | 	add	local02, #1
01908     A0 6F 1E F2 | 	cmp	local02, #416 wcz
0190c     02 00 00 FF 
01910     30 FB 85 F1 | 	sub	objptr, ##1328
01914     D4 FF 9F CD |  if_b	jmp	#LR__0022
01918                 | LR__0023
01918     07 00 00 FF 
0191c     20 FA 05 F1 | 	add	objptr, ##3616
01920     C8 03 80 FF 
01924     FD 00 68 FC | 	wrlong	##495616, objptr
01928     07 00 00 FF 
0192c     20 FA 85 F1 | 	sub	objptr, ##3616
01930                 | ' 
01930                 | ' ' the scope area, 4 bpp graphics
01930                 | ' 
01930                 | ' address=$79000   
01930                 | ' 
01930                 | ' for i=416 to 479: dlcopy(i)= ((address+448*(i-416)) shl 12) + %1010 : next i
01930     A0 6F 06 F6 | 	mov	local02, #416
01934     8C E7 9F FE | 	loc	pa,	#(@LR__0027-@LR__0024)
01938     93 00 A0 FD | 	call	#FCACHE_LOAD_
0193c                 | LR__0024
0193c     37 71 02 F6 | 	mov	local03, local02
01940     02 70 66 F0 | 	shl	local03, #2
01944     02 00 00 FF 
01948     30 FB 05 F1 | 	add	objptr, ##1328
0194c     FD 70 02 F1 | 	add	local03, objptr
01950     04 00 00 FF 
01954     F0 FA 05 F1 | 	add	objptr, ##2288
01958     FD 7A 02 FB | 	rdlong	local08, objptr
0195c     07 00 00 FF 
01960     20 FA 85 F1 | 	sub	objptr, ##3616
01964     37 7F 02 F6 | 	mov	local10, local02
01968     A0 7F 86 F1 | 	sub	local10, #416
0196c     3F 73 02 F6 | 	mov	local04, local10
01970     03 72 66 F0 | 	shl	local04, #3
01974     3F 73 82 F1 | 	sub	local04, local10
01978     06 72 66 F0 | 	shl	local04, #6
0197c     39 7B 02 F1 | 	add	local08, local04
01980     0C 7A 66 F0 | 	shl	local08, #12
01984     0A 7A 06 F1 | 	add	local08, #10
01988     38 7B 62 FC | 	wrlong	local08, local03
0198c     01 6E 06 F1 | 	add	local02, #1
01990     E0 6F 1E F2 | 	cmp	local02, #480 wcz
01994     A4 FF 9F CD |  if_b	jmp	#LR__0024
01998                 | ' 
01998                 | ' ' add 6 empty lines under the scope area
01998                 | ' 
01998                 | ' for i=480 to 485 : dlcopy(i)=0 : next i
01998     E0 6F 06 F6 | 	mov	local02, #480
0199c                 | LR__0025
0199c     37 71 02 F6 | 	mov	local03, local02
019a0     02 70 66 F0 | 	shl	local03, #2
019a4     02 00 00 FF 
019a8     30 FB 05 F1 | 	add	objptr, ##1328
019ac     FD 70 02 F1 | 	add	local03, objptr
019b0     38 01 68 FC | 	wrlong	#0, local03
019b4     01 6E 06 F1 | 	add	local02, #1
019b8     E6 6F 1E F2 | 	cmp	local02, #486 wcz
019bc     02 00 00 FF 
019c0     30 FB 85 F1 | 	sub	objptr, ##1328
019c4     D4 FF 9F CD |  if_b	jmp	#LR__0025
019c8                 | ' 
019c8                 | ' ' 22 standard border lines at bottom
019c8                 | ' 
019c8                 | ' for i=518 to 539 : dlcopy(i)=0 : next i
019c8     01 00 00 FF 
019cc     06 6E 06 F6 | 	mov	local02, ##518
019d0                 | LR__0026
019d0     37 71 02 F6 | 	mov	local03, local02
019d4     02 70 66 F0 | 	shl	local03, #2
019d8     02 00 00 FF 
019dc     30 FB 05 F1 | 	add	objptr, ##1328
019e0     FD 70 02 F1 | 	add	local03, objptr
019e4     38 01 68 FC | 	wrlong	#0, local03
019e8     01 6E 06 F1 | 	add	local02, #1
019ec     01 00 00 FF 
019f0     1C 6E 1E F2 | 	cmp	local02, ##540 wcz
019f4     02 00 00 FF 
019f8     30 FB 85 F1 | 	sub	objptr, ##1328
019fc     D0 FF 9F CD |  if_b	jmp	#LR__0026
01a00                 | LR__0027
01a00     02 00 00 FF 
01a04     30 FB 05 F1 | 	add	objptr, ##1328
01a08     FD 5E 02 F6 | 	mov	arg01, objptr
01a0c     02 00 00 FF 
01a10     30 FB 85 F1 | 	sub	objptr, ##1328
01a14     6C EE BF FD | 	call	#_addr
01a18     1C FA 05 F1 | 	add	objptr, #28
01a1c     FD 18 62 FC | 	wrlong	result1, objptr
01a20     1C FA 85 F1 | 	sub	objptr, #28
01a24     B3 03 80 FF 
01a28     FD 00 68 FC | 	wrlong	##484864, objptr
01a2c     9A 5E 06 F6 | 	mov	arg01, #154
01a30     93 60 06 F6 | 	mov	arg02, #147
01a34     98 12 B0 FD | 	call	#_hng030rm_spin2_cls
01a38                 | ' 
01a38                 | ' ' tell the driver where is the new dl and buffer
01a38                 | ' 
01a38                 | ' v030.dl_ptr=addr(dlcopy) 
01a38                 | ' v030.buf_ptr=$76600
01a38                 | ' cls
01a38                 | ' for i=$79000 to $7FFFC step 4 : lpoke i,0 : next i
01a38     C8 03 00 FF 
01a3c     00 6E 06 F6 | 	mov	local02, ##495616
01a40     D0 E5 9F FE | 	loc	pa,	#(@LR__0029-@LR__0028)
01a44     93 00 A0 FD | 	call	#FCACHE_LOAD_
01a48                 | LR__0028
01a48                 | ' asm
01a48     37 01 68 FC | 	wrlong	#0, local02
01a4c     04 6E 06 F1 | 	add	local02, #4
01a50     FF 03 00 FF 
01a54     FC 6F 1E F2 | 	cmp	local02, ##524284 wcz
01a58     EC FF 9F ED |  if_be	jmp	#LR__0028
01a5c                 | LR__0029
01a5c     E4 FA 05 F1 | 	add	objptr, #228
01a60     FD 6C 02 FB | 	rdlong	local01, objptr
01a64     0C FA 85 F1 | 	sub	objptr, #12
01a68     FD 6C 62 FC | 	wrlong	local01, objptr
01a6c     D8 FA 85 F1 | 	sub	objptr, #216
01a70     00 5E 06 F6 | 	mov	arg01, #0
01a74     00 60 06 F6 | 	mov	arg02, #0
01a78     00 62 06 F6 | 	mov	arg03, #0
01a7c     00 64 06 F6 | 	mov	arg04, #0
01a80     1C 12 B0 FD | 	call	#_hng030rm_spin2_setcolor
01a84     01 5E 06 F6 | 	mov	arg01, #1
01a88     00 60 06 F6 | 	mov	arg02, #0
01a8c     00 62 06 F6 | 	mov	arg03, #0
01a90     FF 64 06 F6 | 	mov	arg04, #255
01a94     08 12 B0 FD | 	call	#_hng030rm_spin2_setcolor
01a98     02 5E 06 F6 | 	mov	arg01, #2
01a9c     00 60 06 F6 | 	mov	arg02, #0
01aa0     FF 62 06 F6 | 	mov	arg03, #255
01aa4     00 64 06 F6 | 	mov	arg04, #0
01aa8     F4 11 B0 FD | 	call	#_hng030rm_spin2_setcolor
01aac     03 5E 06 F6 | 	mov	arg01, #3
01ab0     FF 60 06 F6 | 	mov	arg02, #255
01ab4     00 62 06 F6 | 	mov	arg03, #0
01ab8     00 64 06 F6 | 	mov	arg04, #0
01abc     E0 11 B0 FD | 	call	#_hng030rm_spin2_setcolor
01ac0     C8 03 80 FF 
01ac4     FD 00 68 FC | 	wrlong	##495616, objptr
01ac8     64 5E 06 F6 | 	mov	arg01, #100
01acc     6C 54 B0 FD | 	call	#__system___waitms
01ad0     90 FA 05 F1 | 	add	objptr, #144
01ad4     FD E0 68 FC | 	wrlong	#112, objptr
01ad8     04 FA 05 F1 | 	add	objptr, #4
01adc     FD 80 68 FC | 	wrlong	#64, objptr
01ae0     94 FA 85 F1 | 	sub	objptr, #148
01ae4                 | ' 
01ae4                 | ' v030.putpixel=v030.p4
01ae4                 | ' 
01ae4                 | ' v030.setcolor(0,0,0,0)
01ae4                 | ' v030.setcolor(1,0,0,255)
01ae4                 | ' v030.setcolor(2,0,255,0)
01ae4                 | ' v030.setcolor(3,255,0,0)
01ae4                 | ' v030.buf_ptr=$79000
01ae4                 | ' waitms(100)
01ae4                 | ' v030.cpl=112
01ae4                 | ' v030.lines=64
01ae4                 | ' for i=0 to 100: v030.putpixel(i,4,3) : next i
01ae4     00 6E 06 F6 | 	mov	local02, #0
01ae8     20 E5 9F FE | 	loc	pa,	#(@LR__0031-@LR__0030)
01aec     93 00 A0 FD | 	call	#FCACHE_LOAD_
01af0                 | LR__0030
01af0     01 6E 06 F1 | 	add	local02, #1
01af4     65 6E 5E F2 | 	cmps	local02, #101 wcz
01af8     F4 FF 9F CD |  if_b	jmp	#LR__0030
01afc                 | LR__0031
01afc     14 5E 06 F6 | 	mov	arg01, #20
01b00     14 60 06 F6 | 	mov	arg02, #20
01b04     0A 62 06 F6 | 	mov	arg03, #10
01b08     01 64 06 F6 | 	mov	arg04, #1
01b0c     44 09 B0 FD | 	call	#_hng030rm_spin2_fcircle
01b10     48 00 00 FF 
01b14     B5 62 06 F6 | 	mov	arg03, ##@LR__0506
01b18     0A 5E 06 F6 | 	mov	arg01, #10
01b1c     0A 60 06 F6 | 	mov	arg02, #10
01b20     03 64 06 F6 | 	mov	arg04, #3
01b24     00 66 06 F6 | 	mov	arg05, #0
01b28     00 0D B0 FD | 	call	#_hng030rm_spin2_outtextxycg
01b2c                 | ' 
01b2c                 | ' 
01b2c                 | ' v030.fcircle(20,20,10,1)
01b2c                 | ' v030.outtextxycg(10,10,"Abcdef",3,0)
01b2c                 | ' for i=1 to 100 : v030.plot(i,10,3) : next i
01b2c     01 6E 06 F6 | 	mov	local02, #1
01b30                 | LR__0032
01b30     37 5F 02 F6 | 	mov	arg01, local02
01b34     0A 60 06 F6 | 	mov	arg02, #10
01b38     03 62 06 F6 | 	mov	arg03, #3
01b3c     14 19 B0 FD | 	call	#_hng030rm_spin2_plot
01b40     01 6E 06 F1 | 	add	local02, #1
01b44     65 6E 1E F2 | 	cmp	local02, #101 wcz
01b48     E4 FF 9F CD |  if_b	jmp	#LR__0032
01b4c     00 5E 06 F6 | 	mov	arg01, #0
01b50     20 60 06 F6 | 	mov	arg02, #32
01b54     BF 63 06 F6 | 	mov	arg03, #447
01b58     21 64 06 F6 | 	mov	arg04, #33
01b5c     03 66 06 F6 | 	mov	arg05, #3
01b60                 | ' line(x1,y1,x2,y2,c)
01b60     20 0A B0 FD | 	call	#_hng030rm_spin2_line
01b64     FA 5E 06 F6 | 	mov	arg01, #250
01b68     0A 60 06 F6 | 	mov	arg02, #10
01b6c     01 62 06 F6 | 	mov	arg03, #1
01b70     E0 18 B0 FD | 	call	#_hng030rm_spin2_plot
01b74     B3 03 80 FF 
01b78     FD 00 68 FC | 	wrlong	##484864, objptr
01b7c     90 FA 05 F1 | 	add	objptr, #144
01b80     FD E0 68 FC | 	wrlong	#112, objptr
01b84                 | ' 
01b84                 | ' return long[@ataripalette+4*color]
01b84     0C 00 00 FF 
01b88     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
01b8c     03 81 02 F6 | 	mov	local11, ptr__hng030rm_spin2_dat__
01b90     C4 81 06 F1 | 	add	local11, #452
01b94     40 19 02 FB | 	rdlong	result1, local11
01b98     0C 00 00 FF 
01b9c     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
01ba0     06 00 00 FF 
01ba4     94 FB 05 F1 | 	add	objptr, ##3476
01ba8     FD 18 62 FC | 	wrlong	result1, objptr
01bac     0C 5F 02 F6 | 	mov	arg01, result1
01bb0                 | ' 
01bb0                 | ' bordercolor:=color
01bb0     06 00 00 FF 
01bb4     F8 FB 85 F1 | 	sub	objptr, ##3576
01bb8     FD 5E 62 FC | 	wrlong	arg01, objptr
01bbc     06 00 00 FF 
01bc0     FC FB 05 F1 | 	add	objptr, ##3580
01bc4     FD 00 69 FC | 	wrlong	#128, objptr
01bc8     04 FA 05 F1 | 	add	objptr, #4
01bcc     FD 7A 68 FC | 	wrlong	#61, objptr
01bd0     04 FA 05 F1 | 	add	objptr, #4
01bd4     FD 78 68 FC | 	wrlong	#60, objptr
01bd8     04 FA 05 F1 | 	add	objptr, #4
01bdc     FD 76 68 FC | 	wrlong	#59, objptr
01be0     04 FA 05 F1 | 	add	objptr, #4
01be4     FD 74 68 FC | 	wrlong	#58, objptr
01be8     04 FA 05 F1 | 	add	objptr, #4
01bec     FD 06 68 FC | 	wrlong	#3, objptr
01bf0     48 00 00 FF 
01bf4     BC 6C 06 F6 | 	mov	local01, ##@LR__0507
01bf8     01 00 00 FF 
01bfc     AC FB 05 F1 | 	add	objptr, ##940
01c00     FD 6C 62 FC | 	wrlong	local01, objptr
01c04     48 00 00 FF 
01c08     D3 6C 06 F6 | 	mov	local01, ##@LR__0508
01c0c     04 FA 05 F1 | 	add	objptr, #4
01c10     FD 6C 62 FC | 	wrlong	local01, objptr
01c14     08 00 00 FF 
01c18     EC FB 85 F1 | 	sub	objptr, ##4588
01c1c                 | ' 
01c1c                 | ' emptystr$="                      "
01c1c                 | ' ss$=""
01c1c                 | ' for i=1 to 31 : ss$=ss$+chr$(i) :next i
01c1c     01 6E 06 F6 | 	mov	local02, #1
01c20                 | LR__0033
01c20     08 00 00 FF 
01c24     EC FB 05 F1 | 	add	objptr, ##4588
01c28     FD 6C 02 FB | 	rdlong	local01, objptr
01c2c     08 00 00 FF 
01c30     EC FB 85 F1 | 	sub	objptr, ##4588
01c34     37 5F 02 F6 | 	mov	arg01, local02
01c38     00 5A B0 FD | 	call	#__system__Chr_S
01c3c     0C 61 02 F6 | 	mov	arg02, result1
01c40     36 5F 02 F6 | 	mov	arg01, local01
01c44     64 51 B0 FD | 	call	#__system___string_concat
01c48     0C 6D 02 F6 | 	mov	local01, result1
01c4c     08 00 00 FF 
01c50     EC FB 05 F1 | 	add	objptr, ##4588
01c54     FD 6C 62 FC | 	wrlong	local01, objptr
01c58     08 00 00 FF 
01c5c     EC FB 85 F1 | 	sub	objptr, ##4588
01c60     01 6E 06 F1 | 	add	local02, #1
01c64     20 6E 1E F2 | 	cmp	local02, #32 wcz
01c68     B4 FF 9F CD |  if_b	jmp	#LR__0033
01c6c     02 5F 02 F6 | 	mov	arg01, ptr__dat__
01c70     10 EC BF FD | 	call	#_addr
01c74     08 00 00 FF 
01c78     F0 FB 05 F1 | 	add	objptr, ##4592
01c7c     FD 18 62 FC | 	wrlong	result1, objptr
01c80     0C 5F 02 F6 | 	mov	arg01, result1
01c84     00 60 06 F6 | 	mov	arg02, #0
01c88     01 00 00 FF 
01c8c     B0 FB 85 F1 | 	sub	objptr, ##944
01c90     5C 2A B0 FD | 	call	#_trackerplayer_spin2_initModule
01c94     01 60 06 F6 | 	mov	arg02, #1
01c98                 | ' 
01c98                 | ' ''---------- Set the (x,y) position of cursor
01c98                 | ' 
01c98                 | ' cursor_x:=x
01c98     07 00 00 FF 
01c9c     0C FA 85 F1 | 	sub	objptr, ##3596
01ca0     FD 02 48 FC | 	wrbyte	#1, objptr
01ca4                 | ' cursor_y:=y
01ca4     01 FA 05 F1 | 	add	objptr, #1
01ca8     FD 02 48 FC | 	wrbyte	#1, objptr
01cac                 | ' 
01cac                 | ' 
01cac                 | ' ma=addr(module)
01cac                 | ' tracker.initmodule(ma,0)
01cac                 | ' 
01cac                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
01cac     08 00 00 FF 
01cb0     BB FB 05 F1 | 	add	objptr, ##4539
01cb4     FD 6E 02 FB | 	rdlong	local02, objptr
01cb8     37 83 02 F6 | 	mov	local12, local02
01cbc     08 00 00 FF 
01cc0     F0 FB 85 F1 | 	sub	objptr, ##4592
01cc4     14 82 06 F1 | 	add	local12, #20
01cc8                 | LR__0034
01cc8     41 6F 5A F2 | 	cmps	local02, local12 wcz
01ccc     40 00 90 3D |  if_ae	jmp	#LR__0035
01cd0     00 5E 06 F6 | 	mov	arg01, #0
01cd4     F8 67 B0 FD | 	call	#__system___getiolock_0150
01cd8     0C 5F 02 F6 | 	mov	arg01, result1
01cdc     90 50 B0 FD | 	call	#__system___lockmem
01ce0                 | ' asm
01ce0     37 19 C2 FA | 	rdbyte	result1, local02
01ce4                 | ' return r
01ce4     0C 61 02 F6 | 	mov	arg02, result1
01ce8     07 60 46 F7 | 	zerox	arg02, #7
01cec     00 5E 06 F6 | 	mov	arg01, #0
01cf0     00 62 06 F6 | 	mov	arg03, #0
01cf4     E8 53 B0 FD | 	call	#__system___basic_print_char
01cf8     00 5E 06 F6 | 	mov	arg01, #0
01cfc     D0 67 B0 FD | 	call	#__system___getiolock_0150
01d00     0C 01 68 FC | 	wrlong	#0, result1
01d04     00 18 06 F6 | 	mov	result1, #0
01d08     01 6E 06 F1 | 	add	local02, #1
01d0c     B8 FF 9F FD | 	jmp	#LR__0034
01d10                 | LR__0035
01d10     08 00 00 FF 
01d14     F4 FB 05 F1 | 	add	objptr, ##4596
01d18     FD 1E 68 FC | 	wrlong	#15, objptr
01d1c                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
01d1c     00 6C 06 F6 | 	mov	local01, #0
01d20     04 FA 85 F1 | 	sub	objptr, #4
01d24     FD 5E 02 FB | 	rdlong	arg01, objptr
01d28     02 00 00 FF 
01d2c     38 5E 06 F1 | 	add	arg01, ##1080
01d30                 | ' asm
01d30     2F 71 C2 FA | 	rdbyte	local03, arg01
01d34                 | ' return r
01d34     07 70 46 F7 | 	zerox	local03, #7
01d38     4D 70 0E F2 | 	cmp	local03, #77 wz
01d3c     01 6C 66 A6 |  if_e	neg	local01, #1
01d40     00 7A 06 F6 | 	mov	local08, #0
01d44     FD 5E 02 FB | 	rdlong	arg01, objptr
01d48     08 00 00 FF 
01d4c     F0 FB 85 F1 | 	sub	objptr, ##4592
01d50     02 00 00 FF 
01d54     3A 5E 06 F1 | 	add	arg01, ##1082
01d58                 | ' asm
01d58     2F 19 C2 FA | 	rdbyte	result1, arg01
01d5c                 | ' return r
01d5c     0C 79 02 F6 | 	mov	local07, result1
01d60     07 78 46 F7 | 	zerox	local07, #7
01d64     4B 78 0E F2 | 	cmp	local07, #75 wz
01d68     01 7A 66 A6 |  if_e	neg	local08, #1
01d6c     3D 6D CA F7 | 	test	local01, local08 wz
01d70     08 00 00 5F 
01d74     F4 FB 05 51 |  if_ne	add	objptr, ##4596
01d78     FD 3E 68 5C |  if_ne	wrlong	#31, objptr
01d7c     08 00 00 5F 
01d80     F4 FB 85 51 |  if_ne	sub	objptr, ##4596
01d84     02 60 06 F6 | 	mov	arg02, #2
01d88                 | ' 
01d88                 | ' ''---------- Set the (x,y) position of cursor
01d88                 | ' 
01d88                 | ' cursor_x:=x
01d88     34 FA 05 F1 | 	add	objptr, #52
01d8c     FD 02 48 FC | 	wrbyte	#1, objptr
01d90                 | ' cursor_y:=y
01d90     01 FA 05 F1 | 	add	objptr, #1
01d94     FD 04 48 FC | 	wrbyte	#2, objptr
01d98     35 FA 85 F1 | 	sub	objptr, #53
01d9c                 | ' position 1,2 : print samples;" ";"samples module"
01d9c     00 5E 06 F6 | 	mov	arg01, #0
01da0     2C 67 B0 FD | 	call	#__system___getiolock_0150
01da4     0C 5F 02 F6 | 	mov	arg01, result1
01da8     C4 4F B0 FD | 	call	#__system___lockmem
01dac     00 18 06 F6 | 	mov	result1, #0
01db0     08 00 00 FF 
01db4     F4 FB 05 F1 | 	add	objptr, ##4596
01db8     FD 60 02 FB | 	rdlong	arg02, objptr
01dbc     08 00 00 FF 
01dc0     F4 FB 85 F1 | 	sub	objptr, ##4596
01dc4     00 5E 06 F6 | 	mov	arg01, #0
01dc8     00 62 06 F6 | 	mov	arg03, #0
01dcc     0A 64 06 F6 | 	mov	arg04, #10
01dd0     A0 53 B0 FD | 	call	#__system___basic_print_integer
01dd4     48 00 00 FF 
01dd8     D4 60 06 F6 | 	mov	arg02, ##@LR__0509
01ddc     00 5E 06 F6 | 	mov	arg01, #0
01de0     00 62 06 F6 | 	mov	arg03, #0
01de4     44 53 B0 FD | 	call	#__system___basic_print_string
01de8     48 00 00 FF 
01dec     D6 60 06 F6 | 	mov	arg02, ##@LR__0510
01df0     00 5E 06 F6 | 	mov	arg01, #0
01df4     00 62 06 F6 | 	mov	arg03, #0
01df8     30 53 B0 FD | 	call	#__system___basic_print_string
01dfc     00 5E 06 F6 | 	mov	arg01, #0
01e00     0A 60 06 F6 | 	mov	arg02, #10
01e04     00 62 06 F6 | 	mov	arg03, #0
01e08     D4 52 B0 FD | 	call	#__system___basic_print_char
01e0c     01 18 06 F6 | 	mov	result1, #1
01e10     00 5E 06 F6 | 	mov	arg01, #0
01e14     B8 66 B0 FD | 	call	#__system___getiolock_0150
01e18     0C 01 68 FC | 	wrlong	#0, result1
01e1c     00 18 06 F6 | 	mov	result1, #0
01e20     08 00 00 FF 
01e24     F0 FB 05 F1 | 	add	objptr, ##4592
01e28     FD 5E 02 FB | 	rdlong	arg01, objptr
01e2c     04 FA 05 F1 | 	add	objptr, #4
01e30     FD 60 02 FB | 	rdlong	arg02, objptr
01e34     08 00 00 FF 
01e38     F4 FB 85 F1 | 	sub	objptr, ##4596
01e3c     E0 EC BF FD | 	call	#_getinfo
01e40     08 00 00 FF 
01e44     3C FA 05 F1 | 	add	objptr, ##4156
01e48     D8 4A B0 FD | 	call	#_audio019_spin2_start
01e4c     0D 71 02 F6 | 	mov	local03, result2
01e50     A4 FB 05 F1 | 	add	objptr, #420
01e54     FD 18 62 FC | 	wrlong	result1, objptr
01e58     04 FA 05 F1 | 	add	objptr, #4
01e5c     FD 70 62 FC | 	wrlong	local03, objptr
01e60     14 FA 05 F1 | 	add	objptr, #20
01e64     FD 00 68 FC | 	wrlong	#0, objptr
01e68     04 FA 05 F1 | 	add	objptr, #4
01e6c     FD 00 68 FC | 	wrlong	#0, objptr
01e70     04 FA 05 F1 | 	add	objptr, #4
01e74     FD 00 68 FC | 	wrlong	#0, objptr
01e78     04 FA 05 F1 | 	add	objptr, #4
01e7c     FD 00 68 FC | 	wrlong	#0, objptr
01e80     09 00 00 FF 
01e84     04 FA 85 F1 | 	sub	objptr, ##4612
01e88                 | ' getinfo(ma,samples)
01e88                 | ' 
01e88                 | ' cog,base=paula.start()
01e88                 | ' 
01e88                 | ' old1=0 : old2=0 :old3=0 : old4=0
01e88                 | ' 
01e88                 | ' 
01e88                 | ' 
01e88                 | ' 'position 0,26 : v030.writeln(ss$)
01e88                 | ' 'print"123456789012345678901234567890"
01e88                 | ' do
01e88                 | LR__0036
01e88     01 5E 06 F6 | 	mov	arg01, #1
01e8c     78 0D B0 FD | 	call	#_hng030rm_spin2_waitvbl
01e90     07 00 00 FF 
01e94     40 FA 05 F1 | 	add	objptr, ##3648
01e98     34 2F B0 FD | 	call	#_trackerplayer_spin2_tick
01e9c     07 00 00 FF 
01ea0     40 FA 85 F1 | 	sub	objptr, ##3648
01ea4     1B 18 62 FD | 	getrnd	result1
01ea8     0C 99 02 F6 | 	mov	muldiva_, result1
01eac     01 00 00 FF 
01eb0     1C 9A 06 F6 | 	mov	muldivb_, ##540
01eb4     C2 00 A0 FD | 	call	#unsdivide_
01eb8     09 00 00 FF 
01ebc     08 FA 05 F1 | 	add	objptr, ##4616
01ec0     FD 98 62 FC | 	wrlong	muldiva_, objptr
01ec4                 | '     
01ec4                 | ' '    dlentry=lpeek(dltest) : for i=0 to 539:   rr=(2*i) mod 540+(2*i)/ 540 : lpoke dltest+4*i, dlcopy(rr) :next i 
01ec4                 | '      
01ec4                 | '     if tracker.trigger(0)<>old1 then 
01ec4     D2 FB 85 F1 | 	sub	objptr, #466
01ec8     FD 6C C2 FA | 	rdbyte	local01, objptr
01ecc     C2 FB 05 F1 | 	add	objptr, #450
01ed0     FD 76 02 FB | 	rdlong	local06, objptr
01ed4     08 00 00 FF 
01ed8     F8 FB 85 F1 | 	sub	objptr, ##4600
01edc     3B 6D 0A F2 | 	cmp	local01, local06 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0037
01ee4     08 00 00 FF 
01ee8     36 FA 05 F1 | 	add	objptr, ##4150
01eec     FD 6C C2 FA | 	rdbyte	local01, objptr
01ef0     C2 FB 05 F1 | 	add	objptr, #450
01ef4     FD 6C 62 FC | 	wrlong	local01, objptr
01ef8     14 FA 85 F1 | 	sub	objptr, #20
01efc     FD 5E 02 FB | 	rdlong	arg01, objptr
01f00     08 5E 06 F1 | 	add	arg01, #8
01f04     01 00 00 FF 
01f08     FD FA 85 F1 | 	sub	objptr, ##765
01f0c     FD 60 02 FB | 	rdlong	arg02, objptr
01f10     1E 60 26 F4 | 	bith	arg02, #30
01f14                 | ' asm
01f14     2F 61 62 FC | 	wrlong	arg02, arg01
01f18     01 00 00 FF 
01f1c     FD FA 05 F1 | 	add	objptr, ##765
01f20     FD 5E 02 FB | 	rdlong	arg01, objptr
01f24     0C 5E 06 F1 | 	add	arg01, #12
01f28     01 00 00 FF 
01f2c     E9 FA 85 F1 | 	sub	objptr, ##745
01f30     FD 60 E2 FA | 	rdword	arg02, objptr
01f34     08 FA 05 F1 | 	add	objptr, #8
01f38     FD 78 02 FB | 	rdlong	local07, objptr
01f3c     3C 61 82 F1 | 	sub	arg02, local07
01f40                 | ' asm
01f40     2F 61 62 FC | 	wrlong	arg02, arg01
01f44     01 00 00 FF 
01f48     E1 FA 05 F1 | 	add	objptr, ##737
01f4c     FD 5E 02 FB | 	rdlong	arg01, objptr
01f50     10 5E 06 F1 | 	add	arg01, #16
01f54     01 00 00 FF 
01f58     E9 FA 85 F1 | 	sub	objptr, ##745
01f5c     FD 60 E2 FA | 	rdword	arg02, objptr
01f60     07 00 00 FF 
01f64     FB FA 85 F1 | 	sub	objptr, ##3835
01f68     0F 60 46 F7 | 	zerox	arg02, #15
01f6c                 | ' asm
01f6c     2F 61 62 FC | 	wrlong	arg02, arg01
01f70                 | LR__0037
01f70     08 00 00 FF 
01f74     E4 FB 05 F1 | 	add	objptr, ##4580
01f78     FD 5E 02 FB | 	rdlong	arg01, objptr
01f7c     14 5E 06 F1 | 	add	arg01, #20
01f80     01 00 00 FF 
01f84     A5 FA 85 F1 | 	sub	objptr, ##677
01f88     FD 76 02 FB | 	rdlong	local06, objptr
01f8c     10 FA 05 F1 | 	add	objptr, #16
01f90     FD 78 02 FB | 	rdlong	local07, objptr
01f94     3C 77 02 F1 | 	add	local06, local07
01f98     27 FB 85 F1 | 	sub	objptr, #295
01f9c     FD 7C 02 FB | 	rdlong	local09, objptr
01fa0     3E 77 02 FD | 	qmul	local06, local09
01fa4     18 60 62 FD | 	getqx	arg02
01fa8                 | ' asm
01fa8     2F 61 52 FC | 	wrword	arg02, arg01
01fac     01 00 00 FF 
01fb0     BC FB 05 F1 | 	add	objptr, ##956
01fb4     FD 5E 02 FB | 	rdlong	arg01, objptr
01fb8     16 5E 06 F1 | 	add	arg01, #22
01fbc                 | ' asm
01fbc     0C 00 80 FF 
01fc0     2F 01 58 FC | 	wrword	##6144, arg01
01fc4     FD 5E 02 FB | 	rdlong	arg01, objptr
01fc8     18 5E 06 F1 | 	add	arg01, #24
01fcc     01 00 00 FF 
01fd0     C5 FA 85 F1 | 	sub	objptr, ##709
01fd4     FD 60 02 FB | 	rdlong	arg02, objptr
01fd8     10 FA 05 F1 | 	add	objptr, #16
01fdc     FD 78 02 FB | 	rdlong	local07, objptr
01fe0     3C 61 02 F1 | 	add	arg02, local07
01fe4                 | ' asm
01fe4     2F 61 52 FC | 	wrword	arg02, arg01
01fe8     01 00 00 FF 
01fec     B5 FA 05 F1 | 	add	objptr, ##693
01ff0     FD 5E 02 FB | 	rdlong	arg01, objptr
01ff4     1A 5E 06 F1 | 	add	arg01, #26
01ff8                 | ' asm
01ff8     2F 03 58 FC | 	wrword	#1, arg01
01ffc                 | '   
01ffc                 | '   
01ffc                 | '     dpoke base+20, (tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
01ffc                 | '     dpoke base+22, 8192-2048
01ffc                 | '     dpoke base+24, tracker.currPeriod(0)+tracker.deltaperiod(0)
01ffc                 | '     dpoke base+26, 1
01ffc                 | ' 
01ffc                 | '  
01ffc                 | '     if tracker.trigger(1) <> old2  then
01ffc     AD FB 85 F1 | 	sub	objptr, #429
02000     FD 6C C2 FA | 	rdbyte	local01, objptr
02004     C5 FB 05 F1 | 	add	objptr, #453
02008     FD 76 02 FB | 	rdlong	local06, objptr
0200c     08 00 00 FF 
02010     FC FB 85 F1 | 	sub	objptr, ##4604
02014     3B 6D 0A F2 | 	cmp	local01, local06 wz
02018     9C 00 90 AD |  if_e	jmp	#LR__0038
0201c     08 00 00 FF 
02020     37 FA 05 F1 | 	add	objptr, ##4151
02024     FD 6C C2 FA | 	rdbyte	local01, objptr
02028     C5 FB 05 F1 | 	add	objptr, #453
0202c     FD 6C 62 FC | 	wrlong	local01, objptr
02030     18 FA 85 F1 | 	sub	objptr, #24
02034     FD 5E 02 FB | 	rdlong	arg01, objptr
02038     28 5E 06 F1 | 	add	arg01, #40
0203c     01 00 00 FF 
02040     F9 FA 85 F1 | 	sub	objptr, ##761
02044     FD 60 02 FB | 	rdlong	arg02, objptr
02048     1E 60 26 F4 | 	bith	arg02, #30
0204c                 | ' asm
0204c     2F 61 62 FC | 	wrlong	arg02, arg01
02050     20 5E 06 F6 | 	mov	arg01, #32
02054     01 00 00 FF 
02058     F9 FA 05 F1 | 	add	objptr, ##761
0205c     FD 76 02 FB | 	rdlong	local06, objptr
02060     3B 5F 02 F1 | 	add	arg01, local06
02064     0C 5E 06 F1 | 	add	arg01, #12
02068     01 00 00 FF 
0206c     E7 FA 85 F1 | 	sub	objptr, ##743
02070     FD 60 E2 FA | 	rdword	arg02, objptr
02074     0A FA 05 F1 | 	add	objptr, #10
02078     FD 78 02 FB | 	rdlong	local07, objptr
0207c     3C 61 82 F1 | 	sub	arg02, local07
02080                 | ' asm
02080     2F 61 62 FC | 	wrlong	arg02, arg01
02084     20 5E 06 F6 | 	mov	arg01, #32
02088     01 00 00 FF 
0208c     DD FA 05 F1 | 	add	objptr, ##733
02090     FD 76 02 FB | 	rdlong	local06, objptr
02094     3B 5F 02 F1 | 	add	arg01, local06
02098     10 5E 06 F1 | 	add	arg01, #16
0209c     01 00 00 FF 
020a0     E7 FA 85 F1 | 	sub	objptr, ##743
020a4     FD 60 E2 FA | 	rdword	arg02, objptr
020a8     07 00 00 FF 
020ac     FD FA 85 F1 | 	sub	objptr, ##3837
020b0     0F 60 46 F7 | 	zerox	arg02, #15
020b4                 | ' asm
020b4     2F 61 62 FC | 	wrlong	arg02, arg01
020b8                 | LR__0038
020b8     20 5E 06 F6 | 	mov	arg01, #32
020bc     08 00 00 FF 
020c0     E4 FB 05 F1 | 	add	objptr, ##4580
020c4     FD 76 02 FB | 	rdlong	local06, objptr
020c8     3B 5F 02 F1 | 	add	arg01, local06
020cc     14 5E 06 F1 | 	add	arg01, #20
020d0     01 00 00 FF 
020d4     A1 FA 85 F1 | 	sub	objptr, ##673
020d8     FD 76 02 FB | 	rdlong	local06, objptr
020dc     10 FA 05 F1 | 	add	objptr, #16
020e0     FD 78 02 FB | 	rdlong	local07, objptr
020e4     3C 77 02 F1 | 	add	local06, local07
020e8     2B FB 85 F1 | 	sub	objptr, #299
020ec     FD 7C 02 FB | 	rdlong	local09, objptr
020f0     3E 77 02 FD | 	qmul	local06, local09
020f4     18 60 62 FD | 	getqx	arg02
020f8                 | ' asm
020f8     2F 61 52 FC | 	wrword	arg02, arg01
020fc     20 5E 06 F6 | 	mov	arg01, #32
02100     01 00 00 FF 
02104     BC FB 05 F1 | 	add	objptr, ##956
02108     FD 76 02 FB | 	rdlong	local06, objptr
0210c     3B 5F 02 F1 | 	add	arg01, local06
02110     16 5E 06 F1 | 	add	arg01, #22
02114                 | ' asm
02114     14 00 80 FF 
02118     2F 01 58 FC | 	wrword	##10240, arg01
0211c     20 5E 06 F6 | 	mov	arg01, #32
02120     FD 76 02 FB | 	rdlong	local06, objptr
02124     3B 5F 02 F1 | 	add	arg01, local06
02128     18 5E 06 F1 | 	add	arg01, #24
0212c     01 00 00 FF 
02130     C1 FA 85 F1 | 	sub	objptr, ##705
02134     FD 60 02 FB | 	rdlong	arg02, objptr
02138     10 FA 05 F1 | 	add	objptr, #16
0213c     FD 78 02 FB | 	rdlong	local07, objptr
02140     3C 61 02 F1 | 	add	arg02, local07
02144                 | ' asm
02144     2F 61 52 FC | 	wrword	arg02, arg01
02148     20 5E 06 F6 | 	mov	arg01, #32
0214c     01 00 00 FF 
02150     B1 FA 05 F1 | 	add	objptr, ##689
02154     FD 76 02 FB | 	rdlong	local06, objptr
02158     3B 5F 02 F1 | 	add	arg01, local06
0215c     1A 5E 06 F1 | 	add	arg01, #26
02160                 | ' asm
02160     2F 03 58 FC | 	wrword	#1, arg01
02164                 | '       
02164                 | '     dpoke 32+base+20, (tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
02164                 | '     dpoke 32+base+22, 8192+2048
02164                 | '     dpoke 32+base+24, tracker.currPeriod(1)+tracker.deltaperiod(1)
02164                 | '     dpoke 32+base+26, 1
02164                 | ' 
02164                 | '    if tracker.trigger(2) <> old3  then
02164     AC FB 85 F1 | 	sub	objptr, #428
02168     FD 6C C2 FA | 	rdbyte	local01, objptr
0216c     C8 FB 05 F1 | 	add	objptr, #456
02170     FD 76 02 FB | 	rdlong	local06, objptr
02174     09 00 00 FF 
02178     00 FA 85 F1 | 	sub	objptr, ##4608
0217c     3B 6D 0A F2 | 	cmp	local01, local06 wz
02180     9C 00 90 AD |  if_e	jmp	#LR__0039
02184     08 00 00 FF 
02188     38 FA 05 F1 | 	add	objptr, ##4152
0218c     FD 6C C2 FA | 	rdbyte	local01, objptr
02190     C8 FB 05 F1 | 	add	objptr, #456
02194     FD 6C 62 FC | 	wrlong	local01, objptr
02198     1C FA 85 F1 | 	sub	objptr, #28
0219c     FD 5E 02 FB | 	rdlong	arg01, objptr
021a0     48 5E 06 F1 | 	add	arg01, #72
021a4     01 00 00 FF 
021a8     F5 FA 85 F1 | 	sub	objptr, ##757
021ac     FD 60 02 FB | 	rdlong	arg02, objptr
021b0     1E 60 26 F4 | 	bith	arg02, #30
021b4                 | ' asm
021b4     2F 61 62 FC | 	wrlong	arg02, arg01
021b8     40 5E 06 F6 | 	mov	arg01, #64
021bc     01 00 00 FF 
021c0     F5 FA 05 F1 | 	add	objptr, ##757
021c4     FD 76 02 FB | 	rdlong	local06, objptr
021c8     3B 5F 02 F1 | 	add	arg01, local06
021cc     0C 5E 06 F1 | 	add	arg01, #12
021d0     01 00 00 FF 
021d4     E5 FA 85 F1 | 	sub	objptr, ##741
021d8     FD 60 E2 FA | 	rdword	arg02, objptr
021dc     0C FA 05 F1 | 	add	objptr, #12
021e0     FD 78 02 FB | 	rdlong	local07, objptr
021e4     3C 61 82 F1 | 	sub	arg02, local07
021e8                 | ' asm
021e8     2F 61 62 FC | 	wrlong	arg02, arg01
021ec     40 5E 06 F6 | 	mov	arg01, #64
021f0     01 00 00 FF 
021f4     D9 FA 05 F1 | 	add	objptr, ##729
021f8     FD 76 02 FB | 	rdlong	local06, objptr
021fc     3B 5F 02 F1 | 	add	arg01, local06
02200     10 5E 06 F1 | 	add	arg01, #16
02204     01 00 00 FF 
02208     E5 FA 85 F1 | 	sub	objptr, ##741
0220c     FD 60 E2 FA | 	rdword	arg02, objptr
02210     07 00 00 FF 
02214     FF FA 85 F1 | 	sub	objptr, ##3839
02218     0F 60 46 F7 | 	zerox	arg02, #15
0221c                 | ' asm
0221c     2F 61 62 FC | 	wrlong	arg02, arg01
02220                 | LR__0039
02220     40 5E 06 F6 | 	mov	arg01, #64
02224     08 00 00 FF 
02228     E4 FB 05 F1 | 	add	objptr, ##4580
0222c     FD 76 02 FB | 	rdlong	local06, objptr
02230     3B 5F 02 F1 | 	add	arg01, local06
02234     14 5E 06 F1 | 	add	arg01, #20
02238     01 00 00 FF 
0223c     9D FA 85 F1 | 	sub	objptr, ##669
02240     FD 76 02 FB | 	rdlong	local06, objptr
02244     10 FA 05 F1 | 	add	objptr, #16
02248     FD 78 02 FB | 	rdlong	local07, objptr
0224c     3C 77 02 F1 | 	add	local06, local07
02250     2F FB 85 F1 | 	sub	objptr, #303
02254     FD 7C 02 FB | 	rdlong	local09, objptr
02258     3E 77 02 FD | 	qmul	local06, local09
0225c     18 60 62 FD | 	getqx	arg02
02260                 | ' asm
02260     2F 61 52 FC | 	wrword	arg02, arg01
02264     40 5E 06 F6 | 	mov	arg01, #64
02268     01 00 00 FF 
0226c     BC FB 05 F1 | 	add	objptr, ##956
02270     FD 76 02 FB | 	rdlong	local06, objptr
02274     3B 5F 02 F1 | 	add	arg01, local06
02278     16 5E 06 F1 | 	add	arg01, #22
0227c                 | ' asm
0227c     14 00 80 FF 
02280     2F 01 58 FC | 	wrword	##10240, arg01
02284     40 5E 06 F6 | 	mov	arg01, #64
02288     FD 76 02 FB | 	rdlong	local06, objptr
0228c     3B 5F 02 F1 | 	add	arg01, local06
02290     18 5E 06 F1 | 	add	arg01, #24
02294     01 00 00 FF 
02298     BD FA 85 F1 | 	sub	objptr, ##701
0229c     FD 60 02 FB | 	rdlong	arg02, objptr
022a0     10 FA 05 F1 | 	add	objptr, #16
022a4     FD 78 02 FB | 	rdlong	local07, objptr
022a8     3C 61 02 F1 | 	add	arg02, local07
022ac                 | ' asm
022ac     2F 61 52 FC | 	wrword	arg02, arg01
022b0     40 5E 06 F6 | 	mov	arg01, #64
022b4     01 00 00 FF 
022b8     AD FA 05 F1 | 	add	objptr, ##685
022bc     FD 76 02 FB | 	rdlong	local06, objptr
022c0     3B 5F 02 F1 | 	add	arg01, local06
022c4     1A 5E 06 F1 | 	add	arg01, #26
022c8                 | ' asm
022c8     2F 03 58 FC | 	wrword	#1, arg01
022cc                 | '     
022cc                 | '     dpoke 64+base+20, (tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
022cc                 | '     dpoke 64+base+22, 8192+2048
022cc                 | '     dpoke 64+base+24, tracker.currPeriod(2)+tracker.deltaperiod(2)
022cc                 | '     dpoke 64+base+26, 1
022cc                 | ' 
022cc                 | '     if tracker.trigger(3) <> old4 then
022cc     AB FB 85 F1 | 	sub	objptr, #427
022d0     FD 6C C2 FA | 	rdbyte	local01, objptr
022d4     CB FB 05 F1 | 	add	objptr, #459
022d8     FD 76 02 FB | 	rdlong	local06, objptr
022dc     09 00 00 FF 
022e0     04 FA 85 F1 | 	sub	objptr, ##4612
022e4     3B 6D 0A F2 | 	cmp	local01, local06 wz
022e8     9C 00 90 AD |  if_e	jmp	#LR__0040
022ec     08 00 00 FF 
022f0     39 FA 05 F1 | 	add	objptr, ##4153
022f4     FD 6C C2 FA | 	rdbyte	local01, objptr
022f8     CB FB 05 F1 | 	add	objptr, #459
022fc     FD 6C 62 FC | 	wrlong	local01, objptr
02300     20 FA 85 F1 | 	sub	objptr, #32
02304     FD 5E 02 FB | 	rdlong	arg01, objptr
02308     68 5E 06 F1 | 	add	arg01, #104
0230c     01 00 00 FF 
02310     F1 FA 85 F1 | 	sub	objptr, ##753
02314     FD 60 02 FB | 	rdlong	arg02, objptr
02318     1E 60 26 F4 | 	bith	arg02, #30
0231c                 | ' asm
0231c     2F 61 62 FC | 	wrlong	arg02, arg01
02320     60 5E 06 F6 | 	mov	arg01, #96
02324     01 00 00 FF 
02328     F1 FA 05 F1 | 	add	objptr, ##753
0232c     FD 76 02 FB | 	rdlong	local06, objptr
02330     3B 5F 02 F1 | 	add	arg01, local06
02334     0C 5E 06 F1 | 	add	arg01, #12
02338     01 00 00 FF 
0233c     E3 FA 85 F1 | 	sub	objptr, ##739
02340     FD 60 E2 FA | 	rdword	arg02, objptr
02344     0E FA 05 F1 | 	add	objptr, #14
02348     FD 78 02 FB | 	rdlong	local07, objptr
0234c     3C 61 82 F1 | 	sub	arg02, local07
02350                 | ' asm
02350     2F 61 62 FC | 	wrlong	arg02, arg01
02354     60 5E 06 F6 | 	mov	arg01, #96
02358     01 00 00 FF 
0235c     D5 FA 05 F1 | 	add	objptr, ##725
02360     FD 76 02 FB | 	rdlong	local06, objptr
02364     3B 5F 02 F1 | 	add	arg01, local06
02368     10 5E 06 F1 | 	add	arg01, #16
0236c     01 00 00 FF 
02370     E3 FA 85 F1 | 	sub	objptr, ##739
02374     FD 60 E2 FA | 	rdword	arg02, objptr
02378     07 00 00 FF 
0237c     01 FB 85 F1 | 	sub	objptr, ##3841
02380     0F 60 46 F7 | 	zerox	arg02, #15
02384                 | ' asm
02384     2F 61 62 FC | 	wrlong	arg02, arg01
02388                 | LR__0040
02388     60 5E 06 F6 | 	mov	arg01, #96
0238c     08 00 00 FF 
02390     E4 FB 05 F1 | 	add	objptr, ##4580
02394     FD 76 02 FB | 	rdlong	local06, objptr
02398     3B 5F 02 F1 | 	add	arg01, local06
0239c     14 5E 06 F1 | 	add	arg01, #20
023a0     01 00 00 FF 
023a4     99 FA 85 F1 | 	sub	objptr, ##665
023a8     FD 76 02 FB | 	rdlong	local06, objptr
023ac     10 FA 05 F1 | 	add	objptr, #16
023b0     FD 78 02 FB | 	rdlong	local07, objptr
023b4     3C 77 02 F1 | 	add	local06, local07
023b8     33 FB 85 F1 | 	sub	objptr, #307
023bc     FD 7C 02 FB | 	rdlong	local09, objptr
023c0     3E 77 02 FD | 	qmul	local06, local09
023c4     18 60 62 FD | 	getqx	arg02
023c8                 | ' asm
023c8     2F 61 52 FC | 	wrword	arg02, arg01
023cc     60 5E 06 F6 | 	mov	arg01, #96
023d0     01 00 00 FF 
023d4     BC FB 05 F1 | 	add	objptr, ##956
023d8     FD 76 02 FB | 	rdlong	local06, objptr
023dc     3B 5F 02 F1 | 	add	arg01, local06
023e0     16 5E 06 F1 | 	add	arg01, #22
023e4                 | ' asm
023e4     0C 00 80 FF 
023e8     2F 01 58 FC | 	wrword	##6144, arg01
023ec     60 5E 06 F6 | 	mov	arg01, #96
023f0     FD 76 02 FB | 	rdlong	local06, objptr
023f4     3B 5F 02 F1 | 	add	arg01, local06
023f8     18 5E 06 F1 | 	add	arg01, #24
023fc     01 00 00 FF 
02400     B9 FA 85 F1 | 	sub	objptr, ##697
02404     FD 60 02 FB | 	rdlong	arg02, objptr
02408     10 FA 05 F1 | 	add	objptr, #16
0240c     FD 78 02 FB | 	rdlong	local07, objptr
02410     3C 61 02 F1 | 	add	arg02, local07
02414                 | ' asm
02414     2F 61 52 FC | 	wrword	arg02, arg01
02418     60 5E 06 F6 | 	mov	arg01, #96
0241c     01 00 00 FF 
02420     A9 FA 05 F1 | 	add	objptr, ##681
02424     FD 76 02 FB | 	rdlong	local06, objptr
02428     08 00 00 FF 
0242c     E4 FB 85 F1 | 	sub	objptr, ##4580
02430     3B 5F 02 F1 | 	add	arg01, local06
02434     1A 5E 06 F1 | 	add	arg01, #26
02438     01 60 06 F6 | 	mov	arg02, #1
0243c                 | ' asm
0243c     2F 03 58 FC | 	wrword	#1, arg01
02440     68 E4 BF FD | 	call	#_test
02444     40 FA 9F FD | 	jmp	#LR__0036
02448     AF F0 03 F6 | 	mov	ptra, fp
0244c     BA 00 A0 FD | 	call	#popregs_
02450                 | _program_ret
02450     2D 00 64 FD | 	ret
02454                 | 
02454                 | ' 
02454                 | ' '------------------------------
02454                 | ' 
02454                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
02454                 | _hng030rm_spin2_fcircle
02454     0A 5A 05 F6 | 	mov	COUNT_, #10
02458     B0 00 A0 FD | 	call	#pushregs_
0245c     2F 6D 02 F6 | 	mov	local01, arg01
02460     30 6F 02 F6 | 	mov	local02, arg02
02464     31 71 02 F6 | 	mov	local03, arg03
02468     32 73 02 F6 | 	mov	local04, arg04
0246c                 | ' 
0246c                 | ' d:=5-4*r
0246c     38 75 02 F6 | 	mov	local05, local03
02470     02 74 66 F0 | 	shl	local05, #2
02474     05 76 06 F6 | 	mov	local06, #5
02478     3A 77 82 F1 | 	sub	local06, local05
0247c                 | ' x:=0
0247c     00 78 06 F6 | 	mov	local07, #0
02480                 | ' y:=r
02480     38 7B 02 F6 | 	mov	local08, local03
02484                 | ' da:=(-2*r+5)*4
02484     FF FF 7F FF 
02488     FE 71 06 FD | 	qmul	local03, ##-2
0248c     18 7C 62 FD | 	getqx	local09
02490     05 7C 06 F1 | 	add	local09, #5
02494     02 7C 66 F0 | 	shl	local09, #2
02498                 | ' db:=3*4
02498     0C 7E 06 F6 | 	mov	local10, #12
0249c                 | ' repeat while (x<=y) 
0249c                 | LR__0041
0249c     3D 79 5A F2 | 	cmps	local07, local08 wcz
024a0     D4 00 90 1D |  if_a	jmp	#LR__0043
024a4                 | '   line(x0-x,y0-y,x0+x,y0-y,c)
024a4     36 5F 02 F6 | 	mov	arg01, local01
024a8     3C 5F 82 F1 | 	sub	arg01, local07
024ac     37 61 02 F6 | 	mov	arg02, local02
024b0     3D 61 82 F1 | 	sub	arg02, local08
024b4     36 63 02 F6 | 	mov	arg03, local01
024b8     3C 63 02 F1 | 	add	arg03, local07
024bc     37 65 02 F6 | 	mov	arg04, local02
024c0     3D 65 82 F1 | 	sub	arg04, local08
024c4     39 67 02 F6 | 	mov	arg05, local04
024c8     B8 00 B0 FD | 	call	#_hng030rm_spin2_line
024cc                 | '   line(x0-x,y0+y,x0+x,y0+y,c)
024cc     36 5F 02 F6 | 	mov	arg01, local01
024d0     3C 5F 82 F1 | 	sub	arg01, local07
024d4     37 61 02 F6 | 	mov	arg02, local02
024d8     3D 61 02 F1 | 	add	arg02, local08
024dc     36 63 02 F6 | 	mov	arg03, local01
024e0     3C 63 02 F1 | 	add	arg03, local07
024e4     37 65 02 F6 | 	mov	arg04, local02
024e8     3D 65 02 F1 | 	add	arg04, local08
024ec     39 67 02 F6 | 	mov	arg05, local04
024f0     90 00 B0 FD | 	call	#_hng030rm_spin2_line
024f4                 | '   line(x0-y,y0-x,x0+y,y0-x,c)
024f4     36 5F 02 F6 | 	mov	arg01, local01
024f8     3D 5F 82 F1 | 	sub	arg01, local08
024fc     37 61 02 F6 | 	mov	arg02, local02
02500     3C 61 82 F1 | 	sub	arg02, local07
02504     36 63 02 F6 | 	mov	arg03, local01
02508     3D 63 02 F1 | 	add	arg03, local08
0250c     37 65 02 F6 | 	mov	arg04, local02
02510     3C 65 82 F1 | 	sub	arg04, local07
02514     39 67 02 F6 | 	mov	arg05, local04
02518     68 00 B0 FD | 	call	#_hng030rm_spin2_line
0251c                 | '   line(x0-y,y0+x,x0+y,y0+x,c)
0251c     36 5F 02 F6 | 	mov	arg01, local01
02520     3D 5F 82 F1 | 	sub	arg01, local08
02524     37 61 02 F6 | 	mov	arg02, local02
02528     3C 61 02 F1 | 	add	arg02, local07
0252c     36 63 02 F6 | 	mov	arg03, local01
02530     3D 63 02 F1 | 	add	arg03, local08
02534     37 65 02 F6 | 	mov	arg04, local02
02538     3C 65 02 F1 | 	add	arg04, local07
0253c     39 67 02 F6 | 	mov	arg05, local04
02540     40 00 B0 FD | 	call	#_hng030rm_spin2_line
02544                 | '   if d>0 
02544     00 76 5E F2 | 	cmps	local06, #0 wcz
02548     18 00 90 ED |  if_be	jmp	#LR__0042
0254c                 | '     d+=da
0254c     3E 77 02 F1 | 	add	local06, local09
02550                 | '     y-=1
02550     01 7A 86 F1 | 	sub	local08, #1
02554                 | '     x+=1
02554     01 78 06 F1 | 	add	local07, #1
02558                 | '     da+=4*4
02558     10 7C 06 F1 | 	add	local09, #16
0255c                 | '     db+=2*4
0255c     08 7E 06 F1 | 	add	local10, #8
02560                 | '   else
02560     38 FF 9F FD | 	jmp	#LR__0041
02564                 | LR__0042
02564                 | '     d+=db
02564     3F 77 02 F1 | 	add	local06, local10
02568                 | '     x+=1
02568     01 78 06 F1 | 	add	local07, #1
0256c                 | '     da+=2*4
0256c     08 7C 06 F1 | 	add	local09, #8
02570                 | '     db+=2*4
02570     08 7E 06 F1 | 	add	local10, #8
02574     24 FF 9F FD | 	jmp	#LR__0041
02578                 | LR__0043
02578     AF F0 03 F6 | 	mov	ptra, fp
0257c     BA 00 A0 FD | 	call	#popregs_
02580                 | _hng030rm_spin2_fcircle_ret
02580     2D 00 64 FD | 	ret
02584                 | 
02584                 | ' 
02584                 | ' pub line(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y
02584                 | _hng030rm_spin2_line
02584     12 5A 05 F6 | 	mov	COUNT_, #18
02588     B0 00 A0 FD | 	call	#pushregs_
0258c     2F 6D 02 F6 | 	mov	local01, arg01
02590     30 6F 02 F6 | 	mov	local02, arg02
02594     31 71 02 F6 | 	mov	local03, arg03
02598     32 73 02 F6 | 	mov	local04, arg04
0259c     33 75 02 F6 | 	mov	local05, arg05
025a0                 | ' 
025a0                 | ' 
025a0                 | ' x:=x1
025a0     36 77 02 F6 | 	mov	local06, local01
025a4                 | ' y:=y1
025a4     37 79 02 F6 | 	mov	local07, local02
025a8                 | ' 
025a8                 | ' if (x1<x2) 
025a8     38 6D 5A F2 | 	cmps	local01, local03 wcz
025ac     10 00 90 3D |  if_ae	jmp	#LR__0044
025b0                 | '   xi:=1
025b0     01 7A 06 F6 | 	mov	local08, #1
025b4                 | '   dx:=x2-x1
025b4     38 7D 02 F6 | 	mov	local09, local03
025b8     36 7D 82 F1 | 	sub	local09, local01
025bc                 | ' else
025bc     0C 00 90 FD | 	jmp	#LR__0045
025c0                 | LR__0044
025c0                 | '   xi:=-1
025c0     01 7A 66 F6 | 	neg	local08, #1
025c4                 | '   dx:=x1-x2
025c4     38 6D 82 F1 | 	sub	local01, local03
025c8     36 7D 02 F6 | 	mov	local09, local01
025cc                 | LR__0045
025cc                 | '   
025cc                 | ' if (y1<y2) 
025cc     39 6F 5A F2 | 	cmps	local02, local04 wcz
025d0     10 00 90 3D |  if_ae	jmp	#LR__0046
025d4                 | '   yi:=1
025d4     01 7E 06 F6 | 	mov	local10, #1
025d8                 | '   dy:=y2-y1
025d8     39 81 02 F6 | 	mov	local11, local04
025dc     37 81 82 F1 | 	sub	local11, local02
025e0                 | ' else
025e0     0C 00 90 FD | 	jmp	#LR__0047
025e4                 | LR__0046
025e4                 | '   yi:=-1
025e4     01 7E 66 F6 | 	neg	local10, #1
025e8                 | '   dy:=y1-y2
025e8     39 6F 82 F1 | 	sub	local02, local04
025ec     37 81 02 F6 | 	mov	local11, local02
025f0                 | LR__0047
025f0                 | ' 
025f0                 | ' putpixel(x,y,c)
025f0     D8 FA 05 F1 | 	add	objptr, #216
025f4     FD 82 02 FB | 	rdlong	local12, objptr
025f8     D8 FA 85 F1 | 	sub	objptr, #216
025fc     41 85 02 FB | 	rdlong	local13, local12
02600     04 82 06 F1 | 	add	local12, #4
02604     41 87 02 FB | 	rdlong	local14, local12
02608     3B 5F 02 F6 | 	mov	arg01, local06
0260c     3C 61 02 F6 | 	mov	arg02, local07
02610     3A 63 02 F6 | 	mov	arg03, local05
02614     FD 88 02 F6 | 	mov	local15, objptr
02618     42 FB 01 F6 | 	mov	objptr, local13
0261c     2D 86 62 FD | 	call	local14
02620     44 FB 01 F6 | 	mov	objptr, local15
02624                 | ' 
02624                 | ' if (dx>dy)
02624     40 7D 5A F2 | 	cmps	local09, local11 wcz
02628     7C 00 90 ED |  if_be	jmp	#LR__0051
0262c                 | '   ai:=(dy-dx)*2
0262c     40 8B 02 F6 | 	mov	local16, local11
02630     3E 8B 82 F1 | 	sub	local16, local09
02634     01 8A 66 F0 | 	shl	local16, #1
02638                 | '   bi:=dy*2
02638     01 80 66 F0 | 	shl	local11, #1
0263c     40 8D 02 F6 | 	mov	local17, local11
02640                 | '   d:= bi-dx
02640     46 8F 02 F6 | 	mov	local18, local17
02644     3E 8F 82 F1 | 	sub	local18, local09
02648                 | '   repeat while (x<>x2) 
02648                 | LR__0048
02648     38 77 0A F2 | 	cmp	local06, local03 wz
0264c     D4 00 90 AD |  if_e	jmp	#LR__0056
02650                 | '     if (d>=0) 
02650     00 8E 5E F2 | 	cmps	local18, #0 wcz
02654     10 00 90 CD |  if_b	jmp	#LR__0049
02658                 | '       x+=xi
02658     3D 77 02 F1 | 	add	local06, local08
0265c                 | '       y+=yi
0265c     3F 79 02 F1 | 	add	local07, local10
02660                 | '       d+=ai
02660     45 8F 02 F1 | 	add	local18, local16
02664                 | '     else
02664     08 00 90 FD | 	jmp	#LR__0050
02668                 | LR__0049
02668                 | '       d+=bi
02668     46 8F 02 F1 | 	add	local18, local17
0266c                 | '       x+=xi
0266c     3D 77 02 F1 | 	add	local06, local08
02670                 | LR__0050
02670                 | '     putpixel(x,y,c)
02670     D8 FA 05 F1 | 	add	objptr, #216
02674     FD 82 02 FB | 	rdlong	local12, objptr
02678     D8 FA 85 F1 | 	sub	objptr, #216
0267c     41 85 02 FB | 	rdlong	local13, local12
02680     04 82 06 F1 | 	add	local12, #4
02684     41 87 02 FB | 	rdlong	local14, local12
02688     3B 5F 02 F6 | 	mov	arg01, local06
0268c     3C 61 02 F6 | 	mov	arg02, local07
02690     3A 63 02 F6 | 	mov	arg03, local05
02694     FD 88 02 F6 | 	mov	local15, objptr
02698     42 FB 01 F6 | 	mov	objptr, local13
0269c     2D 86 62 FD | 	call	local14
026a0     44 FB 01 F6 | 	mov	objptr, local15
026a4     A0 FF 9F FD | 	jmp	#LR__0048
026a8                 | ' else
026a8                 | LR__0051
026a8                 | '   ai:=(dx-dy)*2
026a8     3E 8B 02 F6 | 	mov	local16, local09
026ac     40 8B 82 F1 | 	sub	local16, local11
026b0     01 8A 66 F0 | 	shl	local16, #1
026b4                 | '   bi:=dx*2
026b4     01 7C 66 F0 | 	shl	local09, #1
026b8     3E 8D 02 F6 | 	mov	local17, local09
026bc                 | '   d:=bi-dy
026bc     46 8F 02 F6 | 	mov	local18, local17
026c0     40 8F 82 F1 | 	sub	local18, local11
026c4                 | '   repeat while (y<>y2)
026c4                 | LR__0052
026c4     39 79 0A F2 | 	cmp	local07, local04 wz
026c8     58 00 90 AD |  if_e	jmp	#LR__0055
026cc                 | '     if (d>=0)
026cc     00 8E 5E F2 | 	cmps	local18, #0 wcz
026d0     10 00 90 CD |  if_b	jmp	#LR__0053
026d4                 | '       x+=xi
026d4     3D 77 02 F1 | 	add	local06, local08
026d8                 | '       y+=yi
026d8     3F 79 02 F1 | 	add	local07, local10
026dc                 | '       d+=ai
026dc     45 8F 02 F1 | 	add	local18, local16
026e0                 | '     else
026e0     08 00 90 FD | 	jmp	#LR__0054
026e4                 | LR__0053
026e4                 | '       d+=bi
026e4     46 8F 02 F1 | 	add	local18, local17
026e8                 | '       y+=yi
026e8     3F 79 02 F1 | 	add	local07, local10
026ec                 | LR__0054
026ec                 | '     putpixel(x, y,c)
026ec     D8 FA 05 F1 | 	add	objptr, #216
026f0     FD 82 02 FB | 	rdlong	local12, objptr
026f4     D8 FA 85 F1 | 	sub	objptr, #216
026f8     41 85 02 FB | 	rdlong	local13, local12
026fc     04 82 06 F1 | 	add	local12, #4
02700     41 87 02 FB | 	rdlong	local14, local12
02704     3B 5F 02 F6 | 	mov	arg01, local06
02708     3C 61 02 F6 | 	mov	arg02, local07
0270c     3A 63 02 F6 | 	mov	arg03, local05
02710     FD 88 02 F6 | 	mov	local15, objptr
02714     42 FB 01 F6 | 	mov	objptr, local13
02718     2D 86 62 FD | 	call	local14
0271c     44 FB 01 F6 | 	mov	objptr, local15
02720     A0 FF 9F FD | 	jmp	#LR__0052
02724                 | LR__0055
02724                 | LR__0056
02724     AF F0 03 F6 | 	mov	ptra, fp
02728     BA 00 A0 FD | 	call	#popregs_
0272c                 | _hng030rm_spin2_line_ret
0272c     2D 00 64 FD | 	ret
02730                 | 
02730                 | ' 
02730                 | ' pub putcharxycg(x,y,achar,f,b) |xx, yy,bb
02730                 | _hng030rm_spin2_putcharxycg
02730     0D 5A 05 F6 | 	mov	COUNT_, #13
02734     B0 00 A0 FD | 	call	#pushregs_
02738     2F 6D 02 F6 | 	mov	local01, arg01
0273c     30 6F 02 F6 | 	mov	local02, arg02
02740     31 71 02 F6 | 	mov	local03, arg03
02744     32 73 02 F6 | 	mov	local04, arg04
02748     33 75 02 F6 | 	mov	local05, arg05
0274c                 | ' 
0274c                 | ' repeat yy from 0 to 15
0274c     00 76 06 F6 | 	mov	local06, #0
02750                 | LR__0057
02750                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
02750     03 79 02 F6 | 	mov	local07, ptr__hng030rm_spin2_dat__
02754     C8 FA 05 F1 | 	add	objptr, #200
02758     FD 7A 02 FB | 	rdlong	local08, objptr
0275c     C8 FA 85 F1 | 	sub	objptr, #200
02760     0A 7A 66 F0 | 	shl	local08, #10
02764     3D 79 02 F1 | 	add	local07, local08
02768     38 7D 02 F6 | 	mov	local09, local03
0276c     04 7C 66 F0 | 	shl	local09, #4
02770     3E 79 02 F1 | 	add	local07, local09
02774     3B 79 02 F1 | 	add	local07, local06
02778     3C 7F C2 FA | 	rdbyte	local10, local07
0277c                 | '   repeat xx from 0 to 7
0277c     00 80 06 F6 | 	mov	local11, #0
02780                 | LR__0058
02780                 | '     if (bb&(1<<xx))<>0
02780     40 83 C2 F9 | 	decod	local12, local11
02784     41 7F CA F7 | 	test	local10, local12 wz
02788     40 00 90 AD |  if_e	jmp	#LR__0059
0278c                 | '       putpixel(xx+x,yy+y,f)
0278c     D8 FA 05 F1 | 	add	objptr, #216
02790     FD 78 02 FB | 	rdlong	local07, objptr
02794     D8 FA 85 F1 | 	sub	objptr, #216
02798     3C 83 02 FB | 	rdlong	local12, local07
0279c     04 78 06 F1 | 	add	local07, #4
027a0     3C 7B 02 FB | 	rdlong	local08, local07
027a4     40 5F 02 F6 | 	mov	arg01, local11
027a8     36 5F 02 F1 | 	add	arg01, local01
027ac     3B 61 02 F6 | 	mov	arg02, local06
027b0     37 61 02 F1 | 	add	arg02, local02
027b4     39 63 02 F6 | 	mov	arg03, local04
027b8     FD 84 02 F6 | 	mov	local13, objptr
027bc     41 FB 01 F6 | 	mov	objptr, local12
027c0     2D 7A 62 FD | 	call	local08
027c4     42 FB 01 F6 | 	mov	objptr, local13
027c8                 | '     else
027c8     3C 00 90 FD | 	jmp	#LR__0060
027cc                 | LR__0059
027cc                 | '       putpixel(xx+x,yy+y,b)
027cc     D8 FA 05 F1 | 	add	objptr, #216
027d0     FD 78 02 FB | 	rdlong	local07, objptr
027d4     D8 FA 85 F1 | 	sub	objptr, #216
027d8     3C 83 02 FB | 	rdlong	local12, local07
027dc     04 78 06 F1 | 	add	local07, #4
027e0     3C 7B 02 FB | 	rdlong	local08, local07
027e4     40 5F 02 F6 | 	mov	arg01, local11
027e8     36 5F 02 F1 | 	add	arg01, local01
027ec     3B 61 02 F6 | 	mov	arg02, local06
027f0     37 61 02 F1 | 	add	arg02, local02
027f4     3A 63 02 F6 | 	mov	arg03, local05
027f8     FD 84 02 F6 | 	mov	local13, objptr
027fc     41 FB 01 F6 | 	mov	objptr, local12
02800     2D 7A 62 FD | 	call	local08
02804     42 FB 01 F6 | 	mov	objptr, local13
02808                 | LR__0060
02808     01 80 06 F1 | 	add	local11, #1
0280c     08 80 5E F2 | 	cmps	local11, #8 wcz
02810     6C FF 9F CD |  if_b	jmp	#LR__0058
02814     01 76 06 F1 | 	add	local06, #1
02818     10 76 5E F2 | 	cmps	local06, #16 wcz
0281c     30 FF 9F CD |  if_b	jmp	#LR__0057
02820     AF F0 03 F6 | 	mov	ptra, fp
02824     BA 00 A0 FD | 	call	#popregs_
02828                 | _hng030rm_spin2_putcharxycg_ret
02828     2D 00 64 FD | 	ret
0282c                 | 
0282c                 | ' 
0282c                 | ' pub outtextxycg(x,y,text,f,b) | iii,c
0282c                 | _hng030rm_spin2_outtextxycg
0282c     0C 5A 05 F6 | 	mov	COUNT_, #12
02830     B0 00 A0 FD | 	call	#pushregs_
02834     2F 6D 02 F6 | 	mov	local01, arg01
02838     30 6F 02 F6 | 	mov	local02, arg02
0283c     31 71 02 F6 | 	mov	local03, arg03
02840     32 73 02 F6 | 	mov	local04, arg04
02844     33 75 02 F6 | 	mov	local05, arg05
02848                 | ' 
02848                 | ' repeat iii from 0 to strsize(text)-1
02848     00 76 06 F6 | 	mov	local06, #0
0284c     38 5F 02 F6 | 	mov	arg01, local03
02850     00 78 06 F6 | 	mov	local07, #0
02854     B8 D7 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
02858     93 00 A0 FD | 	call	#FCACHE_LOAD_
0285c                 | LR__0061
0285c     2F 7B CA FA | 	rdbyte	local08, arg01 wz
02860     01 78 06 51 |  if_ne	add	local07, #1
02864     01 5E 06 51 |  if_ne	add	arg01, #1
02868     F0 FF 9F 5D |  if_ne	jmp	#LR__0061
0286c                 | LR__0062
0286c     3C 19 02 F6 | 	mov	result1, local07
02870     0C 7D 02 F6 | 	mov	local09, result1
02874     01 7C 86 F1 | 	sub	local09, #1
02878     00 7C 5E F2 | 	cmps	local09, #0 wcz
0287c     01 7E 06 16 |  if_a	mov	local10, #1
02880     01 7E 66 E6 |  if_be	neg	local10, #1
02884     3F 7D 02 F1 | 	add	local09, local10
02888                 | LR__0063
02888                 | '   putcharxycg(x+8*iii,y,byte[text+iii],f,b)
02888     36 5F 02 F6 | 	mov	arg01, local01
0288c     3B 81 02 F6 | 	mov	local11, local06
02890     03 80 66 F0 | 	shl	local11, #3
02894     40 5F 02 F1 | 	add	arg01, local11
02898     37 61 02 F6 | 	mov	arg02, local02
0289c     38 83 02 F6 | 	mov	local12, local03
028a0     3B 83 02 F1 | 	add	local12, local06
028a4     41 63 C2 FA | 	rdbyte	arg03, local12
028a8     39 65 02 F6 | 	mov	arg04, local04
028ac     3A 67 02 F6 | 	mov	arg05, local05
028b0     7C FE BF FD | 	call	#_hng030rm_spin2_putcharxycg
028b4     3F 77 02 F1 | 	add	local06, local10
028b8     3E 77 0A F2 | 	cmp	local06, local09 wz
028bc     C8 FF 9F 5D |  if_ne	jmp	#LR__0063
028c0     AF F0 03 F6 | 	mov	ptra, fp
028c4     BA 00 A0 FD | 	call	#popregs_
028c8                 | _hng030rm_spin2_outtextxycg_ret
028c8     2D 00 64 FD | 	ret
028cc                 | 
028cc                 | ' 
028cc                 | ' 
028cc                 | ' ''---------- putpixel - put a pixel on the screen
028cc                 | ' 
028cc                 | ' pub putpixel1(x,y,c) |byte b
028cc                 | _hng030rm_spin2_putpixel1
028cc                 | ' 
028cc                 | ' 
028cc                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
028cc     00 1E 06 F6 | 	mov	_var01, #0
028d0     00 5E 5E F2 | 	cmps	arg01, #0 wcz
028d4     01 1E 66 36 |  if_ae	neg	_var01, #1
028d8     00 20 06 F6 | 	mov	_var02, #0
028dc     90 FA 05 F1 | 	add	objptr, #144
028e0     FD 22 02 FB | 	rdlong	_var03, objptr
028e4     05 22 66 F0 | 	shl	_var03, #5
028e8     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
028ec     01 20 66 C6 |  if_b	neg	_var02, #1
028f0     10 1F 02 F5 | 	and	_var01, _var02
028f4     00 24 06 F6 | 	mov	_var04, #0
028f8     00 60 5E F2 | 	cmps	arg02, #0 wcz
028fc     01 24 66 36 |  if_ae	neg	_var04, #1
02900     12 1F 02 F5 | 	and	_var01, _var04
02904     00 26 06 F6 | 	mov	_var05, #0
02908     04 FA 05 F1 | 	add	objptr, #4
0290c     FD 28 02 FB | 	rdlong	_var06, objptr
02910     94 FA 85 F1 | 	sub	objptr, #148
02914     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02918     01 26 66 C6 |  if_b	neg	_var05, #1
0291c     13 1F CA F7 | 	test	_var01, _var05 wz
02920     90 00 90 AD |  if_e	jmp	#LR__0066
02924                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
02924     FD 1E 02 FB | 	rdlong	_var01, objptr
02928     90 FA 05 F1 | 	add	objptr, #144
0292c     FD 20 02 FB | 	rdlong	_var02, objptr
02930     90 FA 85 F1 | 	sub	objptr, #144
02934     02 20 66 F0 | 	shl	_var02, #2
02938     30 21 02 FD | 	qmul	_var02, arg02
0293c     18 2A 62 FD | 	getqx	_var07
02940     15 1F 02 F1 | 	add	_var01, _var07
02944     2F 25 02 F6 | 	mov	_var04, arg01
02948     03 24 46 F0 | 	shr	_var04, #3
0294c     12 1F 02 F1 | 	add	_var01, _var04
02950     0F 2D C2 FA | 	rdbyte	_var08, _var01
02954                 | '     if (c==0)
02954     00 62 0E F2 | 	cmp	arg03, #0 wz
02958     18 00 90 5D |  if_ne	jmp	#LR__0064
0295c                 | '       b:=b & !(1<<(x//8))
0295c     2F 23 52 F6 | 	abs	_var03, arg01 wc
02960     07 22 06 F5 | 	and	_var03, #7
02964     11 23 62 C6 |  if_b	neg	_var03, _var03
02968     11 21 C2 F9 | 	decod	_var02, _var03
0296c     10 2D 22 F5 | 	andn	_var08, _var02
02970                 | '     else
02970     14 00 90 FD | 	jmp	#LR__0065
02974                 | LR__0064
02974                 | '       b:=b |(1<<(x//8))
02974     2F 23 52 F6 | 	abs	_var03, arg01 wc
02978     07 22 06 F5 | 	and	_var03, #7
0297c     11 23 62 C6 |  if_b	neg	_var03, _var03
02980     11 21 C2 F9 | 	decod	_var02, _var03
02984     10 2D 42 F5 | 	or	_var08, _var02
02988                 | LR__0065
02988                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
02988     FD 1E 02 FB | 	rdlong	_var01, objptr
0298c     90 FA 05 F1 | 	add	objptr, #144
02990     FD 20 02 FB | 	rdlong	_var02, objptr
02994     90 FA 85 F1 | 	sub	objptr, #144
02998     02 20 66 F0 | 	shl	_var02, #2
0299c     30 21 02 FD | 	qmul	_var02, arg02
029a0     18 2A 62 FD | 	getqx	_var07
029a4     15 1F 02 F1 | 	add	_var01, _var07
029a8     03 5E 46 F0 | 	shr	arg01, #3
029ac     2F 1F 02 F1 | 	add	_var01, arg01
029b0     0F 2D 42 FC | 	wrbyte	_var08, _var01
029b4                 | LR__0066
029b4                 | _hng030rm_spin2_putpixel1_ret
029b4     2D 00 64 FD | 	ret
029b8                 | 
029b8                 | ' 
029b8                 | ' 
029b8                 | ' pub putpixel2(x,y,c) |byte b
029b8                 | _hng030rm_spin2_putpixel2
029b8     2F 1F 02 F6 | 	mov	_var01, arg01
029bc     30 21 02 F6 | 	mov	_var02, arg02
029c0     31 23 02 F6 | 	mov	_var03, arg03
029c4                 | ' 
029c4                 | ' 
029c4                 | ' if ((x>=0) && (x<16*cpl) && (y>=0) && (y<lines))
029c4     00 1E 5E F2 | 	cmps	_var01, #0 wcz
029c8     C8 00 90 CD |  if_b	jmp	#LR__0067
029cc     90 FA 05 F1 | 	add	objptr, #144
029d0     FD 24 02 FB | 	rdlong	_var04, objptr
029d4     90 FA 85 F1 | 	sub	objptr, #144
029d8     04 24 66 F0 | 	shl	_var04, #4
029dc     12 1F 5A F2 | 	cmps	_var01, _var04 wcz
029e0     B0 00 90 3D |  if_ae	jmp	#LR__0067
029e4     00 20 5E F2 | 	cmps	_var02, #0 wcz
029e8     A8 00 90 CD |  if_b	jmp	#LR__0067
029ec     94 FA 05 F1 | 	add	objptr, #148
029f0     FD 26 02 FB | 	rdlong	_var05, objptr
029f4     94 FA 85 F1 | 	sub	objptr, #148
029f8     13 21 5A F2 | 	cmps	_var02, _var05 wcz
029fc     94 00 90 3D |  if_ae	jmp	#LR__0067
02a00                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02a00     FD 24 02 FB | 	rdlong	_var04, objptr
02a04     90 FA 05 F1 | 	add	objptr, #144
02a08     FD 28 02 FB | 	rdlong	_var06, objptr
02a0c     90 FA 85 F1 | 	sub	objptr, #144
02a10     02 28 66 F0 | 	shl	_var06, #2
02a14     10 29 02 FD | 	qmul	_var06, _var02
02a18     18 2A 62 FD | 	getqx	_var07
02a1c     15 25 02 F1 | 	add	_var04, _var07
02a20     0F 2D 02 F6 | 	mov	_var08, _var01
02a24     02 2C 46 F0 | 	shr	_var08, #2
02a28     16 25 02 F1 | 	add	_var04, _var08
02a2c     12 2F C2 FA | 	rdbyte	_var09, _var04
02a30                 | '     b:=b & !(%11<<((x//4)<<1))
02a30     0F 31 52 F6 | 	abs	_var10, _var01 wc
02a34     03 30 06 F5 | 	and	_var10, #3
02a38     18 31 62 C6 |  if_b	neg	_var10, _var10
02a3c     01 30 66 F0 | 	shl	_var10, #1
02a40     03 28 06 F6 | 	mov	_var06, #3
02a44     18 29 62 F0 | 	shl	_var06, _var10
02a48     14 2F 22 F5 | 	andn	_var09, _var06
02a4c                 | '     b:=b |(c<<((x//4)<<1))
02a4c     0F 31 52 F6 | 	abs	_var10, _var01 wc
02a50     03 30 06 F5 | 	and	_var10, #3
02a54     18 31 62 C6 |  if_b	neg	_var10, _var10
02a58     01 30 66 F0 | 	shl	_var10, #1
02a5c     18 23 62 F0 | 	shl	_var03, _var10
02a60     11 2F 42 F5 | 	or	_var09, _var03
02a64                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
02a64     FD 24 02 FB | 	rdlong	_var04, objptr
02a68     90 FA 05 F1 | 	add	objptr, #144
02a6c     FD 28 02 FB | 	rdlong	_var06, objptr
02a70     90 FA 85 F1 | 	sub	objptr, #144
02a74     02 28 66 F0 | 	shl	_var06, #2
02a78     10 29 02 FD | 	qmul	_var06, _var02
02a7c     18 2A 62 FD | 	getqx	_var07
02a80     15 25 02 F1 | 	add	_var04, _var07
02a84     0F 2D 02 F6 | 	mov	_var08, _var01
02a88     02 2C 46 F0 | 	shr	_var08, #2
02a8c     16 25 02 F1 | 	add	_var04, _var08
02a90     12 2F 42 FC | 	wrbyte	_var09, _var04
02a94                 | LR__0067
02a94                 | _hng030rm_spin2_putpixel2_ret
02a94     2D 00 64 FD | 	ret
02a98                 | 
02a98                 | ' 
02a98                 | ' 
02a98                 | ' pub putpixel4(x,y,c) |byte b
02a98                 | _hng030rm_spin2_putpixel4
02a98                 | ' 
02a98                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02a98     00 1E 06 F6 | 	mov	_var01, #0
02a9c     00 5E 5E F2 | 	cmps	arg01, #0 wcz
02aa0     01 1E 66 36 |  if_ae	neg	_var01, #1
02aa4     00 20 06 F6 | 	mov	_var02, #0
02aa8     90 FA 05 F1 | 	add	objptr, #144
02aac     FD 22 02 FB | 	rdlong	_var03, objptr
02ab0     04 22 66 F0 | 	shl	_var03, #4
02ab4     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
02ab8     01 20 66 C6 |  if_b	neg	_var02, #1
02abc     10 1F 02 F5 | 	and	_var01, _var02
02ac0     00 24 06 F6 | 	mov	_var04, #0
02ac4     00 60 5E F2 | 	cmps	arg02, #0 wcz
02ac8     01 24 66 36 |  if_ae	neg	_var04, #1
02acc     12 1F 02 F5 | 	and	_var01, _var04
02ad0     00 26 06 F6 | 	mov	_var05, #0
02ad4     04 FA 05 F1 | 	add	objptr, #4
02ad8     FD 28 02 FB | 	rdlong	_var06, objptr
02adc     94 FA 85 F1 | 	sub	objptr, #148
02ae0     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02ae4     01 26 66 C6 |  if_b	neg	_var05, #1
02ae8     13 1F CA F7 | 	test	_var01, _var05 wz
02aec     90 00 90 AD |  if_e	jmp	#LR__0068
02af0                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02af0     FD 1E 02 FB | 	rdlong	_var01, objptr
02af4     90 FA 05 F1 | 	add	objptr, #144
02af8     FD 20 02 FB | 	rdlong	_var02, objptr
02afc     90 FA 85 F1 | 	sub	objptr, #144
02b00     02 20 66 F0 | 	shl	_var02, #2
02b04     30 21 02 FD | 	qmul	_var02, arg02
02b08     18 2A 62 FD | 	getqx	_var07
02b0c     15 1F 02 F1 | 	add	_var01, _var07
02b10     2F 25 02 F6 | 	mov	_var04, arg01
02b14     01 24 46 F0 | 	shr	_var04, #1
02b18     12 1F 02 F1 | 	add	_var01, _var04
02b1c     0F 2D C2 FA | 	rdbyte	_var08, _var01
02b20                 | '     b:=b & !(%1111<<((x//2)<<2))
02b20     2F 23 52 F6 | 	abs	_var03, arg01 wc
02b24     01 22 06 F5 | 	and	_var03, #1
02b28     11 23 62 C6 |  if_b	neg	_var03, _var03
02b2c     02 22 66 F0 | 	shl	_var03, #2
02b30     0F 20 06 F6 | 	mov	_var02, #15
02b34     11 21 62 F0 | 	shl	_var02, _var03
02b38     10 2D 22 F5 | 	andn	_var08, _var02
02b3c                 | '     b:=b |(c<<((x//2)<<2))
02b3c     2F 23 52 F6 | 	abs	_var03, arg01 wc
02b40     01 22 06 F5 | 	and	_var03, #1
02b44     11 23 62 C6 |  if_b	neg	_var03, _var03
02b48     02 22 66 F0 | 	shl	_var03, #2
02b4c     11 63 62 F0 | 	shl	arg03, _var03
02b50     31 2D 42 F5 | 	or	_var08, arg03
02b54                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
02b54     FD 1E 02 FB | 	rdlong	_var01, objptr
02b58     90 FA 05 F1 | 	add	objptr, #144
02b5c     FD 20 02 FB | 	rdlong	_var02, objptr
02b60     90 FA 85 F1 | 	sub	objptr, #144
02b64     02 20 66 F0 | 	shl	_var02, #2
02b68     30 21 02 FD | 	qmul	_var02, arg02
02b6c     18 2A 62 FD | 	getqx	_var07
02b70     15 1F 02 F1 | 	add	_var01, _var07
02b74     01 5E 46 F0 | 	shr	arg01, #1
02b78     2F 1F 02 F1 | 	add	_var01, arg01
02b7c     0F 2D 42 FC | 	wrbyte	_var08, _var01
02b80                 | LR__0068
02b80                 | _hng030rm_spin2_putpixel4_ret
02b80     2D 00 64 FD | 	ret
02b84                 | 
02b84                 | ' 
02b84                 | ' 
02b84                 | ' pub putpixel8(x,y,c)
02b84                 | _hng030rm_spin2_putpixel8
02b84                 | ' 
02b84                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02b84     00 1E 06 F6 | 	mov	_var01, #0
02b88     00 5E 5E F2 | 	cmps	arg01, #0 wcz
02b8c     01 1E 66 36 |  if_ae	neg	_var01, #1
02b90     00 20 06 F6 | 	mov	_var02, #0
02b94     90 FA 05 F1 | 	add	objptr, #144
02b98     FD 22 02 FB | 	rdlong	_var03, objptr
02b9c     02 22 66 F0 | 	shl	_var03, #2
02ba0     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
02ba4     01 20 66 C6 |  if_b	neg	_var02, #1
02ba8     10 1F 02 F5 | 	and	_var01, _var02
02bac     00 24 06 F6 | 	mov	_var04, #0
02bb0     00 60 5E F2 | 	cmps	arg02, #0 wcz
02bb4     01 24 66 36 |  if_ae	neg	_var04, #1
02bb8     12 1F 02 F5 | 	and	_var01, _var04
02bbc     00 26 06 F6 | 	mov	_var05, #0
02bc0     04 FA 05 F1 | 	add	objptr, #4
02bc4     FD 28 02 FB | 	rdlong	_var06, objptr
02bc8     94 FA 85 F1 | 	sub	objptr, #148
02bcc     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02bd0     01 26 66 C6 |  if_b	neg	_var05, #1
02bd4     13 1F CA F7 | 	test	_var01, _var05 wz
02bd8     28 00 90 AD |  if_e	jmp	#LR__0069
02bdc                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02bdc     FD 1E 02 FB | 	rdlong	_var01, objptr
02be0     90 FA 05 F1 | 	add	objptr, #144
02be4     FD 20 02 FB | 	rdlong	_var02, objptr
02be8     90 FA 85 F1 | 	sub	objptr, #144
02bec     02 20 66 F0 | 	shl	_var02, #2
02bf0     30 21 02 FD | 	qmul	_var02, arg02
02bf4     18 2A 62 FD | 	getqx	_var07
02bf8     15 1F 02 F1 | 	add	_var01, _var07
02bfc     2F 1F 02 F1 | 	add	_var01, arg01
02c00     0F 63 42 FC | 	wrbyte	arg03, _var01
02c04                 | LR__0069
02c04                 | _hng030rm_spin2_putpixel8_ret
02c04     2D 00 64 FD | 	ret
02c08                 | 
02c08                 | ' 
02c08                 | ' '*************************************************************************
02c08                 | ' '                                                                        *
02c08                 | ' '  VBlank functions                                                      *
02c08                 | ' '                                                                        *
02c08                 | ' '*************************************************************************
02c08                 | ' 
02c08                 | ' pub waitvbl(amount) | i
02c08                 | _hng030rm_spin2_waitvbl
02c08     04 5A 05 F6 | 	mov	COUNT_, #4
02c0c     B0 00 A0 FD | 	call	#pushregs_
02c10     2F 6D 02 F6 | 	mov	local01, arg01
02c14                 | ' 
02c14                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
02c14                 | ' 
02c14                 | ' repeat i from 1 to amount
02c14     01 6E 06 F6 | 	mov	local02, #1
02c18     01 6C 5E F2 | 	cmps	local01, #1 wcz
02c1c     01 70 06 16 |  if_a	mov	local03, #1
02c20     01 70 66 E6 |  if_be	neg	local03, #1
02c24     38 6D 02 F1 | 	add	local01, local03
02c28                 | LR__0070
02c28                 | '   repeat until vblank==0
02c28                 | LR__0071
02c28     40 FA 05 F1 | 	add	objptr, #64
02c2c     FD 72 0A FB | 	rdlong	local04, objptr wz
02c30     40 FA 85 F1 | 	sub	objptr, #64
02c34     0C 00 90 AD |  if_e	jmp	#LR__0072
02c38                 | '     waitus(100)
02c38     64 5E 06 F6 | 	mov	arg01, #100
02c3c     78 43 B0 FD | 	call	#__system___waitus
02c40     E4 FF 9F FD | 	jmp	#LR__0071
02c44                 | LR__0072
02c44                 | '   repeat until vblank==1
02c44                 | LR__0073
02c44     40 FA 05 F1 | 	add	objptr, #64
02c48     FD 72 02 FB | 	rdlong	local04, objptr
02c4c     40 FA 85 F1 | 	sub	objptr, #64
02c50     01 72 0E F2 | 	cmp	local04, #1 wz
02c54     0C 00 90 AD |  if_e	jmp	#LR__0074
02c58                 | '     waitus(100)
02c58     64 5E 06 F6 | 	mov	arg01, #100
02c5c     58 43 B0 FD | 	call	#__system___waitus
02c60     E0 FF 9F FD | 	jmp	#LR__0073
02c64                 | LR__0074
02c64     38 6F 02 F1 | 	add	local02, local03
02c68     36 6F 0A F2 | 	cmp	local02, local01 wz
02c6c     B8 FF 9F 5D |  if_ne	jmp	#LR__0070
02c70     AF F0 03 F6 | 	mov	ptra, fp
02c74     BA 00 A0 FD | 	call	#popregs_
02c78                 | _hng030rm_spin2_waitvbl_ret
02c78     2D 00 64 FD | 	ret
02c7c                 | 
02c7c                 | ' 
02c7c                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02c7c                 | ' 
02c7c                 | ' pub setbordercolor(r,g,b) | color
02c7c                 | _hng030rm_spin2_setbordercolor
02c7c                 | ' 
02c7c                 | ' color:=r<<24+g<<16+b<<8
02c7c     18 5E 66 F0 | 	shl	arg01, #24
02c80     10 60 66 F0 | 	shl	arg02, #16
02c84     30 5F 02 F1 | 	add	arg01, arg02
02c88     08 62 66 F0 | 	shl	arg03, #8
02c8c     31 5F 02 F1 | 	add	arg01, arg03
02c90                 | ' bordercolor:=color
02c90     2C FA 05 F1 | 	add	objptr, #44
02c94     FD 5E 62 FC | 	wrlong	arg01, objptr
02c98     2C FA 85 F1 | 	sub	objptr, #44
02c9c                 | _hng030rm_spin2_setbordercolor_ret
02c9c     2D 00 64 FD | 	ret
02ca0                 | 
02ca0                 | ' 
02ca0                 | ' ''---------- Set color #c in palette to r,g,b
02ca0                 | ' 
02ca0                 | ' pub setcolor(c,r,g,b)  |cc
02ca0                 | _hng030rm_spin2_setcolor
02ca0                 | ' 
02ca0                 | ' cc:=r<<24+g<<16+b<<8
02ca0     18 60 66 F0 | 	shl	arg02, #24
02ca4     10 62 66 F0 | 	shl	arg03, #16
02ca8     31 61 02 F1 | 	add	arg02, arg03
02cac     08 64 66 F0 | 	shl	arg04, #8
02cb0     32 61 02 F1 | 	add	arg02, arg04
02cb4                 | ' long[palette_ptr+4*c]:=cc
02cb4     18 FA 05 F1 | 	add	objptr, #24
02cb8     FD 1E 02 FB | 	rdlong	_var01, objptr
02cbc     18 FA 85 F1 | 	sub	objptr, #24
02cc0     02 5E 66 F0 | 	shl	arg01, #2
02cc4     2F 1F 02 F1 | 	add	_var01, arg01
02cc8     0F 61 62 FC | 	wrlong	arg02, _var01
02ccc                 | _hng030rm_spin2_setcolor_ret
02ccc     2D 00 64 FD | 	ret
02cd0                 | 
02cd0                 | ' 
02cd0                 | ' 
02cd0                 | ' '*************************************************************************
02cd0                 | ' '                                                                        *
02cd0                 | ' '  Text functions                                                        *
02cd0                 | ' '                                                                        *
02cd0                 | ' '*************************************************************************
02cd0                 | ' 
02cd0                 | ' ''---------- Clear the screen, set its foreground/background color
02cd0                 | ' 
02cd0                 | ' pub cls(fc,bc)   :c
02cd0                 | _hng030rm_spin2_cls
02cd0     06 5A 05 F6 | 	mov	COUNT_, #6
02cd4     B0 00 A0 FD | 	call	#pushregs_
02cd8     2F 6D 02 F6 | 	mov	local01, arg01
02cdc     30 6F 02 F6 | 	mov	local02, arg02
02ce0                 | ' 
02ce0                 | ' if (graphmode<512)
02ce0     C4 FA 05 F1 | 	add	objptr, #196
02ce4     FD 70 02 FB | 	rdlong	local03, objptr
02ce8     C4 FA 85 F1 | 	sub	objptr, #196
02cec     01 00 00 FF 
02cf0     00 70 5E F2 | 	cmps	local03, ##512 wcz
02cf4     34 00 90 3D |  if_ae	jmp	#LR__0075
02cf8                 | '   c:=fc<<24+bc<<16+$20
02cf8     36 73 02 F6 | 	mov	local04, local01
02cfc     18 72 66 F0 | 	shl	local04, #24
02d00     37 75 02 F6 | 	mov	local05, local02
02d04     10 74 66 F0 | 	shl	local05, #16
02d08     3A 73 02 F1 | 	add	local04, local05
02d0c     20 72 06 F1 | 	add	local04, #32
02d10                 | '   longfill(buf_ptr,c,buflen)
02d10     FD 5E 02 FB | 	rdlong	arg01, objptr
02d14     30 FA 05 F1 | 	add	objptr, #48
02d18     FD 62 02 FB | 	rdlong	arg03, objptr
02d1c     30 FA 85 F1 | 	sub	objptr, #48
02d20     39 61 02 F6 | 	mov	arg02, local04
02d24     A8 00 A0 FD | 	call	#\builtin_longfill_
02d28                 | ' else
02d28     AC 00 90 FD | 	jmp	#LR__0081
02d2c                 | LR__0075
02d2c                 | '   if (graphmode & 48) ==48
02d2c     C4 FA 05 F1 | 	add	objptr, #196
02d30     FD 70 02 FB | 	rdlong	local03, objptr
02d34     C4 FA 85 F1 | 	sub	objptr, #196
02d38     30 70 06 F5 | 	and	local03, #48
02d3c     30 70 0E F2 | 	cmp	local03, #48 wz
02d40                 | '     c:=bc
02d40     37 73 02 A6 |  if_e	mov	local04, local02
02d44     74 00 90 AD |  if_e	jmp	#LR__0080
02d48                 | '   elseif (graphmode & 48) ==32
02d48     C4 FA 05 F1 | 	add	objptr, #196
02d4c     FD 70 02 FB | 	rdlong	local03, objptr
02d50     C4 FA 85 F1 | 	sub	objptr, #196
02d54     30 70 06 F5 | 	and	local03, #48
02d58     20 70 0E F2 | 	cmp	local03, #32 wz
02d5c     10 00 90 5D |  if_ne	jmp	#LR__0076
02d60                 | '     c:=bc<<4+bc
02d60     37 73 02 F6 | 	mov	local04, local02
02d64     04 72 66 F0 | 	shl	local04, #4
02d68     37 73 02 F1 | 	add	local04, local02
02d6c     4C 00 90 FD | 	jmp	#LR__0079
02d70                 | LR__0076
02d70                 | '   elseif (graphmode & 48) ==16
02d70     C4 FA 05 F1 | 	add	objptr, #196
02d74     FD 70 02 FB | 	rdlong	local03, objptr
02d78     C4 FA 85 F1 | 	sub	objptr, #196
02d7c     30 70 06 F5 | 	and	local03, #48
02d80     10 70 0E F2 | 	cmp	local03, #16 wz
02d84     28 00 90 5D |  if_ne	jmp	#LR__0077
02d88                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02d88     37 73 02 F6 | 	mov	local04, local02
02d8c     06 72 66 F0 | 	shl	local04, #6
02d90     37 75 02 F6 | 	mov	local05, local02
02d94     04 74 66 F0 | 	shl	local05, #4
02d98     3A 73 02 F1 | 	add	local04, local05
02d9c     37 77 02 F6 | 	mov	local06, local02
02da0     02 76 66 F0 | 	shl	local06, #2
02da4     3B 73 02 F1 | 	add	local04, local06
02da8     37 73 02 F1 | 	add	local04, local02
02dac                 | '   else
02dac     0C 00 90 FD | 	jmp	#LR__0078
02db0                 | LR__0077
02db0                 | '     if bc==1
02db0     01 6E 0E F2 | 	cmp	local02, #1 wz
02db4                 | '       c:=255
02db4     FF 72 06 A6 |  if_e	mov	local04, #255
02db8                 | '     else
02db8                 | '       c:=0
02db8     00 72 06 56 |  if_ne	mov	local04, #0
02dbc                 | LR__0078
02dbc                 | LR__0079
02dbc                 | LR__0080
02dbc                 | '   bytefill(buf_ptr,c,buflen*4)
02dbc     FD 5E 02 FB | 	rdlong	arg01, objptr
02dc0     30 FA 05 F1 | 	add	objptr, #48
02dc4     FD 62 02 FB | 	rdlong	arg03, objptr
02dc8     30 FA 85 F1 | 	sub	objptr, #48
02dcc     02 62 66 F0 | 	shl	arg03, #2
02dd0     39 61 02 F6 | 	mov	arg02, local04
02dd4     A0 00 A0 FD | 	call	#\builtin_bytefill_
02dd8                 | LR__0081
02dd8                 | ' setwritecolors(fc,bc)
02dd8                 | ' 
02dd8                 | ' 
02dd8                 | ' write_color:=ff
02dd8     38 FA 05 F1 | 	add	objptr, #56
02ddc     FD 6C 62 FC | 	wrlong	local01, objptr
02de0                 | ' write_background:=bb
02de0     04 FA 05 F1 | 	add	objptr, #4
02de4     FD 6E 62 FC | 	wrlong	local02, objptr
02de8                 | ' cursor_x:=0
02de8     08 FA 85 F1 | 	sub	objptr, #8
02dec     FD 00 48 FC | 	wrbyte	#0, objptr
02df0                 | ' cursor_y:=0
02df0     01 FA 05 F1 | 	add	objptr, #1
02df4     FD 00 48 FC | 	wrbyte	#0, objptr
02df8     35 FA 85 F1 | 	sub	objptr, #53
02dfc     39 19 02 F6 | 	mov	result1, local04
02e00     AF F0 03 F6 | 	mov	ptra, fp
02e04     BA 00 A0 FD | 	call	#popregs_
02e08                 | _hng030rm_spin2_cls_ret
02e08     2D 00 64 FD | 	ret
02e0c                 | 
02e0c                 | ' 
02e0c                 | ' ''--------- Output a string at position x,y without changing colors
02e0c                 | ' 
02e0c                 | ' pub outtextxy(x,y,text) | iii
02e0c                 | _hng030rm_spin2_outtextxy
02e0c     0F 5A 05 F6 | 	mov	COUNT_, #15
02e10     B0 00 A0 FD | 	call	#pushregs_
02e14     2F 6D 02 F6 | 	mov	local01, arg01
02e18                 | ' 
02e18                 | ' repeat iii from 0 to strsize(text)-1
02e18     00 6E 06 F6 | 	mov	local02, #0
02e1c     31 5F 02 F6 | 	mov	arg01, arg03
02e20     00 70 06 F6 | 	mov	local03, #0
02e24     E8 D1 9F FE | 	loc	pa,	#(@LR__0083-@LR__0082)
02e28     93 00 A0 FD | 	call	#FCACHE_LOAD_
02e2c                 | LR__0082
02e2c     2F 73 CA FA | 	rdbyte	local04, arg01 wz
02e30     01 70 06 51 |  if_ne	add	local03, #1
02e34     01 5E 06 51 |  if_ne	add	arg01, #1
02e38     F0 FF 9F 5D |  if_ne	jmp	#LR__0082
02e3c                 | LR__0083
02e3c     38 19 02 F6 | 	mov	result1, local03
02e40     0C 75 02 F6 | 	mov	local05, result1
02e44     01 74 86 F1 | 	sub	local05, #1
02e48     00 74 5E F2 | 	cmps	local05, #0 wcz
02e4c     01 76 06 16 |  if_a	mov	local06, #1
02e50     01 76 66 E6 |  if_be	neg	local06, #1
02e54     3B 75 02 F1 | 	add	local05, local06
02e58     1C D2 9F FE | 	loc	pa,	#(@LR__0085-@LR__0084)
02e5c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02e60                 | LR__0084
02e60                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
02e60     FD 78 02 FB | 	rdlong	local07, objptr
02e64     90 FA 05 F1 | 	add	objptr, #144
02e68     FD 7A 02 FB | 	rdlong	local08, objptr
02e6c     90 FA 85 F1 | 	sub	objptr, #144
02e70     30 7B 02 FD | 	qmul	local08, arg02
02e74     18 7C 62 FD | 	getqx	local09
02e78     36 7D 02 F1 | 	add	local09, local01
02e7c     37 7D 02 F1 | 	add	local09, local02
02e80     02 7C 66 F0 | 	shl	local09, #2
02e84     3E 79 02 F1 | 	add	local07, local09
02e88     3C 7F 02 FB | 	rdlong	local10, local07
02e8c     FF 7E 26 F5 | 	andn	local10, #255
02e90     31 81 02 F6 | 	mov	local11, arg03
02e94     37 81 02 F1 | 	add	local11, local02
02e98     40 83 C2 FA | 	rdbyte	local12, local11
02e9c     41 7F 42 F5 | 	or	local10, local12
02ea0     FD 84 02 FB | 	rdlong	local13, objptr
02ea4     90 FA 05 F1 | 	add	objptr, #144
02ea8     FD 86 02 FB | 	rdlong	local14, objptr
02eac     90 FA 85 F1 | 	sub	objptr, #144
02eb0     30 87 02 FD | 	qmul	local14, arg02
02eb4     18 88 62 FD | 	getqx	local15
02eb8     36 89 02 F1 | 	add	local15, local01
02ebc     37 89 02 F1 | 	add	local15, local02
02ec0     02 88 66 F0 | 	shl	local15, #2
02ec4     44 85 02 F1 | 	add	local13, local15
02ec8     42 7F 62 FC | 	wrlong	local10, local13
02ecc     3B 6F 02 F1 | 	add	local02, local06
02ed0     3A 6F 0A F2 | 	cmp	local02, local05 wz
02ed4     88 FF 9F 5D |  if_ne	jmp	#LR__0084
02ed8                 | LR__0085
02ed8     AF F0 03 F6 | 	mov	ptra, fp
02edc     BA 00 A0 FD | 	call	#popregs_
02ee0                 | _hng030rm_spin2_outtextxy_ret
02ee0     2D 00 64 FD | 	ret
02ee4                 | 
02ee4                 | ' 
02ee4                 | ' ''---------- Output a char at the cursor position, move the cursor
02ee4                 | ' 
02ee4                 | ' pub putchar(achar) | c,x,y
02ee4                 | _hng030rm_spin2_putchar
02ee4     0F 5A 05 F6 | 	mov	COUNT_, #15
02ee8     B0 00 A0 FD | 	call	#pushregs_
02eec     2F 6D 02 F6 | 	mov	local01, arg01
02ef0                 | ' 
02ef0                 | ' if achar==10
02ef0     0A 6C 0E F2 | 	cmp	local01, #10 wz
02ef4     08 00 90 5D |  if_ne	jmp	#LR__0086
02ef8                 | '   crlf()
02ef8     34 04 B0 FD | 	call	#_hng030rm_spin2_crlf
02efc                 | ' else  
02efc     64 01 90 FD | 	jmp	#LR__0089
02f00                 | LR__0086
02f00                 | '   x:=cursor_x
02f00     34 FA 05 F1 | 	add	objptr, #52
02f04     FD 6E C2 FA | 	rdbyte	local02, objptr
02f08                 | '   y:=cursor_y
02f08     01 FA 05 F1 | 	add	objptr, #1
02f0c     FD 70 C2 FA | 	rdbyte	local03, objptr
02f10                 | '   c:=write_color<<24+write_background<<16
02f10     03 FA 05 F1 | 	add	objptr, #3
02f14     FD 72 02 FB | 	rdlong	local04, objptr
02f18     18 72 66 F0 | 	shl	local04, #24
02f1c     04 FA 05 F1 | 	add	objptr, #4
02f20     FD 74 02 FB | 	rdlong	local05, objptr
02f24     3C FA 85 F1 | 	sub	objptr, #60
02f28     10 74 66 F0 | 	shl	local05, #16
02f2c     3A 73 02 F1 | 	add	local04, local05
02f30                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02f30     FD 76 02 FB | 	rdlong	local06, objptr
02f34     90 FA 05 F1 | 	add	objptr, #144
02f38     FD 78 02 FB | 	rdlong	local07, objptr
02f3c     90 FA 85 F1 | 	sub	objptr, #144
02f40     38 79 02 FD | 	qmul	local07, local03
02f44     18 7A 62 FD | 	getqx	local08
02f48     37 7B 02 F1 | 	add	local08, local02
02f4c     02 7A 66 F0 | 	shl	local08, #2
02f50     3D 77 02 F1 | 	add	local06, local08
02f54     3B 7D 02 FB | 	rdlong	local09, local06
02f58     7F 00 00 FF 
02f5c     FF 7D 06 F5 | 	and	local09, ##65535
02f60     39 7D 42 F5 | 	or	local09, local04
02f64     FD 7E 02 FB | 	rdlong	local10, objptr
02f68     90 FA 05 F1 | 	add	objptr, #144
02f6c     FD 80 02 FB | 	rdlong	local11, objptr
02f70     90 FA 85 F1 | 	sub	objptr, #144
02f74     38 81 02 FD | 	qmul	local11, local03
02f78     18 82 62 FD | 	getqx	local12
02f7c     37 83 02 F1 | 	add	local12, local02
02f80     02 82 66 F0 | 	shl	local12, #2
02f84     41 7F 02 F1 | 	add	local10, local12
02f88     3F 7D 62 FC | 	wrlong	local09, local10
02f8c                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
02f8c     FD 76 02 FB | 	rdlong	local06, objptr
02f90     90 FA 05 F1 | 	add	objptr, #144
02f94     FD 78 02 FB | 	rdlong	local07, objptr
02f98     90 FA 85 F1 | 	sub	objptr, #144
02f9c     38 79 02 FD | 	qmul	local07, local03
02fa0     18 7A 62 FD | 	getqx	local08
02fa4     37 7B 02 F1 | 	add	local08, local02
02fa8     02 7A 66 F0 | 	shl	local08, #2
02fac     3D 77 02 F1 | 	add	local06, local08
02fb0     3B 7D 02 FB | 	rdlong	local09, local06
02fb4     FF 7C 26 F5 | 	andn	local09, #255
02fb8     36 7F 02 F6 | 	mov	local10, local01
02fbc     FF 7E 06 F5 | 	and	local10, #255
02fc0     3F 7D 42 F5 | 	or	local09, local10
02fc4     FD 84 02 FB | 	rdlong	local13, objptr
02fc8     90 FA 05 F1 | 	add	objptr, #144
02fcc     FD 86 02 FB | 	rdlong	local14, objptr
02fd0     38 87 02 FD | 	qmul	local14, local03
02fd4     18 88 62 FD | 	getqx	local15
02fd8     37 89 02 F1 | 	add	local15, local02
02fdc     02 88 66 F0 | 	shl	local15, #2
02fe0     44 85 02 F1 | 	add	local13, local15
02fe4     42 7D 62 FC | 	wrlong	local09, local13
02fe8                 | '   cursor_x+=1
02fe8     5C FA 85 F1 | 	sub	objptr, #92
02fec     FD 7C C2 FA | 	rdbyte	local09, objptr
02ff0     01 7C 06 F1 | 	add	local09, #1
02ff4     FD 7C 42 FC | 	wrbyte	local09, objptr
02ff8                 | '   if cursor_x==cpl
02ff8     FD 7C C2 FA | 	rdbyte	local09, objptr
02ffc     5C FA 05 F1 | 	add	objptr, #92
03000     FD 74 02 FB | 	rdlong	local05, objptr
03004     90 FA 85 F1 | 	sub	objptr, #144
03008     3A 7D 0A F2 | 	cmp	local09, local05 wz
0300c     54 00 90 5D |  if_ne	jmp	#LR__0088
03010                 | '     cursor_x:=0
03010     34 FA 05 F1 | 	add	objptr, #52
03014     FD 00 48 FC | 	wrbyte	#0, objptr
03018                 | '     cursor_y+=1
03018     01 FA 05 F1 | 	add	objptr, #1
0301c     FD 7C C2 FA | 	rdbyte	local09, objptr
03020     01 7C 06 F1 | 	add	local09, #1
03024     FD 7C 42 FC | 	wrbyte	local09, objptr
03028                 | '     if cursor_y>lines-1
03028     5F FA 05 F1 | 	add	objptr, #95
0302c     FD 7C 02 FB | 	rdlong	local09, objptr
03030     01 7C 86 F1 | 	sub	local09, #1
03034     5F FA 85 F1 | 	sub	objptr, #95
03038     FD 74 C2 FA | 	rdbyte	local05, objptr
0303c     35 FA 85 F1 | 	sub	objptr, #53
03040     3E 75 5A F2 | 	cmps	local05, local09 wcz
03044     1C 00 90 ED |  if_be	jmp	#LR__0087
03048                 | '       scrollup()
03048     10 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
0304c                 | '       cursor_y:=lines-1
0304c     94 FA 05 F1 | 	add	objptr, #148
03050     FD 7C 02 FB | 	rdlong	local09, objptr
03054     01 7C 86 F1 | 	sub	local09, #1
03058     5F FA 85 F1 | 	sub	objptr, #95
0305c     FD 7C 42 FC | 	wrbyte	local09, objptr
03060     35 FA 85 F1 | 	sub	objptr, #53
03064                 | LR__0087
03064                 | LR__0088
03064                 | LR__0089
03064     AF F0 03 F6 | 	mov	ptra, fp
03068     BA 00 A0 FD | 	call	#popregs_
0306c                 | _hng030rm_spin2_putchar_ret
0306c     2D 00 64 FD | 	ret
03070                 | 
03070                 | ' 
03070                 | ' ''--------- Output a string at the cursor position, move the cursor
03070                 | ' 
03070                 | ' pub write(text) | iii,c,ncx,ncy
03070                 | _hng030rm_spin2_write
03070     16 5A 05 F6 | 	mov	COUNT_, #22
03074     B0 00 A0 FD | 	call	#pushregs_
03078     2F 6D 02 F6 | 	mov	local01, arg01
0307c                 | ' 
0307c                 | ' c:=write_color<<24+write_background<<16
0307c     38 FA 05 F1 | 	add	objptr, #56
03080     FD 6E 02 FB | 	rdlong	local02, objptr
03084     18 6E 66 F0 | 	shl	local02, #24
03088     04 FA 05 F1 | 	add	objptr, #4
0308c     FD 70 02 FB | 	rdlong	local03, objptr
03090     10 70 66 F0 | 	shl	local03, #16
03094     38 6F 02 F1 | 	add	local02, local03
03098                 | ' 'debug(uhex_long(write_color))
03098                 | ' ncy:=cursor_y
03098     07 FA 85 F1 | 	sub	objptr, #7
0309c     FD 72 C2 FA | 	rdbyte	local04, objptr
030a0                 | ' ncx:=cursor_x+strsize(text)
030a0     01 FA 85 F1 | 	sub	objptr, #1
030a4     FD 74 C2 FA | 	rdbyte	local05, objptr
030a8     34 FA 85 F1 | 	sub	objptr, #52
030ac     36 5F 02 F6 | 	mov	arg01, local01
030b0     00 76 06 F6 | 	mov	local06, #0
030b4     58 CF 9F FE | 	loc	pa,	#(@LR__0091-@LR__0090)
030b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
030bc                 | LR__0090
030bc     2F 79 CA FA | 	rdbyte	local07, arg01 wz
030c0     01 76 06 51 |  if_ne	add	local06, #1
030c4     01 5E 06 51 |  if_ne	add	arg01, #1
030c8     F0 FF 9F 5D |  if_ne	jmp	#LR__0090
030cc                 | LR__0091
030cc     3B 19 02 F6 | 	mov	result1, local06
030d0     3B 75 02 F1 | 	add	local05, local06
030d4     3A 7B 02 F6 | 	mov	local08, local05
030d8     54 CF 9F FE | 	loc	pa,	#(@LR__0093-@LR__0092)
030dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
030e0                 | ' repeat while ncx>cpl-1
030e0                 | LR__0092
030e0     90 FA 05 F1 | 	add	objptr, #144
030e4     FD 74 02 FB | 	rdlong	local05, objptr
030e8     90 FA 85 F1 | 	sub	objptr, #144
030ec     01 74 86 F1 | 	sub	local05, #1
030f0     3A 7B 5A F2 | 	cmps	local08, local05 wcz
030f4     18 00 90 ED |  if_be	jmp	#LR__0094
030f8                 | '   ncx-=cpl
030f8     90 FA 05 F1 | 	add	objptr, #144
030fc     FD 7C 02 FB | 	rdlong	local09, objptr
03100     90 FA 85 F1 | 	sub	objptr, #144
03104     3E 7B 82 F1 | 	sub	local08, local09
03108                 | '   ncy+=1
03108     01 72 06 F1 | 	add	local04, #1
0310c     D0 FF 9F FD | 	jmp	#LR__0092
03110                 | LR__0093
03110                 | LR__0094
03110                 | ' repeat while ncy>lines-1
03110                 | LR__0095
03110     94 FA 05 F1 | 	add	objptr, #148
03114     FD 74 02 FB | 	rdlong	local05, objptr
03118     94 FA 85 F1 | 	sub	objptr, #148
0311c     01 74 86 F1 | 	sub	local05, #1
03120     3A 73 5A F2 | 	cmps	local04, local05 wcz
03124     20 00 90 ED |  if_be	jmp	#LR__0096
03128                 | '   ncy-=1
03128     01 72 86 F1 | 	sub	local04, #1
0312c                 | '   scrollup()
0312c     2C 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
03130                 | '   cursor_y-=1
03130     35 FA 05 F1 | 	add	objptr, #53
03134     FD 74 C2 FA | 	rdbyte	local05, objptr
03138     01 74 86 F1 | 	sub	local05, #1
0313c     FD 74 42 FC | 	wrbyte	local05, objptr
03140     35 FA 85 F1 | 	sub	objptr, #53
03144     C8 FF 9F FD | 	jmp	#LR__0095
03148                 | LR__0096
03148                 | ' 
03148                 | ' repeat iii from 0 to strsize(text)-1
03148     00 7E 06 F6 | 	mov	local10, #0
0314c     36 5F 02 F6 | 	mov	arg01, local01
03150     00 76 06 F6 | 	mov	local06, #0
03154     B8 CE 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
03158     93 00 A0 FD | 	call	#FCACHE_LOAD_
0315c                 | LR__0097
0315c     2F 79 CA FA | 	rdbyte	local07, arg01 wz
03160     01 76 06 51 |  if_ne	add	local06, #1
03164     01 5E 06 51 |  if_ne	add	arg01, #1
03168     F0 FF 9F 5D |  if_ne	jmp	#LR__0097
0316c                 | LR__0098
0316c     3B 19 02 F6 | 	mov	result1, local06
03170     0C 81 02 F6 | 	mov	local11, result1
03174     01 80 86 F1 | 	sub	local11, #1
03178     00 80 5E F2 | 	cmps	local11, #0 wcz
0317c     01 70 06 16 |  if_a	mov	local03, #1
03180     01 70 66 E6 |  if_be	neg	local03, #1
03184     38 81 02 F1 | 	add	local11, local03
03188     04 CF 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
0318c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03190                 | LR__0099
03190                 | ' 
03190                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
03190     FD 82 02 FB | 	rdlong	local12, objptr
03194     90 FA 05 F1 | 	add	objptr, #144
03198     FD 84 02 FB | 	rdlong	local13, objptr
0319c     5B FA 85 F1 | 	sub	objptr, #91
031a0     FD 86 C2 FA | 	rdbyte	local14, objptr
031a4     43 85 02 FD | 	qmul	local13, local14
031a8     18 88 62 FD | 	getqx	local15
031ac     01 FA 85 F1 | 	sub	objptr, #1
031b0     FD 8A C2 FA | 	rdbyte	local16, objptr
031b4     34 FA 85 F1 | 	sub	objptr, #52
031b8     45 89 02 F1 | 	add	local15, local16
031bc     3F 89 02 F1 | 	add	local15, local10
031c0     02 88 66 F0 | 	shl	local15, #2
031c4     44 83 02 F1 | 	add	local12, local15
031c8     41 8D 02 FB | 	rdlong	local17, local12
031cc     7F 00 00 FF 
031d0     FF 8D 06 F5 | 	and	local17, ##65535
031d4     37 8D 42 F5 | 	or	local17, local02
031d8     FD 8E 02 FB | 	rdlong	local18, objptr
031dc     90 FA 05 F1 | 	add	objptr, #144
031e0     FD 90 02 FB | 	rdlong	local19, objptr
031e4     5B FA 85 F1 | 	sub	objptr, #91
031e8     FD 92 C2 FA | 	rdbyte	local20, objptr
031ec     49 91 02 FD | 	qmul	local19, local20
031f0     18 94 62 FD | 	getqx	local21
031f4     01 FA 85 F1 | 	sub	objptr, #1
031f8     FD 96 C2 FA | 	rdbyte	local22, objptr
031fc     34 FA 85 F1 | 	sub	objptr, #52
03200     4B 95 02 F1 | 	add	local21, local22
03204     3F 95 02 F1 | 	add	local21, local10
03208     02 94 66 F0 | 	shl	local21, #2
0320c     4A 8F 02 F1 | 	add	local18, local21
03210     47 8D 62 FC | 	wrlong	local17, local18
03214     38 7F 02 F1 | 	add	local10, local03
03218     40 7F 0A F2 | 	cmp	local10, local11 wz
0321c     70 FF 9F 5D |  if_ne	jmp	#LR__0099
03220                 | LR__0100
03220                 | ' 
03220                 | ' outtextxy(cursor_x,cursor_y,text)
03220     34 FA 05 F1 | 	add	objptr, #52
03224     FD 5E C2 FA | 	rdbyte	arg01, objptr
03228     01 FA 05 F1 | 	add	objptr, #1
0322c     FD 60 C2 FA | 	rdbyte	arg02, objptr
03230     35 FA 85 F1 | 	sub	objptr, #53
03234     36 63 02 F6 | 	mov	arg03, local01
03238     D0 FB BF FD | 	call	#_hng030rm_spin2_outtextxy
0323c                 | ' 
0323c                 | ' cursor_x:=ncx
0323c     34 FA 05 F1 | 	add	objptr, #52
03240     FD 7A 42 FC | 	wrbyte	local08, objptr
03244                 | ' cursor_y:=ncy
03244     01 FA 05 F1 | 	add	objptr, #1
03248     FD 72 42 FC | 	wrbyte	local04, objptr
0324c     35 FA 85 F1 | 	sub	objptr, #53
03250     AF F0 03 F6 | 	mov	ptra, fp
03254     BA 00 A0 FD | 	call	#popregs_
03258                 | _hng030rm_spin2_write_ret
03258     2D 00 64 FD | 	ret
0325c                 | 
0325c                 | ' 
0325c                 | ' ''-----------  Scroll the screen one line up
0325c                 | ' 
0325c                 | ' pub scrollup() | i
0325c                 | _hng030rm_spin2_scrollup
0325c     0D 5A 05 F6 | 	mov	COUNT_, #13
03260     B0 00 A0 FD | 	call	#pushregs_
03264                 | ' 
03264                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
03264     FD 5E 02 FB | 	rdlong	arg01, objptr
03268     2F 61 02 F6 | 	mov	arg02, arg01
0326c     90 FA 05 F1 | 	add	objptr, #144
03270     FD 6C 02 FB | 	rdlong	local01, objptr
03274     02 6C 66 F0 | 	shl	local01, #2
03278     36 61 02 F1 | 	add	arg02, local01
0327c     60 FA 85 F1 | 	sub	objptr, #96
03280     FD 62 02 FB | 	rdlong	arg03, objptr
03284     60 FA 05 F1 | 	add	objptr, #96
03288     FD 6E 02 FB | 	rdlong	local02, objptr
0328c     90 FA 85 F1 | 	sub	objptr, #144
03290     37 63 82 F1 | 	sub	arg03, local02
03294     F8 39 B0 FD | 	call	#__system__longmove
03298                 | ' repeat i from buflen-cpl to buflen-1
03298     30 FA 05 F1 | 	add	objptr, #48
0329c     FD 70 02 FB | 	rdlong	local03, objptr
032a0     60 FA 05 F1 | 	add	objptr, #96
032a4     FD 72 02 FB | 	rdlong	local04, objptr
032a8     39 71 82 F1 | 	sub	local03, local04
032ac     60 FA 85 F1 | 	sub	objptr, #96
032b0     FD 74 02 FB | 	rdlong	local05, objptr
032b4     01 74 86 F1 | 	sub	local05, #1
032b8     FD 76 02 FB | 	rdlong	local06, objptr
032bc     60 FA 05 F1 | 	add	objptr, #96
032c0     FD 78 02 FB | 	rdlong	local07, objptr
032c4     90 FA 85 F1 | 	sub	objptr, #144
032c8     3C 77 82 F1 | 	sub	local06, local07
032cc     3B 75 5A F2 | 	cmps	local05, local06 wcz
032d0     01 7A 06 16 |  if_a	mov	local08, #1
032d4     01 7A 66 E6 |  if_be	neg	local08, #1
032d8     3D 75 02 F1 | 	add	local05, local08
032dc     60 CD 9F FE | 	loc	pa,	#(@LR__0102-@LR__0101)
032e0     93 00 A0 FD | 	call	#FCACHE_LOAD_
032e4                 | LR__0101
032e4                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
032e4     FD 7C 02 FB | 	rdlong	local09, objptr
032e8     38 7F 02 F6 | 	mov	local10, local03
032ec     02 7E 66 F0 | 	shl	local10, #2
032f0     3F 7D 02 F1 | 	add	local09, local10
032f4     3E 81 02 FB | 	rdlong	local11, local09
032f8     80 FF 7F FF 
032fc     00 80 06 F5 | 	and	local11, ##-65536
03300     20 80 46 F5 | 	or	local11, #32
03304     FD 82 02 FB | 	rdlong	local12, objptr
03308     38 85 02 F6 | 	mov	local13, local03
0330c     02 84 66 F0 | 	shl	local13, #2
03310     42 83 02 F1 | 	add	local12, local13
03314     41 81 62 FC | 	wrlong	local11, local12
03318     3D 71 02 F1 | 	add	local03, local08
0331c     3A 71 0A F2 | 	cmp	local03, local05 wz
03320     C0 FF 9F 5D |  if_ne	jmp	#LR__0101
03324                 | LR__0102
03324     AF F0 03 F6 | 	mov	ptra, fp
03328     BA 00 A0 FD | 	call	#popregs_
0332c                 | _hng030rm_spin2_scrollup_ret
0332c     2D 00 64 FD | 	ret
03330                 | 
03330                 | ' 
03330                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed
03330                 | ' 
03330                 | ' pub crlf()
03330                 | _hng030rm_spin2_crlf
03330     02 5A 05 F6 | 	mov	COUNT_, #2
03334     B0 00 A0 FD | 	call	#pushregs_
03338                 | ' 
03338                 | ' cursor_x:=0
03338     34 FA 05 F1 | 	add	objptr, #52
0333c     FD 00 48 FC | 	wrbyte	#0, objptr
03340                 | ' cursor_y+=1
03340     01 FA 05 F1 | 	add	objptr, #1
03344     FD 6C C2 FA | 	rdbyte	local01, objptr
03348     01 6C 06 F1 | 	add	local01, #1
0334c     FD 6C 42 FC | 	wrbyte	local01, objptr
03350                 | ' if cursor_y>lines-1
03350     5F FA 05 F1 | 	add	objptr, #95
03354     FD 6C 02 FB | 	rdlong	local01, objptr
03358     01 6C 86 F1 | 	sub	local01, #1
0335c     5F FA 85 F1 | 	sub	objptr, #95
03360     FD 6E C2 FA | 	rdbyte	local02, objptr
03364     35 FA 85 F1 | 	sub	objptr, #53
03368     36 6F 5A F2 | 	cmps	local02, local01 wcz
0336c     1C 00 90 ED |  if_be	jmp	#LR__0103
03370                 | '   scrollup()
03370     E8 FE BF FD | 	call	#_hng030rm_spin2_scrollup
03374                 | '   cursor_y:=lines-1
03374     94 FA 05 F1 | 	add	objptr, #148
03378     FD 6C 02 FB | 	rdlong	local01, objptr
0337c     01 6C 86 F1 | 	sub	local01, #1
03380     5F FA 85 F1 | 	sub	objptr, #95
03384     FD 6C 42 FC | 	wrbyte	local01, objptr
03388     35 FA 85 F1 | 	sub	objptr, #53
0338c                 | LR__0103
0338c     AF F0 03 F6 | 	mov	ptra, fp
03390     BA 00 A0 FD | 	call	#popregs_
03394                 | _hng030rm_spin2_crlf_ret
03394     2D 00 64 FD | 	ret
03398                 | 
03398                 | ' 
03398                 | ' 
03398                 | ' 
03398                 | ' pub inttostr2(i,d):result |q,pos,k,j
03398                 | _hng030rm_spin2_inttostr2
03398                 | ' 
03398                 | ' j:=i
03398                 | ' pos:=d-1
03398     30 1F 02 F6 | 	mov	_var01, arg02
0339c     01 1E 86 F1 | 	sub	_var01, #1
033a0                 | ' k:=0
033a0                 | ' 
033a0                 | ' n_string[d]:=0
033a0     30 21 02 F6 | 	mov	_var02, arg02
033a4     44 FA 05 F1 | 	add	objptr, #68
033a8     FD 22 02 F6 | 	mov	_var03, objptr
033ac     FD 20 02 F1 | 	add	_var02, objptr
033b0     10 01 48 FC | 	wrbyte	#0, _var02
033b4                 | ' repeat k from 0 to d-1
033b4     00 24 06 F6 | 	mov	_var04, #0
033b8     01 60 86 F1 | 	sub	arg02, #1
033bc     30 27 02 F6 | 	mov	_var05, arg02
033c0     00 26 5E F2 | 	cmps	_var05, #0 wcz
033c4     44 FA 85 F1 | 	sub	objptr, #68
033c8     01 22 06 16 |  if_a	mov	_var03, #1
033cc     01 22 66 E6 |  if_be	neg	_var03, #1
033d0     11 27 02 F1 | 	add	_var05, _var03
033d4     48 CC 9F FE | 	loc	pa,	#(@LR__0105-@LR__0104)
033d8     93 00 A0 FD | 	call	#FCACHE_LOAD_
033dc                 | LR__0104
033dc                 | '   n_string[k]:=48
033dc     12 29 02 F6 | 	mov	_var06, _var04
033e0     44 FA 05 F1 | 	add	objptr, #68
033e4     FD 28 02 F1 | 	add	_var06, objptr
033e8     14 61 48 FC | 	wrbyte	#48, _var06
033ec     11 25 02 F1 | 	add	_var04, _var03
033f0     13 25 0A F2 | 	cmp	_var04, _var05 wz
033f4     44 FA 85 F1 | 	sub	objptr, #68
033f8     E0 FF 9F 5D |  if_ne	jmp	#LR__0104
033fc                 | LR__0105
033fc                 | ' 
033fc                 | ' if (j<>0)
033fc     00 5E 0E F2 | 	cmp	arg01, #0 wz
03400     40 00 90 AD |  if_e	jmp	#LR__0108
03404                 | ' 
03404                 | '   repeat while (pos>-1)
03404                 | LR__0106
03404     FF FF 7F FF 
03408     FF 1F 5E F2 | 	cmps	_var01, ##-1 wcz
0340c     34 00 90 ED |  if_be	jmp	#LR__0107
03410                 | '     q:=j+//10
03410     2F 99 02 F6 | 	mov	muldiva_, arg01
03414     0A 9A 06 F6 | 	mov	muldivb_, #10
03418     C2 00 A0 FD | 	call	#unsdivide_
0341c                 | '     q:=48+q
0341c     30 2A 06 F6 | 	mov	_var07, #48
03420     4C 2B 02 F1 | 	add	_var07, muldiva_
03424                 | '     n_string[pos]:=q
03424     0F 61 02 F6 | 	mov	arg02, _var01
03428     44 FA 05 F1 | 	add	objptr, #68
0342c     FD 60 02 F1 | 	add	arg02, objptr
03430     30 2B 42 FC | 	wrbyte	_var07, arg02
03434                 | '     j:=j+/10
03434     4D 5F 02 F6 | 	mov	arg01, muldivb_
03438                 | '     pos-=1
03438     01 1E 86 F1 | 	sub	_var01, #1
0343c     44 FA 85 F1 | 	sub	objptr, #68
03440     C0 FF 9F FD | 	jmp	#LR__0106
03444                 | LR__0107
03444                 | LR__0108
03444                 | ' 
03444                 | ' 
03444                 | ' q:=@n_string
03444     44 FA 05 F1 | 	add	objptr, #68
03448     FD 18 02 F6 | 	mov	result1, objptr
0344c     44 FA 85 F1 | 	sub	objptr, #68
03450                 | ' return q
03450                 | _hng030rm_spin2_inttostr2_ret
03450     2D 00 64 FD | 	ret
03454                 | 
03454                 | ' 
03454                 | ' pub plot(x,y,c)
03454                 | _hng030rm_spin2_plot
03454     04 5A 05 F6 | 	mov	COUNT_, #4
03458     B0 00 A0 FD | 	call	#pushregs_
0345c                 | ' putpixel(x,y,c)
0345c     D8 FA 05 F1 | 	add	objptr, #216
03460     FD 6C 02 FB | 	rdlong	local01, objptr
03464     D8 FA 85 F1 | 	sub	objptr, #216
03468     36 6F 02 FB | 	rdlong	local02, local01
0346c     04 6C 06 F1 | 	add	local01, #4
03470     36 71 02 FB | 	rdlong	local03, local01
03474     FD 72 02 F6 | 	mov	local04, objptr
03478     37 FB 01 F6 | 	mov	objptr, local02
0347c     2D 70 62 FD | 	call	local03
03480     39 FB 01 F6 | 	mov	objptr, local04
03484     AF F0 03 F6 | 	mov	ptra, fp
03488     BA 00 A0 FD | 	call	#popregs_
0348c                 | _hng030rm_spin2_plot_ret
0348c     2D 00 64 FD | 	ret
03490                 | 
03490                 | ' 
03490                 | ' '*************************************************************************
03490                 | ' '                                                                        *
03490                 | ' '  Mode setting and driver start                                                          *
03490                 | ' '                                                                        *
03490                 | ' '*************************************************************************
03490                 | ' 
03490                 | ' ''---------  Set the graphics mode
03490                 | ' 
03490                 | ' 
03490                 | ' 
03490                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
03490                 | _hng030rm_spin2_setmode
03490     0A 5A 05 F6 | 	mov	COUNT_, #10
03494     B0 00 A0 FD | 	call	#pushregs_
03498     2F 6D 02 F6 | 	mov	local01, arg01
0349c                 | ' 
0349c                 | ' '' mode:tn_bb_cc_vv_hh
0349c                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
0349c                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
0349c                 | ' 
0349c                 | ' if mode==(512+192+48)
0349c     01 00 00 FF 
034a0     F0 6C 0E F2 | 	cmp	local01, ##752 wz
034a4                 | '   return 'no RAM
034a4     C0 05 90 AD |  if_e	jmp	#LR__0131
034a8                 | ' 
034a8                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
034a8     36 6F 02 F6 | 	mov	local02, local01
034ac     06 6E 46 F0 | 	shr	local02, #6
034b0     07 6E 06 F5 | 	and	local02, #7
034b4     08 6E 26 F3 | 	fle	local02, #8
034b8     37 71 02 F6 | 	mov	local03, local02
034bc     30 70 62 FD | 	jmprel	local03
034c0                 | LR__0109
034c0     20 00 90 FD | 	jmp	#LR__0110
034c4     48 00 90 FD | 	jmp	#LR__0111
034c8     70 00 90 FD | 	jmp	#LR__0112
034cc     98 00 90 FD | 	jmp	#LR__0113
034d0     C0 00 90 FD | 	jmp	#LR__0114
034d4     E8 00 90 FD | 	jmp	#LR__0115
034d8     10 01 90 FD | 	jmp	#LR__0116
034dc     38 01 90 FD | 	jmp	#LR__0117
034e0     68 01 90 FD | 	jmp	#LR__0118
034e4                 | LR__0110
034e4                 | ' 
034e4                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
034e4     50 FA 05 F1 | 	add	objptr, #80
034e8     FD 5E 02 F6 | 	mov	arg01, objptr
034ec     50 FA 85 F1 | 	sub	objptr, #80
034f0     0E 00 00 FF 
034f4     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
034f8     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
034fc     0E 00 00 FF 
03500     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
03504     10 62 06 F6 | 	mov	arg03, #16
03508     84 37 B0 FD | 	call	#__system__longmove
0350c     3C 01 90 FD | 	jmp	#LR__0118
03510                 | LR__0111
03510                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
03510     50 FA 05 F1 | 	add	objptr, #80
03514     FD 5E 02 F6 | 	mov	arg01, objptr
03518     50 FA 85 F1 | 	sub	objptr, #80
0351c     0E 00 00 FF 
03520     98 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
03524     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03528     0E 00 00 FF 
0352c     98 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
03530     10 62 06 F6 | 	mov	arg03, #16
03534     58 37 B0 FD | 	call	#__system__longmove
03538     10 01 90 FD | 	jmp	#LR__0118
0353c                 | LR__0112
0353c                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
0353c     50 FA 05 F1 | 	add	objptr, #80
03540     FD 5E 02 F6 | 	mov	arg01, objptr
03544     50 FA 85 F1 | 	sub	objptr, #80
03548     0E 00 00 FF 
0354c     D8 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
03550     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03554     0E 00 00 FF 
03558     D8 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
0355c     10 62 06 F6 | 	mov	arg03, #16
03560     2C 37 B0 FD | 	call	#__system__longmove
03564     E4 00 90 FD | 	jmp	#LR__0118
03568                 | LR__0113
03568                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
03568     50 FA 05 F1 | 	add	objptr, #80
0356c     FD 5E 02 F6 | 	mov	arg01, objptr
03570     50 FA 85 F1 | 	sub	objptr, #80
03574     0E 00 00 FF 
03578     18 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
0357c     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03580     0E 00 00 FF 
03584     18 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
03588     10 62 06 F6 | 	mov	arg03, #16
0358c     00 37 B0 FD | 	call	#__system__longmove
03590     B8 00 90 FD | 	jmp	#LR__0118
03594                 | LR__0114
03594                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
03594     50 FA 05 F1 | 	add	objptr, #80
03598     FD 5E 02 F6 | 	mov	arg01, objptr
0359c     50 FA 85 F1 | 	sub	objptr, #80
035a0     0E 00 00 FF 
035a4     58 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
035a8     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
035ac     0E 00 00 FF 
035b0     58 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
035b4     10 62 06 F6 | 	mov	arg03, #16
035b8     D4 36 B0 FD | 	call	#__system__longmove
035bc     8C 00 90 FD | 	jmp	#LR__0118
035c0                 | LR__0115
035c0                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
035c0     50 FA 05 F1 | 	add	objptr, #80
035c4     FD 5E 02 F6 | 	mov	arg01, objptr
035c8     50 FA 85 F1 | 	sub	objptr, #80
035cc     0E 00 00 FF 
035d0     98 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
035d4     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
035d8     0E 00 00 FF 
035dc     98 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
035e0     10 62 06 F6 | 	mov	arg03, #16
035e4     A8 36 B0 FD | 	call	#__system__longmove
035e8     60 00 90 FD | 	jmp	#LR__0118
035ec                 | LR__0116
035ec                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
035ec     50 FA 05 F1 | 	add	objptr, #80
035f0     FD 5E 02 F6 | 	mov	arg01, objptr
035f4     50 FA 85 F1 | 	sub	objptr, #80
035f8     0E 00 00 FF 
035fc     D8 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
03600     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03604     0E 00 00 FF 
03608     D8 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
0360c     10 62 06 F6 | 	mov	arg03, #16
03610     7C 36 B0 FD | 	call	#__system__longmove
03614     34 00 90 FD | 	jmp	#LR__0118
03618                 | LR__0117
03618                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
03618     50 FA 05 F1 | 	add	objptr, #80
0361c     FD 72 02 F6 | 	mov	local04, objptr
03620     0F 00 00 FF 
03624     18 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
03628     03 75 02 F6 | 	mov	local05, ptr__hng030rm_spin2_dat__
0362c     10 76 06 F6 | 	mov	local06, #16
03630     39 5F 02 F6 | 	mov	arg01, local04
03634     3A 61 02 F6 | 	mov	arg02, local05
03638     10 62 06 F6 | 	mov	arg03, #16
0363c     50 FA 85 F1 | 	sub	objptr, #80
03640     0F 00 00 FF 
03644     18 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
03648     44 36 B0 FD | 	call	#__system__longmove
0364c                 | LR__0118
0364c                 | ' 
0364c                 | ' ' 4-bit graphics: do nothing with timings :)
0364c                 | ' if mode<512
0364c     01 00 00 FF 
03650     00 6C 5E F2 | 	cmps	local01, ##512 wcz
03654     1C 00 90 3D |  if_ae	jmp	#LR__0119
03658                 | '   palette_ptr:=@ataripalette
03658     0C 00 00 FF 
0365c     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
03660     18 FA 05 F1 | 	add	objptr, #24
03664     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
03668     18 FA 85 F1 | 	sub	objptr, #24
0366c     0C 00 00 FF 
03670     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
03674                 | LR__0119
03674                 | ' 
03674                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
03674     36 6F 02 F6 | 	mov	local02, local01
03678     01 00 00 FF 
0367c     30 6E 06 F5 | 	and	local02, ##560
03680     01 00 00 FF 
03684     30 6E 0E F2 | 	cmp	local02, ##560 wz
03688     44 00 90 5D |  if_ne	jmp	#LR__0120
0368c                 | '   timings[5]:=4
0368c     64 FA 05 F1 | 	add	objptr, #100
03690     FD 08 68 FC | 	wrlong	#4, objptr
03694                 | '   timings[11]:=timings[11]<<1
03694     18 FA 05 F1 | 	add	objptr, #24
03698     FD 6E 02 FB | 	rdlong	local02, objptr
0369c     01 6E 66 F0 | 	shl	local02, #1
036a0     FD 6E 62 FC | 	wrlong	local02, objptr
036a4                 | '   putpixel:=p8
036a4     6C FA 05 F1 | 	add	objptr, #108
036a8     FD 6E 02 FB | 	rdlong	local02, objptr
036ac     10 FA 85 F1 | 	sub	objptr, #16
036b0     FD 6E 62 FC | 	wrlong	local02, objptr
036b4                 | '   palette_ptr:=@ataripalette
036b4     0C 00 00 FF 
036b8     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
036bc     C0 FA 85 F1 | 	sub	objptr, #192
036c0     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
036c4     18 FA 85 F1 | 	sub	objptr, #24
036c8     0C 00 00 FF 
036cc     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
036d0                 | LR__0120
036d0                 | ' 
036d0                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
036d0     36 6F 02 F6 | 	mov	local02, local01
036d4     01 00 00 FF 
036d8     30 6E 06 F5 | 	and	local02, ##560
036dc     01 00 00 FF 
036e0     10 6E 0E F2 | 	cmp	local02, ##528 wz
036e4     44 00 90 5D |  if_ne	jmp	#LR__0121
036e8                 | '   timings[5]:=16
036e8     64 FA 05 F1 | 	add	objptr, #100
036ec     FD 20 68 FC | 	wrlong	#16, objptr
036f0                 | '   timings[11]:=timings[11]>>1
036f0     18 FA 05 F1 | 	add	objptr, #24
036f4     FD 6E 02 FB | 	rdlong	local02, objptr
036f8     01 6E 46 F0 | 	shr	local02, #1
036fc     FD 6E 62 FC | 	wrlong	local02, objptr
03700                 | '   putpixel:=p2
03700     64 FA 05 F1 | 	add	objptr, #100
03704     FD 6E 02 FB | 	rdlong	local02, objptr
03708     08 FA 85 F1 | 	sub	objptr, #8
0370c     FD 6E 62 FC | 	wrlong	local02, objptr
03710                 | '   palette_ptr:=@fourcolors
03710     0C 00 00 FF 
03714     08 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
03718     C0 FA 85 F1 | 	sub	objptr, #192
0371c     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
03720     18 FA 85 F1 | 	sub	objptr, #24
03724     0C 00 00 FF 
03728     08 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
0372c                 | LR__0121
0372c                 | ' 
0372c                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
0372c     36 6F 02 F6 | 	mov	local02, local01
03730     01 00 00 FF 
03734     30 6E 06 F5 | 	and	local02, ##560
03738     01 00 00 FF 
0373c     00 6E 0E F2 | 	cmp	local02, ##512 wz
03740     44 00 90 5D |  if_ne	jmp	#LR__0122
03744                 | '   timings[5]:=32
03744     64 FA 05 F1 | 	add	objptr, #100
03748     FD 40 68 FC | 	wrlong	#32, objptr
0374c                 | '   timings[11]:=timings[11]>>2
0374c     18 FA 05 F1 | 	add	objptr, #24
03750     FD 6E 02 FB | 	rdlong	local02, objptr
03754     02 6E 46 F0 | 	shr	local02, #2
03758     FD 6E 62 FC | 	wrlong	local02, objptr
0375c                 | '   putpixel:=p1
0375c     60 FA 05 F1 | 	add	objptr, #96
03760     FD 6E 02 FB | 	rdlong	local02, objptr
03764     04 FA 85 F1 | 	sub	objptr, #4
03768     FD 6E 62 FC | 	wrlong	local02, objptr
0376c                 | '   palette_ptr:=@twocolors
0376c     0C 00 00 FF 
03770     00 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
03774     C0 FA 85 F1 | 	sub	objptr, #192
03778     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
0377c     18 FA 85 F1 | 	sub	objptr, #24
03780     0C 00 00 FF 
03784     00 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
03788                 | LR__0122
03788                 | ' 
03788                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
03788     36 6F 02 F6 | 	mov	local02, local01
0378c     01 00 00 FF 
03790     30 6E 06 F5 | 	and	local02, ##560
03794     01 00 00 FF 
03798     20 6E 0E F2 | 	cmp	local02, ##544 wz
0379c     2C 00 90 5D |  if_ne	jmp	#LR__0123
037a0                 | '   putpixel:=p4
037a0     E4 FA 05 F1 | 	add	objptr, #228
037a4     FD 6E 02 FB | 	rdlong	local02, objptr
037a8     0C FA 85 F1 | 	sub	objptr, #12
037ac     FD 6E 62 FC | 	wrlong	local02, objptr
037b0                 | '   palette_ptr:=@vga16
037b0     0C 00 00 FF 
037b4     18 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
037b8     C0 FA 85 F1 | 	sub	objptr, #192
037bc     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
037c0     18 FA 85 F1 | 	sub	objptr, #24
037c4     0C 00 00 FF 
037c8     18 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
037cc                 | LR__0123
037cc                 | ' 
037cc                 | ' repeat i from 0 to 4
037cc     00 78 06 F6 | 	mov	local07, #0
037d0     88 C8 9F FE | 	loc	pa,	#(@LR__0125-@LR__0124)
037d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
037d8                 | LR__0124
037d8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
037d8     3C 73 02 F6 | 	mov	local04, local07
037dc     02 72 66 F0 | 	shl	local04, #2
037e0     50 FA 05 F1 | 	add	objptr, #80
037e4     FD 74 02 F6 | 	mov	local05, objptr
037e8     FD 72 02 F1 | 	add	local04, objptr
037ec     2C FA 85 F1 | 	sub	objptr, #44
037f0     FD 7A 02 FB | 	rdlong	local08, objptr
037f4     3D 77 02 F6 | 	mov	local06, local08
037f8     11 76 66 F0 | 	shl	local06, #17
037fc     39 6F 02 FB | 	rdlong	local02, local04
03800     3B 6F 02 F1 | 	add	local02, local06
03804     80 40 38 FF 
03808     00 6E 06 F1 | 	add	local02, ##1887502336
0380c     3C 7D 02 F6 | 	mov	local09, local07
03810     02 7C 66 F0 | 	shl	local09, #2
03814     2C FA 05 F1 | 	add	objptr, #44
03818     FD 7E 02 F6 | 	mov	local10, objptr
0381c     FD 7C 02 F1 | 	add	local09, objptr
03820     3E 6F 62 FC | 	wrlong	local02, local09
03824     01 78 06 F1 | 	add	local07, #1
03828     05 78 5E F2 | 	cmps	local07, #5 wcz
0382c     50 FA 85 F1 | 	sub	objptr, #80
03830     A4 FF 9F CD |  if_b	jmp	#LR__0124
03834                 | LR__0125
03834                 | ' timings[5]:=timings[5]+hdmibase<<17
03834     24 FA 05 F1 | 	add	objptr, #36
03838     FD 72 02 FB | 	rdlong	local04, objptr
0383c     11 72 66 F0 | 	shl	local04, #17
03840     40 FA 05 F1 | 	add	objptr, #64
03844     FD 76 02 FB | 	rdlong	local06, objptr
03848     3B 6F 02 F6 | 	mov	local02, local06
0384c     39 6F 02 F1 | 	add	local02, local04
03850     FD 6E 62 FC | 	wrlong	local02, objptr
03854                 | ' clkfreq:=timings[13]
03854     20 FA 05 F1 | 	add	objptr, #32
03858     FD 6E 02 FB | 	rdlong	local02, objptr
0385c     14 6E 66 FC | 	wrlong	local02, #20
03860                 | ' hubset(timings[14])
03860     04 FA 05 F1 | 	add	objptr, #4
03864     FD 5E 02 FB | 	rdlong	arg01, objptr
03868     88 FA 85 F1 | 	sub	objptr, #136
0386c     00 5E 62 FD | 	hubset	arg01
03870                 | ' waitms(1)
03870     01 5E 06 F6 | 	mov	arg01, #1
03874     C4 36 B0 FD | 	call	#__system___waitms
03878                 | ' 
03878                 | ' 
03878                 | ' xzoom:=1<<(mode & 3)
03878     36 73 02 F6 | 	mov	local04, local01
0387c     03 72 06 F5 | 	and	local04, #3
03880     39 6F C2 F9 | 	decod	local02, local04
03884     CC FA 05 F1 | 	add	objptr, #204
03888     FD 6E 62 FC | 	wrlong	local02, objptr
0388c                 | ' 
0388c                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
0388c     37 73 02 F6 | 	mov	local04, local02
03890     CC FA 85 F1 | 	sub	objptr, #204
03894     08 72 0E F2 | 	cmp	local04, #8 wz
03898     24 00 90 5D |  if_ne	jmp	#LR__0126
0389c     36 75 02 F6 | 	mov	local05, local01
038a0     04 74 46 F0 | 	shr	local05, #4
038a4     03 74 06 F5 | 	and	local05, #3
038a8     03 74 0E F2 | 	cmp	local05, #3 wz
038ac     10 00 90 AD |  if_e	jmp	#LR__0126
038b0                 | '   xzoom:=4
038b0     04 6E 06 F6 | 	mov	local02, #4
038b4     CC FA 05 F1 | 	add	objptr, #204
038b8     FD 08 68 FC | 	wrlong	#4, objptr
038bc     CC FA 85 F1 | 	sub	objptr, #204
038c0                 | LR__0126
038c0                 | ' 
038c0                 | ' yzoom:=1<<((mode>>2) & 3)
038c0     36 73 02 F6 | 	mov	local04, local01
038c4     02 72 46 F0 | 	shr	local04, #2
038c8     03 72 06 F5 | 	and	local04, #3
038cc     39 6F C2 F9 | 	decod	local02, local04
038d0     D0 FA 05 F1 | 	add	objptr, #208
038d4     FD 6E 62 FC | 	wrlong	local02, objptr
038d8                 | ' azoom:=xzoom*yzoom
038d8     04 FA 85 F1 | 	sub	objptr, #4
038dc     FD 72 02 FB | 	rdlong	local04, objptr
038e0     04 FA 05 F1 | 	add	objptr, #4
038e4     FD 76 02 FB | 	rdlong	local06, objptr
038e8     3B 73 02 FD | 	qmul	local04, local06
038ec     18 6E 62 FD | 	getqx	local02
038f0     04 FA 05 F1 | 	add	objptr, #4
038f4     FD 6E 62 FC | 	wrlong	local02, objptr
038f8                 | ' 
038f8                 | ' cpl:=timings[11]
038f8     58 FA 85 F1 | 	sub	objptr, #88
038fc     FD 6E 02 FB | 	rdlong	local02, objptr
03900     14 FA 05 F1 | 	add	objptr, #20
03904     FD 6E 62 FC | 	wrlong	local02, objptr
03908     90 FA 85 F1 | 	sub	objptr, #144
0390c                 | ' if (mode<512)
0390c     01 00 00 FF 
03910     00 6C 5E F2 | 	cmps	local01, ##512 wcz
03914     60 00 90 3D |  if_ae	jmp	#LR__0127
03918                 | '   lines:=(timings[12]>>4)+/yzoom
03918     80 FA 05 F1 | 	add	objptr, #128
0391c     FD 98 02 FB | 	rdlong	muldiva_, objptr
03920     04 98 46 F0 | 	shr	muldiva_, #4
03924     50 FA 05 F1 | 	add	objptr, #80
03928     FD 9A 02 FB | 	rdlong	muldivb_, objptr
0392c     D0 FA 85 F1 | 	sub	objptr, #208
03930     C2 00 A0 FD | 	call	#unsdivide_
03934     94 FA 05 F1 | 	add	objptr, #148
03938     FD 9A 62 FC | 	wrlong	muldivb_, objptr
0393c                 | '   if ((timings[12]>>4)+//yzoom) <>0
0393c     14 FA 85 F1 | 	sub	objptr, #20
03940     FD 98 02 FB | 	rdlong	muldiva_, objptr
03944     04 98 46 F0 | 	shr	muldiva_, #4
03948     50 FA 05 F1 | 	add	objptr, #80
0394c     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03950     D0 FA 85 F1 | 	sub	objptr, #208
03954     C2 00 A0 FD | 	call	#unsdivide_
03958     00 98 0E F2 | 	cmp	muldiva_, #0 wz
0395c     AC 00 90 AD |  if_e	jmp	#LR__0130
03960                 | '     lines +=1
03960     94 FA 05 F1 | 	add	objptr, #148
03964     FD 6E 02 FB | 	rdlong	local02, objptr
03968     01 6E 06 F1 | 	add	local02, #1
0396c     FD 6E 62 FC | 	wrlong	local02, objptr
03970     94 FA 85 F1 | 	sub	objptr, #148
03974                 | ' 
03974                 | ' else
03974     94 00 90 FD | 	jmp	#LR__0130
03978                 | LR__0127
03978                 | '   lines:=timings[12]/yzoom
03978     80 FA 05 F1 | 	add	objptr, #128
0397c     FD 98 02 FB | 	rdlong	muldiva_, objptr
03980     50 FA 05 F1 | 	add	objptr, #80
03984     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03988     D0 FA 85 F1 | 	sub	objptr, #208
0398c     C6 00 A0 FD | 	call	#divide_
03990     94 FA 05 F1 | 	add	objptr, #148
03994     FD 9A 62 FC | 	wrlong	muldivb_, objptr
03998                 | '   if cpl//xzoom==0
03998     04 FA 85 F1 | 	sub	objptr, #4
0399c     FD 98 02 FB | 	rdlong	muldiva_, objptr
039a0     3C FA 05 F1 | 	add	objptr, #60
039a4     FD 9A 02 FB | 	rdlong	muldivb_, objptr
039a8     CC FA 85 F1 | 	sub	objptr, #204
039ac     C6 00 A0 FD | 	call	#divide_
039b0     00 98 0E F2 | 	cmp	muldiva_, #0 wz
039b4     28 00 90 5D |  if_ne	jmp	#LR__0128
039b8                 | '     cpl:=cpl/xzoom
039b8     90 FA 05 F1 | 	add	objptr, #144
039bc     FD 98 02 FB | 	rdlong	muldiva_, objptr
039c0     3C FA 05 F1 | 	add	objptr, #60
039c4     FD 9A 02 FB | 	rdlong	muldivb_, objptr
039c8     CC FA 85 F1 | 	sub	objptr, #204
039cc     C6 00 A0 FD | 	call	#divide_
039d0     90 FA 05 F1 | 	add	objptr, #144
039d4     FD 9A 62 FC | 	wrlong	muldivb_, objptr
039d8     90 FA 85 F1 | 	sub	objptr, #144
039dc                 | '   else
039dc     2C 00 90 FD | 	jmp	#LR__0129
039e0                 | LR__0128
039e0                 | '     cpl:=cpl/xzoom+1
039e0     90 FA 05 F1 | 	add	objptr, #144
039e4     FD 98 02 FB | 	rdlong	muldiva_, objptr
039e8     3C FA 05 F1 | 	add	objptr, #60
039ec     FD 9A 02 FB | 	rdlong	muldivb_, objptr
039f0     CC FA 85 F1 | 	sub	objptr, #204
039f4     C6 00 A0 FD | 	call	#divide_
039f8     4D 6F 02 F6 | 	mov	local02, muldivb_
039fc     01 6E 06 F1 | 	add	local02, #1
03a00     90 FA 05 F1 | 	add	objptr, #144
03a04     FD 6E 62 FC | 	wrlong	local02, objptr
03a08     90 FA 85 F1 | 	sub	objptr, #144
03a0c                 | LR__0129
03a0c                 | LR__0130
03a0c                 | ' 
03a0c                 | ' buflen:=(cpl*lines)
03a0c     90 FA 05 F1 | 	add	objptr, #144
03a10     FD 72 02 FB | 	rdlong	local04, objptr
03a14     04 FA 05 F1 | 	add	objptr, #4
03a18     FD 76 02 FB | 	rdlong	local06, objptr
03a1c     3B 73 02 FD | 	qmul	local04, local06
03a20     18 6E 62 FD | 	getqx	local02
03a24     64 FA 85 F1 | 	sub	objptr, #100
03a28     FD 6E 62 FC | 	wrlong	local02, objptr
03a2c                 | ' buf_ptr:=$80000-4*buflen
03a2c     37 73 02 F6 | 	mov	local04, local02
03a30     30 FA 85 F1 | 	sub	objptr, #48
03a34     02 72 66 F0 | 	shl	local04, #2
03a38     13 6E C6 F9 | 	decod	local02, #19
03a3c     39 6F 82 F1 | 	sub	local02, local04
03a40     FD 6E 62 FC | 	wrlong	local02, objptr
03a44                 | ' mode_ptr:=@timings
03a44     50 FA 05 F1 | 	add	objptr, #80
03a48     FD 6E 02 F6 | 	mov	local02, objptr
03a4c     3C FA 85 F1 | 	sub	objptr, #60
03a50     FD 6E 62 FC | 	wrlong	local02, objptr
03a54                 | ' graphmode:=mode
03a54     B0 FA 05 F1 | 	add	objptr, #176
03a58     FD 6C 62 FC | 	wrlong	local01, objptr
03a5c     C4 FA 85 F1 | 	sub	objptr, #196
03a60                 | ' makedl(mode)
03a60     36 5F 02 F6 | 	mov	arg01, local01
03a64     0C 00 B0 FD | 	call	#_hng030rm_spin2_makedl
03a68                 | LR__0131
03a68     AF F0 03 F6 | 	mov	ptra, fp
03a6c     BA 00 A0 FD | 	call	#popregs_
03a70                 | _hng030rm_spin2_setmode_ret
03a70     2D 00 64 FD | 	ret
03a74                 | 
03a74                 | ' 
03a74                 | ' 
03a74                 | ' 
03a74                 | ' 
03a74                 | ' '---------- Make a display list
03a74                 | ' 
03a74                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
03a74                 | _hng030rm_spin2_makedl
03a74                 | ' 
03a74                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
03a74                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
03a74                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
03a74                 | ' 
03a74                 | ' '   0 - display a up/down border line
03a74                 | ' 
03a74                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
03a74                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
03a74                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
03a74                 | ' '    nnnn - font line to display, 0..15
03a74                 | ' '    llllll - character line, determines the cursor Y position
03a74                 | ' 
03a74                 | ' 
03a74                 | ' if (mode &256==0)
03a74     00 5F CE F7 | 	test	arg01, #256 wz
03a78     1C 00 90 5D |  if_ne	jmp	#LR__0132
03a7c                 | '   dl_ptr:=buf_ptr-4*576
03a7c     FD 1E 02 FB | 	rdlong	_var01, objptr
03a80     04 00 00 FF 
03a84     00 1F 86 F1 | 	sub	_var01, ##2304
03a88     1C FA 05 F1 | 	add	objptr, #28
03a8c     FD 1E 62 FC | 	wrlong	_var01, objptr
03a90     1C FA 85 F1 | 	sub	objptr, #28
03a94                 | ' else
03a94     18 00 90 FD | 	jmp	#LR__0133
03a98                 | LR__0132
03a98                 | '   dl_ptr:=buf_ptr-4*496
03a98     FD 1E 02 FB | 	rdlong	_var01, objptr
03a9c     03 00 00 FF 
03aa0     C0 1F 86 F1 | 	sub	_var01, ##1984
03aa4     1C FA 05 F1 | 	add	objptr, #28
03aa8     FD 1E 62 FC | 	wrlong	_var01, objptr
03aac     1C FA 85 F1 | 	sub	objptr, #28
03ab0                 | LR__0133
03ab0                 | '  ' dl_ptr:=buf_ptr-4*540
03ab0                 | ' 
03ab0                 | ' vzoom:=((mode>>2) & 3)
03ab0     2F 21 02 F6 | 	mov	_var02, arg01
03ab4     02 20 46 F0 | 	shr	_var02, #2
03ab8     03 20 06 F5 | 	and	_var02, #3
03abc                 | ' 
03abc                 | ' 
03abc                 | ' if mode<512 '' text modes
03abc     01 00 00 FF 
03ac0     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
03ac4     E8 01 90 3D |  if_ae	jmp	#LR__0141
03ac8                 | ' 
03ac8                 | '   if timings[6]>0 'borders
03ac8     68 FA 05 F1 | 	add	objptr, #104
03acc     FD 1E 02 FB | 	rdlong	_var01, objptr
03ad0     68 FA 85 F1 | 	sub	objptr, #104
03ad4     00 1E 5E F2 | 	cmps	_var01, #0 wcz
03ad8     D4 00 90 ED |  if_be	jmp	#LR__0138
03adc                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03adc     00 22 06 F6 | 	mov	_var03, #0
03ae0     68 FA 05 F1 | 	add	objptr, #104
03ae4     FD 24 02 FB | 	rdlong	_var04, objptr
03ae8     68 FA 85 F1 | 	sub	objptr, #104
03aec     01 24 86 F1 | 	sub	_var04, #1
03af0     00 24 5E F2 | 	cmps	_var04, #0 wcz
03af4     01 26 06 16 |  if_a	mov	_var05, #1
03af8     01 26 66 E6 |  if_be	neg	_var05, #1
03afc     13 29 02 F6 | 	mov	_var06, _var05
03b00     13 25 02 F1 | 	add	_var04, _var05
03b04     20 C5 9F FE | 	loc	pa,	#(@LR__0135-@LR__0134)
03b08     93 00 A0 FD | 	call	#FCACHE_LOAD_
03b0c                 | LR__0134
03b0c                 | '       long[dl_ptr+4*i]:=$0
03b0c     1C FA 05 F1 | 	add	objptr, #28
03b10     FD 2A 02 FB | 	rdlong	_var07, objptr
03b14     1C FA 85 F1 | 	sub	objptr, #28
03b18     11 2D 02 F6 | 	mov	_var08, _var03
03b1c     02 2C 66 F0 | 	shl	_var08, #2
03b20     16 2B 02 F1 | 	add	_var07, _var08
03b24     15 01 68 FC | 	wrlong	#0, _var07
03b28     14 23 02 F1 | 	add	_var03, _var06
03b2c     12 23 0A F2 | 	cmp	_var03, _var04 wz
03b30     D8 FF 9F 5D |  if_ne	jmp	#LR__0134
03b34                 | LR__0135
03b34                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03b34     68 FA 05 F1 | 	add	objptr, #104
03b38     FD 22 02 FB | 	rdlong	_var03, objptr
03b3c     18 FA 05 F1 | 	add	objptr, #24
03b40     FD 26 02 FB | 	rdlong	_var05, objptr
03b44     13 23 02 F1 | 	add	_var03, _var05
03b48     0C FA 05 F1 | 	add	objptr, #12
03b4c     FD 2E 02 FB | 	rdlong	_var09, objptr
03b50     01 2E 86 F1 | 	sub	_var09, #1
03b54     24 FA 85 F1 | 	sub	objptr, #36
03b58     FD 30 02 FB | 	rdlong	_var10, objptr
03b5c     18 FA 05 F1 | 	add	objptr, #24
03b60     FD 32 02 FB | 	rdlong	_var11, objptr
03b64     80 FA 85 F1 | 	sub	objptr, #128
03b68     19 31 02 F1 | 	add	_var10, _var11
03b6c     18 2F 5A F2 | 	cmps	_var09, _var10 wcz
03b70     01 2C 06 16 |  if_a	mov	_var08, #1
03b74     01 2C 66 E6 |  if_be	neg	_var08, #1
03b78     16 35 02 F6 | 	mov	_var12, _var08
03b7c     16 2F 02 F1 | 	add	_var09, _var08
03b80     A4 C4 9F FE | 	loc	pa,	#(@LR__0137-@LR__0136)
03b84     93 00 A0 FD | 	call	#FCACHE_LOAD_
03b88                 | LR__0136
03b88                 | '       long[dl_ptr+4*i]:=$0
03b88     1C FA 05 F1 | 	add	objptr, #28
03b8c     FD 36 02 FB | 	rdlong	_var13, objptr
03b90     1C FA 85 F1 | 	sub	objptr, #28
03b94     11 39 02 F6 | 	mov	_var14, _var03
03b98     02 38 66 F0 | 	shl	_var14, #2
03b9c     1C 37 02 F1 | 	add	_var13, _var14
03ba0     1B 01 68 FC | 	wrlong	#0, _var13
03ba4     1A 23 02 F1 | 	add	_var03, _var12
03ba8     17 23 0A F2 | 	cmp	_var03, _var09 wz
03bac     D8 FF 9F 5D |  if_ne	jmp	#LR__0136
03bb0                 | LR__0137
03bb0                 | LR__0138
03bb0                 | '   lpc:=16<<vzoom
03bb0     10 3A 06 F6 | 	mov	_var15, #16
03bb4     10 3B 62 F0 | 	shl	_var15, _var02
03bb8                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03bb8     68 FA 05 F1 | 	add	objptr, #104
03bbc     FD 22 02 FB | 	rdlong	_var03, objptr
03bc0     11 3D 02 F6 | 	mov	_var16, _var03
03bc4     18 FA 05 F1 | 	add	objptr, #24
03bc8     FD 3E 02 FB | 	rdlong	_var17, objptr
03bcc     1F 3D 02 F1 | 	add	_var16, _var17
03bd0     01 3C 86 F1 | 	sub	_var16, #1
03bd4     18 FA 85 F1 | 	sub	objptr, #24
03bd8     FD 2C 02 FB | 	rdlong	_var08, objptr
03bdc     68 FA 85 F1 | 	sub	objptr, #104
03be0     16 3D 5A F2 | 	cmps	_var16, _var08 wcz
03be4     01 40 06 16 |  if_a	mov	_var18, #1
03be8     01 40 66 E6 |  if_be	neg	_var18, #1
03bec     20 43 02 F6 | 	mov	_var19, _var18
03bf0     20 3D 02 F1 | 	add	_var16, _var18
03bf4     BC C4 9F FE | 	loc	pa,	#(@LR__0140-@LR__0139)
03bf8     93 00 A0 FD | 	call	#FCACHE_LOAD_
03bfc                 | LR__0139
03bfc                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
03bfc     11 99 02 F6 | 	mov	muldiva_, _var03
03c00     68 FA 05 F1 | 	add	objptr, #104
03c04     FD 44 02 FB | 	rdlong	_var20, objptr
03c08     68 FA 85 F1 | 	sub	objptr, #104
03c0c     22 99 82 F1 | 	sub	muldiva_, _var20
03c10     1D 9B 02 F6 | 	mov	muldivb_, _var15
03c14     C2 00 A0 FD | 	call	#unsdivide_
03c18     10 99 42 F0 | 	shr	muldiva_, _var02
03c1c     4C 47 02 F6 | 	mov	_var21, muldiva_
03c20                 | '     charline:=(i-timings[6])+/lpc
03c20     11 99 02 F6 | 	mov	muldiva_, _var03
03c24     68 FA 05 F1 | 	add	objptr, #104
03c28     FD 48 02 FB | 	rdlong	_var22, objptr
03c2c     68 FA 85 F1 | 	sub	objptr, #104
03c30     24 99 82 F1 | 	sub	muldiva_, _var22
03c34     1D 9B 02 F6 | 	mov	muldivb_, _var15
03c38     C2 00 A0 FD | 	call	#unsdivide_
03c3c     4D 4B 02 F6 | 	mov	_var23, muldivb_
03c40                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
03c40     FD 32 02 FB | 	rdlong	_var11, objptr
03c44     90 FA 05 F1 | 	add	objptr, #144
03c48     FD 44 02 FB | 	rdlong	_var20, objptr
03c4c     25 45 02 FD | 	qmul	_var20, _var23
03c50     18 4C 62 FD | 	getqx	_var24
03c54     02 4C 66 F0 | 	shl	_var24, #2
03c58     26 33 02 F1 | 	add	_var11, _var24
03c5c     2F 39 02 F6 | 	mov	_var14, arg01
03c60     03 38 06 F5 | 	and	_var14, #3
03c64     1C 33 02 F1 | 	add	_var11, _var14
03c68                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03c68     0C 32 66 F0 | 	shl	_var11, #12
03c6c     23 49 02 F6 | 	mov	_var22, _var21
03c70     08 48 66 F0 | 	shl	_var22, #8
03c74     24 33 02 F1 | 	add	_var11, _var22
03c78     25 45 02 F6 | 	mov	_var20, _var23
03c7c     02 44 66 F0 | 	shl	_var20, #2
03c80     22 33 02 F1 | 	add	_var11, _var20
03c84     01 32 06 F1 | 	add	_var11, #1
03c88     74 FA 85 F1 | 	sub	objptr, #116
03c8c     FD 36 02 FB | 	rdlong	_var13, objptr
03c90     1C FA 85 F1 | 	sub	objptr, #28
03c94     11 39 02 F6 | 	mov	_var14, _var03
03c98     02 38 66 F0 | 	shl	_var14, #2
03c9c     1C 37 02 F1 | 	add	_var13, _var14
03ca0     1B 33 62 FC | 	wrlong	_var11, _var13
03ca4     21 23 02 F1 | 	add	_var03, _var19
03ca8     1E 23 0A F2 | 	cmp	_var03, _var16 wz
03cac     4C FF 9F 5D |  if_ne	jmp	#LR__0139
03cb0                 | LR__0140
03cb0                 | LR__0141
03cb0                 | ' 
03cb0                 | ' 
03cb0                 | ' 
03cb0                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
03cb0     01 00 00 FF 
03cb4     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
03cb8     A8 01 90 CD |  if_b	jmp	#LR__0149
03cbc                 | ' 
03cbc                 | '   if timings[6]>0 'borders
03cbc     68 FA 05 F1 | 	add	objptr, #104
03cc0     FD 1E 02 FB | 	rdlong	_var01, objptr
03cc4     68 FA 85 F1 | 	sub	objptr, #104
03cc8     00 1E 5E F2 | 	cmps	_var01, #0 wcz
03ccc     D4 00 90 ED |  if_be	jmp	#LR__0146
03cd0                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03cd0     00 22 06 F6 | 	mov	_var03, #0
03cd4     68 FA 05 F1 | 	add	objptr, #104
03cd8     FD 4E 02 FB | 	rdlong	_var25, objptr
03cdc     68 FA 85 F1 | 	sub	objptr, #104
03ce0     01 4E 86 F1 | 	sub	_var25, #1
03ce4     00 4E 5E F2 | 	cmps	_var25, #0 wcz
03ce8     01 26 06 16 |  if_a	mov	_var05, #1
03cec     01 26 66 E6 |  if_be	neg	_var05, #1
03cf0     13 51 02 F6 | 	mov	_var26, _var05
03cf4     13 4F 02 F1 | 	add	_var25, _var05
03cf8     2C C3 9F FE | 	loc	pa,	#(@LR__0143-@LR__0142)
03cfc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03d00                 | LR__0142
03d00                 | '       long[dl_ptr+4*i]:=$0
03d00     1C FA 05 F1 | 	add	objptr, #28
03d04     FD 2A 02 FB | 	rdlong	_var07, objptr
03d08     1C FA 85 F1 | 	sub	objptr, #28
03d0c     11 2D 02 F6 | 	mov	_var08, _var03
03d10     02 2C 66 F0 | 	shl	_var08, #2
03d14     16 2B 02 F1 | 	add	_var07, _var08
03d18     15 01 68 FC | 	wrlong	#0, _var07
03d1c     28 23 02 F1 | 	add	_var03, _var26
03d20     27 23 0A F2 | 	cmp	_var03, _var25 wz
03d24     D8 FF 9F 5D |  if_ne	jmp	#LR__0142
03d28                 | LR__0143
03d28                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03d28     68 FA 05 F1 | 	add	objptr, #104
03d2c     FD 22 02 FB | 	rdlong	_var03, objptr
03d30     18 FA 05 F1 | 	add	objptr, #24
03d34     FD 26 02 FB | 	rdlong	_var05, objptr
03d38     13 23 02 F1 | 	add	_var03, _var05
03d3c     0C FA 05 F1 | 	add	objptr, #12
03d40     FD 52 02 FB | 	rdlong	_var27, objptr
03d44     01 52 86 F1 | 	sub	_var27, #1
03d48     24 FA 85 F1 | 	sub	objptr, #36
03d4c     FD 30 02 FB | 	rdlong	_var10, objptr
03d50     18 FA 05 F1 | 	add	objptr, #24
03d54     FD 32 02 FB | 	rdlong	_var11, objptr
03d58     80 FA 85 F1 | 	sub	objptr, #128
03d5c     19 31 02 F1 | 	add	_var10, _var11
03d60     18 53 5A F2 | 	cmps	_var27, _var10 wcz
03d64     01 2C 06 16 |  if_a	mov	_var08, #1
03d68     01 2C 66 E6 |  if_be	neg	_var08, #1
03d6c     16 55 02 F6 | 	mov	_var28, _var08
03d70     16 53 02 F1 | 	add	_var27, _var08
03d74     B0 C2 9F FE | 	loc	pa,	#(@LR__0145-@LR__0144)
03d78     93 00 A0 FD | 	call	#FCACHE_LOAD_
03d7c                 | LR__0144
03d7c                 | '       long[dl_ptr+4*i]:=$0
03d7c     1C FA 05 F1 | 	add	objptr, #28
03d80     FD 36 02 FB | 	rdlong	_var13, objptr
03d84     1C FA 85 F1 | 	sub	objptr, #28
03d88     11 39 02 F6 | 	mov	_var14, _var03
03d8c     02 38 66 F0 | 	shl	_var14, #2
03d90     1C 37 02 F1 | 	add	_var13, _var14
03d94     1B 01 68 FC | 	wrlong	#0, _var13
03d98     2A 23 02 F1 | 	add	_var03, _var28
03d9c     29 23 0A F2 | 	cmp	_var03, _var27 wz
03da0     D8 FF 9F 5D |  if_ne	jmp	#LR__0144
03da4                 | LR__0145
03da4                 | LR__0146
03da4                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03da4     68 FA 05 F1 | 	add	objptr, #104
03da8     FD 22 02 FB | 	rdlong	_var03, objptr
03dac     11 57 02 F6 | 	mov	_var29, _var03
03db0     18 FA 05 F1 | 	add	objptr, #24
03db4     FD 3E 02 FB | 	rdlong	_var17, objptr
03db8     1F 57 02 F1 | 	add	_var29, _var17
03dbc     01 56 86 F1 | 	sub	_var29, #1
03dc0     18 FA 85 F1 | 	sub	objptr, #24
03dc4     FD 2C 02 FB | 	rdlong	_var08, objptr
03dc8     68 FA 85 F1 | 	sub	objptr, #104
03dcc     16 57 5A F2 | 	cmps	_var29, _var08 wcz
03dd0     01 40 06 16 |  if_a	mov	_var18, #1
03dd4     01 40 66 E6 |  if_be	neg	_var18, #1
03dd8     20 59 02 F6 | 	mov	_var30, _var18
03ddc     20 57 02 F1 | 	add	_var29, _var18
03de0     98 C2 9F FE | 	loc	pa,	#(@LR__0148-@LR__0147)
03de4     93 00 A0 FD | 	call	#FCACHE_LOAD_
03de8                 | LR__0147
03de8                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
03de8     FD 32 02 FB | 	rdlong	_var11, objptr
03dec     11 49 02 F6 | 	mov	_var22, _var03
03df0     68 FA 05 F1 | 	add	objptr, #104
03df4     FD 44 02 FB | 	rdlong	_var20, objptr
03df8     22 49 82 F1 | 	sub	_var22, _var20
03dfc     10 49 42 F0 | 	shr	_var22, _var02
03e00     28 FA 05 F1 | 	add	objptr, #40
03e04     FD 38 02 FB | 	rdlong	_var14, objptr
03e08     24 39 02 FD | 	qmul	_var14, _var22
03e0c     18 5A 62 FD | 	getqx	_var31
03e10     02 5A 66 F0 | 	shl	_var31, #2
03e14     2D 33 02 F1 | 	add	_var11, _var31
03e18     2F 5D 02 F6 | 	mov	_var32, arg01
03e1c     03 5C 06 F5 | 	and	_var32, #3
03e20     2E 33 02 F1 | 	add	_var11, _var32
03e24                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
03e24     0C 32 66 F0 | 	shl	_var11, #12
03e28     02 32 06 F1 | 	add	_var11, #2
03e2c     2F 49 02 F6 | 	mov	_var22, arg01
03e30     30 48 06 F5 | 	and	_var22, #48
03e34     02 48 46 F0 | 	shr	_var22, #2
03e38     24 33 02 F1 | 	add	_var11, _var22
03e3c     74 FA 85 F1 | 	sub	objptr, #116
03e40     FD 44 02 FB | 	rdlong	_var20, objptr
03e44     1C FA 85 F1 | 	sub	objptr, #28
03e48     11 4D 02 F6 | 	mov	_var24, _var03
03e4c     02 4C 66 F0 | 	shl	_var24, #2
03e50     26 45 02 F1 | 	add	_var20, _var24
03e54     22 33 62 FC | 	wrlong	_var11, _var20
03e58     2C 23 02 F1 | 	add	_var03, _var30
03e5c     2B 23 0A F2 | 	cmp	_var03, _var29 wz
03e60     84 FF 9F 5D |  if_ne	jmp	#LR__0147
03e64                 | LR__0148
03e64                 | LR__0149
03e64                 | _hng030rm_spin2_makedl_ret
03e64     2D 00 64 FD | 	ret
03e68                 | 
03e68                 | '       
03e68                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
03e68                 | ' 
03e68                 | ' pub start(mode,base):result
03e68                 | _hng030rm_spin2_start
03e68     02 5A 05 F6 | 	mov	COUNT_, #2
03e6c     B0 00 A0 FD | 	call	#pushregs_
03e70     2F 6D 02 F6 | 	mov	local01, arg01
03e74                 | ' 
03e74                 | ' ' initialize pointers and variables
03e74                 | ' 
03e74                 | ' border_ptr:=@bordercolor
03e74     2C FA 05 F1 | 	add	objptr, #44
03e78     FD 6E 02 F6 | 	mov	local02, objptr
03e7c     24 FA 85 F1 | 	sub	objptr, #36
03e80     FD 6E 62 FC | 	wrlong	local02, objptr
03e84                 | ' font_ptr:=@st_font
03e84     08 00 00 FF 
03e88     00 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
03e8c     04 FA 85 F1 | 	sub	objptr, #4
03e90     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
03e94                 | ' hdmibase:=base
03e94     20 FA 05 F1 | 	add	objptr, #32
03e98     FD 60 62 FC | 	wrlong	arg02, objptr
03e9c     24 FA 85 F1 | 	sub	objptr, #36
03ea0                 | ' p1:=@putpixel1
03ea0     FD 5E 02 F6 | 	mov	arg01, objptr
03ea4     05 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
03ea8     08 00 00 FF 
03eac     00 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
03eb0     7C 2E B0 FD | 	call	#__system___make_methodptr
03eb4     DC FA 05 F1 | 	add	objptr, #220
03eb8     FD 18 62 FC | 	wrlong	result1, objptr
03ebc     DC FA 85 F1 | 	sub	objptr, #220
03ec0                 | ' p2:=@putpixel2
03ec0     FD 5E 02 F6 | 	mov	arg01, objptr
03ec4     06 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
03ec8     64 2E B0 FD | 	call	#__system___make_methodptr
03ecc     E0 FA 05 F1 | 	add	objptr, #224
03ed0     FD 18 62 FC | 	wrlong	result1, objptr
03ed4     E0 FA 85 F1 | 	sub	objptr, #224
03ed8                 | ' p4:=@putpixel4
03ed8     FD 5E 02 F6 | 	mov	arg01, objptr
03edc     07 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
03ee0     4C 2E B0 FD | 	call	#__system___make_methodptr
03ee4     E4 FA 05 F1 | 	add	objptr, #228
03ee8     FD 18 62 FC | 	wrlong	result1, objptr
03eec     E4 FA 85 F1 | 	sub	objptr, #228
03ef0                 | ' p8:=@putpixel8
03ef0     FD 5E 02 F6 | 	mov	arg01, objptr
03ef4     08 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
03ef8     34 2E B0 FD | 	call	#__system___make_methodptr
03efc     E8 FA 05 F1 | 	add	objptr, #232
03f00     FD 18 62 FC | 	wrlong	result1, objptr
03f04     E8 FA 85 F1 | 	sub	objptr, #232
03f08                 | ' 
03f08                 | ' 
03f08                 | ' ' the mode has to be set here to enable computing the buffer length
03f08                 | ' 
03f08                 | ' setmode(mode)
03f08     36 5F 02 F6 | 	mov	arg01, local01
03f0c     80 F5 BF FD | 	call	#_hng030rm_spin2_setmode
03f10                 | ' 
03f10                 | ' vblank_ptr:=@vblank
03f10     40 FA 05 F1 | 	add	objptr, #64
03f14     FD 6E 02 F6 | 	mov	local02, objptr
03f18     34 FA 85 F1 | 	sub	objptr, #52
03f1c     FD 6E 62 FC | 	wrlong	local02, objptr
03f20                 | ' cursor_ptr:=@cursor_x
03f20     28 FA 05 F1 | 	add	objptr, #40
03f24     FD 6E 02 F6 | 	mov	local02, objptr
03f28     24 FA 85 F1 | 	sub	objptr, #36
03f2c     FD 6E 62 FC | 	wrlong	local02, objptr
03f30                 | ' 
03f30                 | ' fontnum_ptr:=@fontnum
03f30     88 FA 05 F1 | 	add	objptr, #136
03f34     FD 6E 02 F6 | 	mov	local02, objptr
03f38     78 FA 85 F1 | 	sub	objptr, #120
03f3c     FD 6E 62 FC | 	wrlong	local02, objptr
03f40                 | ' 
03f40                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
03f40     78 FA 05 F1 | 	add	objptr, #120
03f44     FD 00 68 FC | 	wrlong	#0, objptr
03f48                 | ' bytemove(@colors,@vgacolors,16)
03f48     1C FA 05 F1 | 	add	objptr, #28
03f4c     FD 5E 02 F6 | 	mov	arg01, objptr
03f50     B4 FA 85 F1 | 	sub	objptr, #180
03f54     0F 00 00 FF 
03f58     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
03f5c     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03f60     0F 00 00 FF 
03f64     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
03f68     10 62 06 F6 | 	mov	arg03, #16
03f6c     90 2C B0 FD | 	call	#__system____builtin_memmove
03f70                 | ' 
03f70                 | ' ' initialize a cursor
03f70                 | ' 
03f70                 | ' cursor_x:=0
03f70     34 FA 05 F1 | 	add	objptr, #52
03f74     FD 00 48 FC | 	wrbyte	#0, objptr
03f78                 | ' cursor_y:=0
03f78     01 FA 05 F1 | 	add	objptr, #1
03f7c     FD 00 48 FC | 	wrbyte	#0, objptr
03f80                 | ' cursor_sh:=14
03f80     01 FA 05 F1 | 	add	objptr, #1
03f84     FD 1C 48 FC | 	wrbyte	#14, objptr
03f88     36 FA 85 F1 | 	sub	objptr, #54
03f8c                 | ' 
03f8c                 | ' 
03f8c                 | ' ' start the cog
03f8c                 | ' 
03f8c                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
03f8c     0F 00 00 FF 
03f90     68 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
03f94     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03f98     0F 00 00 FF 
03f9c     68 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
03fa0     FD 62 02 F6 | 	mov	arg03, objptr
03fa4     10 5E 06 F6 | 	mov	arg01, #16
03fa8     28 62 62 FD | 	setq	arg03
03fac     30 5F F2 FC | 	coginit	arg01, arg02 wc
03fb0     01 5E 66 C6 |  if_b	neg	arg01, #1
03fb4     2F 19 02 F6 | 	mov	result1, arg01
03fb8     28 FA 05 F1 | 	add	objptr, #40
03fbc     FD 18 62 FC | 	wrlong	result1, objptr
03fc0     28 FA 85 F1 | 	sub	objptr, #40
03fc4                 | ' waitms(20)
03fc4     14 5E 06 F6 | 	mov	arg01, #20
03fc8     70 2F B0 FD | 	call	#__system___waitms
03fcc                 | ' 
03fcc                 | ' ' clear the screen and set the colors to green on black
03fcc                 | ' 
03fcc                 | ' cls(c_green,c_black)
03fcc     C7 5E 06 F6 | 	mov	arg01, #199
03fd0     00 60 06 F6 | 	mov	arg02, #0
03fd4     F8 EC BF FD | 	call	#_hng030rm_spin2_cls
03fd8                 | ' setbordercolor(0,0,128)
03fd8     00 5E 06 F6 | 	mov	arg01, #0
03fdc     00 60 06 F6 | 	mov	arg02, #0
03fe0     80 62 06 F6 | 	mov	arg03, #128
03fe4     94 EC BF FD | 	call	#_hng030rm_spin2_setbordercolor
03fe8                 | ' setwritecolors(c_green,c_black)
03fe8                 | ' 
03fe8                 | ' 
03fe8                 | ' write_color:=ff
03fe8     38 FA 05 F1 | 	add	objptr, #56
03fec     FD 8E 69 FC | 	wrlong	#199, objptr
03ff0                 | ' write_background:=bb
03ff0     04 FA 05 F1 | 	add	objptr, #4
03ff4     FD 00 68 FC | 	wrlong	#0, objptr
03ff8                 | ' 
03ff8                 | ' return cog
03ff8     14 FA 85 F1 | 	sub	objptr, #20
03ffc     FD 18 02 FB | 	rdlong	result1, objptr
04000     28 FA 85 F1 | 	sub	objptr, #40
04004     AF F0 03 F6 | 	mov	ptra, fp
04008     BA 00 A0 FD | 	call	#popregs_
0400c                 | _hng030rm_spin2_start_ret
0400c     2D 00 64 FD | 	ret
04010                 | 
04010                 | ' 'this is the object and not a program
04010                 | ' 
04010                 | ' pub start() :cog
04010                 | _retrocog_spin2_start
04010     02 5A 05 F6 | 	mov	COUNT_, #2
04014     B0 00 A0 FD | 	call	#pushregs_
04018                 | ' 
04018                 | ' cog:=cogspin(16,serialcog(),@serialstack)
04018     FD 6C 02 F6 | 	mov	local01, objptr
0401c     01 00 00 FF 
04020     40 FB 05 F1 | 	add	objptr, ##832
04024     FD 6E 02 F6 | 	mov	local02, objptr
04028     37 6D 62 FC | 	wrlong	local01, local02
0402c     04 6E 06 F1 | 	add	local02, #4
04030     37 13 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
04034     FD 62 02 F6 | 	mov	arg03, objptr
04038     01 00 00 FF 
0403c     40 FB 85 F1 | 	sub	objptr, ##832
04040     10 5E 06 F6 | 	mov	arg01, #16
04044     28 62 62 FD | 	setq	arg03
04048     FA 5E F2 FC | 	coginit	arg01, entryptr__ wc
0404c     01 5E 66 C6 |  if_b	neg	arg01, #1
04050     2F 19 02 F6 | 	mov	result1, arg01
04054                 | ' return cog
04054     AF F0 03 F6 | 	mov	ptra, fp
04058     BA 00 A0 FD | 	call	#popregs_
0405c                 | _retrocog_spin2_start_ret
0405c     2D 00 64 FD | 	ret
04060                 | 
04060                 | ' 
04060                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
04060                 | _retrocog_spin2_serialcog
04060     0C 5A 05 F6 | 	mov	COUNT_, #12
04064     B0 00 A0 FD | 	call	#pushregs_
04068                 | ' 
04068                 | ' 'start serial and midi
04068                 | ' 
04068                 | ' serial_start(rxpin, txpin, baudrate)
04068     20 5E 06 F6 | 	mov	arg01, #32
0406c     21 60 06 F6 | 	mov	arg02, #33
04070     A6 0E 00 FF 
04074     00 62 06 F6 | 	mov	arg03, ##1920000
04078     C0 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0407c                 | ' serial_start(midiin,midiout,mbaudrate)
0407c     1D 5E 06 F6 | 	mov	arg01, #29
04080     1E 60 06 F6 | 	mov	arg02, #30
04084     3D 00 00 FF 
04088     12 62 06 F6 | 	mov	arg03, ##31250
0408c     AC 05 B0 FD | 	call	#_retrocog_spin2_serial_start
04090                 | ' serial_start(srxpin,stxpin,sbaudrate)
04090     3E 6C 06 F6 | 	mov	local01, #62
04094     42 0F 00 FF 
04098     80 6E 06 F6 | 	mov	local02, ##2000000
0409c     3F 5E 06 F6 | 	mov	arg01, #63
040a0     3E 60 06 F6 | 	mov	arg02, #62
040a4     42 0F 00 FF 
040a8     80 62 06 F6 | 	mov	arg03, ##2000000
040ac     8C 05 B0 FD | 	call	#_retrocog_spin2_serial_start
040b0                 | ' 
040b0                 | ' mb:=(-1)
040b0     01 70 66 F6 | 	neg	local03, #1
040b4                 | ' b:=(-1)
040b4     01 72 66 F6 | 	neg	local04, #1
040b8                 | ' 
040b8                 | ' mousefront:=0
040b8     00 74 06 F6 | 	mov	local05, #0
040bc     08 FA 05 F1 | 	add	objptr, #8
040c0     FD 00 68 FC | 	wrlong	#0, objptr
040c4                 | ' mousetail:=0
040c4     04 FA 05 F1 | 	add	objptr, #4
040c8     FD 00 68 FC | 	wrlong	#0, objptr
040cc     0C FA 85 F1 | 	sub	objptr, #12
040d0                 | ' kbdfront:=0
040d0     FD 00 68 FC | 	wrlong	#0, objptr
040d4                 | ' kbdtail:=0
040d4     04 FA 05 F1 | 	add	objptr, #4
040d8     FD 00 68 FC | 	wrlong	#0, objptr
040dc                 | ' midifront:=0
040dc     0C FA 05 F1 | 	add	objptr, #12
040e0     FD 00 68 FC | 	wrlong	#0, objptr
040e4                 | ' miditail:=0
040e4     04 FA 05 F1 | 	add	objptr, #4
040e8     FD 00 68 FC | 	wrlong	#0, objptr
040ec                 | ' serialfront:=0
040ec     04 FA 05 F1 | 	add	objptr, #4
040f0     FD 00 68 FC | 	wrlong	#0, objptr
040f4                 | ' serialtail:=0
040f4     04 FA 05 F1 | 	add	objptr, #4
040f8     FD 00 68 FC | 	wrlong	#0, objptr
040fc                 | ' long[$30]:=0
040fc     30 00 6C FC | 	wrlong	#0, #48
04100                 | ' long[$34]:=0
04100     34 00 6C FC | 	wrlong	#0, #52
04104                 | ' long[$38]:=0
04104     38 00 6C FC | 	wrlong	#0, #56
04108     1C FA 85 F1 | 	sub	objptr, #28
0410c                 | ' long[$3C]:=0
0410c     3C 00 6C FC | 	wrlong	#0, #60
04110                 | ' 
04110                 | ' repeat
04110                 | LR__0150
04110                 | ' 
04110                 | ' '  repeat 
04110                 | '   rr:=rxcheck(rxpin)
04110     20 5E 06 F6 | 	mov	arg01, #32
04114     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
04118     0C 77 02 F6 | 	mov	local06, result1
0411c                 | '   mrr:=rxcheck(midiin)
0411c     1D 5E 06 F6 | 	mov	arg01, #29
04120     94 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
04124     0C 79 02 F6 | 	mov	local07, result1
04128                 | '   srr:=rxcheck(srxpin)
04128     3F 5E 06 F6 | 	mov	arg01, #63
0412c     88 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
04130     0C 75 02 F6 | 	mov	local05, result1
04134     3A 7B 02 F6 | 	mov	local08, local05
04138                 | ' 
04138                 | ' '  until rr>=0 || mrr>=0  || srr>=0
04138                 | ' 
04138                 | '   
04138                 | ' ' midi. Must be >= $80 for a command
04138                 | ' '$80-$8F - 3 bytes note off. note, velocity
04138                 | ' '$90-$9F - 3 bytes note on, note, velocity
04138                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
04138                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
04138                 | ' '$C0-$CF - 2 bytes program change
04138                 | ' '$D0-$DF - 2 bytes mono aftertouch
04138                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
04138                 | ' '$F0-$FF - 1 byte
04138                 | '   
04138                 | '   if srr>=0
04138     00 7A 5E F2 | 	cmps	local08, #0 wcz
0413c     78 00 90 CD |  if_b	jmp	#LR__0152
04140                 | '   
04140                 | '     if serialfront<>((serialtail-1) //32)
04140     1C FA 05 F1 | 	add	objptr, #28
04144     FD 6C 02 FB | 	rdlong	local01, objptr
04148     36 75 02 F6 | 	mov	local05, local01
0414c     01 74 86 F1 | 	sub	local05, #1
04150     3A 6F 52 F6 | 	abs	local02, local05 wc
04154     1F 6E 06 F5 | 	and	local02, #31
04158     37 6F 62 C6 |  if_b	neg	local02, local02
0415c     04 FA 85 F1 | 	sub	objptr, #4
04160     FD 7C 02 FB | 	rdlong	local09, objptr
04164     18 FA 85 F1 | 	sub	objptr, #24
04168     3E 7F 02 F6 | 	mov	local10, local09
0416c     37 7F 0A F2 | 	cmp	local10, local02 wz
04170     44 00 90 AD |  if_e	jmp	#LR__0151
04174                 | '       serialbuf[serialfront]:=srr
04174     18 FA 05 F1 | 	add	objptr, #24
04178     FD 74 02 FB | 	rdlong	local05, objptr
0417c     01 00 00 FF 
04180     08 FB 05 F1 | 	add	objptr, ##776
04184     FD 74 02 F1 | 	add	local05, objptr
04188     3A 7B 42 FC | 	wrbyte	local08, local05
0418c                 | '       serialfront+=1
0418c     01 00 00 FF 
04190     08 FB 85 F1 | 	sub	objptr, ##776
04194     FD 6E 02 FB | 	rdlong	local02, objptr
04198     01 6E 06 F1 | 	add	local02, #1
0419c     FD 6E 62 FC | 	wrlong	local02, objptr
041a0                 | '       serialfront:=serialfront // 32
041a0     37 6D 02 F6 | 	mov	local01, local02
041a4     36 75 52 F6 | 	abs	local05, local01 wc
041a8     1F 74 06 F5 | 	and	local05, #31
041ac     3A 75 62 C6 |  if_b	neg	local05, local05
041b0     FD 74 62 FC | 	wrlong	local05, objptr
041b4     18 FA 85 F1 | 	sub	objptr, #24
041b8                 | LR__0151
041b8                 | LR__0152
041b8                 | '     
041b8                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
041b8     80 78 5E F2 | 	cmps	local07, #128 wcz
041bc     08 00 90 CD |  if_b	jmp	#LR__0153
041c0     BF 78 5E F2 | 	cmps	local07, #191 wcz
041c4     10 00 90 ED |  if_be	jmp	#LR__0154
041c8                 | LR__0153
041c8     E0 78 5E F2 | 	cmps	local07, #224 wcz
041cc     18 00 90 CD |  if_b	jmp	#LR__0155
041d0     EF 78 5E F2 | 	cmps	local07, #239 wcz
041d4     10 00 90 1D |  if_a	jmp	#LR__0155
041d8                 | LR__0154
041d8                 | '     mb:=2
041d8     02 70 06 F6 | 	mov	local03, #2
041dc                 | '     midireport:=mrr<<24
041dc     3C 75 02 F6 | 	mov	local05, local07
041e0     18 74 66 F0 | 	shl	local05, #24
041e4     3A 81 02 F6 | 	mov	local11, local05
041e8                 | LR__0155
041e8                 | ' 
041e8                 | '   if (mrr>=$C0) && (mrr<=$DF)
041e8     C0 78 5E F2 | 	cmps	local07, #192 wcz
041ec     18 00 90 CD |  if_b	jmp	#LR__0156
041f0     DF 78 5E F2 | 	cmps	local07, #223 wcz
041f4     10 00 90 1D |  if_a	jmp	#LR__0156
041f8                 | '     mb:=1
041f8     01 70 06 F6 | 	mov	local03, #1
041fc                 | '     midireport:=mrr<<24
041fc     3C 75 02 F6 | 	mov	local05, local07
04200     18 74 66 F0 | 	shl	local05, #24
04204     3A 81 02 F6 | 	mov	local11, local05
04208                 | LR__0156
04208                 | '   
04208                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
04208     F0 78 5E F2 | 	cmps	local07, #240 wcz
0420c                 | '     mb:=4
0420c     04 70 06 36 |  if_ae	mov	local03, #4
04210                 | '     midireport:=mrr<<24  
04210     3C 81 02 36 |  if_ae	mov	local11, local07
04214     18 80 66 30 |  if_ae	shl	local11, #24
04218                 | '   
04218                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
04218     80 78 5E F2 | 	cmps	local07, #128 wcz
0421c     44 00 90 3D |  if_ae	jmp	#LR__0158
04220     00 70 5E F2 | 	cmps	local03, #0 wcz
04224     3C 00 90 ED |  if_be	jmp	#LR__0158
04228     00 78 5E F2 | 	cmps	local07, #0 wcz
0422c     34 00 90 CD |  if_b	jmp	#LR__0158
04230                 | '     
04230                 | '     mb--
04230     38 75 02 F6 | 	mov	local05, local03
04234     38 6D 02 F6 | 	mov	local01, local03
04238     01 6C 86 F1 | 	sub	local01, #1
0423c     36 71 02 F6 | 	mov	local03, local01
04240                 | '     if mb<3
04240     03 70 5E F2 | 	cmps	local03, #3 wcz
04244     1C 00 90 3D |  if_ae	jmp	#LR__0157
04248                 | '       midireport+=mrr<<(mb<<3)
04248     40 75 02 F6 | 	mov	local05, local11
0424c     3C 6D 02 F6 | 	mov	local01, local07
04250     38 6F 02 F6 | 	mov	local02, local03
04254     03 6E 66 F0 | 	shl	local02, #3
04258     37 6D 62 F0 | 	shl	local01, local02
0425c     36 75 02 F1 | 	add	local05, local01
04260     3A 81 02 F6 | 	mov	local11, local05
04264                 | LR__0157
04264                 | LR__0158
04264                 | '   
04264                 | '   if mb==0
04264     00 70 0E F2 | 	cmp	local03, #0 wz
04268     80 00 90 5D |  if_ne	jmp	#LR__0160
0426c                 | '     
0426c                 | '     if midifront<>((miditail-1) //32)
0426c     14 FA 05 F1 | 	add	objptr, #20
04270     FD 6C 02 FB | 	rdlong	local01, objptr
04274     36 75 02 F6 | 	mov	local05, local01
04278     01 74 86 F1 | 	sub	local05, #1
0427c     3A 6F 52 F6 | 	abs	local02, local05 wc
04280     1F 6E 06 F5 | 	and	local02, #31
04284     37 6F 62 C6 |  if_b	neg	local02, local02
04288     04 FA 85 F1 | 	sub	objptr, #4
0428c     FD 7C 02 FB | 	rdlong	local09, objptr
04290     10 FA 85 F1 | 	sub	objptr, #16
04294     3E 7F 02 F6 | 	mov	local10, local09
04298     37 7F 0A F2 | 	cmp	local10, local02 wz
0429c     48 00 90 AD |  if_e	jmp	#LR__0159
042a0                 | '       midibuf[midifront]:=midireport
042a0     10 FA 05 F1 | 	add	objptr, #16
042a4     FD 74 02 FB | 	rdlong	local05, objptr
042a8     02 74 66 F0 | 	shl	local05, #2
042ac     01 00 00 FF 
042b0     90 FA 05 F1 | 	add	objptr, ##656
042b4     FD 74 02 F1 | 	add	local05, objptr
042b8     3A 81 62 FC | 	wrlong	local11, local05
042bc                 | '       midifront+=1
042bc     01 00 00 FF 
042c0     90 FA 85 F1 | 	sub	objptr, ##656
042c4     FD 6E 02 FB | 	rdlong	local02, objptr
042c8     01 6E 06 F1 | 	add	local02, #1
042cc     FD 6E 62 FC | 	wrlong	local02, objptr
042d0                 | '       midifront:=midifront // 32
042d0     37 6D 02 F6 | 	mov	local01, local02
042d4     36 75 52 F6 | 	abs	local05, local01 wc
042d8     1F 74 06 F5 | 	and	local05, #31
042dc     3A 75 62 C6 |  if_b	neg	local05, local05
042e0     FD 74 62 FC | 	wrlong	local05, objptr
042e4     10 FA 85 F1 | 	sub	objptr, #16
042e8                 | LR__0159
042e8                 | '     mb:=(-1)
042e8     01 70 66 F6 | 	neg	local03, #1
042ec                 | LR__0160
042ec                 | ' 
042ec                 | ' 'Keyboard and mouse
042ec                 | ' 
042ec                 | '   if (rr>=$80) && (rr<>$FF)
042ec     80 76 5E F2 | 	cmps	local06, #128 wcz
042f0     18 00 90 CD |  if_b	jmp	#LR__0161
042f4     FF 76 0E F2 | 	cmp	local06, #255 wz
042f8     10 00 90 AD |  if_e	jmp	#LR__0161
042fc                 | '     b:=3
042fc     03 72 06 F6 | 	mov	local04, #3
04300                 | '     kbmreport:=rr<<24
04300     3B 75 02 F6 | 	mov	local05, local06
04304     18 74 66 F0 | 	shl	local05, #24
04308     3A 83 02 F6 | 	mov	local12, local05
0430c                 | LR__0161
0430c                 | '   
0430c                 | '   if (rr<$80) && (b>0) && (rr>=0)
0430c     80 76 5E F2 | 	cmps	local06, #128 wcz
04310     30 00 90 3D |  if_ae	jmp	#LR__0162
04314     00 72 5E F2 | 	cmps	local04, #0 wcz
04318     28 00 90 ED |  if_be	jmp	#LR__0162
0431c     00 76 5E F2 | 	cmps	local06, #0 wcz
04320     20 00 90 CD |  if_b	jmp	#LR__0162
04324                 | '     b--
04324     01 72 86 F1 | 	sub	local04, #1
04328                 | '     kbmreport+=rr<<(b<<3)  
04328     41 75 02 F6 | 	mov	local05, local12
0432c     3B 6D 02 F6 | 	mov	local01, local06
04330     39 6F 02 F6 | 	mov	local02, local04
04334     03 6E 66 F0 | 	shl	local02, #3
04338     37 6D 62 F0 | 	shl	local01, local02
0433c     36 75 02 F1 | 	add	local05, local01
04340     3A 83 02 F6 | 	mov	local12, local05
04344                 | LR__0162
04344                 | '   
04344                 | '   if (rr==$FF)
04344     FF 76 0E F2 | 	cmp	local06, #255 wz
04348                 | '     b:=0   
04348     00 72 06 A6 |  if_e	mov	local04, #0
0434c                 | ' 
0434c                 | '   if b==0  
0434c     00 72 0E F2 | 	cmp	local04, #0 wz
04350     0C 01 90 5D |  if_ne	jmp	#LR__0167
04354                 | '  
04354                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
04354     00 00 40 FF 
04358     00 82 1E F2 | 	cmp	local12, ##-2147483648 wcz
0435c     80 00 90 CD |  if_b	jmp	#LR__0164
04360     00 80 43 FF 
04364     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
04368     74 00 90 3D |  if_ae	jmp	#LR__0164
0436c                 | '       if mousefront<>((mousetail-1) //128)
0436c     0C FA 05 F1 | 	add	objptr, #12
04370     FD 6C 02 FB | 	rdlong	local01, objptr
04374     36 75 02 F6 | 	mov	local05, local01
04378     01 74 86 F1 | 	sub	local05, #1
0437c     3A 6F 52 F6 | 	abs	local02, local05 wc
04380     7F 6E 06 F5 | 	and	local02, #127
04384     37 6F 62 C6 |  if_b	neg	local02, local02
04388     04 FA 85 F1 | 	sub	objptr, #4
0438c     FD 7C 02 FB | 	rdlong	local09, objptr
04390     08 FA 85 F1 | 	sub	objptr, #8
04394     3E 7F 02 F6 | 	mov	local10, local09
04398     37 7F 0A F2 | 	cmp	local10, local02 wz
0439c     40 00 90 AD |  if_e	jmp	#LR__0163
043a0                 | '         mousebuf[mousefront]:=kbmreport
043a0     08 FA 05 F1 | 	add	objptr, #8
043a4     FD 74 02 FB | 	rdlong	local05, objptr
043a8     02 74 66 F0 | 	shl	local05, #2
043ac     98 FA 05 F1 | 	add	objptr, #152
043b0     FD 74 02 F1 | 	add	local05, objptr
043b4     3A 83 62 FC | 	wrlong	local12, local05
043b8                 | '         mousefront+=1
043b8     98 FA 85 F1 | 	sub	objptr, #152
043bc     FD 6E 02 FB | 	rdlong	local02, objptr
043c0     01 6E 06 F1 | 	add	local02, #1
043c4     FD 6E 62 FC | 	wrlong	local02, objptr
043c8                 | '         mousefront:=mousefront // 128
043c8     37 6D 02 F6 | 	mov	local01, local02
043cc     36 75 52 F6 | 	abs	local05, local01 wc
043d0     7F 74 06 F5 | 	and	local05, #127
043d4     3A 75 62 C6 |  if_b	neg	local05, local05
043d8     FD 74 62 FC | 	wrlong	local05, objptr
043dc     08 FA 85 F1 | 	sub	objptr, #8
043e0                 | LR__0163
043e0                 | LR__0164
043e0                 | '     b:=(-1)
043e0     01 72 66 F6 | 	neg	local04, #1
043e4                 | ' 
043e4                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
043e4     00 80 43 FF 
043e8     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
043ec     6C 00 90 CD |  if_b	jmp	#LR__0166
043f0     00 00 45 FF 
043f4     00 82 1E F2 | 	cmp	local12, ##-1979711488 wcz
043f8     60 00 90 3D |  if_ae	jmp	#LR__0166
043fc                 | '       if kbdfront<>((kbdtail-1) //32)
043fc     04 FA 05 F1 | 	add	objptr, #4
04400     FD 6C 02 FB | 	rdlong	local01, objptr
04404     04 FA 85 F1 | 	sub	objptr, #4
04408     36 75 02 F6 | 	mov	local05, local01
0440c     01 74 86 F1 | 	sub	local05, #1
04410     3A 6F 52 F6 | 	abs	local02, local05 wc
04414     1F 6E 06 F5 | 	and	local02, #31
04418     37 6F 62 C6 |  if_b	neg	local02, local02
0441c     FD 7E 02 FB | 	rdlong	local10, objptr
04420     37 7F 0A F2 | 	cmp	local10, local02 wz
04424     34 00 90 AD |  if_e	jmp	#LR__0165
04428                 | '         kbdbuf[kbdfront]:=kbmreport
04428     FD 74 02 FB | 	rdlong	local05, objptr
0442c     02 74 66 F0 | 	shl	local05, #2
04430     20 FA 05 F1 | 	add	objptr, #32
04434     FD 74 02 F1 | 	add	local05, objptr
04438     3A 83 62 FC | 	wrlong	local12, local05
0443c                 | '         kbdfront+=1
0443c     20 FA 85 F1 | 	sub	objptr, #32
04440     FD 6C 02 FB | 	rdlong	local01, objptr
04444     01 6C 06 F1 | 	add	local01, #1
04448     FD 6C 62 FC | 	wrlong	local01, objptr
0444c                 | '         kbdfront:=kbdfront // 32
0444c     36 75 52 F6 | 	abs	local05, local01 wc
04450     1F 74 06 F5 | 	and	local05, #31
04454     3A 75 62 C6 |  if_b	neg	local05, local05
04458     FD 74 62 FC | 	wrlong	local05, objptr
0445c                 | LR__0165
0445c                 | LR__0166
0445c                 | '     b:=(-1)
0445c     01 72 66 F6 | 	neg	local04, #1
04460                 | LR__0167
04460                 | ' 
04460                 | ' 
04460                 | '   if long[$30]==0
04460     30 74 0E FB | 	rdlong	local05, #48 wz
04464     64 00 90 5D |  if_ne	jmp	#LR__0169
04468                 | '     if kbdfront<>kbdtail
04468     FD 74 02 FB | 	rdlong	local05, objptr
0446c     04 FA 05 F1 | 	add	objptr, #4
04470     FD 6E 02 FB | 	rdlong	local02, objptr
04474     04 FA 85 F1 | 	sub	objptr, #4
04478     37 6D 02 F6 | 	mov	local01, local02
0447c     36 75 0A F2 | 	cmp	local05, local01 wz
04480     48 00 90 AD |  if_e	jmp	#LR__0168
04484                 | '       long[$30]:=kbdbuf[kbdtail]
04484     04 FA 05 F1 | 	add	objptr, #4
04488     FD 74 02 FB | 	rdlong	local05, objptr
0448c     02 74 66 F0 | 	shl	local05, #2
04490     1C FA 05 F1 | 	add	objptr, #28
04494     FD 74 02 F1 | 	add	local05, objptr
04498     3A 7F 02 FB | 	rdlong	local10, local05
0449c     30 7E 66 FC | 	wrlong	local10, #48
044a0                 | '       kbdtail++
044a0     1C FA 85 F1 | 	sub	objptr, #28
044a4     FD 7E 02 FB | 	rdlong	local10, objptr
044a8     3F 6F 02 F6 | 	mov	local02, local10
044ac     01 6E 06 F1 | 	add	local02, #1
044b0     FD 6E 62 FC | 	wrlong	local02, objptr
044b4                 | '       kbdtail:= kbdtail // 32
044b4     37 6D 02 F6 | 	mov	local01, local02
044b8     36 75 52 F6 | 	abs	local05, local01 wc
044bc     1F 74 06 F5 | 	and	local05, #31
044c0     3A 75 62 C6 |  if_b	neg	local05, local05
044c4     FD 74 62 FC | 	wrlong	local05, objptr
044c8     04 FA 85 F1 | 	sub	objptr, #4
044cc                 | LR__0168
044cc                 | LR__0169
044cc                 | '       
044cc                 | '   if long[$34]==0
044cc     34 74 0E FB | 	rdlong	local05, #52 wz
044d0     68 00 90 5D |  if_ne	jmp	#LR__0171
044d4                 | '     if mousefront<>mousetail
044d4     08 FA 05 F1 | 	add	objptr, #8
044d8     FD 6C 02 FB | 	rdlong	local01, objptr
044dc     04 FA 05 F1 | 	add	objptr, #4
044e0     FD 7E 02 FB | 	rdlong	local10, objptr
044e4     0C FA 85 F1 | 	sub	objptr, #12
044e8     3F 6F 02 F6 | 	mov	local02, local10
044ec     37 6D 0A F2 | 	cmp	local01, local02 wz
044f0     48 00 90 AD |  if_e	jmp	#LR__0170
044f4                 | '       long[$34]:=mousebuf[mousetail]
044f4     0C FA 05 F1 | 	add	objptr, #12
044f8     FD 74 02 FB | 	rdlong	local05, objptr
044fc     02 74 66 F0 | 	shl	local05, #2
04500     94 FA 05 F1 | 	add	objptr, #148
04504     FD 74 02 F1 | 	add	local05, objptr
04508     3A 7F 02 FB | 	rdlong	local10, local05
0450c     34 7E 66 FC | 	wrlong	local10, #52
04510                 | '       mousetail++
04510     94 FA 85 F1 | 	sub	objptr, #148
04514     FD 7E 02 FB | 	rdlong	local10, objptr
04518     3F 6F 02 F6 | 	mov	local02, local10
0451c     01 6E 06 F1 | 	add	local02, #1
04520     FD 6E 62 FC | 	wrlong	local02, objptr
04524                 | '       mousetail:= mousetail // 128
04524     37 6D 02 F6 | 	mov	local01, local02
04528     36 75 52 F6 | 	abs	local05, local01 wc
0452c     7F 74 06 F5 | 	and	local05, #127
04530     3A 75 62 C6 |  if_b	neg	local05, local05
04534     FD 74 62 FC | 	wrlong	local05, objptr
04538     0C FA 85 F1 | 	sub	objptr, #12
0453c                 | LR__0170
0453c                 | LR__0171
0453c                 | ' 
0453c                 | '       
0453c                 | '   if long[$38]==0
0453c     38 74 0E FB | 	rdlong	local05, #56 wz
04540     70 00 90 5D |  if_ne	jmp	#LR__0173
04544                 | '     if midifront<>miditail
04544     10 FA 05 F1 | 	add	objptr, #16
04548     FD 6C 02 FB | 	rdlong	local01, objptr
0454c     04 FA 05 F1 | 	add	objptr, #4
04550     FD 7E 02 FB | 	rdlong	local10, objptr
04554     14 FA 85 F1 | 	sub	objptr, #20
04558     3F 6F 02 F6 | 	mov	local02, local10
0455c     37 6D 0A F2 | 	cmp	local01, local02 wz
04560     50 00 90 AD |  if_e	jmp	#LR__0172
04564                 | '       long[$38]:=midibuf[miditail]
04564     14 FA 05 F1 | 	add	objptr, #20
04568     FD 74 02 FB | 	rdlong	local05, objptr
0456c     02 74 66 F0 | 	shl	local05, #2
04570     01 00 00 FF 
04574     8C FA 05 F1 | 	add	objptr, ##652
04578     FD 74 02 F1 | 	add	local05, objptr
0457c     3A 7F 02 FB | 	rdlong	local10, local05
04580     38 7E 66 FC | 	wrlong	local10, #56
04584                 | '       miditail++
04584     01 00 00 FF 
04588     8C FA 85 F1 | 	sub	objptr, ##652
0458c     FD 7E 02 FB | 	rdlong	local10, objptr
04590     3F 6F 02 F6 | 	mov	local02, local10
04594     01 6E 06 F1 | 	add	local02, #1
04598     FD 6E 62 FC | 	wrlong	local02, objptr
0459c                 | '       miditail:= miditail // 32
0459c     37 6D 02 F6 | 	mov	local01, local02
045a0     36 75 52 F6 | 	abs	local05, local01 wc
045a4     1F 74 06 F5 | 	and	local05, #31
045a8     3A 75 62 C6 |  if_b	neg	local05, local05
045ac     FD 74 62 FC | 	wrlong	local05, objptr
045b0     14 FA 85 F1 | 	sub	objptr, #20
045b4                 | LR__0172
045b4                 | LR__0173
045b4                 | '       
045b4                 | '   if long[$3c]==0
045b4     3C 74 0E FB | 	rdlong	local05, #60 wz
045b8     54 FB 9F 5D |  if_ne	jmp	#LR__0150
045bc                 | '     if serialfront<>serialtail
045bc     18 FA 05 F1 | 	add	objptr, #24
045c0     FD 6C 02 FB | 	rdlong	local01, objptr
045c4     04 FA 05 F1 | 	add	objptr, #4
045c8     FD 7E 02 FB | 	rdlong	local10, objptr
045cc     1C FA 85 F1 | 	sub	objptr, #28
045d0     3F 6F 02 F6 | 	mov	local02, local10
045d4     37 6D 0A F2 | 	cmp	local01, local02 wz
045d8     34 FB 9F AD |  if_e	jmp	#LR__0150
045dc                 | '       byte[$3c]:=255
045dc     3C FE 4D FC | 	wrbyte	#255, #60
045e0                 | '       byte[$3D]:=serialbuf[serialtail]
045e0     1C FA 05 F1 | 	add	objptr, #28
045e4     FD 74 02 FB | 	rdlong	local05, objptr
045e8     01 00 00 FF 
045ec     04 FB 05 F1 | 	add	objptr, ##772
045f0     FD 74 02 F1 | 	add	local05, objptr
045f4     3A 7F C2 FA | 	rdbyte	local10, local05
045f8     3D 7E 46 FC | 	wrbyte	local10, #61
045fc                 | '       serialtail++
045fc     01 00 00 FF 
04600     04 FB 85 F1 | 	sub	objptr, ##772
04604     FD 7E 02 FB | 	rdlong	local10, objptr
04608     3F 6F 02 F6 | 	mov	local02, local10
0460c     01 6E 06 F1 | 	add	local02, #1
04610     FD 6E 62 FC | 	wrlong	local02, objptr
04614                 | '       serialtail:= serialtail // 32
04614     37 6D 02 F6 | 	mov	local01, local02
04618     36 75 52 F6 | 	abs	local05, local01 wc
0461c     1F 74 06 F5 | 	and	local05, #31
04620     3A 75 62 C6 |  if_b	neg	local05, local05
04624     FD 74 62 FC | 	wrlong	local05, objptr
04628     1C FA 85 F1 | 	sub	objptr, #28
0462c     E0 FA 9F FD | 	jmp	#LR__0150
04630     AF F0 03 F6 | 	mov	ptra, fp
04634     BA 00 A0 FD | 	call	#popregs_
04638                 | _retrocog_spin2_serialcog_ret
04638     2D 00 64 FD | 	ret
0463c                 | 
0463c                 | '       
0463c                 | ' 
0463c                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
0463c                 | ' 
0463c                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
0463c                 | _retrocog_spin2_serial_start
0463c     04 5A 05 F6 | 	mov	COUNT_, #4
04640     B0 00 A0 FD | 	call	#pushregs_
04644     2F 6D 02 F6 | 	mov	local01, arg01
04648     30 6F 02 F6 | 	mov	local02, arg02
0464c                 | ' 
0464c                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
0464c     14 5E 06 FB | 	rdlong	arg01, #20
04650     10 60 C6 F9 | 	decod	arg02, #16
04654     30 5F 02 FD | 	qmul	arg01, arg02
04658     19 70 62 FD | 	getqy	local03
0465c     18 72 62 FD | 	getqx	local04
04660     28 70 62 FD | 	setq	local03
04664     31 73 12 FD | 	qdiv	local04, arg03
04668     18 18 62 FD | 	getqx	result1
0466c     0C 63 02 F6 | 	mov	arg03, result1
04670     FE FF 7F FF 
04674     00 62 06 F5 | 	and	arg03, ##-1024
04678                 | ' bitmode |= 7                                                  ' set bits (8)
04678     07 62 46 F5 | 	or	arg03, #7
0467c                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
0467c     40 6C 62 FD | 	dirl	local01
04680     08 00 80 FF 
04684     36 7D 08 FC | 	wrpin	##4158, local01
04688     36 63 12 FC | 	wxpin	arg03, local01
0468c     36 01 28 FC | 	wypin	#0, local01
04690     41 6C 62 FD | 	dirh	local01
04694                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
04694     40 6E 62 FD | 	dirl	local02
04698     37 F9 08 FC | 	wrpin	#124, local02
0469c     37 63 12 FC | 	wxpin	arg03, local02
046a0     37 01 28 FC | 	wypin	#0, local02
046a4     41 6E 62 FD | 	dirh	local02
046a8                 | ' pinhigh(rxpin)
046a8     59 6C 62 FD | 	drvh	local01
046ac     AF F0 03 F6 | 	mov	ptra, fp
046b0     BA 00 A0 FD | 	call	#popregs_
046b4                 | _retrocog_spin2_serial_start_ret
046b4     2D 00 64 FD | 	ret
046b8                 | 
046b8                 | ' 
046b8                 | ' pub rxcheck(pin) : rxbyte | check
046b8                 | _retrocog_spin2_rxcheck
046b8     03 5A 05 F6 | 	mov	COUNT_, #3
046bc     B0 00 A0 FD | 	call	#pushregs_
046c0     2F 6D 02 F6 | 	mov	local01, arg01
046c4                 | ' 
046c4                 | ' '' Check for serial input
046c4                 | ' '' -- returns -1 if nothing available
046c4                 | ' 
046c4                 | '   rxbyte := -1
046c4     01 6E 66 F6 | 	neg	local02, #1
046c8                 | '   check := pinr(pin)
046c8     36 5F 02 F6 | 	mov	arg01, local01
046cc     4C 28 B0 FD | 	call	#__system___pinread
046d0     0C 71 0A F6 | 	mov	local03, result1 wz
046d4                 | '   if (check)
046d4                 | '     rxbyte := rdpin(pin) >> 24
046d4     00 6E 06 56 |  if_ne	mov	local02, #0
046d8     36 6F 8A 5A |  if_ne	rdpin	local02, local01
046dc     18 6E 46 50 |  if_ne	shr	local02, #24
046e0     37 19 02 F6 | 	mov	result1, local02
046e4     AF F0 03 F6 | 	mov	ptra, fp
046e8     BA 00 A0 FD | 	call	#popregs_
046ec                 | _retrocog_spin2_rxcheck_ret
046ec     2D 00 64 FD | 	ret
046f0                 | 
046f0                 | _trackerplayer_spin2_initModule
046f0     0B 5A 05 F6 | 	mov	COUNT_, #11
046f4     B0 00 A0 FD | 	call	#pushregs_
046f8     30 F0 07 F1 | 	add	ptra, #48
046fc     AF 5E 62 FC | 	wrlong	arg01, fp
04700     04 5E 05 F1 | 	add	fp, #4
04704     AF 60 62 FC | 	wrlong	arg02, fp
04708     04 5E 85 F1 | 	sub	fp, #4
0470c                 | ' 
0470c                 | '   ' Set some data pointers
0470c                 | '   magicFour      := hubPtr + 1080
0470c     AF 6C 02 FB | 	rdlong	local01, fp
04710     02 00 00 FF 
04714     38 6C 06 F1 | 	add	local01, ##1080
04718     9D FA 05 F1 | 	add	objptr, #157
0471c     FD 6C 62 FC | 	wrlong	local01, objptr
04720                 | '   nameStr        := hubPtr
04720     AF 6C 02 FB | 	rdlong	local01, fp
04724     97 FA 85 F1 | 	sub	objptr, #151
04728     FD 6C 62 FC | 	wrlong	local01, objptr
0472c                 | '   samplesInfoLut := hubPtr + 20
0472c     AF 6C 02 FB | 	rdlong	local01, fp
04730     14 6C 06 F1 | 	add	local01, #20
04734     04 FA 05 F1 | 	add	objptr, #4
04738     FD 6C 62 FC | 	wrlong	local01, objptr
0473c                 | ' 
0473c                 | '   ' Is this a 31 sample module?
0473c                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
0473c     93 FA 05 F1 | 	add	objptr, #147
04740     FD 6C 02 FB | 	rdlong	local01, objptr
04744     9D FA 85 F1 | 	sub	objptr, #157
04748     36 6F C2 FA | 	rdbyte	local02, local01
0474c     4D 6E 0E F2 | 	cmp	local02, #77 wz
04750     4C 01 90 5D |  if_ne	jmp	#LR__0177
04754     9D FA 05 F1 | 	add	objptr, #157
04758     FD 70 02 FB | 	rdlong	local03, objptr
0475c     9D FA 85 F1 | 	sub	objptr, #157
04760     02 70 06 F1 | 	add	local03, #2
04764     38 73 C2 FA | 	rdbyte	local04, local03
04768     4B 72 0E F2 | 	cmp	local04, #75 wz
0476c     30 01 90 5D |  if_ne	jmp	#LR__0177
04770                 | '     songLength          := byte[hubPtr + 950]
04770     AF 6C 02 FB | 	rdlong	local01, fp
04774     01 00 00 FF 
04778     B6 6D 06 F1 | 	add	local01, ##950
0477c     36 75 C2 FA | 	rdbyte	local05, local01
04780     9A FA 05 F1 | 	add	objptr, #154
04784     FD 74 42 FC | 	wrbyte	local05, objptr
04788                 | '     unknown1            := byte[hubPtr + 951]
04788     AF 6C 02 FB | 	rdlong	local01, fp
0478c     01 00 00 FF 
04790     B7 6D 06 F1 | 	add	local01, ##951
04794     36 75 C2 FA | 	rdbyte	local05, local01
04798     02 FA 05 F1 | 	add	objptr, #2
0479c     FD 74 42 FC | 	wrbyte	local05, objptr
047a0                 | '     songPositionsLut    :=      hubPtr + 952
047a0     AF 6C 02 FB | 	rdlong	local01, fp
047a4     01 00 00 FF 
047a8     B8 6D 06 F1 | 	add	local01, ##952
047ac     06 FA 85 F1 | 	sub	objptr, #6
047b0     FD 6C 62 FC | 	wrlong	local01, objptr
047b4                 | '     patternsData        :=      hubPtr + 1084
047b4     AF 6C 02 FB | 	rdlong	local01, fp
047b8     02 00 00 FF 
047bc     3C 6C 06 F1 | 	add	local01, ##1084
047c0     04 FA 85 F1 | 	sub	objptr, #4
047c4     FD 6C 62 FC | 	wrlong	local01, objptr
047c8                 | '     numberOfInstruments := 31
047c8     14 FA 05 F1 | 	add	objptr, #20
047cc     FD 3E 48 FC | 	wrbyte	#31, objptr
047d0                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
047d0     0B FA 85 F1 | 	sub	objptr, #11
047d4     FD 00 48 FC | 	wrbyte	#0, objptr
047d8     9B FA 85 F1 | 	sub	objptr, #155
047dc                 | '     repeat i from 952 to 1079
047dc     08 5E 05 F1 | 	add	fp, #8
047e0     01 00 80 FF 
047e4     AF 70 6B FC | 	wrlong	##952, fp
047e8     08 5E 85 F1 | 	sub	fp, #8
047ec     80 B8 9F FE | 	loc	pa,	#(@LR__0176-@LR__0174)
047f0     93 00 A0 FD | 	call	#FCACHE_LOAD_
047f4                 | LR__0174
047f4                 | '       if byte[hubPtr][i] > numberOfPatterns
047f4     AF 76 02 FB | 	rdlong	local06, fp
047f8     08 5E 05 F1 | 	add	fp, #8
047fc     AF 6E 02 FB | 	rdlong	local02, fp
04800     08 5E 85 F1 | 	sub	fp, #8
04804     3B 6F 02 F1 | 	add	local02, local06
04808     37 73 C2 FA | 	rdbyte	local04, local02
0480c     9B FA 05 F1 | 	add	objptr, #155
04810     FD 78 C2 FA | 	rdbyte	local07, objptr
04814     9B FA 85 F1 | 	sub	objptr, #155
04818     3C 73 5A F2 | 	cmps	local04, local07 wcz
0481c     24 00 90 ED |  if_be	jmp	#LR__0175
04820                 | '         numberOfPatterns := byte[hubPtr][i]
04820     AF 76 02 FB | 	rdlong	local06, fp
04824     08 5E 05 F1 | 	add	fp, #8
04828     AF 6E 02 FB | 	rdlong	local02, fp
0482c     08 5E 85 F1 | 	sub	fp, #8
04830     3B 6F 02 F1 | 	add	local02, local06
04834     37 73 C2 FA | 	rdbyte	local04, local02
04838     9B FA 05 F1 | 	add	objptr, #155
0483c     FD 72 42 FC | 	wrbyte	local04, objptr
04840     9B FA 85 F1 | 	sub	objptr, #155
04844                 | LR__0175
04844     08 5E 05 F1 | 	add	fp, #8
04848     AF 74 02 FB | 	rdlong	local05, fp
0484c     01 74 06 F1 | 	add	local05, #1
04850     AF 74 62 FC | 	wrlong	local05, fp
04854     08 5E 85 F1 | 	sub	fp, #8
04858     02 00 00 FF 
0485c     38 74 1E F2 | 	cmp	local05, ##1080 wcz
04860     90 FF 9F CD |  if_b	jmp	#LR__0174
04864                 | LR__0176
04864                 | '     numberOfPatterns++
04864     9B FA 05 F1 | 	add	objptr, #155
04868     FD 74 C2 FA | 	rdbyte	local05, objptr
0486c     FD 6E C2 FA | 	rdbyte	local02, objptr
04870     01 6E 06 F1 | 	add	local02, #1
04874     FD 6E 42 FC | 	wrbyte	local02, objptr
04878                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
04878     09 FA 85 F1 | 	sub	objptr, #9
0487c     FD 6C 02 FB | 	rdlong	local01, objptr
04880     09 FA 05 F1 | 	add	objptr, #9
04884     FD 6E C2 FA | 	rdbyte	local02, objptr
04888     0A 6E 66 F0 | 	shl	local02, #10
0488c     37 6D 02 F1 | 	add	local01, local02
04890     8D FA 85 F1 | 	sub	objptr, #141
04894     FD 6C 62 FC | 	wrlong	local01, objptr
04898     0E FA 85 F1 | 	sub	objptr, #14
0489c                 | ' 
0489c                 | '   ' This must be an oldschool 15 sample soundtracker module
0489c                 | '   else
0489c     1C 01 90 FD | 	jmp	#LR__0181
048a0                 | LR__0177
048a0                 | '     songLength          := byte[hubPtr + 470]
048a0     AF 6C 02 FB | 	rdlong	local01, fp
048a4     D6 6D 06 F1 | 	add	local01, #470
048a8     36 75 C2 FA | 	rdbyte	local05, local01
048ac     9A FA 05 F1 | 	add	objptr, #154
048b0     FD 74 42 FC | 	wrbyte	local05, objptr
048b4                 | '     unknown1            := byte[hubPtr + 471]
048b4     AF 6C 02 FB | 	rdlong	local01, fp
048b8     D7 6D 06 F1 | 	add	local01, #471
048bc     36 75 C2 FA | 	rdbyte	local05, local01
048c0     02 FA 05 F1 | 	add	objptr, #2
048c4     FD 74 42 FC | 	wrbyte	local05, objptr
048c8                 | '     songPositionsLut    :=      hubPtr + 472
048c8     AF 6C 02 FB | 	rdlong	local01, fp
048cc     D8 6D 06 F1 | 	add	local01, #472
048d0     06 FA 85 F1 | 	sub	objptr, #6
048d4     FD 6C 62 FC | 	wrlong	local01, objptr
048d8                 | '     patternsData        :=      hubPtr + 600
048d8     AF 6C 02 FB | 	rdlong	local01, fp
048dc     01 00 00 FF 
048e0     58 6C 06 F1 | 	add	local01, ##600
048e4     04 FA 85 F1 | 	sub	objptr, #4
048e8     FD 6C 62 FC | 	wrlong	local01, objptr
048ec                 | '     numberOfInstruments := 15
048ec     14 FA 05 F1 | 	add	objptr, #20
048f0     FD 1E 48 FC | 	wrbyte	#15, objptr
048f4                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
048f4     0B FA 85 F1 | 	sub	objptr, #11
048f8     FD 00 48 FC | 	wrbyte	#0, objptr
048fc     9B FA 85 F1 | 	sub	objptr, #155
04900                 | '     repeat i from 472 to 599
04900     08 5E 05 F1 | 	add	fp, #8
04904     AF B0 6B FC | 	wrlong	#472, fp
04908     08 5E 85 F1 | 	sub	fp, #8
0490c     60 B7 9F FE | 	loc	pa,	#(@LR__0180-@LR__0178)
04910     93 00 A0 FD | 	call	#FCACHE_LOAD_
04914                 | LR__0178
04914                 | '       if byte[hubPtr][i] > numberOfPatterns
04914     AF 76 02 FB | 	rdlong	local06, fp
04918     08 5E 05 F1 | 	add	fp, #8
0491c     AF 6E 02 FB | 	rdlong	local02, fp
04920     08 5E 85 F1 | 	sub	fp, #8
04924     3B 6F 02 F1 | 	add	local02, local06
04928     37 73 C2 FA | 	rdbyte	local04, local02
0492c     9B FA 05 F1 | 	add	objptr, #155
04930     FD 78 C2 FA | 	rdbyte	local07, objptr
04934     9B FA 85 F1 | 	sub	objptr, #155
04938     3C 73 5A F2 | 	cmps	local04, local07 wcz
0493c     24 00 90 ED |  if_be	jmp	#LR__0179
04940                 | '         numberOfPatterns := byte[hubPtr][i]
04940     AF 76 02 FB | 	rdlong	local06, fp
04944     08 5E 05 F1 | 	add	fp, #8
04948     AF 6E 02 FB | 	rdlong	local02, fp
0494c     08 5E 85 F1 | 	sub	fp, #8
04950     3B 6F 02 F1 | 	add	local02, local06
04954     37 73 C2 FA | 	rdbyte	local04, local02
04958     9B FA 05 F1 | 	add	objptr, #155
0495c     FD 72 42 FC | 	wrbyte	local04, objptr
04960     9B FA 85 F1 | 	sub	objptr, #155
04964                 | LR__0179
04964     08 5E 05 F1 | 	add	fp, #8
04968     AF 74 02 FB | 	rdlong	local05, fp
0496c     01 74 06 F1 | 	add	local05, #1
04970     AF 74 62 FC | 	wrlong	local05, fp
04974     08 5E 85 F1 | 	sub	fp, #8
04978     01 00 00 FF 
0497c     58 74 1E F2 | 	cmp	local05, ##600 wcz
04980     90 FF 9F CD |  if_b	jmp	#LR__0178
04984                 | LR__0180
04984                 | '     numberOfPatterns++
04984     9B FA 05 F1 | 	add	objptr, #155
04988     FD 74 C2 FA | 	rdbyte	local05, objptr
0498c     FD 6E C2 FA | 	rdbyte	local02, objptr
04990     01 6E 06 F1 | 	add	local02, #1
04994     FD 6E 42 FC | 	wrbyte	local02, objptr
04998                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
04998     09 FA 85 F1 | 	sub	objptr, #9
0499c     FD 6C 02 FB | 	rdlong	local01, objptr
049a0     09 FA 05 F1 | 	add	objptr, #9
049a4     FD 6E C2 FA | 	rdbyte	local02, objptr
049a8     0A 6E 66 F0 | 	shl	local02, #10
049ac     37 6D 02 F1 | 	add	local01, local02
049b0     8D FA 85 F1 | 	sub	objptr, #141
049b4     FD 6C 62 FC | 	wrlong	local01, objptr
049b8     0E FA 85 F1 | 	sub	objptr, #14
049bc                 | LR__0181
049bc                 | ' 
049bc                 | '   ' Iterate through all samples and fill in the sample pointer LUT
049bc                 | '   tmpPtr := sampleDataPtr
049bc     0E FA 05 F1 | 	add	objptr, #14
049c0     FD 6C 02 FB | 	rdlong	local01, objptr
049c4     0C 5E 05 F1 | 	add	fp, #12
049c8     AF 6C 62 FC | 	wrlong	local01, fp
049cc                 | '   repeat i from 1 to numberOfInstruments
049cc     04 5E 85 F1 | 	sub	fp, #4
049d0     AF 02 68 FC | 	wrlong	#1, fp
049d4     08 5E 85 F1 | 	sub	fp, #8
049d8     98 FA 05 F1 | 	add	objptr, #152
049dc     FD 6E C2 FA | 	rdbyte	local02, objptr
049e0     01 6E 5E F2 | 	cmps	local02, #1 wcz
049e4     01 74 06 16 |  if_a	mov	local05, #1
049e8     01 74 66 E6 |  if_be	neg	local05, #1
049ec     3A 7B 02 F6 | 	mov	local08, local05
049f0     FD 7C C2 FA | 	rdbyte	local09, objptr
049f4     A6 FA 85 F1 | 	sub	objptr, #166
049f8     3D 7D 02 F1 | 	add	local09, local08
049fc                 | LR__0182
049fc                 | '     samplesPtrLut[i-1] := tmpPtr
049fc     08 5E 05 F1 | 	add	fp, #8
04a00     AF 7E 02 FB | 	rdlong	local10, fp
04a04     01 7E 86 F1 | 	sub	local10, #1
04a08     02 7E 66 F0 | 	shl	local10, #2
04a0c     12 FA 05 F1 | 	add	objptr, #18
04a10     FD 7E 02 F1 | 	add	local10, objptr
04a14     04 5E 05 F1 | 	add	fp, #4
04a18     AF 80 02 FB | 	rdlong	local11, fp
04a1c     3F 81 62 FC | 	wrlong	local11, local10
04a20                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
04a20     04 5E 85 F1 | 	sub	fp, #4
04a24     AF 5E 02 FB | 	rdlong	arg01, fp
04a28     1C 5E 05 F1 | 	add	fp, #28
04a2c     AF 60 02 F6 | 	mov	arg02, fp
04a30     14 5E 85 F1 | 	sub	fp, #20
04a34     AF 62 02 F6 | 	mov	arg03, fp
04a38     04 5E 05 F1 | 	add	fp, #4
04a3c     AF 64 02 F6 | 	mov	arg04, fp
04a40     04 5E 05 F1 | 	add	fp, #4
04a44     AF 66 02 F6 | 	mov	arg05, fp
04a48     04 5E 05 F1 | 	add	fp, #4
04a4c     AF 68 02 F6 | 	mov	arg06, fp
04a50     04 5E 05 F1 | 	add	fp, #4
04a54     AF 6A 02 F6 | 	mov	arg07, fp
04a58     20 5E 85 F1 | 	sub	fp, #32
04a5c     12 FA 85 F1 | 	sub	objptr, #18
04a60     F0 06 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
04a64                 | '     tmpPtr += samLength
04a64     0C 5E 05 F1 | 	add	fp, #12
04a68     AF 78 02 FB | 	rdlong	local07, fp
04a6c     04 5E 05 F1 | 	add	fp, #4
04a70     AF 7E 02 FB | 	rdlong	local10, fp
04a74     3F 79 02 F1 | 	add	local07, local10
04a78     04 5E 85 F1 | 	sub	fp, #4
04a7c     AF 78 62 FC | 	wrlong	local07, fp
04a80     04 5E 85 F1 | 	sub	fp, #4
04a84     AF 78 02 FB | 	rdlong	local07, fp
04a88     3D 79 02 F1 | 	add	local07, local08
04a8c     AF 78 62 FC | 	wrlong	local07, fp
04a90     08 5E 85 F1 | 	sub	fp, #8
04a94     3E 79 0A F2 | 	cmp	local07, local09 wz
04a98     60 FF 9F 5D |  if_ne	jmp	#LR__0182
04a9c                 | ' 
04a9c                 | '   ' Below this point, all play routine variables are resest to their default values
04a9c                 | '   tickCounter                 := 0
04a9c     A1 FA 05 F1 | 	add	objptr, #161
04aa0     FD 00 48 FC | 	wrbyte	#0, objptr
04aa4                 | '   patternRow                  := 0
04aa4     01 FA 05 F1 | 	add	objptr, #1
04aa8     FD 00 48 FC | 	wrbyte	#0, objptr
04aac                 | '   songPosition                := startPattern
04aac     04 5E 05 F1 | 	add	fp, #4
04ab0     AF 6C 02 FB | 	rdlong	local01, fp
04ab4     04 5E 85 F1 | 	sub	fp, #4
04ab8     01 FA 05 F1 | 	add	objptr, #1
04abc     FD 6C 42 FC | 	wrbyte	local01, objptr
04ac0                 | '   currentSongSpeed            := 6
04ac0     01 FA 05 F1 | 	add	objptr, #1
04ac4     FD 0C 48 FC | 	wrbyte	#6, objptr
04ac8                 | '   patternDelay                := 0
04ac8     01 FA 05 F1 | 	add	objptr, #1
04acc     FD 00 48 FC | 	wrbyte	#0, objptr
04ad0                 | '   ticksPerMinute              := 50 * 60
04ad0     02 FB 05 F1 | 	add	objptr, #258
04ad4     05 00 80 FF 
04ad8     FD 70 6B FC | 	wrlong	##3000, objptr
04adc     A7 FB 85 F1 | 	sub	objptr, #423
04ae0                 | '   cyclesToWait                := systemClock / 50
04ae0     FD 98 02 FB | 	rdlong	muldiva_, objptr
04ae4     32 9A 06 F6 | 	mov	muldivb_, #50
04ae8     C6 00 A0 FD | 	call	#divide_
04aec     AB FB 05 F1 | 	add	objptr, #427
04af0     FD 9A 62 FC | 	wrlong	muldivb_, objptr
04af4                 | '   sampleNumber_memory         := 0
04af4     35 FA 05 F1 | 	add	objptr, #53
04af8     FD 00 48 FC | 	wrbyte	#0, objptr
04afc                 | '   lpFilter                    := 0
04afc     25 FA 85 F1 | 	sub	objptr, #37
04b00     FD 00 48 FC | 	wrbyte	#0, objptr
04b04                 | '   cmdD_memoryX                := 0
04b04     29 FA 05 F1 | 	add	objptr, #41
04b08     FD 00 48 FC | 	wrbyte	#0, objptr
04b0c                 | '   cmdD_memoryY                := 0
04b0c     01 FA 05 F1 | 	add	objptr, #1
04b10     FD 00 48 FC | 	wrbyte	#0, objptr
04b14                 | '   cmdD_updatePosition         := false
04b14     01 FA 05 F1 | 	add	objptr, #1
04b18     FD 00 48 FC | 	wrbyte	#0, objptr
04b1c                 | '   cmdB_memoryZ                := 0
04b1c     01 FA 05 F1 | 	add	objptr, #1
04b20     FD 00 48 FC | 	wrbyte	#0, objptr
04b24                 | '   cmdB_updatePosition         := false
04b24     01 FA 05 F1 | 	add	objptr, #1
04b28     FD 00 48 FC | 	wrbyte	#0, objptr
04b2c                 | '   cmdE6_updatePositionCommon  := false
04b2c     0D FA 05 F1 | 	add	objptr, #13
04b30     FD 00 48 FC | 	wrbyte	#0, objptr
04b34     F5 FB 85 F1 | 	sub	objptr, #501
04b38                 | ' 
04b38                 | '   repeat i from 0 to LAST_CHANNEL
04b38     08 5E 05 F1 | 	add	fp, #8
04b3c     AF 00 68 FC | 	wrlong	#0, fp
04b40     08 5E 85 F1 | 	sub	fp, #8
04b44                 | LR__0183
04b44                 | ' 
04b44                 | '     currRepeatPoint[i]        := 0
04b44     08 5E 05 F1 | 	add	fp, #8
04b48     AF 70 02 FB | 	rdlong	local03, fp
04b4c     01 70 66 F0 | 	shl	local03, #1
04b50     D7 FA 05 F1 | 	add	objptr, #215
04b54     FD 70 02 F1 | 	add	local03, objptr
04b58     38 01 58 FC | 	wrword	#0, local03
04b5c                 | '     currSampleLength[i]       := 4
04b5c     AF 70 02 FB | 	rdlong	local03, fp
04b60     01 70 66 F0 | 	shl	local03, #1
04b64     1C FA 85 F1 | 	sub	objptr, #28
04b68     FD 70 02 F1 | 	add	local03, objptr
04b6c     38 09 58 FC | 	wrword	#4, local03
04b70                 | '     currSamplePtr[i]          := @null
04b70     AF 6E 02 FB | 	rdlong	local02, fp
04b74     02 6E 66 F0 | 	shl	local02, #2
04b78     14 FA 85 F1 | 	sub	objptr, #20
04b7c     FD 6E 02 F1 | 	add	local02, objptr
04b80     37 15 62 FC | 	wrlong	ptr__trackerplayer_spin2_dat__, local02
04b84                 | '     currSampleNr[i]           := 0
04b84     AF 74 02 FB | 	rdlong	local05, fp
04b88     10 FA 05 F1 | 	add	objptr, #16
04b8c     FD 74 02 F1 | 	add	local05, objptr
04b90     3A 01 48 FC | 	wrbyte	#0, local05
04b94                 | '     currRepeatLength[i]       := 1
04b94     AF 74 02 FB | 	rdlong	local05, fp
04b98     02 74 66 F0 | 	shl	local05, #2
04b9c     0C FA 05 F1 | 	add	objptr, #12
04ba0     FD 74 02 F1 | 	add	local05, objptr
04ba4     3A 03 68 FC | 	wrlong	#1, local05
04ba8                 | '     currPeriod[i]             := 400
04ba8     AF 74 02 FB | 	rdlong	local05, fp
04bac     02 74 66 F0 | 	shl	local05, #2
04bb0     1C FA 05 F1 | 	add	objptr, #28
04bb4     FD 74 02 F1 | 	add	local05, objptr
04bb8     3A 21 6B FC | 	wrlong	#400, local05
04bbc                 | '     lastSetPeriod[i]          := 400
04bbc     AF 74 02 FB | 	rdlong	local05, fp
04bc0     02 74 66 F0 | 	shl	local05, #2
04bc4     48 FA 05 F1 | 	add	objptr, #72
04bc8     FD 74 02 F1 | 	add	local05, objptr
04bcc     3A 21 6B FC | 	wrlong	#400, local05
04bd0                 | '     lastSetSamplePtr[i]       := 0
04bd0     AF 74 02 FB | 	rdlong	local05, fp
04bd4     02 74 66 F0 | 	shl	local05, #2
04bd8     10 FA 05 F1 | 	add	objptr, #16
04bdc     FD 74 02 F1 | 	add	local05, objptr
04be0     3A 01 68 FC | 	wrlong	#0, local05
04be4                 | '     lastSetSampleNr[i]        := 0
04be4     AF 74 02 FB | 	rdlong	local05, fp
04be8     02 74 66 F0 | 	shl	local05, #2
04bec     10 FA 05 F1 | 	add	objptr, #16
04bf0     FD 74 02 F1 | 	add	local05, objptr
04bf4     3A 01 68 FC | 	wrlong	#0, local05
04bf8                 | '     lastSetSampleLength[i]    := 0
04bf8     AF 74 02 FB | 	rdlong	local05, fp
04bfc     02 74 66 F0 | 	shl	local05, #2
04c00     10 FA 05 F1 | 	add	objptr, #16
04c04     FD 74 02 F1 | 	add	local05, objptr
04c08     3A 01 68 FC | 	wrlong	#0, local05
04c0c                 | '     lastSetRepeatLength[i]    := 0
04c0c     AF 74 02 FB | 	rdlong	local05, fp
04c10     02 74 66 F0 | 	shl	local05, #2
04c14     10 FA 05 F1 | 	add	objptr, #16
04c18     FD 74 02 F1 | 	add	local05, objptr
04c1c     3A 01 68 FC | 	wrlong	#0, local05
04c20                 | '     lastSetRepeatPoint[i]     := 0
04c20     AF 74 02 FB | 	rdlong	local05, fp
04c24     02 74 66 F0 | 	shl	local05, #2
04c28     10 FA 05 F1 | 	add	objptr, #16
04c2c     FD 74 02 F1 | 	add	local05, objptr
04c30     3A 01 68 FC | 	wrlong	#0, local05
04c34                 | '     currVolume[i]             := 0
04c34     AF 74 02 FB | 	rdlong	local05, fp
04c38     02 74 66 F0 | 	shl	local05, #2
04c3c     78 FA 85 F1 | 	sub	objptr, #120
04c40     FD 74 02 F1 | 	add	local05, objptr
04c44     3A 01 68 FC | 	wrlong	#0, local05
04c48                 | '     currPanning[i]            := 0
04c48     AF 70 02 FB | 	rdlong	local03, fp
04c4c     01 70 66 F0 | 	shl	local03, #1
04c50     20 FA 05 F1 | 	add	objptr, #32
04c54     FD 70 02 F1 | 	add	local03, objptr
04c58     38 01 58 FC | 	wrword	#0, local03
04c5c                 | '     cmd3_memoryZ[i]           := 0
04c5c     AF 74 02 FB | 	rdlong	local05, fp
04c60     A9 FA 05 F1 | 	add	objptr, #169
04c64     FD 74 02 F1 | 	add	local05, objptr
04c68     3A 01 48 FC | 	wrbyte	#0, local05
04c6c                 | '     cmd4_memoryY[i]           := 0
04c6c     AF 74 02 FB | 	rdlong	local05, fp
04c70     04 FA 05 F1 | 	add	objptr, #4
04c74     FD 74 02 F1 | 	add	local05, objptr
04c78     3A 01 48 FC | 	wrbyte	#0, local05
04c7c                 | '     cmd4_memoryX[i]           := 0
04c7c     AF 74 02 FB | 	rdlong	local05, fp
04c80     04 FA 05 F1 | 	add	objptr, #4
04c84     FD 74 02 F1 | 	add	local05, objptr
04c88     3A 01 48 FC | 	wrbyte	#0, local05
04c8c                 | '     cmd7_memoryY[i]           := 0
04c8c     AF 74 02 FB | 	rdlong	local05, fp
04c90     04 FA 05 F1 | 	add	objptr, #4
04c94     FD 74 02 F1 | 	add	local05, objptr
04c98     3A 01 48 FC | 	wrbyte	#0, local05
04c9c                 | '     cmd7_memoryX[i]           := 0
04c9c     AF 74 02 FB | 	rdlong	local05, fp
04ca0     04 FA 05 F1 | 	add	objptr, #4
04ca4     FD 74 02 F1 | 	add	local05, objptr
04ca8     3A 01 48 FC | 	wrbyte	#0, local05
04cac                 | '     cmd9_memoryZ[i]           := 0
04cac     AF 74 02 FB | 	rdlong	local05, fp
04cb0     04 FA 05 F1 | 	add	objptr, #4
04cb4     FD 74 02 F1 | 	add	local05, objptr
04cb8     3A 01 48 FC | 	wrbyte	#0, local05
04cbc                 | '     cmdE6_memory[i]           := 0
04cbc     AF 74 02 FB | 	rdlong	local05, fp
04cc0     0D FA 05 F1 | 	add	objptr, #13
04cc4     FD 74 02 F1 | 	add	local05, objptr
04cc8     3A 01 48 FC | 	wrbyte	#0, local05
04ccc                 | '     cmdE6_counter[i]          := 0
04ccc     AF 74 02 FB | 	rdlong	local05, fp
04cd0     04 FA 05 F1 | 	add	objptr, #4
04cd4     FD 74 02 F1 | 	add	local05, objptr
04cd8     3A 01 48 FC | 	wrbyte	#0, local05
04cdc                 | '     cmdE6_updatePosition[i]   := false
04cdc     AF 74 02 FB | 	rdlong	local05, fp
04ce0     04 FA 05 F1 | 	add	objptr, #4
04ce4     FD 74 02 F1 | 	add	local05, objptr
04ce8     3A 01 48 FC | 	wrbyte	#0, local05
04cec                 | '     sampleNumber_memory[i]    := 0
04cec     AF 74 02 FB | 	rdlong	local05, fp
04cf0     11 FA 85 F1 | 	sub	objptr, #17
04cf4     FD 74 02 F1 | 	add	local05, objptr
04cf8     3A 01 48 FC | 	wrbyte	#0, local05
04cfc                 | '     vibratoPos[i]             := 0
04cfc     AF 74 02 FB | 	rdlong	local05, fp
04d00     59 FA 85 F1 | 	sub	objptr, #89
04d04     FD 74 02 F1 | 	add	local05, objptr
04d08     3A 01 48 FC | 	wrbyte	#0, local05
04d0c                 | '     portamentoPeriodMemory[i] := 0
04d0c     AF 74 02 FB | 	rdlong	local05, fp
04d10     02 74 66 F0 | 	shl	local05, #2
04d14     10 FA 05 F1 | 	add	objptr, #16
04d18     FD 74 02 F1 | 	add	local05, objptr
04d1c     3A 01 68 FC | 	wrlong	#0, local05
04d20                 | '     portaGlissando[i]         := 0
04d20     AF 74 02 FB | 	rdlong	local05, fp
04d24     25 FA 05 F1 | 	add	objptr, #37
04d28     FD 74 02 F1 | 	add	local05, objptr
04d2c     3A 01 48 FC | 	wrbyte	#0, local05
04d30                 | '     vibratoType[i]            := 0
04d30     AF 74 02 FB | 	rdlong	local05, fp
04d34     04 FA 05 F1 | 	add	objptr, #4
04d38     FD 74 02 F1 | 	add	local05, objptr
04d3c     3A 01 48 FC | 	wrbyte	#0, local05
04d40                 | '     tremoloType[i]            := 0
04d40     AF 74 02 FB | 	rdlong	local05, fp
04d44     04 FA 05 F1 | 	add	objptr, #4
04d48     FD 74 02 F1 | 	add	local05, objptr
04d4c     3A 01 48 FC | 	wrbyte	#0, local05
04d50                 | '     tremoloPos[i]             := 0
04d50     AF 74 02 FB | 	rdlong	local05, fp
04d54     39 FA 85 F1 | 	sub	objptr, #57
04d58     FD 74 02 F1 | 	add	local05, objptr
04d5c     3A 01 48 FC | 	wrbyte	#0, local05
04d60                 | '     deltaVolume[i]            := 0
04d60     AF 74 02 FB | 	rdlong	local05, fp
04d64     02 74 66 F0 | 	shl	local05, #2
04d68     7C FA 85 F1 | 	sub	objptr, #124
04d6c     FD 74 02 F1 | 	add	local05, objptr
04d70     3A 01 68 FC | 	wrlong	#0, local05
04d74                 | '     deltaPeriod[i]            := 0
04d74     AF 74 02 FB | 	rdlong	local05, fp
04d78     02 74 66 F0 | 	shl	local05, #2
04d7c     20 FA 85 F1 | 	sub	objptr, #32
04d80     FD 74 02 F1 | 	add	local05, objptr
04d84     3A 01 68 FC | 	wrlong	#0, local05
04d88                 | '     resetTremolo[i]           := 0
04d88     AF 74 02 FB | 	rdlong	local05, fp
04d8c     A0 FA 05 F1 | 	add	objptr, #160
04d90     FD 74 02 F1 | 	add	local05, objptr
04d94     3A 01 48 FC | 	wrbyte	#0, local05
04d98                 | '     resetVibrato[i]           := 0
04d98     AF 74 02 FB | 	rdlong	local05, fp
04d9c     04 FA 05 F1 | 	add	objptr, #4
04da0     FD 74 02 F1 | 	add	local05, objptr
04da4     3A 01 48 FC | 	wrbyte	#0, local05
04da8     AF 74 02 FB | 	rdlong	local05, fp
04dac     01 74 06 F1 | 	add	local05, #1
04db0     AF 74 62 FC | 	wrlong	local05, fp
04db4     08 5E 85 F1 | 	sub	fp, #8
04db8     04 74 5E F2 | 	cmps	local05, #4 wcz
04dbc     93 FB 85 F1 | 	sub	objptr, #403
04dc0     80 FD 9F CD |  if_b	jmp	#LR__0183
04dc4     AF F0 03 F6 | 	mov	ptra, fp
04dc8     BA 00 A0 FD | 	call	#popregs_
04dcc                 | _trackerplayer_spin2_initModule_ret
04dcc     2D 00 64 FD | 	ret
04dd0                 | 
04dd0                 | ' 
04dd0                 | ' 
04dd0                 | ' ' This routine needs to be ticked X number of times per second
04dd0                 | ' ' in order to advance the tracker play routine
04dd0                 | ' '
04dd0                 | ' PUB tick() | channel, sampleNumber, period, effect, i
04dd0                 | _trackerplayer_spin2_tick
04dd0     05 5A 05 F6 | 	mov	COUNT_, #5
04dd4     B0 00 A0 FD | 	call	#pushregs_
04dd8     14 F0 07 F1 | 	add	ptra, #20
04ddc                 | ' 
04ddc                 | '   if currentSongSpeed == 0
04ddc     A4 FA 05 F1 | 	add	objptr, #164
04de0     FD 6C CA FA | 	rdbyte	local01, objptr wz
04de4     A4 FA 85 F1 | 	sub	objptr, #164
04de8                 | '     return
04de8     88 02 90 AD |  if_e	jmp	#LR__0195
04dec                 | ' 
04dec                 | '   ' Iterate over the channels and process everything
04dec                 | '   repeat channel from 0 to LAST_CHANNEL
04dec     AF 00 68 FC | 	wrlong	#0, fp
04df0                 | LR__0184
04df0                 | ' 
04df0                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
04df0     AF 5E 02 FB | 	rdlong	arg01, fp
04df4     A3 FA 05 F1 | 	add	objptr, #163
04df8     FD 60 C2 FA | 	rdbyte	arg02, objptr
04dfc     01 FA 85 F1 | 	sub	objptr, #1
04e00     FD 62 C2 FA | 	rdbyte	arg03, objptr
04e04     A2 FA 85 F1 | 	sub	objptr, #162
04e08     04 5E 05 F1 | 	add	fp, #4
04e0c     AF 64 02 F6 | 	mov	arg04, fp
04e10     04 5E 05 F1 | 	add	fp, #4
04e14     AF 66 02 F6 | 	mov	arg05, fp
04e18     04 5E 05 F1 | 	add	fp, #4
04e1c     AF 68 02 F6 | 	mov	arg06, fp
04e20     0C 5E 85 F1 | 	sub	fp, #12
04e24     28 04 B0 FD | 	call	#_trackerplayer_spin2_getNoteData
04e28                 | '     processChannel(channel, sampleNumber, period, effect)
04e28     AF 5E 02 FB | 	rdlong	arg01, fp
04e2c     04 5E 05 F1 | 	add	fp, #4
04e30     AF 60 02 FB | 	rdlong	arg02, fp
04e34     04 5E 05 F1 | 	add	fp, #4
04e38     AF 62 02 FB | 	rdlong	arg03, fp
04e3c     04 5E 05 F1 | 	add	fp, #4
04e40     AF 64 02 FB | 	rdlong	arg04, fp
04e44     0C 5E 85 F1 | 	sub	fp, #12
04e48     CC 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
04e4c     AF 6E 02 FB | 	rdlong	local02, fp
04e50     01 6E 06 F1 | 	add	local02, #1
04e54     AF 6E 62 FC | 	wrlong	local02, fp
04e58     04 6E 5E F2 | 	cmps	local02, #4 wcz
04e5c     90 FF 9F CD |  if_b	jmp	#LR__0184
04e60                 | ' 
04e60                 | '   ' Incrementation the main counter that drives the whole play routine
04e60                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04e60     A1 FA 05 F1 | 	add	objptr, #161
04e64     FD 6C C2 FA | 	rdbyte	local01, objptr
04e68     01 6C 06 F1 | 	add	local01, #1
04e6c     FD 6C 42 FC | 	wrbyte	local01, objptr
04e70     03 FA 05 F1 | 	add	objptr, #3
04e74     FD 70 C2 FA | 	rdbyte	local03, objptr
04e78     01 FA 05 F1 | 	add	objptr, #1
04e7c     FD 72 C2 FA | 	rdbyte	local04, objptr
04e80     39 71 02 F1 | 	add	local03, local04
04e84     04 FA 85 F1 | 	sub	objptr, #4
04e88     FD 74 C2 FA | 	rdbyte	local05, objptr
04e8c     A1 FA 85 F1 | 	sub	objptr, #161
04e90     38 75 5A F2 | 	cmps	local05, local03 wcz
04e94                 | '     tickCounter := 0
04e94     A1 FA 05 31 |  if_ae	add	objptr, #161
04e98     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
04e9c     A1 FA 85 31 |  if_ae	sub	objptr, #161
04ea0                 | ' 
04ea0                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
04ea0                 | '   if tickCounter == 0
04ea0     A1 FA 05 F1 | 	add	objptr, #161
04ea4     FD 6C CA FA | 	rdbyte	local01, objptr wz
04ea8     A1 FA 85 F1 | 	sub	objptr, #161
04eac     C4 01 90 5D |  if_ne	jmp	#LR__0194
04eb0                 | ' 
04eb0                 | '     ' Handle the "pattern repeat" command, "E6"
04eb0                 | '     if cmdE6_updatePositionCommon
04eb0     F5 FB 05 F1 | 	add	objptr, #501
04eb4     FD 6C CA FA | 	rdbyte	local01, objptr wz
04eb8     F5 FB 85 F1 | 	sub	objptr, #501
04ebc     8C 00 90 AD |  if_e	jmp	#LR__0188
04ec0                 | '       repeat i from 0 to LAST_CHANNEL
04ec0     10 5E 05 F1 | 	add	fp, #16
04ec4     AF 00 68 FC | 	wrlong	#0, fp
04ec8     10 5E 85 F1 | 	sub	fp, #16
04ecc     A4 B1 9F FE | 	loc	pa,	#(@LR__0187-@LR__0185)
04ed0     93 00 A0 FD | 	call	#FCACHE_LOAD_
04ed4                 | LR__0185
04ed4                 | '         if cmdE6_updatePosition[i]
04ed4     10 5E 05 F1 | 	add	fp, #16
04ed8     AF 6E 02 FB | 	rdlong	local02, fp
04edc     10 5E 85 F1 | 	sub	fp, #16
04ee0     F1 FB 05 F1 | 	add	objptr, #497
04ee4     FD 6E 02 F1 | 	add	local02, objptr
04ee8     37 73 CA FA | 	rdbyte	local04, local02 wz
04eec     F1 FB 85 F1 | 	sub	objptr, #497
04ef0     24 00 90 AD |  if_e	jmp	#LR__0186
04ef4                 | '           patternRow := cmdE6_memory[i]
04ef4     10 5E 05 F1 | 	add	fp, #16
04ef8     AF 6E 02 FB | 	rdlong	local02, fp
04efc     10 5E 85 F1 | 	sub	fp, #16
04f00     E9 FB 05 F1 | 	add	objptr, #489
04f04     FD 6E 02 F1 | 	add	local02, objptr
04f08     37 73 C2 FA | 	rdbyte	local04, local02
04f0c     47 FB 85 F1 | 	sub	objptr, #327
04f10     FD 72 42 FC | 	wrbyte	local04, objptr
04f14     A2 FA 85 F1 | 	sub	objptr, #162
04f18                 | LR__0186
04f18                 | '         cmdE6_updatePosition[i] := false
04f18     10 5E 05 F1 | 	add	fp, #16
04f1c     AF 6E 02 FB | 	rdlong	local02, fp
04f20     F1 FB 05 F1 | 	add	objptr, #497
04f24     FD 6E 02 F1 | 	add	local02, objptr
04f28     37 01 48 FC | 	wrbyte	#0, local02
04f2c     AF 6E 02 FB | 	rdlong	local02, fp
04f30     01 6E 06 F1 | 	add	local02, #1
04f34     AF 6E 62 FC | 	wrlong	local02, fp
04f38     10 5E 85 F1 | 	sub	fp, #16
04f3c     04 6E 5E F2 | 	cmps	local02, #4 wcz
04f40     F1 FB 85 F1 | 	sub	objptr, #497
04f44     8C FF 9F CD |  if_b	jmp	#LR__0185
04f48                 | LR__0187
04f48     CC 00 90 FD | 	jmp	#LR__0192
04f4c                 | LR__0188
04f4c                 | ' 
04f4c                 | '     ' Handle the "skip to next pattern with offset command", "D"
04f4c                 | '     elseif cmdD_updatePosition
04f4c     E6 FB 05 F1 | 	add	objptr, #486
04f50     FD 6C CA FA | 	rdbyte	local01, objptr wz
04f54     E6 FB 85 F1 | 	sub	objptr, #486
04f58     64 00 90 AD |  if_e	jmp	#LR__0189
04f5c                 | '       if ++songPosition >= songLength
04f5c     A3 FA 05 F1 | 	add	objptr, #163
04f60     FD 6C C2 FA | 	rdbyte	local01, objptr
04f64     01 6C 06 F1 | 	add	local01, #1
04f68     FD 6C 42 FC | 	wrbyte	local01, objptr
04f6c     FD 70 C2 FA | 	rdbyte	local03, objptr
04f70     09 FA 85 F1 | 	sub	objptr, #9
04f74     FD 72 C2 FA | 	rdbyte	local04, objptr
04f78     9A FA 85 F1 | 	sub	objptr, #154
04f7c     39 71 5A F2 | 	cmps	local03, local04 wcz
04f80                 | '         songPosition := 0
04f80     A3 FA 05 31 |  if_ae	add	objptr, #163
04f84     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
04f88     A3 FA 85 31 |  if_ae	sub	objptr, #163
04f8c                 | ' 
04f8c                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
04f8c     E4 FB 05 F1 | 	add	objptr, #484
04f90     FD 70 C2 FA | 	rdbyte	local03, objptr
04f94     38 6D 02 F6 | 	mov	local01, local03
04f98     02 6C 66 F0 | 	shl	local01, #2
04f9c     38 6D 02 F1 | 	add	local01, local03
04fa0     01 6C 66 F0 | 	shl	local01, #1
04fa4     01 FA 05 F1 | 	add	objptr, #1
04fa8     FD 72 C2 FA | 	rdbyte	local04, objptr
04fac     39 6D 02 F1 | 	add	local01, local04
04fb0     43 FB 85 F1 | 	sub	objptr, #323
04fb4     FD 6C 42 FC | 	wrbyte	local01, objptr
04fb8     A2 FA 85 F1 | 	sub	objptr, #162
04fbc                 | ' 
04fbc                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
04fbc                 | '     else
04fbc     58 00 90 FD | 	jmp	#LR__0191
04fc0                 | LR__0189
04fc0                 | '       if ++patternRow >= PATTERN_LENGTH
04fc0     A2 FA 05 F1 | 	add	objptr, #162
04fc4     FD 6C C2 FA | 	rdbyte	local01, objptr
04fc8     01 6C 06 F1 | 	add	local01, #1
04fcc     FD 6C 42 FC | 	wrbyte	local01, objptr
04fd0     FD 70 C2 FA | 	rdbyte	local03, objptr
04fd4     A2 FA 85 F1 | 	sub	objptr, #162
04fd8     40 70 5E F2 | 	cmps	local03, #64 wcz
04fdc     38 00 90 CD |  if_b	jmp	#LR__0190
04fe0                 | '         patternRow := 0
04fe0     A2 FA 05 F1 | 	add	objptr, #162
04fe4     FD 00 48 FC | 	wrbyte	#0, objptr
04fe8                 | ' 
04fe8                 | '         if ++songPosition >= songLength
04fe8     01 FA 05 F1 | 	add	objptr, #1
04fec     FD 6C C2 FA | 	rdbyte	local01, objptr
04ff0     01 6C 06 F1 | 	add	local01, #1
04ff4     FD 6C 42 FC | 	wrbyte	local01, objptr
04ff8     FD 70 C2 FA | 	rdbyte	local03, objptr
04ffc     09 FA 85 F1 | 	sub	objptr, #9
05000     FD 72 C2 FA | 	rdbyte	local04, objptr
05004     9A FA 85 F1 | 	sub	objptr, #154
05008     39 71 5A F2 | 	cmps	local03, local04 wcz
0500c                 | '           songPosition := 0
0500c     A3 FA 05 31 |  if_ae	add	objptr, #163
05010     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
05014     A3 FA 85 31 |  if_ae	sub	objptr, #163
05018                 | LR__0190
05018                 | LR__0191
05018                 | LR__0192
05018                 | ' 
05018                 | '     ' Handle "jump to song position" command, "B"
05018                 | '     if cmdB_updatePosition
05018     E8 FB 05 F1 | 	add	objptr, #488
0501c     FD 6C CA FA | 	rdbyte	local01, objptr wz
05020     E8 FB 85 F1 | 	sub	objptr, #488
05024     28 00 90 AD |  if_e	jmp	#LR__0193
05028                 | ' 
05028                 | '       songPosition := cmdB_memoryZ
05028     E7 FB 05 F1 | 	add	objptr, #487
0502c     FD 6C C2 FA | 	rdbyte	local01, objptr
05030     44 FB 85 F1 | 	sub	objptr, #324
05034     FD 6C 42 FC | 	wrbyte	local01, objptr
05038                 | ' 
05038                 | '       ifnot cmdD_updatePosition
05038     43 FB 05 F1 | 	add	objptr, #323
0503c     FD 6C CA FA | 	rdbyte	local01, objptr wz
05040     E6 FB 85 F1 | 	sub	objptr, #486
05044                 | '         patternRow := 0
05044     A2 FA 05 A1 |  if_e	add	objptr, #162
05048     FD 00 48 AC |  if_e	wrbyte	#0, objptr
0504c     A2 FA 85 A1 |  if_e	sub	objptr, #162
05050                 | LR__0193
05050                 | ' 
05050                 | '     ' We need to be sure that all positioning commands are reset for the next tick
05050                 | '     cmdE6_updatePositionCommon := false
05050     F5 FB 05 F1 | 	add	objptr, #501
05054     FD 00 48 FC | 	wrbyte	#0, objptr
05058                 | '     cmdB_updatePosition := false
05058     0D FA 85 F1 | 	sub	objptr, #13
0505c     FD 00 48 FC | 	wrbyte	#0, objptr
05060                 | '     cmdD_updatePosition := false
05060     02 FA 85 F1 | 	sub	objptr, #2
05064     FD 00 48 FC | 	wrbyte	#0, objptr
05068                 | '     patternDelay := 0
05068     41 FB 85 F1 | 	sub	objptr, #321
0506c     FD 00 48 FC | 	wrbyte	#0, objptr
05070     A5 FA 85 F1 | 	sub	objptr, #165
05074                 | LR__0194
05074                 | LR__0195
05074     AF F0 03 F6 | 	mov	ptra, fp
05078     BA 00 A0 FD | 	call	#popregs_
0507c                 | _trackerplayer_spin2_tick_ret
0507c     2D 00 64 FD | 	ret
05080                 | 
05080                 | ' 
05080                 | ' 
05080                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
05080                 | _trackerplayer_spin2_amigaPeriodToNote
05080                 | ' 
05080                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05080     00 1E 06 F6 | 	mov	_var01, #0
05084     C4 AF 9F FE | 	loc	pa,	#(@LR__0197-@LR__0196)
05088     93 00 A0 FD | 	call	#FCACHE_LOAD_
0508c                 | LR__0196
0508c                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
0508c     06 00 00 FF 
05090     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05094     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05098     30 23 02 F6 | 	mov	_var03, arg02
0509c     03 22 66 F0 | 	shl	_var03, #3
050a0     30 23 02 F1 | 	add	_var03, arg02
050a4     03 22 66 F0 | 	shl	_var03, #3
050a8     11 21 02 F1 | 	add	_var02, _var03
050ac     0F 25 02 F6 | 	mov	_var04, _var01
050b0     01 24 66 F0 | 	shl	_var04, #1
050b4     10 25 02 F1 | 	add	_var04, _var02
050b8     12 27 E2 FA | 	rdword	_var05, _var04
050bc     2F 27 5A F2 | 	cmps	_var05, arg01 wcz
050c0                 | '       quit
050c0     06 00 00 FF 
050c4     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
050c8     0C 00 90 ED |  if_be	jmp	#LR__0198
050cc     01 1E 06 F1 | 	add	_var01, #1
050d0     24 1E 5E F2 | 	cmps	_var01, #36 wcz
050d4     B4 FF 9F CD |  if_b	jmp	#LR__0196
050d8                 | LR__0197
050d8                 | LR__0198
050d8                 | ' 
050d8                 | '   return i
050d8     0F 19 02 F6 | 	mov	result1, _var01
050dc                 | _trackerplayer_spin2_amigaPeriodToNote_ret
050dc     2D 00 64 FD | 	ret
050e0                 | 
050e0                 | ' 
050e0                 | ' 
050e0                 | ' PRI retunePeriod(period, fTune) | noteNumber
050e0                 | _trackerplayer_spin2_retunePeriod
050e0     06 5A 05 F6 | 	mov	COUNT_, #6
050e4     B0 00 A0 FD | 	call	#pushregs_
050e8     2F 6D 02 F6 | 	mov	local01, arg01
050ec     30 6F 02 F6 | 	mov	local02, arg02
050f0                 | ' 
050f0                 | '   if period > 0 and fTune < 16
050f0     00 6C 5E F2 | 	cmps	local01, #0 wcz
050f4     50 00 90 ED |  if_be	jmp	#LR__0199
050f8     10 6E 5E F2 | 	cmps	local02, #16 wcz
050fc     48 00 90 3D |  if_ae	jmp	#LR__0199
05100                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
05100     36 5F E2 FA | 	rdword	arg01, local01
05104     00 60 06 F6 | 	mov	arg02, #0
05108     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
0510c     0C 71 02 F6 | 	mov	local03, result1
05110                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
05110     06 00 00 FF 
05114     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05118     0A 73 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
0511c     37 75 02 F6 | 	mov	local05, local02
05120     03 74 66 F0 | 	shl	local05, #3
05124     37 75 02 F1 | 	add	local05, local02
05128     03 74 66 F0 | 	shl	local05, #3
0512c     3A 73 02 F1 | 	add	local04, local05
05130     01 70 66 F0 | 	shl	local03, #1
05134     39 71 02 F1 | 	add	local03, local04
05138     38 77 E2 FA | 	rdword	local06, local03
0513c     36 77 52 FC | 	wrword	local06, local01
05140     06 00 00 FF 
05144     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05148                 | LR__0199
05148     AF F0 03 F6 | 	mov	ptra, fp
0514c     BA 00 A0 FD | 	call	#popregs_
05150                 | _trackerplayer_spin2_retunePeriod_ret
05150     2D 00 64 FD | 	ret
05154                 | 
05154                 | ' 
05154                 | ' 
05154                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
05154                 | _trackerplayer_spin2_getSampleInfo
05154     2F 1F 0A F6 | 	mov	_var01, arg01 wz
05158                 | ' 
05158                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
05158     08 00 90 AD |  if_e	jmp	#LR__0200
0515c     1F 1E 5E F2 | 	cmps	_var01, #31 wcz
05160     08 00 90 ED |  if_be	jmp	#LR__0201
05164                 | LR__0200
05164                 | '     long[samplePtr] := 0
05164     30 01 68 FC | 	wrlong	#0, arg02
05168                 | '     return
05168     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
0516c                 | LR__0201
0516c                 | ' 
0516c                 | '   sampleNumber--
0516c     01 1E 86 F1 | 	sub	_var01, #1
05170                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
05170     0A FA 05 F1 | 	add	objptr, #10
05174     FD 20 02 FB | 	rdlong	_var02, objptr
05178     0F 23 02 F6 | 	mov	_var03, _var01
0517c     04 22 66 F0 | 	shl	_var03, #4
05180     0F 23 82 F1 | 	sub	_var03, _var01
05184     01 22 66 F0 | 	shl	_var03, #1
05188     11 21 02 F1 | 	add	_var02, _var03
0518c                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
0518c     10 25 02 F6 | 	mov	_var04, _var02
05190     16 24 06 F1 | 	add	_var04, #22
05194     12 27 C2 FA | 	rdbyte	_var05, _var04
05198     08 26 66 F0 | 	shl	_var05, #8
0519c     10 23 02 F6 | 	mov	_var03, _var02
051a0     17 22 06 F1 | 	add	_var03, #23
051a4     11 29 C2 FA | 	rdbyte	_var06, _var03
051a8     14 27 42 F5 | 	or	_var05, _var06
051ac     01 26 66 F0 | 	shl	_var05, #1
051b0     31 27 62 FC | 	wrlong	_var05, arg03
051b4                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
051b4     10 27 02 F6 | 	mov	_var05, _var02
051b8     18 26 06 F1 | 	add	_var05, #24
051bc     13 25 C2 FA | 	rdbyte	_var04, _var05
051c0     32 25 62 FC | 	wrlong	_var04, arg04
051c4                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
051c4     10 27 02 F6 | 	mov	_var05, _var02
051c8     19 26 06 F1 | 	add	_var05, #25
051cc     13 25 C2 FA | 	rdbyte	_var04, _var05
051d0     33 25 62 FC | 	wrlong	_var04, arg05
051d4                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
051d4     10 25 02 F6 | 	mov	_var04, _var02
051d8     1A 24 06 F1 | 	add	_var04, #26
051dc     12 27 C2 FA | 	rdbyte	_var05, _var04
051e0     08 26 66 F0 | 	shl	_var05, #8
051e4     10 23 02 F6 | 	mov	_var03, _var02
051e8     1B 22 06 F1 | 	add	_var03, #27
051ec     11 29 C2 FA | 	rdbyte	_var06, _var03
051f0     14 27 42 F5 | 	or	_var05, _var06
051f4     01 26 66 F0 | 	shl	_var05, #1
051f8     34 27 62 FC | 	wrlong	_var05, arg06
051fc                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
051fc     10 25 02 F6 | 	mov	_var04, _var02
05200     1C 24 06 F1 | 	add	_var04, #28
05204     12 27 C2 FA | 	rdbyte	_var05, _var04
05208     08 26 66 F0 | 	shl	_var05, #8
0520c     1D 20 06 F1 | 	add	_var02, #29
05210     10 29 C2 FA | 	rdbyte	_var06, _var02
05214     14 27 42 F5 | 	or	_var05, _var06
05218     01 26 66 F0 | 	shl	_var05, #1
0521c     35 27 62 FC | 	wrlong	_var05, arg07
05220                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
05220     02 1E 66 F0 | 	shl	_var01, #2
05224     08 FA 05 F1 | 	add	objptr, #8
05228     FD 1E 02 F1 | 	add	_var01, objptr
0522c     0F 23 02 FB | 	rdlong	_var03, _var01
05230     30 23 62 FC | 	wrlong	_var03, arg02
05234                 | ' 
05234                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
05234     35 27 02 FB | 	rdlong	_var05, arg07
05238     02 26 0E F2 | 	cmp	_var05, #2 wz
0523c     12 FA 85 F1 | 	sub	objptr, #18
05240     08 00 90 5D |  if_ne	jmp	#LR__0202
05244     34 25 0A FB | 	rdlong	_var04, arg06 wz
05248                 | '     long[repeatLength] := 1
05248     35 03 68 AC |  if_e	wrlong	#1, arg07
0524c                 | LR__0202
0524c                 | _trackerplayer_spin2_getSampleInfo_ret
0524c     2D 00 64 FD | 	ret
05250                 | 
05250                 | ' 
05250                 | ' 
05250                 | ' PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr
05250                 | _trackerplayer_spin2_getNoteData
05250                 | ' 
05250                 | '   ' Get the note data for a specific channel/song position/pattern row
05250                 | '   patternNumber := byte[songPositionsLut][position & 127]
05250     96 FA 05 F1 | 	add	objptr, #150
05254     FD 1E 02 FB | 	rdlong	_var01, objptr
05258     7F 60 06 F5 | 	and	arg02, #127
0525c     0F 61 02 F1 | 	add	arg02, _var01
05260     30 21 C2 FA | 	rdbyte	_var02, arg02
05264                 | '   patternPtr    := patternsData + (patternNumber << 10)
05264     04 FA 85 F1 | 	sub	objptr, #4
05268     FD 22 02 FB | 	rdlong	_var03, objptr
0526c     92 FA 85 F1 | 	sub	objptr, #146
05270     0A 20 66 F0 | 	shl	_var02, #10
05274     10 23 02 F1 | 	add	_var03, _var02
05278                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
05278     3F 62 06 F5 | 	and	arg03, #63
0527c     04 62 66 F0 | 	shl	arg03, #4
05280     31 23 02 F1 | 	add	_var03, arg03
05284     03 5E 06 F5 | 	and	arg01, #3
05288     02 5E 66 F0 | 	shl	arg01, #2
0528c     2F 23 02 F1 | 	add	_var03, arg01
05290                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
05290     11 25 C2 FA | 	rdbyte	_var04, _var03
05294     18 24 66 F0 | 	shl	_var04, #24
05298     01 22 06 F1 | 	add	_var03, #1
0529c     11 27 C2 FA | 	rdbyte	_var05, _var03
052a0     10 26 66 F0 | 	shl	_var05, #16
052a4     13 25 42 F5 | 	or	_var04, _var05
052a8     01 22 06 F1 | 	add	_var03, #1
052ac     11 29 C2 FA | 	rdbyte	_var06, _var03
052b0     08 28 66 F0 | 	shl	_var06, #8
052b4     14 25 42 F5 | 	or	_var04, _var06
052b8     01 22 06 F1 | 	add	_var03, #1
052bc     11 2B C2 FA | 	rdbyte	_var07, _var03
052c0     15 25 42 F5 | 	or	_var04, _var07
052c4                 | ' 
052c4                 | '   ' Extract the different sub parts from the data
052c4                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
052c4     12 2D 02 F6 | 	mov	_var08, _var04
052c8     0C 2C 46 F0 | 	shr	_var08, #12
052cc     0F 2C 06 F5 | 	and	_var08, #15
052d0     12 27 02 F6 | 	mov	_var05, _var04
052d4     18 26 46 F0 | 	shr	_var05, #24
052d8     F0 26 06 F5 | 	and	_var05, #240
052dc     13 2D 42 F5 | 	or	_var08, _var05
052e0     32 2D 62 FC | 	wrlong	_var08, arg04
052e4                 | '   long[period]       :=  (data >> 16) & $FFF
052e4     12 2D 02 F6 | 	mov	_var08, _var04
052e8     10 2C 46 F0 | 	shr	_var08, #16
052ec     07 00 00 FF 
052f0     FF 2D 06 F5 | 	and	_var08, ##4095
052f4     33 2D 62 FC | 	wrlong	_var08, arg05
052f8                 | '   long[effect]       :=   data & $FFF
052f8     07 00 00 FF 
052fc     FF 25 06 F5 | 	and	_var04, ##4095
05300     34 25 62 FC | 	wrlong	_var04, arg06
05304                 | _trackerplayer_spin2_getNoteData_ret
05304     2D 00 64 FD | 	ret
05308                 | 
05308                 | ' 
05308                 | ' 
05308                 | ' PRI triggerNote(channel)
05308                 | _trackerplayer_spin2_triggerNote
05308                 | ' 
05308                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
05308     2F 1F 02 F6 | 	mov	_var01, arg01
0530c     02 1E 66 F0 | 	shl	_var01, #2
05310     47 FB 05 F1 | 	add	objptr, #327
05314     FD 1E 02 F1 | 	add	_var01, objptr
05318     2F 21 02 F6 | 	mov	_var02, arg01
0531c     90 FA 85 F1 | 	sub	objptr, #144
05320     0F 23 02 FB | 	rdlong	_var03, _var01
05324     FD 20 02 F1 | 	add	_var02, objptr
05328     10 23 42 FC | 	wrbyte	_var03, _var02
0532c                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
0532c     2F 1F 02 F6 | 	mov	_var01, arg01
05330     02 1E 66 F0 | 	shl	_var01, #2
05334     80 FA 05 F1 | 	add	objptr, #128
05338     FD 1E 02 F1 | 	add	_var01, objptr
0533c     2F 21 02 F6 | 	mov	_var02, arg01
05340     02 20 66 F0 | 	shl	_var02, #2
05344     90 FA 85 F1 | 	sub	objptr, #144
05348     0F 23 02 FB | 	rdlong	_var03, _var01
0534c     FD 20 02 F1 | 	add	_var02, objptr
05350     10 23 62 FC | 	wrlong	_var03, _var02
05354                 | '   currPeriod[channel]       := lastSetPeriod[channel]
05354     2F 1F 02 F6 | 	mov	_var01, arg01
05358     02 1E 66 F0 | 	shl	_var01, #2
0535c     80 FA 05 F1 | 	add	objptr, #128
05360     FD 1E 02 F1 | 	add	_var01, objptr
05364     2F 21 02 F6 | 	mov	_var02, arg01
05368     02 20 66 F0 | 	shl	_var02, #2
0536c     48 FA 85 F1 | 	sub	objptr, #72
05370     0F 23 02 FB | 	rdlong	_var03, _var01
05374     FD 20 02 F1 | 	add	_var02, objptr
05378     10 23 62 FC | 	wrlong	_var03, _var02
0537c                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
0537c     2F 1F 02 F6 | 	mov	_var01, arg01
05380     02 1E 66 F0 | 	shl	_var01, #2
05384     78 FA 05 F1 | 	add	objptr, #120
05388     FD 1E 02 F1 | 	add	_var01, objptr
0538c     2F 25 02 F6 | 	mov	_var04, arg01
05390     01 24 66 F0 | 	shl	_var04, #1
05394     9C FA 85 F1 | 	sub	objptr, #156
05398     0F 27 02 FB | 	rdlong	_var05, _var01
0539c     FD 24 02 F1 | 	add	_var04, objptr
053a0     12 27 52 FC | 	wrword	_var05, _var04
053a4                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
053a4     2F 1F 02 F6 | 	mov	_var01, arg01
053a8     02 1E 66 F0 | 	shl	_var01, #2
053ac     AC FA 05 F1 | 	add	objptr, #172
053b0     FD 1E 02 F1 | 	add	_var01, objptr
053b4     2F 21 02 F6 | 	mov	_var02, arg01
053b8     02 20 66 F0 | 	shl	_var02, #2
053bc     A4 FA 85 F1 | 	sub	objptr, #164
053c0     0F 23 02 FB | 	rdlong	_var03, _var01
053c4     FD 20 02 F1 | 	add	_var02, objptr
053c8     10 23 62 FC | 	wrlong	_var03, _var02
053cc                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
053cc     2F 1F 02 F6 | 	mov	_var01, arg01
053d0     02 1E 66 F0 | 	shl	_var01, #2
053d4     B4 FA 05 F1 | 	add	objptr, #180
053d8     FD 1E 02 F1 | 	add	_var01, objptr
053dc     2F 25 02 F6 | 	mov	_var04, arg01
053e0     01 24 66 F0 | 	shl	_var04, #1
053e4     A0 FA 85 F1 | 	sub	objptr, #160
053e8     0F 27 02 FB | 	rdlong	_var05, _var01
053ec     FD 24 02 F1 | 	add	_var04, objptr
053f0     12 27 52 FC | 	wrword	_var05, _var04
053f4                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
053f4     2F 29 02 F6 | 	mov	_var06, arg01
053f8     1F FB 05 F1 | 	add	objptr, #287
053fc     FD 28 02 F1 | 	add	_var06, objptr
05400     14 1F C2 FA | 	rdbyte	_var01, _var06
05404     01 1E 06 F1 | 	add	_var01, #1
05408     FD 5E 02 F1 | 	add	arg01, objptr
0540c     2F 1F 42 FC | 	wrbyte	_var01, arg01
05410     F6 FB 85 F1 | 	sub	objptr, #502
05414                 | _trackerplayer_spin2_triggerNote_ret
05414     2D 00 64 FD | 	ret
05418                 | 
05418                 | ' 
05418                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
05418                 | _trackerplayer_spin2_processChannel
05418     08 5A 05 F6 | 	mov	COUNT_, #8
0541c     B0 00 A0 FD | 	call	#pushregs_
05420     24 F0 07 F1 | 	add	ptra, #36
05424     AF 5E 62 FC | 	wrlong	arg01, fp
05428     04 5E 05 F1 | 	add	fp, #4
0542c     AF 60 62 FC | 	wrlong	arg02, fp
05430     04 5E 05 F1 | 	add	fp, #4
05434     AF 62 62 FC | 	wrlong	arg03, fp
05438     04 5E 05 F1 | 	add	fp, #4
0543c     AF 64 62 FC | 	wrlong	arg04, fp
05440     0C 5E 85 F1 | 	sub	fp, #12
05444                 | ' 
05444                 | '   channel := channel & 3
05444     AF 6C 02 FB | 	rdlong	local01, fp
05448     03 6C 06 F5 | 	and	local01, #3
0544c     AF 6C 62 FC | 	wrlong	local01, fp
05450                 | '   cmd     := (effect >> 8) & $F
05450     0C 5E 05 F1 | 	add	fp, #12
05454     AF 6C 02 FB | 	rdlong	local01, fp
05458     08 6C 46 F0 | 	shr	local01, #8
0545c     0F 6C 06 F5 | 	and	local01, #15
05460     BA FB 05 F1 | 	add	objptr, #442
05464     FD 6C 42 FC | 	wrbyte	local01, objptr
05468                 | '   x       := (effect >> 4) & $F
05468     AF 6C 02 FB | 	rdlong	local01, fp
0546c     04 6C 46 F0 | 	shr	local01, #4
05470     0F 6C 06 F5 | 	and	local01, #15
05474     03 FA 85 F1 | 	sub	objptr, #3
05478     FD 6C 42 FC | 	wrbyte	local01, objptr
0547c                 | '   y       := (effect     ) & $F
0547c     AF 6C 02 FB | 	rdlong	local01, fp
05480     0F 6C 06 F5 | 	and	local01, #15
05484     01 FA 05 F1 | 	add	objptr, #1
05488     FD 6C 42 FC | 	wrbyte	local01, objptr
0548c                 | '   z       := (effect     ) & $FF
0548c     AF 6C 02 FB | 	rdlong	local01, fp
05490     0C 5E 85 F1 | 	sub	fp, #12
05494     FF 6C 06 F5 | 	and	local01, #255
05498     01 FA 05 F1 | 	add	objptr, #1
0549c     FD 6C 42 FC | 	wrbyte	local01, objptr
054a0                 | ' 
054a0                 | '   ' Handle everything that executes on "tick zero"
054a0                 | '   if tickCounter == 0
054a0     18 FB 85 F1 | 	sub	objptr, #280
054a4     FD 6C CA FA | 	rdbyte	local01, objptr wz
054a8     A1 FA 85 F1 | 	sub	objptr, #161
054ac     DC 03 90 5D |  if_ne	jmp	#LR__0213
054b0                 | ' 
054b0                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
054b0                 | '     deltaPeriod[channel] := 0
054b0     AF 6C 02 FB | 	rdlong	local01, fp
054b4     02 6C 66 F0 | 	shl	local01, #2
054b8     EF FA 05 F1 | 	add	objptr, #239
054bc     FD 6C 02 F1 | 	add	local01, objptr
054c0     36 01 68 FC | 	wrlong	#0, local01
054c4                 | '     deltaVolume[channel] := 0
054c4     AF 6C 02 FB | 	rdlong	local01, fp
054c8     02 6C 66 F0 | 	shl	local01, #2
054cc     20 FA 05 F1 | 	add	objptr, #32
054d0     FD 6C 02 F1 | 	add	local01, objptr
054d4     36 01 68 FC | 	wrlong	#0, local01
054d8                 | ' 
054d8                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
054d8                 | '     if sampleNumber > 0
054d8     04 5E 05 F1 | 	add	fp, #4
054dc     AF 6C 02 FB | 	rdlong	local01, fp
054e0     04 5E 85 F1 | 	sub	fp, #4
054e4     00 6C 5E F2 | 	cmps	local01, #0 wcz
054e8     0F FB 85 F1 | 	sub	objptr, #271
054ec     20 00 90 ED |  if_be	jmp	#LR__0203
054f0                 | '       sampleNumber_memory[channel] := sampleNumber
054f0     AF 6C 02 FB | 	rdlong	local01, fp
054f4     E0 FB 05 F1 | 	add	objptr, #480
054f8     FD 6C 02 F1 | 	add	local01, objptr
054fc     04 5E 05 F1 | 	add	fp, #4
05500     AF 6E 02 FB | 	rdlong	local02, fp
05504     04 5E 85 F1 | 	sub	fp, #4
05508     36 6F 42 FC | 	wrbyte	local02, local01
0550c     E0 FB 85 F1 | 	sub	objptr, #480
05510                 | LR__0203
05510                 | ' 
05510                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
05510                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
05510     AF 70 02 FB | 	rdlong	local03, fp
05514     E0 FB 05 F1 | 	add	objptr, #480
05518     FD 70 02 F1 | 	add	local03, objptr
0551c     38 5F C2 FA | 	rdbyte	arg01, local03
05520     20 5E 05 F1 | 	add	fp, #32
05524     AF 60 02 F6 | 	mov	arg02, fp
05528     10 5E 85 F1 | 	sub	fp, #16
0552c     AF 62 02 F6 | 	mov	arg03, fp
05530     31 FA 85 F1 | 	sub	objptr, #49
05534     FD 64 02 F6 | 	mov	arg04, objptr
05538     AF FB 85 F1 | 	sub	objptr, #431
0553c     04 5E 05 F1 | 	add	fp, #4
05540     AF 66 02 F6 | 	mov	arg05, fp
05544     04 5E 05 F1 | 	add	fp, #4
05548     AF 68 02 F6 | 	mov	arg06, fp
0554c     04 5E 05 F1 | 	add	fp, #4
05550     AF 72 02 F6 | 	mov	local04, fp
05554     39 75 02 F6 | 	mov	local05, local04
05558     3A 6B 02 F6 | 	mov	arg07, local05
0555c     1C 5E 85 F1 | 	sub	fp, #28
05560     F0 FB BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
05564                 | ' 
05564                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
05564                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
05564                 | '     if sampleNumber > 0
05564     04 5E 05 F1 | 	add	fp, #4
05568     AF 6C 02 FB | 	rdlong	local01, fp
0556c     04 5E 85 F1 | 	sub	fp, #4
05570     00 6C 5E F2 | 	cmps	local01, #0 wcz
05574     24 00 90 ED |  if_be	jmp	#LR__0204
05578                 | '       currVolume[channel] := volume
05578     AF 6C 02 FB | 	rdlong	local01, fp
0557c     02 6C 66 F0 | 	shl	local01, #2
05580     FF FA 05 F1 | 	add	objptr, #255
05584     FD 6C 02 F1 | 	add	local01, objptr
05588     14 5E 05 F1 | 	add	fp, #20
0558c     AF 6E 02 FB | 	rdlong	local02, fp
05590     14 5E 85 F1 | 	sub	fp, #20
05594     36 6F 62 FC | 	wrlong	local02, local01
05598     FF FA 85 F1 | 	sub	objptr, #255
0559c                 | LR__0204
0559c                 | ' 
0559c                 | '     ' Handle all commands that executes on "zero tick"
0559c                 | '     sampleOffset := 0
0559c     B3 FB 05 F1 | 	add	objptr, #435
055a0     FD 00 68 FC | 	wrlong	#0, objptr
055a4     B3 FB 85 F1 | 	sub	objptr, #435
055a8                 | '     handleZeroTickCommands(channel)
055a8     AF 5E 02 FB | 	rdlong	arg01, fp
055ac     98 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
055b0                 | ' 
055b0                 | '     ' Prepare sample data for triggering (now or later)
055b0                 | '     if period > 0
055b0     08 5E 05 F1 | 	add	fp, #8
055b4     AF 6C 02 FB | 	rdlong	local01, fp
055b8     08 5E 85 F1 | 	sub	fp, #8
055bc     00 6C 5E F2 | 	cmps	local01, #0 wcz
055c0     D0 02 90 ED |  if_be	jmp	#LR__0214
055c4                 | ' 
055c4                 | '       retunePeriod(@period, fineTune)
055c4     08 5E 05 F1 | 	add	fp, #8
055c8     AF 5E 02 F6 | 	mov	arg01, fp
055cc     08 5E 85 F1 | 	sub	fp, #8
055d0     AF FB 05 F1 | 	add	objptr, #431
055d4     FD 60 02 FB | 	rdlong	arg02, objptr
055d8     AF FB 85 F1 | 	sub	objptr, #431
055dc     00 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
055e0                 | '       currFineTune[channel]        := fineTune
055e0     AF 6C 02 FB | 	rdlong	local01, fp
055e4     D3 FA 05 F1 | 	add	objptr, #211
055e8     FD 6C 02 F1 | 	add	local01, objptr
055ec     DC FA 05 F1 | 	add	objptr, #220
055f0     FD 6E 02 FB | 	rdlong	local02, objptr
055f4     36 6F 42 FC | 	wrbyte	local02, local01
055f8                 | '       lastSetPeriod[channel]       := period
055f8     AF 6C 02 FB | 	rdlong	local01, fp
055fc     02 6C 66 F0 | 	shl	local01, #2
05600     88 FA 85 F1 | 	sub	objptr, #136
05604     FD 6C 02 F1 | 	add	local01, objptr
05608     08 5E 05 F1 | 	add	fp, #8
0560c     AF 6E 02 FB | 	rdlong	local02, fp
05610     36 6F 62 FC | 	wrlong	local02, local01
05614     08 5E 85 F1 | 	sub	fp, #8
05618                 | '       lastSetRepeatLength[channel] := repeatLength
05618     AF 6C 02 FB | 	rdlong	local01, fp
0561c     02 6C 66 F0 | 	shl	local01, #2
05620     40 FA 05 F1 | 	add	objptr, #64
05624     FD 6C 02 F1 | 	add	local01, objptr
05628     1C 5E 05 F1 | 	add	fp, #28
0562c     AF 6E 02 FB | 	rdlong	local02, fp
05630     36 6F 62 FC | 	wrlong	local02, local01
05634     1C 5E 85 F1 | 	sub	fp, #28
05638                 | '       lastSetRepeatPoint[channel]  := repeatPoint
05638     AF 6C 02 FB | 	rdlong	local01, fp
0563c     02 6C 66 F0 | 	shl	local01, #2
05640     10 FA 05 F1 | 	add	objptr, #16
05644     FD 6C 02 F1 | 	add	local01, objptr
05648     18 5E 05 F1 | 	add	fp, #24
0564c     AF 6E 02 FB | 	rdlong	local02, fp
05650     36 6F 62 FC | 	wrlong	local02, local01
05654                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
05654     08 5E 05 F1 | 	add	fp, #8
05658     AF 6C 02 FB | 	rdlong	local01, fp
0565c     20 5E 85 F1 | 	sub	fp, #32
05660     3C FA 05 F1 | 	add	objptr, #60
05664     FD 6E 02 FB | 	rdlong	local02, objptr
05668     37 6D 02 F1 | 	add	local01, local02
0566c     AF 76 02 FB | 	rdlong	local06, fp
05670     02 76 66 F0 | 	shl	local06, #2
05674     7C FA 85 F1 | 	sub	objptr, #124
05678     FD 78 02 F6 | 	mov	local07, objptr
0567c     FD 76 02 F1 | 	add	local06, objptr
05680     3B 6D 62 FC | 	wrlong	local01, local06
05684                 | '       lastSetSampleNr[channel]     := sampleNumber
05684     AF 6C 02 FB | 	rdlong	local01, fp
05688     02 6C 66 F0 | 	shl	local01, #2
0568c     10 FA 05 F1 | 	add	objptr, #16
05690     FD 6C 02 F1 | 	add	local01, objptr
05694     04 5E 05 F1 | 	add	fp, #4
05698     AF 6E 02 FB | 	rdlong	local02, fp
0569c     36 6F 62 FC | 	wrlong	local02, local01
056a0                 | ' 
056a0                 | '       ' This calculates the correct sample length in all situations
056a0                 | '       if repeatLength > 2
056a0     18 5E 05 F1 | 	add	fp, #24
056a4     AF 6C 02 FB | 	rdlong	local01, fp
056a8     1C 5E 85 F1 | 	sub	fp, #28
056ac     02 6C 5E F2 | 	cmps	local01, #2 wcz
056b0     47 FB 85 F1 | 	sub	objptr, #327
056b4     20 00 90 ED |  if_be	jmp	#LR__0205
056b8                 | '         sampleLength := repeatPoint + repeatLength
056b8     18 5E 05 F1 | 	add	fp, #24
056bc     AF 6C 02 FB | 	rdlong	local01, fp
056c0     04 5E 05 F1 | 	add	fp, #4
056c4     AF 6E 02 FB | 	rdlong	local02, fp
056c8     37 6D 02 F1 | 	add	local01, local02
056cc     0C 5E 85 F1 | 	sub	fp, #12
056d0     AF 6C 62 FC | 	wrlong	local01, fp
056d4     10 5E 85 F1 | 	sub	fp, #16
056d8                 | LR__0205
056d8                 | ' 
056d8                 | '       if sampleLength - sampleOffset < 1
056d8     10 5E 05 F1 | 	add	fp, #16
056dc     AF 6C 02 FB | 	rdlong	local01, fp
056e0     10 5E 85 F1 | 	sub	fp, #16
056e4     B3 FB 05 F1 | 	add	objptr, #435
056e8     FD 6E 02 FB | 	rdlong	local02, objptr
056ec     B3 FB 85 F1 | 	sub	objptr, #435
056f0     37 6D 82 F1 | 	sub	local01, local02
056f4     01 6C 5E F2 | 	cmps	local01, #1 wcz
056f8     1C 00 90 3D |  if_ae	jmp	#LR__0206
056fc                 | '         lastSetSampleLength[channel] := 1
056fc     AF 6C 02 FB | 	rdlong	local01, fp
05700     02 6C 66 F0 | 	shl	local01, #2
05704     57 FB 05 F1 | 	add	objptr, #343
05708     FD 6C 02 F1 | 	add	local01, objptr
0570c     36 03 68 FC | 	wrlong	#1, local01
05710                 | '       else
05710     57 FB 85 F1 | 	sub	objptr, #343
05714     34 00 90 FD | 	jmp	#LR__0207
05718                 | LR__0206
05718                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
05718     10 5E 05 F1 | 	add	fp, #16
0571c     AF 6C 02 FB | 	rdlong	local01, fp
05720     10 5E 85 F1 | 	sub	fp, #16
05724     B3 FB 05 F1 | 	add	objptr, #435
05728     FD 6E 02 FB | 	rdlong	local02, objptr
0572c     37 6D 82 F1 | 	sub	local01, local02
05730     AF 76 02 FB | 	rdlong	local06, fp
05734     02 76 66 F0 | 	shl	local06, #2
05738     5C FA 85 F1 | 	sub	objptr, #92
0573c     FD 78 02 F6 | 	mov	local07, objptr
05740     FD 76 02 F1 | 	add	local06, objptr
05744     3B 6D 62 FC | 	wrlong	local01, local06
05748     57 FB 85 F1 | 	sub	objptr, #343
0574c                 | LR__0207
0574c                 | ' 
0574c                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
0574c                 | '       if sampleOffset > sampleLength
0574c     B3 FB 05 F1 | 	add	objptr, #435
05750     FD 6C 02 FB | 	rdlong	local01, objptr
05754     B3 FB 85 F1 | 	sub	objptr, #435
05758     10 5E 05 F1 | 	add	fp, #16
0575c     AF 6E 02 FB | 	rdlong	local02, fp
05760     10 5E 85 F1 | 	sub	fp, #16
05764     37 6D 5A F2 | 	cmps	local01, local02 wcz
05768     54 00 90 ED |  if_be	jmp	#LR__0208
0576c                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
0576c     20 5E 05 F1 | 	add	fp, #32
05770     AF 6C 02 FB | 	rdlong	local01, fp
05774     08 5E 85 F1 | 	sub	fp, #8
05778     AF 6E 02 FB | 	rdlong	local02, fp
0577c     18 5E 85 F1 | 	sub	fp, #24
05780     37 6D 02 F1 | 	add	local01, local02
05784     AF 76 02 FB | 	rdlong	local06, fp
05788     02 76 66 F0 | 	shl	local06, #2
0578c     37 FB 05 F1 | 	add	objptr, #311
05790     FD 78 02 F6 | 	mov	local07, objptr
05794     FD 76 02 F1 | 	add	local06, objptr
05798     3B 6D 62 FC | 	wrlong	local01, local06
0579c                 | '         lastSetSampleLength[channel] := repeatLength
0579c     AF 6C 02 FB | 	rdlong	local01, fp
057a0     02 6C 66 F0 | 	shl	local01, #2
057a4     20 FA 05 F1 | 	add	objptr, #32
057a8     FD 6C 02 F1 | 	add	local01, objptr
057ac     1C 5E 05 F1 | 	add	fp, #28
057b0     AF 6E 02 FB | 	rdlong	local02, fp
057b4     1C 5E 85 F1 | 	sub	fp, #28
057b8     36 6F 62 FC | 	wrlong	local02, local01
057bc     57 FB 85 F1 | 	sub	objptr, #343
057c0                 | LR__0208
057c0                 | ' 
057c0                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
057c0                 | '       ifnot cmd == $3 || cmd == $5
057c0     BA FB 05 F1 | 	add	objptr, #442
057c4     FD 6C C2 FA | 	rdbyte	local01, objptr
057c8     BA FB 85 F1 | 	sub	objptr, #442
057cc     03 6C 0E F2 | 	cmp	local01, #3 wz
057d0     54 00 90 AD |  if_e	jmp	#LR__0211
057d4     BA FB 05 F1 | 	add	objptr, #442
057d8     FD 7A C2 FA | 	rdbyte	local08, objptr
057dc     BA FB 85 F1 | 	sub	objptr, #442
057e0     3D 6F 02 F6 | 	mov	local02, local08
057e4     05 6E 0E F2 | 	cmp	local02, #5 wz
057e8     3C 00 90 AD |  if_e	jmp	#LR__0211
057ec                 | '         ifnot cmd == $E && x == $D
057ec     BA FB 05 F1 | 	add	objptr, #442
057f0     FD 70 C2 FA | 	rdbyte	local03, objptr
057f4     BA FB 85 F1 | 	sub	objptr, #442
057f8     38 6D 02 F6 | 	mov	local01, local03
057fc     0E 6C 0E F2 | 	cmp	local01, #14 wz
05800     18 00 90 5D |  if_ne	jmp	#LR__0209
05804     B7 FB 05 F1 | 	add	objptr, #439
05808     FD 7A C2 FA | 	rdbyte	local08, objptr
0580c     B7 FB 85 F1 | 	sub	objptr, #439
05810     3D 6F 02 F6 | 	mov	local02, local08
05814     0D 6E 0E F2 | 	cmp	local02, #13 wz
05818     0C 00 90 AD |  if_e	jmp	#LR__0210
0581c                 | LR__0209
0581c                 | '           triggerNote(channel)
0581c     AF 6C 02 FB | 	rdlong	local01, fp
05820     36 5F 02 F6 | 	mov	arg01, local01
05824     E0 FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
05828                 | LR__0210
05828                 | LR__0211
05828                 | ' 
05828                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
05828                 | '       if resetTremolo[channel] > 0
05828     AF 6C 02 FB | 	rdlong	local01, fp
0582c     8F FB 05 F1 | 	add	objptr, #399
05830     FD 6C 02 F1 | 	add	local01, objptr
05834     36 6F C2 FA | 	rdbyte	local02, local01
05838     00 6E 5E F2 | 	cmps	local02, #0 wcz
0583c     8F FB 85 F1 | 	sub	objptr, #399
05840     14 00 90 ED |  if_be	jmp	#LR__0212
05844                 | '         tremoloPos[channel] := 0
05844     AF 6C 02 FB | 	rdlong	local01, fp
05848     8B FB 05 F1 | 	add	objptr, #395
0584c     FD 6C 02 F1 | 	add	local01, objptr
05850     36 01 48 FC | 	wrbyte	#0, local01
05854     8B FB 85 F1 | 	sub	objptr, #395
05858                 | LR__0212
05858                 | ' 
05858                 | '       if resetVibrato[channel] > 0
05858     AF 6C 02 FB | 	rdlong	local01, fp
0585c     93 FB 05 F1 | 	add	objptr, #403
05860     FD 6C 02 F1 | 	add	local01, objptr
05864     36 6F C2 FA | 	rdbyte	local02, local01
05868     00 6E 5E F2 | 	cmps	local02, #0 wcz
0586c     93 FB 85 F1 | 	sub	objptr, #403
05870     20 00 90 ED |  if_be	jmp	#LR__0214
05874                 | '         vibratoPos[channel] := 0
05874     AF 6C 02 FB | 	rdlong	local01, fp
05878     87 FB 05 F1 | 	add	objptr, #391
0587c     FD 6C 02 F1 | 	add	local01, objptr
05880     36 01 48 FC | 	wrbyte	#0, local01
05884     87 FB 85 F1 | 	sub	objptr, #391
05888                 | ' 
05888                 | '   else
05888     08 00 90 FD | 	jmp	#LR__0214
0588c                 | LR__0213
0588c                 | '     ' Handle commands that executes on all "non zero ticks"
0588c                 | '     handleNonZeroTickCommands(channel)
0588c     AF 5E 02 FB | 	rdlong	arg01, fp
05890     14 05 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
05894                 | LR__0214
05894                 | ' 
05894                 | '   ' Handle commands that executes on every tick
05894                 | '   handleEveryTickCommands(channel)
05894     AF 5E 02 FB | 	rdlong	arg01, fp
05898     70 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
0589c                 | ' 
0589c                 | '   ' Handle boundaries that should be kept
0589c                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
0589c     AF 70 02 FB | 	rdlong	local03, fp
058a0     02 70 66 F0 | 	shl	local03, #2
058a4     DF FA 05 F1 | 	add	objptr, #223
058a8     FD 70 02 F1 | 	add	local03, objptr
058ac     38 6D 02 FB | 	rdlong	local01, local03
058b0     01 00 00 FF 
058b4     58 6D 66 F3 | 	fles	local01, ##856
058b8     AF 7A 02 FB | 	rdlong	local08, fp
058bc     02 7A 66 F0 | 	shl	local08, #2
058c0     FD 7A 02 F1 | 	add	local08, objptr
058c4     3D 6D 62 FC | 	wrlong	local01, local08
058c8                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
058c8     AF 70 02 FB | 	rdlong	local03, fp
058cc     02 70 66 F0 | 	shl	local03, #2
058d0     FD 70 02 F1 | 	add	local03, objptr
058d4     38 6D 02 FB | 	rdlong	local01, local03
058d8     71 6C 46 F3 | 	fges	local01, #113
058dc     AF 7A 02 FB | 	rdlong	local08, fp
058e0     02 7A 66 F0 | 	shl	local08, #2
058e4     FD 7A 02 F1 | 	add	local08, objptr
058e8     3D 6D 62 FC | 	wrlong	local01, local08
058ec                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
058ec     AF 70 02 FB | 	rdlong	local03, fp
058f0     02 70 66 F0 | 	shl	local03, #2
058f4     20 FA 05 F1 | 	add	objptr, #32
058f8     FD 70 02 F1 | 	add	local03, objptr
058fc     38 6D 02 FB | 	rdlong	local01, local03
05900     40 6C 66 F3 | 	fles	local01, #64
05904     AF 7A 02 FB | 	rdlong	local08, fp
05908     02 7A 66 F0 | 	shl	local08, #2
0590c     FD 7A 02 F1 | 	add	local08, objptr
05910     3D 6D 62 FC | 	wrlong	local01, local08
05914                 | '   currVolume[channel] #>= MINIMUM_VOLUME
05914     AF 70 02 FB | 	rdlong	local03, fp
05918     02 70 66 F0 | 	shl	local03, #2
0591c     FD 70 02 F1 | 	add	local03, objptr
05920     38 6D 02 FB | 	rdlong	local01, local03
05924     00 6C 46 F3 | 	fges	local01, #0
05928     AF 7A 02 FB | 	rdlong	local08, fp
0592c     02 7A 66 F0 | 	shl	local08, #2
05930     FD 7A 02 F1 | 	add	local08, objptr
05934     3D 6D 62 FC | 	wrlong	local01, local08
05938     FF FA 85 F1 | 	sub	objptr, #255
0593c     AF F0 03 F6 | 	mov	ptra, fp
05940     BA 00 A0 FD | 	call	#popregs_
05944                 | _trackerplayer_spin2_processChannel_ret
05944     2D 00 64 FD | 	ret
05948                 | 
05948                 | ' 
05948                 | ' 
05948                 | ' ' Handle all commands that executes on tick zero
05948                 | ' '
05948                 | ' PRI handleZeroTickCommands(channel)
05948                 | _trackerplayer_spin2_handleZeroTickCommands
05948     2F 1F 02 F6 | 	mov	_var01, arg01
0594c                 | ' 
0594c                 | '   CASE_FAST cmd
0594c     BA FB 05 F1 | 	add	objptr, #442
05950     FD 20 C2 FA | 	rdbyte	_var02, objptr
05954     BA FB 85 F1 | 	sub	objptr, #442
05958     10 23 02 F6 | 	mov	_var03, _var02
0595c     09 22 86 F1 | 	sub	_var03, #9
05960     07 22 26 F3 | 	fle	_var03, #7
05964     11 25 02 F6 | 	mov	_var04, _var03
05968     30 24 62 FD | 	jmprel	_var04
0596c                 | LR__0215
0596c     1C 00 90 FD | 	jmp	#LR__0216
05970     30 04 90 FD | 	jmp	#LR__0239
05974     64 00 90 FD | 	jmp	#LR__0218
05978     84 00 90 FD | 	jmp	#LR__0219
0597c     A0 00 90 FD | 	jmp	#LR__0220
05980     D0 00 90 FD | 	jmp	#LR__0221
05984     9C 03 90 FD | 	jmp	#LR__0236
05988     18 04 90 FD | 	jmp	#LR__0239
0598c                 | LR__0216
0598c                 | ' 
0598c                 | '     $9:                          ' Set sample offset
0598c                 | '       if z > 0
0598c     B9 FB 05 F1 | 	add	objptr, #441
05990     FD 26 C2 FA | 	rdbyte	_var05, objptr
05994     B9 FB 85 F1 | 	sub	objptr, #441
05998     00 26 5E F2 | 	cmps	_var05, #0 wcz
0599c     1C 00 90 ED |  if_be	jmp	#LR__0217
059a0                 | '         cmd9_memoryZ[channel] := z
059a0     0F 27 02 F6 | 	mov	_var05, _var01
059a4     DC FB 05 F1 | 	add	objptr, #476
059a8     FD 26 02 F1 | 	add	_var05, objptr
059ac     23 FA 85 F1 | 	sub	objptr, #35
059b0     FD 28 C2 FA | 	rdbyte	_var06, objptr
059b4     B9 FB 85 F1 | 	sub	objptr, #441
059b8     13 29 42 FC | 	wrbyte	_var06, _var05
059bc                 | LR__0217
059bc                 | ' 
059bc                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
059bc     DC FB 05 F1 | 	add	objptr, #476
059c0     FD 1E 02 F1 | 	add	_var01, objptr
059c4     0F 27 C2 FA | 	rdbyte	_var05, _var01
059c8     08 26 66 F0 | 	shl	_var05, #8
059cc     29 FA 85 F1 | 	sub	objptr, #41
059d0     FD 26 62 FC | 	wrlong	_var05, objptr
059d4     B3 FB 85 F1 | 	sub	objptr, #435
059d8     C8 03 90 FD | 	jmp	#LR__0239
059dc                 | LR__0218
059dc                 | ' 
059dc                 | '     $B:                          ' Jump position
059dc                 | '       cmdB_memoryZ := z
059dc     B9 FB 05 F1 | 	add	objptr, #441
059e0     FD 26 C2 FA | 	rdbyte	_var05, objptr
059e4     2E FA 05 F1 | 	add	objptr, #46
059e8     FD 26 42 FC | 	wrbyte	_var05, objptr
059ec                 | '       cmdB_updatePosition := true
059ec     01 FA 05 F1 | 	add	objptr, #1
059f0     FF FF FF FF 
059f4     FD FE 4B FC | 	wrbyte	##-1, objptr
059f8     E8 FB 85 F1 | 	sub	objptr, #488
059fc     A4 03 90 FD | 	jmp	#LR__0239
05a00                 | LR__0219
05a00                 | ' 
05a00                 | '     $C:                          ' Set volume
05a00                 | '       currVolume[channel] := z
05a00     02 1E 66 F0 | 	shl	_var01, #2
05a04     FF FA 05 F1 | 	add	objptr, #255
05a08     FD 1E 02 F1 | 	add	_var01, objptr
05a0c     BA FA 05 F1 | 	add	objptr, #186
05a10     FD 28 C2 FA | 	rdbyte	_var06, objptr
05a14     B9 FB 85 F1 | 	sub	objptr, #441
05a18     0F 29 62 FC | 	wrlong	_var06, _var01
05a1c     84 03 90 FD | 	jmp	#LR__0239
05a20                 | LR__0220
05a20                 | ' 
05a20                 | '     $D:                          ' Pattern break
05a20                 | '       cmdD_memoryX := x
05a20     B7 FB 05 F1 | 	add	objptr, #439
05a24     FD 26 C2 FA | 	rdbyte	_var05, objptr
05a28     2D FA 05 F1 | 	add	objptr, #45
05a2c     FD 26 42 FC | 	wrbyte	_var05, objptr
05a30                 | '       cmdD_memoryY := y
05a30     2C FA 85 F1 | 	sub	objptr, #44
05a34     FD 26 C2 FA | 	rdbyte	_var05, objptr
05a38     2D FA 05 F1 | 	add	objptr, #45
05a3c     FD 26 42 FC | 	wrbyte	_var05, objptr
05a40                 | '       cmdD_updatePosition := true
05a40     01 FA 05 F1 | 	add	objptr, #1
05a44     FF FF FF FF 
05a48     FD FE 4B FC | 	wrbyte	##-1, objptr
05a4c     E6 FB 85 F1 | 	sub	objptr, #486
05a50     50 03 90 FD | 	jmp	#LR__0239
05a54                 | LR__0221
05a54                 | ' 
05a54                 | '     $E:                          ' Handle "E commands" that execute on tick zero
05a54                 | ' 
05a54                 | '       CASE_FAST x
05a54     B7 FB 05 F1 | 	add	objptr, #439
05a58     FD 2A C2 FA | 	rdbyte	_var07, objptr
05a5c     B7 FB 85 F1 | 	sub	objptr, #439
05a60     15 27 02 F6 | 	mov	_var05, _var07
05a64     0F 26 26 F3 | 	fle	_var05, #15
05a68     13 2D 02 F6 | 	mov	_var08, _var05
05a6c     30 2C 62 FD | 	jmprel	_var08
05a70                 | LR__0222
05a70     3C 00 90 FD | 	jmp	#LR__0223
05a74     58 00 90 FD | 	jmp	#LR__0224
05a78     8C 00 90 FD | 	jmp	#LR__0225
05a7c     C0 00 90 FD | 	jmp	#LR__0226
05a80     DC 00 90 FD | 	jmp	#LR__0227
05a84     14 01 90 FD | 	jmp	#LR__0228
05a88     28 01 90 FD | 	jmp	#LR__0229
05a8c     C0 01 90 FD | 	jmp	#LR__0232
05a90     10 03 90 FD | 	jmp	#LR__0239
05a94     0C 03 90 FD | 	jmp	#LR__0239
05a98     F0 01 90 FD | 	jmp	#LR__0233
05a9c     24 02 90 FD | 	jmp	#LR__0234
05aa0     00 03 90 FD | 	jmp	#LR__0239
05aa4     FC 02 90 FD | 	jmp	#LR__0239
05aa8     50 02 90 FD | 	jmp	#LR__0235
05aac     F4 02 90 FD | 	jmp	#LR__0239
05ab0                 | LR__0223
05ab0                 | ' 
05ab0                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
05ab0     B8 FB 05 F1 | 	add	objptr, #440
05ab4     FD 28 C2 FA | 	rdbyte	_var06, objptr
05ab8     14 29 22 F6 | 	not	_var06, _var06
05abc     01 28 06 F5 | 	and	_var06, #1
05ac0     03 FA 05 F1 | 	add	objptr, #3
05ac4     FD 28 42 FC | 	wrbyte	_var06, objptr
05ac8     BB FB 85 F1 | 	sub	objptr, #443
05acc     D4 02 90 FD | 	jmp	#LR__0239
05ad0                 | LR__0224
05ad0                 | ' 
05ad0                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
05ad0     0F 2F 02 F6 | 	mov	_var09, _var01
05ad4     02 2E 66 F0 | 	shl	_var09, #2
05ad8     DF FA 05 F1 | 	add	objptr, #223
05adc     FD 2E 02 F1 | 	add	_var09, objptr
05ae0     17 29 02 FB | 	rdlong	_var06, _var09
05ae4     D9 FA 05 F1 | 	add	objptr, #217
05ae8     FD 30 C2 FA | 	rdbyte	_var10, objptr
05aec     18 29 82 F1 | 	sub	_var06, _var10
05af0     02 1E 66 F0 | 	shl	_var01, #2
05af4     D9 FA 85 F1 | 	sub	objptr, #217
05af8     FD 1E 02 F1 | 	add	_var01, objptr
05afc     0F 29 62 FC | 	wrlong	_var06, _var01
05b00     DF FA 85 F1 | 	sub	objptr, #223
05b04     9C 02 90 FD | 	jmp	#LR__0239
05b08                 | LR__0225
05b08                 | ' 
05b08                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
05b08     0F 2F 02 F6 | 	mov	_var09, _var01
05b0c     02 2E 66 F0 | 	shl	_var09, #2
05b10     DF FA 05 F1 | 	add	objptr, #223
05b14     FD 2E 02 F1 | 	add	_var09, objptr
05b18     17 29 02 FB | 	rdlong	_var06, _var09
05b1c     D9 FA 05 F1 | 	add	objptr, #217
05b20     FD 30 C2 FA | 	rdbyte	_var10, objptr
05b24     18 29 02 F1 | 	add	_var06, _var10
05b28     02 1E 66 F0 | 	shl	_var01, #2
05b2c     D9 FA 85 F1 | 	sub	objptr, #217
05b30     FD 1E 02 F1 | 	add	_var01, objptr
05b34     0F 29 62 FC | 	wrlong	_var06, _var01
05b38     DF FA 85 F1 | 	sub	objptr, #223
05b3c     64 02 90 FD | 	jmp	#LR__0239
05b40                 | LR__0226
05b40                 | ' 
05b40                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
05b40     B8 FB 05 F1 | 	add	objptr, #440
05b44     FD 28 C2 FA | 	rdbyte	_var06, objptr
05b48     01 28 06 F5 | 	and	_var06, #1
05b4c     04 FA 05 F1 | 	add	objptr, #4
05b50     FD 1E 02 F1 | 	add	_var01, objptr
05b54     0F 29 42 FC | 	wrbyte	_var06, _var01
05b58     BC FB 85 F1 | 	sub	objptr, #444
05b5c     44 02 90 FD | 	jmp	#LR__0239
05b60                 | LR__0227
05b60                 | ' 
05b60                 | '         $4:                                      ' Set vibrato waveform type
05b60                 | '           vibratoType[channel]  := y & 3
05b60     B8 FB 05 F1 | 	add	objptr, #440
05b64     FD 28 C2 FA | 	rdbyte	_var06, objptr
05b68     03 28 06 F5 | 	and	_var06, #3
05b6c     0F 33 02 F6 | 	mov	_var11, _var01
05b70     08 FA 05 F1 | 	add	objptr, #8
05b74     FD 32 02 F1 | 	add	_var11, objptr
05b78     19 29 42 FC | 	wrbyte	_var06, _var11
05b7c                 | '           resetVibrato[channel] := y & 4
05b7c     08 FA 85 F1 | 	sub	objptr, #8
05b80     FD 28 C2 FA | 	rdbyte	_var06, objptr
05b84     04 28 06 F5 | 	and	_var06, #4
05b88     25 FA 85 F1 | 	sub	objptr, #37
05b8c     FD 1E 02 F1 | 	add	_var01, objptr
05b90     0F 29 42 FC | 	wrbyte	_var06, _var01
05b94     93 FB 85 F1 | 	sub	objptr, #403
05b98     08 02 90 FD | 	jmp	#LR__0239
05b9c                 | LR__0228
05b9c                 | ' 
05b9c                 | '         $5: fineTune := y                        ' Set finetune
05b9c     B8 FB 05 F1 | 	add	objptr, #440
05ba0     FD 28 C2 FA | 	rdbyte	_var06, objptr
05ba4     09 FA 85 F1 | 	sub	objptr, #9
05ba8     FD 28 62 FC | 	wrlong	_var06, objptr
05bac     AF FB 85 F1 | 	sub	objptr, #431
05bb0     F0 01 90 FD | 	jmp	#LR__0239
05bb4                 | LR__0229
05bb4                 | ' 
05bb4                 | '         $6:                                      ' Pattern looping
05bb4                 | '           if y == 0
05bb4     B8 FB 05 F1 | 	add	objptr, #440
05bb8     FD 28 CA FA | 	rdbyte	_var06, objptr wz
05bbc     B8 FB 85 F1 | 	sub	objptr, #440
05bc0     1C 00 90 5D |  if_ne	jmp	#LR__0230
05bc4                 | '             cmdE6_memory[channel] := patternRow
05bc4     E9 FB 05 F1 | 	add	objptr, #489
05bc8     FD 1E 02 F1 | 	add	_var01, objptr
05bcc     47 FB 85 F1 | 	sub	objptr, #327
05bd0     FD 32 C2 FA | 	rdbyte	_var11, objptr
05bd4     A2 FA 85 F1 | 	sub	objptr, #162
05bd8     0F 33 42 FC | 	wrbyte	_var11, _var01
05bdc                 | '           else
05bdc     C4 01 90 FD | 	jmp	#LR__0239
05be0                 | LR__0230
05be0                 | '             if ++cmdE6_counter[channel] <= y
05be0     0F 2F 02 F6 | 	mov	_var09, _var01
05be4     ED FB 05 F1 | 	add	objptr, #493
05be8     FD 2E 02 F1 | 	add	_var09, objptr
05bec     17 29 C2 FA | 	rdbyte	_var06, _var09
05bf0     01 28 06 F1 | 	add	_var06, #1
05bf4     0F 31 02 F6 | 	mov	_var10, _var01
05bf8     FD 30 02 F1 | 	add	_var10, objptr
05bfc     18 29 42 FC | 	wrbyte	_var06, _var10
05c00     18 35 C2 FA | 	rdbyte	_var12, _var10
05c04     35 FA 85 F1 | 	sub	objptr, #53
05c08     FD 36 C2 FA | 	rdbyte	_var13, objptr
05c0c     B8 FB 85 F1 | 	sub	objptr, #440
05c10     1B 35 5A F2 | 	cmps	_var12, _var13 wcz
05c14     24 00 90 1D |  if_a	jmp	#LR__0231
05c18                 | '               cmdE6_updatePosition[channel] := true
05c18     F1 FB 05 F1 | 	add	objptr, #497
05c1c     FD 1E 02 F1 | 	add	_var01, objptr
05c20     FF FF FF FF 
05c24     0F FF 4B FC | 	wrbyte	##-1, _var01
05c28                 | '               cmdE6_updatePositionCommon    := true
05c28     04 FA 05 F1 | 	add	objptr, #4
05c2c     FF FF FF FF 
05c30     FD FE 4B FC | 	wrbyte	##-1, objptr
05c34     F5 FB 85 F1 | 	sub	objptr, #501
05c38                 | '             else
05c38     68 01 90 FD | 	jmp	#LR__0239
05c3c                 | LR__0231
05c3c                 | '               cmdE6_counter[channel] := 0
05c3c     ED FB 05 F1 | 	add	objptr, #493
05c40     FD 1E 02 F1 | 	add	_var01, objptr
05c44     0F 01 48 FC | 	wrbyte	#0, _var01
05c48     ED FB 85 F1 | 	sub	objptr, #493
05c4c     54 01 90 FD | 	jmp	#LR__0239
05c50                 | LR__0232
05c50                 | ' 
05c50                 | '         $7:                                      ' Set tremolo waveform type
05c50                 | '           tremoloType[channel] := y & 3
05c50     B8 FB 05 F1 | 	add	objptr, #440
05c54     FD 28 C2 FA | 	rdbyte	_var06, objptr
05c58     03 28 06 F5 | 	and	_var06, #3
05c5c     0F 33 02 F6 | 	mov	_var11, _var01
05c60     0C FA 05 F1 | 	add	objptr, #12
05c64     FD 32 02 F1 | 	add	_var11, objptr
05c68     19 29 42 FC | 	wrbyte	_var06, _var11
05c6c                 | '           resetTremolo[channel] := y & 4
05c6c     0C FA 85 F1 | 	sub	objptr, #12
05c70     FD 28 C2 FA | 	rdbyte	_var06, objptr
05c74     04 28 06 F5 | 	and	_var06, #4
05c78     29 FA 85 F1 | 	sub	objptr, #41
05c7c     FD 1E 02 F1 | 	add	_var01, objptr
05c80     0F 29 42 FC | 	wrbyte	_var06, _var01
05c84     8F FB 85 F1 | 	sub	objptr, #399
05c88     18 01 90 FD | 	jmp	#LR__0239
05c8c                 | LR__0233
05c8c                 | ' 
05c8c                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
05c8c     0F 2F 02 F6 | 	mov	_var09, _var01
05c90     02 2E 66 F0 | 	shl	_var09, #2
05c94     FF FA 05 F1 | 	add	objptr, #255
05c98     FD 2E 02 F1 | 	add	_var09, objptr
05c9c     17 29 02 FB | 	rdlong	_var06, _var09
05ca0     B9 FA 05 F1 | 	add	objptr, #185
05ca4     FD 30 C2 FA | 	rdbyte	_var10, objptr
05ca8     18 29 02 F1 | 	add	_var06, _var10
05cac     02 1E 66 F0 | 	shl	_var01, #2
05cb0     B9 FA 85 F1 | 	sub	objptr, #185
05cb4     FD 1E 02 F1 | 	add	_var01, objptr
05cb8     0F 29 62 FC | 	wrlong	_var06, _var01
05cbc     FF FA 85 F1 | 	sub	objptr, #255
05cc0     E0 00 90 FD | 	jmp	#LR__0239
05cc4                 | LR__0234
05cc4                 | ' 
05cc4                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
05cc4     0F 2F 02 F6 | 	mov	_var09, _var01
05cc8     02 2E 66 F0 | 	shl	_var09, #2
05ccc     FF FA 05 F1 | 	add	objptr, #255
05cd0     FD 2E 02 F1 | 	add	_var09, objptr
05cd4     17 29 02 FB | 	rdlong	_var06, _var09
05cd8     B9 FA 05 F1 | 	add	objptr, #185
05cdc     FD 30 C2 FA | 	rdbyte	_var10, objptr
05ce0     18 29 82 F1 | 	sub	_var06, _var10
05ce4     02 1E 66 F0 | 	shl	_var01, #2
05ce8     B9 FA 85 F1 | 	sub	objptr, #185
05cec     FD 1E 02 F1 | 	add	_var01, objptr
05cf0     0F 29 62 FC | 	wrlong	_var06, _var01
05cf4     FF FA 85 F1 | 	sub	objptr, #255
05cf8     A8 00 90 FD | 	jmp	#LR__0239
05cfc                 | LR__0235
05cfc                 | ' 
05cfc                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
05cfc     B8 FB 05 F1 | 	add	objptr, #440
05d00     FD 2E C2 FA | 	rdbyte	_var09, objptr
05d04     14 FB 85 F1 | 	sub	objptr, #276
05d08     FD 30 C2 FA | 	rdbyte	_var10, objptr
05d0c     18 2F 02 FD | 	qmul	_var09, _var10
05d10     18 28 62 FD | 	getqx	_var06
05d14     01 FA 05 F1 | 	add	objptr, #1
05d18     FD 28 42 FC | 	wrbyte	_var06, objptr
05d1c     A5 FA 85 F1 | 	sub	objptr, #165
05d20     80 00 90 FD | 	jmp	#LR__0239
05d24                 | LR__0236
05d24                 | ' 
05d24                 | '     $F:                          ' Set speed
05d24                 | '       if z < 32
05d24     B9 FB 05 F1 | 	add	objptr, #441
05d28     FD 26 C2 FA | 	rdbyte	_var05, objptr
05d2c     B9 FB 85 F1 | 	sub	objptr, #441
05d30     20 26 5E F2 | 	cmps	_var05, #32 wcz
05d34     18 00 90 3D |  if_ae	jmp	#LR__0237
05d38                 | '         currentSongSpeed := z
05d38     B9 FB 05 F1 | 	add	objptr, #441
05d3c     FD 26 C2 FA | 	rdbyte	_var05, objptr
05d40     15 FB 85 F1 | 	sub	objptr, #277
05d44     FD 26 42 FC | 	wrbyte	_var05, objptr
05d48     A4 FA 85 F1 | 	sub	objptr, #164
05d4c                 | '       else
05d4c     54 00 90 FD | 	jmp	#LR__0238
05d50                 | LR__0237
05d50                 | '         ticksPerMinute := z * 24
05d50     B9 FB 05 F1 | 	add	objptr, #441
05d54     FD 2A C2 FA | 	rdbyte	_var07, objptr
05d58     15 27 02 F6 | 	mov	_var05, _var07
05d5c     01 26 66 F0 | 	shl	_var05, #1
05d60     15 27 02 F1 | 	add	_var05, _var07
05d64     03 26 66 F0 | 	shl	_var05, #3
05d68     12 FA 85 F1 | 	sub	objptr, #18
05d6c     FD 26 62 FC | 	wrlong	_var05, objptr
05d70     A7 FB 85 F1 | 	sub	objptr, #423
05d74                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
05d74     FD 98 02 FB | 	rdlong	muldiva_, objptr
05d78     A7 FB 05 F1 | 	add	objptr, #423
05d7c     FD 9A 02 FB | 	rdlong	muldivb_, objptr
05d80     A7 FB 85 F1 | 	sub	objptr, #423
05d84     C6 00 A0 FD | 	call	#divide_
05d88     4D 29 02 F6 | 	mov	_var06, muldivb_
05d8c     04 28 66 F0 | 	shl	_var06, #4
05d90     4D 29 82 F1 | 	sub	_var06, muldivb_
05d94     02 28 66 F0 | 	shl	_var06, #2
05d98     AB FB 05 F1 | 	add	objptr, #427
05d9c     FD 28 62 FC | 	wrlong	_var06, objptr
05da0     AB FB 85 F1 | 	sub	objptr, #427
05da4                 | LR__0238
05da4                 | LR__0239
05da4                 | _trackerplayer_spin2_handleZeroTickCommands_ret
05da4     2D 00 64 FD | 	ret
05da8                 | 
05da8                 | ' 
05da8                 | ' 
05da8                 | ' ' Handle all commands that executes on "non zero ticks"
05da8                 | ' '
05da8                 | ' PRI handleNonZeroTickCommands(channel)
05da8                 | _trackerplayer_spin2_handleNonZeroTickCommands
05da8     0A 5A 05 F6 | 	mov	COUNT_, #10
05dac     B0 00 A0 FD | 	call	#pushregs_
05db0     2F 6D 02 F6 | 	mov	local01, arg01
05db4                 | ' 
05db4                 | '   CASE_FAST cmd
05db4     BA FB 05 F1 | 	add	objptr, #442
05db8     FD 6E C2 FA | 	rdbyte	local02, objptr
05dbc     BA FB 85 F1 | 	sub	objptr, #442
05dc0     37 71 02 F6 | 	mov	local03, local02
05dc4     01 70 86 F1 | 	sub	local03, #1
05dc8     0E 70 26 F3 | 	fle	local03, #14
05dcc     38 73 02 F6 | 	mov	local04, local03
05dd0     30 72 62 FD | 	jmprel	local04
05dd4                 | LR__0240
05dd4     38 00 90 FD | 	jmp	#LR__0241
05dd8     A0 00 90 FD | 	jmp	#LR__0242
05ddc     D4 00 90 FD | 	jmp	#LR__0243
05de0     1C 02 90 FD | 	jmp	#LR__0253
05de4     20 01 90 FD | 	jmp	#LR__0245
05de8     48 01 90 FD | 	jmp	#LR__0246
05dec     50 01 90 FD | 	jmp	#LR__0247
05df0     0C 02 90 FD | 	jmp	#LR__0253
05df4     08 02 90 FD | 	jmp	#LR__0253
05df8     B0 01 90 FD | 	jmp	#LR__0250
05dfc     00 02 90 FD | 	jmp	#LR__0253
05e00     FC 01 90 FD | 	jmp	#LR__0253
05e04     F8 01 90 FD | 	jmp	#LR__0253
05e08     AC 01 90 FD | 	jmp	#LR__0251
05e0c     F0 01 90 FD | 	jmp	#LR__0253
05e10                 | LR__0241
05e10                 | ' 
05e10                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
05e10     36 75 02 F6 | 	mov	local05, local01
05e14     02 74 66 F0 | 	shl	local05, #2
05e18     DF FA 05 F1 | 	add	objptr, #223
05e1c     FD 74 02 F1 | 	add	local05, objptr
05e20     3A 77 02 FB | 	rdlong	local06, local05
05e24     DA FA 05 F1 | 	add	objptr, #218
05e28     FD 78 C2 FA | 	rdbyte	local07, objptr
05e2c     3C 77 82 F1 | 	sub	local06, local07
05e30     36 7B 02 F6 | 	mov	local08, local01
05e34     02 7A 66 F0 | 	shl	local08, #2
05e38     DA FA 85 F1 | 	sub	objptr, #218
05e3c     FD 7A 02 F1 | 	add	local08, objptr
05e40     3D 77 62 FC | 	wrlong	local06, local08
05e44                 | ' 
05e44                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05e44                 | '       if currPeriod[channel] < 0
05e44     36 77 02 F6 | 	mov	local06, local01
05e48     02 76 66 F0 | 	shl	local06, #2
05e4c     FD 76 02 F1 | 	add	local06, objptr
05e50     3B 7D 02 FB | 	rdlong	local09, local06
05e54     00 7C 5E F2 | 	cmps	local09, #0 wcz
05e58     DF FA 85 F1 | 	sub	objptr, #223
05e5c     A0 01 90 3D |  if_ae	jmp	#LR__0253
05e60                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05e60     02 6C 66 F0 | 	shl	local01, #2
05e64     DF FA 05 F1 | 	add	objptr, #223
05e68     FD 6C 02 F1 | 	add	local01, objptr
05e6c     01 00 80 FF 
05e70     36 B1 6A FC | 	wrlong	##856, local01
05e74     DF FA 85 F1 | 	sub	objptr, #223
05e78     84 01 90 FD | 	jmp	#LR__0253
05e7c                 | LR__0242
05e7c                 | ' 
05e7c                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
05e7c     36 75 02 F6 | 	mov	local05, local01
05e80     02 74 66 F0 | 	shl	local05, #2
05e84     DF FA 05 F1 | 	add	objptr, #223
05e88     FD 74 02 F1 | 	add	local05, objptr
05e8c     3A 77 02 FB | 	rdlong	local06, local05
05e90     DA FA 05 F1 | 	add	objptr, #218
05e94     FD 78 C2 FA | 	rdbyte	local07, objptr
05e98     3C 77 02 F1 | 	add	local06, local07
05e9c     02 6C 66 F0 | 	shl	local01, #2
05ea0     DA FA 85 F1 | 	sub	objptr, #218
05ea4     FD 6C 02 F1 | 	add	local01, objptr
05ea8     36 77 62 FC | 	wrlong	local06, local01
05eac     DF FA 85 F1 | 	sub	objptr, #223
05eb0     4C 01 90 FD | 	jmp	#LR__0253
05eb4                 | LR__0243
05eb4                 | ' 
05eb4                 | '     $3:                                 ' Slide to note (portamento)
05eb4                 | '       if z > 0
05eb4     B9 FB 05 F1 | 	add	objptr, #441
05eb8     FD 76 C2 FA | 	rdbyte	local06, objptr
05ebc     B9 FB 85 F1 | 	sub	objptr, #441
05ec0     00 76 5E F2 | 	cmps	local06, #0 wcz
05ec4     1C 00 90 ED |  if_be	jmp	#LR__0244
05ec8                 | '         cmd3_memoryZ[channel] := z
05ec8     36 77 02 F6 | 	mov	local06, local01
05ecc     C8 FB 05 F1 | 	add	objptr, #456
05ed0     FD 76 02 F1 | 	add	local06, objptr
05ed4     0F FA 85 F1 | 	sub	objptr, #15
05ed8     FD 7C C2 FA | 	rdbyte	local09, objptr
05edc     B9 FB 85 F1 | 	sub	objptr, #441
05ee0     3B 7D 42 FC | 	wrbyte	local09, local06
05ee4                 | LR__0244
05ee4                 | ' 
05ee4                 | '       doPortamento(channel, lastSetPeriod[channel])
05ee4     36 7D 02 F6 | 	mov	local09, local01
05ee8     02 7C 66 F0 | 	shl	local09, #2
05eec     27 FB 05 F1 | 	add	objptr, #295
05ef0     FD 7C 02 F1 | 	add	local09, objptr
05ef4     3E 61 02 FB | 	rdlong	arg02, local09
05ef8     36 5F 02 F6 | 	mov	arg01, local01
05efc     27 FB 85 F1 | 	sub	objptr, #295
05f00     5C 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05f04     F8 00 90 FD | 	jmp	#LR__0253
05f08                 | LR__0245
05f08                 | ' 
05f08                 | '     $5:                                 ' Volume slide + portamento
05f08                 | '       doVolumeSlide(channel)
05f08     36 5F 02 F6 | 	mov	arg01, local01
05f0c     7C 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05f10                 | '       doPortamento(channel, lastSetPeriod[channel])
05f10     36 7D 02 F6 | 	mov	local09, local01
05f14     02 7C 66 F0 | 	shl	local09, #2
05f18     27 FB 05 F1 | 	add	objptr, #295
05f1c     FD 7C 02 F1 | 	add	local09, objptr
05f20     3E 61 02 FB | 	rdlong	arg02, local09
05f24     36 5F 02 F6 | 	mov	arg01, local01
05f28     27 FB 85 F1 | 	sub	objptr, #295
05f2c     30 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05f30     CC 00 90 FD | 	jmp	#LR__0253
05f34                 | LR__0246
05f34                 | ' 
05f34                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
05f34     36 5F 02 F6 | 	mov	arg01, local01
05f38     50 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05f3c     C0 00 90 FD | 	jmp	#LR__0253
05f40                 | LR__0247
05f40                 | ' 
05f40                 | '     $7:                                 ' Tremolo
05f40                 | '       if x > 0
05f40     B7 FB 05 F1 | 	add	objptr, #439
05f44     FD 76 C2 FA | 	rdbyte	local06, objptr
05f48     B7 FB 85 F1 | 	sub	objptr, #439
05f4c     00 76 5E F2 | 	cmps	local06, #0 wcz
05f50     1C 00 90 ED |  if_be	jmp	#LR__0248
05f54                 | '         cmd7_memoryX[channel] := x
05f54     36 77 02 F6 | 	mov	local06, local01
05f58     D8 FB 05 F1 | 	add	objptr, #472
05f5c     FD 76 02 F1 | 	add	local06, objptr
05f60     21 FA 85 F1 | 	sub	objptr, #33
05f64     FD 7C C2 FA | 	rdbyte	local09, objptr
05f68     B7 FB 85 F1 | 	sub	objptr, #439
05f6c     3B 7D 42 FC | 	wrbyte	local09, local06
05f70                 | LR__0248
05f70                 | '       if y > 0
05f70     B8 FB 05 F1 | 	add	objptr, #440
05f74     FD 76 C2 FA | 	rdbyte	local06, objptr
05f78     B8 FB 85 F1 | 	sub	objptr, #440
05f7c     00 76 5E F2 | 	cmps	local06, #0 wcz
05f80     1C 00 90 ED |  if_be	jmp	#LR__0249
05f84                 | '         cmd7_memoryY[channel] := y
05f84     36 77 02 F6 | 	mov	local06, local01
05f88     D4 FB 05 F1 | 	add	objptr, #468
05f8c     FD 76 02 F1 | 	add	local06, objptr
05f90     1C FA 85 F1 | 	sub	objptr, #28
05f94     FD 7C C2 FA | 	rdbyte	local09, objptr
05f98     B8 FB 85 F1 | 	sub	objptr, #440
05f9c     3B 7D 42 FC | 	wrbyte	local09, local06
05fa0                 | LR__0249
05fa0                 | ' 
05fa0                 | '       doTremolo(channel)
05fa0     36 5F 02 F6 | 	mov	arg01, local01
05fa4     F0 03 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
05fa8     54 00 90 FD | 	jmp	#LR__0253
05fac                 | LR__0250
05fac                 | ' 
05fac                 | '     $A: doVolumeSlide(channel)          ' Volume slide
05fac     36 5F 02 F6 | 	mov	arg01, local01
05fb0     D8 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05fb4     48 00 90 FD | 	jmp	#LR__0253
05fb8                 | LR__0251
05fb8                 | ' 
05fb8                 | '     $E:                                 ' Retrig every Y ticks
05fb8                 | '       if (x == $9) && ((tickcounter // y) == 0)
05fb8     B7 FB 05 F1 | 	add	objptr, #439
05fbc     FD 74 C2 FA | 	rdbyte	local05, objptr
05fc0     B7 FB 85 F1 | 	sub	objptr, #439
05fc4     09 74 0E F2 | 	cmp	local05, #9 wz
05fc8     34 00 90 5D |  if_ne	jmp	#LR__0252
05fcc     A1 FA 05 F1 | 	add	objptr, #161
05fd0     FD 78 C2 FA | 	rdbyte	local07, objptr
05fd4     3C 99 02 F6 | 	mov	muldiva_, local07
05fd8     17 FB 05 F1 | 	add	objptr, #279
05fdc     FD 7E C2 FA | 	rdbyte	local10, objptr
05fe0     B8 FB 85 F1 | 	sub	objptr, #440
05fe4     3F 9B 02 F6 | 	mov	muldivb_, local10
05fe8     C6 00 A0 FD | 	call	#divide_
05fec     4C 7D 0A F6 | 	mov	local09, muldiva_ wz
05ff0     0C 00 90 5D |  if_ne	jmp	#LR__0252
05ff4                 | '         triggerNote(channel)
05ff4     36 77 02 F6 | 	mov	local06, local01
05ff8     3B 5F 02 F6 | 	mov	arg01, local06
05ffc     08 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
06000                 | LR__0252
06000                 | LR__0253
06000     AF F0 03 F6 | 	mov	ptra, fp
06004     BA 00 A0 FD | 	call	#popregs_
06008                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
06008     2D 00 64 FD | 	ret
0600c                 | 
0600c                 | ' 
0600c                 | ' 
0600c                 | ' ' Handle all commands that executes on every tick
0600c                 | ' '
0600c                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
0600c                 | _trackerplayer_spin2_handleEveryTickCommands
0600c     0F 5A 05 F6 | 	mov	COUNT_, #15
06010     B0 00 A0 FD | 	call	#pushregs_
06014     2F 6D 02 F6 | 	mov	local01, arg01
06018                 | ' 
06018                 | '   CASE_FAST cmd
06018     BA FB 05 F1 | 	add	objptr, #442
0601c     FD 6E C2 FA | 	rdbyte	local02, objptr
06020     BA FB 85 F1 | 	sub	objptr, #442
06024     37 71 02 F6 | 	mov	local03, local02
06028     0F 70 26 F3 | 	fle	local03, #15
0602c     38 73 02 F6 | 	mov	local04, local03
06030     30 72 62 FD | 	jmprel	local04
06034                 | LR__0254
06034     3C 00 90 FD | 	jmp	#LR__0255
06038     50 03 90 FD | 	jmp	#LR__0269
0603c     4C 03 90 FD | 	jmp	#LR__0269
06040     48 03 90 FD | 	jmp	#LR__0269
06044     D0 01 90 FD | 	jmp	#LR__0258
06048     40 03 90 FD | 	jmp	#LR__0269
0604c     34 02 90 FD | 	jmp	#LR__0261
06050     38 03 90 FD | 	jmp	#LR__0269
06054     34 03 90 FD | 	jmp	#LR__0269
06058     30 03 90 FD | 	jmp	#LR__0269
0605c     2C 03 90 FD | 	jmp	#LR__0269
06060     28 03 90 FD | 	jmp	#LR__0269
06064     24 03 90 FD | 	jmp	#LR__0269
06068     20 03 90 FD | 	jmp	#LR__0269
0606c     20 02 90 FD | 	jmp	#LR__0262
06070     18 03 90 FD | 	jmp	#LR__0269
06074                 | LR__0255
06074                 | ' 
06074                 | '     $0:                                 ' Arpeggio
06074                 | '       arpCounter := tickCounter // 3
06074     A1 FA 05 F1 | 	add	objptr, #161
06078     FD 98 C2 FA | 	rdbyte	muldiva_, objptr
0607c     A1 FA 85 F1 | 	sub	objptr, #161
06080     03 9A 06 F6 | 	mov	muldivb_, #3
06084     C6 00 A0 FD | 	call	#divide_
06088     4C 75 02 F6 | 	mov	local05, muldiva_
0608c                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
0608c     36 77 02 F6 | 	mov	local06, local01
06090     02 76 66 F0 | 	shl	local06, #2
06094     DF FA 05 F1 | 	add	objptr, #223
06098     FD 76 02 F1 | 	add	local06, objptr
0609c     3B 5F 02 FB | 	rdlong	arg01, local06
060a0     36 79 02 F6 | 	mov	local07, local01
060a4     0C FA 85 F1 | 	sub	objptr, #12
060a8     FD 78 02 F1 | 	add	local07, objptr
060ac     3C 61 C2 FA | 	rdbyte	arg02, local07
060b0     D3 FA 85 F1 | 	sub	objptr, #211
060b4     C8 EF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
060b8     0C 7B 02 F6 | 	mov	local08, result1
060bc     3D 7D 02 F6 | 	mov	local09, local08
060c0     24 7A 5E F2 | 	cmps	local08, #36 wcz
060c4     C4 02 90 3D |  if_ae	jmp	#LR__0269
060c8                 | '         if arpCounter == 1 and x > 0
060c8     01 74 0E F2 | 	cmp	local05, #1 wz
060cc     80 00 90 5D |  if_ne	jmp	#LR__0256
060d0     B7 FB 05 F1 | 	add	objptr, #439
060d4     FD 7E C2 FA | 	rdbyte	local10, objptr
060d8     B7 FB 85 F1 | 	sub	objptr, #439
060dc     00 7E 5E F2 | 	cmps	local10, #0 wcz
060e0     6C 00 90 ED |  if_be	jmp	#LR__0256
060e4                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
060e4     3E 5F 02 F6 | 	mov	arg01, local09
060e8     B7 FB 05 F1 | 	add	objptr, #439
060ec     FD 80 C2 FA | 	rdbyte	local11, objptr
060f0     40 5F 02 F1 | 	add	arg01, local11
060f4                 | ' 
060f4                 | '   return word[@periodTable][noteNumber]
060f4     06 00 00 FF 
060f8     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
060fc     01 5E 66 F0 | 	shl	arg01, #1
06100     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
06104     2F 19 E2 FA | 	rdword	result1, arg01
06108     06 00 00 FF 
0610c     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
06110     0C 77 02 F6 | 	mov	local06, result1
06114     36 79 02 F6 | 	mov	local07, local01
06118     02 78 66 F0 | 	shl	local07, #2
0611c     D8 FA 85 F1 | 	sub	objptr, #216
06120     FD 80 02 F6 | 	mov	local11, objptr
06124     FD 78 02 F1 | 	add	local07, objptr
06128     3B 7F 02 F6 | 	mov	local10, local06
0612c     3C 83 02 FB | 	rdlong	local12, local07
06130     41 7F 82 F1 | 	sub	local10, local12
06134     36 85 02 F6 | 	mov	local13, local01
06138     02 84 66 F0 | 	shl	local13, #2
0613c     10 FA 05 F1 | 	add	objptr, #16
06140     FD 86 02 F6 | 	mov	local14, objptr
06144     FD 84 02 F1 | 	add	local13, objptr
06148     42 7F 62 FC | 	wrlong	local10, local13
0614c     EF FA 85 F1 | 	sub	objptr, #239
06150                 | LR__0256
06150                 | '         if arpCounter == 2 and y > 0
06150     02 74 0E F2 | 	cmp	local05, #2 wz
06154     80 00 90 5D |  if_ne	jmp	#LR__0257
06158     B8 FB 05 F1 | 	add	objptr, #440
0615c     FD 7E C2 FA | 	rdbyte	local10, objptr
06160     B8 FB 85 F1 | 	sub	objptr, #440
06164     00 7E 5E F2 | 	cmps	local10, #0 wcz
06168     6C 00 90 ED |  if_be	jmp	#LR__0257
0616c                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
0616c     3E 5F 02 F6 | 	mov	arg01, local09
06170     B8 FB 05 F1 | 	add	objptr, #440
06174     FD 80 C2 FA | 	rdbyte	local11, objptr
06178     40 5F 02 F1 | 	add	arg01, local11
0617c                 | ' 
0617c                 | '   return word[@periodTable][noteNumber]
0617c     06 00 00 FF 
06180     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
06184     01 5E 66 F0 | 	shl	arg01, #1
06188     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
0618c     2F 19 E2 FA | 	rdword	result1, arg01
06190     06 00 00 FF 
06194     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
06198     0C 77 02 F6 | 	mov	local06, result1
0619c     36 79 02 F6 | 	mov	local07, local01
061a0     02 78 66 F0 | 	shl	local07, #2
061a4     D9 FA 85 F1 | 	sub	objptr, #217
061a8     FD 80 02 F6 | 	mov	local11, objptr
061ac     FD 78 02 F1 | 	add	local07, objptr
061b0     3B 7F 02 F6 | 	mov	local10, local06
061b4     3C 83 02 FB | 	rdlong	local12, local07
061b8     41 7F 82 F1 | 	sub	local10, local12
061bc     36 85 02 F6 | 	mov	local13, local01
061c0     02 84 66 F0 | 	shl	local13, #2
061c4     10 FA 05 F1 | 	add	objptr, #16
061c8     FD 86 02 F6 | 	mov	local14, objptr
061cc     FD 84 02 F1 | 	add	local13, objptr
061d0     42 7F 62 FC | 	wrlong	local10, local13
061d4     EF FA 85 F1 | 	sub	objptr, #239
061d8                 | LR__0257
061d8                 | '         if arpCounter == 0 and (x + y) > 0
061d8     00 74 0E F2 | 	cmp	local05, #0 wz
061dc     AC 01 90 5D |  if_ne	jmp	#LR__0269
061e0     B7 FB 05 F1 | 	add	objptr, #439
061e4     FD 7E C2 FA | 	rdbyte	local10, objptr
061e8     01 FA 05 F1 | 	add	objptr, #1
061ec     FD 80 C2 FA | 	rdbyte	local11, objptr
061f0     B8 FB 85 F1 | 	sub	objptr, #440
061f4     40 7F 02 F1 | 	add	local10, local11
061f8     00 7E 5E F2 | 	cmps	local10, #0 wcz
061fc     8C 01 90 ED |  if_be	jmp	#LR__0269
06200                 | '           deltaPeriod[channel] := 0
06200     02 6C 66 F0 | 	shl	local01, #2
06204     EF FA 05 F1 | 	add	objptr, #239
06208     FD 6C 02 F1 | 	add	local01, objptr
0620c     36 01 68 FC | 	wrlong	#0, local01
06210     EF FA 85 F1 | 	sub	objptr, #239
06214     74 01 90 FD | 	jmp	#LR__0269
06218                 | LR__0258
06218                 | ' 
06218                 | '     $4:                                 ' Vibrato
06218                 | '       if x > 0
06218     B7 FB 05 F1 | 	add	objptr, #439
0621c     FD 7E C2 FA | 	rdbyte	local10, objptr
06220     B7 FB 85 F1 | 	sub	objptr, #439
06224     00 7E 5E F2 | 	cmps	local10, #0 wcz
06228     1C 00 90 ED |  if_be	jmp	#LR__0259
0622c                 | '         cmd4_memoryX[channel] := x
0622c     36 7F 02 F6 | 	mov	local10, local01
06230     D0 FB 05 F1 | 	add	objptr, #464
06234     FD 7E 02 F1 | 	add	local10, objptr
06238     19 FA 85 F1 | 	sub	objptr, #25
0623c     FD 78 C2 FA | 	rdbyte	local07, objptr
06240     B7 FB 85 F1 | 	sub	objptr, #439
06244     3F 79 42 FC | 	wrbyte	local07, local10
06248                 | LR__0259
06248                 | '       if y > 0
06248     B8 FB 05 F1 | 	add	objptr, #440
0624c     FD 7E C2 FA | 	rdbyte	local10, objptr
06250     B8 FB 85 F1 | 	sub	objptr, #440
06254     00 7E 5E F2 | 	cmps	local10, #0 wcz
06258     1C 00 90 ED |  if_be	jmp	#LR__0260
0625c                 | '         cmd4_memoryY[channel] := y
0625c     36 7F 02 F6 | 	mov	local10, local01
06260     CC FB 05 F1 | 	add	objptr, #460
06264     FD 7E 02 F1 | 	add	local10, objptr
06268     14 FA 85 F1 | 	sub	objptr, #20
0626c     FD 78 C2 FA | 	rdbyte	local07, objptr
06270     B8 FB 85 F1 | 	sub	objptr, #440
06274     3F 79 42 FC | 	wrbyte	local07, local10
06278                 | LR__0260
06278                 | ' 
06278                 | '       doVibrato(channel)
06278     36 5F 02 F6 | 	mov	arg01, local01
0627c     7C 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
06280     08 01 90 FD | 	jmp	#LR__0269
06284                 | LR__0261
06284                 | ' 
06284                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
06284     36 5F 02 F6 | 	mov	arg01, local01
06288     70 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
0628c     FC 00 90 FD | 	jmp	#LR__0269
06290                 | LR__0262
06290                 | ' 
06290                 | '     $E:
06290                 | '       if x == $C                        ' Cut note after Y ticks
06290     B7 FB 05 F1 | 	add	objptr, #439
06294     FD 7E C2 FA | 	rdbyte	local10, objptr
06298     B7 FB 85 F1 | 	sub	objptr, #439
0629c     0C 7E 0E F2 | 	cmp	local10, #12 wz
062a0     34 00 90 5D |  if_ne	jmp	#LR__0263
062a4                 | '         if tickcounter == y
062a4     A1 FA 05 F1 | 	add	objptr, #161
062a8     FD 7E C2 FA | 	rdbyte	local10, objptr
062ac     17 FB 05 F1 | 	add	objptr, #279
062b0     FD 78 C2 FA | 	rdbyte	local07, objptr
062b4     B8 FB 85 F1 | 	sub	objptr, #440
062b8     3C 7F 0A F2 | 	cmp	local10, local07 wz
062bc     CC 00 90 5D |  if_ne	jmp	#LR__0268
062c0                 | '           currVolume[channel] := 0
062c0     02 6C 66 F0 | 	shl	local01, #2
062c4     FF FA 05 F1 | 	add	objptr, #255
062c8     FD 6C 02 F1 | 	add	local01, objptr
062cc     36 01 68 FC | 	wrlong	#0, local01
062d0     FF FA 85 F1 | 	sub	objptr, #255
062d4     B4 00 90 FD | 	jmp	#LR__0268
062d8                 | LR__0263
062d8                 | ' 
062d8                 | '       elseif x == $D                    ' Delay note Y ticks
062d8     B7 FB 05 F1 | 	add	objptr, #439
062dc     FD 7E C2 FA | 	rdbyte	local10, objptr
062e0     B7 FB 85 F1 | 	sub	objptr, #439
062e4     0D 7E 0E F2 | 	cmp	local10, #13 wz
062e8     A0 00 90 5D |  if_ne	jmp	#LR__0267
062ec                 | '         if tickcounter == y
062ec     A1 FA 05 F1 | 	add	objptr, #161
062f0     FD 7E C2 FA | 	rdbyte	local10, objptr
062f4     17 FB 05 F1 | 	add	objptr, #279
062f8     FD 78 C2 FA | 	rdbyte	local07, objptr
062fc     B8 FB 85 F1 | 	sub	objptr, #440
06300     3C 7F 0A F2 | 	cmp	local10, local07 wz
06304     0C 00 90 5D |  if_ne	jmp	#LR__0264
06308                 | '           triggerNote(channel)
06308     36 5F 02 F6 | 	mov	arg01, local01
0630c     F8 EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
06310     78 00 90 FD | 	jmp	#LR__0266
06314                 | LR__0264
06314                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
06314                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
06314     B8 FB 05 F1 | 	add	objptr, #440
06318     FD 7E C2 FA | 	rdbyte	local10, objptr
0631c     14 FB 85 F1 | 	sub	objptr, #276
06320     FD 78 C2 FA | 	rdbyte	local07, objptr
06324     A4 FA 85 F1 | 	sub	objptr, #164
06328     3C 7F 5A F2 | 	cmps	local10, local07 wcz
0632c     5C 00 90 CD |  if_b	jmp	#LR__0265
06330     A4 FA 05 F1 | 	add	objptr, #164
06334     FD 84 C2 FA | 	rdbyte	local13, objptr
06338     42 83 02 F6 | 	mov	local12, local13
0633c     01 82 86 F1 | 	sub	local12, #1
06340     03 FA 85 F1 | 	sub	objptr, #3
06344     FD 88 C2 FA | 	rdbyte	local15, objptr
06348     A1 FA 85 F1 | 	sub	objptr, #161
0634c     44 87 02 F6 | 	mov	local14, local15
06350     41 87 0A F2 | 	cmp	local14, local12 wz
06354     34 00 90 5D |  if_ne	jmp	#LR__0265
06358                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
06358     36 7F 02 F6 | 	mov	local10, local01
0635c     02 7E 66 F0 | 	shl	local10, #2
06360     27 FB 05 F1 | 	add	objptr, #295
06364     FD 76 02 F6 | 	mov	local06, objptr
06368     FD 7E 02 F1 | 	add	local10, objptr
0636c     36 79 02 F6 | 	mov	local07, local01
06370     02 78 66 F0 | 	shl	local07, #2
06374     48 FA 85 F1 | 	sub	objptr, #72
06378     FD 80 02 F6 | 	mov	local11, objptr
0637c     3F 83 02 FB | 	rdlong	local12, local10
06380     40 79 02 F1 | 	add	local07, local11
06384     3C 83 62 FC | 	wrlong	local12, local07
06388     DF FA 85 F1 | 	sub	objptr, #223
0638c                 | LR__0265
0638c                 | LR__0266
0638c                 | LR__0267
0638c                 | LR__0268
0638c                 | LR__0269
0638c     AF F0 03 F6 | 	mov	ptra, fp
06390     BA 00 A0 FD | 	call	#popregs_
06394                 | _trackerplayer_spin2_handleEveryTickCommands_ret
06394     2D 00 64 FD | 	ret
06398                 | 
06398                 | ' 
06398                 | ' 
06398                 | ' PRI doTremolo(channel) | depth, sineWave, speed
06398                 | _trackerplayer_spin2_doTremolo
06398     2F 1F 02 F6 | 	mov	_var01, arg01
0639c                 | ' 
0639c                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
0639c     05 00 00 FF 
063a0     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
063a4     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
063a8     0F 23 02 F6 | 	mov	_var03, _var01
063ac     8B FB 05 F1 | 	add	objptr, #395
063b0     FD 22 02 F1 | 	add	_var03, objptr
063b4     11 25 C2 FA | 	rdbyte	_var04, _var03
063b8     02 24 66 F0 | 	shl	_var04, #2
063bc     10 25 02 F1 | 	add	_var04, _var02
063c0     12 27 02 FB | 	rdlong	_var05, _var04
063c4                 | '   depth    := cmd7_memoryY[channel]
063c4     0F 29 02 F6 | 	mov	_var06, _var01
063c8     49 FA 05 F1 | 	add	objptr, #73
063cc     FD 28 02 F1 | 	add	_var06, objptr
063d0     14 2B C2 FA | 	rdbyte	_var07, _var06
063d4                 | '   speed    := cmd7_memoryX[channel]
063d4     0F 29 02 F6 | 	mov	_var06, _var01
063d8     04 FA 05 F1 | 	add	objptr, #4
063dc     FD 28 02 F1 | 	add	_var06, objptr
063e0     14 2D C2 FA | 	rdbyte	_var08, _var06
063e4                 | ' 
063e4                 | '   CASE_FAST vibratoType[channel]
063e4     0F 23 02 F6 | 	mov	_var03, _var01
063e8     18 FA 85 F1 | 	sub	objptr, #24
063ec     FD 2E 02 F6 | 	mov	_var09, objptr
063f0     FD 22 02 F1 | 	add	_var03, objptr
063f4     11 29 C2 FA | 	rdbyte	_var06, _var03
063f8     03 28 26 F3 | 	fle	_var06, #3
063fc     14 31 02 F6 | 	mov	_var10, _var06
06400     05 00 00 FF 
06404     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
06408     C0 FB 85 F1 | 	sub	objptr, #448
0640c     30 30 62 FD | 	jmprel	_var10
06410                 | LR__0270
06410     0C 00 90 FD | 	jmp	#LR__0271
06414     30 00 90 FD | 	jmp	#LR__0272
06418     6C 00 90 FD | 	jmp	#LR__0273
0641c     B4 00 90 FD | 	jmp	#LR__0274
06420                 | LR__0271
06420                 | ' 
06420                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
06420     13 2B 02 FD | 	qmul	_var07, _var05
06424     18 24 62 FD | 	getqx	_var04
06428     06 24 C6 F0 | 	sar	_var04, #6
0642c     0F 33 02 F6 | 	mov	_var11, _var01
06430     02 32 66 F0 | 	shl	_var11, #2
06434     0F FB 05 F1 | 	add	objptr, #271
06438     FD 32 02 F1 | 	add	_var11, objptr
0643c     19 25 62 FC | 	wrlong	_var04, _var11
06440     0F FB 85 F1 | 	sub	objptr, #271
06444     8C 00 90 FD | 	jmp	#LR__0274
06448                 | LR__0272
06448                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
06448     0F 33 02 F6 | 	mov	_var11, _var01
0644c     8B FB 05 F1 | 	add	objptr, #395
06450     FD 32 02 F1 | 	add	_var11, objptr
06454     19 21 C2 FA | 	rdbyte	_var02, _var11
06458     03 20 66 F0 | 	shl	_var02, #3
0645c     10 2B 02 FD | 	qmul	_var07, _var02
06460     18 24 62 FD | 	getqx	_var04
06464     00 25 86 F1 | 	sub	_var04, #256
06468     06 24 C6 F0 | 	sar	_var04, #6
0646c     0F 35 02 F6 | 	mov	_var12, _var01
06470     02 34 66 F0 | 	shl	_var12, #2
06474     7C FA 85 F1 | 	sub	objptr, #124
06478     FD 34 02 F1 | 	add	_var12, objptr
0647c     1A 25 62 FC | 	wrlong	_var04, _var12
06480     0F FB 85 F1 | 	sub	objptr, #271
06484     4C 00 90 FD | 	jmp	#LR__0274
06488                 | LR__0273
06488                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
06488     0F 33 02 F6 | 	mov	_var11, _var01
0648c     8B FB 05 F1 | 	add	objptr, #395
06490     FD 36 02 F6 | 	mov	_var13, objptr
06494     FD 32 02 F1 | 	add	_var11, objptr
06498     19 21 C2 FA | 	rdbyte	_var02, _var11
0649c     20 20 06 F5 | 	and	_var02, #32
064a0     04 20 66 F0 | 	shl	_var02, #4
064a4     10 2B 02 FD | 	qmul	_var07, _var02
064a8     18 38 62 FD | 	getqx	_var14
064ac     1C 25 02 F6 | 	mov	_var04, _var14
064b0     00 25 86 F1 | 	sub	_var04, #256
064b4     06 24 C6 F0 | 	sar	_var04, #6
064b8     0F 35 02 F6 | 	mov	_var12, _var01
064bc     02 34 66 F0 | 	shl	_var12, #2
064c0     7C FA 85 F1 | 	sub	objptr, #124
064c4     FD 3A 02 F6 | 	mov	_var15, objptr
064c8     FD 34 02 F1 | 	add	_var12, objptr
064cc     1A 25 62 FC | 	wrlong	_var04, _var12
064d0     0F FB 85 F1 | 	sub	objptr, #271
064d4                 | LR__0274
064d4                 | ' 
064d4                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
064d4     0F 23 02 F6 | 	mov	_var03, _var01
064d8     8B FB 05 F1 | 	add	objptr, #395
064dc     FD 22 02 F1 | 	add	_var03, objptr
064e0     11 29 C2 FA | 	rdbyte	_var06, _var03
064e4     16 29 02 F1 | 	add	_var06, _var08
064e8     3F 28 06 F5 | 	and	_var06, #63
064ec     FD 1E 02 F1 | 	add	_var01, objptr
064f0     0F 29 42 FC | 	wrbyte	_var06, _var01
064f4     8B FB 85 F1 | 	sub	objptr, #395
064f8                 | _trackerplayer_spin2_doTremolo_ret
064f8     2D 00 64 FD | 	ret
064fc                 | 
064fc                 | ' 
064fc                 | ' 
064fc                 | ' PRI doVibrato(channel) | depth, sineWave, speed
064fc                 | _trackerplayer_spin2_doVibrato
064fc     2F 1F 02 F6 | 	mov	_var01, arg01
06500                 | ' 
06500                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
06500     05 00 00 FF 
06504     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
06508     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
0650c     0F 23 02 F6 | 	mov	_var03, _var01
06510     87 FB 05 F1 | 	add	objptr, #391
06514     FD 22 02 F1 | 	add	_var03, objptr
06518     11 25 C2 FA | 	rdbyte	_var04, _var03
0651c     02 24 66 F0 | 	shl	_var04, #2
06520     10 25 02 F1 | 	add	_var04, _var02
06524     12 27 02 FB | 	rdlong	_var05, _var04
06528                 | '   depth    := cmd4_memoryY[channel]
06528     0F 29 02 F6 | 	mov	_var06, _var01
0652c     45 FA 05 F1 | 	add	objptr, #69
06530     FD 28 02 F1 | 	add	_var06, objptr
06534     14 2B C2 FA | 	rdbyte	_var07, _var06
06538                 | '   speed    := cmd4_memoryX[channel]
06538     0F 29 02 F6 | 	mov	_var06, _var01
0653c     04 FA 05 F1 | 	add	objptr, #4
06540     FD 28 02 F1 | 	add	_var06, objptr
06544     14 2D C2 FA | 	rdbyte	_var08, _var06
06548                 | ' 
06548                 | '   CASE_FAST vibratoType[channel]
06548     0F 23 02 F6 | 	mov	_var03, _var01
0654c     10 FA 85 F1 | 	sub	objptr, #16
06550     FD 2E 02 F6 | 	mov	_var09, objptr
06554     FD 22 02 F1 | 	add	_var03, objptr
06558     11 29 C2 FA | 	rdbyte	_var06, _var03
0655c     03 28 26 F3 | 	fle	_var06, #3
06560     14 31 02 F6 | 	mov	_var10, _var06
06564     05 00 00 FF 
06568     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
0656c     C0 FB 85 F1 | 	sub	objptr, #448
06570     30 30 62 FD | 	jmprel	_var10
06574                 | LR__0275
06574     0C 00 90 FD | 	jmp	#LR__0276
06578     30 00 90 FD | 	jmp	#LR__0277
0657c     6C 00 90 FD | 	jmp	#LR__0278
06580     B4 00 90 FD | 	jmp	#LR__0279
06584                 | LR__0276
06584                 | ' 
06584                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
06584     13 2B 02 FD | 	qmul	_var07, _var05
06588     18 24 62 FD | 	getqx	_var04
0658c     07 24 C6 F0 | 	sar	_var04, #7
06590     0F 33 02 F6 | 	mov	_var11, _var01
06594     02 32 66 F0 | 	shl	_var11, #2
06598     EF FA 05 F1 | 	add	objptr, #239
0659c     FD 32 02 F1 | 	add	_var11, objptr
065a0     19 25 62 FC | 	wrlong	_var04, _var11
065a4     EF FA 85 F1 | 	sub	objptr, #239
065a8     8C 00 90 FD | 	jmp	#LR__0279
065ac                 | LR__0277
065ac                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
065ac     0F 33 02 F6 | 	mov	_var11, _var01
065b0     87 FB 05 F1 | 	add	objptr, #391
065b4     FD 32 02 F1 | 	add	_var11, objptr
065b8     19 21 C2 FA | 	rdbyte	_var02, _var11
065bc     03 20 66 F0 | 	shl	_var02, #3
065c0     10 2B 02 FD | 	qmul	_var07, _var02
065c4     18 24 62 FD | 	getqx	_var04
065c8     00 25 86 F1 | 	sub	_var04, #256
065cc     07 24 C6 F0 | 	sar	_var04, #7
065d0     0F 35 02 F6 | 	mov	_var12, _var01
065d4     02 34 66 F0 | 	shl	_var12, #2
065d8     98 FA 85 F1 | 	sub	objptr, #152
065dc     FD 34 02 F1 | 	add	_var12, objptr
065e0     1A 25 62 FC | 	wrlong	_var04, _var12
065e4     EF FA 85 F1 | 	sub	objptr, #239
065e8     4C 00 90 FD | 	jmp	#LR__0279
065ec                 | LR__0278
065ec                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
065ec     0F 33 02 F6 | 	mov	_var11, _var01
065f0     87 FB 05 F1 | 	add	objptr, #391
065f4     FD 36 02 F6 | 	mov	_var13, objptr
065f8     FD 32 02 F1 | 	add	_var11, objptr
065fc     19 21 C2 FA | 	rdbyte	_var02, _var11
06600     20 20 06 F5 | 	and	_var02, #32
06604     04 20 66 F0 | 	shl	_var02, #4
06608     10 2B 02 FD | 	qmul	_var07, _var02
0660c     18 38 62 FD | 	getqx	_var14
06610     1C 25 02 F6 | 	mov	_var04, _var14
06614     00 25 86 F1 | 	sub	_var04, #256
06618     07 24 C6 F0 | 	sar	_var04, #7
0661c     0F 35 02 F6 | 	mov	_var12, _var01
06620     02 34 66 F0 | 	shl	_var12, #2
06624     98 FA 85 F1 | 	sub	objptr, #152
06628     FD 3A 02 F6 | 	mov	_var15, objptr
0662c     FD 34 02 F1 | 	add	_var12, objptr
06630     1A 25 62 FC | 	wrlong	_var04, _var12
06634     EF FA 85 F1 | 	sub	objptr, #239
06638                 | LR__0279
06638                 | ' 
06638                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
06638     0F 23 02 F6 | 	mov	_var03, _var01
0663c     87 FB 05 F1 | 	add	objptr, #391
06640     FD 22 02 F1 | 	add	_var03, objptr
06644     11 29 C2 FA | 	rdbyte	_var06, _var03
06648     16 29 02 F1 | 	add	_var06, _var08
0664c     3F 28 06 F5 | 	and	_var06, #63
06650     FD 1E 02 F1 | 	add	_var01, objptr
06654     0F 29 42 FC | 	wrbyte	_var06, _var01
06658     87 FB 85 F1 | 	sub	objptr, #391
0665c                 | _trackerplayer_spin2_doVibrato_ret
0665c     2D 00 64 FD | 	ret
06660                 | 
06660                 | ' 
06660                 | ' 
06660                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
06660                 | _trackerplayer_spin2_doPortamento
06660                 | ' 
06660                 | '   if period == currPeriod[channel]
06660     2F 1F 02 F6 | 	mov	_var01, arg01
06664     02 1E 66 F0 | 	shl	_var01, #2
06668     DF FA 05 F1 | 	add	objptr, #223
0666c     FD 20 02 F6 | 	mov	_var02, objptr
06670     FD 1E 02 F1 | 	add	_var01, objptr
06674     0F 23 02 FB | 	rdlong	_var03, _var01
06678     11 61 0A F2 | 	cmp	arg02, _var03 wz
0667c                 | '     return
0667c     DF FA 85 F1 | 	sub	objptr, #223
06680     04 02 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
06684                 | ' 
06684                 | '   if period > 0
06684     00 60 5E F2 | 	cmps	arg02, #0 wcz
06688     1C 00 90 ED |  if_be	jmp	#LR__0280
0668c                 | '     portamentoPeriodMemory[channel] := period
0668c     2F 1F 02 F6 | 	mov	_var01, arg01
06690     02 1E 66 F0 | 	shl	_var01, #2
06694     97 FB 05 F1 | 	add	objptr, #407
06698     FD 1E 02 F1 | 	add	_var01, objptr
0669c     0F 61 62 FC | 	wrlong	arg02, _var01
066a0                 | '   else
066a0     97 FB 85 F1 | 	sub	objptr, #407
066a4     18 00 90 FD | 	jmp	#LR__0281
066a8                 | LR__0280
066a8                 | '     period := portamentoPeriodMemory[channel]
066a8     2F 1F 02 F6 | 	mov	_var01, arg01
066ac     02 1E 66 F0 | 	shl	_var01, #2
066b0     97 FB 05 F1 | 	add	objptr, #407
066b4     FD 1E 02 F1 | 	add	_var01, objptr
066b8     0F 61 02 FB | 	rdlong	arg02, _var01
066bc     97 FB 85 F1 | 	sub	objptr, #407
066c0                 | LR__0281
066c0                 | ' 
066c0                 | '   if period > currPeriod[channel]
066c0     2F 1F 02 F6 | 	mov	_var01, arg01
066c4     02 1E 66 F0 | 	shl	_var01, #2
066c8     DF FA 05 F1 | 	add	objptr, #223
066cc     FD 1E 02 F1 | 	add	_var01, objptr
066d0     0F 23 02 FB | 	rdlong	_var03, _var01
066d4     11 61 5A F2 | 	cmps	arg02, _var03 wcz
066d8     DF FA 85 F1 | 	sub	objptr, #223
066dc     68 00 90 ED |  if_be	jmp	#LR__0282
066e0                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
066e0     2F 21 02 F6 | 	mov	_var02, arg01
066e4     02 20 66 F0 | 	shl	_var02, #2
066e8     DF FA 05 F1 | 	add	objptr, #223
066ec     FD 20 02 F1 | 	add	_var02, objptr
066f0     2F 25 02 F6 | 	mov	_var04, arg01
066f4     E9 FA 05 F1 | 	add	objptr, #233
066f8     10 1F 02 FB | 	rdlong	_var01, _var02
066fc     FD 24 02 F1 | 	add	_var04, objptr
06700     12 27 C2 FA | 	rdbyte	_var05, _var04
06704     13 1F 02 F1 | 	add	_var01, _var05
06708     2F 29 02 F6 | 	mov	_var06, arg01
0670c     02 28 66 F0 | 	shl	_var06, #2
06710     E9 FA 85 F1 | 	sub	objptr, #233
06714     FD 28 02 F1 | 	add	_var06, objptr
06718     14 1F 62 FC | 	wrlong	_var01, _var06
0671c                 | '     currPeriod[channel] <#= period
0671c     2F 21 02 F6 | 	mov	_var02, arg01
06720     02 20 66 F0 | 	shl	_var02, #2
06724     FD 20 02 F1 | 	add	_var02, objptr
06728     10 1F 02 FB | 	rdlong	_var01, _var02
0672c     30 1F 62 F3 | 	fles	_var01, arg02
06730     2F 25 02 F6 | 	mov	_var04, arg01
06734     02 24 66 F0 | 	shl	_var04, #2
06738     FD 24 02 F1 | 	add	_var04, objptr
0673c     12 1F 62 FC | 	wrlong	_var01, _var04
06740     DF FA 85 F1 | 	sub	objptr, #223
06744     84 00 90 FD | 	jmp	#LR__0284
06748                 | LR__0282
06748                 | ' 
06748                 | '   elseif period < currPeriod[channel]
06748     2F 1F 02 F6 | 	mov	_var01, arg01
0674c     02 1E 66 F0 | 	shl	_var01, #2
06750     DF FA 05 F1 | 	add	objptr, #223
06754     FD 1E 02 F1 | 	add	_var01, objptr
06758     0F 23 02 FB | 	rdlong	_var03, _var01
0675c     11 61 5A F2 | 	cmps	arg02, _var03 wcz
06760     DF FA 85 F1 | 	sub	objptr, #223
06764     64 00 90 3D |  if_ae	jmp	#LR__0283
06768                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
06768     2F 21 02 F6 | 	mov	_var02, arg01
0676c     02 20 66 F0 | 	shl	_var02, #2
06770     DF FA 05 F1 | 	add	objptr, #223
06774     FD 20 02 F1 | 	add	_var02, objptr
06778     2F 25 02 F6 | 	mov	_var04, arg01
0677c     E9 FA 05 F1 | 	add	objptr, #233
06780     10 1F 02 FB | 	rdlong	_var01, _var02
06784     FD 24 02 F1 | 	add	_var04, objptr
06788     12 27 C2 FA | 	rdbyte	_var05, _var04
0678c     13 1F 82 F1 | 	sub	_var01, _var05
06790     2F 29 02 F6 | 	mov	_var06, arg01
06794     02 28 66 F0 | 	shl	_var06, #2
06798     E9 FA 85 F1 | 	sub	objptr, #233
0679c     FD 28 02 F1 | 	add	_var06, objptr
067a0     14 1F 62 FC | 	wrlong	_var01, _var06
067a4                 | '     currPeriod[channel] #>= period
067a4     2F 21 02 F6 | 	mov	_var02, arg01
067a8     02 20 66 F0 | 	shl	_var02, #2
067ac     FD 20 02 F1 | 	add	_var02, objptr
067b0     10 1F 02 FB | 	rdlong	_var01, _var02
067b4     30 1F 42 F3 | 	fges	_var01, arg02
067b8     2F 25 02 F6 | 	mov	_var04, arg01
067bc     02 24 66 F0 | 	shl	_var04, #2
067c0     FD 24 02 F1 | 	add	_var04, objptr
067c4     12 1F 62 FC | 	wrlong	_var01, _var04
067c8     DF FA 85 F1 | 	sub	objptr, #223
067cc                 | LR__0283
067cc                 | LR__0284
067cc                 | ' 
067cc                 | '   ' Handle glissando if activated
067cc                 | '   if portaGlissando[channel] > 0
067cc     2F 1F 02 F6 | 	mov	_var01, arg01
067d0     BC FB 05 F1 | 	add	objptr, #444
067d4     FD 1E 02 F1 | 	add	_var01, objptr
067d8     0F 23 C2 FA | 	rdbyte	_var03, _var01
067dc     00 22 5E F2 | 	cmps	_var03, #0 wcz
067e0     BC FB 85 F1 | 	sub	objptr, #444
067e4     A0 00 90 ED |  if_be	jmp	#LR__0287
067e8                 | ' 
067e8                 | '     tempPeriod := currPeriod[channel]
067e8     2F 1F 02 F6 | 	mov	_var01, arg01
067ec     02 1E 66 F0 | 	shl	_var01, #2
067f0     DF FA 05 F1 | 	add	objptr, #223
067f4     FD 1E 02 F1 | 	add	_var01, objptr
067f8     0F 2B 02 FB | 	rdlong	_var07, _var01
067fc                 | ' 
067fc                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
067fc     00 2C 06 F6 | 	mov	_var08, #0
06800     DF FA 85 F1 | 	sub	objptr, #223
06804     5C 98 9F FE | 	loc	pa,	#(@LR__0286-@LR__0285)
06808     93 00 A0 FD | 	call	#FCACHE_LOAD_
0680c                 | LR__0285
0680c                 | ' 
0680c                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
0680c     06 00 00 FF 
06810     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
06814     0A 2F 02 F6 | 	mov	_var09, ptr__trackerplayer_spin2_dat__
06818     2F 23 02 F6 | 	mov	_var03, arg01
0681c     D3 FA 05 F1 | 	add	objptr, #211
06820     FD 22 02 F1 | 	add	_var03, objptr
06824     11 27 C2 FA | 	rdbyte	_var05, _var03
06828     13 31 02 F6 | 	mov	_var10, _var05
0682c     03 30 66 F0 | 	shl	_var10, #3
06830     13 31 02 F1 | 	add	_var10, _var05
06834     03 30 66 F0 | 	shl	_var10, #3
06838     18 2F 02 F1 | 	add	_var09, _var10
0683c     16 33 02 F6 | 	mov	_var11, _var08
06840     01 32 66 F0 | 	shl	_var11, #1
06844     17 33 02 F1 | 	add	_var11, _var09
06848     19 35 E2 FA | 	rdword	_var12, _var11
0684c                 | '       if tempPeriod >= periodStep
0684c     1A 2B 5A F2 | 	cmps	_var07, _var12 wcz
06850                 | '         i += 1000
06850     06 00 00 FF 
06854     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
06858     D3 FA 85 F1 | 	sub	objptr, #211
0685c     01 00 00 3F 
06860     E8 2D 06 31 |  if_ae	add	_var08, ##1000
06864     01 2C 06 F1 | 	add	_var08, #1
06868     24 2C 5E F2 | 	cmps	_var08, #36 wcz
0686c     9C FF 9F CD |  if_b	jmp	#LR__0285
06870                 | LR__0286
06870                 | ' 
06870                 | '     deltaPeriod[channel] := periodStep - tempPeriod
06870     15 35 82 F1 | 	sub	_var12, _var07
06874     02 5E 66 F0 | 	shl	arg01, #2
06878     EF FA 05 F1 | 	add	objptr, #239
0687c     FD 5E 02 F1 | 	add	arg01, objptr
06880     2F 35 62 FC | 	wrlong	_var12, arg01
06884     EF FA 85 F1 | 	sub	objptr, #239
06888                 | LR__0287
06888                 | _trackerplayer_spin2_doPortamento_ret
06888     2D 00 64 FD | 	ret
0688c                 | 
0688c                 | ' 
0688c                 | ' 
0688c                 | ' PRI doVolumeSlide(channel)
0688c                 | _trackerplayer_spin2_doVolumeSlide
0688c                 | ' 
0688c                 | '   if x > 0
0688c     B7 FB 05 F1 | 	add	objptr, #439
06890     FD 1E C2 FA | 	rdbyte	_var01, objptr
06894     B7 FB 85 F1 | 	sub	objptr, #439
06898     00 1E 5E F2 | 	cmps	_var01, #0 wcz
0689c     38 00 90 ED |  if_be	jmp	#LR__0288
068a0                 | '     currVolume[channel] += x
068a0     2F 21 02 F6 | 	mov	_var02, arg01
068a4     02 20 66 F0 | 	shl	_var02, #2
068a8     FF FA 05 F1 | 	add	objptr, #255
068ac     FD 20 02 F1 | 	add	_var02, objptr
068b0     10 1F 02 FB | 	rdlong	_var01, _var02
068b4     B8 FA 05 F1 | 	add	objptr, #184
068b8     FD 22 C2 FA | 	rdbyte	_var03, objptr
068bc     11 1F 02 F1 | 	add	_var01, _var03
068c0     2F 25 02 F6 | 	mov	_var04, arg01
068c4     02 24 66 F0 | 	shl	_var04, #2
068c8     B8 FA 85 F1 | 	sub	objptr, #184
068cc     FD 24 02 F1 | 	add	_var04, objptr
068d0     12 1F 62 FC | 	wrlong	_var01, _var04
068d4     FF FA 85 F1 | 	sub	objptr, #255
068d8                 | LR__0288
068d8                 | '   if y > 0
068d8     B8 FB 05 F1 | 	add	objptr, #440
068dc     FD 1E C2 FA | 	rdbyte	_var01, objptr
068e0     B8 FB 85 F1 | 	sub	objptr, #440
068e4     00 1E 5E F2 | 	cmps	_var01, #0 wcz
068e8     34 00 90 ED |  if_be	jmp	#LR__0289
068ec                 | '     currVolume[channel] -= y
068ec     2F 21 02 F6 | 	mov	_var02, arg01
068f0     02 20 66 F0 | 	shl	_var02, #2
068f4     FF FA 05 F1 | 	add	objptr, #255
068f8     FD 20 02 F1 | 	add	_var02, objptr
068fc     10 1F 02 FB | 	rdlong	_var01, _var02
06900     B9 FA 05 F1 | 	add	objptr, #185
06904     FD 22 C2 FA | 	rdbyte	_var03, objptr
06908     11 1F 82 F1 | 	sub	_var01, _var03
0690c     02 5E 66 F0 | 	shl	arg01, #2
06910     B9 FA 85 F1 | 	sub	objptr, #185
06914     FD 5E 02 F1 | 	add	arg01, objptr
06918     2F 1F 62 FC | 	wrlong	_var01, arg01
0691c     FF FA 85 F1 | 	sub	objptr, #255
06920                 | LR__0289
06920                 | _trackerplayer_spin2_doVolumeSlide_ret
06920     2D 00 64 FD | 	ret
06924                 | 
06924                 | ' 
06924                 | ' 
06924                 | ' '--------------------------------------------------------------
06924                 | ' '---------- Init the variables, start the cog. ----------------
06924                 | ' '--------------------------------------------------------------
06924                 | ' 
06924                 | ' pub start() :cog,base | iii
06924                 | _audio019_spin2_start
06924     07 5A 05 F6 | 	mov	COUNT_, #7
06928     B0 00 A0 FD | 	call	#pushregs_
0692c                 | ' 
0692c                 | ' base:=@channel1[0]
0692c     FD 6C 02 F6 | 	mov	local01, objptr
06930                 | ' 
06930                 | ' repeat iii from 0 to 7
06930     00 6E 06 F6 | 	mov	local02, #0
06934     D4 97 9F FE | 	loc	pa,	#(@LR__0291-@LR__0290)
06938     93 00 A0 FD | 	call	#FCACHE_LOAD_
0693c                 | LR__0290
0693c                 | '   long [base+32*iii]:=0
0693c     36 71 02 F6 | 	mov	local03, local01
06940     37 73 02 F6 | 	mov	local04, local02
06944     05 72 66 F0 | 	shl	local04, #5
06948     39 71 02 F1 | 	add	local03, local04
0694c     38 01 68 FC | 	wrlong	#0, local03
06950                 | '   long [base+32*iii+4]:=0
06950     36 71 02 F6 | 	mov	local03, local01
06954     37 73 02 F6 | 	mov	local04, local02
06958     05 72 66 F0 | 	shl	local04, #5
0695c     39 71 02 F1 | 	add	local03, local04
06960     04 70 06 F1 | 	add	local03, #4
06964     38 01 68 FC | 	wrlong	#0, local03
06968                 | '   long[base+32*iii+12]:=0
06968     36 71 02 F6 | 	mov	local03, local01
0696c     37 73 02 F6 | 	mov	local04, local02
06970     05 72 66 F0 | 	shl	local04, #5
06974     39 71 02 F1 | 	add	local03, local04
06978     0C 70 06 F1 | 	add	local03, #12
0697c     38 01 68 FC | 	wrlong	#0, local03
06980                 | '   long[base+32*iii+16]:=2 
06980     36 71 02 F6 | 	mov	local03, local01
06984     37 73 02 F6 | 	mov	local04, local02
06988     05 72 66 F0 | 	shl	local04, #5
0698c     39 71 02 F1 | 	add	local03, local04
06990     10 70 06 F1 | 	add	local03, #16
06994     38 05 68 FC | 	wrlong	#2, local03
06998                 | '   word[base+32*iii+20]:=0
06998     36 71 02 F6 | 	mov	local03, local01
0699c     37 73 02 F6 | 	mov	local04, local02
069a0     05 72 66 F0 | 	shl	local04, #5
069a4     39 71 02 F1 | 	add	local03, local04
069a8     14 70 06 F1 | 	add	local03, #20
069ac     38 01 58 FC | 	wrword	#0, local03
069b0                 | '   word[base+32*iii+22]:=8192
069b0     36 71 02 F6 | 	mov	local03, local01
069b4     37 73 02 F6 | 	mov	local04, local02
069b8     05 72 66 F0 | 	shl	local04, #5
069bc     39 71 02 F1 | 	add	local03, local04
069c0     16 70 06 F1 | 	add	local03, #22
069c4     10 00 80 FF 
069c8     38 01 58 FC | 	wrword	##8192, local03
069cc                 | '   word[base+32*iii+24]:=100+2*iii
069cc     37 73 02 F6 | 	mov	local04, local02
069d0     01 72 66 F0 | 	shl	local04, #1
069d4     64 70 06 F6 | 	mov	local03, #100
069d8     39 71 02 F1 | 	add	local03, local04
069dc     36 75 02 F6 | 	mov	local05, local01
069e0     37 77 02 F6 | 	mov	local06, local02
069e4     05 76 66 F0 | 	shl	local06, #5
069e8     3B 75 02 F1 | 	add	local05, local06
069ec     18 74 06 F1 | 	add	local05, #24
069f0     3A 71 52 FC | 	wrword	local03, local05
069f4                 | '   word[base+32*iii+26]:=2
069f4     36 71 02 F6 | 	mov	local03, local01
069f8     37 73 02 F6 | 	mov	local04, local02
069fc     05 72 66 F0 | 	shl	local04, #5
06a00     39 71 02 F1 | 	add	local03, local04
06a04     1A 70 06 F1 | 	add	local03, #26
06a08     38 05 58 FC | 	wrword	#2, local03
06a0c                 | '   long [base+32*iii+8]:=@null | $C0000000
06a0c     01 00 00 FF 
06a10     F8 02 06 F1 | 	add	ptr__audio019_spin2_dat__, ##760
06a14     01 71 02 F6 | 	mov	local03, ptr__audio019_spin2_dat__
06a18     3E 70 26 F4 | 	bith	local03, #62
06a1c     36 75 02 F6 | 	mov	local05, local01
06a20     37 77 02 F6 | 	mov	local06, local02
06a24     05 76 66 F0 | 	shl	local06, #5
06a28     3B 75 02 F1 | 	add	local05, local06
06a2c     08 74 06 F1 | 	add	local05, #8
06a30     3A 71 62 FC | 	wrlong	local03, local05
06a34     01 6E 06 F1 | 	add	local02, #1
06a38     08 6E 5E F2 | 	cmps	local02, #8 wcz
06a3c     01 00 00 FF 
06a40     F8 02 86 F1 | 	sub	ptr__audio019_spin2_dat__, ##760
06a44     F4 FE 9F CD |  if_b	jmp	#LR__0290
06a48                 | LR__0291
06a48                 | '   
06a48                 | ' cog:=coginit(16,@audio,@channel1)
06a48     01 61 02 F6 | 	mov	arg02, ptr__audio019_spin2_dat__
06a4c     FD 62 02 F6 | 	mov	arg03, objptr
06a50     10 5E 06 F6 | 	mov	arg01, #16
06a54     28 62 62 FD | 	setq	arg03
06a58     30 5F F2 FC | 	coginit	arg01, arg02 wc
06a5c     01 5E 66 C6 |  if_b	neg	arg01, #1
06a60     2F 19 02 F6 | 	mov	result1, arg01
06a64     0C 79 02 F6 | 	mov	local07, result1
06a68                 | ' waitms(100)
06a68     64 5E 06 F6 | 	mov	arg01, #100
06a6c     CC 04 B0 FD | 	call	#__system___waitms
06a70                 | ' return cog,base
06a70     36 1B 02 F6 | 	mov	result2, local01
06a74     3C 19 02 F6 | 	mov	result1, local07
06a78     AF F0 03 F6 | 	mov	ptra, fp
06a7c     BA 00 A0 FD | 	call	#popregs_
06a80                 | _audio019_spin2_start_ret
06a80     2D 00 64 FD | 	ret
06a84                 | hubexit
06a84     81 00 80 FD | 	jmp	#cogexit
06a88                 | 
06a88                 | __system___setbaud
06a88     14 98 06 FB | 	rdlong	muldiva_, #20
06a8c     2F 9B 02 F6 | 	mov	muldivb_, arg01
06a90     C6 00 A0 FD | 	call	#divide_
06a94     40 7C 64 FD | 	dirl	#62
06a98     40 7E 64 FD | 	dirl	#63
06a9c     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06aa0     10 9A 66 F0 | 	shl	muldivb_, #16
06aa4     07 60 06 F6 | 	mov	arg02, #7
06aa8     4D 61 02 F1 | 	add	arg02, muldivb_
06aac     3E F8 0C FC | 	wrpin	#124, #62
06ab0     3E 60 16 FC | 	wxpin	arg02, #62
06ab4     3F 7C 0C FC | 	wrpin	#62, #63
06ab8     14 60 06 F1 | 	add	arg02, #20
06abc     3F 60 16 FC | 	wxpin	arg02, #63
06ac0     41 7C 64 FD | 	dirh	#62
06ac4     41 7E 64 FD | 	dirh	#63
06ac8                 | __system___setbaud_ret
06ac8     2D 00 64 FD | 	ret
06acc                 | 
06acc                 | __system___txraw
06acc     02 5A 05 F6 | 	mov	COUNT_, #2
06ad0     B0 00 A0 FD | 	call	#pushregs_
06ad4     2F 6D 02 F6 | 	mov	local01, arg01
06ad8     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06adc     0C 00 90 5D |  if_ne	jmp	#LR__0292
06ae0     08 07 00 FF 
06ae4     00 5E 06 F6 | 	mov	arg01, ##921600
06ae8     9C FF BF FD | 	call	#__system___setbaud
06aec                 | LR__0292
06aec     3E 6C 26 FC | 	wypin	local01, #62
06af0     1F 02 64 FD | 	waitx	#1
06af4     10 95 9F FE | 	loc	pa,	#(@LR__0294-@LR__0293)
06af8     93 00 A0 FD | 	call	#FCACHE_LOAD_
06afc                 | LR__0293
06afc     40 7C 74 FD | 	testp	#62 wc
06b00     F8 FF 9F 3D |  if_nc	jmp	#LR__0293
06b04                 | LR__0294
06b04     01 18 06 F6 | 	mov	result1, #1
06b08     AF F0 03 F6 | 	mov	ptra, fp
06b0c     BA 00 A0 FD | 	call	#popregs_
06b10                 | __system___txraw_ret
06b10     2D 00 64 FD | 	ret
06b14                 | 
06b14                 | __system___rxraw
06b14     0B 5A 05 F6 | 	mov	COUNT_, #11
06b18     B0 00 A0 FD | 	call	#pushregs_
06b1c     2F 6D 02 F6 | 	mov	local01, arg01
06b20     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06b24     0C 00 90 5D |  if_ne	jmp	#LR__0295
06b28     08 07 00 FF 
06b2c     00 5E 06 F6 | 	mov	arg01, ##921600
06b30     54 FF BF FD | 	call	#__system___setbaud
06b34                 | LR__0295
06b34     00 6C 0E F2 | 	cmp	local01, #0 wz
06b38     18 00 90 AD |  if_e	jmp	#LR__0296
06b3c     1A 70 62 FD | 	getct	local03
06b40     14 72 06 FB | 	rdlong	local04, #20
06b44     0A 72 46 F0 | 	shr	local04, #10
06b48     39 6D 02 FD | 	qmul	local01, local04
06b4c     18 74 62 FD | 	getqx	local05
06b50     3A 71 02 F1 | 	add	local03, local05
06b54                 | LR__0296
06b54     01 76 66 F6 | 	neg	local06, #1
06b58     00 78 06 F6 | 	mov	local07, #0
06b5c     04 00 06 F1 | 	add	ptr___system__dat__, #4
06b60     00 7B 02 FB | 	rdlong	local08, ptr___system__dat__
06b64     04 00 86 F1 | 	sub	ptr___system__dat__, #4
06b68                 | LR__0297
06b68     08 7A 16 F4 | 	testb	local08, #8 wc
06b6c     09 7A 76 F4 | 	testbn	local08, #9 andc
06b70     0A 7A 46 F0 | 	shr	local08, #10
06b74     01 78 06 C6 |  if_b	mov	local07, #1
06b78     10 00 90 CD |  if_b	jmp	#LR__0298
06b7c     40 7E 6C FD | 	testp	#63 wz
06b80     01 78 06 A6 |  if_e	mov	local07, #1
06b84     3F 7A 8E AA |  if_e	rdpin	local08, #63
06b88     04 7A 46 A0 |  if_e	shr	local08, #4
06b8c                 | LR__0298
06b8c     00 6E 06 F6 | 	mov	local02, #0
06b90     00 78 0E F2 | 	cmp	local07, #0 wz
06b94     01 6E 66 56 |  if_ne	neg	local02, #1
06b98     00 7C 06 F6 | 	mov	local09, #0
06b9c     00 72 06 F6 | 	mov	local04, #0
06ba0     00 6C 0E F2 | 	cmp	local01, #0 wz
06ba4     01 72 66 56 |  if_ne	neg	local04, #1
06ba8     00 74 06 F6 | 	mov	local05, #0
06bac     00 7E 06 F6 | 	mov	local10, #0
06bb0     1A 80 62 FD | 	getct	local11
06bb4     38 81 82 F1 | 	sub	local11, local03
06bb8     00 80 5E F2 | 	cmps	local11, #0 wcz
06bbc     01 7E 66 C6 |  if_b	neg	local10, #1
06bc0     00 7E 0E F2 | 	cmp	local10, #0 wz
06bc4     01 74 66 56 |  if_ne	neg	local05, #1
06bc8     3A 73 CA F7 | 	test	local04, local05 wz
06bcc     01 7C 66 56 |  if_ne	neg	local09, #1
06bd0     3E 6F 4A F5 | 	or	local02, local09 wz
06bd4     90 FF 9F AD |  if_e	jmp	#LR__0297
06bd8     00 78 0E F2 | 	cmp	local07, #0 wz
06bdc     3D 77 02 56 |  if_ne	mov	local06, local08
06be0     FF 76 06 55 |  if_ne	and	local06, #255
06be4     04 00 06 F1 | 	add	ptr___system__dat__, #4
06be8     00 7B 62 FC | 	wrlong	local08, ptr___system__dat__
06bec     04 00 86 F1 | 	sub	ptr___system__dat__, #4
06bf0     3B 19 02 F6 | 	mov	result1, local06
06bf4     AF F0 03 F6 | 	mov	ptra, fp
06bf8     BA 00 A0 FD | 	call	#popregs_
06bfc                 | __system___rxraw_ret
06bfc     2D 00 64 FD | 	ret
06c00                 | 
06c00                 | __system____builtin_memmove
06c00     2F 1F 02 F6 | 	mov	_var01, arg01
06c04     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
06c08     50 00 90 3D |  if_ae	jmp	#LR__0306
06c0c     10 94 9F FE | 	loc	pa,	#(@LR__0300-@LR__0299)
06c10     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c14                 | LR__0299
06c14     03 62 5E F2 | 	cmps	arg03, #3 wcz
06c18     18 00 90 ED |  if_be	jmp	#LR__0301
06c1c     30 21 02 FB | 	rdlong	_var02, arg02
06c20     2F 21 62 FC | 	wrlong	_var02, arg01
06c24     04 5E 06 F1 | 	add	arg01, #4
06c28     04 60 06 F1 | 	add	arg02, #4
06c2c     04 62 86 F1 | 	sub	arg03, #4
06c30     E0 FF 9F FD | 	jmp	#LR__0299
06c34                 | LR__0300
06c34                 | LR__0301
06c34     31 23 0A F6 | 	mov	_var03, arg03 wz
06c38     4C 00 90 AD |  if_e	jmp	#LR__0312
06c3c     D4 93 9F FE | 	loc	pa,	#(@LR__0304-@LR__0302)
06c40     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c44                 | LR__0302
06c44     11 09 D8 FC | 	rep	@LR__0305, _var03
06c48                 | LR__0303
06c48     30 21 C2 FA | 	rdbyte	_var02, arg02
06c4c     2F 21 42 FC | 	wrbyte	_var02, arg01
06c50     01 5E 06 F1 | 	add	arg01, #1
06c54     01 60 06 F1 | 	add	arg02, #1
06c58                 | LR__0304
06c58                 | LR__0305
06c58     2C 00 90 FD | 	jmp	#LR__0312
06c5c                 | LR__0306
06c5c     31 5F 02 F1 | 	add	arg01, arg03
06c60     31 61 02 F1 | 	add	arg02, arg03
06c64     31 25 0A F6 | 	mov	_var04, arg03 wz
06c68     1C 00 90 AD |  if_e	jmp	#LR__0311
06c6c     A4 93 9F FE | 	loc	pa,	#(@LR__0309-@LR__0307)
06c70     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c74                 | LR__0307
06c74     12 09 D8 FC | 	rep	@LR__0310, _var04
06c78                 | LR__0308
06c78     01 5E 86 F1 | 	sub	arg01, #1
06c7c     01 60 86 F1 | 	sub	arg02, #1
06c80     30 21 C2 FA | 	rdbyte	_var02, arg02
06c84     2F 21 42 FC | 	wrbyte	_var02, arg01
06c88                 | LR__0309
06c88                 | LR__0310
06c88                 | LR__0311
06c88                 | LR__0312
06c88     0F 19 02 F6 | 	mov	result1, _var01
06c8c                 | __system____builtin_memmove_ret
06c8c     2D 00 64 FD | 	ret
06c90                 | 
06c90                 | __system__longmove
06c90     2F 1F 02 F6 | 	mov	_var01, arg01
06c94     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
06c98     28 00 90 3D |  if_ae	jmp	#LR__0317
06c9c     31 21 0A F6 | 	mov	_var02, arg03 wz
06ca0     5C 00 90 AD |  if_e	jmp	#LR__0323
06ca4     6C 93 9F FE | 	loc	pa,	#(@LR__0315-@LR__0313)
06ca8     93 00 A0 FD | 	call	#FCACHE_LOAD_
06cac                 | LR__0313
06cac     10 09 D8 FC | 	rep	@LR__0316, _var02
06cb0                 | LR__0314
06cb0     30 23 02 FB | 	rdlong	_var03, arg02
06cb4     2F 23 62 FC | 	wrlong	_var03, arg01
06cb8     04 5E 06 F1 | 	add	arg01, #4
06cbc     04 60 06 F1 | 	add	arg02, #4
06cc0                 | LR__0315
06cc0                 | LR__0316
06cc0     3C 00 90 FD | 	jmp	#LR__0323
06cc4                 | LR__0317
06cc4     31 25 02 F6 | 	mov	_var04, arg03
06cc8     02 24 66 F0 | 	shl	_var04, #2
06ccc     12 5F 02 F1 | 	add	arg01, _var04
06cd0     31 25 02 F6 | 	mov	_var04, arg03
06cd4     02 24 66 F0 | 	shl	_var04, #2
06cd8     12 61 02 F1 | 	add	arg02, _var04
06cdc     31 27 0A F6 | 	mov	_var05, arg03 wz
06ce0     1C 00 90 AD |  if_e	jmp	#LR__0322
06ce4     2C 93 9F FE | 	loc	pa,	#(@LR__0320-@LR__0318)
06ce8     93 00 A0 FD | 	call	#FCACHE_LOAD_
06cec                 | LR__0318
06cec     13 09 D8 FC | 	rep	@LR__0321, _var05
06cf0                 | LR__0319
06cf0     04 5E 86 F1 | 	sub	arg01, #4
06cf4     04 60 86 F1 | 	sub	arg02, #4
06cf8     30 23 02 FB | 	rdlong	_var03, arg02
06cfc     2F 23 62 FC | 	wrlong	_var03, arg01
06d00                 | LR__0320
06d00                 | LR__0321
06d00                 | LR__0322
06d00                 | LR__0323
06d00     0F 19 02 F6 | 	mov	result1, _var01
06d04                 | __system__longmove_ret
06d04     2D 00 64 FD | 	ret
06d08                 | 
06d08                 | __system____topofstack
06d08     00 5A 05 F6 | 	mov	COUNT_, #0
06d0c     B0 00 A0 FD | 	call	#pushregs_
06d10     08 F0 07 F1 | 	add	ptra, #8
06d14     04 5E 05 F1 | 	add	fp, #4
06d18     AF 5E 62 FC | 	wrlong	arg01, fp
06d1c     AF 18 02 F6 | 	mov	result1, fp
06d20     04 5E 85 F1 | 	sub	fp, #4
06d24     AF F0 03 F6 | 	mov	ptra, fp
06d28     BA 00 A0 FD | 	call	#popregs_
06d2c                 | __system____topofstack_ret
06d2c     2D 00 64 FD | 	ret
06d30                 | 
06d30                 | __system___make_methodptr
06d30     04 5A 05 F6 | 	mov	COUNT_, #4
06d34     B0 00 A0 FD | 	call	#pushregs_
06d38     2F 6D 02 F6 | 	mov	local01, arg01
06d3c     30 6F 02 F6 | 	mov	local02, arg02
06d40     08 5E 06 F6 | 	mov	arg01, #8
06d44     84 0D B0 FD | 	call	#__system___gc_alloc_managed
06d48     0C 71 0A F6 | 	mov	local03, result1 wz
06d4c     10 00 90 AD |  if_e	jmp	#LR__0324
06d50     38 6D 62 FC | 	wrlong	local01, local03
06d54     38 73 02 F6 | 	mov	local04, local03
06d58     04 72 06 F1 | 	add	local04, #4
06d5c     39 6F 62 FC | 	wrlong	local02, local04
06d60                 | LR__0324
06d60     38 19 02 F6 | 	mov	result1, local03
06d64     AF F0 03 F6 | 	mov	ptra, fp
06d68     BA 00 A0 FD | 	call	#popregs_
06d6c                 | __system___make_methodptr_ret
06d6c     2D 00 64 FD | 	ret
06d70                 | 
06d70                 | __system___lockmem
06d70     02 5A 05 F6 | 	mov	COUNT_, #2
06d74     B0 00 A0 FD | 	call	#pushregs_
06d78     00 18 06 F6 | 	mov	result1, #0
06d7c     01 18 62 FD | 	cogid	result1
06d80     0C 6D 02 F6 | 	mov	local01, result1
06d84     00 6D 06 F1 | 	add	local01, #256
06d88                 | LR__0325
06d88     2F 6F 0A FB | 	rdlong	local02, arg01 wz
06d8c     2F 6D 62 AC |  if_e	wrlong	local01, arg01
06d90     2F 6F 02 AB |  if_e	rdlong	local02, arg01
06d94     2F 6F 02 AB |  if_e	rdlong	local02, arg01
06d98     36 6F 0A F2 | 	cmp	local02, local01 wz
06d9c     E8 FF 9F 5D |  if_ne	jmp	#LR__0325
06da0     AF F0 03 F6 | 	mov	ptra, fp
06da4     BA 00 A0 FD | 	call	#popregs_
06da8                 | __system___lockmem_ret
06da8     2D 00 64 FD | 	ret
06dac                 | 
06dac                 | __system___string_concat
06dac     07 5A 05 F6 | 	mov	COUNT_, #7
06db0     B0 00 A0 FD | 	call	#pushregs_
06db4     2F 6D 02 F6 | 	mov	local01, arg01
06db8     30 6F 02 F6 | 	mov	local02, arg02
06dbc     36 5F 02 F6 | 	mov	arg01, local01
06dc0     00 70 06 F6 | 	mov	local03, #0
06dc4     48 92 9F FE | 	loc	pa,	#(@LR__0327-@LR__0326)
06dc8     93 00 A0 FD | 	call	#FCACHE_LOAD_
06dcc                 | LR__0326
06dcc     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06dd0     01 70 06 51 |  if_ne	add	local03, #1
06dd4     01 5E 06 51 |  if_ne	add	arg01, #1
06dd8     F0 FF 9F 5D |  if_ne	jmp	#LR__0326
06ddc                 | LR__0327
06ddc     38 75 02 F6 | 	mov	local05, local03
06de0     37 5F 02 F6 | 	mov	arg01, local02
06de4     00 70 06 F6 | 	mov	local03, #0
06de8     24 92 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
06dec     93 00 A0 FD | 	call	#FCACHE_LOAD_
06df0                 | LR__0328
06df0     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06df4     01 70 06 51 |  if_ne	add	local03, #1
06df8     01 5E 06 51 |  if_ne	add	arg01, #1
06dfc     F0 FF 9F 5D |  if_ne	jmp	#LR__0328
06e00                 | LR__0329
06e00     38 19 02 F6 | 	mov	result1, local03
06e04     0C 77 02 F6 | 	mov	local06, result1
06e08     3A 5F 02 F6 | 	mov	arg01, local05
06e0c     3B 5F 02 F1 | 	add	arg01, local06
06e10     01 5E 06 F1 | 	add	arg01, #1
06e14     B4 0C B0 FD | 	call	#__system___gc_alloc_managed
06e18     0C 79 0A F6 | 	mov	local07, result1 wz
06e1c     28 00 90 AD |  if_e	jmp	#LR__0330
06e20     3C 5F 02 F6 | 	mov	arg01, local07
06e24     36 61 02 F6 | 	mov	arg02, local01
06e28     3A 63 02 F6 | 	mov	arg03, local05
06e2c     D0 FD BF FD | 	call	#__system____builtin_memmove
06e30     3C 5F 02 F6 | 	mov	arg01, local07
06e34     3A 5F 02 F1 | 	add	arg01, local05
06e38     01 76 06 F1 | 	add	local06, #1
06e3c     37 61 02 F6 | 	mov	arg02, local02
06e40     3B 63 02 F6 | 	mov	arg03, local06
06e44     B8 FD BF FD | 	call	#__system____builtin_memmove
06e48                 | LR__0330
06e48     3C 19 02 F6 | 	mov	result1, local07
06e4c     AF F0 03 F6 | 	mov	ptra, fp
06e50     BA 00 A0 FD | 	call	#popregs_
06e54                 | __system___string_concat_ret
06e54     2D 00 64 FD | 	ret
06e58                 | 
06e58                 | __system___tx
06e58     03 5A 05 F6 | 	mov	COUNT_, #3
06e5c     B0 00 A0 FD | 	call	#pushregs_
06e60     2F 6D 02 F6 | 	mov	local01, arg01
06e64     0A 6C 0E F2 | 	cmp	local01, #10 wz
06e68     20 00 90 5D |  if_ne	jmp	#LR__0331
06e6c     08 00 06 F1 | 	add	ptr___system__dat__, #8
06e70     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06e74     08 00 86 F1 | 	sub	ptr___system__dat__, #8
06e78     37 71 02 F6 | 	mov	local03, local02
06e7c     02 70 0E F5 | 	and	local03, #2 wz
06e80     08 00 90 AD |  if_e	jmp	#LR__0331
06e84     0D 5E 06 F6 | 	mov	arg01, #13
06e88     40 FC BF FD | 	call	#__system___txraw
06e8c                 | LR__0331
06e8c     36 5F 02 F6 | 	mov	arg01, local01
06e90     38 FC BF FD | 	call	#__system___txraw
06e94     AF F0 03 F6 | 	mov	ptra, fp
06e98     BA 00 A0 FD | 	call	#popregs_
06e9c                 | __system___tx_ret
06e9c     2D 00 64 FD | 	ret
06ea0                 | 
06ea0                 | __system___rx
06ea0     02 5A 05 F6 | 	mov	COUNT_, #2
06ea4     B0 00 A0 FD | 	call	#pushregs_
06ea8                 | LR__0332
06ea8     00 5E 06 F6 | 	mov	arg01, #0
06eac     64 FC BF FD | 	call	#__system___rxraw
06eb0     0C 6D 02 F6 | 	mov	local01, result1
06eb4     FF FF 7F FF 
06eb8     FF 6D 0E F2 | 	cmp	local01, ##-1 wz
06ebc     E8 FF 9F AD |  if_e	jmp	#LR__0332
06ec0     0D 6C 0E F2 | 	cmp	local01, #13 wz
06ec4     14 00 90 5D |  if_ne	jmp	#LR__0333
06ec8     08 00 06 F1 | 	add	ptr___system__dat__, #8
06ecc     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06ed0     08 00 86 F1 | 	sub	ptr___system__dat__, #8
06ed4     02 6E CE F7 | 	test	local02, #2 wz
06ed8     0A 6C 06 56 |  if_ne	mov	local01, #10
06edc                 | LR__0333
06edc     08 00 06 F1 | 	add	ptr___system__dat__, #8
06ee0     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06ee4     08 00 86 F1 | 	sub	ptr___system__dat__, #8
06ee8     01 6E CE F7 | 	test	local02, #1 wz
06eec     1C 00 90 AD |  if_e	jmp	#LR__0336
06ef0     7F 6C 0E F2 | 	cmp	local01, #127 wz
06ef4     0C 00 90 5D |  if_ne	jmp	#LR__0334
06ef8     08 5E 06 F6 | 	mov	arg01, #8
06efc     58 FF BF FD | 	call	#__system___tx
06f00     08 00 90 FD | 	jmp	#LR__0335
06f04                 | LR__0334
06f04     36 5F 02 F6 | 	mov	arg01, local01
06f08     4C FF BF FD | 	call	#__system___tx
06f0c                 | LR__0335
06f0c                 | LR__0336
06f0c     36 19 02 F6 | 	mov	result1, local01
06f10     AF F0 03 F6 | 	mov	ptra, fp
06f14     BA 00 A0 FD | 	call	#popregs_
06f18                 | __system___rx_ret
06f18     2D 00 64 FD | 	ret
06f1c                 | 
06f1c                 | __system___pinread
06f1c     20 5E CE F7 | 	test	arg01, #32 wz
06f20     FF 1F 02 56 |  if_ne	mov	_var01, inb
06f24     FE 1F 02 A6 |  if_e	mov	_var01, ina
06f28     2F 1F 42 F0 | 	shr	_var01, arg01
06f2c     06 5E 46 F0 | 	shr	arg01, #6
06f30     2F 1F 42 F7 | 	zerox	_var01, arg01
06f34     0F 19 02 F6 | 	mov	result1, _var01
06f38                 | __system___pinread_ret
06f38     2D 00 64 FD | 	ret
06f3c                 | 
06f3c                 | __system___waitms
06f3c     03 5A 05 F6 | 	mov	COUNT_, #3
06f40     B0 00 A0 FD | 	call	#pushregs_
06f44     2F 6D 02 F6 | 	mov	local01, arg01
06f48     14 6E 06 FB | 	rdlong	local02, #20
06f4c     C8 90 9F FE | 	loc	pa,	#(@LR__0338-@LR__0337)
06f50     93 00 A0 FD | 	call	#FCACHE_LOAD_
06f54                 | LR__0337
06f54     01 00 00 FF 
06f58     E8 6D 5E F2 | 	cmps	local01, ##1000 wcz
06f5c     1F 6E 62 1D |  if_a	waitx	local02
06f60     01 00 00 1F 
06f64     E8 6D 86 11 |  if_a	sub	local01, ##1000
06f68     E8 FF 9F 1D |  if_a	jmp	#LR__0337
06f6c                 | LR__0338
06f6c     0C 00 06 F1 | 	add	ptr___system__dat__, #12
06f70     00 71 0A FB | 	rdlong	local03, ptr___system__dat__ wz
06f74     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
06f78     20 00 90 5D |  if_ne	jmp	#LR__0339
06f7c     37 99 02 F6 | 	mov	muldiva_, local02
06f80     01 00 00 FF 
06f84     E8 9B 06 F6 | 	mov	muldivb_, ##1000
06f88     C2 00 A0 FD | 	call	#unsdivide_
06f8c     4D 71 02 F6 | 	mov	local03, muldivb_
06f90     0C 00 06 F1 | 	add	ptr___system__dat__, #12
06f94     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06f98     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
06f9c                 | LR__0339
06f9c     00 6C 5E F2 | 	cmps	local01, #0 wcz
06fa0     38 6D 02 1D |  if_a	qmul	local01, local03
06fa4     18 5E 62 1D |  if_a	getqx	arg01
06fa8     1F 5E 62 1D |  if_a	waitx	arg01
06fac     AF F0 03 F6 | 	mov	ptra, fp
06fb0     BA 00 A0 FD | 	call	#popregs_
06fb4                 | __system___waitms_ret
06fb4     2D 00 64 FD | 	ret
06fb8                 | 
06fb8                 | __system___waitus
06fb8     02 5A 05 F6 | 	mov	COUNT_, #2
06fbc     B0 00 A0 FD | 	call	#pushregs_
06fc0     2F 6D 02 F6 | 	mov	local01, arg01
06fc4     10 00 06 F1 | 	add	ptr___system__dat__, #16
06fc8     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06fcc     10 00 86 F1 | 	sub	ptr___system__dat__, #16
06fd0     20 00 90 5D |  if_ne	jmp	#LR__0340
06fd4     14 98 06 FB | 	rdlong	muldiva_, #20
06fd8     A1 07 00 FF 
06fdc     40 9A 06 F6 | 	mov	muldivb_, ##1000000
06fe0     C2 00 A0 FD | 	call	#unsdivide_
06fe4     4D 6F 02 F6 | 	mov	local02, muldivb_
06fe8     10 00 06 F1 | 	add	ptr___system__dat__, #16
06fec     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06ff0     10 00 86 F1 | 	sub	ptr___system__dat__, #16
06ff4                 | LR__0340
06ff4     37 6D 02 FD | 	qmul	local01, local02
06ff8     18 5E 62 FD | 	getqx	arg01
06ffc     1F 5E 62 FD | 	waitx	arg01
07000     AF F0 03 F6 | 	mov	ptra, fp
07004     BA 00 A0 FD | 	call	#popregs_
07008                 | __system___waitus_ret
07008     2D 00 64 FD | 	ret
0700c                 | 
0700c                 | __system___basic_open
0700c     06 5A 05 F6 | 	mov	COUNT_, #6
07010     B0 00 A0 FD | 	call	#pushregs_
07014     30 6D 02 F6 | 	mov	local01, arg02
07018     31 6F 02 F6 | 	mov	local02, arg03
0701c     32 71 02 F6 | 	mov	local03, arg04
07020     9C 12 B0 FD | 	call	#__system____getftab
07024     0C 73 0A F6 | 	mov	local04, result1 wz
07028     18 00 90 5D |  if_ne	jmp	#LR__0341
0702c     F9 5E 02 F6 | 	mov	arg01, abortchain
07030     0C 60 06 F6 | 	mov	arg02, #12
07034     01 62 06 F6 | 	mov	arg03, #1
07038     E6 00 A0 FD | 	call	#__longjmp
0703c     01 18 66 F6 | 	neg	result1, #1
07040     90 00 90 FD | 	jmp	#LR__0346
07044                 | LR__0341
07044     08 72 06 F1 | 	add	local04, #8
07048     39 75 0A FB | 	rdlong	local05, local04 wz
0704c     08 72 86 F1 | 	sub	local04, #8
07050     08 00 90 AD |  if_e	jmp	#LR__0342
07054     39 5F 02 F6 | 	mov	arg01, local04
07058     C0 14 B0 FD | 	call	#__system___closeraw
0705c                 | LR__0342
0705c     00 6C 0E F2 | 	cmp	local01, #0 wz
07060     48 00 90 AD |  if_e	jmp	#LR__0344
07064     04 5E 06 F6 | 	mov	arg01, #4
07068     60 0A B0 FD | 	call	#__system___gc_alloc_managed
0706c     0C 77 0A F6 | 	mov	local06, result1 wz
07070     18 00 90 5D |  if_ne	jmp	#LR__0343
07074     F9 5E 02 F6 | 	mov	arg01, abortchain
07078     07 60 06 F6 | 	mov	arg02, #7
0707c     01 62 06 F6 | 	mov	arg03, #1
07080     E6 00 A0 FD | 	call	#__longjmp
07084     01 18 66 F6 | 	neg	result1, #1
07088     48 00 90 FD | 	jmp	#LR__0346
0708c                 | LR__0343
0708c     3B 6D 62 FC | 	wrlong	local01, local06
07090     FE 60 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
07094     3B 5F 02 F6 | 	mov	arg01, local06
07098     94 FC BF FD | 	call	#__system___make_methodptr
0709c     18 72 06 F1 | 	add	local04, #24
070a0     39 19 62 FC | 	wrlong	result1, local04
070a4     18 72 86 F1 | 	sub	local04, #24
070a8     0C 00 90 FD | 	jmp	#LR__0345
070ac                 | LR__0344
070ac     18 72 06 F1 | 	add	local04, #24
070b0     39 6D 62 FC | 	wrlong	local01, local04
070b4     18 72 86 F1 | 	sub	local04, #24
070b8                 | LR__0345
070b8     08 72 06 F1 | 	add	local04, #8
070bc     39 0F 68 FC | 	wrlong	#7, local04
070c0     14 72 06 F1 | 	add	local04, #20
070c4     39 6F 62 FC | 	wrlong	local02, local04
070c8     04 72 06 F1 | 	add	local04, #4
070cc     39 71 62 FC | 	wrlong	local03, local04
070d0     00 18 06 F6 | 	mov	result1, #0
070d4                 | LR__0346
070d4     AF F0 03 F6 | 	mov	ptra, fp
070d8     BA 00 A0 FD | 	call	#popregs_
070dc                 | __system___basic_open_ret
070dc     2D 00 64 FD | 	ret
070e0                 | 
070e0                 | __system___basic_print_char
070e0     05 5A 05 F6 | 	mov	COUNT_, #5
070e4     B0 00 A0 FD | 	call	#pushregs_
070e8     30 6D 02 F6 | 	mov	local01, arg02
070ec     98 13 B0 FD | 	call	#__system___gettxfunc
070f0     0C 6F 0A F6 | 	mov	local02, result1 wz
070f4     00 18 06 A6 |  if_e	mov	result1, #0
070f8     24 00 90 AD |  if_e	jmp	#LR__0347
070fc     37 71 02 FB | 	rdlong	local03, local02
07100     04 6E 06 F1 | 	add	local02, #4
07104     37 73 02 FB | 	rdlong	local04, local02
07108     36 5F 02 F6 | 	mov	arg01, local01
0710c     FD 74 02 F6 | 	mov	local05, objptr
07110     38 FB 01 F6 | 	mov	objptr, local03
07114     2D 72 62 FD | 	call	local04
07118     3A FB 01 F6 | 	mov	objptr, local05
0711c     01 18 06 F6 | 	mov	result1, #1
07120                 | LR__0347
07120     AF F0 03 F6 | 	mov	ptra, fp
07124     BA 00 A0 FD | 	call	#popregs_
07128                 | __system___basic_print_char_ret
07128     2D 00 64 FD | 	ret
0712c                 | 
0712c                 | __system___basic_print_string
0712c     03 5A 05 F6 | 	mov	COUNT_, #3
07130     B0 00 A0 FD | 	call	#pushregs_
07134     30 6D 02 F6 | 	mov	local01, arg02
07138     31 6F 02 F6 | 	mov	local02, arg03
0713c     48 13 B0 FD | 	call	#__system___gettxfunc
07140     0C 71 0A F6 | 	mov	local03, result1 wz
07144     00 18 06 A6 |  if_e	mov	result1, #0
07148     1C 00 90 AD |  if_e	jmp	#LR__0348
0714c     00 6C 0E F2 | 	cmp	local01, #0 wz
07150     00 18 06 A6 |  if_e	mov	result1, #0
07154     10 00 90 AD |  if_e	jmp	#LR__0348
07158     37 61 02 F6 | 	mov	arg02, local02
0715c     36 63 02 F6 | 	mov	arg03, local01
07160     38 5F 02 F6 | 	mov	arg01, local03
07164     B0 00 B0 FD | 	call	#__system___fmtstr
07168                 | LR__0348
07168     AF F0 03 F6 | 	mov	ptra, fp
0716c     BA 00 A0 FD | 	call	#popregs_
07170                 | __system___basic_print_string_ret
07170     2D 00 64 FD | 	ret
07174                 | 
07174                 | __system___basic_print_integer
07174     04 5A 05 F6 | 	mov	COUNT_, #4
07178     B0 00 A0 FD | 	call	#pushregs_
0717c     30 6D 02 F6 | 	mov	local01, arg02
07180     31 6F 02 F6 | 	mov	local02, arg03
07184     32 71 02 F6 | 	mov	local03, arg04
07188     FC 12 B0 FD | 	call	#__system___gettxfunc
0718c     0C 73 0A F6 | 	mov	local04, result1 wz
07190     00 18 06 A6 |  if_e	mov	result1, #0
07194     14 00 90 AD |  if_e	jmp	#LR__0349
07198     37 61 02 F6 | 	mov	arg02, local02
0719c     36 63 02 F6 | 	mov	arg03, local01
071a0     38 65 02 F6 | 	mov	arg04, local03
071a4     39 5F 02 F6 | 	mov	arg01, local04
071a8     64 01 B0 FD | 	call	#__system___fmtnum
071ac                 | LR__0349
071ac     AF F0 03 F6 | 	mov	ptra, fp
071b0     BA 00 A0 FD | 	call	#popregs_
071b4                 | __system___basic_print_integer_ret
071b4     2D 00 64 FD | 	ret
071b8                 | 
071b8                 | __system___fmtchar
071b8     00 5A 05 F6 | 	mov	COUNT_, #0
071bc     B0 00 A0 FD | 	call	#pushregs_
071c0     14 F0 07 F1 | 	add	ptra, #20
071c4     04 5E 05 F1 | 	add	fp, #4
071c8     AF 5E 62 FC | 	wrlong	arg01, fp
071cc     04 5E 05 F1 | 	add	fp, #4
071d0     AF 60 62 FC | 	wrlong	arg02, fp
071d4     04 5E 05 F1 | 	add	fp, #4
071d8     AF 62 62 FC | 	wrlong	arg03, fp
071dc     04 5E 05 F1 | 	add	fp, #4
071e0     AF 62 42 FC | 	wrbyte	arg03, fp
071e4     01 5E 05 F1 | 	add	fp, #1
071e8     AF 00 48 FC | 	wrbyte	#0, fp
071ec     0D 5E 85 F1 | 	sub	fp, #13
071f0     AF 5E 02 FB | 	rdlong	arg01, fp
071f4     04 5E 05 F1 | 	add	fp, #4
071f8     AF 60 02 FB | 	rdlong	arg02, fp
071fc     08 5E 05 F1 | 	add	fp, #8
07200     AF 62 02 F6 | 	mov	arg03, fp
07204     10 5E 85 F1 | 	sub	fp, #16
07208     0C 00 B0 FD | 	call	#__system___fmtstr
0720c     AF F0 03 F6 | 	mov	ptra, fp
07210     BA 00 A0 FD | 	call	#popregs_
07214                 | __system___fmtchar_ret
07214     2D 00 64 FD | 	ret
07218                 | 
07218                 | __system___fmtstr
07218     0E 5A 05 F6 | 	mov	COUNT_, #14
0721c     B0 00 A0 FD | 	call	#pushregs_
07220     2F 6D 02 F6 | 	mov	local01, arg01
07224     30 6F 02 F6 | 	mov	local02, arg02
07228     31 71 02 F6 | 	mov	local03, arg03
0722c     37 73 02 F6 | 	mov	local04, local02
07230     FF 72 06 F5 | 	and	local04, #255
07234     38 5F 02 F6 | 	mov	arg01, local03
07238     00 74 06 F6 | 	mov	local05, #0
0723c     D0 8D 9F FE | 	loc	pa,	#(@LR__0351-@LR__0350)
07240     93 00 A0 FD | 	call	#FCACHE_LOAD_
07244                 | LR__0350
07244     2F 77 CA FA | 	rdbyte	local06, arg01 wz
07248     01 74 06 51 |  if_ne	add	local05, #1
0724c     01 5E 06 51 |  if_ne	add	arg01, #1
07250     F0 FF 9F 5D |  if_ne	jmp	#LR__0350
07254                 | LR__0351
07254     3A 19 02 F6 | 	mov	result1, local05
07258     0C 79 02 F6 | 	mov	local07, result1
0725c     00 72 0E F2 | 	cmp	local04, #0 wz
07260     04 00 90 AD |  if_e	jmp	#LR__0352
07264     39 79 7A F3 | 	fles	local07, local04 wcz
07268                 | LR__0352
07268     37 61 02 F6 | 	mov	arg02, local02
0726c     3C 63 02 F6 | 	mov	arg03, local07
07270     36 5F 02 F6 | 	mov	arg01, local01
07274     02 64 06 F6 | 	mov	arg04, #2
07278     BC 10 B0 FD | 	call	#__system___fmtpad
0727c     0C 7B 02 F6 | 	mov	local08, result1
07280     00 7A 5E F2 | 	cmps	local08, #0 wcz
07284     3D 19 02 C6 |  if_b	mov	result1, local08
07288     78 00 90 CD |  if_b	jmp	#LR__0355
0728c     00 7C 06 F6 | 	mov	local09, #0
07290                 | LR__0353
07290     3C 7D 5A F2 | 	cmps	local09, local07 wcz
07294     44 00 90 3D |  if_ae	jmp	#LR__0354
07298     36 7F 02 F6 | 	mov	local10, local01
0729c     3F 81 02 FB | 	rdlong	local11, local10
072a0     04 7E 06 F1 | 	add	local10, #4
072a4     3F 83 02 FB | 	rdlong	local12, local10
072a8     38 5F C2 FA | 	rdbyte	arg01, local03
072ac     FD 84 02 F6 | 	mov	local13, objptr
072b0     40 FB 01 F6 | 	mov	objptr, local11
072b4     01 70 06 F1 | 	add	local03, #1
072b8     2D 82 62 FD | 	call	local12
072bc     42 FB 01 F6 | 	mov	objptr, local13
072c0     0C 87 02 F6 | 	mov	local14, result1
072c4     00 86 5E F2 | 	cmps	local14, #0 wcz
072c8     43 19 02 C6 |  if_b	mov	result1, local14
072cc     34 00 90 CD |  if_b	jmp	#LR__0355
072d0     43 7B 02 F1 | 	add	local08, local14
072d4     01 7C 06 F1 | 	add	local09, #1
072d8     B4 FF 9F FD | 	jmp	#LR__0353
072dc                 | LR__0354
072dc     37 61 02 F6 | 	mov	arg02, local02
072e0     3C 63 02 F6 | 	mov	arg03, local07
072e4     36 5F 02 F6 | 	mov	arg01, local01
072e8     01 64 06 F6 | 	mov	arg04, #1
072ec     48 10 B0 FD | 	call	#__system___fmtpad
072f0     0C 87 02 F6 | 	mov	local14, result1
072f4     00 86 5E F2 | 	cmps	local14, #0 wcz
072f8     43 19 02 C6 |  if_b	mov	result1, local14
072fc     43 7B 02 31 |  if_ae	add	local08, local14
07300     3D 19 02 36 |  if_ae	mov	result1, local08
07304                 | LR__0355
07304     AF F0 03 F6 | 	mov	ptra, fp
07308     BA 00 A0 FD | 	call	#popregs_
0730c                 | __system___fmtstr_ret
0730c     2D 00 64 FD | 	ret
07310                 | 
07310                 | __system___fmtnum
07310     06 5A 05 F6 | 	mov	COUNT_, #6
07314     B0 00 A0 FD | 	call	#pushregs_
07318     70 F0 07 F1 | 	add	ptra, #112
0731c     04 5E 05 F1 | 	add	fp, #4
07320     AF 5E 62 FC | 	wrlong	arg01, fp
07324     04 5E 05 F1 | 	add	fp, #4
07328     AF 60 62 FC | 	wrlong	arg02, fp
0732c     04 5E 05 F1 | 	add	fp, #4
07330     AF 62 62 FC | 	wrlong	arg03, fp
07334     04 5E 05 F1 | 	add	fp, #4
07338     AF 64 62 FC | 	wrlong	arg04, fp
0733c     04 5E 05 F1 | 	add	fp, #4
07340     AF 6C 02 F6 | 	mov	local01, fp
07344     44 5E 05 F1 | 	add	fp, #68
07348     AF 6C 62 FC | 	wrlong	local01, fp
0734c     04 5E 05 F1 | 	add	fp, #4
07350     AF 00 68 FC | 	wrlong	#0, fp
07354     54 5E 85 F1 | 	sub	fp, #84
07358     AF 6C 02 FB | 	rdlong	local01, fp
0735c     10 6C 46 F0 | 	shr	local01, #16
07360     3F 6C 06 F5 | 	and	local01, #63
07364     58 5E 05 F1 | 	add	fp, #88
07368     AF 6C 62 FC | 	wrlong	local01, fp
0736c     58 5E 85 F1 | 	sub	fp, #88
07370     AF 6C 02 FB | 	rdlong	local01, fp
07374     FF 6C 06 F5 | 	and	local01, #255
07378     5C 5E 05 F1 | 	add	fp, #92
0737c     AF 6C 62 FC | 	wrlong	local01, fp
07380     5C 5E 85 F1 | 	sub	fp, #92
07384     AF 6C 02 FB | 	rdlong	local01, fp
07388     1A 6C 46 F0 | 	shr	local01, #26
0738c     03 6C 06 F5 | 	and	local01, #3
07390     60 5E 05 F1 | 	add	fp, #96
07394     AF 6C 62 FC | 	wrlong	local01, fp
07398     08 5E 85 F1 | 	sub	fp, #8
0739c     AF 6C 02 FB | 	rdlong	local01, fp
073a0     60 5E 85 F1 | 	sub	fp, #96
073a4     00 6C 5E F2 | 	cmps	local01, #0 wcz
073a8     14 00 90 ED |  if_be	jmp	#LR__0356
073ac     60 5E 05 F1 | 	add	fp, #96
073b0     AF 6C 02 FB | 	rdlong	local01, fp
073b4     01 6C 86 F1 | 	sub	local01, #1
073b8     AF 6C 62 FC | 	wrlong	local01, fp
073bc     60 5E 85 F1 | 	sub	fp, #96
073c0                 | LR__0356
073c0     64 5E 05 F1 | 	add	fp, #100
073c4     AF 6C 02 FB | 	rdlong	local01, fp
073c8     64 5E 85 F1 | 	sub	fp, #100
073cc     40 6C 5E F2 | 	cmps	local01, #64 wcz
073d0     14 00 90 1D |  if_a	jmp	#LR__0357
073d4     64 5E 05 F1 | 	add	fp, #100
073d8     AF 6E 02 FB | 	rdlong	local02, fp
073dc     64 5E 85 F1 | 	sub	fp, #100
073e0     37 71 0A F6 | 	mov	local03, local02 wz
073e4     0C 00 90 5D |  if_ne	jmp	#LR__0358
073e8                 | LR__0357
073e8     64 5E 05 F1 | 	add	fp, #100
073ec     AF 80 68 FC | 	wrlong	#64, fp
073f0     64 5E 85 F1 | 	sub	fp, #100
073f4                 | LR__0358
073f4     68 5E 05 F1 | 	add	fp, #104
073f8     AF 6C 02 FB | 	rdlong	local01, fp
073fc     68 5E 85 F1 | 	sub	fp, #104
07400     03 6C 0E F2 | 	cmp	local01, #3 wz
07404     10 00 90 5D |  if_ne	jmp	#LR__0359
07408     68 5E 05 F1 | 	add	fp, #104
0740c     AF 00 68 FC | 	wrlong	#0, fp
07410     68 5E 85 F1 | 	sub	fp, #104
07414     30 00 90 FD | 	jmp	#LR__0361
07418                 | LR__0359
07418     0C 5E 05 F1 | 	add	fp, #12
0741c     AF 6C 02 FB | 	rdlong	local01, fp
07420     0C 5E 85 F1 | 	sub	fp, #12
07424     00 6C 5E F2 | 	cmps	local01, #0 wcz
07428     1C 00 90 3D |  if_ae	jmp	#LR__0360
0742c     68 5E 05 F1 | 	add	fp, #104
07430     AF 08 68 FC | 	wrlong	#4, fp
07434     5C 5E 85 F1 | 	sub	fp, #92
07438     AF 6C 02 FB | 	rdlong	local01, fp
0743c     36 6D 62 F6 | 	neg	local01, local01
07440     AF 6C 62 FC | 	wrlong	local01, fp
07444     0C 5E 85 F1 | 	sub	fp, #12
07448                 | LR__0360
07448                 | LR__0361
07448     68 5E 05 F1 | 	add	fp, #104
0744c     AF 6C 0A FB | 	rdlong	local01, fp wz
07450     68 5E 85 F1 | 	sub	fp, #104
07454     EC 00 90 AD |  if_e	jmp	#LR__0368
07458     5C 5E 05 F1 | 	add	fp, #92
0745c     AF 70 02 FB | 	rdlong	local03, fp
07460     01 70 06 F1 | 	add	local03, #1
07464     AF 70 62 FC | 	wrlong	local03, fp
07468     04 5E 05 F1 | 	add	fp, #4
0746c     AF 6C 02 FB | 	rdlong	local01, fp
07470     04 5E 05 F1 | 	add	fp, #4
07474     AF 70 02 FB | 	rdlong	local03, fp
07478     64 5E 85 F1 | 	sub	fp, #100
0747c     38 6D 0A F2 | 	cmp	local01, local03 wz
07480     3C 00 90 5D |  if_ne	jmp	#LR__0363
07484     60 5E 05 F1 | 	add	fp, #96
07488     AF 70 02 FB | 	rdlong	local03, fp
0748c     01 70 86 F1 | 	sub	local03, #1
07490     AF 70 62 FC | 	wrlong	local03, fp
07494     AF 6C 0A FB | 	rdlong	local01, fp wz
07498     60 5E 85 F1 | 	sub	fp, #96
0749c     20 00 90 5D |  if_ne	jmp	#LR__0362
074a0     04 5E 05 F1 | 	add	fp, #4
074a4     AF 5E 02 FB | 	rdlong	arg01, fp
074a8     04 5E 05 F1 | 	add	fp, #4
074ac     AF 60 02 FB | 	rdlong	arg02, fp
074b0     08 5E 85 F1 | 	sub	fp, #8
074b4     23 62 06 F6 | 	mov	arg03, #35
074b8     FC FC BF FD | 	call	#__system___fmtchar
074bc     70 01 90 FD | 	jmp	#LR__0373
074c0                 | LR__0362
074c0                 | LR__0363
074c0     68 5E 05 F1 | 	add	fp, #104
074c4     AF 6C 02 FB | 	rdlong	local01, fp
074c8     68 5E 85 F1 | 	sub	fp, #104
074cc     02 6C 0E F2 | 	cmp	local01, #2 wz
074d0     20 00 90 5D |  if_ne	jmp	#LR__0364
074d4     58 5E 05 F1 | 	add	fp, #88
074d8     AF 6C 02 FB | 	rdlong	local01, fp
074dc     36 71 02 F6 | 	mov	local03, local01
074e0     01 70 06 F1 | 	add	local03, #1
074e4     AF 70 62 FC | 	wrlong	local03, fp
074e8     58 5E 85 F1 | 	sub	fp, #88
074ec     36 41 48 FC | 	wrbyte	#32, local01
074f0     50 00 90 FD | 	jmp	#LR__0367
074f4                 | LR__0364
074f4     68 5E 05 F1 | 	add	fp, #104
074f8     AF 6C 02 FB | 	rdlong	local01, fp
074fc     68 5E 85 F1 | 	sub	fp, #104
07500     04 6C 0E F2 | 	cmp	local01, #4 wz
07504     20 00 90 5D |  if_ne	jmp	#LR__0365
07508     58 5E 05 F1 | 	add	fp, #88
0750c     AF 6C 02 FB | 	rdlong	local01, fp
07510     36 71 02 F6 | 	mov	local03, local01
07514     01 70 06 F1 | 	add	local03, #1
07518     AF 70 62 FC | 	wrlong	local03, fp
0751c     58 5E 85 F1 | 	sub	fp, #88
07520     36 5B 48 FC | 	wrbyte	#45, local01
07524     1C 00 90 FD | 	jmp	#LR__0366
07528                 | LR__0365
07528     58 5E 05 F1 | 	add	fp, #88
0752c     AF 6C 02 FB | 	rdlong	local01, fp
07530     36 71 02 F6 | 	mov	local03, local01
07534     01 70 06 F1 | 	add	local03, #1
07538     AF 70 62 FC | 	wrlong	local03, fp
0753c     58 5E 85 F1 | 	sub	fp, #88
07540     36 57 48 FC | 	wrbyte	#43, local01
07544                 | LR__0366
07544                 | LR__0367
07544                 | LR__0368
07544     58 5E 05 F1 | 	add	fp, #88
07548     AF 5E 02 FB | 	rdlong	arg01, fp
0754c     4C 5E 85 F1 | 	sub	fp, #76
07550     AF 60 02 FB | 	rdlong	arg02, fp
07554     04 5E 05 F1 | 	add	fp, #4
07558     AF 62 02 FB | 	rdlong	arg03, fp
0755c     50 5E 05 F1 | 	add	fp, #80
07560     AF 64 02 FB | 	rdlong	arg04, fp
07564     00 72 06 F6 | 	mov	local04, #0
07568     58 5E 85 F1 | 	sub	fp, #88
0756c     AF 74 02 FB | 	rdlong	local05, fp
07570     08 5E 85 F1 | 	sub	fp, #8
07574     1D 74 2E F4 | 	testbn	local05, #29 wz
07578     01 72 06 56 |  if_ne	mov	local04, #1
0757c     39 67 02 F6 | 	mov	arg05, local04
07580     78 0E B0 FD | 	call	#__system___uitoa
07584     0C 77 02 F6 | 	mov	local06, result1
07588     5C 5E 05 F1 | 	add	fp, #92
0758c     AF 6C 02 FB | 	rdlong	local01, fp
07590     3B 6D 02 F1 | 	add	local01, local06
07594     AF 6C 62 FC | 	wrlong	local01, fp
07598     08 5E 05 F1 | 	add	fp, #8
0759c     AF 70 02 FB | 	rdlong	local03, fp
075a0     64 5E 85 F1 | 	sub	fp, #100
075a4     38 6D 5A F2 | 	cmps	local01, local03 wcz
075a8     64 00 90 ED |  if_be	jmp	#LR__0372
075ac     90 8A 9F FE | 	loc	pa,	#(@LR__0370-@LR__0369)
075b0     93 00 A0 FD | 	call	#FCACHE_LOAD_
075b4                 | LR__0369
075b4     64 5E 05 F1 | 	add	fp, #100
075b8     AF 6C 02 FB | 	rdlong	local01, fp
075bc     36 71 02 F6 | 	mov	local03, local01
075c0     01 70 86 F1 | 	sub	local03, #1
075c4     AF 70 62 FC | 	wrlong	local03, fp
075c8     64 5E 85 F1 | 	sub	fp, #100
075cc     00 6C 5E F2 | 	cmps	local01, #0 wcz
075d0     20 00 90 ED |  if_be	jmp	#LR__0371
075d4     58 5E 05 F1 | 	add	fp, #88
075d8     AF 6C 02 FB | 	rdlong	local01, fp
075dc     36 71 02 F6 | 	mov	local03, local01
075e0     01 70 06 F1 | 	add	local03, #1
075e4     AF 70 62 FC | 	wrlong	local03, fp
075e8     58 5E 85 F1 | 	sub	fp, #88
075ec     36 47 48 FC | 	wrbyte	#35, local01
075f0     C0 FF 9F FD | 	jmp	#LR__0369
075f4                 | LR__0370
075f4                 | LR__0371
075f4     58 5E 05 F1 | 	add	fp, #88
075f8     AF 6C 02 FB | 	rdlong	local01, fp
075fc     36 71 02 F6 | 	mov	local03, local01
07600     01 70 06 F1 | 	add	local03, #1
07604     AF 70 62 FC | 	wrlong	local03, fp
07608     58 5E 85 F1 | 	sub	fp, #88
0760c     36 01 48 FC | 	wrbyte	#0, local01
07610                 | LR__0372
07610     04 5E 05 F1 | 	add	fp, #4
07614     AF 5E 02 FB | 	rdlong	arg01, fp
07618     04 5E 05 F1 | 	add	fp, #4
0761c     AF 60 02 FB | 	rdlong	arg02, fp
07620     0C 5E 05 F1 | 	add	fp, #12
07624     AF 62 02 F6 | 	mov	arg03, fp
07628     14 5E 85 F1 | 	sub	fp, #20
0762c     E8 FB BF FD | 	call	#__system___fmtstr
07630                 | LR__0373
07630     AF F0 03 F6 | 	mov	ptra, fp
07634     BA 00 A0 FD | 	call	#popregs_
07638                 | __system___fmtnum_ret
07638     2D 00 64 FD | 	ret
0763c                 | 
0763c                 | __system__Chr_S
0763c     02 5A 05 F6 | 	mov	COUNT_, #2
07640     B0 00 A0 FD | 	call	#pushregs_
07644     2F 6D 02 F6 | 	mov	local01, arg01
07648     03 5E 06 F6 | 	mov	arg01, #3
0764c     7C 04 B0 FD | 	call	#__system___gc_alloc_managed
07650     0C 6F 0A F6 | 	mov	local02, result1 wz
07654     10 00 90 AD |  if_e	jmp	#LR__0374
07658     37 6D 42 FC | 	wrbyte	local01, local02
0765c     01 6E 06 F1 | 	add	local02, #1
07660     37 01 48 FC | 	wrbyte	#0, local02
07664     01 6E 86 F1 | 	sub	local02, #1
07668                 | LR__0374
07668     37 19 02 F6 | 	mov	result1, local02
0766c     AF F0 03 F6 | 	mov	ptra, fp
07670     BA 00 A0 FD | 	call	#popregs_
07674                 | __system__Chr_S_ret
07674     2D 00 64 FD | 	ret
07678                 | 
07678                 | __system__Number_S
07678     09 5A 05 F6 | 	mov	COUNT_, #9
0767c     B0 00 A0 FD | 	call	#pushregs_
07680     2F 6D 02 F6 | 	mov	local01, arg01
07684     30 6F 0A F6 | 	mov	local02, arg02 wz
07688     31 71 02 F6 | 	mov	local03, arg03
0768c     40 00 90 5D |  if_ne	jmp	#LR__0377
07690     01 6E 06 F6 | 	mov	local02, #1
07694     38 73 02 F6 | 	mov	local04, local03
07698     01 74 06 F6 | 	mov	local05, #1
0769c                 | LR__0375
0769c     00 76 06 F6 | 	mov	local06, #0
076a0     36 73 1A F2 | 	cmp	local04, local01 wcz
076a4     01 76 66 E6 |  if_be	neg	local06, #1
076a8     00 78 06 F6 | 	mov	local07, #0
076ac     39 75 1A F2 | 	cmp	local05, local04 wcz
076b0     01 78 66 C6 |  if_b	neg	local07, #1
076b4     3C 77 CA F7 | 	test	local06, local07 wz
076b8     14 00 90 AD |  if_e	jmp	#LR__0376
076bc     39 75 02 F6 | 	mov	local05, local04
076c0     38 73 02 FD | 	qmul	local04, local03
076c4     18 72 62 FD | 	getqx	local04
076c8     01 6E 06 F1 | 	add	local02, #1
076cc     CC FF 9F FD | 	jmp	#LR__0375
076d0                 | LR__0376
076d0                 | LR__0377
076d0     20 6E 3E F3 | 	fle	local02, #32 wcz
076d4     37 5F 02 F6 | 	mov	arg01, local02
076d8     02 5E 06 F1 | 	add	arg01, #2
076dc     EC 03 B0 FD | 	call	#__system___gc_alloc_managed
076e0     0C 7B 02 F6 | 	mov	local08, result1
076e4     37 79 02 F6 | 	mov	local07, local02
076e8     3D 79 02 F1 | 	add	local07, local08
076ec     3C 01 48 FC | 	wrbyte	#0, local07
076f0     48 89 9F FE | 	loc	pa,	#(@LR__0379-@LR__0378)
076f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
076f8                 | LR__0378
076f8     00 6E 1E F2 | 	cmp	local02, #0 wcz
076fc     34 00 90 ED |  if_be	jmp	#LR__0380
07700     01 6E 86 F1 | 	sub	local02, #1
07704     36 99 02 F6 | 	mov	muldiva_, local01
07708     38 9B 02 F6 | 	mov	muldivb_, local03
0770c     C2 00 A0 FD | 	call	#unsdivide_
07710     4C 7D 02 F6 | 	mov	local09, muldiva_
07714     4D 6D 02 F6 | 	mov	local01, muldivb_
07718     0A 7C 1E F2 | 	cmp	local09, #10 wcz
0771c     30 7C 06 C1 |  if_b	add	local09, #48
07720     37 7C 06 31 |  if_ae	add	local09, #55
07724     37 79 02 F6 | 	mov	local07, local02
07728     3D 79 02 F1 | 	add	local07, local08
0772c     3C 7D 42 FC | 	wrbyte	local09, local07
07730     C4 FF 9F FD | 	jmp	#LR__0378
07734                 | LR__0379
07734                 | LR__0380
07734     3D 19 02 F6 | 	mov	result1, local08
07738     AF F0 03 F6 | 	mov	ptra, fp
0773c     BA 00 A0 FD | 	call	#popregs_
07740                 | __system__Number_S_ret
07740     2D 00 64 FD | 	ret
07744                 | 
07744                 | __system__String_S
07744     05 5A 05 F6 | 	mov	COUNT_, #5
07748     B0 00 A0 FD | 	call	#pushregs_
0774c     2F 6D 02 F6 | 	mov	local01, arg01
07750     30 6F 02 F6 | 	mov	local02, arg02
07754     37 5F 02 F6 | 	mov	arg01, local02
07758     00 70 06 F6 | 	mov	local03, #0
0775c     B0 88 9F FE | 	loc	pa,	#(@LR__0382-@LR__0381)
07760     93 00 A0 FD | 	call	#FCACHE_LOAD_
07764                 | LR__0381
07764     2F 73 CA FA | 	rdbyte	local04, arg01 wz
07768     01 70 06 51 |  if_ne	add	local03, #1
0776c     01 5E 06 51 |  if_ne	add	arg01, #1
07770     F0 FF 9F 5D |  if_ne	jmp	#LR__0381
07774                 | LR__0382
07774     38 19 0A F6 | 	mov	result1, local03 wz
07778     47 00 00 AF 
0777c     F6 19 06 A6 |  if_e	mov	result1, ##@LR__0499
07780     4C 00 90 AD |  if_e	jmp	#LR__0384
07784     00 6C 5E F2 | 	cmps	local01, #0 wcz
07788     47 00 00 EF 
0778c     F7 19 06 E6 |  if_be	mov	result1, ##@LR__0500
07790     3C 00 90 ED |  if_be	jmp	#LR__0384
07794     36 5F 02 F6 | 	mov	arg01, local01
07798     02 5E 06 F1 | 	add	arg01, #2
0779c     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
077a0     0C 75 0A F6 | 	mov	local05, result1 wz
077a4     24 00 90 AD |  if_e	jmp	#LR__0383
077a8     37 61 C2 FA | 	rdbyte	arg02, local02
077ac     3A 5F 02 F6 | 	mov	arg01, local05
077b0     36 63 02 F6 | 	mov	arg03, local01
077b4     A0 00 A0 FD | 	call	#\builtin_bytefill_
077b8     01 6C 06 F1 | 	add	local01, #1
077bc     3A 6D 02 F1 | 	add	local01, local05
077c0     36 01 48 FC | 	wrbyte	#0, local01
077c4     3A 19 02 F6 | 	mov	result1, local05
077c8     04 00 90 FD | 	jmp	#LR__0384
077cc                 | LR__0383
077cc     3A 19 02 F6 | 	mov	result1, local05
077d0                 | LR__0384
077d0     AF F0 03 F6 | 	mov	ptra, fp
077d4     BA 00 A0 FD | 	call	#popregs_
077d8                 | __system__String_S_ret
077d8     2D 00 64 FD | 	ret
077dc                 | 
077dc                 | __system___gc_ptrs
077dc     04 5A 05 F6 | 	mov	COUNT_, #4
077e0     B0 00 A0 FD | 	call	#pushregs_
077e4     F8 6C 02 F6 | 	mov	local01, __heap_ptr
077e8     36 6F 02 F6 | 	mov	local02, local01
077ec     07 00 00 FF 
077f0     F8 6F 06 F1 | 	add	local02, ##4088
077f4     36 71 0A FB | 	rdlong	local03, local01 wz
077f8     74 00 90 5D |  if_ne	jmp	#LR__0385
077fc     37 73 02 F6 | 	mov	local04, local02
07800     36 73 82 F1 | 	sub	local04, local01
07804     36 03 58 FC | 	wrword	#1, local01
07808     36 71 02 F6 | 	mov	local03, local01
0780c     02 70 06 F1 | 	add	local03, #2
07810     36 00 80 FF 
07814     38 21 59 FC | 	wrword	##27792, local03
07818     36 71 02 F6 | 	mov	local03, local01
0781c     04 70 06 F1 | 	add	local03, #4
07820     38 01 58 FC | 	wrword	#0, local03
07824     36 71 02 F6 | 	mov	local03, local01
07828     06 70 06 F1 | 	add	local03, #6
0782c     38 03 58 FC | 	wrword	#1, local03
07830     10 6C 06 F1 | 	add	local01, #16
07834     39 71 52 F6 | 	abs	local03, local04 wc
07838     04 70 46 F0 | 	shr	local03, #4
0783c     38 71 62 C6 |  if_b	neg	local03, local03
07840     36 71 52 FC | 	wrword	local03, local01
07844     36 71 02 F6 | 	mov	local03, local01
07848     02 70 06 F1 | 	add	local03, #2
0784c     36 00 80 FF 
07850     38 1F 59 FC | 	wrword	##27791, local03
07854     36 71 02 F6 | 	mov	local03, local01
07858     04 70 06 F1 | 	add	local03, #4
0785c     38 01 58 FC | 	wrword	#0, local03
07860     36 71 02 F6 | 	mov	local03, local01
07864     06 70 06 F1 | 	add	local03, #6
07868     38 01 58 FC | 	wrword	#0, local03
0786c     10 6C 86 F1 | 	sub	local01, #16
07870                 | LR__0385
07870     37 1B 02 F6 | 	mov	result2, local02
07874     36 19 02 F6 | 	mov	result1, local01
07878     AF F0 03 F6 | 	mov	ptra, fp
0787c     BA 00 A0 FD | 	call	#popregs_
07880                 | __system___gc_ptrs_ret
07880     2D 00 64 FD | 	ret
07884                 | 
07884                 | __system___gc_nextBlockPtr
07884     02 5A 05 F6 | 	mov	COUNT_, #2
07888     B0 00 A0 FD | 	call	#pushregs_
0788c     2F 6D 02 F6 | 	mov	local01, arg01
07890     36 6F EA FA | 	rdword	local02, local01 wz
07894     10 00 90 5D |  if_ne	jmp	#LR__0386
07898     47 00 00 FF 
0789c     F8 5F 06 F6 | 	mov	arg01, ##@LR__0501
078a0     F4 01 B0 FD | 	call	#__system___gc_errmsg
078a4     0C 00 90 FD | 	jmp	#LR__0387
078a8                 | LR__0386
078a8     36 19 02 F6 | 	mov	result1, local01
078ac     04 6E 66 F0 | 	shl	local02, #4
078b0     37 19 02 F1 | 	add	result1, local02
078b4                 | LR__0387
078b4     AF F0 03 F6 | 	mov	ptra, fp
078b8     BA 00 A0 FD | 	call	#popregs_
078bc                 | __system___gc_nextBlockPtr_ret
078bc     2D 00 64 FD | 	ret
078c0                 | 
078c0                 | __system___gc_tryalloc
078c0     0D 5A 05 F6 | 	mov	COUNT_, #13
078c4     B0 00 A0 FD | 	call	#pushregs_
078c8     2F 6D 02 F6 | 	mov	local01, arg01
078cc     30 6F 02 F6 | 	mov	local02, arg02
078d0     08 FF BF FD | 	call	#__system___gc_ptrs
078d4     0C 71 02 F6 | 	mov	local03, result1
078d8     0D 73 02 F6 | 	mov	local04, result2
078dc     38 75 02 F6 | 	mov	local05, local03
078e0     00 76 06 F6 | 	mov	local06, #0
078e4     68 87 9F FE | 	loc	pa,	#(@LR__0389-@LR__0388)
078e8     93 00 A0 FD | 	call	#FCACHE_LOAD_
078ec                 | LR__0388
078ec     3A 79 02 F6 | 	mov	local07, local05
078f0     3A 7B 02 F6 | 	mov	local08, local05
078f4     06 7A 06 F1 | 	add	local08, #6
078f8     3D 7D E2 FA | 	rdword	local09, local08
078fc     38 5F 02 F6 | 	mov	arg01, local03
07900     3E 61 0A F6 | 	mov	arg02, local09 wz
07904     00 18 06 A6 |  if_e	mov	result1, #0
07908     04 60 66 50 |  if_ne	shl	arg02, #4
0790c     30 5F 02 51 |  if_ne	add	arg01, arg02
07910     2F 19 02 56 |  if_ne	mov	result1, arg01
07914     0C 7F 02 F6 | 	mov	local10, result1
07918     3F 75 0A F6 | 	mov	local05, local10 wz
0791c     3A 7F 02 56 |  if_ne	mov	local10, local05
07920     3F 77 E2 5A |  if_ne	rdword	local06, local10
07924     00 74 0E F2 | 	cmp	local05, #0 wz
07928     10 00 90 AD |  if_e	jmp	#LR__0390
0792c     39 75 5A F2 | 	cmps	local05, local04 wcz
07930     08 00 90 3D |  if_ae	jmp	#LR__0390
07934     3B 6D 5A F2 | 	cmps	local01, local06 wcz
07938     B0 FF 9F 1D |  if_a	jmp	#LR__0388
0793c                 | LR__0389
0793c                 | LR__0390
0793c     00 74 0E F2 | 	cmp	local05, #0 wz
07940     3A 19 02 A6 |  if_e	mov	result1, local05
07944     44 01 90 AD |  if_e	jmp	#LR__0393
07948     3A 7F 02 F6 | 	mov	local10, local05
0794c     06 7E 06 F1 | 	add	local10, #6
07950     3F 81 E2 FA | 	rdword	local11, local10
07954     3B 6D 5A F2 | 	cmps	local01, local06 wcz
07958     C0 00 90 3D |  if_ae	jmp	#LR__0392
0795c     3A 6D 52 FC | 	wrword	local01, local05
07960     3A 5F 02 F6 | 	mov	arg01, local05
07964     36 7D 02 F6 | 	mov	local09, local01
07968     04 7C 66 F0 | 	shl	local09, #4
0796c     3E 5F 02 F1 | 	add	arg01, local09
07970     3B 7F 02 F6 | 	mov	local10, local06
07974     36 7F 82 F1 | 	sub	local10, local01
07978     2F 7F 52 FC | 	wrword	local10, arg01
0797c     2F 7F 02 F6 | 	mov	local10, arg01
07980     02 7E 06 F1 | 	add	local10, #2
07984     36 00 80 FF 
07988     3F 1F 59 FC | 	wrword	##27791, local10
0798c     3A 61 0A F6 | 	mov	arg02, local05 wz
07990     00 18 06 A6 |  if_e	mov	result1, #0
07994     38 61 82 51 |  if_ne	sub	arg02, local03
07998     04 60 46 50 |  if_ne	shr	arg02, #4
0799c     30 19 02 56 |  if_ne	mov	result1, arg02
079a0     2F 7D 02 F6 | 	mov	local09, arg01
079a4     04 7C 06 F1 | 	add	local09, #4
079a8     3E 19 52 FC | 	wrword	result1, local09
079ac     3A 7F 02 F6 | 	mov	local10, local05
079b0     06 7E 06 F1 | 	add	local10, #6
079b4     2F 7D 02 F6 | 	mov	local09, arg01
079b8     3F 7B E2 FA | 	rdword	local08, local10
079bc     06 7C 06 F1 | 	add	local09, #6
079c0     3E 7B 52 FC | 	wrword	local08, local09
079c4     2F 83 02 F6 | 	mov	local12, arg01
079c8     41 61 0A F6 | 	mov	arg02, local12 wz
079cc     00 18 06 A6 |  if_e	mov	result1, #0
079d0     38 61 82 51 |  if_ne	sub	arg02, local03
079d4     04 60 46 50 |  if_ne	shr	arg02, #4
079d8     30 19 02 56 |  if_ne	mov	result1, arg02
079dc     0C 81 02 F6 | 	mov	local11, result1
079e0     A0 FE BF FD | 	call	#__system___gc_nextBlockPtr
079e4     0C 85 0A F6 | 	mov	local13, result1 wz
079e8     30 00 90 AD |  if_e	jmp	#LR__0391
079ec     39 85 5A F2 | 	cmps	local13, local04 wcz
079f0     28 00 90 3D |  if_ae	jmp	#LR__0391
079f4     38 5F 02 F6 | 	mov	arg01, local03
079f8     41 61 0A F6 | 	mov	arg02, local12 wz
079fc     00 18 06 A6 |  if_e	mov	result1, #0
07a00     2F 61 82 51 |  if_ne	sub	arg02, arg01
07a04     04 60 46 50 |  if_ne	shr	arg02, #4
07a08     30 19 02 56 |  if_ne	mov	result1, arg02
07a0c     0C 7F 02 F6 | 	mov	local10, result1
07a10     42 7D 02 F6 | 	mov	local09, local13
07a14     04 7C 06 F1 | 	add	local09, #4
07a18     3E 7F 52 FC | 	wrword	local10, local09
07a1c                 | LR__0391
07a1c                 | LR__0392
07a1c     06 78 06 F1 | 	add	local07, #6
07a20     3C 81 52 FC | 	wrword	local11, local07
07a24     36 00 00 FF 
07a28     80 7E 06 F6 | 	mov	local10, ##27776
07a2c     37 7F 42 F5 | 	or	local10, local02
07a30     00 18 06 F6 | 	mov	result1, #0
07a34     01 18 62 FD | 	cogid	result1
07a38     0C 7F 42 F5 | 	or	local10, result1
07a3c     3A 7B 02 F6 | 	mov	local08, local05
07a40     02 7A 06 F1 | 	add	local08, #2
07a44     3D 7F 52 FC | 	wrword	local10, local08
07a48     38 7F 02 F6 | 	mov	local10, local03
07a4c     08 7E 06 F1 | 	add	local10, #8
07a50     3A 7D 02 F6 | 	mov	local09, local05
07a54     3F 7B E2 FA | 	rdword	local08, local10
07a58     06 7C 06 F1 | 	add	local09, #6
07a5c     3E 7B 52 FC | 	wrword	local08, local09
07a60     3A 61 0A F6 | 	mov	arg02, local05 wz
07a64     00 18 06 A6 |  if_e	mov	result1, #0
07a68     38 61 82 51 |  if_ne	sub	arg02, local03
07a6c     04 60 46 50 |  if_ne	shr	arg02, #4
07a70     30 19 02 56 |  if_ne	mov	result1, arg02
07a74     08 70 06 F1 | 	add	local03, #8
07a78     38 19 52 FC | 	wrword	result1, local03
07a7c     3A 19 02 F6 | 	mov	result1, local05
07a80     08 18 06 F1 | 	add	result1, #8
07a84     00 C0 31 FF 
07a88     00 18 46 F5 | 	or	result1, ##1669332992
07a8c                 | LR__0393
07a8c     AF F0 03 F6 | 	mov	ptra, fp
07a90     BA 00 A0 FD | 	call	#popregs_
07a94                 | __system___gc_tryalloc_ret
07a94     2D 00 64 FD | 	ret
07a98                 | 
07a98                 | __system___gc_errmsg
07a98     02 5A 05 F6 | 	mov	COUNT_, #2
07a9c     B0 00 A0 FD | 	call	#pushregs_
07aa0     2F 6D 02 F6 | 	mov	local01, arg01
07aa4                 | LR__0394
07aa4     36 6F CA FA | 	rdbyte	local02, local01 wz
07aa8     01 6C 06 F1 | 	add	local01, #1
07aac     0C 00 90 AD |  if_e	jmp	#LR__0395
07ab0     37 5F 02 F6 | 	mov	arg01, local02
07ab4     A0 F3 BF FD | 	call	#__system___tx
07ab8     E8 FF 9F FD | 	jmp	#LR__0394
07abc                 | LR__0395
07abc     00 18 06 F6 | 	mov	result1, #0
07ac0     AF F0 03 F6 | 	mov	ptra, fp
07ac4     BA 00 A0 FD | 	call	#popregs_
07ac8                 | __system___gc_errmsg_ret
07ac8     2D 00 64 FD | 	ret
07acc                 | 
07acc                 | __system___gc_alloc_managed
07acc     02 5A 05 F6 | 	mov	COUNT_, #2
07ad0     B0 00 A0 FD | 	call	#pushregs_
07ad4     2F 6D 02 F6 | 	mov	local01, arg01
07ad8     00 60 06 F6 | 	mov	arg02, #0
07adc     30 00 B0 FD | 	call	#__system___gc_doalloc
07ae0     0C 6F 0A F6 | 	mov	local02, result1 wz
07ae4     18 00 90 5D |  if_ne	jmp	#LR__0396
07ae8     00 6C 5E F2 | 	cmps	local01, #0 wcz
07aec     10 00 90 ED |  if_be	jmp	#LR__0396
07af0     48 00 00 FF 
07af4     14 5E 06 F6 | 	mov	arg01, ##@LR__0502
07af8     9C FF BF FD | 	call	#__system___gc_errmsg
07afc     04 00 90 FD | 	jmp	#LR__0397
07b00                 | LR__0396
07b00     37 19 02 F6 | 	mov	result1, local02
07b04                 | LR__0397
07b04     AF F0 03 F6 | 	mov	ptra, fp
07b08     BA 00 A0 FD | 	call	#popregs_
07b0c                 | __system___gc_alloc_managed_ret
07b0c     2D 00 64 FD | 	ret
07b10                 | 
07b10                 | __system___gc_doalloc
07b10     06 5A 05 F6 | 	mov	COUNT_, #6
07b14     B0 00 A0 FD | 	call	#pushregs_
07b18     2F 6D 0A F6 | 	mov	local01, arg01 wz
07b1c     30 6F 02 F6 | 	mov	local02, arg02
07b20     00 18 06 A6 |  if_e	mov	result1, #0
07b24     94 00 90 AD |  if_e	jmp	#LR__0405
07b28     17 6C 06 F1 | 	add	local01, #23
07b2c     0F 6C 26 F5 | 	andn	local01, #15
07b30     04 6C 46 F0 | 	shr	local01, #4
07b34     14 00 06 F1 | 	add	ptr___system__dat__, #20
07b38     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
07b3c     14 00 86 F1 | 	sub	ptr___system__dat__, #20
07b40     2C F2 BF FD | 	call	#__system___lockmem
07b44     36 5F 02 F6 | 	mov	arg01, local01
07b48     37 61 02 F6 | 	mov	arg02, local02
07b4c     70 FD BF FD | 	call	#__system___gc_tryalloc
07b50     0C 71 0A F6 | 	mov	local03, result1 wz
07b54     14 00 90 5D |  if_ne	jmp	#LR__0398
07b58     24 03 B0 FD | 	call	#__system___gc_docollect
07b5c     36 5F 02 F6 | 	mov	arg01, local01
07b60     37 61 02 F6 | 	mov	arg02, local02
07b64     58 FD BF FD | 	call	#__system___gc_tryalloc
07b68     0C 71 02 F6 | 	mov	local03, result1
07b6c                 | LR__0398
07b6c     14 00 06 F1 | 	add	ptr___system__dat__, #20
07b70     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
07b74     14 00 86 F1 | 	sub	ptr___system__dat__, #20
07b78     2F 01 68 FC | 	wrlong	#0, arg01
07b7c     00 70 0E F2 | 	cmp	local03, #0 wz
07b80     34 00 90 AD |  if_e	jmp	#LR__0404
07b84     04 6C 66 F0 | 	shl	local01, #4
07b88     08 6C 86 F1 | 	sub	local01, #8
07b8c     36 73 52 F6 | 	abs	local04, local01 wc
07b90     02 72 46 F0 | 	shr	local04, #2
07b94     39 73 62 C6 |  if_b	neg	local04, local04
07b98     39 75 0A F6 | 	mov	local05, local04 wz
07b9c     38 77 02 F6 | 	mov	local06, local03
07ba0     14 00 90 AD |  if_e	jmp	#LR__0403
07ba4     64 84 9F FE | 	loc	pa,	#(@LR__0401-@LR__0399)
07ba8     93 00 A0 FD | 	call	#FCACHE_LOAD_
07bac                 | LR__0399
07bac     3A 05 D8 FC | 	rep	@LR__0402, local05
07bb0                 | LR__0400
07bb0     3B 01 68 FC | 	wrlong	#0, local06
07bb4     04 76 06 F1 | 	add	local06, #4
07bb8                 | LR__0401
07bb8                 | LR__0402
07bb8                 | LR__0403
07bb8                 | LR__0404
07bb8     38 19 02 F6 | 	mov	result1, local03
07bbc                 | LR__0405
07bbc     AF F0 03 F6 | 	mov	ptra, fp
07bc0     BA 00 A0 FD | 	call	#popregs_
07bc4                 | __system___gc_doalloc_ret
07bc4     2D 00 64 FD | 	ret
07bc8                 | 
07bc8                 | __system___gc_isvalidptr
07bc8     31 1F 02 F6 | 	mov	_var01, arg03
07bcc     0F 21 02 F6 | 	mov	_var02, _var01
07bd0     00 F8 7F FF 
07bd4     00 20 06 F5 | 	and	_var02, ##-1048576
07bd8     00 C0 31 FF 
07bdc     00 20 0E F2 | 	cmp	_var02, ##1669332992 wz
07be0     00 18 06 56 |  if_ne	mov	result1, #0
07be4     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
07be8     08 1E 86 F1 | 	sub	_var01, #8
07bec     00 F8 7F FF 
07bf0     00 1E 26 F5 | 	andn	_var01, ##-1048576
07bf4     2F 1F 5A F2 | 	cmps	_var01, arg01 wcz
07bf8     08 00 90 CD |  if_b	jmp	#LR__0406
07bfc     30 1F 5A F2 | 	cmps	_var01, arg02 wcz
07c00     08 00 90 CD |  if_b	jmp	#LR__0407
07c04                 | LR__0406
07c04     00 18 06 F6 | 	mov	result1, #0
07c08     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
07c0c                 | LR__0407
07c0c     0F 21 02 F6 | 	mov	_var02, _var01
07c10     2F 21 62 F5 | 	xor	_var02, arg01
07c14     0F 20 0E F5 | 	and	_var02, #15 wz
07c18     00 18 06 56 |  if_ne	mov	result1, #0
07c1c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
07c20     0F 21 02 F6 | 	mov	_var02, _var01
07c24     02 20 06 F1 | 	add	_var02, #2
07c28     10 21 E2 FA | 	rdword	_var02, _var02
07c2c     7F 00 00 FF 
07c30     C0 21 06 F5 | 	and	_var02, ##65472
07c34     36 00 00 FF 
07c38     80 20 0E F2 | 	cmp	_var02, ##27776 wz
07c3c     00 18 06 56 |  if_ne	mov	result1, #0
07c40     0F 19 02 A6 |  if_e	mov	result1, _var01
07c44                 | __system___gc_isvalidptr_ret
07c44     2D 00 64 FD | 	ret
07c48                 | 
07c48                 | __system___gc_dofree
07c48     0D 5A 05 F6 | 	mov	COUNT_, #13
07c4c     B0 00 A0 FD | 	call	#pushregs_
07c50     2F 6D 02 F6 | 	mov	local01, arg01
07c54     84 FB BF FD | 	call	#__system___gc_ptrs
07c58     0C 6F 02 F6 | 	mov	local02, result1
07c5c     0D 71 02 F6 | 	mov	local03, result2
07c60     36 73 02 F6 | 	mov	local04, local01
07c64     02 72 06 F1 | 	add	local04, #2
07c68     36 00 80 FF 
07c6c     39 1F 59 FC | 	wrword	##27791, local04
07c70     36 75 02 F6 | 	mov	local05, local01
07c74     36 5F 02 F6 | 	mov	arg01, local01
07c78     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
07c7c     0C 77 02 F6 | 	mov	local06, result1
07c80     C8 83 9F FE | 	loc	pa,	#(@LR__0409-@LR__0408)
07c84     93 00 A0 FD | 	call	#FCACHE_LOAD_
07c88                 | LR__0408
07c88     04 74 06 F1 | 	add	local05, #4
07c8c     3A 61 EA FA | 	rdword	arg02, local05 wz
07c90     37 5F 02 F6 | 	mov	arg01, local02
07c94     00 18 06 A6 |  if_e	mov	result1, #0
07c98     04 60 66 50 |  if_ne	shl	arg02, #4
07c9c     30 5F 02 51 |  if_ne	add	arg01, arg02
07ca0     2F 19 02 56 |  if_ne	mov	result1, arg01
07ca4     0C 75 0A F6 | 	mov	local05, result1 wz
07ca8     28 00 90 AD |  if_e	jmp	#LR__0410
07cac     3A 5F 02 F6 | 	mov	arg01, local05
07cb0     00 78 06 F6 | 	mov	local07, #0
07cb4     02 5E 06 F1 | 	add	arg01, #2
07cb8     2F 7B E2 FA | 	rdword	local08, arg01
07cbc     36 00 00 FF 
07cc0     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
07cc4     01 78 66 A6 |  if_e	neg	local07, #1
07cc8     3C 19 02 F6 | 	mov	result1, local07
07ccc     0C 73 0A F6 | 	mov	local04, result1 wz
07cd0     B4 FF 9F AD |  if_e	jmp	#LR__0408
07cd4                 | LR__0409
07cd4                 | LR__0410
07cd4     00 74 0E F2 | 	cmp	local05, #0 wz
07cd8     37 75 02 A6 |  if_e	mov	local05, local02
07cdc     3A 73 02 F6 | 	mov	local04, local05
07ce0     06 72 06 F1 | 	add	local04, #6
07ce4     36 7D 02 F6 | 	mov	local09, local01
07ce8     39 7F E2 FA | 	rdword	local10, local04
07cec     06 7C 06 F1 | 	add	local09, #6
07cf0     3E 7F 52 FC | 	wrword	local10, local09
07cf4     36 61 0A F6 | 	mov	arg02, local01 wz
07cf8     00 18 06 A6 |  if_e	mov	result1, #0
07cfc     37 61 82 51 |  if_ne	sub	arg02, local02
07d00     04 60 46 50 |  if_ne	shr	arg02, #4
07d04     30 19 02 56 |  if_ne	mov	result1, arg02
07d08     3A 7D 02 F6 | 	mov	local09, local05
07d0c     06 7C 06 F1 | 	add	local09, #6
07d10     3E 19 52 FC | 	wrword	result1, local09
07d14     37 75 0A F2 | 	cmp	local05, local02 wz
07d18     84 00 90 AD |  if_e	jmp	#LR__0413
07d1c     3A 5F 02 F6 | 	mov	arg01, local05
07d20     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
07d24     36 19 0A F2 | 	cmp	result1, local01 wz
07d28     74 00 90 5D |  if_ne	jmp	#LR__0412
07d2c     3A 73 E2 FA | 	rdword	local04, local05
07d30     36 81 E2 FA | 	rdword	local11, local01
07d34     40 73 02 F1 | 	add	local04, local11
07d38     3A 73 52 FC | 	wrword	local04, local05
07d3c     36 73 02 F6 | 	mov	local04, local01
07d40     02 72 06 F1 | 	add	local04, #2
07d44     39 01 58 FC | 	wrword	#0, local04
07d48     36 5F 02 F6 | 	mov	arg01, local01
07d4c     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
07d50     0C 77 02 F6 | 	mov	local06, result1
07d54     38 77 5A F2 | 	cmps	local06, local03 wcz
07d58     20 00 90 3D |  if_ae	jmp	#LR__0411
07d5c     3A 61 0A F6 | 	mov	arg02, local05 wz
07d60     00 18 06 A6 |  if_e	mov	result1, #0
07d64     37 61 82 51 |  if_ne	sub	arg02, local02
07d68     04 60 46 50 |  if_ne	shr	arg02, #4
07d6c     30 19 02 56 |  if_ne	mov	result1, arg02
07d70     3B 7D 02 F6 | 	mov	local09, local06
07d74     04 7C 06 F1 | 	add	local09, #4
07d78     3E 19 52 FC | 	wrword	result1, local09
07d7c                 | LR__0411
07d7c     36 73 02 F6 | 	mov	local04, local01
07d80     06 72 06 F1 | 	add	local04, #6
07d84     3A 7D 02 F6 | 	mov	local09, local05
07d88     39 7F E2 FA | 	rdword	local10, local04
07d8c     06 7C 06 F1 | 	add	local09, #6
07d90     3E 7F 52 FC | 	wrword	local10, local09
07d94     06 6C 06 F1 | 	add	local01, #6
07d98     36 01 58 FC | 	wrword	#0, local01
07d9c     3A 6D 02 F6 | 	mov	local01, local05
07da0                 | LR__0412
07da0                 | LR__0413
07da0     36 5F 02 F6 | 	mov	arg01, local01
07da4     DC FA BF FD | 	call	#__system___gc_nextBlockPtr
07da8     0C 83 0A F6 | 	mov	local12, result1 wz
07dac     C0 00 90 AD |  if_e	jmp	#LR__0415
07db0     38 83 5A F2 | 	cmps	local12, local03 wcz
07db4     B8 00 90 3D |  if_ae	jmp	#LR__0415
07db8     41 5F 02 F6 | 	mov	arg01, local12
07dbc     00 78 06 F6 | 	mov	local07, #0
07dc0     02 5E 06 F1 | 	add	arg01, #2
07dc4     2F 7B E2 FA | 	rdword	local08, arg01
07dc8     36 00 00 FF 
07dcc     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
07dd0     01 78 66 A6 |  if_e	neg	local07, #1
07dd4     3C 19 0A F6 | 	mov	result1, local07 wz
07dd8     94 00 90 AD |  if_e	jmp	#LR__0415
07ddc     36 75 02 F6 | 	mov	local05, local01
07de0     3A 73 E2 FA | 	rdword	local04, local05
07de4     41 6D 02 F6 | 	mov	local01, local12
07de8     36 81 E2 FA | 	rdword	local11, local01
07dec     40 73 02 F1 | 	add	local04, local11
07df0     3A 85 02 F6 | 	mov	local13, local05
07df4     42 73 52 FC | 	wrword	local04, local13
07df8     36 73 02 F6 | 	mov	local04, local01
07dfc     06 72 06 F1 | 	add	local04, #6
07e00     3A 7D 02 F6 | 	mov	local09, local05
07e04     39 7F E2 FA | 	rdword	local10, local04
07e08     06 7C 06 F1 | 	add	local09, #6
07e0c     3E 7F 52 FC | 	wrword	local10, local09
07e10     36 73 02 F6 | 	mov	local04, local01
07e14     02 72 06 F1 | 	add	local04, #2
07e18     39 55 59 FC | 	wrword	#170, local04
07e1c     36 73 02 F6 | 	mov	local04, local01
07e20     06 72 06 F1 | 	add	local04, #6
07e24     00 7C 06 F6 | 	mov	local09, #0
07e28     39 01 58 FC | 	wrword	#0, local04
07e2c     36 5F 02 F6 | 	mov	arg01, local01
07e30     50 FA BF FD | 	call	#__system___gc_nextBlockPtr
07e34     0C 73 02 F6 | 	mov	local04, result1
07e38     39 77 0A F6 | 	mov	local06, local04 wz
07e3c     30 00 90 AD |  if_e	jmp	#LR__0414
07e40     38 77 5A F2 | 	cmps	local06, local03 wcz
07e44     28 00 90 3D |  if_ae	jmp	#LR__0414
07e48     37 5F 02 F6 | 	mov	arg01, local02
07e4c     3A 61 0A F6 | 	mov	arg02, local05 wz
07e50     00 18 06 A6 |  if_e	mov	result1, #0
07e54     2F 61 82 51 |  if_ne	sub	arg02, arg01
07e58     04 60 46 50 |  if_ne	shr	arg02, #4
07e5c     30 19 02 56 |  if_ne	mov	result1, arg02
07e60     0C 73 02 F6 | 	mov	local04, result1
07e64     3B 7D 02 F6 | 	mov	local09, local06
07e68     04 7C 06 F1 | 	add	local09, #4
07e6c     3E 73 52 FC | 	wrword	local04, local09
07e70                 | LR__0414
07e70                 | LR__0415
07e70     3B 19 02 F6 | 	mov	result1, local06
07e74     AF F0 03 F6 | 	mov	ptra, fp
07e78     BA 00 A0 FD | 	call	#popregs_
07e7c                 | __system___gc_dofree_ret
07e7c     2D 00 64 FD | 	ret
07e80                 | 
07e80                 | __system___gc_docollect
07e80     09 5A 05 F6 | 	mov	COUNT_, #9
07e84     B0 00 A0 FD | 	call	#pushregs_
07e88     50 F9 BF FD | 	call	#__system___gc_ptrs
07e8c     0D 6D 02 F6 | 	mov	local01, result2
07e90     0C 6F 02 F6 | 	mov	local02, result1
07e94     37 5F 02 F6 | 	mov	arg01, local02
07e98     E8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07e9c     0C 71 0A F6 | 	mov	local03, result1 wz
07ea0     00 18 06 F6 | 	mov	result1, #0
07ea4     01 18 62 FD | 	cogid	result1
07ea8     0C 73 02 F6 | 	mov	local04, result1
07eac     34 00 90 AD |  if_e	jmp	#LR__0417
07eb0                 | LR__0416
07eb0     36 71 5A F2 | 	cmps	local03, local01 wcz
07eb4     2C 00 90 3D |  if_ae	jmp	#LR__0417
07eb8     38 75 02 F6 | 	mov	local05, local03
07ebc     02 74 06 F1 | 	add	local05, #2
07ec0     3A 77 E2 FA | 	rdword	local06, local05
07ec4     20 76 26 F5 | 	andn	local06, #32
07ec8     38 79 02 F6 | 	mov	local07, local03
07ecc     02 78 06 F1 | 	add	local07, #2
07ed0     3C 77 52 FC | 	wrword	local06, local07
07ed4     38 5F 02 F6 | 	mov	arg01, local03
07ed8     A8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07edc     0C 71 0A F6 | 	mov	local03, result1 wz
07ee0     CC FF 9F 5D |  if_ne	jmp	#LR__0416
07ee4                 | LR__0417
07ee4     00 76 06 F6 | 	mov	local06, #0
07ee8     00 5E 06 F6 | 	mov	arg01, #0
07eec     18 EE BF FD | 	call	#__system____topofstack
07ef0     0C 61 02 F6 | 	mov	arg02, result1
07ef4     3B 5F 02 F6 | 	mov	arg01, local06
07ef8     9C 00 B0 FD | 	call	#__system___gc_markhub
07efc     2C 01 B0 FD | 	call	#__system___gc_markcog
07f00     37 5F 02 F6 | 	mov	arg01, local02
07f04     7C F9 BF FD | 	call	#__system___gc_nextBlockPtr
07f08     0C 7B 0A F6 | 	mov	local08, result1 wz
07f0c     10 00 90 5D |  if_ne	jmp	#LR__0418
07f10     48 00 00 FF 
07f14     31 5E 06 F6 | 	mov	arg01, ##@LR__0503
07f18     7C FB BF FD | 	call	#__system___gc_errmsg
07f1c     6C 00 90 FD | 	jmp	#LR__0424
07f20                 | LR__0418
07f20                 | LR__0419
07f20     3D 71 02 F6 | 	mov	local03, local08
07f24     38 5F 02 F6 | 	mov	arg01, local03
07f28     58 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07f2c     0C 7B 02 F6 | 	mov	local08, result1
07f30     38 77 02 F6 | 	mov	local06, local03
07f34     02 76 06 F1 | 	add	local06, #2
07f38     3B 7D E2 FA | 	rdword	local09, local06
07f3c     20 7C CE F7 | 	test	local09, #32 wz
07f40     38 00 90 5D |  if_ne	jmp	#LR__0422
07f44     3E 75 02 F6 | 	mov	local05, local09
07f48     10 74 0E F5 | 	and	local05, #16 wz
07f4c     2C 00 90 5D |  if_ne	jmp	#LR__0422
07f50     3E 77 02 F6 | 	mov	local06, local09
07f54     0F 76 06 F5 | 	and	local06, #15
07f58     3B 7D 02 F6 | 	mov	local09, local06
07f5c     39 7D 0A F2 | 	cmp	local09, local04 wz
07f60     08 00 90 AD |  if_e	jmp	#LR__0420
07f64     0E 7C 0E F2 | 	cmp	local09, #14 wz
07f68     10 00 90 5D |  if_ne	jmp	#LR__0421
07f6c                 | LR__0420
07f6c     38 5F 02 F6 | 	mov	arg01, local03
07f70     D4 FC BF FD | 	call	#__system___gc_dofree
07f74     0C 77 02 F6 | 	mov	local06, result1
07f78     3B 7B 02 F6 | 	mov	local08, local06
07f7c                 | LR__0421
07f7c                 | LR__0422
07f7c     00 7A 0E F2 | 	cmp	local08, #0 wz
07f80     08 00 90 AD |  if_e	jmp	#LR__0423
07f84     36 7B 5A F2 | 	cmps	local08, local01 wcz
07f88     94 FF 9F CD |  if_b	jmp	#LR__0419
07f8c                 | LR__0423
07f8c                 | LR__0424
07f8c     AF F0 03 F6 | 	mov	ptra, fp
07f90     BA 00 A0 FD | 	call	#popregs_
07f94                 | __system___gc_docollect_ret
07f94     2D 00 64 FD | 	ret
07f98                 | 
07f98                 | __system___gc_markhub
07f98     09 5A 05 F6 | 	mov	COUNT_, #9
07f9c     B0 00 A0 FD | 	call	#pushregs_
07fa0     2F 6D 02 F6 | 	mov	local01, arg01
07fa4     30 6F 02 F6 | 	mov	local02, arg02
07fa8     30 F8 BF FD | 	call	#__system___gc_ptrs
07fac     0C 71 02 F6 | 	mov	local03, result1
07fb0     0D 73 02 F6 | 	mov	local04, result2
07fb4                 | LR__0425
07fb4     37 6D 5A F2 | 	cmps	local01, local02 wcz
07fb8     64 00 90 3D |  if_ae	jmp	#LR__0426
07fbc     36 63 02 FB | 	rdlong	arg03, local01
07fc0     04 6C 06 F1 | 	add	local01, #4
07fc4     39 61 02 F6 | 	mov	arg02, local04
07fc8     38 5F 02 F6 | 	mov	arg01, local03
07fcc     F8 FB BF FD | 	call	#__system___gc_isvalidptr
07fd0     0C 75 0A F6 | 	mov	local05, result1 wz
07fd4     DC FF 9F AD |  if_e	jmp	#LR__0425
07fd8     3A 5F 02 F6 | 	mov	arg01, local05
07fdc     00 76 06 F6 | 	mov	local06, #0
07fe0     02 5E 06 F1 | 	add	arg01, #2
07fe4     2F 79 E2 FA | 	rdword	local07, arg01
07fe8     36 00 00 FF 
07fec     8F 78 0E F2 | 	cmp	local07, ##27791 wz
07ff0     01 76 66 A6 |  if_e	neg	local06, #1
07ff4     3B 19 0A F6 | 	mov	result1, local06 wz
07ff8     B8 FF 9F 5D |  if_ne	jmp	#LR__0425
07ffc     3A 7B 02 F6 | 	mov	local08, local05
08000     02 7A 06 F1 | 	add	local08, #2
08004     3D 7D E2 FA | 	rdword	local09, local08
08008     0F 7C 26 F5 | 	andn	local09, #15
0800c     2E 7C 46 F5 | 	or	local09, #46
08010     3A 7B 02 F6 | 	mov	local08, local05
08014     02 7A 06 F1 | 	add	local08, #2
08018     3D 7D 52 FC | 	wrword	local09, local08
0801c     94 FF 9F FD | 	jmp	#LR__0425
08020                 | LR__0426
08020     AF F0 03 F6 | 	mov	ptra, fp
08024     BA 00 A0 FD | 	call	#popregs_
08028                 | __system___gc_markhub_ret
08028     2D 00 64 FD | 	ret
0802c                 | 
0802c                 | __system___gc_markcog
0802c     06 5A 05 F6 | 	mov	COUNT_, #6
08030     B0 00 A0 FD | 	call	#pushregs_
08034     A4 F7 BF FD | 	call	#__system___gc_ptrs
08038     0C 6D 02 F6 | 	mov	local01, result1
0803c     0D 6F 02 F6 | 	mov	local02, result2
08040     00 70 06 F6 | 	mov	local03, #0
08044                 | LR__0427
08044     F0 73 06 F6 | 	mov	local04, #496
08048     38 73 82 F1 | 	sub	local04, local03
0804c     F0 73 06 F1 | 	add	local04, #496
08050                 | 	'.live	local04
08050     00 72 96 F9 | 	alts	local04, #0
08054     39 75 02 F6 | 	mov	local05, local04
08058     36 5F 02 F6 | 	mov	arg01, local01
0805c     37 61 02 F6 | 	mov	arg02, local02
08060     3A 63 02 F6 | 	mov	arg03, local05
08064     60 FB BF FD | 	call	#__system___gc_isvalidptr
08068     0C 75 0A F6 | 	mov	local05, result1 wz
0806c     18 00 90 AD |  if_e	jmp	#LR__0428
08070     3A 77 02 F6 | 	mov	local06, local05
08074     02 76 06 F1 | 	add	local06, #2
08078     3B 73 E2 FA | 	rdword	local04, local06
0807c     20 72 46 F5 | 	or	local04, #32
08080     02 74 06 F1 | 	add	local05, #2
08084     3A 73 52 FC | 	wrword	local04, local05
08088                 | LR__0428
08088     01 70 06 F1 | 	add	local03, #1
0808c     F0 71 5E F2 | 	cmps	local03, #496 wcz
08090     B0 FF 9F CD |  if_b	jmp	#LR__0427
08094     AF F0 03 F6 | 	mov	ptra, fp
08098     BA 00 A0 FD | 	call	#popregs_
0809c                 | __system___gc_markcog_ret
0809c     2D 00 64 FD | 	ret
080a0                 | 
080a0                 | __system__write
080a0     03 5A 05 F6 | 	mov	COUNT_, #3
080a4     B0 00 A0 FD | 	call	#pushregs_
080a8     2F 6D 02 F6 | 	mov	local01, arg01
080ac     30 6F 02 F6 | 	mov	local02, arg02
080b0     31 71 02 F6 | 	mov	local03, arg03
080b4     0A 6C 1E F2 | 	cmp	local01, #10 wcz
080b8     14 00 90 CD |  if_b	jmp	#LR__0429
080bc     1C 00 06 F1 | 	add	ptr___system__dat__, #28
080c0     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
080c4     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
080c8     01 18 66 F6 | 	neg	result1, #1
080cc     28 00 90 FD | 	jmp	#LR__0430
080d0                 | LR__0429
080d0     36 5F 02 F6 | 	mov	arg01, local01
080d4     01 5E 66 F0 | 	shl	arg01, #1
080d8     36 5F 02 F1 | 	add	arg01, local01
080dc     04 5E 66 F0 | 	shl	arg01, #4
080e0     24 00 06 F1 | 	add	ptr___system__dat__, #36
080e4     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
080e8     37 61 02 F6 | 	mov	arg02, local02
080ec     38 63 02 F6 | 	mov	arg03, local03
080f0     24 00 86 F1 | 	sub	ptr___system__dat__, #36
080f4     9C 08 B0 FD | 	call	#__system___vfswrite
080f8                 | LR__0430
080f8     AF F0 03 F6 | 	mov	ptra, fp
080fc     BA 00 A0 FD | 	call	#popregs_
08100                 | __system__write_ret
08100     2D 00 64 FD | 	ret
08104                 | 
08104                 | __system__read
08104     03 5A 05 F6 | 	mov	COUNT_, #3
08108     B0 00 A0 FD | 	call	#pushregs_
0810c     2F 6D 02 F6 | 	mov	local01, arg01
08110     30 6F 02 F6 | 	mov	local02, arg02
08114     31 71 02 F6 | 	mov	local03, arg03
08118     0A 6C 1E F2 | 	cmp	local01, #10 wcz
0811c     14 00 90 CD |  if_b	jmp	#LR__0431
08120     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08124     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
08128     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
0812c     01 18 66 F6 | 	neg	result1, #1
08130     28 00 90 FD | 	jmp	#LR__0432
08134                 | LR__0431
08134     36 5F 02 F6 | 	mov	arg01, local01
08138     01 5E 66 F0 | 	shl	arg01, #1
0813c     36 5F 02 F1 | 	add	arg01, local01
08140     04 5E 66 F0 | 	shl	arg01, #4
08144     24 00 06 F1 | 	add	ptr___system__dat__, #36
08148     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
0814c     37 61 02 F6 | 	mov	arg02, local02
08150     38 63 02 F6 | 	mov	arg03, local03
08154     24 00 86 F1 | 	sub	ptr___system__dat__, #36
08158     E4 09 B0 FD | 	call	#__system___vfsread
0815c                 | LR__0432
0815c     AF F0 03 F6 | 	mov	ptra, fp
08160     BA 00 A0 FD | 	call	#popregs_
08164                 | __system__read_ret
08164     2D 00 64 FD | 	ret
08168                 | 
08168                 | __system__close
08168     01 5A 05 F6 | 	mov	COUNT_, #1
0816c     B0 00 A0 FD | 	call	#pushregs_
08170     2F 6D 02 F6 | 	mov	local01, arg01
08174     0A 6C 1E F2 | 	cmp	local01, #10 wcz
08178     14 00 90 CD |  if_b	jmp	#LR__0433
0817c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08180     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
08184     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08188     01 18 66 F6 | 	neg	result1, #1
0818c     20 00 90 FD | 	jmp	#LR__0434
08190                 | LR__0433
08190     36 5F 02 F6 | 	mov	arg01, local01
08194     01 5E 66 F0 | 	shl	arg01, #1
08198     36 5F 02 F1 | 	add	arg01, local01
0819c     04 5E 66 F0 | 	shl	arg01, #4
081a0     24 00 06 F1 | 	add	ptr___system__dat__, #36
081a4     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
081a8     24 00 86 F1 | 	sub	ptr___system__dat__, #36
081ac     6C 03 B0 FD | 	call	#__system___closeraw
081b0                 | LR__0434
081b0     AF F0 03 F6 | 	mov	ptra, fp
081b4     BA 00 A0 FD | 	call	#popregs_
081b8                 | __system__close_ret
081b8     2D 00 64 FD | 	ret
081bc                 | 
081bc                 | __system__lseek
081bc     09 5A 05 F6 | 	mov	COUNT_, #9
081c0     B0 00 A0 FD | 	call	#pushregs_
081c4     2F 6D 02 F6 | 	mov	local01, arg01
081c8     30 6F 02 F6 | 	mov	local02, arg02
081cc     31 71 02 F6 | 	mov	local03, arg03
081d0     0A 6C 1E F2 | 	cmp	local01, #10 wcz
081d4     14 00 90 CD |  if_b	jmp	#LR__0435
081d8     1C 00 06 F1 | 	add	ptr___system__dat__, #28
081dc     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
081e0     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
081e4     01 18 66 F6 | 	neg	result1, #1
081e8     C8 00 90 FD | 	jmp	#LR__0439
081ec                 | LR__0435
081ec     36 73 02 F6 | 	mov	local04, local01
081f0     01 72 66 F0 | 	shl	local04, #1
081f4     36 73 02 F1 | 	add	local04, local01
081f8     04 72 66 F0 | 	shl	local04, #4
081fc     24 00 06 F1 | 	add	ptr___system__dat__, #36
08200     00 73 02 F1 | 	add	local04, ptr___system__dat__
08204     2C 72 06 F1 | 	add	local04, #44
08208     39 75 0A FB | 	rdlong	local05, local04 wz
0820c     2C 72 86 F1 | 	sub	local04, #44
08210     24 00 86 F1 | 	sub	ptr___system__dat__, #36
08214     14 00 90 5D |  if_ne	jmp	#LR__0436
08218     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0821c     00 21 68 FC | 	wrlong	#16, ptr___system__dat__
08220     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08224     01 18 66 F6 | 	neg	result1, #1
08228     88 00 90 FD | 	jmp	#LR__0439
0822c                 | LR__0436
0822c     08 72 06 F1 | 	add	local04, #8
08230     39 75 02 FB | 	rdlong	local05, local04
08234     08 72 86 F1 | 	sub	local04, #8
08238     40 74 CE F7 | 	test	local05, #64 wz
0823c     14 00 90 AD |  if_e	jmp	#LR__0437
08240     08 72 06 F1 | 	add	local04, #8
08244     39 75 02 FB | 	rdlong	local05, local04
08248     80 74 46 F5 | 	or	local05, #128
0824c     39 75 62 FC | 	wrlong	local05, local04
08250     08 72 86 F1 | 	sub	local04, #8
08254                 | LR__0437
08254     2C 72 06 F1 | 	add	local04, #44
08258     39 75 02 FB | 	rdlong	local05, local04
0825c     2C 72 86 F1 | 	sub	local04, #44
08260     3A 77 02 FB | 	rdlong	local06, local05
08264     04 74 06 F1 | 	add	local05, #4
08268     3A 79 02 FB | 	rdlong	local07, local05
0826c     39 5F 02 F6 | 	mov	arg01, local04
08270     37 61 02 F6 | 	mov	arg02, local02
08274     38 63 02 F6 | 	mov	arg03, local03
08278     FD 7A 02 F6 | 	mov	local08, objptr
0827c     3B FB 01 F6 | 	mov	objptr, local06
08280     2D 78 62 FD | 	call	local07
08284     3D FB 01 F6 | 	mov	objptr, local08
08288     0C 7D 02 F6 | 	mov	local09, result1
0828c     00 7C 5E F2 | 	cmps	local09, #0 wcz
08290     1C 00 90 3D |  if_ae	jmp	#LR__0438
08294     3E 5F 6A F6 | 	neg	arg01, local09 wz
08298     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0829c     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
082a0     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
082a4     01 18 66 56 |  if_ne	neg	result1, #1
082a8     00 18 06 A6 |  if_e	mov	result1, #0
082ac     04 00 90 FD | 	jmp	#LR__0439
082b0                 | LR__0438
082b0     3E 19 02 F6 | 	mov	result1, local09
082b4                 | LR__0439
082b4     AF F0 03 F6 | 	mov	ptra, fp
082b8     BA 00 A0 FD | 	call	#popregs_
082bc                 | __system__lseek_ret
082bc     2D 00 64 FD | 	ret
082c0                 | 
082c0                 | __system____getftab
082c0     0A 5E 1E F2 | 	cmp	arg01, #10 wcz
082c4     00 18 06 36 |  if_ae	mov	result1, #0
082c8     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
082cc     2F 19 02 F6 | 	mov	result1, arg01
082d0     01 18 66 F0 | 	shl	result1, #1
082d4     2F 19 02 F1 | 	add	result1, arg01
082d8     04 18 66 F0 | 	shl	result1, #4
082dc     24 00 06 F1 | 	add	ptr___system__dat__, #36
082e0     00 19 02 F1 | 	add	result1, ptr___system__dat__
082e4     24 00 86 F1 | 	sub	ptr___system__dat__, #36
082e8                 | __system____getftab_ret
082e8     2D 00 64 FD | 	ret
082ec                 | 
082ec                 | __system___strrev
082ec     2F 1F CA FA | 	rdbyte	_var01, arg01 wz
082f0     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
082f4     2F 21 02 F6 | 	mov	_var02, arg01
082f8     10 7D 9F FE | 	loc	pa,	#(@LR__0441-@LR__0440)
082fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
08300                 | LR__0440
08300     10 1F CA FA | 	rdbyte	_var01, _var02 wz
08304     01 20 06 51 |  if_ne	add	_var02, #1
08308     F4 FF 9F 5D |  if_ne	jmp	#LR__0440
0830c                 | LR__0441
0830c     01 20 86 F1 | 	sub	_var02, #1
08310                 | LR__0442
08310     2F 21 5A F2 | 	cmps	_var02, arg01 wcz
08314     1C 00 90 ED |  if_be	jmp	#LR__0443
08318     2F 23 C2 FA | 	rdbyte	_var03, arg01
0831c     10 25 C2 FA | 	rdbyte	_var04, _var02
08320     2F 25 42 FC | 	wrbyte	_var04, arg01
08324     10 23 42 FC | 	wrbyte	_var03, _var02
08328     01 5E 06 F1 | 	add	arg01, #1
0832c     01 20 86 F1 | 	sub	_var02, #1
08330     DC FF 9F FD | 	jmp	#LR__0442
08334                 | LR__0443
08334                 | __system___strrev_ret
08334     2D 00 64 FD | 	ret
08338                 | 
08338                 | __system___fmtpad
08338     0C 5A 05 F6 | 	mov	COUNT_, #12
0833c     B0 00 A0 FD | 	call	#pushregs_
08340     2F 6D 02 F6 | 	mov	local01, arg01
08344     30 6F 02 F6 | 	mov	local02, arg02
08348     32 71 02 F6 | 	mov	local03, arg04
0834c     37 73 EA F8 | 	getbyte	local04, local02, #1
08350     16 6E 46 F0 | 	shr	local02, #22
08354     03 6E 0E F5 | 	and	local02, #3 wz
08358     00 74 06 F6 | 	mov	local05, #0
0835c     01 6E 06 A6 |  if_e	mov	local02, #1
08360     38 6F CA F7 | 	test	local02, local03 wz
08364     00 18 06 A6 |  if_e	mov	result1, #0
08368     84 00 90 AD |  if_e	jmp	#LR__0447
0836c     31 73 82 F1 | 	sub	local04, arg03
08370     39 77 02 F6 | 	mov	local06, local04
08374     00 76 5E F2 | 	cmps	local06, #0 wcz
08378     00 18 06 E6 |  if_be	mov	result1, #0
0837c     70 00 90 ED |  if_be	jmp	#LR__0447
08380     03 6E 0E F2 | 	cmp	local02, #3 wz
08384     18 00 90 5D |  if_ne	jmp	#LR__0444
08388     01 70 0E F2 | 	cmp	local03, #1 wz
0838c     6E 78 62 FD | 	wrz	local07
08390     3C 77 02 F1 | 	add	local06, local07
08394     3B 77 52 F6 | 	abs	local06, local06 wc
08398     01 76 46 F0 | 	shr	local06, #1
0839c     3B 77 62 C6 |  if_b	neg	local06, local06
083a0                 | LR__0444
083a0     00 7A 06 F6 | 	mov	local08, #0
083a4                 | LR__0445
083a4     3B 7B 5A F2 | 	cmps	local08, local06 wcz
083a8     40 00 90 3D |  if_ae	jmp	#LR__0446
083ac     36 7D 02 F6 | 	mov	local09, local01
083b0     3E 79 02 FB | 	rdlong	local07, local09
083b4     04 7C 06 F1 | 	add	local09, #4
083b8     3E 7F 02 FB | 	rdlong	local10, local09
083bc     20 5E 06 F6 | 	mov	arg01, #32
083c0     FD 80 02 F6 | 	mov	local11, objptr
083c4     3C FB 01 F6 | 	mov	objptr, local07
083c8     2D 7E 62 FD | 	call	local10
083cc     40 FB 01 F6 | 	mov	objptr, local11
083d0     0C 83 02 F6 | 	mov	local12, result1
083d4     00 82 5E F2 | 	cmps	local12, #0 wcz
083d8     41 19 02 C6 |  if_b	mov	result1, local12
083dc     10 00 90 CD |  if_b	jmp	#LR__0447
083e0     41 75 02 F1 | 	add	local05, local12
083e4     01 7A 06 F1 | 	add	local08, #1
083e8     B8 FF 9F FD | 	jmp	#LR__0445
083ec                 | LR__0446
083ec     3A 19 02 F6 | 	mov	result1, local05
083f0                 | LR__0447
083f0     AF F0 03 F6 | 	mov	ptra, fp
083f4     BA 00 A0 FD | 	call	#popregs_
083f8                 | __system___fmtpad_ret
083f8     2D 00 64 FD | 	ret
083fc                 | 
083fc                 | __system___uitoa
083fc     09 5A 05 F6 | 	mov	COUNT_, #9
08400     B0 00 A0 FD | 	call	#pushregs_
08404     2F 6D 02 F6 | 	mov	local01, arg01
08408     30 6F 02 F6 | 	mov	local02, arg02
0840c     31 71 02 F6 | 	mov	local03, arg03
08410     32 73 02 F6 | 	mov	local04, arg04
08414     33 75 0A F6 | 	mov	local05, arg05 wz
08418     36 77 02 F6 | 	mov	local06, local01
0841c     00 78 06 F6 | 	mov	local07, #0
08420     37 7A 06 56 |  if_ne	mov	local08, #55
08424     57 7A 06 A6 |  if_e	mov	local08, #87
08428                 | LR__0448
08428     37 99 02 F6 | 	mov	muldiva_, local02
0842c     38 9B 02 F6 | 	mov	muldivb_, local03
08430     C2 00 A0 FD | 	call	#unsdivide_
08434     4C 7D 02 F6 | 	mov	local09, muldiva_
08438     0A 7C 1E F2 | 	cmp	local09, #10 wcz
0843c     30 7C 06 C1 |  if_b	add	local09, #48
08440     3D 7D 02 31 |  if_ae	add	local09, local08
08444     3B 7D 42 FC | 	wrbyte	local09, local06
08448     37 99 02 F6 | 	mov	muldiva_, local02
0844c     38 9B 02 F6 | 	mov	muldivb_, local03
08450     01 76 06 F1 | 	add	local06, #1
08454     C2 00 A0 FD | 	call	#unsdivide_
08458     4D 6F 0A F6 | 	mov	local02, muldivb_ wz
0845c     01 78 06 F1 | 	add	local07, #1
08460     C4 FF 9F 5D |  if_ne	jmp	#LR__0448
08464     39 79 1A F2 | 	cmp	local07, local04 wcz
08468     BC FF 9F CD |  if_b	jmp	#LR__0448
0846c     3B 01 48 FC | 	wrbyte	#0, local06
08470     36 5F 02 F6 | 	mov	arg01, local01
08474     74 FE BF FD | 	call	#__system___strrev
08478     3C 19 02 F6 | 	mov	result1, local07
0847c     AF F0 03 F6 | 	mov	ptra, fp
08480     BA 00 A0 FD | 	call	#popregs_
08484                 | __system___uitoa_ret
08484     2D 00 64 FD | 	ret
08488                 | 
08488                 | __system___gettxfunc
08488     03 5A 05 F6 | 	mov	COUNT_, #3
0848c     B0 00 A0 FD | 	call	#pushregs_
08490     2C FE BF FD | 	call	#__system____getftab
08494     0C 6D 0A F6 | 	mov	local01, result1 wz
08498     14 00 90 AD |  if_e	jmp	#LR__0449
0849c     08 6C 06 F1 | 	add	local01, #8
084a0     36 6F 02 FB | 	rdlong	local02, local01
084a4     08 6C 86 F1 | 	sub	local01, #8
084a8     37 71 0A F6 | 	mov	local03, local02 wz
084ac     08 00 90 5D |  if_ne	jmp	#LR__0450
084b0                 | LR__0449
084b0     00 18 06 F6 | 	mov	result1, #0
084b4     0C 00 90 FD | 	jmp	#LR__0451
084b8                 | LR__0450
084b8     FF 60 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
084bc     36 5F 02 F6 | 	mov	arg01, local01
084c0     6C E8 BF FD | 	call	#__system___make_methodptr
084c4                 | LR__0451
084c4     AF F0 03 F6 | 	mov	ptra, fp
084c8     BA 00 A0 FD | 	call	#popregs_
084cc                 | __system___gettxfunc_ret
084cc     2D 00 64 FD | 	ret
084d0                 | 
084d0                 | __system___getiolock_0150
084d0     03 5A 05 F6 | 	mov	COUNT_, #3
084d4     B0 00 A0 FD | 	call	#pushregs_
084d8     E4 FD BF FD | 	call	#__system____getftab
084dc     0C 6D 0A F6 | 	mov	local01, result1 wz
084e0     14 00 90 AD |  if_e	jmp	#LR__0452
084e4     08 6C 06 F1 | 	add	local01, #8
084e8     36 6F 02 FB | 	rdlong	local02, local01
084ec     08 6C 86 F1 | 	sub	local01, #8
084f0     37 71 0A F6 | 	mov	local03, local02 wz
084f4     10 00 90 5D |  if_ne	jmp	#LR__0453
084f8                 | LR__0452
084f8     20 00 06 F1 | 	add	ptr___system__dat__, #32
084fc     00 19 02 F6 | 	mov	result1, ptr___system__dat__
08500     20 00 86 F1 | 	sub	ptr___system__dat__, #32
08504     08 00 90 FD | 	jmp	#LR__0454
08508                 | LR__0453
08508     0C 6C 06 F1 | 	add	local01, #12
0850c     36 19 02 F6 | 	mov	result1, local01
08510                 | LR__0454
08510     AF F0 03 F6 | 	mov	ptra, fp
08514     BA 00 A0 FD | 	call	#popregs_
08518                 | __system___getiolock_0150_ret
08518     2D 00 64 FD | 	ret
0851c                 | 
0851c                 | __system___closeraw
0851c     06 5A 05 F6 | 	mov	COUNT_, #6
08520     B0 00 A0 FD | 	call	#pushregs_
08524     2F 6D 02 F6 | 	mov	local01, arg01
08528     00 6E 06 F6 | 	mov	local02, #0
0852c     08 6C 06 F1 | 	add	local01, #8
08530     36 71 0A FB | 	rdlong	local03, local01 wz
08534     08 6C 86 F1 | 	sub	local01, #8
08538     14 00 90 5D |  if_ne	jmp	#LR__0455
0853c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08540     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
08544     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08548     01 18 66 F6 | 	neg	result1, #1
0854c     90 00 90 FD | 	jmp	#LR__0458
08550                 | LR__0455
08550     28 6C 06 F1 | 	add	local01, #40
08554     36 71 0A FB | 	rdlong	local03, local01 wz
08558     28 6C 86 F1 | 	sub	local01, #40
0855c     2C 00 90 AD |  if_e	jmp	#LR__0456
08560     28 6C 06 F1 | 	add	local01, #40
08564     36 71 02 FB | 	rdlong	local03, local01
08568     28 6C 86 F1 | 	sub	local01, #40
0856c     38 73 02 FB | 	rdlong	local04, local03
08570     04 70 06 F1 | 	add	local03, #4
08574     38 75 02 FB | 	rdlong	local05, local03
08578     36 5F 02 F6 | 	mov	arg01, local01
0857c     FD 76 02 F6 | 	mov	local06, objptr
08580     39 FB 01 F6 | 	mov	objptr, local04
08584     2D 74 62 FD | 	call	local05
08588     3B FB 01 F6 | 	mov	objptr, local06
0858c                 | LR__0456
0858c     20 6C 06 F1 | 	add	local01, #32
08590     36 71 0A FB | 	rdlong	local03, local01 wz
08594     20 6C 86 F1 | 	sub	local01, #32
08598     30 00 90 AD |  if_e	jmp	#LR__0457
0859c     20 6C 06 F1 | 	add	local01, #32
085a0     36 71 02 FB | 	rdlong	local03, local01
085a4     20 6C 86 F1 | 	sub	local01, #32
085a8     38 73 02 FB | 	rdlong	local04, local03
085ac     04 70 06 F1 | 	add	local03, #4
085b0     38 75 02 FB | 	rdlong	local05, local03
085b4     36 5F 02 F6 | 	mov	arg01, local01
085b8     FD 76 02 F6 | 	mov	local06, objptr
085bc     39 FB 01 F6 | 	mov	objptr, local04
085c0     2D 74 62 FD | 	call	local05
085c4     3B FB 01 F6 | 	mov	objptr, local06
085c8     0C 6F 02 F6 | 	mov	local02, result1
085cc                 | LR__0457
085cc     36 5F 02 F6 | 	mov	arg01, local01
085d0     00 60 06 F6 | 	mov	arg02, #0
085d4     30 62 06 F6 | 	mov	arg03, #48
085d8     A0 00 A0 FD | 	call	#\builtin_bytefill_
085dc     37 19 02 F6 | 	mov	result1, local02
085e0                 | LR__0458
085e0     AF F0 03 F6 | 	mov	ptra, fp
085e4     BA 00 A0 FD | 	call	#popregs_
085e8                 | __system___closeraw_ret
085e8     2D 00 64 FD | 	ret
085ec                 | 
085ec                 | __system____default_getc
085ec     05 5A 05 F6 | 	mov	COUNT_, #5
085f0     B0 00 A0 FD | 	call	#pushregs_
085f4     2F 6D 02 F6 | 	mov	local01, arg01
085f8     36 6F 02 FB | 	rdlong	local02, local01
085fc     08 6E 06 F1 | 	add	local02, #8
08600     37 71 02 FB | 	rdlong	local03, local02
08604     08 6E 86 F1 | 	sub	local02, #8
08608     02 70 CE F7 | 	test	local03, #2 wz
0860c     08 00 90 AD |  if_e	jmp	#LR__0459
08610     36 5F 02 F6 | 	mov	arg01, local01
08614     8C 01 B0 FD | 	call	#__system____default_flush
08618                 | LR__0459
08618     08 6E 06 F1 | 	add	local02, #8
0861c     37 71 02 FB | 	rdlong	local03, local02
08620     01 70 46 F5 | 	or	local03, #1
08624     37 71 62 FC | 	wrlong	local03, local02
08628     08 6E 86 F1 | 	sub	local02, #8
0862c     37 73 0A FB | 	rdlong	local04, local02 wz
08630     0C 00 90 5D |  if_ne	jmp	#LR__0460
08634     36 5F 02 F6 | 	mov	arg01, local01
08638     F8 07 B0 FD | 	call	#__system____default_filbuf
0863c     0C 73 02 F6 | 	mov	local04, result1
08640                 | LR__0460
08640     00 72 5E F2 | 	cmps	local04, #0 wcz
08644     01 18 66 E6 |  if_be	neg	result1, #1
08648     1C 00 90 ED |  if_be	jmp	#LR__0461
0864c     01 72 86 F1 | 	sub	local04, #1
08650     37 73 62 FC | 	wrlong	local04, local02
08654     04 6E 06 F1 | 	add	local02, #4
08658     37 75 02 FB | 	rdlong	local05, local02
0865c     3A 19 C2 FA | 	rdbyte	result1, local05
08660     01 74 06 F1 | 	add	local05, #1
08664     37 75 62 FC | 	wrlong	local05, local02
08668                 | LR__0461
08668     AF F0 03 F6 | 	mov	ptra, fp
0866c     BA 00 A0 FD | 	call	#popregs_
08670                 | __system____default_getc_ret
08670     2D 00 64 FD | 	ret
08674                 | 
08674                 | __system____default_putc
08674     06 5A 05 F6 | 	mov	COUNT_, #6
08678     B0 00 A0 FD | 	call	#pushregs_
0867c     2F 6D 02 F6 | 	mov	local01, arg01
08680     30 6F 02 F6 | 	mov	local02, arg02
08684     37 71 02 FB | 	rdlong	local03, local02
08688     08 70 06 F1 | 	add	local03, #8
0868c     38 73 02 FB | 	rdlong	local04, local03
08690     08 70 86 F1 | 	sub	local03, #8
08694     01 72 CE F7 | 	test	local04, #1 wz
08698     08 00 90 AD |  if_e	jmp	#LR__0462
0869c     37 5F 02 F6 | 	mov	arg01, local02
086a0     00 01 B0 FD | 	call	#__system____default_flush
086a4                 | LR__0462
086a4     08 70 06 F1 | 	add	local03, #8
086a8     38 73 02 FB | 	rdlong	local04, local03
086ac     02 72 46 F5 | 	or	local04, #2
086b0     38 73 62 FC | 	wrlong	local04, local03
086b4     08 70 86 F1 | 	sub	local03, #8
086b8     38 75 02 FB | 	rdlong	local05, local03
086bc     3A 77 02 F6 | 	mov	local06, local05
086c0     0C 70 06 F1 | 	add	local03, #12
086c4     38 77 02 F1 | 	add	local06, local03
086c8     3B 6D 42 FC | 	wrbyte	local01, local06
086cc     FF 6C 06 F5 | 	and	local01, #255
086d0     01 74 06 F1 | 	add	local05, #1
086d4     0C 70 86 F1 | 	sub	local03, #12
086d8     38 75 62 FC | 	wrlong	local05, local03
086dc     02 00 00 FF 
086e0     00 74 0E F2 | 	cmp	local05, ##1024 wz
086e4     10 00 90 5D |  if_ne	jmp	#LR__0463
086e8     37 5F 02 F6 | 	mov	arg01, local02
086ec     B4 00 B0 FD | 	call	#__system____default_flush
086f0     00 18 0E F2 | 	cmp	result1, #0 wz
086f4     01 6C 66 56 |  if_ne	neg	local01, #1
086f8                 | LR__0463
086f8     36 19 02 F6 | 	mov	result1, local01
086fc     AF F0 03 F6 | 	mov	ptra, fp
08700     BA 00 A0 FD | 	call	#popregs_
08704                 | __system____default_putc_ret
08704     2D 00 64 FD | 	ret
08708                 | 
08708                 | __system____default_putc_terminal
08708     06 5A 05 F6 | 	mov	COUNT_, #6
0870c     B0 00 A0 FD | 	call	#pushregs_
08710     2F 6D 02 F6 | 	mov	local01, arg01
08714     30 6F 02 F6 | 	mov	local02, arg02
08718     37 71 02 FB | 	rdlong	local03, local02
0871c     08 70 06 F1 | 	add	local03, #8
08720     38 73 02 FB | 	rdlong	local04, local03
08724     08 70 86 F1 | 	sub	local03, #8
08728     01 72 CE F7 | 	test	local04, #1 wz
0872c     08 00 90 AD |  if_e	jmp	#LR__0464
08730     37 5F 02 F6 | 	mov	arg01, local02
08734     6C 00 B0 FD | 	call	#__system____default_flush
08738                 | LR__0464
08738     08 70 06 F1 | 	add	local03, #8
0873c     38 73 02 FB | 	rdlong	local04, local03
08740     02 72 46 F5 | 	or	local04, #2
08744     38 73 62 FC | 	wrlong	local04, local03
08748     08 70 86 F1 | 	sub	local03, #8
0874c     38 75 02 FB | 	rdlong	local05, local03
08750     3A 77 02 F6 | 	mov	local06, local05
08754     0C 70 06 F1 | 	add	local03, #12
08758     38 77 02 F1 | 	add	local06, local03
0875c     3B 6D 42 FC | 	wrbyte	local01, local06
08760     FF 6C 06 F5 | 	and	local01, #255
08764     0C 70 86 F1 | 	sub	local03, #12
08768     01 74 06 F1 | 	add	local05, #1
0876c     38 75 62 FC | 	wrlong	local05, local03
08770     0A 6C 0E F2 | 	cmp	local01, #10 wz
08774     0C 00 90 AD |  if_e	jmp	#LR__0465
08778     02 00 00 FF 
0877c     00 74 0E F2 | 	cmp	local05, ##1024 wz
08780     10 00 90 5D |  if_ne	jmp	#LR__0466
08784                 | LR__0465
08784     37 5F 02 F6 | 	mov	arg01, local02
08788     18 00 B0 FD | 	call	#__system____default_flush
0878c     00 18 0E F2 | 	cmp	result1, #0 wz
08790     01 6C 66 56 |  if_ne	neg	local01, #1
08794                 | LR__0466
08794     36 19 02 F6 | 	mov	result1, local01
08798     AF F0 03 F6 | 	mov	ptra, fp
0879c     BA 00 A0 FD | 	call	#popregs_
087a0                 | __system____default_putc_terminal_ret
087a0     2D 00 64 FD | 	ret
087a4                 | 
087a4                 | __system____default_flush
087a4     0D 5A 05 F6 | 	mov	COUNT_, #13
087a8     B0 00 A0 FD | 	call	#pushregs_
087ac     2F 6D 02 F6 | 	mov	local01, arg01
087b0     36 6F 02 FB | 	rdlong	local02, local01
087b4     37 71 02 FB | 	rdlong	local03, local02
087b8     08 6E 06 F1 | 	add	local02, #8
087bc     37 73 02 FB | 	rdlong	local04, local02
087c0     08 6E 86 F1 | 	sub	local02, #8
087c4     02 72 CE F7 | 	test	local04, #2 wz
087c8     B8 00 90 AD |  if_e	jmp	#LR__0469
087cc     00 70 5E F2 | 	cmps	local03, #0 wcz
087d0     24 01 90 ED |  if_be	jmp	#LR__0471
087d4     08 6C 06 F1 | 	add	local01, #8
087d8     36 73 02 FB | 	rdlong	local04, local01
087dc     08 6C 86 F1 | 	sub	local01, #8
087e0     40 72 CE F7 | 	test	local04, #64 wz
087e4     5C 00 90 AD |  if_e	jmp	#LR__0468
087e8     08 6C 06 F1 | 	add	local01, #8
087ec     36 73 02 FB | 	rdlong	local04, local01
087f0     08 6C 86 F1 | 	sub	local01, #8
087f4     80 72 CE F7 | 	test	local04, #128 wz
087f8     48 00 90 AD |  if_e	jmp	#LR__0467
087fc     2C 6C 06 F1 | 	add	local01, #44
08800     36 73 02 FB | 	rdlong	local04, local01
08804     2C 6C 86 F1 | 	sub	local01, #44
08808     39 75 02 FB | 	rdlong	local05, local04
0880c     04 72 06 F1 | 	add	local04, #4
08810     39 77 02 FB | 	rdlong	local06, local04
08814     36 5F 02 F6 | 	mov	arg01, local01
08818     00 60 06 F6 | 	mov	arg02, #0
0881c     02 62 06 F6 | 	mov	arg03, #2
08820     FD 78 02 F6 | 	mov	local07, objptr
08824     3A FB 01 F6 | 	mov	objptr, local05
08828     2D 76 62 FD | 	call	local06
0882c     3C FB 01 F6 | 	mov	objptr, local07
08830     08 6C 06 F1 | 	add	local01, #8
08834     36 73 02 FB | 	rdlong	local04, local01
08838     80 72 26 F5 | 	andn	local04, #128
0883c     36 73 62 FC | 	wrlong	local04, local01
08840     08 6C 86 F1 | 	sub	local01, #8
08844                 | LR__0467
08844                 | LR__0468
08844     14 6C 06 F1 | 	add	local01, #20
08848     36 73 02 FB | 	rdlong	local04, local01
0884c     14 6C 86 F1 | 	sub	local01, #20
08850     39 75 02 FB | 	rdlong	local05, local04
08854     04 72 06 F1 | 	add	local04, #4
08858     39 77 02 FB | 	rdlong	local06, local04
0885c     0C 6E 06 F1 | 	add	local02, #12
08860     37 61 02 F6 | 	mov	arg02, local02
08864     0C 6E 86 F1 | 	sub	local02, #12
08868     36 5F 02 F6 | 	mov	arg01, local01
0886c     38 63 02 F6 | 	mov	arg03, local03
08870     FD 78 02 F6 | 	mov	local07, objptr
08874     3A FB 01 F6 | 	mov	objptr, local05
08878     2D 76 62 FD | 	call	local06
0887c     3C FB 01 F6 | 	mov	objptr, local07
08880     74 00 90 FD | 	jmp	#LR__0471
08884                 | LR__0469
08884     08 6E 06 F1 | 	add	local02, #8
08888     37 73 02 FB | 	rdlong	local04, local02
0888c     08 6E 86 F1 | 	sub	local02, #8
08890     01 72 CE F7 | 	test	local04, #1 wz
08894     60 00 90 AD |  if_e	jmp	#LR__0470
08898     00 70 0E F2 | 	cmp	local03, #0 wz
0889c     58 00 90 AD |  if_e	jmp	#LR__0470
088a0     2C 6C 06 F1 | 	add	local01, #44
088a4     36 7B 02 FB | 	rdlong	local08, local01
088a8     2C 6C 86 F1 | 	sub	local01, #44
088ac     3D 73 02 F6 | 	mov	local04, local08
088b0     39 75 02 FB | 	rdlong	local05, local04
088b4     04 72 06 F1 | 	add	local04, #4
088b8     39 7D 02 FB | 	rdlong	local09, local04
088bc     3E 77 02 F6 | 	mov	local06, local09
088c0     36 7F 02 F6 | 	mov	local10, local01
088c4     38 81 62 F6 | 	neg	local11, local03
088c8     01 82 06 F6 | 	mov	local12, #1
088cc     3F 5F 02 F6 | 	mov	arg01, local10
088d0     40 61 02 F6 | 	mov	arg02, local11
088d4     01 62 06 F6 | 	mov	arg03, #1
088d8     FD 78 02 F6 | 	mov	local07, objptr
088dc     3A FB 01 F6 | 	mov	objptr, local05
088e0     2D 76 62 FD | 	call	local06
088e4     3C FB 01 F6 | 	mov	objptr, local07
088e8     0C 73 02 F6 | 	mov	local04, result1
088ec     39 85 02 F6 | 	mov	local13, local04
088f0     00 84 5E F2 | 	cmps	local13, #0 wcz
088f4     38 85 02 36 |  if_ae	mov	local13, local03
088f8                 | LR__0470
088f8                 | LR__0471
088f8     37 01 68 FC | 	wrlong	#0, local02
088fc     04 6E 06 F1 | 	add	local02, #4
08900     37 01 68 FC | 	wrlong	#0, local02
08904     04 6E 06 F1 | 	add	local02, #4
08908     37 01 68 FC | 	wrlong	#0, local02
0890c     00 18 06 F6 | 	mov	result1, #0
08910     AF F0 03 F6 | 	mov	ptra, fp
08914     BA 00 A0 FD | 	call	#popregs_
08918                 | __system____default_flush_ret
08918     2D 00 64 FD | 	ret
0891c                 | 
0891c                 | __system___rxtxioctl_0179
0891c     02 5A 05 F6 | 	mov	COUNT_, #2
08920     B0 00 A0 FD | 	call	#pushregs_
08924     30 6D 02 F6 | 	mov	local01, arg02
08928     31 6F 02 F6 | 	mov	local02, arg03
0892c     00 6D 0E F2 | 	cmp	local01, #256 wz
08930     0C 00 90 AD |  if_e	jmp	#LR__0472
08934     01 6D 0E F2 | 	cmp	local01, #257 wz
08938     1C 00 90 AD |  if_e	jmp	#LR__0473
0893c     30 00 90 FD | 	jmp	#LR__0474
08940                 | LR__0472
08940     08 00 06 F1 | 	add	ptr___system__dat__, #8
08944     00 19 02 FB | 	rdlong	result1, ptr___system__dat__
08948     08 00 86 F1 | 	sub	ptr___system__dat__, #8
0894c     37 19 62 FC | 	wrlong	result1, local02
08950     00 18 06 F6 | 	mov	result1, #0
08954     28 00 90 FD | 	jmp	#LR__0475
08958                 | LR__0473
08958     37 5F 02 FB | 	rdlong	arg01, local02
0895c     08 00 06 F1 | 	add	ptr___system__dat__, #8
08960     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
08964     08 00 86 F1 | 	sub	ptr___system__dat__, #8
08968     00 18 06 F6 | 	mov	result1, #0
0896c     10 00 90 FD | 	jmp	#LR__0475
08970                 | LR__0474
08970     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08974     00 15 68 FC | 	wrlong	#10, ptr___system__dat__
08978     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
0897c     01 18 66 F6 | 	neg	result1, #1
08980                 | LR__0475
08980     AF F0 03 F6 | 	mov	ptra, fp
08984     BA 00 A0 FD | 	call	#popregs_
08988                 | __system___rxtxioctl_0179_ret
08988     2D 00 64 FD | 	ret
0898c                 | 
0898c                 | __system____dummy_flush_0180
0898c     00 18 06 F6 | 	mov	result1, #0
08990                 | __system____dummy_flush_0180_ret
08990     2D 00 64 FD | 	ret
08994                 | 
08994                 | __system___vfswrite
08994     0B 5A 05 F6 | 	mov	COUNT_, #11
08998     B0 00 A0 FD | 	call	#pushregs_
0899c     2F 6D 02 F6 | 	mov	local01, arg01
089a0     30 6F 02 F6 | 	mov	local02, arg02
089a4     31 71 02 F6 | 	mov	local03, arg03
089a8     37 73 02 F6 | 	mov	local04, local02
089ac     08 6C 06 F1 | 	add	local01, #8
089b0     36 75 02 FB | 	rdlong	local05, local01
089b4     08 6C 86 F1 | 	sub	local01, #8
089b8     02 74 CE F7 | 	test	local05, #2 wz
089bc     14 00 90 5D |  if_ne	jmp	#LR__0476
089c0     1C 00 06 F1 | 	add	ptr___system__dat__, #28
089c4     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
089c8     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
089cc     01 18 66 F6 | 	neg	result1, #1
089d0     60 01 90 FD | 	jmp	#LR__0484
089d4                 | LR__0476
089d4     08 6C 06 F1 | 	add	local01, #8
089d8     36 75 02 FB | 	rdlong	local05, local01
089dc     08 6C 86 F1 | 	sub	local01, #8
089e0     40 74 CE F7 | 	test	local05, #64 wz
089e4     5C 00 90 AD |  if_e	jmp	#LR__0478
089e8     08 6C 06 F1 | 	add	local01, #8
089ec     36 75 02 FB | 	rdlong	local05, local01
089f0     08 6C 86 F1 | 	sub	local01, #8
089f4     80 74 CE F7 | 	test	local05, #128 wz
089f8     48 00 90 AD |  if_e	jmp	#LR__0477
089fc     2C 6C 06 F1 | 	add	local01, #44
08a00     36 75 02 FB | 	rdlong	local05, local01
08a04     2C 6C 86 F1 | 	sub	local01, #44
08a08     3A 77 02 FB | 	rdlong	local06, local05
08a0c     04 74 06 F1 | 	add	local05, #4
08a10     3A 79 02 FB | 	rdlong	local07, local05
08a14     36 5F 02 F6 | 	mov	arg01, local01
08a18     00 60 06 F6 | 	mov	arg02, #0
08a1c     02 62 06 F6 | 	mov	arg03, #2
08a20     FD 7A 02 F6 | 	mov	local08, objptr
08a24     3B FB 01 F6 | 	mov	objptr, local06
08a28     2D 78 62 FD | 	call	local07
08a2c     3D FB 01 F6 | 	mov	objptr, local08
08a30     08 6C 06 F1 | 	add	local01, #8
08a34     36 75 02 FB | 	rdlong	local05, local01
08a38     80 74 26 F5 | 	andn	local05, #128
08a3c     36 75 62 FC | 	wrlong	local05, local01
08a40     08 6C 86 F1 | 	sub	local01, #8
08a44                 | LR__0477
08a44                 | LR__0478
08a44     14 6C 06 F1 | 	add	local01, #20
08a48     36 75 0A FB | 	rdlong	local05, local01 wz
08a4c     14 6C 86 F1 | 	sub	local01, #20
08a50     74 00 90 AD |  if_e	jmp	#LR__0480
08a54     14 6C 06 F1 | 	add	local01, #20
08a58     36 75 02 FB | 	rdlong	local05, local01
08a5c     14 6C 86 F1 | 	sub	local01, #20
08a60     3A 77 02 FB | 	rdlong	local06, local05
08a64     04 74 06 F1 | 	add	local05, #4
08a68     3A 79 02 FB | 	rdlong	local07, local05
08a6c     37 61 02 F6 | 	mov	arg02, local02
08a70     38 63 02 F6 | 	mov	arg03, local03
08a74     36 5F 02 F6 | 	mov	arg01, local01
08a78     FD 7A 02 F6 | 	mov	local08, objptr
08a7c     3B FB 01 F6 | 	mov	objptr, local06
08a80     2D 78 62 FD | 	call	local07
08a84     3D FB 01 F6 | 	mov	objptr, local08
08a88     0C 7D 02 F6 | 	mov	local09, result1
08a8c     00 7C 5E F2 | 	cmps	local09, #0 wcz
08a90     2C 00 90 3D |  if_ae	jmp	#LR__0479
08a94     08 6C 06 F1 | 	add	local01, #8
08a98     36 75 02 FB | 	rdlong	local05, local01
08a9c     20 74 46 F5 | 	or	local05, #32
08aa0     36 75 62 FC | 	wrlong	local05, local01
08aa4     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08aa8     00 7D 62 FC | 	wrlong	local09, ptr___system__dat__
08aac     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08ab0     00 7C 0E F2 | 	cmp	local09, #0 wz
08ab4     01 18 66 56 |  if_ne	neg	result1, #1
08ab8     00 18 06 A6 |  if_e	mov	result1, #0
08abc     74 00 90 FD | 	jmp	#LR__0484
08ac0                 | LR__0479
08ac0     3E 19 02 F6 | 	mov	result1, local09
08ac4     6C 00 90 FD | 	jmp	#LR__0484
08ac8                 | LR__0480
08ac8     18 6C 06 F1 | 	add	local01, #24
08acc     36 7F 0A FB | 	rdlong	local10, local01 wz
08ad0     18 6C 86 F1 | 	sub	local01, #24
08ad4     14 00 90 5D |  if_ne	jmp	#LR__0481
08ad8     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08adc     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08ae0     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08ae4     01 18 66 F6 | 	neg	result1, #1
08ae8     48 00 90 FD | 	jmp	#LR__0484
08aec                 | LR__0481
08aec     00 7C 06 F6 | 	mov	local09, #0
08af0                 | LR__0482
08af0     00 70 1E F2 | 	cmp	local03, #0 wcz
08af4     38 00 90 ED |  if_be	jmp	#LR__0483
08af8     3F 75 02 F6 | 	mov	local05, local10
08afc     3A 77 02 FB | 	rdlong	local06, local05
08b00     04 74 06 F1 | 	add	local05, #4
08b04     3A 79 02 FB | 	rdlong	local07, local05
08b08     39 5F C2 FA | 	rdbyte	arg01, local04
08b0c     36 61 02 F6 | 	mov	arg02, local01
08b10     FD 80 02 F6 | 	mov	local11, objptr
08b14     3B FB 01 F6 | 	mov	objptr, local06
08b18     01 72 06 F1 | 	add	local04, #1
08b1c     2D 78 62 FD | 	call	local07
08b20     40 FB 01 F6 | 	mov	objptr, local11
08b24     0C 7D 02 F1 | 	add	local09, result1
08b28     01 70 86 F1 | 	sub	local03, #1
08b2c     C0 FF 9F FD | 	jmp	#LR__0482
08b30                 | LR__0483
08b30     3E 19 02 F6 | 	mov	result1, local09
08b34                 | LR__0484
08b34     AF F0 03 F6 | 	mov	ptra, fp
08b38     BA 00 A0 FD | 	call	#popregs_
08b3c                 | __system___vfswrite_ret
08b3c     2D 00 64 FD | 	ret
08b40                 | 
08b40                 | __system___vfsread
08b40     0B 5A 05 F6 | 	mov	COUNT_, #11
08b44     B0 00 A0 FD | 	call	#pushregs_
08b48     28 F0 07 F1 | 	add	ptra, #40
08b4c     04 5E 05 F1 | 	add	fp, #4
08b50     AF 5E 62 FC | 	wrlong	arg01, fp
08b54     04 5E 05 F1 | 	add	fp, #4
08b58     AF 60 62 FC | 	wrlong	arg02, fp
08b5c     04 5E 05 F1 | 	add	fp, #4
08b60     AF 62 62 FC | 	wrlong	arg03, fp
08b64     04 5E 85 F1 | 	sub	fp, #4
08b68     AF 6C 02 FB | 	rdlong	local01, fp
08b6c     14 5E 05 F1 | 	add	fp, #20
08b70     AF 6C 62 FC | 	wrlong	local01, fp
08b74     04 5E 05 F1 | 	add	fp, #4
08b78     AF 00 68 FC | 	wrlong	#0, fp
08b7c     1C 5E 85 F1 | 	sub	fp, #28
08b80     AF 6E 02 FB | 	rdlong	local02, fp
08b84     04 5E 85 F1 | 	sub	fp, #4
08b88     08 6E 06 F1 | 	add	local02, #8
08b8c     37 6D 02 FB | 	rdlong	local01, local02
08b90     01 6C CE F7 | 	test	local01, #1 wz
08b94     14 00 90 5D |  if_ne	jmp	#LR__0485
08b98     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08b9c     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08ba0     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08ba4     01 18 66 F6 | 	neg	result1, #1
08ba8     7C 02 90 FD | 	jmp	#LR__0493
08bac                 | LR__0485
08bac     04 5E 05 F1 | 	add	fp, #4
08bb0     AF 6C 02 FB | 	rdlong	local01, fp
08bb4     04 5E 85 F1 | 	sub	fp, #4
08bb8     10 6C 06 F1 | 	add	local01, #16
08bbc     36 71 0A FB | 	rdlong	local03, local01 wz
08bc0     AC 00 90 AD |  if_e	jmp	#LR__0487
08bc4     04 5E 05 F1 | 	add	fp, #4
08bc8     AF 72 02 FB | 	rdlong	local04, fp
08bcc     10 72 06 F1 | 	add	local04, #16
08bd0     39 6D 02 FB | 	rdlong	local01, local04
08bd4     36 6F 02 FB | 	rdlong	local02, local01
08bd8     04 6C 06 F1 | 	add	local01, #4
08bdc     36 71 02 FB | 	rdlong	local03, local01
08be0     AF 5E 02 FB | 	rdlong	arg01, fp
08be4     04 5E 05 F1 | 	add	fp, #4
08be8     AF 60 02 FB | 	rdlong	arg02, fp
08bec     04 5E 05 F1 | 	add	fp, #4
08bf0     AF 62 02 FB | 	rdlong	arg03, fp
08bf4     0C 5E 85 F1 | 	sub	fp, #12
08bf8     FD 74 02 F6 | 	mov	local05, objptr
08bfc     37 FB 01 F6 | 	mov	objptr, local02
08c00     2D 70 62 FD | 	call	local03
08c04     3A FB 01 F6 | 	mov	objptr, local05
08c08     10 5E 05 F1 | 	add	fp, #16
08c0c     AF 18 62 FC | 	wrlong	result1, fp
08c10     10 5E 85 F1 | 	sub	fp, #16
08c14     00 18 5E F2 | 	cmps	result1, #0 wcz
08c18     44 00 90 3D |  if_ae	jmp	#LR__0486
08c1c     04 5E 05 F1 | 	add	fp, #4
08c20     AF 6C 02 FB | 	rdlong	local01, fp
08c24     36 73 02 F6 | 	mov	local04, local01
08c28     08 72 06 F1 | 	add	local04, #8
08c2c     39 71 02 FB | 	rdlong	local03, local04
08c30     20 70 46 F5 | 	or	local03, #32
08c34     08 6C 06 F1 | 	add	local01, #8
08c38     36 71 62 FC | 	wrlong	local03, local01
08c3c     0C 5E 05 F1 | 	add	fp, #12
08c40     AF 5E 0A FB | 	rdlong	arg01, fp wz
08c44     10 5E 85 F1 | 	sub	fp, #16
08c48     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08c4c     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
08c50     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08c54     01 18 66 56 |  if_ne	neg	result1, #1
08c58     00 18 06 A6 |  if_e	mov	result1, #0
08c5c     C8 01 90 FD | 	jmp	#LR__0493
08c60                 | LR__0486
08c60     10 5E 05 F1 | 	add	fp, #16
08c64     AF 18 02 FB | 	rdlong	result1, fp
08c68     10 5E 85 F1 | 	sub	fp, #16
08c6c     B8 01 90 FD | 	jmp	#LR__0493
08c70                 | LR__0487
08c70     04 5E 05 F1 | 	add	fp, #4
08c74     AF 6C 02 FB | 	rdlong	local01, fp
08c78     1C 6C 06 F1 | 	add	local01, #28
08c7c     36 71 02 FB | 	rdlong	local03, local01
08c80     14 5E 05 F1 | 	add	fp, #20
08c84     AF 70 62 FC | 	wrlong	local03, fp
08c88     AF 6C 0A FB | 	rdlong	local01, fp wz
08c8c     18 5E 85 F1 | 	sub	fp, #24
08c90     14 00 90 5D |  if_ne	jmp	#LR__0488
08c94     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08c98     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08c9c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08ca0     01 18 66 F6 | 	neg	result1, #1
08ca4     80 01 90 FD | 	jmp	#LR__0493
08ca8                 | LR__0488
08ca8     04 5E 05 F1 | 	add	fp, #4
08cac     AF 6C 02 FB | 	rdlong	local01, fp
08cb0     04 5E 85 F1 | 	sub	fp, #4
08cb4     24 6C 06 F1 | 	add	local01, #36
08cb8     36 71 0A FB | 	rdlong	local03, local01 wz
08cbc     94 00 90 AD |  if_e	jmp	#LR__0490
08cc0     04 5E 05 F1 | 	add	fp, #4
08cc4     AF 76 02 FB | 	rdlong	local06, fp
08cc8     3B 73 02 F6 | 	mov	local04, local06
08ccc     24 72 06 F1 | 	add	local04, #36
08cd0     39 79 02 FB | 	rdlong	local07, local04
08cd4     3C 6D 02 F6 | 	mov	local01, local07
08cd8     36 6F 02 FB | 	rdlong	local02, local01
08cdc     04 6C 06 F1 | 	add	local01, #4
08ce0     36 7B 02 FB | 	rdlong	local08, local01
08ce4     3D 71 02 F6 | 	mov	local03, local08
08ce8     3B 7D 02 F6 | 	mov	local09, local06
08cec     00 7F 06 F6 | 	mov	local10, #256
08cf0     20 5E 05 F1 | 	add	fp, #32
08cf4     AF 80 02 F6 | 	mov	local11, fp
08cf8     3E 5F 02 F6 | 	mov	arg01, local09
08cfc     00 61 06 F6 | 	mov	arg02, #256
08d00     40 63 02 F6 | 	mov	arg03, local11
08d04     FD 74 02 F6 | 	mov	local05, objptr
08d08     37 FB 01 F6 | 	mov	objptr, local02
08d0c     24 5E 85 F1 | 	sub	fp, #36
08d10     2D 70 62 FD | 	call	local03
08d14     3A FB 01 F6 | 	mov	objptr, local05
08d18     10 5E 05 F1 | 	add	fp, #16
08d1c     AF 18 62 FC | 	wrlong	result1, fp
08d20     AF 6E 0A FB | 	rdlong	local02, fp wz
08d24     10 5E 85 F1 | 	sub	fp, #16
08d28     28 00 90 5D |  if_ne	jmp	#LR__0489
08d2c     24 5E 05 F1 | 	add	fp, #36
08d30     AF 72 02 FB | 	rdlong	local04, fp
08d34     24 5E 85 F1 | 	sub	fp, #36
08d38     39 71 02 F6 | 	mov	local03, local04
08d3c     02 70 0E F5 | 	and	local03, #2 wz
08d40     10 00 90 AD |  if_e	jmp	#LR__0489
08d44     01 6C 06 F6 | 	mov	local01, #1
08d48     20 5E 05 F1 | 	add	fp, #32
08d4c     AF 02 68 FC | 	wrlong	#1, fp
08d50     20 5E 85 F1 | 	sub	fp, #32
08d54                 | LR__0489
08d54                 | LR__0490
08d54     10 5E 05 F1 | 	add	fp, #16
08d58     AF 00 68 FC | 	wrlong	#0, fp
08d5c     10 5E 85 F1 | 	sub	fp, #16
08d60                 | LR__0491
08d60     0C 5E 05 F1 | 	add	fp, #12
08d64     AF 6C 02 FB | 	rdlong	local01, fp
08d68     0C 5E 85 F1 | 	sub	fp, #12
08d6c     00 6C 1E F2 | 	cmp	local01, #0 wcz
08d70     A8 00 90 ED |  if_be	jmp	#LR__0492
08d74     18 5E 05 F1 | 	add	fp, #24
08d78     AF 6C 02 FB | 	rdlong	local01, fp
08d7c     36 6F 02 FB | 	rdlong	local02, local01
08d80     04 6C 06 F1 | 	add	local01, #4
08d84     36 71 02 FB | 	rdlong	local03, local01
08d88     14 5E 85 F1 | 	sub	fp, #20
08d8c     AF 5E 02 FB | 	rdlong	arg01, fp
08d90     04 5E 85 F1 | 	sub	fp, #4
08d94     FD 7A 02 F6 | 	mov	local08, objptr
08d98     37 FB 01 F6 | 	mov	objptr, local02
08d9c     2D 70 62 FD | 	call	local03
08da0     3D FB 01 F6 | 	mov	objptr, local08
08da4     14 5E 05 F1 | 	add	fp, #20
08da8     AF 18 62 FC | 	wrlong	result1, fp
08dac     14 5E 85 F1 | 	sub	fp, #20
08db0     00 18 5E F2 | 	cmps	result1, #0 wcz
08db4     64 00 90 CD |  if_b	jmp	#LR__0492
08db8     1C 5E 05 F1 | 	add	fp, #28
08dbc     AF 6C 02 FB | 	rdlong	local01, fp
08dc0     36 71 02 F6 | 	mov	local03, local01
08dc4     01 70 06 F1 | 	add	local03, #1
08dc8     AF 70 62 FC | 	wrlong	local03, fp
08dcc     08 5E 85 F1 | 	sub	fp, #8
08dd0     AF 76 02 FB | 	rdlong	local06, fp
08dd4     36 77 42 FC | 	wrbyte	local06, local01
08dd8     04 5E 85 F1 | 	sub	fp, #4
08ddc     AF 6C 02 FB | 	rdlong	local01, fp
08de0     01 6C 06 F1 | 	add	local01, #1
08de4     AF 6C 62 FC | 	wrlong	local01, fp
08de8     04 5E 85 F1 | 	sub	fp, #4
08dec     AF 6C 02 FB | 	rdlong	local01, fp
08df0     01 6C 86 F1 | 	sub	local01, #1
08df4     AF 6C 62 FC | 	wrlong	local01, fp
08df8     14 5E 05 F1 | 	add	fp, #20
08dfc     AF 6C 0A FB | 	rdlong	local01, fp wz
08e00     20 5E 85 F1 | 	sub	fp, #32
08e04     58 FF 9F AD |  if_e	jmp	#LR__0491
08e08     14 5E 05 F1 | 	add	fp, #20
08e0c     AF 70 02 FB | 	rdlong	local03, fp
08e10     14 5E 85 F1 | 	sub	fp, #20
08e14     0A 70 0E F2 | 	cmp	local03, #10 wz
08e18     44 FF 9F 5D |  if_ne	jmp	#LR__0491
08e1c                 | LR__0492
08e1c     10 5E 05 F1 | 	add	fp, #16
08e20     AF 18 02 FB | 	rdlong	result1, fp
08e24     10 5E 85 F1 | 	sub	fp, #16
08e28                 | LR__0493
08e28     AF F0 03 F6 | 	mov	ptra, fp
08e2c     BA 00 A0 FD | 	call	#popregs_
08e30                 | __system___vfsread_ret
08e30     2D 00 64 FD | 	ret
08e34                 | 
08e34                 | __system____default_filbuf
08e34     06 5A 05 F6 | 	mov	COUNT_, #6
08e38     B0 00 A0 FD | 	call	#pushregs_
08e3c     2F 6D 02 FB | 	rdlong	local01, arg01
08e40     10 5E 06 F1 | 	add	arg01, #16
08e44     2F 6F 02 FB | 	rdlong	local02, arg01
08e48     10 5E 86 F1 | 	sub	arg01, #16
08e4c     37 71 02 FB | 	rdlong	local03, local02
08e50     04 6E 06 F1 | 	add	local02, #4
08e54     37 73 02 FB | 	rdlong	local04, local02
08e58     0C 6C 06 F1 | 	add	local01, #12
08e5c     36 61 02 F6 | 	mov	arg02, local01
08e60     0C 6C 86 F1 | 	sub	local01, #12
08e64     0A 62 C6 F9 | 	decod	arg03, #10
08e68     FD 74 02 F6 | 	mov	local05, objptr
08e6c     38 FB 01 F6 | 	mov	objptr, local03
08e70     2D 72 62 FD | 	call	local04
08e74     3A FB 01 F6 | 	mov	objptr, local05
08e78     0C 77 02 F6 | 	mov	local06, result1
08e7c     00 76 5E F2 | 	cmps	local06, #0 wcz
08e80     01 18 66 C6 |  if_b	neg	result1, #1
08e84     28 00 90 CD |  if_b	jmp	#LR__0494
08e88     36 77 62 FC | 	wrlong	local06, local01
08e8c     0C 6C 06 F1 | 	add	local01, #12
08e90     36 6F 02 F6 | 	mov	local02, local01
08e94     08 6C 86 F1 | 	sub	local01, #8
08e98     36 6F 62 FC | 	wrlong	local02, local01
08e9c     04 6C 06 F1 | 	add	local01, #4
08ea0     36 6F 02 FB | 	rdlong	local02, local01
08ea4     01 6E 46 F5 | 	or	local02, #1
08ea8     36 6F 62 FC | 	wrlong	local02, local01
08eac     3B 19 02 F6 | 	mov	result1, local06
08eb0                 | LR__0494
08eb0     AF F0 03 F6 | 	mov	ptra, fp
08eb4     BA 00 A0 FD | 	call	#popregs_
08eb8                 | __system____default_filbuf_ret
08eb8     2D 00 64 FD | 	ret
08ebc                 | 
08ebc                 | ' 	
08ebc                 | ' 	FUNCTION pfunc(c as integer) as integer
08ebc                 | ___strs_cl_pfunc
08ebc                 | ' 		if (i < 16) then
08ebc     04 FA 05 F1 | 	add	objptr, #4
08ec0     FD 1E 02 FB | 	rdlong	_var01, objptr
08ec4     04 FA 85 F1 | 	sub	objptr, #4
08ec8     10 1E 5E F2 | 	cmps	_var01, #16 wcz
08ecc     2C 00 90 3D |  if_ae	jmp	#LR__0495
08ed0     FD 20 02 FB | 	rdlong	_var02, objptr
08ed4     04 FA 05 F1 | 	add	objptr, #4
08ed8     FD 22 02 FB | 	rdlong	_var03, objptr
08edc     10 23 02 F1 | 	add	_var03, _var02
08ee0     11 5F 42 FC | 	wrbyte	arg01, _var03
08ee4     FD 1E 02 FB | 	rdlong	_var01, objptr
08ee8     01 1E 06 F1 | 	add	_var01, #1
08eec     FD 1E 62 FC | 	wrlong	_var01, objptr
08ef0     04 FA 85 F1 | 	sub	objptr, #4
08ef4                 | ' 			p(i) = c
08ef4                 | ' 			i = i+1
08ef4                 | ' 			return 1
08ef4     01 18 06 F6 | 	mov	result1, #1
08ef8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
08efc                 | LR__0495
08efc                 | ' 			return -1
08efc     01 18 66 F6 | 	neg	result1, #1
08f00                 | ___strs_cl_pfunc_ret
08f00     2D 00 64 FD | 	ret
08f04                 | 
08f04                 | __struct__s_vfs_file_t_putchar
08f04     04 5A 05 F6 | 	mov	COUNT_, #4
08f08     B0 00 A0 FD | 	call	#pushregs_
08f0c     18 FA 05 F1 | 	add	objptr, #24
08f10     FD 6C 0A FB | 	rdlong	local01, objptr wz
08f14     18 FA 85 F1 | 	sub	objptr, #24
08f18     00 18 06 A6 |  if_e	mov	result1, #0
08f1c     3C 00 90 AD |  if_e	jmp	#LR__0496
08f20     18 FA 05 F1 | 	add	objptr, #24
08f24     FD 6C 02 FB | 	rdlong	local01, objptr
08f28     18 FA 85 F1 | 	sub	objptr, #24
08f2c     36 6F 02 FB | 	rdlong	local02, local01
08f30     04 6C 06 F1 | 	add	local01, #4
08f34     36 71 02 FB | 	rdlong	local03, local01
08f38     FD 60 02 F6 | 	mov	arg02, objptr
08f3c     FD 72 02 F6 | 	mov	local04, objptr
08f40     37 FB 01 F6 | 	mov	objptr, local02
08f44     2D 70 62 FD | 	call	local03
08f48     39 FB 01 F6 | 	mov	objptr, local04
08f4c     00 18 5E F2 | 	cmps	result1, #0 wcz
08f50     00 6C 06 C6 |  if_b	mov	local01, #0
08f54     01 6C 06 36 |  if_ae	mov	local01, #1
08f58     36 19 02 F6 | 	mov	result1, local01
08f5c                 | LR__0496
08f5c     AF F0 03 F6 | 	mov	ptra, fp
08f60     BA 00 A0 FD | 	call	#popregs_
08f64                 | __struct__s_vfs_file_t_putchar_ret
08f64     2D 00 64 FD | 	ret
08f68                 | 
08f68                 | __struct__s_vfs_file_t_getchar
08f68     04 5A 05 F6 | 	mov	COUNT_, #4
08f6c     B0 00 A0 FD | 	call	#pushregs_
08f70     1C FA 05 F1 | 	add	objptr, #28
08f74     FD 6C 0A FB | 	rdlong	local01, objptr wz
08f78     1C FA 85 F1 | 	sub	objptr, #28
08f7c     01 18 66 A6 |  if_e	neg	result1, #1
08f80     2C 00 90 AD |  if_e	jmp	#LR__0497
08f84                 | '         return getcf(__this);
08f84     1C FA 05 F1 | 	add	objptr, #28
08f88     FD 6C 02 FB | 	rdlong	local01, objptr
08f8c     1C FA 85 F1 | 	sub	objptr, #28
08f90     36 6F 02 FB | 	rdlong	local02, local01
08f94     04 6C 06 F1 | 	add	local01, #4
08f98     36 71 02 FB | 	rdlong	local03, local01
08f9c     FD 5E 02 F6 | 	mov	arg01, objptr
08fa0     FD 72 02 F6 | 	mov	local04, objptr
08fa4     37 FB 01 F6 | 	mov	objptr, local02
08fa8     2D 70 62 FD | 	call	local03
08fac     39 FB 01 F6 | 	mov	objptr, local04
08fb0                 | LR__0497
08fb0     AF F0 03 F6 | 	mov	ptra, fp
08fb4     BA 00 A0 FD | 	call	#popregs_
08fb8                 | __struct__s_vfs_file_t_getchar_ret
08fb8     2D 00 64 FD | 	ret
08fbc                 | 
08fbc                 | __struct___bas_wrap_sender_tx
08fbc     04 5A 05 F6 | 	mov	COUNT_, #4
08fc0     B0 00 A0 FD | 	call	#pushregs_
08fc4     FD 6C 02 FB | 	rdlong	local01, objptr
08fc8     36 6F 02 FB | 	rdlong	local02, local01
08fcc     04 6C 06 F1 | 	add	local01, #4
08fd0     36 71 02 FB | 	rdlong	local03, local01
08fd4     FD 72 02 F6 | 	mov	local04, objptr
08fd8     37 FB 01 F6 | 	mov	objptr, local02
08fdc     2D 70 62 FD | 	call	local03
08fe0     39 FB 01 F6 | 	mov	objptr, local04
08fe4     01 18 06 F6 | 	mov	result1, #1
08fe8     AF F0 03 F6 | 	mov	ptra, fp
08fec     BA 00 A0 FD | 	call	#popregs_
08ff0                 | __struct___bas_wrap_sender_tx_ret
08ff0     2D 00 64 FD | 	ret
08ff4                 | 
08ff4                 | LR__0498
08ff4     20          | 	byte	" "
08ff5     00          | 	byte	0
08ff6                 | LR__0499
08ff6                 | 	byte	
08ff6     00          | 	byte	0
08ff7                 | LR__0500
08ff7                 | 	byte	
08ff7     00          | 	byte	0
08ff8                 | LR__0501
08ff8     20 21 21 21 
08ffc     20 63 6F 72 
09000     72 75 70 74 
09004     65 64 20 68 
09008     65 61 70 3F 
0900c     3F 3F 20 21 
09010     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
09013     00          | 	byte	0
09014                 | LR__0502
09014     20 21 21 21 
09018     20 6F 75 74 
0901c     20 6F 66 20 
09020     68 65 61 70 
09024     20 6D 65 6D 
09028     6F 72 79 20 
0902c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
09030     00          | 	byte	0
09031                 | LR__0503
09031     20 21 21 21 
09035     20 63 6F 72 
09039     72 75 70 74 
0903d     65 64 20 68 
09041     65 61 70 20 
09045     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
09049     00          | 	byte	0
0904a                 | LR__0504
0904a     4E 61 6D 65 
0904e     20 20 20 20 
09052     20 20 20 20 
09056     20 20 20 20 
0905a     20 20 20 20 
0905e     20 20 20 6C 
09062     65 6E 20 20 
09066     20 66 74 20 
0906a     76 6F 6C 20 
0906e     72 65 70 20 
09072     20 20 72 2E 
09076     6C 65 6E 20 
0907a     20 20 20 20 
0907e     20 20 20 20 
09082     4E 61 6D 65 
09086     20 20 20 20 
0908a     20 20 20 20 
0908e     20 20 20 20 
09092     20 20 20 20 
09096     20 20 20 6C 
0909a     65 6E 20 20 
0909e     20 66 74 20 
090a2     76 6F 6C 20 
090a6     72 65 70 20 
090aa     20 20 72 2E 
090ae     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
090b2     00          | 	byte	0
090b3                 | LR__0505
090b3     53          | 	byte	"S"
090b4     00          | 	byte	0
090b5                 | LR__0506
090b5     41 62 63 64 
090b9     65 66       | 	byte	"Abcdef"
090bb     00          | 	byte	0
090bc                 | LR__0507
090bc     20 20 20 20 
090c0     20 20 20 20 
090c4     20 20 20 20 
090c8     20 20 20 20 
090cc     20 20 20 20 
090d0     20 20       | 	byte	"                      "
090d2     00          | 	byte	0
090d3                 | LR__0508
090d3                 | 	byte	
090d3     00          | 	byte	0
090d4                 | LR__0509
090d4     20          | 	byte	" "
090d5     00          | 	byte	0
090d6                 | LR__0510
090d6     73 61 6D 70 
090da     6C 65 73 20 
090de     6D 6F 64 75 
090e2     6C 65       | 	byte	"samples module"
090e4     00          | 	byte	0
090e5     00 00 00    | 	alignl
090e8                 | _dat_
090e8     23 23 20 62 
090ec     61 6C 6C 61 
090f0     64 61 20 23 
090f4     23 00 00 00 | module file "ballada.mod"
090f8     00 00 00 00 
090fc     78 74 64 20 
09100     2F 20 75 6E 
09104     69 6F 6E 20 | 	byte	$00, $00, $00, $00, $78, $74, $64, $20, $2f, $20, $75, $6e, $69, $6f, $6e, $20
09108     28 63 69 61 
0910c     29 00 00 00 
09110     00 00 0A ED 
09114     00 40 0A 66 | 	byte	$28, $63, $69, $61, $29, $00, $00, $00, $00, $00, $0a, $ed, $00, $40, $0a, $66
09118     00 87 2A 2A 
0911c     20 31 38 2E 
09120     30 31 2E 31 
09124     39 39 32 20 | 	byte	$00, $87, $2a, $2a, $20, $31, $38, $2e, $30, $31, $2e, $31, $39, $39, $32, $20
09128     2A 2A 00 00 
0912c     00 00 00 00 
09130     09 FE 00 40 
09134     07 A3 02 5A | 	byte	$2a, $2a, $00, $00, $00, $00, $00, $00, $09, $fe, $00, $40, $07, $a3, $02, $5a
09138     00 00 00 00 
0913c     00 00 00 00 
09140     00 00 00 00 
09144     00 00 00 00 
09148     00 00 00 00 
0914c     00 00       | 	byte	$00[22]
0914e     05 07 00 40 
09152     00 00 00 01 
09156     00 00 00 00 
0915a     00 00 00 00 | 	byte	$05, $07, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0915e     00 00 00 00 
09162     00 00 00 00 
09166     00 00 00 00 
0916a     00 00       | 	byte	$00[14]
0916c     03 2A 00 40 
09170     02 C5 00 65 
09174     00 00 00 00 
09178     00 00 00 00 | 	byte	$03, $2a, $00, $40, $02, $c5, $00, $65, $00, $00, $00, $00, $00, $00, $00, $00
0917c     00 00 00 00 
09180     00 00 00 00 
09184     00 00 00 00 
09188     00 00       | 	byte	$00[14]
0918a     0A 01 00 30 
0918e     03 55 06 AC 
09192     00 00 00 00 
09196     00 00 00 00 | 	byte	$0a, $01, $00, $30, $03, $55, $06, $ac, $00, $00, $00, $00, $00, $00, $00, $00
0919a     00 00 00 00 
0919e     00 00 00 00 
091a2     00 00 00 00 
091a6     00 00       | 	byte	$00[14]
091a8     09 AA 00 30 
091ac     03 F4 05 B6 
091b0     00 00 00 00 
091b4     00 00 00 00 | 	byte	$09, $aa, $00, $30, $03, $f4, $05, $b6, $00, $00, $00, $00, $00, $00, $00, $00
091b8     00 00 00 00 
091bc     00 00 00 00 
091c0     00 00 00 00 
091c4     00 00       | 	byte	$00[14]
091c6     01 E6 00 40 
091ca     01 97 00 4F 
091ce     00 00 00 00 
091d2     00 00 00 00 | 	byte	$01, $e6, $00, $40, $01, $97, $00, $4f, $00, $00, $00, $00, $00, $00, $00, $00
091d6     00 00 00 00 
091da     00 00 00 00 
091de     00 00 00 00 
091e2     00 00 00 00 
091e6     00 00 00 00 
091ea     00          | 	byte	$00[21]
091eb     01 00 00 00 
091ef     00 00 00 00 
091f3     00 00 00 00 
091f7     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
091fb     00 00 00 00 
091ff     00 00 00    | 	byte	$00[7]
09202     08 FB 00 40 
09206     01 EA 07 11 
0920a     00 00 00 00 
0920e     00 00 00 00 | 	byte	$08, $fb, $00, $40, $01, $ea, $07, $11, $00, $00, $00, $00, $00, $00, $00, $00
09212     00 00 00 00 
09216     00 00 00 00 
0921a     00 00 00 00 
0921e     00 00       | 	byte	$00[14]
09220     04 5E 00 40 
09224     00 00 00 01 
09228     00 00 00 00 
0922c     00 00 00 00 | 	byte	$04, $5e, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
09230     00 00 00 00 
09234     00 00 00 00 
09238     00 00 00 00 
0923c     00 00       | 	byte	$00[14]
0923e     08 EC 00 40 
09242     03 5C 05 90 
09246     00 00 00 00 
0924a     00 00 00 00 | 	byte	$08, $ec, $00, $40, $03, $5c, $05, $90, $00, $00, $00, $00, $00, $00, $00, $00
0924e     00 00 00 00 
09252     00 00 00 00 
09256     00 00 00 00 
0925a     00 00 00 00 
0925e     00 00 00 00 
09262     00          | 	byte	$00[21]
09263     01 00 00 00 
09267     00 00 00 00 
0926b     00 00 00 00 
0926f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09273     00 00 00 00 
09277     00 00 00    | 	byte	$00[7]
0927a     07 0E 00 30 
0927e     00 00 00 01 
09282     00 00 00 00 
09286     00 00 00 00 | 	byte	$07, $0e, $00, $30, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0928a     00 00 00 00 
0928e     00 00 00 00 
09292     00 00 00 00 
09296     00 00 00 00 
0929a     00 00 00 00 
0929e     00          | 	byte	$00[21]
0929f     01 00 00 00 
092a3     00 00 00 00 
092a7     00 00 00 00 
092ab     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
092af     00 00 00 00 
092b3     00 00 00 00 
092b7     00 00 00 00 
092bb     00 00       | 	byte	$00[14]
092bd     01 00 00 00 
092c1     00 00 00 00 
092c5     00 00 00 00 
092c9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
092cd     00 00 00 00 
092d1     00 00 00 00 
092d5     00 00 00 00 
092d9     00 00       | 	byte	$00[14]
092db     01 00 00 00 
092df     00 00 00 00 
092e3     00 00 00 00 
092e7     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
092eb     00 00 00 00 
092ef     00 00 00 00 
092f3     00 00 00 00 
092f7     00 00       | 	byte	$00[14]
092f9     01 00 00 00 
092fd     00 00 00 00 
09301     00 00 00 00 
09305     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09309     00 00 00 00 
0930d     00 00 00 00 
09311     00 00 00 00 
09315     00 00       | 	byte	$00[14]
09317     01 00 00 00 
0931b     00 00 00 00 
0931f     00 00 00 00 
09323     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09327     00 00 00 00 
0932b     00 00 00 00 
0932f     00 00 00 00 
09333     00 00       | 	byte	$00[14]
09335     01 00 00 00 
09339     00 00 00 00 
0933d     00 00 00 00 
09341     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09345     00 00 00 00 
09349     00 00 00 00 
0934d     00 00 00 00 
09351     00 00       | 	byte	$00[14]
09353     01 00 00 00 
09357     00 00 00 00 
0935b     00 00 00 00 
0935f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09363     00 00 00 00 
09367     00 00 00 00 
0936b     00 00 00 00 
0936f     00 00       | 	byte	$00[14]
09371     01 00 00 00 
09375     00 00 00 00 
09379     00 00 00 00 
0937d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09381     00 00 00 00 
09385     00 00 00 00 
09389     00 00 00 00 
0938d     00 00       | 	byte	$00[14]
0938f     01 00 00 00 
09393     00 00 00 00 
09397     00 00 00 00 
0939b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0939f     00 00 00 00 
093a3     00 00 00 00 
093a7     00 00 00 00 
093ab     00 00       | 	byte	$00[14]
093ad     01 00 00 00 
093b1     00 00 00 00 
093b5     00 00 00 00 
093b9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093bd     00 00 00 00 
093c1     00 00 00 00 
093c5     00 00 00 00 
093c9     00 00       | 	byte	$00[14]
093cb     01 00 00 00 
093cf     00 00 00 00 
093d3     00 00 00 00 
093d7     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093db     00 00 00 00 
093df     00 00 00 00 
093e3     00 00 00 00 
093e7     00 00       | 	byte	$00[14]
093e9     01 00 00 00 
093ed     00 00 00 00 
093f1     00 00 00 00 
093f5     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093f9     00 00 00 00 
093fd     00 00 00 00 
09401     00 00 00 00 
09405     00 00       | 	byte	$00[14]
09407     01 00 00 00 
0940b     00 00 00 00 
0940f     00 00 00 00 
09413     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09417     00 00 00 00 
0941b     00 00 00 00 
0941f     00 00 00 00 
09423     00 00       | 	byte	$00[14]
09425     01 00 00 00 
09429     00 00 00 00 
0942d     00 00 00 00 
09431     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09435     00 00 00 00 
09439     00 00 00 00 
0943d     00 00 00 00 
09441     00 00       | 	byte	$00[14]
09443     01 00 00 00 
09447     00 00 00 00 
0944b     00 00 00 00 
0944f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09453     00 00 00 00 
09457     00 00 00 00 
0945b     00 00 00 00 
0945f     00 00       | 	byte	$00[14]
09461     01 00 00 00 
09465     00 00 00 00 
09469     00 00 00 00 
0946d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09471     00 00 00 00 
09475     00 00 00 00 
09479     00 00 00 00 
0947d     00 00       | 	byte	$00[14]
0947f     01 00 00 00 
09483     00 00 00 00 
09487     00 00 00 00 
0948b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0948f     00 00 00 00 
09493     00 00 00 00 
09497     00 00 00 00 
0949b     00 00       | 	byte	$00[14]
0949d     01 19 7F 00 
094a1     01 02 04 03 
094a5     05 06 07 03 
094a9     08 09 0A 0B | 	byte	$01, $19, $7f, $00, $01, $02, $04, $03, $05, $06, $07, $03, $08, $09, $0a, $0b
094ad     0C 0D 0E 0F 
094b1     0C 0D 10 11 
094b5     12 14 12 13 
094b9     00 00 00 00 | 	byte	$0c, $0d, $0e, $0f, $0c, $0d, $10, $11, $12, $14, $12, $13, $00, $00, $00, $00
094bd     00 00 00 00 
      ...             
09519     00 00 00 00 
0951d     00 00 00    | 	byte	$00[99]
09520     4D 2E 4B 2E 
09524     01 7D 1C 10 
09528     00 00 0F 05 
0952c     00 00 0F 73 | 	byte	$4d, $2e, $4b, $2e, $01, $7d, $1c, $10, $00, $00, $0f, $05, $00, $00, $0f, $73
09530     00 00 0C 00 
09534     00 00 00 00 
09538     00 00 0C 00 
0953c     00 00 00 00 | 	byte	$00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00
09540     00 00 00 00 
      ...             
09568     00 00 00 00 
0956c     00 00 00 00 | 	byte	$00[48]
09570     01 7D 1C 10 
09574     01 53 1C 18 
09578     00 00 00 00 
0957c     00 00 00 00 | 	byte	$01, $7d, $1c, $10, $01, $53, $1c, $18, $00, $00, $00, $00, $00, $00, $00, $00
09580     00 00 00 00 
09584     00 00       | 	byte	$00[6]
09586     0C 10 00 00 
0958a     00 00 00 00 
0958e     00 00 01 40 
09592     1C 20 00 00 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $1c, $20, $00, $00
09596     00 00 00 00 
0959a     00 00 00 00 
0959e     00 00 00 00 
095a2     00 00 00    | 	byte	$00[15]
095a5     FE 1C 30 00 
095a9     00 00 00 00 
095ad     00 00 00 00 
095b1     00 0C 18 00 | 	byte	$fe, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $18, $00
095b5     00 00 00 00 
095b9     00 00 00 00 
095bd     00 00 00 00 
095c1     00 00 00 00 
095c5     00          | 	byte	$00[17]
095c6     0C 20 00 00 
095ca     00 00 00 00 
095ce     00 00 01 1D 
095d2     10 00 00 00 | 	byte	$0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $00
095d6     00 00 00 00 
095da     00 00 00 00 
095de     00 00 00 00 
095e2     00 00 00    | 	byte	$00[15]
095e5     BE 10 00 00 
095e9     00 00 00 00 
095ed     00 00 00 01 
095f1     7D 10 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00
095f5     00 00 00 00 
095f9     00 00 00 00 
095fd     00 00 00 00 
09601     00 00 00 00 | 	byte	$00[16]
09605     BE 1A 06 00 
09609     00 00 00 00 
0960d     00 00 00 00 
09611     00 00 00 00 | 	byte	$be, $1a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09615     A0 0E 93 00 
09619     00 00 00 00 
0961d     00 00 00 00 
09621     00 00 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09625     7F 10 00 00 
09629     00 00 00 00 
0962d     00 00 00 00 
09631     00 00 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09635     00 00 00 00 
09639     00 00 00 00 
0963d     00 00 00 00 | 	byte	$00[12]
09641     BE 1C 20 00 
09645     8F 10 00 00 
09649     00 00 00 00 
0964d     00 00 00 01 | 	byte	$be, $1c, $20, $00, $8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09651     AC 1C 30 00 
09655     00 00 00 00 
09659     00 00 00 00 
0965d     00 00 00 00 | 	byte	$ac, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09661     00 00 00 00 
09665     A0 0E 93 00 
09669     00 00 00 00 
0966d     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
09671     00 00 00 00 
09675     A0 10 00 00 
09679     00 00 00 00 
0967d     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09681     00 00 00 00 
09685     AA 10 00 00 
09689     00 00 00 00 
0968d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09691     00 00 00 00 
09695     00          | 	byte	$00[5]
09696     0A 06 00 00 
0969a     00 00 00 00 
0969e     00 00 00 00 
096a2     00 00 00 BE | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
096a6     10 00 00 00 
096aa     00 00 00 00 
096ae     00 00 01 7D 
096b2     10 00 00 00 | 	byte	$10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
096b6     00 00 00 00 
096ba     00 00 00 00 
096be     00 00 00 00 
096c2     00 00 00    | 	byte	$00[15]
096c5     FE 10 00 00 
096c9     00 00 00 00 
096cd     00 00 00 00 
096d1     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
096d5     00 00 00 00 
096d9     00 00 00 00 
096dd     00 00 00 00 
096e1     00 00 00 00 
096e5     00 00 00 00 
096e9     00 00 00 00 
096ed     00 00 00 00 | 	byte	$00[28]
096f1     BE 10 00 00 
096f5     FE 1C 20 00 
096f9     00 00 00 00 
096fd     00 00 00 00 | 	byte	$be, $10, $00, $00, $fe, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
09701     00 00 00 00 
09705     AA 10 00 00 
09709     00 00 00 00 
0970d     00 00 00 01 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09711     AC 10 00 00 
09715     00 00 00 00 
09719     00 00 00 00 
0971d     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09721     00 00 00 00 
09725     D6 10 00 00 
09729     00 00 00 00 
0972d     00 00 00 00 | 	byte	$00, $00, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09731     00 00 00 00 
      ...             
09749     00 00 00 00 
0974d     00 00 00 00 | 	byte	$00[32]
09751     AA 10 00 00 
09755     00 00 00 00 
09759     00 00 00 00 
0975d     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09761     00 00 00 00 
09765     A0 10 00 00 
09769     00 00 00 00 
0976d     00 00 00 01 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
09771     E0 1C 30 00 
09775     00 00 00 00 
09779     00 00 00 00 
0977d     00 00 00 00 | 	byte	$e0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09781     00 00 00 00 
09785     AA 10 00 00 
09789     00 00 00 00 
0978d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09791     00 00 00 00 
09795     00 00 00 00 
09799     00 00 00 00 
0979d     00 00 00 00 | 	byte	$00[16]
097a1     BE 10 00 00 
097a5     AA 10 00 00 
097a9     00 00 00 00 
097ad     00 00 00 01 | 	byte	$be, $10, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
097b1     AC 10 00 00 
097b5     00 00 00 00 
097b9     00 00 00 00 
097bd     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097c1     00 00 00 00 
097c5     BE 14 C1 00 
097c9     00 00 00 00 
097cd     00 00 00 01 | 	byte	$00, $00, $00, $00, $be, $14, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $01
097d1     7D 10 00 00 
097d5     00 06 02 00 
097d9     00 00 00 00 
097dd     00 00 00 00 | 	byte	$7d, $10, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
097e1     00 0A 02 00 
097e5     00 06 02 00 
097e9     00 00 00 00 
097ed     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
097f1     00 0A 02 00 
097f5     00 06 02 00 
097f9     00 00 00 00 
097fd     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09801     00 0A 02 00 
09805     A0 10 00 00 
09809     00 00 00 00 
0980d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09811     00 0A 02 00 
09815     8F 1D 01 00 
09819     00 00 00 00 
0981d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $8f, $1d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
09821     00 0A 02 00 
09825     00 00 00 00 
09829     00 00 00 00 
0982d     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09831     00 00 00 00 
      ...             
09921     00 00 00 00 
09925     00          | 	byte	$00[245]
09926     0B 01 00 00 
0992a     00 00 00 00 
0992e     00 00 00 00 
09932     00 00 00 7F | 	byte	$0b, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
09936     1F 05 00 BE 
0993a     2A 02 00 00 
0993e     00 00 01 7D 
09942     10 00 00 00 | 	byte	$1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
09946     00 00 00 00 
0994a     0A 02 00 00 
0994e     00 00 00 00 
09952     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09956     10 00 00 00 
0995a     0A 02 00 00 
0995e     00 00 00 00 
09962     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
09966     1C 20 00 00 
0996a     0A 02 00 00 
0996e     00 00 00 00 
09972     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
09976     10 00 00 BE 
0997a     0A 02 00 00 
0997e     00 00 00 00 
09982     0A 02 00 00 | 	byte	$10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
09986     00 00 00 00 
0998a     0A 02 00 00 
0998e     00 00 00 00 
09992     0A 02 00 F0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0
09996     40 00 00 F0 
0999a     2A 02 00 00 
0999e     00 00 01 E0 
099a2     10 00 00 00 | 	byte	$40, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
099a6     00 00 00 00 
099aa     0A 02 00 00 
099ae     00 00 00 00 
099b2     00 00 00 D6 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
099b6     4A 06 00 00 
099ba     0A 02 00 00 
099be     00 00 00 00 
099c2     00 00 00 F0 | 	byte	$4a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
099c6     0E 93 00 00 
099ca     0A 02 00 00 
099ce     00 00 00 00 
099d2     00 00 00 F0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
099d6     40 00 00 00 
099da     0A 02 00 00 
099de     00 00 00 00 
099e2     0A 02 00 00 | 	byte	$40, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
099e6     00 00 00 00 
099ea     0A 02 00 00 
099ee     00 00 00 F0 
099f2     1A 02 00 7F | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f
099f6     10 00 00 BE 
099fa     2A 02 00 00 
099fe     00 00 01 7D 
09a02     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
09a06     00 00 00 00 
09a0a     0A 02 00 00 
09a0e     00 00 00 00 
09a12     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09a16     10 00 00 00 
09a1a     0A 02 00 00 
09a1e     00 00 00 00 
09a22     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
09a26     1C 20 00 00 
09a2a     0A 02 00 00 
09a2e     00 00 00 00 
09a32     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
09a36     10 00 00 BE 
09a3a     00 00 00 00 
09a3e     00 00 01 7D 
09a42     10 00 00 AA | 	byte	$10, $00, $00, $be, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa
09a46     1C 30 00 BE 
09a4a     0E 93 00 00 
09a4e     00 00 00 00 
09a52     00 00 00 A0 | 	byte	$1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09a56     10 00 00 D6 
09a5a     2A 02 00 00 
09a5e     00 00 01 AC 
09a62     10 00 00 A0 | 	byte	$10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $a0
09a66     1C 30 00 00 
09a6a     0A 02 00 00 
09a6e     00 00 00 00 
09a72     00 00 00 AA | 	byte	$1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09a76     10 00 00 00 
09a7a     0A 02 00 00 
09a7e     00 00 00 00 
09a82     00 00 00 BE | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
09a86     10 00 00 D6 
09a8a     2C 20 00 00 
09a8e     00 00 00 00 
09a92     00 00 00 AA | 	byte	$10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09a96     10 00 00 D6 
09a9a     2A 04 00 00 
09a9e     00 00 00 00 
09aa2     0A 02 00 00 | 	byte	$10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
09aa6     00 00 00 00 
09aaa     0A 04 00 00 
09aae     00 00 00 00 
09ab2     0A 02 00 A0 | 	byte	$00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0
09ab6     10 00 00 F0 
09aba     2A 02 00 00 
09abe     00 00 01 E0 
09ac2     10 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
09ac6     0C 20 00 00 
09aca     0A 02 00 00 
09ace     00 00 00 00 
09ad2     00 00 00 A0 | 	byte	$0c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09ad6     0E 93 00 00 
09ada     0A 02 00 00 
09ade     00 00 00 00 
09ae2     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09ae6     1C 20 00 00 
09aea     0A 02 00 00 
09aee     00 00 00 F0 
09af2     10 00 00 A0 | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0
09af6     10 00 00 F0 
09afa     2A 02 00 00 
09afe     00 00 00 00 
09b02     00 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b06     00 00 00 00 
09b0a     0A 02 00 00 
09b0e     00 00 00 00 
09b12     00 00 00 AA | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09b16     10 00 00 D6 
09b1a     2A 01 00 00 
09b1e     00 00 01 AC 
09b22     10 00 00 00 | 	byte	$10, $00, $00, $d6, $2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00
09b26     0C 20 00 00 
09b2a     0A 01 00 00 
09b2e     00 00 00 00 
09b32     00 00 00 AA | 	byte	$0c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09b36     0E 93 00 00 
09b3a     0A 01 00 00 
09b3e     00 00 00 00 
09b42     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09b46     10 00 00 00 
09b4a     0A 01 00 00 
09b4e     00 00 00 00 
09b52     00 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09b56     10 00 00 00 
09b5a     0A 01 00 00 
09b5e     00 00 01 AC 
09b62     10 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
09b66     1C 20 00 00 
09b6a     0A 01 00 00 
09b6e     00 00 00 00 
09b72     00 00 00 AA | 	byte	$1c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
09b76     10 00 00 BE 
09b7a     2A 01 00 00 
09b7e     00 00 01 7D 
09b82     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
09b86     00 00 00 00 
09b8a     0A 01 00 00 
09b8e     00 00 00 00 
09b92     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09b96     10 00 01 7D 
09b9a     2A 01 00 00 
09b9e     00 00 00 00 
09ba2     00 00 00 00 | 	byte	$10, $00, $01, $7d, $2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ba6     00 00 00 D6 
09baa     2C 38 00 00 
09bae     00 00 01 AC 
09bb2     10 00 00 AA | 	byte	$00, $00, $00, $d6, $2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
09bb6     10 00 00 00 
09bba     0A 06 00 00 
09bbe     00 00 00 00 
09bc2     00 00 00 00 | 	byte	$10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09bc6     00 00 00 D6 
09bca     0E 93 00 00 
09bce     00 00 00 00 
09bd2     00 00 00 BE | 	byte	$00, $00, $00, $d6, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
09bd6     10 00 00 BE 
09bda     2C 30 00 00 
09bde     00 00 01 7D 
09be2     10 00 00 00 | 	byte	$10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
09be6     00 00 00 00 
09bea     0A 02 00 00 
09bee     00 00 00 00 
09bf2     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09bf6     00 00 00 00 
09bfa     0A 02 00 00 
09bfe     00 00 00 00 
09c02     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c06     00 00 00 00 
09c0a     0A 02 00 00 
09c0e     00 00 00 00 
09c12     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
09c16     10 00 00 00 
09c1a     0A 02 00 00 
09c1e     00 00 00 00 
09c22     00 00 00 8F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f
09c26     1D 00 00 00 
09c2a     0A 02 00 00 
09c2e     00 00 00 00 
09c32     00 00 00 00 | 	byte	$1d, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c36     00 00 00 00 
      ...             
09d1e     00 00 00 00 
09d22     00 00 00    | 	byte	$00[239]
09d25     7F 1F 05 00 
09d29     BE 2A 02 00 
09d2d     00 00 00 01 
09d31     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00
09d35     00 00 00 00 
09d39     00          | 	byte	$00[5]
09d3a     0A 02 00 00 
09d3e     00 00 00 00 
09d42     00 00 00 A0 
09d46     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09d4a     0A 02 00 00 
09d4e     00 00 00 00 
09d52     00 00 00 7F 
09d56     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09d5a     0A 02 00 00 
09d5e     00 00 00 00 
09d62     00 00 00 BE 
09d66     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09d6a     0A 02 00 00 
09d6e     00 00 00 00 
09d72     0A 02 00 00 
09d76     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09d7a     0A 02 00 00 
09d7e     00 00 00 00 
09d82     0A 02 00 F0 
09d86     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
09d8a     2A 02 00 00 
09d8e     00 00 01 E0 
09d92     10 00 00 00 
09d96     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
09d9a     0A 02 00 00 
09d9e     00 00 00 00 
09da2     00 00 00 D6 
09da6     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
09daa     0A 02 00 00 
09dae     00 00 00 00 
09db2     00 00 00 F0 
09db6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
09dba     0A 02 00 00 
09dbe     00 00 00 00 
09dc2     00 00 00 F0 
09dc6     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
09dca     0A 02 00 00 
09dce     00 00 00 00 
09dd2     0A 02 00 00 
09dd6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09dda     0A 02 00 00 
09dde     00 00 00 F0 
09de2     1A 02 00 7F 
09de6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
09dea     2A 02 00 00 
09dee     00 00 01 7D 
09df2     10 00 00 00 
09df6     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09dfa     0A 02 00 00 
09dfe     00 00 00 00 
09e02     00 00 00 A0 
09e06     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09e0a     0A 02 00 00 
09e0e     00 00 00 00 
09e12     00 00 00 7F 
09e16     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09e1a     0A 02 00 00 
09e1e     00 00 00 00 
09e22     00 00 00 BE 
09e26     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09e2a     00 00 00 00 
09e2e     00 00       | 	byte	$00[6]
09e30     01 7D 10 00 
09e34     00 AA 1C 30 
09e38     00 BE 0E 93 
09e3c     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
09e40     00 00 00 00 
09e44     00          | 	byte	$00[5]
09e45     A0 10 00 00 
09e49     D6 2A 02 00 
09e4d     00 00 00 01 
09e51     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00
09e55     A0 1C 30 00 
09e59     00 0A 02 00 
09e5d     00 00 00 00 
09e61     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e65     AA 10 00 00 
09e69     00 0A 02 00 
09e6d     00 00 00 00 
09e71     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e75     BE 10 00 00 
09e79     D6 2C 20 00 
09e7d     00 00 00 00 
09e81     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e85     AA 10 00 00 
09e89     D6 2A 04 00 
09e8d     00 00 00 00 
09e91     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09e95     00 00 00 00 
09e99     00          | 	byte	$00[5]
09e9a     0A 04 00 00 
09e9e     00 00 00 00 
09ea2     0A 02 00 A0 
09ea6     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
09eaa     2A 02 00 00 
09eae     00 00 01 E0 
09eb2     10 00 00 00 
09eb6     0C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
09eba     0A 02 00 00 
09ebe     00 00 00 00 
09ec2     00 00 00 A0 
09ec6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
09eca     0A 02 00 00 
09ece     00 00 00 00 
09ed2     00 00 00 A0 
09ed6     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09eda     0A 02 00 00 
09ede     00 00 00 F0 
09ee2     10 00 00 A0 
09ee6     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
09eea     2A 02 00 00 
09eee     00 00 00 00 
09ef2     00 00 00 00 
09ef6     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09efa     0A 02 00 00 
09efe     00 00 00 00 
09f02     00 00 00 8F 
09f06     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
09f0a     2A 01 00 00 
09f0e     00 00 01 AC 
09f12     10 00 00 00 
09f16     0C 20 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
09f1a     0A 01 00 00 
09f1e     00 00 00 00 
09f22     00 00 00 8F 
09f26     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
09f2a     0A 01 00 00 
09f2e     00 00 00 00 
09f32     00 00 00 A0 
09f36     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09f3a     0A 01 00 00 
09f3e     00 00 00 00 
09f42     00 00 00 8F 
09f46     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
09f4a     0A 01 00 00 
09f4e     00 00 01 AC 
09f52     10 00 00 00 
09f56     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
09f5a     0A 01 00 00 
09f5e     00 00 00 00 
09f62     00 00 00 BE 
09f66     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09f6a     2A 01 00 00 
09f6e     00 00 01 7D 
09f72     10 00 00 00 
09f76     00 00 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09f7a     0A 01 00 00 
09f7e     00 00 00 00 
09f82     00 00 00 A0 
09f86     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
09f8a     2A 01 00 00 
09f8e     00 00 00 00 
09f92     00 00 00 00 
09f96     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09f9a     2C 38 00 00 
09f9e     00 00 01 AC 
09fa2     10 00 00 AA 
09fa6     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
09faa     0A 06 00 00 
09fae     00 00 00 00 
09fb2     00 00 00 00 
09fb6     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09fba     0E 93 00 00 
09fbe     00 00 00 00 
09fc2     00 00 00 BE 
09fc6     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09fca     2C 30 01 7D 
09fce     2A 02 01 7D 
09fd2     10 00 00 00 
09fd6     00 00 00 00 | 	byte	$2c, $30, $01, $7d, $2a, $02, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09fda     0A 02 00 00 
09fde     0A 02 00 00 
09fe2     00 00 00 00 
09fe6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09fea     0A 02 00 00 
09fee     0A 02 00 00 
09ff2     00 00 00 BE 
09ff6     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $be, $1c, $20, $00, $00
09ffa     0A 02 00 00 
09ffe     0A 02 00 00 
0a002     00 00 00 A0 
0a006     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a00a     0A 02 00 00 
0a00e     0A 02 00 00 
0a012     00 00 00 8F 
0a016     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a01a     0A 02 00 00 
0a01e     0A 02 00 00 
0a022     0D 00 00 00 
0a026     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a02a     00 00 00 00 
      ...             
0a11e     00 00 00 00 
0a122     00 00 00    | 	byte	$00[251]
0a125     7F 1F 05 00 
0a129     BE 2A 02 00 
0a12d     CA 50 00 01 
0a131     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0a135     7F 1C 30 00 
0a139     00 0A 02 00 
0a13d     00 00 00 00 
0a141     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a145     A0 10 00 00 
0a149     00 0A 02 00 
0a14d     00 00 00 00 
0a151     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a155     7F 1C 30 00 
0a159     00 0A 02 00 
0a15d     00 00 00 00 
0a161     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a165     BE 10 00 00 
0a169     BE 0A 02 00 
0a16d     00 00 00 00 
0a171     00 0A 02 00 | 	byte	$be, $10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0a175     A0 1C 30 00 
0a179     00 0A 02 00 
0a17d     00 00 00 00 
0a181     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0a185     F0 40 00 00 
0a189     F0 2A 02 00 
0a18d     FE 60 00 01 
0a191     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $f0, $2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
0a195     00 00 00 00 
0a199     00          | 	byte	$00[5]
0a19a     0A 02 00 00 
0a19e     00 00 00 00 
0a1a2     00 00 00 D6 
0a1a6     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
0a1aa     0A 02 00 00 
0a1ae     00 00 00 00 
0a1b2     00 00 00 D6 
0a1b6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $0e, $93, $00, $00
0a1ba     0A 02 00 00 
0a1be     00 00 00 00 
0a1c2     00 00 00 F0 
0a1c6     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0a1ca     0A 02 00 00 
0a1ce     00 00 00 00 
0a1d2     0A 02 00 00 
0a1d6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0a1da     0A 02 00 00 
0a1de     00 00 00 F0 
0a1e2     1A 02 00 7F 
0a1e6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
0a1ea     2A 02 00 CA 
0a1ee     50 00 01 7D 
0a1f2     10 00 00 00 
0a1f6     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a1fa     0A 02 00 00 
0a1fe     00 00 00 00 
0a202     00 00 00 A0 
0a206     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a20a     0A 02 00 00 
0a20e     00 00 00 00 
0a212     00 00 00 7F 
0a216     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a21a     0A 02 00 00 
0a21e     00 00 00 00 
0a222     00 00 00 BE 
0a226     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a22a     00 00 00 00 
0a22e     00 00       | 	byte	$00[6]
0a230     01 7D 10 00 
0a234     00 AA 1C 30 
0a238     00 BE 0E 93 
0a23c     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
0a240     00 00 00 00 
0a244     00          | 	byte	$00[5]
0a245     A0 10 00 00 
0a249     D6 2A 02 00 
0a24d     E2 60 00 01 
0a251     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0a255     A0 1C 30 00 
0a259     00 0A 02 00 
0a25d     00 00 00 00 
0a261     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a265     AA 10 00 00 
0a269     00 0A 02 00 
0a26d     00 00 00 00 
0a271     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a275     BE 10 00 00 
0a279     D6 2C 20 00 
0a27d     00 00 00 00 
0a281     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a285     AA 10 00 00 
0a289     D6 2A 04 00 
0a28d     00 00 00 00 
0a291     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0a295     00 00 00 00 
0a299     00          | 	byte	$00[5]
0a29a     0A 04 00 00 
0a29e     00 00 00 00 
0a2a2     0A 02 00 A0 
0a2a6     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
0a2aa     2A 02 00 FE 
0a2ae     60 00 01 E0 
0a2b2     10 00 00 00 
0a2b6     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0a2ba     0A 02 00 00 
0a2be     00 00 00 00 
0a2c2     00 00 00 A0 
0a2c6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0a2ca     0A 02 00 00 
0a2ce     00 00 00 00 
0a2d2     00 00 00 A0 
0a2d6     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a2da     0A 02 00 00 
0a2de     00 00 00 F0 
0a2e2     10 00 00 A0 
0a2e6     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
0a2ea     2A 02 00 00 
0a2ee     00 00 00 00 
0a2f2     00 00 00 00 
0a2f6     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a2fa     0A 02 00 00 
0a2fe     00 00 00 00 
0a302     00 00 00 AA 
0a306     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $d6
0a30a     2A 01 00 E2 
0a30e     60 00 01 AC 
0a312     10 00 00 00 
0a316     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
0a31a     0A 01 00 00 
0a31e     00 00 00 00 
0a322     00 00 00 AA 
0a326     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
0a32a     0A 01 00 00 
0a32e     00 00 00 00 
0a332     00 00 00 BE 
0a336     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0a33a     0A 01 00 00 
0a33e     00 00 00 00 
0a342     00 00 00 AA 
0a346     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0a34a     0A 01 00 00 
0a34e     00 00 01 AC 
0a352     10 00 00 00 
0a356     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
0a35a     0A 01 00 00 
0a35e     00 00 00 00 
0a362     00 00 00 BE 
0a366     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a36a     2A 01 00 CA 
0a36e     50 00 01 7D 
0a372     10 00 00 00 
0a376     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a37a     0A 01 00 00 
0a37e     00 00 00 00 
0a382     00 00 00 A0 
0a386     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
0a38a     2A 01 00 00 
0a38e     00 00 00 00 
0a392     00 00 00 00 
0a396     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0a39a     2C 38 00 00 
0a39e     00 00 01 AC 
0a3a2     10 00 00 AA 
0a3a6     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
0a3aa     0A 06 00 00 
0a3ae     00 00 00 00 
0a3b2     00 00 00 AA 
0a3b6     1E 93 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $d6
0a3ba     0E 93 00 00 
0a3be     00 00 00 00 
0a3c2     00 00 00 BE 
0a3c6     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a3ca     2C 30 00 00 
0a3ce     00 00 01 7D 
0a3d2     10 00 00 00 
0a3d6     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a3da     0A 02 00 00 
0a3de     00 00 00 00 
0a3e2     00 00 00 00 
0a3e6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3ea     0A 02 00 00 
0a3ee     00 00 00 00 
0a3f2     00 00 00 00 
0a3f6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a3fa     0A 02 00 00 
0a3fe     00 00 00 00 
0a402     00 00 00 00 
0a406     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a40a     0A 02 00 00 
0a40e     00 00 00 00 
0a412     00 00 00 00 
0a416     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a41a     0A 02 00 00 
0a41e     00 00 00 00 
0a422     0D 00 00 00 
0a426     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a42a     00 00 00 00 
      ...             
0a51e     00 00 00 00 
0a522     00 00 00    | 	byte	$00[251]
0a525     7F 1F 05 00 
0a529     BE 2A 02 00 
0a52d     CA 5C 10 01 
0a531     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $5c, $10, $01, $7d, $10, $00, $00
0a535     00 00 00 00 
0a539     00          | 	byte	$00[5]
0a53a     0A 02 00 00 
0a53e     0A 10 00 00 
0a542     00 00 00 A0 
0a546     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a54a     0A 02 00 00 
0a54e     0A 10 00 00 
0a552     00 00 00 7F 
0a556     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a55a     0A 02 00 00 
0a55e     0A 10 00 00 
0a562     00 00 00 BE 
0a566     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a56a     0A 02 00 00 
0a56e     0A 10 00 00 
0a572     0A 02 00 00 
0a576     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0a57a     0A 02 00 00 
0a57e     0A 10 00 00 
0a582     0A 02 00 F0 
0a586     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
0a58a     2A 02 00 FE 
0a58e     6C 20 01 E0 
0a592     10 00 00 00 
0a596     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $6c, $20, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
0a59a     0A 02 00 00 
0a59e     0A 10 00 00 
0a5a2     00 00 00 D6 
0a5a6     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
0a5aa     0A 02 00 00 
0a5ae     0A 10 00 00 
0a5b2     00 00 00 F0 
0a5b6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0a5ba     0A 02 00 00 
0a5be     0A 10 00 00 
0a5c2     00 00 00 F0 
0a5c6     40 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0a5ca     0A 02 00 00 
0a5ce     0A 10 00 00 
0a5d2     0A 02 00 00 
0a5d6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0a5da     0A 02 00 00 
0a5de     0A 10 00 F0 
0a5e2     1A 02 00 7F 
0a5e6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
0a5ea     2A 02 00 CA 
0a5ee     50 00 01 7D 
0a5f2     10 00 00 00 
0a5f6     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a5fa     0A 02 00 00 
0a5fe     00 00 00 00 
0a602     00 00 00 A0 
0a606     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a60a     0A 02 00 00 
0a60e     00 00 00 00 
0a612     00 00 00 7F 
0a616     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a61a     0A 02 00 00 
0a61e     00 00 00 00 
0a622     00 00 00 BE 
0a626     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a62a     00 00 00 00 
0a62e     00 00       | 	byte	$00[6]
0a630     01 7D 10 00 
0a634     00 AA 1C 30 
0a638     00 BE 0E 93 
0a63c     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
0a640     00 00 00 00 
0a644     00          | 	byte	$00[5]
0a645     A0 10 00 00 
0a649     D6 2A 02 00 
0a64d     E2 60 00 01 
0a651     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0a655     A0 1C 30 00 
0a659     00 0A 02 00 
0a65d     00 00 00 00 
0a661     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a665     AA 10 00 00 
0a669     00 0A 02 00 
0a66d     00 00 00 00 
0a671     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a675     BE 10 00 00 
0a679     D6 2C 20 00 
0a67d     00 00 00 00 
0a681     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a685     AA 10 00 00 
0a689     D6 2A 04 00 
0a68d     00 00 00 00 
0a691     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0a695     00 00 00 00 
0a699     00          | 	byte	$00[5]
0a69a     0A 04 00 00 
0a69e     00 00 00 00 
0a6a2     0A 02 00 A0 
0a6a6     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
0a6aa     2A 02 00 FE 
0a6ae     60 00 01 E0 
0a6b2     10 00 00 00 
0a6b6     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0a6ba     0A 02 00 00 
0a6be     00 00 00 00 
0a6c2     00 00 00 A0 
0a6c6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0a6ca     0A 02 00 00 
0a6ce     00 00 00 00 
0a6d2     00 00 00 A0 
0a6d6     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a6da     0A 02 00 00 
0a6de     00 00 00 F0 
0a6e2     10 00 00 A0 
0a6e6     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
0a6ea     2A 02 00 00 
0a6ee     00 00 00 00 
0a6f2     00 00 00 00 
0a6f6     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6fa     0A 02 00 00 
0a6fe     00 00 00 00 
0a702     00 00 00 8F 
0a706     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
0a70a     2A 01 00 E2 
0a70e     60 00 01 AC 
0a712     10 00 00 00 
0a716     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
0a71a     0A 01 00 00 
0a71e     00 00 00 00 
0a722     00 00 00 8F 
0a726     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
0a72a     0A 01 00 00 
0a72e     00 00 00 00 
0a732     00 00 00 A0 
0a736     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a73a     0A 01 00 00 
0a73e     00 00 00 00 
0a742     00 00 00 8F 
0a746     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a74a     0A 01 00 00 
0a74e     00 00 01 AC 
0a752     10 00 00 00 
0a756     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
0a75a     0A 01 00 00 
0a75e     00 00 00 00 
0a762     00 00 00 BE 
0a766     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a76a     2A 01 00 CA 
0a76e     50 00 01 7D 
0a772     10 00 00 00 
0a776     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a77a     0A 01 00 00 
0a77e     00 00 00 00 
0a782     00 00 00 A0 
0a786     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
0a78a     2A 01 00 00 
0a78e     00 00 00 00 
0a792     00 00 00 00 
0a796     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0a79a     2C 38 00 00 
0a79e     00 00 01 AC 
0a7a2     10 00 00 8F 
0a7a6     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
0a7aa     0A 06 00 00 
0a7ae     00 00 00 00 
0a7b2     00 00 00 00 
0a7b6     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0a7ba     0E 93 00 00 
0a7be     00 00 00 00 
0a7c2     00 00 00 7F 
0a7c6     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0a7ca     2C 30 00 00 
0a7ce     00 00 01 7D 
0a7d2     10 00 00 00 
0a7d6     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a7da     0A 02 00 00 
0a7de     00 00 00 00 
0a7e2     00 00 00 00 
0a7e6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7ea     0A 02 00 00 
0a7ee     00 00 00 00 
0a7f2     00 00 00 00 
0a7f6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7fa     0A 02 00 00 
0a7fe     00 00 00 00 
0a802     00 00 00 A0 
0a806     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a80a     0A 02 00 00 
0a80e     00 00 00 00 
0a812     00 00 00 8F 
0a816     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0a81a     0A 02 00 00 
0a81e     00 00 00 00 
0a822     0D 00 00 00 
0a826     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a82a     00 00 00 00 
      ...             
0a91e     00 00 00 00 
0a922     00 00 00    | 	byte	$00[251]
0a925     7F 1F 05 00 
0a929     BE 2A 02 00 
0a92d     CA 50 00 01 
0a931     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0a935     00 0A 06 00 
0a939     00 0A 02 00 
0a93d     00 00 00 00 
0a941     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a945     7F 0E 93 00 
0a949     00 0A 02 00 
0a94d     00 00 00 00 
0a951     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a955     8F 1C 30 00 
0a959     00 0A 02 00 
0a95d     00 00 00 00 
0a961     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a965     BE 10 00 00 
0a969     BE 2A 02 00 
0a96d     00 00 00 00 
0a971     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a975     00 00 00 00 
0a979     00          | 	byte	$00[5]
0a97a     0A 02 00 00 
0a97e     00 00 00 00 
0a982     00 00 00 7F 
0a986     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a98a     0A 02 00 00 
0a98e     00 00 01 40 
0a992     10 00 00 00 
0a996     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0a99a     0A 02 00 00 
0a99e     00 00 00 00 
0a9a2     00 00 00 F0 
0a9a6     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
0a9aa     2A 02 00 00 
0a9ae     00 00 00 00 
0a9b2     00 00 00 F0 
0a9b6     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
0a9ba     2C 20 00 00 
0a9be     00 00 01 40 
0a9c2     1A 08 00 FE 
0a9c6     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
0a9ca     2A 02 00 00 
0a9ce     00 00 01 40 
0a9d2     10 00 00 FE 
0a9d6     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
0a9da     0A 02 00 00 
0a9de     00 00 01 1D 
0a9e2     1C 20 00 8F 
0a9e6     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
0a9ea     2A 02 00 E2 
0a9ee     60 00 01 1D 
0a9f2     10 00 00 8F 
0a9f6     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
0a9fa     0A 02 00 00 
0a9fe     00 00 00 00 
0aa02     0A 06 00 A0 
0aa06     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0aa0a     0A 02 00 00 
0aa0e     00 00 01 1D 
0aa12     0E 93 00 8F 
0aa16     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
0aa1a     0A 02 00 00 
0aa1e     00 00 01 1D 
0aa22     10 00 00 AA 
0aa26     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
0aa2a     2A 08 00 00 
0aa2e     00 00 01 40 
0aa32     1A 08 00 A0 
0aa36     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
0aa3a     2C 30 00 00 
0aa3e     00 00 00 00 
0aa42     0A 08 00 BE 
0aa46     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
0aa4a     2A 02 00 CA 
0aa4e     50 00 01 7D 
0aa52     10 00 00 BE 
0aa56     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
0aa5a     0A 02 00 00 
0aa5e     00 00 00 00 
0aa62     00 00 00 A0 
0aa66     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0aa6a     0A 02 00 00 
0aa6e     00 00 00 00 
0aa72     00 00 00 A0 
0aa76     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0aa7a     0A 02 00 00 
0aa7e     00 00 00 00 
0aa82     00 00 00 8F 
0aa86     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0aa8a     0A 02 00 00 
0aa8e     00 00 00 00 
0aa92     00 00 00 A0 
0aa96     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0aa9a     0A 02 00 00 
0aa9e     00 00 00 00 
0aaa2     00 00 00 7F 
0aaa6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0aaaa     2A 02 00 00 
0aaae     00 00 01 7D 
0aab2     10 00 00 7F 
0aab6     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $00
0aaba     0A 02 00 00 
0aabe     00 00 00 00 
0aac2     00 00 00 8F 
0aac6     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0aaca     0A 02 00 00 
0aace     00 00 00 00 
0aad2     00 00 00 8F 
0aad6     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0aada     0A 02 00 00 
0aade     00 00 00 00 
0aae2     00 00 00 A0 
0aae6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
0aaea     2A 02 00 00 
0aaee     00 00 00 00 
0aaf2     00 00 00 A0 
0aaf6     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0aafa     0A 02 00 00 
0aafe     00 00 00 00 
0ab02     00 00 00 F0 
0ab06     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $f0
0ab0a     2A 02 00 FE 
0ab0e     60 00 01 E0 
0ab12     10 00 00 F0 
0ab16     4C 30 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
0ab1a     0A 02 00 00 
0ab1e     00 00 00 00 
0ab22     00 00 00 7F 
0ab26     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0ab2a     0A 02 00 00 
0ab2e     00 00 00 00 
0ab32     00 00 00 7F 
0ab36     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
0ab3a     0A 02 00 00 
0ab3e     00 00 00 00 
0ab42     00 00 00 8F 
0ab46     1A 06 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $f0
0ab4a     2A 02 00 00 
0ab4e     00 00 00 00 
0ab52     00 00 00 7F 
0ab56     0E 93 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
0ab5a     0A 02 00 00 
0ab5e     00 00 00 00 
0ab62     00 00 00 7F 
0ab66     1A 01 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $be
0ab6a     2A 02 00 CA 
0ab6e     50 00 01 7D 
0ab72     10 00 00 00 
0ab76     0A 01 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $00
0ab7a     0A 02 00 00 
0ab7e     00 00 00 00 
0ab82     00 00 00 00 
0ab86     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00
0ab8a     0A 02 00 00 
0ab8e     00 00 01 40 
0ab92     10 00 00 00 
0ab96     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $00
0ab9a     0A 02 00 00 
0ab9e     00 00 00 00 
0aba2     00 00 00 00 
0aba6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abaa     0A 02 00 00 
0abae     00 00 01 53 
0abb2     19 02 00 00 
0abb6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $00, $00, $00, $00
0abba     0A 02 00 00 
0abbe     00 00 00 00 
0abc2     00 00 00 7F 
0abc6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0abca     2A 02 00 00 
0abce     00 00 01 7D 
0abd2     10 00 00 00 
0abd6     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0abda     0A 02 00 00 
0abde     00 00 00 00 
0abe2     00 00 00 A0 
0abe6     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0abea     0A 02 00 00 
0abee     00 00 00 00 
0abf2     00 00 00 A0 
0abf6     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0abfa     0A 02 00 00 
0abfe     00 00 00 00 
0ac02     00 00 00 8F 
0ac06     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0ac0a     0A 02 00 00 
0ac0e     00 00 00 00 
0ac12     00 00 00 A0 
0ac16     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0ac1a     0A 02 00 00 
0ac1e     00 00 00 00 
0ac22     0D 00 00 00 
0ac26     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0ac2a     00 00 00 00 
      ...             
0ad1e     00 00 00 00 
0ad22     00 00 00    | 	byte	$00[251]
0ad25     7F 1F 05 00 
0ad29     BE 2A 02 00 
0ad2d     CA 50 00 01 
0ad31     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0ad35     00 0A 06 00 
0ad39     00 0A 02 00 
0ad3d     00 00 00 00 
0ad41     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad45     7F 0E 93 00 
0ad49     00 0A 02 00 
0ad4d     00 00 00 00 
0ad51     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad55     8F 1C 30 00 
0ad59     00 0A 02 00 
0ad5d     00 00 00 00 
0ad61     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad65     BE 10 00 00 
0ad69     BE 2A 02 00 
0ad6d     00 00 00 00 
0ad71     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad75     00 00 00 00 
0ad79     00          | 	byte	$00[5]
0ad7a     0A 02 00 00 
0ad7e     00 00 00 00 
0ad82     00 00 00 7F 
0ad86     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0ad8a     0A 02 00 00 
0ad8e     00 00 01 40 
0ad92     10 00 00 00 
0ad96     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0ad9a     0A 02 00 00 
0ad9e     00 00 00 00 
0ada2     00 00 00 F0 
0ada6     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
0adaa     2A 02 00 00 
0adae     00 00 00 00 
0adb2     00 00 00 F0 
0adb6     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
0adba     2C 20 00 00 
0adbe     00 00 01 40 
0adc2     1A 08 00 FE 
0adc6     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
0adca     2A 02 00 00 
0adce     00 00 01 40 
0add2     10 00 00 FE 
0add6     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
0adda     0A 02 00 00 
0adde     00 00 01 1D 
0ade2     1C 20 00 8F 
0ade6     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
0adea     2A 02 00 E2 
0adee     60 00 01 1D 
0adf2     10 00 00 8F 
0adf6     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
0adfa     0A 02 00 00 
0adfe     00 00 00 00 
0ae02     0A 06 00 A0 
0ae06     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0ae0a     0A 02 00 00 
0ae0e     00 00 01 1D 
0ae12     0E 93 00 8F 
0ae16     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
0ae1a     0A 02 00 00 
0ae1e     00 00 01 1D 
0ae22     10 00 00 AA 
0ae26     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
0ae2a     2A 08 00 00 
0ae2e     00 00 01 40 
0ae32     1A 08 00 A0 
0ae36     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
0ae3a     2C 30 00 00 
0ae3e     00 00 00 00 
0ae42     0A 08 00 BE 
0ae46     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
0ae4a     2A 02 00 CA 
0ae4e     50 00 01 7D 
0ae52     10 00 00 BE 
0ae56     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
0ae5a     0A 02 00 00 
0ae5e     00 00 00 00 
0ae62     00 00 00 7F 
0ae66     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $00
0ae6a     0A 02 00 00 
0ae6e     00 00 00 00 
0ae72     00 00 00 7F 
0ae76     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0ae7a     0A 02 00 00 
0ae7e     00 00 00 00 
0ae82     00 00 00 8F 
0ae86     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0ae8a     0A 02 00 00 
0ae8e     00 00 00 00 
0ae92     00 00 00 7F 
0ae96     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0ae9a     0A 02 00 00 
0ae9e     00 00 00 00 
0aea2     00 00 00 A0 
0aea6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
0aeaa     2A 02 00 00 
0aeae     00 00 01 7D 
0aeb2     10 00 00 A0 
0aeb6     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
0aeba     0A 02 00 00 
0aebe     00 00 00 00 
0aec2     00 00 00 AA 
0aec6     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0aeca     0A 02 00 00 
0aece     00 00 00 00 
0aed2     00 00 00 AA 
0aed6     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1c, $30, $00, $00
0aeda     0A 02 00 00 
0aede     00 00 00 00 
0aee2     00 00 00 BE 
0aee6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0aeea     2A 02 00 00 
0aeee     00 00 00 00 
0aef2     00 00 00 BE 
0aef6     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1c, $30, $00, $00
0aefa     0A 02 00 00 
0aefe     00 00 00 00 
0af02     00 00 00 D6 
0af06     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $10, $00, $00, $d6
0af0a     2A 02 00 E2 
0af0e     60 00 01 AC 
0af12     10 00 00 D6 
0af16     1C 30 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $d6, $1c, $30, $00, $00
0af1a     0A 02 00 00 
0af1e     00 00 00 00 
0af22     00 00 00 FE 
0af26     1A 04 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $1a, $04, $00, $00
0af2a     0A 02 00 00 
0af2e     00 00 00 00 
0af32     00 00 00 FE 
0af36     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $0e, $93, $00, $00
0af3a     0A 02 00 00 
0af3e     00 00 00 00 
0af42     00 00 00 A0 
0af46     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $d6
0af4a     2A 02 00 00 
0af4e     00 00 01 AC 
0af52     1C 30 00 A0 
0af56     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $ac, $1c, $30, $00, $a0, $1c, $30, $00, $00
0af5a     0A 02 00 00 
0af5e     00 00 00 00 
0af62     00 00 00 BE 
0af66     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0af6a     2A 02 00 CA 
0af6e     50 00 01 7D 
0af72     10 00 00 00 
0af76     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0af7a     0A 02 00 00 
0af7e     00 00 00 00 
0af82     00 00 00 00 
0af86     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af8a     0A 02 00 00 
0af8e     00 00 00 00 
0af92     00 00 00 00 
0af96     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af9a     0A 02 00 00 
0af9e     00 00 00 00 
0afa2     00 00 00 BE 
0afa6     1A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1a, $02, $00, $00
0afaa     0A 02 00 00 
0afae     00 00 01 AC 
0afb2     19 02 00 00 
0afb6     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $ac, $19, $02, $00, $00, $0a, $02, $00, $00
0afba     0A 02 00 00 
0afbe     00 00 00 00 
0afc2     00 00 00 00 
0afc6     0A 02 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $be
0afca     2A 02 00 00 
0afce     00 00 01 7D 
0afd2     10 00 00 00 
0afd6     0A 02 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $0a, $02, $00, $00
0afda     0A 02 00 00 
0afde     00 00 00 00 
0afe2     00 00 00 00 
0afe6     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0afea     0A 02 00 00 
0afee     00 00 00 00 
0aff2     00 00 00 00 
0aff6     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0affa     0A 02 00 00 
0affe     00 00 00 00 
0b002     00 00 00 A0 
0b006     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0b00a     0A 02 00 00 
0b00e     00 00 00 00 
0b012     00 00 00 8F 
0b016     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0b01a     0A 02 00 00 
0b01e     00 00 00 00 
0b022     0D 00 00 00 
0b026     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0b02a     00 00 00 00 
      ...             
0b11e     00 00 00 00 
0b122     00 00 00    | 	byte	$00[251]
0b125     7F 1F 05 00 
0b129     BE 2A 02 00 
0b12d     CA 50 00 01 
0b131     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b135     00 00 00 00 
0b139     00          | 	byte	$00[5]
0b13a     0A 02 00 00 
0b13e     00 00 00 00 
0b142     00 00 00 A0 
0b146     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0b14a     0A 02 00 00 
0b14e     00 00 00 00 
0b152     00 00 00 7F 
0b156     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0b15a     0A 02 00 00 
0b15e     00 00 00 00 
0b162     00 00 00 BE 
0b166     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0b16a     0A 02 00 00 
0b16e     00 00 00 00 
0b172     0A 02 00 00 
0b176     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0b17a     0A 02 00 00 
0b17e     00 00 00 00 
0b182     0A 02 00 F0 
0b186     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
0b18a     2A 02 00 FE 
0b18e     60 00 01 E0 
0b192     10 00 00 00 
0b196     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
0b19a     0A 02 00 00 
0b19e     00 00 00 00 
0b1a2     00 00 00 D6 
0b1a6     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
0b1aa     0A 02 00 00 
0b1ae     00 00 00 00 
0b1b2     00 00 00 F0 
0b1b6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0b1ba     0A 02 00 00 
0b1be     00 00 00 00 
0b1c2     00 00 00 F0 
0b1c6     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0b1ca     0A 02 00 00 
0b1ce     00 00 00 00 
0b1d2     0A 02 00 00 
0b1d6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0b1da     0A 02 00 00 
0b1de     00 00 00 F0 
0b1e2     1A 02 00 7F 
0b1e6     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
0b1ea     2A 02 00 CA 
0b1ee     50 00 01 7D 
0b1f2     10 00 00 00 
0b1f6     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0b1fa     0A 02 00 00 
0b1fe     00 00 00 00 
0b202     00 00 00 A0 
0b206     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0b20a     0A 02 00 00 
0b20e     00 00 00 00 
0b212     00 00 00 7F 
0b216     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0b21a     0A 02 00 00 
0b21e     00 00 00 00 
0b222     00 00 00 BE 
0b226     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0b22a     00 00 00 00 
0b22e     00 00       | 	byte	$00[6]
0b230     01 7D 10 00 
0b234     00 AA 1C 30 
0b238     00 BE 0E 93 
0b23c     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
0b240     00 00 00 00 
0b244     00          | 	byte	$00[5]
0b245     A0 10 00 00 
0b249     D6 2A 02 00 
0b24d     E2 60 00 01 
0b251     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0b255     A0 1C 30 00 
0b259     00 0A 02 00 
0b25d     00 00 00 00 
0b261     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b265     AA 10 00 00 
0b269     00 0A 02 00 
0b26d     00 00 00 00 
0b271     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b275     BE 10 00 00 
0b279     D6 2C 20 00 
0b27d     00 00 00 00 
0b281     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b285     AA 10 00 00 
0b289     D6 2A 04 00 
0b28d     00 00 00 00 
0b291     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b295     00 00 00 00 
0b299     00          | 	byte	$00[5]
0b29a     0A 04 00 00 
0b29e     00 00 00 00 
0b2a2     0A 02 00 A0 
0b2a6     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
0b2aa     2A 02 00 FE 
0b2ae     60 00 01 E0 
0b2b2     10 00 00 00 
0b2b6     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0b2ba     0A 02 00 00 
0b2be     00 00 00 00 
0b2c2     00 00 00 A0 
0b2c6     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0b2ca     0A 02 00 00 
0b2ce     00 00 00 00 
0b2d2     00 00 00 A0 
0b2d6     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b2da     0A 02 00 00 
0b2de     00 00 00 F0 
0b2e2     10 00 00 A0 
0b2e6     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
0b2ea     2A 02 00 00 
0b2ee     00 00 00 00 
0b2f2     00 00 00 00 
0b2f6     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b2fa     0A 02 00 00 
0b2fe     00 00 00 00 
0b302     00 00 00 8F 
0b306     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
0b30a     2A 01 00 E2 
0b30e     60 00 01 AC 
0b312     10 00 00 00 
0b316     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
0b31a     0A 01 00 00 
0b31e     00 00 00 00 
0b322     00 00 00 8F 
0b326     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
0b32a     0A 01 00 00 
0b32e     00 00 00 00 
0b332     00 00 00 A0 
0b336     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0b33a     0A 01 00 00 
0b33e     00 00 00 00 
0b342     00 00 00 8F 
0b346     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0b34a     0A 01 00 00 
0b34e     00 00 01 AC 
0b352     10 00 00 00 
0b356     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
0b35a     0A 01 00 00 
0b35e     00 00 00 00 
0b362     00 00 00 BE 
0b366     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0b36a     2A 01 00 CA 
0b36e     50 00 01 7D 
0b372     10 00 00 00 
0b376     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0b37a     0A 01 00 00 
0b37e     00 00 00 00 
0b382     00 00 00 A0 
0b386     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
0b38a     2A 01 00 00 
0b38e     00 00 00 00 
0b392     00 00 00 00 
0b396     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0b39a     2C 38 00 00 
0b39e     00 00 01 AC 
0b3a2     10 00 00 8F 
0b3a6     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
0b3aa     0A 06 00 00 
0b3ae     00 00 00 00 
0b3b2     00 00 00 00 
0b3b6     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0b3ba     0E 93 00 00 
0b3be     00 00 00 00 
0b3c2     00 00 00 7F 
0b3c6     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0b3ca     2C 30 00 00 
0b3ce     00 00 01 7D 
0b3d2     10 00 00 00 
0b3d6     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0b3da     0A 02 00 00 
0b3de     00 00 00 00 
0b3e2     00 00 00 00 
0b3e6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b3ea     0A 02 00 00 
0b3ee     00 00 00 00 
0b3f2     00 00 00 00 
0b3f6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b3fa     0A 02 00 00 
0b3fe     00 00 00 00 
0b402     00 00 00 A0 
0b406     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b40a     0A 02 00 00 
0b40e     00 00 00 00 
0b412     00 00 00 8F 
0b416     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0b41a     0A 02 00 00 
0b41e     00 00 00 00 
0b422     0D 00 00 00 
0b426     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0b42a     00 00 00 00 
      ...             
0b51e     00 00 00 00 
0b522     00 00 00    | 	byte	$00[251]
0b525     7F 1F 05 01 
0b529     1D 71 08 00 
0b52d     CA 50 00 01 
0b531     7D 10 00 00 | 	byte	$7f, $1f, $05, $01, $1d, $71, $08, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b535     00 0A 06 01 
0b539     0D 73 F0 00 
0b53d     00 00 00 00 
0b541     00 00 00 00 | 	byte	$00, $0a, $06, $01, $0d, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b545     7F 0E 93 00 
0b549     00 04 A1 00 
0b54d     00 00 00 00 
0b551     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b555     8F 1C 30 00 
0b559     00 04 A1 00 
0b55d     00 00 00 00 
0b561     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b565     BE 10 00 00 
0b569     00 04 B2 00 
0b56d     00 00 00 00 
0b571     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b575     00 00 00 00 
0b579     00          | 	byte	$00[5]
0b57a     04 B2 00 00 
0b57e     00 00 00 00 
0b582     00 00 00 7F 
0b586     10 00 00 00 | 	byte	$04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0b58a     04 C2 00 00 
0b58e     00 00 01 40 
0b592     10 00 00 00 
0b596     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0b59a     04 C2 00 00 
0b59e     00 00 00 00 
0b5a2     00 00 00 F0 
0b5a6     40 00 00 CA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $ca
0b5aa     70 00 00 00 
0b5ae     00 00 00 00 
0b5b2     00 00 00 F0 
0b5b6     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $00
0b5ba     0C 18 00 00 
0b5be     00 00 01 40 
0b5c2     1A 08 00 FE 
0b5c6     40 00 00 E2 | 	byte	$0c, $18, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $e2
0b5ca     70 00 00 00 
0b5ce     00 00 01 40 
0b5d2     10 00 00 FE 
0b5d6     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
0b5da     0C 18 00 00 
0b5de     00 00 01 1D 
0b5e2     1C 20 00 8F 
0b5e6     10 00 01 1D | 	byte	$0c, $18, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $01, $1d
0b5ea     71 08 00 E2 
0b5ee     60 00 01 1D 
0b5f2     10 00 00 8F 
0b5f6     1C 20 01 0D | 	byte	$71, $08, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $01, $0d
0b5fa     73 F0 00 00 
0b5fe     00 00 00 00 
0b602     0A 06 00 A0 
0b606     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0b60a     04 C2 00 00 
0b60e     00 00 01 1D 
0b612     0E 93 00 8F 
0b616     1C 20 01 0D | 	byte	$04, $c2, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $01, $0d
0b61a     74 C4 00 00 
0b61e     00 00 01 1D 
0b622     10 00 00 AA 
0b626     10 00 01 2E | 	byte	$74, $c4, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $01, $2e
0b62a     73 F0 00 00 
0b62e     00 00 01 40 
0b632     1A 08 00 A0 
0b636     1C 20 01 0D | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $01, $0d
0b63a     7C 18 00 00 
0b63e     00 00 00 00 
0b642     0A 08 00 BE 
0b646     10 00 01 1D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
0b64a     71 04 00 CA 
0b64e     50 00 01 7D 
0b652     10 00 00 BE 
0b656     1C 20 01 0D | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
0b65a     73 F0 00 00 
0b65e     00 00 00 00 
0b662     00 00 00 A0 
0b666     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $aa
0b66a     74 C1 00 00 
0b66e     00 00 00 00 
0b672     00 00 00 A0 
0b676     10 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0b67a     04 C1 00 00 
0b67e     00 00 00 00 
0b682     00 00 00 8F 
0b686     10 00 00 BE | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $be
0b68a     71 04 00 00 
0b68e     00 00 00 00 
0b692     00 00 00 A0 
0b696     1C 20 00 B4 | 	byte	$71, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $b4
0b69a     73 F0 00 00 
0b69e     00 00 00 00 
0b6a2     00 00 00 7F 
0b6a6     10 00 00 D6 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0b6aa     71 02 00 00 
0b6ae     00 00 01 7D 
0b6b2     10 00 00 7F 
0b6b6     1C 30 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $ca
0b6ba     73 F0 00 00 
0b6be     00 00 00 00 
0b6c2     00 00 00 8F 
0b6c6     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0b6ca     04 C1 00 00 
0b6ce     00 00 00 00 
0b6d2     00 00 00 8F 
0b6d6     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0b6da     04 C1 00 00 
0b6de     00 00 00 00 
0b6e2     00 00 00 A0 
0b6e6     10 00 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b6ea     70 00 00 00 
0b6ee     00 00 00 00 
0b6f2     00 00 00 A0 
0b6f6     1C 30 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $ca
0b6fa     73 F0 00 00 
0b6fe     00 00 00 00 
0b702     00 00 00 F0 
0b706     40 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $e2
0b70a     73 F0 00 FE 
0b70e     60 00 01 E0 
0b712     10 00 00 F0 
0b716     4C 30 00 00 | 	byte	$73, $f0, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
0b71a     04 C1 00 00 
0b71e     00 00 00 00 
0b722     00 00 00 7F 
0b726     10 00 01 0D | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
0b72a     73 F0 00 00 
0b72e     00 00 00 00 
0b732     00 00 00 7F 
0b736     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
0b73a     04 C1 00 00 
0b73e     00 00 00 00 
0b742     00 00 00 8F 
0b746     1A 06 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $e2
0b74a     73 F0 00 00 
0b74e     00 00 00 00 
0b752     00 00 00 7F 
0b756     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
0b75a     04 C1 00 00 
0b75e     00 00 00 00 
0b762     00 00 00 7F 
0b766     1A 01 00 D6 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $d6
0b76a     71 04 00 CA 
0b76e     50 00 01 7D 
0b772     10 00 00 00 
0b776     0A 01 00 CA | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $ca
0b77a     73 F0 00 00 
0b77e     00 00 00 00 
0b782     00 00 00 00 
0b786     0A 01 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $e2
0b78a     73 F0 00 00 
0b78e     00 00 01 40 
0b792     10 00 00 00 
0b796     0A 01 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $ca
0b79a     7C 18 00 00 
0b79e     00 00 00 00 
0b7a2     00 00 00 00 
0b7a6     0A 01 01 0D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $01, $0d
0b7aa     70 00 00 00 
0b7ae     00 00 01 53 
0b7b2     19 02 00 00 
0b7b6     0A 01 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $0a, $01, $00, $e2
0b7ba     7C 18 00 00 
0b7be     00 00 00 00 
0b7c2     00 00 00 7F 
0b7c6     10 00 00 D6 | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0b7ca     71 04 00 00 
0b7ce     00 00 01 7D 
0b7d2     10 00 00 00 
0b7d6     00 00 00 CA | 	byte	$71, $04, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
0b7da     73 F0 00 00 
0b7de     00 00 00 00 
0b7e2     00 00 00 A0 
0b7e6     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0b7ea     04 C2 00 00 
0b7ee     00 00 00 00 
0b7f2     00 00 00 A0 
0b7f6     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0b7fa     06 01 00 00 
0b7fe     00 00 00 00 
0b802     00 00 00 8F 
0b806     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0b80a     06 01 00 00 
0b80e     00 00 00 00 
0b812     00 00 00 A0 
0b816     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0b81a     06 01 00 00 
0b81e     00 00 00 00 
0b822     0D 00 00 00 
0b826     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0b82a     00 00 00 00 
      ...             
0b91e     00 00 00 00 
0b922     00 00 00    | 	byte	$00[251]
0b925     7F 1F 05 00 
0b929     B4 71 03 00 
0b92d     CA 50 00 01 
0b931     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $b4, $71, $03, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b935     00 0A 06 00 
0b939     AA 73 F0 00 
0b93d     00 00 00 00 
0b941     00 00 00 00 | 	byte	$00, $0a, $06, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b945     7F 0E 93 00 
0b949     00 04 C2 00 
0b94d     00 00 00 00 
0b951     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b955     8F 1C 30 00 
0b959     00 04 C2 00 
0b95d     00 00 00 00 
0b961     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b965     BE 10 00 00 
0b969     00 04 C2 00 
0b96d     00 00 00 00 
0b971     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b975     00 00 00 00 
0b979     00          | 	byte	$00[5]
0b97a     04 C2 00 00 
0b97e     00 00 00 00 
0b982     00 00 00 7F 
0b986     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $aa
0b98a     74 C1 00 00 
0b98e     00 00 01 40 
0b992     10 00 00 00 
0b996     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0b99a     04 C2 00 00 
0b99e     00 00 00 00 
0b9a2     00 00 00 F0 
0b9a6     40 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0b9aa     04 C2 00 00 
0b9ae     00 00 00 00 
0b9b2     00 00 00 F0 
0b9b6     4C 20 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $b4
0b9ba     73 F0 00 00 
0b9be     00 00 01 40 
0b9c2     1A 08 00 FE 
0b9c6     40 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $aa
0b9ca     73 F0 00 00 
0b9ce     00 00 01 40 
0b9d2     10 00 00 FE 
0b9d6     4C 20 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $b4
0b9da     73 F0 00 00 
0b9de     00 00 01 1D 
0b9e2     1C 20 00 8F 
0b9e6     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $ca
0b9ea     73 F0 00 E2 
0b9ee     60 00 01 1D 
0b9f2     10 00 00 8F 
0b9f6     1C 20 00 00 | 	byte	$73, $f0, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
0b9fa     04 C1 00 00 
0b9fe     00 00 00 00 
0ba02     0A 06 00 A0 
0ba06     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0ba0a     02 06 00 00 
0ba0e     00 00 01 1D 
0ba12     0E 93 00 8F 
0ba16     1C 20 00 CA | 	byte	$02, $06, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $ca
0ba1a     73 F0 00 00 
0ba1e     00 00 01 1D 
0ba22     10 00 00 AA 
0ba26     10 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $e2
0ba2a     70 00 00 00 
0ba2e     00 00 01 40 
0ba32     1A 08 00 A0 
0ba36     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $ca
0ba3a     7C 20 00 00 
0ba3e     00 00 00 00 
0ba42     0A 08 00 BE 
0ba46     10 00 01 1D | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
0ba4a     71 06 00 CA 
0ba4e     50 00 01 7D 
0ba52     10 00 00 BE 
0ba56     1C 20 01 0D | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
0ba5a     73 F0 00 00 
0ba5e     00 00 00 00 
0ba62     00 00 00 7F 
0ba66     1E 93 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $ca
0ba6a     70 00 00 00 
0ba6e     00 00 00 00 
0ba72     00 00 00 7F 
0ba76     10 00 01 0D | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
0ba7a     7C 20 00 00 
0ba7e     00 00 00 00 
0ba82     00 00 00 8F 
0ba86     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0ba8a     70 00 00 00 
0ba8e     00 00 00 00 
0ba92     00 00 00 7F 
0ba96     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $ca
0ba9a     7C 20 00 00 
0ba9e     00 00 00 00 
0baa2     00 00 00 A0 
0baa6     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $aa
0baaa     70 00 00 00 
0baae     00 00 01 7D 
0bab2     10 00 00 A0 
0bab6     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
0baba     00 00 00 00 
0babe     00 00 00 00 
0bac2     00 00 00    | 	byte	$00[11]
0bac5     AA 10 00 00 
0bac9     B4 70 00 00 
0bacd     00 00 00 00 
0bad1     00 00 00 00 | 	byte	$aa, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bad5     AA 1C 30 00 
0bad9     AA 7C 20 00 
0badd     00 00 00 00 
0bae1     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bae5     BE 10 00 00 
0bae9     AA 70 00 00 
0baed     00 00 00 00 
0baf1     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0baf5     BE 1C 30 00 
0baf9     B4 7C 20 00 
0bafd     00 00 00 00 
0bb01     00 00 00 00 | 	byte	$be, $1c, $30, $00, $b4, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb05     D6 10 00 00 
0bb09     97 70 00 00 
0bb0d     E2 60 00 01 
0bb11     AC 10 00 00 | 	byte	$d6, $10, $00, $00, $97, $70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0bb15     D6 1C 30 00 
0bb19     AA 7C 20 00 
0bb1d     00 00 00 00 
0bb21     00 00 00 00 | 	byte	$d6, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb25     FE 1A 04 00 
0bb29     AA 70 00 00 
0bb2d     00 00 00 00 
0bb31     00 00 00 00 | 	byte	$fe, $1a, $04, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb35     FE 0E 93 00 
0bb39     97 7C 20 00 
0bb3d     00 00 00 00 
0bb41     00 00 00 00 | 	byte	$fe, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb45     A0 10 00 00 
0bb49     B4 70 00 00 
0bb4d     00 00 00 01 
0bb51     AC 1C 30 00 | 	byte	$a0, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $01, $ac, $1c, $30, $00
0bb55     A0 1C 30 00 
0bb59     AA 7C 20 00 
0bb5d     00 00 00 00 
0bb61     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb65     BE 10 00 00 
0bb69     AA 70 00 00 
0bb6d     CA 50 00 01 
0bb71     7D 10 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0bb75     00 00 00 00 
0bb79     B4 73 F0 00 
0bb7d     00 00 00 00 
0bb81     00 00 00 00 | 	byte	$00, $00, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb85     00 00 00 00 
0bb89     CA 73 F0 00 
0bb8d     00 00 00 00 
0bb91     00 00 00 00 | 	byte	$00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb95     00 00 00 00 
0bb99     00 00 00 00 
0bb9d     00 00 00 00 
0bba1     00 00 00 00 | 	byte	$00[16]
0bba5     BE 1A 02 00 
0bba9     F0 71 0A 00 
0bbad     00 0F 03 01 
0bbb1     AC 19 02 00 | 	byte	$be, $1a, $02, $00, $f0, $71, $0a, $00, $00, $0f, $03, $01, $ac, $19, $02, $00
0bbb5     00 0A 02 00 
0bbb9     E2 73 F0 00 
0bbbd     00 0F 02 00 
0bbc1     00 00 00 00 | 	byte	$00, $0a, $02, $00, $e2, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0bbc5     00 0A 02 00 
0bbc9     00 0C 10 00 
0bbcd     00 0F 03 00 
0bbd1     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $0c, $10, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0bbd5     00 0A 02 00 
0bbd9     00 00 00 00 
0bbdd     00 0F 02 00 
0bbe1     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0bbe5     00 0A 02 00 
0bbe9     D6 71 0A 00 
0bbed     00 0F 03 01 
0bbf1     7D 10 00 00 | 	byte	$00, $0a, $02, $00, $d6, $71, $0a, $00, $00, $0f, $03, $01, $7d, $10, $00, $00
0bbf5     00 0A 02 00 
0bbf9     CA 73 F0 00 
0bbfd     00 0F 02 00 
0bc01     00 00 00 00 | 	byte	$00, $0a, $02, $00, $ca, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0bc05     00 0A 02 00 
0bc09     00 04 C2 00 
0bc0d     00 0F 03 00 
0bc11     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $04, $c2, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0bc15     00 0A 02 00 
0bc19     00 06 02 00 
0bc1d     00 0F 02 00 
0bc21     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0bc25     00 0A 02 00 
0bc29     00 06 02 00 
0bc2d     00 0F 03 00 
0bc31     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0bc35     00 0A 02 00 
0bc39     00 06 02 00 
0bc3d     00 0F 02 00 
0bc41     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0bc45     00 0A 02 00 
0bc49     00 06 02 00 
0bc4d     00 0F 03 00 
0bc51     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0bc55     00 0A 02 00 
0bc59     00 06 02 00 
0bc5d     00 0F 02 00 
0bc61     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0bc65     A0 10 00 00 
0bc69     AA 70 00 00 
0bc6d     00 0F 03 00 
0bc71     00 00 00 00 | 	byte	$a0, $10, $00, $00, $aa, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0bc75     A0 1C 30 00 
0bc79     00 00 00 00 
0bc7d     00 0F 02 00 
0bc81     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0bc85     8F 10 00 00 
0bc89     97 70 00 00 
0bc8d     00 0F 03 00 
0bc91     00 00 00 00 | 	byte	$8f, $10, $00, $00, $97, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0bc95     00 00 00 00 
0bc99     00 00 00 00 
0bc9d     00          | 	byte	$00[9]
0bc9e     0F 02 00 00 
0bca2     0D 00 00 00 
0bca6     00 00 00 00 
0bcaa     00 00 00 00 | 	byte	$0f, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcae     00 00 00 00 
      ...             
0bd1e     00 00 00 00 
0bd22     00 00 00    | 	byte	$00[119]
0bd25     7F 1F 05 00 
0bd29     8F 71 02 00 
0bd2d     CA 50 00 01 
0bd31     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0bd35     00 00 00 00 
0bd39     87 73 F0 00 
0bd3d     00 00 00 00 
0bd41     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd45     A0 10 00 00 
0bd49     00 04 C1 00 
0bd4d     00 00 00 00 
0bd51     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd55     7F 1C 20 00 
0bd59     00 04 C1 00 
0bd5d     00 00 00 00 
0bd61     00 00 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd65     BE 10 00 00 
0bd69     00 04 C1 00 
0bd6d     00 00 00 00 
0bd71     00 0A 02 00 | 	byte	$be, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0bd75     00 00 00 00 
0bd79     00          | 	byte	$00[5]
0bd7a     04 C1 00 00 
0bd7e     00 00 00 00 
0bd82     0A 02 00 F0 
0bd86     40 00 00 97 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $97
0bd8a     70 00 00 FE 
0bd8e     60 00 01 E0 
0bd92     10 00 00 00 
0bd96     00 00 00 AA | 	byte	$70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $aa
0bd9a     73 F0 00 00 
0bd9e     00 00 00 00 
0bda2     00 00 00 D6 
0bda6     4A 06 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $97
0bdaa     73 F0 00 00 
0bdae     00 00 00 00 
0bdb2     00 00 00 F0 
0bdb6     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0bdba     0C 10 00 00 
0bdbe     00 00 00 00 
0bdc2     00 00 00 F0 
0bdc6     40 00 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $aa
0bdca     73 F0 00 00 
0bdce     00 00 00 00 
0bdd2     0A 02 00 00 
0bdd6     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0bdda     0C 10 00 00 
0bdde     00 00 00 F0 
0bde2     1A 02 00 7F 
0bde6     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
0bdea     71 06 00 CA 
0bdee     50 00 01 7D 
0bdf2     10 00 00 00 
0bdf6     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
0bdfa     73 F0 00 00 
0bdfe     00 00 00 00 
0be02     00 00 00 A0 
0be06     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
0be0a     70 00 00 00 
0be0e     00 00 00 00 
0be12     00 00 00 7F 
0be16     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
0be1a     7C 20 00 00 
0be1e     00 00 00 00 
0be22     00 00 00 BE 
0be26     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0be2a     70 00 00 00 
0be2e     00 00 01 7D 
0be32     10 00 00 AA 
0be36     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
0be3a     7C 20 00 00 
0be3e     00 00 00 00 
0be42     00 00 00 A0 
0be46     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0be4a     70 00 00 E2 
0be4e     60 00 01 AC 
0be52     10 00 00 A0 
0be56     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
0be5a     0C 10 00 00 
0be5e     00 00 00 00 
0be62     00 00 00 AA 
0be66     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
0be6a     73 F0 00 00 
0be6e     00 00 00 00 
0be72     00 00 00 BE 
0be76     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0be7a     0C 10 00 00 
0be7e     00 00 00 00 
0be82     00 00 00 AA 
0be86     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
0be8a     70 00 00 00 
0be8e     00 00 00 00 
0be92     0A 02 00 00 
0be96     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
0be9a     7C 20 00 00 
0be9e     00 00 00 00 
0bea2     0A 02 00 A0 
0bea6     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
0beaa     74 C1 00 FE 
0beae     60 00 01 E0 
0beb2     10 00 00 00 
0beb6     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0beba     04 C1 00 00 
0bebe     00 00 00 00 
0bec2     00 00 00 A0 
0bec6     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0beca     04 C2 00 00 
0bece     00 00 00 00 
0bed2     00 00 00 A0 
0bed6     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0beda     04 C2 00 00 
0bede     00 00 00 F0 
0bee2     10 00 00 A0 
0bee6     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
0beea     73 F0 00 00 
0beee     00 00 00 00 
0bef2     00 00 00 00 
0bef6     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0befa     70 00 00 00 
0befe     00 00 00 00 
0bf02     00 00 00 8F 
0bf06     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $a0
0bf0a     71 04 00 E2 
0bf0e     60 00 01 AC 
0bf12     10 00 00 00 
0bf16     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
0bf1a     73 F0 00 00 
0bf1e     00 00 00 00 
0bf22     00 00 00 8F 
0bf26     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
0bf2a     73 F0 00 00 
0bf2e     00 00 00 00 
0bf32     00 00 00 A0 
0bf36     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $97
0bf3a     7C 20 00 00 
0bf3e     00 00 00 00 
0bf42     00 00 00 8F 
0bf46     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0bf4a     70 00 00 00 
0bf4e     00 00 01 AC 
0bf52     10 00 00 00 
0bf56     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
0bf5a     7C 20 00 00 
0bf5e     00 00 00 00 
0bf62     00 00 00 BE 
0bf66     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0bf6a     70 00 00 CA 
0bf6e     50 00 01 7D 
0bf72     10 00 00 00 
0bf76     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
0bf7a     7C 20 00 00 
0bf7e     00 00 00 00 
0bf82     00 00 00 A0 
0bf86     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0bf8a     70 00 00 00 
0bf8e     00 00 00 00 
0bf92     00 00 00 00 
0bf96     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
0bf9a     70 00 00 00 
0bf9e     00 00 01 AC 
0bfa2     10 00 00 8F 
0bfa6     1F 03 00 F0 | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $1f, $03, $00, $f0
0bfaa     71 08 00 00 
0bfae     00 00 00 00 
0bfb2     00 00 00 00 
0bfb6     0F 02 00 E2 | 	byte	$71, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $e2
0bfba     73 F0 00 00 
0bfbe     00 00 00 00 
0bfc2     00 00 00 00 
0bfc6     0F 05 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $05, $00, $00
0bfca     0C 10 00 00 
0bfce     00 00 00 00 
0bfd2     00 00 00 7F 
0bfd6     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0bfda     71 06 00 00 
0bfde     00 00 01 7D 
0bfe2     10 00 00 00 
0bfe6     00 00 00 CA | 	byte	$71, $06, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
0bfea     73 F0 00 00 
0bfee     00 00 00 00 
0bff2     00 00 00 00 
0bff6     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bffa     04 C1 00 00 
0bffe     00 00 00 00 
0c002     00 00 00 00 
0c006     00 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c00a     06 02 00 00 
0c00e     00 00 00 00 
0c012     00 00 00 A0 
0c016     1C 20 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0c01a     06 02 00 00 
0c01e     00 00 00 00 
0c022     00 00 00 8F 
0c026     1C 30 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0c02a     06 02 00 00 
0c02e     00 00 00 00 
0c032     0D 00 00 00 
0c036     00 00 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0c03a     00 00 00 00 
      ...             
0c11e     00 00 00 00 
0c122     00 00 00    | 	byte	$00[235]
0c125     7F 1F 05 00 
0c129     8F 71 04 00 
0c12d     CA 50 00 01 
0c131     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0c135     7F 1C 30 00 
0c139     87 73 F0 00 
0c13d     00 00 00 00 
0c141     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c145     A0 10 00 00 
0c149     00 04 C1 00 
0c14d     00 00 00 00 
0c151     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c155     7F 1C 30 00 
0c159     00 04 C1 00 
0c15d     00 00 00 00 
0c161     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c165     BE 10 00 00 
0c169     AA 70 00 00 
0c16d     00 00 00 00 
0c171     00 0A 02 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0c175     A0 1C 30 00 
0c179     87 7C 20 00 
0c17d     00 00 00 00 
0c181     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0c185     F0 40 00 00 
0c189     97 70 00 00 
0c18d     FE 60 00 01 
0c191     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
0c195     00 00 00 00 
0c199     AA 73 F0 00 
0c19d     00 00 00 00 
0c1a1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1a5     D6 4A 06 00 
0c1a9     97 73 F0 00 
0c1ad     00 00 00 00 
0c1b1     00 00 00 00 | 	byte	$d6, $4a, $06, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1b5     D6 0E 93 00 
0c1b9     00 0C 10 00 
0c1bd     00 00 00 00 
0c1c1     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1c5     F0 40 00 00 
0c1c9     AA 73 F0 00 
0c1cd     00 00 00 00 
0c1d1     00 0A 02 00 | 	byte	$f0, $40, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0c1d5     00 00 00 00 
0c1d9     00          | 	byte	$00[5]
0c1da     0C 10 00 00 
0c1de     00 00 00 F0 
0c1e2     1A 02 00 7F 
0c1e6     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
0c1ea     71 06 00 CA 
0c1ee     50 00 01 7D 
0c1f2     10 00 00 00 
0c1f6     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
0c1fa     73 F0 00 00 
0c1fe     00 00 00 00 
0c202     00 00 00 A0 
0c206     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
0c20a     70 00 00 00 
0c20e     00 00 00 00 
0c212     00 00 00 7F 
0c216     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
0c21a     7C 20 00 00 
0c21e     00 00 00 00 
0c222     00 00 00 BE 
0c226     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0c22a     70 00 00 00 
0c22e     00 00 01 7D 
0c232     10 00 00 AA 
0c236     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
0c23a     7C 20 00 00 
0c23e     00 00 00 00 
0c242     00 00 00 A0 
0c246     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0c24a     70 00 00 E2 
0c24e     60 00 01 AC 
0c252     10 00 00 A0 
0c256     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
0c25a     0C 10 00 00 
0c25e     00 00 00 00 
0c262     00 00 00 AA 
0c266     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
0c26a     73 F0 00 00 
0c26e     00 00 00 00 
0c272     00 00 00 BE 
0c276     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0c27a     0C 10 00 00 
0c27e     00 00 00 00 
0c282     00 00 00 AA 
0c286     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
0c28a     70 00 00 00 
0c28e     00 00 00 00 
0c292     0A 02 00 00 
0c296     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
0c29a     7C 20 00 00 
0c29e     00 00 00 00 
0c2a2     0A 02 00 A0 
0c2a6     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
0c2aa     74 C1 00 FE 
0c2ae     60 00 01 E0 
0c2b2     10 00 00 00 
0c2b6     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0c2ba     04 C1 00 00 
0c2be     00 00 00 00 
0c2c2     00 00 00 A0 
0c2c6     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0c2ca     04 C2 00 00 
0c2ce     00 00 00 00 
0c2d2     00 00 00 A0 
0c2d6     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0c2da     04 C2 00 00 
0c2de     00 00 00 F0 
0c2e2     10 00 00 A0 
0c2e6     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
0c2ea     73 F0 00 00 
0c2ee     00 00 00 00 
0c2f2     00 00 00 00 
0c2f6     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0c2fa     70 00 00 00 
0c2fe     00 00 00 00 
0c302     00 00 00 AA 
0c306     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $a0
0c30a     71 04 00 E2 
0c30e     60 00 01 AC 
0c312     10 00 00 00 
0c316     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
0c31a     73 F0 00 00 
0c31e     00 00 00 00 
0c322     00 00 00 AA 
0c326     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $aa
0c32a     73 F0 00 00 
0c32e     00 00 00 00 
0c332     00 00 00 BE 
0c336     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
0c33a     7C 20 00 00 
0c33e     00 00 00 00 
0c342     00 00 00 AA 
0c346     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
0c34a     70 00 00 00 
0c34e     00 00 01 AC 
0c352     10 00 00 00 
0c356     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
0c35a     7C 20 00 00 
0c35e     00 00 00 00 
0c362     00 00 00 BE 
0c366     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0c36a     70 00 00 CA 
0c36e     50 00 01 7D 
0c372     10 00 00 00 
0c376     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
0c37a     7C 20 00 00 
0c37e     00 00 00 00 
0c382     0F 06 00 A0 
0c386     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0f, $06, $00, $a0, $10, $00, $00, $e2
0c38a     70 00 00 00 
0c38e     00 00 00 00 
0c392     00 00 00 00 
0c396     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
0c39a     70 00 00 00 
0c39e     00 00 00 00 
0c3a2     00 00 00 00 
0c3a6     00 00 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e2
0c3aa     74 C2 00 00 
0c3ae     00 00 01 AC 
0c3b2     10 00 00 AA 
0c3b6     10 00 00 00 | 	byte	$74, $c2, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
0c3ba     04 C2 00 00 
0c3be     00 00 00 00 
0c3c2     0F 07 00 AA 
0c3c6     1E 94 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $0f, $07, $00, $aa, $1e, $94, $00, $00
0c3ca     0C 10 00 00 
0c3ce     00 00 00 00 
0c3d2     0F 08 00 BE 
0c3d6     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $0f, $08, $00, $be, $10, $00, $00, $d6
0c3da     71 02 00 00 
0c3de     00 00 01 7D 
0c3e2     1F 0A 00 00 
0c3e6     04 A1 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $1f, $0a, $00, $00, $04, $a1, $00, $ca
0c3ea     73 F0 00 00 
0c3ee     00 00 00 00 
0c3f2     04 A2 00 00 
0c3f6     06 02 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $04, $a2, $00, $00, $06, $02, $00, $00
0c3fa     04 C1 00 00 
0c3fe     0F 02 00 00 
0c402     06 02 00 00 
0c406     06 02 00 00 | 	byte	$04, $c1, $00, $00, $0f, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0c40a     06 02 00 00 
0c40e     0E 60 00 00 
0c412     06 02 00 00 
0c416     06 02 00 00 | 	byte	$06, $02, $00, $00, $0e, $60, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0c41a     06 02 00 00 
0c41e     0A 02 00 00 
0c422     06 02 00 00 
0c426     06 02 00 00 | 	byte	$06, $02, $00, $00, $0a, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0c42a     06 02 00 00 
0c42e     0E 6F 00 00 
0c432     06 02 00 BE 
0c436     3C 20 00 AA | 	byte	$06, $02, $00, $00, $0e, $6f, $00, $00, $06, $02, $00, $be, $3c, $20, $00, $aa
0c43a     7F 05 00 00 
0c43e     00 00 00 00 
0c442     06 02 00 BE 
0c446     3C 30 00 97 | 	byte	$7f, $05, $00, $00, $00, $00, $00, $00, $06, $02, $00, $be, $3c, $30, $00, $97
0c44a     73 F0 00 00 
0c44e     0D 00 00 00 
0c452     06 02 00 00 
0c456     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00
0c45a     00 00 00 00 
      ...             
0c51e     00 00 00 00 
0c522     00 00 00    | 	byte	$00[203]
0c525     7F 1F 05 00 
0c529     8F 71 04 00 
0c52d     CA 90 00 00 
0c531     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c535     00 00 00 00 
0c539     87 73 F0 00 
0c53d     00 00 00 00 
0c541     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c545     A0 10 00 00 
0c549     00 04 C2 00 
0c54d     00 00 00 00 
0c551     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c555     7F 1C 20 00 
0c559     00 04 C2 00 
0c55d     00 00 00 00 
0c561     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c565     BE 10 00 00 
0c569     97 73 F0 00 
0c56d     00 00 00 00 
0c571     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c575     00 00 00 00 
0c579     AA 73 F0 00 
0c57d     00 00 00 00 
0c581     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c585     F0 40 00 00 
0c589     97 70 00 00 
0c58d     FE B0 00 00 
0c591     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
0c595     00 00 00 00 
0c599     AA 7C 20 00 
0c59d     00 00 00 00 
0c5a1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5a5     D6 4A 06 00 
0c5a9     AA 70 00 00 
0c5ad     00 00 00 00 
0c5b1     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c5b5     F0 0E 93 00 
0c5b9     97 7C 20 00 
0c5bd     00 00 00 00 
0c5c1     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5c5     F0 40 00 00 
0c5c9     B4 70 00 00 
0c5cd     00 00 00 00 
0c5d1     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c5d5     00 00 00 00 
0c5d9     AA 7C 20 00 
0c5dd     00 00 00 00 
0c5e1     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c5e5     7F 10 00 00 
0c5e9     CA 74 C1 00 
0c5ed     CA 90 00 00 
0c5f1     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $ca, $74, $c1, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c5f5     00 00 00 00 
0c5f9     00          | 	byte	$00[5]
0c5fa     06 01 00 00 
0c5fe     00 00 00 00 
0c602     00 00 00 A0 
0c606     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0c60a     06 01 00 00 
0c60e     00 00 00 BE 
0c612     A0 00 00 7F 
0c616     1C 20 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0c61a     06 01 00 00 
0c61e     00 00 00 BE 
0c622     A0 00 00 BE 
0c626     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
0c62a     06 01 00 00 
0c62e     00 00 00 BE 
0c632     3C 20 00 AA 
0c636     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $1c, $30, $00, $00
0c63a     06 01 00 00 
0c63e     00 00 00 BE 
0c642     A0 00 00 A0 
0c646     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0c64a     06 01 00 E2 
0c64e     B0 00 00 BE 
0c652     D0 00 00 A0 
0c656     1C 30 00 00 | 	byte	$06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
0c65a     06 01 00 00 
0c65e     00 00 00 00 
0c662     00 00 00 AA 
0c666     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0c66a     06 01 00 00 
0c66e     00 00 00 BE 
0c672     A0 00 00 BE 
0c676     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
0c67a     06 01 00 00 
0c67e     00 00 00 00 
0c682     00 00 00 AA 
0c686     10 00 00 B4 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
0c68a     70 00 00 00 
0c68e     00 00 00 BE 
0c692     30 00 00 00 
0c696     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $ca
0c69a     7C 20 00 00 
0c69e     00 00 00 BE 
0c6a2     A0 00 00 A0 
0c6a6     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
0c6aa     71 04 00 FE 
0c6ae     B0 00 00 BE 
0c6b2     30 00 00 00 
0c6b6     0C 20 00 AA | 	byte	$71, $04, $00, $fe, $b0, $00, $00, $be, $30, $00, $00, $00, $0c, $20, $00, $aa
0c6ba     73 F0 00 00 
0c6be     00 00 00 00 
0c6c2     00 00 00 A0 
0c6c6     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0c6ca     04 C1 00 00 
0c6ce     00 00 00 BE 
0c6d2     A0 00 00 A0 
0c6d6     1C 20 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $1c, $20, $00, $00
0c6da     04 C1 00 00 
0c6de     00 00 00 BE 
0c6e2     A0 00 00 A0 
0c6e6     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
0c6ea     70 00 00 00 
0c6ee     00 00 00 BE 
0c6f2     3C 20 00 00 
0c6f6     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $aa
0c6fa     73 F0 00 00 
0c6fe     00 00 00 BE 
0c702     A0 00 00 8F 
0c706     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $97
0c70a     73 F0 00 E2 
0c70e     B0 00 00 BE 
0c712     D0 00 00 00 
0c716     0C 20 00 00 | 	byte	$73, $f0, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00, $0c, $20, $00, $00
0c71a     0C 10 00 00 
0c71e     00 00 00 00 
0c722     00 00 00 8F 
0c726     1E 93 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
0c72a     73 F0 00 00 
0c72e     00 00 00 BE 
0c732     A0 00 00 A0 
0c736     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0c73a     0C 10 00 00 
0c73e     00 00 00 00 
0c742     00 00 00 8F 
0c746     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0c74a     74 C1 00 00 
0c74e     00 00 00 BE 
0c752     30 00 00 00 
0c756     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0c75a     04 C1 00 00 
0c75e     00 00 00 BE 
0c762     A0 00 00 BE 
0c766     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $aa
0c76a     70 00 00 CA 
0c76e     90 00 00 BE 
0c772     30 00 00 00 
0c776     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $b4
0c77a     73 F0 00 00 
0c77e     00 00 00 00 
0c782     00 00 00 A0 
0c786     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $ca
0c78a     73 F0 00 00 
0c78e     00 00 00 BE 
0c792     A0 00 00 00 
0c796     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0c79a     04 C1 00 00 
0c79e     00 00 00 BE 
0c7a2     A0 00 00 8F 
0c7a6     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
0c7aa     06 01 00 00 
0c7ae     00 00 00 BE 
0c7b2     3C 20 00 00 
0c7b6     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0c7ba     06 01 00 00 
0c7be     00 00 00 BE 
0c7c2     A0 00 00 7F 
0c7c6     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $00
0c7ca     06 01 00 00 
0c7ce     00 00 00 BE 
0c7d2     D0 00 00 00 
0c7d6     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0c7da     04 C2 00 00 
0c7de     00 00 00 00 
0c7e2     00 00 00 00 
0c7e6     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7ea     06 01 00 00 
0c7ee     00 00 00 BE 
0c7f2     A0 00 00 00 
0c7f6     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0c7fa     06 01 00 00 
0c7fe     00 00 00 00 
0c802     00 00 00 A0 
0c806     1C 20 00 AA | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $aa
0c80a     70 00 00 00 
0c80e     00 00 00 BE 
0c812     30 00 00 8F 
0c816     1C 30 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $97
0c81a     73 F0 00 00 
0c81e     0D 00 00 BE 
0c822     A0 00 00 00 
0c826     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0c82a     00 00 00 00 
      ...             
0c91e     00 00 00 00 
0c922     00 00 00    | 	byte	$00[251]
0c925     7F 1F 05 00 
0c929     87 74 C2 00 
0c92d     CA 90 00 00 
0c931     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $87, $74, $c2, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c935     7F 1C 30 00 
0c939     00 04 C2 00 
0c93d     00 00 00 00 
0c941     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c945     A0 10 00 00 
0c949     00 04 C2 00 
0c94d     00 00 00 00 
0c951     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c955     7F 1C 30 00 
0c959     00 04 C2 00 
0c95d     00 00 00 00 
0c961     BE A0 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c965     BE 10 00 00 
0c969     97 73 F0 00 
0c96d     00 00 00 00 
0c971     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c975     A0 1C 30 00 
0c979     87 73 F0 00 
0c97d     00 00 00 00 
0c981     BE A0 00 00 | 	byte	$a0, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c985     F0 40 00 00 
0c989     7F 70 00 00 
0c98d     FE B0 00 00 
0c991     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $7f, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
0c995     00 00 00 00 
0c999     87 7C 20 00 
0c99d     00 00 00 00 
0c9a1     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c9a5     D6 4A 06 00 
0c9a9     87 70 00 00 
0c9ad     00 00 00 00 
0c9b1     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $87, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c9b5     D6 0E 93 00 
0c9b9     7F 7C 20 00 
0c9bd     00 00 00 00 
0c9c1     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $7f, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c9c5     F0 40 00 00 
0c9c9     97 70 00 00 
0c9cd     00 00 00 00 
0c9d1     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c9d5     00 00 00 00 
0c9d9     87 7C 20 00 
0c9dd     00 00 00 00 
0c9e1     BE A0 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c9e5     7F 10 00 00 
0c9e9     8F 71 04 00 
0c9ed     CA 90 00 00 
0c9f1     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c9f5     00 00 00 00 
0c9f9     87 73 F0 00 
0c9fd     00 00 00 00 
0ca01     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ca05     A0 10 00 00 
0ca09     00 04 C2 00 
0ca0d     00 00 00 00 
0ca11     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ca15     7F 1C 20 00 
0ca19     00 06 01 00 
0ca1d     00 00 00 00 
0ca21     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ca25     BE 10 00 00 
0ca29     00 06 01 00 
0ca2d     00 00 00 00 
0ca31     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0ca35     AA 1C 30 00 
0ca39     00 06 01 00 
0ca3d     00 00 00 00 
0ca41     BE A0 00 00 | 	byte	$aa, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ca45     A0 10 00 00 
0ca49     00 06 01 00 
0ca4d     E2 B0 00 00 
0ca51     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00
0ca55     A0 1C 30 00 
0ca59     00 06 01 00 
0ca5d     00 00 00 00 
0ca61     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ca65     AA 10 00 00 
0ca69     B4 71 03 00 
0ca6d     00 00 00 00 
0ca71     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $b4, $71, $03, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ca75     BE 10 00 00 
0ca79     AA 73 F0 00 
0ca7d     00 00 00 00 
0ca81     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ca85     AA 10 00 00 
0ca89     B4 73 F0 00 
0ca8d     00 00 00 00 
0ca91     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00
0ca95     00 00 00 00 
0ca99     00 00 00 00 
0ca9d     00 00 00 00 | 	byte	$00[12]
0caa1     BE A0 00 00 
0caa5     A0 10 00 00 
0caa9     D6 71 06 00 
0caad     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $71, $06, $00, $fe, $b0, $00, $00
0cab1     BE 30 00 00 
0cab5     00 0C 20 00 
0cab9     CA 73 F0 00 
0cabd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0cac1     00 00 00 00 
0cac5     A0 0E 93 00 
0cac9     00 04 C2 00 
0cacd     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0cad1     BE A0 00 00 
0cad5     A0 1C 20 00 
0cad9     00 04 C2 00 
0cadd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0cae1     BE A0 00 00 
0cae5     A0 10 00 00 
0cae9     B4 73 F0 00 
0caed     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00
0caf1     BE 3C 20 00 
0caf5     00 00 00 00 
0caf9     CA 73 F0 00 
0cafd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0cb01     BE A0 00 00 
0cb05     AA 10 00 00 
0cb09     E2 74 C2 00 
0cb0d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $e2, $b0, $00, $00
0cb11     BE D0 00 00 
0cb15     00 0C 20 00 
0cb19     00 06 01 00 
0cb1d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cb21     00 00 00 00 
0cb25     AA 1E 93 01 
0cb29     0D 74 C2 00 
0cb2d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $01, $0d, $74, $c2, $00, $00, $00, $00, $00
0cb31     BE A0 00 00 
0cb35     BE 10 00 00 
0cb39     00 0C 10 00 
0cb3d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
0cb41     00 00 00 00 
0cb45     AA 10 00 00 
0cb49     E2 74 C2 00 
0cb4d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $00, $00, $00, $00
0cb51     BE 30 00 00 
0cb55     00 00 00 00 
0cb59     00 0C 10 00 
0cb5d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
0cb61     BE A0 00 00 
0cb65     BE 10 00 00 
0cb69     D6 71 08 00 
0cb6d     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $71, $08, $00, $ca, $90, $00, $00
0cb71     BE 30 00 00 
0cb75     00 00 00 00 
0cb79     CA 73 F0 00 
0cb7d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0cb81     00 00 00 00 
0cb85     A0 10 00 00 
0cb89     00 04 C2 00 
0cb8d     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0cb91     BE A0 00 00 
0cb95     00 00 00 00 
0cb99     00 06 01 00 
0cb9d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cba1     BE A0 00 00 
0cba5     AA 10 00 00 
0cba9     00 06 01 00 
0cbad     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cbb1     BE 3C 20 00 
0cbb5     AA 1E 93 00 
0cbb9     00 06 01 00 
0cbbd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cbc1     BE A0 00 00 
0cbc5     BE 10 00 00 
0cbc9     00 06 01 00 
0cbcd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cbd1     BE D0 00 00 
0cbd5     00 04 A1 00 
0cbd9     00 06 01 00 
0cbdd     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cbe1     BE A0 00 00 
0cbe5     00 06 01 00 
0cbe9     00 06 01 00 
0cbed     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cbf1     BE AC 20 00 
0cbf5     00 06 01 00 
0cbf9     00 06 01 00 
0cbfd     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cc01     BE 3C 20 00 
0cc05     00 06 01 00 
0cc09     00 06 01 00 
0cc0d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cc11     BE D0 00 00 
0cc15     00 06 01 00 
0cc19     00 06 01 00 
0cc1d     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00
0cc21     00 00 00 00 
      ...             
0cd1d     00 00 00 00 
0cd21     00 00 00 00 | 	byte	$00[260]
0cd25     BE 10 00 00 
0cd29     00 06 01 00 
0cd2d     CA 90 00 00 
0cd31     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0cd35     00 00 00 00 
0cd39     00          | 	byte	$00[5]
0cd3a     06 01 00 00 
0cd3e     00 00 00 00 
0cd42     00 00 00 A0 
0cd46     1E 93 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0cd4a     06 01 00 00 
0cd4e     00 00 00 BE 
0cd52     A0 00 00 8F 
0cd56     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
0cd5a     06 01 00 00 
0cd5e     00 00 00 BE 
0cd62     A0 00 00 A0 
0cd66     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0cd6a     06 01 00 00 
0cd6e     00 00 00 BE 
0cd72     3C 20 00 AA 
0cd76     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0cd7a     06 01 00 00 
0cd7e     00 00 00 BE 
0cd82     A0 00 00 A0 
0cd86     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0cd8a     06 01 00 00 
0cd8e     00 00 00 BE 
0cd92     D0 00 00 A0 
0cd96     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
0cd9a     06 01 00 00 
0cd9e     00 00 00 00 
0cda2     00 00 00 AA 
0cda6     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0cdaa     06 01 00 00 
0cdae     00 00 00 BE 
0cdb2     A0 00 00 AA 
0cdb6     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0cdba     06 01 00 00 
0cdbe     00 00 00 00 
0cdc2     00 00 00 BE 
0cdc6     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0cdca     06 01 00 00 
0cdce     00 00 00 BE 
0cdd2     30 00 00 BE 
0cdd6     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0cdda     0C 00 00 00 
0cdde     00 00 00 BE 
0cde2     A0 00 00 AA 
0cde6     10 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
0cdea     00 00 01 0D 
0cdee     B0 00 00 BE 
0cdf2     30 00 00 00 
0cdf6     00 00 00 00 | 	byte	$00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0cdfa     00 00 00 00 
0cdfe     00 00 00 00 
0ce02     00 00 00    | 	byte	$00[11]
0ce05     AA 1E 93 00 
0ce09     00 00 00 00 
0ce0d     00 00 00 00 
0ce11     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ce15     A0 10 00 00 
0ce19     00 00 00 00 
0ce1d     00 00 00 00 
0ce21     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ce25     AA 10 00 00 
0ce29     00 00 00 00 
0ce2d     00 00 00 00 
0ce31     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0ce35     BE 10 00 00 
0ce39     00 00 00 00 
0ce3d     00 00 00 00 
0ce41     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ce45     AA 10 00 00 
0ce49     00 00 00 00 
0ce4d     00 00 00 00 
0ce51     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0ce55     00 04 82 00 
0ce59     00 00 00 00 
0ce5d     00 00 00 00 
0ce61     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ce65     00 06 01 00 
0ce69     00 00 00 00 
0ce6d     00 00 00 00 
0ce71     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ce75     00 06 01 00 
0ce79     00 00 00 00 
0ce7d     00 00 00 00 
0ce81     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ce85     00 06 01 00 
0ce89     00 00 00 00 
0ce8d     00 00 00 00 
0ce91     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0ce95     00 06 01 00 
0ce99     00 00 00 00 
0ce9d     00 00 00 00 
0cea1     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0cea5     A0 10 00 00 
0cea9     00 00 00 00 
0cead     CA 90 00 00 
0ceb1     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0ceb5     00 00 00 00 
0ceb9     00 00 00 00 
0cebd     00 00 00 00 
0cec1     00 00 00 00 | 	byte	$00[16]
0cec5     BE 1E 93 00 
0cec9     00 00 00 00 
0cecd     00 00 00 00 
0ced1     BE A0 00 00 | 	byte	$be, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ced5     A0 10 00 00 
0ced9     00 00 00 00 
0cedd     00 00 00 00 
0cee1     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0cee5     8F 10 00 00 
0cee9     00 00 00 00 
0ceed     00 00 00 00 
0cef1     BE 3C 20 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0cef5     A0 10 00 00 
0cef9     00 00 00 00 
0cefd     00 00 00 00 
0cf01     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0cf05     7F 10 00 00 
0cf09     00 00 00 00 
0cf0d     00 00 00 00 
0cf11     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0cf15     7F 1C 30 00 
0cf19     00 00 00 00 
0cf1d     00 00 00 00 
0cf21     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf25     BE 40 00 00 
0cf29     00 00 00 00 
0cf2d     00 00 00 00 
0cf31     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0cf35     BE 4A 08 00 
0cf39     00 00 00 00 
0cf3d     00 00 00 00 
0cf41     00 00 00 00 | 	byte	$be, $4a, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf45     D6 40 00 00 
0cf49     00 00 00 00 
0cf4d     00 00 00 00 
0cf51     BE 30 00 00 | 	byte	$d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0cf55     BE 40 00 00 
0cf59     00 00 00 00 
0cf5d     00 00 00 00 
0cf61     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0cf65     7F 10 00 00 
0cf69     00 00 00 01 
0cf6d     0D B0 00 00 
0cf71     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
0cf75     7F 1C 30 00 
0cf79     00 00 00 00 
0cf7d     00 00 00 00 
0cf81     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf85     7F 1E 93 00 
0cf89     00 00 00 00 
0cf8d     00 00 00 00 
0cf91     BE A0 00 00 | 	byte	$7f, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0cf95     F0 40 00 00 
0cf99     00 00 00 00 
0cf9d     00 00 00 00 
0cfa1     BE A0 00 00 | 	byte	$f0, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0cfa5     7F 10 00 00 
0cfa9     00 00 00 00 
0cfad     00 00 00 00 
0cfb1     BE 3C 20 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0cfb5     8F 10 00 00 
0cfb9     00 00 00 00 
0cfbd     00 00 00 00 
0cfc1     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0cfc5     7F 10 00 00 
0cfc9     00 00 00 00 
0cfcd     00 00 00 00 
0cfd1     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0cfd5     00 04 81 00 
0cfd9     00 00 00 00 
0cfdd     00 00 00 00 
0cfe1     00 00 00 00 | 	byte	$00, $04, $81, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cfe5     00 06 01 00 
0cfe9     00 00 00 00 
0cfed     00 00 00 00 
0cff1     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0cff5     00 06 01 00 
0cff9     00 00 00 00 
0cffd     00 00 00 00 
0d001     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d005     00 06 01 00 
0d009     00 00 00 00 
0d00d     00 00 00 00 
0d011     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0d015     00 06 01 00 
0d019     00 0D 00 00 
0d01d     00 00 00 00 
0d021     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d025     00 00 00 00 
      ...             
0d11d     00 00 00 00 
0d121     00 00 00 00 | 	byte	$00[256]
0d125     BE 10 00 00 
0d129     00 00 00 00 
0d12d     CA 90 00 00 
0d131     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0d135     00 00 00 00 
0d139     00 00 00 00 
0d13d     00 00 00 00 
0d141     00 00 00 00 | 	byte	$00[16]
0d145     A0 1E 93 00 
0d149     00 00 00 00 
0d14d     00 00 00 00 
0d151     BE A0 00 00 | 	byte	$a0, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d155     8F 10 00 00 
0d159     00 00 00 00 
0d15d     00 00 00 00 
0d161     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d165     A0 10 00 00 
0d169     00 00 00 00 
0d16d     00 00 00 00 
0d171     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0d175     AA 10 00 00 
0d179     00 00 00 00 
0d17d     00 00 00 00 
0d181     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d185     A0 10 00 00 
0d189     00 00 00 00 
0d18d     00 00 00 00 
0d191     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0d195     A0 1C 30 00 
0d199     00 00 00 00 
0d19d     00 00 00 00 
0d1a1     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d1a5     AA 10 00 00 
0d1a9     00 00 00 00 
0d1ad     00 00 00 00 
0d1b1     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d1b5     AA 1C 30 00 
0d1b9     00 00 00 00 
0d1bd     00 00 00 00 
0d1c1     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d1c5     BE 10 00 00 
0d1c9     00 00 00 00 
0d1cd     00 00 00 00 
0d1d1     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0d1d5     BE 1C 30 00 
0d1d9     00 00 00 00 
0d1dd     00 00 00 00 
0d1e1     BE A0 00 00 | 	byte	$be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d1e5     AA 10 00 00 
0d1e9     00 00 00 01 
0d1ed     0D B0 00 00 
0d1f1     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
0d1f5     00 00 00 00 
0d1f9     00 00 00 00 
0d1fd     00 00 00 00 
0d201     00 00 00 00 | 	byte	$00[16]
0d205     AA 1E 93 00 
0d209     00 00 00 00 
0d20d     00 00 00 00 
0d211     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d215     A0 10 00 00 
0d219     00 00 00 00 
0d21d     00 00 00 00 
0d221     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d225     AA 10 00 00 
0d229     00 00 00 00 
0d22d     00 00 00 00 
0d231     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0d235     BE 10 00 00 
0d239     00 00 00 00 
0d23d     00 00 00 00 
0d241     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d245     AA 10 00 00 
0d249     00 00 00 00 
0d24d     00 00 00 00 
0d251     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0d255     00 04 82 00 
0d259     00 00 00 00 
0d25d     00 00 00 00 
0d261     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d265     00 06 01 00 
0d269     00 00 00 00 
0d26d     00 00 00 00 
0d271     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d275     00 06 01 00 
0d279     00 00 00 00 
0d27d     00 00 00 00 
0d281     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d285     00 06 01 00 
0d289     00 00 00 00 
0d28d     00 00 00 00 
0d291     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0d295     00 06 01 00 
0d299     00 00 00 00 
0d29d     00 00 00 00 
0d2a1     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d2a5     A0 10 00 00 
0d2a9     00 00 00 00 
0d2ad     FE B0 00 00 
0d2b1     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
0d2b5     00 0C 20 00 
0d2b9     00 00 00 00 
0d2bd     00 00 00 00 
0d2c1     00 00 00 00 | 	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d2c5     A0 0E 93 00 
0d2c9     00 00 00 00 
0d2cd     00 00 00 00 
0d2d1     BE A0 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d2d5     A0 1C 20 00 
0d2d9     00 00 00 00 
0d2dd     00 00 00 00 
0d2e1     BE A0 00 00 | 	byte	$a0, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d2e5     A0 10 00 00 
0d2e9     00 00 00 00 
0d2ed     00 00 00 00 
0d2f1     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0d2f5     00 00 00 00 
0d2f9     00 00 00 00 
0d2fd     00 00 00 00 | 	byte	$00[12]
0d301     BE A0 00 00 
0d305     AA 10 00 00 
0d309     00 00 00 00 
0d30d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $e2, $b0, $00, $00
0d311     BE D0 00 00 
0d315     00 0C 20 00 
0d319     00 00 00 00 
0d31d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d321     00 00 00 00 
0d325     AA 1E 93 00 
0d329     00 00 00 00 
0d32d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d331     BE A0 00 00 
0d335     BE 10 00 00 
0d339     00 00 00 00 
0d33d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d341     00 00 00 00 
0d345     AA 10 00 00 
0d349     00 00 00 00 
0d34d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d351     BE 30 00 00 
0d355     00 00 00 00 
0d359     00 00 00 00 
0d35d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d361     BE A0 00 00 
0d365     BE 10 00 00 
0d369     00 00 00 00 
0d36d     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00
0d371     BE 30 00 00 
0d375     00 00 00 00 
0d379     00 00 00 00 
0d37d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d381     00 00 00 00 
0d385     A0 10 00 00 
0d389     00 00 00 00 
0d38d     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d391     BE A0 00 00 
0d395     00 00 00 00 
0d399     00 00 00 00 
0d39d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3a1     BE A0 00 00 
0d3a5     AA 10 00 00 
0d3a9     00 00 00 00 
0d3ad     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3b1     BE 3C 20 00 
0d3b5     AA 1E 93 00 
0d3b9     00 00 00 00 
0d3bd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3c1     BE A0 00 00 
0d3c5     BE 10 00 00 
0d3c9     00 00 00 00 
0d3cd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3d1     BE D0 00 00 
0d3d5     00 04 A1 00 
0d3d9     00 00 00 00 
0d3dd     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3e1     BE A0 00 00 
0d3e5     00 06 01 00 
0d3e9     00 00 00 00 
0d3ed     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3f1     BE AC 20 00 
0d3f5     00 06 01 00 
0d3f9     00 00 00 00 
0d3fd     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d401     BE 3C 20 00 
0d405     00 06 01 00 
0d409     AA 70 00 00 
0d40d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $aa, $70, $00, $00, $00, $00, $00, $00
0d411     BE D0 00 00 
0d415     00 06 01 00 
0d419     97 73 F0 00 
0d41d     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $97, $73, $f0, $00, $00, $0d, $00, $00
0d421     00 00 00 00 
      ...             
0d51d     00 00 00 00 
0d521     00 00 00 00 | 	byte	$00[260]
0d525     BE 10 00 00 
0d529     CA 70 00 00 
0d52d     CA 90 00 00 
0d531     BE 30 00 00 | 	byte	$be, $10, $00, $00, $ca, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0d535     00 00 00 00 
0d539     00          | 	byte	$00[5]
0d53a     04 C2 00 00 
0d53e     00 00 00 00 
0d542     00 00 00 A0 
0d546     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0d54a     04 C2 00 00 
0d54e     00 00 00 BE 
0d552     A0 00 00 8F 
0d556     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $aa
0d55a     70 00 00 00 
0d55e     00 00 00 BE 
0d562     A0 00 00 A0 
0d566     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
0d56a     73 F0 00 00 
0d56e     00 00 00 BE 
0d572     3C 20 00 AA 
0d576     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0d57a     0C 10 00 00 
0d57e     00 00 00 BE 
0d582     A0 00 00 A0 
0d586     10 00 00 8F | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $8f
0d58a     71 04 00 00 
0d58e     00 00 00 BE 
0d592     D0 00 00 A0 
0d596     1C 30 00 87 | 	byte	$71, $04, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $87
0d59a     73 F0 00 00 
0d59e     00 00 00 00 
0d5a2     00 00 00 AA 
0d5a6     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0d5aa     04 C2 00 00 
0d5ae     00 00 00 BE 
0d5b2     A0 00 00 AA 
0d5b6     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0d5ba     04 C2 00 00 
0d5be     00 00 00 00 
0d5c2     00 00 00 BE 
0d5c6     10 00 00 97 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
0d5ca     70 00 00 00 
0d5ce     00 00 00 BE 
0d5d2     30 00 00 BE 
0d5d6     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0d5da     00 00 00 00 
0d5de     00 00 00    | 	byte	$00[7]
0d5e1     BE A0 00 00 
0d5e5     AA 10 00 00 
0d5e9     8F 71 03 01 
0d5ed     0D B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $8f, $71, $03, $01, $0d, $b0, $00, $00
0d5f1     BE 30 00 00 
0d5f5     00 00 00 00 
0d5f9     87 73 F0 00 
0d5fd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00
0d601     00 00 00 00 
0d605     AA 1E 93 00 
0d609     00 04 C1 00 
0d60d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00
0d611     BE A0 00 00 
0d615     A0 10 00 00 
0d619     00 06 01 00 
0d61d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0d621     BE A0 00 00 
0d625     AA 10 00 00 
0d629     00 06 01 00 
0d62d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0d631     BE 3C 20 00 
0d635     BE 10 00 00 
0d639     00 06 01 00 
0d63d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0d641     BE A0 00 00 
0d645     AA 10 00 00 
0d649     00 04 A2 00 
0d64d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $04, $a2, $00, $00, $00, $00, $00
0d651     BE D0 00 00 
0d655     00 04 82 00 
0d659     00 06 01 00 
0d65d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $06, $01, $00, $00, $00, $00, $00
0d661     00 00 00 00 
0d665     00          | 	byte	$00[5]
0d666     06 01 00 00 
0d66a     06 01 00 00 
0d66e     00 00 00 BE 
0d672     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d676     06 01 00 00 
0d67a     06 01 00 00 
0d67e     00 00 00 00 
0d682     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d686     06 01 00 00 
0d68a     06 01 00 00 
0d68e     00 00 00 BE 
0d692     30 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0d696     06 01 00 00 
0d69a     06 01 00 00 
0d69e     00 00 00 BE 
0d6a2     A0 00 00 A0 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
0d6a6     10 00 00 AA 
0d6aa     70 00 00 CA 
0d6ae     90 00 00 BE 
0d6b2     30 00 00 00 | 	byte	$10, $00, $00, $aa, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0d6b6     00 00 00 00 
0d6ba     04 C2 00 00 
0d6be     00 00 00 00 
0d6c2     00 00 00 BE | 	byte	$00, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0d6c6     1E 93 00 00 
0d6ca     04 C2 00 00 
0d6ce     00 00 00 BE 
0d6d2     A0 00 00 A0 | 	byte	$1e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
0d6d6     10 00 00 B4 
0d6da     73 F0 00 00 
0d6de     00 00 00 BE 
0d6e2     A0 00 00 8F | 	byte	$10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f
0d6e6     10 00 00 CA 
0d6ea     73 F0 00 00 
0d6ee     00 00 00 BE 
0d6f2     3C 20 00 A0 | 	byte	$10, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $a0
0d6f6     10 00 00 00 
0d6fa     0C 10 00 00 
0d6fe     00 00 00 BE 
0d702     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0d706     10 00 00 BE 
0d70a     71 06 00 00 
0d70e     00 00 00 BE 
0d712     D0 00 00 7F | 	byte	$10, $00, $00, $be, $71, $06, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $7f
0d716     1C 30 00 B4 
0d71a     73 F0 00 00 
0d71e     00 00 00 00 
0d722     00 00 00 BE | 	byte	$1c, $30, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0d726     40 00 00 CA 
0d72a     70 00 00 00 
0d72e     00 00 00 BE 
0d732     A0 00 00 BE | 	byte	$40, $00, $00, $ca, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d736     4A 08 00 AA 
0d73a     73 F0 00 00 
0d73e     00 00 00 00 
0d742     00 00 00 D6 | 	byte	$4a, $08, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0d746     40 00 00 97 
0d74a     73 F0 00 00 
0d74e     00 00 00 BE 
0d752     30 00 00 BE | 	byte	$40, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be
0d756     40 00 00 00 
0d75a     0C 10 00 00 
0d75e     00 00 00 BE 
0d762     A0 00 00 7F | 	byte	$40, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0d766     10 00 00 8F 
0d76a     71 02 01 0D 
0d76e     B0 00 00 BE 
0d772     30 00 00 7F | 	byte	$10, $00, $00, $8f, $71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $7f
0d776     1C 30 00 87 
0d77a     73 F0 00 00 
0d77e     00 00 00 00 
0d782     00 00 00 7F | 	byte	$1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0d786     1E 93 00 00 
0d78a     04 C1 00 00 
0d78e     00 00 00 BE 
0d792     A0 00 00 F0 | 	byte	$1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0
0d796     40 00 00 00 
0d79a     04 C1 00 00 
0d79e     00 00 00 BE 
0d7a2     A0 00 00 7F | 	byte	$40, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0d7a6     10 00 00 7F 
0d7aa     73 F0 00 00 
0d7ae     00 00 00 BE 
0d7b2     3C 20 00 8F | 	byte	$10, $00, $00, $7f, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $8f
0d7b6     10 00 00 00 
0d7ba     0C 10 00 00 
0d7be     00 00 00 BE 
0d7c2     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0d7c6     10 00 00 8F 
0d7ca     71 03 00 00 
0d7ce     00 00 00 BE 
0d7d2     D0 00 00 00 | 	byte	$10, $00, $00, $8f, $71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0d7d6     04 81 00 87 
0d7da     73 F0 00 00 
0d7de     00 00 00 00 
0d7e2     00 00 00 00 | 	byte	$04, $81, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d7e6     06 01 00 00 
0d7ea     04 C1 00 00 
0d7ee     00 00 00 BE 
0d7f2     A0 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d7f6     06 01 00 00 
0d7fa     06 01 00 00 
0d7fe     00 00 00 00 
0d802     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d806     06 01 00 00 
0d80a     04 C2 00 00 
0d80e     00 00 00 BE 
0d812     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0d816     06 01 00 00 
0d81a     06 01 00 00 
0d81e     0D 00 00 BE 
0d822     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00
0d826     00 00 00 00 
      ...             
0d91e     00 00 00 00 
0d922     00 00 00    | 	byte	$00[255]
0d925     A0 10 00 00 
0d929     7F 74 C1 00 
0d92d     FE B0 00 00 
0d931     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $7f, $74, $c1, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
0d935     00 00 00 00 
0d939     00          | 	byte	$00[5]
0d93a     04 C2 00 00 
0d93e     00 00 00 00 
0d942     00 00 00 A0 
0d946     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0d94a     04 C2 00 00 
0d94e     00 00 00 BE 
0d952     A0 00 00 8F 
0d956     10 00 00 87 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $87
0d95a     70 00 00 00 
0d95e     00 00 00 BE 
0d962     A0 00 00 A0 
0d966     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
0d96a     73 F0 00 00 
0d96e     00 00 00 BE 
0d972     3C 20 00 AA 
0d976     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0d97a     0C 10 00 00 
0d97e     00 00 00 BE 
0d982     A0 00 00 A0 
0d986     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $a0
0d98a     71 03 00 00 
0d98e     00 00 00 BE 
0d992     D0 00 00 A0 
0d996     1C 30 00 97 | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $97
0d99a     73 F0 00 00 
0d99e     00 00 00 00 
0d9a2     00 00 00 AA 
0d9a6     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0d9aa     04 C1 00 00 
0d9ae     00 00 00 BE 
0d9b2     A0 00 00 AA 
0d9b6     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0d9ba     04 C1 00 00 
0d9be     00 00 00 00 
0d9c2     00 00 00 BE 
0d9c6     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $aa
0d9ca     73 F0 00 00 
0d9ce     00 00 00 BE 
0d9d2     30 00 00 BE 
0d9d6     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0d9da     0C 10 00 00 
0d9de     00 00 00 BE 
0d9e2     A0 00 00 AA 
0d9e6     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $a0
0d9ea     71 02 01 0D 
0d9ee     B0 00 00 BE 
0d9f2     30 00 00 00 
0d9f6     00 00 00 97 | 	byte	$71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $97
0d9fa     73 F0 00 00 
0d9fe     00 00 00 00 
0da02     00 00 00 AA 
0da06     1E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
0da0a     04 C1 00 00 
0da0e     00 00 00 BE 
0da12     A0 00 00 A0 
0da16     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0da1a     04 C1 00 00 
0da1e     00 00 00 BE 
0da22     A0 00 00 AA 
0da26     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $b4
0da2a     71 03 00 00 
0da2e     00 00 00 BE 
0da32     3C 20 00 BE 
0da36     10 00 00 AA | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $be, $10, $00, $00, $aa
0da3a     7C 10 00 00 
0da3e     00 00 00 BE 
0da42     A0 00 00 AA 
0da46     10 00 00 00 | 	byte	$7c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
0da4a     00 00 00 00 
0da4e     00 00 00    | 	byte	$00[7]
0da51     BE D0 00 00 
0da55     00 04 82 00 
0da59     00 00 00 00 
0da5d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00
0da61     00 00 00 00 
0da65     00          | 	byte	$00[5]
0da66     06 01 00 B4 
0da6a     74 C2 00 00 
0da6e     00 00 00 BE 
0da72     A0 00 00 00 | 	byte	$06, $01, $00, $b4, $74, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0da76     06 01 00 00 
0da7a     04 C2 00 00 
0da7e     00 00 00 00 
0da82     00 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0da86     06 01 00 00 
0da8a     04 C2 00 00 
0da8e     00 00 00 BE 
0da92     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0da96     06 01 00 00 
0da9a     04 C2 00 00 
0da9e     00 00 00 BE 
0daa2     A0 00 00 BE | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0daa6     10 00 00 D6 
0daaa     71 04 00 CA 
0daae     90 00 00 BE 
0dab2     30 00 00 00 | 	byte	$10, $00, $00, $d6, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0dab6     0C 20 00 CA 
0daba     73 F0 00 00 
0dabe     00 00 00 00 
0dac2     00 00 00 BE | 	byte	$0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0dac6     0E 93 00 00 
0daca     04 C2 00 00 
0dace     00 00 00 BE 
0dad2     A0 00 00 BE | 	byte	$0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0dad6     1C 20 00 00 
0dada     06 01 00 00 
0dade     00 00 00 BE 
0dae2     A0 00 00 BE | 	byte	$1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0dae6     10 00 00 00 
0daea     06 01 00 00 
0daee     00 00 00 BE 
0daf2     3C 20 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
0daf6     00 00 00 00 
0dafa     06 01 00 00 
0dafe     00 00 00 BE 
0db02     A0 00 00 D6 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
0db06     10 00 00 00 
0db0a     06 01 00 E2 
0db0e     B0 00 00 BE 
0db12     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00
0db16     0C 20 00 00 
0db1a     06 01 00 00 
0db1e     00 00 00 00 
0db22     00 00 00 D6 | 	byte	$0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0db26     1E 93 00 00 
0db2a     06 01 00 00 
0db2e     00 00 00 BE 
0db32     A0 00 00 D6 | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
0db36     10 00 00 00 
0db3a     06 01 00 00 
0db3e     00 00 00 00 
0db42     00 00 00 D6 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0db46     10 00 00 00 
0db4a     06 01 00 00 
0db4e     00 00 00 BE 
0db52     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0db56     00 00 00 00 
0db5a     06 01 00 00 
0db5e     00 00 00 BE 
0db62     A0 00 00 BE | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0db66     10 00 00 00 
0db6a     06 01 00 CA 
0db6e     90 00 00 BE 
0db72     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0db76     00 00 00 00 
0db7a     06 01 00 00 
0db7e     00 00 00 00 
0db82     00 00 00 A0 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0db86     10 00 00 00 
0db8a     06 01 00 00 
0db8e     00 00 00 BE 
0db92     A0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0db96     00 00 00 00 
0db9a     06 01 00 00 
0db9e     00 00 00 BE 
0dba2     A0 00 00 AA | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa
0dba6     10 00 00 00 
0dbaa     06 01 00 00 
0dbae     00 00 00 BE 
0dbb2     3C 20 00 AA | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa
0dbb6     1E 93 00 00 
0dbba     06 01 00 00 
0dbbe     00 00 00 BE 
0dbc2     A0 00 00 BE | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0dbc6     10 00 00 00 
0dbca     06 01 00 00 
0dbce     00 00 00 BE 
0dbd2     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0dbd6     04 A1 00 00 
0dbda     06 01 00 00 
0dbde     00 00 00 BE 
0dbe2     A0 00 00 00 | 	byte	$04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0dbe6     06 01 00 00 
0dbea     06 01 00 00 
0dbee     00 00 00 BE 
0dbf2     AC 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $ac, $20, $00, $00
0dbf6     06 01 00 00 
0dbfa     06 01 00 00 
0dbfe     00 00 00 BE 
0dc02     3C 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
0dc06     06 01 00 00 
0dc0a     06 01 00 00 
0dc0e     00 00 00 BE 
0dc12     D0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0dc16     06 01 00 00 
0dc1a     06 01 00 00 
0dc1e     0D 00 00 00 
0dc22     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0dc26     00 00 00 00 
      ...             
0dd1e     00 00 00 00 
0dd22     00 00 00    | 	byte	$00[255]
0dd25     7F 1F 05 00 
0dd29     BE 20 00 00 
0dd2d     CA 90 00 00 
0dd31     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0dd35     00 00 00 00 
0dd39     00          | 	byte	$00[5]
0dd3a     0A 02 00 00 
0dd3e     00 00 00 00 
0dd42     00 00 00 A0 
0dd46     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0dd4a     0A 02 00 00 
0dd4e     00 00 00 BE 
0dd52     A0 00 00 7F 
0dd56     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0dd5a     0A 02 00 00 
0dd5e     00 00 00 BE 
0dd62     A0 00 00 BE 
0dd66     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0dd6a     0A 02 00 00 
0dd6e     00 00 00 BE 
0dd72     3C 20 00 00 
0dd76     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0dd7a     0A 02 00 00 
0dd7e     00 00 00 BE 
0dd82     A0 00 00 F0 
0dd86     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0dd8a     20 00 00 FE 
0dd8e     B0 00 00 BE 
0dd92     D0 00 00 00 
0dd96     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0dd9a     00 00 00 00 
0dd9e     00 00 00 00 
0dda2     00 00 00    | 	byte	$00[11]
0dda5     D6 4A 06 00 
0dda9     BE 2E 93 00 
0ddad     00 00 00 00 
0ddb1     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ddb5     F0 0E 93 00 
0ddb9     BE 20 00 00 
0ddbd     00 00 00 00 
0ddc1     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ddc5     F0 40 00 00 
0ddc9     D6 20 00 00 
0ddcd     00 00 00 00 
0ddd1     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0ddd5     00 00 00 00 
0ddd9     00          | 	byte	$00[5]
0ddda     0C 20 00 00 
0ddde     00 00 00 BE 
0dde2     A0 00 00 7F 
0dde6     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0ddea     20 00 00 CA 
0ddee     90 00 00 BE 
0ddf2     30 00 00 00 
0ddf6     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0ddfa     0A 02 00 00 
0ddfe     00 00 00 00 
0de02     00 00 00 A0 
0de06     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0de0a     0A 02 00 00 
0de0e     00 00 00 BE 
0de12     A0 00 00 7F 
0de16     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0de1a     0A 02 00 00 
0de1e     00 00 00 BE 
0de22     A0 00 00 BE 
0de26     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0de2a     00 00 00 00 
0de2e     00 00 00    | 	byte	$00[7]
0de31     BE 3C 20 00 
0de35     AA 1C 30 00 
0de39     BE 0E 93 00 
0de3d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0de41     BE A0 00 00 
0de45     A0 10 00 00 
0de49     D6 20 00 00 
0de4d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0de51     BE D0 00 00 
0de55     A0 1C 30 00 
0de59     00 0A 02 00 
0de5d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0de61     00 00 00 00 
0de65     AA 10 00 00 
0de69     00 0A 02 00 
0de6d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0de71     BE A0 00 00 
0de75     BE 10 00 00 
0de79     D6 2C 20 00 
0de7d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0de81     00 00 00 00 
0de85     AA 10 00 00 
0de89     D6 2A 04 00 
0de8d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0de91     BE 30 00 00 
0de95     00 00 00 00 
0de99     00 0A 04 00 
0de9d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0dea1     BE A0 00 00 
0dea5     A0 10 00 00 
0dea9     F0 20 00 00 
0dead     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0deb1     BE 30 00 00 
0deb5     00 0C 20 00 
0deb9     00 00 00 00 
0debd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dec1     00 00 00 00 
0dec5     A0 0E 93 00 
0dec9     F0 20 00 00 
0decd     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0ded1     BE A0 00 00 
0ded5     A0 1C 20 00 
0ded9     F0 2C 30 00 
0dedd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0dee1     BE A0 00 00 
0dee5     A0 10 00 00 
0dee9     F0 20 00 00 
0deed     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0def1     BE 3C 20 00 
0def5     00 00 00 00 
0def9     00 00 00 00 
0defd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0df01     BE A0 00 00 
0df05     8F 10 00 00 
0df09     D6 20 00 00 
0df0d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0df11     BE D0 00 00 
0df15     00 0C 20 00 
0df19     00 00 00 00 
0df1d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0df21     00 00 00 00 
0df25     8F 1E 93 00 
0df29     D6 20 00 00 
0df2d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0df31     BE A0 00 00 
0df35     A0 10 00 00 
0df39     BE 2C 30 00 
0df3d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0df41     00 00 00 00 
0df45     8F 10 00 00 
0df49     D6 20 00 00 
0df4d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0df51     BE 30 00 00 
0df55     00 00 00 00 
0df59     00 00 00 00 
0df5d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0df61     BE A0 00 00 
0df65     BE 10 00 00 
0df69     BE 20 00 00 
0df6d     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $be, $20, $00, $00, $ca, $90, $00, $00
0df71     BE 30 00 00 
0df75     00 00 00 00 
0df79     BE 2C 30 00 
0df7d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0df81     00 00 00 00 
0df85     A0 10 00 01 
0df89     7D 20 00 00 
0df8d     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0df91     BE A0 00 00 
0df95     00 00 00 00 
0df99     BE 2C 30 00 
0df9d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0dfa1     BE A0 00 00 
0dfa5     8F 10 00 00 
0dfa9     00 0A 06 00 
0dfad     00 00 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00
0dfb1     BE 3C 20 00 
0dfb5     00 00 00 00 
0dfb9     BE 0E 93 00 
0dfbd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0dfc1     BE A0 00 00 
0dfc5     7F 10 00 00 
0dfc9     BE 2C 30 00 
0dfcd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $7f, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0dfd1     BE D0 00 00 
0dfd5     00 00 00 00 
0dfd9     00 0A 02 00 
0dfdd     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0dfe1     00 00 00 00 
0dfe5     00 00 00 00 
0dfe9     00          | 	byte	$00[9]
0dfea     0A 02 00 00 
0dfee     00 00 00 BE 
0dff2     A0 00 00 00 
0dff6     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0dffa     0A 02 00 00 
0dffe     00 00 00 00 
0e002     00 00 00 A0 
0e006     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0e00a     0A 02 00 00 
0e00e     00 00 00 BE 
0e012     30 00 00 8F 
0e016     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $00
0e01a     0A 02 00 00 
0e01e     0D 00 00 BE 
0e022     A0 00 00 00 
0e026     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0e02a     00 00 00 00 
      ...             
0e11e     00 00 00 00 
0e122     00 00 00    | 	byte	$00[251]
0e125     7F 1F 05 00 
0e129     BE 20 00 00 
0e12d     CA 90 00 00 
0e131     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0e135     00 00 00 00 
0e139     00          | 	byte	$00[5]
0e13a     0A 02 00 00 
0e13e     00 00 00 00 
0e142     00 00 00 A0 
0e146     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0e14a     0A 02 00 00 
0e14e     00 00 00 BE 
0e152     A0 00 00 7F 
0e156     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0e15a     0A 02 00 00 
0e15e     00 00 00 BE 
0e162     A0 00 00 BE 
0e166     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0e16a     0A 02 00 00 
0e16e     00 00 00 BE 
0e172     3C 20 00 00 
0e176     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0e17a     0A 02 00 00 
0e17e     00 00 00 BE 
0e182     A0 00 00 F0 
0e186     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0e18a     20 00 00 FE 
0e18e     B0 00 00 BE 
0e192     D0 00 00 00 
0e196     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0e19a     00 00 00 00 
0e19e     00 00 00 00 
0e1a2     00 00 00    | 	byte	$00[11]
0e1a5     D6 4A 06 00 
0e1a9     BE 2E 93 00 
0e1ad     00 00 00 00 
0e1b1     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0e1b5     F0 0E 93 00 
0e1b9     BE 20 00 00 
0e1bd     00 00 00 00 
0e1c1     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e1c5     F0 40 00 00 
0e1c9     D6 20 00 00 
0e1cd     00 00 00 00 
0e1d1     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0e1d5     00 00 00 00 
0e1d9     00          | 	byte	$00[5]
0e1da     0C 20 00 00 
0e1de     00 00 00 BE 
0e1e2     A0 00 00 7F 
0e1e6     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0e1ea     20 00 00 CA 
0e1ee     90 00 00 BE 
0e1f2     30 00 00 00 
0e1f6     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0e1fa     0A 02 00 00 
0e1fe     00 00 00 00 
0e202     00 00 00 A0 
0e206     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0e20a     0A 02 00 00 
0e20e     00 00 00 BE 
0e212     A0 00 00 7F 
0e216     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0e21a     0A 02 00 00 
0e21e     00 00 00 BE 
0e222     A0 00 00 BE 
0e226     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0e22a     00 00 00 00 
0e22e     00 00 00    | 	byte	$00[7]
0e231     BE 3C 20 00 
0e235     AA 1C 30 00 
0e239     BE 0E 93 00 
0e23d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0e241     BE A0 00 00 
0e245     A0 10 00 00 
0e249     D6 20 00 00 
0e24d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0e251     BE D0 00 00 
0e255     A0 1C 30 00 
0e259     00 0A 02 00 
0e25d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0e261     00 00 00 00 
0e265     AA 10 00 00 
0e269     00 0A 02 00 
0e26d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0e271     BE A0 00 00 
0e275     BE 10 00 00 
0e279     D6 2C 20 00 
0e27d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0e281     00 00 00 00 
0e285     AA 10 00 00 
0e289     D6 2A 04 00 
0e28d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0e291     BE 30 00 00 
0e295     00 00 00 00 
0e299     00 0A 04 00 
0e29d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0e2a1     BE A0 00 00 
0e2a5     A0 10 00 00 
0e2a9     F0 20 00 00 
0e2ad     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0e2b1     BE 30 00 00 
0e2b5     00 0C 20 00 
0e2b9     00 00 00 00 
0e2bd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e2c1     00 00 00 00 
0e2c5     A0 0E 93 00 
0e2c9     F0 20 00 00 
0e2cd     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0e2d1     BE A0 00 00 
0e2d5     A0 1C 20 00 
0e2d9     F0 2C 30 00 
0e2dd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0e2e1     BE A0 00 00 
0e2e5     A0 10 00 00 
0e2e9     F0 20 00 00 
0e2ed     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0e2f1     BE 3C 20 00 
0e2f5     00 00 00 00 
0e2f9     00 00 00 00 
0e2fd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e301     BE A0 00 00 
0e305     8F 10 00 00 
0e309     D6 20 00 00 
0e30d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0e311     BE D0 00 00 
0e315     00 0C 20 00 
0e319     00 00 00 00 
0e31d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e321     00 00 00 00 
0e325     8F 1E 93 00 
0e329     D6 20 00 00 
0e32d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0e331     BE A0 00 00 
0e335     A0 10 00 00 
0e339     BE 2C 30 00 
0e33d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0e341     00 00 00 00 
0e345     8F 10 00 00 
0e349     D6 20 00 00 
0e34d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0e351     BE 30 00 00 
0e355     00 00 00 00 
0e359     00 00 00 00 
0e35d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e361     BE A0 00 00 
0e365     BE 10 00 01 
0e369     1D 20 00 00 
0e36d     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
0e371     BE 30 00 00 
0e375     BE 1C 30 00 
0e379     00 00 00 00 
0e37d     00 00 00 00 | 	byte	$be, $30, $00, $00, $be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e381     00 00 00 00 
0e385     BE 10 00 00 
0e389     00 00 00 00 
0e38d     00 0F 06 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $0f, $06, $00
0e391     BE A0 00 00 
0e395     BE 1C 30 01 
0e399     1D 2C 30 00 
0e39d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1c, $30, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
0e3a1     BE A0 00 00 
0e3a5     D6 10 00 00 
0e3a9     00 00 00 00 
0e3ad     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e3b1     BE 3C 20 00 
0e3b5     BE 1E D4 00 
0e3b9     00 00 00 00 
0e3bd     00 0F 07 00 | 	byte	$be, $3c, $20, $00, $be, $1e, $d4, $00, $00, $00, $00, $00, $00, $0f, $07, $00
0e3c1     BE A0 00 00 
0e3c5     BE 10 00 01 
0e3c9     1D 0C 20 00 
0e3cd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
0e3d1     BE D0 00 00 
0e3d5     00 0A 01 00 
0e3d9     00 00 00 00 
0e3dd     00 0A 01 00 | 	byte	$be, $d0, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00
0e3e1     00 00 00 00 
0e3e5     00          | 	byte	$00[5]
0e3e6     0A 01 00 00 
0e3ea     00 00 00 00 
0e3ee     0A 01 00 00 
0e3f2     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0e3f6     0A 01 01 1D 
0e3fa     0C 10 00 00 
0e3fe     0A 01 00 00 
0e402     00 00 00 00 | 	byte	$0a, $01, $01, $1d, $0c, $10, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0e406     0A 01 00 00 
0e40a     00 00 00 00 
0e40e     0A 01 00 00 
0e412     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0e416     0A 01 00 00 
0e41a     00 00 00 00 
0e41e     0A 01 00 00 
0e422     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0e426     0A 01 00 00 
0e42a     0C 00 00 00 
0e42e     0A 01 00 00 
0e432     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0c, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0e436     0A 01 00 00 
0e43a     0E 60 00 00 
0e43e     0A 01 00 00 
0e442     0F 02 00 00 | 	byte	$0a, $01, $00, $00, $0e, $60, $00, $00, $0a, $01, $00, $00, $0f, $02, $00, $00
0e446     0A 01 00 00 
0e44a     0E 6F 00 00 
0e44e     0A 01 00 00 
0e452     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0e, $6f, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0e456     0C 00 00 00 
0e45a     00 00 00 00 
0e45e     0C 00 00 00 
0e462     00 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00
0e466     0F 1F 00 00 
0e46a     00 00 00 00 
0e46e     00 00 00 00 
0e472     00 00 00 00 | 	byte	$0f, $1f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e476     00 00 00 00 
      ...             
0e51e     00 00 00 00 
0e522     00 00 00    | 	byte	$00[175]
0e525     7F 1F 05 00 
0e529     BE 20 00 00 
0e52d     CA 90 00 00 
0e531     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0e535     00 00 00 00 
0e539     00          | 	byte	$00[5]
0e53a     0A 02 00 00 
0e53e     00 00 00 00 
0e542     00 00 00 A0 
0e546     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0e54a     0A 02 00 00 
0e54e     00 00 00 BE 
0e552     A0 00 00 7F 
0e556     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0e55a     0A 02 00 00 
0e55e     00 00 00 BE 
0e562     A0 00 00 BE 
0e566     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0e56a     0A 02 00 00 
0e56e     00 00 00 BE 
0e572     3C 20 00 00 
0e576     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0e57a     0A 02 00 00 
0e57e     00 00 00 BE 
0e582     A0 00 00 F0 
0e586     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0e58a     20 00 00 FE 
0e58e     B0 00 00 BE 
0e592     D0 00 00 00 
0e596     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0e59a     00 00 00 00 
0e59e     00 00 00 00 
0e5a2     00 00 00    | 	byte	$00[11]
0e5a5     D6 4A 06 00 
0e5a9     BE 2E 93 00 
0e5ad     00 00 00 00 
0e5b1     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0e5b5     F0 0E 93 00 
0e5b9     BE 20 00 00 
0e5bd     00 00 00 00 
0e5c1     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e5c5     F0 40 00 00 
0e5c9     D6 20 00 00 
0e5cd     00 00 00 00 
0e5d1     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0e5d5     00 00 00 00 
0e5d9     00          | 	byte	$00[5]
0e5da     0C 20 00 00 
0e5de     00 00 00 BE 
0e5e2     A0 00 00 7F 
0e5e6     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0e5ea     20 00 00 CA 
0e5ee     90 00 00 BE 
0e5f2     30 00 00 00 
0e5f6     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0e5fa     0A 02 00 00 
0e5fe     00 00 00 00 
0e602     00 00 00 A0 
0e606     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0e60a     0A 02 00 00 
0e60e     00 00 00 BE 
0e612     A0 00 00 7F 
0e616     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0e61a     0A 02 00 00 
0e61e     00 00 00 BE 
0e622     A0 00 00 BE 
0e626     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0e62a     00 00 00 00 
0e62e     00 00 00    | 	byte	$00[7]
0e631     BE 3C 20 00 
0e635     AA 1C 30 00 
0e639     BE 0E 93 00 
0e63d     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0e641     BE A0 00 00 
0e645     A0 10 00 00 
0e649     D6 20 00 00 
0e64d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0e651     BE D0 00 00 
0e655     A0 1C 30 00 
0e659     00 0A 02 00 
0e65d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0e661     00 00 00 00 
0e665     AA 10 00 00 
0e669     00 0A 02 00 
0e66d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0e671     BE A0 00 00 
0e675     BE 10 00 00 
0e679     D6 2C 20 00 
0e67d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0e681     00 00 00 00 
0e685     AA 10 00 00 
0e689     D6 2A 04 00 
0e68d     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0e691     BE 30 00 00 
0e695     00 00 00 00 
0e699     00 0A 04 00 
0e69d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0e6a1     BE A0 00 00 
0e6a5     A0 10 00 00 
0e6a9     F0 20 00 00 
0e6ad     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0e6b1     BE 30 00 00 
0e6b5     00 0C 20 00 
0e6b9     00 00 00 00 
0e6bd     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e6c1     00 00 00 00 
0e6c5     A0 0E 93 00 
0e6c9     F0 20 00 00 
0e6cd     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0e6d1     BE A0 00 00 
0e6d5     A0 1C 20 00 
0e6d9     F0 2C 30 00 
0e6dd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0e6e1     BE A0 00 00 
0e6e5     A0 10 00 00 
0e6e9     F0 20 00 00 
0e6ed     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0e6f1     BE 3C 20 00 
0e6f5     00 00 00 00 
0e6f9     00 00 00 00 
0e6fd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e701     BE A0 00 00 
0e705     8F 10 00 00 
0e709     D6 20 00 00 
0e70d     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0e711     BE D0 00 00 
0e715     00 0C 20 00 
0e719     00 00 00 00 
0e71d     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e721     00 00 00 00 
0e725     8F 1E 93 00 
0e729     D6 20 00 00 
0e72d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0e731     BE A0 00 00 
0e735     A0 10 00 00 
0e739     BE 2C 30 00 
0e73d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0e741     00 00 00 00 
0e745     8F 10 00 00 
0e749     D6 20 00 00 
0e74d     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0e751     BE 30 00 00 
0e755     00 00 00 00 
0e759     00 00 00 00 
0e75d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e761     BE A0 00 00 
0e765     BE 10 00 01 
0e769     1D 20 00 00 
0e76d     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
0e771     BE 30 00 00 
0e775     00 00 00 00 
0e779     00 00 00 00 
0e77d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e781     00 00 00 00 
0e785     BE 10 00 00 
0e789     00 00 00 00 
0e78d     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e791     BE A0 00 00 
0e795     00 00 00 01 
0e799     1D 2C 30 00 
0e79d     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
0e7a1     BE A0 00 00 
0e7a5     D6 10 00 00 
0e7a9     00 00 00 00 
0e7ad     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e7b1     BE 3C 20 00 
0e7b5     00 00 00 00 
0e7b9     00 00 00 00 
0e7bd     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e7c1     BE A0 00 00 
0e7c5     BE 10 00 01 
0e7c9     1D 0C 20 00 
0e7cd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
0e7d1     BE D0 00 00 
0e7d5     00 00 00 00 
0e7d9     00 00 00 00 
0e7dd     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e7e1     00 00 00 00 
0e7e5     BE 10 00 00 
0e7e9     00 00 00 00 
0e7ed     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e7f1     BE A0 00 00 
0e7f5     BE 1E D3 01 
0e7f9     1D 0C 10 00 
0e7fd     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1e, $d3, $01, $1d, $0c, $10, $00, $00, $00, $00, $00
0e801     BE AC 20 00 
0e805     A0 10 00 00 
0e809     00 00 00 00 
0e80d     00 00 00 00 | 	byte	$be, $ac, $20, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e811     BE 30 00 00 
0e815     00 00 00 00 
0e819     00 00 00 00 
0e81d     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e821     BE AD 00 00 
0e825     00 00 00 00 
0e829     00 00 00 00 
0e82d     00 00 00 00 | 	byte	$be, $ad, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e831     00 00 00 00 
      ...             
0e921     00 00 00 00 
0e925     00          | 	byte	$00[245]
0e926     08 09 06 07 
0e92a     06 08 09 08 
0e92e     09 0C 0A 09 
0e932     0C 0E 0D 07 | 	byte	$08, $09, $06, $07, $06, $08, $09, $08, $09, $0c, $0a, $09, $0c, $0e, $0d, $07
0e936     07 07 0A 0C 
0e93a     0A 09 0A 08 
0e93e     0A 09 0A 0C 
0e942     0E 0E 0D 0E | 	byte	$07, $07, $0a, $0c, $0a, $09, $0a, $08, $0a, $09, $0a, $0c, $0e, $0e, $0d, $0e
0e946     0D 0E 0C 0C 
0e94a     12 04 1B 08 
0e94e     04 08 13 21 
0e952     FF 09 09 13 | 	byte	$0d, $0e, $0c, $0c, $12, $04, $1b, $08, $04, $08, $13, $21, $ff, $09, $09, $13
0e956     F7 FF F1 FD 
0e95a     09 FE 08 08 
0e95e     F3 FF FF 00 
0e962     13 25 13 15 | 	byte	$f7, $ff, $f1, $fd, $09, $fe, $08, $08, $f3, $ff, $ff, $00, $13, $25, $13, $15
0e966     22 12 2B 31 
0e96a     00 F7 FF 30 
0e96e     18 38 26 31 
0e972     12 4C 15 1B | 	byte	$22, $12, $2b, $31, $00, $f7, $ff, $30, $18, $38, $26, $31, $12, $4c, $15, $1b
0e976     13 25 26 1C 
0e97a     01 1B 13 FF 
0e97e     ED EC EB E0 
0e982     DB D4 C7 C6 | 	byte	$13, $25, $26, $1c, $01, $1b, $13, $ff, $ed, $ec, $eb, $e0, $db, $d4, $c7, $c6
0e986     D0 D9 F6 E4 
0e98a     CF FF ED DE 
0e98e     FF C7 C1 D9 
0e992     F6 E4 F6 F2 | 	byte	$d0, $d9, $f6, $e4, $cf, $ff, $ed, $de, $ff, $c7, $c1, $d9, $f6, $e4, $f6, $f2
0e996     F0 F6 FF E4 
0e99a     E7 F9 DF EC 
0e99e     0C 09 12 2E 
0e9a2     26 12 1B 36 | 	byte	$f0, $f6, $ff, $e4, $e7, $f9, $df, $ec, $0c, $09, $12, $2e, $26, $12, $1b, $36
0e9a6     1C 34 3C 18 
0e9aa     2E 26 1B 39 
0e9ae     25 4B 39 38 
0e9b2     4C 4B 5B 4C | 	byte	$1c, $34, $3c, $18, $2e, $26, $1b, $39, $25, $4b, $39, $38, $4c, $4b, $5b, $4c
0e9b6     2B 33 48 1C 
0e9ba     2E 39 2A 34 
0e9be     34 32 1E 1C 
0e9c2     22 18 12 25 | 	byte	$2b, $33, $48, $1c, $2e, $39, $2a, $34, $34, $32, $1e, $1c, $22, $18, $12, $25
0e9c6     09 25 30 00 
0e9ca     E2 FA 00 CF 
0e9ce     EA C8 E2 FF 
0e9d2     F7 E5 ED E2 | 	byte	$09, $25, $30, $00, $e2, $fa, $00, $cf, $ea, $c8, $e2, $ff, $f7, $e5, $ed, $e2
0e9d6     FD F6 F2 D0 
0e9da     CF E2 E4 B0 
0e9de     D9 DA C6 E0 
0e9e2     D5 BC CD C9 | 	byte	$fd, $f6, $f2, $d0, $cf, $e2, $e4, $b0, $d9, $da, $c6, $e0, $d5, $bc, $cd, $c9
0e9e6     CF F6 E8 F6 
0e9ea     20 2A 46 4C 
0e9ee     26 20 2C 18 
0e9f2     1A 13 16 26 | 	byte	$cf, $f6, $e8, $f6, $20, $2a, $46, $4c, $26, $20, $2c, $18, $1a, $13, $16, $26
0e9f6     2E 48 39 3D 
0e9fa     4C 36 42 4E 
0e9fe     39 2A 42 46 
0ea02     39 33 2B 1C | 	byte	$2e, $48, $39, $3d, $4c, $36, $42, $4e, $39, $2a, $42, $46, $39, $33, $2b, $1c
0ea06     1E 00 DA C6 
0ea0a     F3 EE EC F2 
0ea0e     DB F1 FC 02 
0ea12     ED F6 F0 DA | 	byte	$1e, $00, $da, $c6, $f3, $ee, $ec, $f2, $db, $f1, $fc, $02, $ed, $f6, $f0, $da
0ea16     DA C0 CF D5 
0ea1a     C9 C4 BD B8 
0ea1e     C1 C0 A6 C6 
0ea22     CE C6 CD C6 | 	byte	$da, $c0, $cf, $d5, $c9, $c4, $bd, $b8, $c1, $c0, $a6, $c6, $ce, $c6, $cd, $c6
0ea26     EC EE FA 09 
0ea2a     F9 12 33 13 
0ea2e     FD FD 12 20 
0ea32     25 25 3A 3F | 	byte	$ec, $ee, $fa, $09, $f9, $12, $33, $13, $fd, $fd, $12, $20, $25, $25, $3a, $3f
0ea36     49 4C 3E 4B 
0ea3a     51 39 42 56 
0ea3e     26 2E 3D 26 
0ea42     20 2E 38 4B | 	byte	$49, $4c, $3e, $4b, $51, $39, $42, $56, $26, $2e, $3d, $26, $20, $2e, $38, $4b
0ea46     43 26 28 38 
0ea4a     45 39 2C 3A 
0ea4e     3A 36 32 18 
0ea52     00 12 0E 09 | 	byte	$43, $26, $28, $38, $45, $39, $2c, $3a, $3a, $36, $32, $18, $00, $12, $0e, $09
0ea56     00 FF 12 2C 
0ea5a     20 33 43 2B 
0ea5e     2A 26 09 00 
0ea62     FF 00 F8 12 | 	byte	$00, $ff, $12, $2c, $20, $33, $43, $2b, $2a, $26, $09, $00, $ff, $00, $f8, $12
0ea66     00 DA EC FE 
0ea6a     F2 F0 F0 DA 
0ea6e     F6 16 0C 08 
0ea72     1B 1A 18 12 | 	byte	$00, $da, $ec, $fe, $f2, $f0, $f0, $da, $f6, $16, $0c, $08, $1b, $1a, $18, $12
0ea76     13 F7 EC F0 
0ea7a     EA F1 F0 E6 
0ea7e     F1 0D 0A 06 
0ea82     14 13 20 21 | 	byte	$13, $f7, $ec, $f0, $ea, $f1, $f0, $e6, $f1, $0d, $0a, $06, $14, $13, $20, $21
0ea86     13 12 25 2D 
0ea8a     21 09 ED F6 
0ea8e     F2 DA D4 D0 
0ea92     D9 DA D2 E2 | 	byte	$13, $12, $25, $2d, $21, $09, $ed, $f6, $f2, $da, $d4, $d0, $d9, $da, $d2, $e2
0ea96     EB FD 00 ED 
0ea9a     E4 EA DC CF 
0ea9e     D6 DA D0 CF 
0eaa2     C8 BD BA CF | 	byte	$eb, $fd, $00, $ed, $e4, $ea, $dc, $cf, $d6, $da, $d0, $cf, $c8, $bd, $ba, $cf
0eaa6     CC B4 B2 CF 
0eaaa     D6 D9 E4 DE 
0eaae     FF 10 04 19 
0eab2     1C 13 10 0F | 	byte	$cc, $b4, $b2, $cf, $d6, $d9, $e4, $de, $ff, $10, $04, $19, $1c, $13, $10, $0f
0eab6     0F 19 28 26 
0eaba     36 44 3E 46 
0eabe     5E 58 49 4B 
0eac2     52 45 39 2B | 	byte	$0f, $19, $28, $26, $36, $44, $3e, $46, $5e, $58, $49, $4b, $52, $45, $39, $2b
0eac6     20 38 40 30 
0eaca     32 26 21 2D 
0eace     28 13 16 2B 
0ead2     33 30 30 1C | 	byte	$20, $38, $40, $30, $32, $26, $21, $2d, $28, $13, $16, $2b, $33, $30, $30, $1c
0ead6     10 16 13 00 
0eada     FF 00 E1 F1 
0eade     06 01 0A 25 
0eae2     30 30 26 13 | 	byte	$10, $16, $13, $00, $ff, $00, $e1, $f1, $06, $01, $0a, $25, $30, $30, $26, $13
0eae6     0E 14 20 13 
0eaea     00 FD 02 02 
0eaee     00 01 F9 F8 
0eaf2     FA FF 0D 13 | 	byte	$0e, $14, $20, $13, $00, $fd, $02, $02, $00, $01, $f9, $f8, $fa, $ff, $0d, $13
0eaf6     1B 33 3F 4A 
0eafa     3E 27 2E 32 
0eafe     1F 09 FE FF 
0eb02     12 10 09 01 | 	byte	$1b, $33, $3f, $4a, $3e, $27, $2e, $32, $1f, $09, $fe, $ff, $12, $10, $09, $01
0eb06     0D 21 1F 13 
0eb0a     14 1B 2A 2B 
0eb0e     26 1F 26 13 
0eb12     02 FA F9 ED | 	byte	$0d, $21, $1f, $13, $14, $1b, $2a, $2b, $26, $1f, $26, $13, $02, $fa, $f9, $ed
0eb16     DB D9 D0 CA 
0eb1a     E1 E5 DF F1 
0eb1e     F9 F8 F6 E4 
0eb22     E2 F4 ED D0 | 	byte	$db, $d9, $d0, $ca, $e1, $e5, $df, $f1, $f9, $f8, $f6, $e4, $e2, $f4, $ed, $d0
0eb26     C4 CD C9 C3 
0eb2a     BD B4 BA C2 
0eb2e     C1 BE C1 C1 
0eb32     C6 E0 E8 EC | 	byte	$c4, $cd, $c9, $c3, $bd, $b4, $ba, $c2, $c1, $be, $c1, $c1, $c6, $e0, $e8, $ec
0eb36     FF 07 02 00 
0eb3a     F2 F6 06 00 
0eb3e     F3 FF 14 20 
0eb42     26 2A 2E 46 | 	byte	$ff, $07, $02, $00, $f2, $f6, $06, $00, $f3, $ff, $14, $20, $26, $2a, $2e, $46
0eb46     58 4C 30 2C 
0eb4a     2C 28 2D 26 
0eb4e     13 25 38 2B 
0eb52     22 21 18 1B | 	byte	$58, $4c, $30, $2c, $2c, $28, $2d, $26, $13, $25, $38, $2b, $22, $21, $18, $1b
0eb56     25 24 26 26 
0eb5a     26 27 26 1C 
0eb5e     0E 04 02 FC 
0eb62     E6 D5 DE FF | 	byte	$25, $24, $26, $26, $26, $27, $26, $1c, $0e, $04, $02, $fc, $e6, $d5, $de, $ff
0eb66     18 18 1B 1C 
0eb6a     12 20 1C 0E 
0eb6e     0D 04 F7 FD 
0eb72     04 FD FC 04 | 	byte	$18, $18, $1b, $1c, $12, $20, $1c, $0e, $0d, $04, $f7, $fd, $04, $fd, $fc, $04
0eb76     04 00 FD FE 
0eb7a     08 25 32 2D 
0eb7e     36 4B 54 56 
0eb82     4C 34 2D 28 | 	byte	$04, $00, $fd, $fe, $08, $25, $32, $2d, $36, $4b, $54, $56, $4c, $34, $2d, $28
0eb86     21 13 09 12 
0eb8a     18 14 1F 1E 
0eb8e     20 24 20 24 
0eb92     26 26 21 1C | 	byte	$21, $13, $09, $12, $18, $14, $1f, $1e, $20, $24, $20, $24, $26, $26, $21, $1c
0eb96     13 14 13 00 
0eb9a     F2 E4 E1 DC 
0eb9e     C7 C6 CF E2 
0eba2     EE E4 DC EB | 	byte	$13, $14, $13, $00, $f2, $e4, $e1, $dc, $c7, $c6, $cf, $e2, $ee, $e4, $dc, $eb
0eba6     F0 ED F1 EB 
0ebaa     E5 E5 E4 DA 
0ebae     CD C4 C4 CF 
0ebb2     D0 C8 CF D5 | 	byte	$f0, $ed, $f1, $eb, $e5, $e5, $e4, $da, $cd, $c4, $c4, $cf, $d0, $c8, $cf, $d5
0ebb6     D4 CF D6 EA 
0ebba     F6 07 06 06 
0ebbe     19 1F 10 0D 
0ebc2     10 12 18 13 | 	byte	$d4, $cf, $d6, $ea, $f6, $07, $06, $06, $19, $1f, $10, $0d, $10, $12, $18, $13
0ebc6     04 0D 20 38 
0ebca     42 40 40 45 
0ebce     44 3C 2D 21 
0ebd2     1E 24 2A 26 | 	byte	$04, $0d, $20, $38, $42, $40, $40, $45, $44, $3c, $2d, $21, $1e, $24, $2a, $26
0ebd6     1F 20 19 16 
0ebda     25 1C 0D 19 
0ebde     26 26 1A 13 
0ebe2     0F 1E 1F 13 | 	byte	$1f, $20, $19, $16, $25, $1c, $0d, $19, $26, $26, $1a, $13, $0f, $1e, $1f, $13
0ebe6     F7 E6 DA D4 
0ebea     E1 ED EE F7 
0ebee     FD FF 0F 13 
0ebf2     0A 09 02 F8 | 	byte	$f7, $e6, $da, $d4, $e1, $ed, $ee, $f7, $fd, $ff, $0f, $13, $0a, $09, $02, $f8
0ebf6     E8 E2 F3 FE 
0ebfa     00 F6 E6 E4 
0ebfe     F1 FC F7 FE 
0ec02     0D 1B 2E 38 | 	byte	$e8, $e2, $f3, $fe, $00, $f6, $e6, $e4, $f1, $fc, $f7, $fe, $0d, $1b, $2e, $38
0ec06     42 48 46 43 
0ec0a     36 2D 26 20 
0ec0e     21 1A 1B 27 
0ec12     26 21 2E 36 | 	byte	$42, $48, $46, $43, $36, $2d, $26, $20, $21, $1a, $1b, $27, $26, $21, $2e, $36
0ec16     3A 3A 31 2E 
0ec1a     38 31 26 1B 
0ec1e     18 16 0E 00 
0ec22     E6 DA DB E1 | 	byte	$3a, $3a, $31, $2e, $38, $31, $26, $1b, $18, $16, $0e, $00, $e6, $da, $db, $e1
0ec26     DE DC D9 DB 
0ec2a     EC ED E4 E7 
0ec2e     F1 F0 F1 E8 
0ec32     DA D9 DA C8 | 	byte	$de, $dc, $d9, $db, $ec, $ed, $e4, $e7, $f1, $f0, $f1, $e8, $da, $d9, $da, $c8
0ec36     C6 CD CF CC 
0ec3a     C8 CD D6 DE 
0ec3e     E4 E6 F1 08 
0ec42     18 13 0E 12 | 	byte	$c6, $cd, $cf, $cc, $c8, $cd, $d6, $de, $e4, $e6, $f1, $08, $18, $13, $0e, $12
0ec46     22 28 27 26 
0ec4a     16 19 20 21 
0ec4e     20 2E 3C 44 
0ec52     50 52 4C 3F | 	byte	$22, $28, $27, $26, $16, $19, $20, $21, $20, $2e, $3c, $44, $50, $52, $4c, $3f
0ec56     37 38 38 32 
0ec5a     26 20 2D 30 
0ec5e     26 1A 19 22 
0ec62     26 26 1C 18 | 	byte	$37, $38, $38, $32, $26, $20, $2d, $30, $26, $1a, $19, $22, $26, $26, $1c, $18
0ec66     18 20 2A 28 
0ec6a     1E 0E 01 F7 
0ec6e     ED E6 E6 EB 
0ec72     F1 F4 F3 FF | 	byte	$18, $20, $2a, $28, $1e, $0e, $01, $f7, $ed, $e6, $e6, $eb, $f1, $f4, $f3, $ff
0ec76     08 16 15 04 
0ec7a     F4 F2 F1 F1 
0ec7e     EE EA E6 E6 
0ec82     E7 EB E5 E1 | 	byte	$08, $16, $15, $04, $f4, $f2, $f1, $f1, $ee, $ea, $e6, $e6, $e7, $eb, $e5, $e1
0ec86     EB EC EE FD 
0ec8a     0F 1E 2D 33 
0ec8e     32 30 26 1C 
0ec92     16 18 13 09 | 	byte	$eb, $ec, $ee, $fd, $0f, $1e, $2d, $33, $32, $30, $26, $1c, $16, $18, $13, $09
0ec96     03 08 0E 18 
0ec9a     1F 20 20 27 
0ec9e     2C 2D 26 1B 
0eca2     1E 1F 18 0E | 	byte	$03, $08, $0e, $18, $1f, $20, $20, $27, $2c, $2d, $26, $1b, $1e, $1f, $18, $0e
0eca6     00 ED ED EA 
0ecaa     DF DA D9 E6 
0ecae     DE D8 D6 DE 
0ecb2     E5 EC EE ED | 	byte	$00, $ed, $ed, $ea, $df, $da, $d9, $e6, $de, $d8, $d6, $de, $e5, $ec, $ee, $ed
0ecb6     F1 ED DF D8 
0ecba     D9 DB D0 C8 
0ecbe     CC CF D3 D5 
0ecc2     CE CF E0 EE | 	byte	$f1, $ed, $df, $d8, $d9, $db, $d0, $c8, $cc, $cf, $d3, $d5, $ce, $cf, $e0, $ee
0ecc6     F8 FF 03 0A 
0ecca     16 1F 20 20 
0ecce     22 26 2B 28 
0ecd2     21 1E 25 33 | 	byte	$f8, $ff, $03, $0a, $16, $1f, $20, $20, $22, $26, $2b, $28, $21, $1e, $25, $33
0ecd6     46 48 46 4F 
0ecda     56 51 4C 3C 
0ecde     34 36 34 30 
0ece2     2C 27 24 26 | 	byte	$46, $48, $46, $4f, $56, $51, $4c, $3c, $34, $36, $34, $30, $2c, $27, $24, $26
0ece6     30 30 27 1C 
0ecea     18 1B 24 26 
0ecee     22 27 27 1C 
0ecf2     0C 00 F8 FC | 	byte	$30, $30, $27, $1c, $18, $1b, $24, $26, $22, $27, $27, $1c, $0c, $00, $f8, $fc
0ecf6     F4 EB EC F1 
0ecfa     FD 0D 16 10 
0ecfe     0A 0D 09 02 
0ed02     FD F8 F8 F8 | 	byte	$f4, $eb, $ec, $f1, $fd, $0d, $16, $10, $0a, $0d, $09, $02, $fd, $f8, $f8, $f8
0ed06     F2 F1 F3 F3 
0ed0a     ED EC F0 EE 
0ed0e     F3 FF 0D 20 
0ed12     30 32 2D 28 | 	byte	$f2, $f1, $f3, $f3, $ed, $ec, $f0, $ee, $f3, $ff, $0d, $20, $30, $32, $2d, $28
0ed16     2A 2D 26 18 
0ed1a     06 02 07 07 
0ed1e     08 09 10 1C 
0ed22     24 1F 15 18 | 	byte	$2a, $2d, $26, $18, $06, $02, $07, $07, $08, $09, $10, $1c, $24, $1f, $15, $18
0ed26     20 1F 15 10 
0ed2a     0A 04 FC ED 
0ed2e     DE DF DF DA 
0ed32     D2 D2 D2 CC | 	byte	$20, $1f, $15, $10, $0a, $04, $fc, $ed, $de, $df, $df, $da, $d2, $d2, $d2, $cc
0ed36     C4 C9 D6 DF 
0ed3a     DC D8 D9 DE 
0ed3e     E1 DA CD C7 
0ed42     C7 C6 C4 C1 | 	byte	$c4, $c9, $d6, $df, $dc, $d8, $d9, $de, $e1, $da, $cd, $c7, $c7, $c6, $c4, $c1
0ed46     BD BC C6 CD 
0ed4a     D5 DC E2 EC 
0ed4e     FC 02 03 07 
0ed52     10 1F 26 21 | 	byte	$bd, $bc, $c6, $cd, $d5, $dc, $e2, $ec, $fc, $02, $03, $07, $10, $1f, $26, $21
0ed56     18 16 1B 21 
0ed5a     27 2A 31 3D 
0ed5e     4B 50 51 50 
0ed62     4C 49 4A 43 | 	byte	$18, $16, $1b, $21, $27, $2a, $31, $3d, $4b, $50, $51, $50, $4c, $49, $4a, $43
0ed66     39 30 2A 32 
0ed6a     3A 34 30 34 
0ed6e     34 2D 28 2A 
0ed72     31 37 39 32 | 	byte	$39, $30, $2a, $32, $3a, $34, $30, $34, $34, $2d, $28, $2a, $31, $37, $39, $32
0ed76     27 22 1F 1C 
0ed7a     13 00 F4 F4 
0ed7e     F9 FD 03 0D 
0ed82     18 19 18 15 | 	byte	$27, $22, $1f, $1c, $13, $00, $f4, $f4, $f9, $fd, $03, $0d, $18, $19, $18, $15
0ed86     14 0C 06 01 
0ed8a     FD F9 F7 F7 
0ed8e     F9 F9 F7 F2 
0ed92     E8 E6 F3 08 | 	byte	$14, $0c, $06, $01, $fd, $f9, $f7, $f7, $f9, $f9, $f7, $f2, $e8, $e6, $f3, $08
0ed96     16 20 26 27 
0ed9a     33 3A 34 2B 
0ed9e     26 22 18 0E 
0eda2     06 06 0D 19 | 	byte	$16, $20, $26, $27, $33, $3a, $34, $2b, $26, $22, $18, $0e, $06, $06, $0d, $19
0eda6     18 19 20 24 
0edaa     26 26 26 26 
0edae     24 1C 13 0A 
0edb2     02 F7 ED EA | 	byte	$18, $19, $20, $24, $26, $26, $26, $26, $24, $1c, $13, $0a, $02, $f7, $ed, $ea
0edb6     EB E8 DF D3 
0edba     D0 D3 D6 D8 
0edbe     D9 DA DC E2 
0edc2     E6 E7 E1 DA | 	byte	$eb, $e8, $df, $d3, $d0, $d3, $d6, $d8, $d9, $da, $dc, $e2, $e6, $e7, $e1, $da
0edc6     D6 D8 D5 CC 
0edca     C3 C0 C4 C6 
0edce     C3 C4 CF E0 
0edd2     EB ED EA EC | 	byte	$d6, $d8, $d5, $cc, $c3, $c0, $c4, $c6, $c3, $c4, $cf, $e0, $eb, $ed, $ea, $ec
0edd6     F9 03 0E 10 
0edda     0F 13 13 0F 
0edde     0E 0F 0F 16 
0ede2     24 2E 31 33 | 	byte	$f9, $03, $0e, $10, $0f, $13, $13, $0f, $0e, $0f, $0f, $16, $24, $2e, $31, $33
0ede6     3A 44 44 3E 
0edea     34 2B 27 24 
0edee     1F 1E 22 27 
0edf2     26 22 1C 19 | 	byte	$3a, $44, $44, $3e, $34, $2b, $27, $24, $1f, $1e, $22, $27, $26, $22, $1c, $19
0edf6     20 2A 2B 26 
0edfa     26 28 27 27 
0edfe     1F 15 0A 02 
0ee02     F9 F4 F1 F9 | 	byte	$20, $2a, $2b, $26, $26, $28, $27, $27, $1f, $15, $0a, $02, $f9, $f4, $f1, $f9
0ee06     03 0E 14 1B 
0ee0a     1F 1F 1C 18 
0ee0e     13 0A 07 00 
0ee12     FF 06 08 00 | 	byte	$03, $0e, $14, $1b, $1f, $1f, $1c, $18, $13, $0a, $07, $00, $ff, $06, $08, $00
0ee16     F4 F0 F1 FA 
0ee1a     03 0A 15 24 
0ee1e     30 34 36 3C 
0ee22     40 43 39 2B | 	byte	$f4, $f0, $f1, $fa, $03, $0a, $15, $24, $30, $34, $36, $3c, $40, $43, $39, $2b
0ee26     24 1E 18 18 
0ee2a     19 1C 1F 20 
0ee2e     24 2A 2E 30 
0ee32     2D 2E 2C 27 | 	byte	$24, $1e, $18, $18, $19, $1c, $1f, $20, $24, $2a, $2e, $30, $2d, $2e, $2c, $27
0ee36     1C 0E 04 00 
0ee3a     FD F7 EE E5 
0ee3e     DF DA D9 D9 
0ee42     D6 D0 D2 DC | 	byte	$1c, $0e, $04, $00, $fd, $f7, $ee, $e5, $df, $da, $d9, $d9, $d6, $d0, $d2, $dc
0ee46     E1 E0 E1 E2 
0ee4a     E6 E6 E0 D8 
0ee4e     D3 D0 CC C4 
0ee52     BC BC C6 CF | 	byte	$e1, $e0, $e1, $e2, $e6, $e6, $e0, $d8, $d3, $d0, $cc, $c4, $bc, $bc, $c6, $cf
0ee56     D9 E2 E6 E7 
0ee5a     EB F6 FF 01 
0ee5e     06 0D 16 19 
0ee62     15 0F 0F 14 | 	byte	$d9, $e2, $e6, $e7, $eb, $f6, $ff, $01, $06, $0d, $16, $19, $15, $0f, $0f, $14
0ee66     18 19 1B 22 
0ee6a     2E 38 43 44 
0ee6e     44 44 3D 30 
0ee72     24 1C 21 26 | 	byte	$18, $19, $1b, $22, $2e, $38, $43, $44, $44, $44, $3d, $30, $24, $1c, $21, $26
0ee76     26 22 1C 1B 
0ee7a     1E 22 26 1F 
0ee7e     1E 24 27 25 
0ee82     26 21 1C 15 | 	byte	$26, $22, $1c, $1b, $1e, $22, $26, $1f, $1e, $24, $27, $25, $26, $21, $1c, $15
0ee86     0C 00 F4 F0 
0ee8a     F0 F1 FA FF 
0ee8e     07 0A 10 16 
0ee92     18 13 04 FC | 	byte	$0c, $00, $f4, $f0, $f0, $f1, $fa, $ff, $07, $0a, $10, $16, $18, $13, $04, $fc
0ee96     FC FD FC F7 
0ee9a     F2 F0 EA E5 
0ee9e     E6 EA F2 FA 
0eea2     03 0A 15 22 | 	byte	$fc, $fd, $fc, $f7, $f2, $f0, $ea, $e5, $e6, $ea, $f2, $fa, $03, $0a, $15, $22
0eea6     2B 33 37 34 
0eeaa     2D 22 1C 1C 
0eeae     18 14 12 15 
0eeb2     1A 1F 20 24 | 	byte	$2b, $33, $37, $34, $2d, $22, $1c, $1c, $18, $14, $12, $15, $1a, $1f, $20, $24
0eeb6     27 30 34 36 
0eeba     34 27 1C 18 
0eebe     13 0F 04 FA 
0eec2     F6 F3 EE E7 | 	byte	$27, $30, $34, $36, $34, $27, $1c, $18, $13, $0f, $04, $fa, $f6, $f3, $ee, $e7
0eec6     E0 DE E0 E1 
0eeca     E0 DF E7 EE 
0eece     F4 F2 F0 EE 
0eed2     ED EC E8 DF | 	byte	$e0, $de, $e0, $e1, $e0, $df, $e7, $ee, $f4, $f2, $f0, $ee, $ed, $ec, $e8, $df
0eed6     D3 C8 C6 CC 
0eeda     D2 D6 D9 E0 
0eede     EC F1 F3 F7 
0eee2     FD 04 0D 12 | 	byte	$d3, $c8, $c6, $cc, $d2, $d6, $d9, $e0, $ec, $f1, $f3, $f7, $fd, $04, $0d, $12
0eee6     13 13 15 19 
0eeea     18 14 13 18 
0eeee     1B 20 2A 33 
0eef2     40 46 4A 43 | 	byte	$13, $13, $15, $19, $18, $14, $13, $18, $1b, $20, $2a, $33, $40, $46, $4a, $43
0eef6     32 2B 28 28 
0eefa     26 20 19 19 
0eefe     1B 1A 19 1A 
0ef02     1B 19 1B 1F | 	byte	$32, $2b, $28, $28, $26, $20, $19, $19, $1b, $1a, $19, $1a, $1b, $19, $1b, $1f
0ef06     21 21 22 21 
0ef0a     1C 15 09 00 
0ef0e     F3 F2 F2 F1 
0ef12     F1 F7 FF 0A | 	byte	$21, $21, $22, $21, $1c, $15, $09, $00, $f3, $f2, $f2, $f1, $f1, $f7, $ff, $0a
0ef16     10 13 10 0E 
0ef1a     09 04 00 00 
0ef1e     FE F9 F2 E8 
0ef22     E7 E7 E8 EB | 	byte	$10, $13, $10, $0e, $09, $04, $00, $00, $fe, $f9, $f2, $e8, $e7, $e7, $e8, $eb
0ef26     F2 F6 FD 02 
0ef2a     10 20 2C 30 
0ef2e     32 31 2D 26 
0ef32     20 19 13 0F | 	byte	$f2, $f6, $fd, $02, $10, $20, $2c, $30, $32, $31, $2d, $26, $20, $19, $13, $0f
0ef36     0E 10 14 13 
0ef3a     14 1B 27 2E 
0ef3e     30 2B 26 22 
0ef42     20 18 09 04 | 	byte	$0e, $10, $14, $13, $14, $1b, $27, $2e, $30, $2b, $26, $22, $20, $18, $09, $04
0ef46     FE F9 F1 E7 
0ef4a     E4 E1 DF DA 
0ef4e     D3 D0 D2 D8 
0ef52     DC DF E0 E0 | 	byte	$fe, $f9, $f1, $e7, $e4, $e1, $df, $da, $d3, $d0, $d2, $d8, $dc, $df, $e0, $e0
0ef56     E5 EC EE E8 
0ef5a     DC D3 CC C7 
0ef5e     C3 C3 C8 CF 
0ef62     D8 DE E2 E7 | 	byte	$e5, $ec, $ee, $e8, $dc, $d3, $cc, $c7, $c3, $c3, $c8, $cf, $d8, $de, $e2, $e7
0ef66     F1 FA FF 04 
0ef6a     09 10 16 1A 
0ef6e     1B 1C 1E 1E 
0ef72     1C 1C 1C 25 | 	byte	$f1, $fa, $ff, $04, $09, $10, $16, $1a, $1b, $1c, $1e, $1e, $1c, $1c, $1c, $25
0ef76     33 43 4F 4F 
0ef7a     4C 49 48 45 
0ef7e     3D 37 31 2B 
0ef82     2A 2B 2B 26 | 	byte	$33, $43, $4f, $4f, $4c, $49, $48, $45, $3d, $37, $31, $2b, $2a, $2b, $2b, $26
0ef86     25 27 27 28 
0ef8a     27 28 2D 32 
0ef8e     31 2C 26 1A 
0ef92     13 0A 00 F7 | 	byte	$25, $27, $27, $28, $27, $28, $2d, $32, $31, $2c, $26, $1a, $13, $0a, $00, $f7
0ef96     F2 F2 F4 F7 
0ef9a     FF 08 0F 10 
0ef9e     0C 09 09 04 
0efa2     04 02 FD F4 | 	byte	$f2, $f2, $f4, $f7, $ff, $08, $0f, $10, $0c, $09, $09, $04, $04, $02, $fd, $f4
0efa6     ED E5 E4 E5 
0efaa     E6 E6 E6 EA 
0efae     F3 FC 08 16 
0efb2     20 28 2C 30 | 	byte	$ed, $e5, $e4, $e5, $e6, $e6, $e6, $ea, $f3, $fc, $08, $16, $20, $28, $2c, $30
0efb6     2E 28 1F 18 
0efba     16 18 13 0C 
0efbe     0A 0F 18 21 
0efc2     26 28 2C 2E | 	byte	$2e, $28, $1f, $18, $16, $18, $13, $0c, $0a, $0f, $18, $21, $26, $28, $2c, $2e
0efc6     2D 2B 21 1E 
0efca     16 0E 04 FA 
0efce     F3 EE EC E8 
0efd2     DF D8 D9 DA | 	byte	$2d, $2b, $21, $1e, $16, $0e, $04, $fa, $f3, $ee, $ec, $e8, $df, $d8, $d9, $da
0efd6     D9 D8 D5 D8 
0efda     DE E2 EA EB 
0efde     EA EA E4 D5 
0efe2     CC C3 C0 C1 | 	byte	$d9, $d8, $d5, $d8, $de, $e2, $ea, $eb, $ea, $ea, $e4, $d5, $cc, $c3, $c0, $c1
0efe6     C6 C9 CE D4 
0efea     DB E5 E8 ED 
0efee     F4 FC 02 06 
0eff2     0A 10 16 18 | 	byte	$c6, $c9, $ce, $d4, $db, $e5, $e8, $ed, $f4, $fc, $02, $06, $0a, $10, $16, $18
0eff6     18 13 0C 0C 
0effa     16 20 2A 34 
0effe     3C 3D 42 44 
0f002     43 3D 36 33 | 	byte	$18, $13, $0c, $0c, $16, $20, $2a, $34, $3c, $3d, $42, $44, $43, $3d, $36, $33
0f006     31 2B 26 21 
0f00a     22 25 24 21 
0f00e     1F 20 25 2B 
0f012     2D 30 31 30 | 	byte	$31, $2b, $26, $21, $22, $25, $24, $21, $1f, $20, $25, $2b, $2d, $30, $31, $30
0f016     2B 26 1C 13 
0f01a     0A 01 F9 F7 
0f01e     F9 FF 08 0F 
0f022     13 14 13 15 | 	byte	$2b, $26, $1c, $13, $0a, $01, $f9, $f7, $f9, $ff, $08, $0f, $13, $14, $13, $15
0f026     18 19 18 10 
0f02a     09 00 FC F6 
0f02e     F4 F3 F2 ED 
0f032     EE F3 FD 06 | 	byte	$18, $19, $18, $10, $09, $00, $fc, $f6, $f4, $f3, $f2, $ed, $ee, $f3, $fd, $06
0f036     0D 1A 25 32 
0f03a     36 34 32 31 
0f03e     30 2B 26 1A 
0f042     13 12 13 14 | 	byte	$0d, $1a, $25, $32, $36, $34, $32, $31, $30, $2b, $26, $1a, $13, $12, $13, $14
0f046     18 20 26 2C 
0f04a     2E 2D 2C 2C 
0f04e     2C 26 18 0C 
0f052     04 00 F9 F0 | 	byte	$18, $20, $26, $2c, $2e, $2d, $2c, $2c, $2c, $26, $18, $0c, $04, $00, $f9, $f0
0f056     E5 DF DA D6 
0f05a     D5 D0 CD CD 
0f05e     CD CE D0 D6 
0f062     DF E5 E7 E1 | 	byte	$e5, $df, $da, $d6, $d5, $d0, $cd, $cd, $cd, $ce, $d0, $d6, $df, $e5, $e7, $e1
0f066     DA CE C7 C2 
0f06a     BD BB BB C1 
0f06e     CA CE D2 D9 
0f072     E5 EC F0 F4 | 	byte	$da, $ce, $c7, $c2, $bd, $bb, $bb, $c1, $ca, $ce, $d2, $d9, $e5, $ec, $f0, $f4
0f076     F8 FD 08 12 
0f07a     18 14 13 0C 
0f07e     0C 13 1A 20 
0f082     27 2E 38 3F | 	byte	$f8, $fd, $08, $12, $18, $14, $13, $0c, $0c, $13, $1a, $20, $27, $2e, $38, $3f
0f086     43 42 40 42 
0f08a     3E 39 30 2B 
0f08e     28 27 26 1E 
0f092     1C 1C 1F 1F | 	byte	$43, $42, $40, $42, $3e, $39, $30, $2b, $28, $27, $26, $1e, $1c, $1c, $1f, $1f
0f096     21 25 2A 2D 
0f09a     2E 2C 2A 26 
0f09e     1B 15 09 FD 
0f0a2     F4 F4 F7 FA | 	byte	$21, $25, $2a, $2d, $2e, $2c, $2a, $26, $1b, $15, $09, $fd, $f4, $f4, $f7, $fa
0f0a6     FF 02 06 09 
0f0aa     0C 12 14 15 
0f0ae     13 09 01 FD 
0f0b2     FC F9 F3 ED | 	byte	$ff, $02, $06, $09, $0c, $12, $14, $15, $13, $09, $01, $fd, $fc, $f9, $f3, $ed
0f0b6     EA EC EB EB 
0f0ba     EE F8 06 12 
0f0be     1E 26 2C 31 
0f0c2     34 36 30 2B | 	byte	$ea, $ec, $eb, $eb, $ee, $f8, $06, $12, $1e, $26, $2c, $31, $34, $36, $30, $2b
0f0c6     26 21 18 14 
0f0ca     15 16 20 26 
0f0ce     2A 2C 33 3C 
0f0d2     3D 3C 34 30 | 	byte	$26, $21, $18, $14, $15, $16, $20, $26, $2a, $2c, $33, $3c, $3d, $3c, $34, $30
0f0d6     26 20 19 0E 
0f0da     04 00 F8 F0 
0f0de     EA E6 E2 E1 
0f0e2     DC D5 D2 D4 | 	byte	$26, $20, $19, $0e, $04, $00, $f8, $f0, $ea, $e6, $e2, $e1, $dc, $d5, $d2, $d4
0f0e6     D9 E5 EC EC 
0f0ea     ED EB E6 DA 
0f0ee     D0 C9 C7 C8 
0f0f2     C3 C3 C9 CE | 	byte	$d9, $e5, $ec, $ec, $ed, $eb, $e6, $da, $d0, $c9, $c7, $c8, $c3, $c3, $c9, $ce
0f0f6     D4 DE E4 E8 
0f0fa     EA EC F3 FE 
0f0fe     07 0A 0C 09 
0f102     08 09 07 07 | 	byte	$d4, $de, $e4, $e8, $ea, $ec, $f3, $fe, $07, $0a, $0c, $09, $08, $09, $07, $07
0f106     0A 14 1E 24 
0f10a     27 2E 36 39 
0f10e     3C 36 33 30 
0f112     2A 26 20 1C | 	byte	$0a, $14, $1e, $24, $27, $2e, $36, $39, $3c, $36, $33, $30, $2a, $26, $20, $1c
0f116     15 14 13 12 
0f11a     0E 10 18 1A 
0f11e     21 24 25 27 
0f122     27 26 1F 13 | 	byte	$15, $14, $13, $12, $0e, $10, $18, $1a, $21, $24, $25, $27, $27, $26, $1f, $13
0f126     07 00 F9 F7 
0f12a     FA FC FE FF 
0f12e     03 09 12 16 
0f132     19 18 14 14 | 	byte	$07, $00, $f9, $f7, $fa, $fc, $fe, $ff, $03, $09, $12, $16, $19, $18, $14, $14
0f136     0F 07 02 FD 
0f13a     FA F7 F2 ED 
0f13e     E8 EC F4 FD 
0f142     04 0F 16 24 | 	byte	$0f, $07, $02, $fd, $fa, $f7, $f2, $ed, $e8, $ec, $f4, $fd, $04, $0f, $16, $24
0f146     2B 30 33 34 
0f14a     34 30 28 1E 
0f14e     18 14 18 13 
0f152     13 16 1F 25 | 	byte	$2b, $30, $33, $34, $34, $30, $28, $1e, $18, $14, $18, $13, $13, $16, $1f, $25
0f156     2D 32 36 36 
0f15a     32 30 26 1C 
0f15e     14 0D 06 FD 
0f162     F0 ED E8 E7 | 	byte	$2d, $32, $36, $36, $32, $30, $26, $1c, $14, $0d, $06, $fd, $f0, $ed, $e8, $e7
0f166     E1 DB D6 D0 
0f16a     D0 D2 D6 DC 
0f16e     E7 EE F0 EA 
0f172     E4 DF DA D4 | 	byte	$e1, $db, $d6, $d0, $d0, $d2, $d6, $dc, $e7, $ee, $f0, $ea, $e4, $df, $da, $d4
0f176     CE C9 C3 C7 
0f17a     CD D4 DC E1 
0f17e     E5 E7 F0 F6 
0f182     FF 09 10 14 | 	byte	$ce, $c9, $c3, $c7, $cd, $d4, $dc, $e1, $e5, $e7, $f0, $f6, $ff, $09, $10, $14
0f186     1A 18 13 12 
0f18a     13 14 16 1E 
0f18e     22 2A 31 3C 
0f192     3F 43 43 40 | 	byte	$1a, $18, $13, $12, $13, $14, $16, $1e, $22, $2a, $31, $3c, $3f, $43, $43, $40
0f196     3E 39 34 31 
0f19a     2C 26 21 1C 
0f19e     18 13 14 19 
0f1a2     19 1B 1F 22 | 	byte	$3e, $39, $34, $31, $2c, $26, $21, $1c, $18, $13, $14, $19, $19, $1b, $1f, $22
0f1a6     28 2A 2B 26 
0f1aa     1C 13 06 00 
0f1ae     FC F7 F4 F3 
0f1b2     F2 F4 FA 01 | 	byte	$28, $2a, $2b, $26, $1c, $13, $06, $00, $fc, $f7, $f4, $f3, $f2, $f4, $fa, $01
0f1b6     08 0D 0F 13 
0f1ba     10 0C 07 04 
0f1be     00 FC F7 EE 
0f1c2     EA E5 E4 E4 | 	byte	$08, $0d, $0f, $13, $10, $0c, $07, $04, $00, $fc, $f7, $ee, $ea, $e5, $e4, $e4
0f1c6     E7 F0 F6 FF 
0f1ca     0A 14 1E 2A 
0f1ce     31 32 30 27 
0f1d2     24 1F 1B 16 | 	byte	$e7, $f0, $f6, $ff, $0a, $14, $1e, $2a, $31, $32, $30, $27, $24, $1f, $1b, $16
0f1d6     13 10 13 15 
0f1da     1E 22 28 31 
0f1de     36 37 32 2E 
0f1e2     2A 26 1C 14 | 	byte	$13, $10, $13, $15, $1e, $22, $28, $31, $36, $37, $32, $2e, $2a, $26, $1c, $14
0f1e6     09 03 00 F7 
0f1ea     F1 EA E4 DF 
0f1ee     DA D0 CD D0 
0f1f2     D9 E4 EA EA | 	byte	$09, $03, $00, $f7, $f1, $ea, $e4, $df, $da, $d0, $cd, $d0, $d9, $e4, $ea, $ea
0f1f6     EB E8 E8 E6 
0f1fa     DB D5 CE C7 
0f1fe     C6 C9 CF D3 
0f202     D5 DB DE E2 | 	byte	$eb, $e8, $e8, $e6, $db, $d5, $ce, $c7, $c6, $c9, $cf, $d3, $d5, $db, $de, $e2
0f206     EA F1 FA 03 
0f20a     09 0F 13 0F 
0f20e     10 12 10 10 
0f212     0F 14 20 2A | 	byte	$ea, $f1, $fa, $03, $09, $0f, $13, $0f, $10, $12, $10, $10, $0f, $14, $20, $2a
0f216     2E 33 3A 3F 
0f21a     44 43 3E 3A 
0f21e     39 37 30 28 
0f222     26 1C 1C 18 | 	byte	$2e, $33, $3a, $3f, $44, $43, $3e, $3a, $39, $37, $30, $28, $26, $1c, $1c, $18
0f226     16 19 1B 1C 
0f22a     20 28 2E 33 
0f22e     30 2A 24 1E 
0f232     18 10 07 01 | 	byte	$16, $19, $1b, $1c, $20, $28, $2e, $33, $30, $2a, $24, $1e, $18, $10, $07, $01
0f236     FE FA FA FA 
0f23a     FF 06 0E 10 
0f23e     16 16 15 13 
0f242     10 0E 09 04 | 	byte	$fe, $fa, $fa, $fa, $ff, $06, $0e, $10, $16, $16, $15, $13, $10, $0e, $09, $04
0f246     01 F8 F2 ED 
0f24a     EC EB EE F1 
0f24e     F4 FD 06 12 
0f252     20 2B 2E 30 | 	byte	$01, $f8, $f2, $ed, $ec, $eb, $ee, $f1, $f4, $fd, $06, $12, $20, $2b, $2e, $30
0f256     30 30 2B 26 
0f25a     1C 18 14 13 
0f25e     0E 0F 19 21 
0f262     28 2D 31 31 | 	byte	$30, $30, $2b, $26, $1c, $18, $14, $13, $0e, $0f, $19, $21, $28, $2d, $31, $31
0f266     32 32 2D 26 
0f26a     1C 14 0C 04 
0f26e     FD F4 F1 EE 
0f272     E4 DA CC C8 | 	byte	$32, $32, $2d, $26, $1c, $14, $0c, $04, $fd, $f4, $f1, $ee, $e4, $da, $cc, $c8
0f276     C4 CA CF D4 
0f27a     D9 DB DE E1 
0f27e     E0 DC D5 CC 
0f282     C3 C0 C0 C3 | 	byte	$c4, $ca, $cf, $d4, $d9, $db, $de, $e1, $e0, $dc, $d5, $cc, $c3, $c0, $c0, $c3
0f286     C3 C8 CA CE 
0f28a     D0 D6 E0 EC 
0f28e     F6 FD 02 07 
0f292     10 15 10 0D | 	byte	$c3, $c8, $ca, $ce, $d0, $d6, $e0, $ec, $f6, $fd, $02, $07, $10, $15, $10, $0d
0f296     10 0D 12 15 
0f29a     19 22 2E 36 
0f29e     3C 42 42 46 
0f2a2     45 40 3D 3A | 	byte	$10, $0d, $12, $15, $19, $22, $2e, $36, $3c, $42, $42, $46, $45, $40, $3d, $3a
0f2a6     34 2C 26 21 
0f2aa     20 1F 18 13 
0f2ae     16 1C 22 27 
0f2b2     2C 2B 2D 2C | 	byte	$34, $2c, $26, $21, $20, $1f, $18, $13, $16, $1c, $22, $27, $2c, $2b, $2d, $2c
0f2b6     28 21 1C 16 
0f2ba     0F 09 00 FC 
0f2be     FC FF FF 06 
0f2c2     0E 12 15 14 | 	byte	$28, $21, $1c, $16, $0f, $09, $00, $fc, $fc, $ff, $ff, $06, $0e, $12, $15, $14
0f2c6     15 15 14 13 
0f2ca     0E 07 00 FA 
0f2ce     F3 F1 F0 ED 
0f2d2     E8 E7 EC F8 | 	byte	$15, $15, $14, $13, $0e, $07, $00, $fa, $f3, $f1, $f0, $ed, $e8, $e7, $ec, $f8
0f2d6     FF 0A 14 1E 
0f2da     26 2D 2C 2C 
0f2de     2B 26 21 1C 
0f2e2     13 10 0F 12 | 	byte	$ff, $0a, $14, $1e, $26, $2d, $2c, $2c, $2b, $26, $21, $1c, $13, $10, $0f, $12
0f2e6     1B 1F 28 31 
0f2ea     33 38 3D 32 
0f2ee     32 30 28 21 
0f2f2     19 13 0E 0A | 	byte	$1b, $1f, $28, $31, $33, $38, $3d, $32, $32, $30, $28, $21, $19, $13, $0e, $0a
0f2f6     07 00 ED DF 
0f2fa     D6 D2 D4 D4 
0f2fe     D5 DB DF E2 
0f302     EA E7 E4 E0 | 	byte	$07, $00, $ed, $df, $d6, $d2, $d4, $d4, $d5, $db, $df, $e2, $ea, $e7, $e4, $e0
0f306     DA D2 C8 C4 
0f30a     C3 C9 C8 C9 
0f30e     C7 C9 CD D4 
0f312     D9 E0 E7 F3 | 	byte	$da, $d2, $c8, $c4, $c3, $c9, $c8, $c9, $c7, $c9, $cd, $d4, $d9, $e0, $e7, $f3
0f316     FA 02 06 08 
0f31a     0C 0A 07 07 
0f31e     08 08 12 16 
0f322     1E 27 2D 34 | 	byte	$fa, $02, $06, $08, $0c, $0a, $07, $07, $08, $08, $12, $16, $1e, $27, $2d, $34
0f326     36 36 37 38 
0f32a     34 2C 27 22 
0f32e     21 1C 13 0C 
0f332     08 0D 0F 12 | 	byte	$36, $36, $37, $38, $34, $2c, $27, $22, $21, $1c, $13, $0c, $08, $0d, $0f, $12
0f336     16 18 1E 26 
0f33a     21 20 21 1F 
0f33e     1A 15 0C 07 
0f342     03 FC FC FD | 	byte	$16, $18, $1e, $26, $21, $20, $21, $1f, $1a, $15, $0c, $07, $03, $fc, $fc, $fd
0f346     FF 09 10 16 
0f34a     19 1B 1F 20 
0f34e     22 1F 18 0F 
0f352     0F 08 06 00 | 	byte	$ff, $09, $10, $16, $19, $1b, $1f, $20, $22, $1f, $18, $0f, $0f, $08, $06, $00
0f356     FC F9 F7 F4 
0f35a     FA FF 07 12 
0f35e     1E 26 2D 32 
0f362     37 3A 39 31 | 	byte	$fc, $f9, $f7, $f4, $fa, $ff, $07, $12, $1e, $26, $2d, $32, $37, $3a, $39, $31
0f366     26 1E 1A 13 
0f36a     14 12 15 1E 
0f36e     26 2C 31 32 
0f372     36 36 32 2B | 	byte	$26, $1e, $1a, $13, $14, $12, $15, $1e, $26, $2c, $31, $32, $36, $36, $32, $2b
0f376     21 1C 16 15 
0f37a     13 09 00 F7 
0f37e     EB E1 D8 D0 
0f382     CD CD CD D2 | 	byte	$21, $1c, $16, $15, $13, $09, $00, $f7, $eb, $e1, $d8, $d0, $cd, $cd, $cd, $d2
0f386     D8 DB E0 E7 
0f38a     E4 DC DA CE 
0f38e     CD CA C7 C6 
0f392     C8 CA CC CC | 	byte	$d8, $db, $e0, $e7, $e4, $dc, $da, $ce, $cd, $ca, $c7, $c6, $c8, $ca, $cc, $cc
0f396     CC D4 D9 E2 
0f39a     EB F3 FE 06 
0f39e     0C 0D 0E 0D 
0f3a2     0F 0F 10 13 | 	byte	$cc, $d4, $d9, $e2, $eb, $f3, $fe, $06, $0c, $0d, $0e, $0d, $0f, $0f, $10, $13
0f3a6     18 22 26 2A 
0f3aa     2E 37 3C 42 
0f3ae     3F 39 3A 39 
0f3b2     34 30 26 1C | 	byte	$18, $22, $26, $2a, $2e, $37, $3c, $42, $3f, $39, $3a, $39, $34, $30, $26, $1c
0f3b6     19 13 0E 0D 
0f3ba     0E 13 14 15 
0f3be     15 15 18 1C 
0f3c2     15 13 0E 09 | 	byte	$19, $13, $0e, $0d, $0e, $13, $14, $15, $15, $15, $18, $1c, $15, $13, $0e, $09
0f3c6     03 FC F2 EA 
0f3ca     E8 EB F1 F6 
0f3ce     F8 FA 01 08 
0f3d2     0E 10 12 0E | 	byte	$03, $fc, $f2, $ea, $e8, $eb, $f1, $f6, $f8, $fa, $01, $08, $0e, $10, $12, $0e
0f3d6     0E 0A 07 06 
0f3da     00 F7 F4 F3 
0f3de     F0 F0 F6 FF 
0f3e2     07 0D 16 1E | 	byte	$0e, $0a, $07, $06, $00, $f7, $f4, $f3, $f0, $f0, $f6, $ff, $07, $0d, $16, $1e
0f3e6     25 33 39 3E 
0f3ea     3E 39 34 2E 
0f3ee     26 1A 19 19 
0f3f2     1F 21 2A 2D | 	byte	$25, $33, $39, $3e, $3e, $39, $34, $2e, $26, $1a, $19, $19, $1f, $21, $2a, $2d
0f3f6     37 3D 40 3E 
0f3fa     36 31 2C 27 
0f3fe     24 1F 1A 15 
0f402     09 01 F3 E8 | 	byte	$37, $3d, $40, $3e, $36, $31, $2c, $27, $24, $1f, $1a, $15, $09, $01, $f3, $e8
0f406     E2 DC D5 D2 
0f40a     D0 D4 DE E2 
0f40e     E4 E7 E7 E1 
0f412     DE DA D3 D0 | 	byte	$e2, $dc, $d5, $d2, $d0, $d4, $de, $e2, $e4, $e7, $e7, $e1, $de, $da, $d3, $d0
0f416     CE CC CC C8 
0f41a     C9 CA CF CF 
0f41e     D6 DE E7 EC 
0f422     F6 FD 03 0C | 	byte	$ce, $cc, $cc, $c8, $c9, $ca, $cf, $cf, $d6, $de, $e7, $ec, $f6, $fd, $03, $0c
0f426     0D 0C 08 09 
0f42a     0D 10 13 15 
0f42e     1A 24 2D 32 
0f432     37 39 3D 3D | 	byte	$0d, $0c, $08, $09, $0d, $10, $13, $15, $1a, $24, $2d, $32, $37, $39, $3d, $3d
0f436     3C 39 36 32 
0f43a     28 20 18 13 
0f43e     13 10 13 12 
0f442     12 15 18 1A | 	byte	$3c, $39, $36, $32, $28, $20, $18, $13, $13, $10, $13, $12, $12, $15, $18, $1a
0f446     18 1B 16 18 
0f44a     13 10 09 00 
0f44e     F9 F3 F2 F1 
0f452     F2 F3 F6 FD | 	byte	$18, $1b, $16, $18, $13, $10, $09, $00, $f9, $f3, $f2, $f1, $f2, $f3, $f6, $fd
0f456     03 0A 12 13 
0f45a     15 15 13 0E 
0f45e     0C 09 04 FC 
0f462     F7 F3 EE F3 | 	byte	$03, $0a, $12, $13, $15, $15, $13, $0e, $0c, $09, $04, $fc, $f7, $f3, $ee, $f3
0f466     F4 F6 FD 03 
0f46a     0A 16 20 2A 
0f46e     33 3A 3C 3C 
0f472     34 2B 26 1E | 	byte	$f4, $f6, $fd, $03, $0a, $16, $20, $2a, $33, $3a, $3c, $3c, $34, $2b, $26, $1e
0f476     18 13 13 1A 
0f47a     1F 2A 33 39 
0f47e     3A 3A 36 33 
0f482     2C 26 26 21 | 	byte	$18, $13, $13, $1a, $1f, $2a, $33, $39, $3a, $3a, $36, $33, $2c, $26, $26, $21
0f486     1C 18 0C 02 
0f48a     00 F0 E4 D5 
0f48e     D2 CC CC D0 
0f492     D8 DB E2 E5 | 	byte	$1c, $18, $0c, $02, $00, $f0, $e4, $d5, $d2, $cc, $cc, $d0, $d8, $db, $e2, $e5
0f496     E1 E4 DC DB 
0f49a     DA D3 CD CE 
0f49e     CC CC C8 C9 
0f4a2     CE CF D5 D9 | 	byte	$e1, $e4, $dc, $db, $da, $d3, $cd, $ce, $cc, $cc, $c8, $c9, $ce, $cf, $d5, $d9
0f4a6     E6 EC F9 FF 
0f4aa     07 09 08 0E 
0f4ae     0F 0E 10 13 
0f4b2     10 1A 1E 26 | 	byte	$e6, $ec, $f9, $ff, $07, $09, $08, $0e, $0f, $0e, $10, $13, $10, $1a, $1e, $26
0f4b6     2E 32 36 3D 
0f4ba     3F 3F 42 40 
0f4be     3E 36 2B 26 
0f4c2     1C 19 1A 15 | 	byte	$2e, $32, $36, $3d, $3f, $3f, $42, $40, $3e, $36, $2b, $26, $1c, $19, $1a, $15
0f4c6     14 18 18 1A 
0f4ca     1E 1E 1F 22 
0f4ce     22 21 1A 14 
0f4d2     0E 07 04 00 | 	byte	$14, $18, $18, $1a, $1e, $1e, $1f, $22, $22, $21, $1a, $14, $0e, $07, $04, $00
0f4d6     F8 F7 F7 F4 
0f4da     F7 FC FF 07 
0f4de     0C 0D 13 13 
0f4e2     13 10 0E 07 | 	byte	$f8, $f7, $f7, $f4, $f7, $fc, $ff, $07, $0c, $0d, $13, $13, $13, $10, $0e, $07
0f4e6     00 F9 F3 EE 
0f4ea     ED EC F0 F0 
0f4ee     F4 F9 FF 07 
0f4f2     12 20 2A 31 | 	byte	$00, $f9, $f3, $ee, $ed, $ec, $f0, $f0, $f4, $f9, $ff, $07, $12, $20, $2a, $31
0f4f6     36 32 30 2C 
0f4fa     26 1C 13 0F 
0f4fe     0F 16 1C 25 
0f502     2D 36 3C 37 | 	byte	$36, $32, $30, $2c, $26, $1c, $13, $0f, $0f, $16, $1c, $25, $2d, $36, $3c, $37
0f506     38 34 33 31 
0f50a     2B 27 21 1C 
0f50e     18 0E 01 F9 
0f512     F0 E2 DB D4 | 	byte	$38, $34, $33, $31, $2b, $27, $21, $1c, $18, $0e, $01, $f9, $f0, $e2, $db, $d4
0f516     D2 D8 DA DA 
0f51a     E0 E1 E5 E2 
0f51e     E0 DC DA D4 
0f522     D0 C7 C6 C6 | 	byte	$d2, $d8, $da, $da, $e0, $e1, $e5, $e2, $e0, $dc, $da, $d4, $d0, $c7, $c6, $c6
0f526     C4 C8 CA CF 
0f52a     D3 D8 DE E6 
0f52e     EC F6 FE FE 
0f532     FF 0A 0D 09 | 	byte	$c4, $c8, $ca, $cf, $d3, $d8, $de, $e6, $ec, $f6, $fe, $fe, $ff, $0a, $0d, $09
0f536     0D 0C 0F 16 
0f53a     16 1B 25 2B 
0f53e     2E 36 3C 40 
0f542     42 45 3D 32 | 	byte	$0d, $0c, $0f, $16, $16, $1b, $25, $2b, $2e, $36, $3c, $40, $42, $45, $3d, $32
0f546     2D 26 1E 18 
0f54a     0F 0C 0C 0F 
0f54e     0E 0E 14 18 
0f552     1B 1E 1B 1C | 	byte	$2d, $26, $1e, $18, $0f, $0c, $0c, $0f, $0e, $0e, $14, $18, $1b, $1e, $1b, $1c
0f556     18 13 0F 0E 
0f55a     09 07 01 F9 
0f55e     F7 F8 FA FF 
0f562     07 09 0F 18 | 	byte	$18, $13, $0f, $0e, $09, $07, $01, $f9, $f7, $f8, $fa, $ff, $07, $09, $0f, $18
0f566     1B 21 26 20 
0f56a     1E 14 13 09 
0f56e     02 00 FE FA 
0f572     FD FC FD FF | 	byte	$1b, $21, $26, $20, $1e, $14, $13, $09, $02, $00, $fe, $fa, $fd, $fc, $fd, $ff
0f576     03 0F 1B 24 
0f57a     2E 36 36 40 
0f57e     39 32 2B 21 
0f582     15 0F 0A 0D | 	byte	$03, $0f, $1b, $24, $2e, $36, $36, $40, $39, $32, $2b, $21, $15, $0f, $0a, $0d
0f586     15 20 28 2E 
0f58a     34 39 37 36 
0f58e     31 27 26 27 
0f592     1E 1B 1A 13 | 	byte	$15, $20, $28, $2e, $34, $39, $37, $36, $31, $27, $26, $27, $1e, $1b, $1a, $13
0f596     06 F9 ED E1 
0f59a     DA CF CF C8 
0f59e     CF D6 DB DC 
0f5a2     DE DE DF DA | 	byte	$06, $f9, $ed, $e1, $da, $cf, $cf, $c8, $cf, $d6, $db, $dc, $de, $de, $df, $da
0f5a6     D2 CE CA C7 
0f5aa     C1 C0 C1 C2 
0f5ae     C3 CA CC D8 
0f5b2     DE E5 EC F1 | 	byte	$d2, $ce, $ca, $c7, $c1, $c0, $c1, $c2, $c3, $ca, $cc, $d8, $de, $e5, $ec, $f1
0f5b6     FA 08 09 09 
0f5ba     0F 14 14 19 
0f5be     16 19 24 28 
0f5c2     2C 2D 34 3F | 	byte	$fa, $08, $09, $09, $0f, $14, $14, $19, $16, $19, $24, $28, $2c, $2d, $34, $3f
0f5c6     49 4F 4C 48 
0f5ca     4C 45 39 32 
0f5ce     2B 1F 1C 13 
0f5d2     0A 0D 0A 0C | 	byte	$49, $4f, $4c, $48, $4c, $45, $39, $32, $2b, $1f, $1c, $13, $0a, $0d, $0a, $0c
0f5d6     10 13 14 16 
0f5da     14 10 0C 0A 
0f5de     09 04 00 F9 
0f5e2     F3 F1 ED EB | 	byte	$10, $13, $14, $16, $14, $10, $0c, $0a, $09, $04, $00, $f9, $f3, $f1, $ed, $eb
0f5e6     E8 E8 F1 F9 
0f5ea     FC 07 12 15 
0f5ee     18 19 13 0C 
0f5f2     09 02 FC FD | 	byte	$e8, $e8, $f1, $f9, $fc, $07, $12, $15, $18, $19, $13, $0c, $09, $02, $fc, $fd
0f5f6     FD F9 F9 F9 
0f5fa     F7 FA 03 09 
0f5fe     12 1B 27 31 
0f602     38 3E 3F 3D | 	byte	$fd, $f9, $f9, $f9, $f7, $fa, $03, $09, $12, $1b, $27, $31, $38, $3e, $3f, $3d
0f606     34 2B 1F 1A 
0f60a     19 19 1C 22 
0f60e     2A 2E 38 3F 
0f612     3E 3E 3A 37 | 	byte	$34, $2b, $1f, $1a, $19, $19, $1c, $22, $2a, $2e, $38, $3f, $3e, $3e, $3a, $37
0f616     31 2E 2B 28 
0f61a     26 18 0D 04 
0f61e     F9 ED E2 DA 
0f622     D3 D0 D2 D5 | 	byte	$31, $2e, $2b, $28, $26, $18, $0d, $04, $f9, $ed, $e2, $da, $d3, $d0, $d2, $d5
0f626     DC DE DF E1 
0f62a     DC D9 D8 D0 
0f62e     C8 C8 C2 BB 
0f632     B6 B7 BA C1 | 	byte	$dc, $de, $df, $e1, $dc, $d9, $d8, $d0, $c8, $c8, $c2, $bb, $b6, $b7, $ba, $c1
0f636     C4 C6 CE D9 
0f63a     E2 EB F1 F8 
0f63e     FD 06 04 FF 
0f642     06 0D 12 15 | 	byte	$c4, $c6, $ce, $d9, $e2, $eb, $f1, $f8, $fd, $06, $04, $ff, $06, $0d, $12, $15
0f646     13 15 1E 24 
0f64a     2C 32 38 42 
0f64e     49 4C 4C 48 
0f652     44 3E 36 2B | 	byte	$13, $15, $1e, $24, $2c, $32, $38, $42, $49, $4c, $4c, $48, $44, $3e, $36, $2b
0f656     21 1E 19 14 
0f65a     16 1B 1A 1F 
0f65e     21 1C 1B 1E 
0f662     1A 18 13 0E | 	byte	$21, $1e, $19, $14, $16, $1b, $1a, $1f, $21, $1c, $1b, $1e, $1a, $18, $13, $0e
0f666     0C 07 00 F8 
0f66a     F4 F2 F1 ED 
0f66e     F0 F6 F9 FF 
0f672     09 0F 18 1A | 	byte	$0c, $07, $00, $f8, $f4, $f2, $f1, $ed, $f0, $f6, $f9, $ff, $09, $0f, $18, $1a
0f676     15 0E 09 04 
0f67a     00 FC F9 F7 
0f67e     F2 F7 F6 F8 
0f682     FF 07 0E 15 | 	byte	$15, $0e, $09, $04, $00, $fc, $f9, $f7, $f2, $f7, $f6, $f8, $ff, $07, $0e, $15
0f686     1E 2A 37 3D 
0f68a     3D 39 31 2D 
0f68e     26 19 19 16 
0f692     19 1A 1F 27 | 	byte	$1e, $2a, $37, $3d, $3d, $39, $31, $2d, $26, $19, $19, $16, $19, $1a, $1f, $27
0f696     2E 33 37 2E 
0f69a     30 34 32 31 
0f69e     31 26 21 1C 
0f6a2     0E 04 FD F0 | 	byte	$2e, $33, $37, $2e, $30, $34, $32, $31, $31, $26, $21, $1c, $0e, $04, $fd, $f0
0f6a6     E2 DB D4 D3 
0f6aa     D4 D8 D8 DE 
0f6ae     E2 E1 E0 E1 
0f6b2     E1 DE DA D0 | 	byte	$e2, $db, $d4, $d3, $d4, $d8, $d8, $de, $e2, $e1, $e0, $e1, $e1, $de, $da, $d0
0f6b6     C6 C4 C2 C1 
0f6ba     C0 BE C3 C9 
0f6be     CF D5 D9 E7 
0f6c2     F6 FA FA FE | 	byte	$c6, $c4, $c2, $c1, $c0, $be, $c3, $c9, $cf, $d5, $d9, $e7, $f6, $fa, $fa, $fe
0f6c6     03 09 08 0D 
0f6ca     0E 0F 15 18 
0f6ce     1A 21 28 2C 
0f6d2     33 3F 44 49 | 	byte	$03, $09, $08, $0d, $0e, $0f, $15, $18, $1a, $21, $28, $2c, $33, $3f, $44, $49
0f6d6     46 48 45 3F 
0f6da     3A 32 26 1A 
0f6de     15 10 14 16 
0f6e2     13 18 19 19 | 	byte	$46, $48, $45, $3f, $3a, $32, $26, $1a, $15, $10, $14, $16, $13, $18, $19, $19
0f6e6     1A 18 18 13 
0f6ea     0D 09 03 00 
0f6ee     00 FA F2 EE 
0f6f2     EB E7 EA EB | 	byte	$1a, $18, $18, $13, $0d, $09, $03, $00, $00, $fa, $f2, $ee, $eb, $e7, $ea, $eb
0f6f6     F1 FC 03 0E 
0f6fa     0D 12 14 13 
0f6fe     0C 0A 06 04 
0f702     00 F9 F4 F4 | 	byte	$f1, $fc, $03, $0e, $0d, $12, $14, $13, $0c, $0a, $06, $04, $00, $f9, $f4, $f4
0f706     F8 F8 F9 FF 
0f70a     08 12 20 27 
0f70e     2E 3A 3E 39 
0f712     32 30 2A 26 | 	byte	$f8, $f8, $f9, $ff, $08, $12, $20, $27, $2e, $3a, $3e, $39, $32, $30, $2a, $26
0f716     20 1A 18 1A 
0f71a     24 28 2E 33 
0f71e     36 39 3A 39 
0f722     38 3C 37 30 | 	byte	$20, $1a, $18, $1a, $24, $28, $2e, $33, $36, $39, $3a, $39, $38, $3c, $37, $30
0f726     2C 28 1F 13 
0f72a     04 F7 EA E2 
0f72e     DA D4 D3 D5 
0f732     D8 D8 D5 D9 | 	byte	$2c, $28, $1f, $13, $04, $f7, $ea, $e2, $da, $d4, $d3, $d5, $d8, $d8, $d5, $d9
0f736     DE DE DF D5 
0f73a     CE CE C9 BD 
0f73e     BA B7 B7 B7 
0f742     B8 BA C1 CA | 	byte	$de, $de, $df, $d5, $ce, $ce, $c9, $bd, $ba, $b7, $b7, $b7, $b8, $ba, $c1, $ca
0f746     D6 DE E6 EE 
0f74a     F2 F8 FF 01 
0f74e     04 0A 0D 0E 
0f752     14 14 18 1B | 	byte	$d6, $de, $e6, $ee, $f2, $f8, $ff, $01, $04, $0a, $0d, $0e, $14, $14, $18, $1b
0f756     21 2A 33 3D 
0f75a     42 46 49 4C 
0f75e     4C 4A 40 34 
0f762     2D 26 1C 19 | 	byte	$21, $2a, $33, $3d, $42, $46, $49, $4c, $4c, $4a, $40, $34, $2d, $26, $1c, $19
0f766     19 1A 1A 1A 
0f76a     1B 1C 21 1F 
0f76e     1C 15 13 12 
0f772     0F 0A 09 04 | 	byte	$19, $1a, $1a, $1a, $1b, $1c, $21, $1f, $1c, $15, $13, $12, $0f, $0a, $09, $04
0f776     01 F8 F4 EE 
0f77a     EE F2 F4 FA 
0f77e     03 0E 10 14 
0f782     18 15 13 0F | 	byte	$01, $f8, $f4, $ee, $ee, $f2, $f4, $fa, $03, $0e, $10, $14, $18, $15, $13, $0f
0f786     09 00 FD F9 
0f78a     F3 F1 F2 F0 
0f78e     F1 F8 FA 03 
0f792     12 20 28 30 | 	byte	$09, $00, $fd, $f9, $f3, $f1, $f2, $f0, $f1, $f8, $fa, $03, $12, $20, $28, $30
0f796     33 34 34 30 
0f79a     27 21 1B 19 
0f79e     18 16 1B 21 
0f7a2     25 2A 2E 34 | 	byte	$33, $34, $34, $30, $27, $21, $1b, $19, $18, $16, $1b, $21, $25, $2a, $2e, $34
0f7a6     38 3A 39 37 
0f7aa     38 37 30 2A 
0f7ae     26 1C 10 01 
0f7b2     F0 E6 E2 DC | 	byte	$38, $3a, $39, $37, $38, $37, $30, $2a, $26, $1c, $10, $01, $f0, $e6, $e2, $dc
0f7b6     D6 D3 D2 D5 
0f7ba     D9 DE DE DF 
0f7be     E1 DC D6 D2 
0f7c2     CD C8 C7 C0 | 	byte	$d6, $d3, $d2, $d5, $d9, $de, $de, $df, $e1, $dc, $d6, $d2, $cd, $c8, $c7, $c0
0f7c6     BB BA BA BE 
0f7ca     C3 C9 D4 DE 
0f7ce     E6 F1 F6 FA 
0f7d2     FF 04 07 0A | 	byte	$bb, $ba, $ba, $be, $c3, $c9, $d4, $de, $e6, $f1, $f6, $fa, $ff, $04, $07, $0a
0f7d6     0E 13 13 15 
0f7da     18 1C 21 2A 
0f7de     2B 31 3C 42 
0f7e2     4A 4C 4E 4C | 	byte	$0e, $13, $13, $15, $18, $1c, $21, $2a, $2b, $31, $3c, $42, $4a, $4c, $4e, $4c
0f7e6     44 39 30 27 
0f7ea     22 1F 19 14 
0f7ee     15 15 19 1A 
0f7f2     18 19 15 0F | 	byte	$44, $39, $30, $27, $22, $1f, $19, $14, $15, $15, $19, $1a, $18, $19, $15, $0f
0f7f6     0C 0D 0C 0A 
0f7fa     07 00 F9 F3 
0f7fe     F2 EB E6 EB 
0f802     F0 F3 FA FF | 	byte	$0c, $0d, $0c, $0a, $07, $00, $f9, $f3, $f2, $eb, $e6, $eb, $f0, $f3, $fa, $ff
0f806     08 12 14 14 
0f80a     15 13 0F 0A 
0f80e     04 00 FD FA 
0f812     F9 F4 F3 F8 | 	byte	$08, $12, $14, $14, $15, $13, $0f, $0a, $04, $00, $fd, $fa, $f9, $f4, $f3, $f8
0f816     FF 0A 14 1F 
0f81a     2A 33 38 3C 
0f81e     39 36 34 2B 
0f822     22 22 1E 1C | 	byte	$ff, $0a, $14, $1f, $2a, $33, $38, $3c, $39, $36, $34, $2b, $22, $22, $1e, $1c
0f826     1C 20 26 2A 
0f82a     2D 31 33 37 
0f82e     3A 36 39 36 
0f832     38 39 30 26 | 	byte	$1c, $20, $26, $2a, $2d, $31, $33, $37, $3a, $36, $39, $36, $38, $39, $30, $26
0f836     13 04 F9 ED 
0f83a     E0 DC DA D0 
0f83e     D2 D4 D4 DC 
0f842     DE DF DF DA | 	byte	$13, $04, $f9, $ed, $e0, $dc, $da, $d0, $d2, $d4, $d4, $dc, $de, $df, $df, $da
0f846     D8 D9 D3 CC 
0f84a     C7 C0 BD B8 
0f84e     B6 B8 BE C1 
0f852     CE D4 DB E7 | 	byte	$d8, $d9, $d3, $cc, $c7, $c0, $bd, $b8, $b6, $b8, $be, $c1, $ce, $d4, $db, $e7
0f856     F1 F8 FA FF 
0f85a     07 07 0A 0D 
0f85e     10 16 1A 1B 
0f862     22 28 27 2E | 	byte	$f1, $f8, $fa, $ff, $07, $07, $0a, $0d, $10, $16, $1a, $1b, $22, $28, $27, $2e
0f866     36 3D 45 4B 
0f86a     4C 49 45 3D 
0f86e     36 30 26 21 
0f872     1A 19 16 18 | 	byte	$36, $3d, $45, $4b, $4c, $49, $45, $3d, $36, $30, $26, $21, $1a, $19, $16, $18
0f876     1A 18 18 13 
0f87a     10 0F 0F 0C 
0f87e     0D 0A 07 03 
0f882     00 F7 F1 ED | 	byte	$1a, $18, $18, $13, $10, $0f, $0f, $0c, $0d, $0a, $07, $03, $00, $f7, $f1, $ed
0f886     EC EC EC F3 
0f88a     FA FF 09 0C 
0f88e     14 1A 19 18 
0f892     15 0E 0E 0C | 	byte	$ec, $ec, $ec, $f3, $fa, $ff, $09, $0c, $14, $1a, $19, $18, $15, $0e, $0e, $0c
0f896     02 FE FA F8 
0f89a     F8 F9 FF 07 
0f89e     0F 1A 20 2C 
0f8a2     33 38 37 36 | 	byte	$02, $fe, $fa, $f8, $f8, $f9, $ff, $07, $0f, $1a, $20, $2c, $33, $38, $37, $36
0f8a6     31 2B 26 1E 
0f8aa     1A 18 19 1A 
0f8ae     1B 1F 27 2B 
0f8b2     2B 2C 2D 31 | 	byte	$31, $2b, $26, $1e, $1a, $18, $19, $1a, $1b, $1f, $27, $2b, $2b, $2c, $2d, $31
0f8b6     36 34 34 33 
0f8ba     2B 26 15 07 
0f8be     FC F2 E8 E0 
0f8c2     D4 CF CF D4 | 	byte	$36, $34, $34, $33, $2b, $26, $15, $07, $fc, $f2, $e8, $e0, $d4, $cf, $cf, $d4
0f8c6     D8 D9 DB E0 
0f8ca     DE DC DE DA 
0f8ce     D8 D4 CE C7 
0f8d2     C2 BE BE BE | 	byte	$d8, $d9, $db, $e0, $de, $dc, $de, $da, $d8, $d4, $ce, $c7, $c2, $be, $be, $be
0f8d6     BE C3 CE D5 
0f8da     DE E6 F0 F8 
0f8de     FD 01 07 0C 
0f8e2     0E 10 14 19 | 	byte	$be, $c3, $ce, $d5, $de, $e6, $f0, $f8, $fd, $01, $07, $0c, $0e, $10, $14, $19
0f8e6     1B 20 20 22 
0f8ea     27 2D 37 3E 
0f8ee     46 4A 4E 4E 
0f8f2     49 40 39 34 | 	byte	$1b, $20, $20, $22, $27, $2d, $37, $3e, $46, $4a, $4e, $4e, $49, $40, $39, $34
0f8f6     2B 26 1C 19 
0f8fa     1A 1A 18 13 
0f8fe     13 10 0E 0C 
0f902     0A 0A 0A 09 | 	byte	$2b, $26, $1c, $19, $1a, $1a, $18, $13, $13, $10, $0e, $0c, $0a, $0a, $0a, $09
0f906     04 00 FA F7 
0f90a     F0 E8 E4 E4 
0f90e     E6 EA EC F6 
0f912     FF 06 0C 10 | 	byte	$04, $00, $fa, $f7, $f0, $e8, $e4, $e4, $e6, $ea, $ec, $f6, $ff, $06, $0c, $10
0f916     10 12 13 0E 
0f91a     0C 07 02 01 
0f91e     FC FA F9 F8 
0f922     FA FF 0D 16 | 	byte	$10, $12, $13, $0e, $0c, $07, $02, $01, $fc, $fa, $f9, $f8, $fa, $ff, $0d, $16
0f926     1B 25 2E 33 
0f92a     3A 39 33 31 
0f92e     2D 27 21 1A 
0f932     1A 1E 21 24 | 	byte	$1b, $25, $2e, $33, $3a, $39, $33, $31, $2d, $27, $21, $1a, $1a, $1e, $21, $24
0f936     25 2A 2D 30 
0f93a     34 36 37 3D 
0f93e     3F 39 32 28 
0f942     21 18 0C 00 | 	byte	$25, $2a, $2d, $30, $34, $36, $37, $3d, $3f, $39, $32, $28, $21, $18, $0c, $00
0f946     F0 E6 DE D5 
0f94a     D4 D3 D3 D9 
0f94e     D9 D9 D9 DB 
0f952     DC DA D5 D0 | 	byte	$f0, $e6, $de, $d5, $d4, $d3, $d3, $d9, $d9, $d9, $d9, $db, $dc, $da, $d5, $d0
0f956     CA C4 BD B8 
0f95a     B6 B6 B6 BB 
0f95e     C1 CC D4 DB 
0f962     E1 EB F2 FA | 	byte	$ca, $c4, $bd, $b8, $b6, $b6, $b6, $bb, $c1, $cc, $d4, $db, $e1, $eb, $f2, $fa
0f966     FD 02 06 0C 
0f96a     10 12 15 18 
0f96e     19 1A 20 25 
0f972     2E 3A 42 49 | 	byte	$fd, $02, $06, $0c, $10, $12, $15, $18, $19, $1a, $20, $25, $2e, $3a, $42, $49
0f976     4C 4E 50 4C 
0f97a     40 36 32 2D 
0f97e     26 22 21 20 
0f982     1F 1C 18 16 | 	byte	$4c, $4e, $50, $4c, $40, $36, $32, $2d, $26, $22, $21, $20, $1f, $1c, $18, $16
0f986     18 16 15 13 
0f98a     10 0E 0E 09 
0f98e     02 FD FC F4 
0f992     F0 ED EB EE | 	byte	$18, $16, $15, $13, $10, $0e, $0e, $09, $02, $fd, $fc, $f4, $f0, $ed, $eb, $ee
0f996     F6 FA FF 0A 
0f99a     0F 15 18 1A 
0f99e     18 16 10 0C 
0f9a2     09 03 00 F9 | 	byte	$f6, $fa, $ff, $0a, $0f, $15, $18, $1a, $18, $16, $10, $0c, $09, $03, $00, $f9
0f9a6     F8 FC FF 02 
0f9aa     07 0E 19 22 
0f9ae     2A 31 33 37 
0f9b2     36 33 2B 21 | 	byte	$f8, $fc, $ff, $02, $07, $0e, $19, $22, $2a, $31, $33, $37, $36, $33, $2b, $21
0f9b6     1C 19 18 14 
0f9ba     16 1B 21 24 
0f9be     22 25 28 31 
0f9c2     36 39 34 33 | 	byte	$1c, $19, $18, $14, $16, $1b, $21, $24, $22, $25, $28, $31, $36, $39, $34, $33
0f9c6     31 2B 26 15 
0f9ca     09 01 F7 E8 
0f9ce     DF D8 D8 D6 
0f9d2     D8 D6 D9 D9 | 	byte	$31, $2b, $26, $15, $09, $01, $f7, $e8, $df, $d8, $d8, $d6, $d8, $d6, $d9, $d9
0f9d6     DE DF DF DF 
0f9da     DB D8 D3 CC 
0f9de     C4 C0 BC B7 
0f9e2     BB C0 C3 CC | 	byte	$de, $df, $df, $df, $db, $d8, $d3, $cc, $c4, $c0, $bc, $b7, $bb, $c0, $c3, $cc
0f9e6     D3 DB E2 EB 
0f9ea     F1 F6 FA FF 
0f9ee     06 09 0C 12 
0f9f2     15 13 15 1B | 	byte	$d3, $db, $e2, $eb, $f1, $f6, $fa, $ff, $06, $09, $0c, $12, $15, $13, $15, $1b
0f9f6     20 26 2A 30 
0f9fa     3A 44 46 49 
0f9fe     4C 48 40 39 
0fa02     30 28 26 24 | 	byte	$20, $26, $2a, $30, $3a, $44, $46, $49, $4c, $48, $40, $39, $30, $28, $26, $24
0fa06     1E 19 16 15 
0fa0a     14 14 10 0D 
0fa0e     0E 0C 09 07 
0fa12     04 02 00 FA | 	byte	$1e, $19, $16, $15, $14, $14, $10, $0d, $0e, $0c, $09, $07, $04, $02, $00, $fa
0fa16     F4 EE EC E8 
0fa1a     E7 EB F1 F4 
0fa1e     FA 03 0D 14 
0fa22     18 1A 19 19 | 	byte	$f4, $ee, $ec, $e8, $e7, $eb, $f1, $f4, $fa, $03, $0d, $14, $18, $1a, $19, $19
0fa26     19 15 0F 09 
0fa2a     06 03 03 01 
0fa2e     01 07 0D 16 
0fa32     1B 21 2A 33 | 	byte	$19, $15, $0f, $09, $06, $03, $03, $01, $01, $07, $0d, $16, $1b, $21, $2a, $33
0fa36     39 3C 3A 39 
0fa3a     36 2D 26 1E 
0fa3e     1B 1E 1F 1F 
0fa42     1A 1B 1F 26 | 	byte	$39, $3c, $3a, $39, $36, $2d, $26, $1e, $1b, $1e, $1f, $1f, $1a, $1b, $1f, $26
0fa46     28 2C 31 34 
0fa4a     36 36 32 2E 
0fa4e     2B 21 13 04 
0fa52     F8 ED E6 DF | 	byte	$28, $2c, $31, $34, $36, $36, $32, $2e, $2b, $21, $13, $04, $f8, $ed, $e6, $df
0fa56     DB D6 D4 D5 
0fa5a     D5 D6 D9 DB 
0fa5e     DA DB DB DA 
0fa62     D5 CE C7 BD | 	byte	$db, $d6, $d4, $d5, $d5, $d6, $d9, $db, $da, $db, $db, $da, $d5, $ce, $c7, $bd
0fa66     B8 B6 B4 B5 
0fa6a     BC C3 C9 D2 
0fa6e     D9 E2 EA EC 
0fa72     F1 F9 FF 03 | 	byte	$b8, $b6, $b4, $b5, $bc, $c3, $c9, $d2, $d9, $e2, $ea, $ec, $f1, $f9, $ff, $03
0fa76     08 0D 10 12 
0fa7a     14 18 1A 1F 
0fa7e     26 2D 38 42 
0fa82     49 4C 4F 49 | 	byte	$08, $0d, $10, $12, $14, $18, $1a, $1f, $26, $2d, $38, $42, $49, $4c, $4f, $49
0fa86     44 3E 3A 34 
0fa8a     30 26 21 1F 
0fa8e     19 18 16 18 
0fa92     18 15 12 10 | 	byte	$44, $3e, $3a, $34, $30, $26, $21, $1f, $19, $18, $16, $18, $18, $15, $12, $10
0fa96     0C 0A 08 07 
0fa9a     02 FC F4 F1 
0fa9e     ED EB E8 E5 
0faa2     E7 EC F6 FF | 	byte	$0c, $0a, $08, $07, $02, $fc, $f4, $f1, $ed, $eb, $e8, $e5, $e7, $ec, $f6, $ff
0faa6     06 0D 10 1A 
0faaa     1C 1C 16 16 
0faae     13 0E 07 02 
0fab2     FF 01 02 03 | 	byte	$06, $0d, $10, $1a, $1c, $1c, $16, $16, $13, $0e, $07, $02, $ff, $01, $02, $03
0fab6     06 0D 16 1E 
0faba     26 2D 33 39 
0fabe     3C 34 30 2A 
0fac2     28 26 26 21 | 	byte	$06, $0d, $16, $1e, $26, $2d, $33, $39, $3c, $34, $30, $2a, $28, $26, $26, $21
0fac6     1E 19 19 18 
0faca     19 1E 25 2A 
0face     30 34 37 39 
0fad2     3A 37 31 28 | 	byte	$1e, $19, $19, $18, $19, $1e, $25, $2a, $30, $34, $37, $39, $3a, $37, $31, $28
0fad6     1C 0E 04 F9 
0fada     F2 ED E6 DF 
0fade     DB DA DB D9 
0fae2     DB DF E2 E5 | 	byte	$1c, $0e, $04, $f9, $f2, $ed, $e6, $df, $db, $da, $db, $d9, $db, $df, $e2, $e5
0fae6     E4 DF DC DA 
0faea     D0 C4 BE BA 
0faee     B8 B5 BA BE 
0faf2     C6 CF D6 DE | 	byte	$e4, $df, $dc, $da, $d0, $c4, $be, $ba, $b8, $b5, $ba, $be, $c6, $cf, $d6, $de
0faf6     E5 E7 EE F3 
0fafa     F9 FF 02 06 
0fafe     08 0A 0C 10 
0fb02     13 14 16 20 | 	byte	$e5, $e7, $ee, $f3, $f9, $ff, $02, $06, $08, $0a, $0c, $10, $13, $14, $16, $20
0fb06     2C 36 3F 43 
0fb0a     44 46 43 3E 
0fb0e     39 32 28 26 
0fb12     21 1A 18 16 | 	byte	$2c, $36, $3f, $43, $44, $46, $43, $3e, $39, $32, $28, $26, $21, $1a, $18, $16
0fb16     16 18 13 0F 
0fb1a     0D 0F 0E 0E 
0fb1e     0A 06 03 FF 
0fb22     FA F7 F1 EC | 	byte	$16, $18, $13, $0f, $0d, $0f, $0e, $0e, $0a, $06, $03, $ff, $fa, $f7, $f1, $ec
0fb26     E8 EA EA EC 
0fb2a     F3 FA 03 0A 
0fb2e     10 18 1C 20 
0fb32     20 1C 1A 13 | 	byte	$e8, $ea, $ea, $ec, $f3, $fa, $03, $0a, $10, $18, $1c, $20, $20, $1c, $1a, $13
0fb36     0D 09 09 04 
0fb3a     04 07 09 0E 
0fb3e     14 1A 24 2D 
0fb42     34 39 3A 39 | 	byte	$0d, $09, $09, $04, $04, $07, $09, $0e, $14, $1a, $24, $2d, $34, $39, $3a, $39
0fb46     34 31 30 28 
0fb4a     26 24 1F 1A 
0fb4e     18 16 19 1B 
0fb52     20 22 28 2C | 	byte	$34, $31, $30, $28, $26, $24, $1f, $1a, $18, $16, $19, $1b, $20, $22, $28, $2c
0fb56     33 36 38 38 
0fb5a     32 27 21 15 
0fb5e     09 00 F4 ED 
0fb62     E7 E1 DF DA | 	byte	$33, $36, $38, $38, $32, $27, $21, $15, $09, $00, $f4, $ed, $e7, $e1, $df, $da
0fb66     D9 DB DA DE 
0fb6a     E2 E6 E7 E5 
0fb6e     E0 DF D5 CE 
0fb72     C6 C1 BD BA | 	byte	$d9, $db, $da, $de, $e2, $e6, $e7, $e5, $e0, $df, $d5, $ce, $c6, $c1, $bd, $ba
0fb76     BE C2 C8 CE 
0fb7a     D5 D9 E0 E6 
0fb7e     EE F6 FA FF 
0fb82     04 08 0C 0E | 	byte	$be, $c2, $c8, $ce, $d5, $d9, $e0, $e6, $ee, $f6, $fa, $ff, $04, $08, $0c, $0e
0fb86     0F 0F 10 15 
0fb8a     19 24 2C 32 
0fb8e     38 3F 44 44 
0fb92     44 40 40 3A | 	byte	$0f, $0f, $10, $15, $19, $24, $2c, $32, $38, $3f, $44, $44, $44, $40, $40, $3a
0fb96     32 2B 24 1F 
0fb9a     1C 19 16 15 
0fb9e     13 10 10 10 
0fba2     0D 09 09 06 | 	byte	$32, $2b, $24, $1f, $1c, $19, $16, $15, $13, $10, $10, $10, $0d, $09, $09, $06
0fba6     04 00 FC F7 
0fbaa     F0 E8 E4 E5 
0fbae     E4 E6 ED F2 
0fbb2     FA FF 08 0F | 	byte	$04, $00, $fc, $f7, $f0, $e8, $e4, $e5, $e4, $e6, $ed, $f2, $fa, $ff, $08, $0f
0fbb6     14 1A 19 18 
0fbba     19 13 0E 0C 
0fbbe     07 04 04 03 
0fbc2     03 03 0D 16 | 	byte	$14, $1a, $19, $18, $19, $13, $0e, $0c, $07, $04, $04, $03, $03, $03, $0d, $16
0fbc6     20 27 2D 31 
0fbca     34 36 32 32 
0fbce     30 30 28 26 
0fbd2     1F 1A 18 18 | 	byte	$20, $27, $2d, $31, $34, $36, $32, $32, $30, $30, $28, $26, $1f, $1a, $18, $18
0fbd6     18 19 1B 1E 
0fbda     24 2A 31 36 
0fbde     3A 3C 36 31 
0fbe2     28 1A 13 07 | 	byte	$18, $19, $1b, $1e, $24, $2a, $31, $36, $3a, $3c, $36, $31, $28, $1a, $13, $07
0fbe6     00 F4 ED E6 
0fbea     E1 DE DC DC 
0fbee     DF E0 E2 E6 
0fbf2     E7 E6 E5 E1 | 	byte	$00, $f4, $ed, $e6, $e1, $de, $dc, $dc, $df, $e0, $e2, $e6, $e7, $e6, $e5, $e1
0fbf6     DB D5 CD C7 
0fbfa     C1 BE BC C1 
0fbfe     C6 C9 D0 D6 
0fc02     DE E7 EE F3 | 	byte	$db, $d5, $cd, $c7, $c1, $be, $bc, $c1, $c6, $c9, $d0, $d6, $de, $e7, $ee, $f3
0fc06     F6 FF 06 08 
0fc0a     09 09 0A 0C 
0fc0e     10 12 16 1E 
0fc12     2A 31 36 3C | 	byte	$f6, $ff, $06, $08, $09, $09, $0a, $0c, $10, $12, $16, $1e, $2a, $31, $36, $3c
0fc16     3F 42 45 44 
0fc1a     40 3C 39 30 
0fc1e     28 26 21 1B 
0fc22     19 15 14 14 | 	byte	$3f, $42, $45, $44, $40, $3c, $39, $30, $28, $26, $21, $1b, $19, $15, $14, $14
0fc26     13 13 10 0E 
0fc2a     0D 09 09 03 
0fc2e     00 FC F3 ED 
0fc32     E8 E7 EB E8 | 	byte	$13, $13, $10, $0e, $0d, $09, $09, $03, $00, $fc, $f3, $ed, $e8, $e7, $eb, $e8
0fc36     EB F1 F7 FE 
0fc3a     06 0C 12 16 
0fc3e     1A 1B 18 15 
0fc42     10 10 0C 08 | 	byte	$eb, $f1, $f7, $fe, $06, $0c, $12, $16, $1a, $1b, $18, $15, $10, $10, $0c, $08
0fc46     03 03 03 03 
0fc4a     08 10 1B 24 
0fc4e     28 2D 32 32 
0fc52     32 33 31 30 | 	byte	$03, $03, $03, $03, $08, $10, $1b, $24, $28, $2d, $32, $32, $32, $33, $31, $30
0fc56     2B 26 21 1C 
0fc5a     18 15 14 13 
0fc5e     14 19 1E 24 
0fc62     2A 31 36 34 | 	byte	$2b, $26, $21, $1c, $18, $15, $14, $13, $14, $19, $1e, $24, $2a, $31, $36, $34
0fc66     30 2B 26 1A 
0fc6a     13 06 00 F2 
0fc6e     E8 E1 DC D8 
0fc72     D4 D3 D6 D8 | 	byte	$30, $2b, $26, $1a, $13, $06, $00, $f2, $e8, $e1, $dc, $d8, $d4, $d3, $d6, $d8
0fc76     DC E0 E1 E2 
0fc7a     E0 DE DA D3 
0fc7e     CA C3 BE BC 
0fc82     BB BC C0 C3 | 	byte	$dc, $e0, $e1, $e2, $e0, $de, $da, $d3, $ca, $c3, $be, $bc, $bb, $bc, $c0, $c3
0fc86     C9 CF D6 DA 
0fc8a     E2 EC F3 FA 
0fc8e     FF 04 08 08 
0fc92     08 0A 0C 0F | 	byte	$c9, $cf, $d6, $da, $e2, $ec, $f3, $fa, $ff, $04, $08, $08, $08, $0a, $0c, $0f
0fc96     15 1B 25 2A 
0fc9a     31 37 3D 42 
0fc9e     46 45 43 3F 
0fca2     3C 39 32 2C | 	byte	$15, $1b, $25, $2a, $31, $37, $3d, $42, $46, $45, $43, $3f, $3c, $39, $32, $2c
0fca6     26 20 1C 1C 
0fcaa     18 18 19 18 
0fcae     13 0F 10 10 
0fcb2     0E 09 04 00 | 	byte	$26, $20, $1c, $1c, $18, $18, $19, $18, $13, $0f, $10, $10, $0e, $09, $04, $00
0fcb6     F9 F3 EE EA 
0fcba     E8 EA EB EE 
0fcbe     F3 FA 03 0C 
0fcc2     12 13 16 19 | 	byte	$f9, $f3, $ee, $ea, $e8, $ea, $eb, $ee, $f3, $fa, $03, $0c, $12, $13, $16, $19
0fcc6     19 16 15 14 
0fcca     10 0C 04 03 
0fcce     02 04 09 12 
0fcd2     18 20 26 2B | 	byte	$19, $16, $15, $14, $10, $0c, $04, $03, $02, $04, $09, $12, $18, $20, $26, $2b
0fcd6     30 33 36 36 
0fcda     36 34 30 2D 
0fcde     27 24 1F 1B 
0fce2     18 18 15 18 | 	byte	$30, $33, $36, $36, $36, $34, $30, $2d, $27, $24, $1f, $1b, $18, $18, $15, $18
0fce6     1F 25 2C 34 
0fcea     38 39 39 34 
0fcee     2E 26 1C 13 
0fcf2     09 00 F7 ED | 	byte	$1f, $25, $2c, $34, $38, $39, $39, $34, $2e, $26, $1c, $13, $09, $00, $f7, $ed
0fcf6     E5 DE DA D9 
0fcfa     DA DB DE E1 
0fcfe     E5 E8 E7 E5 
0fd02     DF DA D4 CD | 	byte	$e5, $de, $da, $d9, $da, $db, $de, $e1, $e5, $e8, $e7, $e5, $df, $da, $d4, $cd
0fd06     C7 C2 BE BE 
0fd0a     C0 C2 C7 CD 
0fd0e     D2 D8 DE E8 
0fd12     F0 F6 FD FF | 	byte	$c7, $c2, $be, $be, $c0, $c2, $c7, $cd, $d2, $d8, $de, $e8, $f0, $f6, $fd, $ff
0fd16     03 06 04 06 
0fd1a     08 0D 10 15 
0fd1e     1A 21 2A 31 
0fd22     37 3C 3E 3F | 	byte	$03, $06, $04, $06, $08, $0d, $10, $15, $1a, $21, $2a, $31, $37, $3c, $3e, $3f
0fd26     3E 3C 39 36 
0fd2a     32 2B 26 20 
0fd2e     1C 1A 1A 16 
0fd32     13 13 10 13 | 	byte	$3e, $3c, $39, $36, $32, $2b, $26, $20, $1c, $1a, $1a, $16, $13, $13, $10, $13
0fd36     13 0F 0D 0C 
0fd3a     09 00 FC F7 
0fd3e     F2 F0 EC EA 
0fd42     EB ED F1 F8 | 	byte	$13, $0f, $0d, $0c, $09, $00, $fc, $f7, $f2, $f0, $ec, $ea, $eb, $ed, $f1, $f8
0fd46     FF 09 0F 14 
0fd4a     18 1A 1E 1B 
0fd4e     1B 1A 15 13 
0fd52     0C 07 06 07 | 	byte	$ff, $09, $0f, $14, $18, $1a, $1e, $1b, $1b, $1a, $15, $13, $0c, $07, $06, $07
0fd56     0C 10 15 1B 
0fd5a     22 2B 2D 32 
0fd5e     38 38 36 37 
0fd62     31 2C 2A 26 | 	byte	$0c, $10, $15, $1b, $22, $2b, $2d, $32, $38, $38, $36, $37, $31, $2c, $2a, $26
0fd66     20 1A 15 13 
0fd6a     10 13 19 20 
0fd6e     27 2D 31 32 
0fd72     33 32 2D 26 | 	byte	$20, $1a, $15, $13, $10, $13, $19, $20, $27, $2d, $31, $32, $33, $32, $2d, $26
0fd76     21 18 0F 04 
0fd7a     FC F0 E6 E1 
0fd7e     DB D6 D8 D9 
0fd82     DE E2 E2 E5 | 	byte	$21, $18, $0f, $04, $fc, $f0, $e6, $e1, $db, $d6, $d8, $d9, $de, $e2, $e2, $e5
0fd86     E6 E4 DF DB 
0fd8a     D5 CE CC C7 
0fd8e     C2 C0 C1 C1 
0fd92     C3 C8 CE D4 | 	byte	$e6, $e4, $df, $db, $d5, $ce, $cc, $c7, $c2, $c0, $c1, $c1, $c3, $c8, $ce, $d4
0fd96     D9 E2 EC F3 
0fd9a     F8 FC FE FF 
0fd9e     02 03 03 08 
0fda2     0C 0F 14 1C | 	byte	$d9, $e2, $ec, $f3, $f8, $fc, $fe, $ff, $02, $03, $03, $08, $0c, $0f, $14, $1c
0fda6     22 2A 32 36 
0fdaa     3A 3C 3E 3D 
0fdae     3C 37 31 2B 
0fdb2     27 26 1E 1A | 	byte	$22, $2a, $32, $36, $3a, $3c, $3e, $3d, $3c, $37, $31, $2b, $27, $26, $1e, $1a
0fdb6     16 14 14 13 
0fdba     0F 0F 12 13 
0fdbe     0D 09 07 02 
0fdc2     FC F9 F3 ED | 	byte	$16, $14, $14, $13, $0f, $0f, $12, $13, $0d, $09, $07, $02, $fc, $f9, $f3, $ed
0fdc6     EA E7 E7 EC 
0fdca     F1 F6 FC 03 
0fdce     0A 0D 13 16 
0fdd2     1B 1B 1E 19 | 	byte	$ea, $e7, $e7, $ec, $f1, $f6, $fc, $03, $0a, $0d, $13, $16, $1b, $1b, $1e, $19
0fdd6     15 13 0C 0A 
0fdda     09 07 09 0E 
0fdde     14 19 1F 26 
0fde2     2C 31 36 39 | 	byte	$15, $13, $0c, $0a, $09, $07, $09, $0e, $14, $19, $1f, $26, $2c, $31, $36, $39
0fde6     36 34 37 34 
0fdea     30 2B 26 1E 
0fdee     18 13 13 14 
0fdf2     18 1C 22 2C | 	byte	$36, $34, $37, $34, $30, $2b, $26, $1e, $18, $13, $13, $14, $18, $1c, $22, $2c
0fdf6     2E 31 33 31 
0fdfa     30 2D 26 1E 
0fdfe     13 0C 02 F8 
0fe02     ED E6 E0 DE | 	byte	$2e, $31, $33, $31, $30, $2d, $26, $1e, $13, $0c, $02, $f8, $ed, $e6, $e0, $de
0fe06     DB DE E2 E5 
0fe0a     E7 E8 E7 E8 
0fe0e     E5 DF DA D5 
0fe12     CF CD C9 C6 | 	byte	$db, $de, $e2, $e5, $e7, $e8, $e7, $e8, $e5, $df, $da, $d5, $cf, $cd, $c9, $c6
0fe16     C6 C8 C7 C8 
0fe1a     CD D3 D9 E4 
0fe1e     EC F1 F8 FD 
0fe22     FF 00 01 02 | 	byte	$c6, $c8, $c7, $c8, $cd, $d3, $d9, $e4, $ec, $f1, $f8, $fd, $ff, $00, $01, $02
0fe26     03 08 0A 0E 
0fe2a     14 1B 24 27 
0fe2e     2C 32 36 3C 
0fe32     3D 39 36 36 | 	byte	$03, $08, $0a, $0e, $14, $1b, $24, $27, $2c, $32, $36, $3c, $3d, $39, $36, $36
0fe36     30 2B 26 20 
0fe3a     1F 1C 18 13 
0fe3e     12 0F 0F 0F 
0fe42     0F 10 0D 09 | 	byte	$30, $2b, $26, $20, $1f, $1c, $18, $13, $12, $0f, $0f, $0f, $0f, $10, $0d, $09
0fe46     06 02 FE F8 
0fe4a     F1 ED E8 E6 
0fe4e     E6 EA EE F3 
0fe52     F9 FF 03 0C | 	byte	$06, $02, $fe, $f8, $f1, $ed, $e8, $e6, $e6, $ea, $ee, $f3, $f9, $ff, $03, $0c
0fe56     12 18 1A 1B 
0fe5a     1E 1A 16 13 
0fe5e     0E 0D 0D 0D 
0fe62     0F 13 15 18 | 	byte	$12, $18, $1a, $1b, $1e, $1a, $16, $13, $0e, $0d, $0d, $0d, $0f, $13, $15, $18
0fe66     20 26 2B 2E 
0fe6a     34 36 36 37 
0fe6e     39 38 33 2D 
0fe72     28 22 1B 14 | 	byte	$20, $26, $2b, $2e, $34, $36, $36, $37, $39, $38, $33, $2d, $28, $22, $1b, $14
0fe76     13 14 19 1E 
0fe7a     21 25 2A 2E 
0fe7e     30 30 2D 28 
0fe82     26 1F 15 0C | 	byte	$13, $14, $19, $1e, $21, $25, $2a, $2e, $30, $30, $2d, $28, $26, $1f, $15, $0c
0fe86     03 F9 F0 E6 
0fe8a     DF DB D9 DA 
0fe8e     D9 DC E1 E5 
0fe92     E5 E5 E1 DE | 	byte	$03, $f9, $f0, $e6, $df, $db, $d9, $da, $d9, $dc, $e1, $e5, $e5, $e5, $e1, $de
0fe96     DC D5 D3 CD 
0fe9a     CA C9 C7 C3 
0fe9e     C4 C8 CE D3 
0fea2     D9 E0 EA EE | 	byte	$dc, $d5, $d3, $cd, $ca, $c9, $c7, $c3, $c4, $c8, $ce, $d3, $d9, $e0, $ea, $ee
0fea6     F6 FA FF 03 
0feaa     03 06 06 04 
0feae     0C 12 14 18 
0feb2     1F 24 2B 2E | 	byte	$f6, $fa, $ff, $03, $03, $06, $06, $04, $0c, $12, $14, $18, $1f, $24, $2b, $2e
0feb6     34 38 3C 3D 
0feba     3A 39 33 2E 
0febe     2D 26 1F 1C 
0fec2     19 14 13 13 | 	byte	$34, $38, $3c, $3d, $3a, $39, $33, $2e, $2d, $26, $1f, $1c, $19, $14, $13, $13
0fec6     13 13 0F 0D 
0feca     0D 0A 07 01 
0fece     00 FA F4 F0 
0fed2     E8 E5 E6 E7 | 	byte	$13, $13, $0f, $0d, $0d, $0a, $07, $01, $00, $fa, $f4, $f0, $e8, $e5, $e6, $e7
0fed6     E8 ED F3 F6 
0feda     FD 01 0C 0F 
0fede     15 19 1A 19 
0fee2     14 10 0F 0E | 	byte	$e8, $ed, $f3, $f6, $fd, $01, $0c, $0f, $15, $19, $1a, $19, $14, $10, $0f, $0e
0fee6     0C 0A 0D 0D 
0feea     10 15 19 21 
0feee     28 2B 2D 32 
0fef2     34 37 37 39 | 	byte	$0c, $0a, $0d, $0d, $10, $15, $19, $21, $28, $2b, $2d, $32, $34, $37, $37, $39
0fef6     33 30 28 20 
0fefa     18 16 13 12 
0fefe     00 00 0D 08 
0ff02     0E 0F 0E 0E | 	byte	$33, $30, $28, $20, $18, $16, $13, $12, $00, $00, $0d, $08, $0e, $0f, $0e, $0e
0ff06     16 18 1E 18 
0ff0a     1C 1A 1F 18 
0ff0e     12 19 14 13 
0ff12     0E 07 06 0F | 	byte	$16, $18, $1e, $18, $1c, $1a, $1f, $18, $12, $19, $14, $13, $0e, $07, $06, $0f
0ff16     15 13 0D 14 
0ff1a     1C 1E 1B 18 
0ff1e     18 1F 13 16 
0ff22     09 06 F7 FA | 	byte	$15, $13, $0d, $14, $1c, $1e, $1b, $18, $18, $1f, $13, $16, $09, $06, $f7, $fa
0ff26     F3 F2 EB F1 
0ff2a     EA F7 F2 F6 
0ff2e     F0 F7 F2 F7 
0ff32     F1 EC E8 EE | 	byte	$f3, $f2, $eb, $f1, $ea, $f7, $f2, $f6, $f0, $f7, $f2, $f7, $f1, $ec, $e8, $ee
0ff36     E8 D8 DC DF 
0ff3a     DF D3 DB E6 
0ff3e     E8 E4 DE EB 
0ff42     FE FC FE F9 | 	byte	$e8, $d8, $dc, $df, $df, $d3, $db, $e6, $e8, $e4, $de, $eb, $fe, $fc, $fe, $f9
0ff46     F7 F7 F8 00 
0ff4a     00 FE 07 01 
0ff4e     01 06 15 1C 
0ff52     18 1B 1A 1E | 	byte	$f7, $f7, $f8, $00, $00, $fe, $07, $01, $01, $06, $15, $1c, $18, $1b, $1a, $1e
0ff56     1A 21 1E 1F 
0ff5a     10 14 12 0E 
0ff5e     08 13 18 0C 
0ff62     03 0D 0D 0C | 	byte	$1a, $21, $1e, $1f, $10, $14, $12, $0e, $08, $13, $18, $0c, $03, $0d, $0d, $0c
0ff66     09 08 0A 08 
0ff6a     00 03 00 FA 
0ff6e     F4 FC FA F8 
0ff72     FE FD F9 F2 | 	byte	$09, $08, $0a, $08, $00, $03, $00, $fa, $f4, $fc, $fa, $f8, $fe, $fd, $f9, $f2
0ff76     00 0C 0D 0D 
0ff7a     0F 13 14 0E 
0ff7e     10 18 12 0E 
0ff82     13 13 0E 13 | 	byte	$00, $0c, $0d, $0d, $0f, $13, $14, $0e, $10, $18, $12, $0e, $13, $13, $0e, $13
0ff86     19 15 0E 13 
0ff8a     14 1A 14 1C 
0ff8e     20 22 21 26 
0ff92     2B 25 18 10 | 	byte	$19, $15, $0e, $13, $14, $1a, $14, $1c, $20, $22, $21, $26, $2b, $25, $18, $10
0ff96     14 10 07 06 
0ff9a     00 00 F3 1A 
0ff9e     F7 2A EB 2A 
0ffa2     13 54 09 46 | 	byte	$14, $10, $07, $06, $00, $00, $f3, $1a, $f7, $2a, $eb, $2a, $13, $54, $09, $46
0ffa6     10 3E 30 2A 
0ffaa     00 13 1A 0E 
0ffae     F3 E6 DB FC 
0ffb2     00 EB CC DB | 	byte	$10, $3e, $30, $2a, $00, $13, $1a, $0e, $f3, $e6, $db, $fc, $00, $eb, $cc, $db
0ffb6     CE D5 F7 D6 
0ffba     C7 C9 CE D5 
0ffbe     D6 C7 BB D8 
0ffc2     BC C2 D5 E6 | 	byte	$ce, $d5, $f7, $d6, $c7, $c9, $ce, $d5, $d6, $c7, $bb, $d8, $bc, $c2, $d5, $e6
0ffc6     D0 D2 E4 D6 
0ffca     CC FC CC C7 
0ffce     B5 D5 00 EB 
0ffd2     E8 FD 09 2A | 	byte	$d0, $d2, $e4, $d6, $cc, $fc, $cc, $c7, $b5, $d5, $00, $eb, $e8, $fd, $09, $2a
0ffd6     1E 1E 2A 4A 
0ffda     3E 4A 37 48 
0ffde     54 2A 21 37 
0ffe2     25 2A 22 38 | 	byte	$1e, $1e, $2a, $4a, $3e, $4a, $37, $48, $54, $2a, $21, $37, $25, $2a, $22, $38
0ffe6     2C 2A 0C 09 
0ffea     25 1A FE 0E 
0ffee     1A FC 00 09 
0fff2     00 ED FC F2 | 	byte	$2c, $2a, $0c, $09, $25, $1a, $fe, $0e, $1a, $fc, $00, $09, $00, $ed, $fc, $f2
0fff6     E1 EB EC DF 
0fffa     BD B0 00 EC 
0fffe     EC E6 00 2A 
10002     16 1F 1F 00 | 	byte	$e1, $eb, $ec, $df, $bd, $b0, $00, $ec, $ec, $e6, $00, $2a, $16, $1f, $1f, $00
10006     10 2A 1F 0F 
1000a     13 2A F7 EB 
1000e     F7 EB 00 06 
10012     09 13 09 04 | 	byte	$10, $2a, $1f, $0f, $13, $2a, $f7, $eb, $f7, $eb, $00, $06, $09, $13, $09, $04
10016     0E 13 09 F8 
1001a     13 12 F7 F2 
1001e     F4 F7 EA FC 
10022     FC D5 0E F8 | 	byte	$0e, $13, $09, $f8, $13, $12, $f7, $f2, $f4, $f7, $ea, $fc, $fc, $d5, $0e, $f8
10026     E1 D8 CC 09 
1002a     EB EC FC 00 
1002e     25 1F 2A 00 
10032     01 19 25 0C | 	byte	$e1, $d8, $cc, $09, $eb, $ec, $fc, $00, $25, $1f, $2a, $00, $01, $19, $25, $0c
10036     F7 2A 18 F2 
1003a     F1 F7 FC 00 
1003e     09 06 0D 09 
10042     F7 F7 09 E4 | 	byte	$f7, $2a, $18, $f2, $f1, $f7, $fc, $00, $09, $06, $0d, $09, $f7, $f7, $09, $e4
10046     DE F3 F2 E2 
1004a     ED F1 EC F3 
1004e     00 EC F7 00 
10052     F7 E0 D6 D5 | 	byte	$de, $f3, $f2, $e2, $ed, $f1, $ec, $f3, $00, $ec, $f7, $00, $f7, $e0, $d6, $d5
10056     EC E2 E0 E1 
1005a     00 2A 2A 3F 
1005e     1F 1C 39 3F 
10062     3F 24 3E 1A | 	byte	$ec, $e2, $e0, $e1, $00, $2a, $2a, $3f, $1f, $1c, $39, $3f, $3f, $24, $3e, $1a
10066     00 0E 01 00 
1006a     FE 07 1A 0E 
1006e     00 F2 00 0E 
10072     E4 EB 06 F2 | 	byte	$00, $0e, $01, $00, $fe, $07, $1a, $0e, $00, $f2, $00, $0e, $e4, $eb, $06, $f2
10076     E2 EE FF E7 
1007a     D9 F6 C8 F0 
1007e     E4 C1 D5 B6 
10082     D5 D2 CC E1 | 	byte	$e2, $ee, $ff, $e7, $d9, $f6, $c8, $f0, $e4, $c1, $d5, $b6, $d5, $d2, $cc, $e1
10086     EB 13 1A 46 
1008a     40 2E 24 3F 
1008e     44 20 34 39 
10092     1F 09 13 16 | 	byte	$eb, $13, $1a, $46, $40, $2e, $24, $3f, $44, $20, $34, $39, $1f, $09, $13, $16
10096     14 21 2A 34 
1009a     39 32 2A 3E 
1009e     30 0D 19 2C 
100a2     18 1A 26 1F | 	byte	$14, $21, $2a, $34, $39, $32, $2a, $3e, $30, $0d, $19, $2c, $18, $1a, $26, $1f
100a6     1A 10 1A 09 
100aa     15 14 F8 00 
100ae     EB F7 00 F7 
100b2     EB ED 2C 19 | 	byte	$1a, $10, $1a, $09, $15, $14, $f8, $00, $eb, $f7, $00, $f7, $eb, $ed, $2c, $19
100b6     2A 1F 09 0D 
100ba     00 09 ED 09 
100be     04 DB DA D6 
100c2     EC E0 E0 F2 | 	byte	$2a, $1f, $09, $0d, $00, $09, $ed, $09, $04, $db, $da, $d6, $ec, $e0, $e0, $f2
100c6     00 FA DF C6 
100ca     E8 D9 B0 C8 
100ce     DB D5 CF ED 
100d2     F7 E1 FC D6 | 	byte	$00, $fa, $df, $c6, $e8, $d9, $b0, $c8, $db, $d5, $cf, $ed, $f7, $e1, $fc, $d6
100d6     F3 00 E1 E0 
100da     C6 D4 E0 D5 
100de     D6 D6 00 1C 
100e2     2A 3C 3F 2A | 	byte	$f3, $00, $e1, $e0, $c6, $d4, $e0, $d5, $d6, $d6, $00, $1c, $2a, $3c, $3f, $2a
100e6     2D 3E 34 2A 
100ea     3E 34 07 12 
100ee     1E 13 14 1A 
100f2     1E 2A 28 14 | 	byte	$2d, $3e, $34, $2a, $3e, $34, $07, $12, $1e, $13, $14, $1a, $1e, $2a, $28, $14
100f6     00 18 00 EC 
100fa     0E 08 00 09 
100fe     13 1A 00 09 
10102     F3 03 14 DB | 	byte	$00, $18, $00, $ec, $0e, $08, $00, $09, $13, $1a, $00, $09, $f3, $03, $14, $db
10106     EC DA E0 DE 
1010a     DB E8 CC 00 
1010e     1B 32 34 2A 
10112     26 22 30 09 | 	byte	$ec, $da, $e0, $de, $db, $e8, $cc, $00, $1b, $32, $34, $2a, $26, $22, $30, $09
10116     06 2A 14 FC 
1011a     F7 00 06 09 
1011e     0E 1C 2B 36 
10122     0E 10 1F 04 | 	byte	$06, $2a, $14, $fc, $f7, $00, $06, $09, $0e, $1c, $2b, $36, $0e, $10, $1f, $04
10126     FC 0D 0F FC 
1012a     0D 1E 09 13 
1012e     00 FD 13 14 
10132     00 F8 EB 00 | 	byte	$fc, $0d, $0f, $fc, $0d, $1e, $09, $13, $00, $fd, $13, $14, $00, $f8, $eb, $00
10136     04 F7 F2 EB 
1013a     1B 2A 2B 34 
1013e     1C 1A 19 14 
10142     F7 FE 1A ED | 	byte	$04, $f7, $f2, $eb, $1b, $2a, $2b, $34, $1c, $1a, $19, $14, $f7, $fe, $1a, $ed
10146     D9 E8 F2 E6 
1014a     EB F1 00 00 
1014e     00 E4 F1 ED 
10152     C7 DC E0 E1 | 	byte	$d9, $e8, $f2, $e6, $eb, $f1, $00, $00, $00, $e4, $f1, $ed, $c7, $dc, $e0, $e1
10156     E0 E6 09 F7 
1015a     04 EE E0 18 
1015e     F4 EB E1 EB 
10162     F3 DE F3 D6 | 	byte	$e0, $e6, $09, $f7, $04, $ee, $e0, $18, $f4, $eb, $e1, $eb, $f3, $de, $f3, $d6
10166     EB 0E 2B 3E 
1016a     3F 3C 32 43 
1016e     34 1A 2A 30 
10172     14 08 0E 04 | 	byte	$eb, $0e, $2b, $3e, $3f, $3c, $32, $43, $34, $1a, $2a, $30, $14, $08, $0e, $04
10176     00 03 0E 08 
1017a     19 09 FE 03 
1017e     00 E0 EB FE 
10182     E6 EC 00 00 | 	byte	$00, $03, $0e, $08, $19, $09, $fe, $03, $00, $e0, $eb, $fe, $e6, $ec, $00, $00
10186     00 F2 E6 D5 
1018a     F2 E1 E1 CC 
1018e     D0 E6 E0 F2 
10192     CC F1 13 24 | 	byte	$00, $f2, $e6, $d5, $f2, $e1, $e1, $cc, $d0, $e6, $e0, $f2, $cc, $f1, $13, $24
10196     3E 34 30 2B 
1019a     3C 2A 03 31 
1019e     30 0A 06 12 
101a2     0A 0E 0E 27 | 	byte	$3e, $34, $30, $2b, $3c, $2a, $03, $31, $30, $0a, $06, $12, $0a, $0e, $0e, $27
101a6     2E 3E 2A 27 
101aa     3C 14 13 13 
101ae     14 14 01 27 
101b2     0C 1A 21 F2 | 	byte	$2e, $3e, $2a, $27, $3c, $14, $13, $13, $14, $14, $01, $27, $0c, $1a, $21, $f2
101b6     0E 14 09 F7 
101ba     EC 00 04 0E 
101be     00 ED 00 1C 
101c2     2A 30 30 14 | 	byte	$0e, $14, $09, $f7, $ec, $00, $04, $0e, $00, $ed, $00, $1c, $2a, $30, $30, $14
101c6     19 18 00 FC 
101ca     0E 00 EC E4 
101ce     E6 E0 E4 EB 
101d2     ED F7 00 EC | 	byte	$19, $18, $00, $fc, $0e, $00, $ec, $e4, $e6, $e0, $e4, $eb, $ed, $f7, $00, $ec
101d6     E0 F2 CE C1 
101da     D5 D0 D6 D5 
101de     EC EB EB EC 
101e2     D9 F7 E6 EC | 	byte	$e0, $f2, $ce, $c1, $d5, $d0, $d6, $d5, $ec, $eb, $eb, $ec, $d9, $f7, $e6, $ec
101e6     D9 D0 EB DE 
101ea     F9 DB DB 00 
101ee     0E 32 3C 3D 
101f2     2A 3C 4C 1F | 	byte	$d9, $d0, $eb, $de, $f9, $db, $db, $00, $0e, $32, $3c, $3d, $2a, $3c, $4c, $1f
101f6     2A 43 30 1A 
101fa     13 0E 14 0E 
101fe     19 18 2A 21 
10202     14 1E 14 04 | 	byte	$2a, $43, $30, $1a, $13, $0e, $14, $0e, $19, $18, $2a, $21, $14, $1e, $14, $04
10206     FC 01 09 EE 
1020a     10 00 00 0E 
1020e     F2 E6 F2 F2 
10212     E5 CE D5 E6 | 	byte	$fc, $01, $09, $ee, $10, $00, $00, $0e, $f2, $e6, $f2, $f2, $e5, $ce, $d5, $e6
10216     EB F2 DE E0 
1021a     00 13 31 37 
1021e     2A 25 34 2A 
10222     09 24 2C 1A | 	byte	$eb, $f2, $de, $e0, $00, $13, $31, $37, $2a, $25, $34, $2a, $09, $24, $2c, $1a
10226     00 09 08 04 
1022a     09 1F 24 2D 
1022e     2C 13 30 21 
10232     01 0E 0E 14 | 	byte	$00, $09, $08, $04, $09, $1f, $24, $2d, $2c, $13, $30, $21, $01, $0e, $0e, $14
10236     00 09 14 09 
1023a     15 F2 06 03 
1023e     00 FC E1 00 
10242     F2 09 00 E6 | 	byte	$00, $09, $14, $09, $15, $f2, $06, $03, $00, $fc, $e1, $00, $f2, $09, $00, $e6
10246     F7 00 19 21 
1024a     30 1A 0A 22 
1024e     09 F3 09 09 
10252     00 EB E8 EC | 	byte	$f7, $00, $19, $21, $30, $1a, $0a, $22, $09, $f3, $09, $09, $00, $eb, $e8, $ec
10256     EC F7 F6 00 
1025a     01 00 F1 F2 
1025e     EC D2 D9 EB 
10262     D6 E5 F7 E7 | 	byte	$ec, $f7, $f6, $00, $01, $00, $f1, $f2, $ec, $d2, $d9, $eb, $d6, $e5, $f7, $e7
10266     F7 00 E4 F1 
1026a     F0 F0 EC D5 
1026e     EC EB FD EE 
10272     D5 F7 00 21 | 	byte	$f7, $00, $e4, $f1, $f0, $f0, $ec, $d5, $ec, $eb, $fd, $ee, $d5, $f7, $00, $21
10276     34 34 30 34 
1027a     48 2A 1E 38 
1027e     39 1A 14 18 
10282     14 08 14 13 | 	byte	$34, $34, $30, $34, $48, $2a, $1e, $38, $39, $1a, $14, $18, $14, $08, $14, $13
10286     1B 2B 04 0F 
1028a     18 00 00 F3 
1028e     0E FC FC 00 
10292     F7 0E EC E4 | 	byte	$1b, $2b, $04, $0f, $18, $00, $00, $f3, $0e, $fc, $fc, $00, $f7, $0e, $ec, $e4
10296     EC E8 EB D6 
1029a     D5 D9 E8 F7 
1029e     E1 DB EE 09 
102a2     19 2C 30 20 | 	byte	$ec, $e8, $eb, $d6, $d5, $d9, $e8, $f7, $e1, $db, $ee, $09, $19, $2c, $30, $20
102a6     2A 34 0E 13 
102aa     27 2A 0D 09 
102ae     0E 09 0E 12 
102b2     22 2A 30 22 | 	byte	$2a, $34, $0e, $13, $27, $2a, $0d, $09, $0e, $09, $0e, $12, $22, $2a, $30, $22
102b6     26 30 0E 09 
102ba     24 14 09 13 
102be     18 09 1F 00 
102c2     01 06 00 09 | 	byte	$26, $30, $0e, $09, $24, $14, $09, $13, $18, $09, $1f, $00, $01, $06, $00, $09
102c6     EC 00 FE 06 
102ca     0D EC F7 F7 
102ce     0D 22 28 1F 
102d2     09 1E 14 ED | 	byte	$ec, $00, $fe, $06, $0d, $ec, $f7, $f7, $0d, $22, $28, $1f, $09, $1e, $14, $ed
102d6     FA 0E 00 ED 
102da     E8 F7 E4 ED 
102de     F3 F1 0A F3 
102e2     EC F7 EC E4 | 	byte	$fa, $0e, $00, $ed, $e8, $f7, $e4, $ed, $f3, $f1, $0a, $f3, $ec, $f7, $ec, $e4
102e6     CC E2 E1 DB 
102ea     EB E1 F7 00 
102ee     E2 E6 EC F1 
102f2     EC DE E0 E4 | 	byte	$cc, $e2, $e1, $db, $eb, $e1, $f7, $00, $e2, $e6, $ec, $f1, $ec, $de, $e0, $e4
102f6     F7 F7 DB E4 
102fa     FC 0E 26 36 
102fe     2A 24 44 2A 
10302     1B 2A 37 25 | 	byte	$f7, $f7, $db, $e4, $fc, $0e, $26, $36, $2a, $24, $44, $2a, $1b, $2a, $37, $25
10306     14 13 14 0E 
1030a     04 14 13 26 
1030e     10 01 1F 09 
10312     00 FE 0A FC | 	byte	$14, $13, $14, $0e, $04, $14, $13, $26, $10, $01, $1f, $09, $00, $fe, $0a, $fc
10316     F7 09 F8 12 
1031a     00 E7 F3 E4 
1031e     FA DB D5 E1 
10322     E4 00 EC E6 | 	byte	$f7, $09, $f8, $12, $00, $e7, $f3, $e4, $fa, $db, $d5, $e1, $e4, $00, $ec, $e6
10326     EB FE 13 2A 
1032a     37 21 24 3F 
1032e     21 10 26 2A 
10332     1A 09 1E 0C | 	byte	$eb, $fe, $13, $2a, $37, $21, $24, $3f, $21, $10, $26, $2a, $1a, $09, $1e, $0c
10336     14 19 18 2A 
1033a     2A 2A 2A 2A 
1033e     25 09 13 18 
10342     09 13 14 0C | 	byte	$14, $19, $18, $2a, $2a, $2a, $2a, $2a, $25, $09, $13, $18, $09, $13, $14, $0c
10346     1F 09 FE 04 
1034a     00 09 F7 FA 
1034e     FC FE 14 FC 
10352     F0 F7 00 13 | 	byte	$1f, $09, $fe, $04, $00, $09, $f7, $fa, $fc, $fe, $14, $fc, $f0, $f7, $00, $13
10356     1E 1F 09 13 
1035a     1A 00 F4 09 
1035e     00 F7 EB F7 
10362     F2 E6 F4 EB | 	byte	$1e, $1f, $09, $13, $1a, $00, $f4, $09, $00, $f7, $eb, $f7, $f2, $e6, $f4, $eb
10366     00 00 DB F7 
1036a     ED DF CC DF 
1036e     E1 D2 EB E1 
10372     F1 FF E6 EB | 	byte	$00, $00, $db, $f7, $ed, $df, $cc, $df, $e1, $d2, $eb, $e1, $f1, $ff, $e6, $eb
10376     DA F1 EC DE 
1037a     E0 DB F7 F7 
1037e     E6 E4 EB 00 
10382     13 2E 34 1E | 	byte	$da, $f1, $ec, $de, $e0, $db, $f7, $f7, $e6, $e4, $eb, $00, $13, $2e, $34, $1e
10386     3E 39 1F 1E 
1038a     37 2B 14 22 
1038e     16 14 0E 0D 
10392     19 1C 14 0E | 	byte	$3e, $39, $1f, $1e, $37, $2b, $14, $22, $16, $14, $0e, $0d, $19, $1c, $14, $0e
10396     13 13 00 FE 
1039a     09 01 FC 09 
1039e     FD 09 0D ED 
103a2     F2 E0 F3 E6 | 	byte	$13, $13, $00, $fe, $09, $01, $fc, $09, $fd, $09, $0d, $ed, $f2, $e0, $f3, $e6
103a6     D8 E6 DB FD 
103aa     F9 E8 EA F1 
103ae     02 1C 34 2A 
103b2     24 3A 2A 14 | 	byte	$d8, $e6, $db, $fd, $f9, $e8, $ea, $f1, $02, $1c, $34, $2a, $24, $3a, $2a, $14
103b6     24 25 21 0C 
103ba     0F 15 09 1C 
103be     0E 1B 3E 1F 
103c2     24 22 2A 0E | 	byte	$24, $25, $21, $0c, $0f, $15, $09, $1c, $0e, $1b, $3e, $1f, $24, $22, $2a, $0e
103c6     0E 1F 09 13 
103ca     14 0C 1E 14 
103ce     06 00 00 06 
103d2     00 F7 F2 00 | 	byte	$0e, $1f, $09, $13, $14, $0c, $1e, $14, $06, $00, $00, $06, $00, $f7, $f2, $00
103d6     10 04 F4 F2 
103da     FC 00 10 25 
103de     0D 10 1F 0E 
103e2     F3 07 09 F7 | 	byte	$10, $04, $f4, $f2, $fc, $00, $10, $25, $0d, $10, $1f, $0e, $f3, $07, $09, $f7
103e6     F7 F2 F9 EB 
103ea     EC F7 00 04 
103ee     ED F2 F7 EC 
103f2     D6 DE EE DA | 	byte	$f7, $f2, $f9, $eb, $ec, $f7, $00, $04, $ed, $f2, $f7, $ec, $d6, $de, $ee, $da
103f6     F0 EA E8 06 
103fa     ED F3 E1 F2 
103fe     FA DF ED DE 
10402     F1 FD EE E8 | 	byte	$f0, $ea, $e8, $06, $ed, $f3, $e1, $f2, $fa, $df, $ed, $de, $f1, $fd, $ee, $e8
10406     E8 F3 03 24 
1040a     2C 1B 2E 3C 
1040e     2A 1E 26 34 
10412     15 14 19 04 | 	byte	$e8, $f3, $03, $24, $2c, $1b, $2e, $3c, $2a, $1e, $26, $34, $15, $14, $19, $04
10416     14 0E 01 1C 
1041a     14 06 03 0E 
1041e     04 F2 00 00 
10422     FC 00 F9 00 | 	byte	$14, $0e, $01, $1c, $14, $06, $03, $0e, $04, $f2, $00, $00, $fc, $00, $f9, $00
10426     04 F6 EC E0 
1042a     EA EC D5 D6 
1042e     D3 EB FC ED 
10432     E1 EA FA 00 | 	byte	$04, $f6, $ec, $e0, $ea, $ec, $d5, $d6, $d3, $eb, $fc, $ed, $e1, $ea, $fa, $00
10436     26 2A 1C 2E 
1043a     39 15 18 2A 
1043e     2A 19 0C 1F 
10442     19 13 18 19 | 	byte	$26, $2a, $1c, $2e, $39, $15, $18, $2a, $2a, $19, $0c, $1f, $19, $13, $18, $19
10446     3C 2B 25 2A 
1044a     30 2A 0E 2A 
1044e     14 1A 1C 0A 
10452     24 14 18 00 | 	byte	$3c, $2b, $25, $2a, $30, $2a, $0e, $2a, $14, $1a, $1c, $0a, $24, $14, $18, $00
10456     00 13 00 00 
1045a     FC FF 13 0D 
1045e     00 F8 FC FD 
10462     0E 26 14 12 | 	byte	$00, $13, $00, $00, $fc, $ff, $13, $0d, $00, $f8, $fc, $fd, $0e, $26, $14, $12
10466     1E 14 00 FC 
1046a     0F 00 F2 FC 
1046e     EB EE F3 E7 
10472     F1 00 F2 E4 | 	byte	$1e, $14, $00, $fc, $0f, $00, $f2, $fc, $eb, $ee, $f3, $e7, $f1, $00, $f2, $e4
10476     EB ED D6 D0 
1047a     E1 D9 E0 E1 
1047e     DB F8 ED EC 
10482     DF E0 F2 DF | 	byte	$eb, $ed, $d6, $d0, $e1, $d9, $e0, $e1, $db, $f8, $ed, $ec, $df, $e0, $f2, $df
10486     E2 D8 DE F2 
1048a     F3 E6 E0 ED 
1048e     F3 0E 2A 1C 
10492     1E 3E 2C 1C | 	byte	$e2, $d8, $de, $f2, $f3, $e6, $e0, $ed, $f3, $0e, $2a, $1c, $1e, $3e, $2c, $1c
10496     24 30 2C 13 
1049a     1A 1A 10 14 
1049e     01 1E 1E 14 
104a2     0D 16 1A 00 | 	byte	$24, $30, $2c, $13, $1a, $1a, $10, $14, $01, $1e, $1e, $14, $0d, $16, $1a, $00
104a6     09 09 00 10 
104aa     00 00 09 0D 
104ae     FC E6 F7 F2 
104b2     EB E2 DA EB | 	byte	$09, $09, $00, $10, $00, $00, $09, $0d, $fc, $e6, $f7, $f2, $eb, $e2, $da, $eb
104b6     00 F8 EE ED 
104ba     F7 FE 1E 25 
104be     1F 2A 37 2A 
104c2     0D 2A 2A 14 | 	byte	$00, $f8, $ee, $ed, $f7, $fe, $1e, $25, $1f, $2a, $37, $2a, $0d, $2a, $2a, $14
104c6     13 0F 10 0E 
104ca     0E 0E 27 2C 
104ce     1F 1E 26 2A 
104d2     06 19 14 0E | 	byte	$13, $0f, $10, $0e, $0e, $0e, $27, $2c, $1f, $1e, $26, $2a, $06, $19, $14, $0e
104d6     1A 01 18 13 
104da     0D 04 F3 09 
104de     FE FD F7 F1 
104e2     00 0A 04 F2 | 	byte	$1a, $01, $18, $13, $0d, $04, $f3, $09, $fe, $fd, $f7, $f1, $00, $0a, $04, $f2
104e6     F7 F6 FC 1A 
104ea     1A 04 1C 1A 
104ee     09 FC 01 0E 
104f2     F7 F6 F7 EE | 	byte	$f7, $f6, $fc, $1a, $1a, $04, $1c, $1a, $09, $fc, $01, $0e, $f7, $f6, $f7, $ee
104f6     FC EC F7 00 
104fa     01 F2 EE FE 
104fe     E1 DE EB E1 
10502     EB EE EB F8 | 	byte	$fc, $ec, $f7, $00, $01, $f2, $ee, $fe, $e1, $de, $eb, $e1, $eb, $ee, $eb, $f8
10506     FD 00 EC E8 
1050a     F8 F0 F2 E1 
1050e     E4 F7 FD F7 
10512     E8 F1 EE 00 | 	byte	$fd, $00, $ec, $e8, $f8, $f0, $f2, $e1, $e4, $f7, $fd, $f7, $e8, $f1, $ee, $00
10516     24 21 1C 39 
1051a     3E 1A 22 34 
1051e     2A 1A 14 18 
10522     0C 14 01 10 | 	byte	$24, $21, $1c, $39, $3e, $1a, $22, $34, $2a, $1a, $14, $18, $0c, $14, $01, $10
10526     19 14 08 03 
1052a     14 F9 FC 04 
1052e     F7 0E F3 FF 
10532     01 00 FF DB | 	byte	$19, $14, $08, $03, $14, $f9, $fc, $04, $f7, $0e, $f3, $ff, $01, $00, $ff, $db
10536     E6 EB E0 DB 
1053a     D0 D5 F0 F7 
1053e     EC E2 F0 EB 
10542     06 21 14 2A | 	byte	$e6, $eb, $e0, $db, $d0, $d5, $f0, $f7, $ec, $e2, $f0, $eb, $06, $21, $14, $2a
10546     2A 30 1A 13 
1054a     2B 1A 14 13 
1054e     0D 13 14 13 
10552     22 30 2A 1F | 	byte	$2a, $30, $1a, $13, $2b, $1a, $14, $13, $0d, $13, $14, $13, $22, $30, $2a, $1f
10556     2A 2C 18 1E 
1055a     25 13 2A 15 
1055e     19 1F 1C 14 
10562     01 09 04 0A | 	byte	$2a, $2c, $18, $1e, $25, $13, $2a, $15, $19, $1f, $1c, $14, $01, $09, $04, $0a
10566     01 F7 00 0E 
1056a     10 00 FC F7 
1056e     FC 0E 25 08 
10572     14 2A 0D 00 | 	byte	$01, $f7, $00, $0e, $10, $00, $fc, $f7, $fc, $0e, $25, $08, $14, $2a, $0d, $00
10576     00 09 00 F2 
1057a     FA ED F8 EC 
1057e     ED FC F7 F7 
10582     E2 F4 E6 D3 | 	byte	$00, $09, $00, $f2, $fa, $ed, $f8, $ec, $ed, $fc, $f7, $f7, $e2, $f4, $e6, $d3
10586     E0 D6 E8 E4 
1058a     E0 EB ED FD 
1058e     EC DC EC E6 
10592     E8 DB D5 E4 | 	byte	$e0, $d6, $e8, $e4, $e0, $eb, $ed, $fd, $ec, $dc, $ec, $e6, $e8, $db, $d5, $e4
10596     F3 F6 E1 E8 
1059a     E1 F7 13 14 
1059e     1C 2A 34 2A 
105a2     15 2A 2A 1F | 	byte	$f3, $f6, $e1, $e8, $e1, $f7, $13, $14, $1c, $2a, $34, $2a, $15, $2a, $2a, $1f
105a6     18 14 13 14 
105aa     09 09 1B 18 
105ae     14 09 1A 09 
105b2     FC 14 00 12 | 	byte	$18, $14, $13, $14, $09, $09, $1b, $18, $14, $09, $1a, $09, $fc, $14, $00, $12
105b6     06 01 0D 06 
105ba     09 F2 EB EE 
105be     ED F0 DC E0 
105c2     F1 FE F7 F0 | 	byte	$06, $01, $0d, $06, $09, $f2, $eb, $ee, $ed, $f0, $dc, $e0, $f1, $fe, $f7, $f0
105c6     F3 F1 FA 27 
105ca     1E 18 34 32 
105ce     25 13 27 27 
105d2     14 18 0D 13 | 	byte	$f3, $f1, $fa, $27, $1e, $18, $34, $32, $25, $13, $27, $27, $14, $18, $0d, $13
105d6     12 0D 19 21 
105da     2E 1A 24 2A 
105de     14 1E 14 13 
105e2     1C 14 13 0E | 	byte	$12, $0d, $19, $21, $2e, $1a, $24, $2a, $14, $1e, $14, $13, $1c, $14, $13, $0e
105e6     18 14 F9 00 
105ea     00 00 00 F2 
105ee     F1 00 0D 00 
105f2     FC EE EE 00 | 	byte	$18, $14, $f9, $00, $00, $00, $00, $f2, $f1, $00, $0d, $00, $fc, $ee, $ee, $00
105f6     0F 09 09 1C 
105fa     1A 00 00 04 
105fe     04 F4 F9 ED 
10602     F7 F3 E6 FA | 	byte	$0f, $09, $09, $1c, $1a, $00, $00, $04, $04, $f4, $f9, $ed, $f7, $f3, $e6, $fa
10606     FC FC E8 F3 
1060a     F9 D9 F0 E1 
1060e     EB F3 E5 F6 
10612     F4 00 00 EB | 	byte	$fc, $fc, $e8, $f3, $f9, $d9, $f0, $e1, $eb, $f3, $e5, $f6, $f4, $00, $00, $eb
10616     F1 ED F7 ED 
1061a     DE E8 F8 01 
1061e     F1 F2 F6 E6 
10622     10 1E 15 24 | 	byte	$f1, $ed, $f7, $ed, $de, $e8, $f8, $01, $f1, $f2, $f6, $e6, $10, $1e, $15, $24
10626     38 39 1C 24 
1062a     32 2A 1E 14 
1062e     13 13 09 09 
10632     0E 18 09 06 | 	byte	$38, $39, $1c, $24, $32, $2a, $1e, $14, $13, $13, $09, $09, $0e, $18, $09, $06
10636     0E 09 FC 04 
1063a     FD 00 04 FE 
1063e     00 FE 07 EE 
10642     E5 E6 E0 E6 | 	byte	$0e, $09, $fc, $04, $fd, $00, $04, $fe, $00, $fe, $07, $ee, $e5, $e6, $e0, $e6
10646     DB D3 DB F1 
1064a     F2 F2 EB E6 
1064e     EB 09 1A 0E 
10652     24 37 2A 18 | 	byte	$db, $d3, $db, $f1, $f2, $f2, $eb, $e6, $eb, $09, $1a, $0e, $24, $37, $2a, $18
10656     1E 2A 18 1C 
1065a     0E 13 1E 0D 
1065e     19 20 32 24 
10662     22 39 1F 2A | 	byte	$1e, $2a, $18, $1c, $0e, $13, $1e, $0d, $19, $20, $32, $24, $22, $39, $1f, $2a
10666     21 1C 2A 1F 
1066a     1C 1C 22 2A 
1066e     0E 09 06 09 
10672     0E 00 FD 01 | 	byte	$21, $1c, $2a, $1f, $1c, $1c, $22, $2a, $0e, $09, $06, $09, $0e, $00, $fd, $01
10676     1C 0E 04 07 
1067a     ED FE 13 14 
1067e     0C 18 26 09 
10682     00 06 04 FE | 	byte	$1c, $0e, $04, $07, $ed, $fe, $13, $14, $0c, $18, $26, $09, $00, $06, $04, $fe
10686     F9 F2 F3 F3 
1068a     E7 F0 F7 F7 
1068e     EC EB F7 D9 
10692     E2 DE DB E8 | 	byte	$f9, $f2, $f3, $f3, $e7, $f0, $f7, $f7, $ec, $eb, $f7, $d9, $e2, $de, $db, $e8
10696     DF EA E6 FC 
1069a     F7 E2 E5 E4 
1069e     EA EC D6 D9 
106a2     EB F2 F7 EB | 	byte	$df, $ea, $e6, $fc, $f7, $e2, $e5, $e4, $ea, $ec, $d6, $d9, $eb, $f2, $f7, $eb
106a6     EC E0 F7 19 
106aa     0D 15 2A 37 
106ae     22 19 2D 21 
106b2     22 16 0D 18 | 	byte	$ec, $e0, $f7, $19, $0d, $15, $2a, $37, $22, $19, $2d, $21, $22, $16, $0d, $18
106b6     0D 0C 08 1A 
106ba     18 04 13 0E 
106be     08 0D 01 0D 
106c2     0E 08 09 03 | 	byte	$0d, $0c, $08, $1a, $18, $04, $13, $0e, $08, $0d, $01, $0d, $0e, $08, $09, $03
106c6     13 00 F4 F1 
106ca     EA F2 EC E4 
106ce     D9 F7 FF F3 
106d2     FF EC ED 00 | 	byte	$13, $00, $f4, $f1, $ea, $f2, $ec, $e4, $d9, $f7, $ff, $f3, $ff, $ec, $ed, $00
106d6     1A 18 19 34 
106da     30 1F 19 2A 
106de     1E 18 14 0E 
106e2     1A 09 0D 19 | 	byte	$1a, $18, $19, $34, $30, $1f, $19, $2a, $1e, $18, $14, $0e, $1a, $09, $0d, $19
106e6     24 25 13 32 
106ea     1B 19 1F 13 
106ee     1E 18 18 0D 
106f2     10 1C 04 00 | 	byte	$24, $25, $13, $32, $1b, $19, $1f, $13, $1e, $18, $18, $0d, $10, $1c, $04, $00
106f6     00 FF 09 FA 
106fa     F2 F7 01 09 
106fe     00 01 ED E8 
10702     09 09 01 09 | 	byte	$00, $ff, $09, $fa, $f2, $f7, $01, $09, $00, $01, $ed, $e8, $09, $09, $01, $09
10706     1C 14 00 00 
1070a     00 FF FC F0 
1070e     F3 F2 F0 E8 
10712     F7 00 F2 EB | 	byte	$1c, $14, $00, $00, $00, $ff, $fc, $f0, $f3, $f2, $f0, $e8, $f7, $00, $f2, $eb
10716     FC E6 EB E4 
1071a     E8 F3 EB F2 
1071e     F0 00 00 F2 
10722     F2 F2 F7 F7 | 	byte	$fc, $e6, $eb, $e4, $e8, $f3, $eb, $f2, $f0, $00, $00, $f2, $f2, $f2, $f7, $f7
10726     F7 DE EB 00 
1072a     00 00 F9 EC 
1072e     F7 13 1B 14 
10732     2A 3D 34 1C | 	byte	$f7, $de, $eb, $00, $00, $00, $f9, $ec, $f7, $13, $1b, $14, $2a, $3d, $34, $1c
10736     2C 27 22 20 
1073a     0D 1C 0D 04 
1073e     04 0D 1C 00 
10742     0E 0E 00 04 | 	byte	$2c, $27, $22, $20, $0d, $1c, $0d, $04, $04, $0d, $1c, $00, $0e, $0e, $00, $04
10746     FC 00 01 00 
1074a     00 F6 03 00 
1074e     EC E8 DB EB 
10752     E0 DB D2 DB | 	byte	$fc, $00, $01, $00, $00, $f6, $03, $00, $ec, $e8, $db, $eb, $e0, $db, $d2, $db
10756     F7 ED F8 F2 
1075a     DE F7 09 12 
1075e     0C 2A 34 1F 
10762     19 21 1C 1A | 	byte	$f7, $ed, $f8, $f2, $de, $f7, $09, $12, $0c, $2a, $34, $1f, $19, $21, $1c, $1a
10766     18 0E 14 15 
1076a     09 16 24 2A 
1076e     1C 33 2A 26 
10772     26 1A 27 21 | 	byte	$18, $0e, $14, $15, $09, $16, $24, $2a, $1c, $33, $2a, $26, $26, $1a, $27, $21
10776     21 1A 16 26 
1077a     18 09 09 09 
1077e     04 10 00 F9 
10782     09 14 10 10 | 	byte	$21, $1a, $16, $26, $18, $09, $09, $09, $04, $10, $00, $f9, $09, $14, $10, $10
10786     04 F0 00 13 
1078a     0A 09 1C 2A 
1078e     04 03 04 00 
10792     04 F2 F7 F3 | 	byte	$04, $f0, $00, $13, $0a, $09, $1c, $2a, $04, $03, $04, $00, $04, $f2, $f7, $f3
10796     EE E8 E6 00 
1079a     EC E6 FA E4 
1079e     E6 DF DB E6 
107a2     E4 ED E2 EB | 	byte	$ee, $e8, $e6, $00, $ec, $e6, $fa, $e4, $e6, $df, $db, $e6, $e4, $ed, $e2, $eb
107a6     F8 EE EB E1 
107aa     EC EB EC DE 
107ae     D5 F4 F2 F6 
107b2     FC EC E6 FC | 	byte	$f8, $ee, $eb, $e1, $ec, $eb, $ec, $de, $d5, $f4, $f2, $f6, $fc, $ec, $e6, $fc
107b6     10 06 19 31 
107ba     30 1C 22 2A 
107be     1E 25 10 14 
107c2     15 07 04 09 | 	byte	$10, $06, $19, $31, $30, $1c, $22, $2a, $1e, $25, $10, $14, $15, $07, $04, $09
107c6     1F 07 09 14 
107ca     07 0F 00 06 
107ce     0E 0D 0D FD 
107d2     09 0E F8 F7 | 	byte	$1f, $07, $09, $14, $07, $0f, $00, $06, $0e, $0d, $0d, $fd, $09, $0e, $f8, $f7
107d6     F1 ED F7 EC 
107da     E1 E0 F8 FD 
107de     FF 04 EC F3 
107e2     09 18 13 1E | 	byte	$f1, $ed, $f7, $ec, $e1, $e0, $f8, $fd, $ff, $04, $ec, $f3, $09, $18, $13, $1e
107e6     3C 30 21 26 
107ea     1F 24 1A 13 
107ee     10 14 0F 09 
107f2     1E 2A 14 2A | 	byte	$3c, $30, $21, $26, $1f, $24, $1a, $13, $10, $14, $0f, $09, $1e, $2a, $14, $2a
107f6     2A 1E 21 14 
107fa     1E 1A 1C 14 
107fe     0D 13 14 0A 
10802     00 00 00 06 | 	byte	$2a, $1e, $21, $14, $1e, $1a, $1c, $14, $0d, $13, $14, $0a, $00, $00, $00, $06
10806     00 EC FE 06 
1080a     06 0E 04 ED 
1080e     F1 09 01 00 
10812     0E 21 09 FF | 	byte	$00, $ec, $fe, $06, $06, $0e, $04, $ed, $f1, $09, $01, $00, $0e, $21, $09, $ff
10816     07 FD 06 F7 
1081a     EE F7 ED EE 
1081e     E4 FE F9 EB 
10822     F7 EC ED E6 | 	byte	$07, $fd, $06, $f7, $ee, $f7, $ed, $ee, $e4, $fe, $f9, $eb, $f7, $ec, $ed, $e6
10826     E0 EB EA F7 
1082a     EB EB 00 F8 
1082e     F2 F1 EE F8 
10832     F7 F2 E0 F1 | 	byte	$e0, $eb, $ea, $f7, $eb, $eb, $00, $f8, $f2, $f1, $ee, $f8, $f7, $f2, $e0, $f1
10836     00 FD 07 F7 
1083a     ED F7 0E 0E 
1083e     12 2A 37 2A 
10842     26 2A 24 2A | 	byte	$00, $fd, $07, $f7, $ed, $f7, $0e, $0e, $12, $2a, $37, $2a, $26, $2a, $24, $2a
10846     1C 10 14 0F 
1084a     04 00 1A 09 
1084e     03 0E 06 0E 
10852     00 FF 07 06 | 	byte	$1c, $10, $14, $0f, $04, $00, $1a, $09, $03, $0e, $06, $0e, $00, $ff, $07, $06
10856     04 FC 00 04 
1085a     FD EC E8 E4 
1085e     E8 ED D9 DA 
10862     E8 F1 F7 00 | 	byte	$04, $fc, $00, $04, $fd, $ec, $e8, $e4, $e8, $ed, $d9, $da, $e8, $f1, $f7, $00
10866     EE E4 00 09 
1086a     0A 0E 2E 30 
1086e     1A 22 18 22 
10872     1C 14 13 0E | 	byte	$ee, $e4, $00, $09, $0a, $0e, $2e, $30, $1a, $22, $18, $22, $1c, $14, $13, $0e
10876     15 09 13 26 
1087a     1A 24 2A 24 
1087e     2A 1A 1E 1C 
10882     26 21 09 1C | 	byte	$15, $09, $13, $26, $1a, $24, $2a, $24, $2a, $1a, $1e, $1c, $26, $21, $09, $1c
10886     1A 14 08 00 
1088a     08 09 0E FC 
1088e     FC 0C 0C 13 
10892     14 00 F7 07 | 	byte	$1a, $14, $08, $00, $08, $09, $0e, $fc, $fc, $0c, $0c, $13, $14, $00, $f7, $07
10896     09 01 09 1C 
1089a     1A 04 09 03 
1089e     04 04 F4 F8 
108a2     F4 F7 DF F7 | 	byte	$09, $01, $09, $1c, $1a, $04, $09, $03, $04, $04, $f4, $f8, $f4, $f7, $df, $f7
108a6     00 EC F7 EC 
108aa     F2 EC DA E5 
108ae     EA ED EC E0 
108b2     F3 F8 EC EC | 	byte	$00, $ec, $f7, $ec, $f2, $ec, $da, $e5, $ea, $ed, $ec, $e0, $f3, $f8, $ec, $ec
108b6     E4 E8 F1 EC 
108ba     DB E0 F2 F1 
108be     00 FC E4 EB 
108c2     00 0D 03 19 | 	byte	$e4, $e8, $f1, $ec, $db, $e0, $f2, $f1, $00, $fc, $e4, $eb, $00, $0d, $03, $19
108c6     31 2A 24 1F 
108ca     22 24 1A 18 
108ce     12 10 09 FE 
108d2     13 0D 03 0E | 	byte	$31, $2a, $24, $1f, $22, $24, $1a, $18, $12, $10, $09, $fe, $13, $0d, $03, $0e
108d6     08 0E 04 00 
108da     01 08 13 00 
108de     00 03 04 F7 
108e2     EC EB E8 F4 | 	byte	$08, $0e, $04, $00, $01, $08, $13, $00, $00, $03, $04, $f7, $ec, $eb, $e8, $f4
108e6     E6 DE E8 EC 
108ea     F8 02 00 E6 
108ee     F7 09 0A 0C 
108f2     1E 37 1F 27 | 	byte	$e6, $de, $e8, $ec, $f8, $02, $00, $e6, $f7, $09, $0a, $0c, $1e, $37, $1f, $27
108f6     22 1E 25 15 
108fa     19 14 1A 09 
108fe     09 25 1C 24 
10902     25 24 2D 1A | 	byte	$22, $1e, $25, $15, $19, $14, $1a, $09, $09, $25, $1c, $24, $25, $24, $2d, $1a
10906     1B 1E 1E 2A 
1090a     0E 12 1C 14 
1090e     09 00 FC 00 
10912     07 FA F3 03 | 	byte	$1b, $1e, $1e, $2a, $0e, $12, $1c, $14, $09, $00, $fc, $00, $07, $fa, $f3, $03
10916     01 09 0E 04 
1091a     F1 F7 09 00 
1091e     FE 13 14 09 
10922     03 01 00 00 | 	byte	$01, $09, $0e, $04, $f1, $f7, $09, $00, $fe, $13, $14, $09, $03, $01, $00, $00
10926     F7 F8 F4 F9 
1092a     E1 EB FD ED 
1092e     F7 F2 F1 F2 
10932     EB E8 E8 F7 | 	byte	$f7, $f8, $f4, $f9, $e1, $eb, $fd, $ed, $f7, $f2, $f1, $f2, $eb, $e8, $e8, $f7
10936     F2 EE F3 01 
1093a     FC F2 F1 EB 
1093e     F7 F7 EC E6 
10942     F2 F4 FE 06 | 	byte	$f2, $ee, $f3, $01, $fc, $f2, $f1, $eb, $f7, $f7, $ec, $e6, $f2, $f4, $fe, $06
10946     F2 EB FE 09 
1094a     04 09 34 2A 
1094e     26 28 21 27 
10952     1F 19 14 13 | 	byte	$f2, $eb, $fe, $09, $04, $09, $34, $2a, $26, $28, $21, $27, $1f, $19, $14, $13
10956     0E FA 09 09 
1095a     03 0D 00 0D 
1095e     06 00 03 FF 
10962     10 01 FC 00 | 	byte	$0e, $fa, $09, $09, $03, $0d, $00, $0d, $06, $00, $03, $ff, $10, $01, $fc, $00
10966     01 FC ED E7 
1096a     E2 F0 E8 D6 
1096e     E4 E6 EB F7 
10972     00 EC E8 00 | 	byte	$01, $fc, $ed, $e7, $e2, $f0, $e8, $d6, $e4, $e6, $eb, $f7, $00, $ec, $e8, $00
10976     04 01 13 2C 
1097a     27 20 1F 1E 
1097e     26 18 18 13 
10982     1E 14 06 21 | 	byte	$04, $01, $13, $2c, $27, $20, $1f, $1e, $26, $18, $18, $13, $1e, $14, $06, $21
10986     1C 22 2A 26 
1098a     2D 2A 25 25 
1098e     26 2A 21 1A 
10992     22 21 14 0D | 	byte	$1c, $22, $2a, $26, $2d, $2a, $25, $25, $26, $2a, $21, $1a, $22, $21, $14, $0d
10996     02 08 0E 09 
1099a     FC 04 06 07 
1099e     18 0E 00 F8 
109a2     07 06 F8 13 | 	byte	$02, $08, $0e, $09, $fc, $04, $06, $07, $18, $0e, $00, $f8, $07, $06, $f8, $13
109a6     19 0E 09 04 
109aa     06 04 FA F7 
109ae     F4 FC E6 E6 
109b2     F2 EC F3 E8 | 	byte	$19, $0e, $09, $04, $06, $04, $fa, $f7, $f4, $fc, $e6, $e6, $f2, $ec, $f3, $e8
109b6     ED ED E4 E8 
109ba     DE F0 ED E8 
109be     EB F8 F8 F0 
109c2     EC E4 EB F7 | 	byte	$ed, $ed, $e4, $e8, $de, $f0, $ed, $e8, $eb, $f8, $f8, $f0, $ec, $e4, $eb, $f7
109c6     EC E4 EA ED 
109ca     F1 00 F9 E6 
109ce     F3 00 04 00 
109d2     24 2A 25 26 | 	byte	$ec, $e4, $ea, $ed, $f1, $00, $f9, $e6, $f3, $00, $04, $00, $24, $2a, $25, $26
109d6     21 2B 22 1F 
109da     14 1B 1C 00 
109de     0C 10 06 10 
109e2     09 0D 0E 08 | 	byte	$21, $2b, $22, $1f, $14, $1b, $1c, $00, $0c, $10, $06, $10, $09, $0d, $0e, $08
109e6     09 06 0D 0E 
109ea     01 06 0A 04 
109ee     FA F2 EA F1 
109f2     F8 E1 E6 EB | 	byte	$09, $06, $0d, $0e, $01, $06, $0a, $04, $fa, $f2, $ea, $f1, $f8, $e1, $e6, $eb
109f6     E8 F7 00 F9 
109fa     E7 F7 09 00 
109fe     09 24 2A 21 
10a02     1F 1C 25 1C | 	byte	$e8, $f7, $00, $f9, $e7, $f7, $09, $00, $09, $24, $2a, $21, $1f, $1c, $25, $1c
10a06     15 0E 19 14 
10a0a     04 13 14 1C 
10a0e     1F 20 26 1F 
10a12     24 1A 1C 21 | 	byte	$15, $0e, $19, $14, $04, $13, $14, $1c, $1f, $20, $26, $1f, $24, $1a, $1c, $21
10a16     1A 13 18 1C 
10a1a     14 0A 00 FF 
10a1e     09 09 F7 F8 
10a22     00 FE 0E 0E | 	byte	$1a, $13, $18, $1c, $14, $0a, $00, $ff, $09, $09, $f7, $f8, $00, $fe, $0e, $0e
10a26     00 F8 FC 09 
10a2a     F7 09 16 14 
10a2e     0C 01 04 04 
10a32     01 F8 F1 00 | 	byte	$00, $f8, $fc, $09, $f7, $09, $16, $14, $0c, $01, $04, $04, $01, $f8, $f1, $00
10a36     F2 E7 F7 ED 
10a3a     F6 F2 EE F7 
10a3e     ED F2 E6 EB 
10a42     F7 EC F0 FC | 	byte	$f2, $e7, $f7, $ed, $f6, $f2, $ee, $f7, $ed, $f2, $e6, $eb, $f7, $ec, $f0, $fc
10a46     00 FC F7 EE 
10a4a     ED FE F3 E8 
10a4e     F0 ED F4 FF 
10a52     07 F2 ED 00 | 	byte	$00, $fc, $f7, $ee, $ed, $fe, $f3, $e8, $f0, $ed, $f4, $ff, $07, $f2, $ed, $00
10a56     04 00 13 2A 
10a5a     25 27 1C 27 
10a5e     21 1F 14 0E 
10a62     1A 04 00 06 | 	byte	$04, $00, $13, $2a, $25, $27, $1c, $27, $21, $1f, $14, $0e, $1a, $04, $00, $06
10a66     02 04 01 03 
10a6a     00 03 00 FD 
10a6e     00 04 FD FC 
10a72     06 01 FD F2 | 	byte	$02, $04, $01, $03, $00, $03, $00, $fd, $00, $04, $fd, $fc, $06, $01, $fd, $f2
10a76     E7 E6 F7 E8 
10a7a     DC EB E4 F6 
10a7e     00 FC F2 F1 
10a82     09 04 03 1E | 	byte	$e7, $e6, $f7, $e8, $dc, $eb, $e4, $f6, $00, $fc, $f2, $f1, $09, $04, $03, $1e
10a86     2B 2D 2A 27 
10a8a     25 27 21 0D 
10a8e     1C 1F 09 13 
10a92     18 1C 22 1E | 	byte	$2b, $2d, $2a, $27, $25, $27, $21, $0d, $1c, $1f, $09, $13, $18, $1c, $22, $1e
10a96     2A 21 2A 1F 
10a9a     18 24 20 15 
10a9e     16 21 1F 15 
10aa2     0D 00 09 0D | 	byte	$2a, $21, $2a, $1f, $18, $24, $20, $15, $16, $21, $1f, $15, $0d, $00, $09, $0d
10aa6     00 FD 00 00 
10aaa     08 18 09 F9 
10aae     00 0F 00 00 
10ab2     18 15 15 09 | 	byte	$00, $fd, $00, $00, $08, $18, $09, $f9, $00, $0f, $00, $00, $18, $15, $15, $09
10ab6     09 06 03 00 
10aba     F1 FE F7 E8 
10abe     F6 F0 F1 EE 
10ac2     EB EC EA E7 | 	byte	$09, $06, $03, $00, $f1, $fe, $f7, $e8, $f6, $f0, $f1, $ee, $eb, $ec, $ea, $e7
10ac6     DE DB ED EC 
10aca     E1 EB F8 FC 
10ace     F3 EE E0 F3 
10ad2     F8 E6 EB E2 | 	byte	$de, $db, $ed, $ec, $e1, $eb, $f8, $fc, $f3, $ee, $e0, $f3, $f8, $e6, $eb, $e2
10ad6     E8 FC 00 F9 
10ada     E8 FC 07 F9 
10ade     00 21 24 25 
10ae2     24 26 21 26 | 	byte	$e8, $fc, $00, $f9, $e8, $fc, $07, $f9, $00, $21, $24, $25, $24, $26, $21, $26
10ae6     14 0E 1E 09 
10aea     09 0C 06 0D 
10aee     04 0D 04 08 
10af2     07 00 00 09 | 	byte	$14, $0e, $1e, $09, $09, $0c, $06, $0d, $04, $0d, $04, $08, $07, $00, $00, $09
10af6     04 F9 00 09 
10afa     06 FE EC EA 
10afe     F7 F7 E0 EC 
10b02     EA EA 00 02 | 	byte	$04, $f9, $00, $09, $06, $fe, $ec, $ea, $f7, $f7, $e0, $ec, $ea, $ea, $00, $02
10b06     00 F0 09 0A 
10b0a     00 13 26 30 
10b0e     2A 26 2A 24 
10b12     2A 14 13 1F | 	byte	$00, $f0, $09, $0a, $00, $13, $26, $30, $2a, $26, $2a, $24, $2a, $14, $13, $1f
10b16     0A 12 18 13 
10b1a     1F 1A 21 1E 
10b1e     21 21 0F 1A 
10b22     1E 14 0C 16 | 	byte	$0a, $12, $18, $13, $1f, $1a, $21, $1e, $21, $21, $0f, $1a, $1e, $14, $0c, $16
10b26     1C 14 0E FC 
10b2a     FD 09 00 FE 
10b2e     F8 F7 FE 09 
10b32     0E 00 F7 09 | 	byte	$1c, $14, $0e, $fc, $fd, $09, $00, $fe, $f8, $f7, $fe, $09, $0e, $00, $f7, $09
10b36     01 F8 0D 10 
10b3a     0E 09 09 01 
10b3e     03 01 F0 00 
10b42     00 F2 F7 F3 | 	byte	$01, $f8, $0d, $10, $0e, $09, $09, $01, $03, $01, $f0, $00, $00, $f2, $f7, $f3
10b46     FA F3 F3 F2 
10b4a     F0 F2 EC E0 
10b4e     EB F3 E8 EB 
10b52     F7 00 FD F7 | 	byte	$fa, $f3, $f3, $f2, $f0, $f2, $ec, $e0, $eb, $f3, $e8, $eb, $f7, $00, $fd, $f7
10b56     EA EB FF ED 
10b5a     ED F2 E5 F3 
10b5e     00 07 F2 F7 
10b62     0A 00 09 18 | 	byte	$ea, $eb, $ff, $ed, $ed, $f2, $e5, $f3, $00, $07, $f2, $f7, $0a, $00, $09, $18
10b66     26 28 20 2A 
10b6a     20 26 1F 09 
10b6e     1E 0E 03 0A 
10b72     06 0E 04 08 | 	byte	$26, $28, $20, $2a, $20, $26, $1f, $09, $1e, $0e, $03, $0a, $06, $0e, $04, $08
10b76     04 04 09 00 
10b7a     FF 00 06 F9 
10b7e     FD 06 01 00 
10b82     F0 E6 EB ED | 	byte	$04, $04, $09, $00, $ff, $00, $06, $f9, $fd, $06, $01, $00, $f0, $e6, $eb, $ed
10b86     E4 DF E1 DB 
10b8a     EA FC 00 E8 
10b8e     F7 07 F7 06 
10b92     19 24 25 21 | 	byte	$e4, $df, $e1, $db, $ea, $fc, $00, $e8, $f7, $07, $f7, $06, $19, $24, $25, $21
10b96     21 1C 26 14 
10b9a     0E 1C 10 0E 
10b9e     15 1C 21 1C 
10ba2     26 25 24 2A | 	byte	$21, $1c, $26, $14, $0e, $1c, $10, $0e, $15, $1c, $21, $1c, $26, $25, $24, $2a
10ba6     1C 1C 25 1F 
10baa     18 19 21 1F 
10bae     1F 0E FF 12 
10bb2     09 00 03 00 | 	byte	$1c, $1c, $25, $1f, $18, $19, $21, $1f, $1f, $0e, $ff, $12, $09, $00, $03, $00
10bb6     00 04 19 0D 
10bba     FD 09 09 00 
10bbe     03 0F 15 09 
10bc2     09 00 00 07 | 	byte	$00, $04, $19, $0d, $fd, $09, $09, $00, $03, $0f, $15, $09, $09, $00, $00, $07
10bc6     EC F7 F9 E8 
10bca     F1 EC F7 F2 
10bce     F0 F3 EC F0 
10bd2     EC E4 E4 F3 | 	byte	$ec, $f7, $f9, $e8, $f1, $ec, $f7, $f2, $f0, $f3, $ec, $f0, $ec, $e4, $e4, $f3
10bd6     EA E6 F1 FC 
10bda     00 F8 EC EB 
10bde     F4 F2 E6 EE 
10be2     E2 EB F7 03 | 	byte	$ea, $e6, $f1, $fc, $00, $f8, $ec, $eb, $f4, $f2, $e6, $ee, $e2, $eb, $f7, $03
10be6     F7 F1 09 00 
10bea     FF 0E 1E 25 
10bee     21 21 1F 24 
10bf2     25 0D 16 14 | 	byte	$f7, $f1, $09, $00, $ff, $0e, $1e, $25, $21, $21, $1f, $24, $25, $0d, $16, $14
10bf6     04 09 08 0F 
10bfa     09 09 0E 06 
10bfe     09 04 00 00 
10c02     08 00 FC 09 | 	byte	$04, $09, $08, $0f, $09, $09, $0e, $06, $09, $04, $00, $00, $08, $00, $fc, $09
10c06     08 09 01 EC 
10c0a     F4 FA F2 EA 
10c0e     E8 E7 E8 FC 
10c12     00 F7 F7 07 | 	byte	$08, $09, $01, $ec, $f4, $fa, $f2, $ea, $e8, $e7, $e8, $fc, $00, $f7, $f7, $07
10c16     01 00 0E 22 
10c1a     20 1C 1F 14 
10c1e     24 14 09 13 
10c22     09 0C 0A 13 | 	byte	$01, $00, $0e, $22, $20, $1c, $1f, $14, $24, $14, $09, $13, $09, $0c, $0a, $13
10c26     1B 19 24 22 
10c2a     21 22 21 19 
10c2e     21 1F 14 13 
10c32     18 21 1A 0E | 	byte	$1b, $19, $24, $22, $21, $22, $21, $19, $21, $1f, $14, $13, $18, $21, $1a, $0e
10c36     FE 07 0C 00 
10c3a     00 FC FE 00 
10c3e     10 12 00 09 
10c42     10 01 03 08 | 	byte	$fe, $07, $0c, $00, $00, $fc, $fe, $00, $10, $12, $00, $09, $10, $01, $03, $08
10c46     14 0E 0A 04 
10c4a     FE 09 F9 F2 
10c4e     FC EE F3 EB 
10c52     F8 F9 F3 F7 | 	byte	$14, $0e, $0a, $04, $fe, $09, $f9, $f2, $fc, $ee, $f3, $eb, $f8, $f9, $f3, $f7
10c56     F3 F3 F0 EC 
10c5a     EA F3 F3 E4 
10c5e     F6 FC 00 01 
10c62     F2 ED F3 F9 | 	byte	$f3, $f3, $f0, $ec, $ea, $f3, $f3, $e4, $f6, $fc, $00, $01, $f2, $ed, $f3, $f9
10c66     ED EC E8 EC 
10c6a     F3 00 00 EB 
10c6e     00 04 FF 01 
10c72     13 1C 1C 21 | 	byte	$ed, $ec, $e8, $ec, $f3, $00, $00, $eb, $00, $04, $ff, $01, $13, $1c, $1c, $21
10c76     14 19 1F 0E 
10c7a     0D 09 06 01 
10c7e     02 04 04 04 
10c82     08 03 04 04 | 	byte	$14, $19, $1f, $0e, $0d, $09, $06, $01, $02, $04, $04, $04, $08, $03, $04, $04
10c86     00 00 06 04 
10c8a     FC FF 09 08 
10c8e     07 F2 ED F8 
10c92     F2 ED E6 EA | 	byte	$00, $00, $06, $04, $fc, $ff, $09, $08, $07, $f2, $ed, $f8, $f2, $ed, $e6, $ea
10c96     E7 F7 06 F7 
10c9a     F7 09 04 03 
10c9e     09 21 27 24 
10ca2     2B 1A 26 25 | 	byte	$e7, $f7, $06, $f7, $f7, $09, $04, $03, $09, $21, $27, $24, $2b, $1a, $26, $25
10ca6     14 1C 0E 13 
10caa     0E 13 1C 1A 
10cae     22 22 25 26 
10cb2     25 1C 1F 2A | 	byte	$14, $1c, $0e, $13, $0e, $13, $1c, $1a, $22, $22, $25, $26, $25, $1c, $1f, $2a
10cb6     15 18 19 1C 
10cba     22 18 04 02 
10cbe     09 01 00 FC 
10cc2     FC FC 06 14 | 	byte	$15, $18, $19, $1c, $22, $18, $04, $02, $09, $01, $00, $fc, $fc, $fc, $06, $14
10cc6     00 00 0D 00 
10cca     FD 00 0E 0D 
10cce     0E 09 FF 06 
10cd2     00 F3 F9 ED | 	byte	$00, $00, $0d, $00, $fd, $00, $0e, $0d, $0e, $09, $ff, $06, $00, $f3, $f9, $ed
10cd6     ED E8 ED F4 
10cda     F0 F3 EE F0 
10cde     F2 E6 E8 EB 
10ce2     F2 E8 E8 F7 | 	byte	$ed, $e8, $ed, $f4, $f0, $f3, $ee, $f0, $f2, $e6, $e8, $eb, $f2, $e8, $e8, $f7
10ce6     F8 04 F8 EC 
10cea     F3 F7 F2 ED 
10cee     F0 E8 EB 00 
10cf2     04 F3 00 04 | 	byte	$f8, $04, $f8, $ec, $f3, $f7, $f2, $ed, $f0, $e8, $eb, $00, $04, $f3, $00, $04
10cf6     02 00 0E 21 
10cfa     1C 2B 1F 1E 
10cfe     2B 1B 19 14 
10d02     0E 0D 04 09 | 	byte	$02, $00, $0e, $21, $1c, $2b, $1f, $1e, $2b, $1b, $19, $14, $0e, $0d, $04, $09
10d06     0D 0E 0A 09 
10d0a     09 10 03 00 
10d0e     0D 04 FF FF 
10d12     04 09 09 00 | 	byte	$0d, $0e, $0a, $09, $09, $10, $03, $00, $0d, $04, $ff, $ff, $04, $09, $09, $00
10d16     EB F7 EE EE 
10d1a     E7 E4 E4 E6 
10d1e     FF FC EB FE 
10d22     00 FF 00 0E | 	byte	$eb, $f7, $ee, $ee, $e7, $e4, $e4, $e6, $ff, $fc, $eb, $fe, $00, $ff, $00, $0e
10d26     1C 1E 27 1A 
10d2a     1E 25 12 15 
10d2e     0E 0D 09 08 
10d32     13 15 1C 1C | 	byte	$1c, $1e, $27, $1a, $1e, $25, $12, $15, $0e, $0d, $09, $08, $13, $15, $1c, $1c
10d36     1F 26 1F 1F 
10d3a     18 22 1B 0E 
10d3e     16 15 21 1F 
10d42     09 03 0D 06 | 	byte	$1f, $26, $1f, $1f, $18, $22, $1b, $0e, $16, $15, $21, $1f, $09, $03, $0d, $06
10d46     00 00 FF F8 
10d4a     00 16 09 00 
10d4e     09 0A 00 00 
10d52     10 0E 13 14 | 	byte	$00, $00, $ff, $f8, $00, $16, $09, $00, $09, $0a, $00, $00, $10, $0e, $13, $14
10d56     06 0E 09 00 
10d5a     FE F7 F4 F2 
10d5e     F1 F7 F8 FA 
10d62     F9 F3 FC F4 | 	byte	$06, $0e, $09, $00, $fe, $f7, $f4, $f2, $f1, $f7, $f8, $fa, $f9, $f3, $fc, $f4
10d66     EC F1 F3 EE 
10d6a     E8 F3 F8 01 
10d6e     01 EC F3 F3 
10d72     F7 F2 EC EB | 	byte	$ec, $f1, $f3, $ee, $e8, $f3, $f8, $01, $01, $ec, $f3, $f3, $f7, $f2, $ec, $eb
10d76     E4 F4 02 EE 
10d7a     F4 FF FF FC 
10d7e     FE 13 13 21 
10d82     1C 15 25 18 | 	byte	$e4, $f4, $02, $ee, $f4, $ff, $ff, $fc, $fe, $13, $13, $21, $1c, $15, $25, $18
10d86     10 0A 06 04 
10d8a     FC 00 01 08 
10d8e     04 04 06 07 
10d92     04 FA 04 06 | 	byte	$10, $0a, $06, $04, $fc, $00, $01, $08, $04, $04, $06, $07, $04, $fa, $04, $06
10d96     FC FD 00 08 
10d9a     0D 04 F1 F8 
10d9e     FA F2 F2 ED 
10da2     E8 E4 FC 00 | 	byte	$fc, $fd, $00, $08, $0d, $04, $f1, $f8, $fa, $f2, $f2, $ed, $e8, $e4, $fc, $00
10da6     F1 F8 03 04 
10daa     00 09 1B 21 
10dae     2B 25 24 2C 
10db2     1F 1C 18 13 | 	byte	$f1, $f8, $03, $04, $00, $09, $1b, $21, $2b, $25, $24, $2c, $1f, $1c, $18, $13
10db6     14 0A 14 19 
10dba     1F 26 1E 27 
10dbe     2A 1F 1A 21 
10dc2     21 14 18 15 | 	byte	$14, $0a, $14, $19, $1f, $26, $1e, $27, $2a, $1f, $1a, $21, $21, $14, $18, $15
10dc6     1C 22 14 08 
10dca     08 09 06 00 
10dce     00 F7 F7 10 
10dd2     06 FF 03 06 | 	byte	$1c, $22, $14, $08, $08, $09, $06, $00, $00, $f7, $f7, $10, $06, $ff, $03, $06
10dd6     01 F7 03 07 
10dda     0D 12 00 08 
10dde     04 FD F9 F2 
10de2     F1 EC EA EC | 	byte	$01, $f7, $03, $07, $0d, $12, $00, $08, $04, $fd, $f9, $f2, $f1, $ec, $ea, $ec
10de6     F3 F7 F7 F2 
10dea     F3 F7 E6 E6 
10dee     F0 EC EA ED 
10df2     F7 FC 09 F2 | 	byte	$f3, $f7, $f7, $f2, $f3, $f7, $e6, $e6, $f0, $ec, $ea, $ed, $f7, $fc, $09, $f2
10df6     F2 FA F7 F7 
10dfa     F1 F2 E6 EB 
10dfe     03 00 F8 01 
10e02     08 01 00 13 | 	byte	$f2, $fa, $f7, $f7, $f1, $f2, $e6, $eb, $03, $00, $f8, $01, $08, $01, $00, $13
10e06     19 24 2A 1C 
10e0a     2B 22 1C 1A 
10e0e     14 10 04 07 
10e12     08 08 13 08 | 	byte	$19, $24, $2a, $1c, $2b, $22, $1c, $1a, $14, $10, $04, $07, $08, $08, $13, $08
10e16     0A 0E 0D 00 
10e1a     FF 08 00 FF 
10e1e     FF 01 09 09 
10e22     F7 F2 F4 F1 | 	byte	$0a, $0e, $0d, $00, $ff, $08, $00, $ff, $ff, $01, $09, $09, $f7, $f2, $f4, $f1
10e26     EC E8 E7 D6 
10e2a     EB F7 EC F1 
10e2e     FA 01 F8 00 
10e32     0E 13 26 1F | 	byte	$ec, $e8, $e7, $d6, $eb, $f7, $ec, $f1, $fa, $01, $f8, $00, $0e, $13, $26, $1f
10e36     1C 26 1F 1A 
10e3a     18 12 0E 0C 
10e3e     09 13 19 21 
10e42     1E 1F 2A 25 | 	byte	$1c, $26, $1f, $1a, $18, $12, $0e, $0c, $09, $13, $19, $21, $1e, $1f, $2a, $25
10e46     1A 1E 21 18 
10e4a     15 19 15 26 
10e4e     1F 09 09 07 
10e52     06 01 00 00 | 	byte	$1a, $1e, $21, $18, $15, $19, $15, $26, $1f, $09, $09, $07, $06, $01, $00, $00
10e56     ED 00 0D 00 
10e5a     03 08 09 FE 
10e5e     02 09 0C 19 
10e62     07 0A 0E 04 | 	byte	$ed, $00, $0d, $00, $03, $08, $09, $fe, $02, $09, $0c, $19, $07, $0a, $0e, $04
10e66     01 FC FE F2 
10e6a     F2 F3 F0 FE 
10e6e     F8 F9 F7 FD 
10e72     F2 E8 F1 F2 | 	byte	$01, $fc, $fe, $f2, $f2, $f3, $f0, $fe, $f8, $f9, $f7, $fd, $f2, $e8, $f1, $f2
10e76     F0 ED F7 FC 
10e7a     07 00 F4 F7 
10e7e     F9 F2 F2 F3 
10e82     EC E6 FC F9 | 	byte	$f0, $ed, $f7, $fc, $07, $00, $f4, $f7, $f9, $f2, $f2, $f3, $ec, $e6, $fc, $f9
10e86     F3 F7 00 00 
10e8a     F8 06 0A 16 
10e8e     1F 16 21 21 
10e92     1A 18 0E 0E | 	byte	$f3, $f7, $00, $00, $f8, $06, $0a, $16, $1f, $16, $21, $21, $1a, $18, $0e, $0e
10e96     08 00 01 00 
10e9a     09 0C 04 09 
10e9e     09 01 FC 03 
10ea2     00 FD 00 FD | 	byte	$08, $00, $01, $00, $09, $0c, $04, $09, $09, $01, $fc, $03, $00, $fd, $00, $fd
10ea6     03 0E 00 F4 
10eaa     F3 F2 EE E7 
10eae     EE DB E0 F8 
10eb2     F2 F3 F8 07 | 	byte	$03, $0e, $00, $f4, $f3, $f2, $ee, $e7, $ee, $db, $e0, $f8, $f2, $f3, $f8, $07
10eb6     00 FF 0E 13 
10eba     2A 2A 21 2B 
10ebe     2A 25 1C 1E 
10ec2     18 14 13 10 | 	byte	$00, $ff, $0e, $13, $2a, $2a, $21, $2b, $2a, $25, $1c, $1e, $18, $14, $13, $10
10ec6     19 21 27 20 
10eca     28 2B 21 1E 
10ece     21 20 18 1B 
10ed2     18 22 2A 0E | 	byte	$19, $21, $27, $20, $28, $2b, $21, $1e, $21, $20, $18, $1b, $18, $22, $2a, $0e
10ed6     09 09 03 00 
10eda     FE 00 F2 FC 
10ede     08 00 00 03 
10ee2     07 FA FC 01 | 	byte	$09, $09, $03, $00, $fe, $00, $f2, $fc, $08, $00, $00, $03, $07, $fa, $fc, $01
10ee6     03 13 09 04 
10eea     0C 01 04 FC 
10eee     FC F7 ED F2 
10ef2     EA F3 F7 F7 | 	byte	$03, $13, $09, $04, $0c, $01, $04, $fc, $fc, $f7, $ed, $f2, $ea, $f3, $f7, $f7
10ef6     F2 F4 F8 E8 
10efa     F0 F0 EC F0 
10efe     ED F3 00 01 
10f02     F7 F2 F3 F3 | 	byte	$f2, $f4, $f8, $e8, $f0, $f0, $ec, $f0, $ed, $f3, $00, $01, $f7, $f2, $f3, $f3
10f06     EC F1 EC E2 
10f0a     F7 FA F8 F3 
10f0e     00 01 F8 00 
10f12     04 13 21 1C | 	byte	$ec, $f1, $ec, $e2, $f7, $fa, $f8, $f3, $00, $01, $f8, $00, $04, $13, $21, $1c
10f16     1E 26 22 1A 
10f1a     19 14 0E 08 
10f1e     04 03 06 10 
10f22     09 09 0E 0D | 	byte	$1e, $26, $22, $1a, $19, $14, $0e, $08, $04, $03, $06, $10, $09, $09, $0e, $0d
10f26     00 02 07 00 
10f2a     00 00 01 10 
10f2e     09 F9 F7 F4 
10f32     F2 EB F0 E2 | 	byte	$00, $02, $07, $00, $00, $00, $01, $10, $09, $f9, $f7, $f4, $f2, $eb, $f0, $e2
10f36     DB F3 F7 F2 
10f3a     F3 00 00 F7 
10f3e     06 08 1C 21 
10f42     1C 27 22 27 | 	byte	$db, $f3, $f7, $f2, $f3, $00, $00, $f7, $06, $08, $1c, $21, $1c, $27, $22, $27
10f46     1C 1C 19 0F 
10f4a     13 0D 0E 18 
10f4e     20 1E 1E 2A 
10f52     1F 1C 1E 1C | 	byte	$1c, $1c, $19, $0f, $13, $0d, $0e, $18, $20, $1e, $1e, $2a, $1f, $1c, $1e, $1c
10f56     16 15 14 19 
10f5a     21 1A 09 06 
10f5e     09 00 00 00 
10f62     F7 F7 06 07 | 	byte	$16, $15, $14, $19, $21, $1a, $09, $06, $09, $00, $00, $00, $f7, $f7, $06, $07
10f66     00 00 0D 00 
10f6a     FE 00 00 15 
10f6e     14 08 0E 0C 
10f72     09 03 00 00 | 	byte	$00, $00, $0d, $00, $fe, $00, $00, $15, $14, $08, $0e, $0c, $09, $03, $00, $00
10f76     F8 F7 F1 F2 
10f7a     FC FA F8 F7 
10f7e     00 F3 EE F6 
10f82     EE ED F0 EB | 	byte	$f8, $f7, $f1, $f2, $fc, $fa, $f8, $f7, $00, $f3, $ee, $f6, $ee, $ed, $f0, $eb
10f86     FE 03 FC F2 
10f8a     F0 F3 E8 ED 
10f8e     EE DE EB F7 
10f92     F8 F2 F8 01 | 	byte	$fe, $03, $fc, $f2, $f0, $f3, $e8, $ed, $ee, $de, $eb, $f7, $f8, $f2, $f8, $01
10f96     F7 FC FD 09 
10f9a     19 18 1C 1A 
10f9e     21 1A 14 13 
10fa2     0A 09 00 00 | 	byte	$f7, $fc, $fd, $09, $19, $18, $1c, $1a, $21, $1a, $14, $13, $0a, $09, $00, $00
10fa6     00 08 06 01 
10faa     09 06 00 00 
10fae     04 FF FD FC 
10fb2     FC 03 09 FF | 	byte	$00, $08, $06, $01, $09, $06, $00, $00, $04, $ff, $fd, $fc, $fc, $03, $09, $ff
10fb6     F4 F4 F2 EA 
10fba     F0 EC DB E8 
10fbe     F7 F4 F2 FE 
10fc2     04 FC 03 03 | 	byte	$f4, $f4, $f2, $ea, $f0, $ec, $db, $e8, $f7, $f4, $f2, $fe, $04, $fc, $03, $03
10fc6     13 28 21 2A 
10fca     2B 2C 2A 21 
10fce     25 1C 1C 15 
10fd2     10 19 22 27 | 	byte	$13, $28, $21, $2a, $2b, $2c, $2a, $21, $25, $1c, $1c, $15, $10, $19, $22, $27
10fd6     24 2C 2B 1F 
10fda     26 25 1C 1C 
10fde     14 16 21 1B 
10fe2     10 04 08 00 | 	byte	$24, $2c, $2b, $1f, $26, $25, $1c, $1c, $14, $16, $21, $1b, $10, $04, $08, $00
10fe6     FA 03 F2 F1 
10fea     FC 03 FF F8 
10fee     08 00 FC FA 
10ff2     FC 06 0A 09 | 	byte	$fa, $03, $f2, $f1, $fc, $03, $ff, $f8, $08, $00, $fc, $fa, $fc, $06, $0a, $09
10ff6     07 0A 09 00 
10ffa     FF FA FA F3 
10ffe     F0 E8 F4 F8 
11002     F2 F7 F8 F7 | 	byte	$07, $0a, $09, $00, $ff, $fa, $fa, $f3, $f0, $e8, $f4, $f8, $f2, $f7, $f8, $f7
11006     EB F2 F2 EB 
1100a     EE EC F7 00 
1100e     FD F7 F0 F3 
11012     EC EB F3 E2 | 	byte	$eb, $f2, $f2, $eb, $ee, $ec, $f7, $00, $fd, $f7, $f0, $f3, $ec, $eb, $f3, $e2
11016     E4 F4 F9 F3 
1101a     F7 04 FA FD 
1101e     00 01 1C 1B 
11022     21 24 22 27 | 	byte	$e4, $f4, $f9, $f3, $f7, $04, $fa, $fd, $00, $01, $1c, $1b, $21, $24, $22, $27
11026     1A 1E 14 14 
1102a     0A 04 03 09 
1102e     12 09 0C 10 
11032     09 06 08 01 | 	byte	$1a, $1e, $14, $14, $0a, $04, $03, $09, $12, $09, $0c, $10, $09, $06, $08, $01
11036     00 00 F9 00 
1103a     08 04 F7 F4 
1103e     F6 E6 EB EC 
11042     DC DF ED F3 | 	byte	$00, $00, $f9, $00, $08, $04, $f7, $f4, $f6, $e6, $eb, $ec, $dc, $df, $ed, $f3
11046     EC F7 00 F8 
1104a     FC FD 00 1A 
1104e     1E 1E 27 27 
11052     2A 21 20 1C | 	byte	$ec, $f7, $00, $f8, $fc, $fd, $00, $1a, $1e, $1e, $27, $27, $2a, $21, $20, $1c
11056     1A 18 0E 13 
1105a     1C 1F 1E 24 
1105e     2A 1F 21 26 
11062     1C 1C 1A 10 | 	byte	$1a, $18, $0e, $13, $1c, $1f, $1e, $24, $2a, $1f, $21, $26, $1c, $1c, $1a, $10
11066     1C 1E 1A 07 
1106a     07 04 FC 04 
1106e     FC F0 FA 00 
11072     02 FA 09 01 | 	byte	$1c, $1e, $1a, $07, $07, $04, $fc, $04, $fc, $f0, $fa, $00, $02, $fa, $09, $01
11076     00 00 F7 09 
1107a     0E 0F 0F 0F 
1107e     15 0D 09 04 
11082     04 00 FC F4 | 	byte	$00, $00, $f7, $09, $0e, $0f, $0f, $0f, $15, $0d, $09, $04, $04, $00, $fc, $f4
11086     F6 00 FC FC 
1108a     00 FD F3 FA 
1108e     F7 F2 F7 F2 
11092     F3 00 03 FA | 	byte	$f6, $00, $fc, $fc, $00, $fd, $f3, $fa, $f7, $f2, $f7, $f2, $f3, $00, $03, $fa
11096     F1 F7 EE EB 
1109a     F3 EC E2 EB 
1109e     F7 F7 F1 FF 
110a2     FC F8 F9 F7 | 	byte	$f1, $f7, $ee, $eb, $f3, $ec, $e2, $eb, $f7, $f7, $f1, $ff, $fc, $f8, $f9, $f7
110a6     09 13 14 1C 
110aa     1E 22 1B 1A 
110ae     13 0E 0C 01 
110b2     00 00 07 04 | 	byte	$09, $13, $14, $1c, $1e, $22, $1b, $1a, $13, $0e, $0c, $01, $00, $00, $07, $04
110b6     06 0D 09 00 
110ba     06 00 FE 00 
110be     F3 FE 03 06 
110c2     FC F2 FA EC | 	byte	$06, $0d, $09, $00, $06, $00, $fe, $00, $f3, $fe, $03, $06, $fc, $f2, $fa, $ec
110c6     F0 F2 E6 E2 
110ca     EB F7 EE F7 
110ce     00 FD 00 FC 
110d2     00 13 1E 1E | 	byte	$f0, $f2, $e6, $e2, $eb, $f7, $ee, $f7, $00, $fd, $00, $fc, $00, $13, $1e, $1e
110d6     25 2D 30 2B 
110da     25 26 20 1C 
110de     18 10 1C 21 
110e2     1C 24 28 20 | 	byte	$25, $2d, $30, $2b, $25, $26, $20, $1c, $18, $10, $1c, $21, $1c, $24, $28, $20
110e6     20 25 1F 1C 
110ea     1A 0E 15 1C 
110ee     1B 0A 04 06 
110f2     FD 03 00 F7 | 	byte	$20, $25, $1f, $1c, $1a, $0e, $15, $1c, $1b, $0a, $04, $06, $fd, $03, $00, $f7
110f6     F7 FD 06 FA 
110fa     03 06 FE 01 
110fe     F6 FD 09 09 
11102     0E 0E 13 0E | 	byte	$f7, $fd, $06, $fa, $03, $06, $fe, $01, $f6, $fd, $09, $09, $0e, $0e, $13, $0e
11106     0A 07 00 01 
1110a     FC F7 F1 FA 
1110e     FC F7 FD FF 
11112     F3 F7 F9 F1 | 	byte	$0a, $07, $00, $01, $fc, $f7, $f1, $fa, $fc, $f7, $fd, $ff, $f3, $f7, $f9, $f1
11116     F7 EE ED F8 
1111a     00 00 F2 F7 
1111e     F2 EB F7 F0 
11122     E6 E6 F7 F7 | 	byte	$f7, $ee, $ed, $f8, $00, $00, $f2, $f7, $f2, $eb, $f7, $f0, $e6, $e6, $f7, $f7
11126     F2 FE FC FC 
1112a     FC F8 00 0F 
1112e     15 1A 1E 24 
11132     22 1C 1A 13 | 	byte	$f2, $fe, $fc, $fc, $fc, $f8, $00, $0f, $15, $1a, $1e, $24, $22, $1c, $1a, $13
11136     0E 0D 00 00 
1113a     06 04 04 0C 
1113e     0D 00 03 03 
11142     FD 00 F7 F6 | 	byte	$0e, $0d, $00, $00, $06, $04, $04, $0c, $0d, $00, $03, $03, $fd, $00, $f7, $f6
11146     00 04 01 F3 
1114a     F8 EC EB F2 
1114e     EC E4 E0 F6 
11152     F0 F1 00 F9 | 	byte	$00, $04, $01, $f3, $f8, $ec, $eb, $f2, $ec, $e4, $e0, $f6, $f0, $f1, $00, $f9
11156     00 FC FC 09 
1115a     19 21 21 2A 
1115e     2B 2C 2A 26 
11162     25 21 1B 10 | 	byte	$00, $fc, $fc, $09, $19, $21, $21, $2a, $2b, $2c, $2a, $26, $25, $21, $1b, $10
11166     16 20 1C 1E 
1116a     28 25 1F 25 
1116e     1F 1C 1C 10 
11172     10 18 1E 0E | 	byte	$16, $20, $1c, $1e, $28, $25, $1f, $25, $1f, $1c, $1c, $10, $10, $18, $1e, $0e
11176     08 09 FD 00 
1117a     04 FC F7 F8 
1117e     00 FD 00 04 
11182     FF 00 FC F4 | 	byte	$08, $09, $fd, $00, $04, $fc, $f7, $f8, $00, $fd, $00, $04, $ff, $00, $fc, $f4
11186     00 08 0E 0D 
1118a     0F 10 09 09 
1118e     01 00 FF F7 
11192     ED F3 F7 F2 | 	byte	$00, $08, $0e, $0d, $0f, $10, $09, $09, $01, $00, $ff, $f7, $ed, $f3, $f7, $f2
11196     F7 FE F4 F1 
1119a     F7 ED F2 EE 
1119e     E6 ED F8 00 
111a2     F2 F3 F2 E8 | 	byte	$f7, $fe, $f4, $f1, $f7, $ed, $f2, $ee, $e6, $ed, $f8, $00, $f2, $f3, $f2, $e8
111a6     F1 F2 EC DF 
111aa     F0 F4 ED F8 
111ae     F8 FC FE F7 
111b2     F8 09 13 18 | 	byte	$f1, $f2, $ec, $df, $f0, $f4, $ed, $f8, $f8, $fc, $fe, $f7, $f8, $09, $13, $18
111b6     1E 21 25 21 
111ba     1E 19 14 12 
111be     06 00 06 09 
111c2     04 0D 10 07 | 	byte	$1e, $21, $25, $21, $1e, $19, $14, $12, $06, $00, $06, $09, $04, $0d, $10, $07
111c6     08 09 00 02 
111ca     FD F7 FC 06 
111ce     07 F9 FD F7 
111d2     ED F7 F1 EC | 	byte	$08, $09, $00, $02, $fd, $f7, $fc, $06, $07, $f9, $fd, $f7, $ed, $f7, $f1, $ec
111d6     E4 F1 F2 EB 
111da     FC F8 FE 00 
111de     F7 00 0E 1C 
111e2     1E 25 2A 2A | 	byte	$e4, $f1, $f2, $eb, $fc, $f8, $fe, $00, $f7, $00, $0e, $1c, $1e, $25, $2a, $2a
111e6     28 26 21 20 
111ea     1B 14 10 1C 
111ee     1B 18 24 26 
111f2     1C 24 1F 1C | 	byte	$28, $26, $21, $20, $1b, $14, $10, $1c, $1b, $18, $24, $26, $1c, $24, $1f, $1c
111f6     1C 14 0E 0F 
111fa     1C 14 09 0D 
111fe     00 FE 01 01 
11202     F7 F6 00 00 | 	byte	$1c, $14, $0e, $0f, $1c, $14, $09, $0d, $00, $fe, $01, $01, $f7, $f6, $00, $00
11206     FE 00 00 01 
1120a     00 F4 FF 08 
1120e     0D 0F 10 18 
11212     10 0E 0D 04 | 	byte	$fe, $00, $00, $01, $00, $f4, $ff, $08, $0d, $0f, $10, $18, $10, $0e, $0d, $04
11216     02 00 F4 F6 
1121a     FC F7 F7 00 
1121e     00 F7 FC F7 
11222     F7 F9 EE ED | 	byte	$02, $00, $f4, $f6, $fc, $f7, $f7, $00, $00, $f7, $fc, $f7, $f7, $f9, $ee, $ed
11226     F7 06 00 FA 
1122a     FD EE F6 F7 
1122e     F3 E7 E8 F8 
11232     ED F7 F7 F7 | 	byte	$f7, $06, $00, $fa, $fd, $ee, $f6, $f7, $f3, $e7, $e8, $f8, $ed, $f7, $f7, $f7
11236     FD F7 F7 FF 
1123a     0E 13 18 1E 
1123e     21 1F 1C 18 
11242     13 0E 06 FE | 	byte	$fd, $f7, $f7, $ff, $0e, $13, $18, $1e, $21, $1f, $1c, $18, $13, $0e, $06, $fe
11246     00 07 01 03 
1124a     0D 04 06 04 
1124e     00 02 FD F3 
11252     F0 FC 04 FA | 	byte	$00, $07, $01, $03, $0d, $04, $06, $04, $00, $02, $fd, $f3, $f0, $fc, $04, $fa
11256     F9 F7 EB EE 
1125a     F3 EE E4 EA 
1125e     F0 ED F7 F7 
11262     F7 00 F8 FE | 	byte	$f9, $f7, $eb, $ee, $f3, $ee, $e4, $ea, $f0, $ed, $f7, $f7, $f7, $00, $f8, $fe
11266     08 14 1E 21 
1126a     2E 30 2B 2A 
1126e     25 24 22 1A 
11272     14 19 1F 1E | 	byte	$08, $14, $1e, $21, $2e, $30, $2b, $2a, $25, $24, $22, $1a, $14, $19, $1f, $1e
11276     24 2E 21 27 
1127a     26 20 25 1A 
1127e     14 0D 1C 1A 
11282     0E 13 04 00 | 	byte	$24, $2e, $21, $27, $26, $20, $25, $1a, $14, $0d, $1c, $1a, $0e, $13, $04, $00
11286     01 06 00 F6 
1128a     00 00 FE 00 
1128e     00 00 00 FA 
11292     F8 03 09 0D | 	byte	$01, $06, $00, $f6, $00, $00, $fe, $00, $00, $00, $00, $fa, $f8, $03, $09, $0d
11296     12 16 14 0E 
1129a     0D 04 04 00 
1129e     F7 EE F8 F7 
112a2     F2 FC FC F7 | 	byte	$12, $16, $14, $0e, $0d, $04, $04, $00, $f7, $ee, $f8, $f7, $f2, $fc, $fc, $f7
112a6     F8 F2 F3 F3 
112aa     EC E6 E6 FC 
112ae     FC F3 F9 EE 
112b2     EC F0 F2 EC | 	byte	$f8, $f2, $f3, $f3, $ec, $e6, $e6, $fc, $fc, $f3, $f9, $ee, $ec, $f0, $f2, $ec
112b6     E4 F2 EC F0 
112ba     F8 F2 FE F7 
112be     F7 FC 06 13 
112c2     13 1E 26 22 | 	byte	$e4, $f2, $ec, $f0, $f8, $f2, $fe, $f7, $f7, $fc, $06, $13, $13, $1e, $26, $22
112c6     20 1B 15 15 
112ca     0E 04 00 09 
112ce     07 03 13 09 
112d2     08 0A 04 06 | 	byte	$20, $1b, $15, $15, $0e, $04, $00, $09, $07, $03, $13, $09, $08, $0a, $04, $06
112d6     01 FE F2 F7 
112da     03 00 FE FC 
112de     F2 ED F3 F3 
112e2     E6 EB F0 ED | 	byte	$01, $fe, $f2, $f7, $03, $00, $fe, $fc, $f2, $ed, $f3, $f3, $e6, $eb, $f0, $ed
112e6     F2 F9 F7 00 
112ea     FE FA 03 0E 
112ee     1A 20 2A 30 
112f2     2E 2E 2A 25 | 	byte	$f2, $f9, $f7, $00, $fe, $fa, $03, $0e, $1a, $20, $2a, $30, $2e, $2e, $2a, $25
112f6     25 1F 14 EB 
112fa     00 00 34 39 
112fe     33 37 4C 5D 
11302     48 0C D0 AC | 	byte	$25, $1f, $14, $eb, $00, $00, $34, $39, $33, $37, $4c, $5d, $48, $0c, $d0, $ac
11306     A5 CF 2E 57 
1130a     36 18 0F 00 
1130e     AC 87 CF 5E 
11312     60 00 88 9F | 	byte	$a5, $cf, $2e, $57, $36, $18, $0f, $00, $ac, $87, $cf, $5e, $60, $00, $88, $9f
11316     FF 7F 60 DB 
1131a     3C 0C 16 30 
1131e     A0 CF 30 E7 
11322     5E 60 D8 D0 | 	byte	$ff, $7f, $60, $db, $3c, $0c, $16, $30, $a0, $cf, $30, $e7, $5e, $60, $d8, $d0
11326     AB E7 D0 CF 
1132a     18 A0 9F BE 
1132e     B7 B8 B7 CF 
11332     C4 E7 00 E7 | 	byte	$ab, $e7, $d0, $cf, $18, $a0, $9f, $be, $b7, $b8, $b7, $cf, $c4, $e7, $00, $e7
11336     D0 FF 00 B7 
1133a     FF 30 0F 00 
1133e     06 D0 CF F4 
11342     D0 B4 88 9F | 	byte	$d0, $ff, $00, $b7, $ff, $30, $0f, $00, $06, $d0, $cf, $f4, $d0, $b4, $88, $9f
11346     AC 81 CF 00 
1134a     C7 A0 9F 06 
1134e     A0 9F D0 87 
11352     A8 CA A0 FF | 	byte	$ac, $81, $cf, $00, $c7, $a0, $9f, $06, $a0, $9f, $d0, $87, $a8, $ca, $a0, $ff
11356     18 FF E8 AC 
1135a     B7 FF 00 BD 
1135e     DC CF F1 B8 
11362     FF 00 CF FF | 	byte	$18, $ff, $e8, $ac, $b7, $ff, $00, $bd, $dc, $cf, $f1, $b8, $ff, $00, $cf, $ff
11366     18 EE D2 F3 
1136a     09 E8 EB B8 
1136e     CF E8 FF 0A 
11372     3C 00 FF 30 | 	byte	$18, $ee, $d2, $f3, $09, $e8, $eb, $b8, $cf, $e8, $ff, $0a, $3c, $00, $ff, $30
11376     10 28 34 5E 
1137a     48 2E 5E 7F 
1137e     60 0A 52 30 
11382     5E 60 3A 36 | 	byte	$10, $28, $34, $5e, $48, $2e, $5e, $7f, $60, $0a, $52, $30, $5e, $60, $3a, $36
11386     3C 2E 5E 6C 
1138a     30 46 3C 5E 
1138e     60 72 30 22 
11392     52 78 3C 5E | 	byte	$3c, $2e, $5e, $6c, $30, $46, $3c, $5e, $60, $72, $30, $22, $52, $78, $3c, $5e
11396     7F 60 46 55 
1139a     48 5E 60 7F 
1139e     7F 7F 4F 7F 
113a2     7F 5E 30 5E | 	byte	$7f, $60, $46, $55, $48, $5e, $60, $7f, $7f, $7f, $4f, $7f, $7f, $5e, $30, $5e
113a6     78 66 30 0A 
113aa     46 30 2E 7F 
113ae     60 5E 60 5E 
113b2     7F 7F 3C 5E | 	byte	$78, $66, $30, $0a, $46, $30, $2e, $7f, $60, $5e, $60, $5e, $7f, $7f, $3c, $5e
113b6     66 76 7F 7F 
113ba     6F 49 7B 30 
113be     46 60 42 46 
113c2     48 52 6A 60 | 	byte	$66, $76, $7f, $7f, $6f, $49, $7b, $30, $46, $60, $42, $46, $48, $52, $6a, $60
113c6     46 46 69 48 
113ca     28 5E 3C 46 
113ce     60 30 3A 3C 
113d2     00 FF 2A 18 | 	byte	$46, $46, $69, $48, $28, $5e, $3c, $46, $60, $30, $3a, $3c, $00, $ff, $2a, $18
113d6     22 36 1E 37 
113da     18 2E 18 10 
113de     2E 48 2A 1E 
113e2     00 FF 2E 30 | 	byte	$22, $36, $1e, $37, $18, $2e, $18, $10, $2e, $48, $2a, $1e, $00, $ff, $2e, $30
113e6     00 EE A0 CF 
113ea     00 DF E7 DC 
113ee     B7 FF 0C EE 
113f2     EA DC E1 FF | 	byte	$00, $ee, $a0, $cf, $00, $df, $e7, $dc, $b7, $ff, $0c, $ee, $ea, $dc, $e1, $ff
113f6     0C FD 12 E8 
113fa     FF 00 E8 BD 
113fe     E1 EE D0 AB 
11402     B7 A0 AB 9C | 	byte	$0c, $fd, $12, $e8, $ff, $00, $e8, $bd, $e1, $ee, $d0, $ab, $b7, $a0, $ab, $9c
11406     C3 C4 A0 B7 
1140a     E8 A0 9F B8 
1140e     BE A0 AC A0 
11412     A9 88 9F AC | 	byte	$c3, $c4, $a0, $b7, $e8, $a0, $9f, $b8, $be, $a0, $ac, $a0, $a9, $88, $9f, $ac
11416     A0 87 C0 A3 
1141a     C9 A0 9F B4 
1141e     AC 80 9F AC 
11422     97 81 B2 88 | 	byte	$a0, $87, $c0, $a3, $c9, $a0, $9f, $b4, $ac, $80, $9f, $ac, $97, $81, $b2, $88
11426     87 80 84 80 
1142a     84 80 80 9F 
1142e     80 80 80 80 
11432     87 80 C7 80 | 	byte	$87, $80, $84, $80, $84, $80, $80, $9f, $80, $80, $80, $80, $87, $80, $c7, $80
11436     93 80 99 A0 
1143a     80 80 80 80 
1143e     93 80 80 80 
11442     80 81 80 80 | 	byte	$93, $80, $99, $a0, $80, $80, $80, $80, $93, $80, $80, $80, $80, $81, $80, $80
11446     93 80 80 80 
1144a     9F 80 80 B8 
1144e     80 80 A0 80 
11452     87 A0 80 81 | 	byte	$93, $80, $80, $80, $9f, $80, $80, $b8, $80, $80, $a0, $80, $87, $a0, $80, $81
11456     80 8E 80 80 
1145a     9D 80 9F 88 
1145e     88 80 99 80 
11462     90 9F 80 9D | 	byte	$80, $8e, $80, $80, $9d, $80, $9f, $88, $88, $80, $99, $80, $90, $9f, $80, $9d
11466     81 9F 80 93 
1146a     94 82 93 A6 
1146e     91 9F 91 97 
11472     9F D5 C4 C4 | 	byte	$81, $9f, $80, $93, $94, $82, $93, $a6, $91, $9f, $91, $97, $9f, $d5, $c4, $c4
11476     BD CA 93 CF 
1147a     A0 B7 B1 AC 
1147e     B1 D3 A0 CF 
11482     D0 CA CA C9 | 	byte	$bd, $ca, $93, $cf, $a0, $b7, $b1, $ac, $b1, $d3, $a0, $cf, $d0, $ca, $ca, $c9
11486     F0 E4 DC C9 
1148a     E7 F4 D0 DB 
1148e     FF 00 D2 F3 
11492     F4 FF FF 06 | 	byte	$f0, $e4, $dc, $c9, $e7, $f4, $d0, $db, $ff, $00, $d2, $f3, $f4, $ff, $ff, $06
11496     0A 16 18 E4 
1149a     2E 18 2E 2E 
1149e     18 F3 52 00 
114a2     FF 25 00 F9 | 	byte	$0a, $16, $18, $e4, $2e, $18, $2e, $2e, $18, $f3, $52, $00, $ff, $25, $00, $f9
114a6     2E 1B 24 0A 
114aa     3C 28 76 30 
114ae     3F 36 2A 46 
114b2     48 48 46 48 | 	byte	$2e, $1b, $24, $0a, $3c, $28, $76, $30, $3f, $36, $2a, $46, $48, $48, $46, $48
114b6     24 2E 5E 60 
114ba     6A 7C 6C 48 
114be     40 46 5E 6C 
114c2     48 58 7F 7F | 	byte	$24, $2e, $5e, $60, $6a, $7c, $6c, $48, $40, $46, $5e, $6c, $48, $58, $7f, $7f
114c6     48 76 6C 60 
114ca     5E 7F 60 7F 
114ce     60 6A 7F 73 
114d2     7F 78 78 60 | 	byte	$48, $76, $6c, $60, $5e, $7f, $60, $7f, $60, $6a, $7f, $73, $7f, $78, $78, $60
114d6     76 7F 7F 7F 
114da     7C 7F 78 7F 
114de     7F 7F 7F 7F 
114e2     70 7F 78 7F | 	byte	$76, $7f, $7f, $7f, $7c, $7f, $78, $7f, $7f, $7f, $7f, $7f, $70, $7f, $78, $7f
114e6     7F 7F 7F 7F 
114ea     7F 7F 7F 7F | 	byte	$7f[8]
114ee     76 7F 7E 7F 
114f2     7F 7F 7F 7F 
114f6     7F 7F 64 7F 
114fa     7F 7F 7F 7F | 	byte	$76, $7f, $7e, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $64, $7f, $7f, $7f, $7f, $7f
114fe     7F 7F 7F 7F 
11502     7F 7F       | 	byte	$7f[6]
11504     79 7F 66 64 
11508     6D 73 7F 7F 
1150c     64 7F 60 6A 
11510     7F 60 70 7F | 	byte	$79, $7f, $66, $64, $6d, $73, $7f, $7f, $64, $7f, $60, $6a, $7f, $60, $70, $7f
11514     76 7F 7F 78 
11518     58 78 60 75 
1151c     6C 46 66 48 
11520     4F 64 58 66 | 	byte	$76, $7f, $7f, $78, $58, $78, $60, $75, $6c, $46, $66, $48, $4f, $64, $58, $66
11524     45 51 5E 60 
11528     3A 5E 4E 40 
1152c     5E 42 3F 3D 
11530     40 4E 30 22 | 	byte	$45, $51, $5e, $60, $3a, $5e, $4e, $40, $5e, $42, $3f, $3d, $40, $4e, $30, $22
11534     42 0C 28 28 
11538     3C 30 1F 40 
1153c     48 43 42 22 
11540     3F 18 22 30 | 	byte	$42, $0c, $28, $28, $3c, $30, $1f, $40, $48, $43, $42, $22, $3f, $18, $22, $30
11544     0C 18 0C 04 
11548     24 DB 1E F3 
1154c     00 FF 0C E7 
11550     12 FC 00 FF | 	byte	$0c, $18, $0c, $04, $24, $db, $1e, $f3, $00, $ff, $0c, $e7, $12, $fc, $00, $ff
11554     00 F3 18 D0 
11558     EE F3 E8 DB 
1155c     E1 D8 E7 E2 
11560     B8 C9 DC C3 | 	byte	$00, $f3, $18, $d0, $ee, $f3, $e8, $db, $e1, $d8, $e7, $e2, $b8, $c9, $dc, $c3
11564     E8 BD D3 D5 
11568     CD DB DC C3 
1156c     CA B7 D0 C3 
11570     BE 9F C7 AB | 	byte	$e8, $bd, $d3, $d5, $cd, $db, $dc, $c3, $ca, $b7, $d0, $c3, $be, $9f, $c7, $ab
11574     C0 B8 88 9F 
11578     C1 A0 C3 D0 
1157c     88 9F B8 A0 
11580     B2 AB A0 9F | 	byte	$c0, $b8, $88, $9f, $c1, $a0, $c3, $d0, $88, $9f, $b8, $a0, $b2, $ab, $a0, $9f
11584     A0 80 82 80 
11588     93 A0 87 94 
1158c     80 87 94 80 
11590     80 87 8D 97 | 	byte	$a0, $80, $82, $80, $93, $a0, $87, $94, $80, $87, $94, $80, $80, $87, $8d, $97
11594     88 8D 9F 97 
11598     90 9C 94 80 
1159c     8B 87 80 87 
115a0     A0 80 91 87 | 	byte	$88, $8d, $9f, $97, $90, $9c, $94, $80, $8b, $87, $80, $87, $a0, $80, $91, $87
115a4     8E 9A 94 84 
115a8     9F A6 80 88 
115ac     80 81 8D 80 
115b0     80 80 80 87 | 	byte	$8e, $9a, $94, $84, $9f, $a6, $80, $88, $80, $81, $8d, $80, $80, $80, $80, $87
115b4     82 80 8D 80 
115b8     80 AC 80 9A 
115bc     9F 90 94 80 
115c0     87 88 80 87 | 	byte	$82, $80, $8d, $80, $80, $ac, $80, $9a, $9f, $90, $94, $80, $87, $88, $80, $87
115c4     9F 94 80 80 
115c8     8E 80 80 80 
115cc     80 AC 8D 94 
115d0     80 80 93 94 | 	byte	$9f, $94, $80, $80, $8e, $80, $80, $80, $80, $ac, $8d, $94, $80, $80, $93, $94
115d4     9F A0 80 AC 
115d8     87 8E 9F AC 
115dc     94 9A 91 93 
115e0     AC A0 93 BE | 	byte	$9f, $a0, $80, $ac, $87, $8e, $9f, $ac, $94, $9a, $91, $93, $ac, $a0, $93, $be
115e4     A0 9C C3 AF 
115e8     A8 BB AF A3 
115ec     AF AB B7 B8 
115f0     AB B2 B7 C0 | 	byte	$a0, $9c, $c3, $af, $a8, $bb, $af, $a3, $af, $ab, $b7, $b8, $ab, $b2, $b7, $c0
115f4     BE C3 D2 BE 
115f8     C3 D0 BD D9 
115fc     DF BE C3 DC 
11600     CF D8 D6 CF | 	byte	$be, $c3, $d2, $be, $c3, $d0, $bd, $d9, $df, $be, $c3, $dc, $cf, $d8, $d6, $cf
11604     EE DF D9 E4 
11608     E4 DE F3 EE 
1160c     E7 00 FF 0C 
11610     F3 18 F3 09 | 	byte	$ee, $df, $d9, $e4, $e4, $de, $f3, $ee, $e7, $00, $ff, $0c, $f3, $18, $f3, $09
11614     06 07 06 FF 
11618     18 0C FF 1C 
1161c     15 1B 27 1F 
11620     1E 28 2B 18 | 	byte	$06, $07, $06, $ff, $18, $0c, $ff, $1c, $15, $1b, $27, $1f, $1e, $28, $2b, $18
11624     2E 48 13 2A 
11628     2E 3C 30 3A 
1162c     48 3D 3F 40 
11630     48 4F 3C 46 | 	byte	$2e, $48, $13, $2a, $2e, $3c, $30, $3a, $48, $3d, $3f, $40, $48, $4f, $3c, $46
11634     5A 48 3A 5B 
11638     5A 5E 60 52 
1163c     61 69 60 6A 
11640     6C 52 66 64 | 	byte	$5a, $48, $3a, $5b, $5a, $5e, $60, $52, $61, $69, $60, $6a, $6c, $52, $66, $64
11644     69 66 6A 6F 
11648     76 7F 7F 78 
1164c     6C 6A 78 64 
11650     7F 7F 78 72 | 	byte	$69, $66, $6a, $6f, $76, $7f, $7f, $78, $6c, $6a, $78, $64, $7f, $7f, $78, $72
11654     7F 7F 78 7B 
11658     7F 7F 7F 7F 
1165c     7F 7F 7F 7E 
11660     7F 7F 7F 7F | 	byte	$7f, $7f, $78, $7b, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7e, $7f, $7f, $7f, $7f
11664     7F 79 7F 7F 
11668     7F 7F 7F 7F 
1166c     7F 7F 7F 7F 
11670     7F 7F 7F 7F | 	byte	$7f, $79, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
11674     7F 7F 7F 7F 
11678     7F 7F 7F 7F 
1167c     7F 7F 7F 7F | 	byte	$7f[12]
11680     7E 7F 7F 7F 
11684     7E 7F 7F 76 
11688     78 76 6C 7F 
1168c     7F 70 7E 78 | 	byte	$7e, $7f, $7f, $7f, $7e, $7f, $7f, $76, $78, $76, $6c, $7f, $7f, $70, $7e, $78
11690     6A 78 67 60 
11694     64 64 6C 7C 
11698     60 5E 78 60 
1169c     64 72 60 5E | 	byte	$6a, $78, $67, $60, $64, $64, $6c, $7c, $60, $5e, $78, $60, $64, $72, $60, $5e
116a0     60 52 66 5A 
116a4     4E 4B 48 3C 
116a8     37 46 30 2E 
116ac     4E 3F 30 37 | 	byte	$60, $52, $66, $5a, $4e, $4b, $48, $3c, $37, $46, $30, $2e, $4e, $3f, $30, $37
116b0     3F 30 2A 2D 
116b4     24 22 3A 3C 
116b8     28 2A 12 22 
116bc     30 1C 24 1F | 	byte	$3f, $30, $2a, $2d, $24, $22, $3a, $3c, $28, $2a, $12, $22, $30, $1c, $24, $1f
116c0     1B 1E 1F 1E 
116c4     0C 00 10 00 
116c8     FF 18 0A 06 
116cc     F4 ED F6 FD | 	byte	$1b, $1e, $1f, $1e, $0c, $00, $10, $00, $ff, $18, $0a, $06, $f4, $ed, $f6, $fd
116d0     F4 F3 EE DC 
116d4     DE E5 E7 E7 
116d8     F9 E8 D8 E1 
116dc     EE E2 D8 ED | 	byte	$f4, $f3, $ee, $dc, $de, $e5, $e7, $e7, $f9, $e8, $d8, $e1, $ee, $e2, $d8, $ed
116e0     E8 D2 CA DB 
116e4     D0 CF D0 C9 
116e8     C4 B8 B7 C9 
116ec     CA BD C9 C7 | 	byte	$e8, $d2, $ca, $db, $d0, $cf, $d0, $c9, $c4, $b8, $b7, $c9, $ca, $bd, $c9, $c7
116f0     BD BA B2 AE 
116f4     A9 AF AC AF 
116f8     A8 B7 AC 9F 
116fc     A0 99 9F A2 | 	byte	$bd, $ba, $b2, $ae, $a9, $af, $ac, $af, $a8, $b7, $ac, $9f, $a0, $99, $9f, $a2
11700     9C 94 8D 94 
11704     9F A0 A0 94 
11708     93 9F 97 9C 
1170c     9A 99 90 88 | 	byte	$9c, $94, $8d, $94, $9f, $a0, $a0, $94, $93, $9f, $97, $9c, $9a, $99, $90, $88
11710     87 91 80 80 
11714     80 80 80 87 
11718     88 87 80 81 
1171c     80 81 80 80 | 	byte	$87, $91, $80, $80, $80, $80, $80, $87, $88, $87, $80, $81, $80, $81, $80, $80
11720     80 80 87 80 
11724     80 80 81 82 
11728     80 80 80 81 
1172c     80 80 93 94 | 	byte	$80, $80, $87, $80, $80, $80, $81, $82, $80, $80, $80, $81, $80, $80, $93, $94
11730     84 87 80 80 
11734     87 8E 93 88 
11738     80 81 85 8D 
1173c     80 87 80 87 | 	byte	$84, $87, $80, $80, $87, $8e, $93, $88, $80, $81, $85, $8d, $80, $87, $80, $87
11740     8B 8E 93 8B 
11744     93 96 8E 93 
11748     9A 9F 99 97 
1174c     97 9A 90 9F | 	byte	$8b, $8e, $93, $8b, $93, $96, $8e, $93, $9a, $9f, $99, $97, $97, $9a, $90, $9f
11750     A0 9F A8 A6 
11754     A5 A8 A8 A8 
11758     A0 9F A3 AB 
1175c     A5 AF B1 AF | 	byte	$a0, $9f, $a8, $a6, $a5, $a8, $a8, $a8, $a0, $9f, $a3, $ab, $a5, $af, $b1, $af
11760     B4 A6 B7 B8 
11764     AB B1 B8 B1 
11768     B7 B8 B7 BA 
1176c     C9 C4 C3 CC | 	byte	$b4, $a6, $b7, $b8, $ab, $b1, $b8, $b1, $b7, $b8, $b7, $ba, $c9, $c4, $c3, $cc
11770     C7 C6 CA C4 
11774     CF C4 CF D0 
11778     DB D0 CF D0 
1177c     E1 D3 DB E4 | 	byte	$c7, $c6, $ca, $c4, $cf, $c4, $cf, $d0, $db, $d0, $cf, $d0, $e1, $d3, $db, $e4
11780     DF DE DC DE 
11784     E4 E2 F3 DC 
11788     E7 E8 ED E8 
1178c     F1 F1 F3 FF | 	byte	$df, $de, $dc, $de, $e4, $e2, $f3, $dc, $e7, $e8, $ed, $e8, $f1, $f1, $f3, $ff
11790     E8 FF 00 FF 
11794     00 FF 01 04 
11798     07 07 13 12 
1179c     0F 0C 0D 10 | 	byte	$e8, $ff, $00, $ff, $00, $ff, $01, $04, $07, $07, $13, $12, $0f, $0c, $0d, $10
117a0     07 16 18 18 
117a4     13 19 19 22 
117a8     27 34 30 22 
117ac     2E 31 2E 30 | 	byte	$07, $16, $18, $18, $13, $19, $19, $22, $27, $34, $30, $22, $2e, $31, $2e, $30
117b0     36 33 37 37 
117b4     37 30 34 30 
117b8     2E 40 36 46 
117bc     51 4B 43 43 | 	byte	$36, $33, $37, $37, $37, $30, $34, $30, $2e, $40, $36, $46, $51, $4b, $43, $43
117c0     4C 4B 4C 5B 
117c4     55 5E 60 52 
117c8     57 4E 52 61 
117cc     60 55 5B 63 | 	byte	$4c, $4b, $4c, $5b, $55, $5e, $60, $52, $57, $4e, $52, $61, $60, $55, $5b, $63
117d0     58 5E 60 5E 
117d4     66 69 6A 6F 
117d8     69 6A 66 67 
117dc     69 60 64 6C | 	byte	$58, $5e, $60, $5e, $66, $69, $6a, $6f, $69, $6a, $66, $67, $69, $60, $64, $6c
117e0     73 73 76 78 
117e4     7C 7F 7B 79 
117e8     78 7B 6D 73 
117ec     78 6C 76 78 | 	byte	$73, $73, $76, $78, $7c, $7f, $7b, $79, $78, $7b, $6d, $73, $78, $6c, $76, $78
117f0     76 72 73 76 
117f4     72 6D 67 70 
117f8     72 7B 78 7C 
117fc     78 78 6D 73 | 	byte	$76, $72, $73, $76, $72, $6d, $67, $70, $72, $7b, $78, $7c, $78, $78, $6d, $73
11800     72 75 78 6F 
11804     70 6F 6F 67 
11808     6A 79 72 67 
1180c     69 6D 6C 67 | 	byte	$72, $75, $78, $6f, $70, $6f, $6f, $67, $6a, $79, $72, $67, $69, $6d, $6c, $67
11810     70 6F 67 6A 
11814     60 64 60 57 
11818     57 5E 5A 5D 
1181c     57 5B 54 58 | 	byte	$70, $6f, $67, $6a, $60, $64, $60, $57, $57, $5e, $5a, $5d, $57, $5b, $54, $58
11820     54 4F 58 54 
11824     51 52 4F 52 
11828     4F 4F 4F 51 
1182c     48 46 48 48 | 	byte	$54, $4f, $58, $54, $51, $52, $4f, $52, $4f, $4f, $4f, $51, $48, $46, $48, $48
11830     3D 3F 3F 3C 
11834     3F 36 37 30 
11838     34 3C 36 33 
1183c     37 30 30 24 | 	byte	$3d, $3f, $3f, $3c, $3f, $36, $37, $30, $34, $3c, $36, $33, $37, $30, $30, $24
11840     27 2B 1E 22 
11844     1E 1E 18 0F 
11848     0D 0C 10 10 
1184c     12 03 06 07 | 	byte	$27, $2b, $1e, $22, $1e, $1e, $18, $0f, $0d, $0c, $10, $10, $12, $03, $06, $07
11850     0F 06 0A 06 
11854     0A 0A 00 F4 
11858     F6 F0 F3 FD 
1185c     F4 F4 EB F0 | 	byte	$0f, $06, $0a, $06, $0a, $0a, $00, $f4, $f6, $f0, $f3, $fd, $f4, $f4, $eb, $f0
11860     EE EE EE E8 
11864     E7 ED E8 E7 
11868     E5 DF E1 DE 
1186c     DF DE D5 D5 | 	byte	$ee, $ee, $ee, $e8, $e7, $ed, $e8, $e7, $e5, $df, $e1, $de, $df, $de, $d5, $d5
11870     D8 DB D3 D8 
11874     D0 C9 C7 C9 
11878     CF D0 CF CF 
1187c     CF C4 C3 C7 | 	byte	$d8, $db, $d3, $d8, $d0, $c9, $c7, $c9, $cf, $d0, $cf, $cf, $cf, $c4, $c3, $c7
11880     BE C0 C1 C1 
11884     C3 C1 C0 BE 
11888     C1 BB BE BB 
1188c     B8 B7 B7 BB | 	byte	$be, $c0, $c1, $c1, $c3, $c1, $c0, $be, $c1, $bb, $be, $bb, $b8, $b7, $b7, $bb
11890     B8 B7 B5 AE 
11894     B1 AF B5 AC 
11898     A8 AB AE B1 
1189c     AC A9 A6 A0 | 	byte	$b8, $b7, $b5, $ae, $b1, $af, $b5, $ac, $a8, $ab, $ae, $b1, $ac, $a9, $a6, $a0
118a0     9F 9D 9F A5 
118a4     A8 AC A3 A5 
118a8     A6 A6 A2 A3 
118ac     A0 9F A8 AB | 	byte	$9f, $9d, $9f, $a5, $a8, $ac, $a3, $a5, $a6, $a6, $a2, $a3, $a0, $9f, $a8, $ab
118b0     B1 AC A6 A6 
118b4     A5 A6 A5 A8 
118b8     A3 A8 A8 A3 
118bc     A8 A2 AB A6 | 	byte	$b1, $ac, $a6, $a6, $a5, $a6, $a5, $a8, $a3, $a8, $a8, $a3, $a8, $a2, $ab, $a6
118c0     A5 A3 9D 9F 
118c4     A9 A8 AB A0 
118c8     9F A8 A2 AB 
118cc     A9 A9 AB AC | 	byte	$a5, $a3, $9d, $9f, $a9, $a8, $ab, $a0, $9f, $a8, $a2, $ab, $a9, $a9, $ab, $ac
118d0     B2 AE B4 AF 
118d4     B1 AE B5 AF 
118d8     AE B7 B2 AF 
118dc     B4 B2 AB B1 | 	byte	$b2, $ae, $b4, $af, $b1, $ae, $b5, $af, $ae, $b7, $b2, $af, $b4, $b2, $ab, $b1
118e0     AF B5 B7 B2 
118e4     B4 B8 BB BD 
118e8     C6 C4 C4 C6 
118ec     C6 C4 C6 C6 | 	byte	$af, $b5, $b7, $b2, $b4, $b8, $bb, $bd, $c6, $c4, $c4, $c6, $c6, $c4, $c6, $c6
118f0     C6 C7 CC CC 
118f4     C7 C9 D0 C7 
118f8     CF CC CD CF 
118fc     D3 D8 E1 DF | 	byte	$c6, $c7, $cc, $cc, $c7, $c9, $d0, $c7, $cf, $cc, $cd, $cf, $d3, $d8, $e1, $df
11900     DE DB DC DF 
11904     DE DB E1 E4 
11908     E7 ED EA E5 
1190c     E7 E5 EA EB | 	byte	$de, $db, $dc, $df, $de, $db, $e1, $e4, $e7, $ed, $ea, $e5, $e7, $e5, $ea, $eb
11910     ED EE EB EB 
11914     F0 F3 F7 F6 
11918     FC FF 00 01 
1191c     00 FA FD 01 | 	byte	$ed, $ee, $eb, $eb, $f0, $f3, $f7, $f6, $fc, $ff, $00, $01, $00, $fa, $fd, $01
11920     01 07 06 07 
11924     04 07 06 09 
11928     0C 0C 0C 0D 
1192c     0F 13 18 18 | 	byte	$01, $07, $06, $07, $04, $07, $06, $09, $0c, $0c, $0c, $0d, $0f, $13, $18, $18
11930     19 18 18 18 
11934     10 19 18 1B 
11938     19 1B 18 19 
1193c     22 1F 21 24 | 	byte	$19, $18, $18, $18, $10, $19, $18, $1b, $19, $1b, $18, $19, $22, $1f, $21, $24
11940     25 28 27 27 
11944     2A 2E 30 30 
11948     30 2A 28 2E 
1194c     2B 31 2B 2B | 	byte	$25, $28, $27, $27, $2a, $2e, $30, $30, $30, $2a, $28, $2e, $2b, $31, $2b, $2b
11950     2B 28 2A 2D 
11954     30 30 30 33 
11958     36 37 36 37 
1195c     34 36 37 39 | 	byte	$2b, $28, $2a, $2d, $30, $30, $30, $33, $36, $37, $36, $37, $34, $36, $37, $39
11960     3A 3C 36 3C 
11964     3C 3C 3A 3C 
11968     39 3D 3C 3C 
1196c     3A 3A 3C 3F | 	byte	$3a, $3c, $36, $3c, $3c, $3c, $3a, $3c, $39, $3d, $3c, $3c, $3a, $3a, $3c, $3f
11970     40 46 43 40 
11974     3F 40 40 3F 
11978     42 3F 40 42 
1197c     42 40 43 46 | 	byte	$40, $46, $43, $40, $3f, $40, $40, $3f, $42, $3f, $40, $42, $42, $40, $43, $46
11980     4C 4B 4E 4B 
11984     49 4F 4B 4B 
11988     48 48 45 48 
1198c     46 48 46 48 | 	byte	$4c, $4b, $4e, $4b, $49, $4f, $4b, $4b, $48, $48, $45, $48, $46, $48, $46, $48
11990     45 48 42 3F 
11994     43 43 46 48 
11998     49 49 49 4B 
1199c     49 48 48 42 | 	byte	$45, $48, $42, $3f, $43, $43, $46, $48, $49, $49, $49, $4b, $49, $48, $48, $42
119a0     43 45 43 42 
119a4     3F 3F 3D 3F 
119a8     45 43 43 3F 
119ac     3F 39 3A 3C | 	byte	$43, $45, $43, $42, $3f, $3f, $3d, $3f, $45, $43, $43, $3f, $3f, $39, $3a, $3c
119b0     3D 3D 40 3F 
119b4     3F 39 3A 3A 
119b8     39 3C 3D 3C 
119bc     36 34 33 31 | 	byte	$3d, $3d, $40, $3f, $3f, $39, $3a, $3a, $39, $3c, $3d, $3c, $36, $34, $33, $31
119c0     33 33 34 36 
119c4     36 31 30 30 
119c8     2D 2A 28 27 
119cc     24 24 24 25 | 	byte	$33, $33, $34, $36, $36, $31, $30, $30, $2d, $2a, $28, $27, $24, $24, $24, $25
119d0     28 28 24 22 
119d4     22 21 21 21 
119d8     22 1F 1F 21 
119dc     1F 22 22 21 | 	byte	$28, $28, $24, $22, $22, $21, $21, $21, $22, $1f, $1f, $21, $1f, $22, $22, $21
119e0     21 1B 19 18 
119e4     12 10 0F 0C 
119e8     0C 0D 0C 0F 
119ec     0F 0D 0F 0C | 	byte	$21, $1b, $19, $18, $12, $10, $0f, $0c, $0c, $0d, $0c, $0f, $0f, $0d, $0f, $0c
119f0     0C 0A 09 06 
119f4     07 06 03 03 
119f8     01 01 01 00 
119fc     00 FF FC FC | 	byte	$0c, $0a, $09, $06, $07, $06, $03, $03, $01, $01, $01, $00, $00, $ff, $fc, $fc
11a00     FA F7 F7 F7 
11a04     F6 F4 F1 F0 
11a08     F3 F3 F6 F1 
11a0c     EB E8 E7 E7 | 	byte	$fa, $f7, $f7, $f7, $f6, $f4, $f1, $f0, $f3, $f3, $f6, $f1, $eb, $e8, $e7, $e7
11a10     E5 E7 E8 E7 
11a14     E5 E4 E4 E5 
11a18     E4 E7 E5 E4 
11a1c     E2 E1 E1 DF | 	byte	$e5, $e7, $e8, $e7, $e5, $e4, $e4, $e5, $e4, $e7, $e5, $e4, $e2, $e1, $e1, $df
11a20     DE DB DB D9 
11a24     D9 DB D9 D6 
11a28     D8 D8 D8 D9 
11a2c     D8 DB D9 DB | 	byte	$de, $db, $db, $d9, $d9, $db, $d9, $d6, $d8, $d8, $d8, $d9, $d8, $db, $d9, $db
11a30     DC DC DE DC 
11a34     D9 D6 D6 D5 
11a38     D5 D5 D6 D3 
11a3c     D3 D0 D0 D0 | 	byte	$dc, $dc, $de, $dc, $d9, $d6, $d6, $d5, $d5, $d5, $d6, $d3, $d3, $d0, $d0, $d0
11a40     CF D0 D2 D2 
11a44     D2 D2 D3 D2 
11a48     D2 D2 D2 D0 
11a4c     D0 CF CF CF | 	byte	$cf, $d0, $d2, $d2, $d2, $d2, $d3, $d2, $d2, $d2, $d2, $d0, $d0, $cf, $cf, $cf
11a50     D2 D3 D2 D2 
11a54     D2 D2 D3 D3 
11a58     D3 D5 D6 D8 
11a5c     D9 D6 D3 D3 | 	byte	$d2, $d3, $d2, $d2, $d2, $d2, $d3, $d3, $d3, $d5, $d6, $d8, $d9, $d6, $d3, $d3
11a60     D3 D5 D6 D6 
11a64     D5 D5 D5 D5 
11a68     D5 D3 D5 D5 
11a6c     D8 D8 D8 D6 | 	byte	$d3, $d5, $d6, $d6, $d5, $d5, $d5, $d5, $d5, $d3, $d5, $d5, $d8, $d8, $d8, $d6
11a70     D6 D6 D5 D5 
11a74     D3 D5 D6 D6 
11a78     D6 D8 D8 D9 
11a7c     D9 D6 D6 D6 | 	byte	$d6, $d6, $d5, $d5, $d3, $d5, $d6, $d6, $d6, $d8, $d8, $d9, $d9, $d6, $d6, $d6
11a80     D8 DB DE DF 
11a84     DF DF DF DF 
11a88     DF DF E1 DF 
11a8c     DF E1 E2 E5 | 	byte	$d8, $db, $de, $df, $df, $df, $df, $df, $df, $df, $e1, $df, $df, $e1, $e2, $e5
11a90     E5 E4 E4 E4 
11a94     E2 E2 DE DF 
11a98     E1 E1 E4 E4 
11a9c     E4 E4 E4 E5 | 	byte	$e5, $e4, $e4, $e4, $e2, $e2, $de, $df, $e1, $e1, $e4, $e4, $e4, $e4, $e4, $e5
11aa0     E7 E8 EA EA 
11aa4     EA ED EE ED 
11aa8     ED EB ED F0 
11aac     F0 F1 F1 F1 | 	byte	$e7, $e8, $ea, $ea, $ea, $ed, $ee, $ed, $ed, $eb, $ed, $f0, $f0, $f1, $f1, $f1
11ab0     F1 F1 F1 F0 
11ab4     EE F0 F0 F0 
11ab8     F1 F1 F1 F1 
11abc     F3 F1 F1 F3 | 	byte	$f1, $f1, $f1, $f0, $ee, $f0, $f0, $f0, $f1, $f1, $f1, $f1, $f3, $f1, $f1, $f3
11ac0     F3 F4 F7 F9 
11ac4     FD FF FF FF 
11ac8     FF 00 00 00 
11acc     FF FF FF FF | 	byte	$f3, $f4, $f7, $f9, $fd, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff
11ad0     FD FC FA FA 
11ad4     FA FC FD FD 
11ad8     FD FD FF 00 
11adc     01 03 03 03 | 	byte	$fd, $fc, $fa, $fa, $fa, $fc, $fd, $fd, $fd, $fd, $ff, $00, $01, $03, $03, $03
11ae0     04 04 07 09 
11ae4     09 0A 0C 0C 
11ae8     0A 0A 09 09 
11aec     09 07 06 03 | 	byte	$04, $04, $07, $09, $09, $0a, $0c, $0c, $0a, $0a, $09, $09, $09, $07, $06, $03
11af0     03 04 06 07 
11af4     0A 0C 0C 0D 
11af8     0D 0C 0A 0A 
11afc     0C 0C 0D 0F | 	byte	$03, $04, $06, $07, $0a, $0c, $0c, $0d, $0d, $0c, $0a, $0a, $0c, $0c, $0d, $0f
11b00     0F 0F 0D 0C 
11b04     0D 0F 0D 0F 
11b08     0F 0F 0F 10 
11b0c     10 10 0F 0F | 	byte	$0f, $0f, $0d, $0c, $0d, $0f, $0d, $0f, $0f, $0f, $0f, $10, $10, $10, $0f, $0f
11b10     0D 0C 0D 0D 
11b14     0D 0F 0D 0C 
11b18     0C 0C 0C 0F 
11b1c     12 13 13 12 | 	byte	$0d, $0c, $0d, $0d, $0d, $0f, $0d, $0c, $0c, $0c, $0c, $0f, $12, $13, $13, $12
11b20     12 12 10 10 
11b24     10 12 13 13 
11b28     13 15 16 18 
11b2c     18 18 18 18 | 	byte	$12, $12, $10, $10, $10, $12, $13, $13, $13, $15, $16, $18, $18, $18, $18, $18
11b30     19 19 18 13 
11b34     13 12 10 10 
11b38     0F 0F 0F 0F 
11b3c     0F 0F 0F 0F | 	byte	$19, $19, $18, $13, $13, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
11b40     0D 0C 0D 0D 
11b44     0F 10 12 10 
11b48     10 0F 0F 0F 
11b4c     0F 0F 10 10 | 	byte	$0d, $0c, $0d, $0d, $0f, $10, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $10, $10
11b50     10 10 12 12 
11b54     10 12 12 10 
11b58     12 12 10 0F 
11b5c     0D 0C 09 09 | 	byte	$10, $10, $12, $12, $10, $12, $12, $10, $12, $12, $10, $0f, $0d, $0c, $09, $09
11b60     0A 0C 0D 0F 
11b64     10 12 12 12 
11b68     0F 0D 0C 0A 
11b6c     0C 0C 0C 0C | 	byte	$0a, $0c, $0d, $0f, $10, $12, $12, $12, $0f, $0d, $0c, $0a, $0c, $0c, $0c, $0c
11b70     0C 09 09 09 
11b74     09 09 09 09 
11b78     09 0A 0A 0C 
11b7c     0C 0C 0C 0C | 	byte	$0c, $09, $09, $09, $09, $09, $09, $09, $09, $0a, $0a, $0c, $0c, $0c, $0c, $0c
11b80     0D 0D 0D 0C 
11b84     0C 0A 09 09 
11b88     09 09 09 09 
11b8c     09 09 09 09 | 	byte	$0d, $0d, $0d, $0c, $0c, $0a, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
11b90     07 06 03 03 
11b94     03 06 06 07 
11b98     07 06 06 06 
11b9c     06 06 04 03 | 	byte	$07, $06, $03, $03, $03, $06, $06, $07, $07, $06, $06, $06, $06, $06, $04, $03
11ba0     03 01 01 00 
11ba4     01 01 01 03 
11ba8     03 06 09 09 
11bac     09 09 06 04 | 	byte	$03, $01, $01, $00, $01, $01, $01, $03, $03, $06, $09, $09, $09, $09, $06, $04
11bb0     03 01 01 01 
11bb4     03 03 03 01 
11bb8     01 01 01 00 
11bbc     00 01 01 01 | 	byte	$03, $01, $01, $01, $03, $03, $03, $01, $01, $01, $01, $00, $00, $01, $01, $01
11bc0     01 03 01 00 
11bc4     00 FD FD FC 
11bc8     FC FC FC FA 
11bcc     F9 FA FC FD | 	byte	$01, $03, $01, $00, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fa, $f9, $fa, $fc, $fd
11bd0     FF 01 03 03 
11bd4     04 04 04 03 
11bd8     00 FD FC FC 
11bdc     FC FC FD FD | 	byte	$ff, $01, $03, $03, $04, $04, $04, $03, $00, $fd, $fc, $fc, $fc, $fc, $fd, $fd
11be0     FD FD FD FC 
11be4     FC FA FA F9 
11be8     F7 F9 FA FC 
11bec     FD FD FC FC | 	byte	$fd, $fd, $fd, $fc, $fc, $fa, $fa, $f9, $f7, $f9, $fa, $fc, $fd, $fd, $fc, $fc
11bf0     FA FA F9 FA 
11bf4     FA FA FC FC 
11bf8     FC FD FD FD 
11bfc     FC FC FA FA | 	byte	$fa, $fa, $f9, $fa, $fa, $fa, $fc, $fc, $fc, $fd, $fd, $fd, $fc, $fc, $fa, $fa
11c00     F7 F6 F6 F6 
11c04     F6 F7 F9 FA 
11c08     FC FD FD FF 
11c0c     FF 00 00 00 | 	byte	$f7, $f6, $f6, $f6, $f6, $f7, $f9, $fa, $fc, $fd, $fd, $ff, $ff, $00, $00, $00
11c10     FF FF 00 00 
11c14     00 00 00 FF 
11c18     FC FA FA F9 
11c1c     F7 F7 F9 F7 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $ff, $fc, $fa, $fa, $f9, $f7, $f7, $f9, $f7
11c20     F7 F7 F9 F9 
11c24     F9 FA FA F9 
11c28     F9 F9 F7 F7 
11c2c     F7 F7 F9 F9 | 	byte	$f7, $f7, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9, $f9
11c30     FA FA FA FA 
11c34     FA FA       | 	byte	$fa[6]
11c36     F9 F9 F7 F7 
11c3a     F7 F9 F9 FA 
11c3e     FA FA F9 F9 
11c42     F9 FA FC FC | 	byte	$f9, $f9, $f7, $f7, $f7, $f9, $f9, $fa, $fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc
11c46     FC FC FC FD 
11c4a     FC FD FD FC 
11c4e     FC FC FD FD 
11c52     FC FA F9 F7 | 	byte	$fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7
11c56     F7 F9 FA FC 
11c5a     FC FC FC FC 
11c5e     FC FC FC FC 
11c62     FA FA F9 F9 | 	byte	$f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9
11c66     F9 F9 F9 F7 
11c6a     F7 F7 F7 F6 
11c6e     F7 F7 F7 F7 
11c72     F7 F7 F7 F7 | 	byte	$f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7
11c76     F7 F9 F9 F9 
11c7a     F9 F9 F9 F9 
11c7e     F9 F9 F9 F7 
11c82     F7 F7 F7 F9 | 	byte	$f7, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9
11c86     FA FC FC FA 
11c8a     FC FC FA FA 
11c8e     FA FA FA FA 
11c92     F9 F7 F7 F7 | 	byte	$fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fa, $f9, $f7, $f7, $f7
11c96     F7 F9 F9 F9 
11c9a     F9 F7 F7 F6 
11c9e     F7 F9 FC 00 
11ca2     F7 F9 F9 FA | 	byte	$f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $fc, $00, $f7, $f9, $f9, $fa
11ca6     FA FA F9 F9 
11caa     F9 FA FC FC 
11cae     FC FC FC FD 
11cb2     FC FD FD FC | 	byte	$fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc
11cb6     FC FC FD FD 
11cba     FC FA F9 F7 
11cbe     F7 F9 FA FC 
11cc2     FC FC FC FC | 	byte	$fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7, $f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc
11cc6     FC FC FC FC 
11cca     FA FA F9 F9 
11cce     F9 F9 F9 F7 
11cd2     F7 F7 F7 F6 | 	byte	$fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6
11cd6     F7 F7 F7 F7 
11cda     F7 F7 F7 F7 
11cde     F7          | 	byte	$f7[9]
11cdf     F9 F9 F9 F9 
11ce3     F9 F9 F9 F9 
11ce7     F9 F9       | 	byte	$f9[10]
11ce9     F7 F7 F7 F7 
11ced     F9 FA FC FC 
11cf1     FA FC FC FA 
11cf5     FA FA FA FA | 	byte	$f7, $f7, $f7, $f7, $f9, $fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa
11cf9     FA F9 F7 F7 
11cfd     F7 F7 F9 F9 
11d01     F9 F9 F7 F7 
11d05     F6 F7 F9 00 | 	byte	$fa, $f9, $f7, $f7, $f7, $f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $00
11d09     00 05 05 08 
11d0d     08 09 0A 0B 
11d11     06 09 09 09 
11d15     09 09 0C 0B | 	byte	$00, $05, $05, $08, $08, $09, $0a, $0b, $06, $09, $09, $09, $09, $09, $0c, $0b
11d19     0B 0A 0F 17 
11d1d     04 10 FF 08 
11d21     F8 F3 08 07 
11d25     F5 FF 10 10 | 	byte	$0b, $0a, $0f, $17, $04, $10, $ff, $08, $f8, $f3, $08, $07, $f5, $ff, $10, $10
11d29     1D 24 00 FF 
11d2d     14 20 0F 12 
11d31     10 20 01 10 
11d35     F0 EE E1 D0 | 	byte	$1d, $24, $00, $ff, $14, $20, $0f, $12, $10, $20, $01, $10, $f0, $ee, $e1, $d0
11d39     D8 F7 D7 F0 
11d3d     FF CB F7 F7 
11d41     F2 FF EB E4 
11d45     0A 0F 20 17 | 	byte	$d8, $f7, $d7, $f0, $ff, $cb, $f7, $f7, $f2, $ff, $eb, $e4, $0a, $0f, $20, $17
11d49     18 32 27 17 
11d4d     1F 30 40 4C 
11d51     24 3C 27 23 
11d55     2C 19 1D 0F | 	byte	$18, $32, $27, $17, $1f, $30, $40, $4c, $24, $3c, $27, $23, $2c, $19, $1d, $0f
11d59     08 28 E7 00 
11d5d     ED E7 F8 F0 
11d61     FD F4 D7 E8 
11d65     DF CF DC D5 | 	byte	$08, $28, $e7, $00, $ed, $e7, $f8, $f0, $fd, $f4, $d7, $e8, $df, $cf, $dc, $d5
11d69     D7 EC 1B 3B 
11d6d     20 25 16 13 
11d71     27 30 40 37 
11d75     30 37 30 24 | 	byte	$d7, $ec, $1b, $3b, $20, $25, $16, $13, $27, $30, $40, $37, $30, $37, $30, $24
11d79     19 E0 F5 EF 
11d7d     E1 FC F0 F2 
11d81     E0 D7 D2 C8 
11d85     CB B5 D6 D5 | 	byte	$19, $e0, $f5, $ef, $e1, $fc, $f0, $f2, $e0, $d7, $d2, $c8, $cb, $b5, $d6, $d5
11d89     EF FB FA 2B 
11d8d     FD 0F 1F 31 
11d91     3D 34 44 37 
11d95     20 33 1B 2F | 	byte	$ef, $fb, $fa, $2b, $fd, $0f, $1f, $31, $3d, $34, $44, $37, $20, $33, $1b, $2f
11d99     38 22 3A 25 
11d9d     31 2A 00 0C 
11da1     00 0F 1B 38 
11da5     23 08 FF F9 | 	byte	$38, $22, $3a, $25, $31, $2a, $00, $0c, $00, $0f, $1b, $38, $23, $08, $ff, $f9
11da9     00 EF F4 F2 
11dad     F7 0A 17 14 
11db1     10 EF ED F2 
11db5     F3 09 11 1B | 	byte	$00, $ef, $f4, $f2, $f7, $0a, $17, $14, $10, $ef, $ed, $f2, $f3, $09, $11, $1b
11db9     10 1F 1C F0 
11dbd     F4 DB DF D9 
11dc1     EE 00 E8 E2 
11dc5     DD D8 D1 C5 | 	byte	$10, $1f, $1c, $f0, $f4, $db, $df, $d9, $ee, $00, $e8, $e2, $dd, $d8, $d1, $c5
11dc9     D4 BF DD E8 
11dcd     FF 04 18 0E 
11dd1     0D 22 2D 34 
11dd5     4F 3D 45 30 | 	byte	$d4, $bf, $dd, $e8, $ff, $04, $18, $0e, $0d, $22, $2d, $34, $4f, $3d, $45, $30
11dd9     1B 36 2A 1C 
11ddd     22 13 2B 28 
11de1     0E 10 FF E6 
11de5     05 09 28 20 | 	byte	$1b, $36, $2a, $1c, $22, $13, $2b, $28, $0e, $10, $ff, $e6, $05, $09, $28, $20
11de9     0C 1B 00 02 
11ded     00 FA FB 0B 
11df1     17 35 34 27 
11df5     1A FE 0F 08 | 	byte	$0c, $1b, $00, $02, $00, $fa, $fb, $0b, $17, $35, $34, $27, $1a, $fe, $0f, $08
11df9     0B 1A 11 23 
11dfd     20 20 02 FA 
11e01     E1 D8 E6 E4 
11e05     FA F7 E7 F0 | 	byte	$0b, $1a, $11, $23, $20, $20, $02, $fa, $e1, $d8, $e6, $e4, $fa, $f7, $e7, $f0
11e09     CE D2 C8 C5 
11e0d     CB CB CF EC 
11e11     FF 02 F4 05 
11e15     F5 11 20 27 | 	byte	$ce, $d2, $c8, $c5, $cb, $cb, $cf, $ec, $ff, $02, $f4, $05, $f5, $11, $20, $27
11e19     4A 28 25 26 
11e1d     10 2F 1D 14 
11e21     1F 20 20 20 
11e25     0C 02 EA E3 | 	byte	$4a, $28, $25, $26, $10, $2f, $1d, $14, $1f, $20, $20, $20, $0c, $02, $ea, $e3
11e29     14 17 0F 18 
11e2d     0B F8 04 FC 
11e31     04 FD 07 2A 
11e35     2D 46 40 26 | 	byte	$14, $17, $0f, $18, $0b, $f8, $04, $fc, $04, $fd, $07, $2a, $2d, $46, $40, $26
11e39     1C 08 14 1A 
11e3d     1B 1B 20 1C 
11e41     10 10 F4 E6 
11e45     D0 D7 F1 E2 | 	byte	$1c, $08, $14, $1a, $1b, $1b, $20, $1c, $10, $10, $f4, $e6, $d0, $d7, $f1, $e2
11e49     F2 F3 E9 E8 
11e4d     D5 CE D8 D7 
11e51     DB DD F7 05 
11e55     15 0E 0E 14 | 	byte	$f2, $f3, $e9, $e8, $d5, $ce, $d8, $d7, $db, $dd, $f7, $05, $15, $0e, $0e, $14
11e59     04 1B 37 36 
11e5d     39 26 19 23 
11e61     1A 15 1F 0B 
11e65     20 16 0D 1A | 	byte	$04, $1b, $37, $36, $39, $26, $19, $23, $1a, $15, $1f, $0b, $20, $16, $0d, $1a
11e69     F8 E0 E6 F1 
11e6d     FD 0D 09 02 
11e71     EC F5 00 EA 
11e75     F3 F8 0B 27 | 	byte	$f8, $e0, $e6, $f1, $fd, $0d, $09, $02, $ec, $f5, $00, $ea, $f3, $f8, $0b, $27
11e79     37 3B 2D 20 
11e7d     1C 17 20 27 
11e81     31 29 2F 20 
11e85     14 0C EA E1 | 	byte	$37, $3b, $2d, $20, $1c, $17, $20, $27, $31, $29, $2f, $20, $14, $0c, $ea, $e1
11e89     E3 DF EF E8 
11e8d     F3 F3 E0 E0 
11e91     CF D7 D1 DD 
11e95     E8 F3 14 0C | 	byte	$e3, $df, $ef, $e8, $f3, $f3, $e0, $e0, $cf, $d7, $d1, $dd, $e8, $f3, $14, $0c
11e99     1D 21 13 1B 
11e9d     1B 32 43 40 
11ea1     2E 2F 20 26 
11ea5     20 15 20 18 | 	byte	$1d, $21, $13, $1b, $1b, $32, $43, $40, $2e, $2f, $20, $26, $20, $15, $20, $18
11ea9     14 23 19 01 
11ead     F0 EA F3 F5 
11eb1     07 12 F6 F3 
11eb5     F1 EA EB E9 | 	byte	$14, $23, $19, $01, $f0, $ea, $f3, $f5, $07, $12, $f6, $f3, $f1, $ea, $eb, $e9
11eb9     EE F1 0D 26 
11ebd     2A 20 13 10 
11ec1     03 0C 1A 1B 
11ec5     25 20 19 14 | 	byte	$ee, $f1, $0d, $26, $2a, $20, $13, $10, $03, $0c, $1a, $1b, $25, $20, $19, $14
11ec9     00 F0 E4 DF 
11ecd     E3 DD E9 F1 
11ed1     F3 E4 DF D8 
11ed5     D4 DA D6 E5 | 	byte	$00, $f0, $e4, $df, $e3, $dd, $e9, $f1, $f3, $e4, $df, $d8, $d4, $da, $d6, $e5
11ed9     F9 03 13 1B 
11edd     1D 24 1C 1F 
11ee1     3B 3B 48 40 
11ee5     2C 2C 25 1E | 	byte	$f9, $03, $13, $1b, $1d, $24, $1c, $1f, $3b, $3b, $48, $40, $2c, $2c, $25, $1e
11ee9     28 21 14 1E 
11eed     1D 21 0A F9 
11ef1     F6 EF FD 13 
11ef5     09 08 FD F9 | 	byte	$28, $21, $14, $1e, $1d, $21, $0a, $f9, $f6, $ef, $fd, $13, $09, $08, $fd, $f9
11ef9     F4 F5 F0 F2 
11efd     F5 0B 28 26 
11f01     23 20 05 06 
11f05     07 0E 1E 12 | 	byte	$f4, $f5, $f0, $f2, $f5, $0b, $28, $26, $23, $20, $05, $06, $07, $0e, $1e, $12
11f09     1B 12 09 FC 
11f0d     E3 E4 D9 D9 
11f11     CE DD E2 DF 
11f15     E6 D5 D0 CE | 	byte	$1b, $12, $09, $fc, $e3, $e4, $d9, $d9, $ce, $dd, $e2, $df, $e6, $d5, $d0, $ce
11f19     C8 CF DC E7 
11f1d     FC 03 0E 20 
11f21     14 17 21 29 
11f25     3F 44 40 3E | 	byte	$c8, $cf, $dc, $e7, $fc, $03, $0e, $20, $14, $17, $21, $29, $3f, $44, $40, $3e
11f29     30 23 31 28 
11f2d     2C 22 29 30 
11f31     21 1A 10 F6 
11f35     FA 03 14 14 | 	byte	$30, $23, $31, $28, $2c, $22, $29, $30, $21, $1a, $10, $f6, $fa, $03, $14, $14
11f39     11 05 FD F8 
11f3d     FA F8 EC F5 
11f41     13 20 2B 2C 
11f45     20 14 05 0B | 	byte	$11, $05, $fd, $f8, $fa, $f8, $ec, $f5, $13, $20, $2b, $2c, $20, $14, $05, $0b
11f49     14 1B 20 20 
11f4d     1E 10 02 F0 
11f51     EE E4 D8 DD 
11f55     DF E2 EA E6 | 	byte	$14, $1b, $20, $20, $1e, $10, $02, $f0, $ee, $e4, $d8, $dd, $df, $e2, $ea, $e6
11f59     DD DC CD CE 
11f5d     CD D7 EE ED 
11f61     FA 0C 0D 10 
11f65     0C 0D 1E 29 | 	byte	$dd, $dc, $cd, $ce, $cd, $d7, $ee, $ed, $fa, $0c, $0d, $10, $0c, $0d, $1e, $29
11f69     31 39 2C 21 
11f6d     1A 1D 20 18 
11f71     1B 24 20 21 
11f75     1A 09 FA F3 | 	byte	$31, $39, $2c, $21, $1a, $1d, $20, $18, $1b, $24, $20, $21, $1a, $09, $fa, $f3
11f79     03 11 1A 18 
11f7d     10 06 FF 07 
11f81     F6 F3 03 12 
11f85     28 2D 36 30 | 	byte	$03, $11, $1a, $18, $10, $06, $ff, $07, $f6, $f3, $03, $12, $28, $2d, $36, $30
11f89     1E 14 15 1A 
11f8d     1E 27 26 25 
11f91     18 04 FD F1 
11f95     E4 DF DD D9 | 	byte	$1e, $14, $15, $1a, $1e, $27, $26, $25, $18, $04, $fd, $f1, $e4, $df, $dd, $d9
11f99     E6 E6 EA E5 
11f9d     DA D4 C7 CF 
11fa1     DF EA EE FF 
11fa5     05 13 12 0D | 	byte	$e6, $e6, $ea, $e5, $da, $d4, $c7, $cf, $df, $ea, $ee, $ff, $05, $13, $12, $0d
11fa9     14 17 27 38 
11fad     39 33 1E 1C 
11fb1     20 18 19 20 
11fb5     19 21 20 18 | 	byte	$14, $17, $27, $38, $39, $33, $1e, $1c, $20, $18, $19, $20, $19, $21, $20, $18
11fb9     0A F6 F2 FB 
11fbd     06 0E 14 04 
11fc1     FC FC F4 ED 
11fc5     EA F4 03 12 | 	byte	$0a, $f6, $f2, $fb, $06, $0e, $14, $04, $fc, $fc, $f4, $ed, $ea, $f4, $03, $12
11fc9     24 2E 26 18 
11fcd     14 0F 16 1B 
11fd1     21 2C 2C 18 
11fd5     10 04 F7 F1 | 	byte	$24, $2e, $26, $18, $14, $0f, $16, $1b, $21, $2c, $2c, $18, $10, $04, $f7, $f1
11fd9     E5 E5 E5 EB 
11fdd     F6 F2 F0 EC 
11fe1     DA CF D9 DF 
11fe5     EF F5 FD 0B | 	byte	$e5, $e5, $e5, $eb, $f6, $f2, $f0, $ec, $da, $cf, $d9, $df, $ef, $f5, $fd, $0b
11fe9     10 12 14 10 
11fed     17 23 36 3E 
11ff1     2A 22 20 15 
11ff5     17 15 17 17 | 	byte	$10, $12, $14, $10, $17, $23, $36, $3e, $2a, $22, $20, $15, $17, $15, $17, $17
11ff9     1C 1D 18 08 
11ffd     F5 F4 F3 FF 
12001     0E 0E 08 00 
12005     FE F4 EB EC | 	byte	$1c, $1d, $18, $08, $f5, $f4, $f3, $ff, $0e, $0e, $08, $00, $fe, $f4, $eb, $ec
12009     F4 FD 0E 25 
1200d     2A 26 1B 10 
12011     0C 11 11 21 
12015     28 20 1B 08 | 	byte	$f4, $fd, $0e, $25, $2a, $26, $1b, $10, $0c, $11, $11, $21, $28, $20, $1b, $08
12019     FE F3 E8 E4 
1201d     DA D9 E2 E5 
12021     E9 F1 E2 D4 
12025     CD D1 DE E7 | 	byte	$fe, $f3, $e8, $e4, $da, $d9, $e2, $e5, $e9, $f1, $e2, $d4, $cd, $d1, $de, $e7
12029     F3 FF 08 13 
1202d     17 19 18 18 
12031     2B 42 40 3C 
12035     33 29 23 24 | 	byte	$f3, $ff, $08, $13, $17, $19, $18, $18, $2b, $42, $40, $3c, $33, $29, $23, $24
12039     1F 21 21 26 
1203d     29 20 10 00 
12041     F4 F6 FF 0D 
12045     0A 08 04 FD | 	byte	$1f, $21, $21, $26, $29, $20, $10, $00, $f4, $f6, $ff, $0d, $0a, $08, $04, $fd
12049     F0 E8 EA EA 
1204d     F5 07 1B 25 
12051     27 1A 13 10 
12055     09 14 20 25 | 	byte	$f0, $e8, $ea, $ea, $f5, $07, $1b, $25, $27, $1a, $13, $10, $09, $14, $20, $25
12059     26 1C 13 04 
1205d     F5 EF E4 DF 
12061     DF DC E3 ED 
12065     ED E8 D4 CA | 	byte	$26, $1c, $13, $04, $f5, $ef, $e4, $df, $df, $dc, $e3, $ed, $ed, $e8, $d4, $ca
12069     CF D6 E1 EC 
1206d     F6 02 09 13 
12071     14 0A 13 23 
12075     32 37 38 2D | 	byte	$cf, $d6, $e1, $ec, $f6, $02, $09, $13, $14, $0a, $13, $23, $32, $37, $38, $2d
12079     29 20 1D 1E 
1207d     1A 1F 26 29 
12081     24 18 09 FA 
12085     FA 07 10 10 | 	byte	$29, $20, $1d, $1e, $1a, $1f, $26, $29, $24, $18, $09, $fa, $fa, $07, $10, $10
12089     14 14 08 FC 
1208d     F6 F4 F1 FD 
12091     0B 1F 2D 2A 
12095     28 20 10 10 | 	byte	$14, $14, $08, $fc, $f6, $f4, $f1, $fd, $0b, $1f, $2d, $2a, $28, $20, $10, $10
12099     14 20 27 25 
1209d     25 14 04 FA 
120a1     E9 E0 DC D5 
120a5     D5 D8 E4 EB | 	byte	$14, $20, $27, $25, $25, $14, $04, $fa, $e9, $e0, $dc, $d5, $d5, $d8, $e4, $eb
120a9     E0 D0 C8 C6 
120ad     D3 D9 E9 F2 
120b1     F9 07 14 10 
120b5     0A 16 21 2F | 	byte	$e0, $d0, $c8, $c6, $d3, $d9, $e9, $f2, $f9, $07, $14, $10, $0a, $16, $21, $2f
120b9     38 36 34 28 
120bd     22 20 18 1A 
120c1     1C 23 27 23 
120c5     17 08 F6 F8 | 	byte	$38, $36, $34, $28, $22, $20, $18, $1a, $1c, $23, $27, $23, $17, $08, $f6, $f8
120c9     FF 05 0A 11 
120cd     10 01 FC F5 
120d1     ED EE F1 05 
120d5     19 25 2C 28 | 	byte	$ff, $05, $0a, $11, $10, $01, $fc, $f5, $ed, $ee, $f1, $05, $19, $25, $2c, $28
120d9     20 14 12 1B 
120dd     23 2B 33 2C 
120e1     20 15 04 F9 
120e5     ED E7 E2 D9 | 	byte	$20, $14, $12, $1b, $23, $2b, $33, $2c, $20, $15, $04, $f9, $ed, $e7, $e2, $d9
120e9     DF EF F0 EA 
120ed     D8 D0 CD D2 
120f1     DB E8 ED F5 
120f5     06 0A 07 06 | 	byte	$df, $ef, $f0, $ea, $d8, $d0, $cd, $d2, $db, $e8, $ed, $f5, $06, $0a, $07, $06
120f9     09 19 21 2D 
120fd     32 2B 23 1B 
12101     12 10 0C 14 
12105     1C 1F 21 1A | 	byte	$09, $19, $21, $2d, $32, $2b, $23, $1b, $12, $10, $0c, $14, $1c, $1f, $21, $1a
12109     06 FA FB FE 
1210d     03 0F 15 11 
12111     0D 02 FB F4 
12115     EC F6 04 13 | 	byte	$06, $fa, $fb, $fe, $03, $0f, $15, $11, $0d, $02, $fb, $f4, $ec, $f6, $04, $13
12119     24 2B 2C 22 
1211d     14 14 10 1A 
12121     26 2D 2A 20 
12125     11 05 F2 EC | 	byte	$24, $2b, $2c, $22, $14, $14, $10, $1a, $26, $2d, $2a, $20, $11, $05, $f2, $ec
12129     E6 DD D8 DD 
1212d     EB F2 E8 E0 
12131     D6 CD D5 E2 
12135     E9 F2 FF 0E | 	byte	$e6, $dd, $d8, $dd, $eb, $f2, $e8, $e0, $d6, $cd, $d5, $e2, $e9, $f2, $ff, $0e
12139     16 10 10 13 
1213d     1D 29 35 38 
12141     34 2C 25 1C 
12145     14 11 15 1A | 	byte	$16, $10, $10, $13, $1d, $29, $35, $38, $34, $2c, $25, $1c, $14, $11, $15, $1a
12149     22 24 18 05 
1214d     FC F6 F4 FB 
12151     07 0D 0E 06 
12155     00 F8 ED E8 | 	byte	$22, $24, $18, $05, $fc, $f6, $f4, $fb, $07, $0d, $0e, $06, $00, $f8, $ed, $e8
12159     EB F7 09 19 
1215d     29 28 1E 17 
12161     10 10 19 22 
12165     2D 2A 23 18 | 	byte	$eb, $f7, $09, $19, $29, $28, $1e, $17, $10, $10, $19, $22, $2d, $2a, $23, $18
12169     08 00 F3 E8 
1216d     E0 D5 DF ED 
12171     EE EC E1 D6 
12175     CF D7 DC E3 | 	byte	$08, $00, $f3, $e8, $e0, $d5, $df, $ed, $ee, $ec, $e1, $d6, $cf, $d7, $dc, $e3
12179     ED FB 08 10 
1217d     0E 0E 0D 1B 
12181     27 31 39 34 
12185     30 28 20 18 | 	byte	$ed, $fb, $08, $10, $0e, $0e, $0d, $1b, $27, $31, $39, $34, $30, $28, $20, $18
12189     13 17 1B 27 
1218d     28 1E 14 06 
12191     FE FB FF 0C 
12195     13 12 0E 08 | 	byte	$13, $17, $1b, $27, $28, $1e, $14, $06, $fe, $fb, $ff, $0c, $13, $12, $0e, $08
12199     01 F4 EF F1 
1219d     F6 05 1B 27 
121a1     28 24 18 11 
121a5     0C 15 22 29 | 	byte	$01, $f4, $ef, $f1, $f6, $05, $1b, $27, $28, $24, $18, $11, $0c, $15, $22, $29
121a9     2A 26 18 0A 
121ad     FD F3 E8 D4 
121b1     CE D7 DF E3 
121b5     E5 DC CD CA | 	byte	$2a, $26, $18, $0a, $fd, $f3, $e8, $d4, $ce, $d7, $df, $e3, $e5, $dc, $cd, $ca
121b9     CD D3 D8 E5 
121bd     F7 02 0E 0E 
121c1     0E 0F 15 27 
121c5     32 37 3A 33 | 	byte	$cd, $d3, $d8, $e5, $f7, $02, $0e, $0e, $0e, $0f, $15, $27, $32, $37, $3a, $33
121c9     2C 20 1B 14 
121cd     13 1D 25 26 
121d1     22 18 0D 00 
121d5     FC FF 0C 12 | 	byte	$2c, $20, $1b, $14, $13, $1d, $25, $26, $22, $18, $0d, $00, $fc, $ff, $0c, $12
121d9     12 11 0C 00 
121dd     F5 F2 EC EF 
121e1     FF 11 20 25 
121e5     24 1C 10 0D | 	byte	$12, $11, $0c, $00, $f5, $f2, $ec, $ef, $ff, $11, $20, $25, $24, $1c, $10, $0d
121e9     17 22 2B 33 
121ed     2A 22 15 0C 
121f1     06 F0 DD DB 
121f5     DC E4 ED E8 | 	byte	$17, $22, $2b, $33, $2a, $22, $15, $0c, $06, $f0, $dd, $db, $dc, $e4, $ed, $e8
121f9     E0 D1 CD D1 
121fd     D0 D5 DF EB 
12201     FB 05 0A 06 
12205     07 0F 19 26 | 	byte	$e0, $d1, $cd, $d1, $d0, $d5, $df, $eb, $fb, $05, $0a, $06, $07, $0f, $19, $26
12209     2D 2E 2C 21 
1220d     1C 10 07 0D 
12211     13 19 1C 1C 
12215     16 0A 03 FC | 	byte	$2d, $2e, $2c, $21, $1c, $10, $07, $0d, $13, $19, $1c, $1c, $16, $0a, $03, $fc
12219     FF 0E 15 1A 
1221d     1D 14 0D 05 
12221     FC F8 FB 06 
12225     19 26 2E 30 | 	byte	$ff, $0e, $15, $1a, $1d, $14, $0d, $05, $fc, $f8, $fb, $06, $19, $26, $2e, $30
12229     20 16 11 12 
1222d     20 29 2D 2A 
12231     1C 13 10 00 
12235     EE DE D5 D5 | 	byte	$20, $16, $11, $12, $20, $29, $2d, $2a, $1c, $13, $10, $00, $ee, $de, $d5, $d5
12239     DE E5 E8 E0 
1223d     D5 D0 D1 D4 
12241     D4 DF EE FE 
12245     0A 0C 0D 0E | 	byte	$de, $e5, $e8, $e0, $d5, $d0, $d1, $d4, $d4, $df, $ee, $fe, $0a, $0c, $0d, $0e
12249     14 20 27 32 
1224d     35 31 2C 20 
12251     15 0C 0C 11 
12255     12 14 12 0C | 	byte	$14, $20, $27, $32, $35, $31, $2c, $20, $15, $0c, $0c, $11, $12, $14, $12, $0c
12259     03 F4 EC F3 
1225d     F9 01 0C 0F 
12261     0C 06 00 F6 
12265     F2 F7 06 13 | 	byte	$03, $f4, $ec, $f3, $f9, $01, $0c, $0f, $0c, $06, $00, $f6, $f2, $f7, $06, $13
12269     1F 30 34 2C 
1226d     20 15 1A 23 
12271     2E 36 2D 25 
12275     1E 16 08 F5 | 	byte	$1f, $30, $34, $2c, $20, $15, $1a, $23, $2e, $36, $2d, $25, $1e, $16, $08, $f5
12279     E7 DC D8 E3 
1227d     E8 EB E3 DA 
12281     D6 D4 D2 D7 
12285     DD EB F7 03 | 	byte	$e7, $dc, $d8, $e3, $e8, $eb, $e3, $da, $d6, $d4, $d2, $d7, $dd, $eb, $f7, $03
12289     0B 07 0B 10 
1228d     16 26 2E 33 
12291     32 2D 22 14 
12295     10 10 0F 14 | 	byte	$0b, $07, $0b, $10, $16, $26, $2e, $33, $32, $2d, $22, $14, $10, $10, $0f, $14
12299     14 13 10 08 
1229d     FA F4 F4 F7 
122a1     03 0F 12 10 
122a5     0A 04 F8 F1 | 	byte	$14, $13, $10, $08, $fa, $f4, $f4, $f7, $03, $0f, $12, $10, $0a, $04, $f8, $f1
122a9     F6 FD 09 1B 
122ad     2B 32 2C 20 
122b1     14 10 1A 2B 
122b5     31 2D 25 20 | 	byte	$f6, $fd, $09, $1b, $2b, $32, $2c, $20, $14, $10, $1a, $2b, $31, $2d, $25, $20
122b9     18 0A 00 E8 
122bd     D9 D4 DE E7 
122c1     E6 E2 E0 D5 
122c5     D4 D1 D6 DC | 	byte	$18, $0a, $00, $e8, $d9, $d4, $de, $e7, $e6, $e2, $e0, $d5, $d4, $d1, $d6, $dc
122c9     EA FA 06 07 
122cd     0D 0E 0E 19 
122d1     27 2D 35 37 
122d5     34 24 18 16 | 	byte	$ea, $fa, $06, $07, $0d, $0e, $0e, $19, $27, $2d, $35, $37, $34, $24, $18, $16
122d9     11 14 19 1A 
122dd     1D 16 0C 04 
122e1     F9 F8 F8 FF 
122e5     0A 10 10 0C | 	byte	$11, $14, $19, $1a, $1d, $16, $0c, $04, $f9, $f8, $f8, $ff, $0a, $10, $10, $0c
122e9     00 F5 F0 F2 
122ed     F6 FF 0F 23 
122f1     2D 28 20 10 
122f5     0D 18 26 32 | 	byte	$00, $f5, $f0, $f2, $f6, $ff, $0f, $23, $2d, $28, $20, $10, $0d, $18, $26, $32
122f9     2F 2B 24 1C 
122fd     14 01 F2 E1 
12301     D9 E0 E5 E9 
12305     E5 E0 D8 CF | 	byte	$2f, $2b, $24, $1c, $14, $01, $f2, $e1, $d9, $e0, $e5, $e9, $e5, $e0, $d8, $cf
12309     CE D3 DA E3 
1230d     EF FE FF 0B 
12311     0B 0D 13 1F 
12315     27 32 37 33 | 	byte	$ce, $d3, $da, $e3, $ef, $fe, $ff, $0b, $0b, $0d, $13, $1f, $27, $32, $37, $33
12319     26 19 0D 0A 
1231d     0C 11 17 17 
12321     14 0D 08 01 
12325     F8 FB 06 0D | 	byte	$26, $19, $0d, $0a, $0c, $11, $17, $17, $14, $0d, $08, $01, $f8, $fb, $06, $0d
12329     17 20 19 10 
1232d     02 FE FD FD 
12331     03 17 27 2D 
12335     30 24 12 09 | 	byte	$17, $20, $19, $10, $02, $fe, $fd, $fd, $03, $17, $27, $2d, $30, $24, $12, $09
12339     12 22 2C 2E 
1233d     29 20 19 16 
12341     05 F0 E0 D7 
12345     D7 E1 E3 E4 | 	byte	$12, $22, $2c, $2e, $29, $20, $19, $16, $05, $f0, $e0, $d7, $d7, $e1, $e3, $e4
12349     D9 D3 CB CB 
1234d     CD D4 E3 EF 
12351     FB 08 0D 11 
12355     13 1E 25 2C | 	byte	$d9, $d3, $cb, $cb, $cd, $d4, $e3, $ef, $fb, $08, $0d, $11, $13, $1e, $25, $2c
12359     3D 40 40 00 
1235d     00 FF FF FE 
12361     FF FF 00 00 
12365     00 01 01 03 | 	byte	$3d, $40, $40, $00, $00, $ff, $ff, $fe, $ff, $ff, $00, $00, $00, $01, $01, $03
12369     03 05 05 05 
1236d     06 09 09 07 
12371     05 02 03 06 
12375     0B 11 13 10 | 	byte	$03, $05, $05, $05, $06, $09, $09, $07, $05, $02, $03, $06, $0b, $11, $13, $10
12379     0E 06 FD F4 
1237d     F3 F0 F0 F2 
12381     FA FF FF FE 
12385     FF FF FF FF | 	byte	$0e, $06, $fd, $f4, $f3, $f0, $f0, $f2, $fa, $ff, $ff, $fe, $ff, $ff, $ff, $ff
12389     FE F6 F0 F0 
1238d     EB EC E4 DE 
12391     DD D5 D4 C9 
12395     CB C9 D4 DD | 	byte	$fe, $f6, $f0, $f0, $eb, $ec, $e4, $de, $dd, $d5, $d4, $c9, $cb, $c9, $d4, $dd
12399     E1 DD DC DD 
1239d     E0 F5 07 17 
123a1     19 18 16 FC 
123a5     EF E2 E5 E4 | 	byte	$e1, $dd, $dc, $dd, $e0, $f5, $07, $17, $19, $18, $16, $fc, $ef, $e2, $e5, $e4
123a9     EE F9 FC FE 
123ad     09 F6 F2 E1 
123b1     CE C3 BE BD 
123b5     C2 CC DA EC | 	byte	$ee, $f9, $fc, $fe, $09, $f6, $f2, $e1, $ce, $c3, $be, $bd, $c2, $cc, $da, $ec
123b9     FD 00 18 1E 
123bd     2B 25 1B 0C 
123c1     03 FF FE F4 
123c5     F0 E2 E0 E6 | 	byte	$fd, $00, $18, $1e, $2b, $25, $1b, $0c, $03, $ff, $fe, $f4, $f0, $e2, $e0, $e6
123c9     F2 01 12 14 
123cd     14 02 EC D1 
123d1     CC CC CA CA 
123d5     CB CC CF C5 | 	byte	$f2, $01, $12, $14, $14, $02, $ec, $d1, $cc, $cc, $ca, $ca, $cb, $cc, $cf, $c5
123d9     BD B7 B8 BD 
123dd     C8 D1 E3 EC 
123e1     F7 02 08 07 
123e5     07 02 F9 FD | 	byte	$bd, $b7, $b8, $bd, $c8, $d1, $e3, $ec, $f7, $02, $08, $07, $07, $02, $f9, $fd
123e9     FB FE 09 17 
123ed     2B 32 38 39 
123f1     36 35 36 34 
123f5     31 2C 19 FF | 	byte	$fb, $fe, $09, $17, $2b, $32, $38, $39, $36, $35, $36, $34, $31, $2c, $19, $ff
123f9     EC E2 D4 DC 
123fd     E0 E7 F0 F8 
12401     01 F9 F7 F2 
12405     EB E9 E9 EC | 	byte	$ec, $e2, $d4, $dc, $e0, $e7, $f0, $f8, $01, $f9, $f7, $f2, $eb, $e9, $e9, $ec
12409     F1 FB FB 05 
1240d     00 F0 E2 D5 
12411     D7 CD CE C6 
12415     C9 CA D4 D8 | 	byte	$f1, $fb, $fb, $05, $00, $f0, $e2, $d5, $d7, $cd, $ce, $c6, $c9, $ca, $d4, $d8
12419     D8 C7 BD B8 
1241d     BE D2 E8 FE 
12421     04 08 07 0C 
12425     16 24 29 2F | 	byte	$d8, $c7, $bd, $b8, $be, $d2, $e8, $fe, $04, $08, $07, $0c, $16, $24, $29, $2f
12429     2E 29 23 0E 
1242d     FE E4 DF CB 
12431     BA B9 B4 B8 
12435     C3 D2 DE E7 | 	byte	$2e, $29, $23, $0e, $fe, $e4, $df, $cb, $ba, $b9, $b4, $b8, $c3, $d2, $de, $e7
12439     ED F2 F8 01 
1243d     07 07 0F 14 
12441     1B 22 21 11 
12445     0F FF 01 0B | 	byte	$ed, $f2, $f8, $01, $07, $07, $0f, $14, $1b, $22, $21, $11, $0f, $ff, $01, $0b
12449     0F 14 12 FD 
1244d     DC C9 AF 9F 
12451     9E 9E A5 B4 
12455     C0 C4 CA CA | 	byte	$0f, $14, $12, $fd, $dc, $c9, $af, $9f, $9e, $9e, $a5, $b4, $c0, $c4, $ca, $ca
12459     D4 D9 E2 EF 
1245d     F4 FB 00 06 
12461     0B 0A 09 04 
12465     00 FE F6 F5 | 	byte	$d4, $d9, $e2, $ef, $f4, $fb, $00, $06, $0b, $0a, $09, $04, $00, $fe, $f6, $f5
12469     F3 FD 05 17 
1246d     28 29 28 23 
12471     19 20 29 37 
12475     35 36 21 0F | 	byte	$f3, $fd, $05, $17, $28, $29, $28, $23, $19, $20, $29, $37, $35, $36, $21, $0f
12479     FD 01 01 0D 
1247d     1D 1D 24 16 
12481     0D FA F3 DC 
12485     C3 BA B7 BE | 	byte	$fd, $01, $01, $0d, $1d, $1d, $24, $16, $0d, $fa, $f3, $dc, $c3, $ba, $b7, $be
12489     CD DF E8 ED 
1248d     E7 EA ED ED 
12491     EE ED E3 DB 
12495     DD DC D9 D9 | 	byte	$cd, $df, $e8, $ed, $e7, $ea, $ed, $ed, $ee, $ed, $e3, $db, $dd, $dc, $d9, $d9
12499     D7 C7 C4 C5 
1249d     C7 DB E6 EA 
124a1     E6 E5 E4 EB 
124a5     F1 FD 0A 1C | 	byte	$d7, $c7, $c4, $c5, $c7, $db, $e6, $ea, $e6, $e5, $e4, $eb, $f1, $fd, $0a, $1c
124a9     2C 2F 2E 2D 
124ad     21 09 F9 E4 
124b1     DE DF E4 E6 
124b5     EE EE EE EE | 	byte	$2c, $2f, $2e, $2d, $21, $09, $f9, $e4, $de, $df, $e4, $e6, $ee, $ee, $ee, $ee
124b9     E4 E4 D9 D8 
124bd     D6 D4 DC F1 
124c1     FC 12 1D 27 
124c5     2A 29 36 3B | 	byte	$e4, $e4, $d9, $d8, $d6, $d4, $dc, $f1, $fc, $12, $1d, $27, $2a, $29, $36, $3b
124c9     37 30 08 E6 
124cd     C3 B0 A0 9F 
124d1     A3 AA B8 C5 
124d5     BC C9 C6 C7 | 	byte	$37, $30, $08, $e6, $c3, $b0, $a0, $9f, $a3, $aa, $b8, $c5, $bc, $c9, $c6, $c7
124d9     C7 C6 C9 D4 
124dd     E3 01 15 27 
124e1     35 38 35 30 
124e5     21 1E 0B 05 | 	byte	$c7, $c6, $c9, $d4, $e3, $01, $15, $27, $35, $38, $35, $30, $21, $1e, $0b, $05
124e9     00 03 05 0A 
124ed     15 08 FD F3 
124f1     F3 F8 01 0C 
124f5     07 05 00 06 | 	byte	$00, $03, $05, $0a, $15, $08, $fd, $f3, $f3, $f8, $01, $0c, $07, $05, $00, $06
124f9     0C 24 3A 41 
124fd     4C 4A 38 2A 
12501     17 F8 E3 CE 
12505     BD B6 BA C5 | 	byte	$0c, $24, $3a, $41, $4c, $4a, $38, $2a, $17, $f8, $e3, $ce, $bd, $b6, $ba, $c5
12509     D5 D0 D0 CF 
1250d     CC CB CE CB 
12511     C4 C7 CC DF 
12515     F0 02 10 10 | 	byte	$d5, $d0, $d0, $cf, $cc, $cb, $ce, $cb, $c4, $c7, $cc, $df, $f0, $02, $10, $10
12519     0A 04 FF FE 
1251d     FE 01 00 EF 
12521     EC E7 E6 E4 
12525     E6 F2 FD 03 | 	byte	$0a, $04, $ff, $fe, $fe, $01, $00, $ef, $ec, $e7, $e6, $e4, $e6, $f2, $fd, $03
12529     FD FD F3 ED 
1252d     E7 E2 DB E6 
12531     F3 FC 11 19 
12535     17 16 0C 03 | 	byte	$fd, $fd, $f3, $ed, $e7, $e2, $db, $e6, $f3, $fc, $11, $19, $17, $16, $0c, $03
12539     FB F3 DC CC 
1253d     C4 C7 CA E1 
12541     ED 03 08 0B 
12545     0D 0F 14 1B | 	byte	$fb, $f3, $dc, $cc, $c4, $c7, $ca, $e1, $ed, $03, $08, $0b, $0d, $0f, $14, $1b
12549     18 0C FD F0 
1254d     E6 E2 E4 EE 
12551     F2 F8 EC E7 
12555     D6 D2 C3 B5 | 	byte	$18, $0c, $fd, $f0, $e6, $e2, $e4, $ee, $f2, $f8, $ec, $e7, $d6, $d2, $c3, $b5
12559     A8 9E AD BD 
1255d     D8 ED FA 0D 
12561     15 1B 2A 27 
12565     24 21 1A 1A | 	byte	$a8, $9e, $ad, $bd, $d8, $ed, $fa, $0d, $15, $1b, $2a, $27, $24, $21, $1a, $1a
12569     1A 21 23 20 
1256d     1B 12 03 F2 
12571     F1 E8 EA E3 
12575     E3 E4 F4 02 | 	byte	$1a, $21, $23, $20, $1b, $12, $03, $f2, $f1, $e8, $ea, $e3, $e3, $e4, $f4, $02
12579     1E 33 4C 53 
1257d     51 51 4A 41 
12581     3C 1D 09 FF 
12585     F2 F0 EE E9 | 	byte	$1e, $33, $4c, $53, $51, $51, $4a, $41, $3c, $1d, $09, $ff, $f2, $f0, $ee, $e9
12589     DF CF C8 BB 
1258d     BF A6 A3 9D 
12591     94 9C A5 B5 
12595     CB DD E9 FB | 	byte	$df, $cf, $c8, $bb, $bf, $a6, $a3, $9d, $94, $9c, $a5, $b5, $cb, $dd, $e9, $fb
12599     FC FE 08 0E 
1259d     18 0F 0F 08 
125a1     01 03 03 08 
125a5     09 0A 02 ED | 	byte	$fc, $fe, $08, $0e, $18, $0f, $0f, $08, $01, $03, $03, $08, $09, $0a, $02, $ed
125a9     DD D4 C7 C2 
125ad     BC BF C9 D6 
125b1     ED FA 0D 1B 
125b5     2C 3A 3A 39 | 	byte	$dd, $d4, $c7, $c2, $bc, $bf, $c9, $d6, $ed, $fa, $0d, $1b, $2c, $3a, $3a, $39
125b9     36 1F 0E FC 
125bd     EE EC F3 FC 
125c1     09 0B 04 F6 
125c5     F4 F2 F3 DF | 	byte	$36, $1f, $0e, $fc, $ee, $ec, $f3, $fc, $09, $0b, $04, $f6, $f4, $f2, $f3, $df
125c9     CA B9 B7 B5 
125cd     C5 D2 EE FD 
125d1     14 08 09 09 
125d5     FE F3 E6 DA | 	byte	$ca, $b9, $b7, $b5, $c5, $d2, $ee, $fd, $14, $08, $09, $09, $fe, $f3, $e6, $da
125d9     D7 D6 CE CF 
125dd     DA D3 D7 E3 
125e1     EB F3 02 04 
125e5     06 06 07 12 | 	byte	$d7, $d6, $ce, $cf, $da, $d3, $d7, $e3, $eb, $f3, $02, $04, $06, $06, $07, $12
125e9     1F 32 47 49 
125ed     4F 44 3C 2F 
125f1     21 14 FE F4 
125f5     F2 F5 01 07 | 	byte	$1f, $32, $47, $49, $4f, $44, $3c, $2f, $21, $14, $fe, $f4, $f2, $f5, $01, $07
125f9     0E 18 26 18 
125fd     10 0A 04 FB 
12601     F5 F5 F3 F6 
12605     00 08 06 FB | 	byte	$0e, $18, $26, $18, $10, $0a, $04, $fb, $f5, $f5, $f3, $f6, $00, $08, $06, $fb
12609     F5 EB E2 DA 
1260d     D5 C7 C2 AA 
12611     A0 96 98 9B 
12615     AC BB CE E0 | 	byte	$f5, $eb, $e2, $da, $d5, $c7, $c2, $aa, $a0, $96, $98, $9b, $ac, $bb, $ce, $e0
12619     F0 FC 0F 1A 
1261d     17 1E 27 2D 
12621     3C 3A 45 46 
12625     46 2D 1C 00 | 	byte	$f0, $fc, $0f, $1a, $17, $1e, $27, $2d, $3c, $3a, $45, $46, $46, $2d, $1c, $00
12629     F6 E9 E2 DA 
1262d     D5 CA C6 CC 
12631     CE CF D4 DA 
12635     E1 E7 F0 F0 | 	byte	$f6, $e9, $e2, $da, $d5, $ca, $c6, $cc, $ce, $cf, $d4, $da, $e1, $e7, $f0, $f0
12639     F2 F0 EE E9 
1263d     F7 F7 06 18 
12641     13 1F 1C 1B 
12645     16 0D EC CD | 	byte	$f2, $f0, $ee, $e9, $f7, $f7, $06, $18, $13, $1f, $1c, $1b, $16, $0d, $ec, $cd
12649     B1 9F A2 A5 
1264d     B5 D7 EE F3 
12651     FD FD 03 11 
12655     15 1C 1B 1B | 	byte	$b1, $9f, $a2, $a5, $b5, $d7, $ee, $f3, $fd, $fd, $03, $11, $15, $1c, $1b, $1b
12659     1A 17 16 09 
1265d     04 05 06 09 
12661     0E 0F FD F4 
12665     EA DA DC DD | 	byte	$1a, $17, $16, $09, $04, $05, $06, $09, $0e, $0f, $fd, $f4, $ea, $da, $dc, $dd
12669     E7 ED FD 05 
1266d     08 0A 1A 23 
12671     21 21 1F 1C 
12675     1C 26 2A 33 | 	byte	$e7, $ed, $fd, $05, $08, $0a, $1a, $23, $21, $21, $1f, $1c, $1c, $26, $2a, $33
12679     3B 33 22 07 
1267d     F2 E2 D4 CC 
12681     CF D7 E6 FA 
12685     08 0A 06 05 | 	byte	$3b, $33, $22, $07, $f2, $e2, $d4, $cc, $cf, $d7, $e6, $fa, $08, $0a, $06, $05
12689     05 0A 0B 06 
1268d     FF F3 E0 C9 
12691     B9 BA BA CA 
12695     D9 EA ED E9 | 	byte	$05, $0a, $0b, $06, $ff, $f3, $e0, $c9, $b9, $ba, $ba, $ca, $d9, $ea, $ed, $e9
12699     E6 F0 ED F4 
1269d     ED ED EE F0 
126a1     FB 00 07 17 
126a5     08 04 FE F9 | 	byte	$e6, $f0, $ed, $f4, $ed, $ed, $ee, $f0, $fb, $00, $07, $17, $08, $04, $fe, $f9
126a9     F4 F7 F6 F7 
126ad     F9 FE FE 04 
126b1     F8 EF E6 DD 
126b5     D7 D7 D8 DB | 	byte	$f4, $f7, $f6, $f7, $f9, $fe, $fe, $04, $f8, $ef, $e6, $dd, $d7, $d7, $d8, $db
126b9     DD E5 E5 ED 
126bd     FE 0A 1C 2E 
126c1     2A 2F 2D 2A 
126c5     22 09 F9 F0 | 	byte	$dd, $e5, $e5, $ed, $fe, $0a, $1c, $2e, $2a, $2f, $2d, $2a, $22, $09, $f9, $f0
126c9     E8 E4 EF F7 
126cd     EB F0 E6 D4 
126d1     D2 D3 D3 D4 
126d5     DE DF E0 EC | 	byte	$e8, $e4, $ef, $f7, $eb, $f0, $e6, $d4, $d2, $d3, $d3, $d4, $de, $df, $e0, $ec
126d9     F5 FF 02 01 
126dd     00 03 05 07 
126e1     07 0A 05 FE 
126e5     FE F4 F3 E8 | 	byte	$f5, $ff, $02, $01, $00, $03, $05, $07, $07, $0a, $05, $fe, $fe, $f4, $f3, $e8
126e9     EA E9 E9 EE 
126ed     F7 0A 1A 28 
126f1     39 44 49 58 
126f5     57 58 50 46 | 	byte	$ea, $e9, $e9, $ee, $f7, $0a, $1a, $28, $39, $44, $49, $58, $57, $58, $50, $46
126f9     32 16 02 FC 
126fd     EF F5 F5 FF 
12701     04 02 02 01 
12705     F0 E6 DB D7 | 	byte	$32, $16, $02, $fc, $ef, $f5, $f5, $ff, $04, $02, $02, $01, $f0, $e6, $db, $d7
12709     D2 D4 D3 D0 
1270d     CF CC C5 C6 
12711     BB C3 CC D0 
12715     DA E2 E3 EE | 	byte	$d2, $d4, $d3, $d0, $cf, $cc, $c5, $c6, $bb, $c3, $cc, $d0, $da, $e2, $e3, $ee
12719     FD 00 0C 0F 
1271d     09 02 F9 F1 
12721     EC F0 F0 F2 
12725     FC 04 12 1F | 	byte	$fd, $00, $0c, $0f, $09, $02, $f9, $f1, $ec, $f0, $f0, $f2, $fc, $04, $12, $1f
12729     31 32 30 2D 
1272d     21 18 06 FD 
12731     F9 F4 F5 FF 
12735     03 02 FC F1 | 	byte	$31, $32, $30, $2d, $21, $18, $06, $fd, $f9, $f4, $f5, $ff, $03, $02, $fc, $f1
12739     DD D5 C8 C1 
1273d     C6 C7 CF D8 
12741     DD EB F4 F8 
12745     FF FE FD FB | 	byte	$dd, $d5, $c8, $c1, $c6, $c7, $cf, $d8, $dd, $eb, $f4, $f8, $ff, $fe, $fd, $fb
12749     F4 F2 E8 E9 
1274d     E2 DB DB DD 
12751     ED EF F9 F6 
12755     F5 F5 F6 00 | 	byte	$f4, $f2, $e8, $e9, $e2, $db, $db, $dd, $ed, $ef, $f9, $f6, $f5, $f5, $f6, $00
12759     03 0A 14 1D 
1275d     25 2A 34 35 
12761     25 23 15 03 
12765     00 FC FB FE | 	byte	$03, $0a, $14, $1d, $25, $2a, $34, $35, $25, $23, $15, $03, $00, $fc, $fb, $fe
12769     09 16 1D 1A 
1276d     18 18 1A 25 
12771     29 2A 29 28 
12775     17 12 02 EF | 	byte	$09, $16, $1d, $1a, $18, $18, $1a, $25, $29, $2a, $29, $28, $17, $12, $02, $ef
12779     EC E5 E0 E7 
1277d     E8 ED F1 F8 
12781     FF 04 00 F8 
12785     F2 EC EC DF | 	byte	$ec, $e5, $e0, $e7, $e8, $ed, $f1, $f8, $ff, $04, $00, $f8, $f2, $ec, $ec, $df
12789     D7 D3 C9 CA 
1278d     C7 C6 C9 D9 
12791     DE F1 FE 02 
12795     08 07 07 06 | 	byte	$d7, $d3, $c9, $ca, $c7, $c6, $c9, $d9, $de, $f1, $fe, $02, $08, $07, $07, $06
12799     07 0C 1B 1D 
1279d     1F 20 1B 1B 
127a1     06 EC E3 DE 
127a5     E4 EB F5 FD | 	byte	$07, $0c, $1b, $1d, $1f, $20, $1b, $1b, $06, $ec, $e3, $de, $e4, $eb, $f5, $fd
127a9     02 00 03 05 
127ad     03 01 FE F4 
127b1     F5 F2 F0 F0 
127b5     E8 E3 DE D8 | 	byte	$02, $00, $03, $05, $03, $01, $fe, $f4, $f5, $f2, $f0, $f0, $e8, $e3, $de, $d8
127b9     D2 D0 D3 D3 
127bd     D8 D7 E2 E3 
127c1     EE ED F4 03 
127c5     19 28 2B 2D | 	byte	$d2, $d0, $d3, $d3, $d8, $d7, $e2, $e3, $ee, $ed, $f4, $03, $19, $28, $2b, $2d
127c9     28 17 0A F4 
127cd     E2 E0 E0 EC 
127d1     FA 08 15 13 
127d5     27 23 19 13 | 	byte	$28, $17, $0a, $f4, $e2, $e0, $e0, $ec, $fa, $08, $15, $13, $27, $23, $19, $13
127d9     0D FF 01 FE 
127dd     FB FA F7 F5 
127e1     E8 E9 E6 E3 
127e5     E3 E4 EB F1 | 	byte	$0d, $ff, $01, $fe, $fb, $fa, $f7, $f5, $e8, $e9, $e6, $e3, $e3, $e4, $eb, $f1
127e9     FB 00 06 0B 
127ed     11 1C 31 46 
127f1     4C 48 3D 29 
127f5     17 F8 EA E2 | 	byte	$fb, $00, $06, $0b, $11, $1c, $31, $46, $4c, $48, $3d, $29, $17, $f8, $ea, $e2
127f9     E4 EE FE 0F 
127fd     18 23 21 23 
12801     24 10 0D 08 
12805     02 FE 01 00 | 	byte	$e4, $ee, $fe, $0f, $18, $23, $21, $23, $24, $10, $0d, $08, $02, $fe, $01, $00
12809     00 00 F0 E6 
1280d     D8 CB C4 C0 
12811     C2 C7 CB CF 
12815     D9 D9 DE ED | 	byte	$00, $00, $f0, $e6, $d8, $cb, $c4, $c0, $c2, $c7, $cb, $cf, $d9, $d9, $de, $ed
12819     FC 00 07 07 
1281d     07 F7 F4 DB 
12821     CB CF D7 E6 
12825     03 12 1D 27 | 	byte	$fc, $00, $07, $07, $07, $f7, $f4, $db, $cb, $cf, $d7, $e6, $03, $12, $1d, $27
12829     25 20 1F 0D 
1282d     08 01 03 06 
12831     10 0D 0B 00 
12835     F8 EA E3 D5 | 	byte	$25, $20, $1f, $0d, $08, $01, $03, $06, $10, $0d, $0b, $00, $f8, $ea, $e3, $d5
12839     D3 D3 D0 DA 
1283d     E3 F5 0C 02 
12841     02 03 0B 19 
12845     1C 18 18 06 | 	byte	$d3, $d3, $d0, $da, $e3, $f5, $0c, $02, $02, $03, $0b, $19, $1c, $18, $18, $06
12849     FC E0 D0 CD 
1284d     C8 CC D8 E3 
12851     E9 F2 F8 F6 
12855     FE FA F5 F6 | 	byte	$fc, $e0, $d0, $cd, $c8, $cc, $d8, $e3, $e9, $f2, $f8, $f6, $fe, $fa, $f5, $f6
12859     F9 00 09 0F 
1285d     18 18 18 16 
12861     0C 06 01 03 
12865     08 17 19 22 | 	byte	$f9, $00, $09, $0f, $18, $18, $18, $16, $0c, $06, $01, $03, $08, $17, $19, $22
12869     1B 1C 12 1E 
1286d     2D 3A 4E 56 
12871     53 43 3C 1F 
12875     02 F0 E6 E2 | 	byte	$1b, $1c, $12, $1e, $2d, $3a, $4e, $56, $53, $43, $3c, $1f, $02, $f0, $e6, $e2
12879     E0 F0 F4 03 
1287d     08 12 0D 08 
12881     FF F7 F2 E1 
12885     DA D5 D3 CE | 	byte	$e0, $f0, $f4, $03, $08, $12, $0d, $08, $ff, $f7, $f2, $e1, $da, $d5, $d3, $ce
12889     CE CB C6 C0 
1288d     BB BD C2 D1 
12891     D5 E4 EB F3 
12895     F2 F7 00 08 | 	byte	$ce, $cb, $c6, $c0, $bb, $bd, $c2, $d1, $d5, $e4, $eb, $f3, $f2, $f7, $00, $08
12899     1C 1E 27 25 
1289d     1B F7 E5 D5 
128a1     DB EC FE 15 
128a5     2E 3D 46 4B | 	byte	$1c, $1e, $27, $25, $1b, $f7, $e5, $d5, $db, $ec, $fe, $15, $2e, $3d, $46, $4b
128a9     4A 38 2E 1E 
128ad     11 04 00 F4 
128b1     EC E8 E6 DA 
128b5     D6 C7 C2 B8 | 	byte	$4a, $38, $2e, $1e, $11, $04, $00, $f4, $ec, $e8, $e6, $da, $d6, $c7, $c2, $b8
128b9     AA AF B1 C2 
128bd     D1 DB D3 DC 
128c1     EB EF 04 12 
128c5     17 1D 1F 0D | 	byte	$aa, $af, $b1, $c2, $d1, $db, $d3, $dc, $eb, $ef, $04, $12, $17, $1d, $1f, $0d
128c9     03 F9 F6 F7 
128cd     F7 06 0B 14 
128d1     19 18 0E FF 
128d5     FC FB FD 04 | 	byte	$03, $f9, $f6, $f7, $f7, $06, $0b, $14, $19, $18, $0e, $ff, $fc, $fb, $fd, $04
128d9     0A 14 18 1A 
128dd     21 1F 12 07 
128e1     02 01 FE 00 
128e5     0B 16 21 24 | 	byte	$0a, $14, $18, $1a, $21, $1f, $12, $07, $02, $01, $fe, $00, $0b, $16, $21, $24
128e9     21 20 20 2A 
128ed     29 29 1E 10 
128f1     07 EB D6 CE 
128f5     BF C1 C2 D3 | 	byte	$21, $20, $20, $2a, $29, $29, $1e, $10, $07, $eb, $d6, $ce, $bf, $c1, $c2, $d3
128f9     E7 FE 14 2A 
128fd     2F 2E 2E 2E 
12901     26 1F 16 0E 
12905     05 00 FA EE | 	byte	$e7, $fe, $14, $2a, $2f, $2e, $2e, $2e, $26, $1f, $16, $0e, $05, $00, $fa, $ee
12909     DE D5 CD CC 
1290d     CF E0 E5 EF 
12911     FD 02 FC F3 
12915     F3 FB 00 06 | 	byte	$de, $d5, $cd, $cc, $cf, $e0, $e5, $ef, $fd, $02, $fc, $f3, $f3, $fb, $00, $06
12919     05 06 05 F4 
1291d     E6 E2 D7 DC 
12921     E7 ED F7 02 
12925     07 0E 0D 08 | 	byte	$05, $06, $05, $f4, $e6, $e2, $d7, $dc, $e7, $ed, $f7, $02, $07, $0e, $0d, $08
12929     06 05 F9 FB 
1292d     F1 ED ED ED 
12931     EE F3 F3 F2 
12935     E7 D9 D7 D1 | 	byte	$06, $05, $f9, $fb, $f1, $ed, $ed, $ed, $ee, $f3, $f3, $f2, $e7, $d9, $d7, $d1
12939     D7 E8 F2 F6 
1293d     E8 E4 E6 00 
12941     0F 21 36 38 
12945     3F 32 1D 14 | 	byte	$d7, $e8, $f2, $f6, $e8, $e4, $e6, $00, $0f, $21, $36, $38, $3f, $32, $1d, $14
12949     04 FC FD FA 
1294d     FF 06 05 15 
12951     0C 05 06 01 
12955     00 FE F3 F2 | 	byte	$04, $fc, $fd, $fa, $ff, $06, $05, $15, $0c, $05, $06, $01, $00, $fe, $f3, $f2
12959     E0 DE DF DF 
1295d     E0 E3 E5 E3 
12961     E6 EB F7 0E 
12965     20 30 33 34 | 	byte	$e0, $de, $df, $df, $e0, $e3, $e5, $e3, $e6, $eb, $f7, $0e, $20, $30, $33, $34
12969     37 47 4B 51 
1296d     44 3E 2E 0C 
12971     FA DE D0 C9 
12975     D1 E2 F6 1A | 	byte	$37, $47, $4b, $51, $44, $3e, $2e, $0c, $fa, $de, $d0, $c9, $d1, $e2, $f6, $1a
12979     2E 43 48 3E 
1297d     34 24 1D 10 
12981     09 01 F9 F0 
12985     F2 EB EC EC | 	byte	$2e, $43, $48, $3e, $34, $24, $1d, $10, $09, $01, $f9, $f0, $f2, $eb, $ec, $ec
12989     E4 D6 D6 C4 
1298d     BB BD BE BD 
12991     BC B9 BC CD 
12995     DA E8 F4 F8 | 	byte	$e4, $d6, $d6, $c4, $bb, $bd, $be, $bd, $bc, $b9, $bc, $cd, $da, $e8, $f4, $f8
12999     FE FB F9 F6 
1299d     F9 FE 08 16 
129a1     22 2C 39 37 
129a5     35 24 15 07 | 	byte	$fe, $fb, $f9, $f6, $f9, $fe, $08, $16, $22, $2c, $39, $37, $35, $24, $15, $07
129a9     04 02 02 05 
129ad     07 09 07 09 
129b1     07 F8 EA D8 
129b5     D1 C9 D0 DB | 	byte	$04, $02, $02, $05, $07, $09, $07, $09, $07, $f8, $ea, $d8, $d1, $c9, $d0, $db
129b9     ED EE EE EE 
129bd     F3 FC 07 0F 
129c1     0F 0A 01 ED 
129c5     E1 D5 D7 D7 | 	byte	$ed, $ee, $ee, $ee, $f3, $fc, $07, $0f, $0f, $0a, $01, $ed, $e1, $d5, $d7, $d7
129c9     D9 E1 EA F2 
129cd     05 0D 13 14 
129d1     16 17 1A 1C 
129d5     21 1B 1A 10 | 	byte	$d9, $e1, $ea, $f2, $05, $0d, $13, $14, $16, $17, $1a, $1c, $21, $1b, $1a, $10
129d9     02 00 F2 E8 
129dd     E4 E5 EA F9 
129e1     0D 24 42 4D 
129e5     50 50 3E 34 | 	byte	$02, $00, $f2, $e8, $e4, $e5, $ea, $f9, $0d, $24, $42, $4d, $50, $50, $3e, $34
129e9     31 2C 2D 22 
129ed     15 02 F1 E8 
129f1     E4 E4 E5 ED 
129f5     F7 FF 09 0E | 	byte	$31, $2c, $2d, $22, $15, $02, $f1, $e8, $e4, $e4, $e5, $ed, $f7, $ff, $09, $0e
129f9     0A 00 FA F9 
129fd     F9 F7 FF F8 
12a01     F9 FA F5 FB 
12a05     FF FE 00 FE | 	byte	$0a, $00, $fa, $f9, $f9, $f7, $ff, $f8, $f9, $fa, $f5, $fb, $ff, $fe, $00, $fe
12a09     F6 EC EC EC 
12a0d     E9 E4 DB CD 
12a11     C3 BE CC E1 
12a15     F8 0F 1B 18 | 	byte	$f6, $ec, $ec, $ec, $e9, $e4, $db, $cd, $c3, $be, $cc, $e1, $f8, $0f, $1b, $18
12a19     18 17 12 02 
12a1d     05 02 05 0F 
12a21     1D 2A 2A 27 
12a25     22 19 10 0F | 	byte	$18, $17, $12, $02, $05, $02, $05, $0f, $1d, $2a, $2a, $27, $22, $19, $10, $0f
12a29     FE F4 E5 CF 
12a2d     C4 B7 B4 AF 
12a31     AF AD AD B2 
12a35     BE D2 E4 F0 | 	byte	$fe, $f4, $e5, $cf, $c4, $b7, $b4, $af, $af, $ad, $ad, $b2, $be, $d2, $e4, $f0
12a39     FC 09 0E 15 
12a3d     1F 31 3D 44 
12a41     41 27 11 07 
12a45     F1 EA E5 E5 | 	byte	$fc, $09, $0e, $15, $1f, $31, $3d, $44, $41, $27, $11, $07, $f1, $ea, $e5, $e5
12a49     E8 FD 12 29 
12a4d     33 36 35 2A 
12a51     1A 15 0E 09 
12a55     0A 07 05 05 | 	byte	$e8, $fd, $12, $29, $33, $36, $35, $2a, $1a, $15, $0e, $09, $0a, $07, $05, $05
12a59     06 07 06 07 
12a5d     06 03 01 01 
12a61     02 02 00 FD 
12a65     FA F0 F2 F3 | 	byte	$06, $07, $06, $07, $06, $03, $01, $01, $02, $02, $00, $fd, $fa, $f0, $f2, $f3
12a69     FD 03 05 F9 
12a6d     F1 F3 F6 FB 
12a71     04 0A 19 23 
12a75     2E 38 34 2C | 	byte	$fd, $03, $05, $f9, $f1, $f3, $f6, $fb, $04, $0a, $19, $23, $2e, $38, $34, $2c
12a79     1D 0F 00 FC 
12a7d     FB FD 0C 11 
12a81     1C 27 27 27 
12a85     17 0A ED DA | 	byte	$1d, $0f, $00, $fc, $fb, $fd, $0c, $11, $1c, $27, $27, $27, $17, $0a, $ed, $da
12a89     D0 CB CC C9 
12a8d     C9 D0 D0 D3 
12a91     DD E8 F8 02 
12a95     FE EE E4 D9 | 	byte	$d0, $cb, $cc, $c9, $c9, $d0, $d0, $d3, $dd, $e8, $f8, $02, $fe, $ee, $e4, $d9
12a99     D1 D3 D8 DE 
12a9d     EC F9 05 1C 
12aa1     2B 2D 33 34 
12aa5     2C 22 15 0B | 	byte	$d1, $d3, $d8, $de, $ec, $f9, $05, $1c, $2b, $2d, $33, $34, $2c, $22, $15, $0b
12aa9     03 FB EE E4 
12aad     E0 CF C8 C2 
12ab1     BC BE C9 DB 
12ab5     EE 01 0E 20 | 	byte	$03, $fb, $ee, $e4, $e0, $cf, $c8, $c2, $bc, $be, $c9, $db, $ee, $01, $0e, $20
12ab9     24 16 16 14 
12abd     1F 27 25 1B 
12ac1     15 0F 0A 0D 
12ac5     0D 08 04 02 | 	byte	$24, $16, $16, $14, $1f, $27, $25, $1b, $15, $0f, $0a, $0d, $0d, $08, $04, $02
12ac9     FC FE F6 F1 
12acd     E8 E4 DB D7 
12ad1     DB DC E6 EE 
12ad5     F2 01 0D 14 | 	byte	$fc, $fe, $f6, $f1, $e8, $e4, $db, $d7, $db, $dc, $e6, $ee, $f2, $01, $0d, $14
12ad9     1F 2C 2F 30 
12add     2D 2D 2E 26 
12ae1     24 1F 0C 03 
12ae5     EE E7 EF 00 | 	byte	$1f, $2c, $2f, $30, $2d, $2d, $2e, $26, $24, $1f, $0c, $03, $ee, $e7, $ef, $00
12ae9     08 0C 13 14 
12aed     1E 1F 15 17 
12af1     0F 15 14 16 
12af5     1B 1C 21 21 | 	byte	$08, $0c, $13, $14, $1e, $1f, $15, $17, $0f, $15, $14, $16, $1b, $1c, $21, $21
12af9     21 1A 1A 12 
12afd     0D 04 FE F4 
12b01     EB E5 E0 DF 
12b05     D2 CA BB BD | 	byte	$21, $1a, $1a, $12, $0d, $04, $fe, $f4, $eb, $e5, $e0, $df, $d2, $ca, $bb, $bd
12b09     BF BD C2 D2 
12b0d     D5 DC DD EA 
12b11     FE 0C 09 0A 
12b15     02 01 F7 F1 | 	byte	$bf, $bd, $c2, $d2, $d5, $dc, $dd, $ea, $fe, $0c, $09, $0a, $02, $01, $f7, $f1
12b19     F3 F8 F9 04 
12b1d     11 24 39 4A 
12b21     51 50 44 23 
12b25     09 F6 E6 DA | 	byte	$f3, $f8, $f9, $04, $11, $24, $39, $4a, $51, $50, $44, $23, $09, $f6, $e6, $da
12b29     D5 CE CE CC 
12b2d     CE DA E0 E7 
12b31     E5 DE D7 D6 
12b35     D7 D9 D9 DE | 	byte	$d5, $ce, $ce, $cc, $ce, $da, $e0, $e7, $e5, $de, $d7, $d6, $d7, $d9, $d9, $de
12b39     DB E2 F3 05 
12b3d     07 10 18 17 
12b41     22 26 28 33 
12b45     2E 29 23 23 | 	byte	$db, $e2, $f3, $05, $07, $10, $18, $17, $22, $26, $28, $33, $2e, $29, $23, $23
12b49     13 0F 09 00 
12b4d     F3 EA E7 E9 
12b51     EA F5 09 15 
12b55     27 35 37 37 | 	byte	$13, $0f, $09, $00, $f3, $ea, $e7, $e9, $ea, $f5, $09, $15, $27, $35, $37, $37
12b59     37 30 27 1F 
12b5d     19 17 14 16 
12b61     16 11 FE FA 
12b65     F9 03 F0 EB | 	byte	$37, $30, $27, $1f, $19, $17, $14, $16, $16, $11, $fe, $fa, $f9, $03, $f0, $eb
12b69     E4 DA D6 D4 
12b6d     DE E6 EE F9 
12b71     F9 FE 07 16 
12b75     1D 2B 32 30 | 	byte	$e4, $da, $d6, $d4, $de, $e6, $ee, $f9, $f9, $fe, $07, $16, $1d, $2b, $32, $30
12b79     2D 32 2C 22 
12b7d     1E 0F 05 00 
12b81     F2 E8 E4 DB 
12b85     D2 C9 CA CA | 	byte	$2d, $32, $2c, $22, $1e, $0f, $05, $00, $f2, $e8, $e4, $db, $d2, $c9, $ca, $ca
12b89     DA E3 F6 FD 
12b8d     EF EE EE FE 
12b91     FA FD FE 00 
12b95     02 02 05 0F | 	byte	$da, $e3, $f6, $fd, $ef, $ee, $ee, $fe, $fa, $fd, $fe, $00, $02, $02, $05, $0f
12b99     1A 18 25 20 
12b9d     1B 1B 13 0E 
12ba1     00 EF DD D1 
12ba5     C8 C5 C0 C1 | 	byte	$1a, $18, $25, $20, $1b, $1b, $13, $0e, $00, $ef, $dd, $d1, $c8, $c5, $c0, $c1
12ba9     C8 CD D8 E3 
12bad     FB FE 0C 01 
12bb1     F3 EC E8 E9 
12bb5     E8 E5 E3 E3 | 	byte	$c8, $cd, $d8, $e3, $fb, $fe, $0c, $01, $f3, $ec, $e8, $e9, $e8, $e5, $e3, $e3
12bb9     F3 07 0B 19 
12bbd     2B 33 3D 48 
12bc1     4B 3D 35 21 
12bc5     1A 0D FF 01 | 	byte	$f3, $07, $0b, $19, $2b, $33, $3d, $48, $4b, $3d, $35, $21, $1a, $0d, $ff, $01
12bc9     00 00 02 01 
12bcd     00 FE 06 06 
12bd1     05 03 03 FC 
12bd5     FB F9 FE 04 | 	byte	$00, $00, $02, $01, $00, $fe, $06, $06, $05, $03, $03, $fc, $fb, $f9, $fe, $04
12bd9     06 05 03 01 
12bdd     02 07 0E 0D 
12be1     05 03 03 0B 
12be5     0A 09 07 00 | 	byte	$06, $05, $03, $01, $02, $07, $0e, $0d, $05, $03, $03, $0b, $0a, $09, $07, $00
12be9     FC FA F7 F9 
12bed     09 0C 0B 0D 
12bf1     0D 15 24 38 
12bf5     41 44 3D 2E | 	byte	$fc, $fa, $f7, $f9, $09, $0c, $0b, $0d, $0d, $15, $24, $38, $41, $44, $3d, $2e
12bf9     2B 24 18 15 
12bfd     0F 09 04 03 
12c01     03 00 F8 F1 
12c05     DC C5 BB B2 | 	byte	$2b, $24, $18, $15, $0f, $09, $04, $03, $03, $00, $f8, $f1, $dc, $c5, $bb, $b2
12c09     AE A5 A1 9B 
12c0d     9F BA C1 D1 
12c11     E4 F6 FF 08 
12c15     16 1B 2B 34 | 	byte	$ae, $a5, $a1, $9b, $9f, $ba, $c1, $d1, $e4, $f6, $ff, $08, $16, $1b, $2b, $34
12c19     38 37 35 25 
12c1d     23 15 11 F9 
12c21     E3 DE D4 D8 
12c25     D8 D7 D9 DC | 	byte	$38, $37, $35, $25, $23, $15, $11, $f9, $e3, $de, $d4, $d8, $d8, $d7, $d9, $dc
12c29     ED FC 09 10 
12c2d     14 04 FF EA 
12c31     E7 E5 ED EE 
12c35     F0 F8 FE 0D | 	byte	$ed, $fc, $09, $10, $14, $04, $ff, $ea, $e7, $e5, $ed, $ee, $f0, $f8, $fe, $0d
12c39     19 1C 22 24 
12c3d     21 1F 15 0F 
12c41     0F 05 05 F9 
12c45     F4 ED EE F0 | 	byte	$19, $1c, $22, $24, $21, $1f, $15, $0f, $0f, $05, $05, $f9, $f4, $ed, $ee, $f0
12c49     F8 F9 FA F9 
12c4d     03 08 0F 14 
12c51     13 14 12 12 
12c55     12 17 26 28 | 	byte	$f8, $f9, $fa, $f9, $03, $08, $0f, $14, $13, $14, $12, $12, $12, $17, $26, $28
12c59     27 1F 19 17 
12c5d     17 14 13 08 
12c61     FD FA F4 F3 
12c65     F5 F6 F7 FC | 	byte	$27, $1f, $19, $17, $17, $14, $13, $08, $fd, $fa, $f4, $f3, $f5, $f6, $f7, $fc
12c69     05 0F 1F 29 
12c6d     27 28 1E 16 
12c71     12 10 0F 08 
12c75     01 FA FD F8 | 	byte	$05, $0f, $1f, $29, $27, $28, $1e, $16, $12, $10, $0f, $08, $01, $fa, $fd, $f8
12c79     FB FE 04 06 
12c7d     07 0C 0A 14 
12c81     12 07 FC E4 
12c85     C9 BE B4 AE | 	byte	$fb, $fe, $04, $06, $07, $0c, $0a, $14, $12, $07, $fc, $e4, $c9, $be, $b4, $ae
12c89     AD A2 A7 B7 
12c8d     C5 D8 F3 03 
12c91     09 17 1B 25 
12c95     35 34 37 3A | 	byte	$ad, $a2, $a7, $b7, $c5, $d8, $f3, $03, $09, $17, $1b, $25, $35, $34, $37, $3a
12c99     30 2C 23 1F 
12c9d     1A 10 0A F6 
12ca1     EE EB E2 E3 
12ca5     DB D5 D4 D4 | 	byte	$30, $2c, $23, $1f, $1a, $10, $0a, $f6, $ee, $eb, $e2, $e3, $db, $d5, $d4, $d4
12ca9     D7 E2 EB EA 
12cad     E5 D5 D1 CB 
12cb1     DB DE EF F4 
12cb5     FD 0C 0F 15 | 	byte	$d7, $e2, $eb, $ea, $e5, $d5, $d1, $cb, $db, $de, $ef, $f4, $fd, $0c, $0f, $15
12cb9     24 23 24 23 
12cbd     18 17 0D 0F 
12cc1     0D 0F 0F 0A 
12cc5     09 06 03 02 | 	byte	$24, $23, $24, $23, $18, $17, $0d, $0f, $0d, $0f, $0f, $0a, $09, $06, $03, $02
12cc9     05 06 03 05 
12ccd     07 0A 0D 14 
12cd1     14 1E 24 2E 
12cd5     3D 3F 3E 2D | 	byte	$05, $06, $03, $05, $07, $0a, $0d, $14, $14, $1e, $24, $2e, $3d, $3f, $3e, $2d
12cd9     19 0B FF FA 
12cdd     F1 E6 DB D7 
12ce1     D2 D3 DD E8 
12ce5     F5 01 09 16 | 	byte	$19, $0b, $ff, $fa, $f1, $e6, $db, $d7, $d2, $d3, $dd, $e8, $f5, $01, $09, $16
12ce9     1F 2D 2F 2E 
12ced     22 19 10 07 
12cf1     01 00 00 FE 
12cf5     FD 03 0D 1A | 	byte	$1f, $2d, $2f, $2e, $22, $19, $10, $07, $01, $00, $00, $fe, $fd, $03, $0d, $1a
12cf9     27 2B 31 2E 
12cfd     23 2A 2A 1E 
12d01     0F F1 D9 BC 
12d05     B1 B1 AF B2 | 	byte	$27, $2b, $31, $2e, $23, $2a, $2a, $1e, $0f, $f1, $d9, $bc, $b1, $b1, $af, $b2
12d09     BE C2 CC CC 
12d0d     DE EC F1 FB 
12d11     FA FF 00 08 
12d15     12 13 13 12 | 	byte	$be, $c2, $cc, $cc, $de, $ec, $f1, $fb, $fa, $ff, $00, $08, $12, $13, $13, $12
12d19     0A 0B 09 07 
12d1d     00 FC FA F0 
12d21     EC EE E7 E9 
12d25     E2 E0 E5 E9 | 	byte	$0a, $0b, $09, $07, $00, $fc, $fa, $f0, $ec, $ee, $e7, $e9, $e2, $e0, $e5, $e9
12d29     EF F6 F3 EB 
12d2d     E4 DE E0 EB 
12d31     EF FD 0E 19 
12d35     14 14 19 23 | 	byte	$ef, $f6, $f3, $eb, $e4, $de, $e0, $eb, $ef, $fd, $0e, $19, $14, $14, $19, $23
12d39     30 33 31 2E 
12d3d     2E 30 31 34 
12d41     2A 18 0B F2 
12d45     E6 E3 DA DB | 	byte	$30, $33, $31, $2e, $2e, $30, $31, $34, $2a, $18, $0b, $f2, $e6, $e3, $da, $db
12d49     DB DC E7 ED 
12d4d     F7 06 18 21 
12d51     30 39 41 45 
12d55     44 30 16 FB | 	byte	$db, $dc, $e7, $ed, $f7, $06, $18, $21, $30, $39, $41, $45, $44, $30, $16, $fb
12d59     E8 DE D1 D4 
12d5d     D4 D4 D3 CE 
12d61     DF F5 0B 1B 
12d65     2C 27 2A 3C | 	byte	$e8, $de, $d1, $d4, $d4, $d4, $d3, $ce, $df, $f5, $0b, $1b, $2c, $27, $2a, $3c
12d69     3A 39 31 22 
12d6d     15 0C FE 00 
12d71     F9 FF 04 0D 
12d75     13 18 1E 20 | 	byte	$3a, $39, $31, $22, $15, $0c, $fe, $00, $f9, $ff, $04, $0d, $13, $18, $1e, $20
12d79     21 21 20 20 
12d7d     1F 1C 11 FD 
12d81     E3 C5 B5 B4 
12d85     AE BC C4 D1 | 	byte	$21, $21, $20, $20, $1f, $1c, $11, $fd, $e3, $c5, $b5, $b4, $ae, $bc, $c4, $d1
12d89     D8 CC CE D0 
12d8d     DD E8 E8 ED 
12d91     ED F8 FE 07 
12d95     15 19 1A 1C | 	byte	$d8, $cc, $ce, $d0, $dd, $e8, $e8, $ed, $ed, $f8, $fe, $07, $15, $19, $1a, $1c
12d99     1F 14 0C 04 
12d9d     FF FE F4 F0 
12da1     F0 F2 F3 F8 
12da5     FF 04 12 15 | 	byte	$1f, $14, $0c, $04, $ff, $fe, $f4, $f0, $f0, $f2, $f3, $f8, $ff, $04, $12, $15
12da9     13 10 F9 E1 
12dad     D0 BF BE CB 
12db1     DB EE FE F7 
12db5     FA 04 1B 28 | 	byte	$13, $10, $f9, $e1, $d0, $bf, $be, $cb, $db, $ee, $fe, $f7, $fa, $04, $1b, $28
12db9     35 38 39 36 
12dbd     3B 3A 37 2F 
12dc1     17 FD EC DB 
12dc5     CF C5 C7 C7 | 	byte	$35, $38, $39, $36, $3b, $3a, $37, $2f, $17, $fd, $ec, $db, $cf, $c5, $c7, $c7
12dc9     CA D6 ED 03 
12dcd     1C 32 48 4E 
12dd1     5C 5E 60 50 
12dd5     2D 11 F4 DF | 	byte	$ca, $d6, $ed, $03, $1c, $32, $48, $4e, $5c, $5e, $60, $50, $2d, $11, $f4, $df
12dd9     D3 D3 D8 E9 
12ddd     EE EE ED F4 
12de1     FF 0C 11 10 
12de5     15 17 1C 22 | 	byte	$d3, $d3, $d8, $e9, $ee, $ee, $ed, $f4, $ff, $0c, $11, $10, $15, $17, $1c, $22
12de9     28 28 23 19 
12ded     18 13 09 0B 
12df1     06 07 07 06 
12df5     09 09 0A 0B | 	byte	$28, $28, $23, $19, $18, $13, $09, $0b, $06, $07, $07, $06, $09, $09, $0a, $0b
12df9     0D 0F 12 13 
12dfd     09 01 ED D6 
12e01     C6 C2 C2 CC 
12e05     DA E6 F4 F6 | 	byte	$0d, $0f, $12, $13, $09, $01, $ed, $d6, $c6, $c2, $c2, $cc, $da, $e6, $f4, $f6
12e09     E0 DA D9 DC 
12e0d     E6 E4 EB EA 
12e11     F2 00 11 14 
12e15     1E 1C 12 02 | 	byte	$e0, $da, $d9, $dc, $e6, $e4, $eb, $ea, $f2, $00, $11, $14, $1e, $1c, $12, $02
12e19     F4 E2 E0 DB 
12e1d     DC E1 EC F9 
12e21     06 12 28 2F 
12e25     39 37 34 20 | 	byte	$f4, $e2, $e0, $db, $dc, $e1, $ec, $f9, $06, $12, $28, $2f, $39, $37, $34, $20
12e29     0A E5 CC AF 
12e2d     A6 AC BC D3 
12e31     E9 EF E5 E9 
12e35     F5 05 22 30 | 	byte	$0a, $e5, $cc, $af, $a6, $ac, $bc, $d3, $e9, $ef, $e5, $e9, $f5, $05, $22, $30
12e39     37 41 44 46 
12e3d     52 4E 42 32 
12e41     1C 0B F1 E5 
12e45     D9 D0 D0 D8 | 	byte	$37, $41, $44, $46, $52, $4e, $42, $32, $1c, $0b, $f1, $e5, $d9, $d0, $d0, $d8
12e49     DE F4 05 17 
12e4d     1F 2A 37 37 
12e51     37 37 2C 17 
12e55     00 F3 EA ED | 	byte	$de, $f4, $05, $17, $1f, $2a, $37, $37, $37, $37, $2c, $17, $00, $f3, $ea, $ed
12e59     F9 01 0E 15 
12e5d     07 F8 F6 F7 
12e61     F6 F9 00 FD 
12e65     00 03 02 FC | 	byte	$f9, $01, $0e, $15, $07, $f8, $f6, $f7, $f6, $f9, $00, $fd, $00, $03, $02, $fc
12e69     FE FD FE 01 
12e6d     02 07 0E 0F 
12e71     1A 22 1F 20 
12e75     25 27 28 27 | 	byte	$fe, $fd, $fe, $01, $02, $07, $0e, $0f, $1a, $22, $1f, $20, $25, $27, $28, $27
12e79     27 1F 19 10 
12e7d     02 F4 E2 D0 
12e81     CD C6 CA D4 
12e85     E3 EC E5 E4 | 	byte	$27, $1f, $19, $10, $02, $f4, $e2, $d0, $cd, $c6, $ca, $d4, $e3, $ec, $e5, $e4
12e89     DA E7 EF FE 
12e8d     0A 0E 0F 12 
12e91     10 0D 0B 01 
12e95     F7 EA E1 D3 | 	byte	$da, $e7, $ef, $fe, $0a, $0e, $0f, $12, $10, $0d, $0b, $01, $f7, $ea, $e1, $d3
12e99     C9 CB CA CB 
12e9d     C9 D0 DF ED 
12ea1     08 1C 2B 3B 
12ea5     3C 3A 30 18 | 	byte	$c9, $cb, $ca, $cb, $c9, $d0, $df, $ed, $08, $1c, $2b, $3b, $3c, $3a, $30, $18
12ea9     F8 DC CA C3 
12ead     C5 CD DE E8 
12eb1     EB E8 EA F7 
12eb5     0A 16 1D 21 | 	byte	$f8, $dc, $ca, $c3, $c5, $cd, $de, $e8, $eb, $e8, $ea, $f7, $0a, $16, $1d, $21
12eb9     20 21 24 29 
12ebd     29 2E 30 2E 
12ec1     30 2E 2D 1D 
12ec5     16 0B FE FC | 	byte	$20, $21, $24, $29, $29, $2e, $30, $2e, $30, $2e, $2d, $1d, $16, $0b, $fe, $fc
12ec9     FB FD 03 0C 
12ecd     11 18 1D 17 
12ed1     16 FB E5 D5 
12ed5     CE C8 CC E1 | 	byte	$fb, $fd, $03, $0c, $11, $18, $1d, $17, $16, $fb, $e5, $d5, $ce, $c8, $cc, $e1
12ed9     F6 10 24 24 
12edd     24 21 1F 26 
12ee1     27 27 24 18 
12ee5     0A FC EF EC | 	byte	$f6, $10, $24, $24, $24, $21, $1f, $26, $27, $27, $24, $18, $0a, $fc, $ef, $ec
12ee9     E7 ED F1 F2 
12eed     F2 F5 F7 FA 
12ef1     FB 05 0D 21 
12ef5     2D 43 4E 52 | 	byte	$e7, $ed, $f1, $f2, $f2, $f5, $f7, $fa, $fb, $05, $0d, $21, $2d, $43, $4e, $52
12ef9     53 4B 3B 28 
12efd     08 F6 DD CC 
12f01     CA C9 CC DC 
12f05     E1 DA D0 C2 | 	byte	$53, $4b, $3b, $28, $08, $f6, $dd, $cc, $ca, $c9, $cc, $dc, $e1, $da, $d0, $c2
12f09     BE C6 CC D6 
12f0d     DE E6 EB F9 
12f11     02 06 03 03 
12f15     03 FC FD F8 | 	byte	$be, $c6, $cc, $d6, $de, $e6, $eb, $f9, $02, $06, $03, $03, $03, $fc, $fd, $f8
12f19     F4 E3 DA DB 
12f1d     D9 E6 F4 07 
12f21     18 24 29 27 
12f25     22 13 FF F8 | 	byte	$f4, $e3, $da, $db, $d9, $e6, $f4, $07, $18, $24, $29, $27, $22, $13, $ff, $f8
12f29     EA E7 ED F4 
12f2d     03 14 1D 18 
12f31     0E 08 02 05 
12f35     07 0C 0A 0D | 	byte	$ea, $e7, $ed, $f4, $03, $14, $1d, $18, $0e, $08, $02, $05, $07, $0c, $0a, $0d
12f39     0A 0A 0A 02 
12f3d     FC FB F6 F7 
12f41     F7 F9 FE 07 
12f45     06 12 1C 1A | 	byte	$0a, $0a, $0a, $02, $fc, $fb, $f6, $f7, $f7, $f9, $fe, $07, $06, $12, $1c, $1a
12f49     1C 27 28 32 
12f4d     2D 22 13 FD 
12f51     E8 DE D0 CD 
12f55     D0 DB E9 FB | 	byte	$1c, $27, $28, $32, $2d, $22, $13, $fd, $e8, $de, $d0, $cd, $d0, $db, $e9, $fb
12f59     0D 15 13 16 
12f5d     18 22 30 47 
12f61     4E 56 51 3D 
12f65     2A 17 00 FD | 	byte	$0d, $15, $13, $16, $18, $22, $30, $47, $4e, $56, $51, $3d, $2a, $17, $00, $fd
12f69     EE E4 E5 E3 
12f6d     E4 E9 ED EE 
12f71     F3 F0 F7 F9 
12f75     F9 FB FA FF | 	byte	$ee, $e4, $e5, $e3, $e4, $e9, $ed, $ee, $f3, $f0, $f7, $f9, $f9, $fb, $fa, $ff
12f79     01 0B 0F 14 
12f7d     12 0A 09 09 
12f81     14 14 19 11 
12f85     F9 E3 D2 C9 | 	byte	$01, $0b, $0f, $14, $12, $0a, $09, $09, $14, $14, $19, $11, $f9, $e3, $d2, $c9
12f89     C4 CB DA DC 
12f8d     DB E0 E0 DD 
12f91     DF EB EF 00 
12f95     04 12 19 1E | 	byte	$c4, $cb, $da, $dc, $db, $e0, $e0, $dd, $df, $eb, $ef, $00, $04, $12, $19, $1e
12f99     24 19 18 17 
12f9d     14 13 16 16 
12fa1     16 14 04 00 
12fa5     EF E1 CF CB | 	byte	$24, $19, $18, $17, $14, $13, $16, $16, $16, $14, $04, $00, $ef, $e1, $cf, $cb
12fa9     BC B9 BA BD 
12fad     CE E1 E5 EF 
12fb1     03 06 0B 14 
12fb5     1D 26 2E 2E | 	byte	$bc, $b9, $ba, $bd, $ce, $e1, $e5, $ef, $03, $06, $0b, $14, $1d, $26, $2e, $2e
12fb9     23 1E 09 FE 
12fbd     FA F4 F5 FC 
12fc1     03 0C 19 1D 
12fc5     24 25 35 37 | 	byte	$23, $1e, $09, $fe, $fa, $f4, $f5, $fc, $03, $0c, $19, $1d, $24, $25, $35, $37
12fc9     37 3F 3D 33 
12fcd     2B 1D 0A FE 
12fd1     F5 F6 F7 F7 
12fd5     FA 05 0D 16 | 	byte	$37, $3f, $3d, $33, $2b, $1d, $0a, $fe, $f5, $f6, $f7, $f7, $fa, $05, $0d, $16
12fd9     13 0E 05 FD 
12fdd     F9 FD FE 06 
12fe1     05 02 FA FA 
12fe5     F2 F6 F7 EC | 	byte	$13, $0e, $05, $fd, $f9, $fd, $fe, $06, $05, $02, $fa, $fa, $f2, $f6, $f7, $ec
12fe9     E8 E8 E9 FD 
12fed     05 0A 0B 0B 
12ff1     0B 06 00 F9 
12ff5     F4 ED EE F3 | 	byte	$e8, $e8, $e9, $fd, $05, $0a, $0b, $0b, $0b, $06, $00, $f9, $f4, $ed, $ee, $f3
12ff9     F7 FE 09 16 
12ffd     1F 2D 34 3D 
13001     43 41 2D 15 
13005     05 F2 E6 E8 | 	byte	$f7, $fe, $09, $16, $1f, $2d, $34, $3d, $43, $41, $2d, $15, $05, $f2, $e6, $e8
13009     E8 EA EF E7 
1300d     E6 DB CD C8 
13011     BD B9 BC BA 
13015     BA CA DC E5 | 	byte	$e8, $ea, $ef, $e7, $e6, $db, $cd, $c8, $bd, $b9, $bc, $ba, $ba, $ca, $dc, $e5
13019     FF 0C 1E 26 
1301d     24 19 1A 12 
13021     12 08 07 FD 
13025     F8 F7 EB E3 | 	byte	$ff, $0c, $1e, $26, $24, $19, $1a, $12, $12, $08, $07, $fd, $f8, $f7, $eb, $e3
13029     DE DC DB E2 
1302d     E9 E5 F0 F9 
13031     06 1A 2B 39 
13035     4A 46 47 3B | 	byte	$de, $dc, $db, $e2, $e9, $e5, $f0, $f9, $06, $1a, $2b, $39, $4a, $46, $47, $3b
13039     26 18 07 05 
1303d     05 06 10 18 
13041     26 2B 31 31 
13045     30 20 11 FD | 	byte	$26, $18, $07, $05, $05, $06, $10, $18, $26, $2b, $31, $31, $30, $20, $11, $fd
13049     EA D2 C3 C0 
1304d     BF BE CE E5 
13051     F7 00 06 07 
13055     12 1F 22 20 | 	byte	$ea, $d2, $c3, $c0, $bf, $be, $ce, $e5, $f7, $00, $06, $07, $12, $1f, $22, $20
13059     1B 1A 15 0E 
1305d     12 14 1C 1C 
13061     12 0E 05 00 
13065     FA FD FE 00 | 	byte	$1b, $1a, $15, $0e, $12, $14, $1c, $1c, $12, $0e, $05, $00, $fa, $fd, $fe, $00
13069     03 0F 15 1C 
1306d     22 20 21 1F 
13071     1C 15 07 04 
13075     FB F6 FA F9 | 	byte	$03, $0f, $15, $1c, $22, $20, $21, $1f, $1c, $15, $07, $04, $fb, $f6, $fa, $f9
13079     00 06 05 07 
1307d     06 01 00 F9 
13081     F4 E6 E2 DB 
13085     DD DD DB DC | 	byte	$00, $06, $05, $07, $06, $01, $00, $f9, $f4, $e6, $e2, $db, $dd, $dd, $db, $dc
13089     DF E0 EA E3 
1308d     E4 DA D6 D6 
13091     D4 CD D0 D8 
13095     DE F4 02 0E | 	byte	$df, $e0, $ea, $e3, $e4, $da, $d6, $d6, $d4, $cd, $d0, $d8, $de, $f4, $02, $0e
13099     25 2C 37 3B 
1309d     3A 37 30 1B 
130a1     12 FF F9 F6 
130a5     F7 F9 F9 F9 | 	byte	$25, $2c, $37, $3b, $3a, $37, $30, $1b, $12, $ff, $f9, $f6, $f7, $f9, $f9, $f9
130a9     FB FE 01 FE 
130ad     FD FA FA F5 
130b1     F1 F3 F2 F3 
130b5     F2 ED EE EC | 	byte	$fb, $fe, $01, $fe, $fd, $fa, $fa, $f5, $f1, $f3, $f2, $f3, $f2, $ed, $ee, $ec
130b9     EA F2 FC FB 
130bd     FE 08 10 1E 
130c1     2C 36 3A 40 
130c5     34 2C 17 00 | 	byte	$ea, $f2, $fc, $fb, $fe, $08, $10, $1e, $2c, $36, $3a, $40, $34, $2c, $17, $00
130c9     EF DC D4 D1 
130cd     D7 E8 FB 12 
130d1     21 31 3D 49 
130d5     47 3C 2D 23 | 	byte	$ef, $dc, $d4, $d1, $d7, $e8, $fb, $12, $21, $31, $3d, $49, $47, $3c, $2d, $23
130d9     18 13 14 17 
130dd     2B 33 31 31 
130e1     27 1E 10 02 
130e5     EF DF D4 C7 | 	byte	$18, $13, $14, $17, $2b, $33, $31, $31, $27, $1e, $10, $02, $ef, $df, $d4, $c7
130e9     C2 C6 C7 D1 
130ed     DA EC F4 01 
130f1     F6 EB E7 E0 
130f5     DB E1 EC FC | 	byte	$c2, $c6, $c7, $d1, $da, $ec, $f4, $01, $f6, $eb, $e7, $e0, $db, $e1, $ec, $fc
130f9     14 1E 2B 32 
130fd     30 30 23 0A 
13101     FB F8 EF EE 
13105     ED EE FE 07 | 	byte	$14, $1e, $2b, $32, $30, $30, $23, $0a, $fb, $f8, $ef, $ee, $ed, $ee, $fe, $07
13109     0B 0A 05 F4 
1310d     E6 DA D7 D7 
13111     D9 E9 F5 0B 
13115     1B 2C 37 35 | 	byte	$0b, $0a, $05, $f4, $e6, $da, $d7, $d7, $d9, $e9, $f5, $0b, $1b, $2c, $37, $35
13119     36 2B 1C 09 
1311d     F9 DD C4 BD 
13121     B8 BA CE DB 
13125     E9 ED EA ED | 	byte	$36, $2b, $1c, $09, $f9, $dd, $c4, $bd, $b8, $ba, $ce, $db, $e9, $ed, $ea, $ed
13129     EE E4 E0 E6 
1312d     EF F8 01 07 
13131     15 1F 25 24 
13135     18 10 0A 09 | 	byte	$ee, $e4, $e0, $e6, $ef, $f8, $01, $07, $15, $1f, $25, $24, $18, $10, $0a, $09
13139     09 0E 15 24 
1313d     2B 3A 3F 3F 
13141     3E 2E 25 1F 
13145     10 04 00 F7 | 	byte	$09, $0e, $15, $24, $2b, $3a, $3f, $3f, $3e, $2e, $25, $1f, $10, $04, $00, $f7
13149     F1 EC F0 F8 
1314d     04 12 14 16 
13151     14 13 10 FA 
13155     EF E8 E3 E9 | 	byte	$f1, $ec, $f0, $f8, $04, $12, $14, $16, $14, $13, $10, $fa, $ef, $e8, $e3, $e9
13159     EA F2 F8 06 
1315d     0A 0B 0B 06 
13161     02 02 00 00 
13165     01 02 03 08 | 	byte	$ea, $f2, $f8, $06, $0a, $0b, $0b, $06, $02, $02, $00, $00, $01, $02, $03, $08
13169     07 06 05 06 
1316d     09 0A 0A 0B 
13171     0A 09 04 FE 
13175     F5 F9 00 0E | 	byte	$07, $06, $05, $06, $09, $0a, $0a, $0b, $0a, $09, $04, $fe, $f5, $f9, $00, $0e
13179     1B 28 37 3A 
1317d     3F 2F 21 18 
13181     10 03 F9 E6 
13185     DE DA D9 D7 | 	byte	$1b, $28, $37, $3a, $3f, $2f, $21, $18, $10, $03, $f9, $e6, $de, $da, $d9, $d7
13189     D2 C3 BA B4 
1318d     AE B1 B6 B8 
13191     C4 D6 E8 F6 
13195     00 09 14 17 | 	byte	$d2, $c3, $ba, $b4, $ae, $b1, $b6, $b8, $c4, $d6, $e8, $f6, $00, $09, $14, $17
13199     1C 22 23 1E 
1319d     12 FE ED E9 
131a1     EA F5 03 08 
131a5     16 18 17 0C | 	byte	$1c, $22, $23, $1e, $12, $fe, $ed, $e9, $ea, $f5, $03, $08, $16, $18, $17, $0c
131a9     FF FC FA FA 
131ad     FA F9 00 10 
131b1     21 31 30 31 
131b5     30 28 29 22 | 	byte	$ff, $fc, $fa, $fa, $fa, $f9, $00, $10, $21, $31, $30, $31, $30, $28, $29, $22
131b9     19 18 16 13 
131bd     10 0D 03 F6 
131c1     F1 E2 DE D8 
131c5     D2 D0 CF CF | 	byte	$19, $18, $16, $13, $10, $0d, $03, $f6, $f1, $e2, $de, $d8, $d2, $d0, $cf, $cf
131c9     C8 CF E0 F4 
131cd     05 1C 2C 3A 
131d1     43 3F 2F 22 
131d5     1F 16 17 16 | 	byte	$c8, $cf, $e0, $f4, $05, $1c, $2c, $3a, $43, $3f, $2f, $22, $1f, $16, $17, $16
131d9     16 1E 27 28 
131dd     25 1E 10 04 
131e1     FF FA F9 FB 
131e5     02 08 12 17 | 	byte	$16, $1e, $27, $28, $25, $1e, $10, $04, $ff, $fa, $f9, $fb, $02, $08, $12, $17
131e9     1D 1B 1A 17 
131ed     0D 00 F8 F9 
131f1     EF E1 D4 D2 
131f5     D0 DA E8 F5 | 	byte	$1d, $1b, $1a, $17, $0d, $00, $f8, $f9, $ef, $e1, $d4, $d2, $d0, $da, $e8, $f5
131f9     FF FD FE F3 
131fd     EB E2 DA DD 
13201     DB DD E7 ED 
13205     FE 12 19 14 | 	byte	$ff, $fd, $fe, $f3, $eb, $e2, $da, $dd, $db, $dd, $e7, $ed, $fe, $12, $19, $14
13209     08 FD F0 EB 
1320d     EA F2 F8 01 
13211     0C 11 18 14 
13215     12 0A 09 0A | 	byte	$08, $fd, $f0, $eb, $ea, $f2, $f8, $01, $0c, $11, $18, $14, $12, $0a, $09, $0a
13219     11 10 10 0D 
1321d     00 00 00 07 
13221     0E 14 13 0E 
13225     05 EE E7 E2 | 	byte	$11, $10, $10, $0d, $00, $00, $00, $07, $0e, $14, $13, $0e, $05, $ee, $e7, $e2
13229     D9 DB D6 D6 
1322d     D6 D6 DE EC 
13231     F1 F7 F5 F5 
13235     F6 00 0B 1A | 	byte	$d9, $db, $d6, $d6, $d6, $d6, $de, $ec, $f1, $f7, $f5, $f5, $f6, $00, $0b, $1a
13239     2C 37 41 3F 
1323d     3E 2E 1B 0B 
13241     00 FC FE FE 
13245     04 02 F7 F6 | 	byte	$2c, $37, $41, $3f, $3e, $2e, $1b, $0b, $00, $fc, $fe, $fe, $04, $02, $f7, $f6
13249     F6 FB 04 12 
1324d     20 2C 38 30 
13251     2E 2D 2D 32 
13255     32 2D 23 18 | 	byte	$f6, $fb, $04, $12, $20, $2c, $38, $30, $2e, $2d, $2d, $32, $32, $2d, $23, $18
13259     12 10 08 01 
1325d     FA E9 E2 D5 
13261     D7 D8 D3 CD 
13265     D4 D6 DE DD | 	byte	$12, $10, $08, $01, $fa, $e9, $e2, $d5, $d7, $d8, $d3, $cd, $d4, $d6, $de, $dd
13269     DF DD E5 EB 
1326d     01 11 1F 27 
13271     23 19 1A 18 
13275     1D 27 2D 2E | 	byte	$df, $dd, $e5, $eb, $01, $11, $1f, $27, $23, $19, $1a, $18, $1d, $27, $2d, $2e
13279     2E 13 02 F4 
1327d     EA E7 E2 E3 
13281     E0 E3 F4 05 
13285     11 18 17 12 | 	byte	$2e, $13, $02, $f4, $ea, $e7, $e2, $e3, $e0, $e3, $f4, $05, $11, $18, $17, $12
13289     08 00 01 00 
1328d     F9 FA FA F9 
13291     FA F9 F1 E8 
13295     DF D7 DB C9 | 	byte	$08, $00, $01, $00, $f9, $fa, $fa, $f9, $fa, $f9, $f1, $e8, $df, $d7, $db, $c9
13299     CB C1 BD BC 
1329d     BD C2 D1 E8 
132a1     03 12 1E 1A 
132a5     18 18 18 18 | 	byte	$cb, $c1, $bd, $bc, $bd, $c2, $d1, $e8, $03, $12, $1e, $1a, $18, $18, $18, $18
132a9     1A 18 17 14 
132ad     16 22 23 20 
132b1     1B 11 09 0A 
132b5     11 1C 27 2D | 	byte	$1a, $18, $17, $14, $16, $22, $23, $20, $1b, $11, $09, $0a, $11, $1c, $27, $2d
132b9     33 32 31 2C 
132bd     1D 10 09 01 
132c1     FE 01 01 F9 
132c5     FA F5 F3 F2 | 	byte	$33, $32, $31, $2c, $1d, $10, $09, $01, $fe, $01, $01, $f9, $fa, $f5, $f3, $f2
132c9     F0 F7 FC 03 
132cd     F8 E4 DB DC 
132d1     DC E7 F0 F8 
132d5     00 04 0B 20 | 	byte	$f0, $f7, $fc, $03, $f8, $e4, $db, $dc, $dc, $e7, $f0, $f8, $00, $04, $0b, $20
132d9     30 33 34 2A 
132dd     1C 10 0E 10 
132e1     10 0F 05 05 
132e5     F9 F1 E8 E3 | 	byte	$30, $33, $34, $2a, $1c, $10, $0e, $10, $10, $0f, $05, $05, $f9, $f1, $e8, $e3
132e9     E4 E6 F3 03 
132ed     17 1E 21 20 
132f1     28 25 28 38 
132f5     3A 37 2B 0D | 	byte	$e4, $e6, $f3, $03, $17, $1e, $21, $20, $28, $25, $28, $38, $3a, $37, $2b, $0d
132f9     F0 E0 D3 D3 
132fd     D3 CE CA C6 
13301     C0 C6 C6 D1 
13305     D7 D3 CB CA | 	byte	$f0, $e0, $d3, $d3, $d3, $ce, $ca, $c6, $c0, $c6, $c6, $d1, $d7, $d3, $cb, $ca
13309     CC E0 F6 10 
1330d     1F 32 36 35 
13311     30 25 1D 0F 
13315     03 05 00 F5 | 	byte	$cc, $e0, $f6, $10, $1f, $32, $36, $35, $30, $25, $1d, $0f, $03, $05, $00, $f5
13319     EA DF D7 D3 
1331d     DA F2 01 12 
13321     14 0E 08 06 
13325     07 0F 18 1D | 	byte	$ea, $df, $d7, $d3, $da, $f2, $01, $12, $14, $0e, $08, $06, $07, $0f, $18, $1d
13329     26 21 16 22 
1332d     1B 1B 1A 10 
13331     08 02 FE 00 
13335     01 F7 EA E1 | 	byte	$26, $21, $16, $22, $1b, $1b, $1a, $10, $08, $02, $fe, $00, $01, $f7, $ea, $e1
13339     D4 CA C4 C2 
1333d     BB BF D1 EE 
13341     08 1D 2E 3F 
13345     40 39 35 37 | 	byte	$d4, $ca, $c4, $c2, $bb, $bf, $d1, $ee, $08, $1d, $2e, $3f, $40, $39, $35, $37
13349     3A 45 37 27 
1334d     11 01 F8 FA 
13351     FB 07 0B 09 
13355     0A 14 18 22 | 	byte	$3a, $45, $37, $27, $11, $01, $f8, $fa, $fb, $07, $0b, $09, $0a, $14, $18, $22
13359     26 24 19 18 
1335d     13 16 17 17 
13361     12 09 FC F0 
13365     E6 E2 DB DC | 	byte	$26, $24, $19, $18, $13, $16, $17, $17, $12, $09, $fc, $f0, $e6, $e2, $db, $dc
13369     D9 DE D8 D6 
1336d     D3 D4 D6 D9 
13371     E3 F0 02 12 
13375     14 13 10 0D | 	byte	$d9, $de, $d8, $d6, $d3, $d4, $d6, $d9, $e3, $f0, $02, $12, $14, $13, $10, $0d
13379     0B 0B 0D 0D 
1337d     0B 0A 07 07 
13381     07 09 07 F7 
13385     E5 DA DC E6 | 	byte	$0b, $0b, $0d, $0d, $0b, $0a, $07, $07, $07, $09, $07, $f7, $e5, $da, $dc, $e6
13389     FB 09 1B 26 
1338d     21 1F 1C 1B 
13391     18 0E 00 FE 
13395     F5 F0 E7 E6 | 	byte	$fb, $09, $1b, $26, $21, $1f, $1c, $1b, $18, $0e, $00, $fe, $f5, $f0, $e7, $e6
13399     DB DB DD E7 
1339d     EF FC EC D0 
133a1     C1 B6 AD B1 
133a5     C1 CF E1 F1 | 	byte	$db, $db, $dd, $e7, $ef, $fc, $ec, $d0, $c1, $b6, $ad, $b1, $c1, $cf, $e1, $f1
133a9     F9 0E 25 3F 
133ad     57 5D 5B 58 
133b1     50 46 46 3C 
133b5     2F 25 09 EF | 	byte	$f9, $0e, $25, $3f, $57, $5d, $5b, $58, $50, $46, $46, $3c, $2f, $25, $09, $ef
133b9     DB CB C9 CC 
133bd     D9 F2 03 13 
133c1     24 30 33 31 
133c5     31 34 3B 40 | 	byte	$db, $cb, $c9, $cc, $d9, $f2, $03, $13, $24, $30, $33, $31, $31, $34, $3b, $40
133c9     32 24 12 06 
133cd     FD FA FE 04 
133d1     00 F8 EF E0 
133d5     CE CB CE CC | 	byte	$32, $24, $12, $06, $fd, $fa, $fe, $04, $00, $f8, $ef, $e0, $ce, $cb, $ce, $cc
133d9     CC CB CB D6 
133dd     E4 F1 03 0E 
133e1     1B 1A 1B 1B 
133e5     20 20 20 23 | 	byte	$cc, $cb, $cb, $d6, $e4, $f1, $03, $0e, $1b, $1a, $1b, $1b, $20, $20, $20, $23
133e9     1E 17 1A 15 
133ed     09 FE F9 F9 
133f1     00 0E 0B 06 
133f5     05 FB F3 F6 | 	byte	$1e, $17, $1a, $15, $09, $fe, $f9, $f9, $00, $0e, $0b, $06, $05, $fb, $f3, $f6
133f9     F6 00 04 0A 
133fd     09 04 03 06 
13401     0E 0D 05 FE 
13405     F8 F6 F6 F9 | 	byte	$f6, $00, $04, $0a, $09, $04, $03, $06, $0e, $0d, $05, $fe, $f8, $f6, $f6, $f9
13409     F4 E3 D9 CE 
1340d     C3 C0 C2 BF 
13411     C2 CD CE DF 
13415     ED 06 13 1F | 	byte	$f4, $e3, $d9, $ce, $c3, $c0, $c2, $bf, $c2, $cd, $ce, $df, $ed, $06, $13, $1f
13419     26 2B 34 35 
1341d     2B 17 05 F7 
13421     E1 D6 D6 D8 
13425     E2 F4 05 08 | 	byte	$26, $2b, $34, $35, $2b, $17, $05, $f7, $e1, $d6, $d6, $d8, $e2, $f4, $05, $08
13429     19 2F 3F 4A 
1342d     51 4C 45 3E 
13431     38 2E 21 18 
13435     05 F3 E0 D5 | 	byte	$19, $2f, $3f, $4a, $51, $4c, $45, $3e, $38, $2e, $21, $18, $05, $f3, $e0, $d5
13439     D3 D6 D9 E3 
1343d     E7 DB DF E0 
13441     E3 E5 E6 EB 
13445     FA 01 04 06 | 	byte	$d3, $d6, $d9, $e3, $e7, $db, $df, $e0, $e3, $e5, $e6, $eb, $fa, $01, $04, $06
13449     0E 15 1E 2C 
1344d     3A 44 43 44 
13451     3D 2A 19 11 
13455     09 0A FE EF | 	byte	$0e, $15, $1e, $2c, $3a, $44, $43, $44, $3d, $2a, $19, $11, $09, $0a, $fe, $ef
13459     E2 E4 E9 F3 
1345d     02 0C 11 0F 
13461     08 07 0A 0B 
13465     15 19 12 0E | 	byte	$e2, $e4, $e9, $f3, $02, $0c, $11, $0f, $08, $07, $0a, $0b, $15, $19, $12, $0e
13469     0F 14 12 12 
1346d     12 0F 0F 0A 
13471     FB E5 C5 AC 
13475     9E 8D 98 A1 | 	byte	$0f, $14, $12, $12, $12, $0f, $0f, $0a, $fb, $e5, $c5, $ac, $9e, $8d, $98, $a1
13479     AE C2 D4 DF 
1347d     EB FF 17 30 
13481     41 48 46 44 
13485     43 41 3C 2D | 	byte	$ae, $c2, $d4, $df, $eb, $ff, $17, $30, $41, $48, $46, $44, $43, $41, $3c, $2d
13489     20 09 F9 E1 
1348d     D2 C7 C5 CB 
13491     D1 D7 E8 F2 
13495     05 13 17 1D | 	byte	$20, $09, $f9, $e1, $d2, $c7, $c5, $cb, $d1, $d7, $e8, $f2, $05, $13, $17, $1d
13499     26 25 19 0C 
1349d     00 EF E7 E2 
134a1     E3 EB FA 06 
134a5     0D 0A 02 F4 | 	byte	$26, $25, $19, $0c, $00, $ef, $e7, $e2, $e3, $eb, $fa, $06, $0d, $0a, $02, $f4
134a9     F6 F6 F7 FC 
134ad     FA F7 F7 F7 
134b1     FC FE FE 00 
134b5     01 02 0C 15 | 	byte	$f6, $f6, $f7, $fc, $fa, $f7, $f7, $f7, $fc, $fe, $fe, $00, $01, $02, $0c, $15
134b9     22 2F 32 2C 
134bd     2D 26 24 1C 
134c1     15 04 00 FC 
134c5     F6 F9 03 08 | 	byte	$22, $2f, $32, $2c, $2d, $26, $24, $1c, $15, $04, $00, $fc, $f6, $f9, $03, $08
134c9     0A 15 22 29 
134cd     2D 32 32 22 
134d1     10 04 06 06 
134d5     09 0A 0A 09 | 	byte	$0a, $15, $22, $29, $2d, $32, $32, $22, $10, $04, $06, $06, $09, $0a, $0a, $09
134d9     06 05 00 F5 
134dd     DC C3 AF A5 
134e1     A1 AA BB CD 
134e5     D9 E6 FA 08 | 	byte	$06, $05, $00, $f5, $dc, $c3, $af, $a5, $a1, $aa, $bb, $cd, $d9, $e6, $fa, $08
134e9     20 31 41 49 
134ed     4F 4E 3A 2D 
134f1     1B 01 EC DC 
134f5     D0 C9 CC CF | 	byte	$20, $31, $41, $49, $4f, $4e, $3a, $2d, $1b, $01, $ec, $dc, $d0, $c9, $cc, $cf
134f9     DB E1 E7 F5 
134fd     03 17 29 3A 
13501     3C 3A 39 37 
13505     2B 22 15 0E | 	byte	$db, $e1, $e7, $f5, $03, $17, $29, $3a, $3c, $3a, $39, $37, $2b, $22, $15, $0e
13509     FE F5 F0 E1 
1350d     E6 E9 E4 DB 
13511     D2 C4 BD BE 
13515     BD BF C2 CC | 	byte	$fe, $f5, $f0, $e1, $e6, $e9, $e4, $db, $d2, $c4, $bd, $be, $bd, $bf, $c2, $cc
13519     C5 CD D8 DD 
1351d     DF E7 FA 0A 
13521     22 39 4A 53 
13525     4E 44 43 3C | 	byte	$c5, $cd, $d8, $dd, $df, $e7, $fa, $0a, $22, $39, $4a, $53, $4e, $44, $43, $3c
13529     3A 33 2A 18 
1352d     05 FC F1 F2 
13531     F0 EB EC EE 
13535     F0 FC 0A 17 | 	byte	$3a, $33, $2a, $18, $05, $fc, $f1, $f2, $f0, $eb, $ec, $ee, $f0, $fc, $0a, $17
13539     1E 1C 1B 1A 
1353d     1B 22 23 24 
13541     24 23 0E 05 
13545     07 FD E4 D5 | 	byte	$1e, $1c, $1b, $1a, $1b, $22, $23, $24, $24, $23, $0e, $05, $07, $fd, $e4, $d5
13549     CC C9 C7 CF 
1354d     DB E0 E7 E9 
13551     F9 06 1C 32 
13555     3C 40 42 42 | 	byte	$cc, $c9, $c7, $cf, $db, $e0, $e7, $e9, $f9, $06, $1c, $32, $3c, $40, $42, $42
13559     3D 39 2E 17 
1355d     05 F5 E9 E2 
13561     DE E5 E5 E4 
13565     E9 F2 FD 0A | 	byte	$3d, $39, $2e, $17, $05, $f5, $e9, $e2, $de, $e5, $e5, $e4, $e9, $f2, $fd, $0a
13569     19 1E 29 28 
1356d     14 0C FF F3 
13571     E5 D9 D2 D4 
13575     D9 F1 FE 08 | 	byte	$19, $1e, $29, $28, $14, $0c, $ff, $f3, $e5, $d9, $d2, $d4, $d9, $f1, $fe, $08
13579     0C 0D 0A FF 
1357d     00 FD F3 EB 
13581     E3 D5 D7 DC 
13585     E2 F0 F4 FD | 	byte	$0c, $0d, $0a, $ff, $00, $fd, $f3, $eb, $e3, $d5, $d7, $dc, $e2, $f0, $f4, $fd
13589     03 05 0F 15 
1358d     1B 15 11 08 
13591     02 03 02 01 
13595     01 FE E9 DE | 	byte	$03, $05, $0f, $15, $1b, $15, $11, $08, $02, $03, $02, $01, $01, $fe, $e9, $de
13599     DB DC DB DB 
1359d     E0 E7 FA 0F 
135a1     21 39 37 36 
135a5     31 34 35 3A | 	byte	$db, $dc, $db, $db, $e0, $e7, $fa, $0f, $21, $39, $37, $36, $31, $34, $35, $3a
135a9     3A 33 2C 1D 
135ad     0A 06 FF EF 
135b1     DC C5 BB B7 
135b5     B6 BE C8 D1 | 	byte	$3a, $33, $2c, $1d, $0a, $06, $ff, $ef, $dc, $c5, $bb, $b7, $b6, $be, $c8, $d1
135b9     E3 F5 05 18 
135bd     29 3B 47 4C 
135c1     3F 32 2B 23 
135c5     1B 0D 03 F8 | 	byte	$e3, $f5, $05, $18, $29, $3b, $47, $4c, $3f, $32, $2b, $23, $1b, $0d, $03, $f8
135c9     EE F2 F7 FB 
135cd     FB F9 F4 FA 
135d1     0A 1E 2A 2D 
135d5     2E 27 22 21 | 	byte	$ee, $f2, $f7, $fb, $fb, $f9, $f4, $fa, $0a, $1e, $2a, $2d, $2e, $27, $22, $21
135d9     15 0D 00 FE 
135dd     F5 F6 F6 00 
135e1     00 01 FE 01 
135e5     FA F1 EC E5 | 	byte	$15, $0d, $00, $fe, $f5, $f6, $f6, $00, $00, $01, $fe, $01, $fa, $f1, $ec, $e5
135e9     E0 D7 C3 B1 
135ed     AF B2 BF CC 
135f1     D1 DF EB 02 
135f5     13 2F 3D 44 | 	byte	$e0, $d7, $c3, $b1, $af, $b2, $bf, $cc, $d1, $df, $eb, $02, $13, $2f, $3d, $44
135f9     3F 3D 3E 3D 
135fd     3D 38 29 1D 
13601     0A FA F3 F0 
13605     EE EE F0 EE | 	byte	$3f, $3d, $3e, $3d, $3d, $38, $29, $1d, $0a, $fa, $f3, $f0, $ee, $ee, $f0, $ee
13609     EE F6 F6 F3 
1360d     F2 F0 EB F1 
13611     F8 01 09 0F 
13615     09 FB F4 F0 | 	byte	$ee, $f6, $f6, $f3, $f2, $f0, $eb, $f1, $f8, $01, $09, $0f, $09, $fb, $f4, $f0
13619     EB E5 D6 CC 
1361d     C4 C0 CC D9 
13621     DD ED F7 02 
13625     1C 2D 42 49 | 	byte	$eb, $e5, $d6, $cc, $c4, $c0, $cc, $d9, $dd, $ed, $f7, $02, $1c, $2d, $42, $49
13629     46 3E 34 27 
1362d     1E 14 0C FF 
13631     FA F1 F3 F5 
13635     00 03 03 05 | 	byte	$46, $3e, $34, $27, $1e, $14, $0c, $ff, $fa, $f1, $f3, $f5, $00, $03, $03, $05
13639     05 07 0F 1D 
1363d     27 2D 2D 19 
13641     15 07 0A 07 
13645     05 00 F7 F2 | 	byte	$05, $07, $0f, $1d, $27, $2d, $2d, $19, $15, $07, $0a, $07, $05, $00, $f7, $f2
13649     F6 00 03 05 
1364d     06 09 0A 11 
13651     12 12 07 F2 
13655     E2 D4 D2 D4 | 	byte	$f6, $00, $03, $05, $06, $09, $0a, $11, $12, $12, $07, $f2, $e2, $d4, $d2, $d4
13659     E4 F1 00 0C 
1365d     1A 1D 24 25 
13661     20 1F 0F 03 
13665     FF F9 FA F7 | 	byte	$e4, $f1, $00, $0c, $1a, $1d, $24, $25, $20, $1f, $0f, $03, $ff, $f9, $fa, $f7
13669     F6 EA E4 DE 
1366d     DC D7 D8 D6 
13671     D3 D6 E1 F6 
13675     09 1A 28 2A | 	byte	$f6, $ea, $e4, $de, $dc, $d7, $d8, $d6, $d3, $d6, $e1, $f6, $09, $1a, $28, $2a
13679     2A 37 44 47 
1367d     44 3D 2A 10 
13681     02 FC FE 00 
13685     F8 EA DE D1 | 	byte	$2a, $37, $44, $47, $44, $3d, $2a, $10, $02, $fc, $fe, $00, $f8, $ea, $de, $d1
13689     C4 B2 AB A7 
1368d     A9 BB CE E9 
13691     07 19 1E 16 
13695     14 13 10 05 | 	byte	$c4, $b2, $ab, $a7, $a9, $bb, $ce, $e9, $07, $19, $1e, $16, $14, $13, $10, $05
13699     01 F5 EB E7 
1369d     EA FA 0D 1E 
136a1     2A 2D 2A 2D 
136a5     30 31 2E 23 | 	byte	$01, $f5, $eb, $e7, $ea, $fa, $0d, $1e, $2a, $2d, $2a, $2d, $30, $31, $2e, $23
136a9     15 03 FD F8 
136ad     FA FA 02 03 
136b1     08 0F 15 13 
136b5     12 0F 08 07 | 	byte	$15, $03, $fd, $f8, $fa, $fa, $02, $03, $08, $0f, $15, $13, $12, $0f, $08, $07
136b9     07 06 06 09 
136bd     06 EF DF CF 
136c1     CE D5 DE EC 
136c5     F1 F6 FC FD | 	byte	$07, $06, $06, $09, $06, $ef, $df, $cf, $ce, $d5, $de, $ec, $f1, $f6, $fc, $fd
136c9     07 0C 16 1E 
136cd     1F 1F 21 26 
136d1     25 23 19 11 
136d5     09 0D 0A 11 | 	byte	$07, $0c, $16, $1e, $1f, $1f, $21, $26, $25, $23, $19, $11, $09, $0d, $0a, $11
136d9     13 16 1B 18 
136dd     17 12 03 FE 
136e1     F4 E6 E2 DB 
136e5     DF EA EF EC | 	byte	$13, $16, $1b, $18, $17, $12, $03, $fe, $f4, $e6, $e2, $db, $df, $ea, $ef, $ec
136e9     E9 E6 E4 E5 
136ed     E8 E8 E0 D4 
136f1     D4 D6 D8 E3 
136f5     F5 FD 0C 19 | 	byte	$e9, $e6, $e4, $e5, $e8, $e8, $e0, $d4, $d4, $d6, $d8, $e3, $f5, $fd, $0c, $19
136f9     2B 3D 50 57 
136fd     4E 3A 24 13 
13701     0F 0A 0D 0B 
13705     04 F6 F2 E8 | 	byte	$2b, $3d, $50, $57, $4e, $3a, $24, $13, $0f, $0a, $0d, $0b, $04, $f6, $f2, $e8
13709     E3 DC DF DC 
1370d     DD E7 EF FD 
13711     00 FE F4 EB 
13715     EC EA E9 E4 | 	byte	$e3, $dc, $df, $dc, $dd, $e7, $ef, $fd, $00, $fe, $f4, $eb, $ec, $ea, $e9, $e4
13719     E3 D9 DC EC 
1371d     FA 0B 1C 25 
13721     29 2F 2D 23 
13725     1B 17 0D FA | 	byte	$e3, $d9, $dc, $ec, $fa, $0b, $1c, $25, $29, $2f, $2d, $23, $1b, $17, $0d, $fa
13729     E8 DD DA DD 
1372d     EF 02 13 24 
13731     2F 33 27 1F 
13735     19 0B FF 02 | 	byte	$e8, $dd, $da, $dd, $ef, $02, $13, $24, $2f, $33, $27, $1f, $19, $0b, $ff, $02
13739     01 06 0A 07 
1373d     FD FD FE 08 
13741     0E 1A 16 0C 
13745     FE F5 F6 F3 | 	byte	$01, $06, $0a, $07, $fd, $fd, $fe, $08, $0e, $1a, $16, $0c, $fe, $f5, $f6, $f3
13749     F6 F9 00 06 
1374d     05 07 0F 19 
13751     1D 1C 17 16 
13755     11 10 15 1F | 	byte	$f6, $f9, $00, $06, $05, $07, $0f, $19, $1d, $1c, $17, $16, $11, $10, $15, $1f
13759     1B 16 16 09 
1375d     FC 00 00 E0 
13761     F6 F5 04 0D 
13765     13 14 16 0C | 	byte	$1b, $16, $16, $09, $fc, $00, $00, $e0, $f6, $f5, $04, $0d, $13, $14, $16, $0c
13769     0E 0F 12 17 
1376d     17 0C FD F0 
13771     EC EE F8 08 
13775     06 0E 0F 0D | 	byte	$0e, $0f, $12, $17, $17, $0c, $fd, $f0, $ec, $ee, $f8, $08, $06, $0e, $0f, $0d
13779     0A 07 06 01 
1377d     01 FF FF F8 
13781     F7 F2 E3 D9 
13785     BC AE AB A9 | 	byte	$0a, $07, $06, $01, $01, $ff, $ff, $f8, $f7, $f2, $e3, $d9, $bc, $ae, $ab, $a9
13789     AB AC B8 C6 
1378d     DA ED FD 05 
13791     12 1C 2B 39 
13795     4B 57 59 4E | 	byte	$ab, $ac, $b8, $c6, $da, $ed, $fd, $05, $12, $1c, $2b, $39, $4b, $57, $59, $4e
13799     35 16 F7 EE 
1379d     E9 EA E9 DF 
137a1     D1 CE CE CE 
137a5     D5 E3 E6 FE | 	byte	$35, $16, $f7, $ee, $e9, $ea, $e9, $df, $d1, $ce, $ce, $ce, $d5, $e3, $e6, $fe
137a9     0E 1F 20 29 
137ad     2D 27 1B 16 
137b1     0D 09 FF F9 
137b5     F7 EC E4 E9 | 	byte	$0e, $1f, $20, $29, $2d, $27, $1b, $16, $0d, $09, $ff, $f9, $f7, $ec, $e4, $e9
137b9     DF E3 E4 EE 
137bd     F7 04 12 20 
137c1     2A 2E 2A 2D 
137c5     2A 2D 38 40 | 	byte	$df, $e3, $e4, $ee, $f7, $04, $12, $20, $2a, $2e, $2a, $2d, $2a, $2d, $38, $40
137c9     3F 38 1A 06 
137cd     F1 E0 D7 DB 
137d1     CE D3 DA DC 
137d5     F1 FD FF F8 | 	byte	$3f, $38, $1a, $06, $f1, $e0, $d7, $db, $ce, $d3, $da, $dc, $f1, $fd, $ff, $f8
137d9     E7 E2 D9 DD 
137dd     D1 CD CE CB 
137e1     D0 D7 DE ED 
137e5     F1 F8 02 07 | 	byte	$e7, $e2, $d9, $dd, $d1, $cd, $ce, $cb, $d0, $d7, $de, $ed, $f1, $f8, $02, $07
137e9     06 0E 06 05 
137ed     05 0A 0E 15 
137f1     24 2E 33 38 
137f5     34 2A 2D 2D | 	byte	$06, $0e, $06, $05, $05, $0a, $0e, $15, $24, $2e, $33, $38, $34, $2a, $2d, $2d
137f9     2C 2A 22 21 
137fd     10 03 F9 EA 
13801     E7 E2 C4 B9 
13805     B4 AB AD AF | 	byte	$2c, $2a, $22, $21, $10, $03, $f9, $ea, $e7, $e2, $c4, $b9, $b4, $ab, $ad, $af
13809     AF B1 BB C9 
1380d     D6 EA E4 EF 
13811     EE FE 01 11 
13815     1A 20 1F 1D | 	byte	$af, $b1, $bb, $c9, $d6, $ea, $e4, $ef, $ee, $fe, $01, $11, $1a, $20, $1f, $1d
13819     1C 12 0D 04 
1381d     F7 E9 D5 D3 
13821     C2 CC D3 DD 
13825     F1 04 17 2F | 	byte	$1c, $12, $0d, $04, $f7, $e9, $d5, $d3, $c2, $cc, $d3, $dd, $f1, $04, $17, $2f
13829     41 5D 69 6E 
1382d     62 4A 3A 1F 
13831     07 F9 E8 DF 
13835     E0 DD D8 E9 | 	byte	$41, $5d, $69, $6e, $62, $4a, $3a, $1f, $07, $f9, $e8, $df, $e0, $dd, $d8, $e9
13839     E4 EB ED F2 
1383d     F6 FA 01 08 
13841     07 07 0C 10 
13845     19 1D 22 1C | 	byte	$e4, $eb, $ed, $f2, $f6, $fa, $01, $08, $07, $07, $0c, $10, $19, $1d, $22, $1c
13849     15 0C FF F5 
1384d     F2 DA CF D3 
13851     C9 D1 E5 F6 
13855     0C 14 12 07 | 	byte	$15, $0c, $ff, $f5, $f2, $da, $cf, $d3, $c9, $d1, $e5, $f6, $0c, $14, $12, $07
13859     07 05 07 0C 
1385d     10 0F 0E FE 
13861     F9 F2 E1 DE 
13865     D8 D9 E1 E0 | 	byte	$07, $05, $07, $0c, $10, $0f, $0e, $fe, $f9, $f2, $e1, $de, $d8, $d9, $e1, $e0
13869     E7 F2 00 08 
1386d     1B 2B 2D 32 
13871     38 36 1F 0C 
13875     FB ED E1 DC | 	byte	$e7, $f2, $00, $08, $1b, $2b, $2d, $32, $38, $36, $1f, $0c, $fb, $ed, $e1, $dc
13879     D5 DC E2 F0 
1387d     F4 FF 09 06 
13881     F2 D7 C7 B5 
13885     B4 BB BC CE | 	byte	$d5, $dc, $e2, $f0, $f4, $ff, $09, $06, $f2, $d7, $c7, $b5, $b4, $bb, $bc, $ce
13889     E0 E7 FB 12 
1388d     19 31 32 34 
13891     2C 26 18 11 
13895     04 FB FE F6 | 	byte	$e0, $e7, $fb, $12, $19, $31, $32, $34, $2c, $26, $18, $11, $04, $fb, $fe, $f6
13899     03 FE FF FE 
1389d     F6 EF DC D4 
138a1     CF C5 CC DB 
138a5     E2 EF FD 0A | 	byte	$03, $fe, $ff, $fe, $f6, $ef, $dc, $d4, $cf, $c5, $cc, $db, $e2, $ef, $fd, $0a
138a9     20 2D 2F 21 
138ad     21 16 1A 1A 
138b1     17 14 0C F6 
138b5     EF E7 E2 E1 | 	byte	$20, $2d, $2f, $21, $21, $16, $1a, $1a, $17, $14, $0c, $f6, $ef, $e7, $e2, $e1
138b9     E3 E4 EF EE 
138bd     FB 08 15 2E 
138c1     48 58 63 60 
138c5     5D 4B 2B 17 | 	byte	$e3, $e4, $ef, $ee, $fb, $08, $15, $2e, $48, $58, $63, $60, $5d, $4b, $2b, $17
138c9     FB E7 E1 C5 
138cd     C5 C3 CB DB 
138d1     EE FA 0B 12 
138d5     05 F7 E4 C9 | 	byte	$fb, $e7, $e1, $c5, $c5, $c3, $cb, $db, $ee, $fa, $0b, $12, $05, $f7, $e4, $c9
138d9     BB B9 B9 BC 
138dd     BF C7 D1 DE 
138e1     E8 F5 FF 03 
138e5     00 EE E4 DE | 	byte	$bb, $b9, $b9, $bc, $bf, $c7, $d1, $de, $e8, $f5, $ff, $03, $00, $ee, $e4, $de
138e9     E0 F0 04 1E 
138ed     36 4E 67 6D 
138f1     75 6E 64 4C 
138f5     36 16 F3 E1 | 	byte	$e0, $f0, $04, $1e, $36, $4e, $67, $6d, $75, $6e, $64, $4c, $36, $16, $f3, $e1
138f9     D0 CD C8 D1 
138fd     DF E4 E9 D6 
13901     D1 CA CA CA 
13905     CC CF D0 DA | 	byte	$d0, $cd, $c8, $d1, $df, $e4, $e9, $d6, $d1, $ca, $ca, $ca, $cc, $cf, $d0, $da
13909     E3 DC E8 ED 
1390d     EE F3 F0 E3 
13911     E4 E4 EB F2 
13915     FC 09 12 0A | 	byte	$e3, $dc, $e8, $ed, $ee, $f3, $f0, $e3, $e4, $e4, $eb, $f2, $fc, $09, $12, $0a
13919     09 FE F8 E9 
1391d     DC D2 CD CB 
13921     D5 DA F8 0E 
13925     27 46 5D 69 | 	byte	$09, $fe, $f8, $e9, $dc, $d2, $cd, $cb, $d5, $da, $f8, $0e, $27, $46, $5d, $69
13929     6C 52 43 28 
1392d     19 12 0D 0D 
13931     01 FD FE F9 
13935     FA F2 F2 ED | 	byte	$6c, $52, $43, $28, $19, $12, $0d, $0d, $01, $fd, $fe, $f9, $fa, $f2, $f2, $ed
13939     E3 D4 C8 B5 
1393d     B6 C5 D8 EF 
13941     06 17 23 31 
13945     38 40 34 2C | 	byte	$e3, $d4, $c8, $b5, $b6, $c5, $d8, $ef, $06, $17, $23, $31, $38, $40, $34, $2c
13949     1D 01 EE D7 
1394d     D2 D3 D6 E8 
13951     03 17 1E 1D 
13955     16 0D 05 05 | 	byte	$1d, $01, $ee, $d7, $d2, $d3, $d6, $e8, $03, $17, $1e, $1d, $16, $0d, $05, $05
13959     FE F9 F4 EA 
1395d     E4 DE DC D7 
13961     D8 DB D6 CA 
13965     C1 C2 CD E5 | 	byte	$fe, $f9, $f4, $ea, $e4, $de, $dc, $d7, $d8, $db, $d6, $ca, $c1, $c2, $cd, $e5
13969     F7 11 20 37 
1396d     37 39 3E 38 
13971     31 1C 09 ED 
13975     D0 BD B7 B9 | 	byte	$f7, $11, $20, $37, $37, $39, $3e, $38, $31, $1c, $09, $ed, $d0, $bd, $b7, $b9
13979     C4 D6 DF F4 
1397d     F7 EC DE D4 
13981     CC CB D0 DB 
13985     EB FF 11 1F | 	byte	$c4, $d6, $df, $f4, $f7, $ec, $de, $d4, $cc, $cb, $d0, $db, $eb, $ff, $11, $1f
13989     32 36 3B 3A 
1398d     30 1B 0A F4 
13991     EE E1 DF EC 
13995     E9 EA EC EA | 	byte	$32, $36, $3b, $3a, $30, $1b, $0a, $f4, $ee, $e1, $df, $ec, $e9, $ea, $ec, $ea
13999     EF FB FA F2 
1399d     E8 DA C1 A7 
139a1     A3 A4 B4 C7 
139a5     E1 FC 15 1A | 	byte	$ef, $fb, $fa, $f2, $e8, $da, $c1, $a7, $a3, $a4, $b4, $c7, $e1, $fc, $15, $1a
139a9     1D 1D 25 2B 
139ad     31 3B 37 37 
139b1     30 27 1A 07 
139b5     00 F3 F1 F0 | 	byte	$1d, $1d, $25, $2b, $31, $3b, $37, $37, $30, $27, $1a, $07, $00, $f3, $f1, $f0
139b9     E0 DE DD E8 
139bd     F5 11 1F 2A 
139c1     33 32 32 35 
139c5     34 2F 16 05 | 	byte	$e0, $de, $dd, $e8, $f5, $11, $1f, $2a, $33, $32, $32, $35, $34, $2f, $16, $05
139c9     EA D9 D6 D6 
139cd     E6 F3 00 13 
139d1     0E FD DC CF 
139d5     BA AF AB AF | 	byte	$ea, $d9, $d6, $d6, $e6, $f3, $00, $13, $0e, $fd, $dc, $cf, $ba, $af, $ab, $af
139d9     B1 C1 C8 DC 
139dd     E5 EB FA FC 
139e1     F9 EF DD D1 
139e5     CA CB DB F6 | 	byte	$b1, $c1, $c8, $dc, $e5, $eb, $fa, $fc, $f9, $ef, $dd, $d1, $ca, $cb, $db, $f6
139e9     07 2B 3E 54 
139ed     60 6C 78 75 
139f1     65 4F 20 FD 
139f5     E1 CD C5 C0 | 	byte	$07, $2b, $3e, $54, $60, $6c, $78, $75, $65, $4f, $20, $fd, $e1, $cd, $c5, $c0
139f9     C2 CC D0 D2 
139fd     CF CF D0 D2 
13a01     D7 DD DB D6 
13a05     D6 D9 E3 E1 | 	byte	$c2, $cc, $d0, $d2, $cf, $cf, $d0, $d2, $d7, $dd, $db, $d6, $d6, $d9, $e3, $e1
13a09     E9 EA E8 E9 
13a0d     E9 E4 E8 E0 
13a11     E7 EE F3 02 
13a15     FE F6 F6 F3 | 	byte	$e9, $ea, $e8, $e9, $e9, $e4, $e8, $e0, $e7, $ee, $f3, $02, $fe, $f6, $f6, $f3
13a19     F5 FC FD FD 
13a1d     EB E4 DB D7 
13a21     E3 F0 02 14 
13a25     2E 32 35 2F | 	byte	$f5, $fc, $fd, $fd, $eb, $e4, $db, $d7, $e3, $f0, $02, $14, $2e, $32, $35, $2f
13a29     26 25 1B 1D 
13a2d     1D 27 25 2A 
13a31     29 24 15 0B 
13a35     FE DC C3 B0 | 	byte	$26, $25, $1b, $1d, $1d, $27, $25, $2a, $29, $24, $15, $0b, $fe, $dc, $c3, $b0
13a39     AB A7 AB BD 
13a3d     CC E2 F8 04 
13a41     0D 1D 2A 38 
13a45     3A 3A 20 0E | 	byte	$ab, $a7, $ab, $bd, $cc, $e2, $f8, $04, $0d, $1d, $2a, $38, $3a, $3a, $20, $0e
13a49     F8 E9 EA EA 
13a4d     FA 06 10 0F 
13a51     04 FF F5 F0 
13a55     EB F2 F3 FF | 	byte	$f8, $e9, $ea, $ea, $fa, $06, $10, $0f, $04, $ff, $f5, $f0, $eb, $f2, $f3, $ff
13a59     FF 01 00 FD 
13a5d     E8 DD D6 C9 
13a61     C4 C3 C3 C6 
13a65     D7 E3 F6 F7 | 	byte	$ff, $01, $00, $fd, $e8, $dd, $d6, $c9, $c4, $c3, $c3, $c6, $d7, $e3, $f6, $f7
13a69     F9 01 01 08 
13a6d     12 1C 21 1D 
13a71     04 ED D6 C9 
13a75     C5 C6 D2 DB | 	byte	$f9, $01, $01, $08, $12, $1c, $21, $1d, $04, $ed, $d6, $c9, $c5, $c6, $d2, $db
13a79     ED F1 ED ED 
13a7d     EC EA EF F1 
13a81     FC 07 0F 18 
13a85     1D 1C 1D 1C | 	byte	$ed, $f1, $ed, $ed, $ec, $ea, $ef, $f1, $fc, $07, $0f, $18, $1d, $1c, $1d, $1c
13a89     1A 1A 10 0F 
13a8d     08 F2 E6 CF 
13a91     D6 D3 D2 DD 
13a95     DD E2 EE F9 | 	byte	$1a, $1a, $10, $0f, $08, $f2, $e6, $cf, $d6, $d3, $d2, $dd, $dd, $e2, $ee, $f9
13a99     01 F5 E1 C6 
13a9d     B8 A8 A7 AB 
13aa1     B7 C6 DA ED 
13aa5     F1 F8 10 10 | 	byte	$01, $f5, $e1, $c6, $b8, $a8, $a7, $ab, $b7, $c6, $da, $ed, $f1, $f8, $10, $10
13aa9     1E 30 41 4D 
13aad     51 56 4F 3F 
13ab1     28 18 06 EC 
13ab5     E3 D6 D2 D0 | 	byte	$1e, $30, $41, $4d, $51, $56, $4f, $3f, $28, $18, $06, $ec, $e3, $d6, $d2, $d0
13ab9     DD E6 FE 0F 
13abd     20 32 39 31 
13ac1     28 28 20 23 
13ac5     16 06 F0 ED | 	byte	$dd, $e6, $fe, $0f, $20, $32, $39, $31, $28, $28, $20, $23, $16, $06, $f0, $ed
13ac9     E8 E9 F3 EC 
13acd     E5 D5 C2 B6 
13ad1     B1 AB AF B2 
13ad5     BF D3 E3 EC | 	byte	$e8, $e9, $f3, $ec, $e5, $d5, $c2, $b6, $b1, $ab, $af, $b2, $bf, $d3, $e3, $ec
13ad9     FC 00 FD FE 
13add     FD FB F4 F2 
13ae1     E8 E3 E5 E8 
13ae5     F3 FC 09 12 | 	byte	$fc, $00, $fd, $fe, $fd, $fb, $f4, $f2, $e8, $e3, $e5, $e8, $f3, $fc, $09, $12
13ae9     1D 2A 34 42 
13aed     58 5A 53 3D 
13af1     1D 03 DE C5 
13af5     B9 B7 B8 BA | 	byte	$1d, $2a, $34, $42, $58, $5a, $53, $3d, $1d, $03, $de, $c5, $b9, $b7, $b8, $ba
13af9     B9 BE C8 D7 
13afd     E1 DA DC E1 
13b01     EB F1 F7 F3 
13b05     F2 E7 E6 E5 | 	byte	$b9, $be, $c8, $d7, $e1, $da, $dc, $e1, $eb, $f1, $f7, $f3, $f2, $e7, $e6, $e5
13b09     E5 EA EC E4 
13b0d     DB DB E0 E1 
13b11     E9 EE F0 F2 
13b15     F3 FB 04 03 | 	byte	$e5, $ea, $ec, $e4, $db, $db, $e0, $e1, $e9, $ee, $f0, $f2, $f3, $fb, $04, $03
13b19     05 F9 EB E2 
13b1d     E3 E1 F5 05 
13b21     18 28 21 26 
13b25     1E 14 16 11 | 	byte	$05, $f9, $eb, $e2, $e3, $e1, $f5, $05, $18, $28, $21, $26, $1e, $14, $16, $11
13b29     1D 26 35 3C 
13b2d     44 3D 2A 09 
13b31     EC D3 C5 B2 
13b35     AF AA A8 A9 | 	byte	$1d, $26, $35, $3c, $44, $3d, $2a, $09, $ec, $d3, $c5, $b2, $af, $aa, $a8, $a9
13b39     B9 C6 DC F3 
13b3d     03 0C 1B 27 
13b41     3E 4B 50 40 
13b45     31 24 09 04 | 	byte	$b9, $c6, $dc, $f3, $03, $0c, $1b, $27, $3e, $4b, $50, $40, $31, $24, $09, $04
13b49     FE F9 F7 EB 
13b4d     D7 CB CF D2 
13b51     E3 EC FF 0F 
13b55     1A 26 23 0E | 	byte	$fe, $f9, $f7, $eb, $d7, $cb, $cf, $d2, $e3, $ec, $ff, $0f, $1a, $26, $23, $0e
13b59     F9 E8 D1 CC 
13b5d     C8 CC CE D8 
13b61     D4 CA CC CC 
13b65     CF D9 E6 E9 | 	byte	$f9, $e8, $d1, $cc, $c8, $cc, $ce, $d8, $d4, $ca, $cc, $cc, $cf, $d9, $e6, $e9
13b69     F5 02 10 1D 
13b6d     21 1B 10 00 
13b71     EF E6 DE E3 
13b75     EA E8 DB DB | 	byte	$f5, $02, $10, $1d, $21, $1b, $10, $00, $ef, $e6, $de, $e3, $ea, $e8, $db, $db
13b79     D8 DB E2 E7 
13b7d     EE FC 08 16 
13b81     28 30 2D 2C 
13b85     29 27 25 27 | 	byte	$d8, $db, $e2, $e7, $ee, $fc, $08, $16, $28, $30, $2d, $2c, $29, $27, $25, $27
13b89     1A FD E2 CF 
13b8d     BF B8 BC BF 
13b91     C7 D1 DA D3 
13b95     D6 DD DB D1 | 	byte	$1a, $fd, $e2, $cf, $bf, $b8, $bc, $bf, $c7, $d1, $da, $d3, $d6, $dd, $db, $d1
13b99     C8 C7 B7 B9 
13b9d     BA C7 DB E9 
13ba1     EB F9 02 16 
13ba5     24 3C 49 58 | 	byte	$c8, $c7, $b7, $b9, $ba, $c7, $db, $e9, $eb, $f9, $02, $16, $24, $3c, $49, $58
13ba9     64 66 66 5A 
13bad     41 21 08 F4 
13bb1     E5 E2 E0 EA 
13bb5     E6 EB F5 02 | 	byte	$64, $66, $66, $5a, $41, $21, $08, $f4, $e5, $e2, $e0, $ea, $e6, $eb, $f5, $02
13bb9     0E 1A 12 12 
13bbd     08 0A 0D 18 
13bc1     1C 11 16 0B 
13bc5     03 EE E0 DC | 	byte	$0e, $1a, $12, $12, $08, $0a, $0d, $18, $1c, $11, $16, $0b, $03, $ee, $e0, $dc
13bc9     CB C6 A9 A8 
13bcd     A1 A5 AF BD 
13bd1     D4 E4 FB 0B 
13bd5     1C 20 20 16 | 	byte	$cb, $c6, $a9, $a8, $a1, $a5, $af, $bd, $d4, $e4, $fb, $0b, $1c, $20, $20, $16
13bd9     12 FD FC EE 
13bdd     F2 F0 DE E0 
13be1     D6 DB E6 EF 
13be5     FD 11 23 31 | 	byte	$12, $fd, $fc, $ee, $f2, $f0, $de, $e0, $d6, $db, $e6, $ef, $fd, $11, $23, $31
13be9     49 56 5A 4F 
13bed     3B 1C 03 E5 
13bf1     CE C7 C2 C1 
13bf5     B6 B6 B8 B6 | 	byte	$49, $56, $5a, $4f, $3b, $1c, $03, $e5, $ce, $c7, $c2, $c1, $b6, $b6, $b8, $b6
13bf9     B6 B9 C4 CD 
13bfd     DB ED FD 00 
13c01     FF F4 F5 ED 
13c05     F0 F2 FC FA | 	byte	$b6, $b9, $c4, $cd, $db, $ed, $fd, $00, $ff, $f4, $f5, $ed, $f0, $f2, $fc, $fa
13c09     F5 F5 EB E7 
13c0d     E9 E8 E9 E9 
13c11     E2 E3 E4 F4 
13c15     FB FB FD FD | 	byte	$f5, $f5, $eb, $e7, $e9, $e8, $e9, $e9, $e2, $e3, $e4, $f4, $fb, $fb, $fd, $fd
13c19     FD FD FF 09 
13c1d     0F 0F 04 FF 
13c21     FF 01 08 11 
13c25     20 32 3B 4E | 	byte	$fd, $fd, $ff, $09, $0f, $0f, $04, $ff, $ff, $01, $08, $11, $20, $32, $3b, $4e
13c29     4C 40 27 0E 
13c2d     F9 E0 CD C8 
13c31     C9 C6 C5 C5 
13c35     C3 CE DC E3 | 	byte	$4c, $40, $27, $0e, $f9, $e0, $cd, $c8, $c9, $c6, $c5, $c5, $c3, $ce, $dc, $e3
13c39     F7 09 15 28 
13c3d     34 46 42 44 
13c41     33 25 17 FC 
13c45     F2 E8 DD CA | 	byte	$f7, $09, $15, $28, $34, $46, $42, $44, $33, $25, $17, $fc, $f2, $e8, $dd, $ca
13c49     BF BD C8 D7 
13c4d     E9 FE 0A 16 
13c51     1B 22 21 1F 
13c55     12 04 F7 EB | 	byte	$bf, $bd, $c8, $d7, $e9, $fe, $0a, $16, $1b, $22, $21, $1f, $12, $04, $f7, $eb
13c59     D9 DD D6 C8 
13c5d     C6 BC B3 AB 
13c61     B3 B4 C6 D5 
13c65     E3 F6 FF 19 | 	byte	$d9, $dd, $d6, $c8, $c6, $bc, $b3, $ab, $b3, $b4, $c6, $d5, $e3, $f6, $ff, $19
13c69     19 27 2A 29 
13c6d     1F 1A 10 07 
13c71     FA EB D4 C5 
13c75     C6 C6 CB D5 | 	byte	$19, $27, $2a, $29, $1f, $1a, $10, $07, $fa, $eb, $d4, $c5, $c6, $c6, $cb, $d5
13c79     E9 F9 0A 21 
13c7d     36 42 3F 42 
13c81     35 2A 17 0B 
13c85     FA EE E2 CF | 	byte	$e9, $f9, $0a, $21, $36, $42, $3f, $42, $35, $2a, $17, $0b, $fa, $ee, $e2, $cf
13c89     BE BB B0 B7 
13c8d     B5 B4 B6 B6 
13c91     B6 C3 CB DA 
13c95     DE E0 DF DD | 	byte	$be, $bb, $b0, $b7, $b5, $b4, $b6, $b6, $b6, $c3, $cb, $da, $de, $e0, $df, $dd
13c99     DC E6 E6 E8 
13c9d     ED F4 05 1B 
13ca1     2B 3B 3E 4A 
13ca5     46 47 4A 3F | 	byte	$dc, $e6, $e6, $e8, $ed, $f4, $05, $1b, $2b, $3b, $3e, $4a, $46, $47, $4a, $3f
13ca9     31 2A 1C 10 
13cad     07 02 06 09 
13cb1     11 13 0E FF 
13cb5     FF F4 F5 FA | 	byte	$31, $2a, $1c, $10, $07, $02, $06, $09, $11, $13, $0e, $ff, $ff, $f4, $f5, $fa
13cb9     00 04 03 0D 
13cbd     0D 15 0E 05 
13cc1     FB EB D8 C5 
13cc5     BC A4 9C 96 | 	byte	$00, $04, $03, $0d, $0d, $15, $0e, $05, $fb, $eb, $d8, $c5, $bc, $a4, $9c, $96
13cc9     9A A6 BA CF 
13ccd     DC F7 06 1B 
13cd1     2D 38 36 36 
13cd5     25 13 FE EE | 	byte	$9a, $a6, $ba, $cf, $dc, $f7, $06, $1b, $2d, $38, $36, $36, $25, $13, $fe, $ee
13cd9     E7 E2 E5 E4 
13cdd     E5 E6 E6 EE 
13ce1     FD 0F 21 2D 
13ce5     2C 2A 23 1E | 	byte	$e7, $e2, $e5, $e4, $e5, $e6, $e6, $ee, $fd, $0f, $21, $2d, $2c, $2a, $23, $1e
13ce9     1F 15 0D FD 
13ced     F0 E2 DE C0 
13cf1     B0 A4 A2 A4 
13cf5     A7 B3 C5 D7 | 	byte	$1f, $15, $0d, $fd, $f0, $e2, $de, $c0, $b0, $a4, $a2, $a4, $a7, $b3, $c5, $d7
13cf9     E8 F4 02 0B 
13cfd     0E 0E 0F 0D 
13d01     0F 0D 08 07 
13d05     09 FD ED D6 | 	byte	$e8, $f4, $02, $0b, $0e, $0e, $0f, $0d, $0f, $0d, $08, $07, $09, $fd, $ed, $d6
13d09     C5 BC B9 BF 
13d0d     CE D5 E2 E7 
13d11     EE FD 0A 14 
13d15     1C 1C 12 07 | 	byte	$c5, $bc, $b9, $bf, $ce, $d5, $e2, $e7, $ee, $fd, $0a, $14, $1c, $1c, $12, $07
13d19     0A F8 F5 F7 
13d1d     01 07 17 21 
13d21     2F 2A 2A 27 
13d25     1D 14 07 02 | 	byte	$0a, $f8, $f5, $f7, $01, $07, $17, $21, $2f, $2a, $2a, $27, $1d, $14, $07, $02
13d29     F4 EF E8 DE 
13d2d     E0 E0 EB E8 
13d31     E9 E6 E6 F0 
13d35     FE 11 2D 32 | 	byte	$f4, $ef, $e8, $de, $e0, $e0, $eb, $e8, $e9, $e6, $e6, $f0, $fe, $11, $2d, $32
13d39     35 27 1F 16 
13d3d     17 17 12 0E 
13d41     FD EF E2 CF 
13d45     CB CC D9 E2 | 	byte	$35, $27, $1f, $16, $17, $17, $12, $0e, $fd, $ef, $e2, $cf, $cb, $cc, $d9, $e2
13d49     F0 F4 03 07 
13d4d     11 12 14 12 
13d51     13 09 05 ED 
13d55     DB CA BA BE | 	byte	$f0, $f4, $03, $07, $11, $12, $14, $12, $13, $09, $05, $ed, $db, $ca, $ba, $be
13d59     BC B9 BA B9 
13d5d     B6 B9 CA D6 
13d61     F3 FC 09 0E 
13d65     18 26 30 3E | 	byte	$bc, $b9, $ba, $b9, $b6, $b9, $ca, $d6, $f3, $fc, $09, $0e, $18, $26, $30, $3e
13d69     42 34 1F 03 
13d6d     E5 C7 B3 B1 
13d71     B4 BF D3 E5 
13d75     FF 13 28 38 | 	byte	$42, $34, $1f, $03, $e5, $c7, $b3, $b1, $b4, $bf, $d3, $e5, $ff, $13, $28, $38
13d79     4A 43 42 3D 
13d7d     32 2C 1D 0B 
13d81     FB F8 F1 E7 
13d85     D8 B8 A3 94 | 	byte	$4a, $43, $42, $3d, $32, $2c, $1d, $0b, $fb, $f8, $f1, $e7, $d8, $b8, $a3, $94
13d89     91 93 A0 A5 
13d8d     B3 B1 B9 C5 
13d91     DC E9 F6 FB 
13d95     FA FA F2 F3 | 	byte	$91, $93, $a0, $a5, $b3, $b1, $b9, $c5, $dc, $e9, $f6, $fb, $fa, $fa, $f2, $f3
13d99     F3 04 12 1F 
13d9d     29 28 2A 2D 
13da1     32 36 36 31 
13da5     37 34 34 34 | 	byte	$f3, $04, $12, $1f, $29, $28, $2a, $2d, $32, $36, $36, $31, $37, $34, $34, $34
13da9     28 29 28 28 
13dad     1D 1C 0C FB 
13db1     E9 DD DF EF 
13db5     FD 09 10 FD | 	byte	$28, $29, $28, $28, $1d, $1c, $0c, $fb, $e9, $dd, $df, $ef, $fd, $09, $10, $fd
13db9     F4 EF F2 F5 
13dbd     FA F7 E5 D6 
13dc1     BD AD A6 A9 
13dc5     AE C1 CD E4 | 	byte	$f4, $ef, $f2, $f5, $fa, $f7, $e5, $d6, $bd, $ad, $a6, $a9, $ae, $c1, $cd, $e4
13dc9     FD 13 24 39 
13dcd     37 35 2A 1A 
13dd1     09 FB EF E3 
13dd5     E0 E1 E4 F0 | 	byte	$fd, $13, $24, $39, $37, $35, $2a, $1a, $09, $fb, $ef, $e3, $e0, $e1, $e4, $f0
13dd9     F0 ED E8 E9 
13ddd     EE 01 00 11 
13de1     15 0E 08 0A 
13de5     0F 1E 2B 2E | 	byte	$f0, $ed, $e8, $e9, $ee, $01, $00, $11, $15, $0e, $08, $0a, $0f, $1e, $2b, $2e
13de9     1E 01 E6 B9 
13ded     AA 9B 9A 9B 
13df1     9E B3 BF D8 
13df5     ED 06 06 0B | 	byte	$1e, $01, $e6, $b9, $aa, $9b, $9a, $9b, $9e, $b3, $bf, $d8, $ed, $06, $06, $0b
13df9     10 15 24 2E 
13dfd     31 2B 22 19 
13e01     02 F8 E4 C9 
13e05     BB AF B1 BE | 	byte	$10, $15, $24, $2e, $31, $2b, $22, $19, $02, $f8, $e4, $c9, $bb, $af, $b1, $be
13e09     CD E4 EF EC 
13e0d     E7 F3 00 11 
13e11     1D 1A 1C 12 
13e15     02 E9 E4 EB | 	byte	$cd, $e4, $ef, $ec, $e7, $f3, $00, $11, $1d, $1a, $1c, $12, $02, $e9, $e4, $eb
13e19     F2 06 0F 0D 
13e1d     10 13 13 13 
13e21     0E 0A 06 05 
13e25     07 0C 15 16 | 	byte	$f2, $06, $0f, $0d, $10, $13, $13, $13, $0e, $0a, $06, $05, $07, $0c, $15, $16
13e29     14 0F 0F 0E 
13e2d     0E 0D 01 FD 
13e31     F8 FF FE FF 
13e35     02 F7 EA F0 | 	byte	$14, $0f, $0f, $0e, $0e, $0d, $01, $fd, $f8, $ff, $fe, $ff, $02, $f7, $ea, $f0
13e39     F7 0B 1E 26 
13e3d     21 11 FF E7 
13e41     DA DF DF E1 
13e45     EE FC 00 0C | 	byte	$f7, $0b, $1e, $26, $21, $11, $ff, $e7, $da, $df, $df, $e1, $ee, $fc, $00, $0c
13e49     16 1C 1A 1C 
13e4d     15 FF F7 EF 
13e51     E0 DB CC C8 
13e55     C1 C1 C1 BF | 	byte	$16, $1c, $1a, $1c, $15, $ff, $f7, $ef, $e0, $db, $cc, $c8, $c1, $c1, $c1, $bf
13e59     BF BE BE C6 
13e5d     CD E8 F5 02 
13e61     04 0A 19 2B 
13e65     2D 2E 29 16 | 	byte	$bf, $be, $be, $c6, $cd, $e8, $f5, $02, $04, $0a, $19, $2b, $2d, $2e, $29, $16
13e69     FC E7 D7 D6 
13e6d     DD DF EA F2 
13e71     F8 0D 1B 2D 
13e75     29 2E 26 28 | 	byte	$fc, $e7, $d7, $d6, $dd, $df, $ea, $f2, $f8, $0d, $1b, $2d, $29, $2e, $26, $28
13e79     23 21 21 11 
13e7d     0D 08 FE E7 
13e81     D7 C7 B5 A3 
13e85     9A 96 9A AF | 	byte	$23, $21, $21, $11, $0d, $08, $fe, $e7, $d7, $c7, $b5, $a3, $9a, $96, $9a, $af
13e89     B7 BD BD C4 
13e8d     CE DE F1 03 
13e91     11 13 14 02 
13e95     FF F8 FA F7 | 	byte	$b7, $bd, $bd, $c4, $ce, $de, $f1, $03, $11, $13, $14, $02, $ff, $f8, $fa, $f7
13e99     F5 FA 00 0E 
13e9d     1B 2D 31 42 
13ea1     3F 41 43 44 
13ea5     50 4F 4E 44 | 	byte	$f5, $fa, $00, $0e, $1b, $2d, $31, $42, $3f, $41, $43, $44, $50, $4f, $4e, $44
13ea9     3E 2E 27 13 
13ead     02 F2 EA E5 
13eb1     E5 E8 E8 E0 
13eb5     DB CC CA D5 | 	byte	$3e, $2e, $27, $13, $02, $f2, $ea, $e5, $e5, $e8, $e8, $e0, $db, $cc, $ca, $d5
13eb9     DE EC EF EE 
13ebd     EE D7 D0 CB 
13ec1     CE D8 E7 F3 
13ec5     04 12 1E 22 | 	byte	$de, $ec, $ef, $ee, $ee, $d7, $d0, $cb, $ce, $d8, $e7, $f3, $04, $12, $1e, $22
13ec9     20 16 0D 04 
13ecd     00 00 07 0E 
13ed1     0E 15 14 0D 
13ed5     03 FB F5 E7 | 	byte	$20, $16, $0d, $04, $00, $00, $07, $0e, $0e, $15, $14, $0d, $03, $fb, $f5, $e7
13ed9     DE DB DF E4 
13edd     EA EC E7 E6 
13ee1     EB F7 0B 12 
13ee5     15 13 09 EA | 	byte	$de, $db, $df, $e4, $ea, $ec, $e7, $e6, $eb, $f7, $0b, $12, $15, $13, $09, $ea
13ee9     D1 C8 BC B9 
13eed     BA BD C9 D7 
13ef1     EA F3 FD 03 
13ef5     0C 1B 1E 2C | 	byte	$d1, $c8, $bc, $b9, $ba, $bd, $c9, $d7, $ea, $f3, $fd, $03, $0c, $1b, $1e, $2c
13ef9     2F 23 1E 0B 
13efd     FF F2 E5 DE 
13f01     DD D8 D9 DB 
13f05     E5 E9 F2 F1 | 	byte	$2f, $23, $1e, $0b, $ff, $f2, $e5, $de, $dd, $d8, $d9, $db, $e5, $e9, $f2, $f1
13f09     F0 EE E7 EE 
13f0d     F8 05 0A 11 
13f11     17 FB F9 F4 
13f15     FB F5 F6 F3 | 	byte	$f0, $ee, $e7, $ee, $f8, $05, $0a, $11, $17, $fb, $f9, $f4, $fb, $f5, $f6, $f3
13f19     F3 F2 F3 F2 
13f1d     F3 F6 FE 0C 
13f21     15 29 3E 40 
13f25     47 4D 4C 45 | 	byte	$f3, $f2, $f3, $f2, $f3, $f6, $fe, $0c, $15, $29, $3e, $40, $47, $4d, $4c, $45
13f29     40 31 1F 05 
13f2d     F1 D7 CC C4 
13f31     CB D4 D8 DD 
13f35     EB F9 0B 1E | 	byte	$40, $31, $1f, $05, $f1, $d7, $cc, $c4, $cb, $d4, $d8, $dd, $eb, $f9, $0b, $1e
13f39     20 21 21 0A 
13f3d     FE F4 F6 F9 
13f41     FB FB FE FE 
13f45     00 03 06 FF | 	byte	$20, $21, $21, $0a, $fe, $f4, $f6, $f9, $fb, $fb, $fe, $fe, $00, $03, $06, $ff
13f49     FF F8 F7 F5 
13f4d     F5 F0 EC ED 
13f51     E5 E8 E8 E8 
13f55     E8 E0 DB D2 | 	byte	$ff, $f8, $f7, $f5, $f5, $f0, $ec, $ed, $e5, $e8, $e8, $e8, $e8, $e0, $db, $d2
13f59     D4 D6 DE E4 
13f5d     E1 E3 DE DF 
13f61     E7 F6 03 16 
13f65     1F 1C 1C 1C | 	byte	$d4, $d6, $de, $e4, $e1, $e3, $de, $df, $e7, $f6, $03, $16, $1f, $1c, $1c, $1c
13f69     1D 20 1B 12 
13f6d     09 FE F9 F0 
13f71     F8 F5 F6 00 
13f75     FE 0E 10 15 | 	byte	$1d, $20, $1b, $12, $09, $fe, $f9, $f0, $f8, $f5, $f6, $00, $fe, $0e, $10, $15
13f79     16 0B 0A FF 
13f7d     F7 EA E1 D4 
13f81     C8 BA B5 AF 
13f85     BB C3 C8 D1 | 	byte	$16, $0b, $0a, $ff, $f7, $ea, $e1, $d4, $c8, $ba, $b5, $af, $bb, $c3, $c8, $d1
13f89     CF D4 DE ED 
13f8d     F4 09 0A FF 
13f91     F4 E7 EA ED 
13f95     F8 FE 07 07 | 	byte	$cf, $d4, $de, $ed, $f4, $09, $0a, $ff, $f4, $e7, $ea, $ed, $f8, $fe, $07, $07
13f99     17 1C 2A 2D 
13f9d     3C 43 42 4E 
13fa1     4B 50 59 58 
13fa5     58 57 4F 41 | 	byte	$17, $1c, $2a, $2d, $3c, $43, $42, $4e, $4b, $50, $59, $58, $58, $57, $4f, $41
13fa9     33 25 12 F3 
13fad     DA C7 BF B9 
13fb1     AF AF B0 AB 
13fb5     B7 C6 D3 EE | 	byte	$33, $25, $12, $f3, $da, $c7, $bf, $b9, $af, $af, $b0, $ab, $b7, $c6, $d3, $ee
13fb9     F9 FB F7 F5 
13fbd     FF 03 11 18 
13fc1     16 11 02 FE 
13fc5     FD F8 FA FF | 	byte	$f9, $fb, $f7, $f5, $ff, $03, $11, $18, $16, $11, $02, $fe, $fd, $f8, $fa, $ff
13fc9     04 0D 1A 1E 
13fcd     2C 2F 2C 2C 
13fd1     1F 11 04 FC 
13fd5     EE E1 D7 CD | 	byte	$04, $0d, $1a, $1e, $2c, $2f, $2c, $2c, $1f, $11, $04, $fc, $ee, $e1, $d7, $cd
13fd9     C9 C9 C6 CD 
13fdd     D3 D2 D3 DE 
13fe1     ED FF 08 0E 
13fe5     00 FD FD FA | 	byte	$c9, $c9, $c6, $cd, $d3, $d2, $d3, $de, $ed, $ff, $08, $0e, $00, $fd, $fd, $fa
13fe9     FF 04 05 FB 
13fed     F1 EB E4 DF 
13ff1     E3 E5 ED F2 
13ff5     F3 FB F9 00 | 	byte	$ff, $04, $05, $fb, $f1, $eb, $e4, $df, $e3, $e5, $ed, $f2, $f3, $fb, $f9, $00
13ff9     00 02 01 08 
13ffd     09 0E 18 13 
14001     12 07 FF F4 
14005     EA E4 DF DA | 	byte	$00, $02, $01, $08, $09, $0e, $18, $13, $12, $07, $ff, $f4, $ea, $e4, $df, $da
14009     D9 D8 E3 F3 
1400d     F8 01 F9 E9 
14011     E4 E5 EA F5 
14015     F6 F9 F9 EF | 	byte	$d9, $d8, $e3, $f3, $f8, $01, $f9, $e9, $e4, $e5, $ea, $f5, $f6, $f9, $f9, $ef
14019     F2 F3 FF 12 
1401d     24 35 41 4F 
14021     59 5D 5E 5E 
14025     56 4C 3C 2A | 	byte	$f2, $f3, $ff, $12, $24, $35, $41, $4f, $59, $5d, $5e, $5e, $56, $4c, $3c, $2a
14029     19 11 F8 E6 
1402d     D3 C8 BF C3 
14031     C6 CD DC E8 
14035     F4 00 00 07 | 	byte	$19, $11, $f8, $e6, $d3, $c8, $bf, $c3, $c6, $cd, $dc, $e8, $f4, $00, $00, $07
14039     FE F9 F2 F5 
1403d     00 08 10 14 
14041     0E 08 FA F6 
14045     F6 F7 FF 00 | 	byte	$fe, $f9, $f2, $f5, $00, $08, $10, $14, $0e, $08, $fa, $f6, $f6, $f7, $ff, $00
14049     03 0B 0A 0D 
1404d     0F 10 0D 03 
14051     FF FE F4 F0 
14055     E2 D4 C2 B6 | 	byte	$03, $0b, $0a, $0d, $0f, $10, $0d, $03, $ff, $fe, $f4, $f0, $e2, $d4, $c2, $b6
14059     AF AB B2 BE 
1405d     CD D9 E6 FF 
14061     14 30 32 37 
14065     39 3B 43 43 | 	byte	$af, $ab, $b2, $be, $cd, $d9, $e6, $ff, $14, $30, $32, $37, $39, $3b, $43, $43
14069     38 29 12 FE 
1406d     E9 DC D2 CD 
14071     CF D9 E7 EB 
14075     E9 EE F4 F3 | 	byte	$38, $29, $12, $fe, $e9, $dc, $d2, $cd, $cf, $d9, $e7, $eb, $e9, $ee, $f4, $f3
14079     FB FB F9 FB 
1407d     FD FE FD F8 
14081     E9 E5 DE DC 
14085     D7 D8 D7 D2 | 	byte	$fb, $fb, $f9, $fb, $fd, $fe, $fd, $f8, $e9, $e5, $de, $dc, $d7, $d8, $d7, $d2
14089     D4 D4 DF EC 
1408d     EF E9 E8 EA 
14091     EC F7 00 0B 
14095     0F 15 16 21 | 	byte	$d4, $d4, $df, $ec, $ef, $e9, $e8, $ea, $ec, $f7, $00, $0b, $0f, $15, $16, $21
14099     21 31 36 35 
1409d     40 44 49 4F 
140a1     54 5A 58 57 
140a5     52 46 2F 25 | 	byte	$21, $31, $36, $35, $40, $44, $49, $4f, $54, $5a, $58, $57, $52, $46, $2f, $25
140a9     12 01 E9 D2 
140ad     C2 B1 AA AC 
140b1     B3 BA CA D1 
140b5     DF F2 FB FA | 	byte	$12, $01, $e9, $d2, $c2, $b1, $aa, $ac, $b3, $ba, $ca, $d1, $df, $f2, $fb, $fa
140b9     F2 F2 F3 F2 
140bd     F7 00 03 08 
140c1     0E 0E 13 13 
140c5     14 14 16 18 | 	byte	$f2, $f2, $f3, $f2, $f7, $00, $03, $08, $0e, $0e, $13, $13, $14, $14, $16, $18
140c9     1B 26 33 30 
140cd     31 20 11 04 
140d1     F8 F4 EA E1 
140d5     D4 C6 B9 B4 | 	byte	$1b, $26, $33, $30, $31, $20, $11, $04, $f8, $f4, $ea, $e1, $d4, $c6, $b9, $b4
140d9     A4 A1 AA B4 
140dd     C6 D8 EF 06 
140e1     1D 22 25 25 
140e5     28 25 1A 1B | 	byte	$a4, $a1, $aa, $b4, $c6, $d8, $ef, $06, $1d, $22, $25, $25, $28, $25, $1a, $1b
140e9     16 0B FE FA 
140ed     E5 DA D1 CD 
140f1     CF D7 E3 E7 
140f5     F0 F8 00 FF | 	byte	$16, $0b, $fe, $fa, $e5, $da, $d1, $cd, $cf, $d7, $e3, $e7, $f0, $f8, $00, $ff
140f9     FF 06 05 10 
140fd     19 1E 1D 0D 
14101     FF EE E6 E0 
14105     DA DB DC DB | 	byte	$ff, $06, $05, $10, $19, $1e, $1d, $0d, $ff, $ee, $e6, $e0, $da, $db, $dc, $db
14109     E2 F0 F2 E2 
1410d     DB D5 D6 D1 
14111     DD E2 F0 04 
14115     0D 1B 28 2B | 	byte	$e2, $f0, $f2, $e2, $db, $d5, $d6, $d1, $dd, $e2, $f0, $04, $0d, $1b, $28, $2b
14119     31 2E 36 34 
1411d     35 3A 3B 40 
14121     47 40 42 3D 
14125     36 31 30 23 | 	byte	$31, $2e, $36, $34, $35, $3a, $3b, $40, $47, $40, $42, $3d, $36, $31, $30, $23
14129     15 FC E3 D3 
1412d     BC B7 BC C7 
14131     D7 E3 E1 E4 
14135     F6 F8 F5 F6 | 	byte	$15, $fc, $e3, $d3, $bc, $b7, $bc, $c7, $d7, $e3, $e1, $e4, $f6, $f8, $f5, $f6
14139     F3 EB ED EE 
1413d     ED EC ED F8 
14141     05 11 18 1E 
14145     20 20 23 24 | 	byte	$f3, $eb, $ed, $ee, $ed, $ec, $ed, $f8, $05, $11, $18, $1e, $20, $20, $23, $24
14149     25 27 25 15 
1414d     08 FC EF E3 
14151     DE DC D5 CC 
14155     C3 C2 B7 B8 | 	byte	$25, $27, $25, $15, $08, $fc, $ef, $e3, $de, $dc, $d5, $cc, $c3, $c2, $b7, $b8
14159     C0 CE DC E6 
1415d     F5 FA 0F 20 
14161     1F 29 2D 21 
14165     18 06 04 FE | 	byte	$c0, $ce, $dc, $e6, $f5, $fa, $0f, $20, $1f, $29, $2d, $21, $18, $06, $04, $fe
14169     04 08 07 06 
1416d     FF F9 F0 DC 
14171     D4 CC CC D1 
14175     E2 E7 F6 00 | 	byte	$04, $08, $07, $06, $ff, $f9, $f0, $dc, $d4, $cc, $cc, $d1, $e2, $e7, $f6, $00
14179     06 0C 15 14 
1417d     14 08 F8 E6 
14181     D5 CD CA CE 
14185     D0 DB E1 EB | 	byte	$06, $0c, $15, $14, $14, $08, $f8, $e6, $d5, $cd, $ca, $ce, $d0, $db, $e1, $eb
14189     FA 04 01 FE 
1418d     EE E1 D3 C7 
14191     C5 D1 E5 00 
14195     1A 32 37 3C | 	byte	$fa, $04, $01, $fe, $ee, $e1, $d3, $c7, $c5, $d1, $e5, $00, $1a, $32, $37, $3c
14199     3B 3D 3F 47 
1419d     4C 51 51 53 
141a1     50 3E 28 19 
141a5     0D 0A 0B 06 | 	byte	$3b, $3d, $3f, $47, $4c, $51, $51, $53, $50, $3e, $28, $19, $0d, $0a, $0b, $06
141a9     FF F3 E8 DA 
141ad     D8 DC E1 E7 
141b1     E8 E3 E6 E8 
141b5     E9 E8 E0 E1 | 	byte	$ff, $f3, $e8, $da, $d8, $dc, $e1, $e7, $e8, $e3, $e6, $e8, $e9, $e8, $e0, $e1
141b9     DA D8 DD E7 
141bd     FE 0E 25 2B 
141c1     29 28 1E 15 
141c5     11 10 0E 18 | 	byte	$da, $d8, $dd, $e7, $fe, $0e, $25, $2b, $29, $28, $1e, $15, $11, $10, $0e, $18
141c9     14 0D 08 FC 
141cd     FD F3 F5 F2 
141d1     ED E9 E2 C4 
141d5     AC 99 94 A1 | 	byte	$14, $0d, $08, $fc, $fd, $f3, $f5, $f2, $ed, $e9, $e2, $c4, $ac, $99, $94, $a1
141d9     B3 D5 EF 09 
141dd     21 3C 40 3F 
141e1     35 1E FF E3 
141e5     D9 D1 D8 E3 | 	byte	$b3, $d5, $ef, $09, $21, $3c, $40, $3f, $35, $1e, $ff, $e3, $d9, $d1, $d8, $e3
141e9     F3 04 07 09 
141ed     10 12 10 12 
141f1     02 F8 E9 DF 
141f5     DA D5 D8 E2 | 	byte	$f3, $04, $07, $09, $10, $12, $10, $12, $02, $f8, $e9, $df, $da, $d5, $d8, $e2
141f9     F0 FD 01 0B 
141fd     07 FD F5 E6 
14201     E4 E8 EF F8 
14205     FC FB F0 F0 | 	byte	$f0, $fd, $01, $0b, $07, $fd, $f5, $e6, $e4, $e8, $ef, $f8, $fc, $fb, $f0, $f0
14209     ED E5 DF DF 
1420d     D4 D3 D8 DC 
14211     ED 03 12 23 
14215     25 27 29 2C | 	byte	$ed, $e5, $df, $df, $d4, $d3, $d8, $dc, $ed, $03, $12, $23, $25, $27, $29, $2c
14219     2D 30 37 37 
1421d     3F 41 41 42 
14221     43 3E 34 2B 
14225     19 07 FC E8 | 	byte	$2d, $30, $37, $37, $3f, $41, $41, $42, $43, $3e, $34, $2b, $19, $07, $fc, $e8
14229     D7 C5 C1 C8 
1422d     D1 E3 F0 F7 
14231     F6 00 06 05 
14235     00 FE E9 D4 | 	byte	$d7, $c5, $c1, $c8, $d1, $e3, $f0, $f7, $f6, $00, $06, $05, $00, $fe, $e9, $d4
14239     C2 B7 BF D3 
1423d     EE 0C 21 37 
14241     46 4E 4B 48 
14245     38 2A 11 04 | 	byte	$c2, $b7, $bf, $d3, $ee, $0c, $21, $37, $46, $4e, $4b, $48, $38, $2a, $11, $04
14249     F3 EB E1 E3 
1424d     DE DF E1 E6 
14251     E6 E6 E8 DE 
14255     D1 D3 CE D4 | 	byte	$f3, $eb, $e1, $e3, $de, $df, $e1, $e6, $e6, $e6, $e8, $de, $d1, $d3, $ce, $d4
14259     DA E9 F5 03 
1425d     14 15 17 0D 
14261     F5 E4 CD CF 
14265     D5 ED 03 13 | 	byte	$da, $e9, $f5, $03, $14, $15, $17, $0d, $f5, $e4, $cd, $cf, $d5, $ed, $03, $13
14269     1F 1B 11 08 
1426d     00 01 FA F1 
14271     F2 F3 F5 F7 
14275     F9 F7 F7 F2 | 	byte	$1f, $1b, $11, $08, $00, $01, $fa, $f1, $f2, $f3, $f5, $f7, $f9, $f7, $f7, $f2
14279     F0 F0 ED F0 
1427d     F1 E9 DF DB 
14281     E1 EA F8 09 
14285     15 1F 2A 1D | 	byte	$f0, $f0, $ed, $f0, $f1, $e9, $df, $db, $e1, $ea, $f8, $09, $15, $1f, $2a, $1d
14289     0D F9 D8 C1 
1428d     A6 A4 AD C3 
14291     E3 FC 0A 16 
14295     22 2C 3C 49 | 	byte	$0d, $f9, $d8, $c1, $a6, $a4, $ad, $c3, $e3, $fc, $0a, $16, $22, $2c, $3c, $49
14299     52 56 5C 56 
1429d     3D 2C 1B 09 
142a1     FB FE FD 07 
142a5     12 18 1A 15 | 	byte	$52, $56, $5c, $56, $3d, $2c, $1b, $09, $fb, $fe, $fd, $07, $12, $18, $1a, $15
142a9     01 F4 EB EE 
142ad     F3 02 06 0F 
142b1     0D 05 FC F3 
142b5     E3 D6 CD CF | 	byte	$01, $f4, $eb, $ee, $f3, $02, $06, $0f, $0d, $05, $fc, $f3, $e3, $d6, $cd, $cf
142b9     E0 F2 FE 12 
142bd     13 10 12 0F 
142c1     10 13 18 0C 
142c5     0B 01 F9 F0 | 	byte	$e0, $f2, $fe, $12, $13, $10, $12, $0f, $10, $13, $18, $0c, $0b, $01, $f9, $f0
142c9     EC EE EE F1 
142cd     F6 FA E7 DD 
142d1     D5 C7 B9 B7 
142d5     BD D0 EB 06 | 	byte	$ec, $ee, $ee, $f1, $f6, $fa, $e7, $dd, $d5, $c7, $b9, $b7, $bd, $d0, $eb, $06
142d9     23 36 42 33 
142dd     24 09 FB E0 
142e1     CD C7 C4 D0 
142e5     E0 FB 09 12 | 	byte	$23, $36, $42, $33, $24, $09, $fb, $e0, $cd, $c7, $c4, $d0, $e0, $fb, $09, $12
142e9     1F 26 3A 3E 
142ed     3D 2B 15 FB 
142f1     E5 CF C2 BA 
142f5     BC B4 BF C7 | 	byte	$1f, $26, $3a, $3e, $3d, $2b, $15, $fb, $e5, $cf, $c2, $ba, $bc, $b4, $bf, $c7
142f9     D2 E2 EF FC 
142fd     FF FF 06 07 
14301     05 02 03 08 
14305     0C 01 FD F8 | 	byte	$d2, $e2, $ef, $fc, $ff, $ff, $06, $07, $05, $02, $03, $08, $0c, $01, $fd, $f8
14309     F9 F1 E8 E8 
1430d     E5 E6 EE F8 
14311     05 0C 1B 22 
14315     34 37 40 44 | 	byte	$f9, $f1, $e8, $e8, $e5, $e6, $ee, $f8, $05, $0c, $1b, $22, $34, $37, $40, $44
14319     44 46 46 46 
1431d     3C 2E 1C 04 
14321     F5 E9 DA D7 
14325     D8 D9 D8 CE | 	byte	$44, $46, $46, $46, $3c, $2e, $1c, $04, $f5, $e9, $da, $d7, $d8, $d9, $d8, $ce
14329     D5 E1 F0 FE 
1432d     11 1F 30 31 
14331     26 1E FF E9 
14335     CD C2 C0 C1 | 	byte	$d5, $e1, $f0, $fe, $11, $1f, $30, $31, $26, $1e, $ff, $e9, $cd, $c2, $c0, $c1
14339     DB F2 08 21 
1433d     2C 2E 33 34 
14341     2A 21 19 11 
14345     10 09 04 FB | 	byte	$db, $f2, $08, $21, $2c, $2e, $33, $34, $2a, $21, $19, $11, $10, $09, $04, $fb
14349     EE E2 E0 DF 
1434d     E1 EE F9 FE 
14351     F8 EE E1 DC 
14355     D6 D6 DD ED | 	byte	$ee, $e2, $e0, $df, $e1, $ee, $f9, $fe, $f8, $ee, $e1, $dc, $d6, $d6, $dd, $ed
14359     FF FA F2 E6 
1435d     E6 D4 CD C9 
14361     D4 E3 FA 0F 
14365     15 18 14 13 | 	byte	$ff, $fa, $f2, $e6, $e6, $d4, $cd, $c9, $d4, $e3, $fa, $0f, $15, $18, $14, $13
14369     13 18 21 1D 
1436d     1C 1B 18 0D 
14371     FF F3 DA C8 
14375     C5 BE CB DA | 	byte	$13, $18, $21, $1d, $1c, $1b, $18, $0d, $ff, $f3, $da, $c8, $c5, $be, $cb, $da
14379     E8 FA F9 F9 
1437d     F9 F7 FC 07 
14381     17 29 2D 29 
14385     14 FA E7 CE | 	byte	$e8, $fa, $f9, $f9, $f9, $f7, $fc, $07, $17, $29, $2d, $29, $14, $fa, $e7, $ce
14389     C3 BB B8 BA 
1438d     CA D4 F0 FF 
14391     0A 1E 30 42 
14395     54 5F 59 52 | 	byte	$c3, $bb, $b8, $ba, $ca, $d4, $f0, $ff, $0a, $1e, $30, $42, $54, $5f, $59, $52
14399     49 3B 28 17 
1439d     00 F1 EA E2 
143a1     E5 EF F7 04 
143a5     FF FA FE 01 | 	byte	$49, $3b, $28, $17, $00, $f1, $ea, $e2, $e5, $ef, $f7, $04, $ff, $fa, $fe, $01
143a9     0D 24 2B 31 
143ad     38 34 1A 04 
143b1     F8 F0 EB ED 
143b5     EC EA F4 F2 | 	byte	$0d, $24, $2b, $31, $38, $34, $1a, $04, $f8, $f0, $eb, $ed, $ec, $ea, $f4, $f2
143b9     F7 F7 F0 F0 
143bd     ED EA EA EF 
143c1     F1 F3 F8 FA 
143c5     04 05 07 06 | 	byte	$f7, $f7, $f0, $f0, $ed, $ea, $ea, $ef, $f1, $f3, $f8, $fa, $04, $05, $07, $06
143c9     F7 E9 E2 E1 
143cd     DF E4 E4 E5 
143d1     E5 F0 F6 00 
143d5     0B 1A 1C 1B | 	byte	$f7, $e9, $e2, $e1, $df, $e4, $e4, $e5, $e5, $f0, $f6, $00, $0b, $1a, $1c, $1b
143d9     06 FA F3 E1 
143dd     E0 E0 DF E0 
143e1     EB F1 00 0C 
143e5     16 24 2B 38 | 	byte	$06, $fa, $f3, $e1, $e0, $e0, $df, $e0, $eb, $f1, $00, $0c, $16, $24, $2b, $38
143e9     3A 33 1F 0C 
143ed     FA EA D9 C6 
143f1     B4 A8 A1 A0 
143f5     AB B1 CF ED | 	byte	$3a, $33, $1f, $0c, $fa, $ea, $d9, $c6, $b4, $a8, $a1, $a0, $ab, $b1, $cf, $ed
143f9     02 14 13 13 
143fd     13 16 1B 1D 
14401     20 1D 09 FC 
14405     F0 EB ED EC | 	byte	$02, $14, $13, $13, $13, $16, $1b, $1d, $20, $1d, $09, $fc, $f0, $eb, $ed, $ec
14409     EA EC EE F9 
1440d     08 0F 1F 2C 
14411     2E 3D 3B 3D 
14415     42 42 44 43 | 	byte	$ea, $ec, $ee, $f9, $08, $0f, $1f, $2c, $2e, $3d, $3b, $3d, $42, $42, $44, $43
14419     3E 33 1B 01 
1441d     EC CC B9 AF 
14421     B4 B2 B4 C5 
14425     D1 DF FB 10 | 	byte	$3e, $33, $1b, $01, $ec, $cc, $b9, $af, $b4, $b2, $b4, $c5, $d1, $df, $fb, $10
14429     1F 3B 51 56 
1442d     3E 24 0F 02 
14431     F9 F1 E8 E9 
14435     E8 ED F4 FA | 	byte	$1f, $3b, $51, $56, $3e, $24, $0f, $02, $f9, $f1, $e8, $e9, $e8, $ed, $f4, $fa
14439     01 07 03 08 
1443d     0C 10 17 17 
14441     16 1B 18 16 
14445     0C FD F0 E6 | 	byte	$01, $07, $03, $08, $0c, $10, $17, $17, $16, $1b, $18, $16, $0c, $fd, $f0, $e6
14449     E2 E1 E4 F4 
1444d     F1 F2 F2 E8 
14451     E2 E3 E4 E4 
14455     E9 E8 D4 D1 | 	byte	$e2, $e1, $e4, $f4, $f1, $f2, $f2, $e8, $e2, $e3, $e4, $e4, $e9, $e8, $d4, $d1
14459     C3 CB CC DE 
1445d     F0 02 03 0A 
14461     11 10 12 14 
14465     13 16 1D 16 | 	byte	$c3, $cb, $cc, $de, $f0, $02, $03, $0a, $11, $10, $12, $14, $13, $16, $1d, $16
14469     16 0E 0D 0B 
1446d     01 FC EE E9 
14471     D8 D3 C9 CE 
14475     D5 E4 E9 F2 | 	byte	$16, $0e, $0d, $0b, $01, $fc, $ee, $e9, $d8, $d3, $c9, $ce, $d5, $e4, $e9, $f2
14479     F6 F6 01 0C 
1447d     1A 28 2F 2A 
14481     11 F8 DF D3 
14485     CA C6 C6 C6 | 	byte	$f6, $f6, $01, $0c, $1a, $28, $2f, $2a, $11, $f8, $df, $d3, $ca, $c6, $c6, $c6
14489     C9 DA E7 F9 
1448d     09 1B 32 47 
14491     47 4D 52 51 
14495     4E 44 36 23 | 	byte	$c9, $da, $e7, $f9, $09, $1b, $32, $47, $47, $4d, $52, $51, $4e, $44, $36, $23
14499     0E FD E5 D9 
1449d     D5 CF D7 E2 
144a1     EF FD 0A 17 
144a5     23 2C 37 3F | 	byte	$0e, $fd, $e5, $d9, $d5, $cf, $d7, $e2, $ef, $fd, $0a, $17, $23, $2c, $37, $3f
144a9     48 43 28 16 
144ad     01 F7 FA FB 
144b1     FD FD F8 F1 
144b5     E7 D9 D6 C7 | 	byte	$48, $43, $28, $16, $01, $f7, $fa, $fb, $fd, $fd, $f8, $f1, $e7, $d9, $d6, $c7
144b9     C2 C1 C3 D0 
144bd     DB F0 F9 03 
144c1     16 24 1A 18 
144c5     0D 04 FC EE | 	byte	$c2, $c1, $c3, $d0, $db, $f0, $f9, $03, $16, $24, $1a, $18, $0d, $04, $fc, $ee
144c9     EC E7 E8 E8 
144cd     E9 EE F0 F8 
144d1     06 12 20 22 
144d5     16 06 F2 E6 | 	byte	$ec, $e7, $e8, $e8, $e9, $ee, $f0, $f8, $06, $12, $20, $22, $16, $06, $f2, $e6
144d9     E9 EC F3 FA 
144dd     F9 FA 01 FF 
144e1     09 0F 18 18 
144e5     16 0C FF F7 | 	byte	$e9, $ec, $f3, $fa, $f9, $fa, $01, $ff, $09, $0f, $18, $18, $16, $0c, $ff, $f7
144e9     EC D8 CD C3 
144ed     BB BA B9 BA 
144f1     BD C7 DE F5 
144f5     F8 08 12 17 | 	byte	$ec, $d8, $cd, $c3, $bb, $ba, $b9, $ba, $bd, $c7, $de, $f5, $f8, $08, $12, $17
144f9     1C 1B 1D 1F 
144fd     20 16 FE EF 
14501     E6 E0 EB F9 
14505     03 0D 15 16 | 	byte	$1c, $1b, $1d, $1f, $20, $16, $fe, $ef, $e6, $e0, $eb, $f9, $03, $0d, $15, $16
14509     1B 1B 20 24 
1450d     2A 2A 29 2A 
14511     2C 2A 2D 2D 
14515     26 18 06 F5 | 	byte	$1b, $1b, $20, $24, $2a, $2a, $29, $2a, $2c, $2a, $2d, $2d, $26, $18, $06, $f5
14519     DB C6 B0 A4 
1451d     9C A3 B2 C3 
14521     E3 00 13 23 
14525     3A 4B 56 54 | 	byte	$db, $c6, $b0, $a4, $9c, $a3, $b2, $c3, $e3, $00, $13, $23, $3a, $4b, $56, $54
14529     4D 3C 29 19 
1452d     11 0D 06 FD 
14531     F8 F1 E8 E9 
14535     EA F2 00 00 | 	byte	$4d, $3c, $29, $19, $11, $0d, $06, $fd, $f8, $f1, $e8, $e9, $ea, $f2, $00, $00
14539     06 07 0F 0F 
1453d     12 12 10 0F 
14541     05 FD F4 EB 
14545     DE DC DB DC | 	byte	$06, $07, $0f, $0f, $12, $12, $10, $0f, $05, $fd, $f4, $eb, $de, $dc, $db, $dc
14549     DF E6 E8 E9 
1454d     DF D6 D1 D2 
14551     DD DB DD DF 
14555     DA DC F1 02 | 	byte	$df, $e6, $e8, $e9, $df, $d6, $d1, $d2, $dd, $db, $dd, $df, $da, $dc, $f1, $02
14559     10 1A 25 28 
1455d     22 19 18 17 
14561     14 09 FE F4 
14565     F5 F3 FB 02 | 	byte	$10, $1a, $25, $28, $22, $19, $18, $17, $14, $09, $fe, $f4, $f5, $f3, $fb, $02
14569     08 07 07 FF 
1456d     F8 EF E0 DB 
14571     DB DD E2 EB 
14575     F4 03 03 03 | 	byte	$08, $07, $07, $ff, $f8, $ef, $e0, $db, $db, $dd, $e2, $eb, $f4, $03, $03, $03
14579     08 0A 11 03 
1457d     F6 E4 CD BB 
14581     BC C2 D1 E3 
14585     EC FA 03 10 | 	byte	$08, $0a, $11, $03, $f6, $e4, $cd, $bb, $bc, $c2, $d1, $e3, $ec, $fa, $03, $10
14589     21 2D 3F 46 
1458d     4B 4B 48 47 
14591     42 38 29 0E 
14595     FE ED E1 D4 | 	byte	$21, $2d, $3f, $46, $4b, $4b, $48, $47, $42, $38, $29, $0e, $fe, $ed, $e1, $d4
14599     CF D5 DE EB 
1459d     F5 0A 21 36 
145a1     3B 34 34 32 
145a5     37 25 1E 16 | 	byte	$cf, $d5, $de, $eb, $f5, $0a, $21, $36, $3b, $34, $34, $32, $37, $25, $1e, $16
145a9     07 FB FD FB 
145ad     00 FF FD EB 
145b1     D7 C5 B2 B6 
145b5     BB C5 CB DB | 	byte	$07, $fb, $fd, $fb, $00, $ff, $fd, $eb, $d7, $c5, $b2, $b6, $bb, $c5, $cb, $db
145b9     E8 FA 0D 15 
145bd     28 24 27 24 
145c1     1A 0D FF ED 
145c5     DC D1 CE D4 | 	byte	$e8, $fa, $0d, $15, $28, $24, $27, $24, $1a, $0d, $ff, $ed, $dc, $d1, $ce, $d4
145c9     E4 F0 02 09 
145cd     0F 19 1D 12 
145d1     0D 06 FD EF 
145d5     F2 F7 06 0B | 	byte	$e4, $f0, $02, $09, $0f, $19, $1d, $12, $0d, $06, $fd, $ef, $f2, $f7, $06, $0b
145d9     14 14 04 00 
145dd     FA FE 01 FA 
145e1     F1 E1 CF CB 
145e5     C1 C6 C9 D0 | 	byte	$14, $14, $04, $00, $fa, $fe, $01, $fa, $f1, $e1, $cf, $cb, $c1, $c6, $c9, $d0
145e9     D5 DA E1 E6 
145ed     EB EA F7 FC 
145f1     02 0C 1E 2A 
145f5     2A 27 1A 11 | 	byte	$d5, $da, $e1, $e6, $eb, $ea, $f7, $fc, $02, $0c, $1e, $2a, $2a, $27, $1a, $11
145f9     08 F5 EE E9 
145fd     E9 F3 FC 0C 
14601     20 2C 31 2D 
14605     23 15 11 13 | 	byte	$08, $f5, $ee, $e9, $e9, $f3, $fc, $0c, $20, $2c, $31, $2d, $23, $15, $11, $13
14609     1B 1C 1F 1F 
1460d     17 16 0E 0D 
14611     05 FC EE D8 
14615     C7 B6 AD A7 | 	byte	$1b, $1c, $1f, $1f, $17, $16, $0e, $0d, $05, $fc, $ee, $d8, $c7, $b6, $ad, $a7
14619     AD B3 C2 E2 
1461d     08 28 39 40 
14621     45 50 4F 3F 
14625     3D 38 2E 1E | 	byte	$ad, $b3, $c2, $e2, $08, $28, $39, $40, $45, $50, $4f, $3f, $3d, $38, $2e, $1e
14629     14 0C 0D 0F 
1462d     0D 05 FF F8 
14631     F1 FC 02 08 
14635     09 07 05 03 | 	byte	$14, $0c, $0d, $0f, $0d, $05, $ff, $f8, $f1, $fc, $02, $08, $09, $07, $05, $03
14639     01 06 07 06 
1463d     06 FF F9 EF 
14641     E2 D6 CD C3 
14645     BD B8 BE C8 | 	byte	$01, $06, $07, $06, $06, $ff, $f9, $ef, $e2, $d6, $cd, $c3, $bd, $b8, $be, $c8
14649     CD D4 D4 D9 
1464d     D9 D7 DE E7 
14651     EF FD 09 20 
14655     30 42 49 44 | 	byte	$cd, $d4, $d4, $d9, $d9, $d7, $de, $e7, $ef, $fd, $09, $20, $30, $42, $49, $44
14659     33 1F 0C 05 
1465d     00 FA EB E8 
14661     EA ED F8 03 
14665     10 15 14 09 | 	byte	$33, $1f, $0c, $05, $00, $fa, $eb, $e8, $ea, $ed, $f8, $03, $10, $15, $14, $09
14669     01 F9 EA E5 
1466d     E0 DF DA DD 
14671     EF FD 07 0B 
14675     05 01 F0 D7 | 	byte	$01, $f9, $ea, $e5, $e0, $df, $da, $dd, $ef, $fd, $07, $0b, $05, $01, $f0, $d7
14679     C8 BF C2 C3 
1467d     CD DC F3 08 
14681     1F 2E 27 28 
14685     27 32 36 3F | 	byte	$c8, $bf, $c2, $c3, $cd, $dc, $f3, $08, $1f, $2e, $27, $28, $27, $32, $36, $3f
14689     3F 3A 30 1C 
1468d     10 07 FF 00 
14691     F5 F5 F2 F2 
14695     F7 FB 04 08 | 	byte	$3f, $3a, $30, $1c, $10, $07, $ff, $00, $f5, $f5, $f2, $f2, $f7, $fb, $04, $08
14699     09 10 1E 2C 
1469d     2E 35 31 29 
146a1     1D 0A 0B 0B 
146a5     0A 0A 02 03 | 	byte	$09, $10, $1e, $2c, $2e, $35, $31, $29, $1d, $0a, $0b, $0b, $0a, $0a, $02, $03
146a9     00 F8 F1 E8 
146ad     D4 C3 B7 B9 
146b1     BE D4 E0 EF 
146b5     F2 01 0B 1A | 	byte	$00, $f8, $f1, $e8, $d4, $c3, $b7, $b9, $be, $d4, $e0, $ef, $f2, $01, $0b, $1a
146b9     26 2F 2D 2A 
146bd     1A 0C FA EE 
146c1     E1 D5 C9 CE 
146c5     D9 F1 07 16 | 	byte	$26, $2f, $2d, $2a, $1a, $0c, $fa, $ee, $e1, $d5, $c9, $ce, $d9, $f1, $07, $16
146c9     1F 22 0F FB 
146cd     F0 ED F1 FC 
146d1     00 06 12 20 
146d5     2A 29 1F 11 | 	byte	$1f, $22, $0f, $fb, $f0, $ed, $f1, $fc, $00, $06, $12, $20, $2a, $29, $1f, $11
146d9     FE F3 E7 D1 
146dd     C2 BA B2 AE 
146e1     AF BA CA E1 
146e5     F2 FE FD 03 | 	byte	$fe, $f3, $e7, $d1, $c2, $ba, $b2, $ae, $af, $ba, $ca, $e1, $f2, $fe, $fd, $03
146e9     0A 0F 14 0D 
146ed     06 06 05 06 
146f1     11 10 10 0E 
146f5     FA ED E8 F4 | 	byte	$0a, $0f, $14, $0d, $06, $06, $05, $06, $11, $10, $10, $0e, $fa, $ed, $e8, $f4
146f9     04 17 28 39 
146fd     3B 40 47 43 
14701     37 23 17 08 
14705     04 03 01 FF | 	byte	$04, $17, $28, $39, $3b, $40, $47, $43, $37, $23, $17, $08, $04, $03, $01, $ff
14709     FD F0 E7 DE 
1470d     D5 CD C8 C7 
14711     C0 C3 C5 C7 
14715     D7 DC ED FF | 	byte	$fd, $f0, $e7, $de, $d5, $cd, $c8, $c7, $c0, $c3, $c5, $c7, $d7, $dc, $ed, $ff
14719     0D 1E 38 46 
1471d     51 51 38 26 
14721     1D 17 1E 22 
14725     29 29 28 29 | 	byte	$0d, $1e, $38, $46, $51, $51, $38, $26, $1d, $17, $1e, $22, $29, $29, $28, $29
14729     28 2D 29 1D 
1472d     14 06 FF FF 
14731     FD F8 F7 F5 
14735     F3 F5 F5 FC | 	byte	$28, $2d, $29, $1d, $14, $06, $ff, $ff, $fd, $f8, $f7, $f5, $f3, $f5, $f5, $fc
14739     02 01 01 FA 
1473d     F0 E3 DA BD 
14741     AD A6 A7 A9 
14745     BB CE D9 E3 | 	byte	$02, $01, $01, $fa, $f0, $e3, $da, $bd, $ad, $a6, $a7, $a9, $bb, $ce, $d9, $e3
14749     DF D5 C8 D6 
1474d     EF 0E 27 3B 
14751     43 4E 51 4E 
14755     44 32 21 0F | 	byte	$df, $d5, $c8, $d6, $ef, $0e, $27, $3b, $43, $4e, $51, $4e, $44, $32, $21, $0f
14759     FD EF EC E7 
1475d     E8 E9 EA F2 
14761     F8 01 06 0C 
14765     0A 09 06 03 | 	byte	$fd, $ef, $ec, $e7, $e8, $e9, $ea, $f2, $f8, $01, $06, $0c, $0a, $09, $06, $03
14769     FD EE EB E2 
1476d     E3 E5 EA F3 
14771     F3 E7 D3 B3 
14775     AE B1 BE DD | 	byte	$fd, $ee, $eb, $e2, $e3, $e5, $ea, $f3, $f3, $e7, $d3, $b3, $ae, $b1, $be, $dd
14779     F8 11 24 3B 
1477d     3C 43 49 47 
14781     42 32 2B 19 
14785     17 0E 03 FE | 	byte	$f8, $11, $24, $3b, $3c, $43, $49, $47, $42, $32, $2b, $19, $17, $0e, $03, $fe
14789     F9 EA E5 E6 
1478d     EB F7 04 10 
14791     19 23 28 22 
14795     1B 16 1A 18 | 	byte	$f9, $ea, $e5, $e6, $eb, $f7, $04, $10, $19, $23, $28, $22, $1b, $16, $1a, $18
14799     1A 1D 25 1F 
1479d     14 FC ED EE 
147a1     F8 03 0D 0A 
147a5     05 FF FA F5 | 	byte	$1a, $1d, $25, $1f, $14, $fc, $ed, $ee, $f8, $03, $0d, $0a, $05, $ff, $fa, $f5
147a9     F0 E9 DF D6 
147ad     D8 DB D9 E1 
147b1     EA F5 00 01 
147b5     07 09 0B 15 | 	byte	$f0, $e9, $df, $d6, $d8, $db, $d9, $e1, $ea, $f5, $00, $01, $07, $09, $0b, $15
147b9     19 18 1B 1A 
147bd     17 06 FA F3 
147c1     EB EE F6 00 
147c5     08 07 FD E9 | 	byte	$19, $18, $1b, $1a, $17, $06, $fa, $f3, $eb, $ee, $f6, $00, $08, $07, $fd, $e9
147c9     D4 D3 DE F2 
147cd     08 1D 2D 38 
147d1     3C 3E 3B 2B 
147d5     18 F8 DC BE | 	byte	$d4, $d3, $de, $f2, $08, $1d, $2d, $38, $3c, $3e, $3b, $2b, $18, $f8, $dc, $be
147d9     AB A6 A2 A4 
147dd     AC B1 BF D3 
147e1     DE EC FA 06 
147e5     18 23 26 20 | 	byte	$ab, $a6, $a2, $a4, $ac, $b1, $bf, $d3, $de, $ec, $fa, $06, $18, $23, $26, $20
147e9     11 07 01 FA 
147ed     FA 04 0A 11 
147f1     0E FA F1 F5 
147f5     01 19 33 43 | 	byte	$11, $07, $01, $fa, $fa, $04, $0a, $11, $0e, $fa, $f1, $f5, $01, $19, $33, $43
147f9     4E 52 51 54 
147fd     4D 3F 31 16 
14801     06 F8 EE E3 
14805     DF DF CD BA | 	byte	$4e, $52, $51, $54, $4d, $3f, $31, $16, $06, $f8, $ee, $e3, $df, $df, $cd, $ba
14809     AC 9F A0 A3 
1480d     B5 C9 E3 FC 
14811     10 21 1D 20 
14815     1F 1D 1B 1D | 	byte	$ac, $9f, $a0, $a3, $b5, $c9, $e3, $fc, $10, $21, $1d, $20, $1f, $1d, $1b, $1d
14819     22 29 25 0B 
1481d     00 02 05 20 
14821     36 45 53 53 
14825     54 55 53 41 | 	byte	$22, $29, $25, $0b, $00, $02, $05, $20, $36, $45, $53, $53, $54, $55, $53, $41
14829     2D 16 FD EC 
1482d     E3 DF DF DF 
14831     E0 DF DF DF 
14835     E1 E9 EE F8 | 	byte	$2d, $16, $fd, $ec, $e3, $df, $df, $df, $e0, $df, $df, $df, $e1, $e9, $ee, $f8
14839     FC F6 F5 E5 
1483d     D3 C2 BA B7 
14841     B6 C1 D1 E4 
14845     E7 DB CD CB | 	byte	$fc, $f6, $f5, $e5, $d3, $c2, $ba, $b7, $b6, $c1, $d1, $e4, $e7, $db, $cd, $cb
14849     D1 EA 08 22 
1484d     37 48 54 5E 
14851     61 61 55 48 
14855     31 16 01 F4 | 	byte	$d1, $ea, $08, $22, $37, $48, $54, $5e, $61, $61, $55, $48, $31, $16, $01, $f4
14859     EB EC E2 D9 
1485d     D3 D2 D2 D9 
14861     E0 F0 FC 05 
14865     10 15 0E 08 | 	byte	$eb, $ec, $e2, $d9, $d3, $d2, $d2, $d9, $e0, $f0, $fc, $05, $10, $15, $0e, $08
14869     FC EE E0 CC 
1486d     C5 C9 C4 B3 
14871     AF B0 C1 E3 
14875     07 2E 44 52 | 	byte	$fc, $ee, $e0, $cc, $c5, $c9, $c4, $b3, $af, $b0, $c1, $e3, $07, $2e, $44, $52
14879     55 5A 57 54 
1487d     44 36 20 0E 
14881     FE F8 FB FE 
14885     FE FF F5 F0 | 	byte	$55, $5a, $57, $54, $44, $36, $20, $0e, $fe, $f8, $fb, $fe, $fe, $ff, $f5, $f0
14889     F1 F0 F7 03 
1488d     0B 16 23 28 
14891     2D 2E 2C 27 
14895     13 06 FF 00 | 	byte	$f1, $f0, $f7, $03, $0b, $16, $23, $28, $2d, $2e, $2c, $27, $13, $06, $ff, $00
14899     01 F2 E6 DD 
1489d     DA E1 EA F9 
148a1     03 08 0F 15 
148a5     1E 1F 24 21 | 	byte	$01, $f2, $e6, $dd, $da, $e1, $ea, $f9, $03, $08, $0f, $15, $1e, $1f, $24, $21
148a9     0A F7 E6 D5 
148ad     CE D3 D4 DC 
148b1     DD E2 EB F8 
148b5     02 10 1E 2C | 	byte	$0a, $f7, $e6, $d5, $ce, $d3, $d4, $dc, $dd, $e2, $eb, $f8, $02, $10, $1e, $2c
148b9     3A 3E 38 31 
148bd     22 10 FD EA 
148c1     DC D8 DC DB 
148c5     D3 CE C9 DB | 	byte	$3a, $3e, $38, $31, $22, $10, $fd, $ea, $dc, $d8, $dc, $db, $d3, $ce, $c9, $db
148c9     ED 05 1B 32 
148cd     41 3D 44 38 
148d1     2A 1D 01 E3 
148d5     C5 B8 B0 B5 | 	byte	$ed, $05, $1b, $32, $41, $3d, $44, $38, $2a, $1d, $01, $e3, $c5, $b8, $b0, $b5
148d9     C1 CF CC CC 
148dd     CB CB CA D5 
148e1     E4 F7 09 1B 
148e5     23 28 2D 26 | 	byte	$c1, $cf, $cc, $cc, $cb, $cb, $ca, $d5, $e4, $f7, $09, $1b, $23, $28, $2d, $26
148e9     1A 0D 09 09 
148ed     0A 0A FF F9 
148f1     F4 F6 01 16 
148f5     28 3B 4C 4F | 	byte	$1a, $0d, $09, $09, $0a, $0a, $ff, $f9, $f4, $f6, $01, $16, $28, $3b, $4c, $4f
148f9     54 4D 41 32 
148fd     1F 04 F1 DB 
14901     D1 C8 C4 C5 
14905     B5 B0 AA AB | 	byte	$54, $4d, $41, $32, $1f, $04, $f1, $db, $d1, $c8, $c4, $c5, $b5, $b0, $aa, $ab
14909     B6 CB E5 08 
1490d     19 29 32 2D 
14911     2D 22 14 06 
14915     FD FA 00 06 | 	byte	$b6, $cb, $e5, $08, $19, $29, $32, $2d, $2d, $22, $14, $06, $fd, $fa, $00, $06
14919     00 00 FF 02 
1491d     13 30 46 5C 
14921     6C 6B 65 5A 
14925     48 36 25 0D | 	byte	$00, $00, $ff, $02, $13, $30, $46, $5c, $6c, $6b, $65, $5a, $48, $36, $25, $0d
14929     F8 E1 D5 D1 
1492d     CA CE CB CB 
14931     CA CC D1 D2 
14935     D9 E2 EB EF | 	byte	$f8, $e1, $d5, $d1, $ca, $ce, $cb, $cb, $ca, $cc, $d1, $d2, $d9, $e2, $eb, $ef
14939     ED EA E8 E6 
1493d     E4 E4 E3 D9 
14941     DC DD D1 C3 
14945     BE C2 D2 EF | 	byte	$ed, $ea, $e8, $e6, $e4, $e4, $e3, $d9, $dc, $dd, $d1, $c3, $be, $c2, $d2, $ef
14949     12 35 53 62 
1494d     6B 66 66 69 
14951     68 56 3D 1C 
14955     FE E4 D3 CC | 	byte	$12, $35, $53, $62, $6b, $66, $66, $69, $68, $56, $3d, $1c, $fe, $e4, $d3, $cc
14959     BE B9 B8 B8 
1495d     BF C6 D5 DF 
14961     F2 03 0B 0A 
14965     0D 05 FC EE | 	byte	$be, $b9, $b8, $b8, $bf, $c6, $d5, $df, $f2, $03, $0b, $0a, $0d, $05, $fc, $ee
14969     E2 DB D6 D1 
1496d     CA CA CB D8 
14971     EC FA 0D 25 
14975     34 37 3E 38 | 	byte	$e2, $db, $d6, $d1, $ca, $ca, $cb, $d8, $ec, $fa, $0d, $25, $34, $37, $3e, $38
14979     34 35 34 2F 
1497d     26 17 03 FC 
14981     FD FF 0B 0A 
14985     0B 06 00 FF | 	byte	$34, $35, $34, $2f, $26, $17, $03, $fc, $fd, $ff, $0b, $0a, $0b, $06, $00, $ff
14989     FD FF 01 0B 
1498d     11 12 17 17 
14991     12 07 FA F0 
14995     EC EE E9 DA | 	byte	$fd, $ff, $01, $0b, $11, $12, $17, $17, $12, $07, $fa, $f0, $ec, $ee, $e9, $da
14999     CC C3 C5 CA 
1499d     DA F3 0C 20 
149a1     35 3D 42 3E 
149a5     39 2F 1B FF | 	byte	$cc, $c3, $c5, $ca, $da, $f3, $0c, $20, $35, $3d, $42, $3e, $39, $2f, $1b, $ff
149a9     E4 D5 CC CF 
149ad     DA E2 EA EE 
149b1     F4 F6 02 10 
149b5     1E 30 37 30 | 	byte	$e4, $d5, $cc, $cf, $da, $e2, $ea, $ee, $f4, $f6, $02, $10, $1e, $30, $37, $30
149b9     21 0E FC E9 
149bd     D7 D3 D2 D7 
149c1     DE DC D9 CE 
149c5     CE CE DE FB | 	byte	$21, $0e, $fc, $e9, $d7, $d3, $d2, $d7, $de, $dc, $d9, $ce, $ce, $ce, $de, $fb
149c9     10 30 34 38 
149cd     36 35 32 30 
149d1     1E 03 EE DF 
149d5     D4 CA C0 BC | 	byte	$10, $30, $34, $38, $36, $35, $32, $30, $1e, $03, $ee, $df, $d4, $ca, $c0, $bc
149d9     B5 AE AC AC 
149dd     BC D0 EA 09 
149e1     17 23 26 20 
149e5     1C 1B 1C 27 | 	byte	$b5, $ae, $ac, $ac, $bc, $d0, $ea, $09, $17, $23, $26, $20, $1c, $1b, $1c, $27
149e9     30 36 36 24 
149ed     10 FA E9 D9 
149f1     D8 E5 F5 09 
149f5     17 21 1C 12 | 	byte	$30, $36, $36, $24, $10, $fa, $e9, $d9, $d8, $e5, $f5, $09, $17, $21, $1c, $12
149f9     0E 0F 0D 00 
149fd     F0 DF D7 D6 
14a01     DC DC DB DB 
14a05     DC DC ED F9 | 	byte	$0e, $0f, $0d, $00, $f0, $df, $d7, $d6, $dc, $dc, $db, $db, $dc, $dc, $ed, $f9
14a09     00 08 0E 0E 
14a0d     04 FF FF FD 
14a11     FE 01 0C 1A 
14a15     26 1E 12 07 | 	byte	$00, $08, $0e, $0e, $04, $ff, $ff, $fd, $fe, $01, $0c, $1a, $26, $1e, $12, $07
14a19     02 FD 03 13 
14a1d     25 36 46 48 
14a21     46 36 29 26 
14a25     1F 16 08 F7 | 	byte	$02, $fd, $03, $13, $25, $36, $46, $48, $46, $36, $29, $26, $1f, $16, $08, $f7
14a29     E9 DC D2 D3 
14a2d     CE CF CA CA 
14a31     CC D8 E1 F0 
14a35     F2 F1 E4 D6 | 	byte	$e9, $dc, $d2, $d3, $ce, $cf, $ca, $ca, $cc, $d8, $e1, $f0, $f2, $f1, $e4, $d6
14a39     CD C5 B6 B9 
14a3d     BE CF E5 E7 
14a41     E9 EC F1 F1 
14a45     F8 02 17 2E | 	byte	$cd, $c5, $b6, $b9, $be, $cf, $e5, $e7, $e9, $ec, $f1, $f1, $f8, $02, $17, $2e
14a49     3D 4B 57 55 
14a4d     5A 63 62 52 
14a51     39 1D FF E3 
14a55     D3 C2 B6 AF | 	byte	$3d, $4b, $57, $55, $5a, $63, $62, $52, $39, $1d, $ff, $e3, $d3, $c2, $b6, $af
14a59     AA A8 AB B2 
14a5d     CA D5 E7 F5 
14a61     F0 EB E4 E8 
14a65     ED F8 06 18 | 	byte	$aa, $a8, $ab, $b2, $ca, $d5, $e7, $f5, $f0, $eb, $e4, $e8, $ed, $f8, $06, $18
14a69     23 26 23 16 
14a6d     FA E4 D4 CD 
14a71     D4 DF EC FF 
14a75     12 1E 25 30 | 	byte	$23, $26, $23, $16, $fa, $e4, $d4, $cd, $d4, $df, $ec, $ff, $12, $1e, $25, $30
14a79     30 32 27 1A 
14a7d     11 0D 0E 15 
14a81     12 14 12 08 
14a85     04 03 03 06 | 	byte	$30, $32, $27, $1a, $11, $0d, $0e, $15, $12, $14, $12, $08, $04, $03, $03, $06
14a89     06 05 F3 E7 
14a8d     DD D2 CE C9 
14a91     CC E0 F1 FC 
14a95     F9 FE FB F4 | 	byte	$06, $05, $f3, $e7, $dd, $d2, $ce, $c9, $cc, $e0, $f1, $fc, $f9, $fe, $fb, $f4
14a99     ED E8 E9 F1 
14a9d     00 09 0C 0A 
14aa1     05 07 12 1C 
14aa5     1C 1C 1B 1D | 	byte	$ed, $e8, $e9, $f1, $00, $09, $0c, $0a, $05, $07, $12, $1c, $1c, $1c, $1b, $1d
14aa9     20 20 1F 17 
14aad     0E 03 FD FB 
14ab1     FE 00 00 29 
14ab5     2E 37 44 3F | 	byte	$20, $20, $1f, $17, $0e, $03, $fd, $fb, $fe, $00, $00, $29, $2e, $37, $44, $3f
14ab9     37 2A 25 2A 
14abd     25 18 0F 00 
14ac1     EA EF F1 E2 
14ac5     FE E3 D7 E6 | 	byte	$37, $2a, $25, $2a, $25, $18, $0f, $00, $ea, $ef, $f1, $e2, $fe, $e3, $d7, $e6
14ac9     EA FE 1A 13 
14acd     00 05 16 29 
14ad1     49 46 2E 31 
14ad5     3C 4D 54 4D | 	byte	$ea, $fe, $1a, $13, $00, $05, $16, $29, $49, $46, $2e, $31, $3c, $4d, $54, $4d
14ad9     3D 2E 31 2E 
14add     25 1A 05 E8 
14ae1     E2 E6 DF EF 
14ae5     F1 CF D2 DC | 	byte	$3d, $2e, $31, $2e, $25, $1a, $05, $e8, $e2, $e6, $df, $ef, $f1, $cf, $d2, $dc
14ae9     EA 00 1A 08 
14aed     00 07 1A 37 
14af1     4F 38 2E 37 
14af5     44 4F 4F 46 | 	byte	$ea, $00, $1a, $08, $00, $07, $1a, $37, $4f, $38, $2e, $37, $44, $4f, $4f, $46
14af9     35 2A 31 29 
14afd     1D 16 00 E3 
14b01     E3 E3 E2 F2 
14b05     E8 CB D7 E2 | 	byte	$35, $2a, $31, $29, $1d, $16, $00, $e3, $e3, $e3, $e2, $f2, $e8, $cb, $d7, $e2
14b09     EF 0E 13 01 
14b0d     00 0E 1E 3F 
14b11     46 35 2E 38 
14b15     45 4D 46 3D | 	byte	$ef, $0e, $13, $01, $00, $0e, $1e, $3f, $46, $35, $2e, $38, $45, $4d, $46, $3d
14b19     2A 29 2A 21 
14b1d     18 0F F1 E2 
14b21     E3 E3 EA F1 
14b25     DF CF DB E3 | 	byte	$2a, $29, $2a, $21, $18, $0f, $f1, $e2, $e3, $e3, $ea, $f1, $df, $cf, $db, $e3
14b29     FE 16 0F 00 
14b2d     01 11 29 45 
14b31     3D 2E 35 3C 
14b35     49 4D 46 35 | 	byte	$fe, $16, $0f, $00, $01, $11, $29, $45, $3d, $2e, $35, $3c, $49, $4d, $46, $35
14b39     25 2A 25 21 
14b3d     13 00 ED E3 
14b41     E3 E2 EF EA 
14b45     D2 D2 DC EA | 	byte	$25, $2a, $25, $21, $13, $00, $ed, $e3, $e3, $e2, $ef, $ea, $d2, $d2, $dc, $ea
14b49     00 11 05 00 
14b4d     02 16 31 46 
14b51     38 31 37 44 
14b55     4D 49 3F 2E | 	byte	$00, $11, $05, $00, $02, $16, $31, $46, $38, $31, $37, $44, $4d, $49, $3f, $2e
14b59     25 2A 24 18 
14b5d     0F 00 E8 E2 
14b61     E3 E3 F1 E3 
14b65     CB D2 DC EF | 	byte	$25, $2a, $24, $18, $0f, $00, $e8, $e2, $e3, $e3, $f1, $e3, $cb, $d2, $dc, $ef
14b69     08 08 00 00 
14b6d     08 1E 3C 46 
14b71     37 37 3C 46 
14b75     4F 46 3D 2A | 	byte	$08, $08, $00, $00, $08, $1e, $3c, $46, $37, $37, $3c, $46, $4f, $46, $3d, $2a
14b79     25 29 21 13 
14b7d     05 F1 E8 E2 
14b81     E3 EA EA D6 
14b85     C9 D7 E2 FE | 	byte	$25, $29, $21, $13, $05, $f1, $e8, $e2, $e3, $ea, $ea, $d6, $c9, $d7, $e2, $fe
14b89     08 05 00 00 
14b8d     11 29 44 3D 
14b91     37 3C 44 4D 
14b95     4F 46 38 25 | 	byte	$08, $05, $00, $00, $11, $29, $44, $3d, $37, $3c, $44, $4d, $4f, $46, $38, $25
14b99     29 25 1A 0F 
14b9d     00 F1 E3 DF 
14ba1     E2 EF E2 CF 
14ba5     C9 D7 EA 00 | 	byte	$29, $25, $1a, $0f, $00, $f1, $e3, $df, $e2, $ef, $e2, $cf, $c9, $d7, $ea, $00
14ba9     05 01 00 02 
14bad     1A 31 44 3C 
14bb1     38 3D 49 4F 
14bb5     4F 46 35 25 | 	byte	$05, $01, $00, $02, $1a, $31, $44, $3c, $38, $3d, $49, $4f, $4f, $46, $35, $25
14bb9     2A 21 18 0F 
14bbd     FB EF E2 DF 
14bc1     E3 EA D6 C8 
14bc5     D2 DB EF 00 | 	byte	$2a, $21, $18, $0f, $fb, $ef, $e2, $df, $e3, $ea, $d6, $c8, $d2, $db, $ef, $00
14bc9     01 00 00 0E 
14bcd     1E 3C 3F 3C 
14bd1     3D 44 4F 54 
14bd5     4D 3F 2E 29 | 	byte	$01, $00, $00, $0e, $1e, $3c, $3f, $3c, $3d, $44, $4f, $54, $4d, $3f, $2e, $29
14bd9     2A 21 13 05 
14bdd     F8 ED DF DF 
14be1     E8 E3 CF C8 
14be5     D2 DC F9 00 | 	byte	$2a, $21, $13, $05, $f8, $ed, $df, $df, $e8, $e3, $cf, $c8, $d2, $dc, $f9, $00
14be9     00 00 01 13 
14bed     2E 3F 3D 3D 
14bf1     3F 49 54 54 
14bf5     4D 3D 2A 2A | 	byte	$00, $00, $01, $13, $2e, $3f, $3d, $3d, $3f, $49, $54, $54, $4d, $3d, $2a, $2a
14bf9     25 1D 0F 00 
14bfd     F2 E8 DC DF 
14c01     E8 D7 C8 C9 
14c05     D2 EA FE 00 | 	byte	$25, $1d, $0f, $00, $f2, $e8, $dc, $df, $e8, $d7, $c8, $c9, $d2, $ea, $fe, $00
14c09     00 00 07 1D 
14c0d     31 3F 3D 3F 
14c11     45 4F 54 54 
14c15     46 38 2A 2A | 	byte	$00, $00, $07, $1d, $31, $3f, $3d, $3f, $45, $4f, $54, $54, $46, $38, $2a, $2a
14c19     24 18 05 FB 
14c1d     F2 DF DB E3 
14c21     E3 CB C4 CB 
14c25     D7 EF FE 00 | 	byte	$24, $18, $05, $fb, $f2, $df, $db, $e3, $e3, $cb, $c4, $cb, $d7, $ef, $fe, $00
14c29     00 00 0E 24 
14c2d     3C 3D 3F 45 
14c31     49 54 58 4F 
14c35     46 35 2A 2A | 	byte	$00, $00, $0e, $24, $3c, $3d, $3f, $45, $49, $54, $58, $4f, $46, $35, $2a, $2a
14c39     21 11 01 FB 
14c3d     F1 DB DC E6 
14c41     DF C4 C4 CF 
14c45     DC F2 FE 00 | 	byte	$21, $11, $01, $fb, $f1, $db, $dc, $e6, $df, $c4, $c4, $cf, $dc, $f2, $fe, $00
14c49     00 02 16 2E 
14c4d     3C 3D 44 46 
14c51     4F 58 5A 4F 
14c55     46 2E 2E 25 | 	byte	$00, $02, $16, $2e, $3c, $3d, $44, $46, $4f, $58, $5a, $4f, $46, $2e, $2e, $25
14c59     1D 08 00 F9 
14c5d     E8 DB DC E3 
14c61     D2 C1 C8 D2 
14c65     EA F2 FE 00 | 	byte	$1d, $08, $00, $f9, $e8, $db, $dc, $e3, $d2, $c1, $c8, $d2, $ea, $f2, $fe, $00
14c69     00 07 1E 31 
14c6d     3C 3F 46 4D 
14c71     54 5A 5A 4D 
14c75     3D 2E 2E 24 | 	byte	$00, $07, $1e, $31, $3c, $3f, $46, $4d, $54, $5a, $5a, $4d, $3d, $2e, $2e, $24
14c79     18 05 FF F8 
14c7d     E2 D7 E2 DF 
14c81     C8 C1 C9 DB 
14c85     EA F2 FF 00 | 	byte	$18, $05, $ff, $f8, $e2, $d7, $e2, $df, $c8, $c1, $c9, $db, $ea, $f2, $ff, $00
14c89     01 11 29 38 
14c8d     3C 44 49 4F 
14c91     58 5C 54 49 
14c95     37 2E 2A 21 | 	byte	$01, $11, $29, $38, $3c, $44, $49, $4f, $58, $5c, $54, $49, $37, $2e, $2a, $21
14c99     0F 00 FE F1 
14c9d     DF D7 E3 D6 
14ca1     BC C1 D2 DC 
14ca5     EA F9 00 00 | 	byte	$0f, $00, $fe, $f1, $df, $d7, $e3, $d6, $bc, $c1, $d2, $dc, $ea, $f9, $00, $00
14ca9     05 18 2E 38 
14cad     3D 46 4D 54 
14cb1     5C 5C 54 46 
14cb5     35 2E 25 1D | 	byte	$05, $18, $2e, $38, $3d, $46, $4d, $54, $5c, $5c, $54, $46, $35, $2e, $25, $1d
14cb9     07 00 FE EA 
14cbd     D7 DC DF CB 
14cc1     BA C8 D2 E3 
14cc5     EA FE 00 01 | 	byte	$07, $00, $fe, $ea, $d7, $dc, $df, $cb, $ba, $c8, $d2, $e3, $ea, $fe, $00, $01
14cc9     0E 1E 31 38 
14ccd     3F 49 4F 58 
14cd1     5E 5A 4F 46 
14cd5     2E 2E 24 18 | 	byte	$0e, $1e, $31, $38, $3f, $49, $4f, $58, $5e, $5a, $4f, $46, $2e, $2e, $24, $18
14cd9     01 00 F9 E3 
14cdd     D6 DC DB C3 
14ce1     B7 C9 DB E6 
14ce5     EF FF 00 02 | 	byte	$01, $00, $f9, $e3, $d6, $dc, $db, $c3, $b7, $c9, $db, $e6, $ef, $ff, $00, $02
14ce9     11 29 35 3C 
14ced     45 4F 54 5C 
14cf1     5E 5A 4D 38 
14cf5     2E 2A 21 0F | 	byte	$11, $29, $35, $3c, $45, $4f, $54, $5c, $5e, $5a, $4d, $38, $2e, $2a, $21, $0f
14cf9     00 00 F1 DF 
14cfd     D6 DF D2 BA 
14d01     BC D2 DC E6 
14d05     F2 00 01 07 | 	byte	$00, $00, $f1, $df, $d6, $df, $d2, $ba, $bc, $d2, $dc, $e6, $f2, $00, $01, $07
14d09     1A 2E 37 3C 
14d0d     49 4F 58 5E 
14d11     5E 54 46 35 
14d15     2E 25 18 05 | 	byte	$1a, $2e, $37, $3c, $49, $4f, $58, $5e, $5e, $54, $46, $35, $2e, $25, $18, $05
14d19     00 FF ED D7 
14d1d     D7 DB C8 B7 
14d21     C4 D7 DF E6 
14d25     F9 00 02 0E | 	byte	$00, $ff, $ed, $d7, $d7, $db, $c8, $b7, $c4, $d7, $df, $e6, $f9, $00, $02, $0e
14d29     1E 2E 37 3F 
14d2d     4D 54 5C 60 
14d31     5E 54 46 2E 
14d35     2E 21 13 00 | 	byte	$1e, $2e, $37, $3f, $4d, $54, $5c, $60, $5e, $54, $46, $2e, $2e, $21, $13, $00
14d39     00 FB E8 D6 
14d3d     DC D6 BC B7 
14d41     CF DB DF EA 
14d45     FE 01 07 16 | 	byte	$00, $fb, $e8, $d6, $dc, $d6, $bc, $b7, $cf, $db, $df, $ea, $fe, $01, $07, $16
14d49     29 31 38 45 
14d4d     4F 58 5E 64 
14d51     5C 4F 3D 2E 
14d55     2A 21 0F 00 | 	byte	$29, $31, $38, $45, $4f, $58, $5e, $64, $5c, $4f, $3d, $2e, $2a, $21, $0f, $00
14d59     00 F2 DF D6 
14d5d     DB CB BA BB 
14d61     D2 DB E2 EF 
14d65     00 02 0E 1D | 	byte	$00, $f2, $df, $d6, $db, $cb, $ba, $bb, $d2, $db, $e2, $ef, $00, $02, $0e, $1d
14d69     2E 31 3C 49 
14d6d     54 5C 64 64 
14d71     5A 4D 35 2E 
14d75     25 18 05 00 | 	byte	$2e, $31, $3c, $49, $54, $5c, $64, $64, $5a, $4d, $35, $2e, $25, $18, $05, $00
14d79     00 F1 DB D7 
14d7d     D7 C3 B3 C4 
14d81     D6 DB E6 F9 
14d85     00 07 11 21 | 	byte	$00, $f1, $db, $d7, $d7, $c3, $b3, $c4, $d6, $db, $e6, $f9, $00, $07, $11, $21
14d89     2E 35 3F 4F 
14d8d     58 5E 65 5E 
14d91     54 46 35 2E 
14d95     21 0F 00 00 | 	byte	$2e, $35, $3f, $4f, $58, $5e, $65, $5e, $54, $46, $35, $2e, $21, $0f, $00, $00
14d99     FB E8 D6 D7 
14d9d     D2 BB B7 C9 
14da1     D6 DC EA FE 
14da5     01 08 18 25 | 	byte	$fb, $e8, $d6, $d7, $d2, $bb, $b7, $c9, $d6, $dc, $ea, $fe, $01, $08, $18, $25
14da9     2E 37 45 54 
14dad     5C 64 65 5E 
14db1     4F 3D 2E 2A 
14db5     1D 07 00 00 | 	byte	$2e, $37, $45, $54, $5c, $64, $65, $5e, $4f, $3d, $2e, $2a, $1d, $07, $00, $00
14db9     F8 E3 D6 D6 
14dbd     CB BA BB D2 
14dc1     D7 DC EF 00 
14dc5     05 11 1E 2A | 	byte	$f8, $e3, $d6, $d6, $cb, $ba, $bb, $d2, $d7, $dc, $ef, $00, $05, $11, $1e, $2a
14dc9     2E 3C 4D 58 
14dcd     5E 65 64 5A 
14dd1     4D 37 2E 25 
14dd5     13 01 01 00 | 	byte	$2e, $3c, $4d, $58, $5e, $65, $64, $5a, $4d, $37, $2e, $25, $13, $01, $01, $00
14dd9     F1 DF D6 D2 
14ddd     C3 B3 C4 D2 
14de1     D7 E6 F9 00 
14de5     08 16 21 2A | 	byte	$f1, $df, $d6, $d2, $c3, $b3, $c4, $d2, $d7, $e6, $f9, $00, $08, $16, $21, $2a
14de9     31 3F 4F 5A 
14ded     64 65 64 5A 
14df1     46 35 2A 21 
14df5     0F 01 00 FB | 	byte	$31, $3f, $4f, $5a, $64, $65, $64, $5a, $46, $35, $2a, $21, $0f, $01, $00, $fb
14df9     EA D7 D2 CB 
14dfd     BA B7 C9 D2 
14e01     DB EA FE 02 
14e05     0F 1A 25 2E | 	byte	$ea, $d7, $d2, $cb, $ba, $b7, $c9, $d2, $db, $ea, $fe, $02, $0f, $1a, $25, $2e
14e09     37 45 54 5E 
14e0d     65 66 5E 54 
14e11     3D 2E 2A 18 
14e15     05 01 00 F8 | 	byte	$37, $45, $54, $5e, $65, $66, $5e, $54, $3d, $2e, $2a, $18, $05, $01, $00, $f8
14e19     E6 D6 D2 C8 
14e1d     BA BC C9 D2 
14e21     DC EF 00 07 
14e25     13 1E 29 2E | 	byte	$e6, $d6, $d2, $c8, $ba, $bc, $c9, $d2, $dc, $ef, $00, $07, $13, $1e, $29, $2e
14e29     3C 4D 58 60 
14e2d     66 65 5C 4D 
14e31     37 2E 24 11 
14e35     02 01 00 F1 | 	byte	$3c, $4d, $58, $60, $66, $65, $5c, $4d, $37, $2e, $24, $11, $02, $01, $00, $f1
14e39     DF D2 CF BC 
14e3d     B3 C1 CB D6 
14e41     E6 F9 01 0E 
14e45     18 21 2A 31 | 	byte	$df, $d2, $cf, $bc, $b3, $c1, $cb, $d6, $e6, $f9, $01, $0e, $18, $21, $2a, $31
14e49     3F 54 5C 65 
14e4d     66 64 5A 46 
14e51     35 2A 21 08 
14e55     01 00 FB ED | 	byte	$3f, $54, $5c, $65, $66, $64, $5a, $46, $35, $2a, $21, $08, $01, $00, $fb, $ed
14e59     DF D2 CB BA 
14e5d     B7 C4 CF DB 
14e61     EA FF 07 11 
14e65     1A 24 2A 35 | 	byte	$df, $d2, $cb, $ba, $b7, $c4, $cf, $db, $ea, $ff, $07, $11, $1a, $24, $2a, $35
14e69     45 58 60 66 
14e6d     66 60 54 46 
14e71     2E 25 18 05 
14e75     01 00 F8 E8 | 	byte	$45, $58, $60, $66, $66, $60, $54, $46, $2e, $25, $18, $05, $01, $00, $f8, $e8
14e79     D7 CF C4 B3 
14e7d     BB 00 00 F9 
14e81     FC FC FD FF 
14e85     00 00 01 03 | 	byte	$d7, $cf, $c4, $b3, $bb, $00, $00, $f9, $fc, $fc, $fd, $ff, $00, $00, $01, $03
14e89     04 07 09 0A 
14e8d     0D 0D 0E 13 
14e91     13 13 10 0E 
14e95     10 14 1A 20 | 	byte	$04, $07, $09, $0a, $0d, $0d, $0e, $13, $13, $13, $10, $0e, $10, $14, $1a, $20
14e99     21 20 1E 16 
14e9d     0E 07 07 03 
14ea1     03 03 FD EA 
14ea5     D0 BC AF B1 | 	byte	$21, $20, $1e, $16, $0e, $07, $07, $03, $03, $03, $fd, $ea, $d0, $bc, $af, $b1
14ea9     B1 B1 B3 AD 
14ead     A7 A9 A6 A9 
14eb1     A2 9D 9D 9A 
14eb5     9A 90 94 94 | 	byte	$b1, $b1, $b3, $ad, $a7, $a9, $a6, $a9, $a2, $9d, $9d, $9a, $9a, $90, $94, $94
14eb9     A0 A9 B1 AD 
14ebd     AF B1 B5 CC 
14ec1     E0 F2 F6 F6 
14ec5     F6 DF D3 C9 | 	byte	$a0, $a9, $b1, $ad, $af, $b1, $b5, $cc, $e0, $f2, $f6, $f6, $f6, $df, $d3, $c9
14ec9     CC CF DA E6 
14ecd     EC F0 FC EC 
14ed1     EA DA CA C0 
14ed5     BF BF C5 D0 | 	byte	$cc, $cf, $da, $e6, $ec, $f0, $fc, $ec, $ea, $da, $ca, $c0, $bf, $bf, $c5, $d0
14ed9     E0 F3 04 09 
14edd     21 2A 37 34 
14ee1     2C 20 18 16 
14ee5     16 0E 0D 01 | 	byte	$e0, $f3, $04, $09, $21, $2a, $37, $34, $2c, $20, $18, $16, $16, $0e, $0d, $01
14ee9     01 09 16 26 
14eed     37 3B 3D 2D 
14ef1     18 01 FF 00 
14ef5     FF 00 01 04 | 	byte	$01, $09, $16, $26, $37, $3b, $3d, $2d, $18, $01, $ff, $00, $ff, $00, $01, $04
14ef9     09 00 FC F7 
14efd     F9 FF 07 10 
14f01     24 2D 3A 44 
14f05     4B 4B 4B 41 | 	byte	$09, $00, $fc, $f7, $f9, $ff, $07, $10, $24, $2d, $3a, $44, $4b, $4b, $4b, $41
14f09     27 14 FF F2 
14f0d     F6 01 14 1D 
14f11     21 21 20 20 
14f15     20 1E 1D 16 | 	byte	$27, $14, $ff, $f2, $f6, $01, $14, $1d, $21, $21, $20, $20, $20, $1e, $1d, $16
14f19     04 ED DC D3 
14f1d     C5 CC D3 D9 
14f21     E2 EA F3 EC 
14f25     EC E6 E0 DF | 	byte	$04, $ed, $dc, $d3, $c5, $cc, $d3, $d9, $e2, $ea, $f3, $ec, $ec, $e6, $e0, $df
14f29     E0 E2 E8 F2 
14f2d     F3 FD F9 EA 
14f31     DF D0 D4 CA 
14f35     CC C5 C9 CA | 	byte	$e0, $e2, $e8, $f2, $f3, $fd, $f9, $ea, $df, $d0, $d4, $ca, $cc, $c5, $c9, $ca
14f39     D6 DA DC CA 
14f3d     C3 BF C6 DA 
14f41     F0 04 0D 10 
14f45     10 16 20 30 | 	byte	$d6, $da, $dc, $ca, $c3, $bf, $c6, $da, $f0, $04, $0d, $10, $10, $16, $20, $30
14f49     36 3B 3D 3A 
14f4d     34 20 13 FC 
14f51     F7 E6 D6 D6 
14f55     D3 D6 E2 F2 | 	byte	$36, $3b, $3d, $3a, $34, $20, $13, $fc, $f7, $e6, $d6, $d6, $d3, $d6, $e2, $f2
14f59     FF 03 00 F6 
14f5d     E6 DC D3 CA 
14f61     D3 DA E2 EC 
14f65     EC DF DF D0 | 	byte	$ff, $03, $00, $f6, $e6, $dc, $d3, $ca, $d3, $da, $e2, $ec, $ec, $df, $df, $d0
14f69     D4 E0 E6 EC 
14f6d     EC DA BC AC 
14f71     92 84 86 89 
14f75     90 A0 AD B3 | 	byte	$d4, $e0, $e6, $ec, $ec, $da, $bc, $ac, $92, $84, $86, $89, $90, $a0, $ad, $b3
14f79     B9 BC C6 CC 
14f7d     D9 E6 EC F3 
14f81     F9 00 04 04 
14f85     07 03 00 00 | 	byte	$b9, $bc, $c6, $cc, $d9, $e6, $ec, $f3, $f9, $00, $04, $04, $07, $03, $00, $00
14f89     F9 F9 F9 03 
14f8d     0A 1D 2D 30 
14f91     30 2C 24 2C 
14f95     34 43 41 43 | 	byte	$f9, $f9, $f9, $03, $0a, $1d, $2d, $30, $30, $2c, $24, $2c, $34, $43, $41, $43
14f99     30 1E 0D 13 
14f9d     13 1E 2D 30 
14fa1     36 27 20 07 
14fa5     F0 C0 90 80 | 	byte	$30, $1e, $0d, $13, $13, $1e, $2d, $30, $36, $27, $20, $07, $f0, $c0, $90, $80
14fa9     80 80 83 94 
14fad     9D A6 A0 A6 
14fb1     A9 AC AD AD 
14fb5     A6 A0 A3 A3 | 	byte	$80, $80, $83, $94, $9d, $a6, $a0, $a6, $a9, $ac, $ad, $ad, $a6, $a0, $a3, $a3
14fb9     A2 A3 A3 96 
14fbd     96 98 9C B1 
14fc1     BD C3 C0 C0 
14fc5     C3 CA D3 E0 | 	byte	$a2, $a3, $a3, $96, $96, $98, $9c, $b1, $bd, $c3, $c0, $c0, $c3, $ca, $d3, $e0
14fc9     F0 01 10 16 
14fcd     16 18 0E FC 
14fd1     ED DA D6 DA 
14fd5     E0 E3 ED F0 | 	byte	$f0, $01, $10, $16, $16, $18, $0e, $fc, $ed, $da, $d6, $da, $e0, $e3, $ed, $f0
14fd9     F2 F3 EC ED 
14fdd     E3 E6 E6 E6 
14fe1     F0 03 0E 27 
14fe5     34 40 43 43 | 	byte	$f2, $f3, $ec, $ed, $e3, $e6, $e6, $e6, $f0, $03, $0e, $27, $34, $40, $43, $43
14fe9     53 59 57 51 
14fed     2C 0D ED DC 
14ff1     CF CF D4 DF 
14ff5     EC FC F3 00 | 	byte	$53, $59, $57, $51, $2c, $0d, $ed, $dc, $cf, $cf, $d4, $df, $ec, $fc, $f3, $00
14ff9     FF 00 01 01 
14ffd     04 10 20 40 
15001     54 66 74 77 
15005     76 71 64 63 | 	byte	$ff, $00, $01, $01, $04, $10, $20, $40, $54, $66, $74, $77, $76, $71, $64, $63
15009     4B 37 1E 0D 
1500d     FF F9 00 F6 
15011     EA E0 E0 E6 
15015     F0 F9 F6 F3 | 	byte	$4b, $37, $1e, $0d, $ff, $f9, $00, $f6, $ea, $e0, $e0, $e6, $f0, $f9, $f6, $f3
15019     F0 F6 FC 10 
1501d     26 2D 3A 37 
15021     26 18 07 EC 
15025     D6 C3 B3 AD | 	byte	$f0, $f6, $fc, $10, $26, $2d, $3a, $37, $26, $18, $07, $ec, $d6, $c3, $b3, $ad
15029     B1 BC CC C9 
1502d     C9 C9 C6 C6 
15031     C9 C6 C0 C5 
15035     CA DF F0 00 | 	byte	$b1, $bc, $cc, $c9, $c9, $c9, $c6, $c6, $c9, $c6, $c0, $c5, $ca, $df, $f0, $00
15039     0D 0E 09 04 
1503d     01 01 01 04 
15041     04 F7 F6 F2 
15045     F2 F0 F3 00 | 	byte	$0d, $0e, $09, $04, $01, $01, $01, $04, $04, $f7, $f6, $f2, $f2, $f0, $f3, $00
15049     0A 10 0D 0D 
1504d     03 00 FD F9 
15051     F3 FF 0A 14 
15055     2A 31 31 31 | 	byte	$0a, $10, $0d, $0d, $03, $00, $fd, $f9, $f3, $ff, $0a, $14, $2a, $31, $31, $31
15059     27 20 18 04 
1505d     E0 BC A0 96 
15061     90 A6 B3 CA 
15065     D3 D6 DA DF | 	byte	$27, $20, $18, $04, $e0, $bc, $a0, $96, $90, $a6, $b3, $ca, $d3, $d6, $da, $df
15069     E3 ED ED E2 
1506d     D6 CA C3 C0 
15071     C5 D0 D6 DC 
15075     D4 D0 C0 BF | 	byte	$e3, $ed, $ed, $e2, $d6, $ca, $c3, $c0, $c5, $d0, $d6, $dc, $d4, $d0, $c0, $bf
15079     B1 A6 9A 92 
1507d     A2 B3 CF E6 
15081     F3 04 0E 14 
15085     24 24 21 20 | 	byte	$b1, $a6, $9a, $92, $a2, $b3, $cf, $e6, $f3, $04, $0e, $14, $24, $24, $21, $20
15089     1A 1A 1D 24 
1508d     26 24 20 1A 
15091     0A FD FD F6 
15095     F9 F2 F3 F6 | 	byte	$1a, $1a, $1d, $24, $26, $24, $20, $1a, $0a, $fd, $fd, $f6, $f9, $f2, $f3, $f6
15099     03 10 2D 43 
1509d     5A 63 60 63 
150a1     5A 53 4D 2D 
150a5     10 F6 D0 B7 | 	byte	$03, $10, $2d, $43, $5a, $63, $60, $63, $5a, $53, $4d, $2d, $10, $f6, $d0, $b7
150a9     A6 9A 92 83 
150ad     80 80 80 80 
150b1     80 80 80 80 
150b5     80 80 90 A3 | 	byte	$a6, $9a, $92, $83, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $90, $a3
150b9     B1 C5 C6 CA 
150bd     D6 DF EA E2 
150c1     E3 E0 DA DF 
150c5     E0 E6 E8 EC | 	byte	$b1, $c5, $c6, $ca, $d6, $df, $ea, $e2, $e3, $e0, $da, $df, $e0, $e6, $e8, $ec
150c9     E6 D3 C5 BF 
150cd     B3 B1 AC B1 
150d1     BD CA E3 F2 
150d5     04 14 26 37 | 	byte	$e6, $d3, $c5, $bf, $b3, $b1, $ac, $b1, $bd, $ca, $e3, $f2, $04, $14, $26, $37
150d9     37 3A 37 24 
150dd     14 04 FC FC 
150e1     01 0D 1A 20 
150e5     1A 0E 0D 0D | 	byte	$37, $3a, $37, $24, $14, $04, $fc, $fc, $01, $0d, $1a, $20, $1a, $0e, $0d, $0d
150e9     10 00 ED DF 
150ed     DF DF F0 FD 
150f1     18 27 40 36 
150f5     3A 3A 30 27 | 	byte	$10, $00, $ed, $df, $df, $df, $f0, $fd, $18, $27, $40, $36, $3a, $3a, $30, $27
150f9     1D 10 0E 0E 
150fd     09 0D 18 10 
15101     16 21 2C 34 
15105     43 47 4B 4B | 	byte	$1d, $10, $0e, $0e, $09, $0d, $18, $10, $16, $21, $2c, $34, $43, $47, $4b, $4b
15109     49 4B 44 41 
1510d     41 37 3A 2D 
15111     26 1A 0A 00 
15115     EC E2 E0 E3 | 	byte	$49, $4b, $44, $41, $41, $37, $3a, $2d, $26, $1a, $0a, $00, $ec, $e2, $e0, $e3
15119     F0 F6 FD 04 
1511d     13 04 FF FC 
15121     F6 ED E8 E8 
15125     E6 EA F3 FC | 	byte	$f0, $f6, $fd, $04, $13, $04, $ff, $fc, $f6, $ed, $e8, $e8, $e6, $ea, $f3, $fc
15129     FC F2 EC E2 
1512d     DA D3 CF C0 
15131     BD A6 9D 94 
15135     98 9C AD BC | 	byte	$fc, $f2, $ec, $e2, $da, $d3, $cf, $c0, $bd, $a6, $9d, $94, $98, $9c, $ad, $bc
15139     CF E2 F2 FD 
1513d     10 1A 18 20 
15141     2A 31 41 40 
15145     4B 4D 4F 37 | 	byte	$cf, $e2, $f2, $fd, $10, $1a, $18, $20, $2a, $31, $41, $40, $4b, $4d, $4f, $37
15149     27 0D 04 FC 
1514d     F6 ED EA E0 
15151     DF E6 E8 EA 
15155     F0 F7 FF 03 | 	byte	$27, $0d, $04, $fc, $f6, $ed, $ea, $e0, $df, $e6, $e8, $ea, $f0, $f7, $ff, $03
15159     0D 0E 10 0E 
1515d     04 F3 ED DA 
15161     D9 E0 D9 E6 
15165     E3 E6 E2 DC | 	byte	$0d, $0e, $10, $0e, $04, $f3, $ed, $da, $d9, $e0, $d9, $e6, $e3, $e6, $e2, $dc
15169     BD A0 86 80 
1516d     80 80 92 B5 
15171     CC D4 E0 E2 
15175     E8 F7 FD 03 | 	byte	$bd, $a0, $86, $80, $80, $80, $92, $b5, $cc, $d4, $e0, $e2, $e8, $f7, $fd, $03
15179     04 04 07 04 
1517d     04 FD F9 FC 
15181     FD 01 04 09 
15185     FC F3 EA DC | 	byte	$04, $04, $07, $04, $04, $fd, $f9, $fc, $fd, $01, $04, $09, $fc, $f3, $ea, $dc
15189     DF E2 EC F3 
1518d     01 0A 0E 10 
15191     21 2A 2A 2A 
15195     2A 26 27 31 | 	byte	$df, $e2, $ec, $f3, $01, $0a, $0e, $10, $21, $2a, $2a, $2a, $2a, $26, $27, $31
15199     37 41 49 41 
1519d     31 16 03 F6 
151a1     EA E2 E6 EA 
151a5     EC E8 DC C9 | 	byte	$37, $41, $49, $41, $31, $16, $03, $f6, $ea, $e2, $e6, $ea, $ec, $e8, $dc, $c9
151a9     B9 B5 B5 BC 
151ad     BF BC B5 AC 
151b1     9C 86 80 80 
151b5     80 8F 9D AF | 	byte	$b9, $b5, $b5, $bc, $bf, $bc, $b5, $ac, $9c, $86, $80, $80, $80, $8f, $9d, $af
151b9     B5 B1 B1 BD 
151bd     BC C3 BF C0 
151c1     C3 C6 D4 DA 
151c5     E2 F3 E8 E6 | 	byte	$b5, $b1, $b1, $bd, $bc, $c3, $bf, $c0, $c3, $c6, $d4, $da, $e2, $f3, $e8, $e6
151c9     E2 DF DC E0 
151cd     E2 E3 E8 F0 
151d1     F2 F9 ED E8 
151d5     E0 DA D6 D6 | 	byte	$e2, $df, $dc, $e0, $e2, $e3, $e8, $f0, $f2, $f9, $ed, $e8, $e0, $da, $d6, $d6
151d9     DA E0 E3 ED 
151dd     F0 F9 09 16 
151e1     2A 3D 3B 41 
151e5     41 40 3B 24 | 	byte	$da, $e0, $e3, $ed, $f0, $f9, $09, $16, $2a, $3d, $3b, $41, $41, $40, $3b, $24
151e9     14 0E 09 07 
151ed     13 1D 13 18 
151f1     10 01 01 03 
151f5     03 07 13 14 | 	byte	$14, $0e, $09, $07, $13, $1d, $13, $18, $10, $01, $01, $03, $03, $07, $13, $14
151f9     16 24 2D 37 
151fd     3B 3D 3D 41 
15201     43 47 47 4B 
15205     47 41 41 37 | 	byte	$16, $24, $2d, $37, $3b, $3d, $3d, $41, $43, $47, $47, $4b, $47, $41, $41, $37
15209     31 16 03 F0 
1520d     E0 DC E3 F7 
15211     04 13 21 2D 
15215     31 41 41 41 | 	byte	$31, $16, $03, $f0, $e0, $dc, $e3, $f7, $04, $13, $21, $2d, $31, $41, $41, $41
15219     3A 30 1D 03 
1521d     F2 EC E0 E6 
15221     E6 F0 F6 F6 
15225     F6 F3 E3 DA | 	byte	$3a, $30, $1d, $03, $f2, $ec, $e0, $e6, $e6, $f0, $f6, $f6, $f6, $f3, $e3, $da
15229     D0 CF C9 CC 
1522d     CC C9 C9 C6 
15231     C0 C3 B9 C0 
15235     CA CF DA E2 | 	byte	$d0, $cf, $c9, $cc, $cc, $c9, $c9, $c6, $c0, $c3, $b9, $c0, $ca, $cf, $da, $e2
15239     E3 F0 FF 01 
1523d     0D 10 0D 07 
15241     00 F9 F6 FC 
15245     FC FF 09 10 | 	byte	$e3, $f0, $ff, $01, $0d, $10, $0d, $07, $00, $f9, $f6, $fc, $fc, $ff, $09, $10
15249     20 2D 40 41 
1524d     41 40 34 2C 
15251     1D 14 10 0D 
15255     0E 1A 20 20 | 	byte	$20, $2d, $40, $41, $41, $40, $34, $2c, $1d, $14, $10, $0d, $0e, $1a, $20, $20
15259     1A 10 00 F9 
1525d     ED E6 E2 D4 
15261     CA BF B5 B7 
15265     BD C3 CA CC | 	byte	$1a, $10, $00, $f9, $ed, $e6, $e2, $d4, $ca, $bf, $b5, $b7, $bd, $c3, $ca, $cc
15269     CC CC C9 C9 
1526d     C0 C3 BD B9 
15271     BC BF CF D3 
15275     DC DC DC DF | 	byte	$cc, $cc, $c9, $c9, $c0, $c3, $bd, $b9, $bc, $bf, $cf, $d3, $dc, $dc, $dc, $df
15279     E0 EC F0 F9 
1527d     03 0D 14 1D 
15281     26 2A 1D 1A 
15285     0E FF FD FC | 	byte	$e0, $ec, $f0, $f9, $03, $0d, $14, $1d, $26, $2a, $1d, $1a, $0e, $ff, $fd, $fc
15289     FC FF 09 16 
1528d     1E 1D 1D 1D 
15291     20 2C 30 31 
15295     31 31 21 1D | 	byte	$fc, $ff, $09, $16, $1e, $1d, $1d, $1d, $20, $2c, $30, $31, $31, $31, $21, $1d
15299     0E FF FC F6 
1529d     F2 F9 F9 FF 
152a1     01 09 0A 01 
152a5     EA CA AF 9D | 	byte	$0e, $ff, $fc, $f6, $f2, $f9, $f9, $ff, $01, $09, $0a, $01, $ea, $ca, $af, $9d
152a9     9C 8F 89 86 
152ad     80 80 80 80 
152b1     84 96 9C AF 
152b5     BF C5 CA CA | 	byte	$9c, $8f, $89, $86, $80, $80, $80, $80, $84, $96, $9c, $af, $bf, $c5, $ca, $ca
152b9     CF CF D0 D6 
152bd     E8 EC F0 F2 
152c1     F0 F2 DF C6 
152c5     BF BD C5 CF | 	byte	$cf, $cf, $d0, $d6, $e8, $ec, $f0, $f2, $f0, $f2, $df, $c6, $bf, $bd, $c5, $cf
152c9     DA E2 EA EA 
152cd     ED F2 F2 F2 
152d1     F2 EA EC EC 
152d5     EC ED E6 E3 | 	byte	$da, $e2, $ea, $ea, $ed, $f2, $f2, $f2, $f2, $ea, $ec, $ec, $ec, $ed, $e6, $e3
152d9     E2 DF DA D9 
152dd     DF E0 E6 E8 
152e1     F3 F6 01 01 
152e5     0A 1A 31 41 | 	byte	$e2, $df, $da, $d9, $df, $e0, $e6, $e8, $f3, $f6, $01, $01, $0a, $1a, $31, $41
152e9     47 4B 47 3A 
152ed     2D 18 09 09 
152f1     0A 18 26 36 
152f5     44 43 59 57 | 	byte	$47, $4b, $47, $3a, $2d, $18, $09, $09, $0a, $18, $26, $36, $44, $43, $59, $57
152f9     4D 49 43 37 
152fd     3B 3A 37 37 
15301     36 34 27 2A 
15305     27 27 26 1E | 	byte	$4d, $49, $43, $37, $3b, $3a, $37, $37, $36, $34, $27, $2a, $27, $27, $26, $1e
15309     16 07 FF F6 
1530d     F3 F7 FD 07 
15311     1A 30 36 31 
15315     26 13 01 E6 | 	byte	$16, $07, $ff, $f6, $f3, $f7, $fd, $07, $1a, $30, $36, $31, $26, $13, $01, $e6
15319     D9 D0 D4 DF 
1531d     ED FF 04 10 
15321     0E 13 13 00 
15325     FF FC F7 F3 | 	byte	$d9, $d0, $d4, $df, $ed, $ff, $04, $10, $0e, $13, $13, $00, $ff, $fc, $f7, $f3
15329     F6 F6 F7 F7 
1532d     EA E0 D3 C6 
15331     C0 BD C0 C6 
15335     CA CF DA DA | 	byte	$f6, $f6, $f7, $f7, $ea, $e0, $d3, $c6, $c0, $bd, $c0, $c6, $ca, $cf, $da, $da
15339     E0 F2 FF 03 
1533d     0A 0A 0D FF 
15341     FD E6 D9 DF 
15345     E6 F6 10 20 | 	byte	$e0, $f2, $ff, $03, $0a, $0a, $0d, $ff, $fd, $e6, $d9, $df, $e6, $f6, $10, $20
15349     2C 36 36 31 
1534d     31 20 1E 18 
15351     1A 1E 2A 27 
15355     26 1D 16 09 | 	byte	$2c, $36, $36, $31, $31, $20, $1e, $18, $1a, $1e, $2a, $27, $26, $1d, $16, $09
15359     03 F9 F7 F9 
1535d     F7 01 09 1A 
15361     2A 10 01 F2 
15365     E8 EA E8 E3 | 	byte	$03, $f9, $f7, $f9, $f7, $01, $09, $1a, $2a, $10, $01, $f2, $e8, $ea, $e8, $e3
15369     E6 D6 CF B5 
1536d     A7 A6 A2 A7 
15371     B5 C3 C9 D4 
15375     DC DC E3 E2 | 	byte	$e6, $d6, $cf, $b5, $a7, $a6, $a2, $a7, $b5, $c3, $c9, $d4, $dc, $dc, $e3, $e2
15379     E0 E2 E6 ED 
1537d     F9 FF 09 09 
15381     0A 0A 01 FF 
15385     FC FF 01 13 | 	byte	$e0, $e2, $e6, $ed, $f9, $ff, $09, $09, $0a, $0a, $01, $ff, $fc, $ff, $01, $13
15389     14 20 18 1D 
1538d     13 1E 2D 3B 
15391     51 59 57 47 
15395     41 26 0A FC | 	byte	$14, $20, $18, $1d, $13, $1e, $2d, $3b, $51, $59, $57, $47, $41, $26, $0a, $fc
15399     F2 F0 ED FF 
1539d     01 0E 14 1E 
153a1     1A 14 01 E8 
153a5     CA A3 8C 83 | 	byte	$f2, $f0, $ed, $ff, $01, $0e, $14, $1e, $1a, $14, $01, $e8, $ca, $a3, $8c, $83
153a9     80 80 80 80 
153ad     80 80 80 80 
153b1     80          | 	byte	$80[9]
153b2     8C 92 A2 AC 
153b6     B3 B5 BC C6 
153ba     CF E3 E8 F2 
153be     F2 EA C9 B9 | 	byte	$8c, $92, $a2, $ac, $b3, $b5, $bc, $c6, $cf, $e3, $e8, $f2, $f2, $ea, $c9, $b9
153c2     AC B3 C5 D9 
153c6     F2 0A 1A 24 
153ca     2C 2C 1D 14 
153ce     07 FF F3 F2 | 	byte	$ac, $b3, $c5, $d9, $f2, $0a, $1a, $24, $2c, $2c, $1d, $14, $07, $ff, $f3, $f2
153d2     E8 E2 E0 E0 
153d6     D6 D4 C6 C5 
153da     BD B1 B9 BC 
153de     CF DF EA E3 | 	byte	$e8, $e2, $e0, $e0, $d6, $d4, $c6, $c5, $bd, $b1, $b9, $bc, $cf, $df, $ea, $e3
153e2     F0 FF 03 18 
153e6     27 30 37 3B 
153ea     2C 21 1A 18 
153ee     1D 1D 2D 34 | 	byte	$f0, $ff, $03, $18, $27, $30, $37, $3b, $2c, $21, $1a, $18, $1d, $1d, $2d, $34
153f2     3D 43 44 3D 
153f6     30 2D 2D 31 
153fa     3A 40 4B 51 
153fe     53 5A 5A 4F | 	byte	$3d, $43, $44, $3d, $30, $2d, $2d, $31, $3a, $40, $4b, $51, $53, $5a, $5a, $4f
15402     44 41 41 40 
15406     41 49 4B 44 
1540a     31 1D 0E 09 
1540e     13 13 13 07 | 	byte	$44, $41, $41, $40, $41, $49, $4b, $44, $31, $1d, $0e, $09, $13, $13, $13, $07
15412     FC F3 D9 C5 
15416     BD AD AF B1 
1541a     C3 D6 ED 01 
1541e     16 1D 1D 1D | 	byte	$fc, $f3, $d9, $c5, $bd, $ad, $af, $b1, $c3, $d6, $ed, $01, $16, $1d, $1d, $1d
15422     1D 14 0E 07 
15426     00 F9 F6 F0 
1542a     E3 D6 CC C6 
1542e     C6 C9 DA E0 | 	byte	$1d, $14, $0e, $07, $00, $f9, $f6, $f0, $e3, $d6, $cc, $c6, $c6, $c9, $da, $e0
15432     EC F9 FF FC 
15436     F3 F3 FC 00 
1543a     07 07 09 09 
1543e     FC ED EC E2 | 	byte	$ec, $f9, $ff, $fc, $f3, $f3, $fc, $00, $07, $07, $09, $09, $fc, $ed, $ec, $e2
15442     E8 F3 F9 03 
15446     0E 14 1D 1D 
1544a     18 18 18 0E 
1544e     10 07 04 07 | 	byte	$e8, $f3, $f9, $03, $0e, $14, $1d, $1d, $18, $18, $18, $0e, $10, $07, $04, $07
15452     07 09 0E 10 
15456     10 07 FC FC 
1545a     F7 FD 0D 18 
1545e     1D 0E 0D 10 | 	byte	$07, $09, $0e, $10, $10, $07, $fc, $fc, $f7, $fd, $0d, $18, $1d, $0e, $0d, $10
15462     2A 37 41 47 
15466     37 2C 0E F2 
1546a     E3 D3 CC D0 
1546e     CF D6 DF DF | 	byte	$2a, $37, $41, $47, $37, $2c, $0e, $f2, $e3, $d3, $cc, $d0, $cf, $d6, $df, $df
15472     F2 EA E3 E6 
15476     E3 E3 E3 DA 
1547a     DC CA CA CC 
1547e     CF D0 D4 D9 | 	byte	$f2, $ea, $e3, $e6, $e3, $e3, $e3, $da, $dc, $ca, $ca, $cc, $cf, $d0, $d4, $d9
15482     D9 DC E2 F0 
15486     04 16 27 2C 
1548a     2D 31 43 47 
1548e     4D 41 3D 2D | 	byte	$d9, $dc, $e2, $f0, $04, $16, $27, $2c, $2d, $31, $43, $47, $4d, $41, $3d, $2d
15492     0E FF E6 D9 
15496     D3 DA EC FF 
1549a     21 36 49 4F 
1549e     47 3D 2D 27 | 	byte	$0e, $ff, $e6, $d9, $d3, $da, $ec, $ff, $21, $36, $49, $4f, $47, $3d, $2d, $27
154a2     1A 0D F3 D6 
154a6     B7 A7 98 98 
154aa     98 92 86 89 
154ae     80 80 80 80 | 	byte	$1a, $0d, $f3, $d6, $b7, $a7, $98, $98, $98, $92, $86, $89, $80, $80, $80, $80
154b2     80 80 80 80 
154b6     8C 9C AC B9 
154ba     BF C5 C5 C5 
154be     C3 C6 CF DA | 	byte	$80, $80, $80, $80, $8c, $9c, $ac, $b9, $bf, $c5, $c5, $c5, $c3, $c6, $cf, $da
154c2     EA F7 00 0E 
154c6     0E 0E 00 F6 
154ca     EA E8 E8 EA 
154ce     F0 F3 F7 F6 | 	byte	$ea, $f7, $00, $0e, $0e, $0e, $00, $f6, $ea, $e8, $e8, $ea, $f0, $f3, $f7, $f6
154d2     F9 FC ED E2 
154d6     D3 CC C9 D0 
154da     DC F0 F3 F6 
154de     F7 FD 07 13 | 	byte	$f9, $fc, $ed, $e2, $d3, $cc, $c9, $d0, $dc, $f0, $f3, $f6, $f7, $fd, $07, $13
154e2     1D 1E 1D 14 
154e6     03 FC F2 F6 
154ea     F6 F9 01 0A 
154ee     16 2A 34 3A | 	byte	$1d, $1e, $1d, $14, $03, $fc, $f2, $f6, $f6, $f9, $01, $0a, $16, $2a, $34, $3a
154f2     3D 40 43 47 
154f6     4B 51 4D 4B 
154fa     43 37 36 2A 
154fe     21 1E 20 26 | 	byte	$3d, $40, $43, $47, $4b, $51, $4d, $4b, $43, $37, $36, $2a, $21, $1e, $20, $26
15502     36 4B 63 7F 
15506     7F 7F 7F 6A 
1550a     4F 37 20 16 
1550e     0A FF ED DF | 	byte	$36, $4b, $63, $7f, $7f, $7f, $7f, $6a, $4f, $37, $20, $16, $0a, $ff, $ed, $df
15512     D4 D0 D0 D3 
15516     DA E3 EC F6 
1551a     FC F7 ED E8 
1551e     E8 E8 E8 F0 | 	byte	$d4, $d0, $d0, $d3, $da, $e3, $ec, $f6, $fc, $f7, $ed, $e8, $e8, $e8, $e8, $f0
15522     EA EC EC E8 
15526     ED F3 F2 F6 
1552a     F3 EC E3 E3 
1552e     E3 E2 DF D6 | 	byte	$ea, $ec, $ec, $e8, $ed, $f3, $f2, $f6, $f3, $ec, $e3, $e3, $e3, $e2, $df, $d6
15532     CA C0 BD CA 
15536     E0 F7 0D 1A 
1553a     18 18 18 14 
1553e     07 0A 09 0D | 	byte	$ca, $c0, $bd, $ca, $e0, $f7, $0d, $1a, $18, $18, $18, $14, $07, $0a, $09, $0d
15542     16 26 34 34 
15546     31 2D 26 1E 
1554a     20 10 07 FC 
1554e     E8 DF D3 D0 | 	byte	$16, $26, $34, $34, $31, $2d, $26, $1e, $20, $10, $07, $fc, $e8, $df, $d3, $d0
15552     CC CF CC CF 
15556     D4 E0 F6 04 
1555a     13 20 2D 34 
1555e     3A 44 59 64 | 	byte	$cc, $cf, $cc, $cf, $d4, $e0, $f6, $04, $13, $20, $2d, $34, $3a, $44, $59, $64
15562     6C 6A 51 3D 
15566     34 18 04 F0 
1556a     DF D0 D6 E3 
1556e     F9 01 07 09 | 	byte	$6c, $6a, $51, $3d, $34, $18, $04, $f0, $df, $d0, $d6, $e3, $f9, $01, $07, $09
15572     00 F3 F0 EC 
15576     E8 EA E8 EA 
1557a     EA ED F0 F0 
1557e     F2 F2 F0 F0 | 	byte	$00, $f3, $f0, $ec, $e8, $ea, $e8, $ea, $ea, $ed, $f0, $f0, $f2, $f2, $f0, $f0
15582     F2 F3 F6 F3 
15586     F2 F2 E8 EC 
1558a     ED F7 FF 01 
1558e     F7 F2 F3 F7 | 	byte	$f2, $f3, $f6, $f3, $f2, $f2, $e8, $ec, $ed, $f7, $ff, $01, $f7, $f2, $f3, $f7
15592     FD 04 0A 1A 
15596     24 30 3B 37 
1559a     31 21 14 07 
1559e     03 03 04 14 | 	byte	$fd, $04, $0a, $1a, $24, $30, $3b, $37, $31, $21, $14, $07, $03, $03, $04, $14
155a2     1A 24 27 18 
155a6     03 E0 C0 9A 
155aa     84 80 80 80 
155ae     80 80 83 84 | 	byte	$1a, $24, $27, $18, $03, $e0, $c0, $9a, $84, $80, $80, $80, $80, $80, $83, $84
155b2     89 94 A0 B1 
155b6     BD BC AD A6 
155ba     9C 96 9A A0 
155be     A7 B7 C5 D4 | 	byte	$89, $94, $a0, $b1, $bd, $bc, $ad, $a6, $9c, $96, $9a, $a0, $a7, $b7, $c5, $d4
155c2     EC FC FF 04 
155c6     09 03 FC F2 
155ca     EA E3 DF D4 
155ce     CC C9 BC B5 | 	byte	$ec, $fc, $ff, $04, $09, $03, $fc, $f2, $ea, $e3, $df, $d4, $cc, $c9, $bc, $b5
155d2     B1 AD B1 BD 
155d6     D0 E6 F9 07 
155da     1A 20 14 16 
155de     16 21 2C 2C | 	byte	$b1, $ad, $b1, $bd, $d0, $e6, $f9, $07, $1a, $20, $14, $16, $16, $21, $2c, $2c
155e2     24 20 1D 1A 
155e6     1E 20 1D 1A 
155ea     1A 16 1A 14 
155ee     10 09 07 00 | 	byte	$24, $20, $1d, $1a, $1e, $20, $1d, $1a, $1a, $16, $1a, $14, $10, $09, $07, $00
155f2     FF 03 04 10 
155f6     1A 20 30 3B 
155fa     44 51 5E 63 
155fe     64 64 64 66 | 	byte	$ff, $03, $04, $10, $1a, $20, $30, $3b, $44, $51, $5e, $63, $64, $64, $64, $66
15602     60 5E 5A 49 
15606     41 2D 27 2D 
1560a     36 2D 1E 13 
1560e     04 07 07 FF | 	byte	$60, $5e, $5a, $49, $41, $2d, $27, $2d, $36, $2d, $1e, $13, $04, $07, $07, $ff
15612     00 F9 00 FF 
15616     00 04 04 0A 
1561a     0A 0A 04 04 
1561e     FF FC F3 ED | 	byte	$00, $f9, $00, $ff, $00, $04, $04, $0a, $0a, $0a, $04, $04, $ff, $fc, $f3, $ed
15622     E3 DC D6 D3 
15626     D3 C5 BF B1 
1562a     B3 B5 B3 B9 
1562e     CA CF D6 D9 | 	byte	$e3, $dc, $d6, $d3, $d3, $c5, $bf, $b1, $b3, $b5, $b3, $b9, $ca, $cf, $d6, $d9
15632     E6 F9 04 04 
15636     04 00 00 F7 
1563a     F2 F6 FC FD 
1563e     07 13 26 3D | 	byte	$e6, $f9, $04, $04, $04, $00, $00, $f7, $f2, $f6, $fc, $fd, $07, $13, $26, $3d
15642     4F 57 54 4B 
15646     2C 14 03 F6 
1564a     EC E8 E2 E2 
1564e     E2 E6 F2 F9 | 	byte	$4f, $57, $54, $4b, $2c, $14, $03, $f6, $ec, $e8, $e2, $e2, $e2, $e6, $f2, $f9
15652     00 FF FC F3 
15656     F6 F7 F9 FC 
1565a     00 FF 04 16 
1565e     27 2C 36 40 | 	byte	$00, $ff, $fc, $f3, $f6, $f7, $f9, $fc, $00, $ff, $04, $16, $27, $2c, $36, $40
15662     40 4B 4F 53 
15666     5E 5A 54 51 
1566a     4D 34 20 09 
1566e     F2 D6 C3 BC | 	byte	$40, $4b, $4f, $53, $5e, $5a, $54, $51, $4d, $34, $20, $09, $f2, $d6, $c3, $bc
15672     BD BF CA E0 
15676     ED 00 0E 13 
1567a     14 16 10 09 
1567e     03 00 FF FF | 	byte	$bd, $bf, $ca, $e0, $ed, $00, $0e, $13, $14, $16, $10, $09, $03, $00, $ff, $ff
15682     01 01 FF F0 
15686     EC EC F7 E6 
1568a     E2 DC D4 D0 
1568e     D0 DC E3 ED | 	byte	$01, $01, $ff, $f0, $ec, $ec, $f7, $e6, $e2, $dc, $d4, $d0, $d0, $dc, $e3, $ed
15692     F9 F9 FF 07 
15696     16 1E 2C 34 
1569a     34 30 36 30 
1569e     27 24 14 0D | 	byte	$f9, $f9, $ff, $07, $16, $1e, $2c, $34, $34, $30, $36, $30, $27, $24, $14, $0d
156a2     09 FD F3 F0 
156a6     E2 CA AC 98 
156aa     84 86 8C 9D 
156ae     A7 9A 9C 9D | 	byte	$09, $fd, $f3, $f0, $e2, $ca, $ac, $98, $84, $86, $8c, $9d, $a7, $9a, $9c, $9d
156b2     AD AC B1 B3 
156b6     B7 BC BC C0 
156ba     CC D9 D9 E6 
156be     E3 E0 E2 DC | 	byte	$ad, $ac, $b1, $b3, $b7, $bc, $bc, $c0, $cc, $d9, $d9, $e6, $e3, $e0, $e2, $dc
156c2     D9 CC BF AF 
156c6     A6 9D 9C 9A 
156ca     9C A6 AC B9 
156ce     C5 DF E3 F3 | 	byte	$d9, $cc, $bf, $af, $a6, $9d, $9c, $9a, $9c, $a6, $ac, $b9, $c5, $df, $e3, $f3
156d2     EA DF D9 D6 
156d6     DA DC DA DA 
156da     DC ED 01 07 
156de     16 2A 34 40 | 	byte	$ea, $df, $d9, $d6, $da, $dc, $da, $da, $dc, $ed, $01, $07, $16, $2a, $34, $40
156e2     4B 51 43 3D 
156e6     2C 27 1D 10 
156ea     14 14 16 1A 
156ee     1D 1D 1D 26 | 	byte	$4b, $51, $43, $3d, $2c, $27, $1d, $10, $14, $14, $16, $1a, $1d, $1d, $1d, $26
156f2     27 27 27 27 
156f6     24 24 24 2A 
156fa     31 36 36 36 
156fe     34 36 3B 43 | 	byte	$27, $27, $27, $27, $24, $24, $24, $2a, $31, $36, $36, $36, $34, $36, $3b, $43
15702     44 3D 3D 40 
15706     47 47 47 47 
1570a     41 3D 36 26 
1570e     16 13 03 F9 | 	byte	$44, $3d, $3d, $40, $47, $47, $47, $47, $41, $3d, $36, $26, $16, $13, $03, $f9
15712     F7 F7 FF 0D 
15716     20 27 2C 26 
1571a     16 14 0E 03 
1571e     00 FC F6 F2 | 	byte	$f7, $f7, $ff, $0d, $20, $27, $2c, $26, $16, $14, $0e, $03, $00, $fc, $f6, $f2
15722     F2 F2 F0 E8 
15726     E2 CF B7 AD 
1572a     A6 A3 9A 98 
1572e     92 98 B3 B9 | 	byte	$f2, $f2, $f0, $e8, $e2, $cf, $b7, $ad, $a6, $a3, $9a, $98, $92, $98, $b3, $b9
15732     CA DF F0 F9 
15736     01 0E 14 24 
1573a     2D 34 34 31 
1573e     24 24 16 13 | 	byte	$ca, $df, $f0, $f9, $01, $0e, $14, $24, $2d, $34, $34, $31, $24, $24, $16, $13
15742     FF EC E6 DF 
15746     E2 E3 E3 E8 
1574a     EA FC 0A 18 
1574e     20 24 16 13 | 	byte	$ff, $ec, $e6, $df, $e2, $e3, $e3, $e8, $ea, $fc, $0a, $18, $20, $24, $16, $13
15752     00 FF FD 04 
15756     07 0A 14 1A 
1575a     2A 37 3B 41 
1575e     44 43 41 3A | 	byte	$00, $ff, $fd, $04, $07, $0a, $14, $1a, $2a, $37, $3b, $41, $44, $43, $41, $3a
15762     34 36 2C 2D 
15766     21 1E 18 1A 
1576a     1E 26 26 21 
1576e     16 10 03 FC | 	byte	$34, $36, $2c, $2d, $21, $1e, $18, $1a, $1e, $26, $26, $21, $16, $10, $03, $fc
15772     F2 E8 E6 E6 
15776     E8 E8 F0 FF 
1577a     03 03 FF F9 
1577e     F9 FC F9 F9 | 	byte	$f2, $e8, $e6, $e6, $e8, $e8, $f0, $ff, $03, $03, $ff, $f9, $f9, $fc, $f9, $f9
15782     F0 E8 E6 E0 
15786     E0 E6 E8 EA 
1578a     F0 F9 03 13 
1578e     1E 1E 1E 16 | 	byte	$f0, $e8, $e6, $e0, $e0, $e6, $e8, $ea, $f0, $f9, $03, $13, $1e, $1e, $1e, $16
15792     10 0D 0D 0D 
15796     04 00 FD FF 
1579a     FC FF 01 07 
1579e     0A 0A 10 10 | 	byte	$10, $0d, $0d, $0d, $04, $00, $fd, $ff, $fc, $ff, $01, $07, $0a, $0a, $10, $10
157a2     1A 18 0E 04 
157a6     F0 D4 CA B9 
157aa     A6 90 80 80 
157ae     80 80 83 9D | 	byte	$1a, $18, $0e, $04, $f0, $d4, $ca, $b9, $a6, $90, $80, $80, $80, $80, $83, $9d
157b2     AF B7 C5 CA 
157b6     D6 E8 E8 EC 
157ba     F2 EA E6 E0 
157be     DC DA D3 CF | 	byte	$af, $b7, $c5, $ca, $d6, $e8, $e8, $ec, $f2, $ea, $e6, $e0, $dc, $da, $d3, $cf
157c2     BD B5 B5 AD 
157c6     B1 AC A7 A7 
157ca     A9 AD BC C5 
157ce     C6 C5 B5 B5 | 	byte	$bd, $b5, $b5, $ad, $b1, $ac, $a7, $a7, $a9, $ad, $bc, $c5, $c6, $c5, $b5, $b5
157d2     AF C0 C6 D9 
157d6     E0 EA FC FF 
157da     04 16 16 1A 
157de     1A 10 13 0A | 	byte	$af, $c0, $c6, $d9, $e0, $ea, $fc, $ff, $04, $16, $16, $1a, $1a, $10, $13, $0a
157e2     0E 0E 13 14 
157e6     13 13 10 10 
157ea     10 16 16 16 
157ee     1A 1E 21 27 | 	byte	$0e, $0e, $13, $14, $13, $13, $10, $10, $10, $16, $16, $16, $1a, $1e, $21, $27
157f2     30 31 3D 44 
157f6     51 60 64 64 
157fa     54 43 37 2D 
157fe     2A 21 18 0E | 	byte	$30, $31, $3d, $44, $51, $60, $64, $64, $54, $43, $37, $2d, $2a, $21, $18, $0e
15802     0D 09 0A 16 
15806     21 30 3B 44 
1580a     53 5D 6C 6E 
1580e     6C 5A 43 27 | 	byte	$0d, $09, $0a, $16, $21, $30, $3b, $44, $53, $5d, $6c, $6e, $6c, $5a, $43, $27
15812     0D F9 F0 EC 
15816     EA E8 ED F7 
1581a     03 0E 14 1A 
1581e     16 0D 13 14 | 	byte	$0d, $f9, $f0, $ec, $ea, $e8, $ed, $f7, $03, $0e, $14, $1a, $16, $0d, $13, $14
15822     09 FC E0 C9 
15826     AD A2 A3 A2 
1582a     A6 B1 B5 C0 
1582e     C0 D3 E2 E8 | 	byte	$09, $fc, $e0, $c9, $ad, $a2, $a3, $a2, $a6, $b1, $b5, $c0, $c0, $d3, $e2, $e8
15832     F2 F2 F6 F7 
15836     00 09 0A 0D 
1583a     0A 04 07 04 
1583e     04 00 FD FD | 	byte	$f2, $f2, $f6, $f7, $00, $09, $0a, $0d, $0a, $04, $07, $04, $04, $00, $fd, $fd
15842     F3 F2 F3 ED 
15846     F2 EC EC F0 
1584a     F6 FC 01 00 
1584e     FC F6 F2 F3 | 	byte	$f3, $f2, $f3, $ed, $f2, $ec, $ec, $f0, $f6, $fc, $01, $00, $fc, $f6, $f2, $f3
15852     FF 03 10 21 
15856     2D 2C 2C 31 
1585a     3B 49 4F 4D 
1585e     4B 4D 4F 51 | 	byte	$ff, $03, $10, $21, $2d, $2c, $2c, $31, $3b, $49, $4f, $4d, $4b, $4d, $4f, $51
15862     54 4D 3B 31 
15866     18 0E 0D 04 
1586a     07 07 09 14 
1586e     1D 21 26 2A | 	byte	$54, $4d, $3b, $31, $18, $0e, $0d, $04, $07, $07, $09, $14, $1d, $21, $26, $2a
15872     21 1E 18 16 
15876     14 13 01 EC 
1587a     D3 C3 BC AF 
1587e     B5 B5 B7 B7 | 	byte	$21, $1e, $18, $16, $14, $13, $01, $ec, $d3, $c3, $bc, $af, $b5, $b5, $b7, $b7
15882     B5 C6 DF F6 
15886     03 16 13 16 
1588a     27 27 27 21 
1588e     14 09 01 F7 | 	byte	$b5, $c6, $df, $f6, $03, $16, $13, $16, $27, $27, $27, $21, $14, $09, $01, $f7
15892     FC F3 FC 00 
15896     09 0E 16 1D 
1589a     1E 20 21 21 
1589e     21 21 20 14 | 	byte	$fc, $f3, $fc, $00, $09, $0e, $16, $1d, $1e, $20, $21, $21, $21, $21, $20, $14
158a2     03 EC CF C0 
158a6     BF BC C9 D0 
158aa     DC DF C6 B5 
158ae     A2 9C 98 92 | 	byte	$03, $ec, $cf, $c0, $bf, $bc, $c9, $d0, $dc, $df, $c6, $b5, $a2, $9c, $98, $92
158b2     96 98 A6 AC 
158b6     B7 C5 CA CC 
158ba     D0 D6 CC C6 
158be     C0 BD BD B5 | 	byte	$96, $98, $a6, $ac, $b7, $c5, $ca, $cc, $d0, $d6, $cc, $c6, $c0, $bd, $bd, $b5
158c2     B3 B5 B7 BC 
158c6     C0 CA D0 E0 
158ca     E3 E3 E3 CF 
158ce     B9 AC 9C 9D | 	byte	$b3, $b5, $b7, $bc, $c0, $ca, $d0, $e0, $e3, $e3, $e3, $cf, $b9, $ac, $9c, $9d
158d2     AC BD D0 E2 
158d6     DF E3 ED 04 
158da     14 21 27 2A 
158de     27 30 31 30 | 	byte	$ac, $bd, $d0, $e2, $df, $e3, $ed, $04, $14, $21, $27, $2a, $27, $30, $31, $30
158e2     2A 14 FF F2 
158e6     E2 D9 D0 D4 
158ea     D6 DA E8 FF 
158ee     14 30 47 5E | 	byte	$2a, $14, $ff, $f2, $e2, $d9, $d0, $d4, $d6, $da, $e8, $ff, $14, $30, $47, $5e
158f2     66 76 77 7C 
158f6     6E 4D 34 18 
158fa     07 FF FF 04 
158fe     16 1D 1E 1E | 	byte	$66, $76, $77, $7c, $6e, $4d, $34, $18, $07, $ff, $ff, $04, $16, $1d, $1e, $1e
15902     26 31 40 44 
15906     47 4D 4F 54 
1590a     5D 63 64 60 
1590e     59 57 51 40 | 	byte	$26, $31, $40, $44, $47, $4d, $4f, $54, $5d, $63, $64, $60, $59, $57, $51, $40
15912     34 1D 0A FD 
15916     F3 F3 F3 F6 
1591a     F6 F7 F9 FD 
1591e     FF F6 ED DA | 	byte	$34, $1d, $0a, $fd, $f3, $f3, $f3, $f6, $f6, $f7, $f9, $fd, $ff, $f6, $ed, $da
15922     C5 B5 B1 B3 
15926     BD CA D6 E3 
1592a     E6 D3 CC CC 
1592e     D0 DA D9 E0 | 	byte	$c5, $b5, $b1, $b3, $bd, $ca, $d6, $e3, $e6, $d3, $cc, $cc, $d0, $da, $d9, $e0
15932     E0 E8 F6 04 
15936     09 14 13 09 
1593a     FD F0 DF DF 
1593e     DA DC E2 ED | 	byte	$e0, $e8, $f6, $04, $09, $14, $13, $09, $fd, $f0, $df, $df, $da, $dc, $e2, $ed
15942     FC 07 13 2A 
15946     31 3B 3B 3A 
1594a     26 13 F2 DA 
1594e     BF B7 BD CF | 	byte	$fc, $07, $13, $2a, $31, $3b, $3b, $3a, $26, $13, $f2, $da, $bf, $b7, $bd, $cf
15952     E6 FC 01 FC 
15956     FF 0A 1A 3A 
1595a     47 4F 5A 5E 
1595e     63 6E 6A 60 | 	byte	$e6, $fc, $01, $fc, $ff, $0a, $1a, $3a, $47, $4f, $5a, $5e, $63, $6e, $6a, $60
15962     53 3D 2D 16 
15966     0A 01 FC FC 
1596a     03 09 20 31 
1596e     43 4D 57 5D | 	byte	$53, $3d, $2d, $16, $0a, $01, $fc, $fc, $03, $09, $20, $31, $43, $4d, $57, $5d
15972     51 43 31 18 
15976     F7 D9 C6 BF 
1597a     C3 D0 DA E8 
1597e     F2 E3 D9 D9 | 	byte	$51, $43, $31, $18, $f7, $d9, $c6, $bf, $c3, $d0, $da, $e8, $f2, $e3, $d9, $d9
15982     DA DA E0 E8 
15986     E6 EA F0 F0 
1598a     EC F0 ED F2 
1598e     F6 F7 FD 03 | 	byte	$da, $da, $e0, $e8, $e6, $ea, $f0, $f0, $ec, $f0, $ed, $f2, $f6, $f7, $fd, $03
15992     04 10 1A 18 
15996     1A 20 21 26 
1599a     24 24 1E 1A 
1599e     10 04 F9 E8 | 	byte	$04, $10, $1a, $18, $1a, $20, $21, $26, $24, $24, $1e, $1a, $10, $04, $f9, $e8
159a2     D9 D4 CF D3 
159a6     DF EC F6 F0 
159aa     F0 E6 F0 EC 
159ae     E8 E0 CF C0 | 	byte	$d9, $d4, $cf, $d3, $df, $ec, $f6, $f0, $f0, $e6, $f0, $ec, $e8, $e0, $cf, $c0
159b2     BC B7 B7 B5 
159b6     AD A6 9A 94 
159ba     89 80 83 84 
159be     86 86 8F 9D | 	byte	$bc, $b7, $b7, $b5, $ad, $a6, $9a, $94, $89, $80, $83, $84, $86, $86, $8f, $9d
159c2     AD CA E0 F0 
159c6     00 01 01 FC 
159ca     E6 C9 AF A0 
159ce     9A 9D A7 B9 | 	byte	$ad, $ca, $e0, $f0, $00, $01, $01, $fc, $e6, $c9, $af, $a0, $9a, $9d, $a7, $b9
159d2     C5 CA C9 CC 
159d6     DC F0 FD 04 
159da     0A 0A 0E 13 
159de     1A 1D 21 26 | 	byte	$c5, $ca, $c9, $cc, $dc, $f0, $fd, $04, $0a, $0a, $0e, $13, $1a, $1d, $21, $26
159e2     26 2A 2A 2C 
159e6     1E 18 10 04 
159ea     04 07 09 13 
159ee     1D 21 2C 31 | 	byte	$26, $2a, $2a, $2c, $1e, $18, $10, $04, $04, $07, $09, $13, $1d, $21, $2c, $31
159f2     2D 30 16 03 
159f6     F7 F2 ED F3 
159fa     07 1D 37 4D 
159fe     4F 4F 4F 4D | 	byte	$2d, $30, $16, $03, $f7, $f2, $ed, $f3, $07, $1d, $37, $4d, $4f, $4f, $4f, $4d
15a02     57 59 5A 59 
15a06     4D 40 34 27 
15a0a     26 21 2A 2D 
15a0e     30 31 36 36 | 	byte	$57, $59, $5a, $59, $4d, $40, $34, $27, $26, $21, $2a, $2d, $30, $31, $36, $36
15a12     30 21 1A 0E 
15a16     14 16 2A 34 
15a1a     37 3A 31 21 
15a1e     10 F3 E2 CA | 	byte	$30, $21, $1a, $0e, $14, $16, $2a, $34, $37, $3a, $31, $21, $10, $f3, $e2, $ca
15a22     BC B9 B7 BC 
15a26     CA D0 C9 C0 
15a2a     B3 AF B9 BF 
15a2e     C9 D0 DA E0 | 	byte	$bc, $b9, $b7, $bc, $ca, $d0, $c9, $c0, $b3, $af, $b9, $bf, $c9, $d0, $da, $e0
15a32     ED F7 FC F9 
15a36     F9 FC F3 F6 
15a3a     F3 F0 E0 D9 
15a3e     D9 D9 E6 F3 | 	byte	$ed, $f7, $fc, $f9, $f9, $fc, $f3, $f6, $f3, $f0, $e0, $d9, $d9, $d9, $e6, $f3
15a42     04 16 24 2A 
15a46     27 26 18 04 
15a4a     00 F6 F3 F9 
15a4e     00 0E 20 2A | 	byte	$04, $16, $24, $2a, $27, $26, $18, $04, $00, $f6, $f3, $f9, $00, $0e, $20, $2a
15a52     26 1E 18 14 
15a56     18 1D 21 20 
15a5a     26 24 24 26 
15a5e     1E 1A 1A 16 | 	byte	$26, $1e, $18, $14, $18, $1d, $21, $20, $26, $24, $24, $26, $1e, $1a, $1a, $16
15a62     18 18 1D 21 
15a66     2C 2C 3A 43 
15a6a     43 44 51 53 
15a6e     5E 5A 51 41 | 	byte	$18, $18, $1d, $21, $2c, $2c, $3a, $43, $43, $44, $51, $53, $5e, $5a, $51, $41
15a72     27 0D F6 D9 
15a76     C5 B9 B7 BF 
15a7a     CF E2 EC EC 
15a7e     F0 F3 FF 0D | 	byte	$27, $0d, $f6, $d9, $c5, $b9, $b7, $bf, $cf, $e2, $ec, $ec, $f0, $f3, $ff, $0d
15a82     24 2C 36 34 
15a86     20 10 00 EC 
15a8a     EA DC D4 D6 
15a8e     D6 D9 DF E3 | 	byte	$24, $2c, $36, $34, $20, $10, $00, $ec, $ea, $dc, $d4, $d6, $d6, $d9, $df, $e3
15a92     E6 EC EA F2 
15a96     F6 F6 F9 F9 
15a9a     FF 00 0A 0E 
15a9e     14 13 0A 0A | 	byte	$e6, $ec, $ea, $f2, $f6, $f6, $f9, $f9, $ff, $00, $0a, $0e, $14, $13, $0a, $0a
15aa2     0D 18 18 1E 
15aa6     16 00 EC DC 
15aaa     D4 D0 D4 DA 
15aae     CC B7 A7 98 | 	byte	$0d, $18, $18, $1e, $16, $00, $ec, $dc, $d4, $d0, $d4, $da, $cc, $b7, $a7, $98
15ab2     8A 89 94 9A 
15ab6     AC B1 C0 C9 
15aba     CF D6 CC CF 
15abe     CF CF CF D3 | 	byte	$8a, $89, $94, $9a, $ac, $b1, $c0, $c9, $cf, $d6, $cc, $cf, $cf, $cf, $cf, $d3
15ac2     D4 D6 D6 C9 
15ac6     C6 B7 AC 9C 
15aca     9A 8C 8C 8F 
15ace     94 A6 BC BF | 	byte	$d4, $d6, $d6, $c9, $c6, $b7, $ac, $9c, $9a, $8c, $8c, $8f, $94, $a6, $bc, $bf
15ad2     CA E2 E6 ED 
15ad6     F7 00 0A 14 
15ada     16 0D 0A F9 
15ade     F2 F0 EC ED | 	byte	$ca, $e2, $e6, $ed, $f7, $00, $0a, $14, $16, $0d, $0a, $f9, $f2, $f0, $ec, $ed
15ae2     F6 FF 09 16 
15ae6     1D 24 27 3A 
15aea     3D 40 49 49 
15aee     41 3A 30 1E | 	byte	$f6, $ff, $09, $16, $1d, $24, $27, $3a, $3d, $40, $49, $49, $41, $3a, $30, $1e
15af2     14 0D 10 13 
15af6     14 1A 26 30 
15afa     3A 3A 36 2D 
15afe     27 24 2A 2C | 	byte	$14, $0d, $10, $13, $14, $1a, $26, $30, $3a, $3a, $36, $2d, $27, $24, $2a, $2c
15b02     36 36 36 2D 
15b06     30 27 2D 30 
15b0a     26 24 24 27 
15b0e     3B 43 49 47 | 	byte	$36, $36, $36, $2d, $30, $27, $2d, $30, $26, $24, $24, $27, $3b, $43, $49, $47
15b12     3D 30 18 01 
15b16     F0 E2 D9 D9 
15b1a     DF E2 E8 F3 
15b1e     00 09 16 1D | 	byte	$3d, $30, $18, $01, $f0, $e2, $d9, $d9, $df, $e2, $e8, $f3, $00, $09, $16, $1d
15b22     26 2C 2A 16 
15b26     00 F3 E2 D6 
15b2a     D9 D9 DC E0 
15b2e     D9 D9 CF C0 | 	byte	$26, $2c, $2a, $16, $00, $f3, $e2, $d6, $d9, $d9, $dc, $e0, $d9, $d9, $cf, $c0
15b32     BD B5 B1 B3 
15b36     B3 B5 C5 D6 
15b3a     E0 F9 04 18 
15b3e     20 20 16 18 | 	byte	$bd, $b5, $b1, $b3, $b3, $b5, $c5, $d6, $e0, $f9, $04, $18, $20, $20, $16, $18
15b42     10 13 09 09 
15b46     01 FF FF F3 
15b4a     EC E8 E8 E8 
15b4e     F0 F7 F6 00 | 	byte	$10, $13, $09, $09, $01, $ff, $ff, $f3, $ec, $e8, $e8, $e8, $f0, $f7, $f6, $00
15b52     09 16 2A 3D 
15b56     4B 5D 5A 5D 
15b5a     51 40 31 21 
15b5e     21 21 26 30 | 	byte	$09, $16, $2a, $3d, $4b, $5d, $5a, $5d, $51, $40, $31, $21, $21, $21, $26, $30
15b62     3A 47 4D 54 
15b66     54 54 47 3A 
15b6a     27 14 00 F3 
15b6e     F2 F2 F2 00 | 	byte	$3a, $47, $4d, $54, $54, $54, $47, $3a, $27, $14, $00, $f3, $f2, $f2, $f2, $00
15b72     16 21 20 16 
15b76     09 03 03 FD 
15b7a     F6 F0 F0 ED 
15b7e     E8 ED F2 FC | 	byte	$16, $21, $20, $16, $09, $03, $03, $fd, $f6, $f0, $f0, $ed, $e8, $ed, $f2, $fc
15b82     FC F3 F2 EA 
15b86     E8 E2 E8 EA 
15b8a     ED F2 FD 03 
15b8e     0A 13 13 14 | 	byte	$fc, $f3, $f2, $ea, $e8, $e2, $e8, $ea, $ed, $f2, $fd, $03, $0a, $13, $13, $14
15b92     13 10 0A 00 
15b96     FF F7 F3 F9 
15b9a     F7 FF 04 04 
15b9e     07 07 03 03 | 	byte	$13, $10, $0a, $00, $ff, $f7, $f3, $f9, $f7, $ff, $04, $04, $07, $07, $03, $03
15ba2     FF F9 ED EA 
15ba6     E2 E6 E6 E3 
15baa     E6 E8 E3 DF 
15bae     C6 B1 96 84 | 	byte	$ff, $f9, $ed, $ea, $e2, $e6, $e6, $e3, $e6, $e8, $e3, $df, $c6, $b1, $96, $84
15bb2     80 80 80 80 
15bb6     84 8C A3 B1 
15bba     BF D6 E0 EC 
15bbe     F2 F3 F2 EC | 	byte	$80, $80, $80, $80, $84, $8c, $a3, $b1, $bf, $d6, $e0, $ec, $f2, $f3, $f2, $ec
15bc2     D9 D3 C0 BD 
15bc6     BD BF C3 C5 
15bca     C6 CA CF D4 
15bce     D3 D4 D3 D4 | 	byte	$d9, $d3, $c0, $bd, $bd, $bf, $c3, $c5, $c6, $ca, $cf, $d4, $d3, $d4, $d3, $d4
15bd2     D3 D0 D3 D4 
15bd6     D6 D9 D6 D9 
15bda     D9 D9 E2 ED 
15bde     ED F3 FF 07 | 	byte	$d3, $d0, $d3, $d4, $d6, $d9, $d6, $d9, $d9, $d9, $e2, $ed, $ed, $f3, $ff, $07
15be2     16 26 31 37 
15be6     40 36 30 1E 
15bea     09 FC EC E6 
15bee     E3 EC FD 10 | 	byte	$16, $26, $31, $37, $40, $36, $30, $1e, $09, $fc, $ec, $e6, $e3, $ec, $fd, $10
15bf2     27 3A 4B 57 
15bf6     64 64 5A 4F 
15bfa     47 3D 3A 3D 
15bfe     41 54 5E 5E | 	byte	$27, $3a, $4b, $57, $64, $64, $5a, $4f, $47, $3d, $3a, $3d, $41, $54, $5e, $5e
15c02     60 59 51 43 
15c06     37 26 18 0E 
15c0a     03 00 04 04 
15c0e     10 18 2A 27 | 	byte	$60, $59, $51, $43, $37, $26, $18, $0e, $03, $00, $04, $04, $10, $18, $2a, $27
15c12     26 09 F0 DC 
15c16     CC C5 CA D6 
15c1a     E6 FD 04 13 
15c1e     1A 18 18 0D | 	byte	$26, $09, $f0, $dc, $cc, $c5, $ca, $d6, $e6, $fd, $04, $13, $1a, $18, $18, $0d
15c22     F6 E8 E6 DC 
15c26     DC DC DC ED 
15c2a     F7 FC FC F6 
15c2e     E6 DA CF CA | 	byte	$f6, $e8, $e6, $dc, $dc, $dc, $dc, $ed, $f7, $fc, $fc, $f6, $e6, $da, $cf, $ca
15c32     CC D0 E0 EC 
15c36     00 10 21 2D 
15c3a     2C 2D 24 16 
15c3e     04 F9 DF C6 | 	byte	$cc, $d0, $e0, $ec, $00, $10, $21, $2d, $2c, $2d, $24, $16, $04, $f9, $df, $c6
15c42     C0 BD C0 D4 
15c46     E2 F2 F6 F3 
15c4a     F7 F9 F2 ED 
15c4e     F6 FF 07 10 | 	byte	$c0, $bd, $c0, $d4, $e2, $f2, $f6, $f3, $f7, $f9, $f2, $ed, $f6, $ff, $07, $10
15c52     18 26 31 37 
15c56     37 2D 27 21 
15c5a     21 24 2A 31 
15c5e     41 4B 5A 5E | 	byte	$18, $26, $31, $37, $37, $2d, $27, $21, $21, $24, $2a, $31, $41, $4b, $5a, $5e
15c62     60 60 53 4B 
15c66     44 37 2D 2A 
15c6a     21 1E 1A 1E 
15c6e     27 34 43 44 | 	byte	$60, $60, $53, $4b, $44, $37, $2d, $2a, $21, $1e, $1a, $1e, $27, $34, $43, $44
15c72     49 47 41 36 
15c76     14 FD E6 D3 
15c7a     CC C5 CA D0 
15c7e     E0 E6 E8 EA | 	byte	$49, $47, $41, $36, $14, $fd, $e6, $d3, $cc, $c5, $ca, $d0, $e0, $e6, $e8, $ea
15c82     E6 E3 E6 E6 
15c86     E8 EA EC ED 
15c8a     F3 F6 F6 F6 
15c8e     F7 FC FD FF | 	byte	$e6, $e3, $e6, $e6, $e8, $ea, $ec, $ed, $f3, $f6, $f6, $f6, $f7, $fc, $fd, $ff
15c92     00 00 00 FD 
15c96     F7 F0 F6 FD 
15c9a     09 16 24 34 
15c9e     37 3B 2D 20 | 	byte	$00, $00, $00, $fd, $f7, $f0, $f6, $fd, $09, $16, $24, $34, $37, $3b, $2d, $20
15ca2     18 13 04 FD 
15ca6     EC E3 E2 E0 
15caa     DF D0 B5 9A 
15cae     80 80 80 80 | 	byte	$18, $13, $04, $fd, $ec, $e3, $e2, $e0, $df, $d0, $b5, $9a, $80, $80, $80, $80
15cb2     80 80 80 94 
15cb6     A2 AD B7 C5 
15cba     C9 CF D6 DA 
15cbe     D6 CC BC AC | 	byte	$80, $80, $80, $94, $a2, $ad, $b7, $c5, $c9, $cf, $d6, $da, $d6, $cc, $bc, $ac
15cc2     A9 AC B9 C9 
15cc6     CF DF E2 E2 
15cca     D9 CF CC CC 
15cce     CF D0 D3 DA | 	byte	$a9, $ac, $b9, $c9, $cf, $df, $e2, $e2, $d9, $cf, $cc, $cc, $cf, $d0, $d3, $da
15cd2     EC FF 0E 10 
15cd6     13 13 0E 10 
15cda     0A 04 04 04 
15cde     04 03 03 FD | 	byte	$ec, $ff, $0e, $10, $13, $13, $0e, $10, $0a, $04, $04, $04, $04, $03, $03, $fd
15ce2     F2 F0 E2 E0 
15ce6     DC DA D9 DA 
15cea     DC D6 E0 F2 
15cee     04 16 30 41 | 	byte	$f2, $f0, $e2, $e0, $dc, $da, $d9, $da, $dc, $d6, $e0, $f2, $04, $16, $30, $41
15cf2     51 5A 59 4B 
15cf6     40 40 37 3A 
15cfa     3A 3B 44 4F 
15cfe     51 4F 4B 40 | 	byte	$51, $5a, $59, $4b, $40, $40, $37, $3a, $3a, $3b, $44, $4f, $51, $4f, $4b, $40
15d02     34 31 2C 2D 
15d06     30 37 40 49 
15d0a     51 57 57 57 
15d0e     53 49 34 1E | 	byte	$34, $31, $2c, $2d, $30, $37, $40, $49, $51, $57, $57, $57, $53, $49, $34, $1e
15d12     0E F6 D9 C3 
15d16     BD BC C5 D3 
15d1a     DF E8 E8 E8 
15d1e     DF D6 CF C6 | 	byte	$0e, $f6, $d9, $c3, $bd, $bc, $c5, $d3, $df, $e8, $e8, $e8, $df, $d6, $cf, $c6
15d22     CA C9 CA D4 
15d26     DA EC FF 04 
15d2a     01 F7 ED E2 
15d2e     DF DF E6 ED | 	byte	$ca, $c9, $ca, $d4, $da, $ec, $ff, $04, $01, $f7, $ed, $e2, $df, $df, $e6, $ed
15d32     F6 00 04 0D 
15d36     0A 09 01 01 
15d3a     03 0A 0A 0D 
15d3e     0A FF 00 00 | 	byte	$f6, $00, $04, $0d, $0a, $09, $01, $01, $03, $0a, $0a, $0d, $0a, $ff, $00, $00
15d42     07 10 16 16 
15d46     13 0A F7 F2 
15d4a     ED E6 EA E6 
15d4e     E6 E8 EA F2 | 	byte	$07, $10, $16, $16, $13, $0a, $f7, $f2, $ed, $e6, $ea, $e6, $e6, $e8, $ea, $f2
15d52     00 04 0D 0A 
15d56     0D 0E 1A 26 
15d5a     36 47 54 5E 
15d5e     5D 5D 4F 3D | 	byte	$00, $04, $0d, $0a, $0d, $0e, $1a, $26, $36, $47, $54, $5e, $5d, $5d, $4f, $3d
15d62     30 26 21 24 
15d66     26 2C 2C 21 
15d6a     21 24 2A 34 
15d6e     41 51 5D 68 | 	byte	$30, $26, $21, $24, $26, $2c, $2c, $21, $21, $24, $2a, $34, $41, $51, $5d, $68
15d72     63 63 60 60 
15d76     60 54 41 27 
15d7a     0E FD F2 E3 
15d7e     DA D4 C5 C0 | 	byte	$63, $63, $60, $60, $60, $54, $41, $27, $0e, $fd, $f2, $e3, $da, $d4, $c5, $c0
15d82     B5 B9 BC B7 
15d86     B3 BD BF C9 
15d8a     C9 CC CA D4 
15d8e     DC F2 01 0E | 	byte	$b5, $b9, $bc, $b7, $b3, $bd, $bf, $c9, $c9, $cc, $ca, $d4, $dc, $f2, $01, $0e
15d92     18 16 0D 0E 
15d96     0E 13 1E 26 
15d9a     27 27 0E 00 
15d9e     F3 EC E8 E3 | 	byte	$18, $16, $0d, $0e, $0e, $13, $1e, $26, $27, $27, $0e, $00, $f3, $ec, $e8, $e3
15da2     E6 E3 E6 F7 
15da6     07 13 1A 18 
15daa     13 00 EA D9 
15dae     C3 AC A2 9D | 	byte	$e6, $e3, $e6, $f7, $07, $13, $1a, $18, $13, $00, $ea, $d9, $c3, $ac, $a2, $9d
15db2     9D A0 A2 9A 
15db6     94 8C 86 8C 
15dba     80 80 80 80 
15dbe     80 80 80 90 | 	byte	$9d, $a0, $a2, $9a, $94, $8c, $86, $8c, $80, $80, $80, $80, $80, $80, $80, $90
15dc2     A7 C3 D4 E0 
15dc6     E0 DF E0 E3 
15dca     E3 E8 E8 E8 
15dce     E8 EC F9 FC | 	byte	$a7, $c3, $d4, $e0, $e0, $df, $e0, $e3, $e3, $e8, $e8, $e8, $e8, $ec, $f9, $fc
15dd2     FC F7 F0 EA 
15dd6     ED F6 00 0D 
15dda     14 1D 1E 1E 
15dde     1D 0E 04 00 | 	byte	$fc, $f7, $f0, $ea, $ed, $f6, $00, $0d, $14, $1d, $1e, $1e, $1d, $0e, $04, $00
15de2     FC FC FF 00 
15de6     FC FF FC FC 
15dea     FD FC 03 0A 
15dee     13 09 F9 F3 | 	byte	$fc, $fc, $ff, $00, $fc, $ff, $fc, $fc, $fd, $fc, $03, $0a, $13, $09, $f9, $f3
15df2     F6 F7 01 0D 
15df6     14 1E 24 2D 
15dfa     43 54 59 5A 
15dfe     53 47 3B 3B | 	byte	$f6, $f7, $01, $0d, $14, $1e, $24, $2d, $43, $54, $59, $5a, $53, $47, $3b, $3b
15e02     40 40 41 37 
15e06     3A 2D 27 20 
15e0a     1D 1E 21 30 
15e0e     40 51 51 44 | 	byte	$40, $40, $41, $37, $3a, $2d, $27, $20, $1d, $1e, $21, $30, $40, $51, $51, $44
15e12     34 2C 1A 13 
15e16     1D 1E 1D 10 
15e1a     F6 DA CA BD 
15e1e     BF BF B9 B7 | 	byte	$34, $2c, $1a, $13, $1d, $1e, $1d, $10, $f6, $da, $ca, $bd, $bf, $bf, $b9, $b7
15e22     B3 AD B3 B5 
15e26     BF C6 C3 BC 
15e2a     BC BD D3 E8 
15e2e     00 0E 21 26 | 	byte	$b3, $ad, $b3, $b5, $bf, $c6, $c3, $bc, $bc, $bd, $d3, $e8, $00, $0e, $21, $26
15e32     26 21 18 10 
15e36     04 FC FD F9 
15e3a     F0 E6 DF D6 
15e3e     D3 DA F2 01 | 	byte	$26, $21, $18, $10, $04, $fc, $fd, $f9, $f0, $e6, $df, $d6, $d3, $da, $f2, $01
15e42     13 14 0E 0A 
15e46     0A 0D 14 1E 
15e4a     26 30 2A 21 
15e4e     2D 27 2A 2A | 	byte	$13, $14, $0e, $0a, $0a, $0d, $14, $1e, $26, $30, $2a, $21, $2d, $27, $2a, $2a
15e52     21 1A 16 13 
15e56     16 18 10 04 
15e5a     FF F3 EC E6 
15e5e     E6 E0 E3 F7 | 	byte	$21, $1a, $16, $13, $16, $18, $10, $04, $ff, $f3, $ec, $e6, $e6, $e0, $e3, $f7
15e62     13 2D 43 54 
15e66     66 68 63 5E 
15e6a     63 66 71 64 
15e6e     57 41 34 2C | 	byte	$13, $2d, $43, $54, $66, $68, $63, $5e, $63, $66, $71, $64, $57, $41, $34, $2c
15e72     2D 30 3B 41 
15e76     40 41 44 41 
15e7a     3D 31 21 09 
15e7e     FF F2 F2 F2 | 	byte	$2d, $30, $3b, $41, $40, $41, $44, $41, $3d, $31, $21, $09, $ff, $f2, $f2, $f2
15e82     F3 F0 EA DF 
15e86     D3 CA C9 C3 
15e8a     C5 C5 CA C6 
15e8e     C5 C3 C5 C9 | 	byte	$f3, $f0, $ea, $df, $d3, $ca, $c9, $c3, $c5, $c5, $ca, $c6, $c5, $c3, $c5, $c9
15e92     CC D9 E6 F7 
15e96     07 09 0A 07 
15e9a     04 04 04 07 
15e9e     09 07 07 04 | 	byte	$cc, $d9, $e6, $f7, $07, $09, $0a, $07, $04, $04, $04, $07, $09, $07, $07, $04
15ea2     04 04 09 07 
15ea6     F9 E8 DF E0 
15eaa     EA F9 FC FC 
15eae     F3 DC CC C0 | 	byte	$04, $04, $09, $07, $f9, $e8, $df, $e0, $ea, $f9, $fc, $fc, $f3, $dc, $cc, $c0
15eb2     BD BC B3 A7 
15eb6     A6 A0 9C 94 
15eba     94 8C 8F 92 
15ebe     9C A7 B5 A7 | 	byte	$bd, $bc, $b3, $a7, $a6, $a0, $9c, $94, $94, $8c, $8f, $92, $9c, $a7, $b5, $a7
15ec2     8C 80 80 80 
15ec6     80 89 96 A9 
15eca     BD C5 DC F3 
15ece     0D 26 2D 2D | 	byte	$8c, $80, $80, $80, $80, $89, $96, $a9, $bd, $c5, $dc, $f3, $0d, $26, $2d, $2d
15ed2     2D 27 20 21 
15ed6     1A 0E 07 F0 
15eda     D9 C6 B9 B9 
15ede     BD CC E6 F9 | 	byte	$2d, $27, $20, $21, $1a, $0e, $07, $f0, $d9, $c6, $b9, $b9, $bd, $cc, $e6, $f9
15ee2     09 1A 27 2D 
15ee6     2D 30 34 3D 
15eea     43 37 2C 1D 
15eee     13 0A 0A 10 | 	byte	$09, $1a, $27, $2d, $2d, $30, $34, $3d, $43, $37, $2c, $1d, $13, $0a, $0a, $10
15ef2     18 16 0E 09 
15ef6     FD ED EC F2 
15efa     F2 F3 F3 F6 
15efe     00 0E 1D 2D | 	byte	$18, $16, $0e, $09, $fd, $ed, $ec, $f2, $f2, $f3, $f3, $f6, $00, $0e, $1d, $2d
15f02     3B 49 49 4B 
15f06     4D 54 54 54 
15f0a     59 54 4F 54 
15f0e     51 44 37 2C | 	byte	$3b, $49, $49, $4b, $4d, $54, $54, $54, $59, $54, $4f, $54, $51, $44, $37, $2c
15f12     1E 14 13 00 
15f16     F3 EC E2 DC 
15f1a     DF DF E8 ED 
15f1e     F3 F2 ED ED | 	byte	$1e, $14, $13, $00, $f3, $ec, $e2, $dc, $df, $df, $e8, $ed, $f3, $f2, $ed, $ed
15f22     F0 F9 F7 F2 
15f26     EA E6 E3 E3 
15f2a     E8 E2 D3 CA 
15f2e     C0 B7 B3 B7 | 	byte	$f0, $f9, $f7, $f2, $ea, $e6, $e3, $e3, $e8, $e2, $d3, $ca, $c0, $b7, $b3, $b7
15f32     B3 B7 C3 C5 
15f36     D6 E3 FD 09 
15f3a     16 1E 24 2D 
15f3e     30 26 13 03 | 	byte	$b3, $b7, $c3, $c5, $d6, $e3, $fd, $09, $16, $1e, $24, $2d, $30, $26, $13, $03
15f42     F7 E3 DA DC 
15f46     DF EA FC 0A 
15f4a     0E 20 37 47 
15f4e     54 5D 59 53 | 	byte	$f7, $e3, $da, $dc, $df, $ea, $fc, $0a, $0e, $20, $37, $47, $54, $5d, $59, $53
15f52     4D 49 40 34 
15f56     2C 1A 0A FC 
15f5a     F2 F2 F6 F9 
15f5e     03 07 FF 01 | 	byte	$4d, $49, $40, $34, $2c, $1a, $0a, $fc, $f2, $f2, $f6, $f9, $03, $07, $ff, $01
15f62     03 09 0A 0D 
15f66     13 21 2C 2D 
15f6a     31 3B 43 4D 
15f6e     5A 6A 74 74 | 	byte	$03, $09, $0a, $0d, $13, $21, $2c, $2d, $31, $3b, $43, $4d, $5a, $6a, $74, $74
15f72     76 70 5E 4F 
15f76     47 41 41 36 
15f7a     26 13 0A 03 
15f7e     FF FF FD F7 | 	byte	$76, $70, $5e, $4f, $47, $41, $41, $36, $26, $13, $0a, $03, $ff, $ff, $fd, $f7
15f82     ED E3 E2 E8 
15f86     EA F6 FC F6 
15f8a     F3 F6 FC FC 
15f8e     FC FD FC FD | 	byte	$ed, $e3, $e2, $e8, $ea, $f6, $fc, $f6, $f3, $f6, $fc, $fc, $fc, $fd, $fc, $fd
15f92     F9 EC D9 B9 
15f96     A2 96 86 92 
15f9a     9C A9 BD D0 
15f9e     DA E8 FC 10 | 	byte	$f9, $ec, $d9, $b9, $a2, $96, $86, $92, $9c, $a9, $bd, $d0, $da, $e8, $fc, $10
15fa2     2C 3D 43 43 
15fa6     41 40 40 3A 
15faa     2C 20 07 F2 
15fae     CC AC 8F 80 | 	byte	$2c, $3d, $43, $43, $41, $40, $40, $3a, $2c, $20, $07, $f2, $cc, $ac, $8f, $80
15fb2     80 80 80 8C 
15fb6     98 AC BC C0 
15fba     C9 D3 D3 C9 
15fbe     BD B3 A6 9D | 	byte	$80, $80, $80, $8c, $98, $ac, $bc, $c0, $c9, $d3, $d3, $c9, $bd, $b3, $a6, $9d
15fc2     9C 9D A7 B7 
15fc6     C5 CF CC C6 
15fca     BC BF C0 C3 
15fce     CA CA C9 CA | 	byte	$9c, $9d, $a7, $b7, $c5, $cf, $cc, $c6, $bc, $bf, $c0, $c3, $ca, $ca, $c9, $ca
15fd2     CC D3 D9 D9 
15fd6     DF E0 E3 ED 
15fda     F9 07 14 18 
15fde     14 18 13 14 | 	byte	$cc, $d3, $d9, $d9, $df, $e0, $e3, $ed, $f9, $07, $14, $18, $14, $18, $13, $14
15fe2     0D 09 FD F9 
15fe6     F9 F3 F9 03 
15fea     0A 0E 1A 27 
15fee     30 36 3D 40 | 	byte	$0d, $09, $fd, $f9, $f9, $f3, $f9, $03, $0a, $0e, $1a, $27, $30, $36, $3d, $40
15ff2     31 21 18 1A 
15ff6     1D 20 24 26 
15ffa     26 26 26 21 
15ffe     18 03 ED DC | 	byte	$31, $21, $18, $1a, $1d, $20, $24, $26, $26, $26, $26, $21, $18, $03, $ed, $dc
16002     D4 D0 DA EC 
16006     FF 0A 18 2D 
1600a     3B 54 66 77 
1600e     7F 7F 7F 74 | 	byte	$d4, $d0, $da, $ec, $ff, $0a, $18, $2d, $3b, $54, $66, $77, $7f, $7f, $7f, $74
16012     64 4B 24 01 
16016     E2 C9 B7 B5 
1601a     B7 C3 C9 D0 
1601e     DF EC FF 0E | 	byte	$64, $4b, $24, $01, $e2, $c9, $b7, $b5, $b7, $c3, $c9, $d0, $df, $ec, $ff, $0e
16022     20 21 20 20 
16026     1E 13 0A 00 
1602a     FC EC E3 E0 
1602e     D3 D6 DA D6 | 	byte	$20, $21, $20, $20, $1e, $13, $0a, $00, $fc, $ec, $e3, $e0, $d3, $d6, $da, $d6
16032     CF C6 B9 B3 
16036     B5 B3 B7 BC 
1603a     C6 BF C9 D4 
1603e     DA DC E3 F9 | 	byte	$cf, $c6, $b9, $b3, $b5, $b3, $b7, $bc, $c6, $bf, $c9, $d4, $da, $dc, $e3, $f9
16042     07 20 37 49 
16046     53 4F 47 47 
1604a     40 40 3A 31 
1604e     21 10 09 00 | 	byte	$07, $20, $37, $49, $53, $4f, $47, $47, $40, $40, $3a, $31, $21, $10, $09, $00
16052     01 00 FF 00 
16056     01 04 10 20 
1605a     2D 36 34 36 
1605e     36 37 40 41 | 	byte	$01, $00, $ff, $00, $01, $04, $10, $20, $2d, $36, $34, $36, $36, $37, $40, $41
16062     43 44 44 31 
16066     2A 2D 24 0D 
1606a     00 F9 F7 F7 
1606e     FF 09 10 18 | 	byte	$43, $44, $44, $31, $2a, $2d, $24, $0d, $00, $f9, $f7, $f7, $ff, $09, $10, $18
16072     1A 2C 00 00 
16076     FC FF 02 04 
1607a     05 07 07 09 
1607e     0A 08 07 08 | 	byte	$1a, $2c, $00, $00, $fc, $ff, $02, $04, $05, $07, $07, $09, $0a, $08, $07, $08
16082     08 07 06 06 
16086     05 04 04 04 
1608a     03 00 F4 EC 
1608e     EA E5 EF 0F | 	byte	$08, $07, $06, $06, $05, $04, $04, $04, $03, $00, $f4, $ec, $ea, $e5, $ef, $0f
16092     00 BF FF 00 
16096     CF FF E0 FF 
1609a     20 C0 FF 20 
1609e     D7 FF F0 FF | 	byte	$00, $bf, $ff, $00, $cf, $ff, $e0, $ff, $20, $c0, $ff, $20, $d7, $ff, $f0, $ff
160a2     10 FF 50 00 
160a6     0F 20 07 18 
160aa     10 17 10 FF 
160ae     10 FF 00 EF | 	byte	$10, $ff, $50, $00, $0f, $20, $07, $18, $10, $17, $10, $ff, $10, $ff, $00, $ef
160b2     28 F0 FF 10 
160b6     F3 F1 FF 00 
160ba     DF F8 F0 F3 
160be     E8 EF 10 D0 | 	byte	$28, $f0, $ff, $10, $f3, $f1, $ff, $00, $df, $f8, $f0, $f3, $e8, $ef, $10, $d0
160c2     DF 10 F7 00 
160c6     DF 1B 00 DF 
160ca     20 EB FC 1F 
160ce     00 FF 30 EF | 	byte	$df, $10, $f7, $00, $df, $1b, $00, $df, $20, $eb, $fc, $1f, $00, $ff, $30, $ef
160d2     08 EF 0F 14 
160d6     01 FF 10 03 
160da     17 00 FF 30 
160de     E7 0F 28 08 | 	byte	$08, $ef, $0f, $14, $01, $ff, $10, $03, $17, $00, $ff, $30, $e7, $0f, $28, $08
160e2     00 FB 0F 00 
160e6     EF F0 EF 00 
160ea     FF 00 FF 00 
160ee     DF 00 E5 EB | 	byte	$00, $fb, $0f, $00, $ef, $f0, $ef, $00, $ff, $00, $ff, $00, $df, $00, $e5, $eb
160f2     E8 F7 00 EB 
160f6     FB 02 F0 E0 
160fa     FF 10 FF 30 
160fe     FF 10 0F 00 | 	byte	$e8, $f7, $00, $eb, $fb, $02, $f0, $e0, $ff, $10, $ff, $30, $ff, $10, $0f, $00
16102     FF 1B 08 0F 
16106     20 FF 10 FF 
1610a     10 FF 17 20 
1610e     00 EF 1F 10 | 	byte	$ff, $1b, $08, $0f, $20, $ff, $10, $ff, $10, $ff, $17, $20, $00, $ef, $1f, $10
16112     F3 0E 00 EB 
16116     D0 DF 06 00 
1611a     E0 FF 00 DF 
1611e     00 DF F0 F9 | 	byte	$f3, $0e, $00, $eb, $d0, $df, $06, $00, $e0, $ff, $00, $df, $00, $df, $f0, $f9
16122     F0 EF FF 20 
16126     E1 FF 10 FF 
1612a     10 FF 00 FF 
1612e     F0 FF 20 F7 | 	byte	$f0, $ef, $ff, $20, $e1, $ff, $10, $ff, $10, $ff, $00, $ff, $f0, $ff, $20, $f7
16132     0B 08 F7 09 
16136     2E 00 EF 20 
1613a     F3 FF 00 EB 
1613e     FF 00 EB F7 | 	byte	$0b, $08, $f7, $09, $2e, $00, $ef, $20, $f3, $ff, $00, $eb, $ff, $00, $eb, $f7
16142     0D 00 E7 FF 
16146     10 FF 10 F7 
1614a     07 20 00 EF 
1614e     0C 00 E3 F0 | 	byte	$0d, $00, $e7, $ff, $10, $ff, $10, $f7, $07, $20, $00, $ef, $0c, $00, $e3, $f0
16152     E5 EF F0 F7 
16156     10 00 FB F8 
1615a     F5 FD 06 00 
1615e     FF 18 08 0F | 	byte	$e5, $ef, $f0, $f7, $10, $00, $fb, $f8, $f5, $fd, $06, $00, $ff, $18, $08, $0f
16162     08 FF 18 08 
16166     07 18 00 F7 
1616a     00 FF 09 12 
1616e     04 07 10 FA | 	byte	$08, $ff, $18, $08, $07, $18, $00, $f7, $00, $ff, $09, $12, $04, $07, $10, $fa
16172     FF 00 FF 08 
16176     F9 E4 E5 F7 
1617a     F4 E0 EF F0 
1617e     EF F0 FF 14 | 	byte	$ff, $00, $ff, $08, $f9, $e4, $e5, $f7, $f4, $e0, $ef, $f0, $ef, $f0, $ff, $14
16182     00 FF 1F 00 
16186     EF 20 07 00 
1618a     FE F0 FF 00 
1618e     FF 08 0C 00 | 	byte	$00, $ff, $1f, $00, $ef, $20, $07, $00, $fe, $f0, $ff, $00, $ff, $08, $0c, $00
16192     FF 00 FF 00 
16196     F7 0B 10 F0 
1619a     FF 10 FB 00 
1619e     1F 10 0B 00 | 	byte	$ff, $00, $ff, $00, $f7, $0b, $10, $f0, $ff, $10, $fb, $00, $1f, $10, $0b, $00
161a2     0F 10 0F 04 
161a6     E8 FF 00 DF 
161aa     FC F0 DF E4 
161ae     FF 00 EF 00 | 	byte	$0f, $10, $0f, $04, $e8, $ff, $00, $df, $fc, $f0, $df, $e4, $ff, $00, $ef, $00
161b2     F7 06 00 EF 
161b6     FE F4 FF 10 
161ba     FF 07 08 07 
161be     10 00 FF 08 | 	byte	$f7, $06, $00, $ef, $fe, $f4, $ff, $10, $ff, $07, $08, $07, $10, $00, $ff, $08
161c2     0F E0 FF 20 
161c6     D7 1F 10 DF 
161ca     20 FF 03 1F 
161ce     10 FB 00 FF | 	byte	$0f, $e0, $ff, $20, $d7, $1f, $10, $df, $20, $ff, $03, $1f, $10, $fb, $00, $ff
161d2     00 EF FF F0 
161d6     EF 00 FF F1 
161da     FF 00 FF 0F 
161de     00 FF 00 FF | 	byte	$00, $ef, $ff, $f0, $ef, $00, $ff, $f1, $ff, $00, $ff, $0f, $00, $ff, $00, $ff
161e2     00 EF 00 F4 
161e6     EF FF F8 FF 
161ea     00 FE F7 FF 
161ee     08 0A 07 18 | 	byte	$00, $ef, $00, $f4, $ef, $ff, $f8, $ff, $00, $fe, $f7, $ff, $08, $0a, $07, $18
161f2     00 FF 10 FF 
161f6     00 06 03 17 
161fa     00 F7 08 05 
161fe     00 F4 FF 00 | 	byte	$00, $ff, $10, $ff, $00, $06, $03, $17, $00, $f7, $08, $05, $00, $f4, $ff, $00
16202     FF F0 F7 0F 
16206     00 F7 0B 10 
1620a     F0 F7 08 FF 
1620e     F5 F4 EF F7 | 	byte	$ff, $f0, $f7, $0f, $00, $f7, $0b, $10, $f0, $f7, $08, $ff, $f5, $f4, $ef, $f7
16212     08 F0 FF 00 
16216     F7 FF 08 E5 
1621a     FF 00 EF 0F 
1621e     00 EB FF 08 | 	byte	$08, $f0, $ff, $00, $f7, $ff, $08, $e5, $ff, $00, $ef, $0f, $00, $eb, $ff, $08
16222     FF 00 12 00 
16226     FF 00 FF 10 
1622a     04 FF 02 0D 
1622e     04 0A 00 F1 | 	byte	$ff, $00, $12, $00, $ff, $00, $ff, $10, $04, $ff, $02, $0d, $04, $0a, $00, $f1
16232     FF 08 FB 05 
16236     10 08 F8 FB 
1623a     FD 0B 00 EF 
1623e     FF 10 E0 EF | 	byte	$ff, $08, $fb, $05, $10, $08, $f8, $fb, $fd, $0b, $00, $ef, $ff, $10, $e0, $ef
16242     10 00 EF 0F 
16246     00 FF 00 FF 
1624a     07 00 EF 00 
1624e     FE F4 F5 FF | 	byte	$10, $00, $ef, $0f, $00, $ff, $00, $ff, $07, $00, $ef, $00, $fe, $f4, $f5, $ff
16252     00 FF 00 FF 
16256     00 EF 17 10 
1625a     FF 10 F0 FF 
1625e     10 FF 04 12 | 	byte	$00, $ff, $00, $ff, $00, $ef, $17, $10, $ff, $10, $f0, $ff, $10, $ff, $04, $12
16262     04 08 F0 FF 
16266     00 FD F0 FF 
1626a     00 EF FF 00 
1626e     FB FD F8 0F | 	byte	$04, $08, $f0, $ff, $00, $fd, $f0, $ff, $00, $ef, $ff, $00, $fb, $fd, $f8, $0f
16272     00 FF 08 F8 
16276     EB FF 00 FB 
1627a     FB 0D 00 FF 
1627e     00 FF 00 03 | 	byte	$00, $ff, $08, $f8, $eb, $ff, $00, $fb, $fb, $0d, $00, $ff, $00, $ff, $00, $03
16282     07 04 03 0A 
16286     F0 FF 08 F7 
1628a     0F 08 FF 09 
1628e     08 06 03 08 | 	byte	$07, $04, $03, $0a, $f0, $ff, $08, $f7, $0f, $08, $ff, $09, $08, $06, $03, $08
16292     00 0F 00 FF 
16296     00 F0 FF 00 
1629a     F5 FF 00 0B 
1629e     00 FB FF 04 | 	byte	$00, $0f, $00, $ff, $00, $f0, $ff, $00, $f5, $ff, $00, $0b, $00, $fb, $ff, $04
162a2     F0 FF 08 F1 
162a6     FF 00 FD FB 
162aa     00 0B 00 F5 
162ae     0F 00 FF F8 | 	byte	$f0, $ff, $08, $f1, $ff, $00, $fd, $fb, $00, $0b, $00, $f5, $0f, $00, $ff, $f8
162b2     0A 04 F8 FF 
162b6     08 FB 07 00 
162ba     FF 08 FF 0F 
162be     08 07 04 FA | 	byte	$0a, $04, $f8, $ff, $08, $fb, $07, $00, $ff, $08, $ff, $0f, $08, $07, $04, $fa
162c2     0F 00 FF 00 
162c6     FC F7 0C F2 
162ca     FF 04 04 FF 
162ce     04 F3 17 00 | 	byte	$0f, $00, $ff, $00, $fc, $f7, $0c, $f2, $ff, $04, $04, $ff, $04, $f3, $17, $00
162d2     FF 03 08 FC 
162d6     FA F2 FB FF 
162da     F8 EF FF F0 
162de     FF 00 FF 03 | 	byte	$ff, $03, $08, $fc, $fa, $f2, $fb, $ff, $f8, $ef, $ff, $f0, $ff, $00, $ff, $03
162e2     00 FB 07 02 
162e6     0F 00 0F 09 
162ea     16 00 17 08 
162ee     05 0F 00 FF | 	byte	$00, $fb, $07, $02, $0f, $00, $0f, $09, $16, $00, $17, $08, $05, $0f, $00, $ff
162f2     09 00 EF 0F 
162f6     00 EF 0B 00 
162fa     FF 00 00 F7 
162fe     0B 00 FF 00 | 	byte	$09, $00, $ef, $0f, $00, $ef, $0b, $00, $ff, $00, $00, $f7, $0b, $00, $ff, $00
16302     FE FF F8 FF 
16306     00 F7 FF 00 
1630a     FB F9 FC FF 
1630e     00 F9 FF 00 | 	byte	$fe, $ff, $f8, $ff, $00, $f7, $ff, $00, $fb, $f9, $fc, $ff, $00, $f9, $ff, $00
16312     FF 03 0C F2 
16316     FF 09 08 FB 
1631a     15 00 FF 00 
1631e     04 FF 00 F9 | 	byte	$ff, $03, $0c, $f2, $ff, $09, $08, $fb, $15, $00, $ff, $00, $04, $ff, $00, $f9
16322     FD 15 00 FF 
16326     00 04 03 0A 
1632a     F4 FF 00 FF 
1632e     FA F2 F7 FC | 	byte	$fd, $15, $00, $ff, $00, $04, $03, $0a, $f4, $ff, $00, $ff, $fa, $f2, $f7, $fc
16332     E5 FF 00 F7 
16336     FF 00 FF 00 
1633a     FF 0E 00 FF 
1633e     05 0A 00 FB | 	byte	$e5, $ff, $00, $f7, $ff, $00, $ff, $00, $ff, $0e, $00, $ff, $05, $0a, $00, $fb
16342     14 00 FF 00 
16346     F5 0F 00 FF 
1634a     F3 FF FB 04 
1634e     FF 14 F0 FF | 	byte	$14, $00, $ff, $00, $f5, $0f, $00, $ff, $f3, $ff, $fb, $04, $ff, $14, $f0, $ff
16352     00 FE F7 06 
16356     00 FF 09 00 
1635a     07 00 ED FF 
1635e     00 F6 FF 08 | 	byte	$00, $fe, $f7, $06, $00, $ff, $09, $00, $07, $00, $ed, $ff, $00, $f6, $ff, $08
16362     F6 FF 05 00 
16366     FF 00 FD 04 
1636a     F4 F9 F7 FD 
1636e     FC F1 FD FC | 	byte	$f6, $ff, $05, $00, $ff, $00, $fd, $04, $f4, $f9, $f7, $fd, $fc, $f1, $fd, $fc
16372     F7 08 F0 FD 
16376     FF 00 F3 0B 
1637a     00 FF 07 00 
1637e     0B 00 FC FF | 	byte	$f7, $08, $f0, $fd, $ff, $00, $f3, $0b, $00, $ff, $07, $00, $0b, $00, $fc, $ff
16382     08 04 FF 08 
16386     F9 0C F7 12 
1638a     F1 0F 00 FF 
1638e     02 00 06 F7 | 	byte	$08, $04, $ff, $08, $f9, $0c, $f7, $12, $f1, $0f, $00, $ff, $02, $00, $06, $f7
16392     FF 02 F8 FF 
16396     00 FD FF 00 
1639a     FC FD 01 F8 
1639e     EF 0E 00 FD | 	byte	$ff, $02, $f8, $ff, $00, $fd, $ff, $00, $fc, $fd, $01, $f8, $ef, $0e, $00, $fd
163a2     F9 02 FA F7 
163a6     06 00 02 FB 
163aa     04 07 04 FB 
163ae     0F 08 F8 FF | 	byte	$f9, $02, $fa, $f7, $06, $00, $02, $fb, $04, $07, $04, $fb, $0f, $08, $f8, $ff
163b2     04 00 FF F8 
163b6     FF 07 00 FB 
163ba     0E F2 FF 00 
163be     FE FE F5 FF | 	byte	$04, $00, $ff, $f8, $ff, $07, $00, $fb, $0e, $f2, $ff, $00, $fe, $fe, $f5, $ff
163c2     F4 FA FF 00 
163c6     FC FB 08 00 
163ca     FF 03 00 FB 
163ce     FF 06 02 FD | 	byte	$f4, $fa, $ff, $00, $fc, $fb, $08, $00, $ff, $03, $00, $fb, $ff, $06, $02, $fd
163d2     01 00 00 FB 
163d6     04 FD 04 00 
163da     FB 04 FA FF 
163de     05 00 F7 08 | 	byte	$01, $00, $00, $fb, $04, $fd, $04, $00, $fb, $04, $fa, $ff, $05, $00, $f7, $08
163e2     00 FF 03 08 
163e6     01 0A 00 08 
163ea     01 00 F7 0B 
163ee     00 FD 08 F3 | 	byte	$00, $ff, $03, $08, $01, $0a, $00, $08, $01, $00, $f7, $0b, $00, $fd, $08, $f3
163f2     FF F5 FB FD 
163f6     F8 FE FB FF 
163fa     FA F9 FF 05 
163fe     00 FB 10 00 | 	byte	$ff, $f5, $fb, $fd, $f8, $fe, $fb, $ff, $fa, $f9, $ff, $05, $00, $fb, $10, $00
16402     06 01 04 FF 
16406     08 F8 FF 00 
1640a     F6 FF FB 02 
1640e     00 FC FB FF | 	byte	$06, $01, $04, $ff, $08, $f8, $ff, $00, $f6, $ff, $fb, $02, $00, $fc, $fb, $ff
16412     00 EF 0D 00 
16416     F6 FF 00 FB 
1641a     0A F3 08 03 
1641e     04 05 04 00 | 	byte	$00, $ef, $0d, $00, $f6, $ff, $00, $fb, $0a, $f3, $08, $03, $04, $05, $04, $00
16422     FB FF 00 F3 
16426     FF FA F4 F7 
1642a     FF 00 F6 F9 
1642e     FD F9 FF 02 | 	byte	$fb, $ff, $00, $f3, $ff, $fa, $f4, $f7, $ff, $00, $f6, $f9, $fd, $f9, $ff, $02
16432     FA FF 00 FD 
16436     08 F9 05 03 
1643a     04 00 FF 04 
1643e     04 00 FF 04 | 	byte	$fa, $ff, $00, $fd, $08, $f9, $05, $03, $04, $00, $ff, $04, $04, $00, $ff, $04
16442     F3 0E FB 08 
16446     01 03 06 06 
1644a     02 FD 04 F9 
1644e     FC FD FA F8 | 	byte	$f3, $0e, $fb, $08, $01, $03, $06, $06, $02, $fd, $04, $f9, $fc, $fd, $fa, $f8
16452     FE 00 F8 FB 
16456     04 00 F8 FF 
1645a     04 00 F9 FF 
1645e     04 F7 06 F7 | 	byte	$fe, $00, $f8, $fb, $04, $00, $f8, $ff, $04, $00, $f9, $ff, $04, $f7, $06, $f7
16462     02 00 F9 FF 
16466     01 00 FD 05 
1646a     04 04 04 00 
1646e     00 FF 04 03 | 	byte	$02, $00, $f9, $ff, $01, $00, $fd, $05, $04, $04, $04, $00, $00, $ff, $04, $03
16472     02 FF 0C FB 
16476     08 03 04 00 
1647a     FD FE F9 FA 
1647e     F7 F9 FB FA | 	byte	$02, $ff, $0c, $fb, $08, $03, $04, $00, $fd, $fe, $f9, $fa, $f7, $f9, $fb, $fa
16482     F9 FF 00 F8 
16486     FE FD 00 FE 
1648a     FB FF 00 FA 
1648e     FF FF 00 FF | 	byte	$f9, $ff, $00, $f8, $fe, $fd, $00, $fe, $fb, $ff, $00, $fa, $ff, $ff, $00, $ff
16492     00 FB 04 03 
16496     08 01 04 FF 
1649a     04 FC FF 02 
1649e     FB 04 FF 04 | 	byte	$00, $fb, $04, $03, $08, $01, $04, $ff, $04, $fc, $ff, $02, $fb, $04, $ff, $04
164a2     02 00 00 03 
164a6     04 00 FF 08 
164aa     00 FF 06 00 
164ae     FF 02 00 04 | 	byte	$02, $00, $00, $03, $04, $00, $ff, $08, $00, $ff, $06, $00, $ff, $02, $00, $04
164b2     FD FF 00 01 
164b6     00 FB 00 F5 
164ba     FD F7 F6 FA 
164be     F7 FF 01 FE | 	byte	$fd, $ff, $00, $01, $00, $fb, $00, $f5, $fd, $f7, $f6, $fa, $f7, $ff, $01, $fe
164c2     04 02 04 00 
164c6     FF 03 00 FF 
164ca     08 F7 FF 02 
164ce     00 03 00 FF | 	byte	$04, $02, $04, $00, $ff, $03, $00, $ff, $08, $f7, $ff, $02, $00, $03, $00, $ff
164d2     00 F9 FF FE 
164d6     00 FF 01 FE 
164da     03 00 FB 06 
164de     FD FF 04 00 | 	byte	$00, $f9, $ff, $fe, $00, $ff, $01, $fe, $03, $00, $fb, $06, $fd, $ff, $04, $00
164e2     FF 05 01 00 
164e6     FF 00 FB FF 
164ea     FF FC FF 00 
164ee     FF 04 FB 00 | 	byte	$ff, $05, $01, $00, $ff, $00, $fb, $ff, $ff, $fc, $ff, $00, $ff, $04, $fb, $00
164f2     FD 00 FB 00 
164f6     FF 00 FB 03 
164fa     03 01 06 04 
164fe     03 04 07 04 | 	byte	$fd, $00, $fb, $00, $ff, $00, $fb, $03, $03, $01, $06, $04, $03, $04, $07, $04
16502     FB 08 01 00 
16506     FF 00 FB FF 
1650a     00 F7 08 F7 
1650e     FC FB FB FC | 	byte	$fb, $08, $01, $00, $ff, $00, $fb, $ff, $00, $f7, $08, $f7, $fc, $fb, $fb, $fc
16512     FB F9 FB FE 
16516     FA FD FF 01 
1651a     00 FF 02 00 
1651e     FD FF 00 00 | 	byte	$fb, $f9, $fb, $fe, $fa, $fd, $ff, $01, $00, $ff, $02, $00, $fd, $ff, $00, $00
16522     00 FF 04 FD 
16526     05 08 00 00 
1652a     02 00 FF 00 
1652e     FF 00 FF 00 | 	byte	$00, $ff, $04, $fd, $05, $08, $00, $00, $02, $00, $ff, $00, $ff, $00, $ff, $00
16532     FD 05 04 FD 
16536     09 08 01 02 
1653a     03 00 FD FE 
1653e     FC FD 00 FB | 	byte	$fd, $05, $04, $fd, $09, $08, $01, $02, $03, $00, $fd, $fe, $fc, $fd, $00, $fb
16542     FF 00 F7 FE 
16546     FC F5 FA FD 
1654a     F8 FB FF FD 
1654e     00 01 01 05 | 	byte	$ff, $00, $f7, $fe, $fc, $f5, $fa, $fd, $f8, $fb, $ff, $fd, $00, $01, $01, $05
16552     04 05 08 03 
16556     07 04 01 04 
1655a     02 00 FE FC 
1655e     FD FF 00 FF | 	byte	$04, $05, $08, $03, $07, $04, $01, $04, $02, $00, $fe, $fc, $fd, $ff, $00, $ff
16562     00 FF 00 FF 
16566     04 00 FF 02 
1656a     FF 02 FF 03 
1656e     04 03 04 03 | 	byte	$00, $ff, $00, $ff, $04, $00, $ff, $02, $ff, $02, $ff, $03, $04, $03, $04, $03
16572     02 00 00 FF 
16576     00 FE FC FD 
1657a     FE FC FD FC 
1657e     F9 FF 02 00 | 	byte	$02, $00, $00, $ff, $00, $fe, $fc, $fd, $fe, $fc, $fd, $fc, $f9, $ff, $02, $00
16582     FA FF 02 FD 
16586     FE 03 04 00 
1658a     04 05 02 05 
1658e     04 03 05 02 | 	byte	$fa, $ff, $02, $fd, $fe, $03, $04, $00, $04, $05, $02, $05, $04, $03, $05, $02
16592     01 03 01 01 
16596     01 FF 00 FF 
1659a     02 FA FD 00 
1659e     FB FC FD FD | 	byte	$01, $03, $01, $01, $01, $ff, $00, $ff, $02, $fa, $fd, $00, $fb, $fc, $fd, $fd
165a2     00 FE FF 04 
165a6     02 FF 01 02 
165aa     00 FD FE FC 
165ae     FD FE FE FC | 	byte	$00, $fe, $ff, $04, $02, $ff, $01, $02, $00, $fd, $fe, $fc, $fd, $fe, $fe, $fc
165b2     FE 00 00 FD 
165b6     FF 00 01 00 
165ba     FF 02 00 FF 
165be     02 01 02 00 | 	byte	$fe, $00, $00, $fd, $ff, $00, $01, $00, $ff, $02, $00, $ff, $02, $01, $02, $00
165c2     01 00 FF 00 
165c6     03 00 FD FE 
165ca     FF FD FF 00 
165ce     FD FE FF FC | 	byte	$01, $00, $ff, $00, $03, $00, $fd, $fe, $ff, $fd, $ff, $00, $fd, $fe, $ff, $fc
165d2     FF 02 FD FE 
165d6     FE FE FE FD 
165da     FC FC FF 00 
165de     01 04 02 01 | 	byte	$ff, $02, $fd, $fe, $fe, $fe, $fe, $fd, $fc, $fc, $ff, $00, $01, $04, $02, $01
165e2     04 02 01 00 
165e6     FE FF FC FC 
165ea     FD FF FD FE 
165ee     FF FE FD FF | 	byte	$04, $02, $01, $00, $fe, $ff, $fc, $fc, $fd, $ff, $fd, $fe, $ff, $fe, $fd, $ff
165f2     01 00 00 FF 
165f6     03 01 FF 03 
165fa     02 FF 03 02 
165fe     00 01 00 FF | 	byte	$01, $00, $00, $ff, $03, $01, $ff, $03, $02, $ff, $03, $02, $00, $01, $00, $ff
16602     00 00 FD 00 
16606     FF FC FA FC 
1660a     FC FB FE FD 
1660e     FD FF FF 00 | 	byte	$00, $00, $fd, $00, $ff, $fc, $fa, $fc, $fc, $fb, $fe, $fd, $fd, $ff, $ff, $00
16612     FE FF 00 03 
16616     02 01 03 02 
1661a     01 00 01 00 
1661e     FF FF 00 00 | 	byte	$fe, $ff, $00, $03, $02, $01, $03, $02, $01, $00, $01, $00, $ff, $ff, $00, $00
16622     00 00 FD FF 
16626     00 FF 00 FF 
1662a     02 02 02 02 
1662e     04 04 02 01 | 	byte	$00, $00, $fd, $ff, $00, $ff, $00, $ff, $02, $02, $02, $02, $04, $04, $02, $01
16632     00 FD FE FE 
16636     FF 00 FF 02 
1663a     01 01 00 FD 
1663e     FE FE FE FC | 	byte	$00, $fd, $fe, $fe, $ff, $00, $ff, $02, $01, $01, $00, $fd, $fe, $fe, $fe, $fc
16642     FB FD F8 FB 
16646     FD FD FF 00 
1664a     03 01 03 02 
1664e     01 01 04 04 | 	byte	$fb, $fd, $f8, $fb, $fd, $fd, $ff, $00, $03, $01, $03, $02, $01, $01, $04, $04
16652     00 FF 04 01 
16656     03 04 00 FF 
1665a     00 FF 01 00 
1665e     FE FF FE FC | 	byte	$00, $ff, $04, $01, $03, $04, $00, $ff, $00, $ff, $01, $00, $fe, $ff, $fe, $fc
16662     FD FE FF 01 
16666     02 00 FE FE 
1666a     FF FE FF 00 
1666e     FC FC FF 00 | 	byte	$fd, $fe, $ff, $01, $02, $00, $fe, $fe, $ff, $fe, $ff, $00, $fc, $fc, $ff, $00
16672     FF 01 FF FF 
16676     00 FE FF 01 
1667a     01 01 01 01 
1667e     03 02 04 05 | 	byte	$ff, $01, $ff, $ff, $00, $fe, $ff, $01, $01, $01, $01, $01, $03, $02, $04, $05
16682     04 05 06 02 
16686     03 02 00 00 
1668a     00 FF 00 FE 
1668e     FF 00 FF 00 | 	byte	$04, $05, $06, $02, $03, $02, $00, $00, $00, $ff, $00, $fe, $ff, $00, $ff, $00
16692     FF 00 FE FD 
16696     FE FC FA FB 
1669a     FC FC FD FD 
1669e     FD FF FF FF | 	byte	$ff, $00, $fe, $fd, $fe, $fc, $fa, $fb, $fc, $fc, $fd, $fd, $fd, $ff, $ff, $ff
166a2     FE FF FF 01 
166a6     01 02 02 02 
166aa     02 02 01 01 
166ae     00 FF 00 FF | 	byte	$fe, $ff, $ff, $01, $01, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $00, $ff
166b2     00 FF 00 FE 
166b6     FF 00 FE FF 
166ba     FF FF FF FF 
166be     02 04 04 03 | 	byte	$00, $ff, $00, $fe, $ff, $00, $fe, $ff, $ff, $ff, $ff, $ff, $02, $04, $04, $03
166c2     03 03 02 02 
166c6     00 FF 00 FD 
166ca     FD FD FC FB 
166ce     FB FB FC FD | 	byte	$03, $03, $02, $02, $00, $ff, $00, $fd, $fd, $fd, $fc, $fb, $fb, $fb, $fc, $fd
166d2     FC FD FE FF 
166d6     00 00 02 03 
166da     01 03 00 FF 
166de     00 00 00 FF | 	byte	$fc, $fd, $fe, $ff, $00, $00, $02, $03, $01, $03, $00, $ff, $00, $00, $00, $ff
166e2     FE FE FE FE 
166e6     FD FE FF 00 
166ea     FE FF 00 FF 
166ee     03 05 04 02 | 	byte	$fe, $fe, $fe, $fe, $fd, $fe, $ff, $00, $fe, $ff, $00, $ff, $03, $05, $04, $02
166f2     03 03 02 02 
166f6     02 02 01 01 
166fa     02 00 FF 00 
166fe     FF FF 00 FE | 	byte	$03, $03, $02, $02, $02, $02, $01, $01, $02, $00, $ff, $00, $ff, $ff, $00, $fe
16702     FF FE FD FD 
16706     FC FB FB FC 
1670a     FD FF 00 FE 
1670e     FE FF FF 00 | 	byte	$ff, $fe, $fd, $fd, $fc, $fb, $fb, $fc, $fd, $ff, $00, $fe, $fe, $ff, $ff, $00
16712     01 02 01 01 
16716     01 01 02 02 
1671a     02 03 02 01 
1671e     01 01 01 00 | 	byte	$01, $02, $01, $01, $01, $01, $02, $02, $02, $03, $02, $01, $01, $01, $01, $00
16722     00 00 FF FE 
16726     FF 00 01 01 
1672a     02 00 01 00 
1672e     02 00 FF 00 | 	byte	$00, $00, $ff, $fe, $ff, $00, $01, $01, $02, $00, $01, $00, $02, $00, $ff, $00
16732     00 FE FE FE 
16736     FE FD FE FD 
1673a     FD FD FD FD 
1673e     FE FD FD FE | 	byte	$00, $fe, $fe, $fe, $fe, $fd, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fd, $fd, $fe
16742     FE FF FF 01 
16746     02 02 03 02 
1674a     03 04 02 02 
1674e     03 03 01 00 | 	byte	$fe, $ff, $ff, $01, $02, $02, $03, $02, $03, $04, $02, $02, $03, $03, $01, $00
16752     FE FE FE FF 
16756     00 FF 00 00 
1675a     FF 00 FD FD 
1675e     FC FC FD FE | 	byte	$fe, $fe, $fe, $ff, $00, $ff, $00, $00, $ff, $00, $fd, $fd, $fc, $fc, $fd, $fe
16762     FE FF FE FE 
16766     FD FD FD FF 
1676a     FE FF 00 FE 
1676e     FE FE FF 00 | 	byte	$fe, $ff, $fe, $fe, $fd, $fd, $fd, $ff, $fe, $ff, $00, $fe, $fe, $fe, $ff, $00
16772     00 FF FE FE 
16776     FD FE FF FF 
1677a     01 01 01 02 
1677e     04 04 05 06 | 	byte	$00, $ff, $fe, $fe, $fd, $fe, $ff, $ff, $01, $01, $01, $02, $04, $04, $05, $06
16782     06 04 03 02 
16786     00 FF FF FF 
1678a     FC FA FA F9 
1678e     F9 F9 F9 FB | 	byte	$06, $04, $03, $02, $00, $ff, $ff, $ff, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $fb
16792     FA FB FB FB 
16796     FC FC FD FE 
1679a     FF 01 01 01 
1679e     01 02 02 01 | 	byte	$fa, $fb, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $01, $01, $01, $01, $02, $02, $01
167a2     01 02 03 04 
167a6     02 01 00 FF 
167aa     00 00 FF FF 
167ae     00 00 00 FE | 	byte	$01, $02, $03, $04, $02, $01, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $fe
167b2     FF 00 00 00 
167b6     00 00 00 00 
167ba     00 FF 00 FF 
167be     FD FC FC FB | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $ff, $fd, $fc, $fc, $fb
167c2     FA FB FC FB 
167c6     FC FC FD FD 
167ca     FE FF FF 01 
167ce     00 FF FF FF | 	byte	$fa, $fb, $fc, $fb, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $01, $00, $ff, $ff, $ff
167d2     FF 01 02 02 
167d6     02 04 03 02 
167da     02 02 02 02 
167de     01 00 00 00 | 	byte	$ff, $01, $02, $02, $02, $04, $03, $02, $02, $02, $02, $02, $01, $00, $00, $00
167e2     00 00 FE FE 
167e6     FE FE FE FD 
167ea     FD FE FE FF 
167ee     FF FF 01 00 | 	byte	$00, $00, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $01, $00
167f2     00 00 00 00 
167f6     00 00 00 00 
167fa     00          | 	byte	$00[9]
167fb     FF FE FC FC 
167ff     FC FC FD FE 
16803     FF FF 00 00 
16807     02 02 02 02 | 	byte	$ff, $fe, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $ff, $00, $00, $02, $02, $02, $02
1680b     01 01 01 00 
1680f     00 00 01 01 
16813     01 01 00 00 
16817     FF FF FF FF | 	byte	$01, $01, $01, $00, $00, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $ff, $ff
1681b     00 FF FF FF 
1681f     FE FE FE FF 
16823     FF FF 01 00 
16827     00 00 01 02 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $01, $00, $00, $00, $01, $02
1682b     02 03 03 02 
1682f     01 01 01 01 
16833     01 01 01 00 
16837     FF FE FF FF | 	byte	$02, $03, $03, $02, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $fe, $ff, $ff
1683b     FF FF 00 00 
1683f     01 03 05 06 
16843     06 05 05 04 
16847     02 01 01 01 | 	byte	$ff, $ff, $00, $00, $01, $03, $05, $06, $06, $05, $05, $04, $02, $01, $01, $01
1684b     00 FE FE FD 
1684f     FC FC FB FA 
16853     FA FA FB FB 
16857     FC FD FE FD | 	byte	$00, $fe, $fe, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fd, $fe, $fd
1685b     FE FF 01 01 
1685f     01 02 02 01 
16863     02 02 03 04 
16867     04 04 04 02 | 	byte	$fe, $ff, $01, $01, $01, $02, $02, $01, $02, $02, $03, $04, $04, $04, $04, $02
1686b     02 01 00 01 
1686f     01 01 00 00 
16873     00 FF FF FF 
16877     00 01 02 01 | 	byte	$02, $01, $00, $01, $01, $01, $00, $00, $00, $ff, $ff, $ff, $00, $01, $02, $01
1687b     02 03 03 02 
1687f     02 00 00 FF 
16883     FF FF FF FF 
16887     00 FF FF FE | 	byte	$02, $03, $03, $02, $02, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $fe
1688b     FD FD FD FC 
1688f     FD FE FE FF 
16893     FE FE FF 01 
16897     02 03 03 03 | 	byte	$fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $fe, $fe, $ff, $01, $02, $03, $03, $03
1689b     04 04 04 02 
1689f     02 02 02 01 
168a3     02 00 00 FE 
168a7     FE FE FD FD | 	byte	$04, $04, $04, $02, $02, $02, $02, $01, $02, $00, $00, $fe, $fe, $fe, $fd, $fd
168ab     FD FC FC FD 
168af     FD FD FD FF 
168b3     00 00 01 02 
168b7     02 01 01 00 | 	byte	$fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $00, $00, $01, $02, $02, $01, $01, $00
168bb     00 00 00 00 
168bf     00          | 	byte	$00[5]
168c0     01 00 00 FF 
168c4     FE FE FE FD 
168c8     FE FF FF 00 
168cc     01 02 03 04 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fd, $fe, $ff, $ff, $00, $01, $02, $03, $04
168d0     05 06 05 04 
168d4     04 04 02 02 
168d8     00 00 00 FF 
168dc     FE FE FE FD | 	byte	$05, $06, $05, $04, $04, $04, $02, $02, $00, $00, $00, $ff, $fe, $fe, $fe, $fd
168e0     FD FE FE FE 
168e4     FE FE FF FF 
168e8     FE FD FD FD 
168ec     FD FE FE FF | 	byte	$fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $ff
168f0     FF FF FF FF 
168f4     FF          | 	byte	$ff[5]
168f5     00 00 FF FF 
168f9     FF FE FE FE 
168fd     FE FD FD FE 
16901     FE FF FF FF | 	byte	$00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff
16905     01 02 02 02 
16909     02 02 03 02 
1690d     02 01 01 00 
16911     FE FD FC FC | 	byte	$01, $02, $02, $02, $02, $02, $03, $02, $02, $01, $01, $00, $fe, $fd, $fc, $fc
16915     FC FD FE FD 
16919     FE FD FD FE 
1691d     FE FE FF FE 
16921     FF 00 00 01 | 	byte	$fc, $fd, $fe, $fd, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $fe, $ff, $00, $00, $01
16925     01 01 01 02 
16929     03 04 03 02 
1692d     02 01 FE 00 
16931     00 DC F2 F3 | 	byte	$01, $01, $01, $02, $03, $04, $03, $02, $02, $01, $fe, $00, $00, $dc, $f2, $f3
16935     01 0A 10 13 
16939     16 0E 10 13 
1693d     16 1D 1E 14 
16941     07 FD F9 FC | 	byte	$01, $0a, $10, $13, $16, $0e, $10, $13, $16, $1d, $1e, $14, $07, $fd, $f9, $fc
16945     04 14 13 1D 
16949     1E 1D 1A 18 
1694d     16 13 13 13 
16951     13 0A 0A 03 | 	byte	$04, $14, $13, $1d, $1e, $1d, $1a, $18, $16, $13, $13, $13, $13, $0a, $0a, $03
16955     E8 C5 8F 80 
16959     80 80 80 80 
1695d     80 80 92 A7 
16961     B7 C0 CF DA | 	byte	$e8, $c5, $8f, $80, $80, $80, $80, $80, $80, $80, $92, $a7, $b7, $c0, $cf, $da
16965     EA FC 0A 18 
16969     1D 13 FD E2 
1696d     C6 BF BC BD 
16971     BF B7 AC A9 | 	byte	$ea, $fc, $0a, $18, $1d, $13, $fd, $e2, $c6, $bf, $bc, $bd, $bf, $b7, $ac, $a9
16975     AC AD B5 C6 
16979     CA E3 F6 04 
1697d     09 13 18 14 
16981     0A 09 01 00 | 	byte	$ac, $ad, $b5, $c6, $ca, $e3, $f6, $04, $09, $13, $18, $14, $0a, $09, $01, $00
16985     F9 F6 F6 ED 
16989     E6 ED E6 EC 
1698d     ED F9 03 10 
16991     20 30 3B 41 | 	byte	$f9, $f6, $f6, $ed, $e6, $ed, $e6, $ec, $ed, $f9, $03, $10, $20, $30, $3b, $41
16995     40 43 41 47 
16999     53 5D 5D 59 
1699d     3D 2A 18 09 
169a1     01 07 FD 03 | 	byte	$40, $43, $41, $47, $53, $5d, $5d, $59, $3d, $2a, $18, $09, $01, $07, $fd, $03
169a5     0A 0E 24 31 
169a9     34 30 20 1D 
169ad     14 1A 0E 0D 
169b1     0D 0A 13 1A | 	byte	$0a, $0e, $24, $31, $34, $30, $20, $1d, $14, $1a, $0e, $0d, $0d, $0a, $13, $1a
169b5     20 30 36 3D 
169b9     47 44 34 26 
169bd     07 F9 F2 F7 
169c1     FC 01 0E 18 | 	byte	$20, $30, $36, $3d, $47, $44, $34, $26, $07, $f9, $f2, $f7, $fc, $01, $0e, $18
169c5     1E 21 1E 14 
169c9     18 18 18 16 
169cd     0E 0E FF F3 
169d1     EA DC DA D4 | 	byte	$1e, $21, $1e, $14, $18, $18, $18, $16, $0e, $0e, $ff, $f3, $ea, $dc, $da, $d4
169d5     B7 AD A9 A2 
169d9     A3 A6 A7 A9 
169dd     B3 C0 CF E3 
169e1     DF EA EA F9 | 	byte	$b7, $ad, $a9, $a2, $a3, $a6, $a7, $a9, $b3, $c0, $cf, $e3, $df, $ea, $ea, $f9
169e5     FD 0A 14 1A 
169e9     1A 1A 1A 10 
169ed     0D 04 FC F0 
169f1     DC DA CA D6 | 	byte	$fd, $0a, $14, $1a, $1a, $1a, $1a, $10, $0d, $04, $fc, $f0, $dc, $da, $ca, $d6
169f5     DF E8 FD 0E 
169f9     21 3A 4D 68 
169fd     76 7C 70 5A 
16a01     4D 34 1D 10 | 	byte	$df, $e8, $fd, $0e, $21, $3a, $4d, $68, $76, $7c, $70, $5a, $4d, $34, $1d, $10
16a05     01 FC FD FC 
16a09     F7 07 03 07 
16a0d     00 F6 E3 D4 
16a11     CC CC CA CC | 	byte	$01, $fc, $fd, $fc, $f7, $07, $03, $07, $00, $f6, $e3, $d4, $cc, $cc, $ca, $cc
16a15     D4 DA E3 EA 
16a19     F2 ED E8 E2 
16a1d     D6 CF CC B7 
16a21     AF B5 AC B5 | 	byte	$d4, $da, $e3, $ea, $f2, $ed, $e8, $e2, $d6, $cf, $cc, $b7, $af, $b5, $ac, $b5
16a25     CA DF F3 FD 
16a29     FD F3 F6 F6 
16a2d     F9 FF 03 03 
16a31     03 F6 F2 ED | 	byte	$ca, $df, $f3, $fd, $fd, $f3, $f6, $f6, $f9, $ff, $03, $03, $03, $f6, $f2, $ed
16a35     DF DC D9 DA 
16a39     E2 E3 EC F7 
16a3d     03 0D 20 30 
16a41     34 3A 40 40 | 	byte	$df, $dc, $d9, $da, $e2, $e3, $ec, $f7, $03, $0d, $20, $30, $34, $3a, $40, $40
16a45     2A 18 07 FD 
16a49     F2 ED E8 F0 
16a4d     F6 01 07 10 
16a51     1A 18 04 ED | 	byte	$2a, $18, $07, $fd, $f2, $ed, $e8, $f0, $f6, $01, $07, $10, $1a, $18, $04, $ed
16a55     DF C5 B1 A0 
16a59     89 89 92 9A 
16a5d     AF C6 CF E8 
16a61     EA ED E8 E2 | 	byte	$df, $c5, $b1, $a0, $89, $89, $92, $9a, $af, $c6, $cf, $e8, $ea, $ed, $e8, $e2
16a65     D6 D0 C6 BF 
16a69     C3 BD CA C9 
16a6d     CA CC C6 C0 
16a71     AF A9 A7 A0 | 	byte	$d6, $d0, $c6, $bf, $c3, $bd, $ca, $c9, $ca, $cc, $c6, $c0, $af, $a9, $a7, $a0
16a75     A7 B7 C0 CF 
16a79     DF ED 03 10 
16a7d     14 09 0A 03 
16a81     07 0A 09 07 | 	byte	$a7, $b7, $c0, $cf, $df, $ed, $03, $10, $14, $09, $0a, $03, $07, $0a, $09, $07
16a85     01 F0 EC E6 
16a89     E2 E2 E6 EA 
16a8d     F6 F7 03 13 
16a91     20 3B 57 68 | 	byte	$01, $f0, $ec, $e6, $e2, $e2, $e6, $ea, $f6, $f7, $03, $13, $20, $3b, $57, $68
16a95     74 74 71 63 
16a99     44 31 18 07 
16a9d     03 EC EC EC 
16aa1     F6 04 18 26 | 	byte	$74, $74, $71, $63, $44, $31, $18, $07, $03, $ec, $ec, $ec, $f6, $04, $18, $26
16aa5     37 41 36 2A 
16aa9     18 00 F6 F3 
16aad     F6 F9 FD 04 
16ab1     0E 1D 27 36 | 	byte	$37, $41, $36, $2a, $18, $00, $f6, $f3, $f6, $f9, $fd, $04, $0e, $1d, $27, $36
16ab5     40 44 43 31 
16ab9     27 24 21 24 
16abd     21 26 2C 3A 
16ac1     4F 54 5D 57 | 	byte	$40, $44, $43, $31, $27, $24, $21, $24, $21, $26, $2c, $3a, $4f, $54, $5d, $57
16ac5     4D 36 20 01 
16ac9     E2 D0 C0 BD 
16acd     B9 C3 D0 D4 
16ad1     DA C9 C3 BD | 	byte	$4d, $36, $20, $01, $e2, $d0, $c0, $bd, $b9, $c3, $d0, $d4, $da, $c9, $c3, $bd
16ad5     BD BF C0 C5 
16ad9     C5 D0 D9 D3 
16add     E0 E3 E6 EC 
16ae1     EA DF DF E0 | 	byte	$bd, $bf, $c0, $c5, $c5, $d0, $d9, $d3, $e0, $e3, $e6, $ec, $ea, $df, $df, $e0
16ae5     E6 ED F9 04 
16ae9     0E 07 07 FF 
16aed     F9 EC E0 D9 
16af1     D4 D3 DF E3 | 	byte	$e6, $ed, $f9, $04, $0e, $07, $07, $ff, $f9, $ec, $e0, $d9, $d4, $d3, $df, $e3
16af5     00 14 30 4D 
16af9     64 71 76 5E 
16afd     51 36 27 24 
16b01     20 20 16 13 | 	byte	$00, $14, $30, $4d, $64, $71, $76, $5e, $51, $36, $27, $24, $20, $20, $16, $13
16b05     14 10 13 0D 
16b09     0D 09 00 F6 
16b0d     E8 CA BC B5 
16b11     B3 BD CA DA | 	byte	$14, $10, $13, $0d, $0d, $09, $00, $f6, $e8, $ca, $bc, $b5, $b3, $bd, $ca, $da
16b15     E8 F7 00 07 
16b19     FF F9 ED D4 
16b1d     C5 AF AD AF 
16b21     B3 C6 E2 F7 | 	byte	$e8, $f7, $00, $07, $ff, $f9, $ed, $d4, $c5, $af, $ad, $af, $b3, $c6, $e2, $f7
16b25     00 00 FD F6 
16b29     F0 F2 EC E8 
16b2d     E3 DC D9 D4 
16b31     D3 D0 D3 D6 | 	byte	$00, $00, $fd, $f6, $f0, $f2, $ec, $e8, $e3, $dc, $d9, $d4, $d3, $d0, $d3, $d6
16b35     D3 C9 C0 C3 
16b39     CF E8 FC 13 
16b3d     21 3A 3A 3D 
16b41     43 40 37 24 | 	byte	$d3, $c9, $c0, $c3, $cf, $e8, $fc, $13, $21, $3a, $3a, $3d, $43, $40, $37, $24
16b45     13 FC E0 CC 
16b49     C9 CA D6 E8 
16b4d     F2 04 09 00 
16b51     F3 EA E2 E2 | 	byte	$13, $fc, $e0, $cc, $c9, $ca, $d6, $e8, $f2, $04, $09, $00, $f3, $ea, $e2, $e2
16b55     E6 F0 F6 F6 
16b59     ED E3 E8 E6 
16b5d     EC EC E3 D0 
16b61     C0 AD A9 9D | 	byte	$e6, $f0, $f6, $f6, $ed, $e3, $e8, $e6, $ec, $ec, $e3, $d0, $c0, $ad, $a9, $9d
16b65     9D AC A9 AD 
16b69     B1 B1 B7 C5 
16b6d     C5 BF B7 AC 
16b71     96 80 80 80 | 	byte	$9d, $ac, $a9, $ad, $b1, $b1, $b7, $c5, $c5, $bf, $b7, $ac, $96, $80, $80, $80
16b75     90 A3 BF DA 
16b79     F3 FC FF 00 
16b7d     09 10 18 24 
16b81     21 24 1E 18 | 	byte	$90, $a3, $bf, $da, $f3, $fc, $ff, $00, $09, $10, $18, $24, $21, $24, $1e, $18
16b85     0E FF F9 F0 
16b89     F0 F2 E2 E2 
16b8d     E3 F0 FF 1A 
16b91     2A 36 40 41 | 	byte	$0e, $ff, $f9, $f0, $f0, $f2, $e2, $e2, $e3, $f0, $ff, $1a, $2a, $36, $40, $41
16b95     43 49 49 44 
16b99     2D 20 07 FC 
16b9d     F9 FC 0A 18 
16ba1     26 3B 37 27 | 	byte	$43, $49, $49, $44, $2d, $20, $07, $fc, $f9, $fc, $0a, $18, $26, $3b, $37, $27
16ba5     09 00 ED E3 
16ba9     E2 E8 EA FC 
16bad     01 14 20 27 
16bb1     37 3A 37 2D | 	byte	$09, $00, $ed, $e3, $e2, $e8, $ea, $fc, $01, $14, $20, $27, $37, $3a, $37, $2d
16bb5     1E 13 0D 0E 
16bb9     20 3B 49 63 
16bbd     63 63 5A 59 
16bc1     60 5D 4D 3A | 	byte	$1e, $13, $0d, $0e, $20, $3b, $49, $63, $63, $63, $5a, $59, $60, $5d, $4d, $3a
16bc5     0A EA CF BD 
16bc9     B5 AF B1 BC 
16bcd     C0 C3 C0 C0 
16bd1     C0 C5 C9 D0 | 	byte	$0a, $ea, $cf, $bd, $b5, $af, $b1, $bc, $c0, $c3, $c0, $c0, $c0, $c5, $c9, $d0
16bd5     CF C9 CA CF 
16bd9     D9 D6 DF E0 
16bdd     DF E0 E0 DC 
16be1     E0 DA E0 E8 | 	byte	$cf, $c9, $ca, $cf, $d9, $d6, $df, $e0, $df, $e0, $e0, $dc, $e0, $da, $e0, $e8
16be5     ED FD FC F3 
16be9     F6 F2 F6 FD 
16bed     FD FF F0 E8 
16bf1     E0 DF EA F7 | 	byte	$ed, $fd, $fc, $f3, $f6, $f2, $f6, $fd, $fd, $ff, $f0, $e8, $e0, $df, $ea, $f7
16bf5     09 1A 36 3A 
16bf9     3D 3A 31 31 
16bfd     27 2C 2D 37 
16c01     36 3B 3D 3A | 	byte	$09, $1a, $36, $3a, $3d, $3a, $31, $31, $27, $2c, $2d, $37, $36, $3b, $3d, $3a
16c05     2C 21 16 F9 
16c09     E2 D0 CC C9 
16c0d     CF DF E6 EC 
16c11     ED E8 E0 E6 | 	byte	$2c, $21, $16, $f9, $e2, $d0, $cc, $c9, $cf, $df, $e6, $ec, $ed, $e8, $e0, $e6
16c15     F0 FD 00 01 
16c19     EC DC C9 BC 
16c1d     BF BF D3 E0 
16c21     EC EC E2 E0 | 	byte	$f0, $fd, $00, $01, $ec, $dc, $c9, $bc, $bf, $bf, $d3, $e0, $ec, $ec, $e2, $e0
16c25     D9 D4 D0 DA 
16c29     DC EA EC ED 
16c2d     F0 ED DA D3 
16c31     CC C0 BD BF | 	byte	$d9, $d4, $d0, $da, $dc, $ea, $ec, $ed, $f0, $ed, $da, $d3, $cc, $c0, $bd, $bf
16c35     BF C3 D6 E2 
16c39     F6 F7 FC 03 
16c3d     03 0A 16 20 
16c41     26 24 0D F7 | 	byte	$bf, $c3, $d6, $e2, $f6, $f7, $fc, $03, $03, $0a, $16, $20, $26, $24, $0d, $f7
16c45     E2 D6 D4 D4 
16c49     E2 EC FD 01 
16c4d     FF FF FF FD 
16c51     00 03 0E 18 | 	byte	$e2, $d6, $d4, $d4, $e2, $ec, $fd, $01, $ff, $ff, $ff, $fd, $00, $03, $0e, $18
16c55     21 27 1E 07 
16c59     F2 DA CC CA 
16c5d     C0 C0 BC A7 
16c61     9D 89 92 90 | 	byte	$21, $27, $1e, $07, $f2, $da, $cc, $ca, $c0, $c0, $bc, $a7, $9d, $89, $92, $90
16c65     90 9C 9D A6 
16c69     B1 BF C9 BD 
16c6d     AC 94 89 80 
16c71     80 80 8F 9D | 	byte	$90, $9c, $9d, $a6, $b1, $bf, $c9, $bd, $ac, $94, $89, $80, $80, $80, $8f, $9d
16c75     B3 C6 CC D6 
16c79     F0 F2 00 13 
16c7d     24 31 37 40 
16c81     3A 2C 18 0A | 	byte	$b3, $c6, $cc, $d6, $f0, $f2, $00, $13, $24, $31, $37, $40, $3a, $2c, $18, $0a
16c85     FC E3 DF D3 
16c89     D0 D0 DF EA 
16c8d     01 14 26 3A 
16c91     41 3B 36 37 | 	byte	$fc, $e3, $df, $d3, $d0, $d0, $df, $ea, $01, $14, $26, $3a, $41, $3b, $36, $37
16c95     31 36 2C 1D 
16c99     0A 09 04 09 
16c9d     14 0E 09 FD 
16ca1     EC E2 DF DA | 	byte	$31, $36, $2c, $1d, $0a, $09, $04, $09, $14, $0e, $09, $fd, $ec, $e2, $df, $da
16ca5     E0 E3 F2 04 
16ca9     16 20 31 37 
16cad     36 37 37 37 
16cb1     31 30 27 24 | 	byte	$e0, $e3, $f2, $04, $16, $20, $31, $37, $36, $37, $37, $37, $31, $30, $27, $24
16cb5     26 2A 36 40 
16cb9     4D 54 5A 57 
16cbd     4B 44 49 43 
16cc1     3B 26 07 F0 | 	byte	$26, $2a, $36, $40, $4d, $54, $5a, $57, $4b, $44, $49, $43, $3b, $26, $07, $f0
16cc5     CC B3 A7 A6 
16cc9     A7 A9 A9 AD 
16ccd     B7 C6 D3 CA 
16cd1     CC D3 DC E2 | 	byte	$cc, $b3, $a7, $a6, $a7, $a9, $a9, $ad, $b7, $c6, $d3, $ca, $cc, $d3, $dc, $e2
16cd5     EA E6 E6 DA 
16cd9     DA DA DA E0 
16cdd     E2 DC D4 D4 
16ce1     DA DC E3 EA | 	byte	$ea, $e6, $e6, $da, $da, $da, $da, $e0, $e2, $dc, $d4, $d4, $da, $dc, $e3, $ea
16ce5     EC F0 F0 F9 
16ce9     01 01 03 FC 
16ced     ED E6 E8 E6 
16cf1     FC 09 1E 2D | 	byte	$ec, $f0, $f0, $f9, $01, $01, $03, $fc, $ed, $e6, $e8, $e6, $fc, $09, $1e, $2d
16cf5     27 2D 26 1E 
16cf9     21 1E 2A 34 
16cfd     43 4B 54 4F 
16d01     3D 1E 03 ED | 	byte	$27, $2d, $26, $1e, $21, $1e, $2a, $34, $43, $4b, $54, $4f, $3d, $1e, $03, $ed
16d05     E0 CF CC C9 
16d09     C9 CA DC EA 
16d0d     FF 14 26 2D 
16d11     34 30 34 2D | 	byte	$e0, $cf, $cc, $c9, $c9, $ca, $dc, $ea, $ff, $14, $26, $2d, $34, $30, $34, $2d
16d15     21 07 F7 ED 
16d19     D4 D3 CF CA 
16d1d     CA C0 AF A6 
16d21     AC AF C3 CC | 	byte	$21, $07, $f7, $ed, $d4, $d3, $cf, $ca, $ca, $c0, $af, $a6, $ac, $af, $c3, $cc
16d25     E0 F2 FD 09 
16d29     07 F6 E3 D4 
16d2d     BF BD BC BF 
16d31     C3 CF CA C3 | 	byte	$e0, $f2, $fd, $09, $07, $f6, $e3, $d4, $bf, $bd, $bc, $bf, $c3, $cf, $ca, $c3
16d35     C6 C9 CC D6 
16d39     E3 EA F6 01 
16d3d     10 1E 21 1E 
16d41     14 04 F7 F0 | 	byte	$c6, $c9, $cc, $d6, $e3, $ea, $f6, $01, $10, $1e, $21, $1e, $14, $04, $f7, $f0
16d45     EA ED F6 F6 
16d49     EA EA E8 EC 
16d4d     F2 F7 FF 0A 
16d51     16 26 37 40 | 	byte	$ea, $ed, $f6, $f6, $ea, $ea, $e8, $ec, $f2, $f7, $ff, $0a, $16, $26, $37, $40
16d55     37 27 10 F9 
16d59     E2 D9 C9 AC 
16d5d     94 83 80 80 
16d61     80 80 83 8F | 	byte	$37, $27, $10, $f9, $e2, $d9, $c9, $ac, $94, $83, $80, $80, $80, $80, $83, $8f
16d65     98 92 98 A0 
16d69     A0 96 90 92 
16d6d     83 86 8A 98 
16d71     AD BD C0 D0 | 	byte	$98, $92, $98, $a0, $a0, $96, $90, $92, $83, $86, $8a, $98, $ad, $bd, $c0, $d0
16d75     DA F0 FF 16 
16d79     26 36 43 47 
16d7d     49 40 27 0A 
16d81     F7 E6 D9 D9 | 	byte	$da, $f0, $ff, $16, $26, $36, $43, $47, $49, $40, $27, $0a, $f7, $e6, $d9, $d9
16d85     D9 E3 E2 E8 
16d89     F3 01 0E 1D 
16d8d     16 16 0E 13 
16d91     16 24 2A 20 | 	byte	$d9, $e3, $e2, $e8, $f3, $01, $0e, $1d, $16, $16, $0e, $13, $16, $24, $2a, $20
16d95     27 1E 18 07 
16d99     FC F9 EC E8 
16d9d     CC CF C9 CF 
16da1     DA EA 00 10 | 	byte	$27, $1e, $18, $07, $fc, $f9, $ec, $e8, $cc, $cf, $c9, $cf, $da, $ea, $00, $10
16da5     27 3A 4B 51 
16da9     53 49 47 34 
16dad     34 27 2C 2C 
16db1     1A 1E 14 1A | 	byte	$27, $3a, $4b, $51, $53, $49, $47, $34, $34, $27, $2c, $2c, $1a, $1e, $14, $1a
16db5     26 30 40 54 
16db9     64 6A 71 6A 
16dbd     5A 40 24 04 
16dc1     F0 D3 BD B5 | 	byte	$26, $30, $40, $54, $64, $6a, $71, $6a, $5a, $40, $24, $04, $f0, $d3, $bd, $b5
16dc5     B1 AF A6 A6 
16dc9     A7 A6 A6 A9 
16dcd     B5 BD CC DF 
16dd1     ED F2 F0 E6 | 	byte	$b1, $af, $a6, $a6, $a7, $a6, $a6, $a9, $b5, $bd, $cc, $df, $ed, $f2, $f0, $e6
16dd5     E8 E0 E3 E6 
16dd9     F2 F0 EA EC 
16ddd     E2 E0 E2 E2 
16de1     E3 E3 DF E0 | 	byte	$e8, $e0, $e3, $e6, $f2, $f0, $ea, $ec, $e2, $e0, $e2, $e2, $e3, $e3, $df, $e0
16de5     E2 F2 F9 F9 
16de9     FD FD FF 00 
16ded     01 0A 13 13 
16df1     09 04 07 09 | 	byte	$e2, $f2, $f9, $f9, $fd, $fd, $ff, $00, $01, $0a, $13, $13, $09, $04, $07, $09
16df5     13 1D 2C 3D 
16df9     47 5A 59 4D 
16dfd     37 20 0D F7 
16e01     E6 E2 E3 E2 | 	byte	$13, $1d, $2c, $3d, $47, $5a, $59, $4d, $37, $20, $0d, $f7, $e6, $e2, $e3, $e2
16e05     E2 E3 E2 ED 
16e09     FD 03 16 2A 
16e0d     36 4B 57 6A 
16e11     66 68 4F 34 | 	byte	$e2, $e3, $e2, $ed, $fd, $03, $16, $2a, $36, $4b, $57, $6a, $66, $68, $4f, $34
16e15     14 EA D0 BC 
16e19     AC 98 8F 8F 
16e1d     9C AC BF D6 
16e21     E2 F0 F7 FF | 	byte	$14, $ea, $d0, $bc, $ac, $98, $8f, $8f, $9c, $ac, $bf, $d6, $e2, $f0, $f7, $ff
16e25     FF FF F6 EA 
16e29     DF D4 C5 C9 
16e2d     C5 B7 B7 AF 
16e31     A7 A2 A9 AD | 	byte	$ff, $ff, $f6, $ea, $df, $d4, $c5, $c9, $c5, $b7, $b7, $af, $a7, $a2, $a9, $ad
16e35     BF CF DF F2 
16e39     FC 14 14 24 
16e3d     27 27 1E 1A 
16e41     13 0A 00 F3 | 	byte	$bf, $cf, $df, $f2, $fc, $14, $14, $24, $27, $27, $1e, $1a, $13, $0a, $00, $f3
16e45     DF CF D0 D0 
16e49     D6 E2 F6 03 
16e4d     14 2C 41 4D 
16e51     49 4D 41 36 | 	byte	$df, $cf, $d0, $d0, $d6, $e2, $f6, $03, $14, $2c, $41, $4d, $49, $4d, $41, $36
16e55     18 FC D3 B1 
16e59     94 80 80 80 
16e5d     80 80 80 80 
16e61     80 80 80 80 | 	byte	$18, $fc, $d3, $b1, $94, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
16e65     89 98 9D A2 
16e69     A2 A2 A3 AD 
16e6d     AF B3 B9 C3 
16e71     D4 EC FD 0D | 	byte	$89, $98, $9d, $a2, $a2, $a2, $a3, $ad, $af, $b3, $b9, $c3, $d4, $ec, $fd, $0d
16e75     10 1E 1D 20 
16e79     26 1D 10 0A 
16e7d     00 F7 F2 ED 
16e81     F3 F9 01 04 | 	byte	$10, $1e, $1d, $20, $26, $1d, $10, $0a, $00, $f7, $f2, $ed, $f3, $f9, $01, $04
16e85     01 F7 F7 F0 
16e89     F3 F9 00 04 
16e8d     07 13 13 1D 
16e91     18 10 09 FD | 	byte	$01, $f7, $f7, $f0, $f3, $f9, $00, $04, $07, $13, $13, $1d, $18, $10, $09, $fd
16e95     ED DC D4 BF 
16e99     B9 B7 BC C9 
16e9d     DF F3 00 1D 
16ea1     2C 41 54 60 | 	byte	$ed, $dc, $d4, $bf, $b9, $b7, $bc, $c9, $df, $f3, $00, $1d, $2c, $41, $54, $60
16ea5     60 63 53 43 
16ea9     30 21 1D 18 
16ead     1D 1D 1E 20 
16eb1     21 2C 3B 4D | 	byte	$60, $63, $53, $43, $30, $21, $1d, $18, $1d, $1d, $1e, $20, $21, $2c, $3b, $4d
16eb5     60 6C 6C 6A 
16eb9     60 53 43 24 
16ebd     09 ED DC CF 
16ec1     CA AD 9D 92 | 	byte	$60, $6c, $6c, $6a, $60, $53, $43, $24, $09, $ed, $dc, $cf, $ca, $ad, $9d, $92
16ec5     90 94 96 A2 
16ec9     B3 C5 D6 E2 
16ecd     F0 F9 FD FD 
16ed1     FF FD FF FD | 	byte	$90, $94, $96, $a2, $b3, $c5, $d6, $e2, $f0, $f9, $fd, $fd, $ff, $fd, $ff, $fd
16ed5     F9 F9 FC F0 
16ed9     E2 CC BC B3 
16edd     B1 B7 C6 CF 
16ee1     DC E2 EA F9 | 	byte	$f9, $f9, $fc, $f0, $e2, $cc, $bc, $b3, $b1, $b7, $c6, $cf, $dc, $e2, $ea, $f9
16ee5     04 0E 18 18 
16ee9     10 04 09 FC 
16eed     F9 FC 04 0D 
16ef1     1D 26 36 31 | 	byte	$04, $0e, $18, $18, $10, $04, $09, $fc, $f9, $fc, $04, $0d, $1d, $26, $36, $31
16ef5     31 30 27 20 
16ef9     14 10 04 01 
16efd     FD F3 F7 F7 
16f01     01 01 03 01 | 	byte	$31, $30, $27, $20, $14, $10, $04, $01, $fd, $f3, $f7, $f7, $01, $01, $03, $01
16f05     01 0D 1A 2D 
16f09     4B 51 54 49 
16f0d     41 3A 3B 3B 
16f11     37 36 26 18 | 	byte	$01, $0d, $1a, $2d, $4b, $51, $54, $49, $41, $3a, $3b, $3b, $37, $36, $26, $18
16f15     0A F3 E2 D0 
16f19     CA C3 C5 C5 
16f1d     D3 D9 E3 E6 
16f21     EA EA EC E6 | 	byte	$0a, $f3, $e2, $d0, $ca, $c3, $c5, $c5, $d3, $d9, $e3, $e6, $ea, $ea, $ec, $e6
16f25     E2 CC BD AD 
16f29     A0 A6 A6 A3 
16f2d     A6 A6 A6 A9 
16f31     BC C9 E6 F2 | 	byte	$e2, $cc, $bd, $ad, $a0, $a6, $a6, $a3, $a6, $a6, $a6, $a9, $bc, $c9, $e6, $f2
16f35     FD 03 0D 1D 
16f39     26 36 3B 2D 
16f3d     1A 01 E6 C9 
16f41     B7 B5 B9 C5 | 	byte	$fd, $03, $0d, $1d, $26, $36, $3b, $2d, $1a, $01, $e6, $c9, $b7, $b5, $b9, $c5
16f45     DA EC 03 18 
16f49     2D 3D 4F 49 
16f4d     49 43 3A 36 
16f51     26 14 07 03 | 	byte	$da, $ec, $03, $18, $2d, $3d, $4f, $49, $49, $43, $3a, $36, $26, $14, $07, $03
16f55     F7 DA B5 80 
16f59     80 80 80 80 
16f5d     80 80 80 80 
16f61     80 80 94 A2 | 	byte	$f7, $da, $b5, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $94, $a2
16f65     AF B7 B7 B9 
16f69     B3 B5 B7 CA 
16f6d     D9 E8 F3 F3 
16f71     F7 FC 01 07 | 	byte	$af, $b7, $b7, $b9, $b3, $b5, $b7, $ca, $d9, $e8, $f3, $f3, $f7, $fc, $01, $07
16f75     09 04 0D 0A 
16f79     0D 0E 04 09 
16f7d     09 0A 03 03 
16f81     F7 EA D9 CF | 	byte	$09, $04, $0d, $0a, $0d, $0e, $04, $09, $09, $0a, $03, $03, $f7, $ea, $d9, $cf
16f85     D4 E6 F6 01 
16f89     09 FC F3 F0 
16f8d     F6 F9 00 FF 
16f91     F0 E3 CC BF | 	byte	$d4, $e6, $f6, $01, $09, $fc, $f3, $f0, $f6, $f9, $00, $ff, $f0, $e3, $cc, $bf
16f95     B9 BF C5 DA 
16f99     E8 FF 18 2D 
16f9d     41 57 57 57 
16fa1     4D 40 30 24 | 	byte	$b9, $bf, $c5, $da, $e8, $ff, $18, $2d, $41, $57, $57, $57, $4d, $40, $30, $24
16fa5     1A 10 0E 10 
16fa9     14 21 21 20 
16fad     1E 1E 26 3A 
16fb1     3A 4B 51 4B | 	byte	$1a, $10, $0e, $10, $14, $21, $21, $20, $1e, $1e, $26, $3a, $3a, $4b, $51, $4b
16fb5     44 49 4F 5E 
16fb9     6A 68 4B 1D 
16fbd     F0 B3 9A 89 
16fc1     89 89 8C A2 | 	byte	$44, $49, $4f, $5e, $6a, $68, $4b, $1d, $f0, $b3, $9a, $89, $89, $89, $8c, $a2
16fc5     AD C5 DA F2 
16fc9     F2 F7 FD 00 
16fcd     0E 18 1D 16 
16fd1     0E 07 F3 EA | 	byte	$ad, $c5, $da, $f2, $f2, $f7, $fd, $00, $0e, $18, $1d, $16, $0e, $07, $f3, $ea
16fd5     D6 BD AF A3 
16fd9     A7 B3 C3 DA 
16fdd     E6 E3 DF EC 
16fe1     F9 09 14 13 | 	byte	$d6, $bd, $af, $a3, $a7, $b3, $c3, $da, $e6, $e3, $df, $ec, $f9, $09, $14, $13
16fe5     16 0D FF E8 
16fe9     E3 EC F3 07 
16fed     0E 0E 13 16 
16ff1     18 18 14 13 | 	byte	$16, $0d, $ff, $e8, $e3, $ec, $f3, $07, $0e, $0e, $13, $16, $18, $18, $14, $13
16ff5     0E 0E 13 18 
16ff9     21 24 21 20 
16ffd     20 20 21 21 
17001     18 14 10 18 | 	byte	$0e, $0e, $13, $18, $21, $24, $21, $20, $20, $20, $21, $21, $18, $14, $10, $18
17005     18 1A 1E 14 
17009     09 10 18 2D 
1700d     41 49 44 36 
17011     26 10 03 09 | 	byte	$18, $1a, $1e, $14, $09, $10, $18, $2d, $41, $49, $44, $36, $26, $10, $03, $09
17015     0A 0D 1A 27 
17019     27 26 1E 10 
1701d     00 F6 E6 D0 
17021     C9 C3 B7 B5 | 	byte	$0a, $0d, $1a, $27, $27, $26, $1e, $10, $00, $f6, $e6, $d0, $c9, $c3, $b7, $b5
17025     A7 A3 A0 A2 
17029     A2 A2 A6 A6 
1702d     A7 AF B7 D4 
17031     E2 F0 F3 FC | 	byte	$a7, $a3, $a0, $a2, $a2, $a2, $a6, $a6, $a7, $af, $b7, $d4, $e2, $f0, $f3, $fc
17035     09 1A 1E 20 
17039     1D 0A F6 E2 
1703d     D3 D4 DC DF 
17041     EA F3 F9 0D | 	byte	$09, $1a, $1e, $20, $1d, $0a, $f6, $e2, $d3, $d4, $dc, $df, $ea, $f3, $f9, $0d
17045     1D 2D 2A 30 
17049     27 2C 27 26 
1704d     26 16 14 0E 
17051     07 F2 E3 D4 | 	byte	$1d, $2d, $2a, $30, $27, $2c, $27, $26, $26, $16, $14, $0e, $07, $f2, $e3, $d4
17055     C3 A9 92 80 
17059     80 80 80 80 
1705d     80 80 80 8F 
17061     A2 B5 C3 C6 | 	byte	$c3, $a9, $92, $80, $80, $80, $80, $80, $80, $80, $80, $8f, $a2, $b5, $c3, $c6
17065     C9 B9 B9 B3 
17069     B7 B5 B5 BD 
1706d     C5 D3 E2 F6 
17071     FC 0A 0A 0D | 	byte	$c9, $b9, $b9, $b3, $b7, $b5, $b5, $bd, $c5, $d3, $e2, $f6, $fc, $0a, $0a, $0d
17075     10 14 21 21 
17079     24 1A 18 0A 
1707d     04 F6 E8 DA 
17081     D3 D0 D0 D6 | 	byte	$10, $14, $21, $21, $24, $1a, $18, $0a, $04, $f6, $e8, $da, $d3, $d0, $d0, $d6
17085     D9 D3 CF C3 
17089     C3 CF DA EA 
1708d     ED F0 F2 DC 
17091     D9 D4 DA E3 | 	byte	$d9, $d3, $cf, $c3, $c3, $cf, $da, $ea, $ed, $f0, $f2, $dc, $d9, $d4, $da, $e3
17095     F6 01 14 21 
17099     30 36 36 2D 
1709d     26 20 1E 20 
170a1     27 30 31 3A | 	byte	$f6, $01, $14, $21, $30, $36, $36, $2d, $26, $20, $1e, $20, $27, $30, $31, $3a
170a5     3B 36 2D 26 
170a9     21 16 0E 0D 
170ad     13 18 20 21 
170b1     20 1E 24 31 | 	byte	$3b, $36, $2d, $26, $21, $16, $0e, $0d, $13, $18, $20, $21, $20, $1e, $24, $31
170b5     47 4F 53 51 
170b9     49 2C 10 00 
170bd     E6 D0 BF B1 
170c1     B7 C3 D4 DF | 	byte	$47, $4f, $53, $51, $49, $2c, $10, $00, $e6, $d0, $bf, $b1, $b7, $c3, $d4, $df
170c5     E8 F0 F7 04 
170c9     07 14 18 0D 
170cd     09 F7 ED E0 
170d1     D4 CF CC C9 | 	byte	$e8, $f0, $f7, $04, $07, $14, $18, $0d, $09, $f7, $ed, $e0, $d4, $cf, $cc, $c9
170d5     CA CC D6 DC 
170d9     E3 E3 E3 E3 
170dd     DC E3 ED FC 
170e1     00 07 0E F6 | 	byte	$ca, $cc, $d6, $dc, $e3, $e3, $e3, $e3, $dc, $e3, $ed, $fc, $00, $07, $0e, $f6
170e5     F3 F0 F9 F3 
170e9     F6 F3 F3 F3 
170ed     F6 F6 F7 FC 
170f1     01 0E 1A 2D | 	byte	$f3, $f0, $f9, $f3, $f6, $f3, $f3, $f3, $f6, $f6, $f7, $fc, $01, $0e, $1a, $2d
170f5     43 44 4D 54 
170f9     54 51 4B 3D 
170fd     2D 16 03 ED 
17101     E3 DC E3 F0 | 	byte	$43, $44, $4d, $54, $54, $51, $4b, $3d, $2d, $16, $03, $ed, $e3, $dc, $e3, $f0
17105     F3 F9 04 14 
17109     27 3B 40 40 
1710d     41 2C 21 18 
17111     1D 1E 21 24 | 	byte	$f3, $f9, $04, $14, $27, $3b, $40, $40, $41, $2c, $21, $18, $1d, $1e, $21, $24
17115     27 27 2C 30 
17119     34 2C 2D 21 
1711d     18 07 F7 E2 
17121     CF C5 B9 BD | 	byte	$27, $27, $2c, $30, $34, $2c, $2d, $21, $18, $07, $f7, $e2, $cf, $c5, $b9, $bd
17125     BD BF C0 BC 
17129     B7 AF B5 B9 
1712d     C0 C9 C6 CA 
17131     C6 C9 D3 E3 | 	byte	$bd, $bf, $c0, $bc, $b7, $af, $b5, $b9, $c0, $c9, $c6, $ca, $c6, $c9, $d3, $e3
17135     F0 03 0D 0A 
17139     0D 0D 10 14 
1713d     10 09 01 F9 
17141     F6 ED F7 F6 | 	byte	$f0, $03, $0d, $0a, $0d, $0d, $10, $14, $10, $09, $01, $f9, $f6, $ed, $f7, $f6
17145     F7 00 FF 0E 
17149     10 16 18 0E 
1714d     0E 03 FF F3 
17151     EA DF D3 C6 | 	byte	$f7, $00, $ff, $0e, $10, $16, $18, $0e, $0e, $03, $ff, $f3, $ea, $df, $d3, $c6
17155     C0 BC C6 CA 
17159     C0 B3 9C 8F 
1715d     8A 96 9C B3 
17161     B5 AD A3 98 | 	byte	$c0, $bc, $c6, $ca, $c0, $b3, $9c, $8f, $8a, $96, $9c, $b3, $b5, $ad, $a3, $98
17165     9C A2 AD B5 
17169     BF C0 D3 D9 
1716d     E8 EC FD 03 
17171     04 10 10 16 | 	byte	$9c, $a2, $ad, $b5, $bf, $c0, $d3, $d9, $e8, $ec, $fd, $03, $04, $10, $10, $16
17175     21 21 24 26 
17179     20 13 07 FD 
1717d     ED D0 BC A9 
17181     A3 A0 98 9A | 	byte	$21, $21, $24, $26, $20, $13, $07, $fd, $ed, $d0, $bc, $a9, $a3, $a0, $98, $9a
17185     9C 9A A7 B7 
17189     C6 E3 F0 F3 
1718d     F2 F2 FD 01 
17191     10 18 18 16 | 	byte	$9c, $9a, $a7, $b7, $c6, $e3, $f0, $f3, $f2, $f2, $fd, $01, $10, $18, $18, $16
17195     09 07 07 04 
17199     09 0E 16 20 
1719d     2D 34 43 49 
171a1     47 49 3D 31 | 	byte	$09, $07, $07, $04, $09, $0e, $16, $20, $2d, $34, $43, $49, $47, $49, $3d, $31
171a5     27 20 14 0A 
171a9     01 FC F9 F9 
171ad     F9 00 07 07 
171b1     09 14 24 37 | 	byte	$27, $20, $14, $0a, $01, $fc, $f9, $f9, $f9, $00, $07, $07, $09, $14, $24, $37
171b5     41 49 3B 3A 
171b9     3B 3A 40 44 
171bd     44 37 20 09 
171c1     F0 DA D3 D0 | 	byte	$41, $49, $3b, $3a, $3b, $3a, $40, $44, $44, $37, $20, $09, $f0, $da, $d3, $d0
171c5     D9 DF DF E6 
171c9     E3 EC EC ED 
171cd     ED F6 F6 FC 
171d1     03 FF FF F6 | 	byte	$d9, $df, $df, $e6, $e3, $ec, $ec, $ed, $ed, $f6, $f6, $fc, $03, $ff, $ff, $f6
171d5     ED E3 DA D4 
171d9     D0 CC CA CA 
171dd     D6 E6 EC F6 
171e1     F0 E0 DC DF | 	byte	$ed, $e3, $da, $d4, $d0, $cc, $ca, $ca, $d6, $e6, $ec, $f6, $f0, $e0, $dc, $df
171e5     E3 ED F2 F6 
171e9     F6 EC F0 F2 
171ed     FF 10 21 34 
171f1     41 4F 59 5E | 	byte	$e3, $ed, $f2, $f6, $f6, $ec, $f0, $f2, $ff, $10, $21, $34, $41, $4f, $59, $5e
171f5     60 60 5A 51 
171f9     43 34 24 1D 
171fd     04 F7 E6 DC 
17201     D4 D9 DC E3 | 	byte	$60, $60, $5a, $51, $43, $34, $24, $1d, $04, $f7, $e6, $dc, $d4, $d9, $dc, $e3
17205     F3 00 0D 18 
17209     1A 21 1A 16 
1720d     10 14 20 2A 
17211     31 37 31 2D | 	byte	$f3, $00, $0d, $18, $1a, $21, $1a, $16, $10, $14, $20, $2a, $31, $37, $31, $2d
17215     20 1E 1E 20 
17219     2A 2C 30 37 
1721d     37 3A 36 2C 
17221     1A 00 EC DC | 	byte	$20, $1e, $1e, $20, $2a, $2c, $30, $37, $37, $3a, $36, $2c, $1a, $00, $ec, $dc
17225     CA C3 B7 AC 
17229     9A 92 8C 8A 
1722d     92 A0 AF BD 
17231     CC E3 FC 14 | 	byte	$ca, $c3, $b7, $ac, $9a, $92, $8c, $8a, $92, $a0, $af, $bd, $cc, $e3, $fc, $14
17235     18 1E 21 24 
17239     30 30 26 18 
1723d     04 F3 E0 D6 
17241     CC C9 CC D6 | 	byte	$18, $1e, $21, $24, $30, $30, $26, $18, $04, $f3, $e0, $d6, $cc, $c9, $cc, $d6
17245     E3 EA EA ED 
17249     F6 F6 FD FD 
1724d     FD FF 01 03 
17251     01 FF F2 ED | 	byte	$e3, $ea, $ea, $ed, $f6, $f6, $fd, $fd, $fd, $ff, $01, $03, $01, $ff, $f2, $ed
17255     E8 E6 E2 E3 
17259     E2 DF D9 CA 
1725d     C0 B9 A9 96 
17261     92 94 98 A3 | 	byte	$e8, $e6, $e2, $e3, $e2, $df, $d9, $ca, $c0, $b9, $a9, $96, $92, $94, $98, $a3
17265     AD B9 BF C6 
17269     C9 D6 D6 E8 
1726d     F0 F0 FC 00 
17271     04 0D 14 1D | 	byte	$ad, $b9, $bf, $c6, $c9, $d6, $d6, $e8, $f0, $f0, $fc, $00, $04, $0d, $14, $1d
17275     1A 1D 18 0E 
17279     FD F6 E3 D6 
1727d     BF AC 9D 8F 
17281     8A 8F 98 A0 | 	byte	$1a, $1d, $18, $0e, $fd, $f6, $e3, $d6, $bf, $ac, $9d, $8f, $8a, $8f, $98, $a0
17285     B1 B9 C9 DF 
17289     E8 EA E3 E6 
1728d     E8 E8 F0 F9 
17291     FF 04 0A 0D | 	byte	$b1, $b9, $c9, $df, $e8, $ea, $e3, $e6, $e8, $e8, $f0, $f9, $ff, $04, $0a, $0d
17295     14 16 1A 1D 
17299     20 21 27 34 
1729d     43 40 43 36 
172a1     27 1D 13 10 | 	byte	$14, $16, $1a, $1d, $20, $21, $27, $34, $43, $40, $43, $36, $27, $1d, $13, $10
172a5     09 01 F9 ED 
172a9     E2 DF D0 CF 
172ad     DA E3 F7 09 
172b1     20 37 4F 54 | 	byte	$09, $01, $f9, $ed, $e2, $df, $d0, $cf, $da, $e3, $f7, $09, $20, $37, $4f, $54
172b5     5A 5A 5E 5D 
172b9     53 54 51 49 
172bd     3B 3A 26 1A 
172c1     0A FC EC E0 | 	byte	$5a, $5a, $5e, $5d, $53, $54, $51, $49, $3b, $3a, $26, $1a, $0a, $fc, $ec, $e0
172c5     DC D6 DC E3 
172c9     EC EA EA F2 
172cd     F0 FC 03 07 
172d1     07 F9 EC DC | 	byte	$dc, $d6, $dc, $e3, $ec, $ea, $ea, $f2, $f0, $fc, $03, $07, $07, $f9, $ec, $dc
172d5     D4 D0 CA CA 
172d9     CC CC D4 E2 
172dd     E3 D4 CF C9 
172e1     CA C6 D4 D9 | 	byte	$d4, $d0, $ca, $ca, $cc, $cc, $d4, $e2, $e3, $d4, $cf, $c9, $ca, $c6, $d4, $d9
172e5     E8 FC 03 13 
172e9     1E 21 2A 26 
172ed     30 2D 30 36 
172f1     37 3D 44 40 | 	byte	$e8, $fc, $03, $13, $1e, $21, $2a, $26, $30, $2d, $30, $36, $37, $3d, $44, $40
172f5     43 40 3A 36 
172f9     36 2A 1D 04 
172fd     F0 E2 CC C9 
17301     CF DA EC F7 | 	byte	$43, $40, $3a, $36, $36, $2a, $1d, $04, $f0, $e2, $cc, $c9, $cf, $da, $ec, $f7
17305     F7 FC 0A 0E 
17309     0D 0E 0D 04 
1730d     09 0A 0A 0A 
17311     0D 18 26 34 | 	byte	$f7, $fc, $0a, $0e, $0d, $0e, $0d, $04, $09, $0a, $0a, $0a, $0d, $18, $26, $34
17315     3B 41 44 44 
17319     49 4B 4D 51 
1731d     4F 41 36 2A 
17321     1A 03 F3 E2 | 	byte	$3b, $41, $44, $44, $49, $4b, $4d, $51, $4f, $41, $36, $2a, $1a, $03, $f3, $e2
17325     C9 B1 9D 98 
17329     8C 8F 98 A7 
1732d     B7 C3 D3 DA 
17331     F0 00 00 0A | 	byte	$c9, $b1, $9d, $98, $8c, $8f, $98, $a7, $b7, $c3, $d3, $da, $f0, $00, $00, $0a
17335     10 07 00 F2 
17339     F2 EC F3 F7 
1733d     F9 F9 F3 F0 
17341     E8 D4 CF C9 | 	byte	$10, $07, $00, $f2, $f2, $ec, $f3, $f7, $f9, $f9, $f3, $f0, $e8, $d4, $cf, $c9
17345     C9 CF E0 E6 
17349     F6 00 04 0A 
1734d     14 14 16 0A 
17351     FD ED DC D6 | 	byte	$c9, $cf, $e0, $e6, $f6, $00, $04, $0a, $14, $14, $16, $0a, $fd, $ed, $dc, $d6
17355     D4 D9 DA E6 
17359     EC F6 03 0D 
1735d     04 F7 D4 B1 
17361     92 80 80 80 | 	byte	$d4, $d9, $da, $e6, $ec, $f6, $03, $0d, $04, $f7, $d4, $b1, $92, $80, $80, $80
17365     90 AD C6 E0 
17369     E6 ED ED F2 
1736d     F6 FD 03 09 
17371     0A 0E 0D FF | 	byte	$90, $ad, $c6, $e0, $e6, $ed, $ed, $f2, $f6, $fd, $03, $09, $0a, $0e, $0d, $ff
17375     EC DF D4 D3 
17379     D6 D3 CC C3 
1737d     BC AF AF B5 
17381     BC C3 C6 C3 | 	byte	$ec, $df, $d4, $d3, $d6, $d3, $cc, $c3, $bc, $af, $af, $b5, $bc, $c3, $c6, $c3
17385     C9 CA CF D0 
17389     CA CC C9 C9 
1738d     CF DA F3 01 
17391     1A 21 21 21 | 	byte	$c9, $ca, $cf, $d0, $ca, $cc, $c9, $c9, $cf, $da, $f3, $01, $1a, $21, $21, $21
17395     1D 14 13 13 
17399     13 1E 1D 18 
1739d     14 0A 0D 04 
173a1     09 09 04 03 | 	byte	$1d, $14, $13, $13, $13, $1e, $1d, $18, $14, $0a, $0d, $04, $09, $09, $04, $03
173a5     00 E3 CF BD 
173a9     BC C9 DC FF 
173ad     18 31 4B 66 
173b1     6C 6C 64 4F | 	byte	$00, $e3, $cf, $bd, $bc, $c9, $dc, $ff, $18, $31, $4b, $66, $6c, $6c, $64, $4f
173b5     31 18 0E 09 
173b9     10 1D 2D 40 
173bd     43 44 4F 51 
173c1     4F 51 3A 21 | 	byte	$31, $18, $0e, $09, $10, $1d, $2d, $40, $43, $44, $4f, $51, $4f, $51, $3a, $21
173c5     01 E6 D3 C5 
173c9     C5 CF DC E8 
173cd     EC F6 F3 EA 
173d1     E2 D3 D3 D6 | 	byte	$01, $e6, $d3, $c5, $c5, $cf, $dc, $e8, $ec, $f6, $f3, $ea, $e2, $d3, $d3, $d6
173d5     DC E6 EC EA 
173d9     E0 E0 DF D6 
173dd     D0 D0 C6 C6 
173e1     CC D0 E2 F7 | 	byte	$dc, $e6, $ec, $ea, $e0, $e0, $df, $d6, $d0, $d0, $c6, $c6, $cc, $d0, $e2, $f7
173e5     04 16 18 1D 
173e9     1E 21 24 27 
173ed     2D 30 37 3B 
173f1     3B 3D 40 3B | 	byte	$04, $16, $18, $1d, $1e, $21, $24, $27, $2d, $30, $37, $3b, $3b, $3d, $40, $3b
173f5     34 2C 1A 0A 
173f9     01 F0 E0 D0 
173fd     CC D4 E0 F2 
17401     FF 04 04 10 | 	byte	$34, $2c, $1a, $0a, $01, $f0, $e0, $d0, $cc, $d4, $e0, $f2, $ff, $04, $04, $10
17405     16 16 13 13 
17409     00 ED DF D4 
1740d     DC F2 0A 2A 
17411     40 54 64 6E | 	byte	$16, $16, $13, $13, $00, $ed, $df, $d4, $dc, $f2, $0a, $2a, $40, $54, $64, $6e
17415     6C 6A 5A 4F 
17419     37 2C 1D 14 
1741d     0D 0E 0A 0D 
17421     10 14 0E 03 | 	byte	$6c, $6a, $5a, $4f, $37, $2c, $1d, $14, $0d, $0e, $0a, $0d, $10, $14, $0e, $03
17425     F7 DF C0 B5 
17429     A7 A9 AF BF 
1742d     CC DC ED F2 
17431     F3 EC D6 C9 | 	byte	$f7, $df, $c0, $b5, $a7, $a9, $af, $bf, $cc, $dc, $ed, $f2, $f3, $ec, $d6, $c9
17435     B3 B7 BF D6 
17439     ED FF 09 07 
1743d     00 F9 F3 F6 
17441     F0 E8 EA EC | 	byte	$b3, $b7, $bf, $d6, $ed, $ff, $09, $07, $00, $f9, $f3, $f6, $f0, $e8, $ea, $ec
17445     F0 F3 F6 F6 
17449     F6 F2 F2 F2 
1744d     ED F2 F6 ED 
17451     E3 E0 E8 F2 | 	byte	$f0, $f3, $f6, $f6, $f6, $f2, $f2, $f2, $ed, $f2, $f6, $ed, $e3, $e0, $e8, $f2
17455     FF 0E 1A 24 
17459     30 24 14 01 
1745d     E3 CA A6 90 
17461     84 86 96 A6 | 	byte	$ff, $0e, $1a, $24, $30, $24, $14, $01, $e3, $ca, $a6, $90, $84, $86, $96, $a6
17465     B1 BF CC D9 
17469     EA F7 00 04 
1746d     0D 09 F3 E3 
17471     D6 C5 B9 BF | 	byte	$b1, $bf, $cc, $d9, $ea, $f7, $00, $04, $0d, $09, $f3, $e3, $d6, $c5, $b9, $bf
17475     BF CA D9 DF 
17479     E2 DF CC C3 
1747d     BC C0 C6 D9 
17481     DF E8 E8 E2 | 	byte	$bf, $ca, $d9, $df, $e2, $df, $cc, $c3, $bc, $c0, $c6, $d9, $df, $e8, $e8, $e2
17485     DA D4 C6 BC 
17489     B5 B9 CA DF 
1748d     EC 00 03 01 
17491     04 04 07 0D | 	byte	$da, $d4, $c6, $bc, $b5, $b9, $ca, $df, $ec, $00, $03, $01, $04, $04, $07, $0d
17495     13 09 0A 03 
17499     FD F7 F6 F9 
1749d     FC FF 04 0A 
174a1     FC F3 ED E2 | 	byte	$13, $09, $0a, $03, $fd, $f7, $f6, $f9, $fc, $ff, $04, $0a, $fc, $f3, $ed, $e2
174a5     D6 D6 DF F2 
174a9     0D 27 44 5A 
174ad     66 59 4D 34 
174b1     27 0E FF FC | 	byte	$d6, $d6, $df, $f2, $0d, $27, $44, $5a, $66, $59, $4d, $34, $27, $0e, $ff, $fc
174b5     FC 04 16 31 
174b9     40 49 57 5E 
174bd     74 77 77 68 
174c1     53 3B 24 04 | 	byte	$fc, $04, $16, $31, $40, $49, $57, $5e, $74, $77, $77, $68, $53, $3b, $24, $04
174c5     EC D3 C3 AC 
174c9     AD B3 BD CC 
174cd     DA E6 EA EA 
174d1     F2 F3 F2 F0 | 	byte	$ec, $d3, $c3, $ac, $ad, $b3, $bd, $cc, $da, $e6, $ea, $ea, $f2, $f3, $f2, $f0
174d5     F0 F6 F9 ED 
174d9     EC E6 E8 E2 
174dd     D9 DA D6 D9 
174e1     E0 EC F9 00 | 	byte	$f0, $f6, $f9, $ed, $ec, $e6, $e8, $e2, $d9, $da, $d6, $d9, $e0, $ec, $f9, $00
174e5     0D 14 26 2A 
174e9     34 37 3A 3D 
174ed     3D 3D 36 27 
174f1     18 01 F6 EA | 	byte	$0d, $14, $26, $2a, $34, $37, $3a, $3d, $3d, $3d, $36, $27, $18, $01, $f6, $ea
174f5     DC DA DC DF 
174f9     E0 D6 DF EA 
174fd     FC 07 1A 2A 
17501     3B 3D 34 2C | 	byte	$dc, $da, $dc, $df, $e0, $d6, $df, $ea, $fc, $07, $1a, $2a, $3b, $3d, $34, $2c
17505     10 FD E2 DA 
17509     D9 DA F6 0A 
1750d     21 3B 47 49 
17511     4F 51 49 41 | 	byte	$10, $fd, $e2, $da, $d9, $da, $f6, $0a, $21, $3b, $47, $49, $4f, $51, $49, $41
17515     3A 34 34 2D 
17519     2A 21 16 0D 
1751d     0A 0A 0E 1D 
17521     27 2D 27 1A | 	byte	$3a, $34, $34, $2d, $2a, $21, $16, $0d, $0a, $0a, $0e, $1d, $27, $2d, $27, $1a
17525     04 F3 DF CC 
17529     C6 C9 D4 CF 
1752d     C6 BD BF AF 
17531     AC A7 B5 C5 | 	byte	$04, $f3, $df, $cc, $c6, $c9, $d4, $cf, $c6, $bd, $bf, $af, $ac, $a7, $b5, $c5
17535     DC F2 FC FF 
17539     FD FD FD 03 
1753d     0D 0A 0A 0A 
17541     09 00 F6 EA | 	byte	$dc, $f2, $fc, $ff, $fd, $fd, $fd, $03, $0d, $0a, $0a, $0a, $09, $00, $f6, $ea
17545     D3 C3 C0 BC 
17549     C9 D9 E8 F9 
1754d     F9 FC FC F9 
17551     FF 09 18 2C | 	byte	$d3, $c3, $c0, $bc, $c9, $d9, $e8, $f9, $f9, $fc, $fc, $f9, $ff, $09, $18, $2c
17555     30 2C 18 00 
17559     F0 D9 CC C6 
1755d     C5 C5 CA C5 
17561     CC C6 C0 C9 | 	byte	$30, $2c, $18, $00, $f0, $d9, $cc, $c6, $c5, $c5, $ca, $c5, $cc, $c6, $c0, $c9
17565     D6 EA FC 07 
17569     03 FF F7 EC 
1756d     DA CA B7 A9 
17571     A6 A0 A3 AD | 	byte	$d6, $ea, $fc, $07, $03, $ff, $f7, $ec, $da, $ca, $b7, $a9, $a6, $a0, $a3, $ad
17575     B7 C6 C3 C0 
17579     C6 CA D9 F0 
1757d     F9 00 07 04 
17581     F0 DC D3 CC | 	byte	$b7, $c6, $c3, $c0, $c6, $ca, $d9, $f0, $f9, $00, $07, $04, $f0, $dc, $d3, $cc
17585     CA CF CF CF 
17589     DA DA E2 E2 
1758d     DF E0 DF DF 
17591     E0 E6 EA ED | 	byte	$ca, $cf, $cf, $cf, $da, $da, $e2, $e2, $df, $e0, $df, $df, $e0, $e6, $ea, $ed
17595     F6 F9 03 04 
17599     09 0A FF F3 
1759d     F0 F0 F0 F6 
175a1     F7 FC FC 07 | 	byte	$f6, $f9, $03, $04, $09, $0a, $ff, $f3, $f0, $f0, $f0, $f6, $f7, $fc, $fc, $07
175a5     0E 1A 26 37 
175a9     3B 3B 27 1E 
175ad     1A 09 09 0A 
175b1     0A 0E 1A 20 | 	byte	$0e, $1a, $26, $37, $3b, $3b, $27, $1e, $1a, $09, $09, $0a, $0a, $0e, $1a, $20
175b5     31 40 49 59 
175b9     60 6E 71 6A 
175bd     59 47 37 2A 
175c1     18 07 F3 E0 | 	byte	$31, $40, $49, $59, $60, $6e, $71, $6a, $59, $47, $37, $2a, $18, $07, $f3, $e0
175c5     CA B7 B1 A9 
175c9     BD D9 EC FD 
175cd     FD FD FD 00 
175d1     04 07 09 07 | 	byte	$ca, $b7, $b1, $a9, $bd, $d9, $ec, $fd, $fd, $fd, $fd, $00, $04, $07, $09, $07
175d5     F6 EA DF D9 
175d9     DC DC DA DC 
175dd     DF EA F9 FF 
175e1     0E 1D 1E 2D | 	byte	$f6, $ea, $df, $d9, $dc, $dc, $da, $dc, $df, $ea, $f9, $ff, $0e, $1d, $1e, $2d
175e5     2D 30 34 36 
175e9     3A 37 34 2A 
175ed     13 FD EA CA 
175f1     B9 B1 B7 B5 | 	byte	$2d, $30, $34, $36, $3a, $37, $34, $2a, $13, $fd, $ea, $ca, $b9, $b1, $b7, $b5
175f5     B9 CA D6 E6 
175f9     00 14 24 40 
175fd     57 5D 44 2D 
17601     1A 0E 07 01 | 	byte	$b9, $ca, $d6, $e6, $00, $14, $24, $40, $57, $5d, $44, $2d, $1a, $0e, $07, $01
17605     FC FD FD 01 
17609     09 10 18 1E 
1760d     1D 21 27 2C 
17611     34 36 36 3B | 	byte	$fc, $fd, $fd, $01, $09, $10, $18, $1e, $1d, $21, $27, $2c, $34, $36, $36, $3b
17615     3A 3A 30 21 
17619     16 0E 0A 0D 
1761d     0E 20 1E 20 
17621     20 18 13 14 | 	byte	$3a, $3a, $30, $21, $16, $0e, $0a, $0d, $0e, $20, $1e, $20, $20, $18, $13, $14
17625     0E 04 FD EC 
17629     C9 B9 A2 A3 
1762d     A3 B5 C9 DC 
17631     E0 E8 F0 F0 | 	byte	$0e, $04, $fd, $ec, $c9, $b9, $a2, $a3, $a3, $b5, $c9, $dc, $e0, $e8, $f0, $f0
17635     F3 F7 F7 FD 
17639     03 FF 00 FC 
1763d     FC F9 F2 ED 
17641     E2 DF CF CA | 	byte	$f3, $f7, $f7, $fd, $03, $ff, $00, $fc, $fc, $f9, $f2, $ed, $e2, $df, $cf, $ca
17645     C3 C9 D0 E0 
17649     E6 F0 F6 F6 
1764d     00 0A 18 27 
17651     2D 2A 13 FD | 	byte	$c3, $c9, $d0, $e0, $e6, $f0, $f6, $f6, $00, $0a, $18, $27, $2d, $2a, $13, $fd
17655     E6 DA D3 CF 
17659     CF D0 D3 E3 
1765d     F0 FC FD FD 
17661     FD 00 F3 F2 | 	byte	$e6, $da, $d3, $cf, $cf, $d0, $d3, $e3, $f0, $fc, $fd, $fd, $fd, $00, $f3, $f2
17665     F7 F9 F7 ED 
17669     E2 D0 BD AF 
1766d     98 90 8C 89 
17671     92 A0 AD BC | 	byte	$f7, $f9, $f7, $ed, $e2, $d0, $bd, $af, $98, $90, $8c, $89, $92, $a0, $ad, $bc
17675     CA D9 E6 F2 
17679     FD 04 10 0D 
1767d     F6 E6 D4 CC 
17681     D0 D4 D6 DA | 	byte	$ca, $d9, $e6, $f2, $fd, $04, $10, $0d, $f6, $e6, $d4, $cc, $d0, $d4, $d6, $da
17685     D6 D0 CA BD 
17689     BD B1 AD AF 
1768d     B3 C0 CC E3 
17691     ED F9 0D 1D | 	byte	$d6, $d0, $ca, $bd, $bd, $b1, $ad, $af, $b3, $c0, $cc, $e3, $ed, $f9, $0d, $1d
17695     14 14 0D 04 
17699     00 F6 F6 F3 
1769d     F6 F7 F9 00 
176a1     03 0A 1A 27 | 	byte	$14, $14, $0d, $04, $00, $f6, $f6, $f3, $f6, $f7, $f9, $00, $03, $0a, $1a, $27
176a5     37 3B 31 24 
176a9     13 07 0D 10 
176ad     1A 21 21 24 
176b1     2C 2C 37 40 | 	byte	$37, $3b, $31, $24, $13, $07, $0d, $10, $1a, $21, $21, $24, $2c, $2c, $37, $40
176b5     49 4B 49 41 
176b9     36 30 26 13 
176bd     0A 01 FC FC 
176c1     FC FC F3 F0 | 	byte	$49, $4b, $49, $41, $36, $30, $26, $13, $0a, $01, $fc, $fc, $fc, $fc, $f3, $f0
176c5     F3 F9 ED F3 
176c9     FC FF 03 03 
176cd     04 07 07 00 
176d1     EA DC D3 CC | 	byte	$f3, $f9, $ed, $f3, $fc, $ff, $03, $03, $04, $07, $07, $00, $ea, $dc, $d3, $cc
176d5     D9 E6 F0 FC 
176d9     01 01 07 09 
176dd     0D 13 18 18 
176e1     18 1A 1D 1D | 	byte	$d9, $e6, $f0, $fc, $01, $01, $07, $09, $0d, $13, $18, $18, $18, $1a, $1d, $1d
176e5     20 20 18 0D 
176e9     FD ED D6 C3 
176ed     AD A3 9C A3 
176f1     B3 C5 E3 01 | 	byte	$20, $20, $18, $0d, $fd, $ed, $d6, $c3, $ad, $a3, $9c, $a3, $b3, $c5, $e3, $01
176f5     13 24 3B 4D 
176f9     59 59 51 43 
176fd     31 21 1D 18 
17701     13 0A 09 03 | 	byte	$13, $24, $3b, $4d, $59, $59, $51, $43, $31, $21, $1d, $18, $13, $0a, $09, $03
17705     FD FF 00 07 
17709     16 18 1E 20 
1770d     2A 2A 2D 30 
17711     30 30 26 20 | 	byte	$fd, $ff, $00, $07, $16, $18, $1e, $20, $2a, $2a, $2d, $30, $30, $30, $26, $20
17715     18 10 04 04 
17719     04 07 0A 13 
1771d     14 16 0E 07 
17721     03 04 10 0E | 	byte	$18, $10, $04, $04, $04, $07, $0a, $13, $14, $16, $0e, $07, $03, $04, $10, $0e
17725     10 0E 01 F9 
17729     FF FF FD FD 
1772d     FF FF F9 F3 
17731     F3 F3 F3 EA | 	byte	$10, $0e, $01, $f9, $ff, $ff, $fd, $fd, $ff, $ff, $f9, $f3, $f3, $f3, $f3, $ea
17735     E0 D9 DA DA 
17739     E3 EC F3 F3 
1773d     F6 ED E8 E0 
17741     D3 CF D0 D4 | 	byte	$e0, $d9, $da, $da, $e3, $ec, $f3, $f3, $f6, $ed, $e8, $e0, $d3, $cf, $d0, $d4
17745     DA E3 ED FD 
17749     FD FF 03 04 
1774d     0D 00 F6 E6 
17751     CF BF C0 C6 | 	byte	$da, $e3, $ed, $fd, $fd, $ff, $03, $04, $0d, $00, $f6, $e6, $cf, $bf, $c0, $c6
17755     D6 E8 F2 FF 
17759     07 14 24 30 
1775d     3A 31 24 10 
17761     FD F0 E6 DC | 	byte	$d6, $e8, $f2, $ff, $07, $14, $24, $30, $3a, $31, $24, $10, $fd, $f0, $e6, $dc
17765     D0 B7 A9 9A 
17769     90 84 80 89 
1776d     92 A2 AD C3 
17771     DA F2 F7 F2 | 	byte	$d0, $b7, $a9, $9a, $90, $84, $80, $89, $92, $a2, $ad, $c3, $da, $f2, $f7, $f2
17775     F3 F3 FC EA 
17779     E6 E0 D3 C9 
1777d     CC CC D3 D4 
17781     D4 C5 B3 A3 | 	byte	$f3, $f3, $fc, $ea, $e6, $e0, $d3, $c9, $cc, $cc, $d3, $d4, $d4, $c5, $b3, $a3
17785     94 9A A0 AC 
17789     B3 C5 D3 E6 
1778d     FC 03 16 14 
17791     1A 18 13 07 | 	byte	$94, $9a, $a0, $ac, $b3, $c5, $d3, $e6, $fc, $03, $16, $14, $1a, $18, $13, $07
17795     FD ED DF D6 
17799     D6 DC ED FC 
1779d     0D 16 1D 2A 
177a1     2D 26 24 1E | 	byte	$fd, $ed, $df, $d6, $d6, $dc, $ed, $fc, $0d, $16, $1d, $2a, $2d, $26, $24, $1e
177a5     16 0A 0E 16 
177a9     26 2C 37 37 
177ad     2A 27 24 27 
177b1     2C 27 20 13 | 	byte	$16, $0a, $0e, $16, $26, $2c, $37, $37, $2a, $27, $24, $27, $2c, $27, $20, $13
177b5     03 00 F9 FF 
177b9     01 09 0E 14 
177bd     1D 21 27 27 
177c1     34 30 27 20 | 	byte	$03, $00, $f9, $ff, $01, $09, $0e, $14, $1d, $21, $27, $27, $34, $30, $27, $20
177c5     20 1D 14 0D 
177c9     01 F9 F2 DF 
177cd     D9 D4 D4 DF 
177d1     E6 F7 09 14 | 	byte	$20, $1d, $14, $0d, $01, $f9, $f2, $df, $d9, $d4, $d4, $df, $e6, $f7, $09, $14
177d5     1A 16 0D 00 
177d9     FF 00 07 09 
177dd     0D 0D 07 04 
177e1     00 00 F9 F2 | 	byte	$1a, $16, $0d, $00, $ff, $00, $07, $09, $0d, $0d, $07, $04, $00, $00, $f9, $f2
177e5     E3 CF C0 B1 
177e9     A7 A2 A9 B1 
177ed     C0 E0 04 24 
177f1     36 3D 43 4F | 	byte	$e3, $cf, $c0, $b1, $a7, $a2, $a9, $b1, $c0, $e0, $04, $24, $36, $3d, $43, $4f
177f5     4F 40 40 3B 
177f9     34 24 1D 14 
177fd     16 1A 18 13 
17801     0E 09 03 0E | 	byte	$4f, $40, $40, $3b, $34, $24, $1d, $14, $16, $1a, $18, $13, $0e, $09, $03, $0e
17805     14 1D 1E 1E 
17809     1E 1D 1D 21 
1780d     24 24 24 1E 
17811     1A 13 07 FD | 	byte	$14, $1d, $1e, $1e, $1e, $1d, $1d, $21, $24, $24, $24, $1e, $1a, $13, $07, $fd
17815     F7 ED E8 E3 
17819     EA F6 FC 01 
1781d     03 09 09 07 
17821     10 18 21 31 | 	byte	$f7, $ed, $e8, $e3, $ea, $f6, $fc, $01, $03, $09, $09, $07, $10, $18, $21, $31
17825     3D 54 64 70 
17829     6C 59 37 16 
1782d     F7 E6 DC D4 
17831     C6 C5 C9 CC | 	byte	$3d, $54, $64, $70, $6c, $59, $37, $16, $f7, $e6, $dc, $d4, $c6, $c5, $c9, $cc
17835     D9 E6 F3 F9 
17839     FC F2 EC E3 
1783d     D6 D3 CF D0 
17841     CC D0 E2 F2 | 	byte	$d9, $e6, $f3, $f9, $fc, $f2, $ec, $e3, $d6, $d3, $cf, $d0, $cc, $d0, $e2, $f2
17845     FD 00 FD F9 
17849     EA D3 C5 BD 
1784d     C0 C3 CC DC 
17851     F3 07 1E 2D | 	byte	$fd, $00, $fd, $f9, $ea, $d3, $c5, $bd, $c0, $c3, $cc, $dc, $f3, $07, $1e, $2d
17855     26 27 27 31 
17859     36 40 40 3A 
1785d     26 03 E6 CA 
17861     B1 A7 9A 9A | 	byte	$26, $27, $27, $31, $36, $40, $40, $3a, $26, $03, $e6, $ca, $b1, $a7, $9a, $9a
17865     98 9A A0 A6 
17869     B1 B5 B9 C0 
1786d     D0 E0 E3 EC 
17871     EA E3 DA C9 | 	byte	$98, $9a, $a0, $a6, $b1, $b5, $b9, $c0, $d0, $e0, $e3, $ec, $ea, $e3, $da, $c9
17875     CA CC CC D0 
17879     C9 CC CC C5 
1787d     C0 B9 A7 9A 
17881     90 94 9A B1 | 	byte	$ca, $cc, $cc, $d0, $c9, $cc, $cc, $c5, $c0, $b9, $a7, $9a, $90, $94, $9a, $b1
17885     BD CF D3 E3 
17889     F0 FF 0D 16 
1788d     16 16 09 FF 
17891     F0 E6 DA D0 | 	byte	$bd, $cf, $d3, $e3, $f0, $ff, $0d, $16, $16, $16, $09, $ff, $f0, $e6, $da, $d0
17895     C6 CF DA F3 
17899     09 1A 24 2A 
1789d     18 07 00 FF 
178a1     03 0E 14 1D | 	byte	$c6, $cf, $da, $f3, $09, $1a, $24, $2a, $18, $07, $00, $ff, $03, $0e, $14, $1d
178a5     2A 3A 44 44 
178a9     3D 31 20 16 
178ad     0D FC ED E8 
178b1     E2 DF E2 ED | 	byte	$2a, $3a, $44, $44, $3d, $31, $20, $16, $0d, $fc, $ed, $e8, $e2, $df, $e2, $ed
178b5     FD 14 26 31 
178b9     31 3A 41 47 
178bd     4D 47 43 43 
178c1     40 3A 36 24 | 	byte	$fd, $14, $26, $31, $31, $3a, $41, $47, $4d, $47, $43, $43, $40, $3a, $36, $24
178c5     14 03 E8 D6 
178c9     D0 DC ED FF 
178cd     0E 1E 20 26 
178d1     2D 2A 1E 0D | 	byte	$14, $03, $e8, $d6, $d0, $dc, $ed, $ff, $0e, $1e, $20, $26, $2d, $2a, $1e, $0d
178d5     01 F3 F2 F0 
178d9     F0 ED EC E0 
178dd     D9 D0 C6 C0 
178e1     BD BC B5 B9 | 	byte	$01, $f3, $f2, $f0, $f0, $ed, $ec, $e0, $d9, $d0, $c6, $c0, $bd, $bc, $b5, $b9
178e5     BC BF CF D4 
178e9     E6 F7 04 16 
178ed     30 40 4B 4B 
178f1     34 21 1D 16 | 	byte	$bc, $bf, $cf, $d4, $e6, $f7, $04, $16, $30, $40, $4b, $4b, $34, $21, $1d, $16
178f5     1E 21 2C 2C 
178f9     2C 2D 2D 36 
178fd     31 26 20 13 
17901     0D 0E 0D 0A | 	byte	$1e, $21, $2c, $2c, $2c, $2d, $2d, $36, $31, $26, $20, $13, $0d, $0e, $0d, $0a
17905     0A 09 09 0A 
17909     0D 14 1D 1D 
1790d     1D 18 0E 03 
17911     FD E2 D4 CF | 	byte	$0a, $09, $09, $0a, $0d, $14, $1d, $1d, $1d, $18, $0e, $03, $fd, $e2, $d4, $cf
17915     D0 D4 E6 F9 
17919     03 0E 0A 03 
1791d     F9 04 1E 3D 
17921     57 6C 74 7F | 	byte	$d0, $d4, $e6, $f9, $03, $0e, $0a, $03, $f9, $04, $1e, $3d, $57, $6c, $74, $7f
17925     7F 7F 77 68 
17929     57 41 26 0D 
1792d     FC E8 DA D0 
17931     C9 CF D4 DF | 	byte	$7f, $7f, $77, $68, $57, $41, $26, $0d, $fc, $e8, $da, $d0, $c9, $cf, $d4, $df
17935     E3 EC EC EC 
17939     EA EA E3 D6 
1793d     D6 CF D0 D4 
17941     DA E3 E6 DA | 	byte	$e3, $ec, $ec, $ec, $ea, $ea, $e3, $d6, $d6, $cf, $d0, $d4, $da, $e3, $e6, $da
17945     C9 A9 A6 A9 
17949     B7 D9 F2 09 
1794d     1D 34 36 3D 
17951     43 43 3D 30 | 	byte	$c9, $a9, $a6, $a9, $b7, $d9, $f2, $09, $1d, $34, $36, $3d, $43, $43, $3d, $30
17955     27 18 16 0E 
17959     03 00 FC ED 
1795d     E3 DA CC C5 
17961     C0 BD BD C5 | 	byte	$27, $18, $16, $0e, $03, $00, $fc, $ed, $e3, $da, $cc, $c5, $c0, $bd, $bd, $c5
17965     CA C6 C0 BD 
17969     C3 C3 C6 CA 
1796d     D4 D0 C6 B1 
17971     A6 A7 B3 BF | 	byte	$ca, $c6, $c0, $bd, $c3, $c3, $c6, $ca, $d4, $d0, $c6, $b1, $a6, $a7, $b3, $bf
17975     CA CA C6 C0 
17979     BF BC B9 B5 
1797d     AC A6 A9 AD 
17981     AD B7 C3 CF | 	byte	$ca, $ca, $c6, $c0, $bf, $bc, $b9, $b5, $ac, $a6, $a9, $ad, $ad, $b7, $c3, $cf
17985     DC DF E6 EA 
17989     ED F9 FF 00 
1798d     03 04 03 F6 
17991     EC E8 E2 E6 | 	byte	$dc, $df, $e6, $ea, $ed, $f9, $ff, $00, $03, $04, $03, $f6, $ec, $e8, $e2, $e6
17995     F0 FC 03 04 
17999     FF ED DA DC 
1799d     E8 FD 13 27 
179a1     3A 47 4D 51 | 	byte	$f0, $fc, $03, $04, $ff, $ed, $da, $dc, $e8, $fd, $13, $27, $3a, $47, $4d, $51
179a5     4F 41 30 13 
179a9     FC E0 CF CC 
179ad     CA CC D6 DC 
179b1     EC 00 0A 1A | 	byte	$4f, $41, $30, $13, $fc, $e0, $cf, $cc, $ca, $cc, $d6, $dc, $ec, $00, $0a, $1a
179b5     2A 36 49 54 
179b9     5A 54 47 3D 
179bd     3A 34 36 40 
179c1     44 4B 40 1E | 	byte	$2a, $36, $49, $54, $5a, $54, $47, $3d, $3a, $34, $36, $40, $44, $4b, $40, $1e
179c5     04 FC F7 03 
179c9     16 26 31 36 
179cd     36 37 31 24 
179d1     16 FF F0 E2 | 	byte	$04, $fc, $f7, $03, $16, $26, $31, $36, $36, $37, $31, $24, $16, $ff, $f0, $e2
179d5     DA CF CC CC 
179d9     BC A9 9C 90 
179dd     90 94 A7 BC 
179e1     D6 ED 01 10 | 	byte	$da, $cf, $cc, $cc, $bc, $a9, $9c, $90, $90, $94, $a7, $bc, $d6, $ed, $01, $10
179e5     0E 13 10 10 
179e9     0E 13 18 20 
179ed     1D 04 FD FF 
179f1     01 1D 34 41 | 	byte	$0e, $13, $10, $10, $0e, $13, $18, $20, $1d, $04, $fd, $ff, $01, $1d, $34, $41
179f5     51 53 54 57 
179f9     57 44 31 1D 
179fd     04 F7 F0 ED 
17a01     F0 F0 F2 F3 | 	byte	$51, $53, $54, $57, $57, $44, $31, $1d, $04, $f7, $f0, $ed, $f0, $f0, $f2, $f3
17a05     F3 F6 F7 00 
17a09     04 10 14 10 
17a0d     10 03 F3 E3 
17a11     DF DC DC E8 | 	byte	$f3, $f6, $f7, $00, $04, $10, $14, $10, $10, $03, $f3, $e3, $df, $dc, $dc, $e8
17a15     F9 0A 0E 03 
17a19     F9 F9 FF 16 
17a1d     36 4F 64 76 
17a21     7F 7F 7F 7F | 	byte	$f9, $0a, $0e, $03, $f9, $f9, $ff, $16, $36, $4f, $64, $76, $7f, $7f, $7f, $7f
17a25     7F 7C 66 4D 
17a29     3A 2C 24 24 
17a2d     13 00 F0 E0 
17a31     D0 CA C6 D0 | 	byte	$7f, $7c, $66, $4d, $3a, $2c, $24, $24, $13, $00, $f0, $e0, $d0, $ca, $c6, $d0
17a35     D9 E0 ED F3 
17a39     ED EA E0 D4 
17a3d     C9 B5 AF B5 
17a41     B1 A2 A0 A2 | 	byte	$d9, $e0, $ed, $f3, $ed, $ea, $e0, $d4, $c9, $b5, $af, $b5, $b1, $a2, $a0, $a2
17a45     B3 D6 F9 1E 
17a49     36 43 47 4D 
17a4d     4B 49 3B 2D 
17a51     18 09 FC F7 | 	byte	$b3, $d6, $f9, $1e, $36, $43, $47, $4d, $4b, $49, $3b, $2d, $18, $09, $fc, $f7
17a55     FC FD FF FF 
17a59     F6 F2 F3 F3 
17a5d     F9 01 01 FF 
17a61     FC ED E2 D6 | 	byte	$fc, $fd, $ff, $ff, $f6, $f2, $f3, $f3, $f9, $01, $01, $ff, $fc, $ed, $e2, $d6
17a65     CF C9 B7 AC 
17a69     A6 A7 AC 9D 
17a6d     94 8C 8A 94 
17a71     9D AF B9 C0 | 	byte	$cf, $c9, $b7, $ac, $a6, $a7, $ac, $9d, $94, $8c, $8a, $94, $9d, $af, $b9, $c0
17a75     C9 D0 DA DF 
17a79     E3 E3 CF BF 
17a7d     AF A0 9A A2 
17a81     A6 AD B1 B7 | 	byte	$c9, $d0, $da, $df, $e3, $e3, $cf, $bf, $af, $a0, $9a, $a2, $a6, $ad, $b1, $b7
17a85     C3 D3 DC ED 
17a89     FC 0A 18 20 
17a8d     1D 16 09 FC 
17a91     EC DA D0 CC | 	byte	$c3, $d3, $dc, $ed, $fc, $0a, $18, $20, $1d, $16, $09, $fc, $ec, $da, $d0, $cc
17a95     D4 D4 CF CC 
17a99     C9 DC F0 07 
17a9d     1E 36 47 43 
17aa1     4D 43 37 2C | 	byte	$d4, $d4, $cf, $cc, $c9, $dc, $f0, $07, $1e, $36, $47, $43, $4d, $43, $37, $2c
17aa5     13 F9 DF D3 
17aa9     CC D4 E2 F0 
17aad     F0 F0 F2 F2 
17ab1     F3 FF 0D 21 | 	byte	$13, $f9, $df, $d3, $cc, $d4, $e2, $f0, $f0, $f0, $f2, $f2, $f3, $ff, $0d, $21
17ab5     34 47 4F 57 
17ab9     5D 57 4D 41 
17abd     40 40 41 43 
17ac1     3A 34 30 30 | 	byte	$34, $47, $4f, $57, $5d, $57, $4d, $41, $40, $40, $41, $43, $3a, $34, $30, $30
17ac5     31 3A 3B 3D 
17ac9     40 37 37 30 
17acd     24 16 04 EC 
17ad1     DA C5 BC B3 | 	byte	$31, $3a, $3b, $3d, $40, $37, $37, $30, $24, $16, $04, $ec, $da, $c5, $bc, $b3
17ad5     AF B1 A2 9D 
17ad9     98 9A A6 B9 
17add     D3 F7 04 16 
17ae1     1E 1A 1A 10 | 	byte	$af, $b1, $a2, $9d, $98, $9a, $a6, $b9, $d3, $f7, $04, $16, $1e, $1a, $1a, $10
17ae5     04 F9 F2 F0 
17ae9     F6 FC F7 F9 
17aed     F7 FC 0A 27 
17af1     40 54 66 66 | 	byte	$04, $f9, $f2, $f0, $f6, $fc, $f7, $f9, $f7, $fc, $0a, $27, $40, $54, $66, $66
17af5     60 57 47 36 
17af9     26 10 FF EA 
17afd     DF DC D6 DC 
17b01     DA DA DA DF | 	byte	$60, $57, $47, $36, $26, $10, $ff, $ea, $df, $dc, $d6, $dc, $da, $da, $da, $df
17b05     E3 E6 ED 00 
17b09     00 F4 E0 C7 
17b0d     F0 DF 5F 40 
17b11     FF 30 D7 F2 | 	byte	$e3, $e6, $ed, $00, $00, $f4, $e0, $c7, $f0, $df, $5f, $40, $ff, $30, $d7, $f2
17b15     1F 7F 00 DF 
17b19     7F 20 E0 BF 
17b1d     3F 40 0B 10 
17b21     00 F4 EA E5 | 	byte	$1f, $7f, $00, $df, $7f, $20, $e0, $bf, $3f, $40, $0b, $10, $00, $f4, $ea, $e5
17b25     E2 DA D5 D3 
17b29     DF F9 E8 C8 
17b2d     AF CA CB D5 
17b31     E3 F7 05 13 | 	byte	$e2, $da, $d5, $d3, $df, $f9, $e8, $c8, $af, $ca, $cb, $d5, $e3, $f7, $05, $13
17b35     21 20 19 33 
17b39     4B 7F 7F 60 
17b3d     2A 3F 40 4F 
17b41     70 20 F7 04 | 	byte	$21, $20, $19, $33, $4b, $7f, $7f, $60, $2a, $3f, $40, $4f, $70, $20, $f7, $04
17b45     A0 DF 00 EA 
17b49     D0 AF FF 00 
17b4d     80 83 DF D8 
17b51     BA B0 AF BF | 	byte	$a0, $df, $00, $ea, $d0, $af, $ff, $00, $80, $83, $df, $d8, $ba, $b0, $af, $bf
17b55     EF 1A 1C 08 
17b59     0B 10 03 1B 
17b5d     3F 70 40 28 
17b61     27 57 40 2B | 	byte	$ef, $1a, $1c, $08, $0b, $10, $03, $1b, $3f, $70, $40, $28, $27, $57, $40, $2b
17b65     47 34 00 CD 
17b69     EF 2A 08 C0 
17b6d     97 BF C0 CF 
17b71     FF D0 90 BF | 	byte	$47, $34, $00, $cd, $ef, $2a, $08, $c0, $97, $bf, $c0, $cf, $ff, $d0, $90, $bf
17b75     F8 C5 DF 17 
17b79     04 07 F0 D7 
17b7d     FF 0F 5F 7F 
17b81     10 BF FF 10 | 	byte	$f8, $c5, $df, $17, $04, $07, $f0, $d7, $ff, $0f, $5f, $7f, $10, $bf, $ff, $10
17b85     F0 FF 6F 60 
17b89     E0 FF 40 1F 
17b8d     3C 20 18 1A 
17b91     08 E0 DF 09 | 	byte	$f0, $ff, $6f, $60, $e0, $ff, $40, $1f, $3c, $20, $18, $1a, $08, $e0, $df, $09
17b95     00 E0 B4 C5 
17b99     B0 AF EB D8 
17b9d     E7 FC FA 07 
17ba1     11 17 25 37 | 	byte	$00, $e0, $b4, $c5, $b0, $af, $eb, $d8, $e7, $fc, $fa, $07, $11, $17, $25, $37
17ba5     3C 43 54 40 
17ba9     10 0F 00 E7 
17bad     13 00 FF 00 
17bb1     C0 80 80 DF | 	byte	$3c, $43, $54, $40, $10, $0f, $00, $e7, $13, $00, $ff, $00, $c0, $80, $80, $df
17bb5     14 00 E8 B0 
17bb9     A9 B7 DB F7 
17bbd     16 00 E0 C0 
17bc1     A9 A8 95 DF | 	byte	$14, $00, $e8, $b0, $a9, $b7, $db, $f7, $16, $00, $e0, $c0, $a9, $a8, $95, $df
17bc5     29 35 20 E0 
17bc9     D7 FF 4F 7C 
17bcd     5A 60 40 00 
17bd1     DF FF 28 1F | 	byte	$29, $35, $20, $e0, $d7, $ff, $4f, $7c, $5a, $60, $40, $00, $df, $ff, $28, $1f
17bd5     37 2F 28 00 
17bd9     F0 D0 DF 0C 
17bdd     E0 C4 CF E0 
17be1     DF FF 0E 04 | 	byte	$37, $2f, $28, $00, $f0, $d0, $df, $0c, $e0, $c4, $cf, $e0, $df, $ff, $0e, $04
17be5     E0 D7 FF 3F 
17be9     38 4B 40 2D 
17bed     34 10 0F 04 
17bf1     F0 D0 BB FF | 	byte	$e0, $d7, $ff, $3f, $38, $4b, $40, $2d, $34, $10, $0f, $04, $f0, $d0, $bb, $ff
17bf5     E0 80 81 BF 
17bf9     A0 BF 37 00 
17bfd     95 BF EF 28 
17c01     E0 F4 DF 2F | 	byte	$e0, $80, $81, $bf, $a0, $bf, $37, $00, $95, $bf, $ef, $28, $e0, $f4, $df, $2f
17c05     2B 20 FB 02 
17c09     E4 EB 1B 08 
17c0d     FF 24 19 19 
17c11     35 30 13 28 | 	byte	$2b, $20, $fb, $02, $e4, $eb, $1b, $08, $ff, $24, $19, $19, $35, $30, $13, $28
17c15     F0 2F 60 A0 
17c19     FF 20 A0 B7 
17c1d     DF E8 A4 AF 
17c21     BF FF 2A 20 | 	byte	$f0, $2f, $60, $a0, $ff, $20, $a0, $b7, $df, $e8, $a4, $af, $bf, $ff, $2a, $20
17c25     18 02 1F 20 
17c29     00 EF 35 10 
17c2d     09 E8 B4 B7 
17c31     DF 4F 28 3F | 	byte	$18, $02, $1f, $20, $00, $ef, $35, $10, $09, $e8, $b4, $b7, $df, $4f, $28, $3f
17c35     40 DB 1F 30 
17c39     3F 7D 70 20 
17c3d     0F 20 F7 2F 
17c41     00 BB FF 3A | 	byte	$40, $db, $1f, $30, $3f, $7d, $70, $20, $0f, $20, $f7, $2f, $00, $bb, $ff, $3a
17c45     00 B7 FE D0 
17c49     EF 0F 04 1F 
17c4d     20 D3 F3 E0 
17c51     F3 FC E8 EB | 	byte	$00, $b7, $fe, $d0, $ef, $0f, $04, $1f, $20, $d3, $f3, $e0, $f3, $fc, $e8, $eb
17c55     02 FF 3B 20 
17c59     E0 C8 CF 17 
17c5d     14 10 08 11 
17c61     00 DF E4 C8 | 	byte	$02, $ff, $3b, $20, $e0, $c8, $cf, $17, $14, $10, $08, $11, $00, $df, $e4, $c8
17c65     C7 D8 A7 FF 
17c69     E0 DF 20 E0 
17c6d     EF 40 E0 BF 
17c71     27 00 E7 FB | 	byte	$c7, $d8, $a7, $ff, $e0, $df, $20, $e0, $ef, $40, $e0, $bf, $27, $00, $e7, $fb
17c75     1F 14 1F 7F 
17c79     10 FF 7F 60 
17c7d     2F 60 2B 47 
17c81     45 40 2C 10 | 	byte	$1f, $14, $1f, $7f, $10, $ff, $7f, $60, $2f, $60, $2b, $47, $45, $40, $2c, $10
17c85     F0 E0 BC AE 
17c89     C7 DF E8 C4 
17c8d     A0 9F F7 4F 
17c91     52 72 20 8B | 	byte	$f0, $e0, $bc, $ae, $c7, $df, $e8, $c4, $a0, $9f, $f7, $4f, $52, $72, $20, $8b
17c95     FF 7F 20 12 
17c99     D0 EF 30 E0 
17c9d     BF 3F 20 80 
17ca1     9F 1F 28 08 | 	byte	$ff, $7f, $20, $12, $d0, $ef, $30, $e0, $bf, $3f, $20, $80, $9f, $1f, $28, $08
17ca5     CC FF 10 C0 
17ca9     CF 14 F0 CC 
17cad     C2 CF C0 9B 
17cb1     D7 D8 BF 1F | 	byte	$cc, $ff, $10, $c0, $cf, $14, $f0, $cc, $c2, $cf, $c0, $9b, $d7, $d8, $bf, $1f
17cb5     20 D4 CB FF 
17cb9     60 00 3F 60 
17cbd     01 00 0D 00 
17cc1     D4 EF 10 F3 | 	byte	$20, $d4, $cb, $ff, $60, $00, $3f, $60, $01, $00, $0d, $00, $d4, $ef, $10, $f3
17cc5     1F 20 0F 3F 
17cc9     20 FF 10 BB 
17ccd     EF 17 20 E8 
17cd1     B0 88 80 9F | 	byte	$1f, $20, $0f, $3f, $20, $ff, $10, $bb, $ef, $17, $20, $e8, $b0, $88, $80, $9f
17cd5     E8 E2 E7 EC 
17cd9     C8 EF 1F 6F 
17cdd     50 E0 C7 17 
17ce1     20 FF 27 2A | 	byte	$e8, $e2, $e7, $ec, $c8, $ef, $1f, $6f, $50, $e0, $c7, $17, $20, $ff, $27, $2a
17ce5     1F 30 E4 FF 
17ce9     5F 50 00 2F 
17ced     7F 40 06 00 
17cf1     C8 FF 40 DF | 	byte	$1f, $30, $e4, $ff, $5f, $50, $00, $2f, $7f, $40, $06, $00, $c8, $ff, $40, $df
17cf5     3F 00 9F FF 
17cf9     08 0A F0 B7 
17cfd     1F 00 FF 6E 
17d01     00 FF 40 F7 | 	byte	$3f, $00, $9f, $ff, $08, $0a, $f0, $b7, $1f, $00, $ff, $6e, $00, $ff, $40, $f7
17d05     2C E0 BF 14 
17d09     F0 F7 10 90 
17d0d     9F 3F 40 10 
17d11     F0 DF 0F 2F | 	byte	$2c, $e0, $bf, $14, $f0, $f7, $10, $90, $9f, $3f, $40, $10, $f0, $df, $0f, $2f
17d15     2A 2F 08 DE 
17d19     D4 DF 17 3F 
17d1d     00 BF FF 00 
17d21     BB FF 60 E0 | 	byte	$2a, $2f, $08, $de, $d4, $df, $17, $3f, $00, $bf, $ff, $00, $bb, $ff, $60, $e0
17d25     FF 10 F3 E0 
17d29     BF 00 80 BF 
17d2d     18 D8 CC B4 
17d31     8A B7 C0 FF | 	byte	$ff, $10, $f3, $e0, $bf, $00, $80, $bf, $18, $d8, $cc, $b4, $8a, $b7, $c0, $ff
17d35     20 9F FF E0 
17d39     BF FF 30 D4 
17d3d     FF 50 00 EF 
17d41     E0 CF 2F 30 | 	byte	$20, $9f, $ff, $e0, $bf, $ff, $30, $d4, $ff, $50, $00, $ef, $e0, $cf, $2f, $30
17d45     08 F0 EB 00 
17d49     C9 2F 20 9F 
17d4d     3F 20 C7 FA 
17d51     D0 EB 05 00 | 	byte	$08, $f0, $eb, $00, $c9, $2f, $20, $9f, $3f, $20, $c7, $fa, $d0, $eb, $05, $00
17d55     B9 FF 58 00 
17d59     B7 F7 33 3B 
17d5d     54 10 EA EF 
17d61     08 F0 17 1F | 	byte	$b9, $ff, $58, $00, $b7, $f7, $33, $3b, $54, $10, $ea, $ef, $08, $f0, $17, $1f
17d65     20 0F 4F 08 
17d69     FF 30 17 3F 
17d6d     20 1F 40 E0 
17d71     FF 00 AF 3A | 	byte	$20, $0f, $4f, $08, $ff, $30, $17, $3f, $20, $1f, $40, $e0, $ff, $00, $af, $3a
17d75     00 B0 8B BF 
17d79     10 00 E9 E0 
17d7d     C4 D7 FF 54 
17d81     30 23 10 0F | 	byte	$00, $b0, $8b, $bf, $10, $00, $e9, $e0, $c4, $d7, $ff, $54, $30, $23, $10, $0f
17d85     10 00 FF 2F 
17d89     6F 68 20 FF 
17d8d     4F 60 13 3E 
17d91     10 FF 20 00 | 	byte	$10, $00, $ff, $2f, $6f, $68, $20, $ff, $4f, $60, $13, $3e, $10, $ff, $20, $00
17d95     F6 1B 28 D0 
17d99     B7 E4 C7 F7 
17d9d     D0 BF F9 E2 
17da1     FF 24 14 00 | 	byte	$f6, $1b, $28, $d0, $b7, $e4, $c7, $f7, $d0, $bf, $f9, $e2, $ff, $24, $14, $00
17da5     FF 24 20 27 
17da9     6C 20 1D 20 
17dad     10 F3 1F 28 
17db1     1F 2C 08 EB | 	byte	$ff, $24, $20, $27, $6c, $20, $1d, $20, $10, $f3, $1f, $28, $1f, $2c, $08, $eb
17db5     EB 1F 40 E0 
17db9     EF 14 D0 A0 
17dbd     D7 00 C0 D7 
17dc1     D4 80 9F 0C | 	byte	$eb, $1f, $40, $e0, $ef, $14, $d0, $a0, $d7, $00, $c0, $d7, $d4, $80, $9f, $0c
17dc5     C0 DF 70 00 
17dc9     B6 DF EF 1F 
17dcd     00 FF 30 FF 
17dd1     00 DD FF 0C | 	byte	$c0, $df, $70, $00, $b6, $df, $ef, $1f, $00, $ff, $30, $ff, $00, $dd, $ff, $0c
17dd5     FF 3F 40 D0 
17dd9     FF FB 2D 00 
17ddd     CF 0D E8 C0 
17de1     B9 B7 FF 50 | 	byte	$ff, $3f, $40, $d0, $ff, $fb, $2d, $00, $cf, $0d, $e8, $c0, $b9, $b7, $ff, $50
17de5     00 FF E0 D7 
17de9     FF 28 3F 20 
17ded     D5 FF 1F 10 
17df1     0F 00 DF FF | 	byte	$00, $ff, $e0, $d7, $ff, $28, $3f, $20, $d5, $ff, $1f, $10, $0f, $00, $df, $ff
17df5     E0 BF 37 E0 
17df9     EF F2 F9 0F 
17dfd     14 EB 13 00 
17e01     E2 FF 20 D0 | 	byte	$e0, $bf, $37, $e0, $ef, $f2, $f9, $0f, $14, $eb, $13, $00, $e2, $ff, $20, $d0
17e05     EF 40 00 A0 
17e09     BF DA C2 DF 
17e0d     0F 10 FF 37 
17e11     30 E0 EF 3B | 	byte	$ef, $40, $00, $a0, $bf, $da, $c2, $df, $0f, $10, $ff, $37, $30, $e0, $ef, $3b
17e15     35 48 10 DF 
17e19     F7 FC E8 EF 
17e1d     2F 20 E8 C0 
17e21     CF 22 F0 CF | 	byte	$35, $48, $10, $df, $f7, $fc, $e8, $ef, $2f, $20, $e8, $c0, $cf, $22, $f0, $cf
17e25     F7 E8 B8 D7 
17e29     D0 C0 CF 13 
17e2d     00 D1 FF F0 
17e31     BF FF 1B 55 | 	byte	$f7, $e8, $b8, $d7, $d0, $c0, $cf, $13, $00, $d1, $ff, $f0, $bf, $ff, $1b, $55
17e35     30 04 FF 27 
17e39     2F 04 0F 48 
17e3d     25 40 00 B3 
17e41     DF 0F 38 10 | 	byte	$30, $04, $ff, $27, $2f, $04, $0f, $48, $25, $40, $00, $b3, $df, $0f, $38, $10
17e45     1F 30 00 9F 
17e49     1F 20 F8 FB 
17e4d     0B E0 B7 D7 
17e51     D1 FF 4A 42 | 	byte	$1f, $30, $00, $9f, $1f, $20, $f8, $fb, $0b, $e0, $b7, $d7, $d1, $ff, $4a, $42
17e55     20 E3 1F 00 
17e59     C1 1F 74 20 
17e5d     F0 FF 00 1F 
17e61     08 EF 4B 00 | 	byte	$20, $e3, $1f, $00, $c1, $1f, $74, $20, $f0, $ff, $00, $1f, $08, $ef, $4b, $00
17e65     AF FF F7 08 
17e69     D3 FF 00 CF 
17e6d     FF 1F 1C 08 
17e71     EF FF 1F 2A | 	byte	$af, $ff, $f7, $08, $d3, $ff, $00, $cf, $ff, $1f, $1c, $08, $ef, $ff, $1f, $2a
17e75     14 00 FF 44 
17e79     F0 1F 20 EF 
17e7d     4D 10 E2 C0 
17e81     CF FB 09 1F | 	byte	$14, $00, $ff, $44, $f0, $1f, $20, $ef, $4d, $10, $e2, $c0, $cf, $fb, $09, $1f
17e85     10 E4 C8 C0 
17e89     BB CF CB DB 
17e8d     F7 0B 00 EF 
17e91     24 C8 1F 78 | 	byte	$10, $e4, $c8, $c0, $bb, $cf, $cb, $db, $f7, $0b, $00, $ef, $24, $c8, $1f, $78
17e95     1B 57 10 FF 
17e99     20 1F 20 27 
17e9d     30 1F 30 00 
17ea1     EF 04 DF 1F | 	byte	$1b, $57, $10, $ff, $20, $1f, $20, $27, $30, $1f, $30, $00, $ef, $04, $df, $1f
17ea5     34 E0 D7 0F 
17ea9     08 1B 10 17 
17ead     20 3F 40 F0 
17eb1     CF 17 20 E8 | 	byte	$34, $e0, $d7, $0f, $08, $1b, $10, $17, $20, $3f, $40, $f0, $cf, $17, $20, $e8
17eb5     C7 FF 08 00 
17eb9     FF 30 00 E9 
17ebd     D4 FF 40 1B 
17ec1     5F 60 10 C8 | 	byte	$c7, $ff, $08, $00, $ff, $30, $00, $e9, $d4, $ff, $40, $1b, $5f, $60, $10, $c8
17ec5     DF 3F 00 08 
17ec9     E8 EF E8 E7 
17ecd     08 D0 CF E2 
17ed1     CF EF D9 FF | 	byte	$df, $3f, $00, $08, $e8, $ef, $e8, $e7, $08, $d0, $cf, $e2, $cf, $ef, $d9, $ff
17ed5     10 D0 C2 A8 
17ed9     AF F7 0B 10 
17edd     E0 B0 AF 1F 
17ee1     C0 DF 10 FF | 	byte	$10, $d0, $c2, $a8, $af, $f7, $0b, $10, $e0, $b0, $af, $1f, $c0, $df, $10, $ff
17ee5     34 00 FF 3F 
17ee9     28 24 00 FF 
17eed     5F 40 DF F4 
17ef1     E0 E7 1F 38 | 	byte	$34, $00, $ff, $3f, $28, $24, $00, $ff, $5f, $40, $df, $f4, $e0, $e7, $1f, $38
17ef5     10 C8 DF 0F 
17ef9     00 ED F0 FF 
17efd     00 FF E0 DF 
17f01     F9 E7 06 FF | 	byte	$10, $c8, $df, $0f, $00, $ed, $f0, $ff, $00, $ff, $e0, $df, $f9, $e7, $06, $ff
17f05     2F 44 20 CB 
17f09     FF 14 1F 50 
17f0d     00 DF F4 FF 
17f11     08 DA E8 EF | 	byte	$2f, $44, $20, $cb, $ff, $14, $1f, $50, $00, $df, $f4, $ff, $08, $da, $e8, $ef
17f15     34 E0 CF F4 
17f19     DC FF 00 EB 
17f1d     12 0B F0 BF 
17f21     FF 1A 2D 00 | 	byte	$34, $e0, $cf, $f4, $dc, $ff, $00, $eb, $12, $0b, $f0, $bf, $ff, $1a, $2d, $00
17f25     B7 FF 00 C7 
17f29     FF F0 DF 02 
17f2d     F8 FB 02 F7 
17f31     FF 3F 20 E0 | 	byte	$b7, $ff, $00, $c7, $ff, $f0, $df, $02, $f8, $fb, $02, $f7, $ff, $3f, $20, $e0
17f35     E7 0F 20 D0 
17f39     DF 38 C0 9F 
17f3d     0F 00 B7 C8 
17f41     CF 1F 00 DF | 	byte	$e7, $0f, $20, $d0, $df, $38, $c0, $9f, $0f, $00, $b7, $c8, $cf, $1f, $00, $df
17f45     00 C1 EE E5 
17f49     0E 05 10 E8 
17f4d     E8 E7 3F 40 
17f51     E9 FE 03 0F | 	byte	$00, $c1, $ee, $e5, $0e, $05, $10, $e8, $e8, $e7, $3f, $40, $e9, $fe, $03, $0f
17f55     20 F0 FF 1E 
17f59     F0 BF FF 38 
17f5d     00 EF 20 08 
17f61     00 EB FF 46 | 	byte	$20, $f0, $ff, $1e, $f0, $bf, $ff, $38, $00, $ef, $20, $08, $00, $eb, $ff, $46
17f65     08 F7 3F 30 
17f69     F7 37 38 2F 
17f6d     3C 28 08 13 
17f71     2D 21 4F 40 | 	byte	$08, $f7, $3f, $30, $f7, $37, $38, $2f, $3c, $28, $08, $13, $2d, $21, $4f, $40
17f75     1F 20 F0 F7 
17f79     04 F0 EB FD 
17f7d     04 D0 D7 DB 
17f81     EF FC E0 EF | 	byte	$1f, $20, $f0, $f7, $04, $f0, $eb, $fd, $04, $d0, $d7, $db, $ef, $fc, $e0, $ef
17f85     00 D7 2A E8 
17f89     DF 1F 20 FF 
17f8d     00 DD C0 AF 
17f91     1F 40 00 FA | 	byte	$00, $d7, $2a, $e8, $df, $1f, $20, $ff, $00, $dd, $c0, $af, $1f, $40, $00, $fa
17f95     D0 D7 FF 29 
17f99     14 2F 64 00 
17f9d     BF 1F 61 40 
17fa1     10 1B 20 00 | 	byte	$d0, $d7, $ff, $29, $14, $2f, $64, $00, $bf, $1f, $61, $40, $10, $1b, $20, $00
17fa5     ED 0F 26 20 
17fa9     F7 1F 40 08 
17fad     DF 0F 2C 02 
17fb1     1F 20 14 F0 | 	byte	$ed, $0f, $26, $20, $f7, $1f, $40, $08, $df, $0f, $2c, $02, $1f, $20, $14, $f0
17fb5     D1 EF F7 2A 
17fb9     00 FF 10 0F 
17fbd     20 E8 EF ED 
17fc1     2F 40 07 1F | 	byte	$d1, $ef, $f7, $2a, $00, $ff, $10, $0f, $20, $e8, $ef, $ed, $2f, $40, $07, $1f
17fc5     30 00 CF 35 
17fc9     04 F9 FF 03 
17fcd     27 E0 BF 17 
17fd1     08 E7 1F 24 | 	byte	$30, $00, $cf, $35, $04, $f9, $ff, $03, $27, $e0, $bf, $17, $08, $e7, $1f, $24
17fd5     E8 FF 14 00 
17fd9     ED FF 2C 00 
17fdd     E0 EF 13 0C 
17fe1     0D 00 F0 EB | 	byte	$e8, $ff, $14, $00, $ed, $ff, $2c, $00, $e0, $ef, $13, $0c, $0d, $00, $f0, $eb
17fe5     F7 E0 EF F0 
17fe9     EF C4 DF D0 
17fed     BF C8 D7 F4 
17ff1     DA F3 E8 F7 | 	byte	$f7, $e0, $ef, $f0, $ef, $c4, $df, $d0, $bf, $c8, $d7, $f4, $da, $f3, $e8, $f7
17ff5     27 30 18 F8 
17ff9     FF 2F 40 08 
17ffd     1B 08 CF FF 
18001     20 F7 2A E0 | 	byte	$27, $30, $18, $f8, $ff, $2f, $40, $08, $1b, $08, $cf, $ff, $20, $f7, $2a, $e0
18005     F7 F0 FF 1B 
18009     2C 00 EF E0 
1800d     D7 0C EA E4 
18011     C4 EF 15 10 | 	byte	$f7, $f0, $ff, $1b, $2c, $00, $ef, $e0, $d7, $0c, $ea, $e4, $c4, $ef, $15, $10
18015     D0 AB FF 18 
18019     0F 00 FF FB 
1801d     11 F0 FF 00 
18021     F3 00 C0 DF | 	byte	$d0, $ab, $ff, $18, $0f, $00, $ff, $fb, $11, $f0, $ff, $00, $f3, $00, $c0, $df
18025     E8 D5 E7 F8 
18029     B0 D7 F0 CF 
1802d     0F 07 2B 10 
18031     E0 DF 3F 40 | 	byte	$e8, $d5, $e7, $f8, $b0, $d7, $f0, $cf, $0f, $07, $2b, $10, $e0, $df, $3f, $40
18035     08 E8 1F 60 
18039     20 FE 02 E8 
1803d     D1 F7 0C E0 
18041     CB 0F E0 AF | 	byte	$08, $e8, $1f, $60, $20, $fe, $02, $e8, $d1, $f7, $0c, $e0, $cb, $0f, $e0, $af
18045     EB E1 FB 00 
18049     C0 DF 08 D0 
1804d     EF 08 F3 0D 
18051     0C 00 07 00 | 	byte	$eb, $e1, $fb, $00, $c0, $df, $08, $d0, $ef, $08, $f3, $0d, $0c, $00, $07, $00
18055     EB 0F 08 E0 
18059     DD EF F3 0F 
1805d     00 CD DF E3 
18061     0F 20 00 EF | 	byte	$eb, $0f, $08, $e0, $dd, $ef, $f3, $0f, $00, $cd, $df, $e3, $0f, $20, $00, $ef
18065     1F 20 00 04 
18069     E8 17 30 18 
1806d     00 BF F7 FD 
18071     04 EB FF 10 | 	byte	$1f, $20, $00, $04, $e8, $17, $30, $18, $00, $bf, $f7, $fd, $04, $eb, $ff, $10
18075     17 2A 10 E8 
18079     F7 10 E8 FF 
1807d     17 00 CA DF 
18081     0C E0 F7 0F | 	byte	$17, $2a, $10, $e8, $f7, $10, $e8, $ff, $17, $00, $ca, $df, $0c, $e0, $f7, $0f
18085     1D 10 0F 2A 
18089     20 1B 2D 30 
1808d     22 22 24 04 
18091     13 04 12 04 | 	byte	$1d, $10, $0f, $2a, $20, $1b, $2d, $30, $22, $22, $24, $04, $13, $04, $12, $04
18095     EC E4 DF DD 
18099     FF 10 FF 00 
1809d     E1 FF 10 F1 
180a1     2F 40 00 FF | 	byte	$ec, $e4, $df, $dd, $ff, $10, $ff, $00, $e1, $ff, $10, $f1, $2f, $40, $00, $ff
180a5     10 07 10 0A 
180a9     FD 17 10 F4 
180ad     D9 FF 00 FF 
180b1     20 00 F7 00 | 	byte	$10, $07, $10, $0a, $fd, $17, $10, $f4, $d9, $ff, $00, $ff, $20, $00, $f7, $00
180b5     FB 20 E8 E7 
180b9     1F 20 13 27 
180bd     28 0C 1F 4A 
180c1     20 1B 2D 10 | 	byte	$fb, $20, $e8, $e7, $1f, $20, $13, $27, $28, $0c, $1f, $4a, $20, $1b, $2d, $10
180c5     1F 00 FF 20 
180c9     FE F8 FF 20 
180cd     F0 DF 0F 2B 
180d1     28 00 FB F8 | 	byte	$1f, $00, $ff, $20, $fe, $f8, $ff, $20, $f0, $df, $0f, $2b, $28, $00, $fb, $f8
180d5     FB 00 F5 1F 
180d9     10 DF 17 00 
180dd     E7 FE F3 0F 
180e1     0C 04 F3 14 | 	byte	$fb, $00, $f5, $1f, $10, $df, $17, $00, $e7, $fe, $f3, $0f, $0c, $04, $f3, $14
180e5     05 0D 0C F4 
180e9     E7 FF 00 F7 
180ed     FC F5 F2 EA 
180f1     EF 1B 10 FF | 	byte	$05, $0d, $0c, $f4, $e7, $ff, $00, $f7, $fc, $f5, $f2, $ea, $ef, $1b, $10, $ff
180f5     14 17 33 28 
180f9     03 2F 20 1F 
180fd     2E 20 08 00 
18101     F9 F0 E3 0B | 	byte	$14, $17, $33, $28, $03, $2f, $20, $1f, $2e, $20, $08, $00, $f9, $f0, $e3, $0b
18105     00 17 12 1E 
18109     E8 DB 0F 1F 
1810d     10 EF 0B 00 
18111     EB FF 08 FB | 	byte	$00, $17, $12, $1e, $e8, $db, $0f, $1f, $10, $ef, $0b, $00, $eb, $ff, $08, $fb
18115     1F 20 F0 DF 
18119     17 10 F0 D3 
1811d     FF 07 04 E1 
18121     ED 15 00 D0 | 	byte	$1f, $20, $f0, $df, $17, $10, $f0, $d3, $ff, $07, $04, $e1, $ed, $15, $00, $d0
18125     DF FF EC FF 
18129     20 00 F8 D7 
1812d     FF 03 17 04 
18131     F4 EA E0 E7 | 	byte	$df, $ff, $ec, $ff, $20, $00, $f8, $d7, $ff, $03, $17, $04, $f4, $ea, $e0, $e7
18135     04 0B 00 FB 
18139     F0 FB E0 EF 
1813d     08 00 F4 F3 
18141     05 F4 F9 F2 | 	byte	$04, $0b, $00, $fb, $f0, $fb, $e0, $ef, $08, $00, $f4, $f3, $05, $f4, $f9, $f2
18145     F7 16 00 EB 
18149     F0 E3 EB FF 
1814d     F0 C8 DB EF 
18151     0F 08 EC FF | 	byte	$f7, $16, $00, $eb, $f0, $e3, $eb, $ff, $f0, $c8, $db, $ef, $0f, $08, $ec, $ff
18155     20 E4 DC BB 
18159     DF FA E9 E7 
1815d     FB 00 E0 EB 
18161     FB F3 0B 10 | 	byte	$20, $e4, $dc, $bb, $df, $fa, $e9, $e7, $fb, $00, $e0, $eb, $fb, $f3, $0b, $10
18165     08 0F 30 00 
18169     F8 E9 FE 0F 
1816d     08 DD FB E8 
18171     C1 E7 F8 D4 | 	byte	$08, $0f, $30, $00, $f8, $e9, $fe, $0f, $08, $dd, $fb, $e8, $c1, $e7, $f8, $d4
18175     CF EF F0 C4 
18179     CF ED FB 06 
1817d     E0 DF F3 1F 
18181     10 CD EF 10 | 	byte	$cf, $ef, $f0, $c4, $cf, $ed, $fb, $06, $e0, $df, $f3, $1f, $10, $cd, $ef, $10
18185     03 F8 F7 00 
18189     F8 FB 0F 08 
1818d     F3 F2 FF 16 
18191     1A 0E 14 00 | 	byte	$03, $f8, $f7, $00, $f8, $fb, $0f, $08, $f3, $f2, $ff, $16, $1a, $0e, $14, $00
18195     E8 EB F5 FF 
18199     16 08 F8 E4 
1819d     FD E8 DB FF 
181a1     00 EC F7 F0 | 	byte	$e8, $eb, $f5, $ff, $16, $08, $f8, $e4, $fd, $e8, $db, $ff, $00, $ec, $f7, $f0
181a5     E3 F0 E0 D0 
181a9     F7 14 E8 F7 
181ad     00 EF 11 04 
181b1     FF 18 F0 E7 | 	byte	$e3, $f0, $e0, $d0, $f7, $14, $e8, $f7, $00, $ef, $11, $04, $ff, $18, $f0, $e7
181b5     12 00 F2 FD 
181b9     0B 00 E8 D7 
181bd     FF 10 F3 FF 
181c1     07 00 FA 13 | 	byte	$12, $00, $f2, $fd, $0b, $00, $e8, $d7, $ff, $10, $f3, $ff, $07, $00, $fa, $13
181c5     00 FB 12 00 
181c9     FF 14 E8 FF 
181cd     08 FF 12 00 
181d1     17 38 00 0B | 	byte	$00, $fb, $12, $00, $ff, $14, $e8, $ff, $08, $ff, $12, $00, $17, $38, $00, $0b
181d5     22 1B 28 1D 
181d9     12 0B 04 05 
181dd     0E 00 06 07 
181e1     00 DB FF E0 | 	byte	$22, $1b, $28, $1d, $12, $0b, $04, $05, $0e, $00, $06, $07, $00, $db, $ff, $e0
181e5     EF 1C 00 F0 
181e9     D7 FF 10 F5 
181ed     FF 1A 16 04 
181f1     00 07 23 18 | 	byte	$ef, $1c, $00, $f0, $d7, $ff, $10, $f5, $ff, $1a, $16, $04, $00, $07, $23, $18
181f5     27 28 F0 F7 
181f9     2F 20 15 22 
181fd     10 00 F5 F7 
18201     04 E8 FB 00 | 	byte	$27, $28, $f0, $f7, $2f, $20, $15, $22, $10, $00, $f5, $f7, $04, $e8, $fb, $00
18205     D7 F7 14 E8 
18209     DF FF 08 E8 
1820d     EF 14 E8 E7 
18211     08 FF 04 FB | 	byte	$d7, $f7, $14, $e8, $df, $ff, $08, $e8, $ef, $14, $e8, $e7, $08, $ff, $04, $fb
18215     15 00 EF FF 
18219     17 12 12 1B 
1821d     20 F4 17 14 
18221     FB 1D 14 14 | 	byte	$15, $00, $ef, $ff, $17, $12, $12, $1b, $20, $f4, $17, $14, $fb, $1d, $14, $14
18225     2F 28 00 03 
18229     0D 13 21 08 
1822d     FB 0E 13 18 
18231     04 17 18 0D | 	byte	$2f, $28, $00, $03, $0d, $13, $21, $08, $fb, $0e, $13, $18, $04, $17, $18, $0d
18235     1E 18 02 07 
18239     14 0B 0A 0B 
1823d     27 20 00 06 
18241     F2 FF 15 12 | 	byte	$1e, $18, $02, $07, $14, $0b, $0a, $0b, $27, $20, $00, $06, $f2, $ff, $15, $12
18245     00 F4 FF 20 
18249     F0 FF 10 F7 
1824d     12 F0 DF 08 
18251     EB 27 20 0D | 	byte	$00, $f4, $ff, $20, $f0, $ff, $10, $f7, $12, $f0, $df, $08, $eb, $27, $20, $0d
18255     0F 24 00 F3 
18259     FF 07 10 00 
1825d     F3 02 FF 04 
18261     F0 FF 18 EB | 	byte	$0f, $24, $00, $f3, $ff, $07, $10, $00, $f3, $02, $ff, $04, $f0, $ff, $18, $eb
18265     FD 0A F0 E7 
18269     17 00 EF F4 
1826d     D9 FF 00 E8 
18271     FF 00 D5 E0 | 	byte	$fd, $0a, $f0, $e7, $17, $00, $ef, $f4, $d9, $ff, $00, $e8, $ff, $00, $d5, $e0
18275     D3 FF F0 D7 
18279     FF 08 F8 DA 
1827d     EF 07 1E 00 
18281     D1 EF 2F 18 | 	byte	$d3, $ff, $f0, $d7, $ff, $08, $f8, $da, $ef, $07, $1e, $00, $d1, $ef, $2f, $18
18285     FB 17 10 13 
18289     10 07 08 0E 
1828d     17 08 E8 E7 
18291     0F 10 F7 07 | 	byte	$fb, $17, $10, $13, $10, $07, $08, $0e, $17, $08, $e8, $e7, $0f, $10, $f7, $07
18295     00 F3 E8 DB 
18299     FF E4 FF 18 
1829d     E8 DE DC E9 
182a1     EB FF 08 E0 | 	byte	$00, $f3, $e8, $db, $ff, $e4, $ff, $18, $e8, $de, $dc, $e9, $eb, $ff, $08, $e0
182a5     FF F0 DF 17 
182a9     00 F8 FB 1F 
182ad     10 F0 FB 00 
182b1     E7 FF 00 F3 | 	byte	$ff, $f0, $df, $17, $00, $f8, $fb, $1f, $10, $f0, $fb, $00, $e7, $ff, $00, $f3
182b5     F8 EB F0 DE 
182b9     ED EC EA E8 
182bd     EF EB F7 18 
182c1     E8 EF 2D 10 | 	byte	$f8, $eb, $f0, $de, $ed, $ec, $ea, $e8, $ef, $eb, $f7, $18, $e8, $ef, $2d, $10
182c5     13 00 FB 10 
182c9     F6 F9 FF 08 
182cd     E0 D3 FF 00 
182d1     DB F2 ED 0F | 	byte	$13, $00, $fb, $10, $f6, $f9, $ff, $08, $e0, $d3, $ff, $00, $db, $f2, $ed, $0f
182d5     14 E0 EF 0A 
182d9     F5 FF 04 E0 
182dd     F7 0D 07 25 
182e1     00 DF 15 00 | 	byte	$14, $e0, $ef, $0a, $f5, $ff, $04, $e0, $f7, $0d, $07, $25, $00, $df, $15, $00
182e5     E7 FB 0E 0C 
182e9     0F 22 00 F7 
182ed     08 02 05 08 
182f1     03 00 F7 FA | 	byte	$e7, $fb, $0e, $0c, $0f, $22, $00, $f7, $08, $02, $05, $08, $03, $00, $f7, $fa
182f5     F7 0E F9 07 
182f9     08 FC F8 0B 
182fd     00 F3 0D 0C 
18301     F0 E5 FB F6 | 	byte	$f7, $0e, $f9, $07, $08, $fc, $f8, $0b, $00, $f3, $0d, $0c, $f0, $e5, $fb, $f6
18305     FC F0 D7 EB 
18309     F7 0B F4 EF 
1830d     FE 00 EC F3 
18311     04 03 00 EF | 	byte	$fc, $f0, $d7, $eb, $f7, $0b, $f4, $ef, $fe, $00, $ec, $f3, $04, $03, $00, $ef
18315     02 FF F0 DB 
18319     FF 00 F8 FB 
1831d     04 F5 0F 04 
18321     FF F8 07 0B | 	byte	$02, $ff, $f0, $db, $ff, $00, $f8, $fb, $04, $f5, $0f, $04, $ff, $f8, $07, $0b
18325     18 00 E8 EF 
18329     0A 00 03 F8 
1832d     EF 0F 24 00 
18331     EF 04 FF 1F | 	byte	$18, $00, $e8, $ef, $0a, $00, $03, $f8, $ef, $0f, $24, $00, $ef, $04, $ff, $1f
18335     20 08 FF 0A 
18339     F8 EB FF 20 
1833d     00 EF 10 EC 
18341     EB 0F 10 00 | 	byte	$20, $08, $ff, $0a, $f8, $eb, $ff, $20, $00, $ef, $10, $ec, $eb, $0f, $10, $00
18345     E8 FF 18 02 
18349     F4 F5 FB 12 
1834d     04 F8 F0 EF 
18351     1B 04 E0 FF | 	byte	$e8, $ff, $18, $02, $f4, $f5, $fb, $12, $04, $f8, $f0, $ef, $1b, $04, $e0, $ff
18355     20 00 EF 1F 
18359     10 FB 00 FF 
1835d     10 00 FF 18 
18361     E8 EF 1F 10 | 	byte	$20, $00, $ef, $1f, $10, $fb, $00, $ff, $10, $00, $ff, $18, $e8, $ef, $1f, $10
18365     FF 09 06 0F 
18369     20 01 0F 00 
1836d     0F 04 F2 ED 
18371     FF 12 0A FB | 	byte	$ff, $09, $06, $0f, $20, $01, $0f, $00, $0f, $04, $f2, $ed, $ff, $12, $0a, $fb
18375     19 00 D7 FF 
18379     17 1A 10 F0 
1837d     D7 1F 24 00 
18381     04 05 00 07 | 	byte	$19, $00, $d7, $ff, $17, $1a, $10, $f0, $d7, $1f, $24, $00, $04, $05, $00, $07
18385     04 0F 08 FD 
18389     0B 10 02 1B 
1838d     10 0F 1C 00 
18391     0B 10 00 FB | 	byte	$04, $0f, $08, $fd, $0b, $10, $02, $1b, $10, $0f, $1c, $00, $0b, $10, $00, $fb
18395     13 10 00 0B 
18399     10 ED FF 0B 
1839d     15 00 EB FC 
183a1     EF FF 02 0A | 	byte	$13, $10, $00, $0b, $10, $ed, $ff, $0b, $15, $00, $eb, $fc, $ef, $ff, $02, $0a
183a5     00 FD 00 E5 
183a9     FF 00 E4 FF 
183ad     10 F6 F6 FF 
183b1     0A 17 20 12 | 	byte	$00, $fd, $00, $e5, $ff, $00, $e4, $ff, $10, $f6, $f6, $ff, $0a, $17, $20, $12
183b5     04 0C 04 FB 
183b9     0C FB 0F 14 
183bd     10 F4 F7 08 
183c1     F8 EE FF 10 | 	byte	$04, $0c, $04, $fb, $0c, $fb, $0f, $14, $10, $f4, $f7, $08, $f8, $ee, $ff, $10
183c5     FF 0A E8 F5 
183c9     F8 F7 F0 FF 
183cd     00 F7 04 F7 
183d1     F4 F7 06 00 | 	byte	$ff, $0a, $e8, $f5, $f8, $f7, $f0, $ff, $00, $f7, $04, $f7, $f4, $f7, $06, $00
183d5     FB 02 0B 11 
183d9     0C 06 0B 14 
183dd     F8 FF 10 00 
183e1     FE 0F 24 04 | 	byte	$fb, $02, $0b, $11, $0c, $06, $0b, $14, $f8, $ff, $10, $00, $fe, $0f, $24, $04
183e5     FF 03 0D 04 
183e9     F6 FF FA FD 
183ed     00 E5 EF FF 
183f1     FC FF 00 D5 | 	byte	$ff, $03, $0d, $04, $f6, $ff, $fa, $fd, $00, $e5, $ef, $ff, $fc, $ff, $00, $d5
183f5     FD F0 EF FA 
183f9     01 07 16 00 
183fd     F3 FE FF 04 
18401     F4 0F 10 E2 | 	byte	$fd, $f0, $ef, $fa, $01, $07, $16, $00, $f3, $fe, $ff, $04, $f4, $0f, $10, $e2
18405     EF FF 00 F7 
18409     13 18 08 0D 
1840d     08 F5 07 10 
18411     00 FF 0F 04 | 	byte	$ef, $ff, $00, $f7, $13, $18, $08, $0d, $08, $f5, $07, $10, $00, $ff, $0f, $04
18415     F0 FF 0C FA 
18419     F6 FF 0C 04 
1841d     07 21 10 0A 
18421     12 04 0B 11 | 	byte	$f0, $ff, $0c, $fa, $f6, $ff, $0c, $04, $07, $21, $10, $0a, $12, $04, $0b, $11
18425     0C F8 FF 08 
18429     FF 0C F0 F7 
1842d     FC FB 06 F4 
18431     E8 E3 EC E4 | 	byte	$0c, $f8, $ff, $08, $ff, $0c, $f0, $f7, $fc, $fb, $06, $f4, $e8, $e3, $ec, $e4
18435     FD E8 F7 00 
18439     E5 E9 F7 F0 
1843d     E7 0A 00 F0 
18441     F7 0A 00 F0 | 	byte	$fd, $e8, $f7, $00, $e5, $e9, $f7, $f0, $e7, $0a, $00, $f0, $f7, $0a, $00, $f0
18445     FF 2B 10 03 
18449     17 08 FF 0D 
1844d     10 04 EE FF 
18451     0F 14 00 FE | 	byte	$ff, $2b, $10, $03, $17, $08, $ff, $0d, $10, $04, $ee, $ff, $0f, $14, $00, $fe
18455     09 06 00 F3 
18459     FB 0F 10 E9 
1845d     F7 F0 ED F5 
18461     02 F0 F7 0A | 	byte	$09, $06, $00, $f3, $fb, $0f, $10, $e9, $f7, $f0, $ed, $f5, $02, $f0, $f7, $0a
18465     00 FC F0 F7 
18469     15 16 08 EC 
1846d     FF 04 FE FF 
18471     0B 08 F0 E9 | 	byte	$00, $fc, $f0, $f7, $15, $16, $08, $ec, $ff, $04, $fe, $ff, $0b, $08, $f0, $e9
18475     F5 F2 F3 F8 
18479     FD 04 EB EB 
1847d     FB 04 FC E8 
18481     EF 02 F0 F5 | 	byte	$f5, $f2, $f3, $f8, $fd, $04, $eb, $eb, $fb, $04, $fc, $e8, $ef, $02, $f0, $f5
18485     F0 FF 00 F7 
18489     FA 06 02 07 
1848d     02 06 0E 0E 
18491     08 06 08 00 | 	byte	$f0, $ff, $00, $f7, $fa, $06, $02, $07, $02, $06, $0e, $0e, $08, $06, $08, $00
18495     0A 08 FC FA 
18499     FF 00 E0 F7 
1849d     08 F6 FB F4 
184a1     F5 00 EB FF | 	byte	$0a, $08, $fc, $fa, $ff, $00, $e0, $f7, $08, $f6, $fb, $f4, $f5, $00, $eb, $ff
184a5     F8 FA FB 07 
184a9     04 EA FD 08 
184ad     02 08 0D 08 
184b1     FE FB 0B 2A | 	byte	$f8, $fa, $fb, $07, $04, $ea, $fd, $08, $02, $08, $0d, $08, $fe, $fb, $0b, $2a
184b5     08 FF 04 0F 
184b9     18 00 0C F1 
184bd     FB F4 FF 0A 
184c1     F8 E6 E1 EF | 	byte	$08, $ff, $04, $0f, $18, $00, $0c, $f1, $fb, $f4, $ff, $0a, $f8, $e6, $e1, $ef
184c5     F0 EF F0 D4 
184c9     E7 F2 F0 EF 
184cd     F4 ED F9 F8 
184d1     F2 F7 0A 08 | 	byte	$f0, $ef, $f0, $d4, $e7, $f2, $f0, $ef, $f4, $ed, $f9, $f8, $f2, $f7, $0a, $08
184d5     02 FF 04 06 
184d9     02 FF 1A 10 
184dd     09 1A 12 04 
184e1     03 15 1C 07 | 	byte	$02, $ff, $04, $06, $02, $ff, $1a, $10, $09, $1a, $12, $04, $03, $15, $1c, $07
184e5     1F 00 FF 08 
184e9     01 0F 04 F9 
184ed     05 00 FB F2 
184f1     E3 FB 0C 04 | 	byte	$1f, $00, $ff, $08, $01, $0f, $04, $f9, $05, $00, $fb, $f2, $e3, $fb, $0c, $04
184f5     EA FF 10 04 
184f9     EC FF 18 15 
184fd     1A 16 10 09 
18501     0F 10 00 ED | 	byte	$ea, $ff, $10, $04, $ec, $ff, $18, $15, $1a, $16, $10, $09, $0f, $10, $00, $ed
18505     FF 14 00 EE 
18509     E7 FB FE F4 
1850d     E5 FF 06 06 
18511     F0 EF EA EF | 	byte	$ff, $14, $00, $ee, $e7, $fb, $fe, $f4, $e5, $ff, $06, $06, $f0, $ef, $ea, $ef
18515     08 F8 0F 10 
18519     F0 FF 00 FF 
1851d     1E 10 FF 13 
18521     0C 17 20 0D | 	byte	$08, $f8, $0f, $10, $f0, $ff, $00, $ff, $1e, $10, $ff, $13, $0c, $17, $20, $0d
18525     1A 00 13 10 
18529     0C 02 02 00 
1852d     F9 0A F0 EF 
18531     04 00 F4 F9 | 	byte	$1a, $00, $13, $10, $0c, $02, $02, $00, $f9, $0a, $f0, $ef, $04, $00, $f4, $f9
18535     FF 00 E4 F3 
18539     00 F7 07 13 
1853d     14 00 05 02 
18541     0F 23 20 F2 | 	byte	$ff, $00, $e4, $f3, $00, $f7, $07, $13, $14, $00, $05, $02, $0f, $23, $20, $f2
18545     0D 11 0D 04 
18549     FF 08 F8 FF 
1854d     0A 00 FB F8 
18551     ED FF 0D 08 | 	byte	$0d, $11, $0d, $04, $ff, $08, $f8, $ff, $0a, $00, $fb, $f8, $ed, $ff, $0d, $08
18555     0F 04 FB 06 
18559     00 F3 FF 0C 
1855d     00 09 F2 EF 
18561     0D F4 EE FF | 	byte	$0f, $04, $fb, $06, $00, $f3, $ff, $0c, $00, $09, $f2, $ef, $0d, $f4, $ee, $ff
18565     14 00 02 00 
18569     FD 07 12 10 
1856d     0A 0C 04 0F 
18571     17 20 19 14 | 	byte	$14, $00, $02, $00, $fd, $07, $12, $10, $0a, $0c, $04, $0f, $17, $20, $19, $14
18575     00 FF 0F 10 
18579     0C FC FF 00 
1857d     F9 FF 08 00 
18581     E5 F5 FA F0 | 	byte	$00, $ff, $0f, $10, $0c, $fc, $ff, $00, $f9, $ff, $08, $00, $e5, $f5, $fa, $f0
18585     DD EF F0 EF 
18589     08 F0 F7 F0 
1858d     EF 06 09 05 
18591     07 08 F4 FF | 	byte	$dd, $ef, $f0, $ef, $08, $f0, $f7, $f0, $ef, $06, $09, $05, $07, $08, $f4, $ff
18595     F8 F5 01 FF 
18599     14 00 ED ED 
1859d     EE F5 F4 EA 
185a1     FB 00 E1 FF | 	byte	$f8, $f5, $01, $ff, $14, $00, $ed, $ed, $ee, $f5, $f4, $ea, $fb, $00, $e1, $ff
185a5     F0 EB FC EF 
185a9     F8 E0 FF 10 
185ad     F0 ED 0B 1C 
185b1     00 FF 14 04 | 	byte	$f0, $eb, $fc, $ef, $f8, $e0, $ff, $10, $f0, $ed, $0b, $1c, $00, $ff, $14, $04
185b5     13 18 FD 0A 
185b9     F8 0B 10 02 
185bd     F4 F6 FB FA 
185c1     F7 FD F9 FF | 	byte	$13, $18, $fd, $0a, $f8, $0b, $10, $02, $f4, $f6, $fb, $fa, $f7, $fd, $f9, $ff
185c5     04 FA FF 04 
185c9     F8 EF 0D 10 
185cd     04 F0 0F 08 
185d1     F3 FF F2 FF | 	byte	$04, $fa, $ff, $04, $f8, $ef, $0d, $10, $04, $f0, $0f, $08, $f3, $ff, $f2, $ff
185d5     00 FF F0 F7 
185d9     F4 EF 17 0C 
185dd     07 16 00 FB 
185e1     13 08 02 FC | 	byte	$00, $ff, $f0, $f7, $f4, $ef, $17, $0c, $07, $16, $00, $fb, $13, $08, $02, $fc
185e5     0B 18 F0 EF 
185e9     ED EF FF F2 
185ed     F1 F6 F0 EA 
185f1     EA E2 F7 F6 | 	byte	$0b, $18, $f0, $ef, $ed, $ef, $ff, $f2, $f1, $f6, $f0, $ea, $ea, $e2, $f7, $f6
185f5     F1 FE E4 EF 
185f9     10 00 F3 FF 
185fd     08 FA FD FF 
18601     17 10 02 05 | 	byte	$f1, $fe, $e4, $ef, $10, $00, $f3, $ff, $08, $fa, $fd, $ff, $17, $10, $02, $05
18605     00 F9 F0 FF 
18609     18 00 FF 0C 
1860d     E8 F5 F8 F7 
18611     F4 FB F8 F7 | 	byte	$00, $f9, $f0, $ff, $18, $00, $ff, $0c, $e8, $f5, $f8, $f7, $f4, $fb, $f8, $f7
18615     0E F0 F7 12 
18619     02 03 0F 18 
1861d     FD 23 10 05 
18621     0C 0A 0C 02 | 	byte	$0e, $f0, $f7, $12, $02, $03, $0f, $18, $fd, $23, $10, $05, $0c, $0a, $0c, $02
18625     F2 FD 14 00 
18629     F3 FD F7 F8 
1862d     EB FF F8 FB 
18631     EC FF 08 E4 | 	byte	$f2, $fd, $14, $00, $f3, $fd, $f7, $f8, $eb, $ff, $f8, $fb, $ec, $ff, $08, $e4
18635     FB 14 04 0F 
18639     10 F9 17 20 
1863d     10 12 09 27 
18641     10 FF 18 00 | 	byte	$fb, $14, $04, $0f, $10, $f9, $17, $20, $10, $12, $09, $27, $10, $ff, $18, $00
18645     F7 05 15 08 
18649     E9 F2 F7 01 
1864d     F0 ED FF 04 
18651     00 00 0D 00 | 	byte	$f7, $05, $15, $08, $e9, $f2, $f7, $01, $f0, $ed, $ff, $04, $00, $00, $0d, $00
18655     E7 FF 10 F0 
18659     F5 03 F8 E9 
1865d     FF 00 ED F3 
18661     F3 FF 13 04 | 	byte	$e7, $ff, $10, $f0, $f5, $03, $f8, $e9, $ff, $00, $ed, $f3, $f3, $ff, $13, $04
18665     EF FF 10 00 
18669     07 14 00 FB 
1866d     00 07 10 00 
18671     13 10 F0 0B | 	byte	$ef, $ff, $10, $00, $07, $14, $00, $fb, $00, $07, $10, $00, $13, $10, $f0, $0b
18675     14 1A 00 FF 
18679     0D 10 F8 FE 
1867d     FE FF 08 00 
18681     F5 07 00 FD | 	byte	$14, $1a, $00, $ff, $0d, $10, $f8, $fe, $fe, $ff, $08, $00, $f5, $07, $00, $fd
18685     F9 0F 14 04 
18689     00 FF 26 08 
1868d     FF 2D 20 FC 
18691     0A 12 08 F5 | 	byte	$f9, $0f, $14, $04, $00, $ff, $26, $08, $ff, $2d, $20, $fc, $0a, $12, $08, $f5
18695     F8 F7 F0 EB 
18699     00 EA F9 E0 
1869d     D7 F3 F8 F0 
186a1     F7 FF 0A 00 | 	byte	$f8, $f7, $f0, $eb, $00, $ea, $f9, $e0, $d7, $f3, $f8, $f0, $f7, $ff, $0a, $00
186a5     FF 16 10 0D 
186a9     14 0B 0A 01 
186ad     11 10 0D 08 
186b1     00 FE 0B 0A | 	byte	$ff, $16, $10, $0d, $14, $0b, $0a, $01, $11, $10, $0d, $08, $00, $fe, $0b, $0a
186b5     F9 FB 00 ED 
186b9     EF F3 07 08 
186bd     02 07 08 F3 
186c1     0B 00 FF 15 | 	byte	$f9, $fb, $00, $ed, $ef, $f3, $07, $08, $02, $07, $08, $f3, $0b, $00, $ff, $15
186c5     04 FF 10 F0 
186c9     F5 06 0A F8 
186cd     EF 0D 08 FB 
186d1     FA E7 FF 14 | 	byte	$04, $ff, $10, $f0, $f5, $06, $0a, $f8, $ef, $0d, $08, $fb, $fa, $e7, $ff, $14
186d5     03 08 F8 FF 
186d9     04 F7 0B 14 
186dd     08 EA F7 1C 
186e1     00 EB FF 00 | 	byte	$03, $08, $f8, $ff, $04, $f7, $0b, $14, $08, $ea, $f7, $1c, $00, $eb, $ff, $00
186e5     F8 F6 F7 FC 
186e9     F2 F5 F8 E0 
186ed     DF EA E4 E0 
186f1     EF F4 D8 D7 | 	byte	$f8, $f6, $f7, $fc, $f2, $f5, $f8, $e0, $df, $ea, $e4, $e0, $ef, $f4, $d8, $d7
186f5     FD 08 F0 FB 
186f9     00 03 0F 16 
186fd     08 07 1B 20 
18701     08 0F 14 08 | 	byte	$fd, $08, $f0, $fb, $00, $03, $0f, $16, $08, $07, $1b, $20, $08, $0f, $14, $08
18705     12 04 0D 0C 
18709     E8 EF 04 EA 
1870d     EF FE F8 EF 
18711     F9 FB FE 05 | 	byte	$12, $04, $0d, $0c, $e8, $ef, $04, $ea, $ef, $fe, $f8, $ef, $f9, $fb, $fe, $05
18715     04 F7 0F 00 
18719     FD 05 0D 13 
1871d     06 00 F1 FF 
18721     00 FC F8 F0 | 	byte	$04, $f7, $0f, $00, $fd, $05, $0d, $13, $06, $00, $f1, $ff, $00, $fc, $f8, $f0
18725     EF FF FC F3 
18729     FE FC F6 FF 
1872d     00 07 00 F9 
18731     F7 05 00 FD | 	byte	$ef, $ff, $fc, $f3, $fe, $fc, $f6, $ff, $00, $07, $00, $f9, $f7, $05, $00, $fd
18735     09 04 EE FF 
18739     00 FB 07 03 
1873d     00 F6 FD FA 
18741     E8 EB FD 0D | 	byte	$09, $04, $ee, $ff, $00, $fb, $07, $03, $00, $f6, $fd, $fa, $e8, $eb, $fd, $0d
18745     00 E9 F5 07 
18749     00 EF 0F 00 
1874d     FA 01 FD FF 
18751     0D 0B 15 08 | 	byte	$00, $e9, $f5, $07, $00, $ef, $0f, $00, $fa, $01, $fd, $ff, $0d, $0b, $15, $08
18755     0D 0D 08 00 
18759     F7 0B 10 F0 
1875d     E7 FC F1 FF 
18761     04 F0 EF FF | 	byte	$0d, $0d, $08, $00, $f7, $0b, $10, $f0, $e7, $fc, $f1, $ff, $04, $f0, $ef, $ff
18765     01 09 01 0F 
18769     18 07 1D 18 
1876d     08 0F 1A 14 
18771     1F 28 08 07 | 	byte	$01, $09, $01, $0f, $18, $07, $1d, $18, $08, $0f, $1a, $14, $1f, $28, $08, $07
18775     0C 00 F4 0F 
18779     04 EB FD E4 
1877d     DF F7 F8 EA 
18781     E8 E6 F3 0D | 	byte	$0c, $00, $f4, $0f, $04, $eb, $fd, $e4, $df, $f7, $f8, $ea, $e8, $e6, $f3, $0d
18785     FA FF F8 FF 
18789     0C 04 08 F0 
1878d     FF 0C 00 F6 
18791     FF 04 FA F8 | 	byte	$fa, $ff, $f8, $ff, $0c, $04, $08, $f0, $ff, $0c, $00, $f6, $ff, $04, $fa, $f8
18795     FC F6 F6 F7 
18799     05 0E 00 FB 
1879d     12 10 0C 02 
187a1     04 00 F7 FE | 	byte	$fc, $f6, $f6, $f7, $05, $0e, $00, $fb, $12, $10, $0c, $02, $04, $00, $f7, $fe
187a5     08 04 00 F2 
187a9     FF 08 02 00 
187ad     FF 18 00 FE 
187b1     FD 04 FA FF | 	byte	$08, $04, $00, $f2, $ff, $08, $02, $00, $ff, $18, $00, $fe, $fd, $04, $fa, $ff
187b5     05 00 F0 F3 
187b9     F6 F7 07 12 
187bd     00 E5 FF 10 
187c1     05 17 14 09 | 	byte	$05, $00, $f0, $f3, $f6, $f7, $07, $12, $00, $e5, $ff, $10, $05, $17, $14, $09
187c5     01 FA FF 00 
187c9     FB 09 04 04 
187cd     F8 EA EB EF 
187d1     13 08 ED 0F | 	byte	$01, $fa, $ff, $00, $fb, $09, $04, $04, $f8, $ea, $eb, $ef, $13, $08, $ed, $0f
187d5     08 F2 FF 16 
187d9     0E 0C 02 0B 
187dd     0C 08 06 08 
187e1     03 0B 0A F0 | 	byte	$08, $f2, $ff, $16, $0e, $0c, $02, $0b, $0c, $08, $06, $08, $03, $0b, $0a, $f0
187e5     F9 F4 F1 F1 
187e9     FF EC E4 E2 
187ed     EB F2 E9 EC 
187f1     F1 FB 02 F9 | 	byte	$f9, $f4, $f1, $f1, $ff, $ec, $e4, $e2, $eb, $f2, $e9, $ec, $f1, $fb, $02, $f9
187f5     F4 FF 1B 10 
187f9     00 0F 18 01 
187fd     0F 04 05 12 
18801     06 06 F8 FF | 	byte	$f4, $ff, $1b, $10, $00, $0f, $18, $01, $0f, $04, $05, $12, $06, $06, $f8, $ff
18805     00 EC F3 F8 
18809     EB F7 08 00 
1880d     F7 F2 F3 02 
18811     F5 FF FC F8 | 	byte	$00, $ec, $f3, $f8, $eb, $f7, $08, $00, $f7, $f2, $f3, $02, $f5, $ff, $fc, $f8
18815     FF 06 00 FD 
18819     00 FF 12 08 
1881d     F9 15 0A FA 
18821     FF 0B 08 F4 | 	byte	$ff, $06, $00, $fd, $00, $ff, $12, $08, $f9, $15, $0a, $fa, $ff, $0b, $08, $f4
18825     FF 08 E9 F3 
18829     FA F7 F6 F2 
1882d     F2 FD 0C F0 
18831     E7 FF 09 00 | 	byte	$ff, $08, $e9, $f3, $fa, $f7, $f6, $f2, $f2, $fd, $0c, $f0, $e7, $ff, $09, $00
18835     F6 FB FD 0B 
18839     08 FD F9 F7 
1883d     02 F0 F7 04 
18841     F4 FE 00 FC | 	byte	$f6, $fb, $fd, $0b, $08, $fd, $f9, $f7, $02, $f0, $f7, $04, $f4, $fe, $00, $fc
18845     FF 02 09 08 
18849     0D 10 F0 FF 
1884d     14 02 0F 10 
18851     FA FF 08 F8 | 	byte	$ff, $02, $09, $08, $0d, $10, $f0, $ff, $14, $02, $0f, $10, $fa, $ff, $08, $f8
18855     FF 00 F1 F6 
18859     EF FF 00 E8 
1885d     F7 04 ED FF 
18861     02 02 01 0B | 	byte	$ff, $00, $f1, $f6, $ef, $ff, $00, $e8, $f7, $04, $ed, $ff, $02, $02, $01, $0b
18865     14 02 02 09 
18869     0C 08 0F 10 
1886d     F4 F1 F7 0F 
18871     08 F2 FF FD | 	byte	$14, $02, $02, $09, $0c, $08, $0f, $10, $f4, $f1, $f7, $0f, $08, $f2, $ff, $fd
18875     F6 F6 FF 00 
18879     F7 09 00 F9 
1887d     FD 02 00 F6 
18881     F7 F8 FF 14 | 	byte	$f6, $f6, $ff, $00, $f7, $09, $00, $f9, $fd, $02, $00, $f6, $f7, $f8, $ff, $14
18885     00 FF 06 00 
18889     FF 11 00 FF 
1888d     0D 00 FF 15 
18891     04 F7 00 F7 | 	byte	$00, $ff, $06, $00, $ff, $11, $00, $ff, $0d, $00, $ff, $15, $04, $f7, $00, $f7
18895     FD FA FF 00 
18899     F9 FF FC 05 
1889d     08 0A 00 FF 
188a1     07 0A 00 0F | 	byte	$fd, $fa, $ff, $00, $f9, $ff, $fc, $05, $08, $0a, $00, $ff, $07, $0a, $00, $0f
188a5     0C 09 09 0C 
188a9     04 FF 04 FB 
188ad     08 00 F8 F2 
188b1     FE F8 E9 F7 | 	byte	$0c, $09, $09, $0c, $04, $ff, $04, $fb, $08, $00, $f8, $f2, $fe, $f8, $e9, $f7
188b5     FD F0 E9 EB 
188b9     FF 00 FB 00 
188bd     FF 0E 00 FF 
188c1     0C 00 FB 03 | 	byte	$fd, $f0, $e9, $eb, $ff, $00, $fb, $00, $ff, $0e, $00, $ff, $0c, $00, $fb, $03
188c5     08 F8 FF 00 
188c9     EA EF 05 00 
188cd     EF FB F6 FB 
188d1     FF 09 06 0A | 	byte	$08, $f8, $ff, $00, $ea, $ef, $05, $00, $ef, $fb, $f6, $fb, $ff, $09, $06, $0a
188d5     08 07 02 FE 
188d9     05 04 00 FB 
188dd     FC EC F5 F5 
188e1     FF 00 F6 F9 | 	byte	$08, $07, $02, $fe, $05, $04, $00, $fb, $fc, $ec, $f5, $f5, $ff, $00, $f6, $f9
188e5     F7 FF 08 FA 
188e9     F1 0B 0A 00 
188ed     FC F1 FF 00 
188f1     F5 FF 10 00 | 	byte	$f7, $ff, $08, $fa, $f1, $0b, $0a, $00, $fc, $f1, $ff, $00, $f5, $ff, $10, $00
188f5     F7 05 05 0B 
188f9     00 FF 16 08 
188fd     01 06 00 F8 
18901     F3 FD 0F 10 | 	byte	$f7, $05, $05, $0b, $00, $ff, $16, $08, $01, $06, $00, $f8, $f3, $fd, $0f, $10
18905     00 F7 0B 08 
18909     05 09 12 08 
1890d     09 0C 05 04 
18911     05 0B 0D 08 | 	byte	$00, $f7, $0b, $08, $05, $09, $12, $08, $09, $0c, $05, $04, $05, $0b, $0d, $08
18915     05 09 00 F5 
18919     FB 05 F4 F5 
1891d     04 00 F4 F4 
18921     F1 FB E2    | 	byte	$05, $09, $00, $f5, $fb, $05, $f4, $f5, $04, $00, $f4, $f4, $f1, $fb, $e2
18924                 | 	alignl
18924                 | _hng030rm_spin2_dat_
18924     00 00 00 00 
18928     00 00 00 00 
1892c     00 00 00 00 
18930     00 00 00 00 
18934     00 00 00    | vga_font       file "vgafont.def"
18937     7E 81 A5 81 
1893b     81 BD 99 81 
1893f     81 7E 00 00 
18943     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
18947     7E FF DB FF 
1894b     FF C3 E7 FF 
1894f     FF 7E 00 00 
18953     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
18957     00 36 7F 7F 
1895b     7F 7F 3E 1C 
1895f     08 00 00 00 
18963     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
18967     00 08 1C 3E 
1896b     7F 3E 1C 08 
1896f     00 00 00 00 
18973     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
18977     18 3C 3C E7 
1897b     E7 E7 18 18 
1897f     3C 00 00 00 
18983     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
18987     18 3C 7E FF 
1898b     FF 7E 18 18 
1898f     3C 00 00 00 
18993     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
18997     00 00 00 18 
1899b     3C 3C 18 00 
1899f     00 00 00 00 
189a3     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
189a7     FF FF FF E7 
189ab     C3 C3 E7 FF 
189af     FF FF FF FF 
189b3     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
189b7     00 00 3C 66 
189bb     42 42 66 3C 
189bf     00 00 00 00 
189c3     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
189c7     FF FF C3 99 
189cb     BD BD 99 C3 
189cf     FF FF FF FF 
189d3     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
189d7     78 70 58 4C 
189db     1E 33 33 33 
189df     33 1E 00 00 
189e3     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
189e7     3C 66 66 66 
189eb     66 3C 18 7E 
189ef     18 18 00 00 
189f3     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
189f7     FC CC FC 0C 
189fb     0C 0C 0C 0E 
189ff     0F 07 00 00 
18a03     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
18a07     FE C6 FE C6 
18a0b     C6 C6 C6 E6 
18a0f     E7 67 03 00 
18a13     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
18a17     18 18 DB 3C 
18a1b     E7 3C DB 18 
18a1f     18 00 00 00 
18a23     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
18a27     03 07 0F 1F 
18a2b     7F 1F 0F 07 
18a2f     03 01 00 00 
18a33     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
18a37     60 70 78 7C 
18a3b     7F 7C 78 70 
18a3f     60 40 00 00 
18a43     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
18a47     18 3C 7E 18 
18a4b     18 18 7E 3C 
18a4f     18 00 00 00 
18a53     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
18a57     66 66 66 66 
18a5b     66 66 66    | 	byte	$66[7]
18a5e     00 66 66 00 
18a62     00 00 00 00 
18a66     00 FE DB DB 
18a6a     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
18a6e     D8 D8 D8 00 
18a72     00 00 00 3E 
18a76     63 06 1C 36 
18a7a     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
18a7e     30 63 3E 00 
18a82     00 00 00 00 
18a86     00 00 00 00 
18a8a     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
18a8e     7F 7F 7F 00 
18a92     00 00 00 00 
18a96     00 18 3C 7E 
18a9a     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
18a9e     3C 18 7E 00 
18aa2     00 00 00 00 
18aa6     00 18 3C 7E 
18aaa     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
18aae     18 18 18 00 
18ab2     00 00 00 00 
18ab6     00 18 18 18 
18aba     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18abe     7E 3C 18 00 
18ac2     00 00 00 00 
18ac6     00 00 00 18 
18aca     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
18ace     00 00 00 00 
18ad2     00 00 00 00 
18ad6     00 00 00    | 	byte	$00[11]
18ad9     0C 06 7F 06 
18add     0C 00 00 00 
18ae1     00 00 00 00 
18ae5     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18ae9     00 03 03 03 
18aed     7F 00 00 00 
18af1     00 00 00 00 
18af5     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18af9     14 36 7F 36 
18afd     14 00 00 00 
18b01     00 00 00 00 
18b05     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
18b09     1C 1C 3E 3E 
18b0d     7F 7F 00 00 
18b11     00 00 00 00 
18b15     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
18b19     7F 3E 3E 1C 
18b1d     1C 08 00 00 
18b21     00 00 00 00 
18b25     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18b29     00 00 00 00 
18b2d     00 00 00 00 
18b31     00 00 00 00 
18b35     00 00       | 	byte	$00[14]
18b37     18 3C 3C 3C 
18b3b     18 18 18 00 
18b3f     18 18 00 00 
18b43     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
18b47     66 24 00 00 
18b4b     00 00 00 00 
18b4f     00 00 00 00 
18b53     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18b57     00 36 36 7F 
18b5b     36 36 36 7F 
18b5f     36 36 00 00 
18b63     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
18b67     3E 63 43 03 
18b6b     3E 60 60 61 
18b6f     63 3E 18 18 
18b73     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
18b77     00 00 43 63 
18b7b     30 18 0C 06 
18b7f     63 61 00 00 
18b83     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
18b87     1C 36 36 1C 
18b8b     6E 3B 33 33 
18b8f     33 6E 00 00 
18b93     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
18b97     0C 0C 0C 06 
18b9b     00 00 00 00 
18b9f     00 00 00 00 
18ba3     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18ba7     30 18 0C 0C 
18bab     0C 0C 0C 0C 
18baf     18 30 00 00 
18bb3     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
18bb7     0C 18 30 30 
18bbb     30 30 30 30 
18bbf     18 0C 00 00 
18bc3     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
18bc7     00 00 00 66 
18bcb     3C FF 3C 66 
18bcf     00 00 00 00 
18bd3     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
18bd7     00 00 00 18 
18bdb     18 7E 18 18 
18bdf     00 00 00 00 
18be3     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
18be7     00 00 00 00 
18beb     00 00 00 00 | 	byte	$00[8]
18bef     18 18 18 0C 
18bf3     00 00 00 00 
18bf7     00 00 00 00 
18bfb     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
18bff     00 00 00 00 
18c03     00 00 00 00 
18c07     00 00 00 00 
18c0b     00 00 00 00 | 	byte	$00[16]
18c0f     18 18 00 00 
18c13     00 00 00 00 
18c17     00 00 40 60 
18c1b     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
18c1f     03 01 00 00 
18c23     00 00 00 00 
18c27     1C 36 63 63 
18c2b     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
18c2f     36 1C 00 00 
18c33     00 00 00 00 
18c37     18 1C 1E 18 
18c3b     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
18c3f     18 7E 00 00 
18c43     00 00 00 00 
18c47     3E 63 60 30 
18c4b     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
18c4f     63 7F 00 00 
18c53     00 00 00 00 
18c57     3E 63 60 60 
18c5b     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
18c5f     63 3E 00 00 
18c63     00 00 00 00 
18c67     30 38 3C 36 
18c6b     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
18c6f     30 78 00 00 
18c73     00 00 00 00 
18c77     7F 03 03 03 
18c7b     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
18c7f     63 3E 00 00 
18c83     00 00 00 00 
18c87     1C 06 03 03 
18c8b     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
18c8f     63 3E 00 00 
18c93     00 00 00 00 
18c97     7F 63 60 60 
18c9b     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
18c9f     0C 0C 00 00 
18ca3     00 00 00 00 
18ca7     3E 63 63 63 
18cab     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
18caf     63 3E 00 00 
18cb3     00 00 00 00 
18cb7     3E 63 63 63 
18cbb     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
18cbf     30 1E 00 00 
18cc3     00 00 00 00 
18cc7     00 00 00 18 
18ccb     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
18ccf     18 18 00 00 
18cd3     00 00 00 00 
18cd7     00 00 00 18 
18cdb     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
18cdf     18 18 0C 00 
18ce3     00 00 00 00 
18ce7     00 60 30 18 
18ceb     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
18cef     30 60 00 00 
18cf3     00 00 00 00 
18cf7     00 00 00 7E 
18cfb     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
18cff     00 00 00 00 
18d03     00 00 00 00 
18d07     00          | 	byte	$00[9]
18d08     06 0C 18 30 
18d0c     60 30 18 0C 
18d10     06 00 00 00 
18d14     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
18d18     63 63 30 18 
18d1c     18 18 00 18 
18d20     18 00 00 00 
18d24     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
18d28     3E 63 63 7B 
18d2c     7B 7B 3B 03 
18d30     3E 00 00 00 
18d34     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
18d38     1C 36 63 63 
18d3c     7F 63 63 63 
18d40     63 00 00 00 
18d44     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
18d48     66 66 66 3E 
18d4c     66 66 66 66 
18d50     3F 00 00 00 
18d54     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
18d58     66 43 03 03 
18d5c     03 03 43 66 
18d60     3C 00 00 00 
18d64     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
18d68     36 66 66 66 
18d6c     66 66 66 36 
18d70     1F 00 00 00 
18d74     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
18d78     66 46 16 1E 
18d7c     16 06 46 66 
18d80     7F 00 00 00 
18d84     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
18d88     66 46 16 1E 
18d8c     16 06 06 06 
18d90     0F 00 00 00 
18d94     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
18d98     66 43 03 03 
18d9c     7B 63 63 66 
18da0     5C 00 00 00 
18da4     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
18da8     63 63 63 7F 
18dac     63 63 63 63 
18db0     63 00 00 00 
18db4     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
18db8     18 18 18 18 
18dbc     18 18 18 18 | 	byte	$18[8]
18dc0     3C 00 00 00 
18dc4     00 00 00 78 
18dc8     30 30 30 30 
18dcc     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
18dd0     1E 00 00 00 
18dd4     00 00 00 67 
18dd8     66 66 36 1E 
18ddc     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
18de0     67 00 00 00 
18de4     00 00 00 0F 
18de8     06 06 06 06 
18dec     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
18df0     7F 00 00 00 
18df4     00 00 00 63 
18df8     77 7F 7F 6B 
18dfc     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
18e00     63 00 00 00 
18e04     00 00 00 63 
18e08     67 6F 7F 7B 
18e0c     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
18e10     63 00 00 00 
18e14     00 00 00 3E 
18e18     63 63 63 63 
18e1c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
18e20     3E 00 00 00 
18e24     00 00 00 3F 
18e28     66 66 66 3E 
18e2c     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
18e30     0F 00 00 00 
18e34     00 00 00 3E 
18e38     63 63 63 63 
18e3c     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
18e40     3E 30 70 00 
18e44     00 00 00 3F 
18e48     66 66 66 3E 
18e4c     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
18e50     67 00 00 00 
18e54     00 00 00 3E 
18e58     63 63 06 1C 
18e5c     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
18e60     3E 00 00 00 
18e64     00 00 00 7E 
18e68     7E 5A 18 18 
18e6c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
18e70     3C 00 00 00 
18e74     00 00 00 63 
18e78     63 63 63 63 
18e7c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
18e80     3E 00 00 00 
18e84     00 00 00 63 
18e88     63 63 63 63 
18e8c     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
18e90     08 00 00 00 
18e94     00 00 00 63 
18e98     63 63 63 6B 
18e9c     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
18ea0     36 00 00 00 
18ea4     00 00 00 63 
18ea8     63 36 3E 1C 
18eac     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
18eb0     63 00 00 00 
18eb4     00 00 00 66 
18eb8     66 66 66 3C 
18ebc     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
18ec0     3C 00 00 00 
18ec4     00 00 00 7F 
18ec8     63 61 30 18 
18ecc     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
18ed0     7F 00 00 00 
18ed4     00 00 00 3C 
18ed8     0C 0C 0C 0C 
18edc     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
18ee0     3C 00 00 00 
18ee4     00 00 00 00 
18ee8     01 03 07 0E 
18eec     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
18ef0     40 00 00 00 
18ef4     00 00 00 3C 
18ef8     30 30 30 30 
18efc     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
18f00     3C 00 00 00 
18f04     1C 36 00 00 
18f08     00 00 00 00 
18f0c     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18f10     00 00 00 00 
18f14     00 00 00 00 
18f18     00 00 00 00 
18f1c     00 00 00 00 
18f20     00          | 	byte	$00[17]
18f21     FF 00 00 0C 
18f25     18 00 00 00 
18f29     00 00 00 00 
18f2d     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18f31     00 00 00 00 
18f35     00 00 00 00 
18f39     00          | 	byte	$00[9]
18f3a     1E 30 3E 33 
18f3e     33 33 6E 00 
18f42     00 00 00 00 
18f46     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
18f4a     1E 36 66 66 
18f4e     66 66 3E 00 
18f52     00 00 00 00 
18f56     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
18f5a     3E 63 03 03 
18f5e     03 63 3E 00 
18f62     00 00 00 00 
18f66     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
18f6a     3C 36 33 33 
18f6e     33 33 6E 00 
18f72     00 00 00 00 
18f76     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
18f7a     3E 63 7F 03 
18f7e     03 63 3E 00 
18f82     00 00 00 00 
18f86     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
18f8a     0C 1E 0C 0C 
18f8e     0C 0C 1E 00 
18f92     00 00 00 00 
18f96     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
18f9a     6E 33 33 33 
18f9e     33 33 3E 30 
18fa2     33 1E 00 00 
18fa6     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
18faa     36 6E 66 66 
18fae     66 66 67 00 
18fb2     00 00 00 00 
18fb6     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
18fba     1C 18 18 18 
18fbe     18 18 3C 00 
18fc2     00 00 00 00 
18fc6     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
18fca     70 60 60 60 
18fce     60 60 60 66 
18fd2     66 3C 00 00 
18fd6     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
18fda     66 36 1E 1E 
18fde     36 66 67 00 
18fe2     00 00 00 00 
18fe6     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
18fea     18 18 18 18 
18fee     18 18       | 	byte	$18[6]
18ff0     3C 00 00 00 
18ff4     00 00 00 00 
18ff8     00 00 37 7F 
18ffc     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
19000     63 00 00 00 
19004     00 00 00 00 
19008     00 00 3B 66 
1900c     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
19010     66 00 00 00 
19014     00 00 00 00 
19018     00 00 3E 63 
1901c     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
19020     3E 00 00 00 
19024     00 00 00 00 
19028     00 00 3B 66 
1902c     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
19030     3E 06 06 0F 
19034     00 00 00 00 
19038     00 00 6E 33 
1903c     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
19040     3E 30 30 78 
19044     00 00 00 00 
19048     00 00 3B 6E 
1904c     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
19050     0F 00 00 00 
19054     00 00 00 00 
19058     00 00 3E 63 
1905c     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
19060     3E 00 00 00 
19064     00 00 00 08 
19068     0C 0C 3F 0C 
1906c     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
19070     38 00 00 00 
19074     00 00 00 00 
19078     00 00 33 33 
1907c     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
19080     6E 00 00 00 
19084     00 00 00 00 
19088     00 00 63 63 
1908c     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
19090     1C 00 00 00 
19094     00 00 00 00 
19098     00 00 63 63 
1909c     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
190a0     36 00 00 00 
190a4     00 00 00 00 
190a8     00 00 63 36 
190ac     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
190b0     63 00 00 00 
190b4     00 00 00 00 
190b8     00 00 63 63 
190bc     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
190c0     7E 60 30 1F 
190c4     00 00 00 00 
190c8     00 00 7F 33 
190cc     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
190d0     7F 00 00 00 
190d4     00 00 00 70 
190d8     18 18 18 0E 
190dc     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
190e0     70 00 00 00 
190e4     00 00 00 18 
190e8     18 18 18 18 
190ec     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
190f0     18 00 00 00 
190f4     00 00 00 0E 
190f8     18 18 18 70 
190fc     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
19100     0E 00 00 00 
19104     6E 3B 00 00 
19108     00 00 00 00 
1910c     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19110     00 00 00 00 
19114     00 00 00 00 
19118     00 00       | 	byte	$00[10]
1911a     08 1C 36 63 
1911e     63 63 7F 00 
19122     00 00 00 00 
19126     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
1912a     03 03 03 03 
1912e     43 66 3C 18 
19132     30 1E 00 00 
19136     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
1913a     33 33 33 33 
1913e     33 33       | 	byte	$33[6]
19140     6E 00 00 00 
19144     00 00 60 30 
19148     18 00 3E 63 
1914c     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
19150     3E 00 00 00 
19154     00 00 08 1C 
19158     36 00 1E 30 
1915c     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
19160     6E 00 00 00 
19164     00 00 00 00 
19168     33 00 1E 30 
1916c     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
19170     6E 00 00 00 
19174     00 00 1C 36 
19178     1C 00 33 33 
1917c     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
19180     6E 00 00 00 
19184     00 00 60 30 
19188     18 00 3E 63 
1918c     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
19190     3E 00 00 00 
19194     00 00 00 00 
19198     00 00 3E 63 
1919c     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
191a0     3E 18 30 1E 
191a4     00 00 00 1C 
191a8     58 78 38 18 
191ac     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
191b0     3C 00 00 00 
191b4     00 00 00 00 
191b8     63 00 3E 63 
191bc     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
191c0     3E 00 00 00 
191c4     66 33 00 3E 
191c8     63 63 63 63 
191cc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
191d0     3E 00 00 00 
191d4     00 00 CC 66 
191d8     33 00 3E 63 
191dc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
191e0     3E 00 00 00 
191e4     00 00 18 3C 
191e8     66 00 1C 18 
191ec     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
191f0     3C 00 00 00 
191f4     30 18 00 7F 
191f8     63 61 30 18 
191fc     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
19200     7F 00 00 00 
19204     00 63 00 08 
19208     1C 36 63 63 
1920c     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
19210     63 00 00 00 
19214     30 18 00 3C 
19218     66 43 03 03 
1921c     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
19220     3C 00 00 00 
19224     30 18 00 7F 
19228     66 46 16 1E 
1922c     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
19230     7F 00 00 00 
19234     0C 06 00 0F 
19238     06 06 06 06 
1923c     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
19240     7F 00 00 00 
19244     30 18 00 1C 
19248     18 18 18 18 
1924c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
19250     3C 00 00 00 
19254     00 00 08 1C 
19258     36 00 3E 63 
1925c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
19260     3E 00 00 00 
19264     00 00 00 00 
19268     63 00 3E 63 
1926c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
19270     3E 00 00 00 
19274     00 00 00 6F 
19278     46 26 06 06 
1927c     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
19280     7F 00 00 00 
19284     00 00 00 6E 
19288     4C 2C 0C 0C 
1928c     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
19290     1E 00 00 00 
19294     30 18 00 3E 
19298     63 63 06 1C 
1929c     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
192a0     3E 00 00 00 
192a4     00 00 60 30 
192a8     18 00 3E 63 
192ac     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
192b0     3E 00 00 00 
192b4     00 63 00 3E 
192b8     63 63 63 63 
192bc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
192c0     3E 00 00 00 
192c4     00 63 00 63 
192c8     63 63 63 63 
192cc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
192d0     3E 00 00 00 
192d4     6C 38 00 7E 
192d8     7E 5A 18 18 
192dc     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
192e0     3C 00 00 00 
192e4     00 00 60 48 
192e8     2C 0C 3F 0C 
192ec     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
192f0     38 00 00 00 
192f4     00 00 00 0F 
192f8     26 36 1E 0E 
192fc     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
19300     7F 00 00 00 
19304     00 00 00 00 
19308     00 63 36 1C 
1930c     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
19310     00 00 00 00 
19314     00 00       | 	byte	$00[6]
19316     36 1C 08 00 
1931a     3E 63 03 03 
1931e     03 63 3E 00 
19322     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
19326     30 18 0C 00 
1932a     1E 30 3E 33 
1932e     33 33 6E 00 
19332     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
19336     60 30 18 00 
1933a     1C 18 18 18 
1933e     18 18 3C 00 
19342     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
19346     60 30 18 00 
1934a     3E 63 63 63 
1934e     63 63 3E 00 
19352     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
19356     30 18 0C 00 
1935a     33 33 33 33 
1935e     33 33 6E 00 
19362     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
19366     00 08 1C 36 
1936a     63 63 7F 63 
1936e     63 63 63 18 
19372     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
19376     00 00 00 00 
1937a     1E 30 3E 33 
1937e     33 33 6E 18 
19382     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
19386     00 7F 63 61 
1938a     30 18 0C 06 
1938e     43 63 7F 00 
19392     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
19396     36 1C 08 00 
1939a     7F 33 18 0C 
1939e     06 63 7F 00 
193a2     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
193a6     00 7F 66 46 
193aa     16 1E 16 06 
193ae     46 66 7F 18 
193b2     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
193b6     00 00 00 00 
193ba     3E 63 7F 03 
193be     03 63 3E 18 
193c2     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
193c6     00 3C 66 03 
193ca     1F 03 0F 03 
193ce     03 66 3C 00 
193d2     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
193d6     60 30 18 00 
193da     7F 33 18 0C 
193de     06 63 7F 00 
193e2     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
193e6     00 3C 66 43 
193ea     03 03 03 03 
193ee     43 66 3C 00 
193f2     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
193f6     00 00 00 00 
193fa     3E 63 06 1C 
193fe     30 63 3E 18 
19402     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
19406     00 00 00 00 
1940a     00 00       | 	byte	$00[6]
1940c     6C 36 1B 36 
19410     6C 00 00 00 
19414     00 00 00 00 
19418     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1941c     1B 36 6C 36 
19420     1B 00 00 00 
19424     88 22 88 22 
19428     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
1942c     88 22 88 22 
19430     88 22 88 22 
19434     AA 55 AA 55 
19438     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
1943c     AA 55 AA 55 
19440     AA 55 AA 55 
19444     BB EE BB EE 
19448     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
1944c     BB EE BB EE 
19450     BB EE BB EE 
19454     18 18 18 18 
19458     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
1945c     18 18 18 18 
19460     18 18 18 18 
19464     18 18 18 18 
19468     18 18 18    | 	byte	$18[15]
1946b     1F 18 18 18 
1946f     18 18 18 18 
19473     18 30 18 00 
19477     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1947b     63 7F 63 63 
1947f     63 63 00 00 
19483     00 1C 36 00 
19487     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
1948b     63 7F 63 63 
1948f     63 63 00 00 
19493     00 36 1C 00 
19497     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
1949b     1E 16 06 46 
1949f     66 7F 00 00 
194a3     00 00 00 00 
194a7     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
194ab     1C 30 60 63 
194af     63 3E 18 30 
194b3     1E 6C 6C 6C 
194b7     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
194bb     6F 6C 6C 6C 
194bf     6C 6C 6C 6C 
194c3     6C 6C 6C 6C 
194c7     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
194cb     6C 6C 6C 6C 
194cf     6C 6C 6C 6C 
194d3     6C          | 	byte	$6c[9]
194d4     00 00 00 00 
194d8     00          | 	byte	$00[5]
194d9     7F 60 6F 6C 
194dd     6C 6C 6C 6C 
194e1     6C 6C 6C 6C 
194e5     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
194e9     6F 60 7F 00 
194ed     00 00 00 00 
194f1     00 00 00 18 
194f5     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
194f9     61 30 18 0C 
194fd     06 43 63 7F 
19501     00 00 00 00 
19505     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
19509     00 7F 33 18 
1950d     0C 06 63 7F 
19511     00 00 00 00 
19515     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
19519     00 00 1F 18 
1951d     18 18 18 18 
19521     18 18 18 18 
19525     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19529     18 18 F8 00 
1952d     00 00 00 00 
19531     00 00 00 18 
19535     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19539     18 18 FF 00 
1953d     00 00 00 00 
19541     00 00 00 00 
19545     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19549     00 00 FF 18 
1954d     18 18 18 18 
19551     18 18 18 18 
19555     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19559     18 18 F8 18 
1955d     18 18 18 18 
19561     18 18 18 00 
19565     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
19569     00 00 FF 00 
1956d     00 00 00 00 
19571     00 00 00 18 
19575     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19579     18 18 FF 18 
1957d     18 18 18 18 
19581     18 18 18 63 
19585     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
19589     36 63 63 7F 
1958d     63 63 63 63 
19591     00 00 00 00 
19595     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
19599     00 1E 30 3E 
1959d     33 33 33 6E 
195a1     00 00 00 6C 
195a5     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
195a9     EC 0C FC 00 
195ad     00 00 00 00 
195b1     00 00 00 00 
195b5     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
195b9     FC 0C EC 6C 
195bd     6C 6C 6C 6C 
195c1     6C 6C 6C 6C 
195c5     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
195c9     EF 00 FF 00 
195cd     00 00 00 00 
195d1     00 00 00 00 
195d5     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
195d9     FF 00 EF 6C 
195dd     6C 6C 6C 6C 
195e1     6C 6C 6C 6C 
195e5     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
195e9     EC 0C EC 6C 
195ed     6C 6C 6C 6C 
195f1     6C 6C 6C 00 
195f5     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
195f9     FF 00 FF 00 
195fd     00 00 00 00 
19601     00 00 00 6C 
19605     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
19609     EF 00 EF 6C 
1960d     6C 6C 6C 6C 
19611     6C 6C 6C 00 
19615     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
19619     63 3E 63 63 
1961d     63 63 3E 63 
19621     00 00 00 00 
19625     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
19629     30 3C 36 33 
1962d     33 33 33 6E 
19631     00 00 00 00 
19635     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
19639     66 66 6F 66 
1963d     66 66 36 1F 
19641     00 00 00 36 
19645     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
19649     66 66 66 66 
1964d     66 66       | 	byte	$66[6]
1964f     36 1F 00 00 
19653     00 00 63 00 
19657     7F 66 46 16 
1965b     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
1965f     66 7F 00 00 
19663     00 6C 38 00 
19667     38 30 30 3C 
1966b     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
1966f     33 6E 00 00 
19673     00 36 1C 00 
19677     63 67 6F 7F 
1967b     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
1967f     63 63 00 00 
19683     00 30 18 00 
19687     3C 18 18 18 
1968b     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1968f     18 3C 00 00 
19693     00 3C 66 00 
19697     3C 18 18 18 
1969b     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1969f     18 3C 00 00 
196a3     00 00 00 36 
196a7     1C 08 00 3E 
196ab     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
196af     63 3E 00 00 
196b3     00 18 18 18 
196b7     18 18 18 18 
196bb     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
196bf     00 00 00 00 
196c3     00 00 00 00 
196c7     00 00 00 00 | 	byte	$00[12]
196cb     F8 18 18 18 
196cf     18 18 18 18 
196d3     18 FF FF FF 
196d7     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
196db     FF FF FF FF 
196df     FF FF FF FF 
196e3     FF          | 	byte	$ff[9]
196e4     00 00 00 00 
196e8     00 00 00    | 	byte	$00[7]
196eb     FF FF FF FF 
196ef     FF FF FF FF 
196f3     FF          | 	byte	$ff[9]
196f4     00 00 00 7E 
196f8     7E 5A 18 18 
196fc     18 18 18 18 
19700     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
19704     1C 36 1C 63 
19708     63 63 63 63 
1970c     63 63 63 63 
19710     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19714     FF FF FF FF 
19718     FF FF FF    | 	byte	$ff[7]
1971b     00 00 00 00 
1971f     00 00 00 00 
19723     00          | 	byte	$00[9]
19724     30 18 00 3E 
19728     63 63 63 63 
1972c     63 63 63 63 
19730     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19734     00 00 00 1E 
19738     33 33 33 1B 
1973c     33 63 63 63 
19740     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
19744     1C 36 00 3E 
19748     63 63 63 63 
1974c     63 63 63 63 
19750     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19754     30 18 00 63 
19758     67 6F 7F 7B 
1975c     73 63 63 63 
19760     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
19764     00 00 60 30 
19768     18 00 3B 66 
1976c     66 66 66 66 
19770     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19774     00 00 36 1C 
19778     08 00 3B 66 
1977c     66 66 66 66 
19780     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19784     36 1C 00 3E 
19788     63 63 06 1C 
1978c     30 60 63 63 
19790     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
19794     00 00 36 1C 
19798     08 00 3E 63 
1979c     06 1C 30 63 
197a0     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
197a4     30 18 00 3F 
197a8     66 66 66 3E 
197ac     36 66 66 66 
197b0     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
197b4     30 18 00 63 
197b8     63 63 63 63 
197bc     63 63 63 63 
197c0     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
197c4     00 00 60 30 
197c8     18 00 3B 6E 
197cc     66 06 06 06 
197d0     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
197d4     66 33 00 63 
197d8     63 63 63 63 
197dc     63 63 63 63 
197e0     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
197e4     00 00 60 30 
197e8     18 00 63 63 
197ec     63 63 63 63 
197f0     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
197f4     30 18 00 66 
197f8     66 66 66 3C 
197fc     18 18 18 18 
19800     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
19804     00 00 00 08 
19808     0C 0C 3F 0C 
1980c     0C 0C 0C 6C 
19810     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
19814     30 18 00 00 
19818     00 00 00 00 
1981c     00 00 00 00 
19820     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19824     00 00 00 00 
19828     00 00 00 00 | 	byte	$00[8]
1982c     7F 00 00 00 
19830     00 00 00 00 
19834     66 33 00 00 
19838     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
1983c     00 00 00 00 
19840     00 00 00 00 
19844     00 00 00 00 
19848     00 00 00 00 
1984c     00 00 00 00 
19850     00          | 	byte	$00[21]
19851     0C 06 3C 36 
19855     1C 00 00 00 
19859     00 00 00 00 
1985d     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19861     00 00 00 63 
19865     3E 00 00 00 
19869     00 00 00 00 
1986d     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19871     00 00 00 00 
19875     3E 63 06 1C 
19879     36 63 63 36 
1987d     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
19881     00 00 00 00 
19885     00 00 00 00 | 	byte	$00[8]
19889     18 00 7E 00 
1988d     18 00 00 00 
19891     00 00 00 00 
19895     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19899     00 00 00 00 
1989d     00 00 00 00 | 	byte	$00[8]
198a1     18 30 1E 00 
198a5     00 00 1C 36 
198a9     36 1C 00 00 
198ad     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
198b1     00 00 00 00 
198b5     63 00 00 00 
198b9     00 00 00 00 
198bd     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
198c1     00 00 00 18 
198c5     18 00 00 00 
198c9     00 00 00 00 
198cd     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
198d1     00 00 00 00 
198d5     00          | 	byte	$00[5]
198d6     CC 66 33 00 
198da     33 33 33 33 
198de     33 33 6E 00 
198e2     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
198e6     00 3F 66 66 
198ea     66 3E 36 66 
198ee     66 66 6F 00 
198f2     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
198f6     36 1C 08 00 
198fa     3B 6E 66 06 
198fe     06 06 0F 00 
19902     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
19906     00 00 00 7E 
1990a     7E 7E 7E 7E 
1990e     7E 7E 00 00 
19912     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
19916     00 00 00 00 
1991a     00 00 00 00 
1991e     00 00 00 00 
19922     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19924     00 00 00 00 
      ...             
19954     00 00 00 00 
19958     00 00 00    | st_font        file "st4font.def"
1995b     FF FF 00 00 
1995f     00 00 00 00 
19963     00 18 18 18 
19967     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1996b     18 18 18 18 
1996f     18 18 18 18 
19973     18          | 	byte	$18[9]
19974     00 00 00 00 
19978     00 00 00    | 	byte	$00[7]
1997b     FF FF 18 18 
1997f     18 18 18 18 
19983     18 18 18 18 
19987     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1998b     FF FF 00 00 
1998f     00 00 00 00 
19993     00 18 18 18 
19997     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1999b     1F 1F 18 18 
1999f     18 18 18 18 
199a3     18 18 18 18 
199a7     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
199ab     F8 F8 18 18 
199af     18 18 18 18 
199b3     18 00 00 00 
199b7     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
199bb     1F 1F 18 18 
199bf     18 18 18 18 
199c3     18 00 00 00 
199c7     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
199cb     F8 F8 18 18 
199cf     18 18 18 18 
199d3     18 18 18 18 
199d7     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
199db     1F 1F 00 00 
199df     00 00 00 00 
199e3     00 18 18 18 
199e7     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
199eb     F8 F8 00 00 
199ef     00 00 00 00 
199f3     00 18 18 18 
199f7     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
199fb     FF FF 18 18 
199ff     18 18 18 18 
19a03     18 00 00 18 
19a07     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
19a0b     66 7E 7E 66 
19a0f     66 66 66 30 
19a13     18 00 00 7E 
19a17     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
19a1b     3E 06 06 06 
19a1f     06 7E 7E 18 
19a23     0C 30 18 3C 
19a27     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
19a2b     06 06 06 66 
19a2f     66 7E 3C 00 
19a33     00 30 18 66 
19a37     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
19a3b     7E 7E 76 76 
19a3f     66 66 66 00 
19a43     00 30 18 7C 
19a47     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
19a4b     1C 38 70 60 
19a4f     60 7E 3E 00 
19a53     00 30 18 7E 
19a57     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
19a5b     18 0C 0C 06 
19a5f     06 7E 7E 00 
19a63     00 18 18 00 
19a67     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
19a6b     18 18 0C 0C 
19a6f     06 7E 7E 00 
19a73     00 30 18 3C 
19a77     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
19a7b     66 66 66 66 
19a7f     66          | 	byte	$66[5]
19a80     7E 3C 00 00 
19a84     00 00 06 06 
19a88     06 06 16 1E 
19a8c     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
19a90     7E 7E 00 00 
19a94     00 00 00 00 
19a98     00 3C 7C 60 
19a9c     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
19aa0     7E 7C 30 18 
19aa4     00 00 00 00 
19aa8     00 3C 7E 66 
19aac     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
19ab0     7E 7C 18 0C 
19ab4     00 00 30 18 
19ab8     00 3C 3E 06 
19abc     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
19ac0     7E 7C 00 00 
19ac4     00 00 30 18 
19ac8     00 3E 7E 66 
19acc     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
19ad0     66 66 00 00 
19ad4     00 00 30 18 
19ad8     00 7C 7E 06 
19adc     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
19ae0     7E 3E 00 00 
19ae4     00 00 30 18 
19ae8     00 7E 7E 30 
19aec     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
19af0     7E 7E 00 00 
19af4     00 00 18 18 
19af8     00 7E 7E 30 
19afc     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
19b00     7E 7E 00 00 
19b04     00 00 30 18 
19b08     00 3C 7E 66 
19b0c     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
19b10     7E 3C 00 00 
19b14     00 00 1C 1C 
19b18     18 18 38 3C 
19b1c     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
19b20     3C 3C 00 00 
19b24     00 00 00 00 
19b28     00 00 00 00 
19b2c     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19b30     00 00 00 00 
19b34     00 00       | 	byte	$00[6]
19b36     18 18 18 18 
19b3a     18 18 18 18 | 	byte	$18[8]
19b3e     00 00 18 18 
19b42     00 00 00 00 
19b46     66 66 66 66 
19b4a     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
19b4e     00 00 00 00 
19b52     00 00 00 00 
19b56     00          | 	byte	$00[9]
19b57     66 66 FF FF 
19b5b     66 66 FF FF 
19b5f     66 66 00 00 
19b63     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
19b67     7C 7E 06 06 
19b6b     3E 7C 60 60 
19b6f     7E 3E 18 18 
19b73     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
19b77     66 30 30 18 
19b7b     18 0C 0C 66 
19b7f     66 00 00 00 
19b83     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
19b87     66 66 3C 1C 
19b8b     1C FC FE 66 
19b8f     66 FE FC 00 
19b93     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
19b97     18 18 18 18 
19b9b     00 00 00 00 
19b9f     00 00 00 00 
19ba3     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
19ba7     18 1C 0C 0C 
19bab     0C 0C 0C 0C 
19baf     1C 18 30 00 
19bb3     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
19bb7     18 38 30 30 
19bbb     30 30 30 30 
19bbf     38 18 0C 00 
19bc3     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
19bc7     66 66 3C 3C 
19bcb     FF FF 3C 3C 
19bcf     66 66 00 00 
19bd3     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
19bd7     00 18 18 18 
19bdb     7E 7E 18 18 
19bdf     18 00 00 00 
19be3     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
19be7     00 00 00 00 
19beb     00 00       | 	byte	$00[6]
19bed     18 18 18 18 
19bf1     18          | 	byte	$18[5]
19bf2     0C 04 00 00 
19bf6     00 00 00 00 
19bfa     7E 7E 00 00 
19bfe     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
19c02     00 00 00 00 
19c06     00 00 00 00 
19c0a     00 00 00 00 
19c0e     00          | 	byte	$00[13]
19c0f     18 18 18 00 
19c13     00 00 00 60 
19c17     60 60 30 30 
19c1b     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
19c1f     06 06 06 00 
19c23     00 00 00 3C 
19c27     7E 66 66 66 
19c2b     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
19c2f     66 7E 3C 00 
19c33     00 00 00 18 
19c37     18 1C 1C 18 
19c3b     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
19c3f     18 7E 7E 00 
19c43     00 00 00 3C 
19c47     7E 66 66 30 
19c4b     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
19c4f     0C 7E 7E 00 
19c53     00 00 00 7E 
19c57     7E 30 30 18 
19c5b     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
19c5f     66 7E 3C 00 
19c63     00 00 00 30 
19c67     30 38 38 3C 
19c6b     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
19c6f     7E 30 30 00 
19c73     00 00 00 7E 
19c77     7E 06 06 3E 
19c7b     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
19c7f     66 7E 3C 00 
19c83     00 00 00 38 
19c87     3C 0E 06 06 
19c8b     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
19c8f     66 7E 3C 00 
19c93     00 00 00 7E 
19c97     7E 60 60 30 
19c9b     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
19c9f     0C 0C 0C 00 
19ca3     00 00 00 3C 
19ca7     7E 66 66 3C 
19cab     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
19caf     66 7E 3C 00 
19cb3     00 00 00 3C 
19cb7     7E 66 66 7E 
19cbb     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
19cbf     70 3C 1C 00 
19cc3     00 00 00 00 
19cc7     00 00 18 18 
19ccb     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
19ccf     18 18 18 00 
19cd3     00 00 00 00 
19cd7     00 00 18 18 
19cdb     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
19cdf     18 18 18 0C 
19ce3     04 00 00 00 
19ce7     70 38 1C 0E 
19ceb     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
19cef     70 00 00 00 
19cf3     00 00 00 00 
19cf7     00 00 7E 7E 
19cfb     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
19cff     00 00 00 00 
19d03     00 00 00 00 | 	byte	$00[8]
19d07     0E 1C 38 70 
19d0b     E0 70 38 1C 
19d0f     0E 00 00 00 
19d13     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
19d17     7E 66 66 30 
19d1b     30 18 18 18 
19d1f     00 18 18 00 
19d23     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
19d27     7E 66 66 66 
19d2b     66 36 06 66 
19d2f     66 7E 3C 00 
19d33     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
19d37     3C 7E 66 66 
19d3b     66 7E 7E 66 
19d3f     66 66 66 00 
19d43     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
19d47     7E 66 66 7E 
19d4b     3E 66 66 66 
19d4f     66 7E 3E 00 
19d53     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
19d57     7E 66 66 06 
19d5b     06 06 06 66 
19d5f     66 7E 3C 00 
19d63     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
19d67     7E 66 66 66 
19d6b     66 66 66 66 
19d6f     66 7E 3E 00 
19d73     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
19d77     7E 06 06 3E 
19d7b     3E 06 06 06 
19d7f     06 7E 7E 00 
19d83     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
19d87     7E 06 06 3E 
19d8b     3E 06 06 06 
19d8f     06 06 06 00 
19d93     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
19d97     7E 06 06 76 
19d9b     76 66 66 66 
19d9f     66 7E 3C 00 
19da3     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
19da7     66 66 66 7E 
19dab     7E 66 66 66 
19daf     66 66 66 00 
19db3     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
19db7     7E 18 18 18 
19dbb     18 18 18 18 
19dbf     18 7E 7E 00 
19dc3     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
19dc7     60 60 60 60 
19dcb     60 60 60    | 	byte	$60[7]
19dce     66 66 7E 3C 
19dd2     00 00 00 00 
19dd6     66 66 36 36 
19dda     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
19dde     66 66 C6 C6 
19de2     00 00 00 00 
19de6     06 06 06 06 
19dea     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
19dee     06 06 7E 7E 
19df2     00 00 00 00 
19df6     C6 C6 EE EE 
19dfa     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
19dfe     C6 C6 C6 C6 
19e02     00 00 00 00 
19e06     66 66 66 6E 
19e0a     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
19e0e     76 66 66 66 
19e12     00 00 00 00 
19e16     3C 7E 66 66 
19e1a     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
19e1e     66 66 7E 3C 
19e22     00 00 00 00 
19e26     3E 7E 66 66 
19e2a     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
19e2e     06 06 06 06 
19e32     00 00 00 00 
19e36     3C 7E 66 66 
19e3a     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
19e3e     66 56 3E 6C 
19e42     00 00 00 00 
19e46     3E 7E 66 66 
19e4a     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
19e4e     66 66 C6 C6 
19e52     00 00 00 00 
19e56     7C 7E 06 06 
19e5a     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
19e5e     60 60 7E 3E 
19e62     00 00 00 00 
19e66     7E 7E 18 18 
19e6a     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
19e6e     18 18 18 18 
19e72     00 00 00 00 
19e76     66 66 66 66 
19e7a     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
19e7e     66 66 7E 3C 
19e82     00 00 00 00 
19e86     66 66 66 66 
19e8a     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
19e8e     3C 3C 18 18 
19e92     00 00 00 00 
19e96     C6 C6 C6 C6 
19e9a     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
19e9e     FE EE C6 82 
19ea2     00 00 00 00 
19ea6     66 66 66 3C 
19eaa     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
19eae     3C 66 66 66 
19eb2     00 00 00 00 
19eb6     66 66 66 66 
19eba     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
19ebe     18 18 18 18 
19ec2     00 00 00 00 
19ec6     7E 7E 30 30 
19eca     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
19ece     06 06 7E 7E 
19ed2     00 00 00 00 
19ed6     3C 3C 0C 0C 
19eda     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
19ede     0C 0C 3C 3C 
19ee2     00 00 00 00 
19ee6     06 06 0C 0C 
19eea     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
19eee     60 60 C0 C0 
19ef2     00 00 00 00 
19ef6     3C 3C 30 30 
19efa     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
19efe     30 30 3C 3C 
19f02     00 00 00 00 
19f06     18 18 3C 3C 
19f0a     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
19f0e     00 00 00 00 
19f12     00 00 00 00 
19f16     00 00 00 00 
19f1a     00 00 00 00 
19f1e     00 00       | 	byte	$00[18]
19f20     FE FE 00 00 
19f24     00 00 0C 0C 
19f28     18 18 00 00 
19f2c     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
19f30     00 00 00 00 
19f34     00 00 00 00 
19f38     00          | 	byte	$00[9]
19f39     3C 7C 60 7C 
19f3d     7E 66 66 7E 
19f41     7C 00 00 00 
19f45     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
19f49     3E 7E 66 66 
19f4d     66 66 66 7E 
19f51     3E 00 00 00 
19f55     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
19f59     3C 3E 06 06 
19f5d     06 06 06 7E 
19f61     7C 00 00 00 
19f65     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
19f69     7C 7E 66 66 
19f6d     66 66 66 7E 
19f71     7C 00 00 00 
19f75     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
19f79     3C 7E 66 66 
19f7d     7E 06 06 7E 
19f81     7C 00 00 00 
19f85     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
19f89     18 7E 7E 18 
19f8d     18 18 18 18 
19f91     18 00 00 00 
19f95     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
19f99     7C 7E 66 66 
19f9d     66 66 7E 7C 
19fa1     60 7E 3E 00 
19fa5     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
19fa9     3E 7E 66 66 
19fad     66 66 66 66 
19fb1     66 00 00 00 
19fb5     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
19fb9     1C 1C 18 18 
19fbd     18 18 18 3C 
19fc1     3C 00 00 00 
19fc5     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
19fc9     30 30 30 30 
19fcd     30 30 30 30 
19fd1     30          | 	byte	$30[9]
19fd2     3E 1E 00 00 
19fd6     06 06 06 36 
19fda     36 1E 1E 1E 
19fde     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
19fe2     00 00 00 00 
19fe6     1C 1C 18 18 
19fea     18 18 18 18 
19fee     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
19ff2     00 00 00 00 
19ff6     00 00 00    | 	byte	$00[7]
19ff9     6C FE FE D6 
19ffd     D6 C6 C6 C6 
1a001     C6 00 00 00 
1a005     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
1a009     3E 7E 66 66 
1a00d     66 66 66 66 
1a011     66 00 00 00 
1a015     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
1a019     3C 7E 66 66 
1a01d     66 66 66 7E 
1a021     3C 00 00 00 
1a025     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
1a029     3E 7E 66 66 
1a02d     66 66 66 7E 
1a031     3E 06 06 00 
1a035     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
1a039     7C 7E 66 66 
1a03d     66 66 66 7E 
1a041     7C 60 60 00 
1a045     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
1a049     3E 7E 66 06 
1a04d     06 06 06 06 
1a051     06 00 00 00 
1a055     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
1a059     7C 7E 06 0E 
1a05d     3C 70 60 7E 
1a061     3E 00 00 00 
1a065     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
1a069     7E 7E 18 18 
1a06d     18 18 18 78 
1a071     70 00 00 00 
1a075     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
1a079     66 66 66 66 
1a07d     66 66 66    | 	byte	$66[7]
1a080     7E 7C 00 00 
1a084     00 00 00 00 
1a088     00 66 66 66 
1a08c     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
1a090     18 18 00 00 
1a094     00 00 00 00 
1a098     00 C6 C6 D6 
1a09c     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
1a0a0     C6 82 00 00 
1a0a4     00 00 00 00 
1a0a8     00 66 66 3C 
1a0ac     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
1a0b0     66 66 00 00 
1a0b4     00 00 00 00 
1a0b8     00 66 66 66 
1a0bc     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
1a0c0     7C 60 7E 3E 
1a0c4     00 00 00 00 
1a0c8     00 7E 7E 30 
1a0cc     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a0d0     7E 7E 00 00 
1a0d4     00 00 30 18 
1a0d8     18 18 18 0C 
1a0dc     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
1a0e0     18 30 00 00 
1a0e4     00 00 18 18 
1a0e8     18 18 18 18 
1a0ec     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1a0f0     18 18 00 00 
1a0f4     00 00 0C 18 
1a0f8     18 18 18 30 
1a0fc     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
1a100     18 0C 00 00 
1a104     00 00 6C 7E 
1a108     36 00 00 00 
1a10c     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
1a110     00 00 00 00 
1a114     00 00 00 00 
1a118     00          | 	byte	$00[9]
1a119     18 18 18 18 
1a11d     18 18 00 00 
1a121     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1a124     00 00 00 00 
1a128     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1a12c     00 00 00 00 
1a130     00 80 80 80 
1a134     00 00 00 FF 
1a138     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1a13c     00 00 00 00 
1a140     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
1a141     80 00 00 00 
1a145     00 80 00 00 
1a149     80 80 00 00 
1a14d     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
1a151     80 00 80 00 
1a155     00 40 80 00 
1a159     AA AA AA 00 
1a15d     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
1a161     FF 00 00 00 
1a165     00 FF 00 00 
1a169     FF FF 00 00 
1a16d     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
1a171     FF 00 FF 00 
1a175     00 FF FF 00 
1a179     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1a17c     00 00 00 00 
1a180     00          | ataripalette   file "ataripalettep2.def"
1a181     11 11 11 00 
1a185     22 22 22 00 
1a189     33 33 33 00 
1a18d     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
1a191     55 55 55 00 
1a195     66 66 66 00 
1a199     77 77 77 00 
1a19d     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
1a1a1     99 99 99 00 
1a1a5     AA AA AA 00 
1a1a9     BB BB BB 00 
1a1ad     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
1a1b1     DD DD DD 00 
1a1b5     EE EE EE 00 
1a1b9     FF FF FF 00 
1a1bd     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
1a1c1     00 14 40 00 
1a1c5     00 1E 60 00 
1a1c9     00 28 80 00 
1a1cd     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
1a1d1     00 3C BF 00 
1a1d5     00 46 DF 00 
1a1d9     00 50 FF 00 
1a1dd     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
1a1e1     39 77 FF 00 
1a1e5     55 8A FF 00 
1a1e9     71 9E FF 00 
1a1ed     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
1a1f1     AA C5 FF 00 
1a1f5     C6 D8 FF 00 
1a1f9     E3 EC FF 00 
1a1fd     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
1a201     00 00 40 00 
1a205     00 00 60 00 
1a209     00 00 80 00 
1a20d     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
1a211     00 00 BF 00 
1a215     00 00 DF 00 
1a219     00 00 FF 00 
1a21d     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
1a221     39 39 FF 00 
1a225     55 55 FF 00 
1a229     71 71 FF 00 
1a22d     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
1a231     AA AA FF 00 
1a235     C6 C6 FF 00 
1a239     E3 E3 FF 00 
1a23d     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
1a241     20 00 40 00 
1a245     30 00 60 00 
1a249     40 00 80 00 
1a24d     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
1a251     60 00 BF 00 
1a255     70 00 DF 00 
1a259     80 00 FF 00 
1a25d     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
1a261     9C 39 FF 00 
1a265     AA 55 FF 00 
1a269     B8 71 FF 00 
1a26d     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
1a271     D5 AA FF 00 
1a275     E3 C6 FF 00 
1a279     F1 E3 FF 00 
1a27d     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
1a281     40 00 40 00 
1a285     60 00 60 00 
1a289     80 00 80 00 
1a28d     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
1a291     BF 00 BF 00 
1a295     DF 00 DF 00 
1a299     FF 00 FF 00 
1a29d     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
1a2a1     FF 39 FF 00 
1a2a5     FF 55 FF 00 
1a2a9     FF 71 FF 00 
1a2ad     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
1a2b1     FF AA FF 00 
1a2b5     FF C6 FF 00 
1a2b9     FF E3 FF 00 
1a2bd     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
1a2c1     40 00 20 00 
1a2c5     60 00 30 00 
1a2c9     80 00 40 00 
1a2cd     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
1a2d1     BF 00 60 00 
1a2d5     DF 00 70 00 
1a2d9     FF 00 80 00 
1a2dd     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
1a2e1     FF 39 9C 00 
1a2e5     FF 55 AA 00 
1a2e9     FF 71 B8 00 
1a2ed     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
1a2f1     FF AA D5 00 
1a2f5     FF C6 E3 00 
1a2f9     FF E3 F1 00 
1a2fd     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
1a301     40 00 00 00 
1a305     60 00 00 00 
1a309     80 00 00 00 
1a30d     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
1a311     BF 00 00 00 
1a315     DF 00 00 00 
1a319     FF 00 00 00 
1a31d     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
1a321     FF 39 39 00 
1a325     FF 55 55 00 
1a329     FF 71 71 00 
1a32d     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
1a331     FF AA AA 00 
1a335     FF C6 C6 00 
1a339     FF E3 E3 00 
1a33d     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
1a341     40 10 00 00 
1a345     60 18 00 00 
1a349     80 20 00 00 
1a34d     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
1a351     BF 30 00 00 
1a355     DF 38 00 00 
1a359     FF 40 00 00 
1a35d     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
1a361     FF 6A 39 00 
1a365     FF 80 55 00 
1a369     FF 95 71 00 
1a36d     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
1a371     FF BF AA 00 
1a375     FF D5 C6 00 
1a379     FF EA E3 00 
1a37d     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
1a381     40 20 00 00 
1a385     60 30 00 00 
1a389     80 40 00 00 
1a38d     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
1a391     BF 60 00 00 
1a395     DF 70 00 00 
1a399     FF 80 00 00 
1a39d     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
1a3a1     FF 9C 39 00 
1a3a5     FF AA 55 00 
1a3a9     FF B8 71 00 
1a3ad     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
1a3b1     FF D5 AA 00 
1a3b5     FF E3 C6 00 
1a3b9     FF F1 E3 00 
1a3bd     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
1a3c1     40 30 00 00 
1a3c5     60 48 00 00 
1a3c9     80 60 00 00 
1a3cd     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
1a3d1     BF 90 00 00 
1a3d5     DF A8 00 00 
1a3d9     FF C0 00 00 
1a3dd     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
1a3e1     FF CE 39 00 
1a3e5     FF D5 55 00 
1a3e9     FF DC 71 00 
1a3ed     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
1a3f1     FF EA AA 00 
1a3f5     FF F1 C6 00 
1a3f9     FF F8 E3 00 
1a3fd     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
1a401     30 40 00 00 
1a405     48 60 00 00 
1a409     60 80 00 00 
1a40d     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
1a411     90 BF 00 00 
1a415     A8 DF 00 00 
1a419     C0 FF 00 00 
1a41d     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
1a421     CE FF 39 00 
1a425     D5 FF 55 00 
1a429     DC FF 71 00 
1a42d     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
1a431     EA FF AA 00 
1a435     F1 FF C6 00 
1a439     F8 FF E3 00 
1a43d     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
1a441     00 40 00 00 
1a445     00 60 00 00 
1a449     00 80 00 00 
1a44d     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
1a451     00 BF 00 00 
1a455     00 DF 00 00 
1a459     00 FF 00 00 
1a45d     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
1a461     39 FF 39 00 
1a465     55 FF 55 00 
1a469     71 FF 71 00 
1a46d     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
1a471     AA FF AA 00 
1a475     C6 FF C6 00 
1a479     E3 FF E3 00 
1a47d     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
1a481     00 40 14 00 
1a485     00 60 1E 00 
1a489     00 80 28 00 
1a48d     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
1a491     00 BF 3C 00 
1a495     00 DF 46 00 
1a499     00 FF 50 00 
1a49d     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
1a4a1     39 FF 77 00 
1a4a5     55 FF 8A 00 
1a4a9     71 FF 9E 00 
1a4ad     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
1a4b1     AA FF C5 00 
1a4b5     C6 FF D8 00 
1a4b9     E3 FF EC 00 
1a4bd     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
1a4c1     00 40 28 00 
1a4c5     00 60 3C 00 
1a4c9     00 80 50 00 
1a4cd     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
1a4d1     00 BF 78 00 
1a4d5     00 DF 8C 00 
1a4d9     00 FF A0 00 
1a4dd     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
1a4e1     39 FF B5 00 
1a4e5     55 FF C0 00 
1a4e9     71 FF CA 00 
1a4ed     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
1a4f1     AA FF DF 00 
1a4f5     C6 FF EA 00 
1a4f9     E3 FF F4 00 
1a4fd     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
1a501     00 40 40 00 
1a505     00 60 60 00 
1a509     00 80 80 00 
1a50d     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
1a511     00 BF BF 00 
1a515     00 DF DF 00 
1a519     00 FF FF 00 
1a51d     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
1a521     39 FF FF 00 
1a525     55 FF FF 00 
1a529     71 FF FF 00 
1a52d     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
1a531     AA FF FF 00 
1a535     C6 FF FF 00 
1a539     E3 FF FF 00 
1a53d     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
1a541     00 28 40 00 
1a545     00 3C 60 00 
1a549     00 50 80 00 
1a54d     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
1a551     00 78 BF 00 
1a555     00 8C DF 00 
1a559     00 A0 FF 00 
1a55d     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
1a561     39 B5 FF 00 
1a565     55 C0 FF 00 
1a569     71 CA FF 00 
1a56d     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
1a571     AA DF FF 00 
1a575     C6 EA FF 00 
1a579     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
1a57c                 | '**********************************************************************************
1a57c                 | '
1a57c                 | '        Timings and colors definitions
1a57c                 | '
1a57c                 | '**********************************************************************************
1a57c                 | 
1a57c                 |    'streamer sets for text mode, to add to timings[0..5]
1a57c                 | ' todo for the retromachine: 768x576
1a57c                 | 
1a57c                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
1a57c     10 00 00 00 
1a580     50 00 00 00 
1a584     14 00 00 00 
1a588     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1a58c     70 00 00 00 
1a590     08 00 00 00 
1a594     30 00 00 00 
1a598     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
1a59c     10 00 00 00 
1a5a0     10 00 00 00 
1a5a4     00 00 00 00 
1a5a8     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
1a5ac     E0 01 00 00 
1a5b0     F6 32 24 15 
1a5b4     FB 6C C3 01 
1a5b8     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1a5bc                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
1a5bc                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
1a5bc     30 00 00 00 
1a5c0     50 00 00 00 
1a5c4     34 00 00 00 
1a5c8     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
1a5cc     20 00 00 00 
1a5d0     08 00 00 00 
1a5d4     16 00 00 00 
1a5d8     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
1a5dc     24 00 00 00 
1a5e0     18 00 00 00 
1a5e4     40 00 00 00 
1a5e8     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
1a5ec     F0 01 00 00 
1a5f0     F6 32 24 15 
1a5f4     FB 6C C3 01 
1a5f8     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
1a5fc                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
1a5fc     10 00 00 00 
1a600     40 00 00 00 
1a604     10 00 00 00 
1a608     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
1a60c     08 00 00 00 
1a610     08 00 00 00 
1a614     08 00 00 00 
1a618     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
1a61c     40 00 00 00 
1a620     20 00 00 00 
1a624     80 00 00 00 
1a628     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
1a62c     E0 01 00 00 
1a630     70 AE E9 10 
1a634     FB 8B FF 01 
1a638     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
1a63c     10 00 00 00 
1a640     42 00 00 00 
1a644     14 00 00 00 
1a648     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1a64c     00 00 00 00 
1a650     08 00 00 00 
1a654     00 00 00 00 
1a658     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
1a65c     10 00 00 00 
1a660     10 00 00 00 
1a664     C0 00 00 00 
1a668     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
1a66c     40 02 00 00 
1a670     F6 32 24 15 
1a674     FB 6C C3 01 
1a678     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1a67c     50 00 00 00 
1a680     A0 00 00 00 
1a684     54 00 00 00 
1a688     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
1a68c     08 00 00 00 
1a690     08 00 00 00 
1a694     08 00 00 00 
1a698     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1a69c     0C 00 00 00 
1a6a0     08 00 00 00 
1a6a4     00 01 00 00 
1a6a8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
1a6ac     E0 01 00 00 
1a6b0     10 06 56 15 
1a6b4     FB 64 C3 01 
1a6b8     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
1a6bc     50 00 00 00 
1a6c0     32 00 00 00 
1a6c4     50 00 00 00 
1a6c8     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1a6cc     08 00 00 00 
1a6d0     08 00 00 00 
1a6d4     08 00 00 00 
1a6d8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1a6dc     0C 00 00 00 
1a6e0     08 00 00 00 
1a6e4     40 01 00 00 
1a6e8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
1a6ec     E0 01 00 00 
1a6f0     F2 CD 33 13 
1a6f4     FB 53 92 01 
1a6f8     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1a6fc     18 00 00 00 
1a700     30 00 00 00 
1a704     18 00 00 00 
1a708     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
1a70c     08 00 00 00 
1a710     08 00 00 00 
1a714     08 00 00 00 
1a718     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1a71c     0C 00 00 00 
1a720     08 00 00 00 
1a724     80 01 00 00 
1a728     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
1a72c     E0 01 00 00 
1a730     F4 8F 11 11 
1a734     FB 3A 55 01 
1a738     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
1a73c     20 00 00 00 
1a740     40 00 00 00 
1a744     22 00 00 00 
1a748     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1a74c     00 00 00 00 
1a750     08 00 00 00 
1a754     00 00 00 00 
1a758     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
1a75c     0C 00 00 00 
1a760     08 00 00 00 
1a764     C0 01 00 00 
1a768     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
1a76c     F0 01 00 00 
1a770     F2 CD 33 13 
1a774     FB 53 92 01 
1a778     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1a77c                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
1a77c     00 75 C7 97 
1a780     27 47 F6 0A 
1a784     05 79 CB 9B 
1a788     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
1a78c                 | 
1a78c     28 12 64 FD | hdmi            setq    #9
1a790     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
1a794                 |            '     setq2   #255
1a794                 |             '    rdlong  $100, paletteptr 
1a794     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
1a798     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
1a79c     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
1a7a0     78 F9 02 F1 |                 add     ii,hbase
1a7a4     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
1a7a8     7B 0B 80 FF 
1a7ac     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
1a7b0                 | 
1a7b0     66 66 86 FF 
1a7b4     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
1a7b8                 | 
1a7b8                 | 
1a7b8                 | ''--------  frame rendering main loop  ---------------------------------------------------
1a7b8                 | 
1a7b8                 | p101
1a7b8     28 14 64 FD |                 setq    #10
1a7bc     00 DF 06 FB |                 rdlong  framebuf,  ptra
1a7c0     28 1E 64 FD |                 setq    #15
1a7c4     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
1a7c8     71 99 02 FB |                 rdlong  border,borderptr
1a7cc                 | 
1a7cc     01 C4 06 F1 |                 add     frames,#1
1a7d0     76 F5 02 F6 |                 mov     dlptr2,dlptr
1a7d4                 | 
1a7d4     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
1a7d8     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
1a7dc     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
1a7e0     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
1a7e4                 |  '' up porch
1a7e4                 | 
1a7e4     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
1a7e8     49 FF 02 F6 |                 mov     hsync1,sync_001
1a7ec     37 A8 46 FB |                 callpa  i_upporch ,#blank
1a7f0     72 01 68 FC |                 wrlong  #0,vblankptr
1a7f4                 |                 
1a7f4     1F EA 16 F4 |                 testb   paletteptr,#31 wc
1a7f8     29 FE 65 3D |          if_nc  setq2   #255
1a7fc     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
1a800                 | 
1a800                 | '' cursor blinking
1a800                 | 
1a800     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
1a804     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
1a808                 | 
1a808                 | '' main screen
1a808                 | 
1a808     00 BE 06 F6 |                 mov linenum,#0
1a80c     00 18 07 F6 |                 mov rcnt,#0
1a810     00 1C 07 F6 |                 mov rcnt2a,#0
1a814                 | 
1a814                 | 
1a814     00 18 0F F2 | p301            cmp rcnt,#0 wz
1a818     18 00 90 AD |         if_z    jmp #p306
1a81c     01 18 87 F1 |                 sub rcnt,#1
1a820     90 F7 02 F6 |                 mov dl,rdl
1a824     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
1a828     8F F7 02 A1 |    if_z        add dl,roffset  
1a82c     7B 21 03 F6 |                 mov rdl,dl
1a830     04 00 90 FD |                 jmp #p307          
1a834                 |           
1a834                 |                 
1a834     7A F7 02 FB | p306            rdlong  dl,dlptr2
1a838     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
1a83c     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
1a840     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
1a844                 | 
1a844                 | '' Special entry:
1a844                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
1a844                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
1a844                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
1a844                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
1a844                 | '' todo: set horizontal scroll (if needed)
1a844                 | 
1a844     02 FA 66 F0 |                 shl framebuf2,#2
1a848     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
1a84c     04 22 0F F2 |                 cmp dlc,#%100 wz
1a850                 |   
1a850                 |                 
1a850     04 F4 06 F1 |                 add dlptr2,#4
1a854     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
1a858     7A 21 03 FB |                  rdlong rdl,dlptr2
1a85c     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
1a860     04 18 47 F0 |                  shr rcnt,#4
1a864                 |              
1a864     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
1a868     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
1a86c                 |                 
1a86c     04 1E 47 F0 |                  shr roffset,#4
1a870     0C 1E 67 F0 |                  shl roffset,#12
1a874                 |   
1a874     9C FF 9F FD |                  jmp #p301
1a878                 |                  
1a878                 |                  
1a878                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
1a878     0C FA 46 F0 |                 shr     framebuf2,#12
1a87c     02 FA 66 F0 |                 shl     framebuf2,#2
1a880                 | 
1a880     7B 03 E3 F8 |                 getbyte t1,dl,#0
1a884     00 02 0F F2 |                 cmp     t1,#0 wz
1a888     34 00 90 AD |     if_z        jmp     #borderline
1a88c                 | 
1a88c     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
1a890     50 00 90 CD |           if_c   jmp     #textline
1a894     50 02 90 3D |           if_nc  jmp     #graphline
1a898                 | '
1a898     01 BE 06 F1 | p302            add     linenum,#1
1a89c     04 F4 06 F1 |                 add     dlptr2,#4
1a8a0     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
1a8a4     6C FF 9F 5D |          if_nz  jmp     #p301
1a8a8                 | 
1a8a8     72 03 68 FC | p112            wrlong  #1,vblankptr
1a8ac     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
1a8b0                 | 
1a8b0     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
1a8b4     4B FF 02 F6 |                 mov     hsync1,sync_223
1a8b8     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
1a8bc     F8 FE 9F FD |                 jmp     #p101
1a8c0                 | 
1a8c0                 | '' ---------------  END of frame rendering loop -------------------------------------------
1a8c0                 | 
1a8c0                 | 
1a8c0     14 00 B0 FD | borderline      call    #hsync                      ' make a border
1a8c4     4C A1 C2 FC |                 xcont   m_vi,border
1a8c8     CC FF 9F FD |                 jmp     #p302
1a8cc                 | 
1a8cc                 | 
1a8cc     08 00 B0 FD | blank           call    #hsync                          'blank lines
1a8d0     7E A1 C2 FC |                 xcont   m_vi,hsync0
1a8d4     FD ED 6F 0B |         _ret_   djnz    pa,#blank
1a8d8                 | 
1a8d8     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
1a8dc     7F 9D B2 FC |                 xzero   m_sn,hsync1
1a8e0     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
1a8e4                 | 
1a8e4                 | 
1a8e4                 | 
1a8e4                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
1a8e4                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
1a8e4                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
1a8e4                 | 
1a8e4                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
1a8e4                 | 
1a8e4     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
1a8e8                 | 
1a8e8     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
1a8ec     7B 17 5B F8 |                 getnib  zoom, dl,#3
1a8f0     03 16 07 F5 |                 and             zoom, #3
1a8f4                 | 
1a8f4                 | 
1a8f4                 | 
1a8f4     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
1a8f8     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
1a8fc     3F BC 06 F5 |                 and     linestart,#63
1a900     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
1a904     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
1a908                 | 
1a908     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
1a90c                 | 
1a90c                 |                        ' if fontline =0, get a border color
1a90c                 | 
1a90c     51 03 33 F9 | p102            getword t1,m_border,#0
1a910     00 02 0F F2 |                 cmp     t1, #0 wz
1a914     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1a918                 | 
1a918     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
1a91c     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
1a920     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
1a924     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
1a928     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1a92c     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
1a930     52 BB 02 F6 |                 mov m_lut2, m_lut1
1a934     6A BB 02 F1 |                 add m_lut2, lutt1
1a938     58 0F 03 F6 |                 mov cpl2,i_cpl
1a93c                 | 
1a93c     02 16 0F F2 |                cmp zoom,#2 wz
1a940     E4 00 90 AD |           if_z jmp #p420
1a944     01 16 0F F2 |                cmp zoom,#1 wz
1a948     64 00 90 AD |           if_z jmp #p410
1a94c     00 16 0F F2 |                 cmp zoom,#0 wz
1a950     04 00 90 AD |           if_z jmp #p400
1a954     50 01 90 FD |                jmp #p430
1a958                 | 
1a958                 |                    '
1a958                 |  ''---------------------------------------------------------------------------------------------------------
1a958     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1a95c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1a960     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1a964     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1a968     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1a96c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1a970     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1a974     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1a978     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1a97c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1a980                 | 
1a980     81 BB C2 FC |                         xcont m_lut2,t1
1a984                 | 
1a984     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1a988     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1a98c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1a990     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1a994     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1a998     01 C0 86 F1 |                         sub     lutaddr,#1
1a99c                 | 
1a99c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1a9a0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1a9a4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1a9a8                 | 
1a9a8     EB 0F 6F FB |                         djnz   cpl2,#p400
1a9ac                 |                         
1a9ac                 | 
1a9ac                 |                         
1a9ac     28 01 90 FD |  p401                   jmp    #p103
1a9b0                 | 
1a9b0                 | ''------------------------------------------------------------------------------------------------------------
1a9b0                 | 
1a9b0     01 0E 47 F0 |  p410                   shr cpl2,#1
1a9b4                 | 
1a9b4                 | ''---------------------------------------------------------------------------------------------------------
1a9b4     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
1a9b8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1a9bc     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1a9c0     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1a9c4     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1a9c8     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1a9cc     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1a9d0     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1a9d4     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1a9d8     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1a9dc                 | 
1a9dc                 | 
1a9dc     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
1a9e0     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
1a9e4     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
1a9e8     03 02 07 FA |                         mul t1,#3
1a9ec     81 BB C2 FC |                         xcont m_lut2,t1
1a9f0     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1a9f4     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1a9f8     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1a9fc     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1aa00     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1aa04     01 C0 86 F1 |                         sub     lutaddr,#1
1aa08     63 06 63 FD |                         mergew t3
1aa0c     03 06 07 FA |                         mul t3,#3
1aa10     83 BB C2 FC |                         xcont m_lut2,t3
1aa14                 | 
1aa14     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1aa18     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1aa1c                 | 
1aa1c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1aa20                 | 
1aa20     E4 0F 6F FB |                         djnz   cpl2,#p412
1aa24     B0 00 90 FD |  p411                   jmp    #p103
1aa28                 | 
1aa28                 | ''------------------------------------------------------------------------------------------------------------
1aa28                 | 
1aa28     02 0E 47 F0 |  p420                   shr cpl2,#2
1aa2c                 | 
1aa2c                 | ''---------------------------------------------------------------------------------------
1aa2c     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
1aa30     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1aa34     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1aa38     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1aa3c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1aa40     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1aa44     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1aa48     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1aa4c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1aa50     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1aa54                 | 
1aa54     61 02 63 FD |                         mergeb t1
1aa58     81 07 3B F9 |                         getword t3,t1,#1
1aa5c     0F 02 07 FA |                         mul t1,#15
1aa60     81 BB C2 FC |                         xcont m_lut2,t1
1aa64                 | 
1aa64     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1aa68     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1aa6c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1aa70     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1aa74     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1aa78     01 C0 86 F1 |                         sub     lutaddr,#1
1aa7c                 | 
1aa7c     81 09 EB F8 |                         getbyte t4,t1,#1        '
1aa80     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
1aa84                 | 
1aa84     0F 06 07 FA |                         mul t3,#15
1aa88     83 BB C2 FC |                         xcont m_lut2,t3
1aa8c                 | 
1aa8c     83 0B EB F8 |                         getbyte t5,t3,#1
1aa90     85 BB C2 FC |                         xcont m_lut2, t5
1aa94     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1aa98     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1aa9c                 | 
1aa9c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1aaa0                 | 
1aaa0     E2 0F 6F FB |                         djnz   cpl2,#p422
1aaa4     30 00 90 FD |  p421                   jmp    #p103
1aaa8                 | 
1aaa8                 | '--------------------------------------------------------------------------------------------------------------
1aaa8                 | 
1aaa8     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
1aaac     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1aab0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1aab4                 | 
1aab4     00 BA C6 FC |                         xcont m_lut2,#0
1aab8                 | 
1aab8     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1aabc     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1aac0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1aac4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1aac8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1aacc     01 C0 86 F1 |                         sub     lutaddr,#1
1aad0                 | 
1aad0     F5 0F 6F FB |                         djnz   cpl2,#p430
1aad4     00 00 90 FD |  p431                   jmp    #p103
1aad8                 | 
1aad8                 | ''------------------------------------------------------------------------------------------------------------
1aad8                 | 
1aad8                 | 
1aad8                 | 
1aad8     51 25 33 F9 | p103            getword  mb2,m_border,#0
1aadc     00 24 0F F2 |                 cmp      mb2, #0 wz
1aae0     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1aae4                 | 
1aae4     B0 FD 9F FD |                 jmp #p302
1aae8                 | 
1aae8                 | '' -------------------------------------- END of text line ---------------------------------
1aae8                 | 
1aae8                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1aae8                 | 
1aae8     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1aaec                 | 
1aaec                 | 
1aaec     51 25 33 F9 | p202            getword mb2,m_border,#0
1aaf0     00 24 0F F2 |                 cmp     mb2, #0 wz
1aaf4     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1aaf8                 | 
1aaf8                 | '----------------------------------------- display pixels
1aaf8                 | 
1aaf8     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1aafc     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1ab00                 | 
1ab00     7B 17 5B F8 |                 getnib  zoom, dl,#3
1ab04     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1ab08                 | 
1ab08     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1ab0c     0C BC 06 F5 |                 and     colordepth,#12
1ab10                 | 
1ab10     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1ab14     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1ab18     64 00 90 AD |           if_z  jmp     #p240
1ab1c                 | 
1ab1c     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1ab20     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1ab24     98 00 90 AD |           if_z  jmp     #p250
1ab28                 | 
1ab28     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1ab2c     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1ab30     FC 00 90 AD |           if_z  jmp     #p260
1ab34                 | 
1ab34     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1ab38                 | 
1ab38                 | '' --- 8 bit color modes
1ab38                 | 
1ab38     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1ab3c     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1ab40                 | 
1ab40     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1ab44     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1ab48                 |        
1ab48                 |  '  
1ab48     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1ab4c     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1ab50                 |     
1ab50                 |  
1ab50     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1ab54     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1ab58                 |         
1ab58                 | 
1ab58                 |         
1ab58     7D 11 03 FB | p235               rdlong  char,framebuf2
1ab5c     32 0C 63 FD |                    skipf skippattern
1ab60     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1ab64     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1ab68     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1ab6c     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1ab70     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1ab74     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1ab78     F7 0F 6F FB |                    djnz    cpl2,#p235
1ab7c                 | 
1ab7c     20 01 90 FD |                jmp    #p203
1ab80                 |                   
1ab80                 | 
1ab80                 | 
1ab80                 | '' --- 1 bit color modes
1ab80                 | 
1ab80     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1ab84     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1ab88                 | 
1ab88     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1ab8c     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1ab90     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1ab94                 | 
1ab94                 | 
1ab94     7D 11 E3 FA | p241               rdword  char,framebuf2
1ab98     44 10 FF F9 |                    movbyts char,#%01000100
1ab9c     63 10 63 FD |                    mergew  char
1aba0     32 0C 63 FD |                    skipf skippattern
1aba4     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1aba8     63 10 63 FD |                    mergew  char                    ' 1 0
1abac     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1abb0     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1abb4     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1abb8     F6 0F 6F FB |                    djnz   cpl2,#p241
1abbc                 | 
1abbc                 | 
1abbc     E0 00 90 FD |                jmp    #p203
1abc0                 | 
1abc0                 | '' --- 2 bit color modes
1abc0                 | 
1abc0     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1abc4     C8 00 90 AD |        if_z   jmp #p251
1abc8                 | 
1abc8     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1abcc     30 00 90 AD |        if_z   jmp #p252
1abd0                 | 
1abd0                 | 
1abd0     7D 11 C3 FA | p254               rdbyte char,framebuf2
1abd4     04 0A 07 F6 |                    mov  t5,#4
1abd8     02 10 67 F0 | p255               shl  char,#2
1abdc     88 03 53 F8 |                    getnib  t1,char,#2
1abe0     03 02 07 F5 |                    and     t1,#3
1abe4     55 02 07 FA |                    mul     t1,#$55
1abe8     81 05 03 F9 |                    rolbyte  t2,t1,#0
1abec     FA 0B 6F FB |                    djnz    t5,#p255
1abf0     82 BB C2 FC |                    xcont   m_lut2,t2
1abf4     01 FA 06 F1 |                    add     framebuf2,#1
1abf8     F5 0F 6F FB |                    djnz    cpl2,#p254
1abfc     A0 00 90 FD |                    jmp     #p203
1ac00                 | 
1ac00     7D 11 E3 FA | p252               rdword char,framebuf2
1ac04     08 0A 07 F6 |                    mov  t5,#8
1ac08     02 10 67 F0 | p253               shl  char,#2
1ac0c     88 03 63 F8 |                    getnib  t1,char,#4
1ac10     03 02 07 F5 |                    and     t1,#3
1ac14     05 02 07 FA |                    mul     t1,#5
1ac18     81 05 83 F8 |                    rolnib  t2,t1,#0
1ac1c     FA 0B 6F FB |                    djnz    t5,#p253
1ac20     82 BB C2 FC |                    xcont   m_lut2,t2
1ac24     02 FA 06 F1 |                    add     framebuf2,#2
1ac28     F5 0F 6F FB |                    djnz    cpl2,#p252
1ac2c     70 00 90 FD |                    jmp     #p203
1ac30                 | 
1ac30                 | '' ------ 4 bit color modes
1ac30                 | 
1ac30     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1ac34     58 00 90 AD |        if_z   jmp #p251
1ac38                 | 
1ac38     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1ac3c     2C 00 90 AD |        if_z   jmp #p262
1ac40                 | 
1ac40                 | 
1ac40     7D 11 C3 FA | p263               rdbyte char,framebuf2
1ac44     02 0A DC FC |                            rep #5,#2
1ac48     88 05 8B F8 |                              rolnib t2,char,#1
1ac4c     88 05 8B F8 |                                  rolnib t2,char,#1
1ac50     88 05 8B F8 |                              rolnib t2,char,#1
1ac54     88 05 8B F8 |                                  rolnib t2,char,#1
1ac58     04 10 67 F0 |                              shl char,#4
1ac5c     82 BB C2 FC |                    xcont   m_lut2,t2
1ac60     01 FA 06 F1 |                    add     framebuf2,#1
1ac64     F6 0F 6F FB |                    djnz    cpl2,#p263
1ac68     34 00 90 FD |                    jmp     #p203
1ac6c                 | 
1ac6c     7D 11 E3 FA | p262               rdword  char,framebuf2
1ac70     04 06 DC FC |                            rep #3,#4
1ac74     88 05 9B F8 |                              rolnib t2,char,#3
1ac78     88 05 9B F8 |                                  rolnib t2,char,#3
1ac7c     04 10 67 F0 |                              shl char,#4
1ac80     82 BB C2 FC |                    xcont   m_lut2,t2
1ac84     02 FA 06 F1 |                    add     framebuf2,#2
1ac88     F8 0F 6F FB |                    djnz    cpl2,#p262
1ac8c     10 00 90 FD |                    jmp     #p203
1ac90                 | 
1ac90                 | ''---------- all color modes without zoom
1ac90                 | 
1ac90     87 07 D8 FC | p251               rep  #3,cpl2
1ac94     7D 11 03 FB |                    rdlong  char,framebuf2
1ac98     04 FA 06 F1 |                    add     framebuf2,#4
1ac9c     88 BB C2 FC |                    xcont   m_lut2,char
1aca0                 |           
1aca0                 |  ''-----------------------------------------------------------------------------------------
1aca0                 | p203           ' getword  mb2,m_border,#0
1aca0     00 24 0F F2 |                 cmp      mb2, #0 wz
1aca4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1aca8                 | 
1aca8     EC FB 9F FD |                 jmp #p302
1acac                 | 
1acac                 | '' -------------------------------------- END of graph  line ---------------------------------
1acac                 | 
1acac                 | '' consts and vars
1acac                 | 
1acac     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1acb0     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1acb4     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1acb8     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1acbc                 | 
1acbc     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1acc0                 | 
1acc0                 | '------ these longs will be set by setmode function
1acc0                 | 
1acc0     00 00 00 00 | m_bs            long    0        'blanks before sync
1acc4     00 00 00 00 | m_sn            long    0        'sync
1acc8     00 00 00 00 | m_bv            long    0        'blanks before visible
1accc     00 00 00 00 | m_vi            long    0        'visible pixels #
1acd0     00 00 00 00 | m_border        long    0        'left/right borders
1acd4     00 00 00 00 | m_lut1          long    0        'characters
1acd8     00 00 00 00 | i_vborder       long    0        'up/down borders
1acdc     00 00 00 00 | i_upporch       long    0        'up porch lines
1ace0     00 00 00 00 | i_vsync         long    0        'vsync lines
1ace4     00 00 00 00 | i_downporch     long    0        'down porch lines
1ace8     00 00 00 00 | i_modenum       long    0        'mode #
1acec     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1acf0     00 00 00 00 | i_lines         long    0        'scanlines #
1acf4     00 00 00 00 | i_clock         long    0
1acf8     00 00 00 00 | i_hubset        long    0
1acfc     00 00 00 00 | i_totalvis      long    0
1ad00                 | 
1ad00                 | '-------------------------------------
1ad00                 | 
1ad00     00 00 00 00 | m_lut2          long    0
1ad04                 | 
1ad04                 | colordepth
1ad04     00 00 00 00 | linestart       long    0
1ad08     00 00 00 00 | linenum         long    0
1ad0c     00 01 00 00 | lutaddr         long    256
1ad10                 | 
1ad10     0E 00 00 00 | cursorsh        long    14
1ad14     00 00 00 00 | frames          long    0
1ad18     00 00 00 00 | cursorx         long    0
1ad1c     00 00 00 00 | cursory         long    0
1ad20     00 00 00 00 | cursorpos       long    0
1ad24     00 00 00 00 | cursorpos2      long    0
1ad28     00 00 00 00 | fontstart       long    0
1ad2c     00 00 00 00 | border2         long 0
1ad30     00 00 81 70 | lutiv           long $70810000
1ad34     00 00 88 00 | lutt1           long $00880000
1ad38     00 00 80 00 | lutg1           long $00800000
1ad3c     00 00 80 10 | lutg2           long $10800000
1ad40     00 00 80 20 | lutg4           long $20800000
1ad44     00 00 80 30 | lutg8           long $30800000
1ad48     00 00 00 00 | framebuf        long 0
1ad4c     00 00 00 00 | fontbuf         long 0
1ad50     00 00 00 00 | borderptr       long 0
1ad54     00 00 00 00 | vblankptr       long 0
1ad58     00 00 00 00 | cursorptr       long 0
1ad5c     00 00 00 00 | modeptr         long 0
1ad60     00 00 00 00 | paletteptr      long 0
1ad64     00 00 00 00 | dlptr           long 0
1ad68                 | fontnumptr      res     1
1ad68                 | fontnumptr      res     1
1ad68                 | hbase           res     1
1ad68                 | hbase           res     1
1ad68                 | borderptr2      res     1
1ad68                 | borderptr2      res     1
1ad68                 | dlptr2 res 1
1ad68                 | dlptr2 res 1
1ad68                 | dl              res 1
1ad68                 | dl              res 1
1ad68                 | ii              res     1
1ad68                 | ii              res     1
1ad68                 | framebuf2       res     1
1ad68                 | framebuf2       res     1
1ad68                 | hsync0          res     1
1ad68                 | hsync0          res     1
1ad68                 | hsync1          res     1
1ad68                 | hsync1          res     1
1ad68                 | fontline        res     1
1ad68                 | fontline        res     1
1ad68                 | t1              res     1
1ad68                 | t1              res     1
1ad68                 | t2              res     1
1ad68                 | t2              res     1
1ad68                 | t3 res 1
1ad68                 | t3 res 1
1ad68                 | t4 res 1
1ad68                 | t4 res 1
1ad68                 | t5 res 1
1ad68                 | t5 res 1
1ad68                 | skippattern res 1
1ad68                 | skippattern res 1
1ad68                 | cpl2 res 1
1ad68                 | cpl2 res 1
1ad68                 | char            res     1
1ad68                 | char            res     1
1ad68                 | backcolor       res     1
1ad68                 | backcolor       res     1
1ad68                 | charcolor       res     1
1ad68                 | charcolor       res     1
1ad68                 | zoom res 1
1ad68                 | zoom res 1
1ad68     00 00 00 00 | rcnt long 0 'dl repeat count
1ad6c     00 00 00 00 | rcnt2 long 0
1ad70     00 00 00 00 | rcnt2a long 0
1ad74     00 00 00 00 | roffset long 0
1ad78     00 00 00 00 | rdl long 0  'dl repeat line
1ad7c     00 00 00 00 | dlc long 0 'dl command
1ad80     00 00 00 00 | mb2 long 0
1ad84     00 00 00 00 | aend             long 0
1ad88                 |                 fit     496                     '
1ad88                 | _trackerplayer_spin2_dat_
1ad88                 | 
1ad88     00 00 00 00 | null             long  0
1ad8c     46 52 45 51 
1ad90     46 52 45 51 
1ad94     46 52 45 51 
1ad98     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1ad9c     46 52 45 51 
1ada0     46 52 45 51 
1ada4     46 52 45 51 
1ada8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adac     46 52 45 51 
1adb0     46 52 45 51 
1adb4     46 52 45 51 
1adb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adbc     46 52 45 51 
1adc0     46 52 45 51 
1adc4     46 52 45 51 
1adc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adcc     46 52 45 51 
1add0     46 52 45 51 
1add4     46 52 45 51 
1add8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1addc     46 52 45 51 
1ade0     46 52 45 51 
1ade4     46 52 45 51 
1ade8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adec     46 52 45 51 
1adf0     46 52 45 51 
1adf4     46 52 45 51 
1adf8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adfc     46 52 45 51 
1ae00     46 52 45 51 
1ae04     46 52 45 51 
1ae08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae0c     46 52 45 51 
1ae10     46 52 45 51 
1ae14     46 52 45 51 
1ae18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae1c     46 52 45 51 
1ae20     46 52 45 51 
1ae24     46 52 45 51 
1ae28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae2c     46 52 45 51 
1ae30     46 52 45 51 
1ae34     46 52 45 51 
1ae38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae3c     46 52 45 51 
1ae40     46 52 45 51 
1ae44     46 52 45 51 
1ae48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae4c     46 52 45 51 
1ae50     46 52 45 51 
1ae54     46 52 45 51 
1ae58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae5c     46 52 45 51 
1ae60     46 52 45 51 
1ae64     46 52 45 51 
1ae68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae6c     46 52 45 51 
1ae70     46 52 45 51 
1ae74     46 52 45 51 
1ae78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae7c     46 52 45 51 
1ae80     46 52 45 51 
1ae84     46 52 45 51 
1ae88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae8c     46 52 45 51 
1ae90     46 52 45 51 
1ae94     46 52 45 51 
1ae98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ae9c     46 52 45 51 
1aea0     46 52 45 51 
1aea4     46 52 45 51 
1aea8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aeac     46 52 45 51 
1aeb0     46 52 45 51 
1aeb4     46 52 45 51 
1aeb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aebc     46 52 45 51 
1aec0     46 52 45 51 
1aec4     46 52 45 51 
1aec8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aecc     46 52 45 51 
1aed0     46 52 45 51 
1aed4     46 52 45 51 
1aed8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aedc     46 52 45 51 
1aee0     46 52 45 51 
1aee4     46 52 45 51 
1aee8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aeec     46 52 45 51 
1aef0     46 52 45 51 
1aef4     46 52 45 51 
1aef8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aefc     46 52 45 51 
1af00     46 52 45 51 
1af04     46 52 45 51 
1af08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1af0c     46 52 45 51 
1af10     46 52 45 51 
1af14     46 52 45 51 
1af18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1af1c     46 52 45 51 
1af20     46 52 45 51 
1af24     46 52 45 51 
1af28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1af2c     46 52 45 51 
1af30     46 52 45 51 
1af34     46 52 45 51 
1af38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1af3c     46 52 45 51 
1af40     46 52 45 51 
1af44     46 52 45 51 
1af48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1af4c     46 52 45 51 
1af50     46 52 45 51 
1af54     46 52 45 51 
1af58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1af5c     46 52 45 51 
1af60     46 52 45 51 
1af64     46 52 45 51 
1af68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1af6c     46 52 45 51 
1af70     46 52 45 51 
1af74     46 52 45 51 
1af78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1af7c     46 52 45 51 
1af80     46 52 45 51 
1af84     46 52 45 51 
1af88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1af8c     46 52 45 51 
1af90     46 52 45 51 
1af94     46 52 45 51 
1af98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1af9c     46 52 45 51 
1afa0     46 52 45 51 
1afa4     46 52 45 51 
1afa8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1afac     46 52 45 51 
1afb0     46 52 45 51 
1afb4     46 52 45 51 
1afb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1afbc     46 52 45 51 
1afc0     46 52 45 51 
1afc4     46 52 45 51 
1afc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1afcc     46 52 45 51 
1afd0     46 52 45 51 
1afd4     46 52 45 51 
1afd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1afdc     46 52 45 51 
1afe0     46 52 45 51 
1afe4     46 52 45 51 
1afe8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1afec     46 52 45 51 
1aff0     46 52 45 51 
1aff4     46 52 45 51 
1aff8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1affc     46 52 45 51 
1b000     46 52 45 51 
1b004     46 52 45 51 
1b008     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b00c     46 52 45 51 
1b010     46 52 45 51 
1b014     46 52 45 51 
1b018     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b01c     46 52 45 51 
1b020     46 52 45 51 
1b024     46 52 45 51 
1b028     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b02c     46 52 45 51 
1b030     46 52 45 51 
1b034     46 52 45 51 
1b038     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b03c     46 52 45 51 
1b040     46 52 45 51 
1b044     46 52 45 51 
1b048     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b04c     46 52 45 51 
1b050     46 52 45 51 
1b054     46 52 45 51 
1b058     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b05c     46 52 45 51 
1b060     46 52 45 51 
1b064     46 52 45 51 
1b068     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b06c     46 52 45 51 
1b070     46 52 45 51 
1b074     46 52 45 51 
1b078     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b07c     46 52 45 51 
1b080     46 52 45 51 
1b084     46 52 45 51 
1b088     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b08c     46 52 45 51 
1b090     46 52 45 51 
1b094     46 52 45 51 
1b098     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b09c     46 52 45 51 
1b0a0     46 52 45 51 
1b0a4     46 52 45 51 
1b0a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b0ac     46 52 45 51 
1b0b0     46 52 45 51 
1b0b4     46 52 45 51 
1b0b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b0bc     46 52 45 51 
1b0c0     46 52 45 51 
1b0c4     46 52 45 51 
1b0c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b0cc     46 52 45 51 
1b0d0     46 52 45 51 
1b0d4     46 52 45 51 
1b0d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b0dc     46 52 45 51 
1b0e0     46 52 45 51 
1b0e4     46 52 45 51 
1b0e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b0ec     46 52 45 51 
1b0f0     46 52 45 51 
1b0f4     46 52 45 51 
1b0f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b0fc     46 52 45 51 
1b100     46 52 45 51 
1b104     46 52 45 51 
1b108     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b10c     46 52 45 51 
1b110     46 52 45 51 
1b114     46 52 45 51 
1b118     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b11c     46 52 45 51 
1b120     46 52 45 51 
1b124     46 52 45 51 
1b128     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b12c     46 52 45 51 
1b130     46 52 45 51 
1b134     46 52 45 51 
1b138     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b13c     46 52 45 51 
1b140     46 52 45 51 
1b144     46 52 45 51 
1b148     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b14c     46 52 45 51 
1b150     46 52 45 51 
1b154     46 52 45 51 
1b158     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b15c     46 52 45 51 
1b160     46 52 45 51 
1b164     46 52 45 51 
1b168     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b16c     46 52 45 51 
1b170     46 52 45 51 
1b174     46 52 45 51 
1b178     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b17c     46 52 45 51 
1b180     46 52 45 51 
1b184     46 52 45 51 
1b188     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b18c     46 52 45 51 
1b190     46 52 45 51 
1b194     46 52 45 51 
1b198     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b19c     46 52 45 51 
1b1a0     46 52 45 51 
1b1a4     46 52 45 51 
1b1a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b1ac     46 52 45 51 
1b1b0     46 52 45 51 
1b1b4     46 52 45 51 
1b1b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b1bc     46 52 45 51 
1b1c0     46 52 45 51 
1b1c4     46 52 45 51 
1b1c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b1cc     46 52 45 51 
1b1d0     46 52 45 51 
1b1d4     46 52 45 51 
1b1d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b1dc     46 52 45 51 
1b1e0     46 52 45 51 
1b1e4     46 52 45 51 
1b1e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b1ec     46 52 45 51 
1b1f0     46 52 45 51 
1b1f4     46 52 45 51 
1b1f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b1fc     46 52 45 51 
1b200     46 52 45 51 
1b204     46 52 45 51 
1b208     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b20c     46 52 45 51 
1b210     46 52 45 51 
1b214     46 52 45 51 
1b218     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b21c     46 52 45 51 
1b220     46 52 45 51 
1b224     46 52 45 51 
1b228     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b22c     46 52 45 51 
1b230     46 52 45 51 
1b234     46 52 45 51 
1b238     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b23c     46 52 45 51 
1b240     46 52 45 51 
1b244     46 52 45 51 
1b248     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b24c     46 52 45 51 
1b250     46 52 45 51 
1b254     46 52 45 51 
1b258     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b25c     46 52 45 51 
1b260     46 52 45 51 
1b264     46 52 45 51 
1b268     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b26c     46 52 45 51 
1b270     46 52 45 51 
1b274     46 52 45 51 
1b278     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b27c     46 52 45 51 
1b280     46 52 45 51 
1b284     46 52 45 51 
1b288     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b28c     46 52 45 51 
1b290     46 52 45 51 
1b294     46 52 45 51 
1b298     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b29c     46 52 45 51 
1b2a0     46 52 45 51 
1b2a4     46 52 45 51 
1b2a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b2ac     46 52 45 51 
1b2b0     46 52 45 51 
1b2b4     46 52 45 51 
1b2b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b2bc     46 52 45 51 
1b2c0     46 52 45 51 
1b2c4     46 52 45 51 
1b2c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b2cc     46 52 45 51 
1b2d0     46 52 45 51 
1b2d4     46 52 45 51 
1b2d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b2dc     46 52 45 51 
1b2e0     46 52 45 51 
1b2e4     46 52 45 51 
1b2e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b2ec     46 52 45 51 
1b2f0     46 52 45 51 
1b2f4     46 52 45 51 
1b2f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b2fc     46 52 45 51 
1b300     46 52 45 51 
1b304     46 52 45 51 
1b308     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b30c     46 52 45 51 
1b310     46 52 45 51 
1b314     46 52 45 51 
1b318     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b31c     46 52 45 51 
1b320     46 52 45 51 
1b324     46 52 45 51 
1b328     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b32c     46 52 45 51 
1b330     46 52 45 51 
1b334     46 52 45 51 
1b338     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b33c     46 52 45 51 
1b340     46 52 45 51 
1b344     46 52 45 51 
1b348     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b34c     46 52 45 51 
1b350     46 52 45 51 
1b354     46 52 45 51 
1b358     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b35c     46 52 45 51 
1b360     46 52 45 51 
1b364     46 52 45 51 
1b368     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b36c     46 52 45 51 
1b370     46 52 45 51 
1b374     46 52 45 51 
1b378     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b37c     46 52 45 51 
1b380     46 52 45 51 
1b384     46 52 45 51 
1b388     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b38c     46 52 45 51 
1b390     46 52 45 51 
1b394     46 52 45 51 
1b398     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b39c     46 52 45 51 
1b3a0     46 52 45 51 
1b3a4     46 52 45 51 
1b3a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3ac     46 52 45 51 
1b3b0     46 52 45 51 
1b3b4     46 52 45 51 
1b3b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3bc     46 52 45 51 
1b3c0     46 52 45 51 
1b3c4     46 52 45 51 
1b3c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3cc     46 52 45 51 
1b3d0     46 52 45 51 
1b3d4     46 52 45 51 
1b3d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3dc     46 52 45 51 
1b3e0     46 52 45 51 
1b3e4     46 52 45 51 
1b3e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3ec     46 52 45 51 
1b3f0     46 52 45 51 
1b3f4     46 52 45 51 
1b3f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3fc     46 52 45 51 
1b400     46 52 45 51 
1b404     46 52 45 51 
1b408     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b40c     46 52 45 51 
1b410     46 52 45 51 
1b414     46 52 45 51 
1b418     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b41c     46 52 45 51 
1b420     46 52 45 51 
1b424     46 52 45 51 
1b428     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b42c     46 52 45 51 
1b430     46 52 45 51 
1b434     46 52 45 51 
1b438     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b43c     46 52 45 51 
1b440     46 52 45 51 
1b444     46 52 45 51 
1b448     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b44c     46 52 45 51 
1b450     46 52 45 51 
1b454     46 52 45 51 
1b458     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b45c     46 52 45 51 
1b460     46 52 45 51 
1b464     46 52 45 51 
1b468     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b46c     46 52 45 51 
1b470     46 52 45 51 
1b474     46 52 45 51 
1b478     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b47c     46 52 45 51 
1b480     46 52 45 51 
1b484     46 52 45 51 
1b488     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b48c     46 52 45 51 
1b490     46 52 45 51 
1b494     46 52 45 51 
1b498     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b49c     46 52 45 51 
1b4a0     46 52 45 51 
1b4a4     46 52 45 51 
1b4a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4ac     46 52 45 51 
1b4b0     46 52 45 51 
1b4b4     46 52 45 51 
1b4b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4bc     46 52 45 51 
1b4c0     46 52 45 51 
1b4c4     46 52 45 51 
1b4c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4cc     46 52 45 51 
1b4d0     46 52 45 51 
1b4d4     46 52 45 51 
1b4d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4dc     46 52 45 51 
1b4e0     46 52 45 51 
1b4e4     46 52 45 51 
1b4e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4ec     46 52 45 51 
1b4f0     46 52 45 51 
1b4f4     46 52 45 51 
1b4f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4fc     46 52 45 51 
1b500     46 52 45 51 
1b504     46 52 45 51 
1b508     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b50c     46 52 45 51 
1b510     46 52 45 51 
1b514     46 52 45 51 
1b518     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b51c     46 52 45 51 
1b520     46 52 45 51 
1b524     46 52 45 51 
1b528     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b52c     46 52 45 51 
1b530     46 52 45 51 
1b534     46 52 45 51 
1b538     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b53c     46 52 45 51 
1b540     46 52 45 51 
1b544     46 52 45 51 
1b548     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b54c     46 52 45 51 
1b550     46 52 45 51 
1b554     46 52 45 51 
1b558     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b55c     46 52 45 51 
1b560     46 52 45 51 
1b564     46 52 45 51 
1b568     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b56c     46 52 45 51 
1b570     46 52 45 51 
1b574     46 52 45 51 
1b578     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b57c     46 52 45 51 
1b580     46 52 45 51 
1b584     46 52 45 51 
1b588     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b58c     46 52 45 51 
1b590     46 52 45 51 
1b594     46 52 45 51 
1b598     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b59c     46 52 45 51 
1b5a0     46 52 45 51 
1b5a4     46 52 45 51 
1b5a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5ac     46 52 45 51 
1b5b0     46 52 45 51 
1b5b4     46 52 45 51 
1b5b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5bc     46 52 45 51 
1b5c0     46 52 45 51 
1b5c4     46 52 45 51 
1b5c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5cc     46 52 45 51 
1b5d0     46 52 45 51 
1b5d4     46 52 45 51 
1b5d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5dc     46 52 45 51 
1b5e0     46 52 45 51 
1b5e4     46 52 45 51 
1b5e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5ec     46 52 45 51 
1b5f0     46 52 45 51 
1b5f4     46 52 45 51 
1b5f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5fc     46 52 45 51 
1b600     46 52 45 51 
1b604     46 52 45 51 
1b608     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b60c     46 52 45 51 
1b610     46 52 45 51 
1b614     46 52 45 51 
1b618     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b61c     46 52 45 51 
1b620     46 52 45 51 
1b624     46 52 45 51 
1b628     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b62c     46 52 45 51 
1b630     46 52 45 51 
1b634     46 52 45 51 
1b638     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b63c     46 52 45 51 
1b640     46 52 45 51 
1b644     46 52 45 51 
1b648     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b64c     46 52 45 51 
1b650     46 52 45 51 
1b654     46 52 45 51 
1b658     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b65c     46 52 45 51 
1b660     46 52 45 51 
1b664     46 52 45 51 
1b668     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b66c     46 52 45 51 
1b670     46 52 45 51 
1b674     46 52 45 51 
1b678     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b67c     46 52 45 51 
1b680     46 52 45 51 
1b684     46 52 45 51 
1b688     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b68c     46 52 45 51 
1b690     46 52 45 51 
1b694     46 52 45 51 
1b698     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b69c     46 52 45 51 
1b6a0     46 52 45 51 
1b6a4     46 52 45 51 
1b6a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6ac     46 52 45 51 
1b6b0     46 52 45 51 
1b6b4     46 52 45 51 
1b6b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6bc     46 52 45 51 
1b6c0     46 52 45 51 
1b6c4     46 52 45 51 
1b6c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6cc     46 52 45 51 
1b6d0     46 52 45 51 
1b6d4     46 52 45 51 
1b6d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6dc     46 52 45 51 
1b6e0     46 52 45 51 
1b6e4     46 52 45 51 
1b6e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6ec     46 52 45 51 
1b6f0     46 52 45 51 
1b6f4     46 52 45 51 
1b6f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6fc     46 52 45 51 
1b700     46 52 45 51 
1b704     46 52 45 51 
1b708     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b70c     46 52 45 51 
1b710     46 52 45 51 
1b714     46 52 45 51 
1b718     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b71c     46 52 45 51 
1b720     46 52 45 51 
1b724     46 52 45 51 
1b728     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b72c     46 52 45 51 
1b730     46 52 45 51 
1b734     46 52 45 51 
1b738     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b73c     46 52 45 51 
1b740     46 52 45 51 
1b744     46 52 45 51 
1b748     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b74c     46 52 45 51 
1b750     46 52 45 51 
1b754     46 52 45 51 
1b758     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b75c     46 52 45 51 
1b760     46 52 45 51 
1b764     46 52 45 51 
1b768     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b76c     46 52 45 51 
1b770     46 52 45 51 
1b774     46 52 45 51 
1b778     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b77c     46 52 45 51 
1b780     46 52 45 51 
1b784     46 52 45 51 
1b788     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b78c     46 52 45 51 
1b790     46 52 45 51 
1b794     46 52 45 51 
1b798     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b79c     46 52 45 51 
1b7a0     46 52 45 51 
1b7a4     46 52 45 51 
1b7a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7ac     46 52 45 51 
1b7b0     46 52 45 51 
1b7b4     46 52 45 51 
1b7b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7bc     46 52 45 51 
1b7c0     46 52 45 51 
1b7c4     46 52 45 51 
1b7c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7cc     46 52 45 51 
1b7d0     46 52 45 51 
1b7d4     46 52 45 51 
1b7d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7dc     46 52 45 51 
1b7e0     46 52 45 51 
1b7e4     46 52 45 51 
1b7e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7ec     46 52 45 51 
1b7f0     46 52 45 51 
1b7f4     46 52 45 51 
1b7f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7fc     46 52 45 51 
1b800     46 52 45 51 
1b804     46 52 45 51 
1b808     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b80c     46 52 45 51 
1b810     46 52 45 51 
1b814     46 52 45 51 
1b818     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b81c     46 52 45 51 
1b820     46 52 45 51 
1b824     46 52 45 51 
1b828     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b82c     46 52 45 51 
1b830     46 52 45 51 
1b834     46 52 45 51 
1b838     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b83c     46 52 45 51 
1b840     46 52 45 51 
1b844     46 52 45 51 
1b848     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b84c     46 52 45 51 
1b850     46 52 45 51 
1b854     46 52 45 51 
1b858     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b85c     46 52 45 51 
1b860     46 52 45 51 
1b864     46 52 45 51 
1b868     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b86c     46 52 45 51 
1b870     46 52 45 51 
1b874     46 52 45 51 
1b878     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b87c     46 52 45 51 
1b880     46 52 45 51 
1b884     46 52 45 51 
1b888     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b88c     46 52 45 51 
1b890     46 52 45 51 
1b894     46 52 45 51 
1b898     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b89c     46 52 45 51 
1b8a0     46 52 45 51 
1b8a4     46 52 45 51 
1b8a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8ac     46 52 45 51 
1b8b0     46 52 45 51 
1b8b4     46 52 45 51 
1b8b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8bc     46 52 45 51 
1b8c0     46 52 45 51 
1b8c4     46 52 45 51 
1b8c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8cc     46 52 45 51 
1b8d0     46 52 45 51 
1b8d4     46 52 45 51 
1b8d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8dc     46 52 45 51 
1b8e0     46 52 45 51 
1b8e4     46 52 45 51 
1b8e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8ec     46 52 45 51 
1b8f0     46 52 45 51 
1b8f4     46 52 45 51 
1b8f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8fc     46 52 45 51 
1b900     46 52 45 51 
1b904     46 52 45 51 
1b908     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b90c     46 52 45 51 
1b910     46 52 45 51 
1b914     46 52 45 51 
1b918     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b91c     46 52 45 51 
1b920     46 52 45 51 
1b924     46 52 45 51 
1b928     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b92c                 | 
1b92c     00 00 00 00 
1b930     18 00 00 00 
1b934     31 00 00 00 
1b938     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1b93c     61 00 00 00 
1b940     78 00 00 00 
1b944     8D 00 00 00 
1b948     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1b94c     B4 00 00 00 
1b950     C5 00 00 00 
1b954     D4 00 00 00 
1b958     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1b95c     EB 00 00 00 
1b960     F4 00 00 00 
1b964     FA 00 00 00 
1b968     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1b96c     FF 00 00 00 
1b970     FD 00 00 00 
1b974     FA 00 00 00 
1b978     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1b97c     EB 00 00 00 
1b980     E0 00 00 00 
1b984     D4 00 00 00 
1b988     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1b98c     B4 00 00 00 
1b990     A1 00 00 00 
1b994     8D 00 00 00 
1b998     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1b99c     61 00 00 00 
1b9a0     4A 00 00 00 
1b9a4     31 00 00 00 
1b9a8     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1b9ac     00 00 00 00 
1b9b0     E8 FF FF FF 
1b9b4     CF FF FF FF 
1b9b8     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1b9bc     9F FF FF FF 
1b9c0     88 FF FF FF 
1b9c4     73 FF FF FF 
1b9c8     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1b9cc     4C FF FF FF 
1b9d0     3B FF FF FF 
1b9d4     2C FF FF FF 
1b9d8     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1b9dc     15 FF FF FF 
1b9e0     0C FF FF FF 
1b9e4     06 FF FF FF 
1b9e8     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1b9ec     01 FF FF FF 
1b9f0     03 FF FF FF 
1b9f4     06 FF FF FF 
1b9f8     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1b9fc     15 FF FF FF 
1ba00     20 FF FF FF 
1ba04     2C FF FF FF 
1ba08     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1ba0c     4C FF FF FF 
1ba10     5F FF FF FF 
1ba14     73 FF FF FF 
1ba18     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1ba1c     9F FF FF FF 
1ba20     B6 FF FF FF 
1ba24     CF FF FF FF 
1ba28     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1ba2c                 | 
1ba2c     58 03 28 03 
1ba30     FA 02 D0 02 
1ba34     A6 02 80 02 
1ba38     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1ba3c     1A 02 FC 01 
1ba40     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1ba44     AC 01 94 01 
1ba48     7D 01 68 01 
1ba4c     53 01 40 01 
1ba50     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1ba54     0D 01 FE 00 
1ba58     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1ba5c     D6 00 CA 00 
1ba60     BE 00 B4 00 
1ba64     AA 00 A0 00 
1ba68     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1ba6c     87 00 7F 00 
1ba70     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1ba74     6B 00 22 03 
1ba78     F5 02 CB 02 
1ba7c     A2 02 7D 02 
1ba80     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1ba84     17 02 F9 01 
1ba88     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1ba8c     A9 01 91 01 
1ba90     7B 01 65 01 
1ba94     51 01 3E 01 
1ba98     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1ba9c     0C 01 FD 00 
1baa0     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1baa4     D5 00 C9 00 
1baa8     BD 00 B3 00 
1baac     A9 00 9F 00 
1bab0     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1bab4     86 00 7E 00 
1bab8     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1babc     4C 03 1C 03 
1bac0     F0 02 C5 02 
1bac4     9E 02 78 02 
1bac8     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1bacc     14 02 F6 01 
1bad0     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1bad4     A6 01 8E 01 
1bad8     78 01 63 01 
1badc     4F 01 3C 01 
1bae0     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1bae4     0A 01 FB 00 
1bae8     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1baec     D3 00 C7 00 
1baf0     BC 00 B1 00 
1baf4     A7 00 9E 00 
1baf8     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1bafc     85 00 7D 00 
1bb00     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1bb04     46 03 17 03 
1bb08     EA 02 C0 02 
1bb0c     99 02 74 02 
1bb10     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1bb14     10 02 F2 01 
1bb18     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1bb1c     A3 01 8B 01 
1bb20     75 01 60 01 
1bb24     4C 01 3A 01 
1bb28     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1bb2c     08 01 F9 00 
1bb30     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1bb34     D1 00 C6 00 
1bb38     BB 00 B0 00 
1bb3c     A6 00 9D 00 
1bb40     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1bb44     84 00 7D 00 
1bb48     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1bb4c     40 03 11 03 
1bb50     E5 02 BB 02 
1bb54     94 02 6F 02 
1bb58     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1bb5c     0C 02 EF 01 
1bb60     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1bb64     A0 01 88 01 
1bb68     72 01 5E 01 
1bb6c     4A 01 38 01 
1bb70     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1bb74     06 01 F7 00 
1bb78     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1bb7c     D0 00 C4 00 
1bb80     B9 00 AF 00 
1bb84     A5 00 9C 00 
1bb88     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1bb8c     83 00 7C 00 
1bb90     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1bb94     3A 03 0B 03 
1bb98     E0 02 B6 02 
1bb9c     8F 02 6B 02 
1bba0     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1bba4     08 02 EB 01 
1bba8     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1bbac     9D 01 86 01 
1bbb0     70 01 5B 01 
1bbb4     48 01 35 01 
1bbb8     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1bbbc     04 01 F5 00 
1bbc0     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1bbc4     CE 00 C3 00 
1bbc8     B8 00 AE 00 
1bbcc     A4 00 9B 00 
1bbd0     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1bbd4     82 00 7B 00 
1bbd8     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1bbdc     34 03 06 03 
1bbe0     DA 02 B1 02 
1bbe4     8B 02 66 02 
1bbe8     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1bbec     04 02 E7 01 
1bbf0     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1bbf4     9A 01 83 01 
1bbf8     6D 01 59 01 
1bbfc     45 01 33 01 
1bc00     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1bc04     02 01 F4 00 
1bc08     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1bc0c     CD 00 C1 00 
1bc10     B7 00 AC 00 
1bc14     A3 00 9A 00 
1bc18     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1bc1c     81 00 7A 00 
1bc20     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1bc24     2E 03 00 03 
1bc28     D5 02 AC 02 
1bc2c     86 02 62 02 
1bc30     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1bc34     01 02 E4 01 
1bc38     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1bc3c     97 01 80 01 
1bc40     6B 01 56 01 
1bc44     43 01 31 01 
1bc48     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1bc4c     00 01 F2 00 
1bc50     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1bc54     CC 00 C0 00 
1bc58     B5 00 AB 00 
1bc5c     A1 00 98 00 
1bc60     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1bc64     80 00 79 00 
1bc68     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1bc6c     8B 03 58 03 
1bc70     28 03 FA 02 
1bc74     D0 02 A6 02 
1bc78     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1bc7c     3A 02 1A 02 
1bc80     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1bc84     C5 01 AC 01 
1bc88     94 01 7D 01 
1bc8c     68 01 53 01 
1bc90     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1bc94     1D 01 0D 01 
1bc98     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1bc9c     E2 00 D6 00 
1bca0     CA 00 BE 00 
1bca4     B4 00 AA 00 
1bca8     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1bcac     8F 00 87 00 
1bcb0     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1bcb4     84 03 52 03 
1bcb8     22 03 F5 02 
1bcbc     CB 02 A3 02 
1bcc0     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1bcc4     37 02 17 02 
1bcc8     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1bccc     C2 01 A9 01 
1bcd0     91 01 7B 01 
1bcd4     65 01 51 01 
1bcd8     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1bcdc     1C 01 0C 01 
1bce0     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1bce4     E1 00 D4 00 
1bce8     C8 00 BD 00 
1bcec     B3 00 A9 00 
1bcf0     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1bcf4     8E 00 86 00 
1bcf8     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1bcfc     7E 03 4C 03 
1bd00     1C 03 F0 02 
1bd04     C5 02 9E 02 
1bd08     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1bd0c     33 02 14 02 
1bd10     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1bd14     BF 01 A6 01 
1bd18     8E 01 78 01 
1bd1c     63 01 4F 01 
1bd20     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1bd24     1A 01 0A 01 
1bd28     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1bd2c     DF 00 D3 00 
1bd30     C7 00 BC 00 
1bd34     B1 00 A7 00 
1bd38     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1bd3c     8D 00 85 00 
1bd40     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1bd44     77 03 46 03 
1bd48     17 03 EA 02 
1bd4c     C0 02 99 02 
1bd50     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1bd54     2F 02 10 02 
1bd58     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1bd5c     BC 01 A3 01 
1bd60     8B 01 75 01 
1bd64     60 01 4C 01 
1bd68     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1bd6c     18 01 08 01 
1bd70     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1bd74     DE 00 D1 00 
1bd78     C6 00 BB 00 
1bd7c     B0 00 A6 00 
1bd80     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1bd84     8C 00 84 00 
1bd88     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1bd8c     71 03 40 03 
1bd90     11 03 E5 02 
1bd94     BB 02 94 02 
1bd98     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1bd9c     2B 02 0C 02 
1bda0     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1bda4     B9 01 A0 01 
1bda8     88 01 72 01 
1bdac     5E 01 4A 01 
1bdb0     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1bdb4     16 01 06 01 
1bdb8     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1bdbc     DC 00 D0 00 
1bdc0     C4 00 B9 00 
1bdc4     AF 00 A5 00 
1bdc8     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1bdcc     8B 00 83 00 
1bdd0     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1bdd4     6B 03 3A 03 
1bdd8     0B 03 E0 02 
1bddc     B6 02 8F 02 
1bde0     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1bde4     27 02 08 02 
1bde8     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1bdec     B5 01 9D 01 
1bdf0     86 01 70 01 
1bdf4     5B 01 48 01 
1bdf8     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1bdfc     14 01 04 01 
1be00     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1be04     DB 00 CE 00 
1be08     C3 00 B8 00 
1be0c     AE 00 A4 00 
1be10     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1be14     8A 00 82 00 
1be18     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1be1c     64 03 34 03 
1be20     06 03 DA 02 
1be24     B1 02 8B 02 
1be28     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1be2c     23 02 04 02 
1be30     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1be34     B2 01 9A 01 
1be38     83 01 6D 01 
1be3c     59 01 45 01 
1be40     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1be44     12 01 02 01 
1be48     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1be4c     D9 00 CD 00 
1be50     C1 00 B7 00 
1be54     AC 00 A3 00 
1be58     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1be5c     89 00 81 00 
1be60     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1be64     5E 03 2E 03 
1be68     00 03 D5 02 
1be6c     AC 02 86 02 
1be70     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1be74     1F 02 01 02 
1be78     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1be7c     AF 01 97 01 
1be80     80 01 6B 01 
1be84     56 01 43 01 
1be88     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1be8c     10 01 00 01 
1be90     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1be94     D8 00 CB 00 
1be98     C0 00 B5 00 
1be9c     AB 00 A1 00 
1bea0     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1bea4     88 00 80 00 
1bea8     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1beac                 | 	alignl
1beac                 | _audio019_spin2_dat_
1beac                 | 
1beac                 | audio       org     0
1beac     00 F2 07 F6 | 			mov     ptrb,#0
1beb0     0E 7A 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1beb4     0E C8 1C FC |             wxpin   #100,#left
1beb8     0F 7A 05 FC |             wrpin   dac,#right
1bebc     0F C8 1C FC |             wxpin   #100,#right
1bec0     41 9C 64 FD |             dirh    #left addpins 1
1bec4     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1bec8     75 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1becc     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1bed0                 |             
1bed0                 | '---------------------------------------------------------------------------------        
1bed0                 | '----------------- The main loop -------------------------------------------------
1bed0                 | '---------------------------------------------------------------------------------
1bed0                 | 
1bed0     81 04 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
1bed4     10 00 90 CD |       if_c  jmp     #loop1
1bed8                 |   
1bed8     09 4A 05 F6 |             mov     cn,#9
1bedc     81 4A 8D F9 | p402        altd    cn,#a21000000
1bee0     80 00 80 F1 |             sub     0-0,a20000000
1bee4     FD 4B 6D FB |             djnz    cn,#p402
1bee8                 |     
1bee8     00 4A 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
1beec     83 4C 01 F6 |             mov     ct,time1           ' with the lowest next sample time
1bef0     84 4C 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
1bef4     01 4A 05 C6 |     if_c    mov     cn,#1
1bef8     85 4C 39 F3 |             fle     ct,time3 wcz
1befc     02 4A 05 C6 |     if_c    mov     cn,#2     
1bf00     86 4C 39 F3 |             fle     ct,time4 wcz
1bf04     03 4A 05 C6 |     if_c    mov     cn,#3
1bf08     87 4C 39 F3 |             fle     ct,time5 wcz
1bf0c     04 4A 05 C6 |     if_c    mov     cn,#4
1bf10     88 4C 39 F3 |             fle     ct,time6 wcz
1bf14     05 4A 05 C6 |     if_c    mov     cn,#5
1bf18     89 4C 39 F3 |             fle     ct,time7 wcz
1bf1c     06 4A 05 C6 |     if_c    mov     cn,#6
1bf20     8A 4C 39 F3 |             fle     ct,time8 wcz
1bf24     07 4A 05 C6 |     if_c    mov     cn,#7
1bf28                 | 
1bf28                 | 
1bf28                 | '----------------------------------------------------------------------------------
1bf28                 | '------------- Compute channel samples --------------------------------------------
1bf28                 | '----------------------------------------------------------------------------------
1bf28                 | 
1bf28                 | 
1bf28     A5 20 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
1bf2c     05 20 65 F0 |             shl     channeladd,#5
1bf30     90 F0 03 F1 |             add     ptra,channeladd
1bf34                 | 
1bf34     28 0E 64 FD |             setq    #7               
1bf38     00 31 05 FB |             rdlong  pointer0,ptra
1bf3c                 |             
1bf3c     9D 46 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
1bf40     9D 44 31 F9 |     	    getword avol0,volpan0,#0
1bf44     9E 42 39 F9 | 	        getword askip0,freqskip0,#1    	    
1bf48     9E 40 31 F9 | 	        getword afreq0,freqskip0,#0
1bf4c                 | 
1bf4c     83 4A 95 F9 |             alts    cn, #time1
1bf50     00 4E 01 F6 |             mov     dt0,0-0   
1bf54     82 4E 81 F1 |             sub     dt0,time0
1bf58                 | 
1bf58     83 4A 8D F9 |             altd    cn, #time1
1bf5c     A0 00 00 F1 |             add     0-0,afreq0  	
1bf60                 | 
1bf60     A1 30 01 F1 |             add     pointer0,askip0
1bf64     9C 30 19 F2 |             cmp     pointer0,lend0 wcz
1bf68     9C 30 81 31 |     if_ge   sub     pointer0,lend0	        
1bf6c     9B 30 01 31 |     if_ge   add     pointer0,lstart0       
1bf70     98 24 01 F6 |             mov     qq,pointer0
1bf74     9A 24 01 F1 |             add     qq,sstart0
1bf78                 | 
1bf78     1F 34 0D F4 |             testb   sstart0,#31 wz
1bf7c                 | 
1bf7c     92 26 C1 5A |     if_nz   rdbyte  spl,qq
1bf80     08 26 65 50 |     if_nz   shl     spl,#8
1bf84     92 26 E1 AA |     if_z    rdword  spl,qq
1bf88                 | 
1bf88     A2 26 31 FA |             scas    spl,avol0
1bf8c     00 26 01 F6 |             mov     spl,0-0
1bf90                 |  
1bf90     A3 26 31 FA |             scas    spl,apan0
1bf94     00 50 01 F6 |             mov     ls0,0-0
1bf98                 |  
1bf98     AD 4A 8D F9 |             altd    cn,#ls1
1bf9c     A8 00 00 F6 |             mov     0-0,ls0
1bfa0                 |              
1bfa0     20 00 00 FF 
1bfa4     00 24 05 F6 |             mov     qq,##16384
1bfa8     A3 24 81 F1 |             sub     qq,apan0
1bfac     92 26 31 FA |             scas    spl,qq
1bfb0     00 52 01 F6 |             mov     rs0, 0-0
1bfb4                 | 
1bfb4     B5 4A 8D F9 |             altd    cn,#rs1
1bfb8     A9 00 00 F6 |             mov     0-0,rs0
1bfbc                 | 
1bfbc     A9 32 29 F9 |             setword sample0,rs0,#1
1bfc0     A8 32 21 F9 |             setword sample0,ls0,#0
1bfc4                 |             
1bfc4                 | 
1bfc4     1E 34 1D F4 |             bitl   sstart0, #30 wcz            
1bfc8     00 30 05 A6 |     if_z    mov    pointer0, #0  
1bfcc     02 35 65 AC |     if_z    wrlong sstart0, ptra[2]
1bfd0     28 02 64 FD | p403        setq #1
1bfd4                 |      
1bfd4     00 31 65 FC |             wrlong  pointer0,ptra
1bfd8     90 F0 83 F1 |             sub     ptra, channeladd
1bfdc     00 00 90 FD |             jmp     #p101
1bfe0                 |                        
1bfe0                 |             
1bfe0                 |           
1bfe0                 |             
1bfe0                 | '------------------------ Channels end here --------------------       
1bfe0                 | 
1bfe0                 | ' Now add all channels and put the sample to the buffer    
1bfe0                 | 
1bfe0                 | 
1bfe0     82 48 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
1bfe4     01 22 85 A1 |     if_z    sub     front,#1         ' 
1bfe8     FF 23 05 A5 |     if_z    and     front,#511     
1bfec                 |            
1bfec                 |     
1bfec     00 58 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
1bff0     00 56 05 F6 |             mov     ls,#0
1bff4     B5 58 01 F1 |             add     rs,rs1
1bff8     B6 58 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
1bffc     B7 58 01 F1 |             add     rs,rs3
1c000     B8 58 01 F1 |             add     rs,rs4
1c004     B9 58 01 F1 |             add     rs,rs5
1c008     BA 58 01 F1 |             add     rs,rs6
1c00c     BB 58 01 F1 |             add     rs,rs7
1c010     BC 58 01 F1 |             add     rs,rs8
1c014                 | 
1c014                 |            
1c014     AD 56 01 F1 |             add     ls,ls1
1c018     AE 56 01 F1 |             add     ls,ls2
1c01c     AF 56 01 F1 |             add     ls,ls3
1c020     B0 56 01 F1 |             add     ls,ls4
1c024     B1 56 01 F1 |             add     ls,ls5
1c028     B2 56 01 F1 |             add     ls,ls6
1c02c     B3 56 01 F1 |             add     ls,ls7
1c030     B4 56 01 F1 |             add     ls,ls8
1c034                 | 
1c034                 |  		
1c034     0F 56 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1c038     0F 58 E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
1c03c                 | 		    
1c03c     AB 58 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
1c040     AC 16 01 F6 |             mov newsample, rs
1c044                 | 
1c044     82 48 01 F6 |             mov     oldt0,time0      ' update global time
1c048     A7 04 01 F1 |             add     time0,dt0    
1c04c                 | 
1c04c                 |             
1c04c                 |  
1c04c                 |                                      ' now push dt0 samples to the buffer
1c04c     00 4E 0D F2 |             cmp      dt0,#0 wz
1c050     94 FE 9F AD |     if_z    jmp      #loop1
1c054     A7 18 01 F6 |             mov      t1,dt0
1c058                 |   
1c058     F9 1B 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
1c05c     01 1A 85 F1 |             sub     t2,#1
1c060     FF 1B 05 F5 |             and     t2,#511
1c064     91 1A 19 F2 |             cmp     t2,front wcz
1c068     EC FF 9F AD |     if_e    jmp     #p301    
1c06c                 |     
1c06c     91 16 31 FC |             wrlut   newsample, front
1c070     01 22 05 F1 |             add     front,#1
1c074     FF 23 05 F5 |             and     front,#511
1c078     F7 19 6D FB |             djnz    t1,#p301
1c07c                 |             
1c07c     50 FE 9F FD |             jmp     #loop            'loop
1c080                 | 
1c080                 | '-------------------------------------------------------------------------
1c080                 | '------------------ This is the end of the main loop ---------------------
1c080                 | '-------------------------------------------------------------------------
1c080                 | 
1c080                 | '--------------------------------------------------------------------------
1c080                 | '------ Interrupt service -------------------------------------------------
1c080                 | '------ Output the sample, get the next one if exists ---------------------
1c080                 | '--------------------------------------------------------------------------
1c080                 | 
1c080     0E 28 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
1c084     0F 2A 25 FC |             wypin   rsample,#right       '4
1c088                 |            
1c088     91 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
1c08c     F5 FF 3B AB |     if_e    reti1                        '8/10
1c090                 | 
1c090     E1 2D A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
1c094     96 2A 39 F9 |           	getword rsample,lsnext,#1    '13
1c098     96 28 31 F9 |           	getword lsample,lsnext,#0    '15
1c09c     F5 FF 3B FB |             reti1                        '17/19 
1c0a0                 |           
1c0a0                 | '---------------------------------------------------------------------------
1c0a0                 | '-------- End of interrupt -------------------------------------------------
1c0a0                 | '---------------------------------------------------------------------------    
1c0a0                 | 
1c0a0                 | 
1c0a0                 | '---------------------------------------------------------------------------
1c0a0                 | '------- Variables ---------------------------------------------------------
1c0a0                 | '---------------------------------------------------------------------------
1c0a0                 | 
1c0a0                 | ' constants
1c0a0                 | 
1c0a0     00 00 00 00 | hp long 0
1c0a4     00 00 00 00 | lp long 0
1c0a8     00 00 00 00 | bp long 0
1c0ac     00 00 00 10 | a20000000   long $10000000
1c0b0     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
1c0b4                 | 
1c0b4                 | ' Time variables
1c0b4                 | 
1c0b4     00 00 00 00 | time0       long 0    ' Global sample computing time
1c0b8     01 00 00 00 | time1       long 1    ' Local channels time
1c0bc     02 00 00 00 | time2       long 2
1c0c0     03 00 00 00 | time3       long 3
1c0c4     04 00 00 00 | time4       long 4
1c0c8     05 00 00 00 | time5       long 5
1c0cc     06 00 00 00 | time6       long 6
1c0d0     07 00 00 00 | time7       long 7
1c0d4     08 00 00 00 | time8       long 8
1c0d8                 | 
1c0d8                 | 
1c0d8                 | 
1c0d8     00 00 00 00 | newsample long 0
1c0dc                 | '
1c0dc     00 00 00 00 | t1 long 0
1c0e0     00 00 00 00 | t2 long 0
1c0e4                 | '
1c0e4     00 00 00 00 | nrsample long 0
1c0e8     00 00 00 00 | nlsample long 0
1c0ec                 | '
1c0ec     00 00 00 00 | channeladd long 0
1c0f0                 | 
1c0f0                 | 
1c0f0     00 00 00 00 | front       long 0
1c0f4                 | 
1c0f4                 | ' temporary variables 
1c0f4                 | '
1c0f4     00 00 00 00 | qq          long 0
1c0f8     00 00 00 00 | spl         long 0
1c0fc                 | 
1c0fc                 | ' circular buffer in LUT
1c0fc                 | 
1c0fc                 | 
1c0fc                 | '
1c0fc                 | 
1c0fc                 | ' Interrupt ISR variables
1c0fc                 | 
1c0fc                 | 
1c0fc     00 00 00 00 | lsample     long 0
1c100     00 00 00 00 | rsample     long 0
1c104     00 00 00 00 | lsnext      long 0
1c108     00 00 00 00 | rsnext      long 0 
1c10c                 | 
1c10c                 | 
1c10c     00 00 00 00 | pointer0    long 0
1c110     00 00 00 00 | sample0     long 0
1c114     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
1c118     00 00 00 00 | lstart0     long 0
1c11c     00 00 00 00 | lend0       long 0
1c120     00 00 00 00 | volpan0     long 0
1c124     00 00 00 00 | freqskip0   long 0
1c128     00 00 00 00 | dummy0      long 0
1c12c                 | 
1c12c     00 00 00 00 | afreq0      long 0
1c130     00 00 00 00 | askip0      long 0
1c134     00 00 00 00 | avol0       long 0
1c138     00 00 00 00 | apan0       long 0
1c13c                 | 
1c13c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
1c140     00 00 00 00 | cn          long 0
1c144     00 00 00 00 | ct          long 0
1c148     00 00 00 00 | dt0         long 0
1c14c                 | 
1c14c                 | ' Samples
1c14c     00 00 00 00 | ls0         long 0
1c150     00 00 00 00 | rs0         long 0
1c154     00 00 00 00 | channel     long 0
1c158     00 00 00 00 | ls          long 0    ' Global sample variable
1c15c     00 00 00 00 | rs          long 0
1c160                 | 
1c160     00 00 00 00 | ls1         long 0    ' Channel samples
1c164     00 00 00 00 | ls2         long 0
1c168     00 00 00 00 | ls3         long 0
1c16c     00 00 00 00 | ls4         long 0
1c170     00 00 00 00 | ls5         long 0
1c174     00 00 00 00 | ls6         long 0
1c178     00 00 00 00 | ls7         long 0
1c17c     00 00 00 00 | ls8         long 0
1c180     00 00 00 00 | rs1         long 0
1c184     00 00 00 00 | rs2         long 0
1c188     00 00 00 00 | rs3         long 0
1c18c     00 00 00 00 | rs4         long 0
1c190     00 00 00 00 | rs5         long 0
1c194     00 00 00 00 | rs6         long 0
1c198     00 00 00 00 | rs7         long 0
1c19c     00 00 00 00 | rs8         long 0
1c1a0                 | 
1c1a0     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
1c1a4                 | 
1c1a4     00 00 00 00 
1c1a8     00 00 00 00 | null  			long 	0,0           ' for channel reset
1c1ac     73 32 00 04 
1c1b0     00 00 10 00 
1c1b4     00 00 00 00 
1c1b8     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
1c1bc     00 00 C9 00 
1c1c0     92 01 5B 02 
1c1c4     24 03 ED 03 
1c1c8     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
1c1cc     48 06 11 07 
1c1d0     D9 07 A2 08 
1c1d4     6A 09 33 0A 
1c1d8     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
1c1dc     8C 0C 54 0D 
1c1e0     1C 0E E3 0E 
1c1e4     AB 0F 72 10 
1c1e8     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
1c1ec     C8 12 8F 13 
1c1f0     55 14 1C 15 
1c1f4     E2 15 A8 16 
1c1f8     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
1c1fc     F9 18 BE 19 
1c200     82 1A 47 1B 
1c204     0B 1C CF 1C 
1c208     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
1c20c     1A 1F DD 1F 
1c210     9F 20 61 21 
1c214     23 22 E5 22 
1c218     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
1c21c     28 25 E8 25 
1c220     A8 26 67 27 
1c224     26 28 E5 28 
1c228     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
1c22c     1F 2B DC 2B 
1c230     99 2C 55 2D 
1c234     11 2E CC 2E 
1c238     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
1c23c     FB 30 B5 31 
1c240     6E 32 26 33 
1c244     DF 33 96 34 
1c248     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
1c24c     BA 36 6F 37 
1c250     24 38 D9 38 
1c254     8C 39 40 3A 
1c258     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
1c25c     56 3C 07 3D 
1c260     B8 3D 68 3E 
1c264     17 3F C5 3F 
1c268     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
1c26c     CE 41 7A 42 
1c270     25 43 D0 43 
1c274     7A 44 24 45 
1c278     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
1c27c     1C 47 C3 47 
1c280     69 48 0F 49 
1c284     B4 49 58 4A 
1c288     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
1c28c     3F 4C E0 4C 
1c290     81 4D 20 4E 
1c294     BF 4E 5D 4F 
1c298     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
1c29c     33 51 CE 51 
1c2a0     68 52 02 53 
1c2a4     9B 53 32 54 
1c2a8     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
1c2ac     F5 55 8A 56 
1c2b0     1D 57 B0 57 
1c2b4     42 58 D3 58 
1c2b8     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
1c2bc     82 5A 0F 5B 
1c2c0     9C 5B 28 5C 
1c2c4     B3 5C 3E 5D 
1c2c8     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
1c2cc     D7 5E 5D 5F 
1c2d0     E3 5F 68 60 
1c2d4     EB 60 6E 61 
1c2d8     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
1c2dc     F1 62 70 63 
1c2e0     EE 63 6C 64 
1c2e4     E8 64 63 65 
1c2e8     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
1c2ec     CF 66 46 67 
1c2f0     BC 67 32 68 
1c2f4     A6 68 19 69 
1c2f8     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
1c2fc     6D 6A DC 6A 
1c300     4A 6B B7 6B 
1c304     23 6C 8E 6C 
1c308     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
1c30c     C9 6D 30 6E 
1c310     96 6E FB 6E 
1c314     5E 6F C1 6F 
1c318     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
1c31c     E2 70 40 71 
1c320     9D 71 F9 71 
1c324     54 72 AE 72 
1c328     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
1c32c     B5 73 0A 74 
1c330     5F 74 B2 74 
1c334     04 75 55 75 
1c338     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
1c33c     41 76 8D 76 
1c340     D8 76 22 77 
1c344     6B 77 B3 77 
1c348     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
1c34c     84 78 C7 78 
1c350     09 79 4A 79 
1c354     89 79 C8 79 
1c358     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
1c35c     7C 7A B6 7A 
1c360     EE 7A 26 7B 
1c364     5C 7B 91 7B 
1c368     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
1c36c     29 7C 59 7C 
1c370     88 7C B6 7C 
1c374     E3 7C 0E 7D 
1c378     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
1c37c     89 7D B0 7D 
1c380     D5 7D FA 7D 
1c384     1D 7E 3E 7E 
1c388     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
1c38c     9C 7E B9 7E 
1c390     D5 7E EF 7E 
1c394     09 7F 21 7F 
1c398     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
1c39c     61 7F 74 7F 
1c3a0     86 7F 97 7F 
1c3a4     A6 7F B4 7F 
1c3a8     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
1c3ac     D8 7F E1 7F 
1c3b0     E9 7F F0 7F 
1c3b4     F5 7F F9 7F 
1c3b8     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
1c3bc     FF 7F FE 7F 
1c3c0     FD 7F F9 7F 
1c3c4     F5 7F F0 7F 
1c3c8     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
1c3cc     D8 7F CD 7F 
1c3d0     C1 7F B4 7F 
1c3d4     A6 7F 97 7F 
1c3d8     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
1c3dc     61 7F 4D 7F 
1c3e0     37 7F 21 7F 
1c3e4     09 7F EF 7E 
1c3e8     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
1c3ec     9C 7E 7E 7E 
1c3f0     5F 7E 3E 7E 
1c3f4     1D 7E FA 7D 
1c3f8     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
1c3fc     89 7D 62 7D 
1c400     39 7D 0E 7D 
1c404     E3 7C B6 7C 
1c408     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
1c40c     29 7C F8 7B 
1c410     C5 7B 91 7B 
1c414     5C 7B 26 7B 
1c418     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
1c41c     7C 7A 41 7A 
1c420     05 7A C8 79 
1c424     89 79 4A 79 
1c428     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
1c42c     84 78 3F 78 
1c430     FA 77 B3 77 
1c434     6B 77 22 77 
1c438     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
1c43c     41 76 F3 75 
1c440     A5 75 55 75 
1c444     04 75 B2 74 
1c448     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
1c44c     B5 73 5E 73 
1c450     07 73 AE 72 
1c454     54 72 F9 71 
1c458     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
1c45c     E2 70 83 70 
1c460     22 70 C1 6F 
1c464     5E 6F FB 6E 
1c468     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
1c46c     C9 6D 61 6D 
1c470     F8 6C 8E 6C 
1c474     23 6C B7 6B 
1c478     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
1c47c     6D 6A FD 69 
1c480     8B 69 19 69 
1c484     A6 68 32 68 
1c488     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
1c48c     CF 66 56 66 
1c490     DD 65 63 65 
1c494     E8 64 6C 64 
1c498     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
1c49c     F1 62 71 62 
1c4a0     F0 61 6E 61 
1c4a4     EB 60 68 60 
1c4a8     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
1c4ac     D7 5E 4F 5E 
1c4b0     C7 5D 3E 5D 
1c4b4     B3 5C 28 5C 
1c4b8     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
1c4bc     82 5A F3 59 
1c4c0     64 59 D3 58 
1c4c4     42 58 B0 57 
1c4c8     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
1c4cc     F5 55 60 55 
1c4d0     C9 54 32 54 
1c4d4     9B 53 02 53 
1c4d8     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
1c4dc     33 51 97 50 
1c4e0     FB 4F 5D 4F 
1c4e4     BF 4E 20 4E 
1c4e8     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
1c4ec     3F 4C 9D 4B 
1c4f0     FB 4A 58 4A 
1c4f4     B4 49 0F 49 
1c4f8     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
1c4fc     1C 47 75 46 
1c500     CD 45 24 45 
1c504     7A 44 D0 43 
1c508     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
1c50c     CE 41 21 41 
1c510     73 40 C5 3F 
1c514     17 3F 68 3E 
1c518     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
1c51c     56 3C A5 3B 
1c520     F2 3A 40 3A 
1c524     8C 39 D9 38 
1c528     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
1c52c     BA 36 04 36 
1c530     4D 35 96 34 
1c534     DF 33 26 33 
1c538     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
1c53c     FB 30 41 30 
1c540     87 2F CC 2E 
1c544     11 2E 55 2D 
1c548     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
1c54c     1F 2B 61 2A 
1c550     A3 29 E5 28 
1c554     26 28 67 27 
1c558     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
1c55c     28 25 67 24 
1c560     A6 23 E5 22 
1c564     23 22 61 21 
1c568     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
1c56c     1A 1F 57 1E 
1c570     93 1D CF 1C 
1c574     0B 1C 47 1B 
1c578     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
1c57c     F9 18 33 18 
1c580     6E 17 A8 16 
1c584     E2 15 1C 15 
1c588     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
1c58c     C8 12 01 12 
1c590     3A 11 72 10 
1c594     AB 0F E3 0E 
1c598     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
1c59c     8C 0C C4 0B 
1c5a0     FB 0A 33 0A 
1c5a4     6A 09 A2 08 
1c5a8     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
1c5ac     48 06 7F 05 
1c5b0     B6 04 ED 03 
1c5b4     24 03 5B 02 
1c5b8     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
1c5bc     00 00 37 FF 
1c5c0     6E FE A5 FD 
1c5c4     DC FC 13 FC 
1c5c8     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
1c5cc     B8 F9 EF F8 
1c5d0     27 F8 5E F7 
1c5d4     96 F6 CD F5 
1c5d8     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
1c5dc     74 F3 AC F2 
1c5e0     E4 F1 1D F1 
1c5e4     55 F0 8E EF 
1c5e8     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
1c5ec     38 ED 71 EC 
1c5f0     AB EB E4 EA 
1c5f4     1E EA 58 E9 
1c5f8     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
1c5fc     07 E7 42 E6 
1c600     7E E5 B9 E4 
1c604     F5 E3 31 E3 
1c608     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
1c60c     E6 E0 23 E0 
1c610     61 DF 9F DE 
1c614     DD DD 1B DD 
1c618     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
1c61c     D8 DA 18 DA 
1c620     58 D9 99 D8 
1c624     DA D7 1B D7 
1c628     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
1c62c     E1 D4 24 D4 
1c630     67 D3 AB D2 
1c634     EF D1 34 D1 
1c638     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
1c63c     05 CF 4B CE 
1c640     92 CD DA CC 
1c644     21 CC 6A CB 
1c648     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
1c64c     46 C9 91 C8 
1c650     DC C7 27 C7 
1c654     74 C6 C0 C5 
1c658     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
1c65c     AA C3 F9 C2 
1c660     48 C2 98 C1 
1c664     E9 C0 3B C0 
1c668     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
1c66c     32 BE 86 BD 
1c670     DB BC 30 BC 
1c674     86 BB DC BA 
1c678     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
1c67c     E4 B8 3D B8 
1c680     97 B7 F1 B6 
1c684     4C B6 A8 B5 
1c688     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
1c68c     C1 B3 20 B3 
1c690     7F B2 E0 B1 
1c694     41 B1 A3 B0 
1c698     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
1c69c     CD AE 32 AE 
1c6a0     98 AD FE AC 
1c6a4     65 AC CE AB 
1c6a8     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
1c6ac     0B AA 76 A9 
1c6b0     E3 A8 50 A8 
1c6b4     BE A7 2D A7 
1c6b8     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
1c6bc     7E A5 F1 A4 
1c6c0     64 A4 D8 A3 
1c6c4     4D A3 C2 A2 
1c6c8     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
1c6cc     29 A1 A3 A0 
1c6d0     1D A0 98 9F 
1c6d4     15 9F 92 9E 
1c6d8     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
1c6dc     0F 9D 90 9C 
1c6e0     12 9C 94 9B 
1c6e4     18 9B 9D 9A 
1c6e8     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
1c6ec     31 99 BA 98 
1c6f0     44 98 CE 97 
1c6f4     5A 97 E7 96 
1c6f8     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
1c6fc     93 95 24 95 
1c700     B6 94 49 94 
1c704     DD 93 72 93 
1c708     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
1c70c     37 92 D0 91 
1c710     6A 91 05 91 
1c714     A2 90 3F 90 
1c718     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
1c71c     1E 8F C0 8E 
1c720     63 8E 07 8E 
1c724     AC 8D 52 8D 
1c728     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
1c72c     4B 8C F6 8B 
1c730     A1 8B 4E 8B 
1c734     FC 8A AB 8A 
1c738     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
1c73c     BF 89 73 89 
1c740     28 89 DE 88 
1c744     95 88 4D 88 
1c748     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
1c74c     7C 87 39 87 
1c750     F7 86 B6 86 
1c754     77 86 38 86 
1c758     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
1c75c     84 85 4A 85 
1c760     12 85 DA 84 
1c764     A4 84 6F 84 
1c768     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
1c76c     D7 83 A7 83 
1c770     78 83 4A 83 
1c774     1D 83 F2 82 
1c778     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
1c77c     77 82 50 82 
1c780     2B 82 06 82 
1c784     E3 81 C2 81 
1c788     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
1c78c     64 81 47 81 
1c790     2B 81 11 81 
1c794     F7 80 DF 80 
1c798     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
1c79c     9F 80 8C 80 
1c7a0     7A 80 69 80 
1c7a4     5A 80 4C 80 
1c7a8     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
1c7ac     28 80 1F 80 
1c7b0     17 80 10 80 
1c7b4     0B 80 07 80 
1c7b8     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
1c7bc     01 80 02 80 
1c7c0     03 80 07 80 
1c7c4     0B 80 10 80 
1c7c8     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
1c7cc     28 80 33 80 
1c7d0     3F 80 4C 80 
1c7d4     5A 80 69 80 
1c7d8     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
1c7dc     9F 80 B3 80 
1c7e0     C9 80 DF 80 
1c7e4     F7 80 11 81 
1c7e8     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
1c7ec     64 81 82 81 
1c7f0     A1 81 C2 81 
1c7f4     E3 81 06 82 
1c7f8     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
1c7fc     77 82 9E 82 
1c800     C7 82 F2 82 
1c804     1D 83 4A 83 
1c808     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
1c80c     D7 83 08 84 
1c810     3B 84 6F 84 
1c814     A4 84 DA 84 
1c818     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
1c81c     84 85 BF 85 
1c820     FB 85 38 86 
1c824     77 86 B6 86 
1c828     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
1c82c     7C 87 C1 87 
1c830     06 88 4D 88 
1c834     95 88 DE 88 
1c838     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
1c83c     BF 89 0D 8A 
1c840     5B 8A AB 8A 
1c844     FC 8A 4E 8B 
1c848     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
1c84c     4B 8C A2 8C 
1c850     F9 8C 52 8D 
1c854     AC 8D 07 8E 
1c858     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
1c85c     1E 8F 7D 8F 
1c860     DE 8F 3F 90 
1c864     A2 90 05 91 
1c868     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
1c86c     37 92 9F 92 
1c870     08 93 72 93 
1c874     DD 93 49 94 
1c878     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
1c87c     93 95 03 96 
1c880     75 96 E7 96 
1c884     5A 97 CE 97 
1c888     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
1c88c     31 99 AA 99 
1c890     23 9A 9D 9A 
1c894     18 9B 94 9B 
1c898     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
1c89c     0F 9D 8F 9D 
1c8a0     10 9E 92 9E 
1c8a4     15 9F 98 9F 
1c8a8     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
1c8ac     29 A1 B1 A1 
1c8b0     39 A2 C2 A2 
1c8b4     4D A3 D8 A3 
1c8b8     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
1c8bc     7E A5 0D A6 
1c8c0     9C A6 2D A7 
1c8c4     BE A7 50 A8 
1c8c8     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
1c8cc     0B AA A0 AA 
1c8d0     37 AB CE AB 
1c8d4     65 AC FE AC 
1c8d8     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
1c8dc     CD AE 69 AF 
1c8e0     05 B0 A3 B0 
1c8e4     41 B1 E0 B1 
1c8e8     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
1c8ec     C1 B3 63 B4 
1c8f0     05 B5 A8 B5 
1c8f4     4C B6 F1 B6 
1c8f8     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
1c8fc     E4 B8 8B B9 
1c900     33 BA DC BA 
1c904     86 BB 30 BC 
1c908     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
1c90c     32 BE DF BE 
1c910     8D BF 3B C0 
1c914     E9 C0 98 C1 
1c918     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
1c91c     AA C3 5B C4 
1c920     0E C5 C0 C5 
1c924     74 C6 27 C7 
1c928     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
1c92c     46 C9 FC C9 
1c930     B3 CA 6A CB 
1c934     21 CC DA CC 
1c938     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
1c93c     05 CF BF CF 
1c940     79 D0 34 D1 
1c944     EF D1 AB D2 
1c948     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
1c94c     E1 D4 9F D5 
1c950     5D D6 1B D7 
1c954     DA D7 99 D8 
1c958     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
1c95c     D8 DA 99 DB 
1c960     5A DC 1B DD 
1c964     DD DD 9F DE 
1c968     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
1c96c     E6 E0 A9 E1 
1c970     6D E2 31 E3 
1c974     F5 E3 B9 E4 
1c978     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
1c97c     07 E7 CD E7 
1c980     92 E8 58 E9 
1c984     1E EA E4 EA 
1c988     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
1c98c     38 ED FF ED 
1c990     C6 EE 8E EF 
1c994     55 F0 1D F1 
1c998     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
1c99c     74 F3 3C F4 
1c9a0     05 F5 CD F5 
1c9a4     96 F6 5E F7 
1c9a8     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
1c9ac     B8 F9 81 FA 
1c9b0     4A FB 13 FC 
1c9b4     DC FC A5 FD 
1c9b8     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
1c9bc                 | 	alignl
1c9bc                 | __system__dat_
1c9bc     00 00 00 00 
1c9c0     00 00 00 00 | 	byte	$00[8]
1c9c4     03 00 00 00 
1c9c8     00 00 00 00 
1c9cc     00 00 00 00 
1c9d0     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c9d4     00 00 00 00 
1c9d8     00 00 00 00 
1c9dc     00 00 00 00 
1c9e0     00 00 00 00 
1c9e4     00 00 00 00 | 	byte	$00[20]
1c9e8     05 00 00 00 
1c9ec     00 00 00 00 
1c9f0     00 00 00 00 
1c9f4     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1c9f8     C0 CB 01 00 | 	long	@@@__system__dat_ + 516
1c9fc     C8 CB 01 00 | 	long	@@@__system__dat_ + 524
1ca00     00 00 00 00 | 	byte	$00, $00, $00, $00
1ca04     D0 CB 01 00 | 	long	@@@__system__dat_ + 532
1ca08     D8 CB 01 00 | 	long	@@@__system__dat_ + 540
1ca0c     00 00 00 00 
1ca10     00 00 00 00 | 	byte	$00[8]
1ca14     01 00 00 00 
1ca18     06 00 00 00 
1ca1c     00 00 00 00 
1ca20     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ca24     00 00 00 00 | 	byte	$00, $00, $00, $00
1ca28     E0 CB 01 00 | 	long	@@@__system__dat_ + 548
1ca2c     E8 CB 01 00 | 	long	@@@__system__dat_ + 556
1ca30     00 00 00 00 | 	byte	$00, $00, $00, $00
1ca34     F0 CB 01 00 | 	long	@@@__system__dat_ + 564
1ca38     F8 CB 01 00 | 	long	@@@__system__dat_ + 572
1ca3c     00 00 00 00 
1ca40     00 00 00 00 | 	byte	$00[8]
1ca44     01 00 00 00 
1ca48     06 00 00 00 
1ca4c     00 00 00 00 
1ca50     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ca54     00 00 00 00 | 	byte	$00, $00, $00, $00
1ca58     00 CC 01 00 | 	long	@@@__system__dat_ + 580
1ca5c     08 CC 01 00 | 	long	@@@__system__dat_ + 588
1ca60     00 00 00 00 | 	byte	$00, $00, $00, $00
1ca64     10 CC 01 00 | 	long	@@@__system__dat_ + 596
1ca68     18 CC 01 00 | 	long	@@@__system__dat_ + 604
1ca6c     00 00 00 00 
      ...             
1cbbc     00 00 00 00 
1cbc0     00 00 00 00 | 	byte	$00[344]
1cbc4     58 6E 00 00 | 	long	@@@__system___tx
1cbc8     00 00 00 00 | 	byte	$00, $00, $00, $00
1cbcc     A0 6E 00 00 | 	long	@@@__system___rx
1cbd0     00 00 00 00 | 	byte	$00, $00, $00, $00
1cbd4     1C 89 00 00 | 	long	@@@__system___rxtxioctl_0179
1cbd8     00 00 00 00 | 	byte	$00, $00, $00, $00
1cbdc     8C 89 00 00 | 	long	@@@__system____dummy_flush_0180
1cbe0     00 00 00 00 | 	byte	$00, $00, $00, $00
1cbe4     58 6E 00 00 | 	long	@@@__system___tx
1cbe8     00 00 00 00 | 	byte	$00, $00, $00, $00
1cbec     A0 6E 00 00 | 	long	@@@__system___rx
1cbf0     00 00 00 00 | 	byte	$00, $00, $00, $00
1cbf4     1C 89 00 00 | 	long	@@@__system___rxtxioctl_0179
1cbf8     00 00 00 00 | 	byte	$00, $00, $00, $00
1cbfc     8C 89 00 00 | 	long	@@@__system____dummy_flush_0180
1cc00     00 00 00 00 | 	byte	$00, $00, $00, $00
1cc04     58 6E 00 00 | 	long	@@@__system___tx
1cc08     00 00 00 00 | 	byte	$00, $00, $00, $00
1cc0c     A0 6E 00 00 | 	long	@@@__system___rx
1cc10     00 00 00 00 | 	byte	$00, $00, $00, $00
1cc14     1C 89 00 00 | 	long	@@@__system___rxtxioctl_0179
1cc18     00 00 00 00 | 	byte	$00, $00, $00, $00
1cc1c     8C 89 00 00 | 	long	@@@__system____dummy_flush_0180
1cc20                 | __heap_base
1cc20     00 00 00 00 
      ...             
1dc20     00 00 00 00 
1dc24     00 00 00 00 | 	long	0[1026]
1dc28                 | objmem
1dc28     00 00 00 00 
      ...             
1ee48     00 00 00 00 
1ee4c     00 00 00 00 | 	long	0[1162]
1ee50                 | stackspace
1ee50     00 00 00 00 | 	long	0[1]
1ee54 10f             | 	org	COG_BSS_START
1ee54 10f             | _var01
1ee54 10f             | 	res	1
1ee54 110             | _var02
1ee54 110             | 	res	1
1ee54 111             | _var03
1ee54 111             | 	res	1
1ee54 112             | _var04
1ee54 112             | 	res	1
1ee54 113             | _var05
1ee54 113             | 	res	1
1ee54 114             | _var06
1ee54 114             | 	res	1
1ee54 115             | _var07
1ee54 115             | 	res	1
1ee54 116             | _var08
1ee54 116             | 	res	1
1ee54 117             | _var09
1ee54 117             | 	res	1
1ee54 118             | _var10
1ee54 118             | 	res	1
1ee54 119             | _var11
1ee54 119             | 	res	1
1ee54 11a             | _var12
1ee54 11a             | 	res	1
1ee54 11b             | _var13
1ee54 11b             | 	res	1
1ee54 11c             | _var14
1ee54 11c             | 	res	1
1ee54 11d             | _var15
1ee54 11d             | 	res	1
1ee54 11e             | _var16
1ee54 11e             | 	res	1
1ee54 11f             | _var17
1ee54 11f             | 	res	1
1ee54 120             | _var18
1ee54 120             | 	res	1
1ee54 121             | _var19
1ee54 121             | 	res	1
1ee54 122             | _var20
1ee54 122             | 	res	1
1ee54 123             | _var21
1ee54 123             | 	res	1
1ee54 124             | _var22
1ee54 124             | 	res	1
1ee54 125             | _var23
1ee54 125             | 	res	1
1ee54 126             | _var24
1ee54 126             | 	res	1
1ee54 127             | _var25
1ee54 127             | 	res	1
1ee54 128             | _var26
1ee54 128             | 	res	1
1ee54 129             | _var27
1ee54 129             | 	res	1
1ee54 12a             | _var28
1ee54 12a             | 	res	1
1ee54 12b             | _var29
1ee54 12b             | 	res	1
1ee54 12c             | _var30
1ee54 12c             | 	res	1
1ee54 12d             | _var31
1ee54 12d             | 	res	1
1ee54 12e             | _var32
1ee54 12e             | 	res	1
1ee54 12f             | arg01
1ee54 12f             | 	res	1
1ee54 130             | arg02
1ee54 130             | 	res	1
1ee54 131             | arg03
1ee54 131             | 	res	1
1ee54 132             | arg04
1ee54 132             | 	res	1
1ee54 133             | arg05
1ee54 133             | 	res	1
1ee54 134             | arg06
1ee54 134             | 	res	1
1ee54 135             | arg07
1ee54 135             | 	res	1
1ee54 136             | local01
1ee54 136             | 	res	1
1ee54 137             | local02
1ee54 137             | 	res	1
1ee54 138             | local03
1ee54 138             | 	res	1
1ee54 139             | local04
1ee54 139             | 	res	1
1ee54 13a             | local05
1ee54 13a             | 	res	1
1ee54 13b             | local06
1ee54 13b             | 	res	1
1ee54 13c             | local07
1ee54 13c             | 	res	1
1ee54 13d             | local08
1ee54 13d             | 	res	1
1ee54 13e             | local09
1ee54 13e             | 	res	1
1ee54 13f             | local10
1ee54 13f             | 	res	1
1ee54 140             | local11
1ee54 140             | 	res	1
1ee54 141             | local12
1ee54 141             | 	res	1
1ee54 142             | local13
1ee54 142             | 	res	1
1ee54 143             | local14
1ee54 143             | 	res	1
1ee54 144             | local15
1ee54 144             | 	res	1
1ee54 145             | local16
1ee54 145             | 	res	1
1ee54 146             | local17
1ee54 146             | 	res	1
1ee54 147             | local18
1ee54 147             | 	res	1
1ee54 148             | local19
1ee54 148             | 	res	1
1ee54 149             | local20
1ee54 149             | 	res	1
1ee54 14a             | local21
1ee54 14a             | 	res	1
1ee54 14b             | local22
1ee54 14b             | 	res	1
1ee54 14c             | muldiva_
1ee54 14c             | 	res	1
1ee54 14d             | muldivb_
1ee54 14d             | 	res	1
1ee54 14e             | 	fit	480
1ee54 14e             | 
