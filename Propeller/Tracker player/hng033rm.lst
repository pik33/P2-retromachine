00000                 | 
00000                 | #line 1 "/home/pik33/Dokumenty/GitHub/P2-retromachine/Propeller/Tracker player/hng033rm.p2asm"
00000                 | ' 
00000                 | ' 
00000                 | ' hdmi_base       = 0            'must be a multiple of 8
00000                 | con
00000                 | 	hdmi_base = 0
00000                 | ' _clkfreq        = 320_000_000    'start safe, hubset will do the rest. The clock will be changed to:
00000                 | 	_clkfreq = 320000000
00000                 | ' 
00000                 | ' ' 354_689_500   200x Atari 8-bit PAL,  50x Amiga PAL  - real settings: 49,869-> 354_693_878  - 1.0000123 - mode 0 and 192
00000                 | ' ' 357_954_500   200x Atari 8-bit NTSC, 50x Amiga NTSC - real settings: 49,877-> 357_959_184  - 1.0000131 - mode 256
00000                 | ' 
00000                 | ' ' 319_220_550   180x PAL  - real settings: 51,814-> 319_215_686 - 0.9999848 - mode 64
00000                 | ' ' 322_159_050   180x NTSC - real settings: 37,596-> 322_162_162 - 1.0000097 - mode 320 and 448
00000                 | ' 
00000                 | ' ' 283_751_600   160x PAL  - real settings: 64,908-> 283_750_000 - 0.9999944 - mode 128
00000                 | ' ' 286_363_600   160x NTSC - real settings: 22,315-> 286_363_636 - 1.0000001 - mode 384
00000                 | ' 
00000                 | ' ''--------- VGA DOS color definition constants
00000                 | ' 
00000                 | ' c_black         =    0
00000                 | 	c_black = 0
00000                 | ' c_blue          =  117
00000                 | 	c_blue = 117
00000                 | ' c_green         =  199
00000                 | 	c_green = 199
00000                 | ' c_cyan          =  149
00000                 | 	c_cyan = 149
00000                 | ' c_red           =   39
00000                 | 	c_red = 39
00000                 | ' c_magenta       =   71
00000                 | 	c_magenta = 71
00000                 | ' c_brown         =  246
00000                 | 	c_brown = 246
00000                 | ' c_lightgray     =   10
00000                 | 	c_lightgray = 10
00000                 | ' c_darkgray      =    5
00000                 | 	c_darkgray = 5
00000                 | ' c_lightblue     =  121
00000                 | 	c_lightblue = 121
00000                 | ' c_lightgreen    =  203
00000                 | 	c_lightgreen = 203
00000                 | ' c_lightcyan     =  155
00000                 | 	c_lightcyan = 155
00000                 | ' c_lightred      =   43
00000                 | 	c_lightred = 43
00000                 | ' c_lightmagenta  =   75
00000                 | 	c_lightmagenta = 75
00000                 | ' c_yellow        =  234
00000                 | 	c_yellow = 234
00000                 | ' c_white         =   15
00000                 | 	c_white = 15
00000                 | ' 
00000                 | ' timingsxxt      =  $70810000
00000                 | 	timingsxxt = 1887502336
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 B6 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 DA F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 07 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16781304
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 07 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16781307
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 68 89 89 FF 
00440 00f 14 00 6C FC | 	wrlong	##320000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 78 07 A0 FD | 	call	#_dummy
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 FA 61 FD | 	cogid	arg01
00614 084 03 FA 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 A7 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 B7 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 FB 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 FD 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 FF 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 01 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D B6 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 FE 55 F0 |         shr	arg03, #1 wc
00688 0a1 FD FC 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 FA 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 FC FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 FE 55 F0 |         shr	arg03, #1 wc
00698 0a5 FD FC 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 FA 05 C1 |  if_c   add	arg01, #2
006a0 0a7 FE FC 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 FD 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 FE 0D F2 |         cmp	arg03, #0 wz
006ac 0aa FF 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 FC 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 03 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 FF 5B 8D F9 |     altd  COUNT_, #511
006d4 0b4 28 00 64 FD |     setq #0-0
006d8 0b5 61 05 66 FC |     wrlong local01, ptra++
006dc 0b6             | pushregs_done_
006dc 0b6 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006e0 0b7 61 5B 65 FC |     wrlong COUNT_, ptra++
006e4 0b8 F8 5F 01 F6 |     mov    fp, ptra
006e8 0b9 2C EC 63 FD |     jmp  pa
006ec 0ba             |  popregs_
006ec 0ba 2B EC 63 FD |     pop    pa
006f0 0bb 28 04 64 FD |     setq   #2
006f4 0bc 5F 5B 05 FB |     rdlong COUNT_, --ptra
006f8 0bd 02 5A 75 FB |     djf    COUNT_, #popregs__ret
006fc 0be 28 5A 61 FD |     setq   COUNT_
00700 0bf 5F 05 06 FB |     rdlong local01, --ptra
00704 0c0             | popregs__ret
00704 0c0 2A 5C 61 FD |     push   RETADDR_
00708 0c1 2C EC 63 FD |     jmp    pa
0070c 0c2             | 
0070c 0c2             | unsdivide_
0070c 0c2 28 00 64 FD |        setq    #0
00710 0c3 15 29 12 FD |        qdiv    muldiva_, muldivb_
00714 0c4 18 2A 62 FD |        getqx   muldivb_
00718 0c5 19 28 62 0D |  _ret_ getqy   muldiva_
0071c 0c6             | 
0071c 0c6             | divide_
0071c 0c6 14 29 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00720 0c7 03 A4 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
00724 0c8 15 2B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00728 0c9 02 A4 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
0072c 0ca 2D 00 64 AD |  if_z  ret
00730 0cb D8 FF BF FD |        call    #unsdivide_
00734 0cc 01 A4 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00738 0cd 14 29 82 F6 |        negc    muldiva_,muldiva_ 
0073c 0ce 02 A4 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00740 0cf 15 2B 82 06 |  _ret_ negc    muldivb_,muldivb_
00744 0d0             | 
00744 0d0             | __heap_ptr
00744 0d0 7C 5F 00 00 | 	long	@__heap_base
00748 0d1             | itmp1_
00748 0d1 00 00 00 00 | 	long	0
0074c 0d2             | itmp2_
0074c 0d2 00 00 00 00 | 	long	0
00750 0d3             | objptr
00750 0d3 84 6F 00 00 | 	long	@objmem
00754 0d4             | ptr___system__dat__
00754 0d4 64 5F 00 00 | 	long	@__system__dat_
00758 0d5             | ptr__dat__
00758 0d5 98 36 00 00 | 	long	@_dat_
0075c 0d6             | ptr__putpixel1_
0075c 0d6 14 18 00 00 | 	long	@_putpixel1
00760 0d7             | ptr__putpixel2_
00760 0d7 00 19 00 00 | 	long	@_putpixel2
00764 0d8             | ptr__putpixel4_
00764 0d8 E0 19 00 00 | 	long	@_putpixel4
00768 0d9             | ptr__putpixel8_
00768 0d9 CC 1A 00 00 | 	long	@_putpixel8
0076c 0da             | ptr_stackspace_
0076c 0da 70 70 00 00 | 	long	@stackspace
00770 0db             | result1
00770 0db 00 00 00 00 | 	long	0
00774 0dc             | result2
00774 0dc 00 00 00 00 | 	long	0
00778 0dd             | COG_BSS_START
00778 0dd             | 	fit	480
00778                 | 	orgh
00778                 | hubentry
00778                 | 
00778                 | ' 
00778                 | ' 
00778                 | ' ''--------- timings
00778                 | ' ' 0  m_bs        - before sync,             16      80
00778                 | ' ' 1  m_sn        - sync                     80     160
00778                 | ' ' 2  m_bv        - before visible           20      84
00778                 | ' ' 3  m_vi        - visible                1024     816
00778                 | ' ' 4  m_border    - left and right borders  112       8
00778                 | ' ' 5  m_lut1      - pixels per char           8       8
00778                 | ' ' 6  i_vborder   - up and down border       48       8
00778                 | ' ' 7  i_upporch   - up non visible           16       8
00778                 | ' ' 8  i_vsync     - vsync                    16      12
00778                 | ' ' 9  i_downporch - down non visible         16       8
00778                 | ' '10  mode #
00778                 | ' '11  cpl         - character per line
00778                 | ' '12  scanlines #
00778                 | ' '13  clock
00778                 | ' '14  hubset value for clock settings
00778                 | ' 
00778                 | ' 
00778                 | ' '*************************************************************************
00778                 | ' '                                                                        *
00778                 | ' '  A dummy start function if someone runs this driver alone              *
00778                 | ' '                                                                        *
00778                 | ' '*************************************************************************
00778                 | ' 
00778                 | ' pub dummy()|i,x,y,ntsc,bbb,ccc,zzx,zzy,amode,x1,x2,y1,y2,r
00778                 | _dummy
00778     0C 5A 05 F6 | 	mov	COUNT_, #12
0077c     B0 00 A0 FD | 	call	#pushregs_
00780                 | ' '' this is not a main program.
00780                 | ' 
00780                 | ' start(512+64+48,hdmi_base)
00780     01 00 00 FF 
00784     70 FA 05 F6 | 	mov	arg01, ##624
00788     00 FC 05 F6 | 	mov	arg02, #0
0078c     7C 20 B0 FD | 	call	#_start
00790                 | ' 'start(512+256+64+32,hdmi_base)
00790                 | ' 
00790                 | ' cls(15,1)
00790     0F FA 05 F6 | 	mov	arg01, #15
00794     01 FC 05 F6 | 	mov	arg02, #1
00798     4C 14 B0 FD | 	call	#_cls
0079c                 | ' setfontfamily(0)
0079c                 | ' 
0079c                 | ' font_family:=afontnum
0079c     C8 A6 05 F1 | 	add	objptr, #200
007a0     D3 00 68 FC | 	wrlong	#0, objptr
007a4     C8 A6 85 F1 | 	sub	objptr, #200
007a8                 | ' waitvbl(100)
007a8     64 FA 05 F6 | 	mov	arg01, #100
007ac     A0 13 B0 FD | 	call	#_waitvbl
007b0                 | ' outtextxycg(0,0,inttostr(long[0]),11,1)
007b0     00 04 06 F6 | 	mov	local01, #0
007b4     00 06 06 F6 | 	mov	local02, #0
007b8     00 FA 05 FB | 	rdlong	arg01, #0
007bc     64 15 B0 FD | 	call	#_inttostr
007c0     DB FE 01 F6 | 	mov	arg03, result1
007c4     02 FB 01 F6 | 	mov	arg01, local01
007c8     03 FD 01 F6 | 	mov	arg02, local02
007cc     0B 00 06 F6 | 	mov	arg04, #11
007d0     01 02 06 F6 | 	mov	arg05, #1
007d4     9C 0F B0 FD | 	call	#_outtextxycg
007d8                 | ' waitvbl(300)
007d8     2C FB 05 F6 | 	mov	arg01, #300
007dc     70 13 B0 FD | 	call	#_waitvbl
007e0                 | ' 'maketestdl(512+48)
007e0                 | ' waitvbl(1200)
007e0     02 00 00 FF 
007e4     B0 FA 05 F6 | 	mov	arg01, ##1200
007e8     64 13 B0 FD | 	call	#_waitvbl
007ec                 | ' repeat i from 0 to 10000
007ec     13 00 00 FF 
007f0     11 09 06 F6 | 	mov	local03, ##10001
007f4                 | LR__0001
007f4                 | '   ccc:=getrnd()&255
007f4     1B 0A 62 FD | 	getrnd	local04
007f8     FF 0A 06 F5 | 	and	local04, #255
007fc                 | '   x1:=getrnd()+//896
007fc     1B B6 61 FD | 	getrnd	result1
00800     DB 28 02 F6 | 	mov	muldiva_, result1
00804     01 00 00 FF 
00808     80 2B 06 F6 | 	mov	muldivb_, ##896
0080c     C2 00 A0 FD | 	call	#unsdivide_
00810     14 0D 02 F6 | 	mov	local05, muldiva_
00814                 | '   x2:=getrnd()+//896
00814     1B B6 61 FD | 	getrnd	result1
00818     DB 28 02 F6 | 	mov	muldiva_, result1
0081c     01 00 00 FF 
00820     80 2B 06 F6 | 	mov	muldivb_, ##896
00824     C2 00 A0 FD | 	call	#unsdivide_
00828     14 0F 02 F6 | 	mov	local06, muldiva_
0082c                 | '   y1:=getrnd()+//496
0082c     1B B6 61 FD | 	getrnd	result1
00830     DB 28 02 F6 | 	mov	muldiva_, result1
00834     F0 2B 06 F6 | 	mov	muldivb_, #496
00838     C2 00 A0 FD | 	call	#unsdivide_
0083c     14 11 02 F6 | 	mov	local07, muldiva_
00840                 | '   y2:=getrnd()+//496
00840     1B B6 61 FD | 	getrnd	result1
00844     DB 28 02 F6 | 	mov	muldiva_, result1
00848     F0 2B 06 F6 | 	mov	muldivb_, #496
0084c     C2 00 A0 FD | 	call	#unsdivide_
00850                 | ' 
00850                 | ' 
00850                 | '   line(x1,y1,x2,y2,ccc)
00850     06 FB 01 F6 | 	mov	arg01, local05
00854     08 FD 01 F6 | 	mov	arg02, local07
00858     07 FF 01 F6 | 	mov	arg03, local06
0085c     05 03 02 F6 | 	mov	arg05, local04
00860     14 01 02 F6 | 	mov	arg04, muldiva_
00864     64 0C B0 FD | 	call	#_line
00868     E2 09 6E FB | 	djnz	local03, #LR__0001
0086c                 | ' 
0086c                 | ' repeat i from 0 to 1000
0086c     01 00 00 FF 
00870     E9 13 06 F6 | 	mov	local08, ##1001
00874                 | LR__0002
00874                 | ' 
00874                 | '   x1:=getrnd()+//896
00874     1B B6 61 FD | 	getrnd	result1
00878     DB 28 02 F6 | 	mov	muldiva_, result1
0087c     01 00 00 FF 
00880     80 2B 06 F6 | 	mov	muldivb_, ##896
00884     C2 00 A0 FD | 	call	#unsdivide_
00888     14 0D 02 F6 | 	mov	local05, muldiva_
0088c                 | '   y1:=getrnd()+//496
0088c     1B B6 61 FD | 	getrnd	result1
00890     DB 28 02 F6 | 	mov	muldiva_, result1
00894     F0 2B 06 F6 | 	mov	muldivb_, #496
00898     C2 00 A0 FD | 	call	#unsdivide_
0089c     14 11 02 F6 | 	mov	local07, muldiva_
008a0                 | '   r:=getrnd()+//100
008a0     1B B6 61 FD | 	getrnd	result1
008a4     DB 28 02 F6 | 	mov	muldiva_, result1
008a8     64 2A 06 F6 | 	mov	muldivb_, #100
008ac     C2 00 A0 FD | 	call	#unsdivide_
008b0                 | '   ccc:=getrnd()&255
008b0     1B B6 61 FD | 	getrnd	result1
008b4     DB 00 02 F6 | 	mov	arg04, result1
008b8     FF 00 06 F5 | 	and	arg04, #255
008bc                 | '   fcircle(x1,y1,r,ccc)   
008bc     06 FB 01 F6 | 	mov	arg01, local05
008c0     08 FD 01 F6 | 	mov	arg02, local07
008c4     14 FF 01 F6 | 	mov	arg03, muldiva_
008c8     D0 07 B0 FD | 	call	#_fcircle
008cc     E9 13 6E FB | 	djnz	local08, #LR__0002
008d0                 | ' 
008d0                 | ' repeat i from 0 to 10000
008d0     13 00 00 FF 
008d4     11 15 06 F6 | 	mov	local09, ##10001
008d8                 | LR__0003
008d8                 | '   ccc:=getrnd()&255
008d8     1B 0A 62 FD | 	getrnd	local04
008dc     FF 0A 06 F5 | 	and	local04, #255
008e0                 | '   x1:=getrnd()+//896
008e0     1B B6 61 FD | 	getrnd	result1
008e4     DB 28 02 F6 | 	mov	muldiva_, result1
008e8     01 00 00 FF 
008ec     80 2B 06 F6 | 	mov	muldivb_, ##896
008f0     C2 00 A0 FD | 	call	#unsdivide_
008f4     14 0D 02 F6 | 	mov	local05, muldiva_
008f8                 | '   x2:=getrnd()+//896
008f8     1B B6 61 FD | 	getrnd	result1
008fc     DB 28 02 F6 | 	mov	muldiva_, result1
00900     01 00 00 FF 
00904     80 2B 06 F6 | 	mov	muldivb_, ##896
00908     C2 00 A0 FD | 	call	#unsdivide_
0090c     14 0F 02 F6 | 	mov	local06, muldiva_
00910                 | '   y1:=getrnd()+//496
00910     1B B6 61 FD | 	getrnd	result1
00914     DB 28 02 F6 | 	mov	muldiva_, result1
00918     F0 2B 06 F6 | 	mov	muldivb_, #496
0091c     C2 00 A0 FD | 	call	#unsdivide_
00920     14 11 02 F6 | 	mov	local07, muldiva_
00924                 | '   y2:=getrnd()+//496
00924     1B B6 61 FD | 	getrnd	result1
00928     DB 28 02 F6 | 	mov	muldiva_, result1
0092c     F0 2B 06 F6 | 	mov	muldivb_, #496
00930     C2 00 A0 FD | 	call	#unsdivide_
00934                 | ' 
00934                 | ' 
00934                 | '   frame(x1,y1,x2,y2,ccc)
00934     06 FB 01 F6 | 	mov	arg01, local05
00938     08 FD 01 F6 | 	mov	arg02, local07
0093c     07 FF 01 F6 | 	mov	arg03, local06
00940     05 03 02 F6 | 	mov	arg05, local04
00944     14 01 02 F6 | 	mov	arg04, muldiva_
00948     9C 0A B0 FD | 	call	#_frame
0094c     E2 15 6E FB | 	djnz	local09, #LR__0003
00950                 | '   
00950                 | ' repeat i from 0 to 10000
00950     13 00 00 FF 
00954     11 17 06 F6 | 	mov	local10, ##10001
00958                 | LR__0004
00958                 | ' 
00958                 | '   x1:=getrnd()+//896
00958     1B B6 61 FD | 	getrnd	result1
0095c     DB 28 02 F6 | 	mov	muldiva_, result1
00960     01 00 00 FF 
00964     80 2B 06 F6 | 	mov	muldivb_, ##896
00968     C2 00 A0 FD | 	call	#unsdivide_
0096c     14 0D 02 F6 | 	mov	local05, muldiva_
00970                 | '   y1:=getrnd()+//496
00970     1B B6 61 FD | 	getrnd	result1
00974     DB 28 02 F6 | 	mov	muldiva_, result1
00978     F0 2B 06 F6 | 	mov	muldivb_, #496
0097c     C2 00 A0 FD | 	call	#unsdivide_
00980     14 11 02 F6 | 	mov	local07, muldiva_
00984                 | '   r:=getrnd()+//100
00984     1B B6 61 FD | 	getrnd	result1
00988     DB 28 02 F6 | 	mov	muldiva_, result1
0098c     64 2A 06 F6 | 	mov	muldivb_, #100
00990     C2 00 A0 FD | 	call	#unsdivide_
00994                 | '   ccc:=getrnd()&255
00994     1B B6 61 FD | 	getrnd	result1
00998     DB 00 02 F6 | 	mov	arg04, result1
0099c     FF 00 06 F5 | 	and	arg04, #255
009a0                 | '   circle(x1,y1,r,ccc) 
009a0     06 FB 01 F6 | 	mov	arg01, local05
009a4     08 FD 01 F6 | 	mov	arg02, local07
009a8     14 FF 01 F6 | 	mov	arg03, muldiva_
009ac     1C 08 B0 FD | 	call	#_circle
009b0     E9 17 6E FB | 	djnz	local10, #LR__0004
009b4                 | '   
009b4                 | ' repeat i from 0 to 1000
009b4     01 00 00 FF 
009b8     E9 19 06 F6 | 	mov	local11, ##1001
009bc                 | LR__0005
009bc                 | '   ccc:=getrnd()&255
009bc     1B 0A 62 FD | 	getrnd	local04
009c0     FF 0A 06 F5 | 	and	local04, #255
009c4                 | '   x1:=getrnd()+//896
009c4     1B B6 61 FD | 	getrnd	result1
009c8     DB 28 02 F6 | 	mov	muldiva_, result1
009cc     01 00 00 FF 
009d0     80 2B 06 F6 | 	mov	muldivb_, ##896
009d4     C2 00 A0 FD | 	call	#unsdivide_
009d8     14 0D 02 F6 | 	mov	local05, muldiva_
009dc                 | '   x2:=getrnd()+//100
009dc     1B B6 61 FD | 	getrnd	result1
009e0     DB 28 02 F6 | 	mov	muldiva_, result1
009e4     64 2A 06 F6 | 	mov	muldivb_, #100
009e8     C2 00 A0 FD | 	call	#unsdivide_
009ec     14 0F 02 F6 | 	mov	local06, muldiva_
009f0                 | '   y1:=getrnd()+//496
009f0     1B B6 61 FD | 	getrnd	result1
009f4     DB 28 02 F6 | 	mov	muldiva_, result1
009f8     F0 2B 06 F6 | 	mov	muldivb_, #496
009fc     C2 00 A0 FD | 	call	#unsdivide_
00a00     14 11 02 F6 | 	mov	local07, muldiva_
00a04                 | '   y2:=getrnd()+//100
00a04     1B B6 61 FD | 	getrnd	result1
00a08     DB 28 02 F6 | 	mov	muldiva_, result1
00a0c     64 2A 06 F6 | 	mov	muldivb_, #100
00a10     C2 00 A0 FD | 	call	#unsdivide_
00a14                 | ' 
00a14                 | ' 
00a14                 | '   box(x1,y1,x1+x2,y1+y2,ccc)  
00a14     06 FB 01 F6 | 	mov	arg01, local05
00a18     08 FD 01 F6 | 	mov	arg02, local07
00a1c     07 0D 02 F1 | 	add	local05, local06
00a20     06 FF 01 F6 | 	mov	arg03, local05
00a24     14 11 02 F1 | 	add	local07, muldiva_
00a28     08 01 02 F6 | 	mov	arg04, local07
00a2c     05 03 02 F6 | 	mov	arg05, local04
00a30     3C 0A B0 FD | 	call	#_box
00a34     E1 19 6E FB | 	djnz	local11, #LR__0005
00a38                 | '       
00a38                 | '   
00a38                 | ' {
00a38                 | ' }
00a38                 | ' setfontfamily(4)
00a38                 | ' 
00a38                 | ' font_family:=afontnum
00a38     C8 A6 05 F1 | 	add	objptr, #200
00a3c     D3 08 68 FC | 	wrlong	#4, objptr
00a40     C8 A6 85 F1 | 	sub	objptr, #200
00a44                 | ' repeat amode from 512 to 1023
00a44     09 1A C6 F9 | 	decod	local12, #9
00a48                 | LR__0006
00a48                 | '   setmode(amode)
00a48     0D FB 01 F6 | 	mov	arg01, local12
00a4c     E4 13 B0 FD | 	call	#_setmode
00a50                 | '   ccc:=((amode>>4)&3)
00a50     0D 0B 02 F6 | 	mov	local04, local12
00a54     04 0A 46 F0 | 	shr	local04, #4
00a58     03 0A 0E F5 | 	and	local04, #3 wz
00a5c                 | '   if (ccc==0)
00a5c     80 01 90 5D |  if_ne	jmp	#LR__0007
00a60                 | '     cls(0,1)
00a60     00 FA 05 F6 | 	mov	arg01, #0
00a64     01 FC 05 F6 | 	mov	arg02, #1
00a68     7C 11 B0 FD | 	call	#_cls
00a6c                 | '     outtextxycg(0,0,string("mode"),0,1)
00a6c     1B 00 00 FF 
00a70     1E FE 05 F6 | 	mov	arg03, ##@LR__0191
00a74     00 FA 05 F6 | 	mov	arg01, #0
00a78     00 FC 05 F6 | 	mov	arg02, #0
00a7c     00 00 06 F6 | 	mov	arg04, #0
00a80     01 02 06 F6 | 	mov	arg05, #1
00a84     EC 0C B0 FD | 	call	#_outtextxycg
00a88                 | '     outtextxycg(0,16,string("cpl"),0,1)
00a88     1B 00 00 FF 
00a8c     23 FE 05 F6 | 	mov	arg03, ##@LR__0192
00a90     00 FA 05 F6 | 	mov	arg01, #0
00a94     10 FC 05 F6 | 	mov	arg02, #16
00a98     00 00 06 F6 | 	mov	arg04, #0
00a9c     01 02 06 F6 | 	mov	arg05, #1
00aa0     D0 0C B0 FD | 	call	#_outtextxycg
00aa4                 | '     outtextxycg(0,32,string("bufptr"),0,1)
00aa4     1B 00 00 FF 
00aa8     27 FE 05 F6 | 	mov	arg03, ##@LR__0193
00aac     00 FA 05 F6 | 	mov	arg01, #0
00ab0     20 FC 05 F6 | 	mov	arg02, #32
00ab4     00 00 06 F6 | 	mov	arg04, #0
00ab8     01 02 06 F6 | 	mov	arg05, #1
00abc     B4 0C B0 FD | 	call	#_outtextxycg
00ac0                 | '     outtextxycg(0,48,string("buflen"),0,1)
00ac0     1B 00 00 FF 
00ac4     2E FE 05 F6 | 	mov	arg03, ##@LR__0194
00ac8     00 FA 05 F6 | 	mov	arg01, #0
00acc     30 FC 05 F6 | 	mov	arg02, #48
00ad0     00 00 06 F6 | 	mov	arg04, #0
00ad4     01 02 06 F6 | 	mov	arg05, #1
00ad8     98 0C B0 FD | 	call	#_outtextxycg
00adc                 | '     outtextxycg(0,64,string("lines"),0,1)
00adc     1B 00 00 FF 
00ae0     35 FE 05 F6 | 	mov	arg03, ##@LR__0195
00ae4     00 FA 05 F6 | 	mov	arg01, #0
00ae8     40 FC 05 F6 | 	mov	arg02, #64
00aec     00 00 06 F6 | 	mov	arg04, #0
00af0     01 02 06 F6 | 	mov	arg05, #1
00af4     7C 0C B0 FD | 	call	#_outtextxycg
00af8                 | '     outtextxycg(64,0,inttostr(amode),0,1)
00af8     40 04 06 F6 | 	mov	local01, #64
00afc     00 06 06 F6 | 	mov	local02, #0
00b00     0D FB 01 F6 | 	mov	arg01, local12
00b04     1C 12 B0 FD | 	call	#_inttostr
00b08     DB FE 01 F6 | 	mov	arg03, result1
00b0c     02 FB 01 F6 | 	mov	arg01, local01
00b10     03 FD 01 F6 | 	mov	arg02, local02
00b14     00 00 06 F6 | 	mov	arg04, #0
00b18     01 02 06 F6 | 	mov	arg05, #1
00b1c     54 0C B0 FD | 	call	#_outtextxycg
00b20                 | '     outtextxycg(64,16,inttostr(cpl),0,1)
00b20     40 04 06 F6 | 	mov	local01, #64
00b24     10 06 06 F6 | 	mov	local02, #16
00b28     90 A6 05 F1 | 	add	objptr, #144
00b2c     D3 FA 01 FB | 	rdlong	arg01, objptr
00b30     90 A6 85 F1 | 	sub	objptr, #144
00b34     EC 11 B0 FD | 	call	#_inttostr
00b38     DB FE 01 F6 | 	mov	arg03, result1
00b3c     02 FB 01 F6 | 	mov	arg01, local01
00b40     03 FD 01 F6 | 	mov	arg02, local02
00b44     00 00 06 F6 | 	mov	arg04, #0
00b48     01 02 06 F6 | 	mov	arg05, #1
00b4c     24 0C B0 FD | 	call	#_outtextxycg
00b50                 | '     outtextxycg(64,32,inttostr(buf_ptr),0,1)
00b50     40 04 06 F6 | 	mov	local01, #64
00b54     20 06 06 F6 | 	mov	local02, #32
00b58     D3 FA 01 FB | 	rdlong	arg01, objptr
00b5c     C4 11 B0 FD | 	call	#_inttostr
00b60     DB FE 01 F6 | 	mov	arg03, result1
00b64     02 FB 01 F6 | 	mov	arg01, local01
00b68     03 FD 01 F6 | 	mov	arg02, local02
00b6c     00 00 06 F6 | 	mov	arg04, #0
00b70     01 02 06 F6 | 	mov	arg05, #1
00b74     FC 0B B0 FD | 	call	#_outtextxycg
00b78                 | '     outtextxycg(64,48,inttostr(buflen*4),0,1)
00b78     40 04 06 F6 | 	mov	local01, #64
00b7c     30 06 06 F6 | 	mov	local02, #48
00b80     30 A6 05 F1 | 	add	objptr, #48
00b84     D3 FA 01 FB | 	rdlong	arg01, objptr
00b88     30 A6 85 F1 | 	sub	objptr, #48
00b8c     02 FA 65 F0 | 	shl	arg01, #2
00b90     90 11 B0 FD | 	call	#_inttostr
00b94     DB FE 01 F6 | 	mov	arg03, result1
00b98     02 FB 01 F6 | 	mov	arg01, local01
00b9c     03 FD 01 F6 | 	mov	arg02, local02
00ba0     00 00 06 F6 | 	mov	arg04, #0
00ba4     01 02 06 F6 | 	mov	arg05, #1
00ba8     C8 0B B0 FD | 	call	#_outtextxycg
00bac                 | '     outtextxycg(64,64,inttostr(lines),0,1)
00bac     40 04 06 F6 | 	mov	local01, #64
00bb0     40 06 06 F6 | 	mov	local02, #64
00bb4     94 A6 05 F1 | 	add	objptr, #148
00bb8     D3 FA 01 FB | 	rdlong	arg01, objptr
00bbc     94 A6 85 F1 | 	sub	objptr, #148
00bc0     60 11 B0 FD | 	call	#_inttostr
00bc4     DB FE 01 F6 | 	mov	arg03, result1
00bc8     02 FB 01 F6 | 	mov	arg01, local01
00bcc     03 FD 01 F6 | 	mov	arg02, local02
00bd0     00 00 06 F6 | 	mov	arg04, #0
00bd4     01 02 06 F6 | 	mov	arg05, #1
00bd8     98 0B B0 FD | 	call	#_outtextxycg
00bdc     94 04 90 FD | 	jmp	#LR__0013
00be0                 | LR__0007
00be0                 | '   elseif (ccc==1)
00be0     01 0A 0E F2 | 	cmp	local04, #1 wz
00be4     80 01 90 5D |  if_ne	jmp	#LR__0008
00be8                 | '     cls(0,0)
00be8     00 FA 05 F6 | 	mov	arg01, #0
00bec     00 FC 05 F6 | 	mov	arg02, #0
00bf0     F4 0F B0 FD | 	call	#_cls
00bf4                 | '     outtextxycg(0,0,string("mode"),3,0)
00bf4     1B 00 00 FF 
00bf8     3B FE 05 F6 | 	mov	arg03, ##@LR__0196
00bfc     00 FA 05 F6 | 	mov	arg01, #0
00c00     00 FC 05 F6 | 	mov	arg02, #0
00c04     03 00 06 F6 | 	mov	arg04, #3
00c08     00 02 06 F6 | 	mov	arg05, #0
00c0c     64 0B B0 FD | 	call	#_outtextxycg
00c10                 | '     outtextxycg(0,16,string("cpl"),3,0)'
00c10     1B 00 00 FF 
00c14     40 FE 05 F6 | 	mov	arg03, ##@LR__0197
00c18     00 FA 05 F6 | 	mov	arg01, #0
00c1c     10 FC 05 F6 | 	mov	arg02, #16
00c20     03 00 06 F6 | 	mov	arg04, #3
00c24     00 02 06 F6 | 	mov	arg05, #0
00c28     48 0B B0 FD | 	call	#_outtextxycg
00c2c                 | '     outtextxycg(0,32,string("buf_ptr"),3,0)
00c2c     1B 00 00 FF 
00c30     44 FE 05 F6 | 	mov	arg03, ##@LR__0198
00c34     00 FA 05 F6 | 	mov	arg01, #0
00c38     20 FC 05 F6 | 	mov	arg02, #32
00c3c     03 00 06 F6 | 	mov	arg04, #3
00c40     00 02 06 F6 | 	mov	arg05, #0
00c44     2C 0B B0 FD | 	call	#_outtextxycg
00c48                 | '     outtextxycg(0,48,string("buflen"),3,0)
00c48     1B 00 00 FF 
00c4c     4C FE 05 F6 | 	mov	arg03, ##@LR__0199
00c50     00 FA 05 F6 | 	mov	arg01, #0
00c54     30 FC 05 F6 | 	mov	arg02, #48
00c58     03 00 06 F6 | 	mov	arg04, #3
00c5c     00 02 06 F6 | 	mov	arg05, #0
00c60     10 0B B0 FD | 	call	#_outtextxycg
00c64                 | '     outtextxycg(0,64,string("lines"),3,0)
00c64     1B 00 00 FF 
00c68     53 FE 05 F6 | 	mov	arg03, ##@LR__0200
00c6c     00 FA 05 F6 | 	mov	arg01, #0
00c70     40 FC 05 F6 | 	mov	arg02, #64
00c74     03 00 06 F6 | 	mov	arg04, #3
00c78     00 02 06 F6 | 	mov	arg05, #0
00c7c     F4 0A B0 FD | 	call	#_outtextxycg
00c80                 | '     outtextxycg(64,0,inttostr(amode),2,0)
00c80     40 04 06 F6 | 	mov	local01, #64
00c84     00 06 06 F6 | 	mov	local02, #0
00c88     0D FB 01 F6 | 	mov	arg01, local12
00c8c     94 10 B0 FD | 	call	#_inttostr
00c90     DB FE 01 F6 | 	mov	arg03, result1
00c94     02 FB 01 F6 | 	mov	arg01, local01
00c98     03 FD 01 F6 | 	mov	arg02, local02
00c9c     02 00 06 F6 | 	mov	arg04, #2
00ca0     00 02 06 F6 | 	mov	arg05, #0
00ca4     CC 0A B0 FD | 	call	#_outtextxycg
00ca8                 | '     outtextxycg(64,16,inttostr(cpl),2,0)
00ca8     40 04 06 F6 | 	mov	local01, #64
00cac     10 06 06 F6 | 	mov	local02, #16
00cb0     90 A6 05 F1 | 	add	objptr, #144
00cb4     D3 FA 01 FB | 	rdlong	arg01, objptr
00cb8     90 A6 85 F1 | 	sub	objptr, #144
00cbc     64 10 B0 FD | 	call	#_inttostr
00cc0     DB FE 01 F6 | 	mov	arg03, result1
00cc4     02 FB 01 F6 | 	mov	arg01, local01
00cc8     03 FD 01 F6 | 	mov	arg02, local02
00ccc     02 00 06 F6 | 	mov	arg04, #2
00cd0     00 02 06 F6 | 	mov	arg05, #0
00cd4     9C 0A B0 FD | 	call	#_outtextxycg
00cd8                 | '     outtextxycg(64,32,inttostr(buf_ptr),2,0)
00cd8     40 04 06 F6 | 	mov	local01, #64
00cdc     20 06 06 F6 | 	mov	local02, #32
00ce0     D3 FA 01 FB | 	rdlong	arg01, objptr
00ce4     3C 10 B0 FD | 	call	#_inttostr
00ce8     DB FE 01 F6 | 	mov	arg03, result1
00cec     02 FB 01 F6 | 	mov	arg01, local01
00cf0     03 FD 01 F6 | 	mov	arg02, local02
00cf4     02 00 06 F6 | 	mov	arg04, #2
00cf8     00 02 06 F6 | 	mov	arg05, #0
00cfc     74 0A B0 FD | 	call	#_outtextxycg
00d00                 | '     outtextxycg(64,48,inttostr(buflen*4),2,0)
00d00     40 04 06 F6 | 	mov	local01, #64
00d04     30 06 06 F6 | 	mov	local02, #48
00d08     30 A6 05 F1 | 	add	objptr, #48
00d0c     D3 FA 01 FB | 	rdlong	arg01, objptr
00d10     30 A6 85 F1 | 	sub	objptr, #48
00d14     02 FA 65 F0 | 	shl	arg01, #2
00d18     08 10 B0 FD | 	call	#_inttostr
00d1c     DB FE 01 F6 | 	mov	arg03, result1
00d20     02 FB 01 F6 | 	mov	arg01, local01
00d24     03 FD 01 F6 | 	mov	arg02, local02
00d28     02 00 06 F6 | 	mov	arg04, #2
00d2c     00 02 06 F6 | 	mov	arg05, #0
00d30     40 0A B0 FD | 	call	#_outtextxycg
00d34                 | '     outtextxycg(64,64,inttostr(lines),2,0)
00d34     40 04 06 F6 | 	mov	local01, #64
00d38     40 06 06 F6 | 	mov	local02, #64
00d3c     94 A6 05 F1 | 	add	objptr, #148
00d40     D3 FA 01 FB | 	rdlong	arg01, objptr
00d44     94 A6 85 F1 | 	sub	objptr, #148
00d48     D8 0F B0 FD | 	call	#_inttostr
00d4c     DB FE 01 F6 | 	mov	arg03, result1
00d50     02 FB 01 F6 | 	mov	arg01, local01
00d54     03 FD 01 F6 | 	mov	arg02, local02
00d58     02 00 06 F6 | 	mov	arg04, #2
00d5c     00 02 06 F6 | 	mov	arg05, #0
00d60     10 0A B0 FD | 	call	#_outtextxycg
00d64     0C 03 90 FD | 	jmp	#LR__0012
00d68                 | LR__0008
00d68                 | '   elseif (ccc==2)
00d68     02 0A 0E F2 | 	cmp	local04, #2 wz
00d6c     80 01 90 5D |  if_ne	jmp	#LR__0009
00d70                 | '     cls(0,0)
00d70     00 FA 05 F6 | 	mov	arg01, #0
00d74     00 FC 05 F6 | 	mov	arg02, #0
00d78     6C 0E B0 FD | 	call	#_cls
00d7c                 | '     outtextxycg(0,0,string("mode"),9,0)
00d7c     1B 00 00 FF 
00d80     59 FE 05 F6 | 	mov	arg03, ##@LR__0201
00d84     00 FA 05 F6 | 	mov	arg01, #0
00d88     00 FC 05 F6 | 	mov	arg02, #0
00d8c     09 00 06 F6 | 	mov	arg04, #9
00d90     00 02 06 F6 | 	mov	arg05, #0
00d94     DC 09 B0 FD | 	call	#_outtextxycg
00d98                 | '     outtextxycg(0,16,string("cpl"),9,0)'
00d98     1B 00 00 FF 
00d9c     5E FE 05 F6 | 	mov	arg03, ##@LR__0202
00da0     00 FA 05 F6 | 	mov	arg01, #0
00da4     10 FC 05 F6 | 	mov	arg02, #16
00da8     09 00 06 F6 | 	mov	arg04, #9
00dac     00 02 06 F6 | 	mov	arg05, #0
00db0     C0 09 B0 FD | 	call	#_outtextxycg
00db4                 | '     outtextxycg(0,32,string("buf_ptr"),9,0)
00db4     1B 00 00 FF 
00db8     62 FE 05 F6 | 	mov	arg03, ##@LR__0203
00dbc     00 FA 05 F6 | 	mov	arg01, #0
00dc0     20 FC 05 F6 | 	mov	arg02, #32
00dc4     09 00 06 F6 | 	mov	arg04, #9
00dc8     00 02 06 F6 | 	mov	arg05, #0
00dcc     A4 09 B0 FD | 	call	#_outtextxycg
00dd0                 | '     outtextxycg(0,48,string("buflen"),9,0)
00dd0     1B 00 00 FF 
00dd4     6A FE 05 F6 | 	mov	arg03, ##@LR__0204
00dd8     00 FA 05 F6 | 	mov	arg01, #0
00ddc     30 FC 05 F6 | 	mov	arg02, #48
00de0     09 00 06 F6 | 	mov	arg04, #9
00de4     00 02 06 F6 | 	mov	arg05, #0
00de8     88 09 B0 FD | 	call	#_outtextxycg
00dec                 | '     outtextxycg(0,64,string("lines"),9,0)
00dec     1B 00 00 FF 
00df0     71 FE 05 F6 | 	mov	arg03, ##@LR__0205
00df4     00 FA 05 F6 | 	mov	arg01, #0
00df8     40 FC 05 F6 | 	mov	arg02, #64
00dfc     09 00 06 F6 | 	mov	arg04, #9
00e00     00 02 06 F6 | 	mov	arg05, #0
00e04     6C 09 B0 FD | 	call	#_outtextxycg
00e08                 | '     outtextxycg(64,0,inttostr(amode),4,0)
00e08     40 04 06 F6 | 	mov	local01, #64
00e0c     00 06 06 F6 | 	mov	local02, #0
00e10     0D FB 01 F6 | 	mov	arg01, local12
00e14     0C 0F B0 FD | 	call	#_inttostr
00e18     DB FE 01 F6 | 	mov	arg03, result1
00e1c     02 FB 01 F6 | 	mov	arg01, local01
00e20     03 FD 01 F6 | 	mov	arg02, local02
00e24     04 00 06 F6 | 	mov	arg04, #4
00e28     00 02 06 F6 | 	mov	arg05, #0
00e2c     44 09 B0 FD | 	call	#_outtextxycg
00e30                 | '     outtextxycg(64,16,inttostr(cpl),4,0)
00e30     40 04 06 F6 | 	mov	local01, #64
00e34     10 06 06 F6 | 	mov	local02, #16
00e38     90 A6 05 F1 | 	add	objptr, #144
00e3c     D3 FA 01 FB | 	rdlong	arg01, objptr
00e40     90 A6 85 F1 | 	sub	objptr, #144
00e44     DC 0E B0 FD | 	call	#_inttostr
00e48     DB FE 01 F6 | 	mov	arg03, result1
00e4c     02 FB 01 F6 | 	mov	arg01, local01
00e50     03 FD 01 F6 | 	mov	arg02, local02
00e54     04 00 06 F6 | 	mov	arg04, #4
00e58     00 02 06 F6 | 	mov	arg05, #0
00e5c     14 09 B0 FD | 	call	#_outtextxycg
00e60                 | '     outtextxycg(64,32,inttostr(buf_ptr),4,0)
00e60     40 04 06 F6 | 	mov	local01, #64
00e64     20 06 06 F6 | 	mov	local02, #32
00e68     D3 FA 01 FB | 	rdlong	arg01, objptr
00e6c     B4 0E B0 FD | 	call	#_inttostr
00e70     DB FE 01 F6 | 	mov	arg03, result1
00e74     02 FB 01 F6 | 	mov	arg01, local01
00e78     03 FD 01 F6 | 	mov	arg02, local02
00e7c     04 00 06 F6 | 	mov	arg04, #4
00e80     00 02 06 F6 | 	mov	arg05, #0
00e84     EC 08 B0 FD | 	call	#_outtextxycg
00e88                 | '     outtextxycg(64,48,inttostr(buflen*4),4,0)
00e88     40 04 06 F6 | 	mov	local01, #64
00e8c     30 06 06 F6 | 	mov	local02, #48
00e90     30 A6 05 F1 | 	add	objptr, #48
00e94     D3 FA 01 FB | 	rdlong	arg01, objptr
00e98     30 A6 85 F1 | 	sub	objptr, #48
00e9c     02 FA 65 F0 | 	shl	arg01, #2
00ea0     80 0E B0 FD | 	call	#_inttostr
00ea4     DB FE 01 F6 | 	mov	arg03, result1
00ea8     02 FB 01 F6 | 	mov	arg01, local01
00eac     03 FD 01 F6 | 	mov	arg02, local02
00eb0     04 00 06 F6 | 	mov	arg04, #4
00eb4     00 02 06 F6 | 	mov	arg05, #0
00eb8     B8 08 B0 FD | 	call	#_outtextxycg
00ebc                 | '     outtextxycg(64,64,inttostr(lines),4,0)
00ebc     40 04 06 F6 | 	mov	local01, #64
00ec0     40 06 06 F6 | 	mov	local02, #64
00ec4     94 A6 05 F1 | 	add	objptr, #148
00ec8     D3 FA 01 FB | 	rdlong	arg01, objptr
00ecc     94 A6 85 F1 | 	sub	objptr, #148
00ed0     50 0E B0 FD | 	call	#_inttostr
00ed4     DB FE 01 F6 | 	mov	arg03, result1
00ed8     02 FB 01 F6 | 	mov	arg01, local01
00edc     03 FD 01 F6 | 	mov	arg02, local02
00ee0     04 00 06 F6 | 	mov	arg04, #4
00ee4     00 02 06 F6 | 	mov	arg05, #0
00ee8     88 08 B0 FD | 	call	#_outtextxycg
00eec     84 01 90 FD | 	jmp	#LR__0011
00ef0                 | LR__0009
00ef0                 | '   elseif (ccc==3)
00ef0     03 0A 0E F2 | 	cmp	local04, #3 wz
00ef4     7C 01 90 5D |  if_ne	jmp	#LR__0010
00ef8                 | '     cls(0,0)
00ef8     00 FA 05 F6 | 	mov	arg01, #0
00efc     00 FC 05 F6 | 	mov	arg02, #0
00f00     E4 0C B0 FD | 	call	#_cls
00f04                 | '     outtextxycg(0,0,string("mode"),120,0)
00f04     1B 00 00 FF 
00f08     77 FE 05 F6 | 	mov	arg03, ##@LR__0206
00f0c     00 FA 05 F6 | 	mov	arg01, #0
00f10     00 FC 05 F6 | 	mov	arg02, #0
00f14     78 00 06 F6 | 	mov	arg04, #120
00f18     00 02 06 F6 | 	mov	arg05, #0
00f1c     54 08 B0 FD | 	call	#_outtextxycg
00f20                 | '     outtextxycg(0,16,string("cpl"),120,0)'
00f20     1B 00 00 FF 
00f24     7C FE 05 F6 | 	mov	arg03, ##@LR__0207
00f28     00 FA 05 F6 | 	mov	arg01, #0
00f2c     10 FC 05 F6 | 	mov	arg02, #16
00f30     78 00 06 F6 | 	mov	arg04, #120
00f34     00 02 06 F6 | 	mov	arg05, #0
00f38     38 08 B0 FD | 	call	#_outtextxycg
00f3c                 | '     outtextxycg(0,32,string("buf_ptr"),120,0)
00f3c     1B 00 00 FF 
00f40     80 FE 05 F6 | 	mov	arg03, ##@LR__0208
00f44     00 FA 05 F6 | 	mov	arg01, #0
00f48     20 FC 05 F6 | 	mov	arg02, #32
00f4c     78 00 06 F6 | 	mov	arg04, #120
00f50     00 02 06 F6 | 	mov	arg05, #0
00f54     1C 08 B0 FD | 	call	#_outtextxycg
00f58                 | '     outtextxycg(0,48,string("buflen"),120,0)
00f58     1B 00 00 FF 
00f5c     88 FE 05 F6 | 	mov	arg03, ##@LR__0209
00f60     00 FA 05 F6 | 	mov	arg01, #0
00f64     30 FC 05 F6 | 	mov	arg02, #48
00f68     78 00 06 F6 | 	mov	arg04, #120
00f6c     00 02 06 F6 | 	mov	arg05, #0
00f70     00 08 B0 FD | 	call	#_outtextxycg
00f74                 | '     outtextxycg(0,64,string("lines"),120,0)
00f74     1B 00 00 FF 
00f78     8F FE 05 F6 | 	mov	arg03, ##@LR__0210
00f7c     00 FA 05 F6 | 	mov	arg01, #0
00f80     40 FC 05 F6 | 	mov	arg02, #64
00f84     78 00 06 F6 | 	mov	arg04, #120
00f88     00 02 06 F6 | 	mov	arg05, #0
00f8c     E4 07 B0 FD | 	call	#_outtextxycg
00f90                 | '     outtextxycg(64,0,inttostr(amode),40,0)
00f90     40 04 06 F6 | 	mov	local01, #64
00f94     00 06 06 F6 | 	mov	local02, #0
00f98     0D FB 01 F6 | 	mov	arg01, local12
00f9c     84 0D B0 FD | 	call	#_inttostr
00fa0     DB FE 01 F6 | 	mov	arg03, result1
00fa4     02 FB 01 F6 | 	mov	arg01, local01
00fa8     03 FD 01 F6 | 	mov	arg02, local02
00fac     28 00 06 F6 | 	mov	arg04, #40
00fb0     00 02 06 F6 | 	mov	arg05, #0
00fb4     BC 07 B0 FD | 	call	#_outtextxycg
00fb8                 | '     outtextxycg(64,16,inttostr(cpl),40,0)
00fb8     40 04 06 F6 | 	mov	local01, #64
00fbc     10 06 06 F6 | 	mov	local02, #16
00fc0     90 A6 05 F1 | 	add	objptr, #144
00fc4     D3 FA 01 FB | 	rdlong	arg01, objptr
00fc8     90 A6 85 F1 | 	sub	objptr, #144
00fcc     54 0D B0 FD | 	call	#_inttostr
00fd0     DB FE 01 F6 | 	mov	arg03, result1
00fd4     02 FB 01 F6 | 	mov	arg01, local01
00fd8     03 FD 01 F6 | 	mov	arg02, local02
00fdc     28 00 06 F6 | 	mov	arg04, #40
00fe0     00 02 06 F6 | 	mov	arg05, #0
00fe4     8C 07 B0 FD | 	call	#_outtextxycg
00fe8                 | '     outtextxycg(64,32,inttostr(buf_ptr),40,0)
00fe8     40 04 06 F6 | 	mov	local01, #64
00fec     20 06 06 F6 | 	mov	local02, #32
00ff0     D3 FA 01 FB | 	rdlong	arg01, objptr
00ff4     2C 0D B0 FD | 	call	#_inttostr
00ff8     DB FE 01 F6 | 	mov	arg03, result1
00ffc     02 FB 01 F6 | 	mov	arg01, local01
01000     03 FD 01 F6 | 	mov	arg02, local02
01004     28 00 06 F6 | 	mov	arg04, #40
01008     00 02 06 F6 | 	mov	arg05, #0
0100c     64 07 B0 FD | 	call	#_outtextxycg
01010                 | '     outtextxycg(64,48,inttostr(buflen*4),40,0)
01010     40 04 06 F6 | 	mov	local01, #64
01014     30 06 06 F6 | 	mov	local02, #48
01018     30 A6 05 F1 | 	add	objptr, #48
0101c     D3 FA 01 FB | 	rdlong	arg01, objptr
01020     30 A6 85 F1 | 	sub	objptr, #48
01024     02 FA 65 F0 | 	shl	arg01, #2
01028     F8 0C B0 FD | 	call	#_inttostr
0102c     DB FE 01 F6 | 	mov	arg03, result1
01030     02 FB 01 F6 | 	mov	arg01, local01
01034     03 FD 01 F6 | 	mov	arg02, local02
01038     28 00 06 F6 | 	mov	arg04, #40
0103c     00 02 06 F6 | 	mov	arg05, #0
01040     30 07 B0 FD | 	call	#_outtextxycg
01044                 | '     outtextxycg(64,64,inttostr(lines),40,0)
01044     40 04 06 F6 | 	mov	local01, #64
01048     40 06 06 F6 | 	mov	local02, #64
0104c     94 A6 05 F1 | 	add	objptr, #148
01050     D3 FA 01 FB | 	rdlong	arg01, objptr
01054     94 A6 85 F1 | 	sub	objptr, #148
01058     C8 0C B0 FD | 	call	#_inttostr
0105c     DB FE 01 F6 | 	mov	arg03, result1
01060     02 FB 01 F6 | 	mov	arg01, local01
01064     03 FD 01 F6 | 	mov	arg02, local02
01068     28 00 06 F6 | 	mov	arg04, #40
0106c     00 02 06 F6 | 	mov	arg05, #0
01070     00 07 B0 FD | 	call	#_outtextxycg
01074                 | LR__0010
01074                 | LR__0011
01074                 | LR__0012
01074                 | LR__0013
01074                 | '   waitvbl(300)
01074     2C FB 05 F6 | 	mov	arg01, #300
01078     D4 0A B0 FD | 	call	#_waitvbl
0107c     01 1A 06 F1 | 	add	local12, #1
01080     02 00 00 FF 
01084     00 1A 1E F2 | 	cmp	local12, ##1024 wcz
01088     BC F9 9F CD |  if_b	jmp	#LR__0006
0108c                 | ' 
0108c                 | ' repeat
0108c                 | LR__0014
0108c     FC FF 9F FD | 	jmp	#LR__0014
01090     AF F0 03 F6 | 	mov	ptra, fp
01094     BA 00 A0 FD | 	call	#popregs_
01098                 | _dummy_ret
01098     2D 00 64 FD | 	ret
0109c                 | 
0109c                 | ' 
0109c                 | ' '------------------------------
0109c                 | ' 
0109c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
0109c                 | _fcircle
0109c     0A 5A 05 F6 | 	mov	COUNT_, #10
010a0     B0 00 A0 FD | 	call	#pushregs_
010a4     FD 04 02 F6 | 	mov	local01, arg01
010a8     FE 06 02 F6 | 	mov	local02, arg02
010ac     FF 08 02 F6 | 	mov	local03, arg03
010b0     00 0B 02 F6 | 	mov	local04, arg04
010b4                 | ' 
010b4                 | ' d:=5-4*r
010b4     04 0D 02 F6 | 	mov	local05, local03
010b8     02 0C 66 F0 | 	shl	local05, #2
010bc     05 0E 06 F6 | 	mov	local06, #5
010c0     06 0F 82 F1 | 	sub	local06, local05
010c4                 | ' x:=0
010c4     00 10 06 F6 | 	mov	local07, #0
010c8                 | ' y:=r
010c8     04 13 02 F6 | 	mov	local08, local03
010cc                 | ' da:=(-2*r+5)*4
010cc     FF FF 7F FF 
010d0     FE 09 06 FD | 	qmul	local03, ##-2
010d4     18 14 62 FD | 	getqx	local09
010d8     05 14 06 F1 | 	add	local09, #5
010dc     02 14 66 F0 | 	shl	local09, #2
010e0                 | ' db:=3*4
010e0     0C 16 06 F6 | 	mov	local10, #12
010e4                 | ' repeat while (x<=y) 
010e4                 | LR__0015
010e4     09 11 5A F2 | 	cmps	local07, local08 wcz
010e8     D4 00 90 1D |  if_a	jmp	#LR__0017
010ec                 | '   line(x0-x,y0-y,x0+x,y0-y,c)
010ec     02 FB 01 F6 | 	mov	arg01, local01
010f0     08 FB 81 F1 | 	sub	arg01, local07
010f4     03 FD 01 F6 | 	mov	arg02, local02
010f8     09 FD 81 F1 | 	sub	arg02, local08
010fc     02 FF 01 F6 | 	mov	arg03, local01
01100     08 FF 01 F1 | 	add	arg03, local07
01104     03 01 02 F6 | 	mov	arg04, local02
01108     09 01 82 F1 | 	sub	arg04, local08
0110c     05 03 02 F6 | 	mov	arg05, local04
01110     B8 03 B0 FD | 	call	#_line
01114                 | '   line(x0-x,y0+y,x0+x,y0+y,c)
01114     02 FB 01 F6 | 	mov	arg01, local01
01118     08 FB 81 F1 | 	sub	arg01, local07
0111c     03 FD 01 F6 | 	mov	arg02, local02
01120     09 FD 01 F1 | 	add	arg02, local08
01124     02 FF 01 F6 | 	mov	arg03, local01
01128     08 FF 01 F1 | 	add	arg03, local07
0112c     03 01 02 F6 | 	mov	arg04, local02
01130     09 01 02 F1 | 	add	arg04, local08
01134     05 03 02 F6 | 	mov	arg05, local04
01138     90 03 B0 FD | 	call	#_line
0113c                 | '   line(x0-y,y0-x,x0+y,y0-x,c)
0113c     02 FB 01 F6 | 	mov	arg01, local01
01140     09 FB 81 F1 | 	sub	arg01, local08
01144     03 FD 01 F6 | 	mov	arg02, local02
01148     08 FD 81 F1 | 	sub	arg02, local07
0114c     02 FF 01 F6 | 	mov	arg03, local01
01150     09 FF 01 F1 | 	add	arg03, local08
01154     03 01 02 F6 | 	mov	arg04, local02
01158     08 01 82 F1 | 	sub	arg04, local07
0115c     05 03 02 F6 | 	mov	arg05, local04
01160     68 03 B0 FD | 	call	#_line
01164                 | '   line(x0-y,y0+x,x0+y,y0+x,c)
01164     02 FB 01 F6 | 	mov	arg01, local01
01168     09 FB 81 F1 | 	sub	arg01, local08
0116c     03 FD 01 F6 | 	mov	arg02, local02
01170     08 FD 01 F1 | 	add	arg02, local07
01174     02 FF 01 F6 | 	mov	arg03, local01
01178     09 FF 01 F1 | 	add	arg03, local08
0117c     03 01 02 F6 | 	mov	arg04, local02
01180     08 01 02 F1 | 	add	arg04, local07
01184     05 03 02 F6 | 	mov	arg05, local04
01188     40 03 B0 FD | 	call	#_line
0118c                 | '   if d>0 
0118c     00 0E 5E F2 | 	cmps	local06, #0 wcz
01190     18 00 90 ED |  if_be	jmp	#LR__0016
01194                 | '     d+=da
01194     0A 0F 02 F1 | 	add	local06, local09
01198                 | '     y-=1
01198     01 12 86 F1 | 	sub	local08, #1
0119c                 | '     x+=1
0119c     01 10 06 F1 | 	add	local07, #1
011a0                 | '     da+=4*4
011a0     10 14 06 F1 | 	add	local09, #16
011a4                 | '     db+=2*4
011a4     08 16 06 F1 | 	add	local10, #8
011a8                 | '   else
011a8     38 FF 9F FD | 	jmp	#LR__0015
011ac                 | LR__0016
011ac                 | '     d+=db
011ac     0B 0F 02 F1 | 	add	local06, local10
011b0                 | '     x+=1
011b0     01 10 06 F1 | 	add	local07, #1
011b4                 | '     da+=2*4
011b4     08 14 06 F1 | 	add	local09, #8
011b8                 | '     db+=2*4
011b8     08 16 06 F1 | 	add	local10, #8
011bc     24 FF 9F FD | 	jmp	#LR__0015
011c0                 | LR__0017
011c0     AF F0 03 F6 | 	mov	ptra, fp
011c4     BA 00 A0 FD | 	call	#popregs_
011c8                 | _fcircle_ret
011c8     2D 00 64 FD | 	ret
011cc                 | 
011cc                 | '  
011cc                 | '  
011cc                 | '  
011cc                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
011cc                 | _circle
011cc     0D 5A 05 F6 | 	mov	COUNT_, #13
011d0     B0 00 A0 FD | 	call	#pushregs_
011d4     FD 04 02 F6 | 	mov	local01, arg01
011d8     FE 06 02 F6 | 	mov	local02, arg02
011dc     FF 08 02 F6 | 	mov	local03, arg03
011e0     00 0B 02 F6 | 	mov	local04, arg04
011e4                 | ' 
011e4                 | '  
011e4                 | ' d:=5-4*r
011e4     04 0D 02 F6 | 	mov	local05, local03
011e8     02 0C 66 F0 | 	shl	local05, #2
011ec     05 0E 06 F6 | 	mov	local06, #5
011f0     06 0F 82 F1 | 	sub	local06, local05
011f4                 | ' x:=0
011f4     00 10 06 F6 | 	mov	local07, #0
011f8                 | ' y:=r
011f8     04 13 02 F6 | 	mov	local08, local03
011fc                 | ' da:=(-2*r+5)*4
011fc     FF FF 7F FF 
01200     FE 09 06 FD | 	qmul	local03, ##-2
01204     18 14 62 FD | 	getqx	local09
01208     05 14 06 F1 | 	add	local09, #5
0120c     02 14 66 F0 | 	shl	local09, #2
01210                 | ' db:=3*4
01210     0C 16 06 F6 | 	mov	local10, #12
01214                 | ' repeat while (x<=y) 
01214                 | LR__0018
01214     09 11 5A F2 | 	cmps	local07, local08 wcz
01218     C0 01 90 1D |  if_a	jmp	#LR__0020
0121c                 | '   putpixel(x0-x,y0-y,c)
0121c     D8 A6 05 F1 | 	add	objptr, #216
01220     D3 18 02 FB | 	rdlong	local11, objptr
01224     D8 A6 85 F1 | 	sub	objptr, #216
01228     0C 0D 02 FB | 	rdlong	local05, local11
0122c     04 18 06 F1 | 	add	local11, #4
01230     0C 1B 02 FB | 	rdlong	local12, local11
01234     02 FB 01 F6 | 	mov	arg01, local01
01238     08 FB 81 F1 | 	sub	arg01, local07
0123c     03 FD 01 F6 | 	mov	arg02, local02
01240     09 FD 81 F1 | 	sub	arg02, local08
01244     05 FF 01 F6 | 	mov	arg03, local04
01248     D3 1C 02 F6 | 	mov	local13, objptr
0124c     06 A7 01 F6 | 	mov	objptr, local05
01250     2D 1A 62 FD | 	call	local12
01254                 | '   putpixel(x0-x,y0+y,c)
01254     D8 1C 06 F1 | 	add	local13, #216
01258     0E 19 02 FB | 	rdlong	local11, local13
0125c     D8 1C 86 F1 | 	sub	local13, #216
01260     0C A7 01 FB | 	rdlong	objptr, local11
01264     04 18 06 F1 | 	add	local11, #4
01268     0C 1B 02 FB | 	rdlong	local12, local11
0126c     02 FB 01 F6 | 	mov	arg01, local01
01270     08 FB 81 F1 | 	sub	arg01, local07
01274     03 FD 01 F6 | 	mov	arg02, local02
01278     09 FD 01 F1 | 	add	arg02, local08
0127c     05 FF 01 F6 | 	mov	arg03, local04
01280     2D 1A 62 FD | 	call	local12
01284                 | '   putpixel(x0+x,y0-y,c)
01284     D8 1C 06 F1 | 	add	local13, #216
01288     0E 19 02 FB | 	rdlong	local11, local13
0128c     D8 1C 86 F1 | 	sub	local13, #216
01290     0C A7 01 FB | 	rdlong	objptr, local11
01294     04 18 06 F1 | 	add	local11, #4
01298     0C 1B 02 FB | 	rdlong	local12, local11
0129c     02 FB 01 F6 | 	mov	arg01, local01
012a0     08 FB 01 F1 | 	add	arg01, local07
012a4     03 FD 01 F6 | 	mov	arg02, local02
012a8     09 FD 81 F1 | 	sub	arg02, local08
012ac     05 FF 01 F6 | 	mov	arg03, local04
012b0     2D 1A 62 FD | 	call	local12
012b4                 | '   putpixel(x0+x,y0+y,c)
012b4     D8 1C 06 F1 | 	add	local13, #216
012b8     0E 19 02 FB | 	rdlong	local11, local13
012bc     D8 1C 86 F1 | 	sub	local13, #216
012c0     0C A7 01 FB | 	rdlong	objptr, local11
012c4     04 18 06 F1 | 	add	local11, #4
012c8     0C 1B 02 FB | 	rdlong	local12, local11
012cc     02 FB 01 F6 | 	mov	arg01, local01
012d0     08 FB 01 F1 | 	add	arg01, local07
012d4     03 FD 01 F6 | 	mov	arg02, local02
012d8     09 FD 01 F1 | 	add	arg02, local08
012dc     05 FF 01 F6 | 	mov	arg03, local04
012e0     2D 1A 62 FD | 	call	local12
012e4                 | '   putpixel(x0-y,y0-x,c)
012e4     D8 1C 06 F1 | 	add	local13, #216
012e8     0E 19 02 FB | 	rdlong	local11, local13
012ec     D8 1C 86 F1 | 	sub	local13, #216
012f0     0C A7 01 FB | 	rdlong	objptr, local11
012f4     04 18 06 F1 | 	add	local11, #4
012f8     0C 1B 02 FB | 	rdlong	local12, local11
012fc     02 FB 01 F6 | 	mov	arg01, local01
01300     09 FB 81 F1 | 	sub	arg01, local08
01304     03 FD 01 F6 | 	mov	arg02, local02
01308     08 FD 81 F1 | 	sub	arg02, local07
0130c     05 FF 01 F6 | 	mov	arg03, local04
01310     2D 1A 62 FD | 	call	local12
01314                 | '   putpixel(x0-y,y0+x,c)
01314     D8 1C 06 F1 | 	add	local13, #216
01318     0E 19 02 FB | 	rdlong	local11, local13
0131c     D8 1C 86 F1 | 	sub	local13, #216
01320     0C A7 01 FB | 	rdlong	objptr, local11
01324     04 18 06 F1 | 	add	local11, #4
01328     0C 1B 02 FB | 	rdlong	local12, local11
0132c     02 FB 01 F6 | 	mov	arg01, local01
01330     09 FB 81 F1 | 	sub	arg01, local08
01334     03 FD 01 F6 | 	mov	arg02, local02
01338     08 FD 01 F1 | 	add	arg02, local07
0133c     05 FF 01 F6 | 	mov	arg03, local04
01340     2D 1A 62 FD | 	call	local12
01344                 | '   putpixel(x0+y,y0-x,c)
01344     D8 1C 06 F1 | 	add	local13, #216
01348     0E 19 02 FB | 	rdlong	local11, local13
0134c     D8 1C 86 F1 | 	sub	local13, #216
01350     0C A7 01 FB | 	rdlong	objptr, local11
01354     04 18 06 F1 | 	add	local11, #4
01358     0C 1B 02 FB | 	rdlong	local12, local11
0135c     02 FB 01 F6 | 	mov	arg01, local01
01360     09 FB 01 F1 | 	add	arg01, local08
01364     03 FD 01 F6 | 	mov	arg02, local02
01368     08 FD 81 F1 | 	sub	arg02, local07
0136c     05 FF 01 F6 | 	mov	arg03, local04
01370     2D 1A 62 FD | 	call	local12
01374                 | '   putpixel(x0+y,y0+x,c)
01374     D8 1C 06 F1 | 	add	local13, #216
01378     0E 19 02 FB | 	rdlong	local11, local13
0137c     D8 1C 86 F1 | 	sub	local13, #216
01380     0C A7 01 FB | 	rdlong	objptr, local11
01384     04 18 06 F1 | 	add	local11, #4
01388     0C 1B 02 FB | 	rdlong	local12, local11
0138c     02 FB 01 F6 | 	mov	arg01, local01
01390     09 FB 01 F1 | 	add	arg01, local08
01394     03 FD 01 F6 | 	mov	arg02, local02
01398     08 FD 01 F1 | 	add	arg02, local07
0139c     05 FF 01 F6 | 	mov	arg03, local04
013a0     2D 1A 62 FD | 	call	local12
013a4     0E A7 01 F6 | 	mov	objptr, local13
013a8                 | '   if d>0 
013a8     00 0E 5E F2 | 	cmps	local06, #0 wcz
013ac     18 00 90 ED |  if_be	jmp	#LR__0019
013b0                 | '     d+=da
013b0     0A 0F 02 F1 | 	add	local06, local09
013b4                 | '     y-=1
013b4     01 12 86 F1 | 	sub	local08, #1
013b8                 | '     x+=1
013b8     01 10 06 F1 | 	add	local07, #1
013bc                 | '     da+=4*4
013bc     10 14 06 F1 | 	add	local09, #16
013c0                 | '     db+=2*4
013c0     08 16 06 F1 | 	add	local10, #8
013c4                 | '   else
013c4     4C FE 9F FD | 	jmp	#LR__0018
013c8                 | LR__0019
013c8                 | '     d+=db
013c8     0B 0F 02 F1 | 	add	local06, local10
013cc                 | '     x+=1
013cc     01 10 06 F1 | 	add	local07, #1
013d0                 | '     da+=2*4
013d0     08 14 06 F1 | 	add	local09, #8
013d4                 | '     db+=2*4
013d4     08 16 06 F1 | 	add	local10, #8
013d8     38 FE 9F FD | 	jmp	#LR__0018
013dc                 | LR__0020
013dc     AF F0 03 F6 | 	mov	ptra, fp
013e0     BA 00 A0 FD | 	call	#popregs_
013e4                 | _circle_ret
013e4     2D 00 64 FD | 	ret
013e8                 | 
013e8                 | ' 
013e8                 | ' 
013e8                 | ' pub frame(x1,y1,x2,y2,c)
013e8                 | _frame
013e8     05 5A 05 F6 | 	mov	COUNT_, #5
013ec     B0 00 A0 FD | 	call	#pushregs_
013f0     FD 04 02 F6 | 	mov	local01, arg01
013f4     FE 06 02 F6 | 	mov	local02, arg02
013f8     FF 08 02 F6 | 	mov	local03, arg03
013fc     00 0B 02 F6 | 	mov	local04, arg04
01400     01 0D 02 F6 | 	mov	local05, arg05
01404                 | ' 
01404                 | ' line(x1,y1,x2,y1,c)
01404     02 FB 01 F6 | 	mov	arg01, local01
01408     03 FD 01 F6 | 	mov	arg02, local02
0140c     04 FF 01 F6 | 	mov	arg03, local03
01410     03 01 02 F6 | 	mov	arg04, local02
01414     06 03 02 F6 | 	mov	arg05, local05
01418     B0 00 B0 FD | 	call	#_line
0141c                 | ' line(x1,y2,x2,y2,c)
0141c     02 FB 01 F6 | 	mov	arg01, local01
01420     05 FD 01 F6 | 	mov	arg02, local04
01424     04 FF 01 F6 | 	mov	arg03, local03
01428     05 01 02 F6 | 	mov	arg04, local04
0142c     06 03 02 F6 | 	mov	arg05, local05
01430     98 00 B0 FD | 	call	#_line
01434                 | ' line(x1,y1,x1,y2,c)
01434     02 FB 01 F6 | 	mov	arg01, local01
01438     03 FD 01 F6 | 	mov	arg02, local02
0143c     02 FF 01 F6 | 	mov	arg03, local01
01440     05 01 02 F6 | 	mov	arg04, local04
01444     06 03 02 F6 | 	mov	arg05, local05
01448     80 00 B0 FD | 	call	#_line
0144c                 | ' line(x2,y1,x2,y2,c)
0144c     04 FB 01 F6 | 	mov	arg01, local03
01450     03 FD 01 F6 | 	mov	arg02, local02
01454     04 FF 01 F6 | 	mov	arg03, local03
01458     05 01 02 F6 | 	mov	arg04, local04
0145c     06 03 02 F6 | 	mov	arg05, local05
01460     68 00 B0 FD | 	call	#_line
01464     AF F0 03 F6 | 	mov	ptra, fp
01468     BA 00 A0 FD | 	call	#popregs_
0146c                 | _frame_ret
0146c     2D 00 64 FD | 	ret
01470                 | 
01470                 | ' 
01470                 | ' pub box(x1,y1,x2,y2,c) |yy
01470                 | _box
01470     06 5A 05 F6 | 	mov	COUNT_, #6
01474     B0 00 A0 FD | 	call	#pushregs_
01478     FD 04 02 F6 | 	mov	local01, arg01
0147c     FE 06 02 F6 | 	mov	local02, arg02
01480     FF 08 02 F6 | 	mov	local03, arg03
01484     00 0B 02 F6 | 	mov	local04, arg04
01488     01 0D 02 F6 | 	mov	local05, arg05
0148c                 | ' 
0148c                 | ' repeat yy from y1 to y2
0148c     03 0B 5A F2 | 	cmps	local04, local02 wcz
01490     01 0E 06 16 |  if_a	mov	local06, #1
01494     01 0E 66 E6 |  if_be	neg	local06, #1
01498     07 0B 02 F1 | 	add	local04, local06
0149c                 | LR__0021
0149c                 | '   line(x1,yy,x2,yy,c)
0149c     02 FB 01 F6 | 	mov	arg01, local01
014a0     04 FF 01 F6 | 	mov	arg03, local03
014a4     06 03 02 F6 | 	mov	arg05, local05
014a8     03 FD 01 F6 | 	mov	arg02, local02
014ac     03 01 02 F6 | 	mov	arg04, local02
014b0     18 00 B0 FD | 	call	#_line
014b4     07 07 02 F1 | 	add	local02, local06
014b8     05 07 0A F2 | 	cmp	local02, local04 wz
014bc     DC FF 9F 5D |  if_ne	jmp	#LR__0021
014c0     AF F0 03 F6 | 	mov	ptra, fp
014c4     BA 00 A0 FD | 	call	#popregs_
014c8                 | _box_ret
014c8     2D 00 64 FD | 	ret
014cc                 | 
014cc                 | ' 
014cc                 | ' pub line(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y
014cc                 | _line
014cc     12 5A 05 F6 | 	mov	COUNT_, #18
014d0     B0 00 A0 FD | 	call	#pushregs_
014d4     FD 04 02 F6 | 	mov	local01, arg01
014d8     FE 06 02 F6 | 	mov	local02, arg02
014dc     FF 08 02 F6 | 	mov	local03, arg03
014e0     00 0B 02 F6 | 	mov	local04, arg04
014e4     01 0D 02 F6 | 	mov	local05, arg05
014e8                 | ' 
014e8                 | ' 
014e8                 | ' x:=x1
014e8     02 0F 02 F6 | 	mov	local06, local01
014ec                 | ' y:=y1
014ec     03 11 02 F6 | 	mov	local07, local02
014f0                 | ' 
014f0                 | ' if (x1<x2) 
014f0     04 05 5A F2 | 	cmps	local01, local03 wcz
014f4     10 00 90 3D |  if_ae	jmp	#LR__0022
014f8                 | '   xi:=1
014f8     01 12 06 F6 | 	mov	local08, #1
014fc                 | '   dx:=x2-x1
014fc     04 15 02 F6 | 	mov	local09, local03
01500     02 15 82 F1 | 	sub	local09, local01
01504                 | ' else
01504     0C 00 90 FD | 	jmp	#LR__0023
01508                 | LR__0022
01508                 | '   xi:=-1
01508     01 12 66 F6 | 	neg	local08, #1
0150c                 | '   dx:=x1-x2
0150c     04 05 82 F1 | 	sub	local01, local03
01510     02 15 02 F6 | 	mov	local09, local01
01514                 | LR__0023
01514                 | '   
01514                 | ' if (y1<y2) 
01514     05 07 5A F2 | 	cmps	local02, local04 wcz
01518     10 00 90 3D |  if_ae	jmp	#LR__0024
0151c                 | '   yi:=1
0151c     01 16 06 F6 | 	mov	local10, #1
01520                 | '   dy:=y2-y1
01520     05 19 02 F6 | 	mov	local11, local04
01524     03 19 82 F1 | 	sub	local11, local02
01528                 | ' else
01528     0C 00 90 FD | 	jmp	#LR__0025
0152c                 | LR__0024
0152c                 | '   yi:=-1
0152c     01 16 66 F6 | 	neg	local10, #1
01530                 | '   dy:=y1-y2
01530     05 07 82 F1 | 	sub	local02, local04
01534     03 19 02 F6 | 	mov	local11, local02
01538                 | LR__0025
01538                 | ' 
01538                 | ' putpixel(x,y,c)
01538     D8 A6 05 F1 | 	add	objptr, #216
0153c     D3 1A 02 FB | 	rdlong	local12, objptr
01540     D8 A6 85 F1 | 	sub	objptr, #216
01544     0D 1D 02 FB | 	rdlong	local13, local12
01548     04 1A 06 F1 | 	add	local12, #4
0154c     0D 1F 02 FB | 	rdlong	local14, local12
01550     07 FB 01 F6 | 	mov	arg01, local06
01554     08 FD 01 F6 | 	mov	arg02, local07
01558     06 FF 01 F6 | 	mov	arg03, local05
0155c     D3 20 02 F6 | 	mov	local15, objptr
01560     0E A7 01 F6 | 	mov	objptr, local13
01564     2D 1E 62 FD | 	call	local14
01568     10 A7 01 F6 | 	mov	objptr, local15
0156c                 | ' 
0156c                 | ' if (dx>dy)
0156c     0C 15 5A F2 | 	cmps	local09, local11 wcz
01570     7C 00 90 ED |  if_be	jmp	#LR__0029
01574                 | '   ai:=(dy-dx)*2
01574     0C 23 02 F6 | 	mov	local16, local11
01578     0A 23 82 F1 | 	sub	local16, local09
0157c     01 22 66 F0 | 	shl	local16, #1
01580                 | '   bi:=dy*2
01580     01 18 66 F0 | 	shl	local11, #1
01584     0C 25 02 F6 | 	mov	local17, local11
01588                 | '   d:= bi-dx
01588     12 27 02 F6 | 	mov	local18, local17
0158c     0A 27 82 F1 | 	sub	local18, local09
01590                 | '   repeat while (x<>x2) 
01590                 | LR__0026
01590     04 0F 0A F2 | 	cmp	local06, local03 wz
01594     D4 00 90 AD |  if_e	jmp	#LR__0034
01598                 | '     if (d>=0) 
01598     00 26 5E F2 | 	cmps	local18, #0 wcz
0159c     10 00 90 CD |  if_b	jmp	#LR__0027
015a0                 | '       x+=xi
015a0     09 0F 02 F1 | 	add	local06, local08
015a4                 | '       y+=yi
015a4     0B 11 02 F1 | 	add	local07, local10
015a8                 | '       d+=ai
015a8     11 27 02 F1 | 	add	local18, local16
015ac                 | '     else
015ac     08 00 90 FD | 	jmp	#LR__0028
015b0                 | LR__0027
015b0                 | '       d+=bi
015b0     12 27 02 F1 | 	add	local18, local17
015b4                 | '       x+=xi
015b4     09 0F 02 F1 | 	add	local06, local08
015b8                 | LR__0028
015b8                 | '     putpixel(x,y,c)
015b8     D8 A6 05 F1 | 	add	objptr, #216
015bc     D3 1A 02 FB | 	rdlong	local12, objptr
015c0     D8 A6 85 F1 | 	sub	objptr, #216
015c4     0D 1D 02 FB | 	rdlong	local13, local12
015c8     04 1A 06 F1 | 	add	local12, #4
015cc     0D 1F 02 FB | 	rdlong	local14, local12
015d0     07 FB 01 F6 | 	mov	arg01, local06
015d4     08 FD 01 F6 | 	mov	arg02, local07
015d8     06 FF 01 F6 | 	mov	arg03, local05
015dc     D3 20 02 F6 | 	mov	local15, objptr
015e0     0E A7 01 F6 | 	mov	objptr, local13
015e4     2D 1E 62 FD | 	call	local14
015e8     10 A7 01 F6 | 	mov	objptr, local15
015ec     A0 FF 9F FD | 	jmp	#LR__0026
015f0                 | ' else
015f0                 | LR__0029
015f0                 | '   ai:=(dx-dy)*2
015f0     0A 23 02 F6 | 	mov	local16, local09
015f4     0C 23 82 F1 | 	sub	local16, local11
015f8     01 22 66 F0 | 	shl	local16, #1
015fc                 | '   bi:=dx*2
015fc     01 14 66 F0 | 	shl	local09, #1
01600     0A 25 02 F6 | 	mov	local17, local09
01604                 | '   d:=bi-dy
01604     12 27 02 F6 | 	mov	local18, local17
01608     0C 27 82 F1 | 	sub	local18, local11
0160c                 | '   repeat while (y<>y2)
0160c                 | LR__0030
0160c     05 11 0A F2 | 	cmp	local07, local04 wz
01610     58 00 90 AD |  if_e	jmp	#LR__0033
01614                 | '     if (d>=0)
01614     00 26 5E F2 | 	cmps	local18, #0 wcz
01618     10 00 90 CD |  if_b	jmp	#LR__0031
0161c                 | '       x+=xi
0161c     09 0F 02 F1 | 	add	local06, local08
01620                 | '       y+=yi
01620     0B 11 02 F1 | 	add	local07, local10
01624                 | '       d+=ai
01624     11 27 02 F1 | 	add	local18, local16
01628                 | '     else
01628     08 00 90 FD | 	jmp	#LR__0032
0162c                 | LR__0031
0162c                 | '       d+=bi
0162c     12 27 02 F1 | 	add	local18, local17
01630                 | '       y+=yi
01630     0B 11 02 F1 | 	add	local07, local10
01634                 | LR__0032
01634                 | '     putpixel(x, y,c)
01634     D8 A6 05 F1 | 	add	objptr, #216
01638     D3 1A 02 FB | 	rdlong	local12, objptr
0163c     D8 A6 85 F1 | 	sub	objptr, #216
01640     0D 1D 02 FB | 	rdlong	local13, local12
01644     04 1A 06 F1 | 	add	local12, #4
01648     0D 1F 02 FB | 	rdlong	local14, local12
0164c     07 FB 01 F6 | 	mov	arg01, local06
01650     08 FD 01 F6 | 	mov	arg02, local07
01654     06 FF 01 F6 | 	mov	arg03, local05
01658     D3 20 02 F6 | 	mov	local15, objptr
0165c     0E A7 01 F6 | 	mov	objptr, local13
01660     2D 1E 62 FD | 	call	local14
01664     10 A7 01 F6 | 	mov	objptr, local15
01668     A0 FF 9F FD | 	jmp	#LR__0030
0166c                 | LR__0033
0166c                 | LR__0034
0166c     AF F0 03 F6 | 	mov	ptra, fp
01670     BA 00 A0 FD | 	call	#popregs_
01674                 | _line_ret
01674     2D 00 64 FD | 	ret
01678                 | 
01678                 | ' 
01678                 | ' pub putcharxycg(x,y,achar,f,b) |xx, yy,bb
01678                 | _putcharxycg
01678     0D 5A 05 F6 | 	mov	COUNT_, #13
0167c     B0 00 A0 FD | 	call	#pushregs_
01680     FD 04 02 F6 | 	mov	local01, arg01
01684     FE 06 02 F6 | 	mov	local02, arg02
01688     FF 08 02 F6 | 	mov	local03, arg03
0168c     00 0B 02 F6 | 	mov	local04, arg04
01690     01 0D 02 F6 | 	mov	local05, arg05
01694                 | ' 
01694                 | ' repeat yy from 0 to 15
01694     00 0E 06 F6 | 	mov	local06, #0
01698                 | LR__0035
01698                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
01698     D5 10 02 F6 | 	mov	local07, ptr__dat__
0169c     C8 A6 05 F1 | 	add	objptr, #200
016a0     D3 12 02 FB | 	rdlong	local08, objptr
016a4     C8 A6 85 F1 | 	sub	objptr, #200
016a8     0A 12 66 F0 | 	shl	local08, #10
016ac     09 11 02 F1 | 	add	local07, local08
016b0     04 15 02 F6 | 	mov	local09, local03
016b4     04 14 66 F0 | 	shl	local09, #4
016b8     0A 11 02 F1 | 	add	local07, local09
016bc     07 11 02 F1 | 	add	local07, local06
016c0     08 17 C2 FA | 	rdbyte	local10, local07
016c4                 | '   repeat xx from 0 to 7
016c4     00 18 06 F6 | 	mov	local11, #0
016c8                 | LR__0036
016c8                 | '     if (bb&(1<<xx))<>0
016c8     0C 1B C2 F9 | 	decod	local12, local11
016cc     0D 17 CA F7 | 	test	local10, local12 wz
016d0     40 00 90 AD |  if_e	jmp	#LR__0037
016d4                 | '       putpixel(xx+x,yy+y,f)
016d4     D8 A6 05 F1 | 	add	objptr, #216
016d8     D3 10 02 FB | 	rdlong	local07, objptr
016dc     D8 A6 85 F1 | 	sub	objptr, #216
016e0     08 1B 02 FB | 	rdlong	local12, local07
016e4     04 10 06 F1 | 	add	local07, #4
016e8     08 13 02 FB | 	rdlong	local08, local07
016ec     0C FB 01 F6 | 	mov	arg01, local11
016f0     02 FB 01 F1 | 	add	arg01, local01
016f4     07 FD 01 F6 | 	mov	arg02, local06
016f8     03 FD 01 F1 | 	add	arg02, local02
016fc     05 FF 01 F6 | 	mov	arg03, local04
01700     D3 1C 02 F6 | 	mov	local13, objptr
01704     0D A7 01 F6 | 	mov	objptr, local12
01708     2D 12 62 FD | 	call	local08
0170c     0E A7 01 F6 | 	mov	objptr, local13
01710                 | '     else
01710     3C 00 90 FD | 	jmp	#LR__0038
01714                 | LR__0037
01714                 | '       putpixel(xx+x,yy+y,b)
01714     D8 A6 05 F1 | 	add	objptr, #216
01718     D3 10 02 FB | 	rdlong	local07, objptr
0171c     D8 A6 85 F1 | 	sub	objptr, #216
01720     08 1B 02 FB | 	rdlong	local12, local07
01724     04 10 06 F1 | 	add	local07, #4
01728     08 13 02 FB | 	rdlong	local08, local07
0172c     0C FB 01 F6 | 	mov	arg01, local11
01730     02 FB 01 F1 | 	add	arg01, local01
01734     07 FD 01 F6 | 	mov	arg02, local06
01738     03 FD 01 F1 | 	add	arg02, local02
0173c     06 FF 01 F6 | 	mov	arg03, local05
01740     D3 1C 02 F6 | 	mov	local13, objptr
01744     0D A7 01 F6 | 	mov	objptr, local12
01748     2D 12 62 FD | 	call	local08
0174c     0E A7 01 F6 | 	mov	objptr, local13
01750                 | LR__0038
01750     01 18 06 F1 | 	add	local11, #1
01754     08 18 5E F2 | 	cmps	local11, #8 wcz
01758     6C FF 9F CD |  if_b	jmp	#LR__0036
0175c     01 0E 06 F1 | 	add	local06, #1
01760     10 0E 5E F2 | 	cmps	local06, #16 wcz
01764     30 FF 9F CD |  if_b	jmp	#LR__0035
01768     AF F0 03 F6 | 	mov	ptra, fp
0176c     BA 00 A0 FD | 	call	#popregs_
01770                 | _putcharxycg_ret
01770     2D 00 64 FD | 	ret
01774                 | 
01774                 | ' 
01774                 | ' pub outtextxycg(x,y,text,f,b) | iii,c
01774                 | _outtextxycg
01774     0C 5A 05 F6 | 	mov	COUNT_, #12
01778     B0 00 A0 FD | 	call	#pushregs_
0177c     FD 04 02 F6 | 	mov	local01, arg01
01780     FE 06 02 F6 | 	mov	local02, arg02
01784     FF 08 02 F6 | 	mov	local03, arg03
01788     00 0B 02 F6 | 	mov	local04, arg04
0178c     01 0D 02 F6 | 	mov	local05, arg05
01790                 | ' 
01790                 | ' repeat iii from 0 to strsize(text)-1
01790     00 0E 06 F6 | 	mov	local06, #0
01794     04 FB 01 F6 | 	mov	arg01, local03
01798     00 10 06 F6 | 	mov	local07, #0
0179c     70 E8 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
017a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
017a4                 | LR__0039
017a4     FD 12 CA FA | 	rdbyte	local08, arg01 wz
017a8     01 10 06 51 |  if_ne	add	local07, #1
017ac     01 FA 05 51 |  if_ne	add	arg01, #1
017b0     F0 FF 9F 5D |  if_ne	jmp	#LR__0039
017b4                 | LR__0040
017b4     08 B7 01 F6 | 	mov	result1, local07
017b8     DB 14 02 F6 | 	mov	local09, result1
017bc     01 14 86 F1 | 	sub	local09, #1
017c0     00 14 5E F2 | 	cmps	local09, #0 wcz
017c4     01 16 06 16 |  if_a	mov	local10, #1
017c8     01 16 66 E6 |  if_be	neg	local10, #1
017cc     0B 15 02 F1 | 	add	local09, local10
017d0                 | LR__0041
017d0                 | '   putcharxycg(x+8*iii,y,byte[text+iii],f,b)
017d0     02 FB 01 F6 | 	mov	arg01, local01
017d4     07 19 02 F6 | 	mov	local11, local06
017d8     03 18 66 F0 | 	shl	local11, #3
017dc     0C FB 01 F1 | 	add	arg01, local11
017e0     03 FD 01 F6 | 	mov	arg02, local02
017e4     04 1B 02 F6 | 	mov	local12, local03
017e8     07 1B 02 F1 | 	add	local12, local06
017ec     0D FF C1 FA | 	rdbyte	arg03, local12
017f0     05 01 02 F6 | 	mov	arg04, local04
017f4     06 03 02 F6 | 	mov	arg05, local05
017f8     7C FE BF FD | 	call	#_putcharxycg
017fc     0B 0F 02 F1 | 	add	local06, local10
01800     0A 0F 0A F2 | 	cmp	local06, local09 wz
01804     C8 FF 9F 5D |  if_ne	jmp	#LR__0041
01808     AF F0 03 F6 | 	mov	ptra, fp
0180c     BA 00 A0 FD | 	call	#popregs_
01810                 | _outtextxycg_ret
01810     2D 00 64 FD | 	ret
01814                 | 
01814                 | ' 
01814                 | ' 
01814                 | ' ''---------- putpixel - put a pixel on the screen
01814                 | ' 
01814                 | ' pub putpixel1(x,y,c) |byte b
01814                 | _putpixel1
01814                 | ' 
01814                 | ' 
01814                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01814     00 BA 05 F6 | 	mov	_var01, #0
01818     00 FA 5D F2 | 	cmps	arg01, #0 wcz
0181c     01 BA 65 36 |  if_ae	neg	_var01, #1
01820     00 BC 05 F6 | 	mov	_var02, #0
01824     90 A6 05 F1 | 	add	objptr, #144
01828     D3 BE 01 FB | 	rdlong	_var03, objptr
0182c     05 BE 65 F0 | 	shl	_var03, #5
01830     DF FA 59 F2 | 	cmps	arg01, _var03 wcz
01834     01 BC 65 C6 |  if_b	neg	_var02, #1
01838     DE BA 01 F5 | 	and	_var01, _var02
0183c     00 C0 05 F6 | 	mov	_var04, #0
01840     00 FC 5D F2 | 	cmps	arg02, #0 wcz
01844     01 C0 65 36 |  if_ae	neg	_var04, #1
01848     E0 BA 01 F5 | 	and	_var01, _var04
0184c     00 C2 05 F6 | 	mov	_var05, #0
01850     04 A6 05 F1 | 	add	objptr, #4
01854     D3 C4 01 FB | 	rdlong	_var06, objptr
01858     94 A6 85 F1 | 	sub	objptr, #148
0185c     E2 FC 59 F2 | 	cmps	arg02, _var06 wcz
01860     01 C2 65 C6 |  if_b	neg	_var05, #1
01864     E1 BA C9 F7 | 	test	_var01, _var05 wz
01868     90 00 90 AD |  if_e	jmp	#LR__0044
0186c                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
0186c     D3 BA 01 FB | 	rdlong	_var01, objptr
01870     90 A6 05 F1 | 	add	objptr, #144
01874     D3 BC 01 FB | 	rdlong	_var02, objptr
01878     90 A6 85 F1 | 	sub	objptr, #144
0187c     02 BC 65 F0 | 	shl	_var02, #2
01880     FE BC 01 FD | 	qmul	_var02, arg02
01884     18 C6 61 FD | 	getqx	_var07
01888     E3 BA 01 F1 | 	add	_var01, _var07
0188c     FD C0 01 F6 | 	mov	_var04, arg01
01890     03 C0 45 F0 | 	shr	_var04, #3
01894     E0 BA 01 F1 | 	add	_var01, _var04
01898     DD C8 C1 FA | 	rdbyte	_var08, _var01
0189c                 | '     if (c==0)
0189c     00 FE 0D F2 | 	cmp	arg03, #0 wz
018a0     18 00 90 5D |  if_ne	jmp	#LR__0042
018a4                 | '       b:=b & !(1<<(x//8))
018a4     FD BE 51 F6 | 	abs	_var03, arg01 wc
018a8     07 BE 05 F5 | 	and	_var03, #7
018ac     DF BE 61 C6 |  if_b	neg	_var03, _var03
018b0     DF BC C1 F9 | 	decod	_var02, _var03
018b4     DE C8 21 F5 | 	andn	_var08, _var02
018b8                 | '     else
018b8     14 00 90 FD | 	jmp	#LR__0043
018bc                 | LR__0042
018bc                 | '       b:=b |(1<<(x//8))
018bc     FD BE 51 F6 | 	abs	_var03, arg01 wc
018c0     07 BE 05 F5 | 	and	_var03, #7
018c4     DF BE 61 C6 |  if_b	neg	_var03, _var03
018c8     DF BC C1 F9 | 	decod	_var02, _var03
018cc     DE C8 41 F5 | 	or	_var08, _var02
018d0                 | LR__0043
018d0                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
018d0     D3 BA 01 FB | 	rdlong	_var01, objptr
018d4     90 A6 05 F1 | 	add	objptr, #144
018d8     D3 BC 01 FB | 	rdlong	_var02, objptr
018dc     90 A6 85 F1 | 	sub	objptr, #144
018e0     02 BC 65 F0 | 	shl	_var02, #2
018e4     FE BC 01 FD | 	qmul	_var02, arg02
018e8     18 C6 61 FD | 	getqx	_var07
018ec     E3 BA 01 F1 | 	add	_var01, _var07
018f0     03 FA 45 F0 | 	shr	arg01, #3
018f4     FD BA 01 F1 | 	add	_var01, arg01
018f8     DD C8 41 FC | 	wrbyte	_var08, _var01
018fc                 | LR__0044
018fc                 | _putpixel1_ret
018fc     2D 00 64 FD | 	ret
01900                 | 
01900                 | ' 
01900                 | ' 
01900                 | ' pub putpixel2(x,y,c) |byte b
01900                 | _putpixel2
01900     FD BA 01 F6 | 	mov	_var01, arg01
01904     FE BC 01 F6 | 	mov	_var02, arg02
01908     FF BE 01 F6 | 	mov	_var03, arg03
0190c                 | ' 
0190c                 | ' 
0190c                 | ' if ((x>=0) && (x<16*cpl) && (y>=0) && (y<lines))
0190c     00 BA 5D F2 | 	cmps	_var01, #0 wcz
01910     C8 00 90 CD |  if_b	jmp	#LR__0045
01914     90 A6 05 F1 | 	add	objptr, #144
01918     D3 C0 01 FB | 	rdlong	_var04, objptr
0191c     90 A6 85 F1 | 	sub	objptr, #144
01920     04 C0 65 F0 | 	shl	_var04, #4
01924     E0 BA 59 F2 | 	cmps	_var01, _var04 wcz
01928     B0 00 90 3D |  if_ae	jmp	#LR__0045
0192c     00 BC 5D F2 | 	cmps	_var02, #0 wcz
01930     A8 00 90 CD |  if_b	jmp	#LR__0045
01934     94 A6 05 F1 | 	add	objptr, #148
01938     D3 C2 01 FB | 	rdlong	_var05, objptr
0193c     94 A6 85 F1 | 	sub	objptr, #148
01940     E1 BC 59 F2 | 	cmps	_var02, _var05 wcz
01944     94 00 90 3D |  if_ae	jmp	#LR__0045
01948                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01948     D3 C0 01 FB | 	rdlong	_var04, objptr
0194c     90 A6 05 F1 | 	add	objptr, #144
01950     D3 C4 01 FB | 	rdlong	_var06, objptr
01954     90 A6 85 F1 | 	sub	objptr, #144
01958     02 C4 65 F0 | 	shl	_var06, #2
0195c     DE C4 01 FD | 	qmul	_var06, _var02
01960     18 C6 61 FD | 	getqx	_var07
01964     E3 C0 01 F1 | 	add	_var04, _var07
01968     DD C8 01 F6 | 	mov	_var08, _var01
0196c     02 C8 45 F0 | 	shr	_var08, #2
01970     E4 C0 01 F1 | 	add	_var04, _var08
01974     E0 CA C1 FA | 	rdbyte	_var09, _var04
01978                 | '     b:=b & !(%11<<((x//4)<<1))
01978     DD CC 51 F6 | 	abs	_var10, _var01 wc
0197c     03 CC 05 F5 | 	and	_var10, #3
01980     E6 CC 61 C6 |  if_b	neg	_var10, _var10
01984     01 CC 65 F0 | 	shl	_var10, #1
01988     03 C4 05 F6 | 	mov	_var06, #3
0198c     E6 C4 61 F0 | 	shl	_var06, _var10
01990     E2 CA 21 F5 | 	andn	_var09, _var06
01994                 | '     b:=b |(c<<((x//4)<<1))
01994     DD CC 51 F6 | 	abs	_var10, _var01 wc
01998     03 CC 05 F5 | 	and	_var10, #3
0199c     E6 CC 61 C6 |  if_b	neg	_var10, _var10
019a0     01 CC 65 F0 | 	shl	_var10, #1
019a4     E6 BE 61 F0 | 	shl	_var03, _var10
019a8     DF CA 41 F5 | 	or	_var09, _var03
019ac                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
019ac     D3 C0 01 FB | 	rdlong	_var04, objptr
019b0     90 A6 05 F1 | 	add	objptr, #144
019b4     D3 C4 01 FB | 	rdlong	_var06, objptr
019b8     90 A6 85 F1 | 	sub	objptr, #144
019bc     02 C4 65 F0 | 	shl	_var06, #2
019c0     DE C4 01 FD | 	qmul	_var06, _var02
019c4     18 C6 61 FD | 	getqx	_var07
019c8     E3 C0 01 F1 | 	add	_var04, _var07
019cc     DD C8 01 F6 | 	mov	_var08, _var01
019d0     02 C8 45 F0 | 	shr	_var08, #2
019d4     E4 C0 01 F1 | 	add	_var04, _var08
019d8     E0 CA 41 FC | 	wrbyte	_var09, _var04
019dc                 | LR__0045
019dc                 | _putpixel2_ret
019dc     2D 00 64 FD | 	ret
019e0                 | 
019e0                 | ' 
019e0                 | ' 
019e0                 | ' pub putpixel4(x,y,c) |byte b
019e0                 | _putpixel4
019e0                 | ' 
019e0                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
019e0     00 BA 05 F6 | 	mov	_var01, #0
019e4     00 FA 5D F2 | 	cmps	arg01, #0 wcz
019e8     01 BA 65 36 |  if_ae	neg	_var01, #1
019ec     00 BC 05 F6 | 	mov	_var02, #0
019f0     90 A6 05 F1 | 	add	objptr, #144
019f4     D3 BE 01 FB | 	rdlong	_var03, objptr
019f8     04 BE 65 F0 | 	shl	_var03, #4
019fc     DF FA 59 F2 | 	cmps	arg01, _var03 wcz
01a00     01 BC 65 C6 |  if_b	neg	_var02, #1
01a04     DE BA 01 F5 | 	and	_var01, _var02
01a08     00 C0 05 F6 | 	mov	_var04, #0
01a0c     00 FC 5D F2 | 	cmps	arg02, #0 wcz
01a10     01 C0 65 36 |  if_ae	neg	_var04, #1
01a14     E0 BA 01 F5 | 	and	_var01, _var04
01a18     00 C2 05 F6 | 	mov	_var05, #0
01a1c     04 A6 05 F1 | 	add	objptr, #4
01a20     D3 C4 01 FB | 	rdlong	_var06, objptr
01a24     94 A6 85 F1 | 	sub	objptr, #148
01a28     E2 FC 59 F2 | 	cmps	arg02, _var06 wcz
01a2c     01 C2 65 C6 |  if_b	neg	_var05, #1
01a30     E1 BA C9 F7 | 	test	_var01, _var05 wz
01a34     90 00 90 AD |  if_e	jmp	#LR__0046
01a38                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
01a38     D3 BA 01 FB | 	rdlong	_var01, objptr
01a3c     90 A6 05 F1 | 	add	objptr, #144
01a40     D3 BC 01 FB | 	rdlong	_var02, objptr
01a44     90 A6 85 F1 | 	sub	objptr, #144
01a48     02 BC 65 F0 | 	shl	_var02, #2
01a4c     FE BC 01 FD | 	qmul	_var02, arg02
01a50     18 C6 61 FD | 	getqx	_var07
01a54     E3 BA 01 F1 | 	add	_var01, _var07
01a58     FD C0 01 F6 | 	mov	_var04, arg01
01a5c     01 C0 45 F0 | 	shr	_var04, #1
01a60     E0 BA 01 F1 | 	add	_var01, _var04
01a64     DD C8 C1 FA | 	rdbyte	_var08, _var01
01a68                 | '     b:=b & !(%1111<<((x//2)<<2))
01a68     FD BE 51 F6 | 	abs	_var03, arg01 wc
01a6c     01 BE 05 F5 | 	and	_var03, #1
01a70     DF BE 61 C6 |  if_b	neg	_var03, _var03
01a74     02 BE 65 F0 | 	shl	_var03, #2
01a78     0F BC 05 F6 | 	mov	_var02, #15
01a7c     DF BC 61 F0 | 	shl	_var02, _var03
01a80     DE C8 21 F5 | 	andn	_var08, _var02
01a84                 | '     b:=b |(c<<((x//2)<<2))
01a84     FD BE 51 F6 | 	abs	_var03, arg01 wc
01a88     01 BE 05 F5 | 	and	_var03, #1
01a8c     DF BE 61 C6 |  if_b	neg	_var03, _var03
01a90     02 BE 65 F0 | 	shl	_var03, #2
01a94     DF FE 61 F0 | 	shl	arg03, _var03
01a98     FF C8 41 F5 | 	or	_var08, arg03
01a9c                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
01a9c     D3 BA 01 FB | 	rdlong	_var01, objptr
01aa0     90 A6 05 F1 | 	add	objptr, #144
01aa4     D3 BC 01 FB | 	rdlong	_var02, objptr
01aa8     90 A6 85 F1 | 	sub	objptr, #144
01aac     02 BC 65 F0 | 	shl	_var02, #2
01ab0     FE BC 01 FD | 	qmul	_var02, arg02
01ab4     18 C6 61 FD | 	getqx	_var07
01ab8     E3 BA 01 F1 | 	add	_var01, _var07
01abc     01 FA 45 F0 | 	shr	arg01, #1
01ac0     FD BA 01 F1 | 	add	_var01, arg01
01ac4     DD C8 41 FC | 	wrbyte	_var08, _var01
01ac8                 | LR__0046
01ac8                 | _putpixel4_ret
01ac8     2D 00 64 FD | 	ret
01acc                 | 
01acc                 | ' 
01acc                 | ' 
01acc                 | ' pub putpixel8(x,y,c)
01acc                 | _putpixel8
01acc                 | ' 
01acc                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
01acc     00 BA 05 F6 | 	mov	_var01, #0
01ad0     00 FA 5D F2 | 	cmps	arg01, #0 wcz
01ad4     01 BA 65 36 |  if_ae	neg	_var01, #1
01ad8     00 BC 05 F6 | 	mov	_var02, #0
01adc     90 A6 05 F1 | 	add	objptr, #144
01ae0     D3 BE 01 FB | 	rdlong	_var03, objptr
01ae4     02 BE 65 F0 | 	shl	_var03, #2
01ae8     DF FA 59 F2 | 	cmps	arg01, _var03 wcz
01aec     01 BC 65 C6 |  if_b	neg	_var02, #1
01af0     DE BA 01 F5 | 	and	_var01, _var02
01af4     00 C0 05 F6 | 	mov	_var04, #0
01af8     00 FC 5D F2 | 	cmps	arg02, #0 wcz
01afc     01 C0 65 36 |  if_ae	neg	_var04, #1
01b00     E0 BA 01 F5 | 	and	_var01, _var04
01b04     00 C2 05 F6 | 	mov	_var05, #0
01b08     04 A6 05 F1 | 	add	objptr, #4
01b0c     D3 C4 01 FB | 	rdlong	_var06, objptr
01b10     94 A6 85 F1 | 	sub	objptr, #148
01b14     E2 FC 59 F2 | 	cmps	arg02, _var06 wcz
01b18     01 C2 65 C6 |  if_b	neg	_var05, #1
01b1c     E1 BA C9 F7 | 	test	_var01, _var05 wz
01b20     28 00 90 AD |  if_e	jmp	#LR__0047
01b24                 | '     byte[buf_ptr+4*cpl*y+x]:=c
01b24     D3 BA 01 FB | 	rdlong	_var01, objptr
01b28     90 A6 05 F1 | 	add	objptr, #144
01b2c     D3 BC 01 FB | 	rdlong	_var02, objptr
01b30     90 A6 85 F1 | 	sub	objptr, #144
01b34     02 BC 65 F0 | 	shl	_var02, #2
01b38     FE BC 01 FD | 	qmul	_var02, arg02
01b3c     18 C6 61 FD | 	getqx	_var07
01b40     E3 BA 01 F1 | 	add	_var01, _var07
01b44     FD BA 01 F1 | 	add	_var01, arg01
01b48     DD FE 41 FC | 	wrbyte	arg03, _var01
01b4c                 | LR__0047
01b4c                 | _putpixel8_ret
01b4c     2D 00 64 FD | 	ret
01b50                 | 
01b50                 | ' 
01b50                 | ' '*************************************************************************
01b50                 | ' '                                                                        *
01b50                 | ' '  VBlank functions                                                      *
01b50                 | ' '                                                                        *
01b50                 | ' '*************************************************************************
01b50                 | ' 
01b50                 | ' pub waitvbl(amount) | i
01b50                 | _waitvbl
01b50     04 5A 05 F6 | 	mov	COUNT_, #4
01b54     B0 00 A0 FD | 	call	#pushregs_
01b58     FD 04 02 F6 | 	mov	local01, arg01
01b5c                 | ' 
01b5c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01b5c                 | ' 
01b5c                 | ' repeat i from 1 to amount
01b5c     01 06 06 F6 | 	mov	local02, #1
01b60     01 04 5E F2 | 	cmps	local01, #1 wcz
01b64     01 08 06 16 |  if_a	mov	local03, #1
01b68     01 08 66 E6 |  if_be	neg	local03, #1
01b6c     04 05 02 F1 | 	add	local01, local03
01b70                 | LR__0048
01b70                 | '   repeat until vblank==0
01b70                 | LR__0049
01b70     40 A6 05 F1 | 	add	objptr, #64
01b74     D3 0A 0A FB | 	rdlong	local04, objptr wz
01b78     40 A6 85 F1 | 	sub	objptr, #64
01b7c     0C 00 90 AD |  if_e	jmp	#LR__0050
01b80                 | '     waitus(100)
01b80     64 FA 05 F6 | 	mov	arg01, #100
01b84     2C 11 B0 FD | 	call	#__system___waitus
01b88     E4 FF 9F FD | 	jmp	#LR__0049
01b8c                 | LR__0050
01b8c                 | '   repeat until vblank==1
01b8c                 | LR__0051
01b8c     40 A6 05 F1 | 	add	objptr, #64
01b90     D3 0A 02 FB | 	rdlong	local04, objptr
01b94     40 A6 85 F1 | 	sub	objptr, #64
01b98     01 0A 0E F2 | 	cmp	local04, #1 wz
01b9c     0C 00 90 AD |  if_e	jmp	#LR__0052
01ba0                 | '     waitus(100)
01ba0     64 FA 05 F6 | 	mov	arg01, #100
01ba4     0C 11 B0 FD | 	call	#__system___waitus
01ba8     E0 FF 9F FD | 	jmp	#LR__0051
01bac                 | LR__0052
01bac     04 07 02 F1 | 	add	local02, local03
01bb0     02 07 0A F2 | 	cmp	local02, local01 wz
01bb4     B8 FF 9F 5D |  if_ne	jmp	#LR__0048
01bb8     AF F0 03 F6 | 	mov	ptra, fp
01bbc     BA 00 A0 FD | 	call	#popregs_
01bc0                 | _waitvbl_ret
01bc0     2D 00 64 FD | 	ret
01bc4                 | 
01bc4                 | ' 
01bc4                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
01bc4                 | ' 
01bc4                 | ' pub setbordercolor(r,g,b) | color
01bc4                 | _setbordercolor
01bc4                 | ' 
01bc4                 | ' color:=r<<24+g<<16+b<<8
01bc4     18 FA 65 F0 | 	shl	arg01, #24
01bc8     10 FC 65 F0 | 	shl	arg02, #16
01bcc     FE FA 01 F1 | 	add	arg01, arg02
01bd0     08 FE 65 F0 | 	shl	arg03, #8
01bd4     FF FA 01 F1 | 	add	arg01, arg03
01bd8                 | ' bordercolor:=color
01bd8     2C A6 05 F1 | 	add	objptr, #44
01bdc     D3 FA 61 FC | 	wrlong	arg01, objptr
01be0     2C A6 85 F1 | 	sub	objptr, #44
01be4                 | _setbordercolor_ret
01be4     2D 00 64 FD | 	ret
01be8                 | 
01be8                 | ' 
01be8                 | ' 
01be8                 | ' '*************************************************************************
01be8                 | ' '                                                                        *
01be8                 | ' '  Text functions                                                        *
01be8                 | ' '                                                                        *
01be8                 | ' '*************************************************************************
01be8                 | ' 
01be8                 | ' ''---------- Clear the screen, set its foreground/background color
01be8                 | ' 
01be8                 | ' pub cls(fc,bc)   :c
01be8                 | _cls
01be8     06 5A 05 F6 | 	mov	COUNT_, #6
01bec     B0 00 A0 FD | 	call	#pushregs_
01bf0     FD 04 02 F6 | 	mov	local01, arg01
01bf4     FE 06 02 F6 | 	mov	local02, arg02
01bf8                 | ' 
01bf8                 | ' if (graphmode<512)
01bf8     C4 A6 05 F1 | 	add	objptr, #196
01bfc     D3 08 02 FB | 	rdlong	local03, objptr
01c00     C4 A6 85 F1 | 	sub	objptr, #196
01c04     01 00 00 FF 
01c08     00 08 5E F2 | 	cmps	local03, ##512 wcz
01c0c     34 00 90 3D |  if_ae	jmp	#LR__0053
01c10                 | '   c:=fc<<24+bc<<16+$20
01c10     02 0B 02 F6 | 	mov	local04, local01
01c14     18 0A 66 F0 | 	shl	local04, #24
01c18     03 0D 02 F6 | 	mov	local05, local02
01c1c     10 0C 66 F0 | 	shl	local05, #16
01c20     06 0B 02 F1 | 	add	local04, local05
01c24     20 0A 06 F1 | 	add	local04, #32
01c28                 | '   longfill(buf_ptr,c,buflen)
01c28     D3 FA 01 FB | 	rdlong	arg01, objptr
01c2c     30 A6 05 F1 | 	add	objptr, #48
01c30     D3 FE 01 FB | 	rdlong	arg03, objptr
01c34     30 A6 85 F1 | 	sub	objptr, #48
01c38     05 FD 01 F6 | 	mov	arg02, local04
01c3c     A8 00 A0 FD | 	call	#\builtin_longfill_
01c40                 | ' else
01c40     AC 00 90 FD | 	jmp	#LR__0059
01c44                 | LR__0053
01c44                 | '   if (graphmode & 48) ==48
01c44     C4 A6 05 F1 | 	add	objptr, #196
01c48     D3 08 02 FB | 	rdlong	local03, objptr
01c4c     C4 A6 85 F1 | 	sub	objptr, #196
01c50     30 08 06 F5 | 	and	local03, #48
01c54     30 08 0E F2 | 	cmp	local03, #48 wz
01c58                 | '     c:=bc
01c58     03 0B 02 A6 |  if_e	mov	local04, local02
01c5c     74 00 90 AD |  if_e	jmp	#LR__0058
01c60                 | '   elseif (graphmode & 48) ==32
01c60     C4 A6 05 F1 | 	add	objptr, #196
01c64     D3 08 02 FB | 	rdlong	local03, objptr
01c68     C4 A6 85 F1 | 	sub	objptr, #196
01c6c     30 08 06 F5 | 	and	local03, #48
01c70     20 08 0E F2 | 	cmp	local03, #32 wz
01c74     10 00 90 5D |  if_ne	jmp	#LR__0054
01c78                 | '     c:=bc<<4+bc
01c78     03 0B 02 F6 | 	mov	local04, local02
01c7c     04 0A 66 F0 | 	shl	local04, #4
01c80     03 0B 02 F1 | 	add	local04, local02
01c84     4C 00 90 FD | 	jmp	#LR__0057
01c88                 | LR__0054
01c88                 | '   elseif (graphmode & 48) ==16
01c88     C4 A6 05 F1 | 	add	objptr, #196
01c8c     D3 08 02 FB | 	rdlong	local03, objptr
01c90     C4 A6 85 F1 | 	sub	objptr, #196
01c94     30 08 06 F5 | 	and	local03, #48
01c98     10 08 0E F2 | 	cmp	local03, #16 wz
01c9c     28 00 90 5D |  if_ne	jmp	#LR__0055
01ca0                 | '     c:=bc<<6+bc<<4+bc<<2+bc
01ca0     03 0B 02 F6 | 	mov	local04, local02
01ca4     06 0A 66 F0 | 	shl	local04, #6
01ca8     03 0D 02 F6 | 	mov	local05, local02
01cac     04 0C 66 F0 | 	shl	local05, #4
01cb0     06 0B 02 F1 | 	add	local04, local05
01cb4     03 0F 02 F6 | 	mov	local06, local02
01cb8     02 0E 66 F0 | 	shl	local06, #2
01cbc     07 0B 02 F1 | 	add	local04, local06
01cc0     03 0B 02 F1 | 	add	local04, local02
01cc4                 | '   else
01cc4     0C 00 90 FD | 	jmp	#LR__0056
01cc8                 | LR__0055
01cc8                 | '     if bc==1
01cc8     01 06 0E F2 | 	cmp	local02, #1 wz
01ccc                 | '       c:=255
01ccc     FF 0A 06 A6 |  if_e	mov	local04, #255
01cd0                 | '     else
01cd0                 | '       c:=0
01cd0     00 0A 06 56 |  if_ne	mov	local04, #0
01cd4                 | LR__0056
01cd4                 | LR__0057
01cd4                 | LR__0058
01cd4                 | '   bytefill(buf_ptr,c,buflen*4)
01cd4     D3 FA 01 FB | 	rdlong	arg01, objptr
01cd8     30 A6 05 F1 | 	add	objptr, #48
01cdc     D3 FE 01 FB | 	rdlong	arg03, objptr
01ce0     30 A6 85 F1 | 	sub	objptr, #48
01ce4     02 FE 65 F0 | 	shl	arg03, #2
01ce8     05 FD 01 F6 | 	mov	arg02, local04
01cec     A0 00 A0 FD | 	call	#\builtin_bytefill_
01cf0                 | LR__0059
01cf0                 | ' setwritecolors(fc,bc)
01cf0                 | ' 
01cf0                 | ' 
01cf0                 | ' write_color:=ff
01cf0     38 A6 05 F1 | 	add	objptr, #56
01cf4     D3 04 62 FC | 	wrlong	local01, objptr
01cf8                 | ' write_background:=bb
01cf8     04 A6 05 F1 | 	add	objptr, #4
01cfc     D3 06 62 FC | 	wrlong	local02, objptr
01d00                 | ' cursor_x:=0
01d00     08 A6 85 F1 | 	sub	objptr, #8
01d04     D3 00 48 FC | 	wrbyte	#0, objptr
01d08                 | ' cursor_y:=0
01d08     01 A6 05 F1 | 	add	objptr, #1
01d0c     D3 00 48 FC | 	wrbyte	#0, objptr
01d10     35 A6 85 F1 | 	sub	objptr, #53
01d14     05 B7 01 F6 | 	mov	result1, local04
01d18     AF F0 03 F6 | 	mov	ptra, fp
01d1c     BA 00 A0 FD | 	call	#popregs_
01d20                 | _cls_ret
01d20     2D 00 64 FD | 	ret
01d24                 | 
01d24                 | ' 
01d24                 | ' 
01d24                 | ' '*************************************************************************
01d24                 | ' '                                                                        *
01d24                 | ' '  Conversions                                                           *
01d24                 | ' '                                                                        *
01d24                 | ' '*************************************************************************
01d24                 | ' 
01d24                 | ' ''---------- Convert a integer to dec string, return a pointer
01d24                 | ' 
01d24                 | ' pub inttostr(i):result |q,pos,k,j
01d24                 | _inttostr
01d24     06 5A 05 F6 | 	mov	COUNT_, #6
01d28     B0 00 A0 FD | 	call	#pushregs_
01d2c     FD 04 02 F6 | 	mov	local01, arg01
01d30                 | ' 
01d30                 | ' j:=i
01d30     02 07 0A F6 | 	mov	local02, local01 wz
01d34                 | ' pos:=10
01d34     0A 08 06 F6 | 	mov	local03, #10
01d38                 | ' k:=0
01d38     00 0A 06 F6 | 	mov	local04, #0
01d3c                 | ' 
01d3c                 | ' if (j==0)
01d3c     18 00 90 5D |  if_ne	jmp	#LR__0060
01d40                 | '   n_string[0]:=48
01d40     44 A6 05 F1 | 	add	objptr, #68
01d44     D3 60 48 FC | 	wrbyte	#48, objptr
01d48                 | '   n_string[1]:=0
01d48     01 A6 05 F1 | 	add	objptr, #1
01d4c     D3 00 48 FC | 	wrbyte	#0, objptr
01d50     45 A6 85 F1 | 	sub	objptr, #69
01d54                 | ' 
01d54                 | ' else
01d54     C4 00 90 FD | 	jmp	#LR__0067
01d58                 | LR__0060
01d58                 | '   if (j<0)
01d58     00 06 5E F2 | 	cmps	local02, #0 wcz
01d5c                 | '     j:=0-j
01d5c     03 07 62 C6 |  if_b	neg	local02, local02
01d60                 | '     k:=45
01d60     2D 0A 06 C6 |  if_b	mov	local04, #45
01d64                 | ' 
01d64                 | '   n_string[11]:=0
01d64     4F A6 05 F1 | 	add	objptr, #79
01d68     D3 00 48 FC | 	wrbyte	#0, objptr
01d6c     4F A6 85 F1 | 	sub	objptr, #79
01d70     CC E2 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
01d74     93 00 A0 FD | 	call	#FCACHE_LOAD_
01d78                 | '   repeat while (pos>-1)
01d78                 | LR__0061
01d78     FF FF 7F FF 
01d7c     FF 09 5E F2 | 	cmps	local03, ##-1 wcz
01d80     34 00 90 ED |  if_be	jmp	#LR__0063
01d84                 | '     q:=j//10
01d84     03 29 02 F6 | 	mov	muldiva_, local02
01d88     0A 2A 06 F6 | 	mov	muldivb_, #10
01d8c     C6 00 A0 FD | 	call	#divide_
01d90                 | '     q:=48+q
01d90     30 0C 06 F6 | 	mov	local05, #48
01d94     14 0D 02 F1 | 	add	local05, muldiva_
01d98                 | '     n_string[pos]:=q
01d98     04 0F 02 F6 | 	mov	local06, local03
01d9c     44 A6 05 F1 | 	add	objptr, #68
01da0     D3 0E 02 F1 | 	add	local06, objptr
01da4     07 0D 42 FC | 	wrbyte	local05, local06
01da8                 | '     j:=j/10
01da8     15 07 02 F6 | 	mov	local02, muldivb_
01dac                 | '     pos-=1
01dac     01 08 86 F1 | 	sub	local03, #1
01db0     44 A6 85 F1 | 	sub	objptr, #68
01db4     C0 FF 9F FD | 	jmp	#LR__0061
01db8                 | LR__0062
01db8                 | LR__0063
01db8                 | '   repeat while n_string[0]==48
01db8                 | LR__0064
01db8     44 A6 05 F1 | 	add	objptr, #68
01dbc     D3 0E C2 FA | 	rdbyte	local06, objptr
01dc0     44 A6 85 F1 | 	sub	objptr, #68
01dc4     30 0E 0E F2 | 	cmp	local06, #48 wz
01dc8     20 00 90 5D |  if_ne	jmp	#LR__0065
01dcc                 | '     bytemove(@n_string,@n_string+1,12)
01dcc     44 A6 05 F1 | 	add	objptr, #68
01dd0     D3 FA 01 F6 | 	mov	arg01, objptr
01dd4     D3 FC 01 F6 | 	mov	arg02, objptr
01dd8     44 A6 85 F1 | 	sub	objptr, #68
01ddc     01 FC 05 F1 | 	add	arg02, #1
01de0     0C FE 05 F6 | 	mov	arg03, #12
01de4     5C 0C B0 FD | 	call	#__system____builtin_memmove
01de8     CC FF 9F FD | 	jmp	#LR__0064
01dec                 | LR__0065
01dec                 | ' 
01dec                 | '   if k==45
01dec     2D 0A 0E F2 | 	cmp	local04, #45 wz
01df0     28 00 90 5D |  if_ne	jmp	#LR__0066
01df4                 | '      bytemove(@n_string+1,@n_string,12)
01df4     44 A6 05 F1 | 	add	objptr, #68
01df8     D3 FA 01 F6 | 	mov	arg01, objptr
01dfc     01 FA 05 F1 | 	add	arg01, #1
01e00     D3 FC 01 F6 | 	mov	arg02, objptr
01e04     44 A6 85 F1 | 	sub	objptr, #68
01e08     0C FE 05 F6 | 	mov	arg03, #12
01e0c     34 0C B0 FD | 	call	#__system____builtin_memmove
01e10                 | '      n_string[0]:=k
01e10     44 A6 05 F1 | 	add	objptr, #68
01e14     D3 0A 42 FC | 	wrbyte	local04, objptr
01e18     44 A6 85 F1 | 	sub	objptr, #68
01e1c                 | LR__0066
01e1c                 | LR__0067
01e1c                 | ' 
01e1c                 | ' q:=@n_string
01e1c     44 A6 05 F1 | 	add	objptr, #68
01e20     D3 B6 01 F6 | 	mov	result1, objptr
01e24     44 A6 85 F1 | 	sub	objptr, #68
01e28                 | ' return q
01e28     AF F0 03 F6 | 	mov	ptra, fp
01e2c     BA 00 A0 FD | 	call	#popregs_
01e30                 | _inttostr_ret
01e30     2D 00 64 FD | 	ret
01e34                 | 
01e34                 | ' 
01e34                 | ' '*************************************************************************
01e34                 | ' '                                                                        *
01e34                 | ' '  Mode setting and driver start                                                          *
01e34                 | ' '                                                                        *
01e34                 | ' '*************************************************************************
01e34                 | ' 
01e34                 | ' ''---------  Set the graphics mode
01e34                 | ' 
01e34                 | ' 
01e34                 | ' 
01e34                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
01e34                 | _setmode
01e34     0A 5A 05 F6 | 	mov	COUNT_, #10
01e38     B0 00 A0 FD | 	call	#pushregs_
01e3c     FD 04 02 F6 | 	mov	local01, arg01
01e40                 | ' 
01e40                 | ' '' mode:tn_bb_cc_vv_hh
01e40                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
01e40                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
01e40                 | ' 
01e40                 | ' if mode==(512+192+48)
01e40     01 00 00 FF 
01e44     F0 04 0E F2 | 	cmp	local01, ##752 wz
01e48                 | '   return 'no RAM
01e48     C0 05 90 AD |  if_e	jmp	#LR__0090
01e4c                 | ' 
01e4c                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
01e4c     02 07 02 F6 | 	mov	local02, local01
01e50     06 06 46 F0 | 	shr	local02, #6
01e54     07 06 06 F5 | 	and	local02, #7
01e58     08 06 26 F3 | 	fle	local02, #8
01e5c     03 09 02 F6 | 	mov	local03, local02
01e60     30 08 62 FD | 	jmprel	local03
01e64                 | LR__0068
01e64     20 00 90 FD | 	jmp	#LR__0069
01e68     48 00 90 FD | 	jmp	#LR__0070
01e6c     70 00 90 FD | 	jmp	#LR__0071
01e70     98 00 90 FD | 	jmp	#LR__0072
01e74     C0 00 90 FD | 	jmp	#LR__0073
01e78     E8 00 90 FD | 	jmp	#LR__0074
01e7c     10 01 90 FD | 	jmp	#LR__0075
01e80     38 01 90 FD | 	jmp	#LR__0076
01e84     68 01 90 FD | 	jmp	#LR__0077
01e88                 | LR__0069
01e88                 | ' 
01e88                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
01e88     50 A6 05 F1 | 	add	objptr, #80
01e8c     D3 FA 01 F6 | 	mov	arg01, objptr
01e90     50 A6 85 F1 | 	sub	objptr, #80
01e94     10 00 00 FF 
01e98     58 AA 05 F1 | 	add	ptr__dat__, ##8280
01e9c     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01ea0     10 00 00 FF 
01ea4     58 AA 85 F1 | 	sub	ptr__dat__, ##8280
01ea8     10 FE 05 F6 | 	mov	arg03, #16
01eac     24 0C B0 FD | 	call	#__system__longmove
01eb0     3C 01 90 FD | 	jmp	#LR__0077
01eb4                 | LR__0070
01eb4                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
01eb4     50 A6 05 F1 | 	add	objptr, #80
01eb8     D3 FA 01 F6 | 	mov	arg01, objptr
01ebc     50 A6 85 F1 | 	sub	objptr, #80
01ec0     10 00 00 FF 
01ec4     98 AA 05 F1 | 	add	ptr__dat__, ##8344
01ec8     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01ecc     10 00 00 FF 
01ed0     98 AA 85 F1 | 	sub	ptr__dat__, ##8344
01ed4     10 FE 05 F6 | 	mov	arg03, #16
01ed8     F8 0B B0 FD | 	call	#__system__longmove
01edc     10 01 90 FD | 	jmp	#LR__0077
01ee0                 | LR__0071
01ee0                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
01ee0     50 A6 05 F1 | 	add	objptr, #80
01ee4     D3 FA 01 F6 | 	mov	arg01, objptr
01ee8     50 A6 85 F1 | 	sub	objptr, #80
01eec     10 00 00 FF 
01ef0     D8 AA 05 F1 | 	add	ptr__dat__, ##8408
01ef4     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01ef8     10 00 00 FF 
01efc     D8 AA 85 F1 | 	sub	ptr__dat__, ##8408
01f00     10 FE 05 F6 | 	mov	arg03, #16
01f04     CC 0B B0 FD | 	call	#__system__longmove
01f08     E4 00 90 FD | 	jmp	#LR__0077
01f0c                 | LR__0072
01f0c                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
01f0c     50 A6 05 F1 | 	add	objptr, #80
01f10     D3 FA 01 F6 | 	mov	arg01, objptr
01f14     50 A6 85 F1 | 	sub	objptr, #80
01f18     10 00 00 FF 
01f1c     18 AB 05 F1 | 	add	ptr__dat__, ##8472
01f20     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01f24     10 00 00 FF 
01f28     18 AB 85 F1 | 	sub	ptr__dat__, ##8472
01f2c     10 FE 05 F6 | 	mov	arg03, #16
01f30     A0 0B B0 FD | 	call	#__system__longmove
01f34     B8 00 90 FD | 	jmp	#LR__0077
01f38                 | LR__0073
01f38                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
01f38     50 A6 05 F1 | 	add	objptr, #80
01f3c     D3 FA 01 F6 | 	mov	arg01, objptr
01f40     50 A6 85 F1 | 	sub	objptr, #80
01f44     10 00 00 FF 
01f48     58 AB 05 F1 | 	add	ptr__dat__, ##8536
01f4c     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01f50     10 00 00 FF 
01f54     58 AB 85 F1 | 	sub	ptr__dat__, ##8536
01f58     10 FE 05 F6 | 	mov	arg03, #16
01f5c     74 0B B0 FD | 	call	#__system__longmove
01f60     8C 00 90 FD | 	jmp	#LR__0077
01f64                 | LR__0074
01f64                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
01f64     50 A6 05 F1 | 	add	objptr, #80
01f68     D3 FA 01 F6 | 	mov	arg01, objptr
01f6c     50 A6 85 F1 | 	sub	objptr, #80
01f70     10 00 00 FF 
01f74     98 AB 05 F1 | 	add	ptr__dat__, ##8600
01f78     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01f7c     10 00 00 FF 
01f80     98 AB 85 F1 | 	sub	ptr__dat__, ##8600
01f84     10 FE 05 F6 | 	mov	arg03, #16
01f88     48 0B B0 FD | 	call	#__system__longmove
01f8c     60 00 90 FD | 	jmp	#LR__0077
01f90                 | LR__0075
01f90                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
01f90     50 A6 05 F1 | 	add	objptr, #80
01f94     D3 FA 01 F6 | 	mov	arg01, objptr
01f98     50 A6 85 F1 | 	sub	objptr, #80
01f9c     10 00 00 FF 
01fa0     D8 AB 05 F1 | 	add	ptr__dat__, ##8664
01fa4     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
01fa8     10 00 00 FF 
01fac     D8 AB 85 F1 | 	sub	ptr__dat__, ##8664
01fb0     10 FE 05 F6 | 	mov	arg03, #16
01fb4     1C 0B B0 FD | 	call	#__system__longmove
01fb8     34 00 90 FD | 	jmp	#LR__0077
01fbc                 | LR__0076
01fbc                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
01fbc     50 A6 05 F1 | 	add	objptr, #80
01fc0     D3 0A 02 F6 | 	mov	local04, objptr
01fc4     11 00 00 FF 
01fc8     18 AA 05 F1 | 	add	ptr__dat__, ##8728
01fcc     D5 0C 02 F6 | 	mov	local05, ptr__dat__
01fd0     10 0E 06 F6 | 	mov	local06, #16
01fd4     05 FB 01 F6 | 	mov	arg01, local04
01fd8     06 FD 01 F6 | 	mov	arg02, local05
01fdc     10 FE 05 F6 | 	mov	arg03, #16
01fe0     50 A6 85 F1 | 	sub	objptr, #80
01fe4     11 00 00 FF 
01fe8     18 AA 85 F1 | 	sub	ptr__dat__, ##8728
01fec     E4 0A B0 FD | 	call	#__system__longmove
01ff0                 | LR__0077
01ff0                 | ' 
01ff0                 | ' ' 4-bit graphics: do nothing with timings :)
01ff0                 | ' if mode<512
01ff0     01 00 00 FF 
01ff4     00 04 5E F2 | 	cmps	local01, ##512 wcz
01ff8     1C 00 90 3D |  if_ae	jmp	#LR__0078
01ffc                 | '   palette_ptr:=@ataripalette
01ffc     0E 00 00 FF 
02000     58 AA 05 F1 | 	add	ptr__dat__, ##7256
02004     18 A6 05 F1 | 	add	objptr, #24
02008     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
0200c     18 A6 85 F1 | 	sub	objptr, #24
02010     0E 00 00 FF 
02014     58 AA 85 F1 | 	sub	ptr__dat__, ##7256
02018                 | LR__0078
02018                 | ' 
02018                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02018     02 07 02 F6 | 	mov	local02, local01
0201c     01 00 00 FF 
02020     30 06 06 F5 | 	and	local02, ##560
02024     01 00 00 FF 
02028     30 06 0E F2 | 	cmp	local02, ##560 wz
0202c     44 00 90 5D |  if_ne	jmp	#LR__0079
02030                 | '   timings[5]:=4
02030     64 A6 05 F1 | 	add	objptr, #100
02034     D3 08 68 FC | 	wrlong	#4, objptr
02038                 | '   timings[11]:=timings[11]<<1
02038     18 A6 05 F1 | 	add	objptr, #24
0203c     D3 06 02 FB | 	rdlong	local02, objptr
02040     01 06 66 F0 | 	shl	local02, #1
02044     D3 06 62 FC | 	wrlong	local02, objptr
02048                 | '   putpixel:=p8
02048     6C A6 05 F1 | 	add	objptr, #108
0204c     D3 06 02 FB | 	rdlong	local02, objptr
02050     10 A6 85 F1 | 	sub	objptr, #16
02054     D3 06 62 FC | 	wrlong	local02, objptr
02058                 | '   palette_ptr:=@ataripalette
02058     0E 00 00 FF 
0205c     58 AA 05 F1 | 	add	ptr__dat__, ##7256
02060     C0 A6 85 F1 | 	sub	objptr, #192
02064     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
02068     18 A6 85 F1 | 	sub	objptr, #24
0206c     0E 00 00 FF 
02070     58 AA 85 F1 | 	sub	ptr__dat__, ##7256
02074                 | LR__0079
02074                 | ' 
02074                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02074     02 07 02 F6 | 	mov	local02, local01
02078     01 00 00 FF 
0207c     30 06 06 F5 | 	and	local02, ##560
02080     01 00 00 FF 
02084     10 06 0E F2 | 	cmp	local02, ##528 wz
02088     44 00 90 5D |  if_ne	jmp	#LR__0080
0208c                 | '   timings[5]:=16
0208c     64 A6 05 F1 | 	add	objptr, #100
02090     D3 20 68 FC | 	wrlong	#16, objptr
02094                 | '   timings[11]:=timings[11]>>1
02094     18 A6 05 F1 | 	add	objptr, #24
02098     D3 06 02 FB | 	rdlong	local02, objptr
0209c     01 06 46 F0 | 	shr	local02, #1
020a0     D3 06 62 FC | 	wrlong	local02, objptr
020a4                 | '   putpixel:=p2
020a4     64 A6 05 F1 | 	add	objptr, #100
020a8     D3 06 02 FB | 	rdlong	local02, objptr
020ac     08 A6 85 F1 | 	sub	objptr, #8
020b0     D3 06 62 FC | 	wrlong	local02, objptr
020b4                 | '   palette_ptr:=@fourcolors
020b4     0E 00 00 FF 
020b8     08 AA 05 F1 | 	add	ptr__dat__, ##7176
020bc     C0 A6 85 F1 | 	sub	objptr, #192
020c0     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
020c4     18 A6 85 F1 | 	sub	objptr, #24
020c8     0E 00 00 FF 
020cc     08 AA 85 F1 | 	sub	ptr__dat__, ##7176
020d0                 | LR__0080
020d0                 | ' 
020d0                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
020d0     02 07 02 F6 | 	mov	local02, local01
020d4     01 00 00 FF 
020d8     30 06 06 F5 | 	and	local02, ##560
020dc     01 00 00 FF 
020e0     00 06 0E F2 | 	cmp	local02, ##512 wz
020e4     44 00 90 5D |  if_ne	jmp	#LR__0081
020e8                 | '   timings[5]:=32
020e8     64 A6 05 F1 | 	add	objptr, #100
020ec     D3 40 68 FC | 	wrlong	#32, objptr
020f0                 | '   timings[11]:=timings[11]>>2
020f0     18 A6 05 F1 | 	add	objptr, #24
020f4     D3 06 02 FB | 	rdlong	local02, objptr
020f8     02 06 46 F0 | 	shr	local02, #2
020fc     D3 06 62 FC | 	wrlong	local02, objptr
02100                 | '   putpixel:=p1
02100     60 A6 05 F1 | 	add	objptr, #96
02104     D3 06 02 FB | 	rdlong	local02, objptr
02108     04 A6 85 F1 | 	sub	objptr, #4
0210c     D3 06 62 FC | 	wrlong	local02, objptr
02110                 | '   palette_ptr:=@twocolors
02110     0E 00 00 FF 
02114     00 AA 05 F1 | 	add	ptr__dat__, ##7168
02118     C0 A6 85 F1 | 	sub	objptr, #192
0211c     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
02120     18 A6 85 F1 | 	sub	objptr, #24
02124     0E 00 00 FF 
02128     00 AA 85 F1 | 	sub	ptr__dat__, ##7168
0212c                 | LR__0081
0212c                 | ' 
0212c                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
0212c     02 07 02 F6 | 	mov	local02, local01
02130     01 00 00 FF 
02134     30 06 06 F5 | 	and	local02, ##560
02138     01 00 00 FF 
0213c     20 06 0E F2 | 	cmp	local02, ##544 wz
02140     2C 00 90 5D |  if_ne	jmp	#LR__0082
02144                 | '   putpixel:=p4
02144     E4 A6 05 F1 | 	add	objptr, #228
02148     D3 06 02 FB | 	rdlong	local02, objptr
0214c     0C A6 85 F1 | 	sub	objptr, #12
02150     D3 06 62 FC | 	wrlong	local02, objptr
02154                 | '   palette_ptr:=@vga16
02154     0E 00 00 FF 
02158     18 AA 05 F1 | 	add	ptr__dat__, ##7192
0215c     C0 A6 85 F1 | 	sub	objptr, #192
02160     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
02164     18 A6 85 F1 | 	sub	objptr, #24
02168     0E 00 00 FF 
0216c     18 AA 85 F1 | 	sub	ptr__dat__, ##7192
02170                 | LR__0082
02170                 | ' 
02170                 | ' repeat i from 0 to 4
02170     00 10 06 F6 | 	mov	local07, #0
02174     E4 DE 9F FE | 	loc	pa,	#(@LR__0084-@LR__0083)
02178     93 00 A0 FD | 	call	#FCACHE_LOAD_
0217c                 | LR__0083
0217c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
0217c     08 0B 02 F6 | 	mov	local04, local07
02180     02 0A 66 F0 | 	shl	local04, #2
02184     50 A6 05 F1 | 	add	objptr, #80
02188     D3 0C 02 F6 | 	mov	local05, objptr
0218c     D3 0A 02 F1 | 	add	local04, objptr
02190     2C A6 85 F1 | 	sub	objptr, #44
02194     D3 12 02 FB | 	rdlong	local08, objptr
02198     09 0F 02 F6 | 	mov	local06, local08
0219c     11 0E 66 F0 | 	shl	local06, #17
021a0     05 07 02 FB | 	rdlong	local02, local04
021a4     07 07 02 F1 | 	add	local02, local06
021a8     80 40 38 FF 
021ac     00 06 06 F1 | 	add	local02, ##1887502336
021b0     08 15 02 F6 | 	mov	local09, local07
021b4     02 14 66 F0 | 	shl	local09, #2
021b8     2C A6 05 F1 | 	add	objptr, #44
021bc     D3 16 02 F6 | 	mov	local10, objptr
021c0     D3 14 02 F1 | 	add	local09, objptr
021c4     0A 07 62 FC | 	wrlong	local02, local09
021c8     01 10 06 F1 | 	add	local07, #1
021cc     05 10 5E F2 | 	cmps	local07, #5 wcz
021d0     50 A6 85 F1 | 	sub	objptr, #80
021d4     A4 FF 9F CD |  if_b	jmp	#LR__0083
021d8                 | LR__0084
021d8                 | ' timings[5]:=timings[5]+hdmibase<<17
021d8     24 A6 05 F1 | 	add	objptr, #36
021dc     D3 0A 02 FB | 	rdlong	local04, objptr
021e0     11 0A 66 F0 | 	shl	local04, #17
021e4     40 A6 05 F1 | 	add	objptr, #64
021e8     D3 0E 02 FB | 	rdlong	local06, objptr
021ec     07 07 02 F6 | 	mov	local02, local06
021f0     05 07 02 F1 | 	add	local02, local04
021f4     D3 06 62 FC | 	wrlong	local02, objptr
021f8                 | ' clkfreq:=timings[13]
021f8     20 A6 05 F1 | 	add	objptr, #32
021fc     D3 06 02 FB | 	rdlong	local02, objptr
02200     14 06 66 FC | 	wrlong	local02, #20
02204                 | ' hubset(timings[14])
02204     04 A6 05 F1 | 	add	objptr, #4
02208     D3 FA 01 FB | 	rdlong	arg01, objptr
0220c     88 A6 85 F1 | 	sub	objptr, #136
02210     00 FA 61 FD | 	hubset	arg01
02214                 | ' waitms(1)
02214     01 FA 05 F6 | 	mov	arg01, #1
02218     1C 0A B0 FD | 	call	#__system___waitms
0221c                 | ' 
0221c                 | ' 
0221c                 | ' xzoom:=1<<(mode & 3)
0221c     02 0B 02 F6 | 	mov	local04, local01
02220     03 0A 06 F5 | 	and	local04, #3
02224     05 07 C2 F9 | 	decod	local02, local04
02228     CC A6 05 F1 | 	add	objptr, #204
0222c     D3 06 62 FC | 	wrlong	local02, objptr
02230                 | ' 
02230                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02230     03 0B 02 F6 | 	mov	local04, local02
02234     CC A6 85 F1 | 	sub	objptr, #204
02238     08 0A 0E F2 | 	cmp	local04, #8 wz
0223c     24 00 90 5D |  if_ne	jmp	#LR__0085
02240     02 0D 02 F6 | 	mov	local05, local01
02244     04 0C 46 F0 | 	shr	local05, #4
02248     03 0C 06 F5 | 	and	local05, #3
0224c     03 0C 0E F2 | 	cmp	local05, #3 wz
02250     10 00 90 AD |  if_e	jmp	#LR__0085
02254                 | '   xzoom:=4
02254     04 06 06 F6 | 	mov	local02, #4
02258     CC A6 05 F1 | 	add	objptr, #204
0225c     D3 08 68 FC | 	wrlong	#4, objptr
02260     CC A6 85 F1 | 	sub	objptr, #204
02264                 | LR__0085
02264                 | ' 
02264                 | ' yzoom:=1<<((mode>>2) & 3)
02264     02 0B 02 F6 | 	mov	local04, local01
02268     02 0A 46 F0 | 	shr	local04, #2
0226c     03 0A 06 F5 | 	and	local04, #3
02270     05 07 C2 F9 | 	decod	local02, local04
02274     D0 A6 05 F1 | 	add	objptr, #208
02278     D3 06 62 FC | 	wrlong	local02, objptr
0227c                 | ' azoom:=xzoom*yzoom
0227c     04 A6 85 F1 | 	sub	objptr, #4
02280     D3 0A 02 FB | 	rdlong	local04, objptr
02284     04 A6 05 F1 | 	add	objptr, #4
02288     D3 0E 02 FB | 	rdlong	local06, objptr
0228c     07 0B 02 FD | 	qmul	local04, local06
02290     18 06 62 FD | 	getqx	local02
02294     04 A6 05 F1 | 	add	objptr, #4
02298     D3 06 62 FC | 	wrlong	local02, objptr
0229c                 | ' 
0229c                 | ' cpl:=timings[11]
0229c     58 A6 85 F1 | 	sub	objptr, #88
022a0     D3 06 02 FB | 	rdlong	local02, objptr
022a4     14 A6 05 F1 | 	add	objptr, #20
022a8     D3 06 62 FC | 	wrlong	local02, objptr
022ac     90 A6 85 F1 | 	sub	objptr, #144
022b0                 | ' if (mode<512)
022b0     01 00 00 FF 
022b4     00 04 5E F2 | 	cmps	local01, ##512 wcz
022b8     60 00 90 3D |  if_ae	jmp	#LR__0086
022bc                 | '   lines:=(timings[12]>>4)+/yzoom
022bc     80 A6 05 F1 | 	add	objptr, #128
022c0     D3 28 02 FB | 	rdlong	muldiva_, objptr
022c4     04 28 46 F0 | 	shr	muldiva_, #4
022c8     50 A6 05 F1 | 	add	objptr, #80
022cc     D3 2A 02 FB | 	rdlong	muldivb_, objptr
022d0     D0 A6 85 F1 | 	sub	objptr, #208
022d4     C2 00 A0 FD | 	call	#unsdivide_
022d8     94 A6 05 F1 | 	add	objptr, #148
022dc     D3 2A 62 FC | 	wrlong	muldivb_, objptr
022e0                 | '   if ((timings[12]>>4)+//yzoom) <>0
022e0     14 A6 85 F1 | 	sub	objptr, #20
022e4     D3 28 02 FB | 	rdlong	muldiva_, objptr
022e8     04 28 46 F0 | 	shr	muldiva_, #4
022ec     50 A6 05 F1 | 	add	objptr, #80
022f0     D3 2A 02 FB | 	rdlong	muldivb_, objptr
022f4     D0 A6 85 F1 | 	sub	objptr, #208
022f8     C2 00 A0 FD | 	call	#unsdivide_
022fc     00 28 0E F2 | 	cmp	muldiva_, #0 wz
02300     AC 00 90 AD |  if_e	jmp	#LR__0089
02304                 | '     lines +=1
02304     94 A6 05 F1 | 	add	objptr, #148
02308     D3 06 02 FB | 	rdlong	local02, objptr
0230c     01 06 06 F1 | 	add	local02, #1
02310     D3 06 62 FC | 	wrlong	local02, objptr
02314     94 A6 85 F1 | 	sub	objptr, #148
02318                 | ' 
02318                 | ' else
02318     94 00 90 FD | 	jmp	#LR__0089
0231c                 | LR__0086
0231c                 | '   lines:=timings[12]/yzoom
0231c     80 A6 05 F1 | 	add	objptr, #128
02320     D3 28 02 FB | 	rdlong	muldiva_, objptr
02324     50 A6 05 F1 | 	add	objptr, #80
02328     D3 2A 02 FB | 	rdlong	muldivb_, objptr
0232c     D0 A6 85 F1 | 	sub	objptr, #208
02330     C6 00 A0 FD | 	call	#divide_
02334     94 A6 05 F1 | 	add	objptr, #148
02338     D3 2A 62 FC | 	wrlong	muldivb_, objptr
0233c                 | '   if cpl//xzoom==0
0233c     04 A6 85 F1 | 	sub	objptr, #4
02340     D3 28 02 FB | 	rdlong	muldiva_, objptr
02344     3C A6 05 F1 | 	add	objptr, #60
02348     D3 2A 02 FB | 	rdlong	muldivb_, objptr
0234c     CC A6 85 F1 | 	sub	objptr, #204
02350     C6 00 A0 FD | 	call	#divide_
02354     00 28 0E F2 | 	cmp	muldiva_, #0 wz
02358     28 00 90 5D |  if_ne	jmp	#LR__0087
0235c                 | '     cpl:=cpl/xzoom
0235c     90 A6 05 F1 | 	add	objptr, #144
02360     D3 28 02 FB | 	rdlong	muldiva_, objptr
02364     3C A6 05 F1 | 	add	objptr, #60
02368     D3 2A 02 FB | 	rdlong	muldivb_, objptr
0236c     CC A6 85 F1 | 	sub	objptr, #204
02370     C6 00 A0 FD | 	call	#divide_
02374     90 A6 05 F1 | 	add	objptr, #144
02378     D3 2A 62 FC | 	wrlong	muldivb_, objptr
0237c     90 A6 85 F1 | 	sub	objptr, #144
02380                 | '   else
02380     2C 00 90 FD | 	jmp	#LR__0088
02384                 | LR__0087
02384                 | '     cpl:=cpl/xzoom+1
02384     90 A6 05 F1 | 	add	objptr, #144
02388     D3 28 02 FB | 	rdlong	muldiva_, objptr
0238c     3C A6 05 F1 | 	add	objptr, #60
02390     D3 2A 02 FB | 	rdlong	muldivb_, objptr
02394     CC A6 85 F1 | 	sub	objptr, #204
02398     C6 00 A0 FD | 	call	#divide_
0239c     15 07 02 F6 | 	mov	local02, muldivb_
023a0     01 06 06 F1 | 	add	local02, #1
023a4     90 A6 05 F1 | 	add	objptr, #144
023a8     D3 06 62 FC | 	wrlong	local02, objptr
023ac     90 A6 85 F1 | 	sub	objptr, #144
023b0                 | LR__0088
023b0                 | LR__0089
023b0                 | ' 
023b0                 | ' buflen:=(cpl*lines)
023b0     90 A6 05 F1 | 	add	objptr, #144
023b4     D3 0A 02 FB | 	rdlong	local04, objptr
023b8     04 A6 05 F1 | 	add	objptr, #4
023bc     D3 0E 02 FB | 	rdlong	local06, objptr
023c0     07 0B 02 FD | 	qmul	local04, local06
023c4     18 06 62 FD | 	getqx	local02
023c8     64 A6 85 F1 | 	sub	objptr, #100
023cc     D3 06 62 FC | 	wrlong	local02, objptr
023d0                 | ' buf_ptr:=$80000-4*buflen
023d0     03 0B 02 F6 | 	mov	local04, local02
023d4     30 A6 85 F1 | 	sub	objptr, #48
023d8     02 0A 66 F0 | 	shl	local04, #2
023dc     13 06 C6 F9 | 	decod	local02, #19
023e0     05 07 82 F1 | 	sub	local02, local04
023e4     D3 06 62 FC | 	wrlong	local02, objptr
023e8                 | ' mode_ptr:=@timings
023e8     50 A6 05 F1 | 	add	objptr, #80
023ec     D3 06 02 F6 | 	mov	local02, objptr
023f0     3C A6 85 F1 | 	sub	objptr, #60
023f4     D3 06 62 FC | 	wrlong	local02, objptr
023f8                 | ' graphmode:=mode
023f8     B0 A6 05 F1 | 	add	objptr, #176
023fc     D3 04 62 FC | 	wrlong	local01, objptr
02400     C4 A6 85 F1 | 	sub	objptr, #196
02404                 | ' makedl(mode)
02404     02 FB 01 F6 | 	mov	arg01, local01
02408     0C 00 B0 FD | 	call	#_makedl
0240c                 | LR__0090
0240c     AF F0 03 F6 | 	mov	ptra, fp
02410     BA 00 A0 FD | 	call	#popregs_
02414                 | _setmode_ret
02414     2D 00 64 FD | 	ret
02418                 | 
02418                 | ' 
02418                 | ' 
02418                 | ' 
02418                 | ' 
02418                 | ' '---------- Make a display list
02418                 | ' 
02418                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
02418                 | _makedl
02418                 | ' 
02418                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02418                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02418                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02418                 | ' 
02418                 | ' '   0 - display a up/down border line
02418                 | ' 
02418                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02418                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02418                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02418                 | ' '    nnnn - font line to display, 0..15
02418                 | ' '    llllll - character line, determines the cursor Y position
02418                 | ' 
02418                 | ' 
02418                 | ' if (mode &256==0)
02418     00 FB CD F7 | 	test	arg01, #256 wz
0241c     1C 00 90 5D |  if_ne	jmp	#LR__0091
02420                 | '   dl_ptr:=buf_ptr-4*576
02420     D3 BA 01 FB | 	rdlong	_var01, objptr
02424     04 00 00 FF 
02428     00 BB 85 F1 | 	sub	_var01, ##2304
0242c     1C A6 05 F1 | 	add	objptr, #28
02430     D3 BA 61 FC | 	wrlong	_var01, objptr
02434     1C A6 85 F1 | 	sub	objptr, #28
02438                 | ' else
02438     18 00 90 FD | 	jmp	#LR__0092
0243c                 | LR__0091
0243c                 | '   dl_ptr:=buf_ptr-4*496
0243c     D3 BA 01 FB | 	rdlong	_var01, objptr
02440     03 00 00 FF 
02444     C0 BB 85 F1 | 	sub	_var01, ##1984
02448     1C A6 05 F1 | 	add	objptr, #28
0244c     D3 BA 61 FC | 	wrlong	_var01, objptr
02450     1C A6 85 F1 | 	sub	objptr, #28
02454                 | LR__0092
02454                 | '  ' dl_ptr:=buf_ptr-4*540
02454                 | ' 
02454                 | ' vzoom:=((mode>>2) & 3)
02454     FD BC 01 F6 | 	mov	_var02, arg01
02458     02 BC 45 F0 | 	shr	_var02, #2
0245c     03 BC 05 F5 | 	and	_var02, #3
02460                 | ' 
02460                 | ' 
02460                 | ' if mode<512 '' text modes
02460     01 00 00 FF 
02464     00 FA 5D F2 | 	cmps	arg01, ##512 wcz
02468     E8 01 90 3D |  if_ae	jmp	#LR__0100
0246c                 | ' 
0246c                 | '   if timings[6]>0 'borders
0246c     68 A6 05 F1 | 	add	objptr, #104
02470     D3 BA 01 FB | 	rdlong	_var01, objptr
02474     68 A6 85 F1 | 	sub	objptr, #104
02478     00 BA 5D F2 | 	cmps	_var01, #0 wcz
0247c     D4 00 90 ED |  if_be	jmp	#LR__0097
02480                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02480     00 BE 05 F6 | 	mov	_var03, #0
02484     68 A6 05 F1 | 	add	objptr, #104
02488     D3 C0 01 FB | 	rdlong	_var04, objptr
0248c     68 A6 85 F1 | 	sub	objptr, #104
02490     01 C0 85 F1 | 	sub	_var04, #1
02494     00 C0 5D F2 | 	cmps	_var04, #0 wcz
02498     01 C2 05 16 |  if_a	mov	_var05, #1
0249c     01 C2 65 E6 |  if_be	neg	_var05, #1
024a0     E1 C4 01 F6 | 	mov	_var06, _var05
024a4     E1 C0 01 F1 | 	add	_var04, _var05
024a8     7C DB 9F FE | 	loc	pa,	#(@LR__0094-@LR__0093)
024ac     93 00 A0 FD | 	call	#FCACHE_LOAD_
024b0                 | LR__0093
024b0                 | '       long[dl_ptr+4*i]:=$0
024b0     1C A6 05 F1 | 	add	objptr, #28
024b4     D3 C6 01 FB | 	rdlong	_var07, objptr
024b8     1C A6 85 F1 | 	sub	objptr, #28
024bc     DF C8 01 F6 | 	mov	_var08, _var03
024c0     02 C8 65 F0 | 	shl	_var08, #2
024c4     E4 C6 01 F1 | 	add	_var07, _var08
024c8     E3 00 68 FC | 	wrlong	#0, _var07
024cc     E2 BE 01 F1 | 	add	_var03, _var06
024d0     E0 BE 09 F2 | 	cmp	_var03, _var04 wz
024d4     D8 FF 9F 5D |  if_ne	jmp	#LR__0093
024d8                 | LR__0094
024d8                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
024d8     68 A6 05 F1 | 	add	objptr, #104
024dc     D3 BE 01 FB | 	rdlong	_var03, objptr
024e0     18 A6 05 F1 | 	add	objptr, #24
024e4     D3 C2 01 FB | 	rdlong	_var05, objptr
024e8     E1 BE 01 F1 | 	add	_var03, _var05
024ec     0C A6 05 F1 | 	add	objptr, #12
024f0     D3 CA 01 FB | 	rdlong	_var09, objptr
024f4     01 CA 85 F1 | 	sub	_var09, #1
024f8     24 A6 85 F1 | 	sub	objptr, #36
024fc     D3 CC 01 FB | 	rdlong	_var10, objptr
02500     18 A6 05 F1 | 	add	objptr, #24
02504     D3 CE 01 FB | 	rdlong	_var11, objptr
02508     80 A6 85 F1 | 	sub	objptr, #128
0250c     E7 CC 01 F1 | 	add	_var10, _var11
02510     E6 CA 59 F2 | 	cmps	_var09, _var10 wcz
02514     01 C8 05 16 |  if_a	mov	_var08, #1
02518     01 C8 65 E6 |  if_be	neg	_var08, #1
0251c     E4 D0 01 F6 | 	mov	_var12, _var08
02520     E4 CA 01 F1 | 	add	_var09, _var08
02524     00 DB 9F FE | 	loc	pa,	#(@LR__0096-@LR__0095)
02528     93 00 A0 FD | 	call	#FCACHE_LOAD_
0252c                 | LR__0095
0252c                 | '       long[dl_ptr+4*i]:=$0
0252c     1C A6 05 F1 | 	add	objptr, #28
02530     D3 D2 01 FB | 	rdlong	_var13, objptr
02534     1C A6 85 F1 | 	sub	objptr, #28
02538     DF D4 01 F6 | 	mov	_var14, _var03
0253c     02 D4 65 F0 | 	shl	_var14, #2
02540     EA D2 01 F1 | 	add	_var13, _var14
02544     E9 00 68 FC | 	wrlong	#0, _var13
02548     E8 BE 01 F1 | 	add	_var03, _var12
0254c     E5 BE 09 F2 | 	cmp	_var03, _var09 wz
02550     D8 FF 9F 5D |  if_ne	jmp	#LR__0095
02554                 | LR__0096
02554                 | LR__0097
02554                 | '   lpc:=16<<vzoom
02554     10 D6 05 F6 | 	mov	_var15, #16
02558     DE D6 61 F0 | 	shl	_var15, _var02
0255c                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
0255c     68 A6 05 F1 | 	add	objptr, #104
02560     D3 BE 01 FB | 	rdlong	_var03, objptr
02564     DF D8 01 F6 | 	mov	_var16, _var03
02568     18 A6 05 F1 | 	add	objptr, #24
0256c     D3 DA 01 FB | 	rdlong	_var17, objptr
02570     ED D8 01 F1 | 	add	_var16, _var17
02574     01 D8 85 F1 | 	sub	_var16, #1
02578     18 A6 85 F1 | 	sub	objptr, #24
0257c     D3 C8 01 FB | 	rdlong	_var08, objptr
02580     68 A6 85 F1 | 	sub	objptr, #104
02584     E4 D8 59 F2 | 	cmps	_var16, _var08 wcz
02588     01 DC 05 16 |  if_a	mov	_var18, #1
0258c     01 DC 65 E6 |  if_be	neg	_var18, #1
02590     EE DE 01 F6 | 	mov	_var19, _var18
02594     EE D8 01 F1 | 	add	_var16, _var18
02598     18 DB 9F FE | 	loc	pa,	#(@LR__0099-@LR__0098)
0259c     93 00 A0 FD | 	call	#FCACHE_LOAD_
025a0                 | LR__0098
025a0                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
025a0     DF 28 02 F6 | 	mov	muldiva_, _var03
025a4     68 A6 05 F1 | 	add	objptr, #104
025a8     D3 E0 01 FB | 	rdlong	_var20, objptr
025ac     68 A6 85 F1 | 	sub	objptr, #104
025b0     F0 28 82 F1 | 	sub	muldiva_, _var20
025b4     EB 2A 02 F6 | 	mov	muldivb_, _var15
025b8     C2 00 A0 FD | 	call	#unsdivide_
025bc     DE 28 42 F0 | 	shr	muldiva_, _var02
025c0     14 E3 01 F6 | 	mov	_var21, muldiva_
025c4                 | '     charline:=(i-timings[6])+/lpc
025c4     DF 28 02 F6 | 	mov	muldiva_, _var03
025c8     68 A6 05 F1 | 	add	objptr, #104
025cc     D3 E4 01 FB | 	rdlong	_var22, objptr
025d0     68 A6 85 F1 | 	sub	objptr, #104
025d4     F2 28 82 F1 | 	sub	muldiva_, _var22
025d8     EB 2A 02 F6 | 	mov	muldivb_, _var15
025dc     C2 00 A0 FD | 	call	#unsdivide_
025e0     15 E7 01 F6 | 	mov	_var23, muldivb_
025e4                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
025e4     D3 CE 01 FB | 	rdlong	_var11, objptr
025e8     90 A6 05 F1 | 	add	objptr, #144
025ec     D3 E0 01 FB | 	rdlong	_var20, objptr
025f0     F3 E0 01 FD | 	qmul	_var20, _var23
025f4     18 E8 61 FD | 	getqx	_var24
025f8     02 E8 65 F0 | 	shl	_var24, #2
025fc     F4 CE 01 F1 | 	add	_var11, _var24
02600     FD D4 01 F6 | 	mov	_var14, arg01
02604     03 D4 05 F5 | 	and	_var14, #3
02608     EA CE 01 F1 | 	add	_var11, _var14
0260c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
0260c     0C CE 65 F0 | 	shl	_var11, #12
02610     F1 E4 01 F6 | 	mov	_var22, _var21
02614     08 E4 65 F0 | 	shl	_var22, #8
02618     F2 CE 01 F1 | 	add	_var11, _var22
0261c     F3 E0 01 F6 | 	mov	_var20, _var23
02620     02 E0 65 F0 | 	shl	_var20, #2
02624     F0 CE 01 F1 | 	add	_var11, _var20
02628     01 CE 05 F1 | 	add	_var11, #1
0262c     74 A6 85 F1 | 	sub	objptr, #116
02630     D3 D2 01 FB | 	rdlong	_var13, objptr
02634     1C A6 85 F1 | 	sub	objptr, #28
02638     DF D4 01 F6 | 	mov	_var14, _var03
0263c     02 D4 65 F0 | 	shl	_var14, #2
02640     EA D2 01 F1 | 	add	_var13, _var14
02644     E9 CE 61 FC | 	wrlong	_var11, _var13
02648     EF BE 01 F1 | 	add	_var03, _var19
0264c     EC BE 09 F2 | 	cmp	_var03, _var16 wz
02650     4C FF 9F 5D |  if_ne	jmp	#LR__0098
02654                 | LR__0099
02654                 | LR__0100
02654                 | ' 
02654                 | ' 
02654                 | ' 
02654                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
02654     01 00 00 FF 
02658     00 FA 5D F2 | 	cmps	arg01, ##512 wcz
0265c     A8 01 90 CD |  if_b	jmp	#LR__0108
02660                 | ' 
02660                 | '   if timings[6]>0 'borders
02660     68 A6 05 F1 | 	add	objptr, #104
02664     D3 BA 01 FB | 	rdlong	_var01, objptr
02668     68 A6 85 F1 | 	sub	objptr, #104
0266c     00 BA 5D F2 | 	cmps	_var01, #0 wcz
02670     D4 00 90 ED |  if_be	jmp	#LR__0105
02674                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02674     00 BE 05 F6 | 	mov	_var03, #0
02678     68 A6 05 F1 | 	add	objptr, #104
0267c     D3 EA 01 FB | 	rdlong	_var25, objptr
02680     68 A6 85 F1 | 	sub	objptr, #104
02684     01 EA 85 F1 | 	sub	_var25, #1
02688     00 EA 5D F2 | 	cmps	_var25, #0 wcz
0268c     01 C2 05 16 |  if_a	mov	_var05, #1
02690     01 C2 65 E6 |  if_be	neg	_var05, #1
02694     E1 EC 01 F6 | 	mov	_var26, _var05
02698     E1 EA 01 F1 | 	add	_var25, _var05
0269c     88 D9 9F FE | 	loc	pa,	#(@LR__0102-@LR__0101)
026a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
026a4                 | LR__0101
026a4                 | '       long[dl_ptr+4*i]:=$0
026a4     1C A6 05 F1 | 	add	objptr, #28
026a8     D3 C6 01 FB | 	rdlong	_var07, objptr
026ac     1C A6 85 F1 | 	sub	objptr, #28
026b0     DF C8 01 F6 | 	mov	_var08, _var03
026b4     02 C8 65 F0 | 	shl	_var08, #2
026b8     E4 C6 01 F1 | 	add	_var07, _var08
026bc     E3 00 68 FC | 	wrlong	#0, _var07
026c0     F6 BE 01 F1 | 	add	_var03, _var26
026c4     F5 BE 09 F2 | 	cmp	_var03, _var25 wz
026c8     D8 FF 9F 5D |  if_ne	jmp	#LR__0101
026cc                 | LR__0102
026cc                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
026cc     68 A6 05 F1 | 	add	objptr, #104
026d0     D3 BE 01 FB | 	rdlong	_var03, objptr
026d4     18 A6 05 F1 | 	add	objptr, #24
026d8     D3 C2 01 FB | 	rdlong	_var05, objptr
026dc     E1 BE 01 F1 | 	add	_var03, _var05
026e0     0C A6 05 F1 | 	add	objptr, #12
026e4     D3 EE 01 FB | 	rdlong	_var27, objptr
026e8     01 EE 85 F1 | 	sub	_var27, #1
026ec     24 A6 85 F1 | 	sub	objptr, #36
026f0     D3 CC 01 FB | 	rdlong	_var10, objptr
026f4     18 A6 05 F1 | 	add	objptr, #24
026f8     D3 CE 01 FB | 	rdlong	_var11, objptr
026fc     80 A6 85 F1 | 	sub	objptr, #128
02700     E7 CC 01 F1 | 	add	_var10, _var11
02704     E6 EE 59 F2 | 	cmps	_var27, _var10 wcz
02708     01 C8 05 16 |  if_a	mov	_var08, #1
0270c     01 C8 65 E6 |  if_be	neg	_var08, #1
02710     E4 F0 01 F6 | 	mov	_var28, _var08
02714     E4 EE 01 F1 | 	add	_var27, _var08
02718     0C D9 9F FE | 	loc	pa,	#(@LR__0104-@LR__0103)
0271c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02720                 | LR__0103
02720                 | '       long[dl_ptr+4*i]:=$0
02720     1C A6 05 F1 | 	add	objptr, #28
02724     D3 D2 01 FB | 	rdlong	_var13, objptr
02728     1C A6 85 F1 | 	sub	objptr, #28
0272c     DF D4 01 F6 | 	mov	_var14, _var03
02730     02 D4 65 F0 | 	shl	_var14, #2
02734     EA D2 01 F1 | 	add	_var13, _var14
02738     E9 00 68 FC | 	wrlong	#0, _var13
0273c     F8 BE 01 F1 | 	add	_var03, _var28
02740     F7 BE 09 F2 | 	cmp	_var03, _var27 wz
02744     D8 FF 9F 5D |  if_ne	jmp	#LR__0103
02748                 | LR__0104
02748                 | LR__0105
02748                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02748     68 A6 05 F1 | 	add	objptr, #104
0274c     D3 BE 01 FB | 	rdlong	_var03, objptr
02750     DF F2 01 F6 | 	mov	_var29, _var03
02754     18 A6 05 F1 | 	add	objptr, #24
02758     D3 DA 01 FB | 	rdlong	_var17, objptr
0275c     ED F2 01 F1 | 	add	_var29, _var17
02760     01 F2 85 F1 | 	sub	_var29, #1
02764     18 A6 85 F1 | 	sub	objptr, #24
02768     D3 C8 01 FB | 	rdlong	_var08, objptr
0276c     68 A6 85 F1 | 	sub	objptr, #104
02770     E4 F2 59 F2 | 	cmps	_var29, _var08 wcz
02774     01 DC 05 16 |  if_a	mov	_var18, #1
02778     01 DC 65 E6 |  if_be	neg	_var18, #1
0277c     EE F4 01 F6 | 	mov	_var30, _var18
02780     EE F2 01 F1 | 	add	_var29, _var18
02784     F4 D8 9F FE | 	loc	pa,	#(@LR__0107-@LR__0106)
02788     93 00 A0 FD | 	call	#FCACHE_LOAD_
0278c                 | LR__0106
0278c                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
0278c     D3 CE 01 FB | 	rdlong	_var11, objptr
02790     DF E4 01 F6 | 	mov	_var22, _var03
02794     68 A6 05 F1 | 	add	objptr, #104
02798     D3 E0 01 FB | 	rdlong	_var20, objptr
0279c     F0 E4 81 F1 | 	sub	_var22, _var20
027a0     DE E4 41 F0 | 	shr	_var22, _var02
027a4     28 A6 05 F1 | 	add	objptr, #40
027a8     D3 D4 01 FB | 	rdlong	_var14, objptr
027ac     F2 D4 01 FD | 	qmul	_var14, _var22
027b0     18 F6 61 FD | 	getqx	_var31
027b4     02 F6 65 F0 | 	shl	_var31, #2
027b8     FB CE 01 F1 | 	add	_var11, _var31
027bc     FD F8 01 F6 | 	mov	_var32, arg01
027c0     03 F8 05 F5 | 	and	_var32, #3
027c4     FC CE 01 F1 | 	add	_var11, _var32
027c8                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
027c8     0C CE 65 F0 | 	shl	_var11, #12
027cc     02 CE 05 F1 | 	add	_var11, #2
027d0     FD E4 01 F6 | 	mov	_var22, arg01
027d4     30 E4 05 F5 | 	and	_var22, #48
027d8     02 E4 45 F0 | 	shr	_var22, #2
027dc     F2 CE 01 F1 | 	add	_var11, _var22
027e0     74 A6 85 F1 | 	sub	objptr, #116
027e4     D3 E0 01 FB | 	rdlong	_var20, objptr
027e8     1C A6 85 F1 | 	sub	objptr, #28
027ec     DF E8 01 F6 | 	mov	_var24, _var03
027f0     02 E8 65 F0 | 	shl	_var24, #2
027f4     F4 E0 01 F1 | 	add	_var20, _var24
027f8     F0 CE 61 FC | 	wrlong	_var11, _var20
027fc     FA BE 01 F1 | 	add	_var03, _var30
02800     F9 BE 09 F2 | 	cmp	_var03, _var29 wz
02804     84 FF 9F 5D |  if_ne	jmp	#LR__0106
02808                 | LR__0107
02808                 | LR__0108
02808                 | _makedl_ret
02808     2D 00 64 FD | 	ret
0280c                 | 
0280c                 | '       
0280c                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
0280c                 | ' 
0280c                 | ' pub start(mode,base):result
0280c                 | _start
0280c     02 5A 05 F6 | 	mov	COUNT_, #2
02810     B0 00 A0 FD | 	call	#pushregs_
02814     FD 04 02 F6 | 	mov	local01, arg01
02818                 | ' 
02818                 | ' ' initialize pointers and variables
02818                 | ' 
02818                 | ' border_ptr:=@bordercolor
02818     2C A6 05 F1 | 	add	objptr, #44
0281c     D3 06 02 F6 | 	mov	local02, objptr
02820     24 A6 85 F1 | 	sub	objptr, #36
02824     D3 06 62 FC | 	wrlong	local02, objptr
02828                 | ' font_ptr:=@a8_font
02828     0C 00 00 FF 
0282c     00 AA 05 F1 | 	add	ptr__dat__, ##6144
02830     04 A6 85 F1 | 	sub	objptr, #4
02834     D3 AA 61 FC | 	wrlong	ptr__dat__, objptr
02838                 | ' hdmibase:=base
02838     20 A6 05 F1 | 	add	objptr, #32
0283c     D3 FC 61 FC | 	wrlong	arg02, objptr
02840     24 A6 85 F1 | 	sub	objptr, #36
02844                 | ' p1:=@putpixel1
02844     D3 FA 01 F6 | 	mov	arg01, objptr
02848     D6 FC 01 F6 | 	mov	arg02, ptr__putpixel1_
0284c     0C 00 00 FF 
02850     00 AA 85 F1 | 	sub	ptr__dat__, ##6144
02854     1C 03 B0 FD | 	call	#__system___make_methodptr
02858     DC A6 05 F1 | 	add	objptr, #220
0285c     D3 B6 61 FC | 	wrlong	result1, objptr
02860     DC A6 85 F1 | 	sub	objptr, #220
02864                 | ' p2:=@putpixel2
02864     D3 FA 01 F6 | 	mov	arg01, objptr
02868     D7 FC 01 F6 | 	mov	arg02, ptr__putpixel2_
0286c     04 03 B0 FD | 	call	#__system___make_methodptr
02870     E0 A6 05 F1 | 	add	objptr, #224
02874     D3 B6 61 FC | 	wrlong	result1, objptr
02878     E0 A6 85 F1 | 	sub	objptr, #224
0287c                 | ' p4:=@putpixel4
0287c     D3 FA 01 F6 | 	mov	arg01, objptr
02880     D8 FC 01 F6 | 	mov	arg02, ptr__putpixel4_
02884     EC 02 B0 FD | 	call	#__system___make_methodptr
02888     E4 A6 05 F1 | 	add	objptr, #228
0288c     D3 B6 61 FC | 	wrlong	result1, objptr
02890     E4 A6 85 F1 | 	sub	objptr, #228
02894                 | ' p8:=@putpixel8
02894     D3 FA 01 F6 | 	mov	arg01, objptr
02898     D9 FC 01 F6 | 	mov	arg02, ptr__putpixel8_
0289c     D4 02 B0 FD | 	call	#__system___make_methodptr
028a0     E8 A6 05 F1 | 	add	objptr, #232
028a4     D3 B6 61 FC | 	wrlong	result1, objptr
028a8     E8 A6 85 F1 | 	sub	objptr, #232
028ac                 | ' 
028ac                 | ' 
028ac                 | ' ' the mode has to be set here to enable computing the buffer length
028ac                 | ' 
028ac                 | ' setmode(mode)
028ac     02 FB 01 F6 | 	mov	arg01, local01
028b0     80 F5 BF FD | 	call	#_setmode
028b4                 | ' 
028b4                 | ' vblank_ptr:=@vblank
028b4     40 A6 05 F1 | 	add	objptr, #64
028b8     D3 06 02 F6 | 	mov	local02, objptr
028bc     34 A6 85 F1 | 	sub	objptr, #52
028c0     D3 06 62 FC | 	wrlong	local02, objptr
028c4                 | ' cursor_ptr:=@cursor_x
028c4     28 A6 05 F1 | 	add	objptr, #40
028c8     D3 06 02 F6 | 	mov	local02, objptr
028cc     24 A6 85 F1 | 	sub	objptr, #36
028d0     D3 06 62 FC | 	wrlong	local02, objptr
028d4                 | ' 
028d4                 | ' fontnum_ptr:=@fontnum
028d4     88 A6 05 F1 | 	add	objptr, #136
028d8     D3 06 02 F6 | 	mov	local02, objptr
028dc     78 A6 85 F1 | 	sub	objptr, #120
028e0     D3 06 62 FC | 	wrlong	local02, objptr
028e4                 | ' 
028e4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
028e4     78 A6 05 F1 | 	add	objptr, #120
028e8     D3 00 68 FC | 	wrlong	#0, objptr
028ec                 | ' bytemove(@colors,@vgacolors,16)
028ec     1C A6 05 F1 | 	add	objptr, #28
028f0     D3 FA 01 F6 | 	mov	arg01, objptr
028f4     B4 A6 85 F1 | 	sub	objptr, #180
028f8     11 00 00 FF 
028fc     58 AA 05 F1 | 	add	ptr__dat__, ##8792
02900     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
02904     11 00 00 FF 
02908     58 AA 85 F1 | 	sub	ptr__dat__, ##8792
0290c     10 FE 05 F6 | 	mov	arg03, #16
02910     30 01 B0 FD | 	call	#__system____builtin_memmove
02914                 | ' 
02914                 | ' ' initialize a cursor
02914                 | ' 
02914                 | ' cursor_x:=0
02914     34 A6 05 F1 | 	add	objptr, #52
02918     D3 00 48 FC | 	wrbyte	#0, objptr
0291c                 | ' cursor_y:=0
0291c     01 A6 05 F1 | 	add	objptr, #1
02920     D3 00 48 FC | 	wrbyte	#0, objptr
02924                 | ' cursor_sh:=14
02924     01 A6 05 F1 | 	add	objptr, #1
02928     D3 1C 48 FC | 	wrbyte	#14, objptr
0292c     36 A6 85 F1 | 	sub	objptr, #54
02930                 | ' 
02930                 | ' 
02930                 | ' ' start the cog
02930                 | ' 
02930                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
02930     11 00 00 FF 
02934     68 AA 05 F1 | 	add	ptr__dat__, ##8808
02938     D5 FC 01 F6 | 	mov	arg02, ptr__dat__
0293c     11 00 00 FF 
02940     68 AA 85 F1 | 	sub	ptr__dat__, ##8808
02944     D3 FE 01 F6 | 	mov	arg03, objptr
02948     10 FA 05 F6 | 	mov	arg01, #16
0294c     28 FE 61 FD | 	setq	arg03
02950     FE FA F1 FC | 	coginit	arg01, arg02 wc
02954     01 FA 65 C6 |  if_b	neg	arg01, #1
02958     FD B6 01 F6 | 	mov	result1, arg01
0295c     28 A6 05 F1 | 	add	objptr, #40
02960     D3 B6 61 FC | 	wrlong	result1, objptr
02964     28 A6 85 F1 | 	sub	objptr, #40
02968                 | ' waitms(20)
02968     14 FA 05 F6 | 	mov	arg01, #20
0296c     C8 02 B0 FD | 	call	#__system___waitms
02970                 | ' 
02970                 | ' ' clear the screen and set the colors to green on black
02970                 | ' 
02970                 | ' cls(c_green,c_black)
02970     C7 FA 05 F6 | 	mov	arg01, #199
02974     00 FC 05 F6 | 	mov	arg02, #0
02978     6C F2 BF FD | 	call	#_cls
0297c                 | ' setbordercolor(0,0,128)
0297c     00 FA 05 F6 | 	mov	arg01, #0
02980     00 FC 05 F6 | 	mov	arg02, #0
02984     80 FE 05 F6 | 	mov	arg03, #128
02988     38 F2 BF FD | 	call	#_setbordercolor
0298c                 | ' setwritecolors(c_green,c_black)
0298c                 | ' 
0298c                 | ' 
0298c                 | ' write_color:=ff
0298c     38 A6 05 F1 | 	add	objptr, #56
02990     D3 8E 69 FC | 	wrlong	#199, objptr
02994                 | ' write_background:=bb
02994     04 A6 05 F1 | 	add	objptr, #4
02998     D3 00 68 FC | 	wrlong	#0, objptr
0299c                 | ' 
0299c                 | ' return cog
0299c     14 A6 85 F1 | 	sub	objptr, #20
029a0     D3 B6 01 FB | 	rdlong	result1, objptr
029a4     28 A6 85 F1 | 	sub	objptr, #40
029a8     AF F0 03 F6 | 	mov	ptra, fp
029ac     BA 00 A0 FD | 	call	#popregs_
029b0                 | _start_ret
029b0     2D 00 64 FD | 	ret
029b4                 | hubexit
029b4     81 00 80 FD | 	jmp	#cogexit
029b8                 | 
029b8                 | __system___setbaud
029b8     14 28 06 FB | 	rdlong	muldiva_, #20
029bc     FD 2A 02 F6 | 	mov	muldivb_, arg01
029c0     C6 00 A0 FD | 	call	#divide_
029c4     40 7C 64 FD | 	dirl	#62
029c8     40 7E 64 FD | 	dirl	#63
029cc     D4 2A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
029d0     10 2A 66 F0 | 	shl	muldivb_, #16
029d4     07 FC 05 F6 | 	mov	arg02, #7
029d8     15 FD 01 F1 | 	add	arg02, muldivb_
029dc     3E F8 0C FC | 	wrpin	#124, #62
029e0     3E FC 15 FC | 	wxpin	arg02, #62
029e4     3F 7C 0C FC | 	wrpin	#62, #63
029e8     14 FC 05 F1 | 	add	arg02, #20
029ec     3F FC 15 FC | 	wxpin	arg02, #63
029f0     41 7C 64 FD | 	dirh	#62
029f4     41 7E 64 FD | 	dirh	#63
029f8                 | __system___setbaud_ret
029f8     2D 00 64 FD | 	ret
029fc                 | 
029fc                 | __system___txraw
029fc     02 5A 05 F6 | 	mov	COUNT_, #2
02a00     B0 00 A0 FD | 	call	#pushregs_
02a04     FD 04 02 F6 | 	mov	local01, arg01
02a08     D4 06 0A FB | 	rdlong	local02, ptr___system__dat__ wz
02a0c     0C 00 90 5D |  if_ne	jmp	#LR__0109
02a10     08 07 00 FF 
02a14     00 FA 05 F6 | 	mov	arg01, ##921600
02a18     9C FF BF FD | 	call	#__system___setbaud
02a1c                 | LR__0109
02a1c     3E 04 26 FC | 	wypin	local01, #62
02a20     1F 02 64 FD | 	waitx	#1
02a24     E0 D5 9F FE | 	loc	pa,	#(@LR__0111-@LR__0110)
02a28     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a2c                 | LR__0110
02a2c     40 7C 74 FD | 	testp	#62 wc
02a30     F8 FF 9F 3D |  if_nc	jmp	#LR__0110
02a34                 | LR__0111
02a34     01 B6 05 F6 | 	mov	result1, #1
02a38     AF F0 03 F6 | 	mov	ptra, fp
02a3c     BA 00 A0 FD | 	call	#popregs_
02a40                 | __system___txraw_ret
02a40     2D 00 64 FD | 	ret
02a44                 | 
02a44                 | __system____builtin_memmove
02a44     FD BA 01 F6 | 	mov	_var01, arg01
02a48     FE FA 59 F2 | 	cmps	arg01, arg02 wcz
02a4c     50 00 90 3D |  if_ae	jmp	#LR__0119
02a50     CC D5 9F FE | 	loc	pa,	#(@LR__0113-@LR__0112)
02a54     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a58                 | LR__0112
02a58     03 FE 5D F2 | 	cmps	arg03, #3 wcz
02a5c     18 00 90 ED |  if_be	jmp	#LR__0114
02a60     FE BC 01 FB | 	rdlong	_var02, arg02
02a64     FD BC 61 FC | 	wrlong	_var02, arg01
02a68     04 FA 05 F1 | 	add	arg01, #4
02a6c     04 FC 05 F1 | 	add	arg02, #4
02a70     04 FE 85 F1 | 	sub	arg03, #4
02a74     E0 FF 9F FD | 	jmp	#LR__0112
02a78                 | LR__0113
02a78                 | LR__0114
02a78     FF BE 09 F6 | 	mov	_var03, arg03 wz
02a7c     4C 00 90 AD |  if_e	jmp	#LR__0125
02a80     90 D5 9F FE | 	loc	pa,	#(@LR__0117-@LR__0115)
02a84     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a88                 | LR__0115
02a88     DF 08 D8 FC | 	rep	@LR__0118, _var03
02a8c                 | LR__0116
02a8c     FE BC C1 FA | 	rdbyte	_var02, arg02
02a90     FD BC 41 FC | 	wrbyte	_var02, arg01
02a94     01 FA 05 F1 | 	add	arg01, #1
02a98     01 FC 05 F1 | 	add	arg02, #1
02a9c                 | LR__0117
02a9c                 | LR__0118
02a9c     2C 00 90 FD | 	jmp	#LR__0125
02aa0                 | LR__0119
02aa0     FF FA 01 F1 | 	add	arg01, arg03
02aa4     FF FC 01 F1 | 	add	arg02, arg03
02aa8     FF C0 09 F6 | 	mov	_var04, arg03 wz
02aac     1C 00 90 AD |  if_e	jmp	#LR__0124
02ab0     60 D5 9F FE | 	loc	pa,	#(@LR__0122-@LR__0120)
02ab4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02ab8                 | LR__0120
02ab8     E0 08 D8 FC | 	rep	@LR__0123, _var04
02abc                 | LR__0121
02abc     01 FA 85 F1 | 	sub	arg01, #1
02ac0     01 FC 85 F1 | 	sub	arg02, #1
02ac4     FE BC C1 FA | 	rdbyte	_var02, arg02
02ac8     FD BC 41 FC | 	wrbyte	_var02, arg01
02acc                 | LR__0122
02acc                 | LR__0123
02acc                 | LR__0124
02acc                 | LR__0125
02acc     DD B6 01 F6 | 	mov	result1, _var01
02ad0                 | __system____builtin_memmove_ret
02ad0     2D 00 64 FD | 	ret
02ad4                 | 
02ad4                 | __system__longmove
02ad4     FD BA 01 F6 | 	mov	_var01, arg01
02ad8     FE FA 59 F2 | 	cmps	arg01, arg02 wcz
02adc     28 00 90 3D |  if_ae	jmp	#LR__0130
02ae0     FF BC 09 F6 | 	mov	_var02, arg03 wz
02ae4     5C 00 90 AD |  if_e	jmp	#LR__0136
02ae8     28 D5 9F FE | 	loc	pa,	#(@LR__0128-@LR__0126)
02aec     93 00 A0 FD | 	call	#FCACHE_LOAD_
02af0                 | LR__0126
02af0     DE 08 D8 FC | 	rep	@LR__0129, _var02
02af4                 | LR__0127
02af4     FE BE 01 FB | 	rdlong	_var03, arg02
02af8     FD BE 61 FC | 	wrlong	_var03, arg01
02afc     04 FA 05 F1 | 	add	arg01, #4
02b00     04 FC 05 F1 | 	add	arg02, #4
02b04                 | LR__0128
02b04                 | LR__0129
02b04     3C 00 90 FD | 	jmp	#LR__0136
02b08                 | LR__0130
02b08     FF C0 01 F6 | 	mov	_var04, arg03
02b0c     02 C0 65 F0 | 	shl	_var04, #2
02b10     E0 FA 01 F1 | 	add	arg01, _var04
02b14     FF C0 01 F6 | 	mov	_var04, arg03
02b18     02 C0 65 F0 | 	shl	_var04, #2
02b1c     E0 FC 01 F1 | 	add	arg02, _var04
02b20     FF C2 09 F6 | 	mov	_var05, arg03 wz
02b24     1C 00 90 AD |  if_e	jmp	#LR__0135
02b28     E8 D4 9F FE | 	loc	pa,	#(@LR__0133-@LR__0131)
02b2c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b30                 | LR__0131
02b30     E1 08 D8 FC | 	rep	@LR__0134, _var05
02b34                 | LR__0132
02b34     04 FA 85 F1 | 	sub	arg01, #4
02b38     04 FC 85 F1 | 	sub	arg02, #4
02b3c     FE BE 01 FB | 	rdlong	_var03, arg02
02b40     FD BE 61 FC | 	wrlong	_var03, arg01
02b44                 | LR__0133
02b44                 | LR__0134
02b44                 | LR__0135
02b44                 | LR__0136
02b44     DD B6 01 F6 | 	mov	result1, _var01
02b48                 | __system__longmove_ret
02b48     2D 00 64 FD | 	ret
02b4c                 | 
02b4c                 | __system____topofstack
02b4c     00 5A 05 F6 | 	mov	COUNT_, #0
02b50     B0 00 A0 FD | 	call	#pushregs_
02b54     08 F0 07 F1 | 	add	ptra, #8
02b58     04 5E 05 F1 | 	add	fp, #4
02b5c     AF FA 61 FC | 	wrlong	arg01, fp
02b60     AF B6 01 F6 | 	mov	result1, fp
02b64     04 5E 85 F1 | 	sub	fp, #4
02b68     AF F0 03 F6 | 	mov	ptra, fp
02b6c     BA 00 A0 FD | 	call	#popregs_
02b70                 | __system____topofstack_ret
02b70     2D 00 64 FD | 	ret
02b74                 | 
02b74                 | __system___make_methodptr
02b74     04 5A 05 F6 | 	mov	COUNT_, #4
02b78     B0 00 A0 FD | 	call	#pushregs_
02b7c     FD 04 02 F6 | 	mov	local01, arg01
02b80     FE 06 02 F6 | 	mov	local02, arg02
02b84     08 FA 05 F6 | 	mov	arg01, #8
02b88     6C 04 B0 FD | 	call	#__system___gc_alloc_managed
02b8c     DB 08 0A F6 | 	mov	local03, result1 wz
02b90     10 00 90 AD |  if_e	jmp	#LR__0137
02b94     04 05 62 FC | 	wrlong	local01, local03
02b98     04 0B 02 F6 | 	mov	local04, local03
02b9c     04 0A 06 F1 | 	add	local04, #4
02ba0     05 07 62 FC | 	wrlong	local02, local04
02ba4                 | LR__0137
02ba4     04 B7 01 F6 | 	mov	result1, local03
02ba8     AF F0 03 F6 | 	mov	ptra, fp
02bac     BA 00 A0 FD | 	call	#popregs_
02bb0                 | __system___make_methodptr_ret
02bb0     2D 00 64 FD | 	ret
02bb4                 | 
02bb4                 | __system___lockmem
02bb4     02 5A 05 F6 | 	mov	COUNT_, #2
02bb8     B0 00 A0 FD | 	call	#pushregs_
02bbc     00 B6 05 F6 | 	mov	result1, #0
02bc0     01 B6 61 FD | 	cogid	result1
02bc4     DB 04 02 F6 | 	mov	local01, result1
02bc8     00 05 06 F1 | 	add	local01, #256
02bcc                 | LR__0138
02bcc     FD 06 0A FB | 	rdlong	local02, arg01 wz
02bd0     FD 04 62 AC |  if_e	wrlong	local01, arg01
02bd4     FD 06 02 AB |  if_e	rdlong	local02, arg01
02bd8     FD 06 02 AB |  if_e	rdlong	local02, arg01
02bdc     02 07 0A F2 | 	cmp	local02, local01 wz
02be0     E8 FF 9F 5D |  if_ne	jmp	#LR__0138
02be4     AF F0 03 F6 | 	mov	ptra, fp
02be8     BA 00 A0 FD | 	call	#popregs_
02bec                 | __system___lockmem_ret
02bec     2D 00 64 FD | 	ret
02bf0                 | 
02bf0                 | __system___tx
02bf0     03 5A 05 F6 | 	mov	COUNT_, #3
02bf4     B0 00 A0 FD | 	call	#pushregs_
02bf8     FD 04 02 F6 | 	mov	local01, arg01
02bfc     0A 04 0E F2 | 	cmp	local01, #10 wz
02c00     20 00 90 5D |  if_ne	jmp	#LR__0139
02c04     08 A8 05 F1 | 	add	ptr___system__dat__, #8
02c08     D4 06 02 FB | 	rdlong	local02, ptr___system__dat__
02c0c     08 A8 85 F1 | 	sub	ptr___system__dat__, #8
02c10     03 09 02 F6 | 	mov	local03, local02
02c14     02 08 0E F5 | 	and	local03, #2 wz
02c18     08 00 90 AD |  if_e	jmp	#LR__0139
02c1c     0D FA 05 F6 | 	mov	arg01, #13
02c20     D8 FD BF FD | 	call	#__system___txraw
02c24                 | LR__0139
02c24     02 FB 01 F6 | 	mov	arg01, local01
02c28     D0 FD BF FD | 	call	#__system___txraw
02c2c     AF F0 03 F6 | 	mov	ptra, fp
02c30     BA 00 A0 FD | 	call	#popregs_
02c34                 | __system___tx_ret
02c34     2D 00 64 FD | 	ret
02c38                 | 
02c38                 | __system___waitms
02c38     03 5A 05 F6 | 	mov	COUNT_, #3
02c3c     B0 00 A0 FD | 	call	#pushregs_
02c40     FD 04 02 F6 | 	mov	local01, arg01
02c44     14 06 06 FB | 	rdlong	local02, #20
02c48     CC D3 9F FE | 	loc	pa,	#(@LR__0141-@LR__0140)
02c4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02c50                 | LR__0140
02c50     01 00 00 FF 
02c54     E8 05 5E F2 | 	cmps	local01, ##1000 wcz
02c58     1F 06 62 1D |  if_a	waitx	local02
02c5c     01 00 00 1F 
02c60     E8 05 86 11 |  if_a	sub	local01, ##1000
02c64     E8 FF 9F 1D |  if_a	jmp	#LR__0140
02c68                 | LR__0141
02c68     0C A8 05 F1 | 	add	ptr___system__dat__, #12
02c6c     D4 08 0A FB | 	rdlong	local03, ptr___system__dat__ wz
02c70     0C A8 85 F1 | 	sub	ptr___system__dat__, #12
02c74     20 00 90 5D |  if_ne	jmp	#LR__0142
02c78     03 29 02 F6 | 	mov	muldiva_, local02
02c7c     01 00 00 FF 
02c80     E8 2B 06 F6 | 	mov	muldivb_, ##1000
02c84     C2 00 A0 FD | 	call	#unsdivide_
02c88     15 09 02 F6 | 	mov	local03, muldivb_
02c8c     0C A8 05 F1 | 	add	ptr___system__dat__, #12
02c90     D4 2A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02c94     0C A8 85 F1 | 	sub	ptr___system__dat__, #12
02c98                 | LR__0142
02c98     00 04 5E F2 | 	cmps	local01, #0 wcz
02c9c     04 05 02 1D |  if_a	qmul	local01, local03
02ca0     18 FA 61 1D |  if_a	getqx	arg01
02ca4     1F FA 61 1D |  if_a	waitx	arg01
02ca8     AF F0 03 F6 | 	mov	ptra, fp
02cac     BA 00 A0 FD | 	call	#popregs_
02cb0                 | __system___waitms_ret
02cb0     2D 00 64 FD | 	ret
02cb4                 | 
02cb4                 | __system___waitus
02cb4     02 5A 05 F6 | 	mov	COUNT_, #2
02cb8     B0 00 A0 FD | 	call	#pushregs_
02cbc     FD 04 02 F6 | 	mov	local01, arg01
02cc0     10 A8 05 F1 | 	add	ptr___system__dat__, #16
02cc4     D4 06 0A FB | 	rdlong	local02, ptr___system__dat__ wz
02cc8     10 A8 85 F1 | 	sub	ptr___system__dat__, #16
02ccc     20 00 90 5D |  if_ne	jmp	#LR__0143
02cd0     14 28 06 FB | 	rdlong	muldiva_, #20
02cd4     A1 07 00 FF 
02cd8     40 2A 06 F6 | 	mov	muldivb_, ##1000000
02cdc     C2 00 A0 FD | 	call	#unsdivide_
02ce0     15 07 02 F6 | 	mov	local02, muldivb_
02ce4     10 A8 05 F1 | 	add	ptr___system__dat__, #16
02ce8     D4 2A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02cec     10 A8 85 F1 | 	sub	ptr___system__dat__, #16
02cf0                 | LR__0143
02cf0     03 05 02 FD | 	qmul	local01, local02
02cf4     18 FA 61 FD | 	getqx	arg01
02cf8     1F FA 61 FD | 	waitx	arg01
02cfc     AF F0 03 F6 | 	mov	ptra, fp
02d00     BA 00 A0 FD | 	call	#popregs_
02d04                 | __system___waitus_ret
02d04     2D 00 64 FD | 	ret
02d08                 | 
02d08                 | __system___gc_ptrs
02d08     04 5A 05 F6 | 	mov	COUNT_, #4
02d0c     B0 00 A0 FD | 	call	#pushregs_
02d10     D0 04 02 F6 | 	mov	local01, __heap_ptr
02d14     02 07 02 F6 | 	mov	local02, local01
02d18     07 00 00 FF 
02d1c     F8 07 06 F1 | 	add	local02, ##4088
02d20     02 09 0A FB | 	rdlong	local03, local01 wz
02d24     74 00 90 5D |  if_ne	jmp	#LR__0144
02d28     03 0B 02 F6 | 	mov	local04, local02
02d2c     02 0B 82 F1 | 	sub	local04, local01
02d30     02 03 58 FC | 	wrword	#1, local01
02d34     02 09 02 F6 | 	mov	local03, local01
02d38     02 08 06 F1 | 	add	local03, #2
02d3c     36 00 80 FF 
02d40     04 21 59 FC | 	wrword	##27792, local03
02d44     02 09 02 F6 | 	mov	local03, local01
02d48     04 08 06 F1 | 	add	local03, #4
02d4c     04 01 58 FC | 	wrword	#0, local03
02d50     02 09 02 F6 | 	mov	local03, local01
02d54     06 08 06 F1 | 	add	local03, #6
02d58     04 03 58 FC | 	wrword	#1, local03
02d5c     10 04 06 F1 | 	add	local01, #16
02d60     05 09 52 F6 | 	abs	local03, local04 wc
02d64     04 08 46 F0 | 	shr	local03, #4
02d68     04 09 62 C6 |  if_b	neg	local03, local03
02d6c     02 09 52 FC | 	wrword	local03, local01
02d70     02 09 02 F6 | 	mov	local03, local01
02d74     02 08 06 F1 | 	add	local03, #2
02d78     36 00 80 FF 
02d7c     04 1F 59 FC | 	wrword	##27791, local03
02d80     02 09 02 F6 | 	mov	local03, local01
02d84     04 08 06 F1 | 	add	local03, #4
02d88     04 01 58 FC | 	wrword	#0, local03
02d8c     02 09 02 F6 | 	mov	local03, local01
02d90     06 08 06 F1 | 	add	local03, #6
02d94     04 01 58 FC | 	wrword	#0, local03
02d98     10 04 86 F1 | 	sub	local01, #16
02d9c                 | LR__0144
02d9c     03 B9 01 F6 | 	mov	result2, local02
02da0     02 B7 01 F6 | 	mov	result1, local01
02da4     AF F0 03 F6 | 	mov	ptra, fp
02da8     BA 00 A0 FD | 	call	#popregs_
02dac                 | __system___gc_ptrs_ret
02dac     2D 00 64 FD | 	ret
02db0                 | 
02db0                 | __system___gc_nextBlockPtr
02db0     02 5A 05 F6 | 	mov	COUNT_, #2
02db4     B0 00 A0 FD | 	call	#pushregs_
02db8     FD 04 02 F6 | 	mov	local01, arg01
02dbc     02 07 EA FA | 	rdword	local02, local01 wz
02dc0     10 00 90 5D |  if_ne	jmp	#LR__0145
02dc4     1A 00 00 FF 
02dc8     CC FB 05 F6 | 	mov	arg01, ##@LR__0188
02dcc     F4 01 B0 FD | 	call	#__system___gc_errmsg
02dd0     0C 00 90 FD | 	jmp	#LR__0146
02dd4                 | LR__0145
02dd4     02 B7 01 F6 | 	mov	result1, local01
02dd8     04 06 66 F0 | 	shl	local02, #4
02ddc     03 B7 01 F1 | 	add	result1, local02
02de0                 | LR__0146
02de0     AF F0 03 F6 | 	mov	ptra, fp
02de4     BA 00 A0 FD | 	call	#popregs_
02de8                 | __system___gc_nextBlockPtr_ret
02de8     2D 00 64 FD | 	ret
02dec                 | 
02dec                 | __system___gc_tryalloc
02dec     0D 5A 05 F6 | 	mov	COUNT_, #13
02df0     B0 00 A0 FD | 	call	#pushregs_
02df4     FD 04 02 F6 | 	mov	local01, arg01
02df8     FE 06 02 F6 | 	mov	local02, arg02
02dfc     08 FF BF FD | 	call	#__system___gc_ptrs
02e00     DB 08 02 F6 | 	mov	local03, result1
02e04     DC 0A 02 F6 | 	mov	local04, result2
02e08     04 0D 02 F6 | 	mov	local05, local03
02e0c     00 0E 06 F6 | 	mov	local06, #0
02e10     3C D2 9F FE | 	loc	pa,	#(@LR__0148-@LR__0147)
02e14     93 00 A0 FD | 	call	#FCACHE_LOAD_
02e18                 | LR__0147
02e18     06 11 02 F6 | 	mov	local07, local05
02e1c     06 13 02 F6 | 	mov	local08, local05
02e20     06 12 06 F1 | 	add	local08, #6
02e24     09 15 E2 FA | 	rdword	local09, local08
02e28     04 FB 01 F6 | 	mov	arg01, local03
02e2c     0A FD 09 F6 | 	mov	arg02, local09 wz
02e30     00 B6 05 A6 |  if_e	mov	result1, #0
02e34     04 FC 65 50 |  if_ne	shl	arg02, #4
02e38     FE FA 01 51 |  if_ne	add	arg01, arg02
02e3c     FD B6 01 56 |  if_ne	mov	result1, arg01
02e40     DB 16 02 F6 | 	mov	local10, result1
02e44     0B 0D 0A F6 | 	mov	local05, local10 wz
02e48     06 17 02 56 |  if_ne	mov	local10, local05
02e4c     0B 0F E2 5A |  if_ne	rdword	local06, local10
02e50     00 0C 0E F2 | 	cmp	local05, #0 wz
02e54     10 00 90 AD |  if_e	jmp	#LR__0149
02e58     05 0D 5A F2 | 	cmps	local05, local04 wcz
02e5c     08 00 90 3D |  if_ae	jmp	#LR__0149
02e60     07 05 5A F2 | 	cmps	local01, local06 wcz
02e64     B0 FF 9F 1D |  if_a	jmp	#LR__0147
02e68                 | LR__0148
02e68                 | LR__0149
02e68     00 0C 0E F2 | 	cmp	local05, #0 wz
02e6c     06 B7 01 A6 |  if_e	mov	result1, local05
02e70     44 01 90 AD |  if_e	jmp	#LR__0152
02e74     06 17 02 F6 | 	mov	local10, local05
02e78     06 16 06 F1 | 	add	local10, #6
02e7c     0B 19 E2 FA | 	rdword	local11, local10
02e80     07 05 5A F2 | 	cmps	local01, local06 wcz
02e84     C0 00 90 3D |  if_ae	jmp	#LR__0151
02e88     06 05 52 FC | 	wrword	local01, local05
02e8c     06 FB 01 F6 | 	mov	arg01, local05
02e90     02 15 02 F6 | 	mov	local09, local01
02e94     04 14 66 F0 | 	shl	local09, #4
02e98     0A FB 01 F1 | 	add	arg01, local09
02e9c     07 17 02 F6 | 	mov	local10, local06
02ea0     02 17 82 F1 | 	sub	local10, local01
02ea4     FD 16 52 FC | 	wrword	local10, arg01
02ea8     FD 16 02 F6 | 	mov	local10, arg01
02eac     02 16 06 F1 | 	add	local10, #2
02eb0     36 00 80 FF 
02eb4     0B 1F 59 FC | 	wrword	##27791, local10
02eb8     06 FD 09 F6 | 	mov	arg02, local05 wz
02ebc     00 B6 05 A6 |  if_e	mov	result1, #0
02ec0     04 FD 81 51 |  if_ne	sub	arg02, local03
02ec4     04 FC 45 50 |  if_ne	shr	arg02, #4
02ec8     FE B6 01 56 |  if_ne	mov	result1, arg02
02ecc     FD 14 02 F6 | 	mov	local09, arg01
02ed0     04 14 06 F1 | 	add	local09, #4
02ed4     0A B7 51 FC | 	wrword	result1, local09
02ed8     06 17 02 F6 | 	mov	local10, local05
02edc     06 16 06 F1 | 	add	local10, #6
02ee0     FD 14 02 F6 | 	mov	local09, arg01
02ee4     0B 13 E2 FA | 	rdword	local08, local10
02ee8     06 14 06 F1 | 	add	local09, #6
02eec     0A 13 52 FC | 	wrword	local08, local09
02ef0     FD 1A 02 F6 | 	mov	local12, arg01
02ef4     0D FD 09 F6 | 	mov	arg02, local12 wz
02ef8     00 B6 05 A6 |  if_e	mov	result1, #0
02efc     04 FD 81 51 |  if_ne	sub	arg02, local03
02f00     04 FC 45 50 |  if_ne	shr	arg02, #4
02f04     FE B6 01 56 |  if_ne	mov	result1, arg02
02f08     DB 18 02 F6 | 	mov	local11, result1
02f0c     A0 FE BF FD | 	call	#__system___gc_nextBlockPtr
02f10     DB 1C 0A F6 | 	mov	local13, result1 wz
02f14     30 00 90 AD |  if_e	jmp	#LR__0150
02f18     05 1D 5A F2 | 	cmps	local13, local04 wcz
02f1c     28 00 90 3D |  if_ae	jmp	#LR__0150
02f20     04 FB 01 F6 | 	mov	arg01, local03
02f24     0D FD 09 F6 | 	mov	arg02, local12 wz
02f28     00 B6 05 A6 |  if_e	mov	result1, #0
02f2c     FD FC 81 51 |  if_ne	sub	arg02, arg01
02f30     04 FC 45 50 |  if_ne	shr	arg02, #4
02f34     FE B6 01 56 |  if_ne	mov	result1, arg02
02f38     DB 16 02 F6 | 	mov	local10, result1
02f3c     0E 15 02 F6 | 	mov	local09, local13
02f40     04 14 06 F1 | 	add	local09, #4
02f44     0A 17 52 FC | 	wrword	local10, local09
02f48                 | LR__0150
02f48                 | LR__0151
02f48     06 10 06 F1 | 	add	local07, #6
02f4c     08 19 52 FC | 	wrword	local11, local07
02f50     36 00 00 FF 
02f54     80 16 06 F6 | 	mov	local10, ##27776
02f58     03 17 42 F5 | 	or	local10, local02
02f5c     00 B6 05 F6 | 	mov	result1, #0
02f60     01 B6 61 FD | 	cogid	result1
02f64     DB 16 42 F5 | 	or	local10, result1
02f68     06 13 02 F6 | 	mov	local08, local05
02f6c     02 12 06 F1 | 	add	local08, #2
02f70     09 17 52 FC | 	wrword	local10, local08
02f74     04 17 02 F6 | 	mov	local10, local03
02f78     08 16 06 F1 | 	add	local10, #8
02f7c     06 15 02 F6 | 	mov	local09, local05
02f80     0B 13 E2 FA | 	rdword	local08, local10
02f84     06 14 06 F1 | 	add	local09, #6
02f88     0A 13 52 FC | 	wrword	local08, local09
02f8c     06 FD 09 F6 | 	mov	arg02, local05 wz
02f90     00 B6 05 A6 |  if_e	mov	result1, #0
02f94     04 FD 81 51 |  if_ne	sub	arg02, local03
02f98     04 FC 45 50 |  if_ne	shr	arg02, #4
02f9c     FE B6 01 56 |  if_ne	mov	result1, arg02
02fa0     08 08 06 F1 | 	add	local03, #8
02fa4     04 B7 51 FC | 	wrword	result1, local03
02fa8     06 B7 01 F6 | 	mov	result1, local05
02fac     08 B6 05 F1 | 	add	result1, #8
02fb0     00 C0 31 FF 
02fb4     00 B6 45 F5 | 	or	result1, ##1669332992
02fb8                 | LR__0152
02fb8     AF F0 03 F6 | 	mov	ptra, fp
02fbc     BA 00 A0 FD | 	call	#popregs_
02fc0                 | __system___gc_tryalloc_ret
02fc0     2D 00 64 FD | 	ret
02fc4                 | 
02fc4                 | __system___gc_errmsg
02fc4     02 5A 05 F6 | 	mov	COUNT_, #2
02fc8     B0 00 A0 FD | 	call	#pushregs_
02fcc     FD 04 02 F6 | 	mov	local01, arg01
02fd0                 | LR__0153
02fd0     02 07 CA FA | 	rdbyte	local02, local01 wz
02fd4     01 04 06 F1 | 	add	local01, #1
02fd8     0C 00 90 AD |  if_e	jmp	#LR__0154
02fdc     03 FB 01 F6 | 	mov	arg01, local02
02fe0     0C FC BF FD | 	call	#__system___tx
02fe4     E8 FF 9F FD | 	jmp	#LR__0153
02fe8                 | LR__0154
02fe8     00 B6 05 F6 | 	mov	result1, #0
02fec     AF F0 03 F6 | 	mov	ptra, fp
02ff0     BA 00 A0 FD | 	call	#popregs_
02ff4                 | __system___gc_errmsg_ret
02ff4     2D 00 64 FD | 	ret
02ff8                 | 
02ff8                 | __system___gc_alloc_managed
02ff8     02 5A 05 F6 | 	mov	COUNT_, #2
02ffc     B0 00 A0 FD | 	call	#pushregs_
03000     FD 04 02 F6 | 	mov	local01, arg01
03004     00 FC 05 F6 | 	mov	arg02, #0
03008     30 00 B0 FD | 	call	#__system___gc_doalloc
0300c     DB 06 0A F6 | 	mov	local02, result1 wz
03010     18 00 90 5D |  if_ne	jmp	#LR__0155
03014     00 04 5E F2 | 	cmps	local01, #0 wcz
03018     10 00 90 ED |  if_be	jmp	#LR__0155
0301c     1A 00 00 FF 
03020     E8 FB 05 F6 | 	mov	arg01, ##@LR__0189
03024     9C FF BF FD | 	call	#__system___gc_errmsg
03028     04 00 90 FD | 	jmp	#LR__0156
0302c                 | LR__0155
0302c     03 B7 01 F6 | 	mov	result1, local02
03030                 | LR__0156
03030     AF F0 03 F6 | 	mov	ptra, fp
03034     BA 00 A0 FD | 	call	#popregs_
03038                 | __system___gc_alloc_managed_ret
03038     2D 00 64 FD | 	ret
0303c                 | 
0303c                 | __system___gc_doalloc
0303c     06 5A 05 F6 | 	mov	COUNT_, #6
03040     B0 00 A0 FD | 	call	#pushregs_
03044     FD 04 0A F6 | 	mov	local01, arg01 wz
03048     FE 06 02 F6 | 	mov	local02, arg02
0304c     00 B6 05 A6 |  if_e	mov	result1, #0
03050     94 00 90 AD |  if_e	jmp	#LR__0164
03054     17 04 06 F1 | 	add	local01, #23
03058     0F 04 26 F5 | 	andn	local01, #15
0305c     04 04 46 F0 | 	shr	local01, #4
03060     14 A8 05 F1 | 	add	ptr___system__dat__, #20
03064     D4 FA 01 F6 | 	mov	arg01, ptr___system__dat__
03068     14 A8 85 F1 | 	sub	ptr___system__dat__, #20
0306c     44 FB BF FD | 	call	#__system___lockmem
03070     02 FB 01 F6 | 	mov	arg01, local01
03074     03 FD 01 F6 | 	mov	arg02, local02
03078     70 FD BF FD | 	call	#__system___gc_tryalloc
0307c     DB 08 0A F6 | 	mov	local03, result1 wz
03080     14 00 90 5D |  if_ne	jmp	#LR__0157
03084     24 03 B0 FD | 	call	#__system___gc_docollect
03088     02 FB 01 F6 | 	mov	arg01, local01
0308c     03 FD 01 F6 | 	mov	arg02, local02
03090     58 FD BF FD | 	call	#__system___gc_tryalloc
03094     DB 08 02 F6 | 	mov	local03, result1
03098                 | LR__0157
03098     14 A8 05 F1 | 	add	ptr___system__dat__, #20
0309c     D4 FA 01 F6 | 	mov	arg01, ptr___system__dat__
030a0     14 A8 85 F1 | 	sub	ptr___system__dat__, #20
030a4     FD 00 68 FC | 	wrlong	#0, arg01
030a8     00 08 0E F2 | 	cmp	local03, #0 wz
030ac     34 00 90 AD |  if_e	jmp	#LR__0163
030b0     04 04 66 F0 | 	shl	local01, #4
030b4     08 04 86 F1 | 	sub	local01, #8
030b8     02 0B 52 F6 | 	abs	local04, local01 wc
030bc     02 0A 46 F0 | 	shr	local04, #2
030c0     05 0B 62 C6 |  if_b	neg	local04, local04
030c4     05 0D 0A F6 | 	mov	local05, local04 wz
030c8     04 0F 02 F6 | 	mov	local06, local03
030cc     14 00 90 AD |  if_e	jmp	#LR__0162
030d0     38 CF 9F FE | 	loc	pa,	#(@LR__0160-@LR__0158)
030d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
030d8                 | LR__0158
030d8     06 05 D8 FC | 	rep	@LR__0161, local05
030dc                 | LR__0159
030dc     07 01 68 FC | 	wrlong	#0, local06
030e0     04 0E 06 F1 | 	add	local06, #4
030e4                 | LR__0160
030e4                 | LR__0161
030e4                 | LR__0162
030e4                 | LR__0163
030e4     04 B7 01 F6 | 	mov	result1, local03
030e8                 | LR__0164
030e8     AF F0 03 F6 | 	mov	ptra, fp
030ec     BA 00 A0 FD | 	call	#popregs_
030f0                 | __system___gc_doalloc_ret
030f0     2D 00 64 FD | 	ret
030f4                 | 
030f4                 | __system___gc_isvalidptr
030f4     FF BA 01 F6 | 	mov	_var01, arg03
030f8     DD BC 01 F6 | 	mov	_var02, _var01
030fc     00 F8 7F FF 
03100     00 BC 05 F5 | 	and	_var02, ##-1048576
03104     00 C0 31 FF 
03108     00 BC 0D F2 | 	cmp	_var02, ##1669332992 wz
0310c     00 B6 05 56 |  if_ne	mov	result1, #0
03110     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
03114     08 BA 85 F1 | 	sub	_var01, #8
03118     00 F8 7F FF 
0311c     00 BA 25 F5 | 	andn	_var01, ##-1048576
03120     FD BA 59 F2 | 	cmps	_var01, arg01 wcz
03124     08 00 90 CD |  if_b	jmp	#LR__0165
03128     FE BA 59 F2 | 	cmps	_var01, arg02 wcz
0312c     08 00 90 CD |  if_b	jmp	#LR__0166
03130                 | LR__0165
03130     00 B6 05 F6 | 	mov	result1, #0
03134     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
03138                 | LR__0166
03138     DD BC 01 F6 | 	mov	_var02, _var01
0313c     FD BC 61 F5 | 	xor	_var02, arg01
03140     0F BC 0D F5 | 	and	_var02, #15 wz
03144     00 B6 05 56 |  if_ne	mov	result1, #0
03148     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
0314c     DD BC 01 F6 | 	mov	_var02, _var01
03150     02 BC 05 F1 | 	add	_var02, #2
03154     DE BC E1 FA | 	rdword	_var02, _var02
03158     7F 00 00 FF 
0315c     C0 BD 05 F5 | 	and	_var02, ##65472
03160     36 00 00 FF 
03164     80 BC 0D F2 | 	cmp	_var02, ##27776 wz
03168     00 B6 05 56 |  if_ne	mov	result1, #0
0316c     DD B6 01 A6 |  if_e	mov	result1, _var01
03170                 | __system___gc_isvalidptr_ret
03170     2D 00 64 FD | 	ret
03174                 | 
03174                 | __system___gc_dofree
03174     0D 5A 05 F6 | 	mov	COUNT_, #13
03178     B0 00 A0 FD | 	call	#pushregs_
0317c     FD 04 02 F6 | 	mov	local01, arg01
03180     84 FB BF FD | 	call	#__system___gc_ptrs
03184     DB 06 02 F6 | 	mov	local02, result1
03188     DC 08 02 F6 | 	mov	local03, result2
0318c     02 0B 02 F6 | 	mov	local04, local01
03190     02 0A 06 F1 | 	add	local04, #2
03194     36 00 80 FF 
03198     05 1F 59 FC | 	wrword	##27791, local04
0319c     02 0D 02 F6 | 	mov	local05, local01
031a0     02 FB 01 F6 | 	mov	arg01, local01
031a4     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
031a8     DB 0E 02 F6 | 	mov	local06, result1
031ac     9C CE 9F FE | 	loc	pa,	#(@LR__0168-@LR__0167)
031b0     93 00 A0 FD | 	call	#FCACHE_LOAD_
031b4                 | LR__0167
031b4     04 0C 06 F1 | 	add	local05, #4
031b8     06 FD E9 FA | 	rdword	arg02, local05 wz
031bc     03 FB 01 F6 | 	mov	arg01, local02
031c0     00 B6 05 A6 |  if_e	mov	result1, #0
031c4     04 FC 65 50 |  if_ne	shl	arg02, #4
031c8     FE FA 01 51 |  if_ne	add	arg01, arg02
031cc     FD B6 01 56 |  if_ne	mov	result1, arg01
031d0     DB 0C 0A F6 | 	mov	local05, result1 wz
031d4     28 00 90 AD |  if_e	jmp	#LR__0169
031d8     06 FB 01 F6 | 	mov	arg01, local05
031dc     00 10 06 F6 | 	mov	local07, #0
031e0     02 FA 05 F1 | 	add	arg01, #2
031e4     FD 12 E2 FA | 	rdword	local08, arg01
031e8     36 00 00 FF 
031ec     8F 12 0E F2 | 	cmp	local08, ##27791 wz
031f0     01 10 66 A6 |  if_e	neg	local07, #1
031f4     08 B7 01 F6 | 	mov	result1, local07
031f8     DB 0A 0A F6 | 	mov	local04, result1 wz
031fc     B4 FF 9F AD |  if_e	jmp	#LR__0167
03200                 | LR__0168
03200                 | LR__0169
03200     00 0C 0E F2 | 	cmp	local05, #0 wz
03204     03 0D 02 A6 |  if_e	mov	local05, local02
03208     06 0B 02 F6 | 	mov	local04, local05
0320c     06 0A 06 F1 | 	add	local04, #6
03210     02 15 02 F6 | 	mov	local09, local01
03214     05 17 E2 FA | 	rdword	local10, local04
03218     06 14 06 F1 | 	add	local09, #6
0321c     0A 17 52 FC | 	wrword	local10, local09
03220     02 FD 09 F6 | 	mov	arg02, local01 wz
03224     00 B6 05 A6 |  if_e	mov	result1, #0
03228     03 FD 81 51 |  if_ne	sub	arg02, local02
0322c     04 FC 45 50 |  if_ne	shr	arg02, #4
03230     FE B6 01 56 |  if_ne	mov	result1, arg02
03234     06 15 02 F6 | 	mov	local09, local05
03238     06 14 06 F1 | 	add	local09, #6
0323c     0A B7 51 FC | 	wrword	result1, local09
03240     03 0D 0A F2 | 	cmp	local05, local02 wz
03244     84 00 90 AD |  if_e	jmp	#LR__0172
03248     06 FB 01 F6 | 	mov	arg01, local05
0324c     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
03250     02 B7 09 F2 | 	cmp	result1, local01 wz
03254     74 00 90 5D |  if_ne	jmp	#LR__0171
03258     06 0B E2 FA | 	rdword	local04, local05
0325c     02 19 E2 FA | 	rdword	local11, local01
03260     0C 0B 02 F1 | 	add	local04, local11
03264     06 0B 52 FC | 	wrword	local04, local05
03268     02 0B 02 F6 | 	mov	local04, local01
0326c     02 0A 06 F1 | 	add	local04, #2
03270     05 01 58 FC | 	wrword	#0, local04
03274     02 FB 01 F6 | 	mov	arg01, local01
03278     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
0327c     DB 0E 02 F6 | 	mov	local06, result1
03280     04 0F 5A F2 | 	cmps	local06, local03 wcz
03284     20 00 90 3D |  if_ae	jmp	#LR__0170
03288     06 FD 09 F6 | 	mov	arg02, local05 wz
0328c     00 B6 05 A6 |  if_e	mov	result1, #0
03290     03 FD 81 51 |  if_ne	sub	arg02, local02
03294     04 FC 45 50 |  if_ne	shr	arg02, #4
03298     FE B6 01 56 |  if_ne	mov	result1, arg02
0329c     07 15 02 F6 | 	mov	local09, local06
032a0     04 14 06 F1 | 	add	local09, #4
032a4     0A B7 51 FC | 	wrword	result1, local09
032a8                 | LR__0170
032a8     02 0B 02 F6 | 	mov	local04, local01
032ac     06 0A 06 F1 | 	add	local04, #6
032b0     06 15 02 F6 | 	mov	local09, local05
032b4     05 17 E2 FA | 	rdword	local10, local04
032b8     06 14 06 F1 | 	add	local09, #6
032bc     0A 17 52 FC | 	wrword	local10, local09
032c0     06 04 06 F1 | 	add	local01, #6
032c4     02 01 58 FC | 	wrword	#0, local01
032c8     06 05 02 F6 | 	mov	local01, local05
032cc                 | LR__0171
032cc                 | LR__0172
032cc     02 FB 01 F6 | 	mov	arg01, local01
032d0     DC FA BF FD | 	call	#__system___gc_nextBlockPtr
032d4     DB 1A 0A F6 | 	mov	local12, result1 wz
032d8     C0 00 90 AD |  if_e	jmp	#LR__0174
032dc     04 1B 5A F2 | 	cmps	local12, local03 wcz
032e0     B8 00 90 3D |  if_ae	jmp	#LR__0174
032e4     0D FB 01 F6 | 	mov	arg01, local12
032e8     00 10 06 F6 | 	mov	local07, #0
032ec     02 FA 05 F1 | 	add	arg01, #2
032f0     FD 12 E2 FA | 	rdword	local08, arg01
032f4     36 00 00 FF 
032f8     8F 12 0E F2 | 	cmp	local08, ##27791 wz
032fc     01 10 66 A6 |  if_e	neg	local07, #1
03300     08 B7 09 F6 | 	mov	result1, local07 wz
03304     94 00 90 AD |  if_e	jmp	#LR__0174
03308     02 0D 02 F6 | 	mov	local05, local01
0330c     06 0B E2 FA | 	rdword	local04, local05
03310     0D 05 02 F6 | 	mov	local01, local12
03314     02 19 E2 FA | 	rdword	local11, local01
03318     0C 0B 02 F1 | 	add	local04, local11
0331c     06 1D 02 F6 | 	mov	local13, local05
03320     0E 0B 52 FC | 	wrword	local04, local13
03324     02 0B 02 F6 | 	mov	local04, local01
03328     06 0A 06 F1 | 	add	local04, #6
0332c     06 15 02 F6 | 	mov	local09, local05
03330     05 17 E2 FA | 	rdword	local10, local04
03334     06 14 06 F1 | 	add	local09, #6
03338     0A 17 52 FC | 	wrword	local10, local09
0333c     02 0B 02 F6 | 	mov	local04, local01
03340     02 0A 06 F1 | 	add	local04, #2
03344     05 55 59 FC | 	wrword	#170, local04
03348     02 0B 02 F6 | 	mov	local04, local01
0334c     06 0A 06 F1 | 	add	local04, #6
03350     00 14 06 F6 | 	mov	local09, #0
03354     05 01 58 FC | 	wrword	#0, local04
03358     02 FB 01 F6 | 	mov	arg01, local01
0335c     50 FA BF FD | 	call	#__system___gc_nextBlockPtr
03360     DB 0A 02 F6 | 	mov	local04, result1
03364     05 0F 0A F6 | 	mov	local06, local04 wz
03368     30 00 90 AD |  if_e	jmp	#LR__0173
0336c     04 0F 5A F2 | 	cmps	local06, local03 wcz
03370     28 00 90 3D |  if_ae	jmp	#LR__0173
03374     03 FB 01 F6 | 	mov	arg01, local02
03378     06 FD 09 F6 | 	mov	arg02, local05 wz
0337c     00 B6 05 A6 |  if_e	mov	result1, #0
03380     FD FC 81 51 |  if_ne	sub	arg02, arg01
03384     04 FC 45 50 |  if_ne	shr	arg02, #4
03388     FE B6 01 56 |  if_ne	mov	result1, arg02
0338c     DB 0A 02 F6 | 	mov	local04, result1
03390     07 15 02 F6 | 	mov	local09, local06
03394     04 14 06 F1 | 	add	local09, #4
03398     0A 0B 52 FC | 	wrword	local04, local09
0339c                 | LR__0173
0339c                 | LR__0174
0339c     07 B7 01 F6 | 	mov	result1, local06
033a0     AF F0 03 F6 | 	mov	ptra, fp
033a4     BA 00 A0 FD | 	call	#popregs_
033a8                 | __system___gc_dofree_ret
033a8     2D 00 64 FD | 	ret
033ac                 | 
033ac                 | __system___gc_docollect
033ac     09 5A 05 F6 | 	mov	COUNT_, #9
033b0     B0 00 A0 FD | 	call	#pushregs_
033b4     50 F9 BF FD | 	call	#__system___gc_ptrs
033b8     DC 04 02 F6 | 	mov	local01, result2
033bc     DB 06 02 F6 | 	mov	local02, result1
033c0     03 FB 01 F6 | 	mov	arg01, local02
033c4     E8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
033c8     DB 08 0A F6 | 	mov	local03, result1 wz
033cc     00 B6 05 F6 | 	mov	result1, #0
033d0     01 B6 61 FD | 	cogid	result1
033d4     DB 0A 02 F6 | 	mov	local04, result1
033d8     34 00 90 AD |  if_e	jmp	#LR__0176
033dc                 | LR__0175
033dc     02 09 5A F2 | 	cmps	local03, local01 wcz
033e0     2C 00 90 3D |  if_ae	jmp	#LR__0176
033e4     04 0D 02 F6 | 	mov	local05, local03
033e8     02 0C 06 F1 | 	add	local05, #2
033ec     06 0F E2 FA | 	rdword	local06, local05
033f0     20 0E 26 F5 | 	andn	local06, #32
033f4     04 11 02 F6 | 	mov	local07, local03
033f8     02 10 06 F1 | 	add	local07, #2
033fc     08 0F 52 FC | 	wrword	local06, local07
03400     04 FB 01 F6 | 	mov	arg01, local03
03404     A8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03408     DB 08 0A F6 | 	mov	local03, result1 wz
0340c     CC FF 9F 5D |  if_ne	jmp	#LR__0175
03410                 | LR__0176
03410     00 0E 06 F6 | 	mov	local06, #0
03414     00 FA 05 F6 | 	mov	arg01, #0
03418     30 F7 BF FD | 	call	#__system____topofstack
0341c     DB FC 01 F6 | 	mov	arg02, result1
03420     07 FB 01 F6 | 	mov	arg01, local06
03424     9C 00 B0 FD | 	call	#__system___gc_markhub
03428     2C 01 B0 FD | 	call	#__system___gc_markcog
0342c     03 FB 01 F6 | 	mov	arg01, local02
03430     7C F9 BF FD | 	call	#__system___gc_nextBlockPtr
03434     DB 12 0A F6 | 	mov	local08, result1 wz
03438     10 00 90 5D |  if_ne	jmp	#LR__0177
0343c     1B 00 00 FF 
03440     05 FA 05 F6 | 	mov	arg01, ##@LR__0190
03444     7C FB BF FD | 	call	#__system___gc_errmsg
03448     6C 00 90 FD | 	jmp	#LR__0183
0344c                 | LR__0177
0344c                 | LR__0178
0344c     09 09 02 F6 | 	mov	local03, local08
03450     04 FB 01 F6 | 	mov	arg01, local03
03454     58 F9 BF FD | 	call	#__system___gc_nextBlockPtr
03458     DB 12 02 F6 | 	mov	local08, result1
0345c     04 0F 02 F6 | 	mov	local06, local03
03460     02 0E 06 F1 | 	add	local06, #2
03464     07 15 E2 FA | 	rdword	local09, local06
03468     20 14 CE F7 | 	test	local09, #32 wz
0346c     38 00 90 5D |  if_ne	jmp	#LR__0181
03470     0A 0D 02 F6 | 	mov	local05, local09
03474     10 0C 0E F5 | 	and	local05, #16 wz
03478     2C 00 90 5D |  if_ne	jmp	#LR__0181
0347c     0A 0F 02 F6 | 	mov	local06, local09
03480     0F 0E 06 F5 | 	and	local06, #15
03484     07 15 02 F6 | 	mov	local09, local06
03488     05 15 0A F2 | 	cmp	local09, local04 wz
0348c     08 00 90 AD |  if_e	jmp	#LR__0179
03490     0E 14 0E F2 | 	cmp	local09, #14 wz
03494     10 00 90 5D |  if_ne	jmp	#LR__0180
03498                 | LR__0179
03498     04 FB 01 F6 | 	mov	arg01, local03
0349c     D4 FC BF FD | 	call	#__system___gc_dofree
034a0     DB 0E 02 F6 | 	mov	local06, result1
034a4     07 13 02 F6 | 	mov	local08, local06
034a8                 | LR__0180
034a8                 | LR__0181
034a8     00 12 0E F2 | 	cmp	local08, #0 wz
034ac     08 00 90 AD |  if_e	jmp	#LR__0182
034b0     02 13 5A F2 | 	cmps	local08, local01 wcz
034b4     94 FF 9F CD |  if_b	jmp	#LR__0178
034b8                 | LR__0182
034b8                 | LR__0183
034b8     AF F0 03 F6 | 	mov	ptra, fp
034bc     BA 00 A0 FD | 	call	#popregs_
034c0                 | __system___gc_docollect_ret
034c0     2D 00 64 FD | 	ret
034c4                 | 
034c4                 | __system___gc_markhub
034c4     09 5A 05 F6 | 	mov	COUNT_, #9
034c8     B0 00 A0 FD | 	call	#pushregs_
034cc     FD 04 02 F6 | 	mov	local01, arg01
034d0     FE 06 02 F6 | 	mov	local02, arg02
034d4     30 F8 BF FD | 	call	#__system___gc_ptrs
034d8     DB 08 02 F6 | 	mov	local03, result1
034dc     DC 0A 02 F6 | 	mov	local04, result2
034e0                 | LR__0184
034e0     03 05 5A F2 | 	cmps	local01, local02 wcz
034e4     64 00 90 3D |  if_ae	jmp	#LR__0185
034e8     02 FF 01 FB | 	rdlong	arg03, local01
034ec     04 04 06 F1 | 	add	local01, #4
034f0     05 FD 01 F6 | 	mov	arg02, local04
034f4     04 FB 01 F6 | 	mov	arg01, local03
034f8     F8 FB BF FD | 	call	#__system___gc_isvalidptr
034fc     DB 0C 0A F6 | 	mov	local05, result1 wz
03500     DC FF 9F AD |  if_e	jmp	#LR__0184
03504     06 FB 01 F6 | 	mov	arg01, local05
03508     00 0E 06 F6 | 	mov	local06, #0
0350c     02 FA 05 F1 | 	add	arg01, #2
03510     FD 10 E2 FA | 	rdword	local07, arg01
03514     36 00 00 FF 
03518     8F 10 0E F2 | 	cmp	local07, ##27791 wz
0351c     01 0E 66 A6 |  if_e	neg	local06, #1
03520     07 B7 09 F6 | 	mov	result1, local06 wz
03524     B8 FF 9F 5D |  if_ne	jmp	#LR__0184
03528     06 13 02 F6 | 	mov	local08, local05
0352c     02 12 06 F1 | 	add	local08, #2
03530     09 15 E2 FA | 	rdword	local09, local08
03534     0F 14 26 F5 | 	andn	local09, #15
03538     2E 14 46 F5 | 	or	local09, #46
0353c     06 13 02 F6 | 	mov	local08, local05
03540     02 12 06 F1 | 	add	local08, #2
03544     09 15 52 FC | 	wrword	local09, local08
03548     94 FF 9F FD | 	jmp	#LR__0184
0354c                 | LR__0185
0354c     AF F0 03 F6 | 	mov	ptra, fp
03550     BA 00 A0 FD | 	call	#popregs_
03554                 | __system___gc_markhub_ret
03554     2D 00 64 FD | 	ret
03558                 | 
03558                 | __system___gc_markcog
03558     06 5A 05 F6 | 	mov	COUNT_, #6
0355c     B0 00 A0 FD | 	call	#pushregs_
03560     A4 F7 BF FD | 	call	#__system___gc_ptrs
03564     DB 04 02 F6 | 	mov	local01, result1
03568     DC 06 02 F6 | 	mov	local02, result2
0356c     00 08 06 F6 | 	mov	local03, #0
03570                 | LR__0186
03570     F0 0B 06 F6 | 	mov	local04, #496
03574     04 0B 82 F1 | 	sub	local04, local03
03578     F0 0B 06 F1 | 	add	local04, #496
0357c                 | 	'.live	local04
0357c     00 0A 96 F9 | 	alts	local04, #0
03580     05 0D 02 F6 | 	mov	local05, local04
03584     02 FB 01 F6 | 	mov	arg01, local01
03588     03 FD 01 F6 | 	mov	arg02, local02
0358c     06 FF 01 F6 | 	mov	arg03, local05
03590     60 FB BF FD | 	call	#__system___gc_isvalidptr
03594     DB 0C 0A F6 | 	mov	local05, result1 wz
03598     18 00 90 AD |  if_e	jmp	#LR__0187
0359c     06 0F 02 F6 | 	mov	local06, local05
035a0     02 0E 06 F1 | 	add	local06, #2
035a4     07 0B E2 FA | 	rdword	local04, local06
035a8     20 0A 46 F5 | 	or	local04, #32
035ac     02 0C 06 F1 | 	add	local05, #2
035b0     06 0B 52 FC | 	wrword	local04, local05
035b4                 | LR__0187
035b4     01 08 06 F1 | 	add	local03, #1
035b8     F0 09 5E F2 | 	cmps	local03, #496 wcz
035bc     B0 FF 9F CD |  if_b	jmp	#LR__0186
035c0     AF F0 03 F6 | 	mov	ptra, fp
035c4     BA 00 A0 FD | 	call	#popregs_
035c8                 | __system___gc_markcog_ret
035c8     2D 00 64 FD | 	ret
035cc                 | 
035cc                 | LR__0188
035cc     20 21 21 21 
035d0     20 63 6F 72 
035d4     72 75 70 74 
035d8     65 64 20 68 
035dc     65 61 70 3F 
035e0     3F 3F 20 21 
035e4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
035e7     00          | 	byte	0
035e8                 | LR__0189
035e8     20 21 21 21 
035ec     20 6F 75 74 
035f0     20 6F 66 20 
035f4     68 65 61 70 
035f8     20 6D 65 6D 
035fc     6F 72 79 20 
03600     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
03604     00          | 	byte	0
03605                 | LR__0190
03605     20 21 21 21 
03609     20 63 6F 72 
0360d     72 75 70 74 
03611     65 64 20 68 
03615     65 61 70 20 
03619     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0361d     00          | 	byte	0
0361e                 | LR__0191
0361e     6D 6F 64 65 | 	byte	"mode"
03622     00          | 	byte	0
03623                 | LR__0192
03623     63 70 6C    | 	byte	"cpl"
03626     00          | 	byte	0
03627                 | LR__0193
03627     62 75 66 70 
0362b     74 72       | 	byte	"bufptr"
0362d     00          | 	byte	0
0362e                 | LR__0194
0362e     62 75 66 6C 
03632     65 6E       | 	byte	"buflen"
03634     00          | 	byte	0
03635                 | LR__0195
03635     6C 69 6E 65 
03639     73          | 	byte	"lines"
0363a     00          | 	byte	0
0363b                 | LR__0196
0363b     6D 6F 64 65 | 	byte	"mode"
0363f     00          | 	byte	0
03640                 | LR__0197
03640     63 70 6C    | 	byte	"cpl"
03643     00          | 	byte	0
03644                 | LR__0198
03644     62 75 66 5F 
03648     70 74 72    | 	byte	"buf_ptr"
0364b     00          | 	byte	0
0364c                 | LR__0199
0364c     62 75 66 6C 
03650     65 6E       | 	byte	"buflen"
03652     00          | 	byte	0
03653                 | LR__0200
03653     6C 69 6E 65 
03657     73          | 	byte	"lines"
03658     00          | 	byte	0
03659                 | LR__0201
03659     6D 6F 64 65 | 	byte	"mode"
0365d     00          | 	byte	0
0365e                 | LR__0202
0365e     63 70 6C    | 	byte	"cpl"
03661     00          | 	byte	0
03662                 | LR__0203
03662     62 75 66 5F 
03666     70 74 72    | 	byte	"buf_ptr"
03669     00          | 	byte	0
0366a                 | LR__0204
0366a     62 75 66 6C 
0366e     65 6E       | 	byte	"buflen"
03670     00          | 	byte	0
03671                 | LR__0205
03671     6C 69 6E 65 
03675     73          | 	byte	"lines"
03676     00          | 	byte	0
03677                 | LR__0206
03677     6D 6F 64 65 | 	byte	"mode"
0367b     00          | 	byte	0
0367c                 | LR__0207
0367c     63 70 6C    | 	byte	"cpl"
0367f     00          | 	byte	0
03680                 | LR__0208
03680     62 75 66 5F 
03684     70 74 72    | 	byte	"buf_ptr"
03687     00          | 	byte	0
03688                 | LR__0209
03688     62 75 66 6C 
0368c     65 6E       | 	byte	"buflen"
0368e     00          | 	byte	0
0368f                 | LR__0210
0368f     6C 69 6E 65 
03693     73          | 	byte	"lines"
03694     00          | 	byte	0
03695     00 00 00    | 	alignl
03698                 | _dat_
03698     00 00 00 00 
0369c     00 00 00 00 
036a0     00 00 00 00 
036a4     00 00 00 00 
036a8     00 00 00    | vga_font       file "vgafont.def"
036ab     7E 81 A5 81 
036af     81 BD 99 81 
036b3     81 7E 00 00 
036b7     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
036bb     7E FF DB FF 
036bf     FF C3 E7 FF 
036c3     FF 7E 00 00 
036c7     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
036cb     00 36 7F 7F 
036cf     7F 7F 3E 1C 
036d3     08 00 00 00 
036d7     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
036db     00 08 1C 3E 
036df     7F 3E 1C 08 
036e3     00 00 00 00 
036e7     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
036eb     18 3C 3C E7 
036ef     E7 E7 18 18 
036f3     3C 00 00 00 
036f7     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
036fb     18 3C 7E FF 
036ff     FF 7E 18 18 
03703     3C 00 00 00 
03707     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0370b     00 00 00 18 
0370f     3C 3C 18 00 
03713     00 00 00 00 
03717     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
0371b     FF FF FF E7 
0371f     C3 C3 E7 FF 
03723     FF FF FF FF 
03727     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
0372b     00 00 3C 66 
0372f     42 42 66 3C 
03733     00 00 00 00 
03737     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
0373b     FF FF C3 99 
0373f     BD BD 99 C3 
03743     FF FF FF FF 
03747     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
0374b     78 70 58 4C 
0374f     1E 33 33 33 
03753     33 1E 00 00 
03757     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
0375b     3C 66 66 66 
0375f     66 3C 18 7E 
03763     18 18 00 00 
03767     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
0376b     FC CC FC 0C 
0376f     0C 0C 0C 0E 
03773     0F 07 00 00 
03777     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
0377b     FE C6 FE C6 
0377f     C6 C6 C6 E6 
03783     E7 67 03 00 
03787     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
0378b     18 18 DB 3C 
0378f     E7 3C DB 18 
03793     18 00 00 00 
03797     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
0379b     03 07 0F 1F 
0379f     7F 1F 0F 07 
037a3     03 01 00 00 
037a7     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
037ab     60 70 78 7C 
037af     7F 7C 78 70 
037b3     60 40 00 00 
037b7     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
037bb     18 3C 7E 18 
037bf     18 18 7E 3C 
037c3     18 00 00 00 
037c7     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
037cb     66 66 66 66 
037cf     66 66 66    | 	byte	$66[7]
037d2     00 66 66 00 
037d6     00 00 00 00 
037da     00 FE DB DB 
037de     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
037e2     D8 D8 D8 00 
037e6     00 00 00 3E 
037ea     63 06 1C 36 
037ee     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
037f2     30 63 3E 00 
037f6     00 00 00 00 
037fa     00 00 00 00 
037fe     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03802     7F 7F 7F 00 
03806     00 00 00 00 
0380a     00 18 3C 7E 
0380e     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
03812     3C 18 7E 00 
03816     00 00 00 00 
0381a     00 18 3C 7E 
0381e     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
03822     18 18 18 00 
03826     00 00 00 00 
0382a     00 18 18 18 
0382e     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
03832     7E 3C 18 00 
03836     00 00 00 00 
0383a     00 00 00 18 
0383e     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
03842     00 00 00 00 
03846     00 00 00 00 
0384a     00 00 00    | 	byte	$00[11]
0384d     0C 06 7F 06 
03851     0C 00 00 00 
03855     00 00 00 00 
03859     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0385d     00 03 03 03 
03861     7F 00 00 00 
03865     00 00 00 00 
03869     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0386d     14 36 7F 36 
03871     14 00 00 00 
03875     00 00 00 00 
03879     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
0387d     1C 1C 3E 3E 
03881     7F 7F 00 00 
03885     00 00 00 00 
03889     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0388d     7F 3E 3E 1C 
03891     1C 08 00 00 
03895     00 00 00 00 
03899     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0389d     00 00 00 00 
038a1     00 00 00 00 
038a5     00 00 00 00 
038a9     00 00       | 	byte	$00[14]
038ab     18 3C 3C 3C 
038af     18 18 18 00 
038b3     18 18 00 00 
038b7     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
038bb     66 24 00 00 
038bf     00 00 00 00 
038c3     00 00 00 00 
038c7     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
038cb     00 36 36 7F 
038cf     36 36 36 7F 
038d3     36 36 00 00 
038d7     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
038db     3E 63 43 03 
038df     3E 60 60 61 
038e3     63 3E 18 18 
038e7     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
038eb     00 00 43 63 
038ef     30 18 0C 06 
038f3     63 61 00 00 
038f7     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
038fb     1C 36 36 1C 
038ff     6E 3B 33 33 
03903     33 6E 00 00 
03907     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
0390b     0C 0C 0C 06 
0390f     00 00 00 00 
03913     00 00 00 00 
03917     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0391b     30 18 0C 0C 
0391f     0C 0C 0C 0C 
03923     18 30 00 00 
03927     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
0392b     0C 18 30 30 
0392f     30 30 30 30 
03933     18 0C 00 00 
03937     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
0393b     00 00 00 66 
0393f     3C FF 3C 66 
03943     00 00 00 00 
03947     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
0394b     00 00 00 18 
0394f     18 7E 18 18 
03953     00 00 00 00 
03957     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
0395b     00 00 00 00 
0395f     00 00 00 00 | 	byte	$00[8]
03963     18 18 18 0C 
03967     00 00 00 00 
0396b     00 00 00 00 
0396f     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
03973     00 00 00 00 
03977     00 00 00 00 
0397b     00 00 00 00 
0397f     00 00 00 00 | 	byte	$00[16]
03983     18 18 00 00 
03987     00 00 00 00 
0398b     00 00 40 60 
0398f     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
03993     03 01 00 00 
03997     00 00 00 00 
0399b     1C 36 63 63 
0399f     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
039a3     36 1C 00 00 
039a7     00 00 00 00 
039ab     18 1C 1E 18 
039af     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
039b3     18 7E 00 00 
039b7     00 00 00 00 
039bb     3E 63 60 30 
039bf     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
039c3     63 7F 00 00 
039c7     00 00 00 00 
039cb     3E 63 60 60 
039cf     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
039d3     63 3E 00 00 
039d7     00 00 00 00 
039db     30 38 3C 36 
039df     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
039e3     30 78 00 00 
039e7     00 00 00 00 
039eb     7F 03 03 03 
039ef     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
039f3     63 3E 00 00 
039f7     00 00 00 00 
039fb     1C 06 03 03 
039ff     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
03a03     63 3E 00 00 
03a07     00 00 00 00 
03a0b     7F 63 60 60 
03a0f     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
03a13     0C 0C 00 00 
03a17     00 00 00 00 
03a1b     3E 63 63 63 
03a1f     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
03a23     63 3E 00 00 
03a27     00 00 00 00 
03a2b     3E 63 63 63 
03a2f     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
03a33     30 1E 00 00 
03a37     00 00 00 00 
03a3b     00 00 00 18 
03a3f     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03a43     18 18 00 00 
03a47     00 00 00 00 
03a4b     00 00 00 18 
03a4f     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
03a53     18 18 0C 00 
03a57     00 00 00 00 
03a5b     00 60 30 18 
03a5f     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
03a63     30 60 00 00 
03a67     00 00 00 00 
03a6b     00 00 00 7E 
03a6f     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
03a73     00 00 00 00 
03a77     00 00 00 00 
03a7b     00          | 	byte	$00[9]
03a7c     06 0C 18 30 
03a80     60 30 18 0C 
03a84     06 00 00 00 
03a88     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
03a8c     63 63 30 18 
03a90     18 18 00 18 
03a94     18 00 00 00 
03a98     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
03a9c     3E 63 63 7B 
03aa0     7B 7B 3B 03 
03aa4     3E 00 00 00 
03aa8     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
03aac     1C 36 63 63 
03ab0     7F 63 63 63 
03ab4     63 00 00 00 
03ab8     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
03abc     66 66 66 3E 
03ac0     66 66 66 66 
03ac4     3F 00 00 00 
03ac8     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
03acc     66 43 03 03 
03ad0     03 03 43 66 
03ad4     3C 00 00 00 
03ad8     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
03adc     36 66 66 66 
03ae0     66 66 66 36 
03ae4     1F 00 00 00 
03ae8     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
03aec     66 46 16 1E 
03af0     16 06 46 66 
03af4     7F 00 00 00 
03af8     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
03afc     66 46 16 1E 
03b00     16 06 06 06 
03b04     0F 00 00 00 
03b08     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
03b0c     66 43 03 03 
03b10     7B 63 63 66 
03b14     5C 00 00 00 
03b18     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
03b1c     63 63 63 7F 
03b20     63 63 63 63 
03b24     63 00 00 00 
03b28     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
03b2c     18 18 18 18 
03b30     18 18 18 18 | 	byte	$18[8]
03b34     3C 00 00 00 
03b38     00 00 00 78 
03b3c     30 30 30 30 
03b40     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
03b44     1E 00 00 00 
03b48     00 00 00 67 
03b4c     66 66 36 1E 
03b50     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
03b54     67 00 00 00 
03b58     00 00 00 0F 
03b5c     06 06 06 06 
03b60     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
03b64     7F 00 00 00 
03b68     00 00 00 63 
03b6c     77 7F 7F 6B 
03b70     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
03b74     63 00 00 00 
03b78     00 00 00 63 
03b7c     67 6F 7F 7B 
03b80     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
03b84     63 00 00 00 
03b88     00 00 00 3E 
03b8c     63 63 63 63 
03b90     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03b94     3E 00 00 00 
03b98     00 00 00 3F 
03b9c     66 66 66 3E 
03ba0     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
03ba4     0F 00 00 00 
03ba8     00 00 00 3E 
03bac     63 63 63 63 
03bb0     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
03bb4     3E 30 70 00 
03bb8     00 00 00 3F 
03bbc     66 66 66 3E 
03bc0     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
03bc4     67 00 00 00 
03bc8     00 00 00 3E 
03bcc     63 63 06 1C 
03bd0     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
03bd4     3E 00 00 00 
03bd8     00 00 00 7E 
03bdc     7E 5A 18 18 
03be0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
03be4     3C 00 00 00 
03be8     00 00 00 63 
03bec     63 63 63 63 
03bf0     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
03bf4     3E 00 00 00 
03bf8     00 00 00 63 
03bfc     63 63 63 63 
03c00     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
03c04     08 00 00 00 
03c08     00 00 00 63 
03c0c     63 63 63 6B 
03c10     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
03c14     36 00 00 00 
03c18     00 00 00 63 
03c1c     63 36 3E 1C 
03c20     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
03c24     63 00 00 00 
03c28     00 00 00 66 
03c2c     66 66 66 3C 
03c30     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
03c34     3C 00 00 00 
03c38     00 00 00 7F 
03c3c     63 61 30 18 
03c40     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
03c44     7F 00 00 00 
03c48     00 00 00 3C 
03c4c     0C 0C 0C 0C 
03c50     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
03c54     3C 00 00 00 
03c58     00 00 00 00 
03c5c     01 03 07 0E 
03c60     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
03c64     40 00 00 00 
03c68     00 00 00 3C 
03c6c     30 30 30 30 
03c70     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
03c74     3C 00 00 00 
03c78     1C 36 00 00 
03c7c     00 00 00 00 
03c80     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03c84     00 00 00 00 
03c88     00 00 00 00 
03c8c     00 00 00 00 
03c90     00 00 00 00 
03c94     00          | 	byte	$00[17]
03c95     FF 00 00 0C 
03c99     18 00 00 00 
03c9d     00 00 00 00 
03ca1     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03ca5     00 00 00 00 
03ca9     00 00 00 00 
03cad     00          | 	byte	$00[9]
03cae     1E 30 3E 33 
03cb2     33 33 6E 00 
03cb6     00 00 00 00 
03cba     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
03cbe     1E 36 66 66 
03cc2     66 66 3E 00 
03cc6     00 00 00 00 
03cca     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03cce     3E 63 03 03 
03cd2     03 63 3E 00 
03cd6     00 00 00 00 
03cda     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
03cde     3C 36 33 33 
03ce2     33 33 6E 00 
03ce6     00 00 00 00 
03cea     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03cee     3E 63 7F 03 
03cf2     03 63 3E 00 
03cf6     00 00 00 00 
03cfa     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
03cfe     0C 1E 0C 0C 
03d02     0C 0C 1E 00 
03d06     00 00 00 00 
03d0a     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03d0e     6E 33 33 33 
03d12     33 33 3E 30 
03d16     33 1E 00 00 
03d1a     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
03d1e     36 6E 66 66 
03d22     66 66 67 00 
03d26     00 00 00 00 
03d2a     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
03d2e     1C 18 18 18 
03d32     18 18 3C 00 
03d36     00 00 00 00 
03d3a     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
03d3e     70 60 60 60 
03d42     60 60 60 66 
03d46     66 3C 00 00 
03d4a     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
03d4e     66 36 1E 1E 
03d52     36 66 67 00 
03d56     00 00 00 00 
03d5a     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
03d5e     18 18 18 18 
03d62     18 18       | 	byte	$18[6]
03d64     3C 00 00 00 
03d68     00 00 00 00 
03d6c     00 00 37 7F 
03d70     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
03d74     63 00 00 00 
03d78     00 00 00 00 
03d7c     00 00 3B 66 
03d80     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
03d84     66 00 00 00 
03d88     00 00 00 00 
03d8c     00 00 3E 63 
03d90     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
03d94     3E 00 00 00 
03d98     00 00 00 00 
03d9c     00 00 3B 66 
03da0     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
03da4     3E 06 06 0F 
03da8     00 00 00 00 
03dac     00 00 6E 33 
03db0     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
03db4     3E 30 30 78 
03db8     00 00 00 00 
03dbc     00 00 3B 6E 
03dc0     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
03dc4     0F 00 00 00 
03dc8     00 00 00 00 
03dcc     00 00 3E 63 
03dd0     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
03dd4     3E 00 00 00 
03dd8     00 00 00 08 
03ddc     0C 0C 3F 0C 
03de0     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
03de4     38 00 00 00 
03de8     00 00 00 00 
03dec     00 00 33 33 
03df0     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
03df4     6E 00 00 00 
03df8     00 00 00 00 
03dfc     00 00 63 63 
03e00     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
03e04     1C 00 00 00 
03e08     00 00 00 00 
03e0c     00 00 63 63 
03e10     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
03e14     36 00 00 00 
03e18     00 00 00 00 
03e1c     00 00 63 36 
03e20     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
03e24     63 00 00 00 
03e28     00 00 00 00 
03e2c     00 00 63 63 
03e30     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
03e34     7E 60 30 1F 
03e38     00 00 00 00 
03e3c     00 00 7F 33 
03e40     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
03e44     7F 00 00 00 
03e48     00 00 00 70 
03e4c     18 18 18 0E 
03e50     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
03e54     70 00 00 00 
03e58     00 00 00 18 
03e5c     18 18 18 18 
03e60     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
03e64     18 00 00 00 
03e68     00 00 00 0E 
03e6c     18 18 18 70 
03e70     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
03e74     0E 00 00 00 
03e78     6E 3B 00 00 
03e7c     00 00 00 00 
03e80     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03e84     00 00 00 00 
03e88     00 00 00 00 
03e8c     00 00       | 	byte	$00[10]
03e8e     08 1C 36 63 
03e92     63 63 7F 00 
03e96     00 00 00 00 
03e9a     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
03e9e     03 03 03 03 
03ea2     43 66 3C 18 
03ea6     30 1E 00 00 
03eaa     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
03eae     33 33 33 33 
03eb2     33 33       | 	byte	$33[6]
03eb4     6E 00 00 00 
03eb8     00 00 60 30 
03ebc     18 00 3E 63 
03ec0     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
03ec4     3E 00 00 00 
03ec8     00 00 08 1C 
03ecc     36 00 1E 30 
03ed0     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
03ed4     6E 00 00 00 
03ed8     00 00 00 00 
03edc     33 00 1E 30 
03ee0     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
03ee4     6E 00 00 00 
03ee8     00 00 1C 36 
03eec     1C 00 33 33 
03ef0     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
03ef4     6E 00 00 00 
03ef8     00 00 60 30 
03efc     18 00 3E 63 
03f00     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
03f04     3E 00 00 00 
03f08     00 00 00 00 
03f0c     00 00 3E 63 
03f10     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
03f14     3E 18 30 1E 
03f18     00 00 00 1C 
03f1c     58 78 38 18 
03f20     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
03f24     3C 00 00 00 
03f28     00 00 00 00 
03f2c     63 00 3E 63 
03f30     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
03f34     3E 00 00 00 
03f38     66 33 00 3E 
03f3c     63 63 63 63 
03f40     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03f44     3E 00 00 00 
03f48     00 00 CC 66 
03f4c     33 00 3E 63 
03f50     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
03f54     3E 00 00 00 
03f58     00 00 18 3C 
03f5c     66 00 1C 18 
03f60     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
03f64     3C 00 00 00 
03f68     30 18 00 7F 
03f6c     63 61 30 18 
03f70     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
03f74     7F 00 00 00 
03f78     00 63 00 08 
03f7c     1C 36 63 63 
03f80     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
03f84     63 00 00 00 
03f88     30 18 00 3C 
03f8c     66 43 03 03 
03f90     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
03f94     3C 00 00 00 
03f98     30 18 00 7F 
03f9c     66 46 16 1E 
03fa0     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
03fa4     7F 00 00 00 
03fa8     0C 06 00 0F 
03fac     06 06 06 06 
03fb0     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
03fb4     7F 00 00 00 
03fb8     30 18 00 1C 
03fbc     18 18 18 18 
03fc0     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
03fc4     3C 00 00 00 
03fc8     00 00 08 1C 
03fcc     36 00 3E 63 
03fd0     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
03fd4     3E 00 00 00 
03fd8     00 00 00 00 
03fdc     63 00 3E 63 
03fe0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
03fe4     3E 00 00 00 
03fe8     00 00 00 6F 
03fec     46 26 06 06 
03ff0     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
03ff4     7F 00 00 00 
03ff8     00 00 00 6E 
03ffc     4C 2C 0C 0C 
04000     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
04004     1E 00 00 00 
04008     30 18 00 3E 
0400c     63 63 06 1C 
04010     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
04014     3E 00 00 00 
04018     00 00 60 30 
0401c     18 00 3E 63 
04020     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
04024     3E 00 00 00 
04028     00 63 00 3E 
0402c     63 63 63 63 
04030     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
04034     3E 00 00 00 
04038     00 63 00 63 
0403c     63 63 63 63 
04040     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
04044     3E 00 00 00 
04048     6C 38 00 7E 
0404c     7E 5A 18 18 
04050     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
04054     3C 00 00 00 
04058     00 00 60 48 
0405c     2C 0C 3F 0C 
04060     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04064     38 00 00 00 
04068     00 00 00 0F 
0406c     26 36 1E 0E 
04070     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
04074     7F 00 00 00 
04078     00 00 00 00 
0407c     00 63 36 1C 
04080     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
04084     00 00 00 00 
04088     00 00       | 	byte	$00[6]
0408a     36 1C 08 00 
0408e     3E 63 03 03 
04092     03 63 3E 00 
04096     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
0409a     30 18 0C 00 
0409e     1E 30 3E 33 
040a2     33 33 6E 00 
040a6     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
040aa     60 30 18 00 
040ae     1C 18 18 18 
040b2     18 18 3C 00 
040b6     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
040ba     60 30 18 00 
040be     3E 63 63 63 
040c2     63 63 3E 00 
040c6     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
040ca     30 18 0C 00 
040ce     33 33 33 33 
040d2     33 33 6E 00 
040d6     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
040da     00 08 1C 36 
040de     63 63 7F 63 
040e2     63 63 63 18 
040e6     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
040ea     00 00 00 00 
040ee     1E 30 3E 33 
040f2     33 33 6E 18 
040f6     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
040fa     00 7F 63 61 
040fe     30 18 0C 06 
04102     43 63 7F 00 
04106     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
0410a     36 1C 08 00 
0410e     7F 33 18 0C 
04112     06 63 7F 00 
04116     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
0411a     00 7F 66 46 
0411e     16 1E 16 06 
04122     46 66 7F 18 
04126     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
0412a     00 00 00 00 
0412e     3E 63 7F 03 
04132     03 63 3E 18 
04136     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
0413a     00 3C 66 03 
0413e     1F 03 0F 03 
04142     03 66 3C 00 
04146     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
0414a     60 30 18 00 
0414e     7F 33 18 0C 
04152     06 63 7F 00 
04156     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
0415a     00 3C 66 43 
0415e     03 03 03 03 
04162     43 66 3C 00 
04166     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
0416a     00 00 00 00 
0416e     3E 63 06 1C 
04172     30 63 3E 18 
04176     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
0417a     00 00 00 00 
0417e     00 00       | 	byte	$00[6]
04180     6C 36 1B 36 
04184     6C 00 00 00 
04188     00 00 00 00 
0418c     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04190     1B 36 6C 36 
04194     1B 00 00 00 
04198     88 22 88 22 
0419c     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
041a0     88 22 88 22 
041a4     88 22 88 22 
041a8     AA 55 AA 55 
041ac     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
041b0     AA 55 AA 55 
041b4     AA 55 AA 55 
041b8     BB EE BB EE 
041bc     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
041c0     BB EE BB EE 
041c4     BB EE BB EE 
041c8     18 18 18 18 
041cc     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
041d0     18 18 18 18 
041d4     18 18 18 18 
041d8     18 18 18 18 
041dc     18 18 18    | 	byte	$18[15]
041df     1F 18 18 18 
041e3     18 18 18 18 
041e7     18 30 18 00 
041eb     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
041ef     63 7F 63 63 
041f3     63 63 00 00 
041f7     00 1C 36 00 
041fb     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
041ff     63 7F 63 63 
04203     63 63 00 00 
04207     00 36 1C 00 
0420b     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
0420f     1E 16 06 46 
04213     66 7F 00 00 
04217     00 00 00 00 
0421b     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
0421f     1C 30 60 63 
04223     63 3E 18 30 
04227     1E 6C 6C 6C 
0422b     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
0422f     6F 6C 6C 6C 
04233     6C 6C 6C 6C 
04237     6C 6C 6C 6C 
0423b     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0423f     6C 6C 6C 6C 
04243     6C 6C 6C 6C 
04247     6C          | 	byte	$6c[9]
04248     00 00 00 00 
0424c     00          | 	byte	$00[5]
0424d     7F 60 6F 6C 
04251     6C 6C 6C 6C 
04255     6C 6C 6C 6C 
04259     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0425d     6F 60 7F 00 
04261     00 00 00 00 
04265     00 00 00 18 
04269     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
0426d     61 30 18 0C 
04271     06 43 63 7F 
04275     00 00 00 00 
04279     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
0427d     00 7F 33 18 
04281     0C 06 63 7F 
04285     00 00 00 00 
04289     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
0428d     00 00 1F 18 
04291     18 18 18 18 
04295     18 18 18 18 
04299     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0429d     18 18 F8 00 
042a1     00 00 00 00 
042a5     00 00 00 18 
042a9     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
042ad     18 18 FF 00 
042b1     00 00 00 00 
042b5     00 00 00 00 
042b9     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
042bd     00 00 FF 18 
042c1     18 18 18 18 
042c5     18 18 18 18 
042c9     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
042cd     18 18 F8 18 
042d1     18 18 18 18 
042d5     18 18 18 00 
042d9     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
042dd     00 00 FF 00 
042e1     00 00 00 00 
042e5     00 00 00 18 
042e9     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
042ed     18 18 FF 18 
042f1     18 18 18 18 
042f5     18 18 18 63 
042f9     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
042fd     36 63 63 7F 
04301     63 63 63 63 
04305     00 00 00 00 
04309     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
0430d     00 1E 30 3E 
04311     33 33 33 6E 
04315     00 00 00 6C 
04319     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
0431d     EC 0C FC 00 
04321     00 00 00 00 
04325     00 00 00 00 
04329     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0432d     FC 0C EC 6C 
04331     6C 6C 6C 6C 
04335     6C 6C 6C 6C 
04339     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0433d     EF 00 FF 00 
04341     00 00 00 00 
04345     00 00 00 00 
04349     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0434d     FF 00 EF 6C 
04351     6C 6C 6C 6C 
04355     6C 6C 6C 6C 
04359     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
0435d     EC 0C EC 6C 
04361     6C 6C 6C 6C 
04365     6C 6C 6C 00 
04369     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
0436d     FF 00 FF 00 
04371     00 00 00 00 
04375     00 00 00 6C 
04379     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
0437d     EF 00 EF 6C 
04381     6C 6C 6C 6C 
04385     6C 6C 6C 00 
04389     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
0438d     63 3E 63 63 
04391     63 63 3E 63 
04395     00 00 00 00 
04399     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
0439d     30 3C 36 33 
043a1     33 33 33 6E 
043a5     00 00 00 00 
043a9     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
043ad     66 66 6F 66 
043b1     66 66 36 1F 
043b5     00 00 00 36 
043b9     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
043bd     66 66 66 66 
043c1     66 66       | 	byte	$66[6]
043c3     36 1F 00 00 
043c7     00 00 63 00 
043cb     7F 66 46 16 
043cf     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
043d3     66 7F 00 00 
043d7     00 6C 38 00 
043db     38 30 30 3C 
043df     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
043e3     33 6E 00 00 
043e7     00 36 1C 00 
043eb     63 67 6F 7F 
043ef     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
043f3     63 63 00 00 
043f7     00 30 18 00 
043fb     3C 18 18 18 
043ff     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04403     18 3C 00 00 
04407     00 3C 66 00 
0440b     3C 18 18 18 
0440f     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04413     18 3C 00 00 
04417     00 00 00 36 
0441b     1C 08 00 3E 
0441f     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
04423     63 3E 00 00 
04427     00 18 18 18 
0442b     18 18 18 18 
0442f     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
04433     00 00 00 00 
04437     00 00 00 00 
0443b     00 00 00 00 | 	byte	$00[12]
0443f     F8 18 18 18 
04443     18 18 18 18 
04447     18 FF FF FF 
0444b     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
0444f     FF FF FF FF 
04453     FF FF FF FF 
04457     FF          | 	byte	$ff[9]
04458     00 00 00 00 
0445c     00 00 00    | 	byte	$00[7]
0445f     FF FF FF FF 
04463     FF FF FF FF 
04467     FF          | 	byte	$ff[9]
04468     00 00 00 7E 
0446c     7E 5A 18 18 
04470     18 18 18 18 
04474     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
04478     1C 36 1C 63 
0447c     63 63 63 63 
04480     63 63 63 63 
04484     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04488     FF FF FF FF 
0448c     FF FF FF    | 	byte	$ff[7]
0448f     00 00 00 00 
04493     00 00 00 00 
04497     00          | 	byte	$00[9]
04498     30 18 00 3E 
0449c     63 63 63 63 
044a0     63 63 63 63 
044a4     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
044a8     00 00 00 1E 
044ac     33 33 33 1B 
044b0     33 63 63 63 
044b4     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
044b8     1C 36 00 3E 
044bc     63 63 63 63 
044c0     63 63 63 63 
044c4     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
044c8     30 18 00 63 
044cc     67 6F 7F 7B 
044d0     73 63 63 63 
044d4     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
044d8     00 00 60 30 
044dc     18 00 3B 66 
044e0     66 66 66 66 
044e4     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
044e8     00 00 36 1C 
044ec     08 00 3B 66 
044f0     66 66 66 66 
044f4     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
044f8     36 1C 00 3E 
044fc     63 63 06 1C 
04500     30 60 63 63 
04504     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
04508     00 00 36 1C 
0450c     08 00 3E 63 
04510     06 1C 30 63 
04514     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
04518     30 18 00 3F 
0451c     66 66 66 3E 
04520     36 66 66 66 
04524     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
04528     30 18 00 63 
0452c     63 63 63 63 
04530     63 63 63 63 
04534     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04538     00 00 60 30 
0453c     18 00 3B 6E 
04540     66 06 06 06 
04544     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
04548     66 33 00 63 
0454c     63 63 63 63 
04550     63 63 63 63 
04554     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04558     00 00 60 30 
0455c     18 00 63 63 
04560     63 63 63 63 
04564     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
04568     30 18 00 66 
0456c     66 66 66 3C 
04570     18 18 18 18 
04574     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
04578     00 00 00 08 
0457c     0C 0C 3F 0C 
04580     0C 0C 0C 6C 
04584     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
04588     30 18 00 00 
0458c     00 00 00 00 
04590     00 00 00 00 
04594     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04598     00 00 00 00 
0459c     00 00 00 00 | 	byte	$00[8]
045a0     7F 00 00 00 
045a4     00 00 00 00 
045a8     66 33 00 00 
045ac     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
045b0     00 00 00 00 
045b4     00 00 00 00 
045b8     00 00 00 00 
045bc     00 00 00 00 
045c0     00 00 00 00 
045c4     00          | 	byte	$00[21]
045c5     0C 06 3C 36 
045c9     1C 00 00 00 
045cd     00 00 00 00 
045d1     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
045d5     00 00 00 63 
045d9     3E 00 00 00 
045dd     00 00 00 00 
045e1     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
045e5     00 00 00 00 
045e9     3E 63 06 1C 
045ed     36 63 63 36 
045f1     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
045f5     00 00 00 00 
045f9     00 00 00 00 | 	byte	$00[8]
045fd     18 00 7E 00 
04601     18 00 00 00 
04605     00 00 00 00 
04609     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0460d     00 00 00 00 
04611     00 00 00 00 | 	byte	$00[8]
04615     18 30 1E 00 
04619     00 00 1C 36 
0461d     36 1C 00 00 
04621     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
04625     00 00 00 00 
04629     63 00 00 00 
0462d     00 00 00 00 
04631     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04635     00 00 00 18 
04639     18 00 00 00 
0463d     00 00 00 00 
04641     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04645     00 00 00 00 
04649     00          | 	byte	$00[5]
0464a     CC 66 33 00 
0464e     33 33 33 33 
04652     33 33 6E 00 
04656     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
0465a     00 3F 66 66 
0465e     66 3E 36 66 
04662     66 66 6F 00 
04666     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
0466a     36 1C 08 00 
0466e     3B 6E 66 06 
04672     06 06 0F 00 
04676     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
0467a     00 00 00 7E 
0467e     7E 7E 7E 7E 
04682     7E 7E 00 00 
04686     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
0468a     00 00 00 00 
0468e     00 00 00 00 
04692     00 00 00 00 
04696     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04698     00 00 00 00 
      ...             
046c8     00 00 00 00 
046cc     00 00 00    | st_font        file "st4font.def"
046cf     FF FF 00 00 
046d3     00 00 00 00 
046d7     00 18 18 18 
046db     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
046df     18 18 18 18 
046e3     18 18 18 18 
046e7     18          | 	byte	$18[9]
046e8     00 00 00 00 
046ec     00 00 00    | 	byte	$00[7]
046ef     FF FF 18 18 
046f3     18 18 18 18 
046f7     18 18 18 18 
046fb     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
046ff     FF FF 00 00 
04703     00 00 00 00 
04707     00 18 18 18 
0470b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0470f     1F 1F 18 18 
04713     18 18 18 18 
04717     18 18 18 18 
0471b     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0471f     F8 F8 18 18 
04723     18 18 18 18 
04727     18 00 00 00 
0472b     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0472f     1F 1F 18 18 
04733     18 18 18 18 
04737     18 00 00 00 
0473b     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0473f     F8 F8 18 18 
04743     18 18 18 18 
04747     18 18 18 18 
0474b     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0474f     1F 1F 00 00 
04753     00 00 00 00 
04757     00 18 18 18 
0475b     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0475f     F8 F8 00 00 
04763     00 00 00 00 
04767     00 18 18 18 
0476b     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
0476f     FF FF 18 18 
04773     18 18 18 18 
04777     18 00 00 18 
0477b     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
0477f     66 7E 7E 66 
04783     66 66 66 30 
04787     18 00 00 7E 
0478b     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
0478f     3E 06 06 06 
04793     06 7E 7E 18 
04797     0C 30 18 3C 
0479b     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
0479f     06 06 06 66 
047a3     66 7E 3C 00 
047a7     00 30 18 66 
047ab     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
047af     7E 7E 76 76 
047b3     66 66 66 00 
047b7     00 30 18 7C 
047bb     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
047bf     1C 38 70 60 
047c3     60 7E 3E 00 
047c7     00 30 18 7E 
047cb     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
047cf     18 0C 0C 06 
047d3     06 7E 7E 00 
047d7     00 18 18 00 
047db     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
047df     18 18 0C 0C 
047e3     06 7E 7E 00 
047e7     00 30 18 3C 
047eb     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
047ef     66 66 66 66 
047f3     66          | 	byte	$66[5]
047f4     7E 3C 00 00 
047f8     00 00 06 06 
047fc     06 06 16 1E 
04800     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
04804     7E 7E 00 00 
04808     00 00 00 00 
0480c     00 3C 7C 60 
04810     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
04814     7E 7C 30 18 
04818     00 00 00 00 
0481c     00 3C 7E 66 
04820     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
04824     7E 7C 18 0C 
04828     00 00 30 18 
0482c     00 3C 3E 06 
04830     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
04834     7E 7C 00 00 
04838     00 00 30 18 
0483c     00 3E 7E 66 
04840     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
04844     66 66 00 00 
04848     00 00 30 18 
0484c     00 7C 7E 06 
04850     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
04854     7E 3E 00 00 
04858     00 00 30 18 
0485c     00 7E 7E 30 
04860     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04864     7E 7E 00 00 
04868     00 00 18 18 
0486c     00 7E 7E 30 
04870     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04874     7E 7E 00 00 
04878     00 00 30 18 
0487c     00 3C 7E 66 
04880     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
04884     7E 3C 00 00 
04888     00 00 1C 1C 
0488c     18 18 38 3C 
04890     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
04894     3C 3C 00 00 
04898     00 00 00 00 
0489c     00 00 00 00 
048a0     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
048a4     00 00 00 00 
048a8     00 00       | 	byte	$00[6]
048aa     18 18 18 18 
048ae     18 18 18 18 | 	byte	$18[8]
048b2     00 00 18 18 
048b6     00 00 00 00 
048ba     66 66 66 66 
048be     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
048c2     00 00 00 00 
048c6     00 00 00 00 
048ca     00          | 	byte	$00[9]
048cb     66 66 FF FF 
048cf     66 66 FF FF 
048d3     66 66 00 00 
048d7     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
048db     7C 7E 06 06 
048df     3E 7C 60 60 
048e3     7E 3E 18 18 
048e7     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
048eb     66 30 30 18 
048ef     18 0C 0C 66 
048f3     66 00 00 00 
048f7     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
048fb     66 66 3C 1C 
048ff     1C FC FE 66 
04903     66 FE FC 00 
04907     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
0490b     18 18 18 18 
0490f     00 00 00 00 
04913     00 00 00 00 
04917     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
0491b     18 1C 0C 0C 
0491f     0C 0C 0C 0C 
04923     1C 18 30 00 
04927     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
0492b     18 38 30 30 
0492f     30 30 30 30 
04933     38 18 0C 00 
04937     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
0493b     66 66 3C 3C 
0493f     FF FF 3C 3C 
04943     66 66 00 00 
04947     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
0494b     00 18 18 18 
0494f     7E 7E 18 18 
04953     18 00 00 00 
04957     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0495b     00 00 00 00 
0495f     00 00       | 	byte	$00[6]
04961     18 18 18 18 
04965     18          | 	byte	$18[5]
04966     0C 04 00 00 
0496a     00 00 00 00 
0496e     7E 7E 00 00 
04972     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
04976     00 00 00 00 
0497a     00 00 00 00 
0497e     00 00 00 00 
04982     00          | 	byte	$00[13]
04983     18 18 18 00 
04987     00 00 00 60 
0498b     60 60 30 30 
0498f     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
04993     06 06 06 00 
04997     00 00 00 3C 
0499b     7E 66 66 66 
0499f     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
049a3     66 7E 3C 00 
049a7     00 00 00 18 
049ab     18 1C 1C 18 
049af     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
049b3     18 7E 7E 00 
049b7     00 00 00 3C 
049bb     7E 66 66 30 
049bf     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
049c3     0C 7E 7E 00 
049c7     00 00 00 7E 
049cb     7E 30 30 18 
049cf     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
049d3     66 7E 3C 00 
049d7     00 00 00 30 
049db     30 38 38 3C 
049df     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
049e3     7E 30 30 00 
049e7     00 00 00 7E 
049eb     7E 06 06 3E 
049ef     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
049f3     66 7E 3C 00 
049f7     00 00 00 38 
049fb     3C 0E 06 06 
049ff     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
04a03     66 7E 3C 00 
04a07     00 00 00 7E 
04a0b     7E 60 60 30 
04a0f     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
04a13     0C 0C 0C 00 
04a17     00 00 00 3C 
04a1b     7E 66 66 3C 
04a1f     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
04a23     66 7E 3C 00 
04a27     00 00 00 3C 
04a2b     7E 66 66 7E 
04a2f     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
04a33     70 3C 1C 00 
04a37     00 00 00 00 
04a3b     00 00 18 18 
04a3f     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
04a43     18 18 18 00 
04a47     00 00 00 00 
04a4b     00 00 18 18 
04a4f     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
04a53     18 18 18 0C 
04a57     04 00 00 00 
04a5b     70 38 1C 0E 
04a5f     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
04a63     70 00 00 00 
04a67     00 00 00 00 
04a6b     00 00 7E 7E 
04a6f     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
04a73     00 00 00 00 
04a77     00 00 00 00 | 	byte	$00[8]
04a7b     0E 1C 38 70 
04a7f     E0 70 38 1C 
04a83     0E 00 00 00 
04a87     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
04a8b     7E 66 66 30 
04a8f     30 18 18 18 
04a93     00 18 18 00 
04a97     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
04a9b     7E 66 66 66 
04a9f     66 36 06 66 
04aa3     66 7E 3C 00 
04aa7     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
04aab     3C 7E 66 66 
04aaf     66 7E 7E 66 
04ab3     66 66 66 00 
04ab7     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
04abb     7E 66 66 7E 
04abf     3E 66 66 66 
04ac3     66 7E 3E 00 
04ac7     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
04acb     7E 66 66 06 
04acf     06 06 06 66 
04ad3     66 7E 3C 00 
04ad7     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
04adb     7E 66 66 66 
04adf     66 66 66 66 
04ae3     66 7E 3E 00 
04ae7     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
04aeb     7E 06 06 3E 
04aef     3E 06 06 06 
04af3     06 7E 7E 00 
04af7     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
04afb     7E 06 06 3E 
04aff     3E 06 06 06 
04b03     06 06 06 00 
04b07     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
04b0b     7E 06 06 76 
04b0f     76 66 66 66 
04b13     66 7E 3C 00 
04b17     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
04b1b     66 66 66 7E 
04b1f     7E 66 66 66 
04b23     66 66 66 00 
04b27     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
04b2b     7E 18 18 18 
04b2f     18 18 18 18 
04b33     18 7E 7E 00 
04b37     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
04b3b     60 60 60 60 
04b3f     60 60 60    | 	byte	$60[7]
04b42     66 66 7E 3C 
04b46     00 00 00 00 
04b4a     66 66 36 36 
04b4e     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
04b52     66 66 C6 C6 
04b56     00 00 00 00 
04b5a     06 06 06 06 
04b5e     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
04b62     06 06 7E 7E 
04b66     00 00 00 00 
04b6a     C6 C6 EE EE 
04b6e     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
04b72     C6 C6 C6 C6 
04b76     00 00 00 00 
04b7a     66 66 66 6E 
04b7e     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
04b82     76 66 66 66 
04b86     00 00 00 00 
04b8a     3C 7E 66 66 
04b8e     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04b92     66 66 7E 3C 
04b96     00 00 00 00 
04b9a     3E 7E 66 66 
04b9e     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
04ba2     06 06 06 06 
04ba6     00 00 00 00 
04baa     3C 7E 66 66 
04bae     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04bb2     66 56 3E 6C 
04bb6     00 00 00 00 
04bba     3E 7E 66 66 
04bbe     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
04bc2     66 66 C6 C6 
04bc6     00 00 00 00 
04bca     7C 7E 06 06 
04bce     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
04bd2     60 60 7E 3E 
04bd6     00 00 00 00 
04bda     7E 7E 18 18 
04bde     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
04be2     18 18 18 18 
04be6     00 00 00 00 
04bea     66 66 66 66 
04bee     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04bf2     66 66 7E 3C 
04bf6     00 00 00 00 
04bfa     66 66 66 66 
04bfe     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04c02     3C 3C 18 18 
04c06     00 00 00 00 
04c0a     C6 C6 C6 C6 
04c0e     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
04c12     FE EE C6 82 
04c16     00 00 00 00 
04c1a     66 66 66 3C 
04c1e     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
04c22     3C 66 66 66 
04c26     00 00 00 00 
04c2a     66 66 66 66 
04c2e     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
04c32     18 18 18 18 
04c36     00 00 00 00 
04c3a     7E 7E 30 30 
04c3e     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
04c42     06 06 7E 7E 
04c46     00 00 00 00 
04c4a     3C 3C 0C 0C 
04c4e     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
04c52     0C 0C 3C 3C 
04c56     00 00 00 00 
04c5a     06 06 0C 0C 
04c5e     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
04c62     60 60 C0 C0 
04c66     00 00 00 00 
04c6a     3C 3C 30 30 
04c6e     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
04c72     30 30 3C 3C 
04c76     00 00 00 00 
04c7a     18 18 3C 3C 
04c7e     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
04c82     00 00 00 00 
04c86     00 00 00 00 
04c8a     00 00 00 00 
04c8e     00 00 00 00 
04c92     00 00       | 	byte	$00[18]
04c94     FE FE 00 00 
04c98     00 00 0C 0C 
04c9c     18 18 00 00 
04ca0     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
04ca4     00 00 00 00 
04ca8     00 00 00 00 
04cac     00          | 	byte	$00[9]
04cad     3C 7C 60 7C 
04cb1     7E 66 66 7E 
04cb5     7C 00 00 00 
04cb9     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
04cbd     3E 7E 66 66 
04cc1     66 66 66 7E 
04cc5     3E 00 00 00 
04cc9     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
04ccd     3C 3E 06 06 
04cd1     06 06 06 7E 
04cd5     7C 00 00 00 
04cd9     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
04cdd     7C 7E 66 66 
04ce1     66 66 66 7E 
04ce5     7C 00 00 00 
04ce9     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
04ced     3C 7E 66 66 
04cf1     7E 06 06 7E 
04cf5     7C 00 00 00 
04cf9     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
04cfd     18 7E 7E 18 
04d01     18 18 18 18 
04d05     18 00 00 00 
04d09     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04d0d     7C 7E 66 66 
04d11     66 66 7E 7C 
04d15     60 7E 3E 00 
04d19     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
04d1d     3E 7E 66 66 
04d21     66 66 66 66 
04d25     66 00 00 00 
04d29     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
04d2d     1C 1C 18 18 
04d31     18 18 18 3C 
04d35     3C 00 00 00 
04d39     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
04d3d     30 30 30 30 
04d41     30 30 30 30 
04d45     30          | 	byte	$30[9]
04d46     3E 1E 00 00 
04d4a     06 06 06 36 
04d4e     36 1E 1E 1E 
04d52     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
04d56     00 00 00 00 
04d5a     1C 1C 18 18 
04d5e     18 18 18 18 
04d62     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
04d66     00 00 00 00 
04d6a     00 00 00    | 	byte	$00[7]
04d6d     6C FE FE D6 
04d71     D6 C6 C6 C6 
04d75     C6 00 00 00 
04d79     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
04d7d     3E 7E 66 66 
04d81     66 66 66 66 
04d85     66 00 00 00 
04d89     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
04d8d     3C 7E 66 66 
04d91     66 66 66 7E 
04d95     3C 00 00 00 
04d99     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
04d9d     3E 7E 66 66 
04da1     66 66 66 7E 
04da5     3E 06 06 00 
04da9     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
04dad     7C 7E 66 66 
04db1     66 66 66 7E 
04db5     7C 60 60 00 
04db9     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
04dbd     3E 7E 66 06 
04dc1     06 06 06 06 
04dc5     06 00 00 00 
04dc9     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
04dcd     7C 7E 06 0E 
04dd1     3C 70 60 7E 
04dd5     3E 00 00 00 
04dd9     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
04ddd     7E 7E 18 18 
04de1     18 18 18 78 
04de5     70 00 00 00 
04de9     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
04ded     66 66 66 66 
04df1     66 66 66    | 	byte	$66[7]
04df4     7E 7C 00 00 
04df8     00 00 00 00 
04dfc     00 66 66 66 
04e00     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
04e04     18 18 00 00 
04e08     00 00 00 00 
04e0c     00 C6 C6 D6 
04e10     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
04e14     C6 82 00 00 
04e18     00 00 00 00 
04e1c     00 66 66 3C 
04e20     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
04e24     66 66 00 00 
04e28     00 00 00 00 
04e2c     00 66 66 66 
04e30     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
04e34     7C 60 7E 3E 
04e38     00 00 00 00 
04e3c     00 7E 7E 30 
04e40     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04e44     7E 7E 00 00 
04e48     00 00 30 18 
04e4c     18 18 18 0C 
04e50     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
04e54     18 30 00 00 
04e58     00 00 18 18 
04e5c     18 18 18 18 
04e60     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04e64     18 18 00 00 
04e68     00 00 0C 18 
04e6c     18 18 18 30 
04e70     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
04e74     18 0C 00 00 
04e78     00 00 6C 7E 
04e7c     36 00 00 00 
04e80     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
04e84     00 00 00 00 
04e88     00 00 00 00 
04e8c     00          | 	byte	$00[9]
04e8d     18 18 18 18 
04e91     18 18 00 00 
04e95     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
04e98     00 6C FE FE 
04e9c     7C 38 10 00 
04ea0     18 18 18 F8 
04ea4     F8 18 18 18 | a8_font        file "atari8.fnt"
04ea8     C0 C0 C0 C0 
04eac     C0 C0 C0 C0 | 	byte	$c0[8]
04eb0     18 18 18 1F 
04eb4     1F 00 00 00 
04eb8     18 18 18 1F 
04ebc     1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
04ec0     00 00 00 1F 
04ec4     1F 18 18 18 
04ec8     C0 E0 70 38 
04ecc     1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
04ed0     03 07 0E 1C 
04ed4     38 70 E0 C0 
04ed8     80 C0 E0 F0 
04edc     F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
04ee0     00 00 00 00 
04ee4     F0 F0 F0 F0 
04ee8     01 03 07 0F 
04eec     1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
04ef0     F0 F0 F0 F0 
04ef4     00 00 00 00 
04ef8     0F 0F 0F 0F 
04efc     00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
04f00     FF FF 00 00 
04f04     00 00 00 00 
04f08     00 00 00 00 
04f0c     00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
04f10     00 00 00 00 
04f14     0F 0F 0F 0F 
04f18     00 38 38 EE 
04f1c     EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
04f20     00 00 00 F8 
04f24     F8 18 18 18 
04f28     00 00 00 FF 
04f2c     FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
04f30     18 18 18 FF 
04f34     FF 18 18 18 
04f38     00 00 3C 7E 
04f3c     7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
04f40     00 00 00 00 
04f44     FF FF FF FF 
04f48     03 03 03 03 
04f4c     03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
04f50     00 00 00 FF 
04f54     FF 18 18 18 
04f58     18 18 18 FF 
04f5c     FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
04f60     0F 0F 0F 0F 
04f64     0F 0F 0F 0F | 	byte	$0f[8]
04f68     18 18 18 F8 
04f6c     F8 00 00 00 
04f70     1E 06 1E 06 
04f74     7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
04f78     00 18 3C 7E 
04f7c     18 18 18 00 
04f80     00 18 18 18 
04f84     7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
04f88     00 18 0C 7E 
04f8c     0C 18 00 00 
04f90     00 18 30 7E 
04f94     30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
04f98     00 00 00 00 
04f9c     00 00 00 00 
04fa0     00          | 	byte	$00[9]
04fa1     18 18 18 18 
04fa5     00 18 00 00 
04fa9     66 66 66 00 
04fad     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
04fb1     66 FF 66 66 
04fb5     FF 66 00 18 
04fb9     7C 06 3C 60 
04fbd     3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
04fc1     66 36 18 0C 
04fc5     66 62 00 38 
04fc9     6C 38 1C F6 
04fcd     66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
04fd1     18 18 18 00 
04fd5     00 00 00 00 
04fd9     70 38 18 18 
04fdd     38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
04fe1     0E 1C 18 18 
04fe5     1C 0E 00 00 
04fe9     66 3C FF 3C 
04fed     66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
04ff1     18 18 7E 18 
04ff5     18 00 00 00 
04ff9     00 00 00 00 
04ffd     18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
05001     00 00 7E 00 
05005     00 00 00 00 
05009     00 00 00 00 
0500d     18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
05011     60 30 18 0C 
05015     06 02 00 00 
05019     3C 66 76 6E 
0501d     66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
05021     18 1C 18 18 
05025     18 7E 00 00 
05029     3C 66 30 18 
0502d     0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
05031     7E 30 18 30 
05035     66 3C 00 00 
05039     30 38 3C 36 
0503d     7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
05041     7E 06 3E 60 
05045     66 3C 00 00 
05049     3C 06 3E 66 
0504d     66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
05051     7E 60 30 18 
05055     0C 0C 00 00 
05059     3C 66 3C 66 
0505d     66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
05061     3C 66 7C 60 
05065     30 1C 00 00 
05069     00 18 18 00 
0506d     18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
05071     00 18 18 00 
05075     18 18 0C 60 
05079     30 18 0C 18 
0507d     30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
05081     00 7E 00 00 
05085     7E 00 00 06 
05089     0C 18 30 18 
0508d     0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
05091     3C 66 30 18 
05095     00 18 00 00 
05099     3C 66 76 76 
0509d     06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
050a1     18 3C 66 66 
050a5     7E 66 00 00 
050a9     3E 66 3E 66 
050ad     66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
050b1     3C 66 06 06 
050b5     66 3C 00 00 
050b9     1E 36 66 66 
050bd     36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
050c1     7E 06 3E 06 
050c5     06 7E 00 00 
050c9     7E 06 3E 06 
050cd     06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
050d1     7C 06 06 76 
050d5     66 7C 00 00 
050d9     66 66 7E 66 
050dd     66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
050e1     7E 18 18 18 
050e5     18 7E 00 00 
050e9     60 60 60 60 
050ed     66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
050f1     66 36 1E 1E 
050f5     36 66 00 00 
050f9     06 06 06 06 
050fd     06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
05101     C6 EE FE D6 
05105     C6 C6 00 00 
05109     66 6E 7E 7E 
0510d     76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
05111     3C 66 66 66 
05115     66 3C 00 00 
05119     3E 66 66 3E 
0511d     06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
05121     3C 66 66 66 
05125     36 6C 00 00 
05129     3E 66 66 3E 
0512d     36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
05131     3C 06 3C 60 
05135     60 3C 00 00 
05139     7E 18 18 18 
0513d     18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
05141     66 66 66 66 
05145     66          | 	byte	$66[5]
05146     7E 00 00 66 
0514a     66 66 66 3C 
0514e     18 00 00 C6 
05152     C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
05156     C6 00 00 66 
0515a     66 3C 3C 66 
0515e     66 00 00 66 
05162     66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
05166     18 00 00 7E 
0516a     30 18 0C 06 
0516e     7E 00 00 78 
05172     18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
05176     78 00 00 02 
0517a     06 0C 18 30 
0517e     60 00 00 1E 
05182     18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
05186     1E 00 00 10 
0518a     38 6C C6 00 
0518e     00 00 00 00 
05192     00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
05196     FF 00 00 18 
0519a     3C 7E 7E 3C 
0519e     18 00 00 00 
051a2     3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
051a6     7C 00 00 06 
051aa     06 3E 66 66 
051ae     3E 00 00 00 
051b2     3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
051b6     3C 00 00 60 
051ba     60 7C 66 66 
051be     7C 00 00 00 
051c2     3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
051c6     3C 00 00 70 
051ca     18 7C 18 18 
051ce     18 00 00 00 
051d2     7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
051d6     60 3E 00 06 
051da     06 3E 66 66 
051de     66 00 00 18 
051e2     00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
051e6     3C 00 00 60 
051ea     00 60 60 60 
051ee     60 3C 00 06 
051f2     06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
051f6     66 00 00 1C 
051fa     18 18 18 18 
051fe     3C 00 00 00 
05202     66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
05206     C6 00 00 00 
0520a     3E 66 66 66 
0520e     66 00 00 00 
05212     3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
05216     3C 00 00 00 
0521a     3E 66 66 3E 
0521e     06 06 00 00 
05222     7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
05226     60 60 00 00 
0522a     3E 66 06 06 
0522e     06 00 00 00 
05232     7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
05236     3E 00 00 18 
0523a     7E 18 18 18 
0523e     70 00 00 00 
05242     66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
05246     7C 00 00 00 
0524a     66 66 66 3C 
0524e     18 00 00 00 
05252     C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
05256     6C 00 00 00 
0525a     66 3C 18 3C 
0525e     66 00 00 00 
05262     66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
05266     30 1E 00 00 
0526a     7E 30 18 0C 
0526e     7E 00 00 18 
05272     3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
05276     3C 00 18 18 
0527a     18 18 18 18 
0527e     18 18 00 7E 
05282     1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
05286     60 00 10 18 
0528a     1C 1E 1C 18 
0528e     10 00 08 18 
05292     38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
05296     08 00       | 	byte	$08, $00
05298     00 00 00 00 
0529c     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
052a0     00 00 00 00 
052a4     00 80 80 80 
052a8     00 00 00 FF 
052ac     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
052b0     00 00 00 00 
052b4     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
052b5     80 00 00 00 
052b9     00 80 00 00 
052bd     80 80 00 00 
052c1     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
052c5     80 00 80 00 
052c9     00 40 80 00 
052cd     AA AA AA 00 
052d1     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
052d5     FF 00 00 00 
052d9     00 FF 00 00 
052dd     FF FF 00 00 
052e1     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
052e5     FF 00 FF 00 
052e9     00 FF FF 00 
052ed     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
052f0     00 00 00 00 
052f4     00          | ataripalette   file "ataripalettep2.def"
052f5     11 11 11 00 
052f9     22 22 22 00 
052fd     33 33 33 00 
05301     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
05305     55 55 55 00 
05309     66 66 66 00 
0530d     77 77 77 00 
05311     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
05315     99 99 99 00 
05319     AA AA AA 00 
0531d     BB BB BB 00 
05321     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
05325     DD DD DD 00 
05329     EE EE EE 00 
0532d     FF FF FF 00 
05331     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
05335     00 14 40 00 
05339     00 1E 60 00 
0533d     00 28 80 00 
05341     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
05345     00 3C BF 00 
05349     00 46 DF 00 
0534d     00 50 FF 00 
05351     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
05355     39 77 FF 00 
05359     55 8A FF 00 
0535d     71 9E FF 00 
05361     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
05365     AA C5 FF 00 
05369     C6 D8 FF 00 
0536d     E3 EC FF 00 
05371     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
05375     00 00 40 00 
05379     00 00 60 00 
0537d     00 00 80 00 
05381     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
05385     00 00 BF 00 
05389     00 00 DF 00 
0538d     00 00 FF 00 
05391     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
05395     39 39 FF 00 
05399     55 55 FF 00 
0539d     71 71 FF 00 
053a1     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
053a5     AA AA FF 00 
053a9     C6 C6 FF 00 
053ad     E3 E3 FF 00 
053b1     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
053b5     20 00 40 00 
053b9     30 00 60 00 
053bd     40 00 80 00 
053c1     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
053c5     60 00 BF 00 
053c9     70 00 DF 00 
053cd     80 00 FF 00 
053d1     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
053d5     9C 39 FF 00 
053d9     AA 55 FF 00 
053dd     B8 71 FF 00 
053e1     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
053e5     D5 AA FF 00 
053e9     E3 C6 FF 00 
053ed     F1 E3 FF 00 
053f1     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
053f5     40 00 40 00 
053f9     60 00 60 00 
053fd     80 00 80 00 
05401     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
05405     BF 00 BF 00 
05409     DF 00 DF 00 
0540d     FF 00 FF 00 
05411     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
05415     FF 39 FF 00 
05419     FF 55 FF 00 
0541d     FF 71 FF 00 
05421     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
05425     FF AA FF 00 
05429     FF C6 FF 00 
0542d     FF E3 FF 00 
05431     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
05435     40 00 20 00 
05439     60 00 30 00 
0543d     80 00 40 00 
05441     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
05445     BF 00 60 00 
05449     DF 00 70 00 
0544d     FF 00 80 00 
05451     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
05455     FF 39 9C 00 
05459     FF 55 AA 00 
0545d     FF 71 B8 00 
05461     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
05465     FF AA D5 00 
05469     FF C6 E3 00 
0546d     FF E3 F1 00 
05471     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
05475     40 00 00 00 
05479     60 00 00 00 
0547d     80 00 00 00 
05481     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
05485     BF 00 00 00 
05489     DF 00 00 00 
0548d     FF 00 00 00 
05491     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
05495     FF 39 39 00 
05499     FF 55 55 00 
0549d     FF 71 71 00 
054a1     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
054a5     FF AA AA 00 
054a9     FF C6 C6 00 
054ad     FF E3 E3 00 
054b1     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
054b5     40 10 00 00 
054b9     60 18 00 00 
054bd     80 20 00 00 
054c1     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
054c5     BF 30 00 00 
054c9     DF 38 00 00 
054cd     FF 40 00 00 
054d1     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
054d5     FF 6A 39 00 
054d9     FF 80 55 00 
054dd     FF 95 71 00 
054e1     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
054e5     FF BF AA 00 
054e9     FF D5 C6 00 
054ed     FF EA E3 00 
054f1     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
054f5     40 20 00 00 
054f9     60 30 00 00 
054fd     80 40 00 00 
05501     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
05505     BF 60 00 00 
05509     DF 70 00 00 
0550d     FF 80 00 00 
05511     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
05515     FF 9C 39 00 
05519     FF AA 55 00 
0551d     FF B8 71 00 
05521     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
05525     FF D5 AA 00 
05529     FF E3 C6 00 
0552d     FF F1 E3 00 
05531     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
05535     40 30 00 00 
05539     60 48 00 00 
0553d     80 60 00 00 
05541     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
05545     BF 90 00 00 
05549     DF A8 00 00 
0554d     FF C0 00 00 
05551     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
05555     FF CE 39 00 
05559     FF D5 55 00 
0555d     FF DC 71 00 
05561     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
05565     FF EA AA 00 
05569     FF F1 C6 00 
0556d     FF F8 E3 00 
05571     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
05575     30 40 00 00 
05579     48 60 00 00 
0557d     60 80 00 00 
05581     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
05585     90 BF 00 00 
05589     A8 DF 00 00 
0558d     C0 FF 00 00 
05591     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
05595     CE FF 39 00 
05599     D5 FF 55 00 
0559d     DC FF 71 00 
055a1     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
055a5     EA FF AA 00 
055a9     F1 FF C6 00 
055ad     F8 FF E3 00 
055b1     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
055b5     00 40 00 00 
055b9     00 60 00 00 
055bd     00 80 00 00 
055c1     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
055c5     00 BF 00 00 
055c9     00 DF 00 00 
055cd     00 FF 00 00 
055d1     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
055d5     39 FF 39 00 
055d9     55 FF 55 00 
055dd     71 FF 71 00 
055e1     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
055e5     AA FF AA 00 
055e9     C6 FF C6 00 
055ed     E3 FF E3 00 
055f1     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
055f5     00 40 14 00 
055f9     00 60 1E 00 
055fd     00 80 28 00 
05601     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
05605     00 BF 3C 00 
05609     00 DF 46 00 
0560d     00 FF 50 00 
05611     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
05615     39 FF 77 00 
05619     55 FF 8A 00 
0561d     71 FF 9E 00 
05621     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
05625     AA FF C5 00 
05629     C6 FF D8 00 
0562d     E3 FF EC 00 
05631     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
05635     00 40 28 00 
05639     00 60 3C 00 
0563d     00 80 50 00 
05641     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
05645     00 BF 78 00 
05649     00 DF 8C 00 
0564d     00 FF A0 00 
05651     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
05655     39 FF B5 00 
05659     55 FF C0 00 
0565d     71 FF CA 00 
05661     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
05665     AA FF DF 00 
05669     C6 FF EA 00 
0566d     E3 FF F4 00 
05671     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
05675     00 40 40 00 
05679     00 60 60 00 
0567d     00 80 80 00 
05681     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
05685     00 BF BF 00 
05689     00 DF DF 00 
0568d     00 FF FF 00 
05691     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
05695     39 FF FF 00 
05699     55 FF FF 00 
0569d     71 FF FF 00 
056a1     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
056a5     AA FF FF 00 
056a9     C6 FF FF 00 
056ad     E3 FF FF 00 
056b1     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
056b5     00 28 40 00 
056b9     00 3C 60 00 
056bd     00 50 80 00 
056c1     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
056c5     00 78 BF 00 
056c9     00 8C DF 00 
056cd     00 A0 FF 00 
056d1     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
056d5     39 B5 FF 00 
056d9     55 C0 FF 00 
056dd     71 CA FF 00 
056e1     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
056e5     AA DF FF 00 
056e9     C6 EA FF 00 
056ed     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
056f0                 | '**********************************************************************************
056f0                 | '
056f0                 | '        Timings and colors definitions
056f0                 | '
056f0                 | '**********************************************************************************
056f0                 | 
056f0                 |    'streamer sets for text mode, to add to timings[0..5]
056f0                 | ' todo for the retromachine: 768x576
056f0                 | 
056f0                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
056f0     10 00 00 00 
056f4     50 00 00 00 
056f8     14 00 00 00 
056fc     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
05700     70 00 00 00 
05704     08 00 00 00 
05708     30 00 00 00 
0570c     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
05710     10 00 00 00 
05714     10 00 00 00 
05718     00 00 00 00 
0571c     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
05720     E0 01 00 00 
05724     F6 32 24 15 
05728     FB 6C C3 01 
0572c     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
05730                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
05730                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
05730     30 00 00 00 
05734     50 00 00 00 
05738     34 00 00 00 
0573c     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
05740     20 00 00 00 
05744     08 00 00 00 
05748     16 00 00 00 
0574c     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
05750     24 00 00 00 
05754     18 00 00 00 
05758     40 00 00 00 
0575c     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
05760     F0 01 00 00 
05764     F6 32 24 15 
05768     FB 6C C3 01 
0576c     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
05770                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
05770     10 00 00 00 
05774     40 00 00 00 
05778     10 00 00 00 
0577c     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
05780     08 00 00 00 
05784     08 00 00 00 
05788     08 00 00 00 
0578c     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
05790     40 00 00 00 
05794     20 00 00 00 
05798     80 00 00 00 
0579c     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
057a0     E0 01 00 00 
057a4     70 AE E9 10 
057a8     FB 8B FF 01 
057ac     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
057b0     10 00 00 00 
057b4     42 00 00 00 
057b8     14 00 00 00 
057bc     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
057c0     00 00 00 00 
057c4     08 00 00 00 
057c8     00 00 00 00 
057cc     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
057d0     10 00 00 00 
057d4     10 00 00 00 
057d8     C0 00 00 00 
057dc     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
057e0     40 02 00 00 
057e4     F6 32 24 15 
057e8     FB 6C C3 01 
057ec     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
057f0     50 00 00 00 
057f4     A0 00 00 00 
057f8     54 00 00 00 
057fc     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
05800     08 00 00 00 
05804     08 00 00 00 
05808     08 00 00 00 
0580c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05810     0C 00 00 00 
05814     08 00 00 00 
05818     00 01 00 00 
0581c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
05820     E0 01 00 00 
05824     10 06 56 15 
05828     FB 64 C3 01 
0582c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
05830     50 00 00 00 
05834     32 00 00 00 
05838     50 00 00 00 
0583c     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
05840     08 00 00 00 
05844     08 00 00 00 
05848     08 00 00 00 
0584c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05850     0C 00 00 00 
05854     08 00 00 00 
05858     40 01 00 00 
0585c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
05860     E0 01 00 00 
05864     F2 CD 33 13 
05868     FB 53 92 01 
0586c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
05870     18 00 00 00 
05874     30 00 00 00 
05878     18 00 00 00 
0587c     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
05880     08 00 00 00 
05884     08 00 00 00 
05888     08 00 00 00 
0588c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05890     0C 00 00 00 
05894     08 00 00 00 
05898     80 01 00 00 
0589c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
058a0     E0 01 00 00 
058a4     F4 8F 11 11 
058a8     FB 3A 55 01 
058ac     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
058b0     20 00 00 00 
058b4     40 00 00 00 
058b8     22 00 00 00 
058bc     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
058c0     00 00 00 00 
058c4     08 00 00 00 
058c8     00 00 00 00 
058cc     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
058d0     0C 00 00 00 
058d4     08 00 00 00 
058d8     C0 01 00 00 
058dc     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
058e0     F0 01 00 00 
058e4     F2 CD 33 13 
058e8     FB 53 92 01 
058ec     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
058f0                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
058f0     00 75 C7 97 
058f4     27 47 F6 0A 
058f8     05 79 CB 9B 
058fc     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
05900                 | 
05900     28 12 64 FD | hdmi            setq    #9
05904     00 E7 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
05908     00 30 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
0590c     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
05910     C0 01 07 F6 |                 mov     ii,#448                          '7 << 6          
05914     7C 01 03 F1 |                 add     ii,hbase
05918     58 00 63 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
0591c     7B 0B 80 FF 
05920     80 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
05924                 | 
05924     66 66 86 FF 
05928     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
0592c                 | 
0592c                 | 
0592c                 | ''--------  frame rendering main loop  ---------------------------------------------------
0592c                 | 
0592c                 | p101
0592c     28 14 64 FD |                 setq    #10
05930     00 E7 06 FB |                 rdlong  framebuf,  ptra
05934     28 1E 64 FD |                 setq    #15
05938     78 A3 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
0593c     75 A1 02 FB |                 rdlong  border,borderptr
05940                 | 
05940     01 CC 06 F1 |                 add     frames,#1
05944     7A FD 02 F6 |                 mov     dlptr2,dlptr
05948                 | 
05948     77 CF 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
0594c     67 D1 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
05950     67 CB F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
05954     FF CE 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
05958                 |  '' up porch
05958                 | 
05958     4C 05 03 F6 |                 mov     hsync0,sync_000                  '
0595c     4D 07 03 F6 |                 mov     hsync1,sync_001
05960     3B B0 46 FB |                 callpa  i_upporch ,#blank
05964     76 01 68 FC |                 wrlong  #0,vblankptr
05968                 |                 
05968     1F F2 16 F4 |                 testb   paletteptr,#31 wc
0596c     29 FE 65 3D |          if_nc  setq2   #255
05970     79 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
05974                 |  
05974                 | '' cursor blinking
05974                 | 
05974     04 CC 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
05978     81 CE 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
0597c                 | 
0597c                 | '' main screen
0597c                 | 
0597c     00 C6 06 F6 |                 mov linenum,#0
05980     00 20 07 F6 |                 mov rcnt,#0
05984     00 24 07 F6 |                 mov rcnt2a,#0
05988                 | 
05988                 | 
05988     00 20 0F F2 | p301            cmp rcnt,#0 wz
0598c     18 00 90 AD |         if_z    jmp #p306
05990     01 20 87 F1 |                 sub rcnt,#1
05994     94 FF 02 F6 |                 mov dl,rdl
05998     91 25 0B F7 |                 incmod rcnt2a,rcnt2 wz
0599c     93 FF 02 A1 |    if_z         add dl,roffset  
059a0     7F 29 03 F6 |                 mov rdl,dl
059a4     04 00 90 FD |                 jmp #p307          
059a8                 |           
059a8                 |                 
059a8     7E FF 02 FB | p306            rdlong  dl,dlptr2                         'read DL enry
059ac     7F 03 1B F6 | p307            mov     framebuf2,dl wcz                  'move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
059b0     6A 02 7B FD |                 rczr    framebuf2 wcz                     'check if 2 lower bits=11. If yes, this is special command
059b4     44 00 90 7D |    if_nz_or_nc  jmp     #p303                             'if not, this is standard DL entry - start to interpret the line at p303 
059b8                 | 
059b8                 | '' Special entry:
059b8                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
059b8                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
059b8                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
059b8                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0010_0011    set border color to palette entry #p
059b8                 | '' - set font size          %0000_0000_0000_0000_0000_ssss_0011_0011    ssss - bit for font size, 3=8, 4=16
059b8                 | '' - set live change        %aaaa_aaaa_aaaa_aaaa_nnnn_cccc_cccc_1111    a: 16 bit addr. 00 added to 18 aligned, 2 upper bits=11; nnnn: new font line if charmode cccc cpl to change
059b8                 | '' - set hscroll            %0000_0000_0000_0000_0000_ssss_0100_0011
059b8                 | 
059b8                 | '' todo: set horizontal scroll (if needed)
059b8                 | 
059b8     04 FC 06 F1 |                  add dlptr2,#4               ' move the pointer to the next DL entry    
059bc     02 02 67 F0 |                  shl framebuf2,#2            ' restore the DL entry after rczr, now 2 lower bits are 00
059c0     81 2B 43 F8 |                  getnib dlc,framebuf2,#0    
059c4     04 2A 0F F2 |                  cmp dlc,#%0100 wz            ' %01 special command=repeat
059c8     10 00 90 AD |                  if_z jmp #p390              ' start interpreting 'repeat' at p390
059cc                 |                  
059cc     00 2A 0F F2 |                  cmp dlc,#0 wz                  ' 00 - set border/font
059d0                 |   '               if_z jmp p391
059d0                 |                         
059d0     00 00 00 00 |                   nop   
059d4     00 00 00 00 |                   nop          
059d8                 |                              
059d8     AC FF 9F FD | p391             jmp #p301                   ' Instruction unknown or unimplemented:ignore 
059dc                 | 
059dc                 | 'p391         '    getnib dlc,framebuf2,#1
059dc                 | 		'		 cmp dlc,#%0011 wz          ' 0011: set font size
059dc                 | 	'	if_z     getnib fontsize,framebuf2,#2		 
059dc                 |     '    if_z     jmp #p301
059dc                 |         
059dc                 |         '         jmp #p301    ' not implemented yet
059dc                 |         
059dc                 | 
059dc                 | 
059dc     7E 29 03 FB | p390             rdlong rdl,dlptr2
059e0     81 21 3B F9 |                  getword rcnt,framebuf2,#1   ' nnnn_nnnn_nnqq_qqmm_mmmm_mmmm_mm01_1100
059e4     04 20 47 F0 |                  shr rcnt,#4                 ' nnnn_nnnn_nnqq_qqmm ->4 =0000_nnnn_nnnn_nnnn_nnqq (!)
059e8                 |              
059e8     81 23 63 F8 |                  getnib rcnt2,framebuf2,#4
059ec     81 27 33 F9 |                  getword roffset,framebuf2,#0
059f0                 |                 
059f0     04 26 47 F0 |                  shr roffset,#4
059f4     0C 26 67 F0 |                  shl roffset,#12
059f8                 |   
059f8     8C FF 9F FD |                  jmp #p301
059fc                 |                  
059fc                 |                  
059fc                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
059fc     0C 02 47 F0 |                 shr     framebuf2,#12
05a00     02 02 67 F0 |                 shl     framebuf2,#2
05a04                 | 
05a04     7F 0B E3 F8 |                 getbyte t1,dl,#0
05a08     00 0A 0F F2 |                 cmp     t1,#0 wz
05a0c     34 00 90 AD |     if_z        jmp     #borderline
05a10                 | 
05a10     00 FE 16 F4 |                  testb   dl,#0  wc                     ' bit 0 set = text OR extended:TODO
05a14     50 00 90 CD |           if_c   jmp     #textline
05a18     50 02 90 3D |           if_nc  jmp     #graphline
05a1c                 | '
05a1c     01 C6 06 F1 | p302            add     linenum,#1
05a20     04 FC 06 F1 |                 add     dlptr2,#4
05a24     60 C7 0A F2 |                 cmp     linenum,i_totalvis  wz
05a28     5C FF 9F 5D |          if_nz  jmp     #p301
05a2c                 | 
05a2c     76 03 68 FC | p112            wrlong  #1,vblankptr
05a30     07 B4 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
05a34                 | 
05a34     4E 05 03 F6 |                 mov     hsync0,sync_222                 'vsync on
05a38     4F 07 03 F6 |                 mov     hsync1,sync_223
05a3c     04 B2 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
05a40     E8 FE 9F FD |                 jmp     #p101
05a44                 | 
05a44                 | '' ---------------  END of frame rendering loop -------------------------------------------
05a44                 | 
05a44                 | 
05a44     14 00 B0 FD | borderline      call    #hsync                      ' make a border
05a48     50 A9 C2 FC |                 xcont   m_vi,border
05a4c     CC FF 9F FD |                 jmp     #p302
05a50                 | 
05a50                 | 
05a50     08 00 B0 FD | blank           call    #hsync                          'blank lines
05a54     82 A9 C2 FC |                 xcont   m_vi,hsync0
05a58     FD ED 6F 0B |         _ret_   djnz    pa,#blank
05a5c                 | 
05a5c     82 A3 C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
05a60     83 A5 B2 FC |                 xzero   m_sn,hsync1
05a64     82 A7 C2 0C |         _ret_   xcont   m_bv,hsync0
05a68                 | 
05a68                 | 
05a68                 | 
05a68                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
05a68                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
05a68                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
05a68                 | 
05a68                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
05a68                 | 
05a68     67 D5 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
05a6c                 | 
05a6c     7F 09 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
05a70     7F 1F 5B F8 |                 getnib  zoom, dl,#3
05a74     03 1E 07 F5 |                 and             zoom, #3
05a78                 | 
05a78                 | 
05a78                 | 
05a78     7F C5 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
05a7c     02 C4 46 F0 |                 shr     linestart,#2                    ' scanline to char line
05a80     3F C4 06 F5 |                 and     linestart,#63
05a84     68 C5 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
05a88     81 D4 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
05a8c                 | 
05a8c     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
05a90                 | 
05a90                 |                        ' if fontline =0, get a border color
05a90                 | 
05a90     55 0B 33 F9 | p102            getword t1,m_border,#0
05a94     00 0A 0F F2 |                 cmp     t1, #0 wz
05a98     50 AB C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
05a9c                 | 
05a9c     65 09 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
05aa0     81 D2 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
05aa4     6A D3 02 36 |          if_nc  mov     cursorpos,cursorpos2
05aa8     01 D2 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
05aac     74 0D 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
05ab0     84 0D 03 F1 |                 add     t2,fontline                     ' add a current font line
05ab4     56 C3 02 F6 |                 mov m_lut2, m_lut1
05ab8     6E C3 02 F1 |                 add m_lut2, lutt1
05abc     5C 17 03 F6 |                 mov cpl2,i_cpl
05ac0                 | 
05ac0     02 1E 0F F2 |                cmp zoom,#2 wz
05ac4     E4 00 90 AD |           if_z jmp #p420
05ac8     01 1E 0F F2 |                cmp zoom,#1 wz
05acc     64 00 90 AD |           if_z jmp #p410
05ad0     00 1E 0F F2 |                 cmp zoom,#0 wz
05ad4     04 00 90 AD |           if_z jmp #p400
05ad8     50 01 90 FD |                jmp #p430
05adc                 | 
05adc                 |                    '
05adc                 |  ''---------------------------------------------------------------------------------------------------------
05adc     81 19 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
05ae0     8C 1B F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05ae4     8C 1D FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05ae8     8C 19 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05aec     04 02 07 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05af0     97 19 63 F0 |                         shl     char,fontsize         ' 1 char=16 bytes in font def               '6
05af4     86 19 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05af8     8C 0B C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05afc     01 D2 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05b00     FF 0A 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05b04                 | 
05b04     85 C3 C2 FC |                         xcont m_lut2,t1
05b08                 | 
05b08     8D 13 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05b0c     64 13 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05b10     01 C8 06 F1 |                         add     lutaddr,#1                                                          '15
05b14     8E 13 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05b18     64 13 33 FC |                         wrlut   t5,lutaddr                                                          '17
05b1c     01 C8 86 F1 |                         sub     lutaddr,#1
05b20                 | 
05b20     10 C2 E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05b24     10 AC E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05b28     20 C8 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05b2c                 | 
05b2c     EB 17 6F FB |                         djnz   cpl2,#p400
05b30                 |                         
05b30                 | 
05b30                 |                         
05b30     28 01 90 FD |  p401                   jmp    #p103
05b34                 | 
05b34                 | ''------------------------------------------------------------------------------------------------------------
05b34                 | 
05b34     01 16 47 F0 |  p410                   shr cpl2,#1
05b38                 | 
05b38                 | ''---------------------------------------------------------------------------------------------------------
05b38     81 19 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
05b3c     8C 1B F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05b40     8C 1D FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05b44     8C 19 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05b48     04 02 07 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05b4c     97 19 63 F0 |                         shl     char,fontsize           ' 1 char=16 bytes in font def               '6
05b50     86 19 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05b54     8C 0B C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05b58     01 D2 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05b5c     FF 0A 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05b60                 | 
05b60                 | 
05b60     85 0F 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
05b64     85 0B 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
05b68     63 0A 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
05b6c     03 0A 07 FA |                         mul t1,#3
05b70     85 C3 C2 FC |                         xcont m_lut2,t1
05b74     8D 13 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05b78     64 13 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05b7c     01 C8 06 F1 |                         add     lutaddr,#1                                                          '15
05b80     8E 13 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05b84     64 13 33 FC |                         wrlut   t5,lutaddr                                                          '17
05b88     01 C8 86 F1 |                         sub     lutaddr,#1
05b8c     63 0E 63 FD |                         mergew t3
05b90     03 0E 07 FA |                         mul t3,#3
05b94     87 C3 C2 FC |                         xcont m_lut2,t3
05b98                 | 
05b98     10 C2 E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05b9c     10 AC E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05ba0                 | 
05ba0     20 C8 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05ba4                 | 
05ba4     E4 17 6F FB |                         djnz   cpl2,#p412
05ba8     B0 00 90 FD |  p411                   jmp    #p103
05bac                 | 
05bac                 | ''------------------------------------------------------------------------------------------------------------
05bac                 | 
05bac     02 16 47 F0 |  p420                   shr cpl2,#2
05bb0                 | 
05bb0                 | ''---------------------------------------------------------------------------------------
05bb0     81 19 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
05bb4     8C 1B F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05bb8     8C 1D FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05bbc     8C 19 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05bc0     04 02 07 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05bc4     97 19 63 F0 |                         shl     char,fontsize           ' 1 char=16 bytes in font def               '6
05bc8     86 19 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05bcc     8C 0B C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05bd0     01 D2 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05bd4     FF 0A 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05bd8                 | 
05bd8     61 0A 63 FD |                         mergeb t1
05bdc     85 0F 3B F9 |                         getword t3,t1,#1
05be0     0F 0A 07 FA |                         mul t1,#15
05be4     85 C3 C2 FC |                         xcont m_lut2,t1
05be8                 | 
05be8     8D 13 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05bec     64 13 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05bf0     01 C8 06 F1 |                         add     lutaddr,#1                                                          '15
05bf4     8E 13 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05bf8     64 13 33 FC |                         wrlut   t5,lutaddr                                                          '17
05bfc     01 C8 86 F1 |                         sub     lutaddr,#1
05c00                 | 
05c00     85 11 EB F8 |                         getbyte t4,t1,#1        '
05c04     88 C3 C2 FC |                         xcont m_lut2,t4                                                                                                           '
05c08                 | 
05c08     0F 0E 07 FA |                         mul t3,#15
05c0c     87 C3 C2 FC |                         xcont m_lut2,t3
05c10                 | 
05c10     87 13 EB F8 |                         getbyte t5,t3,#1
05c14     89 C3 C2 FC |                         xcont m_lut2, t5
05c18     10 C2 E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05c1c     10 AC E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05c20                 | 
05c20     20 C8 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05c24                 | 
05c24     E2 17 6F FB |                         djnz   cpl2,#p422
05c28     30 00 90 FD |  p421                   jmp    #p103
05c2c                 | 
05c2c                 | '--------------------------------------------------------------------------------------------------------------
05c2c                 | 
05c2c     81 19 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
05c30     8C 1B F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05c34     8C 1D FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05c38                 | 
05c38     00 C2 C6 FC |                         xcont m_lut2,#0
05c3c                 | 
05c3c     8D 13 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05c40     64 13 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05c44     01 C8 06 F1 |                         add     lutaddr,#1                                                          '15
05c48     8E 13 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05c4c     64 13 33 FC |                         wrlut   t5,lutaddr                                                          '17
05c50     01 C8 86 F1 |                         sub     lutaddr,#1
05c54                 | 
05c54     F5 17 6F FB |                         djnz   cpl2,#p430
05c58     00 00 90 FD |  p431                   jmp    #p103
05c5c                 | 
05c5c                 | ''------------------------------------------------------------------------------------------------------------
05c5c                 | 
05c5c                 | 
05c5c                 | 
05c5c     55 2D 33 F9 | p103            getword  mb2,m_border,#0
05c60     00 2C 0F F2 |                 cmp      mb2, #0 wz
05c64     50 AB C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
05c68                 | 
05c68     B0 FD 9F FD |                 jmp #p302
05c6c                 | 
05c6c                 | '' -------------------------------------- END of text line ---------------------------------
05c6c                 | 
05c6c                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
05c6c                 | 
05c6c     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
05c70                 | 
05c70                 | 
05c70     55 2D 33 F9 | p202            getword mb2,m_border,#0
05c74     00 2C 0F F2 |                 cmp     mb2, #0 wz
05c78     50 AB C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
05c7c                 | 
05c7c                 | '----------------------------------------- display pixels
05c7c                 | 
05c7c     56 C3 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
05c80     5C 17 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
05c84                 | 
05c84     7F 1F 5B F8 |                 getnib  zoom, dl,#3
05c88     03 1E 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
05c8c                 | 
05c8c     7F C5 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
05c90     0C C4 06 F5 |                 and     colordepth,#12
05c94                 | 
05c94     00 C4 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
05c98     6F C3 02 A1 |           if_z  add     m_lut2,lutg1
05c9c     64 00 90 AD |           if_z  jmp     #p240
05ca0                 | 
05ca0     04 C4 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
05ca4     70 C3 02 A1 |           if_z  add     m_lut2,lutg2
05ca8     98 00 90 AD |           if_z  jmp     #p250
05cac                 | 
05cac     08 C4 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
05cb0     71 C3 02 A1 |           if_z  add     m_lut2,lutg4
05cb4     FC 00 90 AD |           if_z  jmp     #p260
05cb8                 | 
05cb8     72 C3 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
05cbc                 | 
05cbc                 | '' --- 8 bit color modes
05cbc                 | 
05cbc     00 1E 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
05cc0     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
05cc4                 | 
05cc4     01 1E 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
05cc8     2A 14 07 A6 |                 if_z mov skippattern,#%101010
05ccc                 |        
05ccc                 |  '  
05ccc     02 1E 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
05cd0     25 14 07 A6 |                 if_z mov skippattern,#%100101
05cd4                 |     
05cd4                 |  
05cd4     05 14 07 56 |                 if_nz mov skippattern,#%000101
05cd8     01 16 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
05cdc                 |         
05cdc                 | 
05cdc                 |         
05cdc     81 19 03 FB | p235               rdlong  char,framebuf2
05ce0     32 14 63 FD |                    skipf skippattern
05ce4     02 02 07 F1 |                    add     framebuf2,#2             '0 1 1
05ce8     01 02 07 F1 |                    add     framebuf2,#1             '1 0 0
05cec     50 18 FF F9 |                    movbyts char,#%01010000          '0 1 1
05cf0     00 18 FF F9 |                    movbyts char,#%00000000          '1 0 0
05cf4     8C C3 C2 FC |                    xcont   m_lut2,char              '0 0 0
05cf8     8C C3 C2 FC |                    xcont   m_lut2,char              '1 1 0
05cfc     F7 17 6F FB |                    djnz    cpl2,#p235
05d00                 | 
05d00     20 01 90 FD |                jmp    #p203
05d04                 |                   
05d04                 | 
05d04                 | 
05d04                 | '' --- 1 bit color modes
05d04                 | 
05d04     00 1E 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
05d08     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
05d0c                 | 
05d0c     01 1E 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
05d10     13 14 07 A6 |        if_z   mov skippattern,#%10011
05d14     08 14 07 56 |        if_nz  mov skippattern,#%01000
05d18                 | 
05d18                 | 
05d18     81 19 E3 FA | p241               rdword  char,framebuf2
05d1c     44 18 FF F9 |                    movbyts char,#%01000100
05d20     63 18 63 FD |                    mergew  char
05d24     32 14 63 FD |                    skipf skippattern
05d28     44 18 FF F9 |                    movbyts char,#%01000100         ' 1 0
05d2c     63 18 63 FD |                    mergew  char                    ' 1 0
05d30     8C C3 C2 FC |                    xcont   m_lut2,char             ' 0 0
05d34     02 02 07 F1 |                    add     framebuf2,#2                    ' 0 1
05d38     01 02 07 F1 |                    add     framebuf2,#1                ' 1 0
05d3c     F6 17 6F FB |                    djnz   cpl2,#p241
05d40                 | 
05d40                 | 
05d40     E0 00 90 FD |                jmp    #p203
05d44                 | 
05d44                 | '' --- 2 bit color modes
05d44                 | 
05d44     00 1E 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
05d48     C8 00 90 AD |        if_z   jmp #p251
05d4c                 | 
05d4c     01 1E 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
05d50     30 00 90 AD |        if_z   jmp #p252
05d54                 | 
05d54                 | 
05d54     81 19 C3 FA | p254               rdbyte char,framebuf2
05d58     04 12 07 F6 |                    mov  t5,#4
05d5c     02 18 67 F0 | p255               shl  char,#2
05d60     8C 0B 53 F8 |                    getnib  t1,char,#2
05d64     03 0A 07 F5 |                    and     t1,#3
05d68     55 0A 07 FA |                    mul     t1,#$55
05d6c     85 0D 03 F9 |                    rolbyte  t2,t1,#0
05d70     FA 13 6F FB |                    djnz    t5,#p255
05d74     86 C3 C2 FC |                    xcont   m_lut2,t2
05d78     01 02 07 F1 |                    add     framebuf2,#1
05d7c     F5 17 6F FB |                    djnz    cpl2,#p254
05d80     A0 00 90 FD |                    jmp     #p203
05d84                 | 
05d84     81 19 E3 FA | p252               rdword char,framebuf2
05d88     08 12 07 F6 |                    mov  t5,#8
05d8c     02 18 67 F0 | p253               shl  char,#2
05d90     8C 0B 63 F8 |                    getnib  t1,char,#4
05d94     03 0A 07 F5 |                    and     t1,#3
05d98     05 0A 07 FA |                    mul     t1,#5
05d9c     85 0D 83 F8 |                    rolnib  t2,t1,#0
05da0     FA 13 6F FB |                    djnz    t5,#p253
05da4     86 C3 C2 FC |                    xcont   m_lut2,t2
05da8     02 02 07 F1 |                    add     framebuf2,#2
05dac     F5 17 6F FB |                    djnz    cpl2,#p252
05db0     70 00 90 FD |                    jmp     #p203
05db4                 | 
05db4                 | '' ------ 4 bit color modes
05db4                 | 
05db4     00 1E 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
05db8     58 00 90 AD |        if_z   jmp #p251
05dbc                 | 
05dbc     01 1E 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
05dc0     2C 00 90 AD |        if_z   jmp #p262
05dc4                 | 
05dc4                 | 
05dc4     81 19 C3 FA | p263               rdbyte char,framebuf2
05dc8     02 0A DC FC |                            rep #5,#2
05dcc     8C 0D 8B F8 |                              rolnib t2,char,#1
05dd0     8C 0D 8B F8 |                                  rolnib t2,char,#1
05dd4     8C 0D 8B F8 |                              rolnib t2,char,#1
05dd8     8C 0D 8B F8 |                                  rolnib t2,char,#1
05ddc     04 18 67 F0 |                              shl char,#4
05de0     86 C3 C2 FC |                    xcont   m_lut2,t2
05de4     01 02 07 F1 |                    add     framebuf2,#1
05de8     F6 17 6F FB |                    djnz    cpl2,#p263
05dec     34 00 90 FD |                    jmp     #p203
05df0                 | 
05df0     81 19 E3 FA | p262               rdword  char,framebuf2
05df4     04 06 DC FC |                            rep #3,#4
05df8     8C 0D 9B F8 |                              rolnib t2,char,#3
05dfc     8C 0D 9B F8 |                                  rolnib t2,char,#3
05e00     04 18 67 F0 |                              shl char,#4
05e04     86 C3 C2 FC |                    xcont   m_lut2,t2
05e08     02 02 07 F1 |                    add     framebuf2,#2
05e0c     F8 17 6F FB |                    djnz    cpl2,#p262
05e10     10 00 90 FD |                    jmp     #p203
05e14                 | 
05e14                 | ''---------- all color modes without zoom
05e14                 | 
05e14     8B 07 D8 FC | p251               rep  #3,cpl2
05e18     81 19 03 FB |                    rdlong  char,framebuf2
05e1c     04 02 07 F1 |                    add     framebuf2,#4
05e20     8C C3 C2 FC |                    xcont   m_lut2,char
05e24                 |           
05e24                 |  ''-----------------------------------------------------------------------------------------
05e24                 | p203           ' getword  mb2,m_border,#0
05e24     00 2C 0F F2 |                 cmp      mb2, #0 wz
05e28     50 AB C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
05e2c                 | 
05e2c     EC FB 9F FD |                 jmp #p302
05e30                 | 
05e30                 | '' -------------------------------------- END of graph  line ---------------------------------
05e30                 | 
05e30                 | '' consts and vars
05e30                 | 
05e30     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
05e34     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
05e38     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
05e3c     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
05e40                 | 
05e40     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
05e44                 | 
05e44                 | '------ these longs will be set by setmode function
05e44                 | 
05e44     00 00 00 00 | m_bs            long    0        'blanks before sync
05e48     00 00 00 00 | m_sn            long    0        'sync
05e4c     00 00 00 00 | m_bv            long    0        'blanks before visible
05e50     00 00 00 00 | m_vi            long    0        'visible pixels #
05e54     00 00 00 00 | m_border        long    0        'left/right borders
05e58     00 00 00 00 | m_lut1          long    0        'characters
05e5c     00 00 00 00 | i_vborder       long    0        'up/down borders
05e60     00 00 00 00 | i_upporch       long    0        'up porch lines
05e64     00 00 00 00 | i_vsync         long    0        'vsync lines
05e68     00 00 00 00 | i_downporch     long    0        'down porch lines
05e6c     00 00 00 00 | i_modenum       long    0        'mode #
05e70     00 00 00 00 | i_cpl           long    0        'chars/longs per line
05e74     00 00 00 00 | i_lines         long    0        'scanlines #
05e78     00 00 00 00 | i_clock         long    0
05e7c     00 00 00 00 | i_hubset        long    0
05e80     00 00 00 00 | i_totalvis      long    0
05e84                 | 
05e84                 | '-------------------------------------
05e84                 | 
05e84     00 00 00 00 | m_lut2          long    0
05e88                 | 
05e88                 | colordepth
05e88     00 00 00 00 | linestart       long    0
05e8c     00 00 00 00 | linenum         long    0
05e90     00 01 00 00 | lutaddr         long    256
05e94                 | 
05e94     0E 00 00 00 | cursorsh        long    14
05e98     00 00 00 00 | frames          long    0
05e9c     00 00 00 00 | cursorx         long    0
05ea0     00 00 00 00 | cursory         long    0
05ea4     00 00 00 00 | cursorpos       long    0
05ea8     00 00 00 00 | cursorpos2      long    0
05eac     00 00 00 00 | fontstart       long    0
05eb0     00 00 00 00 | border2         long 0
05eb4     00 00 81 70 | lutiv           long $70810000
05eb8     00 00 88 00 | lutt1           long $00880000
05ebc     00 00 80 00 | lutg1           long $00800000
05ec0     00 00 80 10 | lutg2           long $10800000
05ec4     00 00 80 20 | lutg4           long $20800000
05ec8     00 00 80 30 | lutg8           long $30800000
05ecc     00 00 00 00 | framebuf        long 0
05ed0     00 00 00 00 | fontbuf         long 0
05ed4     00 00 00 00 | borderptr       long 0
05ed8     00 00 00 00 | vblankptr       long 0
05edc     00 00 00 00 | cursorptr       long 0
05ee0     00 00 00 00 | modeptr         long 0
05ee4     00 00 00 00 | paletteptr      long 0
05ee8     00 00 00 00 | dlptr           long 0
05eec                 | 
05eec     01 00 00 00 | fontnumptr      long     1
05ef0     01 00 00 00 | hbase           long     1
05ef4     01 00 00 00 | borderptr2      long     1
05ef8     01 00 00 00 | dlptr2 long 1
05efc     01 00 00 00 | dl              long 1
05f00     01 00 00 00 | ii              long     1
05f04     01 00 00 00 | framebuf2       long     1
05f08     01 00 00 00 | hsync0          long     1
05f0c     01 00 00 00 | hsync1          long     1
05f10     01 00 00 00 | fontline        long     1
05f14     01 00 00 00 | t1              long     1
05f18     01 00 00 00 | t2              long     1
05f1c     01 00 00 00 | t3 long 1
05f20     01 00 00 00 | t4 long 1
05f24     01 00 00 00 | t5 long 1
05f28     01 00 00 00 | skippattern long 1
05f2c     01 00 00 00 | cpl2 long 1
05f30     01 00 00 00 | char            long     1
05f34     01 00 00 00 | backcolor       long     1
05f38     01 00 00 00 | charcolor       long     1
05f3c     01 00 00 00 | zoom long 1
05f40     00 00 00 00 | rcnt long 0 'dl repeat count
05f44     00 00 00 00 | rcnt2 long 0
05f48     00 00 00 00 | rcnt2a long 0
05f4c     00 00 00 00 | roffset long 0
05f50     00 00 00 00 | rdl long 0  'dl repeat line
05f54     00 00 00 00 | dlc long 0 'dl command
05f58     00 00 00 00 | mb2 long 0
05f5c     03 00 00 00 | fontsize        long 3
05f60     00 00 00 00 | aend             long 0
05f64                 |                 fit     496                     '
05f64                 | __system__dat_
05f64     00 00 00 00 
05f68     00 00 00 00 | 	byte	$00[8]
05f6c     03 00 00 00 
05f70     00 00 00 00 
05f74     00 00 00 00 
05f78     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05f7c                 | __heap_base
05f7c     00 00 00 00 
      ...             
06f7c     00 00 00 00 
06f80     00 00 00 00 | 	long	0[1026]
06f84                 | objmem
06f84     00 00 00 00 
      ...             
07068     00 00 00 00 
0706c     00 00 00 00 | 	long	0[59]
07070                 | stackspace
07070     00 00 00 00 | 	long	0[1]
07074 0dd             | 	org	COG_BSS_START
07074 0dd             | _var01
07074 0dd             | 	res	1
07074 0de             | _var02
07074 0de             | 	res	1
07074 0df             | _var03
07074 0df             | 	res	1
07074 0e0             | _var04
07074 0e0             | 	res	1
07074 0e1             | _var05
07074 0e1             | 	res	1
07074 0e2             | _var06
07074 0e2             | 	res	1
07074 0e3             | _var07
07074 0e3             | 	res	1
07074 0e4             | _var08
07074 0e4             | 	res	1
07074 0e5             | _var09
07074 0e5             | 	res	1
07074 0e6             | _var10
07074 0e6             | 	res	1
07074 0e7             | _var11
07074 0e7             | 	res	1
07074 0e8             | _var12
07074 0e8             | 	res	1
07074 0e9             | _var13
07074 0e9             | 	res	1
07074 0ea             | _var14
07074 0ea             | 	res	1
07074 0eb             | _var15
07074 0eb             | 	res	1
07074 0ec             | _var16
07074 0ec             | 	res	1
07074 0ed             | _var17
07074 0ed             | 	res	1
07074 0ee             | _var18
07074 0ee             | 	res	1
07074 0ef             | _var19
07074 0ef             | 	res	1
07074 0f0             | _var20
07074 0f0             | 	res	1
07074 0f1             | _var21
07074 0f1             | 	res	1
07074 0f2             | _var22
07074 0f2             | 	res	1
07074 0f3             | _var23
07074 0f3             | 	res	1
07074 0f4             | _var24
07074 0f4             | 	res	1
07074 0f5             | _var25
07074 0f5             | 	res	1
07074 0f6             | _var26
07074 0f6             | 	res	1
07074 0f7             | _var27
07074 0f7             | 	res	1
07074 0f8             | _var28
07074 0f8             | 	res	1
07074 0f9             | _var29
07074 0f9             | 	res	1
07074 0fa             | _var30
07074 0fa             | 	res	1
07074 0fb             | _var31
07074 0fb             | 	res	1
07074 0fc             | _var32
07074 0fc             | 	res	1
07074 0fd             | arg01
07074 0fd             | 	res	1
07074 0fe             | arg02
07074 0fe             | 	res	1
07074 0ff             | arg03
07074 0ff             | 	res	1
07074 100             | arg04
07074 100             | 	res	1
07074 101             | arg05
07074 101             | 	res	1
07074 102             | local01
07074 102             | 	res	1
07074 103             | local02
07074 103             | 	res	1
07074 104             | local03
07074 104             | 	res	1
07074 105             | local04
07074 105             | 	res	1
07074 106             | local05
07074 106             | 	res	1
07074 107             | local06
07074 107             | 	res	1
07074 108             | local07
07074 108             | 	res	1
07074 109             | local08
07074 109             | 	res	1
07074 10a             | local09
07074 10a             | 	res	1
07074 10b             | local10
07074 10b             | 	res	1
07074 10c             | local11
07074 10c             | 	res	1
07074 10d             | local12
07074 10d             | 	res	1
07074 10e             | local13
07074 10e             | 	res	1
07074 10f             | local14
07074 10f             | 	res	1
07074 110             | local15
07074 110             | 	res	1
07074 111             | local16
07074 111             | 	res	1
07074 112             | local17
07074 112             | 	res	1
07074 113             | local18
07074 113             | 	res	1
07074 114             | muldiva_
07074 114             | 	res	1
07074 115             | muldivb_
07074 115             | 	res	1
07074 116             | 	fit	480
07074 116             | 
